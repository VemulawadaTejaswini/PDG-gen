Line_2 $$ public void testCyclicRename() throws Exception -->Line_27 $$ commits.add(modify(filePath))[ CD ]
Line_13 $$ filePath = commit.myPath-->Line_25 $$ filePath = commit.myPath[ FD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_30 $$ commits.add(commit)[ CD ]
Line_12 $$ TestCommit commit = move(filePath, mkdir("codeInside-impl"), "Moved from source to codeInside-impl")-->Line_30 $$ commits.add(commit)[ FD ]
Line_10 $$ String filePath = initialFile.getPath()-->Line_19 $$ commits.add(modify(filePath))[ FD ]
Line_28 $$ commit = move(filePath, mkdir("java"), "Moved from source to java")-->Line_30 $$ commits.add(commit)[ FD ]
Line_12 $$ TestCommit commit = move(filePath, mkdir("codeInside-impl"), "Moved from source to codeInside-impl")-->Line_28 $$ commit = move(filePath, mkdir("java"), "Moved from source to java")[ FD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_35 $$ List<VcsFileRevision> history = GitHistoryUtils.history(myProject, VcsUtil.getFilePath(vFile))[ CD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_28 $$ commit = move(filePath, mkdir("java"), "Moved from source to java")[ CD ]
Line_25 $$ filePath = commit.myPath-->Line_31 $$ commits.add(modify(filePath))[ FD ]
Line_21 $$ filePath = commit.myPath-->Line_31 $$ commits.add(modify(filePath))[ FD ]
Line_10 $$ String filePath = initialFile.getPath()-->Line_27 $$ commits.add(modify(filePath))[ FD ]
Line_12 $$ TestCommit commit = move(filePath, mkdir("codeInside-impl"), "Moved from source to codeInside-impl")-->Line_22 $$ commits.add(commit)[ FD ]
Line_13 $$ filePath = commit.myPath-->Line_16 $$ commit = move(filePath, mkdir("codeInside"), "Moved from codeInside-impl to codeInside")[ FD ]
Line_21 $$ filePath = commit.myPath-->Line_27 $$ commits.add(modify(filePath))[ FD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_20 $$ commit = move(filePath, mkdir("lang-impl"), "Moved from codeInside to lang-impl")[ CD ]
Line_13 $$ filePath = commit.myPath-->Line_17 $$ filePath = commit.myPath[ FD ]
Line_6 $$ String initMessage = "Created PostHighlightingPass.java in source"-->Line_7 $$ addCommit(initMessage)[ FD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_8 $$ String hash = last()[ CD ]
Line_20 $$ commit = move(filePath, mkdir("lang-impl"), "Moved from codeInside to lang-impl")-->Line_22 $$ commits.add(commit)[ FD ]
Line_3 $$ List<TestCommit> commits = new ArrayList<TestCommit>()-->Line_22 $$ commits.add(commit)[ FD ]
Line_29 $$ filePath = commit.myPath-->Line_31 $$ commits.add(modify(filePath))[ FD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_6 $$ String initMessage = "Created PostHighlightingPass.java in source"[ CD ]
Line_16 $$ commit = move(filePath, mkdir("codeInside"), "Moved from codeInside-impl to codeInside")-->Line_22 $$ commits.add(commit)[ FD ]
Line_3 $$ List<TestCommit> commits = new ArrayList<TestCommit>()-->Line_32 $$ Collections.reverse(commits)[ FD ]
Line_16 $$ commit = move(filePath, mkdir("codeInside"), "Moved from codeInside-impl to codeInside")-->Line_24 $$ commit = move(filePath, source, "Moved from lang-impl back to source")[ FD ]
Line_24 $$ commit = move(filePath, source, "Moved from lang-impl back to source")-->Line_26 $$ commits.add(commit)[ FD ]
Line_3 $$ List<TestCommit> commits = new ArrayList<TestCommit>()-->Line_11 $$ commits.add(modify(filePath))[ FD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_18 $$ commits.add(commit)[ CD ]
Line_21 $$ filePath = commit.myPath-->Line_24 $$ commit = move(filePath, source, "Moved from lang-impl back to source")[ FD ]
Line_13 $$ filePath = commit.myPath-->Line_27 $$ commits.add(modify(filePath))[ FD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_4 $$ File source = mkdir("source")[ CD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_36 $$ assertEquals("History size doesn't match. Actual history: \n" + toReadable(history), commits.size(), history.size())[ CD ]
Line_20 $$ commit = move(filePath, mkdir("lang-impl"), "Moved from codeInside to lang-impl")-->Line_26 $$ commits.add(commit)[ FD ]
Line_24 $$ commit = move(filePath, source, "Moved from lang-impl back to source")-->Line_30 $$ commits.add(commit)[ FD ]
Line_17 $$ filePath = commit.myPath-->Line_24 $$ commit = move(filePath, source, "Moved from lang-impl back to source")[ FD ]
Line_33 $$ VirtualFile vFile = VcsUtil.getVirtualFileWithRefresh(new File(filePath))-->Line_34 $$ assertNotNull(vFile)[ FD ]
Line_10 $$ String filePath = initialFile.getPath()-->Line_17 $$ filePath = commit.myPath[ FD ]
Line_5 $$ File initialFile = touch("source/PostHighlightingPass.java", "Initial content")-->Line_10 $$ String filePath = initialFile.getPath()[ FD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_19 $$ commits.add(modify(filePath))[ CD ]
Line_3 $$ List<TestCommit> commits = new ArrayList<TestCommit>()-->Line_26 $$ commits.add(commit)[ FD ]
Line_17 $$ filePath = commit.myPath-->Line_25 $$ filePath = commit.myPath[ FD ]
Line_10 $$ String filePath = initialFile.getPath()-->Line_21 $$ filePath = commit.myPath[ FD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_11 $$ commits.add(modify(filePath))[ CD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_24 $$ commit = move(filePath, source, "Moved from lang-impl back to source")[ CD ]
Line_35 $$ List<VcsFileRevision> history = GitHistoryUtils.history(myProject, VcsUtil.getFilePath(vFile))-->Line_37 $$ assertEquals("History is different.", toReadable(commits), toReadable(history))[ FD ]
Line_10 $$ String filePath = initialFile.getPath()-->Line_29 $$ filePath = commit.myPath[ FD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_15 $$ commits.add(modify(filePath))[ CD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_7 $$ addCommit(initMessage)[ CD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_25 $$ filePath = commit.myPath[ CD ]
Line_10 $$ String filePath = initialFile.getPath()-->Line_31 $$ commits.add(modify(filePath))[ FD ]
Line_24 $$ commit = move(filePath, source, "Moved from lang-impl back to source")-->Line_28 $$ commit = move(filePath, mkdir("java"), "Moved from source to java")[ FD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_34 $$ assertNotNull(vFile)[ CD ]
Line_17 $$ filePath = commit.myPath-->Line_31 $$ commits.add(modify(filePath))[ FD ]
Line_16 $$ commit = move(filePath, mkdir("codeInside"), "Moved from codeInside-impl to codeInside")-->Line_26 $$ commits.add(commit)[ FD ]
Line_25 $$ filePath = commit.myPath-->Line_29 $$ filePath = commit.myPath[ FD ]
Line_25 $$ filePath = commit.myPath-->Line_28 $$ commit = move(filePath, mkdir("java"), "Moved from source to java")[ FD ]
Line_3 $$ List<TestCommit> commits = new ArrayList<TestCommit>()-->Line_27 $$ commits.add(modify(filePath))[ FD ]
Line_17 $$ filePath = commit.myPath-->Line_19 $$ commits.add(modify(filePath))[ FD ]
Line_10 $$ String filePath = initialFile.getPath()-->Line_15 $$ commits.add(modify(filePath))[ FD ]
Line_20 $$ commit = move(filePath, mkdir("lang-impl"), "Moved from codeInside to lang-impl")-->Line_28 $$ commit = move(filePath, mkdir("java"), "Moved from source to java")[ FD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_37 $$ assertEquals("History is different.", toReadable(commits), toReadable(history))[ CD ]
Line_13 $$ filePath = commit.myPath-->Line_21 $$ filePath = commit.myPath[ FD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_22 $$ commits.add(commit)[ CD ]
Line_17 $$ filePath = commit.myPath-->Line_28 $$ commit = move(filePath, mkdir("java"), "Moved from source to java")[ FD ]
Line_21 $$ filePath = commit.myPath-->Line_23 $$ commits.add(modify(filePath))[ FD ]
Line_10 $$ String filePath = initialFile.getPath()-->Line_13 $$ filePath = commit.myPath[ FD ]
Line_13 $$ filePath = commit.myPath-->Line_23 $$ commits.add(modify(filePath))[ FD ]
Line_17 $$ filePath = commit.myPath-->Line_23 $$ commits.add(modify(filePath))[ FD ]
Line_3 $$ List<TestCommit> commits = new ArrayList<TestCommit>()-->Line_14 $$ commits.add(commit)[ FD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_3 $$ List<TestCommit> commits = new ArrayList<TestCommit>()[ CD ]
Line_12 $$ TestCommit commit = move(filePath, mkdir("codeInside-impl"), "Moved from source to codeInside-impl")-->Line_24 $$ commit = move(filePath, source, "Moved from lang-impl back to source")[ FD ]
Line_13 $$ filePath = commit.myPath-->Line_31 $$ commits.add(modify(filePath))[ FD ]
Line_13 $$ filePath = commit.myPath-->Line_29 $$ filePath = commit.myPath[ FD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_10 $$ String filePath = initialFile.getPath()[ CD ]
Line_16 $$ commit = move(filePath, mkdir("codeInside"), "Moved from codeInside-impl to codeInside")-->Line_20 $$ commit = move(filePath, mkdir("lang-impl"), "Moved from codeInside to lang-impl")[ FD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_33 $$ VirtualFile vFile = VcsUtil.getVirtualFileWithRefresh(new File(filePath))[ CD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_5 $$ File initialFile = touch("source/PostHighlightingPass.java", "Initial content")[ CD ]
Line_5 $$ File initialFile = touch("source/PostHighlightingPass.java", "Initial content")-->Line_9 $$ commits.add(new TestCommit(hash, initMessage, initialFile.getPath()))[ FD ]
Line_3 $$ List<TestCommit> commits = new ArrayList<TestCommit>()-->Line_37 $$ assertEquals("History is different.", toReadable(commits), toReadable(history))[ FD ]
Line_10 $$ String filePath = initialFile.getPath()-->Line_16 $$ commit = move(filePath, mkdir("codeInside"), "Moved from codeInside-impl to codeInside")[ FD ]
Line_21 $$ filePath = commit.myPath-->Line_25 $$ filePath = commit.myPath[ FD ]
Line_3 $$ List<TestCommit> commits = new ArrayList<TestCommit>()-->Line_30 $$ commits.add(commit)[ FD ]
Line_33 $$ VirtualFile vFile = VcsUtil.getVirtualFileWithRefresh(new File(filePath))-->Line_35 $$ List<VcsFileRevision> history = GitHistoryUtils.history(myProject, VcsUtil.getFilePath(vFile))[ FD ]
Line_20 $$ commit = move(filePath, mkdir("lang-impl"), "Moved from codeInside to lang-impl")-->Line_24 $$ commit = move(filePath, source, "Moved from lang-impl back to source")[ FD ]
Line_10 $$ String filePath = initialFile.getPath()-->Line_28 $$ commit = move(filePath, mkdir("java"), "Moved from source to java")[ FD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_23 $$ commits.add(modify(filePath))[ CD ]
Line_13 $$ filePath = commit.myPath-->Line_19 $$ commits.add(modify(filePath))[ FD ]
Line_3 $$ List<TestCommit> commits = new ArrayList<TestCommit>()-->Line_31 $$ commits.add(modify(filePath))[ FD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_31 $$ commits.add(modify(filePath))[ CD ]
Line_10 $$ String filePath = initialFile.getPath()-->Line_23 $$ commits.add(modify(filePath))[ FD ]
Line_3 $$ List<TestCommit> commits = new ArrayList<TestCommit>()-->Line_23 $$ commits.add(modify(filePath))[ FD ]
Line_3 $$ List<TestCommit> commits = new ArrayList<TestCommit>()-->Line_15 $$ commits.add(modify(filePath))[ FD ]
Line_12 $$ TestCommit commit = move(filePath, mkdir("codeInside-impl"), "Moved from source to codeInside-impl")-->Line_14 $$ commits.add(commit)[ FD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_29 $$ filePath = commit.myPath[ CD ]
Line_35 $$ List<VcsFileRevision> history = GitHistoryUtils.history(myProject, VcsUtil.getFilePath(vFile))-->Line_36 $$ assertEquals("History size doesn't match. Actual history: \n" + toReadable(history), commits.size(), history.size())[ FD ]
Line_13 $$ filePath = commit.myPath-->Line_15 $$ commits.add(modify(filePath))[ FD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_13 $$ filePath = commit.myPath[ CD ]
Line_21 $$ filePath = commit.myPath-->Line_29 $$ filePath = commit.myPath[ FD ]
Line_13 $$ filePath = commit.myPath-->Line_20 $$ commit = move(filePath, mkdir("lang-impl"), "Moved from codeInside to lang-impl")[ FD ]
Line_3 $$ List<TestCommit> commits = new ArrayList<TestCommit>()-->Line_36 $$ assertEquals("History size doesn't match. Actual history: \n" + toReadable(history), commits.size(), history.size())[ FD ]
Line_21 $$ filePath = commit.myPath-->Line_28 $$ commit = move(filePath, mkdir("java"), "Moved from source to java")[ FD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_21 $$ filePath = commit.myPath[ CD ]
Line_12 $$ TestCommit commit = move(filePath, mkdir("codeInside-impl"), "Moved from source to codeInside-impl")-->Line_16 $$ commit = move(filePath, mkdir("codeInside"), "Moved from codeInside-impl to codeInside")[ FD ]
Line_10 $$ String filePath = initialFile.getPath()-->Line_11 $$ commits.add(modify(filePath))[ FD ]
Line_17 $$ filePath = commit.myPath-->Line_29 $$ filePath = commit.myPath[ FD ]
Line_17 $$ filePath = commit.myPath-->Line_27 $$ commits.add(modify(filePath))[ FD ]
Line_10 $$ String filePath = initialFile.getPath()-->Line_24 $$ commit = move(filePath, source, "Moved from lang-impl back to source")[ FD ]
Line_12 $$ TestCommit commit = move(filePath, mkdir("codeInside-impl"), "Moved from source to codeInside-impl")-->Line_26 $$ commits.add(commit)[ FD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_14 $$ commits.add(commit)[ CD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_26 $$ commits.add(commit)[ CD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_17 $$ filePath = commit.myPath[ CD ]
Line_20 $$ commit = move(filePath, mkdir("lang-impl"), "Moved from codeInside to lang-impl")-->Line_30 $$ commits.add(commit)[ FD ]
Line_12 $$ TestCommit commit = move(filePath, mkdir("codeInside-impl"), "Moved from source to codeInside-impl")-->Line_20 $$ commit = move(filePath, mkdir("lang-impl"), "Moved from codeInside to lang-impl")[ FD ]
Line_16 $$ commit = move(filePath, mkdir("codeInside"), "Moved from codeInside-impl to codeInside")-->Line_18 $$ commits.add(commit)[ FD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_32 $$ Collections.reverse(commits)[ CD ]
Line_16 $$ commit = move(filePath, mkdir("codeInside"), "Moved from codeInside-impl to codeInside")-->Line_28 $$ commit = move(filePath, mkdir("java"), "Moved from source to java")[ FD ]
Line_13 $$ filePath = commit.myPath-->Line_24 $$ commit = move(filePath, source, "Moved from lang-impl back to source")[ FD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_9 $$ commits.add(new TestCommit(hash, initMessage, initialFile.getPath()))[ CD ]
Line_16 $$ commit = move(filePath, mkdir("codeInside"), "Moved from codeInside-impl to codeInside")-->Line_30 $$ commits.add(commit)[ FD ]
Line_3 $$ List<TestCommit> commits = new ArrayList<TestCommit>()-->Line_18 $$ commits.add(commit)[ FD ]
Line_10 $$ String filePath = initialFile.getPath()-->Line_20 $$ commit = move(filePath, mkdir("lang-impl"), "Moved from codeInside to lang-impl")[ FD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_12 $$ TestCommit commit = move(filePath, mkdir("codeInside-impl"), "Moved from source to codeInside-impl")[ CD ]
Line_13 $$ filePath = commit.myPath-->Line_28 $$ commit = move(filePath, mkdir("java"), "Moved from source to java")[ FD ]
Line_2 $$ public void testCyclicRename() throws Exception -->Line_16 $$ commit = move(filePath, mkdir("codeInside"), "Moved from codeInside-impl to codeInside")[ CD ]
Line_4 $$ File source = mkdir("source")-->Line_24 $$ commit = move(filePath, source, "Moved from lang-impl back to source")[ FD ]
Line_10 $$ String filePath = initialFile.getPath()-->Line_12 $$ TestCommit commit = move(filePath, mkdir("codeInside-impl"), "Moved from source to codeInside-impl")[ FD ]
Line_3 $$ List<TestCommit> commits = new ArrayList<TestCommit>()-->Line_9 $$ commits.add(new TestCommit(hash, initMessage, initialFile.getPath()))[ FD ]
Line_17 $$ filePath = commit.myPath-->Line_21 $$ filePath = commit.myPath[ FD ]
Line_3 $$ List<TestCommit> commits = new ArrayList<TestCommit>()-->Line_19 $$ commits.add(modify(filePath))[ FD ]
Line_25 $$ filePath = commit.myPath-->Line_27 $$ commits.add(modify(filePath))[ FD ]
Line_10 $$ String filePath = initialFile.getPath()-->Line_25 $$ filePath = commit.myPath[ FD ]
Line_17 $$ filePath = commit.myPath-->Line_20 $$ commit = move(filePath, mkdir("lang-impl"), "Moved from codeInside to lang-impl")[ FD ]
Line_12 $$ TestCommit commit = move(filePath, mkdir("codeInside-impl"), "Moved from source to codeInside-impl")-->Line_18 $$ commits.add(commit)[ FD ]
