Line_7 $$ Configuration conf = null-->Line_85 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, editsOnlyDir.getPath() + "," + nameAndEditsDir.getPath())[ FD ]
Line_51 $$ conf = new HdfsConfiguration()-->Line_70 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_51 $$ conf = new HdfsConfiguration()-->Line_69 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameOnlyDir.getPath() + "," + nameAndEditsDir.getPath())[ FD ]
Line_5 $$ Path file3 = new Path("TestNameEditsConfigs3")-->Line_93 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_7 $$ Configuration conf = null-->Line_69 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameOnlyDir.getPath() + "," + nameAndEditsDir.getPath())[ FD ]
Line_8 $$ FileSystem fileSys = null-->Line_62 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_17 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_36 $$ cluster.waitActive()[ FD ]
Line_7 $$ Configuration conf = null-->Line_70 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_51 $$ conf = new HdfsConfiguration()-->Line_52 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameOnlyDir.getPath())[ FD ]
Line_8 $$ FileSystem fileSys = null-->Line_94 $$ cleanupFile(fileSys, file3)[ FD ]
Line_8 $$ FileSystem fileSys = null-->Line_65 $$ fileSys.close()[ FD ]
Line_17 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_48 $$ cluster.shutdown()[ FD ]
Line_7 $$ Configuration conf = null-->Line_53 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, editsOnlyDir.getPath())[ FD ]
Line_4 $$ Path file2 = new Path("TestNameEditsConfigs2")-->Line_44 $$ DFSTestUtil.createFile(fileSys, file2, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_3 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_41 $$ assertTrue(fileSys.exists(file1))[ FD ]
Line_12 $$ conf = new HdfsConfiguration()-->Line_86 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_40 $$ fileSys = cluster.getFileSystem()-->Line_63 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_9 $$ File nameOnlyDir = new File(base_dir, "name")-->Line_29 $$ assertTrue(nameOnlyDir.mkdir())[ FD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_23 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_89 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_8 $$ FileSystem fileSys = null-->Line_45 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_28 $$ conf = new HdfsConfiguration()-->Line_70 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_55 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_56 $$ cluster.waitActive()[ FD ]
Line_7 $$ Configuration conf = null-->Line_31 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEditsDir.getPath() + "," + nameOnlyDir.getPath())[ FD ]
Line_8 $$ FileSystem fileSys = null-->Line_42 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_12 $$ conf = new HdfsConfiguration()-->Line_51 $$ conf = new HdfsConfiguration()[ FD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_41 $$ assertTrue(fileSys.exists(file1))[ FD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_89 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_2 $$ public void testNameEditsConfigsFailure() throws IOException -->Line_6 $$ MiniDFSCluster cluster = null[ CD ]
Line_73 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_88 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_8 $$ FileSystem fileSys = null-->Line_63 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_83 $$ conf = new HdfsConfiguration()-->Line_86 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_17 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_26 $$ cluster.shutdown()[ FD ]
Line_57 $$ fileSys = cluster.getFileSystem()-->Line_96 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_55 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_79 $$ cluster.shutdown()[ FD ]
Line_40 $$ fileSys = cluster.getFileSystem()-->Line_47 $$ fileSys.close()[ FD ]
Line_57 $$ fileSys = cluster.getFileSystem()-->Line_89 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_51 $$ conf = new HdfsConfiguration()-->Line_85 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, editsOnlyDir.getPath() + "," + nameAndEditsDir.getPath())[ FD ]
Line_57 $$ fileSys = cluster.getFileSystem()-->Line_58 $$ assertFalse(fileSys.exists(file1))[ FD ]
Line_7 $$ Configuration conf = null-->Line_54 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_9 $$ File nameOnlyDir = new File(base_dir, "name")-->Line_69 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameOnlyDir.getPath() + "," + nameAndEditsDir.getPath())[ FD ]
Line_17 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_18 $$ cluster.waitActive()[ FD ]
Line_8 $$ FileSystem fileSys = null-->Line_43 $$ cleanupFile(fileSys, file1)[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_48 $$ cluster.shutdown()[ FD ]
Line_35 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_88 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_40 $$ fileSys = cluster.getFileSystem()-->Line_57 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_28 $$ conf = new HdfsConfiguration()-->Line_33 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_89 $$ fileSys = cluster.getFileSystem()-->Line_98 $$ fileSys.close()[ FD ]
Line_5 $$ Path file3 = new Path("TestNameEditsConfigs3")-->Line_92 $$ assertTrue(fileSys.exists(file3))[ FD ]
Line_2 $$ public void testNameEditsConfigsFailure() throws IOException -->Line_30 $$ assertTrue(editsOnlyDir.mkdir())[ CD ]
Line_8 $$ FileSystem fileSys = null-->Line_60 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_8 $$ FileSystem fileSys = null-->Line_41 $$ assertTrue(fileSys.exists(file1))[ FD ]
Line_7 $$ Configuration conf = null-->Line_12 $$ conf = new HdfsConfiguration()[ FD ]
Line_2 $$ public void testNameEditsConfigsFailure() throws IOException -->Line_4 $$ Path file2 = new Path("TestNameEditsConfigs2")[ CD ]
Line_7 $$ Configuration conf = null-->Line_28 $$ conf = new HdfsConfiguration()[ FD ]
Line_35 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_66 $$ cluster.shutdown()[ FD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_65 $$ fileSys.close()[ FD ]
Line_3 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_43 $$ cleanupFile(fileSys, file1)[ FD ]
Line_68 $$ conf = new HdfsConfiguration()-->Line_69 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameOnlyDir.getPath() + "," + nameAndEditsDir.getPath())[ FD ]
Line_51 $$ conf = new HdfsConfiguration()-->Line_53 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, editsOnlyDir.getPath())[ FD ]
Line_88 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_99 $$ cluster.shutdown()[ FD ]
Line_89 $$ fileSys = cluster.getFileSystem()-->Line_92 $$ assertTrue(fileSys.exists(file3))[ FD ]
Line_28 $$ conf = new HdfsConfiguration()-->Line_54 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_5 $$ Path file3 = new Path("TestNameEditsConfigs3")-->Line_94 $$ cleanupFile(fileSys, file3)[ FD ]
Line_40 $$ fileSys = cluster.getFileSystem()-->Line_92 $$ assertTrue(fileSys.exists(file3))[ FD ]
Line_7 $$ Configuration conf = null-->Line_52 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameOnlyDir.getPath())[ FD ]
Line_51 $$ conf = new HdfsConfiguration()-->Line_84 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_2 $$ public void testNameEditsConfigsFailure() throws IOException -->Line_11 $$ File nameAndEditsDir = new File(base_dir, "name_and_edits")[ CD ]
Line_2 $$ public void testNameEditsConfigsFailure() throws IOException -->Line_14 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEditsDir.getPath())[ CD ]
Line_3 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_21 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_4 $$ Path file2 = new Path("TestNameEditsConfigs2")-->Line_91 $$ assertFalse(fileSys.exists(file2))[ FD ]
Line_73 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_99 $$ cluster.shutdown()[ FD ]
Line_3 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_42 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_5 $$ Path file3 = new Path("TestNameEditsConfigs3")-->Line_62 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_57 $$ fileSys = cluster.getFileSystem()-->Line_61 $$ cleanupFile(fileSys, file2)[ FD ]
Line_12 $$ conf = new HdfsConfiguration()-->Line_31 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEditsDir.getPath() + "," + nameOnlyDir.getPath())[ FD ]
Line_40 $$ fileSys = cluster.getFileSystem()-->Line_89 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_8 $$ FileSystem fileSys = null-->Line_44 $$ DFSTestUtil.createFile(fileSys, file2, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_68 $$ conf = new HdfsConfiguration()-->Line_85 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, editsOnlyDir.getPath() + "," + nameAndEditsDir.getPath())[ FD ]
Line_40 $$ fileSys = cluster.getFileSystem()-->Line_58 $$ assertFalse(fileSys.exists(file1))[ FD ]
Line_40 $$ fileSys = cluster.getFileSystem()-->Line_95 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_35 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_36 $$ cluster.waitActive()[ FD ]
Line_12 $$ conf = new HdfsConfiguration()-->Line_54 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_28 $$ conf = new HdfsConfiguration()-->Line_31 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEditsDir.getPath() + "," + nameOnlyDir.getPath())[ FD ]
Line_8 $$ FileSystem fileSys = null-->Line_25 $$ fileSys.close()[ FD ]
Line_57 $$ fileSys = cluster.getFileSystem()-->Line_59 $$ assertTrue(fileSys.exists(file2))[ FD ]
Line_2 $$ public void testNameEditsConfigsFailure() throws IOException -->Line_28 $$ conf = new HdfsConfiguration()[ CD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_91 $$ assertFalse(fileSys.exists(file2))[ FD ]
Line_17 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_56 $$ cluster.waitActive()[ FD ]
Line_2 $$ public void testNameEditsConfigsFailure() throws IOException -->Line_9 $$ File nameOnlyDir = new File(base_dir, "name")[ CD ]
Line_7 $$ Configuration conf = null-->Line_32 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEditsDir.getPath() + "," + editsOnlyDir.getPath())[ FD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_40 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_21 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_35 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_57 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_17 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_99 $$ cluster.shutdown()[ FD ]
Line_10 $$ File editsOnlyDir = new File(base_dir, "edits")-->Line_32 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEditsDir.getPath() + "," + editsOnlyDir.getPath())[ FD ]
Line_2 $$ public void testNameEditsConfigsFailure() throws IOException -->Line_3 $$ Path file1 = new Path("TestNameEditsConfigs1")[ CD ]
Line_12 $$ conf = new HdfsConfiguration()-->Line_71 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_17 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_66 $$ cluster.shutdown()[ FD ]
Line_28 $$ conf = new HdfsConfiguration()-->Line_51 $$ conf = new HdfsConfiguration()[ FD ]
Line_57 $$ fileSys = cluster.getFileSystem()-->Line_93 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_8 $$ FileSystem fileSys = null-->Line_57 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_68 $$ conf = new HdfsConfiguration()-->Line_70 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_57 $$ fileSys = cluster.getFileSystem()-->Line_60 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_12 $$ conf = new HdfsConfiguration()-->Line_69 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameOnlyDir.getPath() + "," + nameAndEditsDir.getPath())[ FD ]
Line_11 $$ File nameAndEditsDir = new File(base_dir, "name_and_edits")-->Line_69 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameOnlyDir.getPath() + "," + nameAndEditsDir.getPath())[ FD ]
Line_78 $$ if (cluster != null) -->Line_79 $$ cluster.shutdown()[ CD ]
Line_12 $$ conf = new HdfsConfiguration()-->Line_52 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameOnlyDir.getPath())[ FD ]
Line_9 $$ File nameOnlyDir = new File(base_dir, "name")-->Line_52 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameOnlyDir.getPath())[ FD ]
Line_40 $$ fileSys = cluster.getFileSystem()-->Line_96 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_35 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_89 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_57 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_35 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_56 $$ cluster.waitActive()[ FD ]
Line_28 $$ conf = new HdfsConfiguration()-->Line_71 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_55 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_81 $$ cluster = null[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_18 $$ cluster.waitActive()[ FD ]
Line_12 $$ conf = new HdfsConfiguration()-->Line_70 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_10 $$ File editsOnlyDir = new File(base_dir, "edits")-->Line_30 $$ assertTrue(editsOnlyDir.mkdir())[ FD ]
Line_7 $$ Configuration conf = null-->Line_15 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_8 $$ FileSystem fileSys = null-->Line_96 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_12 $$ conf = new HdfsConfiguration()-->Line_32 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEditsDir.getPath() + "," + editsOnlyDir.getPath())[ FD ]
Line_40 $$ fileSys = cluster.getFileSystem()-->Line_91 $$ assertFalse(fileSys.exists(file2))[ FD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_42 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_11 $$ File nameAndEditsDir = new File(base_dir, "name_and_edits")-->Line_13 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_3 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_22 $$ DFSTestUtil.createFile(fileSys, file1, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_51 $$ conf = new HdfsConfiguration()-->Line_71 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_60 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_5 $$ Path file3 = new Path("TestNameEditsConfigs3")-->Line_96 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_55 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_99 $$ cluster.shutdown()[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_81 $$ cluster = null[ FD ]
Line_57 $$ fileSys = cluster.getFileSystem()-->Line_92 $$ assertTrue(fileSys.exists(file3))[ FD ]
Line_28 $$ conf = new HdfsConfiguration()-->Line_86 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_57 $$ fileSys = cluster.getFileSystem()-->Line_90 $$ assertFalse(fileSys.exists(file1))[ FD ]
Line_12 $$ conf = new HdfsConfiguration()-->Line_85 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, editsOnlyDir.getPath() + "," + nameAndEditsDir.getPath())[ FD ]
Line_11 $$ File nameAndEditsDir = new File(base_dir, "name_and_edits")-->Line_14 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_8 $$ FileSystem fileSys = null-->Line_20 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_45 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_35 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_40 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_2 $$ public void testNameEditsConfigsFailure() throws IOException -->Line_69 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameOnlyDir.getPath() + "," + nameAndEditsDir.getPath())[ CD ]
Line_51 $$ conf = new HdfsConfiguration()-->Line_68 $$ conf = new HdfsConfiguration()[ FD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_90 $$ assertFalse(fileSys.exists(file1))[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_55 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_26 $$ cluster.shutdown()[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_17 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()[ FD ]
Line_40 $$ fileSys = cluster.getFileSystem()-->Line_42 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_35 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_89 $$ fileSys = cluster.getFileSystem()-->Line_93 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_89 $$ fileSys = cluster.getFileSystem()-->Line_96 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_7 $$ Configuration conf = null-->Line_51 $$ conf = new HdfsConfiguration()[ FD ]
Line_17 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_55 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_17 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_89 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_88 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_28 $$ conf = new HdfsConfiguration()-->Line_32 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEditsDir.getPath() + "," + editsOnlyDir.getPath())[ FD ]
Line_73 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_81 $$ cluster = null[ FD ]
Line_35 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_99 $$ cluster.shutdown()[ FD ]
Line_5 $$ Path file3 = new Path("TestNameEditsConfigs3")-->Line_63 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_2 $$ public void testNameEditsConfigsFailure() throws IOException -->Line_83 $$ conf = new HdfsConfiguration()[ CD ]
Line_40 $$ fileSys = cluster.getFileSystem()-->Line_60 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_22 $$ DFSTestUtil.createFile(fileSys, file1, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_93 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_2 $$ public void testNameEditsConfigsFailure() throws IOException -->Line_29 $$ assertTrue(nameOnlyDir.mkdir())[ CD ]
Line_35 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_48 $$ cluster.shutdown()[ FD ]
Line_40 $$ fileSys = cluster.getFileSystem()-->Line_59 $$ assertTrue(fileSys.exists(file2))[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_99 $$ cluster.shutdown()[ FD ]
Line_40 $$ fileSys = cluster.getFileSystem()-->Line_44 $$ DFSTestUtil.createFile(fileSys, file2, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_28 $$ conf = new HdfsConfiguration()-->Line_52 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameOnlyDir.getPath())[ FD ]
Line_17 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_81 $$ cluster = null[ FD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_96 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_4 $$ Path file2 = new Path("TestNameEditsConfigs2")-->Line_61 $$ cleanupFile(fileSys, file2)[ FD ]
Line_7 $$ Configuration conf = null-->Line_86 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_2 $$ public void testNameEditsConfigsFailure() throws IOException -->Line_32 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEditsDir.getPath() + "," + editsOnlyDir.getPath())[ CD ]
Line_68 $$ conf = new HdfsConfiguration()-->Line_84 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_28 $$ conf = new HdfsConfiguration()-->Line_84 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_40 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_43 $$ cleanupFile(fileSys, file1)[ FD ]
Line_57 $$ fileSys = cluster.getFileSystem()-->Line_94 $$ cleanupFile(fileSys, file3)[ FD ]
Line_8 $$ FileSystem fileSys = null-->Line_23 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_17 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_35 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_89 $$ fileSys = cluster.getFileSystem()-->Line_91 $$ assertFalse(fileSys.exists(file2))[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_78 $$ if (cluster != null) [ FD ]
Line_11 $$ File nameAndEditsDir = new File(base_dir, "name_and_edits")-->Line_32 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEditsDir.getPath() + "," + editsOnlyDir.getPath())[ FD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_44 $$ DFSTestUtil.createFile(fileSys, file2, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_57 $$ fileSys = cluster.getFileSystem()-->Line_98 $$ fileSys.close()[ FD ]
Line_8 $$ FileSystem fileSys = null-->Line_89 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_55 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_78 $$ if (cluster != null) [ FD ]
Line_11 $$ File nameAndEditsDir = new File(base_dir, "name_and_edits")-->Line_84 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_8 $$ FileSystem fileSys = null-->Line_91 $$ assertFalse(fileSys.exists(file2))[ FD ]
Line_12 $$ conf = new HdfsConfiguration()-->Line_33 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_8 $$ FileSystem fileSys = null-->Line_92 $$ assertTrue(fileSys.exists(file3))[ FD ]
Line_8 $$ FileSystem fileSys = null-->Line_47 $$ fileSys.close()[ FD ]
Line_51 $$ conf = new HdfsConfiguration()-->Line_83 $$ conf = new HdfsConfiguration()[ FD ]
Line_7 $$ Configuration conf = null-->Line_33 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_55 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_73 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_89 $$ fileSys = cluster.getFileSystem()-->Line_94 $$ cleanupFile(fileSys, file3)[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_36 $$ cluster.waitActive()[ FD ]
Line_81 $$ cluster = null-->Line_88 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_8 $$ FileSystem fileSys = null-->Line_21 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_55 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_66 $$ cluster.shutdown()[ FD ]
Line_2 $$ public void testNameEditsConfigsFailure() throws IOException -->Line_12 $$ conf = new HdfsConfiguration()[ CD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_20 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_17 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_88 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_8 $$ FileSystem fileSys = null-->Line_93 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_17 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_73 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_3 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_58 $$ assertFalse(fileSys.exists(file1))[ FD ]
Line_8 $$ FileSystem fileSys = null-->Line_90 $$ assertFalse(fileSys.exists(file1))[ FD ]
Line_9 $$ File nameOnlyDir = new File(base_dir, "name")-->Line_31 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEditsDir.getPath() + "," + nameOnlyDir.getPath())[ FD ]
Line_2 $$ public void testNameEditsConfigsFailure() throws IOException -->Line_85 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, editsOnlyDir.getPath() + "," + nameAndEditsDir.getPath())[ CD ]
Line_40 $$ fileSys = cluster.getFileSystem()-->Line_62 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_12 $$ conf = new HdfsConfiguration()-->Line_15 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_59 $$ assertTrue(fileSys.exists(file2))[ FD ]
Line_57 $$ fileSys = cluster.getFileSystem()-->Line_95 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_17 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_79 $$ cluster.shutdown()[ FD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_98 $$ fileSys.close()[ FD ]
Line_2 $$ public void testNameEditsConfigsFailure() throws IOException -->Line_7 $$ Configuration conf = null[ CD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_56 $$ cluster.waitActive()[ FD ]
Line_7 $$ Configuration conf = null-->Line_84 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_35 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_78 $$ if (cluster != null) [ FD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_25 $$ fileSys.close()[ FD ]
Line_12 $$ conf = new HdfsConfiguration()-->Line_28 $$ conf = new HdfsConfiguration()[ FD ]
Line_35 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_81 $$ cluster = null[ FD ]
Line_51 $$ conf = new HdfsConfiguration()-->Line_86 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_2 $$ public void testNameEditsConfigsFailure() throws IOException -->Line_8 $$ FileSystem fileSys = null[ CD ]
Line_17 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_40 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_40 $$ fileSys = cluster.getFileSystem()-->Line_61 $$ cleanupFile(fileSys, file2)[ FD ]
Line_2 $$ public void testNameEditsConfigsFailure() throws IOException -->Line_31 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEditsDir.getPath() + "," + nameOnlyDir.getPath())[ CD ]
Line_2 $$ public void testNameEditsConfigsFailure() throws IOException -->Line_68 $$ conf = new HdfsConfiguration()[ CD ]
Line_8 $$ FileSystem fileSys = null-->Line_58 $$ assertFalse(fileSys.exists(file1))[ FD ]
Line_57 $$ fileSys = cluster.getFileSystem()-->Line_91 $$ assertFalse(fileSys.exists(file2))[ FD ]
Line_40 $$ fileSys = cluster.getFileSystem()-->Line_45 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_40 $$ fileSys = cluster.getFileSystem()-->Line_65 $$ fileSys.close()[ FD ]
Line_73 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_78 $$ if (cluster != null) [ FD ]
Line_10 $$ File editsOnlyDir = new File(base_dir, "edits")-->Line_85 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, editsOnlyDir.getPath() + "," + nameAndEditsDir.getPath())[ FD ]
Line_7 $$ Configuration conf = null-->Line_14 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_35 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_79 $$ cluster.shutdown()[ FD ]
Line_7 $$ Configuration conf = null-->Line_68 $$ conf = new HdfsConfiguration()[ FD ]
Line_8 $$ FileSystem fileSys = null-->Line_98 $$ fileSys.close()[ FD ]
Line_12 $$ conf = new HdfsConfiguration()-->Line_53 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, editsOnlyDir.getPath())[ FD ]
Line_88 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_89 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_8 $$ FileSystem fileSys = null-->Line_59 $$ assertTrue(fileSys.exists(file2))[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_79 $$ cluster.shutdown()[ FD ]
Line_8 $$ FileSystem fileSys = null-->Line_22 $$ DFSTestUtil.createFile(fileSys, file1, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_68 $$ conf = new HdfsConfiguration()-->Line_83 $$ conf = new HdfsConfiguration()[ FD ]
Line_28 $$ conf = new HdfsConfiguration()-->Line_68 $$ conf = new HdfsConfiguration()[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_73 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_8 $$ FileSystem fileSys = null-->Line_40 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_11 $$ File nameAndEditsDir = new File(base_dir, "name_and_edits")-->Line_85 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, editsOnlyDir.getPath() + "," + nameAndEditsDir.getPath())[ FD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_94 $$ cleanupFile(fileSys, file3)[ FD ]
Line_7 $$ Configuration conf = null-->Line_13 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_8 $$ FileSystem fileSys = null-->Line_95 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_83 $$ conf = new HdfsConfiguration()-->Line_85 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, editsOnlyDir.getPath() + "," + nameAndEditsDir.getPath())[ FD ]
Line_28 $$ conf = new HdfsConfiguration()-->Line_53 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, editsOnlyDir.getPath())[ FD ]
Line_5 $$ Path file3 = new Path("TestNameEditsConfigs3")-->Line_95 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_12 $$ conf = new HdfsConfiguration()-->Line_83 $$ conf = new HdfsConfiguration()[ FD ]
Line_17 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_20 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_40 $$ fileSys = cluster.getFileSystem()-->Line_90 $$ assertFalse(fileSys.exists(file1))[ FD ]
Line_7 $$ Configuration conf = null-->Line_71 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_63 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_83 $$ conf = new HdfsConfiguration()-->Line_84 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_55 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_89 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_55 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_57 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_4 $$ Path file2 = new Path("TestNameEditsConfigs2")-->Line_60 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_2 $$ public void testNameEditsConfigsFailure() throws IOException -->Line_10 $$ File editsOnlyDir = new File(base_dir, "edits")[ CD ]
Line_12 $$ conf = new HdfsConfiguration()-->Line_84 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_11 $$ File nameAndEditsDir = new File(base_dir, "name_and_edits")-->Line_31 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEditsDir.getPath() + "," + nameOnlyDir.getPath())[ FD ]
Line_68 $$ conf = new HdfsConfiguration()-->Line_86 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_4 $$ Path file2 = new Path("TestNameEditsConfigs2")-->Line_59 $$ assertTrue(fileSys.exists(file2))[ FD ]
Line_35 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_73 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_40 $$ fileSys = cluster.getFileSystem()-->Line_43 $$ cleanupFile(fileSys, file1)[ FD ]
Line_2 $$ public void testNameEditsConfigsFailure() throws IOException -->Line_84 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEditsDir.getPath())[ CD ]
Line_55 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_88 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_3 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_23 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_89 $$ fileSys = cluster.getFileSystem()-->Line_90 $$ assertFalse(fileSys.exists(file1))[ FD ]
Line_17 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_78 $$ if (cluster != null) [ FD ]
Line_68 $$ conf = new HdfsConfiguration()-->Line_71 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_40 $$ fileSys = cluster.getFileSystem()-->Line_98 $$ fileSys.close()[ FD ]
Line_57 $$ fileSys = cluster.getFileSystem()-->Line_63 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_92 $$ assertTrue(fileSys.exists(file3))[ FD ]
Line_40 $$ fileSys = cluster.getFileSystem()-->Line_93 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_61 $$ cleanupFile(fileSys, file2)[ FD ]
Line_28 $$ conf = new HdfsConfiguration()-->Line_85 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, editsOnlyDir.getPath() + "," + nameAndEditsDir.getPath())[ FD ]
Line_7 $$ Configuration conf = null-->Line_83 $$ conf = new HdfsConfiguration()[ FD ]
Line_12 $$ conf = new HdfsConfiguration()-->Line_68 $$ conf = new HdfsConfiguration()[ FD ]
Line_11 $$ File nameAndEditsDir = new File(base_dir, "name_and_edits")-->Line_70 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_12 $$ conf = new HdfsConfiguration()-->Line_13 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_17 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_57 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_40 $$ fileSys = cluster.getFileSystem()-->Line_94 $$ cleanupFile(fileSys, file3)[ FD ]
Line_89 $$ fileSys = cluster.getFileSystem()-->Line_95 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_2 $$ public void testNameEditsConfigsFailure() throws IOException -->Line_5 $$ Path file3 = new Path("TestNameEditsConfigs3")[ CD ]
Line_57 $$ fileSys = cluster.getFileSystem()-->Line_62 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_28 $$ conf = new HdfsConfiguration()-->Line_83 $$ conf = new HdfsConfiguration()[ FD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_95 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_81 $$ cluster = null-->Line_89 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_62 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_57 $$ fileSys = cluster.getFileSystem()-->Line_65 $$ fileSys.close()[ FD ]
Line_2 $$ public void testNameEditsConfigsFailure() throws IOException -->Line_70 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEditsDir.getPath())[ CD ]
Line_4 $$ Path file2 = new Path("TestNameEditsConfigs2")-->Line_45 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_51 $$ conf = new HdfsConfiguration()-->Line_54 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_3 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_90 $$ assertFalse(fileSys.exists(file1))[ FD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_47 $$ fileSys.close()[ FD ]
Line_8 $$ FileSystem fileSys = null-->Line_61 $$ cleanupFile(fileSys, file2)[ FD ]
Line_20 $$ fileSys = cluster.getFileSystem()-->Line_58 $$ assertFalse(fileSys.exists(file1))[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_66 $$ cluster.shutdown()[ FD ]
Line_40 $$ fileSys = cluster.getFileSystem()-->Line_41 $$ assertTrue(fileSys.exists(file1))[ FD ]
Line_35 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_55 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_12 $$ conf = new HdfsConfiguration()-->Line_14 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_73 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_79 $$ cluster.shutdown()[ FD ]
Line_10 $$ File editsOnlyDir = new File(base_dir, "edits")-->Line_53 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, editsOnlyDir.getPath())[ FD ]
Line_73 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_89 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_81 $$ cluster = null-->Line_99 $$ cluster.shutdown()[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_57 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_2 $$ public void testNameEditsConfigsFailure() throws IOException -->Line_13 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEditsDir.getPath())[ CD ]
Line_28 $$ conf = new HdfsConfiguration()-->Line_69 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameOnlyDir.getPath() + "," + nameAndEditsDir.getPath())[ FD ]
