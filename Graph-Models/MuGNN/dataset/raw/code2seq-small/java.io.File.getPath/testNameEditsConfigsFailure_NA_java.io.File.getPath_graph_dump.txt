Line_81 $$ fileSys = cluster.getFileSystem()-->Line_127 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_19 $$ MiniDFSCluster cluster = null-->Line_119 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_79 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_80 $$ cluster.waitActive()[ FD ]
Line_79 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_81 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_61 $$ fileSys = cluster.getFileSystem()-->Line_126 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_75 $$ conf = new HdfsConfiguration()-->Line_78 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_89 $$ fileSys.close()[ FD ]
Line_81 $$ fileSys = cluster.getFileSystem()-->Line_120 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_24 $$ File nameAndEditsDir = new File(base_dir, "name_and_edits")-->Line_95 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameOnlyDir.getPath() + "," + nameAndEditsDir.getPath())[ FD ]
Line_20 $$ Configuration conf = null-->Line_29 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_22 $$ File nameOnlyDir = new File(base_dir, "name")-->Line_50 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEditsDir.getPath() + "," + nameOnlyDir.getPath())[ FD ]
Line_120 $$ fileSys = cluster.getFileSystem()-->Line_123 $$ assertTrue(fileSys.exists(file3))[ FD ]
Line_61 $$ fileSys = cluster.getFileSystem()-->Line_81 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_84 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_20 $$ Configuration conf = null-->Line_28 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_81 $$ fileSys = cluster.getFileSystem()-->Line_82 $$ assertFalse(fileSys.exists(file1))[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_63 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_123 $$ assertTrue(fileSys.exists(file3))[ FD ]
Line_61 $$ fileSys = cluster.getFileSystem()-->Line_87 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_39 $$ DFSTestUtil.createFile(fileSys, file1, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_19 $$ MiniDFSCluster cluster = null-->Line_120 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_108 $$ cluster = null-->Line_130 $$ cluster.shutdown()[ FD ]
Line_99 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_119 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_62 $$ assertTrue(fileSys.exists(file1))[ FD ]
Line_61 $$ fileSys = cluster.getFileSystem()-->Line_122 $$ assertFalse(fileSys.exists(file2))[ FD ]
Line_20 $$ Configuration conf = null-->Line_95 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameOnlyDir.getPath() + "," + nameAndEditsDir.getPath())[ FD ]
Line_120 $$ fileSys = cluster.getFileSystem()-->Line_122 $$ assertFalse(fileSys.exists(file2))[ FD ]
Line_23 $$ File editsOnlyDir = new File(base_dir, "edits")-->Line_77 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, editsOnlyDir.getPath())[ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_39 $$ DFSTestUtil.createFile(fileSys, file1, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_19 $$ MiniDFSCluster cluster = null-->Line_37 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_99 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_108 $$ cluster = null[ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_38 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_61 $$ fileSys = cluster.getFileSystem()-->Line_65 $$ DFSTestUtil.createFile(fileSys, file2, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_16 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_63 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_16 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_40 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_99 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_120 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_89 $$ fileSys.close()[ FD ]
Line_18 $$ Path file3 = new Path("TestNameEditsConfigs3")-->Line_124 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_127 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_24 $$ File nameAndEditsDir = new File(base_dir, "name_and_edits")-->Line_115 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_79 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_130 $$ cluster.shutdown()[ FD ]
Line_18 $$ Path file3 = new Path("TestNameEditsConfigs3")-->Line_127 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_17 $$ Path file2 = new Path("TestNameEditsConfigs2")-->Line_83 $$ assertTrue(fileSys.exists(file2))[ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_64 $$ cleanupFile(fileSys, file1)[ FD ]
Line_20 $$ Configuration conf = null-->Line_52 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_81 $$ fileSys = cluster.getFileSystem()-->Line_84 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_61 $$ fileSys = cluster.getFileSystem()-->Line_127 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_129 $$ fileSys.close()[ FD ]
Line_24 $$ File nameAndEditsDir = new File(base_dir, "name_and_edits")-->Line_51 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEditsDir.getPath() + "," + editsOnlyDir.getPath())[ FD ]
Line_24 $$ File nameAndEditsDir = new File(base_dir, "name_and_edits")-->Line_96 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_81 $$ fileSys = cluster.getFileSystem()-->Line_83 $$ assertTrue(fileSys.exists(file2))[ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_121 $$ assertFalse(fileSys.exists(file1))[ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_82 $$ assertFalse(fileSys.exists(file1))[ FD ]
Line_17 $$ Path file2 = new Path("TestNameEditsConfigs2")-->Line_65 $$ DFSTestUtil.createFile(fileSys, file2, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_20 $$ Configuration conf = null-->Line_51 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEditsDir.getPath() + "," + editsOnlyDir.getPath())[ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_83 $$ assertTrue(fileSys.exists(file2))[ FD ]
Line_81 $$ fileSys = cluster.getFileSystem()-->Line_86 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_22 $$ File nameOnlyDir = new File(base_dir, "name")-->Line_76 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameOnlyDir.getPath())[ FD ]
Line_61 $$ fileSys = cluster.getFileSystem()-->Line_84 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_124 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_18 $$ Path file3 = new Path("TestNameEditsConfigs3")-->Line_126 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_120 $$ fileSys = cluster.getFileSystem()-->Line_127 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_124 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_81 $$ fileSys = cluster.getFileSystem()-->Line_129 $$ fileSys.close()[ FD ]
Line_79 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_105 $$ if (cluster != null) [ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_126 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_19 $$ MiniDFSCluster cluster = null-->Line_130 $$ cluster.shutdown()[ FD ]
Line_61 $$ fileSys = cluster.getFileSystem()-->Line_83 $$ assertTrue(fileSys.exists(file2))[ FD ]
Line_24 $$ File nameAndEditsDir = new File(base_dir, "name_and_edits")-->Line_28 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_20 $$ Configuration conf = null-->Line_50 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEditsDir.getPath() + "," + nameOnlyDir.getPath())[ FD ]
Line_20 $$ Configuration conf = null-->Line_117 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_16 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_38 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_61 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_61 $$ fileSys = cluster.getFileSystem()-->Line_121 $$ assertFalse(fileSys.exists(file1))[ FD ]
Line_18 $$ Path file3 = new Path("TestNameEditsConfigs3")-->Line_87 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_79 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_90 $$ cluster.shutdown()[ FD ]
Line_19 $$ MiniDFSCluster cluster = null-->Line_79 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_65 $$ DFSTestUtil.createFile(fileSys, file2, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_18 $$ Path file3 = new Path("TestNameEditsConfigs3")-->Line_86 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_62 $$ assertTrue(fileSys.exists(file1))[ FD ]
Line_119 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_130 $$ cluster.shutdown()[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_65 $$ DFSTestUtil.createFile(fileSys, file2, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_86 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_87 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_20 $$ Configuration conf = null-->Line_115 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_24 $$ File nameAndEditsDir = new File(base_dir, "name_and_edits")-->Line_50 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEditsDir.getPath() + "," + nameOnlyDir.getPath())[ FD ]
Line_61 $$ fileSys = cluster.getFileSystem()-->Line_64 $$ cleanupFile(fileSys, file1)[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_68 $$ fileSys.close()[ FD ]
Line_81 $$ fileSys = cluster.getFileSystem()-->Line_122 $$ assertFalse(fileSys.exists(file2))[ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_68 $$ fileSys.close()[ FD ]
Line_99 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_105 $$ if (cluster != null) [ FD ]
Line_61 $$ fileSys = cluster.getFileSystem()-->Line_125 $$ cleanupFile(fileSys, file3)[ FD ]
Line_20 $$ Configuration conf = null-->Line_75 $$ conf = new HdfsConfiguration()[ FD ]
Line_61 $$ fileSys = cluster.getFileSystem()-->Line_68 $$ fileSys.close()[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_121 $$ assertFalse(fileSys.exists(file1))[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_64 $$ cleanupFile(fileSys, file1)[ FD ]
Line_23 $$ File editsOnlyDir = new File(base_dir, "edits")-->Line_116 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, editsOnlyDir.getPath() + "," + nameAndEditsDir.getPath())[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_81 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_18 $$ Path file3 = new Path("TestNameEditsConfigs3")-->Line_123 $$ assertTrue(fileSys.exists(file3))[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_37 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_17 $$ Path file2 = new Path("TestNameEditsConfigs2")-->Line_85 $$ cleanupFile(fileSys, file2)[ FD ]
Line_19 $$ MiniDFSCluster cluster = null-->Line_90 $$ cluster.shutdown()[ FD ]
Line_75 $$ conf = new HdfsConfiguration()-->Line_77 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, editsOnlyDir.getPath())[ FD ]
Line_108 $$ cluster = null-->Line_119 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_61 $$ fileSys = cluster.getFileSystem()-->Line_120 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_20 $$ Configuration conf = null-->Line_30 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_126 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_24 $$ File nameAndEditsDir = new File(base_dir, "name_and_edits")-->Line_116 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, editsOnlyDir.getPath() + "," + nameAndEditsDir.getPath())[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_120 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_40 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_61 $$ fileSys = cluster.getFileSystem()-->Line_85 $$ cleanupFile(fileSys, file2)[ FD ]
Line_19 $$ MiniDFSCluster cluster = null-->Line_99 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_61 $$ fileSys = cluster.getFileSystem()-->Line_86 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_79 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_99 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_23 $$ File editsOnlyDir = new File(base_dir, "edits")-->Line_51 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEditsDir.getPath() + "," + editsOnlyDir.getPath())[ FD ]
Line_81 $$ fileSys = cluster.getFileSystem()-->Line_124 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_81 $$ fileSys = cluster.getFileSystem()-->Line_126 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_120 $$ fileSys = cluster.getFileSystem()-->Line_124 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_81 $$ fileSys = cluster.getFileSystem()-->Line_123 $$ assertTrue(fileSys.exists(file3))[ FD ]
Line_16 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_62 $$ assertTrue(fileSys.exists(file1))[ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_85 $$ cleanupFile(fileSys, file2)[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_82 $$ assertFalse(fileSys.exists(file1))[ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_129 $$ fileSys.close()[ FD ]
Line_19 $$ MiniDFSCluster cluster = null-->Line_106 $$ cluster.shutdown()[ FD ]
Line_19 $$ MiniDFSCluster cluster = null-->Line_81 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_79 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_106 $$ cluster.shutdown()[ FD ]
Line_99 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_106 $$ cluster.shutdown()[ FD ]
Line_20 $$ Configuration conf = null-->Line_116 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, editsOnlyDir.getPath() + "," + nameAndEditsDir.getPath())[ FD ]
Line_75 $$ conf = new HdfsConfiguration()-->Line_96 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_24 $$ File nameAndEditsDir = new File(base_dir, "name_and_edits")-->Line_29 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_81 $$ fileSys = cluster.getFileSystem()-->Line_85 $$ cleanupFile(fileSys, file2)[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_86 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_17 $$ Path file2 = new Path("TestNameEditsConfigs2")-->Line_66 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_22 $$ File nameOnlyDir = new File(base_dir, "name")-->Line_95 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameOnlyDir.getPath() + "," + nameAndEditsDir.getPath())[ FD ]
Line_22 $$ File nameOnlyDir = new File(base_dir, "name")-->Line_48 $$ assertTrue(nameOnlyDir.mkdir())[ FD ]
Line_75 $$ conf = new HdfsConfiguration()-->Line_76 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameOnlyDir.getPath())[ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_125 $$ cleanupFile(fileSys, file3)[ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_66 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_16 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_121 $$ assertFalse(fileSys.exists(file1))[ FD ]
Line_16 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_39 $$ DFSTestUtil.createFile(fileSys, file1, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_79 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_119 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_66 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_85 $$ cleanupFile(fileSys, file2)[ FD ]
Line_61 $$ fileSys = cluster.getFileSystem()-->Line_62 $$ assertTrue(fileSys.exists(file1))[ FD ]
Line_16 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_64 $$ cleanupFile(fileSys, file1)[ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_84 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_122 $$ assertFalse(fileSys.exists(file2))[ FD ]
Line_19 $$ MiniDFSCluster cluster = null-->Line_43 $$ cluster.shutdown()[ FD ]
Line_17 $$ Path file2 = new Path("TestNameEditsConfigs2")-->Line_84 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_81 $$ fileSys = cluster.getFileSystem()-->Line_125 $$ cleanupFile(fileSys, file3)[ FD ]
Line_119 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_120 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_63 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_19 $$ MiniDFSCluster cluster = null-->Line_56 $$ cluster.waitActive()[ FD ]
Line_19 $$ MiniDFSCluster cluster = null-->Line_108 $$ cluster = null[ FD ]
Line_20 $$ Configuration conf = null-->Line_78 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_75 $$ conf = new HdfsConfiguration()-->Line_117 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_61 $$ fileSys = cluster.getFileSystem()-->Line_129 $$ fileSys.close()[ FD ]
Line_120 $$ fileSys = cluster.getFileSystem()-->Line_126 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_123 $$ assertTrue(fileSys.exists(file3))[ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_81 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_20 $$ Configuration conf = null-->Line_77 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, editsOnlyDir.getPath())[ FD ]
Line_79 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_120 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_40 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_19 $$ MiniDFSCluster cluster = null-->Line_105 $$ if (cluster != null) [ FD ]
Line_105 $$ if (cluster != null) -->Line_106 $$ cluster.shutdown()[ CD ]
Line_21 $$ FileSystem fileSys = null-->Line_127 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_75 $$ conf = new HdfsConfiguration()-->Line_115 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_125 $$ cleanupFile(fileSys, file3)[ FD ]
Line_19 $$ MiniDFSCluster cluster = null-->Line_34 $$ cluster.waitActive()[ FD ]
Line_108 $$ cluster = null-->Line_120 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_75 $$ conf = new HdfsConfiguration()-->Line_97 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_20 $$ Configuration conf = null-->Line_96 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEditsDir.getPath())[ FD ]
Line_81 $$ fileSys = cluster.getFileSystem()-->Line_121 $$ assertFalse(fileSys.exists(file1))[ FD ]
Line_18 $$ Path file3 = new Path("TestNameEditsConfigs3")-->Line_125 $$ cleanupFile(fileSys, file3)[ FD ]
Line_61 $$ fileSys = cluster.getFileSystem()-->Line_63 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_120 $$ fileSys = cluster.getFileSystem()-->Line_129 $$ fileSys.close()[ FD ]
Line_75 $$ conf = new HdfsConfiguration()-->Line_116 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, editsOnlyDir.getPath() + "," + nameAndEditsDir.getPath())[ FD ]
Line_81 $$ fileSys = cluster.getFileSystem()-->Line_89 $$ fileSys.close()[ FD ]
Line_23 $$ File editsOnlyDir = new File(base_dir, "edits")-->Line_49 $$ assertTrue(editsOnlyDir.mkdir())[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_42 $$ fileSys.close()[ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_120 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_19 $$ MiniDFSCluster cluster = null-->Line_61 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_42 $$ fileSys.close()[ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_61 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_19 $$ MiniDFSCluster cluster = null-->Line_69 $$ cluster.shutdown()[ FD ]
Line_16 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_82 $$ assertFalse(fileSys.exists(file1))[ FD ]
Line_37 $$ fileSys = cluster.getFileSystem()-->Line_87 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_81 $$ fileSys = cluster.getFileSystem()-->Line_87 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_61 $$ fileSys = cluster.getFileSystem()-->Line_66 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_61 $$ fileSys = cluster.getFileSystem()-->Line_89 $$ fileSys.close()[ FD ]
Line_75 $$ conf = new HdfsConfiguration()-->Line_95 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameOnlyDir.getPath() + "," + nameAndEditsDir.getPath())[ FD ]
Line_17 $$ Path file2 = new Path("TestNameEditsConfigs2")-->Line_122 $$ assertFalse(fileSys.exists(file2))[ FD ]
Line_99 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_130 $$ cluster.shutdown()[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_83 $$ assertTrue(fileSys.exists(file2))[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_38 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_21 $$ FileSystem fileSys = null-->Line_122 $$ assertFalse(fileSys.exists(file2))[ FD ]
Line_61 $$ fileSys = cluster.getFileSystem()-->Line_123 $$ assertTrue(fileSys.exists(file3))[ FD ]
Line_61 $$ fileSys = cluster.getFileSystem()-->Line_124 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_61 $$ fileSys = cluster.getFileSystem()-->Line_82 $$ assertFalse(fileSys.exists(file1))[ FD ]
Line_19 $$ MiniDFSCluster cluster = null-->Line_80 $$ cluster.waitActive()[ FD ]
Line_120 $$ fileSys = cluster.getFileSystem()-->Line_125 $$ cleanupFile(fileSys, file3)[ FD ]
Line_79 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_108 $$ cluster = null[ FD ]
Line_20 $$ Configuration conf = null-->Line_97 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_120 $$ fileSys = cluster.getFileSystem()-->Line_121 $$ assertFalse(fileSys.exists(file1))[ FD ]
Line_20 $$ Configuration conf = null-->Line_76 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameOnlyDir.getPath())[ FD ]
