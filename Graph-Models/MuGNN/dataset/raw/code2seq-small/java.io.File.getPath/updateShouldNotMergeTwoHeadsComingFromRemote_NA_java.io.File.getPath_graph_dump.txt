Line_10 $$ List<HgRevisionNumber> branchHeads = new HgHeadsCommand(myProject, projectRepoVirtualFile).execute()-->Line_11 $$ assertEquals(branchHeads.size(), 2)[ FD ]
Line_2 $$ public void updateShouldNotMergeTwoHeadsComingFromRemote() throws Exception -->Line_8 $$ runHg(remoteRepo, "commit", "-m", "adding second file")[ CD ]
Line_2 $$ public void updateShouldNotMergeTwoHeadsComingFromRemote() throws Exception -->Line_5 $$ runHg(remoteRepo, "update", "--clean", originalParent)[ CD ]
Line_2 $$ public void updateShouldNotMergeTwoHeadsComingFromRemote() throws Exception -->Line_11 $$ assertEquals(branchHeads.size(), 2)[ CD ]
Line_2 $$ public void updateShouldNotMergeTwoHeadsComingFromRemote() throws Exception -->Line_9 $$ assertUpdateThroughPluginFails()[ CD ]
Line_2 $$ public void updateShouldNotMergeTwoHeadsComingFromRemote() throws Exception -->Line_7 $$ runHg(remoteRepo, "add", file.getPath())[ CD ]
Line_2 $$ public void updateShouldNotMergeTwoHeadsComingFromRemote() throws Exception -->Line_10 $$ List<HgRevisionNumber> branchHeads = new HgHeadsCommand(myProject, projectRepoVirtualFile).execute()[ CD ]
Line_2 $$ public void updateShouldNotMergeTwoHeadsComingFromRemote() throws Exception -->Line_6 $$ File file = fillFile(remoteRepo, new String[] [ CD ]
Line_2 $$ public void updateShouldNotMergeTwoHeadsComingFromRemote() throws Exception -->Line_3 $$ String originalParent = runHg(remoteRepo, "parents", "--template", "[ CD ]
Line_6 $$ File file = fillFile(remoteRepo, new String[] -->Line_7 $$ runHg(remoteRepo, "add", file.getPath())[ FD ]
Line_2 $$ public void updateShouldNotMergeTwoHeadsComingFromRemote() throws Exception -->Line_4 $$ changeFile_A_AndCommitInRemoteRepository()[ CD ]
Line_3 $$ String originalParent = runHg(remoteRepo, "parents", "--template", "-->Line_5 $$ runHg(remoteRepo, "update", "--clean", originalParent)[ FD ]
