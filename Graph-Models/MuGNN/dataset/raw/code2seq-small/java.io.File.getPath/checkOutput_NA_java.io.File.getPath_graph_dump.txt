Line_2 $$ protected void checkOutput() throws IOException -->Line_3 $$ Path outPath = new Path(OUTPUT_DIR.getPath(), "part-00000")[ CD ]
Line_3 $$ Path outPath = new Path(OUTPUT_DIR.getPath(), "part-00000")-->Line_5 $$ String output = StreamUtil.slurpHadoop(outPath, fs)[ FD ]
Line_4 $$ FileSystem fs = getFileSystem()-->Line_6 $$ fs.delete(outPath, true)[ FD ]
Line_5 $$ String output = StreamUtil.slurpHadoop(outPath, fs)-->Line_9 $$ assertOutput(getExpectedOutput(), output)[ FD ]
Line_3 $$ Path outPath = new Path(OUTPUT_DIR.getPath(), "part-00000")-->Line_6 $$ fs.delete(outPath, true)[ FD ]
Line_2 $$ protected void checkOutput() throws IOException -->Line_4 $$ FileSystem fs = getFileSystem()[ CD ]
Line_2 $$ protected void checkOutput() throws IOException -->Line_9 $$ assertOutput(getExpectedOutput(), output)[ CD ]
Line_2 $$ protected void checkOutput() throws IOException -->Line_8 $$ System.err.println("  out1=" + output)[ CD ]
Line_2 $$ protected void checkOutput() throws IOException -->Line_7 $$ System.err.println("outEx1=" + getExpectedOutput())[ CD ]
Line_2 $$ protected void checkOutput() throws IOException -->Line_5 $$ String output = StreamUtil.slurpHadoop(outPath, fs)[ CD ]
Line_4 $$ FileSystem fs = getFileSystem()-->Line_5 $$ String output = StreamUtil.slurpHadoop(outPath, fs)[ FD ]
Line_2 $$ protected void checkOutput() throws IOException -->Line_6 $$ fs.delete(outPath, true)[ CD ]
