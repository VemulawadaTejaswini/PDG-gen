Line_2 $$ private List<Pair<File, Integer>> processRecursively(File dir, BitSet enabledDetectors) -->Line_11 $$ myProgressIndicator.setText2(dir.getPath())[ FD ]
Line_2 $$ private List<Pair<File, Integer>> processRecursively(File dir, BitSet enabledDetectors) -->Line_23 $$ if (enabledForChildren == enabledDetectors) [ FD ]
Line_24 $$ enabledForChildren = new BitSet()-->Line_41 $$ enabledForChildren.or(enabledDetectors)[ FD ]
Line_2 $$ private List<Pair<File, Integer>> processRecursively(File dir, BitSet enabledDetectors) -->Line_17 $$ BitSet enabledForChildren = enabledDetectors[ CD ]
Line_37 $$ final List<Pair<File, Integer>> toSkip = processRecursively(child, enabledForChildren)-->Line_38 $$ if (!toSkip.isEmpty()) [ FD ]
Line_7 $$ if (myProgressIndicator != null) -->Line_8 $$ if (myProgressIndicator.isCanceled()) [ CD ]
Line_30 $$ if (parentToSkip != null && !FileUtil.filesEqual(parentToSkip, dir)) -->Line_31 $$ parentsToSkip.add(Pair.create(parentToSkip, i))[ CD ]
Line_13 $$ File[] children = dir.listFiles()-->Line_15 $$ children = ArrayUtil.EMPTY_FILE_ARRAY[ FD ]
Line_24 $$ enabledForChildren = new BitSet()-->Line_23 $$ if (enabledForChildren == enabledDetectors) [ FD ]
Line_4 $$ if (myTypeManager.isFileIgnored(dir.getName())) -->Line_5 $$ return parentsToSkip[ CD ]
Line_15 $$ children = ArrayUtil.EMPTY_FILE_ARRAY-->Line_21 $$ final ProjectStructureDetector.DirectoryProcessingResult result = myDetectors[i].detectRoots(dir, children, myBaseDir, myDetectedRoots[i])[ FD ]
Line_17 $$ BitSet enabledForChildren = enabledDetectors-->Line_37 $$ final List<Pair<File, Integer>> toSkip = processRecursively(child, enabledForChildren)[ FD ]
Line_17 $$ BitSet enabledForChildren = enabledDetectors-->Line_39 $$ if (enabledForChildren == enabledDetectors) [ FD ]
Line_43 $$ for (Pair<File, Integer> pair : toSkip) -->Line_46 $$ parentsToSkip.add(pair)[ FD ]
Line_35 $$ for (File child : children) -->Line_36 $$ if (child.isDirectory()) [ FD ]
Line_43 $$ for (Pair<File, Integer> pair : toSkip) -->Line_44 $$ enabledForChildren.set(pair.getSecond(), false)[ FD ]
Line_2 $$ private List<Pair<File, Integer>> processRecursively(File dir, BitSet enabledDetectors) -->Line_19 $$ if (!enabledDetectors.get(i))[ FD ]
Line_2 $$ private List<Pair<File, Integer>> processRecursively(File dir, BitSet enabledDetectors) -->Line_7 $$ if (myProgressIndicator != null) [ CD ]
Line_2 $$ private List<Pair<File, Integer>> processRecursively(File dir, BitSet enabledDetectors) -->Line_21 $$ final ProjectStructureDetector.DirectoryProcessingResult result = myDetectors[i].detectRoots(dir, children, myBaseDir, myDetectedRoots[i])[ FD ]
Line_29 $$ final File parentToSkip = result.getParentToSkip()-->Line_30 $$ if (parentToSkip != null && !FileUtil.filesEqual(parentToSkip, dir)) [ FD ]
Line_2 $$ private List<Pair<File, Integer>> processRecursively(File dir, BitSet enabledDetectors) -->Line_14 $$ if (children == null) [ CD ]
Line_40 $$ enabledForChildren = new BitSet()-->Line_44 $$ enabledForChildren.set(pair.getSecond(), false)[ FD ]
Line_3 $$ List<Pair<File, Integer>> parentsToSkip = new SmartList<Pair<File, Integer>>()-->Line_46 $$ parentsToSkip.add(pair)[ FD ]
Line_2 $$ private List<Pair<File, Integer>> processRecursively(File dir, BitSet enabledDetectors) -->Line_3 $$ List<Pair<File, Integer>> parentsToSkip = new SmartList<Pair<File, Integer>>()[ CD ]
Line_39 $$ if (enabledForChildren == enabledDetectors) -->Line_40 $$ enabledForChildren = new BitSet()[ CD ]
Line_2 $$ private List<Pair<File, Integer>> processRecursively(File dir, BitSet enabledDetectors) -->Line_34 $$ if (!enabledForChildren.isEmpty()) [ CD ]
Line_39 $$ if (enabledForChildren == enabledDetectors) -->Line_41 $$ enabledForChildren.or(enabledDetectors)[ CD ]
Line_22 $$ if (!result.isProcessChildren()) -->Line_27 $$ enabledForChildren.set(i, false)[ CD ]
Line_18 $$ for (int i = 0, detectorsLength = myDetectors.length; i < detectorsLength; i++) -->Line_30 $$ if (parentToSkip != null && !FileUtil.filesEqual(parentToSkip, dir)) [ CD ]
Line_21 $$ final ProjectStructureDetector.DirectoryProcessingResult result = myDetectors[i].detectRoots(dir, children, myBaseDir, myDetectedRoots[i])-->Line_22 $$ if (!result.isProcessChildren()) [ FD ]
Line_38 $$ if (!toSkip.isEmpty()) -->Line_49 $$ if (enabledForChildren.isEmpty()) [ CD ]
Line_17 $$ BitSet enabledForChildren = enabledDetectors-->Line_23 $$ if (enabledForChildren == enabledDetectors) [ FD ]
Line_17 $$ BitSet enabledForChildren = enabledDetectors-->Line_34 $$ if (!enabledForChildren.isEmpty()) [ FD ]
Line_18 $$ for (int i = 0, detectorsLength = myDetectors.length; i < detectorsLength; i++) -->Line_31 $$ parentsToSkip.add(Pair.create(parentToSkip, i))[ FD ]
Line_38 $$ if (!toSkip.isEmpty()) -->Line_39 $$ if (enabledForChildren == enabledDetectors) [ CD ]
Line_2 $$ private List<Pair<File, Integer>> processRecursively(File dir, BitSet enabledDetectors) -->Line_41 $$ enabledForChildren.or(enabledDetectors)[ FD ]
Line_45 $$ if (!FileUtil.filesEqual(pair.getFirst(), dir)) -->Line_46 $$ parentsToSkip.add(pair)[ CD ]
Line_23 $$ if (enabledForChildren == enabledDetectors) -->Line_24 $$ enabledForChildren = new BitSet()[ CD ]
Line_17 $$ BitSet enabledForChildren = enabledDetectors-->Line_41 $$ enabledForChildren.or(enabledDetectors)[ FD ]
Line_21 $$ final ProjectStructureDetector.DirectoryProcessingResult result = myDetectors[i].detectRoots(dir, children, myBaseDir, myDetectedRoots[i])-->Line_29 $$ final File parentToSkip = result.getParentToSkip()[ FD ]
Line_8 $$ if (myProgressIndicator.isCanceled()) -->Line_9 $$ return parentsToSkip[ CD ]
Line_13 $$ File[] children = dir.listFiles()-->Line_14 $$ if (children == null) [ FD ]
Line_24 $$ enabledForChildren = new BitSet()-->Line_37 $$ final List<Pair<File, Integer>> toSkip = processRecursively(child, enabledForChildren)[ FD ]
Line_18 $$ for (int i = 0, detectorsLength = myDetectors.length; i < detectorsLength; i++) -->Line_19 $$ if (!enabledDetectors.get(i))[ FD ]
Line_23 $$ if (enabledForChildren == enabledDetectors) -->Line_25 $$ enabledForChildren.or(enabledDetectors)[ CD ]
Line_18 $$ for (int i = 0, detectorsLength = myDetectors.length; i < detectorsLength; i++) -->Line_21 $$ final ProjectStructureDetector.DirectoryProcessingResult result = myDetectors[i].detectRoots(dir, children, myBaseDir, myDetectedRoots[i])[ CD ]
Line_24 $$ enabledForChildren = new BitSet()-->Line_25 $$ enabledForChildren.or(enabledDetectors)[ FD ]
Line_17 $$ BitSet enabledForChildren = enabledDetectors-->Line_27 $$ enabledForChildren.set(i, false)[ FD ]
Line_43 $$ for (Pair<File, Integer> pair : toSkip) -->Line_45 $$ if (!FileUtil.filesEqual(pair.getFirst(), dir)) [ FD ]
Line_24 $$ enabledForChildren = new BitSet()-->Line_27 $$ enabledForChildren.set(i, false)[ FD ]
Line_17 $$ BitSet enabledForChildren = enabledDetectors-->Line_25 $$ enabledForChildren.or(enabledDetectors)[ FD ]
Line_2 $$ private List<Pair<File, Integer>> processRecursively(File dir, BitSet enabledDetectors) -->Line_30 $$ if (parentToSkip != null && !FileUtil.filesEqual(parentToSkip, dir)) [ FD ]
Line_14 $$ if (children == null) -->Line_15 $$ children = ArrayUtil.EMPTY_FILE_ARRAY[ CD ]
Line_40 $$ enabledForChildren = new BitSet()-->Line_41 $$ enabledForChildren.or(enabledDetectors)[ FD ]
Line_2 $$ private List<Pair<File, Integer>> processRecursively(File dir, BitSet enabledDetectors) -->Line_13 $$ File[] children = dir.listFiles()[ FD ]
Line_18 $$ for (int i = 0, detectorsLength = myDetectors.length; i < detectorsLength; i++) -->Line_29 $$ final File parentToSkip = result.getParentToSkip()[ CD ]
Line_18 $$ for (int i = 0, detectorsLength = myDetectors.length; i < detectorsLength; i++) -->Line_19 $$ if (!enabledDetectors.get(i))[ CD ]
Line_22 $$ if (!result.isProcessChildren()) -->Line_23 $$ if (enabledForChildren == enabledDetectors) [ CD ]
Line_2 $$ private List<Pair<File, Integer>> processRecursively(File dir, BitSet enabledDetectors) -->Line_39 $$ if (enabledForChildren == enabledDetectors) [ FD ]
Line_18 $$ for (int i = 0, detectorsLength = myDetectors.length; i < detectorsLength; i++) -->Line_27 $$ enabledForChildren.set(i, false)[ FD ]
Line_7 $$ if (myProgressIndicator != null) -->Line_11 $$ myProgressIndicator.setText2(dir.getPath())[ CD ]
Line_2 $$ private List<Pair<File, Integer>> processRecursively(File dir, BitSet enabledDetectors) -->Line_13 $$ File[] children = dir.listFiles()[ CD ]
Line_2 $$ private List<Pair<File, Integer>> processRecursively(File dir, BitSet enabledDetectors) -->Line_18 $$ for (int i = 0, detectorsLength = myDetectors.length; i < detectorsLength; i++) [ CD ]
Line_17 $$ BitSet enabledForChildren = enabledDetectors-->Line_40 $$ enabledForChildren = new BitSet()[ FD ]
Line_36 $$ if (child.isDirectory()) -->Line_38 $$ if (!toSkip.isEmpty()) [ CD ]
Line_40 $$ enabledForChildren = new BitSet()-->Line_49 $$ if (enabledForChildren.isEmpty()) [ FD ]
Line_2 $$ private List<Pair<File, Integer>> processRecursively(File dir, BitSet enabledDetectors) -->Line_25 $$ enabledForChildren.or(enabledDetectors)[ FD ]
Line_18 $$ for (int i = 0, detectorsLength = myDetectors.length; i < detectorsLength; i++) -->Line_22 $$ if (!result.isProcessChildren()) [ CD ]
Line_35 $$ for (File child : children) -->Line_37 $$ final List<Pair<File, Integer>> toSkip = processRecursively(child, enabledForChildren)[ FD ]
Line_17 $$ BitSet enabledForChildren = enabledDetectors-->Line_24 $$ enabledForChildren = new BitSet()[ FD ]
Line_24 $$ enabledForChildren = new BitSet()-->Line_49 $$ if (enabledForChildren.isEmpty()) [ FD ]
Line_2 $$ private List<Pair<File, Integer>> processRecursively(File dir, BitSet enabledDetectors) -->Line_4 $$ if (myTypeManager.isFileIgnored(dir.getName())) [ FD ]
Line_2 $$ private List<Pair<File, Integer>> processRecursively(File dir, BitSet enabledDetectors) -->Line_56 $$ return parentsToSkip[ CD ]
Line_24 $$ enabledForChildren = new BitSet()-->Line_39 $$ if (enabledForChildren == enabledDetectors) [ FD ]
Line_17 $$ BitSet enabledForChildren = enabledDetectors-->Line_49 $$ if (enabledForChildren.isEmpty()) [ FD ]
Line_36 $$ if (child.isDirectory()) -->Line_37 $$ final List<Pair<File, Integer>> toSkip = processRecursively(child, enabledForChildren)[ CD ]
Line_29 $$ final File parentToSkip = result.getParentToSkip()-->Line_31 $$ parentsToSkip.add(Pair.create(parentToSkip, i))[ FD ]
Line_24 $$ enabledForChildren = new BitSet()-->Line_44 $$ enabledForChildren.set(pair.getSecond(), false)[ FD ]
Line_13 $$ File[] children = dir.listFiles()-->Line_21 $$ final ProjectStructureDetector.DirectoryProcessingResult result = myDetectors[i].detectRoots(dir, children, myBaseDir, myDetectedRoots[i])[ FD ]
Line_17 $$ BitSet enabledForChildren = enabledDetectors-->Line_44 $$ enabledForChildren.set(pair.getSecond(), false)[ FD ]
Line_24 $$ enabledForChildren = new BitSet()-->Line_40 $$ enabledForChildren = new BitSet()[ FD ]
Line_3 $$ List<Pair<File, Integer>> parentsToSkip = new SmartList<Pair<File, Integer>>()-->Line_31 $$ parentsToSkip.add(Pair.create(parentToSkip, i))[ FD ]
Line_2 $$ private List<Pair<File, Integer>> processRecursively(File dir, BitSet enabledDetectors) -->Line_45 $$ if (!FileUtil.filesEqual(pair.getFirst(), dir)) [ FD ]
Line_2 $$ private List<Pair<File, Integer>> processRecursively(File dir, BitSet enabledDetectors) -->Line_4 $$ if (myTypeManager.isFileIgnored(dir.getName())) [ CD ]
Line_24 $$ enabledForChildren = new BitSet()-->Line_34 $$ if (!enabledForChildren.isEmpty()) [ FD ]
