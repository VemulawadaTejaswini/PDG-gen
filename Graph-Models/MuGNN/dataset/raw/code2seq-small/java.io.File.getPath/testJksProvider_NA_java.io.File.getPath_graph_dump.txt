Line_21 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_67 $$ verifyAfterReload(file, provider)[ FD ]
Line_56 $$ provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_67 $$ verifyAfterReload(file, provider)[ FD ]
Line_21 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_43 $$ provider = KeyProviderFactory.getProviders(conf).get(0)[ FD ]
Line_21 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_56 $$ provider = KeyProviderFactory.getProviders(conf).get(0)[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_11 $$ FileSystem fs = path.getFileSystem(conf)[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_70 $$ checkPermissionRetention(conf, ourUrl, path)[ FD ]
Line_30 $$ provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_43 $$ provider = KeyProviderFactory.getProviders(conf).get(0)[ FD ]
Line_6 $$ File file = new File(tmpDir, "test.jks")-->Line_41 $$ file.delete()[ FD ]
Line_30 $$ provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_67 $$ verifyAfterReload(file, provider)[ FD ]
Line_6 $$ File file = new File(tmpDir, "test.jks")-->Line_14 $$ assertTrue(file + " should exist", file.isFile())[ FD ]
Line_6 $$ File file = new File(tmpDir, "test.jks")-->Line_7 $$ file.delete()[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_8 $$ conf.set(KeyProviderFactory.KEY_PROVIDER_PATH, ourUrl)[ FD ]
Line_6 $$ File file = new File(tmpDir, "test.jks")-->Line_22 $$ assertTrue(file.exists())[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_21 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)[ FD ]
Line_21 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_30 $$ provider = KeyProviderFactory.getProviders(conf).get(0)[ FD ]
Line_6 $$ File file = new File(tmpDir, "test.jks")-->Line_54 $$ file.delete()[ FD ]
Line_5 $$ final String ourUrl = JavaKeyStoreProvider.SCHEME_NAME + "://file" + tmpDir + "/test.jks"-->Line_70 $$ checkPermissionRetention(conf, ourUrl, path)[ FD ]
Line_35 $$ if (newFile.exists()) -->Line_36 $$ newFile.delete()[ CD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_30 $$ provider = KeyProviderFactory.getProviders(conf).get(0)[ FD ]
Line_6 $$ File file = new File(tmpDir, "test.jks")-->Line_18 $$ file.delete()[ FD ]
Line_21 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_24 $$ verifyAfterReload(file, provider)[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_43 $$ provider = KeyProviderFactory.getProviders(conf).get(0)[ FD ]
Line_5 $$ final String ourUrl = JavaKeyStoreProvider.SCHEME_NAME + "://file" + tmpDir + "/test.jks"-->Line_9 $$ checkSpecificProvider(conf, ourUrl)[ FD ]
Line_43 $$ provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_56 $$ provider = KeyProviderFactory.getProviders(conf).get(0)[ FD ]
Line_6 $$ File file = new File(tmpDir, "test.jks")-->Line_67 $$ verifyAfterReload(file, provider)[ FD ]
Line_5 $$ final String ourUrl = JavaKeyStoreProvider.SCHEME_NAME + "://file" + tmpDir + "/test.jks"-->Line_8 $$ conf.set(KeyProviderFactory.KEY_PROVIDER_PATH, ourUrl)[ FD ]
Line_6 $$ File file = new File(tmpDir, "test.jks")-->Line_50 $$ verifyAfterReload(file, provider)[ FD ]
Line_10 $$ Path path = ProviderUtils.unnestUri(new URI(ourUrl))-->Line_12 $$ FileStatus s = fs.getFileStatus(path)[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_9 $$ checkSpecificProvider(conf, ourUrl)[ FD ]
Line_30 $$ provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_50 $$ verifyAfterReload(file, provider)[ FD ]
Line_6 $$ File file = new File(tmpDir, "test.jks")-->Line_17 $$ file.renameTo(oldFile)[ FD ]
Line_6 $$ File file = new File(tmpDir, "test.jks")-->Line_19 $$ file.createNewFile()[ FD ]
Line_43 $$ provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_67 $$ verifyAfterReload(file, provider)[ FD ]
Line_21 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_50 $$ verifyAfterReload(file, provider)[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_56 $$ provider = KeyProviderFactory.getProviders(conf).get(0)[ FD ]
Line_10 $$ Path path = ProviderUtils.unnestUri(new URI(ourUrl))-->Line_11 $$ FileSystem fs = path.getFileSystem(conf)[ FD ]
Line_63 $$ if (newFile.exists()) -->Line_64 $$ newFile.delete()[ CD ]
Line_12 $$ FileStatus s = fs.getFileStatus(path)-->Line_13 $$ assertTrue(s.getPermission().toString().equals("rwx------"))[ FD ]
Line_10 $$ Path path = ProviderUtils.unnestUri(new URI(ourUrl))-->Line_70 $$ checkPermissionRetention(conf, ourUrl, path)[ FD ]
Line_43 $$ provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_50 $$ verifyAfterReload(file, provider)[ FD ]
Line_6 $$ File file = new File(tmpDir, "test.jks")-->Line_24 $$ verifyAfterReload(file, provider)[ FD ]
Line_11 $$ FileSystem fs = path.getFileSystem(conf)-->Line_12 $$ FileStatus s = fs.getFileStatus(path)[ FD ]
Line_6 $$ File file = new File(tmpDir, "test.jks")-->Line_53 $$ file.renameTo(oldFile)[ FD ]
Line_30 $$ provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_56 $$ provider = KeyProviderFactory.getProviders(conf).get(0)[ FD ]
