Line_2 $$ private static String getClasspathString(ModuleChunk chunk) -->Line_4 $$ for (File file : ProjectPaths.getCompilationClasspathFiles(chunk, chunk.containsTests(), false, false)) [ FD ]
Line_2 $$ private static String getClasspathString(ModuleChunk chunk) -->Line_9 $$ return StringUtil.join(cp, File.pathSeparator)[ CD ]
Line_3 $$ final Set<String> cp = new LinkedHashSet<String>()-->Line_9 $$ return StringUtil.join(cp, File.pathSeparator)[ FD ]
Line_5 $$ if (file.exists()) -->Line_6 $$ cp.add(FileUtil.toCanonicalPath(file.getPath()))[ CD ]
Line_4 $$ for (File file : ProjectPaths.getCompilationClasspathFiles(chunk, chunk.containsTests(), false, false)) -->Line_5 $$ if (file.exists()) [ FD ]
Line_3 $$ final Set<String> cp = new LinkedHashSet<String>()-->Line_6 $$ cp.add(FileUtil.toCanonicalPath(file.getPath()))[ FD ]
Line_4 $$ for (File file : ProjectPaths.getCompilationClasspathFiles(chunk, chunk.containsTests(), false, false)) -->Line_6 $$ cp.add(FileUtil.toCanonicalPath(file.getPath()))[ FD ]
Line_2 $$ private static String getClasspathString(ModuleChunk chunk) -->Line_3 $$ final Set<String> cp = new LinkedHashSet<String>()[ CD ]
