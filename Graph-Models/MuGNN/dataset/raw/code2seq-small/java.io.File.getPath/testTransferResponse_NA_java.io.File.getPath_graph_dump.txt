Line_11 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_45 $$ Assert.assertSame(mockHttpServletResponse.getOutputStream(), recordSPIAgentResponse._outputStream)[ FD ]
Line_48 $$ tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)-->Line_49 $$ Assert.assertTrue(tempFile.exists())[ FD ]
Line_7 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_42 $$ Assert.assertSame(mockHttpServletRequest, recordSPIAgentResponse._request)[ FD ]
Line_56 $$ bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_58 $$ httpClientSPIAgent.transferResponse(mockHttpServletRequest, bufferCacheServletResponse, null)[ FD ]
Line_9 $$ RecordSPIAgentResponse recordSPIAgentResponse = new RecordSPIAgentResponse()-->Line_30 $$ recordSPIAgentResponse = new RecordSPIAgentResponse()[ FD ]
Line_7 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_31 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_RESPONSE, recordSPIAgentResponse)[ FD ]
Line_26 $$ File tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)-->Line_50 $$ spiAgentRequest.requestBodyFile = tempFile[ FD ]
Line_7 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_16 $$ Assert.assertNull(mockHttpServletRequest.getAttribute(WebKeys.SPI_AGENT_RESPONSE))[ FD ]
Line_32 $$ mockHttpServletResponse = new MockHttpServletResponse()-->Line_54 $$ mockHttpServletResponse = new MockHttpServletResponse()[ FD ]
Line_11 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_19 $$ Assert.assertEquals(8, mockHttpServletResponse.getContentLength())[ FD ]
Line_7 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_55 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_ORIGINAL_RESPONSE, mockHttpServletResponse)[ FD ]
Line_48 $$ tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)-->Line_57 $$ Assert.assertTrue(tempFile.delete())[ FD ]
Line_9 $$ RecordSPIAgentResponse recordSPIAgentResponse = new RecordSPIAgentResponse()-->Line_31 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_RESPONSE, recordSPIAgentResponse)[ FD ]
Line_7 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_12 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_ORIGINAL_RESPONSE, mockHttpServletResponse)[ FD ]
Line_32 $$ mockHttpServletResponse = new MockHttpServletResponse()-->Line_45 $$ Assert.assertSame(mockHttpServletResponse.getOutputStream(), recordSPIAgentResponse._outputStream)[ FD ]
Line_6 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, mockRegistrationReference)-->Line_35 $$ httpClientSPIAgent.transferResponse(mockHttpServletRequest, bufferCacheServletResponse, null)[ FD ]
Line_9 $$ RecordSPIAgentResponse recordSPIAgentResponse = new RecordSPIAgentResponse()-->Line_52 $$ recordSPIAgentResponse = new RecordSPIAgentResponse()[ FD ]
Line_32 $$ mockHttpServletResponse = new MockHttpServletResponse()-->Line_41 $$ Assert.assertEquals(8, mockHttpServletResponse.getContentLength())[ FD ]
Line_34 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_43 $$ Assert.assertSame(bufferCacheServletResponse, recordSPIAgentResponse._bufferCacheServletResponse)[ FD ]
Line_34 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_56 $$ bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())[ FD ]
Line_54 $$ mockHttpServletResponse = new MockHttpServletResponse()-->Line_55 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_ORIGINAL_RESPONSE, mockHttpServletResponse)[ FD ]
Line_11 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_33 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_ORIGINAL_RESPONSE, mockHttpServletResponse)[ FD ]
Line_7 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_10 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_RESPONSE, recordSPIAgentResponse)[ FD ]
Line_11 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_12 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_ORIGINAL_RESPONSE, mockHttpServletResponse)[ FD ]
Line_13 $$ Exception exception = new Exception()-->Line_14 $$ httpClientSPIAgent.transferResponse(mockHttpServletRequest, new BufferCacheServletResponse(new MockHttpServletResponse()), exception)[ FD ]
Line_26 $$ File tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)-->Line_57 $$ Assert.assertTrue(tempFile.delete())[ FD ]
Line_7 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_18 $$ Assert.assertNull(mockHttpServletRequest.getAttribute(WebKeys.SPI_AGENT_ORIGINAL_RESPONSE))[ FD ]
Line_26 $$ File tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)-->Line_27 $$ Assert.assertTrue(tempFile.exists())[ FD ]
Line_7 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_38 $$ Assert.assertNull(mockHttpServletRequest.getAttribute(WebKeys.SPI_AGENT_RESPONSE))[ FD ]
Line_26 $$ File tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)-->Line_60 $$ Assert.assertTrue(files.contains(tempFile.getPath()))[ FD ]
Line_9 $$ RecordSPIAgentResponse recordSPIAgentResponse = new RecordSPIAgentResponse()-->Line_10 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_RESPONSE, recordSPIAgentResponse)[ FD ]
Line_7 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_40 $$ Assert.assertNull(mockHttpServletRequest.getAttribute(WebKeys.SPI_AGENT_ORIGINAL_RESPONSE))[ FD ]
Line_48 $$ tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)-->Line_60 $$ Assert.assertTrue(files.contains(tempFile.getPath()))[ FD ]
Line_7 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_15 $$ Assert.assertNull(mockHttpServletRequest.getAttribute(WebKeys.SPI_AGENT_REQUEST))[ FD ]
Line_11 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_23 $$ Assert.assertSame(mockHttpServletResponse.getOutputStream(), recordSPIAgentResponse._outputStream)[ FD ]
Line_11 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_55 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_ORIGINAL_RESPONSE, mockHttpServletResponse)[ FD ]
Line_34 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_58 $$ httpClientSPIAgent.transferResponse(mockHttpServletRequest, bufferCacheServletResponse, null)[ FD ]
Line_7 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_14 $$ httpClientSPIAgent.transferResponse(mockHttpServletRequest, new BufferCacheServletResponse(new MockHttpServletResponse()), exception)[ FD ]
Line_11 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_41 $$ Assert.assertEquals(8, mockHttpServletResponse.getContentLength())[ FD ]
Line_59 $$ Set<String> files = ReflectionTestUtil.getFieldValue(Class.forName("java.io.DeleteOnExitHook"), "files")-->Line_60 $$ Assert.assertTrue(files.contains(tempFile.getPath()))[ FD ]
Line_7 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_53 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_RESPONSE, recordSPIAgentResponse)[ FD ]
Line_30 $$ recordSPIAgentResponse = new RecordSPIAgentResponse()-->Line_31 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_RESPONSE, recordSPIAgentResponse)[ FD ]
Line_52 $$ recordSPIAgentResponse = new RecordSPIAgentResponse()-->Line_53 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_RESPONSE, recordSPIAgentResponse)[ FD ]
Line_26 $$ File tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)-->Line_48 $$ tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)[ FD ]
Line_30 $$ recordSPIAgentResponse = new RecordSPIAgentResponse()-->Line_52 $$ recordSPIAgentResponse = new RecordSPIAgentResponse()[ FD ]
Line_6 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, mockRegistrationReference)-->Line_58 $$ httpClientSPIAgent.transferResponse(mockHttpServletRequest, bufferCacheServletResponse, null)[ FD ]
Line_26 $$ File tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)-->Line_28 $$ spiAgentRequest.requestBodyFile = tempFile[ FD ]
Line_7 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_37 $$ Assert.assertNull(mockHttpServletRequest.getAttribute(WebKeys.SPI_AGENT_REQUEST))[ FD ]
Line_6 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, mockRegistrationReference)-->Line_14 $$ httpClientSPIAgent.transferResponse(mockHttpServletRequest, new BufferCacheServletResponse(new MockHttpServletResponse()), exception)[ FD ]
Line_34 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_35 $$ httpClientSPIAgent.transferResponse(mockHttpServletRequest, bufferCacheServletResponse, null)[ FD ]
Line_7 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_58 $$ httpClientSPIAgent.transferResponse(mockHttpServletRequest, bufferCacheServletResponse, null)[ FD ]
Line_7 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_35 $$ httpClientSPIAgent.transferResponse(mockHttpServletRequest, bufferCacheServletResponse, null)[ FD ]
Line_26 $$ File tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)-->Line_49 $$ Assert.assertTrue(tempFile.exists())[ FD ]
Line_7 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_33 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_ORIGINAL_RESPONSE, mockHttpServletResponse)[ FD ]
Line_26 $$ File tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)-->Line_36 $$ Assert.assertFalse(tempFile.exists())[ FD ]
Line_7 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_29 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_REQUEST, spiAgentRequest)[ FD ]
Line_32 $$ mockHttpServletResponse = new MockHttpServletResponse()-->Line_33 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_ORIGINAL_RESPONSE, mockHttpServletResponse)[ FD ]
Line_13 $$ Exception exception = new Exception()-->Line_17 $$ Assert.assertSame(exception, recordSPIAgentResponse.exception)[ FD ]
Line_7 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_8 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_REQUEST, new SPIAgentRequest(_mockHttpServletRequest))[ FD ]
Line_30 $$ recordSPIAgentResponse = new RecordSPIAgentResponse()-->Line_53 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_RESPONSE, recordSPIAgentResponse)[ FD ]
Line_48 $$ tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)-->Line_50 $$ spiAgentRequest.requestBodyFile = tempFile[ FD ]
Line_7 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_51 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_REQUEST, spiAgentRequest)[ FD ]
Line_11 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_32 $$ mockHttpServletResponse = new MockHttpServletResponse()[ FD ]
Line_9 $$ RecordSPIAgentResponse recordSPIAgentResponse = new RecordSPIAgentResponse()-->Line_53 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_RESPONSE, recordSPIAgentResponse)[ FD ]
Line_32 $$ mockHttpServletResponse = new MockHttpServletResponse()-->Line_55 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_ORIGINAL_RESPONSE, mockHttpServletResponse)[ FD ]
Line_11 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_54 $$ mockHttpServletResponse = new MockHttpServletResponse()[ FD ]
