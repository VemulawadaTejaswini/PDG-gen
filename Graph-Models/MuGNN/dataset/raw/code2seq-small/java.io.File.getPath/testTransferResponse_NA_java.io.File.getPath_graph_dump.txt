Line_2 $$ public void testTransferResponse() throws Exception -->Line_52 $$ bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())[ CD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_24 $$ Assert.assertTrue(tempFile.exists())[ CD ]
Line_23 $$ File tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)-->Line_45 $$ Assert.assertTrue(tempFile.exists())[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_34 $$ Assert.assertNull(mockHttpServletRequest.getAttribute(WebKeys.SPI_AGENT_REQUEST))[ CD ]
Line_27 $$ recordSPIAgentResponse = new RecordSPIAgentResponse()-->Line_28 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_RESPONSE, recordSPIAgentResponse)[ FD ]
Line_9 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_17 $$ Assert.assertEquals(8, mockHttpServletResponse.getContentLength())[ FD ]
Line_11 $$ Exception exception = new Exception()-->Line_12 $$ httpClientSPIAgent.transferResponse(mockHttpServletRequest, new BufferCacheServletResponse(new MockHttpServletResponse()), exception)[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_49 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_RESPONSE, recordSPIAgentResponse)[ CD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_26 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_REQUEST, spiAgentRequest)[ CD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_33 $$ Assert.assertFalse(tempFile.exists())[ CD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_38 $$ Assert.assertEquals(8, mockHttpServletResponse.getContentLength())[ CD ]
Line_50 $$ mockHttpServletResponse = new MockHttpServletResponse()-->Line_51 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_ORIGINAL_RESPONSE, mockHttpServletResponse)[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_35 $$ Assert.assertNull(mockHttpServletRequest.getAttribute(WebKeys.SPI_AGENT_RESPONSE))[ CD ]
Line_4 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, mockRegistrationReference)-->Line_54 $$ httpClientSPIAgent.transferResponse(mockHttpServletRequest, bufferCacheServletResponse, null)[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_22 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)[ CD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_31 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())[ CD ]
Line_22 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_43 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)[ FD ]
Line_23 $$ File tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)-->Line_33 $$ Assert.assertFalse(tempFile.exists())[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_11 $$ Exception exception = new Exception()[ CD ]
Line_7 $$ RecordSPIAgentResponse recordSPIAgentResponse = new RecordSPIAgentResponse()-->Line_48 $$ recordSPIAgentResponse = new RecordSPIAgentResponse()[ FD ]
Line_44 $$ tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)-->Line_46 $$ spiAgentRequest.requestBodyFile = tempFile[ FD ]
Line_3 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(new MockIntraband())-->Line_41 $$ Assert.assertSame(mockRegistrationReference, recordSPIAgentResponse._registrationReference)[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_21 $$ Assert.assertSame(mockHttpServletResponse.getOutputStream(), recordSPIAgentResponse._outputStream)[ CD ]
Line_23 $$ File tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)-->Line_25 $$ spiAgentRequest.requestBodyFile = tempFile[ FD ]
Line_31 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_52 $$ bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())[ FD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_39 $$ Assert.assertSame(mockHttpServletRequest, recordSPIAgentResponse._request)[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_50 $$ mockHttpServletResponse = new MockHttpServletResponse()[ CD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_15 $$ Assert.assertSame(exception, recordSPIAgentResponse.exception)[ CD ]
Line_29 $$ mockHttpServletResponse = new MockHttpServletResponse()-->Line_30 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_ORIGINAL_RESPONSE, mockHttpServletResponse)[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_39 $$ Assert.assertSame(mockHttpServletRequest, recordSPIAgentResponse._request)[ CD ]
Line_23 $$ File tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)-->Line_56 $$ Assert.assertTrue(files.contains(tempFile.getPath()))[ FD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_8 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_RESPONSE, recordSPIAgentResponse)[ FD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_37 $$ Assert.assertNull(mockHttpServletRequest.getAttribute(WebKeys.SPI_AGENT_ORIGINAL_RESPONSE))[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_43 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)[ CD ]
Line_23 $$ File tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)-->Line_44 $$ tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_4 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, mockRegistrationReference)[ CD ]
Line_9 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_21 $$ Assert.assertSame(mockHttpServletResponse.getOutputStream(), recordSPIAgentResponse._outputStream)[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_23 $$ File tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)[ CD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_32 $$ httpClientSPIAgent.transferResponse(mockHttpServletRequest, bufferCacheServletResponse, null)[ FD ]
Line_4 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, mockRegistrationReference)-->Line_12 $$ httpClientSPIAgent.transferResponse(mockHttpServletRequest, new BufferCacheServletResponse(new MockHttpServletResponse()), exception)[ FD ]
Line_22 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_47 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_REQUEST, spiAgentRequest)[ FD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_13 $$ Assert.assertNull(mockHttpServletRequest.getAttribute(WebKeys.SPI_AGENT_REQUEST))[ FD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_28 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_RESPONSE, recordSPIAgentResponse)[ FD ]
Line_7 $$ RecordSPIAgentResponse recordSPIAgentResponse = new RecordSPIAgentResponse()-->Line_49 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_RESPONSE, recordSPIAgentResponse)[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_53 $$ Assert.assertTrue(tempFile.delete())[ CD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_10 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_ORIGINAL_RESPONSE, mockHttpServletResponse)[ FD ]
Line_11 $$ Exception exception = new Exception()-->Line_15 $$ Assert.assertSame(exception, recordSPIAgentResponse.exception)[ FD ]
Line_23 $$ File tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)-->Line_46 $$ spiAgentRequest.requestBodyFile = tempFile[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_9 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()[ CD ]
Line_9 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_42 $$ Assert.assertSame(mockHttpServletResponse.getOutputStream(), recordSPIAgentResponse._outputStream)[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_42 $$ Assert.assertSame(mockHttpServletResponse.getOutputStream(), recordSPIAgentResponse._outputStream)[ CD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_17 $$ Assert.assertEquals(8, mockHttpServletResponse.getContentLength())[ CD ]
Line_44 $$ tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)-->Line_56 $$ Assert.assertTrue(files.contains(tempFile.getPath()))[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_47 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_REQUEST, spiAgentRequest)[ CD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_29 $$ mockHttpServletResponse = new MockHttpServletResponse()[ CD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_6 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_REQUEST, new SPIAgentRequest(_mockHttpServletRequest))[ CD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_41 $$ Assert.assertSame(mockRegistrationReference, recordSPIAgentResponse._registrationReference)[ CD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_46 $$ spiAgentRequest.requestBodyFile = tempFile[ CD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_56 $$ Assert.assertTrue(files.contains(tempFile.getPath()))[ CD ]
Line_31 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_32 $$ httpClientSPIAgent.transferResponse(mockHttpServletRequest, bufferCacheServletResponse, null)[ FD ]
Line_7 $$ RecordSPIAgentResponse recordSPIAgentResponse = new RecordSPIAgentResponse()-->Line_28 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_RESPONSE, recordSPIAgentResponse)[ FD ]
Line_9 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_30 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_ORIGINAL_RESPONSE, mockHttpServletResponse)[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_45 $$ Assert.assertTrue(tempFile.exists())[ CD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_20 $$ Assert.assertSame(mockRegistrationReference, recordSPIAgentResponse._registrationReference)[ CD ]
Line_44 $$ tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)-->Line_53 $$ Assert.assertTrue(tempFile.delete())[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_12 $$ httpClientSPIAgent.transferResponse(mockHttpServletRequest, new BufferCacheServletResponse(new MockHttpServletResponse()), exception)[ CD ]
Line_23 $$ File tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)-->Line_24 $$ Assert.assertTrue(tempFile.exists())[ FD ]
Line_7 $$ RecordSPIAgentResponse recordSPIAgentResponse = new RecordSPIAgentResponse()-->Line_8 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_RESPONSE, recordSPIAgentResponse)[ FD ]
Line_9 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_10 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_ORIGINAL_RESPONSE, mockHttpServletResponse)[ FD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_12 $$ httpClientSPIAgent.transferResponse(mockHttpServletRequest, new BufferCacheServletResponse(new MockHttpServletResponse()), exception)[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_32 $$ httpClientSPIAgent.transferResponse(mockHttpServletRequest, bufferCacheServletResponse, null)[ CD ]
Line_44 $$ tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)-->Line_45 $$ Assert.assertTrue(tempFile.exists())[ FD ]
Line_29 $$ mockHttpServletResponse = new MockHttpServletResponse()-->Line_51 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_ORIGINAL_RESPONSE, mockHttpServletResponse)[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_27 $$ recordSPIAgentResponse = new RecordSPIAgentResponse()[ CD ]
Line_43 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_47 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_REQUEST, spiAgentRequest)[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_55 $$ Set<String> files = ReflectionTestUtil.getFieldValue(Class.forName("java.io.DeleteOnExitHook"), "files")[ CD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_30 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_ORIGINAL_RESPONSE, mockHttpServletResponse)[ FD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_51 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_ORIGINAL_RESPONSE, mockHttpServletResponse)[ FD ]
Line_31 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_40 $$ Assert.assertSame(bufferCacheServletResponse, recordSPIAgentResponse._bufferCacheServletResponse)[ FD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_35 $$ Assert.assertNull(mockHttpServletRequest.getAttribute(WebKeys.SPI_AGENT_RESPONSE))[ FD ]
Line_48 $$ recordSPIAgentResponse = new RecordSPIAgentResponse()-->Line_49 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_RESPONSE, recordSPIAgentResponse)[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_30 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_ORIGINAL_RESPONSE, mockHttpServletResponse)[ CD ]
Line_23 $$ File tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)-->Line_53 $$ Assert.assertTrue(tempFile.delete())[ FD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_34 $$ Assert.assertNull(mockHttpServletRequest.getAttribute(WebKeys.SPI_AGENT_REQUEST))[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_37 $$ Assert.assertNull(mockHttpServletRequest.getAttribute(WebKeys.SPI_AGENT_ORIGINAL_RESPONSE))[ CD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_26 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_REQUEST, spiAgentRequest)[ FD ]
Line_4 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, mockRegistrationReference)-->Line_32 $$ httpClientSPIAgent.transferResponse(mockHttpServletRequest, bufferCacheServletResponse, null)[ FD ]
Line_31 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_54 $$ httpClientSPIAgent.transferResponse(mockHttpServletRequest, bufferCacheServletResponse, null)[ FD ]
Line_9 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_29 $$ mockHttpServletResponse = new MockHttpServletResponse()[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_36 $$ Assert.assertNull(recordSPIAgentResponse.exception)[ CD ]
Line_29 $$ mockHttpServletResponse = new MockHttpServletResponse()-->Line_50 $$ mockHttpServletResponse = new MockHttpServletResponse()[ FD ]
Line_9 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_51 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_ORIGINAL_RESPONSE, mockHttpServletResponse)[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_16 $$ Assert.assertNull(mockHttpServletRequest.getAttribute(WebKeys.SPI_AGENT_ORIGINAL_RESPONSE))[ CD ]
Line_55 $$ Set<String> files = ReflectionTestUtil.getFieldValue(Class.forName("java.io.DeleteOnExitHook"), "files")-->Line_56 $$ Assert.assertTrue(files.contains(tempFile.getPath()))[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_40 $$ Assert.assertSame(bufferCacheServletResponse, recordSPIAgentResponse._bufferCacheServletResponse)[ CD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_44 $$ tempFile = File.createTempFile(HttpClientSPIAgentTest.class.getName(), null)[ CD ]
Line_27 $$ recordSPIAgentResponse = new RecordSPIAgentResponse()-->Line_49 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_RESPONSE, recordSPIAgentResponse)[ FD ]
Line_27 $$ recordSPIAgentResponse = new RecordSPIAgentResponse()-->Line_48 $$ recordSPIAgentResponse = new RecordSPIAgentResponse()[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_3 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(new MockIntraband())[ CD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_6 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_REQUEST, new SPIAgentRequest(_mockHttpServletRequest))[ FD ]
Line_9 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_50 $$ mockHttpServletResponse = new MockHttpServletResponse()[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_54 $$ httpClientSPIAgent.transferResponse(mockHttpServletRequest, bufferCacheServletResponse, null)[ CD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_54 $$ httpClientSPIAgent.transferResponse(mockHttpServletRequest, bufferCacheServletResponse, null)[ FD ]
Line_3 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(new MockIntraband())-->Line_20 $$ Assert.assertSame(mockRegistrationReference, recordSPIAgentResponse._registrationReference)[ FD ]
Line_29 $$ mockHttpServletResponse = new MockHttpServletResponse()-->Line_42 $$ Assert.assertSame(mockHttpServletResponse.getOutputStream(), recordSPIAgentResponse._outputStream)[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_28 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_RESPONSE, recordSPIAgentResponse)[ CD ]
Line_52 $$ bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_54 $$ httpClientSPIAgent.transferResponse(mockHttpServletRequest, bufferCacheServletResponse, null)[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_7 $$ RecordSPIAgentResponse recordSPIAgentResponse = new RecordSPIAgentResponse()[ CD ]
Line_29 $$ mockHttpServletResponse = new MockHttpServletResponse()-->Line_38 $$ Assert.assertEquals(8, mockHttpServletResponse.getContentLength())[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_13 $$ Assert.assertNull(mockHttpServletRequest.getAttribute(WebKeys.SPI_AGENT_REQUEST))[ CD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_8 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_RESPONSE, recordSPIAgentResponse)[ CD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_14 $$ Assert.assertNull(mockHttpServletRequest.getAttribute(WebKeys.SPI_AGENT_RESPONSE))[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_19 $$ Assert.assertNull(recordSPIAgentResponse._bufferCacheServletResponse)[ CD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_51 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_ORIGINAL_RESPONSE, mockHttpServletResponse)[ CD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_25 $$ spiAgentRequest.requestBodyFile = tempFile[ CD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_14 $$ Assert.assertNull(mockHttpServletRequest.getAttribute(WebKeys.SPI_AGENT_RESPONSE))[ CD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_49 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_RESPONSE, recordSPIAgentResponse)[ FD ]
Line_9 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_38 $$ Assert.assertEquals(8, mockHttpServletResponse.getContentLength())[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_48 $$ recordSPIAgentResponse = new RecordSPIAgentResponse()[ CD ]
Line_22 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_26 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_REQUEST, spiAgentRequest)[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_10 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_ORIGINAL_RESPONSE, mockHttpServletResponse)[ CD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_18 $$ Assert.assertNull(recordSPIAgentResponse._request)[ CD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_47 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_REQUEST, spiAgentRequest)[ FD ]
Line_2 $$ public void testTransferResponse() throws Exception -->Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()[ CD ]
Line_5 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_16 $$ Assert.assertNull(mockHttpServletRequest.getAttribute(WebKeys.SPI_AGENT_ORIGINAL_RESPONSE))[ FD ]
Line_7 $$ RecordSPIAgentResponse recordSPIAgentResponse = new RecordSPIAgentResponse()-->Line_27 $$ recordSPIAgentResponse = new RecordSPIAgentResponse()[ FD ]
