Line_18 $$ if (formatWithPsi) -->Line_19 $$ performFormatting(file)[ CD ]
Line_7 $$ final PsiFile file = PsiFileFactory.getInstance(getProject()).createFileFromText(fileName, getFileType(fileName), StringUtil.convertLineSeparators(text), LocalTimeCounter.currentTime(), true)-->Line_21 $$ performFormattingWithDocument(file)[ FD ]
Line_2 $$ private void doSanityTestForFile(final File subFile, final List<File> failedFiles, final boolean formatWithPsi) throws IOException, IncorrectOperationException -->Line_4 $$ final byte[] bytes = FileUtil.loadFileBytes(subFile)[ FD ]
Line_36 $$ if (virtualFile != null) -->Line_37 $$ ((UndoManagerImpl) UndoManager.getInstance(getProject())).clearUndoRedoQueueInTests(virtualFile)[ CD ]
Line_7 $$ final PsiFile file = PsiFileFactory.getInstance(getProject()).createFileFromText(fileName, getFileType(fileName), StringUtil.convertLineSeparators(text), LocalTimeCounter.currentTime(), true)-->Line_19 $$ performFormatting(file)[ FD ]
Line_18 $$ if (formatWithPsi) -->Line_21 $$ performFormattingWithDocument(file)[ CD ]
Line_3 $$ if (subFile.isFile() && subFile.getName().endsWith(getFileExtension())) -->Line_5 $$ final String text = new String(bytes)[ CD ]
Line_3 $$ if (subFile.isFile() && subFile.getName().endsWith(getFileExtension())) -->Line_7 $$ final PsiFile file = PsiFileFactory.getInstance(getProject()).createFileFromText(fileName, getFileType(fileName), StringUtil.convertLineSeparators(text), LocalTimeCounter.currentTime(), true)[ CD ]
Line_7 $$ final PsiFile file = PsiFileFactory.getInstance(getProject()).createFileFromText(fileName, getFileType(fileName), StringUtil.convertLineSeparators(text), LocalTimeCounter.currentTime(), true)-->Line_35 $$ final VirtualFile virtualFile = file.getVirtualFile()[ FD ]
Line_2 $$ private void doSanityTestForFile(final File subFile, final List<File> failedFiles, final boolean formatWithPsi) throws IOException, IncorrectOperationException -->Line_26 $$ failedFiles.add(subFile)[ FD ]
Line_2 $$ private void doSanityTestForFile(final File subFile, final List<File> failedFiles, final boolean formatWithPsi) throws IOException, IncorrectOperationException -->Line_3 $$ if (subFile.isFile() && subFile.getName().endsWith(getFileExtension())) [ CD ]
Line_36 $$ if (virtualFile != null) -->Line_38 $$ ((UndoManagerImpl) UndoManager.getGlobalInstance()).clearUndoRedoQueueInTests(virtualFile)[ CD ]
Line_9 $$ CommandProcessor.getInstance().executeCommand(getProject(), new Runnable() -->Line_13 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() [ CD ]
Line_6 $$ final String fileName = "before." + getFileExtension()-->Line_7 $$ final PsiFile file = PsiFileFactory.getInstance(getProject()).createFileFromText(fileName, getFileType(fileName), StringUtil.convertLineSeparators(text), LocalTimeCounter.currentTime(), true)[ FD ]
Line_3 $$ if (subFile.isFile() && subFile.getName().endsWith(getFileExtension())) -->Line_4 $$ final byte[] bytes = FileUtil.loadFileBytes(subFile)[ CD ]
Line_5 $$ final String text = new String(bytes)-->Line_7 $$ final PsiFile file = PsiFileFactory.getInstance(getProject()).createFileFromText(fileName, getFileType(fileName), StringUtil.convertLineSeparators(text), LocalTimeCounter.currentTime(), true)[ FD ]
Line_2 $$ private void doSanityTestForFile(final File subFile, final List<File> failedFiles, final boolean formatWithPsi) throws IOException, IncorrectOperationException -->Line_3 $$ if (subFile.isFile() && subFile.getName().endsWith(getFileExtension())) [ FD ]
Line_3 $$ if (subFile.isFile() && subFile.getName().endsWith(getFileExtension())) -->Line_6 $$ final String fileName = "before." + getFileExtension()[ CD ]
