Line_2 $$ public static JavacRemoteProto.Message.Request createCompilationRequest(List<String> options, Collection<File> files, Collection<File> classpath, Collection<File> platformCp, Collection<File> sourcePath, Map<File, Set<File>> outs) -->Line_3 $$ final JavacRemoteProto.Message.Request.Builder builder = JavacRemoteProto.Message.Request.newBuilder()[ CD ]
Line_19 $$ final JavacRemoteProto.Message.Request.OutputGroup.Builder groupBuilder = JavacRemoteProto.Message.Request.OutputGroup.newBuilder()-->Line_24 $$ builder.addOutput(groupBuilder.build())[ FD ]
Line_3 $$ final JavacRemoteProto.Message.Request.Builder builder = JavacRemoteProto.Message.Request.newBuilder()-->Line_10 $$ builder.addClasspath(FileUtil.toSystemIndependentName(file.getPath()))[ FD ]
Line_2 $$ public static JavacRemoteProto.Message.Request createCompilationRequest(List<String> options, Collection<File> files, Collection<File> classpath, Collection<File> platformCp, Collection<File> sourcePath, Map<File, Set<File>> outs) -->Line_26 $$ return builder.build()[ CD ]
Line_2 $$ public static JavacRemoteProto.Message.Request createCompilationRequest(List<String> options, Collection<File> files, Collection<File> classpath, Collection<File> platformCp, Collection<File> sourcePath, Map<File, Set<File>> outs) -->Line_5 $$ builder.addAllOption(options)[ CD ]
Line_3 $$ final JavacRemoteProto.Message.Request.Builder builder = JavacRemoteProto.Message.Request.newBuilder()-->Line_7 $$ builder.addFile(FileUtil.toSystemIndependentName(file.getPath()))[ FD ]
Line_18 $$ for (Map.Entry<File, Set<File>> entry : outs.entrySet()) -->Line_21 $$ for (File srcRoot : entry.getValue()) [ FD ]
Line_6 $$ for (File file : files) -->Line_10 $$ builder.addClasspath(FileUtil.toSystemIndependentName(file.getPath()))[ FD ]
Line_2 $$ public static JavacRemoteProto.Message.Request createCompilationRequest(List<String> options, Collection<File> files, Collection<File> classpath, Collection<File> platformCp, Collection<File> sourcePath, Map<File, Set<File>> outs) -->Line_5 $$ builder.addAllOption(options)[ FD ]
Line_2 $$ public static JavacRemoteProto.Message.Request createCompilationRequest(List<String> options, Collection<File> files, Collection<File> classpath, Collection<File> platformCp, Collection<File> sourcePath, Map<File, Set<File>> outs) -->Line_18 $$ for (Map.Entry<File, Set<File>> entry : outs.entrySet()) [ FD ]
Line_3 $$ final JavacRemoteProto.Message.Request.Builder builder = JavacRemoteProto.Message.Request.newBuilder()-->Line_13 $$ builder.addPlatformClasspath(FileUtil.toSystemIndependentName(file.getPath()))[ FD ]
Line_3 $$ final JavacRemoteProto.Message.Request.Builder builder = JavacRemoteProto.Message.Request.newBuilder()-->Line_5 $$ builder.addAllOption(options)[ FD ]
Line_18 $$ for (Map.Entry<File, Set<File>> entry : outs.entrySet()) -->Line_20 $$ groupBuilder.setOutputRoot(FileUtil.toSystemIndependentName(entry.getKey().getPath()))[ FD ]
Line_2 $$ public static JavacRemoteProto.Message.Request createCompilationRequest(List<String> options, Collection<File> files, Collection<File> classpath, Collection<File> platformCp, Collection<File> sourcePath, Map<File, Set<File>> outs) -->Line_4 $$ builder.setRequestType(JavacRemoteProto.Message.Request.Type.COMPILE)[ CD ]
Line_3 $$ final JavacRemoteProto.Message.Request.Builder builder = JavacRemoteProto.Message.Request.newBuilder()-->Line_24 $$ builder.addOutput(groupBuilder.build())[ FD ]
Line_6 $$ for (File file : files) -->Line_16 $$ builder.addSourcepath(FileUtil.toSystemIndependentName(file.getPath()))[ FD ]
Line_6 $$ for (File file : files) -->Line_13 $$ builder.addPlatformClasspath(FileUtil.toSystemIndependentName(file.getPath()))[ FD ]
Line_19 $$ final JavacRemoteProto.Message.Request.OutputGroup.Builder groupBuilder = JavacRemoteProto.Message.Request.OutputGroup.newBuilder()-->Line_20 $$ groupBuilder.setOutputRoot(FileUtil.toSystemIndependentName(entry.getKey().getPath()))[ FD ]
Line_3 $$ final JavacRemoteProto.Message.Request.Builder builder = JavacRemoteProto.Message.Request.newBuilder()-->Line_26 $$ return builder.build()[ FD ]
Line_6 $$ for (File file : files) -->Line_7 $$ builder.addFile(FileUtil.toSystemIndependentName(file.getPath()))[ FD ]
Line_21 $$ for (File srcRoot : entry.getValue()) -->Line_22 $$ groupBuilder.addSourceRoot(FileUtil.toSystemIndependentName(srcRoot.getPath()))[ FD ]
Line_3 $$ final JavacRemoteProto.Message.Request.Builder builder = JavacRemoteProto.Message.Request.newBuilder()-->Line_4 $$ builder.setRequestType(JavacRemoteProto.Message.Request.Type.COMPILE)[ FD ]
Line_3 $$ final JavacRemoteProto.Message.Request.Builder builder = JavacRemoteProto.Message.Request.newBuilder()-->Line_16 $$ builder.addSourcepath(FileUtil.toSystemIndependentName(file.getPath()))[ FD ]
Line_19 $$ final JavacRemoteProto.Message.Request.OutputGroup.Builder groupBuilder = JavacRemoteProto.Message.Request.OutputGroup.newBuilder()-->Line_22 $$ groupBuilder.addSourceRoot(FileUtil.toSystemIndependentName(srcRoot.getPath()))[ FD ]
