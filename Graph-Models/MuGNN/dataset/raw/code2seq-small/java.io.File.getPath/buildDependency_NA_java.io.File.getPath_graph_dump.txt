Line_14 $$ if (moduleVersion == null) -->Line_39 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), moduleVersion.getName(), moduleVersion.getVersion())[ CD ]
Line_4 $$ File binaryPath = dependency.getFile()-->Line_69 $$ attachGradleSdkSources(gradleModule, binaryPath, library, resolverCtx)[ FD ]
Line_46 $$ if (matcher.matches()) -->Line_50 $$ final String artifactId = StringUtil.trimEnd(StringUtil.trimEnd(libraryFileName, moduleVersion.getVersion()), "-")[ CD ]
Line_20 $$ libraryName = ""-->Line_33 $$ libraryName = String.format("%s-%s", libraryName.substring(dependencyNameIndex, i), libraryName.substring(i + 1))[ FD ]
Line_71 $$ File javadocPath = dependency.getJavadoc()-->Line_73 $$ library.addPath(LibraryPathType.DOC, javadocPath.getAbsolutePath())[ FD ]
Line_60 $$ final LibraryData library = new LibraryData(GradleConstants.SYSTEM_ID, libraryName, unresolved)-->Line_69 $$ attachGradleSdkSources(gradleModule, binaryPath, library, resolverCtx)[ FD ]
Line_20 $$ libraryName = ""-->Line_25 $$ int i = libraryName.indexOf(' ')[ FD ]
Line_18 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_48 $$ libraryName += (":" + classifier)[ FD ]
Line_51 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), artifactId, moduleVersion.getVersion())-->Line_58 $$ libraryName += (":" + FileUtilRt.getExtension(binaryPath.getPath()))[ FD ]
Line_45 $$ Matcher matcher = pattern.matcher(libraryFileName)-->Line_47 $$ final String classifier = matcher.group(1)[ FD ]
Line_18 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_51 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), artifactId, moduleVersion.getVersion())[ FD ]
Line_60 $$ final LibraryData library = new LibraryData(GradleConstants.SYSTEM_ID, libraryName, unresolved)-->Line_62 $$ library.addPath(LibraryPathType.BINARY, binaryPath.getAbsolutePath())[ FD ]
Line_17 $$ if (binaryPath.isFile()) -->Line_18 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)[ CD ]
Line_48 $$ libraryName += (":" + classifier)-->Line_58 $$ libraryName += (":" + FileUtilRt.getExtension(binaryPath.getPath()))[ FD ]
Line_14 $$ if (moduleVersion == null) -->Line_38 $$ level = LibraryLevel.PROJECT[ CD ]
Line_41 $$ String libraryFileName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_50 $$ final String artifactId = StringUtil.trimEnd(StringUtil.trimEnd(libraryFileName, moduleVersion.getVersion()), "-")[ FD ]
Line_18 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_27 $$ i = CharArrayUtil.shiftForward(libraryName, i + 1, " ")[ FD ]
Line_22 $$ if (unresolved) -->Line_29 $$ if (i >= 0 && i < libraryName.length()) [ CD ]
Line_20 $$ libraryName = ""-->Line_27 $$ i = CharArrayUtil.shiftForward(libraryName, i + 1, " ")[ FD ]
Line_41 $$ String libraryFileName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_43 $$ if (!mavenLibraryFileName.equals(libraryFileName)) [ FD ]
Line_29 $$ if (i >= 0 && i < libraryName.length()) -->Line_30 $$ int dependencyNameIndex = i[ CD ]
Line_75 $$ if (level == LibraryLevel.PROJECT) -->Line_76 $$ linkProjectLibrary(ideProject, library)[ CD ]
Line_8 $$ String libraryName-->Line_27 $$ i = CharArrayUtil.shiftForward(libraryName, i + 1, " ")[ FD ]
Line_14 $$ if (moduleVersion == null) -->Line_22 $$ if (unresolved) [ CD ]
Line_60 $$ final LibraryData library = new LibraryData(GradleConstants.SYSTEM_ID, libraryName, unresolved)-->Line_73 $$ library.addPath(LibraryPathType.DOC, javadocPath.getAbsolutePath())[ FD ]
Line_39 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), moduleVersion.getName(), moduleVersion.getVersion())-->Line_58 $$ libraryName += (":" + FileUtilRt.getExtension(binaryPath.getPath()))[ FD ]
Line_8 $$ String libraryName-->Line_51 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), artifactId, moduleVersion.getVersion())[ FD ]
Line_8 $$ String libraryName-->Line_48 $$ libraryName += (":" + classifier)[ FD ]
Line_4 $$ File binaryPath = dependency.getFile()-->Line_18 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)[ FD ]
Line_8 $$ String libraryName-->Line_29 $$ if (i >= 0 && i < libraryName.length()) [ FD ]
Line_40 $$ if (binaryPath.isFile()) -->Line_43 $$ if (!mavenLibraryFileName.equals(libraryFileName)) [ CD ]
Line_9 $$ final GradleModuleVersion moduleVersion = dependency.getGradleModuleVersion()-->Line_39 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), moduleVersion.getName(), moduleVersion.getVersion())[ FD ]
Line_22 $$ if (unresolved) -->Line_25 $$ int i = libraryName.indexOf(' ')[ CD ]
Line_14 $$ if (moduleVersion == null) -->Line_17 $$ if (binaryPath.isFile()) [ CD ]
Line_9 $$ final GradleModuleVersion moduleVersion = dependency.getGradleModuleVersion()-->Line_44 $$ Pattern pattern = Pattern.compile(moduleVersion.getName() + "-" + moduleVersion.getVersion() + "-(.*)")[ FD ]
Line_39 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), moduleVersion.getName(), moduleVersion.getVersion())-->Line_48 $$ libraryName += (":" + classifier)[ FD ]
Line_38 $$ level = LibraryLevel.PROJECT-->Line_75 $$ if (level == LibraryLevel.PROJECT) [ FD ]
Line_45 $$ Matcher matcher = pattern.matcher(libraryFileName)-->Line_46 $$ if (matcher.matches()) [ FD ]
Line_32 $$ if (i > 0) -->Line_33 $$ libraryName = String.format("%s-%s", libraryName.substring(dependencyNameIndex, i), libraryName.substring(i + 1))[ CD ]
Line_9 $$ final GradleModuleVersion moduleVersion = dependency.getGradleModuleVersion()-->Line_42 $$ final String mavenLibraryFileName = String.format("%s-%s", moduleVersion.getName(), moduleVersion.getVersion())[ FD ]
Line_41 $$ String libraryFileName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_45 $$ Matcher matcher = pattern.matcher(libraryFileName)[ FD ]
Line_8 $$ String libraryName-->Line_18 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)[ FD ]
Line_20 $$ libraryName = ""-->Line_29 $$ if (i >= 0 && i < libraryName.length()) [ FD ]
Line_68 $$ if (!unresolved && sourcePath == null) -->Line_69 $$ attachGradleSdkSources(gradleModule, binaryPath, library, resolverCtx)[ CD ]
Line_18 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_31 $$ i = libraryName.indexOf(' ', dependencyNameIndex)[ FD ]
Line_25 $$ int i = libraryName.indexOf(' ')-->Line_26 $$ if (i >= 0) [ FD ]
Line_4 $$ File binaryPath = dependency.getFile()-->Line_17 $$ if (binaryPath.isFile()) [ FD ]
Line_29 $$ if (i >= 0 && i < libraryName.length()) -->Line_32 $$ if (i > 0) [ CD ]
Line_60 $$ final LibraryData library = new LibraryData(GradleConstants.SYSTEM_ID, libraryName, unresolved)-->Line_76 $$ linkProjectLibrary(ideProject, library)[ FD ]
Line_46 $$ if (matcher.matches()) -->Line_47 $$ final String classifier = matcher.group(1)[ CD ]
Line_14 $$ if (moduleVersion == null) -->Line_40 $$ if (binaryPath.isFile()) [ CD ]
Line_31 $$ i = libraryName.indexOf(' ', dependencyNameIndex)-->Line_33 $$ libraryName = String.format("%s-%s", libraryName.substring(dependencyNameIndex, i), libraryName.substring(i + 1))[ FD ]
Line_61 $$ if (!unresolved) -->Line_62 $$ library.addPath(LibraryPathType.BINARY, binaryPath.getAbsolutePath())[ CD ]
Line_30 $$ int dependencyNameIndex = i-->Line_31 $$ i = libraryName.indexOf(' ', dependencyNameIndex)[ FD ]
Line_18 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_58 $$ libraryName += (":" + FileUtilRt.getExtension(binaryPath.getPath()))[ FD ]
Line_50 $$ final String artifactId = StringUtil.trimEnd(StringUtil.trimEnd(libraryFileName, moduleVersion.getVersion()), "-")-->Line_51 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), artifactId, moduleVersion.getVersion())[ FD ]
Line_8 $$ String libraryName-->Line_25 $$ int i = libraryName.indexOf(' ')[ FD ]
Line_18 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_25 $$ int i = libraryName.indexOf(' ')[ FD ]
Line_65 $$ if (!unresolved && sourcePath != null) -->Line_66 $$ library.addPath(LibraryPathType.SOURCE, sourcePath.getAbsolutePath())[ CD ]
Line_18 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_29 $$ if (i >= 0 && i < libraryName.length()) [ FD ]
Line_8 $$ String libraryName-->Line_58 $$ libraryName += (":" + FileUtilRt.getExtension(binaryPath.getPath()))[ FD ]
Line_64 $$ File sourcePath = dependency.getSource()-->Line_66 $$ library.addPath(LibraryPathType.SOURCE, sourcePath.getAbsolutePath())[ FD ]
Line_8 $$ String libraryName-->Line_33 $$ libraryName = String.format("%s-%s", libraryName.substring(dependencyNameIndex, i), libraryName.substring(i + 1))[ FD ]
Line_9 $$ final GradleModuleVersion moduleVersion = dependency.getGradleModuleVersion()-->Line_51 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), artifactId, moduleVersion.getVersion())[ FD ]
Line_72 $$ if (!unresolved && javadocPath != null) -->Line_73 $$ library.addPath(LibraryPathType.DOC, javadocPath.getAbsolutePath())[ CD ]
Line_10 $$ final LibraryLevel level-->Line_75 $$ if (level == LibraryLevel.PROJECT) [ FD ]
Line_8 $$ String libraryName-->Line_20 $$ libraryName = ""[ FD ]
Line_4 $$ File binaryPath = dependency.getFile()-->Line_5 $$ if (binaryPath == null) [ FD ]
Line_30 $$ int dependencyNameIndex = i-->Line_33 $$ libraryName = String.format("%s-%s", libraryName.substring(dependencyNameIndex, i), libraryName.substring(i + 1))[ FD ]
Line_25 $$ int i = libraryName.indexOf(' ')-->Line_33 $$ libraryName = String.format("%s-%s", libraryName.substring(dependencyNameIndex, i), libraryName.substring(i + 1))[ FD ]
Line_9 $$ final GradleModuleVersion moduleVersion = dependency.getGradleModuleVersion()-->Line_50 $$ final String artifactId = StringUtil.trimEnd(StringUtil.trimEnd(libraryFileName, moduleVersion.getVersion()), "-")[ FD ]
Line_43 $$ if (!mavenLibraryFileName.equals(libraryFileName)) -->Line_45 $$ Matcher matcher = pattern.matcher(libraryFileName)[ CD ]
Line_8 $$ String libraryName-->Line_31 $$ i = libraryName.indexOf(' ', dependencyNameIndex)[ FD ]
Line_20 $$ libraryName = ""-->Line_48 $$ libraryName += (":" + classifier)[ FD ]
Line_44 $$ Pattern pattern = Pattern.compile(moduleVersion.getName() + "-" + moduleVersion.getVersion() + "-(.*)")-->Line_45 $$ Matcher matcher = pattern.matcher(libraryFileName)[ FD ]
Line_18 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_33 $$ libraryName = String.format("%s-%s", libraryName.substring(dependencyNameIndex, i), libraryName.substring(i + 1))[ FD ]
Line_17 $$ if (binaryPath.isFile()) -->Line_20 $$ libraryName = ""[ CD ]
Line_40 $$ if (binaryPath.isFile()) -->Line_41 $$ String libraryFileName = FileUtil.getNameWithoutExtension(binaryPath)[ CD ]
Line_4 $$ File binaryPath = dependency.getFile()-->Line_41 $$ String libraryFileName = FileUtil.getNameWithoutExtension(binaryPath)[ FD ]
Line_26 $$ if (i >= 0) -->Line_27 $$ i = CharArrayUtil.shiftForward(libraryName, i + 1, " ")[ CD ]
Line_25 $$ int i = libraryName.indexOf(' ')-->Line_27 $$ i = CharArrayUtil.shiftForward(libraryName, i + 1, " ")[ FD ]
Line_18 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_39 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), moduleVersion.getName(), moduleVersion.getVersion())[ FD ]
Line_43 $$ if (!mavenLibraryFileName.equals(libraryFileName)) -->Line_44 $$ Pattern pattern = Pattern.compile(moduleVersion.getName() + "-" + moduleVersion.getVersion() + "-(.*)")[ CD ]
Line_39 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), moduleVersion.getName(), moduleVersion.getVersion())-->Line_51 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), artifactId, moduleVersion.getVersion())[ FD ]
Line_25 $$ int i = libraryName.indexOf(' ')-->Line_31 $$ i = libraryName.indexOf(' ', dependencyNameIndex)[ FD ]
Line_4 $$ File binaryPath = dependency.getFile()-->Line_40 $$ if (binaryPath.isFile()) [ FD ]
Line_42 $$ final String mavenLibraryFileName = String.format("%s-%s", moduleVersion.getName(), moduleVersion.getVersion())-->Line_43 $$ if (!mavenLibraryFileName.equals(libraryFileName)) [ FD ]
Line_33 $$ libraryName = String.format("%s-%s", libraryName.substring(dependencyNameIndex, i), libraryName.substring(i + 1))-->Line_58 $$ libraryName += (":" + FileUtilRt.getExtension(binaryPath.getPath()))[ FD ]
Line_18 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_20 $$ libraryName = ""[ FD ]
Line_27 $$ i = CharArrayUtil.shiftForward(libraryName, i + 1, " ")-->Line_33 $$ libraryName = String.format("%s-%s", libraryName.substring(dependencyNameIndex, i), libraryName.substring(i + 1))[ FD ]
Line_43 $$ if (!mavenLibraryFileName.equals(libraryFileName)) -->Line_46 $$ if (matcher.matches()) [ CD ]
Line_20 $$ libraryName = ""-->Line_39 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), moduleVersion.getName(), moduleVersion.getVersion())[ FD ]
Line_29 $$ if (i >= 0 && i < libraryName.length()) -->Line_31 $$ i = libraryName.indexOf(' ', dependencyNameIndex)[ CD ]
Line_22 $$ if (unresolved) -->Line_26 $$ if (i >= 0) [ CD ]
Line_20 $$ libraryName = ""-->Line_31 $$ i = libraryName.indexOf(' ', dependencyNameIndex)[ FD ]
Line_40 $$ if (binaryPath.isFile()) -->Line_42 $$ final String mavenLibraryFileName = String.format("%s-%s", moduleVersion.getName(), moduleVersion.getVersion())[ CD ]
Line_33 $$ libraryName = String.format("%s-%s", libraryName.substring(dependencyNameIndex, i), libraryName.substring(i + 1))-->Line_39 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), moduleVersion.getName(), moduleVersion.getVersion())[ FD ]
Line_46 $$ if (matcher.matches()) -->Line_51 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), artifactId, moduleVersion.getVersion())[ CD ]
Line_48 $$ libraryName += (":" + classifier)-->Line_51 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), artifactId, moduleVersion.getVersion())[ FD ]
Line_25 $$ int i = libraryName.indexOf(' ')-->Line_32 $$ if (i > 0) [ FD ]
Line_46 $$ if (matcher.matches()) -->Line_48 $$ libraryName += (":" + classifier)[ CD ]
Line_33 $$ libraryName = String.format("%s-%s", libraryName.substring(dependencyNameIndex, i), libraryName.substring(i + 1))-->Line_51 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), artifactId, moduleVersion.getVersion())[ FD ]
Line_33 $$ libraryName = String.format("%s-%s", libraryName.substring(dependencyNameIndex, i), libraryName.substring(i + 1))-->Line_48 $$ libraryName += (":" + classifier)[ FD ]
Line_20 $$ libraryName = ""-->Line_51 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), artifactId, moduleVersion.getVersion())[ FD ]
Line_31 $$ i = libraryName.indexOf(' ', dependencyNameIndex)-->Line_32 $$ if (i > 0) [ FD ]
Line_27 $$ i = CharArrayUtil.shiftForward(libraryName, i + 1, " ")-->Line_32 $$ if (i > 0) [ FD ]
Line_9 $$ final GradleModuleVersion moduleVersion = dependency.getGradleModuleVersion()-->Line_14 $$ if (moduleVersion == null) [ FD ]
Line_10 $$ final LibraryLevel level-->Line_38 $$ level = LibraryLevel.PROJECT[ FD ]
Line_20 $$ libraryName = ""-->Line_58 $$ libraryName += (":" + FileUtilRt.getExtension(binaryPath.getPath()))[ FD ]
Line_8 $$ String libraryName-->Line_39 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), moduleVersion.getName(), moduleVersion.getVersion())[ FD ]
Line_60 $$ final LibraryData library = new LibraryData(GradleConstants.SYSTEM_ID, libraryName, unresolved)-->Line_66 $$ library.addPath(LibraryPathType.SOURCE, sourcePath.getAbsolutePath())[ FD ]
Line_4 $$ File binaryPath = dependency.getFile()-->Line_62 $$ library.addPath(LibraryPathType.BINARY, binaryPath.getAbsolutePath())[ FD ]
Line_4 $$ File binaryPath = dependency.getFile()-->Line_58 $$ libraryName += (":" + FileUtilRt.getExtension(binaryPath.getPath()))[ FD ]
Line_27 $$ i = CharArrayUtil.shiftForward(libraryName, i + 1, " ")-->Line_31 $$ i = libraryName.indexOf(' ', dependencyNameIndex)[ FD ]
