Line_9 $$ RandomAccessFile raf-->Line_11 $$ raf = new RandomAccessFile(file, "r")[ FD ]
Line_7 $$ boolean keepAlive = addKeepAliveIfNeed(response, request)-->Line_34 $$ if (!keepAlive) [ FD ]
Line_2 $$ public static void sendFile(@NotNull HttpRequest request, @NotNull Channel channel, @NotNull File file) throws IOException -->Line_20 $$ if (request.method() != HttpMethod.HEAD) [ FD ]
Line_9 $$ RandomAccessFile raf-->Line_17 $$ long fileLength = raf.length()[ FD ]
Line_4 $$ if (response == null) -->Line_5 $$ return[ CD ]
Line_2 $$ public static void sendFile(@NotNull HttpRequest request, @NotNull Channel channel, @NotNull File file) throws IOException -->Line_7 $$ boolean keepAlive = addKeepAliveIfNeed(response, request)[ FD ]
Line_11 $$ raf = new RandomAccessFile(file, "r")-->Line_22 $$ channel.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength))[ FD ]
Line_21 $$ if (channel.pipeline().get(SslHandler.class) == null) -->Line_24 $$ channel.write(new ChunkedFile(raf))[ CD ]
Line_3 $$ HttpResponse response = prepareSend(request, channel, file.lastModified(), file.getPath())-->Line_19 $$ channel.write(response)[ FD ]
Line_2 $$ public static void sendFile(@NotNull HttpRequest request, @NotNull Channel channel, @NotNull File file) throws IOException -->Line_3 $$ HttpResponse response = prepareSend(request, channel, file.lastModified(), file.getPath())[ FD ]
Line_2 $$ public static void sendFile(@NotNull HttpRequest request, @NotNull Channel channel, @NotNull File file) throws IOException -->Line_3 $$ HttpResponse response = prepareSend(request, channel, file.lastModified(), file.getPath())[ CD ]
Line_8 $$ boolean fileWillBeClosed = false-->Line_29 $$ if (!fileWillBeClosed) [ FD ]
Line_2 $$ public static void sendFile(@NotNull HttpRequest request, @NotNull Channel channel, @NotNull File file) throws IOException -->Line_21 $$ if (channel.pipeline().get(SslHandler.class) == null) [ FD ]
Line_27 $$ fileWillBeClosed = true-->Line_29 $$ if (!fileWillBeClosed) [ FD ]
Line_9 $$ RandomAccessFile raf-->Line_30 $$ raf.close()[ FD ]
Line_11 $$ raf = new RandomAccessFile(file, "r")-->Line_30 $$ raf.close()[ FD ]
Line_29 $$ if (!fileWillBeClosed) -->Line_30 $$ raf.close()[ CD ]
Line_21 $$ if (channel.pipeline().get(SslHandler.class) == null) -->Line_22 $$ channel.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength))[ CD ]
Line_2 $$ public static void sendFile(@NotNull HttpRequest request, @NotNull Channel channel, @NotNull File file) throws IOException -->Line_22 $$ channel.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength))[ FD ]
Line_2 $$ public static void sendFile(@NotNull HttpRequest request, @NotNull Channel channel, @NotNull File file) throws IOException -->Line_7 $$ boolean keepAlive = addKeepAliveIfNeed(response, request)[ CD ]
Line_3 $$ HttpResponse response = prepareSend(request, channel, file.lastModified(), file.getPath())-->Line_18 $$ HttpUtil.setContentLength(response, fileLength)[ FD ]
Line_2 $$ public static void sendFile(@NotNull HttpRequest request, @NotNull Channel channel, @NotNull File file) throws IOException -->Line_8 $$ boolean fileWillBeClosed = false[ CD ]
Line_34 $$ if (!keepAlive) -->Line_35 $$ future.addListener(ChannelFutureListener.CLOSE)[ CD ]
Line_8 $$ boolean fileWillBeClosed = false-->Line_27 $$ fileWillBeClosed = true[ FD ]
Line_17 $$ long fileLength = raf.length()-->Line_18 $$ HttpUtil.setContentLength(response, fileLength)[ FD ]
Line_2 $$ public static void sendFile(@NotNull HttpRequest request, @NotNull Channel channel, @NotNull File file) throws IOException -->Line_33 $$ ChannelFuture future = channel.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT)[ CD ]
Line_20 $$ if (request.method() != HttpMethod.HEAD) -->Line_21 $$ if (channel.pipeline().get(SslHandler.class) == null) [ CD ]
Line_2 $$ public static void sendFile(@NotNull HttpRequest request, @NotNull Channel channel, @NotNull File file) throws IOException -->Line_13 $$ send(response(HttpResponseStatus.NOT_FOUND), channel, request)[ FD ]
Line_3 $$ HttpResponse response = prepareSend(request, channel, file.lastModified(), file.getPath())-->Line_4 $$ if (response == null) [ FD ]
Line_2 $$ public static void sendFile(@NotNull HttpRequest request, @NotNull Channel channel, @NotNull File file) throws IOException -->Line_34 $$ if (!keepAlive) [ CD ]
Line_2 $$ public static void sendFile(@NotNull HttpRequest request, @NotNull Channel channel, @NotNull File file) throws IOException -->Line_24 $$ channel.write(new ChunkedFile(raf))[ FD ]
Line_2 $$ public static void sendFile(@NotNull HttpRequest request, @NotNull Channel channel, @NotNull File file) throws IOException -->Line_4 $$ if (response == null) [ CD ]
Line_2 $$ public static void sendFile(@NotNull HttpRequest request, @NotNull Channel channel, @NotNull File file) throws IOException -->Line_9 $$ RandomAccessFile raf[ CD ]
Line_2 $$ public static void sendFile(@NotNull HttpRequest request, @NotNull Channel channel, @NotNull File file) throws IOException -->Line_19 $$ channel.write(response)[ FD ]
Line_3 $$ HttpResponse response = prepareSend(request, channel, file.lastModified(), file.getPath())-->Line_7 $$ boolean keepAlive = addKeepAliveIfNeed(response, request)[ FD ]
Line_9 $$ RandomAccessFile raf-->Line_22 $$ channel.write(new DefaultFileRegion(raf.getChannel(), 0, fileLength))[ FD ]
Line_11 $$ raf = new RandomAccessFile(file, "r")-->Line_17 $$ long fileLength = raf.length()[ FD ]
Line_2 $$ public static void sendFile(@NotNull HttpRequest request, @NotNull Channel channel, @NotNull File file) throws IOException -->Line_33 $$ ChannelFuture future = channel.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT)[ FD ]
Line_33 $$ ChannelFuture future = channel.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT)-->Line_35 $$ future.addListener(ChannelFutureListener.CLOSE)[ FD ]
