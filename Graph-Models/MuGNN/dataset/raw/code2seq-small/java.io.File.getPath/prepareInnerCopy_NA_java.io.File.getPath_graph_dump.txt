Line_2 $$ protected void prepareInnerCopy(final boolean anotherRepository) throws Exception -->Line_28 $$ clManager.forceGoInTestMode()[ CD ]
Line_5 $$ if (anotherRepository) -->Line_9 $$ externalURL = myRepoUrl + "/root/target"[ CD ]
Line_2 $$ protected void prepareInnerCopy(final boolean anotherRepository) throws Exception -->Line_13 $$ checkin()[ CD ]
Line_2 $$ protected void prepareInnerCopy(final boolean anotherRepository) throws Exception -->Line_25 $$ runInAndVerifyIgnoreOutput("co", externalURL, innerDir.getPath())[ CD ]
Line_2 $$ protected void prepareInnerCopy(final boolean anotherRepository) throws Exception -->Line_3 $$ final String mainUrl = myRepoUrl + "/root/source"[ CD ]
Line_2 $$ protected void prepareInnerCopy(final boolean anotherRepository) throws Exception -->Line_18 $$ FileUtil.delete(new File(myWorkingCopyDir.getPath() + File.separator + ".svn"))[ CD ]
Line_11 $$ final ChangeListManagerImpl clManager = (ChangeListManagerImpl) ChangeListManager.getInstance(myProject)-->Line_28 $$ clManager.forceGoInTestMode()[ FD ]
Line_2 $$ protected void prepareInnerCopy(final boolean anotherRepository) throws Exception -->Line_4 $$ final String externalURL[ CD ]
Line_2 $$ protected void prepareInnerCopy(final boolean anotherRepository) throws Exception -->Line_19 $$ assertTrue(!rootFile.exists())[ CD ]
Line_2 $$ protected void prepareInnerCopy(final boolean anotherRepository) throws Exception -->Line_12 $$ final SubTree subTree = new SubTree(myWorkingCopyDir)[ CD ]
Line_2 $$ protected void prepareInnerCopy(final boolean anotherRepository) throws Exception -->Line_20 $$ sleep(200)[ CD ]
Line_2 $$ protected void prepareInnerCopy(final boolean anotherRepository) throws Exception -->Line_16 $$ final File rootFile = new File(subTree.myRootDir.getPath())[ CD ]
Line_11 $$ final ChangeListManagerImpl clManager = (ChangeListManagerImpl) ChangeListManager.getInstance(myProject)-->Line_14 $$ clManager.stopEveryThingIfInTestMode()[ FD ]
Line_2 $$ protected void prepareInnerCopy(final boolean anotherRepository) throws Exception -->Line_21 $$ myWorkingCopyDir.refresh(false, true)[ CD ]
Line_2 $$ protected void prepareInnerCopy(final boolean anotherRepository) throws Exception -->Line_5 $$ if (anotherRepository) [ CD ]
Line_24 $$ final File innerDir = new File(sourceDir, "inner1/inner2/inner")-->Line_25 $$ runInAndVerifyIgnoreOutput("co", externalURL, innerDir.getPath())[ FD ]
Line_2 $$ protected void prepareInnerCopy(final boolean anotherRepository) throws Exception -->Line_24 $$ final File innerDir = new File(sourceDir, "inner1/inner2/inner")[ CD ]
Line_5 $$ if (anotherRepository) -->Line_6 $$ createAnotherRepo()[ CD ]
Line_2 $$ protected void prepareInnerCopy(final boolean anotherRepository) throws Exception -->Line_15 $$ sleep(100)[ CD ]
Line_4 $$ final String externalURL-->Line_25 $$ runInAndVerifyIgnoreOutput("co", externalURL, innerDir.getPath())[ FD ]
Line_2 $$ protected void prepareInnerCopy(final boolean anotherRepository) throws Exception -->Line_23 $$ final File sourceDir = new File(myWorkingCopyDir.getPath(), "source")[ CD ]
Line_16 $$ final File rootFile = new File(subTree.myRootDir.getPath())-->Line_19 $$ assertTrue(!rootFile.exists())[ FD ]
Line_2 $$ protected void prepareInnerCopy(final boolean anotherRepository) throws Exception -->Line_26 $$ sleep(100)[ CD ]
Line_16 $$ final File rootFile = new File(subTree.myRootDir.getPath())-->Line_17 $$ FileUtil.delete(rootFile)[ FD ]
Line_2 $$ protected void prepareInnerCopy(final boolean anotherRepository) throws Exception -->Line_29 $$ refreshSvnMappingsSynchronously()[ CD ]
Line_5 $$ if (anotherRepository) -->Line_7 $$ externalURL = myAnotherRepoUrl + "/root/target"[ CD ]
Line_7 $$ externalURL = myAnotherRepoUrl + "/root/target"-->Line_25 $$ runInAndVerifyIgnoreOutput("co", externalURL, innerDir.getPath())[ FD ]
Line_3 $$ final String mainUrl = myRepoUrl + "/root/source"-->Line_22 $$ runInAndVerifyIgnoreOutput("co", mainUrl)[ FD ]
Line_2 $$ protected void prepareInnerCopy(final boolean anotherRepository) throws Exception -->Line_27 $$ myWorkingCopyDir.refresh(false, true)[ CD ]
Line_2 $$ protected void prepareInnerCopy(final boolean anotherRepository) throws Exception -->Line_22 $$ runInAndVerifyIgnoreOutput("co", mainUrl)[ CD ]
Line_4 $$ final String externalURL-->Line_9 $$ externalURL = myRepoUrl + "/root/target"[ FD ]
Line_2 $$ protected void prepareInnerCopy(final boolean anotherRepository) throws Exception -->Line_17 $$ FileUtil.delete(rootFile)[ CD ]
Line_7 $$ externalURL = myAnotherRepoUrl + "/root/target"-->Line_9 $$ externalURL = myRepoUrl + "/root/target"[ FD ]
Line_2 $$ protected void prepareInnerCopy(final boolean anotherRepository) throws Exception -->Line_11 $$ final ChangeListManagerImpl clManager = (ChangeListManagerImpl) ChangeListManager.getInstance(myProject)[ CD ]
Line_2 $$ protected void prepareInnerCopy(final boolean anotherRepository) throws Exception -->Line_14 $$ clManager.stopEveryThingIfInTestMode()[ CD ]
Line_4 $$ final String externalURL-->Line_7 $$ externalURL = myAnotherRepoUrl + "/root/target"[ FD ]
Line_9 $$ externalURL = myRepoUrl + "/root/target"-->Line_25 $$ runInAndVerifyIgnoreOutput("co", externalURL, innerDir.getPath())[ FD ]
