Line_2 $$ static JdkBundle createBundle(@NotNull File jvm, @NotNull String homeSubPath, boolean boot, boolean bundled) -->Line_13 $$ return new JdkBundle(jvm, nameVersionAndUpdate.first, nameVersionAndUpdate.second, boot, bundled)[ CD ]
Line_2 $$ static JdkBundle createBundle(@NotNull File jvm, @NotNull String homeSubPath, boolean boot, boolean bundled) -->Line_10 $$ Pair<String, Pair<Version, Integer>> nameVersionAndUpdate = getJDKNameVersionAndUpdate(absJvmLocation, homeSubPath)[ FD ]
Line_2 $$ static JdkBundle createBundle(@NotNull File jvm, @NotNull String homeSubPath, boolean boot, boolean bundled) -->Line_7 $$ if (!SystemInfo.isMac && !hasToolsJar)[ CD ]
Line_6 $$ boolean hasToolsJar = new File(javaHome, "lib" + File.separator + "tools.jar").exists()-->Line_7 $$ if (!SystemInfo.isMac && !hasToolsJar)[ FD ]
Line_2 $$ static JdkBundle createBundle(@NotNull File jvm, @NotNull String homeSubPath, boolean boot, boolean bundled) -->Line_4 $$ if (bundled)[ CD ]
Line_2 $$ static JdkBundle createBundle(@NotNull File jvm, @NotNull String homeSubPath, boolean boot, boolean bundled) -->Line_6 $$ boolean hasToolsJar = new File(javaHome, "lib" + File.separator + "tools.jar").exists()[ CD ]
Line_6 $$ boolean hasToolsJar = new File(javaHome, "lib" + File.separator + "tools.jar").exists()-->Line_11 $$ if (SystemInfo.isMac && nameVersionAndUpdate.second != null && nameVersionAndUpdate.second.first.isOrGreaterThan(1, 7) && !hasToolsJar)[ FD ]
Line_2 $$ static JdkBundle createBundle(@NotNull File jvm, @NotNull String homeSubPath, boolean boot, boolean bundled) -->Line_10 $$ Pair<String, Pair<Version, Integer>> nameVersionAndUpdate = getJDKNameVersionAndUpdate(absJvmLocation, homeSubPath)[ CD ]
Line_2 $$ static JdkBundle createBundle(@NotNull File jvm, @NotNull String homeSubPath, boolean boot, boolean bundled) -->Line_3 $$ File javaHome = SystemInfo.isMac ? new File(jvm, homeSubPath) : jvm[ CD ]
Line_2 $$ static JdkBundle createBundle(@NotNull File jvm, @NotNull String homeSubPath, boolean boot, boolean bundled) -->Line_9 $$ File absJvmLocation = bundled ? new File(PathManager.getHomePath(), jvm.getPath()) : jvm[ CD ]
Line_2 $$ static JdkBundle createBundle(@NotNull File jvm, @NotNull String homeSubPath, boolean boot, boolean bundled) -->Line_11 $$ if (SystemInfo.isMac && nameVersionAndUpdate.second != null && nameVersionAndUpdate.second.first.isOrGreaterThan(1, 7) && !hasToolsJar)[ CD ]
Line_3 $$ File javaHome = SystemInfo.isMac ? new File(jvm, homeSubPath) : jvm-->Line_5 $$ javaHome = new File(PathManager.getHomePath(), javaHome.getPath())[ FD ]
Line_9 $$ File absJvmLocation = bundled ? new File(PathManager.getHomePath(), jvm.getPath()) : jvm-->Line_10 $$ Pair<String, Pair<Version, Integer>> nameVersionAndUpdate = getJDKNameVersionAndUpdate(absJvmLocation, homeSubPath)[ FD ]
Line_7 $$ if (!SystemInfo.isMac && !hasToolsJar)-->Line_8 $$ return null[ CD ]
Line_4 $$ if (bundled)-->Line_5 $$ javaHome = new File(PathManager.getHomePath(), javaHome.getPath())[ CD ]
Line_11 $$ if (SystemInfo.isMac && nameVersionAndUpdate.second != null && nameVersionAndUpdate.second.first.isOrGreaterThan(1, 7) && !hasToolsJar)-->Line_12 $$ return null[ CD ]
Line_2 $$ static JdkBundle createBundle(@NotNull File jvm, @NotNull String homeSubPath, boolean boot, boolean bundled) -->Line_9 $$ File absJvmLocation = bundled ? new File(PathManager.getHomePath(), jvm.getPath()) : jvm[ FD ]
