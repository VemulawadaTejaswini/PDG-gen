Line_2 $$ public void testUseCanonicalPathLock() throws Exception -->Line_6 $$ SocketLock lock1 = new SocketLock(path1 + "/c", path1 + "/s")[ CD ]
Line_2 $$ public void testUseCanonicalPathLock() throws Exception -->Line_4 $$ String path1 = myTempDir.getPath()[ CD ]
Line_6 $$ SocketLock lock1 = new SocketLock(path1 + "/c", path1 + "/s")-->Line_9 $$ lock1.lock()[ FD ]
Line_2 $$ public void testUseCanonicalPathLock() throws Exception -->Line_3 $$ assumeThat(SystemInfo.isFileSystemCaseSensitive, is(false))[ CD ]
Line_7 $$ SocketLock lock2 = new SocketLock(path2 + "/c", path2 + "/s")-->Line_10 $$ assertThat(lock2.lock(), equalTo(SocketLock.ActivateStatus.ACTIVATED))[ FD ]
Line_6 $$ SocketLock lock1 = new SocketLock(path1 + "/c", path1 + "/s")-->Line_12 $$ lock1.dispose()[ FD ]
Line_2 $$ public void testUseCanonicalPathLock() throws Exception -->Line_7 $$ SocketLock lock2 = new SocketLock(path2 + "/c", path2 + "/s")[ CD ]
Line_4 $$ String path1 = myTempDir.getPath()-->Line_5 $$ String path2 = path1.toUpperCase(Locale.ENGLISH)[ FD ]
Line_7 $$ SocketLock lock2 = new SocketLock(path2 + "/c", path2 + "/s")-->Line_13 $$ lock2.dispose()[ FD ]
Line_2 $$ public void testUseCanonicalPathLock() throws Exception -->Line_5 $$ String path2 = path1.toUpperCase(Locale.ENGLISH)[ CD ]
