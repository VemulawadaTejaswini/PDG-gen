Line_20 $$ if (annotation == null) -->Line_25 $$ final int idx = trimmedRoot.indexOf(lastPathComponent)[ CD ]
Line_20 $$ if (annotation == null) -->Line_27 $$ testDir = new File(testDataPath)[ CD ]
Line_30 $$ final File[] files = testDir.listFiles()-->Line_31 $$ if (files == null) [ FD ]
Line_27 $$ testDir = new File(testDataPath)-->Line_32 $$ fail("Test files not found in " + testDir.getPath())[ FD ]
Line_19 $$ final TestDataPath annotation = klass.getAnnotation(TestDataPath.class)-->Line_20 $$ if (annotation == null) [ FD ]
Line_34 $$ final List<Object[]> result = new ArrayList<Object[]>()-->Line_38 $$ result.add(new Object[] [ FD ]
Line_15 $$ File testDir = null-->Line_30 $$ final File[] files = testDir.listFiles()[ FD ]
Line_15 $$ File testDir = null-->Line_32 $$ fail("Test files not found in " + testDir.getPath())[ FD ]
Line_24 $$ final String lastPathComponent = new File(testDataPath).getName()-->Line_26 $$ testDataPath = testDataPath.replace(File.separatorChar, '/') + (idx > 0 ? trimmedRoot.substring(idx + lastPathComponent.length()) : trimmedRoot)[ FD ]
Line_5 $$ if (!(testCase instanceof FileBasedTestCaseHelper)) -->Line_6 $$ fail("Parameterized test should implement FileBasedTestCaseHelper")[ CD ]
Line_35 $$ for (File file : files) -->Line_36 $$ final String fileSuffix = fileBasedTestCase.getFileSuffix(file.getName())[ FD ]
Line_37 $$ if (fileSuffix != null) -->Line_38 $$ result.add(new Object[] [ CD ]
Line_17 $$ testDir = new File(testDataPath, ((FileBasedTestCaseHelperEx) fileBasedTestCase).getRelativeBasePath())-->Line_30 $$ final File[] files = testDir.listFiles()[ FD ]
Line_23 $$ final String trimmedRoot = StringUtil.trimStart(StringUtil.trimStart(annotation.value(), "$CONTENT_ROOT"), "$PROJECT_ROOT")-->Line_26 $$ testDataPath = testDataPath.replace(File.separatorChar, '/') + (idx > 0 ? trimmedRoot.substring(idx + lastPathComponent.length()) : trimmedRoot)[ FD ]
Line_13 $$ final FileBasedTestCaseHelper fileBasedTestCase = (FileBasedTestCaseHelper) testCase-->Line_36 $$ final String fileSuffix = fileBasedTestCase.getFileSuffix(file.getName())[ FD ]
Line_20 $$ if (annotation == null) -->Line_26 $$ testDataPath = testDataPath.replace(File.separatorChar, '/') + (idx > 0 ? trimmedRoot.substring(idx + lastPathComponent.length()) : trimmedRoot)[ CD ]
Line_4 $$ final LightPlatformCodeInsightTestCase testCase = (LightPlatformCodeInsightTestCase) klass.newInstance()-->Line_14 $$ String testDataPath = testCase.getTestDataPath()[ FD ]
Line_36 $$ final String fileSuffix = fileBasedTestCase.getFileSuffix(file.getName())-->Line_37 $$ if (fileSuffix != null) [ FD ]
Line_20 $$ if (annotation == null) -->Line_23 $$ final String trimmedRoot = StringUtil.trimStart(StringUtil.trimStart(annotation.value(), "$CONTENT_ROOT"), "$PROJECT_ROOT")[ CD ]
Line_20 $$ if (annotation == null) -->Line_21 $$ fail("TestCase should implement com.intellij.testFramework.FileBasedTestCaseHelperEx or be annotated with com.intellij.testFramework.TestDataPath")[ CD ]
Line_15 $$ File testDir = null-->Line_27 $$ testDir = new File(testDataPath)[ FD ]
Line_17 $$ testDir = new File(testDataPath, ((FileBasedTestCaseHelperEx) fileBasedTestCase).getRelativeBasePath())-->Line_32 $$ fail("Test files not found in " + testDir.getPath())[ FD ]
Line_16 $$ if (fileBasedTestCase instanceof FileBasedTestCaseHelperEx) -->Line_19 $$ final TestDataPath annotation = klass.getAnnotation(TestDataPath.class)[ CD ]
Line_17 $$ testDir = new File(testDataPath, ((FileBasedTestCaseHelperEx) fileBasedTestCase).getRelativeBasePath())-->Line_27 $$ testDir = new File(testDataPath)[ FD ]
Line_24 $$ final String lastPathComponent = new File(testDataPath).getName()-->Line_25 $$ final int idx = trimmedRoot.indexOf(lastPathComponent)[ FD ]
Line_31 $$ if (files == null) -->Line_32 $$ fail("Test files not found in " + testDir.getPath())[ CD ]
Line_20 $$ if (annotation == null) -->Line_24 $$ final String lastPathComponent = new File(testDataPath).getName()[ CD ]
Line_14 $$ String testDataPath = testCase.getTestDataPath()-->Line_26 $$ testDataPath = testDataPath.replace(File.separatorChar, '/') + (idx > 0 ? trimmedRoot.substring(idx + lastPathComponent.length()) : trimmedRoot)[ FD ]
Line_16 $$ if (fileBasedTestCase instanceof FileBasedTestCaseHelperEx) -->Line_20 $$ if (annotation == null) [ CD ]
Line_15 $$ File testDir = null-->Line_17 $$ testDir = new File(testDataPath, ((FileBasedTestCaseHelperEx) fileBasedTestCase).getRelativeBasePath())[ FD ]
Line_16 $$ if (fileBasedTestCase instanceof FileBasedTestCaseHelperEx) -->Line_17 $$ testDir = new File(testDataPath, ((FileBasedTestCaseHelperEx) fileBasedTestCase).getRelativeBasePath())[ CD ]
Line_13 $$ final FileBasedTestCaseHelper fileBasedTestCase = (FileBasedTestCaseHelper) testCase-->Line_16 $$ if (fileBasedTestCase instanceof FileBasedTestCaseHelperEx) [ FD ]
Line_19 $$ final TestDataPath annotation = klass.getAnnotation(TestDataPath.class)-->Line_23 $$ final String trimmedRoot = StringUtil.trimStart(StringUtil.trimStart(annotation.value(), "$CONTENT_ROOT"), "$PROJECT_ROOT")[ FD ]
Line_23 $$ final String trimmedRoot = StringUtil.trimStart(StringUtil.trimStart(annotation.value(), "$CONTENT_ROOT"), "$PROJECT_ROOT")-->Line_25 $$ final int idx = trimmedRoot.indexOf(lastPathComponent)[ FD ]
Line_27 $$ testDir = new File(testDataPath)-->Line_30 $$ final File[] files = testDir.listFiles()[ FD ]
