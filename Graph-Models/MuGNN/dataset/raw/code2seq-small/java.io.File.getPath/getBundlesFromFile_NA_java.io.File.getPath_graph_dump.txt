Line_8 $$ File actualFile = isBundled ? new File(PathManager.getHomePath(), storedFile.getPath()) : storedFile-->Line_9 $$ if (actualFile.exists()) [ FD ]
Line_6 $$ File storedFile = new File(line)-->Line_8 $$ File actualFile = isBundled ? new File(PathManager.getHomePath(), storedFile.getPath()) : storedFile[ FD ]
Line_6 $$ File storedFile = new File(line)-->Line_7 $$ final boolean isBundled = !storedFile.isAbsolute()[ FD ]
Line_9 $$ if (actualFile.exists()) -->Line_10 $$ list.add(JdkBundle.createBundle(storedFile, false, isBundled))[ CD ]
Line_2 $$ private static List<JdkBundle> getBundlesFromFile(@NotNull File fileWithBundles) -->Line_18 $$ return list[ CD ]
Line_7 $$ final boolean isBundled = !storedFile.isAbsolute()-->Line_10 $$ list.add(JdkBundle.createBundle(storedFile, false, isBundled))[ FD ]
Line_3 $$ List<JdkBundle> list = new ArrayList<JdkBundle>()-->Line_10 $$ list.add(JdkBundle.createBundle(storedFile, false, isBundled))[ FD ]
Line_2 $$ private static List<JdkBundle> getBundlesFromFile(@NotNull File fileWithBundles) -->Line_5 $$ for (String line : FileUtil.loadLines(fileWithBundles, "UTF-8")) [ FD ]
Line_6 $$ File storedFile = new File(line)-->Line_10 $$ list.add(JdkBundle.createBundle(storedFile, false, isBundled))[ FD ]
Line_2 $$ private static List<JdkBundle> getBundlesFromFile(@NotNull File fileWithBundles) -->Line_3 $$ List<JdkBundle> list = new ArrayList<JdkBundle>()[ CD ]
