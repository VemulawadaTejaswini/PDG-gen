Line_4 $$ final File target = FileUtil.createTempFile(myTempDirectory, "test.", ".txt")-->Line_10 $$ FileUtil.writeToFile(target, myTestData)[ FD ]
Line_2 $$ public void hardLink() throws Exception -->Line_9 $$ assertTimestampsEqual(target.lastModified(), attributes.lastModified)[ CD ]
Line_4 $$ final File target = FileUtil.createTempFile(myTempDirectory, "test.", ".txt")-->Line_12 $$ assertTrue(target.length() > 0)[ FD ]
Line_4 $$ final File target = FileUtil.createTempFile(myTempDirectory, "test.", ".txt")-->Line_5 $$ final File link = IoTestUtil.createHardLink(target.getPath(), myTempDirectory.getPath() + "/link")[ FD ]
Line_2 $$ public void hardLink() throws Exception -->Line_10 $$ FileUtil.writeToFile(target, myTestData)[ CD ]
Line_18 $$ final String resolved = FileSystemUtil.resolveSymLink(link)-->Line_19 $$ assertEquals(link.getPath(), resolved)[ FD ]
Line_2 $$ public void hardLink() throws Exception -->Line_17 $$ assertTimestampsEqual(target.lastModified(), attributes.lastModified)[ CD ]
Line_2 $$ public void hardLink() throws Exception -->Line_16 $$ assertEquals(target.length(), attributes.length)[ CD ]
Line_4 $$ final File target = FileUtil.createTempFile(myTempDirectory, "test.", ".txt")-->Line_9 $$ assertTimestampsEqual(target.lastModified(), attributes.lastModified)[ FD ]
Line_4 $$ final File target = FileUtil.createTempFile(myTempDirectory, "test.", ".txt")-->Line_17 $$ assertTimestampsEqual(target.lastModified(), attributes.lastModified)[ FD ]
Line_5 $$ final File link = IoTestUtil.createHardLink(target.getPath(), myTempDirectory.getPath() + "/link")-->Line_6 $$ FileAttributes attributes = getAttributes(link, SystemInfo.areSymLinksSupported)[ FD ]
Line_2 $$ public void hardLink() throws Exception -->Line_18 $$ final String resolved = FileSystemUtil.resolveSymLink(link)[ CD ]
Line_5 $$ final File link = IoTestUtil.createHardLink(target.getPath(), myTempDirectory.getPath() + "/link")-->Line_19 $$ assertEquals(link.getPath(), resolved)[ FD ]
Line_4 $$ final File target = FileUtil.createTempFile(myTempDirectory, "test.", ".txt")-->Line_11 $$ assertTrue(target.setLastModified(attributes.lastModified - 5000))[ FD ]
Line_5 $$ final File link = IoTestUtil.createHardLink(target.getPath(), myTempDirectory.getPath() + "/link")-->Line_14 $$ attributes = getAttributes(link, SystemInfo.areSymLinksSupported)[ FD ]
Line_2 $$ public void hardLink() throws Exception -->Line_13 $$ assertTimestampsEqual(attributes.lastModified - 5000, target.lastModified())[ CD ]
Line_2 $$ public void hardLink() throws Exception -->Line_15 $$ assertEquals(FileAttributes.Type.FILE, attributes.type)[ CD ]
Line_5 $$ final File link = IoTestUtil.createHardLink(target.getPath(), myTempDirectory.getPath() + "/link")-->Line_18 $$ final String resolved = FileSystemUtil.resolveSymLink(link)[ FD ]
Line_4 $$ final File target = FileUtil.createTempFile(myTempDirectory, "test.", ".txt")-->Line_16 $$ assertEquals(target.length(), attributes.length)[ FD ]
Line_2 $$ public void hardLink() throws Exception -->Line_5 $$ final File link = IoTestUtil.createHardLink(target.getPath(), myTempDirectory.getPath() + "/link")[ CD ]
Line_2 $$ public void hardLink() throws Exception -->Line_11 $$ assertTrue(target.setLastModified(attributes.lastModified - 5000))[ CD ]
Line_2 $$ public void hardLink() throws Exception -->Line_8 $$ assertEquals(target.length(), attributes.length)[ CD ]
Line_2 $$ public void hardLink() throws Exception -->Line_12 $$ assertTrue(target.length() > 0)[ CD ]
Line_6 $$ FileAttributes attributes = getAttributes(link, SystemInfo.areSymLinksSupported)-->Line_14 $$ attributes = getAttributes(link, SystemInfo.areSymLinksSupported)[ FD ]
Line_4 $$ final File target = FileUtil.createTempFile(myTempDirectory, "test.", ".txt")-->Line_13 $$ assertTimestampsEqual(attributes.lastModified - 5000, target.lastModified())[ FD ]
Line_4 $$ final File target = FileUtil.createTempFile(myTempDirectory, "test.", ".txt")-->Line_8 $$ assertEquals(target.length(), attributes.length)[ FD ]
Line_2 $$ public void hardLink() throws Exception -->Line_14 $$ attributes = getAttributes(link, SystemInfo.areSymLinksSupported)[ CD ]
Line_2 $$ public void hardLink() throws Exception -->Line_7 $$ assertEquals(FileAttributes.Type.FILE, attributes.type)[ CD ]
Line_2 $$ public void hardLink() throws Exception -->Line_19 $$ assertEquals(link.getPath(), resolved)[ CD ]
Line_2 $$ public void hardLink() throws Exception -->Line_6 $$ FileAttributes attributes = getAttributes(link, SystemInfo.areSymLinksSupported)[ CD ]
Line_2 $$ public void hardLink() throws Exception -->Line_3 $$ assumeFalse(SystemInfo.isWindows)[ CD ]
Line_2 $$ public void hardLink() throws Exception -->Line_4 $$ final File target = FileUtil.createTempFile(myTempDirectory, "test.", ".txt")[ CD ]
