Line_22 $$ final DatanodeProtocolClientSideTranslatorPB namenode = mock(DatanodeProtocolClientSideTranslatorPB.class)-->Line_30 $$ when(namenode.versionRequest()).thenReturn(new NamespaceInfo(1, CLUSTER_ID, POOL_ID, 1L))[ FD ]
Line_17 $$ File dataDir = new File(DATA_DIR)-->Line_18 $$ FileUtil.fullyDelete(dataDir)[ FD ]
Line_23 $$ Mockito.doAnswer(new Answer<DatanodeRegistration>() -->Line_27 $$ return (DatanodeRegistration) invocation.getArguments()[0][ CD ]
Line_22 $$ final DatanodeProtocolClientSideTranslatorPB namenode = mock(DatanodeProtocolClientSideTranslatorPB.class)-->Line_31 $$ when(namenode.sendHeartbeat(Mockito.any(DatanodeRegistration.class), Mockito.any(StorageReport[].class), Mockito.anyLong(), Mockito.anyLong(), Mockito.anyInt(), Mockito.anyInt(), Mockito.anyInt())).thenReturn(new HeartbeatResponse(new DatanodeCommand[0], new NNHAStatusHeartbeat(HAServiceState.ACTIVE, 1), null))[ FD ]
Line_20 $$ StorageLocation location = StorageLocation.parse(dataDir.getPath())-->Line_21 $$ locations.add(location)[ FD ]
Line_17 $$ File dataDir = new File(DATA_DIR)-->Line_19 $$ dataDir.mkdirs()[ FD ]
Line_23 $$ Mockito.doAnswer(new Answer<DatanodeRegistration>() -->Line_27 $$ return (DatanodeRegistration) invocation.getArguments()[0][ FD ]
Line_22 $$ final DatanodeProtocolClientSideTranslatorPB namenode = mock(DatanodeProtocolClientSideTranslatorPB.class)-->Line_23 $$ Mockito.doAnswer(new Answer<DatanodeRegistration>() [ FD ]
Line_32 $$ dn = new DataNode(conf, locations, null) -->Line_36 $$ Assert.assertEquals(NN_ADDR, nnAddr)[ CD ]
Line_17 $$ File dataDir = new File(DATA_DIR)-->Line_20 $$ StorageLocation location = StorageLocation.parse(dataDir.getPath())[ FD ]
Line_16 $$ ArrayList<StorageLocation> locations = new ArrayList<StorageLocation>()-->Line_21 $$ locations.add(location)[ FD ]
Line_32 $$ dn = new DataNode(conf, locations, null) -->Line_37 $$ return namenode[ CD ]
Line_32 $$ dn = new DataNode(conf, locations, null) -->Line_36 $$ Assert.assertEquals(NN_ADDR, nnAddr)[ FD ]
