Line_17 $$ final GitRevisionNumber revisionNumber = (GitRevisionNumber) state.getNumber()-->Line_18 $$ assertEquals(revisionNumber.getRev(), hashAndDate[0])[ FD ]
Line_15 $$ final ItemLatestState state = GitHistoryUtils.getLastRevision(myProject, toFilePath(bfile))-->Line_16 $$ assertTrue(!state.isItemExists())[ FD ]
Line_2 $$ public void testGetLastRevisionForNonExistingFile() throws Exception -->Line_7 $$ commit("removed bfile")[ CD ]
Line_2 $$ public void testGetLastRevisionForNonExistingFile() throws Exception -->Line_3 $$ git("remote add origin git://example.com/repo.git")[ CD ]
Line_17 $$ final GitRevisionNumber revisionNumber = (GitRevisionNumber) state.getNumber()-->Line_19 $$ assertEquals(revisionNumber.getTimestamp(), GitTestRevision.gitTimeStampToDate(hashAndDate[1]))[ FD ]
Line_2 $$ public void testGetLastRevisionForNonExistingFile() throws Exception -->Line_13 $$ refresh()[ CD ]
Line_2 $$ public void testGetLastRevisionForNonExistingFile() throws Exception -->Line_15 $$ final ItemLatestState state = GitHistoryUtils.getLastRevision(myProject, toFilePath(bfile))[ CD ]
Line_2 $$ public void testGetLastRevisionForNonExistingFile() throws Exception -->Line_8 $$ String[] hashAndDate = log("--pretty=format:%H#%ct", "-n1").split("#")[ CD ]
Line_2 $$ public void testGetLastRevisionForNonExistingFile() throws Exception -->Line_17 $$ final GitRevisionNumber revisionNumber = (GitRevisionNumber) state.getNumber()[ CD ]
Line_2 $$ public void testGetLastRevisionForNonExistingFile() throws Exception -->Line_14 $$ myRepo.update()[ CD ]
Line_2 $$ public void testGetLastRevisionForNonExistingFile() throws Exception -->Line_19 $$ assertEquals(revisionNumber.getTimestamp(), GitTestRevision.gitTimeStampToDate(hashAndDate[1]))[ CD ]
Line_2 $$ public void testGetLastRevisionForNonExistingFile() throws Exception -->Line_12 $$ addCommit("recreated bfile")[ CD ]
Line_2 $$ public void testGetLastRevisionForNonExistingFile() throws Exception -->Line_18 $$ assertEquals(revisionNumber.getRev(), hashAndDate[0])[ CD ]
Line_2 $$ public void testGetLastRevisionForNonExistingFile() throws Exception -->Line_5 $$ git("config branch.master.merge refs/heads/master")[ CD ]
Line_2 $$ public void testGetLastRevisionForNonExistingFile() throws Exception -->Line_6 $$ git("rm " + bfile.getPath())[ CD ]
Line_2 $$ public void testGetLastRevisionForNonExistingFile() throws Exception -->Line_16 $$ assertTrue(!state.isItemExists())[ CD ]
Line_15 $$ final ItemLatestState state = GitHistoryUtils.getLastRevision(myProject, toFilePath(bfile))-->Line_17 $$ final GitRevisionNumber revisionNumber = (GitRevisionNumber) state.getNumber()[ FD ]
Line_2 $$ public void testGetLastRevisionForNonExistingFile() throws Exception -->Line_11 $$ touch("dir/b.txt", "content")[ CD ]
Line_2 $$ public void testGetLastRevisionForNonExistingFile() throws Exception -->Line_4 $$ git("config branch.master.remote origin")[ CD ]
