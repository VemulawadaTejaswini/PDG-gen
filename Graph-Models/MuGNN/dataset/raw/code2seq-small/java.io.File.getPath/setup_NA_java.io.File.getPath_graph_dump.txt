Line_21 $$ FileSystem remoteFS = p.getFileSystem(conf)-->Line_30 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_51 $$ Path path-->Line_80 $$ localClasspaths.add(path.toUri().getPath().toString())[ FD ]
Line_53 $$ path = resourcesToPaths.get(resource).get()-->Line_61 $$ String target = new File(path.toUri()).getPath()[ FD ]
Line_78 $$ String cp = resourcePath.toUri().getPath()-->Line_79 $$ if (classpaths.keySet().contains(cp)) [ FD ]
Line_59 $$ String pathString = path.toUri().toString()-->Line_66 $$ localFiles.add(pathString)[ FD ]
Line_21 $$ FileSystem remoteFS = p.getFileSystem(conf)-->Line_22 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_44 $$ for (LocalResource resource : localResources.values()) -->Line_73 $$ resourcePath = ConverterUtils.getPathFromYarnURL(resource.getResource())[ FD ]
Line_43 $$ Map<LocalResource, Future<Path>> resourcesToPaths = Maps.newHashMap()-->Line_47 $$ resourcesToPaths.put(resource, future)[ FD ]
Line_38 $$ ExecutorService exec = null-->Line_84 $$ if (exec != null) [ FD ]
Line_49 $$ for (Entry<String, LocalResource> entry : localResources.entrySet()) -->Line_60 $$ String link = entry.getKey()[ FD ]
Line_20 $$ for (Path p : archiveClassPaths) -->Line_21 $$ FileSystem remoteFS = p.getFileSystem(conf)[ FD ]
Line_43 $$ Map<LocalResource, Future<Path>> resourcesToPaths = Maps.newHashMap()-->Line_53 $$ path = resourcesToPaths.get(resource).get()[ FD ]
Line_63 $$ if (resource.getType() == LocalResourceType.ARCHIVE) -->Line_64 $$ localArchives.add(pathString)[ CD ]
Line_38 $$ ExecutorService exec = null-->Line_41 $$ exec = Executors.newCachedThreadPool(tf)[ FD ]
Line_53 $$ path = resourcesToPaths.get(resource).get()-->Line_59 $$ String pathString = path.toUri().toString()[ FD ]
Line_41 $$ exec = Executors.newCachedThreadPool(tf)-->Line_85 $$ exec.shutdown()[ FD ]
Line_22 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_31 $$ classpaths.put(p.toUri().getPath().toString(), p)[ FD ]
Line_51 $$ Path path-->Line_59 $$ String pathString = path.toUri().toString()[ FD ]
Line_65 $$ if (resource.getType() == LocalResourceType.FILE) -->Line_67 $$ if (resource.getType() == LocalResourceType.PATTERN) [ CD ]
Line_38 $$ ExecutorService exec = null-->Line_46 $$ Future<Path> future = exec.submit(download)[ FD ]
Line_51 $$ Path path-->Line_61 $$ String target = new File(path.toUri()).getPath()[ FD ]
Line_79 $$ if (classpaths.keySet().contains(cp)) -->Line_80 $$ localClasspaths.add(path.toUri().getPath().toString())[ CD ]
Line_59 $$ String pathString = path.toUri().toString()-->Line_64 $$ localArchives.add(pathString)[ FD ]
Line_92 $$ if (!localFiles.isEmpty()) -->Line_93 $$ conf.set(MRJobConfig.CACHE_LOCALFILES, StringUtils.arrayToString(localFiles.toArray(new String[localArchives.size()])))[ CD ]
Line_22 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_23 $$ classpaths.put(p.toUri().getPath().toString(), p)[ FD ]
Line_26 $$ Path[] fileClassPaths = DistributedCache.getFileClassPaths(conf)-->Line_27 $$ if (fileClassPaths != null) [ FD ]
Line_22 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_29 $$ FileSystem remoteFS = p.getFileSystem(conf)[ FD ]
Line_20 $$ for (Path p : archiveClassPaths) -->Line_30 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_22 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_30 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_41 $$ exec = Executors.newCachedThreadPool(tf)-->Line_46 $$ Future<Path> future = exec.submit(download)[ FD ]
Line_20 $$ for (Path p : archiveClassPaths) -->Line_29 $$ FileSystem remoteFS = p.getFileSystem(conf)[ FD ]
Line_9 $$ File workDir = new File(System.getProperty("user.dir"))-->Line_62 $$ symlink(workDir, target, link)[ FD ]
Line_51 $$ Path path-->Line_77 $$ LOG.info(String.format("Localized %s as %s", resourcePath, path))[ FD ]
Line_46 $$ Future<Path> future = exec.submit(download)-->Line_47 $$ resourcesToPaths.put(resource, future)[ FD ]
Line_20 $$ for (Path p : archiveClassPaths) -->Line_22 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_44 $$ for (LocalResource resource : localResources.values()) -->Line_53 $$ path = resourcesToPaths.get(resource).get()[ FD ]
Line_53 $$ path = resourcesToPaths.get(resource).get()-->Line_80 $$ localClasspaths.add(path.toUri().getPath().toString())[ FD ]
Line_44 $$ for (LocalResource resource : localResources.values()) -->Line_67 $$ if (resource.getType() == LocalResourceType.PATTERN) [ FD ]
Line_65 $$ if (resource.getType() == LocalResourceType.FILE) -->Line_66 $$ localFiles.add(pathString)[ CD ]
Line_20 $$ for (Path p : archiveClassPaths) -->Line_31 $$ classpaths.put(p.toUri().getPath().toString(), p)[ FD ]
Line_63 $$ if (resource.getType() == LocalResourceType.ARCHIVE) -->Line_65 $$ if (resource.getType() == LocalResourceType.FILE) [ CD ]
Line_71 $$ Path resourcePath-->Line_77 $$ LOG.info(String.format("Localized %s as %s", resourcePath, path))[ FD ]
Line_44 $$ for (LocalResource resource : localResources.values()) -->Line_47 $$ resourcesToPaths.put(resource, future)[ FD ]
Line_45 $$ Callable<Path> download = new FSDownload(localFSFileContext, ugi, conf, new Path(destPath, Long.toString(uniqueNumberGenerator.incrementAndGet())), resource)-->Line_46 $$ Future<Path> future = exec.submit(download)[ FD ]
Line_40 $$ ThreadFactory tf = new ThreadFactoryBuilder().setNameFormat("LocalDistributedCacheManager Downloader #%d").build()-->Line_41 $$ exec = Executors.newCachedThreadPool(tf)[ FD ]
Line_44 $$ for (LocalResource resource : localResources.values()) -->Line_63 $$ if (resource.getType() == LocalResourceType.ARCHIVE) [ FD ]
Line_73 $$ resourcePath = ConverterUtils.getPathFromYarnURL(resource.getResource())-->Line_77 $$ LOG.info(String.format("Localized %s as %s", resourcePath, path))[ FD ]
Line_71 $$ Path resourcePath-->Line_78 $$ String cp = resourcePath.toUri().getPath()[ FD ]
Line_53 $$ path = resourcesToPaths.get(resource).get()-->Line_77 $$ LOG.info(String.format("Localized %s as %s", resourcePath, path))[ FD ]
Line_73 $$ resourcePath = ConverterUtils.getPathFromYarnURL(resource.getResource())-->Line_78 $$ String cp = resourcePath.toUri().getPath()[ FD ]
Line_61 $$ String target = new File(path.toUri()).getPath()-->Line_62 $$ symlink(workDir, target, link)[ FD ]
Line_49 $$ for (Entry<String, LocalResource> entry : localResources.entrySet()) -->Line_50 $$ LocalResource resource = entry.getValue()[ FD ]
Line_20 $$ for (Path p : archiveClassPaths) -->Line_23 $$ classpaths.put(p.toUri().getPath().toString(), p)[ FD ]
Line_44 $$ for (LocalResource resource : localResources.values()) -->Line_65 $$ if (resource.getType() == LocalResourceType.FILE) [ FD ]
Line_18 $$ Path[] archiveClassPaths = DistributedCache.getArchiveClassPaths(conf)-->Line_19 $$ if (archiveClassPaths != null) [ FD ]
Line_30 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_31 $$ classpaths.put(p.toUri().getPath().toString(), p)[ FD ]
Line_41 $$ exec = Executors.newCachedThreadPool(tf)-->Line_84 $$ if (exec != null) [ FD ]
Line_60 $$ String link = entry.getKey()-->Line_62 $$ symlink(workDir, target, link)[ FD ]
Line_38 $$ ExecutorService exec = null-->Line_85 $$ exec.shutdown()[ FD ]
Line_51 $$ Path path-->Line_53 $$ path = resourcesToPaths.get(resource).get()[ FD ]
Line_84 $$ if (exec != null) -->Line_85 $$ exec.shutdown()[ CD ]
Line_71 $$ Path resourcePath-->Line_73 $$ resourcePath = ConverterUtils.getPathFromYarnURL(resource.getResource())[ FD ]
