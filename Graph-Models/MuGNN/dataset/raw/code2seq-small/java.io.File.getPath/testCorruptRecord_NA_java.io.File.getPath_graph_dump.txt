Line_4 $$ File dataFolder = new Directories(cfs.metadata).getDirectoryForNewSSTables()-->Line_5 $$ SSTableReader sstableOld = sstable(dataFolder, cfs, 0, 128)[ FD ]
Line_3 $$ ColumnFamilyStore cfs = MockSchema.newCFS(KEYSPACE)-->Line_6 $$ SSTableReader sstableNew = sstable(dataFolder, cfs, 1, 128)[ FD ]
Line_4 $$ File dataFolder = new Directories(cfs.metadata).getDirectoryForNewSSTables()-->Line_6 $$ SSTableReader sstableNew = sstable(dataFolder, cfs, 1, 128)[ FD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_4 $$ File dataFolder = new Directories(cfs.metadata).getDirectoryForNewSSTables()[ CD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_16 $$ sstableNew.selfRef().release()[ CD ]
Line_4 $$ File dataFolder = new Directories(cfs.metadata).getDirectoryForNewSSTables()-->Line_22 $$ assertFiles(oldFiles, LogAwareFileLister.getFinalFiles(dataFolder))[ FD ]
Line_3 $$ ColumnFamilyStore cfs = MockSchema.newCFS(KEYSPACE)-->Line_5 $$ SSTableReader sstableOld = sstable(dataFolder, cfs, 0, 128)[ FD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_19 $$ Set<String> oldFiles = sstableOld.getAllFilePaths().stream().filter( p -> new File(p).exists()).collect(Collectors.toSet())[ CD ]
Line_4 $$ File dataFolder = new Directories(cfs.metadata).getDirectoryForNewSSTables()-->Line_33 $$ assertFiles(dataFolder.getPath(), Sets.newHashSet(Iterables.concat(newFiles, oldFiles, log.logFilePaths())))[ FD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_10 $$ log.trackNew(sstableNew)[ CD ]
Line_6 $$ SSTableReader sstableNew = sstable(dataFolder, cfs, 1, 128)-->Line_16 $$ sstableNew.selfRef().release()[ FD ]
Line_5 $$ SSTableReader sstableOld = sstable(dataFolder, cfs, 0, 128)-->Line_19 $$ Set<String> oldFiles = sstableOld.getAllFilePaths().stream().filter( p -> new File(p).exists()).collect(Collectors.toSet())[ FD ]
Line_5 $$ SSTableReader sstableOld = sstable(dataFolder, cfs, 0, 128)-->Line_11 $$ log.obsoleted(sstableOld)[ FD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_5 $$ SSTableReader sstableOld = sstable(dataFolder, cfs, 0, 128)[ CD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_14 $$ assertNull(log.complete(null))[ CD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_3 $$ ColumnFamilyStore cfs = MockSchema.newCFS(KEYSPACE)[ CD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_23 $$ if (isRecoverable) [ CD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_22 $$ assertFiles(oldFiles, LogAwareFileLister.getFinalFiles(dataFolder))[ CD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_11 $$ log.obsoleted(sstableOld)[ CD ]
Line_5 $$ SSTableReader sstableOld = sstable(dataFolder, cfs, 0, 128)-->Line_15 $$ sstableOld.selfRef().release()[ FD ]
Line_19 $$ Set<String> oldFiles = sstableOld.getAllFilePaths().stream().filter( p -> new File(p).exists()).collect(Collectors.toSet())-->Line_22 $$ assertFiles(oldFiles, LogAwareFileLister.getFinalFiles(dataFolder))[ FD ]
Line_6 $$ SSTableReader sstableNew = sstable(dataFolder, cfs, 1, 128)-->Line_10 $$ log.trackNew(sstableNew)[ FD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_6 $$ SSTableReader sstableNew = sstable(dataFolder, cfs, 1, 128)[ CD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_15 $$ sstableOld.selfRef().release()[ CD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_9 $$ assertNotNull(log)[ CD ]
Line_19 $$ Set<String> oldFiles = sstableOld.getAllFilePaths().stream().filter( p -> new File(p).exists()).collect(Collectors.toSet())-->Line_33 $$ assertFiles(dataFolder.getPath(), Sets.newHashSet(Iterables.concat(newFiles, oldFiles, log.logFilePaths())))[ FD ]
Line_23 $$ if (isRecoverable) -->Line_33 $$ assertFiles(dataFolder.getPath(), Sets.newHashSet(Iterables.concat(newFiles, oldFiles, log.logFilePaths())))[ CD ]
