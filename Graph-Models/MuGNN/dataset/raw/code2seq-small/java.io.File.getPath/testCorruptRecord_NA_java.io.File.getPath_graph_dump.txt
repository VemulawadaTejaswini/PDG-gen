Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_12 $$ assertNull(log.complete(null))[ CD ]
Line_5 $$ SSTableReader sstableOld = sstable(dataFolder, cfs, 0, 128)-->Line_13 $$ sstableOld.selfRef().release()[ FD ]
Line_7 $$ LogTransaction log = new LogTransaction(OperationType.COMPACTION)-->Line_24 $$ assertFiles(dataFolder.getPath(), Sets.newHashSet(Iterables.concat(newFiles, oldFiles, log.logFilePaths())))[ FD ]
Line_19 $$ if (isRecoverable) -->Line_23 $$ LogTransaction.removeUnfinishedLeftovers(cfs.metadata)[ CD ]
Line_19 $$ if (isRecoverable) -->Line_24 $$ assertFiles(dataFolder.getPath(), Sets.newHashSet(Iterables.concat(newFiles, oldFiles, log.logFilePaths())))[ CD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_11 $$ modifier.accept(log, sstableOld)[ FD ]
Line_6 $$ SSTableReader sstableNew = sstable(dataFolder, cfs, 1, 128)-->Line_14 $$ sstableNew.selfRef().release()[ FD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_7 $$ LogTransaction log = new LogTransaction(OperationType.COMPACTION)[ CD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_11 $$ modifier.accept(log, sstableOld)[ CD ]
Line_15 $$ Set<String> newFiles = sstableNew.getAllFilePaths().stream().collect(Collectors.toSet())-->Line_24 $$ assertFiles(dataFolder.getPath(), Sets.newHashSet(Iterables.concat(newFiles, oldFiles, log.logFilePaths())))[ FD ]
Line_4 $$ File dataFolder = new Directories(cfs.metadata).getDirectoryForNewSSTables()-->Line_21 $$ assertFiles(dataFolder.getPath(), oldFiles)[ FD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_8 $$ assertNotNull(log)[ CD ]
Line_6 $$ SSTableReader sstableNew = sstable(dataFolder, cfs, 1, 128)-->Line_9 $$ log.trackNew(sstableNew)[ FD ]
Line_19 $$ if (isRecoverable) -->Line_21 $$ assertFiles(dataFolder.getPath(), oldFiles)[ CD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_4 $$ File dataFolder = new Directories(cfs.metadata).getDirectoryForNewSSTables()[ CD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_10 $$ log.obsoleted(sstableOld)[ CD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_15 $$ Set<String> newFiles = sstableNew.getAllFilePaths().stream().collect(Collectors.toSet())[ CD ]
Line_7 $$ LogTransaction log = new LogTransaction(OperationType.COMPACTION)-->Line_11 $$ modifier.accept(log, sstableOld)[ FD ]
Line_5 $$ SSTableReader sstableOld = sstable(dataFolder, cfs, 0, 128)-->Line_11 $$ modifier.accept(log, sstableOld)[ FD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_17 $$ assertFiles(newFiles, LogAwareFileLister.getTemporaryFiles(dataFolder))[ CD ]
Line_5 $$ SSTableReader sstableOld = sstable(dataFolder, cfs, 0, 128)-->Line_10 $$ log.obsoleted(sstableOld)[ FD ]
Line_15 $$ Set<String> newFiles = sstableNew.getAllFilePaths().stream().collect(Collectors.toSet())-->Line_17 $$ assertFiles(newFiles, LogAwareFileLister.getTemporaryFiles(dataFolder))[ FD ]
Line_19 $$ if (isRecoverable) -->Line_20 $$ LogTransaction.removeUnfinishedLeftovers(cfs.metadata)[ CD ]
Line_7 $$ LogTransaction log = new LogTransaction(OperationType.COMPACTION)-->Line_8 $$ assertNotNull(log)[ FD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_18 $$ assertFiles(oldFiles, LogAwareFileLister.getFinalFiles(dataFolder))[ CD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_3 $$ ColumnFamilyStore cfs = MockSchema.newCFS(KEYSPACE)[ CD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_16 $$ Set<String> oldFiles = sstableOld.getAllFilePaths().stream().filter( p -> new File(p).exists()).collect(Collectors.toSet())[ CD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_19 $$ if (isRecoverable) [ CD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_6 $$ SSTableReader sstableNew = sstable(dataFolder, cfs, 1, 128)[ CD ]
Line_4 $$ File dataFolder = new Directories(cfs.metadata).getDirectoryForNewSSTables()-->Line_5 $$ SSTableReader sstableOld = sstable(dataFolder, cfs, 0, 128)[ FD ]
Line_7 $$ LogTransaction log = new LogTransaction(OperationType.COMPACTION)-->Line_12 $$ assertNull(log.complete(null))[ FD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_9 $$ log.trackNew(sstableNew)[ CD ]
Line_5 $$ SSTableReader sstableOld = sstable(dataFolder, cfs, 0, 128)-->Line_16 $$ Set<String> oldFiles = sstableOld.getAllFilePaths().stream().filter( p -> new File(p).exists()).collect(Collectors.toSet())[ FD ]
Line_7 $$ LogTransaction log = new LogTransaction(OperationType.COMPACTION)-->Line_10 $$ log.obsoleted(sstableOld)[ FD ]
Line_7 $$ LogTransaction log = new LogTransaction(OperationType.COMPACTION)-->Line_9 $$ log.trackNew(sstableNew)[ FD ]
Line_3 $$ ColumnFamilyStore cfs = MockSchema.newCFS(KEYSPACE)-->Line_5 $$ SSTableReader sstableOld = sstable(dataFolder, cfs, 0, 128)[ FD ]
Line_6 $$ SSTableReader sstableNew = sstable(dataFolder, cfs, 1, 128)-->Line_15 $$ Set<String> newFiles = sstableNew.getAllFilePaths().stream().collect(Collectors.toSet())[ FD ]
Line_4 $$ File dataFolder = new Directories(cfs.metadata).getDirectoryForNewSSTables()-->Line_18 $$ assertFiles(oldFiles, LogAwareFileLister.getFinalFiles(dataFolder))[ FD ]
Line_16 $$ Set<String> oldFiles = sstableOld.getAllFilePaths().stream().filter( p -> new File(p).exists()).collect(Collectors.toSet())-->Line_24 $$ assertFiles(dataFolder.getPath(), Sets.newHashSet(Iterables.concat(newFiles, oldFiles, log.logFilePaths())))[ FD ]
Line_16 $$ Set<String> oldFiles = sstableOld.getAllFilePaths().stream().filter( p -> new File(p).exists()).collect(Collectors.toSet())-->Line_21 $$ assertFiles(dataFolder.getPath(), oldFiles)[ FD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_5 $$ SSTableReader sstableOld = sstable(dataFolder, cfs, 0, 128)[ CD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_13 $$ sstableOld.selfRef().release()[ CD ]
Line_16 $$ Set<String> oldFiles = sstableOld.getAllFilePaths().stream().filter( p -> new File(p).exists()).collect(Collectors.toSet())-->Line_18 $$ assertFiles(oldFiles, LogAwareFileLister.getFinalFiles(dataFolder))[ FD ]
Line_4 $$ File dataFolder = new Directories(cfs.metadata).getDirectoryForNewSSTables()-->Line_17 $$ assertFiles(newFiles, LogAwareFileLister.getTemporaryFiles(dataFolder))[ FD ]
Line_4 $$ File dataFolder = new Directories(cfs.metadata).getDirectoryForNewSSTables()-->Line_24 $$ assertFiles(dataFolder.getPath(), Sets.newHashSet(Iterables.concat(newFiles, oldFiles, log.logFilePaths())))[ FD ]
Line_3 $$ ColumnFamilyStore cfs = MockSchema.newCFS(KEYSPACE)-->Line_6 $$ SSTableReader sstableNew = sstable(dataFolder, cfs, 1, 128)[ FD ]
Line_4 $$ File dataFolder = new Directories(cfs.metadata).getDirectoryForNewSSTables()-->Line_6 $$ SSTableReader sstableNew = sstable(dataFolder, cfs, 1, 128)[ FD ]
Line_2 $$ private static void testCorruptRecord(BiConsumer<LogTransaction, SSTableReader> modifier, boolean isRecoverable) throws IOException -->Line_14 $$ sstableNew.selfRef().release()[ CD ]
