Line_6 $$ AbstractList<StorageLocation> locations = new ArrayList<StorageLocation>()-->Line_10 $$ List<StorageLocation> checkedLocations = DataNode.checkStorageLocations(locations, fs, diskChecker)[ FD ]
Line_2 $$ public void testDataDirValidation() throws Throwable -->Line_12 $$ String validDir = checkedLocations.iterator().next().getFile().getPath()[ CD ]
Line_2 $$ public void testDataDirValidation() throws Throwable -->Line_9 $$ locations.add(StorageLocation.parse("file:/p3/"))[ CD ]
Line_6 $$ AbstractList<StorageLocation> locations = new ArrayList<StorageLocation>()-->Line_9 $$ locations.add(StorageLocation.parse("file:/p3/"))[ FD ]
Line_2 $$ public void testDataDirValidation() throws Throwable -->Line_13 $$ assertThat("p3 should be valid", new File("/p3/").getPath(), is(validDir))[ CD ]
Line_2 $$ public void testDataDirValidation() throws Throwable -->Line_8 $$ locations.add(StorageLocation.parse("file:/p2/"))[ CD ]
Line_6 $$ AbstractList<StorageLocation> locations = new ArrayList<StorageLocation>()-->Line_7 $$ locations.add(StorageLocation.parse("file:/p1/"))[ FD ]
Line_3 $$ DataNodeDiskChecker diskChecker = mock(DataNodeDiskChecker.class)-->Line_10 $$ List<StorageLocation> checkedLocations = DataNode.checkStorageLocations(locations, fs, diskChecker)[ FD ]
Line_5 $$ LocalFileSystem fs = mock(LocalFileSystem.class)-->Line_10 $$ List<StorageLocation> checkedLocations = DataNode.checkStorageLocations(locations, fs, diskChecker)[ FD ]
Line_3 $$ DataNodeDiskChecker diskChecker = mock(DataNodeDiskChecker.class)-->Line_4 $$ doThrow(new IOException()).doThrow(new IOException()).doNothing().when(diskChecker).checkDir(any(LocalFileSystem.class), any(Path.class))[ FD ]
Line_10 $$ List<StorageLocation> checkedLocations = DataNode.checkStorageLocations(locations, fs, diskChecker)-->Line_11 $$ assertEquals("number of valid data dirs", 1, checkedLocations.size())[ FD ]
Line_2 $$ public void testDataDirValidation() throws Throwable -->Line_4 $$ doThrow(new IOException()).doThrow(new IOException()).doNothing().when(diskChecker).checkDir(any(LocalFileSystem.class), any(Path.class))[ CD ]
Line_6 $$ AbstractList<StorageLocation> locations = new ArrayList<StorageLocation>()-->Line_8 $$ locations.add(StorageLocation.parse("file:/p2/"))[ FD ]
Line_2 $$ public void testDataDirValidation() throws Throwable -->Line_7 $$ locations.add(StorageLocation.parse("file:/p1/"))[ CD ]
Line_2 $$ public void testDataDirValidation() throws Throwable -->Line_11 $$ assertEquals("number of valid data dirs", 1, checkedLocations.size())[ CD ]
Line_2 $$ public void testDataDirValidation() throws Throwable -->Line_3 $$ DataNodeDiskChecker diskChecker = mock(DataNodeDiskChecker.class)[ CD ]
Line_2 $$ public void testDataDirValidation() throws Throwable -->Line_5 $$ LocalFileSystem fs = mock(LocalFileSystem.class)[ CD ]
Line_12 $$ String validDir = checkedLocations.iterator().next().getFile().getPath()-->Line_13 $$ assertThat("p3 should be valid", new File("/p3/").getPath(), is(validDir))[ FD ]
Line_2 $$ public void testDataDirValidation() throws Throwable -->Line_6 $$ AbstractList<StorageLocation> locations = new ArrayList<StorageLocation>()[ CD ]
Line_10 $$ List<StorageLocation> checkedLocations = DataNode.checkStorageLocations(locations, fs, diskChecker)-->Line_12 $$ String validDir = checkedLocations.iterator().next().getFile().getPath()[ FD ]
Line_2 $$ public void testDataDirValidation() throws Throwable -->Line_10 $$ List<StorageLocation> checkedLocations = DataNode.checkStorageLocations(locations, fs, diskChecker)[ CD ]
