Line_4 $$ DataNodeDiskChecker diskChecker = mock(DataNodeDiskChecker.class)-->Line_5 $$ doThrow(new IOException()).doThrow(new IOException()).doNothing().when(diskChecker).checkDir(any(LocalFileSystem.class), any(Path.class))[ FD ]
Line_7 $$ AbstractList<StorageLocation> locations = new ArrayList<StorageLocation>()-->Line_8 $$ locations.add(StorageLocation.parse("file:/p1/"))[ FD ]
Line_7 $$ AbstractList<StorageLocation> locations = new ArrayList<StorageLocation>()-->Line_10 $$ locations.add(StorageLocation.parse("file:/p3/"))[ FD ]
Line_11 $$ List<StorageLocation> checkedLocations = DataNode.checkStorageLocations(locations, fs, diskChecker)-->Line_13 $$ String validDir = checkedLocations.iterator().next().getFile().getPath()[ FD ]
Line_7 $$ AbstractList<StorageLocation> locations = new ArrayList<StorageLocation>()-->Line_11 $$ List<StorageLocation> checkedLocations = DataNode.checkStorageLocations(locations, fs, diskChecker)[ FD ]
Line_6 $$ LocalFileSystem fs = mock(LocalFileSystem.class)-->Line_11 $$ List<StorageLocation> checkedLocations = DataNode.checkStorageLocations(locations, fs, diskChecker)[ FD ]
Line_7 $$ AbstractList<StorageLocation> locations = new ArrayList<StorageLocation>()-->Line_9 $$ locations.add(StorageLocation.parse("file:/p2/"))[ FD ]
Line_13 $$ String validDir = checkedLocations.iterator().next().getFile().getPath()-->Line_14 $$ assertThat("p3 should be valid", new File("/p3/").getPath(), is(validDir))[ FD ]
Line_4 $$ DataNodeDiskChecker diskChecker = mock(DataNodeDiskChecker.class)-->Line_11 $$ List<StorageLocation> checkedLocations = DataNode.checkStorageLocations(locations, fs, diskChecker)[ FD ]
Line_11 $$ List<StorageLocation> checkedLocations = DataNode.checkStorageLocations(locations, fs, diskChecker)-->Line_12 $$ assertEquals("number of valid data dirs", 1, checkedLocations.size())[ FD ]
