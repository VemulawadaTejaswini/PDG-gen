Line_6 $$ each = each.getCause()-->Line_21 $$ problems.add(MavenProjectProblem.createStructureProblem(file.getPath(), each.getMessage()))[ FD ]
Line_3 $$ for (Throwable each : exceptions) -->Line_6 $$ each = each.getCause()[ FD ]
Line_2 $$ private void validate(@NotNull File file, @NotNull Collection<Exception> exceptions, @NotNull Collection<MavenProjectProblem> problems, @Nullable Collection<MavenId> unresolvedArtifacts) throws RemoteException -->Line_19 $$ problems.add(MavenProjectProblem.createStructureProblem(file.getPath(), causeMessage))[ FD ]
Line_3 $$ for (Throwable each : exceptions) -->Line_8 $$ if (each instanceof InvalidProjectModelException) [ FD ]
Line_2 $$ private void validate(@NotNull File file, @NotNull Collection<Exception> exceptions, @NotNull Collection<MavenProjectProblem> problems, @Nullable Collection<MavenId> unresolvedArtifacts) throws RemoteException -->Line_25 $$ unresolvedArtifacts.addAll(retrieveUnresolvedArtifactIds())[ FD ]
Line_3 $$ for (Throwable each : exceptions) -->Line_17 $$ if (each instanceof ProjectBuildingException) [ FD ]
Line_24 $$ if (unresolvedArtifacts != null) -->Line_25 $$ unresolvedArtifacts.addAll(retrieveUnresolvedArtifactIds())[ CD ]
Line_3 $$ for (Throwable each : exceptions) -->Line_21 $$ problems.add(MavenProjectProblem.createStructureProblem(file.getPath(), each.getMessage()))[ FD ]
Line_3 $$ for (Throwable each : exceptions) -->Line_18 $$ String causeMessage = each.getCause() != null ? each.getCause().getMessage() : each.getMessage()[ FD ]
Line_8 $$ if (each instanceof InvalidProjectModelException) -->Line_17 $$ if (each instanceof ProjectBuildingException) [ CD ]
Line_3 $$ for (Throwable each : exceptions) -->Line_4 $$ Maven3ServerGlobals.getLogger().info(each)[ FD ]
Line_10 $$ if (modelValidationResult != null) -->Line_15 $$ problems.add(MavenProjectProblem.createStructureProblem(file.getPath(), each.getCause().getMessage()))[ CD ]
Line_2 $$ private void validate(@NotNull File file, @NotNull Collection<Exception> exceptions, @NotNull Collection<MavenProjectProblem> problems, @Nullable Collection<MavenId> unresolvedArtifacts) throws RemoteException -->Line_24 $$ if (unresolvedArtifacts != null) [ CD ]
Line_17 $$ if (each instanceof ProjectBuildingException) -->Line_21 $$ problems.add(MavenProjectProblem.createStructureProblem(file.getPath(), each.getMessage()))[ CD ]
Line_17 $$ if (each instanceof ProjectBuildingException) -->Line_18 $$ String causeMessage = each.getCause() != null ? each.getCause().getMessage() : each.getMessage()[ CD ]
Line_6 $$ each = each.getCause()-->Line_18 $$ String causeMessage = each.getCause() != null ? each.getCause().getMessage() : each.getMessage()[ FD ]
Line_5 $$ if (each instanceof IllegalStateException && each.getCause() != null) -->Line_6 $$ each = each.getCause()[ CD ]
Line_17 $$ if (each instanceof ProjectBuildingException) -->Line_19 $$ problems.add(MavenProjectProblem.createStructureProblem(file.getPath(), causeMessage))[ CD ]
Line_6 $$ each = each.getCause()-->Line_17 $$ if (each instanceof ProjectBuildingException) [ FD ]
Line_18 $$ String causeMessage = each.getCause() != null ? each.getCause().getMessage() : each.getMessage()-->Line_19 $$ problems.add(MavenProjectProblem.createStructureProblem(file.getPath(), causeMessage))[ FD ]
Line_2 $$ private void validate(@NotNull File file, @NotNull Collection<Exception> exceptions, @NotNull Collection<MavenProjectProblem> problems, @Nullable Collection<MavenId> unresolvedArtifacts) throws RemoteException -->Line_24 $$ if (unresolvedArtifacts != null) [ FD ]
Line_6 $$ each = each.getCause()-->Line_8 $$ if (each instanceof InvalidProjectModelException) [ FD ]
Line_9 $$ ModelValidationResult modelValidationResult = ((InvalidProjectModelException) each).getValidationResult()-->Line_11 $$ for (Object eachValidationProblem : modelValidationResult.getMessages()) [ FD ]
Line_8 $$ if (each instanceof InvalidProjectModelException) -->Line_9 $$ ModelValidationResult modelValidationResult = ((InvalidProjectModelException) each).getValidationResult()[ CD ]
Line_2 $$ private void validate(@NotNull File file, @NotNull Collection<Exception> exceptions, @NotNull Collection<MavenProjectProblem> problems, @Nullable Collection<MavenId> unresolvedArtifacts) throws RemoteException -->Line_12 $$ problems.add(MavenProjectProblem.createStructureProblem(file.getPath(), (String) eachValidationProblem))[ FD ]
Line_2 $$ private void validate(@NotNull File file, @NotNull Collection<Exception> exceptions, @NotNull Collection<MavenProjectProblem> problems, @Nullable Collection<MavenId> unresolvedArtifacts) throws RemoteException -->Line_21 $$ problems.add(MavenProjectProblem.createStructureProblem(file.getPath(), each.getMessage()))[ FD ]
Line_6 $$ each = each.getCause()-->Line_15 $$ problems.add(MavenProjectProblem.createStructureProblem(file.getPath(), each.getCause().getMessage()))[ FD ]
Line_8 $$ if (each instanceof InvalidProjectModelException) -->Line_10 $$ if (modelValidationResult != null) [ CD ]
Line_3 $$ for (Throwable each : exceptions) -->Line_15 $$ problems.add(MavenProjectProblem.createStructureProblem(file.getPath(), each.getCause().getMessage()))[ FD ]
Line_9 $$ ModelValidationResult modelValidationResult = ((InvalidProjectModelException) each).getValidationResult()-->Line_10 $$ if (modelValidationResult != null) [ FD ]
Line_2 $$ private void validate(@NotNull File file, @NotNull Collection<Exception> exceptions, @NotNull Collection<MavenProjectProblem> problems, @Nullable Collection<MavenId> unresolvedArtifacts) throws RemoteException -->Line_15 $$ problems.add(MavenProjectProblem.createStructureProblem(file.getPath(), each.getCause().getMessage()))[ FD ]
Line_3 $$ for (Throwable each : exceptions) -->Line_5 $$ if (each instanceof IllegalStateException && each.getCause() != null) [ FD ]
