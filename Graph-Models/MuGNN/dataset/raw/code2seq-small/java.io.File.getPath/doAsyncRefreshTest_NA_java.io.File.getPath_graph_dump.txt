Line_11 $$ for (int i = 0; i < N; i++) -->Line_17 $$ timestamp[i] = file.lastModified()[ CD ]
Line_5 $$ File temp = myTempDir.newFolder()-->Line_7 $$ VirtualFile vTemp = fs.findFileByIoFile(temp)[ FD ]
Line_21 $$ File file = new File(temp, i + ".txt")-->Line_22 $$ assertEquals(timestamp[i], file.lastModified())[ FD ]
Line_11 $$ for (int i = 0; i < N; i++) -->Line_13 $$ FileUtil.writeToFile(file, data)[ CD ]
Line_2 $$ private void doAsyncRefreshTest() throws Exception -->Line_27 $$ for (int i = 0; i < N; i++) [ CD ]
Line_11 $$ for (int i = 0; i < N; i++) -->Line_45 $$ for (int i = 0; i < N; i++) [ FD ]
Line_11 $$ for (int i = 0; i < N; i++) -->Line_27 $$ for (int i = 0; i < N; i++) [ FD ]
Line_36 $$ CountDownLatch latch = new CountDownLatch(N)-->Line_42 $$ latch.await(100, TimeUnit.MILLISECONDS)[ FD ]
Line_12 $$ File file = new File(temp, i + ".txt")-->Line_23 $$ VirtualFile child = fs.findFileByIoFile(file)[ FD ]
Line_2 $$ private void doAsyncRefreshTest() throws Exception -->Line_9 $$ VirtualFile[] children = new VirtualFile[N][ CD ]
Line_11 $$ for (int i = 0; i < N; i++) -->Line_14 $$ VirtualFile child = fs.refreshAndFindFileByIoFile(file)[ CD ]
Line_31 $$ long modified = file.lastModified()-->Line_34 $$ IoTestUtil.assertTimestampsNotEqual(children[i].getTimeStamp(), modified)[ FD ]
Line_11 $$ for (int i = 0; i < N; i++) -->Line_12 $$ File file = new File(temp, i + ".txt")[ CD ]
Line_12 $$ File file = new File(temp, i + ".txt")-->Line_22 $$ assertEquals(timestamp[i], file.lastModified())[ FD ]
Line_20 $$ for (int i = 0; i < N; i++) -->Line_45 $$ for (int i = 0; i < N; i++) [ FD ]
Line_20 $$ for (int i = 0; i < N; i++) -->Line_27 $$ for (int i = 0; i < N; i++) [ FD ]
Line_2 $$ private void doAsyncRefreshTest() throws Exception -->Line_8 $$ assertNotNull(vTemp)[ CD ]
Line_20 $$ for (int i = 0; i < N; i++) -->Line_21 $$ File file = new File(temp, i + ".txt")[ CD ]
Line_46 $$ VirtualFile child = children[i]-->Line_47 $$ IoTestUtil.assertTimestampsEqual(timestamp[i], child.getTimeStamp())[ FD ]
Line_3 $$ int N = 1000-->Line_27 $$ for (int i = 0; i < N; i++) [ FD ]
Line_45 $$ for (int i = 0; i < N; i++) -->Line_47 $$ IoTestUtil.assertTimestampsEqual(timestamp[i], child.getTimeStamp())[ CD ]
Line_2 $$ private void doAsyncRefreshTest() throws Exception -->Line_10 $$ long[] timestamp = new long[N][ CD ]
Line_14 $$ VirtualFile child = fs.refreshAndFindFileByIoFile(file)-->Line_38 $$ child.refresh(true, true, latch::<>countDown)[ FD ]
Line_23 $$ VirtualFile child = fs.findFileByIoFile(file)-->Line_25 $$ IoTestUtil.assertTimestampsEqual(timestamp[i], child.getTimeStamp())[ FD ]
Line_12 $$ File file = new File(temp, i + ".txt")-->Line_13 $$ FileUtil.writeToFile(file, data)[ FD ]
Line_23 $$ VirtualFile child = fs.findFileByIoFile(file)-->Line_24 $$ assertNotNull(child)[ FD ]
Line_14 $$ VirtualFile child = fs.refreshAndFindFileByIoFile(file)-->Line_15 $$ assertNotNull(child)[ FD ]
Line_2 $$ private void doAsyncRefreshTest() throws Exception -->Line_41 $$ while (latch.getCount() > 0) [ CD ]
Line_45 $$ for (int i = 0; i < N; i++) -->Line_46 $$ VirtualFile child = children[i][ CD ]
Line_27 $$ for (int i = 0; i < N; i++) -->Line_45 $$ for (int i = 0; i < N; i++) [ FD ]
Line_7 $$ VirtualFile vTemp = fs.findFileByIoFile(temp)-->Line_8 $$ assertNotNull(vTemp)[ FD ]
Line_3 $$ int N = 1000-->Line_45 $$ for (int i = 0; i < N; i++) [ FD ]
Line_20 $$ for (int i = 0; i < N; i++) -->Line_22 $$ assertEquals(timestamp[i], file.lastModified())[ CD ]
Line_21 $$ File file = new File(temp, i + ".txt")-->Line_32 $$ assertTrue("File:" + file.getPath() + "; time:" + modified, timestamp[i] != modified)[ FD ]
Line_12 $$ File file = new File(temp, i + ".txt")-->Line_32 $$ assertTrue("File:" + file.getPath() + "; time:" + modified, timestamp[i] != modified)[ FD ]
Line_31 $$ long modified = file.lastModified()-->Line_33 $$ timestamp[i] = modified[ FD ]
Line_20 $$ for (int i = 0; i < N; i++) -->Line_23 $$ VirtualFile child = fs.findFileByIoFile(file)[ CD ]
Line_2 $$ private void doAsyncRefreshTest() throws Exception -->Line_11 $$ for (int i = 0; i < N; i++) [ CD ]
Line_41 $$ while (latch.getCount() > 0) -->Line_42 $$ latch.await(100, TimeUnit.MILLISECONDS)[ CD ]
Line_14 $$ VirtualFile child = fs.refreshAndFindFileByIoFile(file)-->Line_24 $$ assertNotNull(child)[ FD ]
Line_3 $$ int N = 1000-->Line_20 $$ for (int i = 0; i < N; i++) [ FD ]
Line_28 $$ File file = new File(temp, i + ".txt")-->Line_32 $$ assertTrue("File:" + file.getPath() + "; time:" + modified, timestamp[i] != modified)[ FD ]
Line_21 $$ File file = new File(temp, i + ".txt")-->Line_30 $$ assertTrue(file.setLastModified(timestamp[i] - 2000))[ FD ]
Line_2 $$ private void doAsyncRefreshTest() throws Exception -->Line_3 $$ int N = 1000[ CD ]
Line_6 $$ LocalFileSystem fs = LocalFileSystem.getInstance()-->Line_14 $$ VirtualFile child = fs.refreshAndFindFileByIoFile(file)[ FD ]
Line_2 $$ private void doAsyncRefreshTest() throws Exception -->Line_19 $$ vTemp.refresh(false, true)[ CD ]
Line_2 $$ private void doAsyncRefreshTest() throws Exception -->Line_20 $$ for (int i = 0; i < N; i++) [ CD ]
Line_27 $$ for (int i = 0; i < N; i++) -->Line_34 $$ IoTestUtil.assertTimestampsNotEqual(children[i].getTimeStamp(), modified)[ CD ]
Line_36 $$ CountDownLatch latch = new CountDownLatch(N)-->Line_41 $$ while (latch.getCount() > 0) [ FD ]
Line_14 $$ VirtualFile child = fs.refreshAndFindFileByIoFile(file)-->Line_25 $$ IoTestUtil.assertTimestampsEqual(timestamp[i], child.getTimeStamp())[ FD ]
Line_27 $$ for (int i = 0; i < N; i++) -->Line_31 $$ long modified = file.lastModified()[ CD ]
Line_2 $$ private void doAsyncRefreshTest() throws Exception -->Line_4 $$ byte[] data = "xxx".getBytes(CharsetToolkit.UTF8_CHARSET)[ CD ]
Line_4 $$ byte[] data = "xxx".getBytes(CharsetToolkit.UTF8_CHARSET)-->Line_29 $$ FileUtil.writeToFile(file, data)[ FD ]
Line_12 $$ File file = new File(temp, i + ".txt")-->Line_30 $$ assertTrue(file.setLastModified(timestamp[i] - 2000))[ FD ]
Line_2 $$ private void doAsyncRefreshTest() throws Exception -->Line_7 $$ VirtualFile vTemp = fs.findFileByIoFile(temp)[ CD ]
Line_27 $$ for (int i = 0; i < N; i++) -->Line_32 $$ assertTrue("File:" + file.getPath() + "; time:" + modified, timestamp[i] != modified)[ CD ]
Line_20 $$ for (int i = 0; i < N; i++) -->Line_24 $$ assertNotNull(child)[ CD ]
Line_23 $$ VirtualFile child = fs.findFileByIoFile(file)-->Line_47 $$ IoTestUtil.assertTimestampsEqual(timestamp[i], child.getTimeStamp())[ FD ]
Line_12 $$ File file = new File(temp, i + ".txt")-->Line_29 $$ FileUtil.writeToFile(file, data)[ FD ]
Line_41 $$ while (latch.getCount() > 0) -->Line_43 $$ UIUtil.pump()[ CD ]
Line_4 $$ byte[] data = "xxx".getBytes(CharsetToolkit.UTF8_CHARSET)-->Line_13 $$ FileUtil.writeToFile(file, data)[ FD ]
Line_6 $$ LocalFileSystem fs = LocalFileSystem.getInstance()-->Line_7 $$ VirtualFile vTemp = fs.findFileByIoFile(temp)[ FD ]
Line_27 $$ for (int i = 0; i < N; i++) -->Line_28 $$ File file = new File(temp, i + ".txt")[ CD ]
Line_23 $$ VirtualFile child = fs.findFileByIoFile(file)-->Line_38 $$ child.refresh(true, true, latch::<>countDown)[ FD ]
Line_27 $$ for (int i = 0; i < N; i++) -->Line_29 $$ FileUtil.writeToFile(file, data)[ CD ]
Line_27 $$ for (int i = 0; i < N; i++) -->Line_30 $$ assertTrue(file.setLastModified(timestamp[i] - 2000))[ CD ]
Line_2 $$ private void doAsyncRefreshTest() throws Exception -->Line_6 $$ LocalFileSystem fs = LocalFileSystem.getInstance()[ CD ]
Line_12 $$ File file = new File(temp, i + ".txt")-->Line_31 $$ long modified = file.lastModified()[ FD ]
Line_6 $$ LocalFileSystem fs = LocalFileSystem.getInstance()-->Line_23 $$ VirtualFile child = fs.findFileByIoFile(file)[ FD ]
Line_3 $$ int N = 1000-->Line_11 $$ for (int i = 0; i < N; i++) [ FD ]
Line_28 $$ File file = new File(temp, i + ".txt")-->Line_31 $$ long modified = file.lastModified()[ FD ]
Line_37 $$ for (VirtualFile child : children) -->Line_38 $$ child.refresh(true, true, latch::<>countDown)[ FD ]
Line_28 $$ File file = new File(temp, i + ".txt")-->Line_29 $$ FileUtil.writeToFile(file, data)[ FD ]
Line_21 $$ File file = new File(temp, i + ".txt")-->Line_31 $$ long modified = file.lastModified()[ FD ]
Line_11 $$ for (int i = 0; i < N; i++) -->Line_15 $$ assertNotNull(child)[ CD ]
Line_14 $$ VirtualFile child = fs.refreshAndFindFileByIoFile(file)-->Line_47 $$ IoTestUtil.assertTimestampsEqual(timestamp[i], child.getTimeStamp())[ FD ]
Line_11 $$ for (int i = 0; i < N; i++) -->Line_20 $$ for (int i = 0; i < N; i++) [ FD ]
Line_21 $$ File file = new File(temp, i + ".txt")-->Line_23 $$ VirtualFile child = fs.findFileByIoFile(file)[ FD ]
Line_27 $$ for (int i = 0; i < N; i++) -->Line_33 $$ timestamp[i] = modified[ CD ]
Line_11 $$ for (int i = 0; i < N; i++) -->Line_16 $$ children[i] = child[ CD ]
Line_20 $$ for (int i = 0; i < N; i++) -->Line_25 $$ IoTestUtil.assertTimestampsEqual(timestamp[i], child.getTimeStamp())[ CD ]
Line_2 $$ private void doAsyncRefreshTest() throws Exception -->Line_5 $$ File temp = myTempDir.newFolder()[ CD ]
Line_12 $$ File file = new File(temp, i + ".txt")-->Line_17 $$ timestamp[i] = file.lastModified()[ FD ]
Line_14 $$ VirtualFile child = fs.refreshAndFindFileByIoFile(file)-->Line_16 $$ children[i] = child[ FD ]
Line_2 $$ private void doAsyncRefreshTest() throws Exception -->Line_36 $$ CountDownLatch latch = new CountDownLatch(N)[ CD ]
Line_7 $$ VirtualFile vTemp = fs.findFileByIoFile(temp)-->Line_19 $$ vTemp.refresh(false, true)[ FD ]
Line_28 $$ File file = new File(temp, i + ".txt")-->Line_30 $$ assertTrue(file.setLastModified(timestamp[i] - 2000))[ FD ]
Line_2 $$ private void doAsyncRefreshTest() throws Exception -->Line_45 $$ for (int i = 0; i < N; i++) [ CD ]
Line_12 $$ File file = new File(temp, i + ".txt")-->Line_14 $$ VirtualFile child = fs.refreshAndFindFileByIoFile(file)[ FD ]
Line_37 $$ for (VirtualFile child : children) -->Line_47 $$ IoTestUtil.assertTimestampsEqual(timestamp[i], child.getTimeStamp())[ FD ]
Line_21 $$ File file = new File(temp, i + ".txt")-->Line_29 $$ FileUtil.writeToFile(file, data)[ FD ]
