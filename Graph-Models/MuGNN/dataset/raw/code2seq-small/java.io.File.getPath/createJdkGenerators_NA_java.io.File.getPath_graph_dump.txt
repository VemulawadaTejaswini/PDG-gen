Line_15 $$ File homeDir-->Line_19 $$ homeDir = home[ FD ]
Line_6 $$ for (final Sdk jdk : jdks) -->Line_11 $$ if (!(sdkType instanceof JavaSdkType) || ((JavaSdkType) sdkType).getBinPath(jdk) == null) [ FD ]
Line_29 $$ if (relativePath != null) -->Line_30 $$ fileSet.add(new Include(relativePath.replace(File.separatorChar, '/')))[ CD ]
Line_6 $$ for (final Sdk jdk : jdks) -->Line_10 $$ final SdkTypeId sdkType = jdk.getSdkType()[ FD ]
Line_19 $$ homeDir = home-->Line_28 $$ final String relativePath = FileUtil.getRelativePath(homeDir, pathElement)[ FD ]
Line_28 $$ final String relativePath = FileUtil.getRelativePath(homeDir, pathElement)-->Line_35 $$ if (relativePath != null) [ FD ]
Line_22 $$ final String jdkHomeProperty = getJdkHomeProperty(jdkName)-->Line_23 $$ final FileSet fileSet = new FileSet(propertyRef(jdkHomeProperty))[ FD ]
Line_28 $$ final String relativePath = FileUtil.getRelativePath(homeDir, pathElement)-->Line_30 $$ fileSet.add(new Include(relativePath.replace(File.separatorChar, '/')))[ FD ]
Line_6 $$ for (final Sdk jdk : jdks) -->Line_33 $$ final File binPath = toCanonicalFile(new File(((JavaSdkType) sdkType).getBinPath(jdk)))[ FD ]
Line_45 $$ final Sdk projectJdk = ProjectRootManager.getInstance(project).getProjectSdk()-->Line_48 $$ add(new Property(PROPERTY_PROJECT_JDK_CLASSPATH, projectJdk != null ? getJdkPathId(projectJdk.getName()) : ""))[ FD ]
Line_33 $$ final File binPath = toCanonicalFile(new File(((JavaSdkType) sdkType).getBinPath(jdk)))-->Line_34 $$ final String relativePath = FileUtil.getRelativePath(homeDir, binPath)[ FD ]
Line_6 $$ for (final Sdk jdk : jdks) -->Line_24 $$ final String[] urls = jdk.getRootProvider().getUrls(OrderRootType.CLASSES)[ FD ]
Line_40 $$ final Path jdkPath = new Path(getJdkPathId(jdkName))-->Line_41 $$ jdkPath.add(fileSet)[ FD ]
Line_6 $$ for (final Sdk jdk : jdks) -->Line_7 $$ if (jdk.getHomeDirectory() == null) [ FD ]
Line_2 $$ protected void createJdkGenerators(final Project project) -->Line_3 $$ final Sdk[] jdks = getUsedJdks(project)[ FD ]
Line_2 $$ protected void createJdkGenerators(final Project project) -->Line_45 $$ final Sdk projectJdk = ProjectRootManager.getInstance(project).getProjectSdk()[ CD ]
Line_25 $$ for (String url : urls) -->Line_26 $$ final String path = GenerationUtils.trimJarSeparator(VirtualFileManager.extractPath(url))[ FD ]
Line_6 $$ for (final Sdk jdk : jdks) -->Line_21 $$ final String jdkName = jdk.getName()[ FD ]
Line_40 $$ final Path jdkPath = new Path(getJdkPathId(jdkName))-->Line_42 $$ add(jdkPath)[ FD ]
Line_2 $$ protected void createJdkGenerators(final Project project) -->Line_46 $$ add(new Property(PROPERTY_PROJECT_JDK_HOME, projectJdk != null ? propertyRef(getJdkHomeProperty(projectJdk.getName())) : ""), 1)[ CD ]
Line_15 $$ File homeDir-->Line_34 $$ final String relativePath = FileUtil.getRelativePath(homeDir, binPath)[ FD ]
Line_14 $$ final File home = VfsUtil.virtualToIoFile(jdk.getHomeDirectory())-->Line_19 $$ homeDir = home[ FD ]
Line_2 $$ protected void createJdkGenerators(final Project project) -->Line_4 $$ if (jdks.length > 0) [ CD ]
Line_21 $$ final String jdkName = jdk.getName()-->Line_36 $$ add(new Property(BuildProperties.getJdkBinProperty(jdkName), propertyRef(jdkHomeProperty) + "/" + FileUtil.toSystemIndependentName(relativePath)), 1)[ FD ]
Line_28 $$ final String relativePath = FileUtil.getRelativePath(homeDir, pathElement)-->Line_36 $$ add(new Property(BuildProperties.getJdkBinProperty(jdkName), propertyRef(jdkHomeProperty) + "/" + FileUtil.toSystemIndependentName(relativePath)), 1)[ FD ]
Line_2 $$ protected void createJdkGenerators(final Project project) -->Line_3 $$ final Sdk[] jdks = getUsedJdks(project)[ CD ]
Line_17 $$ homeDir = home.getCanonicalFile()-->Line_34 $$ final String relativePath = FileUtil.getRelativePath(homeDir, binPath)[ FD ]
Line_21 $$ final String jdkName = jdk.getName()-->Line_38 $$ add(new Property(BuildProperties.getJdkBinProperty(jdkName), FileUtil.toSystemIndependentName(binPath.getPath())), 1)[ FD ]
Line_2 $$ protected void createJdkGenerators(final Project project) -->Line_47 $$ add(new Property(PROPERTY_PROJECT_JDK_BIN, projectJdk != null ? propertyRef(getJdkBinProperty(projectJdk.getName())) : ""))[ CD ]
Line_17 $$ homeDir = home.getCanonicalFile()-->Line_19 $$ homeDir = home[ FD ]
Line_15 $$ File homeDir-->Line_17 $$ homeDir = home.getCanonicalFile()[ FD ]
Line_45 $$ final Sdk projectJdk = ProjectRootManager.getInstance(project).getProjectSdk()-->Line_47 $$ add(new Property(PROPERTY_PROJECT_JDK_BIN, projectJdk != null ? propertyRef(getJdkBinProperty(projectJdk.getName())) : ""))[ FD ]
Line_23 $$ final FileSet fileSet = new FileSet(propertyRef(jdkHomeProperty))-->Line_41 $$ jdkPath.add(fileSet)[ FD ]
Line_33 $$ final File binPath = toCanonicalFile(new File(((JavaSdkType) sdkType).getBinPath(jdk)))-->Line_38 $$ add(new Property(BuildProperties.getJdkBinProperty(jdkName), FileUtil.toSystemIndependentName(binPath.getPath())), 1)[ FD ]
Line_17 $$ homeDir = home.getCanonicalFile()-->Line_28 $$ final String relativePath = FileUtil.getRelativePath(homeDir, pathElement)[ FD ]
Line_2 $$ protected void createJdkGenerators(final Project project) -->Line_45 $$ final Sdk projectJdk = ProjectRootManager.getInstance(project).getProjectSdk()[ FD ]
Line_35 $$ if (relativePath != null) -->Line_38 $$ add(new Property(BuildProperties.getJdkBinProperty(jdkName), FileUtil.toSystemIndependentName(binPath.getPath())), 1)[ CD ]
Line_6 $$ for (final Sdk jdk : jdks) -->Line_14 $$ final File home = VfsUtil.virtualToIoFile(jdk.getHomeDirectory())[ FD ]
Line_27 $$ final File pathElement = new File(path)-->Line_28 $$ final String relativePath = FileUtil.getRelativePath(homeDir, pathElement)[ FD ]
Line_35 $$ if (relativePath != null) -->Line_36 $$ add(new Property(BuildProperties.getJdkBinProperty(jdkName), propertyRef(jdkHomeProperty) + "/" + FileUtil.toSystemIndependentName(relativePath)), 1)[ CD ]
Line_4 $$ if (jdks.length > 0) -->Line_5 $$ add(new Comment(CompilerBundle.message("generated.ant.build.jdk.definitions.comment")), 1)[ CD ]
Line_14 $$ final File home = VfsUtil.virtualToIoFile(jdk.getHomeDirectory())-->Line_17 $$ homeDir = home.getCanonicalFile()[ FD ]
Line_21 $$ final String jdkName = jdk.getName()-->Line_22 $$ final String jdkHomeProperty = getJdkHomeProperty(jdkName)[ FD ]
Line_2 $$ protected void createJdkGenerators(final Project project) -->Line_48 $$ add(new Property(PROPERTY_PROJECT_JDK_CLASSPATH, projectJdk != null ? getJdkPathId(projectJdk.getName()) : ""))[ CD ]
Line_15 $$ File homeDir-->Line_28 $$ final String relativePath = FileUtil.getRelativePath(homeDir, pathElement)[ FD ]
Line_19 $$ homeDir = home-->Line_34 $$ final String relativePath = FileUtil.getRelativePath(homeDir, binPath)[ FD ]
Line_28 $$ final String relativePath = FileUtil.getRelativePath(homeDir, pathElement)-->Line_29 $$ if (relativePath != null) [ FD ]
Line_23 $$ final FileSet fileSet = new FileSet(propertyRef(jdkHomeProperty))-->Line_30 $$ fileSet.add(new Include(relativePath.replace(File.separatorChar, '/')))[ FD ]
Line_22 $$ final String jdkHomeProperty = getJdkHomeProperty(jdkName)-->Line_36 $$ add(new Property(BuildProperties.getJdkBinProperty(jdkName), propertyRef(jdkHomeProperty) + "/" + FileUtil.toSystemIndependentName(relativePath)), 1)[ FD ]
Line_21 $$ final String jdkName = jdk.getName()-->Line_40 $$ final Path jdkPath = new Path(getJdkPathId(jdkName))[ FD ]
Line_45 $$ final Sdk projectJdk = ProjectRootManager.getInstance(project).getProjectSdk()-->Line_46 $$ add(new Property(PROPERTY_PROJECT_JDK_HOME, projectJdk != null ? propertyRef(getJdkHomeProperty(projectJdk.getName())) : ""), 1)[ FD ]
