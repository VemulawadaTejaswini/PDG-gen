Line_2 $$ private static void initProject(@NotNull final LightProjectDescriptor descriptor) throws Exception -->Line_19 $$ ourProject = PlatformTestCase.createProject(projectFile, LIGHT_PROJECT_MARK + buffer)[ CD ]
Line_2 $$ private static void initProject(@NotNull final LightProjectDescriptor descriptor) throws Exception -->Line_4 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() [ CD ]
Line_2 $$ private static void initProject(@NotNull final LightProjectDescriptor descriptor) throws Exception -->Line_21 $$ if (!ourHaveShutdownHook) [ CD ]
Line_2 $$ private static void initProject(@NotNull final LightProjectDescriptor descriptor) throws Exception -->Line_16 $$ LocalFileSystem.getInstance().refreshAndFindFileByIoFile(projectFile)[ CD ]
Line_4 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_8 $$ if (ourProject != null) [ CD ]
Line_2 $$ private static void initProject(@NotNull final LightProjectDescriptor descriptor) throws Exception -->Line_18 $$ new Throwable(projectFile.getPath()).printStackTrace(new PrintStream(buffer))[ CD ]
Line_21 $$ if (!ourHaveShutdownHook) -->Line_23 $$ registerShutdownHook()[ CD ]
Line_2 $$ private static void initProject(@NotNull final LightProjectDescriptor descriptor) throws Exception -->Line_15 $$ final File projectFile = FileUtil.createTempFile(ProjectImpl.LIGHT_PROJECT_NAME, ProjectFileType.DOT_DEFAULT_EXTENSION)[ CD ]
Line_8 $$ if (ourProject != null) -->Line_9 $$ closeAndDeleteProject()[ CD ]
Line_2 $$ private static void initProject(@NotNull final LightProjectDescriptor descriptor) throws Exception -->Line_26 $$ ourProjectDescriptor.setUpProject(ourProject, new LightProjectDescriptor.SetupHandler() [ CD ]
Line_8 $$ if (ourProject != null) -->Line_11 $$ cleanPersistedVFSContent()[ CD ]
Line_2 $$ private static void initProject(@NotNull final LightProjectDescriptor descriptor) throws Exception -->Line_20 $$ ourPathToKeep = projectFile.getPath()[ CD ]
