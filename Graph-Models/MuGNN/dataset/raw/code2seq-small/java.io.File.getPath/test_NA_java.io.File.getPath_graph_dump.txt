Line_2 $$ public void test() throws Exception -->Line_4 $$ assertTrue("doesn't exist: " + locatorFile.getPath(), locatorFile.exists())[ CD ]
Line_3 $$ File locatorFile = new File(PathManager.getSystemPath() + "/" + ApplicationEx.LOCATOR_FILE_NAME)-->Line_5 $$ assertTrue("can't read: " + locatorFile.getPath(), locatorFile.canRead())[ FD ]
Line_3 $$ File locatorFile = new File(PathManager.getSystemPath() + "/" + ApplicationEx.LOCATOR_FILE_NAME)-->Line_6 $$ String home = FileUtil.loadFile(locatorFile, CharsetToolkit.UTF8_CHARSET)[ FD ]
Line_3 $$ File locatorFile = new File(PathManager.getSystemPath() + "/" + ApplicationEx.LOCATOR_FILE_NAME)-->Line_4 $$ assertTrue("doesn't exist: " + locatorFile.getPath(), locatorFile.exists())[ FD ]
Line_2 $$ public void test() throws Exception -->Line_7 $$ assertTrue(home, StringUtil.isNotEmpty(home))[ CD ]
Line_6 $$ String home = FileUtil.loadFile(locatorFile, CharsetToolkit.UTF8_CHARSET)-->Line_8 $$ assertEquals(home, PathManager.getHomePath())[ FD ]
Line_2 $$ public void test() throws Exception -->Line_6 $$ String home = FileUtil.loadFile(locatorFile, CharsetToolkit.UTF8_CHARSET)[ CD ]
Line_2 $$ public void test() throws Exception -->Line_3 $$ File locatorFile = new File(PathManager.getSystemPath() + "/" + ApplicationEx.LOCATOR_FILE_NAME)[ CD ]
Line_2 $$ public void test() throws Exception -->Line_5 $$ assertTrue("can't read: " + locatorFile.getPath(), locatorFile.canRead())[ CD ]
Line_6 $$ String home = FileUtil.loadFile(locatorFile, CharsetToolkit.UTF8_CHARSET)-->Line_7 $$ assertTrue(home, StringUtil.isNotEmpty(home))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_8 $$ assertEquals(home, PathManager.getHomePath())[ CD ]
