Line_29 $$ if (!expected.equals(actual)) -->Line_43 $$ Assert.assertEquals(originalText, actual)[ CD ]
Line_12 $$ final File winOut = new File(outs, myTestName + ".win.out")-->Line_14 $$ outFile = winOut[ FD ]
Line_9 $$ File outFile = new File(outs, myTestName + ".out")-->Line_14 $$ outFile = winOut[ FD ]
Line_28 $$ String expected = StringUtilRt.convertLineSeparators(originalText)-->Line_29 $$ if (!expected.equals(actual)) [ FD ]
Line_40 $$ if (actual.length() > len) -->Line_41 $$ System.out.println("Rest from actual text is: \"" + actual.substring(len) + "\"")[ CD ]
Line_29 $$ if (!expected.equals(actual)) -->Line_38 $$ if (expected.length() > len) [ CD ]
Line_34 $$ final int len = Math.min(expected.length(), actual.length())-->Line_38 $$ if (expected.length() > len) [ FD ]
Line_12 $$ final File winOut = new File(outs, myTestName + ".win.out")-->Line_13 $$ if (winOut.exists()) [ FD ]
Line_9 $$ File outFile = new File(outs, myTestName + ".out")-->Line_25 $$ LOG.error("Test file created " + outFile.getPath() + "\n" + "**************** Don't forget to put it into VCS! *******************")[ FD ]
Line_11 $$ if (SystemInfo.isWindows) -->Line_16 $$ if (SystemInfo.isUnix) [ CD ]
Line_19 $$ outFile = unixOut-->Line_25 $$ LOG.error("Test file created " + outFile.getPath() + "\n" + "**************** Don't forget to put it into VCS! *******************")[ FD ]
Line_9 $$ File outFile = new File(outs, myTestName + ".out")-->Line_23 $$ if (!outFile.exists()) [ FD ]
Line_14 $$ outFile = winOut-->Line_24 $$ FileUtil.writeToFile(outFile, actual)[ FD ]
Line_7 $$ File outs = new File(myAppPath + File.separator + "outs")-->Line_8 $$ assert outs.exists() || outs.mkdirs() : outs[ FD ]
Line_17 $$ final File unixOut = new File(outs, myTestName + ".unx.out")-->Line_18 $$ if (unixOut.exists()) [ FD ]
Line_27 $$ String originalText = FileUtilRt.loadFile(outFile, CharsetToolkit.UTF8)-->Line_28 $$ String expected = StringUtilRt.convertLineSeparators(originalText)[ FD ]
Line_2 $$ public void checkValid(Sdk jdk, boolean sortClassPath) throws Exception -->Line_9 $$ File outFile = new File(outs, myTestName + ".out")[ CD ]
Line_29 $$ if (!expected.equals(actual)) -->Line_33 $$ System.out.println(actual)[ CD ]
Line_6 $$ String actual = preprocessBuffer(jdk, buildOutputString(), sortClassPath)-->Line_41 $$ System.out.println("Rest from actual text is: \"" + actual.substring(len) + "\"")[ FD ]
Line_23 $$ if (!outFile.exists()) -->Line_29 $$ if (!expected.equals(actual)) [ CD ]
Line_9 $$ File outFile = new File(outs, myTestName + ".out")-->Line_19 $$ outFile = unixOut[ FD ]
Line_10 $$ if (!outFile.exists()) -->Line_11 $$ if (SystemInfo.isWindows) [ CD ]
Line_2 $$ public void checkValid(Sdk jdk, boolean sortClassPath) throws Exception -->Line_6 $$ String actual = preprocessBuffer(jdk, buildOutputString(), sortClassPath)[ FD ]
Line_6 $$ String actual = preprocessBuffer(jdk, buildOutputString(), sortClassPath)-->Line_33 $$ System.out.println(actual)[ FD ]
Line_6 $$ String actual = preprocessBuffer(jdk, buildOutputString(), sortClassPath)-->Line_34 $$ final int len = Math.min(expected.length(), actual.length())[ FD ]
Line_17 $$ final File unixOut = new File(outs, myTestName + ".unx.out")-->Line_19 $$ outFile = unixOut[ FD ]
Line_23 $$ if (!outFile.exists()) -->Line_25 $$ LOG.error("Test file created " + outFile.getPath() + "\n" + "**************** Don't forget to put it into VCS! *******************")[ CD ]
Line_2 $$ public void checkValid(Sdk jdk, boolean sortClassPath) throws Exception -->Line_3 $$ if (IdeaLogger.ourErrorsOccurred != null) [ CD ]
Line_34 $$ final int len = Math.min(expected.length(), actual.length())-->Line_40 $$ if (actual.length() > len) [ FD ]
Line_2 $$ public void checkValid(Sdk jdk, boolean sortClassPath) throws Exception -->Line_10 $$ if (!outFile.exists()) [ CD ]
Line_6 $$ String actual = preprocessBuffer(jdk, buildOutputString(), sortClassPath)-->Line_24 $$ FileUtil.writeToFile(outFile, actual)[ FD ]
Line_19 $$ outFile = unixOut-->Line_27 $$ String originalText = FileUtilRt.loadFile(outFile, CharsetToolkit.UTF8)[ FD ]
Line_29 $$ if (!expected.equals(actual)) -->Line_32 $$ System.out.println("actual:")[ CD ]
Line_9 $$ File outFile = new File(outs, myTestName + ".out")-->Line_10 $$ if (!outFile.exists()) [ FD ]
Line_23 $$ if (!outFile.exists()) -->Line_28 $$ String expected = StringUtilRt.convertLineSeparators(originalText)[ CD ]
Line_6 $$ String actual = preprocessBuffer(jdk, buildOutputString(), sortClassPath)-->Line_36 $$ System.out.println("Text sizes differ: expected " + expected.length() + " but actual: " + actual.length())[ FD ]
Line_27 $$ String originalText = FileUtilRt.loadFile(outFile, CharsetToolkit.UTF8)-->Line_43 $$ Assert.assertEquals(originalText, actual)[ FD ]
Line_18 $$ if (unixOut.exists()) -->Line_19 $$ outFile = unixOut[ CD ]
Line_27 $$ String originalText = FileUtilRt.loadFile(outFile, CharsetToolkit.UTF8)-->Line_31 $$ System.out.println(originalText)[ FD ]
Line_2 $$ public void checkValid(Sdk jdk, boolean sortClassPath) throws Exception -->Line_23 $$ if (!outFile.exists()) [ CD ]
Line_6 $$ String actual = preprocessBuffer(jdk, buildOutputString(), sortClassPath)-->Line_43 $$ Assert.assertEquals(originalText, actual)[ FD ]
Line_6 $$ String actual = preprocessBuffer(jdk, buildOutputString(), sortClassPath)-->Line_35 $$ if (expected.length() != actual.length()) [ FD ]
Line_14 $$ outFile = winOut-->Line_19 $$ outFile = unixOut[ FD ]
Line_11 $$ if (SystemInfo.isWindows) -->Line_13 $$ if (winOut.exists()) [ CD ]
Line_28 $$ String expected = StringUtilRt.convertLineSeparators(originalText)-->Line_39 $$ System.out.println("Rest from expected text is: \"" + expected.substring(len) + "\"")[ FD ]
Line_11 $$ if (SystemInfo.isWindows) -->Line_12 $$ final File winOut = new File(outs, myTestName + ".win.out")[ CD ]
Line_2 $$ public void checkValid(Sdk jdk, boolean sortClassPath) throws Exception -->Line_7 $$ File outs = new File(myAppPath + File.separator + "outs")[ CD ]
Line_34 $$ final int len = Math.min(expected.length(), actual.length())-->Line_39 $$ System.out.println("Rest from expected text is: \"" + expected.substring(len) + "\"")[ FD ]
Line_28 $$ String expected = StringUtilRt.convertLineSeparators(originalText)-->Line_38 $$ if (expected.length() > len) [ FD ]
Line_35 $$ if (expected.length() != actual.length()) -->Line_36 $$ System.out.println("Text sizes differ: expected " + expected.length() + " but actual: " + actual.length())[ CD ]
Line_29 $$ if (!expected.equals(actual)) -->Line_31 $$ System.out.println(originalText)[ CD ]
Line_2 $$ public void checkValid(Sdk jdk, boolean sortClassPath) throws Exception -->Line_6 $$ String actual = preprocessBuffer(jdk, buildOutputString(), sortClassPath)[ CD ]
Line_14 $$ outFile = winOut-->Line_25 $$ LOG.error("Test file created " + outFile.getPath() + "\n" + "**************** Don't forget to put it into VCS! *******************")[ FD ]
Line_19 $$ outFile = unixOut-->Line_23 $$ if (!outFile.exists()) [ FD ]
Line_28 $$ String expected = StringUtilRt.convertLineSeparators(originalText)-->Line_36 $$ System.out.println("Text sizes differ: expected " + expected.length() + " but actual: " + actual.length())[ FD ]
Line_38 $$ if (expected.length() > len) -->Line_40 $$ if (actual.length() > len) [ CD ]
Line_23 $$ if (!outFile.exists()) -->Line_27 $$ String originalText = FileUtilRt.loadFile(outFile, CharsetToolkit.UTF8)[ CD ]
Line_9 $$ File outFile = new File(outs, myTestName + ".out")-->Line_27 $$ String originalText = FileUtilRt.loadFile(outFile, CharsetToolkit.UTF8)[ FD ]
Line_29 $$ if (!expected.equals(actual)) -->Line_35 $$ if (expected.length() != actual.length()) [ CD ]
Line_14 $$ outFile = winOut-->Line_27 $$ String originalText = FileUtilRt.loadFile(outFile, CharsetToolkit.UTF8)[ FD ]
Line_28 $$ String expected = StringUtilRt.convertLineSeparators(originalText)-->Line_34 $$ final int len = Math.min(expected.length(), actual.length())[ FD ]
Line_19 $$ outFile = unixOut-->Line_24 $$ FileUtil.writeToFile(outFile, actual)[ FD ]
Line_6 $$ String actual = preprocessBuffer(jdk, buildOutputString(), sortClassPath)-->Line_29 $$ if (!expected.equals(actual)) [ FD ]
Line_34 $$ final int len = Math.min(expected.length(), actual.length())-->Line_41 $$ System.out.println("Rest from actual text is: \"" + actual.substring(len) + "\"")[ FD ]
Line_29 $$ if (!expected.equals(actual)) -->Line_34 $$ final int len = Math.min(expected.length(), actual.length())[ CD ]
Line_16 $$ if (SystemInfo.isUnix) -->Line_17 $$ final File unixOut = new File(outs, myTestName + ".unx.out")[ CD ]
Line_9 $$ File outFile = new File(outs, myTestName + ".out")-->Line_24 $$ FileUtil.writeToFile(outFile, actual)[ FD ]
Line_28 $$ String expected = StringUtilRt.convertLineSeparators(originalText)-->Line_35 $$ if (expected.length() != actual.length()) [ FD ]
Line_38 $$ if (expected.length() > len) -->Line_39 $$ System.out.println("Rest from expected text is: \"" + expected.substring(len) + "\"")[ CD ]
Line_16 $$ if (SystemInfo.isUnix) -->Line_18 $$ if (unixOut.exists()) [ CD ]
Line_23 $$ if (!outFile.exists()) -->Line_24 $$ FileUtil.writeToFile(outFile, actual)[ CD ]
Line_29 $$ if (!expected.equals(actual)) -->Line_30 $$ System.out.println("expected:")[ CD ]
Line_14 $$ outFile = winOut-->Line_23 $$ if (!outFile.exists()) [ FD ]
Line_13 $$ if (winOut.exists()) -->Line_14 $$ outFile = winOut[ CD ]
Line_6 $$ String actual = preprocessBuffer(jdk, buildOutputString(), sortClassPath)-->Line_40 $$ if (actual.length() > len) [ FD ]
