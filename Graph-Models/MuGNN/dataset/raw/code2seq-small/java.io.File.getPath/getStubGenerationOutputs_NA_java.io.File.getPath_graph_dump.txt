Line_6 $$ File targetRoot = new File(commonRoot, target.getModule().getName() + File.separator + target.getTargetType().getTypeId())-->Line_8 $$ throw new IOException("External make cannot clean " + targetRoot.getPath())[ FD ]
Line_5 $$ for (ModuleBuildTarget target : chunk.getTargets()) -->Line_6 $$ File targetRoot = new File(commonRoot, target.getModule().getName() + File.separator + target.getTargetType().getTypeId())[ FD ]
Line_6 $$ File targetRoot = new File(commonRoot, target.getModule().getName() + File.separator + target.getTargetType().getTypeId())-->Line_7 $$ if (targetRoot.exists() && !FileUtil.deleteWithRenaming(targetRoot)) [ FD ]
Line_6 $$ File targetRoot = new File(commonRoot, target.getModule().getName() + File.separator + target.getTargetType().getTypeId())-->Line_10 $$ if (!targetRoot.mkdirs()) [ FD ]
Line_6 $$ File targetRoot = new File(commonRoot, target.getModule().getName() + File.separator + target.getTargetType().getTypeId())-->Line_11 $$ throw new IOException("External make cannot create " + targetRoot.getPath())[ FD ]
Line_2 $$ private static Map<ModuleBuildTarget, String> getStubGenerationOutputs(ModuleChunk chunk, CompileContext context) throws IOException -->Line_5 $$ for (ModuleBuildTarget target : chunk.getTargets()) [ FD ]
Line_2 $$ private static Map<ModuleBuildTarget, String> getStubGenerationOutputs(ModuleChunk chunk, CompileContext context) throws IOException -->Line_15 $$ return generationOutputs[ CD ]
Line_2 $$ private static Map<ModuleBuildTarget, String> getStubGenerationOutputs(ModuleChunk chunk, CompileContext context) throws IOException -->Line_4 $$ File commonRoot = getStubRoot(context)[ CD ]
Line_3 $$ Map<ModuleBuildTarget, String> generationOutputs = new HashMap<ModuleBuildTarget, String>()-->Line_13 $$ generationOutputs.put(target, targetRoot.getPath())[ FD ]
Line_6 $$ File targetRoot = new File(commonRoot, target.getModule().getName() + File.separator + target.getTargetType().getTypeId())-->Line_13 $$ generationOutputs.put(target, targetRoot.getPath())[ FD ]
Line_2 $$ private static Map<ModuleBuildTarget, String> getStubGenerationOutputs(ModuleChunk chunk, CompileContext context) throws IOException -->Line_3 $$ Map<ModuleBuildTarget, String> generationOutputs = new HashMap<ModuleBuildTarget, String>()[ CD ]
Line_5 $$ for (ModuleBuildTarget target : chunk.getTargets()) -->Line_13 $$ generationOutputs.put(target, targetRoot.getPath())[ FD ]
Line_2 $$ private static Map<ModuleBuildTarget, String> getStubGenerationOutputs(ModuleChunk chunk, CompileContext context) throws IOException -->Line_4 $$ File commonRoot = getStubRoot(context)[ FD ]
