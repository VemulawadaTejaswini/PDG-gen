Line_7 $$ final HashMap<String, XSTypeDefinition> types = new HashMap<String, XSTypeDefinition>()-->Line_51 $$ Util.log(types.size() + " elements loaded, processing..")[ FD ]
Line_55 $$ XSTypeDefinition td = it.next()-->Line_60 $$ processEnumType(td, jtMap, nsdMap)[ FD ]
Line_29 $$ for (int i = 0; i < typeDefMap.getLength(); i++) -->Line_38 $$ for (int i = 0; i < elementDeclMap.getLength(); i++) [ FD ]
Line_6 $$ final ArrayList<XSModel> models = new ArrayList<XSModel>()-->Line_27 $$ models.add(model)[ FD ]
Line_8 $$ for (File schemaFile : schemas) -->Line_10 $$ if (schemaFile.isDirectory() || !fileName.endsWith(".xsd")) [ FD ]
Line_30 $$ XSTypeDefinition o = (XSTypeDefinition) typeDefMap.item(i)-->Line_64 $$ final String key = o.getName() + "," + o.getNamespace()[ FD ]
Line_63 $$ for (XSComplexTypeDefinition o : toAdd) -->Line_67 $$ types.put(key, o)[ FD ]
Line_7 $$ final HashMap<String, XSTypeDefinition> types = new HashMap<String, XSTypeDefinition>()-->Line_47 $$ types.put(key, ctd)[ FD ]
Line_18 $$ final StringList namespaceList = model.getNamespaces()-->Line_19 $$ for (int i = 0; i < namespaceList.getLength(); i++) [ FD ]
Line_63 $$ for (XSComplexTypeDefinition o : toAdd) -->Line_64 $$ final String key = o.getName() + "," + o.getNamespace()[ FD ]
Line_64 $$ final String key = o.getName() + "," + o.getNamespace()-->Line_67 $$ types.put(key, o)[ FD ]
Line_4 $$ Map<String, TypeDesc> jtMap = model.jtMap-->Line_60 $$ processEnumType(td, jtMap, nsdMap)[ FD ]
Line_65 $$ if (!types.containsKey(key)) -->Line_71 $$ Util.logwarn(key + " already exists")[ CD ]
Line_57 $$ if (checkComplexType(td)) -->Line_59 $$ if (checkEnumType(td)) [ CD ]
Line_29 $$ for (int i = 0; i < typeDefMap.getLength(); i++) -->Line_32 $$ if (nsd != null && nsd.skip)[ CD ]
Line_15 $$ final XSModel model = loadSchema(schemaFile, resolver)-->Line_28 $$ final XSNamedMap typeDefMap = model.getComponents(XSConstants.TYPE_DEFINITION)[ FD ]
Line_30 $$ XSTypeDefinition o = (XSTypeDefinition) typeDefMap.item(i)-->Line_40 $$ if (o.getTypeDefinition().getAnonymous() && (o.getTypeDefinition() instanceof XSComplexTypeDefinition)) [ FD ]
Line_39 $$ XSElementDeclaration o = (XSElementDeclaration) elementDeclMap.item(i)-->Line_67 $$ types.put(key, o)[ FD ]
Line_19 $$ for (int i = 0; i < namespaceList.getLength(); i++) -->Line_21 $$ if (!nsdMap.containsKey(ns)) [ CD ]
Line_7 $$ final HashMap<String, XSTypeDefinition> types = new HashMap<String, XSTypeDefinition>()-->Line_52 $$ ArrayList<XSTypeDefinition> toProcess = new ArrayList<XSTypeDefinition>(types.values())[ FD ]
Line_2 $$ public void processSchemas(Collection<File> schemas, XMLEntityResolver resolver) throws Exception -->Line_3 $$ Map<String, NamespaceDesc> nsdMap = model.nsdMap[ CD ]
Line_15 $$ final XSModel model = loadSchema(schemaFile, resolver)-->Line_37 $$ final XSNamedMap elementDeclMap = model.getComponents(XSConstants.ELEMENT_DECLARATION)[ FD ]
Line_34 $$ final String key = o.getName() + "," + o.getNamespace()-->Line_47 $$ types.put(key, ctd)[ FD ]
Line_37 $$ final XSNamedMap elementDeclMap = model.getComponents(XSConstants.ELEMENT_DECLARATION)-->Line_38 $$ for (int i = 0; i < elementDeclMap.getLength(); i++) [ FD ]
Line_64 $$ final String key = o.getName() + "," + o.getNamespace()-->Line_65 $$ if (!types.containsKey(key)) [ FD ]
Line_15 $$ final XSModel model = loadSchema(schemaFile, resolver)-->Line_27 $$ models.add(model)[ FD ]
Line_54 $$ for (ListIterator<XSTypeDefinition> it = toProcess.listIterator(); it.hasNext(); ) -->Line_56 $$ Util.log("processing " + td.getName() + "," + td.getNamespace() + "..")[ CD ]
Line_7 $$ final HashMap<String, XSTypeDefinition> types = new HashMap<String, XSTypeDefinition>()-->Line_65 $$ if (!types.containsKey(key)) [ FD ]
Line_21 $$ if (!nsdMap.containsKey(ns)) -->Line_24 $$ nsdMap.put(ns, nsd)[ CD ]
Line_54 $$ for (ListIterator<XSTypeDefinition> it = toProcess.listIterator(); it.hasNext(); ) -->Line_55 $$ XSTypeDefinition td = it.next()[ CD ]
Line_28 $$ final XSNamedMap typeDefMap = model.getComponents(XSConstants.TYPE_DEFINITION)-->Line_30 $$ XSTypeDefinition o = (XSTypeDefinition) typeDefMap.item(i)[ FD ]
Line_52 $$ ArrayList<XSTypeDefinition> toProcess = new ArrayList<XSTypeDefinition>(types.values())-->Line_54 $$ for (ListIterator<XSTypeDefinition> it = toProcess.listIterator(); it.hasNext(); ) [ FD ]
Line_46 $$ final String key = ctd.getName() + "," + ctd.getNamespace()-->Line_65 $$ if (!types.containsKey(key)) [ FD ]
Line_23 $$ NamespaceDesc nsd = new NamespaceDesc(ns, nsdDef)-->Line_24 $$ nsdMap.put(ns, nsd)[ FD ]
Line_29 $$ for (int i = 0; i < typeDefMap.getLength(); i++) -->Line_31 $$ NamespaceDesc nsd = nsdMap.get(o.getNamespace())[ CD ]
Line_37 $$ final XSNamedMap elementDeclMap = model.getComponents(XSConstants.ELEMENT_DECLARATION)-->Line_39 $$ XSElementDeclaration o = (XSElementDeclaration) elementDeclMap.item(i)[ FD ]
Line_46 $$ final String key = ctd.getName() + "," + ctd.getNamespace()-->Line_67 $$ types.put(key, o)[ FD ]
Line_65 $$ if (!types.containsKey(key)) -->Line_68 $$ it.add(o)[ CD ]
Line_65 $$ if (!types.containsKey(key)) -->Line_69 $$ it.previous()[ CD ]
Line_19 $$ for (int i = 0; i < namespaceList.getLength(); i++) -->Line_39 $$ XSElementDeclaration o = (XSElementDeclaration) elementDeclMap.item(i)[ FD ]
Line_6 $$ final ArrayList<XSModel> models = new ArrayList<XSModel>()-->Line_58 $$ processType((XSComplexTypeDefinition) td, models, jtMap, nsdMap, toAdd)[ FD ]
Line_40 $$ if (o.getTypeDefinition().getAnonymous() && (o.getTypeDefinition() instanceof XSComplexTypeDefinition)) -->Line_44 $$ if (nsd != null && nsd.skip)[ CD ]
Line_9 $$ String fileName = schemaFile.getPath()-->Line_10 $$ if (schemaFile.isDirectory() || !fileName.endsWith(".xsd")) [ FD ]
Line_2 $$ public void processSchemas(Collection<File> schemas, XMLEntityResolver resolver) throws Exception -->Line_7 $$ final HashMap<String, XSTypeDefinition> types = new HashMap<String, XSTypeDefinition>()[ CD ]
Line_29 $$ for (int i = 0; i < typeDefMap.getLength(); i++) -->Line_30 $$ XSTypeDefinition o = (XSTypeDefinition) typeDefMap.item(i)[ CD ]
Line_38 $$ for (int i = 0; i < elementDeclMap.getLength(); i++) -->Line_39 $$ XSElementDeclaration o = (XSElementDeclaration) elementDeclMap.item(i)[ FD ]
Line_65 $$ if (!types.containsKey(key)) -->Line_67 $$ types.put(key, o)[ CD ]
Line_65 $$ if (!types.containsKey(key)) -->Line_66 $$ Util.log("  adding " + o.getName() + "," + o.getNamespace())[ CD ]
Line_63 $$ for (XSComplexTypeDefinition o : toAdd) -->Line_68 $$ it.add(o)[ FD ]
Line_4 $$ Map<String, TypeDesc> jtMap = model.jtMap-->Line_58 $$ processType((XSComplexTypeDefinition) td, models, jtMap, nsdMap, toAdd)[ FD ]
Line_2 $$ public void processSchemas(Collection<File> schemas, XMLEntityResolver resolver) throws Exception -->Line_15 $$ final XSModel model = loadSchema(schemaFile, resolver)[ FD ]
Line_2 $$ public void processSchemas(Collection<File> schemas, XMLEntityResolver resolver) throws Exception -->Line_4 $$ Map<String, TypeDesc> jtMap = model.jtMap[ CD ]
Line_29 $$ for (int i = 0; i < typeDefMap.getLength(); i++) -->Line_39 $$ XSElementDeclaration o = (XSElementDeclaration) elementDeclMap.item(i)[ FD ]
Line_53 $$ ArrayList<XSComplexTypeDefinition> toAdd = new ArrayList<XSComplexTypeDefinition>()-->Line_62 $$ if (toAdd.size() != 0) [ FD ]
Line_53 $$ ArrayList<XSComplexTypeDefinition> toAdd = new ArrayList<XSComplexTypeDefinition>()-->Line_58 $$ processType((XSComplexTypeDefinition) td, models, jtMap, nsdMap, toAdd)[ FD ]
Line_39 $$ XSElementDeclaration o = (XSElementDeclaration) elementDeclMap.item(i)-->Line_43 $$ NamespaceDesc nsd = nsdMap.get(o.getNamespace())[ FD ]
Line_30 $$ XSTypeDefinition o = (XSTypeDefinition) typeDefMap.item(i)-->Line_66 $$ Util.log("  adding " + o.getName() + "," + o.getNamespace())[ FD ]
Line_30 $$ XSTypeDefinition o = (XSTypeDefinition) typeDefMap.item(i)-->Line_68 $$ it.add(o)[ FD ]
Line_2 $$ public void processSchemas(Collection<File> schemas, XMLEntityResolver resolver) throws Exception -->Line_54 $$ for (ListIterator<XSTypeDefinition> it = toProcess.listIterator(); it.hasNext(); ) [ CD ]
Line_46 $$ final String key = ctd.getName() + "," + ctd.getNamespace()-->Line_47 $$ types.put(key, ctd)[ FD ]
Line_63 $$ for (XSComplexTypeDefinition o : toAdd) -->Line_66 $$ Util.log("  adding " + o.getName() + "," + o.getNamespace())[ FD ]
Line_54 $$ for (ListIterator<XSTypeDefinition> it = toProcess.listIterator(); it.hasNext(); ) -->Line_62 $$ if (toAdd.size() != 0) [ CD ]
Line_39 $$ XSElementDeclaration o = (XSElementDeclaration) elementDeclMap.item(i)-->Line_40 $$ if (o.getTypeDefinition().getAnonymous() && (o.getTypeDefinition() instanceof XSComplexTypeDefinition)) [ FD ]
Line_40 $$ if (o.getTypeDefinition().getAnonymous() && (o.getTypeDefinition() instanceof XSComplexTypeDefinition)) -->Line_46 $$ final String key = ctd.getName() + "," + ctd.getNamespace()[ CD ]
Line_30 $$ XSTypeDefinition o = (XSTypeDefinition) typeDefMap.item(i)-->Line_67 $$ types.put(key, o)[ FD ]
Line_8 $$ for (File schemaFile : schemas) -->Line_9 $$ String fileName = schemaFile.getPath()[ FD ]
Line_7 $$ final HashMap<String, XSTypeDefinition> types = new HashMap<String, XSTypeDefinition>()-->Line_35 $$ types.put(key, o)[ FD ]
Line_3 $$ Map<String, NamespaceDesc> nsdMap = model.nsdMap-->Line_43 $$ NamespaceDesc nsd = nsdMap.get(o.getNamespace())[ FD ]
Line_3 $$ Map<String, NamespaceDesc> nsdMap = model.nsdMap-->Line_31 $$ NamespaceDesc nsd = nsdMap.get(o.getNamespace())[ FD ]
Line_62 $$ if (toAdd.size() != 0) -->Line_74 $$ toAdd.clear()[ CD ]
Line_38 $$ for (int i = 0; i < elementDeclMap.getLength(); i++) -->Line_39 $$ XSElementDeclaration o = (XSElementDeclaration) elementDeclMap.item(i)[ CD ]
Line_38 $$ for (int i = 0; i < elementDeclMap.getLength(); i++) -->Line_40 $$ if (o.getTypeDefinition().getAnonymous() && (o.getTypeDefinition() instanceof XSComplexTypeDefinition)) [ CD ]
Line_3 $$ Map<String, NamespaceDesc> nsdMap = model.nsdMap-->Line_60 $$ processEnumType(td, jtMap, nsdMap)[ FD ]
Line_3 $$ Map<String, NamespaceDesc> nsdMap = model.nsdMap-->Line_5 $$ final NamespaceDesc nsdDef = nsdMap.get("")[ FD ]
Line_3 $$ Map<String, NamespaceDesc> nsdMap = model.nsdMap-->Line_24 $$ nsdMap.put(ns, nsd)[ FD ]
Line_10 $$ if (schemaFile.isDirectory() || !fileName.endsWith(".xsd")) -->Line_11 $$ Util.log("skipping " + fileName)[ CD ]
Line_18 $$ final StringList namespaceList = model.getNamespaces()-->Line_20 $$ String ns = namespaceList.item(i)[ FD ]
Line_30 $$ XSTypeDefinition o = (XSTypeDefinition) typeDefMap.item(i)-->Line_43 $$ NamespaceDesc nsd = nsdMap.get(o.getNamespace())[ FD ]
Line_21 $$ if (!nsdMap.containsKey(ns)) -->Line_23 $$ NamespaceDesc nsd = new NamespaceDesc(ns, nsdDef)[ CD ]
Line_20 $$ String ns = namespaceList.item(i)-->Line_21 $$ if (!nsdMap.containsKey(ns)) [ FD ]
Line_39 $$ XSElementDeclaration o = (XSElementDeclaration) elementDeclMap.item(i)-->Line_66 $$ Util.log("  adding " + o.getName() + "," + o.getNamespace())[ FD ]
Line_19 $$ for (int i = 0; i < namespaceList.getLength(); i++) -->Line_30 $$ XSTypeDefinition o = (XSTypeDefinition) typeDefMap.item(i)[ FD ]
Line_29 $$ for (int i = 0; i < typeDefMap.getLength(); i++) -->Line_34 $$ final String key = o.getName() + "," + o.getNamespace()[ CD ]
Line_54 $$ for (ListIterator<XSTypeDefinition> it = toProcess.listIterator(); it.hasNext(); ) -->Line_55 $$ XSTypeDefinition td = it.next()[ FD ]
Line_39 $$ XSElementDeclaration o = (XSElementDeclaration) elementDeclMap.item(i)-->Line_64 $$ final String key = o.getName() + "," + o.getNamespace()[ FD ]
Line_7 $$ final HashMap<String, XSTypeDefinition> types = new HashMap<String, XSTypeDefinition>()-->Line_67 $$ types.put(key, o)[ FD ]
Line_20 $$ String ns = namespaceList.item(i)-->Line_24 $$ nsdMap.put(ns, nsd)[ FD ]
Line_19 $$ for (int i = 0; i < namespaceList.getLength(); i++) -->Line_38 $$ for (int i = 0; i < elementDeclMap.getLength(); i++) [ FD ]
Line_54 $$ for (ListIterator<XSTypeDefinition> it = toProcess.listIterator(); it.hasNext(); ) -->Line_69 $$ it.previous()[ FD ]
Line_3 $$ Map<String, NamespaceDesc> nsdMap = model.nsdMap-->Line_21 $$ if (!nsdMap.containsKey(ns)) [ FD ]
Line_2 $$ public void processSchemas(Collection<File> schemas, XMLEntityResolver resolver) throws Exception -->Line_5 $$ final NamespaceDesc nsdDef = nsdMap.get("")[ CD ]
Line_30 $$ XSTypeDefinition o = (XSTypeDefinition) typeDefMap.item(i)-->Line_35 $$ types.put(key, o)[ FD ]
Line_19 $$ for (int i = 0; i < namespaceList.getLength(); i++) -->Line_29 $$ for (int i = 0; i < typeDefMap.getLength(); i++) [ FD ]
Line_55 $$ XSTypeDefinition td = it.next()-->Line_56 $$ Util.log("processing " + td.getName() + "," + td.getNamespace() + "..")[ FD ]
Line_55 $$ XSTypeDefinition td = it.next()-->Line_57 $$ if (checkComplexType(td)) [ FD ]
Line_34 $$ final String key = o.getName() + "," + o.getNamespace()-->Line_67 $$ types.put(key, o)[ FD ]
Line_21 $$ if (!nsdMap.containsKey(ns)) -->Line_22 $$ Util.log("Adding default namespace desc for: " + ns)[ CD ]
Line_40 $$ if (o.getTypeDefinition().getAnonymous() && (o.getTypeDefinition() instanceof XSComplexTypeDefinition)) -->Line_47 $$ types.put(key, ctd)[ CD ]
Line_29 $$ for (int i = 0; i < typeDefMap.getLength(); i++) -->Line_35 $$ types.put(key, o)[ CD ]
Line_8 $$ for (File schemaFile : schemas) -->Line_15 $$ final XSModel model = loadSchema(schemaFile, resolver)[ FD ]
Line_3 $$ Map<String, NamespaceDesc> nsdMap = model.nsdMap-->Line_58 $$ processType((XSComplexTypeDefinition) td, models, jtMap, nsdMap, toAdd)[ FD ]
Line_55 $$ XSTypeDefinition td = it.next()-->Line_59 $$ if (checkEnumType(td)) [ FD ]
Line_59 $$ if (checkEnumType(td)) -->Line_60 $$ processEnumType(td, jtMap, nsdMap)[ CD ]
Line_15 $$ final XSModel model = loadSchema(schemaFile, resolver)-->Line_16 $$ if (model == null)[ FD ]
Line_30 $$ XSTypeDefinition o = (XSTypeDefinition) typeDefMap.item(i)-->Line_31 $$ NamespaceDesc nsd = nsdMap.get(o.getNamespace())[ FD ]
Line_2 $$ public void processSchemas(Collection<File> schemas, XMLEntityResolver resolver) throws Exception -->Line_52 $$ ArrayList<XSTypeDefinition> toProcess = new ArrayList<XSTypeDefinition>(types.values())[ CD ]
Line_54 $$ for (ListIterator<XSTypeDefinition> it = toProcess.listIterator(); it.hasNext(); ) -->Line_57 $$ if (checkComplexType(td)) [ CD ]
Line_54 $$ for (ListIterator<XSTypeDefinition> it = toProcess.listIterator(); it.hasNext(); ) -->Line_68 $$ it.add(o)[ FD ]
Line_2 $$ public void processSchemas(Collection<File> schemas, XMLEntityResolver resolver) throws Exception -->Line_51 $$ Util.log(types.size() + " elements loaded, processing..")[ CD ]
Line_19 $$ for (int i = 0; i < namespaceList.getLength(); i++) -->Line_20 $$ String ns = namespaceList.item(i)[ FD ]
Line_40 $$ if (o.getTypeDefinition().getAnonymous() && (o.getTypeDefinition() instanceof XSComplexTypeDefinition)) -->Line_43 $$ NamespaceDesc nsd = nsdMap.get(o.getNamespace())[ CD ]
Line_29 $$ for (int i = 0; i < typeDefMap.getLength(); i++) -->Line_30 $$ XSTypeDefinition o = (XSTypeDefinition) typeDefMap.item(i)[ FD ]
Line_15 $$ final XSModel model = loadSchema(schemaFile, resolver)-->Line_18 $$ final StringList namespaceList = model.getNamespaces()[ FD ]
Line_39 $$ XSElementDeclaration o = (XSElementDeclaration) elementDeclMap.item(i)-->Line_68 $$ it.add(o)[ FD ]
Line_28 $$ final XSNamedMap typeDefMap = model.getComponents(XSConstants.TYPE_DEFINITION)-->Line_29 $$ for (int i = 0; i < typeDefMap.getLength(); i++) [ FD ]
Line_2 $$ public void processSchemas(Collection<File> schemas, XMLEntityResolver resolver) throws Exception -->Line_6 $$ final ArrayList<XSModel> models = new ArrayList<XSModel>()[ CD ]
Line_2 $$ public void processSchemas(Collection<File> schemas, XMLEntityResolver resolver) throws Exception -->Line_53 $$ ArrayList<XSComplexTypeDefinition> toAdd = new ArrayList<XSComplexTypeDefinition>()[ CD ]
Line_34 $$ final String key = o.getName() + "," + o.getNamespace()-->Line_65 $$ if (!types.containsKey(key)) [ FD ]
Line_30 $$ XSTypeDefinition o = (XSTypeDefinition) typeDefMap.item(i)-->Line_34 $$ final String key = o.getName() + "," + o.getNamespace()[ FD ]
Line_57 $$ if (checkComplexType(td)) -->Line_58 $$ processType((XSComplexTypeDefinition) td, models, jtMap, nsdMap, toAdd)[ CD ]
Line_19 $$ for (int i = 0; i < namespaceList.getLength(); i++) -->Line_20 $$ String ns = namespaceList.item(i)[ CD ]
Line_53 $$ ArrayList<XSComplexTypeDefinition> toAdd = new ArrayList<XSComplexTypeDefinition>()-->Line_74 $$ toAdd.clear()[ FD ]
Line_34 $$ final String key = o.getName() + "," + o.getNamespace()-->Line_35 $$ types.put(key, o)[ FD ]
