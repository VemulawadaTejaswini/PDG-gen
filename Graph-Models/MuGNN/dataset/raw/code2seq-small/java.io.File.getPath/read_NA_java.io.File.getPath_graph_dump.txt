Line_8 $$ Ini ini = new Ini()-->Line_10 $$ ini.getConfig().setTree(false)[ FD ]
Line_2 $$ static GitConfig read(@NotNull GitPlatformFacade platformFacade, @NotNull File configFile) -->Line_14 $$ LOG.warn("Couldn't load .git/config file at " + configFile.getPath(), e)[ FD ]
Line_2 $$ static GitConfig read(@NotNull GitPlatformFacade platformFacade, @NotNull File configFile) -->Line_4 $$ if (!configFile.exists()) [ CD ]
Line_2 $$ static GitConfig read(@NotNull GitPlatformFacade platformFacade, @NotNull File configFile) -->Line_9 $$ ini.getConfig().setMultiOption(true)[ CD ]
Line_2 $$ static GitConfig read(@NotNull GitPlatformFacade platformFacade, @NotNull File configFile) -->Line_12 $$ ini.load(configFile)[ FD ]
Line_8 $$ Ini ini = new Ini()-->Line_12 $$ ini.load(configFile)[ FD ]
Line_2 $$ static GitConfig read(@NotNull GitPlatformFacade platformFacade, @NotNull File configFile) -->Line_3 $$ GitConfig emptyConfig = new GitConfig(Collections.<Remote>emptyList(), Collections.<Url>emptyList(), Collections.<BranchConfig>emptyList())[ CD ]
Line_2 $$ static GitConfig read(@NotNull GitPlatformFacade platformFacade, @NotNull File configFile) -->Line_20 $$ Pair<Collection<Remote>, Collection<Url>> remotesAndUrls = parseRemotes(ini, classLoader)[ CD ]
Line_2 $$ static GitConfig read(@NotNull GitPlatformFacade platformFacade, @NotNull File configFile) -->Line_5 $$ LOG.info("No .git/config file at " + configFile.getPath())[ FD ]
Line_2 $$ static GitConfig read(@NotNull GitPlatformFacade platformFacade, @NotNull File configFile) -->Line_4 $$ if (!configFile.exists()) [ FD ]
Line_18 $$ ClassLoader classLoader = plugin == null ? GitConfig.class.getClassLoader() : plugin.getPluginClassLoader()-->Line_20 $$ Pair<Collection<Remote>, Collection<Url>> remotesAndUrls = parseRemotes(ini, classLoader)[ FD ]
Line_8 $$ Ini ini = new Ini()-->Line_20 $$ Pair<Collection<Remote>, Collection<Url>> remotesAndUrls = parseRemotes(ini, classLoader)[ FD ]
Line_2 $$ static GitConfig read(@NotNull GitPlatformFacade platformFacade, @NotNull File configFile) -->Line_18 $$ ClassLoader classLoader = plugin == null ? GitConfig.class.getClassLoader() : plugin.getPluginClassLoader()[ CD ]
Line_2 $$ static GitConfig read(@NotNull GitPlatformFacade platformFacade, @NotNull File configFile) -->Line_10 $$ ini.getConfig().setTree(false)[ CD ]
Line_2 $$ static GitConfig read(@NotNull GitPlatformFacade platformFacade, @NotNull File configFile) -->Line_17 $$ IdeaPluginDescriptor plugin = platformFacade.getPluginByClassName(GitConfig.class.getName())[ CD ]
Line_4 $$ if (!configFile.exists()) -->Line_6 $$ return emptyConfig[ CD ]
Line_2 $$ static GitConfig read(@NotNull GitPlatformFacade platformFacade, @NotNull File configFile) -->Line_21 $$ Collection<BranchConfig> trackedInfos = parseTrackedInfos(ini, classLoader)[ CD ]
Line_8 $$ Ini ini = new Ini()-->Line_21 $$ Collection<BranchConfig> trackedInfos = parseTrackedInfos(ini, classLoader)[ FD ]
Line_18 $$ ClassLoader classLoader = plugin == null ? GitConfig.class.getClassLoader() : plugin.getPluginClassLoader()-->Line_21 $$ Collection<BranchConfig> trackedInfos = parseTrackedInfos(ini, classLoader)[ FD ]
Line_2 $$ static GitConfig read(@NotNull GitPlatformFacade platformFacade, @NotNull File configFile) -->Line_8 $$ Ini ini = new Ini()[ CD ]
Line_4 $$ if (!configFile.exists()) -->Line_5 $$ LOG.info("No .git/config file at " + configFile.getPath())[ CD ]
Line_2 $$ static GitConfig read(@NotNull GitPlatformFacade platformFacade, @NotNull File configFile) -->Line_22 $$ return new GitConfig(remotesAndUrls.getFirst(), remotesAndUrls.getSecond(), trackedInfos)[ CD ]
Line_2 $$ static GitConfig read(@NotNull GitPlatformFacade platformFacade, @NotNull File configFile) -->Line_17 $$ IdeaPluginDescriptor plugin = platformFacade.getPluginByClassName(GitConfig.class.getName())[ FD ]
Line_20 $$ Pair<Collection<Remote>, Collection<Url>> remotesAndUrls = parseRemotes(ini, classLoader)-->Line_22 $$ return new GitConfig(remotesAndUrls.getFirst(), remotesAndUrls.getSecond(), trackedInfos)[ FD ]
Line_8 $$ Ini ini = new Ini()-->Line_9 $$ ini.getConfig().setMultiOption(true)[ FD ]
Line_17 $$ IdeaPluginDescriptor plugin = platformFacade.getPluginByClassName(GitConfig.class.getName())-->Line_18 $$ ClassLoader classLoader = plugin == null ? GitConfig.class.getClassLoader() : plugin.getPluginClassLoader()[ FD ]
