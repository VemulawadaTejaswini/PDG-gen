Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_23 $$ if (!ioParent.isDirectory()) [ CD ]
Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_26 $$ File ioTarget = new File(ioParent, copyName)[ CD ]
Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_19 $$ if (attributes.isSpecial()) [ CD ]
Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_6 $$ if (!file.exists()) [ CD ]
Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_15 $$ FileAttributes attributes = getAttributes(file)[ CD ]
Line_15 $$ FileAttributes attributes = getAttributes(file)-->Line_19 $$ if (attributes.isSpecial()) [ FD ]
Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_22 $$ File ioParent = convertToIOFile(newParent)[ CD ]
Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_30 $$ if (!auxCopy(file, newParent, copyName)) [ FD ]
Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_32 $$ File ioFile = convertToIOFile(file)[ FD ]
Line_39 $$ auxNotifyCompleted(new ThrowableConsumer<LocalFileOperationsHandler, IOException>() -->Line_41 $$ handler.copy(file, newParent, copyName)[ FD ]
Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_3 $$ if (!VirtualFile.isValidName(copyName)) [ FD ]
Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_27 $$ if (ioTarget.exists()) [ CD ]
Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_44 $$ return new FakeVirtualFile(newParent, copyName)[ CD ]
Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_13 $$ throw new IOException(VfsBundle.message("vfs.target.already.exists.error", newParent.getPath() + "/" + copyName))[ FD ]
Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_15 $$ FileAttributes attributes = getAttributes(file)[ FD ]
Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_12 $$ if (newParent.findChild(copyName) != null) [ FD ]
Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_9 $$ if (!newParent.exists() || !newParent.isDirectory()) [ FD ]
Line_32 $$ File ioFile = convertToIOFile(file)-->Line_33 $$ FileUtil.copyFileOrDir(ioFile, ioTarget, attributes.isDirectory())[ FD ]
Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_7 $$ throw new IOException(VfsBundle.message("vfs.file.not.exist.error", file.getPath()))[ FD ]
Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_12 $$ if (newParent.findChild(copyName) != null) [ CD ]
Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_30 $$ if (!auxCopy(file, newParent, copyName)) [ CD ]
Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_39 $$ auxNotifyCompleted(new ThrowableConsumer<LocalFileOperationsHandler, IOException>() [ CD ]
Line_22 $$ File ioParent = convertToIOFile(newParent)-->Line_24 $$ throw new IOException(VfsBundle.message("target.not.directory.error", ioParent.getPath()))[ FD ]
Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_3 $$ if (!VirtualFile.isValidName(copyName)) [ CD ]
Line_26 $$ File ioTarget = new File(ioParent, copyName)-->Line_27 $$ if (ioTarget.exists()) [ FD ]
Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_17 $$ throw new FileNotFoundException(VfsBundle.message("file.not.exist.error", file.getPath()))[ FD ]
Line_39 $$ auxNotifyCompleted(new ThrowableConsumer<LocalFileOperationsHandler, IOException>() -->Line_41 $$ handler.copy(file, newParent, copyName)[ CD ]
Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_22 $$ File ioParent = convertToIOFile(newParent)[ FD ]
Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_6 $$ if (!file.exists()) [ FD ]
Line_26 $$ File ioTarget = new File(ioParent, copyName)-->Line_33 $$ FileUtil.copyFileOrDir(ioFile, ioTarget, attributes.isDirectory())[ FD ]
Line_15 $$ FileAttributes attributes = getAttributes(file)-->Line_16 $$ if (attributes == null) [ FD ]
Line_22 $$ File ioParent = convertToIOFile(newParent)-->Line_23 $$ if (!ioParent.isDirectory()) [ FD ]
Line_15 $$ FileAttributes attributes = getAttributes(file)-->Line_33 $$ FileUtil.copyFileOrDir(ioFile, ioTarget, attributes.isDirectory())[ FD ]
Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_4 $$ throw new IOException(VfsBundle.message("file.invalid.name.error", copyName))[ FD ]
Line_26 $$ File ioTarget = new File(ioParent, copyName)-->Line_28 $$ throw new IOException(VfsBundle.message("target.already.exists.error", ioTarget.getPath()))[ FD ]
Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_41 $$ handler.copy(file, newParent, copyName)[ FD ]
Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_10 $$ throw new IOException(VfsBundle.message("vfs.target.not.directory.error", newParent.getPath()))[ FD ]
Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_9 $$ if (!newParent.exists() || !newParent.isDirectory()) [ CD ]
Line_2 $$ public VirtualFile copyFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent, @NotNull final String copyName) throws IOException -->Line_16 $$ if (attributes == null) [ CD ]
Line_26 $$ File ioTarget = new File(ioParent, copyName)-->Line_35 $$ FileUtil.delete(ioTarget)[ FD ]
