Line_8 $$ final VirtualFile vf1 = lfs.refreshAndFindFileByIoFile(sourceFile)-->Line_38 $$ final FileAnnotation annotation = createTestAnnotation(myVcs.getAnnotationProvider(), vf1)[ FD ]
Line_20 $$ final File sourceDir = new File(myWorkingCopyDir.getPath(), "source")-->Line_60 $$ imitateEvent(lfs.refreshAndFindFileByIoFile(sourceDir))[ FD ]
Line_29 $$ final SvnDiffProvider diffProvider = (SvnDiffProvider) myVcs.getDiffProvider()-->Line_35 $$ assertRevision(vf2, diffProvider, 4)[ FD ]
Line_8 $$ final VirtualFile vf1 = lfs.refreshAndFindFileByIoFile(sourceFile)-->Line_16 $$ final Change change1 = myChangeListManager.getChange(vf1)[ FD ]
Line_29 $$ final SvnDiffProvider diffProvider = (SvnDiffProvider) myVcs.getDiffProvider()-->Line_69 $$ assertRevision(vf2, diffProvider, 5)[ FD ]
Line_7 $$ final LocalFileSystem lfs = LocalFileSystem.getInstance()-->Line_60 $$ imitateEvent(lfs.refreshAndFindFileByIoFile(sourceDir))[ FD ]
Line_9 $$ final VirtualFile vf2 = lfs.refreshAndFindFileByIoFile(externalFile)-->Line_17 $$ final Change change2 = myChangeListManager.getChange(vf2)[ FD ]
Line_39 $$ annotation.setCloser(new Runnable() -->Line_44 $$ listener.unregisterAnnotation(vf1, annotation)[ CD ]
Line_29 $$ final SvnDiffProvider diffProvider = (SvnDiffProvider) myVcs.getDiffProvider()-->Line_31 $$ assertRevision(vf2, diffProvider, 5)[ FD ]
Line_21 $$ final File externalDir = new File(myWorkingCopyDir.getPath(), "source/external")-->Line_33 $$ runInAndVerifyIgnoreOutput("up", "-r", "4", externalDir.getPath())[ FD ]
Line_20 $$ final File sourceDir = new File(myWorkingCopyDir.getPath(), "source")-->Line_32 $$ runInAndVerifyIgnoreOutput("up", "-r", "4", sourceDir.getPath())[ FD ]
Line_8 $$ final VirtualFile vf1 = lfs.refreshAndFindFileByIoFile(sourceFile)-->Line_34 $$ assertRevision(vf1, diffProvider, 3)[ FD ]
Line_8 $$ final VirtualFile vf1 = lfs.refreshAndFindFileByIoFile(sourceFile)-->Line_47 $$ listener.registerAnnotation(vf1, annotation)[ FD ]
Line_29 $$ final SvnDiffProvider diffProvider = (SvnDiffProvider) myVcs.getDiffProvider()-->Line_34 $$ assertRevision(vf1, diffProvider, 3)[ FD ]
Line_8 $$ final VirtualFile vf1 = lfs.refreshAndFindFileByIoFile(sourceFile)-->Line_10 $$ Assert.assertNotNull(vf1)[ FD ]
Line_8 $$ final VirtualFile vf1 = lfs.refreshAndFindFileByIoFile(sourceFile)-->Line_12 $$ VcsTestUtil.editFileInCommand(myProject, vf1, "test externals 123" + System.currentTimeMillis())[ FD ]
Line_17 $$ final Change change2 = myChangeListManager.getChange(vf2)-->Line_19 $$ Assert.assertNotNull(change2)[ FD ]
Line_8 $$ final VirtualFile vf1 = lfs.refreshAndFindFileByIoFile(sourceFile)-->Line_57 $$ listener.registerAnnotation(vf1, annotation1)[ FD ]
Line_7 $$ final LocalFileSystem lfs = LocalFileSystem.getInstance()-->Line_9 $$ final VirtualFile vf2 = lfs.refreshAndFindFileByIoFile(externalFile)[ FD ]
Line_29 $$ final SvnDiffProvider diffProvider = (SvnDiffProvider) myVcs.getDiffProvider()-->Line_30 $$ assertRevision(vf1, diffProvider, 3)[ FD ]
Line_9 $$ final VirtualFile vf2 = lfs.refreshAndFindFileByIoFile(externalFile)-->Line_11 $$ Assert.assertNotNull(vf2)[ FD ]
Line_8 $$ final VirtualFile vf1 = lfs.refreshAndFindFileByIoFile(sourceFile)-->Line_30 $$ assertRevision(vf1, diffProvider, 3)[ FD ]
Line_38 $$ final FileAnnotation annotation = createTestAnnotation(myVcs.getAnnotationProvider(), vf1)-->Line_39 $$ annotation.setCloser(new Runnable() [ FD ]
Line_49 $$ annotation1.setCloser(new Runnable() -->Line_54 $$ listener.unregisterAnnotation(vf1, annotation1)[ CD ]
Line_6 $$ final File externalFile = new File(myWorkingCopyDir.getPath(), "source" + File.separator + "external" + File.separator + "t12.txt")-->Line_9 $$ final VirtualFile vf2 = lfs.refreshAndFindFileByIoFile(externalFile)[ FD ]
Line_9 $$ final VirtualFile vf2 = lfs.refreshAndFindFileByIoFile(externalFile)-->Line_48 $$ final FileAnnotation annotation1 = createTestAnnotation(myVcs.getAnnotationProvider(), vf2)[ FD ]
Line_9 $$ final VirtualFile vf2 = lfs.refreshAndFindFileByIoFile(externalFile)-->Line_69 $$ assertRevision(vf2, diffProvider, 5)[ FD ]
Line_7 $$ final LocalFileSystem lfs = LocalFileSystem.getInstance()-->Line_8 $$ final VirtualFile vf1 = lfs.refreshAndFindFileByIoFile(sourceFile)[ FD ]
Line_38 $$ final FileAnnotation annotation = createTestAnnotation(myVcs.getAnnotationProvider(), vf1)-->Line_44 $$ listener.unregisterAnnotation(vf1, annotation)[ FD ]
Line_8 $$ final VirtualFile vf1 = lfs.refreshAndFindFileByIoFile(sourceFile)-->Line_44 $$ listener.unregisterAnnotation(vf1, annotation)[ FD ]
Line_16 $$ final Change change1 = myChangeListManager.getChange(vf1)-->Line_18 $$ Assert.assertNotNull(change1)[ FD ]
Line_38 $$ final FileAnnotation annotation = createTestAnnotation(myVcs.getAnnotationProvider(), vf1)-->Line_47 $$ listener.registerAnnotation(vf1, annotation)[ FD ]
Line_9 $$ final VirtualFile vf2 = lfs.refreshAndFindFileByIoFile(externalFile)-->Line_31 $$ assertRevision(vf2, diffProvider, 5)[ FD ]
Line_9 $$ final VirtualFile vf2 = lfs.refreshAndFindFileByIoFile(externalFile)-->Line_35 $$ assertRevision(vf2, diffProvider, 4)[ FD ]
Line_7 $$ final LocalFileSystem lfs = LocalFileSystem.getInstance()-->Line_61 $$ imitateEvent(lfs.refreshAndFindFileByIoFile(externalDir))[ FD ]
Line_21 $$ final File externalDir = new File(myWorkingCopyDir.getPath(), "source/external")-->Line_61 $$ imitateEvent(lfs.refreshAndFindFileByIoFile(externalDir))[ FD ]
Line_9 $$ final VirtualFile vf2 = lfs.refreshAndFindFileByIoFile(externalFile)-->Line_13 $$ VcsTestUtil.editFileInCommand(myProject, vf2, "test externals 123" + System.currentTimeMillis())[ FD ]
Line_8 $$ final VirtualFile vf1 = lfs.refreshAndFindFileByIoFile(sourceFile)-->Line_54 $$ listener.unregisterAnnotation(vf1, annotation1)[ FD ]
Line_9 $$ final VirtualFile vf2 = lfs.refreshAndFindFileByIoFile(externalFile)-->Line_26 $$ VcsTestUtil.editFileInCommand(myProject, vf2, "test externals 12344444" + System.currentTimeMillis())[ FD ]
Line_5 $$ final File sourceFile = new File(myWorkingCopyDir.getPath(), "source" + File.separator + "s1.txt")-->Line_8 $$ final VirtualFile vf1 = lfs.refreshAndFindFileByIoFile(sourceFile)[ FD ]
