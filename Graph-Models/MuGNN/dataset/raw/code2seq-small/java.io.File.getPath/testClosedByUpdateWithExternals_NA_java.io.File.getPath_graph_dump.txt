Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_6 $$ final LocalFileSystem lfs = LocalFileSystem.getInstance()[ CD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_22 $$ runInAndVerifyIgnoreOutput("ci", "-m", "test", externalDir.getPath())[ CD ]
Line_33 $$ final FileAnnotation annotation = createTestAnnotation(myVcs.getAnnotationProvider(), vf1)-->Line_34 $$ annotation.setCloser(new Runnable() [ FD ]
Line_33 $$ final FileAnnotation annotation = createTestAnnotation(myVcs.getAnnotationProvider(), vf1)-->Line_37 $$ listener.unregisterAnnotation(vf1, annotation)[ FD ]
Line_7 $$ final VirtualFile vf1 = lfs.refreshAndFindFileByIoFile(sourceFile)-->Line_37 $$ listener.unregisterAnnotation(vf1, annotation)[ FD ]
Line_6 $$ final LocalFileSystem lfs = LocalFileSystem.getInstance()-->Line_7 $$ final VirtualFile vf1 = lfs.refreshAndFindFileByIoFile(sourceFile)[ FD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_32 $$ final VcsAnnotationLocalChangesListener listener = ProjectLevelVcsManager.getInstance(myProject).getAnnotationLocalChangesListener()[ CD ]
Line_25 $$ final SvnDiffProvider diffProvider = (SvnDiffProvider) myVcs.getDiffProvider()-->Line_26 $$ assertRevision(vf1, diffProvider, 3)[ FD ]
Line_34 $$ annotation.setCloser(new Runnable() -->Line_37 $$ listener.unregisterAnnotation(vf1, annotation)[ CD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_57 $$ Assert.assertTrue(myIsClosed1)[ CD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_11 $$ VcsTestUtil.editFileInCommand(myProject, vf1, "test externals 123" + System.currentTimeMillis())[ CD ]
Line_19 $$ final File sourceDir = new File(myWorkingCopyDir.getPath(), "source")-->Line_49 $$ runInAndVerifyIgnoreOutput("up", sourceDir.getPath())[ FD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_52 $$ myChangeListManager.ensureUpToDate(false)[ CD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_50 $$ imitateEvent(lfs.refreshAndFindFileByIoFile(sourceDir))[ CD ]
Line_42 $$ annotation1.setCloser(new Runnable() -->Line_45 $$ listener.unregisterAnnotation(vf1, annotation1)[ CD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_19 $$ final File sourceDir = new File(myWorkingCopyDir.getPath(), "source")[ CD ]
Line_32 $$ final VcsAnnotationLocalChangesListener listener = ProjectLevelVcsManager.getInstance(myProject).getAnnotationLocalChangesListener()-->Line_48 $$ listener.registerAnnotation(vf1, annotation1)[ FD ]
Line_7 $$ final VirtualFile vf1 = lfs.refreshAndFindFileByIoFile(sourceFile)-->Line_48 $$ listener.registerAnnotation(vf1, annotation1)[ FD ]
Line_19 $$ final File sourceDir = new File(myWorkingCopyDir.getPath(), "source")-->Line_50 $$ imitateEvent(lfs.refreshAndFindFileByIoFile(sourceDir))[ FD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_28 $$ runInAndVerifyIgnoreOutput("up", "-r", "4", sourceDir.getPath())[ CD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_30 $$ assertRevision(vf1, diffProvider, 3)[ CD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_5 $$ final File externalFile = new File(myWorkingCopyDir.getPath(), "source" + File.separator + "external" + File.separator + "t12.txt")[ CD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_16 $$ final Change change2 = myChangeListManager.getChange(vf2)[ CD ]
Line_7 $$ final VirtualFile vf1 = lfs.refreshAndFindFileByIoFile(sourceFile)-->Line_40 $$ listener.registerAnnotation(vf1, annotation)[ FD ]
Line_6 $$ final LocalFileSystem lfs = LocalFileSystem.getInstance()-->Line_50 $$ imitateEvent(lfs.refreshAndFindFileByIoFile(sourceDir))[ FD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_3 $$ prepareExternal()[ CD ]
Line_20 $$ final File externalDir = new File(myWorkingCopyDir.getPath(), "source/external")-->Line_29 $$ runInAndVerifyIgnoreOutput("up", "-r", "4", externalDir.getPath())[ FD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_34 $$ annotation.setCloser(new Runnable() [ CD ]
Line_7 $$ final VirtualFile vf1 = lfs.refreshAndFindFileByIoFile(sourceFile)-->Line_26 $$ assertRevision(vf1, diffProvider, 3)[ FD ]
Line_7 $$ final VirtualFile vf1 = lfs.refreshAndFindFileByIoFile(sourceFile)-->Line_9 $$ Assert.assertNotNull(vf1)[ FD ]
Line_25 $$ final SvnDiffProvider diffProvider = (SvnDiffProvider) myVcs.getDiffProvider()-->Line_56 $$ assertRevision(vf2, diffProvider, 5)[ FD ]
Line_7 $$ final VirtualFile vf1 = lfs.refreshAndFindFileByIoFile(sourceFile)-->Line_15 $$ final Change change1 = myChangeListManager.getChange(vf1)[ FD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_33 $$ final FileAnnotation annotation = createTestAnnotation(myVcs.getAnnotationProvider(), vf1)[ CD ]
Line_6 $$ final LocalFileSystem lfs = LocalFileSystem.getInstance()-->Line_8 $$ final VirtualFile vf2 = lfs.refreshAndFindFileByIoFile(externalFile)[ FD ]
Line_15 $$ final Change change1 = myChangeListManager.getChange(vf1)-->Line_17 $$ Assert.assertNotNull(change1)[ FD ]
Line_8 $$ final VirtualFile vf2 = lfs.refreshAndFindFileByIoFile(externalFile)-->Line_27 $$ assertRevision(vf2, diffProvider, 5)[ FD ]
Line_20 $$ final File externalDir = new File(myWorkingCopyDir.getPath(), "source/external")-->Line_22 $$ runInAndVerifyIgnoreOutput("ci", "-m", "test", externalDir.getPath())[ FD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_18 $$ Assert.assertNotNull(change2)[ CD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_56 $$ assertRevision(vf2, diffProvider, 5)[ CD ]
Line_7 $$ final VirtualFile vf1 = lfs.refreshAndFindFileByIoFile(sourceFile)-->Line_45 $$ listener.unregisterAnnotation(vf1, annotation1)[ FD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_48 $$ listener.registerAnnotation(vf1, annotation1)[ CD ]
Line_5 $$ final File externalFile = new File(myWorkingCopyDir.getPath(), "source" + File.separator + "external" + File.separator + "t12.txt")-->Line_8 $$ final VirtualFile vf2 = lfs.refreshAndFindFileByIoFile(externalFile)[ FD ]
Line_6 $$ final LocalFileSystem lfs = LocalFileSystem.getInstance()-->Line_51 $$ imitateEvent(lfs.refreshAndFindFileByIoFile(externalDir))[ FD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_24 $$ runInAndVerifyIgnoreOutput("ci", "-m", "test", externalDir.getPath())[ CD ]
Line_7 $$ final VirtualFile vf1 = lfs.refreshAndFindFileByIoFile(sourceFile)-->Line_55 $$ assertRevision(vf1, diffProvider, 3)[ FD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_54 $$ sleep(100)[ CD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_41 $$ final FileAnnotation annotation1 = createTestAnnotation(myVcs.getAnnotationProvider(), vf2)[ CD ]
Line_32 $$ final VcsAnnotationLocalChangesListener listener = ProjectLevelVcsManager.getInstance(myProject).getAnnotationLocalChangesListener()-->Line_40 $$ listener.registerAnnotation(vf1, annotation)[ FD ]
Line_8 $$ final VirtualFile vf2 = lfs.refreshAndFindFileByIoFile(externalFile)-->Line_41 $$ final FileAnnotation annotation1 = createTestAnnotation(myVcs.getAnnotationProvider(), vf2)[ FD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_25 $$ final SvnDiffProvider diffProvider = (SvnDiffProvider) myVcs.getDiffProvider()[ CD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_10 $$ Assert.assertNotNull(vf2)[ CD ]
Line_25 $$ final SvnDiffProvider diffProvider = (SvnDiffProvider) myVcs.getDiffProvider()-->Line_55 $$ assertRevision(vf1, diffProvider, 3)[ FD ]
Line_25 $$ final SvnDiffProvider diffProvider = (SvnDiffProvider) myVcs.getDiffProvider()-->Line_30 $$ assertRevision(vf1, diffProvider, 3)[ FD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_12 $$ VcsTestUtil.editFileInCommand(myProject, vf2, "test externals 123" + System.currentTimeMillis())[ CD ]
Line_8 $$ final VirtualFile vf2 = lfs.refreshAndFindFileByIoFile(externalFile)-->Line_31 $$ assertRevision(vf2, diffProvider, 4)[ FD ]
Line_32 $$ final VcsAnnotationLocalChangesListener listener = ProjectLevelVcsManager.getInstance(myProject).getAnnotationLocalChangesListener()-->Line_37 $$ listener.unregisterAnnotation(vf1, annotation)[ FD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_17 $$ Assert.assertNotNull(change1)[ CD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_40 $$ listener.registerAnnotation(vf1, annotation)[ CD ]
Line_20 $$ final File externalDir = new File(myWorkingCopyDir.getPath(), "source/external")-->Line_51 $$ imitateEvent(lfs.refreshAndFindFileByIoFile(externalDir))[ FD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_26 $$ assertRevision(vf1, diffProvider, 3)[ CD ]
Line_8 $$ final VirtualFile vf2 = lfs.refreshAndFindFileByIoFile(externalFile)-->Line_12 $$ VcsTestUtil.editFileInCommand(myProject, vf2, "test externals 123" + System.currentTimeMillis())[ FD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_21 $$ runInAndVerifyIgnoreOutput("ci", "-m", "test", sourceDir.getPath())[ CD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_13 $$ VcsDirtyScopeManager.getInstance(myProject).markEverythingDirty()[ CD ]
Line_7 $$ final VirtualFile vf1 = lfs.refreshAndFindFileByIoFile(sourceFile)-->Line_11 $$ VcsTestUtil.editFileInCommand(myProject, vf1, "test externals 123" + System.currentTimeMillis())[ FD ]
Line_20 $$ final File externalDir = new File(myWorkingCopyDir.getPath(), "source/external")-->Line_24 $$ runInAndVerifyIgnoreOutput("ci", "-m", "test", externalDir.getPath())[ FD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_58 $$ Assert.assertFalse(myIsClosed)[ CD ]
Line_7 $$ final VirtualFile vf1 = lfs.refreshAndFindFileByIoFile(sourceFile)-->Line_30 $$ assertRevision(vf1, diffProvider, 3)[ FD ]
Line_8 $$ final VirtualFile vf2 = lfs.refreshAndFindFileByIoFile(externalFile)-->Line_23 $$ VcsTestUtil.editFileInCommand(myProject, vf2, "test externals 12344444" + System.currentTimeMillis())[ FD ]
Line_32 $$ final VcsAnnotationLocalChangesListener listener = ProjectLevelVcsManager.getInstance(myProject).getAnnotationLocalChangesListener()-->Line_45 $$ listener.unregisterAnnotation(vf1, annotation1)[ FD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_51 $$ imitateEvent(lfs.refreshAndFindFileByIoFile(externalDir))[ CD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_42 $$ annotation1.setCloser(new Runnable() [ CD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_14 $$ myChangeListManager.ensureUpToDate(false)[ CD ]
Line_8 $$ final VirtualFile vf2 = lfs.refreshAndFindFileByIoFile(externalFile)-->Line_56 $$ assertRevision(vf2, diffProvider, 5)[ FD ]
Line_19 $$ final File sourceDir = new File(myWorkingCopyDir.getPath(), "source")-->Line_21 $$ runInAndVerifyIgnoreOutput("ci", "-m", "test", sourceDir.getPath())[ FD ]
Line_33 $$ final FileAnnotation annotation = createTestAnnotation(myVcs.getAnnotationProvider(), vf1)-->Line_40 $$ listener.registerAnnotation(vf1, annotation)[ FD ]
Line_16 $$ final Change change2 = myChangeListManager.getChange(vf2)-->Line_18 $$ Assert.assertNotNull(change2)[ FD ]
Line_8 $$ final VirtualFile vf2 = lfs.refreshAndFindFileByIoFile(externalFile)-->Line_10 $$ Assert.assertNotNull(vf2)[ FD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_8 $$ final VirtualFile vf2 = lfs.refreshAndFindFileByIoFile(externalFile)[ CD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_4 $$ final File sourceFile = new File(myWorkingCopyDir.getPath(), "source" + File.separator + "s1.txt")[ CD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_53 $$ myChangeListManager.ensureUpToDate(false)[ CD ]
Line_4 $$ final File sourceFile = new File(myWorkingCopyDir.getPath(), "source" + File.separator + "s1.txt")-->Line_7 $$ final VirtualFile vf1 = lfs.refreshAndFindFileByIoFile(sourceFile)[ FD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_15 $$ final Change change1 = myChangeListManager.getChange(vf1)[ CD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_55 $$ assertRevision(vf1, diffProvider, 3)[ CD ]
Line_25 $$ final SvnDiffProvider diffProvider = (SvnDiffProvider) myVcs.getDiffProvider()-->Line_31 $$ assertRevision(vf2, diffProvider, 4)[ FD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_49 $$ runInAndVerifyIgnoreOutput("up", sourceDir.getPath())[ CD ]
Line_19 $$ final File sourceDir = new File(myWorkingCopyDir.getPath(), "source")-->Line_28 $$ runInAndVerifyIgnoreOutput("up", "-r", "4", sourceDir.getPath())[ FD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_27 $$ assertRevision(vf2, diffProvider, 5)[ CD ]
Line_25 $$ final SvnDiffProvider diffProvider = (SvnDiffProvider) myVcs.getDiffProvider()-->Line_27 $$ assertRevision(vf2, diffProvider, 5)[ FD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_20 $$ final File externalDir = new File(myWorkingCopyDir.getPath(), "source/external")[ CD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_31 $$ assertRevision(vf2, diffProvider, 4)[ CD ]
Line_8 $$ final VirtualFile vf2 = lfs.refreshAndFindFileByIoFile(externalFile)-->Line_16 $$ final Change change2 = myChangeListManager.getChange(vf2)[ FD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_29 $$ runInAndVerifyIgnoreOutput("up", "-r", "4", externalDir.getPath())[ CD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_7 $$ final VirtualFile vf1 = lfs.refreshAndFindFileByIoFile(sourceFile)[ CD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_9 $$ Assert.assertNotNull(vf1)[ CD ]
Line_2 $$ public void testClosedByUpdateWithExternals() throws Exception -->Line_23 $$ VcsTestUtil.editFileInCommand(myProject, vf2, "test externals 12344444" + System.currentTimeMillis())[ CD ]
Line_7 $$ final VirtualFile vf1 = lfs.refreshAndFindFileByIoFile(sourceFile)-->Line_33 $$ final FileAnnotation annotation = createTestAnnotation(myVcs.getAnnotationProvider(), vf1)[ FD ]
