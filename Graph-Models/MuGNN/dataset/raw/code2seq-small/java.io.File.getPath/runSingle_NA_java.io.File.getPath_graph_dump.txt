Line_21 $$ if (!conflicts.exists()) -->Line_22 $$ fail("Conflict file " + conflicts.getPath() + " not found")[ CD ]
Line_2 $$ public void runSingle() throws Throwable -->Line_37 $$ if (throwables[0] != null) [ CD ]
Line_2 $$ public void runSingle() throws Throwable -->Line_4 $$ final Runnable runnable = () -> [ CD ]
Line_17 $$ if (!conflictShouldBeFound) -->Line_20 $$ final File conflicts = new File(testDir, FileUtilRt.getNameWithoutExtension(myFileSuffix) + CONFLICTS_SUFFIX)[ CD ]
Line_17 $$ if (!conflictShouldBeFound) -->Line_18 $$ fail("Conflict not expected")[ CD ]
Line_2 $$ public void runSingle() throws Throwable -->Line_36 $$ invokeTestRunnable(() -> CommandProcessor.getInstance().executeCommand(getProject(), runnable::<>run, "", null))[ CD ]
Line_17 $$ if (!conflictShouldBeFound) -->Line_26 $$ assertEquals(LoadTextUtil.loadText(conflictsFile).toString(), exception.getMessage())[ CD ]
Line_29 $$ if (!conflictShouldBeFound) -->Line_30 $$ checkResultByFile(getAfterFile(myFileSuffix))[ CD ]
Line_2 $$ public void runSingle() throws Throwable -->Line_3 $$ final Throwable[] throwables = new Throwable[1][ CD ]
Line_10 $$ final boolean conflictShouldBeFound = !new File(testDir, afterName).exists()-->Line_17 $$ if (!conflictShouldBeFound) [ FD ]
Line_20 $$ final File conflicts = new File(testDir, FileUtilRt.getNameWithoutExtension(myFileSuffix) + CONFLICTS_SUFFIX)-->Line_24 $$ final VirtualFile conflictsFile = VfsUtil.findFileByIoFile(conflicts, false)[ FD ]
Line_6 $$ final String filePath = getBeforeFile(myFileSuffix)-->Line_7 $$ configureByFile(filePath)[ FD ]
Line_13 $$ if (conflictShouldBeFound) -->Line_14 $$ fail("Conflict expected.")[ CD ]
Line_24 $$ final VirtualFile conflictsFile = VfsUtil.findFileByIoFile(conflicts, false)-->Line_25 $$ assertNotNull(conflictsFile)[ FD ]
Line_10 $$ final boolean conflictShouldBeFound = !new File(testDir, afterName).exists()-->Line_29 $$ if (!conflictShouldBeFound) [ FD ]
Line_20 $$ final File conflicts = new File(testDir, FileUtilRt.getNameWithoutExtension(myFileSuffix) + CONFLICTS_SUFFIX)-->Line_22 $$ fail("Conflict file " + conflicts.getPath() + " not found")[ FD ]
Line_17 $$ if (!conflictShouldBeFound) -->Line_24 $$ final VirtualFile conflictsFile = VfsUtil.findFileByIoFile(conflicts, false)[ CD ]
Line_24 $$ final VirtualFile conflictsFile = VfsUtil.findFileByIoFile(conflicts, false)-->Line_26 $$ assertEquals(LoadTextUtil.loadText(conflictsFile).toString(), exception.getMessage())[ FD ]
Line_17 $$ if (!conflictShouldBeFound) -->Line_25 $$ assertNotNull(conflictsFile)[ CD ]
Line_20 $$ final File conflicts = new File(testDir, FileUtilRt.getNameWithoutExtension(myFileSuffix) + CONFLICTS_SUFFIX)-->Line_21 $$ if (!conflicts.exists()) [ FD ]
Line_17 $$ if (!conflictShouldBeFound) -->Line_21 $$ if (!conflicts.exists()) [ CD ]
