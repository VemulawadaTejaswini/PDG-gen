Line_7 $$ if (exportFormat == ExportTestResultsConfiguration.ExportFormat.Xml) -->Line_24 $$ handler = transformerFactory.newTransformerHandler(xslSource)[ CD ]
Line_8 $$ handler = transformerFactory.newTransformerHandler()-->Line_10 $$ handler.getTransformer().setOutputProperty("[ FD ]
Line_7 $$ if (exportFormat == ExportTestResultsConfiguration.ExportFormat.Xml) -->Line_9 $$ handler.getTransformer().setOutputProperty(OutputKeys.INDENT, "yes")[ CD ]
Line_8 $$ handler = transformerFactory.newTransformerHandler()-->Line_25 $$ handler.getTransformer().setParameter("TITLE", ExecutionBundle.message("export.test.results.filename", myRunConfiguration.getName(), myRunConfiguration.getType().getDisplayName()))[ FD ]
Line_24 $$ handler = transformerFactory.newTransformerHandler(xslSource)-->Line_30 $$ TestResultsXmlFormatter.execute(myModel.getRoot(), myRunConfiguration, myModel.getProperties(), handler)[ FD ]
Line_5 $$ SAXTransformerFactory transformerFactory = (SAXTransformerFactory) SAXTransformerFactory.newInstance()-->Line_8 $$ handler = transformerFactory.newTransformerHandler()[ FD ]
Line_7 $$ if (exportFormat == ExportTestResultsConfiguration.ExportFormat.Xml) -->Line_12 $$ Source xslSource[ CD ]
Line_6 $$ TransformerHandler handler-->Line_30 $$ TestResultsXmlFormatter.execute(myModel.getRoot(), myRunConfiguration, myModel.getProperties(), handler)[ FD ]
Line_13 $$ if (config.getExportFormat() == ExportTestResultsConfiguration.ExportFormat.BundledTemplate) -->Line_22 $$ xslSource = new StreamSource(xslFile)[ CD ]
Line_13 $$ if (config.getExportFormat() == ExportTestResultsConfiguration.ExportFormat.BundledTemplate) -->Line_14 $$ URL bundledXsltUrl = getClass().getResource("intellij-export.xsl")[ CD ]
Line_18 $$ if (!xslFile.isFile()) -->Line_20 $$ return null[ CD ]
Line_15 $$ xslSource = new StreamSource(URLUtil.openStream(bundledXsltUrl))-->Line_22 $$ xslSource = new StreamSource(xslFile)[ FD ]
Line_6 $$ TransformerHandler handler-->Line_9 $$ handler.getTransformer().setOutputProperty(OutputKeys.INDENT, "yes")[ FD ]
Line_13 $$ if (config.getExportFormat() == ExportTestResultsConfiguration.ExportFormat.BundledTemplate) -->Line_17 $$ File xslFile = new File(config.getUserTemplatePath())[ CD ]
Line_17 $$ File xslFile = new File(config.getUserTemplatePath())-->Line_19 $$ showBalloon(myRunConfiguration.getProject(), MessageType.ERROR, ExecutionBundle.message("export.test.results.custom.template.not.found", xslFile.getPath()), null)[ FD ]
Line_8 $$ handler = transformerFactory.newTransformerHandler()-->Line_24 $$ handler = transformerFactory.newTransformerHandler(xslSource)[ FD ]
Line_15 $$ xslSource = new StreamSource(URLUtil.openStream(bundledXsltUrl))-->Line_24 $$ handler = transformerFactory.newTransformerHandler(xslSource)[ FD ]
Line_6 $$ TransformerHandler handler-->Line_10 $$ handler.getTransformer().setOutputProperty("[ FD ]
Line_6 $$ TransformerHandler handler-->Line_25 $$ handler.getTransformer().setParameter("TITLE", ExecutionBundle.message("export.test.results.filename", myRunConfiguration.getName(), myRunConfiguration.getType().getDisplayName()))[ FD ]
Line_14 $$ URL bundledXsltUrl = getClass().getResource("intellij-export.xsl")-->Line_15 $$ xslSource = new StreamSource(URLUtil.openStream(bundledXsltUrl))[ FD ]
Line_12 $$ Source xslSource-->Line_24 $$ handler = transformerFactory.newTransformerHandler(xslSource)[ FD ]
Line_7 $$ if (exportFormat == ExportTestResultsConfiguration.ExportFormat.Xml) -->Line_13 $$ if (config.getExportFormat() == ExportTestResultsConfiguration.ExportFormat.BundledTemplate) [ CD ]
Line_6 $$ TransformerHandler handler-->Line_8 $$ handler = transformerFactory.newTransformerHandler()[ FD ]
Line_24 $$ handler = transformerFactory.newTransformerHandler(xslSource)-->Line_28 $$ handler.setResult(new StreamResult(w))[ FD ]
Line_4 $$ ExportTestResultsConfiguration.ExportFormat exportFormat = config.getExportFormat()-->Line_7 $$ if (exportFormat == ExportTestResultsConfiguration.ExportFormat.Xml) [ FD ]
Line_22 $$ xslSource = new StreamSource(xslFile)-->Line_24 $$ handler = transformerFactory.newTransformerHandler(xslSource)[ FD ]
Line_13 $$ if (config.getExportFormat() == ExportTestResultsConfiguration.ExportFormat.BundledTemplate) -->Line_15 $$ xslSource = new StreamSource(URLUtil.openStream(bundledXsltUrl))[ CD ]
Line_17 $$ File xslFile = new File(config.getUserTemplatePath())-->Line_18 $$ if (!xslFile.isFile()) [ FD ]
Line_27 $$ StringWriter w = new StringWriter()-->Line_34 $$ return w.toString()[ FD ]
Line_13 $$ if (config.getExportFormat() == ExportTestResultsConfiguration.ExportFormat.BundledTemplate) -->Line_18 $$ if (!xslFile.isFile()) [ CD ]
Line_18 $$ if (!xslFile.isFile()) -->Line_19 $$ showBalloon(myRunConfiguration.getProject(), MessageType.ERROR, ExecutionBundle.message("export.test.results.custom.template.not.found", xslFile.getPath()), null)[ CD ]
Line_6 $$ TransformerHandler handler-->Line_24 $$ handler = transformerFactory.newTransformerHandler(xslSource)[ FD ]
Line_7 $$ if (exportFormat == ExportTestResultsConfiguration.ExportFormat.Xml) -->Line_8 $$ handler = transformerFactory.newTransformerHandler()[ CD ]
Line_12 $$ Source xslSource-->Line_15 $$ xslSource = new StreamSource(URLUtil.openStream(bundledXsltUrl))[ FD ]
Line_12 $$ Source xslSource-->Line_22 $$ xslSource = new StreamSource(xslFile)[ FD ]
Line_7 $$ if (exportFormat == ExportTestResultsConfiguration.ExportFormat.Xml) -->Line_10 $$ handler.getTransformer().setOutputProperty("[ CD ]
Line_6 $$ TransformerHandler handler-->Line_28 $$ handler.setResult(new StreamResult(w))[ FD ]
Line_8 $$ handler = transformerFactory.newTransformerHandler()-->Line_30 $$ TestResultsXmlFormatter.execute(myModel.getRoot(), myRunConfiguration, myModel.getProperties(), handler)[ FD ]
Line_7 $$ if (exportFormat == ExportTestResultsConfiguration.ExportFormat.Xml) -->Line_25 $$ handler.getTransformer().setParameter("TITLE", ExecutionBundle.message("export.test.results.filename", myRunConfiguration.getName(), myRunConfiguration.getType().getDisplayName()))[ CD ]
Line_8 $$ handler = transformerFactory.newTransformerHandler()-->Line_28 $$ handler.setResult(new StreamResult(w))[ FD ]
Line_24 $$ handler = transformerFactory.newTransformerHandler(xslSource)-->Line_25 $$ handler.getTransformer().setParameter("TITLE", ExecutionBundle.message("export.test.results.filename", myRunConfiguration.getName(), myRunConfiguration.getType().getDisplayName()))[ FD ]
Line_8 $$ handler = transformerFactory.newTransformerHandler()-->Line_9 $$ handler.getTransformer().setOutputProperty(OutputKeys.INDENT, "yes")[ FD ]
Line_5 $$ SAXTransformerFactory transformerFactory = (SAXTransformerFactory) SAXTransformerFactory.newInstance()-->Line_24 $$ handler = transformerFactory.newTransformerHandler(xslSource)[ FD ]
