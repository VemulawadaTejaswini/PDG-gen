Line_2 $$ private void buildPackageCache(final File dir, ClasspathCache.LoaderData loaderData) -->Line_19 $$ buildPackageCache(file, loaderData)[ FD ]
Line_11 $$ if (isClass) -->Line_16 $$ loaderData.addNameEntry(file.getName())[ CD ]
Line_2 $$ private void buildPackageCache(final File dir, ClasspathCache.LoaderData loaderData) -->Line_5 $$ if (files == null) [ CD ]
Line_8 $$ boolean containsClasses = false-->Line_14 $$ containsClasses = true[ FD ]
Line_9 $$ for (File file : files) -->Line_19 $$ buildPackageCache(file, loaderData)[ FD ]
Line_2 $$ private void buildPackageCache(final File dir, ClasspathCache.LoaderData loaderData) -->Line_3 $$ loaderData.addResourceEntry(getRelativeResourcePath(dir))[ CD ]
Line_12 $$ if (!containsClasses) -->Line_13 $$ loaderData.addResourceEntry(getRelativeResourcePath(file))[ CD ]
Line_4 $$ final File[] files = dir.listFiles()-->Line_5 $$ if (files == null) [ FD ]
Line_9 $$ for (File file : files) -->Line_10 $$ final boolean isClass = file.getPath().endsWith(UrlClassLoader.CLASS_EXTENSION)[ FD ]
Line_9 $$ for (File file : files) -->Line_16 $$ loaderData.addNameEntry(file.getName())[ FD ]
Line_2 $$ private void buildPackageCache(final File dir, ClasspathCache.LoaderData loaderData) -->Line_4 $$ final File[] files = dir.listFiles()[ CD ]
Line_2 $$ private void buildPackageCache(final File dir, ClasspathCache.LoaderData loaderData) -->Line_4 $$ final File[] files = dir.listFiles()[ FD ]
Line_5 $$ if (files == null) -->Line_6 $$ return[ CD ]
Line_2 $$ private void buildPackageCache(final File dir, ClasspathCache.LoaderData loaderData) -->Line_13 $$ loaderData.addResourceEntry(getRelativeResourcePath(file))[ FD ]
Line_9 $$ for (File file : files) -->Line_18 $$ loaderData.addNameEntry(file.getName())[ FD ]
Line_2 $$ private void buildPackageCache(final File dir, ClasspathCache.LoaderData loaderData) -->Line_8 $$ boolean containsClasses = false[ CD ]
Line_11 $$ if (isClass) -->Line_19 $$ buildPackageCache(file, loaderData)[ CD ]
Line_9 $$ for (File file : files) -->Line_13 $$ loaderData.addResourceEntry(getRelativeResourcePath(file))[ FD ]
Line_11 $$ if (isClass) -->Line_18 $$ loaderData.addNameEntry(file.getName())[ CD ]
Line_2 $$ private void buildPackageCache(final File dir, ClasspathCache.LoaderData loaderData) -->Line_16 $$ loaderData.addNameEntry(file.getName())[ FD ]
Line_11 $$ if (isClass) -->Line_12 $$ if (!containsClasses) [ CD ]
Line_2 $$ private void buildPackageCache(final File dir, ClasspathCache.LoaderData loaderData) -->Line_3 $$ loaderData.addResourceEntry(getRelativeResourcePath(dir))[ FD ]
Line_12 $$ if (!containsClasses) -->Line_14 $$ containsClasses = true[ CD ]
Line_8 $$ boolean containsClasses = false-->Line_12 $$ if (!containsClasses) [ FD ]
Line_2 $$ private void buildPackageCache(final File dir, ClasspathCache.LoaderData loaderData) -->Line_18 $$ loaderData.addNameEntry(file.getName())[ FD ]
