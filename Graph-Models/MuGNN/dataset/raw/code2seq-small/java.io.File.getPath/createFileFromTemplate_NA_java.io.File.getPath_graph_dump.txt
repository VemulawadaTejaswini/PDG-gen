Line_13 $$ if (existingFile != null && !forceNew) -->Line_14 $$ return existingFile[ CD ]
Line_6 $$ VirtualFile existingFile = fileSystem.refreshAndFindFileByIoFile(file)-->Line_9 $$ if (!existingFile.isValid()) [ FD ]
Line_18 $$ final VirtualFile childData-->Line_28 $$ VfsUtil.saveText(childData, text)[ FD ]
Line_6 $$ VirtualFile existingFile = fileSystem.refreshAndFindFileByIoFile(file)-->Line_7 $$ if (existingFile != null) [ FD ]
Line_10 $$ existingFile = null-->Line_19 $$ if (existingFile == null || existingFile.isDirectory()) [ FD ]
Line_32 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_36 $$ Messages.showErrorDialog(IdeBundle.message("message.text.error.creating.deployment.descriptor", e.getLocalizedMessage()), IdeBundle.message("message.text.creating.deployment.descriptor"))[ CD ]
Line_18 $$ final VirtualFile childData-->Line_26 $$ childData = existingFile[ FD ]
Line_20 $$ final VirtualFile virtualFile-->Line_24 $$ childData = virtualFile.createChildData(this, file.getName())[ FD ]
Line_5 $$ final File file = new File(VfsUtilCore.urlToPath(url))-->Line_24 $$ childData = virtualFile.createChildData(this, file.getName())[ FD ]
Line_9 $$ if (!existingFile.isValid()) -->Line_10 $$ existingFile = null[ CD ]
Line_24 $$ childData = virtualFile.createChildData(this, file.getName())-->Line_28 $$ VfsUtil.saveText(childData, text)[ FD ]
Line_19 $$ if (existingFile == null || existingFile.isDirectory()) -->Line_26 $$ childData = existingFile[ CD ]
Line_24 $$ childData = virtualFile.createChildData(this, file.getName())-->Line_26 $$ childData = existingFile[ FD ]
Line_10 $$ existingFile = null-->Line_26 $$ childData = existingFile[ FD ]
Line_19 $$ if (existingFile == null || existingFile.isDirectory()) -->Line_21 $$ if (!FileUtil.createParentDirs(file) || (virtualFile = fileSystem.refreshAndFindFileByIoFile(file.getParentFile())) == null) [ CD ]
Line_21 $$ if (!FileUtil.createParentDirs(file) || (virtualFile = fileSystem.refreshAndFindFileByIoFile(file.getParentFile())) == null) -->Line_24 $$ childData = virtualFile.createChildData(this, file.getName())[ FD ]
Line_7 $$ if (existingFile != null) -->Line_8 $$ existingFile.refresh(false, false)[ CD ]
Line_17 $$ String text = getText(templateName, project)-->Line_28 $$ VfsUtil.saveText(childData, text)[ FD ]
Line_5 $$ final File file = new File(VfsUtilCore.urlToPath(url))-->Line_21 $$ if (!FileUtil.createParentDirs(file) || (virtualFile = fileSystem.refreshAndFindFileByIoFile(file.getParentFile())) == null) [ FD ]
Line_6 $$ VirtualFile existingFile = fileSystem.refreshAndFindFileByIoFile(file)-->Line_8 $$ existingFile.refresh(false, false)[ FD ]
Line_6 $$ VirtualFile existingFile = fileSystem.refreshAndFindFileByIoFile(file)-->Line_19 $$ if (existingFile == null || existingFile.isDirectory()) [ FD ]
Line_20 $$ final VirtualFile virtualFile-->Line_21 $$ if (!FileUtil.createParentDirs(file) || (virtualFile = fileSystem.refreshAndFindFileByIoFile(file.getParentFile())) == null) [ FD ]
Line_5 $$ final File file = new File(VfsUtilCore.urlToPath(url))-->Line_22 $$ throw new IOException(IdeBundle.message("error.message.unable.to.create.file", file.getPath()))[ FD ]
Line_26 $$ childData = existingFile-->Line_28 $$ VfsUtil.saveText(childData, text)[ FD ]
Line_18 $$ final VirtualFile childData-->Line_24 $$ childData = virtualFile.createChildData(this, file.getName())[ FD ]
Line_4 $$ final LocalFileSystem fileSystem = LocalFileSystem.getInstance()-->Line_21 $$ if (!FileUtil.createParentDirs(file) || (virtualFile = fileSystem.refreshAndFindFileByIoFile(file.getParentFile())) == null) [ FD ]
Line_19 $$ if (existingFile == null || existingFile.isDirectory()) -->Line_24 $$ childData = virtualFile.createChildData(this, file.getName())[ CD ]
Line_5 $$ final File file = new File(VfsUtilCore.urlToPath(url))-->Line_6 $$ VirtualFile existingFile = fileSystem.refreshAndFindFileByIoFile(file)[ FD ]
Line_6 $$ VirtualFile existingFile = fileSystem.refreshAndFindFileByIoFile(file)-->Line_26 $$ childData = existingFile[ FD ]
Line_4 $$ final LocalFileSystem fileSystem = LocalFileSystem.getInstance()-->Line_6 $$ VirtualFile existingFile = fileSystem.refreshAndFindFileByIoFile(file)[ FD ]
Line_7 $$ if (existingFile != null) -->Line_9 $$ if (!existingFile.isValid()) [ CD ]
Line_6 $$ VirtualFile existingFile = fileSystem.refreshAndFindFileByIoFile(file)-->Line_10 $$ existingFile = null[ FD ]
Line_19 $$ if (existingFile == null || existingFile.isDirectory()) -->Line_20 $$ final VirtualFile virtualFile[ CD ]
