Line_2 $$ public void printDaemonStarted(PrintStream target, Long pid, String uid, Address address, File daemonLog) -->Line_9 $$ encoder.writeString(uid)[ FD ]
Line_7 $$ FlushableEncoder encoder = new OutputStreamBackedEncoder(outputStream)-->Line_15 $$ encoder.writeSmallInt(multiChoiceAddress.getCandidates().size())[ FD ]
Line_7 $$ FlushableEncoder encoder = new OutputStreamBackedEncoder(outputStream)-->Line_9 $$ encoder.writeString(uid)[ FD ]
Line_10 $$ MultiChoiceAddress multiChoiceAddress = (MultiChoiceAddress) address-->Line_16 $$ for (InetAddress inetAddress : multiChoiceAddress.getCandidates()) [ FD ]
Line_2 $$ public void printDaemonStarted(PrintStream target, Long pid, String uid, Address address, File daemonLog) -->Line_19 $$ encoder.writeString(daemonLog.getPath())[ FD ]
Line_2 $$ public void printDaemonStarted(PrintStream target, Long pid, String uid, Address address, File daemonLog) -->Line_3 $$ target.print(daemonGreeting())[ CD ]
Line_10 $$ MultiChoiceAddress multiChoiceAddress = (MultiChoiceAddress) address-->Line_14 $$ encoder.writeInt(multiChoiceAddress.getPort())[ FD ]
Line_7 $$ FlushableEncoder encoder = new OutputStreamBackedEncoder(outputStream)-->Line_20 $$ encoder.flush()[ FD ]
Line_11 $$ UUID canonicalAddress = (UUID) multiChoiceAddress.getCanonicalAddress()-->Line_13 $$ encoder.writeLong(canonicalAddress.getLeastSignificantBits())[ FD ]
Line_7 $$ FlushableEncoder encoder = new OutputStreamBackedEncoder(outputStream)-->Line_17 $$ encoder.writeBinary(inetAddress.getAddress())[ FD ]
Line_10 $$ MultiChoiceAddress multiChoiceAddress = (MultiChoiceAddress) address-->Line_11 $$ UUID canonicalAddress = (UUID) multiChoiceAddress.getCanonicalAddress()[ FD ]
Line_2 $$ public void printDaemonStarted(PrintStream target, Long pid, String uid, Address address, File daemonLog) -->Line_3 $$ target.print(daemonGreeting())[ FD ]
Line_2 $$ public void printDaemonStarted(PrintStream target, Long pid, String uid, Address address, File daemonLog) -->Line_24 $$ target.println()[ FD ]
Line_10 $$ MultiChoiceAddress multiChoiceAddress = (MultiChoiceAddress) address-->Line_15 $$ encoder.writeSmallInt(multiChoiceAddress.getCandidates().size())[ FD ]
Line_7 $$ FlushableEncoder encoder = new OutputStreamBackedEncoder(outputStream)-->Line_8 $$ encoder.writeNullableString(pid == null ? null : pid.toString())[ FD ]
Line_2 $$ public void printDaemonStarted(PrintStream target, Long pid, String uid, Address address, File daemonLog) -->Line_8 $$ encoder.writeNullableString(pid == null ? null : pid.toString())[ FD ]
Line_11 $$ UUID canonicalAddress = (UUID) multiChoiceAddress.getCanonicalAddress()-->Line_12 $$ encoder.writeLong(canonicalAddress.getMostSignificantBits())[ FD ]
Line_7 $$ FlushableEncoder encoder = new OutputStreamBackedEncoder(outputStream)-->Line_14 $$ encoder.writeInt(multiChoiceAddress.getPort())[ FD ]
Line_7 $$ FlushableEncoder encoder = new OutputStreamBackedEncoder(outputStream)-->Line_19 $$ encoder.writeString(daemonLog.getPath())[ FD ]
Line_7 $$ FlushableEncoder encoder = new OutputStreamBackedEncoder(outputStream)-->Line_12 $$ encoder.writeLong(canonicalAddress.getMostSignificantBits())[ FD ]
Line_16 $$ for (InetAddress inetAddress : multiChoiceAddress.getCandidates()) -->Line_17 $$ encoder.writeBinary(inetAddress.getAddress())[ FD ]
Line_2 $$ public void printDaemonStarted(PrintStream target, Long pid, String uid, Address address, File daemonLog) -->Line_24 $$ target.println()[ CD ]
Line_7 $$ FlushableEncoder encoder = new OutputStreamBackedEncoder(outputStream)-->Line_13 $$ encoder.writeLong(canonicalAddress.getLeastSignificantBits())[ FD ]
