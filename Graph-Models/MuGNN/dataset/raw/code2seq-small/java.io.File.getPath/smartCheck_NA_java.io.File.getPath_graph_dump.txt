Line_13 $$ EduDocumentListener listener = new EduDocumentListener(windowTaskFile)-->Line_14 $$ windowDocument.addDocumentListener(listener)[ FD ]
Line_2 $$ public static void smartCheck(@NotNull final AnswerPlaceholder placeholder, @NotNull final Project project, @NotNull final VirtualFile answerFile, @NotNull final TaskFile answerTaskFile, @NotNull final TaskFile usersTaskFile, @NotNull final StudyTestRunner testRunner, @NotNull final VirtualFile virtualFile, @NotNull final Document usersDocument) -->Line_20 $$ String text = usersDocument.getText(new TextRange(userStart, userEnd))[ FD ]
Line_8 $$ final Document windowDocument = documentManager.getDocument(windowCopy)-->Line_26 $$ documentManager.saveDocument(windowDocument)[ FD ]
Line_10 $$ final File resourceFile = StudyUtils.copyResourceFile(virtualFile.getName(), windowCopy.getName(), project, usersTaskFile.getTask())-->Line_39 $$ if (!resourceFile.delete()) [ FD ]
Line_2 $$ public static void smartCheck(@NotNull final AnswerPlaceholder placeholder, @NotNull final Project project, @NotNull final VirtualFile answerFile, @NotNull final TaskFile answerTaskFile, @NotNull final TaskFile usersTaskFile, @NotNull final StudyTestRunner testRunner, @NotNull final VirtualFile virtualFile, @NotNull final Document usersDocument) -->Line_18 $$ int userStart = userAnswerPlaceholder.getRealStartOffset(usersDocument)[ FD ]
Line_9 $$ if (windowDocument != null) -->Line_39 $$ if (!resourceFile.delete()) [ CD ]
Line_11 $$ final TaskFile windowTaskFile = new TaskFile()-->Line_29 $$ VirtualFile fileWindows = EduUtils.flushWindows(windowTaskFile, windowCopy, true)[ FD ]
Line_8 $$ final Document windowDocument = documentManager.getDocument(windowCopy)-->Line_21 $$ windowDocument.replaceString(start, end, text)[ FD ]
Line_9 $$ if (windowDocument != null) -->Line_30 $$ Process smartTestProcess = testRunner.createCheckProcess(project, windowCopy.getPath())[ CD ]
Line_2 $$ public static void smartCheck(@NotNull final AnswerPlaceholder placeholder, @NotNull final Project project, @NotNull final VirtualFile answerFile, @NotNull final TaskFile answerTaskFile, @NotNull final TaskFile usersTaskFile, @NotNull final StudyTestRunner testRunner, @NotNull final VirtualFile virtualFile, @NotNull final Document usersDocument) -->Line_4 $$ final int index = placeholder.getIndex()[ FD ]
Line_9 $$ if (windowDocument != null) -->Line_15 $$ int start = placeholder.getRealStartOffset(windowDocument)[ CD ]
Line_9 $$ if (windowDocument != null) -->Line_16 $$ int end = start + placeholder.getLength()[ CD ]
Line_10 $$ final File resourceFile = StudyUtils.copyResourceFile(virtualFile.getName(), windowCopy.getName(), project, usersTaskFile.getTask())-->Line_40 $$ LOG.error("failed to delete", resourceFile.getPath())[ FD ]
Line_7 $$ final FileDocumentManager documentManager = FileDocumentManager.getInstance()-->Line_8 $$ final Document windowDocument = documentManager.getDocument(windowCopy)[ FD ]
Line_39 $$ if (!resourceFile.delete()) -->Line_40 $$ LOG.error("failed to delete", resourceFile.getPath())[ CD ]
Line_17 $$ final AnswerPlaceholder userAnswerPlaceholder = usersTaskFile.getAnswerPlaceholders().get(placeholder.getIndex())-->Line_34 $$ StudyTaskManager.getInstance(project).setStatus(userAnswerPlaceholder, res ? StudyStatus.Solved : StudyStatus.Failed)[ FD ]
Line_8 $$ final Document windowDocument = documentManager.getDocument(windowCopy)-->Line_15 $$ int start = placeholder.getRealStartOffset(windowDocument)[ FD ]
Line_2 $$ public static void smartCheck(@NotNull final AnswerPlaceholder placeholder, @NotNull final Project project, @NotNull final VirtualFile answerFile, @NotNull final TaskFile answerTaskFile, @NotNull final TaskFile usersTaskFile, @NotNull final StudyTestRunner testRunner, @NotNull final VirtualFile virtualFile, @NotNull final Document usersDocument) -->Line_6 $$ final VirtualFile windowCopy = answerFile.copy(project, answerFile.getParent(), windowCopyName)[ FD ]
Line_9 $$ if (windowDocument != null) -->Line_20 $$ String text = usersDocument.getText(new TextRange(userStart, userEnd))[ CD ]
Line_9 $$ if (windowDocument != null) -->Line_18 $$ int userStart = userAnswerPlaceholder.getRealStartOffset(usersDocument)[ CD ]
Line_6 $$ final VirtualFile windowCopy = answerFile.copy(project, answerFile.getParent(), windowCopyName)-->Line_10 $$ final File resourceFile = StudyUtils.copyResourceFile(virtualFile.getName(), windowCopy.getName(), project, usersTaskFile.getTask())[ FD ]
Line_9 $$ if (windowDocument != null) -->Line_29 $$ VirtualFile fileWindows = EduUtils.flushWindows(windowTaskFile, windowCopy, true)[ CD ]
Line_8 $$ final Document windowDocument = documentManager.getDocument(windowCopy)-->Line_14 $$ windowDocument.addDocumentListener(listener)[ FD ]
Line_11 $$ final TaskFile windowTaskFile = new TaskFile()-->Line_12 $$ TaskFile.copy(answerTaskFile, windowTaskFile)[ FD ]
Line_2 $$ public static void smartCheck(@NotNull final AnswerPlaceholder placeholder, @NotNull final Project project, @NotNull final VirtualFile answerFile, @NotNull final TaskFile answerTaskFile, @NotNull final TaskFile usersTaskFile, @NotNull final StudyTestRunner testRunner, @NotNull final VirtualFile virtualFile, @NotNull final Document usersDocument) -->Line_17 $$ final AnswerPlaceholder userAnswerPlaceholder = usersTaskFile.getAnswerPlaceholders().get(placeholder.getIndex())[ FD ]
Line_9 $$ if (windowDocument != null) -->Line_19 $$ int userEnd = userStart + userAnswerPlaceholder.getLength()[ CD ]
Line_22 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_26 $$ documentManager.saveDocument(windowDocument)[ CD ]
Line_9 $$ if (windowDocument != null) -->Line_11 $$ final TaskFile windowTaskFile = new TaskFile()[ CD ]
Line_9 $$ if (windowDocument != null) -->Line_17 $$ final AnswerPlaceholder userAnswerPlaceholder = usersTaskFile.getAnswerPlaceholders().get(placeholder.getIndex())[ CD ]
Line_2 $$ public static void smartCheck(@NotNull final AnswerPlaceholder placeholder, @NotNull final Project project, @NotNull final VirtualFile answerFile, @NotNull final TaskFile answerTaskFile, @NotNull final TaskFile usersTaskFile, @NotNull final StudyTestRunner testRunner, @NotNull final VirtualFile virtualFile, @NotNull final Document usersDocument) -->Line_33 $$ boolean res = testRunner.getTestsOutput(output).isSuccess()[ FD ]
Line_9 $$ if (windowDocument != null) -->Line_36 $$ if (fileWindows != null) [ CD ]
Line_9 $$ if (windowDocument != null) -->Line_12 $$ TaskFile.copy(answerTaskFile, windowTaskFile)[ CD ]
Line_6 $$ final VirtualFile windowCopy = answerFile.copy(project, answerFile.getParent(), windowCopyName)-->Line_8 $$ final Document windowDocument = documentManager.getDocument(windowCopy)[ FD ]
Line_9 $$ if (windowDocument != null) -->Line_34 $$ StudyTaskManager.getInstance(project).setStatus(userAnswerPlaceholder, res ? StudyStatus.Solved : StudyStatus.Failed)[ CD ]
Line_9 $$ if (windowDocument != null) -->Line_22 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() [ CD ]
Line_36 $$ if (fileWindows != null) -->Line_37 $$ StudyUtils.deleteFile(fileWindows)[ CD ]
Line_6 $$ final VirtualFile windowCopy = answerFile.copy(project, answerFile.getParent(), windowCopyName)-->Line_29 $$ VirtualFile fileWindows = EduUtils.flushWindows(windowTaskFile, windowCopy, true)[ FD ]
Line_7 $$ final FileDocumentManager documentManager = FileDocumentManager.getInstance()-->Line_26 $$ documentManager.saveDocument(windowDocument)[ FD ]
Line_17 $$ final AnswerPlaceholder userAnswerPlaceholder = usersTaskFile.getAnswerPlaceholders().get(placeholder.getIndex())-->Line_19 $$ int userEnd = userStart + userAnswerPlaceholder.getLength()[ FD ]
Line_8 $$ final Document windowDocument = documentManager.getDocument(windowCopy)-->Line_9 $$ if (windowDocument != null) [ FD ]
Line_17 $$ final AnswerPlaceholder userAnswerPlaceholder = usersTaskFile.getAnswerPlaceholders().get(placeholder.getIndex())-->Line_18 $$ int userStart = userAnswerPlaceholder.getRealStartOffset(usersDocument)[ FD ]
Line_5 $$ String windowCopyName = answerFile.getNameWithoutExtension() + index + EduNames.WINDOW_POSTFIX + answerFile.getExtension()-->Line_6 $$ final VirtualFile windowCopy = answerFile.copy(project, answerFile.getParent(), windowCopyName)[ FD ]
Line_9 $$ if (windowDocument != null) -->Line_33 $$ boolean res = testRunner.getTestsOutput(output).isSuccess()[ CD ]
Line_15 $$ int start = placeholder.getRealStartOffset(windowDocument)-->Line_21 $$ windowDocument.replaceString(start, end, text)[ FD ]
Line_9 $$ if (windowDocument != null) -->Line_13 $$ EduDocumentListener listener = new EduDocumentListener(windowTaskFile)[ CD ]
Line_2 $$ public static void smartCheck(@NotNull final AnswerPlaceholder placeholder, @NotNull final Project project, @NotNull final VirtualFile answerFile, @NotNull final TaskFile answerTaskFile, @NotNull final TaskFile usersTaskFile, @NotNull final StudyTestRunner testRunner, @NotNull final VirtualFile virtualFile, @NotNull final Document usersDocument) -->Line_15 $$ int start = placeholder.getRealStartOffset(windowDocument)[ FD ]
Line_9 $$ if (windowDocument != null) -->Line_14 $$ windowDocument.addDocumentListener(listener)[ CD ]
Line_6 $$ final VirtualFile windowCopy = answerFile.copy(project, answerFile.getParent(), windowCopyName)-->Line_31 $$ final CapturingProcessHandler handler = new CapturingProcessHandler(smartTestProcess, null, windowCopy.getPath())[ FD ]
Line_2 $$ public static void smartCheck(@NotNull final AnswerPlaceholder placeholder, @NotNull final Project project, @NotNull final VirtualFile answerFile, @NotNull final TaskFile answerTaskFile, @NotNull final TaskFile usersTaskFile, @NotNull final StudyTestRunner testRunner, @NotNull final VirtualFile virtualFile, @NotNull final Document usersDocument) -->Line_34 $$ StudyTaskManager.getInstance(project).setStatus(userAnswerPlaceholder, res ? StudyStatus.Solved : StudyStatus.Failed)[ FD ]
Line_2 $$ public static void smartCheck(@NotNull final AnswerPlaceholder placeholder, @NotNull final Project project, @NotNull final VirtualFile answerFile, @NotNull final TaskFile answerTaskFile, @NotNull final TaskFile usersTaskFile, @NotNull final StudyTestRunner testRunner, @NotNull final VirtualFile virtualFile, @NotNull final Document usersDocument) -->Line_30 $$ Process smartTestProcess = testRunner.createCheckProcess(project, windowCopy.getPath())[ FD ]
Line_6 $$ final VirtualFile windowCopy = answerFile.copy(project, answerFile.getParent(), windowCopyName)-->Line_35 $$ StudyUtils.deleteFile(windowCopy)[ FD ]
Line_9 $$ if (windowDocument != null) -->Line_35 $$ StudyUtils.deleteFile(windowCopy)[ CD ]
Line_16 $$ int end = start + placeholder.getLength()-->Line_21 $$ windowDocument.replaceString(start, end, text)[ FD ]
Line_2 $$ public static void smartCheck(@NotNull final AnswerPlaceholder placeholder, @NotNull final Project project, @NotNull final VirtualFile answerFile, @NotNull final TaskFile answerTaskFile, @NotNull final TaskFile usersTaskFile, @NotNull final StudyTestRunner testRunner, @NotNull final VirtualFile virtualFile, @NotNull final Document usersDocument) -->Line_12 $$ TaskFile.copy(answerTaskFile, windowTaskFile)[ FD ]
Line_2 $$ public static void smartCheck(@NotNull final AnswerPlaceholder placeholder, @NotNull final Project project, @NotNull final VirtualFile answerFile, @NotNull final TaskFile answerTaskFile, @NotNull final TaskFile usersTaskFile, @NotNull final StudyTestRunner testRunner, @NotNull final VirtualFile virtualFile, @NotNull final Document usersDocument) -->Line_10 $$ final File resourceFile = StudyUtils.copyResourceFile(virtualFile.getName(), windowCopy.getName(), project, usersTaskFile.getTask())[ FD ]
Line_9 $$ if (windowDocument != null) -->Line_32 $$ final ProcessOutput output = handler.runProcess()[ CD ]
Line_9 $$ if (windowDocument != null) -->Line_21 $$ windowDocument.replaceString(start, end, text)[ CD ]
Line_6 $$ final VirtualFile windowCopy = answerFile.copy(project, answerFile.getParent(), windowCopyName)-->Line_30 $$ Process smartTestProcess = testRunner.createCheckProcess(project, windowCopy.getPath())[ FD ]
Line_20 $$ String text = usersDocument.getText(new TextRange(userStart, userEnd))-->Line_21 $$ windowDocument.replaceString(start, end, text)[ FD ]
Line_2 $$ public static void smartCheck(@NotNull final AnswerPlaceholder placeholder, @NotNull final Project project, @NotNull final VirtualFile answerFile, @NotNull final TaskFile answerTaskFile, @NotNull final TaskFile usersTaskFile, @NotNull final StudyTestRunner testRunner, @NotNull final VirtualFile virtualFile, @NotNull final Document usersDocument) -->Line_5 $$ String windowCopyName = answerFile.getNameWithoutExtension() + index + EduNames.WINDOW_POSTFIX + answerFile.getExtension()[ FD ]
Line_2 $$ public static void smartCheck(@NotNull final AnswerPlaceholder placeholder, @NotNull final Project project, @NotNull final VirtualFile answerFile, @NotNull final TaskFile answerTaskFile, @NotNull final TaskFile usersTaskFile, @NotNull final StudyTestRunner testRunner, @NotNull final VirtualFile virtualFile, @NotNull final Document usersDocument) -->Line_16 $$ int end = start + placeholder.getLength()[ FD ]
Line_9 $$ if (windowDocument != null) -->Line_10 $$ final File resourceFile = StudyUtils.copyResourceFile(virtualFile.getName(), windowCopy.getName(), project, usersTaskFile.getTask())[ CD ]
