Line_2 $$ public void deleteFile(Object requestor, @NotNull final VirtualFile file) throws IOException -->Line_3 $$ if (file.getParent() == null) [ CD ]
Line_6 $$ if (!auxDelete(file)) -->Line_7 $$ File ioFile = convertToIOFile(file)[ CD ]
Line_7 $$ File ioFile = convertToIOFile(file)-->Line_9 $$ throw new IOException(VfsBundle.message("delete.failed.error", ioFile.getPath()))[ FD ]
Line_2 $$ public void deleteFile(Object requestor, @NotNull final VirtualFile file) throws IOException -->Line_6 $$ if (!auxDelete(file)) [ FD ]
Line_2 $$ public void deleteFile(Object requestor, @NotNull final VirtualFile file) throws IOException -->Line_14 $$ handler.delete(file)[ FD ]
Line_12 $$ auxNotifyCompleted(new ThrowableConsumer<LocalFileOperationsHandler, IOException>() -->Line_14 $$ handler.delete(file)[ FD ]
Line_2 $$ public void deleteFile(Object requestor, @NotNull final VirtualFile file) throws IOException -->Line_12 $$ auxNotifyCompleted(new ThrowableConsumer<LocalFileOperationsHandler, IOException>() [ CD ]
Line_2 $$ public void deleteFile(Object requestor, @NotNull final VirtualFile file) throws IOException -->Line_6 $$ if (!auxDelete(file)) [ CD ]
Line_7 $$ File ioFile = convertToIOFile(file)-->Line_8 $$ if (!FileUtil.delete(ioFile)) [ FD ]
Line_2 $$ public void deleteFile(Object requestor, @NotNull final VirtualFile file) throws IOException -->Line_3 $$ if (file.getParent() == null) [ FD ]
Line_12 $$ auxNotifyCompleted(new ThrowableConsumer<LocalFileOperationsHandler, IOException>() -->Line_14 $$ handler.delete(file)[ CD ]
Line_2 $$ public void deleteFile(Object requestor, @NotNull final VirtualFile file) throws IOException -->Line_7 $$ File ioFile = convertToIOFile(file)[ FD ]
Line_2 $$ public void deleteFile(Object requestor, @NotNull final VirtualFile file) throws IOException -->Line_4 $$ throw new IOException(VfsBundle.message("cannot.delete.root.directory", file.getPath()))[ FD ]
Line_6 $$ if (!auxDelete(file)) -->Line_8 $$ if (!FileUtil.delete(ioFile)) [ CD ]
