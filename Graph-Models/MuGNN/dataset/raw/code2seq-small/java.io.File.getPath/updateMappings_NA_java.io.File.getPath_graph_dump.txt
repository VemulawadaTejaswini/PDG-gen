Line_11 $$ final Set<File> allCompiledFiles = getFilesContainer(context, ALL_COMPILED_FILES_KEY)-->Line_19 $$ final boolean incremental = globalMappings.differentiateOnIncrementalMake(delta, removedPaths, filesToCompile, allCompiledFiles, allAffectedFiles, moduleBasedFilter, CONSTANT_SEARCH_SERVICE.get(context))[ FD ]
Line_55 $$ additionalPassRequired = isCompileJavaIncrementally(context) && chunkContainsAffectedFiles(context, chunk, newlyAffectedFiles)-->Line_61 $$ additionalPassRequired = isCompileJavaIncrementally(context)[ FD ]
Line_39 $$ if (LOG.isDebugEnabled()) -->Line_43 $$ final List<Pair<File, JpsModule>> wrongFiles = checkAffectedFilesInCorrectModules(context, newlyAffectedFiles, moduleBasedFilter)[ CD ]
Line_38 $$ if (!newlyAffectedFiles.isEmpty()) -->Line_55 $$ additionalPassRequired = isCompileJavaIncrementally(context) && chunkContainsAffectedFiles(context, chunk, newlyAffectedFiles)[ CD ]
Line_44 $$ if (!wrongFiles.isEmpty()) -->Line_45 $$ LOG.debug("Wrong affected files for module chunk " + chunk.getName() + ": ")[ CD ]
Line_32 $$ if (incremental) -->Line_38 $$ if (!newlyAffectedFiles.isEmpty()) [ CD ]
Line_2 $$ public static boolean updateMappings(CompileContext context, final Mappings delta, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, ModuleChunk chunk, Collection<File> filesToCompile, Collection<File> successfullyCompiled) throws IOException -->Line_53 $$ FSOperations.markDirtyIfNotDeleted(context, CompilationRound.NEXT, file)[ FD ]
Line_2 $$ public static boolean updateMappings(CompileContext context, final Mappings delta, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, ModuleChunk chunk, Collection<File> filesToCompile, Collection<File> successfullyCompiled) throws IOException -->Line_9 $$ if (context.shouldDifferentiate(chunk)) [ FD ]
Line_32 $$ if (incremental) -->Line_59 $$ LOG.info("Non-incremental mode: " + messageText)[ CD ]
Line_9 $$ if (context.shouldDifferentiate(chunk)) -->Line_16 $$ final Set<File> affectedBeforeDif = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)[ CD ]
Line_32 $$ if (incremental) -->Line_62 $$ FSOperations.markDirtyRecursively(context, CompilationRound.NEXT, chunk)[ CD ]
Line_2 $$ public static boolean updateMappings(CompileContext context, final Mappings delta, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, ModuleChunk chunk, Collection<File> filesToCompile, Collection<File> successfullyCompiled) throws IOException -->Line_78 $$ globalMappings.integrate(delta)[ FD ]
Line_9 $$ if (context.shouldDifferentiate(chunk)) -->Line_19 $$ final boolean incremental = globalMappings.differentiateOnIncrementalMake(delta, removedPaths, filesToCompile, allCompiledFiles, allAffectedFiles, moduleBasedFilter, CONSTANT_SEARCH_SERVICE.get(context))[ CD ]
Line_2 $$ public static boolean updateMappings(CompileContext context, final Mappings delta, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, ModuleChunk chunk, Collection<File> filesToCompile, Collection<File> successfullyCompiled) throws IOException -->Line_55 $$ additionalPassRequired = isCompileJavaIncrementally(context) && chunkContainsAffectedFiles(context, chunk, newlyAffectedFiles)[ FD ]
Line_18 $$ final ModulesBasedFileFilter moduleBasedFilter = new ModulesBasedFileFilter(context, chunk)-->Line_43 $$ final List<Pair<File, JpsModule>> wrongFiles = checkAffectedFilesInCorrectModules(context, newlyAffectedFiles, moduleBasedFilter)[ FD ]
Line_2 $$ public static boolean updateMappings(CompileContext context, final Mappings delta, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, ModuleChunk chunk, Collection<File> filesToCompile, Collection<File> successfullyCompiled) throws IOException -->Line_60 $$ context.processMessage(new ProgressMessage(messageText))[ FD ]
Line_8 $$ if (!isForcedRecompilationAllJavaModules(context)) -->Line_70 $$ if (!errorsDetected) [ CD ]
Line_20 $$ if (LOG.isDebugEnabled()) -->Line_22 $$ LOG.debug("   Compiled Files:")[ CD ]
Line_32 $$ if (incremental) -->Line_33 $$ final Set<File> newlyAffectedFiles = new HashSet<File>(allAffectedFiles)[ CD ]
Line_33 $$ final Set<File> newlyAffectedFiles = new HashSet<File>(allAffectedFiles)-->Line_38 $$ if (!newlyAffectedFiles.isEmpty()) [ FD ]
Line_9 $$ if (context.shouldDifferentiate(chunk)) -->Line_20 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_9 $$ if (context.shouldDifferentiate(chunk)) -->Line_10 $$ context.processMessage(new ProgressMessage("Checking dependencies... [" + chunk.getPresentableShortName() + "]"))[ CD ]
Line_4 $$ boolean additionalPassRequired = false-->Line_55 $$ additionalPassRequired = isCompileJavaIncrementally(context) && chunkContainsAffectedFiles(context, chunk, newlyAffectedFiles)[ FD ]
Line_8 $$ if (!isForcedRecompilationAllJavaModules(context)) -->Line_9 $$ if (context.shouldDifferentiate(chunk)) [ CD ]
Line_2 $$ public static boolean updateMappings(CompileContext context, final Mappings delta, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, ModuleChunk chunk, Collection<File> filesToCompile, Collection<File> successfullyCompiled) throws IOException -->Line_8 $$ if (!isForcedRecompilationAllJavaModules(context)) [ FD ]
Line_9 $$ if (context.shouldDifferentiate(chunk)) -->Line_11 $$ final Set<File> allCompiledFiles = getFilesContainer(context, ALL_COMPILED_FILES_KEY)[ CD ]
Line_2 $$ public static boolean updateMappings(CompileContext context, final Mappings delta, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, ModuleChunk chunk, Collection<File> filesToCompile, Collection<File> successfullyCompiled) throws IOException -->Line_13 $$ allAffectedFiles.addAll(filesToCompile)[ FD ]
Line_23 $$ for (final File c : allCompiledFiles) -->Line_28 $$ LOG.debug("      " + c.getAbsolutePath())[ FD ]
Line_9 $$ if (context.shouldDifferentiate(chunk)) -->Line_18 $$ final ModulesBasedFileFilter moduleBasedFilter = new ModulesBasedFileFilter(context, chunk)[ CD ]
Line_32 $$ if (incremental) -->Line_61 $$ additionalPassRequired = isCompileJavaIncrementally(context)[ CD ]
Line_38 $$ if (!newlyAffectedFiles.isEmpty()) -->Line_39 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_12 $$ final Set<File> allAffectedFiles = getFilesContainer(context, ALL_AFFECTED_FILES_KEY)-->Line_15 $$ allAffectedFiles.removeAll(successfullyCompiled)[ FD ]
Line_32 $$ if (incremental) -->Line_36 $$ LOG.info(infoMessage)[ CD ]
Line_35 $$ final String infoMessage = "Dependency analysis found " + newlyAffectedFiles.size() + " affected files"-->Line_36 $$ LOG.info(infoMessage)[ FD ]
Line_9 $$ if (context.shouldDifferentiate(chunk)) -->Line_12 $$ final Set<File> allAffectedFiles = getFilesContainer(context, ALL_AFFECTED_FILES_KEY)[ CD ]
Line_2 $$ public static boolean updateMappings(CompileContext context, final Mappings delta, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, ModuleChunk chunk, Collection<File> filesToCompile, Collection<File> successfullyCompiled) throws IOException -->Line_14 $$ allCompiledFiles.addAll(successfullyCompiled)[ FD ]
Line_9 $$ if (context.shouldDifferentiate(chunk)) -->Line_13 $$ allAffectedFiles.addAll(filesToCompile)[ CD ]
Line_5 $$ final Set<String> removedPaths = getRemovedPaths(chunk, dirtyFilesHolder)-->Line_66 $$ globalMappings.differentiateOnNonIncrementalMake(delta, removedPaths, filesToCompile)[ FD ]
Line_2 $$ public static boolean updateMappings(CompileContext context, final Mappings delta, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, ModuleChunk chunk, Collection<File> filesToCompile, Collection<File> successfullyCompiled) throws IOException -->Line_12 $$ final Set<File> allAffectedFiles = getFilesContainer(context, ALL_AFFECTED_FILES_KEY)[ FD ]
Line_18 $$ final ModulesBasedFileFilter moduleBasedFilter = new ModulesBasedFileFilter(context, chunk)-->Line_19 $$ final boolean incremental = globalMappings.differentiateOnIncrementalMake(delta, removedPaths, filesToCompile, allCompiledFiles, allAffectedFiles, moduleBasedFilter, CONSTANT_SEARCH_SERVICE.get(context))[ FD ]
Line_39 $$ if (LOG.isDebugEnabled()) -->Line_44 $$ if (!wrongFiles.isEmpty()) [ CD ]
Line_33 $$ final Set<File> newlyAffectedFiles = new HashSet<File>(allAffectedFiles)-->Line_55 $$ additionalPassRequired = isCompileJavaIncrementally(context) && chunkContainsAffectedFiles(context, chunk, newlyAffectedFiles)[ FD ]
Line_12 $$ final Set<File> allAffectedFiles = getFilesContainer(context, ALL_AFFECTED_FILES_KEY)-->Line_13 $$ allAffectedFiles.addAll(filesToCompile)[ FD ]
Line_2 $$ public static boolean updateMappings(CompileContext context, final Mappings delta, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, ModuleChunk chunk, Collection<File> filesToCompile, Collection<File> successfullyCompiled) throws IOException -->Line_5 $$ final Set<String> removedPaths = getRemovedPaths(chunk, dirtyFilesHolder)[ FD ]
Line_4 $$ boolean additionalPassRequired = false-->Line_61 $$ additionalPassRequired = isCompileJavaIncrementally(context)[ FD ]
Line_33 $$ final Set<File> newlyAffectedFiles = new HashSet<File>(allAffectedFiles)-->Line_34 $$ newlyAffectedFiles.removeAll(affectedBeforeDif)[ FD ]
Line_23 $$ for (final File c : allCompiledFiles) -->Line_24 $$ LOG.debug("      " + c.getAbsolutePath())[ FD ]
Line_7 $$ final boolean errorsDetected = Utils.errorsDetected(context)-->Line_70 $$ if (!errorsDetected) [ FD ]
Line_6 $$ final Mappings globalMappings = context.getProjectDescriptor().dataManager.getMappings()-->Line_71 $$ globalMappings.differentiateOnRebuild(delta)[ FD ]
Line_32 $$ if (incremental) -->Line_34 $$ newlyAffectedFiles.removeAll(affectedBeforeDif)[ CD ]
Line_12 $$ final Set<File> allAffectedFiles = getFilesContainer(context, ALL_AFFECTED_FILES_KEY)-->Line_19 $$ final boolean incremental = globalMappings.differentiateOnIncrementalMake(delta, removedPaths, filesToCompile, allCompiledFiles, allAffectedFiles, moduleBasedFilter, CONSTANT_SEARCH_SERVICE.get(context))[ FD ]
Line_20 $$ if (LOG.isDebugEnabled()) -->Line_21 $$ LOG.debug("Differentiate Results:")[ CD ]
Line_2 $$ public static boolean updateMappings(CompileContext context, final Mappings delta, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, ModuleChunk chunk, Collection<File> filesToCompile, Collection<File> successfullyCompiled) throws IOException -->Line_62 $$ FSOperations.markDirtyRecursively(context, CompilationRound.NEXT, chunk)[ FD ]
Line_2 $$ public static boolean updateMappings(CompileContext context, final Mappings delta, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, ModuleChunk chunk, Collection<File> filesToCompile, Collection<File> successfullyCompiled) throws IOException -->Line_10 $$ context.processMessage(new ProgressMessage("Checking dependencies... [" + chunk.getPresentableShortName() + "]"))[ FD ]
Line_2 $$ public static boolean updateMappings(CompileContext context, final Mappings delta, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, ModuleChunk chunk, Collection<File> filesToCompile, Collection<File> successfullyCompiled) throws IOException -->Line_71 $$ globalMappings.differentiateOnRebuild(delta)[ FD ]
Line_16 $$ final Set<File> affectedBeforeDif = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_17 $$ affectedBeforeDif.addAll(allAffectedFiles)[ FD ]
Line_65 $$ if (!errorsDetected) -->Line_66 $$ globalMappings.differentiateOnNonIncrementalMake(delta, removedPaths, filesToCompile)[ CD ]
Line_6 $$ final Mappings globalMappings = context.getProjectDescriptor().dataManager.getMappings()-->Line_19 $$ final boolean incremental = globalMappings.differentiateOnIncrementalMake(delta, removedPaths, filesToCompile, allCompiledFiles, allAffectedFiles, moduleBasedFilter, CONSTANT_SEARCH_SERVICE.get(context))[ FD ]
Line_2 $$ public static boolean updateMappings(CompileContext context, final Mappings delta, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, ModuleChunk chunk, Collection<File> filesToCompile, Collection<File> successfullyCompiled) throws IOException -->Line_77 $$ context.processMessage(new ProgressMessage("Updating dependency information... [" + chunk.getPresentableShortName() + "]"))[ FD ]
Line_2 $$ public static boolean updateMappings(CompileContext context, final Mappings delta, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, ModuleChunk chunk, Collection<File> filesToCompile, Collection<File> successfullyCompiled) throws IOException -->Line_11 $$ final Set<File> allCompiledFiles = getFilesContainer(context, ALL_COMPILED_FILES_KEY)[ FD ]
Line_2 $$ public static boolean updateMappings(CompileContext context, final Mappings delta, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, ModuleChunk chunk, Collection<File> filesToCompile, Collection<File> successfullyCompiled) throws IOException -->Line_6 $$ final Mappings globalMappings = context.getProjectDescriptor().dataManager.getMappings()[ FD ]
Line_32 $$ if (incremental) -->Line_35 $$ final String infoMessage = "Dependency analysis found " + newlyAffectedFiles.size() + " affected files"[ CD ]
Line_9 $$ if (context.shouldDifferentiate(chunk)) -->Line_14 $$ allCompiledFiles.addAll(successfullyCompiled)[ CD ]
Line_2 $$ public static boolean updateMappings(CompileContext context, final Mappings delta, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, ModuleChunk chunk, Collection<File> filesToCompile, Collection<File> successfullyCompiled) throws IOException -->Line_37 $$ context.processMessage(new ProgressMessage(infoMessage))[ FD ]
Line_9 $$ if (context.shouldDifferentiate(chunk)) -->Line_15 $$ allAffectedFiles.removeAll(successfullyCompiled)[ CD ]
Line_12 $$ final Set<File> allAffectedFiles = getFilesContainer(context, ALL_AFFECTED_FILES_KEY)-->Line_17 $$ affectedBeforeDif.addAll(allAffectedFiles)[ FD ]
Line_2 $$ public static boolean updateMappings(CompileContext context, final Mappings delta, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, ModuleChunk chunk, Collection<File> filesToCompile, Collection<File> successfullyCompiled) throws IOException -->Line_58 $$ final String messageText = "Marking " + chunk.getPresentableShortName() + " and direct dependants for recompilation"[ FD ]
Line_2 $$ public static boolean updateMappings(CompileContext context, final Mappings delta, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, ModuleChunk chunk, Collection<File> filesToCompile, Collection<File> successfullyCompiled) throws IOException -->Line_83 $$ context.processMessage(new ProgressMessage(""))[ FD ]
Line_74 $$ if (errorsDetected) -->Line_75 $$ return false[ CD ]
Line_70 $$ if (!errorsDetected) -->Line_71 $$ globalMappings.differentiateOnRebuild(delta)[ CD ]
Line_6 $$ final Mappings globalMappings = context.getProjectDescriptor().dataManager.getMappings()-->Line_78 $$ globalMappings.integrate(delta)[ FD ]
Line_2 $$ public static boolean updateMappings(CompileContext context, final Mappings delta, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, ModuleChunk chunk, Collection<File> filesToCompile, Collection<File> successfullyCompiled) throws IOException -->Line_45 $$ LOG.debug("Wrong affected files for module chunk " + chunk.getName() + ": ")[ FD ]
Line_7 $$ final boolean errorsDetected = Utils.errorsDetected(context)-->Line_65 $$ if (!errorsDetected) [ FD ]
Line_5 $$ final Set<String> removedPaths = getRemovedPaths(chunk, dirtyFilesHolder)-->Line_19 $$ final boolean incremental = globalMappings.differentiateOnIncrementalMake(delta, removedPaths, filesToCompile, allCompiledFiles, allAffectedFiles, moduleBasedFilter, CONSTANT_SEARCH_SERVICE.get(context))[ FD ]
Line_2 $$ public static boolean updateMappings(CompileContext context, final Mappings delta, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, ModuleChunk chunk, Collection<File> filesToCompile, Collection<File> successfullyCompiled) throws IOException -->Line_61 $$ additionalPassRequired = isCompileJavaIncrementally(context)[ FD ]
Line_2 $$ public static boolean updateMappings(CompileContext context, final Mappings delta, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, ModuleChunk chunk, Collection<File> filesToCompile, Collection<File> successfullyCompiled) throws IOException -->Line_66 $$ globalMappings.differentiateOnNonIncrementalMake(delta, removedPaths, filesToCompile)[ FD ]
Line_2 $$ public static boolean updateMappings(CompileContext context, final Mappings delta, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, ModuleChunk chunk, Collection<File> filesToCompile, Collection<File> successfullyCompiled) throws IOException -->Line_7 $$ final boolean errorsDetected = Utils.errorsDetected(context)[ FD ]
Line_32 $$ if (incremental) -->Line_37 $$ context.processMessage(new ProgressMessage(infoMessage))[ CD ]
Line_43 $$ final List<Pair<File, JpsModule>> wrongFiles = checkAffectedFilesInCorrectModules(context, newlyAffectedFiles, moduleBasedFilter)-->Line_44 $$ if (!wrongFiles.isEmpty()) [ FD ]
Line_16 $$ final Set<File> affectedBeforeDif = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_34 $$ newlyAffectedFiles.removeAll(affectedBeforeDif)[ FD ]
Line_9 $$ if (context.shouldDifferentiate(chunk)) -->Line_32 $$ if (incremental) [ CD ]
Line_40 $$ for (File file : newlyAffectedFiles) -->Line_41 $$ LOG.debug("affected file: " + file.getPath())[ FD ]
Line_33 $$ final Set<File> newlyAffectedFiles = new HashSet<File>(allAffectedFiles)-->Line_43 $$ final List<Pair<File, JpsModule>> wrongFiles = checkAffectedFilesInCorrectModules(context, newlyAffectedFiles, moduleBasedFilter)[ FD ]
Line_9 $$ if (context.shouldDifferentiate(chunk)) -->Line_65 $$ if (!errorsDetected) [ CD ]
Line_9 $$ if (context.shouldDifferentiate(chunk)) -->Line_17 $$ affectedBeforeDif.addAll(allAffectedFiles)[ CD ]
Line_20 $$ if (LOG.isDebugEnabled()) -->Line_30 $$ LOG.debug("End Of Differentiate Results.")[ CD ]
Line_32 $$ if (incremental) -->Line_58 $$ final String messageText = "Marking " + chunk.getPresentableShortName() + " and direct dependants for recompilation"[ CD ]
Line_32 $$ if (incremental) -->Line_60 $$ context.processMessage(new ProgressMessage(messageText))[ CD ]
Line_2 $$ public static boolean updateMappings(CompileContext context, final Mappings delta, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, ModuleChunk chunk, Collection<File> filesToCompile, Collection<File> successfullyCompiled) throws IOException -->Line_43 $$ final List<Pair<File, JpsModule>> wrongFiles = checkAffectedFilesInCorrectModules(context, newlyAffectedFiles, moduleBasedFilter)[ FD ]
Line_11 $$ final Set<File> allCompiledFiles = getFilesContainer(context, ALL_COMPILED_FILES_KEY)-->Line_14 $$ allCompiledFiles.addAll(successfullyCompiled)[ FD ]
Line_6 $$ final Mappings globalMappings = context.getProjectDescriptor().dataManager.getMappings()-->Line_66 $$ globalMappings.differentiateOnNonIncrementalMake(delta, removedPaths, filesToCompile)[ FD ]
Line_33 $$ final Set<File> newlyAffectedFiles = new HashSet<File>(allAffectedFiles)-->Line_35 $$ final String infoMessage = "Dependency analysis found " + newlyAffectedFiles.size() + " affected files"[ FD ]
Line_40 $$ for (File file : newlyAffectedFiles) -->Line_53 $$ FSOperations.markDirtyIfNotDeleted(context, CompilationRound.NEXT, file)[ FD ]
Line_2 $$ public static boolean updateMappings(CompileContext context, final Mappings delta, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, ModuleChunk chunk, Collection<File> filesToCompile, Collection<File> successfullyCompiled) throws IOException -->Line_19 $$ final boolean incremental = globalMappings.differentiateOnIncrementalMake(delta, removedPaths, filesToCompile, allCompiledFiles, allAffectedFiles, moduleBasedFilter, CONSTANT_SEARCH_SERVICE.get(context))[ FD ]
Line_2 $$ public static boolean updateMappings(CompileContext context, final Mappings delta, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, ModuleChunk chunk, Collection<File> filesToCompile, Collection<File> successfullyCompiled) throws IOException -->Line_15 $$ allAffectedFiles.removeAll(successfullyCompiled)[ FD ]
Line_20 $$ if (LOG.isDebugEnabled()) -->Line_26 $$ LOG.debug("   Affected Files:")[ CD ]
