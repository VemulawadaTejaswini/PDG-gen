Line_45 $$ if (incremental) -->Line_72 $$ LOG.info("Non-incremental mode: " + messageText)[ CD ]
Line_45 $$ if (incremental) -->Line_48 $$ final String infoMessage = "Dependency analysis found " + newlyAffectedFiles.size() + " affected files"[ CD ]
Line_22 $$ final Set<File> allAffectedFiles = getFilesContainer(context, ALL_AFFECTED_FILES_KEY)-->Line_32 $$ final boolean incremental = globalMappings.differentiateOnIncrementalMake(delta, removedPaths, filesToCompile, allCompiledFiles, allAffectedFiles, moduleBasedFilter, CONSTANT_SEARCH_SERVICE.get(context))[ FD ]
Line_46 $$ final Set<File> newlyAffectedFiles = new HashSet<File>(allAffectedFiles)-->Line_68 $$ additionalPassRequired = isCompileJavaIncrementally(context) && chunkContainsAffectedFiles(context, chunk, newlyAffectedFiles)[ FD ]
Line_52 $$ if (LOG.isDebugEnabled()) -->Line_56 $$ final List<Pair<File, JpsModule>> wrongFiles = checkAffectedFilesInCorrectModules(context, newlyAffectedFiles, moduleBasedFilter)[ CD ]
Line_51 $$ if (!newlyAffectedFiles.isEmpty()) -->Line_52 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_19 $$ if (context.shouldDifferentiate(chunk)) -->Line_45 $$ if (incremental) [ CD ]
Line_53 $$ for (File file : newlyAffectedFiles) -->Line_66 $$ FSOperations.markDirtyIfNotDeleted(context, CompilationRound.NEXT, file)[ FD ]
Line_19 $$ if (context.shouldDifferentiate(chunk)) -->Line_31 $$ final ModulesBasedFileFilter moduleBasedFilter = new ModulesBasedFileFilter(context, chunk)[ CD ]
Line_46 $$ final Set<File> newlyAffectedFiles = new HashSet<File>(allAffectedFiles)-->Line_48 $$ final String infoMessage = "Dependency analysis found " + newlyAffectedFiles.size() + " affected files"[ FD ]
Line_45 $$ if (incremental) -->Line_75 $$ FSOperations.markDirtyRecursively(context, CompilationRound.NEXT, chunk)[ CD ]
Line_56 $$ final List<Pair<File, JpsModule>> wrongFiles = checkAffectedFilesInCorrectModules(context, newlyAffectedFiles, moduleBasedFilter)-->Line_57 $$ if (!wrongFiles.isEmpty()) [ FD ]
Line_16 $$ final Mappings globalMappings = context.getProjectDescriptor().dataManager.getMappings()-->Line_32 $$ final boolean incremental = globalMappings.differentiateOnIncrementalMake(delta, removedPaths, filesToCompile, allCompiledFiles, allAffectedFiles, moduleBasedFilter, CONSTANT_SEARCH_SERVICE.get(context))[ FD ]
Line_21 $$ final Set<File> allCompiledFiles = getFilesContainer(context, ALL_COMPILED_FILES_KEY)-->Line_32 $$ final boolean incremental = globalMappings.differentiateOnIncrementalMake(delta, removedPaths, filesToCompile, allCompiledFiles, allAffectedFiles, moduleBasedFilter, CONSTANT_SEARCH_SERVICE.get(context))[ FD ]
Line_46 $$ final Set<File> newlyAffectedFiles = new HashSet<File>(allAffectedFiles)-->Line_56 $$ final List<Pair<File, JpsModule>> wrongFiles = checkAffectedFilesInCorrectModules(context, newlyAffectedFiles, moduleBasedFilter)[ FD ]
Line_57 $$ if (!wrongFiles.isEmpty()) -->Line_58 $$ LOG.debug("Wrong affected files for module chunk " + chunk.getName() + ": ")[ CD ]
Line_19 $$ if (context.shouldDifferentiate(chunk)) -->Line_32 $$ final boolean incremental = globalMappings.differentiateOnIncrementalMake(delta, removedPaths, filesToCompile, allCompiledFiles, allAffectedFiles, moduleBasedFilter, CONSTANT_SEARCH_SERVICE.get(context))[ CD ]
Line_52 $$ if (LOG.isDebugEnabled()) -->Line_57 $$ if (!wrongFiles.isEmpty()) [ CD ]
Line_14 $$ boolean additionalPassRequired = false-->Line_68 $$ additionalPassRequired = isCompileJavaIncrementally(context) && chunkContainsAffectedFiles(context, chunk, newlyAffectedFiles)[ FD ]
Line_19 $$ if (context.shouldDifferentiate(chunk)) -->Line_29 $$ final Set<File> affectedBeforeDif = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)[ CD ]
Line_46 $$ final Set<File> newlyAffectedFiles = new HashSet<File>(allAffectedFiles)-->Line_47 $$ newlyAffectedFiles.removeAll(affectedBeforeDif)[ FD ]
Line_31 $$ final ModulesBasedFileFilter moduleBasedFilter = new ModulesBasedFileFilter(context, chunk)-->Line_56 $$ final List<Pair<File, JpsModule>> wrongFiles = checkAffectedFilesInCorrectModules(context, newlyAffectedFiles, moduleBasedFilter)[ FD ]
Line_51 $$ if (!newlyAffectedFiles.isEmpty()) -->Line_68 $$ additionalPassRequired = isCompileJavaIncrementally(context) && chunkContainsAffectedFiles(context, chunk, newlyAffectedFiles)[ CD ]
Line_33 $$ if (LOG.isDebugEnabled()) -->Line_35 $$ LOG.debug("   Compiled Files:")[ CD ]
Line_16 $$ final Mappings globalMappings = context.getProjectDescriptor().dataManager.getMappings()-->Line_97 $$ globalMappings.integrate(delta)[ FD ]
Line_45 $$ if (incremental) -->Line_47 $$ newlyAffectedFiles.removeAll(affectedBeforeDif)[ CD ]
Line_45 $$ if (incremental) -->Line_50 $$ context.processMessage(new ProgressMessage(infoMessage))[ CD ]
Line_45 $$ if (incremental) -->Line_51 $$ if (!newlyAffectedFiles.isEmpty()) [ CD ]
Line_17 $$ final boolean errorsDetected = Utils.errorsDetected(context)-->Line_78 $$ if (!errorsDetected) [ FD ]
Line_33 $$ if (LOG.isDebugEnabled()) -->Line_39 $$ LOG.debug("   Affected Files:")[ CD ]
Line_46 $$ final Set<File> newlyAffectedFiles = new HashSet<File>(allAffectedFiles)-->Line_51 $$ if (!newlyAffectedFiles.isEmpty()) [ FD ]
Line_19 $$ if (context.shouldDifferentiate(chunk)) -->Line_33 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_29 $$ final Set<File> affectedBeforeDif = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_47 $$ newlyAffectedFiles.removeAll(affectedBeforeDif)[ FD ]
Line_18 $$ if (!isForcedRecompilationAllJavaModules(context)) -->Line_19 $$ if (context.shouldDifferentiate(chunk)) [ CD ]
Line_33 $$ if (LOG.isDebugEnabled()) -->Line_34 $$ LOG.debug("Differentiate Results:")[ CD ]
Line_53 $$ for (File file : newlyAffectedFiles) -->Line_54 $$ LOG.debug("affected file: " + file.getPath())[ FD ]
Line_19 $$ if (context.shouldDifferentiate(chunk)) -->Line_21 $$ final Set<File> allCompiledFiles = getFilesContainer(context, ALL_COMPILED_FILES_KEY)[ CD ]
Line_19 $$ if (context.shouldDifferentiate(chunk)) -->Line_78 $$ if (!errorsDetected) [ CD ]
Line_29 $$ final Set<File> affectedBeforeDif = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_30 $$ affectedBeforeDif.addAll(allAffectedFiles)[ FD ]
Line_19 $$ if (context.shouldDifferentiate(chunk)) -->Line_20 $$ context.processMessage(new ProgressMessage("Checking dependencies... [" + chunk.getPresentableShortName() + "]"))[ CD ]
Line_36 $$ for (final File c : allCompiledFiles) -->Line_37 $$ LOG.debug("      " + c.getAbsolutePath())[ FD ]
Line_15 $$ final Set<String> removedPaths = getRemovedPaths(chunk, dirtyFilesHolder)-->Line_32 $$ final boolean incremental = globalMappings.differentiateOnIncrementalMake(delta, removedPaths, filesToCompile, allCompiledFiles, allAffectedFiles, moduleBasedFilter, CONSTANT_SEARCH_SERVICE.get(context))[ FD ]
Line_22 $$ final Set<File> allAffectedFiles = getFilesContainer(context, ALL_AFFECTED_FILES_KEY)-->Line_30 $$ affectedBeforeDif.addAll(allAffectedFiles)[ FD ]
Line_45 $$ if (incremental) -->Line_71 $$ final String messageText = "Marking " + chunk.getPresentableShortName() + " and direct dependants for recompilation"[ CD ]
Line_19 $$ if (context.shouldDifferentiate(chunk)) -->Line_22 $$ final Set<File> allAffectedFiles = getFilesContainer(context, ALL_AFFECTED_FILES_KEY)[ CD ]
Line_45 $$ if (incremental) -->Line_73 $$ context.processMessage(new ProgressMessage(messageText))[ CD ]
Line_45 $$ if (incremental) -->Line_74 $$ additionalPassRequired = isCompileJavaIncrementally(context)[ CD ]
Line_45 $$ if (incremental) -->Line_46 $$ final Set<File> newlyAffectedFiles = new HashSet<File>(allAffectedFiles)[ CD ]
Line_45 $$ if (incremental) -->Line_49 $$ LOG.info(infoMessage)[ CD ]
Line_33 $$ if (LOG.isDebugEnabled()) -->Line_43 $$ LOG.debug("End Of Differentiate Results.")[ CD ]
Line_14 $$ boolean additionalPassRequired = false-->Line_74 $$ additionalPassRequired = isCompileJavaIncrementally(context)[ FD ]
Line_68 $$ additionalPassRequired = isCompileJavaIncrementally(context) && chunkContainsAffectedFiles(context, chunk, newlyAffectedFiles)-->Line_74 $$ additionalPassRequired = isCompileJavaIncrementally(context)[ FD ]
Line_18 $$ if (!isForcedRecompilationAllJavaModules(context)) -->Line_84 $$ if (!errorsDetected) [ CD ]
Line_36 $$ for (final File c : allCompiledFiles) -->Line_41 $$ LOG.debug("      " + c.getAbsolutePath())[ FD ]
Line_48 $$ final String infoMessage = "Dependency analysis found " + newlyAffectedFiles.size() + " affected files"-->Line_49 $$ LOG.info(infoMessage)[ FD ]
Line_17 $$ final boolean errorsDetected = Utils.errorsDetected(context)-->Line_84 $$ if (!errorsDetected) [ FD ]
Line_19 $$ if (context.shouldDifferentiate(chunk)) -->Line_30 $$ affectedBeforeDif.addAll(allAffectedFiles)[ CD ]
Line_31 $$ final ModulesBasedFileFilter moduleBasedFilter = new ModulesBasedFileFilter(context, chunk)-->Line_32 $$ final boolean incremental = globalMappings.differentiateOnIncrementalMake(delta, removedPaths, filesToCompile, allCompiledFiles, allAffectedFiles, moduleBasedFilter, CONSTANT_SEARCH_SERVICE.get(context))[ FD ]
