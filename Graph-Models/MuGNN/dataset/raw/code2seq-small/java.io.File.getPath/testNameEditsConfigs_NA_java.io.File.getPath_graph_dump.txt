Line_18 $$ conf = new HdfsConfiguration()-->Line_44 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_11 $$ final File newEditsDir = new File(base_dir, "edits")-->Line_88 $$ checkImageAndEditsFilesExistence(newEditsDir, false, true)[ FD ]
Line_38 $$ conf = new HdfsConfiguration()-->Line_41 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEdits.getPath() + "," + newNameDir.getPath())[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_89 $$ checkImageAndEditsFilesExistence(checkpointNameDir, true, false)[ CD ]
Line_12 $$ final File nameAndEdits = new File(base_dir, "name_and_edits")-->Line_114 $$ checkImageAndEditsFilesExistence(nameAndEdits, true, true)[ FD ]
Line_18 $$ conf = new HdfsConfiguration()-->Line_69 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_11 $$ final File newEditsDir = new File(base_dir, "edits")-->Line_66 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, newEditsDir.getPath())[ FD ]
Line_70 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_84 $$ cluster.shutdown()[ FD ]
Line_26 $$ secondary = startSecondaryNameNode(conf)-->Line_36 $$ secondary.shutdown()[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_5 $$ Path file3 = new Path("TestNameEditsConfigs3")[ CD ]
Line_27 $$ fileSys = cluster.getFileSystem()-->Line_54 $$ DFSTestUtil.createFile(fileSys, file2, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_49 $$ fileSys = cluster.getFileSystem()-->Line_107 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_18 $$ conf = new HdfsConfiguration()-->Line_48 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_18 $$ conf = new HdfsConfiguration()-->Line_41 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEdits.getPath() + "," + newNameDir.getPath())[ FD ]
Line_64 $$ conf = new HdfsConfiguration()-->Line_68 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath())[ FD ]
Line_49 $$ fileSys = cluster.getFileSystem()-->Line_104 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_26 $$ secondary = startSecondaryNameNode(conf)-->Line_112 $$ secondary.shutdown()[ FD ]
Line_9 $$ FileSystem fileSys = null-->Line_51 $$ assertTrue(fileSys.exists(file1))[ FD ]
Line_18 $$ conf = new HdfsConfiguration()-->Line_23 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_27 $$ fileSys = cluster.getFileSystem()-->Line_29 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_93 $$ conf = new HdfsConfiguration()-->Line_101 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_18 $$ conf = new HdfsConfiguration()-->Line_42 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEdits.getPath() + "," + newEditsDir.getPath())[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_22 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointNameAndEdits.getPath())[ CD ]
Line_48 $$ secondary = startSecondaryNameNode(conf)-->Line_56 $$ secondary.doCheckpoint()[ FD ]
Line_4 $$ Path file2 = new Path("TestNameEditsConfigs2")-->Line_77 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_18 $$ conf = new HdfsConfiguration()-->Line_93 $$ conf = new HdfsConfiguration()[ FD ]
Line_38 $$ conf = new HdfsConfiguration()-->Line_66 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, newEditsDir.getPath())[ FD ]
Line_8 $$ Configuration conf = null-->Line_66 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, newEditsDir.getPath())[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_40 $$ assertTrue(newEditsDir.mkdir())[ CD ]
Line_4 $$ Path file2 = new Path("TestNameEditsConfigs2")-->Line_54 $$ DFSTestUtil.createFile(fileSys, file2, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_38 $$ conf = new HdfsConfiguration()-->Line_64 $$ conf = new HdfsConfiguration()[ FD ]
Line_102 $$ fileSys = cluster.getFileSystem()-->Line_107 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_39 $$ assertTrue(newNameDir.mkdir())[ CD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_25 $$ cluster.waitActive()[ FD ]
Line_8 $$ Configuration conf = null-->Line_42 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEdits.getPath() + "," + newEditsDir.getPath())[ FD ]
Line_9 $$ FileSystem fileSys = null-->Line_105 $$ assertTrue(!fileSys.exists(file2))[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_16 $$ ImmutableList<File> allCurrentDirs = ImmutableList.of(new File(nameAndEdits, "current"), new File(newNameDir, "current"), new File(newEditsDir, "current"), new File(checkpointNameAndEdits, "current"), new File(checkpointNameDir, "current"), new File(checkpointEditsDir, "current"))[ CD ]
Line_64 $$ conf = new HdfsConfiguration()-->Line_93 $$ conf = new HdfsConfiguration()[ FD ]
Line_26 $$ secondary = startSecondaryNameNode(conf)-->Line_72 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_27 $$ fileSys = cluster.getFileSystem()-->Line_78 $$ cleanupFile(fileSys, file2)[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_67 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath())[ CD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_71 $$ cluster.waitActive()[ CD ]
Line_8 $$ Configuration conf = null-->Line_21 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameAndEdits.getPath())[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_111 $$ cluster.shutdown()[ FD ]
Line_24 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_73 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_73 $$ fileSys = cluster.getFileSystem()-->Line_105 $$ assertTrue(!fileSys.exists(file2))[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_20 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEdits.getPath())[ CD ]
Line_64 $$ conf = new HdfsConfiguration()-->Line_65 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, newNameDir.getPath())[ FD ]
Line_46 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_70 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_26 $$ secondary = startSecondaryNameNode(conf)-->Line_32 $$ secondary.doCheckpoint()[ FD ]
Line_17 $$ ImmutableList<File> imageCurrentDirs = ImmutableList.of(new File(nameAndEdits, "current"), new File(newNameDir, "current"), new File(checkpointNameAndEdits, "current"), new File(checkpointNameDir, "current"))-->Line_63 $$ FSImageTestUtil.assertSameNewestImage(imageCurrentDirs)[ FD ]
Line_72 $$ secondary = startSecondaryNameNode(conf)-->Line_81 $$ secondary.doCheckpoint()[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_95 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEdits + "," + newEditsDir.getPath())[ CD ]
Line_18 $$ conf = new HdfsConfiguration()-->Line_21 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameAndEdits.getPath())[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_42 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEdits.getPath() + "," + newEditsDir.getPath())[ CD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_27 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_48 $$ secondary = startSecondaryNameNode(conf)[ CD ]
Line_9 $$ FileSystem fileSys = null-->Line_58 $$ fileSys.close()[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_13 $$ final File checkpointNameDir = new File(base_dir, "secondname")[ CD ]
Line_27 $$ fileSys = cluster.getFileSystem()-->Line_107 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_70 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_26 $$ secondary = startSecondaryNameNode(conf)-->Line_56 $$ secondary.doCheckpoint()[ FD ]
Line_13 $$ final File checkpointNameDir = new File(base_dir, "secondname")-->Line_89 $$ checkImageAndEditsFilesExistence(checkpointNameDir, true, false)[ FD ]
Line_18 $$ conf = new HdfsConfiguration()-->Line_67 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath())[ FD ]
Line_4 $$ Path file2 = new Path("TestNameEditsConfigs2")-->Line_76 $$ assertTrue(fileSys.exists(file2))[ FD ]
Line_4 $$ Path file2 = new Path("TestNameEditsConfigs2")-->Line_78 $$ cleanupFile(fileSys, file2)[ FD ]
Line_72 $$ secondary = startSecondaryNameNode(conf)-->Line_112 $$ secondary.shutdown()[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_96 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath() + "," + checkpointNameAndEdits.getPath())[ CD ]
Line_9 $$ FileSystem fileSys = null-->Line_83 $$ fileSys.close()[ FD ]
Line_9 $$ FileSystem fileSys = null-->Line_53 $$ cleanupFile(fileSys, file1)[ FD ]
Line_38 $$ conf = new HdfsConfiguration()-->Line_65 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, newNameDir.getPath())[ FD ]
Line_15 $$ final File checkpointNameAndEdits = new File(base_dir, "second_name_and_edits")-->Line_96 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_14 $$ final File checkpointEditsDir = new File(base_dir, "secondedits")-->Line_90 $$ checkImageAndEditsFilesExistence(checkpointEditsDir, false, true)[ FD ]
Line_27 $$ fileSys = cluster.getFileSystem()-->Line_102 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_64 $$ conf = new HdfsConfiguration()-->Line_95 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEdits + "," + newEditsDir.getPath())[ FD ]
Line_12 $$ final File nameAndEdits = new File(base_dir, "name_and_edits")-->Line_41 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEdits.getPath() + "," + newNameDir.getPath())[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_18 $$ conf = new HdfsConfiguration()[ CD ]
Line_18 $$ conf = new HdfsConfiguration()-->Line_66 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, newEditsDir.getPath())[ FD ]
Line_46 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_111 $$ cluster.shutdown()[ FD ]
Line_9 $$ FileSystem fileSys = null-->Line_55 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_3 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_53 $$ cleanupFile(fileSys, file1)[ FD ]
Line_24 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_25 $$ cluster.waitActive()[ FD ]
Line_8 $$ Configuration conf = null-->Line_101 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_70 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_71 $$ cluster.waitActive()[ FD ]
Line_101 $$ secondary = startSecondaryNameNode(conf)-->Line_108 $$ secondary.doCheckpoint()[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_24 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()[ CD ]
Line_27 $$ fileSys = cluster.getFileSystem()-->Line_34 $$ fileSys.close()[ FD ]
Line_8 $$ Configuration conf = null-->Line_94 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEdits.getPath() + "," + newNameDir.getPath())[ FD ]
Line_11 $$ final File newEditsDir = new File(base_dir, "edits")-->Line_95 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEdits + "," + newEditsDir.getPath())[ FD ]
Line_8 $$ Configuration conf = null-->Line_41 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEdits.getPath() + "," + newNameDir.getPath())[ FD ]
Line_38 $$ conf = new HdfsConfiguration()-->Line_98 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_9 $$ FileSystem fileSys = null-->Line_49 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_73 $$ fileSys = cluster.getFileSystem()-->Line_80 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_4 $$ Path file2 = new Path("TestNameEditsConfigs2")-->Line_105 $$ assertTrue(!fileSys.exists(file2))[ FD ]
Line_93 $$ conf = new HdfsConfiguration()-->Line_96 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_7 $$ SecondaryNameNode secondary = null[ CD ]
Line_3 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_30 $$ DFSTestUtil.createFile(fileSys, file1, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_27 $$ fileSys = cluster.getFileSystem()-->Line_77 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_18 $$ conf = new HdfsConfiguration()-->Line_72 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_8 $$ Configuration conf = null-->Line_93 $$ conf = new HdfsConfiguration()[ FD ]
Line_49 $$ fileSys = cluster.getFileSystem()-->Line_54 $$ DFSTestUtil.createFile(fileSys, file2, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_49 $$ fileSys = cluster.getFileSystem()-->Line_51 $$ assertTrue(fileSys.exists(file1))[ FD ]
Line_27 $$ fileSys = cluster.getFileSystem()-->Line_49 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_5 $$ Path file3 = new Path("TestNameEditsConfigs3")-->Line_80 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_9 $$ FileSystem fileSys = null-->Line_77 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_46 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_100 $$ cluster.waitActive()[ FD ]
Line_64 $$ conf = new HdfsConfiguration()-->Line_72 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_8 $$ Configuration conf = null-->Line_43 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_73 $$ fileSys = cluster.getFileSystem()-->Line_78 $$ cleanupFile(fileSys, file2)[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_84 $$ cluster.shutdown()[ FD ]
Line_48 $$ secondary = startSecondaryNameNode(conf)-->Line_112 $$ secondary.shutdown()[ FD ]
Line_8 $$ Configuration conf = null-->Line_19 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEdits.getPath())[ FD ]
Line_49 $$ fileSys = cluster.getFileSystem()-->Line_75 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_46 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_73 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_8 $$ Configuration conf = null-->Line_95 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEdits + "," + newEditsDir.getPath())[ FD ]
Line_8 $$ Configuration conf = null-->Line_44 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_46 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_71 $$ cluster.waitActive()[ FD ]
Line_18 $$ conf = new HdfsConfiguration()-->Line_94 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEdits.getPath() + "," + newNameDir.getPath())[ FD ]
Line_9 $$ FileSystem fileSys = null-->Line_79 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_27 $$ fileSys = cluster.getFileSystem()-->Line_80 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_9 $$ FileSystem fileSys = null[ CD ]
Line_8 $$ Configuration conf = null-->Line_97 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_26 $$ secondary = startSecondaryNameNode(conf)-->Line_48 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_38 $$ conf = new HdfsConfiguration()-->Line_96 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_49 $$ fileSys = cluster.getFileSystem()-->Line_83 $$ fileSys.close()[ FD ]
Line_27 $$ fileSys = cluster.getFileSystem()-->Line_76 $$ assertTrue(fileSys.exists(file2))[ FD ]
Line_7 $$ SecondaryNameNode secondary = null-->Line_32 $$ secondary.doCheckpoint()[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_73 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_49 $$ fileSys = cluster.getFileSystem()-->Line_77 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_9 $$ FileSystem fileSys = null-->Line_54 $$ DFSTestUtil.createFile(fileSys, file2, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_7 $$ SecondaryNameNode secondary = null-->Line_81 $$ secondary.doCheckpoint()[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_70 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ CD ]
Line_27 $$ fileSys = cluster.getFileSystem()-->Line_73 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_18 $$ conf = new HdfsConfiguration()-->Line_64 $$ conf = new HdfsConfiguration()[ FD ]
Line_9 $$ FileSystem fileSys = null-->Line_110 $$ fileSys.close()[ FD ]
Line_64 $$ conf = new HdfsConfiguration()-->Line_66 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, newEditsDir.getPath())[ FD ]
Line_3 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_29 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_27 $$ fileSys = cluster.getFileSystem()-->Line_75 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_47 $$ cluster.waitActive()[ FD ]
Line_7 $$ SecondaryNameNode secondary = null-->Line_26 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_64 $$ conf = new HdfsConfiguration()-->Line_101 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_18 $$ conf = new HdfsConfiguration()-->Line_101 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_100 $$ cluster.waitActive()[ CD ]
Line_18 $$ conf = new HdfsConfiguration()-->Line_38 $$ conf = new HdfsConfiguration()[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_92 $$ assertTrue(FileUtil.fullyDelete(new File(checkpointNameAndEdits, "current")))[ CD ]
Line_8 $$ Configuration conf = null-->Line_67 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath())[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_24 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_115 $$ checkImageAndEditsFilesExistence(checkpointNameAndEdits, true, true)[ CD ]
Line_5 $$ Path file3 = new Path("TestNameEditsConfigs3")-->Line_107 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_101 $$ secondary = startSecondaryNameNode(conf)-->Line_112 $$ secondary.shutdown()[ FD ]
Line_24 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_49 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_25 $$ cluster.waitActive()[ CD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_8 $$ Configuration conf = null[ CD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_21 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameAndEdits.getPath())[ CD ]
Line_3 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_51 $$ assertTrue(fileSys.exists(file1))[ FD ]
Line_93 $$ conf = new HdfsConfiguration()-->Line_94 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEdits.getPath() + "," + newNameDir.getPath())[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_99 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ CD ]
Line_24 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_59 $$ cluster.shutdown()[ FD ]
Line_18 $$ conf = new HdfsConfiguration()-->Line_68 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath())[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_64 $$ conf = new HdfsConfiguration()[ CD ]
Line_18 $$ conf = new HdfsConfiguration()-->Line_19 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEdits.getPath())[ FD ]
Line_48 $$ secondary = startSecondaryNameNode(conf)-->Line_85 $$ secondary.shutdown()[ FD ]
Line_14 $$ final File checkpointEditsDir = new File(base_dir, "secondedits")-->Line_68 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath())[ FD ]
Line_99 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_102 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_49 $$ fileSys = cluster.getFileSystem()-->Line_102 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_15 $$ final File checkpointNameAndEdits = new File(base_dir, "second_name_and_edits")[ CD ]
Line_93 $$ conf = new HdfsConfiguration()-->Line_98 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_7 $$ SecondaryNameNode secondary = null-->Line_112 $$ secondary.shutdown()[ FD ]
Line_9 $$ FileSystem fileSys = null-->Line_34 $$ fileSys.close()[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_44 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath() + "," + checkpointNameAndEdits.getPath())[ CD ]
Line_72 $$ secondary = startSecondaryNameNode(conf)-->Line_101 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_65 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, newNameDir.getPath())[ CD ]
Line_18 $$ conf = new HdfsConfiguration()-->Line_22 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointNameAndEdits.getPath())[ FD ]
Line_27 $$ fileSys = cluster.getFileSystem()-->Line_51 $$ assertTrue(fileSys.exists(file1))[ FD ]
Line_9 $$ FileSystem fileSys = null-->Line_80 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_8 $$ Configuration conf = null-->Line_18 $$ conf = new HdfsConfiguration()[ FD ]
Line_38 $$ conf = new HdfsConfiguration()-->Line_94 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEdits.getPath() + "," + newNameDir.getPath())[ FD ]
Line_7 $$ SecondaryNameNode secondary = null-->Line_108 $$ secondary.doCheckpoint()[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_62 $$ FSImageTestUtil.assertParallelFilesAreIdentical(allCurrentDirs, ImmutableSet.of("VERSION"))[ CD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_11 $$ final File newEditsDir = new File(base_dir, "edits")[ CD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_17 $$ ImmutableList<File> imageCurrentDirs = ImmutableList.of(new File(nameAndEdits, "current"), new File(newNameDir, "current"), new File(checkpointNameAndEdits, "current"), new File(checkpointNameDir, "current"))[ CD ]
Line_24 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_99 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_24 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_70 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_27 $$ fileSys = cluster.getFileSystem()-->Line_83 $$ fileSys.close()[ FD ]
Line_8 $$ Configuration conf = null-->Line_69 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_26 $$ secondary = startSecondaryNameNode(conf)-->Line_108 $$ secondary.doCheckpoint()[ FD ]
Line_48 $$ secondary = startSecondaryNameNode(conf)-->Line_81 $$ secondary.doCheckpoint()[ FD ]
Line_8 $$ Configuration conf = null-->Line_23 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_13 $$ final File checkpointNameDir = new File(base_dir, "secondname")-->Line_67 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath())[ FD ]
Line_15 $$ final File checkpointNameAndEdits = new File(base_dir, "second_name_and_edits")-->Line_97 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_66 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, newEditsDir.getPath())[ CD ]
Line_18 $$ conf = new HdfsConfiguration()-->Line_65 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, newNameDir.getPath())[ FD ]
Line_70 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_100 $$ cluster.waitActive()[ FD ]
Line_15 $$ final File checkpointNameAndEdits = new File(base_dir, "second_name_and_edits")-->Line_115 $$ checkImageAndEditsFilesExistence(checkpointNameAndEdits, true, true)[ FD ]
Line_5 $$ Path file3 = new Path("TestNameEditsConfigs3")-->Line_79 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_27 $$ fileSys = cluster.getFileSystem()[ CD ]
Line_12 $$ final File nameAndEdits = new File(base_dir, "name_and_edits")-->Line_20 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEdits.getPath())[ FD ]
Line_72 $$ secondary = startSecondaryNameNode(conf)-->Line_108 $$ secondary.doCheckpoint()[ FD ]
Line_15 $$ final File checkpointNameAndEdits = new File(base_dir, "second_name_and_edits")-->Line_22 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointNameAndEdits.getPath())[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_46 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ CD ]
Line_49 $$ fileSys = cluster.getFileSystem()-->Line_52 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_73 $$ fileSys = cluster.getFileSystem()-->Line_83 $$ fileSys.close()[ FD ]
Line_18 $$ conf = new HdfsConfiguration()-->Line_97 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_27 $$ fileSys = cluster.getFileSystem()-->Line_110 $$ fileSys.close()[ FD ]
Line_70 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_111 $$ cluster.shutdown()[ FD ]
Line_46 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_47 $$ cluster.waitActive()[ FD ]
Line_73 $$ fileSys = cluster.getFileSystem()-->Line_106 $$ assertTrue(fileSys.exists(file3))[ FD ]
Line_10 $$ final File newNameDir = new File(base_dir, "name")-->Line_39 $$ assertTrue(newNameDir.mkdir())[ FD ]
Line_64 $$ conf = new HdfsConfiguration()-->Line_98 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_49 $$ fileSys = cluster.getFileSystem()-->Line_105 $$ assertTrue(!fileSys.exists(file2))[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_73 $$ fileSys = cluster.getFileSystem()[ CD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_26 $$ secondary = startSecondaryNameNode(conf)[ CD ]
Line_38 $$ conf = new HdfsConfiguration()-->Line_45 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_10 $$ final File newNameDir = new File(base_dir, "name")-->Line_65 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, newNameDir.getPath())[ FD ]
Line_48 $$ secondary = startSecondaryNameNode(conf)-->Line_108 $$ secondary.doCheckpoint()[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_72 $$ secondary = startSecondaryNameNode(conf)[ CD ]
Line_73 $$ fileSys = cluster.getFileSystem()-->Line_104 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_70 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_102 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_64 $$ conf = new HdfsConfiguration()-->Line_69 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_18 $$ conf = new HdfsConfiguration()-->Line_26 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_27 $$ fileSys = cluster.getFileSystem()-->Line_106 $$ assertTrue(fileSys.exists(file3))[ FD ]
Line_48 $$ secondary = startSecondaryNameNode(conf)-->Line_101 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_3 $$ Path file1 = new Path("TestNameEditsConfigs1")[ CD ]
Line_93 $$ conf = new HdfsConfiguration()-->Line_97 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_27 $$ fileSys = cluster.getFileSystem()-->Line_53 $$ cleanupFile(fileSys, file1)[ FD ]
Line_27 $$ fileSys = cluster.getFileSystem()-->Line_55 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_10 $$ final File newNameDir = new File(base_dir, "name")-->Line_87 $$ checkImageAndEditsFilesExistence(newNameDir, true, false)[ FD ]
Line_9 $$ FileSystem fileSys = null-->Line_107 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_38 $$ conf = new HdfsConfiguration()[ CD ]
Line_38 $$ conf = new HdfsConfiguration()-->Line_97 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_35 $$ cluster.shutdown()[ FD ]
Line_46 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_49 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_9 $$ FileSystem fileSys = null-->Line_104 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_5 $$ Path file3 = new Path("TestNameEditsConfigs3")-->Line_106 $$ assertTrue(fileSys.exists(file3))[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_10 $$ final File newNameDir = new File(base_dir, "name")[ CD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_94 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEdits.getPath() + "," + newNameDir.getPath())[ CD ]
Line_46 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_59 $$ cluster.shutdown()[ FD ]
Line_9 $$ FileSystem fileSys = null-->Line_30 $$ DFSTestUtil.createFile(fileSys, file1, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_9 $$ FileSystem fileSys = null-->Line_52 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_12 $$ final File nameAndEdits = new File(base_dir, "name_and_edits")[ CD ]
Line_102 $$ fileSys = cluster.getFileSystem()-->Line_104 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_26 $$ secondary = startSecondaryNameNode(conf)-->Line_85 $$ secondary.shutdown()[ FD ]
Line_48 $$ secondary = startSecondaryNameNode(conf)-->Line_60 $$ secondary.shutdown()[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_46 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_38 $$ conf = new HdfsConfiguration()-->Line_48 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_8 $$ Configuration conf = null-->Line_45 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_9 $$ FileSystem fileSys = null-->Line_78 $$ cleanupFile(fileSys, file2)[ FD ]
Line_27 $$ fileSys = cluster.getFileSystem()-->Line_104 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_12 $$ final File nameAndEdits = new File(base_dir, "name_and_edits")-->Line_94 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEdits.getPath() + "," + newNameDir.getPath())[ FD ]
Line_38 $$ conf = new HdfsConfiguration()-->Line_67 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath())[ FD ]
Line_73 $$ fileSys = cluster.getFileSystem()-->Line_76 $$ assertTrue(fileSys.exists(file2))[ FD ]
Line_7 $$ SecondaryNameNode secondary = null-->Line_36 $$ secondary.shutdown()[ FD ]
Line_8 $$ Configuration conf = null-->Line_38 $$ conf = new HdfsConfiguration()[ FD ]
Line_38 $$ conf = new HdfsConfiguration()-->Line_101 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_38 $$ conf = new HdfsConfiguration()-->Line_69 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_27 $$ fileSys = cluster.getFileSystem()-->Line_52 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_12 $$ final File nameAndEdits = new File(base_dir, "name_and_edits")-->Line_19 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEdits.getPath())[ FD ]
Line_7 $$ SecondaryNameNode secondary = null-->Line_72 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_73 $$ fileSys = cluster.getFileSystem()-->Line_79 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_102 $$ fileSys = cluster.getFileSystem()-->Line_110 $$ fileSys.close()[ FD ]
Line_73 $$ fileSys = cluster.getFileSystem()-->Line_110 $$ fileSys.close()[ FD ]
Line_16 $$ ImmutableList<File> allCurrentDirs = ImmutableList.of(new File(nameAndEdits, "current"), new File(newNameDir, "current"), new File(newEditsDir, "current"), new File(checkpointNameAndEdits, "current"), new File(checkpointNameDir, "current"), new File(checkpointEditsDir, "current"))-->Line_62 $$ FSImageTestUtil.assertParallelFilesAreIdentical(allCurrentDirs, ImmutableSet.of("VERSION"))[ FD ]
Line_38 $$ conf = new HdfsConfiguration()-->Line_44 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_3 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_31 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_73 $$ fileSys = cluster.getFileSystem()-->Line_77 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_64 $$ conf = new HdfsConfiguration()-->Line_96 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_38 $$ conf = new HdfsConfiguration()-->Line_93 $$ conf = new HdfsConfiguration()[ FD ]
Line_9 $$ FileSystem fileSys = null-->Line_75 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_4 $$ Path file2 = new Path("TestNameEditsConfigs2")[ CD ]
Line_49 $$ fileSys = cluster.getFileSystem()-->Line_55 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_100 $$ cluster.waitActive()[ FD ]
Line_9 $$ FileSystem fileSys = null-->Line_31 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_24 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_102 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_49 $$ fileSys = cluster.getFileSystem()-->Line_110 $$ fileSys.close()[ FD ]
Line_70 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_99 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_10 $$ final File newNameDir = new File(base_dir, "name")-->Line_41 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEdits.getPath() + "," + newNameDir.getPath())[ FD ]
Line_24 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_35 $$ cluster.shutdown()[ FD ]
Line_7 $$ SecondaryNameNode secondary = null-->Line_60 $$ secondary.shutdown()[ FD ]
Line_13 $$ final File checkpointNameDir = new File(base_dir, "secondname")-->Line_96 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_15 $$ final File checkpointNameAndEdits = new File(base_dir, "second_name_and_edits")-->Line_44 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_63 $$ FSImageTestUtil.assertSameNewestImage(imageCurrentDirs)[ CD ]
Line_99 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_111 $$ cluster.shutdown()[ FD ]
Line_27 $$ fileSys = cluster.getFileSystem()-->Line_105 $$ assertTrue(!fileSys.exists(file2))[ FD ]
Line_9 $$ FileSystem fileSys = null-->Line_102 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_12 $$ final File nameAndEdits = new File(base_dir, "name_and_edits")-->Line_42 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEdits.getPath() + "," + newEditsDir.getPath())[ FD ]
Line_38 $$ conf = new HdfsConfiguration()-->Line_43 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_64 $$ conf = new HdfsConfiguration()-->Line_97 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_93 $$ conf = new HdfsConfiguration()-->Line_95 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEdits + "," + newEditsDir.getPath())[ FD ]
Line_27 $$ fileSys = cluster.getFileSystem()-->Line_58 $$ fileSys.close()[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_114 $$ checkImageAndEditsFilesExistence(nameAndEdits, true, true)[ CD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_91 $$ assertTrue(FileUtil.fullyDelete(new File(nameAndEdits, "current")))[ CD ]
Line_48 $$ secondary = startSecondaryNameNode(conf)-->Line_72 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_15 $$ final File checkpointNameAndEdits = new File(base_dir, "second_name_and_edits")-->Line_43 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_93 $$ conf = new HdfsConfiguration()[ CD ]
Line_11 $$ final File newEditsDir = new File(base_dir, "edits")-->Line_42 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEdits.getPath() + "," + newEditsDir.getPath())[ FD ]
Line_18 $$ conf = new HdfsConfiguration()-->Line_98 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_73 $$ fileSys = cluster.getFileSystem()-->Line_102 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_24 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_27 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_8 $$ Configuration conf = null-->Line_26 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_18 $$ conf = new HdfsConfiguration()-->Line_95 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEdits + "," + newEditsDir.getPath())[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_99 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_9 $$ FileSystem fileSys = null-->Line_29 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_46 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_99 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_13 $$ final File checkpointNameDir = new File(base_dir, "secondname")-->Line_43 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_7 $$ SecondaryNameNode secondary = null-->Line_56 $$ secondary.doCheckpoint()[ FD ]
Line_27 $$ fileSys = cluster.getFileSystem()-->Line_79 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_7 $$ SecondaryNameNode secondary = null-->Line_101 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_24 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_47 $$ cluster.waitActive()[ FD ]
Line_38 $$ conf = new HdfsConfiguration()-->Line_72 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_47 $$ cluster.waitActive()[ CD ]
Line_9 $$ FileSystem fileSys = null-->Line_76 $$ assertTrue(fileSys.exists(file2))[ FD ]
Line_18 $$ conf = new HdfsConfiguration()-->Line_20 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEdits.getPath())[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_88 $$ checkImageAndEditsFilesExistence(newEditsDir, false, true)[ CD ]
Line_49 $$ fileSys = cluster.getFileSystem()-->Line_78 $$ cleanupFile(fileSys, file2)[ FD ]
Line_8 $$ Configuration conf = null-->Line_48 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_18 $$ conf = new HdfsConfiguration()-->Line_45 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_49 $$ fileSys = cluster.getFileSystem()[ CD ]
Line_46 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_84 $$ cluster.shutdown()[ FD ]
Line_102 $$ fileSys = cluster.getFileSystem()-->Line_105 $$ assertTrue(!fileSys.exists(file2))[ FD ]
Line_8 $$ Configuration conf = null-->Line_20 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEdits.getPath())[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_102 $$ fileSys = cluster.getFileSystem()[ CD ]
Line_9 $$ FileSystem fileSys = null-->Line_106 $$ assertTrue(fileSys.exists(file3))[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_68 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath())[ CD ]
Line_18 $$ conf = new HdfsConfiguration()-->Line_96 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_41 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEdits.getPath() + "," + newNameDir.getPath())[ CD ]
Line_49 $$ fileSys = cluster.getFileSystem()-->Line_80 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_3 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_52 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_10 $$ final File newNameDir = new File(base_dir, "name")-->Line_94 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEdits.getPath() + "," + newNameDir.getPath())[ FD ]
Line_24 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_84 $$ cluster.shutdown()[ FD ]
Line_7 $$ SecondaryNameNode secondary = null-->Line_48 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_49 $$ fileSys = cluster.getFileSystem()-->Line_58 $$ fileSys.close()[ FD ]
Line_73 $$ fileSys = cluster.getFileSystem()-->Line_75 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_27 $$ fileSys = cluster.getFileSystem()-->Line_30 $$ DFSTestUtil.createFile(fileSys, file1, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_38 $$ conf = new HdfsConfiguration()-->Line_42 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEdits.getPath() + "," + newEditsDir.getPath())[ FD ]
Line_72 $$ secondary = startSecondaryNameNode(conf)-->Line_85 $$ secondary.shutdown()[ FD ]
Line_8 $$ Configuration conf = null-->Line_22 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointNameAndEdits.getPath())[ FD ]
Line_15 $$ final File checkpointNameAndEdits = new File(base_dir, "second_name_and_edits")-->Line_21 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameAndEdits.getPath())[ FD ]
Line_8 $$ Configuration conf = null-->Line_64 $$ conf = new HdfsConfiguration()[ FD ]
Line_49 $$ fileSys = cluster.getFileSystem()-->Line_79 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_90 $$ checkImageAndEditsFilesExistence(checkpointEditsDir, false, true)[ CD ]
Line_26 $$ secondary = startSecondaryNameNode(conf)-->Line_81 $$ secondary.doCheckpoint()[ FD ]
Line_27 $$ fileSys = cluster.getFileSystem()-->Line_31 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_38 $$ conf = new HdfsConfiguration()-->Line_95 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEdits + "," + newEditsDir.getPath())[ FD ]
Line_102 $$ fileSys = cluster.getFileSystem()-->Line_106 $$ assertTrue(fileSys.exists(file3))[ FD ]
Line_49 $$ fileSys = cluster.getFileSystem()-->Line_73 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_49 $$ fileSys = cluster.getFileSystem()-->Line_53 $$ cleanupFile(fileSys, file1)[ FD ]
Line_49 $$ fileSys = cluster.getFileSystem()-->Line_106 $$ assertTrue(fileSys.exists(file3))[ FD ]
Line_8 $$ Configuration conf = null-->Line_68 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath())[ FD ]
Line_26 $$ secondary = startSecondaryNameNode(conf)-->Line_60 $$ secondary.shutdown()[ FD ]
Line_8 $$ Configuration conf = null-->Line_98 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_102 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_18 $$ conf = new HdfsConfiguration()-->Line_43 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_99 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_100 $$ cluster.waitActive()[ FD ]
Line_64 $$ conf = new HdfsConfiguration()-->Line_94 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEdits.getPath() + "," + newNameDir.getPath())[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_14 $$ final File checkpointEditsDir = new File(base_dir, "secondedits")[ CD ]
Line_24 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_111 $$ cluster.shutdown()[ FD ]
Line_14 $$ final File checkpointEditsDir = new File(base_dir, "secondedits")-->Line_97 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_49 $$ fileSys = cluster.getFileSystem()-->Line_76 $$ assertTrue(fileSys.exists(file2))[ FD ]
Line_14 $$ final File checkpointEditsDir = new File(base_dir, "secondedits")-->Line_44 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_3 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_104 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_6 $$ MiniDFSCluster cluster = null[ CD ]
Line_3 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_75 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_38 $$ conf = new HdfsConfiguration()-->Line_68 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath())[ FD ]
Line_4 $$ Path file2 = new Path("TestNameEditsConfigs2")-->Line_55 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_8 $$ Configuration conf = null-->Line_96 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_8 $$ Configuration conf = null-->Line_72 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_24 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_100 $$ cluster.waitActive()[ FD ]
Line_73 $$ fileSys = cluster.getFileSystem()-->Line_107 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_19 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEdits.getPath())[ CD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_87 $$ checkImageAndEditsFilesExistence(newNameDir, true, false)[ CD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_97 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath() + "," + checkpointNameAndEdits.getPath())[ CD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_71 $$ cluster.waitActive()[ FD ]
Line_46 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_102 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_101 $$ secondary = startSecondaryNameNode(conf)[ CD ]
Line_26 $$ secondary = startSecondaryNameNode(conf)-->Line_101 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_7 $$ SecondaryNameNode secondary = null-->Line_85 $$ secondary.shutdown()[ FD ]
Line_8 $$ Configuration conf = null-->Line_65 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, newNameDir.getPath())[ FD ]
Line_24 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_46 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_59 $$ cluster.shutdown()[ FD ]
Line_11 $$ final File newEditsDir = new File(base_dir, "edits")-->Line_40 $$ assertTrue(newEditsDir.mkdir())[ FD ]
Line_64 $$ conf = new HdfsConfiguration()-->Line_67 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath())[ FD ]
Line_9 $$ FileSystem fileSys = null-->Line_73 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_70 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_73 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_9 $$ FileSystem fileSys = null-->Line_27 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_2 $$ public void testNameEditsConfigs() throws Exception -->Line_43 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath() + "," + checkpointNameAndEdits.getPath())[ CD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_49 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_24 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build()-->Line_71 $$ cluster.waitActive()[ FD ]
