Line_17 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_69 $$ assertTrue(fileSys.exists(file1))[ FD ]
Line_20 $$ MiniDFSCluster cluster = null-->Line_134 $$ cluster.shutdown()[ FD ]
Line_22 $$ Configuration conf = null-->Line_35 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEdits.getPath())[ FD ]
Line_90 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_93 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_22 $$ Configuration conf = null-->Line_62 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_20 $$ MiniDFSCluster cluster = null-->Line_65 $$ cluster.waitActive()[ FD ]
Line_29 $$ final File checkpointNameAndEdits = new File(base_dir, "second_name_and_edits")-->Line_36 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameAndEdits.getPath())[ FD ]
Line_31 $$ ImmutableList<File> imageCurrentDirs = ImmutableList.of(new File(nameAndEdits, "current"), new File(newNameDir, "current"), new File(checkpointNameAndEdits, "current"), new File(checkpointNameDir, "current"))-->Line_81 $$ FSImageTestUtil.assertSameNewestImage(imageCurrentDirs)[ FD ]
Line_66 $$ secondary = startSecondaryNameNode(conf)-->Line_101 $$ secondary.doCheckpoint()[ FD ]
Line_20 $$ MiniDFSCluster cluster = null-->Line_67 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_42 $$ secondary = startSecondaryNameNode(conf)-->Line_48 $$ secondary.doCheckpoint()[ FD ]
Line_23 $$ FileSystem fileSys = null-->Line_50 $$ fileSys.close()[ FD ]
Line_42 $$ secondary = startSecondaryNameNode(conf)-->Line_101 $$ secondary.doCheckpoint()[ FD ]
Line_93 $$ fileSys = cluster.getFileSystem()-->Line_103 $$ fileSys.close()[ FD ]
Line_23 $$ FileSystem fileSys = null-->Line_125 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_17 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_70 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_116 $$ conf = new HdfsConfiguration()-->Line_124 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_90 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_122 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_43 $$ fileSys = cluster.getFileSystem()-->Line_130 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_23 $$ FileSystem fileSys = null-->Line_70 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_21 $$ SecondaryNameNode secondary = null-->Line_52 $$ secondary.shutdown()[ FD ]
Line_22 $$ Configuration conf = null-->Line_36 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameAndEdits.getPath())[ FD ]
Line_43 $$ fileSys = cluster.getFileSystem()-->Line_129 $$ assertTrue(fileSys.exists(file3))[ FD ]
Line_20 $$ MiniDFSCluster cluster = null-->Line_104 $$ cluster.shutdown()[ FD ]
Line_43 $$ fileSys = cluster.getFileSystem()-->Line_72 $$ DFSTestUtil.createFile(fileSys, file2, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_20 $$ MiniDFSCluster cluster = null-->Line_41 $$ cluster.waitActive()[ FD ]
Line_20 $$ MiniDFSCluster cluster = null-->Line_90 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_43 $$ fileSys = cluster.getFileSystem()-->Line_99 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_66 $$ secondary = startSecondaryNameNode(conf)-->Line_105 $$ secondary.shutdown()[ FD ]
Line_20 $$ MiniDFSCluster cluster = null-->Line_123 $$ cluster.waitActive()[ FD ]
Line_43 $$ fileSys = cluster.getFileSystem()-->Line_125 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_43 $$ fileSys = cluster.getFileSystem()-->Line_71 $$ cleanupFile(fileSys, file1)[ FD ]
Line_24 $$ final File newNameDir = new File(base_dir, "name")-->Line_85 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, newNameDir.getPath())[ FD ]
Line_22 $$ Configuration conf = null-->Line_58 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEdits.getPath() + "," + newNameDir.getPath())[ FD ]
Line_24 $$ final File newNameDir = new File(base_dir, "name")-->Line_58 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEdits.getPath() + "," + newNameDir.getPath())[ FD ]
Line_17 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_127 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_122 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_134 $$ cluster.shutdown()[ FD ]
Line_43 $$ fileSys = cluster.getFileSystem()-->Line_97 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_20 $$ MiniDFSCluster cluster = null-->Line_77 $$ cluster.shutdown()[ FD ]
Line_43 $$ fileSys = cluster.getFileSystem()-->Line_76 $$ fileSys.close()[ FD ]
Line_17 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_95 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_93 $$ fileSys = cluster.getFileSystem()-->Line_127 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_23 $$ FileSystem fileSys = null-->Line_73 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_28 $$ final File checkpointEditsDir = new File(base_dir, "secondedits")-->Line_88 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath())[ FD ]
Line_93 $$ fileSys = cluster.getFileSystem()-->Line_98 $$ cleanupFile(fileSys, file2)[ FD ]
Line_26 $$ final File nameAndEdits = new File(base_dir, "name_and_edits")-->Line_58 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEdits.getPath() + "," + newNameDir.getPath())[ FD ]
Line_23 $$ FileSystem fileSys = null-->Line_69 $$ assertTrue(fileSys.exists(file1))[ FD ]
Line_23 $$ FileSystem fileSys = null-->Line_76 $$ fileSys.close()[ FD ]
Line_93 $$ fileSys = cluster.getFileSystem()-->Line_130 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_93 $$ fileSys = cluster.getFileSystem()-->Line_133 $$ fileSys.close()[ FD ]
Line_66 $$ secondary = startSecondaryNameNode(conf)-->Line_124 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_42 $$ secondary = startSecondaryNameNode(conf)-->Line_74 $$ secondary.doCheckpoint()[ FD ]
Line_26 $$ final File nameAndEdits = new File(base_dir, "name_and_edits")-->Line_34 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEdits.getPath())[ FD ]
Line_27 $$ final File checkpointNameDir = new File(base_dir, "secondname")-->Line_87 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath())[ FD ]
Line_42 $$ secondary = startSecondaryNameNode(conf)-->Line_105 $$ secondary.shutdown()[ FD ]
Line_19 $$ Path file3 = new Path("TestNameEditsConfigs3")-->Line_129 $$ assertTrue(fileSys.exists(file3))[ FD ]
Line_29 $$ final File checkpointNameAndEdits = new File(base_dir, "second_name_and_edits")-->Line_61 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_42 $$ secondary = startSecondaryNameNode(conf)-->Line_135 $$ secondary.shutdown()[ FD ]
Line_22 $$ Configuration conf = null-->Line_37 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointNameAndEdits.getPath())[ FD ]
Line_67 $$ fileSys = cluster.getFileSystem()-->Line_128 $$ assertTrue(!fileSys.exists(file2))[ FD ]
Line_66 $$ secondary = startSecondaryNameNode(conf)-->Line_135 $$ secondary.shutdown()[ FD ]
Line_67 $$ fileSys = cluster.getFileSystem()-->Line_69 $$ assertTrue(fileSys.exists(file1))[ FD ]
Line_22 $$ Configuration conf = null-->Line_59 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEdits.getPath() + "," + newEditsDir.getPath())[ FD ]
Line_43 $$ fileSys = cluster.getFileSystem()-->Line_50 $$ fileSys.close()[ FD ]
Line_116 $$ conf = new HdfsConfiguration()-->Line_118 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEdits + "," + newEditsDir.getPath())[ FD ]
Line_23 $$ FileSystem fileSys = null-->Line_97 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_93 $$ fileSys = cluster.getFileSystem()-->Line_97 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_67 $$ fileSys = cluster.getFileSystem()-->Line_103 $$ fileSys.close()[ FD ]
Line_23 $$ FileSystem fileSys = null-->Line_130 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_93 $$ fileSys = cluster.getFileSystem()-->Line_125 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_24 $$ final File newNameDir = new File(base_dir, "name")-->Line_117 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEdits.getPath() + "," + newNameDir.getPath())[ FD ]
Line_29 $$ final File checkpointNameAndEdits = new File(base_dir, "second_name_and_edits")-->Line_119 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_26 $$ final File nameAndEdits = new File(base_dir, "name_and_edits")-->Line_35 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEdits.getPath())[ FD ]
Line_67 $$ fileSys = cluster.getFileSystem()-->Line_76 $$ fileSys.close()[ FD ]
Line_22 $$ Configuration conf = null-->Line_42 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_122 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_125 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_22 $$ Configuration conf = null-->Line_38 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_20 $$ MiniDFSCluster cluster = null-->Line_43 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_43 $$ fileSys = cluster.getFileSystem()-->Line_46 $$ DFSTestUtil.createFile(fileSys, file1, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_43 $$ fileSys = cluster.getFileSystem()-->Line_69 $$ assertTrue(fileSys.exists(file1))[ FD ]
Line_67 $$ fileSys = cluster.getFileSystem()-->Line_73 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_23 $$ FileSystem fileSys = null-->Line_127 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_43 $$ fileSys = cluster.getFileSystem()-->Line_127 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_67 $$ fileSys = cluster.getFileSystem()-->Line_130 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_25 $$ final File newEditsDir = new File(base_dir, "edits")-->Line_86 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, newEditsDir.getPath())[ FD ]
Line_43 $$ fileSys = cluster.getFileSystem()-->Line_70 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_67 $$ fileSys = cluster.getFileSystem()-->Line_97 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_29 $$ final File checkpointNameAndEdits = new File(base_dir, "second_name_and_edits")-->Line_60 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_26 $$ final File nameAndEdits = new File(base_dir, "name_and_edits")-->Line_59 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEdits.getPath() + "," + newEditsDir.getPath())[ FD ]
Line_116 $$ conf = new HdfsConfiguration()-->Line_121 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_42 $$ secondary = startSecondaryNameNode(conf)-->Line_92 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_27 $$ final File checkpointNameDir = new File(base_dir, "secondname")-->Line_110 $$ checkImageAndEditsFilesExistence(checkpointNameDir, true, false)[ FD ]
Line_43 $$ fileSys = cluster.getFileSystem()-->Line_133 $$ fileSys.close()[ FD ]
Line_90 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_104 $$ cluster.shutdown()[ FD ]
Line_22 $$ Configuration conf = null-->Line_88 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath())[ FD ]
Line_22 $$ Configuration conf = null-->Line_118 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEdits + "," + newEditsDir.getPath())[ FD ]
Line_90 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_91 $$ cluster.waitActive()[ FD ]
Line_19 $$ Path file3 = new Path("TestNameEditsConfigs3")-->Line_100 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_90 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_125 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_20 $$ MiniDFSCluster cluster = null-->Line_91 $$ cluster.waitActive()[ FD ]
Line_22 $$ Configuration conf = null-->Line_34 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEdits.getPath())[ FD ]
Line_67 $$ fileSys = cluster.getFileSystem()-->Line_127 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_67 $$ fileSys = cluster.getFileSystem()-->Line_99 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_92 $$ secondary = startSecondaryNameNode(conf)-->Line_124 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_19 $$ Path file3 = new Path("TestNameEditsConfigs3")-->Line_130 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_67 $$ fileSys = cluster.getFileSystem()-->Line_71 $$ cleanupFile(fileSys, file1)[ FD ]
Line_42 $$ secondary = startSecondaryNameNode(conf)-->Line_66 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_21 $$ SecondaryNameNode secondary = null-->Line_74 $$ secondary.doCheckpoint()[ FD ]
Line_23 $$ FileSystem fileSys = null-->Line_47 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_116 $$ conf = new HdfsConfiguration()-->Line_119 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_93 $$ fileSys = cluster.getFileSystem()-->Line_95 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_18 $$ Path file2 = new Path("TestNameEditsConfigs2")-->Line_128 $$ assertTrue(!fileSys.exists(file2))[ FD ]
Line_92 $$ secondary = startSecondaryNameNode(conf)-->Line_105 $$ secondary.shutdown()[ FD ]
Line_23 $$ FileSystem fileSys = null-->Line_100 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_28 $$ final File checkpointEditsDir = new File(base_dir, "secondedits")-->Line_120 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_22 $$ Configuration conf = null-->Line_92 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_90 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_134 $$ cluster.shutdown()[ FD ]
Line_23 $$ FileSystem fileSys = null-->Line_103 $$ fileSys.close()[ FD ]
Line_23 $$ FileSystem fileSys = null-->Line_71 $$ cleanupFile(fileSys, file1)[ FD ]
Line_43 $$ fileSys = cluster.getFileSystem()-->Line_73 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_25 $$ final File newEditsDir = new File(base_dir, "edits")-->Line_109 $$ checkImageAndEditsFilesExistence(newEditsDir, false, true)[ FD ]
Line_93 $$ fileSys = cluster.getFileSystem()-->Line_100 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_125 $$ fileSys = cluster.getFileSystem()-->Line_127 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_21 $$ SecondaryNameNode secondary = null-->Line_66 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_23 $$ FileSystem fileSys = null-->Line_46 $$ DFSTestUtil.createFile(fileSys, file1, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_66 $$ secondary = startSecondaryNameNode(conf)-->Line_78 $$ secondary.shutdown()[ FD ]
Line_25 $$ final File newEditsDir = new File(base_dir, "edits")-->Line_118 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEdits + "," + newEditsDir.getPath())[ FD ]
Line_23 $$ FileSystem fileSys = null-->Line_98 $$ cleanupFile(fileSys, file2)[ FD ]
Line_43 $$ fileSys = cluster.getFileSystem()-->Line_128 $$ assertTrue(!fileSys.exists(file2))[ FD ]
Line_125 $$ fileSys = cluster.getFileSystem()-->Line_130 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_66 $$ secondary = startSecondaryNameNode(conf)-->Line_74 $$ secondary.doCheckpoint()[ FD ]
Line_28 $$ final File checkpointEditsDir = new File(base_dir, "secondedits")-->Line_111 $$ checkImageAndEditsFilesExistence(checkpointEditsDir, false, true)[ FD ]
Line_22 $$ Configuration conf = null-->Line_124 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_67 $$ fileSys = cluster.getFileSystem()-->Line_70 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_42 $$ secondary = startSecondaryNameNode(conf)-->Line_78 $$ secondary.shutdown()[ FD ]
Line_21 $$ SecondaryNameNode secondary = null-->Line_48 $$ secondary.doCheckpoint()[ FD ]
Line_25 $$ final File newEditsDir = new File(base_dir, "edits")-->Line_57 $$ assertTrue(newEditsDir.mkdir())[ FD ]
Line_93 $$ fileSys = cluster.getFileSystem()-->Line_128 $$ assertTrue(!fileSys.exists(file2))[ FD ]
Line_43 $$ fileSys = cluster.getFileSystem()-->Line_45 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_22 $$ Configuration conf = null-->Line_121 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_20 $$ MiniDFSCluster cluster = null-->Line_122 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()[ FD ]
Line_23 $$ FileSystem fileSys = null-->Line_45 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_20 $$ MiniDFSCluster cluster = null-->Line_93 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_124 $$ secondary = startSecondaryNameNode(conf)-->Line_135 $$ secondary.shutdown()[ FD ]
Line_25 $$ final File newEditsDir = new File(base_dir, "edits")-->Line_59 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, nameAndEdits.getPath() + "," + newEditsDir.getPath())[ FD ]
Line_22 $$ Configuration conf = null-->Line_61 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_92 $$ secondary = startSecondaryNameNode(conf)-->Line_131 $$ secondary.doCheckpoint()[ FD ]
Line_23 $$ FileSystem fileSys = null-->Line_95 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_17 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_47 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_21 $$ SecondaryNameNode secondary = null-->Line_135 $$ secondary.shutdown()[ FD ]
Line_17 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_46 $$ DFSTestUtil.createFile(fileSys, file1, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_67 $$ fileSys = cluster.getFileSystem()-->Line_98 $$ cleanupFile(fileSys, file2)[ FD ]
Line_23 $$ FileSystem fileSys = null-->Line_133 $$ fileSys.close()[ FD ]
Line_21 $$ SecondaryNameNode secondary = null-->Line_42 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_23 $$ FileSystem fileSys = null-->Line_129 $$ assertTrue(fileSys.exists(file3))[ FD ]
Line_18 $$ Path file2 = new Path("TestNameEditsConfigs2")-->Line_72 $$ DFSTestUtil.createFile(fileSys, file2, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_23 $$ FileSystem fileSys = null-->Line_67 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_21 $$ SecondaryNameNode secondary = null-->Line_131 $$ secondary.doCheckpoint()[ FD ]
Line_21 $$ SecondaryNameNode secondary = null-->Line_105 $$ secondary.shutdown()[ FD ]
Line_18 $$ Path file2 = new Path("TestNameEditsConfigs2")-->Line_96 $$ assertTrue(fileSys.exists(file2))[ FD ]
Line_18 $$ Path file2 = new Path("TestNameEditsConfigs2")-->Line_73 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_23 $$ FileSystem fileSys = null-->Line_96 $$ assertTrue(fileSys.exists(file2))[ FD ]
Line_22 $$ Configuration conf = null-->Line_66 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_67 $$ fileSys = cluster.getFileSystem()-->Line_129 $$ assertTrue(fileSys.exists(file3))[ FD ]
Line_67 $$ fileSys = cluster.getFileSystem()-->Line_125 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_19 $$ Path file3 = new Path("TestNameEditsConfigs3")-->Line_99 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_116 $$ conf = new HdfsConfiguration()-->Line_117 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEdits.getPath() + "," + newNameDir.getPath())[ FD ]
Line_43 $$ fileSys = cluster.getFileSystem()-->Line_103 $$ fileSys.close()[ FD ]
Line_28 $$ final File checkpointEditsDir = new File(base_dir, "secondedits")-->Line_61 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_125 $$ fileSys = cluster.getFileSystem()-->Line_133 $$ fileSys.close()[ FD ]
Line_26 $$ final File nameAndEdits = new File(base_dir, "name_and_edits")-->Line_137 $$ checkImageAndEditsFilesExistence(nameAndEdits, true, true)[ FD ]
Line_26 $$ final File nameAndEdits = new File(base_dir, "name_and_edits")-->Line_117 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEdits.getPath() + "," + newNameDir.getPath())[ FD ]
Line_24 $$ final File newNameDir = new File(base_dir, "name")-->Line_56 $$ assertTrue(newNameDir.mkdir())[ FD ]
Line_124 $$ secondary = startSecondaryNameNode(conf)-->Line_131 $$ secondary.doCheckpoint()[ FD ]
Line_42 $$ secondary = startSecondaryNameNode(conf)-->Line_124 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_22 $$ Configuration conf = null-->Line_86 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY, newEditsDir.getPath())[ FD ]
Line_22 $$ Configuration conf = null-->Line_120 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_67 $$ fileSys = cluster.getFileSystem()-->Line_93 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_22 $$ Configuration conf = null-->Line_60 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_66 $$ secondary = startSecondaryNameNode(conf)-->Line_131 $$ secondary.doCheckpoint()[ FD ]
Line_30 $$ ImmutableList<File> allCurrentDirs = ImmutableList.of(new File(nameAndEdits, "current"), new File(newNameDir, "current"), new File(newEditsDir, "current"), new File(checkpointNameAndEdits, "current"), new File(checkpointNameDir, "current"), new File(checkpointEditsDir, "current"))-->Line_80 $$ FSImageTestUtil.assertParallelFilesAreIdentical(allCurrentDirs, ImmutableSet.of("VERSION"))[ FD ]
Line_43 $$ fileSys = cluster.getFileSystem()-->Line_98 $$ cleanupFile(fileSys, file2)[ FD ]
Line_18 $$ Path file2 = new Path("TestNameEditsConfigs2")-->Line_97 $$ checkFile(fileSys, file2, replication)[ FD ]
Line_43 $$ fileSys = cluster.getFileSystem()-->Line_100 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_20 $$ MiniDFSCluster cluster = null-->Line_125 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_92 $$ secondary = startSecondaryNameNode(conf)-->Line_135 $$ secondary.shutdown()[ FD ]
Line_23 $$ FileSystem fileSys = null-->Line_43 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_29 $$ final File checkpointNameAndEdits = new File(base_dir, "second_name_and_edits")-->Line_37 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointNameAndEdits.getPath())[ FD ]
Line_21 $$ SecondaryNameNode secondary = null-->Line_92 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_21 $$ SecondaryNameNode secondary = null-->Line_101 $$ secondary.doCheckpoint()[ FD ]
Line_93 $$ fileSys = cluster.getFileSystem()-->Line_96 $$ assertTrue(fileSys.exists(file2))[ FD ]
Line_67 $$ fileSys = cluster.getFileSystem()-->Line_133 $$ fileSys.close()[ FD ]
Line_125 $$ fileSys = cluster.getFileSystem()-->Line_129 $$ assertTrue(fileSys.exists(file3))[ FD ]
Line_22 $$ Configuration conf = null-->Line_85 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, newNameDir.getPath())[ FD ]
Line_43 $$ fileSys = cluster.getFileSystem()-->Line_93 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_27 $$ final File checkpointNameDir = new File(base_dir, "secondname")-->Line_60 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_92 $$ secondary = startSecondaryNameNode(conf)-->Line_101 $$ secondary.doCheckpoint()[ FD ]
Line_90 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_123 $$ cluster.waitActive()[ FD ]
Line_22 $$ Configuration conf = null-->Line_117 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameAndEdits.getPath() + "," + newNameDir.getPath())[ FD ]
Line_42 $$ secondary = startSecondaryNameNode(conf)-->Line_131 $$ secondary.doCheckpoint()[ FD ]
Line_21 $$ SecondaryNameNode secondary = null-->Line_124 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_43 $$ fileSys = cluster.getFileSystem()-->Line_47 $$ checkFile(fileSys, file1, replication)[ FD ]
Line_22 $$ Configuration conf = null-->Line_116 $$ conf = new HdfsConfiguration()[ FD ]
Line_23 $$ FileSystem fileSys = null-->Line_99 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_93 $$ fileSys = cluster.getFileSystem()-->Line_99 $$ DFSTestUtil.createFile(fileSys, file3, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_22 $$ Configuration conf = null-->Line_119 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_43 $$ fileSys = cluster.getFileSystem()-->Line_95 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_23 $$ FileSystem fileSys = null-->Line_128 $$ assertTrue(!fileSys.exists(file2))[ FD ]
Line_93 $$ fileSys = cluster.getFileSystem()-->Line_129 $$ assertTrue(fileSys.exists(file3))[ FD ]
Line_42 $$ secondary = startSecondaryNameNode(conf)-->Line_52 $$ secondary.shutdown()[ FD ]
Line_122 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build()-->Line_123 $$ cluster.waitActive()[ FD ]
Line_29 $$ final File checkpointNameAndEdits = new File(base_dir, "second_name_and_edits")-->Line_138 $$ checkImageAndEditsFilesExistence(checkpointNameAndEdits, true, true)[ FD ]
Line_29 $$ final File checkpointNameAndEdits = new File(base_dir, "second_name_and_edits")-->Line_120 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_17 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_45 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_17 $$ Path file1 = new Path("TestNameEditsConfigs1")-->Line_71 $$ cleanupFile(fileSys, file1)[ FD ]
Line_67 $$ fileSys = cluster.getFileSystem()-->Line_72 $$ DFSTestUtil.createFile(fileSys, file2, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_67 $$ fileSys = cluster.getFileSystem()-->Line_95 $$ assertTrue(!fileSys.exists(file1))[ FD ]
Line_67 $$ fileSys = cluster.getFileSystem()-->Line_100 $$ checkFile(fileSys, file3, replication)[ FD ]
Line_22 $$ Configuration conf = null-->Line_89 $$ replication = (short) conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY, 3)[ FD ]
Line_66 $$ secondary = startSecondaryNameNode(conf)-->Line_92 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_22 $$ Configuration conf = null-->Line_87 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath())[ FD ]
Line_116 $$ conf = new HdfsConfiguration()-->Line_120 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, checkpointEditsDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_23 $$ FileSystem fileSys = null-->Line_93 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_27 $$ final File checkpointNameDir = new File(base_dir, "secondname")-->Line_119 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, checkpointNameDir.getPath() + "," + checkpointNameAndEdits.getPath())[ FD ]
Line_20 $$ MiniDFSCluster cluster = null-->Line_51 $$ cluster.shutdown()[ FD ]
Line_23 $$ FileSystem fileSys = null-->Line_72 $$ DFSTestUtil.createFile(fileSys, file2, FILE_SIZE, FILE_SIZE, BLOCK_SIZE, replication, SEED)[ FD ]
Line_43 $$ fileSys = cluster.getFileSystem()-->Line_67 $$ fileSys = cluster.getFileSystem()[ FD ]
Line_21 $$ SecondaryNameNode secondary = null-->Line_78 $$ secondary.shutdown()[ FD ]
Line_67 $$ fileSys = cluster.getFileSystem()-->Line_96 $$ assertTrue(fileSys.exists(file2))[ FD ]
Line_18 $$ Path file2 = new Path("TestNameEditsConfigs2")-->Line_98 $$ cleanupFile(fileSys, file2)[ FD ]
Line_125 $$ fileSys = cluster.getFileSystem()-->Line_128 $$ assertTrue(!fileSys.exists(file2))[ FD ]
Line_43 $$ fileSys = cluster.getFileSystem()-->Line_96 $$ assertTrue(fileSys.exists(file2))[ FD ]
