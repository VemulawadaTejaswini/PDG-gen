Line_15 $$ Maven maven = getComponent(Maven.class)-->Line_16 $$ result = getProjectsMethod.invoke(maven, request)[ FD ]
Line_16 $$ result = getProjectsMethod.invoke(maven, request)-->Line_26 $$ if (result != null) [ FD ]
Line_29 $$ MavenProject project = (MavenProject) p-->Line_35 $$ if (project.isExecutionRoot()) [ FD ]
Line_13 $$ final Method getProjectsMethod = DefaultMaven.class.getDeclaredMethod("getProjects", MavenExecutionRequest.class)-->Line_16 $$ result = getProjectsMethod.invoke(maven, request)[ FD ]
Line_2 $$ private MavenExecutionResult readProject(@NotNull final MavenExecutionRequest request) -->Line_16 $$ result = getProjectsMethod.invoke(maven, request)[ FD ]
Line_2 $$ private MavenExecutionResult readProject(@NotNull final MavenExecutionRequest request) -->Line_7 $$ Object result = null[ CD ]
Line_27 $$ MavenProjectBuilder builder = getComponent(MavenProjectBuilder.class)-->Line_31 $$ builder.calculateConcreteState(project, request.getProjectBuilderConfiguration(), false)[ FD ]
Line_2 $$ private MavenExecutionResult readProject(@NotNull final MavenExecutionRequest request) -->Line_9 $$ final File pomFile = new File(request.getPomFile())[ FD ]
Line_9 $$ final File pomFile = new File(request.getPomFile())-->Line_11 $$ throw new FileNotFoundException("File doesn't exist: " + pomFile.getPath())[ FD ]
Line_2 $$ private MavenExecutionResult readProject(@NotNull final MavenExecutionRequest request) -->Line_31 $$ builder.calculateConcreteState(project, request.getProjectBuilderConfiguration(), false)[ FD ]
Line_2 $$ private MavenExecutionResult readProject(@NotNull final MavenExecutionRequest request) -->Line_6 $$ final List<Exception> exceptions = new ArrayList<Exception>()[ CD ]
Line_2 $$ private MavenExecutionResult readProject(@NotNull final MavenExecutionRequest request) -->Line_3 $$ ProfileManager globalProfileManager = request.getGlobalProfileManager()[ FD ]
Line_2 $$ private MavenExecutionResult readProject(@NotNull final MavenExecutionRequest request) -->Line_4 $$ globalProfileManager.loadSettingsProfiles(request.getSettings())[ FD ]
Line_29 $$ MavenProject project = (MavenProject) p-->Line_31 $$ builder.calculateConcreteState(project, request.getProjectBuilderConfiguration(), false)[ FD ]
Line_2 $$ private MavenExecutionResult readProject(@NotNull final MavenExecutionRequest request) -->Line_26 $$ if (result != null) [ CD ]
Line_2 $$ private MavenExecutionResult readProject(@NotNull final MavenExecutionRequest request) -->Line_5 $$ MavenProject rootProject = null[ CD ]
Line_7 $$ Object result = null-->Line_26 $$ if (result != null) [ FD ]
Line_2 $$ private MavenExecutionResult readProject(@NotNull final MavenExecutionRequest request) -->Line_43 $$ return new MavenExecutionResult(rootProject, exceptions)[ CD ]
Line_26 $$ if (result != null) -->Line_27 $$ MavenProjectBuilder builder = getComponent(MavenProjectBuilder.class)[ CD ]
Line_7 $$ Object result = null-->Line_16 $$ result = getProjectsMethod.invoke(maven, request)[ FD ]
Line_9 $$ final File pomFile = new File(request.getPomFile())-->Line_10 $$ if (!pomFile.exists()) [ FD ]
Line_6 $$ final List<Exception> exceptions = new ArrayList<Exception>()-->Line_39 $$ if (rootProject == null && exceptions.isEmpty()) [ FD ]
Line_13 $$ final Method getProjectsMethod = DefaultMaven.class.getDeclaredMethod("getProjects", MavenExecutionRequest.class)-->Line_14 $$ getProjectsMethod.setAccessible(true)[ FD ]
Line_29 $$ MavenProject project = (MavenProject) p-->Line_36 $$ rootProject = project[ FD ]
Line_6 $$ final List<Exception> exceptions = new ArrayList<Exception>()-->Line_33 $$ exceptions.add(e)[ FD ]
Line_35 $$ if (project.isExecutionRoot()) -->Line_36 $$ rootProject = project[ CD ]
Line_3 $$ ProfileManager globalProfileManager = request.getGlobalProfileManager()-->Line_4 $$ globalProfileManager.loadSettingsProfiles(request.getSettings())[ FD ]
Line_2 $$ private MavenExecutionResult readProject(@NotNull final MavenExecutionRequest request) -->Line_4 $$ globalProfileManager.loadSettingsProfiles(request.getSettings())[ CD ]
Line_26 $$ if (result != null) -->Line_39 $$ if (rootProject == null && exceptions.isEmpty()) [ CD ]
Line_2 $$ private MavenExecutionResult readProject(@NotNull final MavenExecutionRequest request) -->Line_3 $$ ProfileManager globalProfileManager = request.getGlobalProfileManager()[ CD ]
Line_5 $$ MavenProject rootProject = null-->Line_36 $$ rootProject = project[ FD ]
