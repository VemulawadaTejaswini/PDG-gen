Line_2 $$ private SvnRemoteFileAnnotation annotateNonExisting(Pair<SvnChangeList, FilePath> pair, VcsFileRevision revision, Info info, Charset charset, final VirtualFile current) throws VcsException, SVNException, IOException -->Line_14 $$ SVNURL wasUrl = wcRootInfo.getURL()[ CD ]
Line_2 $$ private SvnRemoteFileAnnotation annotateNonExisting(Pair<SvnChangeList, FilePath> pair, VcsFileRevision revision, Info info, Charset charset, final VirtualFile current) throws VcsException, SVNException, IOException -->Line_22 $$ final SvnRemoteFileAnnotation result = new SvnRemoteFileAnnotation(myVcs, contents, revision.getRevisionNumber(), current)[ FD ]
Line_17 $$ wasUrl = wasUrl.appendPath(string, true)-->Line_24 $$ final boolean calculateMergeinfo = SvnConfiguration.getInstance(myVcs.getProject()).isShowMergeSourcesInAnnotate() && SvnUtil.checkRepositoryVersion15(myVcs, wasUrl.toString())[ FD ]
Line_2 $$ private SvnRemoteFileAnnotation annotateNonExisting(Pair<SvnChangeList, FilePath> pair, VcsFileRevision revision, Info info, Charset charset, final VirtualFile current) throws VcsException, SVNException, IOException -->Line_20 $$ byte[] data = SvnUtil.getFileContents(myVcs, SvnTarget.fromURL(wasUrl), svnRevision, svnRevision)[ CD ]
Line_7 $$ final String relativePath = FileUtil.getRelativePath(root.getPath(), wasFile.getPath(), File.separatorChar)-->Line_8 $$ if (relativePath == null)[ FD ]
Line_2 $$ private SvnRemoteFileAnnotation annotateNonExisting(Pair<SvnChangeList, FilePath> pair, VcsFileRevision revision, Info info, Charset charset, final VirtualFile current) throws VcsException, SVNException, IOException -->Line_26 $$ client.annotate(SvnTarget.fromURL(wasUrl, svnRevision), SVNRevision.create(1), svnRevision, calculateMergeinfo, getLogClientOptions(myVcs), annotateHandler)[ CD ]
Line_2 $$ private SvnRemoteFileAnnotation annotateNonExisting(Pair<SvnChangeList, FilePath> pair, VcsFileRevision revision, Info info, Charset charset, final VirtualFile current) throws VcsException, SVNException, IOException -->Line_12 $$ throw new VcsException("Can not find relative path for " + wasFile.getPath() + "@" + revision.getRevisionNumber().asString())[ FD ]
Line_3 $$ final File wasFile = pair.getSecond().getIOFile()-->Line_12 $$ throw new VcsException("Can not find relative path for " + wasFile.getPath() + "@" + revision.getRevisionNumber().asString())[ FD ]
Line_19 $$ final SVNRevision svnRevision = ((SvnRevisionNumber) revision.getRevisionNumber()).getRevision()-->Line_20 $$ byte[] data = SvnUtil.getFileContents(myVcs, SvnTarget.fromURL(wasUrl), svnRevision, svnRevision)[ FD ]
Line_2 $$ private SvnRemoteFileAnnotation annotateNonExisting(Pair<SvnChangeList, FilePath> pair, VcsFileRevision revision, Info info, Charset charset, final VirtualFile current) throws VcsException, SVNException, IOException -->Line_4 $$ final File root = getCommonAncestor(wasFile, info.getFile())[ CD ]
Line_2 $$ private SvnRemoteFileAnnotation annotateNonExisting(Pair<SvnChangeList, FilePath> pair, VcsFileRevision revision, Info info, Charset charset, final VirtualFile current) throws VcsException, SVNException, IOException -->Line_21 $$ final String contents = LoadTextUtil.getTextByBinaryPresentation(data, charset == null ? CharsetToolkit.UTF8_CHARSET : charset).toString()[ CD ]
Line_2 $$ private SvnRemoteFileAnnotation annotateNonExisting(Pair<SvnChangeList, FilePath> pair, VcsFileRevision revision, Info info, Charset charset, final VirtualFile current) throws VcsException, SVNException, IOException -->Line_8 $$ if (relativePath == null)[ CD ]
Line_14 $$ SVNURL wasUrl = wcRootInfo.getURL()-->Line_24 $$ final boolean calculateMergeinfo = SvnConfiguration.getInstance(myVcs.getProject()).isShowMergeSourcesInAnnotate() && SvnUtil.checkRepositoryVersion15(myVcs, wasUrl.toString())[ FD ]
Line_16 $$ for (String string : strings) -->Line_17 $$ wasUrl = wasUrl.appendPath(string, true)[ FD ]
Line_10 $$ Info wcRootInfo = myVcs.getInfo(root)-->Line_11 $$ if (wcRootInfo == null || wcRootInfo.getURL() == null) [ FD ]
Line_7 $$ final String relativePath = FileUtil.getRelativePath(root.getPath(), wasFile.getPath(), File.separatorChar)-->Line_15 $$ final String[] strings = relativePath.replace('\\', '/').split("/")[ FD ]
Line_2 $$ private SvnRemoteFileAnnotation annotateNonExisting(Pair<SvnChangeList, FilePath> pair, VcsFileRevision revision, Info info, Charset charset, final VirtualFile current) throws VcsException, SVNException, IOException -->Line_22 $$ final SvnRemoteFileAnnotation result = new SvnRemoteFileAnnotation(myVcs, contents, revision.getRevisionNumber(), current)[ CD ]
Line_2 $$ private SvnRemoteFileAnnotation annotateNonExisting(Pair<SvnChangeList, FilePath> pair, VcsFileRevision revision, Info info, Charset charset, final VirtualFile current) throws VcsException, SVNException, IOException -->Line_10 $$ Info wcRootInfo = myVcs.getInfo(root)[ CD ]
Line_2 $$ private SvnRemoteFileAnnotation annotateNonExisting(Pair<SvnChangeList, FilePath> pair, VcsFileRevision revision, Info info, Charset charset, final VirtualFile current) throws VcsException, SVNException, IOException -->Line_25 $$ AnnotateClient client = myVcs.getFactory().createAnnotateClient()[ CD ]
Line_20 $$ byte[] data = SvnUtil.getFileContents(myVcs, SvnTarget.fromURL(wasUrl), svnRevision, svnRevision)-->Line_21 $$ final String contents = LoadTextUtil.getTextByBinaryPresentation(data, charset == null ? CharsetToolkit.UTF8_CHARSET : charset).toString()[ FD ]
Line_23 $$ final AnnotationConsumer annotateHandler = createAnnotationHandler(ProgressManager.getInstance().getProgressIndicator(), result)-->Line_26 $$ client.annotate(SvnTarget.fromURL(wasUrl, svnRevision), SVNRevision.create(1), svnRevision, calculateMergeinfo, getLogClientOptions(myVcs), annotateHandler)[ FD ]
Line_14 $$ SVNURL wasUrl = wcRootInfo.getURL()-->Line_26 $$ client.annotate(SvnTarget.fromURL(wasUrl, svnRevision), SVNRevision.create(1), svnRevision, calculateMergeinfo, getLogClientOptions(myVcs), annotateHandler)[ FD ]
Line_2 $$ private SvnRemoteFileAnnotation annotateNonExisting(Pair<SvnChangeList, FilePath> pair, VcsFileRevision revision, Info info, Charset charset, final VirtualFile current) throws VcsException, SVNException, IOException -->Line_3 $$ final File wasFile = pair.getSecond().getIOFile()[ FD ]
Line_3 $$ final File wasFile = pair.getSecond().getIOFile()-->Line_4 $$ final File root = getCommonAncestor(wasFile, info.getFile())[ FD ]
Line_14 $$ SVNURL wasUrl = wcRootInfo.getURL()-->Line_20 $$ byte[] data = SvnUtil.getFileContents(myVcs, SvnTarget.fromURL(wasUrl), svnRevision, svnRevision)[ FD ]
Line_17 $$ wasUrl = wasUrl.appendPath(string, true)-->Line_20 $$ byte[] data = SvnUtil.getFileContents(myVcs, SvnTarget.fromURL(wasUrl), svnRevision, svnRevision)[ FD ]
Line_2 $$ private SvnRemoteFileAnnotation annotateNonExisting(Pair<SvnChangeList, FilePath> pair, VcsFileRevision revision, Info info, Charset charset, final VirtualFile current) throws VcsException, SVNException, IOException -->Line_27 $$ return result[ CD ]
Line_4 $$ final File root = getCommonAncestor(wasFile, info.getFile())-->Line_5 $$ if (root == null)[ FD ]
Line_2 $$ private SvnRemoteFileAnnotation annotateNonExisting(Pair<SvnChangeList, FilePath> pair, VcsFileRevision revision, Info info, Charset charset, final VirtualFile current) throws VcsException, SVNException, IOException -->Line_24 $$ final boolean calculateMergeinfo = SvnConfiguration.getInstance(myVcs.getProject()).isShowMergeSourcesInAnnotate() && SvnUtil.checkRepositoryVersion15(myVcs, wasUrl.toString())[ CD ]
Line_17 $$ wasUrl = wasUrl.appendPath(string, true)-->Line_26 $$ client.annotate(SvnTarget.fromURL(wasUrl, svnRevision), SVNRevision.create(1), svnRevision, calculateMergeinfo, getLogClientOptions(myVcs), annotateHandler)[ FD ]
Line_4 $$ final File root = getCommonAncestor(wasFile, info.getFile())-->Line_7 $$ final String relativePath = FileUtil.getRelativePath(root.getPath(), wasFile.getPath(), File.separatorChar)[ FD ]
Line_2 $$ private SvnRemoteFileAnnotation annotateNonExisting(Pair<SvnChangeList, FilePath> pair, VcsFileRevision revision, Info info, Charset charset, final VirtualFile current) throws VcsException, SVNException, IOException -->Line_3 $$ final File wasFile = pair.getSecond().getIOFile()[ CD ]
Line_2 $$ private SvnRemoteFileAnnotation annotateNonExisting(Pair<SvnChangeList, FilePath> pair, VcsFileRevision revision, Info info, Charset charset, final VirtualFile current) throws VcsException, SVNException, IOException -->Line_5 $$ if (root == null)[ CD ]
Line_2 $$ private SvnRemoteFileAnnotation annotateNonExisting(Pair<SvnChangeList, FilePath> pair, VcsFileRevision revision, Info info, Charset charset, final VirtualFile current) throws VcsException, SVNException, IOException -->Line_19 $$ final SVNRevision svnRevision = ((SvnRevisionNumber) revision.getRevisionNumber()).getRevision()[ CD ]
Line_2 $$ private SvnRemoteFileAnnotation annotateNonExisting(Pair<SvnChangeList, FilePath> pair, VcsFileRevision revision, Info info, Charset charset, final VirtualFile current) throws VcsException, SVNException, IOException -->Line_23 $$ final AnnotationConsumer annotateHandler = createAnnotationHandler(ProgressManager.getInstance().getProgressIndicator(), result)[ CD ]
Line_2 $$ private SvnRemoteFileAnnotation annotateNonExisting(Pair<SvnChangeList, FilePath> pair, VcsFileRevision revision, Info info, Charset charset, final VirtualFile current) throws VcsException, SVNException, IOException -->Line_7 $$ final String relativePath = FileUtil.getRelativePath(root.getPath(), wasFile.getPath(), File.separatorChar)[ CD ]
Line_4 $$ final File root = getCommonAncestor(wasFile, info.getFile())-->Line_10 $$ Info wcRootInfo = myVcs.getInfo(root)[ FD ]
Line_2 $$ private SvnRemoteFileAnnotation annotateNonExisting(Pair<SvnChangeList, FilePath> pair, VcsFileRevision revision, Info info, Charset charset, final VirtualFile current) throws VcsException, SVNException, IOException -->Line_6 $$ throw new VcsException("Can not find relative path for " + wasFile.getPath() + "@" + revision.getRevisionNumber().asString())[ FD ]
Line_3 $$ final File wasFile = pair.getSecond().getIOFile()-->Line_7 $$ final String relativePath = FileUtil.getRelativePath(root.getPath(), wasFile.getPath(), File.separatorChar)[ FD ]
Line_2 $$ private SvnRemoteFileAnnotation annotateNonExisting(Pair<SvnChangeList, FilePath> pair, VcsFileRevision revision, Info info, Charset charset, final VirtualFile current) throws VcsException, SVNException, IOException -->Line_4 $$ final File root = getCommonAncestor(wasFile, info.getFile())[ FD ]
Line_2 $$ private SvnRemoteFileAnnotation annotateNonExisting(Pair<SvnChangeList, FilePath> pair, VcsFileRevision revision, Info info, Charset charset, final VirtualFile current) throws VcsException, SVNException, IOException -->Line_11 $$ if (wcRootInfo == null || wcRootInfo.getURL() == null) [ CD ]
Line_3 $$ final File wasFile = pair.getSecond().getIOFile()-->Line_6 $$ throw new VcsException("Can not find relative path for " + wasFile.getPath() + "@" + revision.getRevisionNumber().asString())[ FD ]
Line_3 $$ final File wasFile = pair.getSecond().getIOFile()-->Line_9 $$ throw new VcsException("Can not find relative path for " + wasFile.getPath() + "@" + revision.getRevisionNumber().asString())[ FD ]
Line_14 $$ SVNURL wasUrl = wcRootInfo.getURL()-->Line_17 $$ wasUrl = wasUrl.appendPath(string, true)[ FD ]
Line_10 $$ Info wcRootInfo = myVcs.getInfo(root)-->Line_14 $$ SVNURL wasUrl = wcRootInfo.getURL()[ FD ]
Line_2 $$ private SvnRemoteFileAnnotation annotateNonExisting(Pair<SvnChangeList, FilePath> pair, VcsFileRevision revision, Info info, Charset charset, final VirtualFile current) throws VcsException, SVNException, IOException -->Line_19 $$ final SVNRevision svnRevision = ((SvnRevisionNumber) revision.getRevisionNumber()).getRevision()[ FD ]
Line_2 $$ private SvnRemoteFileAnnotation annotateNonExisting(Pair<SvnChangeList, FilePath> pair, VcsFileRevision revision, Info info, Charset charset, final VirtualFile current) throws VcsException, SVNException, IOException -->Line_9 $$ throw new VcsException("Can not find relative path for " + wasFile.getPath() + "@" + revision.getRevisionNumber().asString())[ FD ]
Line_2 $$ private SvnRemoteFileAnnotation annotateNonExisting(Pair<SvnChangeList, FilePath> pair, VcsFileRevision revision, Info info, Charset charset, final VirtualFile current) throws VcsException, SVNException, IOException -->Line_15 $$ final String[] strings = relativePath.replace('\\', '/').split("/")[ CD ]
Line_19 $$ final SVNRevision svnRevision = ((SvnRevisionNumber) revision.getRevisionNumber()).getRevision()-->Line_26 $$ client.annotate(SvnTarget.fromURL(wasUrl, svnRevision), SVNRevision.create(1), svnRevision, calculateMergeinfo, getLogClientOptions(myVcs), annotateHandler)[ FD ]
Line_24 $$ final boolean calculateMergeinfo = SvnConfiguration.getInstance(myVcs.getProject()).isShowMergeSourcesInAnnotate() && SvnUtil.checkRepositoryVersion15(myVcs, wasUrl.toString())-->Line_26 $$ client.annotate(SvnTarget.fromURL(wasUrl, svnRevision), SVNRevision.create(1), svnRevision, calculateMergeinfo, getLogClientOptions(myVcs), annotateHandler)[ FD ]
Line_25 $$ AnnotateClient client = myVcs.getFactory().createAnnotateClient()-->Line_26 $$ client.annotate(SvnTarget.fromURL(wasUrl, svnRevision), SVNRevision.create(1), svnRevision, calculateMergeinfo, getLogClientOptions(myVcs), annotateHandler)[ FD ]
Line_22 $$ final SvnRemoteFileAnnotation result = new SvnRemoteFileAnnotation(myVcs, contents, revision.getRevisionNumber(), current)-->Line_23 $$ final AnnotationConsumer annotateHandler = createAnnotationHandler(ProgressManager.getInstance().getProgressIndicator(), result)[ FD ]
