Line_9 $$ File middle = createTestDir(up, "middle")-->Line_10 $$ File file = createTestFile(middle, "file.txt", "original content")[ FD ]
Line_11 $$ File up_copy = new File(top, "up_copy")-->Line_21 $$ FileUtil.rename(up_copy, up)[ FD ]
Line_14 $$ VirtualFile vFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)-->Line_23 $$ assertTrue(vFile.isValid())[ FD ]
Line_8 $$ File up = createTestDir(top, "up")-->Line_21 $$ FileUtil.rename(up_copy, up)[ FD ]
Line_3 $$ if (SystemInfo.isMac) -->Line_5 $$ return[ CD ]
Line_10 $$ File file = createTestFile(middle, "file.txt", "original content")-->Line_22 $$ assertEvent(VFileContentChangeEvent.class, file.getPath())[ FD ]
Line_8 $$ File up = createTestDir(top, "up")-->Line_9 $$ File middle = createTestDir(up, "middle")[ FD ]
Line_14 $$ VirtualFile vFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)-->Line_16 $$ assertEquals("new content", VfsUtilCore.loadText(vFile))[ FD ]
Line_7 $$ File top = createTestDir(myTempDirectory, "top")-->Line_8 $$ File up = createTestDir(top, "up")[ FD ]
Line_8 $$ File up = createTestDir(top, "up")-->Line_12 $$ FileUtil.copyDir(up, up_copy)[ FD ]
Line_2 $$ public void testDisplacementByIsomorphicTree() throws Exception -->Line_12 $$ FileUtil.copyDir(up, up_copy)[ CD ]
Line_2 $$ public void testDisplacementByIsomorphicTree() throws Exception -->Line_10 $$ File file = createTestFile(middle, "file.txt", "original content")[ CD ]
Line_2 $$ public void testDisplacementByIsomorphicTree() throws Exception -->Line_15 $$ assertNotNull(vFile)[ CD ]
Line_2 $$ public void testDisplacementByIsomorphicTree() throws Exception -->Line_16 $$ assertEquals("new content", VfsUtilCore.loadText(vFile))[ CD ]
Line_2 $$ public void testDisplacementByIsomorphicTree() throws Exception -->Line_11 $$ File up_copy = new File(top, "up_copy")[ CD ]
Line_2 $$ public void testDisplacementByIsomorphicTree() throws Exception -->Line_13 $$ FileUtil.writeToFile(file, "new content")[ CD ]
Line_14 $$ VirtualFile vFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)-->Line_15 $$ assertNotNull(vFile)[ FD ]
Line_17 $$ LocalFileSystem.WatchRequest request = watch(up)-->Line_26 $$ unwatch(request)[ FD ]
Line_10 $$ File file = createTestFile(middle, "file.txt", "original content")-->Line_13 $$ FileUtil.writeToFile(file, "new content")[ FD ]
Line_10 $$ File file = createTestFile(middle, "file.txt", "original content")-->Line_14 $$ VirtualFile vFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)[ FD ]
Line_2 $$ public void testDisplacementByIsomorphicTree() throws Exception -->Line_17 $$ LocalFileSystem.WatchRequest request = watch(up)[ CD ]
Line_2 $$ public void testDisplacementByIsomorphicTree() throws Exception -->Line_7 $$ File top = createTestDir(myTempDirectory, "top")[ CD ]
Line_2 $$ public void testDisplacementByIsomorphicTree() throws Exception -->Line_9 $$ File middle = createTestDir(up, "middle")[ CD ]
Line_8 $$ File up = createTestDir(top, "up")-->Line_20 $$ FileUtil.rename(up, new File(top, "up.bak"))[ FD ]
Line_11 $$ File up_copy = new File(top, "up_copy")-->Line_12 $$ FileUtil.copyDir(up, up_copy)[ FD ]
Line_2 $$ public void testDisplacementByIsomorphicTree() throws Exception -->Line_3 $$ if (SystemInfo.isMac) [ CD ]
Line_14 $$ VirtualFile vFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)-->Line_24 $$ assertEquals("original content", VfsUtilCore.loadText(vFile))[ FD ]
Line_3 $$ if (SystemInfo.isMac) -->Line_4 $$ System.out.println("** skipped")[ CD ]
Line_2 $$ public void testDisplacementByIsomorphicTree() throws Exception -->Line_14 $$ VirtualFile vFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)[ CD ]
Line_8 $$ File up = createTestDir(top, "up")-->Line_17 $$ LocalFileSystem.WatchRequest request = watch(up)[ FD ]
Line_2 $$ public void testDisplacementByIsomorphicTree() throws Exception -->Line_8 $$ File up = createTestDir(top, "up")[ CD ]
