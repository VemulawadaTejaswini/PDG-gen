Line_14 $$ policy = null-->Line_20 $$ ControlFlow controlFlow = ControlFlowFactory.getInstance(getProject()).getControlFlow(element, policy)[ FD ]
Line_11 $$ if ("LocalsOrMyInstanceFieldsControlFlowPolicy".equals(policyClassName)) -->Line_12 $$ policy = LocalsOrMyInstanceFieldsControlFlowPolicy.getInstance()[ CD ]
Line_18 $$ element = PsiTreeUtil.getParentOfType(element, PsiCodeBlock.class, false)-->Line_20 $$ ControlFlow controlFlow = ControlFlowFactory.getInstance(getProject()).getControlFlow(element, policy)[ FD ]
Line_2 $$ private static void doTestFor(final File file) throws Exception -->Line_18 $$ element = PsiTreeUtil.getParentOfType(element, PsiCodeBlock.class, false)[ CD ]
Line_12 $$ policy = LocalsOrMyInstanceFieldsControlFlowPolicy.getInstance()-->Line_20 $$ ControlFlow controlFlow = ControlFlowFactory.getInstance(getProject()).getControlFlow(element, policy)[ FD ]
Line_2 $$ private static void doTestFor(final File file) throws Exception -->Line_23 $$ VirtualFile expectedFile = LocalFileSystem.getInstance().findFileByPath(expectedFullPath)[ CD ]
Line_25 $$ expected = expected.replaceAll("\r", "")-->Line_26 $$ assertEquals("Text mismatch (in file " + expectedFullPath + "):\n", expected, result)[ FD ]
Line_11 $$ if ("LocalsOrMyInstanceFieldsControlFlowPolicy".equals(policyClassName)) -->Line_14 $$ policy = null[ CD ]
Line_23 $$ VirtualFile expectedFile = LocalFileSystem.getInstance().findFileByPath(expectedFullPath)-->Line_24 $$ String expected = new String(expectedFile.contentsToByteArray()).trim()[ FD ]
Line_2 $$ private static void doTestFor(final File file) throws Exception -->Line_25 $$ expected = expected.replaceAll("\r", "")[ CD ]
Line_2 $$ private static void doTestFor(final File file) throws Exception -->Line_7 $$ Matcher matcher = pattern.matcher(contents)[ CD ]
Line_7 $$ Matcher matcher = pattern.matcher(contents)-->Line_9 $$ final String policyClassName = matcher.group(1)[ FD ]
Line_2 $$ private static void doTestFor(final File file) throws Exception -->Line_4 $$ configureFromFileText(file.getName(), contents)[ CD ]
Line_2 $$ private static void doTestFor(final File file) throws Exception -->Line_9 $$ final String policyClassName = matcher.group(1)[ CD ]
Line_2 $$ private static void doTestFor(final File file) throws Exception -->Line_24 $$ String expected = new String(expectedFile.contentsToByteArray()).trim()[ CD ]
Line_3 $$ String contents = StringUtil.convertLineSeparators(FileUtil.loadFile(file))-->Line_4 $$ configureFromFileText(file.getName(), contents)[ FD ]
Line_17 $$ PsiElement element = getFile().findElementAt(offset)-->Line_20 $$ ControlFlow controlFlow = ControlFlowFactory.getInstance(getProject()).getControlFlow(element, policy)[ FD ]
Line_24 $$ String expected = new String(expectedFile.contentsToByteArray()).trim()-->Line_25 $$ expected = expected.replaceAll("\r", "")[ FD ]
Line_2 $$ private static void doTestFor(final File file) throws Exception -->Line_20 $$ ControlFlow controlFlow = ControlFlowFactory.getInstance(getProject()).getControlFlow(element, policy)[ CD ]
Line_3 $$ String contents = StringUtil.convertLineSeparators(FileUtil.loadFile(file))-->Line_7 $$ Matcher matcher = pattern.matcher(contents)[ FD ]
Line_2 $$ private static void doTestFor(final File file) throws Exception -->Line_17 $$ PsiElement element = getFile().findElementAt(offset)[ CD ]
Line_7 $$ Matcher matcher = pattern.matcher(contents)-->Line_8 $$ assertTrue(matcher.matches())[ FD ]
Line_2 $$ private static void doTestFor(final File file) throws Exception -->Line_26 $$ assertEquals("Text mismatch (in file " + expectedFullPath + "):\n", expected, result)[ CD ]
Line_16 $$ final int offset = getEditor().getCaretModel().getOffset()-->Line_17 $$ PsiElement element = getFile().findElementAt(offset)[ FD ]
Line_12 $$ policy = LocalsOrMyInstanceFieldsControlFlowPolicy.getInstance()-->Line_14 $$ policy = null[ FD ]
Line_24 $$ String expected = new String(expectedFile.contentsToByteArray()).trim()-->Line_26 $$ assertEquals("Text mismatch (in file " + expectedFullPath + "):\n", expected, result)[ FD ]
Line_2 $$ private static void doTestFor(final File file) throws Exception -->Line_16 $$ final int offset = getEditor().getCaretModel().getOffset()[ CD ]
Line_17 $$ PsiElement element = getFile().findElementAt(offset)-->Line_18 $$ element = PsiTreeUtil.getParentOfType(element, PsiCodeBlock.class, false)[ FD ]
Line_21 $$ String result = controlFlow.toString().trim()-->Line_26 $$ assertEquals("Text mismatch (in file " + expectedFullPath + "):\n", expected, result)[ FD ]
Line_9 $$ final String policyClassName = matcher.group(1)-->Line_11 $$ if ("LocalsOrMyInstanceFieldsControlFlowPolicy".equals(policyClassName)) [ FD ]
Line_2 $$ private static void doTestFor(final File file) throws Exception -->Line_21 $$ String result = controlFlow.toString().trim()[ CD ]
Line_10 $$ final ControlFlowPolicy policy-->Line_20 $$ ControlFlow controlFlow = ControlFlowFactory.getInstance(getProject()).getControlFlow(element, policy)[ FD ]
Line_10 $$ final ControlFlowPolicy policy-->Line_14 $$ policy = null[ FD ]
Line_2 $$ private static void doTestFor(final File file) throws Exception -->Line_22 $$ final String expectedFullPath = StringUtil.trimEnd(file.getPath(), ".java") + ".txt"[ FD ]
Line_2 $$ private static void doTestFor(final File file) throws Exception -->Line_10 $$ final ControlFlowPolicy policy[ CD ]
Line_2 $$ private static void doTestFor(final File file) throws Exception -->Line_3 $$ String contents = StringUtil.convertLineSeparators(FileUtil.loadFile(file))[ FD ]
Line_20 $$ ControlFlow controlFlow = ControlFlowFactory.getInstance(getProject()).getControlFlow(element, policy)-->Line_21 $$ String result = controlFlow.toString().trim()[ FD ]
Line_2 $$ private static void doTestFor(final File file) throws Exception -->Line_11 $$ if ("LocalsOrMyInstanceFieldsControlFlowPolicy".equals(policyClassName)) [ CD ]
Line_2 $$ private static void doTestFor(final File file) throws Exception -->Line_3 $$ String contents = StringUtil.convertLineSeparators(FileUtil.loadFile(file))[ CD ]
Line_2 $$ private static void doTestFor(final File file) throws Exception -->Line_19 $$ assertTrue("Selected element: " + element, element instanceof PsiCodeBlock)[ CD ]
Line_2 $$ private static void doTestFor(final File file) throws Exception -->Line_8 $$ assertTrue(matcher.matches())[ CD ]
Line_22 $$ final String expectedFullPath = StringUtil.trimEnd(file.getPath(), ".java") + ".txt"-->Line_23 $$ VirtualFile expectedFile = LocalFileSystem.getInstance().findFileByPath(expectedFullPath)[ FD ]
Line_2 $$ private static void doTestFor(final File file) throws Exception -->Line_22 $$ final String expectedFullPath = StringUtil.trimEnd(file.getPath(), ".java") + ".txt"[ CD ]
Line_10 $$ final ControlFlowPolicy policy-->Line_12 $$ policy = LocalsOrMyInstanceFieldsControlFlowPolicy.getInstance()[ FD ]
Line_2 $$ private static void doTestFor(final File file) throws Exception -->Line_4 $$ configureFromFileText(file.getName(), contents)[ FD ]
