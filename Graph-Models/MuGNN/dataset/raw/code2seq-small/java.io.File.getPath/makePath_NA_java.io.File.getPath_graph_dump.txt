Line_3 $$ StringBuilder tailBuff = new StringBuilder()-->Line_6 $$ tailBuff.append("/")[ FD ]
Line_9 $$ String tail = tailBuff.toString()-->Line_10 $$ String result = FileUtil.isAbsolute(tail) ? tail : new File(p.getDirectory(), tail).getPath()[ FD ]
Line_2 $$ protected String makePath(MavenProject p, String... elements) -->Line_3 $$ StringBuilder tailBuff = new StringBuilder()[ CD ]
Line_4 $$ for (String e : elements) -->Line_7 $$ tailBuff.append(e)[ FD ]
Line_5 $$ if (tailBuff.length() > 0)-->Line_6 $$ tailBuff.append("/")[ CD ]
Line_2 $$ protected String makePath(MavenProject p, String... elements) -->Line_10 $$ String result = FileUtil.isAbsolute(tail) ? tail : new File(p.getDirectory(), tail).getPath()[ CD ]
Line_2 $$ protected String makePath(MavenProject p, String... elements) -->Line_11 $$ return FileUtil.toSystemIndependentName(PathUtil.getCanonicalPath(result))[ CD ]
Line_2 $$ protected String makePath(MavenProject p, String... elements) -->Line_10 $$ String result = FileUtil.isAbsolute(tail) ? tail : new File(p.getDirectory(), tail).getPath()[ FD ]
Line_10 $$ String result = FileUtil.isAbsolute(tail) ? tail : new File(p.getDirectory(), tail).getPath()-->Line_11 $$ return FileUtil.toSystemIndependentName(PathUtil.getCanonicalPath(result))[ FD ]
Line_3 $$ StringBuilder tailBuff = new StringBuilder()-->Line_7 $$ tailBuff.append(e)[ FD ]
Line_3 $$ StringBuilder tailBuff = new StringBuilder()-->Line_9 $$ String tail = tailBuff.toString()[ FD ]
Line_3 $$ StringBuilder tailBuff = new StringBuilder()-->Line_5 $$ if (tailBuff.length() > 0)[ FD ]
Line_2 $$ protected String makePath(MavenProject p, String... elements) -->Line_9 $$ String tail = tailBuff.toString()[ CD ]
