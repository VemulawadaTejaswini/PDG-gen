Line_13 $$ File checkpointEditsDir2 = new File(base_dir, "chkptEdits2")-->Line_19 $$ conf.setStrings(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, whiteSpace + checkpointEditsDir1.getPath() + whiteSpace, whiteSpace + checkpointEditsDir2.getPath() + whiteSpace)[ FD ]
Line_14 $$ File nameDir = new File(base_dir, "name1")-->Line_17 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameDir.getPath())[ FD ]
Line_9 $$ SecondaryNameNode secondary = null-->Line_30 $$ secondary.shutdown()[ FD ]
Line_9 $$ SecondaryNameNode secondary = null-->Line_23 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_12 $$ File checkpointNameDir2 = new File(base_dir, "chkptName2")-->Line_26 $$ assertTrue(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY + " must be trimmed ", checkpointNameDir2.exists())[ FD ]
Line_16 $$ Configuration conf = new HdfsConfiguration()-->Line_18 $$ conf.setStrings(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, whiteSpace + checkpointNameDir1.getPath() + whiteSpace, whiteSpace + checkpointNameDir2.getPath() + whiteSpace)[ FD ]
Line_12 $$ File checkpointNameDir2 = new File(base_dir, "chkptName2")-->Line_18 $$ conf.setStrings(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, whiteSpace + checkpointNameDir1.getPath() + whiteSpace, whiteSpace + checkpointNameDir2.getPath() + whiteSpace)[ FD ]
Line_9 $$ SecondaryNameNode secondary = null-->Line_24 $$ secondary.doCheckpoint()[ FD ]
Line_23 $$ secondary = startSecondaryNameNode(conf)-->Line_24 $$ secondary.doCheckpoint()[ FD ]
Line_16 $$ Configuration conf = new HdfsConfiguration()-->Line_19 $$ conf.setStrings(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, whiteSpace + checkpointEditsDir1.getPath() + whiteSpace, whiteSpace + checkpointEditsDir2.getPath() + whiteSpace)[ FD ]
Line_23 $$ secondary = startSecondaryNameNode(conf)-->Line_30 $$ secondary.shutdown()[ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_31 $$ cluster.shutdown()[ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_22 $$ cluster.waitActive()[ FD ]
Line_11 $$ File checkpointEditsDir1 = new File(base_dir, "chkptEdits1")-->Line_19 $$ conf.setStrings(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY, whiteSpace + checkpointEditsDir1.getPath() + whiteSpace, whiteSpace + checkpointEditsDir2.getPath() + whiteSpace)[ FD ]
Line_10 $$ File checkpointNameDir1 = new File(base_dir, "chkptName1")-->Line_25 $$ assertTrue(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY + " must be trimmed ", checkpointNameDir1.exists())[ FD ]
Line_10 $$ File checkpointNameDir1 = new File(base_dir, "chkptName1")-->Line_18 $$ conf.setStrings(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY, whiteSpace + checkpointNameDir1.getPath() + whiteSpace, whiteSpace + checkpointNameDir2.getPath() + whiteSpace)[ FD ]
Line_16 $$ Configuration conf = new HdfsConfiguration()-->Line_17 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameDir.getPath())[ FD ]
Line_16 $$ Configuration conf = new HdfsConfiguration()-->Line_23 $$ secondary = startSecondaryNameNode(conf)[ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_20 $$ cluster = new MiniDFSCluster.Builder(conf).manageNameDfsDirs(false).numDataNodes(3).build()[ FD ]
Line_11 $$ File checkpointEditsDir1 = new File(base_dir, "chkptEdits1")-->Line_27 $$ assertTrue(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY + " must be trimmed ", checkpointEditsDir1.exists())[ FD ]
Line_13 $$ File checkpointEditsDir2 = new File(base_dir, "chkptEdits2")-->Line_28 $$ assertTrue(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY + " must be trimmed ", checkpointEditsDir2.exists())[ FD ]
Line_20 $$ cluster = new MiniDFSCluster.Builder(conf).manageNameDfsDirs(false).numDataNodes(3).build()-->Line_22 $$ cluster.waitActive()[ FD ]
Line_20 $$ cluster = new MiniDFSCluster.Builder(conf).manageNameDfsDirs(false).numDataNodes(3).build()-->Line_31 $$ cluster.shutdown()[ FD ]
