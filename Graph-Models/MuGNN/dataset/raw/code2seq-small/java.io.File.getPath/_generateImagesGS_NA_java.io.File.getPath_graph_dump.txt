Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_27 $$ futures.put(processIdentity, future)[ CD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_21 $$ if (PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_HEIGHT != 0) [ CD ]
Line_18 $$ if (PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_WIDTH != 0) -->Line_19 $$ arguments.add("-dDEVICEWIDTH=" + PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_WIDTH)[ CD ]
Line_5 $$ List<String> arguments = new ArrayList()-->Line_24 $$ arguments.add(file.getPath())[ FD ]
Line_40 $$ File previewTempFile = getPreviewTempFile(tempFileId, i + 2)-->Line_44 $$ FileUtil.delete(previewTempFile)[ FD ]
Line_25 $$ Future<?> future = GhostscriptUtil.execute(arguments)-->Line_28 $$ future.get()[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_7 $$ if (thumbnail) [ CD ]
Line_31 $$ File thumbnailTempFile = getThumbnailTempFile(tempFileId)-->Line_33 $$ storeThumbnailImages(fileVersion, thumbnailTempFile)[ FD ]
Line_7 $$ if (thumbnail) -->Line_12 $$ arguments.add("-sOutputFile=" + getPreviewTempFilePath(tempFileId, -1))[ CD ]
Line_25 $$ Future<?> future = GhostscriptUtil.execute(arguments)-->Line_27 $$ futures.put(processIdentity, future)[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_18 $$ if (PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_WIDTH != 0) [ CD ]
Line_5 $$ List<String> arguments = new ArrayList()-->Line_15 $$ arguments.add("-dTextAlphaBits=4")[ FD ]
Line_39 $$ for (int i = 0; i < total; i++) -->Line_40 $$ File previewTempFile = getPreviewTempFile(tempFileId, i + 2)[ CD ]
Line_5 $$ List<String> arguments = new ArrayList()-->Line_16 $$ arguments.add("-dGraphicsAlphaBits=4")[ FD ]
Line_40 $$ File previewTempFile = getPreviewTempFile(tempFileId, i + 2)-->Line_42 $$ addFileToStore(fileVersion.getCompanyId(), PREVIEW_PATH, getPreviewFilePath(fileVersion, i + 1), previewTempFile)[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_17 $$ arguments.add("-r" + PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_DPI)[ CD ]
Line_7 $$ if (thumbnail) -->Line_9 $$ arguments.add("-dFirstPage=1")[ CD ]
Line_5 $$ List<String> arguments = new ArrayList()-->Line_14 $$ arguments.add("-dPDFFitPage")[ FD ]
Line_5 $$ List<String> arguments = new ArrayList()-->Line_19 $$ arguments.add("-dDEVICEWIDTH=" + PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_WIDTH)[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_6 $$ arguments.add("-sDEVICE=png16m")[ CD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_26 $$ String processIdentity = String.valueOf(fileVersion.getFileVersionId())[ FD ]
Line_5 $$ List<String> arguments = new ArrayList()-->Line_22 $$ arguments.add("-dDEVICEHEIGHT=" + PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_HEIGHT)[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_33 $$ storeThumbnailImages(fileVersion, thumbnailTempFile)[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_25 $$ Future<?> future = GhostscriptUtil.execute(arguments)[ CD ]
Line_7 $$ if (thumbnail) -->Line_10 $$ arguments.add("-dLastPage=1")[ CD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_15 $$ arguments.add("-dTextAlphaBits=4")[ CD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_5 $$ List<String> arguments = new ArrayList()[ CD ]
Line_7 $$ if (thumbnail) -->Line_8 $$ arguments.add("-sOutputFile=" + getThumbnailTempFilePath(tempFileId))[ CD ]
Line_5 $$ List<String> arguments = new ArrayList()-->Line_6 $$ arguments.add("-sDEVICE=png16m")[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_26 $$ String processIdentity = String.valueOf(fileVersion.getFileVersionId())[ CD ]
Line_26 $$ String processIdentity = String.valueOf(fileVersion.getFileVersionId())-->Line_27 $$ futures.put(processIdentity, future)[ FD ]
Line_5 $$ List<String> arguments = new ArrayList()-->Line_25 $$ Future<?> future = GhostscriptUtil.execute(arguments)[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_14 $$ arguments.add("-dPDFFitPage")[ CD ]
Line_31 $$ File thumbnailTempFile = getThumbnailTempFile(tempFileId)-->Line_35 $$ FileUtil.delete(thumbnailTempFile)[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_38 $$ int total = getPreviewTempFileCount(fileVersion)[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_16 $$ arguments.add("-dGraphicsAlphaBits=4")[ CD ]
Line_21 $$ if (PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_HEIGHT != 0) -->Line_22 $$ arguments.add("-dDEVICEHEIGHT=" + PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_HEIGHT)[ CD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_42 $$ addFileToStore(fileVersion.getCompanyId(), PREVIEW_PATH, getPreviewFilePath(fileVersion, i + 1), previewTempFile)[ FD ]
Line_5 $$ List<String> arguments = new ArrayList()-->Line_10 $$ arguments.add("-dLastPage=1")[ FD ]
Line_5 $$ List<String> arguments = new ArrayList()-->Line_17 $$ arguments.add("-r" + PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_DPI)[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_24 $$ arguments.add(file.getPath())[ FD ]
Line_5 $$ List<String> arguments = new ArrayList()-->Line_12 $$ arguments.add("-sOutputFile=" + getPreviewTempFilePath(tempFileId, -1))[ FD ]
Line_38 $$ int total = getPreviewTempFileCount(fileVersion)-->Line_39 $$ for (int i = 0; i < total; i++) [ FD ]
Line_5 $$ List<String> arguments = new ArrayList()-->Line_9 $$ arguments.add("-dFirstPage=1")[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_28 $$ future.get()[ CD ]
Line_5 $$ List<String> arguments = new ArrayList()-->Line_8 $$ arguments.add("-sOutputFile=" + getThumbnailTempFilePath(tempFileId))[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_24 $$ arguments.add(file.getPath())[ CD ]
