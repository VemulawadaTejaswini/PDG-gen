Line_29 $$ File thumbnailTempFile = getThumbnailTempFile(tempFileId)-->Line_33 $$ FileUtil.delete(thumbnailTempFile)[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_25 $$ String processIdentity = String.valueOf(fileVersion.getFileVersionId())[ FD ]
Line_6 $$ if (thumbnail) -->Line_7 $$ arguments.add("-sOutputFile=" + getThumbnailTempFilePath(tempFileId))[ CD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_26 $$ futures.put(processIdentity, future)[ CD ]
Line_3 $$ String tempFileId = DLUtil.getTempFileId(fileVersion.getFileEntryId(), fileVersion.getVersion())-->Line_29 $$ File thumbnailTempFile = getThumbnailTempFile(tempFileId)[ FD ]
Line_3 $$ String tempFileId = DLUtil.getTempFileId(fileVersion.getFileEntryId(), fileVersion.getVersion())-->Line_38 $$ File previewTempFile = getPreviewTempFile(tempFileId, i + 2)[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_31 $$ storeThumbnailImages(fileVersion, thumbnailTempFile)[ FD ]
Line_25 $$ String processIdentity = String.valueOf(fileVersion.getFileVersionId())-->Line_26 $$ futures.put(processIdentity, future)[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_5 $$ arguments.add("-sDEVICE=png16m")[ CD ]
Line_3 $$ String tempFileId = DLUtil.getTempFileId(fileVersion.getFileEntryId(), fileVersion.getVersion())-->Line_7 $$ arguments.add("-sOutputFile=" + getThumbnailTempFilePath(tempFileId))[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_6 $$ if (thumbnail) [ CD ]
Line_6 $$ if (thumbnail) -->Line_8 $$ arguments.add("-dFirstPage=1")[ CD ]
Line_38 $$ File previewTempFile = getPreviewTempFile(tempFileId, i + 2)-->Line_42 $$ FileUtil.delete(previewTempFile)[ FD ]
Line_6 $$ if (thumbnail) -->Line_11 $$ arguments.add("-sOutputFile=" + getPreviewTempFilePath(tempFileId, -1))[ CD ]
Line_28 $$ if (thumbnail) -->Line_29 $$ File thumbnailTempFile = getThumbnailTempFile(tempFileId)[ CD ]
Line_4 $$ List<String> arguments = new ArrayList()-->Line_18 $$ arguments.add("-dDEVICEWIDTH=" + PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_WIDTH)[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_24 $$ Future<?> future = GhostscriptUtil.execute(arguments)[ CD ]
Line_4 $$ List<String> arguments = new ArrayList()-->Line_21 $$ arguments.add("-dDEVICEHEIGHT=" + PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_HEIGHT)[ FD ]
Line_4 $$ List<String> arguments = new ArrayList()-->Line_9 $$ arguments.add("-dLastPage=1")[ FD ]
Line_28 $$ if (thumbnail) -->Line_36 $$ int total = getPreviewTempFileCount(fileVersion)[ CD ]
Line_3 $$ String tempFileId = DLUtil.getTempFileId(fileVersion.getFileEntryId(), fileVersion.getVersion())-->Line_11 $$ arguments.add("-sOutputFile=" + getPreviewTempFilePath(tempFileId, -1))[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_17 $$ if (PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_WIDTH != 0) [ CD ]
Line_17 $$ if (PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_WIDTH != 0) -->Line_18 $$ arguments.add("-dDEVICEWIDTH=" + PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_WIDTH)[ CD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_13 $$ arguments.add("-dPDFFitPage")[ CD ]
Line_28 $$ if (thumbnail) -->Line_37 $$ for (int i = 0; i < total; i++) [ CD ]
Line_4 $$ List<String> arguments = new ArrayList()-->Line_23 $$ arguments.add(file.getPath())[ FD ]
Line_38 $$ File previewTempFile = getPreviewTempFile(tempFileId, i + 2)-->Line_40 $$ addFileToStore(fileVersion.getCompanyId(), PREVIEW_PATH, getPreviewFilePath(fileVersion, i + 1), previewTempFile)[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_3 $$ String tempFileId = DLUtil.getTempFileId(fileVersion.getFileEntryId(), fileVersion.getVersion())[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_15 $$ arguments.add("-dGraphicsAlphaBits=4")[ CD ]
Line_37 $$ for (int i = 0; i < total; i++) -->Line_38 $$ File previewTempFile = getPreviewTempFile(tempFileId, i + 2)[ CD ]
Line_36 $$ int total = getPreviewTempFileCount(fileVersion)-->Line_37 $$ for (int i = 0; i < total; i++) [ FD ]
Line_4 $$ List<String> arguments = new ArrayList()-->Line_11 $$ arguments.add("-sOutputFile=" + getPreviewTempFilePath(tempFileId, -1))[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_14 $$ arguments.add("-dTextAlphaBits=4")[ CD ]
Line_4 $$ List<String> arguments = new ArrayList()-->Line_15 $$ arguments.add("-dGraphicsAlphaBits=4")[ FD ]
Line_4 $$ List<String> arguments = new ArrayList()-->Line_5 $$ arguments.add("-sDEVICE=png16m")[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_36 $$ int total = getPreviewTempFileCount(fileVersion)[ FD ]
Line_6 $$ if (thumbnail) -->Line_9 $$ arguments.add("-dLastPage=1")[ CD ]
Line_4 $$ List<String> arguments = new ArrayList()-->Line_16 $$ arguments.add("-r" + PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_DPI)[ FD ]
Line_24 $$ Future<?> future = GhostscriptUtil.execute(arguments)-->Line_26 $$ futures.put(processIdentity, future)[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_23 $$ arguments.add(file.getPath())[ CD ]
Line_20 $$ if (PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_HEIGHT != 0) -->Line_21 $$ arguments.add("-dDEVICEHEIGHT=" + PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_HEIGHT)[ CD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_25 $$ String processIdentity = String.valueOf(fileVersion.getFileVersionId())[ CD ]
Line_4 $$ List<String> arguments = new ArrayList()-->Line_14 $$ arguments.add("-dTextAlphaBits=4")[ FD ]
Line_4 $$ List<String> arguments = new ArrayList()-->Line_13 $$ arguments.add("-dPDFFitPage")[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_28 $$ if (thumbnail) [ CD ]
Line_29 $$ File thumbnailTempFile = getThumbnailTempFile(tempFileId)-->Line_31 $$ storeThumbnailImages(fileVersion, thumbnailTempFile)[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_40 $$ addFileToStore(fileVersion.getCompanyId(), PREVIEW_PATH, getPreviewFilePath(fileVersion, i + 1), previewTempFile)[ FD ]
Line_4 $$ List<String> arguments = new ArrayList()-->Line_24 $$ Future<?> future = GhostscriptUtil.execute(arguments)[ FD ]
Line_24 $$ Future<?> future = GhostscriptUtil.execute(arguments)-->Line_27 $$ future.get()[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_16 $$ arguments.add("-r" + PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_DPI)[ CD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_4 $$ List<String> arguments = new ArrayList()[ CD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_20 $$ if (PropsValues.DL_FILE_ENTRY_PREVIEW_DOCUMENT_MAX_HEIGHT != 0) [ CD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_23 $$ arguments.add(file.getPath())[ FD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_27 $$ future.get()[ CD ]
Line_2 $$ private void _generateImagesGS(FileVersion fileVersion, File file, boolean thumbnail) throws Exception -->Line_3 $$ String tempFileId = DLUtil.getTempFileId(fileVersion.getFileEntryId(), fileVersion.getVersion())[ CD ]
Line_4 $$ List<String> arguments = new ArrayList()-->Line_8 $$ arguments.add("-dFirstPage=1")[ FD ]
Line_4 $$ List<String> arguments = new ArrayList()-->Line_7 $$ arguments.add("-sOutputFile=" + getThumbnailTempFilePath(tempFileId))[ FD ]
