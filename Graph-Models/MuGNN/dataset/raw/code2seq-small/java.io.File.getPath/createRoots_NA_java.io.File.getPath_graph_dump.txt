Line_23 $$ if (MavenExtraArtifactType.SOURCES.getDefaultClassifier().equals(each.getClassifier())) -->Line_26 $$ rootType = OrderRootType.CLASSES[ CD ]
Line_2 $$ public static List<OrderRoot> createRoots(@NotNull Collection<MavenArtifact> artifacts, @Nullable String copyTo) -->Line_4 $$ final VirtualFileManager manager = VirtualFileManager.getInstance()[ CD ]
Line_20 $$ OrderRootType rootType-->Line_24 $$ rootType = OrderRootType.SOURCES[ FD ]
Line_7 $$ File repoFile = each.getFile()-->Line_12 $$ FileUtil.copy(repoFile, toFile)[ FD ]
Line_5 $$ for (MavenArtifact each : artifacts) -->Line_7 $$ File repoFile = each.getFile()[ FD ]
Line_9 $$ if (copyTo != null) -->Line_10 $$ toFile = new File(copyTo, repoFile.getName())[ CD ]
Line_2 $$ public static List<OrderRoot> createRoots(@NotNull Collection<MavenArtifact> artifacts, @Nullable String copyTo) -->Line_36 $$ return result[ CD ]
Line_20 $$ OrderRootType rootType-->Line_22 $$ rootType = JavadocOrderRootType.getInstance()[ FD ]
Line_22 $$ rootType = JavadocOrderRootType.getInstance()-->Line_24 $$ rootType = OrderRootType.SOURCES[ FD ]
Line_8 $$ File toFile = repoFile-->Line_17 $$ final String url = VfsUtil.getUrlForLibraryRoot(toFile)[ FD ]
Line_21 $$ if (MavenExtraArtifactType.DOCS.getDefaultClassifier().equals(each.getClassifier())) -->Line_22 $$ rootType = JavadocOrderRootType.getInstance()[ CD ]
Line_19 $$ if (file != null) -->Line_28 $$ result.add(new OrderRoot(file, rootType))[ CD ]
Line_2 $$ public static List<OrderRoot> createRoots(@NotNull Collection<MavenArtifact> artifacts, @Nullable String copyTo) -->Line_3 $$ final List<OrderRoot> result = new ArrayList<OrderRoot>()[ CD ]
Line_8 $$ File toFile = repoFile-->Line_12 $$ FileUtil.copy(repoFile, toFile)[ FD ]
Line_4 $$ final VirtualFileManager manager = VirtualFileManager.getInstance()-->Line_18 $$ final VirtualFile file = manager.refreshAndFindFileByUrl(url)[ FD ]
Line_20 $$ OrderRootType rootType-->Line_26 $$ rootType = OrderRootType.CLASSES[ FD ]
Line_22 $$ rootType = JavadocOrderRootType.getInstance()-->Line_26 $$ rootType = OrderRootType.CLASSES[ FD ]
Line_18 $$ final VirtualFile file = manager.refreshAndFindFileByUrl(url)-->Line_19 $$ if (file != null) [ FD ]
Line_7 $$ File repoFile = each.getFile()-->Line_11 $$ if (repoFile.exists()) [ FD ]
Line_19 $$ if (file != null) -->Line_20 $$ OrderRootType rootType[ CD ]
Line_10 $$ toFile = new File(copyTo, repoFile.getName())-->Line_12 $$ FileUtil.copy(repoFile, toFile)[ FD ]
Line_19 $$ if (file != null) -->Line_21 $$ if (MavenExtraArtifactType.DOCS.getDefaultClassifier().equals(each.getClassifier())) [ CD ]
Line_5 $$ for (MavenArtifact each : artifacts) -->Line_21 $$ if (MavenExtraArtifactType.DOCS.getDefaultClassifier().equals(each.getClassifier())) [ FD ]
Line_17 $$ final String url = VfsUtil.getUrlForLibraryRoot(toFile)-->Line_18 $$ final VirtualFile file = manager.refreshAndFindFileByUrl(url)[ FD ]
Line_2 $$ public static List<OrderRoot> createRoots(@NotNull Collection<MavenArtifact> artifacts, @Nullable String copyTo) -->Line_9 $$ if (copyTo != null) [ FD ]
Line_3 $$ final List<OrderRoot> result = new ArrayList<OrderRoot>()-->Line_28 $$ result.add(new OrderRoot(file, rootType))[ FD ]
Line_9 $$ if (copyTo != null) -->Line_11 $$ if (repoFile.exists()) [ CD ]
Line_8 $$ File toFile = repoFile-->Line_10 $$ toFile = new File(copyTo, repoFile.getName())[ FD ]
Line_5 $$ for (MavenArtifact each : artifacts) -->Line_23 $$ if (MavenExtraArtifactType.SOURCES.getDefaultClassifier().equals(each.getClassifier())) [ FD ]
Line_10 $$ toFile = new File(copyTo, repoFile.getName())-->Line_17 $$ final String url = VfsUtil.getUrlForLibraryRoot(toFile)[ FD ]
Line_24 $$ rootType = OrderRootType.SOURCES-->Line_26 $$ rootType = OrderRootType.CLASSES[ FD ]
Line_21 $$ if (MavenExtraArtifactType.DOCS.getDefaultClassifier().equals(each.getClassifier())) -->Line_23 $$ if (MavenExtraArtifactType.SOURCES.getDefaultClassifier().equals(each.getClassifier())) [ CD ]
Line_23 $$ if (MavenExtraArtifactType.SOURCES.getDefaultClassifier().equals(each.getClassifier())) -->Line_24 $$ rootType = OrderRootType.SOURCES[ CD ]
Line_11 $$ if (repoFile.exists()) -->Line_12 $$ FileUtil.copy(repoFile, toFile)[ CD ]
Line_7 $$ File repoFile = each.getFile()-->Line_10 $$ toFile = new File(copyTo, repoFile.getName())[ FD ]
