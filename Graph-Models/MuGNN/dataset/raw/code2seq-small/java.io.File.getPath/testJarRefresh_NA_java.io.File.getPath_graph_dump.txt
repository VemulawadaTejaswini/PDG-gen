Line_7 $$ VirtualFile jarRoot = findByPath(jar.getPath() + JarFileSystem.JAR_SEPARATOR)-->Line_8 $$ assertEquals(1, jarRoot.getChildren().length)[ FD ]
Line_2 $$ public void testJarRefresh() throws IOException -->Line_6 $$ assertNotNull(vFile)[ CD ]
Line_2 $$ public void testJarRefresh() throws IOException -->Line_25 $$ vFile.refresh(false, false)[ CD ]
Line_2 $$ public void testJarRefresh() throws IOException -->Line_5 $$ VirtualFile vFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(jar)[ CD ]
Line_2 $$ public void testJarRefresh() throws IOException -->Line_10 $$ assertContent(entry, "")[ CD ]
Line_2 $$ public void testJarRefresh() throws IOException -->Line_30 $$ VirtualFile newEntry = findByPath(jar.getPath() + JarFileSystem.JAR_SEPARATOR + "some.txt")[ CD ]
Line_2 $$ public void testJarRefresh() throws IOException -->Line_29 $$ assertEquals(2, jarRoot.getChildren().length)[ CD ]
Line_2 $$ public void testJarRefresh() throws IOException -->Line_31 $$ assertContent(newEntry, "some text")[ CD ]
Line_2 $$ public void testJarRefresh() throws IOException -->Line_24 $$ IoTestUtil.createTestJar(jar, JarFile.MANIFEST_NAME, "update", "some.txt", "some text")[ CD ]
Line_3 $$ File jar = IoTestUtil.createTestJar()-->Line_9 $$ final VirtualFile entry = findByPath(jar.getPath() + JarFileSystem.JAR_SEPARATOR + JarFile.MANIFEST_NAME)[ FD ]
Line_2 $$ public void testJarRefresh() throws IOException -->Line_3 $$ File jar = IoTestUtil.createTestJar()[ CD ]
Line_3 $$ File jar = IoTestUtil.createTestJar()-->Line_5 $$ VirtualFile vFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(jar)[ FD ]
Line_2 $$ public void testJarRefresh() throws IOException -->Line_12 $$ ApplicationManager.getApplication().getMessageBus().connect(myTestRootDisposable).subscribe(VirtualFileManager.VFS_CHANGES, new BulkFileListener.Adapter() [ CD ]
Line_9 $$ final VirtualFile entry = findByPath(jar.getPath() + JarFileSystem.JAR_SEPARATOR + JarFile.MANIFEST_NAME)-->Line_10 $$ assertContent(entry, "")[ FD ]
Line_9 $$ final VirtualFile entry = findByPath(jar.getPath() + JarFileSystem.JAR_SEPARATOR + JarFile.MANIFEST_NAME)-->Line_27 $$ assertTrue(entry.isValid())[ FD ]
Line_2 $$ public void testJarRefresh() throws IOException -->Line_11 $$ final Ref<Boolean> updated = Ref.create(false)[ CD ]
Line_7 $$ VirtualFile jarRoot = findByPath(jar.getPath() + JarFileSystem.JAR_SEPARATOR)-->Line_29 $$ assertEquals(2, jarRoot.getChildren().length)[ FD ]
Line_2 $$ public void testJarRefresh() throws IOException -->Line_9 $$ final VirtualFile entry = findByPath(jar.getPath() + JarFileSystem.JAR_SEPARATOR + JarFile.MANIFEST_NAME)[ CD ]
Line_3 $$ File jar = IoTestUtil.createTestJar()-->Line_24 $$ IoTestUtil.createTestJar(jar, JarFile.MANIFEST_NAME, "update", "some.txt", "some text")[ FD ]
Line_5 $$ VirtualFile vFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(jar)-->Line_25 $$ vFile.refresh(false, false)[ FD ]
Line_11 $$ final Ref<Boolean> updated = Ref.create(false)-->Line_18 $$ updated.set(true)[ FD ]
Line_2 $$ public void testJarRefresh() throws IOException -->Line_7 $$ VirtualFile jarRoot = findByPath(jar.getPath() + JarFileSystem.JAR_SEPARATOR)[ CD ]
Line_2 $$ public void testJarRefresh() throws IOException -->Line_8 $$ assertEquals(1, jarRoot.getChildren().length)[ CD ]
Line_17 $$ if (event instanceof VFileContentChangeEvent && entry.equals(event.getFile())) -->Line_18 $$ updated.set(true)[ CD ]
Line_2 $$ public void testJarRefresh() throws IOException -->Line_26 $$ assertTrue(updated.get())[ CD ]
Line_2 $$ public void testJarRefresh() throws IOException -->Line_27 $$ assertTrue(entry.isValid())[ CD ]
Line_11 $$ final Ref<Boolean> updated = Ref.create(false)-->Line_26 $$ assertTrue(updated.get())[ FD ]
Line_2 $$ public void testJarRefresh() throws IOException -->Line_28 $$ assertContent(entry, "update")[ CD ]
Line_3 $$ File jar = IoTestUtil.createTestJar()-->Line_4 $$ assertTrue(jar.setLastModified(jar.lastModified() - 1000))[ FD ]
Line_9 $$ final VirtualFile entry = findByPath(jar.getPath() + JarFileSystem.JAR_SEPARATOR + JarFile.MANIFEST_NAME)-->Line_28 $$ assertContent(entry, "update")[ FD ]
Line_16 $$ for (VFileEvent event : events) -->Line_17 $$ if (event instanceof VFileContentChangeEvent && entry.equals(event.getFile())) [ FD ]
Line_3 $$ File jar = IoTestUtil.createTestJar()-->Line_7 $$ VirtualFile jarRoot = findByPath(jar.getPath() + JarFileSystem.JAR_SEPARATOR)[ FD ]
Line_5 $$ VirtualFile vFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(jar)-->Line_6 $$ assertNotNull(vFile)[ FD ]
Line_3 $$ File jar = IoTestUtil.createTestJar()-->Line_30 $$ VirtualFile newEntry = findByPath(jar.getPath() + JarFileSystem.JAR_SEPARATOR + "some.txt")[ FD ]
Line_2 $$ public void testJarRefresh() throws IOException -->Line_4 $$ assertTrue(jar.setLastModified(jar.lastModified() - 1000))[ CD ]
Line_9 $$ final VirtualFile entry = findByPath(jar.getPath() + JarFileSystem.JAR_SEPARATOR + JarFile.MANIFEST_NAME)-->Line_17 $$ if (event instanceof VFileContentChangeEvent && entry.equals(event.getFile())) [ FD ]
