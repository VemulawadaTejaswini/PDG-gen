Line_2 $$ public void testFindInOpenedFilesIncludesNoneProjectButOpenedFile() throws IOException -->Line_13 $$ findModel.setGlobal(true)[ CD ]
Line_2 $$ public void testFindInOpenedFilesIncludesNoneProjectButOpenedFile() throws IOException -->Line_10 $$ findModel.setStringToFind("fo")[ CD ]
Line_2 $$ public void testFindInOpenedFilesIncludesNoneProjectButOpenedFile() throws IOException -->Line_12 $$ findModel.setFromCursor(false)[ CD ]
Line_2 $$ public void testFindInOpenedFilesIncludesNoneProjectButOpenedFile() throws IOException -->Line_15 $$ findModel.setCustomScope(true)[ CD ]
Line_4 $$ File file = new File(dir.getPath(), "A.test1234")-->Line_7 $$ VirtualFile nonProjectFile = VfsUtil.findFileByIoFile(file, true)[ FD ]
Line_7 $$ VirtualFile nonProjectFile = VfsUtil.findFileByIoFile(file, true)-->Line_16 $$ findModel.setCustomScope(GlobalSearchScope.filesScope(myProject, ContainerUtil.list(nonProjectFile)))[ FD ]
Line_9 $$ FindModel findModel = new FindModel()-->Line_12 $$ findModel.setFromCursor(false)[ FD ]
Line_9 $$ FindModel findModel = new FindModel()-->Line_16 $$ findModel.setCustomScope(GlobalSearchScope.filesScope(myProject, ContainerUtil.list(nonProjectFile)))[ FD ]
Line_4 $$ File file = new File(dir.getPath(), "A.test1234")-->Line_5 $$ file.createNewFile()[ FD ]
Line_9 $$ FindModel findModel = new FindModel()-->Line_10 $$ findModel.setStringToFind("fo")[ FD ]
Line_9 $$ FindModel findModel = new FindModel()-->Line_15 $$ findModel.setCustomScope(true)[ FD ]
Line_2 $$ public void testFindInOpenedFilesIncludesNoneProjectButOpenedFile() throws IOException -->Line_16 $$ findModel.setCustomScope(GlobalSearchScope.filesScope(myProject, ContainerUtil.list(nonProjectFile)))[ CD ]
Line_2 $$ public void testFindInOpenedFilesIncludesNoneProjectButOpenedFile() throws IOException -->Line_8 $$ assertNotNull(nonProjectFile)[ CD ]
Line_9 $$ FindModel findModel = new FindModel()-->Line_17 $$ assertSize(1, findUsages(findModel))[ FD ]
Line_9 $$ FindModel findModel = new FindModel()-->Line_14 $$ findModel.setMultipleFiles(true)[ FD ]
Line_2 $$ public void testFindInOpenedFilesIncludesNoneProjectButOpenedFile() throws IOException -->Line_11 $$ findModel.setWholeWordsOnly(true)[ CD ]
Line_9 $$ FindModel findModel = new FindModel()-->Line_13 $$ findModel.setGlobal(true)[ FD ]
Line_9 $$ FindModel findModel = new FindModel()-->Line_11 $$ findModel.setWholeWordsOnly(true)[ FD ]
Line_2 $$ public void testFindInOpenedFilesIncludesNoneProjectButOpenedFile() throws IOException -->Line_17 $$ assertSize(1, findUsages(findModel))[ CD ]
Line_2 $$ public void testFindInOpenedFilesIncludesNoneProjectButOpenedFile() throws IOException -->Line_7 $$ VirtualFile nonProjectFile = VfsUtil.findFileByIoFile(file, true)[ CD ]
Line_3 $$ File dir = createTempDirectory()-->Line_4 $$ File file = new File(dir.getPath(), "A.test1234")[ FD ]
Line_2 $$ public void testFindInOpenedFilesIncludesNoneProjectButOpenedFile() throws IOException -->Line_3 $$ File dir = createTempDirectory()[ CD ]
Line_2 $$ public void testFindInOpenedFilesIncludesNoneProjectButOpenedFile() throws IOException -->Line_4 $$ File file = new File(dir.getPath(), "A.test1234")[ CD ]
Line_7 $$ VirtualFile nonProjectFile = VfsUtil.findFileByIoFile(file, true)-->Line_8 $$ assertNotNull(nonProjectFile)[ FD ]
Line_2 $$ public void testFindInOpenedFilesIncludesNoneProjectButOpenedFile() throws IOException -->Line_9 $$ FindModel findModel = new FindModel()[ CD ]
Line_2 $$ public void testFindInOpenedFilesIncludesNoneProjectButOpenedFile() throws IOException -->Line_14 $$ findModel.setMultipleFiles(true)[ CD ]
Line_2 $$ public void testFindInOpenedFilesIncludesNoneProjectButOpenedFile() throws IOException -->Line_5 $$ file.createNewFile()[ CD ]
Line_4 $$ File file = new File(dir.getPath(), "A.test1234")-->Line_6 $$ FileUtil.writeToFile(file, "foo fo foo")[ FD ]
Line_2 $$ public void testFindInOpenedFilesIncludesNoneProjectButOpenedFile() throws IOException -->Line_6 $$ FileUtil.writeToFile(file, "foo fo foo")[ CD ]
