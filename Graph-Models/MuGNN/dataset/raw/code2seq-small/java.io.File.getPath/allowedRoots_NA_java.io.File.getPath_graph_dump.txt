Line_2 $$ private static Set<String> allowedRoots() -->Line_3 $$ if (insideGettingRoots)[ CD ]
Line_2 $$ private static Set<String> allowedRoots() -->Line_27 $$ allowed.add(FileUtil.toSystemIndependentName(new File(FileUtil.getTempDirectory()).getParent()))[ CD ]
Line_15 $$ URL outUrl = Application.class.getResource("/")-->Line_16 $$ if (outUrl != null) [ FD ]
Line_2 $$ private static Set<String> allowedRoots() -->Line_11 $$ if (homePath2 != null) [ CD ]
Line_2 $$ private static Set<String> allowedRoots() -->Line_28 $$ allowed.add(FileUtil.toSystemIndependentName(System.getProperty("java.io.tmpdir")))[ CD ]
Line_6 $$ if (openProjects.length == 0)-->Line_7 $$ return null[ CD ]
Line_30 $$ for (final Project project : openProjects) -->Line_40 $$ String location = project.getBasePath()[ FD ]
Line_8 $$ final Set<String> allowed = new THashSet<String>(FileUtil.PATH_HASHING_STRATEGY)-->Line_23 $$ allowed.add(FileUtil.toSystemIndependentName(javaHome))[ FD ]
Line_40 $$ String location = project.getBasePath()-->Line_42 $$ allowed.add(FileUtil.toSystemIndependentName(location))[ FD ]
Line_15 $$ URL outUrl = Application.class.getResource("/")-->Line_17 $$ String output = new File(outUrl.toURI()).getParentFile().getParentFile().getPath()[ FD ]
Line_8 $$ final Set<String> allowed = new THashSet<String>(FileUtil.PATH_HASHING_STRATEGY)-->Line_35 $$ allowed.add(root.getPath())[ FD ]
Line_31 $$ if (!project.isInitialized()) -->Line_32 $$ return null[ CD ]
Line_2 $$ private static Set<String> allowedRoots() -->Line_24 $$ if (SystemInfo.isMac && SystemInfo.isAppleJvm) [ CD ]
Line_10 $$ final String homePath2 = PathManager.getHomePathFor(Application.class)-->Line_12 $$ allowed.add(FileUtil.toSystemIndependentName(homePath2))[ FD ]
Line_2 $$ private static Set<String> allowedRoots() -->Line_10 $$ final String homePath2 = PathManager.getHomePathFor(Application.class)[ CD ]
Line_8 $$ final Set<String> allowed = new THashSet<String>(FileUtil.PATH_HASHING_STRATEGY)-->Line_27 $$ allowed.add(FileUtil.toSystemIndependentName(new File(FileUtil.getTempDirectory()).getParent()))[ FD ]
Line_2 $$ private static Set<String> allowedRoots() -->Line_29 $$ allowed.add(FileUtil.toSystemIndependentName(SystemProperties.getUserHome()))[ CD ]
Line_3 $$ if (insideGettingRoots)-->Line_4 $$ return null[ CD ]
Line_11 $$ if (homePath2 != null) -->Line_12 $$ allowed.add(FileUtil.toSystemIndependentName(homePath2))[ CD ]
Line_8 $$ final Set<String> allowed = new THashSet<String>(FileUtil.PATH_HASHING_STRATEGY)-->Line_44 $$ allowed.addAll(ourAdditionalRoots)[ FD ]
Line_2 $$ private static Set<String> allowedRoots() -->Line_5 $$ Project[] openProjects = ProjectManager.getInstance().getOpenProjects()[ CD ]
Line_30 $$ for (final Project project : openProjects) -->Line_31 $$ if (!project.isInitialized()) [ FD ]
Line_8 $$ final Set<String> allowed = new THashSet<String>(FileUtil.PATH_HASHING_STRATEGY)-->Line_18 $$ allowed.add(FileUtil.toSystemIndependentName(output))[ FD ]
Line_8 $$ final Set<String> allowed = new THashSet<String>(FileUtil.PATH_HASHING_STRATEGY)-->Line_25 $$ allowed.add(FileUtil.toSystemIndependentName(new File(new File(javaHome).getParent(), "Classes").getPath()))[ FD ]
Line_30 $$ for (final Project project : openProjects) -->Line_37 $$ for (VirtualFile root : getAllRoots(project)) [ FD ]
Line_2 $$ private static Set<String> allowedRoots() -->Line_44 $$ allowed.addAll(ourAdditionalRoots)[ CD ]
Line_10 $$ final String homePath2 = PathManager.getHomePathFor(Application.class)-->Line_11 $$ if (homePath2 != null) [ FD ]
Line_8 $$ final Set<String> allowed = new THashSet<String>(FileUtil.PATH_HASHING_STRATEGY)-->Line_9 $$ allowed.add(FileUtil.toSystemIndependentName(PathManager.getHomePath()))[ FD ]
Line_8 $$ final Set<String> allowed = new THashSet<String>(FileUtil.PATH_HASHING_STRATEGY)-->Line_29 $$ allowed.add(FileUtil.toSystemIndependentName(SystemProperties.getUserHome()))[ FD ]
Line_2 $$ private static Set<String> allowedRoots() -->Line_23 $$ allowed.add(FileUtil.toSystemIndependentName(javaHome))[ CD ]
Line_8 $$ final Set<String> allowed = new THashSet<String>(FileUtil.PATH_HASHING_STRATEGY)-->Line_38 $$ allowed.add(StringUtil.trimEnd(root.getPath(), JarFileSystem.JAR_SEPARATOR))[ FD ]
Line_16 $$ if (outUrl != null) -->Line_18 $$ allowed.add(FileUtil.toSystemIndependentName(output))[ CD ]
Line_17 $$ String output = new File(outUrl.toURI()).getParentFile().getParentFile().getPath()-->Line_18 $$ allowed.add(FileUtil.toSystemIndependentName(output))[ FD ]
Line_2 $$ private static Set<String> allowedRoots() -->Line_9 $$ allowed.add(FileUtil.toSystemIndependentName(PathManager.getHomePath()))[ CD ]
Line_2 $$ private static Set<String> allowedRoots() -->Line_6 $$ if (openProjects.length == 0)[ CD ]
Line_2 $$ private static Set<String> allowedRoots() -->Line_22 $$ String javaHome = SystemProperties.getJavaHome()[ CD ]
Line_34 $$ for (VirtualFile root : ProjectRootManager.getInstance(project).getContentRoots()) -->Line_35 $$ allowed.add(root.getPath())[ FD ]
Line_16 $$ if (outUrl != null) -->Line_17 $$ String output = new File(outUrl.toURI()).getParentFile().getParentFile().getPath()[ CD ]
Line_34 $$ for (VirtualFile root : ProjectRootManager.getInstance(project).getContentRoots()) -->Line_38 $$ allowed.add(StringUtil.trimEnd(root.getPath(), JarFileSystem.JAR_SEPARATOR))[ FD ]
Line_8 $$ final Set<String> allowed = new THashSet<String>(FileUtil.PATH_HASHING_STRATEGY)-->Line_42 $$ allowed.add(FileUtil.toSystemIndependentName(location))[ FD ]
Line_2 $$ private static Set<String> allowedRoots() -->Line_45 $$ return allowed[ CD ]
Line_2 $$ private static Set<String> allowedRoots() -->Line_8 $$ final Set<String> allowed = new THashSet<String>(FileUtil.PATH_HASHING_STRATEGY)[ CD ]
Line_8 $$ final Set<String> allowed = new THashSet<String>(FileUtil.PATH_HASHING_STRATEGY)-->Line_28 $$ allowed.add(FileUtil.toSystemIndependentName(System.getProperty("java.io.tmpdir")))[ FD ]
Line_8 $$ final Set<String> allowed = new THashSet<String>(FileUtil.PATH_HASHING_STRATEGY)-->Line_12 $$ allowed.add(FileUtil.toSystemIndependentName(homePath2))[ FD ]
Line_24 $$ if (SystemInfo.isMac && SystemInfo.isAppleJvm) -->Line_25 $$ allowed.add(FileUtil.toSystemIndependentName(new File(new File(javaHome).getParent(), "Classes").getPath()))[ CD ]
Line_22 $$ String javaHome = SystemProperties.getJavaHome()-->Line_23 $$ allowed.add(FileUtil.toSystemIndependentName(javaHome))[ FD ]
Line_30 $$ for (final Project project : openProjects) -->Line_34 $$ for (VirtualFile root : ProjectRootManager.getInstance(project).getContentRoots()) [ FD ]
