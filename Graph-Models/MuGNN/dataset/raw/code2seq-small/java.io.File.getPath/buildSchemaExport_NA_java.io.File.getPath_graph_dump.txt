Line_9 $$ if (propertiesFile != null) -->Line_10 $$ ssrBuilder.loadProperties(propertiesFile)[ CD ]
Line_22 $$ ClassLoaderService classLoaderService = bsr.getService(ClassLoaderService.class)-->Line_24 $$ metadataBuilder.applyImplicitNamingStrategy((ImplicitNamingStrategy) classLoaderService.classForName(implicitNamingStrategy).newInstance())[ FD ]
Line_2 $$ private SchemaExport buildSchemaExport() throws Exception -->Line_6 $$ if (configurationFile != null) [ CD ]
Line_5 $$ final StandardServiceRegistryBuilder ssrBuilder = new StandardServiceRegistryBuilder(bsr)-->Line_10 $$ ssrBuilder.loadProperties(propertiesFile)[ FD ]
Line_2 $$ private SchemaExport buildSchemaExport() throws Exception -->Line_12 $$ ssrBuilder.applySettings(getProject().getProperties())[ CD ]
Line_2 $$ private SchemaExport buildSchemaExport() throws Exception -->Line_29 $$ return new SchemaExport((MetadataImplementor) metadataBuilder.build()).setHaltOnError(haltOnError).setOutputFile(outputFile.getPath()).setDelimiter(delimiter)[ CD ]
Line_26 $$ if (physicalNamingStrategy != null) -->Line_27 $$ metadataBuilder.applyPhysicalNamingStrategy((PhysicalNamingStrategy) classLoaderService.classForName(physicalNamingStrategy).newInstance())[ CD ]
Line_2 $$ private SchemaExport buildSchemaExport() throws Exception -->Line_3 $$ final BootstrapServiceRegistry bsr = new BootstrapServiceRegistryBuilder().build()[ CD ]
Line_3 $$ final BootstrapServiceRegistry bsr = new BootstrapServiceRegistryBuilder().build()-->Line_22 $$ ClassLoaderService classLoaderService = bsr.getService(ClassLoaderService.class)[ FD ]
Line_4 $$ final MetadataSources metadataSources = new MetadataSources(bsr)-->Line_17 $$ metadataSources.addFile(fileName)[ FD ]
Line_14 $$ if (fileName.endsWith(".jar")) -->Line_17 $$ metadataSources.addFile(fileName)[ CD ]
Line_23 $$ if (implicitNamingStrategy != null) -->Line_24 $$ metadataBuilder.applyImplicitNamingStrategy((ImplicitNamingStrategy) classLoaderService.classForName(implicitNamingStrategy).newInstance())[ CD ]
Line_21 $$ final MetadataBuilder metadataBuilder = metadataSources.getMetadataBuilder(ssr)-->Line_29 $$ return new SchemaExport((MetadataImplementor) metadataBuilder.build()).setHaltOnError(haltOnError).setOutputFile(outputFile.getPath()).setDelimiter(delimiter)[ FD ]
Line_5 $$ final StandardServiceRegistryBuilder ssrBuilder = new StandardServiceRegistryBuilder(bsr)-->Line_20 $$ final StandardServiceRegistryImpl ssr = (StandardServiceRegistryImpl) ssrBuilder.build()[ FD ]
Line_2 $$ private SchemaExport buildSchemaExport() throws Exception -->Line_22 $$ ClassLoaderService classLoaderService = bsr.getService(ClassLoaderService.class)[ CD ]
Line_13 $$ for (String fileName : getFiles()) -->Line_14 $$ if (fileName.endsWith(".jar")) [ FD ]
Line_5 $$ final StandardServiceRegistryBuilder ssrBuilder = new StandardServiceRegistryBuilder(bsr)-->Line_12 $$ ssrBuilder.applySettings(getProject().getProperties())[ FD ]
Line_13 $$ for (String fileName : getFiles()) -->Line_17 $$ metadataSources.addFile(fileName)[ FD ]
Line_21 $$ final MetadataBuilder metadataBuilder = metadataSources.getMetadataBuilder(ssr)-->Line_24 $$ metadataBuilder.applyImplicitNamingStrategy((ImplicitNamingStrategy) classLoaderService.classForName(implicitNamingStrategy).newInstance())[ FD ]
Line_22 $$ ClassLoaderService classLoaderService = bsr.getService(ClassLoaderService.class)-->Line_27 $$ metadataBuilder.applyPhysicalNamingStrategy((PhysicalNamingStrategy) classLoaderService.classForName(physicalNamingStrategy).newInstance())[ FD ]
Line_2 $$ private SchemaExport buildSchemaExport() throws Exception -->Line_26 $$ if (physicalNamingStrategy != null) [ CD ]
Line_2 $$ private SchemaExport buildSchemaExport() throws Exception -->Line_5 $$ final StandardServiceRegistryBuilder ssrBuilder = new StandardServiceRegistryBuilder(bsr)[ CD ]
Line_2 $$ private SchemaExport buildSchemaExport() throws Exception -->Line_4 $$ final MetadataSources metadataSources = new MetadataSources(bsr)[ CD ]
Line_21 $$ final MetadataBuilder metadataBuilder = metadataSources.getMetadataBuilder(ssr)-->Line_27 $$ metadataBuilder.applyPhysicalNamingStrategy((PhysicalNamingStrategy) classLoaderService.classForName(physicalNamingStrategy).newInstance())[ FD ]
Line_2 $$ private SchemaExport buildSchemaExport() throws Exception -->Line_9 $$ if (propertiesFile != null) [ CD ]
Line_2 $$ private SchemaExport buildSchemaExport() throws Exception -->Line_20 $$ final StandardServiceRegistryImpl ssr = (StandardServiceRegistryImpl) ssrBuilder.build()[ CD ]
Line_6 $$ if (configurationFile != null) -->Line_7 $$ ssrBuilder.configure(configurationFile)[ CD ]
Line_20 $$ final StandardServiceRegistryImpl ssr = (StandardServiceRegistryImpl) ssrBuilder.build()-->Line_21 $$ final MetadataBuilder metadataBuilder = metadataSources.getMetadataBuilder(ssr)[ FD ]
Line_2 $$ private SchemaExport buildSchemaExport() throws Exception -->Line_23 $$ if (implicitNamingStrategy != null) [ CD ]
Line_14 $$ if (fileName.endsWith(".jar")) -->Line_15 $$ metadataSources.addJar(new File(fileName))[ CD ]
Line_5 $$ final StandardServiceRegistryBuilder ssrBuilder = new StandardServiceRegistryBuilder(bsr)-->Line_7 $$ ssrBuilder.configure(configurationFile)[ FD ]
Line_2 $$ private SchemaExport buildSchemaExport() throws Exception -->Line_21 $$ final MetadataBuilder metadataBuilder = metadataSources.getMetadataBuilder(ssr)[ CD ]
Line_4 $$ final MetadataSources metadataSources = new MetadataSources(bsr)-->Line_21 $$ final MetadataBuilder metadataBuilder = metadataSources.getMetadataBuilder(ssr)[ FD ]
Line_4 $$ final MetadataSources metadataSources = new MetadataSources(bsr)-->Line_15 $$ metadataSources.addJar(new File(fileName))[ FD ]
