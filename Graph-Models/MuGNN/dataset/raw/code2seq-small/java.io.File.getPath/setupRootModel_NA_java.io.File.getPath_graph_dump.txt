Line_3 $$ final CompilerModuleExtension compilerModuleExtension = rootModel.getModuleExtension(CompilerModuleExtension.class)-->Line_4 $$ compilerModuleExtension.setExcludeOutput(true)[ FD ]
Line_24 $$ for (LibraryDescriptor libDescriptor : ModuleInsight.getLibraryDependencies(descriptor, projectDescriptor.getLibraries())) -->Line_29 $$ final Collection<File> jars = libDescriptor.getJars()[ FD ]
Line_7 $$ for (File contentRoot : contentRoots) -->Line_9 $$ VirtualFile moduleContentRoot = lfs.refreshAndFindFileByPath(FileUtil.toSystemIndependentName(contentRoot.getPath()))[ FD ]
Line_16 $$ if (sourceRoot != null) -->Line_17 $$ contentEntry.addSourceFolder(sourceRoot, shouldBeTestRoot(srcRoot.getDirectory()), getPackagePrefix(srcRoot))[ CD ]
Line_2 $$ private static void setupRootModel(ProjectDescriptor projectDescriptor, final ModuleDescriptor descriptor, final ModifiableRootModel rootModel, final Map<LibraryDescriptor, Library> projectLibs) -->Line_5 $$ rootModel.inheritSdk()[ CD ]
Line_2 $$ private static void setupRootModel(ProjectDescriptor projectDescriptor, final ModuleDescriptor descriptor, final ModifiableRootModel rootModel, final Map<LibraryDescriptor, Library> projectLibs) -->Line_25 $$ final Library projectLib = projectLibs.get(libDescriptor)[ FD ]
Line_2 $$ private static void setupRootModel(ProjectDescriptor projectDescriptor, final ModuleDescriptor descriptor, final ModifiableRootModel rootModel, final Map<LibraryDescriptor, Library> projectLibs) -->Line_6 $$ final Set<File> contentRoots = descriptor.getContentRoots()[ CD ]
Line_9 $$ VirtualFile moduleContentRoot = lfs.refreshAndFindFileByPath(FileUtil.toSystemIndependentName(contentRoot.getPath()))-->Line_10 $$ if (moduleContentRoot != null) [ FD ]
Line_23 $$ final LibraryTable moduleLibraryTable = rootModel.getModuleLibraryTable()-->Line_31 $$ Library library = moduleLibraryTable.createLibrary()[ FD ]
Line_14 $$ final String srcpath = FileUtil.toSystemIndependentName(srcRoot.getDirectory().getPath())-->Line_15 $$ final VirtualFile sourceRoot = lfs.refreshAndFindFileByPath(srcpath)[ FD ]
Line_24 $$ for (LibraryDescriptor libDescriptor : ModuleInsight.getLibraryDependencies(descriptor, projectDescriptor.getLibraries())) -->Line_25 $$ final Library projectLib = projectLibs.get(libDescriptor)[ FD ]
Line_26 $$ if (projectLib != null) -->Line_29 $$ final Collection<File> jars = libDescriptor.getJars()[ CD ]
Line_8 $$ final LocalFileSystem lfs = LocalFileSystem.getInstance()-->Line_9 $$ VirtualFile moduleContentRoot = lfs.refreshAndFindFileByPath(FileUtil.toSystemIndependentName(contentRoot.getPath()))[ FD ]
Line_7 $$ for (File contentRoot : contentRoots) -->Line_12 $$ final Collection<DetectedSourceRoot> sourceRoots = descriptor.getSourceRoots(contentRoot)[ FD ]
Line_31 $$ Library library = moduleLibraryTable.createLibrary()-->Line_32 $$ Library.ModifiableModel modifiableModel = library.getModifiableModel()[ FD ]
Line_25 $$ final Library projectLib = projectLibs.get(libDescriptor)-->Line_27 $$ rootModel.addLibraryEntry(projectLib)[ FD ]
Line_9 $$ VirtualFile moduleContentRoot = lfs.refreshAndFindFileByPath(FileUtil.toSystemIndependentName(contentRoot.getPath()))-->Line_11 $$ final ContentEntry contentEntry = rootModel.addContentEntry(moduleContentRoot)[ FD ]
Line_15 $$ final VirtualFile sourceRoot = lfs.refreshAndFindFileByPath(srcpath)-->Line_16 $$ if (sourceRoot != null) [ FD ]
Line_2 $$ private static void setupRootModel(ProjectDescriptor projectDescriptor, final ModuleDescriptor descriptor, final ModifiableRootModel rootModel, final Map<LibraryDescriptor, Library> projectLibs) -->Line_24 $$ for (LibraryDescriptor libDescriptor : ModuleInsight.getLibraryDependencies(descriptor, projectDescriptor.getLibraries())) [ FD ]
Line_3 $$ final CompilerModuleExtension compilerModuleExtension = rootModel.getModuleExtension(CompilerModuleExtension.class)-->Line_22 $$ compilerModuleExtension.inheritCompilerOutputPath(true)[ FD ]
Line_10 $$ if (moduleContentRoot != null) -->Line_11 $$ final ContentEntry contentEntry = rootModel.addContentEntry(moduleContentRoot)[ CD ]
Line_11 $$ final ContentEntry contentEntry = rootModel.addContentEntry(moduleContentRoot)-->Line_17 $$ contentEntry.addSourceFolder(sourceRoot, shouldBeTestRoot(srcRoot.getDirectory()), getPackagePrefix(srcRoot))[ FD ]
Line_8 $$ final LocalFileSystem lfs = LocalFileSystem.getInstance()-->Line_15 $$ final VirtualFile sourceRoot = lfs.refreshAndFindFileByPath(srcpath)[ FD ]
Line_26 $$ if (projectLib != null) -->Line_27 $$ rootModel.addLibraryEntry(projectLib)[ CD ]
Line_13 $$ for (DetectedSourceRoot srcRoot : sourceRoots) -->Line_17 $$ contentEntry.addSourceFolder(sourceRoot, shouldBeTestRoot(srcRoot.getDirectory()), getPackagePrefix(srcRoot))[ FD ]
Line_2 $$ private static void setupRootModel(ProjectDescriptor projectDescriptor, final ModuleDescriptor descriptor, final ModifiableRootModel rootModel, final Map<LibraryDescriptor, Library> projectLibs) -->Line_12 $$ final Collection<DetectedSourceRoot> sourceRoots = descriptor.getSourceRoots(contentRoot)[ FD ]
Line_2 $$ private static void setupRootModel(ProjectDescriptor projectDescriptor, final ModuleDescriptor descriptor, final ModifiableRootModel rootModel, final Map<LibraryDescriptor, Library> projectLibs) -->Line_6 $$ final Set<File> contentRoots = descriptor.getContentRoots()[ FD ]
Line_32 $$ Library.ModifiableModel modifiableModel = library.getModifiableModel()-->Line_33 $$ modifiableModel.addRoot(VfsUtil.getUrlForLibraryRoot(file), OrderRootType.CLASSES)[ FD ]
Line_2 $$ private static void setupRootModel(ProjectDescriptor projectDescriptor, final ModuleDescriptor descriptor, final ModifiableRootModel rootModel, final Map<LibraryDescriptor, Library> projectLibs) -->Line_4 $$ compilerModuleExtension.setExcludeOutput(true)[ CD ]
Line_2 $$ private static void setupRootModel(ProjectDescriptor projectDescriptor, final ModuleDescriptor descriptor, final ModifiableRootModel rootModel, final Map<LibraryDescriptor, Library> projectLibs) -->Line_11 $$ final ContentEntry contentEntry = rootModel.addContentEntry(moduleContentRoot)[ FD ]
Line_30 $$ for (File file : jars) -->Line_33 $$ modifiableModel.addRoot(VfsUtil.getUrlForLibraryRoot(file), OrderRootType.CLASSES)[ FD ]
Line_2 $$ private static void setupRootModel(ProjectDescriptor projectDescriptor, final ModuleDescriptor descriptor, final ModifiableRootModel rootModel, final Map<LibraryDescriptor, Library> projectLibs) -->Line_27 $$ rootModel.addLibraryEntry(projectLib)[ FD ]
Line_2 $$ private static void setupRootModel(ProjectDescriptor projectDescriptor, final ModuleDescriptor descriptor, final ModifiableRootModel rootModel, final Map<LibraryDescriptor, Library> projectLibs) -->Line_3 $$ final CompilerModuleExtension compilerModuleExtension = rootModel.getModuleExtension(CompilerModuleExtension.class)[ FD ]
Line_2 $$ private static void setupRootModel(ProjectDescriptor projectDescriptor, final ModuleDescriptor descriptor, final ModifiableRootModel rootModel, final Map<LibraryDescriptor, Library> projectLibs) -->Line_3 $$ final CompilerModuleExtension compilerModuleExtension = rootModel.getModuleExtension(CompilerModuleExtension.class)[ CD ]
Line_15 $$ final VirtualFile sourceRoot = lfs.refreshAndFindFileByPath(srcpath)-->Line_17 $$ contentEntry.addSourceFolder(sourceRoot, shouldBeTestRoot(srcRoot.getDirectory()), getPackagePrefix(srcRoot))[ FD ]
Line_2 $$ private static void setupRootModel(ProjectDescriptor projectDescriptor, final ModuleDescriptor descriptor, final ModifiableRootModel rootModel, final Map<LibraryDescriptor, Library> projectLibs) -->Line_23 $$ final LibraryTable moduleLibraryTable = rootModel.getModuleLibraryTable()[ CD ]
Line_32 $$ Library.ModifiableModel modifiableModel = library.getModifiableModel()-->Line_34 $$ modifiableModel.commit()[ FD ]
Line_2 $$ private static void setupRootModel(ProjectDescriptor projectDescriptor, final ModuleDescriptor descriptor, final ModifiableRootModel rootModel, final Map<LibraryDescriptor, Library> projectLibs) -->Line_5 $$ rootModel.inheritSdk()[ FD ]
Line_2 $$ private static void setupRootModel(ProjectDescriptor projectDescriptor, final ModuleDescriptor descriptor, final ModifiableRootModel rootModel, final Map<LibraryDescriptor, Library> projectLibs) -->Line_23 $$ final LibraryTable moduleLibraryTable = rootModel.getModuleLibraryTable()[ FD ]
Line_25 $$ final Library projectLib = projectLibs.get(libDescriptor)-->Line_26 $$ if (projectLib != null) [ FD ]
Line_2 $$ private static void setupRootModel(ProjectDescriptor projectDescriptor, final ModuleDescriptor descriptor, final ModifiableRootModel rootModel, final Map<LibraryDescriptor, Library> projectLibs) -->Line_22 $$ compilerModuleExtension.inheritCompilerOutputPath(true)[ CD ]
Line_10 $$ if (moduleContentRoot != null) -->Line_12 $$ final Collection<DetectedSourceRoot> sourceRoots = descriptor.getSourceRoots(contentRoot)[ CD ]
Line_13 $$ for (DetectedSourceRoot srcRoot : sourceRoots) -->Line_14 $$ final String srcpath = FileUtil.toSystemIndependentName(srcRoot.getDirectory().getPath())[ FD ]
