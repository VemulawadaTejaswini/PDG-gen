Line_2 $$ public VirtualFile createChildDirectory(Object requestor, @NotNull final VirtualFile parent, @NotNull final String dir) throws IOException -->Line_3 $$ if (!VirtualFile.isValidName(dir)) [ CD ]
Line_2 $$ public VirtualFile createChildDirectory(Object requestor, @NotNull final VirtualFile parent, @NotNull final String dir) throws IOException -->Line_22 $$ auxNotifyCompleted(new ThrowableConsumer<LocalFileOperationsHandler, IOException>() [ CD ]
Line_12 $$ File ioParent = convertToIOFile(parent)-->Line_13 $$ if (!ioParent.isDirectory()) [ FD ]
Line_22 $$ auxNotifyCompleted(new ThrowableConsumer<LocalFileOperationsHandler, IOException>() -->Line_24 $$ handler.createDirectory(parent, dir)[ FD ]
Line_16 $$ if (!auxCreateDirectory(parent, dir)) -->Line_17 $$ File ioDir = new File(ioParent, dir)[ CD ]
Line_2 $$ public VirtualFile createChildDirectory(Object requestor, @NotNull final VirtualFile parent, @NotNull final String dir) throws IOException -->Line_6 $$ if (!parent.exists() || !parent.isDirectory()) [ FD ]
Line_2 $$ public VirtualFile createChildDirectory(Object requestor, @NotNull final VirtualFile parent, @NotNull final String dir) throws IOException -->Line_6 $$ if (!parent.exists() || !parent.isDirectory()) [ CD ]
Line_2 $$ public VirtualFile createChildDirectory(Object requestor, @NotNull final VirtualFile parent, @NotNull final String dir) throws IOException -->Line_16 $$ if (!auxCreateDirectory(parent, dir)) [ FD ]
Line_2 $$ public VirtualFile createChildDirectory(Object requestor, @NotNull final VirtualFile parent, @NotNull final String dir) throws IOException -->Line_9 $$ if (parent.findChild(dir) != null) [ CD ]
Line_2 $$ public VirtualFile createChildDirectory(Object requestor, @NotNull final VirtualFile parent, @NotNull final String dir) throws IOException -->Line_12 $$ File ioParent = convertToIOFile(parent)[ FD ]
Line_2 $$ public VirtualFile createChildDirectory(Object requestor, @NotNull final VirtualFile parent, @NotNull final String dir) throws IOException -->Line_16 $$ if (!auxCreateDirectory(parent, dir)) [ CD ]
Line_2 $$ public VirtualFile createChildDirectory(Object requestor, @NotNull final VirtualFile parent, @NotNull final String dir) throws IOException -->Line_12 $$ File ioParent = convertToIOFile(parent)[ CD ]
Line_12 $$ File ioParent = convertToIOFile(parent)-->Line_14 $$ throw new IOException(VfsBundle.message("target.not.directory.error", ioParent.getPath()))[ FD ]
Line_2 $$ public VirtualFile createChildDirectory(Object requestor, @NotNull final VirtualFile parent, @NotNull final String dir) throws IOException -->Line_24 $$ handler.createDirectory(parent, dir)[ FD ]
Line_2 $$ public VirtualFile createChildDirectory(Object requestor, @NotNull final VirtualFile parent, @NotNull final String dir) throws IOException -->Line_7 $$ throw new IOException(VfsBundle.message("vfs.target.not.directory.error", parent.getPath()))[ FD ]
Line_2 $$ public VirtualFile createChildDirectory(Object requestor, @NotNull final VirtualFile parent, @NotNull final String dir) throws IOException -->Line_10 $$ throw new IOException(VfsBundle.message("vfs.target.already.exists.error", parent.getPath() + "/" + dir))[ FD ]
Line_2 $$ public VirtualFile createChildDirectory(Object requestor, @NotNull final VirtualFile parent, @NotNull final String dir) throws IOException -->Line_13 $$ if (!ioParent.isDirectory()) [ CD ]
Line_16 $$ if (!auxCreateDirectory(parent, dir)) -->Line_18 $$ if (!(ioDir.mkdirs() || ioDir.isDirectory())) [ CD ]
Line_2 $$ public VirtualFile createChildDirectory(Object requestor, @NotNull final VirtualFile parent, @NotNull final String dir) throws IOException -->Line_4 $$ throw new IOException(VfsBundle.message("directory.invalid.name.error", dir))[ FD ]
Line_22 $$ auxNotifyCompleted(new ThrowableConsumer<LocalFileOperationsHandler, IOException>() -->Line_24 $$ handler.createDirectory(parent, dir)[ CD ]
Line_17 $$ File ioDir = new File(ioParent, dir)-->Line_18 $$ if (!(ioDir.mkdirs() || ioDir.isDirectory())) [ FD ]
Line_2 $$ public VirtualFile createChildDirectory(Object requestor, @NotNull final VirtualFile parent, @NotNull final String dir) throws IOException -->Line_27 $$ return new FakeVirtualFile(parent, dir)[ CD ]
Line_17 $$ File ioDir = new File(ioParent, dir)-->Line_19 $$ throw new IOException(VfsBundle.message("new.directory.failed.error", ioDir.getPath()))[ FD ]
Line_2 $$ public VirtualFile createChildDirectory(Object requestor, @NotNull final VirtualFile parent, @NotNull final String dir) throws IOException -->Line_3 $$ if (!VirtualFile.isValidName(dir)) [ FD ]
Line_2 $$ public VirtualFile createChildDirectory(Object requestor, @NotNull final VirtualFile parent, @NotNull final String dir) throws IOException -->Line_9 $$ if (parent.findChild(dir) != null) [ FD ]
