Line_31 $$ for (final ContentEntry contentEntry : contentEntries) -->Line_36 $$ final VirtualFile fileContent = contentEntry.getFile()[ FD ]
Line_2 $$ private static void addSourceRoots(@NotNull Project project, final ContentEntry[] contentEntries, final Runnable finishRunnable) -->Line_48 $$ new SwingWorker() [ CD ]
Line_2 $$ private static void addSourceRoots(@NotNull Project project, final ContentEntry[] contentEntries, final Runnable finishRunnable) -->Line_13 $$ final ProgressIndicator progressIndicator = new SmoothProgressAdapter(progressWindow, project)[ CD ]
Line_34 $$ for (final JavaModuleSourceRoot suggestedRoot : suggestedRoots) -->Line_38 $$ contentEntry.addSourceFolder(sourceRoot, false, suggestedRoot.getPackagePrefix())[ FD ]
Line_12 $$ final ProgressWindow progressWindow = new ProgressWindow(true, project)-->Line_25 $$ progressWindow.setTitle(ProjectBundle.message("module.paths.searching.source.roots.title"))[ FD ]
Line_16 $$ final Runnable process = new Runnable() -->Line_26 $$ ProgressManager.getInstance().runProcess(process, progressIndicator)[ FD ]
Line_35 $$ final VirtualFile sourceRoot = LocalFileSystem.getInstance().findFileByIoFile(suggestedRoot.getDirectory())-->Line_38 $$ contentEntry.addSourceFolder(sourceRoot, false, suggestedRoot.getPackagePrefix())[ FD ]
Line_6 $$ final VirtualFile file = contentEntry.getFile()-->Line_7 $$ if (file != null) [ FD ]
Line_2 $$ private static void addSourceRoots(@NotNull Project project, final ContentEntry[] contentEntries, final Runnable finishRunnable) -->Line_14 $$ final Runnable searchRunnable = new Runnable() [ CD ]
Line_20 $$ final Collection<JavaModuleSourceRoot> roots = JavaSourceRootDetectionUtil.suggestRoots(file)-->Line_21 $$ entryToRootMap.put(fileToEntryMap.get(file), roots)[ FD ]
Line_5 $$ for (final ContentEntry contentEntry : contentEntries) -->Line_6 $$ final VirtualFile file = contentEntry.getFile()[ FD ]
Line_18 $$ for (final File file : fileToEntryMap.keySet()) -->Line_20 $$ final Collection<JavaModuleSourceRoot> roots = JavaSourceRootDetectionUtil.suggestRoots(file)[ FD ]
Line_3 $$ final HashMap<ContentEntry, Collection<JavaModuleSourceRoot>> entryToRootMap = new HashMap<ContentEntry, Collection<JavaModuleSourceRoot>>()-->Line_21 $$ entryToRootMap.put(fileToEntryMap.get(file), roots)[ FD ]
Line_32 $$ final Collection<JavaModuleSourceRoot> suggestedRoots = entryToRootMap.get(contentEntry)-->Line_33 $$ if (suggestedRoots != null) [ FD ]
Line_29 $$ final Runnable addSourcesRunnable = new Runnable() -->Line_43 $$ if (finishRunnable != null) [ CD ]
Line_14 $$ final Runnable searchRunnable = new Runnable() -->Line_26 $$ ProgressManager.getInstance().runProcess(process, progressIndicator)[ CD ]
Line_3 $$ final HashMap<ContentEntry, Collection<JavaModuleSourceRoot>> entryToRootMap = new HashMap<ContentEntry, Collection<JavaModuleSourceRoot>>()-->Line_32 $$ final Collection<JavaModuleSourceRoot> suggestedRoots = entryToRootMap.get(contentEntry)[ FD ]
Line_7 $$ if (file != null) -->Line_8 $$ entryToRootMap.put(contentEntry, null)[ CD ]
Line_43 $$ if (finishRunnable != null) -->Line_44 $$ finishRunnable.run()[ CD ]
Line_14 $$ final Runnable searchRunnable = new Runnable() -->Line_50 $$ searchRunnable.run()[ FD ]
Line_34 $$ for (final JavaModuleSourceRoot suggestedRoot : suggestedRoots) -->Line_35 $$ final VirtualFile sourceRoot = LocalFileSystem.getInstance().findFileByIoFile(suggestedRoot.getDirectory())[ FD ]
Line_14 $$ final Runnable searchRunnable = new Runnable() -->Line_16 $$ final Runnable process = new Runnable() [ CD ]
Line_6 $$ final VirtualFile file = contentEntry.getFile()-->Line_21 $$ entryToRootMap.put(fileToEntryMap.get(file), roots)[ FD ]
Line_31 $$ for (final ContentEntry contentEntry : contentEntries) -->Line_38 $$ contentEntry.addSourceFolder(sourceRoot, false, suggestedRoot.getPackagePrefix())[ FD ]
Line_2 $$ private static void addSourceRoots(@NotNull Project project, final ContentEntry[] contentEntries, final Runnable finishRunnable) -->Line_44 $$ finishRunnable.run()[ FD ]
Line_48 $$ new SwingWorker() -->Line_54 $$ addSourcesRunnable.run()[ CD ]
Line_2 $$ private static void addSourceRoots(@NotNull Project project, final ContentEntry[] contentEntries, final Runnable finishRunnable) -->Line_3 $$ final HashMap<ContentEntry, Collection<JavaModuleSourceRoot>> entryToRootMap = new HashMap<ContentEntry, Collection<JavaModuleSourceRoot>>()[ CD ]
Line_6 $$ final VirtualFile file = contentEntry.getFile()-->Line_20 $$ final Collection<JavaModuleSourceRoot> roots = JavaSourceRootDetectionUtil.suggestRoots(file)[ FD ]
Line_2 $$ private static void addSourceRoots(@NotNull Project project, final ContentEntry[] contentEntries, final Runnable finishRunnable) -->Line_43 $$ if (finishRunnable != null) [ FD ]
Line_5 $$ for (final ContentEntry contentEntry : contentEntries) -->Line_38 $$ contentEntry.addSourceFolder(sourceRoot, false, suggestedRoot.getPackagePrefix())[ FD ]
Line_37 $$ if (sourceRoot != null && fileContent != null && VfsUtilCore.isAncestor(fileContent, sourceRoot, false)) -->Line_38 $$ contentEntry.addSourceFolder(sourceRoot, false, suggestedRoot.getPackagePrefix())[ CD ]
Line_4 $$ final Map<File, ContentEntry> fileToEntryMap = new HashMap<File, ContentEntry>()-->Line_21 $$ entryToRootMap.put(fileToEntryMap.get(file), roots)[ FD ]
Line_14 $$ final Runnable searchRunnable = new Runnable() -->Line_25 $$ progressWindow.setTitle(ProjectBundle.message("module.paths.searching.source.roots.title"))[ CD ]
Line_48 $$ new SwingWorker() -->Line_51 $$ return null[ CD ]
Line_7 $$ if (file != null) -->Line_9 $$ fileToEntryMap.put(VfsUtilCore.virtualToIoFile(file), contentEntry)[ CD ]
Line_36 $$ final VirtualFile fileContent = contentEntry.getFile()-->Line_37 $$ if (sourceRoot != null && fileContent != null && VfsUtilCore.isAncestor(fileContent, sourceRoot, false)) [ FD ]
Line_4 $$ final Map<File, ContentEntry> fileToEntryMap = new HashMap<File, ContentEntry>()-->Line_9 $$ fileToEntryMap.put(VfsUtilCore.virtualToIoFile(file), contentEntry)[ FD ]
Line_18 $$ for (final File file : fileToEntryMap.keySet()) -->Line_19 $$ progressIndicator.setText(ProjectBundle.message("module.paths.searching.source.roots.progress", file.getPath()))[ FD ]
Line_2 $$ private static void addSourceRoots(@NotNull Project project, final ContentEntry[] contentEntries, final Runnable finishRunnable) -->Line_12 $$ final ProgressWindow progressWindow = new ProgressWindow(true, project)[ CD ]
Line_2 $$ private static void addSourceRoots(@NotNull Project project, final ContentEntry[] contentEntries, final Runnable finishRunnable) -->Line_4 $$ final Map<File, ContentEntry> fileToEntryMap = new HashMap<File, ContentEntry>()[ CD ]
Line_5 $$ for (final ContentEntry contentEntry : contentEntries) -->Line_8 $$ entryToRootMap.put(contentEntry, null)[ FD ]
Line_5 $$ for (final ContentEntry contentEntry : contentEntries) -->Line_32 $$ final Collection<JavaModuleSourceRoot> suggestedRoots = entryToRootMap.get(contentEntry)[ FD ]
Line_6 $$ final VirtualFile file = contentEntry.getFile()-->Line_9 $$ fileToEntryMap.put(VfsUtilCore.virtualToIoFile(file), contentEntry)[ FD ]
Line_13 $$ final ProgressIndicator progressIndicator = new SmoothProgressAdapter(progressWindow, project)-->Line_26 $$ ProgressManager.getInstance().runProcess(process, progressIndicator)[ FD ]
Line_31 $$ for (final ContentEntry contentEntry : contentEntries) -->Line_32 $$ final Collection<JavaModuleSourceRoot> suggestedRoots = entryToRootMap.get(contentEntry)[ FD ]
Line_4 $$ final Map<File, ContentEntry> fileToEntryMap = new HashMap<File, ContentEntry>()-->Line_18 $$ for (final File file : fileToEntryMap.keySet()) [ FD ]
Line_13 $$ final ProgressIndicator progressIndicator = new SmoothProgressAdapter(progressWindow, project)-->Line_19 $$ progressIndicator.setText(ProjectBundle.message("module.paths.searching.source.roots.progress", file.getPath()))[ FD ]
Line_5 $$ for (final ContentEntry contentEntry : contentEntries) -->Line_9 $$ fileToEntryMap.put(VfsUtilCore.virtualToIoFile(file), contentEntry)[ FD ]
Line_48 $$ new SwingWorker() -->Line_50 $$ searchRunnable.run()[ CD ]
Line_35 $$ final VirtualFile sourceRoot = LocalFileSystem.getInstance().findFileByIoFile(suggestedRoot.getDirectory())-->Line_37 $$ if (sourceRoot != null && fileContent != null && VfsUtilCore.isAncestor(fileContent, sourceRoot, false)) [ FD ]
Line_5 $$ for (final ContentEntry contentEntry : contentEntries) -->Line_36 $$ final VirtualFile fileContent = contentEntry.getFile()[ FD ]
Line_6 $$ final VirtualFile file = contentEntry.getFile()-->Line_19 $$ progressIndicator.setText(ProjectBundle.message("module.paths.searching.source.roots.progress", file.getPath()))[ FD ]
Line_18 $$ for (final File file : fileToEntryMap.keySet()) -->Line_21 $$ entryToRootMap.put(fileToEntryMap.get(file), roots)[ FD ]
Line_3 $$ final HashMap<ContentEntry, Collection<JavaModuleSourceRoot>> entryToRootMap = new HashMap<ContentEntry, Collection<JavaModuleSourceRoot>>()-->Line_8 $$ entryToRootMap.put(contentEntry, null)[ FD ]
