Line_138 $$ final File workDirectory = getBuildSystemDirectory()-->Line_167 $$ cmdLine.setWorkDirectory(workDirectory)[ FD ]
Line_22 $$ compilerPath = ClasspathBootstrap.getResourcePath(systemCompiler.getClass())-->Line_25 $$ if (compilerPath == null) [ FD ]
Line_15 $$ if (FileUtil.pathsEqual(projectJdk.getHomePath(), internalJdk.getHomePath())) -->Line_22 $$ compilerPath = ClasspathBootstrap.getResourcePath(systemCompiler.getClass())[ CD ]
Line_41 $$ String userDefinedHeapSize = null-->Line_62 $$ if (userDefinedHeapSize != null) [ FD ]
Line_107 $$ debugPort = Registry.intValue("compiler.process.debug.port")-->Line_110 $$ debugPort = NetUtils.findAvailableSocketPort()[ FD ]
Line_49 $$ final String option = tokenizer.nextToken()-->Line_52 $$ userDefinedHeapSize = option[ FD ]
Line_110 $$ debugPort = NetUtils.findAvailableSocketPort()-->Line_197 $$ processHandler.putUserData(COMPILER_PROCESS_DEBUG_PORT, debugPort)[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_37 $$ cmdLine.setExePath(vmExecutablePath)[ CD ]
Line_52 $$ userDefinedHeapSize = option-->Line_62 $$ if (userDefinedHeapSize != null) [ FD ]
Line_129 $$ final String value = System.getProperty(name)-->Line_130 $$ if (value != null) [ FD ]
Line_6 $$ final String forcedCompiledJdkHome = Registry.stringValue(COMPILER_PROCESS_JDK_PROPERTY)-->Line_7 $$ if (StringUtil.isEmptyOrSpaces(forcedCompiledJdkHome)) [ FD ]
Line_87 $$ final String shouldGenerateIndex = System.getProperty(GlobalOptions.GENERATE_CLASSPATH_INDEX_OPTION)-->Line_88 $$ if (shouldGenerateIndex != null) [ FD ]
Line_49 $$ final String option = tokenizer.nextToken()-->Line_99 $$ cmdLine.addParameter(option)[ FD ]
Line_4 $$ final String vmExecutablePath-->Line_29 $$ vmExecutablePath = projectJdkType.getVMExecutablePath(projectJdk)[ FD ]
Line_3 $$ final String compilerPath-->Line_25 $$ if (compilerPath == null) [ FD ]
Line_43 $$ final String userAdditionalVMOptions = config.COMPILER_PROCESS_ADDITIONAL_VM_OPTIONS-->Line_44 $$ final boolean userLocalOptionsActive = !StringUtil.isEmptyOrSpaces(userAdditionalVMOptions)[ FD ]
Line_7 $$ if (StringUtil.isEmptyOrSpaces(forcedCompiledJdkHome)) -->Line_31 $$ compilerPath = new File(forcedCompiledJdkHome, "lib/tools.jar").getAbsolutePath()[ CD ]
Line_12 $$ final Sdk internalJdk = JavaAwareProjectJdkTableImpl.getInstanceEx().getInternalJdk()-->Line_15 $$ if (FileUtil.pathsEqual(projectJdk.getHomePath(), internalJdk.getHomePath())) [ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_93 $$ if (Boolean.TRUE.equals(Boolean.valueOf(System.getProperty("java.net.preferIPv4Stack", "false")))) [ CD ]
Line_173 $$ final OSProcessHandler processHandler = new OSProcessHandler(cmdLine) -->Line_182 $$ return false[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_153 $$ cmdLine.addParameter("-classpath")[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_34 $$ final CompilerConfiguration projectConfig = CompilerConfiguration.getInstance(project)[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_136 $$ cmdLine.addParameter("-D" + PathManager.PROPERTY_PLUGINS_PATH + "=" + PathManager.getPluginsPath())[ CD ]
Line_22 $$ compilerPath = ClasspathBootstrap.getResourcePath(systemCompiler.getClass())-->Line_24 $$ compilerPath = projectJdkType.getToolsPath(projectJdk)[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_62 $$ if (userDefinedHeapSize != null) [ CD ]
Line_185 $$ processHandler.addProcessListener(new ProcessAdapter() -->Line_192 $$ LOG.info("BUILDER_PROCESS [" + outputType.toString() + "]: " + text.trim())[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_138 $$ final File workDirectory = getBuildSystemDirectory()[ CD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_163 $$ cmdLine.addParameter(Boolean.valueOf(System.getProperty("java.net.preferIPv6Addresses", "false")) ? "::1" : "127.0.0.1")[ FD ]
Line_49 $$ final String option = tokenizer.nextToken()-->Line_50 $$ if (StringUtil.startsWithIgnoreCase(option, "-Xmx")) [ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_101 $$ if (isProfilingMode) [ CD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_91 $$ cmdLine.addParameter("-D" + GlobalOptions.COMPILE_PARALLEL_OPTION + "=" + Boolean.toString(config.PARALLEL_COMPILATION))[ FD ]
Line_34 $$ final CompilerConfiguration projectConfig = CompilerConfiguration.getInstance(project)-->Line_65 $$ final int heapSize = projectConfig.getBuildProcessHeapSize(JavacConfiguration.getOptions(project, JavacConfiguration.class).MAXIMUM_HEAP_SIZE)[ FD ]
Line_110 $$ debugPort = NetUtils.findAvailableSocketPort()-->Line_196 $$ if (debugPort > 0) [ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_152 $$ launcherCp.addAll(BuildProcessClasspathManager.getLauncherClasspath(project))[ CD ]
Line_7 $$ if (StringUtil.isEmptyOrSpaces(forcedCompiledJdkHome)) -->Line_15 $$ if (FileUtil.pathsEqual(projectJdk.getHomePath(), internalJdk.getHomePath())) [ CD ]
Line_34 $$ final CompilerConfiguration projectConfig = CompilerConfiguration.getInstance(project)-->Line_45 $$ final String additionalOptions = userLocalOptionsActive ? userAdditionalVMOptions : projectConfig.getBuildProcessVMOptions()[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_157 $$ cp.addAll(myClasspathManager.getBuildProcessPluginsClasspath(project))[ CD ]
Line_138 $$ final File workDirectory = getBuildSystemDirectory()-->Line_166 $$ cmdLine.addParameter(FileUtil.toSystemIndependentName(workDirectory.getPath()))[ FD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_72 $$ cmdLine.addParameter("-Djava.awt.headless=true")[ FD ]
Line_46 $$ if (!StringUtil.isEmptyOrSpaces(additionalOptions)) -->Line_48 $$ while (tokenizer.hasMoreTokens()) [ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_156 $$ final List<String> cp = ClasspathBootstrap.getBuildProcessApplicationClasspath(true)[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_165 $$ cmdLine.addParameter(sessionId.toString())[ CD ]
Line_15 $$ if (FileUtil.pathsEqual(projectJdk.getHomePath(), internalJdk.getHomePath())) -->Line_24 $$ compilerPath = projectJdkType.getToolsPath(projectJdk)[ CD ]
Line_49 $$ final String option = tokenizer.nextToken()-->Line_58 $$ userAdditionalOptionsList.add(option)[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_35 $$ final CompilerWorkspaceConfiguration config = CompilerWorkspaceConfiguration.getInstance(project)[ FD ]
Line_62 $$ if (userDefinedHeapSize != null) -->Line_66 $$ cmdLine.addParameter("-Xmx" + heapSize + "m")[ CD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_167 $$ cmdLine.setWorkDirectory(workDirectory)[ FD ]
Line_50 $$ if (StringUtil.startsWithIgnoreCase(option, "-Xmx")) -->Line_51 $$ if (userLocalOptionsActive) [ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_88 $$ if (shouldGenerateIndex != null) [ CD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_94 $$ cmdLine.addParameter("-Djava.net.preferIPv4Stack=true")[ FD ]
Line_98 $$ for (String option : userAdditionalOptionsList) -->Line_99 $$ cmdLine.addParameter(option)[ FD ]
Line_115 $$ if (debugPort > 0) -->Line_117 $$ cmdLine.addParameter("-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=" + debugPort)[ CD ]
Line_3 $$ final String compilerPath-->Line_22 $$ compilerPath = ClasspathBootstrap.getResourcePath(systemCompiler.getClass())[ FD ]
Line_32 $$ vmExecutablePath = new File(forcedCompiledJdkHome, "bin/java").getAbsolutePath()-->Line_37 $$ cmdLine.setExePath(vmExecutablePath)[ FD ]
Line_130 $$ if (value != null) -->Line_131 $$ cmdLine.addParameter("-D" + name + "=" + value)[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_125 $$ cmdLine.addParameter("-D" + CharsetToolkit.FILE_ENCODING_PROPERTY + "=" + mySystemCharset.name())[ CD ]
Line_88 $$ if (shouldGenerateIndex != null) -->Line_89 $$ cmdLine.addParameter("-D" + GlobalOptions.GENERATE_CLASSPATH_INDEX_OPTION + "=" + shouldGenerateIndex)[ CD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_165 $$ cmdLine.addParameter(sessionId.toString())[ FD ]
Line_24 $$ compilerPath = projectJdkType.getToolsPath(projectJdk)-->Line_150 $$ launcherCp.add(compilerPath)[ FD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_161 $$ cmdLine.addParameter(classpathToString(cp))[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_42 $$ final List<String> userAdditionalOptionsList = new SmartList<String>()[ CD ]
Line_5 $$ JavaSdkVersion sdkVersion = null-->Line_73 $$ if (sdkVersion != null && sdkVersion.ordinal() < JavaSdkVersion.JDK_1_9.ordinal()) [ FD ]
Line_106 $$ if (myBuildProcessDebuggingEnabled) -->Line_108 $$ if (debugPort <= 0) [ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_148 $$ final List<String> launcherCp = new ArrayList<String>()[ CD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_102 $$ cmdLine.addParameter("-agentlib:yjpagent=disablealloc,delay=10000,sessionname=ExternalBuild")[ FD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_117 $$ cmdLine.addParameter("-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=" + debugPort)[ FD ]
Line_31 $$ compilerPath = new File(forcedCompiledJdkHome, "lib/tools.jar").getAbsolutePath()-->Line_150 $$ launcherCp.add(compilerPath)[ FD ]
Line_29 $$ vmExecutablePath = projectJdkType.getVMExecutablePath(projectJdk)-->Line_37 $$ cmdLine.setExePath(vmExecutablePath)[ FD ]
Line_83 $$ if (requestProjectPreload) -->Line_85 $$ cmdLine.addParameter("-Dpreload.config.path=" + FileUtil.toCanonicalPath(PathManager.getOptionsPath()))[ CD ]
Line_106 $$ if (myBuildProcessDebuggingEnabled) -->Line_115 $$ if (debugPort > 0) [ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_73 $$ if (sdkVersion != null && sdkVersion.ordinal() < JavaSdkVersion.JDK_1_9.ordinal()) [ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_151 $$ ClasspathBootstrap.appendJavaCompilerClasspath(launcherCp)[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_41 $$ String userDefinedHeapSize = null[ CD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_144 $$ cmdLine.addParameters(args)[ FD ]
Line_10 $$ final Sdk projectJdk = pair.first-->Line_15 $$ if (FileUtil.pathsEqual(projectJdk.getHomePath(), internalJdk.getHomePath())) [ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_127 $$ String[] propertiesToPass = [ CD ]
Line_156 $$ final List<String> cp = ClasspathBootstrap.getBuildProcessApplicationClasspath(true)-->Line_157 $$ cp.addAll(myClasspathManager.getBuildProcessPluginsClasspath(project))[ FD ]
Line_11 $$ sdkVersion = pair.second-->Line_68 $$ if (SystemInfo.isMac && sdkVersion != null && JavaSdkVersion.JDK_1_6.equals(sdkVersion) && Registry.is("compiler.process.32bit.vm.on.mac")) [ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_161 $$ cmdLine.addParameter(classpathToString(cp))[ CD ]
Line_10 $$ final Sdk projectJdk = pair.first-->Line_24 $$ compilerPath = projectJdkType.getToolsPath(projectJdk)[ FD ]
Line_107 $$ debugPort = Registry.intValue("compiler.process.debug.port")-->Line_108 $$ if (debugPort <= 0) [ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_155 $$ cmdLine.addParameter(launcherClass.getName())[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_152 $$ launcherCp.addAll(BuildProcessClasspathManager.getLauncherClasspath(project))[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_34 $$ final CompilerConfiguration projectConfig = CompilerConfiguration.getInstance(project)[ CD ]
Line_42 $$ final List<String> userAdditionalOptionsList = new SmartList<String>()-->Line_58 $$ userAdditionalOptionsList.add(option)[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_45 $$ final String additionalOptions = userLocalOptionsActive ? userAdditionalVMOptions : projectConfig.getBuildProcessVMOptions()[ CD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_154 $$ cmdLine.addParameter(classpathToString(launcherCp))[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_135 $$ cmdLine.addParameter("-D" + PathManager.PROPERTY_CONFIG_PATH + "=" + PathManager.getConfigPath())[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_142 $$ for (BuildProcessParametersProvider provider : project.getExtensions(BuildProcessParametersProvider.EP_NAME)) [ FD ]
Line_191 $$ if (!StringUtil.isEmptyOrSpaces(text)) -->Line_192 $$ LOG.info("BUILDER_PROCESS [" + outputType.toString() + "]: " + text.trim())[ CD ]
Line_22 $$ compilerPath = ClasspathBootstrap.getResourcePath(systemCompiler.getClass())-->Line_31 $$ compilerPath = new File(forcedCompiledJdkHome, "lib/tools.jar").getAbsolutePath()[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_3 $$ final String compilerPath[ CD ]
Line_48 $$ while (tokenizer.hasMoreTokens()) -->Line_50 $$ if (StringUtil.startsWithIgnoreCase(option, "-Xmx")) [ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_165 $$ cmdLine.addParameter(sessionId.toString())[ FD ]
Line_173 $$ final OSProcessHandler processHandler = new OSProcessHandler(cmdLine) -->Line_177 $$ return true[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_164 $$ cmdLine.addParameter(Integer.toString(port))[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_91 $$ cmdLine.addParameter("-D" + GlobalOptions.COMPILE_PARALLEL_OPTION + "=" + Boolean.toString(config.PARALLEL_COMPILATION))[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_72 $$ cmdLine.addParameter("-Djava.awt.headless=true")[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_199 $$ return processHandler[ CD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_134 $$ cmdLine.addParameter("-D" + PathManager.PROPERTY_HOME_PATH + "=" + PathManager.getHomePath())[ FD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_164 $$ cmdLine.addParameter(Integer.toString(port))[ FD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_84 $$ cmdLine.addParameter("-Dpreload.project.path=" + FileUtil.toCanonicalPath(getProjectPath(project)))[ FD ]
Line_24 $$ compilerPath = projectJdkType.getToolsPath(projectJdk)-->Line_31 $$ compilerPath = new File(forcedCompiledJdkHome, "lib/tools.jar").getAbsolutePath()[ FD ]
Line_15 $$ if (FileUtil.pathsEqual(projectJdk.getHomePath(), internalJdk.getHomePath())) -->Line_25 $$ if (compilerPath == null) [ CD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_162 $$ cmdLine.addParameter(BuildMain.class.getName())[ FD ]
Line_15 $$ if (FileUtil.pathsEqual(projectJdk.getHomePath(), internalJdk.getHomePath())) -->Line_19 $$ if (systemCompiler == null) [ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_157 $$ cp.addAll(myClasspathManager.getBuildProcessPluginsClasspath(project))[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_43 $$ final String userAdditionalVMOptions = config.COMPILER_PROCESS_ADDITIONAL_VM_OPTIONS[ CD ]
Line_55 $$ if ("-Dprofiling.mode=true".equals(option)) -->Line_56 $$ isProfilingMode = true[ CD ]
Line_62 $$ if (userDefinedHeapSize != null) -->Line_63 $$ cmdLine.addParameter(userDefinedHeapSize)[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_92 $$ cmdLine.addParameter("-D" + GlobalOptions.REBUILD_ON_DEPENDENCY_CHANGE_OPTION + "=" + Boolean.toString(config.REBUILD_ON_DEPENDENCY_CHANGE))[ CD ]
Line_4 $$ final String vmExecutablePath-->Line_32 $$ vmExecutablePath = new File(forcedCompiledJdkHome, "bin/java").getAbsolutePath()[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_169 $$ ApplicationManager.getApplication().getMessageBus().syncPublisher(BuildManagerListener.TOPIC).beforeBuildProcessStarted(project, sessionId)[ FD ]
Line_48 $$ while (tokenizer.hasMoreTokens()) -->Line_49 $$ final String option = tokenizer.nextToken()[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_68 $$ if (SystemInfo.isMac && sdkVersion != null && JavaSdkVersion.JDK_1_6.equals(sdkVersion) && Registry.is("compiler.process.32bit.vm.on.mac")) [ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_4 $$ final String vmExecutablePath[ CD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_155 $$ cmdLine.addParameter(launcherClass.getName())[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_44 $$ final boolean userLocalOptionsActive = !StringUtil.isEmptyOrSpaces(userAdditionalVMOptions)[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_84 $$ cmdLine.addParameter("-Dpreload.project.path=" + FileUtil.toCanonicalPath(getProjectPath(project)))[ FD ]
Line_101 $$ if (isProfilingMode) -->Line_102 $$ cmdLine.addParameter("-agentlib:yjpagent=disablealloc,delay=10000,sessionname=ExternalBuild")[ CD ]
Line_5 $$ JavaSdkVersion sdkVersion = null-->Line_68 $$ if (SystemInfo.isMac && sdkVersion != null && JavaSdkVersion.JDK_1_6.equals(sdkVersion) && Registry.is("compiler.process.32bit.vm.on.mac")) [ FD ]
Line_51 $$ if (userLocalOptionsActive) -->Line_52 $$ userDefinedHeapSize = option[ CD ]
Line_107 $$ debugPort = Registry.intValue("compiler.process.debug.port")-->Line_115 $$ if (debugPort > 0) [ FD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_116 $$ cmdLine.addParameter("-XX:+HeapDumpOnOutOfMemoryError")[ FD ]
Line_7 $$ if (StringUtil.isEmptyOrSpaces(forcedCompiledJdkHome)) -->Line_11 $$ sdkVersion = pair.second[ CD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_37 $$ cmdLine.setExePath(vmExecutablePath)[ FD ]
Line_93 $$ if (Boolean.TRUE.equals(Boolean.valueOf(System.getProperty("java.net.preferIPv4Stack", "false")))) -->Line_94 $$ cmdLine.addParameter("-Djava.net.preferIPv4Stack=true")[ CD ]
Line_106 $$ if (myBuildProcessDebuggingEnabled) -->Line_107 $$ debugPort = Registry.intValue("compiler.process.debug.port")[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_126 $$ cmdLine.addParameter("-D" + JpsGlobalLoader.FILE_TYPES_COMPONENT_NAME_KEY + "=" + FileTypeManagerImpl.getFileTypeComponentName())[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_120 $$ if (!Registry.is("compiler.process.use.memory.temp.cache")) [ CD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_79 $$ cmdLine.addParameter("-Dtest.mode=true")[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_149 $$ launcherCp.add(ClasspathBootstrap.getResourcePath(launcherClass))[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_150 $$ launcherCp.add(compilerPath)[ CD ]
Line_173 $$ final OSProcessHandler processHandler = new OSProcessHandler(cmdLine) -->Line_197 $$ processHandler.putUserData(COMPILER_PROCESS_DEBUG_PORT, debugPort)[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_87 $$ final String shouldGenerateIndex = System.getProperty(GlobalOptions.GENERATE_CLASSPATH_INDEX_OPTION)[ CD ]
Line_24 $$ compilerPath = projectJdkType.getToolsPath(projectJdk)-->Line_25 $$ if (compilerPath == null) [ FD ]
Line_143 $$ final List<String> args = provider.getVMArguments()-->Line_144 $$ cmdLine.addParameters(args)[ FD ]
Line_3 $$ final String compilerPath-->Line_24 $$ compilerPath = projectJdkType.getToolsPath(projectJdk)[ FD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_66 $$ cmdLine.addParameter("-Xmx" + heapSize + "m")[ FD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_135 $$ cmdLine.addParameter("-D" + PathManager.PROPERTY_CONFIG_PATH + "=" + PathManager.getConfigPath())[ FD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_121 $$ cmdLine.addParameter("-D" + GlobalOptions.USE_MEMORY_TEMP_CACHE_OPTION + "=false")[ FD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_126 $$ cmdLine.addParameter("-D" + JpsGlobalLoader.FILE_TYPES_COMPONENT_NAME_KEY + "=" + FileTypeManagerImpl.getFileTypeComponentName())[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_7 $$ if (StringUtil.isEmptyOrSpaces(forcedCompiledJdkHome)) [ CD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_166 $$ cmdLine.addParameter(FileUtil.toSystemIndependentName(workDirectory.getPath()))[ FD ]
Line_142 $$ for (BuildProcessParametersProvider provider : project.getExtensions(BuildProcessParametersProvider.EP_NAME)) -->Line_143 $$ final List<String> args = provider.getVMArguments()[ FD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_85 $$ cmdLine.addParameter("-Dpreload.config.path=" + FileUtil.toCanonicalPath(PathManager.getOptionsPath()))[ FD ]
Line_173 $$ final OSProcessHandler processHandler = new OSProcessHandler(cmdLine) -->Line_185 $$ processHandler.addProcessListener(new ProcessAdapter() [ FD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_141 $$ cmdLine.addParameter("-Djava.io.tmpdir=" + FileUtil.toSystemIndependentName(workDirectory.getPath()) + "/" + TEMP_DIR_NAME)[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_166 $$ cmdLine.addParameter(FileUtil.toSystemIndependentName(workDirectory.getPath()))[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_154 $$ cmdLine.addParameter(classpathToString(launcherCp))[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_158 $$ if (isProfilingMode) [ CD ]
Line_110 $$ debugPort = NetUtils.findAvailableSocketPort()-->Line_115 $$ if (debugPort > 0) [ FD ]
Line_83 $$ if (requestProjectPreload) -->Line_84 $$ cmdLine.addParameter("-Dpreload.project.path=" + FileUtil.toCanonicalPath(getProjectPath(project)))[ CD ]
Line_156 $$ final List<String> cp = ClasspathBootstrap.getBuildProcessApplicationClasspath(true)-->Line_159 $$ cp.add(new File(workDirectory, "yjp-controller-api-redist.jar").getPath())[ FD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_137 $$ cmdLine.addParameter("-D" + GlobalOptions.LOG_DIR_OPTION + "=" + FileUtil.toSystemIndependentName(getBuildLogDirectory().getAbsolutePath()))[ FD ]
Line_148 $$ final List<String> launcherCp = new ArrayList<String>()-->Line_154 $$ cmdLine.addParameter(classpathToString(launcherCp))[ FD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_92 $$ cmdLine.addParameter("-D" + GlobalOptions.REBUILD_ON_DEPENDENCY_CHANGE_OPTION + "=" + Boolean.toString(config.REBUILD_ON_DEPENDENCY_CHANGE))[ FD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_63 $$ cmdLine.addParameter(userDefinedHeapSize)[ FD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_89 $$ cmdLine.addParameter("-D" + GlobalOptions.GENERATE_CLASSPATH_INDEX_OPTION + "=" + shouldGenerateIndex)[ FD ]
Line_196 $$ if (debugPort > 0) -->Line_197 $$ processHandler.putUserData(COMPILER_PROCESS_DEBUG_PORT, debugPort)[ CD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_136 $$ cmdLine.addParameter("-D" + PathManager.PROPERTY_PLUGINS_PATH + "=" + PathManager.getPluginsPath())[ FD ]
Line_107 $$ debugPort = Registry.intValue("compiler.process.debug.port")-->Line_196 $$ if (debugPort > 0) [ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_167 $$ cmdLine.setWorkDirectory(workDirectory)[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_106 $$ if (myBuildProcessDebuggingEnabled) [ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_5 $$ JavaSdkVersion sdkVersion = null[ CD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_99 $$ cmdLine.addParameter(option)[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_35 $$ final CompilerWorkspaceConfiguration config = CompilerWorkspaceConfiguration.getInstance(project)[ CD ]
Line_148 $$ final List<String> launcherCp = new ArrayList<String>()-->Line_152 $$ launcherCp.addAll(BuildProcessClasspathManager.getLauncherClasspath(project))[ FD ]
Line_45 $$ final String additionalOptions = userLocalOptionsActive ? userAdditionalVMOptions : projectConfig.getBuildProcessVMOptions()-->Line_46 $$ if (!StringUtil.isEmptyOrSpaces(additionalOptions)) [ FD ]
Line_11 $$ sdkVersion = pair.second-->Line_73 $$ if (sdkVersion != null && sdkVersion.ordinal() < JavaSdkVersion.JDK_1_9.ordinal()) [ FD ]
Line_3 $$ final String compilerPath-->Line_31 $$ compilerPath = new File(forcedCompiledJdkHome, "lib/tools.jar").getAbsolutePath()[ FD ]
Line_107 $$ debugPort = Registry.intValue("compiler.process.debug.port")-->Line_197 $$ processHandler.putUserData(COMPILER_PROCESS_DEBUG_PORT, debugPort)[ FD ]
Line_3 $$ final String compilerPath-->Line_150 $$ launcherCp.add(compilerPath)[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_185 $$ processHandler.addProcessListener(new ProcessAdapter() [ CD ]
Line_7 $$ if (StringUtil.isEmptyOrSpaces(forcedCompiledJdkHome)) -->Line_10 $$ final Sdk projectJdk = pair.first[ CD ]
Line_52 $$ userDefinedHeapSize = option-->Line_63 $$ cmdLine.addParameter(userDefinedHeapSize)[ FD ]
Line_50 $$ if (StringUtil.startsWithIgnoreCase(option, "-Xmx")) -->Line_55 $$ if ("-Dprofiling.mode=true".equals(option)) [ CD ]
Line_7 $$ if (StringUtil.isEmptyOrSpaces(forcedCompiledJdkHome)) -->Line_29 $$ vmExecutablePath = projectJdkType.getVMExecutablePath(projectJdk)[ CD ]
Line_4 $$ final String vmExecutablePath-->Line_37 $$ cmdLine.setExePath(vmExecutablePath)[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_173 $$ final OSProcessHandler processHandler = new OSProcessHandler(cmdLine) [ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_196 $$ if (debugPort > 0) [ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_6 $$ final String forcedCompiledJdkHome = Registry.stringValue(COMPILER_PROCESS_JDK_PROPERTY)[ CD ]
Line_156 $$ final List<String> cp = ClasspathBootstrap.getBuildProcessApplicationClasspath(true)-->Line_161 $$ cmdLine.addParameter(classpathToString(cp))[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_83 $$ if (requestProjectPreload) [ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_78 $$ if (IS_UNIT_TEST_MODE) [ CD ]
Line_41 $$ String userDefinedHeapSize = null-->Line_52 $$ userDefinedHeapSize = option[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_164 $$ cmdLine.addParameter(Integer.toString(port))[ CD ]
Line_78 $$ if (IS_UNIT_TEST_MODE) -->Line_79 $$ cmdLine.addParameter("-Dtest.mode=true")[ CD ]
Line_41 $$ String userDefinedHeapSize = null-->Line_63 $$ cmdLine.addParameter(userDefinedHeapSize)[ FD ]
Line_7 $$ if (StringUtil.isEmptyOrSpaces(forcedCompiledJdkHome)) -->Line_32 $$ vmExecutablePath = new File(forcedCompiledJdkHome, "bin/java").getAbsolutePath()[ CD ]
Line_148 $$ final List<String> launcherCp = new ArrayList<String>()-->Line_149 $$ launcherCp.add(ClasspathBootstrap.getResourcePath(launcherClass))[ FD ]
Line_10 $$ final Sdk projectJdk = pair.first-->Line_26 $$ throw new ExecutionException("Cannot determine path to 'tools.jar' library for " + projectJdk.getName() + " (" + projectJdk.getHomePath() + ")")[ FD ]
Line_5 $$ JavaSdkVersion sdkVersion = null-->Line_11 $$ sdkVersion = pair.second[ FD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_125 $$ cmdLine.addParameter("-D" + CharsetToolkit.FILE_ENCODING_PROPERTY + "=" + mySystemCharset.name())[ FD ]
Line_120 $$ if (!Registry.is("compiler.process.use.memory.temp.cache")) -->Line_121 $$ cmdLine.addParameter("-D" + GlobalOptions.USE_MEMORY_TEMP_CACHE_OPTION + "=false")[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_134 $$ cmdLine.addParameter("-D" + PathManager.PROPERTY_HOME_PATH + "=" + PathManager.getHomePath())[ CD ]
Line_148 $$ final List<String> launcherCp = new ArrayList<String>()-->Line_150 $$ launcherCp.add(compilerPath)[ FD ]
Line_10 $$ final Sdk projectJdk = pair.first-->Line_29 $$ vmExecutablePath = projectJdkType.getVMExecutablePath(projectJdk)[ FD ]
Line_148 $$ final List<String> launcherCp = new ArrayList<String>()-->Line_151 $$ ClasspathBootstrap.appendJavaCompilerClasspath(launcherCp)[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_162 $$ cmdLine.addParameter(BuildMain.class.getName())[ CD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_131 $$ cmdLine.addParameter("-D" + name + "=" + value)[ FD ]
Line_47 $$ final StringTokenizer tokenizer = new StringTokenizer(additionalOptions, " ", false)-->Line_48 $$ while (tokenizer.hasMoreTokens()) [ FD ]
Line_158 $$ if (isProfilingMode) -->Line_159 $$ cp.add(new File(workDirectory, "yjp-controller-api-redist.jar").getPath())[ CD ]
Line_128 $$ for (String name : propertiesToPass) -->Line_129 $$ final String value = System.getProperty(name)[ FD ]
Line_49 $$ final String option = tokenizer.nextToken()-->Line_55 $$ if ("-Dprofiling.mode=true".equals(option)) [ FD ]
Line_138 $$ final File workDirectory = getBuildSystemDirectory()-->Line_141 $$ cmdLine.addParameter("-Djava.io.tmpdir=" + FileUtil.toSystemIndependentName(workDirectory.getPath()) + "/" + TEMP_DIR_NAME)[ FD ]
Line_115 $$ if (debugPort > 0) -->Line_116 $$ cmdLine.addParameter("-XX:+HeapDumpOnOutOfMemoryError")[ CD ]
Line_7 $$ if (StringUtil.isEmptyOrSpaces(forcedCompiledJdkHome)) -->Line_12 $$ final Sdk internalJdk = JavaAwareProjectJdkTableImpl.getInstanceEx().getInternalJdk()[ CD ]
Line_46 $$ if (!StringUtil.isEmptyOrSpaces(additionalOptions)) -->Line_47 $$ final StringTokenizer tokenizer = new StringTokenizer(additionalOptions, " ", false)[ CD ]
Line_22 $$ compilerPath = ClasspathBootstrap.getResourcePath(systemCompiler.getClass())-->Line_150 $$ launcherCp.add(compilerPath)[ FD ]
Line_36 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_153 $$ cmdLine.addParameter("-classpath")[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_65 $$ final int heapSize = projectConfig.getBuildProcessHeapSize(JavacConfiguration.getOptions(project, JavacConfiguration.class).MAXIMUM_HEAP_SIZE)[ FD ]
Line_47 $$ final StringTokenizer tokenizer = new StringTokenizer(additionalOptions, " ", false)-->Line_49 $$ final String option = tokenizer.nextToken()[ FD ]
Line_29 $$ vmExecutablePath = projectJdkType.getVMExecutablePath(projectJdk)-->Line_32 $$ vmExecutablePath = new File(forcedCompiledJdkHome, "bin/java").getAbsolutePath()[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_141 $$ cmdLine.addParameter("-Djava.io.tmpdir=" + FileUtil.toSystemIndependentName(workDirectory.getPath()) + "/" + TEMP_DIR_NAME)[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_163 $$ cmdLine.addParameter(Boolean.valueOf(System.getProperty("java.net.preferIPv6Addresses", "false")) ? "::1" : "127.0.0.1")[ CD ]
Line_62 $$ if (userDefinedHeapSize != null) -->Line_65 $$ final int heapSize = projectConfig.getBuildProcessHeapSize(JavacConfiguration.getOptions(project, JavacConfiguration.class).MAXIMUM_HEAP_SIZE)[ CD ]
Line_185 $$ processHandler.addProcessListener(new ProcessAdapter() -->Line_191 $$ if (!StringUtil.isEmptyOrSpaces(text)) [ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_137 $$ cmdLine.addParameter("-D" + GlobalOptions.LOG_DIR_OPTION + "=" + FileUtil.toSystemIndependentName(getBuildLogDirectory().getAbsolutePath()))[ CD ]
Line_50 $$ if (StringUtil.startsWithIgnoreCase(option, "-Xmx")) -->Line_58 $$ userAdditionalOptionsList.add(option)[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_46 $$ if (!StringUtil.isEmptyOrSpaces(additionalOptions)) [ CD ]
