Line_5 $$ final File innerDir = new File(dir, "innerDir")-->Line_6 $$ innerDir.mkdir()[ FD ]
Line_3 $$ final File dir = new File(myClientRoot, "a")-->Line_4 $$ dir.mkdir()[ FD ]
Line_11 $$ final VirtualFile innerVf = myLocalFileSystem.refreshAndFindFileByIoFile(innerDir)-->Line_17 $$ assertFoundAndIgnored(innerVf)[ FD ]
Line_7 $$ final File file1 = new File(innerDir, "file1")-->Line_12 $$ final VirtualFile vf1 = myLocalFileSystem.refreshAndFindFileByIoFile(file1)[ FD ]
Line_2 $$ public void testDirIsIgnored() throws Exception -->Line_6 $$ innerDir.mkdir()[ CD ]
Line_2 $$ public void testDirIsIgnored() throws Exception -->Line_15 $$ myChangeListManager.addFilesToIgnore(ignoredFileBean)[ CD ]
Line_5 $$ final File innerDir = new File(dir, "innerDir")-->Line_11 $$ final VirtualFile innerVf = myLocalFileSystem.refreshAndFindFileByIoFile(innerDir)[ FD ]
Line_2 $$ public void testDirIsIgnored() throws Exception -->Line_3 $$ final File dir = new File(myClientRoot, "a")[ CD ]
Line_2 $$ public void testDirIsIgnored() throws Exception -->Line_18 $$ assertFoundAndIgnored(vf1)[ CD ]
Line_2 $$ public void testDirIsIgnored() throws Exception -->Line_4 $$ dir.mkdir()[ CD ]
Line_2 $$ public void testDirIsIgnored() throws Exception -->Line_16 $$ dirty()[ CD ]
Line_3 $$ final File dir = new File(myClientRoot, "a")-->Line_14 $$ final IgnoredFileBean ignoredFileBean = IgnoredBeanFactory.ignoreUnderDirectory(FileUtil.toSystemIndependentName(dir.getPath()), myProject)[ FD ]
Line_2 $$ public void testDirIsIgnored() throws Exception -->Line_9 $$ file1.createNewFile()[ CD ]
Line_7 $$ final File file1 = new File(innerDir, "file1")-->Line_9 $$ file1.createNewFile()[ FD ]
Line_2 $$ public void testDirIsIgnored() throws Exception -->Line_14 $$ final IgnoredFileBean ignoredFileBean = IgnoredBeanFactory.ignoreUnderDirectory(FileUtil.toSystemIndependentName(dir.getPath()), myProject)[ CD ]
Line_2 $$ public void testDirIsIgnored() throws Exception -->Line_7 $$ final File file1 = new File(innerDir, "file1")[ CD ]
Line_8 $$ final File file2 = new File(innerDir, "file2")-->Line_10 $$ file2.createNewFile()[ FD ]
Line_2 $$ public void testDirIsIgnored() throws Exception -->Line_19 $$ assertFoundAndIgnored(vf2)[ CD ]
Line_2 $$ public void testDirIsIgnored() throws Exception -->Line_12 $$ final VirtualFile vf1 = myLocalFileSystem.refreshAndFindFileByIoFile(file1)[ CD ]
Line_13 $$ final VirtualFile vf2 = myLocalFileSystem.refreshAndFindFileByIoFile(file2)-->Line_19 $$ assertFoundAndIgnored(vf2)[ FD ]
Line_2 $$ public void testDirIsIgnored() throws Exception -->Line_8 $$ final File file2 = new File(innerDir, "file2")[ CD ]
Line_2 $$ public void testDirIsIgnored() throws Exception -->Line_11 $$ final VirtualFile innerVf = myLocalFileSystem.refreshAndFindFileByIoFile(innerDir)[ CD ]
Line_2 $$ public void testDirIsIgnored() throws Exception -->Line_17 $$ assertFoundAndIgnored(innerVf)[ CD ]
Line_2 $$ public void testDirIsIgnored() throws Exception -->Line_5 $$ final File innerDir = new File(dir, "innerDir")[ CD ]
Line_2 $$ public void testDirIsIgnored() throws Exception -->Line_13 $$ final VirtualFile vf2 = myLocalFileSystem.refreshAndFindFileByIoFile(file2)[ CD ]
Line_8 $$ final File file2 = new File(innerDir, "file2")-->Line_13 $$ final VirtualFile vf2 = myLocalFileSystem.refreshAndFindFileByIoFile(file2)[ FD ]
Line_2 $$ public void testDirIsIgnored() throws Exception -->Line_10 $$ file2.createNewFile()[ CD ]
Line_14 $$ final IgnoredFileBean ignoredFileBean = IgnoredBeanFactory.ignoreUnderDirectory(FileUtil.toSystemIndependentName(dir.getPath()), myProject)-->Line_15 $$ myChangeListManager.addFilesToIgnore(ignoredFileBean)[ FD ]
Line_12 $$ final VirtualFile vf1 = myLocalFileSystem.refreshAndFindFileByIoFile(file1)-->Line_18 $$ assertFoundAndIgnored(vf1)[ FD ]
