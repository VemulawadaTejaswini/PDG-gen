Line_2 $$ public void testDispose() throws Exception -->Line_5 $$ assertThat(lock1.lock(), equalTo(SocketLock.ActivateStatus.NO_INSTANCE))[ CD ]
Line_2 $$ public void testDispose() throws Exception -->Line_6 $$ assertThat(lock2.lock(), equalTo(SocketLock.ActivateStatus.ACTIVATED))[ CD ]
Line_3 $$ SocketLock lock1 = new SocketLock(myTempDir.getPath() + "/1", myTempDir.getPath() + "/1-")-->Line_5 $$ assertThat(lock1.lock(), equalTo(SocketLock.ActivateStatus.NO_INSTANCE))[ FD ]
Line_4 $$ SocketLock lock2 = new SocketLock(myTempDir.getPath() + "/1", myTempDir.getPath() + "/1-")-->Line_9 $$ lock2.dispose()[ FD ]
Line_2 $$ public void testDispose() throws Exception -->Line_4 $$ SocketLock lock2 = new SocketLock(myTempDir.getPath() + "/1", myTempDir.getPath() + "/1-")[ CD ]
Line_2 $$ public void testDispose() throws Exception -->Line_7 $$ lock1.dispose()[ CD ]
Line_4 $$ SocketLock lock2 = new SocketLock(myTempDir.getPath() + "/1", myTempDir.getPath() + "/1-")-->Line_6 $$ assertThat(lock2.lock(), equalTo(SocketLock.ActivateStatus.ACTIVATED))[ FD ]
Line_3 $$ SocketLock lock1 = new SocketLock(myTempDir.getPath() + "/1", myTempDir.getPath() + "/1-")-->Line_7 $$ lock1.dispose()[ FD ]
Line_4 $$ SocketLock lock2 = new SocketLock(myTempDir.getPath() + "/1", myTempDir.getPath() + "/1-")-->Line_8 $$ assertThat(lock2.lock(), equalTo(SocketLock.ActivateStatus.NO_INSTANCE))[ FD ]
Line_2 $$ public void testDispose() throws Exception -->Line_3 $$ SocketLock lock1 = new SocketLock(myTempDir.getPath() + "/1", myTempDir.getPath() + "/1-")[ CD ]
Line_2 $$ public void testDispose() throws Exception -->Line_9 $$ lock2.dispose()[ CD ]
Line_2 $$ public void testDispose() throws Exception -->Line_8 $$ assertThat(lock2.lock(), equalTo(SocketLock.ActivateStatus.NO_INSTANCE))[ CD ]
