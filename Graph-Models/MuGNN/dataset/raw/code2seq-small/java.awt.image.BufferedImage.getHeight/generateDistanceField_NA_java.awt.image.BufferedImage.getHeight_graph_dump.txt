Line_16 $$ int centerX = (x * downscale) + (downscale / 2)-->Line_18 $$ float signedDistance = findSignedDistance(centerX, centerY, bitmap)[ FD ]
Line_15 $$ for (int x = 0; x < outWidth; ++x) -->Line_19 $$ outImage.setRGB(x, y, distanceToRGB(signedDistance))[ CD ]
Line_15 $$ for (int x = 0; x < outWidth; ++x) -->Line_18 $$ float signedDistance = findSignedDistance(centerX, centerY, bitmap)[ CD ]
Line_2 $$ public BufferedImage generateDistanceField(BufferedImage inImage) -->Line_7 $$ final BufferedImage outImage = new BufferedImage(outWidth, outHeight, BufferedImage.TYPE_4BYTE_ABGR)[ CD ]
Line_10 $$ for (int x = 0; x < inWidth; ++x) -->Line_11 $$ bitmap[y][x] = isInside(inImage.getRGB(x, y))[ FD ]
Line_2 $$ public BufferedImage generateDistanceField(BufferedImage inImage) -->Line_22 $$ return outImage[ CD ]
Line_2 $$ public BufferedImage generateDistanceField(BufferedImage inImage) -->Line_5 $$ final int outWidth = inWidth / downscale[ CD ]
Line_17 $$ int centerY = (y * downscale) + (downscale / 2)-->Line_18 $$ float signedDistance = findSignedDistance(centerX, centerY, bitmap)[ FD ]
Line_9 $$ for (int y = 0; y < inHeight; ++y) -->Line_11 $$ bitmap[y][x] = isInside(inImage.getRGB(x, y))[ FD ]
Line_10 $$ for (int x = 0; x < inWidth; ++x) -->Line_15 $$ for (int x = 0; x < outWidth; ++x) [ FD ]
Line_2 $$ public BufferedImage generateDistanceField(BufferedImage inImage) -->Line_4 $$ final int inHeight = inImage.getHeight()[ FD ]
Line_15 $$ for (int x = 0; x < outWidth; ++x) -->Line_17 $$ int centerY = (y * downscale) + (downscale / 2)[ CD ]
Line_14 $$ for (int y = 0; y < outHeight; ++y) -->Line_15 $$ for (int x = 0; x < outWidth; ++x) [ CD ]
Line_8 $$ final boolean[][] bitmap = new boolean[inHeight][inWidth]-->Line_18 $$ float signedDistance = findSignedDistance(centerX, centerY, bitmap)[ FD ]
Line_2 $$ public BufferedImage generateDistanceField(BufferedImage inImage) -->Line_6 $$ final int outHeight = inHeight / downscale[ CD ]
Line_9 $$ for (int y = 0; y < inHeight; ++y) -->Line_19 $$ outImage.setRGB(x, y, distanceToRGB(signedDistance))[ FD ]
Line_7 $$ final BufferedImage outImage = new BufferedImage(outWidth, outHeight, BufferedImage.TYPE_4BYTE_ABGR)-->Line_19 $$ outImage.setRGB(x, y, distanceToRGB(signedDistance))[ FD ]
Line_9 $$ for (int y = 0; y < inHeight; ++y) -->Line_10 $$ for (int x = 0; x < inWidth; ++x) [ CD ]
Line_2 $$ public BufferedImage generateDistanceField(BufferedImage inImage) -->Line_11 $$ bitmap[y][x] = isInside(inImage.getRGB(x, y))[ FD ]
Line_2 $$ public BufferedImage generateDistanceField(BufferedImage inImage) -->Line_14 $$ for (int y = 0; y < outHeight; ++y) [ CD ]
Line_10 $$ for (int x = 0; x < inWidth; ++x) -->Line_11 $$ bitmap[y][x] = isInside(inImage.getRGB(x, y))[ CD ]
Line_18 $$ float signedDistance = findSignedDistance(centerX, centerY, bitmap)-->Line_19 $$ outImage.setRGB(x, y, distanceToRGB(signedDistance))[ FD ]
Line_14 $$ for (int y = 0; y < outHeight; ++y) -->Line_19 $$ outImage.setRGB(x, y, distanceToRGB(signedDistance))[ FD ]
Line_9 $$ for (int y = 0; y < inHeight; ++y) -->Line_14 $$ for (int y = 0; y < outHeight; ++y) [ FD ]
Line_2 $$ public BufferedImage generateDistanceField(BufferedImage inImage) -->Line_3 $$ final int inWidth = inImage.getWidth()[ FD ]
Line_2 $$ public BufferedImage generateDistanceField(BufferedImage inImage) -->Line_9 $$ for (int y = 0; y < inHeight; ++y) [ CD ]
Line_4 $$ final int inHeight = inImage.getHeight()-->Line_9 $$ for (int y = 0; y < inHeight; ++y) [ FD ]
Line_6 $$ final int outHeight = inHeight / downscale-->Line_14 $$ for (int y = 0; y < outHeight; ++y) [ FD ]
Line_10 $$ for (int x = 0; x < inWidth; ++x) -->Line_19 $$ outImage.setRGB(x, y, distanceToRGB(signedDistance))[ FD ]
Line_2 $$ public BufferedImage generateDistanceField(BufferedImage inImage) -->Line_8 $$ final boolean[][] bitmap = new boolean[inHeight][inWidth][ CD ]
Line_2 $$ public BufferedImage generateDistanceField(BufferedImage inImage) -->Line_4 $$ final int inHeight = inImage.getHeight()[ CD ]
Line_15 $$ for (int x = 0; x < outWidth; ++x) -->Line_16 $$ int centerX = (x * downscale) + (downscale / 2)[ CD ]
Line_3 $$ final int inWidth = inImage.getWidth()-->Line_10 $$ for (int x = 0; x < inWidth; ++x) [ FD ]
Line_5 $$ final int outWidth = inWidth / downscale-->Line_15 $$ for (int x = 0; x < outWidth; ++x) [ FD ]
Line_15 $$ for (int x = 0; x < outWidth; ++x) -->Line_19 $$ outImage.setRGB(x, y, distanceToRGB(signedDistance))[ FD ]
Line_2 $$ public BufferedImage generateDistanceField(BufferedImage inImage) -->Line_3 $$ final int inWidth = inImage.getWidth()[ CD ]
