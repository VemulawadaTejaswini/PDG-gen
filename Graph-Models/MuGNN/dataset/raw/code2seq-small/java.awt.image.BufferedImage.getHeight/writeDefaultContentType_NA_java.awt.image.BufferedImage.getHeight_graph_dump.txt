Line_4 $$ MediaType contentType = new MediaType("image", "png")-->Line_5 $$ converter.setDefaultContentType(contentType)[ FD ]
Line_7 $$ MockHttpOutputMessage outputMessage = new MockHttpOutputMessage()-->Line_8 $$ converter.write(body, new MediaType("*", "*"), outputMessage)[ FD ]
Line_2 $$ public void writeDefaultContentType() throws IOException -->Line_13 $$ assertEquals("Invalid width", 750, result.getWidth())[ CD ]
Line_11 $$ BufferedImage result = ImageIO.read(new ByteArrayInputStream(outputMessage.getBodyAsBytes()))-->Line_13 $$ assertEquals("Invalid width", 750, result.getWidth())[ FD ]
Line_6 $$ BufferedImage body = ImageIO.read(logo.getFile())-->Line_8 $$ converter.write(body, new MediaType("*", "*"), outputMessage)[ FD ]
Line_2 $$ public void writeDefaultContentType() throws IOException -->Line_8 $$ converter.write(body, new MediaType("*", "*"), outputMessage)[ CD ]
Line_7 $$ MockHttpOutputMessage outputMessage = new MockHttpOutputMessage()-->Line_9 $$ assertEquals("Invalid content type", contentType, outputMessage.getHeaders().getContentType())[ FD ]
Line_7 $$ MockHttpOutputMessage outputMessage = new MockHttpOutputMessage()-->Line_10 $$ assertTrue("Invalid size", outputMessage.getBodyAsBytes().length > 0)[ FD ]
Line_2 $$ public void writeDefaultContentType() throws IOException -->Line_12 $$ assertEquals("Invalid height", 500, result.getHeight())[ CD ]
Line_2 $$ public void writeDefaultContentType() throws IOException -->Line_10 $$ assertTrue("Invalid size", outputMessage.getBodyAsBytes().length > 0)[ CD ]
Line_2 $$ public void writeDefaultContentType() throws IOException -->Line_11 $$ BufferedImage result = ImageIO.read(new ByteArrayInputStream(outputMessage.getBodyAsBytes()))[ CD ]
Line_11 $$ BufferedImage result = ImageIO.read(new ByteArrayInputStream(outputMessage.getBodyAsBytes()))-->Line_12 $$ assertEquals("Invalid height", 500, result.getHeight())[ FD ]
Line_2 $$ public void writeDefaultContentType() throws IOException -->Line_7 $$ MockHttpOutputMessage outputMessage = new MockHttpOutputMessage()[ CD ]
Line_4 $$ MediaType contentType = new MediaType("image", "png")-->Line_9 $$ assertEquals("Invalid content type", contentType, outputMessage.getHeaders().getContentType())[ FD ]
Line_3 $$ Resource logo = new ClassPathResource("logo.jpg", BufferedImageHttpMessageConverterTests.class)-->Line_6 $$ BufferedImage body = ImageIO.read(logo.getFile())[ FD ]
Line_7 $$ MockHttpOutputMessage outputMessage = new MockHttpOutputMessage()-->Line_11 $$ BufferedImage result = ImageIO.read(new ByteArrayInputStream(outputMessage.getBodyAsBytes()))[ FD ]
Line_2 $$ public void writeDefaultContentType() throws IOException -->Line_5 $$ converter.setDefaultContentType(contentType)[ CD ]
Line_2 $$ public void writeDefaultContentType() throws IOException -->Line_9 $$ assertEquals("Invalid content type", contentType, outputMessage.getHeaders().getContentType())[ CD ]
Line_2 $$ public void writeDefaultContentType() throws IOException -->Line_4 $$ MediaType contentType = new MediaType("image", "png")[ CD ]
Line_2 $$ public void writeDefaultContentType() throws IOException -->Line_6 $$ BufferedImage body = ImageIO.read(logo.getFile())[ CD ]
Line_2 $$ public void writeDefaultContentType() throws IOException -->Line_3 $$ Resource logo = new ClassPathResource("logo.jpg", BufferedImageHttpMessageConverterTests.class)[ CD ]
