Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_29 $$ bos.write4Bytes(imageSize)[ FD ]
Line_45 $$ for (int y = src.getHeight() - 1; y >= 0; y--) -->Line_56 $$ for (int y = src.getHeight() - 1; y >= 0; y--) [ FD ]
Line_64 $$ if (bits_in_cache >= 8) -->Line_66 $$ bit_cache = 0[ CD ]
Line_62 $$ bit_cache |= 1-->Line_66 $$ bit_cache = 0[ FD ]
Line_2 $$ private static void writeTransparentIcoImageWithSanselan(BufferedImage src, OutputStream os) throws ImageWriteException, IOException -->Line_47 $$ int argb = src.getRGB(x, y)[ FD ]
Line_46 $$ for (int x = 0; x < src.getWidth(); x++) -->Line_58 $$ int argb = src.getRGB(x, y)[ FD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_72 $$ bos.write(0xff & bit_cache)[ FD ]
Line_2 $$ private static void writeTransparentIcoImageWithSanselan(BufferedImage src, OutputStream os) throws ImageWriteException, IOException -->Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)[ CD ]
Line_42 $$ int bit_cache = 0-->Line_62 $$ bit_cache |= 1[ FD ]
Line_56 $$ for (int y = src.getHeight() - 1; y >= 0; y--) -->Line_57 $$ for (int x = 0; x < src.getWidth(); x++) [ CD ]
Line_2 $$ private static void writeTransparentIcoImageWithSanselan(BufferedImage src, OutputStream os) throws ImageWriteException, IOException -->Line_3 $$ LOG.assertTrue(BufferedImage.TYPE_INT_ARGB == src.getType() || BufferedImage.TYPE_4BYTE_ABGR == src.getType())[ CD ]
Line_45 $$ for (int y = src.getHeight() - 1; y >= 0; y--) -->Line_58 $$ int argb = src.getRGB(x, y)[ FD ]
Line_57 $$ for (int x = 0; x < src.getWidth(); x++) -->Line_58 $$ int argb = src.getRGB(x, y)[ FD ]
Line_43 $$ int bits_in_cache = 0-->Line_67 $$ bits_in_cache = 0[ FD ]
Line_20 $$ iconDirEntryWidth = 0-->Line_23 $$ bos.write(iconDirEntryWidth)[ FD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_26 $$ bos.write(0)[ FD ]
Line_56 $$ for (int y = src.getHeight() - 1; y >= 0; y--) -->Line_58 $$ int argb = src.getRGB(x, y)[ FD ]
Line_2 $$ private static void writeTransparentIcoImageWithSanselan(BufferedImage src, OutputStream os) throws ImageWriteException, IOException -->Line_3 $$ LOG.assertTrue(BufferedImage.TYPE_INT_ARGB == src.getType() || BufferedImage.TYPE_4BYTE_ABGR == src.getType())[ FD ]
Line_42 $$ int bit_cache = 0-->Line_73 $$ bit_cache = 0[ FD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_25 $$ bos.write(0)[ FD ]
Line_60 $$ bit_cache <<= 1-->Line_73 $$ bit_cache = 0[ FD ]
Line_46 $$ for (int x = 0; x < src.getWidth(); x++) -->Line_53 $$ for (int x = 0; x < row_padding; x++) bos.write(0)[ FD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_27 $$ bos.write2Bytes(1)[ FD ]
Line_2 $$ private static void writeTransparentIcoImageWithSanselan(BufferedImage src, OutputStream os) throws ImageWriteException, IOException -->Line_32 $$ bos.write4Bytes(src.getWidth())[ FD ]
Line_21 $$ iconDirEntryHeight = 0-->Line_24 $$ bos.write(iconDirEntryHeight)[ FD ]
Line_46 $$ for (int x = 0; x < src.getWidth(); x++) -->Line_47 $$ int argb = src.getRGB(x, y)[ FD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_31 $$ bos.write4Bytes(40)[ FD ]
Line_2 $$ private static void writeTransparentIcoImageWithSanselan(BufferedImage src, OutputStream os) throws ImageWriteException, IOException -->Line_18 $$ int iconDirEntryHeight = src.getHeight()[ FD ]
Line_66 $$ bit_cache = 0-->Line_73 $$ bit_cache = 0[ FD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_36 $$ bos.write4Bytes(0)[ FD ]
Line_70 $$ if (bits_in_cache > 0) -->Line_71 $$ bit_cache <<= (8 - bits_in_cache)[ CD ]
Line_2 $$ private static void writeTransparentIcoImageWithSanselan(BufferedImage src, OutputStream os) throws ImageWriteException, IOException -->Line_46 $$ for (int x = 0; x < src.getWidth(); x++) [ FD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_24 $$ bos.write(iconDirEntryHeight)[ FD ]
Line_64 $$ if (bits_in_cache >= 8) -->Line_65 $$ bos.write(0xff & bit_cache)[ CD ]
Line_2 $$ private static void writeTransparentIcoImageWithSanselan(BufferedImage src, OutputStream os) throws ImageWriteException, IOException -->Line_45 $$ for (int y = src.getHeight() - 1; y >= 0; y--) [ FD ]
Line_64 $$ if (bits_in_cache >= 8) -->Line_67 $$ bits_in_cache = 0[ CD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_35 $$ bos.write2Bytes(bitCount)[ FD ]
Line_2 $$ private static void writeTransparentIcoImageWithSanselan(BufferedImage src, OutputStream os) throws ImageWriteException, IOException -->Line_17 $$ int iconDirEntryWidth = src.getWidth()[ FD ]
Line_57 $$ for (int x = 0; x < src.getWidth(); x++) -->Line_76 $$ for (int x = 0; x < t_row_padding; x++) bos.write(0)[ FD ]
Line_59 $$ int alpha = 0xff & (argb >> 24)-->Line_61 $$ if (alpha == 0)[ FD ]
Line_74 $$ bits_in_cache = 0-->Line_70 $$ if (bits_in_cache > 0) [ FD ]
Line_4 $$ int bitCount = 32-->Line_28 $$ bos.write2Bytes(bitCount)[ FD ]
Line_45 $$ for (int y = src.getHeight() - 1; y >= 0; y--) -->Line_47 $$ int argb = src.getRGB(x, y)[ FD ]
Line_57 $$ for (int x = 0; x < src.getWidth(); x++) -->Line_60 $$ bit_cache <<= 1[ CD ]
Line_57 $$ for (int x = 0; x < src.getWidth(); x++) -->Line_58 $$ int argb = src.getRGB(x, y)[ CD ]
Line_62 $$ bit_cache |= 1-->Line_71 $$ bit_cache <<= (8 - bits_in_cache)[ FD ]
Line_62 $$ bit_cache |= 1-->Line_73 $$ bit_cache = 0[ FD ]
Line_43 $$ int bits_in_cache = 0-->Line_63 $$ bits_in_cache++[ FD ]
Line_17 $$ int iconDirEntryWidth = src.getWidth()-->Line_20 $$ iconDirEntryWidth = 0[ FD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_15 $$ bos.write2Bytes(1)[ FD ]
Line_2 $$ private static void writeTransparentIcoImageWithSanselan(BufferedImage src, OutputStream os) throws ImageWriteException, IOException -->Line_7 $$ int scanline_size = (bitCount * src.getWidth() + 7) / 8[ FD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_51 $$ bos.write(0xff & (argb >> 24))[ FD ]
Line_46 $$ for (int x = 0; x < src.getWidth(); x++) -->Line_50 $$ bos.write(0xff & (argb >> 16))[ CD ]
Line_56 $$ for (int y = src.getHeight() - 1; y >= 0; y--) -->Line_76 $$ for (int x = 0; x < t_row_padding; x++) bos.write(0)[ CD ]
Line_46 $$ for (int x = 0; x < src.getWidth(); x++) -->Line_76 $$ for (int x = 0; x < t_row_padding; x++) bos.write(0)[ FD ]
Line_2 $$ private static void writeTransparentIcoImageWithSanselan(BufferedImage src, OutputStream os) throws ImageWriteException, IOException -->Line_33 $$ bos.write4Bytes(2 * src.getHeight())[ FD ]
Line_44 $$ int row_padding = scanline_size - (bitCount * src.getWidth() + 7) / 8-->Line_53 $$ for (int x = 0; x < row_padding; x++) bos.write(0)[ FD ]
Line_70 $$ if (bits_in_cache > 0) -->Line_74 $$ bits_in_cache = 0[ CD ]
Line_46 $$ for (int x = 0; x < src.getWidth(); x++) -->Line_48 $$ bos.write(0xff & argb)[ CD ]
Line_13 $$ int imageSize = 40 + src.getHeight() * scanline_size + src.getHeight() * t_scanline_size-->Line_29 $$ bos.write4Bytes(imageSize)[ FD ]
Line_67 $$ bits_in_cache = 0-->Line_70 $$ if (bits_in_cache > 0) [ FD ]
Line_56 $$ for (int y = src.getHeight() - 1; y >= 0; y--) -->Line_70 $$ if (bits_in_cache > 0) [ CD ]
Line_70 $$ if (bits_in_cache > 0) -->Line_72 $$ bos.write(0xff & bit_cache)[ CD ]
Line_46 $$ for (int x = 0; x < src.getWidth(); x++) -->Line_49 $$ bos.write(0xff & (argb >> 8))[ CD ]
Line_2 $$ private static void writeTransparentIcoImageWithSanselan(BufferedImage src, OutputStream os) throws ImageWriteException, IOException -->Line_56 $$ for (int y = src.getHeight() - 1; y >= 0; y--) [ FD ]
Line_57 $$ for (int x = 0; x < src.getWidth(); x++) -->Line_59 $$ int alpha = 0xff & (argb >> 24)[ CD ]
Line_45 $$ for (int y = src.getHeight() - 1; y >= 0; y--) -->Line_53 $$ for (int x = 0; x < row_padding; x++) bos.write(0)[ CD ]
Line_57 $$ for (int x = 0; x < src.getWidth(); x++) -->Line_61 $$ if (alpha == 0)[ CD ]
Line_61 $$ if (alpha == 0)-->Line_62 $$ bit_cache |= 1[ CD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_41 $$ bos.write4Bytes(0)[ FD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_33 $$ bos.write4Bytes(2 * src.getHeight())[ FD ]
Line_70 $$ if (bits_in_cache > 0) -->Line_73 $$ bit_cache = 0[ CD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_40 $$ bos.write4Bytes(0)[ FD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_32 $$ bos.write4Bytes(src.getWidth())[ FD ]
Line_57 $$ for (int x = 0; x < src.getWidth(); x++) -->Line_64 $$ if (bits_in_cache >= 8) [ CD ]
Line_53 $$ for (int x = 0; x < row_padding; x++) bos.write(0)-->Line_58 $$ int argb = src.getRGB(x, y)[ FD ]
Line_17 $$ int iconDirEntryWidth = src.getWidth()-->Line_23 $$ bos.write(iconDirEntryWidth)[ FD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_49 $$ bos.write(0xff & (argb >> 8))[ FD ]
Line_4 $$ int bitCount = 32-->Line_35 $$ bos.write2Bytes(bitCount)[ FD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_48 $$ bos.write(0xff & argb)[ FD ]
Line_18 $$ int iconDirEntryHeight = src.getHeight()-->Line_21 $$ iconDirEntryHeight = 0[ FD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_53 $$ bos.write(0)[ FD ]
Line_19 $$ if (iconDirEntryWidth > 255 || iconDirEntryHeight > 255) -->Line_21 $$ iconDirEntryHeight = 0[ CD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_30 $$ bos.write4Bytes(22)[ FD ]
Line_2 $$ private static void writeTransparentIcoImageWithSanselan(BufferedImage src, OutputStream os) throws ImageWriteException, IOException -->Line_57 $$ for (int x = 0; x < src.getWidth(); x++) [ FD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_80 $$ bos.close()[ FD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_28 $$ bos.write2Bytes(bitCount)[ FD ]
Line_57 $$ for (int x = 0; x < src.getWidth(); x++) -->Line_63 $$ bits_in_cache++[ CD ]
Line_2 $$ private static void writeTransparentIcoImageWithSanselan(BufferedImage src, OutputStream os) throws ImageWriteException, IOException -->Line_44 $$ int row_padding = scanline_size - (bitCount * src.getWidth() + 7) / 8[ FD ]
Line_53 $$ for (int x = 0; x < row_padding; x++) bos.write(0)-->Line_57 $$ for (int x = 0; x < src.getWidth(); x++) [ FD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_34 $$ bos.write2Bytes(1)[ FD ]
Line_42 $$ int bit_cache = 0-->Line_60 $$ bit_cache <<= 1[ FD ]
Line_2 $$ private static void writeTransparentIcoImageWithSanselan(BufferedImage src, OutputStream os) throws ImageWriteException, IOException -->Line_55 $$ int t_row_padding = t_scanline_size - (src.getWidth() + 7) / 8[ FD ]
Line_43 $$ int bits_in_cache = 0-->Line_74 $$ bits_in_cache = 0[ FD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_65 $$ bos.write(0xff & bit_cache)[ FD ]
Line_53 $$ for (int x = 0; x < row_padding; x++) bos.write(0)-->Line_76 $$ for (int x = 0; x < t_row_padding; x++) bos.write(0)[ FD ]
Line_2 $$ private static void writeTransparentIcoImageWithSanselan(BufferedImage src, OutputStream os) throws ImageWriteException, IOException -->Line_13 $$ int imageSize = 40 + src.getHeight() * scanline_size + src.getHeight() * t_scanline_size[ FD ]
Line_2 $$ private static void writeTransparentIcoImageWithSanselan(BufferedImage src, OutputStream os) throws ImageWriteException, IOException -->Line_4 $$ int bitCount = 32[ CD ]
Line_46 $$ for (int x = 0; x < src.getWidth(); x++) -->Line_51 $$ bos.write(0xff & (argb >> 24))[ CD ]
Line_67 $$ bits_in_cache = 0-->Line_63 $$ bits_in_cache++[ FD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_23 $$ bos.write(iconDirEntryWidth)[ FD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_16 $$ bos.write2Bytes(1)[ FD ]
Line_45 $$ for (int y = src.getHeight() - 1; y >= 0; y--) -->Line_46 $$ for (int x = 0; x < src.getWidth(); x++) [ CD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_39 $$ bos.write4Bytes(0)[ FD ]
Line_11 $$ if ((t_scanline_size % 4) != 0)-->Line_12 $$ t_scanline_size += 4 - (t_scanline_size % 4)[ CD ]
Line_66 $$ bit_cache = 0-->Line_71 $$ bit_cache <<= (8 - bits_in_cache)[ FD ]
Line_18 $$ int iconDirEntryHeight = src.getHeight()-->Line_24 $$ bos.write(iconDirEntryHeight)[ FD ]
Line_42 $$ int bit_cache = 0-->Line_71 $$ bit_cache <<= (8 - bits_in_cache)[ FD ]
Line_67 $$ bits_in_cache = 0-->Line_74 $$ bits_in_cache = 0[ FD ]
Line_8 $$ if ((scanline_size % 4) != 0)-->Line_9 $$ scanline_size += 4 - (scanline_size % 4)[ CD ]
Line_67 $$ bits_in_cache = 0-->Line_64 $$ if (bits_in_cache >= 8) [ FD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_76 $$ bos.write(0)[ FD ]
Line_46 $$ for (int x = 0; x < src.getWidth(); x++) -->Line_57 $$ for (int x = 0; x < src.getWidth(); x++) [ FD ]
Line_2 $$ private static void writeTransparentIcoImageWithSanselan(BufferedImage src, OutputStream os) throws ImageWriteException, IOException -->Line_58 $$ int argb = src.getRGB(x, y)[ FD ]
Line_19 $$ if (iconDirEntryWidth > 255 || iconDirEntryHeight > 255) -->Line_20 $$ iconDirEntryWidth = 0[ CD ]
Line_55 $$ int t_row_padding = t_scanline_size - (src.getWidth() + 7) / 8-->Line_76 $$ for (int x = 0; x < t_row_padding; x++) bos.write(0)[ FD ]
Line_7 $$ int scanline_size = (bitCount * src.getWidth() + 7) / 8-->Line_9 $$ scanline_size += 4 - (scanline_size % 4)[ FD ]
Line_10 $$ int t_scanline_size = (src.getWidth() + 7) / 8-->Line_12 $$ t_scanline_size += 4 - (t_scanline_size % 4)[ FD ]
Line_42 $$ int bit_cache = 0-->Line_66 $$ bit_cache = 0[ FD ]
Line_43 $$ int bits_in_cache = 0-->Line_70 $$ if (bits_in_cache > 0) [ FD ]
Line_60 $$ bit_cache <<= 1-->Line_66 $$ bit_cache = 0[ FD ]
Line_60 $$ bit_cache <<= 1-->Line_62 $$ bit_cache |= 1[ FD ]
Line_43 $$ int bits_in_cache = 0-->Line_64 $$ if (bits_in_cache >= 8) [ FD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_38 $$ bos.write4Bytes(0)[ FD ]
Line_2 $$ private static void writeTransparentIcoImageWithSanselan(BufferedImage src, OutputStream os) throws ImageWriteException, IOException -->Line_10 $$ int t_scanline_size = (src.getWidth() + 7) / 8[ FD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_14 $$ bos.write2Bytes(0)[ FD ]
Line_46 $$ for (int x = 0; x < src.getWidth(); x++) -->Line_47 $$ int argb = src.getRGB(x, y)[ CD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_37 $$ bos.write4Bytes(0)[ FD ]
Line_5 $$ BinaryOutputStream bos = new BinaryOutputStream(os, BinaryConstants.BYTE_ORDER_INTEL)-->Line_50 $$ bos.write(0xff & (argb >> 16))[ FD ]
Line_60 $$ bit_cache <<= 1-->Line_71 $$ bit_cache <<= (8 - bits_in_cache)[ FD ]
Line_71 $$ bit_cache <<= (8 - bits_in_cache)-->Line_73 $$ bit_cache = 0[ FD ]
