Line_30 $$ if (myCacheLevel1 == null) -->Line_31 $$ myCacheLevel1 = UIUtil.createImage(size.width, myEditor.getLineHeight() * (2 * myPreviewLines + 1), BufferedImage.TYPE_INT_RGB)[ CD ]
Line_2 $$ protected void paintComponent(@NotNull Graphics g) -->Line_6 $$ EditorGutterComponentEx gutterComponentEx = myEditor.getGutterComponentEx()[ CD ]
Line_36 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_76 $$ g2d.setColor(new JBColor(JBColor.GRAY, Gray._200))[ FD ]
Line_2 $$ protected void paintComponent(@NotNull Graphics g) -->Line_7 $$ int gutterWidth = gutterComponentEx.getWidth()[ CD ]
Line_37 $$ final AffineTransform transform = g2d.getTransform()-->Line_43 $$ translateInstance.preConcatenate(transform)[ FD ]
Line_36 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_45 $$ UIUtil.drawImage(g2d, myCacheLevel2, -gutterWidth, 0, null)[ FD ]
Line_14 $$ Graphics2D cg = myCacheLevel2.createGraphics()-->Line_25 $$ cg.setTransform(translateInstance)[ FD ]
Line_88 $$ if (UIUtil.isUnderDarcula()) -->Line_103 $$ bottomArea.subtract(topArea)[ CD ]
Line_83 $$ Graphics2D g2 = (Graphics2D) g.create()-->Line_101 $$ g2.fill(topArea)[ FD ]
Line_23 $$ translateInstance = AffineTransform.getTranslateInstance(gutterWidth - 3, lineShift)-->Line_44 $$ g2d.setTransform(translateInstance)[ FD ]
Line_48 $$ for (RangeHighlighterEx ex : myHighlighters) -->Line_49 $$ if (!ex.isValid())[ FD ]
Line_26 $$ EditorComponentImpl contentComponent = myEditor.getContentComponent()-->Line_27 $$ cg.setClip(0, -lineShift, contentComponent.getWidth(), myCacheLevel2.getHeight())[ FD ]
Line_52 $$ Object tooltip = ex.getErrorStripeTooltip()-->Line_55 $$ String s = String.valueOf(tooltip)[ FD ]
Line_11 $$ if (myCacheLevel2 == null) -->Line_12 $$ myCacheLevel2 = UIUtil.createImage(size.width, myEditor.getLineHeight() * (2 * myCachePreviewLines + 1), BufferedImage.TYPE_INT_RGB)[ CD ]
Line_14 $$ Graphics2D cg = myCacheLevel2.createGraphics()-->Line_15 $$ final AffineTransform t = cg.getTransform()[ FD ]
Line_34 $$ if (isDirty) -->Line_45 $$ UIUtil.drawImage(g2d, myCacheLevel2, -gutterWidth, 0, null)[ CD ]
Line_58 $$ s = s.replaceAll("&nbsp;", " ").replaceAll("\\s+", " ")-->Line_59 $$ s = StringUtil.unescapeXml(s)[ FD ]
Line_14 $$ Graphics2D cg = myCacheLevel2.createGraphics()-->Line_22 $$ gutterComponentEx.paint(cg)[ FD ]
Line_14 $$ Graphics2D cg = myCacheLevel2.createGraphics()-->Line_16 $$ EditorUIUtil.setupAntialiasing(cg)[ FD ]
Line_14 $$ Graphics2D cg = myCacheLevel2.createGraphics()-->Line_21 $$ cg.setClip(0, -lineShift, gutterWidth, myCacheLevel2.getHeight())[ FD ]
Line_8 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_11 $$ if (myCacheLevel2 == null) [ CD ]
Line_55 $$ String s = String.valueOf(tooltip)-->Line_56 $$ if (s.isEmpty())[ FD ]
Line_6 $$ EditorGutterComponentEx gutterComponentEx = myEditor.getGutterComponentEx()-->Line_7 $$ int gutterWidth = gutterComponentEx.getWidth()[ FD ]
Line_8 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_14 $$ Graphics2D cg = myCacheLevel2.createGraphics()[ CD ]
Line_8 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_23 $$ translateInstance = AffineTransform.getTranslateInstance(gutterWidth - 3, lineShift)[ CD ]
Line_88 $$ if (UIUtil.isUnderDarcula()) -->Line_93 $$ int ry = myEditor.getLineHeight() * 3 / 2[ CD ]
Line_83 $$ Graphics2D g2 = (Graphics2D) g.create()-->Line_87 $$ UIUtil.drawImage(g2, myCacheLevel1, 0, 0, this)[ FD ]
Line_83 $$ Graphics2D g2 = (Graphics2D) g.create()-->Line_105 $$ g2.fill(bottomArea)[ FD ]
Line_88 $$ if (UIUtil.isUnderDarcula()) -->Line_92 $$ double rx = size.width / 10[ CD ]
Line_34 $$ if (isDirty) -->Line_44 $$ g2d.setTransform(translateInstance)[ CD ]
Line_7 $$ int gutterWidth = gutterComponentEx.getWidth()-->Line_42 $$ AffineTransform translateInstance = AffineTransform.getTranslateInstance(gutterWidth, myEditor.getLineHeight() * (myCacheStartLine - myStartVisualLine))[ FD ]
Line_17 $$ int lineShift = -myEditor.getLineHeight() * myCacheStartLine-->Line_18 $$ AffineTransform translateInstance = AffineTransform.getTranslateInstance(-3, lineShift)[ FD ]
Line_8 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_24 $$ translateInstance.preConcatenate(t)[ CD ]
Line_8 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_25 $$ cg.setTransform(translateInstance)[ CD ]
Line_36 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_41 $$ g2d.fillRect(0, 0, getWidth(), getHeight())[ FD ]
Line_88 $$ if (UIUtil.isUnderDarcula()) -->Line_91 $$ double cy = 0[ CD ]
Line_98 $$ Area topArea = new Area(topShape1)-->Line_103 $$ bottomArea.subtract(topArea)[ FD ]
Line_18 $$ AffineTransform translateInstance = AffineTransform.getTranslateInstance(-3, lineShift)-->Line_20 $$ cg.setTransform(translateInstance)[ FD ]
Line_23 $$ translateInstance = AffineTransform.getTranslateInstance(gutterWidth - 3, lineShift)-->Line_25 $$ cg.setTransform(translateInstance)[ FD ]
Line_18 $$ AffineTransform translateInstance = AffineTransform.getTranslateInstance(-3, lineShift)-->Line_24 $$ translateInstance.preConcatenate(t)[ FD ]
Line_23 $$ translateInstance = AffineTransform.getTranslateInstance(gutterWidth - 3, lineShift)-->Line_43 $$ translateInstance.preConcatenate(transform)[ FD ]
Line_23 $$ translateInstance = AffineTransform.getTranslateInstance(gutterWidth - 3, lineShift)-->Line_24 $$ translateInstance.preConcatenate(t)[ FD ]
Line_17 $$ int lineShift = -myEditor.getLineHeight() * myCacheStartLine-->Line_27 $$ cg.setClip(0, -lineShift, contentComponent.getWidth(), myCacheLevel2.getHeight())[ FD ]
Line_2 $$ protected void paintComponent(@NotNull Graphics g) -->Line_8 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) [ CD ]
Line_8 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_9 $$ myCacheStartLine = fitLineToEditor(myVisualLine - myCachePreviewLines)[ CD ]
Line_8 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_26 $$ EditorComponentImpl contentComponent = myEditor.getContentComponent()[ CD ]
Line_88 $$ if (UIUtil.isUnderDarcula()) -->Line_96 $$ Shape topShape1 = new Ellipse2D.Double(cx - rx - pseudoMajorAxis / 2, cy - ry, 2 * rx, 2 * ry)[ CD ]
Line_98 $$ Area topArea = new Area(topShape1)-->Line_101 $$ g2.fill(topArea)[ FD ]
Line_59 $$ s = StringUtil.unescapeXml(s)-->Line_69 $$ int w = g2d.getFontMetrics().stringWidth(s)[ FD ]
Line_88 $$ if (UIUtil.isUnderDarcula()) -->Line_98 $$ Area topArea = new Area(topShape1)[ CD ]
Line_88 $$ if (UIUtil.isUnderDarcula()) -->Line_105 $$ g2.fill(bottomArea)[ CD ]
Line_60 $$ LogicalPosition logicalPosition = myEditor.offsetToLogicalPosition(hEndOffset)-->Line_64 $$ logicalPosition = myEditor.xyToLogicalPosition(placeToShow)[ FD ]
Line_8 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_21 $$ cg.setClip(0, -lineShift, gutterWidth, myCacheLevel2.getHeight())[ CD ]
Line_98 $$ Area topArea = new Area(topShape1)-->Line_100 $$ topArea.add(new Area(new Rectangle.Double(cx - pseudoMajorAxis / 2, cy, pseudoMajorAxis, ry)))[ FD ]
Line_70 $$ int rightEdge = rightEdges.get(logicalPosition.line)-->Line_73 $$ rightEdges.put(logicalPosition.line, rightEdge)[ FD ]
Line_8 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_15 $$ final AffineTransform t = cg.getTransform()[ CD ]
Line_2 $$ protected void paintComponent(@NotNull Graphics g) -->Line_83 $$ Graphics2D g2 = (Graphics2D) g.create()[ CD ]
Line_88 $$ if (UIUtil.isUnderDarcula()) -->Line_100 $$ topArea.add(new Area(new Rectangle.Double(cx - pseudoMajorAxis / 2, cy, pseudoMajorAxis, ry)))[ CD ]
Line_62 $$ logicalPosition = myEditor.offsetToLogicalPosition(endOfLineOffset)-->Line_64 $$ logicalPosition = myEditor.xyToLogicalPosition(placeToShow)[ FD ]
Line_61 $$ int endOfLineOffset = myEditor.getDocument().getLineEndOffset(logicalPosition.line)-->Line_62 $$ logicalPosition = myEditor.offsetToLogicalPosition(endOfLineOffset)[ FD ]
Line_2 $$ protected void paintComponent(@NotNull Graphics g) -->Line_3 $$ if (myVisualLine == -1)[ CD ]
Line_48 $$ for (RangeHighlighterEx ex : myHighlighters) -->Line_51 $$ int hEndOffset = ex.getAffectedAreaEndOffset()[ FD ]
Line_60 $$ LogicalPosition logicalPosition = myEditor.offsetToLogicalPosition(hEndOffset)-->Line_62 $$ logicalPosition = myEditor.offsetToLogicalPosition(endOfLineOffset)[ FD ]
Line_60 $$ LogicalPosition logicalPosition = myEditor.offsetToLogicalPosition(hEndOffset)-->Line_63 $$ Point placeToShow = myEditor.logicalPositionToXY(logicalPosition)[ FD ]
Line_7 $$ int gutterWidth = gutterComponentEx.getWidth()-->Line_21 $$ cg.setClip(0, -lineShift, gutterWidth, myCacheLevel2.getHeight())[ FD ]
Line_36 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_68 $$ g2d.setFont(font.deriveFont(font.getSize() * .8F))[ FD ]
Line_18 $$ AffineTransform translateInstance = AffineTransform.getTranslateInstance(-3, lineShift)-->Line_25 $$ cg.setTransform(translateInstance)[ FD ]
Line_88 $$ if (UIUtil.isUnderDarcula()) -->Line_95 $$ double pseudoMajorAxis = size.width - rx * 9 / 5[ CD ]
Line_18 $$ AffineTransform translateInstance = AffineTransform.getTranslateInstance(-3, lineShift)-->Line_43 $$ translateInstance.preConcatenate(transform)[ FD ]
Line_36 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_38 $$ EditorUIUtil.setupAntialiasing(g2d)[ FD ]
Line_72 $$ rightEdge = Math.max(rightEdge, placeToShow.x + w + 3 * R)-->Line_73 $$ rightEdges.put(logicalPosition.line, rightEdge)[ FD ]
Line_8 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_18 $$ AffineTransform translateInstance = AffineTransform.getTranslateInstance(-3, lineShift)[ CD ]
Line_34 $$ if (isDirty) -->Line_38 $$ EditorUIUtil.setupAntialiasing(g2d)[ CD ]
Line_8 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_16 $$ EditorUIUtil.setupAntialiasing(cg)[ CD ]
Line_18 $$ AffineTransform translateInstance = AffineTransform.getTranslateInstance(-3, lineShift)-->Line_19 $$ translateInstance.preConcatenate(t)[ FD ]
Line_58 $$ s = s.replaceAll("&nbsp;", " ").replaceAll("\\s+", " ")-->Line_79 $$ g2d.drawString(s, placeToShow.x + R, placeToShow.y + h - g2d.getFontMetrics(g2d.getFont()).getDescent() / 2 - 2)[ FD ]
Line_2 $$ protected void paintComponent(@NotNull Graphics g) -->Line_83 $$ Graphics2D g2 = (Graphics2D) g.create()[ FD ]
Line_34 $$ if (isDirty) -->Line_43 $$ translateInstance.preConcatenate(transform)[ CD ]
Line_36 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_69 $$ int w = g2d.getFontMetrics().stringWidth(s)[ FD ]
Line_59 $$ s = StringUtil.unescapeXml(s)-->Line_79 $$ g2d.drawString(s, placeToShow.x + R, placeToShow.y + h - g2d.getFontMetrics(g2d.getFont()).getDescent() / 2 - 2)[ FD ]
Line_55 $$ String s = String.valueOf(tooltip)-->Line_79 $$ g2d.drawString(s, placeToShow.x + R, placeToShow.y + h - g2d.getFontMetrics(g2d.getFont()).getDescent() / 2 - 2)[ FD ]
Line_34 $$ if (isDirty) -->Line_42 $$ AffineTransform translateInstance = AffineTransform.getTranslateInstance(gutterWidth, myEditor.getLineHeight() * (myCacheStartLine - myStartVisualLine))[ CD ]
Line_83 $$ Graphics2D g2 = (Graphics2D) g.create()-->Line_104 $$ g2.setPaint(new GradientPaint(0, size.height - ry, Gray._0.withAlpha(10), 0, size.height, Gray._255.withAlpha(30)))[ FD ]
Line_17 $$ int lineShift = -myEditor.getLineHeight() * myCacheStartLine-->Line_21 $$ cg.setClip(0, -lineShift, gutterWidth, myCacheLevel2.getHeight())[ FD ]
Line_46 $$ TIntIntHashMap rightEdges = new TIntIntHashMap()-->Line_73 $$ rightEdges.put(logicalPosition.line, rightEdge)[ FD ]
Line_83 $$ Graphics2D g2 = (Graphics2D) g.create()-->Line_94 $$ g2.setPaint(new GradientPaint(0, 0, Gray._255.withAlpha(75), 0, ry, Gray._255.withAlpha(10)))[ FD ]
Line_36 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_74 $$ g2d.setColor(MessageType.WARNING.getPopupBackground())[ FD ]
Line_98 $$ Area topArea = new Area(topShape1)-->Line_99 $$ topArea.add(new Area(topShape2))[ FD ]
Line_17 $$ int lineShift = -myEditor.getLineHeight() * myCacheStartLine-->Line_23 $$ translateInstance = AffineTransform.getTranslateInstance(gutterWidth - 3, lineShift)[ FD ]
Line_15 $$ final AffineTransform t = cg.getTransform()-->Line_19 $$ translateInstance.preConcatenate(t)[ FD ]
Line_7 $$ int gutterWidth = gutterComponentEx.getWidth()-->Line_45 $$ UIUtil.drawImage(g2d, myCacheLevel2, -gutterWidth, 0, null)[ FD ]
Line_2 $$ protected void paintComponent(@NotNull Graphics g) -->Line_5 $$ Dimension size = getPreferredSize()[ CD ]
Line_83 $$ Graphics2D g2 = (Graphics2D) g.create()-->Line_108 $$ g2.dispose()[ FD ]
Line_34 $$ if (isDirty) -->Line_47 $$ int h = myEditor.getLineHeight() - 2[ CD ]
Line_51 $$ int hEndOffset = ex.getAffectedAreaEndOffset()-->Line_60 $$ LogicalPosition logicalPosition = myEditor.offsetToLogicalPosition(hEndOffset)[ FD ]
Line_47 $$ int h = myEditor.getLineHeight() - 2-->Line_75 $$ g2d.fillRoundRect(placeToShow.x, placeToShow.y, w + 2 * R, h, R, R)[ FD ]
Line_36 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_79 $$ g2d.drawString(s, placeToShow.x + R, placeToShow.y + h - g2d.getFontMetrics(g2d.getFont()).getDescent() / 2 - 2)[ FD ]
Line_2 $$ protected void paintComponent(@NotNull Graphics g) -->Line_34 $$ if (isDirty) [ CD ]
Line_15 $$ final AffineTransform t = cg.getTransform()-->Line_24 $$ translateInstance.preConcatenate(t)[ FD ]
Line_48 $$ for (RangeHighlighterEx ex : myHighlighters) -->Line_52 $$ Object tooltip = ex.getErrorStripeTooltip()[ FD ]
Line_6 $$ EditorGutterComponentEx gutterComponentEx = myEditor.getGutterComponentEx()-->Line_22 $$ gutterComponentEx.paint(cg)[ FD ]
Line_36 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_44 $$ g2d.setTransform(translateInstance)[ FD ]
Line_34 $$ if (isDirty) -->Line_40 $$ g2d.setColor(myEditor.getBackgroundColor())[ CD ]
Line_83 $$ Graphics2D g2 = (Graphics2D) g.create()-->Line_86 $$ g2.setClip(new RoundRectangle2D.Double(0, 0, size.width - .5, size.height - .5, 2, 2))[ FD ]
Line_34 $$ if (isDirty) -->Line_39 $$ GraphicsUtil.setupAAPainting(g2d)[ CD ]
Line_88 $$ if (UIUtil.isUnderDarcula()) -->Line_99 $$ topArea.add(new Area(topShape2))[ CD ]
Line_67 $$ Font font = myEditor.getColorsScheme().getFont(EditorFontType.PLAIN)-->Line_68 $$ g2d.setFont(font.deriveFont(font.getSize() * .8F))[ FD ]
Line_34 $$ if (isDirty) -->Line_41 $$ g2d.fillRect(0, 0, getWidth(), getHeight())[ CD ]
Line_34 $$ if (isDirty) -->Line_37 $$ final AffineTransform transform = g2d.getTransform()[ CD ]
Line_47 $$ int h = myEditor.getLineHeight() - 2-->Line_77 $$ g2d.drawRoundRect(placeToShow.x, placeToShow.y, w + 2 * R, h, R, R)[ FD ]
Line_36 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_37 $$ final AffineTransform transform = g2d.getTransform()[ FD ]
Line_36 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_78 $$ g2d.setColor(JBColor.foreground())[ FD ]
Line_18 $$ AffineTransform translateInstance = AffineTransform.getTranslateInstance(-3, lineShift)-->Line_44 $$ g2d.setTransform(translateInstance)[ FD ]
Line_55 $$ String s = String.valueOf(tooltip)-->Line_59 $$ s = StringUtil.unescapeXml(s)[ FD ]
Line_46 $$ TIntIntHashMap rightEdges = new TIntIntHashMap()-->Line_70 $$ int rightEdge = rightEdges.get(logicalPosition.line)[ FD ]
Line_14 $$ Graphics2D cg = myCacheLevel2.createGraphics()-->Line_28 $$ contentComponent.paint(cg)[ FD ]
Line_34 $$ if (isDirty) -->Line_36 $$ Graphics2D g2d = myCacheLevel1.createGraphics()[ CD ]
Line_52 $$ Object tooltip = ex.getErrorStripeTooltip()-->Line_53 $$ if (tooltip == null)[ FD ]
Line_8 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_28 $$ contentComponent.paint(cg)[ CD ]
Line_62 $$ logicalPosition = myEditor.offsetToLogicalPosition(endOfLineOffset)-->Line_63 $$ Point placeToShow = myEditor.logicalPositionToXY(logicalPosition)[ FD ]
Line_14 $$ Graphics2D cg = myCacheLevel2.createGraphics()-->Line_27 $$ cg.setClip(0, -lineShift, contentComponent.getWidth(), myCacheLevel2.getHeight())[ FD ]
Line_36 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_39 $$ GraphicsUtil.setupAAPainting(g2d)[ FD ]
Line_63 $$ Point placeToShow = myEditor.logicalPositionToXY(logicalPosition)-->Line_64 $$ logicalPosition = myEditor.xyToLogicalPosition(placeToShow)[ FD ]
Line_8 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_20 $$ cg.setTransform(translateInstance)[ CD ]
Line_8 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_19 $$ translateInstance.preConcatenate(t)[ CD ]
Line_34 $$ if (isDirty) -->Line_46 $$ TIntIntHashMap rightEdges = new TIntIntHashMap()[ CD ]
Line_2 $$ protected void paintComponent(@NotNull Graphics g) -->Line_30 $$ if (myCacheLevel1 == null) [ CD ]
Line_36 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_40 $$ g2d.setColor(myEditor.getBackgroundColor())[ FD ]
Line_83 $$ Graphics2D g2 = (Graphics2D) g.create()-->Line_85 $$ GraphicsUtil.setupAAPainting(g2)[ FD ]
Line_88 $$ if (UIUtil.isUnderDarcula()) -->Line_90 $$ double cx = size.width / 2[ CD ]
Line_14 $$ Graphics2D cg = myCacheLevel2.createGraphics()-->Line_20 $$ cg.setTransform(translateInstance)[ FD ]
Line_8 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_27 $$ cg.setClip(0, -lineShift, contentComponent.getWidth(), myCacheLevel2.getHeight())[ CD ]
Line_26 $$ EditorComponentImpl contentComponent = myEditor.getContentComponent()-->Line_28 $$ contentComponent.paint(cg)[ FD ]
Line_88 $$ if (UIUtil.isUnderDarcula()) -->Line_94 $$ g2.setPaint(new GradientPaint(0, 0, Gray._255.withAlpha(75), 0, ry, Gray._255.withAlpha(10)))[ CD ]
Line_88 $$ if (UIUtil.isUnderDarcula()) -->Line_97 $$ Shape topShape2 = new Ellipse2D.Double(cx - rx + pseudoMajorAxis / 2, cy - ry, 2 * rx, 2 * ry)[ CD ]
Line_36 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_77 $$ g2d.drawRoundRect(placeToShow.x, placeToShow.y, w + 2 * R, h, R, R)[ FD ]
Line_8 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_10 $$ myCacheEndLine = fitLineToEditor(myCacheStartLine + 2 * myCachePreviewLines + 1)[ CD ]
Line_36 $$ Graphics2D g2d = myCacheLevel1.createGraphics()-->Line_75 $$ g2d.fillRoundRect(placeToShow.x, placeToShow.y, w + 2 * R, h, R, R)[ FD ]
Line_8 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_17 $$ int lineShift = -myEditor.getLineHeight() * myCacheStartLine[ CD ]
Line_58 $$ s = s.replaceAll("&nbsp;", " ").replaceAll("\\s+", " ")-->Line_69 $$ int w = g2d.getFontMetrics().stringWidth(s)[ FD ]
Line_70 $$ int rightEdge = rightEdges.get(logicalPosition.line)-->Line_72 $$ rightEdge = Math.max(rightEdge, placeToShow.x + w + 3 * R)[ FD ]
Line_55 $$ String s = String.valueOf(tooltip)-->Line_69 $$ int w = g2d.getFontMetrics().stringWidth(s)[ FD ]
Line_3 $$ if (myVisualLine == -1)-->Line_4 $$ return[ CD ]
Line_55 $$ String s = String.valueOf(tooltip)-->Line_58 $$ s = s.replaceAll("&nbsp;", " ").replaceAll("\\s+", " ")[ FD ]
Line_88 $$ if (UIUtil.isUnderDarcula()) -->Line_101 $$ g2.fill(topArea)[ CD ]
Line_8 $$ if (myCacheLevel2 == null || myCacheStartLine > myStartVisualLine || myCacheEndLine < myEndVisualLine) -->Line_22 $$ gutterComponentEx.paint(cg)[ CD ]
Line_102 $$ Area bottomArea = new Area(s)-->Line_105 $$ g2.fill(bottomArea)[ FD ]
Line_88 $$ if (UIUtil.isUnderDarcula()) -->Line_102 $$ Area bottomArea = new Area(s)[ CD ]
Line_88 $$ if (UIUtil.isUnderDarcula()) -->Line_104 $$ g2.setPaint(new GradientPaint(0, size.height - ry, Gray._0.withAlpha(10), 0, size.height, Gray._255.withAlpha(30)))[ CD ]
Line_70 $$ int rightEdge = rightEdges.get(logicalPosition.line)-->Line_71 $$ placeToShow.x = Math.max(placeToShow.x, rightEdge)[ FD ]
Line_18 $$ AffineTransform translateInstance = AffineTransform.getTranslateInstance(-3, lineShift)-->Line_23 $$ translateInstance = AffineTransform.getTranslateInstance(gutterWidth - 3, lineShift)[ FD ]
Line_102 $$ Area bottomArea = new Area(s)-->Line_103 $$ bottomArea.subtract(topArea)[ FD ]
