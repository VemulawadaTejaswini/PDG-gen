Line_3 $$ Resource logo = new ClassPathResource("logo.jpg", BufferedImageHttpMessageConverterTests.class)-->Line_4 $$ BufferedImage body = ImageIO.read(logo.getFile())[ FD ]
Line_4 $$ BufferedImage body = ImageIO.read(logo.getFile())-->Line_7 $$ converter.write(body, contentType, outputMessage)[ FD ]
Line_2 $$ public void write() throws IOException -->Line_5 $$ MockHttpOutputMessage outputMessage = new MockHttpOutputMessage()[ CD ]
Line_2 $$ public void write() throws IOException -->Line_7 $$ converter.write(body, contentType, outputMessage)[ CD ]
Line_5 $$ MockHttpOutputMessage outputMessage = new MockHttpOutputMessage()-->Line_8 $$ assertEquals("Invalid content type", contentType, outputMessage.getHeaders().getContentType())[ FD ]
Line_5 $$ MockHttpOutputMessage outputMessage = new MockHttpOutputMessage()-->Line_7 $$ converter.write(body, contentType, outputMessage)[ FD ]
Line_5 $$ MockHttpOutputMessage outputMessage = new MockHttpOutputMessage()-->Line_10 $$ BufferedImage result = ImageIO.read(new ByteArrayInputStream(outputMessage.getBodyAsBytes()))[ FD ]
Line_10 $$ BufferedImage result = ImageIO.read(new ByteArrayInputStream(outputMessage.getBodyAsBytes()))-->Line_11 $$ assertEquals("Invalid height", 500, result.getHeight())[ FD ]
Line_2 $$ public void write() throws IOException -->Line_12 $$ assertEquals("Invalid width", 750, result.getWidth())[ CD ]
Line_5 $$ MockHttpOutputMessage outputMessage = new MockHttpOutputMessage()-->Line_9 $$ assertTrue("Invalid size", outputMessage.getBodyAsBytes().length > 0)[ FD ]
Line_2 $$ public void write() throws IOException -->Line_11 $$ assertEquals("Invalid height", 500, result.getHeight())[ CD ]
Line_2 $$ public void write() throws IOException -->Line_6 $$ MediaType contentType = new MediaType("image", "png")[ CD ]
Line_2 $$ public void write() throws IOException -->Line_8 $$ assertEquals("Invalid content type", contentType, outputMessage.getHeaders().getContentType())[ CD ]
Line_2 $$ public void write() throws IOException -->Line_3 $$ Resource logo = new ClassPathResource("logo.jpg", BufferedImageHttpMessageConverterTests.class)[ CD ]
Line_2 $$ public void write() throws IOException -->Line_4 $$ BufferedImage body = ImageIO.read(logo.getFile())[ CD ]
Line_2 $$ public void write() throws IOException -->Line_10 $$ BufferedImage result = ImageIO.read(new ByteArrayInputStream(outputMessage.getBodyAsBytes()))[ CD ]
Line_6 $$ MediaType contentType = new MediaType("image", "png")-->Line_8 $$ assertEquals("Invalid content type", contentType, outputMessage.getHeaders().getContentType())[ FD ]
Line_2 $$ public void write() throws IOException -->Line_9 $$ assertTrue("Invalid size", outputMessage.getBodyAsBytes().length > 0)[ CD ]
Line_10 $$ BufferedImage result = ImageIO.read(new ByteArrayInputStream(outputMessage.getBodyAsBytes()))-->Line_12 $$ assertEquals("Invalid width", 750, result.getWidth())[ FD ]
Line_6 $$ MediaType contentType = new MediaType("image", "png")-->Line_7 $$ converter.write(body, contentType, outputMessage)[ FD ]
