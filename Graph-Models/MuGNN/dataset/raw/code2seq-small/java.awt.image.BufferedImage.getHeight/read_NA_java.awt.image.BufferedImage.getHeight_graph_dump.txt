Line_2 $$ public void read() throws IOException -->Line_6 $$ inputMessage.getHeaders().setContentType(new MediaType("image", "jpeg"))[ CD ]
Line_2 $$ public void read() throws IOException -->Line_9 $$ assertEquals("Invalid width", 750, result.getWidth())[ CD ]
Line_2 $$ public void read() throws IOException -->Line_8 $$ assertEquals("Invalid height", 500, result.getHeight())[ CD ]
Line_2 $$ public void read() throws IOException -->Line_3 $$ Resource logo = new ClassPathResource("logo.jpg", BufferedImageHttpMessageConverterTests.class)[ CD ]
Line_2 $$ public void read() throws IOException -->Line_4 $$ byte[] body = FileCopyUtils.copyToByteArray(logo.getInputStream())[ CD ]
Line_3 $$ Resource logo = new ClassPathResource("logo.jpg", BufferedImageHttpMessageConverterTests.class)-->Line_4 $$ byte[] body = FileCopyUtils.copyToByteArray(logo.getInputStream())[ FD ]
Line_7 $$ BufferedImage result = converter.read(BufferedImage.class, inputMessage)-->Line_8 $$ assertEquals("Invalid height", 500, result.getHeight())[ FD ]
Line_2 $$ public void read() throws IOException -->Line_5 $$ MockHttpInputMessage inputMessage = new MockHttpInputMessage(body)[ CD ]
Line_5 $$ MockHttpInputMessage inputMessage = new MockHttpInputMessage(body)-->Line_6 $$ inputMessage.getHeaders().setContentType(new MediaType("image", "jpeg"))[ FD ]
Line_2 $$ public void read() throws IOException -->Line_7 $$ BufferedImage result = converter.read(BufferedImage.class, inputMessage)[ CD ]
Line_5 $$ MockHttpInputMessage inputMessage = new MockHttpInputMessage(body)-->Line_7 $$ BufferedImage result = converter.read(BufferedImage.class, inputMessage)[ FD ]
Line_7 $$ BufferedImage result = converter.read(BufferedImage.class, inputMessage)-->Line_9 $$ assertEquals("Invalid width", 750, result.getWidth())[ FD ]
