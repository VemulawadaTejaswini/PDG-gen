Line_11 $$ Graphics2D g2 = (Graphics2D) image.getGraphics()-->Line_13 $$ c.paint(g2)[ FD ]
Line_2 $$ private static Pair<Image, Point> createDragImage(final Tree tree, final Component c, Point dragOrigin, boolean adjustToPathUnderDragOrigin) -->Line_19 $$ Rectangle bounds = tree.getPathBounds(path)[ FD ]
Line_16 $$ if (adjustToPathUnderDragOrigin) -->Line_18 $$ if (path != null) [ CD ]
Line_10 $$ final BufferedImage image = UIUtil.createImage(c.getWidth(), c.getHeight(), BufferedImage.TYPE_INT_ARGB)-->Line_15 $$ Point point = new Point(image.getWidth(null) / 2, image.getHeight(null) / 2)[ FD ]
Line_2 $$ private static Pair<Image, Point> createDragImage(final Tree tree, final Component c, Point dragOrigin, boolean adjustToPathUnderDragOrigin) -->Line_8 $$ c.setFont(tree.getFont())[ CD ]
Line_17 $$ TreePath path = tree.getPathForLocation(dragOrigin.x, dragOrigin.y)-->Line_18 $$ if (path != null) [ FD ]
Line_15 $$ Point point = new Point(image.getWidth(null) / 2, image.getHeight(null) / 2)-->Line_20 $$ point = new Point(dragOrigin.x - bounds.x, dragOrigin.y - bounds.y)[ FD ]
Line_2 $$ private static Pair<Image, Point> createDragImage(final Tree tree, final Component c, Point dragOrigin, boolean adjustToPathUnderDragOrigin) -->Line_13 $$ c.paint(g2)[ FD ]
Line_2 $$ private static Pair<Image, Point> createDragImage(final Tree tree, final Component c, Point dragOrigin, boolean adjustToPathUnderDragOrigin) -->Line_7 $$ c.setBackground(tree.getBackground())[ FD ]
Line_2 $$ private static Pair<Image, Point> createDragImage(final Tree tree, final Component c, Point dragOrigin, boolean adjustToPathUnderDragOrigin) -->Line_10 $$ final BufferedImage image = UIUtil.createImage(c.getWidth(), c.getHeight(), BufferedImage.TYPE_INT_ARGB)[ CD ]
Line_2 $$ private static Pair<Image, Point> createDragImage(final Tree tree, final Component c, Point dragOrigin, boolean adjustToPathUnderDragOrigin) -->Line_23 $$ return new Pair<Image, Point>(image, point)[ CD ]
Line_18 $$ if (path != null) -->Line_20 $$ point = new Point(dragOrigin.x - bounds.x, dragOrigin.y - bounds.y)[ CD ]
Line_2 $$ private static Pair<Image, Point> createDragImage(final Tree tree, final Component c, Point dragOrigin, boolean adjustToPathUnderDragOrigin) -->Line_13 $$ c.paint(g2)[ CD ]
Line_2 $$ private static Pair<Image, Point> createDragImage(final Tree tree, final Component c, Point dragOrigin, boolean adjustToPathUnderDragOrigin) -->Line_3 $$ if (c instanceof JComponent) [ CD ]
Line_2 $$ private static Pair<Image, Point> createDragImage(final Tree tree, final Component c, Point dragOrigin, boolean adjustToPathUnderDragOrigin) -->Line_17 $$ TreePath path = tree.getPathForLocation(dragOrigin.x, dragOrigin.y)[ FD ]
Line_18 $$ if (path != null) -->Line_19 $$ Rectangle bounds = tree.getPathBounds(path)[ CD ]
Line_17 $$ TreePath path = tree.getPathForLocation(dragOrigin.x, dragOrigin.y)-->Line_19 $$ Rectangle bounds = tree.getPathBounds(path)[ FD ]
Line_2 $$ private static Pair<Image, Point> createDragImage(final Tree tree, final Component c, Point dragOrigin, boolean adjustToPathUnderDragOrigin) -->Line_12 $$ g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.7f))[ CD ]
Line_2 $$ private static Pair<Image, Point> createDragImage(final Tree tree, final Component c, Point dragOrigin, boolean adjustToPathUnderDragOrigin) -->Line_10 $$ final BufferedImage image = UIUtil.createImage(c.getWidth(), c.getHeight(), BufferedImage.TYPE_INT_ARGB)[ FD ]
Line_16 $$ if (adjustToPathUnderDragOrigin) -->Line_17 $$ TreePath path = tree.getPathForLocation(dragOrigin.x, dragOrigin.y)[ CD ]
Line_2 $$ private static Pair<Image, Point> createDragImage(final Tree tree, final Component c, Point dragOrigin, boolean adjustToPathUnderDragOrigin) -->Line_11 $$ Graphics2D g2 = (Graphics2D) image.getGraphics()[ CD ]
Line_2 $$ private static Pair<Image, Point> createDragImage(final Tree tree, final Component c, Point dragOrigin, boolean adjustToPathUnderDragOrigin) -->Line_14 $$ g2.dispose()[ CD ]
Line_10 $$ final BufferedImage image = UIUtil.createImage(c.getWidth(), c.getHeight(), BufferedImage.TYPE_INT_ARGB)-->Line_11 $$ Graphics2D g2 = (Graphics2D) image.getGraphics()[ FD ]
Line_2 $$ private static Pair<Image, Point> createDragImage(final Tree tree, final Component c, Point dragOrigin, boolean adjustToPathUnderDragOrigin) -->Line_9 $$ c.setSize(c.getPreferredSize())[ FD ]
Line_2 $$ private static Pair<Image, Point> createDragImage(final Tree tree, final Component c, Point dragOrigin, boolean adjustToPathUnderDragOrigin) -->Line_3 $$ if (c instanceof JComponent) [ FD ]
Line_3 $$ if (c instanceof JComponent) -->Line_4 $$ ((JComponent) c).setOpaque(true)[ CD ]
Line_2 $$ private static Pair<Image, Point> createDragImage(final Tree tree, final Component c, Point dragOrigin, boolean adjustToPathUnderDragOrigin) -->Line_7 $$ c.setBackground(tree.getBackground())[ CD ]
Line_2 $$ private static Pair<Image, Point> createDragImage(final Tree tree, final Component c, Point dragOrigin, boolean adjustToPathUnderDragOrigin) -->Line_16 $$ if (adjustToPathUnderDragOrigin) [ CD ]
Line_2 $$ private static Pair<Image, Point> createDragImage(final Tree tree, final Component c, Point dragOrigin, boolean adjustToPathUnderDragOrigin) -->Line_9 $$ c.setSize(c.getPreferredSize())[ CD ]
Line_2 $$ private static Pair<Image, Point> createDragImage(final Tree tree, final Component c, Point dragOrigin, boolean adjustToPathUnderDragOrigin) -->Line_6 $$ c.setForeground(tree.getForeground())[ CD ]
Line_2 $$ private static Pair<Image, Point> createDragImage(final Tree tree, final Component c, Point dragOrigin, boolean adjustToPathUnderDragOrigin) -->Line_8 $$ c.setFont(tree.getFont())[ FD ]
Line_11 $$ Graphics2D g2 = (Graphics2D) image.getGraphics()-->Line_12 $$ g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.7f))[ FD ]
Line_2 $$ private static Pair<Image, Point> createDragImage(final Tree tree, final Component c, Point dragOrigin, boolean adjustToPathUnderDragOrigin) -->Line_15 $$ Point point = new Point(image.getWidth(null) / 2, image.getHeight(null) / 2)[ CD ]
Line_11 $$ Graphics2D g2 = (Graphics2D) image.getGraphics()-->Line_14 $$ g2.dispose()[ FD ]
Line_2 $$ private static Pair<Image, Point> createDragImage(final Tree tree, final Component c, Point dragOrigin, boolean adjustToPathUnderDragOrigin) -->Line_6 $$ c.setForeground(tree.getForeground())[ FD ]
