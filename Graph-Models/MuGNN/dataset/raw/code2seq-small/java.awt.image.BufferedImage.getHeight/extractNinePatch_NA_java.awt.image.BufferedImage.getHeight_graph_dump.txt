Line_14 $$ if (region.pads != null) -->Line_17 $$ int padStartY = region.pads[2] + NINEPATCH_PADDING[ CD ]
Line_15 $$ int padStartX = region.pads[0] + NINEPATCH_PADDING-->Line_19 $$ g2.drawLine(padStartX, splitImage.getHeight() - 1, padEndX, splitImage.getHeight() - 1)[ FD ]
Line_14 $$ if (region.pads != null) -->Line_19 $$ g2.drawLine(padStartX, splitImage.getHeight() - 1, padEndX, splitImage.getHeight() - 1)[ CD ]
Line_6 $$ int startX = region.splits[0] + NINEPATCH_PADDING-->Line_10 $$ if (endX >= startX)[ FD ]
Line_2 $$ private BufferedImage extractNinePatch(BufferedImage page, Region region, File outputDirFile) -->Line_3 $$ BufferedImage splitImage = extractImage(page, region, outputDirFile, NINEPATCH_PADDING)[ CD ]
Line_2 $$ private BufferedImage extractNinePatch(BufferedImage page, Region region, File outputDirFile) -->Line_9 $$ int endY = region.height - region.splits[3] + NINEPATCH_PADDING - 1[ CD ]
Line_2 $$ private BufferedImage extractNinePatch(BufferedImage page, Region region, File outputDirFile) -->Line_7 $$ int endX = region.width - region.splits[1] + NINEPATCH_PADDING - 1[ CD ]
Line_9 $$ int endY = region.height - region.splits[3] + NINEPATCH_PADDING - 1-->Line_12 $$ if (endY >= startY)[ FD ]
Line_12 $$ if (endY >= startY)-->Line_13 $$ g2.drawLine(0, startY, 0, endY)[ CD ]
Line_4 $$ Graphics2D g2 = splitImage.createGraphics()-->Line_13 $$ g2.drawLine(0, startY, 0, endY)[ FD ]
Line_4 $$ Graphics2D g2 = splitImage.createGraphics()-->Line_22 $$ g2.dispose()[ FD ]
Line_2 $$ private BufferedImage extractNinePatch(BufferedImage page, Region region, File outputDirFile) -->Line_14 $$ if (region.pads != null) [ CD ]
Line_18 $$ int padEndY = region.height - region.pads[3] + NINEPATCH_PADDING - 1-->Line_20 $$ g2.drawLine(splitImage.getWidth() - 1, padStartY, splitImage.getWidth() - 1, padEndY)[ FD ]
Line_17 $$ int padStartY = region.pads[2] + NINEPATCH_PADDING-->Line_20 $$ g2.drawLine(splitImage.getWidth() - 1, padStartY, splitImage.getWidth() - 1, padEndY)[ FD ]
Line_10 $$ if (endX >= startX)-->Line_11 $$ g2.drawLine(startX, 0, endX, 0)[ CD ]
Line_4 $$ Graphics2D g2 = splitImage.createGraphics()-->Line_11 $$ g2.drawLine(startX, 0, endX, 0)[ FD ]
Line_2 $$ private BufferedImage extractNinePatch(BufferedImage page, Region region, File outputDirFile) -->Line_8 $$ int startY = region.splits[2] + NINEPATCH_PADDING[ CD ]
Line_4 $$ Graphics2D g2 = splitImage.createGraphics()-->Line_20 $$ g2.drawLine(splitImage.getWidth() - 1, padStartY, splitImage.getWidth() - 1, padEndY)[ FD ]
Line_9 $$ int endY = region.height - region.splits[3] + NINEPATCH_PADDING - 1-->Line_13 $$ g2.drawLine(0, startY, 0, endY)[ FD ]
Line_2 $$ private BufferedImage extractNinePatch(BufferedImage page, Region region, File outputDirFile) -->Line_6 $$ int startX = region.splits[0] + NINEPATCH_PADDING[ CD ]
Line_14 $$ if (region.pads != null) -->Line_16 $$ int padEndX = region.width - region.pads[1] + NINEPATCH_PADDING - 1[ CD ]
Line_3 $$ BufferedImage splitImage = extractImage(page, region, outputDirFile, NINEPATCH_PADDING)-->Line_20 $$ g2.drawLine(splitImage.getWidth() - 1, padStartY, splitImage.getWidth() - 1, padEndY)[ FD ]
Line_3 $$ BufferedImage splitImage = extractImage(page, region, outputDirFile, NINEPATCH_PADDING)-->Line_19 $$ g2.drawLine(padStartX, splitImage.getHeight() - 1, padEndX, splitImage.getHeight() - 1)[ FD ]
Line_4 $$ Graphics2D g2 = splitImage.createGraphics()-->Line_19 $$ g2.drawLine(padStartX, splitImage.getHeight() - 1, padEndX, splitImage.getHeight() - 1)[ FD ]
Line_16 $$ int padEndX = region.width - region.pads[1] + NINEPATCH_PADDING - 1-->Line_19 $$ g2.drawLine(padStartX, splitImage.getHeight() - 1, padEndX, splitImage.getHeight() - 1)[ FD ]
Line_4 $$ Graphics2D g2 = splitImage.createGraphics()-->Line_5 $$ g2.setColor(Color.BLACK)[ FD ]
Line_14 $$ if (region.pads != null) -->Line_18 $$ int padEndY = region.height - region.pads[3] + NINEPATCH_PADDING - 1[ CD ]
Line_2 $$ private BufferedImage extractNinePatch(BufferedImage page, Region region, File outputDirFile) -->Line_12 $$ if (endY >= startY)[ CD ]
Line_14 $$ if (region.pads != null) -->Line_15 $$ int padStartX = region.pads[0] + NINEPATCH_PADDING[ CD ]
Line_2 $$ private BufferedImage extractNinePatch(BufferedImage page, Region region, File outputDirFile) -->Line_5 $$ g2.setColor(Color.BLACK)[ CD ]
Line_2 $$ private BufferedImage extractNinePatch(BufferedImage page, Region region, File outputDirFile) -->Line_4 $$ Graphics2D g2 = splitImage.createGraphics()[ CD ]
Line_8 $$ int startY = region.splits[2] + NINEPATCH_PADDING-->Line_13 $$ g2.drawLine(0, startY, 0, endY)[ FD ]
Line_2 $$ private BufferedImage extractNinePatch(BufferedImage page, Region region, File outputDirFile) -->Line_10 $$ if (endX >= startX)[ CD ]
Line_14 $$ if (region.pads != null) -->Line_20 $$ g2.drawLine(splitImage.getWidth() - 1, padStartY, splitImage.getWidth() - 1, padEndY)[ CD ]
Line_7 $$ int endX = region.width - region.splits[1] + NINEPATCH_PADDING - 1-->Line_10 $$ if (endX >= startX)[ FD ]
Line_6 $$ int startX = region.splits[0] + NINEPATCH_PADDING-->Line_11 $$ g2.drawLine(startX, 0, endX, 0)[ FD ]
Line_2 $$ private BufferedImage extractNinePatch(BufferedImage page, Region region, File outputDirFile) -->Line_23 $$ return splitImage[ CD ]
Line_3 $$ BufferedImage splitImage = extractImage(page, region, outputDirFile, NINEPATCH_PADDING)-->Line_4 $$ Graphics2D g2 = splitImage.createGraphics()[ FD ]
Line_8 $$ int startY = region.splits[2] + NINEPATCH_PADDING-->Line_12 $$ if (endY >= startY)[ FD ]
Line_2 $$ private BufferedImage extractNinePatch(BufferedImage page, Region region, File outputDirFile) -->Line_3 $$ BufferedImage splitImage = extractImage(page, region, outputDirFile, NINEPATCH_PADDING)[ FD ]
Line_7 $$ int endX = region.width - region.splits[1] + NINEPATCH_PADDING - 1-->Line_11 $$ g2.drawLine(startX, 0, endX, 0)[ FD ]
Line_2 $$ private BufferedImage extractNinePatch(BufferedImage page, Region region, File outputDirFile) -->Line_22 $$ g2.dispose()[ CD ]
