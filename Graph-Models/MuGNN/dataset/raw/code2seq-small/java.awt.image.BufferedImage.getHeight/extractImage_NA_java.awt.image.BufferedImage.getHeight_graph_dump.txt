Line_2 $$ private BufferedImage extractImage(BufferedImage page, Region region, File outputDirFile, int padding) -->Line_6 $$ splitImage = new BufferedImage(region.width, region.height, page.getType())[ FD ]
Line_2 $$ private BufferedImage extractImage(BufferedImage page, Region region, File outputDirFile, int padding) -->Line_13 $$ splitImage = page.getSubimage(region.left, region.top, region.width, region.height)[ FD ]
Line_4 $$ if (region.rotate) -->Line_5 $$ BufferedImage srcImage = page.getSubimage(region.left, region.top, region.height, region.width)[ CD ]
Line_3 $$ BufferedImage splitImage = null-->Line_6 $$ splitImage = new BufferedImage(region.width, region.height, page.getType())[ FD ]
Line_4 $$ if (region.rotate) -->Line_8 $$ transform.rotate(Math.toRadians(90.0))[ CD ]
Line_16 $$ BufferedImage paddedImage = new BufferedImage(splitImage.getWidth() + padding * 2, splitImage.getHeight() + padding * 2, page.getType())-->Line_17 $$ Graphics2D g2 = paddedImage.createGraphics()[ FD ]
Line_15 $$ if (padding > 0) -->Line_17 $$ Graphics2D g2 = paddedImage.createGraphics()[ CD ]
Line_15 $$ if (padding > 0) -->Line_22 $$ return splitImage[ CD ]
Line_4 $$ if (region.rotate) -->Line_6 $$ splitImage = new BufferedImage(region.width, region.height, page.getType())[ CD ]
Line_4 $$ if (region.rotate) -->Line_7 $$ AffineTransform transform = new AffineTransform()[ CD ]
Line_7 $$ AffineTransform transform = new AffineTransform()-->Line_9 $$ transform.translate(0, -region.width)[ FD ]
Line_4 $$ if (region.rotate) -->Line_13 $$ splitImage = page.getSubimage(region.left, region.top, region.width, region.height)[ CD ]
Line_15 $$ if (padding > 0) -->Line_16 $$ BufferedImage paddedImage = new BufferedImage(splitImage.getWidth() + padding * 2, splitImage.getHeight() + padding * 2, page.getType())[ CD ]
Line_4 $$ if (region.rotate) -->Line_9 $$ transform.translate(0, -region.width)[ CD ]
Line_6 $$ splitImage = new BufferedImage(region.width, region.height, page.getType())-->Line_16 $$ BufferedImage paddedImage = new BufferedImage(splitImage.getWidth() + padding * 2, splitImage.getHeight() + padding * 2, page.getType())[ FD ]
Line_6 $$ splitImage = new BufferedImage(region.width, region.height, page.getType())-->Line_18 $$ g2.drawImage(splitImage, padding, padding, null)[ FD ]
Line_4 $$ if (region.rotate) -->Line_10 $$ AffineTransformOp op = new AffineTransformOp(transform, AffineTransformOp.TYPE_BILINEAR)[ CD ]
Line_15 $$ if (padding > 0) -->Line_19 $$ g2.dispose()[ CD ]
Line_15 $$ if (padding > 0) -->Line_20 $$ return paddedImage[ CD ]
Line_2 $$ private BufferedImage extractImage(BufferedImage page, Region region, File outputDirFile, int padding) -->Line_5 $$ BufferedImage srcImage = page.getSubimage(region.left, region.top, region.height, region.width)[ FD ]
Line_2 $$ private BufferedImage extractImage(BufferedImage page, Region region, File outputDirFile, int padding) -->Line_4 $$ if (region.rotate) [ CD ]
Line_3 $$ BufferedImage splitImage = null-->Line_13 $$ splitImage = page.getSubimage(region.left, region.top, region.width, region.height)[ FD ]
Line_3 $$ BufferedImage splitImage = null-->Line_16 $$ BufferedImage paddedImage = new BufferedImage(splitImage.getWidth() + padding * 2, splitImage.getHeight() + padding * 2, page.getType())[ FD ]
Line_2 $$ private BufferedImage extractImage(BufferedImage page, Region region, File outputDirFile, int padding) -->Line_16 $$ BufferedImage paddedImage = new BufferedImage(splitImage.getWidth() + padding * 2, splitImage.getHeight() + padding * 2, page.getType())[ FD ]
Line_17 $$ Graphics2D g2 = paddedImage.createGraphics()-->Line_18 $$ g2.drawImage(splitImage, padding, padding, null)[ FD ]
Line_15 $$ if (padding > 0) -->Line_18 $$ g2.drawImage(splitImage, padding, padding, null)[ CD ]
Line_3 $$ BufferedImage splitImage = null-->Line_18 $$ g2.drawImage(splitImage, padding, padding, null)[ FD ]
Line_17 $$ Graphics2D g2 = paddedImage.createGraphics()-->Line_19 $$ g2.dispose()[ FD ]
Line_2 $$ private BufferedImage extractImage(BufferedImage page, Region region, File outputDirFile, int padding) -->Line_4 $$ if (region.rotate) [ FD ]
Line_13 $$ splitImage = page.getSubimage(region.left, region.top, region.width, region.height)-->Line_16 $$ BufferedImage paddedImage = new BufferedImage(splitImage.getWidth() + padding * 2, splitImage.getHeight() + padding * 2, page.getType())[ FD ]
Line_2 $$ private BufferedImage extractImage(BufferedImage page, Region region, File outputDirFile, int padding) -->Line_3 $$ BufferedImage splitImage = null[ CD ]
Line_7 $$ AffineTransform transform = new AffineTransform()-->Line_8 $$ transform.rotate(Math.toRadians(90.0))[ FD ]
Line_4 $$ if (region.rotate) -->Line_11 $$ op.filter(srcImage, splitImage)[ CD ]
Line_3 $$ BufferedImage splitImage = null-->Line_11 $$ op.filter(srcImage, splitImage)[ FD ]
Line_6 $$ splitImage = new BufferedImage(region.width, region.height, page.getType())-->Line_11 $$ op.filter(srcImage, splitImage)[ FD ]
Line_10 $$ AffineTransformOp op = new AffineTransformOp(transform, AffineTransformOp.TYPE_BILINEAR)-->Line_11 $$ op.filter(srcImage, splitImage)[ FD ]
Line_2 $$ private BufferedImage extractImage(BufferedImage page, Region region, File outputDirFile, int padding) -->Line_15 $$ if (padding > 0) [ CD ]
Line_5 $$ BufferedImage srcImage = page.getSubimage(region.left, region.top, region.height, region.width)-->Line_11 $$ op.filter(srcImage, splitImage)[ FD ]
Line_2 $$ private BufferedImage extractImage(BufferedImage page, Region region, File outputDirFile, int padding) -->Line_15 $$ if (padding > 0) [ FD ]
Line_13 $$ splitImage = page.getSubimage(region.left, region.top, region.width, region.height)-->Line_18 $$ g2.drawImage(splitImage, padding, padding, null)[ FD ]
Line_2 $$ private BufferedImage extractImage(BufferedImage page, Region region, File outputDirFile, int padding) -->Line_18 $$ g2.drawImage(splitImage, padding, padding, null)[ FD ]
Line_6 $$ splitImage = new BufferedImage(region.width, region.height, page.getType())-->Line_13 $$ splitImage = page.getSubimage(region.left, region.top, region.width, region.height)[ FD ]
