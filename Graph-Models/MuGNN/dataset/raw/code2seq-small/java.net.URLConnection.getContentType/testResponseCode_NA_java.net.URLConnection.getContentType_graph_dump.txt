Line_7 $$ final Path file = new Path("/test/file")-->Line_8 $$ final FSDataOutputStream out = webhdfs.create(file)[ FD ]
Line_3 $$ final WebHdfsFileSystem webhdfs = (WebHdfsFileSystem) fs-->Line_39 $$ assertFalse(webhdfs.setReplication(dir, (short) 1))[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_107 $$ conn.setInstanceFollowRedirects(false)[ CD ]
Line_3 $$ final WebHdfsFileSystem webhdfs = (WebHdfsFileSystem) fs-->Line_67 $$ final URL url = webhdfs.toUrl(op, dir)[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_110 $$ conn.connect()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_4 $$ final Path root = new Path("/")[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_43 $$ final Path p = new Path(dir, "non-exist")[ CD ]
Line_3 $$ final WebHdfsFileSystem webhdfs = (WebHdfsFileSystem) fs-->Line_52 $$ final URL url = webhdfs.toUrl(op, dir)[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_48 $$ conn.disconnect()[ CD ]
Line_116 $$ conn = (HttpURLConnection) new URL(redirect).openConnection()-->Line_117 $$ conn.setRequestMethod(op.getType().toString())[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_83 $$ conn.connect()[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_55 $$ conn.connect()[ CD ]
Line_33 $$ final HttpOpParam.Op op = PutOpParam.Op.SETREPLICATION-->Line_67 $$ final URL url = webhdfs.toUrl(op, dir)[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_56 $$ assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode())[ CD ]
Line_33 $$ final HttpOpParam.Op op = PutOpParam.Op.SETREPLICATION-->Line_88 $$ final URL url = webhdfs.toUrl(op, file)[ FD ]
Line_5 $$ final Path dir = new Path("/test/testUrl")-->Line_6 $$ assertTrue(webhdfs.mkdirs(dir))[ FD ]
Line_5 $$ final Path dir = new Path("/test/testUrl")-->Line_34 $$ final URL url = webhdfs.toUrl(op, dir)[ FD ]
Line_80 $$ conn = (HttpURLConnection) new URL(modified).openConnection()-->Line_114 $$ conn.disconnect()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_8 $$ final FSDataOutputStream out = webhdfs.create(file)[ CD ]
Line_33 $$ final HttpOpParam.Op op = PutOpParam.Op.SETREPLICATION-->Line_54 $$ conn.setRequestMethod(op.getType().toString())[ FD ]
Line_3 $$ final WebHdfsFileSystem webhdfs = (WebHdfsFileSystem) fs-->Line_88 $$ final URL url = webhdfs.toUrl(op, file)[ FD ]
Line_12 $$ final URL url = webhdfs.toUrl(GetOpParam.Op.GETHOMEDIRECTORY, root)-->Line_104 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_29 $$ assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode())[ CD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_70 $$ conn.setDoOutput(false)[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_72 $$ conn.connect()[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_82 $$ conn.setDoOutput(op.getDoOutput())[ FD ]
Line_77 $$ final int j = redirect.indexOf("&", i)-->Line_78 $$ String modified = redirect.substring(0, i - 1) + redirect.substring(j)[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_98 $$ conn.disconnect()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_57 $$ assertEquals(0, conn.getContentLength())[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_36 $$ conn.setRequestMethod(op.getType().toString())[ CD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_36 $$ conn.setRequestMethod(op.getType().toString())[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_10 $$ out.close()[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_58 $$ assertEquals(MediaType.APPLICATION_OCTET_STREAM, conn.getContentType())[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_76 $$ final int i = redirect.indexOf(NamenodeAddressParam.NAME)[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_39 $$ assertFalse(webhdfs.setReplication(dir, (short) 1))[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_19 $$ final URL url = webhdfs.toUrl(GetOpParam.Op.GETHOMEDIRECTORY, root, new DoAsParam(ugi.getShortUserName() + "proxy"))[ CD ]
Line_8 $$ final FSDataOutputStream out = webhdfs.create(file)-->Line_9 $$ out.write(1)[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_21 $$ conn.connect()[ FD ]
Line_33 $$ final HttpOpParam.Op op = PutOpParam.Op.SETREPLICATION-->Line_82 $$ conn.setDoOutput(op.getDoOutput())[ FD ]
Line_80 $$ conn = (HttpURLConnection) new URL(modified).openConnection()-->Line_105 $$ conn.setRequestMethod(op.getType().toString())[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_54 $$ conn.setRequestMethod(op.getType().toString())[ CD ]
Line_3 $$ final WebHdfsFileSystem webhdfs = (WebHdfsFileSystem) fs-->Line_6 $$ assertTrue(webhdfs.mkdirs(dir))[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_103 $$ URL url = webhdfs.toUrl(op, path)[ CD ]
Line_73 $$ final String redirect = conn.getHeaderField("Location")-->Line_112 $$ redirect = conn.getHeaderField("Location")[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_117 $$ conn.setRequestMethod(op.getType().toString())[ FD ]
Line_12 $$ final URL url = webhdfs.toUrl(GetOpParam.Op.GETHOMEDIRECTORY, root)-->Line_68 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_123 $$ conn.disconnect()[ FD ]
Line_3 $$ final WebHdfsFileSystem webhdfs = (WebHdfsFileSystem) fs-->Line_34 $$ final URL url = webhdfs.toUrl(op, dir)[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_7 $$ final Path file = new Path("/test/file")[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_77 $$ final int j = redirect.indexOf("&", i)[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_91 $$ conn.connect()[ CD ]
Line_7 $$ final Path file = new Path("/test/file")-->Line_88 $$ final URL url = webhdfs.toUrl(op, file)[ FD ]
Line_80 $$ conn = (HttpURLConnection) new URL(modified).openConnection()-->Line_106 $$ conn.setDoOutput(false)[ FD ]
Line_80 $$ conn = (HttpURLConnection) new URL(modified).openConnection()-->Line_112 $$ redirect = conn.getHeaderField("Location")[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_57 $$ assertEquals(0, conn.getContentLength())[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_30 $$ conn.disconnect()[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_56 $$ assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode())[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_58 $$ assertEquals(MediaType.APPLICATION_OCTET_STREAM, conn.getContentType())[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_16 $$ conn.disconnect()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_80 $$ conn = (HttpURLConnection) new URL(modified).openConnection()[ CD ]
Line_12 $$ final URL url = webhdfs.toUrl(GetOpParam.Op.GETHOMEDIRECTORY, root)-->Line_53 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_60 $$ conn.disconnect()[ CD ]
Line_80 $$ conn = (HttpURLConnection) new URL(modified).openConnection()-->Line_120 $$ conn.connect()[ FD ]
Line_33 $$ final HttpOpParam.Op op = PutOpParam.Op.SETREPLICATION-->Line_117 $$ conn.setRequestMethod(op.getType().toString())[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_90 $$ conn.setRequestMethod(op.getType().toString())[ CD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_93 $$ WebHdfsFileSystem.jsonParse(conn, false)[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_55 $$ conn.connect()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_74 $$ conn.disconnect()[ CD ]
Line_80 $$ conn = (HttpURLConnection) new URL(modified).openConnection()-->Line_81 $$ conn.setRequestMethod(op.getType().toString())[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_34 $$ final URL url = webhdfs.toUrl(op, dir)[ CD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_111 $$ assertEquals(HttpServletResponse.SC_TEMPORARY_REDIRECT, conn.getResponseCode())[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_98 $$ conn.disconnect()[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_26 $$ final URL url = webhdfs.toUrl(PutOpParam.Op.SETOWNER, dir)[ CD ]
Line_4 $$ final Path root = new Path("/")-->Line_12 $$ final URL url = webhdfs.toUrl(GetOpParam.Op.GETHOMEDIRECTORY, root)[ FD ]
Line_3 $$ final WebHdfsFileSystem webhdfs = (WebHdfsFileSystem) fs-->Line_44 $$ final URL url = webhdfs.toUrl(GetOpParam.Op.GETFILESTATUS, p)[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_28 $$ conn.connect()[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_90 $$ conn.setRequestMethod(op.getType().toString())[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_107 $$ conn.setInstanceFollowRedirects(false)[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_40 $$ conn.disconnect()[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_3 $$ final WebHdfsFileSystem webhdfs = (WebHdfsFileSystem) fs[ CD ]
Line_33 $$ final HttpOpParam.Op op = PutOpParam.Op.SETREPLICATION-->Line_81 $$ conn.setRequestMethod(op.getType().toString())[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_47 $$ assertEquals(HttpServletResponse.SC_NOT_FOUND, conn.getResponseCode())[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_63 $$ AppendTestUtil.testAppend(fs, new Path(dir, "append"))[ CD ]
Line_116 $$ conn = (HttpURLConnection) new URL(redirect).openConnection()-->Line_120 $$ conn.connect()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_71 $$ conn.setInstanceFollowRedirects(false)[ CD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_83 $$ conn.connect()[ FD ]
Line_116 $$ conn = (HttpURLConnection) new URL(redirect).openConnection()-->Line_118 $$ conn.setDoOutput(op.getDoOutput())[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_33 $$ final HttpOpParam.Op op = PutOpParam.Op.SETREPLICATION[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_79 $$ WebHdfsFileSystem.LOG.info("modified = " + modified)[ CD ]
Line_80 $$ conn = (HttpURLConnection) new URL(modified).openConnection()-->Line_116 $$ conn = (HttpURLConnection) new URL(redirect).openConnection()[ FD ]
Line_8 $$ final FSDataOutputStream out = webhdfs.create(file)-->Line_10 $$ out.close()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_88 $$ final URL url = webhdfs.toUrl(op, file)[ CD ]
Line_12 $$ final URL url = webhdfs.toUrl(GetOpParam.Op.GETHOMEDIRECTORY, root)-->Line_89 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_5 $$ final Path dir = new Path("/test/testUrl")[ CD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_54 $$ conn.setRequestMethod(op.getType().toString())[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_38 $$ assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode())[ CD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_71 $$ conn.setInstanceFollowRedirects(false)[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_106 $$ conn.setDoOutput(false)[ CD ]
Line_3 $$ final WebHdfsFileSystem webhdfs = (WebHdfsFileSystem) fs-->Line_59 $$ assertEquals((short) 0755, webhdfs.getFileStatus(dir).getPermission().toShort())[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_22 $$ assertEquals(HttpServletResponse.SC_FORBIDDEN, conn.getResponseCode())[ FD ]
Line_5 $$ final Path dir = new Path("/test/testUrl")-->Line_67 $$ final URL url = webhdfs.toUrl(op, dir)[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_112 $$ redirect = conn.getHeaderField("Location")[ FD ]
Line_5 $$ final Path dir = new Path("/test/testUrl")-->Line_26 $$ final URL url = webhdfs.toUrl(PutOpParam.Op.SETOWNER, dir)[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_73 $$ final String redirect = conn.getHeaderField("Location")[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_118 $$ conn.setDoOutput(op.getDoOutput())[ CD ]
Line_73 $$ final String redirect = conn.getHeaderField("Location")-->Line_76 $$ final int i = redirect.indexOf(NamenodeAddressParam.NAME)[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_67 $$ final URL url = webhdfs.toUrl(op, dir)[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_9 $$ out.write(1)[ CD ]
Line_80 $$ conn = (HttpURLConnection) new URL(modified).openConnection()-->Line_121 $$ assertEquals(HttpServletResponse.SC_CREATED, conn.getResponseCode())[ FD ]
Line_5 $$ final Path dir = new Path("/test/testUrl")-->Line_52 $$ final URL url = webhdfs.toUrl(op, dir)[ FD ]
Line_102 $$ Path path = new Path("/test/path with spaces")-->Line_103 $$ URL url = webhdfs.toUrl(op, path)[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_14 $$ final Map<?, ?> m = WebHdfsTestUtil.connectAndGetJson(conn, HttpServletResponse.SC_OK)[ CD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_80 $$ conn = (HttpURLConnection) new URL(modified).openConnection()[ FD ]
Line_80 $$ conn = (HttpURLConnection) new URL(modified).openConnection()-->Line_111 $$ assertEquals(HttpServletResponse.SC_TEMPORARY_REDIRECT, conn.getResponseCode())[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_73 $$ final String redirect = conn.getHeaderField("Location")[ CD ]
Line_33 $$ final HttpOpParam.Op op = PutOpParam.Op.SETREPLICATION-->Line_90 $$ conn.setRequestMethod(op.getType().toString())[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_102 $$ Path path = new Path("/test/path with spaces")[ CD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_46 $$ conn.connect()[ FD ]
Line_80 $$ conn = (HttpURLConnection) new URL(modified).openConnection()-->Line_98 $$ conn.disconnect()[ FD ]
Line_33 $$ final HttpOpParam.Op op = PutOpParam.Op.SETREPLICATION-->Line_118 $$ conn.setDoOutput(op.getDoOutput())[ FD ]
Line_116 $$ conn = (HttpURLConnection) new URL(redirect).openConnection()-->Line_123 $$ conn.disconnect()[ FD ]
Line_4 $$ final Path root = new Path("/")-->Line_19 $$ final URL url = webhdfs.toUrl(GetOpParam.Op.GETHOMEDIRECTORY, root, new DoAsParam(ugi.getShortUserName() + "proxy"))[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_81 $$ conn.setRequestMethod(op.getType().toString())[ FD ]
Line_3 $$ final WebHdfsFileSystem webhdfs = (WebHdfsFileSystem) fs-->Line_26 $$ final URL url = webhdfs.toUrl(PutOpParam.Op.SETOWNER, dir)[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_23 $$ conn.disconnect()[ FD ]
Line_73 $$ final String redirect = conn.getHeaderField("Location")-->Line_77 $$ final int j = redirect.indexOf("&", i)[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_60 $$ conn.disconnect()[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_120 $$ conn.connect()[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_38 $$ assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode())[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_15 $$ assertEquals(WebHdfsFileSystem.getHomeDirectoryString(ugi), m.get(Path.class.getSimpleName()))[ CD ]
Line_12 $$ final URL url = webhdfs.toUrl(GetOpParam.Op.GETHOMEDIRECTORY, root)-->Line_35 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_33 $$ final HttpOpParam.Op op = PutOpParam.Op.SETREPLICATION-->Line_103 $$ URL url = webhdfs.toUrl(op, path)[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_116 $$ conn = (HttpURLConnection) new URL(redirect).openConnection()[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_47 $$ assertEquals(HttpServletResponse.SC_NOT_FOUND, conn.getResponseCode())[ CD ]
Line_76 $$ final int i = redirect.indexOf(NamenodeAddressParam.NAME)-->Line_77 $$ final int j = redirect.indexOf("&", i)[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_37 $$ conn.connect()[ CD ]
Line_80 $$ conn = (HttpURLConnection) new URL(modified).openConnection()-->Line_123 $$ conn.disconnect()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_22 $$ assertEquals(HttpServletResponse.SC_FORBIDDEN, conn.getResponseCode())[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_28 $$ conn.connect()[ CD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_29 $$ assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode())[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_14 $$ final Map<?, ?> m = WebHdfsTestUtil.connectAndGetJson(conn, HttpServletResponse.SC_OK)[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_72 $$ conn.connect()[ CD ]
Line_33 $$ final HttpOpParam.Op op = PutOpParam.Op.SETREPLICATION-->Line_34 $$ final URL url = webhdfs.toUrl(op, dir)[ FD ]
Line_5 $$ final Path dir = new Path("/test/testUrl")-->Line_39 $$ assertFalse(webhdfs.setReplication(dir, (short) 1))[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_84 $$ assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode())[ CD ]
Line_33 $$ final HttpOpParam.Op op = PutOpParam.Op.SETREPLICATION-->Line_105 $$ conn.setRequestMethod(op.getType().toString())[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_116 $$ conn = (HttpURLConnection) new URL(redirect).openConnection()[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_84 $$ assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode())[ FD ]
Line_80 $$ conn = (HttpURLConnection) new URL(modified).openConnection()-->Line_90 $$ conn.setRequestMethod(op.getType().toString())[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_23 $$ conn.disconnect()[ CD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_105 $$ conn.setRequestMethod(op.getType().toString())[ FD ]
Line_43 $$ final Path p = new Path(dir, "non-exist")-->Line_44 $$ final URL url = webhdfs.toUrl(GetOpParam.Op.GETFILESTATUS, p)[ FD ]
Line_14 $$ final Map<?, ?> m = WebHdfsTestUtil.connectAndGetJson(conn, HttpServletResponse.SC_OK)-->Line_15 $$ assertEquals(WebHdfsFileSystem.getHomeDirectoryString(ugi), m.get(Path.class.getSimpleName()))[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_37 $$ conn.connect()[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_69 $$ conn.setRequestMethod(op.getType().toString())[ FD ]
Line_12 $$ final URL url = webhdfs.toUrl(GetOpParam.Op.GETHOMEDIRECTORY, root)-->Line_27 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_12 $$ final URL url = webhdfs.toUrl(GetOpParam.Op.GETHOMEDIRECTORY, root)-->Line_20 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_16 $$ conn.disconnect()[ CD ]
Line_33 $$ final HttpOpParam.Op op = PutOpParam.Op.SETREPLICATION-->Line_69 $$ conn.setRequestMethod(op.getType().toString())[ FD ]
Line_33 $$ final HttpOpParam.Op op = PutOpParam.Op.SETREPLICATION-->Line_52 $$ final URL url = webhdfs.toUrl(op, dir)[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_48 $$ conn.disconnect()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_6 $$ assertTrue(webhdfs.mkdirs(dir))[ CD ]
Line_80 $$ conn = (HttpURLConnection) new URL(modified).openConnection()-->Line_84 $$ assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode())[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_91 $$ conn.connect()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_12 $$ final URL url = webhdfs.toUrl(GetOpParam.Op.GETHOMEDIRECTORY, root)[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_81 $$ conn.setRequestMethod(op.getType().toString())[ CD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_121 $$ assertEquals(HttpServletResponse.SC_CREATED, conn.getResponseCode())[ FD ]
Line_3 $$ final WebHdfsFileSystem webhdfs = (WebHdfsFileSystem) fs-->Line_12 $$ final URL url = webhdfs.toUrl(GetOpParam.Op.GETHOMEDIRECTORY, root)[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_117 $$ conn.setRequestMethod(op.getType().toString())[ CD ]
Line_80 $$ conn = (HttpURLConnection) new URL(modified).openConnection()-->Line_117 $$ conn.setRequestMethod(op.getType().toString())[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_118 $$ conn.setDoOutput(op.getDoOutput())[ FD ]
Line_5 $$ final Path dir = new Path("/test/testUrl")-->Line_59 $$ assertEquals((short) 0755, webhdfs.getFileStatus(dir).getPermission().toShort())[ FD ]
Line_3 $$ final WebHdfsFileSystem webhdfs = (WebHdfsFileSystem) fs-->Line_103 $$ URL url = webhdfs.toUrl(op, path)[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_52 $$ final URL url = webhdfs.toUrl(op, dir)[ CD ]
Line_12 $$ final URL url = webhdfs.toUrl(GetOpParam.Op.GETHOMEDIRECTORY, root)-->Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_73 $$ final String redirect = conn.getHeaderField("Location")-->Line_78 $$ String modified = redirect.substring(0, i - 1) + redirect.substring(j)[ FD ]
Line_3 $$ final WebHdfsFileSystem webhdfs = (WebHdfsFileSystem) fs-->Line_8 $$ final FSDataOutputStream out = webhdfs.create(file)[ FD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_40 $$ conn.disconnect()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_82 $$ conn.setDoOutput(op.getDoOutput())[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_59 $$ assertEquals((short) 0755, webhdfs.getFileStatus(dir).getPermission().toShort())[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_44 $$ final URL url = webhdfs.toUrl(GetOpParam.Op.GETFILESTATUS, p)[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_46 $$ conn.connect()[ CD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_114 $$ conn.disconnect()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_70 $$ conn.setDoOutput(false)[ CD ]
Line_80 $$ conn = (HttpURLConnection) new URL(modified).openConnection()-->Line_82 $$ conn.setDoOutput(op.getDoOutput())[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_105 $$ conn.setRequestMethod(op.getType().toString())[ CD ]
Line_80 $$ conn = (HttpURLConnection) new URL(modified).openConnection()-->Line_93 $$ WebHdfsFileSystem.jsonParse(conn, false)[ FD ]
Line_80 $$ conn = (HttpURLConnection) new URL(modified).openConnection()-->Line_107 $$ conn.setInstanceFollowRedirects(false)[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_30 $$ conn.disconnect()[ CD ]
Line_80 $$ conn = (HttpURLConnection) new URL(modified).openConnection()-->Line_91 $$ conn.connect()[ FD ]
Line_33 $$ final HttpOpParam.Op op = PutOpParam.Op.SETREPLICATION-->Line_36 $$ conn.setRequestMethod(op.getType().toString())[ FD ]
Line_116 $$ conn = (HttpURLConnection) new URL(redirect).openConnection()-->Line_121 $$ assertEquals(HttpServletResponse.SC_CREATED, conn.getResponseCode())[ FD ]
Line_80 $$ conn = (HttpURLConnection) new URL(modified).openConnection()-->Line_110 $$ conn.connect()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_21 $$ conn.connect()[ CD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_106 $$ conn.setDoOutput(false)[ FD ]
Line_3 $$ final WebHdfsFileSystem webhdfs = (WebHdfsFileSystem) fs-->Line_19 $$ final URL url = webhdfs.toUrl(GetOpParam.Op.GETHOMEDIRECTORY, root, new DoAsParam(ugi.getShortUserName() + "proxy"))[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_78 $$ String modified = redirect.substring(0, i - 1) + redirect.substring(j)[ CD ]
Line_80 $$ conn = (HttpURLConnection) new URL(modified).openConnection()-->Line_118 $$ conn.setDoOutput(op.getDoOutput())[ FD ]
Line_80 $$ conn = (HttpURLConnection) new URL(modified).openConnection()-->Line_83 $$ conn.connect()[ FD ]
Line_12 $$ final URL url = webhdfs.toUrl(GetOpParam.Op.GETHOMEDIRECTORY, root)-->Line_45 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_69 $$ conn.setRequestMethod(op.getType().toString())[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_75 $$ WebHdfsFileSystem.LOG.info("redirect = " + redirect)[ CD ]
Line_13 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_74 $$ conn.disconnect()[ FD ]
