Line_7 $$ arguments = Collections.singletonList(content)-->Line_12 $$ arguments = ManagementFactory.getRuntimeMXBean().getInputArguments()[ FD ]
Line_3 $$ List<String> arguments-->Line_20 $$ arguments = Collections.singletonList(content)[ FD ]
Line_14 $$ File file = getWriteFile()-->Line_19 $$ String content = FileUtil.loadFile(file)[ FD ]
Line_2 $$ public static int readOption(MemoryKind kind, boolean effective) -->Line_3 $$ List<String> arguments[ CD ]
Line_11 $$ if (effective) -->Line_15 $$ if (file == null || !file.exists()) [ CD ]
Line_26 $$ for (String argument : arguments) -->Line_27 $$ Matcher m = kind.pattern.matcher(argument)[ FD ]
Line_11 $$ if (effective) -->Line_14 $$ File file = getWriteFile()[ CD ]
Line_27 $$ Matcher m = kind.pattern.matcher(argument)-->Line_31 $$ double multiplier = parseUnit(m.group(2))[ FD ]
Line_2 $$ public static int readOption(MemoryKind kind, boolean effective) -->Line_4 $$ if (ourTestPath != null) [ FD ]
Line_12 $$ arguments = ManagementFactory.getRuntimeMXBean().getInputArguments()-->Line_20 $$ arguments = Collections.singletonList(content)[ FD ]
Line_2 $$ public static int readOption(MemoryKind kind, boolean effective) -->Line_39 $$ return -1[ CD ]
Line_3 $$ List<String> arguments-->Line_12 $$ arguments = ManagementFactory.getRuntimeMXBean().getInputArguments()[ FD ]
Line_14 $$ File file = getWriteFile()-->Line_15 $$ if (file == null || !file.exists()) [ FD ]
Line_4 $$ if (ourTestPath != null) -->Line_11 $$ if (effective) [ CD ]
Line_3 $$ List<String> arguments-->Line_7 $$ arguments = Collections.singletonList(content)[ FD ]
Line_6 $$ String content = FileUtil.loadFile(new File(ourTestPath))-->Line_20 $$ arguments = Collections.singletonList(content)[ FD ]
Line_27 $$ Matcher m = kind.pattern.matcher(argument)-->Line_28 $$ if (m.find()) [ FD ]
Line_7 $$ arguments = Collections.singletonList(content)-->Line_20 $$ arguments = Collections.singletonList(content)[ FD ]
Line_15 $$ if (file == null || !file.exists()) -->Line_16 $$ return -1[ CD ]
Line_2 $$ public static int readOption(MemoryKind kind, boolean effective) -->Line_4 $$ if (ourTestPath != null) [ CD ]
Line_6 $$ String content = FileUtil.loadFile(new File(ourTestPath))-->Line_7 $$ arguments = Collections.singletonList(content)[ FD ]
Line_27 $$ Matcher m = kind.pattern.matcher(argument)-->Line_30 $$ int value = Integer.parseInt(m.group(1))[ FD ]
Line_11 $$ if (effective) -->Line_12 $$ arguments = ManagementFactory.getRuntimeMXBean().getInputArguments()[ CD ]
