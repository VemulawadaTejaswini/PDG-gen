Line_11 $$ List<Future<?>> queryFutures = new ArrayList()-->Line_13 $$ queryFutures.add(executor.submit(() -> queryRunner.execute("SELECT COUNT(*), clerk FROM orders GROUP BY clerk")))[ FD ]
Line_18 $$ if (info.getState().isDone()) -->Line_19 $$ assertEquals(info.getErrorCode().getCode(), CLUSTER_OUT_OF_MEMORY.toErrorCode().getCode())[ CD ]
Line_15 $$ boolean queryDone = false-->Line_16 $$ while (!queryDone) [ FD ]
Line_27 $$ MemoryPool reserved = server.getLocalMemoryManager().getPool(RESERVED_POOL)-->Line_29 $$ assertTrue(reserved.getFreeBytes() > 0)[ FD ]
Line_4 $$ try (DistributedQueryRunner queryRunner = createQueryRunner(TINY_SESSION, properties)) -->Line_26 $$ for (TestingPrestoServer server : queryRunner.getServers()) [ FD ]
Line_12 $$ for (int i = 0; i < 2; i++) -->Line_13 $$ queryFutures.add(executor.submit(() -> queryRunner.execute("SELECT COUNT(*), clerk FROM orders GROUP BY clerk")))[ CD ]
Line_20 $$ queryDone = true-->Line_16 $$ while (!queryDone) [ FD ]
Line_2 $$ public void testOutOfMemoryKiller() throws Exception -->Line_3 $$ Map<String, String> properties = ImmutableMap.<String, String>builder().put("task.verbose-stats", "true").put("task.operator-pre-allocated-memory", "0B").put("query.low-memory-killer.delay", "5s").put("query.low-memory-killer.enabled", "true").build()[ CD ]
Line_3 $$ Map<String, String> properties = ImmutableMap.<String, String>builder().put("task.verbose-stats", "true").put("task.operator-pre-allocated-memory", "0B").put("query.low-memory-killer.delay", "5s").put("query.low-memory-killer.enabled", "true").build()-->Line_4 $$ try (DistributedQueryRunner queryRunner = createQueryRunner(TINY_SESSION, properties)) [ FD ]
Line_5 $$ QueryId fakeQueryId = new QueryId("fake")-->Line_28 $$ reserved.free(fakeQueryId, reserved.getMaxBytes())[ FD ]
Line_18 $$ if (info.getState().isDone()) -->Line_20 $$ queryDone = true[ CD ]
Line_17 $$ for (QueryInfo info : queryRunner.getCoordinator().getQueryManager().getAllQueryInfo()) -->Line_18 $$ if (info.getState().isDone()) [ FD ]
Line_16 $$ while (!queryDone) -->Line_24 $$ MILLISECONDS.sleep(10)[ CD ]
Line_6 $$ for (TestingPrestoServer server : queryRunner.getServers()) -->Line_27 $$ MemoryPool reserved = server.getLocalMemoryManager().getPool(RESERVED_POOL)[ FD ]
Line_31 $$ for (Future<?> query : queryFutures) -->Line_32 $$ query.get()[ FD ]
Line_27 $$ MemoryPool reserved = server.getLocalMemoryManager().getPool(RESERVED_POOL)-->Line_28 $$ reserved.free(fakeQueryId, reserved.getMaxBytes())[ FD ]
Line_15 $$ boolean queryDone = false-->Line_20 $$ queryDone = true[ FD ]
Line_5 $$ QueryId fakeQueryId = new QueryId("fake")-->Line_8 $$ assertTrue(pool.tryReserve(fakeQueryId, pool.getMaxBytes()))[ FD ]
Line_4 $$ try (DistributedQueryRunner queryRunner = createQueryRunner(TINY_SESSION, properties)) -->Line_17 $$ for (QueryInfo info : queryRunner.getCoordinator().getQueryManager().getAllQueryInfo()) [ FD ]
Line_6 $$ for (TestingPrestoServer server : queryRunner.getServers()) -->Line_7 $$ for (MemoryPool pool : server.getLocalMemoryManager().getPools()) [ FD ]
Line_17 $$ for (QueryInfo info : queryRunner.getCoordinator().getQueryManager().getAllQueryInfo()) -->Line_19 $$ assertEquals(info.getErrorCode().getCode(), CLUSTER_OUT_OF_MEMORY.toErrorCode().getCode())[ FD ]
Line_7 $$ for (MemoryPool pool : server.getLocalMemoryManager().getPools()) -->Line_8 $$ assertTrue(pool.tryReserve(fakeQueryId, pool.getMaxBytes()))[ FD ]
Line_4 $$ try (DistributedQueryRunner queryRunner = createQueryRunner(TINY_SESSION, properties)) -->Line_6 $$ for (TestingPrestoServer server : queryRunner.getServers()) [ FD ]
Line_4 $$ try (DistributedQueryRunner queryRunner = createQueryRunner(TINY_SESSION, properties)) -->Line_13 $$ queryRunner.execute("SELECT COUNT(*), clerk FROM orders GROUP BY clerk")[ FD ]
