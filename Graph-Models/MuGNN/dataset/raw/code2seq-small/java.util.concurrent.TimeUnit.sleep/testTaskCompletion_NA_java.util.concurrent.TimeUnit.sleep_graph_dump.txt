Line_2 $$ public void testTaskCompletion() throws Exception -->Line_6 $$ RemoteTask remoteTask = remoteTaskFactory.createTableScanTask(taskId, chosenNode, ImmutableList.of(new Split("foo", new TestSplitRemote())), nodeTaskMap.createPartitionedSplitCountTracker(chosenNode, taskId))[ CD ]
Line_2 $$ public void testTaskCompletion() throws Exception -->Line_12 $$ remoteTask.abort()[ CD ]
Line_4 $$ Node chosenNode = Iterables.get(nodeManager.getActiveDatasourceNodes("foo"), 0)-->Line_13 $$ assertEquals(nodeTaskMap.getPartitionedSplitsOnNode(chosenNode), 0)[ FD ]
Line_2 $$ public void testTaskCompletion() throws Exception -->Line_10 $$ TimeUnit.MILLISECONDS.sleep(100)[ CD ]
Line_5 $$ TaskId taskId = new TaskId(new StageId("test", "1"), "1")-->Line_6 $$ RemoteTask remoteTask = remoteTaskFactory.createTableScanTask(taskId, chosenNode, ImmutableList.of(new Split("foo", new TestSplitRemote())), nodeTaskMap.createPartitionedSplitCountTracker(chosenNode, taskId))[ FD ]
Line_4 $$ Node chosenNode = Iterables.get(nodeManager.getActiveDatasourceNodes("foo"), 0)-->Line_8 $$ assertEquals(nodeTaskMap.getPartitionedSplitsOnNode(chosenNode), 1)[ FD ]
Line_4 $$ Node chosenNode = Iterables.get(nodeManager.getActiveDatasourceNodes("foo"), 0)-->Line_7 $$ nodeTaskMap.addTask(chosenNode, remoteTask)[ FD ]
Line_2 $$ public void testTaskCompletion() throws Exception -->Line_13 $$ assertEquals(nodeTaskMap.getPartitionedSplitsOnNode(chosenNode), 0)[ CD ]
Line_2 $$ public void testTaskCompletion() throws Exception -->Line_5 $$ TaskId taskId = new TaskId(new StageId("test", "1"), "1")[ CD ]
Line_4 $$ Node chosenNode = Iterables.get(nodeManager.getActiveDatasourceNodes("foo"), 0)-->Line_11 $$ assertEquals(nodeTaskMap.getPartitionedSplitsOnNode(chosenNode), 0)[ FD ]
Line_4 $$ Node chosenNode = Iterables.get(nodeManager.getActiveDatasourceNodes("foo"), 0)-->Line_6 $$ RemoteTask remoteTask = remoteTaskFactory.createTableScanTask(taskId, chosenNode, ImmutableList.of(new Split("foo", new TestSplitRemote())), nodeTaskMap.createPartitionedSplitCountTracker(chosenNode, taskId))[ FD ]
Line_6 $$ RemoteTask remoteTask = remoteTaskFactory.createTableScanTask(taskId, chosenNode, ImmutableList.of(new Split("foo", new TestSplitRemote())), nodeTaskMap.createPartitionedSplitCountTracker(chosenNode, taskId))-->Line_9 $$ remoteTask.abort()[ FD ]
Line_2 $$ public void testTaskCompletion() throws Exception -->Line_9 $$ remoteTask.abort()[ CD ]
Line_2 $$ public void testTaskCompletion() throws Exception -->Line_3 $$ MockRemoteTaskFactory remoteTaskFactory = new MockRemoteTaskFactory(remoteTaskExecutor)[ CD ]
Line_6 $$ RemoteTask remoteTask = remoteTaskFactory.createTableScanTask(taskId, chosenNode, ImmutableList.of(new Split("foo", new TestSplitRemote())), nodeTaskMap.createPartitionedSplitCountTracker(chosenNode, taskId))-->Line_7 $$ nodeTaskMap.addTask(chosenNode, remoteTask)[ FD ]
Line_2 $$ public void testTaskCompletion() throws Exception -->Line_4 $$ Node chosenNode = Iterables.get(nodeManager.getActiveDatasourceNodes("foo"), 0)[ CD ]
Line_2 $$ public void testTaskCompletion() throws Exception -->Line_7 $$ nodeTaskMap.addTask(chosenNode, remoteTask)[ CD ]
Line_3 $$ MockRemoteTaskFactory remoteTaskFactory = new MockRemoteTaskFactory(remoteTaskExecutor)-->Line_6 $$ RemoteTask remoteTask = remoteTaskFactory.createTableScanTask(taskId, chosenNode, ImmutableList.of(new Split("foo", new TestSplitRemote())), nodeTaskMap.createPartitionedSplitCountTracker(chosenNode, taskId))[ FD ]
Line_6 $$ RemoteTask remoteTask = remoteTaskFactory.createTableScanTask(taskId, chosenNode, ImmutableList.of(new Split("foo", new TestSplitRemote())), nodeTaskMap.createPartitionedSplitCountTracker(chosenNode, taskId))-->Line_12 $$ remoteTask.abort()[ FD ]
Line_2 $$ public void testTaskCompletion() throws Exception -->Line_11 $$ assertEquals(nodeTaskMap.getPartitionedSplitsOnNode(chosenNode), 0)[ CD ]
Line_2 $$ public void testTaskCompletion() throws Exception -->Line_8 $$ assertEquals(nodeTaskMap.getPartitionedSplitsOnNode(chosenNode), 1)[ CD ]
