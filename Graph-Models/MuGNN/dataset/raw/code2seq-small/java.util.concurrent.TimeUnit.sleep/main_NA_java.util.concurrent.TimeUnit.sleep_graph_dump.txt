Line_21 $$ Token<JobTokenIdentifier> jt = TokenCache.getJobToken(credentials)-->Line_23 $$ taskOwner.addToken(jt)[ FD ]
Line_99 $$ if (!ShutdownHookManager.get().isShutdownInProgress()) -->Line_102 $$ umbilical.fatalError(taskid, cause)[ CD ]
Line_17 $$ for (Token<?> token : credentials.getAllTokens()) -->Line_18 $$ LOG.info(token)[ FD ]
Line_38 $$ for (int idle = 0; null == myTask; ++idle) -->Line_39 $$ long sleepTimeMilliSecs = Math.min(idle * 500, 1500)[ CD ]
Line_5 $$ final JobConf job = new JobConf(MRJobConfig.JOB_CONF_FILE)-->Line_26 $$ return (TaskUmbilicalProtocol) RPC.getProxy(TaskUmbilicalProtocol.class, TaskUmbilicalProtocol.versionID, address, job)[ FD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_8 $$ String host = args[0][ CD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_6 $$ Limits.init(job)[ CD ]
Line_15 $$ Credentials credentials = UserGroupInformation.getCurrentUser().getCredentials()-->Line_56 $$ childUGI.addCredentials(credentials)[ FD ]
Line_21 $$ Token<JobTokenIdentifier> jt = TokenCache.getJobToken(credentials)-->Line_49 $$ configureTask(job, task, credentials, jt)[ FD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_21 $$ Token<JobTokenIdentifier> jt = TokenCache.getJobToken(credentials)[ CD ]
Line_11 $$ final TaskAttemptID firstTaskid = TaskAttemptID.forName(args[2])-->Line_20 $$ UserGroupInformation taskOwner = UserGroupInformation.createRemoteUser(firstTaskid.getJobID().toString())[ FD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_14 $$ DefaultMetricsSystem.initialize(StringUtils.camelize(firstTaskid.getTaskType().name()) + "Task")[ CD ]
Line_15 $$ Credentials credentials = UserGroupInformation.getCurrentUser().getCredentials()-->Line_17 $$ for (Token<?> token : credentials.getAllTokens()) [ FD ]
Line_51 $$ if (systemPropsToLog != null) -->Line_52 $$ LOG.info(systemPropsToLog)[ CD ]
Line_11 $$ final TaskAttemptID firstTaskid = TaskAttemptID.forName(args[2])-->Line_14 $$ DefaultMetricsSystem.initialize(StringUtils.camelize(firstTaskid.getTaskType().name()) + "Task")[ FD ]
Line_75 $$ if (task != null) -->Line_76 $$ if (childUGI == null) [ CD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_20 $$ UserGroupInformation taskOwner = UserGroupInformation.createRemoteUser(firstTaskid.getJobID().toString())[ CD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_15 $$ Credentials credentials = UserGroupInformation.getCurrentUser().getCredentials()[ CD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_9 $$ int port = Integer.parseInt(args[1])[ CD ]
Line_24 $$ final TaskUmbilicalProtocol umbilical = taskOwner.doAs(new PrivilegedExceptionAction<TaskUmbilicalProtocol>() -->Line_102 $$ umbilical.fatalError(taskid, cause)[ FD ]
Line_60 $$ childUGI.doAs(new PrivilegedExceptionAction<Object>() -->Line_63 $$ taskFinal.run(job, umbilical)[ CD ]
Line_11 $$ final TaskAttemptID firstTaskid = TaskAttemptID.forName(args[2])-->Line_13 $$ JVMId jvmId = new JVMId(firstTaskid.getJobID(), firstTaskid.getTaskType() == TaskType.MAP, jvmIdInt)[ FD ]
Line_5 $$ final JobConf job = new JobConf(MRJobConfig.JOB_CONF_FILE)-->Line_54 $$ JvmMetrics.initSingleton(jvmId.toString(), job.getSessionId())[ FD ]
Line_9 $$ int port = Integer.parseInt(args[1])-->Line_10 $$ final InetSocketAddress address = NetUtils.createSocketAddrForHost(host, port)[ FD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_24 $$ final TaskUmbilicalProtocol umbilical = taskOwner.doAs(new PrivilegedExceptionAction<TaskUmbilicalProtocol>() [ CD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_22 $$ SecurityUtil.setTokenService(jt, address)[ CD ]
Line_24 $$ final TaskUmbilicalProtocol umbilical = taskOwner.doAs(new PrivilegedExceptionAction<TaskUmbilicalProtocol>() -->Line_82 $$ taskFinal.taskCleanup(umbilical)[ FD ]
Line_80 $$ childUGI.doAs(new PrivilegedExceptionAction<Object>() -->Line_82 $$ taskFinal.taskCleanup(umbilical)[ CD ]
Line_13 $$ JVMId jvmId = new JVMId(firstTaskid.getJobID(), firstTaskid.getTaskType() == TaskType.MAP, jvmIdInt)-->Line_54 $$ JvmMetrics.initSingleton(jvmId.toString(), job.getSessionId())[ FD ]
Line_99 $$ if (!ShutdownHookManager.get().isShutdownInProgress()) -->Line_100 $$ Throwable tCause = throwable.getCause()[ CD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_4 $$ LOG.debug("Child starting")[ CD ]
Line_24 $$ final TaskUmbilicalProtocol umbilical = taskOwner.doAs(new PrivilegedExceptionAction<TaskUmbilicalProtocol>() -->Line_106 $$ RPC.stopProxy(umbilical)[ FD ]
Line_5 $$ final JobConf job = new JobConf(MRJobConfig.JOB_CONF_FILE)-->Line_49 $$ configureTask(job, task, credentials, jt)[ FD ]
Line_20 $$ UserGroupInformation taskOwner = UserGroupInformation.createRemoteUser(firstTaskid.getJobID().toString())-->Line_24 $$ final TaskUmbilicalProtocol umbilical = taskOwner.doAs(new PrivilegedExceptionAction<TaskUmbilicalProtocol>() [ FD ]
Line_8 $$ String host = args[0]-->Line_10 $$ final InetSocketAddress address = NetUtils.createSocketAddrForHost(host, port)[ FD ]
Line_80 $$ childUGI.doAs(new PrivilegedExceptionAction<Object>() -->Line_83 $$ return null[ CD ]
Line_5 $$ final JobConf job = new JobConf(MRJobConfig.JOB_CONF_FILE)-->Line_50 $$ String systemPropsToLog = MRApps.getSystemPropertiesToLog(job)[ FD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_30 $$ LOG.debug("PID: " + System.getenv().get("JVM_PID"))[ CD ]
Line_5 $$ final JobConf job = new JobConf(MRJobConfig.JOB_CONF_FILE)-->Line_62 $$ FileSystem.get(job).setWorkingDirectory(job.getWorkingDirectory())[ FD ]
Line_76 $$ if (childUGI == null) -->Line_80 $$ childUGI.doAs(new PrivilegedExceptionAction<Object>() [ CD ]
Line_38 $$ for (int idle = 0; null == myTask; ++idle) -->Line_41 $$ MILLISECONDS.sleep(sleepTimeMilliSecs)[ CD ]
Line_69 $$ if (!ShutdownHookManager.get().isShutdownInProgress()) -->Line_70 $$ umbilical.fsError(taskid, e.getMessage())[ CD ]
Line_15 $$ Credentials credentials = UserGroupInformation.getCurrentUser().getCredentials()-->Line_21 $$ Token<JobTokenIdentifier> jt = TokenCache.getJobToken(credentials)[ FD ]
Line_39 $$ long sleepTimeMilliSecs = Math.min(idle * 500, 1500)-->Line_41 $$ MILLISECONDS.sleep(sleepTimeMilliSecs)[ FD ]
Line_21 $$ Token<JobTokenIdentifier> jt = TokenCache.getJobToken(credentials)-->Line_22 $$ SecurityUtil.setTokenService(jt, address)[ FD ]
Line_10 $$ final InetSocketAddress address = NetUtils.createSocketAddrForHost(host, port)-->Line_22 $$ SecurityUtil.setTokenService(jt, address)[ FD ]
Line_5 $$ final JobConf job = new JobConf(MRJobConfig.JOB_CONF_FILE)-->Line_7 $$ UserGroupInformation.setConfiguration(job)[ FD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_10 $$ final InetSocketAddress address = NetUtils.createSocketAddrForHost(host, port)[ CD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_5 $$ final JobConf job = new JobConf(MRJobConfig.JOB_CONF_FILE)[ CD ]
Line_24 $$ final TaskUmbilicalProtocol umbilical = taskOwner.doAs(new PrivilegedExceptionAction<TaskUmbilicalProtocol>() -->Line_70 $$ umbilical.fsError(taskid, e.getMessage())[ FD ]
Line_20 $$ UserGroupInformation taskOwner = UserGroupInformation.createRemoteUser(firstTaskid.getJobID().toString())-->Line_23 $$ taskOwner.addToken(jt)[ FD ]
Line_98 $$ if (taskid != null) -->Line_99 $$ if (!ShutdownHookManager.get().isShutdownInProgress()) [ CD ]
Line_15 $$ Credentials credentials = UserGroupInformation.getCurrentUser().getCredentials()-->Line_49 $$ configureTask(job, task, credentials, jt)[ FD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_7 $$ UserGroupInformation.setConfiguration(job)[ CD ]
Line_24 $$ final TaskUmbilicalProtocol umbilical = taskOwner.doAs(new PrivilegedExceptionAction<TaskUmbilicalProtocol>() -->Line_42 $$ myTask = umbilical.getTask(context)[ FD ]
Line_38 $$ for (int idle = 0; null == myTask; ++idle) -->Line_40 $$ LOG.info("Sleeping for " + sleepTimeMilliSecs + "ms before retrying again. Got null now.")[ CD ]
Line_5 $$ final JobConf job = new JobConf(MRJobConfig.JOB_CONF_FILE)-->Line_63 $$ taskFinal.run(job, umbilical)[ FD ]
Line_5 $$ final JobConf job = new JobConf(MRJobConfig.JOB_CONF_FILE)-->Line_57 $$ MRApps.setJobClassLoader(job)[ FD ]
Line_60 $$ childUGI.doAs(new PrivilegedExceptionAction<Object>() -->Line_64 $$ return null[ CD ]
Line_24 $$ final TaskUmbilicalProtocol umbilical = taskOwner.doAs(new PrivilegedExceptionAction<TaskUmbilicalProtocol>() -->Line_77 $$ task.taskCleanup(umbilical)[ FD ]
Line_24 $$ final TaskUmbilicalProtocol umbilical = taskOwner.doAs(new PrivilegedExceptionAction<TaskUmbilicalProtocol>() -->Line_26 $$ return (TaskUmbilicalProtocol) RPC.getProxy(TaskUmbilicalProtocol.class, TaskUmbilicalProtocol.versionID, address, job)[ CD ]
Line_24 $$ final TaskUmbilicalProtocol umbilical = taskOwner.doAs(new PrivilegedExceptionAction<TaskUmbilicalProtocol>() -->Line_63 $$ taskFinal.run(job, umbilical)[ FD ]
Line_24 $$ final TaskUmbilicalProtocol umbilical = taskOwner.doAs(new PrivilegedExceptionAction<TaskUmbilicalProtocol>() -->Line_93 $$ umbilical.fatalError(taskid, StringUtils.stringifyException(exception))[ FD ]
Line_91 $$ if (taskid != null) -->Line_92 $$ if (!ShutdownHookManager.get().isShutdownInProgress()) [ CD ]
Line_5 $$ final JobConf job = new JobConf(MRJobConfig.JOB_CONF_FILE)-->Line_6 $$ Limits.init(job)[ FD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_11 $$ final TaskAttemptID firstTaskid = TaskAttemptID.forName(args[2])[ CD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_3 $$ Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler())[ CD ]
Line_76 $$ if (childUGI == null) -->Line_77 $$ task.taskCleanup(umbilical)[ CD ]
Line_10 $$ final InetSocketAddress address = NetUtils.createSocketAddrForHost(host, port)-->Line_26 $$ return (TaskUmbilicalProtocol) RPC.getProxy(TaskUmbilicalProtocol.class, TaskUmbilicalProtocol.versionID, address, job)[ FD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_12 $$ int jvmIdInt = Integer.parseInt(args[3])[ CD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_23 $$ taskOwner.addToken(jt)[ CD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_13 $$ JVMId jvmId = new JVMId(firstTaskid.getJobID(), firstTaskid.getTaskType() == TaskType.MAP, jvmIdInt)[ CD ]
Line_92 $$ if (!ShutdownHookManager.get().isShutdownInProgress()) -->Line_93 $$ umbilical.fatalError(taskid, StringUtils.stringifyException(exception))[ CD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_16 $$ LOG.info("Executing with tokens:")[ CD ]
Line_38 $$ for (int idle = 0; null == myTask; ++idle) -->Line_42 $$ myTask = umbilical.getTask(context)[ CD ]
Line_44 $$ if (myTask.shouldDie()) -->Line_45 $$ return[ CD ]
Line_60 $$ childUGI.doAs(new PrivilegedExceptionAction<Object>() -->Line_62 $$ FileSystem.get(job).setWorkingDirectory(job.getWorkingDirectory())[ CD ]
