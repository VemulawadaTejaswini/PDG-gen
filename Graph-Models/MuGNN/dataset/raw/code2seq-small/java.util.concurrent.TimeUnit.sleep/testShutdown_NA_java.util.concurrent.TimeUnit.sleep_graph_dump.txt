Line_20 $$ TestShutdownAction shutdownAction = (TestShutdownAction) worker.getShutdownAction()-->Line_22 $$ assertTrue(shutdownAction.isWorkerShutdown())[ FD ]
Line_4 $$ try (DistributedQueryRunner queryRunner = createQueryRunner(TINY_SESSION, properties)) -->Line_16 $$ List<QueryInfo> queryInfos = queryRunner.getCoordinator().getQueryManager().getAllQueryInfo()[ FD ]
Line_2 $$ public void testShutdown() throws Exception -->Line_3 $$ Map<String, String> properties = ImmutableMap.<String, String>builder().put("node-scheduler.include-coordinator", "false").put("shutdown.grace-period", "10s").build()[ CD ]
Line_6 $$ for (int i = 0; i < 5; i++) -->Line_7 $$ queryFutures.add(executor.submit(() -> queryRunner.execute("SELECT COUNT(*), clerk FROM orders GROUP BY clerk")))[ CD ]
Line_10 $$ TaskManager taskManager = worker.getTaskManager()-->Line_11 $$ while (taskManager.getAllTaskInfo().isEmpty()) [ FD ]
Line_9 $$ TestingPrestoServer worker = queryRunner.getServers().stream().filter( server -> !server.isCoordinator()).findFirst().get()-->Line_14 $$ worker.getGracefulShutdownHandler().requestShutdown()[ FD ]
Line_9 $$ TestingPrestoServer worker = queryRunner.getServers().stream().filter( server -> !server.isCoordinator()).findFirst().get()-->Line_20 $$ TestShutdownAction shutdownAction = (TestShutdownAction) worker.getShutdownAction()[ FD ]
Line_5 $$ List<ListenableFuture<?>> queryFutures = new ArrayList()-->Line_7 $$ queryFutures.add(executor.submit(() -> queryRunner.execute("SELECT COUNT(*), clerk FROM orders GROUP BY clerk")))[ FD ]
Line_20 $$ TestShutdownAction shutdownAction = (TestShutdownAction) worker.getShutdownAction()-->Line_21 $$ shutdownAction.waitForShutdownComplete(SHUTDOWN_TIMEOUT_MILLIS)[ FD ]
Line_3 $$ Map<String, String> properties = ImmutableMap.<String, String>builder().put("node-scheduler.include-coordinator", "false").put("shutdown.grace-period", "10s").build()-->Line_4 $$ try (DistributedQueryRunner queryRunner = createQueryRunner(TINY_SESSION, properties)) [ FD ]
Line_4 $$ try (DistributedQueryRunner queryRunner = createQueryRunner(TINY_SESSION, properties)) -->Line_7 $$ queryRunner.execute("SELECT COUNT(*), clerk FROM orders GROUP BY clerk")[ FD ]
Line_5 $$ List<ListenableFuture<?>> queryFutures = new ArrayList()-->Line_15 $$ Futures.allAsList(queryFutures).get()[ FD ]
Line_4 $$ try (DistributedQueryRunner queryRunner = createQueryRunner(TINY_SESSION, properties)) -->Line_9 $$ TestingPrestoServer worker = queryRunner.getServers().stream().filter( server -> !server.isCoordinator()).findFirst().get()[ FD ]
Line_17 $$ for (QueryInfo info : queryInfos) -->Line_18 $$ assertEquals(info.getState(), FINISHED)[ FD ]
Line_9 $$ TestingPrestoServer worker = queryRunner.getServers().stream().filter( server -> !server.isCoordinator()).findFirst().get()-->Line_10 $$ TaskManager taskManager = worker.getTaskManager()[ FD ]
Line_11 $$ while (taskManager.getAllTaskInfo().isEmpty()) -->Line_12 $$ MILLISECONDS.sleep(500)[ CD ]
