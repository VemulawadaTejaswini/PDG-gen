Line_11 $$ List<Future<?>> queryFutures = new ArrayList()-->Line_13 $$ queryFutures.add(executor.submit(() -> queryRunner.execute("SELECT COUNT(*), clerk FROM orders GROUP BY clerk")))[ FD ]
Line_4 $$ try (DistributedQueryRunner queryRunner = createQueryRunner(TINY_SESSION, properties)) -->Line_38 $$ for (TestingPrestoServer server : queryRunner.getServers()) [ FD ]
Line_12 $$ for (int i = 0; i < 2; i++) -->Line_13 $$ queryFutures.add(executor.submit(() -> queryRunner.execute("SELECT COUNT(*), clerk FROM orders GROUP BY clerk")))[ CD ]
Line_6 $$ for (TestingPrestoServer server : queryRunner.getServers()) -->Line_42 $$ MemoryPool system = server.getLocalMemoryManager().getPool(SYSTEM_POOL)[ FD ]
Line_25 $$ List<QueryInfo> currentQueryInfos = queryRunner.getCoordinator().getQueryManager().getAllQueryInfo()-->Line_30 $$ assertNotEquals(currentQueryInfos.get(0).getMemoryPool(), currentQueryInfos.get(1).getMemoryPool())[ FD ]
Line_5 $$ QueryId fakeQueryId = new QueryId("fake")-->Line_57 $$ general.free(fakeQueryId, general.getMaxBytes())[ FD ]
Line_15 $$ ClusterMemoryManager memoryManager = queryRunner.getCoordinator().getClusterMemoryManager()-->Line_17 $$ while ((reservedPool = memoryManager.getPools().get(RESERVED_POOL)) == null) [ FD ]
Line_56 $$ MemoryPool general = worker.getLocalMemoryManager().getPool(GENERAL_POOL)-->Line_58 $$ assertEquals(general.getMaxBytes(), general.getFreeBytes())[ FD ]
Line_46 $$ for (Future<?> query : queryFutures) -->Line_47 $$ query.get()[ FD ]
Line_16 $$ ClusterMemoryPool reservedPool-->Line_22 $$ while (generalPool.getAssignedQueries() != 1 || reservedPool.getAssignedQueries() != 1 || generalPool.getBlockedNodes() != 2 || reservedPool.getBlockedNodes() != 2) [ FD ]
Line_22 $$ while (generalPool.getAssignedQueries() != 1 || reservedPool.getAssignedQueries() != 1 || generalPool.getBlockedNodes() != 2 || reservedPool.getBlockedNodes() != 2) -->Line_23 $$ MILLISECONDS.sleep(10)[ CD ]
Line_39 $$ MemoryPool reserved = server.getLocalMemoryManager().getPool(RESERVED_POOL)-->Line_40 $$ reserved.free(fakeQueryId, reserved.getMaxBytes())[ FD ]
Line_4 $$ try (DistributedQueryRunner queryRunner = createQueryRunner(TINY_SESSION, properties)) -->Line_49 $$ List<QueryInfo> queryInfos = queryRunner.getCoordinator().getQueryManager().getAllQueryInfo()[ FD ]
Line_4 $$ try (DistributedQueryRunner queryRunner = createQueryRunner(TINY_SESSION, properties)) -->Line_53 $$ for (TestingPrestoServer worker : queryRunner.getServers()) [ FD ]
Line_4 $$ try (DistributedQueryRunner queryRunner = createQueryRunner(TINY_SESSION, properties)) -->Line_33 $$ currentQueryInfos = queryRunner.getCoordinator().getQueryManager().getAllQueryInfo()[ FD ]
Line_34 $$ for (QueryInfo info : currentQueryInfos) -->Line_35 $$ assertFalse(info.getState().isDone())[ FD ]
Line_39 $$ MemoryPool reserved = server.getLocalMemoryManager().getPool(RESERVED_POOL)-->Line_41 $$ assertTrue(reserved.getFreeBytes() > 0)[ FD ]
Line_17 $$ while ((reservedPool = memoryManager.getPools().get(RESERVED_POOL)) == null) -->Line_18 $$ MILLISECONDS.sleep(10)[ CD ]
Line_42 $$ MemoryPool system = server.getLocalMemoryManager().getPool(SYSTEM_POOL)-->Line_44 $$ assertTrue(system.getFreeBytes() > 0)[ FD ]
Line_26 $$ for (QueryInfo info : currentQueryInfos) -->Line_35 $$ assertFalse(info.getState().isDone())[ FD ]
Line_25 $$ List<QueryInfo> currentQueryInfos = queryRunner.getCoordinator().getQueryManager().getAllQueryInfo()-->Line_29 $$ assertEquals(currentQueryInfos.size(), 2)[ FD ]
Line_42 $$ MemoryPool system = server.getLocalMemoryManager().getPool(SYSTEM_POOL)-->Line_60 $$ assertEquals(system.getMaxBytes(), system.getFreeBytes())[ FD ]
Line_25 $$ List<QueryInfo> currentQueryInfos = queryRunner.getCoordinator().getQueryManager().getAllQueryInfo()-->Line_31 $$ while (!allQueriesBlocked(currentQueryInfos)) [ FD ]
Line_31 $$ while (!allQueriesBlocked(currentQueryInfos)) -->Line_32 $$ MILLISECONDS.sleep(10)[ CD ]
Line_26 $$ for (QueryInfo info : currentQueryInfos) -->Line_51 $$ assertEquals(info.getState(), FINISHED)[ FD ]
Line_6 $$ for (TestingPrestoServer server : queryRunner.getServers()) -->Line_39 $$ MemoryPool reserved = server.getLocalMemoryManager().getPool(RESERVED_POOL)[ FD ]
Line_53 $$ for (TestingPrestoServer worker : queryRunner.getServers()) -->Line_54 $$ MemoryPool reserved = worker.getLocalMemoryManager().getPool(RESERVED_POOL)[ FD ]
Line_2 $$ public void testClusterPools() throws Exception -->Line_3 $$ Map<String, String> properties = ImmutableMap.<String, String>builder().put("task.verbose-stats", "true").put("task.operator-pre-allocated-memory", "0B").build()[ CD ]
Line_31 $$ while (!allQueriesBlocked(currentQueryInfos)) -->Line_33 $$ currentQueryInfos = queryRunner.getCoordinator().getQueryManager().getAllQueryInfo()[ CD ]
Line_5 $$ QueryId fakeQueryId = new QueryId("fake")-->Line_8 $$ assertTrue(pool.tryReserve(fakeQueryId, pool.getMaxBytes()))[ FD ]
Line_26 $$ for (QueryInfo info : currentQueryInfos) -->Line_27 $$ assertFalse(info.getState().isDone())[ FD ]
Line_53 $$ for (TestingPrestoServer worker : queryRunner.getServers()) -->Line_59 $$ MemoryPool system = worker.getLocalMemoryManager().getPool(SYSTEM_POOL)[ FD ]
Line_42 $$ MemoryPool system = server.getLocalMemoryManager().getPool(SYSTEM_POOL)-->Line_43 $$ system.free(fakeQueryId, system.getMaxBytes())[ FD ]
Line_4 $$ try (DistributedQueryRunner queryRunner = createQueryRunner(TINY_SESSION, properties)) -->Line_15 $$ ClusterMemoryManager memoryManager = queryRunner.getCoordinator().getClusterMemoryManager()[ FD ]
Line_16 $$ ClusterMemoryPool reservedPool-->Line_17 $$ while ((reservedPool = memoryManager.getPools().get(RESERVED_POOL)) == null) [ FD ]
Line_53 $$ for (TestingPrestoServer worker : queryRunner.getServers()) -->Line_56 $$ MemoryPool general = worker.getLocalMemoryManager().getPool(GENERAL_POOL)[ FD ]
Line_6 $$ for (TestingPrestoServer server : queryRunner.getServers()) -->Line_7 $$ for (MemoryPool pool : server.getLocalMemoryManager().getPools()) [ FD ]
Line_20 $$ ClusterMemoryPool generalPool = memoryManager.getPools().get(GENERAL_POOL)-->Line_22 $$ while (generalPool.getAssignedQueries() != 1 || reservedPool.getAssignedQueries() != 1 || generalPool.getBlockedNodes() != 2 || reservedPool.getBlockedNodes() != 2) [ FD ]
Line_56 $$ MemoryPool general = worker.getLocalMemoryManager().getPool(GENERAL_POOL)-->Line_57 $$ general.free(fakeQueryId, general.getMaxBytes())[ FD ]
Line_20 $$ ClusterMemoryPool generalPool = memoryManager.getPools().get(GENERAL_POOL)-->Line_21 $$ assertNotNull(generalPool)[ FD ]
Line_15 $$ ClusterMemoryManager memoryManager = queryRunner.getCoordinator().getClusterMemoryManager()-->Line_20 $$ ClusterMemoryPool generalPool = memoryManager.getPools().get(GENERAL_POOL)[ FD ]
Line_5 $$ QueryId fakeQueryId = new QueryId("fake")-->Line_43 $$ system.free(fakeQueryId, system.getMaxBytes())[ FD ]
Line_5 $$ QueryId fakeQueryId = new QueryId("fake")-->Line_40 $$ reserved.free(fakeQueryId, reserved.getMaxBytes())[ FD ]
Line_4 $$ try (DistributedQueryRunner queryRunner = createQueryRunner(TINY_SESSION, properties)) -->Line_25 $$ List<QueryInfo> currentQueryInfos = queryRunner.getCoordinator().getQueryManager().getAllQueryInfo()[ FD ]
Line_25 $$ List<QueryInfo> currentQueryInfos = queryRunner.getCoordinator().getQueryManager().getAllQueryInfo()-->Line_33 $$ currentQueryInfos = queryRunner.getCoordinator().getQueryManager().getAllQueryInfo()[ FD ]
Line_39 $$ MemoryPool reserved = server.getLocalMemoryManager().getPool(RESERVED_POOL)-->Line_55 $$ assertEquals(reserved.getMaxBytes(), reserved.getFreeBytes())[ FD ]
Line_7 $$ for (MemoryPool pool : server.getLocalMemoryManager().getPools()) -->Line_8 $$ assertTrue(pool.tryReserve(fakeQueryId, pool.getMaxBytes()))[ FD ]
Line_17 $$ while ((reservedPool = memoryManager.getPools().get(RESERVED_POOL)) == null) -->Line_22 $$ while (generalPool.getAssignedQueries() != 1 || reservedPool.getAssignedQueries() != 1 || generalPool.getBlockedNodes() != 2 || reservedPool.getBlockedNodes() != 2) [ FD ]
Line_33 $$ currentQueryInfos = queryRunner.getCoordinator().getQueryManager().getAllQueryInfo()-->Line_31 $$ while (!allQueriesBlocked(currentQueryInfos)) [ FD ]
Line_3 $$ Map<String, String> properties = ImmutableMap.<String, String>builder().put("task.verbose-stats", "true").put("task.operator-pre-allocated-memory", "0B").build()-->Line_4 $$ try (DistributedQueryRunner queryRunner = createQueryRunner(TINY_SESSION, properties)) [ FD ]
Line_4 $$ try (DistributedQueryRunner queryRunner = createQueryRunner(TINY_SESSION, properties)) -->Line_6 $$ for (TestingPrestoServer server : queryRunner.getServers()) [ FD ]
Line_4 $$ try (DistributedQueryRunner queryRunner = createQueryRunner(TINY_SESSION, properties)) -->Line_13 $$ queryRunner.execute("SELECT COUNT(*), clerk FROM orders GROUP BY clerk")[ FD ]
Line_34 $$ for (QueryInfo info : currentQueryInfos) -->Line_51 $$ assertEquals(info.getState(), FINISHED)[ FD ]
