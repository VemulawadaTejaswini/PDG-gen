Line_2 $$ public ListenableFuture<?> processFor(Duration duration) throws Exception -->Line_5 $$ calls.incrementAndGet()[ CD ]
Line_2 $$ public ListenableFuture<?> processFor(Duration duration) throws Exception -->Line_9 $$ long completedMillis = completedProcessMillis.addAndGet(processMillis)[ CD ]
Line_7 $$ long processMillis = Math.min(requiredProcessMillis - completedProcessMillis.get(), processMillisPerCall)-->Line_9 $$ long completedMillis = completedProcessMillis.addAndGet(processMillis)[ FD ]
Line_3 $$ long callStart = System.nanoTime()-->Line_4 $$ startNanos.compareAndSet(-1, callStart)[ FD ]
Line_2 $$ public ListenableFuture<?> processFor(Duration duration) throws Exception -->Line_6 $$ queuedNanos.addAndGet(callStart - lastCallNanos)[ CD ]
Line_2 $$ public ListenableFuture<?> processFor(Duration duration) throws Exception -->Line_13 $$ if (isFinished) [ CD ]
Line_13 $$ if (isFinished) -->Line_14 $$ doneNanos.compareAndSet(-1, callEnd)[ CD ]
Line_2 $$ public ListenableFuture<?> processFor(Duration duration) throws Exception -->Line_10 $$ boolean isFinished = completedMillis >= requiredProcessMillis[ CD ]
Line_2 $$ public ListenableFuture<?> processFor(Duration duration) throws Exception -->Line_8 $$ TimeUnit.MILLISECONDS.sleep(processMillis)[ CD ]
Line_2 $$ public ListenableFuture<?> processFor(Duration duration) throws Exception -->Line_11 $$ long callEnd = System.nanoTime()[ CD ]
Line_2 $$ public ListenableFuture<?> processFor(Duration duration) throws Exception -->Line_7 $$ long processMillis = Math.min(requiredProcessMillis - completedProcessMillis.get(), processMillisPerCall)[ CD ]
Line_11 $$ long callEnd = System.nanoTime()-->Line_14 $$ doneNanos.compareAndSet(-1, callEnd)[ FD ]
Line_2 $$ public ListenableFuture<?> processFor(Duration duration) throws Exception -->Line_16 $$ return Futures.immediateCheckedFuture(null)[ CD ]
Line_7 $$ long processMillis = Math.min(requiredProcessMillis - completedProcessMillis.get(), processMillisPerCall)-->Line_8 $$ TimeUnit.MILLISECONDS.sleep(processMillis)[ FD ]
Line_2 $$ public ListenableFuture<?> processFor(Duration duration) throws Exception -->Line_4 $$ startNanos.compareAndSet(-1, callStart)[ CD ]
Line_2 $$ public ListenableFuture<?> processFor(Duration duration) throws Exception -->Line_3 $$ long callStart = System.nanoTime()[ CD ]
