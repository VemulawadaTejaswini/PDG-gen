Line_3 $$ final HiveSplitSource hiveSplitSource = new HiveSplitSource("test", 10, new TestingHiveSplitLoader(), Executors.newFixedThreadPool(5))-->Line_10 $$ List<ConnectorSplit> batch = getFutureValue(hiveSplitSource.getNextBatch(1))[ FD ]
Line_4 $$ final SettableFuture<ConnectorSplit> splits = SettableFuture.create()-->Line_12 $$ splits.set(batch.get(0))[ FD ]
Line_4 $$ final SettableFuture<ConnectorSplit> splits = SettableFuture.create()-->Line_14 $$ splits.setException(e)[ FD ]
Line_5 $$ final CountDownLatch started = new CountDownLatch(1)-->Line_9 $$ started.countDown()[ FD ]
Line_5 $$ final CountDownLatch started = new CountDownLatch(1)-->Line_20 $$ assertTrue(started.await(1, TimeUnit.SECONDS))[ FD ]
Line_4 $$ final SettableFuture<ConnectorSplit> splits = SettableFuture.create()-->Line_24 $$ ConnectorSplit split = splits.get(200, TimeUnit.MILLISECONDS)[ FD ]
Line_3 $$ final HiveSplitSource hiveSplitSource = new HiveSplitSource("test", 10, new TestingHiveSplitLoader(), Executors.newFixedThreadPool(5))-->Line_23 $$ hiveSplitSource.addToQueue(new TestSplit(33))[ FD ]
Line_6 $$ Thread getterThread = new Thread(new Runnable() -->Line_27 $$ getterThread.interrupt()[ FD ]
Line_10 $$ List<ConnectorSplit> batch = getFutureValue(hiveSplitSource.getNextBatch(1))-->Line_11 $$ assertEquals(batch.size(), 1)[ FD ]
Line_4 $$ final SettableFuture<ConnectorSplit> splits = SettableFuture.create()-->Line_22 $$ assertTrue(!splits.isDone())[ FD ]
Line_2 $$ public void testReaderWaitsForSplits() throws Exception -->Line_4 $$ final SettableFuture<ConnectorSplit> splits = SettableFuture.create()[ CD ]
Line_2 $$ public void testReaderWaitsForSplits() throws Exception -->Line_5 $$ final CountDownLatch started = new CountDownLatch(1)[ CD ]
Line_6 $$ Thread getterThread = new Thread(new Runnable() -->Line_18 $$ getterThread.start()[ FD ]
Line_10 $$ List<ConnectorSplit> batch = getFutureValue(hiveSplitSource.getNextBatch(1))-->Line_12 $$ splits.set(batch.get(0))[ FD ]
Line_2 $$ public void testReaderWaitsForSplits() throws Exception -->Line_6 $$ Thread getterThread = new Thread(new Runnable() [ CD ]
Line_2 $$ public void testReaderWaitsForSplits() throws Exception -->Line_18 $$ getterThread.start()[ CD ]
Line_2 $$ public void testReaderWaitsForSplits() throws Exception -->Line_3 $$ final HiveSplitSource hiveSplitSource = new HiveSplitSource("test", 10, new TestingHiveSplitLoader(), Executors.newFixedThreadPool(5))[ CD ]
