Line_27 $$ final FSDataOutputStream out4 = fs.create(file4, false, 4096, fs.getDefaultReplication(file4), 1024L, null)-->Line_47 $$ out4.close()[ FD ]
Line_19 $$ final URI uri = dfs.getUri()-->Line_120 $$ assertFalse(HdfsUtils.isHealthy(uri))[ FD ]
Line_58 $$ final FileSystem fs = createFsWithDifferentUsername(conf, isWebHDFS)-->Line_106 $$ final FSDataInputStream in = fs.open(file4)[ FD ]
Line_43 $$ if (!isWebHDFS) -->Line_45 $$ out4.write(bytes)[ CD ]
Line_22 $$ final Path file1 = new Path(dir, "foo")-->Line_95 $$ final FileStatus s2 = fs.getFileStatus(file1)[ FD ]
Line_58 $$ final FileSystem fs = createFsWithDifferentUsername(conf, isWebHDFS)-->Line_99 $$ assertEquals(s1.getLen(), fs.getFileStatus(file3).getLen())[ FD ]
Line_6 $$ if (isWebHDFS) -->Line_9 $$ conf.setBoolean(DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_KEY, true)[ CD ]
Line_18 $$ final FileSystem fs = isWebHDFS ? WebHdfsTestUtil.getWebHdfsFileSystem(conf, WebHdfsFileSystem.SCHEME) : dfs-->Line_75 $$ DFSTestUtil.createFile(fs, file3, length, numDatanodes, 20120406L)[ FD ]
Line_74 $$ final FileSystem fs = createFsWithDifferentUsername(conf, isWebHDFS)-->Line_99 $$ assertEquals(s1.getLen(), fs.getFileStatus(file3).getLen())[ FD ]
Line_19 $$ final URI uri = dfs.getUri()-->Line_125 $$ assertFalse(HdfsUtils.isHealthy(uri))[ FD ]
Line_59 $$ final FSDataInputStream in = fs.open(file1)-->Line_62 $$ in.close()[ FD ]
Line_2 $$ public static void namenodeRestartTest(final Configuration conf, final boolean isWebHDFS) throws Exception -->Line_18 $$ final FileSystem fs = isWebHDFS ? WebHdfsTestUtil.getWebHdfsFileSystem(conf, WebHdfsFileSystem.SCHEME) : dfs[ FD ]
Line_18 $$ final FileSystem fs = isWebHDFS ? WebHdfsTestUtil.getWebHdfsFileSystem(conf, WebHdfsFileSystem.SCHEME) : dfs-->Line_24 $$ final FileStatus s1 = fs.getFileStatus(file1)[ FD ]
Line_18 $$ final FileSystem fs = isWebHDFS ? WebHdfsTestUtil.getWebHdfsFileSystem(conf, WebHdfsFileSystem.SCHEME) : dfs-->Line_59 $$ final FSDataInputStream in = fs.open(file1)[ FD ]
Line_17 $$ final DistributedFileSystem dfs = cluster.getFileSystem()-->Line_126 $$ dfs.setSafeMode(SafeModeAction.SAFEMODE_LEAVE)[ FD ]
Line_18 $$ final FileSystem fs = isWebHDFS ? WebHdfsTestUtil.getWebHdfsFileSystem(conf, WebHdfsFileSystem.SCHEME) : dfs-->Line_106 $$ final FSDataInputStream in = fs.open(file4)[ FD ]
Line_60 $$ int count = 0-->Line_112 $$ Assert.assertEquals(5 * bytes.length, count)[ FD ]
Line_21 $$ final long length = 1L << 20-->Line_134 $$ DFSTestUtil.createFile(fs, file2, length, numDatanodes, 20120406L)[ FD ]
Line_18 $$ final FileSystem fs = isWebHDFS ? WebHdfsTestUtil.getWebHdfsFileSystem(conf, WebHdfsFileSystem.SCHEME) : dfs-->Line_135 $$ assertEquals(fs.getFileChecksum(file1), fs.getFileChecksum(file2))[ FD ]
Line_2 $$ public static void namenodeRestartTest(final Configuration conf, final boolean isWebHDFS) throws Exception -->Line_7 $$ conf.setBoolean(DFSConfigKeys.DFS_HTTP_CLIENT_RETRY_POLICY_ENABLED_KEY, true)[ FD ]
Line_6 $$ if (isWebHDFS) -->Line_7 $$ conf.setBoolean(DFSConfigKeys.DFS_HTTP_CLIENT_RETRY_POLICY_ENABLED_KEY, true)[ CD ]
Line_59 $$ final FSDataInputStream in = fs.open(file1)-->Line_61 $$ for (; in.read() != -1; count++) [ FD ]
Line_4 $$ final List<Exception> exceptions = new ArrayList<Exception>()-->Line_129 $$ exceptions.add(e)[ FD ]
Line_4 $$ final List<Exception> exceptions = new ArrayList<Exception>()-->Line_145 $$ assertEmpty(exceptions)[ FD ]
Line_40 $$ final Thread file4thread = new Thread(new Runnable() -->Line_103 $$ file4thread.join()[ FD ]
Line_27 $$ final FSDataOutputStream out4 = fs.create(file4, false, 4096, fs.getDefaultReplication(file4), 1024L, null)-->Line_45 $$ out4.write(bytes)[ FD ]
Line_111 $$ if (!isWebHDFS) -->Line_112 $$ Assert.assertEquals(5 * bytes.length, count)[ CD ]
Line_19 $$ final URI uri = dfs.getUri()-->Line_20 $$ assertTrue(HdfsUtils.isHealthy(uri))[ FD ]
Line_14 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build()-->Line_147 $$ cluster.shutdown()[ FD ]
Line_22 $$ final Path file1 = new Path(dir, "foo")-->Line_24 $$ final FileStatus s1 = fs.getFileStatus(file1)[ FD ]
Line_28 $$ final byte[] bytes = new byte[1000]-->Line_31 $$ out4.write(bytes)[ FD ]
Line_24 $$ final FileStatus s1 = fs.getFileStatus(file1)-->Line_63 $$ assertEquals(s1.getLen(), count)[ FD ]
Line_2 $$ public static void namenodeRestartTest(final Configuration conf, final boolean isWebHDFS) throws Exception -->Line_6 $$ if (isWebHDFS) [ CD ]
Line_24 $$ final FileStatus s1 = fs.getFileStatus(file1)-->Line_99 $$ assertEquals(s1.getLen(), fs.getFileStatus(file3).getLen())[ FD ]
Line_13 $$ final short numDatanodes = 3-->Line_134 $$ DFSTestUtil.createFile(fs, file2, length, numDatanodes, 20120406L)[ FD ]
Line_13 $$ final short numDatanodes = 3-->Line_23 $$ DFSTestUtil.createFile(fs, file1, length, numDatanodes, 20120406L)[ FD ]
Line_2 $$ public static void namenodeRestartTest(final Configuration conf, final boolean isWebHDFS) throws Exception -->Line_111 $$ if (!isWebHDFS) [ FD ]
Line_13 $$ final short numDatanodes = 3-->Line_75 $$ DFSTestUtil.createFile(fs, file3, length, numDatanodes, 20120406L)[ FD ]
Line_74 $$ final FileSystem fs = createFsWithDifferentUsername(conf, isWebHDFS)-->Line_75 $$ DFSTestUtil.createFile(fs, file3, length, numDatanodes, 20120406L)[ FD ]
Line_2 $$ public static void namenodeRestartTest(final Configuration conf, final boolean isWebHDFS) throws Exception -->Line_11 $$ conf.setInt(DFSConfigKeys.DFS_NAMENODE_SAFEMODE_MIN_DATANODES_KEY, 1)[ FD ]
Line_43 $$ if (!isWebHDFS) -->Line_44 $$ out4.write(bytes)[ CD ]
Line_60 $$ int count = 0-->Line_109 $$ Assert.assertEquals(String.format("count=%d", count), bytes[count % bytes.length], (byte) r)[ FD ]
Line_24 $$ final FileStatus s1 = fs.getFileStatus(file1)-->Line_96 $$ assertEquals(s1, s2)[ FD ]
Line_27 $$ final FSDataOutputStream out4 = fs.create(file4, false, 4096, fs.getDefaultReplication(file4), 1024L, null)-->Line_35 $$ out4.hflush()[ FD ]
Line_2 $$ public static void namenodeRestartTest(final Configuration conf, final boolean isWebHDFS) throws Exception -->Line_3 $$ ((Log4JLogger) DFSClient.LOG).getLogger().setLevel(Level.ALL)[ CD ]
Line_28 $$ final byte[] bytes = new byte[1000]-->Line_30 $$ out4.write(bytes)[ FD ]
Line_28 $$ final byte[] bytes = new byte[1000]-->Line_45 $$ out4.write(bytes)[ FD ]
Line_14 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build()-->Line_17 $$ final DistributedFileSystem dfs = cluster.getFileSystem()[ FD ]
Line_22 $$ final Path file1 = new Path(dir, "foo")-->Line_100 $$ assertEquals(fs.getFileChecksum(file1), fs.getFileChecksum(file3))[ FD ]
Line_4 $$ final List<Exception> exceptions = new ArrayList<Exception>()-->Line_91 $$ exceptions.add(e)[ FD ]
Line_43 $$ if (!isWebHDFS) -->Line_46 $$ out4.write(bytes)[ CD ]
Line_14 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build()-->Line_16 $$ cluster.waitActive()[ FD ]
Line_26 $$ final Path file4 = new Path(dir, "file4")-->Line_106 $$ final FSDataInputStream in = fs.open(file4)[ FD ]
Line_18 $$ final FileSystem fs = isWebHDFS ? WebHdfsTestUtil.getWebHdfsFileSystem(conf, WebHdfsFileSystem.SCHEME) : dfs-->Line_140 $$ fs.setPermission(nonExisting, new FsPermission((short) 0))[ FD ]
Line_32 $$ if (isWebHDFS) -->Line_33 $$ out4.close()[ CD ]
Line_27 $$ final FSDataOutputStream out4 = fs.create(file4, false, 4096, fs.getDefaultReplication(file4), 1024L, null)-->Line_44 $$ out4.write(bytes)[ FD ]
Line_2 $$ public static void namenodeRestartTest(final Configuration conf, final boolean isWebHDFS) throws Exception -->Line_14 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build()[ CD ]
Line_18 $$ final FileSystem fs = isWebHDFS ? WebHdfsTestUtil.getWebHdfsFileSystem(conf, WebHdfsFileSystem.SCHEME) : dfs-->Line_27 $$ final FSDataOutputStream out4 = fs.create(file4, false, 4096, fs.getDefaultReplication(file4), 1024L, null)[ FD ]
Line_60 $$ int count = 0-->Line_114 $$ Assert.assertEquals(2 * bytes.length, count)[ FD ]
Line_40 $$ final Thread file4thread = new Thread(new Runnable() -->Line_54 $$ file4thread.start()[ FD ]
Line_14 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build()-->Line_87 $$ cluster.restartNameNode(0, false)[ FD ]
Line_58 $$ final FileSystem fs = createFsWithDifferentUsername(conf, isWebHDFS)-->Line_100 $$ assertEquals(fs.getFileChecksum(file1), fs.getFileChecksum(file3))[ FD ]
Line_74 $$ final FileSystem fs = createFsWithDifferentUsername(conf, isWebHDFS)-->Line_95 $$ final FileStatus s2 = fs.getFileStatus(file1)[ FD ]
Line_74 $$ final FileSystem fs = createFsWithDifferentUsername(conf, isWebHDFS)-->Line_106 $$ final FSDataInputStream in = fs.open(file4)[ FD ]
Line_60 $$ int count = 0-->Line_63 $$ assertEquals(s1.getLen(), count)[ FD ]
Line_19 $$ final URI uri = dfs.getUri()-->Line_127 $$ assertTrue(HdfsUtils.isHealthy(uri))[ FD ]
Line_2 $$ public static void namenodeRestartTest(final Configuration conf, final boolean isWebHDFS) throws Exception -->Line_11 $$ conf.setInt(DFSConfigKeys.DFS_NAMENODE_SAFEMODE_MIN_DATANODES_KEY, 1)[ CD ]
Line_4 $$ final List<Exception> exceptions = new ArrayList<Exception>()-->Line_77 $$ exceptions.add(e)[ FD ]
Line_58 $$ final FileSystem fs = createFsWithDifferentUsername(conf, isWebHDFS)-->Line_95 $$ final FileStatus s2 = fs.getFileStatus(file1)[ FD ]
Line_2 $$ public static void namenodeRestartTest(final Configuration conf, final boolean isWebHDFS) throws Exception -->Line_12 $$ conf.setInt(MiniDFSCluster.DFS_NAMENODE_SAFEMODE_EXTENSION_TESTING_KEY, 5000)[ CD ]
Line_18 $$ final FileSystem fs = isWebHDFS ? WebHdfsTestUtil.getWebHdfsFileSystem(conf, WebHdfsFileSystem.SCHEME) : dfs-->Line_134 $$ DFSTestUtil.createFile(fs, file2, length, numDatanodes, 20120406L)[ FD ]
Line_28 $$ final byte[] bytes = new byte[1000]-->Line_44 $$ out4.write(bytes)[ FD ]
Line_22 $$ final Path file1 = new Path(dir, "foo")-->Line_59 $$ final FSDataInputStream in = fs.open(file1)[ FD ]
Line_2 $$ public static void namenodeRestartTest(final Configuration conf, final boolean isWebHDFS) throws Exception -->Line_9 $$ conf.setBoolean(DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_KEY, true)[ FD ]
Line_19 $$ final URI uri = dfs.getUri()-->Line_89 $$ assertTrue(HdfsUtils.isHealthy(uri))[ FD ]
Line_18 $$ final FileSystem fs = isWebHDFS ? WebHdfsTestUtil.getWebHdfsFileSystem(conf, WebHdfsFileSystem.SCHEME) : dfs-->Line_99 $$ assertEquals(s1.getLen(), fs.getFileStatus(file3).getLen())[ FD ]
Line_108 $$ for (int r; (r = in.read()) != -1; count++) -->Line_109 $$ Assert.assertEquals(String.format("count=%d", count), bytes[count % bytes.length], (byte) r)[ CD ]
Line_14 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build()-->Line_88 $$ cluster.waitActive()[ FD ]
Line_2 $$ public static void namenodeRestartTest(final Configuration conf, final boolean isWebHDFS) throws Exception -->Line_43 $$ if (!isWebHDFS) [ FD ]
Line_19 $$ final URI uri = dfs.getUri()-->Line_86 $$ assertFalse(HdfsUtils.isHealthy(uri))[ FD ]
Line_22 $$ final Path file1 = new Path(dir, "foo")-->Line_23 $$ DFSTestUtil.createFile(fs, file1, length, numDatanodes, 20120406L)[ FD ]
Line_17 $$ final DistributedFileSystem dfs = cluster.getFileSystem()-->Line_119 $$ dfs.setSafeMode(SafeModeAction.SAFEMODE_ENTER)[ FD ]
Line_58 $$ final FileSystem fs = createFsWithDifferentUsername(conf, isWebHDFS)-->Line_140 $$ fs.setPermission(nonExisting, new FsPermission((short) 0))[ FD ]
Line_4 $$ final List<Exception> exceptions = new ArrayList<Exception>()-->Line_104 $$ assertEmpty(exceptions)[ FD ]
Line_58 $$ final FileSystem fs = createFsWithDifferentUsername(conf, isWebHDFS)-->Line_75 $$ DFSTestUtil.createFile(fs, file3, length, numDatanodes, 20120406L)[ FD ]
Line_18 $$ final FileSystem fs = isWebHDFS ? WebHdfsTestUtil.getWebHdfsFileSystem(conf, WebHdfsFileSystem.SCHEME) : dfs-->Line_95 $$ final FileStatus s2 = fs.getFileStatus(file1)[ FD ]
Line_74 $$ final FileSystem fs = createFsWithDifferentUsername(conf, isWebHDFS)-->Line_135 $$ assertEquals(fs.getFileChecksum(file1), fs.getFileChecksum(file2))[ FD ]
Line_13 $$ final short numDatanodes = 3-->Line_14 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build()[ FD ]
Line_32 $$ if (isWebHDFS) -->Line_35 $$ out4.hflush()[ CD ]
Line_74 $$ final FileSystem fs = createFsWithDifferentUsername(conf, isWebHDFS)-->Line_134 $$ DFSTestUtil.createFile(fs, file2, length, numDatanodes, 20120406L)[ FD ]
Line_19 $$ final URI uri = dfs.getUri()-->Line_118 $$ assertTrue(HdfsUtils.isHealthy(uri))[ FD ]
Line_74 $$ final FileSystem fs = createFsWithDifferentUsername(conf, isWebHDFS)-->Line_100 $$ assertEquals(fs.getFileChecksum(file1), fs.getFileChecksum(file3))[ FD ]
Line_111 $$ if (!isWebHDFS) -->Line_114 $$ Assert.assertEquals(2 * bytes.length, count)[ CD ]
Line_19 $$ final URI uri = dfs.getUri()-->Line_37 $$ assertTrue(HdfsUtils.isHealthy(uri))[ FD ]
Line_24 $$ final FileStatus s1 = fs.getFileStatus(file1)-->Line_25 $$ assertEquals(length, s1.getLen())[ FD ]
Line_18 $$ final FileSystem fs = isWebHDFS ? WebHdfsTestUtil.getWebHdfsFileSystem(conf, WebHdfsFileSystem.SCHEME) : dfs-->Line_23 $$ DFSTestUtil.createFile(fs, file1, length, numDatanodes, 20120406L)[ FD ]
Line_2 $$ public static void namenodeRestartTest(final Configuration conf, final boolean isWebHDFS) throws Exception -->Line_12 $$ conf.setInt(MiniDFSCluster.DFS_NAMENODE_SAFEMODE_EXTENSION_TESTING_KEY, 5000)[ FD ]
Line_18 $$ final FileSystem fs = isWebHDFS ? WebHdfsTestUtil.getWebHdfsFileSystem(conf, WebHdfsFileSystem.SCHEME) : dfs-->Line_100 $$ assertEquals(fs.getFileChecksum(file1), fs.getFileChecksum(file3))[ FD ]
Line_4 $$ final List<Exception> exceptions = new ArrayList<Exception>()-->Line_102 $$ assertEmpty(exceptions)[ FD ]
Line_17 $$ final DistributedFileSystem dfs = cluster.getFileSystem()-->Line_19 $$ final URI uri = dfs.getUri()[ FD ]
Line_59 $$ final FSDataInputStream in = fs.open(file1)-->Line_108 $$ for (int r; (r = in.read()) != -1; count++) [ FD ]
Line_28 $$ final byte[] bytes = new byte[1000]-->Line_46 $$ out4.write(bytes)[ FD ]
Line_60 $$ int count = 0-->Line_61 $$ for (; in.read() != -1; count++) [ FD ]
Line_28 $$ final byte[] bytes = new byte[1000]-->Line_29 $$ new Random().nextBytes(bytes)[ FD ]
Line_14 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build()-->Line_38 $$ cluster.shutdownNameNode(0)[ FD ]
Line_59 $$ final FSDataInputStream in = fs.open(file1)-->Line_116 $$ in.close()[ FD ]
Line_21 $$ final long length = 1L << 20-->Line_75 $$ DFSTestUtil.createFile(fs, file3, length, numDatanodes, 20120406L)[ FD ]
Line_4 $$ final List<Exception> exceptions = new ArrayList<Exception>()-->Line_98 $$ assertEmpty(exceptions)[ FD ]
Line_27 $$ final FSDataOutputStream out4 = fs.create(file4, false, 4096, fs.getDefaultReplication(file4), 1024L, null)-->Line_33 $$ out4.close()[ FD ]
Line_26 $$ final Path file4 = new Path(dir, "file4")-->Line_27 $$ final FSDataOutputStream out4 = fs.create(file4, false, 4096, fs.getDefaultReplication(file4), 1024L, null)[ FD ]
Line_21 $$ final long length = 1L << 20-->Line_23 $$ DFSTestUtil.createFile(fs, file1, length, numDatanodes, 20120406L)[ FD ]
Line_21 $$ final long length = 1L << 20-->Line_25 $$ assertEquals(length, s1.getLen())[ FD ]
Line_2 $$ public static void namenodeRestartTest(final Configuration conf, final boolean isWebHDFS) throws Exception -->Line_13 $$ final short numDatanodes = 3[ CD ]
Line_27 $$ final FSDataOutputStream out4 = fs.create(file4, false, 4096, fs.getDefaultReplication(file4), 1024L, null)-->Line_31 $$ out4.write(bytes)[ FD ]
Line_4 $$ final List<Exception> exceptions = new ArrayList<Exception>()-->Line_50 $$ exceptions.add(e)[ FD ]
Line_2 $$ public static void namenodeRestartTest(final Configuration conf, final boolean isWebHDFS) throws Exception -->Line_74 $$ final FileSystem fs = createFsWithDifferentUsername(conf, isWebHDFS)[ FD ]
Line_19 $$ final URI uri = dfs.getUri()-->Line_136 $$ assertTrue(HdfsUtils.isHealthy(uri))[ FD ]
Line_2 $$ public static void namenodeRestartTest(final Configuration conf, final boolean isWebHDFS) throws Exception -->Line_4 $$ final List<Exception> exceptions = new ArrayList<Exception>()[ CD ]
Line_27 $$ final FSDataOutputStream out4 = fs.create(file4, false, 4096, fs.getDefaultReplication(file4), 1024L, null)-->Line_30 $$ out4.write(bytes)[ FD ]
Line_43 $$ if (!isWebHDFS) -->Line_47 $$ out4.close()[ CD ]
Line_27 $$ final FSDataOutputStream out4 = fs.create(file4, false, 4096, fs.getDefaultReplication(file4), 1024L, null)-->Line_46 $$ out4.write(bytes)[ FD ]
Line_2 $$ public static void namenodeRestartTest(final Configuration conf, final boolean isWebHDFS) throws Exception -->Line_5 $$ final Path dir = new Path("/testNamenodeRestart")[ CD ]
Line_4 $$ final List<Exception> exceptions = new ArrayList<Exception>()-->Line_65 $$ exceptions.add(e)[ FD ]
Line_74 $$ final FileSystem fs = createFsWithDifferentUsername(conf, isWebHDFS)-->Line_140 $$ fs.setPermission(nonExisting, new FsPermission((short) 0))[ FD ]
Line_58 $$ final FileSystem fs = createFsWithDifferentUsername(conf, isWebHDFS)-->Line_59 $$ final FSDataInputStream in = fs.open(file1)[ FD ]
Line_22 $$ final Path file1 = new Path(dir, "foo")-->Line_135 $$ assertEquals(fs.getFileChecksum(file1), fs.getFileChecksum(file2))[ FD ]
Line_2 $$ public static void namenodeRestartTest(final Configuration conf, final boolean isWebHDFS) throws Exception -->Line_58 $$ final FileSystem fs = createFsWithDifferentUsername(conf, isWebHDFS)[ FD ]
Line_58 $$ final FileSystem fs = createFsWithDifferentUsername(conf, isWebHDFS)-->Line_134 $$ DFSTestUtil.createFile(fs, file2, length, numDatanodes, 20120406L)[ FD ]
Line_58 $$ final FileSystem fs = createFsWithDifferentUsername(conf, isWebHDFS)-->Line_135 $$ assertEquals(fs.getFileChecksum(file1), fs.getFileChecksum(file2))[ FD ]
Line_19 $$ final URI uri = dfs.getUri()-->Line_39 $$ assertFalse(HdfsUtils.isHealthy(uri))[ FD ]
