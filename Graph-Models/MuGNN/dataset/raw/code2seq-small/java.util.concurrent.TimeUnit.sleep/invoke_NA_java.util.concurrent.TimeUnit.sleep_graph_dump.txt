Line_5 $$ if (i > 0) -->Line_7 $$ if (delay > 0) [ CD ]
Line_2 $$ public <R> R invoke(Callable<R> task) throws Exception -->Line_3 $$ Exception exception = null[ CD ]
Line_4 $$ for (int i = 0; i < this.backOffIntervals.length; ++i) -->Line_5 $$ if (i > 0) [ FD ]
Line_4 $$ for (int i = 0; i < this.backOffIntervals.length; ++i) -->Line_24 $$ LOGGER.debugf(exception, "Attempt #%d failed", i + 1)[ CD ]
Line_6 $$ long delay = this.backOffIntervals[i]-->Line_7 $$ if (delay > 0) [ FD ]
Line_2 $$ public <R> R invoke(Callable<R> task) throws Exception -->Line_20 $$ return task.call()[ FD ]
Line_7 $$ if (delay > 0) -->Line_14 $$ Thread.yield()[ CD ]
Line_22 $$ exception = e-->Line_24 $$ LOGGER.debugf(exception, "Attempt #%d failed", i + 1)[ FD ]
Line_6 $$ long delay = this.backOffIntervals[i]-->Line_9 $$ this.unit.sleep(delay)[ FD ]
Line_2 $$ public <R> R invoke(Callable<R> task) throws Exception -->Line_4 $$ for (int i = 0; i < this.backOffIntervals.length; ++i) [ CD ]
Line_5 $$ if (i > 0) -->Line_16 $$ if (Thread.currentThread().isInterrupted())[ CD ]
Line_3 $$ Exception exception = null-->Line_22 $$ exception = e[ FD ]
Line_5 $$ if (i > 0) -->Line_6 $$ long delay = this.backOffIntervals[i][ CD ]
Line_4 $$ for (int i = 0; i < this.backOffIntervals.length; ++i) -->Line_5 $$ if (i > 0) [ CD ]
Line_3 $$ Exception exception = null-->Line_24 $$ LOGGER.debugf(exception, "Attempt #%d failed", i + 1)[ FD ]
