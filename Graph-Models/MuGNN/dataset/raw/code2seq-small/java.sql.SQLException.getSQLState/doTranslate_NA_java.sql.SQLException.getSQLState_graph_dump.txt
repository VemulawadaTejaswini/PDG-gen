Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_69 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_85 $$ if (this.sqlErrorCodes != null && this.sqlErrorCodes.isUseSqlStateForTranslation()) -->Line_88 $$ codes = "Error code '" + sqlEx.getErrorCode() + "'"[ CD ]
Line_8 $$ sqlEx = nestedSqlEx-->Line_67 $$ return new DataAccessResourceFailureException(buildMessage(task, sql, sqlEx), sqlEx)[ FD ]
Line_27 $$ errorCode = sqlEx.getSQLState()-->Line_71 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getCannotAcquireLockCodes(), errorCode) >= 0) [ FD ]
Line_26 $$ if (this.sqlErrorCodes.isUseSqlStateForTranslation()) -->Line_30 $$ while (current.getErrorCode() == 0 && current.getCause() instanceof SQLException) [ CD ]
Line_26 $$ if (this.sqlErrorCodes.isUseSqlStateForTranslation()) -->Line_33 $$ errorCode = Integer.toString(current.getErrorCode())[ CD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_58 $$ return new DuplicateKeyException(buildMessage(task, sql, sqlEx), sqlEx)[ FD ]
Line_5 $$ SQLException nestedSqlEx = sqlEx.getNextException()-->Line_8 $$ sqlEx = nestedSqlEx[ FD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_18 $$ DataAccessException customDex = customTranslator.translate(task, sql, sqlEx)[ FD ]
Line_31 $$ current = (SQLException) current.getCause()-->Line_30 $$ while (current.getErrorCode() == 0 && current.getCause() instanceof SQLException) [ FD ]
Line_33 $$ errorCode = Integer.toString(current.getErrorCode())-->Line_53 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getInvalidResultSetAccessCodes(), errorCode) >= 0) [ FD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_4 $$ if (sqlEx instanceof BatchUpdateException && sqlEx.getNextException() != null) [ CD ]
Line_8 $$ sqlEx = nestedSqlEx-->Line_64 $$ return new PermissionDeniedDataAccessException(buildMessage(task, sql, sqlEx), sqlEx)[ FD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_43 $$ logTranslation(task, sql, sqlEx, true)[ FD ]
Line_25 $$ String errorCode-->Line_74 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDeadlockLoserCodes(), errorCode) >= 0) [ FD ]
Line_6 $$ if (nestedSqlEx.getErrorCode() > 0 || nestedSqlEx.getSQLState() != null) -->Line_7 $$ logger.debug("Using nested SQLException from the BatchUpdateException")[ CD ]
Line_25 $$ String errorCode-->Line_65 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDataAccessResourceFailureCodes(), errorCode) >= 0) [ FD ]
Line_59 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDataIntegrityViolationCodes(), errorCode) >= 0) -->Line_62 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getPermissionDeniedCodes(), errorCode) >= 0) [ CD ]
Line_8 $$ sqlEx = nestedSqlEx-->Line_75 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_35 $$ if (errorCode != null) -->Line_36 $$ CustomSQLErrorCodesTranslation[] customTranslations = this.sqlErrorCodes.getCustomTranslations()[ CD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_92 $$ return null[ CD ]
Line_41 $$ DataAccessException customException = createCustomException(task, sql, sqlEx, customTranslation.getExceptionClass())-->Line_42 $$ if (customException != null) [ FD ]
Line_8 $$ sqlEx = nestedSqlEx-->Line_18 $$ DataAccessException customDex = customTranslator.translate(task, sql, sqlEx)[ FD ]
Line_50 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getBadSqlGrammarCodes(), errorCode) >= 0) -->Line_51 $$ logTranslation(task, sql, sqlEx, false)[ CD ]
Line_62 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getPermissionDeniedCodes(), errorCode) >= 0) -->Line_63 $$ logTranslation(task, sql, sqlEx, false)[ CD ]
Line_5 $$ SQLException nestedSqlEx = sqlEx.getNextException()-->Line_6 $$ if (nestedSqlEx.getErrorCode() > 0 || nestedSqlEx.getSQLState() != null) [ FD ]
Line_24 $$ if (this.sqlErrorCodes != null) -->Line_35 $$ if (errorCode != null) [ CD ]
Line_31 $$ current = (SQLException) current.getCause()-->Line_33 $$ errorCode = Integer.toString(current.getErrorCode())[ FD ]
Line_3 $$ SQLException sqlEx = ex-->Line_67 $$ return new DataAccessResourceFailureException(buildMessage(task, sql, sqlEx), sqlEx)[ FD ]
Line_62 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getPermissionDeniedCodes(), errorCode) >= 0) -->Line_65 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDataAccessResourceFailureCodes(), errorCode) >= 0) [ CD ]
Line_3 $$ SQLException sqlEx = ex-->Line_43 $$ logTranslation(task, sql, sqlEx, true)[ FD ]
Line_8 $$ sqlEx = nestedSqlEx-->Line_58 $$ return new DuplicateKeyException(buildMessage(task, sql, sqlEx), sqlEx)[ FD ]
Line_3 $$ SQLException sqlEx = ex-->Line_27 $$ errorCode = sqlEx.getSQLState()[ FD ]
Line_4 $$ if (sqlEx instanceof BatchUpdateException && sqlEx.getNextException() != null) -->Line_5 $$ SQLException nestedSqlEx = sqlEx.getNextException()[ CD ]
Line_74 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDeadlockLoserCodes(), errorCode) >= 0) -->Line_75 $$ logTranslation(task, sql, sqlEx, false)[ CD ]
Line_35 $$ if (errorCode != null) -->Line_50 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getBadSqlGrammarCodes(), errorCode) >= 0) [ CD ]
Line_27 $$ errorCode = sqlEx.getSQLState()-->Line_77 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getCannotSerializeTransactionCodes(), errorCode) >= 0) [ FD ]
Line_85 $$ if (this.sqlErrorCodes != null && this.sqlErrorCodes.isUseSqlStateForTranslation()) -->Line_86 $$ codes = "SQL state '" + sqlEx.getSQLState() + "', error code '" + sqlEx.getErrorCode()[ CD ]
Line_3 $$ SQLException sqlEx = ex-->Line_66 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_12 $$ if (dex != null) [ CD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_57 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_65 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDataAccessResourceFailureCodes(), errorCode) >= 0) -->Line_68 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getTransientDataAccessResourceCodes(), errorCode) >= 0) [ CD ]
Line_83 $$ if (logger.isDebugEnabled()) -->Line_90 $$ logger.debug("Unable to translate SQLException with " + codes + ", will now try the fallback translator")[ CD ]
Line_24 $$ if (this.sqlErrorCodes != null) -->Line_26 $$ if (this.sqlErrorCodes.isUseSqlStateForTranslation()) [ CD ]
Line_29 $$ SQLException current = sqlEx-->Line_30 $$ while (current.getErrorCode() == 0 && current.getCause() instanceof SQLException) [ FD ]
Line_24 $$ if (this.sqlErrorCodes != null) -->Line_25 $$ String errorCode[ CD ]
Line_3 $$ SQLException sqlEx = ex-->Line_60 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_74 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDeadlockLoserCodes(), errorCode) >= 0) -->Line_77 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getCannotSerializeTransactionCodes(), errorCode) >= 0) [ CD ]
Line_71 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getCannotAcquireLockCodes(), errorCode) >= 0) -->Line_72 $$ logTranslation(task, sql, sqlEx, false)[ CD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_61 $$ return new DataIntegrityViolationException(buildMessage(task, sql, sqlEx), sqlEx)[ FD ]
Line_40 $$ if (customTranslation.getExceptionClass() != null) -->Line_42 $$ if (customException != null) [ CD ]
Line_8 $$ sqlEx = nestedSqlEx-->Line_57 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_54 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_77 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getCannotSerializeTransactionCodes(), errorCode) >= 0) -->Line_79 $$ return new CannotSerializeTransactionException(buildMessage(task, sql, sqlEx), sqlEx)[ CD ]
Line_27 $$ errorCode = sqlEx.getSQLState()-->Line_50 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getBadSqlGrammarCodes(), errorCode) >= 0) [ FD ]
Line_25 $$ String errorCode-->Line_77 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getCannotSerializeTransactionCodes(), errorCode) >= 0) [ FD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_15 $$ if (this.sqlErrorCodes != null) [ CD ]
Line_8 $$ sqlEx = nestedSqlEx-->Line_51 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_6 $$ if (nestedSqlEx.getErrorCode() > 0 || nestedSqlEx.getSQLState() != null) -->Line_8 $$ sqlEx = nestedSqlEx[ CD ]
Line_53 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getInvalidResultSetAccessCodes(), errorCode) >= 0) -->Line_56 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDuplicateKeyCodes(), errorCode) >= 0) [ CD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_75 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_11 $$ DataAccessException dex = customTranslate(task, sql, sqlEx)[ FD ]
Line_3 $$ SQLException sqlEx = ex-->Line_41 $$ DataAccessException customException = createCustomException(task, sql, sqlEx, customTranslation.getExceptionClass())[ FD ]
Line_27 $$ errorCode = sqlEx.getSQLState()-->Line_65 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDataAccessResourceFailureCodes(), errorCode) >= 0) [ FD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_66 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_68 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getTransientDataAccessResourceCodes(), errorCode) >= 0) -->Line_69 $$ logTranslation(task, sql, sqlEx, false)[ CD ]
Line_38 $$ for (CustomSQLErrorCodesTranslation customTranslation : customTranslations) -->Line_39 $$ if (Arrays.binarySearch(customTranslation.getErrorCodes(), errorCode) >= 0) [ FD ]
Line_18 $$ DataAccessException customDex = customTranslator.translate(task, sql, sqlEx)-->Line_19 $$ if (customDex != null) [ FD ]
Line_16 $$ SQLExceptionTranslator customTranslator = this.sqlErrorCodes.getCustomSqlExceptionTranslator()-->Line_18 $$ DataAccessException customDex = customTranslator.translate(task, sql, sqlEx)[ FD ]
Line_27 $$ errorCode = sqlEx.getSQLState()-->Line_39 $$ if (Arrays.binarySearch(customTranslation.getErrorCodes(), errorCode) >= 0) [ FD ]
Line_33 $$ errorCode = Integer.toString(current.getErrorCode())-->Line_77 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getCannotSerializeTransactionCodes(), errorCode) >= 0) [ FD ]
Line_11 $$ DataAccessException dex = customTranslate(task, sql, sqlEx)-->Line_12 $$ if (dex != null) [ FD ]
Line_25 $$ String errorCode-->Line_39 $$ if (Arrays.binarySearch(customTranslation.getErrorCodes(), errorCode) >= 0) [ FD ]
Line_25 $$ String errorCode-->Line_59 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDataIntegrityViolationCodes(), errorCode) >= 0) [ FD ]
Line_3 $$ SQLException sqlEx = ex-->Line_69 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_83 $$ if (logger.isDebugEnabled()) -->Line_85 $$ if (this.sqlErrorCodes != null && this.sqlErrorCodes.isUseSqlStateForTranslation()) [ CD ]
Line_36 $$ CustomSQLErrorCodesTranslation[] customTranslations = this.sqlErrorCodes.getCustomTranslations()-->Line_37 $$ if (customTranslations != null) [ FD ]
Line_25 $$ String errorCode-->Line_56 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDuplicateKeyCodes(), errorCode) >= 0) [ FD ]
Line_83 $$ if (logger.isDebugEnabled()) -->Line_84 $$ String codes[ CD ]
Line_16 $$ SQLExceptionTranslator customTranslator = this.sqlErrorCodes.getCustomSqlExceptionTranslator()-->Line_17 $$ if (customTranslator != null) [ FD ]
Line_8 $$ sqlEx = nestedSqlEx-->Line_88 $$ codes = "Error code '" + sqlEx.getErrorCode() + "'"[ FD ]
Line_27 $$ errorCode = sqlEx.getSQLState()-->Line_59 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDataIntegrityViolationCodes(), errorCode) >= 0) [ FD ]
Line_8 $$ sqlEx = nestedSqlEx-->Line_41 $$ DataAccessException customException = createCustomException(task, sql, sqlEx, customTranslation.getExceptionClass())[ FD ]
Line_8 $$ sqlEx = nestedSqlEx-->Line_54 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_8 $$ sqlEx = nestedSqlEx-->Line_69 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_3 $$ SQLException sqlEx = ex-->Line_72 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_25 $$ String errorCode-->Line_27 $$ errorCode = sqlEx.getSQLState()[ FD ]
Line_3 $$ SQLException sqlEx = ex-->Line_76 $$ return new DeadlockLoserDataAccessException(buildMessage(task, sql, sqlEx), sqlEx)[ FD ]
Line_26 $$ if (this.sqlErrorCodes.isUseSqlStateForTranslation()) -->Line_29 $$ SQLException current = sqlEx[ CD ]
Line_3 $$ SQLException sqlEx = ex-->Line_64 $$ return new PermissionDeniedDataAccessException(buildMessage(task, sql, sqlEx), sqlEx)[ FD ]
Line_15 $$ if (this.sqlErrorCodes != null) -->Line_17 $$ if (customTranslator != null) [ CD ]
Line_33 $$ errorCode = Integer.toString(current.getErrorCode())-->Line_35 $$ if (errorCode != null) [ FD ]
Line_3 $$ SQLException sqlEx = ex-->Line_70 $$ return new TransientDataAccessResourceException(buildMessage(task, sql, sqlEx), sqlEx)[ FD ]
Line_8 $$ sqlEx = nestedSqlEx-->Line_43 $$ logTranslation(task, sql, sqlEx, true)[ FD ]
Line_8 $$ sqlEx = nestedSqlEx-->Line_76 $$ return new DeadlockLoserDataAccessException(buildMessage(task, sql, sqlEx), sqlEx)[ FD ]
Line_33 $$ errorCode = Integer.toString(current.getErrorCode())-->Line_62 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getPermissionDeniedCodes(), errorCode) >= 0) [ FD ]
Line_65 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDataAccessResourceFailureCodes(), errorCode) >= 0) -->Line_66 $$ logTranslation(task, sql, sqlEx, false)[ CD ]
Line_39 $$ if (Arrays.binarySearch(customTranslation.getErrorCodes(), errorCode) >= 0) -->Line_40 $$ if (customTranslation.getExceptionClass() != null) [ CD ]
Line_25 $$ String errorCode-->Line_68 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getTransientDataAccessResourceCodes(), errorCode) >= 0) [ FD ]
Line_25 $$ String errorCode-->Line_71 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getCannotAcquireLockCodes(), errorCode) >= 0) [ FD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_76 $$ return new DeadlockLoserDataAccessException(buildMessage(task, sql, sqlEx), sqlEx)[ FD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_70 $$ return new TransientDataAccessResourceException(buildMessage(task, sql, sqlEx), sqlEx)[ FD ]
Line_17 $$ if (customTranslator != null) -->Line_19 $$ if (customDex != null) [ CD ]
Line_3 $$ SQLException sqlEx = ex-->Line_4 $$ if (sqlEx instanceof BatchUpdateException && sqlEx.getNextException() != null) [ FD ]
Line_71 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getCannotAcquireLockCodes(), errorCode) >= 0) -->Line_73 $$ return new CannotAcquireLockException(buildMessage(task, sql, sqlEx), sqlEx)[ CD ]
Line_3 $$ SQLException sqlEx = ex-->Line_79 $$ return new CannotSerializeTransactionException(buildMessage(task, sql, sqlEx), sqlEx)[ FD ]
Line_8 $$ sqlEx = nestedSqlEx-->Line_66 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_8 $$ sqlEx = nestedSqlEx-->Line_60 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_42 $$ if (customException != null) -->Line_43 $$ logTranslation(task, sql, sqlEx, true)[ CD ]
Line_25 $$ String errorCode-->Line_35 $$ if (errorCode != null) [ FD ]
Line_33 $$ errorCode = Integer.toString(current.getErrorCode())-->Line_74 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDeadlockLoserCodes(), errorCode) >= 0) [ FD ]
Line_25 $$ String errorCode-->Line_50 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getBadSqlGrammarCodes(), errorCode) >= 0) [ FD ]
Line_3 $$ SQLException sqlEx = ex-->Line_57 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_26 $$ if (this.sqlErrorCodes.isUseSqlStateForTranslation()) -->Line_27 $$ errorCode = sqlEx.getSQLState()[ CD ]
Line_15 $$ if (this.sqlErrorCodes != null) -->Line_16 $$ SQLExceptionTranslator customTranslator = this.sqlErrorCodes.getCustomSqlExceptionTranslator()[ CD ]
Line_53 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getInvalidResultSetAccessCodes(), errorCode) >= 0) -->Line_55 $$ return new InvalidResultSetAccessException(task, sql, sqlEx)[ CD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_73 $$ return new CannotAcquireLockException(buildMessage(task, sql, sqlEx), sqlEx)[ FD ]
Line_50 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getBadSqlGrammarCodes(), errorCode) >= 0) -->Line_53 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getInvalidResultSetAccessCodes(), errorCode) >= 0) [ CD ]
Line_3 $$ SQLException sqlEx = ex-->Line_5 $$ SQLException nestedSqlEx = sqlEx.getNextException()[ FD ]
Line_56 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDuplicateKeyCodes(), errorCode) >= 0) -->Line_58 $$ return new DuplicateKeyException(buildMessage(task, sql, sqlEx), sqlEx)[ CD ]
Line_84 $$ String codes-->Line_88 $$ codes = "Error code '" + sqlEx.getErrorCode() + "'"[ FD ]
Line_35 $$ if (errorCode != null) -->Line_37 $$ if (customTranslations != null) [ CD ]
Line_84 $$ String codes-->Line_86 $$ codes = "SQL state '" + sqlEx.getSQLState() + "', error code '" + sqlEx.getErrorCode()[ FD ]
Line_8 $$ sqlEx = nestedSqlEx-->Line_86 $$ codes = "SQL state '" + sqlEx.getSQLState() + "', error code '" + sqlEx.getErrorCode()[ FD ]
Line_3 $$ SQLException sqlEx = ex-->Line_8 $$ sqlEx = nestedSqlEx[ FD ]
Line_33 $$ errorCode = Integer.toString(current.getErrorCode())-->Line_50 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getBadSqlGrammarCodes(), errorCode) >= 0) [ FD ]
Line_74 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDeadlockLoserCodes(), errorCode) >= 0) -->Line_76 $$ return new DeadlockLoserDataAccessException(buildMessage(task, sql, sqlEx), sqlEx)[ CD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_63 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_79 $$ return new CannotSerializeTransactionException(buildMessage(task, sql, sqlEx), sqlEx)[ FD ]
Line_86 $$ codes = "SQL state '" + sqlEx.getSQLState() + "', error code '" + sqlEx.getErrorCode()-->Line_88 $$ codes = "Error code '" + sqlEx.getErrorCode() + "'"[ FD ]
Line_30 $$ while (current.getErrorCode() == 0 && current.getCause() instanceof SQLException) -->Line_31 $$ current = (SQLException) current.getCause()[ CD ]
Line_33 $$ errorCode = Integer.toString(current.getErrorCode())-->Line_39 $$ if (Arrays.binarySearch(customTranslation.getErrorCodes(), errorCode) >= 0) [ FD ]
Line_68 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getTransientDataAccessResourceCodes(), errorCode) >= 0) -->Line_70 $$ return new TransientDataAccessResourceException(buildMessage(task, sql, sqlEx), sqlEx)[ CD ]
Line_40 $$ if (customTranslation.getExceptionClass() != null) -->Line_41 $$ DataAccessException customException = createCustomException(task, sql, sqlEx, customTranslation.getExceptionClass())[ CD ]
Line_3 $$ SQLException sqlEx = ex-->Line_58 $$ return new DuplicateKeyException(buildMessage(task, sql, sqlEx), sqlEx)[ FD ]
Line_8 $$ sqlEx = nestedSqlEx-->Line_61 $$ return new DataIntegrityViolationException(buildMessage(task, sql, sqlEx), sqlEx)[ FD ]
Line_33 $$ errorCode = Integer.toString(current.getErrorCode())-->Line_59 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDataIntegrityViolationCodes(), errorCode) >= 0) [ FD ]
Line_3 $$ SQLException sqlEx = ex-->Line_61 $$ return new DataIntegrityViolationException(buildMessage(task, sql, sqlEx), sqlEx)[ FD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_60 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_41 $$ DataAccessException customException = createCustomException(task, sql, sqlEx, customTranslation.getExceptionClass())[ FD ]
Line_25 $$ String errorCode-->Line_53 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getInvalidResultSetAccessCodes(), errorCode) >= 0) [ FD ]
Line_33 $$ errorCode = Integer.toString(current.getErrorCode())-->Line_65 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDataAccessResourceFailureCodes(), errorCode) >= 0) [ FD ]
Line_3 $$ SQLException sqlEx = ex-->Line_75 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_8 $$ sqlEx = nestedSqlEx-->Line_79 $$ return new CannotSerializeTransactionException(buildMessage(task, sql, sqlEx), sqlEx)[ FD ]
Line_42 $$ if (customException != null) -->Line_44 $$ return customException[ CD ]
Line_8 $$ sqlEx = nestedSqlEx-->Line_70 $$ return new TransientDataAccessResourceException(buildMessage(task, sql, sqlEx), sqlEx)[ FD ]
Line_3 $$ SQLException sqlEx = ex-->Line_78 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_53 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getInvalidResultSetAccessCodes(), errorCode) >= 0) -->Line_54 $$ logTranslation(task, sql, sqlEx, false)[ CD ]
Line_38 $$ for (CustomSQLErrorCodesTranslation customTranslation : customTranslations) -->Line_41 $$ DataAccessException customException = createCustomException(task, sql, sqlEx, customTranslation.getExceptionClass())[ FD ]
Line_56 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDuplicateKeyCodes(), errorCode) >= 0) -->Line_57 $$ logTranslation(task, sql, sqlEx, false)[ CD ]
Line_27 $$ errorCode = sqlEx.getSQLState()-->Line_35 $$ if (errorCode != null) [ FD ]
Line_59 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDataIntegrityViolationCodes(), errorCode) >= 0) -->Line_61 $$ return new DataIntegrityViolationException(buildMessage(task, sql, sqlEx), sqlEx)[ CD ]
Line_77 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getCannotSerializeTransactionCodes(), errorCode) >= 0) -->Line_78 $$ logTranslation(task, sql, sqlEx, false)[ CD ]
Line_19 $$ if (customDex != null) -->Line_20 $$ return customDex[ CD ]
Line_29 $$ SQLException current = sqlEx-->Line_33 $$ errorCode = Integer.toString(current.getErrorCode())[ FD ]
Line_3 $$ SQLException sqlEx = ex-->Line_63 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_8 $$ sqlEx = nestedSqlEx-->Line_63 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_3 $$ SQLException sqlEx = ex[ CD ]
Line_50 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getBadSqlGrammarCodes(), errorCode) >= 0) -->Line_52 $$ return new BadSqlGrammarException(task, sql, sqlEx)[ CD ]
Line_4 $$ if (sqlEx instanceof BatchUpdateException && sqlEx.getNextException() != null) -->Line_6 $$ if (nestedSqlEx.getErrorCode() > 0 || nestedSqlEx.getSQLState() != null) [ CD ]
Line_12 $$ if (dex != null) -->Line_13 $$ return dex[ CD ]
Line_27 $$ errorCode = sqlEx.getSQLState()-->Line_53 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getInvalidResultSetAccessCodes(), errorCode) >= 0) [ FD ]
Line_56 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDuplicateKeyCodes(), errorCode) >= 0) -->Line_59 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDataIntegrityViolationCodes(), errorCode) >= 0) [ CD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_67 $$ return new DataAccessResourceFailureException(buildMessage(task, sql, sqlEx), sqlEx)[ FD ]
Line_33 $$ errorCode = Integer.toString(current.getErrorCode())-->Line_71 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getCannotAcquireLockCodes(), errorCode) >= 0) [ FD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_11 $$ DataAccessException dex = customTranslate(task, sql, sqlEx)[ CD ]
Line_33 $$ errorCode = Integer.toString(current.getErrorCode())-->Line_68 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getTransientDataAccessResourceCodes(), errorCode) >= 0) [ FD ]
Line_27 $$ errorCode = sqlEx.getSQLState()-->Line_74 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDeadlockLoserCodes(), errorCode) >= 0) [ FD ]
Line_62 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getPermissionDeniedCodes(), errorCode) >= 0) -->Line_64 $$ return new PermissionDeniedDataAccessException(buildMessage(task, sql, sqlEx), sqlEx)[ CD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_78 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_83 $$ if (logger.isDebugEnabled()) [ CD ]
Line_8 $$ sqlEx = nestedSqlEx-->Line_73 $$ return new CannotAcquireLockException(buildMessage(task, sql, sqlEx), sqlEx)[ FD ]
Line_27 $$ errorCode = sqlEx.getSQLState()-->Line_56 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDuplicateKeyCodes(), errorCode) >= 0) [ FD ]
Line_8 $$ sqlEx = nestedSqlEx-->Line_11 $$ DataAccessException dex = customTranslate(task, sql, sqlEx)[ FD ]
Line_8 $$ sqlEx = nestedSqlEx-->Line_27 $$ errorCode = sqlEx.getSQLState()[ FD ]
Line_27 $$ errorCode = sqlEx.getSQLState()-->Line_62 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getPermissionDeniedCodes(), errorCode) >= 0) [ FD ]
Line_71 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getCannotAcquireLockCodes(), errorCode) >= 0) -->Line_74 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDeadlockLoserCodes(), errorCode) >= 0) [ CD ]
Line_3 $$ SQLException sqlEx = ex-->Line_51 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_3 $$ SQLException sqlEx = ex-->Line_86 $$ codes = "SQL state '" + sqlEx.getSQLState() + "', error code '" + sqlEx.getErrorCode()[ FD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_64 $$ return new PermissionDeniedDataAccessException(buildMessage(task, sql, sqlEx), sqlEx)[ FD ]
Line_3 $$ SQLException sqlEx = ex-->Line_73 $$ return new CannotAcquireLockException(buildMessage(task, sql, sqlEx), sqlEx)[ FD ]
Line_25 $$ String errorCode-->Line_33 $$ errorCode = Integer.toString(current.getErrorCode())[ FD ]
Line_25 $$ String errorCode-->Line_62 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getPermissionDeniedCodes(), errorCode) >= 0) [ FD ]
Line_3 $$ SQLException sqlEx = ex-->Line_18 $$ DataAccessException customDex = customTranslator.translate(task, sql, sqlEx)[ FD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_72 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_33 $$ errorCode = Integer.toString(current.getErrorCode())-->Line_56 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDuplicateKeyCodes(), errorCode) >= 0) [ FD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_51 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_3 $$ SQLException sqlEx = ex-->Line_54 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_59 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDataIntegrityViolationCodes(), errorCode) >= 0) -->Line_60 $$ logTranslation(task, sql, sqlEx, false)[ CD ]
Line_3 $$ SQLException sqlEx = ex-->Line_11 $$ DataAccessException dex = customTranslate(task, sql, sqlEx)[ FD ]
Line_38 $$ for (CustomSQLErrorCodesTranslation customTranslation : customTranslations) -->Line_40 $$ if (customTranslation.getExceptionClass() != null) [ FD ]
Line_8 $$ sqlEx = nestedSqlEx-->Line_72 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_17 $$ if (customTranslator != null) -->Line_18 $$ DataAccessException customDex = customTranslator.translate(task, sql, sqlEx)[ CD ]
Line_29 $$ SQLException current = sqlEx-->Line_31 $$ current = (SQLException) current.getCause()[ FD ]
Line_65 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getDataAccessResourceFailureCodes(), errorCode) >= 0) -->Line_67 $$ return new DataAccessResourceFailureException(buildMessage(task, sql, sqlEx), sqlEx)[ CD ]
Line_3 $$ SQLException sqlEx = ex-->Line_88 $$ codes = "Error code '" + sqlEx.getErrorCode() + "'"[ FD ]
Line_27 $$ errorCode = sqlEx.getSQLState()-->Line_68 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getTransientDataAccessResourceCodes(), errorCode) >= 0) [ FD ]
Line_8 $$ sqlEx = nestedSqlEx-->Line_78 $$ logTranslation(task, sql, sqlEx, false)[ FD ]
Line_68 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getTransientDataAccessResourceCodes(), errorCode) >= 0) -->Line_71 $$ if (Arrays.binarySearch(this.sqlErrorCodes.getCannotAcquireLockCodes(), errorCode) >= 0) [ CD ]
Line_27 $$ errorCode = sqlEx.getSQLState()-->Line_33 $$ errorCode = Integer.toString(current.getErrorCode())[ FD ]
Line_2 $$ protected DataAccessException doTranslate(String task, String sql, SQLException ex) -->Line_24 $$ if (this.sqlErrorCodes != null) [ CD ]
