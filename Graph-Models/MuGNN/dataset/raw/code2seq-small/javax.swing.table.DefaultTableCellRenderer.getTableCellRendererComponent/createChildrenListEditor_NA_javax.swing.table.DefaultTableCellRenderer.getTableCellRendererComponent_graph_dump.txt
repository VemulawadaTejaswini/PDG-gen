Line_40 $$ int selectedRow = myTable.getSelectedRow()-->Line_42 $$ getTableModel().removeRow(selectedRow)[ FD ]
Line_30 $$ return ToolbarDecorator.createDecorator(myTable).setAddAction(new AnActionButtonRunnable() -->Line_40 $$ int selectedRow = myTable.getSelectedRow()[ CD ]
Line_30 $$ return ToolbarDecorator.createDecorator(myTable).setAddAction(new AnActionButtonRunnable() -->Line_49 $$ TableUtil.moveSelectedItemsUp(myTable)[ CD ]
Line_2 $$ private JComponent createChildrenListEditor(@NotNull Disposable parentDisposable) -->Line_20 $$ exprColumn.setCellRenderer(new DefaultTableCellRenderer() [ CD ]
Line_30 $$ return ToolbarDecorator.createDecorator(myTable).setAddAction(new AnActionButtonRunnable() -->Line_34 $$ tableModel.addRow("", DebuggerUtils.getInstance().createExpressionWithImports(""))[ CD ]
Line_30 $$ return ToolbarDecorator.createDecorator(myTable).setAddAction(new AnActionButtonRunnable() -->Line_55 $$ TableUtil.moveSelectedItemsDown(myTable)[ CD ]
Line_7 $$ exprColumn.setCellEditor(new AbstractTableCellEditor() -->Line_11 $$ return myListChildrenEditor.getText()[ CD ]
Line_20 $$ exprColumn.setCellRenderer(new DefaultTableCellRenderer() -->Line_27 $$ return super.getTableCellRendererComponent(table, text, isSelected, hasFocus, row, column)[ FD ]
Line_7 $$ exprColumn.setCellEditor(new AbstractTableCellEditor() -->Line_17 $$ return myListChildrenEditor[ CD ]
Line_20 $$ exprColumn.setCellRenderer(new DefaultTableCellRenderer() -->Line_26 $$ final String text = (textWithImports != null) ? textWithImports.getText() : ""[ CD ]
Line_30 $$ return ToolbarDecorator.createDecorator(myTable).setAddAction(new AnActionButtonRunnable() -->Line_41 $$ if (selectedRow >= 0 && selectedRow < myTable.getRowCount()) [ CD ]
Line_2 $$ private JComponent createChildrenListEditor(@NotNull Disposable parentDisposable) -->Line_3 $$ final MyTableModel tableModel = new MyTableModel()[ CD ]
Line_6 $$ final TableColumn exprColumn = myTable.getColumnModel().getColumn(EXPRESSION_TABLE_COLUMN)-->Line_20 $$ exprColumn.setCellRenderer(new DefaultTableCellRenderer() [ FD ]
Line_20 $$ exprColumn.setCellRenderer(new DefaultTableCellRenderer() -->Line_25 $$ final TextWithImports textWithImports = (TextWithImports) value[ CD ]
Line_3 $$ final MyTableModel tableModel = new MyTableModel()-->Line_34 $$ tableModel.addRow("", DebuggerUtils.getInstance().createExpressionWithImports(""))[ FD ]
Line_41 $$ if (selectedRow >= 0 && selectedRow < myTable.getRowCount()) -->Line_42 $$ getTableModel().removeRow(selectedRow)[ CD ]
Line_25 $$ final TextWithImports textWithImports = (TextWithImports) value-->Line_26 $$ final String text = (textWithImports != null) ? textWithImports.getText() : ""[ FD ]
Line_26 $$ final String text = (textWithImports != null) ? textWithImports.getText() : ""-->Line_27 $$ return super.getTableCellRendererComponent(table, text, isSelected, hasFocus, row, column)[ FD ]
Line_6 $$ final TableColumn exprColumn = myTable.getColumnModel().getColumn(EXPRESSION_TABLE_COLUMN)-->Line_7 $$ exprColumn.setCellEditor(new AbstractTableCellEditor() [ FD ]
Line_2 $$ private JComponent createChildrenListEditor(@NotNull Disposable parentDisposable) -->Line_30 $$ return ToolbarDecorator.createDecorator(myTable).setAddAction(new AnActionButtonRunnable() [ CD ]
Line_20 $$ exprColumn.setCellRenderer(new DefaultTableCellRenderer() -->Line_27 $$ return super.getTableCellRendererComponent(table, text, isSelected, hasFocus, row, column)[ CD ]
Line_7 $$ exprColumn.setCellEditor(new AbstractTableCellEditor() -->Line_27 $$ return super.getTableCellRendererComponent(table, text, isSelected, hasFocus, row, column)[ FD ]
Line_2 $$ private JComponent createChildrenListEditor(@NotNull Disposable parentDisposable) -->Line_7 $$ exprColumn.setCellEditor(new AbstractTableCellEditor() [ CD ]
Line_2 $$ private JComponent createChildrenListEditor(@NotNull Disposable parentDisposable) -->Line_6 $$ final TableColumn exprColumn = myTable.getColumnModel().getColumn(EXPRESSION_TABLE_COLUMN)[ CD ]
Line_7 $$ exprColumn.setCellEditor(new AbstractTableCellEditor() -->Line_16 $$ myListChildrenEditor.setText((TextWithImports) value)[ CD ]
