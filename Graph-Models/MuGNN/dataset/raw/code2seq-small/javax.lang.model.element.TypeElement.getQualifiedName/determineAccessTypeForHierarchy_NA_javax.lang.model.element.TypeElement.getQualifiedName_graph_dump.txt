Line_19 $$ if (defaultAccessType != null) -->Line_22 $$ updateEmbeddableAccessType(searchedElement, context, defaultAccessType)[ CD ]
Line_30 $$ accessTypeInfo = new AccessTypeInformation(fqcn, null, defaultAccessType)-->Line_31 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ FD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_7 $$ context.logMessage(Diagnostic.Kind.OTHER, "AccessType for " + searchedElement.toString() + " found in cache: " + accessTypeInfo)[ FD ]
Line_5 $$ AccessTypeInformation accessTypeInfo = context.getAccessTypeInfo(fqcn)-->Line_13 $$ accessTypeInfo = new AccessTypeInformation(fqcn, forcedAccessType, null)[ FD ]
Line_18 $$ AccessType defaultAccessType = getAccessTypeInCaseElementIsRoot(searchedElement, context)-->Line_26 $$ defaultAccessType = getDefaultAccessForHierarchy(searchedElement, context)[ FD ]
Line_13 $$ accessTypeInfo = new AccessTypeInformation(fqcn, forcedAccessType, null)-->Line_21 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ FD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_14 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ FD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_18 $$ AccessType defaultAccessType = getAccessTypeInCaseElementIsRoot(searchedElement, context)[ CD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_3 $$ String fqcn = searchedElement.getQualifiedName().toString()[ FD ]
Line_26 $$ defaultAccessType = getDefaultAccessForHierarchy(searchedElement, context)-->Line_32 $$ updateEmbeddableAccessType(searchedElement, context, defaultAccessType)[ FD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_31 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ CD ]
Line_5 $$ AccessTypeInformation accessTypeInfo = context.getAccessTypeInfo(fqcn)-->Line_14 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ FD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_3 $$ String fqcn = searchedElement.getQualifiedName().toString()[ CD ]
Line_20 $$ accessTypeInfo = new AccessTypeInformation(fqcn, null, defaultAccessType)-->Line_30 $$ accessTypeInfo = new AccessTypeInformation(fqcn, null, defaultAccessType)[ FD ]
Line_10 $$ AccessType forcedAccessType = determineAnnotationSpecifiedAccessType(searchedElement)-->Line_11 $$ if (forcedAccessType != null) [ FD ]
Line_20 $$ accessTypeInfo = new AccessTypeInformation(fqcn, null, defaultAccessType)-->Line_21 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ FD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_15 $$ updateEmbeddableAccessType(searchedElement, context, forcedAccessType)[ FD ]
Line_5 $$ AccessTypeInformation accessTypeInfo = context.getAccessTypeInfo(fqcn)-->Line_20 $$ accessTypeInfo = new AccessTypeInformation(fqcn, null, defaultAccessType)[ FD ]
Line_18 $$ AccessType defaultAccessType = getAccessTypeInCaseElementIsRoot(searchedElement, context)-->Line_32 $$ updateEmbeddableAccessType(searchedElement, context, defaultAccessType)[ FD ]
Line_20 $$ accessTypeInfo = new AccessTypeInformation(fqcn, null, defaultAccessType)-->Line_31 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ FD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_32 $$ updateEmbeddableAccessType(searchedElement, context, defaultAccessType)[ FD ]
Line_11 $$ if (forcedAccessType != null) -->Line_15 $$ updateEmbeddableAccessType(searchedElement, context, forcedAccessType)[ CD ]
Line_10 $$ AccessType forcedAccessType = determineAnnotationSpecifiedAccessType(searchedElement)-->Line_15 $$ updateEmbeddableAccessType(searchedElement, context, forcedAccessType)[ FD ]
Line_27 $$ if (defaultAccessType == null) -->Line_28 $$ defaultAccessType = AccessType.PROPERTY[ CD ]
Line_11 $$ if (forcedAccessType != null) -->Line_13 $$ accessTypeInfo = new AccessTypeInformation(fqcn, forcedAccessType, null)[ CD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_4 $$ context.logMessage(Diagnostic.Kind.OTHER, "Determining access type for " + fqcn)[ CD ]
Line_18 $$ AccessType defaultAccessType = getAccessTypeInCaseElementIsRoot(searchedElement, context)-->Line_27 $$ if (defaultAccessType == null) [ FD ]
Line_18 $$ AccessType defaultAccessType = getAccessTypeInCaseElementIsRoot(searchedElement, context)-->Line_22 $$ updateEmbeddableAccessType(searchedElement, context, defaultAccessType)[ FD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_4 $$ context.logMessage(Diagnostic.Kind.OTHER, "Determining access type for " + fqcn)[ FD ]
Line_5 $$ AccessTypeInformation accessTypeInfo = context.getAccessTypeInfo(fqcn)-->Line_31 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ FD ]
Line_5 $$ AccessTypeInformation accessTypeInfo = context.getAccessTypeInfo(fqcn)-->Line_21 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ FD ]
Line_18 $$ AccessType defaultAccessType = getAccessTypeInCaseElementIsRoot(searchedElement, context)-->Line_19 $$ if (defaultAccessType != null) [ FD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_30 $$ accessTypeInfo = new AccessTypeInformation(fqcn, null, defaultAccessType)[ CD ]
Line_13 $$ accessTypeInfo = new AccessTypeInformation(fqcn, forcedAccessType, null)-->Line_31 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ FD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_32 $$ updateEmbeddableAccessType(searchedElement, context, defaultAccessType)[ CD ]
Line_3 $$ String fqcn = searchedElement.getQualifiedName().toString()-->Line_5 $$ AccessTypeInformation accessTypeInfo = context.getAccessTypeInfo(fqcn)[ FD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_5 $$ AccessTypeInformation accessTypeInfo = context.getAccessTypeInfo(fqcn)[ CD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_19 $$ if (defaultAccessType != null) [ CD ]
Line_3 $$ String fqcn = searchedElement.getQualifiedName().toString()-->Line_21 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ FD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_18 $$ AccessType defaultAccessType = getAccessTypeInCaseElementIsRoot(searchedElement, context)[ FD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_23 $$ setDefaultAccessTypeForMappedSuperclassesInHierarchy(searchedElement, defaultAccessType, context)[ FD ]
Line_19 $$ if (defaultAccessType != null) -->Line_21 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ CD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_26 $$ defaultAccessType = getDefaultAccessForHierarchy(searchedElement, context)[ FD ]
Line_3 $$ String fqcn = searchedElement.getQualifiedName().toString()-->Line_14 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ FD ]
Line_6 $$ if (accessTypeInfo != null && accessTypeInfo.isAccessTypeResolved()) -->Line_7 $$ context.logMessage(Diagnostic.Kind.OTHER, "AccessType for " + searchedElement.toString() + " found in cache: " + accessTypeInfo)[ CD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_11 $$ if (forcedAccessType != null) [ CD ]
Line_5 $$ AccessTypeInformation accessTypeInfo = context.getAccessTypeInfo(fqcn)-->Line_30 $$ accessTypeInfo = new AccessTypeInformation(fqcn, null, defaultAccessType)[ FD ]
Line_19 $$ if (defaultAccessType != null) -->Line_23 $$ setDefaultAccessTypeForMappedSuperclassesInHierarchy(searchedElement, defaultAccessType, context)[ CD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_21 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ FD ]
Line_11 $$ if (forcedAccessType != null) -->Line_12 $$ context.logMessage(Diagnostic.Kind.OTHER, "Explicit access type on " + searchedElement + ":" + forcedAccessType)[ CD ]
Line_13 $$ accessTypeInfo = new AccessTypeInformation(fqcn, forcedAccessType, null)-->Line_30 $$ accessTypeInfo = new AccessTypeInformation(fqcn, null, defaultAccessType)[ FD ]
Line_19 $$ if (defaultAccessType != null) -->Line_20 $$ accessTypeInfo = new AccessTypeInformation(fqcn, null, defaultAccessType)[ CD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_6 $$ if (accessTypeInfo != null && accessTypeInfo.isAccessTypeResolved()) [ CD ]
Line_11 $$ if (forcedAccessType != null) -->Line_14 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ CD ]
Line_11 $$ if (forcedAccessType != null) -->Line_16 $$ return[ CD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_27 $$ if (defaultAccessType == null) [ CD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_22 $$ updateEmbeddableAccessType(searchedElement, context, defaultAccessType)[ FD ]
Line_19 $$ if (defaultAccessType != null) -->Line_24 $$ return[ CD ]
Line_26 $$ defaultAccessType = getDefaultAccessForHierarchy(searchedElement, context)-->Line_28 $$ defaultAccessType = AccessType.PROPERTY[ FD ]
Line_13 $$ accessTypeInfo = new AccessTypeInformation(fqcn, forcedAccessType, null)-->Line_20 $$ accessTypeInfo = new AccessTypeInformation(fqcn, null, defaultAccessType)[ FD ]
Line_3 $$ String fqcn = searchedElement.getQualifiedName().toString()-->Line_31 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ FD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_5 $$ AccessTypeInformation accessTypeInfo = context.getAccessTypeInfo(fqcn)[ FD ]
Line_5 $$ AccessTypeInformation accessTypeInfo = context.getAccessTypeInfo(fqcn)-->Line_6 $$ if (accessTypeInfo != null && accessTypeInfo.isAccessTypeResolved()) [ FD ]
Line_13 $$ accessTypeInfo = new AccessTypeInformation(fqcn, forcedAccessType, null)-->Line_14 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ FD ]
Line_18 $$ AccessType defaultAccessType = getAccessTypeInCaseElementIsRoot(searchedElement, context)-->Line_28 $$ defaultAccessType = AccessType.PROPERTY[ FD ]
Line_28 $$ defaultAccessType = AccessType.PROPERTY-->Line_32 $$ updateEmbeddableAccessType(searchedElement, context, defaultAccessType)[ FD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_31 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ FD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_10 $$ AccessType forcedAccessType = determineAnnotationSpecifiedAccessType(searchedElement)[ CD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_12 $$ context.logMessage(Diagnostic.Kind.OTHER, "Explicit access type on " + searchedElement + ":" + forcedAccessType)[ FD ]
Line_26 $$ defaultAccessType = getDefaultAccessForHierarchy(searchedElement, context)-->Line_27 $$ if (defaultAccessType == null) [ FD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_26 $$ defaultAccessType = getDefaultAccessForHierarchy(searchedElement, context)[ CD ]
Line_6 $$ if (accessTypeInfo != null && accessTypeInfo.isAccessTypeResolved()) -->Line_8 $$ return[ CD ]
Line_18 $$ AccessType defaultAccessType = getAccessTypeInCaseElementIsRoot(searchedElement, context)-->Line_23 $$ setDefaultAccessTypeForMappedSuperclassesInHierarchy(searchedElement, defaultAccessType, context)[ FD ]
Line_2 $$ public static void determineAccessTypeForHierarchy(TypeElement searchedElement, Context context) -->Line_10 $$ AccessType forcedAccessType = determineAnnotationSpecifiedAccessType(searchedElement)[ FD ]
