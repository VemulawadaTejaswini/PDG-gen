Line_10 $$ accessTypeInfo = new AccessTypeInformation(collectionElement.getQualifiedName().toString(), explicitAccessType, entity.getEntityAccessTypeInfo().getAccessType())-->Line_13 $$ accessTypeInfo.setDefaultAccessType(entity.getEntityAccessTypeInfo().getAccessType())[ FD ]
Line_2 $$ private AnnotationMetaAttribute createMetaCollectionAttribute(DeclaredType declaredType, Element element, String fqNameOfReturnType, String collection, String targetEntity) -->Line_17 $$ return createAnnotationMetaAttributeForMap(declaredType, element, collection, targetEntity)[ FD ]
Line_10 $$ accessTypeInfo = new AccessTypeInformation(collectionElement.getQualifiedName().toString(), explicitAccessType, entity.getEntityAccessTypeInfo().getAccessType())-->Line_11 $$ context.addAccessTypeInformation(collectionElement.getQualifiedName().toString(), accessTypeInfo)[ FD ]
Line_5 $$ TypeMirror collectionElementType = TypeUtils.getCollectionElementType(declaredType, fqNameOfReturnType, explicitTargetEntity, context)-->Line_6 $$ final TypeElement collectionElement = (TypeElement) context.getTypeUtils().asElement(collectionElementType)[ FD ]
Line_16 $$ if (collection.equals("javax.persistence.metamodel.MapAttribute")) -->Line_17 $$ return createAnnotationMetaAttributeForMap(declaredType, element, collection, targetEntity)[ CD ]
Line_6 $$ final TypeElement collectionElement = (TypeElement) context.getTypeUtils().asElement(collectionElementType)-->Line_9 $$ AccessType explicitAccessType = TypeUtils.determineAnnotationSpecifiedAccessType(collectionElement)[ FD ]
Line_6 $$ final TypeElement collectionElement = (TypeElement) context.getTypeUtils().asElement(collectionElementType)-->Line_10 $$ accessTypeInfo = new AccessTypeInformation(collectionElement.getQualifiedName().toString(), explicitAccessType, entity.getEntityAccessTypeInfo().getAccessType())[ FD ]
Line_2 $$ private AnnotationMetaAttribute createMetaCollectionAttribute(DeclaredType declaredType, Element element, String fqNameOfReturnType, String collection, String targetEntity) -->Line_16 $$ if (collection.equals("javax.persistence.metamodel.MapAttribute")) [ CD ]
Line_2 $$ private AnnotationMetaAttribute createMetaCollectionAttribute(DeclaredType declaredType, Element element, String fqNameOfReturnType, String collection, String targetEntity) -->Line_3 $$ if (TypeUtils.containsAnnotation(element, Constants.ELEMENT_COLLECTION)) [ FD ]
Line_7 $$ AccessTypeInformation accessTypeInfo = context.getAccessTypeInfo(collectionElement.getQualifiedName().toString())-->Line_8 $$ if (accessTypeInfo == null) [ FD ]
Line_16 $$ if (collection.equals("javax.persistence.metamodel.MapAttribute")) -->Line_19 $$ return new AnnotationMetaCollection(entity, element, collection, getElementType(declaredType, targetEntity))[ CD ]
Line_2 $$ private AnnotationMetaAttribute createMetaCollectionAttribute(DeclaredType declaredType, Element element, String fqNameOfReturnType, String collection, String targetEntity) -->Line_5 $$ TypeMirror collectionElementType = TypeUtils.getCollectionElementType(declaredType, fqNameOfReturnType, explicitTargetEntity, context)[ FD ]
Line_8 $$ if (accessTypeInfo == null) -->Line_11 $$ context.addAccessTypeInformation(collectionElement.getQualifiedName().toString(), accessTypeInfo)[ CD ]
Line_8 $$ if (accessTypeInfo == null) -->Line_10 $$ accessTypeInfo = new AccessTypeInformation(collectionElement.getQualifiedName().toString(), explicitAccessType, entity.getEntityAccessTypeInfo().getAccessType())[ CD ]
Line_3 $$ if (TypeUtils.containsAnnotation(element, Constants.ELEMENT_COLLECTION)) -->Line_6 $$ final TypeElement collectionElement = (TypeElement) context.getTypeUtils().asElement(collectionElementType)[ CD ]
Line_3 $$ if (TypeUtils.containsAnnotation(element, Constants.ELEMENT_COLLECTION)) -->Line_7 $$ AccessTypeInformation accessTypeInfo = context.getAccessTypeInfo(collectionElement.getQualifiedName().toString())[ CD ]
Line_4 $$ String explicitTargetEntity = getTargetEntity(element.getAnnotationMirrors())-->Line_5 $$ TypeMirror collectionElementType = TypeUtils.getCollectionElementType(declaredType, fqNameOfReturnType, explicitTargetEntity, context)[ FD ]
Line_3 $$ if (TypeUtils.containsAnnotation(element, Constants.ELEMENT_COLLECTION)) -->Line_5 $$ TypeMirror collectionElementType = TypeUtils.getCollectionElementType(declaredType, fqNameOfReturnType, explicitTargetEntity, context)[ CD ]
Line_7 $$ AccessTypeInformation accessTypeInfo = context.getAccessTypeInfo(collectionElement.getQualifiedName().toString())-->Line_13 $$ accessTypeInfo.setDefaultAccessType(entity.getEntityAccessTypeInfo().getAccessType())[ FD ]
Line_6 $$ final TypeElement collectionElement = (TypeElement) context.getTypeUtils().asElement(collectionElementType)-->Line_7 $$ AccessTypeInformation accessTypeInfo = context.getAccessTypeInfo(collectionElement.getQualifiedName().toString())[ FD ]
Line_6 $$ final TypeElement collectionElement = (TypeElement) context.getTypeUtils().asElement(collectionElementType)-->Line_11 $$ context.addAccessTypeInformation(collectionElement.getQualifiedName().toString(), accessTypeInfo)[ FD ]
Line_8 $$ if (accessTypeInfo == null) -->Line_13 $$ accessTypeInfo.setDefaultAccessType(entity.getEntityAccessTypeInfo().getAccessType())[ CD ]
Line_8 $$ if (accessTypeInfo == null) -->Line_9 $$ AccessType explicitAccessType = TypeUtils.determineAnnotationSpecifiedAccessType(collectionElement)[ CD ]
Line_2 $$ private AnnotationMetaAttribute createMetaCollectionAttribute(DeclaredType declaredType, Element element, String fqNameOfReturnType, String collection, String targetEntity) -->Line_16 $$ if (collection.equals("javax.persistence.metamodel.MapAttribute")) [ FD ]
Line_3 $$ if (TypeUtils.containsAnnotation(element, Constants.ELEMENT_COLLECTION)) -->Line_4 $$ String explicitTargetEntity = getTargetEntity(element.getAnnotationMirrors())[ CD ]
Line_3 $$ if (TypeUtils.containsAnnotation(element, Constants.ELEMENT_COLLECTION)) -->Line_8 $$ if (accessTypeInfo == null) [ CD ]
Line_7 $$ AccessTypeInformation accessTypeInfo = context.getAccessTypeInfo(collectionElement.getQualifiedName().toString())-->Line_10 $$ accessTypeInfo = new AccessTypeInformation(collectionElement.getQualifiedName().toString(), explicitAccessType, entity.getEntityAccessTypeInfo().getAccessType())[ FD ]
Line_2 $$ private AnnotationMetaAttribute createMetaCollectionAttribute(DeclaredType declaredType, Element element, String fqNameOfReturnType, String collection, String targetEntity) -->Line_3 $$ if (TypeUtils.containsAnnotation(element, Constants.ELEMENT_COLLECTION)) [ CD ]
Line_2 $$ private AnnotationMetaAttribute createMetaCollectionAttribute(DeclaredType declaredType, Element element, String fqNameOfReturnType, String collection, String targetEntity) -->Line_4 $$ String explicitTargetEntity = getTargetEntity(element.getAnnotationMirrors())[ FD ]
Line_2 $$ private AnnotationMetaAttribute createMetaCollectionAttribute(DeclaredType declaredType, Element element, String fqNameOfReturnType, String collection, String targetEntity) -->Line_19 $$ return new AnnotationMetaCollection(entity, element, collection, getElementType(declaredType, targetEntity))[ FD ]
Line_7 $$ AccessTypeInformation accessTypeInfo = context.getAccessTypeInfo(collectionElement.getQualifiedName().toString())-->Line_11 $$ context.addAccessTypeInformation(collectionElement.getQualifiedName().toString(), accessTypeInfo)[ FD ]
