Line_2 $$ public Boolean visitDeclared(DeclaredType declaredType, Element element) -->Line_4 $$ String fqNameOfReturnType = returnedElement.getQualifiedName().toString()[ CD ]
Line_2 $$ public Boolean visitDeclared(DeclaredType declaredType, Element element) -->Line_5 $$ String collection = Constants.COLLECTIONS.get(fqNameOfReturnType)[ CD ]
Line_2 $$ public Boolean visitDeclared(DeclaredType declaredType, Element element) -->Line_3 $$ TypeElement returnedElement = (TypeElement) context.getTypeUtils().asElement(declaredType)[ CD ]
Line_6 $$ if (collection != null) -->Line_8 $$ returnedElement = (TypeElement) context.getTypeUtils().asElement(collectionElementType)[ CD ]
Line_6 $$ if (collection != null) -->Line_7 $$ TypeMirror collectionElementType = TypeUtils.getCollectionElementType(declaredType, fqNameOfReturnType, null, context)[ CD ]
Line_5 $$ String collection = Constants.COLLECTIONS.get(fqNameOfReturnType)-->Line_6 $$ if (collection != null) [ FD ]
Line_3 $$ TypeElement returnedElement = (TypeElement) context.getTypeUtils().asElement(declaredType)-->Line_4 $$ String fqNameOfReturnType = returnedElement.getQualifiedName().toString()[ FD ]
Line_2 $$ public Boolean visitDeclared(DeclaredType declaredType, Element element) -->Line_3 $$ TypeElement returnedElement = (TypeElement) context.getTypeUtils().asElement(declaredType)[ FD ]
Line_4 $$ String fqNameOfReturnType = returnedElement.getQualifiedName().toString()-->Line_7 $$ TypeMirror collectionElementType = TypeUtils.getCollectionElementType(declaredType, fqNameOfReturnType, null, context)[ FD ]
Line_2 $$ public Boolean visitDeclared(DeclaredType declaredType, Element element) -->Line_6 $$ if (collection != null) [ CD ]
Line_7 $$ TypeMirror collectionElementType = TypeUtils.getCollectionElementType(declaredType, fqNameOfReturnType, null, context)-->Line_8 $$ returnedElement = (TypeElement) context.getTypeUtils().asElement(collectionElementType)[ FD ]
Line_10 $$ if (type.getQualifiedName().toString().equals(returnedElement.getQualifiedName().toString())) -->Line_11 $$ return Boolean.TRUE[ CD ]
Line_2 $$ public Boolean visitDeclared(DeclaredType declaredType, Element element) -->Line_7 $$ TypeMirror collectionElementType = TypeUtils.getCollectionElementType(declaredType, fqNameOfReturnType, null, context)[ FD ]
Line_4 $$ String fqNameOfReturnType = returnedElement.getQualifiedName().toString()-->Line_5 $$ String collection = Constants.COLLECTIONS.get(fqNameOfReturnType)[ FD ]
Line_3 $$ TypeElement returnedElement = (TypeElement) context.getTypeUtils().asElement(declaredType)-->Line_8 $$ returnedElement = (TypeElement) context.getTypeUtils().asElement(collectionElementType)[ FD ]
Line_8 $$ returnedElement = (TypeElement) context.getTypeUtils().asElement(collectionElementType)-->Line_10 $$ if (type.getQualifiedName().toString().equals(returnedElement.getQualifiedName().toString())) [ FD ]
Line_10 $$ if (type.getQualifiedName().toString().equals(returnedElement.getQualifiedName().toString())) -->Line_13 $$ return Boolean.FALSE[ CD ]
Line_3 $$ TypeElement returnedElement = (TypeElement) context.getTypeUtils().asElement(declaredType)-->Line_10 $$ if (type.getQualifiedName().toString().equals(returnedElement.getQualifiedName().toString())) [ FD ]
Line_2 $$ public Boolean visitDeclared(DeclaredType declaredType, Element element) -->Line_10 $$ if (type.getQualifiedName().toString().equals(returnedElement.getQualifiedName().toString())) [ CD ]
