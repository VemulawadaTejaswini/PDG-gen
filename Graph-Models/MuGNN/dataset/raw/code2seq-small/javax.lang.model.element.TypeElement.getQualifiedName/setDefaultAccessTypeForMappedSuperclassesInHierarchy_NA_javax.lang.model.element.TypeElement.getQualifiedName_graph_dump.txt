Line_12 $$ accessTypeInfo = new AccessTypeInformation(fqcn, null, forcedAccessType)-->Line_16 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ FD ]
Line_14 $$ accessTypeInfo = new AccessTypeInformation(fqcn, null, defaultAccessType)-->Line_16 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ FD ]
Line_5 $$ superClass = TypeUtils.getSuperclassTypeElement(superClass)-->Line_4 $$ do [ FD ]
Line_2 $$ private static void setDefaultAccessTypeForMappedSuperclassesInHierarchy(TypeElement element, AccessType defaultAccessType, Context context) -->Line_16 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ FD ]
Line_5 $$ superClass = TypeUtils.getSuperclassTypeElement(superClass)-->Line_10 $$ AccessType forcedAccessType = determineAnnotationSpecifiedAccessType(superClass)[ FD ]
Line_3 $$ TypeElement superClass = element-->Line_6 $$ if (superClass != null) [ FD ]
Line_5 $$ superClass = TypeUtils.getSuperclassTypeElement(superClass)-->Line_7 $$ String fqcn = superClass.getQualifiedName().toString()[ FD ]
Line_3 $$ TypeElement superClass = element-->Line_7 $$ String fqcn = superClass.getQualifiedName().toString()[ FD ]
Line_3 $$ TypeElement superClass = element-->Line_4 $$ do [ FD ]
Line_8 $$ if (TypeUtils.containsAnnotation(superClass, Constants.MAPPED_SUPERCLASS)) -->Line_16 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ CD ]
Line_3 $$ TypeElement superClass = element-->Line_10 $$ AccessType forcedAccessType = determineAnnotationSpecifiedAccessType(superClass)[ FD ]
Line_10 $$ AccessType forcedAccessType = determineAnnotationSpecifiedAccessType(superClass)-->Line_11 $$ if (forcedAccessType != null) [ FD ]
Line_9 $$ AccessTypeInformation accessTypeInfo-->Line_16 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ FD ]
Line_4 $$ do -->Line_5 $$ superClass = TypeUtils.getSuperclassTypeElement(superClass)[ CD ]
Line_5 $$ superClass = TypeUtils.getSuperclassTypeElement(superClass)-->Line_8 $$ if (TypeUtils.containsAnnotation(superClass, Constants.MAPPED_SUPERCLASS)) [ FD ]
Line_3 $$ TypeElement superClass = element-->Line_8 $$ if (TypeUtils.containsAnnotation(superClass, Constants.MAPPED_SUPERCLASS)) [ FD ]
Line_9 $$ AccessTypeInformation accessTypeInfo-->Line_12 $$ accessTypeInfo = new AccessTypeInformation(fqcn, null, forcedAccessType)[ FD ]
Line_8 $$ if (TypeUtils.containsAnnotation(superClass, Constants.MAPPED_SUPERCLASS)) -->Line_9 $$ AccessTypeInformation accessTypeInfo[ CD ]
Line_8 $$ if (TypeUtils.containsAnnotation(superClass, Constants.MAPPED_SUPERCLASS)) -->Line_10 $$ AccessType forcedAccessType = determineAnnotationSpecifiedAccessType(superClass)[ CD ]
Line_7 $$ String fqcn = superClass.getQualifiedName().toString()-->Line_16 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ FD ]
Line_6 $$ if (superClass != null) -->Line_8 $$ if (TypeUtils.containsAnnotation(superClass, Constants.MAPPED_SUPERCLASS)) [ CD ]
Line_9 $$ AccessTypeInformation accessTypeInfo-->Line_14 $$ accessTypeInfo = new AccessTypeInformation(fqcn, null, defaultAccessType)[ FD ]
Line_5 $$ superClass = TypeUtils.getSuperclassTypeElement(superClass)-->Line_6 $$ if (superClass != null) [ FD ]
Line_8 $$ if (TypeUtils.containsAnnotation(superClass, Constants.MAPPED_SUPERCLASS)) -->Line_11 $$ if (forcedAccessType != null) [ CD ]
Line_12 $$ accessTypeInfo = new AccessTypeInformation(fqcn, null, forcedAccessType)-->Line_14 $$ accessTypeInfo = new AccessTypeInformation(fqcn, null, defaultAccessType)[ FD ]
Line_2 $$ private static void setDefaultAccessTypeForMappedSuperclassesInHierarchy(TypeElement element, AccessType defaultAccessType, Context context) -->Line_4 $$ do [ CD ]
Line_6 $$ if (superClass != null) -->Line_7 $$ String fqcn = superClass.getQualifiedName().toString()[ CD ]
Line_4 $$ do -->Line_6 $$ if (superClass != null) [ CD ]
Line_3 $$ TypeElement superClass = element-->Line_5 $$ superClass = TypeUtils.getSuperclassTypeElement(superClass)[ FD ]
Line_11 $$ if (forcedAccessType != null) -->Line_12 $$ accessTypeInfo = new AccessTypeInformation(fqcn, null, forcedAccessType)[ CD ]
Line_11 $$ if (forcedAccessType != null) -->Line_14 $$ accessTypeInfo = new AccessTypeInformation(fqcn, null, defaultAccessType)[ CD ]
Line_2 $$ private static void setDefaultAccessTypeForMappedSuperclassesInHierarchy(TypeElement element, AccessType defaultAccessType, Context context) -->Line_3 $$ TypeElement superClass = element[ CD ]
