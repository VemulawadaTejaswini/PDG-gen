Line_6 $$ String parameter = RandomTestUtil.randomString()-->Line_8 $$ mockHttpServletRequest.addParameter(parameter, parameter)[ FD ]
Line_16 $$ String[] requestParameterValues = uploadServletRequest.getParameterValues(parameter)-->Line_17 $$ ArrayUtil.contains(requestParameterValues, parameter)[ FD ]
Line_10 $$ for (Map.Entry<String, List<String>> entry : regularParameters.entrySet()) -->Line_14 $$ Assert.assertTrue(parameterValuesList.containsAll(entry.getValue()))[ FD ]
Line_6 $$ String parameter = RandomTestUtil.randomString()-->Line_16 $$ String[] requestParameterValues = uploadServletRequest.getParameterValues(parameter)[ FD ]
Line_2 $$ public void shouldMergeRegularAndRequestParameters() throws Exception -->Line_3 $$ Map<String, FileItem[]> fileParameters = PortletContainerTestUtil.getFileParameters(10, _bytes)[ CD ]
Line_11 $$ String key = entry.getKey()-->Line_12 $$ String[] parameterValues = uploadServletRequest.getParameterValues(key)[ FD ]
Line_11 $$ String key = entry.getKey()-->Line_22 $$ Assert.assertFalse(parameterValuesList.contains(key))[ FD ]
Line_5 $$ LiferayServletRequest liferayServletRequest = PortletContainerTestUtil.getMultipartRequest(_fileNameParameter, _bytes)-->Line_7 $$ MockHttpServletRequest mockHttpServletRequest = (MockHttpServletRequest) liferayServletRequest.getRequest()[ FD ]
Line_2 $$ public void shouldMergeRegularAndRequestParameters() throws Exception -->Line_5 $$ LiferayServletRequest liferayServletRequest = PortletContainerTestUtil.getMultipartRequest(_fileNameParameter, _bytes)[ CD ]
Line_2 $$ public void shouldMergeRegularAndRequestParameters() throws Exception -->Line_17 $$ ArrayUtil.contains(requestParameterValues, parameter)[ CD ]
Line_2 $$ public void shouldMergeRegularAndRequestParameters() throws Exception -->Line_7 $$ MockHttpServletRequest mockHttpServletRequest = (MockHttpServletRequest) liferayServletRequest.getRequest()[ CD ]
Line_5 $$ LiferayServletRequest liferayServletRequest = PortletContainerTestUtil.getMultipartRequest(_fileNameParameter, _bytes)-->Line_9 $$ UploadServletRequestImpl uploadServletRequest = new UploadServletRequestImpl((HttpServletRequest) liferayServletRequest.getRequest(), fileParameters, regularParameters)[ FD ]
Line_2 $$ public void shouldMergeRegularAndRequestParameters() throws Exception -->Line_9 $$ UploadServletRequestImpl uploadServletRequest = new UploadServletRequestImpl((HttpServletRequest) liferayServletRequest.getRequest(), fileParameters, regularParameters)[ CD ]
Line_9 $$ UploadServletRequestImpl uploadServletRequest = new UploadServletRequestImpl((HttpServletRequest) liferayServletRequest.getRequest(), fileParameters, regularParameters)-->Line_16 $$ String[] requestParameterValues = uploadServletRequest.getParameterValues(parameter)[ FD ]
Line_9 $$ UploadServletRequestImpl uploadServletRequest = new UploadServletRequestImpl((HttpServletRequest) liferayServletRequest.getRequest(), fileParameters, regularParameters)-->Line_20 $$ String[] parameterValues = uploadServletRequest.getParameterValues(key)[ FD ]
Line_13 $$ List<String> parameterValuesList = ListUtil.fromArray(parameterValues)-->Line_14 $$ Assert.assertTrue(parameterValuesList.containsAll(entry.getValue()))[ FD ]
Line_6 $$ String parameter = RandomTestUtil.randomString()-->Line_17 $$ ArrayUtil.contains(requestParameterValues, parameter)[ FD ]
Line_2 $$ public void shouldMergeRegularAndRequestParameters() throws Exception -->Line_6 $$ String parameter = RandomTestUtil.randomString()[ CD ]
Line_2 $$ public void shouldMergeRegularAndRequestParameters() throws Exception -->Line_16 $$ String[] requestParameterValues = uploadServletRequest.getParameterValues(parameter)[ CD ]
Line_12 $$ String[] parameterValues = uploadServletRequest.getParameterValues(key)-->Line_13 $$ List<String> parameterValuesList = ListUtil.fromArray(parameterValues)[ FD ]
Line_13 $$ List<String> parameterValuesList = ListUtil.fromArray(parameterValues)-->Line_22 $$ Assert.assertFalse(parameterValuesList.contains(key))[ FD ]
Line_10 $$ for (Map.Entry<String, List<String>> entry : regularParameters.entrySet()) -->Line_19 $$ String key = entry.getKey()[ FD ]
Line_3 $$ Map<String, FileItem[]> fileParameters = PortletContainerTestUtil.getFileParameters(10, _bytes)-->Line_18 $$ for (Map.Entry<String, FileItem[]> entry : fileParameters.entrySet()) [ FD ]
Line_10 $$ for (Map.Entry<String, List<String>> entry : regularParameters.entrySet()) -->Line_11 $$ String key = entry.getKey()[ FD ]
Line_4 $$ Map<String, List<String>> regularParameters = PortletContainerTestUtil.getRegularParameters(10)-->Line_10 $$ for (Map.Entry<String, List<String>> entry : regularParameters.entrySet()) [ FD ]
Line_7 $$ MockHttpServletRequest mockHttpServletRequest = (MockHttpServletRequest) liferayServletRequest.getRequest()-->Line_8 $$ mockHttpServletRequest.addParameter(parameter, parameter)[ FD ]
Line_12 $$ String[] parameterValues = uploadServletRequest.getParameterValues(key)-->Line_21 $$ List<String> parameterValuesList = ListUtil.fromArray(parameterValues)[ FD ]
Line_11 $$ String key = entry.getKey()-->Line_20 $$ String[] parameterValues = uploadServletRequest.getParameterValues(key)[ FD ]
Line_2 $$ public void shouldMergeRegularAndRequestParameters() throws Exception -->Line_4 $$ Map<String, List<String>> regularParameters = PortletContainerTestUtil.getRegularParameters(10)[ CD ]
Line_2 $$ public void shouldMergeRegularAndRequestParameters() throws Exception -->Line_8 $$ mockHttpServletRequest.addParameter(parameter, parameter)[ CD ]
Line_9 $$ UploadServletRequestImpl uploadServletRequest = new UploadServletRequestImpl((HttpServletRequest) liferayServletRequest.getRequest(), fileParameters, regularParameters)-->Line_12 $$ String[] parameterValues = uploadServletRequest.getParameterValues(key)[ FD ]
