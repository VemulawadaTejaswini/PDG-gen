Line_2 $$ private void mergeSection(String section, DefaultManifest mergedManifest, Attributes baseAttributes, Attributes mergeAttributes) -->Line_6 $$ Object mergeValue = mergeAttributes.get(baseEntry.getKey())[ FD ]
Line_3 $$ Map<String, Object> mergeOnlyAttributes = new LinkedHashMap<String, Object>(mergeAttributes)-->Line_10 $$ for (Map.Entry<String, Object> mergeEntry : mergeOnlyAttributes.entrySet()) [ FD ]
Line_2 $$ private void mergeSection(String section, DefaultManifest mergedManifest, Attributes baseAttributes, Attributes mergeAttributes) -->Line_7 $$ mergeDetailsSet.add(getMergeDetails(section, baseEntry.getKey(), baseEntry.getValue(), mergeValue))[ FD ]
Line_13 $$ for (DefaultManifestMergeDetails mergeDetails : mergeDetailsSet) -->Line_15 $$ action.execute(mergeDetails)[ FD ]
Line_10 $$ for (Map.Entry<String, Object> mergeEntry : mergeOnlyAttributes.entrySet()) -->Line_11 $$ mergeDetailsSet.add(getMergeDetails(section, mergeEntry.getKey(), null, mergeEntry.getValue()))[ FD ]
Line_2 $$ private void mergeSection(String section, DefaultManifest mergedManifest, Attributes baseAttributes, Attributes mergeAttributes) -->Line_4 $$ Set<DefaultManifestMergeDetails> mergeDetailsSet = new LinkedHashSet<DefaultManifestMergeDetails>()[ CD ]
Line_2 $$ private void mergeSection(String section, DefaultManifest mergedManifest, Attributes baseAttributes, Attributes mergeAttributes) -->Line_3 $$ Map<String, Object> mergeOnlyAttributes = new LinkedHashMap<String, Object>(mergeAttributes)[ CD ]
Line_2 $$ private void mergeSection(String section, DefaultManifest mergedManifest, Attributes baseAttributes, Attributes mergeAttributes) -->Line_5 $$ for (Map.Entry<String, Object> baseEntry : baseAttributes.entrySet()) [ FD ]
Line_4 $$ Set<DefaultManifestMergeDetails> mergeDetailsSet = new LinkedHashSet<DefaultManifestMergeDetails>()-->Line_7 $$ mergeDetailsSet.add(getMergeDetails(section, baseEntry.getKey(), baseEntry.getValue(), mergeValue))[ FD ]
Line_13 $$ for (DefaultManifestMergeDetails mergeDetails : mergeDetailsSet) -->Line_17 $$ addMergeDetailToManifest(section, mergedManifest, mergeDetails)[ FD ]
Line_5 $$ for (Map.Entry<String, Object> baseEntry : baseAttributes.entrySet()) -->Line_7 $$ mergeDetailsSet.add(getMergeDetails(section, baseEntry.getKey(), baseEntry.getValue(), mergeValue))[ FD ]
Line_5 $$ for (Map.Entry<String, Object> baseEntry : baseAttributes.entrySet()) -->Line_8 $$ mergeOnlyAttributes.remove(baseEntry.getKey())[ FD ]
Line_4 $$ Set<DefaultManifestMergeDetails> mergeDetailsSet = new LinkedHashSet<DefaultManifestMergeDetails>()-->Line_11 $$ mergeDetailsSet.add(getMergeDetails(section, mergeEntry.getKey(), null, mergeEntry.getValue()))[ FD ]
Line_3 $$ Map<String, Object> mergeOnlyAttributes = new LinkedHashMap<String, Object>(mergeAttributes)-->Line_8 $$ mergeOnlyAttributes.remove(baseEntry.getKey())[ FD ]
Line_14 $$ for (Action<? super ManifestMergeDetails> action : actions) -->Line_15 $$ action.execute(mergeDetails)[ FD ]
Line_2 $$ private void mergeSection(String section, DefaultManifest mergedManifest, Attributes baseAttributes, Attributes mergeAttributes) -->Line_17 $$ addMergeDetailToManifest(section, mergedManifest, mergeDetails)[ FD ]
Line_5 $$ for (Map.Entry<String, Object> baseEntry : baseAttributes.entrySet()) -->Line_6 $$ Object mergeValue = mergeAttributes.get(baseEntry.getKey())[ FD ]
Line_2 $$ private void mergeSection(String section, DefaultManifest mergedManifest, Attributes baseAttributes, Attributes mergeAttributes) -->Line_11 $$ mergeDetailsSet.add(getMergeDetails(section, mergeEntry.getKey(), null, mergeEntry.getValue()))[ FD ]
Line_6 $$ Object mergeValue = mergeAttributes.get(baseEntry.getKey())-->Line_7 $$ mergeDetailsSet.add(getMergeDetails(section, baseEntry.getKey(), baseEntry.getValue(), mergeValue))[ FD ]
