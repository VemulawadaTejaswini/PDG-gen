Line_33 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_36 $$ httpServlet.service(mockHttpServletRequest, mockHttpServletResponse)[ FD ]
Line_13 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest(method, requestURI)-->Line_23 $$ mockHttpServletRequest.setContentType(contentType)[ FD ]
Line_13 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest(method, requestURI)-->Line_18 $$ mockHttpServletRequest.setServletPath(_SERVLET_PATH)[ FD ]
Line_22 $$ if (contentType != null) -->Line_25 $$ mockHttpServletRequest.setContentType(ContentTypes.TEXT_PLAIN)[ CD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_3 $$ if (headers == null) [ CD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_28 $$ for (Map.Entry<String, String> entry : headers.entrySet()) [ FD ]
Line_19 $$ if (data != null) -->Line_21 $$ String contentType = headers.remove(HttpHeaders.CONTENT_TYPE)[ CD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_9 $$ if (user == null) [ FD ]
Line_9 $$ if (user == null) -->Line_10 $$ user = TestPropsValues.getUser()[ CD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_18 $$ mockHttpServletRequest.setServletPath(_SERVLET_PATH)[ CD ]
Line_19 $$ if (data != null) -->Line_20 $$ mockHttpServletRequest.setContent(data)[ CD ]
Line_13 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest(method, requestURI)-->Line_25 $$ mockHttpServletRequest.setContentType(ContentTypes.TEXT_PLAIN)[ FD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_13 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest(method, requestURI)[ CD ]
Line_35 $$ Servlet httpServlet = getServlet()-->Line_36 $$ httpServlet.service(mockHttpServletRequest, mockHttpServletResponse)[ FD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_12 $$ String requestURI = _CONTEXT_PATH + _SERVLET_PATH + _PATH_INFO_PREFACE + path[ CD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_19 $$ if (data != null) [ CD ]
Line_13 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest(method, requestURI)-->Line_14 $$ mockHttpServletRequest.setAttribute(WebKeys.USER, user)[ FD ]
Line_19 $$ if (data != null) -->Line_22 $$ if (contentType != null) [ CD ]
Line_29 $$ String key = entry.getKey()-->Line_31 $$ mockHttpServletRequest.addHeader(key, value)[ FD ]
Line_13 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest(method, requestURI)-->Line_31 $$ mockHttpServletRequest.addHeader(key, value)[ FD ]
Line_4 $$ headers = new HashMap()-->Line_21 $$ String contentType = headers.remove(HttpHeaders.CONTENT_TYPE)[ FD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_10 $$ user = TestPropsValues.getUser()[ FD ]
Line_13 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest(method, requestURI)-->Line_36 $$ httpServlet.service(mockHttpServletRequest, mockHttpServletResponse)[ FD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_36 $$ httpServlet.service(mockHttpServletRequest, mockHttpServletResponse)[ CD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_19 $$ if (data != null) [ FD ]
Line_13 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest(method, requestURI)-->Line_16 $$ mockHttpServletRequest.setParameters(params)[ FD ]
Line_7 $$ params = new HashMap()-->Line_16 $$ mockHttpServletRequest.setParameters(params)[ FD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_9 $$ if (user == null) [ CD ]
Line_6 $$ if (params == null) -->Line_7 $$ params = new HashMap()[ CD ]
Line_10 $$ user = TestPropsValues.getUser()-->Line_14 $$ mockHttpServletRequest.setAttribute(WebKeys.USER, user)[ FD ]
Line_4 $$ headers = new HashMap()-->Line_28 $$ for (Map.Entry<String, String> entry : headers.entrySet()) [ FD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_20 $$ mockHttpServletRequest.setContent(data)[ FD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_3 $$ if (headers == null) [ FD ]
Line_21 $$ String contentType = headers.remove(HttpHeaders.CONTENT_TYPE)-->Line_22 $$ if (contentType != null) [ FD ]
Line_13 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest(method, requestURI)-->Line_17 $$ mockHttpServletRequest.setPathInfo(_PATH_INFO_PREFACE + path)[ FD ]
Line_21 $$ String contentType = headers.remove(HttpHeaders.CONTENT_TYPE)-->Line_23 $$ mockHttpServletRequest.setContentType(contentType)[ FD ]
Line_30 $$ String value = entry.getValue()-->Line_31 $$ mockHttpServletRequest.addHeader(key, value)[ FD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_14 $$ mockHttpServletRequest.setAttribute(WebKeys.USER, user)[ CD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_34 $$ mockHttpServletResponse.setCharacterEncoding(StringPool.UTF8)[ CD ]
Line_3 $$ if (headers == null) -->Line_4 $$ headers = new HashMap()[ CD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_7 $$ params = new HashMap()[ FD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_6 $$ if (params == null) [ FD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_14 $$ mockHttpServletRequest.setAttribute(WebKeys.USER, user)[ FD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_6 $$ if (params == null) [ CD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_35 $$ Servlet httpServlet = getServlet()[ CD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_21 $$ String contentType = headers.remove(HttpHeaders.CONTENT_TYPE)[ FD ]
Line_28 $$ for (Map.Entry<String, String> entry : headers.entrySet()) -->Line_29 $$ String key = entry.getKey()[ FD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_33 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()[ CD ]
Line_33 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_34 $$ mockHttpServletResponse.setCharacterEncoding(StringPool.UTF8)[ FD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_37 $$ return mockHttpServletResponse[ CD ]
Line_13 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest(method, requestURI)-->Line_15 $$ mockHttpServletRequest.setContextPath(_CONTEXT_PATH)[ FD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_4 $$ headers = new HashMap()[ FD ]
Line_28 $$ for (Map.Entry<String, String> entry : headers.entrySet()) -->Line_30 $$ String value = entry.getValue()[ FD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_16 $$ mockHttpServletRequest.setParameters(params)[ CD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_15 $$ mockHttpServletRequest.setContextPath(_CONTEXT_PATH)[ CD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_17 $$ mockHttpServletRequest.setPathInfo(_PATH_INFO_PREFACE + path)[ CD ]
Line_13 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest(method, requestURI)-->Line_20 $$ mockHttpServletRequest.setContent(data)[ FD ]
Line_22 $$ if (contentType != null) -->Line_23 $$ mockHttpServletRequest.setContentType(contentType)[ CD ]
Line_2 $$ public MockHttpServletResponse service(String method, String path, Map<String, String> headers, Map<String, String> params, User user, byte[] data) throws Exception -->Line_16 $$ mockHttpServletRequest.setParameters(params)[ FD ]
