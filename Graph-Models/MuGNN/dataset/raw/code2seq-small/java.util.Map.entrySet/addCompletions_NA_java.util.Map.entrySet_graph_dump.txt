Line_12 $$ final Map<String, Boolean> variants = new HashMap<String, Boolean>()-->Line_15 $$ variants.put(s, isFinal)[ FD ]
Line_21 $$ if (parent instanceof GrAssignmentExpression) -->Line_22 $$ parent = parent.getParent()[ CD ]
Line_31 $$ if (left instanceof GrReferenceExpression) -->Line_33 $$ if (s == null)[ CD ]
Line_31 $$ if (left instanceof GrReferenceExpression) -->Line_32 $$ String s = refToString((GrReferenceExpression) left)[ CD ]
Line_13 $$ collectVariants(new PairConsumer<String, Boolean>() -->Line_35 $$ int dotIndex = s.indexOf('.')[ FD ]
Line_2 $$ protected void addCompletions(@NotNull CompletionParameters parameters, ProcessingContext context, @NotNull CompletionResultSet result) -->Line_7 $$ if (!groovyFile.isScript())[ CD ]
Line_10 $$ if (ref == null)-->Line_11 $$ return[ CD ]
Line_28 $$ for (PsiElement e = parent.getFirstChild(); e != null; e = e.getNextSibling()) -->Line_29 $$ if (e instanceof GrAssignmentExpression) [ FD ]
Line_2 $$ protected void addCompletions(@NotNull CompletionParameters parameters, ProcessingContext context, @NotNull CompletionResultSet result) -->Line_9 $$ GrReferenceExpression ref = (GrReferenceExpression) parameters.getPosition().getParent()[ CD ]
Line_43 $$ if (isPropertyCall(call)) -->Line_49 $$ variants.remove(name)[ CD ]
Line_6 $$ GroovyFile groovyFile = (GroovyFile) file-->Line_7 $$ if (!groovyFile.isScript())[ FD ]
Line_2 $$ protected void addCompletions(@NotNull CompletionParameters parameters, ProcessingContext context, @NotNull CompletionResultSet result) -->Line_6 $$ GroovyFile groovyFile = (GroovyFile) file[ CD ]
Line_13 $$ collectVariants(new PairConsumer<String, Boolean>() -->Line_37 $$ processedPrefixes.add(s.substring(0, dotIndex))[ FD ]
Line_9 $$ GrReferenceExpression ref = (GrReferenceExpression) parameters.getPosition().getParent()-->Line_13 $$ collectVariants(new PairConsumer<String, Boolean>() [ FD ]
Line_29 $$ if (e instanceof GrAssignmentExpression) -->Line_41 $$ if (e instanceof GrMethodCall) [ CD ]
Line_12 $$ final Map<String, Boolean> variants = new HashMap<String, Boolean>()-->Line_18 $$ if (variants.isEmpty())[ FD ]
Line_2 $$ protected void addCompletions(@NotNull CompletionParameters parameters, ProcessingContext context, @NotNull CompletionResultSet result) -->Line_21 $$ if (parent instanceof GrAssignmentExpression) [ CD ]
Line_2 $$ protected void addCompletions(@NotNull CompletionParameters parameters, ProcessingContext context, @NotNull CompletionResultSet result) -->Line_24 $$ if (parent == null)[ CD ]
Line_31 $$ if (left instanceof GrReferenceExpression) -->Line_35 $$ int dotIndex = s.indexOf('.')[ CD ]
Line_12 $$ final Map<String, Boolean> variants = new HashMap<String, Boolean>()-->Line_39 $$ variants.remove(s)[ FD ]
Line_29 $$ if (e instanceof GrAssignmentExpression) -->Line_30 $$ PsiElement left = ((GrAssignmentExpression) e).getLValue()[ CD ]
Line_13 $$ collectVariants(new PairConsumer<String, Boolean>() -->Line_15 $$ variants.put(s, isFinal)[ CD ]
Line_43 $$ if (isPropertyCall(call)) -->Line_45 $$ if (name == null)[ CD ]
Line_2 $$ protected void addCompletions(@NotNull CompletionParameters parameters, ProcessingContext context, @NotNull CompletionResultSet result) -->Line_20 $$ PsiElement parent = ref.getParent()[ CD ]
Line_56 $$ if (dotIndex > 0 && dotIndex < variant.length() - 1) -->Line_58 $$ if (prefixesInMethodCall.contains(p))[ CD ]
Line_35 $$ int dotIndex = s.indexOf('.')-->Line_36 $$ if (dotIndex > 0) [ FD ]
Line_4 $$ if (!(file instanceof GroovyFile))-->Line_5 $$ return[ CD ]
Line_18 $$ if (variants.isEmpty())-->Line_19 $$ return[ CD ]
Line_43 $$ if (isPropertyCall(call)) -->Line_47 $$ processedPrefixes.add(name)[ CD ]
Line_2 $$ protected void addCompletions(@NotNull CompletionParameters parameters, ProcessingContext context, @NotNull CompletionResultSet result) -->Line_68 $$ result.addElement(lookupElement)[ FD ]
Line_32 $$ String s = refToString((GrReferenceExpression) left)-->Line_39 $$ variants.remove(s)[ FD ]
Line_35 $$ int dotIndex = s.indexOf('.')-->Line_57 $$ String p = variant.substring(0, dotIndex)[ FD ]
Line_41 $$ if (e instanceof GrMethodCall) -->Line_42 $$ GrMethodCall call = (GrMethodCall) e[ CD ]
Line_65 $$ if (entry.getValue()) -->Line_66 $$ lookupElement = TailTypeDecorator.withTail(lookupElement, TailType.EQ)[ CD ]
Line_56 $$ if (dotIndex > 0 && dotIndex < variant.length() - 1) -->Line_60 $$ if (myAddPrefixes && processedPrefixes.add(p)) [ CD ]
Line_29 $$ if (e instanceof GrAssignmentExpression) -->Line_31 $$ if (left instanceof GrReferenceExpression) [ CD ]
Line_12 $$ final Map<String, Boolean> variants = new HashMap<String, Boolean>()-->Line_53 $$ for (Map.Entry<String, Boolean> entry : variants.entrySet()) [ FD ]
Line_28 $$ for (PsiElement e = parent.getFirstChild(); e != null; e = e.getNextSibling()) -->Line_29 $$ if (e instanceof GrAssignmentExpression) [ CD ]
Line_35 $$ int dotIndex = s.indexOf('.')-->Line_37 $$ processedPrefixes.add(s.substring(0, dotIndex))[ FD ]
Line_31 $$ if (left instanceof GrReferenceExpression) -->Line_36 $$ if (dotIndex > 0) [ CD ]
Line_28 $$ for (PsiElement e = parent.getFirstChild(); e != null; e = e.getNextSibling()) -->Line_41 $$ if (e instanceof GrMethodCall) [ FD ]
Line_43 $$ if (isPropertyCall(call)) -->Line_44 $$ String name = extractPropertyName(call)[ CD ]
Line_44 $$ String name = extractPropertyName(call)-->Line_48 $$ prefixesInMethodCall.add(name)[ FD ]
Line_31 $$ if (left instanceof GrReferenceExpression) -->Line_39 $$ variants.remove(s)[ CD ]
Line_42 $$ GrMethodCall call = (GrMethodCall) e-->Line_43 $$ if (isPropertyCall(call)) [ FD ]
Line_2 $$ protected void addCompletions(@NotNull CompletionParameters parameters, ProcessingContext context, @NotNull CompletionResultSet result) -->Line_13 $$ collectVariants(new PairConsumer<String, Boolean>() [ CD ]
Line_36 $$ if (dotIndex > 0) -->Line_37 $$ processedPrefixes.add(s.substring(0, dotIndex))[ CD ]
Line_2 $$ protected void addCompletions(@NotNull CompletionParameters parameters, ProcessingContext context, @NotNull CompletionResultSet result) -->Line_3 $$ PsiFile file = parameters.getOriginalFile()[ CD ]
Line_41 $$ if (e instanceof GrMethodCall) -->Line_43 $$ if (isPropertyCall(call)) [ CD ]
Line_13 $$ collectVariants(new PairConsumer<String, Boolean>() -->Line_15 $$ variants.put(s, isFinal)[ FD ]
Line_32 $$ String s = refToString((GrReferenceExpression) left)-->Line_35 $$ int dotIndex = s.indexOf('.')[ FD ]
Line_56 $$ if (dotIndex > 0 && dotIndex < variant.length() - 1) -->Line_57 $$ String p = variant.substring(0, dotIndex)[ CD ]
Line_32 $$ String s = refToString((GrReferenceExpression) left)-->Line_33 $$ if (s == null)[ FD ]
Line_30 $$ PsiElement left = ((GrAssignmentExpression) e).getLValue()-->Line_31 $$ if (left instanceof GrReferenceExpression) [ FD ]
Line_12 $$ final Map<String, Boolean> variants = new HashMap<String, Boolean>()-->Line_49 $$ variants.remove(name)[ FD ]
Line_13 $$ collectVariants(new PairConsumer<String, Boolean>() -->Line_33 $$ if (s == null)[ FD ]
Line_60 $$ if (myAddPrefixes && processedPrefixes.add(p)) -->Line_61 $$ result.addElement(LookupElementBuilder.create(p))[ CD ]
Line_2 $$ protected void addCompletions(@NotNull CompletionParameters parameters, ProcessingContext context, @NotNull CompletionResultSet result) -->Line_4 $$ if (!(file instanceof GroovyFile))[ CD ]
Line_44 $$ String name = extractPropertyName(call)-->Line_49 $$ variants.remove(name)[ FD ]
Line_42 $$ GrMethodCall call = (GrMethodCall) e-->Line_44 $$ String name = extractPropertyName(call)[ FD ]
Line_44 $$ String name = extractPropertyName(call)-->Line_45 $$ if (name == null)[ FD ]
Line_32 $$ String s = refToString((GrReferenceExpression) left)-->Line_37 $$ processedPrefixes.add(s.substring(0, dotIndex))[ FD ]
Line_7 $$ if (!groovyFile.isScript())-->Line_8 $$ return[ CD ]
Line_2 $$ protected void addCompletions(@NotNull CompletionParameters parameters, ProcessingContext context, @NotNull CompletionResultSet result) -->Line_10 $$ if (ref == null)[ CD ]
Line_2 $$ protected void addCompletions(@NotNull CompletionParameters parameters, ProcessingContext context, @NotNull CompletionResultSet result) -->Line_12 $$ final Map<String, Boolean> variants = new HashMap<String, Boolean>()[ CD ]
Line_13 $$ collectVariants(new PairConsumer<String, Boolean>() -->Line_39 $$ variants.remove(s)[ FD ]
Line_2 $$ protected void addCompletions(@NotNull CompletionParameters parameters, ProcessingContext context, @NotNull CompletionResultSet result) -->Line_3 $$ PsiFile file = parameters.getOriginalFile()[ FD ]
Line_2 $$ protected void addCompletions(@NotNull CompletionParameters parameters, ProcessingContext context, @NotNull CompletionResultSet result) -->Line_9 $$ GrReferenceExpression ref = (GrReferenceExpression) parameters.getPosition().getParent()[ FD ]
Line_9 $$ GrReferenceExpression ref = (GrReferenceExpression) parameters.getPosition().getParent()-->Line_10 $$ if (ref == null)[ FD ]
Line_43 $$ if (isPropertyCall(call)) -->Line_48 $$ prefixesInMethodCall.add(name)[ CD ]
Line_2 $$ protected void addCompletions(@NotNull CompletionParameters parameters, ProcessingContext context, @NotNull CompletionResultSet result) -->Line_18 $$ if (variants.isEmpty())[ CD ]
Line_24 $$ if (parent == null)-->Line_25 $$ return[ CD ]
Line_6 $$ GroovyFile groovyFile = (GroovyFile) file-->Line_13 $$ collectVariants(new PairConsumer<String, Boolean>() [ FD ]
Line_2 $$ protected void addCompletions(@NotNull CompletionParameters parameters, ProcessingContext context, @NotNull CompletionResultSet result) -->Line_28 $$ for (PsiElement e = parent.getFirstChild(); e != null; e = e.getNextSibling()) [ CD ]
Line_2 $$ protected void addCompletions(@NotNull CompletionParameters parameters, ProcessingContext context, @NotNull CompletionResultSet result) -->Line_61 $$ result.addElement(LookupElementBuilder.create(p))[ FD ]
Line_44 $$ String name = extractPropertyName(call)-->Line_47 $$ processedPrefixes.add(name)[ FD ]
Line_9 $$ GrReferenceExpression ref = (GrReferenceExpression) parameters.getPosition().getParent()-->Line_20 $$ PsiElement parent = ref.getParent()[ FD ]
