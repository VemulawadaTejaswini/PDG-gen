Line_22 $$ targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)-->Line_31 $$ if (targetAnnotation != null && targetAnnotation.equals(annotation)) [ FD ]
Line_53 $$ actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)-->Line_56 $$ actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())[ FD ]
Line_14 $$ targetAnnotation = getFactoryMethodAnnotation(dbd, type)-->Line_28 $$ targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)[ FD ]
Line_35 $$ Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation)-->Line_36 $$ if (attributes.isEmpty() && qualifier == null) [ FD ]
Line_40 $$ String attributeName = entry.getKey()-->Line_44 $$ actualValue = qualifier.getAttribute(attributeName)[ FD ]
Line_11 $$ if (targetAnnotation == null) -->Line_13 $$ if (dbd != null) [ CD ]
Line_21 $$ if (beanType != null) -->Line_22 $$ targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)[ CD ]
Line_44 $$ actualValue = qualifier.getAttribute(attributeName)-->Line_47 $$ actualValue = bd.getAttribute(attributeName)[ FD ]
Line_47 $$ actualValue = bd.getAttribute(attributeName)-->Line_55 $$ if (actualValue != null) [ FD ]
Line_2 $$ protected boolean checkQualifier(BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) -->Line_5 $$ AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())[ CD ]
Line_42 $$ Object actualValue = null-->Line_46 $$ if (actualValue == null) [ FD ]
Line_44 $$ actualValue = qualifier.getAttribute(attributeName)-->Line_58 $$ if (!expectedValue.equals(actualValue)) [ FD ]
Line_9 $$ if (qualifier == null) -->Line_17 $$ if (targetAnnotation == null) [ CD ]
Line_52 $$ if (actualValue == null && qualifier != null) -->Line_53 $$ actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)[ CD ]
Line_47 $$ actualValue = bd.getAttribute(attributeName)-->Line_53 $$ actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)[ FD ]
Line_9 $$ if (qualifier == null) -->Line_10 $$ Annotation targetAnnotation = getFactoryMethodAnnotation(bd, type)[ CD ]
Line_2 $$ protected boolean checkQualifier(BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) -->Line_49 $$ if (actualValue == null && attributeName.equals(AutowireCandidateQualifier.VALUE_KEY) && expectedValue instanceof String && bdHolder.matchesName((String) expectedValue)) [ FD ]
Line_40 $$ String attributeName = entry.getKey()-->Line_47 $$ actualValue = bd.getAttribute(attributeName)[ FD ]
Line_2 $$ protected boolean checkQualifier(BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) -->Line_3 $$ Class<? extends Annotation> type = annotation.annotationType()[ FD ]
Line_36 $$ if (attributes.isEmpty() && qualifier == null) -->Line_37 $$ return false[ CD ]
Line_5 $$ AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())-->Line_7 $$ qualifier = bd.getQualifier(ClassUtils.getShortName(type))[ FD ]
Line_47 $$ actualValue = bd.getAttribute(attributeName)-->Line_56 $$ actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())[ FD ]
Line_2 $$ protected boolean checkQualifier(BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) -->Line_20 $$ Class<?> beanType = getBeanFactory().getType(bdHolder.getBeanName())[ FD ]
Line_7 $$ qualifier = bd.getQualifier(ClassUtils.getShortName(type))-->Line_44 $$ actualValue = qualifier.getAttribute(attributeName)[ FD ]
Line_10 $$ Annotation targetAnnotation = getFactoryMethodAnnotation(bd, type)-->Line_31 $$ if (targetAnnotation != null && targetAnnotation.equals(annotation)) [ FD ]
Line_7 $$ qualifier = bd.getQualifier(ClassUtils.getShortName(type))-->Line_43 $$ if (qualifier != null) [ FD ]
Line_10 $$ Annotation targetAnnotation = getFactoryMethodAnnotation(bd, type)-->Line_11 $$ if (targetAnnotation == null) [ FD ]
Line_3 $$ Class<? extends Annotation> type = annotation.annotationType()-->Line_28 $$ targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)[ FD ]
Line_14 $$ targetAnnotation = getFactoryMethodAnnotation(dbd, type)-->Line_31 $$ if (targetAnnotation != null && targetAnnotation.equals(annotation)) [ FD ]
Line_2 $$ protected boolean checkQualifier(BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) -->Line_56 $$ actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())[ FD ]
Line_10 $$ Annotation targetAnnotation = getFactoryMethodAnnotation(bd, type)-->Line_22 $$ targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)[ FD ]
Line_28 $$ targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)-->Line_31 $$ if (targetAnnotation != null && targetAnnotation.equals(annotation)) [ FD ]
Line_41 $$ Object expectedValue = entry.getValue()-->Line_56 $$ actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())[ FD ]
Line_2 $$ protected boolean checkQualifier(BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) -->Line_4 $$ RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()[ FD ]
Line_2 $$ protected boolean checkQualifier(BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) -->Line_31 $$ if (targetAnnotation != null && targetAnnotation.equals(annotation)) [ FD ]
Line_12 $$ RootBeanDefinition dbd = getResolvedDecoratedDefinition(bd)-->Line_13 $$ if (dbd != null) [ FD ]
Line_6 $$ if (qualifier == null) -->Line_7 $$ qualifier = bd.getQualifier(ClassUtils.getShortName(type))[ CD ]
Line_13 $$ if (dbd != null) -->Line_14 $$ targetAnnotation = getFactoryMethodAnnotation(dbd, type)[ CD ]
Line_5 $$ AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())-->Line_6 $$ if (qualifier == null) [ FD ]
Line_40 $$ String attributeName = entry.getKey()-->Line_49 $$ if (actualValue == null && attributeName.equals(AutowireCandidateQualifier.VALUE_KEY) && expectedValue instanceof String && bdHolder.matchesName((String) expectedValue)) [ FD ]
Line_4 $$ RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()-->Line_12 $$ RootBeanDefinition dbd = getResolvedDecoratedDefinition(bd)[ FD ]
Line_42 $$ Object actualValue = null-->Line_53 $$ actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)[ FD ]
Line_42 $$ Object actualValue = null-->Line_55 $$ if (actualValue != null) [ FD ]
Line_10 $$ Annotation targetAnnotation = getFactoryMethodAnnotation(bd, type)-->Line_28 $$ targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)[ FD ]
Line_40 $$ String attributeName = entry.getKey()-->Line_53 $$ actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)[ FD ]
Line_2 $$ protected boolean checkQualifier(BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) -->Line_35 $$ Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation)[ FD ]
Line_9 $$ if (qualifier == null) -->Line_11 $$ if (targetAnnotation == null) [ CD ]
Line_22 $$ targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)-->Line_28 $$ targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)[ FD ]
Line_20 $$ Class<?> beanType = getBeanFactory().getType(bdHolder.getBeanName())-->Line_22 $$ targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)[ FD ]
Line_53 $$ actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)-->Line_58 $$ if (!expectedValue.equals(actualValue)) [ FD ]
Line_35 $$ Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation)-->Line_39 $$ for (Map.Entry<String, Object> entry : attributes.entrySet()) [ FD ]
Line_20 $$ Class<?> beanType = getBeanFactory().getType(bdHolder.getBeanName())-->Line_21 $$ if (beanType != null) [ FD ]
Line_2 $$ protected boolean checkQualifier(BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) -->Line_53 $$ actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)[ FD ]
Line_39 $$ for (Map.Entry<String, Object> entry : attributes.entrySet()) -->Line_40 $$ String attributeName = entry.getKey()[ FD ]
Line_4 $$ RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()-->Line_27 $$ if (targetAnnotation == null && bd.hasBeanClass()) [ FD ]
Line_2 $$ protected boolean checkQualifier(BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) -->Line_62 $$ return true[ CD ]
Line_2 $$ protected boolean checkQualifier(BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) -->Line_3 $$ Class<? extends Annotation> type = annotation.annotationType()[ CD ]
Line_3 $$ Class<? extends Annotation> type = annotation.annotationType()-->Line_7 $$ qualifier = bd.getQualifier(ClassUtils.getShortName(type))[ FD ]
Line_39 $$ for (Map.Entry<String, Object> entry : attributes.entrySet()) -->Line_41 $$ Object expectedValue = entry.getValue()[ FD ]
Line_41 $$ Object expectedValue = entry.getValue()-->Line_58 $$ if (!expectedValue.equals(actualValue)) [ FD ]
Line_3 $$ Class<? extends Annotation> type = annotation.annotationType()-->Line_5 $$ AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())[ FD ]
Line_4 $$ RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()-->Line_5 $$ AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())[ FD ]
Line_14 $$ targetAnnotation = getFactoryMethodAnnotation(dbd, type)-->Line_22 $$ targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)[ FD ]
Line_12 $$ RootBeanDefinition dbd = getResolvedDecoratedDefinition(bd)-->Line_14 $$ targetAnnotation = getFactoryMethodAnnotation(dbd, type)[ FD ]
Line_2 $$ protected boolean checkQualifier(BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) -->Line_4 $$ RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()[ CD ]
Line_2 $$ protected boolean checkQualifier(BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) -->Line_36 $$ if (attributes.isEmpty() && qualifier == null) [ CD ]
Line_3 $$ Class<? extends Annotation> type = annotation.annotationType()-->Line_10 $$ Annotation targetAnnotation = getFactoryMethodAnnotation(bd, type)[ FD ]
Line_42 $$ Object actualValue = null-->Line_47 $$ actualValue = bd.getAttribute(attributeName)[ FD ]
Line_47 $$ actualValue = bd.getAttribute(attributeName)-->Line_58 $$ if (!expectedValue.equals(actualValue)) [ FD ]
Line_31 $$ if (targetAnnotation != null && targetAnnotation.equals(annotation)) -->Line_32 $$ return true[ CD ]
Line_58 $$ if (!expectedValue.equals(actualValue)) -->Line_59 $$ return false[ CD ]
Line_17 $$ if (targetAnnotation == null) -->Line_27 $$ if (targetAnnotation == null && bd.hasBeanClass()) [ CD ]
Line_4 $$ RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()-->Line_10 $$ Annotation targetAnnotation = getFactoryMethodAnnotation(bd, type)[ FD ]
Line_44 $$ actualValue = qualifier.getAttribute(attributeName)-->Line_55 $$ if (actualValue != null) [ FD ]
Line_44 $$ actualValue = qualifier.getAttribute(attributeName)-->Line_56 $$ actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())[ FD ]
Line_55 $$ if (actualValue != null) -->Line_56 $$ actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())[ CD ]
Line_42 $$ Object actualValue = null-->Line_56 $$ actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())[ FD ]
Line_42 $$ Object actualValue = null-->Line_44 $$ actualValue = qualifier.getAttribute(attributeName)[ FD ]
Line_5 $$ AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())-->Line_44 $$ actualValue = qualifier.getAttribute(attributeName)[ FD ]
Line_4 $$ RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()-->Line_28 $$ targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)[ FD ]
Line_2 $$ protected boolean checkQualifier(BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) -->Line_6 $$ if (qualifier == null) [ CD ]
Line_3 $$ Class<? extends Annotation> type = annotation.annotationType()-->Line_14 $$ targetAnnotation = getFactoryMethodAnnotation(dbd, type)[ FD ]
Line_44 $$ actualValue = qualifier.getAttribute(attributeName)-->Line_46 $$ if (actualValue == null) [ FD ]
Line_17 $$ if (targetAnnotation == null) -->Line_18 $$ if (getBeanFactory() != null) [ CD ]
Line_7 $$ qualifier = bd.getQualifier(ClassUtils.getShortName(type))-->Line_9 $$ if (qualifier == null) [ FD ]
Line_5 $$ AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())-->Line_9 $$ if (qualifier == null) [ FD ]
Line_2 $$ protected boolean checkQualifier(BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) -->Line_9 $$ if (qualifier == null) [ CD ]
Line_14 $$ targetAnnotation = getFactoryMethodAnnotation(dbd, type)-->Line_17 $$ if (targetAnnotation == null) [ FD ]
Line_2 $$ protected boolean checkQualifier(BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) -->Line_35 $$ Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation)[ CD ]
Line_27 $$ if (targetAnnotation == null && bd.hasBeanClass()) -->Line_28 $$ targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)[ CD ]
Line_44 $$ actualValue = qualifier.getAttribute(attributeName)-->Line_53 $$ actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)[ FD ]
Line_53 $$ actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)-->Line_55 $$ if (actualValue != null) [ FD ]
Line_3 $$ Class<? extends Annotation> type = annotation.annotationType()-->Line_22 $$ targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)[ FD ]
Line_10 $$ Annotation targetAnnotation = getFactoryMethodAnnotation(bd, type)-->Line_17 $$ if (targetAnnotation == null) [ FD ]
Line_4 $$ RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()-->Line_7 $$ qualifier = bd.getQualifier(ClassUtils.getShortName(type))[ FD ]
Line_5 $$ AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())-->Line_43 $$ if (qualifier != null) [ FD ]
Line_43 $$ if (qualifier != null) -->Line_44 $$ actualValue = qualifier.getAttribute(attributeName)[ CD ]
Line_46 $$ if (actualValue == null) -->Line_47 $$ actualValue = bd.getAttribute(attributeName)[ CD ]
Line_4 $$ RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()-->Line_47 $$ actualValue = bd.getAttribute(attributeName)[ FD ]
Line_10 $$ Annotation targetAnnotation = getFactoryMethodAnnotation(bd, type)-->Line_14 $$ targetAnnotation = getFactoryMethodAnnotation(dbd, type)[ FD ]
Line_56 $$ actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())-->Line_58 $$ if (!expectedValue.equals(actualValue)) [ FD ]
Line_42 $$ Object actualValue = null-->Line_58 $$ if (!expectedValue.equals(actualValue)) [ FD ]
Line_9 $$ if (qualifier == null) -->Line_31 $$ if (targetAnnotation != null && targetAnnotation.equals(annotation)) [ CD ]
Line_11 $$ if (targetAnnotation == null) -->Line_12 $$ RootBeanDefinition dbd = getResolvedDecoratedDefinition(bd)[ CD ]
