Line_12 $$ Block block = blockBuilder.build()-->Line_13 $$ out.writeObject(block)[ FD ]
Line_2 $$ public static void output(State state, BlockBuilder out) -->Line_6 $$ Map<Double, Double> value = state.get().getBuckets()[ FD ]
Line_6 $$ Map<Double, Double> value = state.get().getBuckets()-->Line_7 $$ BlockBuilder blockBuilder = DoubleType.DOUBLE.createBlockBuilder(new BlockBuilderStatus(), value.size() * 2)[ FD ]
Line_8 $$ for (Map.Entry<Double, Double> entry : value.entrySet()) -->Line_9 $$ DoubleType.DOUBLE.writeDouble(blockBuilder, entry.getKey())[ FD ]
Line_2 $$ public static void output(State state, BlockBuilder out) -->Line_4 $$ out.appendNull()[ FD ]
Line_3 $$ if (state.get() == null) -->Line_13 $$ out.writeObject(block)[ CD ]
Line_2 $$ public static void output(State state, BlockBuilder out) -->Line_3 $$ if (state.get() == null) [ FD ]
Line_6 $$ Map<Double, Double> value = state.get().getBuckets()-->Line_8 $$ for (Map.Entry<Double, Double> entry : value.entrySet()) [ FD ]
Line_2 $$ public static void output(State state, BlockBuilder out) -->Line_3 $$ if (state.get() == null) [ CD ]
Line_7 $$ BlockBuilder blockBuilder = DoubleType.DOUBLE.createBlockBuilder(new BlockBuilderStatus(), value.size() * 2)-->Line_12 $$ Block block = blockBuilder.build()[ FD ]
Line_8 $$ for (Map.Entry<Double, Double> entry : value.entrySet()) -->Line_10 $$ DoubleType.DOUBLE.writeDouble(blockBuilder, entry.getValue())[ FD ]
Line_3 $$ if (state.get() == null) -->Line_7 $$ BlockBuilder blockBuilder = DoubleType.DOUBLE.createBlockBuilder(new BlockBuilderStatus(), value.size() * 2)[ CD ]
Line_3 $$ if (state.get() == null) -->Line_12 $$ Block block = blockBuilder.build()[ CD ]
Line_3 $$ if (state.get() == null) -->Line_4 $$ out.appendNull()[ CD ]
Line_2 $$ public static void output(State state, BlockBuilder out) -->Line_14 $$ out.closeEntry()[ FD ]
Line_3 $$ if (state.get() == null) -->Line_6 $$ Map<Double, Double> value = state.get().getBuckets()[ CD ]
Line_7 $$ BlockBuilder blockBuilder = DoubleType.DOUBLE.createBlockBuilder(new BlockBuilderStatus(), value.size() * 2)-->Line_10 $$ DoubleType.DOUBLE.writeDouble(blockBuilder, entry.getValue())[ FD ]
Line_3 $$ if (state.get() == null) -->Line_14 $$ out.closeEntry()[ CD ]
Line_2 $$ public static void output(State state, BlockBuilder out) -->Line_13 $$ out.writeObject(block)[ FD ]
Line_7 $$ BlockBuilder blockBuilder = DoubleType.DOUBLE.createBlockBuilder(new BlockBuilderStatus(), value.size() * 2)-->Line_9 $$ DoubleType.DOUBLE.writeDouble(blockBuilder, entry.getKey())[ FD ]
