Line_14 $$ int pos = buffer.indexOf(name)-->Line_16 $$ buffer.replace(pos, pos + name.length(), var.getValue())[ FD ]
Line_12 $$ for (Map.Entry<String, String> var : variables.entrySet()) -->Line_16 $$ buffer.replace(pos, pos + name.length(), var.getValue())[ FD ]
Line_11 $$ StringBuilder buffer = new StringBuilder(template)-->Line_16 $$ buffer.replace(pos, pos + name.length(), var.getValue())[ FD ]
Line_13 $$ String name = var.getKey()-->Line_14 $$ int pos = buffer.indexOf(name)[ FD ]
Line_13 $$ String name = var.getKey()-->Line_16 $$ buffer.replace(pos, pos + name.length(), var.getValue())[ FD ]
Line_2 $$ public static String loadTemplate(@NotNull ClassLoader loader, @NotNull String templateName, @Nullable Map<String, String> variables) throws IOException -->Line_11 $$ StringBuilder buffer = new StringBuilder(template)[ CD ]
Line_2 $$ public static String loadTemplate(@NotNull ClassLoader loader, @NotNull String templateName, @Nullable Map<String, String> variables) throws IOException -->Line_12 $$ for (Map.Entry<String, String> var : variables.entrySet()) [ FD ]
Line_12 $$ for (Map.Entry<String, String> var : variables.entrySet()) -->Line_13 $$ String name = var.getKey()[ FD ]
Line_14 $$ int pos = buffer.indexOf(name)-->Line_15 $$ if (pos >= 0) [ FD ]
Line_2 $$ public static String loadTemplate(@NotNull ClassLoader loader, @NotNull String templateName, @Nullable Map<String, String> variables) throws IOException -->Line_8 $$ if (variables == null || variables.size() == 0) [ FD ]
Line_8 $$ if (variables == null || variables.size() == 0) -->Line_9 $$ return template[ CD ]
Line_2 $$ public static String loadTemplate(@NotNull ClassLoader loader, @NotNull String templateName, @Nullable Map<String, String> variables) throws IOException -->Line_7 $$ String template = FileUtil.loadTextAndClose(new InputStreamReader(stream, CharsetToolkit.UTF8))[ CD ]
Line_2 $$ public static String loadTemplate(@NotNull ClassLoader loader, @NotNull String templateName, @Nullable Map<String, String> variables) throws IOException -->Line_8 $$ if (variables == null || variables.size() == 0) [ CD ]
Line_15 $$ if (pos >= 0) -->Line_16 $$ buffer.replace(pos, pos + name.length(), var.getValue())[ CD ]
Line_11 $$ StringBuilder buffer = new StringBuilder(template)-->Line_19 $$ return buffer.toString()[ FD ]
Line_3 $$ InputStream stream = loader.getResourceAsStream(templateName)-->Line_4 $$ if (stream == null) [ FD ]
Line_2 $$ public static String loadTemplate(@NotNull ClassLoader loader, @NotNull String templateName, @Nullable Map<String, String> variables) throws IOException -->Line_3 $$ InputStream stream = loader.getResourceAsStream(templateName)[ FD ]
Line_2 $$ public static String loadTemplate(@NotNull ClassLoader loader, @NotNull String templateName, @Nullable Map<String, String> variables) throws IOException -->Line_3 $$ InputStream stream = loader.getResourceAsStream(templateName)[ CD ]
Line_2 $$ public static String loadTemplate(@NotNull ClassLoader loader, @NotNull String templateName, @Nullable Map<String, String> variables) throws IOException -->Line_19 $$ return buffer.toString()[ CD ]
Line_11 $$ StringBuilder buffer = new StringBuilder(template)-->Line_14 $$ int pos = buffer.indexOf(name)[ FD ]
Line_2 $$ public static String loadTemplate(@NotNull ClassLoader loader, @NotNull String templateName, @Nullable Map<String, String> variables) throws IOException -->Line_4 $$ if (stream == null) [ CD ]
