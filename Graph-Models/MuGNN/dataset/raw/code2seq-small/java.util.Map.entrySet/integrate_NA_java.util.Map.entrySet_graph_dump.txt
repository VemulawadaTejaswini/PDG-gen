Line_4 $$ final EventListenerRegistry eventListenerRegistry = serviceRegistry.getService(EventListenerRegistry.class)-->Line_9 $$ eventListenerRegistry.setListeners(EventType.FLUSH, JpaFlushEventListener.INSTANCE)[ FD ]
Line_2 $$ public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) -->Line_5 $$ eventListenerRegistry.addDuplicationStrategy(JPA_DUPLICATION_STRATEGY)[ CD ]
Line_4 $$ final EventListenerRegistry eventListenerRegistry = serviceRegistry.getService(EventListenerRegistry.class)-->Line_13 $$ eventListenerRegistry.setListeners(EventType.SAVE, new JpaSaveEventListener())[ FD ]
Line_4 $$ final EventListenerRegistry eventListenerRegistry = serviceRegistry.getService(EventListenerRegistry.class)-->Line_16 $$ eventListenerRegistry.prependListeners(EventType.POST_INSERT, new JpaPostInsertEventListener())[ FD ]
Line_20 $$ for (Map.Entry entry : ((Map<?, ?>) cfgService.getSettings()).entrySet()) -->Line_21 $$ if (!String.class.isInstance(entry.getKey())) [ FD ]
Line_49 $$ if (CallbackRegistryConsumer.class.isInstance(listener)) -->Line_50 $$ ((CallbackRegistryConsumer) listener).injectCallbackRegistry(callbackRegistry)[ CD ]
Line_2 $$ public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) -->Line_40 $$ for (PersistentClass persistentClass : metadata.getEntityBindings()) [ FD ]
Line_24 $$ final String propertyName = (String) entry.getKey()-->Line_25 $$ if (!propertyName.startsWith(AvailableSettings.EVENT_LISTENER_PREFIX)) [ FD ]
Line_2 $$ public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) -->Line_14 $$ eventListenerRegistry.setListeners(EventType.SAVE_UPDATE, new JpaSaveOrUpdateEventListener())[ CD ]
Line_4 $$ final EventListenerRegistry eventListenerRegistry = serviceRegistry.getService(EventListenerRegistry.class)-->Line_8 $$ eventListenerRegistry.setListeners(EventType.FLUSH_ENTITY, new JpaFlushEntityEventListener())[ FD ]
Line_2 $$ public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) -->Line_19 $$ final ConfigurationService cfgService = serviceRegistry.getService(ConfigurationService.class)[ CD ]
Line_29 $$ final EventType eventType = EventType.resolveEventTypeByName(eventTypeName)-->Line_47 $$ final EventListenerGroup eventListenerGroup = eventListenerRegistry.getEventListenerGroup(eventType)[ FD ]
Line_4 $$ final EventListenerRegistry eventListenerRegistry = serviceRegistry.getService(EventListenerRegistry.class)-->Line_14 $$ eventListenerRegistry.setListeners(EventType.SAVE_UPDATE, new JpaSaveOrUpdateEventListener())[ FD ]
Line_48 $$ for (Object listener : eventListenerGroup.listeners()) -->Line_49 $$ if (CallbackRegistryConsumer.class.isInstance(listener)) [ FD ]
Line_2 $$ public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) -->Line_36 $$ this.callbackRegistry = new CallbackRegistryImpl()[ CD ]
Line_24 $$ final String propertyName = (String) entry.getKey()-->Line_28 $$ final String eventTypeName = propertyName.substring(AvailableSettings.EVENT_LISTENER_PREFIX.length() + 1)[ FD ]
Line_4 $$ final EventListenerRegistry eventListenerRegistry = serviceRegistry.getService(EventListenerRegistry.class)-->Line_47 $$ final EventListenerGroup eventListenerGroup = eventListenerRegistry.getEventListenerGroup(eventType)[ FD ]
Line_37 $$ final Object beanManagerRef = sessionFactory.getSessionFactoryOptions().getBeanManagerReference()-->Line_38 $$ this.jpaListenerFactory = beanManagerRef == null ? new StandardListenerFactory() : buildBeanManagerListenerFactory(beanManagerRef)[ FD ]
Line_40 $$ for (PersistentClass persistentClass : metadata.getEntityBindings()) -->Line_41 $$ if (persistentClass.getClassName() == null) [ FD ]
Line_2 $$ public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) -->Line_18 $$ eventListenerRegistry.prependListeners(EventType.POST_UPDATE, new JpaPostUpdateEventListener())[ CD ]
Line_20 $$ for (Map.Entry entry : ((Map<?, ?>) cfgService.getSettings()).entrySet()) -->Line_24 $$ final String propertyName = (String) entry.getKey()[ FD ]
Line_30 $$ final EventListenerGroup eventListenerGroup = eventListenerRegistry.getEventListenerGroup(eventType)-->Line_32 $$ eventListenerGroup.appendListener(instantiate(listenerImpl, serviceRegistry))[ FD ]
Line_2 $$ public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) -->Line_7 $$ eventListenerRegistry.setListeners(EventType.DELETE, new JpaDeleteEventListener())[ CD ]
Line_4 $$ final EventListenerRegistry eventListenerRegistry = serviceRegistry.getService(EventListenerRegistry.class)-->Line_6 $$ eventListenerRegistry.setListeners(EventType.AUTO_FLUSH, JpaAutoFlushEventListener.INSTANCE)[ FD ]
Line_2 $$ public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) -->Line_32 $$ eventListenerGroup.appendListener(instantiate(listenerImpl, serviceRegistry))[ FD ]
Line_2 $$ public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) -->Line_4 $$ final EventListenerRegistry eventListenerRegistry = serviceRegistry.getService(EventListenerRegistry.class)[ FD ]
Line_4 $$ final EventListenerRegistry eventListenerRegistry = serviceRegistry.getService(EventListenerRegistry.class)-->Line_12 $$ eventListenerRegistry.setListeners(EventType.PERSIST_ONFLUSH, new JpaPersistOnFlushEventListener())[ FD ]
Line_31 $$ for (String listenerImpl : ((String) entry.getValue()).split(" ,")) -->Line_32 $$ eventListenerGroup.appendListener(instantiate(listenerImpl, serviceRegistry))[ FD ]
Line_2 $$ public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) -->Line_15 $$ eventListenerRegistry.prependListeners(EventType.POST_DELETE, new JpaPostDeleteEventListener())[ CD ]
Line_2 $$ public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) -->Line_35 $$ final ReflectionManager reflectionManager = ((MetadataImpl) metadata).getMetadataBuildingOptions().getReflectionManager()[ CD ]
Line_4 $$ final EventListenerRegistry eventListenerRegistry = serviceRegistry.getService(EventListenerRegistry.class)-->Line_15 $$ eventListenerRegistry.prependListeners(EventType.POST_DELETE, new JpaPostDeleteEventListener())[ FD ]
Line_28 $$ final String eventTypeName = propertyName.substring(AvailableSettings.EVENT_LISTENER_PREFIX.length() + 1)-->Line_29 $$ final EventType eventType = EventType.resolveEventTypeByName(eventTypeName)[ FD ]
Line_2 $$ public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) -->Line_9 $$ eventListenerRegistry.setListeners(EventType.FLUSH, JpaFlushEventListener.INSTANCE)[ CD ]
Line_2 $$ public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) -->Line_17 $$ eventListenerRegistry.prependListeners(EventType.POST_LOAD, new JpaPostLoadEventListener())[ CD ]
Line_4 $$ final EventListenerRegistry eventListenerRegistry = serviceRegistry.getService(EventListenerRegistry.class)-->Line_7 $$ eventListenerRegistry.setListeners(EventType.DELETE, new JpaDeleteEventListener())[ FD ]
Line_2 $$ public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) -->Line_13 $$ eventListenerRegistry.setListeners(EventType.SAVE, new JpaSaveEventListener())[ CD ]
Line_2 $$ public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) -->Line_12 $$ eventListenerRegistry.setListeners(EventType.PERSIST_ONFLUSH, new JpaPersistOnFlushEventListener())[ CD ]
Line_4 $$ final EventListenerRegistry eventListenerRegistry = serviceRegistry.getService(EventListenerRegistry.class)-->Line_10 $$ eventListenerRegistry.setListeners(EventType.MERGE, new JpaMergeEventListener())[ FD ]
Line_40 $$ for (PersistentClass persistentClass : metadata.getEntityBindings()) -->Line_44 $$ callbackProcessor.processCallbacksForEntity(persistentClass.getClassName(), callbackRegistry)[ FD ]
Line_30 $$ final EventListenerGroup eventListenerGroup = eventListenerRegistry.getEventListenerGroup(eventType)-->Line_48 $$ for (Object listener : eventListenerGroup.listeners()) [ FD ]
Line_2 $$ public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) -->Line_16 $$ eventListenerRegistry.prependListeners(EventType.POST_INSERT, new JpaPostInsertEventListener())[ CD ]
Line_2 $$ public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) -->Line_4 $$ final EventListenerRegistry eventListenerRegistry = serviceRegistry.getService(EventListenerRegistry.class)[ CD ]
Line_2 $$ public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) -->Line_6 $$ eventListenerRegistry.setListeners(EventType.AUTO_FLUSH, JpaAutoFlushEventListener.INSTANCE)[ CD ]
Line_2 $$ public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) -->Line_37 $$ final Object beanManagerRef = sessionFactory.getSessionFactoryOptions().getBeanManagerReference()[ CD ]
Line_19 $$ final ConfigurationService cfgService = serviceRegistry.getService(ConfigurationService.class)-->Line_20 $$ for (Map.Entry entry : ((Map<?, ?>) cfgService.getSettings()).entrySet()) [ FD ]
Line_29 $$ final EventType eventType = EventType.resolveEventTypeByName(eventTypeName)-->Line_30 $$ final EventListenerGroup eventListenerGroup = eventListenerRegistry.getEventListenerGroup(eventType)[ FD ]
Line_20 $$ for (Map.Entry entry : ((Map<?, ?>) cfgService.getSettings()).entrySet()) -->Line_31 $$ for (String listenerImpl : ((String) entry.getValue()).split(" ,")) [ FD ]
Line_4 $$ final EventListenerRegistry eventListenerRegistry = serviceRegistry.getService(EventListenerRegistry.class)-->Line_5 $$ eventListenerRegistry.addDuplicationStrategy(JPA_DUPLICATION_STRATEGY)[ FD ]
Line_4 $$ final EventListenerRegistry eventListenerRegistry = serviceRegistry.getService(EventListenerRegistry.class)-->Line_17 $$ eventListenerRegistry.prependListeners(EventType.POST_LOAD, new JpaPostLoadEventListener())[ FD ]
Line_4 $$ final EventListenerRegistry eventListenerRegistry = serviceRegistry.getService(EventListenerRegistry.class)-->Line_11 $$ eventListenerRegistry.setListeners(EventType.PERSIST, new JpaPersistEventListener())[ FD ]
Line_4 $$ final EventListenerRegistry eventListenerRegistry = serviceRegistry.getService(EventListenerRegistry.class)-->Line_18 $$ eventListenerRegistry.prependListeners(EventType.POST_UPDATE, new JpaPostUpdateEventListener())[ FD ]
Line_2 $$ public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) -->Line_19 $$ final ConfigurationService cfgService = serviceRegistry.getService(ConfigurationService.class)[ FD ]
Line_2 $$ public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) -->Line_3 $$ CascadeStyles.registerCascadeStyle("persist", new PersistCascadeStyle())[ CD ]
Line_2 $$ public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) -->Line_38 $$ this.jpaListenerFactory = beanManagerRef == null ? new StandardListenerFactory() : buildBeanManagerListenerFactory(beanManagerRef)[ CD ]
Line_2 $$ public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) -->Line_39 $$ this.callbackProcessor = new LegacyCallbackProcessor(jpaListenerFactory, reflectionManager)[ CD ]
Line_2 $$ public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) -->Line_37 $$ final Object beanManagerRef = sessionFactory.getSessionFactoryOptions().getBeanManagerReference()[ FD ]
Line_2 $$ public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) -->Line_10 $$ eventListenerRegistry.setListeners(EventType.MERGE, new JpaMergeEventListener())[ CD ]
Line_2 $$ public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) -->Line_8 $$ eventListenerRegistry.setListeners(EventType.FLUSH_ENTITY, new JpaFlushEntityEventListener())[ CD ]
Line_2 $$ public void integrate(Metadata metadata, SessionFactoryImplementor sessionFactory, SessionFactoryServiceRegistry serviceRegistry) -->Line_11 $$ eventListenerRegistry.setListeners(EventType.PERSIST, new JpaPersistEventListener())[ CD ]
Line_4 $$ final EventListenerRegistry eventListenerRegistry = serviceRegistry.getService(EventListenerRegistry.class)-->Line_30 $$ final EventListenerGroup eventListenerGroup = eventListenerRegistry.getEventListenerGroup(eventType)[ FD ]
