Line_5 $$ Verb verb = entry.getKey()-->Line_10 $$ ret.add(String.format("%s messages were dropped in last %d ms: %d for internal timeout and %d for cross node timeout." + " Mean internal dropped latency: %d ms and Mean cross-node dropped latency: %d ms", verb, LOG_DROPPED_INTERVAL_IN_MS, droppedInternalTimeout, droppedCrossNodeTimeout, TimeUnit.NANOSECONDS.toMillis((long) droppedMessages.metrics.internalDroppedLatency.getSnapshot().getMean()), TimeUnit.NANOSECONDS.toMillis((long) droppedMessages.metrics.crossNodeDroppedLatency.getSnapshot().getMean())))[ FD ]
Line_7 $$ int droppedInternalTimeout = droppedMessages.droppedInternalTimeout.getAndSet(0)-->Line_10 $$ ret.add(String.format("%s messages were dropped in last %d ms: %d for internal timeout and %d for cross node timeout." + " Mean internal dropped latency: %d ms and Mean cross-node dropped latency: %d ms", verb, LOG_DROPPED_INTERVAL_IN_MS, droppedInternalTimeout, droppedCrossNodeTimeout, TimeUnit.NANOSECONDS.toMillis((long) droppedMessages.metrics.internalDroppedLatency.getSnapshot().getMean()), TimeUnit.NANOSECONDS.toMillis((long) droppedMessages.metrics.crossNodeDroppedLatency.getSnapshot().getMean())))[ FD ]
Line_8 $$ int droppedCrossNodeTimeout = droppedMessages.droppedCrossNodeTimeout.getAndSet(0)-->Line_10 $$ ret.add(String.format("%s messages were dropped in last %d ms: %d for internal timeout and %d for cross node timeout." + " Mean internal dropped latency: %d ms and Mean cross-node dropped latency: %d ms", verb, LOG_DROPPED_INTERVAL_IN_MS, droppedInternalTimeout, droppedCrossNodeTimeout, TimeUnit.NANOSECONDS.toMillis((long) droppedMessages.metrics.internalDroppedLatency.getSnapshot().getMean()), TimeUnit.NANOSECONDS.toMillis((long) droppedMessages.metrics.crossNodeDroppedLatency.getSnapshot().getMean())))[ FD ]
Line_4 $$ for (Map.Entry<Verb, DroppedMessages> entry : droppedMessagesMap.entrySet()) -->Line_6 $$ DroppedMessages droppedMessages = entry.getValue()[ FD ]
Line_2 $$ List<String> getDroppedMessagesLogs() -->Line_13 $$ return ret[ CD ]
Line_3 $$ List<String> ret = new ArrayList()-->Line_10 $$ ret.add(String.format("%s messages were dropped in last %d ms: %d for internal timeout and %d for cross node timeout." + " Mean internal dropped latency: %d ms and Mean cross-node dropped latency: %d ms", verb, LOG_DROPPED_INTERVAL_IN_MS, droppedInternalTimeout, droppedCrossNodeTimeout, TimeUnit.NANOSECONDS.toMillis((long) droppedMessages.metrics.internalDroppedLatency.getSnapshot().getMean()), TimeUnit.NANOSECONDS.toMillis((long) droppedMessages.metrics.crossNodeDroppedLatency.getSnapshot().getMean())))[ FD ]
Line_4 $$ for (Map.Entry<Verb, DroppedMessages> entry : droppedMessagesMap.entrySet()) -->Line_5 $$ Verb verb = entry.getKey()[ FD ]
Line_2 $$ List<String> getDroppedMessagesLogs() -->Line_3 $$ List<String> ret = new ArrayList()[ CD ]
Line_9 $$ if (droppedInternalTimeout > 0 || droppedCrossNodeTimeout > 0) -->Line_10 $$ ret.add(String.format("%s messages were dropped in last %d ms: %d for internal timeout and %d for cross node timeout." + " Mean internal dropped latency: %d ms and Mean cross-node dropped latency: %d ms", verb, LOG_DROPPED_INTERVAL_IN_MS, droppedInternalTimeout, droppedCrossNodeTimeout, TimeUnit.NANOSECONDS.toMillis((long) droppedMessages.metrics.internalDroppedLatency.getSnapshot().getMean()), TimeUnit.NANOSECONDS.toMillis((long) droppedMessages.metrics.crossNodeDroppedLatency.getSnapshot().getMean())))[ CD ]
