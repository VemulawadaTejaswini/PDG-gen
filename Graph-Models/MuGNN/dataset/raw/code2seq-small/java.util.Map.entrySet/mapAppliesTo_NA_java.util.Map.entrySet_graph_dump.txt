Line_4 $$ while (iter.hasNext()) -->Line_5 $$ if (!conditionIter.hasNext())[ CD ]
Line_2 $$ static boolean mapAppliesTo(MapType type, Iterator<Cell> iter, Map<ByteBuffer, ByteBuffer> elements, Operator operator) -->Line_4 $$ while (iter.hasNext()) [ FD ]
Line_9 $$ int comparison = type.getKeysType().compare(c.path().get(0), conditionEntry.getKey())-->Line_10 $$ if (comparison != 0)[ FD ]
Line_13 $$ if (comparison != 0)-->Line_14 $$ return evaluateComparisonWithOperator(comparison, operator)[ CD ]
Line_2 $$ static boolean mapAppliesTo(MapType type, Iterator<Cell> iter, Map<ByteBuffer, ByteBuffer> elements, Operator operator) -->Line_14 $$ return evaluateComparisonWithOperator(comparison, operator)[ FD ]
Line_9 $$ int comparison = type.getKeysType().compare(c.path().get(0), conditionEntry.getKey())-->Line_12 $$ comparison = type.getValuesType().compare(c.value(), conditionEntry.getValue())[ FD ]
Line_8 $$ Cell c = iter.next()-->Line_9 $$ int comparison = type.getKeysType().compare(c.path().get(0), conditionEntry.getKey())[ FD ]
Line_9 $$ int comparison = type.getKeysType().compare(c.path().get(0), conditionEntry.getKey())-->Line_14 $$ return evaluateComparisonWithOperator(comparison, operator)[ FD ]
Line_4 $$ while (iter.hasNext()) -->Line_7 $$ Map.Entry<ByteBuffer, ByteBuffer> conditionEntry = conditionIter.next()[ CD ]
Line_9 $$ int comparison = type.getKeysType().compare(c.path().get(0), conditionEntry.getKey())-->Line_11 $$ return evaluateComparisonWithOperator(comparison, operator)[ FD ]
Line_2 $$ static boolean mapAppliesTo(MapType type, Iterator<Cell> iter, Map<ByteBuffer, ByteBuffer> elements, Operator operator) -->Line_3 $$ Iterator<Map.Entry<ByteBuffer, ByteBuffer>> conditionIter = elements.entrySet().iterator()[ FD ]
Line_3 $$ Iterator<Map.Entry<ByteBuffer, ByteBuffer>> conditionIter = elements.entrySet().iterator()-->Line_5 $$ if (!conditionIter.hasNext())[ FD ]
Line_2 $$ static boolean mapAppliesTo(MapType type, Iterator<Cell> iter, Map<ByteBuffer, ByteBuffer> elements, Operator operator) -->Line_3 $$ Iterator<Map.Entry<ByteBuffer, ByteBuffer>> conditionIter = elements.entrySet().iterator()[ CD ]
Line_7 $$ Map.Entry<ByteBuffer, ByteBuffer> conditionEntry = conditionIter.next()-->Line_9 $$ int comparison = type.getKeysType().compare(c.path().get(0), conditionEntry.getKey())[ FD ]
Line_9 $$ int comparison = type.getKeysType().compare(c.path().get(0), conditionEntry.getKey())-->Line_13 $$ if (comparison != 0)[ FD ]
Line_3 $$ Iterator<Map.Entry<ByteBuffer, ByteBuffer>> conditionIter = elements.entrySet().iterator()-->Line_7 $$ Map.Entry<ByteBuffer, ByteBuffer> conditionEntry = conditionIter.next()[ FD ]
Line_2 $$ static boolean mapAppliesTo(MapType type, Iterator<Cell> iter, Map<ByteBuffer, ByteBuffer> elements, Operator operator) -->Line_16 $$ if (conditionIter.hasNext())[ CD ]
Line_5 $$ if (!conditionIter.hasNext())-->Line_6 $$ return (operator == Operator.GT) || (operator == Operator.GTE) || (operator == Operator.NEQ)[ CD ]
Line_12 $$ comparison = type.getValuesType().compare(c.value(), conditionEntry.getValue())-->Line_13 $$ if (comparison != 0)[ FD ]
Line_4 $$ while (iter.hasNext()) -->Line_9 $$ int comparison = type.getKeysType().compare(c.path().get(0), conditionEntry.getKey())[ CD ]
Line_4 $$ while (iter.hasNext()) -->Line_12 $$ comparison = type.getValuesType().compare(c.value(), conditionEntry.getValue())[ CD ]
Line_2 $$ static boolean mapAppliesTo(MapType type, Iterator<Cell> iter, Map<ByteBuffer, ByteBuffer> elements, Operator operator) -->Line_12 $$ comparison = type.getValuesType().compare(c.value(), conditionEntry.getValue())[ FD ]
Line_7 $$ Map.Entry<ByteBuffer, ByteBuffer> conditionEntry = conditionIter.next()-->Line_12 $$ comparison = type.getValuesType().compare(c.value(), conditionEntry.getValue())[ FD ]
Line_12 $$ comparison = type.getValuesType().compare(c.value(), conditionEntry.getValue())-->Line_11 $$ return evaluateComparisonWithOperator(comparison, operator)[ FD ]
Line_4 $$ while (iter.hasNext()) -->Line_13 $$ if (comparison != 0)[ CD ]
Line_4 $$ while (iter.hasNext()) -->Line_10 $$ if (comparison != 0)[ CD ]
Line_3 $$ Iterator<Map.Entry<ByteBuffer, ByteBuffer>> conditionIter = elements.entrySet().iterator()-->Line_16 $$ if (conditionIter.hasNext())[ FD ]
Line_12 $$ comparison = type.getValuesType().compare(c.value(), conditionEntry.getValue())-->Line_14 $$ return evaluateComparisonWithOperator(comparison, operator)[ FD ]
Line_2 $$ static boolean mapAppliesTo(MapType type, Iterator<Cell> iter, Map<ByteBuffer, ByteBuffer> elements, Operator operator) -->Line_8 $$ Cell c = iter.next()[ FD ]
Line_2 $$ static boolean mapAppliesTo(MapType type, Iterator<Cell> iter, Map<ByteBuffer, ByteBuffer> elements, Operator operator) -->Line_18 $$ return operator == Operator.EQ || operator == Operator.LTE || operator == Operator.GTE[ CD ]
Line_12 $$ comparison = type.getValuesType().compare(c.value(), conditionEntry.getValue())-->Line_10 $$ if (comparison != 0)[ FD ]
Line_2 $$ static boolean mapAppliesTo(MapType type, Iterator<Cell> iter, Map<ByteBuffer, ByteBuffer> elements, Operator operator) -->Line_11 $$ return evaluateComparisonWithOperator(comparison, operator)[ FD ]
Line_2 $$ static boolean mapAppliesTo(MapType type, Iterator<Cell> iter, Map<ByteBuffer, ByteBuffer> elements, Operator operator) -->Line_4 $$ while (iter.hasNext()) [ CD ]
Line_16 $$ if (conditionIter.hasNext())-->Line_17 $$ return (operator == Operator.LT) || (operator == Operator.LTE) || (operator == Operator.NEQ)[ CD ]
Line_10 $$ if (comparison != 0)-->Line_11 $$ return evaluateComparisonWithOperator(comparison, operator)[ CD ]
Line_2 $$ static boolean mapAppliesTo(MapType type, Iterator<Cell> iter, Map<ByteBuffer, ByteBuffer> elements, Operator operator) -->Line_9 $$ int comparison = type.getKeysType().compare(c.path().get(0), conditionEntry.getKey())[ FD ]
Line_4 $$ while (iter.hasNext()) -->Line_8 $$ Cell c = iter.next()[ CD ]
Line_8 $$ Cell c = iter.next()-->Line_12 $$ comparison = type.getValuesType().compare(c.value(), conditionEntry.getValue())[ FD ]
