Line_2 $$ public static void flushTask(@NotNull final Task task, @NotNull final File taskDirectory) -->Line_3 $$ FileUtil.createDirectory(taskDirectory)[ FD ]
Line_2 $$ public static void flushTask(@NotNull final Task task, @NotNull final File taskDirectory) -->Line_32 $$ FileUtil.writeToFile(taskText, task.getText())[ FD ]
Line_7 $$ final File file = new File(taskDirectory, name)-->Line_8 $$ FileUtil.createIfDoesntExist(file)[ FD ]
Line_7 $$ final File file = new File(taskDirectory, name)-->Line_13 $$ FileUtil.writeToFile(file, taskFile.text)[ FD ]
Line_29 $$ final File taskText = new File(taskDirectory, "task.html")-->Line_30 $$ FileUtil.createIfDoesntExist(taskText)[ FD ]
Line_19 $$ final Map<String, String> testsText = task.getTestsText()-->Line_20 $$ for (Map.Entry<String, String> entry : testsText.entrySet()) [ FD ]
Line_2 $$ public static void flushTask(@NotNull final Task task, @NotNull final File taskDirectory) -->Line_29 $$ final File taskText = new File(taskDirectory, "task.html")[ CD ]
Line_20 $$ for (Map.Entry<String, String> entry : testsText.entrySet()) -->Line_21 $$ final File testsFile = new File(taskDirectory, entry.getKey())[ FD ]
Line_2 $$ public static void flushTask(@NotNull final Task task, @NotNull final File taskDirectory) -->Line_3 $$ FileUtil.createDirectory(taskDirectory)[ CD ]
Line_7 $$ final File file = new File(taskDirectory, name)-->Line_11 $$ FileUtil.writeToFile(file, Base64.decodeBase64(taskFile.text))[ FD ]
Line_2 $$ public static void flushTask(@NotNull final Task task, @NotNull final File taskDirectory) -->Line_30 $$ FileUtil.createIfDoesntExist(taskText)[ CD ]
Line_10 $$ if (EduUtils.isImage(taskFile.name)) -->Line_11 $$ FileUtil.writeToFile(file, Base64.decodeBase64(taskFile.text))[ CD ]
Line_4 $$ for (Map.Entry<String, TaskFile> taskFileEntry : task.taskFiles.entrySet()) -->Line_6 $$ final TaskFile taskFile = taskFileEntry.getValue()[ FD ]
Line_2 $$ public static void flushTask(@NotNull final Task task, @NotNull final File taskDirectory) -->Line_19 $$ final Map<String, String> testsText = task.getTestsText()[ FD ]
Line_10 $$ if (EduUtils.isImage(taskFile.name)) -->Line_13 $$ FileUtil.writeToFile(file, taskFile.text)[ CD ]
Line_29 $$ final File taskText = new File(taskDirectory, "task.html")-->Line_32 $$ FileUtil.writeToFile(taskText, task.getText())[ FD ]
Line_4 $$ for (Map.Entry<String, TaskFile> taskFileEntry : task.taskFiles.entrySet()) -->Line_5 $$ final String name = taskFileEntry.getKey()[ FD ]
Line_21 $$ final File testsFile = new File(taskDirectory, entry.getKey())-->Line_24 $$ FileUtil.writeToFile(testsFile, entry.getValue())[ FD ]
Line_2 $$ public static void flushTask(@NotNull final Task task, @NotNull final File taskDirectory) -->Line_19 $$ final Map<String, String> testsText = task.getTestsText()[ CD ]
Line_21 $$ final File testsFile = new File(taskDirectory, entry.getKey())-->Line_22 $$ FileUtil.createIfDoesntExist(testsFile)[ FD ]
Line_20 $$ for (Map.Entry<String, String> entry : testsText.entrySet()) -->Line_24 $$ FileUtil.writeToFile(testsFile, entry.getValue())[ FD ]
