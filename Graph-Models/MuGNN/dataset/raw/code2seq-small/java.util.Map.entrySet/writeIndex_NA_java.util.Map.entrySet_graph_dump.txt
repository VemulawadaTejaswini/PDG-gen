Line_3 $$ Output indexOutput-->Line_15 $$ indexOutput.writeInt(regions.size(), true)[ FD ]
Line_3 $$ Output indexOutput-->Line_19 $$ indexOutput.writeLong(id, true)[ FD ]
Line_16 $$ for (Map.Entry<Long, TestCaseRegion> testCaseEntry : regions.entrySet()) -->Line_17 $$ long id = testCaseEntry.getKey()[ FD ]
Line_11 $$ for (Map.Entry<Long, Map<Long, TestCaseRegion>> classEntry : index.entrySet()) -->Line_12 $$ Long classId = classEntry.getKey()[ FD ]
Line_5 $$ indexOutput = new Output(new FileOutputStream(getIndexFile()))-->Line_15 $$ indexOutput.writeInt(regions.size(), true)[ FD ]
Line_12 $$ Long classId = classEntry.getKey()-->Line_14 $$ indexOutput.writeLong(classId, true)[ FD ]
Line_5 $$ indexOutput = new Output(new FileOutputStream(getIndexFile()))-->Line_20 $$ indexOutput.writeLong(region.stdOutRegion.start)[ FD ]
Line_16 $$ for (Map.Entry<Long, TestCaseRegion> testCaseEntry : regions.entrySet()) -->Line_18 $$ TestCaseRegion region = testCaseEntry.getValue()[ FD ]
Line_3 $$ Output indexOutput-->Line_21 $$ indexOutput.writeLong(region.stdOutRegion.stop)[ FD ]
Line_3 $$ Output indexOutput-->Line_14 $$ indexOutput.writeLong(classId, true)[ FD ]
Line_17 $$ long id = testCaseEntry.getKey()-->Line_19 $$ indexOutput.writeLong(id, true)[ FD ]
Line_5 $$ indexOutput = new Output(new FileOutputStream(getIndexFile()))-->Line_19 $$ indexOutput.writeLong(id, true)[ FD ]
Line_3 $$ Output indexOutput-->Line_23 $$ indexOutput.writeLong(region.stdErrRegion.stop)[ FD ]
Line_5 $$ indexOutput = new Output(new FileOutputStream(getIndexFile()))-->Line_23 $$ indexOutput.writeLong(region.stdErrRegion.stop)[ FD ]
Line_5 $$ indexOutput = new Output(new FileOutputStream(getIndexFile()))-->Line_22 $$ indexOutput.writeLong(region.stdErrRegion.start)[ FD ]
Line_13 $$ Map<Long, TestCaseRegion> regions = classEntry.getValue()-->Line_15 $$ indexOutput.writeInt(regions.size(), true)[ FD ]
Line_3 $$ Output indexOutput-->Line_27 $$ indexOutput.close()[ FD ]
Line_5 $$ indexOutput = new Output(new FileOutputStream(getIndexFile()))-->Line_27 $$ indexOutput.close()[ FD ]
Line_5 $$ indexOutput = new Output(new FileOutputStream(getIndexFile()))-->Line_21 $$ indexOutput.writeLong(region.stdOutRegion.stop)[ FD ]
Line_3 $$ Output indexOutput-->Line_22 $$ indexOutput.writeLong(region.stdErrRegion.start)[ FD ]
Line_5 $$ indexOutput = new Output(new FileOutputStream(getIndexFile()))-->Line_14 $$ indexOutput.writeLong(classId, true)[ FD ]
Line_3 $$ Output indexOutput-->Line_20 $$ indexOutput.writeLong(region.stdOutRegion.start)[ FD ]
Line_2 $$ private void writeIndex() -->Line_3 $$ Output indexOutput[ CD ]
Line_3 $$ Output indexOutput-->Line_5 $$ indexOutput = new Output(new FileOutputStream(getIndexFile()))[ FD ]
Line_13 $$ Map<Long, TestCaseRegion> regions = classEntry.getValue()-->Line_16 $$ for (Map.Entry<Long, TestCaseRegion> testCaseEntry : regions.entrySet()) [ FD ]
Line_3 $$ Output indexOutput-->Line_10 $$ indexOutput.writeInt(index.size(), true)[ FD ]
Line_5 $$ indexOutput = new Output(new FileOutputStream(getIndexFile()))-->Line_10 $$ indexOutput.writeInt(index.size(), true)[ FD ]
Line_11 $$ for (Map.Entry<Long, Map<Long, TestCaseRegion>> classEntry : index.entrySet()) -->Line_13 $$ Map<Long, TestCaseRegion> regions = classEntry.getValue()[ FD ]
