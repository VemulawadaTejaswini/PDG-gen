Line_25 $$ UnsyncByteArrayOutputStream unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()-->Line_27 $$ String message = unsyncByteArrayOutputStream.toString()[ FD ]
Line_19 $$ for (String outputName : outputNames) -->Line_21 $$ outputObjects.put(outputName, pyObject.__tojava__(Object.class))[ FD ]
Line_18 $$ Map<String, Object> outputObjects = new HashMap()-->Line_21 $$ outputObjects.put(outputName, pyObject.__tojava__(Object.class))[ FD ]
Line_7 $$ PyCode compiledScript = getCompiledScript(script)-->Line_14 $$ interactiveInterpreter.exec(compiledScript)[ FD ]
Line_10 $$ String key = entry.getKey()-->Line_12 $$ interactiveInterpreter.set(key, value)[ FD ]
Line_19 $$ for (String outputName : outputNames) -->Line_20 $$ PyObject pyObject = interactiveInterpreter.get(outputName)[ FD ]
Line_2 $$ public Map<String, Object> eval(Set<String> allowedClasses, Map<String, Object> inputObjects, Set<String> outputNames, String script, ClassLoader... classLoaders) throws ScriptingException -->Line_3 $$ if (allowedClasses != null) [ FD ]
Line_11 $$ Object value = entry.getValue()-->Line_12 $$ interactiveInterpreter.set(key, value)[ FD ]
Line_8 $$ InteractiveInterpreter interactiveInterpreter = new InteractiveInterpreter()-->Line_12 $$ interactiveInterpreter.set(key, value)[ FD ]
Line_9 $$ for (Map.Entry<String, Object> entry : inputObjects.entrySet()) -->Line_10 $$ String key = entry.getKey()[ FD ]
Line_8 $$ InteractiveInterpreter interactiveInterpreter = new InteractiveInterpreter()-->Line_20 $$ PyObject pyObject = interactiveInterpreter.get(outputName)[ FD ]
Line_8 $$ InteractiveInterpreter interactiveInterpreter = new InteractiveInterpreter()-->Line_14 $$ interactiveInterpreter.exec(compiledScript)[ FD ]
Line_15 $$ if (outputNames == null) -->Line_16 $$ return null[ CD ]
Line_9 $$ for (Map.Entry<String, Object> entry : inputObjects.entrySet()) -->Line_11 $$ Object value = entry.getValue()[ FD ]
Line_20 $$ PyObject pyObject = interactiveInterpreter.get(outputName)-->Line_21 $$ outputObjects.put(outputName, pyObject.__tojava__(Object.class))[ FD ]
Line_2 $$ public Map<String, Object> eval(Set<String> allowedClasses, Map<String, Object> inputObjects, Set<String> outputNames, String script, ClassLoader... classLoaders) throws ScriptingException -->Line_15 $$ if (outputNames == null) [ FD ]
Line_2 $$ public Map<String, Object> eval(Set<String> allowedClasses, Map<String, Object> inputObjects, Set<String> outputNames, String script, ClassLoader... classLoaders) throws ScriptingException -->Line_9 $$ for (Map.Entry<String, Object> entry : inputObjects.entrySet()) [ FD ]
Line_2 $$ public Map<String, Object> eval(Set<String> allowedClasses, Map<String, Object> inputObjects, Set<String> outputNames, String script, ClassLoader... classLoaders) throws ScriptingException -->Line_3 $$ if (allowedClasses != null) [ CD ]
Line_2 $$ public Map<String, Object> eval(Set<String> allowedClasses, Map<String, Object> inputObjects, Set<String> outputNames, String script, ClassLoader... classLoaders) throws ScriptingException -->Line_7 $$ PyCode compiledScript = getCompiledScript(script)[ FD ]
