Line_2 $$ public Integer call() -->Line_98 $$ if (ret != 0) [ CD ]
Line_39 $$ String pidFileSubpath = getPidFileSubpath(appIdStr, containerIdStr)-->Line_40 $$ pidFilePath = dirsHandler.getLocalPathForWrite(pidFileSubpath)[ FD ]
Line_3 $$ final ContainerLaunchContext launchContext = container.getLaunchContext()-->Line_62 $$ writeLaunchEnv(containerScriptOutStream, environment, localResources, launchContext.getCommands())[ FD ]
Line_4 $$ Map<Path, List<String>> localResources = null-->Line_14 $$ localResources = container.getLocalizedResources()[ FD ]
Line_2 $$ public Integer call() -->Line_3 $$ final ContainerLaunchContext launchContext = container.getLaunchContext()[ CD ]
Line_14 $$ localResources = container.getLocalizedResources()-->Line_62 $$ writeLaunchEnv(containerScriptOutStream, environment, localResources, launchContext.getCommands())[ FD ]
Line_20 $$ String appIdStr = app.getAppId().toString()-->Line_39 $$ String pidFileSubpath = getPidFileSubpath(appIdStr, containerIdStr)[ FD ]
Line_71 $$ if (!shouldLaunchContainer.compareAndSet(false, true)) -->Line_72 $$ LOG.info("Container " + containerIdStr + " not launched as " + "cleanup already called")[ CD ]
Line_2 $$ public Integer call() -->Line_5 $$ ContainerId containerID = container.getContainerId()[ CD ]
Line_76 $$ ret = exec.launchContainer(container, nmPrivateContainerScriptPath, nmPrivateTokensPath, user, appIdStr, containerWorkDir, localDirs, logDirs)-->Line_86 $$ context.getNMStateStore().storeContainerCompleted(containerID, ret)[ FD ]
Line_20 $$ String appIdStr = app.getAppId().toString()-->Line_35 $$ Path nmPrivateTokensPath = dirsHandler.getLocalPathForWrite(getContainerPrivateDir(appIdStr, containerIdStr) + Path.SEPARATOR + String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, containerIdStr))[ FD ]
Line_8 $$ int ret = -1-->Line_73 $$ ret = ExitCode.TERMINATED.getExitCode()[ FD ]
Line_41 $$ List<String> localDirs = dirsHandler.getLocalDirs()-->Line_76 $$ ret = exec.launchContainer(container, nmPrivateContainerScriptPath, nmPrivateTokensPath, user, appIdStr, containerWorkDir, localDirs, logDirs)[ FD ]
Line_2 $$ public Integer call() -->Line_6 $$ String containerIdStr = ConverterUtils.toString(containerID)[ CD ]
Line_48 $$ ret = ContainerExitStatus.DISKS_FAILED-->Line_98 $$ if (ret != 0) [ FD ]
Line_18 $$ final String user = container.getUser()-->Line_76 $$ ret = exec.launchContainer(container, nmPrivateContainerScriptPath, nmPrivateTokensPath, user, appIdStr, containerWorkDir, localDirs, logDirs)[ FD ]
Line_35 $$ Path nmPrivateTokensPath = dirsHandler.getLocalPathForWrite(getContainerPrivateDir(appIdStr, containerIdStr) + Path.SEPARATOR + String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, containerIdStr))-->Line_63 $$ tokensOutStream = lfs.create(nmPrivateTokensPath, EnumSet.of(CREATE, OVERWRITE))[ FD ]
Line_38 $$ Path containerWorkDir = dirsHandler.getLocalPathForWrite(ContainerLocalizer.USERCACHE + Path.SEPARATOR + user + Path.SEPARATOR + ContainerLocalizer.APPCACHE + Path.SEPARATOR + appIdStr + Path.SEPARATOR + containerIdStr, LocalDirAllocator.SIZE_UNKNOWN, false)-->Line_61 $$ sanitizeEnv(environment, containerWorkDir, appDirs, containerLogDirs, localResources)[ FD ]
Line_14 $$ localResources = container.getLocalizedResources()-->Line_61 $$ sanitizeEnv(environment, containerWorkDir, appDirs, containerLogDirs, localResources)[ FD ]
Line_43 $$ List<String> containerLogDirs = new ArrayList<String>()-->Line_45 $$ containerLogDirs.add(logDir + Path.SEPARATOR + relativeContainerLogDir)[ FD ]
Line_21 $$ String relativeContainerLogDir = ContainerLaunch.getRelativeContainerLogDir(appIdStr, containerIdStr)-->Line_22 $$ Path containerLogDir = dirsHandler.getLogPathForWrite(relativeContainerLogDir, false)[ FD ]
Line_28 $$ for (Entry<String, String> entry : environment.entrySet()) -->Line_31 $$ entry.setValue(value)[ FD ]
Line_94 $$ if (ret == ExitCode.FORCE_KILLED.getExitCode() || ret == ExitCode.TERMINATED.getExitCode()) -->Line_96 $$ return ret[ CD ]
Line_6 $$ String containerIdStr = ConverterUtils.toString(containerID)-->Line_21 $$ String relativeContainerLogDir = ContainerLaunch.getRelativeContainerLogDir(appIdStr, containerIdStr)[ FD ]
Line_2 $$ public Integer call() -->Line_4 $$ Map<Path, List<String>> localResources = null[ CD ]
Line_59 $$ containerScriptOutStream = lfs.create(nmPrivateContainerScriptPath, EnumSet.of(CREATE, OVERWRITE))-->Line_67 $$ IOUtils.cleanup(LOG, containerScriptOutStream, tokensOutStream)[ FD ]
Line_27 $$ Map<String, String> environment = launchContext.getEnvironment()-->Line_62 $$ writeLaunchEnv(containerScriptOutStream, environment, localResources, launchContext.getCommands())[ FD ]
Line_35 $$ Path nmPrivateTokensPath = dirsHandler.getLocalPathForWrite(getContainerPrivateDir(appIdStr, containerIdStr) + Path.SEPARATOR + String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, containerIdStr))-->Line_76 $$ ret = exec.launchContainer(container, nmPrivateContainerScriptPath, nmPrivateTokensPath, user, appIdStr, containerWorkDir, localDirs, logDirs)[ FD ]
Line_8 $$ int ret = -1-->Line_86 $$ context.getNMStateStore().storeContainerCompleted(containerID, ret)[ FD ]
Line_30 $$ value = expandEnvironment(value, containerLogDir)-->Line_31 $$ entry.setValue(value)[ FD ]
Line_5 $$ ContainerId containerID = container.getContainerId()-->Line_84 $$ exec.deactivateContainer(containerID)[ FD ]
Line_98 $$ if (ret != 0) -->Line_99 $$ LOG.warn("Container exited with a non-zero exit code " + ret)[ CD ]
Line_37 $$ DataOutputStream tokensOutStream = null-->Line_65 $$ creds.writeTokenStorageToStream(tokensOutStream)[ FD ]
Line_29 $$ String value = entry.getValue()-->Line_31 $$ entry.setValue(value)[ FD ]
Line_47 $$ if (!dirsHandler.areDisksHealthy()) -->Line_48 $$ ret = ContainerExitStatus.DISKS_FAILED[ CD ]
Line_36 $$ DataOutputStream containerScriptOutStream = null-->Line_67 $$ IOUtils.cleanup(LOG, containerScriptOutStream, tokensOutStream)[ FD ]
Line_4 $$ Map<Path, List<String>> localResources = null-->Line_61 $$ sanitizeEnv(environment, containerWorkDir, appDirs, containerLogDirs, localResources)[ FD ]
Line_2 $$ public Integer call() -->Line_9 $$ if (container.getContainerState() == ContainerState.KILLING) [ CD ]
Line_34 $$ Path nmPrivateContainerScriptPath = dirsHandler.getLocalPathForWrite(getContainerPrivateDir(appIdStr, containerIdStr) + Path.SEPARATOR + CONTAINER_SCRIPT)-->Line_76 $$ ret = exec.launchContainer(container, nmPrivateContainerScriptPath, nmPrivateTokensPath, user, appIdStr, containerWorkDir, localDirs, logDirs)[ FD ]
Line_41 $$ List<String> localDirs = dirsHandler.getLocalDirs()-->Line_52 $$ List<Path> appDirs = new ArrayList<Path>(localDirs.size())[ FD ]
Line_71 $$ if (!shouldLaunchContainer.compareAndSet(false, true)) -->Line_75 $$ exec.activateContainer(containerID, pidFilePath)[ CD ]
Line_76 $$ ret = exec.launchContainer(container, nmPrivateContainerScriptPath, nmPrivateTokensPath, user, appIdStr, containerWorkDir, localDirs, logDirs)-->Line_98 $$ if (ret != 0) [ FD ]
Line_48 $$ ret = ContainerExitStatus.DISKS_FAILED-->Line_76 $$ ret = exec.launchContainer(container, nmPrivateContainerScriptPath, nmPrivateTokensPath, user, appIdStr, containerWorkDir, localDirs, logDirs)[ FD ]
Line_2 $$ public Integer call() -->Line_104 $$ dispatcher.getEventHandler().handle(new ContainerEvent(containerID, ContainerEventType.CONTAINER_EXITED_WITH_SUCCESS))[ CD ]
Line_7 $$ final List<String> command = launchContext.getCommands()-->Line_19 $$ List<String> newCmds = new ArrayList<String>(command.size())[ FD ]
Line_42 $$ List<String> logDirs = dirsHandler.getLogDirs()-->Line_76 $$ ret = exec.launchContainer(container, nmPrivateContainerScriptPath, nmPrivateTokensPath, user, appIdStr, containerWorkDir, localDirs, logDirs)[ FD ]
Line_20 $$ String appIdStr = app.getAppId().toString()-->Line_76 $$ ret = exec.launchContainer(container, nmPrivateContainerScriptPath, nmPrivateTokensPath, user, appIdStr, containerWorkDir, localDirs, logDirs)[ FD ]
Line_48 $$ ret = ContainerExitStatus.DISKS_FAILED-->Line_86 $$ context.getNMStateStore().storeContainerCompleted(containerID, ret)[ FD ]
Line_2 $$ public Integer call() -->Line_94 $$ if (ret == ExitCode.FORCE_KILLED.getExitCode() || ret == ExitCode.TERMINATED.getExitCode()) [ CD ]
Line_29 $$ String value = entry.getValue()-->Line_30 $$ value = expandEnvironment(value, containerLogDir)[ FD ]
Line_5 $$ ContainerId containerID = container.getContainerId()-->Line_6 $$ String containerIdStr = ConverterUtils.toString(containerID)[ FD ]
Line_19 $$ List<String> newCmds = new ArrayList<String>(command.size())-->Line_26 $$ launchContext.setCommands(newCmds)[ FD ]
Line_5 $$ ContainerId containerID = container.getContainerId()-->Line_86 $$ context.getNMStateStore().storeContainerCompleted(containerID, ret)[ FD ]
Line_27 $$ Map<String, String> environment = launchContext.getEnvironment()-->Line_61 $$ sanitizeEnv(environment, containerWorkDir, appDirs, containerLogDirs, localResources)[ FD ]
Line_64 $$ Credentials creds = container.getCredentials()-->Line_65 $$ creds.writeTokenStorageToStream(tokensOutStream)[ FD ]
Line_8 $$ int ret = -1-->Line_98 $$ if (ret != 0) [ FD ]
Line_14 $$ localResources = container.getLocalizedResources()-->Line_15 $$ if (localResources == null) [ FD ]
Line_73 $$ ret = ExitCode.TERMINATED.getExitCode()-->Line_98 $$ if (ret != 0) [ FD ]
Line_4 $$ Map<Path, List<String>> localResources = null-->Line_62 $$ writeLaunchEnv(containerScriptOutStream, environment, localResources, launchContext.getCommands())[ FD ]
Line_8 $$ int ret = -1-->Line_76 $$ ret = exec.launchContainer(container, nmPrivateContainerScriptPath, nmPrivateTokensPath, user, appIdStr, containerWorkDir, localDirs, logDirs)[ FD ]
Line_98 $$ if (ret != 0) -->Line_100 $$ this.dispatcher.getEventHandler().handle(new ContainerExitEvent(containerID, ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret, "Container exited with a non-zero exit code " + ret))[ CD ]
Line_3 $$ final ContainerLaunchContext launchContext = container.getLaunchContext()-->Line_27 $$ Map<String, String> environment = launchContext.getEnvironment()[ FD ]
Line_52 $$ List<Path> appDirs = new ArrayList<Path>(localDirs.size())-->Line_61 $$ sanitizeEnv(environment, containerWorkDir, appDirs, containerLogDirs, localResources)[ FD ]
Line_94 $$ if (ret == ExitCode.FORCE_KILLED.getExitCode() || ret == ExitCode.TERMINATED.getExitCode()) -->Line_95 $$ dispatcher.getEventHandler().handle(new ContainerExitEvent(containerID, ContainerEventType.CONTAINER_KILLED_ON_REQUEST, ret, "Container exited with a non-zero exit code " + ret))[ CD ]
Line_63 $$ tokensOutStream = lfs.create(nmPrivateTokensPath, EnumSet.of(CREATE, OVERWRITE))-->Line_65 $$ creds.writeTokenStorageToStream(tokensOutStream)[ FD ]
Line_52 $$ List<Path> appDirs = new ArrayList<Path>(localDirs.size())-->Line_57 $$ appDirs.add(new Path(appsdir, appIdStr))[ FD ]
Line_22 $$ Path containerLogDir = dirsHandler.getLogPathForWrite(relativeContainerLogDir, false)-->Line_30 $$ value = expandEnvironment(value, containerLogDir)[ FD ]
Line_9 $$ if (container.getContainerState() == ContainerState.KILLING) -->Line_11 $$ return 0[ CD ]
Line_73 $$ ret = ExitCode.TERMINATED.getExitCode()-->Line_86 $$ context.getNMStateStore().storeContainerCompleted(containerID, ret)[ FD ]
Line_27 $$ Map<String, String> environment = launchContext.getEnvironment()-->Line_60 $$ environment.put(ApplicationConstants.CONTAINER_TOKEN_FILE_ENV_NAME, new Path(containerWorkDir, FINAL_CONTAINER_TOKENS_FILE).toUri().getPath())[ FD ]
Line_20 $$ String appIdStr = app.getAppId().toString()-->Line_34 $$ Path nmPrivateContainerScriptPath = dirsHandler.getLocalPathForWrite(getContainerPrivateDir(appIdStr, containerIdStr) + Path.SEPARATOR + CONTAINER_SCRIPT)[ FD ]
Line_37 $$ DataOutputStream tokensOutStream = null-->Line_67 $$ IOUtils.cleanup(LOG, containerScriptOutStream, tokensOutStream)[ FD ]
Line_71 $$ if (!shouldLaunchContainer.compareAndSet(false, true)) -->Line_76 $$ ret = exec.launchContainer(container, nmPrivateContainerScriptPath, nmPrivateTokensPath, user, appIdStr, containerWorkDir, localDirs, logDirs)[ CD ]
Line_5 $$ ContainerId containerID = container.getContainerId()-->Line_75 $$ exec.activateContainer(containerID, pidFilePath)[ FD ]
Line_73 $$ ret = ExitCode.TERMINATED.getExitCode()-->Line_76 $$ ret = exec.launchContainer(container, nmPrivateContainerScriptPath, nmPrivateTokensPath, user, appIdStr, containerWorkDir, localDirs, logDirs)[ FD ]
Line_28 $$ for (Entry<String, String> entry : environment.entrySet()) -->Line_29 $$ String value = entry.getValue()[ FD ]
Line_38 $$ Path containerWorkDir = dirsHandler.getLocalPathForWrite(ContainerLocalizer.USERCACHE + Path.SEPARATOR + user + Path.SEPARATOR + ContainerLocalizer.APPCACHE + Path.SEPARATOR + appIdStr + Path.SEPARATOR + containerIdStr, LocalDirAllocator.SIZE_UNKNOWN, false)-->Line_76 $$ ret = exec.launchContainer(container, nmPrivateContainerScriptPath, nmPrivateTokensPath, user, appIdStr, containerWorkDir, localDirs, logDirs)[ FD ]
Line_2 $$ public Integer call() -->Line_91 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_23 $$ for (String str : command) -->Line_24 $$ newCmds.add(expandEnvironment(str, containerLogDir))[ FD ]
Line_27 $$ Map<String, String> environment = launchContext.getEnvironment()-->Line_28 $$ for (Entry<String, String> entry : environment.entrySet()) [ FD ]
Line_2 $$ public Integer call() -->Line_8 $$ int ret = -1[ CD ]
Line_36 $$ DataOutputStream containerScriptOutStream = null-->Line_59 $$ containerScriptOutStream = lfs.create(nmPrivateContainerScriptPath, EnumSet.of(CREATE, OVERWRITE))[ FD ]
Line_71 $$ if (!shouldLaunchContainer.compareAndSet(false, true)) -->Line_73 $$ ret = ExitCode.TERMINATED.getExitCode()[ CD ]
Line_36 $$ DataOutputStream containerScriptOutStream = null-->Line_62 $$ writeLaunchEnv(containerScriptOutStream, environment, localResources, launchContext.getCommands())[ FD ]
Line_33 $$ FileContext lfs = FileContext.getLocalFSFileContext()-->Line_63 $$ tokensOutStream = lfs.create(nmPrivateTokensPath, EnumSet.of(CREATE, OVERWRITE))[ FD ]
Line_59 $$ containerScriptOutStream = lfs.create(nmPrivateContainerScriptPath, EnumSet.of(CREATE, OVERWRITE))-->Line_62 $$ writeLaunchEnv(containerScriptOutStream, environment, localResources, launchContext.getCommands())[ FD ]
Line_9 $$ if (container.getContainerState() == ContainerState.KILLING) -->Line_10 $$ dispatcher.getEventHandler().handle(new ContainerExitEvent(containerID, ContainerEventType.CONTAINER_KILLED_ON_REQUEST, Shell.WINDOWS ? ExitCode.FORCE_KILLED.getExitCode() : ExitCode.TERMINATED.getExitCode(), "Container terminated before launch."))[ CD ]
Line_4 $$ Map<Path, List<String>> localResources = null-->Line_15 $$ if (localResources == null) [ FD ]
Line_2 $$ public Integer call() -->Line_105 $$ return 0[ CD ]
Line_6 $$ String containerIdStr = ConverterUtils.toString(containerID)-->Line_34 $$ Path nmPrivateContainerScriptPath = dirsHandler.getLocalPathForWrite(getContainerPrivateDir(appIdStr, containerIdStr) + Path.SEPARATOR + CONTAINER_SCRIPT)[ FD ]
Line_22 $$ Path containerLogDir = dirsHandler.getLogPathForWrite(relativeContainerLogDir, false)-->Line_24 $$ newCmds.add(expandEnvironment(str, containerLogDir))[ FD ]
Line_20 $$ String appIdStr = app.getAppId().toString()-->Line_21 $$ String relativeContainerLogDir = ContainerLaunch.getRelativeContainerLogDir(appIdStr, containerIdStr)[ FD ]
Line_5 $$ ContainerId containerID = container.getContainerId()-->Line_70 $$ context.getNMStateStore().storeContainerLaunched(containerID)[ FD ]
Line_6 $$ String containerIdStr = ConverterUtils.toString(containerID)-->Line_35 $$ Path nmPrivateTokensPath = dirsHandler.getLocalPathForWrite(getContainerPrivateDir(appIdStr, containerIdStr) + Path.SEPARATOR + String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, containerIdStr))[ FD ]
Line_98 $$ if (ret != 0) -->Line_101 $$ return ret[ CD ]
Line_63 $$ tokensOutStream = lfs.create(nmPrivateTokensPath, EnumSet.of(CREATE, OVERWRITE))-->Line_67 $$ IOUtils.cleanup(LOG, containerScriptOutStream, tokensOutStream)[ FD ]
Line_34 $$ Path nmPrivateContainerScriptPath = dirsHandler.getLocalPathForWrite(getContainerPrivateDir(appIdStr, containerIdStr) + Path.SEPARATOR + CONTAINER_SCRIPT)-->Line_59 $$ containerScriptOutStream = lfs.create(nmPrivateContainerScriptPath, EnumSet.of(CREATE, OVERWRITE))[ FD ]
Line_48 $$ ret = ContainerExitStatus.DISKS_FAILED-->Line_73 $$ ret = ExitCode.TERMINATED.getExitCode()[ FD ]
Line_3 $$ final ContainerLaunchContext launchContext = container.getLaunchContext()-->Line_7 $$ final List<String> command = launchContext.getCommands()[ FD ]
Line_19 $$ List<String> newCmds = new ArrayList<String>(command.size())-->Line_24 $$ newCmds.add(expandEnvironment(str, containerLogDir))[ FD ]
Line_91 $$ if (LOG.isDebugEnabled()) -->Line_92 $$ LOG.debug("Container " + containerIdStr + " completed with exit code " + ret)[ CD ]
Line_3 $$ final ContainerLaunchContext launchContext = container.getLaunchContext()-->Line_26 $$ launchContext.setCommands(newCmds)[ FD ]
Line_43 $$ List<String> containerLogDirs = new ArrayList<String>()-->Line_61 $$ sanitizeEnv(environment, containerWorkDir, appDirs, containerLogDirs, localResources)[ FD ]
Line_6 $$ String containerIdStr = ConverterUtils.toString(containerID)-->Line_39 $$ String pidFileSubpath = getPidFileSubpath(appIdStr, containerIdStr)[ FD ]
Line_8 $$ int ret = -1-->Line_48 $$ ret = ContainerExitStatus.DISKS_FAILED[ FD ]
Line_2 $$ public Integer call() -->Line_7 $$ final List<String> command = launchContext.getCommands()[ CD ]
Line_37 $$ DataOutputStream tokensOutStream = null-->Line_63 $$ tokensOutStream = lfs.create(nmPrivateTokensPath, EnumSet.of(CREATE, OVERWRITE))[ FD ]
Line_2 $$ public Integer call() -->Line_103 $$ LOG.info("Container " + containerIdStr + " succeeded ")[ CD ]
Line_33 $$ FileContext lfs = FileContext.getLocalFSFileContext()-->Line_59 $$ containerScriptOutStream = lfs.create(nmPrivateContainerScriptPath, EnumSet.of(CREATE, OVERWRITE))[ FD ]
