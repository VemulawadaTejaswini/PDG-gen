Line_3 $$ XMLContext context = new XMLContext()-->Line_9 $$ context.addMapping(mapping)[ FD ]
Line_14 $$ if (!ObjectUtils.isEmpty(targetPackages)) -->Line_15 $$ context.addPackages(targetPackages)[ CD ]
Line_2 $$ protected XMLContext createXMLContext(Resource[] mappingLocations, Class<?>[] targetClasses, String[] targetPackages) throws MappingException, ResolverException, IOException -->Line_12 $$ context.addClasses(targetClasses)[ FD ]
Line_5 $$ Mapping mapping = new Mapping()-->Line_9 $$ context.addMapping(mapping)[ FD ]
Line_11 $$ if (!ObjectUtils.isEmpty(targetClasses)) -->Line_12 $$ context.addClasses(targetClasses)[ CD ]
Line_2 $$ protected XMLContext createXMLContext(Resource[] mappingLocations, Class<?>[] targetClasses, String[] targetPackages) throws MappingException, ResolverException, IOException -->Line_11 $$ if (!ObjectUtils.isEmpty(targetClasses)) [ CD ]
Line_2 $$ protected XMLContext createXMLContext(Resource[] mappingLocations, Class<?>[] targetClasses, String[] targetPackages) throws MappingException, ResolverException, IOException -->Line_17 $$ if (this.castorProperties != null) [ CD ]
Line_2 $$ protected XMLContext createXMLContext(Resource[] mappingLocations, Class<?>[] targetClasses, String[] targetPackages) throws MappingException, ResolverException, IOException -->Line_14 $$ if (!ObjectUtils.isEmpty(targetPackages)) [ CD ]
Line_4 $$ if (!ObjectUtils.isEmpty(mappingLocations)) -->Line_9 $$ context.addMapping(mapping)[ CD ]
Line_2 $$ protected XMLContext createXMLContext(Resource[] mappingLocations, Class<?>[] targetClasses, String[] targetPackages) throws MappingException, ResolverException, IOException -->Line_4 $$ if (!ObjectUtils.isEmpty(mappingLocations)) [ FD ]
Line_3 $$ XMLContext context = new XMLContext()-->Line_19 $$ context.setProperty(property.getKey(), property.getValue())[ FD ]
Line_2 $$ protected XMLContext createXMLContext(Resource[] mappingLocations, Class<?>[] targetClasses, String[] targetPackages) throws MappingException, ResolverException, IOException -->Line_11 $$ if (!ObjectUtils.isEmpty(targetClasses)) [ FD ]
Line_4 $$ if (!ObjectUtils.isEmpty(mappingLocations)) -->Line_5 $$ Mapping mapping = new Mapping()[ CD ]
Line_3 $$ XMLContext context = new XMLContext()-->Line_15 $$ context.addPackages(targetPackages)[ FD ]
Line_2 $$ protected XMLContext createXMLContext(Resource[] mappingLocations, Class<?>[] targetClasses, String[] targetPackages) throws MappingException, ResolverException, IOException -->Line_22 $$ return context[ CD ]
Line_18 $$ for (Map.Entry<String, String> property : this.castorProperties.entrySet()) -->Line_19 $$ context.setProperty(property.getKey(), property.getValue())[ FD ]
Line_6 $$ for (Resource mappingLocation : mappingLocations) -->Line_7 $$ mapping.loadMapping(SaxResourceUtils.createInputSource(mappingLocation))[ FD ]
Line_2 $$ protected XMLContext createXMLContext(Resource[] mappingLocations, Class<?>[] targetClasses, String[] targetPackages) throws MappingException, ResolverException, IOException -->Line_3 $$ XMLContext context = new XMLContext()[ CD ]
Line_2 $$ protected XMLContext createXMLContext(Resource[] mappingLocations, Class<?>[] targetClasses, String[] targetPackages) throws MappingException, ResolverException, IOException -->Line_14 $$ if (!ObjectUtils.isEmpty(targetPackages)) [ FD ]
Line_2 $$ protected XMLContext createXMLContext(Resource[] mappingLocations, Class<?>[] targetClasses, String[] targetPackages) throws MappingException, ResolverException, IOException -->Line_4 $$ if (!ObjectUtils.isEmpty(mappingLocations)) [ CD ]
Line_2 $$ protected XMLContext createXMLContext(Resource[] mappingLocations, Class<?>[] targetClasses, String[] targetPackages) throws MappingException, ResolverException, IOException -->Line_15 $$ context.addPackages(targetPackages)[ FD ]
Line_5 $$ Mapping mapping = new Mapping()-->Line_7 $$ mapping.loadMapping(SaxResourceUtils.createInputSource(mappingLocation))[ FD ]
Line_3 $$ XMLContext context = new XMLContext()-->Line_12 $$ context.addClasses(targetClasses)[ FD ]
