Line_6 $$ Hash hash = parseHash(entry.getValue())-->Line_8 $$ resolved.put(refName, hash)[ FD ]
Line_2 $$ private static Map<String, Hash> getResolvedHashes(@NotNull Map<String, String> data) -->Line_3 $$ Map<String, Hash> resolved = ContainerUtil.newHashMap()[ CD ]
Line_2 $$ private static Map<String, Hash> getResolvedHashes(@NotNull Map<String, String> data) -->Line_11 $$ return resolved[ CD ]
Line_6 $$ Hash hash = parseHash(entry.getValue())-->Line_7 $$ if (hash != null && !duplicateEntry(resolved, refName, hash)) [ FD ]
Line_5 $$ String refName = entry.getKey()-->Line_7 $$ if (hash != null && !duplicateEntry(resolved, refName, hash)) [ FD ]
Line_3 $$ Map<String, Hash> resolved = ContainerUtil.newHashMap()-->Line_8 $$ resolved.put(refName, hash)[ FD ]
Line_4 $$ for (Map.Entry<String, String> entry : data.entrySet()) -->Line_5 $$ String refName = entry.getKey()[ FD ]
Line_7 $$ if (hash != null && !duplicateEntry(resolved, refName, hash)) -->Line_8 $$ resolved.put(refName, hash)[ CD ]
Line_5 $$ String refName = entry.getKey()-->Line_8 $$ resolved.put(refName, hash)[ FD ]
Line_2 $$ private static Map<String, Hash> getResolvedHashes(@NotNull Map<String, String> data) -->Line_4 $$ for (Map.Entry<String, String> entry : data.entrySet()) [ FD ]
Line_3 $$ Map<String, Hash> resolved = ContainerUtil.newHashMap()-->Line_7 $$ if (hash != null && !duplicateEntry(resolved, refName, hash)) [ FD ]
Line_4 $$ for (Map.Entry<String, String> entry : data.entrySet()) -->Line_6 $$ Hash hash = parseHash(entry.getValue())[ FD ]
