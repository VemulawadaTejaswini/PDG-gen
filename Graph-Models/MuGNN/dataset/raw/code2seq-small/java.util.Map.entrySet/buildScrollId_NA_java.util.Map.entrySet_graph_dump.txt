Line_3 $$ StringBuilder sb = new StringBuilder().append(type).append(';')-->Line_4 $$ sb.append(searchPhaseResults.asList().size()).append(';')[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder().append(type).append(';')-->Line_14 $$ sb.append(entry.getKey()).append(':').append(entry.getValue()).append(';')[ FD ]
Line_5 $$ for (AtomicArray.Entry<? extends SearchPhaseResult> entry : searchPhaseResults.asList()) -->Line_14 $$ sb.append(entry.getKey()).append(':').append(entry.getValue()).append(';')[ FD ]
Line_2 $$ public static String buildScrollId(String type, AtomicArray<? extends SearchPhaseResult> searchPhaseResults, @Nullable Map<String, String> attributes) throws IOException -->Line_13 $$ for (Map.Entry<String, String> entry : attributes.entrySet()) [ FD ]
Line_2 $$ public static String buildScrollId(String type, AtomicArray<? extends SearchPhaseResult> searchPhaseResults, @Nullable Map<String, String> attributes) throws IOException -->Line_5 $$ for (AtomicArray.Entry<? extends SearchPhaseResult> entry : searchPhaseResults.asList()) [ FD ]
Line_2 $$ public static String buildScrollId(String type, AtomicArray<? extends SearchPhaseResult> searchPhaseResults, @Nullable Map<String, String> attributes) throws IOException -->Line_9 $$ if (attributes == null) [ FD ]
Line_2 $$ public static String buildScrollId(String type, AtomicArray<? extends SearchPhaseResult> searchPhaseResults, @Nullable Map<String, String> attributes) throws IOException -->Line_12 $$ sb.append(attributes.size()).append(";")[ FD ]
Line_2 $$ public static String buildScrollId(String type, AtomicArray<? extends SearchPhaseResult> searchPhaseResults, @Nullable Map<String, String> attributes) throws IOException -->Line_9 $$ if (attributes == null) [ CD ]
Line_9 $$ if (attributes == null) -->Line_10 $$ sb.append("0;")[ CD ]
Line_2 $$ public static String buildScrollId(String type, AtomicArray<? extends SearchPhaseResult> searchPhaseResults, @Nullable Map<String, String> attributes) throws IOException -->Line_4 $$ sb.append(searchPhaseResults.asList().size()).append(';')[ CD ]
Line_2 $$ public static String buildScrollId(String type, AtomicArray<? extends SearchPhaseResult> searchPhaseResults, @Nullable Map<String, String> attributes) throws IOException -->Line_3 $$ StringBuilder sb = new StringBuilder().append(type).append(';')[ FD ]
Line_2 $$ public static String buildScrollId(String type, AtomicArray<? extends SearchPhaseResult> searchPhaseResults, @Nullable Map<String, String> attributes) throws IOException -->Line_3 $$ StringBuilder sb = new StringBuilder().append(type).append(';')[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder().append(type).append(';')-->Line_10 $$ sb.append("0;")[ FD ]
Line_2 $$ public static String buildScrollId(String type, AtomicArray<? extends SearchPhaseResult> searchPhaseResults, @Nullable Map<String, String> attributes) throws IOException -->Line_4 $$ sb.append(searchPhaseResults.asList().size()).append(';')[ FD ]
Line_2 $$ public static String buildScrollId(String type, AtomicArray<? extends SearchPhaseResult> searchPhaseResults, @Nullable Map<String, String> attributes) throws IOException -->Line_17 $$ BytesRef bytesRef = new BytesRef(sb)[ CD ]
Line_9 $$ if (attributes == null) -->Line_12 $$ sb.append(attributes.size()).append(";")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder().append(type).append(';')-->Line_12 $$ sb.append(attributes.size()).append(";")[ FD ]
Line_6 $$ SearchPhaseResult searchPhaseResult = entry.value-->Line_7 $$ sb.append(searchPhaseResult.id()).append(':').append(searchPhaseResult.shardTarget().nodeId()).append(';')[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder().append(type).append(';')-->Line_7 $$ sb.append(searchPhaseResult.id()).append(':').append(searchPhaseResult.shardTarget().nodeId()).append(';')[ FD ]
Line_2 $$ public static String buildScrollId(String type, AtomicArray<? extends SearchPhaseResult> searchPhaseResults, @Nullable Map<String, String> attributes) throws IOException -->Line_18 $$ return Base64.encodeBytes(bytesRef.bytes, bytesRef.offset, bytesRef.length, Base64.URL_SAFE)[ CD ]
