Line_97 $$ if (assetLinkEntryIdsString != null) -->Line_99 $$ serviceContext.setAssetLinkEntryIds(assetLinkEntryIds)[ CD ]
Line_105 $$ String[] assetTagNames = StringUtil.split(assetTagNamesString)-->Line_106 $$ serviceContext.setAssetTagNames(assetTagNames)[ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_92 $$ serviceContext.setAssetCategoryIds(assetCategoryIds)[ FD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_17 $$ serviceContext.setPlid(themeDisplay.getPlid())[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_64 $$ PortletPreferencesIds portletPreferencesIds = PortletPreferencesFactoryUtil.getPortletPreferencesIds(request, portletId)[ CD ]
Line_98 $$ long[] assetLinkEntryIds = StringUtil.split(assetLinkEntryIdsString, 0L)-->Line_99 $$ serviceContext.setAssetLinkEntryIds(assetLinkEntryIds)[ FD ]
Line_5 $$ if (serviceContext != null) -->Line_20 $$ serviceContext.setTimeZone(themeDisplay.getTimeZone())[ CD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_23 $$ serviceContext.setUserId(user.getUserId())[ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_20 $$ serviceContext.setTimeZone(themeDisplay.getTimeZone())[ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()[ FD ]
Line_108 $$ int workflowAction = ParamUtil.getInteger(portletRequest, "workflowAction", WorkflowConstants.ACTION_PUBLISH)-->Line_109 $$ serviceContext.setWorkflowAction(workflowAction)[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_54 $$ boolean addGuestPermissions = ParamUtil.getBoolean(portletRequest, "addGuestPermissions")[ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_17 $$ serviceContext.setPlid(themeDisplay.getPlid())[ FD ]
Line_62 $$ HttpServletRequest request = PortalUtil.getHttpServletRequest(portletRequest)-->Line_76 $$ serviceContext.setRequest(request)[ FD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_19 $$ serviceContext.setSignedIn(themeDisplay.isSignedIn())[ FD ]
Line_96 $$ String assetLinkEntryIdsString = request.getParameter("assetLinksSearchContainerPrimaryKeys")-->Line_98 $$ long[] assetLinkEntryIds = StringUtil.split(assetLinkEntryIdsString, 0L)[ FD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_12 $$ serviceContext.setLayoutURL(PortalUtil.getLayoutURL(themeDisplay))[ FD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_109 $$ serviceContext.setWorkflowAction(workflowAction)[ FD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_60 $$ serviceContext.setGuestPermissions(guestPermissions)[ FD ]
Line_5 $$ if (serviceContext != null) -->Line_15 $$ serviceContext.setPathFriendlyURLPublic(PortalUtil.getPathFriendlyURLPublic())[ CD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_45 $$ if (formDateLong > 0) [ CD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_5 $$ if (serviceContext != null) [ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_18 $$ serviceContext.setPortalURL(PortalUtil.getPortalURL(portletRequest))[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_40 $$ String cmd = ParamUtil.getString(portletRequest, Constants.CMD)[ FD ]
Line_5 $$ if (serviceContext != null) -->Line_23 $$ serviceContext.setUserId(user.getUserId())[ CD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_44 $$ long formDateLong = ParamUtil.getLong(portletRequest, "formDate")[ FD ]
Line_27 $$ Enumeration<String> enu = portletRequest.getParameterNames()-->Line_67 $$ enu = request.getHeaderNames()[ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_13 $$ serviceContext.setPathFriendlyURLPrivateGroup(PortalUtil.getPathFriendlyURLPrivateGroup())[ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_16 $$ serviceContext.setPathMain(PortalUtil.getPathMain())[ FD ]
Line_70 $$ String value = request.getHeader(header)-->Line_71 $$ headerMap.put(header, value)[ FD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_15 $$ serviceContext.setPathFriendlyURLPublic(PortalUtil.getPathFriendlyURLPublic())[ FD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_22 $$ serviceContext.setUserDisplayURL(user.getDisplayURL(themeDisplay))[ FD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_59 $$ serviceContext.setGroupPermissions(groupPermissions)[ FD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_65 $$ serviceContext.setPortletPreferencesIds(portletPreferencesIds)[ FD ]
Line_31 $$ if (ArrayUtil.isNotEmpty(values)) -->Line_32 $$ if (values.length == 1) [ CD ]
Line_69 $$ String header = enu.nextElement()-->Line_70 $$ String value = request.getHeader(header)[ FD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_75 $$ serviceContext.setRemoteHost(request.getRemoteHost())[ FD ]
Line_62 $$ HttpServletRequest request = PortalUtil.getHttpServletRequest(portletRequest)-->Line_103 $$ String assetTagNamesString = request.getParameter("assetTagNames")[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_53 $$ boolean addGroupPermissions = ParamUtil.getBoolean(portletRequest, "addGroupPermissions")[ FD ]
Line_50 $$ if (!modelPermissions.isEmpty()) -->Line_56 $$ String[] guestPermissions = PortalUtil.getGuestPermissions(portletRequest)[ CD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_39 $$ serviceContext.setAttributes(attributes)[ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_14 $$ serviceContext.setPathFriendlyURLPrivateUser(PortalUtil.getPathFriendlyURLPrivateUser())[ FD ]
Line_101 $$ Double assetPriority = ParamUtil.getDouble(request, "assetPriority")-->Line_102 $$ serviceContext.setAssetPriority(assetPriority)[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_97 $$ if (assetLinkEntryIdsString != null) [ CD ]
Line_4 $$ ThemeDisplay themeDisplay = (ThemeDisplay) portletRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_17 $$ serviceContext.setPlid(themeDisplay.getPlid())[ FD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_92 $$ serviceContext.setAssetCategoryIds(assetCategoryIds)[ FD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_60 $$ serviceContext.setGuestPermissions(guestPermissions)[ FD ]
Line_55 $$ String[] groupPermissions = PortalUtil.getGroupPermissions(portletRequest)-->Line_59 $$ serviceContext.setGroupPermissions(groupPermissions)[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_104 $$ if (assetTagNamesString != null) [ CD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_76 $$ serviceContext.setRequest(request)[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_102 $$ serviceContext.setAssetPriority(assetPriority)[ CD ]
Line_26 $$ Map<String, Serializable> attributes = new HashMap()-->Line_35 $$ attributes.put(param, values)[ FD ]
Line_78 $$ List<Long> assetCategoryIdsList = new ArrayList()-->Line_91 $$ long[] assetCategoryIds = ArrayUtil.toArray(assetCategoryIdsList.toArray(new Long[assetCategoryIdsList.size()]))[ FD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_99 $$ serviceContext.setAssetLinkEntryIds(assetLinkEntryIds)[ FD ]
Line_62 $$ HttpServletRequest request = PortalUtil.getHttpServletRequest(portletRequest)-->Line_74 $$ serviceContext.setRemoteAddr(request.getRemoteAddr())[ FD ]
Line_5 $$ if (serviceContext != null) -->Line_14 $$ serviceContext.setPathFriendlyURLPrivateUser(PortalUtil.getPathFriendlyURLPrivateUser())[ CD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_10 $$ serviceContext.setLanguageId(themeDisplay.getLanguageId())[ FD ]
Line_27 $$ Enumeration<String> enu = portletRequest.getParameterNames()-->Line_28 $$ while (enu.hasMoreElements()) [ FD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_75 $$ serviceContext.setRemoteHost(request.getRemoteHost())[ FD ]
Line_50 $$ if (!modelPermissions.isEmpty()) -->Line_59 $$ serviceContext.setGroupPermissions(groupPermissions)[ CD ]
Line_45 $$ if (formDateLong > 0) -->Line_46 $$ Date formDate = new Date(formDateLong)[ CD ]
Line_103 $$ String assetTagNamesString = request.getParameter("assetTagNames")-->Line_104 $$ if (assetTagNamesString != null) [ FD ]
Line_4 $$ ThemeDisplay themeDisplay = (ThemeDisplay) portletRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_19 $$ serviceContext.setSignedIn(themeDisplay.isSignedIn())[ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_22 $$ serviceContext.setUserDisplayURL(user.getDisplayURL(themeDisplay))[ FD ]
Line_26 $$ Map<String, Serializable> attributes = new HashMap()-->Line_39 $$ serviceContext.setAttributes(attributes)[ FD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_74 $$ serviceContext.setRemoteAddr(request.getRemoteAddr())[ FD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_17 $$ serviceContext.setPlid(themeDisplay.getPlid())[ FD ]
Line_53 $$ boolean addGroupPermissions = ParamUtil.getBoolean(portletRequest, "addGroupPermissions")-->Line_57 $$ serviceContext.setAddGroupPermissions(addGroupPermissions)[ FD ]
Line_28 $$ while (enu.hasMoreElements()) -->Line_30 $$ String[] values = portletRequest.getParameterValues(param)[ CD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_103 $$ String assetTagNamesString = request.getParameter("assetTagNames")[ CD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_67 $$ enu = request.getHeaderNames()[ CD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_108 $$ int workflowAction = ParamUtil.getInteger(portletRequest, "workflowAction", WorkflowConstants.ACTION_PUBLISH)[ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_51 $$ serviceContext.setModelPermissions(modelPermissions)[ FD ]
Line_5 $$ if (serviceContext != null) -->Line_11 $$ serviceContext.setLayoutFullURL(PortalUtil.getLayoutFullURL(themeDisplay))[ CD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_12 $$ serviceContext.setLayoutURL(PortalUtil.getLayoutURL(themeDisplay))[ FD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_19 $$ serviceContext.setSignedIn(themeDisplay.isSignedIn())[ FD ]
Line_30 $$ String[] values = portletRequest.getParameterValues(param)-->Line_35 $$ attributes.put(param, values)[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_101 $$ Double assetPriority = ParamUtil.getDouble(request, "assetPriority")[ CD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_13 $$ serviceContext.setPathFriendlyURLPrivateGroup(PortalUtil.getPathFriendlyURLPrivateGroup())[ FD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_23 $$ serviceContext.setUserId(user.getUserId())[ FD ]
Line_21 $$ User user = themeDisplay.getUser()-->Line_23 $$ serviceContext.setUserId(user.getUserId())[ FD ]
Line_29 $$ String param = enu.nextElement()-->Line_30 $$ String[] values = portletRequest.getParameterValues(param)[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_43 $$ serviceContext.setCurrentURL(currentURL)[ CD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_51 $$ serviceContext.setModelPermissions(modelPermissions)[ FD ]
Line_30 $$ String[] values = portletRequest.getParameterValues(param)-->Line_31 $$ if (ArrayUtil.isNotEmpty(values)) [ FD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_13 $$ serviceContext.setPathFriendlyURLPrivateGroup(PortalUtil.getPathFriendlyURLPrivateGroup())[ FD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_39 $$ serviceContext.setAttributes(attributes)[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_30 $$ String[] values = portletRequest.getParameterValues(param)[ FD ]
Line_67 $$ enu = request.getHeaderNames()-->Line_68 $$ while (enu.hasMoreElements()) [ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_99 $$ serviceContext.setAssetLinkEntryIds(assetLinkEntryIds)[ FD ]
Line_91 $$ long[] assetCategoryIds = ArrayUtil.toArray(assetCategoryIdsList.toArray(new Long[assetCategoryIdsList.size()]))-->Line_92 $$ serviceContext.setAssetCategoryIds(assetCategoryIds)[ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_41 $$ serviceContext.setCommand(cmd)[ FD ]
Line_27 $$ Enumeration<String> enu = portletRequest.getParameterNames()-->Line_68 $$ while (enu.hasMoreElements()) [ FD ]
Line_68 $$ while (enu.hasMoreElements()) -->Line_71 $$ headerMap.put(header, value)[ CD ]
Line_42 $$ String currentURL = PortalUtil.getCurrentURL(portletRequest)-->Line_43 $$ serviceContext.setCurrentURL(currentURL)[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_94 $$ boolean assetEntryVisible = ParamUtil.getBoolean(portletRequest, "assetEntryVisible", true)[ CD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_4 $$ ThemeDisplay themeDisplay = (ThemeDisplay) portletRequest.getAttribute(WebKeys.THEME_DISPLAY)[ FD ]
Line_5 $$ if (serviceContext != null) -->Line_22 $$ serviceContext.setUserDisplayURL(user.getDisplayURL(themeDisplay))[ CD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_49 $$ ModelPermissions modelPermissions = ModelPermissionsFactory.create(portletRequest)[ CD ]
Line_46 $$ Date formDate = new Date(formDateLong)-->Line_47 $$ serviceContext.setFormDate(formDate)[ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_11 $$ serviceContext.setLayoutFullURL(PortalUtil.getLayoutFullURL(themeDisplay))[ FD ]
Line_5 $$ if (serviceContext != null) -->Line_16 $$ serviceContext.setPathMain(PortalUtil.getPathMain())[ CD ]
Line_4 $$ ThemeDisplay themeDisplay = (ThemeDisplay) portletRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_21 $$ User user = themeDisplay.getUser()[ FD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_18 $$ serviceContext.setPortalURL(PortalUtil.getPortalURL(portletRequest))[ FD ]
Line_62 $$ HttpServletRequest request = PortalUtil.getHttpServletRequest(portletRequest)-->Line_70 $$ String value = request.getHeader(header)[ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_73 $$ serviceContext.setHeaders(headerMap)[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_66 $$ Map<String, String> headerMap = new HashMap()[ CD ]
Line_5 $$ if (serviceContext != null) -->Line_13 $$ serviceContext.setPathFriendlyURLPrivateGroup(PortalUtil.getPathFriendlyURLPrivateGroup())[ CD ]
Line_49 $$ ModelPermissions modelPermissions = ModelPermissionsFactory.create(portletRequest)-->Line_50 $$ if (!modelPermissions.isEmpty()) [ FD ]
Line_63 $$ String portletId = PortalUtil.getPortletId(portletRequest)-->Line_64 $$ PortletPreferencesIds portletPreferencesIds = PortletPreferencesFactoryUtil.getPortletPreferencesIds(request, portletId)[ FD ]
Line_67 $$ enu = request.getHeaderNames()-->Line_69 $$ String header = enu.nextElement()[ FD ]
Line_4 $$ ThemeDisplay themeDisplay = (ThemeDisplay) portletRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_20 $$ serviceContext.setTimeZone(themeDisplay.getTimeZone())[ FD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_9 $$ serviceContext.setCompanyId(themeDisplay.getCompanyId())[ FD ]
Line_69 $$ String header = enu.nextElement()-->Line_71 $$ headerMap.put(header, value)[ FD ]
Line_68 $$ while (enu.hasMoreElements()) -->Line_70 $$ String value = request.getHeader(header)[ CD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_56 $$ String[] guestPermissions = PortalUtil.getGuestPermissions(portletRequest)[ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_95 $$ serviceContext.setAssetEntryVisible(assetEntryVisible)[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_42 $$ String currentURL = PortalUtil.getCurrentURL(portletRequest)[ FD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_41 $$ serviceContext.setCommand(cmd)[ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_39 $$ serviceContext.setAttributes(attributes)[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_65 $$ serviceContext.setPortletPreferencesIds(portletPreferencesIds)[ CD ]
Line_82 $$ if (name.startsWith("assetCategoryIds")) -->Line_84 $$ long[] assetVocabularyAssetCategoryIds = StringUtil.split(ParamUtil.getString(portletRequest, name), 0L)[ CD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_95 $$ serviceContext.setAssetEntryVisible(assetEntryVisible)[ FD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_109 $$ serviceContext.setWorkflowAction(workflowAction)[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()[ CD ]
Line_5 $$ if (serviceContext != null) -->Line_17 $$ serviceContext.setPlid(themeDisplay.getPlid())[ CD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_59 $$ serviceContext.setGroupPermissions(groupPermissions)[ FD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_18 $$ serviceContext.setPortalURL(PortalUtil.getPortalURL(portletRequest))[ FD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_20 $$ serviceContext.setTimeZone(themeDisplay.getTimeZone())[ FD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_11 $$ serviceContext.setLayoutFullURL(PortalUtil.getLayoutFullURL(themeDisplay))[ FD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_9 $$ serviceContext.setCompanyId(themeDisplay.getCompanyId())[ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_12 $$ serviceContext.setLayoutURL(PortalUtil.getLayoutURL(themeDisplay))[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_42 $$ String currentURL = PortalUtil.getCurrentURL(portletRequest)[ CD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_15 $$ serviceContext.setPathFriendlyURLPublic(PortalUtil.getPathFriendlyURLPublic())[ FD ]
Line_26 $$ Map<String, Serializable> attributes = new HashMap()-->Line_33 $$ attributes.put(param, values[0])[ FD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_41 $$ serviceContext.setCommand(cmd)[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_78 $$ List<Long> assetCategoryIdsList = new ArrayList()[ CD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_4 $$ ThemeDisplay themeDisplay = (ThemeDisplay) portletRequest.getAttribute(WebKeys.THEME_DISPLAY)[ CD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_28 $$ while (enu.hasMoreElements()) [ CD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_51 $$ serviceContext.setModelPermissions(modelPermissions)[ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_76 $$ serviceContext.setRequest(request)[ FD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_8 $$ serviceContext = new ServiceContext()[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_25 $$ serviceContext.setScopeGroupId(themeDisplay.getScopeGroupId())[ CD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_110 $$ return serviceContext[ CD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_75 $$ serviceContext.setRemoteHost(request.getRemoteHost())[ CD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_50 $$ if (!modelPermissions.isEmpty()) [ CD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_106 $$ serviceContext.setAssetTagNames(assetTagNames)[ FD ]
Line_4 $$ ThemeDisplay themeDisplay = (ThemeDisplay) portletRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_11 $$ serviceContext.setLayoutFullURL(PortalUtil.getLayoutFullURL(themeDisplay))[ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_74 $$ serviceContext.setRemoteAddr(request.getRemoteAddr())[ FD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_57 $$ serviceContext.setAddGroupPermissions(addGroupPermissions)[ FD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_74 $$ serviceContext.setRemoteAddr(request.getRemoteAddr())[ FD ]
Line_96 $$ String assetLinkEntryIdsString = request.getParameter("assetLinksSearchContainerPrimaryKeys")-->Line_97 $$ if (assetLinkEntryIdsString != null) [ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_44 $$ long formDateLong = ParamUtil.getLong(portletRequest, "formDate")[ CD ]
Line_5 $$ if (serviceContext != null) -->Line_9 $$ serviceContext.setCompanyId(themeDisplay.getCompanyId())[ CD ]
Line_50 $$ if (!modelPermissions.isEmpty()) -->Line_55 $$ String[] groupPermissions = PortalUtil.getGroupPermissions(portletRequest)[ CD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_106 $$ serviceContext.setAssetTagNames(assetTagNames)[ FD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_73 $$ serviceContext.setHeaders(headerMap)[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_62 $$ HttpServletRequest request = PortalUtil.getHttpServletRequest(portletRequest)[ FD ]
Line_5 $$ if (serviceContext != null) -->Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()[ CD ]
Line_50 $$ if (!modelPermissions.isEmpty()) -->Line_54 $$ boolean addGuestPermissions = ParamUtil.getBoolean(portletRequest, "addGuestPermissions")[ CD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_77 $$ Map<String, String[]> parameterMap = portletRequest.getParameterMap()[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_77 $$ Map<String, String[]> parameterMap = portletRequest.getParameterMap()[ CD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_59 $$ serviceContext.setGroupPermissions(groupPermissions)[ FD ]
Line_32 $$ if (values.length == 1) -->Line_33 $$ attributes.put(param, values[0])[ CD ]
Line_97 $$ if (assetLinkEntryIdsString != null) -->Line_98 $$ long[] assetLinkEntryIds = StringUtil.split(assetLinkEntryIdsString, 0L)[ CD ]
Line_104 $$ if (assetTagNamesString != null) -->Line_105 $$ String[] assetTagNames = StringUtil.split(assetTagNamesString)[ CD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_43 $$ serviceContext.setCurrentURL(currentURL)[ FD ]
Line_45 $$ if (formDateLong > 0) -->Line_47 $$ serviceContext.setFormDate(formDate)[ CD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_19 $$ serviceContext.setSignedIn(themeDisplay.isSignedIn())[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_73 $$ serviceContext.setHeaders(headerMap)[ CD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_58 $$ serviceContext.setAddGuestPermissions(addGuestPermissions)[ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_15 $$ serviceContext.setPathFriendlyURLPublic(PortalUtil.getPathFriendlyURLPublic())[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_95 $$ serviceContext.setAssetEntryVisible(assetEntryVisible)[ CD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_102 $$ serviceContext.setAssetPriority(assetPriority)[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_108 $$ int workflowAction = ParamUtil.getInteger(portletRequest, "workflowAction", WorkflowConstants.ACTION_PUBLISH)[ CD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_109 $$ serviceContext.setWorkflowAction(workflowAction)[ CD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_27 $$ Enumeration<String> enu = portletRequest.getParameterNames()[ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_43 $$ serviceContext.setCurrentURL(currentURL)[ FD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_25 $$ serviceContext.setScopeGroupId(themeDisplay.getScopeGroupId())[ FD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_58 $$ serviceContext.setAddGuestPermissions(addGuestPermissions)[ FD ]
Line_5 $$ if (serviceContext != null) -->Line_19 $$ serviceContext.setSignedIn(themeDisplay.isSignedIn())[ CD ]
Line_64 $$ PortletPreferencesIds portletPreferencesIds = PortletPreferencesFactoryUtil.getPortletPreferencesIds(request, portletId)-->Line_65 $$ serviceContext.setPortletPreferencesIds(portletPreferencesIds)[ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_106 $$ serviceContext.setAssetTagNames(assetTagNames)[ FD ]
Line_4 $$ ThemeDisplay themeDisplay = (ThemeDisplay) portletRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_12 $$ serviceContext.setLayoutURL(PortalUtil.getLayoutURL(themeDisplay))[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_40 $$ String cmd = ParamUtil.getString(portletRequest, Constants.CMD)[ CD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_11 $$ serviceContext.setLayoutFullURL(PortalUtil.getLayoutFullURL(themeDisplay))[ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_25 $$ serviceContext.setScopeGroupId(themeDisplay.getScopeGroupId())[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_39 $$ serviceContext.setAttributes(attributes)[ CD ]
Line_104 $$ if (assetTagNamesString != null) -->Line_106 $$ serviceContext.setAssetTagNames(assetTagNames)[ CD ]
Line_4 $$ ThemeDisplay themeDisplay = (ThemeDisplay) portletRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_22 $$ serviceContext.setUserDisplayURL(user.getDisplayURL(themeDisplay))[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_49 $$ ModelPermissions modelPermissions = ModelPermissionsFactory.create(portletRequest)[ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_8 $$ serviceContext = new ServiceContext()[ FD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_22 $$ serviceContext.setUserDisplayURL(user.getDisplayURL(themeDisplay))[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_63 $$ String portletId = PortalUtil.getPortletId(portletRequest)[ CD ]
Line_5 $$ if (serviceContext != null) -->Line_8 $$ serviceContext = new ServiceContext()[ CD ]
Line_82 $$ if (name.startsWith("assetCategoryIds")) -->Line_83 $$ updateAssetCategoryIds = true[ CD ]
Line_85 $$ for (long assetCategoryId : assetVocabularyAssetCategoryIds) -->Line_86 $$ assetCategoryIdsList.add(assetCategoryId)[ FD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_25 $$ serviceContext.setScopeGroupId(themeDisplay.getScopeGroupId())[ FD ]
Line_29 $$ String param = enu.nextElement()-->Line_33 $$ attributes.put(param, values[0])[ FD ]
Line_4 $$ ThemeDisplay themeDisplay = (ThemeDisplay) portletRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_10 $$ serviceContext.setLanguageId(themeDisplay.getLanguageId())[ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_47 $$ serviceContext.setFormDate(formDate)[ FD ]
Line_32 $$ if (values.length == 1) -->Line_35 $$ attributes.put(param, values)[ CD ]
Line_81 $$ String name = entry.getKey()-->Line_84 $$ long[] assetVocabularyAssetCategoryIds = StringUtil.split(ParamUtil.getString(portletRequest, name), 0L)[ FD ]
Line_40 $$ String cmd = ParamUtil.getString(portletRequest, Constants.CMD)-->Line_41 $$ serviceContext.setCommand(cmd)[ FD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_92 $$ serviceContext.setAssetCategoryIds(assetCategoryIds)[ FD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_57 $$ serviceContext.setAddGroupPermissions(addGroupPermissions)[ FD ]
Line_79 $$ boolean updateAssetCategoryIds = false-->Line_83 $$ updateAssetCategoryIds = true[ FD ]
Line_49 $$ ModelPermissions modelPermissions = ModelPermissionsFactory.create(portletRequest)-->Line_51 $$ serviceContext.setModelPermissions(modelPermissions)[ FD ]
Line_50 $$ if (!modelPermissions.isEmpty()) -->Line_60 $$ serviceContext.setGuestPermissions(guestPermissions)[ CD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_76 $$ serviceContext.setRequest(request)[ CD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_109 $$ serviceContext.setWorkflowAction(workflowAction)[ FD ]
Line_28 $$ while (enu.hasMoreElements()) -->Line_29 $$ String param = enu.nextElement()[ CD ]
Line_50 $$ if (!modelPermissions.isEmpty()) -->Line_51 $$ serviceContext.setModelPermissions(modelPermissions)[ CD ]
Line_54 $$ boolean addGuestPermissions = ParamUtil.getBoolean(portletRequest, "addGuestPermissions")-->Line_58 $$ serviceContext.setAddGuestPermissions(addGuestPermissions)[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_63 $$ String portletId = PortalUtil.getPortletId(portletRequest)[ FD ]
Line_62 $$ HttpServletRequest request = PortalUtil.getHttpServletRequest(portletRequest)-->Line_96 $$ String assetLinkEntryIdsString = request.getParameter("assetLinksSearchContainerPrimaryKeys")[ FD ]
Line_62 $$ HttpServletRequest request = PortalUtil.getHttpServletRequest(portletRequest)-->Line_67 $$ enu = request.getHeaderNames()[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_5 $$ if (serviceContext != null) [ CD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_26 $$ Map<String, Serializable> attributes = new HashMap()[ CD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_84 $$ long[] assetVocabularyAssetCategoryIds = StringUtil.split(ParamUtil.getString(portletRequest, name), 0L)[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_94 $$ boolean assetEntryVisible = ParamUtil.getBoolean(portletRequest, "assetEntryVisible", true)[ FD ]
Line_62 $$ HttpServletRequest request = PortalUtil.getHttpServletRequest(portletRequest)-->Line_64 $$ PortletPreferencesIds portletPreferencesIds = PortletPreferencesFactoryUtil.getPortletPreferencesIds(request, portletId)[ FD ]
Line_29 $$ String param = enu.nextElement()-->Line_35 $$ attributes.put(param, values)[ FD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_102 $$ serviceContext.setAssetPriority(assetPriority)[ FD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_99 $$ serviceContext.setAssetLinkEntryIds(assetLinkEntryIds)[ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_57 $$ serviceContext.setAddGroupPermissions(addGroupPermissions)[ FD ]
Line_50 $$ if (!modelPermissions.isEmpty()) -->Line_57 $$ serviceContext.setAddGroupPermissions(addGroupPermissions)[ CD ]
Line_28 $$ while (enu.hasMoreElements()) -->Line_31 $$ if (ArrayUtil.isNotEmpty(values)) [ CD ]
Line_5 $$ if (serviceContext != null) -->Line_12 $$ serviceContext.setLayoutURL(PortalUtil.getLayoutURL(themeDisplay))[ CD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_62 $$ HttpServletRequest request = PortalUtil.getHttpServletRequest(portletRequest)[ CD ]
Line_62 $$ HttpServletRequest request = PortalUtil.getHttpServletRequest(portletRequest)-->Line_75 $$ serviceContext.setRemoteHost(request.getRemoteHost())[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_41 $$ serviceContext.setCommand(cmd)[ CD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_75 $$ serviceContext.setRemoteHost(request.getRemoteHost())[ FD ]
Line_81 $$ String name = entry.getKey()-->Line_82 $$ if (name.startsWith("assetCategoryIds")) [ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_74 $$ serviceContext.setRemoteAddr(request.getRemoteAddr())[ CD ]
Line_103 $$ String assetTagNamesString = request.getParameter("assetTagNames")-->Line_105 $$ String[] assetTagNames = StringUtil.split(assetTagNamesString)[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_68 $$ while (enu.hasMoreElements()) [ CD ]
Line_90 $$ if (updateAssetCategoryIds) -->Line_92 $$ serviceContext.setAssetCategoryIds(assetCategoryIds)[ CD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_43 $$ serviceContext.setCurrentURL(currentURL)[ FD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_47 $$ serviceContext.setFormDate(formDate)[ FD ]
Line_56 $$ String[] guestPermissions = PortalUtil.getGuestPermissions(portletRequest)-->Line_60 $$ serviceContext.setGuestPermissions(guestPermissions)[ FD ]
Line_44 $$ long formDateLong = ParamUtil.getLong(portletRequest, "formDate")-->Line_45 $$ if (formDateLong > 0) [ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_60 $$ serviceContext.setGuestPermissions(guestPermissions)[ FD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_23 $$ serviceContext.setUserId(user.getUserId())[ FD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_73 $$ serviceContext.setHeaders(headerMap)[ FD ]
Line_90 $$ if (updateAssetCategoryIds) -->Line_91 $$ long[] assetCategoryIds = ArrayUtil.toArray(assetCategoryIdsList.toArray(new Long[assetCategoryIdsList.size()]))[ CD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_18 $$ serviceContext.setPortalURL(PortalUtil.getPortalURL(portletRequest))[ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_10 $$ serviceContext.setLanguageId(themeDisplay.getLanguageId())[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_27 $$ Enumeration<String> enu = portletRequest.getParameterNames()[ CD ]
Line_78 $$ List<Long> assetCategoryIdsList = new ArrayList()-->Line_86 $$ assetCategoryIdsList.add(assetCategoryId)[ FD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_16 $$ serviceContext.setPathMain(PortalUtil.getPathMain())[ FD ]
Line_27 $$ Enumeration<String> enu = portletRequest.getParameterNames()-->Line_29 $$ String param = enu.nextElement()[ FD ]
Line_27 $$ Enumeration<String> enu = portletRequest.getParameterNames()-->Line_69 $$ String header = enu.nextElement()[ FD ]
Line_50 $$ if (!modelPermissions.isEmpty()) -->Line_58 $$ serviceContext.setAddGuestPermissions(addGuestPermissions)[ CD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_9 $$ serviceContext.setCompanyId(themeDisplay.getCompanyId())[ FD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_65 $$ serviceContext.setPortletPreferencesIds(portletPreferencesIds)[ FD ]
Line_66 $$ Map<String, String> headerMap = new HashMap()-->Line_71 $$ headerMap.put(header, value)[ FD ]
Line_4 $$ ThemeDisplay themeDisplay = (ThemeDisplay) portletRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_9 $$ serviceContext.setCompanyId(themeDisplay.getCompanyId())[ FD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_76 $$ serviceContext.setRequest(request)[ FD ]
Line_94 $$ boolean assetEntryVisible = ParamUtil.getBoolean(portletRequest, "assetEntryVisible", true)-->Line_95 $$ serviceContext.setAssetEntryVisible(assetEntryVisible)[ FD ]
Line_80 $$ for (Map.Entry<String, String[]> entry : parameterMap.entrySet()) -->Line_81 $$ String name = entry.getKey()[ FD ]
Line_77 $$ Map<String, String[]> parameterMap = portletRequest.getParameterMap()-->Line_80 $$ for (Map.Entry<String, String[]> entry : parameterMap.entrySet()) [ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_90 $$ if (updateAssetCategoryIds) [ CD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_65 $$ serviceContext.setPortletPreferencesIds(portletPreferencesIds)[ FD ]
Line_68 $$ while (enu.hasMoreElements()) -->Line_69 $$ String header = enu.nextElement()[ CD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_95 $$ serviceContext.setAssetEntryVisible(assetEntryVisible)[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_55 $$ String[] groupPermissions = PortalUtil.getGroupPermissions(portletRequest)[ FD ]
Line_5 $$ if (serviceContext != null) -->Line_10 $$ serviceContext.setLanguageId(themeDisplay.getLanguageId())[ CD ]
Line_5 $$ if (serviceContext != null) -->Line_18 $$ serviceContext.setPortalURL(PortalUtil.getPortalURL(portletRequest))[ CD ]
Line_4 $$ ThemeDisplay themeDisplay = (ThemeDisplay) portletRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_25 $$ serviceContext.setScopeGroupId(themeDisplay.getScopeGroupId())[ FD ]
Line_3 $$ ServiceContext serviceContext = ServiceContextThreadLocal.getServiceContext()-->Line_58 $$ serviceContext.setAddGuestPermissions(addGuestPermissions)[ FD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_14 $$ serviceContext.setPathFriendlyURLPrivateUser(PortalUtil.getPathFriendlyURLPrivateUser())[ FD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_16 $$ serviceContext.setPathMain(PortalUtil.getPathMain())[ FD ]
Line_62 $$ HttpServletRequest request = PortalUtil.getHttpServletRequest(portletRequest)-->Line_101 $$ Double assetPriority = ParamUtil.getDouble(request, "assetPriority")[ FD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_102 $$ serviceContext.setAssetPriority(assetPriority)[ FD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_96 $$ String assetLinkEntryIdsString = request.getParameter("assetLinksSearchContainerPrimaryKeys")[ CD ]
Line_66 $$ Map<String, String> headerMap = new HashMap()-->Line_73 $$ serviceContext.setHeaders(headerMap)[ FD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_14 $$ serviceContext.setPathFriendlyURLPrivateUser(PortalUtil.getPathFriendlyURLPrivateUser())[ FD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_10 $$ serviceContext.setLanguageId(themeDisplay.getLanguageId())[ FD ]
Line_5 $$ if (serviceContext != null) -->Line_21 $$ User user = themeDisplay.getUser()[ CD ]
Line_6 $$ serviceContext = (ServiceContext) serviceContext.clone()-->Line_47 $$ serviceContext.setFormDate(formDate)[ FD ]
Line_21 $$ User user = themeDisplay.getUser()-->Line_22 $$ serviceContext.setUserDisplayURL(user.getDisplayURL(themeDisplay))[ FD ]
Line_50 $$ if (!modelPermissions.isEmpty()) -->Line_53 $$ boolean addGroupPermissions = ParamUtil.getBoolean(portletRequest, "addGroupPermissions")[ CD ]
Line_2 $$ public static ServiceContext getInstance(PortletRequest portletRequest) throws PortalException -->Line_79 $$ boolean updateAssetCategoryIds = false[ CD ]
Line_8 $$ serviceContext = new ServiceContext()-->Line_20 $$ serviceContext.setTimeZone(themeDisplay.getTimeZone())[ FD ]
