Line_15 $$ if (propertyType.isCollectionType()) -->Line_16 $$ CollectionType collectionPropertyType = (CollectionType) propertyType[ CD ]
Line_18 $$ for (Map.Entry<String, Object> dataEntry : persistentCollectionChangeData.getData().entrySet()) -->Line_20 $$ qb.getRootParameters().addWhereWithParam(dataEntry.getKey(), true, "=", dataEntry.getValue())[ FD ]
Line_2 $$ public void performCollectionChange(Session session, String entityName, String propertyName, EnversService enversService, PersistentCollectionChangeData persistentCollectionChangeData, Object revision) -->Line_7 $$ final String revisionTypePropName = enversService.getAuditEntitiesConfiguration().getRevisionTypePropName()[ CD ]
Line_26 $$ final List<Object> l = qb.toQuery(session).setLockOptions(LockOptions.UPGRADE).list()-->Line_28 $$ updateLastRevision(session, enversService, l, originalId, persistentCollectionChangeData.getEntityName(), revision)[ FD ]
Line_2 $$ public void performCollectionChange(Session session, String entityName, String propertyName, EnversService enversService, PersistentCollectionChangeData persistentCollectionChangeData, Object revision) -->Line_30 $$ session.save(persistentCollectionChangeData.getEntityName(), persistentCollectionChangeData.getData())[ FD ]
Line_2 $$ public void performCollectionChange(Session session, String entityName, String propertyName, EnversService enversService, PersistentCollectionChangeData persistentCollectionChangeData, Object revision) -->Line_30 $$ session.save(persistentCollectionChangeData.getEntityName(), persistentCollectionChangeData.getData())[ CD ]
Line_4 $$ final String originalIdPropName = enversService.getAuditEntitiesConfiguration().getOriginalIdPropName()-->Line_19 $$ if (!originalIdPropName.equals(dataEntry.getKey())) [ FD ]
Line_3 $$ final QueryBuilder qb = new QueryBuilder(persistentCollectionChangeData.getEntityName(), MIDDLE_ENTITY_ALIAS)-->Line_26 $$ final List<Object> l = qb.toQuery(session).setLockOptions(LockOptions.UPGRADE).list()[ FD ]
Line_2 $$ public void performCollectionChange(Session session, String entityName, String propertyName, EnversService enversService, PersistentCollectionChangeData persistentCollectionChangeData, Object revision) -->Line_5 $$ final Map<String, Object> originalId = (Map<String, Object>) persistentCollectionChangeData.getData().get(originalIdPropName)[ CD ]
Line_2 $$ public void performCollectionChange(Session session, String entityName, String propertyName, EnversService enversService, PersistentCollectionChangeData persistentCollectionChangeData, Object revision) -->Line_31 $$ sessionCacheCleaner.scheduleAuditDataRemoval(session, persistentCollectionChangeData.getData())[ FD ]
Line_13 $$ final SessionFactoryImplementor sessionFactory = ((SessionImplementor) session).getFactory()-->Line_14 $$ final Type propertyType = sessionFactory.getEntityPersister(entityName).getPropertyType(propertyName)[ FD ]
Line_2 $$ public void performCollectionChange(Session session, String entityName, String propertyName, EnversService enversService, PersistentCollectionChangeData persistentCollectionChangeData, Object revision) -->Line_14 $$ final Type propertyType = sessionFactory.getEntityPersister(entityName).getPropertyType(propertyName)[ FD ]
Line_2 $$ public void performCollectionChange(Session session, String entityName, String propertyName, EnversService enversService, PersistentCollectionChangeData persistentCollectionChangeData, Object revision) -->Line_25 $$ addEndRevisionNullRestriction(enversService, qb.getRootParameters())[ CD ]
Line_2 $$ public void performCollectionChange(Session session, String entityName, String propertyName, EnversService enversService, PersistentCollectionChangeData persistentCollectionChangeData, Object revision) -->Line_6 $$ final String revisionFieldName = enversService.getAuditEntitiesConfiguration().getRevisionFieldName()[ CD ]
Line_2 $$ public void performCollectionChange(Session session, String entityName, String propertyName, EnversService enversService, PersistentCollectionChangeData persistentCollectionChangeData, Object revision) -->Line_3 $$ final QueryBuilder qb = new QueryBuilder(persistentCollectionChangeData.getEntityName(), MIDDLE_ENTITY_ALIAS)[ FD ]
Line_7 $$ final String revisionTypePropName = enversService.getAuditEntitiesConfiguration().getRevisionTypePropName()-->Line_9 $$ if (!revisionFieldName.equals(originalIdEntry.getKey()) && !revisionTypePropName.equals(originalIdEntry.getKey())) [ FD ]
Line_16 $$ CollectionType collectionPropertyType = (CollectionType) propertyType-->Line_17 $$ if (collectionPropertyType.getElementType(sessionFactory) instanceof ComponentType) [ FD ]
Line_2 $$ public void performCollectionChange(Session session, String entityName, String propertyName, EnversService enversService, PersistentCollectionChangeData persistentCollectionChangeData, Object revision) -->Line_5 $$ final Map<String, Object> originalId = (Map<String, Object>) persistentCollectionChangeData.getData().get(originalIdPropName)[ FD ]
Line_2 $$ public void performCollectionChange(Session session, String entityName, String propertyName, EnversService enversService, PersistentCollectionChangeData persistentCollectionChangeData, Object revision) -->Line_28 $$ updateLastRevision(session, enversService, l, originalId, persistentCollectionChangeData.getEntityName(), revision)[ FD ]
Line_2 $$ public void performCollectionChange(Session session, String entityName, String propertyName, EnversService enversService, PersistentCollectionChangeData persistentCollectionChangeData, Object revision) -->Line_4 $$ final String originalIdPropName = enversService.getAuditEntitiesConfiguration().getOriginalIdPropName()[ CD ]
Line_13 $$ final SessionFactoryImplementor sessionFactory = ((SessionImplementor) session).getFactory()-->Line_17 $$ if (collectionPropertyType.getElementType(sessionFactory) instanceof ComponentType) [ FD ]
Line_2 $$ public void performCollectionChange(Session session, String entityName, String propertyName, EnversService enversService, PersistentCollectionChangeData persistentCollectionChangeData, Object revision) -->Line_26 $$ final List<Object> l = qb.toQuery(session).setLockOptions(LockOptions.UPGRADE).list()[ CD ]
Line_2 $$ public void performCollectionChange(Session session, String entityName, String propertyName, EnversService enversService, PersistentCollectionChangeData persistentCollectionChangeData, Object revision) -->Line_4 $$ final String originalIdPropName = enversService.getAuditEntitiesConfiguration().getOriginalIdPropName()[ FD ]
Line_9 $$ if (!revisionFieldName.equals(originalIdEntry.getKey()) && !revisionTypePropName.equals(originalIdEntry.getKey())) -->Line_10 $$ qb.getRootParameters().addWhereWithParam(originalIdPropName + "." + originalIdEntry.getKey(), true, "=", originalIdEntry.getValue())[ CD ]
Line_3 $$ final QueryBuilder qb = new QueryBuilder(persistentCollectionChangeData.getEntityName(), MIDDLE_ENTITY_ALIAS)-->Line_25 $$ addEndRevisionNullRestriction(enversService, qb.getRootParameters())[ FD ]
Line_2 $$ public void performCollectionChange(Session session, String entityName, String propertyName, EnversService enversService, PersistentCollectionChangeData persistentCollectionChangeData, Object revision) -->Line_27 $$ if (l.size() > 0) [ CD ]
Line_15 $$ if (propertyType.isCollectionType()) -->Line_17 $$ if (collectionPropertyType.getElementType(sessionFactory) instanceof ComponentType) [ CD ]
Line_5 $$ final Map<String, Object> originalId = (Map<String, Object>) persistentCollectionChangeData.getData().get(originalIdPropName)-->Line_8 $$ for (Map.Entry<String, Object> originalIdEntry : originalId.entrySet()) [ FD ]
Line_2 $$ public void performCollectionChange(Session session, String entityName, String propertyName, EnversService enversService, PersistentCollectionChangeData persistentCollectionChangeData, Object revision) -->Line_15 $$ if (propertyType.isCollectionType()) [ CD ]
Line_8 $$ for (Map.Entry<String, Object> originalIdEntry : originalId.entrySet()) -->Line_9 $$ if (!revisionFieldName.equals(originalIdEntry.getKey()) && !revisionTypePropName.equals(originalIdEntry.getKey())) [ FD ]
Line_2 $$ public void performCollectionChange(Session session, String entityName, String propertyName, EnversService enversService, PersistentCollectionChangeData persistentCollectionChangeData, Object revision) -->Line_18 $$ for (Map.Entry<String, Object> dataEntry : persistentCollectionChangeData.getData().entrySet()) [ FD ]
Line_14 $$ final Type propertyType = sessionFactory.getEntityPersister(entityName).getPropertyType(propertyName)-->Line_15 $$ if (propertyType.isCollectionType()) [ FD ]
Line_2 $$ public void performCollectionChange(Session session, String entityName, String propertyName, EnversService enversService, PersistentCollectionChangeData persistentCollectionChangeData, Object revision) -->Line_14 $$ final Type propertyType = sessionFactory.getEntityPersister(entityName).getPropertyType(propertyName)[ CD ]
Line_2 $$ public void performCollectionChange(Session session, String entityName, String propertyName, EnversService enversService, PersistentCollectionChangeData persistentCollectionChangeData, Object revision) -->Line_31 $$ sessionCacheCleaner.scheduleAuditDataRemoval(session, persistentCollectionChangeData.getData())[ CD ]
Line_26 $$ final List<Object> l = qb.toQuery(session).setLockOptions(LockOptions.UPGRADE).list()-->Line_27 $$ if (l.size() > 0) [ FD ]
Line_5 $$ final Map<String, Object> originalId = (Map<String, Object>) persistentCollectionChangeData.getData().get(originalIdPropName)-->Line_28 $$ updateLastRevision(session, enversService, l, originalId, persistentCollectionChangeData.getEntityName(), revision)[ FD ]
Line_4 $$ final String originalIdPropName = enversService.getAuditEntitiesConfiguration().getOriginalIdPropName()-->Line_5 $$ final Map<String, Object> originalId = (Map<String, Object>) persistentCollectionChangeData.getData().get(originalIdPropName)[ FD ]
Line_2 $$ public void performCollectionChange(Session session, String entityName, String propertyName, EnversService enversService, PersistentCollectionChangeData persistentCollectionChangeData, Object revision) -->Line_3 $$ final QueryBuilder qb = new QueryBuilder(persistentCollectionChangeData.getEntityName(), MIDDLE_ENTITY_ALIAS)[ CD ]
Line_2 $$ public void performCollectionChange(Session session, String entityName, String propertyName, EnversService enversService, PersistentCollectionChangeData persistentCollectionChangeData, Object revision) -->Line_26 $$ final List<Object> l = qb.toQuery(session).setLockOptions(LockOptions.UPGRADE).list()[ FD ]
Line_18 $$ for (Map.Entry<String, Object> dataEntry : persistentCollectionChangeData.getData().entrySet()) -->Line_19 $$ if (!originalIdPropName.equals(dataEntry.getKey())) [ FD ]
Line_27 $$ if (l.size() > 0) -->Line_28 $$ updateLastRevision(session, enversService, l, originalId, persistentCollectionChangeData.getEntityName(), revision)[ CD ]
Line_2 $$ public void performCollectionChange(Session session, String entityName, String propertyName, EnversService enversService, PersistentCollectionChangeData persistentCollectionChangeData, Object revision) -->Line_6 $$ final String revisionFieldName = enversService.getAuditEntitiesConfiguration().getRevisionFieldName()[ FD ]
Line_19 $$ if (!originalIdPropName.equals(dataEntry.getKey())) -->Line_20 $$ qb.getRootParameters().addWhereWithParam(dataEntry.getKey(), true, "=", dataEntry.getValue())[ CD ]
Line_8 $$ for (Map.Entry<String, Object> originalIdEntry : originalId.entrySet()) -->Line_10 $$ qb.getRootParameters().addWhereWithParam(originalIdPropName + "." + originalIdEntry.getKey(), true, "=", originalIdEntry.getValue())[ FD ]
Line_2 $$ public void performCollectionChange(Session session, String entityName, String propertyName, EnversService enversService, PersistentCollectionChangeData persistentCollectionChangeData, Object revision) -->Line_25 $$ addEndRevisionNullRestriction(enversService, qb.getRootParameters())[ FD ]
Line_3 $$ final QueryBuilder qb = new QueryBuilder(persistentCollectionChangeData.getEntityName(), MIDDLE_ENTITY_ALIAS)-->Line_10 $$ qb.getRootParameters().addWhereWithParam(originalIdPropName + "." + originalIdEntry.getKey(), true, "=", originalIdEntry.getValue())[ FD ]
Line_6 $$ final String revisionFieldName = enversService.getAuditEntitiesConfiguration().getRevisionFieldName()-->Line_9 $$ if (!revisionFieldName.equals(originalIdEntry.getKey()) && !revisionTypePropName.equals(originalIdEntry.getKey())) [ FD ]
Line_2 $$ public void performCollectionChange(Session session, String entityName, String propertyName, EnversService enversService, PersistentCollectionChangeData persistentCollectionChangeData, Object revision) -->Line_13 $$ final SessionFactoryImplementor sessionFactory = ((SessionImplementor) session).getFactory()[ CD ]
Line_2 $$ public void performCollectionChange(Session session, String entityName, String propertyName, EnversService enversService, PersistentCollectionChangeData persistentCollectionChangeData, Object revision) -->Line_7 $$ final String revisionTypePropName = enversService.getAuditEntitiesConfiguration().getRevisionTypePropName()[ FD ]
Line_3 $$ final QueryBuilder qb = new QueryBuilder(persistentCollectionChangeData.getEntityName(), MIDDLE_ENTITY_ALIAS)-->Line_20 $$ qb.getRootParameters().addWhereWithParam(dataEntry.getKey(), true, "=", dataEntry.getValue())[ FD ]
