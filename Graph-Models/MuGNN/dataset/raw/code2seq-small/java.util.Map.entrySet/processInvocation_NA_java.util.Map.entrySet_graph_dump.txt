Line_64 $$ final SessionBeanComponent component = (SessionBeanComponent) ejbComponent-->Line_91 $$ component.getAsynchronousExecutor().submit(task)[ FD ]
Line_63 $$ if (ejbComponent instanceof SessionBeanComponent) -->Line_91 $$ component.getAsynchronousExecutor().submit(task)[ CD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_18 $$ final boolean async = view.isAsynchronous(method)[ CD ]
Line_34 $$ if (invocationContextData == null && privateAttachments.isEmpty()) -->Line_38 $$ interceptorContext.setContextData(data)[ CD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_92 $$ receiverContext.resultReady(new ImmediateResultProducer(task))[ FD ]
Line_34 $$ if (invocationContextData == null && privateAttachments.isEmpty()) -->Line_45 $$ final boolean txIdAttachmentPresent = privateAttachments.containsKey(AttachmentKeys.TRANSACTION_ID_KEY)[ CD ]
Line_28 $$ final InterceptorContext interceptorContext = new InterceptorContext()-->Line_99 $$ result = view.invoke(interceptorContext)[ FD ]
Line_20 $$ if (invocation.getParameters() == null) -->Line_24 $$ for (int i = 0; i < parameters.length; ++i) [ CD ]
Line_4 $$ final EjbDeploymentInformation ejb = findBean(locator.getAppName(), locator.getModuleName(), locator.getDistinctName(), locator.getBeanName())-->Line_5 $$ final EJBComponent ejbComponent = ejb.getEjbComponent()[ FD ]
Line_6 $$ final Class<?> viewClass = invocation.getViewClass()-->Line_7 $$ final ComponentView view = ejb.getView(viewClass.getName())[ FD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_14 $$ final ClonerConfiguration paramConfig = new ClonerConfiguration()[ CD ]
Line_17 $$ final Method method = view.getMethod(invocation.getInvokedMethod().getName(), DescriptorUtils.methodDescriptor(invocation.getInvokedMethod()))-->Line_25 $$ parameters[i] = clone(method.getParameterTypes()[i], parameterCloner, invocation.getParameters()[i], allowPassByReference)[ FD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_34 $$ if (invocationContextData == null && privateAttachments.isEmpty()) [ CD ]
Line_32 $$ final Map<Object, Object> privateAttachments = invocation.getAttachments()-->Line_43 $$ data.put(EJBClientInvocationContext.PRIVATE_ATTACHMENTS_KEY, privateAttachments)[ FD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_32 $$ final Map<Object, Object> privateAttachments = invocation.getAttachments()[ FD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_11 $$ if (!ejb.isRemoteView(viewClass.getName())) [ CD ]
Line_5 $$ final EJBComponent ejbComponent = ejb.getEjbComponent()-->Line_50 $$ interceptorContext.putPrivateData(Component.class, ejbComponent)[ FD ]
Line_71 $$ Object result = view.invoke(interceptorContext)-->Line_72 $$ if (result == null) [ FD ]
Line_4 $$ final EjbDeploymentInformation ejb = findBean(locator.getAppName(), locator.getModuleName(), locator.getDistinctName(), locator.getBeanName())-->Line_9 $$ throw EjbLogger.ROOT_LOGGER.viewNotFound(viewClass.getName(), ejb.getEjbName())[ FD ]
Line_14 $$ final ClonerConfiguration paramConfig = new ClonerConfiguration()-->Line_15 $$ paramConfig.setClassCloner(new ClassLoaderClassCloner(ejb.getDeploymentClassLoader()))[ FD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_28 $$ final InterceptorContext interceptorContext = new InterceptorContext()[ CD ]
Line_21 $$ parameters = EMPTY_OBJECT_ARRAY-->Line_23 $$ parameters = new Object[invocation.getParameters().length][ FD ]
Line_34 $$ if (invocationContextData == null && privateAttachments.isEmpty()) -->Line_37 $$ final Map<String, Object> data = new HashMap<String, Object>()[ CD ]
Line_61 $$ final ObjectCloner resultCloner = createCloner(config)-->Line_82 $$ return LocalEjbReceiver.clone(result.getClass(), resultCloner, result, allowPassByReference)[ FD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_61 $$ final ObjectCloner resultCloner = createCloner(config)[ CD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_62 $$ if (async) [ CD ]
Line_61 $$ final ObjectCloner resultCloner = createCloner(config)-->Line_80 $$ return new AsyncResult(LocalEjbReceiver.clone(asyncValue.getClass(), resultCloner, asyncValue, allowPassByReference))[ FD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_59 $$ final ClonerConfiguration config = new ClonerConfiguration()[ CD ]
Line_28 $$ final InterceptorContext interceptorContext = new InterceptorContext()-->Line_90 $$ interceptorContext.putPrivateData(CancellationFlag.class, flag)[ FD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_4 $$ final EjbDeploymentInformation ejb = findBean(locator.getAppName(), locator.getModuleName(), locator.getDistinctName(), locator.getBeanName())[ CD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_17 $$ final Method method = view.getMethod(invocation.getInvokedMethod().getName(), DescriptorUtils.methodDescriptor(invocation.getInvokedMethod()))[ FD ]
Line_7 $$ final ComponentView view = ejb.getView(viewClass.getName())-->Line_17 $$ final Method method = view.getMethod(invocation.getInvokedMethod().getName(), DescriptorUtils.methodDescriptor(invocation.getInvokedMethod()))[ FD ]
Line_61 $$ final ObjectCloner resultCloner = createCloner(config)-->Line_84 $$ throw ((Exception) LocalEjbReceiver.clone(e.getClass(), resultCloner, e, allowPassByReference))[ FD ]
Line_67 $$ final AsyncInvocationTask task = new AsyncInvocationTask(flag) -->Line_91 $$ component.getAsynchronousExecutor().submit(task)[ FD ]
Line_62 $$ if (async) -->Line_104 $$ receiverContext.resultReady(new ImmediateResultProducer(clonedResult))[ CD ]
Line_33 $$ final Map<String, Object> invocationContextData = invocation.getContextData()-->Line_39 $$ for (Map.Entry<String, Object> entry : invocationContextData.entrySet()) [ FD ]
Line_37 $$ final Map<String, Object> data = new HashMap<String, Object>()-->Line_38 $$ interceptorContext.setContextData(data)[ FD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_33 $$ final Map<String, Object> invocationContextData = invocation.getContextData()[ CD ]
Line_71 $$ Object result = view.invoke(interceptorContext)-->Line_99 $$ result = view.invoke(interceptorContext)[ FD ]
Line_19 $$ final Object[] parameters-->Line_21 $$ parameters = EMPTY_OBJECT_ARRAY[ FD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_60 $$ config.setClassCloner(new LocalInvocationClassCloner(WildFlySecurityManager.getClassLoaderPrivileged(invocation.getInvokedProxy().getClass())))[ CD ]
Line_71 $$ Object result = view.invoke(interceptorContext)-->Line_103 $$ final Object clonedResult = clone(invocation.getInvokedMethod().getReturnType(), resultCloner, result, allowPassByReference)[ FD ]
Line_28 $$ final InterceptorContext interceptorContext = new InterceptorContext()-->Line_30 $$ interceptorContext.setMethod(method)[ FD ]
Line_7 $$ final ComponentView view = ejb.getView(viewClass.getName())-->Line_99 $$ result = view.invoke(interceptorContext)[ FD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_29 $$ interceptorContext.setParameters(parameters)[ CD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_33 $$ final Map<String, Object> invocationContextData = invocation.getContextData()[ FD ]
Line_28 $$ final InterceptorContext interceptorContext = new InterceptorContext()-->Line_50 $$ interceptorContext.putPrivateData(Component.class, ejbComponent)[ FD ]
Line_75 $$ if (result instanceof Future) -->Line_77 $$ if (asyncValue == null) [ CD ]
Line_61 $$ final ObjectCloner resultCloner = createCloner(config)-->Line_103 $$ final Object clonedResult = clone(invocation.getInvokedMethod().getReturnType(), resultCloner, result, allowPassByReference)[ FD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_3 $$ final EJBLocator<?> locator = invocation.getLocator()[ FD ]
Line_34 $$ if (invocationContextData == null && privateAttachments.isEmpty()) -->Line_46 $$ if (txIdAttachmentPresent) [ CD ]
Line_75 $$ if (result instanceof Future) -->Line_76 $$ Object asyncValue = ((Future) result).get()[ CD ]
Line_76 $$ Object asyncValue = ((Future) result).get()-->Line_77 $$ if (asyncValue == null) [ FD ]
Line_63 $$ if (ejbComponent instanceof SessionBeanComponent) -->Line_66 $$ final SecurityContext securityContext = SecurityContextAssociation.getSecurityContext()[ CD ]
Line_28 $$ final InterceptorContext interceptorContext = new InterceptorContext()-->Line_51 $$ interceptorContext.putPrivateData(ComponentView.class, view)[ FD ]
Line_6 $$ final Class<?> viewClass = invocation.getViewClass()-->Line_11 $$ if (!ejb.isRemoteView(viewClass.getName())) [ FD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_7 $$ final ComponentView view = ejb.getView(viewClass.getName())[ CD ]
Line_20 $$ if (invocation.getParameters() == null) -->Line_21 $$ parameters = EMPTY_OBJECT_ARRAY[ CD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_20 $$ if (invocation.getParameters() == null) [ CD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_23 $$ parameters = new Object[invocation.getParameters().length][ FD ]
Line_76 $$ Object asyncValue = ((Future) result).get()-->Line_80 $$ return new AsyncResult(LocalEjbReceiver.clone(asyncValue.getClass(), resultCloner, asyncValue, allowPassByReference))[ FD ]
Line_21 $$ parameters = EMPTY_OBJECT_ARRAY-->Line_29 $$ interceptorContext.setParameters(parameters)[ FD ]
Line_32 $$ final Map<Object, Object> privateAttachments = invocation.getAttachments()-->Line_42 $$ if (!privateAttachments.isEmpty()) [ FD ]
Line_62 $$ if (async) -->Line_63 $$ if (ejbComponent instanceof SessionBeanComponent) [ CD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_32 $$ final Map<Object, Object> privateAttachments = invocation.getAttachments()[ CD ]
Line_53 $$ final SessionID sessionID = ((StatefulEJBLocator<?>) locator).getSessionId()-->Line_54 $$ interceptorContext.putPrivateData(SessionID.class, sessionID)[ FD ]
Line_17 $$ final Method method = view.getMethod(invocation.getInvokedMethod().getName(), DescriptorUtils.methodDescriptor(invocation.getInvokedMethod()))-->Line_30 $$ interceptorContext.setMethod(method)[ FD ]
Line_14 $$ final ClonerConfiguration paramConfig = new ClonerConfiguration()-->Line_16 $$ final ObjectCloner parameterCloner = createCloner(paramConfig)[ FD ]
Line_63 $$ if (ejbComponent instanceof SessionBeanComponent) -->Line_65 $$ final CancellationFlag flag = new CancellationFlag()[ CD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_5 $$ final EJBComponent ejbComponent = ejb.getEjbComponent()[ CD ]
Line_72 $$ if (result == null) -->Line_73 $$ return result[ CD ]
Line_4 $$ final EjbDeploymentInformation ejb = findBean(locator.getAppName(), locator.getModuleName(), locator.getDistinctName(), locator.getBeanName())-->Line_11 $$ if (!ejb.isRemoteView(viewClass.getName())) [ FD ]
Line_77 $$ if (asyncValue == null) -->Line_78 $$ return asyncValue[ CD ]
Line_63 $$ if (ejbComponent instanceof SessionBeanComponent) -->Line_92 $$ receiverContext.resultReady(new ImmediateResultProducer(task))[ CD ]
Line_37 $$ final Map<String, Object> data = new HashMap<String, Object>()-->Line_43 $$ data.put(EJBClientInvocationContext.PRIVATE_ATTACHMENTS_KEY, privateAttachments)[ FD ]
Line_42 $$ if (!privateAttachments.isEmpty()) -->Line_43 $$ data.put(EJBClientInvocationContext.PRIVATE_ATTACHMENTS_KEY, privateAttachments)[ CD ]
Line_34 $$ if (invocationContextData == null && privateAttachments.isEmpty()) -->Line_35 $$ interceptorContext.setContextData(new HashMap<String, Object>())[ CD ]
Line_59 $$ final ClonerConfiguration config = new ClonerConfiguration()-->Line_60 $$ config.setClassCloner(new LocalInvocationClassCloner(WildFlySecurityManager.getClassLoaderPrivileged(invocation.getInvokedProxy().getClass())))[ FD ]
Line_99 $$ result = view.invoke(interceptorContext)-->Line_103 $$ final Object clonedResult = clone(invocation.getInvokedMethod().getReturnType(), resultCloner, result, allowPassByReference)[ FD ]
Line_4 $$ final EjbDeploymentInformation ejb = findBean(locator.getAppName(), locator.getModuleName(), locator.getDistinctName(), locator.getBeanName())-->Line_15 $$ paramConfig.setClassCloner(new ClassLoaderClassCloner(ejb.getDeploymentClassLoader()))[ FD ]
Line_46 $$ if (txIdAttachmentPresent) -->Line_47 $$ data.put(TransactionID.PRIVATE_DATA_KEY, privateAttachments.get(AttachmentKeys.TRANSACTION_ID_KEY))[ CD ]
Line_19 $$ final Object[] parameters-->Line_23 $$ parameters = new Object[invocation.getParameters().length][ FD ]
Line_71 $$ Object result = view.invoke(interceptorContext)-->Line_82 $$ return LocalEjbReceiver.clone(result.getClass(), resultCloner, result, allowPassByReference)[ FD ]
Line_4 $$ final EjbDeploymentInformation ejb = findBean(locator.getAppName(), locator.getModuleName(), locator.getDistinctName(), locator.getBeanName())-->Line_12 $$ throw EjbLogger.ROOT_LOGGER.viewNotFound(viewClass.getName(), ejb.getEjbName())[ FD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_104 $$ receiverContext.resultReady(new ImmediateResultProducer(clonedResult))[ FD ]
Line_7 $$ final ComponentView view = ejb.getView(viewClass.getName())-->Line_8 $$ if (view == null) [ FD ]
Line_28 $$ final InterceptorContext interceptorContext = new InterceptorContext()-->Line_29 $$ interceptorContext.setParameters(parameters)[ FD ]
Line_37 $$ final Map<String, Object> data = new HashMap<String, Object>()-->Line_40 $$ data.put(entry.getKey(), entry.getValue())[ FD ]
Line_3 $$ final EJBLocator<?> locator = invocation.getLocator()-->Line_55 $$ if (locator instanceof EntityEJBLocator) [ FD ]
Line_52 $$ if (locator instanceof StatefulEJBLocator) -->Line_55 $$ if (locator instanceof EntityEJBLocator) [ CD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_6 $$ final Class<?> viewClass = invocation.getViewClass()[ FD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_31 $$ interceptorContext.setTarget(invocation.getInvokedProxy())[ CD ]
Line_28 $$ final InterceptorContext interceptorContext = new InterceptorContext()-->Line_57 $$ interceptorContext.putPrivateData(EntityBeanComponent.PRIMARY_KEY_CONTEXT_KEY, primaryKey)[ FD ]
Line_28 $$ final InterceptorContext interceptorContext = new InterceptorContext()-->Line_38 $$ interceptorContext.setContextData(data)[ FD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_3 $$ final EJBLocator<?> locator = invocation.getLocator()[ CD ]
Line_66 $$ final SecurityContext securityContext = SecurityContextAssociation.getSecurityContext()-->Line_69 $$ setSecurityContextOnAssociation(securityContext)[ FD ]
Line_71 $$ Object result = view.invoke(interceptorContext)-->Line_75 $$ if (result instanceof Future) [ FD ]
Line_23 $$ parameters = new Object[invocation.getParameters().length]-->Line_29 $$ interceptorContext.setParameters(parameters)[ FD ]
Line_34 $$ if (invocationContextData == null && privateAttachments.isEmpty()) -->Line_42 $$ if (!privateAttachments.isEmpty()) [ CD ]
Line_67 $$ final AsyncInvocationTask task = new AsyncInvocationTask(flag) -->Line_69 $$ setSecurityContextOnAssociation(securityContext)[ CD ]
Line_3 $$ final EJBLocator<?> locator = invocation.getLocator()-->Line_4 $$ final EjbDeploymentInformation ejb = findBean(locator.getAppName(), locator.getModuleName(), locator.getDistinctName(), locator.getBeanName())[ FD ]
Line_59 $$ final ClonerConfiguration config = new ClonerConfiguration()-->Line_61 $$ final ObjectCloner resultCloner = createCloner(config)[ FD ]
Line_52 $$ if (locator instanceof StatefulEJBLocator) -->Line_54 $$ interceptorContext.putPrivateData(SessionID.class, sessionID)[ CD ]
Line_19 $$ final Object[] parameters-->Line_29 $$ interceptorContext.setParameters(parameters)[ FD ]
Line_63 $$ if (ejbComponent instanceof SessionBeanComponent) -->Line_64 $$ final SessionBeanComponent component = (SessionBeanComponent) ejbComponent[ CD ]
Line_24 $$ for (int i = 0; i < parameters.length; ++i) -->Line_25 $$ parameters[i] = clone(method.getParameterTypes()[i], parameterCloner, invocation.getParameters()[i], allowPassByReference)[ CD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_60 $$ config.setClassCloner(new LocalInvocationClassCloner(WildFlySecurityManager.getClassLoaderPrivileged(invocation.getInvokedProxy().getClass())))[ FD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_15 $$ paramConfig.setClassCloner(new ClassLoaderClassCloner(ejb.getDeploymentClassLoader()))[ CD ]
Line_39 $$ for (Map.Entry<String, Object> entry : invocationContextData.entrySet()) -->Line_40 $$ data.put(entry.getKey(), entry.getValue())[ FD ]
Line_61 $$ final ObjectCloner resultCloner = createCloner(config)-->Line_101 $$ throw (Exception) clone(Exception.class, resultCloner, e, allowPassByReference)[ FD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_25 $$ parameters[i] = clone(method.getParameterTypes()[i], parameterCloner, invocation.getParameters()[i], allowPassByReference)[ FD ]
Line_65 $$ final CancellationFlag flag = new CancellationFlag()-->Line_90 $$ interceptorContext.putPrivateData(CancellationFlag.class, flag)[ FD ]
Line_28 $$ final InterceptorContext interceptorContext = new InterceptorContext()-->Line_31 $$ interceptorContext.setTarget(invocation.getInvokedProxy())[ FD ]
Line_16 $$ final ObjectCloner parameterCloner = createCloner(paramConfig)-->Line_25 $$ parameters[i] = clone(method.getParameterTypes()[i], parameterCloner, invocation.getParameters()[i], allowPassByReference)[ FD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_8 $$ if (view == null) [ CD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_51 $$ interceptorContext.putPrivateData(ComponentView.class, view)[ CD ]
Line_62 $$ if (async) -->Line_103 $$ final Object clonedResult = clone(invocation.getInvokedMethod().getReturnType(), resultCloner, result, allowPassByReference)[ CD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_6 $$ final Class<?> viewClass = invocation.getViewClass()[ CD ]
Line_28 $$ final InterceptorContext interceptorContext = new InterceptorContext()-->Line_54 $$ interceptorContext.putPrivateData(SessionID.class, sessionID)[ FD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_20 $$ if (invocation.getParameters() == null) [ FD ]
Line_17 $$ final Method method = view.getMethod(invocation.getInvokedMethod().getName(), DescriptorUtils.methodDescriptor(invocation.getInvokedMethod()))-->Line_18 $$ final boolean async = view.isAsynchronous(method)[ FD ]
Line_5 $$ final EJBComponent ejbComponent = ejb.getEjbComponent()-->Line_63 $$ if (ejbComponent instanceof SessionBeanComponent) [ FD ]
Line_75 $$ if (result instanceof Future) -->Line_80 $$ return new AsyncResult(LocalEjbReceiver.clone(asyncValue.getClass(), resultCloner, asyncValue, allowPassByReference))[ CD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_31 $$ interceptorContext.setTarget(invocation.getInvokedProxy())[ FD ]
Line_7 $$ final ComponentView view = ejb.getView(viewClass.getName())-->Line_51 $$ interceptorContext.putPrivateData(ComponentView.class, view)[ FD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_52 $$ if (locator instanceof StatefulEJBLocator) [ CD ]
Line_4 $$ final EjbDeploymentInformation ejb = findBean(locator.getAppName(), locator.getModuleName(), locator.getDistinctName(), locator.getBeanName())-->Line_7 $$ final ComponentView view = ejb.getView(viewClass.getName())[ FD ]
Line_6 $$ final Class<?> viewClass = invocation.getViewClass()-->Line_12 $$ throw EjbLogger.ROOT_LOGGER.viewNotFound(viewClass.getName(), ejb.getEjbName())[ FD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_19 $$ final Object[] parameters[ CD ]
Line_7 $$ final ComponentView view = ejb.getView(viewClass.getName())-->Line_18 $$ final boolean async = view.isAsynchronous(method)[ FD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_50 $$ interceptorContext.putPrivateData(Component.class, ejbComponent)[ CD ]
Line_55 $$ if (locator instanceof EntityEJBLocator) -->Line_56 $$ final Object primaryKey = ((EntityEJBLocator<?>) locator).getPrimaryKey()[ CD ]
Line_7 $$ final ComponentView view = ejb.getView(viewClass.getName())-->Line_71 $$ Object result = view.invoke(interceptorContext)[ FD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_30 $$ interceptorContext.setMethod(method)[ CD ]
Line_63 $$ if (ejbComponent instanceof SessionBeanComponent) -->Line_90 $$ interceptorContext.putPrivateData(CancellationFlag.class, flag)[ CD ]
Line_28 $$ final InterceptorContext interceptorContext = new InterceptorContext()-->Line_71 $$ Object result = view.invoke(interceptorContext)[ FD ]
Line_6 $$ final Class<?> viewClass = invocation.getViewClass()-->Line_9 $$ throw EjbLogger.ROOT_LOGGER.viewNotFound(viewClass.getName(), ejb.getEjbName())[ FD ]
Line_28 $$ final InterceptorContext interceptorContext = new InterceptorContext()-->Line_35 $$ interceptorContext.setContextData(new HashMap<String, Object>())[ FD ]
Line_32 $$ final Map<Object, Object> privateAttachments = invocation.getAttachments()-->Line_47 $$ data.put(TransactionID.PRIVATE_DATA_KEY, privateAttachments.get(AttachmentKeys.TRANSACTION_ID_KEY))[ FD ]
Line_32 $$ final Map<Object, Object> privateAttachments = invocation.getAttachments()-->Line_45 $$ final boolean txIdAttachmentPresent = privateAttachments.containsKey(AttachmentKeys.TRANSACTION_ID_KEY)[ FD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_103 $$ final Object clonedResult = clone(invocation.getInvokedMethod().getReturnType(), resultCloner, result, allowPassByReference)[ FD ]
Line_56 $$ final Object primaryKey = ((EntityEJBLocator<?>) locator).getPrimaryKey()-->Line_57 $$ interceptorContext.putPrivateData(EntityBeanComponent.PRIMARY_KEY_CONTEXT_KEY, primaryKey)[ FD ]
Line_55 $$ if (locator instanceof EntityEJBLocator) -->Line_57 $$ interceptorContext.putPrivateData(EntityBeanComponent.PRIMARY_KEY_CONTEXT_KEY, primaryKey)[ CD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_17 $$ final Method method = view.getMethod(invocation.getInvokedMethod().getName(), DescriptorUtils.methodDescriptor(invocation.getInvokedMethod()))[ CD ]
Line_37 $$ final Map<String, Object> data = new HashMap<String, Object>()-->Line_47 $$ data.put(TransactionID.PRIVATE_DATA_KEY, privateAttachments.get(AttachmentKeys.TRANSACTION_ID_KEY))[ FD ]
Line_63 $$ if (ejbComponent instanceof SessionBeanComponent) -->Line_67 $$ final AsyncInvocationTask task = new AsyncInvocationTask(flag) [ CD ]
Line_52 $$ if (locator instanceof StatefulEJBLocator) -->Line_53 $$ final SessionID sessionID = ((StatefulEJBLocator<?>) locator).getSessionId()[ CD ]
Line_20 $$ if (invocation.getParameters() == null) -->Line_23 $$ parameters = new Object[invocation.getParameters().length][ CD ]
Line_3 $$ final EJBLocator<?> locator = invocation.getLocator()-->Line_52 $$ if (locator instanceof StatefulEJBLocator) [ FD ]
Line_2 $$ protected void processInvocation(final EJBClientInvocationContext invocation, final EJBReceiverInvocationContext receiverContext) throws Exception -->Line_16 $$ final ObjectCloner parameterCloner = createCloner(paramConfig)[ CD ]
Line_32 $$ final Map<Object, Object> privateAttachments = invocation.getAttachments()-->Line_34 $$ if (invocationContextData == null && privateAttachments.isEmpty()) [ FD ]
