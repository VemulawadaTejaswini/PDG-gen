Line_2 $$ public static Block mapBlockOf(Type keyType, Type valueType, Map<?, ?> value) -->Line_8 $$ return blockBuilder.build()[ CD ]
Line_4 $$ for (Map.Entry<?, ?> entry : value.entrySet()) -->Line_5 $$ appendToBlockBuilder(keyType, entry.getKey(), blockBuilder)[ FD ]
Line_3 $$ BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(keyType, valueType), new BlockBuilderStatus(), value.size() * 2)-->Line_6 $$ appendToBlockBuilder(valueType, entry.getValue(), blockBuilder)[ FD ]
Line_2 $$ public static Block mapBlockOf(Type keyType, Type valueType, Map<?, ?> value) -->Line_6 $$ appendToBlockBuilder(valueType, entry.getValue(), blockBuilder)[ FD ]
Line_3 $$ BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(keyType, valueType), new BlockBuilderStatus(), value.size() * 2)-->Line_8 $$ return blockBuilder.build()[ FD ]
Line_2 $$ public static Block mapBlockOf(Type keyType, Type valueType, Map<?, ?> value) -->Line_3 $$ BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(keyType, valueType), new BlockBuilderStatus(), value.size() * 2)[ FD ]
Line_3 $$ BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(keyType, valueType), new BlockBuilderStatus(), value.size() * 2)-->Line_5 $$ appendToBlockBuilder(keyType, entry.getKey(), blockBuilder)[ FD ]
Line_2 $$ public static Block mapBlockOf(Type keyType, Type valueType, Map<?, ?> value) -->Line_3 $$ BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(keyType, valueType), new BlockBuilderStatus(), value.size() * 2)[ CD ]
Line_2 $$ public static Block mapBlockOf(Type keyType, Type valueType, Map<?, ?> value) -->Line_5 $$ appendToBlockBuilder(keyType, entry.getKey(), blockBuilder)[ FD ]
Line_2 $$ public static Block mapBlockOf(Type keyType, Type valueType, Map<?, ?> value) -->Line_4 $$ for (Map.Entry<?, ?> entry : value.entrySet()) [ FD ]
Line_4 $$ for (Map.Entry<?, ?> entry : value.entrySet()) -->Line_6 $$ appendToBlockBuilder(valueType, entry.getValue(), blockBuilder)[ FD ]
