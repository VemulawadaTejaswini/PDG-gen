Line_4 $$ final Map<InetAddress, UUID> versions = new ConcurrentHashMap<InetAddress, UUID>()-->Line_26 $$ UUID version = versions.get(host)[ FD ]
Line_7 $$ IAsyncCallback<UUID> cb = new IAsyncCallback<UUID>() -->Line_13 $$ return false[ CD ]
Line_7 $$ IAsyncCallback<UUID> cb = new IAsyncCallback<UUID>() -->Line_9 $$ versions.put(message.from, message.payload)[ CD ]
Line_29 $$ if (hosts == null) -->Line_31 $$ results.put(stringVersion, hosts)[ CD ]
Line_6 $$ final CountDownLatch latch = new CountDownLatch(liveHosts.size())-->Line_10 $$ latch.countDown()[ FD ]
Line_4 $$ final Map<InetAddress, UUID> versions = new ConcurrentHashMap<InetAddress, UUID>()-->Line_9 $$ versions.put(message.from, message.payload)[ FD ]
Line_5 $$ final Set<InetAddress> liveHosts = Gossiper.instance.getLiveMembers()-->Line_6 $$ final CountDownLatch latch = new CountDownLatch(liveHosts.size())[ FD ]
Line_2 $$ public static Map<String, List<String>> describeSchemaVersions() -->Line_7 $$ IAsyncCallback<UUID> cb = new IAsyncCallback<UUID>() [ CD ]
Line_35 $$ if (results.get(UNREACHABLE) != null)-->Line_36 $$ logger.debug("Hosts not in agreement. Didn't get a response from everybody: [ CD ]
Line_2 $$ public static Map<String, List<String>> describeSchemaVersions() -->Line_44 $$ return results[ CD ]
Line_2 $$ public static Map<String, List<String>> describeSchemaVersions() -->Line_6 $$ final CountDownLatch latch = new CountDownLatch(liveHosts.size())[ CD ]
Line_7 $$ IAsyncCallback<UUID> cb = new IAsyncCallback<UUID>() -->Line_10 $$ latch.countDown()[ CD ]
Line_7 $$ IAsyncCallback<UUID> cb = new IAsyncCallback<UUID>() -->Line_17 $$ MessagingService.instance().sendRR(message, endpoint, cb)[ FD ]
Line_3 $$ final String myVersion = Schema.instance.getVersion().toString()-->Line_38 $$ if (entry.getKey().equals(UNREACHABLE) || entry.getKey().equals(myVersion))[ FD ]
Line_2 $$ public static Map<String, List<String>> describeSchemaVersions() -->Line_24 $$ Iterable<InetAddress> allHosts = Iterables.concat(Gossiper.instance.getLiveMembers(), Gossiper.instance.getUnreachableMembers())[ CD ]
Line_6 $$ final CountDownLatch latch = new CountDownLatch(liveHosts.size())-->Line_19 $$ latch.await(DatabaseDescriptor.getRpcTimeout(), TimeUnit.MILLISECONDS)[ FD ]
Line_2 $$ public static Map<String, List<String>> describeSchemaVersions() -->Line_5 $$ final Set<InetAddress> liveHosts = Gossiper.instance.getLiveMembers()[ CD ]
Line_2 $$ public static Map<String, List<String>> describeSchemaVersions() -->Line_4 $$ final Map<InetAddress, UUID> versions = new ConcurrentHashMap<InetAddress, UUID>()[ CD ]
Line_2 $$ public static Map<String, List<String>> describeSchemaVersions() -->Line_35 $$ if (results.get(UNREACHABLE) != null)[ CD ]
Line_42 $$ if (results.size() == 1)-->Line_43 $$ logger.debug("Schemas are in agreement.")[ CD ]
Line_2 $$ public static Map<String, List<String>> describeSchemaVersions() -->Line_42 $$ if (results.size() == 1)[ CD ]
Line_2 $$ public static Map<String, List<String>> describeSchemaVersions() -->Line_3 $$ final String myVersion = Schema.instance.getVersion().toString()[ CD ]
