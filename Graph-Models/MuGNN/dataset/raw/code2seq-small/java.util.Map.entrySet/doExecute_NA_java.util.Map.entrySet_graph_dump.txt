Line_22 $$ final String index = entry.getKey()-->Line_23 $$ if (autoCreateIndex.shouldAutoCreate(index, state)) [ FD ]
Line_4 $$ final AtomicArray<BulkItemResponse> responses = new AtomicArray(bulkRequest.requests.size())-->Line_52 $$ executeBulk(bulkRequest, startTime, listener, responses)[ FD ]
Line_21 $$ for (Map.Entry<String, Set<String>> entry : indicesAndTypes.entrySet()) -->Line_26 $$ for (String type : entry.getValue()) [ FD ]
Line_23 $$ if (autoCreateIndex.shouldAutoCreate(index, state)) -->Line_29 $$ createIndexRequest.cause("auto(bulk api)")[ CD ]
Line_19 $$ final AtomicInteger counter = new AtomicInteger(indicesAndTypes.size())-->Line_50 $$ if (counter.decrementAndGet() == 0) [ FD ]
Line_31 $$ createIndexAction.execute(createIndexRequest, new ActionListener<CreateIndexResponse>() -->Line_42 $$ if (!(ExceptionsHelper.unwrapCause(e) instanceof IndexAlreadyExistsException)) [ FD ]
Line_8 $$ if (request instanceof DocumentRequest) -->Line_10 $$ Set<String> types = indicesAndTypes.get(req.index())[ CD ]
Line_26 $$ for (String type : entry.getValue()) -->Line_27 $$ createIndexRequest.mapping(type)[ FD ]
Line_4 $$ final AtomicArray<BulkItemResponse> responses = new AtomicArray(bulkRequest.requests.size())-->Line_45 $$ if (request != null && setResponseFailureIfIndexMatches(responses, i, request, index, e)) [ FD ]
Line_23 $$ if (autoCreateIndex.shouldAutoCreate(index, state)) -->Line_24 $$ CreateIndexRequest createIndexRequest = new CreateIndexRequest(bulkRequest)[ CD ]
Line_12 $$ indicesAndTypes.put(req.index(), types = new HashSet())-->Line_14 $$ types.add(req.type())[ FD ]
Line_8 $$ if (request instanceof DocumentRequest) -->Line_14 $$ types.add(req.type())[ CD ]
Line_19 $$ final AtomicInteger counter = new AtomicInteger(indicesAndTypes.size())-->Line_33 $$ if (counter.decrementAndGet() == 0) [ FD ]
Line_43 $$ for (int i = 0; i < bulkRequest.requests.size(); i++) -->Line_44 $$ ActionRequest request = bulkRequest.requests.get(i)[ FD ]
Line_43 $$ for (int i = 0; i < bulkRequest.requests.size(); i++) -->Line_45 $$ if (request != null && setResponseFailureIfIndexMatches(responses, i, request, index, e)) [ CD ]
Line_24 $$ CreateIndexRequest createIndexRequest = new CreateIndexRequest(bulkRequest)-->Line_27 $$ createIndexRequest.mapping(type)[ FD ]
Line_42 $$ if (!(ExceptionsHelper.unwrapCause(e) instanceof IndexAlreadyExistsException)) -->Line_43 $$ for (int i = 0; i < bulkRequest.requests.size(); i++) [ CD ]
Line_23 $$ if (autoCreateIndex.shouldAutoCreate(index, state)) -->Line_60 $$ if (counter.decrementAndGet() == 0) [ CD ]
Line_4 $$ final AtomicArray<BulkItemResponse> responses = new AtomicArray(bulkRequest.requests.size())-->Line_66 $$ executeBulk(bulkRequest, startTime, listener, responses)[ FD ]
Line_7 $$ for (ActionRequest request : bulkRequest.requests) -->Line_8 $$ if (request instanceof DocumentRequest) [ FD ]
Line_20 $$ ClusterState state = clusterService.state()-->Line_23 $$ if (autoCreateIndex.shouldAutoCreate(index, state)) [ FD ]
Line_2 $$ protected void doExecute(final BulkRequest bulkRequest, final ActionListener<BulkResponse> listener) -->Line_5 $$ if (autoCreateIndex.needToCheck()) [ CD ]
Line_6 $$ final Map<String, Set<String>> indicesAndTypes = new HashMap()-->Line_12 $$ indicesAndTypes.put(req.index(), types = new HashSet())[ FD ]
Line_4 $$ final AtomicArray<BulkItemResponse> responses = new AtomicArray(bulkRequest.requests.size())-->Line_61 $$ executeBulk(bulkRequest, startTime, listener, responses)[ FD ]
Line_9 $$ DocumentRequest req = (DocumentRequest) request-->Line_14 $$ types.add(req.type())[ FD ]
Line_10 $$ Set<String> types = indicesAndTypes.get(req.index())-->Line_14 $$ types.add(req.type())[ FD ]
Line_31 $$ createIndexAction.execute(createIndexRequest, new ActionListener<CreateIndexResponse>() -->Line_33 $$ if (counter.decrementAndGet() == 0) [ CD ]
Line_2 $$ protected void doExecute(final BulkRequest bulkRequest, final ActionListener<BulkResponse> listener) -->Line_61 $$ executeBulk(bulkRequest, startTime, listener, responses)[ FD ]
Line_24 $$ CreateIndexRequest createIndexRequest = new CreateIndexRequest(bulkRequest)-->Line_25 $$ createIndexRequest.index(index)[ FD ]
Line_43 $$ for (int i = 0; i < bulkRequest.requests.size(); i++) -->Line_45 $$ if (request != null && setResponseFailureIfIndexMatches(responses, i, request, index, e)) [ FD ]
Line_3 $$ final long startTime = System.currentTimeMillis()-->Line_66 $$ executeBulk(bulkRequest, startTime, listener, responses)[ FD ]
Line_4 $$ final AtomicArray<BulkItemResponse> responses = new AtomicArray(bulkRequest.requests.size())-->Line_35 $$ executeBulk(bulkRequest, startTime, listener, responses)[ FD ]
Line_9 $$ DocumentRequest req = (DocumentRequest) request-->Line_12 $$ indicesAndTypes.put(req.index(), types = new HashSet())[ FD ]
Line_24 $$ CreateIndexRequest createIndexRequest = new CreateIndexRequest(bulkRequest)-->Line_29 $$ createIndexRequest.cause("auto(bulk api)")[ FD ]
Line_43 $$ for (int i = 0; i < bulkRequest.requests.size(); i++) -->Line_44 $$ ActionRequest request = bulkRequest.requests.get(i)[ CD ]
Line_11 $$ if (types == null) -->Line_12 $$ indicesAndTypes.put(req.index(), types = new HashSet())[ CD ]
Line_10 $$ Set<String> types = indicesAndTypes.get(req.index())-->Line_12 $$ indicesAndTypes.put(req.index(), types = new HashSet())[ FD ]
Line_6 $$ final Map<String, Set<String>> indicesAndTypes = new HashMap()-->Line_19 $$ final AtomicInteger counter = new AtomicInteger(indicesAndTypes.size())[ FD ]
Line_7 $$ for (ActionRequest request : bulkRequest.requests) -->Line_45 $$ if (request != null && setResponseFailureIfIndexMatches(responses, i, request, index, e)) [ FD ]
Line_60 $$ if (counter.decrementAndGet() == 0) -->Line_61 $$ executeBulk(bulkRequest, startTime, listener, responses)[ CD ]
Line_24 $$ CreateIndexRequest createIndexRequest = new CreateIndexRequest(bulkRequest)-->Line_31 $$ createIndexAction.execute(createIndexRequest, new ActionListener<CreateIndexResponse>() [ FD ]
Line_2 $$ protected void doExecute(final BulkRequest bulkRequest, final ActionListener<BulkResponse> listener) -->Line_66 $$ executeBulk(bulkRequest, startTime, listener, responses)[ FD ]
Line_31 $$ createIndexAction.execute(createIndexRequest, new ActionListener<CreateIndexResponse>() -->Line_50 $$ if (counter.decrementAndGet() == 0) [ CD ]
Line_22 $$ final String index = entry.getKey()-->Line_25 $$ createIndexRequest.index(index)[ FD ]
Line_24 $$ CreateIndexRequest createIndexRequest = new CreateIndexRequest(bulkRequest)-->Line_30 $$ createIndexRequest.masterNodeTimeout(bulkRequest.timeout())[ FD ]
Line_2 $$ protected void doExecute(final BulkRequest bulkRequest, final ActionListener<BulkResponse> listener) -->Line_52 $$ executeBulk(bulkRequest, startTime, listener, responses)[ FD ]
Line_19 $$ final AtomicInteger counter = new AtomicInteger(indicesAndTypes.size())-->Line_60 $$ if (counter.decrementAndGet() == 0) [ FD ]
Line_5 $$ if (autoCreateIndex.needToCheck()) -->Line_19 $$ final AtomicInteger counter = new AtomicInteger(indicesAndTypes.size())[ CD ]
Line_6 $$ final Map<String, Set<String>> indicesAndTypes = new HashMap()-->Line_21 $$ for (Map.Entry<String, Set<String>> entry : indicesAndTypes.entrySet()) [ FD ]
Line_3 $$ final long startTime = System.currentTimeMillis()-->Line_35 $$ executeBulk(bulkRequest, startTime, listener, responses)[ FD ]
Line_5 $$ if (autoCreateIndex.needToCheck()) -->Line_6 $$ final Map<String, Set<String>> indicesAndTypes = new HashMap()[ CD ]
Line_9 $$ DocumentRequest req = (DocumentRequest) request-->Line_10 $$ Set<String> types = indicesAndTypes.get(req.index())[ FD ]
Line_23 $$ if (autoCreateIndex.shouldAutoCreate(index, state)) -->Line_25 $$ createIndexRequest.index(index)[ CD ]
Line_8 $$ if (request instanceof DocumentRequest) -->Line_9 $$ DocumentRequest req = (DocumentRequest) request[ CD ]
Line_2 $$ protected void doExecute(final BulkRequest bulkRequest, final ActionListener<BulkResponse> listener) -->Line_30 $$ createIndexRequest.masterNodeTimeout(bulkRequest.timeout())[ FD ]
Line_2 $$ protected void doExecute(final BulkRequest bulkRequest, final ActionListener<BulkResponse> listener) -->Line_37 $$ listener.onFailure(t)[ FD ]
Line_2 $$ protected void doExecute(final BulkRequest bulkRequest, final ActionListener<BulkResponse> listener) -->Line_3 $$ final long startTime = System.currentTimeMillis()[ CD ]
Line_6 $$ final Map<String, Set<String>> indicesAndTypes = new HashMap()-->Line_10 $$ Set<String> types = indicesAndTypes.get(req.index())[ FD ]
Line_5 $$ if (autoCreateIndex.needToCheck()) -->Line_20 $$ ClusterState state = clusterService.state()[ CD ]
Line_44 $$ ActionRequest request = bulkRequest.requests.get(i)-->Line_45 $$ if (request != null && setResponseFailureIfIndexMatches(responses, i, request, index, e)) [ FD ]
Line_5 $$ if (autoCreateIndex.needToCheck()) -->Line_66 $$ executeBulk(bulkRequest, startTime, listener, responses)[ CD ]
Line_8 $$ if (request instanceof DocumentRequest) -->Line_11 $$ if (types == null) [ CD ]
Line_23 $$ if (autoCreateIndex.shouldAutoCreate(index, state)) -->Line_31 $$ createIndexAction.execute(createIndexRequest, new ActionListener<CreateIndexResponse>() [ CD ]
Line_45 $$ if (request != null && setResponseFailureIfIndexMatches(responses, i, request, index, e)) -->Line_46 $$ bulkRequest.requests.set(i, null)[ CD ]
Line_23 $$ if (autoCreateIndex.shouldAutoCreate(index, state)) -->Line_30 $$ createIndexRequest.masterNodeTimeout(bulkRequest.timeout())[ CD ]
Line_31 $$ createIndexAction.execute(createIndexRequest, new ActionListener<CreateIndexResponse>() -->Line_42 $$ if (!(ExceptionsHelper.unwrapCause(e) instanceof IndexAlreadyExistsException)) [ CD ]
Line_3 $$ final long startTime = System.currentTimeMillis()-->Line_52 $$ executeBulk(bulkRequest, startTime, listener, responses)[ FD ]
Line_7 $$ for (ActionRequest request : bulkRequest.requests) -->Line_16 $$ throw new ElasticsearchException("Parsed unknown request in bulk actions: " + request.getClass().getSimpleName())[ FD ]
Line_22 $$ final String index = entry.getKey()-->Line_45 $$ if (request != null && setResponseFailureIfIndexMatches(responses, i, request, index, e)) [ FD ]
Line_2 $$ protected void doExecute(final BulkRequest bulkRequest, final ActionListener<BulkResponse> listener) -->Line_35 $$ executeBulk(bulkRequest, startTime, listener, responses)[ FD ]
Line_3 $$ final long startTime = System.currentTimeMillis()-->Line_61 $$ executeBulk(bulkRequest, startTime, listener, responses)[ FD ]
Line_2 $$ protected void doExecute(final BulkRequest bulkRequest, final ActionListener<BulkResponse> listener) -->Line_54 $$ listener.onFailure(t)[ FD ]
Line_10 $$ Set<String> types = indicesAndTypes.get(req.index())-->Line_11 $$ if (types == null) [ FD ]
Line_2 $$ protected void doExecute(final BulkRequest bulkRequest, final ActionListener<BulkResponse> listener) -->Line_4 $$ final AtomicArray<BulkItemResponse> responses = new AtomicArray(bulkRequest.requests.size())[ CD ]
Line_43 $$ for (int i = 0; i < bulkRequest.requests.size(); i++) -->Line_46 $$ bulkRequest.requests.set(i, null)[ FD ]
Line_21 $$ for (Map.Entry<String, Set<String>> entry : indicesAndTypes.entrySet()) -->Line_22 $$ final String index = entry.getKey()[ FD ]
Line_31 $$ createIndexAction.execute(createIndexRequest, new ActionListener<CreateIndexResponse>() -->Line_45 $$ if (request != null && setResponseFailureIfIndexMatches(responses, i, request, index, e)) [ FD ]
