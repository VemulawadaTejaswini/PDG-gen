Line_9 $$ if (nodesToFetch.isEmpty() == false) -->Line_14 $$ int index = 0[ CD ]
Line_13 $$ String[] nodesIds = new String[nodesToFetch.size()]-->Line_18 $$ asyncFetch(shardId, nodesIds, metaData)[ FD ]
Line_25 $$ for (Iterator<Map.Entry<String, NodeEntry<T>>> it = cache.entrySet().iterator(); it.hasNext(); ) -->Line_30 $$ if (node != null) [ CD ]
Line_20 $$ if (hasAnyNodeFetching(cache) == true) -->Line_41 $$ Set<String> allIgnoreNodes = unmodifiableSet(new HashSet(nodesToIgnore))[ CD ]
Line_27 $$ String nodeId = entry.getKey()-->Line_29 $$ DiscoveryNode node = nodes.get(nodeId)[ FD ]
Line_41 $$ Set<String> allIgnoreNodes = unmodifiableSet(new HashSet(nodesToIgnore))-->Line_44 $$ reroute(shardId, "nodes failed [" + failedNodes.size() + "], ignored [" + allIgnoreNodes.size() + "]")[ FD ]
Line_8 $$ Set<NodeEntry<T>> nodesToFetch = findNodesToFetch(cache)-->Line_9 $$ if (nodesToFetch.isEmpty() == false) [ FD ]
Line_26 $$ Map.Entry<String, NodeEntry<T>> entry = it.next()-->Line_27 $$ String nodeId = entry.getKey()[ FD ]
Line_9 $$ if (nodesToFetch.isEmpty() == false) -->Line_18 $$ asyncFetch(shardId, nodesIds, metaData)[ CD ]
Line_25 $$ for (Iterator<Map.Entry<String, NodeEntry<T>>> it = cache.entrySet().iterator(); it.hasNext(); ) -->Line_26 $$ Map.Entry<String, NodeEntry<T>> entry = it.next()[ CD ]
Line_10 $$ for (NodeEntry<T> nodeEntry : nodesToFetch) -->Line_35 $$ if (nodeEntry.getValue() != null) [ FD ]
Line_29 $$ DiscoveryNode node = nodes.get(nodeId)-->Line_30 $$ if (node != null) [ FD ]
Line_2 $$ public synchronized FetchResult<T> fetchData(DiscoveryNodes nodes, MetaData metaData, Set<String> ignoreNodes) -->Line_8 $$ Set<NodeEntry<T>> nodesToFetch = findNodesToFetch(cache)[ CD ]
Line_28 $$ NodeEntry<T> nodeEntry = entry.getValue()-->Line_33 $$ failedNodes.add(nodeEntry.getNodeId())[ FD ]
Line_23 $$ Map<DiscoveryNode, T> fetchData = new HashMap()-->Line_36 $$ fetchData.put(node, nodeEntry.getValue())[ FD ]
Line_25 $$ for (Iterator<Map.Entry<String, NodeEntry<T>>> it = cache.entrySet().iterator(); it.hasNext(); ) -->Line_27 $$ String nodeId = entry.getKey()[ CD ]
Line_2 $$ public synchronized FetchResult<T> fetchData(DiscoveryNodes nodes, MetaData metaData, Set<String> ignoreNodes) -->Line_9 $$ if (nodesToFetch.isEmpty() == false) [ CD ]
Line_41 $$ Set<String> allIgnoreNodes = unmodifiableSet(new HashSet(nodesToIgnore))-->Line_43 $$ if (failedNodes.isEmpty() == false || allIgnoreNodes.isEmpty() == false) [ FD ]
Line_28 $$ NodeEntry<T> nodeEntry = entry.getValue()-->Line_31 $$ if (nodeEntry.isFailed() == true) [ FD ]
Line_9 $$ if (nodesToFetch.isEmpty() == false) -->Line_13 $$ String[] nodesIds = new String[nodesToFetch.size()][ CD ]
Line_2 $$ public synchronized FetchResult<T> fetchData(DiscoveryNodes nodes, MetaData metaData, Set<String> ignoreNodes) -->Line_3 $$ if (closed) [ CD ]
Line_10 $$ for (NodeEntry<T> nodeEntry : nodesToFetch) -->Line_31 $$ if (nodeEntry.isFailed() == true) [ FD ]
Line_10 $$ for (NodeEntry<T> nodeEntry : nodesToFetch) -->Line_33 $$ failedNodes.add(nodeEntry.getNodeId())[ FD ]
Line_29 $$ DiscoveryNode node = nodes.get(nodeId)-->Line_36 $$ fetchData.put(node, nodeEntry.getValue())[ FD ]
Line_24 $$ Set<String> failedNodes = new HashSet()-->Line_44 $$ reroute(shardId, "nodes failed [" + failedNodes.size() + "], ignored [" + allIgnoreNodes.size() + "]")[ FD ]
Line_24 $$ Set<String> failedNodes = new HashSet()-->Line_43 $$ if (failedNodes.isEmpty() == false || allIgnoreNodes.isEmpty() == false) [ FD ]
Line_25 $$ for (Iterator<Map.Entry<String, NodeEntry<T>>> it = cache.entrySet().iterator(); it.hasNext(); ) -->Line_29 $$ DiscoveryNode node = nodes.get(nodeId)[ CD ]
Line_31 $$ if (nodeEntry.isFailed() == true) -->Line_32 $$ it.remove()[ CD ]
Line_26 $$ Map.Entry<String, NodeEntry<T>> entry = it.next()-->Line_28 $$ NodeEntry<T> nodeEntry = entry.getValue()[ FD ]
Line_25 $$ for (Iterator<Map.Entry<String, NodeEntry<T>>> it = cache.entrySet().iterator(); it.hasNext(); ) -->Line_32 $$ it.remove()[ FD ]
Line_20 $$ if (hasAnyNodeFetching(cache) == true) -->Line_24 $$ Set<String> failedNodes = new HashSet()[ CD ]
Line_8 $$ Set<NodeEntry<T>> nodesToFetch = findNodesToFetch(cache)-->Line_13 $$ String[] nodesIds = new String[nodesToFetch.size()][ FD ]
Line_24 $$ Set<String> failedNodes = new HashSet()-->Line_33 $$ failedNodes.add(nodeEntry.getNodeId())[ FD ]
Line_10 $$ for (NodeEntry<T> nodeEntry : nodesToFetch) -->Line_36 $$ fetchData.put(node, nodeEntry.getValue())[ FD ]
Line_14 $$ int index = 0-->Line_16 $$ nodesIds[index++] = nodeEntry.getNodeId()[ FD ]
Line_20 $$ if (hasAnyNodeFetching(cache) == true) -->Line_25 $$ for (Iterator<Map.Entry<String, NodeEntry<T>>> it = cache.entrySet().iterator(); it.hasNext(); ) [ CD ]
Line_10 $$ for (NodeEntry<T> nodeEntry : nodesToFetch) -->Line_16 $$ nodesIds[index++] = nodeEntry.getNodeId()[ FD ]
Line_28 $$ NodeEntry<T> nodeEntry = entry.getValue()-->Line_35 $$ if (nodeEntry.getValue() != null) [ FD ]
Line_30 $$ if (node != null) -->Line_31 $$ if (nodeEntry.isFailed() == true) [ CD ]
Line_31 $$ if (nodeEntry.isFailed() == true) -->Line_33 $$ failedNodes.add(nodeEntry.getNodeId())[ CD ]
Line_20 $$ if (hasAnyNodeFetching(cache) == true) -->Line_42 $$ nodesToIgnore.clear()[ CD ]
Line_10 $$ for (NodeEntry<T> nodeEntry : nodesToFetch) -->Line_11 $$ nodeEntry.markAsFetching()[ FD ]
Line_31 $$ if (nodeEntry.isFailed() == true) -->Line_35 $$ if (nodeEntry.getValue() != null) [ CD ]
Line_20 $$ if (hasAnyNodeFetching(cache) == true) -->Line_46 $$ return new FetchResult(shardId, fetchData, failedNodes, allIgnoreNodes)[ CD ]
Line_2 $$ public synchronized FetchResult<T> fetchData(DiscoveryNodes nodes, MetaData metaData, Set<String> ignoreNodes) -->Line_6 $$ nodesToIgnore.addAll(ignoreNodes)[ FD ]
Line_2 $$ public synchronized FetchResult<T> fetchData(DiscoveryNodes nodes, MetaData metaData, Set<String> ignoreNodes) -->Line_6 $$ nodesToIgnore.addAll(ignoreNodes)[ CD ]
Line_20 $$ if (hasAnyNodeFetching(cache) == true) -->Line_21 $$ return new FetchResult(shardId, null, emptySet(), emptySet())[ CD ]
Line_25 $$ for (Iterator<Map.Entry<String, NodeEntry<T>>> it = cache.entrySet().iterator(); it.hasNext(); ) -->Line_26 $$ Map.Entry<String, NodeEntry<T>> entry = it.next()[ FD ]
Line_2 $$ public synchronized FetchResult<T> fetchData(DiscoveryNodes nodes, MetaData metaData, Set<String> ignoreNodes) -->Line_7 $$ fillShardCacheWithDataNodes(cache, nodes)[ FD ]
Line_25 $$ for (Iterator<Map.Entry<String, NodeEntry<T>>> it = cache.entrySet().iterator(); it.hasNext(); ) -->Line_28 $$ NodeEntry<T> nodeEntry = entry.getValue()[ CD ]
Line_2 $$ public synchronized FetchResult<T> fetchData(DiscoveryNodes nodes, MetaData metaData, Set<String> ignoreNodes) -->Line_29 $$ DiscoveryNode node = nodes.get(nodeId)[ FD ]
Line_35 $$ if (nodeEntry.getValue() != null) -->Line_36 $$ fetchData.put(node, nodeEntry.getValue())[ CD ]
Line_20 $$ if (hasAnyNodeFetching(cache) == true) -->Line_23 $$ Map<DiscoveryNode, T> fetchData = new HashMap()[ CD ]
Line_20 $$ if (hasAnyNodeFetching(cache) == true) -->Line_43 $$ if (failedNodes.isEmpty() == false || allIgnoreNodes.isEmpty() == false) [ CD ]
Line_28 $$ NodeEntry<T> nodeEntry = entry.getValue()-->Line_36 $$ fetchData.put(node, nodeEntry.getValue())[ FD ]
Line_2 $$ public synchronized FetchResult<T> fetchData(DiscoveryNodes nodes, MetaData metaData, Set<String> ignoreNodes) -->Line_7 $$ fillShardCacheWithDataNodes(cache, nodes)[ CD ]
Line_2 $$ public synchronized FetchResult<T> fetchData(DiscoveryNodes nodes, MetaData metaData, Set<String> ignoreNodes) -->Line_18 $$ asyncFetch(shardId, nodesIds, metaData)[ FD ]
Line_2 $$ public synchronized FetchResult<T> fetchData(DiscoveryNodes nodes, MetaData metaData, Set<String> ignoreNodes) -->Line_20 $$ if (hasAnyNodeFetching(cache) == true) [ CD ]
Line_43 $$ if (failedNodes.isEmpty() == false || allIgnoreNodes.isEmpty() == false) -->Line_44 $$ reroute(shardId, "nodes failed [" + failedNodes.size() + "], ignored [" + allIgnoreNodes.size() + "]")[ CD ]
