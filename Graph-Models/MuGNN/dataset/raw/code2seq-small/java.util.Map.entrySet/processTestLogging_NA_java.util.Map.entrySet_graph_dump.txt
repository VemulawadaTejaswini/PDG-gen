Line_3 $$ Map<String, String> map = getLoggersAndLevelsFromAnnotation(testLogging)-->Line_4 $$ if (map == null) [ FD ]
Line_8 $$ for (Map.Entry<String, String> entry : map.entrySet()) -->Line_10 $$ previousValues.put(entry.getKey(), esLogger.getLevel())[ FD ]
Line_9 $$ ESLogger esLogger = resolveLogger(entry.getKey())-->Line_11 $$ esLogger.setLevel(entry.getValue())[ FD ]
Line_2 $$ private Map<String, String> processTestLogging(TestLogging testLogging) -->Line_3 $$ Map<String, String> map = getLoggersAndLevelsFromAnnotation(testLogging)[ FD ]
Line_3 $$ Map<String, String> map = getLoggersAndLevelsFromAnnotation(testLogging)-->Line_8 $$ for (Map.Entry<String, String> entry : map.entrySet()) [ FD ]
Line_4 $$ if (map == null) -->Line_5 $$ return null[ CD ]
Line_2 $$ private Map<String, String> processTestLogging(TestLogging testLogging) -->Line_3 $$ Map<String, String> map = getLoggersAndLevelsFromAnnotation(testLogging)[ CD ]
Line_8 $$ for (Map.Entry<String, String> entry : map.entrySet()) -->Line_9 $$ ESLogger esLogger = resolveLogger(entry.getKey())[ FD ]
Line_7 $$ Map<String, String> previousValues = new HashMap()-->Line_10 $$ previousValues.put(entry.getKey(), esLogger.getLevel())[ FD ]
Line_8 $$ for (Map.Entry<String, String> entry : map.entrySet()) -->Line_11 $$ esLogger.setLevel(entry.getValue())[ FD ]
Line_9 $$ ESLogger esLogger = resolveLogger(entry.getKey())-->Line_10 $$ previousValues.put(entry.getKey(), esLogger.getLevel())[ FD ]
Line_2 $$ private Map<String, String> processTestLogging(TestLogging testLogging) -->Line_7 $$ Map<String, String> previousValues = new HashMap()[ CD ]
Line_2 $$ private Map<String, String> processTestLogging(TestLogging testLogging) -->Line_13 $$ return previousValues[ CD ]
Line_2 $$ private Map<String, String> processTestLogging(TestLogging testLogging) -->Line_4 $$ if (map == null) [ CD ]
