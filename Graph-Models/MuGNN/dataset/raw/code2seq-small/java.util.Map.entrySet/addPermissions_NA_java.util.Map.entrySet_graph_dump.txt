Line_17 $$ Role role = RoleLocalServiceUtil.fetchRole(roleId)-->Line_24 $$ roleName = PermissionExporter.ROLE_TEAM_PREFIX + role.getDescriptiveName()[ FD ]
Line_2 $$ public void addPermissions(String resourceName, long resourcePK) -->Line_13 $$ List<KeyValuePair> permissions = new ArrayList()[ CD ]
Line_16 $$ Set<String> availableActionIds = entry.getValue()-->Line_29 $$ KeyValuePair permission = new KeyValuePair(roleName, StringUtil.merge(availableActionIds))[ FD ]
Line_17 $$ Role role = RoleLocalServiceUtil.fetchRole(roleId)-->Line_22 $$ if (role.isTeam()) [ FD ]
Line_6 $$ List<String> actionIds = ResourceActionsUtil.getModelResourceActions(resourceName)-->Line_9 $$ roleIdsToActionIds = getActionIds(resourceName, resourcePK, actionIds)[ FD ]
Line_13 $$ List<KeyValuePair> permissions = new ArrayList()-->Line_32 $$ _permissionsMap.put(getPrimaryKeyString(resourceName, resourcePK), permissions)[ FD ]
Line_17 $$ Role role = RoleLocalServiceUtil.fetchRole(roleId)-->Line_21 $$ String roleName = role.getName()[ FD ]
Line_2 $$ public void addPermissions(String resourceName, long resourcePK) -->Line_6 $$ List<String> actionIds = ResourceActionsUtil.getModelResourceActions(resourceName)[ FD ]
Line_9 $$ roleIdsToActionIds = getActionIds(resourceName, resourcePK, actionIds)-->Line_14 $$ for (Map.Entry<Long, Set<String>> entry : roleIdsToActionIds.entrySet()) [ FD ]
Line_14 $$ for (Map.Entry<Long, Set<String>> entry : roleIdsToActionIds.entrySet()) -->Line_15 $$ long roleId = entry.getKey()[ FD ]
Line_15 $$ long roleId = entry.getKey()-->Line_17 $$ Role role = RoleLocalServiceUtil.fetchRole(roleId)[ FD ]
Line_3 $$ if (!MapUtil.getBoolean(_parameterMap, PortletDataHandlerKeys.PERMISSIONS)) -->Line_4 $$ return[ CD ]
Line_2 $$ public void addPermissions(String resourceName, long resourcePK) -->Line_9 $$ roleIdsToActionIds = getActionIds(resourceName, resourcePK, actionIds)[ FD ]
Line_17 $$ Role role = RoleLocalServiceUtil.fetchRole(roleId)-->Line_18 $$ if (role == null) [ FD ]
Line_13 $$ List<KeyValuePair> permissions = new ArrayList()-->Line_30 $$ permissions.add(permission)[ FD ]
Line_2 $$ public void addPermissions(String resourceName, long resourcePK) -->Line_32 $$ _permissionsMap.put(getPrimaryKeyString(resourceName, resourcePK), permissions)[ CD ]
Line_2 $$ public void addPermissions(String resourceName, long resourcePK) -->Line_32 $$ _permissionsMap.put(getPrimaryKeyString(resourceName, resourcePK), permissions)[ FD ]
Line_14 $$ for (Map.Entry<Long, Set<String>> entry : roleIdsToActionIds.entrySet()) -->Line_16 $$ Set<String> availableActionIds = entry.getValue()[ FD ]
Line_2 $$ public void addPermissions(String resourceName, long resourcePK) -->Line_3 $$ if (!MapUtil.getBoolean(_parameterMap, PortletDataHandlerKeys.PERMISSIONS)) [ CD ]
Line_7 $$ Map<Long, Set<String>> roleIdsToActionIds = null-->Line_14 $$ for (Map.Entry<Long, Set<String>> entry : roleIdsToActionIds.entrySet()) [ FD ]
Line_7 $$ Map<Long, Set<String>> roleIdsToActionIds = null-->Line_9 $$ roleIdsToActionIds = getActionIds(resourceName, resourcePK, actionIds)[ FD ]
Line_21 $$ String roleName = role.getName()-->Line_24 $$ roleName = PermissionExporter.ROLE_TEAM_PREFIX + role.getDescriptiveName()[ FD ]
Line_29 $$ KeyValuePair permission = new KeyValuePair(roleName, StringUtil.merge(availableActionIds))-->Line_30 $$ permissions.add(permission)[ FD ]
Line_2 $$ public void addPermissions(String resourceName, long resourcePK) -->Line_7 $$ Map<Long, Set<String>> roleIdsToActionIds = null[ CD ]
Line_2 $$ public void addPermissions(String resourceName, long resourcePK) -->Line_6 $$ List<String> actionIds = ResourceActionsUtil.getModelResourceActions(resourceName)[ CD ]
