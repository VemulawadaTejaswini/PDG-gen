Line_12 $$ for (Map.Entry<String, Object> entry : candidateBeans.entrySet()) -->Line_13 $$ String candidateBeanName = entry.getKey()[ FD ]
Line_2 $$ protected String determineAutowireCandidate(Map<String, Object> candidateBeans, DependencyDescriptor descriptor) -->Line_9 $$ if (priorityCandidate != null) [ CD ]
Line_2 $$ protected String determineAutowireCandidate(Map<String, Object> candidateBeans, DependencyDescriptor descriptor) -->Line_8 $$ String priorityCandidate = determineHighestPriorityCandidate(candidateBeans, requiredType)[ FD ]
Line_3 $$ Class<?> requiredType = descriptor.getDependencyType()-->Line_8 $$ String priorityCandidate = determineHighestPriorityCandidate(candidateBeans, requiredType)[ FD ]
Line_2 $$ protected String determineAutowireCandidate(Map<String, Object> candidateBeans, DependencyDescriptor descriptor) -->Line_8 $$ String priorityCandidate = determineHighestPriorityCandidate(candidateBeans, requiredType)[ CD ]
Line_13 $$ String candidateBeanName = entry.getKey()-->Line_15 $$ if ((beanInstance != null && this.resolvableDependencies.containsValue(beanInstance)) || matchesBeanName(candidateBeanName, descriptor.getDependencyName())) [ FD ]
Line_3 $$ Class<?> requiredType = descriptor.getDependencyType()-->Line_4 $$ String primaryCandidate = determinePrimaryCandidate(candidateBeans, requiredType)[ FD ]
Line_2 $$ protected String determineAutowireCandidate(Map<String, Object> candidateBeans, DependencyDescriptor descriptor) -->Line_4 $$ String primaryCandidate = determinePrimaryCandidate(candidateBeans, requiredType)[ CD ]
Line_12 $$ for (Map.Entry<String, Object> entry : candidateBeans.entrySet()) -->Line_14 $$ Object beanInstance = entry.getValue()[ FD ]
Line_5 $$ if (primaryCandidate != null) -->Line_6 $$ return primaryCandidate[ CD ]
Line_2 $$ protected String determineAutowireCandidate(Map<String, Object> candidateBeans, DependencyDescriptor descriptor) -->Line_19 $$ return null[ CD ]
Line_2 $$ protected String determineAutowireCandidate(Map<String, Object> candidateBeans, DependencyDescriptor descriptor) -->Line_12 $$ for (Map.Entry<String, Object> entry : candidateBeans.entrySet()) [ FD ]
Line_2 $$ protected String determineAutowireCandidate(Map<String, Object> candidateBeans, DependencyDescriptor descriptor) -->Line_4 $$ String primaryCandidate = determinePrimaryCandidate(candidateBeans, requiredType)[ FD ]
Line_8 $$ String priorityCandidate = determineHighestPriorityCandidate(candidateBeans, requiredType)-->Line_9 $$ if (priorityCandidate != null) [ FD ]
Line_15 $$ if ((beanInstance != null && this.resolvableDependencies.containsValue(beanInstance)) || matchesBeanName(candidateBeanName, descriptor.getDependencyName())) -->Line_16 $$ return candidateBeanName[ CD ]
Line_2 $$ protected String determineAutowireCandidate(Map<String, Object> candidateBeans, DependencyDescriptor descriptor) -->Line_3 $$ Class<?> requiredType = descriptor.getDependencyType()[ FD ]
Line_9 $$ if (priorityCandidate != null) -->Line_10 $$ return priorityCandidate[ CD ]
Line_14 $$ Object beanInstance = entry.getValue()-->Line_15 $$ if ((beanInstance != null && this.resolvableDependencies.containsValue(beanInstance)) || matchesBeanName(candidateBeanName, descriptor.getDependencyName())) [ FD ]
Line_2 $$ protected String determineAutowireCandidate(Map<String, Object> candidateBeans, DependencyDescriptor descriptor) -->Line_5 $$ if (primaryCandidate != null) [ CD ]
Line_2 $$ protected String determineAutowireCandidate(Map<String, Object> candidateBeans, DependencyDescriptor descriptor) -->Line_15 $$ if ((beanInstance != null && this.resolvableDependencies.containsValue(beanInstance)) || matchesBeanName(candidateBeanName, descriptor.getDependencyName())) [ FD ]
Line_2 $$ protected String determineAutowireCandidate(Map<String, Object> candidateBeans, DependencyDescriptor descriptor) -->Line_3 $$ Class<?> requiredType = descriptor.getDependencyType()[ CD ]
Line_4 $$ String primaryCandidate = determinePrimaryCandidate(candidateBeans, requiredType)-->Line_5 $$ if (primaryCandidate != null) [ FD ]
