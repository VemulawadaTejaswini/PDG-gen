Line_11 $$ Query query = simpleQuery(selectAll(columns.entrySet().stream().map( entry -> aliasedName(entry.getKey(), entry.getValue())).collect(toImmutableList())), aliased(new Values(rows.build()), "functions", ImmutableList.copyOf(columns.keySet())), ordering(ascending("function_name"), ascending("return_type"), ascending("argument_types"), ascending("function_type")))-->Line_12 $$ return process(query, context)[ FD ]
Line_3 $$ ImmutableList.Builder<Expression> rows = ImmutableList.builder()-->Line_11 $$ Query query = simpleQuery(selectAll(columns.entrySet().stream().map( entry -> aliasedName(entry.getKey(), entry.getValue())).collect(toImmutableList())), aliased(new Values(rows.build()), "functions", ImmutableList.copyOf(columns.keySet())), ordering(ascending("function_name"), ascending("return_type"), ascending("argument_types"), ascending("function_type")))[ FD ]
Line_2 $$ protected RelationType visitShowFunctions(ShowFunctions node, AnalysisContext context) -->Line_3 $$ ImmutableList.Builder<Expression> rows = ImmutableList.builder()[ CD ]
Line_2 $$ protected RelationType visitShowFunctions(ShowFunctions node, AnalysisContext context) -->Line_12 $$ return process(query, context)[ FD ]
Line_10 $$ Map<String, String> columns = ImmutableMap.<String, String>builder().put("function_name", "Function").put("return_type", "Return Type").put("argument_types", "Argument Types").put("function_type", "Function Type").put("deterministic", "Deterministic").put("description", "Description").build()-->Line_11 $$ Query query = simpleQuery(selectAll(columns.entrySet().stream().map( entry -> aliasedName(entry.getKey(), entry.getValue())).collect(toImmutableList())), aliased(new Values(rows.build()), "functions", ImmutableList.copyOf(columns.keySet())), ordering(ascending("function_name"), ascending("return_type"), ascending("argument_types"), ascending("function_type")))[ FD ]
Line_4 $$ for (SqlFunction function : metadata.listFunctions()) -->Line_8 $$ rows.add(row(new StringLiteral(function.getSignature().getName()), new StringLiteral(function.getSignature().getReturnType().toString()), new StringLiteral(Joiner.on(", ").join(function.getSignature().getArgumentTypes())), new StringLiteral(getFunctionType(function)), function.isDeterministic() ? TRUE_LITERAL : FALSE_LITERAL, new StringLiteral(nullToEmpty(function.getDescription()))))[ FD ]
Line_4 $$ for (SqlFunction function : metadata.listFunctions()) -->Line_5 $$ if (function.getSignature().getKind() == APPROXIMATE_AGGREGATE) [ FD ]
Line_2 $$ protected RelationType visitShowFunctions(ShowFunctions node, AnalysisContext context) -->Line_10 $$ Map<String, String> columns = ImmutableMap.<String, String>builder().put("function_name", "Function").put("return_type", "Return Type").put("argument_types", "Argument Types").put("function_type", "Function Type").put("deterministic", "Deterministic").put("description", "Description").build()[ CD ]
Line_2 $$ protected RelationType visitShowFunctions(ShowFunctions node, AnalysisContext context) -->Line_11 $$ Query query = simpleQuery(selectAll(columns.entrySet().stream().map( entry -> aliasedName(entry.getKey(), entry.getValue())).collect(toImmutableList())), aliased(new Values(rows.build()), "functions", ImmutableList.copyOf(columns.keySet())), ordering(ascending("function_name"), ascending("return_type"), ascending("argument_types"), ascending("function_type")))[ CD ]
Line_3 $$ ImmutableList.Builder<Expression> rows = ImmutableList.builder()-->Line_8 $$ rows.add(row(new StringLiteral(function.getSignature().getName()), new StringLiteral(function.getSignature().getReturnType().toString()), new StringLiteral(Joiner.on(", ").join(function.getSignature().getArgumentTypes())), new StringLiteral(getFunctionType(function)), function.isDeterministic() ? TRUE_LITERAL : FALSE_LITERAL, new StringLiteral(nullToEmpty(function.getDescription()))))[ FD ]
Line_2 $$ protected RelationType visitShowFunctions(ShowFunctions node, AnalysisContext context) -->Line_12 $$ return process(query, context)[ CD ]
