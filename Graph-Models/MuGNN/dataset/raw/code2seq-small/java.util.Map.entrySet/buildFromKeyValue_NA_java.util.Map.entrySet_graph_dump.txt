Line_4 $$ for (Map.Entry<String, String> entry : filters.entrySet()) -->Line_5 $$ String[] values = Strings.splitStringByCommaToArray(entry.getValue())[ FD ]
Line_5 $$ String[] values = Strings.splitStringByCommaToArray(entry.getValue())-->Line_7 $$ bFilters.put(entry.getKey(), values)[ FD ]
Line_10 $$ if (bFilters.isEmpty()) -->Line_11 $$ return null[ CD ]
Line_6 $$ if (values.length > 0) -->Line_7 $$ bFilters.put(entry.getKey(), values)[ CD ]
Line_4 $$ for (Map.Entry<String, String> entry : filters.entrySet()) -->Line_7 $$ bFilters.put(entry.getKey(), values)[ FD ]
Line_2 $$ public static DiscoveryNodeFilters buildFromKeyValue(OpType opType, Map<String, String> filters) -->Line_3 $$ Map<String, String[]> bFilters = new HashMap()[ CD ]
Line_2 $$ public static DiscoveryNodeFilters buildFromKeyValue(OpType opType, Map<String, String> filters) -->Line_4 $$ for (Map.Entry<String, String> entry : filters.entrySet()) [ FD ]
Line_2 $$ public static DiscoveryNodeFilters buildFromKeyValue(OpType opType, Map<String, String> filters) -->Line_10 $$ if (bFilters.isEmpty()) [ CD ]
Line_2 $$ public static DiscoveryNodeFilters buildFromKeyValue(OpType opType, Map<String, String> filters) -->Line_13 $$ return new DiscoveryNodeFilters(opType, bFilters)[ CD ]
Line_3 $$ Map<String, String[]> bFilters = new HashMap()-->Line_7 $$ bFilters.put(entry.getKey(), values)[ FD ]
Line_3 $$ Map<String, String[]> bFilters = new HashMap()-->Line_10 $$ if (bFilters.isEmpty()) [ FD ]
