Line_2 $$ public List<WikiPage> getOutgoingLinks(long nodeId, String title) throws PortalException -->Line_17 $$ newPage.setNodeId(nodeId)[ FD ]
Line_9 $$ if (exists) -->Line_15 $$ WikiPageImpl newPage = new WikiPageImpl()[ CD ]
Line_2 $$ public List<WikiPage> getOutgoingLinks(long nodeId, String title) throws PortalException -->Line_24 $$ return ListUtil.fromMapValues(pages)[ CD ]
Line_4 $$ Map<String, WikiPage> pages = new LinkedHashMap()-->Line_20 $$ pages.put(curTitle, newPage)[ FD ]
Line_9 $$ if (exists) -->Line_18 $$ newPage.setTitle(curTitle)[ CD ]
Line_15 $$ WikiPageImpl newPage = new WikiPageImpl()-->Line_20 $$ pages.put(curTitle, newPage)[ FD ]
Line_5 $$ Map<String, Boolean> links = WikiCacheUtil.getOutgoingLinks(page)-->Line_6 $$ for (Map.Entry<String, Boolean> entry : links.entrySet()) [ FD ]
Line_4 $$ Map<String, WikiPage> pages = new LinkedHashMap()-->Line_24 $$ return ListUtil.fromMapValues(pages)[ FD ]
Line_10 $$ WikiPage curPage = getPage(nodeId, curTitle)-->Line_12 $$ pages.put(curPage.getTitle(), curPage)[ FD ]
Line_7 $$ String curTitle = entry.getKey()-->Line_19 $$ if (!pages.containsKey(curTitle)) [ FD ]
Line_6 $$ for (Map.Entry<String, Boolean> entry : links.entrySet()) -->Line_8 $$ Boolean exists = entry.getValue()[ FD ]
Line_15 $$ WikiPageImpl newPage = new WikiPageImpl()-->Line_18 $$ newPage.setTitle(curTitle)[ FD ]
Line_4 $$ Map<String, WikiPage> pages = new LinkedHashMap()-->Line_11 $$ if (!pages.containsKey(curPage.getTitle())) [ FD ]
Line_11 $$ if (!pages.containsKey(curPage.getTitle())) -->Line_12 $$ pages.put(curPage.getTitle(), curPage)[ CD ]
Line_2 $$ public List<WikiPage> getOutgoingLinks(long nodeId, String title) throws PortalException -->Line_3 $$ WikiPage page = getPage(nodeId, title)[ CD ]
Line_6 $$ for (Map.Entry<String, Boolean> entry : links.entrySet()) -->Line_7 $$ String curTitle = entry.getKey()[ FD ]
Line_9 $$ if (exists) -->Line_19 $$ if (!pages.containsKey(curTitle)) [ CD ]
Line_2 $$ public List<WikiPage> getOutgoingLinks(long nodeId, String title) throws PortalException -->Line_5 $$ Map<String, Boolean> links = WikiCacheUtil.getOutgoingLinks(page)[ CD ]
Line_2 $$ public List<WikiPage> getOutgoingLinks(long nodeId, String title) throws PortalException -->Line_10 $$ WikiPage curPage = getPage(nodeId, curTitle)[ FD ]
Line_2 $$ public List<WikiPage> getOutgoingLinks(long nodeId, String title) throws PortalException -->Line_4 $$ Map<String, WikiPage> pages = new LinkedHashMap()[ CD ]
Line_19 $$ if (!pages.containsKey(curTitle)) -->Line_20 $$ pages.put(curTitle, newPage)[ CD ]
Line_7 $$ String curTitle = entry.getKey()-->Line_20 $$ pages.put(curTitle, newPage)[ FD ]
Line_7 $$ String curTitle = entry.getKey()-->Line_18 $$ newPage.setTitle(curTitle)[ FD ]
Line_10 $$ WikiPage curPage = getPage(nodeId, curTitle)-->Line_11 $$ if (!pages.containsKey(curPage.getTitle())) [ FD ]
Line_3 $$ WikiPage page = getPage(nodeId, title)-->Line_5 $$ Map<String, Boolean> links = WikiCacheUtil.getOutgoingLinks(page)[ FD ]
Line_2 $$ public List<WikiPage> getOutgoingLinks(long nodeId, String title) throws PortalException -->Line_3 $$ WikiPage page = getPage(nodeId, title)[ FD ]
Line_9 $$ if (exists) -->Line_11 $$ if (!pages.containsKey(curPage.getTitle())) [ CD ]
Line_9 $$ if (exists) -->Line_17 $$ newPage.setNodeId(nodeId)[ CD ]
Line_9 $$ if (exists) -->Line_10 $$ WikiPage curPage = getPage(nodeId, curTitle)[ CD ]
Line_7 $$ String curTitle = entry.getKey()-->Line_10 $$ WikiPage curPage = getPage(nodeId, curTitle)[ FD ]
Line_4 $$ Map<String, WikiPage> pages = new LinkedHashMap()-->Line_12 $$ pages.put(curPage.getTitle(), curPage)[ FD ]
Line_4 $$ Map<String, WikiPage> pages = new LinkedHashMap()-->Line_19 $$ if (!pages.containsKey(curTitle)) [ FD ]
Line_9 $$ if (exists) -->Line_16 $$ newPage.setNew(true)[ CD ]
Line_15 $$ WikiPageImpl newPage = new WikiPageImpl()-->Line_17 $$ newPage.setNodeId(nodeId)[ FD ]
Line_15 $$ WikiPageImpl newPage = new WikiPageImpl()-->Line_16 $$ newPage.setNew(true)[ FD ]
