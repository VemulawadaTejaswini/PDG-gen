Line_2 $$ public static boolean assertShardStats(RoutingNodes routingNodes) -->Line_5 $$ if (!run) [ CD ]
Line_15 $$ for (ShardRouting shard : node) -->Line_16 $$ if (!shard.active() && shard.relocatingNodeId() == null) [ FD ]
Line_15 $$ for (ShardRouting shard : node) -->Line_24 $$ if (shard.relocating()) [ FD ]
Line_37 $$ String index = e.getKey()-->Line_41 $$ if (shardRouting.index().equals(index) && shardRouting.id() == i) [ FD ]
Line_35 $$ final List<ShardRouting> shards = new ArrayList()-->Line_42 $$ shards.add(shardRouting)[ FD ]
Line_15 $$ for (ShardRouting shard : node) -->Line_31 $$ indicesAndShards.put(shard.index(), Math.max(i, shard.id()))[ FD ]
Line_2 $$ public static boolean assertShardStats(RoutingNodes routingNodes) -->Line_46 $$ List<ShardRouting> mutableShardRoutings = routingNodes.assignedShards(new ShardId(index, i))[ FD ]
Line_36 $$ for (Map.Entry<String, Integer> e : entries) -->Line_37 $$ String index = e.getKey()[ FD ]
Line_2 $$ public static boolean assertShardStats(RoutingNodes routingNodes) -->Line_60 $$ for (ShardRouting shard : routingNodes.unassigned().ignored()) [ FD ]
Line_15 $$ for (ShardRouting shard : node) -->Line_61 $$ if (shard.primary()) [ FD ]
Line_8 $$ int unassignedPrimaryCount = 0-->Line_57 $$ unassignedPrimaryCount++[ FD ]
Line_5 $$ if (!run) -->Line_6 $$ return true[ CD ]
Line_2 $$ public static boolean assertShardStats(RoutingNodes routingNodes) -->Line_34 $$ Set<Map.Entry<String, Integer>> entries = indicesAndShards.entrySet()[ CD ]
Line_11 $$ int inactiveShardCount = 0-->Line_18 $$ inactiveShardCount++[ FD ]
Line_35 $$ final List<ShardRouting> shards = new ArrayList()-->Line_50 $$ shards.remove(r)[ FD ]
Line_48 $$ for (ShardRouting r : mutableShardRoutings) -->Line_49 $$ assert shards.contains(r)[ FD ]
Line_15 $$ for (ShardRouting shard : node) -->Line_17 $$ if (!shard.relocating()) [ FD ]
Line_15 $$ for (ShardRouting shard : node) -->Line_56 $$ if (shard.primary()) [ FD ]
Line_2 $$ public static boolean assertShardStats(RoutingNodes routingNodes) -->Line_13 $$ Map<String, Integer> indicesAndShards = new HashMap()[ CD ]
Line_13 $$ Map<String, Integer> indicesAndShards = new HashMap()-->Line_31 $$ indicesAndShards.put(shard.index(), Math.max(i, shard.id()))[ FD ]
Line_9 $$ int unassignedIgnoredPrimaryCount = 0-->Line_62 $$ unassignedIgnoredPrimaryCount++[ FD ]
Line_24 $$ if (shard.relocating()) -->Line_25 $$ relocating++[ CD ]
Line_40 $$ for (ShardRouting shardRouting : routingNode) -->Line_41 $$ if (shardRouting.index().equals(index) && shardRouting.id() == i) [ FD ]
Line_27 $$ Integer i = indicesAndShards.get(shard.index())-->Line_38 $$ for (int i = 0; i < e.getValue(); i++) [ FD ]
Line_2 $$ public static boolean assertShardStats(RoutingNodes routingNodes) -->Line_12 $$ int relocating = 0[ CD ]
Line_29 $$ i = shard.id()-->Line_31 $$ indicesAndShards.put(shard.index(), Math.max(i, shard.id()))[ FD ]
Line_36 $$ for (Map.Entry<String, Integer> e : entries) -->Line_38 $$ for (int i = 0; i < e.getValue(); i++) [ FD ]
Line_15 $$ for (ShardRouting shard : node) -->Line_19 $$ if (shard.primary()) [ FD ]
Line_46 $$ List<ShardRouting> mutableShardRoutings = routingNodes.assignedShards(new ShardId(index, i))-->Line_47 $$ assert mutableShardRoutings.size() == shards.size()[ FD ]
Line_35 $$ final List<ShardRouting> shards = new ArrayList()-->Line_52 $$ assert shards.isEmpty()[ FD ]
Line_27 $$ Integer i = indicesAndShards.get(shard.index())-->Line_31 $$ indicesAndShards.put(shard.index(), Math.max(i, shard.id()))[ FD ]
Line_48 $$ for (ShardRouting r : mutableShardRoutings) -->Line_50 $$ shards.remove(r)[ FD ]
Line_16 $$ if (!shard.active() && shard.relocatingNodeId() == null) -->Line_17 $$ if (!shard.relocating()) [ CD ]
Line_13 $$ Map<String, Integer> indicesAndShards = new HashMap()-->Line_34 $$ Set<Map.Entry<String, Integer>> entries = indicesAndShards.entrySet()[ FD ]
Line_2 $$ public static boolean assertShardStats(RoutingNodes routingNodes) -->Line_66 $$ assert unassignedIgnoredPrimaryCount == routingNodes.unassignedShards.getNumIgnoredPrimaries() : "Unassigned ignored primaries is [" + unassignedIgnoredPrimaryCount + "] but RoutingNodes returned unassigned ignored primaries [" + routingNodes.unassigned().getNumIgnoredPrimaries() + "]"[ FD ]
Line_3 $$ boolean run = false-->Line_4 $$ assert (run = true)[ FD ]
Line_2 $$ public static boolean assertShardStats(RoutingNodes routingNodes) -->Line_8 $$ int unassignedPrimaryCount = 0[ CD ]
Line_15 $$ for (ShardRouting shard : node) -->Line_29 $$ i = shard.id()[ FD ]
Line_29 $$ i = shard.id()-->Line_38 $$ for (int i = 0; i < e.getValue(); i++) [ FD ]
Line_19 $$ if (shard.primary()) -->Line_20 $$ inactivePrimaryCount++[ CD ]
Line_2 $$ public static boolean assertShardStats(RoutingNodes routingNodes) -->Line_3 $$ boolean run = false[ CD ]
Line_12 $$ int relocating = 0-->Line_25 $$ relocating++[ FD ]
Line_40 $$ for (ShardRouting shardRouting : routingNode) -->Line_42 $$ shards.add(shardRouting)[ FD ]
Line_2 $$ public static boolean assertShardStats(RoutingNodes routingNodes) -->Line_55 $$ for (ShardRouting shard : routingNodes.unassigned()) [ FD ]
Line_2 $$ public static boolean assertShardStats(RoutingNodes routingNodes) -->Line_65 $$ assert unassignedPrimaryCount == routingNodes.unassignedShards.getNumPrimaries() : "Unassigned primaries is [" + unassignedPrimaryCount + "] but RoutingNodes returned unassigned primaries [" + routingNodes.unassigned().getNumPrimaries() + "]"[ FD ]
Line_35 $$ final List<ShardRouting> shards = new ArrayList()-->Line_47 $$ assert mutableShardRoutings.size() == shards.size()[ FD ]
Line_2 $$ public static boolean assertShardStats(RoutingNodes routingNodes) -->Line_11 $$ int inactiveShardCount = 0[ CD ]
Line_10 $$ int inactivePrimaryCount = 0-->Line_20 $$ inactivePrimaryCount++[ FD ]
Line_27 $$ Integer i = indicesAndShards.get(shard.index())-->Line_29 $$ i = shard.id()[ FD ]
Line_27 $$ Integer i = indicesAndShards.get(shard.index())-->Line_28 $$ if (i == null) [ FD ]
Line_2 $$ public static boolean assertShardStats(RoutingNodes routingNodes) -->Line_35 $$ final List<ShardRouting> shards = new ArrayList()[ CD ]
Line_61 $$ if (shard.primary()) -->Line_62 $$ unassignedIgnoredPrimaryCount++[ CD ]
Line_4 $$ assert (run = true)-->Line_5 $$ if (!run) [ FD ]
Line_2 $$ public static boolean assertShardStats(RoutingNodes routingNodes) -->Line_70 $$ return true[ CD ]
Line_2 $$ public static boolean assertShardStats(RoutingNodes routingNodes) -->Line_10 $$ int inactivePrimaryCount = 0[ CD ]
Line_17 $$ if (!shard.relocating()) -->Line_18 $$ inactiveShardCount++[ CD ]
Line_56 $$ if (shard.primary()) -->Line_57 $$ unassignedPrimaryCount++[ CD ]
Line_15 $$ for (ShardRouting shard : node) -->Line_27 $$ Integer i = indicesAndShards.get(shard.index())[ FD ]
Line_38 $$ for (int i = 0; i < e.getValue(); i++) -->Line_46 $$ List<ShardRouting> mutableShardRoutings = routingNodes.assignedShards(new ShardId(index, i))[ CD ]
Line_35 $$ final List<ShardRouting> shards = new ArrayList()-->Line_49 $$ assert shards.contains(r)[ FD ]
Line_13 $$ Map<String, Integer> indicesAndShards = new HashMap()-->Line_27 $$ Integer i = indicesAndShards.get(shard.index())[ FD ]
Line_41 $$ if (shardRouting.index().equals(index) && shardRouting.id() == i) -->Line_42 $$ shards.add(shardRouting)[ CD ]
Line_2 $$ public static boolean assertShardStats(RoutingNodes routingNodes) -->Line_69 $$ assert routingNodes.getRelocatingShardCount() == relocating : "Relocating shards mismatch [" + routingNodes.getRelocatingShardCount() + "] but expected [" + relocating + "]"[ FD ]
Line_17 $$ if (!shard.relocating()) -->Line_19 $$ if (shard.primary()) [ CD ]
Line_2 $$ public static boolean assertShardStats(RoutingNodes routingNodes) -->Line_9 $$ int unassignedIgnoredPrimaryCount = 0[ CD ]
Line_28 $$ if (i == null) -->Line_29 $$ i = shard.id()[ CD ]
Line_3 $$ boolean run = false-->Line_5 $$ if (!run) [ FD ]
