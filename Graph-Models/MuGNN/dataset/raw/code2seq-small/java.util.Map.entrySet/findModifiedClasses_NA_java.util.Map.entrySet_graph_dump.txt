Line_5 $$ for (DebuggerSession session : sessions) -->Line_18 $$ Map<String, HotSwapFile> container = result.get(session)[ FD ]
Line_2 $$ public static Map<DebuggerSession, Map<String, HotSwapFile>> findModifiedClasses(List<DebuggerSession> sessions, Map<String, List<String>> generatedPaths) -->Line_29 $$ return result[ CD ]
Line_17 $$ if (fileStamp > pair.second) -->Line_19 $$ if (container == null) [ CD ]
Line_19 $$ if (container == null) -->Line_20 $$ container = new java.util.HashMap<String, HotSwapFile>()[ CD ]
Line_18 $$ Map<String, HotSwapFile> container = result.get(session)-->Line_20 $$ container = new java.util.HashMap<String, HotSwapFile>()[ FD ]
Line_3 $$ final Map<DebuggerSession, Map<String, HotSwapFile>> result = new java.util.HashMap<DebuggerSession, Map<String, HotSwapFile>>()-->Line_21 $$ result.put(session, container)[ FD ]
Line_8 $$ for (Map.Entry<String, List<String>> entry : generatedPaths.entrySet()) -->Line_10 $$ for (String relativePath : entry.getValue()) [ FD ]
Line_11 $$ if (SystemInfo.isFileSystemCaseSensitive ? StringUtil.endsWith(relativePath, CLASS_EXTENSION) : StringUtil.endsWithIgnoreCase(relativePath, CLASS_EXTENSION)) -->Line_14 $$ final long fileStamp = hotswapFile.file.lastModified()[ CD ]
Line_18 $$ Map<String, HotSwapFile> container = result.get(session)-->Line_21 $$ result.put(session, container)[ FD ]
Line_20 $$ container = new java.util.HashMap<String, HotSwapFile>()-->Line_23 $$ container.put(qualifiedName, hotswapFile)[ FD ]
Line_2 $$ public static Map<DebuggerSession, Map<String, HotSwapFile>> findModifiedClasses(List<DebuggerSession> sessions, Map<String, List<String>> generatedPaths) -->Line_4 $$ List<Pair<DebuggerSession, Long>> sessionWithStamps = new ArrayList<Pair<DebuggerSession, Long>>()[ CD ]
Line_13 $$ final HotSwapFile hotswapFile = new HotSwapFile(new File(root, relativePath))-->Line_23 $$ container.put(qualifiedName, hotswapFile)[ FD ]
Line_8 $$ for (Map.Entry<String, List<String>> entry : generatedPaths.entrySet()) -->Line_9 $$ final File root = new File(entry.getKey())[ FD ]
Line_3 $$ final Map<DebuggerSession, Map<String, HotSwapFile>> result = new java.util.HashMap<DebuggerSession, Map<String, HotSwapFile>>()-->Line_18 $$ Map<String, HotSwapFile> container = result.get(session)[ FD ]
Line_19 $$ if (container == null) -->Line_21 $$ result.put(session, container)[ CD ]
Line_2 $$ public static Map<DebuggerSession, Map<String, HotSwapFile>> findModifiedClasses(List<DebuggerSession> sessions, Map<String, List<String>> generatedPaths) -->Line_3 $$ final Map<DebuggerSession, Map<String, HotSwapFile>> result = new java.util.HashMap<DebuggerSession, Map<String, HotSwapFile>>()[ CD ]
Line_14 $$ final long fileStamp = hotswapFile.file.lastModified()-->Line_17 $$ if (fileStamp > pair.second) [ FD ]
Line_11 $$ if (SystemInfo.isFileSystemCaseSensitive ? StringUtil.endsWith(relativePath, CLASS_EXTENSION) : StringUtil.endsWithIgnoreCase(relativePath, CLASS_EXTENSION)) -->Line_13 $$ final HotSwapFile hotswapFile = new HotSwapFile(new File(root, relativePath))[ CD ]
Line_18 $$ Map<String, HotSwapFile> container = result.get(session)-->Line_19 $$ if (container == null) [ FD ]
Line_18 $$ Map<String, HotSwapFile> container = result.get(session)-->Line_23 $$ container.put(qualifiedName, hotswapFile)[ FD ]
Line_10 $$ for (String relativePath : entry.getValue()) -->Line_12 $$ final String qualifiedName = relativePath.substring(0, relativePath.length() - CLASS_EXTENSION.length()).replace('/', '.')[ FD ]
Line_4 $$ List<Pair<DebuggerSession, Long>> sessionWithStamps = new ArrayList<Pair<DebuggerSession, Long>>()-->Line_6 $$ sessionWithStamps.add(new Pair<DebuggerSession, Long>(session, getInstance(session.getProject()).getTimeStamp(session)))[ FD ]
Line_17 $$ if (fileStamp > pair.second) -->Line_23 $$ container.put(qualifiedName, hotswapFile)[ CD ]
Line_5 $$ for (DebuggerSession session : sessions) -->Line_21 $$ result.put(session, container)[ FD ]
Line_2 $$ public static Map<DebuggerSession, Map<String, HotSwapFile>> findModifiedClasses(List<DebuggerSession> sessions, Map<String, List<String>> generatedPaths) -->Line_8 $$ for (Map.Entry<String, List<String>> entry : generatedPaths.entrySet()) [ FD ]
Line_12 $$ final String qualifiedName = relativePath.substring(0, relativePath.length() - CLASS_EXTENSION.length()).replace('/', '.')-->Line_23 $$ container.put(qualifiedName, hotswapFile)[ FD ]
Line_11 $$ if (SystemInfo.isFileSystemCaseSensitive ? StringUtil.endsWith(relativePath, CLASS_EXTENSION) : StringUtil.endsWithIgnoreCase(relativePath, CLASS_EXTENSION)) -->Line_12 $$ final String qualifiedName = relativePath.substring(0, relativePath.length() - CLASS_EXTENSION.length()).replace('/', '.')[ CD ]
Line_5 $$ for (DebuggerSession session : sessions) -->Line_6 $$ sessionWithStamps.add(new Pair<DebuggerSession, Long>(session, getInstance(session.getProject()).getTimeStamp(session)))[ FD ]
Line_17 $$ if (fileStamp > pair.second) -->Line_18 $$ Map<String, HotSwapFile> container = result.get(session)[ CD ]
Line_10 $$ for (String relativePath : entry.getValue()) -->Line_11 $$ if (SystemInfo.isFileSystemCaseSensitive ? StringUtil.endsWith(relativePath, CLASS_EXTENSION) : StringUtil.endsWithIgnoreCase(relativePath, CLASS_EXTENSION)) [ FD ]
Line_20 $$ container = new java.util.HashMap<String, HotSwapFile>()-->Line_21 $$ result.put(session, container)[ FD ]
