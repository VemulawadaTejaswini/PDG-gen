Line_2 $$ private static Response getQueryResults(Query query, Optional<Long> token, UriInfo uriInfo, Duration wait) throws InterruptedException -->Line_10 $$ query.getSetSessionProperties().entrySet().stream().forEach( entry -> response.header(PRESTO_SET_SESSION, entry.getKey() + '=' + entry.getValue()))[ CD ]
Line_3 $$ QueryResults queryResults-->Line_7 $$ queryResults = query.getNextResults(uriInfo, wait)[ FD ]
Line_9 $$ ResponseBuilder response = Response.ok(queryResults)-->Line_12 $$ return response.build()[ FD ]
Line_2 $$ private static Response getQueryResults(Query query, Optional<Long> token, UriInfo uriInfo, Duration wait) throws InterruptedException -->Line_11 $$ query.getResetSessionProperties().stream().forEach( name -> response.header(PRESTO_CLEAR_SESSION, name))[ CD ]
Line_3 $$ QueryResults queryResults-->Line_5 $$ queryResults = query.getResults(token.get(), uriInfo, wait)[ FD ]
Line_2 $$ private static Response getQueryResults(Query query, Optional<Long> token, UriInfo uriInfo, Duration wait) throws InterruptedException -->Line_9 $$ ResponseBuilder response = Response.ok(queryResults)[ CD ]
Line_4 $$ if (token.isPresent()) -->Line_5 $$ queryResults = query.getResults(token.get(), uriInfo, wait)[ CD ]
Line_2 $$ private static Response getQueryResults(Query query, Optional<Long> token, UriInfo uriInfo, Duration wait) throws InterruptedException -->Line_4 $$ if (token.isPresent()) [ FD ]
Line_5 $$ queryResults = query.getResults(token.get(), uriInfo, wait)-->Line_7 $$ queryResults = query.getNextResults(uriInfo, wait)[ FD ]
Line_3 $$ QueryResults queryResults-->Line_9 $$ ResponseBuilder response = Response.ok(queryResults)[ FD ]
Line_4 $$ if (token.isPresent()) -->Line_7 $$ queryResults = query.getNextResults(uriInfo, wait)[ CD ]
Line_2 $$ private static Response getQueryResults(Query query, Optional<Long> token, UriInfo uriInfo, Duration wait) throws InterruptedException -->Line_5 $$ queryResults = query.getResults(token.get(), uriInfo, wait)[ FD ]
Line_7 $$ queryResults = query.getNextResults(uriInfo, wait)-->Line_9 $$ ResponseBuilder response = Response.ok(queryResults)[ FD ]
Line_5 $$ queryResults = query.getResults(token.get(), uriInfo, wait)-->Line_9 $$ ResponseBuilder response = Response.ok(queryResults)[ FD ]
Line_2 $$ private static Response getQueryResults(Query query, Optional<Long> token, UriInfo uriInfo, Duration wait) throws InterruptedException -->Line_12 $$ return response.build()[ CD ]
Line_2 $$ private static Response getQueryResults(Query query, Optional<Long> token, UriInfo uriInfo, Duration wait) throws InterruptedException -->Line_3 $$ QueryResults queryResults[ CD ]
Line_9 $$ ResponseBuilder response = Response.ok(queryResults)-->Line_10 $$ response.header(PRESTO_SET_SESSION, entry.getKey() + '=' + entry.getValue())[ FD ]
Line_2 $$ private static Response getQueryResults(Query query, Optional<Long> token, UriInfo uriInfo, Duration wait) throws InterruptedException -->Line_7 $$ queryResults = query.getNextResults(uriInfo, wait)[ FD ]
Line_2 $$ private static Response getQueryResults(Query query, Optional<Long> token, UriInfo uriInfo, Duration wait) throws InterruptedException -->Line_11 $$ query.getResetSessionProperties().stream().forEach( name -> response.header(PRESTO_CLEAR_SESSION, name))[ FD ]
Line_9 $$ ResponseBuilder response = Response.ok(queryResults)-->Line_11 $$ response.header(PRESTO_CLEAR_SESSION, name)[ FD ]
Line_2 $$ private static Response getQueryResults(Query query, Optional<Long> token, UriInfo uriInfo, Duration wait) throws InterruptedException -->Line_10 $$ query.getSetSessionProperties().entrySet().stream().forEach( entry -> response.header(PRESTO_SET_SESSION, entry.getKey() + '=' + entry.getValue()))[ FD ]
Line_2 $$ private static Response getQueryResults(Query query, Optional<Long> token, UriInfo uriInfo, Duration wait) throws InterruptedException -->Line_4 $$ if (token.isPresent()) [ CD ]
