Line_7 $$ for (Map.Entry<String, QB> alternateVersion : getAlternateVersions().entrySet()) -->Line_8 $$ String queryAsString = alternateVersion.getKey()[ FD ]
Line_7 $$ for (Map.Entry<String, QB> alternateVersion : getAlternateVersions().entrySet()) -->Line_9 $$ assertParsedQuery(new BytesArray(queryAsString), alternateVersion.getValue(), ParseFieldMatcher.EMPTY)[ FD ]
Line_4 $$ QB testQuery = createTestQueryBuilder()-->Line_6 $$ assertParsedQuery(builder.bytes(), testQuery)[ FD ]
Line_3 $$ for (int runs = 0; runs < NUMBER_OF_TESTQUERIES; runs++) -->Line_4 $$ QB testQuery = createTestQueryBuilder()[ CD ]
Line_4 $$ QB testQuery = createTestQueryBuilder()-->Line_5 $$ XContentBuilder builder = toXContent(testQuery, randomFrom(XContentType.values()))[ FD ]
Line_2 $$ public void testFromXContent() throws IOException -->Line_3 $$ for (int runs = 0; runs < NUMBER_OF_TESTQUERIES; runs++) [ CD ]
Line_3 $$ for (int runs = 0; runs < NUMBER_OF_TESTQUERIES; runs++) -->Line_5 $$ XContentBuilder builder = toXContent(testQuery, randomFrom(XContentType.values()))[ CD ]
Line_5 $$ XContentBuilder builder = toXContent(testQuery, randomFrom(XContentType.values()))-->Line_6 $$ assertParsedQuery(builder.bytes(), testQuery)[ FD ]
Line_3 $$ for (int runs = 0; runs < NUMBER_OF_TESTQUERIES; runs++) -->Line_6 $$ assertParsedQuery(builder.bytes(), testQuery)[ CD ]
