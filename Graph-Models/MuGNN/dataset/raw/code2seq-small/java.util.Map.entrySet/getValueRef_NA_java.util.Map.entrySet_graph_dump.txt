Line_8 $$ List<Object> result = new ArrayList<Object>()-->Line_13 $$ result.add(this.children[0].getValueInternal(state).getValue())[ FD ]
Line_45 $$ Object resultArray = Array.newInstance(arrayElementType, result.size())-->Line_46 $$ System.arraycopy(result.toArray(), 0, resultArray, 0, result.size())[ FD ]
Line_2 $$ protected ValueRef getValueRef(ExpressionState state) throws EvaluationException -->Line_28 $$ state.pushActiveContextObject(new TypedValue(element))[ FD ]
Line_25 $$ Class<?> arrayElementType = null-->Line_32 $$ arrayElementType = determineCommonType(arrayElementType, value.getClass())[ FD ]
Line_21 $$ if (operand instanceof Iterable || operandIsArray) -->Line_41 $$ if (operandIsArray) [ CD ]
Line_8 $$ List<Object> result = new ArrayList<Object>()-->Line_45 $$ Object resultArray = Array.newInstance(arrayElementType, result.size())[ FD ]
Line_25 $$ Class<?> arrayElementType = null-->Line_42 $$ if (arrayElementType == null) [ FD ]
Line_24 $$ int idx = 0-->Line_29 $$ state.enterScope("index", idx)[ FD ]
Line_5 $$ boolean operandIsArray = ObjectUtils.isArray(operand)-->Line_31 $$ if (value != null && operandIsArray) [ FD ]
Line_4 $$ Object operand = op.getValue()-->Line_51 $$ if (operand == null) [ FD ]
Line_52 $$ if (this.nullSafe) -->Line_53 $$ return ValueRef.NullValueRef.INSTANCE[ CD ]
Line_2 $$ protected ValueRef getValueRef(ExpressionState state) throws EvaluationException -->Line_4 $$ Object operand = op.getValue()[ CD ]
Line_32 $$ arrayElementType = determineCommonType(arrayElementType, value.getClass())-->Line_45 $$ Object resultArray = Array.newInstance(arrayElementType, result.size())[ FD ]
Line_2 $$ protected ValueRef getValueRef(ExpressionState state) throws EvaluationException -->Line_3 $$ TypedValue op = state.getActiveContextObject()[ CD ]
Line_6 $$ if (operand instanceof Map) -->Line_8 $$ List<Object> result = new ArrayList<Object>()[ CD ]
Line_2 $$ protected ValueRef getValueRef(ExpressionState state) throws EvaluationException -->Line_12 $$ state.enterScope()[ FD ]
Line_51 $$ if (operand == null) -->Line_52 $$ if (this.nullSafe) [ CD ]
Line_2 $$ protected ValueRef getValueRef(ExpressionState state) throws EvaluationException -->Line_37 $$ state.popActiveContextObject()[ FD ]
Line_4 $$ Object operand = op.getValue()-->Line_5 $$ boolean operandIsArray = ObjectUtils.isArray(operand)[ FD ]
Line_25 $$ Class<?> arrayElementType = null-->Line_45 $$ Object resultArray = Array.newInstance(arrayElementType, result.size())[ FD ]
Line_41 $$ if (operandIsArray) -->Line_46 $$ System.arraycopy(result.toArray(), 0, resultArray, 0, result.size())[ CD ]
Line_3 $$ TypedValue op = state.getActiveContextObject()-->Line_4 $$ Object operand = op.getValue()[ FD ]
Line_41 $$ if (operandIsArray) -->Line_42 $$ if (arrayElementType == null) [ CD ]
Line_5 $$ boolean operandIsArray = ObjectUtils.isArray(operand)-->Line_21 $$ if (operand instanceof Iterable || operandIsArray) [ FD ]
Line_2 $$ protected ValueRef getValueRef(ExpressionState state) throws EvaluationException -->Line_5 $$ boolean operandIsArray = ObjectUtils.isArray(operand)[ CD ]
Line_2 $$ protected ValueRef getValueRef(ExpressionState state) throws EvaluationException -->Line_6 $$ if (operand instanceof Map) [ CD ]
Line_21 $$ if (operand instanceof Iterable || operandIsArray) -->Line_24 $$ int idx = 0[ CD ]
Line_2 $$ protected ValueRef getValueRef(ExpressionState state) throws EvaluationException -->Line_29 $$ state.enterScope("index", idx)[ FD ]
Line_2 $$ protected ValueRef getValueRef(ExpressionState state) throws EvaluationException -->Line_30 $$ Object value = this.children[0].getValueInternal(state).getValue()[ FD ]
Line_30 $$ Object value = this.children[0].getValueInternal(state).getValue()-->Line_32 $$ arrayElementType = determineCommonType(arrayElementType, value.getClass())[ FD ]
Line_2 $$ protected ValueRef getValueRef(ExpressionState state) throws EvaluationException -->Line_21 $$ if (operand instanceof Iterable || operandIsArray) [ CD ]
Line_30 $$ Object value = this.children[0].getValueInternal(state).getValue()-->Line_34 $$ result.add(value)[ FD ]
Line_2 $$ protected ValueRef getValueRef(ExpressionState state) throws EvaluationException -->Line_36 $$ state.exitScope()[ FD ]
Line_6 $$ if (operand instanceof Map) -->Line_7 $$ Map<?, ?> mapData = (Map<?, ?>) operand[ CD ]
Line_6 $$ if (operand instanceof Map) -->Line_19 $$ return new ValueRef.TypedValueHolderValueRef(new TypedValue(result), this)[ CD ]
Line_41 $$ if (operandIsArray) -->Line_45 $$ Object resultArray = Array.newInstance(arrayElementType, result.size())[ CD ]
Line_41 $$ if (operandIsArray) -->Line_47 $$ return new ValueRef.TypedValueHolderValueRef(new TypedValue(resultArray), this)[ CD ]
Line_2 $$ protected ValueRef getValueRef(ExpressionState state) throws EvaluationException -->Line_13 $$ result.add(this.children[0].getValueInternal(state).getValue())[ FD ]
Line_2 $$ protected ValueRef getValueRef(ExpressionState state) throws EvaluationException -->Line_11 $$ state.pushActiveContextObject(new TypedValue(entry))[ FD ]
Line_2 $$ protected ValueRef getValueRef(ExpressionState state) throws EvaluationException -->Line_15 $$ state.popActiveContextObject()[ FD ]
Line_8 $$ List<Object> result = new ArrayList<Object>()-->Line_34 $$ result.add(value)[ FD ]
Line_2 $$ protected ValueRef getValueRef(ExpressionState state) throws EvaluationException -->Line_16 $$ state.exitScope()[ FD ]
Line_25 $$ Class<?> arrayElementType = null-->Line_43 $$ arrayElementType = Object.class[ FD ]
Line_2 $$ protected ValueRef getValueRef(ExpressionState state) throws EvaluationException -->Line_3 $$ TypedValue op = state.getActiveContextObject()[ FD ]
Line_4 $$ Object operand = op.getValue()-->Line_57 $$ throw new SpelEvaluationException(getStartPosition(), SpelMessage.PROJECTION_NOT_SUPPORTED_ON_TYPE, operand.getClass().getName())[ FD ]
Line_42 $$ if (arrayElementType == null) -->Line_43 $$ arrayElementType = Object.class[ CD ]
Line_24 $$ int idx = 0-->Line_39 $$ idx++[ FD ]
Line_32 $$ arrayElementType = determineCommonType(arrayElementType, value.getClass())-->Line_43 $$ arrayElementType = Object.class[ FD ]
Line_43 $$ arrayElementType = Object.class-->Line_45 $$ Object resultArray = Array.newInstance(arrayElementType, result.size())[ FD ]
Line_21 $$ if (operand instanceof Iterable || operandIsArray) -->Line_22 $$ Iterable<?> data = (operand instanceof Iterable ? (Iterable<?>) operand : Arrays.asList(ObjectUtils.toObjectArray(operand)))[ CD ]
Line_32 $$ arrayElementType = determineCommonType(arrayElementType, value.getClass())-->Line_42 $$ if (arrayElementType == null) [ FD ]
Line_2 $$ protected ValueRef getValueRef(ExpressionState state) throws EvaluationException -->Line_51 $$ if (operand == null) [ CD ]
Line_21 $$ if (operand instanceof Iterable || operandIsArray) -->Line_25 $$ Class<?> arrayElementType = null[ CD ]
Line_8 $$ List<Object> result = new ArrayList<Object>()-->Line_46 $$ System.arraycopy(result.toArray(), 0, resultArray, 0, result.size())[ FD ]
Line_21 $$ if (operand instanceof Iterable || operandIsArray) -->Line_49 $$ return new ValueRef.TypedValueHolderValueRef(new TypedValue(result), this)[ CD ]
Line_4 $$ Object operand = op.getValue()-->Line_6 $$ if (operand instanceof Map) [ FD ]
Line_31 $$ if (value != null && operandIsArray) -->Line_32 $$ arrayElementType = determineCommonType(arrayElementType, value.getClass())[ CD ]
Line_7 $$ Map<?, ?> mapData = (Map<?, ?>) operand-->Line_9 $$ for (Map.Entry<?, ?> entry : mapData.entrySet()) [ FD ]
Line_4 $$ Object operand = op.getValue()-->Line_22 $$ Iterable<?> data = (operand instanceof Iterable ? (Iterable<?>) operand : Arrays.asList(ObjectUtils.toObjectArray(operand)))[ FD ]
