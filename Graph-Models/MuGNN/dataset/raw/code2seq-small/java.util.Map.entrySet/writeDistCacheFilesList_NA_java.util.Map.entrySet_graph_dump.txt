Line_2 $$ private int writeDistCacheFilesList() throws IOException -->Line_3 $$ List dcFiles = new ArrayList(distCacheFiles.entrySet())[ CD ]
Line_2 $$ private int writeDistCacheFilesList() throws IOException -->Line_12 $$ SequenceFile.Writer src_writer = SequenceFile.createWriter(fs, conf, distCacheFilesList, LongWritable.class, BytesWritable.class, SequenceFile.CompressionType.NONE)[ CD ]
Line_16 $$ for (Iterator it = dcFiles.iterator(); it.hasNext(); ) -->Line_17 $$ Map.Entry entry = (Map.Entry) it.next()[ FD ]
Line_3 $$ List dcFiles = new ArrayList(distCacheFiles.entrySet())-->Line_13 $$ int fileCount = dcFiles.size()[ FD ]
Line_3 $$ List dcFiles = new ArrayList(distCacheFiles.entrySet())-->Line_4 $$ Collections.sort(dcFiles, new Comparator() [ FD ]
Line_35 $$ if (!shouldGenerateDistCacheData() && fileCount > 0) -->Line_36 $$ LOG.error("Missing " + fileCount + " distributed cache files under the " + " directory\n" + distCachePath + "\nthat are needed for gridmix" + " to emulate distributed cache load. Either use -generate\noption" + " to generate distributed cache data along with input data OR " + "disable\ndistributed cache emulation by configuring '" + DistributedCacheEmulator.GRIDMIX_EMULATE_DISTRIBUTEDCACHE + "' to false.")[ CD ]
Line_17 $$ Map.Entry entry = (Map.Entry) it.next()-->Line_18 $$ LongWritable fileSize = new LongWritable(Long.valueOf(entry.getValue().toString()))[ FD ]
Line_2 $$ private int writeDistCacheFilesList() throws IOException -->Line_28 $$ if (src_writer != null) [ CD ]
Line_16 $$ for (Iterator it = dcFiles.iterator(); it.hasNext(); ) -->Line_17 $$ Map.Entry entry = (Map.Entry) it.next()[ CD ]
Line_2 $$ private int writeDistCacheFilesList() throws IOException -->Line_34 $$ LOG.info("Number of HDFS based distributed cache files to be generated is " + fileCount + ". Total size of HDFS based distributed cache files " + "to be generated is " + byteCount)[ CD ]
Line_18 $$ LongWritable fileSize = new LongWritable(Long.valueOf(entry.getValue().toString()))-->Line_26 $$ src_writer.append(fileSize, filePath)[ FD ]
Line_16 $$ for (Iterator it = dcFiles.iterator(); it.hasNext(); ) -->Line_22 $$ if (bytesSync > AVG_BYTES_PER_MAP) [ CD ]
Line_2 $$ private int writeDistCacheFilesList() throws IOException -->Line_33 $$ conf.setLong(GenerateDistCacheData.GRIDMIX_DISTCACHE_BYTE_COUNT, byteCount)[ CD ]
Line_16 $$ for (Iterator it = dcFiles.iterator(); it.hasNext(); ) -->Line_19 $$ BytesWritable filePath = new BytesWritable(entry.getKey().toString().getBytes())[ CD ]
Line_22 $$ if (bytesSync > AVG_BYTES_PER_MAP) -->Line_24 $$ bytesSync = fileSize.get()[ CD ]
Line_22 $$ if (bytesSync > AVG_BYTES_PER_MAP) -->Line_23 $$ src_writer.sync()[ CD ]
Line_2 $$ private int writeDistCacheFilesList() throws IOException -->Line_9 $$ FileSystem fs = FileSystem.get(conf)[ CD ]
Line_2 $$ private int writeDistCacheFilesList() throws IOException -->Line_35 $$ if (!shouldGenerateDistCacheData() && fileCount > 0) [ CD ]
Line_28 $$ if (src_writer != null) -->Line_29 $$ src_writer.close()[ CD ]
Line_19 $$ BytesWritable filePath = new BytesWritable(entry.getKey().toString().getBytes())-->Line_26 $$ src_writer.append(fileSize, filePath)[ FD ]
Line_3 $$ List dcFiles = new ArrayList(distCacheFiles.entrySet())-->Line_16 $$ for (Iterator it = dcFiles.iterator(); it.hasNext(); ) [ FD ]
Line_17 $$ Map.Entry entry = (Map.Entry) it.next()-->Line_19 $$ BytesWritable filePath = new BytesWritable(entry.getKey().toString().getBytes())[ FD ]
Line_2 $$ private int writeDistCacheFilesList() throws IOException -->Line_16 $$ for (Iterator it = dcFiles.iterator(); it.hasNext(); ) [ CD ]
Line_18 $$ LongWritable fileSize = new LongWritable(Long.valueOf(entry.getValue().toString()))-->Line_21 $$ bytesSync += fileSize.get()[ FD ]
Line_2 $$ private int writeDistCacheFilesList() throws IOException -->Line_11 $$ conf.set(GenerateDistCacheData.GRIDMIX_DISTCACHE_FILE_LIST, distCacheFilesList.toString())[ CD ]
Line_2 $$ private int writeDistCacheFilesList() throws IOException -->Line_4 $$ Collections.sort(dcFiles, new Comparator() [ CD ]
Line_2 $$ private int writeDistCacheFilesList() throws IOException -->Line_13 $$ int fileCount = dcFiles.size()[ CD ]
Line_16 $$ for (Iterator it = dcFiles.iterator(); it.hasNext(); ) -->Line_21 $$ bytesSync += fileSize.get()[ CD ]
Line_18 $$ LongWritable fileSize = new LongWritable(Long.valueOf(entry.getValue().toString()))-->Line_24 $$ bytesSync = fileSize.get()[ FD ]
Line_35 $$ if (!shouldGenerateDistCacheData() && fileCount > 0) -->Line_37 $$ return Gridmix.MISSING_DIST_CACHE_FILES_ERROR[ CD ]
Line_18 $$ LongWritable fileSize = new LongWritable(Long.valueOf(entry.getValue().toString()))-->Line_20 $$ byteCount += fileSize.get()[ FD ]
Line_16 $$ for (Iterator it = dcFiles.iterator(); it.hasNext(); ) -->Line_20 $$ byteCount += fileSize.get()[ CD ]
Line_2 $$ private int writeDistCacheFilesList() throws IOException -->Line_31 $$ fs.deleteOnExit(distCacheFilesList)[ CD ]
Line_2 $$ private int writeDistCacheFilesList() throws IOException -->Line_32 $$ conf.setInt(GenerateDistCacheData.GRIDMIX_DISTCACHE_FILE_COUNT, fileCount)[ CD ]
Line_16 $$ for (Iterator it = dcFiles.iterator(); it.hasNext(); ) -->Line_18 $$ LongWritable fileSize = new LongWritable(Long.valueOf(entry.getValue().toString()))[ CD ]
Line_4 $$ Collections.sort(dcFiles, new Comparator() -->Line_6 $$ return ((Comparable) ((Map.Entry) (dc2)).getValue()).compareTo(((Map.Entry) (dc1)).getValue())[ CD ]
Line_16 $$ for (Iterator it = dcFiles.iterator(); it.hasNext(); ) -->Line_26 $$ src_writer.append(fileSize, filePath)[ CD ]
Line_2 $$ private int writeDistCacheFilesList() throws IOException -->Line_39 $$ return 0[ CD ]
