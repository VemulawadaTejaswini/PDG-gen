Line_12 $$ final String code = config.getName()-->Line_13 $$ final ModelNode securityModuleNode = Util.createAddOperation(address.append(subnodeName, code))[ FD ]
Line_2 $$ private boolean createSecurityModelNode(String securityComponent, String subnodeName, String flagAttributeName, String flagDefaultValue, final SecurityModule[] securityModules, String domainName, ModelNode operations) -->Line_14 $$ final String flag = StringUtils.defaultIfEmpty(config.getFlag(), flagDefaultValue)[ FD ]
Line_13 $$ final ModelNode securityModuleNode = Util.createAddOperation(address.append(subnodeName, code))-->Line_16 $$ securityModuleNode.get(flagAttributeName).set(flag)[ FD ]
Line_2 $$ private boolean createSecurityModelNode(String securityComponent, String subnodeName, String flagAttributeName, String flagDefaultValue, final SecurityModule[] securityModules, String domainName, ModelNode operations) -->Line_32 $$ operations.add(securityModuleNode)[ FD ]
Line_11 $$ for (final SecurityModule config : securityModules) -->Line_12 $$ final String code = config.getName()[ FD ]
Line_26 $$ for (final Map.Entry<String, String> entry : configOptions.entrySet()) -->Line_28 $$ final String optionValue = entry.getValue()[ FD ]
Line_2 $$ private boolean createSecurityModelNode(String securityComponent, String subnodeName, String flagAttributeName, String flagDefaultValue, final SecurityModule[] securityModules, String domainName, ModelNode operations) -->Line_10 $$ operations.add(Util.createAddOperation(address))[ FD ]
Line_11 $$ for (final SecurityModule config : securityModules) -->Line_14 $$ final String flag = StringUtils.defaultIfEmpty(config.getFlag(), flagDefaultValue)[ FD ]
Line_18 $$ if (configOptions == null) -->Line_20 $$ configOptions = Collections.emptyMap()[ CD ]
Line_11 $$ for (final SecurityModule config : securityModules) -->Line_17 $$ Map<String, String> configOptions = config.getOptions()[ FD ]
Line_18 $$ if (configOptions == null) -->Line_19 $$ LOGGER.info("No module options provided.")[ CD ]
Line_2 $$ private boolean createSecurityModelNode(String securityComponent, String subnodeName, String flagAttributeName, String flagDefaultValue, final SecurityModule[] securityModules, String domainName, ModelNode operations) -->Line_34 $$ return true[ CD ]
Line_2 $$ private boolean createSecurityModelNode(String securityComponent, String subnodeName, String flagAttributeName, String flagDefaultValue, final SecurityModule[] securityModules, String domainName, ModelNode operations) -->Line_13 $$ final ModelNode securityModuleNode = Util.createAddOperation(address.append(subnodeName, code))[ FD ]
Line_22 $$ if (LOGGER.isInfoEnabled()) -->Line_23 $$ LOGGER.info("Adding " + securityComponent + " module [code=" + code + ", " + flagAttributeName + "=" + flag + ", options = " + configOptions + "]")[ CD ]
Line_25 $$ final ModelNode moduleOptionsNode = securityModuleNode.get(MODULE_OPTIONS)-->Line_29 $$ moduleOptionsNode.add(optionName, optionValue)[ FD ]
Line_13 $$ final ModelNode securityModuleNode = Util.createAddOperation(address.append(subnodeName, code))-->Line_25 $$ final ModelNode moduleOptionsNode = securityModuleNode.get(MODULE_OPTIONS)[ FD ]
Line_3 $$ if (securityModules == null || securityModules.length == 0) -->Line_7 $$ return false[ CD ]
Line_2 $$ private boolean createSecurityModelNode(String securityComponent, String subnodeName, String flagAttributeName, String flagDefaultValue, final SecurityModule[] securityModules, String domainName, ModelNode operations) -->Line_3 $$ if (securityModules == null || securityModules.length == 0) [ CD ]
Line_9 $$ PathAddress address = PathAddress.pathAddress().append(SUBSYSTEM, SUBSYSTEM_SECURITY).append(SECURITY_DOMAIN, domainName).append(securityComponent, CLASSIC)-->Line_10 $$ operations.add(Util.createAddOperation(address))[ FD ]
Line_17 $$ Map<String, String> configOptions = config.getOptions()-->Line_26 $$ for (final Map.Entry<String, String> entry : configOptions.entrySet()) [ FD ]
Line_17 $$ Map<String, String> configOptions = config.getOptions()-->Line_20 $$ configOptions = Collections.emptyMap()[ FD ]
Line_13 $$ final ModelNode securityModuleNode = Util.createAddOperation(address.append(subnodeName, code))-->Line_15 $$ securityModuleNode.get(ModelDescriptionConstants.CODE).set(code)[ FD ]
Line_27 $$ final String optionName = entry.getKey()-->Line_29 $$ moduleOptionsNode.add(optionName, optionValue)[ FD ]
Line_2 $$ private boolean createSecurityModelNode(String securityComponent, String subnodeName, String flagAttributeName, String flagDefaultValue, final SecurityModule[] securityModules, String domainName, ModelNode operations) -->Line_16 $$ securityModuleNode.get(flagAttributeName).set(flag)[ FD ]
Line_28 $$ final String optionValue = entry.getValue()-->Line_29 $$ moduleOptionsNode.add(optionName, optionValue)[ FD ]
Line_2 $$ private boolean createSecurityModelNode(String securityComponent, String subnodeName, String flagAttributeName, String flagDefaultValue, final SecurityModule[] securityModules, String domainName, ModelNode operations) -->Line_10 $$ operations.add(Util.createAddOperation(address))[ CD ]
Line_4 $$ if (LOGGER.isInfoEnabled()) -->Line_5 $$ LOGGER.info("No security configuration for " + securityComponent + " module.")[ CD ]
Line_20 $$ configOptions = Collections.emptyMap()-->Line_26 $$ for (final Map.Entry<String, String> entry : configOptions.entrySet()) [ FD ]
Line_26 $$ for (final Map.Entry<String, String> entry : configOptions.entrySet()) -->Line_27 $$ final String optionName = entry.getKey()[ FD ]
Line_12 $$ final String code = config.getName()-->Line_15 $$ securityModuleNode.get(ModelDescriptionConstants.CODE).set(code)[ FD ]
Line_2 $$ private boolean createSecurityModelNode(String securityComponent, String subnodeName, String flagAttributeName, String flagDefaultValue, final SecurityModule[] securityModules, String domainName, ModelNode operations) -->Line_9 $$ PathAddress address = PathAddress.pathAddress().append(SUBSYSTEM, SUBSYSTEM_SECURITY).append(SECURITY_DOMAIN, domainName).append(securityComponent, CLASSIC)[ FD ]
Line_13 $$ final ModelNode securityModuleNode = Util.createAddOperation(address.append(subnodeName, code))-->Line_32 $$ operations.add(securityModuleNode)[ FD ]
Line_17 $$ Map<String, String> configOptions = config.getOptions()-->Line_18 $$ if (configOptions == null) [ FD ]
Line_9 $$ PathAddress address = PathAddress.pathAddress().append(SUBSYSTEM, SUBSYSTEM_SECURITY).append(SECURITY_DOMAIN, domainName).append(securityComponent, CLASSIC)-->Line_13 $$ final ModelNode securityModuleNode = Util.createAddOperation(address.append(subnodeName, code))[ FD ]
Line_13 $$ final ModelNode securityModuleNode = Util.createAddOperation(address.append(subnodeName, code))-->Line_31 $$ securityModuleNode.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ FD ]
Line_2 $$ private boolean createSecurityModelNode(String securityComponent, String subnodeName, String flagAttributeName, String flagDefaultValue, final SecurityModule[] securityModules, String domainName, ModelNode operations) -->Line_9 $$ PathAddress address = PathAddress.pathAddress().append(SUBSYSTEM, SUBSYSTEM_SECURITY).append(SECURITY_DOMAIN, domainName).append(securityComponent, CLASSIC)[ CD ]
Line_14 $$ final String flag = StringUtils.defaultIfEmpty(config.getFlag(), flagDefaultValue)-->Line_16 $$ securityModuleNode.get(flagAttributeName).set(flag)[ FD ]
Line_3 $$ if (securityModules == null || securityModules.length == 0) -->Line_4 $$ if (LOGGER.isInfoEnabled()) [ CD ]
