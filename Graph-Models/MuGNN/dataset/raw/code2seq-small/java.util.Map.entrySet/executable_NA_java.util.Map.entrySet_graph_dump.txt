Line_3 $$ Context ctx = Context.enter()-->Line_5 $$ Scriptable scope = ctx.newObject(globalScope)[ FD ]
Line_2 $$ public ExecutableScript executable(CompiledScript compiledScript, Map<String, Object> vars) -->Line_8 $$ for (Map.Entry<String, Object> entry : vars.entrySet()) [ FD ]
Line_5 $$ Scriptable scope = ctx.newObject(globalScope)-->Line_6 $$ scope.setPrototype(globalScope)[ FD ]
Line_2 $$ public ExecutableScript executable(CompiledScript compiledScript, Map<String, Object> vars) -->Line_11 $$ return new JavaScriptExecutableScript((Script) compiledScript.compiled(), scope)[ FD ]
Line_2 $$ public ExecutableScript executable(CompiledScript compiledScript, Map<String, Object> vars) -->Line_3 $$ Context ctx = Context.enter()[ CD ]
Line_5 $$ Scriptable scope = ctx.newObject(globalScope)-->Line_7 $$ scope.setParentScope(null)[ FD ]
Line_5 $$ Scriptable scope = ctx.newObject(globalScope)-->Line_9 $$ ScriptableObject.putProperty(scope, entry.getKey(), entry.getValue())[ FD ]
Line_8 $$ for (Map.Entry<String, Object> entry : vars.entrySet()) -->Line_9 $$ ScriptableObject.putProperty(scope, entry.getKey(), entry.getValue())[ FD ]
