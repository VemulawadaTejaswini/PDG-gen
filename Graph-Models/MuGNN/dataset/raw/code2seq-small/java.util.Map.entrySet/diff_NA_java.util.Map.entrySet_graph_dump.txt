Line_8 $$ Map<K, V> removed = new HashMap<K, V>(oldMap)-->Line_10 $$ for (Map.Entry<K, V> entry : removed.entrySet()) [ FD ]
Line_2 $$ public static <K, V> void diff(Map<K, V> newMap, Map<K, V> oldMap, ChangeListener<? super Map.Entry<K, V>> changeListener) -->Line_9 $$ removed.keySet().removeAll(newMap.keySet())[ FD ]
Line_5 $$ for (Map.Entry<K, V> entry : added.entrySet()) -->Line_17 $$ changeListener.changed(entry)[ FD ]
Line_2 $$ public static <K, V> void diff(Map<K, V> newMap, Map<K, V> oldMap, ChangeListener<? super Map.Entry<K, V>> changeListener) -->Line_8 $$ Map<K, V> removed = new HashMap<K, V>(oldMap)[ CD ]
Line_2 $$ public static <K, V> void diff(Map<K, V> newMap, Map<K, V> oldMap, ChangeListener<? super Map.Entry<K, V>> changeListener) -->Line_16 $$ if (!ObjectUtils.equals(entry.getValue(), oldMap.get(entry.getKey()))) [ FD ]
Line_8 $$ Map<K, V> removed = new HashMap<K, V>(oldMap)-->Line_9 $$ removed.keySet().removeAll(newMap.keySet())[ FD ]
Line_2 $$ public static <K, V> void diff(Map<K, V> newMap, Map<K, V> oldMap, ChangeListener<? super Map.Entry<K, V>> changeListener) -->Line_17 $$ changeListener.changed(entry)[ FD ]
Line_3 $$ Map<K, V> added = new HashMap<K, V>(newMap)-->Line_4 $$ added.keySet().removeAll(oldMap.keySet())[ FD ]
Line_5 $$ for (Map.Entry<K, V> entry : added.entrySet()) -->Line_16 $$ if (!ObjectUtils.equals(entry.getValue(), oldMap.get(entry.getKey()))) [ FD ]
Line_2 $$ public static <K, V> void diff(Map<K, V> newMap, Map<K, V> oldMap, ChangeListener<? super Map.Entry<K, V>> changeListener) -->Line_11 $$ changeListener.removed(entry)[ FD ]
Line_2 $$ public static <K, V> void diff(Map<K, V> newMap, Map<K, V> oldMap, ChangeListener<? super Map.Entry<K, V>> changeListener) -->Line_4 $$ added.keySet().removeAll(oldMap.keySet())[ FD ]
Line_16 $$ if (!ObjectUtils.equals(entry.getValue(), oldMap.get(entry.getKey()))) -->Line_17 $$ changeListener.changed(entry)[ CD ]
Line_3 $$ Map<K, V> added = new HashMap<K, V>(newMap)-->Line_5 $$ for (Map.Entry<K, V> entry : added.entrySet()) [ FD ]
Line_2 $$ public static <K, V> void diff(Map<K, V> newMap, Map<K, V> oldMap, ChangeListener<? super Map.Entry<K, V>> changeListener) -->Line_3 $$ Map<K, V> added = new HashMap<K, V>(newMap)[ CD ]
Line_2 $$ public static <K, V> void diff(Map<K, V> newMap, Map<K, V> oldMap, ChangeListener<? super Map.Entry<K, V>> changeListener) -->Line_14 $$ same.keySet().retainAll(oldMap.keySet())[ FD ]
Line_13 $$ Map<K, V> same = new HashMap<K, V>(newMap)-->Line_15 $$ for (Map.Entry<K, V> entry : same.entrySet()) [ FD ]
Line_2 $$ public static <K, V> void diff(Map<K, V> newMap, Map<K, V> oldMap, ChangeListener<? super Map.Entry<K, V>> changeListener) -->Line_4 $$ added.keySet().removeAll(oldMap.keySet())[ CD ]
Line_2 $$ public static <K, V> void diff(Map<K, V> newMap, Map<K, V> oldMap, ChangeListener<? super Map.Entry<K, V>> changeListener) -->Line_9 $$ removed.keySet().removeAll(newMap.keySet())[ CD ]
Line_2 $$ public static <K, V> void diff(Map<K, V> newMap, Map<K, V> oldMap, ChangeListener<? super Map.Entry<K, V>> changeListener) -->Line_6 $$ changeListener.added(entry)[ FD ]
Line_2 $$ public static <K, V> void diff(Map<K, V> newMap, Map<K, V> oldMap, ChangeListener<? super Map.Entry<K, V>> changeListener) -->Line_14 $$ same.keySet().retainAll(oldMap.keySet())[ CD ]
Line_13 $$ Map<K, V> same = new HashMap<K, V>(newMap)-->Line_14 $$ same.keySet().retainAll(oldMap.keySet())[ FD ]
Line_5 $$ for (Map.Entry<K, V> entry : added.entrySet()) -->Line_11 $$ changeListener.removed(entry)[ FD ]
Line_2 $$ public static <K, V> void diff(Map<K, V> newMap, Map<K, V> oldMap, ChangeListener<? super Map.Entry<K, V>> changeListener) -->Line_13 $$ Map<K, V> same = new HashMap<K, V>(newMap)[ CD ]
Line_5 $$ for (Map.Entry<K, V> entry : added.entrySet()) -->Line_6 $$ changeListener.added(entry)[ FD ]
