Line_2 $$ public String annotationToString(Annotation annotation) -->Line_4 $$ sb.append(StringPool.AT)[ CD ]
Line_16 $$ if (value instanceof List) -->Line_27 $$ if (!values.isEmpty()) [ CD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_28 $$ sb.setIndex(sb.index() - 1)[ FD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_23 $$ sb.append(object)[ FD ]
Line_19 $$ for (Object object : values) -->Line_20 $$ if (object instanceof Annotation) [ FD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_14 $$ sb.append(StringPool.EQUAL)[ FD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_9 $$ return sb.toString()[ FD ]
Line_8 $$ if (namedParameters.isEmpty()) -->Line_9 $$ return sb.toString()[ CD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_21 $$ sb.append(annotationToString((Annotation) object))[ FD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_18 $$ sb.append(StringPool.OPEN_CURLY_BRACE)[ FD ]
Line_2 $$ public String annotationToString(Annotation annotation) -->Line_37 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_12 $$ for (Map.Entry<String, Object> entry : namedParameters.entrySet()) -->Line_13 $$ sb.append(entry.getKey())[ FD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_25 $$ sb.append(StringPool.COMMA_AND_SPACE)[ FD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_30 $$ sb.append(StringPool.CLOSE_CURLY_BRACE)[ FD ]
Line_16 $$ if (value instanceof List) -->Line_32 $$ sb.append(value)[ CD ]
Line_2 $$ public String annotationToString(Annotation annotation) -->Line_6 $$ sb.append(type.getValue())[ CD ]
Line_2 $$ public String annotationToString(Annotation annotation) -->Line_5 $$ Type type = annotation.getType()[ FD ]
Line_2 $$ public String annotationToString(Annotation annotation) -->Line_7 $$ Map<String, Object> namedParameters = annotation.getNamedParameterMap()[ FD ]
Line_2 $$ public String annotationToString(Annotation annotation) -->Line_3 $$ StringBundler sb = new StringBundler()[ CD ]
Line_16 $$ if (value instanceof List) -->Line_17 $$ List<?> values = (List<?>) value[ CD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_4 $$ sb.append(StringPool.AT)[ FD ]
Line_2 $$ public String annotationToString(Annotation annotation) -->Line_7 $$ Map<String, Object> namedParameters = annotation.getNamedParameterMap()[ CD ]
Line_7 $$ Map<String, Object> namedParameters = annotation.getNamedParameterMap()-->Line_8 $$ if (namedParameters.isEmpty()) [ FD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_6 $$ sb.append(type.getValue())[ FD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_13 $$ sb.append(entry.getKey())[ FD ]
Line_2 $$ public String annotationToString(Annotation annotation) -->Line_36 $$ sb.setIndex(sb.index() - 1)[ CD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_11 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_32 $$ sb.append(value)[ FD ]
Line_16 $$ if (value instanceof List) -->Line_30 $$ sb.append(StringPool.CLOSE_CURLY_BRACE)[ CD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_34 $$ sb.append(StringPool.COMMA_AND_SPACE)[ FD ]
Line_20 $$ if (object instanceof Annotation) -->Line_21 $$ sb.append(annotationToString((Annotation) object))[ CD ]
Line_16 $$ if (value instanceof List) -->Line_18 $$ sb.append(StringPool.OPEN_CURLY_BRACE)[ CD ]
Line_2 $$ public String annotationToString(Annotation annotation) -->Line_5 $$ Type type = annotation.getType()[ CD ]
Line_2 $$ public String annotationToString(Annotation annotation) -->Line_8 $$ if (namedParameters.isEmpty()) [ CD ]
Line_20 $$ if (object instanceof Annotation) -->Line_23 $$ sb.append(object)[ CD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_36 $$ sb.setIndex(sb.index() - 1)[ FD ]
Line_12 $$ for (Map.Entry<String, Object> entry : namedParameters.entrySet()) -->Line_15 $$ Object value = entry.getValue()[ FD ]
Line_17 $$ List<?> values = (List<?>) value-->Line_27 $$ if (!values.isEmpty()) [ FD ]
Line_27 $$ if (!values.isEmpty()) -->Line_28 $$ sb.setIndex(sb.index() - 1)[ CD ]
Line_2 $$ public String annotationToString(Annotation annotation) -->Line_11 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ CD ]
Line_2 $$ public String annotationToString(Annotation annotation) -->Line_38 $$ return sb.toString()[ CD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_37 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_7 $$ Map<String, Object> namedParameters = annotation.getNamedParameterMap()-->Line_12 $$ for (Map.Entry<String, Object> entry : namedParameters.entrySet()) [ FD ]
Line_15 $$ Object value = entry.getValue()-->Line_32 $$ sb.append(value)[ FD ]
Line_5 $$ Type type = annotation.getType()-->Line_6 $$ sb.append(type.getValue())[ FD ]
Line_3 $$ StringBundler sb = new StringBundler()-->Line_38 $$ return sb.toString()[ FD ]
Line_19 $$ for (Object object : values) -->Line_23 $$ sb.append(object)[ FD ]
Line_15 $$ Object value = entry.getValue()-->Line_16 $$ if (value instanceof List) [ FD ]
