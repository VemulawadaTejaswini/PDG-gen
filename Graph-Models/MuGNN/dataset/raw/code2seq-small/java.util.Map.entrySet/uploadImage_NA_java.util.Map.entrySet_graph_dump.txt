Line_2 $$ private static void uploadImage(URL url, Configuration conf, NNStorage storage, NameNodeFile nnf, long txId, Canceler canceler) throws IOException -->Line_3 $$ File imageFile = storage.findImageFile(nnf, txId)[ FD ]
Line_15 $$ connection = (HttpURLConnection) connectionFactory.openConnection(urlWithParams, UserGroupInformation.isSecurityEnabled())-->Line_22 $$ setTimeout(connection)[ FD ]
Line_15 $$ connection = (HttpURLConnection) connectionFactory.openConnection(urlWithParams, UserGroupInformation.isSecurityEnabled())-->Line_27 $$ throw new HttpPutFailedException(connection.getResponseMessage(), responseCode)[ FD ]
Line_15 $$ connection = (HttpURLConnection) connectionFactory.openConnection(urlWithParams, UserGroupInformation.isSecurityEnabled())-->Line_35 $$ connection.disconnect()[ FD ]
Line_7 $$ HttpURLConnection connection = null-->Line_25 $$ int responseCode = connection.getResponseCode()[ FD ]
Line_15 $$ connection = (HttpURLConnection) connectionFactory.openConnection(urlWithParams, UserGroupInformation.isSecurityEnabled())-->Line_25 $$ int responseCode = connection.getResponseCode()[ FD ]
Line_25 $$ int responseCode = connection.getResponseCode()-->Line_26 $$ if (responseCode != HttpURLConnection.HTTP_OK) [ FD ]
Line_19 $$ if (imageFile.length() > chunkSize) -->Line_20 $$ connection.setChunkedStreamingMode(chunkSize)[ CD ]
Line_7 $$ HttpURLConnection connection = null-->Line_35 $$ connection.disconnect()[ FD ]
Line_7 $$ HttpURLConnection connection = null-->Line_34 $$ if (connection != null) [ FD ]
Line_10 $$ Map<String, String> params = ImageServlet.getParamsForPutImage(storage, txId, imageFile.length(), nnf)-->Line_11 $$ for (Entry<String, String> entry : params.entrySet()) [ FD ]
Line_2 $$ private static void uploadImage(URL url, Configuration conf, NNStorage storage, NameNodeFile nnf, long txId, Canceler canceler) throws IOException -->Line_9 $$ URIBuilder uriBuilder = new URIBuilder(url.toURI())[ FD ]
Line_11 $$ for (Entry<String, String> entry : params.entrySet()) -->Line_12 $$ uriBuilder.addParameter(entry.getKey(), entry.getValue())[ FD ]
Line_15 $$ connection = (HttpURLConnection) connectionFactory.openConnection(urlWithParams, UserGroupInformation.isSecurityEnabled())-->Line_16 $$ connection.setRequestMethod("PUT")[ FD ]
Line_7 $$ HttpURLConnection connection = null-->Line_17 $$ connection.setDoOutput(true)[ FD ]
Line_7 $$ HttpURLConnection connection = null-->Line_23 $$ ImageServlet.setVerificationHeadersForPut(connection, imageFile)[ FD ]
Line_15 $$ connection = (HttpURLConnection) connectionFactory.openConnection(urlWithParams, UserGroupInformation.isSecurityEnabled())-->Line_24 $$ writeFileToPutRequest(conf, connection, imageFile, canceler)[ FD ]
Line_15 $$ connection = (HttpURLConnection) connectionFactory.openConnection(urlWithParams, UserGroupInformation.isSecurityEnabled())-->Line_34 $$ if (connection != null) [ FD ]
Line_2 $$ private static void uploadImage(URL url, Configuration conf, NNStorage storage, NameNodeFile nnf, long txId, Canceler canceler) throws IOException -->Line_4 $$ if (imageFile == null) [ CD ]
Line_18 $$ int chunkSize = conf.getInt(DFSConfigKeys.DFS_IMAGE_TRANSFER_CHUNKSIZE_KEY, DFSConfigKeys.DFS_IMAGE_TRANSFER_CHUNKSIZE_DEFAULT)-->Line_19 $$ if (imageFile.length() > chunkSize) [ FD ]
Line_7 $$ HttpURLConnection connection = null-->Line_16 $$ connection.setRequestMethod("PUT")[ FD ]
Line_3 $$ File imageFile = storage.findImageFile(nnf, txId)-->Line_4 $$ if (imageFile == null) [ FD ]
Line_3 $$ File imageFile = storage.findImageFile(nnf, txId)-->Line_23 $$ ImageServlet.setVerificationHeadersForPut(connection, imageFile)[ FD ]
Line_7 $$ HttpURLConnection connection = null-->Line_27 $$ throw new HttpPutFailedException(connection.getResponseMessage(), responseCode)[ FD ]
Line_9 $$ URIBuilder uriBuilder = new URIBuilder(url.toURI())-->Line_14 $$ URL urlWithParams = uriBuilder.build().toURL()[ FD ]
Line_15 $$ connection = (HttpURLConnection) connectionFactory.openConnection(urlWithParams, UserGroupInformation.isSecurityEnabled())-->Line_17 $$ connection.setDoOutput(true)[ FD ]
Line_3 $$ File imageFile = storage.findImageFile(nnf, txId)-->Line_24 $$ writeFileToPutRequest(conf, connection, imageFile, canceler)[ FD ]
Line_14 $$ URL urlWithParams = uriBuilder.build().toURL()-->Line_15 $$ connection = (HttpURLConnection) connectionFactory.openConnection(urlWithParams, UserGroupInformation.isSecurityEnabled())[ FD ]
Line_2 $$ private static void uploadImage(URL url, Configuration conf, NNStorage storage, NameNodeFile nnf, long txId, Canceler canceler) throws IOException -->Line_7 $$ HttpURLConnection connection = null[ CD ]
Line_9 $$ URIBuilder uriBuilder = new URIBuilder(url.toURI())-->Line_12 $$ uriBuilder.addParameter(entry.getKey(), entry.getValue())[ FD ]
Line_34 $$ if (connection != null) -->Line_35 $$ connection.disconnect()[ CD ]
Line_2 $$ private static void uploadImage(URL url, Configuration conf, NNStorage storage, NameNodeFile nnf, long txId, Canceler canceler) throws IOException -->Line_10 $$ Map<String, String> params = ImageServlet.getParamsForPutImage(storage, txId, imageFile.length(), nnf)[ FD ]
Line_15 $$ connection = (HttpURLConnection) connectionFactory.openConnection(urlWithParams, UserGroupInformation.isSecurityEnabled())-->Line_20 $$ connection.setChunkedStreamingMode(chunkSize)[ FD ]
Line_2 $$ private static void uploadImage(URL url, Configuration conf, NNStorage storage, NameNodeFile nnf, long txId, Canceler canceler) throws IOException -->Line_3 $$ File imageFile = storage.findImageFile(nnf, txId)[ CD ]
Line_7 $$ HttpURLConnection connection = null-->Line_24 $$ writeFileToPutRequest(conf, connection, imageFile, canceler)[ FD ]
Line_18 $$ int chunkSize = conf.getInt(DFSConfigKeys.DFS_IMAGE_TRANSFER_CHUNKSIZE_KEY, DFSConfigKeys.DFS_IMAGE_TRANSFER_CHUNKSIZE_DEFAULT)-->Line_20 $$ connection.setChunkedStreamingMode(chunkSize)[ FD ]
Line_7 $$ HttpURLConnection connection = null-->Line_20 $$ connection.setChunkedStreamingMode(chunkSize)[ FD ]
Line_15 $$ connection = (HttpURLConnection) connectionFactory.openConnection(urlWithParams, UserGroupInformation.isSecurityEnabled())-->Line_23 $$ ImageServlet.setVerificationHeadersForPut(connection, imageFile)[ FD ]
Line_3 $$ File imageFile = storage.findImageFile(nnf, txId)-->Line_10 $$ Map<String, String> params = ImageServlet.getParamsForPutImage(storage, txId, imageFile.length(), nnf)[ FD ]
Line_7 $$ HttpURLConnection connection = null-->Line_22 $$ setTimeout(connection)[ FD ]
Line_2 $$ private static void uploadImage(URL url, Configuration conf, NNStorage storage, NameNodeFile nnf, long txId, Canceler canceler) throws IOException -->Line_18 $$ int chunkSize = conf.getInt(DFSConfigKeys.DFS_IMAGE_TRANSFER_CHUNKSIZE_KEY, DFSConfigKeys.DFS_IMAGE_TRANSFER_CHUNKSIZE_DEFAULT)[ FD ]
Line_2 $$ private static void uploadImage(URL url, Configuration conf, NNStorage storage, NameNodeFile nnf, long txId, Canceler canceler) throws IOException -->Line_24 $$ writeFileToPutRequest(conf, connection, imageFile, canceler)[ FD ]
Line_7 $$ HttpURLConnection connection = null-->Line_15 $$ connection = (HttpURLConnection) connectionFactory.openConnection(urlWithParams, UserGroupInformation.isSecurityEnabled())[ FD ]
Line_3 $$ File imageFile = storage.findImageFile(nnf, txId)-->Line_19 $$ if (imageFile.length() > chunkSize) [ FD ]
