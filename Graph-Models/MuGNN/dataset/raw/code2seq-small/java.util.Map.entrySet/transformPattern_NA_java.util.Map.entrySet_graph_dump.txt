Line_2 $$ private static String transformPattern(@NotNull String urlPattern, Map<String, String> macroValues) -->Line_3 $$ for (Map.Entry<String, String> entry : macroValues.entrySet()) [ FD ]
Line_3 $$ for (Map.Entry<String, String> entry : macroValues.entrySet()) -->Line_10 $$ urlPattern = urlPattern.replace("[ FD ]
Line_3 $$ for (Map.Entry<String, String> entry : macroValues.entrySet()) -->Line_4 $$ if (entry.getValue() == null) [ FD ]
Line_5 $$ if (urlPattern.contains("-->Line_6 $$ return null[ CD ]
Line_2 $$ private static String transformPattern(@NotNull String urlPattern, Map<String, String> macroValues) -->Line_12 $$ return urlPattern.replace("[ CD ]
Line_3 $$ for (Map.Entry<String, String> entry : macroValues.entrySet()) -->Line_5 $$ if (urlPattern.contains("[ FD ]
Line_2 $$ private static String transformPattern(@NotNull String urlPattern, Map<String, String> macroValues) -->Line_12 $$ return urlPattern.replace("[ FD ]
Line_2 $$ private static String transformPattern(@NotNull String urlPattern, Map<String, String> macroValues) -->Line_5 $$ if (urlPattern.contains("[ FD ]
Line_4 $$ if (entry.getValue() == null) -->Line_5 $$ if (urlPattern.contains("[ CD ]
Line_2 $$ private static String transformPattern(@NotNull String urlPattern, Map<String, String> macroValues) -->Line_10 $$ urlPattern = urlPattern.replace("[ FD ]
