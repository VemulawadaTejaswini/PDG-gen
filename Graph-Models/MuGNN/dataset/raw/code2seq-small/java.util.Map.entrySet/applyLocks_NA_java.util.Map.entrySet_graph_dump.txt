Line_10 $$ final LockOptions locks = new LockOptions(lockOptions.getLockMode())-->Line_13 $$ locks.setTimeOut(lockOptions.getTimeOut())[ FD ]
Line_2 $$ protected String applyLocks(String sql, QueryParameters parameters, Dialect dialect, List<AfterLoadAction> afterLoadActions) throws QueryException -->Line_13 $$ locks.setTimeOut(lockOptions.getTimeOut())[ CD ]
Line_2 $$ protected String applyLocks(String sql, QueryParameters parameters, Dialect dialect, List<AfterLoadAction> afterLoadActions) throws QueryException -->Line_4 $$ if (lockOptions == null || (lockOptions.getLockMode() == LockMode.NONE && lockOptions.getAliasLockCount() == 0)) [ CD ]
Line_2 $$ protected String applyLocks(String sql, QueryParameters parameters, Dialect dialect, List<AfterLoadAction> afterLoadActions) throws QueryException -->Line_29 $$ return dialect.applyLocksToSql(sql, locks, keyColumnNames)[ FD ]
Line_11 $$ final Map<String, String[]> keyColumnNames = dialect.forUpdateOfColumns() ? new HashMap<String, String[]>() : null-->Line_26 $$ keyColumnNames.put(sqlAlias, drivingPersister.getRootTableIdentifierColumnNames())[ FD ]
Line_22 $$ final String sqlAlias = drivingPersister.getRootTableAlias(drivingSqlAlias)-->Line_24 $$ locks.setAliasSpecificLockMode(sqlAlias, effectiveLockMode)[ FD ]
Line_2 $$ protected String applyLocks(String sql, QueryParameters parameters, Dialect dialect, List<AfterLoadAction> afterLoadActions) throws QueryException -->Line_10 $$ final LockOptions locks = new LockOptions(lockOptions.getLockMode())[ CD ]
Line_14 $$ for (Map.Entry<String, String> entry : sqlAliasByEntityAlias.entrySet()) -->Line_16 $$ final String drivingSqlAlias = entry.getValue()[ FD ]
Line_25 $$ if (keyColumnNames != null) -->Line_26 $$ keyColumnNames.put(sqlAlias, drivingPersister.getRootTableIdentifierColumnNames())[ CD ]
Line_16 $$ final String drivingSqlAlias = entry.getValue()-->Line_17 $$ if (drivingSqlAlias == null) [ FD ]
Line_22 $$ final String sqlAlias = drivingPersister.getRootTableAlias(drivingSqlAlias)-->Line_26 $$ keyColumnNames.put(sqlAlias, drivingPersister.getRootTableIdentifierColumnNames())[ FD ]
Line_2 $$ protected String applyLocks(String sql, QueryParameters parameters, Dialect dialect, List<AfterLoadAction> afterLoadActions) throws QueryException -->Line_12 $$ locks.setScope(lockOptions.getScope())[ CD ]
Line_7 $$ if (shouldUseFollowOnLocking(parameters, dialect, afterLoadActions)) -->Line_8 $$ return sql[ CD ]
Line_14 $$ for (Map.Entry<String, String> entry : sqlAliasByEntityAlias.entrySet()) -->Line_15 $$ final String userAlias = entry.getKey()[ FD ]
Line_15 $$ final String userAlias = entry.getKey()-->Line_23 $$ final LockMode effectiveLockMode = lockOptions.getEffectiveLockMode(userAlias)[ FD ]
Line_15 $$ final String userAlias = entry.getKey()-->Line_21 $$ final Lockable drivingPersister = (Lockable) select.getFromClause().findFromElementByUserOrSqlAlias(userAlias, drivingSqlAlias).getQueryable()[ FD ]
Line_3 $$ final LockOptions lockOptions = parameters.getLockOptions()-->Line_12 $$ locks.setScope(lockOptions.getScope())[ FD ]
Line_21 $$ final Lockable drivingPersister = (Lockable) select.getFromClause().findFromElementByUserOrSqlAlias(userAlias, drivingSqlAlias).getQueryable()-->Line_22 $$ final String sqlAlias = drivingPersister.getRootTableAlias(drivingSqlAlias)[ FD ]
Line_16 $$ final String drivingSqlAlias = entry.getValue()-->Line_22 $$ final String sqlAlias = drivingPersister.getRootTableAlias(drivingSqlAlias)[ FD ]
Line_3 $$ final LockOptions lockOptions = parameters.getLockOptions()-->Line_10 $$ final LockOptions locks = new LockOptions(lockOptions.getLockMode())[ FD ]
Line_2 $$ protected String applyLocks(String sql, QueryParameters parameters, Dialect dialect, List<AfterLoadAction> afterLoadActions) throws QueryException -->Line_29 $$ return dialect.applyLocksToSql(sql, locks, keyColumnNames)[ CD ]
Line_3 $$ final LockOptions lockOptions = parameters.getLockOptions()-->Line_23 $$ final LockMode effectiveLockMode = lockOptions.getEffectiveLockMode(userAlias)[ FD ]
Line_4 $$ if (lockOptions == null || (lockOptions.getLockMode() == LockMode.NONE && lockOptions.getAliasLockCount() == 0)) -->Line_5 $$ return sql[ CD ]
Line_2 $$ protected String applyLocks(String sql, QueryParameters parameters, Dialect dialect, List<AfterLoadAction> afterLoadActions) throws QueryException -->Line_7 $$ if (shouldUseFollowOnLocking(parameters, dialect, afterLoadActions)) [ CD ]
Line_21 $$ final Lockable drivingPersister = (Lockable) select.getFromClause().findFromElementByUserOrSqlAlias(userAlias, drivingSqlAlias).getQueryable()-->Line_26 $$ keyColumnNames.put(sqlAlias, drivingPersister.getRootTableIdentifierColumnNames())[ FD ]
Line_2 $$ protected String applyLocks(String sql, QueryParameters parameters, Dialect dialect, List<AfterLoadAction> afterLoadActions) throws QueryException -->Line_7 $$ if (shouldUseFollowOnLocking(parameters, dialect, afterLoadActions)) [ FD ]
Line_2 $$ protected String applyLocks(String sql, QueryParameters parameters, Dialect dialect, List<AfterLoadAction> afterLoadActions) throws QueryException -->Line_3 $$ final LockOptions lockOptions = parameters.getLockOptions()[ CD ]
Line_2 $$ protected String applyLocks(String sql, QueryParameters parameters, Dialect dialect, List<AfterLoadAction> afterLoadActions) throws QueryException -->Line_3 $$ final LockOptions lockOptions = parameters.getLockOptions()[ FD ]
Line_3 $$ final LockOptions lockOptions = parameters.getLockOptions()-->Line_13 $$ locks.setTimeOut(lockOptions.getTimeOut())[ FD ]
Line_2 $$ protected String applyLocks(String sql, QueryParameters parameters, Dialect dialect, List<AfterLoadAction> afterLoadActions) throws QueryException -->Line_11 $$ final Map<String, String[]> keyColumnNames = dialect.forUpdateOfColumns() ? new HashMap<String, String[]>() : null[ CD ]
Line_11 $$ final Map<String, String[]> keyColumnNames = dialect.forUpdateOfColumns() ? new HashMap<String, String[]>() : null-->Line_25 $$ if (keyColumnNames != null) [ FD ]
Line_10 $$ final LockOptions locks = new LockOptions(lockOptions.getLockMode())-->Line_24 $$ locks.setAliasSpecificLockMode(sqlAlias, effectiveLockMode)[ FD ]
Line_23 $$ final LockMode effectiveLockMode = lockOptions.getEffectiveLockMode(userAlias)-->Line_24 $$ locks.setAliasSpecificLockMode(sqlAlias, effectiveLockMode)[ FD ]
Line_16 $$ final String drivingSqlAlias = entry.getValue()-->Line_21 $$ final Lockable drivingPersister = (Lockable) select.getFromClause().findFromElementByUserOrSqlAlias(userAlias, drivingSqlAlias).getQueryable()[ FD ]
Line_20 $$ final QueryNode select = (QueryNode) queryTranslator.getSqlAST()-->Line_21 $$ final Lockable drivingPersister = (Lockable) select.getFromClause().findFromElementByUserOrSqlAlias(userAlias, drivingSqlAlias).getQueryable()[ FD ]
Line_3 $$ final LockOptions lockOptions = parameters.getLockOptions()-->Line_4 $$ if (lockOptions == null || (lockOptions.getLockMode() == LockMode.NONE && lockOptions.getAliasLockCount() == 0)) [ FD ]
Line_2 $$ protected String applyLocks(String sql, QueryParameters parameters, Dialect dialect, List<AfterLoadAction> afterLoadActions) throws QueryException -->Line_11 $$ final Map<String, String[]> keyColumnNames = dialect.forUpdateOfColumns() ? new HashMap<String, String[]>() : null[ FD ]
Line_10 $$ final LockOptions locks = new LockOptions(lockOptions.getLockMode())-->Line_12 $$ locks.setScope(lockOptions.getScope())[ FD ]
Line_11 $$ final Map<String, String[]> keyColumnNames = dialect.forUpdateOfColumns() ? new HashMap<String, String[]>() : null-->Line_29 $$ return dialect.applyLocksToSql(sql, locks, keyColumnNames)[ FD ]
Line_10 $$ final LockOptions locks = new LockOptions(lockOptions.getLockMode())-->Line_29 $$ return dialect.applyLocksToSql(sql, locks, keyColumnNames)[ FD ]
