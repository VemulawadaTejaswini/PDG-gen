Line_14 $$ IndexMetaData indexMetaData = mdBuilder.get(index)-->Line_15 $$ if (indexMetaData == null) [ FD ]
Line_40 $$ IndexMetaData.Builder builder = IndexMetaData.builder(indexMetaData)-->Line_44 $$ mdBuilder.put(builder)[ FD ]
Line_13 $$ String index = entry.getKey()-->Line_49 $$ indicesService.removeIndex(index, "created for mapping processing")[ FD ]
Line_33 $$ if (indexService == null) -->Line_35 $$ removeIndex = true[ CD ]
Line_4 $$ for (RefreshTask task : allTasks) -->Line_25 $$ logger.debug("[[ FD ]
Line_22 $$ if (indexMetaData.isSameUUID(task.indexUUID)) -->Line_25 $$ logger.debug("[[ CD ]
Line_12 $$ for (Map.Entry<String, List<RefreshTask>> entry : tasksPerIndex.entrySet()) -->Line_19 $$ List<RefreshTask> allIndexTasks = entry.getValue()[ FD ]
Line_32 $$ IndexService indexService = indicesService.indexService(index)-->Line_34 $$ indexService = indicesService.createIndex(nodeServicesProvider, indexMetaData, Collections.emptyList())[ FD ]
Line_2 $$ ClusterState executeRefresh(final ClusterState currentState, final List<RefreshTask> allTasks) throws Exception -->Line_56 $$ return ClusterState.builder(currentState).metaData(mdBuilder).build()[ FD ]
Line_4 $$ for (RefreshTask task : allTasks) -->Line_8 $$ tasksPerIndex.computeIfAbsent(task.index,  k -> new ArrayList()).add(task)[ FD ]
Line_14 $$ IndexMetaData indexMetaData = mdBuilder.get(index)-->Line_36 $$ for (ObjectCursor<MappingMetaData> metaData : indexMetaData.getMappings().values()) [ FD ]
Line_34 $$ indexService = indicesService.createIndex(nodeServicesProvider, indexMetaData, Collections.emptyList())-->Line_42 $$ boolean indexDirty = refreshIndexMapping(indexService, builder)[ FD ]
Line_32 $$ IndexService indexService = indicesService.indexService(index)-->Line_33 $$ if (indexService == null) [ FD ]
Line_32 $$ IndexService indexService = indicesService.indexService(index)-->Line_42 $$ boolean indexDirty = refreshIndexMapping(indexService, builder)[ FD ]
Line_40 $$ IndexMetaData.Builder builder = IndexMetaData.builder(indexMetaData)-->Line_42 $$ boolean indexDirty = refreshIndexMapping(indexService, builder)[ FD ]
Line_23 $$ hasTaskWithRightUUID = true-->Line_28 $$ if (hasTaskWithRightUUID == false) [ FD ]
Line_14 $$ IndexMetaData indexMetaData = mdBuilder.get(index)-->Line_34 $$ indexService = indicesService.createIndex(nodeServicesProvider, indexMetaData, Collections.emptyList())[ FD ]
Line_14 $$ IndexMetaData indexMetaData = mdBuilder.get(index)-->Line_40 $$ IndexMetaData.Builder builder = IndexMetaData.builder(indexMetaData)[ FD ]
Line_12 $$ for (Map.Entry<String, List<RefreshTask>> entry : tasksPerIndex.entrySet()) -->Line_13 $$ String index = entry.getKey()[ FD ]
Line_43 $$ if (indexDirty) -->Line_45 $$ dirty = true[ CD ]
Line_2 $$ ClusterState executeRefresh(final ClusterState currentState, final List<RefreshTask> allTasks) throws Exception -->Line_3 $$ Map<String, List<RefreshTask>> tasksPerIndex = new HashMap()[ CD ]
Line_3 $$ Map<String, List<RefreshTask>> tasksPerIndex = new HashMap()-->Line_12 $$ for (Map.Entry<String, List<RefreshTask>> entry : tasksPerIndex.entrySet()) [ FD ]
Line_10 $$ boolean dirty = false-->Line_53 $$ if (!dirty) [ FD ]
Line_31 $$ boolean removeIndex = false-->Line_35 $$ removeIndex = true[ FD ]
Line_11 $$ MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())-->Line_14 $$ IndexMetaData indexMetaData = mdBuilder.get(index)[ FD ]
Line_14 $$ IndexMetaData indexMetaData = mdBuilder.get(index)-->Line_22 $$ if (indexMetaData.isSameUUID(task.indexUUID)) [ FD ]
Line_13 $$ String index = entry.getKey()-->Line_32 $$ IndexService indexService = indicesService.indexService(index)[ FD ]
Line_13 $$ String index = entry.getKey()-->Line_14 $$ IndexMetaData indexMetaData = mdBuilder.get(index)[ FD ]
Line_34 $$ indexService = indicesService.createIndex(nodeServicesProvider, indexMetaData, Collections.emptyList())-->Line_37 $$ indexService.mapperService().merge(metaData.value.type(), metaData.value.source(), false, true)[ FD ]
Line_11 $$ MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())-->Line_44 $$ mdBuilder.put(builder)[ FD ]
Line_10 $$ boolean dirty = false-->Line_45 $$ dirty = true[ FD ]
Line_4 $$ for (RefreshTask task : allTasks) -->Line_6 $$ logger.debug("ignoring a mapping task of type [[ FD ]
Line_3 $$ Map<String, List<RefreshTask>> tasksPerIndex = new HashMap()-->Line_8 $$ tasksPerIndex.computeIfAbsent(task.index,  k -> new ArrayList()).add(task)[ FD ]
Line_32 $$ IndexService indexService = indicesService.indexService(index)-->Line_37 $$ indexService.mapperService().merge(metaData.value.type(), metaData.value.source(), false, true)[ FD ]
Line_11 $$ MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())-->Line_56 $$ return ClusterState.builder(currentState).metaData(mdBuilder).build()[ FD ]
Line_45 $$ dirty = true-->Line_53 $$ if (!dirty) [ FD ]
Line_13 $$ String index = entry.getKey()-->Line_16 $$ logger.debug("[[ FD ]
Line_22 $$ if (indexMetaData.isSameUUID(task.indexUUID)) -->Line_23 $$ hasTaskWithRightUUID = true[ CD ]
Line_43 $$ if (indexDirty) -->Line_44 $$ mdBuilder.put(builder)[ CD ]
Line_13 $$ String index = entry.getKey()-->Line_25 $$ logger.debug("[[ FD ]
Line_20 $$ boolean hasTaskWithRightUUID = false-->Line_28 $$ if (hasTaskWithRightUUID == false) [ FD ]
Line_53 $$ if (!dirty) -->Line_54 $$ return currentState[ CD ]
Line_2 $$ ClusterState executeRefresh(final ClusterState currentState, final List<RefreshTask> allTasks) throws Exception -->Line_56 $$ return ClusterState.builder(currentState).metaData(mdBuilder).build()[ CD ]
Line_2 $$ ClusterState executeRefresh(final ClusterState currentState, final List<RefreshTask> allTasks) throws Exception -->Line_53 $$ if (!dirty) [ CD ]
Line_5 $$ if (task.index == null) -->Line_6 $$ logger.debug("ignoring a mapping task of type [[ CD ]
Line_2 $$ ClusterState executeRefresh(final ClusterState currentState, final List<RefreshTask> allTasks) throws Exception -->Line_11 $$ MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())[ FD ]
Line_48 $$ if (removeIndex) -->Line_49 $$ indicesService.removeIndex(index, "created for mapping processing")[ CD ]
Line_2 $$ ClusterState executeRefresh(final ClusterState currentState, final List<RefreshTask> allTasks) throws Exception -->Line_10 $$ boolean dirty = false[ CD ]
Line_33 $$ if (indexService == null) -->Line_34 $$ indexService = indicesService.createIndex(nodeServicesProvider, indexMetaData, Collections.emptyList())[ CD ]
Line_15 $$ if (indexMetaData == null) -->Line_16 $$ logger.debug("[[ CD ]
Line_2 $$ ClusterState executeRefresh(final ClusterState currentState, final List<RefreshTask> allTasks) throws Exception -->Line_11 $$ MetaData.Builder mdBuilder = MetaData.builder(currentState.metaData())[ CD ]
Line_20 $$ boolean hasTaskWithRightUUID = false-->Line_23 $$ hasTaskWithRightUUID = true[ FD ]
