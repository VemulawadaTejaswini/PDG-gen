Line_2 $$ public static void createRemoteOutboundConnection(final ModelControllerClient modelControllerClient, final String connectionName, final String outboundSocketRef, final Map<String, String> connectionCreationOptions, final CallbackHandler callbackHandler) -->Line_37 $$ execute(modelControllerClient, op)[ FD ]
Line_4 $$ final ModelNode addRemoteOutboundConnection = new ModelNode()-->Line_19 $$ addRemoteOutboundConnection.get("outbound-socket-binding-ref").set(outboundSocketRef)[ FD ]
Line_30 $$ ModelNode propertyOp = new ModelNode()-->Line_31 $$ propertyOp.get(OP).set(ADD)[ FD ]
Line_4 $$ final ModelNode addRemoteOutboundConnection = new ModelNode()-->Line_20 $$ addRemoteOutboundConnection.get(SECURITY_REALM).set("PasswordRealm")[ FD ]
Line_23 $$ final ModelNode op = Util.getEmptyOperation(COMPOSITE, new ModelNode())-->Line_24 $$ final ModelNode steps = op.get(STEPS)[ FD ]
Line_8 $$ final ModelNode addPasswordRealm = new ModelNode()-->Line_9 $$ addPasswordRealm.get(OP).set(ADD)[ FD ]
Line_4 $$ final ModelNode addRemoteOutboundConnection = new ModelNode()-->Line_5 $$ addRemoteOutboundConnection.get(OP).set(ADD)[ FD ]
Line_2 $$ public static void createRemoteOutboundConnection(final ModelControllerClient modelControllerClient, final String connectionName, final String outboundSocketRef, final Map<String, String> connectionCreationOptions, final CallbackHandler callbackHandler) -->Line_19 $$ addRemoteOutboundConnection.get("outbound-socket-binding-ref").set(outboundSocketRef)[ FD ]
Line_6 $$ final PathAddress address = PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, RemotingExtension.SUBSYSTEM_NAME), PathElement.pathElement("remote-outbound-connection", connectionName))-->Line_7 $$ addRemoteOutboundConnection.get(OP_ADDR).set(address.toModelNode())[ FD ]
Line_14 $$ final ModelNode addServerIdentity = new ModelNode()-->Line_17 $$ addServerIdentity.get(OP_ADDR).set(secretAddress)[ FD ]
Line_24 $$ final ModelNode steps = op.get(STEPS)-->Line_25 $$ steps.add(addPasswordRealm)[ FD ]
Line_8 $$ final ModelNode addPasswordRealm = new ModelNode()-->Line_13 $$ addPasswordRealm.get(OP_ADDR).set(realmAddress)[ FD ]
Line_16 $$ ModelNode secretAddress = realmAddress.clone().add(SERVER_IDENTITY, SECRET)-->Line_17 $$ addServerIdentity.get(OP_ADDR).set(secretAddress)[ FD ]
Line_2 $$ public static void createRemoteOutboundConnection(final ModelControllerClient modelControllerClient, final String connectionName, final String outboundSocketRef, final Map<String, String> connectionCreationOptions, final CallbackHandler callbackHandler) -->Line_6 $$ final PathAddress address = PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, RemotingExtension.SUBSYSTEM_NAME), PathElement.pathElement("remote-outbound-connection", connectionName))[ FD ]
Line_10 $$ ModelNode realmAddress = new ModelNode()-->Line_13 $$ addPasswordRealm.get(OP_ADDR).set(realmAddress)[ FD ]
Line_4 $$ final ModelNode addRemoteOutboundConnection = new ModelNode()-->Line_27 $$ steps.add(addRemoteOutboundConnection)[ FD ]
Line_2 $$ public static void createRemoteOutboundConnection(final ModelControllerClient modelControllerClient, final String connectionName, final String outboundSocketRef, final Map<String, String> connectionCreationOptions, final CallbackHandler callbackHandler) -->Line_28 $$ if (!connectionCreationOptions.isEmpty()) [ FD ]
Line_30 $$ ModelNode propertyOp = new ModelNode()-->Line_32 $$ propertyOp.get(OP_ADDR).set(address.toModelNode()).add("property", property.getKey())[ FD ]
Line_30 $$ ModelNode propertyOp = new ModelNode()-->Line_34 $$ steps.add(propertyOp)[ FD ]
Line_24 $$ final ModelNode steps = op.get(STEPS)-->Line_27 $$ steps.add(addRemoteOutboundConnection)[ FD ]
Line_14 $$ final ModelNode addServerIdentity = new ModelNode()-->Line_15 $$ addServerIdentity.get(OP).set(ADD)[ FD ]
Line_24 $$ final ModelNode steps = op.get(STEPS)-->Line_34 $$ steps.add(propertyOp)[ FD ]
Line_30 $$ ModelNode propertyOp = new ModelNode()-->Line_33 $$ propertyOp.get("value").set(property.getValue())[ FD ]
Line_4 $$ final ModelNode addRemoteOutboundConnection = new ModelNode()-->Line_7 $$ addRemoteOutboundConnection.get(OP_ADDR).set(address.toModelNode())[ FD ]
Line_4 $$ final ModelNode addRemoteOutboundConnection = new ModelNode()-->Line_22 $$ addRemoteOutboundConnection.get("protocol").set("http-remoting")[ FD ]
Line_10 $$ ModelNode realmAddress = new ModelNode()-->Line_16 $$ ModelNode secretAddress = realmAddress.clone().add(SERVER_IDENTITY, SECRET)[ FD ]
Line_14 $$ final ModelNode addServerIdentity = new ModelNode()-->Line_18 $$ addServerIdentity.get(VALUE).set("cGFzc3dvcmQx")[ FD ]
Line_6 $$ final PathAddress address = PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, RemotingExtension.SUBSYSTEM_NAME), PathElement.pathElement("remote-outbound-connection", connectionName))-->Line_32 $$ propertyOp.get(OP_ADDR).set(address.toModelNode()).add("property", property.getKey())[ FD ]
Line_4 $$ final ModelNode addRemoteOutboundConnection = new ModelNode()-->Line_21 $$ addRemoteOutboundConnection.get("username").set("user1")[ FD ]
Line_14 $$ final ModelNode addServerIdentity = new ModelNode()-->Line_26 $$ steps.add(addServerIdentity)[ FD ]
Line_24 $$ final ModelNode steps = op.get(STEPS)-->Line_26 $$ steps.add(addServerIdentity)[ FD ]
Line_2 $$ public static void createRemoteOutboundConnection(final ModelControllerClient modelControllerClient, final String connectionName, final String outboundSocketRef, final Map<String, String> connectionCreationOptions, final CallbackHandler callbackHandler) -->Line_29 $$ for (Map.Entry<String, String> property : connectionCreationOptions.entrySet()) [ FD ]
Line_29 $$ for (Map.Entry<String, String> property : connectionCreationOptions.entrySet()) -->Line_33 $$ propertyOp.get("value").set(property.getValue())[ FD ]
Line_10 $$ ModelNode realmAddress = new ModelNode()-->Line_12 $$ realmAddress.add(SECURITY_REALM, "PasswordRealm")[ FD ]
Line_29 $$ for (Map.Entry<String, String> property : connectionCreationOptions.entrySet()) -->Line_32 $$ propertyOp.get(OP_ADDR).set(address.toModelNode()).add("property", property.getKey())[ FD ]
Line_10 $$ ModelNode realmAddress = new ModelNode()-->Line_11 $$ realmAddress.add(CORE_SERVICE, MANAGEMENT)[ FD ]
Line_8 $$ final ModelNode addPasswordRealm = new ModelNode()-->Line_25 $$ steps.add(addPasswordRealm)[ FD ]
Line_23 $$ final ModelNode op = Util.getEmptyOperation(COMPOSITE, new ModelNode())-->Line_37 $$ execute(modelControllerClient, op)[ FD ]
