Line_2 $$ private static void applyAdditionalInfoImpl(final Project project, TransparentlyFailedValueI<Map<String, Map<String, CharSequence>>, PatchSyntaxException> additionalInfo, CommitContext commitContext, final Consumer<InfoGroup> worker) -->Line_3 $$ final PatchEP[] extensions = Extensions.getExtensions(PatchEP.EP_NAME, project)[ CD ]
Line_8 $$ final Map<String, Map<String, CharSequence>> map = additionalInfo.get()-->Line_9 $$ for (Map.Entry<String, Map<String, CharSequence>> entry : map.entrySet()) [ FD ]
Line_11 $$ final Map<String, CharSequence> innerMap = entry.getValue()-->Line_13 $$ final CharSequence charSequence = innerMap.get(extension.getName())[ FD ]
Line_9 $$ for (Map.Entry<String, Map<String, CharSequence>> entry : map.entrySet()) -->Line_11 $$ final Map<String, CharSequence> innerMap = entry.getValue()[ FD ]
Line_2 $$ private static void applyAdditionalInfoImpl(final Project project, TransparentlyFailedValueI<Map<String, Map<String, CharSequence>>, PatchSyntaxException> additionalInfo, CommitContext commitContext, final Consumer<InfoGroup> worker) -->Line_20 $$ VcsBalloonProblemNotifier.showOverChangesView(project, "Can not apply additional patch info: " + e.getMessage(), MessageType.ERROR)[ FD ]
Line_14 $$ if (charSequence != null) -->Line_15 $$ worker.consume(new InfoGroup(extension, path, charSequence, commitContext))[ CD ]
Line_9 $$ for (Map.Entry<String, Map<String, CharSequence>> entry : map.entrySet()) -->Line_10 $$ final String path = entry.getKey()[ FD ]
Line_4 $$ if (extensions.length == 0)-->Line_5 $$ return[ CD ]
Line_2 $$ private static void applyAdditionalInfoImpl(final Project project, TransparentlyFailedValueI<Map<String, Map<String, CharSequence>>, PatchSyntaxException> additionalInfo, CommitContext commitContext, final Consumer<InfoGroup> worker) -->Line_4 $$ if (extensions.length == 0)[ CD ]
Line_13 $$ final CharSequence charSequence = innerMap.get(extension.getName())-->Line_14 $$ if (charSequence != null) [ FD ]
Line_2 $$ private static void applyAdditionalInfoImpl(final Project project, TransparentlyFailedValueI<Map<String, Map<String, CharSequence>>, PatchSyntaxException> additionalInfo, CommitContext commitContext, final Consumer<InfoGroup> worker) -->Line_15 $$ worker.consume(new InfoGroup(extension, path, charSequence, commitContext))[ FD ]
Line_2 $$ private static void applyAdditionalInfoImpl(final Project project, TransparentlyFailedValueI<Map<String, Map<String, CharSequence>>, PatchSyntaxException> additionalInfo, CommitContext commitContext, final Consumer<InfoGroup> worker) -->Line_8 $$ final Map<String, Map<String, CharSequence>> map = additionalInfo.get()[ FD ]
Line_2 $$ private static void applyAdditionalInfoImpl(final Project project, TransparentlyFailedValueI<Map<String, Map<String, CharSequence>>, PatchSyntaxException> additionalInfo, CommitContext commitContext, final Consumer<InfoGroup> worker) -->Line_6 $$ if (additionalInfo != null) [ FD ]
Line_2 $$ private static void applyAdditionalInfoImpl(final Project project, TransparentlyFailedValueI<Map<String, Map<String, CharSequence>>, PatchSyntaxException> additionalInfo, CommitContext commitContext, final Consumer<InfoGroup> worker) -->Line_3 $$ final PatchEP[] extensions = Extensions.getExtensions(PatchEP.EP_NAME, project)[ FD ]
Line_2 $$ private static void applyAdditionalInfoImpl(final Project project, TransparentlyFailedValueI<Map<String, Map<String, CharSequence>>, PatchSyntaxException> additionalInfo, CommitContext commitContext, final Consumer<InfoGroup> worker) -->Line_6 $$ if (additionalInfo != null) [ CD ]
Line_12 $$ for (PatchEP extension : extensions) -->Line_13 $$ final CharSequence charSequence = innerMap.get(extension.getName())[ FD ]
