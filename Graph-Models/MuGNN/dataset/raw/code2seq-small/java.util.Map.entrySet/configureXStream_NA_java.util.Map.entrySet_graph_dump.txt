Line_17 $$ if (this.mode != null) -->Line_18 $$ xstream.setMode(this.mode)[ CD ]
Line_2 $$ protected void configureXStream(XStream xstream) -->Line_83 $$ if (this.implicitCollections != null) [ CD ]
Line_14 $$ if (this.marshallingStrategy != null) -->Line_15 $$ xstream.setMarshallingStrategy(this.marshallingStrategy)[ CD ]
Line_36 $$ String field = entry.getKey()-->Line_41 $$ String fieldName = field.substring(idx + 1)[ FD ]
Line_2 $$ protected void configureXStream(XStream xstream) -->Line_6 $$ xstream.registerConverter((Converter) this.converters[i], i)[ FD ]
Line_23 $$ for (Map.Entry<String, Class<?>> entry : classMap.entrySet()) -->Line_24 $$ xstream.alias(entry.getKey(), entry.getValue())[ FD ]
Line_23 $$ for (Map.Entry<String, Class<?>> entry : classMap.entrySet()) -->Line_35 $$ String alias = entry.getValue()[ FD ]
Line_5 $$ if (this.converters[i] instanceof Converter) -->Line_6 $$ xstream.registerConverter((Converter) this.converters[i], i)[ CD ]
Line_2 $$ protected void configureXStream(XStream xstream) -->Line_99 $$ if (this.annotatedClasses != null) [ CD ]
Line_38 $$ if (idx != -1) -->Line_41 $$ String fieldName = field.substring(idx + 1)[ CD ]
Line_23 $$ for (Map.Entry<String, Class<?>> entry : classMap.entrySet()) -->Line_59 $$ if (entry.getValue() instanceof Class) [ FD ]
Line_2 $$ protected void configureXStream(XStream xstream) -->Line_53 $$ xstream.useAttributeFor(type)[ FD ]
Line_65 $$ Class<?> key = (Class<?>) entry.getKey()-->Line_72 $$ xstream.useAttributeFor(key, (String) element)[ FD ]
Line_22 $$ Map<String, Class<?>> classMap = toClassMap(this.aliases)-->Line_29 $$ for (Map.Entry<String, Class<?>> entry : classMap.entrySet()) [ FD ]
Line_71 $$ if (element instanceof String) -->Line_72 $$ xstream.useAttributeFor(key, (String) element)[ CD ]
Line_36 $$ String field = entry.getKey()-->Line_37 $$ int idx = field.lastIndexOf('.')[ FD ]
Line_2 $$ protected void configureXStream(XStream xstream) -->Line_72 $$ xstream.useAttributeFor(key, (String) element)[ FD ]
Line_2 $$ protected void configureXStream(XStream xstream) -->Line_24 $$ xstream.alias(entry.getKey(), entry.getValue())[ FD ]
Line_99 $$ if (this.annotatedClasses != null) -->Line_100 $$ xstream.processAnnotations(this.annotatedClasses)[ CD ]
Line_2 $$ protected void configureXStream(XStream xstream) -->Line_42 $$ xstream.aliasField(alias, clazz, fieldName)[ FD ]
Line_23 $$ for (Map.Entry<String, Class<?>> entry : classMap.entrySet()) -->Line_65 $$ Class<?> key = (Class<?>) entry.getKey()[ FD ]
Line_2 $$ protected void configureXStream(XStream xstream) -->Line_8 $$ xstream.registerConverter((SingleValueConverter) this.converters[i], i)[ FD ]
Line_5 $$ if (this.converters[i] instanceof Converter) -->Line_7 $$ if (this.converters[i] instanceof SingleValueConverter) [ CD ]
Line_23 $$ for (Map.Entry<String, Class<?>> entry : classMap.entrySet()) -->Line_93 $$ String[] fields = StringUtils.commaDelimitedListToStringArray(entry.getValue())[ FD ]
Line_59 $$ if (entry.getValue() instanceof Class) -->Line_60 $$ xstream.useAttributeFor((String) entry.getKey(), (Class<?>) entry.getValue())[ CD ]
Line_21 $$ if (this.aliases != null) -->Line_22 $$ Map<String, Class<?>> classMap = toClassMap(this.aliases)[ CD ]
Line_23 $$ for (Map.Entry<String, Class<?>> entry : classMap.entrySet()) -->Line_69 $$ List<Object> listValue = (List<Object>) entry.getValue()[ FD ]
Line_65 $$ Class<?> key = (Class<?>) entry.getKey()-->Line_67 $$ xstream.useAttributeFor(key, (String) entry.getValue())[ FD ]
Line_23 $$ for (Map.Entry<String, Class<?>> entry : classMap.entrySet()) -->Line_68 $$ if (entry.getValue() instanceof List) [ FD ]
Line_23 $$ for (Map.Entry<String, Class<?>> entry : classMap.entrySet()) -->Line_60 $$ xstream.useAttributeFor((String) entry.getKey(), (Class<?>) entry.getValue())[ FD ]
Line_64 $$ if (entry.getKey() instanceof Class) -->Line_66 $$ if (entry.getValue() instanceof String) [ CD ]
Line_68 $$ if (entry.getValue() instanceof List) -->Line_69 $$ List<Object> listValue = (List<Object>) entry.getValue()[ CD ]
Line_22 $$ Map<String, Class<?>> classMap = toClassMap(this.aliases)-->Line_23 $$ for (Map.Entry<String, Class<?>> entry : classMap.entrySet()) [ FD ]
Line_3 $$ if (this.converters != null) -->Line_4 $$ for (int i = 0; i < this.converters.length; i++) [ CD ]
Line_38 $$ if (idx != -1) -->Line_40 $$ Class<?> clazz = ClassUtils.forName(className, this.beanClassLoader)[ CD ]
Line_64 $$ if (entry.getKey() instanceof Class) -->Line_65 $$ Class<?> key = (Class<?>) entry.getKey()[ CD ]
Line_102 $$ if (this.autodetectAnnotations) -->Line_103 $$ xstream.autodetectAnnotations(true)[ CD ]
Line_36 $$ String field = entry.getKey()-->Line_39 $$ String className = field.substring(0, idx)[ FD ]
Line_27 $$ if (this.aliasesByType != null) -->Line_28 $$ Map<String, Class<?>> classMap = toClassMap(this.aliasesByType)[ CD ]
Line_2 $$ protected void configureXStream(XStream xstream) -->Line_56 $$ if (this.useAttributeFor != null) [ CD ]
Line_2 $$ protected void configureXStream(XStream xstream) -->Line_103 $$ xstream.autodetectAnnotations(true)[ FD ]
Line_70 $$ for (Object element : listValue) -->Line_71 $$ if (element instanceof String) [ FD ]
Line_2 $$ protected void configureXStream(XStream xstream) -->Line_102 $$ if (this.autodetectAnnotations) [ CD ]
Line_2 $$ protected void configureXStream(XStream xstream) -->Line_87 $$ xstream.addImplicitCollection(entry.getKey(), collectionField)[ FD ]
Line_35 $$ String alias = entry.getValue()-->Line_42 $$ xstream.aliasField(alias, clazz, fieldName)[ FD ]
Line_58 $$ if (entry.getKey() instanceof String) -->Line_59 $$ if (entry.getValue() instanceof Class) [ CD ]
Line_37 $$ int idx = field.lastIndexOf('.')-->Line_39 $$ String className = field.substring(0, idx)[ FD ]
Line_2 $$ protected void configureXStream(XStream xstream) -->Line_51 $$ if (this.useAttributeForTypes != null) [ CD ]
Line_23 $$ for (Map.Entry<String, Class<?>> entry : classMap.entrySet()) -->Line_67 $$ xstream.useAttributeFor(key, (String) entry.getValue())[ FD ]
Line_40 $$ Class<?> clazz = ClassUtils.forName(className, this.beanClassLoader)-->Line_42 $$ xstream.aliasField(alias, clazz, fieldName)[ FD ]
Line_36 $$ String field = entry.getKey()-->Line_95 $$ xstream.omitField(entry.getKey(), field)[ FD ]
Line_23 $$ for (Map.Entry<String, Class<?>> entry : classMap.entrySet()) -->Line_36 $$ String field = entry.getKey()[ FD ]
Line_66 $$ if (entry.getValue() instanceof String) -->Line_68 $$ if (entry.getValue() instanceof List) [ CD ]
Line_23 $$ for (Map.Entry<String, Class<?>> entry : classMap.entrySet()) -->Line_95 $$ xstream.omitField(entry.getKey(), field)[ FD ]
Line_2 $$ protected void configureXStream(XStream xstream) -->Line_30 $$ xstream.aliasType(entry.getKey(), entry.getValue())[ FD ]
Line_2 $$ protected void configureXStream(XStream xstream) -->Line_15 $$ xstream.setMarshallingStrategy(this.marshallingStrategy)[ FD ]
Line_23 $$ for (Map.Entry<String, Class<?>> entry : classMap.entrySet()) -->Line_58 $$ if (entry.getKey() instanceof String) [ FD ]
Line_38 $$ if (idx != -1) -->Line_39 $$ String className = field.substring(0, idx)[ CD ]
Line_4 $$ for (int i = 0; i < this.converters.length; i++) -->Line_5 $$ if (this.converters[i] instanceof Converter) [ CD ]
Line_66 $$ if (entry.getValue() instanceof String) -->Line_67 $$ xstream.useAttributeFor(key, (String) entry.getValue())[ CD ]
Line_23 $$ for (Map.Entry<String, Class<?>> entry : classMap.entrySet()) -->Line_87 $$ xstream.addImplicitCollection(entry.getKey(), collectionField)[ FD ]
Line_2 $$ protected void configureXStream(XStream xstream) -->Line_91 $$ if (this.omittedFields != null) [ CD ]
Line_86 $$ for (String collectionField : collectionFields) -->Line_87 $$ xstream.addImplicitCollection(entry.getKey(), collectionField)[ FD ]
Line_7 $$ if (this.converters[i] instanceof SingleValueConverter) -->Line_8 $$ xstream.registerConverter((SingleValueConverter) this.converters[i], i)[ CD ]
Line_2 $$ protected void configureXStream(XStream xstream) -->Line_18 $$ xstream.setMode(this.mode)[ FD ]
Line_2 $$ protected void configureXStream(XStream xstream) -->Line_17 $$ if (this.mode != null) [ CD ]
Line_2 $$ protected void configureXStream(XStream xstream) -->Line_67 $$ xstream.useAttributeFor(key, (String) entry.getValue())[ FD ]
Line_23 $$ for (Map.Entry<String, Class<?>> entry : classMap.entrySet()) -->Line_66 $$ if (entry.getValue() instanceof String) [ FD ]
Line_4 $$ for (int i = 0; i < this.converters.length; i++) -->Line_6 $$ xstream.registerConverter((Converter) this.converters[i], i)[ FD ]
Line_58 $$ if (entry.getKey() instanceof String) -->Line_64 $$ if (entry.getKey() instanceof Class) [ CD ]
Line_39 $$ String className = field.substring(0, idx)-->Line_40 $$ Class<?> clazz = ClassUtils.forName(className, this.beanClassLoader)[ FD ]
Line_23 $$ for (Map.Entry<String, Class<?>> entry : classMap.entrySet()) -->Line_30 $$ xstream.aliasType(entry.getKey(), entry.getValue())[ FD ]
Line_2 $$ protected void configureXStream(XStream xstream) -->Line_60 $$ xstream.useAttributeFor((String) entry.getKey(), (Class<?>) entry.getValue())[ FD ]
Line_52 $$ for (Class<?> type : this.useAttributeForTypes) -->Line_53 $$ xstream.useAttributeFor(type)[ FD ]
Line_38 $$ if (idx != -1) -->Line_42 $$ xstream.aliasField(alias, clazz, fieldName)[ CD ]
Line_2 $$ protected void configureXStream(XStream xstream) -->Line_14 $$ if (this.marshallingStrategy != null) [ CD ]
Line_2 $$ protected void configureXStream(XStream xstream) -->Line_100 $$ xstream.processAnnotations(this.annotatedClasses)[ FD ]
Line_2 $$ protected void configureXStream(XStream xstream) -->Line_3 $$ if (this.converters != null) [ CD ]
Line_23 $$ for (Map.Entry<String, Class<?>> entry : classMap.entrySet()) -->Line_85 $$ String[] collectionFields = StringUtils.commaDelimitedListToStringArray(entry.getValue())[ FD ]
Line_4 $$ for (int i = 0; i < this.converters.length; i++) -->Line_8 $$ xstream.registerConverter((SingleValueConverter) this.converters[i], i)[ FD ]
Line_41 $$ String fieldName = field.substring(idx + 1)-->Line_42 $$ xstream.aliasField(alias, clazz, fieldName)[ FD ]
Line_2 $$ protected void configureXStream(XStream xstream) -->Line_95 $$ xstream.omitField(entry.getKey(), field)[ FD ]
Line_37 $$ int idx = field.lastIndexOf('.')-->Line_38 $$ if (idx != -1) [ FD ]
Line_23 $$ for (Map.Entry<String, Class<?>> entry : classMap.entrySet()) -->Line_64 $$ if (entry.getKey() instanceof Class) [ FD ]
