Line_27 $$ if (!errors.isEmpty()) -->Line_28 $$ URI relativePath = projectDirUri.relativize(file.toURI())[ CD ]
Line_2 $$ public void doJsHint() -->Line_16 $$ Logger logger = getLogger()[ CD ]
Line_23 $$ if (data.containsKey("errors")) -->Line_27 $$ if (!errors.isEmpty()) [ CD ]
Line_4 $$ LogLevel logLevel = getProject().getGradle().getStartParameter().getLogLevel()-->Line_5 $$ RhinoWorkerHandle<JsHintResult, JsHintSpec> rhinoHandle = handleFactory.create(getRhinoClasspath(), createWorkerSpec(), logLevel, new Action<JavaExecSpec>() [ FD ]
Line_2 $$ public void doJsHint() -->Line_15 $$ setDidWork(true)[ CD ]
Line_2 $$ public void doJsHint() -->Line_4 $$ LogLevel logLevel = getProject().getGradle().getStartParameter().getLogLevel()[ CD ]
Line_5 $$ RhinoWorkerHandle<JsHintResult, JsHintSpec> rhinoHandle = handleFactory.create(getRhinoClasspath(), createWorkerSpec(), logLevel, new Action<JavaExecSpec>() -->Line_7 $$ javaExecSpec.setWorkingDir(getProject().getProjectDir())[ CD ]
Line_2 $$ public void doJsHint() -->Line_50 $$ if (anyErrors) [ CD ]
Line_2 $$ public void doJsHint() -->Line_14 $$ JsHintResult result = rhinoHandle.process(spec)[ CD ]
Line_5 $$ RhinoWorkerHandle<JsHintResult, JsHintSpec> rhinoHandle = handleFactory.create(getRhinoClasspath(), createWorkerSpec(), logLevel, new Action<JavaExecSpec>() -->Line_14 $$ JsHintResult result = rhinoHandle.process(spec)[ FD ]
Line_3 $$ RhinoWorkerHandleFactory handleFactory = new DefaultRhinoWorkerHandleFactory(getWorkerProcessBuilderFactory())-->Line_5 $$ RhinoWorkerHandle<JsHintResult, JsHintSpec> rhinoHandle = handleFactory.create(getRhinoClasspath(), createWorkerSpec(), logLevel, new Action<JavaExecSpec>() [ FD ]
Line_2 $$ public void doJsHint() -->Line_12 $$ spec.setEncoding(getEncoding())[ CD ]
Line_2 $$ public void doJsHint() -->Line_41 $$ if (jsonReportFile != null) [ CD ]
Line_2 $$ public void doJsHint() -->Line_11 $$ spec.setSource(getSource().getFiles())[ CD ]
Line_23 $$ if (data.containsKey("errors")) -->Line_25 $$ URI projectDirUri = getProject().getProjectDir().toURI()[ CD ]
Line_2 $$ public void doJsHint() -->Line_40 $$ File jsonReportFile = getJsonReport()[ CD ]
Line_2 $$ public void doJsHint() -->Line_13 $$ spec.setJsHint(getJsHint().getSingleFile())[ CD ]
Line_2 $$ public void doJsHint() -->Line_3 $$ RhinoWorkerHandleFactory handleFactory = new DefaultRhinoWorkerHandleFactory(getWorkerProcessBuilderFactory())[ CD ]
Line_5 $$ RhinoWorkerHandle<JsHintResult, JsHintSpec> rhinoHandle = handleFactory.create(getRhinoClasspath(), createWorkerSpec(), logLevel, new Action<JavaExecSpec>() -->Line_7 $$ javaExecSpec.setWorkingDir(getProject().getProjectDir())[ FD ]
Line_27 $$ if (!errors.isEmpty()) -->Line_29 $$ logger.warn("JsHint errors for file: [ CD ]
Line_2 $$ public void doJsHint() -->Line_5 $$ RhinoWorkerHandle<JsHintResult, JsHintSpec> rhinoHandle = handleFactory.create(getRhinoClasspath(), createWorkerSpec(), logLevel, new Action<JavaExecSpec>() [ CD ]
