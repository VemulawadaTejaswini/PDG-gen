Line_3 $$ StreamingHistogram hist = new StreamingHistogram(5)-->Line_24 $$ hist.merge(hist2)[ FD ]
Line_25 $$ Map<Double, Long> expected2 = new LinkedHashMap<Double, Long>(5)-->Line_31 $$ expectedItr = expected2.entrySet().iterator()[ FD ]
Line_2 $$ public void testFunction() throws Exception -->Line_28 $$ expected2.put(19.33, 3L)[ CD ]
Line_3 $$ StreamingHistogram hist = new StreamingHistogram(5)-->Line_37 $$ assertEquals(3.28, hist.sum(15), 0.01)[ FD ]
Line_15 $$ for (Map.Entry<Double, Long> actual : hist.getAsMap().entrySet()) -->Line_18 $$ assertEquals(entry.getValue(), actual.getValue())[ FD ]
Line_14 $$ Iterator<Map.Entry<Double, Long>> expectedItr = expected1.entrySet().iterator()-->Line_33 $$ Map.Entry<Double, Long> entry = expectedItr.next()[ FD ]
Line_2 $$ public void testFunction() throws Exception -->Line_29 $$ expected2.put(32.67, 3L)[ CD ]
Line_2 $$ public void testFunction() throws Exception -->Line_37 $$ assertEquals(3.28, hist.sum(15), 0.01)[ CD ]
Line_2 $$ public void testFunction() throws Exception -->Line_11 $$ expected1.put(17.5, 2L)[ CD ]
Line_16 $$ Map.Entry<Double, Long> entry = expectedItr.next()-->Line_34 $$ assertEquals(entry.getKey(), actual.getKey(), 0.01)[ FD ]
Line_5 $$ for (int i = 0; i < 7; i++) -->Line_6 $$ hist.update(samples[i])[ CD ]
Line_2 $$ public void testFunction() throws Exception -->Line_25 $$ Map<Double, Long> expected2 = new LinkedHashMap<Double, Long>(5)[ CD ]
Line_8 $$ Map<Double, Long> expected1 = new LinkedHashMap<Double, Long>(5)-->Line_10 $$ expected1.put(9.5, 2L)[ FD ]
Line_8 $$ Map<Double, Long> expected1 = new LinkedHashMap<Double, Long>(5)-->Line_13 $$ expected1.put(36.0, 1L)[ FD ]
Line_14 $$ Iterator<Map.Entry<Double, Long>> expectedItr = expected1.entrySet().iterator()-->Line_16 $$ Map.Entry<Double, Long> entry = expectedItr.next()[ FD ]
Line_2 $$ public void testFunction() throws Exception -->Line_24 $$ hist.merge(hist2)[ CD ]
Line_25 $$ Map<Double, Long> expected2 = new LinkedHashMap<Double, Long>(5)-->Line_29 $$ expected2.put(32.67, 3L)[ FD ]
Line_2 $$ public void testFunction() throws Exception -->Line_27 $$ expected2.put(9.5, 2L)[ CD ]
Line_2 $$ public void testFunction() throws Exception -->Line_3 $$ StreamingHistogram hist = new StreamingHistogram(5)[ CD ]
Line_8 $$ Map<Double, Long> expected1 = new LinkedHashMap<Double, Long>(5)-->Line_11 $$ expected1.put(17.5, 2L)[ FD ]
Line_25 $$ Map<Double, Long> expected2 = new LinkedHashMap<Double, Long>(5)-->Line_26 $$ expected2.put(2.0, 1L)[ FD ]
Line_8 $$ Map<Double, Long> expected1 = new LinkedHashMap<Double, Long>(5)-->Line_9 $$ expected1.put(2.0, 1L)[ FD ]
Line_15 $$ for (Map.Entry<Double, Long> actual : hist.getAsMap().entrySet()) -->Line_34 $$ assertEquals(entry.getKey(), actual.getKey(), 0.01)[ FD ]
Line_21 $$ for (int i = 7; i < samples.length; i++) -->Line_22 $$ hist2.update(samples[i])[ CD ]
Line_8 $$ Map<Double, Long> expected1 = new LinkedHashMap<Double, Long>(5)-->Line_14 $$ Iterator<Map.Entry<Double, Long>> expectedItr = expected1.entrySet().iterator()[ FD ]
Line_2 $$ public void testFunction() throws Exception -->Line_4 $$ long[] samples = new long[] [ CD ]
Line_2 $$ public void testFunction() throws Exception -->Line_10 $$ expected1.put(9.5, 2L)[ CD ]
Line_20 $$ StreamingHistogram hist2 = new StreamingHistogram(3)-->Line_24 $$ hist.merge(hist2)[ FD ]
Line_3 $$ StreamingHistogram hist = new StreamingHistogram(5)-->Line_6 $$ hist.update(samples[i])[ FD ]
Line_16 $$ Map.Entry<Double, Long> entry = expectedItr.next()-->Line_35 $$ assertEquals(entry.getValue(), actual.getValue())[ FD ]
Line_2 $$ public void testFunction() throws Exception -->Line_26 $$ expected2.put(2.0, 1L)[ CD ]
Line_31 $$ expectedItr = expected2.entrySet().iterator()-->Line_33 $$ Map.Entry<Double, Long> entry = expectedItr.next()[ FD ]
Line_3 $$ StreamingHistogram hist = new StreamingHistogram(5)-->Line_15 $$ for (Map.Entry<Double, Long> actual : hist.getAsMap().entrySet()) [ FD ]
Line_15 $$ for (Map.Entry<Double, Long> actual : hist.getAsMap().entrySet()) -->Line_17 $$ assertEquals(entry.getKey(), actual.getKey(), 0.01)[ FD ]
Line_16 $$ Map.Entry<Double, Long> entry = expectedItr.next()-->Line_17 $$ assertEquals(entry.getKey(), actual.getKey(), 0.01)[ FD ]
Line_3 $$ StreamingHistogram hist = new StreamingHistogram(5)-->Line_32 $$ for (Map.Entry<Double, Long> actual : hist.getAsMap().entrySet()) [ FD ]
Line_2 $$ public void testFunction() throws Exception -->Line_31 $$ expectedItr = expected2.entrySet().iterator()[ CD ]
Line_3 $$ StreamingHistogram hist = new StreamingHistogram(5)-->Line_38 $$ assertEquals(10.0, hist.sum(50), 0.01)[ FD ]
Line_2 $$ public void testFunction() throws Exception -->Line_8 $$ Map<Double, Long> expected1 = new LinkedHashMap<Double, Long>(5)[ CD ]
Line_2 $$ public void testFunction() throws Exception -->Line_9 $$ expected1.put(2.0, 1L)[ CD ]
Line_2 $$ public void testFunction() throws Exception -->Line_30 $$ expected2.put(45.0, 1L)[ CD ]
Line_2 $$ public void testFunction() throws Exception -->Line_14 $$ Iterator<Map.Entry<Double, Long>> expectedItr = expected1.entrySet().iterator()[ CD ]
Line_8 $$ Map<Double, Long> expected1 = new LinkedHashMap<Double, Long>(5)-->Line_12 $$ expected1.put(23.0, 1L)[ FD ]
Line_15 $$ for (Map.Entry<Double, Long> actual : hist.getAsMap().entrySet()) -->Line_35 $$ assertEquals(entry.getValue(), actual.getValue())[ FD ]
Line_2 $$ public void testFunction() throws Exception -->Line_21 $$ for (int i = 7; i < samples.length; i++) [ CD ]
Line_16 $$ Map.Entry<Double, Long> entry = expectedItr.next()-->Line_18 $$ assertEquals(entry.getValue(), actual.getValue())[ FD ]
Line_25 $$ Map<Double, Long> expected2 = new LinkedHashMap<Double, Long>(5)-->Line_30 $$ expected2.put(45.0, 1L)[ FD ]
Line_2 $$ public void testFunction() throws Exception -->Line_38 $$ assertEquals(10.0, hist.sum(50), 0.01)[ CD ]
Line_14 $$ Iterator<Map.Entry<Double, Long>> expectedItr = expected1.entrySet().iterator()-->Line_31 $$ expectedItr = expected2.entrySet().iterator()[ FD ]
Line_2 $$ public void testFunction() throws Exception -->Line_20 $$ StreamingHistogram hist2 = new StreamingHistogram(3)[ CD ]
Line_5 $$ for (int i = 0; i < 7; i++) -->Line_21 $$ for (int i = 7; i < samples.length; i++) [ FD ]
Line_2 $$ public void testFunction() throws Exception -->Line_12 $$ expected1.put(23.0, 1L)[ CD ]
Line_25 $$ Map<Double, Long> expected2 = new LinkedHashMap<Double, Long>(5)-->Line_28 $$ expected2.put(19.33, 3L)[ FD ]
Line_2 $$ public void testFunction() throws Exception -->Line_13 $$ expected1.put(36.0, 1L)[ CD ]
Line_20 $$ StreamingHistogram hist2 = new StreamingHistogram(3)-->Line_22 $$ hist2.update(samples[i])[ FD ]
Line_25 $$ Map<Double, Long> expected2 = new LinkedHashMap<Double, Long>(5)-->Line_27 $$ expected2.put(9.5, 2L)[ FD ]
Line_2 $$ public void testFunction() throws Exception -->Line_5 $$ for (int i = 0; i < 7; i++) [ CD ]
