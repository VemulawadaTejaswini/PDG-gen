Line_12 $$ if (print) -->Line_13 $$ System.out.format("Size %d(%d)   \tunit %s  token %s   %s\n", t.unitCount(), size, mms(unitStat), mms(tokenStat), t.strategy)[ CD ]
Line_2 $$ private void updateSummary(ReplicationAwareTokenAllocator<Unit> t, Summary su, Summary st, boolean print) -->Line_5 $$ Map<Unit, Double> ownership = evaluateReplicatedOwnership(t)[ CD ]
Line_2 $$ private void updateSummary(ReplicationAwareTokenAllocator<Unit> t, Summary su, Summary st, boolean print) -->Line_8 $$ su.update(unitStat)[ FD ]
Line_5 $$ Map<Unit, Double> ownership = evaluateReplicatedOwnership(t)-->Line_7 $$ for (Map.Entry<Unit, Double> en : ownership.entrySet()) unitStat.addValue(en.getValue() * inverseAverage / t.unitToTokens.get(en.getKey()).size())[ FD ]
Line_6 $$ SummaryStatistics unitStat = new SummaryStatistics()-->Line_13 $$ System.out.format("Size %d(%d)   \tunit %s  token %s   %s\n", t.unitCount(), size, mms(unitStat), mms(tokenStat), t.strategy)[ FD ]
Line_3 $$ int size = t.sortedTokens.size()-->Line_13 $$ System.out.format("Size %d(%d)   \tunit %s  token %s   %s\n", t.unitCount(), size, mms(unitStat), mms(tokenStat), t.strategy)[ FD ]
Line_2 $$ private void updateSummary(ReplicationAwareTokenAllocator<Unit> t, Summary su, Summary st, boolean print) -->Line_6 $$ SummaryStatistics unitStat = new SummaryStatistics()[ CD ]
Line_2 $$ private void updateSummary(ReplicationAwareTokenAllocator<Unit> t, Summary su, Summary st, boolean print) -->Line_11 $$ st.update(tokenStat)[ FD ]
Line_6 $$ SummaryStatistics unitStat = new SummaryStatistics()-->Line_8 $$ su.update(unitStat)[ FD ]
Line_9 $$ SummaryStatistics tokenStat = new SummaryStatistics()-->Line_10 $$ tokenStat.addValue(replicatedTokenOwnership(tok, t.sortedTokens, t.strategy) * inverseAverage)[ FD ]
Line_2 $$ private void updateSummary(ReplicationAwareTokenAllocator<Unit> t, Summary su, Summary st, boolean print) -->Line_4 $$ double inverseAverage = 1.0 * size / t.strategy.replicas()[ CD ]
Line_2 $$ private void updateSummary(ReplicationAwareTokenAllocator<Unit> t, Summary su, Summary st, boolean print) -->Line_11 $$ st.update(tokenStat)[ CD ]
Line_2 $$ private void updateSummary(ReplicationAwareTokenAllocator<Unit> t, Summary su, Summary st, boolean print) -->Line_8 $$ su.update(unitStat)[ CD ]
Line_2 $$ private void updateSummary(ReplicationAwareTokenAllocator<Unit> t, Summary su, Summary st, boolean print) -->Line_13 $$ System.out.format("Size %d(%d)   \tunit %s  token %s   %s\n", t.unitCount(), size, mms(unitStat), mms(tokenStat), t.strategy)[ FD ]
Line_12 $$ if (print) -->Line_14 $$ System.out.format("Worst intermediate unit\t%s  token %s\n", su, st)[ CD ]
Line_2 $$ private void updateSummary(ReplicationAwareTokenAllocator<Unit> t, Summary su, Summary st, boolean print) -->Line_14 $$ System.out.format("Worst intermediate unit\t%s  token %s\n", su, st)[ FD ]
Line_9 $$ SummaryStatistics tokenStat = new SummaryStatistics()-->Line_11 $$ st.update(tokenStat)[ FD ]
Line_9 $$ SummaryStatistics tokenStat = new SummaryStatistics()-->Line_13 $$ System.out.format("Size %d(%d)   \tunit %s  token %s   %s\n", t.unitCount(), size, mms(unitStat), mms(tokenStat), t.strategy)[ FD ]
Line_2 $$ private void updateSummary(ReplicationAwareTokenAllocator<Unit> t, Summary su, Summary st, boolean print) -->Line_9 $$ SummaryStatistics tokenStat = new SummaryStatistics()[ CD ]
Line_6 $$ SummaryStatistics unitStat = new SummaryStatistics()-->Line_7 $$ unitStat.addValue(en.getValue() * inverseAverage / t.unitToTokens.get(en.getKey()).size())[ FD ]
Line_2 $$ private void updateSummary(ReplicationAwareTokenAllocator<Unit> t, Summary su, Summary st, boolean print) -->Line_5 $$ Map<Unit, Double> ownership = evaluateReplicatedOwnership(t)[ FD ]
Line_2 $$ private void updateSummary(ReplicationAwareTokenAllocator<Unit> t, Summary su, Summary st, boolean print) -->Line_3 $$ int size = t.sortedTokens.size()[ CD ]
Line_2 $$ private void updateSummary(ReplicationAwareTokenAllocator<Unit> t, Summary su, Summary st, boolean print) -->Line_12 $$ if (print) [ CD ]
