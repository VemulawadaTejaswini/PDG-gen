Line_12 $$ NoticeableFuture<Path> noticeableFuture = getFile(channel, remoteFilePath, entry.getValue(), deleteAfterFetch)-->Line_13 $$ noticeableFuture.addFutureListener(new BaseFutureListener<Path>() [ FD ]
Line_13 $$ noticeableFuture.addFutureListener(new BaseFutureListener<Path>() -->Line_15 $$ defaultNoticeableFuture.cancel(true)[ CD ]
Line_24 $$ if (counter.decrementAndGet() <= 0) -->Line_25 $$ defaultNoticeableFuture.set(resultPathMap)[ CD ]
Line_10 $$ for (Map.Entry<Path, Path> entry : pathMap.entrySet()) -->Line_12 $$ NoticeableFuture<Path> noticeableFuture = getFile(channel, remoteFilePath, entry.getValue(), deleteAfterFetch)[ FD ]
Line_13 $$ noticeableFuture.addFutureListener(new BaseFutureListener<Path>() -->Line_18 $$ defaultNoticeableFuture.setException(throwable)[ FD ]
Line_9 $$ final AtomicInteger counter = new AtomicInteger(pathMap.size())-->Line_24 $$ if (counter.decrementAndGet() <= 0) [ FD ]
Line_3 $$ final DefaultNoticeableFuture<Map<Path, Path>> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_15 $$ defaultNoticeableFuture.cancel(true)[ FD ]
Line_3 $$ final DefaultNoticeableFuture<Map<Path, Path>> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_5 $$ defaultNoticeableFuture.set(pathMap)[ FD ]
Line_2 $$ public NoticeableFuture<Map<Path, Path>> getFiles(Channel channel, Map<Path, Path> pathMap, boolean deleteAfterFetch) -->Line_4 $$ if (pathMap.isEmpty()) [ FD ]
Line_13 $$ noticeableFuture.addFutureListener(new BaseFutureListener<Path>() -->Line_21 $$ if (localFilePath != null) [ CD ]
Line_21 $$ if (localFilePath != null) -->Line_22 $$ resultPathMap.put(remoteFilePath, localFilePath)[ CD ]
Line_11 $$ final Path remoteFilePath = entry.getKey()-->Line_12 $$ NoticeableFuture<Path> noticeableFuture = getFile(channel, remoteFilePath, entry.getValue(), deleteAfterFetch)[ FD ]
Line_2 $$ public NoticeableFuture<Map<Path, Path>> getFiles(Channel channel, Map<Path, Path> pathMap, boolean deleteAfterFetch) -->Line_5 $$ defaultNoticeableFuture.set(pathMap)[ FD ]
Line_2 $$ public NoticeableFuture<Map<Path, Path>> getFiles(Channel channel, Map<Path, Path> pathMap, boolean deleteAfterFetch) -->Line_30 $$ return defaultNoticeableFuture[ CD ]
Line_3 $$ final DefaultNoticeableFuture<Map<Path, Path>> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_25 $$ defaultNoticeableFuture.set(resultPathMap)[ FD ]
Line_2 $$ public NoticeableFuture<Map<Path, Path>> getFiles(Channel channel, Map<Path, Path> pathMap, boolean deleteAfterFetch) -->Line_9 $$ final AtomicInteger counter = new AtomicInteger(pathMap.size())[ CD ]
Line_2 $$ public NoticeableFuture<Map<Path, Path>> getFiles(Channel channel, Map<Path, Path> pathMap, boolean deleteAfterFetch) -->Line_9 $$ final AtomicInteger counter = new AtomicInteger(pathMap.size())[ FD ]
Line_4 $$ if (pathMap.isEmpty()) -->Line_6 $$ return defaultNoticeableFuture[ CD ]
Line_13 $$ noticeableFuture.addFutureListener(new BaseFutureListener<Path>() -->Line_18 $$ defaultNoticeableFuture.setException(throwable)[ CD ]
Line_2 $$ public NoticeableFuture<Map<Path, Path>> getFiles(Channel channel, Map<Path, Path> pathMap, boolean deleteAfterFetch) -->Line_3 $$ final DefaultNoticeableFuture<Map<Path, Path>> defaultNoticeableFuture = new DefaultNoticeableFuture()[ CD ]
Line_2 $$ public NoticeableFuture<Map<Path, Path>> getFiles(Channel channel, Map<Path, Path> pathMap, boolean deleteAfterFetch) -->Line_10 $$ for (Map.Entry<Path, Path> entry : pathMap.entrySet()) [ FD ]
Line_3 $$ final DefaultNoticeableFuture<Map<Path, Path>> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_18 $$ defaultNoticeableFuture.setException(throwable)[ FD ]
Line_13 $$ noticeableFuture.addFutureListener(new BaseFutureListener<Path>() -->Line_21 $$ if (localFilePath != null) [ FD ]
Line_8 $$ final Map<Path, Path> resultPathMap = new ConcurrentHashMap()-->Line_22 $$ resultPathMap.put(remoteFilePath, localFilePath)[ FD ]
Line_2 $$ public NoticeableFuture<Map<Path, Path>> getFiles(Channel channel, Map<Path, Path> pathMap, boolean deleteAfterFetch) -->Line_8 $$ final Map<Path, Path> resultPathMap = new ConcurrentHashMap()[ CD ]
Line_10 $$ for (Map.Entry<Path, Path> entry : pathMap.entrySet()) -->Line_11 $$ final Path remoteFilePath = entry.getKey()[ FD ]
Line_2 $$ public NoticeableFuture<Map<Path, Path>> getFiles(Channel channel, Map<Path, Path> pathMap, boolean deleteAfterFetch) -->Line_4 $$ if (pathMap.isEmpty()) [ CD ]
Line_8 $$ final Map<Path, Path> resultPathMap = new ConcurrentHashMap()-->Line_25 $$ defaultNoticeableFuture.set(resultPathMap)[ FD ]
Line_4 $$ if (pathMap.isEmpty()) -->Line_5 $$ defaultNoticeableFuture.set(pathMap)[ CD ]
Line_13 $$ noticeableFuture.addFutureListener(new BaseFutureListener<Path>() -->Line_22 $$ resultPathMap.put(remoteFilePath, localFilePath)[ FD ]
Line_2 $$ public NoticeableFuture<Map<Path, Path>> getFiles(Channel channel, Map<Path, Path> pathMap, boolean deleteAfterFetch) -->Line_12 $$ NoticeableFuture<Path> noticeableFuture = getFile(channel, remoteFilePath, entry.getValue(), deleteAfterFetch)[ FD ]
Line_13 $$ noticeableFuture.addFutureListener(new BaseFutureListener<Path>() -->Line_24 $$ if (counter.decrementAndGet() <= 0) [ CD ]
Line_11 $$ final Path remoteFilePath = entry.getKey()-->Line_22 $$ resultPathMap.put(remoteFilePath, localFilePath)[ FD ]
