Line_2 $$ public Set<Integer> convertToNodeIds(@NotNull Collection<CommitId> commitIds, boolean reportNotFound) -->Line_19 $$ if (commitIds.contains(entry.getValue()))[ FD ]
Line_7 $$ if (commitIds.contains(commitId)) -->Line_8 $$ result.add(i)[ CD ]
Line_18 $$ for (Map.Entry<Integer, CommitId> entry : myNotLoadCommits.entrySet()) -->Line_20 $$ result.add(entry.getKey())[ FD ]
Line_2 $$ public Set<Integer> convertToNodeIds(@NotNull Collection<CommitId> commitIds, boolean reportNotFound) -->Line_5 $$ for (int i = 0; i < myCommitIdIndexes.size(); i++) [ CD ]
Line_6 $$ CommitId commitId = myCommitIdIndexes.get(i)-->Line_9 $$ matchedIds.add(commitId)[ FD ]
Line_13 $$ Collection<CommitId> unmatchedIds = ContainerUtil.subtract(commitIds, matchedIds)-->Line_14 $$ if (!unmatchedIds.isEmpty()) [ FD ]
Line_12 $$ if (reportNotFound) -->Line_14 $$ if (!unmatchedIds.isEmpty()) [ CD ]
Line_2 $$ public Set<Integer> convertToNodeIds(@NotNull Collection<CommitId> commitIds, boolean reportNotFound) -->Line_22 $$ return result[ CD ]
Line_12 $$ if (reportNotFound) -->Line_13 $$ Collection<CommitId> unmatchedIds = ContainerUtil.subtract(commitIds, matchedIds)[ CD ]
Line_2 $$ public Set<Integer> convertToNodeIds(@NotNull Collection<CommitId> commitIds, boolean reportNotFound) -->Line_4 $$ Set<CommitId> matchedIds = ContainerUtil.newHashSet()[ CD ]
Line_4 $$ Set<CommitId> matchedIds = ContainerUtil.newHashSet()-->Line_13 $$ Collection<CommitId> unmatchedIds = ContainerUtil.subtract(commitIds, matchedIds)[ FD ]
Line_5 $$ for (int i = 0; i < myCommitIdIndexes.size(); i++) -->Line_6 $$ CommitId commitId = myCommitIdIndexes.get(i)[ FD ]
Line_2 $$ public Set<Integer> convertToNodeIds(@NotNull Collection<CommitId> commitIds, boolean reportNotFound) -->Line_12 $$ if (reportNotFound) [ CD ]
Line_6 $$ CommitId commitId = myCommitIdIndexes.get(i)-->Line_7 $$ if (commitIds.contains(commitId)) [ FD ]
Line_5 $$ for (int i = 0; i < myCommitIdIndexes.size(); i++) -->Line_8 $$ result.add(i)[ FD ]
Line_18 $$ for (Map.Entry<Integer, CommitId> entry : myNotLoadCommits.entrySet()) -->Line_19 $$ if (commitIds.contains(entry.getValue()))[ FD ]
Line_5 $$ for (int i = 0; i < myCommitIdIndexes.size(); i++) -->Line_6 $$ CommitId commitId = myCommitIdIndexes.get(i)[ CD ]
Line_4 $$ Set<CommitId> matchedIds = ContainerUtil.newHashSet()-->Line_9 $$ matchedIds.add(commitId)[ FD ]
Line_3 $$ Set<Integer> result = ContainerUtil.newHashSet()-->Line_20 $$ result.add(entry.getKey())[ FD ]
Line_7 $$ if (commitIds.contains(commitId)) -->Line_9 $$ matchedIds.add(commitId)[ CD ]
Line_19 $$ if (commitIds.contains(entry.getValue()))-->Line_20 $$ result.add(entry.getKey())[ CD ]
Line_3 $$ Set<Integer> result = ContainerUtil.newHashSet()-->Line_8 $$ result.add(i)[ FD ]
Line_14 $$ if (!unmatchedIds.isEmpty()) -->Line_15 $$ LOG.warn("Unmatched commit ids " + unmatchedIds)[ CD ]
Line_2 $$ public Set<Integer> convertToNodeIds(@NotNull Collection<CommitId> commitIds, boolean reportNotFound) -->Line_13 $$ Collection<CommitId> unmatchedIds = ContainerUtil.subtract(commitIds, matchedIds)[ FD ]
Line_2 $$ public Set<Integer> convertToNodeIds(@NotNull Collection<CommitId> commitIds, boolean reportNotFound) -->Line_3 $$ Set<Integer> result = ContainerUtil.newHashSet()[ CD ]
Line_5 $$ for (int i = 0; i < myCommitIdIndexes.size(); i++) -->Line_7 $$ if (commitIds.contains(commitId)) [ CD ]
Line_2 $$ public Set<Integer> convertToNodeIds(@NotNull Collection<CommitId> commitIds, boolean reportNotFound) -->Line_7 $$ if (commitIds.contains(commitId)) [ FD ]
