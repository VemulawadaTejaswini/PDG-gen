Line_12 $$ Statement limitedStatement = limiter.newProxy(statement, Statement.class, timeout.toMillis(), TimeUnit.MILLISECONDS)-->Line_18 $$ List<List<Object>> results = limiter.callWithTimeout(getResultSetConverter(limitedStatement.getResultSet()), timeout.toMillis() - stopwatch.elapsed(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS, true)[ FD ]
Line_11 $$ Stopwatch stopwatch = Stopwatch.createStarted()-->Line_18 $$ List<List<Object>> results = limiter.callWithTimeout(getResultSetConverter(limitedStatement.getResultSet()), timeout.toMillis() - stopwatch.elapsed(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS, true)[ FD ]
Line_3 $$ try (Connection connection = DriverManager.getConnection(url, username, password)) -->Line_6 $$ connection.unwrap(PrestoConnection.class).setSessionProperty(entry.getKey(), entry.getValue())[ FD ]
Line_3 $$ try (Connection connection = DriverManager.getConnection(url, username, password)) -->Line_9 $$ try (Statement statement = connection.createStatement()) [ FD ]
Line_2 $$ private QueryResult executeQuery(String url, String username, String password, Query query, String sql, Duration timeout, Map<String, String> sessionProperties) -->Line_17 $$ if (limitedStatement.execute(sql)) [ FD ]
Line_10 $$ TimeLimiter limiter = new SimpleTimeLimiter()-->Line_18 $$ List<List<Object>> results = limiter.callWithTimeout(getResultSetConverter(limitedStatement.getResultSet()), timeout.toMillis() - stopwatch.elapsed(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS, true)[ FD ]
Line_17 $$ if (limitedStatement.execute(sql)) -->Line_21 $$ return new QueryResult(State.SUCCESS, null, nanosSince(start), null)[ CD ]
Line_8 $$ long start = System.nanoTime()-->Line_19 $$ return new QueryResult(State.SUCCESS, null, nanosSince(start), results)[ FD ]
Line_5 $$ for (Map.Entry<String, String> entry : sessionProperties.entrySet()) -->Line_6 $$ connection.unwrap(PrestoConnection.class).setSessionProperty(entry.getKey(), entry.getValue())[ FD ]
Line_40 $$ Exception exception = e-->Line_42 $$ exception = (Exception) e.getCause()[ FD ]
Line_3 $$ try (Connection connection = DriverManager.getConnection(url, username, password)) -->Line_4 $$ trySetConnectionProperties(query, connection)[ FD ]
Line_2 $$ private QueryResult executeQuery(String url, String username, String password, Query query, String sql, Duration timeout, Map<String, String> sessionProperties) -->Line_18 $$ List<List<Object>> results = limiter.callWithTimeout(getResultSetConverter(limitedStatement.getResultSet()), timeout.toMillis() - stopwatch.elapsed(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS, true)[ FD ]
Line_2 $$ private QueryResult executeQuery(String url, String username, String password, Query query, String sql, Duration timeout, Map<String, String> sessionProperties) -->Line_14 $$ sql = "EXPLAIN " + sql[ FD ]
Line_2 $$ private QueryResult executeQuery(String url, String username, String password, Query query, String sql, Duration timeout, Map<String, String> sessionProperties) -->Line_5 $$ for (Map.Entry<String, String> entry : sessionProperties.entrySet()) [ FD ]
Line_17 $$ if (limitedStatement.execute(sql)) -->Line_19 $$ return new QueryResult(State.SUCCESS, null, nanosSince(start), results)[ CD ]
Line_10 $$ TimeLimiter limiter = new SimpleTimeLimiter()-->Line_12 $$ Statement limitedStatement = limiter.newProxy(statement, Statement.class, timeout.toMillis(), TimeUnit.MILLISECONDS)[ FD ]
Line_17 $$ if (limitedStatement.execute(sql)) -->Line_18 $$ List<List<Object>> results = limiter.callWithTimeout(getResultSetConverter(limitedStatement.getResultSet()), timeout.toMillis() - stopwatch.elapsed(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS, true)[ CD ]
Line_8 $$ long start = System.nanoTime()-->Line_21 $$ return new QueryResult(State.SUCCESS, null, nanosSince(start), null)[ FD ]
Line_41 $$ if (("Error executing query".equals(e.getMessage()) || "Error fetching results".equals(e.getMessage())) && (e.getCause() instanceof Exception)) -->Line_42 $$ exception = (Exception) e.getCause()[ CD ]
Line_24 $$ if (e.getMessage().startsWith("unimplemented type:")) -->Line_25 $$ return new QueryResult(State.INVALID, null, null, ImmutableList.<List<Object>>of())[ CD ]
Line_14 $$ sql = "EXPLAIN " + sql-->Line_17 $$ if (limitedStatement.execute(sql)) [ FD ]
Line_2 $$ private QueryResult executeQuery(String url, String username, String password, Query query, String sql, Duration timeout, Map<String, String> sessionProperties) -->Line_3 $$ try (Connection connection = DriverManager.getConnection(url, username, password)) [ FD ]
Line_2 $$ private QueryResult executeQuery(String url, String username, String password, Query query, String sql, Duration timeout, Map<String, String> sessionProperties) -->Line_12 $$ Statement limitedStatement = limiter.newProxy(statement, Statement.class, timeout.toMillis(), TimeUnit.MILLISECONDS)[ FD ]
Line_9 $$ try (Statement statement = connection.createStatement()) -->Line_12 $$ Statement limitedStatement = limiter.newProxy(statement, Statement.class, timeout.toMillis(), TimeUnit.MILLISECONDS)[ FD ]
Line_12 $$ Statement limitedStatement = limiter.newProxy(statement, Statement.class, timeout.toMillis(), TimeUnit.MILLISECONDS)-->Line_17 $$ if (limitedStatement.execute(sql)) [ FD ]
Line_13 $$ if (explainOnly) -->Line_14 $$ sql = "EXPLAIN " + sql[ CD ]
Line_2 $$ private QueryResult executeQuery(String url, String username, String password, Query query, String sql, Duration timeout, Map<String, String> sessionProperties) -->Line_4 $$ trySetConnectionProperties(query, connection)[ FD ]
