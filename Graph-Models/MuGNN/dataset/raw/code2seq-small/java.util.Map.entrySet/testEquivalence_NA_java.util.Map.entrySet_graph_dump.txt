Line_7 $$ List<InetAddress> actual = nts.calculateNaturalEndpoints(token, tokenMetadata)-->Line_12 $$ Assert.assertEquals("Endpoints for token " + token + " mismatch.", expected, actual)[ FD ]
Line_4 $$ for (int i = 0; i < 1000; ++i) -->Line_8 $$ if (endpointsDiffer(expected, actual)) [ CD ]
Line_2 $$ void testEquivalence(TokenMetadata tokenMetadata, IEndpointSnitch snitch, Map<String, Integer> datacenters, Random rand) -->Line_3 $$ NetworkTopologyStrategy nts = new NetworkTopologyStrategy("ks", tokenMetadata, snitch, datacenters.entrySet().stream().collect(Collectors.toMap( x -> x.getKey(),  x -> Integer.toString(x.getValue()))))[ FD ]
Line_2 $$ void testEquivalence(TokenMetadata tokenMetadata, IEndpointSnitch snitch, Map<String, Integer> datacenters, Random rand) -->Line_5 $$ Token token = Murmur3Partitioner.instance.getRandomToken(rand)[ FD ]
Line_2 $$ void testEquivalence(TokenMetadata tokenMetadata, IEndpointSnitch snitch, Map<String, Integer> datacenters, Random rand) -->Line_3 $$ NetworkTopologyStrategy nts = new NetworkTopologyStrategy("ks", tokenMetadata, snitch, datacenters.entrySet().stream().collect(Collectors.toMap( x -> x.getKey(),  x -> Integer.toString(x.getValue()))))[ CD ]
Line_8 $$ if (endpointsDiffer(expected, actual)) -->Line_12 $$ Assert.assertEquals("Endpoints for token " + token + " mismatch.", expected, actual)[ CD ]
Line_7 $$ List<InetAddress> actual = nts.calculateNaturalEndpoints(token, tokenMetadata)-->Line_8 $$ if (endpointsDiffer(expected, actual)) [ FD ]
Line_4 $$ for (int i = 0; i < 1000; ++i) -->Line_5 $$ Token token = Murmur3Partitioner.instance.getRandomToken(rand)[ CD ]
Line_4 $$ for (int i = 0; i < 1000; ++i) -->Line_7 $$ List<InetAddress> actual = nts.calculateNaturalEndpoints(token, tokenMetadata)[ CD ]
Line_8 $$ if (endpointsDiffer(expected, actual)) -->Line_9 $$ System.err.println("Endpoints mismatch for token " + token)[ CD ]
Line_8 $$ if (endpointsDiffer(expected, actual)) -->Line_10 $$ System.err.println(" expected: " + expected)[ CD ]
Line_6 $$ List<InetAddress> expected = calculateNaturalEndpoints(token, tokenMetadata, datacenters, snitch)-->Line_8 $$ if (endpointsDiffer(expected, actual)) [ FD ]
Line_5 $$ Token token = Murmur3Partitioner.instance.getRandomToken(rand)-->Line_7 $$ List<InetAddress> actual = nts.calculateNaturalEndpoints(token, tokenMetadata)[ FD ]
Line_8 $$ if (endpointsDiffer(expected, actual)) -->Line_11 $$ System.err.println(" actual  : " + actual)[ CD ]
Line_6 $$ List<InetAddress> expected = calculateNaturalEndpoints(token, tokenMetadata, datacenters, snitch)-->Line_12 $$ Assert.assertEquals("Endpoints for token " + token + " mismatch.", expected, actual)[ FD ]
Line_2 $$ void testEquivalence(TokenMetadata tokenMetadata, IEndpointSnitch snitch, Map<String, Integer> datacenters, Random rand) -->Line_4 $$ for (int i = 0; i < 1000; ++i) [ CD ]
Line_4 $$ for (int i = 0; i < 1000; ++i) -->Line_6 $$ List<InetAddress> expected = calculateNaturalEndpoints(token, tokenMetadata, datacenters, snitch)[ CD ]
Line_5 $$ Token token = Murmur3Partitioner.instance.getRandomToken(rand)-->Line_6 $$ List<InetAddress> expected = calculateNaturalEndpoints(token, tokenMetadata, datacenters, snitch)[ FD ]
Line_2 $$ void testEquivalence(TokenMetadata tokenMetadata, IEndpointSnitch snitch, Map<String, Integer> datacenters, Random rand) -->Line_7 $$ List<InetAddress> actual = nts.calculateNaturalEndpoints(token, tokenMetadata)[ FD ]
Line_2 $$ void testEquivalence(TokenMetadata tokenMetadata, IEndpointSnitch snitch, Map<String, Integer> datacenters, Random rand) -->Line_6 $$ List<InetAddress> expected = calculateNaturalEndpoints(token, tokenMetadata, datacenters, snitch)[ FD ]
Line_3 $$ NetworkTopologyStrategy nts = new NetworkTopologyStrategy("ks", tokenMetadata, snitch, datacenters.entrySet().stream().collect(Collectors.toMap( x -> x.getKey(),  x -> Integer.toString(x.getValue()))))-->Line_7 $$ List<InetAddress> actual = nts.calculateNaturalEndpoints(token, tokenMetadata)[ FD ]
