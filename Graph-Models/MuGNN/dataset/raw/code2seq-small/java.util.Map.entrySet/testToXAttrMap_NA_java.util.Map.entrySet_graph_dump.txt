Line_15 $$ Entry<String, byte[]> entry = iter.next()-->Line_16 $$ Assert.assertArrayEquals(entry.getValue(), parsedXAttrMap.get(entry.getKey()))[ FD ]
Line_2 $$ public void testToXAttrMap() throws IOException -->Line_9 $$ xAttrs.add(xAttr2)[ CD ]
Line_13 $$ Iterator<Entry<String, byte[]>> iter = xAttrMap.entrySet().iterator()-->Line_15 $$ Entry<String, byte[]> entry = iter.next()[ FD ]
Line_10 $$ Map<String, byte[]> xAttrMap = XAttrHelper.buildXAttrMap(xAttrs)-->Line_12 $$ Assert.assertEquals(xAttrMap.size(), parsedXAttrMap.size())[ FD ]
Line_2 $$ public void testToXAttrMap() throws IOException -->Line_5 $$ XAttr xAttr1 = (new XAttr.Builder()).setNameSpace(XAttr.NameSpace.USER).setName("a1").setValue(XAttrCodec.decodeValue("0x313233")).build()[ CD ]
Line_2 $$ public void testToXAttrMap() throws IOException -->Line_8 $$ xAttrs.add(xAttr1)[ CD ]
Line_7 $$ List<XAttr> xAttrs = Lists.newArrayList()-->Line_9 $$ xAttrs.add(xAttr2)[ FD ]
Line_2 $$ public void testToXAttrMap() throws IOException -->Line_12 $$ Assert.assertEquals(xAttrMap.size(), parsedXAttrMap.size())[ CD ]
Line_4 $$ Map<?, ?> json = (Map<?, ?>) JSON.parse(jsonString)-->Line_11 $$ Map<String, byte[]> parsedXAttrMap = JsonUtil.toXAttrs(json)[ FD ]
Line_11 $$ Map<String, byte[]> parsedXAttrMap = JsonUtil.toXAttrs(json)-->Line_12 $$ Assert.assertEquals(xAttrMap.size(), parsedXAttrMap.size())[ FD ]
Line_2 $$ public void testToXAttrMap() throws IOException -->Line_14 $$ while (iter.hasNext()) [ CD ]
Line_2 $$ public void testToXAttrMap() throws IOException -->Line_3 $$ String jsonString = "[ CD ]
Line_2 $$ public void testToXAttrMap() throws IOException -->Line_4 $$ Map<?, ?> json = (Map<?, ?>) JSON.parse(jsonString)[ CD ]
Line_2 $$ public void testToXAttrMap() throws IOException -->Line_10 $$ Map<String, byte[]> xAttrMap = XAttrHelper.buildXAttrMap(xAttrs)[ CD ]
Line_10 $$ Map<String, byte[]> xAttrMap = XAttrHelper.buildXAttrMap(xAttrs)-->Line_13 $$ Iterator<Entry<String, byte[]>> iter = xAttrMap.entrySet().iterator()[ FD ]
Line_14 $$ while (iter.hasNext()) -->Line_15 $$ Entry<String, byte[]> entry = iter.next()[ CD ]
Line_13 $$ Iterator<Entry<String, byte[]>> iter = xAttrMap.entrySet().iterator()-->Line_14 $$ while (iter.hasNext()) [ FD ]
Line_7 $$ List<XAttr> xAttrs = Lists.newArrayList()-->Line_10 $$ Map<String, byte[]> xAttrMap = XAttrHelper.buildXAttrMap(xAttrs)[ FD ]
Line_11 $$ Map<String, byte[]> parsedXAttrMap = JsonUtil.toXAttrs(json)-->Line_16 $$ Assert.assertArrayEquals(entry.getValue(), parsedXAttrMap.get(entry.getKey()))[ FD ]
Line_2 $$ public void testToXAttrMap() throws IOException -->Line_13 $$ Iterator<Entry<String, byte[]>> iter = xAttrMap.entrySet().iterator()[ CD ]
Line_2 $$ public void testToXAttrMap() throws IOException -->Line_7 $$ List<XAttr> xAttrs = Lists.newArrayList()[ CD ]
Line_7 $$ List<XAttr> xAttrs = Lists.newArrayList()-->Line_8 $$ xAttrs.add(xAttr1)[ FD ]
Line_6 $$ XAttr xAttr2 = (new XAttr.Builder()).setNameSpace(XAttr.NameSpace.USER).setName("a2").setValue(XAttrCodec.decodeValue("0x313131")).build()-->Line_9 $$ xAttrs.add(xAttr2)[ FD ]
Line_14 $$ while (iter.hasNext()) -->Line_16 $$ Assert.assertArrayEquals(entry.getValue(), parsedXAttrMap.get(entry.getKey()))[ CD ]
Line_5 $$ XAttr xAttr1 = (new XAttr.Builder()).setNameSpace(XAttr.NameSpace.USER).setName("a1").setValue(XAttrCodec.decodeValue("0x313233")).build()-->Line_8 $$ xAttrs.add(xAttr1)[ FD ]
Line_3 $$ String jsonString = "-->Line_4 $$ Map<?, ?> json = (Map<?, ?>) JSON.parse(jsonString)[ FD ]
Line_2 $$ public void testToXAttrMap() throws IOException -->Line_11 $$ Map<String, byte[]> parsedXAttrMap = JsonUtil.toXAttrs(json)[ CD ]
Line_2 $$ public void testToXAttrMap() throws IOException -->Line_6 $$ XAttr xAttr2 = (new XAttr.Builder()).setNameSpace(XAttr.NameSpace.USER).setName("a2").setValue(XAttrCodec.decodeValue("0x313131")).build()[ CD ]
