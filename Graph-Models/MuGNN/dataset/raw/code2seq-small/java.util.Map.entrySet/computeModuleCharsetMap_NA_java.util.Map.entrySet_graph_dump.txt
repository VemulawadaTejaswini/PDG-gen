Line_3 $$ final Map<JpsModule, Set<String>> map = new THashMap<JpsModule, Set<String>>()-->Line_18 $$ map.put(module, set)[ FD ]
Line_8 $$ File file = JpsPathUtil.urlToFile(fileUrl)-->Line_11 $$ final JavaSourceRootDescriptor rootDescriptor = myRootsIndex.findJavaRootDescriptor(null, file)[ FD ]
Line_24 $$ if (currentCharset != null) -->Line_25 $$ parentCharset = currentCharset[ CD ]
Line_20 $$ File current = FileUtilRt.getParentFile(file)-->Line_23 $$ final String currentCharset = myUrlToCharset.get(FileUtil.toSystemIndependentName(current.getAbsolutePath()))[ FD ]
Line_16 $$ if (set == null) -->Line_32 $$ if (parentCharset != null) [ CD ]
Line_20 $$ File current = FileUtilRt.getParentFile(file)-->Line_30 $$ current = FileUtilRt.getParentFile(current)[ FD ]
Line_25 $$ parentCharset = currentCharset-->Line_32 $$ if (parentCharset != null) [ FD ]
Line_15 $$ Set<String> set = map.get(module)-->Line_33 $$ set.add(parentCharset)[ FD ]
Line_15 $$ Set<String> set = map.get(module)-->Line_17 $$ set = new LinkedHashSet<String>()[ FD ]
Line_6 $$ final String fileUrl = entry.getKey()-->Line_8 $$ File file = JpsPathUtil.urlToFile(fileUrl)[ FD ]
Line_14 $$ final JpsModule module = rootDescriptor.target.getModule()-->Line_15 $$ Set<String> set = map.get(module)[ FD ]
Line_15 $$ Set<String> set = map.get(module)-->Line_18 $$ map.put(module, set)[ FD ]
Line_22 $$ while (current != null) -->Line_27 $$ if (FileUtil.filesEqual(current, sourceRoot)) [ CD ]
Line_21 $$ String parentCharset = null-->Line_32 $$ if (parentCharset != null) [ FD ]
Line_30 $$ current = FileUtilRt.getParentFile(current)-->Line_23 $$ final String currentCharset = myUrlToCharset.get(FileUtil.toSystemIndependentName(current.getAbsolutePath()))[ FD ]
Line_2 $$ private Map<JpsModule, Set<String>> computeModuleCharsetMap() -->Line_3 $$ final Map<JpsModule, Set<String>> map = new THashMap<JpsModule, Set<String>>()[ CD ]
Line_20 $$ File current = FileUtilRt.getParentFile(file)-->Line_22 $$ while (current != null) [ FD ]
Line_30 $$ current = FileUtilRt.getParentFile(current)-->Line_27 $$ if (FileUtil.filesEqual(current, sourceRoot)) [ FD ]
Line_23 $$ final String currentCharset = myUrlToCharset.get(FileUtil.toSystemIndependentName(current.getAbsolutePath()))-->Line_24 $$ if (currentCharset != null) [ FD ]
Line_4 $$ final Iterable<JavaBuilderExtension> builderExtensions = JpsServiceManager.getInstance().getExtensions(JavaBuilderExtension.class)-->Line_9 $$ if (charset == null || (!file.isDirectory() && !shouldHonorEncodingForCompilation(builderExtensions, file)))[ FD ]
Line_3 $$ final Map<JpsModule, Set<String>> map = new THashMap<JpsModule, Set<String>>()-->Line_15 $$ Set<String> set = map.get(module)[ FD ]
Line_8 $$ File file = JpsPathUtil.urlToFile(fileUrl)-->Line_9 $$ if (charset == null || (!file.isDirectory() && !shouldHonorEncodingForCompilation(builderExtensions, file)))[ FD ]
Line_2 $$ private Map<JpsModule, Set<String>> computeModuleCharsetMap() -->Line_38 $$ return map[ CD ]
Line_22 $$ while (current != null) -->Line_24 $$ if (currentCharset != null) [ CD ]
Line_16 $$ if (set == null) -->Line_19 $$ final File sourceRoot = rootDescriptor.root[ CD ]
Line_16 $$ if (set == null) -->Line_21 $$ String parentCharset = null[ CD ]
Line_16 $$ if (set == null) -->Line_17 $$ set = new LinkedHashSet<String>()[ CD ]
Line_15 $$ Set<String> set = map.get(module)-->Line_16 $$ if (set == null) [ FD ]
Line_5 $$ for (Map.Entry<String, String> entry : myUrlToCharset.entrySet()) -->Line_6 $$ final String fileUrl = entry.getKey()[ FD ]
Line_15 $$ Set<String> set = map.get(module)-->Line_36 $$ set.add(charset)[ FD ]
Line_30 $$ current = FileUtilRt.getParentFile(current)-->Line_22 $$ while (current != null) [ FD ]
Line_14 $$ final JpsModule module = rootDescriptor.target.getModule()-->Line_18 $$ map.put(module, set)[ FD ]
Line_25 $$ parentCharset = currentCharset-->Line_33 $$ set.add(parentCharset)[ FD ]
Line_22 $$ while (current != null) -->Line_23 $$ final String currentCharset = myUrlToCharset.get(FileUtil.toSystemIndependentName(current.getAbsolutePath()))[ CD ]
Line_17 $$ set = new LinkedHashSet<String>()-->Line_36 $$ set.add(charset)[ FD ]
Line_16 $$ if (set == null) -->Line_20 $$ File current = FileUtilRt.getParentFile(file)[ CD ]
Line_20 $$ File current = FileUtilRt.getParentFile(file)-->Line_27 $$ if (FileUtil.filesEqual(current, sourceRoot)) [ FD ]
Line_8 $$ File file = JpsPathUtil.urlToFile(fileUrl)-->Line_20 $$ File current = FileUtilRt.getParentFile(file)[ FD ]
Line_16 $$ if (set == null) -->Line_18 $$ map.put(module, set)[ CD ]
Line_32 $$ if (parentCharset != null) -->Line_33 $$ set.add(parentCharset)[ CD ]
Line_22 $$ while (current != null) -->Line_30 $$ current = FileUtilRt.getParentFile(current)[ CD ]
Line_17 $$ set = new LinkedHashSet<String>()-->Line_18 $$ map.put(module, set)[ FD ]
Line_16 $$ if (set == null) -->Line_22 $$ while (current != null) [ CD ]
Line_11 $$ final JavaSourceRootDescriptor rootDescriptor = myRootsIndex.findJavaRootDescriptor(null, file)-->Line_12 $$ if (rootDescriptor == null)[ FD ]
Line_7 $$ final String charset = entry.getValue()-->Line_36 $$ set.add(charset)[ FD ]
Line_21 $$ String parentCharset = null-->Line_33 $$ set.add(parentCharset)[ FD ]
Line_19 $$ final File sourceRoot = rootDescriptor.root-->Line_27 $$ if (FileUtil.filesEqual(current, sourceRoot)) [ FD ]
Line_21 $$ String parentCharset = null-->Line_25 $$ parentCharset = currentCharset[ FD ]
Line_5 $$ for (Map.Entry<String, String> entry : myUrlToCharset.entrySet()) -->Line_7 $$ final String charset = entry.getValue()[ FD ]
Line_23 $$ final String currentCharset = myUrlToCharset.get(FileUtil.toSystemIndependentName(current.getAbsolutePath()))-->Line_25 $$ parentCharset = currentCharset[ FD ]
Line_17 $$ set = new LinkedHashSet<String>()-->Line_33 $$ set.add(parentCharset)[ FD ]
Line_2 $$ private Map<JpsModule, Set<String>> computeModuleCharsetMap() -->Line_4 $$ final Iterable<JavaBuilderExtension> builderExtensions = JpsServiceManager.getInstance().getExtensions(JavaBuilderExtension.class)[ CD ]
