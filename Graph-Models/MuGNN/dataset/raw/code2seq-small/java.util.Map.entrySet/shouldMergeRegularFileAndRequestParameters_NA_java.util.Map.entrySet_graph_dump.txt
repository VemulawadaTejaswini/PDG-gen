Line_11 $$ List<String> parameterNamesList = Collections.list(parameterNames)-->Line_13 $$ Assert.assertTrue(parameterNamesList.contains(entry.getKey()))[ FD ]
Line_9 $$ UploadServletRequestImpl uploadServletRequest = new UploadServletRequestImpl((HttpServletRequest) liferayServletRequest.getRequest(), fileParameters, regularParameters)-->Line_10 $$ Enumeration<String> parameterNames = uploadServletRequest.getParameterNames()[ FD ]
Line_6 $$ String parameter = RandomTestUtil.randomString()-->Line_8 $$ mockHttpServletRequest.addParameter(parameter, parameter)[ FD ]
Line_4 $$ Map<String, List<String>> regularParameters = PortletContainerTestUtil.getRegularParameters(10)-->Line_12 $$ for (Map.Entry<String, List<String>> entry : regularParameters.entrySet()) [ FD ]
Line_2 $$ public void shouldMergeRegularFileAndRequestParameters() throws Exception -->Line_6 $$ String parameter = RandomTestUtil.randomString()[ CD ]
Line_5 $$ LiferayServletRequest liferayServletRequest = PortletContainerTestUtil.getMultipartRequest(_fileNameParameter, _bytes)-->Line_7 $$ MockHttpServletRequest mockHttpServletRequest = (MockHttpServletRequest) liferayServletRequest.getRequest()[ FD ]
Line_10 $$ Enumeration<String> parameterNames = uploadServletRequest.getParameterNames()-->Line_11 $$ List<String> parameterNamesList = Collections.list(parameterNames)[ FD ]
Line_6 $$ String parameter = RandomTestUtil.randomString()-->Line_18 $$ Assert.assertTrue(parameterNamesList.contains(parameter))[ FD ]
Line_5 $$ LiferayServletRequest liferayServletRequest = PortletContainerTestUtil.getMultipartRequest(_fileNameParameter, _bytes)-->Line_9 $$ UploadServletRequestImpl uploadServletRequest = new UploadServletRequestImpl((HttpServletRequest) liferayServletRequest.getRequest(), fileParameters, regularParameters)[ FD ]
Line_2 $$ public void shouldMergeRegularFileAndRequestParameters() throws Exception -->Line_3 $$ Map<String, FileItem[]> fileParameters = PortletContainerTestUtil.getFileParameters(10, _bytes)[ CD ]
Line_12 $$ for (Map.Entry<String, List<String>> entry : regularParameters.entrySet()) -->Line_16 $$ Assert.assertTrue(parameterNamesList.contains(entry.getKey()))[ FD ]
Line_2 $$ public void shouldMergeRegularFileAndRequestParameters() throws Exception -->Line_11 $$ List<String> parameterNamesList = Collections.list(parameterNames)[ CD ]
Line_3 $$ Map<String, FileItem[]> fileParameters = PortletContainerTestUtil.getFileParameters(10, _bytes)-->Line_15 $$ for (Map.Entry<String, FileItem[]> entry : fileParameters.entrySet()) [ FD ]
Line_11 $$ List<String> parameterNamesList = Collections.list(parameterNames)-->Line_16 $$ Assert.assertTrue(parameterNamesList.contains(entry.getKey()))[ FD ]
Line_2 $$ public void shouldMergeRegularFileAndRequestParameters() throws Exception -->Line_8 $$ mockHttpServletRequest.addParameter(parameter, parameter)[ CD ]
Line_2 $$ public void shouldMergeRegularFileAndRequestParameters() throws Exception -->Line_9 $$ UploadServletRequestImpl uploadServletRequest = new UploadServletRequestImpl((HttpServletRequest) liferayServletRequest.getRequest(), fileParameters, regularParameters)[ CD ]
Line_2 $$ public void shouldMergeRegularFileAndRequestParameters() throws Exception -->Line_5 $$ LiferayServletRequest liferayServletRequest = PortletContainerTestUtil.getMultipartRequest(_fileNameParameter, _bytes)[ CD ]
Line_2 $$ public void shouldMergeRegularFileAndRequestParameters() throws Exception -->Line_10 $$ Enumeration<String> parameterNames = uploadServletRequest.getParameterNames()[ CD ]
Line_7 $$ MockHttpServletRequest mockHttpServletRequest = (MockHttpServletRequest) liferayServletRequest.getRequest()-->Line_8 $$ mockHttpServletRequest.addParameter(parameter, parameter)[ FD ]
Line_12 $$ for (Map.Entry<String, List<String>> entry : regularParameters.entrySet()) -->Line_13 $$ Assert.assertTrue(parameterNamesList.contains(entry.getKey()))[ FD ]
Line_2 $$ public void shouldMergeRegularFileAndRequestParameters() throws Exception -->Line_4 $$ Map<String, List<String>> regularParameters = PortletContainerTestUtil.getRegularParameters(10)[ CD ]
Line_11 $$ List<String> parameterNamesList = Collections.list(parameterNames)-->Line_18 $$ Assert.assertTrue(parameterNamesList.contains(parameter))[ FD ]
Line_2 $$ public void shouldMergeRegularFileAndRequestParameters() throws Exception -->Line_7 $$ MockHttpServletRequest mockHttpServletRequest = (MockHttpServletRequest) liferayServletRequest.getRequest()[ CD ]
Line_2 $$ public void shouldMergeRegularFileAndRequestParameters() throws Exception -->Line_18 $$ Assert.assertTrue(parameterNamesList.contains(parameter))[ CD ]
