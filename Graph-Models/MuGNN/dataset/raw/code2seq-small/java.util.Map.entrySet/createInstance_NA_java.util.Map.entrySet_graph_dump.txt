Line_12 $$ Class<?> keyType = null-->Line_15 $$ keyType = GenericCollectionTypeResolver.getMapKeyType(this.targetMapClass)[ FD ]
Line_10 $$ result = new LinkedHashMap<Object, Object>(this.sourceMap.size())-->Line_23 $$ result.put(convertedKey, convertedValue)[ FD ]
Line_14 $$ if (this.targetMapClass != null) -->Line_16 $$ valueType = GenericCollectionTypeResolver.getMapValueType(this.targetMapClass)[ CD ]
Line_12 $$ Class<?> keyType = null-->Line_21 $$ Object convertedKey = converter.convertIfNecessary(entry.getKey(), keyType)[ FD ]
Line_8 $$ result = BeanUtils.instantiateClass(this.targetMapClass)-->Line_23 $$ result.put(convertedKey, convertedValue)[ FD ]
Line_2 $$ protected Map<Object, Object> createInstance() -->Line_28 $$ return result[ CD ]
Line_19 $$ TypeConverter converter = getBeanTypeConverter()-->Line_21 $$ Object convertedKey = converter.convertIfNecessary(entry.getKey(), keyType)[ FD ]
Line_2 $$ protected Map<Object, Object> createInstance() -->Line_12 $$ Class<?> keyType = null[ CD ]
Line_21 $$ Object convertedKey = converter.convertIfNecessary(entry.getKey(), keyType)-->Line_23 $$ result.put(convertedKey, convertedValue)[ FD ]
Line_6 $$ Map<Object, Object> result = null-->Line_10 $$ result = new LinkedHashMap<Object, Object>(this.sourceMap.size())[ FD ]
Line_14 $$ if (this.targetMapClass != null) -->Line_15 $$ keyType = GenericCollectionTypeResolver.getMapKeyType(this.targetMapClass)[ CD ]
Line_6 $$ Map<Object, Object> result = null-->Line_26 $$ result.putAll(this.sourceMap)[ FD ]
Line_20 $$ for (Map.Entry<?, ?> entry : this.sourceMap.entrySet()) -->Line_22 $$ Object convertedValue = converter.convertIfNecessary(entry.getValue(), valueType)[ FD ]
Line_2 $$ protected Map<Object, Object> createInstance() -->Line_14 $$ if (this.targetMapClass != null) [ CD ]
Line_7 $$ if (this.targetMapClass != null) -->Line_8 $$ result = BeanUtils.instantiateClass(this.targetMapClass)[ CD ]
Line_18 $$ if (keyType != null || valueType != null) -->Line_26 $$ result.putAll(this.sourceMap)[ CD ]
Line_2 $$ protected Map<Object, Object> createInstance() -->Line_6 $$ Map<Object, Object> result = null[ CD ]
Line_2 $$ protected Map<Object, Object> createInstance() -->Line_3 $$ if (this.sourceMap == null) [ CD ]
Line_7 $$ if (this.targetMapClass != null) -->Line_10 $$ result = new LinkedHashMap<Object, Object>(this.sourceMap.size())[ CD ]
Line_13 $$ Class<?> valueType = null-->Line_22 $$ Object convertedValue = converter.convertIfNecessary(entry.getValue(), valueType)[ FD ]
Line_6 $$ Map<Object, Object> result = null-->Line_23 $$ result.put(convertedKey, convertedValue)[ FD ]
Line_6 $$ Map<Object, Object> result = null-->Line_8 $$ result = BeanUtils.instantiateClass(this.targetMapClass)[ FD ]
Line_2 $$ protected Map<Object, Object> createInstance() -->Line_18 $$ if (keyType != null || valueType != null) [ CD ]
Line_15 $$ keyType = GenericCollectionTypeResolver.getMapKeyType(this.targetMapClass)-->Line_21 $$ Object convertedKey = converter.convertIfNecessary(entry.getKey(), keyType)[ FD ]
Line_20 $$ for (Map.Entry<?, ?> entry : this.sourceMap.entrySet()) -->Line_21 $$ Object convertedKey = converter.convertIfNecessary(entry.getKey(), keyType)[ FD ]
Line_22 $$ Object convertedValue = converter.convertIfNecessary(entry.getValue(), valueType)-->Line_23 $$ result.put(convertedKey, convertedValue)[ FD ]
Line_2 $$ protected Map<Object, Object> createInstance() -->Line_13 $$ Class<?> valueType = null[ CD ]
Line_10 $$ result = new LinkedHashMap<Object, Object>(this.sourceMap.size())-->Line_26 $$ result.putAll(this.sourceMap)[ FD ]
Line_19 $$ TypeConverter converter = getBeanTypeConverter()-->Line_22 $$ Object convertedValue = converter.convertIfNecessary(entry.getValue(), valueType)[ FD ]
Line_16 $$ valueType = GenericCollectionTypeResolver.getMapValueType(this.targetMapClass)-->Line_22 $$ Object convertedValue = converter.convertIfNecessary(entry.getValue(), valueType)[ FD ]
Line_18 $$ if (keyType != null || valueType != null) -->Line_19 $$ TypeConverter converter = getBeanTypeConverter()[ CD ]
Line_2 $$ protected Map<Object, Object> createInstance() -->Line_7 $$ if (this.targetMapClass != null) [ CD ]
Line_8 $$ result = BeanUtils.instantiateClass(this.targetMapClass)-->Line_26 $$ result.putAll(this.sourceMap)[ FD ]
Line_13 $$ Class<?> valueType = null-->Line_16 $$ valueType = GenericCollectionTypeResolver.getMapValueType(this.targetMapClass)[ FD ]
Line_8 $$ result = BeanUtils.instantiateClass(this.targetMapClass)-->Line_10 $$ result = new LinkedHashMap<Object, Object>(this.sourceMap.size())[ FD ]
