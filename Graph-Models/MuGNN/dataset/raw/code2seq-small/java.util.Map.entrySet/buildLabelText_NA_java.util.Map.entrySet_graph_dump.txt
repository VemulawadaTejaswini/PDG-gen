Line_2 $$ private String buildLabelText(@NotNull final String text, @NotNull final Map<TextRange, ParameterInfoUIContextEx.Flag> flagsMap) -->Line_37 $$ return XmlStringUtil.wrapInHtml(labelText)[ CD ]
Line_2 $$ private String buildLabelText(@NotNull final String text, @NotNull final Map<TextRange, ParameterInfoUIContextEx.Flag> flagsMap) -->Line_11 $$ for (Map.Entry<TextRange, ParameterInfoUIContextEx.Flag> entry : flagsMap.entrySet()) [ FD ]
Line_2 $$ private String buildLabelText(@NotNull final String text, @NotNull final Map<TextRange, ParameterInfoUIContextEx.Flag> flagsMap) -->Line_3 $$ final StringBuilder labelText = new StringBuilder(text)[ CD ]
Line_22 $$ if (entry1.getKey() < highlightRange.getEndOffset()) -->Line_23 $$ endOffset += entry1.getValue()[ CD ]
Line_26 $$ if (flag == ParameterInfoUIContextEx.Flag.HIGHLIGHT && isDisabledBeforeHighlight) -->Line_27 $$ final String disableCloseTag = getClosingTag(disabledTag)[ CD ]
Line_5 $$ final Map<Integer, Integer> faultMap = new HashMap<Integer, Integer>()-->Line_29 $$ faultMap.put(highlightRange.getStartOffset(), disableCloseTag.length())[ FD ]
Line_14 $$ final String tagValue = FLAG_TO_TAG.get(flag)-->Line_15 $$ final String tag = getTag(tagValue)[ FD ]
Line_17 $$ int endOffset = highlightRange.getEndOffset() + tag.length()-->Line_34 $$ labelText.insert(endOffset, endTag)[ FD ]
Line_3 $$ final StringBuilder labelText = new StringBuilder(text)-->Line_37 $$ return XmlStringUtil.wrapInHtml(labelText)[ FD ]
Line_16 $$ int startOffset = highlightRange.getStartOffset()-->Line_28 $$ labelText.insert(startOffset, disableCloseTag)[ FD ]
Line_26 $$ if (flag == ParameterInfoUIContextEx.Flag.HIGHLIGHT && isDisabledBeforeHighlight) -->Line_28 $$ labelText.insert(startOffset, disableCloseTag)[ CD ]
Line_5 $$ final Map<Integer, Integer> faultMap = new HashMap<Integer, Integer>()-->Line_35 $$ faultMap.put(highlightRange.getEndOffset(), endTag.length())[ FD ]
Line_5 $$ final Map<Integer, Integer> faultMap = new HashMap<Integer, Integer>()-->Line_9 $$ faultMap.put(0, tag.length())[ FD ]
Line_2 $$ private String buildLabelText(@NotNull final String text, @NotNull final Map<TextRange, ParameterInfoUIContextEx.Flag> flagsMap) -->Line_4 $$ final String disabledTag = FLAG_TO_TAG.get(ParameterInfoUIContextEx.Flag.DISABLE)[ CD ]
Line_3 $$ final StringBuilder labelText = new StringBuilder(text)-->Line_28 $$ labelText.insert(startOffset, disableCloseTag)[ FD ]
Line_7 $$ final String tag = getTag(disabledTag)-->Line_17 $$ int endOffset = highlightRange.getEndOffset() + tag.length()[ FD ]
Line_12 $$ final TextRange highlightRange = entry.getKey()-->Line_16 $$ int startOffset = highlightRange.getStartOffset()[ FD ]
Line_18 $$ for (Map.Entry<Integer, Integer> entry1 : faultMap.entrySet()) -->Line_22 $$ if (entry1.getKey() < highlightRange.getEndOffset()) [ FD ]
Line_4 $$ final String disabledTag = FLAG_TO_TAG.get(ParameterInfoUIContextEx.Flag.DISABLE)-->Line_27 $$ final String disableCloseTag = getClosingTag(disabledTag)[ FD ]
Line_3 $$ final StringBuilder labelText = new StringBuilder(text)-->Line_31 $$ labelText.insert(startOffset, tag)[ FD ]
Line_5 $$ final Map<Integer, Integer> faultMap = new HashMap<Integer, Integer>()-->Line_32 $$ faultMap.put(highlightRange.getStartOffset(), tag.length())[ FD ]
Line_14 $$ final String tagValue = FLAG_TO_TAG.get(flag)-->Line_33 $$ final String endTag = getClosingTag(tagValue)[ FD ]
Line_17 $$ int endOffset = highlightRange.getEndOffset() + tag.length()-->Line_23 $$ endOffset += entry1.getValue()[ FD ]
Line_3 $$ final StringBuilder labelText = new StringBuilder(text)-->Line_34 $$ labelText.insert(endOffset, endTag)[ FD ]
Line_23 $$ endOffset += entry1.getValue()-->Line_34 $$ labelText.insert(endOffset, endTag)[ FD ]
Line_18 $$ for (Map.Entry<Integer, Integer> entry1 : faultMap.entrySet()) -->Line_20 $$ startOffset += entry1.getValue()[ FD ]
Line_16 $$ int startOffset = highlightRange.getStartOffset()-->Line_20 $$ startOffset += entry1.getValue()[ FD ]
Line_18 $$ for (Map.Entry<Integer, Integer> entry1 : faultMap.entrySet()) -->Line_23 $$ endOffset += entry1.getValue()[ FD ]
Line_20 $$ startOffset += entry1.getValue()-->Line_31 $$ labelText.insert(startOffset, tag)[ FD ]
Line_13 $$ final ParameterInfoUIContextEx.Flag flag = entry.getValue()-->Line_14 $$ final String tagValue = FLAG_TO_TAG.get(flag)[ FD ]
Line_12 $$ final TextRange highlightRange = entry.getKey()-->Line_17 $$ int endOffset = highlightRange.getEndOffset() + tag.length()[ FD ]
Line_2 $$ private String buildLabelText(@NotNull final String text, @NotNull final Map<TextRange, ParameterInfoUIContextEx.Flag> flagsMap) -->Line_6 $$ if (isDisabledBeforeHighlight) [ CD ]
Line_18 $$ for (Map.Entry<Integer, Integer> entry1 : faultMap.entrySet()) -->Line_19 $$ if (entry1.getKey() < highlightRange.getStartOffset()) [ FD ]
Line_26 $$ if (flag == ParameterInfoUIContextEx.Flag.HIGHLIGHT && isDisabledBeforeHighlight) -->Line_29 $$ faultMap.put(highlightRange.getStartOffset(), disableCloseTag.length())[ CD ]
Line_12 $$ final TextRange highlightRange = entry.getKey()-->Line_22 $$ if (entry1.getKey() < highlightRange.getEndOffset()) [ FD ]
Line_12 $$ final TextRange highlightRange = entry.getKey()-->Line_19 $$ if (entry1.getKey() < highlightRange.getStartOffset()) [ FD ]
Line_12 $$ final TextRange highlightRange = entry.getKey()-->Line_32 $$ faultMap.put(highlightRange.getStartOffset(), tag.length())[ FD ]
Line_6 $$ if (isDisabledBeforeHighlight) -->Line_9 $$ faultMap.put(0, tag.length())[ CD ]
Line_7 $$ final String tag = getTag(disabledTag)-->Line_9 $$ faultMap.put(0, tag.length())[ FD ]
Line_27 $$ final String disableCloseTag = getClosingTag(disabledTag)-->Line_29 $$ faultMap.put(highlightRange.getStartOffset(), disableCloseTag.length())[ FD ]
Line_7 $$ final String tag = getTag(disabledTag)-->Line_32 $$ faultMap.put(highlightRange.getStartOffset(), tag.length())[ FD ]
Line_5 $$ final Map<Integer, Integer> faultMap = new HashMap<Integer, Integer>()-->Line_18 $$ for (Map.Entry<Integer, Integer> entry1 : faultMap.entrySet()) [ FD ]
Line_7 $$ final String tag = getTag(disabledTag)-->Line_8 $$ labelText.insert(0, tag)[ FD ]
Line_11 $$ for (Map.Entry<TextRange, ParameterInfoUIContextEx.Flag> entry : flagsMap.entrySet()) -->Line_12 $$ final TextRange highlightRange = entry.getKey()[ FD ]
Line_6 $$ if (isDisabledBeforeHighlight) -->Line_7 $$ final String tag = getTag(disabledTag)[ CD ]
Line_12 $$ final TextRange highlightRange = entry.getKey()-->Line_29 $$ faultMap.put(highlightRange.getStartOffset(), disableCloseTag.length())[ FD ]
Line_7 $$ final String tag = getTag(disabledTag)-->Line_31 $$ labelText.insert(startOffset, tag)[ FD ]
Line_12 $$ final TextRange highlightRange = entry.getKey()-->Line_35 $$ faultMap.put(highlightRange.getEndOffset(), endTag.length())[ FD ]
Line_16 $$ int startOffset = highlightRange.getStartOffset()-->Line_31 $$ labelText.insert(startOffset, tag)[ FD ]
Line_33 $$ final String endTag = getClosingTag(tagValue)-->Line_35 $$ faultMap.put(highlightRange.getEndOffset(), endTag.length())[ FD ]
Line_2 $$ private String buildLabelText(@NotNull final String text, @NotNull final Map<TextRange, ParameterInfoUIContextEx.Flag> flagsMap) -->Line_5 $$ final Map<Integer, Integer> faultMap = new HashMap<Integer, Integer>()[ CD ]
Line_11 $$ for (Map.Entry<TextRange, ParameterInfoUIContextEx.Flag> entry : flagsMap.entrySet()) -->Line_13 $$ final ParameterInfoUIContextEx.Flag flag = entry.getValue()[ FD ]
Line_20 $$ startOffset += entry1.getValue()-->Line_28 $$ labelText.insert(startOffset, disableCloseTag)[ FD ]
Line_4 $$ final String disabledTag = FLAG_TO_TAG.get(ParameterInfoUIContextEx.Flag.DISABLE)-->Line_7 $$ final String tag = getTag(disabledTag)[ FD ]
Line_27 $$ final String disableCloseTag = getClosingTag(disabledTag)-->Line_28 $$ labelText.insert(startOffset, disableCloseTag)[ FD ]
Line_33 $$ final String endTag = getClosingTag(tagValue)-->Line_34 $$ labelText.insert(endOffset, endTag)[ FD ]
Line_6 $$ if (isDisabledBeforeHighlight) -->Line_8 $$ labelText.insert(0, tag)[ CD ]
Line_19 $$ if (entry1.getKey() < highlightRange.getStartOffset()) -->Line_20 $$ startOffset += entry1.getValue()[ CD ]
Line_3 $$ final StringBuilder labelText = new StringBuilder(text)-->Line_8 $$ labelText.insert(0, tag)[ FD ]
