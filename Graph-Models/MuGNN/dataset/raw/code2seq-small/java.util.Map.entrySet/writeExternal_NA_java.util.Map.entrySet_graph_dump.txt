Line_33 $$ if (!patterns.isEmpty()) -->Line_34 $$ final Element patternsElement = new Element(PATTERNS_EL_NAME)[ CD ]
Line_2 $$ public void writeExternal(Element element) throws WriteExternalException -->Line_22 $$ if (listenersElement == null) [ CD ]
Line_2 $$ public void writeExternal(Element element) throws WriteExternalException -->Line_12 $$ element.addContent(propertiesElement)[ FD ]
Line_2 $$ public void writeExternal(Element element) throws WriteExternalException -->Line_5 $$ writeModule(element)[ CD ]
Line_2 $$ public void writeExternal(Element element) throws WriteExternalException -->Line_7 $$ DefaultJDOMExternalizer.writeExternal(getPersistantData(), element)[ FD ]
Line_22 $$ if (listenersElement == null) -->Line_24 $$ element.addContent(listenersElement)[ CD ]
Line_2 $$ public void writeExternal(Element element) throws WriteExternalException -->Line_40 $$ element.addContent(patternsElement)[ FD ]
Line_2 $$ public void writeExternal(Element element) throws WriteExternalException -->Line_8 $$ EnvironmentVariablesComponent.writeExternal(element, getPersistantData().getEnvs())[ FD ]
Line_2 $$ public void writeExternal(Element element) throws WriteExternalException -->Line_10 $$ if (propertiesElement == null) [ CD ]
Line_33 $$ if (!patterns.isEmpty()) -->Line_40 $$ element.addContent(patternsElement)[ CD ]
Line_23 $$ listenersElement = new Element("listeners")-->Line_30 $$ listenersElement.addContent(listenerElement)[ FD ]
Line_2 $$ public void writeExternal(Element element) throws WriteExternalException -->Line_26 $$ List<String> listeners = getPersistantData().TEST_LISTENERS[ CD ]
Line_22 $$ if (listenersElement == null) -->Line_23 $$ listenersElement = new Element("listeners")[ CD ]
Line_28 $$ Element listenerElement = new Element("listener")-->Line_30 $$ listenersElement.addContent(listenerElement)[ FD ]
Line_2 $$ public void writeExternal(Element element) throws WriteExternalException -->Line_4 $$ JavaRunConfigurationExtensionManager.getInstance().writeExternal(this, element)[ FD ]
Line_21 $$ Element listenersElement = element.getChild("listeners")-->Line_22 $$ if (listenersElement == null) [ FD ]
Line_35 $$ for (String o : patterns) -->Line_37 $$ patternElement.setAttribute(TEST_CLASS_ATT_NAME, o)[ FD ]
Line_9 $$ Element propertiesElement = element.getChild("properties")-->Line_12 $$ element.addContent(propertiesElement)[ FD ]
Line_15 $$ for (Map.Entry<String, String> entry : properties.entrySet()) -->Line_17 $$ property.setAttribute("name", entry.getKey())[ FD ]
Line_2 $$ public void writeExternal(Element element) throws WriteExternalException -->Line_6 $$ DefaultJDOMExternalizer.writeExternal(this, element)[ CD ]
Line_9 $$ Element propertiesElement = element.getChild("properties")-->Line_11 $$ propertiesElement = new Element("properties")[ FD ]
Line_21 $$ Element listenersElement = element.getChild("listeners")-->Line_23 $$ listenersElement = new Element("listeners")[ FD ]
Line_2 $$ public void writeExternal(Element element) throws WriteExternalException -->Line_9 $$ Element propertiesElement = element.getChild("properties")[ FD ]
Line_23 $$ listenersElement = new Element("listeners")-->Line_24 $$ element.addContent(listenersElement)[ FD ]
Line_34 $$ final Element patternsElement = new Element(PATTERNS_EL_NAME)-->Line_38 $$ patternsElement.addContent(patternElement)[ FD ]
Line_2 $$ public void writeExternal(Element element) throws WriteExternalException -->Line_14 $$ Map<String, String> properties = getPersistantData().TEST_PROPERTIES[ CD ]
Line_2 $$ public void writeExternal(Element element) throws WriteExternalException -->Line_4 $$ JavaRunConfigurationExtensionManager.getInstance().writeExternal(this, element)[ CD ]
Line_14 $$ Map<String, String> properties = getPersistantData().TEST_PROPERTIES-->Line_15 $$ for (Map.Entry<String, String> entry : properties.entrySet()) [ FD ]
Line_28 $$ Element listenerElement = new Element("listener")-->Line_29 $$ listenerElement.setAttribute("class", listener)[ FD ]
Line_36 $$ final Element patternElement = new Element(PATTERN_EL_NAME)-->Line_37 $$ patternElement.setAttribute(TEST_CLASS_ATT_NAME, o)[ FD ]
Line_2 $$ public void writeExternal(Element element) throws WriteExternalException -->Line_24 $$ element.addContent(listenersElement)[ FD ]
Line_15 $$ for (Map.Entry<String, String> entry : properties.entrySet()) -->Line_18 $$ property.setAttribute("value", entry.getValue())[ FD ]
Line_2 $$ public void writeExternal(Element element) throws WriteExternalException -->Line_21 $$ Element listenersElement = element.getChild("listeners")[ CD ]
Line_11 $$ propertiesElement = new Element("properties")-->Line_12 $$ element.addContent(propertiesElement)[ FD ]
Line_2 $$ public void writeExternal(Element element) throws WriteExternalException -->Line_9 $$ Element propertiesElement = element.getChild("properties")[ CD ]
Line_2 $$ public void writeExternal(Element element) throws WriteExternalException -->Line_32 $$ final Set<String> patterns = getPersistantData().getPatterns()[ CD ]
Line_9 $$ Element propertiesElement = element.getChild("properties")-->Line_10 $$ if (propertiesElement == null) [ FD ]
Line_2 $$ public void writeExternal(Element element) throws WriteExternalException -->Line_33 $$ if (!patterns.isEmpty()) [ CD ]
Line_2 $$ public void writeExternal(Element element) throws WriteExternalException -->Line_7 $$ DefaultJDOMExternalizer.writeExternal(getPersistantData(), element)[ CD ]
Line_32 $$ final Set<String> patterns = getPersistantData().getPatterns()-->Line_33 $$ if (!patterns.isEmpty()) [ FD ]
Line_16 $$ Element property = new Element("property")-->Line_17 $$ property.setAttribute("name", entry.getKey())[ FD ]
Line_10 $$ if (propertiesElement == null) -->Line_11 $$ propertiesElement = new Element("properties")[ CD ]
Line_16 $$ Element property = new Element("property")-->Line_19 $$ propertiesElement.addContent(property)[ FD ]
Line_2 $$ public void writeExternal(Element element) throws WriteExternalException -->Line_6 $$ DefaultJDOMExternalizer.writeExternal(this, element)[ FD ]
Line_10 $$ if (propertiesElement == null) -->Line_12 $$ element.addContent(propertiesElement)[ CD ]
Line_2 $$ public void writeExternal(Element element) throws WriteExternalException -->Line_21 $$ Element listenersElement = element.getChild("listeners")[ FD ]
Line_21 $$ Element listenersElement = element.getChild("listeners")-->Line_24 $$ element.addContent(listenersElement)[ FD ]
Line_2 $$ public void writeExternal(Element element) throws WriteExternalException -->Line_5 $$ writeModule(element)[ FD ]
Line_2 $$ public void writeExternal(Element element) throws WriteExternalException -->Line_8 $$ EnvironmentVariablesComponent.writeExternal(element, getPersistantData().getEnvs())[ CD ]
Line_21 $$ Element listenersElement = element.getChild("listeners")-->Line_30 $$ listenersElement.addContent(listenerElement)[ FD ]
Line_11 $$ propertiesElement = new Element("properties")-->Line_19 $$ propertiesElement.addContent(property)[ FD ]
Line_34 $$ final Element patternsElement = new Element(PATTERNS_EL_NAME)-->Line_40 $$ element.addContent(patternsElement)[ FD ]
Line_2 $$ public void writeExternal(Element element) throws WriteExternalException -->Line_3 $$ super.writeExternal(element)[ CD ]
Line_36 $$ final Element patternElement = new Element(PATTERN_EL_NAME)-->Line_38 $$ patternsElement.addContent(patternElement)[ FD ]
Line_9 $$ Element propertiesElement = element.getChild("properties")-->Line_19 $$ propertiesElement.addContent(property)[ FD ]
Line_2 $$ public void writeExternal(Element element) throws WriteExternalException -->Line_3 $$ super.writeExternal(element)[ FD ]
Line_27 $$ for (String listener : listeners) -->Line_29 $$ listenerElement.setAttribute("class", listener)[ FD ]
Line_16 $$ Element property = new Element("property")-->Line_18 $$ property.setAttribute("value", entry.getValue())[ FD ]
