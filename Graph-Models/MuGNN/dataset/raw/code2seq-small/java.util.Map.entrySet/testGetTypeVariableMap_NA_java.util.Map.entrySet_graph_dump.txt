Line_4 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleInterfaceType.class)-->Line_8 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionSuperclassType.class)[ FD ]
Line_6 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionInterfaceType.class)-->Line_17 $$ assertThat(map.size(), equalTo(2))[ FD ]
Line_8 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionSuperclassType.class)-->Line_14 $$ map = GenericTypeResolver.getTypeVariableMap(TypedTopLevelClass.class)[ FD ]
Line_6 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionInterfaceType.class)-->Line_15 $$ assertThat(map.toString(), equalTo("[ FD ]
Line_12 $$ map = GenericTypeResolver.getTypeVariableMap(TopLevelClass.class)-->Line_17 $$ assertThat(map.size(), equalTo(2))[ FD ]
Line_3 $$ Map<TypeVariable, Type> map-->Line_15 $$ assertThat(map.toString(), equalTo("[ FD ]
Line_16 $$ map = GenericTypeResolver.getTypeVariableMap(TypedTopLevelClass.TypedNested.class)-->Line_17 $$ assertThat(map.size(), equalTo(2))[ FD ]
Line_3 $$ Map<TypeVariable, Type> map-->Line_4 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleInterfaceType.class)[ FD ]
Line_3 $$ Map<TypeVariable, Type> map-->Line_20 $$ for (Map.Entry<TypeVariable, Type> entry : map.entrySet()) [ FD ]
Line_4 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleInterfaceType.class)-->Line_12 $$ map = GenericTypeResolver.getTypeVariableMap(TopLevelClass.class)[ FD ]
Line_6 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionInterfaceType.class)-->Line_13 $$ assertThat(map.toString(), equalTo("[ FD ]
Line_19 $$ Type x = null-->Line_28 $$ assertThat(x, equalTo((Type) Long.class))[ FD ]
Line_2 $$ public void testGetTypeVariableMap() throws Exception -->Line_4 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleInterfaceType.class)[ CD ]
Line_4 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleInterfaceType.class)-->Line_6 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionInterfaceType.class)[ FD ]
Line_4 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleInterfaceType.class)-->Line_9 $$ assertThat(map.toString(), equalTo("[ FD ]
Line_8 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionSuperclassType.class)-->Line_9 $$ assertThat(map.toString(), equalTo("[ FD ]
Line_14 $$ map = GenericTypeResolver.getTypeVariableMap(TypedTopLevelClass.class)-->Line_17 $$ assertThat(map.size(), equalTo(2))[ FD ]
Line_2 $$ public void testGetTypeVariableMap() throws Exception -->Line_3 $$ Map<TypeVariable, Type> map[ CD ]
Line_6 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionInterfaceType.class)-->Line_20 $$ for (Map.Entry<TypeVariable, Type> entry : map.entrySet()) [ FD ]
Line_4 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleInterfaceType.class)-->Line_5 $$ assertThat(map.toString(), equalTo("[ FD ]
Line_21 $$ if (entry.getKey().toString().equals("T")) -->Line_22 $$ t = entry.getValue()[ CD ]
Line_10 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleTypeWithMethods.class)-->Line_12 $$ map = GenericTypeResolver.getTypeVariableMap(TopLevelClass.class)[ FD ]
Line_2 $$ public void testGetTypeVariableMap() throws Exception -->Line_7 $$ assertThat(map.toString(), equalTo("[ CD ]
Line_3 $$ Map<TypeVariable, Type> map-->Line_8 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionSuperclassType.class)[ FD ]
Line_6 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionInterfaceType.class)-->Line_14 $$ map = GenericTypeResolver.getTypeVariableMap(TypedTopLevelClass.class)[ FD ]
Line_14 $$ map = GenericTypeResolver.getTypeVariableMap(TypedTopLevelClass.class)-->Line_16 $$ map = GenericTypeResolver.getTypeVariableMap(TypedTopLevelClass.TypedNested.class)[ FD ]
Line_2 $$ public void testGetTypeVariableMap() throws Exception -->Line_18 $$ Type t = null[ CD ]
Line_2 $$ public void testGetTypeVariableMap() throws Exception -->Line_17 $$ assertThat(map.size(), equalTo(2))[ CD ]
Line_2 $$ public void testGetTypeVariableMap() throws Exception -->Line_28 $$ assertThat(x, equalTo((Type) Long.class))[ CD ]
Line_2 $$ public void testGetTypeVariableMap() throws Exception -->Line_19 $$ Type x = null[ CD ]
Line_20 $$ for (Map.Entry<TypeVariable, Type> entry : map.entrySet()) -->Line_24 $$ x = entry.getValue()[ FD ]
Line_8 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionSuperclassType.class)-->Line_12 $$ map = GenericTypeResolver.getTypeVariableMap(TopLevelClass.class)[ FD ]
Line_8 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionSuperclassType.class)-->Line_13 $$ assertThat(map.toString(), equalTo("[ FD ]
Line_12 $$ map = GenericTypeResolver.getTypeVariableMap(TopLevelClass.class)-->Line_13 $$ assertThat(map.toString(), equalTo("[ FD ]
Line_24 $$ x = entry.getValue()-->Line_28 $$ assertThat(x, equalTo((Type) Long.class))[ FD ]
Line_2 $$ public void testGetTypeVariableMap() throws Exception -->Line_27 $$ assertThat(t, equalTo((Type) Integer.class))[ CD ]
Line_3 $$ Map<TypeVariable, Type> map-->Line_9 $$ assertThat(map.toString(), equalTo("[ FD ]
Line_8 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionSuperclassType.class)-->Line_10 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleTypeWithMethods.class)[ FD ]
Line_6 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionInterfaceType.class)-->Line_10 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleTypeWithMethods.class)[ FD ]
Line_10 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleTypeWithMethods.class)-->Line_13 $$ assertThat(map.toString(), equalTo("[ FD ]
Line_2 $$ public void testGetTypeVariableMap() throws Exception -->Line_11 $$ assertThat(map.toString(), equalTo("[ CD ]
Line_3 $$ Map<TypeVariable, Type> map-->Line_12 $$ map = GenericTypeResolver.getTypeVariableMap(TopLevelClass.class)[ FD ]
Line_12 $$ map = GenericTypeResolver.getTypeVariableMap(TopLevelClass.class)-->Line_14 $$ map = GenericTypeResolver.getTypeVariableMap(TypedTopLevelClass.class)[ FD ]
Line_12 $$ map = GenericTypeResolver.getTypeVariableMap(TopLevelClass.class)-->Line_15 $$ assertThat(map.toString(), equalTo("[ FD ]
Line_2 $$ public void testGetTypeVariableMap() throws Exception -->Line_13 $$ assertThat(map.toString(), equalTo("[ CD ]
Line_3 $$ Map<TypeVariable, Type> map-->Line_16 $$ map = GenericTypeResolver.getTypeVariableMap(TypedTopLevelClass.TypedNested.class)[ FD ]
Line_4 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleInterfaceType.class)-->Line_14 $$ map = GenericTypeResolver.getTypeVariableMap(TypedTopLevelClass.class)[ FD ]
Line_20 $$ for (Map.Entry<TypeVariable, Type> entry : map.entrySet()) -->Line_21 $$ if (entry.getKey().toString().equals("T")) [ FD ]
Line_2 $$ public void testGetTypeVariableMap() throws Exception -->Line_10 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleTypeWithMethods.class)[ CD ]
Line_19 $$ Type x = null-->Line_24 $$ x = entry.getValue()[ FD ]
Line_4 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleInterfaceType.class)-->Line_15 $$ assertThat(map.toString(), equalTo("[ FD ]
Line_2 $$ public void testGetTypeVariableMap() throws Exception -->Line_5 $$ assertThat(map.toString(), equalTo("[ CD ]
Line_2 $$ public void testGetTypeVariableMap() throws Exception -->Line_16 $$ map = GenericTypeResolver.getTypeVariableMap(TypedTopLevelClass.TypedNested.class)[ CD ]
Line_8 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionSuperclassType.class)-->Line_15 $$ assertThat(map.toString(), equalTo("[ FD ]
Line_3 $$ Map<TypeVariable, Type> map-->Line_10 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleTypeWithMethods.class)[ FD ]
Line_16 $$ map = GenericTypeResolver.getTypeVariableMap(TypedTopLevelClass.TypedNested.class)-->Line_20 $$ for (Map.Entry<TypeVariable, Type> entry : map.entrySet()) [ FD ]
Line_10 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleTypeWithMethods.class)-->Line_15 $$ assertThat(map.toString(), equalTo("[ FD ]
Line_4 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleInterfaceType.class)-->Line_16 $$ map = GenericTypeResolver.getTypeVariableMap(TypedTopLevelClass.TypedNested.class)[ FD ]
Line_2 $$ public void testGetTypeVariableMap() throws Exception -->Line_9 $$ assertThat(map.toString(), equalTo("[ CD ]
Line_6 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionInterfaceType.class)-->Line_11 $$ assertThat(map.toString(), equalTo("[ FD ]
Line_8 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionSuperclassType.class)-->Line_17 $$ assertThat(map.size(), equalTo(2))[ FD ]
Line_4 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleInterfaceType.class)-->Line_20 $$ for (Map.Entry<TypeVariable, Type> entry : map.entrySet()) [ FD ]
Line_3 $$ Map<TypeVariable, Type> map-->Line_14 $$ map = GenericTypeResolver.getTypeVariableMap(TypedTopLevelClass.class)[ FD ]
Line_2 $$ public void testGetTypeVariableMap() throws Exception -->Line_8 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionSuperclassType.class)[ CD ]
Line_10 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleTypeWithMethods.class)-->Line_20 $$ for (Map.Entry<TypeVariable, Type> entry : map.entrySet()) [ FD ]
Line_14 $$ map = GenericTypeResolver.getTypeVariableMap(TypedTopLevelClass.class)-->Line_15 $$ assertThat(map.toString(), equalTo("[ FD ]
Line_6 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionInterfaceType.class)-->Line_12 $$ map = GenericTypeResolver.getTypeVariableMap(TopLevelClass.class)[ FD ]
Line_10 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleTypeWithMethods.class)-->Line_17 $$ assertThat(map.size(), equalTo(2))[ FD ]
Line_14 $$ map = GenericTypeResolver.getTypeVariableMap(TypedTopLevelClass.class)-->Line_20 $$ for (Map.Entry<TypeVariable, Type> entry : map.entrySet()) [ FD ]
Line_4 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleInterfaceType.class)-->Line_10 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleTypeWithMethods.class)[ FD ]
Line_3 $$ Map<TypeVariable, Type> map-->Line_7 $$ assertThat(map.toString(), equalTo("[ FD ]
Line_3 $$ Map<TypeVariable, Type> map-->Line_13 $$ assertThat(map.toString(), equalTo("[ FD ]
Line_8 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionSuperclassType.class)-->Line_11 $$ assertThat(map.toString(), equalTo("[ FD ]
Line_2 $$ public void testGetTypeVariableMap() throws Exception -->Line_14 $$ map = GenericTypeResolver.getTypeVariableMap(TypedTopLevelClass.class)[ CD ]
Line_8 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionSuperclassType.class)-->Line_20 $$ for (Map.Entry<TypeVariable, Type> entry : map.entrySet()) [ FD ]
Line_18 $$ Type t = null-->Line_27 $$ assertThat(t, equalTo((Type) Integer.class))[ FD ]
Line_6 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionInterfaceType.class)-->Line_7 $$ assertThat(map.toString(), equalTo("[ FD ]
Line_12 $$ map = GenericTypeResolver.getTypeVariableMap(TopLevelClass.class)-->Line_16 $$ map = GenericTypeResolver.getTypeVariableMap(TypedTopLevelClass.TypedNested.class)[ FD ]
Line_3 $$ Map<TypeVariable, Type> map-->Line_6 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionInterfaceType.class)[ FD ]
Line_6 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionInterfaceType.class)-->Line_9 $$ assertThat(map.toString(), equalTo("[ FD ]
Line_20 $$ for (Map.Entry<TypeVariable, Type> entry : map.entrySet()) -->Line_22 $$ t = entry.getValue()[ FD ]
Line_4 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleInterfaceType.class)-->Line_7 $$ assertThat(map.toString(), equalTo("[ FD ]
Line_3 $$ Map<TypeVariable, Type> map-->Line_17 $$ assertThat(map.size(), equalTo(2))[ FD ]
Line_10 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleTypeWithMethods.class)-->Line_11 $$ assertThat(map.toString(), equalTo("[ FD ]
Line_4 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleInterfaceType.class)-->Line_13 $$ assertThat(map.toString(), equalTo("[ FD ]
Line_18 $$ Type t = null-->Line_22 $$ t = entry.getValue()[ FD ]
Line_3 $$ Map<TypeVariable, Type> map-->Line_5 $$ assertThat(map.toString(), equalTo("[ FD ]
Line_8 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionSuperclassType.class)-->Line_16 $$ map = GenericTypeResolver.getTypeVariableMap(TypedTopLevelClass.TypedNested.class)[ FD ]
Line_10 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleTypeWithMethods.class)-->Line_16 $$ map = GenericTypeResolver.getTypeVariableMap(TypedTopLevelClass.TypedNested.class)[ FD ]
Line_10 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleTypeWithMethods.class)-->Line_14 $$ map = GenericTypeResolver.getTypeVariableMap(TypedTopLevelClass.class)[ FD ]
Line_6 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionInterfaceType.class)-->Line_8 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionSuperclassType.class)[ FD ]
Line_12 $$ map = GenericTypeResolver.getTypeVariableMap(TopLevelClass.class)-->Line_20 $$ for (Map.Entry<TypeVariable, Type> entry : map.entrySet()) [ FD ]
Line_22 $$ t = entry.getValue()-->Line_27 $$ assertThat(t, equalTo((Type) Integer.class))[ FD ]
Line_2 $$ public void testGetTypeVariableMap() throws Exception -->Line_15 $$ assertThat(map.toString(), equalTo("[ CD ]
Line_2 $$ public void testGetTypeVariableMap() throws Exception -->Line_12 $$ map = GenericTypeResolver.getTypeVariableMap(TopLevelClass.class)[ CD ]
Line_6 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionInterfaceType.class)-->Line_16 $$ map = GenericTypeResolver.getTypeVariableMap(TypedTopLevelClass.TypedNested.class)[ FD ]
Line_21 $$ if (entry.getKey().toString().equals("T")) -->Line_24 $$ x = entry.getValue()[ CD ]
Line_3 $$ Map<TypeVariable, Type> map-->Line_11 $$ assertThat(map.toString(), equalTo("[ FD ]
Line_2 $$ public void testGetTypeVariableMap() throws Exception -->Line_6 $$ map = GenericTypeResolver.getTypeVariableMap(MyCollectionInterfaceType.class)[ CD ]
Line_4 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleInterfaceType.class)-->Line_11 $$ assertThat(map.toString(), equalTo("[ FD ]
Line_4 $$ map = GenericTypeResolver.getTypeVariableMap(MySimpleInterfaceType.class)-->Line_17 $$ assertThat(map.size(), equalTo(2))[ FD ]
