Line_13 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_1, status)-->Line_29 $$ resp.headers().add(ACCESS_CONTROL_MAX_AGE, transport.settings().getAsInt(SETTING_CORS_MAX_AGE, 1728000))[ FD ]
Line_20 $$ String allowedOrigins = transport.settings().get(SETTING_CORS_ALLOW_ORIGIN, null)-->Line_22 $$ resp.headers().add(ACCESS_CONTROL_ALLOW_ORIGIN, allowedOrigins)[ FD ]
Line_13 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_1, status)-->Line_59 $$ if (!resp.headers().contains(HttpHeaders.Names.CONTENT_LENGTH)) [ FD ]
Line_2 $$ public void sendResponse(RestResponse response) -->Line_43 $$ if (customHeaders != null) [ CD ]
Line_2 $$ public void sendResponse(RestResponse response) -->Line_52 $$ boolean addedReleaseListener = false[ CD ]
Line_8 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_0, status)-->Line_57 $$ resp.headers().add(HttpHeaders.Names.CONTENT_TYPE, response.contentType())[ FD ]
Line_6 $$ org.jboss.netty.handler.codec.http.HttpResponse resp-->Line_60 $$ resp.headers().add(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(buffer.readableBytes()))[ FD ]
Line_50 $$ BytesReference content = response.content()-->Line_84 $$ if (content instanceof Releasable) [ FD ]
Line_82 $$ future = channel.write(resp)-->Line_85 $$ future.addListener(new ReleaseChannelFutureListener((Releasable) content))[ FD ]
Line_6 $$ org.jboss.netty.handler.codec.http.HttpResponse resp-->Line_82 $$ future = channel.write(resp)[ FD ]
Line_19 $$ if (corsPattern == null) -->Line_20 $$ String allowedOrigins = transport.settings().get(SETTING_CORS_ALLOW_ORIGIN, null)[ CD ]
Line_8 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_0, status)-->Line_29 $$ resp.headers().add(ACCESS_CONTROL_MAX_AGE, transport.settings().getAsInt(SETTING_CORS_MAX_AGE, 1728000))[ FD ]
Line_62 $$ if (transport.resetCookies) -->Line_64 $$ if (cookieString != null) [ CD ]
Line_8 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_0, status)-->Line_25 $$ resp.headers().add(ACCESS_CONTROL_ALLOW_ORIGIN, corsPattern.matcher(originHeader).matches() ? originHeader : "null")[ FD ]
Line_76 $$ ChannelFuture future-->Line_82 $$ future = channel.write(resp)[ FD ]
Line_2 $$ public void sendResponse(RestResponse response) -->Line_6 $$ org.jboss.netty.handler.codec.http.HttpResponse resp[ CD ]
Line_28 $$ if (nettyRequest.getMethod() == HttpMethod.OPTIONS) -->Line_29 $$ resp.headers().add(ACCESS_CONTROL_MAX_AGE, transport.settings().getAsInt(SETTING_CORS_MAX_AGE, 1728000))[ CD ]
Line_7 $$ if (http10) -->Line_8 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_0, status)[ CD ]
Line_62 $$ if (transport.resetCookies) -->Line_63 $$ String cookieString = nettyRequest.headers().get(HttpHeaders.Names.COOKIE)[ CD ]
Line_8 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_0, status)-->Line_40 $$ resp.headers().add("X-Opaque-Id", opaque)[ FD ]
Line_79 $$ future = downstreamChannelEvent.getFuture()-->Line_89 $$ future.addListener(ChannelFutureListener.CLOSE)[ FD ]
Line_8 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_0, status)-->Line_10 $$ resp.headers().add(HttpHeaders.Names.CONNECTION, "Keep-Alive")[ FD ]
Line_16 $$ if (transport.settings().getAsBoolean(SETTING_CORS_ENABLED, false)) -->Line_18 $$ if (!Strings.isNullOrEmpty(originHeader)) [ CD ]
Line_8 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_0, status)-->Line_55 $$ resp.setContent(buffer)[ FD ]
Line_33 $$ if (transport.settings().getAsBoolean(SETTING_CORS_ALLOW_CREDENTIALS, false)) -->Line_34 $$ resp.headers().add(ACCESS_CONTROL_ALLOW_CREDENTIALS, "true")[ CD ]
Line_44 $$ for (Map.Entry<String, List<String>> headerEntry : customHeaders.entrySet()) -->Line_46 $$ resp.headers().add(headerEntry.getKey(), headerValue)[ FD ]
Line_6 $$ org.jboss.netty.handler.codec.http.HttpResponse resp-->Line_22 $$ resp.headers().add(ACCESS_CONTROL_ALLOW_ORIGIN, allowedOrigins)[ FD ]
Line_2 $$ public void sendResponse(RestResponse response) -->Line_3 $$ boolean http10 = nettyRequest.getProtocolVersion().equals(HttpVersion.HTTP_1_0)[ CD ]
Line_2 $$ public void sendResponse(RestResponse response) -->Line_39 $$ if (opaque != null) [ CD ]
Line_20 $$ String allowedOrigins = transport.settings().get(SETTING_CORS_ALLOW_ORIGIN, null)-->Line_21 $$ if (!Strings.isNullOrEmpty(allowedOrigins)) [ FD ]
Line_13 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_1, status)-->Line_30 $$ resp.headers().add(ACCESS_CONTROL_ALLOW_METHODS, transport.settings().get(SETTING_CORS_ALLOW_METHODS, "OPTIONS, HEAD, GET, POST, PUT, DELETE"))[ FD ]
Line_63 $$ String cookieString = nettyRequest.headers().get(HttpHeaders.Names.COOKIE)-->Line_66 $$ Set<Cookie> cookies = cookieDecoder.decode(cookieString)[ FD ]
Line_66 $$ Set<Cookie> cookies = cookieDecoder.decode(cookieString)-->Line_67 $$ if (!cookies.isEmpty()) [ FD ]
Line_8 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_0, status)-->Line_22 $$ resp.headers().add(ACCESS_CONTROL_ALLOW_ORIGIN, allowedOrigins)[ FD ]
Line_2 $$ public void sendResponse(RestResponse response) -->Line_42 $$ Map<String, List<String>> customHeaders = response.getHeaders()[ FD ]
Line_6 $$ org.jboss.netty.handler.codec.http.HttpResponse resp-->Line_57 $$ resp.headers().add(HttpHeaders.Names.CONTENT_TYPE, response.contentType())[ FD ]
Line_77 $$ if (orderedUpstreamMessageEvent != null) -->Line_79 $$ future = downstreamChannelEvent.getFuture()[ CD ]
Line_2 $$ public void sendResponse(RestResponse response) -->Line_42 $$ Map<String, List<String>> customHeaders = response.getHeaders()[ CD ]
Line_2 $$ public void sendResponse(RestResponse response) -->Line_7 $$ if (http10) [ CD ]
Line_2 $$ public void sendResponse(RestResponse response) -->Line_51 $$ ChannelBuffer buffer[ CD ]
Line_8 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_0, status)-->Line_82 $$ future = channel.write(resp)[ FD ]
Line_13 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_1, status)-->Line_31 $$ resp.headers().add(ACCESS_CONTROL_ALLOW_HEADERS, transport.settings().get(SETTING_CORS_ALLOW_HEADERS, "X-Requested-With, Content-Type, Content-Length"))[ FD ]
Line_64 $$ if (cookieString != null) -->Line_65 $$ CookieDecoder cookieDecoder = new CookieDecoder()[ CD ]
Line_59 $$ if (!resp.headers().contains(HttpHeaders.Names.CONTENT_LENGTH)) -->Line_60 $$ resp.headers().add(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(buffer.readableBytes()))[ CD ]
Line_8 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_0, status)-->Line_34 $$ resp.headers().add(ACCESS_CONTROL_ALLOW_CREDENTIALS, "true")[ FD ]
Line_13 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_1, status)-->Line_25 $$ resp.headers().add(ACCESS_CONTROL_ALLOW_ORIGIN, corsPattern.matcher(originHeader).matches() ? originHeader : "null")[ FD ]
Line_79 $$ future = downstreamChannelEvent.getFuture()-->Line_82 $$ future = channel.write(resp)[ FD ]
Line_6 $$ org.jboss.netty.handler.codec.http.HttpResponse resp-->Line_46 $$ resp.headers().add(headerEntry.getKey(), headerValue)[ FD ]
Line_76 $$ ChannelFuture future-->Line_89 $$ future.addListener(ChannelFutureListener.CLOSE)[ FD ]
Line_69 $$ for (Cookie cookie : cookies) -->Line_70 $$ cookieEncoder.addCookie(cookie)[ FD ]
Line_13 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_1, status)-->Line_34 $$ resp.headers().add(ACCESS_CONTROL_ALLOW_CREDENTIALS, "true")[ FD ]
Line_6 $$ org.jboss.netty.handler.codec.http.HttpResponse resp-->Line_31 $$ resp.headers().add(ACCESS_CONTROL_ALLOW_HEADERS, transport.settings().get(SETTING_CORS_ALLOW_HEADERS, "X-Requested-With, Content-Type, Content-Length"))[ FD ]
Line_84 $$ if (content instanceof Releasable) -->Line_86 $$ addedReleaseListener = true[ CD ]
Line_68 $$ CookieEncoder cookieEncoder = new CookieEncoder(true)-->Line_72 $$ resp.headers().add(HttpHeaders.Names.SET_COOKIE, cookieEncoder.encode())[ FD ]
Line_39 $$ if (opaque != null) -->Line_40 $$ resp.headers().add("X-Opaque-Id", opaque)[ CD ]
Line_86 $$ addedReleaseListener = true-->Line_92 $$ if (!addedReleaseListener && content instanceof Releasable) [ FD ]
Line_64 $$ if (cookieString != null) -->Line_66 $$ Set<Cookie> cookies = cookieDecoder.decode(cookieString)[ CD ]
Line_2 $$ public void sendResponse(RestResponse response) -->Line_38 $$ String opaque = nettyRequest.headers().get("X-Opaque-Id")[ CD ]
Line_6 $$ org.jboss.netty.handler.codec.http.HttpResponse resp-->Line_34 $$ resp.headers().add(ACCESS_CONTROL_ALLOW_CREDENTIALS, "true")[ FD ]
Line_4 $$ boolean close = HttpHeaders.Values.CLOSE.equalsIgnoreCase(nettyRequest.headers().get(HttpHeaders.Names.CONNECTION)) || (http10 && !HttpHeaders.Values.KEEP_ALIVE.equalsIgnoreCase(nettyRequest.headers().get(HttpHeaders.Names.CONNECTION)))-->Line_9 $$ if (!close) [ FD ]
Line_64 $$ if (cookieString != null) -->Line_67 $$ if (!cookies.isEmpty()) [ CD ]
Line_9 $$ if (!close) -->Line_10 $$ resp.headers().add(HttpHeaders.Names.CONNECTION, "Keep-Alive")[ CD ]
Line_8 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_0, status)-->Line_60 $$ resp.headers().add(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(buffer.readableBytes()))[ FD ]
Line_17 $$ String originHeader = request.header(ORIGIN)-->Line_25 $$ resp.headers().add(ACCESS_CONTROL_ALLOW_ORIGIN, corsPattern.matcher(originHeader).matches() ? originHeader : "null")[ FD ]
Line_15 $$ if (RestUtils.isBrowser(nettyRequest.headers().get(USER_AGENT))) -->Line_16 $$ if (transport.settings().getAsBoolean(SETTING_CORS_ENABLED, false)) [ CD ]
Line_51 $$ ChannelBuffer buffer-->Line_60 $$ resp.headers().add(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(buffer.readableBytes()))[ FD ]
Line_8 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_0, status)-->Line_56 $$ if (!resp.headers().contains(HttpHeaders.Names.CONTENT_TYPE)) [ FD ]
Line_52 $$ boolean addedReleaseListener = false-->Line_92 $$ if (!addedReleaseListener && content instanceof Releasable) [ FD ]
Line_52 $$ boolean addedReleaseListener = false-->Line_86 $$ addedReleaseListener = true[ FD ]
Line_6 $$ org.jboss.netty.handler.codec.http.HttpResponse resp-->Line_13 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_1, status)[ FD ]
Line_6 $$ org.jboss.netty.handler.codec.http.HttpResponse resp-->Line_30 $$ resp.headers().add(ACCESS_CONTROL_ALLOW_METHODS, transport.settings().get(SETTING_CORS_ALLOW_METHODS, "OPTIONS, HEAD, GET, POST, PUT, DELETE"))[ FD ]
Line_54 $$ buffer = content.toChannelBuffer()-->Line_60 $$ resp.headers().add(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(buffer.readableBytes()))[ FD ]
Line_6 $$ org.jboss.netty.handler.codec.http.HttpResponse resp-->Line_25 $$ resp.headers().add(ACCESS_CONTROL_ALLOW_ORIGIN, corsPattern.matcher(originHeader).matches() ? originHeader : "null")[ FD ]
Line_6 $$ org.jboss.netty.handler.codec.http.HttpResponse resp-->Line_72 $$ resp.headers().add(HttpHeaders.Names.SET_COOKIE, cookieEncoder.encode())[ FD ]
Line_28 $$ if (nettyRequest.getMethod() == HttpMethod.OPTIONS) -->Line_31 $$ resp.headers().add(ACCESS_CONTROL_ALLOW_HEADERS, transport.settings().get(SETTING_CORS_ALLOW_HEADERS, "X-Requested-With, Content-Type, Content-Length"))[ CD ]
Line_13 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_1, status)-->Line_56 $$ if (!resp.headers().contains(HttpHeaders.Names.CONTENT_TYPE)) [ FD ]
Line_2 $$ public void sendResponse(RestResponse response) -->Line_4 $$ boolean close = HttpHeaders.Values.CLOSE.equalsIgnoreCase(nettyRequest.headers().get(HttpHeaders.Names.CONNECTION)) || (http10 && !HttpHeaders.Values.KEEP_ALIVE.equalsIgnoreCase(nettyRequest.headers().get(HttpHeaders.Names.CONNECTION)))[ CD ]
Line_21 $$ if (!Strings.isNullOrEmpty(allowedOrigins)) -->Line_22 $$ resp.headers().add(ACCESS_CONTROL_ALLOW_ORIGIN, allowedOrigins)[ CD ]
Line_8 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_0, status)-->Line_72 $$ resp.headers().add(HttpHeaders.Names.SET_COOKIE, cookieEncoder.encode())[ FD ]
Line_63 $$ String cookieString = nettyRequest.headers().get(HttpHeaders.Names.COOKIE)-->Line_64 $$ if (cookieString != null) [ FD ]
Line_16 $$ if (transport.settings().getAsBoolean(SETTING_CORS_ENABLED, false)) -->Line_17 $$ String originHeader = request.header(ORIGIN)[ CD ]
Line_82 $$ future = channel.write(resp)-->Line_89 $$ future.addListener(ChannelFutureListener.CLOSE)[ FD ]
Line_84 $$ if (content instanceof Releasable) -->Line_85 $$ future.addListener(new ReleaseChannelFutureListener((Releasable) content))[ CD ]
Line_42 $$ Map<String, List<String>> customHeaders = response.getHeaders()-->Line_43 $$ if (customHeaders != null) [ FD ]
Line_65 $$ CookieDecoder cookieDecoder = new CookieDecoder()-->Line_66 $$ Set<Cookie> cookies = cookieDecoder.decode(cookieString)[ FD ]
Line_17 $$ String originHeader = request.header(ORIGIN)-->Line_18 $$ if (!Strings.isNullOrEmpty(originHeader)) [ FD ]
Line_45 $$ for (String headerValue : headerEntry.getValue()) -->Line_46 $$ resp.headers().add(headerEntry.getKey(), headerValue)[ FD ]
Line_28 $$ if (nettyRequest.getMethod() == HttpMethod.OPTIONS) -->Line_30 $$ resp.headers().add(ACCESS_CONTROL_ALLOW_METHODS, transport.settings().get(SETTING_CORS_ALLOW_METHODS, "OPTIONS, HEAD, GET, POST, PUT, DELETE"))[ CD ]
Line_6 $$ org.jboss.netty.handler.codec.http.HttpResponse resp-->Line_8 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_0, status)[ FD ]
Line_42 $$ Map<String, List<String>> customHeaders = response.getHeaders()-->Line_44 $$ for (Map.Entry<String, List<String>> headerEntry : customHeaders.entrySet()) [ FD ]
Line_78 $$ OrderedDownstreamChannelEvent downstreamChannelEvent = new OrderedDownstreamChannelEvent(orderedUpstreamMessageEvent, 0, true, resp)-->Line_79 $$ future = downstreamChannelEvent.getFuture()[ FD ]
Line_6 $$ org.jboss.netty.handler.codec.http.HttpResponse resp-->Line_55 $$ resp.setContent(buffer)[ FD ]
Line_13 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_1, status)-->Line_55 $$ resp.setContent(buffer)[ FD ]
Line_8 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_0, status)-->Line_59 $$ if (!resp.headers().contains(HttpHeaders.Names.CONTENT_LENGTH)) [ FD ]
Line_6 $$ org.jboss.netty.handler.codec.http.HttpResponse resp-->Line_56 $$ if (!resp.headers().contains(HttpHeaders.Names.CONTENT_TYPE)) [ FD ]
Line_51 $$ ChannelBuffer buffer-->Line_55 $$ resp.setContent(buffer)[ FD ]
Line_6 $$ org.jboss.netty.handler.codec.http.HttpResponse resp-->Line_10 $$ resp.headers().add(HttpHeaders.Names.CONNECTION, "Keep-Alive")[ FD ]
Line_2 $$ public void sendResponse(RestResponse response) -->Line_15 $$ if (RestUtils.isBrowser(nettyRequest.headers().get(USER_AGENT))) [ CD ]
Line_18 $$ if (!Strings.isNullOrEmpty(originHeader)) -->Line_19 $$ if (corsPattern == null) [ CD ]
Line_13 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_1, status)-->Line_40 $$ resp.headers().add("X-Opaque-Id", opaque)[ FD ]
Line_56 $$ if (!resp.headers().contains(HttpHeaders.Names.CONTENT_TYPE)) -->Line_57 $$ resp.headers().add(HttpHeaders.Names.CONTENT_TYPE, response.contentType())[ CD ]
Line_13 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_1, status)-->Line_22 $$ resp.headers().add(ACCESS_CONTROL_ALLOW_ORIGIN, allowedOrigins)[ FD ]
Line_6 $$ org.jboss.netty.handler.codec.http.HttpResponse resp-->Line_40 $$ resp.headers().add("X-Opaque-Id", opaque)[ FD ]
Line_79 $$ future = downstreamChannelEvent.getFuture()-->Line_85 $$ future.addListener(new ReleaseChannelFutureListener((Releasable) content))[ FD ]
Line_68 $$ CookieEncoder cookieEncoder = new CookieEncoder(true)-->Line_70 $$ cookieEncoder.addCookie(cookie)[ FD ]
Line_88 $$ if (close) -->Line_89 $$ future.addListener(ChannelFutureListener.CLOSE)[ CD ]
Line_76 $$ ChannelFuture future-->Line_79 $$ future = downstreamChannelEvent.getFuture()[ FD ]
Line_16 $$ if (transport.settings().getAsBoolean(SETTING_CORS_ENABLED, false)) -->Line_28 $$ if (nettyRequest.getMethod() == HttpMethod.OPTIONS) [ CD ]
Line_2 $$ public void sendResponse(RestResponse response) -->Line_57 $$ resp.headers().add(HttpHeaders.Names.CONTENT_TYPE, response.contentType())[ FD ]
Line_77 $$ if (orderedUpstreamMessageEvent != null) -->Line_82 $$ future = channel.write(resp)[ CD ]
Line_6 $$ org.jboss.netty.handler.codec.http.HttpResponse resp-->Line_59 $$ if (!resp.headers().contains(HttpHeaders.Names.CONTENT_LENGTH)) [ FD ]
Line_7 $$ if (http10) -->Line_13 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_1, status)[ CD ]
Line_78 $$ OrderedDownstreamChannelEvent downstreamChannelEvent = new OrderedDownstreamChannelEvent(orderedUpstreamMessageEvent, 0, true, resp)-->Line_80 $$ channel.getPipeline().sendDownstream(downstreamChannelEvent)[ FD ]
Line_8 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_0, status)-->Line_31 $$ resp.headers().add(ACCESS_CONTROL_ALLOW_HEADERS, transport.settings().get(SETTING_CORS_ALLOW_HEADERS, "X-Requested-With, Content-Type, Content-Length"))[ FD ]
Line_38 $$ String opaque = nettyRequest.headers().get("X-Opaque-Id")-->Line_39 $$ if (opaque != null) [ FD ]
Line_19 $$ if (corsPattern == null) -->Line_21 $$ if (!Strings.isNullOrEmpty(allowedOrigins)) [ CD ]
Line_51 $$ ChannelBuffer buffer-->Line_54 $$ buffer = content.toChannelBuffer()[ FD ]
Line_2 $$ public void sendResponse(RestResponse response) -->Line_5 $$ HttpResponseStatus status = getStatus(response.status())[ CD ]
Line_54 $$ buffer = content.toChannelBuffer()-->Line_55 $$ resp.setContent(buffer)[ FD ]
Line_67 $$ if (!cookies.isEmpty()) -->Line_68 $$ CookieEncoder cookieEncoder = new CookieEncoder(true)[ CD ]
Line_19 $$ if (corsPattern == null) -->Line_25 $$ resp.headers().add(ACCESS_CONTROL_ALLOW_ORIGIN, corsPattern.matcher(originHeader).matches() ? originHeader : "null")[ CD ]
Line_8 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_0, status)-->Line_30 $$ resp.headers().add(ACCESS_CONTROL_ALLOW_METHODS, transport.settings().get(SETTING_CORS_ALLOW_METHODS, "OPTIONS, HEAD, GET, POST, PUT, DELETE"))[ FD ]
Line_6 $$ org.jboss.netty.handler.codec.http.HttpResponse resp-->Line_29 $$ resp.headers().add(ACCESS_CONTROL_MAX_AGE, transport.settings().getAsInt(SETTING_CORS_MAX_AGE, 1728000))[ FD ]
Line_8 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_0, status)-->Line_13 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_1, status)[ FD ]
Line_50 $$ BytesReference content = response.content()-->Line_54 $$ buffer = content.toChannelBuffer()[ FD ]
Line_7 $$ if (http10) -->Line_9 $$ if (!close) [ CD ]
Line_13 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_1, status)-->Line_46 $$ resp.headers().add(headerEntry.getKey(), headerValue)[ FD ]
Line_16 $$ if (transport.settings().getAsBoolean(SETTING_CORS_ENABLED, false)) -->Line_33 $$ if (transport.settings().getAsBoolean(SETTING_CORS_ALLOW_CREDENTIALS, false)) [ CD ]
Line_77 $$ if (orderedUpstreamMessageEvent != null) -->Line_80 $$ channel.getPipeline().sendDownstream(downstreamChannelEvent)[ CD ]
Line_92 $$ if (!addedReleaseListener && content instanceof Releasable) -->Line_93 $$ ((Releasable) content).close()[ CD ]
Line_2 $$ public void sendResponse(RestResponse response) -->Line_50 $$ BytesReference content = response.content()[ FD ]
Line_13 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_1, status)-->Line_72 $$ resp.headers().add(HttpHeaders.Names.SET_COOKIE, cookieEncoder.encode())[ FD ]
Line_44 $$ for (Map.Entry<String, List<String>> headerEntry : customHeaders.entrySet()) -->Line_45 $$ for (String headerValue : headerEntry.getValue()) [ FD ]
Line_67 $$ if (!cookies.isEmpty()) -->Line_72 $$ resp.headers().add(HttpHeaders.Names.SET_COOKIE, cookieEncoder.encode())[ CD ]
Line_76 $$ ChannelFuture future-->Line_85 $$ future.addListener(new ReleaseChannelFutureListener((Releasable) content))[ FD ]
Line_38 $$ String opaque = nettyRequest.headers().get("X-Opaque-Id")-->Line_40 $$ resp.headers().add("X-Opaque-Id", opaque)[ FD ]
Line_77 $$ if (orderedUpstreamMessageEvent != null) -->Line_78 $$ OrderedDownstreamChannelEvent downstreamChannelEvent = new OrderedDownstreamChannelEvent(orderedUpstreamMessageEvent, 0, true, resp)[ CD ]
Line_13 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_1, status)-->Line_82 $$ future = channel.write(resp)[ FD ]
Line_13 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_1, status)-->Line_60 $$ resp.headers().add(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(buffer.readableBytes()))[ FD ]
Line_13 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_1, status)-->Line_57 $$ resp.headers().add(HttpHeaders.Names.CONTENT_TYPE, response.contentType())[ FD ]
Line_2 $$ public void sendResponse(RestResponse response) -->Line_5 $$ HttpResponseStatus status = getStatus(response.status())[ FD ]
Line_2 $$ public void sendResponse(RestResponse response) -->Line_50 $$ BytesReference content = response.content()[ CD ]
Line_8 $$ resp = new DefaultHttpResponse(HttpVersion.HTTP_1_0, status)-->Line_46 $$ resp.headers().add(headerEntry.getKey(), headerValue)[ FD ]
