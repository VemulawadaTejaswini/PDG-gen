Line_18 $$ Graph.Node fromNode = g.getNode(startState.toString())-->Line_20 $$ fromNode.addEdge(toNode, entry.getKey().toString())[ FD ]
Line_4 $$ Graph g = new Graph(name)-->Line_11 $$ Graph.Node fromNode = g.getNode(startState.toString())[ FD ]
Line_8 $$ Transition<OPERAND, STATE, EVENTTYPE, EVENT> transition = entry.getValue()-->Line_9 $$ if (transition instanceof StateMachineFactory.SingleInternalArc) [ FD ]
Line_12 $$ Graph.Node toNode = g.getNode(sa.postState.toString())-->Line_20 $$ fromNode.addEdge(toNode, entry.getKey().toString())[ FD ]
Line_17 $$ while (iter.hasNext()) -->Line_19 $$ Graph.Node toNode = g.getNode(iter.next().toString())[ CD ]
Line_19 $$ Graph.Node toNode = g.getNode(iter.next().toString())-->Line_20 $$ fromNode.addEdge(toNode, entry.getKey().toString())[ FD ]
Line_17 $$ while (iter.hasNext()) -->Line_20 $$ fromNode.addEdge(toNode, entry.getKey().toString())[ CD ]
Line_9 $$ if (transition instanceof StateMachineFactory.SingleInternalArc) -->Line_11 $$ Graph.Node fromNode = g.getNode(startState.toString())[ CD ]
Line_5 $$ for (STATE startState : stateMachineTable.keySet()) -->Line_6 $$ Map<EVENTTYPE, Transition<OPERAND, STATE, EVENTTYPE, EVENT>> transitions = stateMachineTable.get(startState)[ FD ]
Line_5 $$ for (STATE startState : stateMachineTable.keySet()) -->Line_11 $$ Graph.Node fromNode = g.getNode(startState.toString())[ FD ]
Line_2 $$ public Graph generateStateGraph(String name) -->Line_25 $$ return g[ CD ]
Line_2 $$ public Graph generateStateGraph(String name) -->Line_4 $$ Graph g = new Graph(name)[ CD ]
Line_16 $$ Iterator iter = ma.validPostStates.iterator()-->Line_17 $$ while (iter.hasNext()) [ FD ]
Line_16 $$ Iterator iter = ma.validPostStates.iterator()-->Line_19 $$ Graph.Node toNode = g.getNode(iter.next().toString())[ FD ]
Line_14 $$ if (transition instanceof StateMachineFactory.MultipleInternalArc) -->Line_17 $$ while (iter.hasNext()) [ CD ]
Line_9 $$ if (transition instanceof StateMachineFactory.SingleInternalArc) -->Line_10 $$ StateMachineFactory.SingleInternalArc sa = (StateMachineFactory.SingleInternalArc) transition[ CD ]
Line_14 $$ if (transition instanceof StateMachineFactory.MultipleInternalArc) -->Line_16 $$ Iterator iter = ma.validPostStates.iterator()[ CD ]
Line_9 $$ if (transition instanceof StateMachineFactory.SingleInternalArc) -->Line_12 $$ Graph.Node toNode = g.getNode(sa.postState.toString())[ CD ]
Line_11 $$ Graph.Node fromNode = g.getNode(startState.toString())-->Line_20 $$ fromNode.addEdge(toNode, entry.getKey().toString())[ FD ]
Line_7 $$ for (Entry<EVENTTYPE, Transition<OPERAND, STATE, EVENTTYPE, EVENT>> entry : transitions.entrySet()) -->Line_8 $$ Transition<OPERAND, STATE, EVENTTYPE, EVENT> transition = entry.getValue()[ FD ]
Line_6 $$ Map<EVENTTYPE, Transition<OPERAND, STATE, EVENTTYPE, EVENT>> transitions = stateMachineTable.get(startState)-->Line_7 $$ for (Entry<EVENTTYPE, Transition<OPERAND, STATE, EVENTTYPE, EVENT>> entry : transitions.entrySet()) [ FD ]
Line_9 $$ if (transition instanceof StateMachineFactory.SingleInternalArc) -->Line_14 $$ if (transition instanceof StateMachineFactory.MultipleInternalArc) [ CD ]
Line_4 $$ Graph g = new Graph(name)-->Line_12 $$ Graph.Node toNode = g.getNode(sa.postState.toString())[ FD ]
Line_14 $$ if (transition instanceof StateMachineFactory.MultipleInternalArc) -->Line_15 $$ StateMachineFactory.MultipleInternalArc ma = (StateMachineFactory.MultipleInternalArc) transition[ CD ]
Line_8 $$ Transition<OPERAND, STATE, EVENTTYPE, EVENT> transition = entry.getValue()-->Line_14 $$ if (transition instanceof StateMachineFactory.MultipleInternalArc) [ FD ]
Line_9 $$ if (transition instanceof StateMachineFactory.SingleInternalArc) -->Line_13 $$ fromNode.addEdge(toNode, entry.getKey().toString())[ CD ]
Line_12 $$ Graph.Node toNode = g.getNode(sa.postState.toString())-->Line_13 $$ fromNode.addEdge(toNode, entry.getKey().toString())[ FD ]
Line_4 $$ Graph g = new Graph(name)-->Line_19 $$ Graph.Node toNode = g.getNode(iter.next().toString())[ FD ]
Line_17 $$ while (iter.hasNext()) -->Line_18 $$ Graph.Node fromNode = g.getNode(startState.toString())[ CD ]
Line_11 $$ Graph.Node fromNode = g.getNode(startState.toString())-->Line_13 $$ fromNode.addEdge(toNode, entry.getKey().toString())[ FD ]
Line_7 $$ for (Entry<EVENTTYPE, Transition<OPERAND, STATE, EVENTTYPE, EVENT>> entry : transitions.entrySet()) -->Line_20 $$ fromNode.addEdge(toNode, entry.getKey().toString())[ FD ]
Line_7 $$ for (Entry<EVENTTYPE, Transition<OPERAND, STATE, EVENTTYPE, EVENT>> entry : transitions.entrySet()) -->Line_13 $$ fromNode.addEdge(toNode, entry.getKey().toString())[ FD ]
Line_5 $$ for (STATE startState : stateMachineTable.keySet()) -->Line_18 $$ Graph.Node fromNode = g.getNode(startState.toString())[ FD ]
Line_2 $$ public Graph generateStateGraph(String name) -->Line_3 $$ maybeMakeStateMachineTable()[ CD ]
Line_4 $$ Graph g = new Graph(name)-->Line_18 $$ Graph.Node fromNode = g.getNode(startState.toString())[ FD ]
