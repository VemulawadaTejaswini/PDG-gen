Line_3 $$ SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create()-->Line_6 $$ accessor.setDestination(destination)[ FD ]
Line_3 $$ SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create()-->Line_5 $$ accessor.setSessionAttributes(new HashMap())[ FD ]
Line_3 $$ SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create()-->Line_12 $$ return MessageBuilder.withPayload(new byte[0]).setHeaders(accessor).build()[ FD ]
Line_2 $$ private Message<?> createMessage(String destination, Map<String, Object> headers) -->Line_3 $$ SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create()[ CD ]
Line_3 $$ SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create()-->Line_4 $$ accessor.setSessionId("session1")[ FD ]
Line_2 $$ private Message<?> createMessage(String destination, Map<String, Object> headers) -->Line_7 $$ if (headers != null) [ FD ]
Line_2 $$ private Message<?> createMessage(String destination, Map<String, Object> headers) -->Line_6 $$ accessor.setDestination(destination)[ CD ]
Line_8 $$ for (Map.Entry<String, Object> entry : headers.entrySet()) -->Line_9 $$ accessor.setHeader(entry.getKey(), entry.getValue())[ FD ]
Line_2 $$ private Message<?> createMessage(String destination, Map<String, Object> headers) -->Line_6 $$ accessor.setDestination(destination)[ FD ]
Line_3 $$ SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create()-->Line_9 $$ accessor.setHeader(entry.getKey(), entry.getValue())[ FD ]
Line_2 $$ private Message<?> createMessage(String destination, Map<String, Object> headers) -->Line_5 $$ accessor.setSessionAttributes(new HashMap())[ CD ]
Line_2 $$ private Message<?> createMessage(String destination, Map<String, Object> headers) -->Line_8 $$ for (Map.Entry<String, Object> entry : headers.entrySet()) [ FD ]
Line_2 $$ private Message<?> createMessage(String destination, Map<String, Object> headers) -->Line_4 $$ accessor.setSessionId("session1")[ CD ]
Line_2 $$ private Message<?> createMessage(String destination, Map<String, Object> headers) -->Line_7 $$ if (headers != null) [ CD ]
Line_2 $$ private Message<?> createMessage(String destination, Map<String, Object> headers) -->Line_12 $$ return MessageBuilder.withPayload(new byte[0]).setHeaders(accessor).build()[ CD ]
