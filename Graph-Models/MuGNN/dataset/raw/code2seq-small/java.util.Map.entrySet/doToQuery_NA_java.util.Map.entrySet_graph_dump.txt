Line_3 $$ Map<String, Float> resolvedFieldsAndWeights = new TreeMap()-->Line_13 $$ resolvedFieldsAndWeights.put(resolveIndexName(fieldEntry.getKey(), context), fieldEntry.getValue())[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_28 $$ Query query = sqp.parse(queryText)[ CD ]
Line_3 $$ Map<String, Float> resolvedFieldsAndWeights = new TreeMap()-->Line_10 $$ resolvedFieldsAndWeights.put(fieldName, fieldEntry.getValue())[ FD ]
Line_17 $$ Analyzer luceneAnalyzer-->Line_19 $$ luceneAnalyzer = context.getMapperService().searchAnalyzer()[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_18 $$ if (analyzer == null) [ CD ]
Line_17 $$ Analyzer luceneAnalyzer-->Line_21 $$ luceneAnalyzer = context.getAnalysisService().analyzer(analyzer)[ FD ]
Line_17 $$ Analyzer luceneAnalyzer-->Line_22 $$ if (luceneAnalyzer == null) [ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_32 $$ return query[ CD ]
Line_7 $$ for (Map.Entry<String, Float> fieldEntry : fieldsAndWeights.entrySet()) -->Line_10 $$ resolvedFieldsAndWeights.put(fieldName, fieldEntry.getValue())[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_26 $$ SimpleQueryParser sqp = new SimpleQueryParser(luceneAnalyzer, resolvedFieldsAndWeights, flags, settings)[ CD ]
Line_7 $$ for (Map.Entry<String, Float> fieldEntry : fieldsAndWeights.entrySet()) -->Line_13 $$ resolvedFieldsAndWeights.put(resolveIndexName(fieldEntry.getKey(), context), fieldEntry.getValue())[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_5 $$ resolvedFieldsAndWeights.put(resolveIndexName(context.defaultField(), context), AbstractQueryBuilder.DEFAULT_BOOST)[ FD ]
Line_18 $$ if (analyzer == null) -->Line_19 $$ luceneAnalyzer = context.getMapperService().searchAnalyzer()[ CD ]
Line_18 $$ if (analyzer == null) -->Line_21 $$ luceneAnalyzer = context.getAnalysisService().analyzer(analyzer)[ CD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_29 $$ if (minimumShouldMatch != null && query instanceof BooleanQuery) [ CD ]
Line_19 $$ luceneAnalyzer = context.getMapperService().searchAnalyzer()-->Line_22 $$ if (luceneAnalyzer == null) [ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_13 $$ resolvedFieldsAndWeights.put(resolveIndexName(fieldEntry.getKey(), context), fieldEntry.getValue())[ FD ]
Line_7 $$ for (Map.Entry<String, Float> fieldEntry : fieldsAndWeights.entrySet()) -->Line_9 $$ for (String fieldName : context.getMapperService().simpleMatchToIndexNames(fieldEntry.getKey())) [ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_19 $$ luceneAnalyzer = context.getMapperService().searchAnalyzer()[ FD ]
Line_28 $$ Query query = sqp.parse(queryText)-->Line_30 $$ query = Queries.applyMinimumShouldMatch((BooleanQuery) query, minimumShouldMatch)[ FD ]
Line_4 $$ if (fieldsAndWeights.isEmpty()) -->Line_5 $$ resolvedFieldsAndWeights.put(resolveIndexName(context.defaultField(), context), AbstractQueryBuilder.DEFAULT_BOOST)[ CD ]
Line_29 $$ if (minimumShouldMatch != null && query instanceof BooleanQuery) -->Line_30 $$ query = Queries.applyMinimumShouldMatch((BooleanQuery) query, minimumShouldMatch)[ CD ]
Line_9 $$ for (String fieldName : context.getMapperService().simpleMatchToIndexNames(fieldEntry.getKey())) -->Line_10 $$ resolvedFieldsAndWeights.put(fieldName, fieldEntry.getValue())[ FD ]
Line_19 $$ luceneAnalyzer = context.getMapperService().searchAnalyzer()-->Line_21 $$ luceneAnalyzer = context.getAnalysisService().analyzer(analyzer)[ FD ]
Line_26 $$ SimpleQueryParser sqp = new SimpleQueryParser(luceneAnalyzer, resolvedFieldsAndWeights, flags, settings)-->Line_28 $$ Query query = sqp.parse(queryText)[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_3 $$ Map<String, Float> resolvedFieldsAndWeights = new TreeMap()[ CD ]
Line_26 $$ SimpleQueryParser sqp = new SimpleQueryParser(luceneAnalyzer, resolvedFieldsAndWeights, flags, settings)-->Line_27 $$ sqp.setDefaultOperator(defaultOperator.toBooleanClauseOccur())[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_21 $$ luceneAnalyzer = context.getAnalysisService().analyzer(analyzer)[ FD ]
Line_7 $$ for (Map.Entry<String, Float> fieldEntry : fieldsAndWeights.entrySet()) -->Line_8 $$ if (Regex.isSimpleMatchPattern(fieldEntry.getKey())) [ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_9 $$ for (String fieldName : context.getMapperService().simpleMatchToIndexNames(fieldEntry.getKey())) [ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_17 $$ Analyzer luceneAnalyzer[ CD ]
Line_21 $$ luceneAnalyzer = context.getAnalysisService().analyzer(analyzer)-->Line_22 $$ if (luceneAnalyzer == null) [ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_27 $$ sqp.setDefaultOperator(defaultOperator.toBooleanClauseOccur())[ CD ]
Line_18 $$ if (analyzer == null) -->Line_22 $$ if (luceneAnalyzer == null) [ CD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_4 $$ if (fieldsAndWeights.isEmpty()) [ CD ]
Line_8 $$ if (Regex.isSimpleMatchPattern(fieldEntry.getKey())) -->Line_13 $$ resolvedFieldsAndWeights.put(resolveIndexName(fieldEntry.getKey(), context), fieldEntry.getValue())[ CD ]
Line_3 $$ Map<String, Float> resolvedFieldsAndWeights = new TreeMap()-->Line_5 $$ resolvedFieldsAndWeights.put(resolveIndexName(context.defaultField(), context), AbstractQueryBuilder.DEFAULT_BOOST)[ FD ]
