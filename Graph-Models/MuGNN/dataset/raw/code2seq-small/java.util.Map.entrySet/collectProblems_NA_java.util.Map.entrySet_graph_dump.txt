Line_2 $$ private static List<MavenProjectProblem> collectProblems(VirtualFile file, State state) -->Line_11 $$ validateDependencies(file, state, result)[ FD ]
Line_2 $$ private static List<MavenProjectProblem> collectProblems(VirtualFile file, State state) -->Line_14 $$ return result[ CD ]
Line_2 $$ private static List<MavenProjectProblem> collectProblems(VirtualFile file, State state) -->Line_8 $$ result.add(createDependencyProblem(file, ProjectBundle.message("maven.project.problem.moduleNotFound", each.getValue())))[ FD ]
Line_3 $$ List<MavenProjectProblem> result = new ArrayList<MavenProjectProblem>()-->Line_8 $$ result.add(createDependencyProblem(file, ProjectBundle.message("maven.project.problem.moduleNotFound", each.getValue())))[ FD ]
Line_2 $$ private static List<MavenProjectProblem> collectProblems(VirtualFile file, State state) -->Line_11 $$ validateDependencies(file, state, result)[ CD ]
Line_3 $$ List<MavenProjectProblem> result = new ArrayList<MavenProjectProblem>()-->Line_5 $$ result.addAll(state.myReadingProblems)[ FD ]
Line_3 $$ List<MavenProjectProblem> result = new ArrayList<MavenProjectProblem>()-->Line_11 $$ validateDependencies(file, state, result)[ FD ]
Line_3 $$ List<MavenProjectProblem> result = new ArrayList<MavenProjectProblem>()-->Line_4 $$ validateParent(file, state, result)[ FD ]
Line_2 $$ private static List<MavenProjectProblem> collectProblems(VirtualFile file, State state) -->Line_12 $$ validateExtensions(file, state, result)[ FD ]
Line_2 $$ private static List<MavenProjectProblem> collectProblems(VirtualFile file, State state) -->Line_3 $$ List<MavenProjectProblem> result = new ArrayList<MavenProjectProblem>()[ CD ]
Line_6 $$ for (Map.Entry<String, String> each : state.myModulesPathsAndNames.entrySet()) -->Line_7 $$ if (LocalFileSystem.getInstance().findFileByPath(each.getKey()) == null) [ FD ]
Line_2 $$ private static List<MavenProjectProblem> collectProblems(VirtualFile file, State state) -->Line_4 $$ validateParent(file, state, result)[ CD ]
Line_2 $$ private static List<MavenProjectProblem> collectProblems(VirtualFile file, State state) -->Line_5 $$ result.addAll(state.myReadingProblems)[ CD ]
Line_2 $$ private static List<MavenProjectProblem> collectProblems(VirtualFile file, State state) -->Line_13 $$ validatePlugins(file, state, result)[ CD ]
Line_2 $$ private static List<MavenProjectProblem> collectProblems(VirtualFile file, State state) -->Line_12 $$ validateExtensions(file, state, result)[ CD ]
Line_7 $$ if (LocalFileSystem.getInstance().findFileByPath(each.getKey()) == null) -->Line_8 $$ result.add(createDependencyProblem(file, ProjectBundle.message("maven.project.problem.moduleNotFound", each.getValue())))[ CD ]
Line_6 $$ for (Map.Entry<String, String> each : state.myModulesPathsAndNames.entrySet()) -->Line_8 $$ result.add(createDependencyProblem(file, ProjectBundle.message("maven.project.problem.moduleNotFound", each.getValue())))[ FD ]
Line_3 $$ List<MavenProjectProblem> result = new ArrayList<MavenProjectProblem>()-->Line_12 $$ validateExtensions(file, state, result)[ FD ]
Line_2 $$ private static List<MavenProjectProblem> collectProblems(VirtualFile file, State state) -->Line_4 $$ validateParent(file, state, result)[ FD ]
Line_2 $$ private static List<MavenProjectProblem> collectProblems(VirtualFile file, State state) -->Line_13 $$ validatePlugins(file, state, result)[ FD ]
Line_3 $$ List<MavenProjectProblem> result = new ArrayList<MavenProjectProblem>()-->Line_13 $$ validatePlugins(file, state, result)[ FD ]
