Line_2 $$ private static FileContext createContext(URI uri, RepositorySettings repositorySettings) -->Line_6 $$ Map<String, String> map = repositorySettings.settings().getByPrefix("conf.").getAsMap()[ CD ]
Line_24 $$ AbstractFileSystem fs = AbstractFileSystem.get(uri, cfg)-->Line_25 $$ return FileContext.getFileContext(fs, cfg)[ FD ]
Line_7 $$ for (Entry<String, String> entry : map.entrySet()) -->Line_8 $$ cfg.set(entry.getKey(), entry.getValue())[ FD ]
Line_10 $$ Subject subject-->Line_16 $$ subject = new Subject(false, Collections.singleton(principal), Collections.emptySet(), Collections.emptySet())[ FD ]
Line_10 $$ Subject subject-->Line_21 $$ return Subject.doAs(subject, new PrivilegedAction<FileContext>() [ FD ]
Line_2 $$ private static FileContext createContext(URI uri, RepositorySettings repositorySettings) -->Line_5 $$ cfg.reloadConfiguration()[ CD ]
Line_3 $$ Configuration cfg = new Configuration(repositorySettings.settings().getAsBoolean("load_defaults", true))-->Line_24 $$ AbstractFileSystem fs = AbstractFileSystem.get(uri, cfg)[ FD ]
Line_3 $$ Configuration cfg = new Configuration(repositorySettings.settings().getAsBoolean("load_defaults", true))-->Line_4 $$ cfg.setClassLoader(HdfsRepository.class.getClassLoader())[ FD ]
Line_13 $$ Constructor<?> ctor = clazz.getConstructor(String.class)-->Line_14 $$ ctor.setAccessible(true)[ FD ]
Line_2 $$ private static FileContext createContext(URI uri, RepositorySettings repositorySettings) -->Line_24 $$ AbstractFileSystem fs = AbstractFileSystem.get(uri, cfg)[ FD ]
Line_2 $$ private static FileContext createContext(URI uri, RepositorySettings repositorySettings) -->Line_3 $$ Configuration cfg = new Configuration(repositorySettings.settings().getAsBoolean("load_defaults", true))[ CD ]
Line_16 $$ subject = new Subject(false, Collections.singleton(principal), Collections.emptySet(), Collections.emptySet())-->Line_21 $$ return Subject.doAs(subject, new PrivilegedAction<FileContext>() [ FD ]
Line_3 $$ Configuration cfg = new Configuration(repositorySettings.settings().getAsBoolean("load_defaults", true))-->Line_5 $$ cfg.reloadConfiguration()[ FD ]
Line_6 $$ Map<String, String> map = repositorySettings.settings().getByPrefix("conf.").getAsMap()-->Line_7 $$ for (Entry<String, String> entry : map.entrySet()) [ FD ]
Line_2 $$ private static FileContext createContext(URI uri, RepositorySettings repositorySettings) -->Line_4 $$ cfg.setClassLoader(HdfsRepository.class.getClassLoader())[ CD ]
Line_2 $$ private static FileContext createContext(URI uri, RepositorySettings repositorySettings) -->Line_21 $$ return Subject.doAs(subject, new PrivilegedAction<FileContext>() [ CD ]
Line_13 $$ Constructor<?> ctor = clazz.getConstructor(String.class)-->Line_15 $$ Principal principal = (Principal) ctor.newInstance(System.getProperty("user.name"))[ FD ]
Line_3 $$ Configuration cfg = new Configuration(repositorySettings.settings().getAsBoolean("load_defaults", true))-->Line_20 $$ cfg.setBoolean("fs.hdfs.impl.disable.cache", true)[ FD ]
Line_2 $$ private static FileContext createContext(URI uri, RepositorySettings repositorySettings) -->Line_20 $$ cfg.setBoolean("fs.hdfs.impl.disable.cache", true)[ CD ]
Line_2 $$ private static FileContext createContext(URI uri, RepositorySettings repositorySettings) -->Line_3 $$ Configuration cfg = new Configuration(repositorySettings.settings().getAsBoolean("load_defaults", true))[ FD ]
Line_12 $$ Class<?> clazz = Class.forName("org.apache.hadoop.security.User")-->Line_13 $$ Constructor<?> ctor = clazz.getConstructor(String.class)[ FD ]
Line_3 $$ Configuration cfg = new Configuration(repositorySettings.settings().getAsBoolean("load_defaults", true))-->Line_25 $$ return FileContext.getFileContext(fs, cfg)[ FD ]
Line_3 $$ Configuration cfg = new Configuration(repositorySettings.settings().getAsBoolean("load_defaults", true))-->Line_8 $$ cfg.set(entry.getKey(), entry.getValue())[ FD ]
Line_2 $$ private static FileContext createContext(URI uri, RepositorySettings repositorySettings) -->Line_6 $$ Map<String, String> map = repositorySettings.settings().getByPrefix("conf.").getAsMap()[ FD ]
Line_15 $$ Principal principal = (Principal) ctor.newInstance(System.getProperty("user.name"))-->Line_16 $$ subject = new Subject(false, Collections.singleton(principal), Collections.emptySet(), Collections.emptySet())[ FD ]
Line_2 $$ private static FileContext createContext(URI uri, RepositorySettings repositorySettings) -->Line_10 $$ Subject subject[ CD ]
