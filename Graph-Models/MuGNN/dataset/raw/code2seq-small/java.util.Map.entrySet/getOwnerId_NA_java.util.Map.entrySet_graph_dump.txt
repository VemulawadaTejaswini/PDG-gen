Line_2 $$ public Serializable getOwnerId(String entityName, String propertyName, Object childEntity, Map mergeMap) -->Line_39 $$ boolean found = isFoundInParent(propertyName, childEntity, persister, collectionPersister, mergeMap.get(proxy))[ FD ]
Line_3 $$ final String collectionRole = entityName + '.' + propertyName-->Line_5 $$ final CollectionPersister collectionPersister = session.getFactory().getCollectionPersister(collectionRole)[ FD ]
Line_19 $$ boolean found = isFoundInParent(propertyName, childEntity, persister, collectionPersister, entityEntryInstance)-->Line_20 $$ if (!found && mergeMap != null) [ FD ]
Line_22 $$ final Object unmergedChild = mergeMap.get(childEntity)-->Line_24 $$ found = isFoundInParent(propertyName, unmergedChild, persister, collectionPersister, unmergedInstance)[ FD ]
Line_4 $$ final EntityPersister persister = session.getFactory().getEntityPersister(entityName)-->Line_38 $$ if (persister.isSubclassEntityName(proxy.getHibernateLazyInitializer().getEntityName())) [ FD ]
Line_15 $$ for (Entry<Object, EntityEntry> me : reentrantSafeEntityEntries()) -->Line_16 $$ final EntityEntry entityEntry = me.getValue()[ FD ]
Line_35 $$ final Entry mergeMapEntry = (Entry) o-->Line_37 $$ final HibernateProxy proxy = (HibernateProxy) mergeMapEntry.getKey()[ FD ]
Line_17 $$ if (persister.isSubclassEntityName(entityEntry.getEntityName())) -->Line_20 $$ if (!found && mergeMap != null) [ CD ]
Line_5 $$ final CollectionPersister collectionPersister = session.getFactory().getCollectionPersister(collectionRole)-->Line_42 $$ found = isFoundInParent(propertyName, mergeMap.get(childEntity), persister, collectionPersister, mergeMap.get(proxy))[ FD ]
Line_2 $$ public Serializable getOwnerId(String entityName, String propertyName, Object childEntity, Map mergeMap) -->Line_5 $$ final CollectionPersister collectionPersister = session.getFactory().getCollectionPersister(collectionRole)[ CD ]
Line_9 $$ if (persister.isSubclassEntityName(entityEntry.getEntityName()) && isFoundInParent(propertyName, childEntity, persister, collectionPersister, parent)) -->Line_12 $$ parentsByChild.remove(childEntity)[ CD ]
Line_21 $$ final Object unmergedInstance = mergeMap.get(entityEntryInstance)-->Line_24 $$ found = isFoundInParent(propertyName, unmergedChild, persister, collectionPersister, unmergedInstance)[ FD ]
Line_19 $$ boolean found = isFoundInParent(propertyName, childEntity, persister, collectionPersister, entityEntryInstance)-->Line_24 $$ found = isFoundInParent(propertyName, unmergedChild, persister, collectionPersister, unmergedInstance)[ FD ]
Line_5 $$ final CollectionPersister collectionPersister = session.getFactory().getCollectionPersister(collectionRole)-->Line_39 $$ boolean found = isFoundInParent(propertyName, childEntity, persister, collectionPersister, mergeMap.get(proxy))[ FD ]
Line_2 $$ public Serializable getOwnerId(String entityName, String propertyName, Object childEntity, Map mergeMap) -->Line_22 $$ final Object unmergedChild = mergeMap.get(childEntity)[ FD ]
Line_18 $$ final Object entityEntryInstance = me.getKey()-->Line_21 $$ final Object unmergedInstance = mergeMap.get(entityEntryInstance)[ FD ]
Line_38 $$ if (persister.isSubclassEntityName(proxy.getHibernateLazyInitializer().getEntityName())) -->Line_41 $$ if (!found) [ CD ]
Line_2 $$ public Serializable getOwnerId(String entityName, String propertyName, Object childEntity, Map mergeMap) -->Line_3 $$ final String collectionRole = entityName + '.' + propertyName[ CD ]
Line_24 $$ found = isFoundInParent(propertyName, unmergedChild, persister, collectionPersister, unmergedInstance)-->Line_42 $$ found = isFoundInParent(propertyName, mergeMap.get(childEntity), persister, collectionPersister, mergeMap.get(proxy))[ FD ]
Line_4 $$ final EntityPersister persister = session.getFactory().getEntityPersister(entityName)-->Line_9 $$ if (persister.isSubclassEntityName(entityEntry.getEntityName()) && isFoundInParent(propertyName, childEntity, persister, collectionPersister, parent)) [ FD ]
Line_7 $$ if (parent != null) -->Line_9 $$ if (persister.isSubclassEntityName(entityEntry.getEntityName()) && isFoundInParent(propertyName, childEntity, persister, collectionPersister, parent)) [ CD ]
Line_5 $$ final CollectionPersister collectionPersister = session.getFactory().getCollectionPersister(collectionRole)-->Line_24 $$ found = isFoundInParent(propertyName, unmergedChild, persister, collectionPersister, unmergedInstance)[ FD ]
Line_2 $$ public Serializable getOwnerId(String entityName, String propertyName, Object childEntity, Map mergeMap) -->Line_19 $$ boolean found = isFoundInParent(propertyName, childEntity, persister, collectionPersister, entityEntryInstance)[ FD ]
Line_37 $$ final HibernateProxy proxy = (HibernateProxy) mergeMapEntry.getKey()-->Line_39 $$ boolean found = isFoundInParent(propertyName, childEntity, persister, collectionPersister, mergeMap.get(proxy))[ FD ]
Line_37 $$ final HibernateProxy proxy = (HibernateProxy) mergeMapEntry.getKey()-->Line_38 $$ if (persister.isSubclassEntityName(proxy.getHibernateLazyInitializer().getEntityName())) [ FD ]
Line_2 $$ public Serializable getOwnerId(String entityName, String propertyName, Object childEntity, Map mergeMap) -->Line_4 $$ final EntityPersister persister = session.getFactory().getEntityPersister(entityName)[ FD ]
Line_17 $$ if (persister.isSubclassEntityName(entityEntry.getEntityName())) -->Line_18 $$ final Object entityEntryInstance = me.getKey()[ CD ]
Line_4 $$ final EntityPersister persister = session.getFactory().getEntityPersister(entityName)-->Line_19 $$ boolean found = isFoundInParent(propertyName, childEntity, persister, collectionPersister, entityEntryInstance)[ FD ]
Line_2 $$ public Serializable getOwnerId(String entityName, String propertyName, Object childEntity, Map mergeMap) -->Line_6 $$ final Object parent = parentsByChild.get(childEntity)[ CD ]
Line_2 $$ public Serializable getOwnerId(String entityName, String propertyName, Object childEntity, Map mergeMap) -->Line_4 $$ final EntityPersister persister = session.getFactory().getEntityPersister(entityName)[ CD ]
Line_8 $$ final EntityEntry entityEntry = entityEntryContext.getEntityEntry(parent)-->Line_17 $$ if (persister.isSubclassEntityName(entityEntry.getEntityName())) [ FD ]
Line_2 $$ public Serializable getOwnerId(String entityName, String propertyName, Object childEntity, Map mergeMap) -->Line_12 $$ parentsByChild.remove(childEntity)[ FD ]
Line_18 $$ final Object entityEntryInstance = me.getKey()-->Line_19 $$ boolean found = isFoundInParent(propertyName, childEntity, persister, collectionPersister, entityEntryInstance)[ FD ]
Line_2 $$ public Serializable getOwnerId(String entityName, String propertyName, Object childEntity, Map mergeMap) -->Line_6 $$ final Object parent = parentsByChild.get(childEntity)[ FD ]
Line_19 $$ boolean found = isFoundInParent(propertyName, childEntity, persister, collectionPersister, entityEntryInstance)-->Line_42 $$ found = isFoundInParent(propertyName, mergeMap.get(childEntity), persister, collectionPersister, mergeMap.get(proxy))[ FD ]
Line_2 $$ public Serializable getOwnerId(String entityName, String propertyName, Object childEntity, Map mergeMap) -->Line_34 $$ for (Object o : mergeMap.entrySet()) [ FD ]
Line_36 $$ if (mergeMapEntry.getKey() instanceof HibernateProxy) -->Line_38 $$ if (persister.isSubclassEntityName(proxy.getHibernateLazyInitializer().getEntityName())) [ CD ]
Line_37 $$ final HibernateProxy proxy = (HibernateProxy) mergeMapEntry.getKey()-->Line_46 $$ return proxy.getHibernateLazyInitializer().getIdentifier()[ FD ]
Line_5 $$ final CollectionPersister collectionPersister = session.getFactory().getCollectionPersister(collectionRole)-->Line_9 $$ if (persister.isSubclassEntityName(entityEntry.getEntityName()) && isFoundInParent(propertyName, childEntity, persister, collectionPersister, parent)) [ FD ]
Line_38 $$ if (persister.isSubclassEntityName(proxy.getHibernateLazyInitializer().getEntityName())) -->Line_39 $$ boolean found = isFoundInParent(propertyName, childEntity, persister, collectionPersister, mergeMap.get(proxy))[ CD ]
Line_8 $$ final EntityEntry entityEntry = entityEntryContext.getEntityEntry(parent)-->Line_9 $$ if (persister.isSubclassEntityName(entityEntry.getEntityName()) && isFoundInParent(propertyName, childEntity, persister, collectionPersister, parent)) [ FD ]
Line_9 $$ if (persister.isSubclassEntityName(entityEntry.getEntityName()) && isFoundInParent(propertyName, childEntity, persister, collectionPersister, parent)) -->Line_10 $$ return getEntry(parent).getId()[ CD ]
Line_20 $$ if (!found && mergeMap != null) -->Line_21 $$ final Object unmergedInstance = mergeMap.get(entityEntryInstance)[ CD ]
Line_19 $$ boolean found = isFoundInParent(propertyName, childEntity, persister, collectionPersister, entityEntryInstance)-->Line_41 $$ if (!found) [ FD ]
Line_5 $$ final CollectionPersister collectionPersister = session.getFactory().getCollectionPersister(collectionRole)-->Line_19 $$ boolean found = isFoundInParent(propertyName, childEntity, persister, collectionPersister, entityEntryInstance)[ FD ]
Line_2 $$ public Serializable getOwnerId(String entityName, String propertyName, Object childEntity, Map mergeMap) -->Line_33 $$ if (mergeMap != null) [ CD ]
Line_6 $$ final Object parent = parentsByChild.get(childEntity)-->Line_8 $$ final EntityEntry entityEntry = entityEntryContext.getEntityEntry(parent)[ FD ]
Line_15 $$ for (Entry<Object, EntityEntry> me : reentrantSafeEntityEntries()) -->Line_18 $$ final Object entityEntryInstance = me.getKey()[ FD ]
Line_37 $$ final HibernateProxy proxy = (HibernateProxy) mergeMapEntry.getKey()-->Line_42 $$ found = isFoundInParent(propertyName, mergeMap.get(childEntity), persister, collectionPersister, mergeMap.get(proxy))[ FD ]
Line_38 $$ if (persister.isSubclassEntityName(proxy.getHibernateLazyInitializer().getEntityName())) -->Line_40 $$ LOG.debugf("Detached proxy being merged has a collection that [%s] the managed child.", (found ? "contains" : "does not contain"))[ CD ]
Line_6 $$ final Object parent = parentsByChild.get(childEntity)-->Line_10 $$ return getEntry(parent).getId()[ FD ]
Line_20 $$ if (!found && mergeMap != null) -->Line_22 $$ final Object unmergedChild = mergeMap.get(childEntity)[ CD ]
Line_2 $$ public Serializable getOwnerId(String entityName, String propertyName, Object childEntity, Map mergeMap) -->Line_33 $$ if (mergeMap != null) [ FD ]
Line_2 $$ public Serializable getOwnerId(String entityName, String propertyName, Object childEntity, Map mergeMap) -->Line_24 $$ found = isFoundInParent(propertyName, unmergedChild, persister, collectionPersister, unmergedInstance)[ FD ]
Line_2 $$ public Serializable getOwnerId(String entityName, String propertyName, Object childEntity, Map mergeMap) -->Line_42 $$ found = isFoundInParent(propertyName, mergeMap.get(childEntity), persister, collectionPersister, mergeMap.get(proxy))[ FD ]
Line_4 $$ final EntityPersister persister = session.getFactory().getEntityPersister(entityName)-->Line_42 $$ found = isFoundInParent(propertyName, mergeMap.get(childEntity), persister, collectionPersister, mergeMap.get(proxy))[ FD ]
Line_23 $$ if (unmergedInstance != null && unmergedChild != null) -->Line_25 $$ LOG.debugf("Detached object being merged (corresponding with a managed entity) has a collection that [%s] the detached child.", (found ? "contains" : "does not contain"))[ CD ]
Line_38 $$ if (persister.isSubclassEntityName(proxy.getHibernateLazyInitializer().getEntityName())) -->Line_45 $$ if (found) [ CD ]
Line_23 $$ if (unmergedInstance != null && unmergedChild != null) -->Line_24 $$ found = isFoundInParent(propertyName, unmergedChild, persister, collectionPersister, unmergedInstance)[ CD ]
Line_41 $$ if (!found) -->Line_43 $$ LOG.debugf("Detached proxy being merged has a collection that [%s] the detached child being merged..", (found ? "contains" : "does not contain"))[ CD ]
Line_41 $$ if (!found) -->Line_42 $$ found = isFoundInParent(propertyName, mergeMap.get(childEntity), persister, collectionPersister, mergeMap.get(proxy))[ CD ]
Line_2 $$ public Serializable getOwnerId(String entityName, String propertyName, Object childEntity, Map mergeMap) -->Line_52 $$ return null[ CD ]
Line_7 $$ if (parent != null) -->Line_8 $$ final EntityEntry entityEntry = entityEntryContext.getEntityEntry(parent)[ CD ]
Line_4 $$ final EntityPersister persister = session.getFactory().getEntityPersister(entityName)-->Line_39 $$ boolean found = isFoundInParent(propertyName, childEntity, persister, collectionPersister, mergeMap.get(proxy))[ FD ]
Line_45 $$ if (found) -->Line_46 $$ return proxy.getHibernateLazyInitializer().getIdentifier()[ CD ]
Line_8 $$ final EntityEntry entityEntry = entityEntryContext.getEntityEntry(parent)-->Line_29 $$ return entityEntry.getId()[ FD ]
Line_6 $$ final Object parent = parentsByChild.get(childEntity)-->Line_7 $$ if (parent != null) [ FD ]
Line_4 $$ final EntityPersister persister = session.getFactory().getEntityPersister(entityName)-->Line_17 $$ if (persister.isSubclassEntityName(entityEntry.getEntityName())) [ FD ]
Line_4 $$ final EntityPersister persister = session.getFactory().getEntityPersister(entityName)-->Line_24 $$ found = isFoundInParent(propertyName, unmergedChild, persister, collectionPersister, unmergedInstance)[ FD ]
Line_2 $$ public Serializable getOwnerId(String entityName, String propertyName, Object childEntity, Map mergeMap) -->Line_9 $$ if (persister.isSubclassEntityName(entityEntry.getEntityName()) && isFoundInParent(propertyName, childEntity, persister, collectionPersister, parent)) [ FD ]
Line_28 $$ if (found) -->Line_29 $$ return entityEntry.getId()[ CD ]
Line_36 $$ if (mergeMapEntry.getKey() instanceof HibernateProxy) -->Line_37 $$ final HibernateProxy proxy = (HibernateProxy) mergeMapEntry.getKey()[ CD ]
Line_17 $$ if (persister.isSubclassEntityName(entityEntry.getEntityName())) -->Line_19 $$ boolean found = isFoundInParent(propertyName, childEntity, persister, collectionPersister, entityEntryInstance)[ CD ]
Line_17 $$ if (persister.isSubclassEntityName(entityEntry.getEntityName())) -->Line_28 $$ if (found) [ CD ]
Line_35 $$ final Entry mergeMapEntry = (Entry) o-->Line_36 $$ if (mergeMapEntry.getKey() instanceof HibernateProxy) [ FD ]
Line_20 $$ if (!found && mergeMap != null) -->Line_23 $$ if (unmergedInstance != null && unmergedChild != null) [ CD ]
Line_2 $$ public Serializable getOwnerId(String entityName, String propertyName, Object childEntity, Map mergeMap) -->Line_7 $$ if (parent != null) [ CD ]
Line_6 $$ final Object parent = parentsByChild.get(childEntity)-->Line_9 $$ if (persister.isSubclassEntityName(entityEntry.getEntityName()) && isFoundInParent(propertyName, childEntity, persister, collectionPersister, parent)) [ FD ]
Line_2 $$ public Serializable getOwnerId(String entityName, String propertyName, Object childEntity, Map mergeMap) -->Line_21 $$ final Object unmergedInstance = mergeMap.get(entityEntryInstance)[ FD ]
Line_24 $$ found = isFoundInParent(propertyName, unmergedChild, persister, collectionPersister, unmergedInstance)-->Line_41 $$ if (!found) [ FD ]
