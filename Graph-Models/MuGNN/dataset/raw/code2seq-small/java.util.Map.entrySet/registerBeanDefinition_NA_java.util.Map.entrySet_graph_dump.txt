Line_2 $$ protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) throws BeansException -->Line_13 $$ String property = key.substring(prefix.length() + SEPARATOR.length())[ FD ]
Line_19 $$ String val = StringUtils.trimWhitespace((String) entry.getValue())-->Line_41 $$ pvs.add(property, val)[ FD ]
Line_13 $$ String property = key.substring(prefix.length() + SEPARATOR.length())-->Line_16 $$ if (PARENT_KEY.equals(property)) [ FD ]
Line_8 $$ ConstructorArgumentValues cas = new ConstructorArgumentValues()-->Line_35 $$ cas.addIndexedArgumentValue(index, readValue(entry))[ FD ]
Line_19 $$ String val = StringUtils.trimWhitespace((String) entry.getValue())-->Line_28 $$ lazyInit = TRUE_VALUE.equals(val)[ FD ]
Line_37 $$ if (property.endsWith(REF_SUFFIX)) -->Line_38 $$ property = property.substring(0, property.length() - REF_SUFFIX.length())[ CD ]
Line_4 $$ String parent = null-->Line_17 $$ parent = StringUtils.trimWhitespace((String) entry.getValue())[ FD ]
Line_2 $$ protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) throws BeansException -->Line_60 $$ getRegistry().registerBeanDefinition(beanName, bd)[ FD ]
Line_13 $$ String property = key.substring(prefix.length() + SEPARATOR.length())-->Line_37 $$ if (property.endsWith(REF_SUFFIX)) [ FD ]
Line_10 $$ for (Map.Entry<?, ?> entry : map.entrySet()) -->Line_24 $$ String val = StringUtils.trimWhitespace((String) entry.getValue())[ FD ]
Line_54 $$ AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(parent, className, getBeanClassLoader())-->Line_60 $$ getRegistry().registerBeanDefinition(beanName, bd)[ FD ]
Line_21 $$ if (SCOPE_KEY.equals(property)) -->Line_23 $$ if (SINGLETON_KEY.equals(property)) [ CD ]
Line_54 $$ AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(parent, className, getBeanClassLoader())-->Line_59 $$ bd.setPropertyValues(pvs)[ FD ]
Line_4 $$ String parent = null-->Line_51 $$ parent = this.defaultParentBean[ FD ]
Line_13 $$ String property = key.substring(prefix.length() + SEPARATOR.length())-->Line_14 $$ if (CLASS_KEY.equals(property)) [ FD ]
Line_37 $$ if (property.endsWith(REF_SUFFIX)) -->Line_39 $$ String ref = StringUtils.trimWhitespace((String) entry.getValue())[ CD ]
Line_10 $$ for (Map.Entry<?, ?> entry : map.entrySet()) -->Line_32 $$ cas.addIndexedArgumentValue(index, new RuntimeBeanReference(entry.getValue().toString()))[ FD ]
Line_13 $$ String property = key.substring(prefix.length() + SEPARATOR.length())-->Line_30 $$ if (property.endsWith(REF_SUFFIX)) [ FD ]
Line_3 $$ String className = null-->Line_54 $$ AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(parent, className, getBeanClassLoader())[ FD ]
Line_30 $$ if (property.endsWith(REF_SUFFIX)) -->Line_34 $$ int index = Integer.parseInt(property.substring(1))[ CD ]
Line_54 $$ AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(parent, className, getBeanClassLoader())-->Line_56 $$ bd.setAbstract(isAbstract)[ FD ]
Line_4 $$ String parent = null-->Line_54 $$ AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(parent, className, getBeanClassLoader())[ FD ]
Line_11 $$ String key = StringUtils.trimWhitespace((String) entry.getKey())-->Line_13 $$ String property = key.substring(prefix.length() + SEPARATOR.length())[ FD ]
Line_31 $$ int index = Integer.parseInt(property.substring(1, property.length() - REF_SUFFIX.length()))-->Line_35 $$ cas.addIndexedArgumentValue(index, readValue(entry))[ FD ]
Line_13 $$ String property = key.substring(prefix.length() + SEPARATOR.length())-->Line_26 $$ if (LAZY_INIT_KEY.equals(property)) [ FD ]
Line_31 $$ int index = Integer.parseInt(property.substring(1, property.length() - REF_SUFFIX.length()))-->Line_32 $$ cas.addIndexedArgumentValue(index, new RuntimeBeanReference(entry.getValue().toString()))[ FD ]
Line_5 $$ String scope = GenericBeanDefinition.SCOPE_SINGLETON-->Line_25 $$ scope = ((val == null || TRUE_VALUE.equals(val) ? GenericBeanDefinition.SCOPE_SINGLETON : GenericBeanDefinition.SCOPE_PROTOTYPE))[ FD ]
Line_3 $$ String className = null-->Line_15 $$ className = StringUtils.trimWhitespace((String) entry.getValue())[ FD ]
Line_17 $$ parent = StringUtils.trimWhitespace((String) entry.getValue())-->Line_54 $$ AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(parent, className, getBeanClassLoader())[ FD ]
Line_2 $$ protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) throws BeansException -->Line_4 $$ String parent = null[ CD ]
Line_10 $$ for (Map.Entry<?, ?> entry : map.entrySet()) -->Line_39 $$ String ref = StringUtils.trimWhitespace((String) entry.getValue())[ FD ]
Line_18 $$ if (ABSTRACT_KEY.equals(property)) -->Line_20 $$ isAbstract = TRUE_VALUE.equals(val)[ CD ]
Line_37 $$ if (property.endsWith(REF_SUFFIX)) -->Line_41 $$ pvs.add(property, val)[ CD ]
Line_2 $$ protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) throws BeansException -->Line_7 $$ boolean lazyInit = false[ CD ]
Line_25 $$ scope = ((val == null || TRUE_VALUE.equals(val) ? GenericBeanDefinition.SCOPE_SINGLETON : GenericBeanDefinition.SCOPE_PROTOTYPE))-->Line_55 $$ bd.setScope(scope)[ FD ]
Line_29 $$ if (property.startsWith(CONSTRUCTOR_ARG_PREFIX)) -->Line_30 $$ if (property.endsWith(REF_SUFFIX)) [ CD ]
Line_13 $$ String property = key.substring(prefix.length() + SEPARATOR.length())-->Line_34 $$ int index = Integer.parseInt(property.substring(1))[ FD ]
Line_17 $$ parent = StringUtils.trimWhitespace((String) entry.getValue())-->Line_51 $$ parent = this.defaultParentBean[ FD ]
Line_10 $$ for (Map.Entry<?, ?> entry : map.entrySet()) -->Line_43 $$ pvs.add(property, readValue(entry))[ FD ]
Line_10 $$ for (Map.Entry<?, ?> entry : map.entrySet()) -->Line_17 $$ parent = StringUtils.trimWhitespace((String) entry.getValue())[ FD ]
Line_29 $$ if (property.startsWith(CONSTRUCTOR_ARG_PREFIX)) -->Line_37 $$ if (property.endsWith(REF_SUFFIX)) [ CD ]
Line_10 $$ for (Map.Entry<?, ?> entry : map.entrySet()) -->Line_19 $$ String val = StringUtils.trimWhitespace((String) entry.getValue())[ FD ]
Line_26 $$ if (LAZY_INIT_KEY.equals(property)) -->Line_28 $$ lazyInit = TRUE_VALUE.equals(val)[ CD ]
Line_22 $$ scope = StringUtils.trimWhitespace((String) entry.getValue())-->Line_25 $$ scope = ((val == null || TRUE_VALUE.equals(val) ? GenericBeanDefinition.SCOPE_SINGLETON : GenericBeanDefinition.SCOPE_PROTOTYPE))[ FD ]
Line_13 $$ String property = key.substring(prefix.length() + SEPARATOR.length())-->Line_43 $$ pvs.add(property, readValue(entry))[ FD ]
Line_2 $$ protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) throws BeansException -->Line_50 $$ if (parent == null && className == null && !beanName.equals(this.defaultParentBean)) [ FD ]
Line_11 $$ String key = StringUtils.trimWhitespace((String) entry.getKey())-->Line_12 $$ if (key.startsWith(prefix + SEPARATOR)) [ FD ]
Line_10 $$ for (Map.Entry<?, ?> entry : map.entrySet()) -->Line_35 $$ cas.addIndexedArgumentValue(index, readValue(entry))[ FD ]
Line_14 $$ if (CLASS_KEY.equals(property)) -->Line_15 $$ className = StringUtils.trimWhitespace((String) entry.getValue())[ CD ]
Line_8 $$ ConstructorArgumentValues cas = new ConstructorArgumentValues()-->Line_58 $$ bd.setConstructorArgumentValues(cas)[ FD ]
Line_13 $$ String property = key.substring(prefix.length() + SEPARATOR.length())-->Line_18 $$ if (ABSTRACT_KEY.equals(property)) [ FD ]
Line_22 $$ scope = StringUtils.trimWhitespace((String) entry.getValue())-->Line_55 $$ bd.setScope(scope)[ FD ]
Line_19 $$ String val = StringUtils.trimWhitespace((String) entry.getValue())-->Line_25 $$ scope = ((val == null || TRUE_VALUE.equals(val) ? GenericBeanDefinition.SCOPE_SINGLETON : GenericBeanDefinition.SCOPE_PROTOTYPE))[ FD ]
Line_13 $$ String property = key.substring(prefix.length() + SEPARATOR.length())-->Line_21 $$ if (SCOPE_KEY.equals(property)) [ FD ]
Line_54 $$ AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(parent, className, getBeanClassLoader())-->Line_58 $$ bd.setConstructorArgumentValues(cas)[ FD ]
Line_18 $$ if (ABSTRACT_KEY.equals(property)) -->Line_19 $$ String val = StringUtils.trimWhitespace((String) entry.getValue())[ CD ]
Line_50 $$ if (parent == null && className == null && !beanName.equals(this.defaultParentBean)) -->Line_51 $$ parent = this.defaultParentBean[ CD ]
Line_12 $$ if (key.startsWith(prefix + SEPARATOR)) -->Line_13 $$ String property = key.substring(prefix.length() + SEPARATOR.length())[ CD ]
Line_23 $$ if (SINGLETON_KEY.equals(property)) -->Line_24 $$ String val = StringUtils.trimWhitespace((String) entry.getValue())[ CD ]
Line_9 $$ MutablePropertyValues pvs = new MutablePropertyValues()-->Line_41 $$ pvs.add(property, val)[ FD ]
Line_2 $$ protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) throws BeansException -->Line_9 $$ MutablePropertyValues pvs = new MutablePropertyValues()[ CD ]
Line_2 $$ protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) throws BeansException -->Line_3 $$ String className = null[ CD ]
Line_7 $$ boolean lazyInit = false-->Line_28 $$ lazyInit = TRUE_VALUE.equals(val)[ FD ]
Line_26 $$ if (LAZY_INIT_KEY.equals(property)) -->Line_29 $$ if (property.startsWith(CONSTRUCTOR_ARG_PREFIX)) [ CD ]
Line_10 $$ for (Map.Entry<?, ?> entry : map.entrySet()) -->Line_15 $$ className = StringUtils.trimWhitespace((String) entry.getValue())[ FD ]
Line_2 $$ protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) throws BeansException -->Line_10 $$ for (Map.Entry<?, ?> entry : map.entrySet()) [ FD ]
Line_38 $$ property = property.substring(0, property.length() - REF_SUFFIX.length())-->Line_41 $$ pvs.add(property, val)[ FD ]
Line_7 $$ boolean lazyInit = false-->Line_57 $$ bd.setLazyInit(lazyInit)[ FD ]
Line_47 $$ if (logger.isDebugEnabled()) -->Line_48 $$ logger.debug("Registering bean definition for bean name '" + beanName + "' with " + pvs)[ CD ]
Line_26 $$ if (LAZY_INIT_KEY.equals(property)) -->Line_27 $$ String val = StringUtils.trimWhitespace((String) entry.getValue())[ CD ]
Line_6 $$ boolean isAbstract = false-->Line_20 $$ isAbstract = TRUE_VALUE.equals(val)[ FD ]
Line_2 $$ protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) throws BeansException -->Line_5 $$ String scope = GenericBeanDefinition.SCOPE_SINGLETON[ CD ]
Line_10 $$ for (Map.Entry<?, ?> entry : map.entrySet()) -->Line_27 $$ String val = StringUtils.trimWhitespace((String) entry.getValue())[ FD ]
Line_37 $$ if (property.endsWith(REF_SUFFIX)) -->Line_43 $$ pvs.add(property, readValue(entry))[ CD ]
Line_30 $$ if (property.endsWith(REF_SUFFIX)) -->Line_35 $$ cas.addIndexedArgumentValue(index, readValue(entry))[ CD ]
Line_12 $$ if (key.startsWith(prefix + SEPARATOR)) -->Line_14 $$ if (CLASS_KEY.equals(property)) [ CD ]
Line_6 $$ boolean isAbstract = false-->Line_56 $$ bd.setAbstract(isAbstract)[ FD ]
Line_15 $$ className = StringUtils.trimWhitespace((String) entry.getValue())-->Line_54 $$ AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(parent, className, getBeanClassLoader())[ FD ]
Line_16 $$ if (PARENT_KEY.equals(property)) -->Line_17 $$ parent = StringUtils.trimWhitespace((String) entry.getValue())[ CD ]
Line_14 $$ if (CLASS_KEY.equals(property)) -->Line_16 $$ if (PARENT_KEY.equals(property)) [ CD ]
Line_23 $$ if (SINGLETON_KEY.equals(property)) -->Line_26 $$ if (LAZY_INIT_KEY.equals(property)) [ CD ]
Line_13 $$ String property = key.substring(prefix.length() + SEPARATOR.length())-->Line_23 $$ if (SINGLETON_KEY.equals(property)) [ FD ]
Line_28 $$ lazyInit = TRUE_VALUE.equals(val)-->Line_57 $$ bd.setLazyInit(lazyInit)[ FD ]
Line_9 $$ MutablePropertyValues pvs = new MutablePropertyValues()-->Line_59 $$ bd.setPropertyValues(pvs)[ FD ]
Line_16 $$ if (PARENT_KEY.equals(property)) -->Line_18 $$ if (ABSTRACT_KEY.equals(property)) [ CD ]
Line_10 $$ for (Map.Entry<?, ?> entry : map.entrySet()) -->Line_22 $$ scope = StringUtils.trimWhitespace((String) entry.getValue())[ FD ]
Line_2 $$ protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) throws BeansException -->Line_8 $$ ConstructorArgumentValues cas = new ConstructorArgumentValues()[ CD ]
Line_2 $$ protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) throws BeansException -->Line_6 $$ boolean isAbstract = false[ CD ]
Line_8 $$ ConstructorArgumentValues cas = new ConstructorArgumentValues()-->Line_32 $$ cas.addIndexedArgumentValue(index, new RuntimeBeanReference(entry.getValue().toString()))[ FD ]
Line_54 $$ AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(parent, className, getBeanClassLoader())-->Line_57 $$ bd.setLazyInit(lazyInit)[ FD ]
Line_13 $$ String property = key.substring(prefix.length() + SEPARATOR.length())-->Line_38 $$ property = property.substring(0, property.length() - REF_SUFFIX.length())[ FD ]
Line_54 $$ AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(parent, className, getBeanClassLoader())-->Line_55 $$ bd.setScope(scope)[ FD ]
Line_10 $$ for (Map.Entry<?, ?> entry : map.entrySet()) -->Line_11 $$ String key = StringUtils.trimWhitespace((String) entry.getKey())[ FD ]
Line_2 $$ protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) throws BeansException -->Line_47 $$ if (logger.isDebugEnabled()) [ CD ]
Line_18 $$ if (ABSTRACT_KEY.equals(property)) -->Line_21 $$ if (SCOPE_KEY.equals(property)) [ CD ]
Line_19 $$ String val = StringUtils.trimWhitespace((String) entry.getValue())-->Line_20 $$ isAbstract = TRUE_VALUE.equals(val)[ FD ]
Line_5 $$ String scope = GenericBeanDefinition.SCOPE_SINGLETON-->Line_22 $$ scope = StringUtils.trimWhitespace((String) entry.getValue())[ FD ]
Line_20 $$ isAbstract = TRUE_VALUE.equals(val)-->Line_56 $$ bd.setAbstract(isAbstract)[ FD ]
Line_23 $$ if (SINGLETON_KEY.equals(property)) -->Line_25 $$ scope = ((val == null || TRUE_VALUE.equals(val) ? GenericBeanDefinition.SCOPE_SINGLETON : GenericBeanDefinition.SCOPE_PROTOTYPE))[ CD ]
Line_21 $$ if (SCOPE_KEY.equals(property)) -->Line_22 $$ scope = StringUtils.trimWhitespace((String) entry.getValue())[ CD ]
Line_13 $$ String property = key.substring(prefix.length() + SEPARATOR.length())-->Line_41 $$ pvs.add(property, val)[ FD ]
Line_38 $$ property = property.substring(0, property.length() - REF_SUFFIX.length())-->Line_43 $$ pvs.add(property, readValue(entry))[ FD ]
Line_30 $$ if (property.endsWith(REF_SUFFIX)) -->Line_31 $$ int index = Integer.parseInt(property.substring(1, property.length() - REF_SUFFIX.length()))[ CD ]
Line_9 $$ MutablePropertyValues pvs = new MutablePropertyValues()-->Line_43 $$ pvs.add(property, readValue(entry))[ FD ]
Line_51 $$ parent = this.defaultParentBean-->Line_54 $$ AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(parent, className, getBeanClassLoader())[ FD ]
Line_13 $$ String property = key.substring(prefix.length() + SEPARATOR.length())-->Line_31 $$ int index = Integer.parseInt(property.substring(1, property.length() - REF_SUFFIX.length()))[ FD ]
Line_30 $$ if (property.endsWith(REF_SUFFIX)) -->Line_32 $$ cas.addIndexedArgumentValue(index, new RuntimeBeanReference(entry.getValue().toString()))[ CD ]
Line_13 $$ String property = key.substring(prefix.length() + SEPARATOR.length())-->Line_29 $$ if (property.startsWith(CONSTRUCTOR_ARG_PREFIX)) [ FD ]
Line_2 $$ protected void registerBeanDefinition(String beanName, Map<?, ?> map, String prefix, String resourceDescription) throws BeansException -->Line_50 $$ if (parent == null && className == null && !beanName.equals(this.defaultParentBean)) [ CD ]
Line_5 $$ String scope = GenericBeanDefinition.SCOPE_SINGLETON-->Line_55 $$ bd.setScope(scope)[ FD ]
