Line_15 $$ Map<String, Long> m = new LinkedHashMap()-->Line_24 $$ assertEquals(m, mt.getSerializer().deserializeForNativeProtocol(CollectionSerializer.pack(mb, m.size(), version), version))[ FD ]
Line_15 $$ Map<String, Long> m = new LinkedHashMap()-->Line_20 $$ for (Map.Entry<String, Long> entry : m.entrySet()) [ FD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_11 $$ List<ByteBuffer> sb = new ArrayList(s.size())[ CD ]
Line_9 $$ Set<String> s = new LinkedHashSet()-->Line_11 $$ List<ByteBuffer> sb = new ArrayList(s.size())[ FD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_9 $$ Set<String> s = new LinkedHashSet()[ CD ]
Line_9 $$ Set<String> s = new LinkedHashSet()-->Line_13 $$ assertEquals(s, st.getSerializer().deserializeForNativeProtocol(CollectionSerializer.pack(sb, sb.size(), version), version))[ FD ]
Line_15 $$ Map<String, Long> m = new LinkedHashMap()-->Line_17 $$ m.put("foo", 42L)[ FD ]
Line_20 $$ for (Map.Entry<String, Long> entry : m.entrySet()) -->Line_21 $$ mb.add(UTF8Type.instance.decompose(entry.getKey()))[ FD ]
Line_4 $$ List<Integer> l = Arrays.asList(2, 6, 1, 9)-->Line_5 $$ List<ByteBuffer> lb = new ArrayList(l.size())[ FD ]
Line_19 $$ List<ByteBuffer> mb = new ArrayList(m.size() * 2)-->Line_22 $$ mb.add(LongType.instance.decompose(entry.getValue()))[ FD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_13 $$ assertEquals(s, st.getSerializer().deserializeForNativeProtocol(CollectionSerializer.pack(sb, sb.size(), version), version))[ FD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_24 $$ assertEquals(m, mt.getSerializer().deserializeForNativeProtocol(CollectionSerializer.pack(mb, m.size(), version), version))[ CD ]
Line_5 $$ List<ByteBuffer> lb = new ArrayList(l.size())-->Line_7 $$ assertEquals(l, lt.getSerializer().deserializeForNativeProtocol(CollectionSerializer.pack(lb, lb.size(), version), version))[ FD ]
Line_4 $$ List<Integer> l = Arrays.asList(2, 6, 1, 9)-->Line_7 $$ assertEquals(l, lt.getSerializer().deserializeForNativeProtocol(CollectionSerializer.pack(lb, lb.size(), version), version))[ FD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_7 $$ assertEquals(l, lt.getSerializer().deserializeForNativeProtocol(CollectionSerializer.pack(lb, lb.size(), version), version))[ CD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_5 $$ List<ByteBuffer> lb = new ArrayList(l.size())[ CD ]
Line_8 $$ SetType<?> st = SetType.getInstance(UTF8Type.instance, true)-->Line_13 $$ assertEquals(s, st.getSerializer().deserializeForNativeProtocol(CollectionSerializer.pack(sb, sb.size(), version), version))[ FD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_8 $$ SetType<?> st = SetType.getInstance(UTF8Type.instance, true)[ CD ]
Line_19 $$ List<ByteBuffer> mb = new ArrayList(m.size() * 2)-->Line_24 $$ assertEquals(m, mt.getSerializer().deserializeForNativeProtocol(CollectionSerializer.pack(mb, m.size(), version), version))[ FD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_4 $$ List<Integer> l = Arrays.asList(2, 6, 1, 9)[ CD ]
Line_9 $$ Set<String> s = new LinkedHashSet()-->Line_10 $$ s.addAll(Arrays.asList("bar", "foo", "zee"))[ FD ]
Line_14 $$ MapType<?, ?> mt = MapType.getInstance(UTF8Type.instance, LongType.instance, true)-->Line_24 $$ assertEquals(m, mt.getSerializer().deserializeForNativeProtocol(CollectionSerializer.pack(mb, m.size(), version), version))[ FD ]
Line_19 $$ List<ByteBuffer> mb = new ArrayList(m.size() * 2)-->Line_21 $$ mb.add(UTF8Type.instance.decompose(entry.getKey()))[ FD ]
Line_3 $$ ListType<?> lt = ListType.getInstance(Int32Type.instance, true)-->Line_7 $$ assertEquals(l, lt.getSerializer().deserializeForNativeProtocol(CollectionSerializer.pack(lb, lb.size(), version), version))[ FD ]
Line_5 $$ List<ByteBuffer> lb = new ArrayList(l.size())-->Line_6 $$ lb.add(Int32Type.instance.decompose(i))[ FD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_14 $$ MapType<?, ?> mt = MapType.getInstance(UTF8Type.instance, LongType.instance, true)[ CD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_16 $$ m.put("bar", 12L)[ CD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_7 $$ assertEquals(l, lt.getSerializer().deserializeForNativeProtocol(CollectionSerializer.pack(lb, lb.size(), version), version))[ FD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_17 $$ m.put("foo", 42L)[ CD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_10 $$ s.addAll(Arrays.asList("bar", "foo", "zee"))[ CD ]
Line_15 $$ Map<String, Long> m = new LinkedHashMap()-->Line_16 $$ m.put("bar", 12L)[ FD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_15 $$ Map<String, Long> m = new LinkedHashMap()[ CD ]
Line_15 $$ Map<String, Long> m = new LinkedHashMap()-->Line_19 $$ List<ByteBuffer> mb = new ArrayList(m.size() * 2)[ FD ]
Line_11 $$ List<ByteBuffer> sb = new ArrayList(s.size())-->Line_13 $$ assertEquals(s, st.getSerializer().deserializeForNativeProtocol(CollectionSerializer.pack(sb, sb.size(), version), version))[ FD ]
Line_20 $$ for (Map.Entry<String, Long> entry : m.entrySet()) -->Line_22 $$ mb.add(LongType.instance.decompose(entry.getValue()))[ FD ]
Line_15 $$ Map<String, Long> m = new LinkedHashMap()-->Line_18 $$ m.put("zee", 14L)[ FD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_13 $$ assertEquals(s, st.getSerializer().deserializeForNativeProtocol(CollectionSerializer.pack(sb, sb.size(), version), version))[ CD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_3 $$ ListType<?> lt = ListType.getInstance(Int32Type.instance, true)[ CD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_19 $$ List<ByteBuffer> mb = new ArrayList(m.size() * 2)[ CD ]
Line_11 $$ List<ByteBuffer> sb = new ArrayList(s.size())-->Line_12 $$ sb.add(UTF8Type.instance.decompose(t))[ FD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_24 $$ assertEquals(m, mt.getSerializer().deserializeForNativeProtocol(CollectionSerializer.pack(mb, m.size(), version), version))[ FD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_18 $$ m.put("zee", 14L)[ CD ]
