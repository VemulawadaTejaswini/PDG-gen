Line_7 $$ targetSnapshot = new ArrayList(((List) originalSnapshot).size())-->Line_33 $$ targetSnapshot = originalSnapshot[ FD ]
Line_15 $$ targetSnapshot = new HashMap(CollectionHelper.determineProperSizing(((Map) originalSnapshot).size()), CollectionHelper.LOAD_FACTOR)-->Line_33 $$ targetSnapshot = originalSnapshot[ FD ]
Line_13 $$ targetSnapshot = new TreeMap(((SortedMap) originalSnapshot).comparator())-->Line_15 $$ targetSnapshot = new HashMap(CollectionHelper.determineProperSizing(((Map) originalSnapshot).size()), CollectionHelper.LOAD_FACTOR)[ FD ]
Line_28 $$ if (originalSnapshot instanceof Object[]) -->Line_35 $$ targetSnapshot = resultSnapshot[ CD ]
Line_17 $$ for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) originalSnapshot).entrySet()) -->Line_18 $$ Object key = entry.getKey()[ FD ]
Line_2 $$ private void preserveSnapshot(PersistentCollection original, PersistentCollection result, Type elemType, Object owner, Map copyCache, SessionImplementor session) -->Line_37 $$ CollectionEntry ce = session.getPersistenceContext().getCollectionEntry(result)[ CD ]
Line_3 $$ Serializable originalSnapshot = original.getStoredSnapshot()-->Line_12 $$ if (originalSnapshot instanceof SortedMap) [ FD ]
Line_2 $$ private void preserveSnapshot(PersistentCollection original, PersistentCollection result, Type elemType, Object owner, Map copyCache, SessionImplementor session) -->Line_39 $$ ce.resetStoredSnapshot(result, targetSnapshot)[ FD ]
Line_5 $$ Serializable targetSnapshot-->Line_7 $$ targetSnapshot = new ArrayList(((List) originalSnapshot).size())[ FD ]
Line_2 $$ private void preserveSnapshot(PersistentCollection original, PersistentCollection result, Type elemType, Object owner, Map copyCache, SessionImplementor session) -->Line_21 $$ Object newValue = elemType.replace(value, resultSnapshotValue, session, owner, copyCache)[ FD ]
Line_2 $$ private void preserveSnapshot(PersistentCollection original, PersistentCollection result, Type elemType, Object owner, Map copyCache, SessionImplementor session) -->Line_4 $$ Serializable resultSnapshot = result.getStoredSnapshot()[ FD ]
Line_2 $$ private void preserveSnapshot(PersistentCollection original, PersistentCollection result, Type elemType, Object owner, Map copyCache, SessionImplementor session) -->Line_5 $$ Serializable targetSnapshot[ CD ]
Line_5 $$ Serializable targetSnapshot-->Line_35 $$ targetSnapshot = resultSnapshot[ FD ]
Line_6 $$ if (originalSnapshot instanceof List) -->Line_7 $$ targetSnapshot = new ArrayList(((List) originalSnapshot).size())[ CD ]
Line_37 $$ CollectionEntry ce = session.getPersistenceContext().getCollectionEntry(result)-->Line_39 $$ ce.resetStoredSnapshot(result, targetSnapshot)[ FD ]
Line_2 $$ private void preserveSnapshot(PersistentCollection original, PersistentCollection result, Type elemType, Object owner, Map copyCache, SessionImplementor session) -->Line_3 $$ Serializable originalSnapshot = original.getStoredSnapshot()[ FD ]
Line_6 $$ if (originalSnapshot instanceof List) -->Line_11 $$ if (originalSnapshot instanceof Map) [ CD ]
Line_2 $$ private void preserveSnapshot(PersistentCollection original, PersistentCollection result, Type elemType, Object owner, Map copyCache, SessionImplementor session) -->Line_38 $$ if (ce != null) [ CD ]
Line_3 $$ Serializable originalSnapshot = original.getStoredSnapshot()-->Line_33 $$ targetSnapshot = originalSnapshot[ FD ]
Line_7 $$ targetSnapshot = new ArrayList(((List) originalSnapshot).size())-->Line_35 $$ targetSnapshot = resultSnapshot[ FD ]
Line_22 $$ if (key == value) -->Line_25 $$ ((Map) targetSnapshot).put(key, newValue)[ CD ]
Line_5 $$ Serializable targetSnapshot-->Line_15 $$ targetSnapshot = new HashMap(CollectionHelper.determineProperSizing(((Map) originalSnapshot).size()), CollectionHelper.LOAD_FACTOR)[ FD ]
Line_3 $$ Serializable originalSnapshot = original.getStoredSnapshot()-->Line_6 $$ if (originalSnapshot instanceof List) [ FD ]
Line_13 $$ targetSnapshot = new TreeMap(((SortedMap) originalSnapshot).comparator())-->Line_33 $$ targetSnapshot = originalSnapshot[ FD ]
Line_21 $$ Object newValue = elemType.replace(value, resultSnapshotValue, session, owner, copyCache)-->Line_23 $$ ((Map) targetSnapshot).put(newValue, newValue)[ FD ]
Line_35 $$ targetSnapshot = resultSnapshot-->Line_39 $$ ce.resetStoredSnapshot(result, targetSnapshot)[ FD ]
Line_3 $$ Serializable originalSnapshot = original.getStoredSnapshot()-->Line_11 $$ if (originalSnapshot instanceof Map) [ FD ]
Line_2 $$ private void preserveSnapshot(PersistentCollection original, PersistentCollection result, Type elemType, Object owner, Map copyCache, SessionImplementor session) -->Line_3 $$ Serializable originalSnapshot = original.getStoredSnapshot()[ CD ]
Line_15 $$ targetSnapshot = new HashMap(CollectionHelper.determineProperSizing(((Map) originalSnapshot).size()), CollectionHelper.LOAD_FACTOR)-->Line_39 $$ ce.resetStoredSnapshot(result, targetSnapshot)[ FD ]
Line_17 $$ for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) originalSnapshot).entrySet()) -->Line_19 $$ Object value = entry.getValue()[ FD ]
Line_11 $$ if (originalSnapshot instanceof Map) -->Line_28 $$ if (originalSnapshot instanceof Object[]) [ CD ]
Line_21 $$ Object newValue = elemType.replace(value, resultSnapshotValue, session, owner, copyCache)-->Line_25 $$ ((Map) targetSnapshot).put(key, newValue)[ FD ]
Line_13 $$ targetSnapshot = new TreeMap(((SortedMap) originalSnapshot).comparator())-->Line_35 $$ targetSnapshot = resultSnapshot[ FD ]
Line_18 $$ Object key = entry.getKey()-->Line_22 $$ if (key == value) [ FD ]
Line_30 $$ for (int i = 0; i < arr.length; i++) -->Line_31 $$ arr[i] = elemType.replace(arr[i], null, session, owner, copyCache)[ CD ]
Line_18 $$ Object key = entry.getKey()-->Line_20 $$ Object resultSnapshotValue = (resultSnapshot == null) ? null : ((Map<Object, Object>) resultSnapshot).get(key)[ FD ]
Line_20 $$ Object resultSnapshotValue = (resultSnapshot == null) ? null : ((Map<Object, Object>) resultSnapshot).get(key)-->Line_21 $$ Object newValue = elemType.replace(value, resultSnapshotValue, session, owner, copyCache)[ FD ]
Line_2 $$ private void preserveSnapshot(PersistentCollection original, PersistentCollection result, Type elemType, Object owner, Map copyCache, SessionImplementor session) -->Line_6 $$ if (originalSnapshot instanceof List) [ CD ]
Line_19 $$ Object value = entry.getValue()-->Line_22 $$ if (key == value) [ FD ]
Line_2 $$ private void preserveSnapshot(PersistentCollection original, PersistentCollection result, Type elemType, Object owner, Map copyCache, SessionImplementor session) -->Line_9 $$ ((List) targetSnapshot).add(elemType.replace(obj, null, session, owner, copyCache))[ FD ]
Line_22 $$ if (key == value) -->Line_23 $$ ((Map) targetSnapshot).put(newValue, newValue)[ CD ]
Line_7 $$ targetSnapshot = new ArrayList(((List) originalSnapshot).size())-->Line_15 $$ targetSnapshot = new HashMap(CollectionHelper.determineProperSizing(((Map) originalSnapshot).size()), CollectionHelper.LOAD_FACTOR)[ FD ]
Line_7 $$ targetSnapshot = new ArrayList(((List) originalSnapshot).size())-->Line_39 $$ ce.resetStoredSnapshot(result, targetSnapshot)[ FD ]
Line_8 $$ for (Object obj : (List) originalSnapshot) -->Line_9 $$ ((List) targetSnapshot).add(elemType.replace(obj, null, session, owner, copyCache))[ FD ]
Line_2 $$ private void preserveSnapshot(PersistentCollection original, PersistentCollection result, Type elemType, Object owner, Map copyCache, SessionImplementor session) -->Line_4 $$ Serializable resultSnapshot = result.getStoredSnapshot()[ CD ]
Line_7 $$ targetSnapshot = new ArrayList(((List) originalSnapshot).size())-->Line_13 $$ targetSnapshot = new TreeMap(((SortedMap) originalSnapshot).comparator())[ FD ]
Line_4 $$ Serializable resultSnapshot = result.getStoredSnapshot()-->Line_35 $$ targetSnapshot = resultSnapshot[ FD ]
Line_37 $$ CollectionEntry ce = session.getPersistenceContext().getCollectionEntry(result)-->Line_38 $$ if (ce != null) [ FD ]
Line_28 $$ if (originalSnapshot instanceof Object[]) -->Line_29 $$ Object[] arr = (Object[]) originalSnapshot[ CD ]
Line_38 $$ if (ce != null) -->Line_39 $$ ce.resetStoredSnapshot(result, targetSnapshot)[ CD ]
Line_12 $$ if (originalSnapshot instanceof SortedMap) -->Line_15 $$ targetSnapshot = new HashMap(CollectionHelper.determineProperSizing(((Map) originalSnapshot).size()), CollectionHelper.LOAD_FACTOR)[ CD ]
Line_28 $$ if (originalSnapshot instanceof Object[]) -->Line_33 $$ targetSnapshot = originalSnapshot[ CD ]
Line_15 $$ targetSnapshot = new HashMap(CollectionHelper.determineProperSizing(((Map) originalSnapshot).size()), CollectionHelper.LOAD_FACTOR)-->Line_35 $$ targetSnapshot = resultSnapshot[ FD ]
Line_28 $$ if (originalSnapshot instanceof Object[]) -->Line_30 $$ for (int i = 0; i < arr.length; i++) [ CD ]
Line_2 $$ private void preserveSnapshot(PersistentCollection original, PersistentCollection result, Type elemType, Object owner, Map copyCache, SessionImplementor session) -->Line_37 $$ CollectionEntry ce = session.getPersistenceContext().getCollectionEntry(result)[ FD ]
Line_5 $$ Serializable targetSnapshot-->Line_39 $$ ce.resetStoredSnapshot(result, targetSnapshot)[ FD ]
Line_12 $$ if (originalSnapshot instanceof SortedMap) -->Line_13 $$ targetSnapshot = new TreeMap(((SortedMap) originalSnapshot).comparator())[ CD ]
Line_19 $$ Object value = entry.getValue()-->Line_21 $$ Object newValue = elemType.replace(value, resultSnapshotValue, session, owner, copyCache)[ FD ]
Line_5 $$ Serializable targetSnapshot-->Line_33 $$ targetSnapshot = originalSnapshot[ FD ]
Line_5 $$ Serializable targetSnapshot-->Line_13 $$ targetSnapshot = new TreeMap(((SortedMap) originalSnapshot).comparator())[ FD ]
Line_2 $$ private void preserveSnapshot(PersistentCollection original, PersistentCollection result, Type elemType, Object owner, Map copyCache, SessionImplementor session) -->Line_31 $$ arr[i] = elemType.replace(arr[i], null, session, owner, copyCache)[ FD ]
Line_33 $$ targetSnapshot = originalSnapshot-->Line_35 $$ targetSnapshot = resultSnapshot[ FD ]
Line_11 $$ if (originalSnapshot instanceof Map) -->Line_12 $$ if (originalSnapshot instanceof SortedMap) [ CD ]
Line_18 $$ Object key = entry.getKey()-->Line_25 $$ ((Map) targetSnapshot).put(key, newValue)[ FD ]
Line_13 $$ targetSnapshot = new TreeMap(((SortedMap) originalSnapshot).comparator())-->Line_39 $$ ce.resetStoredSnapshot(result, targetSnapshot)[ FD ]
Line_3 $$ Serializable originalSnapshot = original.getStoredSnapshot()-->Line_28 $$ if (originalSnapshot instanceof Object[]) [ FD ]
Line_33 $$ targetSnapshot = originalSnapshot-->Line_39 $$ ce.resetStoredSnapshot(result, targetSnapshot)[ FD ]
