Line_2 $$ protected void createSecurityDomain(final Class loginModuleClass, final Map<String, String> moduleOptionsCache, final ModelControllerClient client) -->Line_12 $$ loginModule.get(ModelDescriptionConstants.CODE).set(loginModuleClass.getName())[ FD ]
Line_2 $$ protected void createSecurityDomain(final Class loginModuleClass, final Map<String, String> moduleOptionsCache, final ModelControllerClient client) -->Line_13 $$ loginModule.get(FLAG).set("required")[ CD ]
Line_2 $$ protected void createSecurityDomain(final Class loginModuleClass, final Map<String, String> moduleOptionsCache, final ModelControllerClient client) -->Line_15 $$ ModelNode moduleOptions = loginModule.get("module-options")[ CD ]
Line_7 $$ PathAddress address = PathAddress.pathAddress().append(SUBSYSTEM, "security").append(SECURITY_DOMAIN, getSecurityDomainName())-->Line_9 $$ address = address.append(Constants.AUTHENTICATION, Constants.CLASSIC)[ FD ]
Line_2 $$ protected void createSecurityDomain(final Class loginModuleClass, final Map<String, String> moduleOptionsCache, final ModelControllerClient client) -->Line_3 $$ final ModelNode compositeOp = new ModelNode()[ CD ]
Line_2 $$ protected void createSecurityDomain(final Class loginModuleClass, final Map<String, String> moduleOptionsCache, final ModelControllerClient client) -->Line_6 $$ ModelNode steps = compositeOp.get(STEPS)[ CD ]
Line_9 $$ address = address.append(Constants.AUTHENTICATION, Constants.CLASSIC)-->Line_10 $$ steps.add(Util.createAddOperation(address))[ FD ]
Line_16 $$ for (Map.Entry<String, String> entry : moduleOptionsCache.entrySet()) -->Line_17 $$ moduleOptions.get(entry.getKey()).set(entry.getValue())[ FD ]
Line_2 $$ protected void createSecurityDomain(final Class loginModuleClass, final Map<String, String> moduleOptionsCache, final ModelControllerClient client) -->Line_21 $$ applyUpdates(client, Arrays.asList(compositeOp))[ FD ]
Line_7 $$ PathAddress address = PathAddress.pathAddress().append(SUBSYSTEM, "security").append(SECURITY_DOMAIN, getSecurityDomainName())-->Line_8 $$ steps.add(Util.createAddOperation(address))[ FD ]
Line_7 $$ PathAddress address = PathAddress.pathAddress().append(SUBSYSTEM, "security").append(SECURITY_DOMAIN, getSecurityDomainName())-->Line_11 $$ ModelNode loginModule = Util.createAddOperation(address.append(LOGIN_MODULE, loginModuleClass.getName()))[ FD ]
Line_3 $$ final ModelNode compositeOp = new ModelNode()-->Line_6 $$ ModelNode steps = compositeOp.get(STEPS)[ FD ]
Line_2 $$ protected void createSecurityDomain(final Class loginModuleClass, final Map<String, String> moduleOptionsCache, final ModelControllerClient client) -->Line_4 $$ compositeOp.get(OP).set(COMPOSITE)[ CD ]
Line_2 $$ protected void createSecurityDomain(final Class loginModuleClass, final Map<String, String> moduleOptionsCache, final ModelControllerClient client) -->Line_10 $$ steps.add(Util.createAddOperation(address))[ CD ]
Line_7 $$ PathAddress address = PathAddress.pathAddress().append(SUBSYSTEM, "security").append(SECURITY_DOMAIN, getSecurityDomainName())-->Line_10 $$ steps.add(Util.createAddOperation(address))[ FD ]
Line_2 $$ protected void createSecurityDomain(final Class loginModuleClass, final Map<String, String> moduleOptionsCache, final ModelControllerClient client) -->Line_16 $$ for (Map.Entry<String, String> entry : moduleOptionsCache.entrySet()) [ FD ]
Line_11 $$ ModelNode loginModule = Util.createAddOperation(address.append(LOGIN_MODULE, loginModuleClass.getName()))-->Line_13 $$ loginModule.get(FLAG).set("required")[ FD ]
Line_6 $$ ModelNode steps = compositeOp.get(STEPS)-->Line_8 $$ steps.add(Util.createAddOperation(address))[ FD ]
Line_3 $$ final ModelNode compositeOp = new ModelNode()-->Line_4 $$ compositeOp.get(OP).set(COMPOSITE)[ FD ]
Line_2 $$ protected void createSecurityDomain(final Class loginModuleClass, final Map<String, String> moduleOptionsCache, final ModelControllerClient client) -->Line_14 $$ loginModule.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ CD ]
Line_2 $$ protected void createSecurityDomain(final Class loginModuleClass, final Map<String, String> moduleOptionsCache, final ModelControllerClient client) -->Line_5 $$ compositeOp.get(OP_ADDR).setEmptyList()[ CD ]
Line_11 $$ ModelNode loginModule = Util.createAddOperation(address.append(LOGIN_MODULE, loginModuleClass.getName()))-->Line_14 $$ loginModule.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ FD ]
Line_3 $$ final ModelNode compositeOp = new ModelNode()-->Line_5 $$ compositeOp.get(OP_ADDR).setEmptyList()[ FD ]
Line_6 $$ ModelNode steps = compositeOp.get(STEPS)-->Line_19 $$ steps.add(loginModule)[ FD ]
Line_11 $$ ModelNode loginModule = Util.createAddOperation(address.append(LOGIN_MODULE, loginModuleClass.getName()))-->Line_19 $$ steps.add(loginModule)[ FD ]
Line_2 $$ protected void createSecurityDomain(final Class loginModuleClass, final Map<String, String> moduleOptionsCache, final ModelControllerClient client) -->Line_11 $$ ModelNode loginModule = Util.createAddOperation(address.append(LOGIN_MODULE, loginModuleClass.getName()))[ FD ]
Line_2 $$ protected void createSecurityDomain(final Class loginModuleClass, final Map<String, String> moduleOptionsCache, final ModelControllerClient client) -->Line_19 $$ steps.add(loginModule)[ CD ]
Line_6 $$ ModelNode steps = compositeOp.get(STEPS)-->Line_10 $$ steps.add(Util.createAddOperation(address))[ FD ]
Line_2 $$ protected void createSecurityDomain(final Class loginModuleClass, final Map<String, String> moduleOptionsCache, final ModelControllerClient client) -->Line_8 $$ steps.add(Util.createAddOperation(address))[ CD ]
Line_3 $$ final ModelNode compositeOp = new ModelNode()-->Line_21 $$ applyUpdates(client, Arrays.asList(compositeOp))[ FD ]
Line_2 $$ protected void createSecurityDomain(final Class loginModuleClass, final Map<String, String> moduleOptionsCache, final ModelControllerClient client) -->Line_12 $$ loginModule.get(ModelDescriptionConstants.CODE).set(loginModuleClass.getName())[ CD ]
Line_11 $$ ModelNode loginModule = Util.createAddOperation(address.append(LOGIN_MODULE, loginModuleClass.getName()))-->Line_15 $$ ModelNode moduleOptions = loginModule.get("module-options")[ FD ]
Line_9 $$ address = address.append(Constants.AUTHENTICATION, Constants.CLASSIC)-->Line_11 $$ ModelNode loginModule = Util.createAddOperation(address.append(LOGIN_MODULE, loginModuleClass.getName()))[ FD ]
Line_2 $$ protected void createSecurityDomain(final Class loginModuleClass, final Map<String, String> moduleOptionsCache, final ModelControllerClient client) -->Line_9 $$ address = address.append(Constants.AUTHENTICATION, Constants.CLASSIC)[ CD ]
Line_2 $$ protected void createSecurityDomain(final Class loginModuleClass, final Map<String, String> moduleOptionsCache, final ModelControllerClient client) -->Line_11 $$ ModelNode loginModule = Util.createAddOperation(address.append(LOGIN_MODULE, loginModuleClass.getName()))[ CD ]
Line_15 $$ ModelNode moduleOptions = loginModule.get("module-options")-->Line_17 $$ moduleOptions.get(entry.getKey()).set(entry.getValue())[ FD ]
Line_11 $$ ModelNode loginModule = Util.createAddOperation(address.append(LOGIN_MODULE, loginModuleClass.getName()))-->Line_12 $$ loginModule.get(ModelDescriptionConstants.CODE).set(loginModuleClass.getName())[ FD ]
Line_2 $$ protected void createSecurityDomain(final Class loginModuleClass, final Map<String, String> moduleOptionsCache, final ModelControllerClient client) -->Line_7 $$ PathAddress address = PathAddress.pathAddress().append(SUBSYSTEM, "security").append(SECURITY_DOMAIN, getSecurityDomainName())[ CD ]
