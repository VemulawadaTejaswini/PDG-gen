Line_2 $$ private void merge(Map<String, Object> output, Map<String, Object> map) -->Line_10 $$ output.put(key, result)[ FD ]
Line_4 $$ String key = entry.getKey()-->Line_6 $$ Object existing = output.get(key)[ FD ]
Line_2 $$ private void merge(Map<String, Object> output, Map<String, Object> map) -->Line_3 $$ for (Entry<String, Object> entry : map.entrySet()) [ FD ]
Line_5 $$ Object value = entry.getValue()-->Line_12 $$ output.put(key, value)[ FD ]
Line_3 $$ for (Entry<String, Object> entry : map.entrySet()) -->Line_5 $$ Object value = entry.getValue()[ FD ]
Line_7 $$ if (value instanceof Map && existing instanceof Map) -->Line_9 $$ merge(result, (Map) value)[ CD ]
Line_8 $$ Map<String, Object> result = new LinkedHashMap<String, Object>((Map) existing)-->Line_9 $$ merge(result, (Map) value)[ FD ]
Line_4 $$ String key = entry.getKey()-->Line_12 $$ output.put(key, value)[ FD ]
Line_8 $$ Map<String, Object> result = new LinkedHashMap<String, Object>((Map) existing)-->Line_10 $$ output.put(key, result)[ FD ]
Line_7 $$ if (value instanceof Map && existing instanceof Map) -->Line_8 $$ Map<String, Object> result = new LinkedHashMap<String, Object>((Map) existing)[ CD ]
Line_2 $$ private void merge(Map<String, Object> output, Map<String, Object> map) -->Line_6 $$ Object existing = output.get(key)[ FD ]
Line_7 $$ if (value instanceof Map && existing instanceof Map) -->Line_10 $$ output.put(key, result)[ CD ]
Line_2 $$ private void merge(Map<String, Object> output, Map<String, Object> map) -->Line_12 $$ output.put(key, value)[ FD ]
Line_3 $$ for (Entry<String, Object> entry : map.entrySet()) -->Line_4 $$ String key = entry.getKey()[ FD ]
Line_4 $$ String key = entry.getKey()-->Line_10 $$ output.put(key, result)[ FD ]
Line_7 $$ if (value instanceof Map && existing instanceof Map) -->Line_12 $$ output.put(key, value)[ CD ]
