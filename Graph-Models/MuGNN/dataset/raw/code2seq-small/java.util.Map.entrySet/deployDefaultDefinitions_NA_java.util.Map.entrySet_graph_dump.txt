Line_8 $$ int kaleoDefinitionsCount = kaleoDefinitionLocalService.getKaleoDefinitionsCount(definitionName, serviceContext)-->Line_9 $$ if (kaleoDefinitionsCount > 0) [ FD ]
Line_3 $$ for (Map.Entry<String, String> entry : _definitionFiles.entrySet()) -->Line_5 $$ String fileName = entry.getValue()[ FD ]
Line_13 $$ InputStream inputStream = classLoader.getResourceAsStream(fileName)-->Line_14 $$ if (inputStream == null) [ FD ]
Line_20 $$ User defaultUser = userLocalService.getDefaultUser(companyId)-->Line_21 $$ _workflowDefinitionManager.deployWorkflowDefinition(serviceContext.getCompanyId(), defaultUser.getUserId(), definitionName, FileUtil.getBytes(inputStream))[ FD ]
Line_9 $$ if (kaleoDefinitionsCount > 0) -->Line_10 $$ return[ CD ]
Line_4 $$ String definitionName = entry.getKey()-->Line_8 $$ int kaleoDefinitionsCount = kaleoDefinitionLocalService.getKaleoDefinitionsCount(definitionName, serviceContext)[ FD ]
Line_2 $$ public void deployDefaultDefinitions(long companyId) throws Exception -->Line_20 $$ User defaultUser = userLocalService.getDefaultUser(companyId)[ FD ]
Line_6 $$ ServiceContext serviceContext = new ServiceContext()-->Line_7 $$ serviceContext.setCompanyId(companyId)[ FD ]
Line_6 $$ ServiceContext serviceContext = new ServiceContext()-->Line_21 $$ _workflowDefinitionManager.deployWorkflowDefinition(serviceContext.getCompanyId(), defaultUser.getUserId(), definitionName, FileUtil.getBytes(inputStream))[ FD ]
Line_3 $$ for (Map.Entry<String, String> entry : _definitionFiles.entrySet()) -->Line_4 $$ String definitionName = entry.getKey()[ FD ]
Line_5 $$ String fileName = entry.getValue()-->Line_13 $$ InputStream inputStream = classLoader.getResourceAsStream(fileName)[ FD ]
Line_6 $$ ServiceContext serviceContext = new ServiceContext()-->Line_8 $$ int kaleoDefinitionsCount = kaleoDefinitionLocalService.getKaleoDefinitionsCount(definitionName, serviceContext)[ FD ]
Line_15 $$ if (_log.isWarnEnabled()) -->Line_16 $$ _log.warn("Unable to find definition file for " + definitionName + " with file name " + fileName)[ CD ]
Line_14 $$ if (inputStream == null) -->Line_15 $$ if (_log.isWarnEnabled()) [ CD ]
Line_12 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_13 $$ InputStream inputStream = classLoader.getResourceAsStream(fileName)[ FD ]
Line_4 $$ String definitionName = entry.getKey()-->Line_21 $$ _workflowDefinitionManager.deployWorkflowDefinition(serviceContext.getCompanyId(), defaultUser.getUserId(), definitionName, FileUtil.getBytes(inputStream))[ FD ]
Line_13 $$ InputStream inputStream = classLoader.getResourceAsStream(fileName)-->Line_21 $$ _workflowDefinitionManager.deployWorkflowDefinition(serviceContext.getCompanyId(), defaultUser.getUserId(), definitionName, FileUtil.getBytes(inputStream))[ FD ]
Line_2 $$ public void deployDefaultDefinitions(long companyId) throws Exception -->Line_7 $$ serviceContext.setCompanyId(companyId)[ FD ]
Line_14 $$ if (inputStream == null) -->Line_18 $$ return[ CD ]
