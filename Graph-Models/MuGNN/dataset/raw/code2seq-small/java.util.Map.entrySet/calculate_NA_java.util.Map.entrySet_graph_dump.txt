Line_18 $$ String source = byContent.get(create.getValue())-->Line_21 $$ if (!critical.contains(source)) [ FD ]
Line_2 $$ public static Result calculate(Map<String, Long> oldChecksums, Map<String, Long> newChecksums, List<String> critical, boolean move) -->Line_7 $$ Map<String, Long> toCreate = withAllRemoved(newChecksums, oldChecksums)[ FD ]
Line_16 $$ for (Map.Entry<String, Long> create : toCreate.entrySet()) -->Line_37 $$ result.filesToCreate.put(create.getKey(), create.getValue())[ FD ]
Line_2 $$ public static Result calculate(Map<String, Long> oldChecksums, Map<String, Long> newChecksums, List<String> critical, boolean move) -->Line_6 $$ Map<String, Long> toUpdate = collect(oldChecksums, newChecksums, critical, false)[ CD ]
Line_16 $$ for (Map.Entry<String, Long> create : toCreate.entrySet()) -->Line_22 $$ result.filesToUpdate.put(create.getKey(), new Update(source, result.filesToDelete.get(source), true))[ FD ]
Line_30 $$ if (!critical.contains(best)) -->Line_32 $$ found = true[ CD ]
Line_16 $$ for (Map.Entry<String, Long> create : toCreate.entrySet()) -->Line_26 $$ File fileToCreate = new File(create.getKey())[ FD ]
Line_16 $$ for (Map.Entry<String, Long> create : toCreate.entrySet()) -->Line_18 $$ String source = byContent.get(create.getValue())[ FD ]
Line_13 $$ if (move) -->Line_15 $$ Map<String, List<String>> byName = groupFilesByName(result.filesToDelete)[ CD ]
Line_2 $$ public static Result calculate(Map<String, Long> oldChecksums, Map<String, Long> newChecksums, List<String> critical, boolean move) -->Line_4 $$ result.commonFiles = collect(oldChecksums, newChecksums, critical, true)[ FD ]
Line_20 $$ if (source != null && !isDir) -->Line_28 $$ if (sameName != null && !isDir) [ CD ]
Line_21 $$ if (!critical.contains(source)) -->Line_23 $$ found = true[ CD ]
Line_2 $$ public static Result calculate(Map<String, Long> oldChecksums, Map<String, Long> newChecksums, List<String> critical, boolean move) -->Line_5 $$ result.filesToDelete = withAllRemoved(oldChecksums, newChecksums)[ CD ]
Line_7 $$ Map<String, Long> toCreate = withAllRemoved(newChecksums, oldChecksums)-->Line_16 $$ for (Map.Entry<String, Long> create : toCreate.entrySet()) [ FD ]
Line_27 $$ List<String> sameName = byName.get(fileToCreate.getName())-->Line_29 $$ String best = findBestCandidateForMove(sameName, create.getKey())[ FD ]
Line_2 $$ public static Result calculate(Map<String, Long> oldChecksums, Map<String, Long> newChecksums, List<String> critical, boolean move) -->Line_30 $$ if (!critical.contains(best)) [ FD ]
Line_21 $$ if (!critical.contains(source)) -->Line_22 $$ result.filesToUpdate.put(create.getKey(), new Update(source, result.filesToDelete.get(source), true))[ CD ]
Line_32 $$ found = true-->Line_36 $$ if (!found) [ FD ]
Line_14 $$ Map<Long, String> byContent = inverse(result.filesToDelete)-->Line_18 $$ String source = byContent.get(create.getValue())[ FD ]
Line_28 $$ if (sameName != null && !isDir) -->Line_29 $$ String best = findBestCandidateForMove(sameName, create.getKey())[ CD ]
Line_2 $$ public static Result calculate(Map<String, Long> oldChecksums, Map<String, Long> newChecksums, List<String> critical, boolean move) -->Line_13 $$ if (move) [ CD ]
Line_16 $$ for (Map.Entry<String, Long> create : toCreate.entrySet()) -->Line_31 $$ result.filesToUpdate.put(create.getKey(), new Update(best, result.filesToDelete.get(best), false))[ FD ]
Line_29 $$ String best = findBestCandidateForMove(sameName, create.getKey())-->Line_31 $$ result.filesToUpdate.put(create.getKey(), new Update(best, result.filesToDelete.get(best), false))[ FD ]
Line_2 $$ public static Result calculate(Map<String, Long> oldChecksums, Map<String, Long> newChecksums, List<String> critical, boolean move) -->Line_4 $$ result.commonFiles = collect(oldChecksums, newChecksums, critical, true)[ CD ]
Line_2 $$ public static Result calculate(Map<String, Long> oldChecksums, Map<String, Long> newChecksums, List<String> critical, boolean move) -->Line_3 $$ Result result = new Result()[ CD ]
Line_23 $$ found = true-->Line_32 $$ found = true[ FD ]
Line_2 $$ public static Result calculate(Map<String, Long> oldChecksums, Map<String, Long> newChecksums, List<String> critical, boolean move) -->Line_21 $$ if (!critical.contains(source)) [ FD ]
Line_2 $$ public static Result calculate(Map<String, Long> oldChecksums, Map<String, Long> newChecksums, List<String> critical, boolean move) -->Line_5 $$ result.filesToDelete = withAllRemoved(oldChecksums, newChecksums)[ FD ]
Line_17 $$ boolean isDir = create.getKey().endsWith("/")-->Line_28 $$ if (sameName != null && !isDir) [ FD ]
Line_2 $$ public static Result calculate(Map<String, Long> oldChecksums, Map<String, Long> newChecksums, List<String> critical, boolean move) -->Line_7 $$ Map<String, Long> toCreate = withAllRemoved(newChecksums, oldChecksums)[ CD ]
Line_2 $$ public static Result calculate(Map<String, Long> oldChecksums, Map<String, Long> newChecksums, List<String> critical, boolean move) -->Line_8 $$ result.filesToCreate = new LinkedHashMap<String, Long>()[ CD ]
Line_30 $$ if (!critical.contains(best)) -->Line_31 $$ result.filesToUpdate.put(create.getKey(), new Update(best, result.filesToDelete.get(best), false))[ CD ]
Line_19 $$ boolean found = false-->Line_36 $$ if (!found) [ FD ]
Line_20 $$ if (source != null && !isDir) -->Line_27 $$ List<String> sameName = byName.get(fileToCreate.getName())[ CD ]
Line_2 $$ public static Result calculate(Map<String, Long> oldChecksums, Map<String, Long> newChecksums, List<String> critical, boolean move) -->Line_43 $$ return result[ CD ]
Line_36 $$ if (!found) -->Line_37 $$ result.filesToCreate.put(create.getKey(), create.getValue())[ CD ]
Line_2 $$ public static Result calculate(Map<String, Long> oldChecksums, Map<String, Long> newChecksums, List<String> critical, boolean move) -->Line_9 $$ result.filesToUpdate = new LinkedHashMap<String, Update>()[ CD ]
Line_13 $$ if (move) -->Line_14 $$ Map<Long, String> byContent = inverse(result.filesToDelete)[ CD ]
Line_6 $$ Map<String, Long> toUpdate = collect(oldChecksums, newChecksums, critical, false)-->Line_10 $$ for (Map.Entry<String, Long> update : toUpdate.entrySet()) [ FD ]
Line_26 $$ File fileToCreate = new File(create.getKey())-->Line_27 $$ List<String> sameName = byName.get(fileToCreate.getName())[ FD ]
Line_17 $$ boolean isDir = create.getKey().endsWith("/")-->Line_20 $$ if (source != null && !isDir) [ FD ]
Line_2 $$ public static Result calculate(Map<String, Long> oldChecksums, Map<String, Long> newChecksums, List<String> critical, boolean move) -->Line_6 $$ Map<String, Long> toUpdate = collect(oldChecksums, newChecksums, critical, false)[ FD ]
Line_28 $$ if (sameName != null && !isDir) -->Line_30 $$ if (!critical.contains(best)) [ CD ]
Line_23 $$ found = true-->Line_36 $$ if (!found) [ FD ]
Line_15 $$ Map<String, List<String>> byName = groupFilesByName(result.filesToDelete)-->Line_27 $$ List<String> sameName = byName.get(fileToCreate.getName())[ FD ]
Line_16 $$ for (Map.Entry<String, Long> create : toCreate.entrySet()) -->Line_17 $$ boolean isDir = create.getKey().endsWith("/")[ FD ]
Line_7 $$ Map<String, Long> toCreate = withAllRemoved(newChecksums, oldChecksums)-->Line_41 $$ result.filesToCreate = toCreate[ FD ]
Line_19 $$ boolean found = false-->Line_32 $$ found = true[ FD ]
Line_10 $$ for (Map.Entry<String, Long> update : toUpdate.entrySet()) -->Line_11 $$ result.filesToUpdate.put(update.getKey(), new Update(update.getKey(), update.getValue(), false))[ FD ]
Line_18 $$ String source = byContent.get(create.getValue())-->Line_22 $$ result.filesToUpdate.put(create.getKey(), new Update(source, result.filesToDelete.get(source), true))[ FD ]
Line_20 $$ if (source != null && !isDir) -->Line_21 $$ if (!critical.contains(source)) [ CD ]
Line_20 $$ if (source != null && !isDir) -->Line_26 $$ File fileToCreate = new File(create.getKey())[ CD ]
Line_13 $$ if (move) -->Line_41 $$ result.filesToCreate = toCreate[ CD ]
Line_19 $$ boolean found = false-->Line_23 $$ found = true[ FD ]
Line_16 $$ for (Map.Entry<String, Long> create : toCreate.entrySet()) -->Line_29 $$ String best = findBestCandidateForMove(sameName, create.getKey())[ FD ]
Line_29 $$ String best = findBestCandidateForMove(sameName, create.getKey())-->Line_30 $$ if (!critical.contains(best)) [ FD ]
