Line_2 $$ public void testEJBClientInterceptionFromInVMClient() throws Exception -->Line_5 $$ final Context jndiContext = new InitialContext(props)[ CD ]
Line_3 $$ final Hashtable props = new Hashtable()-->Line_4 $$ props.put(Context.URL_PKG_PREFIXES, "org.jboss.ejb.client.naming")[ FD ]
Line_2 $$ public void testEJBClientInterceptionFromInVMClient() throws Exception -->Line_8 $$ final Map<String, Object> valuesSeenOnServerSide = remoteViewInvokingBean.invokeRemoteViewAndGetInvocationData(interceptorData.keySet().toArray(new String[interceptorData.size()]))[ CD ]
Line_2 $$ public void testEJBClientInterceptionFromInVMClient() throws Exception -->Line_10 $$ Assert.assertFalse("Server side context data was expected to be non-empty", valuesSeenOnServerSide.isEmpty())[ CD ]
Line_6 $$ final RemoteViewInvoker remoteViewInvokingBean = (RemoteViewInvoker) jndiContext.lookup("ejb:" + APP_NAME + "/" + MODULE_NAME + "/" + DISTINCT_NAME + "/" + RemoteViewInvokingBean.class.getSimpleName() + "!" + RemoteViewInvoker.class.getName() + "?stateful")-->Line_7 $$ final Map<String, Object> interceptorData = remoteViewInvokingBean.getDataSetupForInvocationContext()[ FD ]
Line_2 $$ public void testEJBClientInterceptionFromInVMClient() throws Exception -->Line_3 $$ final Hashtable props = new Hashtable()[ CD ]
Line_11 $$ for (final Map.Entry<String, Object> clientInterceptorDataEntry : interceptorData.entrySet()) -->Line_12 $$ final String key = clientInterceptorDataEntry.getKey()[ FD ]
Line_2 $$ public void testEJBClientInterceptionFromInVMClient() throws Exception -->Line_4 $$ props.put(Context.URL_PKG_PREFIXES, "org.jboss.ejb.client.naming")[ CD ]
Line_7 $$ final Map<String, Object> interceptorData = remoteViewInvokingBean.getDataSetupForInvocationContext()-->Line_8 $$ final Map<String, Object> valuesSeenOnServerSide = remoteViewInvokingBean.invokeRemoteViewAndGetInvocationData(interceptorData.keySet().toArray(new String[interceptorData.size()]))[ FD ]
Line_7 $$ final Map<String, Object> interceptorData = remoteViewInvokingBean.getDataSetupForInvocationContext()-->Line_11 $$ for (final Map.Entry<String, Object> clientInterceptorDataEntry : interceptorData.entrySet()) [ FD ]
Line_11 $$ for (final Map.Entry<String, Object> clientInterceptorDataEntry : interceptorData.entrySet()) -->Line_13 $$ final Object expectedValue = clientInterceptorDataEntry.getValue()[ FD ]
Line_12 $$ final String key = clientInterceptorDataEntry.getKey()-->Line_14 $$ Assert.assertEquals("Unexpected value in bean, on server side, via InvocationContext.getContextData() for key " + key, expectedValue, valuesSeenOnServerSide.get(key))[ FD ]
Line_8 $$ final Map<String, Object> valuesSeenOnServerSide = remoteViewInvokingBean.invokeRemoteViewAndGetInvocationData(interceptorData.keySet().toArray(new String[interceptorData.size()]))-->Line_14 $$ Assert.assertEquals("Unexpected value in bean, on server side, via InvocationContext.getContextData() for key " + key, expectedValue, valuesSeenOnServerSide.get(key))[ FD ]
Line_2 $$ public void testEJBClientInterceptionFromInVMClient() throws Exception -->Line_9 $$ Assert.assertNotNull("Server side context data was expected to be non-null", valuesSeenOnServerSide)[ CD ]
Line_6 $$ final RemoteViewInvoker remoteViewInvokingBean = (RemoteViewInvoker) jndiContext.lookup("ejb:" + APP_NAME + "/" + MODULE_NAME + "/" + DISTINCT_NAME + "/" + RemoteViewInvokingBean.class.getSimpleName() + "!" + RemoteViewInvoker.class.getName() + "?stateful")-->Line_8 $$ final Map<String, Object> valuesSeenOnServerSide = remoteViewInvokingBean.invokeRemoteViewAndGetInvocationData(interceptorData.keySet().toArray(new String[interceptorData.size()]))[ FD ]
Line_13 $$ final Object expectedValue = clientInterceptorDataEntry.getValue()-->Line_14 $$ Assert.assertEquals("Unexpected value in bean, on server side, via InvocationContext.getContextData() for key " + key, expectedValue, valuesSeenOnServerSide.get(key))[ FD ]
Line_8 $$ final Map<String, Object> valuesSeenOnServerSide = remoteViewInvokingBean.invokeRemoteViewAndGetInvocationData(interceptorData.keySet().toArray(new String[interceptorData.size()]))-->Line_9 $$ Assert.assertNotNull("Server side context data was expected to be non-null", valuesSeenOnServerSide)[ FD ]
Line_5 $$ final Context jndiContext = new InitialContext(props)-->Line_6 $$ final RemoteViewInvoker remoteViewInvokingBean = (RemoteViewInvoker) jndiContext.lookup("ejb:" + APP_NAME + "/" + MODULE_NAME + "/" + DISTINCT_NAME + "/" + RemoteViewInvokingBean.class.getSimpleName() + "!" + RemoteViewInvoker.class.getName() + "?stateful")[ FD ]
Line_2 $$ public void testEJBClientInterceptionFromInVMClient() throws Exception -->Line_6 $$ final RemoteViewInvoker remoteViewInvokingBean = (RemoteViewInvoker) jndiContext.lookup("ejb:" + APP_NAME + "/" + MODULE_NAME + "/" + DISTINCT_NAME + "/" + RemoteViewInvokingBean.class.getSimpleName() + "!" + RemoteViewInvoker.class.getName() + "?stateful")[ CD ]
Line_2 $$ public void testEJBClientInterceptionFromInVMClient() throws Exception -->Line_7 $$ final Map<String, Object> interceptorData = remoteViewInvokingBean.getDataSetupForInvocationContext()[ CD ]
Line_8 $$ final Map<String, Object> valuesSeenOnServerSide = remoteViewInvokingBean.invokeRemoteViewAndGetInvocationData(interceptorData.keySet().toArray(new String[interceptorData.size()]))-->Line_10 $$ Assert.assertFalse("Server side context data was expected to be non-empty", valuesSeenOnServerSide.isEmpty())[ FD ]
