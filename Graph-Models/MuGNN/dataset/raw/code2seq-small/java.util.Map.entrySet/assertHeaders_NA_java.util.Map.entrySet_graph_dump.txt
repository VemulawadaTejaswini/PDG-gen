Line_2 $$ protected static void assertHeaders(TransportMessage<?> message, Map<String, Object> expected) -->Line_4 $$ assertThat(message.getHeaders().size(), is(expected.size()))[ FD ]
Line_2 $$ protected static void assertHeaders(TransportMessage<?> message, Map<String, Object> expected) -->Line_4 $$ assertThat(message.getHeaders().size(), is(expected.size()))[ CD ]
Line_2 $$ protected static void assertHeaders(TransportMessage<?> message, Map<String, Object> expected) -->Line_3 $$ assertThat(message.getHeaders(), notNullValue())[ FD ]
Line_2 $$ protected static void assertHeaders(TransportMessage<?> message, Map<String, Object> expected) -->Line_5 $$ for (Map.Entry<String, Object> expectedEntry : expected.entrySet()) [ FD ]
Line_2 $$ protected static void assertHeaders(TransportMessage<?> message, Map<String, Object> expected) -->Line_6 $$ assertThat(message.getHeader(expectedEntry.getKey()), equalTo(expectedEntry.getValue()))[ FD ]
Line_5 $$ for (Map.Entry<String, Object> expectedEntry : expected.entrySet()) -->Line_6 $$ assertThat(message.getHeader(expectedEntry.getKey()), equalTo(expectedEntry.getValue()))[ FD ]
Line_2 $$ protected static void assertHeaders(TransportMessage<?> message, Map<String, Object> expected) -->Line_3 $$ assertThat(message.getHeaders(), notNullValue())[ CD ]
