Line_2 $$ public static String getEncodedContent(VirtualFile virtualFile, Project project, Map<String, String> parameters) throws IOException -->Line_6 $$ final Pattern pattern = FileHeaderChecker.getTemplatePattern(template, project, new TIntObjectHashMap<String>())[ CD ]
Line_8 $$ result = ProjectTemplateFileProcessor.encodeFile(result, virtualFile, project)-->Line_10 $$ result = result.replace(entry.getKey(), "$[ FD ]
Line_4 $$ final FileTemplate template = FileTemplateManager.getInstance(project).getDefaultTemplate(FileTemplateManager.FILE_HEADER_TEMPLATE_NAME)-->Line_6 $$ final Pattern pattern = FileHeaderChecker.getTemplatePattern(template, project, new TIntObjectHashMap<String>())[ FD ]
Line_2 $$ public static String getEncodedContent(VirtualFile virtualFile, Project project, Map<String, String> parameters) throws IOException -->Line_8 $$ result = ProjectTemplateFileProcessor.encodeFile(result, virtualFile, project)[ CD ]
Line_2 $$ public static String getEncodedContent(VirtualFile virtualFile, Project project, Map<String, String> parameters) throws IOException -->Line_3 $$ String text = VfsUtilCore.loadText(virtualFile)[ CD ]
Line_2 $$ public static String getEncodedContent(VirtualFile virtualFile, Project project, Map<String, String> parameters) throws IOException -->Line_7 $$ String result = convertTemplates(text, pattern, templateText)[ CD ]
Line_6 $$ final Pattern pattern = FileHeaderChecker.getTemplatePattern(template, project, new TIntObjectHashMap<String>())-->Line_7 $$ String result = convertTemplates(text, pattern, templateText)[ FD ]
Line_2 $$ public static String getEncodedContent(VirtualFile virtualFile, Project project, Map<String, String> parameters) throws IOException -->Line_3 $$ String text = VfsUtilCore.loadText(virtualFile)[ FD ]
Line_2 $$ public static String getEncodedContent(VirtualFile virtualFile, Project project, Map<String, String> parameters) throws IOException -->Line_6 $$ final Pattern pattern = FileHeaderChecker.getTemplatePattern(template, project, new TIntObjectHashMap<String>())[ FD ]
Line_3 $$ String text = VfsUtilCore.loadText(virtualFile)-->Line_7 $$ String result = convertTemplates(text, pattern, templateText)[ FD ]
Line_4 $$ final FileTemplate template = FileTemplateManager.getInstance(project).getDefaultTemplate(FileTemplateManager.FILE_HEADER_TEMPLATE_NAME)-->Line_5 $$ final String templateText = template.getText()[ FD ]
Line_2 $$ public static String getEncodedContent(VirtualFile virtualFile, Project project, Map<String, String> parameters) throws IOException -->Line_9 $$ for (Map.Entry<String, String> entry : parameters.entrySet()) [ FD ]
Line_7 $$ String result = convertTemplates(text, pattern, templateText)-->Line_8 $$ result = ProjectTemplateFileProcessor.encodeFile(result, virtualFile, project)[ FD ]
Line_2 $$ public static String getEncodedContent(VirtualFile virtualFile, Project project, Map<String, String> parameters) throws IOException -->Line_12 $$ return result[ CD ]
Line_9 $$ for (Map.Entry<String, String> entry : parameters.entrySet()) -->Line_10 $$ result = result.replace(entry.getKey(), "$[ FD ]
Line_5 $$ final String templateText = template.getText()-->Line_7 $$ String result = convertTemplates(text, pattern, templateText)[ FD ]
Line_2 $$ public static String getEncodedContent(VirtualFile virtualFile, Project project, Map<String, String> parameters) throws IOException -->Line_4 $$ final FileTemplate template = FileTemplateManager.getInstance(project).getDefaultTemplate(FileTemplateManager.FILE_HEADER_TEMPLATE_NAME)[ CD ]
Line_2 $$ public static String getEncodedContent(VirtualFile virtualFile, Project project, Map<String, String> parameters) throws IOException -->Line_8 $$ result = ProjectTemplateFileProcessor.encodeFile(result, virtualFile, project)[ FD ]
Line_2 $$ public static String getEncodedContent(VirtualFile virtualFile, Project project, Map<String, String> parameters) throws IOException -->Line_5 $$ final String templateText = template.getText()[ CD ]
Line_7 $$ String result = convertTemplates(text, pattern, templateText)-->Line_10 $$ result = result.replace(entry.getKey(), "$[ FD ]
Line_2 $$ public static String getEncodedContent(VirtualFile virtualFile, Project project, Map<String, String> parameters) throws IOException -->Line_4 $$ final FileTemplate template = FileTemplateManager.getInstance(project).getDefaultTemplate(FileTemplateManager.FILE_HEADER_TEMPLATE_NAME)[ FD ]
