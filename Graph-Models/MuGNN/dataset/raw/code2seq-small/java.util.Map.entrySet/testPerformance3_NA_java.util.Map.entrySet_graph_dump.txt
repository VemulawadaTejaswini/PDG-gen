Line_2 $$ public void testPerformance3() throws Exception -->Line_16 $$ for (int i = 0; i < 4000000; i++) [ CD ]
Line_6 $$ Map<String, String> source = new HashMap<String, String>()-->Line_12 $$ conversionService.convert(source, TypeDescriptor.forObject(source), td)[ FD ]
Line_2 $$ public void testPerformance3() throws Exception -->Line_6 $$ Map<String, String> source = new HashMap<String, String>()[ CD ]
Line_6 $$ Map<String, String> source = new HashMap<String, String>()-->Line_7 $$ source.put("1", "1")[ FD ]
Line_17 $$ Map<String, Integer> target = new HashMap<String, Integer>(source.size())-->Line_19 $$ target.put(entry.getKey(), Integer.valueOf(entry.getValue()))[ FD ]
Line_2 $$ public void testPerformance3() throws Exception -->Line_11 $$ for (int i = 0; i < 1000000; i++) [ CD ]
Line_4 $$ StopWatch watch = new StopWatch("map<string, string> -> map<string, integer> conversionPerformance")-->Line_15 $$ watch.start("convert 4,000,000 manually")[ FD ]
Line_11 $$ for (int i = 0; i < 1000000; i++) -->Line_16 $$ for (int i = 0; i < 4000000; i++) [ FD ]
Line_10 $$ TypeDescriptor td = new TypeDescriptor(getClass().getField("map"))-->Line_12 $$ conversionService.convert(source, TypeDescriptor.forObject(source), td)[ FD ]
Line_2 $$ public void testPerformance3() throws Exception -->Line_8 $$ source.put("2", "2")[ CD ]
Line_2 $$ public void testPerformance3() throws Exception -->Line_3 $$ Assume.group(TestGroup.PERFORMANCE)[ CD ]
Line_2 $$ public void testPerformance3() throws Exception -->Line_5 $$ watch.start("convert 4,000,000 with conversion service")[ CD ]
Line_2 $$ public void testPerformance3() throws Exception -->Line_14 $$ watch.stop()[ CD ]
Line_18 $$ for (Map.Entry<String, String> entry : source.entrySet()) -->Line_19 $$ target.put(entry.getKey(), Integer.valueOf(entry.getValue()))[ FD ]
Line_6 $$ Map<String, String> source = new HashMap<String, String>()-->Line_18 $$ for (Map.Entry<String, String> entry : source.entrySet()) [ FD ]
Line_2 $$ public void testPerformance3() throws Exception -->Line_10 $$ TypeDescriptor td = new TypeDescriptor(getClass().getField("map"))[ CD ]
Line_16 $$ for (int i = 0; i < 4000000; i++) -->Line_17 $$ Map<String, Integer> target = new HashMap<String, Integer>(source.size())[ CD ]
Line_4 $$ StopWatch watch = new StopWatch("map<string, string> -> map<string, integer> conversionPerformance")-->Line_5 $$ watch.start("convert 4,000,000 with conversion service")[ FD ]
Line_2 $$ public void testPerformance3() throws Exception -->Line_9 $$ source.put("3", "3")[ CD ]
Line_2 $$ public void testPerformance3() throws Exception -->Line_15 $$ watch.start("convert 4,000,000 manually")[ CD ]
Line_2 $$ public void testPerformance3() throws Exception -->Line_22 $$ watch.stop()[ CD ]
Line_4 $$ StopWatch watch = new StopWatch("map<string, string> -> map<string, integer> conversionPerformance")-->Line_14 $$ watch.stop()[ FD ]
Line_2 $$ public void testPerformance3() throws Exception -->Line_7 $$ source.put("1", "1")[ CD ]
Line_6 $$ Map<String, String> source = new HashMap<String, String>()-->Line_17 $$ Map<String, Integer> target = new HashMap<String, Integer>(source.size())[ FD ]
Line_4 $$ StopWatch watch = new StopWatch("map<string, string> -> map<string, integer> conversionPerformance")-->Line_22 $$ watch.stop()[ FD ]
Line_6 $$ Map<String, String> source = new HashMap<String, String>()-->Line_9 $$ source.put("3", "3")[ FD ]
Line_6 $$ Map<String, String> source = new HashMap<String, String>()-->Line_8 $$ source.put("2", "2")[ FD ]
Line_11 $$ for (int i = 0; i < 1000000; i++) -->Line_12 $$ conversionService.convert(source, TypeDescriptor.forObject(source), td)[ CD ]
Line_2 $$ public void testPerformance3() throws Exception -->Line_4 $$ StopWatch watch = new StopWatch("map<string, string> -> map<string, integer> conversionPerformance")[ CD ]
