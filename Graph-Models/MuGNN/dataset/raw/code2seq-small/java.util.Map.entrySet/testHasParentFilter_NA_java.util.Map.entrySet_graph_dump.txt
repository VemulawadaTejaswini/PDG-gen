Line_5 $$ Map<String, Set<String>> parentToChildren = new HashMap()-->Line_26 $$ assertThat(parentToChildren.isEmpty(), equalTo(false))[ FD ]
Line_32 $$ for (int i = 0; i < searchResponse.getHits().totalHits(); i++) -->Line_33 $$ assertThat(childIds.remove(searchResponse.getHits().getAt(i).id()), is(true))[ CD ]
Line_8 $$ String previousParentId = null-->Line_21 $$ parentToChildren.put(previousParentId, new HashSet<String>())[ FD ]
Line_28 $$ SearchResponse searchResponse = client().prepareSearch("test").setQuery(constantScoreQuery(hasParentQuery("parent", termQuery("p_field", parentToChildrenEntry.getKey())))).setSize(numChildDocsPerParent).get()-->Line_34 $$ assertThat(searchResponse.getHits().getAt(i).score(), is(1.0f))[ FD ]
Line_11 $$ List<IndexRequestBuilder> builders = new ArrayList()-->Line_15 $$ builders.add(client().prepareIndex("test", "parent", previousParentId).setSource("p_field", previousParentId))[ FD ]
Line_20 $$ if (!parentToChildren.containsKey(previousParentId)) -->Line_21 $$ parentToChildren.put(previousParentId, new HashSet<String>())[ CD ]
Line_2 $$ public void testHasParentFilter() throws Exception -->Line_6 $$ client().prepareIndex("test", "parent", "p0").setSource("p_field", "p0").get()[ CD ]
Line_12 $$ for (int i = 1; i <= numChildDocs; i++) -->Line_23 $$ assertThat(parentToChildren.get(previousParentId).add(childId), is(true))[ CD ]
Line_28 $$ SearchResponse searchResponse = client().prepareSearch("test").setQuery(constantScoreQuery(hasParentQuery("parent", termQuery("p_field", parentToChildrenEntry.getKey())))).setSize(numChildDocsPerParent).get()-->Line_32 $$ for (int i = 0; i < searchResponse.getHits().totalHits(); i++) [ FD ]
Line_2 $$ public void testHasParentFilter() throws Exception -->Line_12 $$ for (int i = 1; i <= numChildDocs; i++) [ CD ]
Line_12 $$ for (int i = 1; i <= numChildDocs; i++) -->Line_33 $$ assertThat(childIds.remove(searchResponse.getHits().getAt(i).id()), is(true))[ FD ]
Line_12 $$ for (int i = 1; i <= numChildDocs; i++) -->Line_13 $$ if (previousParentId == null || i % numChildDocsPerParent == 0) [ CD ]
Line_11 $$ List<IndexRequestBuilder> builders = new ArrayList()-->Line_19 $$ builders.add(client().prepareIndex("test", "child", childId).setSource("c_field", childId).setParent(previousParentId))[ FD ]
Line_30 $$ Set<String> childIds = parentToChildrenEntry.getValue()-->Line_36 $$ assertThat(childIds.size(), is(0))[ FD ]
Line_2 $$ public void testHasParentFilter() throws Exception -->Line_7 $$ parentToChildren.put("p0", new HashSet<String>())[ CD ]
Line_13 $$ if (previousParentId == null || i % numChildDocsPerParent == 0) -->Line_14 $$ previousParentId = "p" + i[ CD ]
Line_2 $$ public void testHasParentFilter() throws Exception -->Line_3 $$ assertAcked(prepareCreate("test").addMapping("parent").addMapping("child", "_parent", "type=parent"))[ CD ]
Line_14 $$ previousParentId = "p" + i-->Line_15 $$ builders.add(client().prepareIndex("test", "parent", previousParentId).setSource("p_field", previousParentId))[ FD ]
Line_2 $$ public void testHasParentFilter() throws Exception -->Line_5 $$ Map<String, Set<String>> parentToChildren = new HashMap()[ CD ]
Line_2 $$ public void testHasParentFilter() throws Exception -->Line_11 $$ List<IndexRequestBuilder> builders = new ArrayList()[ CD ]
Line_27 $$ for (Map.Entry<String, Set<String>> parentToChildrenEntry : parentToChildren.entrySet()) -->Line_30 $$ Set<String> childIds = parentToChildrenEntry.getValue()[ FD ]
Line_14 $$ previousParentId = "p" + i-->Line_20 $$ if (!parentToChildren.containsKey(previousParentId)) [ FD ]
Line_12 $$ for (int i = 1; i <= numChildDocs; i++) -->Line_32 $$ for (int i = 0; i < searchResponse.getHits().totalHits(); i++) [ FD ]
Line_2 $$ public void testHasParentFilter() throws Exception -->Line_10 $$ int numChildDocsPerParent = 0[ CD ]
Line_8 $$ String previousParentId = null-->Line_23 $$ assertThat(parentToChildren.get(previousParentId).add(childId), is(true))[ FD ]
Line_2 $$ public void testHasParentFilter() throws Exception -->Line_26 $$ assertThat(parentToChildren.isEmpty(), equalTo(false))[ CD ]
Line_8 $$ String previousParentId = null-->Line_15 $$ builders.add(client().prepareIndex("test", "parent", previousParentId).setSource("p_field", previousParentId))[ FD ]
Line_8 $$ String previousParentId = null-->Line_19 $$ builders.add(client().prepareIndex("test", "child", childId).setSource("c_field", childId).setParent(previousParentId))[ FD ]
Line_14 $$ previousParentId = "p" + i-->Line_21 $$ parentToChildren.put(previousParentId, new HashSet<String>())[ FD ]
Line_12 $$ for (int i = 1; i <= numChildDocs; i++) -->Line_34 $$ assertThat(searchResponse.getHits().getAt(i).score(), is(1.0f))[ FD ]
Line_8 $$ String previousParentId = null-->Line_14 $$ previousParentId = "p" + i[ FD ]
Line_14 $$ previousParentId = "p" + i-->Line_19 $$ builders.add(client().prepareIndex("test", "child", childId).setSource("c_field", childId).setParent(previousParentId))[ FD ]
Line_9 $$ int numChildDocs = 32-->Line_12 $$ for (int i = 1; i <= numChildDocs; i++) [ FD ]
Line_28 $$ SearchResponse searchResponse = client().prepareSearch("test").setQuery(constantScoreQuery(hasParentQuery("parent", termQuery("p_field", parentToChildrenEntry.getKey())))).setSize(numChildDocsPerParent).get()-->Line_29 $$ assertNoFailures(searchResponse)[ FD ]
Line_28 $$ SearchResponse searchResponse = client().prepareSearch("test").setQuery(constantScoreQuery(hasParentQuery("parent", termQuery("p_field", parentToChildrenEntry.getKey())))).setSize(numChildDocsPerParent).get()-->Line_33 $$ assertThat(childIds.remove(searchResponse.getHits().getAt(i).id()), is(true))[ FD ]
Line_18 $$ String childId = "c" + i-->Line_19 $$ builders.add(client().prepareIndex("test", "child", childId).setSource("c_field", childId).setParent(previousParentId))[ FD ]
Line_28 $$ SearchResponse searchResponse = client().prepareSearch("test").setQuery(constantScoreQuery(hasParentQuery("parent", termQuery("p_field", parentToChildrenEntry.getKey())))).setSize(numChildDocsPerParent).get()-->Line_31 $$ assertThat(searchResponse.getHits().totalHits(), equalTo((long) childIds.size()))[ FD ]
Line_5 $$ Map<String, Set<String>> parentToChildren = new HashMap()-->Line_7 $$ parentToChildren.put("p0", new HashSet<String>())[ FD ]
Line_18 $$ String childId = "c" + i-->Line_23 $$ assertThat(parentToChildren.get(previousParentId).add(childId), is(true))[ FD ]
Line_11 $$ List<IndexRequestBuilder> builders = new ArrayList()-->Line_25 $$ indexRandom(true, builders.toArray(new IndexRequestBuilder[builders.size()]))[ FD ]
Line_2 $$ public void testHasParentFilter() throws Exception -->Line_25 $$ indexRandom(true, builders.toArray(new IndexRequestBuilder[builders.size()]))[ CD ]
Line_10 $$ int numChildDocsPerParent = 0-->Line_28 $$ SearchResponse searchResponse = client().prepareSearch("test").setQuery(constantScoreQuery(hasParentQuery("parent", termQuery("p_field", parentToChildrenEntry.getKey())))).setSize(numChildDocsPerParent).get()[ FD ]
Line_12 $$ for (int i = 1; i <= numChildDocs; i++) -->Line_19 $$ builders.add(client().prepareIndex("test", "child", childId).setSource("c_field", childId).setParent(previousParentId))[ CD ]
Line_32 $$ for (int i = 0; i < searchResponse.getHits().totalHits(); i++) -->Line_33 $$ assertThat(childIds.remove(searchResponse.getHits().getAt(i).id()), is(true))[ FD ]
Line_12 $$ for (int i = 1; i <= numChildDocs; i++) -->Line_20 $$ if (!parentToChildren.containsKey(previousParentId)) [ CD ]
Line_5 $$ Map<String, Set<String>> parentToChildren = new HashMap()-->Line_21 $$ parentToChildren.put(previousParentId, new HashSet<String>())[ FD ]
Line_30 $$ Set<String> childIds = parentToChildrenEntry.getValue()-->Line_31 $$ assertThat(searchResponse.getHits().totalHits(), equalTo((long) childIds.size()))[ FD ]
Line_2 $$ public void testHasParentFilter() throws Exception -->Line_9 $$ int numChildDocs = 32[ CD ]
Line_14 $$ previousParentId = "p" + i-->Line_23 $$ assertThat(parentToChildren.get(previousParentId).add(childId), is(true))[ FD ]
Line_10 $$ int numChildDocsPerParent = 0-->Line_16 $$ numChildDocsPerParent++[ FD ]
Line_2 $$ public void testHasParentFilter() throws Exception -->Line_4 $$ ensureGreen()[ CD ]
Line_32 $$ for (int i = 0; i < searchResponse.getHits().totalHits(); i++) -->Line_34 $$ assertThat(searchResponse.getHits().getAt(i).score(), is(1.0f))[ FD ]
Line_2 $$ public void testHasParentFilter() throws Exception -->Line_8 $$ String previousParentId = null[ CD ]
Line_30 $$ Set<String> childIds = parentToChildrenEntry.getValue()-->Line_33 $$ assertThat(childIds.remove(searchResponse.getHits().getAt(i).id()), is(true))[ FD ]
Line_12 $$ for (int i = 1; i <= numChildDocs; i++) -->Line_18 $$ String childId = "c" + i[ CD ]
Line_13 $$ if (previousParentId == null || i % numChildDocsPerParent == 0) -->Line_15 $$ builders.add(client().prepareIndex("test", "parent", previousParentId).setSource("p_field", previousParentId))[ CD ]
Line_5 $$ Map<String, Set<String>> parentToChildren = new HashMap()-->Line_27 $$ for (Map.Entry<String, Set<String>> parentToChildrenEntry : parentToChildren.entrySet()) [ FD ]
Line_5 $$ Map<String, Set<String>> parentToChildren = new HashMap()-->Line_23 $$ assertThat(parentToChildren.get(previousParentId).add(childId), is(true))[ FD ]
Line_12 $$ for (int i = 1; i <= numChildDocs; i++) -->Line_14 $$ previousParentId = "p" + i[ FD ]
Line_27 $$ for (Map.Entry<String, Set<String>> parentToChildrenEntry : parentToChildren.entrySet()) -->Line_28 $$ SearchResponse searchResponse = client().prepareSearch("test").setQuery(constantScoreQuery(hasParentQuery("parent", termQuery("p_field", parentToChildrenEntry.getKey())))).setSize(numChildDocsPerParent).get()[ FD ]
Line_13 $$ if (previousParentId == null || i % numChildDocsPerParent == 0) -->Line_16 $$ numChildDocsPerParent++[ CD ]
Line_5 $$ Map<String, Set<String>> parentToChildren = new HashMap()-->Line_20 $$ if (!parentToChildren.containsKey(previousParentId)) [ FD ]
Line_8 $$ String previousParentId = null-->Line_20 $$ if (!parentToChildren.containsKey(previousParentId)) [ FD ]
Line_32 $$ for (int i = 0; i < searchResponse.getHits().totalHits(); i++) -->Line_34 $$ assertThat(searchResponse.getHits().getAt(i).score(), is(1.0f))[ CD ]
