Line_7 $$ Role role = RoleLocalServiceUtil.fetchRole(roleId)-->Line_13 $$ roleElement.addAttribute("type", String.valueOf(role.getType()))[ FD ]
Line_8 $$ Element roleElement = permissionsElement.addElement("role")-->Line_13 $$ roleElement.addAttribute("type", String.valueOf(role.getType()))[ FD ]
Line_8 $$ Element roleElement = permissionsElement.addElement("role")-->Line_10 $$ roleElement.addAttribute("name", role.getName())[ FD ]
Line_7 $$ Role role = RoleLocalServiceUtil.fetchRole(roleId)-->Line_10 $$ roleElement.addAttribute("name", role.getName())[ FD ]
Line_8 $$ Element roleElement = permissionsElement.addElement("role")-->Line_17 $$ Element actionKeyElement = roleElement.addElement("action-key")[ FD ]
Line_17 $$ Element actionKeyElement = roleElement.addElement("action-key")-->Line_18 $$ actionKeyElement.addText(actionId)[ FD ]
Line_7 $$ Role role = RoleLocalServiceUtil.fetchRole(roleId)-->Line_11 $$ roleElement.addAttribute("title", role.getTitle())[ FD ]
Line_5 $$ for (Map.Entry<Long, Set<String>> entry : roleToActionIds.entrySet()) -->Line_15 $$ Set<String> availableActionIds = entry.getValue()[ FD ]
Line_2 $$ protected void exportPermissions(PortletDataContext portletDataContext, String resourceName, String resourcePrimKey, Element permissionsElement) throws Exception -->Line_8 $$ Element roleElement = permissionsElement.addElement("role")[ FD ]
Line_2 $$ protected void exportPermissions(PortletDataContext portletDataContext, String resourceName, String resourcePrimKey, Element permissionsElement) throws Exception -->Line_4 $$ Map<Long, Set<String>> roleToActionIds = ResourcePermissionLocalServiceUtil.getAvailableResourcePermissionActionIds(portletDataContext.getCompanyId(), resourceName, ResourceConstants.SCOPE_INDIVIDUAL, resourcePrimKey, actionIds)[ CD ]
Line_7 $$ Role role = RoleLocalServiceUtil.fetchRole(roleId)-->Line_9 $$ roleElement.addAttribute("uuid", role.getUuid())[ FD ]
Line_6 $$ long roleId = entry.getKey()-->Line_7 $$ Role role = RoleLocalServiceUtil.fetchRole(roleId)[ FD ]
Line_7 $$ Role role = RoleLocalServiceUtil.fetchRole(roleId)-->Line_12 $$ roleElement.addAttribute("description", role.getDescription())[ FD ]
Line_8 $$ Element roleElement = permissionsElement.addElement("role")-->Line_14 $$ roleElement.addAttribute("subtype", role.getSubtype())[ FD ]
Line_16 $$ for (String actionId : availableActionIds) -->Line_18 $$ actionKeyElement.addText(actionId)[ FD ]
Line_2 $$ protected void exportPermissions(PortletDataContext portletDataContext, String resourceName, String resourcePrimKey, Element permissionsElement) throws Exception -->Line_3 $$ List<String> actionIds = ResourceActionsUtil.getPortletResourceActions(resourceName)[ CD ]
Line_7 $$ Role role = RoleLocalServiceUtil.fetchRole(roleId)-->Line_14 $$ roleElement.addAttribute("subtype", role.getSubtype())[ FD ]
Line_8 $$ Element roleElement = permissionsElement.addElement("role")-->Line_11 $$ roleElement.addAttribute("title", role.getTitle())[ FD ]
Line_8 $$ Element roleElement = permissionsElement.addElement("role")-->Line_9 $$ roleElement.addAttribute("uuid", role.getUuid())[ FD ]
Line_5 $$ for (Map.Entry<Long, Set<String>> entry : roleToActionIds.entrySet()) -->Line_6 $$ long roleId = entry.getKey()[ FD ]
Line_2 $$ protected void exportPermissions(PortletDataContext portletDataContext, String resourceName, String resourcePrimKey, Element permissionsElement) throws Exception -->Line_4 $$ Map<Long, Set<String>> roleToActionIds = ResourcePermissionLocalServiceUtil.getAvailableResourcePermissionActionIds(portletDataContext.getCompanyId(), resourceName, ResourceConstants.SCOPE_INDIVIDUAL, resourcePrimKey, actionIds)[ FD ]
Line_3 $$ List<String> actionIds = ResourceActionsUtil.getPortletResourceActions(resourceName)-->Line_4 $$ Map<Long, Set<String>> roleToActionIds = ResourcePermissionLocalServiceUtil.getAvailableResourcePermissionActionIds(portletDataContext.getCompanyId(), resourceName, ResourceConstants.SCOPE_INDIVIDUAL, resourcePrimKey, actionIds)[ FD ]
Line_2 $$ protected void exportPermissions(PortletDataContext portletDataContext, String resourceName, String resourcePrimKey, Element permissionsElement) throws Exception -->Line_3 $$ List<String> actionIds = ResourceActionsUtil.getPortletResourceActions(resourceName)[ FD ]
Line_8 $$ Element roleElement = permissionsElement.addElement("role")-->Line_12 $$ roleElement.addAttribute("description", role.getDescription())[ FD ]
Line_4 $$ Map<Long, Set<String>> roleToActionIds = ResourcePermissionLocalServiceUtil.getAvailableResourcePermissionActionIds(portletDataContext.getCompanyId(), resourceName, ResourceConstants.SCOPE_INDIVIDUAL, resourcePrimKey, actionIds)-->Line_5 $$ for (Map.Entry<Long, Set<String>> entry : roleToActionIds.entrySet()) [ FD ]
