Line_10 $$ if (subResource != null) -->Line_11 $$ sb.append("/").append(subResource)[ CD ]
Line_2 $$ private URL createURL(String collection, String resource, String subResource, Map<String, ?> parameters) throws IOException -->Line_7 $$ sb.append(collection)[ FD ]
Line_4 $$ StringBuilder sb = new StringBuilder()-->Line_15 $$ URIBuilder uriBuilder = new URIBuilder(sb.toString())[ FD ]
Line_17 $$ for (Map.Entry<String, ?> param : parameters.entrySet()) -->Line_23 $$ uriBuilder.addParameter(param.getKey(), s)[ FD ]
Line_4 $$ StringBuilder sb = new StringBuilder()-->Line_9 $$ sb.append("/").append(URLEncoder.encode(resource, UTF8))[ FD ]
Line_4 $$ StringBuilder sb = new StringBuilder()-->Line_7 $$ sb.append(collection)[ FD ]
Line_15 $$ URIBuilder uriBuilder = new URIBuilder(sb.toString())-->Line_20 $$ uriBuilder.addParameter(param.getKey(), (String) value)[ FD ]
Line_19 $$ if (value instanceof String) -->Line_20 $$ uriBuilder.addParameter(param.getKey(), (String) value)[ CD ]
Line_22 $$ for (String s : (String[]) value) -->Line_23 $$ uriBuilder.addParameter(param.getKey(), s)[ FD ]
Line_2 $$ private URL createURL(String collection, String resource, String subResource, Map<String, ?> parameters) throws IOException -->Line_9 $$ sb.append("/").append(URLEncoder.encode(resource, UTF8))[ FD ]
Line_15 $$ URIBuilder uriBuilder = new URIBuilder(sb.toString())-->Line_28 $$ return uriBuilder.build().toURL()[ FD ]
Line_18 $$ Object value = param.getValue()-->Line_19 $$ if (value instanceof String) [ FD ]
Line_2 $$ private URL createURL(String collection, String resource, String subResource, Map<String, ?> parameters) throws IOException -->Line_10 $$ if (subResource != null) [ FD ]
Line_2 $$ private URL createURL(String collection, String resource, String subResource, Map<String, ?> parameters) throws IOException -->Line_16 $$ if (parameters != null) [ FD ]
Line_4 $$ StringBuilder sb = new StringBuilder()-->Line_5 $$ sb.append(kmsUrl)[ FD ]
Line_17 $$ for (Map.Entry<String, ?> param : parameters.entrySet()) -->Line_18 $$ Object value = param.getValue()[ FD ]
Line_2 $$ private URL createURL(String collection, String resource, String subResource, Map<String, ?> parameters) throws IOException -->Line_8 $$ if (resource != null) [ FD ]
Line_4 $$ StringBuilder sb = new StringBuilder()-->Line_11 $$ sb.append("/").append(subResource)[ FD ]
Line_2 $$ private URL createURL(String collection, String resource, String subResource, Map<String, ?> parameters) throws IOException -->Line_11 $$ sb.append("/").append(subResource)[ FD ]
Line_15 $$ URIBuilder uriBuilder = new URIBuilder(sb.toString())-->Line_23 $$ uriBuilder.addParameter(param.getKey(), s)[ FD ]
Line_6 $$ if (collection != null) -->Line_7 $$ sb.append(collection)[ CD ]
Line_2 $$ private URL createURL(String collection, String resource, String subResource, Map<String, ?> parameters) throws IOException -->Line_17 $$ for (Map.Entry<String, ?> param : parameters.entrySet()) [ FD ]
Line_6 $$ if (collection != null) -->Line_8 $$ if (resource != null) [ CD ]
Line_2 $$ private URL createURL(String collection, String resource, String subResource, Map<String, ?> parameters) throws IOException -->Line_6 $$ if (collection != null) [ FD ]
Line_17 $$ for (Map.Entry<String, ?> param : parameters.entrySet()) -->Line_20 $$ uriBuilder.addParameter(param.getKey(), (String) value)[ FD ]
Line_8 $$ if (resource != null) -->Line_9 $$ sb.append("/").append(URLEncoder.encode(resource, UTF8))[ CD ]
Line_8 $$ if (resource != null) -->Line_10 $$ if (subResource != null) [ CD ]
