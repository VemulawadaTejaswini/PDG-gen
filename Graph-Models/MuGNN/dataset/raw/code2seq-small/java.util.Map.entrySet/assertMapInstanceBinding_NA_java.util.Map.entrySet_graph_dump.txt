Line_12 $$ Map.Entry entry = (Map.Entry) binding.getInstance()-->Line_14 $$ Object providerValue = entry.getValue()[ FD ]
Line_8 $$ InstanceBinding binding = (InstanceBinding) element-->Line_10 $$ values.put(binding.getKey(), (V) binding.getInstance())[ FD ]
Line_7 $$ if (element instanceof InstanceBinding) -->Line_9 $$ if (binding.getKey().getRawType().equals(valueType)) [ CD ]
Line_2 $$ public <K, V> void assertMapInstanceBinding(Module module, Class<K> keyType, Class<V> valueType, Map<K, V> expected) throws Exception -->Line_4 $$ Map<Key, V> values = new HashMap()[ CD ]
Line_2 $$ public <K, V> void assertMapInstanceBinding(Module module, Class<K> keyType, Class<V> valueType, Map<K, V> expected) throws Exception -->Line_15 $$ if (key.getClass().equals(keyType) && providerValue instanceof ProviderLookup.ProviderImpl) [ FD ]
Line_12 $$ Map.Entry entry = (Map.Entry) binding.getInstance()-->Line_27 $$ assertEquals(entry.getValue(), value)[ FD ]
Line_2 $$ public <K, V> void assertMapInstanceBinding(Module module, Class<K> keyType, Class<V> valueType, Map<K, V> expected) throws Exception -->Line_5 $$ List<Element> elements = Elements.getElements(module)[ CD ]
Line_3 $$ Map<K, Key> keys = new HashMap()-->Line_23 $$ Key valueKey = keys.get(entry.getKey())[ FD ]
Line_6 $$ for (Element element : elements) -->Line_7 $$ if (element instanceof InstanceBinding) [ FD ]
Line_3 $$ Map<K, Key> keys = new HashMap()-->Line_17 $$ keys.put((K) key, provider.getKey())[ FD ]
Line_9 $$ if (binding.getKey().getRawType().equals(valueType)) -->Line_11 $$ if (binding.getInstance() instanceof Map.Entry) [ CD ]
Line_12 $$ Map.Entry entry = (Map.Entry) binding.getInstance()-->Line_24 $$ assertNotNull("Could not find binding for key [" + entry.getKey() + "], found these keys:\n" + keys.keySet(), valueKey)[ FD ]
Line_16 $$ ProviderLookup.ProviderImpl provider = (ProviderLookup.ProviderImpl) providerValue-->Line_17 $$ keys.put((K) key, provider.getKey())[ FD ]
Line_11 $$ if (binding.getInstance() instanceof Map.Entry) -->Line_12 $$ Map.Entry entry = (Map.Entry) binding.getInstance()[ CD ]
Line_11 $$ if (binding.getInstance() instanceof Map.Entry) -->Line_14 $$ Object providerValue = entry.getValue()[ CD ]
Line_3 $$ Map<K, Key> keys = new HashMap()-->Line_24 $$ assertNotNull("Could not find binding for key [" + entry.getKey() + "], found these keys:\n" + keys.keySet(), valueKey)[ FD ]
Line_15 $$ if (key.getClass().equals(keyType) && providerValue instanceof ProviderLookup.ProviderImpl) -->Line_16 $$ ProviderLookup.ProviderImpl provider = (ProviderLookup.ProviderImpl) providerValue[ CD ]
Line_7 $$ if (element instanceof InstanceBinding) -->Line_8 $$ InstanceBinding binding = (InstanceBinding) element[ CD ]
Line_12 $$ Map.Entry entry = (Map.Entry) binding.getInstance()-->Line_23 $$ Key valueKey = keys.get(entry.getKey())[ FD ]
Line_25 $$ V value = values.get(valueKey)-->Line_27 $$ assertEquals(entry.getValue(), value)[ FD ]
Line_8 $$ InstanceBinding binding = (InstanceBinding) element-->Line_9 $$ if (binding.getKey().getRawType().equals(valueType)) [ FD ]
Line_23 $$ Key valueKey = keys.get(entry.getKey())-->Line_24 $$ assertNotNull("Could not find binding for key [" + entry.getKey() + "], found these keys:\n" + keys.keySet(), valueKey)[ FD ]
Line_2 $$ public <K, V> void assertMapInstanceBinding(Module module, Class<K> keyType, Class<V> valueType, Map<K, V> expected) throws Exception -->Line_5 $$ List<Element> elements = Elements.getElements(module)[ FD ]
Line_2 $$ public <K, V> void assertMapInstanceBinding(Module module, Class<K> keyType, Class<V> valueType, Map<K, V> expected) throws Exception -->Line_22 $$ for (Map.Entry<K, V> entry : expected.entrySet()) [ FD ]
Line_4 $$ Map<Key, V> values = new HashMap()-->Line_10 $$ values.put(binding.getKey(), (V) binding.getInstance())[ FD ]
Line_8 $$ InstanceBinding binding = (InstanceBinding) element-->Line_12 $$ Map.Entry entry = (Map.Entry) binding.getInstance()[ FD ]
Line_15 $$ if (key.getClass().equals(keyType) && providerValue instanceof ProviderLookup.ProviderImpl) -->Line_17 $$ keys.put((K) key, provider.getKey())[ CD ]
Line_9 $$ if (binding.getKey().getRawType().equals(valueType)) -->Line_10 $$ values.put(binding.getKey(), (V) binding.getInstance())[ CD ]
Line_23 $$ Key valueKey = keys.get(entry.getKey())-->Line_25 $$ V value = values.get(valueKey)[ FD ]
Line_12 $$ Map.Entry entry = (Map.Entry) binding.getInstance()-->Line_13 $$ Object key = entry.getKey()[ FD ]
Line_11 $$ if (binding.getInstance() instanceof Map.Entry) -->Line_13 $$ Object key = entry.getKey()[ CD ]
Line_4 $$ Map<Key, V> values = new HashMap()-->Line_25 $$ V value = values.get(valueKey)[ FD ]
Line_8 $$ InstanceBinding binding = (InstanceBinding) element-->Line_11 $$ if (binding.getInstance() instanceof Map.Entry) [ FD ]
Line_13 $$ Object key = entry.getKey()-->Line_15 $$ if (key.getClass().equals(keyType) && providerValue instanceof ProviderLookup.ProviderImpl) [ FD ]
Line_2 $$ public <K, V> void assertMapInstanceBinding(Module module, Class<K> keyType, Class<V> valueType, Map<K, V> expected) throws Exception -->Line_9 $$ if (binding.getKey().getRawType().equals(valueType)) [ FD ]
Line_2 $$ public <K, V> void assertMapInstanceBinding(Module module, Class<K> keyType, Class<V> valueType, Map<K, V> expected) throws Exception -->Line_3 $$ Map<K, Key> keys = new HashMap()[ CD ]
Line_11 $$ if (binding.getInstance() instanceof Map.Entry) -->Line_15 $$ if (key.getClass().equals(keyType) && providerValue instanceof ProviderLookup.ProviderImpl) [ CD ]
