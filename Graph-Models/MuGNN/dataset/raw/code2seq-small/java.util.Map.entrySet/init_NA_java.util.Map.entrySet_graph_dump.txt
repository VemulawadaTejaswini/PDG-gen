Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY)-->Line_49 $$ if (themeDisplay.isLifecycleRender() || themeDisplay.isLifecycleResource()) [ FD ]
Line_124 $$ if ((userId > 0) && (remoteUser == null)) -->Line_125 $$ _remoteUser = String.valueOf(userId)[ CD ]
Line_49 $$ if (themeDisplay.isLifecycleRender() || themeDisplay.isLifecycleResource()) -->Line_50 $$ portletFocus = true[ CD ]
Line_58 $$ if (portletFocus) -->Line_63 $$ Map<String, String[]> parameters = request.getParameterMap()[ CD ]
Line_65 $$ String name = entry.getKey()-->Line_66 $$ if (isInvalidParameter(name)) [ FD ]
Line_37 $$ request = DynamicServletRequest.addQueryString(request, dynamicQueryString, true)-->Line_123 $$ long userId = PortalUtil.getUserId(request)[ FD ]
Line_14 $$ boolean warFile = portletApp.isWARFile()-->Line_15 $$ if (!warFile) [ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_77 $$ if (name.startsWith(portletNamespace) || !portlet.isRequiresNamespacedParameters()) [ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_88 $$ Map<String, String[]> renderParameters = RenderParametersPool.get(request, plid, _portletName)[ FD ]
Line_16 $$ String portletResource = ParamUtil.getString(request, portletNamespace.concat("portletResource"))-->Line_20 $$ resourcePortlet = PortletLocalServiceUtil.getPortletById(themeDisplay.getCompanyId(), portletResource)[ FD ]
Line_18 $$ Portlet resourcePortlet = null-->Line_20 $$ resourcePortlet = PortletLocalServiceUtil.getPortletById(themeDisplay.getCompanyId(), portletResource)[ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_14 $$ boolean warFile = portletApp.isWARFile()[ CD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY)[ FD ]
Line_37 $$ request = DynamicServletRequest.addQueryString(request, dynamicQueryString, true)-->Line_88 $$ Map<String, String[]> renderParameters = RenderParametersPool.get(request, plid, _portletName)[ FD ]
Line_43 $$ dynamicRequest = new DynamicServletRequest(request, false)-->Line_98 $$ mergePublicRenderParameters(dynamicRequest, preferences, plid)[ FD ]
Line_32 $$ request = new SharedSessionServletRequest(request, !portlet.isPrivateSessionAttributes())-->Line_123 $$ long userId = PortalUtil.getUserId(request)[ FD ]
Line_59 $$ Map<String, String[]> renderParameters = new HashMap()-->Line_71 $$ renderParameters.put(name, values)[ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_7 $$ _publicRenderParameters = PublicRenderParametersPool.get(request, plid, portletApp.isWARFile())[ CD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_45 $$ boolean portletFocus = false[ CD ]
Line_13 $$ String portletNamespace = PortalUtil.getPortletNamespace(_portletName)-->Line_16 $$ String portletResource = ParamUtil.getString(request, portletNamespace.concat("portletResource"))[ FD ]
Line_50 $$ portletFocus = true-->Line_54 $$ portletFocus = true[ FD ]
Line_41 $$ dynamicRequest = new NamespaceServletRequest(request, portletNamespace, portletNamespace, false)-->Line_98 $$ mergePublicRenderParameters(dynamicRequest, preferences, plid)[ FD ]
Line_123 $$ long userId = PortalUtil.getUserId(request)-->Line_125 $$ _remoteUser = String.valueOf(userId)[ FD ]
Line_37 $$ request = DynamicServletRequest.addQueryString(request, dynamicQueryString, true)-->Line_60 $$ if (getLifecycle().equals(PortletRequest.RENDER_PHASE) && !LiferayWindowState.isExclusive(request) && !LiferayWindowState.isPopUp(request)) [ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_5 $$ _portletName = portlet.getPortletId()[ CD ]
Line_23 $$ if (resourcePortlet != null) -->Line_24 $$ PortletApp resourcePortletApp = resourcePortlet.getPortletApp()[ CD ]
Line_76 $$ if ((invokerPortlet != null) && invokerPortlet.isFacesPortlet()) -->Line_77 $$ if (name.startsWith(portletNamespace) || !portlet.isRequiresNamespacedParameters()) [ CD ]
Line_37 $$ request = DynamicServletRequest.addQueryString(request, dynamicQueryString, true)-->Line_131 $$ _userPrincipal = request.getUserPrincipal()[ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_6 $$ PortletApp portletApp = portlet.getPortletApp()[ FD ]
Line_37 $$ request = DynamicServletRequest.addQueryString(request, dynamicQueryString, true)-->Line_46 $$ String ppid = ParamUtil.getString(request, "p_p_id")[ FD ]
Line_13 $$ String portletNamespace = PortalUtil.getPortletNamespace(_portletName)-->Line_77 $$ if (name.startsWith(portletNamespace) || !portlet.isRequiresNamespacedParameters()) [ FD ]
Line_41 $$ dynamicRequest = new NamespaceServletRequest(request, portletNamespace, portletNamespace, false)-->Line_43 $$ dynamicRequest = new DynamicServletRequest(request, false)[ FD ]
Line_32 $$ request = new SharedSessionServletRequest(request, !portlet.isPrivateSessionAttributes())-->Line_109 $$ String remoteUser = request.getRemoteUser()[ FD ]
Line_37 $$ request = DynamicServletRequest.addQueryString(request, dynamicQueryString, true)-->Line_61 $$ RenderParametersPool.put(request, plid, _portletName, renderParameters)[ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_113 $$ User user = PortalUtil.getUser(request)[ FD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY)-->Line_51 $$ if (themeDisplay.isLifecycleAction()) [ FD ]
Line_65 $$ String name = entry.getKey()-->Line_93 $$ name = removePortletNamespace(portletNamespace, name)[ FD ]
Line_16 $$ String portletResource = ParamUtil.getString(request, portletNamespace.concat("portletResource"))-->Line_17 $$ if (Validator.isNotNull(portletResource)) [ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_46 $$ String ppid = ParamUtil.getString(request, "p_p_id")[ CD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY)[ CD ]
Line_39 $$ DynamicServletRequest dynamicRequest = null-->Line_95 $$ dynamicRequest.setParameterValues(name, values)[ FD ]
Line_41 $$ dynamicRequest = new NamespaceServletRequest(request, portletNamespace, portletNamespace, false)-->Line_78 $$ dynamicRequest.setParameterValues(name, values)[ FD ]
Line_65 $$ String name = entry.getKey()-->Line_82 $$ if (!realName.equals(name) || !portlet.isRequiresNamespacedParameters()) [ FD ]
Line_18 $$ Portlet resourcePortlet = null-->Line_24 $$ PortletApp resourcePortletApp = resourcePortlet.getPortletApp()[ FD ]
Line_59 $$ Map<String, String[]> renderParameters = new HashMap()-->Line_61 $$ RenderParametersPool.put(request, plid, _portletName, renderParameters)[ FD ]
Line_43 $$ dynamicRequest = new DynamicServletRequest(request, false)-->Line_78 $$ dynamicRequest.setParameterValues(name, values)[ FD ]
Line_65 $$ String name = entry.getKey()-->Line_77 $$ if (name.startsWith(portletNamespace) || !portlet.isRequiresNamespacedParameters()) [ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_61 $$ RenderParametersPool.put(request, plid, _portletName, renderParameters)[ FD ]
Line_59 $$ Map<String, String[]> renderParameters = new HashMap()-->Line_89 $$ for (Map.Entry<String, String[]> entry : renderParameters.entrySet()) [ FD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY)-->Line_20 $$ resourcePortlet = PortletLocalServiceUtil.getPortletById(themeDisplay.getCompanyId(), portletResource)[ FD ]
Line_15 $$ if (!warFile) -->Line_17 $$ if (Validator.isNotNull(portletResource)) [ CD ]
Line_114 $$ if (user != null) -->Line_116 $$ _remoteUserId = user.getUserId()[ CD ]
Line_92 $$ if ((invokerPortlet == null) || !invokerPortlet.isFacesPortlet()) -->Line_93 $$ name = removePortletNamespace(portletNamespace, name)[ CD ]
Line_40 $$ if (portlet.isPrivateRequestAttributes()) -->Line_41 $$ dynamicRequest = new NamespaceServletRequest(request, portletNamespace, portletNamespace, false)[ CD ]
Line_64 $$ for (Map.Entry<String, String[]> entry : parameters.entrySet()) -->Line_91 $$ String[] values = entry.getValue()[ FD ]
Line_51 $$ if (themeDisplay.isLifecycleAction()) -->Line_53 $$ if (getLifecycle().equals(PortletRequest.ACTION_PHASE)) [ CD ]
Line_48 $$ if (_portletName.equals(ppid) && !(windowStateRestoreCurrentView && portlet.isRestoreCurrentView())) -->Line_49 $$ if (themeDisplay.isLifecycleRender() || themeDisplay.isLifecycleResource()) [ CD ]
Line_32 $$ request = new SharedSessionServletRequest(request, !portlet.isPrivateSessionAttributes())-->Line_88 $$ Map<String, String[]> renderParameters = RenderParametersPool.get(request, plid, _portletName)[ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_34 $$ String dynamicQueryString = (String) request.getAttribute(DynamicServletRequest.DYNAMIC_QUERY_STRING)[ FD ]
Line_65 $$ String name = entry.getKey()-->Line_71 $$ renderParameters.put(name, values)[ FD ]
Line_39 $$ DynamicServletRequest dynamicRequest = null-->Line_98 $$ mergePublicRenderParameters(dynamicRequest, preferences, plid)[ FD ]
Line_8 $$ if (invokerPortlet != null) -->Line_9 $$ if (invokerPortlet.isStrutsPortlet() || invokerPortlet.isStrutsBridgePortlet()) [ CD ]
Line_65 $$ String name = entry.getKey()-->Line_81 $$ String realName = removePortletNamespace(portletNamespace, name)[ FD ]
Line_32 $$ request = new SharedSessionServletRequest(request, !portlet.isPrivateSessionAttributes())-->Line_63 $$ Map<String, String[]> parameters = request.getParameterMap()[ FD ]
Line_114 $$ if (user != null) -->Line_115 $$ _remoteUser = user.getScreenName()[ CD ]
Line_124 $$ if ((userId > 0) && (remoteUser == null)) -->Line_130 $$ _remoteUserId = GetterUtil.getLong(remoteUser)[ CD ]
Line_24 $$ PortletApp resourcePortletApp = resourcePortlet.getPortletApp()-->Line_25 $$ if (resourcePortletApp.isWARFile()) [ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_40 $$ if (portlet.isPrivateRequestAttributes()) [ FD ]
Line_113 $$ User user = PortalUtil.getUser(request)-->Line_115 $$ _remoteUser = user.getScreenName()[ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_37 $$ request = DynamicServletRequest.addQueryString(request, dynamicQueryString, true)[ FD ]
Line_23 $$ if (resourcePortlet != null) -->Line_25 $$ if (resourcePortletApp.isWARFile()) [ CD ]
Line_69 $$ String[] values = entry.getValue()-->Line_71 $$ renderParameters.put(name, values)[ FD ]
Line_32 $$ request = new SharedSessionServletRequest(request, !portlet.isPrivateSessionAttributes())-->Line_60 $$ if (getLifecycle().equals(PortletRequest.RENDER_PHASE) && !LiferayWindowState.isExclusive(request) && !LiferayWindowState.isPopUp(request)) [ FD ]
Line_76 $$ if ((invokerPortlet != null) && invokerPortlet.isFacesPortlet()) -->Line_81 $$ String realName = removePortletNamespace(portletNamespace, name)[ CD ]
Line_32 $$ request = new SharedSessionServletRequest(request, !portlet.isPrivateSessionAttributes())-->Line_34 $$ String dynamicQueryString = (String) request.getAttribute(DynamicServletRequest.DYNAMIC_QUERY_STRING)[ FD ]
Line_17 $$ if (Validator.isNotNull(portletResource)) -->Line_18 $$ Portlet resourcePortlet = null[ CD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_82 $$ if (!realName.equals(name) || !portlet.isRequiresNamespacedParameters()) [ FD ]
Line_6 $$ PortletApp portletApp = portlet.getPortletApp()-->Line_7 $$ _publicRenderParameters = PublicRenderParametersPool.get(request, plid, portletApp.isWARFile())[ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_5 $$ _portletName = portlet.getPortletId()[ FD ]
Line_32 $$ request = new SharedSessionServletRequest(request, !portlet.isPrivateSessionAttributes())-->Line_46 $$ String ppid = ParamUtil.getString(request, "p_p_id")[ FD ]
Line_82 $$ if (!realName.equals(name) || !portlet.isRequiresNamespacedParameters()) -->Line_83 $$ dynamicRequest.setParameterValues(realName, values)[ CD ]
Line_69 $$ String[] values = entry.getValue()-->Line_83 $$ dynamicRequest.setParameterValues(realName, values)[ FD ]
Line_14 $$ boolean warFile = portletApp.isWARFile()-->Line_26 $$ warFile = true[ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_32 $$ request = new SharedSessionServletRequest(request, !portlet.isPrivateSessionAttributes())[ FD ]
Line_20 $$ resourcePortlet = PortletLocalServiceUtil.getPortletById(themeDisplay.getCompanyId(), portletResource)-->Line_24 $$ PortletApp resourcePortletApp = resourcePortlet.getPortletApp()[ FD ]
Line_37 $$ request = DynamicServletRequest.addQueryString(request, dynamicQueryString, true)-->Line_109 $$ String remoteUser = request.getRemoteUser()[ FD ]
Line_32 $$ request = new SharedSessionServletRequest(request, !portlet.isPrivateSessionAttributes())-->Line_37 $$ request = DynamicServletRequest.addQueryString(request, dynamicQueryString, true)[ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_48 $$ if (_portletName.equals(ppid) && !(windowStateRestoreCurrentView && portlet.isRestoreCurrentView())) [ FD ]
Line_81 $$ String realName = removePortletNamespace(portletNamespace, name)-->Line_83 $$ dynamicRequest.setParameterValues(realName, values)[ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_131 $$ _userPrincipal = request.getUserPrincipal()[ FD ]
Line_53 $$ if (getLifecycle().equals(PortletRequest.ACTION_PHASE)) -->Line_54 $$ portletFocus = true[ CD ]
Line_60 $$ if (getLifecycle().equals(PortletRequest.RENDER_PHASE) && !LiferayWindowState.isExclusive(request) && !LiferayWindowState.isPopUp(request)) -->Line_61 $$ RenderParametersPool.put(request, plid, _portletName, renderParameters)[ CD ]
Line_58 $$ if (portletFocus) -->Line_88 $$ Map<String, String[]> renderParameters = RenderParametersPool.get(request, plid, _portletName)[ CD ]
Line_41 $$ dynamicRequest = new NamespaceServletRequest(request, portletNamespace, portletNamespace, false)-->Line_95 $$ dynamicRequest.setParameterValues(name, values)[ FD ]
Line_43 $$ dynamicRequest = new DynamicServletRequest(request, false)-->Line_95 $$ dynamicRequest.setParameterValues(name, values)[ FD ]
Line_43 $$ dynamicRequest = new DynamicServletRequest(request, false)-->Line_83 $$ dynamicRequest.setParameterValues(realName, values)[ FD ]
Line_39 $$ DynamicServletRequest dynamicRequest = null-->Line_78 $$ dynamicRequest.setParameterValues(name, values)[ FD ]
Line_58 $$ if (portletFocus) -->Line_59 $$ Map<String, String[]> renderParameters = new HashMap()[ CD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_48 $$ if (_portletName.equals(ppid) && !(windowStateRestoreCurrentView && portlet.isRestoreCurrentView())) [ CD ]
Line_15 $$ if (!warFile) -->Line_16 $$ String portletResource = ParamUtil.getString(request, portletNamespace.concat("portletResource"))[ CD ]
Line_69 $$ String[] values = entry.getValue()-->Line_78 $$ dynamicRequest.setParameterValues(name, values)[ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_15 $$ if (!warFile) [ CD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_111 $$ if (userPrincipalStrategy.equals(PortletConstants.USER_PRINCIPAL_STRATEGY_SCREEN_NAME)) [ CD ]
Line_32 $$ request = new SharedSessionServletRequest(request, !portlet.isPrivateSessionAttributes())-->Line_113 $$ User user = PortalUtil.getUser(request)[ FD ]
Line_13 $$ String portletNamespace = PortalUtil.getPortletNamespace(_portletName)-->Line_93 $$ name = removePortletNamespace(portletNamespace, name)[ FD ]
Line_18 $$ Portlet resourcePortlet = null-->Line_23 $$ if (resourcePortlet != null) [ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_35 $$ if (dynamicQueryString != null) [ CD ]
Line_64 $$ for (Map.Entry<String, String[]> entry : parameters.entrySet()) -->Line_90 $$ String name = entry.getKey()[ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_76 $$ if ((invokerPortlet != null) && invokerPortlet.isFacesPortlet()) [ FD ]
Line_111 $$ if (userPrincipalStrategy.equals(PortletConstants.USER_PRINCIPAL_STRATEGY_SCREEN_NAME)) -->Line_124 $$ if ((userId > 0) && (remoteUser == null)) [ CD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_92 $$ if ((invokerPortlet == null) || !invokerPortlet.isFacesPortlet()) [ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_39 $$ DynamicServletRequest dynamicRequest = null[ CD ]
Line_32 $$ request = new SharedSessionServletRequest(request, !portlet.isPrivateSessionAttributes())-->Line_61 $$ RenderParametersPool.put(request, plid, _portletName, renderParameters)[ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_60 $$ if (getLifecycle().equals(PortletRequest.RENDER_PHASE) && !LiferayWindowState.isExclusive(request) && !LiferayWindowState.isPopUp(request)) [ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_31 $$ if (warFile) [ CD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_36 $$ request.removeAttribute(DynamicServletRequest.DYNAMIC_QUERY_STRING)[ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_110 $$ String userPrincipalStrategy = portlet.getUserPrincipalStrategy()[ CD ]
Line_113 $$ User user = PortalUtil.getUser(request)-->Line_114 $$ if (user != null) [ FD ]
Line_113 $$ User user = PortalUtil.getUser(request)-->Line_116 $$ _remoteUserId = user.getUserId()[ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_63 $$ Map<String, String[]> parameters = request.getParameterMap()[ FD ]
Line_69 $$ String[] values = entry.getValue()-->Line_95 $$ dynamicRequest.setParameterValues(name, values)[ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_134 $$ _locale = themeDisplay.getLocale()[ CD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_98 $$ mergePublicRenderParameters(dynamicRequest, preferences, plid)[ CD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_109 $$ String remoteUser = request.getRemoteUser()[ CD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_8 $$ if (invokerPortlet != null) [ CD ]
Line_65 $$ String name = entry.getKey()-->Line_95 $$ dynamicRequest.setParameterValues(name, values)[ FD ]
Line_20 $$ resourcePortlet = PortletLocalServiceUtil.getPortletById(themeDisplay.getCompanyId(), portletResource)-->Line_23 $$ if (resourcePortlet != null) [ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_123 $$ long userId = PortalUtil.getUserId(request)[ FD ]
Line_124 $$ if ((userId > 0) && (remoteUser == null)) -->Line_131 $$ _userPrincipal = request.getUserPrincipal()[ CD ]
Line_64 $$ for (Map.Entry<String, String[]> entry : parameters.entrySet()) -->Line_65 $$ String name = entry.getKey()[ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_110 $$ String userPrincipalStrategy = portlet.getUserPrincipalStrategy()[ FD ]
Line_93 $$ name = removePortletNamespace(portletNamespace, name)-->Line_95 $$ dynamicRequest.setParameterValues(name, values)[ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_46 $$ String ppid = ParamUtil.getString(request, "p_p_id")[ FD ]
Line_31 $$ if (warFile) -->Line_32 $$ request = new SharedSessionServletRequest(request, !portlet.isPrivateSessionAttributes())[ CD ]
Line_35 $$ if (dynamicQueryString != null) -->Line_36 $$ request.removeAttribute(DynamicServletRequest.DYNAMIC_QUERY_STRING)[ CD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_6 $$ PortletApp portletApp = portlet.getPortletApp()[ CD ]
Line_39 $$ DynamicServletRequest dynamicRequest = null-->Line_43 $$ dynamicRequest = new DynamicServletRequest(request, false)[ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_101 $$ _wapTheme = BrowserSnifferUtil.isWap(_request)[ CD ]
Line_81 $$ String realName = removePortletNamespace(portletNamespace, name)-->Line_82 $$ if (!realName.equals(name) || !portlet.isRequiresNamespacedParameters()) [ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_7 $$ _publicRenderParameters = PublicRenderParametersPool.get(request, plid, portletApp.isWARFile())[ FD ]
Line_109 $$ String remoteUser = request.getRemoteUser()-->Line_130 $$ _remoteUserId = GetterUtil.getLong(remoteUser)[ FD ]
Line_40 $$ if (portlet.isPrivateRequestAttributes()) -->Line_43 $$ dynamicRequest = new DynamicServletRequest(request, false)[ CD ]
Line_25 $$ if (resourcePortletApp.isWARFile()) -->Line_26 $$ warFile = true[ CD ]
Line_65 $$ String name = entry.getKey()-->Line_78 $$ dynamicRequest.setParameterValues(name, values)[ FD ]
Line_32 $$ request = new SharedSessionServletRequest(request, !portlet.isPrivateSessionAttributes())-->Line_47 $$ boolean windowStateRestoreCurrentView = ParamUtil.getBoolean(request, "p_p_state_rcv")[ FD ]
Line_17 $$ if (Validator.isNotNull(portletResource)) -->Line_23 $$ if (resourcePortlet != null) [ CD ]
Line_63 $$ Map<String, String[]> parameters = request.getParameterMap()-->Line_64 $$ for (Map.Entry<String, String[]> entry : parameters.entrySet()) [ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_16 $$ String portletResource = ParamUtil.getString(request, portletNamespace.concat("portletResource"))[ FD ]
Line_58 $$ if (portletFocus) -->Line_60 $$ if (getLifecycle().equals(PortletRequest.RENDER_PHASE) && !LiferayWindowState.isExclusive(request) && !LiferayWindowState.isPopUp(request)) [ CD ]
Line_6 $$ PortletApp portletApp = portlet.getPortletApp()-->Line_14 $$ boolean warFile = portletApp.isWARFile()[ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_109 $$ String remoteUser = request.getRemoteUser()[ FD ]
Line_39 $$ DynamicServletRequest dynamicRequest = null-->Line_83 $$ dynamicRequest.setParameterValues(realName, values)[ FD ]
Line_41 $$ dynamicRequest = new NamespaceServletRequest(request, portletNamespace, portletNamespace, false)-->Line_83 $$ dynamicRequest.setParameterValues(realName, values)[ FD ]
Line_69 $$ String[] values = entry.getValue()-->Line_73 $$ if (values == null) [ FD ]
Line_32 $$ request = new SharedSessionServletRequest(request, !portlet.isPrivateSessionAttributes())-->Line_131 $$ _userPrincipal = request.getUserPrincipal()[ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_47 $$ boolean windowStateRestoreCurrentView = ParamUtil.getBoolean(request, "p_p_state_rcv")[ CD ]
Line_49 $$ if (themeDisplay.isLifecycleRender() || themeDisplay.isLifecycleResource()) -->Line_51 $$ if (themeDisplay.isLifecycleAction()) [ CD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY)-->Line_70 $$ if (themeDisplay.isLifecycleRender()) [ FD ]
Line_110 $$ String userPrincipalStrategy = portlet.getUserPrincipalStrategy()-->Line_111 $$ if (userPrincipalStrategy.equals(PortletConstants.USER_PRINCIPAL_STRATEGY_SCREEN_NAME)) [ FD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) request.getAttribute(WebKeys.THEME_DISPLAY)-->Line_134 $$ _locale = themeDisplay.getLocale()[ FD ]
Line_35 $$ if (dynamicQueryString != null) -->Line_37 $$ request = DynamicServletRequest.addQueryString(request, dynamicQueryString, true)[ CD ]
Line_46 $$ String ppid = ParamUtil.getString(request, "p_p_id")-->Line_48 $$ if (_portletName.equals(ppid) && !(windowStateRestoreCurrentView && portlet.isRestoreCurrentView())) [ FD ]
Line_34 $$ String dynamicQueryString = (String) request.getAttribute(DynamicServletRequest.DYNAMIC_QUERY_STRING)-->Line_37 $$ request = DynamicServletRequest.addQueryString(request, dynamicQueryString, true)[ FD ]
Line_32 $$ request = new SharedSessionServletRequest(request, !portlet.isPrivateSessionAttributes())-->Line_36 $$ request.removeAttribute(DynamicServletRequest.DYNAMIC_QUERY_STRING)[ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_13 $$ String portletNamespace = PortalUtil.getPortletNamespace(_portletName)[ CD ]
Line_39 $$ DynamicServletRequest dynamicRequest = null-->Line_41 $$ dynamicRequest = new NamespaceServletRequest(request, portletNamespace, portletNamespace, false)[ FD ]
Line_77 $$ if (name.startsWith(portletNamespace) || !portlet.isRequiresNamespacedParameters()) -->Line_78 $$ dynamicRequest.setParameterValues(name, values)[ CD ]
Line_13 $$ String portletNamespace = PortalUtil.getPortletNamespace(_portletName)-->Line_81 $$ String realName = removePortletNamespace(portletNamespace, name)[ FD ]
Line_34 $$ String dynamicQueryString = (String) request.getAttribute(DynamicServletRequest.DYNAMIC_QUERY_STRING)-->Line_35 $$ if (dynamicQueryString != null) [ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_9 $$ if (invokerPortlet.isStrutsPortlet() || invokerPortlet.isStrutsBridgePortlet()) [ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_34 $$ String dynamicQueryString = (String) request.getAttribute(DynamicServletRequest.DYNAMIC_QUERY_STRING)[ CD ]
Line_45 $$ boolean portletFocus = false-->Line_54 $$ portletFocus = true[ FD ]
Line_37 $$ request = DynamicServletRequest.addQueryString(request, dynamicQueryString, true)-->Line_113 $$ User user = PortalUtil.getUser(request)[ FD ]
Line_45 $$ boolean portletFocus = false-->Line_50 $$ portletFocus = true[ FD ]
Line_70 $$ if (themeDisplay.isLifecycleRender()) -->Line_71 $$ renderParameters.put(name, values)[ CD ]
Line_76 $$ if ((invokerPortlet != null) && invokerPortlet.isFacesPortlet()) -->Line_82 $$ if (!realName.equals(name) || !portlet.isRequiresNamespacedParameters()) [ CD ]
Line_37 $$ request = DynamicServletRequest.addQueryString(request, dynamicQueryString, true)-->Line_47 $$ boolean windowStateRestoreCurrentView = ParamUtil.getBoolean(request, "p_p_state_rcv")[ FD ]
Line_111 $$ if (userPrincipalStrategy.equals(PortletConstants.USER_PRINCIPAL_STRATEGY_SCREEN_NAME)) -->Line_123 $$ long userId = PortalUtil.getUserId(request)[ CD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_8 $$ if (invokerPortlet != null) [ FD ]
Line_37 $$ request = DynamicServletRequest.addQueryString(request, dynamicQueryString, true)-->Line_63 $$ Map<String, String[]> parameters = request.getParameterMap()[ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_98 $$ mergePublicRenderParameters(dynamicRequest, preferences, plid)[ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_40 $$ if (portlet.isPrivateRequestAttributes()) [ CD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_47 $$ boolean windowStateRestoreCurrentView = ParamUtil.getBoolean(request, "p_p_state_rcv")[ FD ]
Line_64 $$ for (Map.Entry<String, String[]> entry : parameters.entrySet()) -->Line_69 $$ String[] values = entry.getValue()[ FD ]
Line_2 $$ protected void init(HttpServletRequest request, Portlet portlet, InvokerPortlet invokerPortlet, PortletContext portletContext, WindowState windowState, PortletMode portletMode, PortletPreferences preferences, long plid) -->Line_58 $$ if (portletFocus) [ CD ]
