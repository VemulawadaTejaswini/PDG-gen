Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_12 $$ if (analyzer != null) [ CD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_10 $$ builder.field(MultiMatchQueryParser.TYPE_FIELD.getPreferredName(), type.toString().toLowerCase(Locale.ENGLISH))[ CD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_16 $$ if (fuzziness != null) [ CD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_27 $$ if (useDisMax != null) [ CD ]
Line_21 $$ if (minimumShouldMatch != null) -->Line_22 $$ builder.field(MultiMatchQueryParser.MINIMUM_SHOULD_MATCH_FIELD.getPreferredName(), minimumShouldMatch)[ CD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_3 $$ builder.startObject(NAME)[ FD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_10 $$ builder.field(MultiMatchQueryParser.TYPE_FIELD.getPreferredName(), type.toString().toLowerCase(Locale.ENGLISH))[ FD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_35 $$ builder.field(MultiMatchQueryParser.CUTOFF_FREQUENCY_FIELD.getPreferredName(), cutoffFrequency)[ FD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_39 $$ builder.endObject()[ CD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_4 $$ builder.field(MultiMatchQueryParser.QUERY_FIELD.getPreferredName(), value)[ FD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_19 $$ builder.field(MultiMatchQueryParser.PREFIX_LENGTH_FIELD.getPreferredName(), prefixLength)[ FD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_20 $$ builder.field(MultiMatchQueryParser.MAX_EXPANSIONS_FIELD.getPreferredName(), maxExpansions)[ CD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_20 $$ builder.field(MultiMatchQueryParser.MAX_EXPANSIONS_FIELD.getPreferredName(), maxExpansions)[ FD ]
Line_30 $$ if (tieBreaker != null) -->Line_31 $$ builder.field(MultiMatchQueryParser.TIE_BREAKER_FIELD.getPreferredName(), tieBreaker)[ CD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_9 $$ builder.endArray()[ CD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_17 $$ fuzziness.toXContent(builder, params)[ FD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_34 $$ if (cutoffFrequency != null) [ CD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_15 $$ builder.field(MultiMatchQueryParser.SLOP_FIELD.getPreferredName(), slop)[ CD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_25 $$ builder.field(MultiMatchQueryParser.FUZZY_REWRITE_FIELD.getPreferredName(), fuzzyRewrite)[ FD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_38 $$ printBoostAndQueryName(builder)[ CD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_15 $$ builder.field(MultiMatchQueryParser.SLOP_FIELD.getPreferredName(), slop)[ FD ]
Line_12 $$ if (analyzer != null) -->Line_13 $$ builder.field(MultiMatchQueryParser.ANALYZER_FIELD.getPreferredName(), analyzer)[ CD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_11 $$ builder.field(MultiMatchQueryParser.OPERATOR_FIELD.getPreferredName(), operator.toString())[ FD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_38 $$ printBoostAndQueryName(builder)[ FD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_3 $$ builder.startObject(NAME)[ CD ]
Line_34 $$ if (cutoffFrequency != null) -->Line_35 $$ builder.field(MultiMatchQueryParser.CUTOFF_FREQUENCY_FIELD.getPreferredName(), cutoffFrequency)[ CD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_7 $$ builder.value(fieldEntry.getKey() + "^" + fieldEntry.getValue())[ FD ]
Line_6 $$ for (Map.Entry<String, Float> fieldEntry : this.fieldsBoosts.entrySet()) -->Line_7 $$ builder.value(fieldEntry.getKey() + "^" + fieldEntry.getValue())[ FD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_28 $$ builder.field(MultiMatchQueryParser.USE_DIS_MAX_FIELD.getPreferredName(), useDisMax)[ FD ]
Line_27 $$ if (useDisMax != null) -->Line_28 $$ builder.field(MultiMatchQueryParser.USE_DIS_MAX_FIELD.getPreferredName(), useDisMax)[ CD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_30 $$ if (tieBreaker != null) [ CD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_11 $$ builder.field(MultiMatchQueryParser.OPERATOR_FIELD.getPreferredName(), operator.toString())[ CD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_37 $$ builder.field(MultiMatchQueryParser.ZERO_TERMS_QUERY_FIELD.getPreferredName(), zeroTermsQuery.toString())[ FD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_33 $$ builder.field(MultiMatchQueryParser.LENIENT_FIELD.getPreferredName(), lenient)[ CD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_37 $$ builder.field(MultiMatchQueryParser.ZERO_TERMS_QUERY_FIELD.getPreferredName(), zeroTermsQuery.toString())[ CD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_5 $$ builder.startArray(MultiMatchQueryParser.FIELDS_FIELD.getPreferredName())[ CD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_22 $$ builder.field(MultiMatchQueryParser.MINIMUM_SHOULD_MATCH_FIELD.getPreferredName(), minimumShouldMatch)[ FD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_39 $$ builder.endObject()[ FD ]
Line_24 $$ if (fuzzyRewrite != null) -->Line_25 $$ builder.field(MultiMatchQueryParser.FUZZY_REWRITE_FIELD.getPreferredName(), fuzzyRewrite)[ CD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_13 $$ builder.field(MultiMatchQueryParser.ANALYZER_FIELD.getPreferredName(), analyzer)[ FD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_21 $$ if (minimumShouldMatch != null) [ CD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_5 $$ builder.startArray(MultiMatchQueryParser.FIELDS_FIELD.getPreferredName())[ FD ]
Line_16 $$ if (fuzziness != null) -->Line_17 $$ fuzziness.toXContent(builder, params)[ CD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_31 $$ builder.field(MultiMatchQueryParser.TIE_BREAKER_FIELD.getPreferredName(), tieBreaker)[ FD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_4 $$ builder.field(MultiMatchQueryParser.QUERY_FIELD.getPreferredName(), value)[ CD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_9 $$ builder.endArray()[ FD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_19 $$ builder.field(MultiMatchQueryParser.PREFIX_LENGTH_FIELD.getPreferredName(), prefixLength)[ CD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_24 $$ if (fuzzyRewrite != null) [ CD ]
Line_2 $$ public void doXContent(XContentBuilder builder, Params params) throws IOException -->Line_33 $$ builder.field(MultiMatchQueryParser.LENIENT_FIELD.getPreferredName(), lenient)[ FD ]
