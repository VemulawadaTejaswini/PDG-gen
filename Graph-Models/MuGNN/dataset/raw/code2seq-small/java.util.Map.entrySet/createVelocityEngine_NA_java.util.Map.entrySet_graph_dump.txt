Line_3 $$ VelocityEngine velocityEngine = newVelocityEngine()-->Line_18 $$ velocityEngine.setProperty(RuntimeConstants.RUNTIME_LOG_LOGSYSTEM, new CommonsLogLogChute())[ FD ]
Line_3 $$ VelocityEngine velocityEngine = newVelocityEngine()-->Line_15 $$ initVelocityResourceLoader(velocityEngine, this.resourceLoaderPath)[ FD ]
Line_3 $$ VelocityEngine velocityEngine = newVelocityEngine()-->Line_24 $$ velocityEngine.init()[ FD ]
Line_2 $$ public VelocityEngine createVelocityEngine() throws IOException, VelocityException -->Line_17 $$ if (this.overrideLogging) [ CD ]
Line_4 $$ Map<String, Object> props = new HashMap<String, Object>()-->Line_9 $$ CollectionUtils.mergePropertiesIntoMap(PropertiesLoaderUtils.loadProperties(this.configLocation), props)[ FD ]
Line_3 $$ VelocityEngine velocityEngine = newVelocityEngine()-->Line_23 $$ postProcessVelocityEngine(velocityEngine)[ FD ]
Line_2 $$ public VelocityEngine createVelocityEngine() throws IOException, VelocityException -->Line_25 $$ return velocityEngine[ CD ]
Line_2 $$ public VelocityEngine createVelocityEngine() throws IOException, VelocityException -->Line_3 $$ VelocityEngine velocityEngine = newVelocityEngine()[ CD ]
Line_6 $$ if (logger.isInfoEnabled()) -->Line_7 $$ logger.info("Loading Velocity config from [" + this.configLocation + "]")[ CD ]
Line_11 $$ if (!this.velocityProperties.isEmpty()) -->Line_12 $$ props.putAll(this.velocityProperties)[ CD ]
Line_3 $$ VelocityEngine velocityEngine = newVelocityEngine()-->Line_21 $$ velocityEngine.setProperty(entry.getKey(), entry.getValue())[ FD ]
Line_2 $$ public VelocityEngine createVelocityEngine() throws IOException, VelocityException -->Line_11 $$ if (!this.velocityProperties.isEmpty()) [ CD ]
Line_17 $$ if (this.overrideLogging) -->Line_18 $$ velocityEngine.setProperty(RuntimeConstants.RUNTIME_LOG_LOGSYSTEM, new CommonsLogLogChute())[ CD ]
Line_4 $$ Map<String, Object> props = new HashMap<String, Object>()-->Line_12 $$ props.putAll(this.velocityProperties)[ FD ]
Line_5 $$ if (this.configLocation != null) -->Line_6 $$ if (logger.isInfoEnabled()) [ CD ]
Line_14 $$ if (this.resourceLoaderPath != null) -->Line_15 $$ initVelocityResourceLoader(velocityEngine, this.resourceLoaderPath)[ CD ]
Line_2 $$ public VelocityEngine createVelocityEngine() throws IOException, VelocityException -->Line_4 $$ Map<String, Object> props = new HashMap<String, Object>()[ CD ]
Line_2 $$ public VelocityEngine createVelocityEngine() throws IOException, VelocityException -->Line_24 $$ velocityEngine.init()[ CD ]
Line_2 $$ public VelocityEngine createVelocityEngine() throws IOException, VelocityException -->Line_14 $$ if (this.resourceLoaderPath != null) [ CD ]
Line_20 $$ for (Map.Entry<String, Object> entry : props.entrySet()) -->Line_21 $$ velocityEngine.setProperty(entry.getKey(), entry.getValue())[ FD ]
Line_2 $$ public VelocityEngine createVelocityEngine() throws IOException, VelocityException -->Line_23 $$ postProcessVelocityEngine(velocityEngine)[ CD ]
Line_2 $$ public VelocityEngine createVelocityEngine() throws IOException, VelocityException -->Line_5 $$ if (this.configLocation != null) [ CD ]
Line_5 $$ if (this.configLocation != null) -->Line_9 $$ CollectionUtils.mergePropertiesIntoMap(PropertiesLoaderUtils.loadProperties(this.configLocation), props)[ CD ]
Line_4 $$ Map<String, Object> props = new HashMap<String, Object>()-->Line_20 $$ for (Map.Entry<String, Object> entry : props.entrySet()) [ FD ]
