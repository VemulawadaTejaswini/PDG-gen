Line_34 $$ if (Collection.class.isAssignableFrom(type) && type.isInterface()) -->Line_60 $$ if (Map.class.isAssignableFrom(type) && type.isInterface()) [ CD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_18 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, componentType, targetDesc)[ FD ]
Line_46 $$ if (descriptor.isRequired()) -->Line_47 $$ raiseNoSuchBeanDefinitionException(elementType, "collection of " + elementType.getName(), descriptor)[ CD ]
Line_96 $$ if (matchingBeans.size() > 1) -->Line_98 $$ if (primaryBeanName == null) [ CD ]
Line_34 $$ if (Collection.class.isAssignableFrom(type) && type.isInterface()) -->Line_44 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, elementType, targetDesc)[ CD ]
Line_3 $$ Class<?> type = descriptor.getDependencyType()-->Line_15 $$ Class<?> componentType = type.getComponentType()[ FD ]
Line_14 $$ if (type.isArray()) -->Line_19 $$ if (matchingBeans.isEmpty()) [ CD ]
Line_34 $$ if (Collection.class.isAssignableFrom(type) && type.isInterface()) -->Line_56 $$ if (getDependencyComparator() != null && result instanceof List) [ CD ]
Line_68 $$ Class<?> valueType = descriptor.getMapValueType()-->Line_77 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, valueType, targetDesc)[ FD ]
Line_62 $$ if (String.class != keyType) -->Line_63 $$ if (descriptor.isRequired()) [ CD ]
Line_69 $$ if (valueType == null) -->Line_70 $$ if (descriptor.isRequired()) [ CD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_4 $$ Object value = getAutowireCandidateResolver().getSuggestedValue(descriptor)[ CD ]
Line_3 $$ Class<?> type = descriptor.getDependencyType()-->Line_34 $$ if (Collection.class.isAssignableFrom(type) && type.isInterface()) [ FD ]
Line_3 $$ Class<?> type = descriptor.getDependencyType()-->Line_60 $$ if (Map.class.isAssignableFrom(type) && type.isInterface()) [ FD ]
Line_18 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, componentType, targetDesc)-->Line_104 $$ return matchingBeans.get(primaryBeanName)[ FD ]
Line_107 $$ if (autowiredBeanNames != null) -->Line_108 $$ autowiredBeanNames.add(entry.getKey())[ CD ]
Line_45 $$ if (matchingBeans.isEmpty()) -->Line_49 $$ return null[ CD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_51 $$ if (autowiredBeanNames != null) [ FD ]
Line_3 $$ Class<?> type = descriptor.getDependencyType()-->Line_64 $$ throw new FatalBeanException("Key type [" + keyType + "] of map [" + type.getName() + "] must be [java.lang.String]")[ FD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_47 $$ raiseNoSuchBeanDefinitionException(elementType, "collection of " + elementType.getName(), descriptor)[ FD ]
Line_16 $$ DependencyDescriptor targetDesc = new DependencyDescriptor(descriptor)-->Line_44 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, elementType, targetDesc)[ FD ]
Line_90 $$ if (matchingBeans.isEmpty()) -->Line_94 $$ return null[ CD ]
Line_60 $$ if (Map.class.isAssignableFrom(type) && type.isInterface()) -->Line_106 $$ Map.Entry<String, Object> entry = matchingBeans.entrySet().iterator().next()[ CD ]
Line_34 $$ if (Collection.class.isAssignableFrom(type) && type.isInterface()) -->Line_55 $$ Object result = converter.convertIfNecessary(matchingBeans.values(), type)[ CD ]
Line_4 $$ Object value = getAutowireCandidateResolver().getSuggestedValue(descriptor)-->Line_9 $$ value = evaluateBeanDefinitionString(strVal, bd)[ FD ]
Line_34 $$ if (Collection.class.isAssignableFrom(type) && type.isInterface()) -->Line_51 $$ if (autowiredBeanNames != null) [ CD ]
Line_14 $$ if (type.isArray()) -->Line_16 $$ DependencyDescriptor targetDesc = new DependencyDescriptor(descriptor)[ CD ]
Line_19 $$ if (matchingBeans.isEmpty()) -->Line_23 $$ return null[ CD ]
Line_36 $$ if (elementType == null) -->Line_40 $$ return null[ CD ]
Line_16 $$ DependencyDescriptor targetDesc = new DependencyDescriptor(descriptor)-->Line_18 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, componentType, targetDesc)[ FD ]
Line_97 $$ String primaryBeanName = determineAutowireCandidate(matchingBeans, descriptor)-->Line_104 $$ return matchingBeans.get(primaryBeanName)[ FD ]
Line_97 $$ String primaryBeanName = determineAutowireCandidate(matchingBeans, descriptor)-->Line_98 $$ if (primaryBeanName == null) [ FD ]
Line_60 $$ if (Map.class.isAssignableFrom(type) && type.isInterface()) -->Line_107 $$ if (autowiredBeanNames != null) [ CD ]
Line_56 $$ if (getDependencyComparator() != null && result instanceof List) -->Line_57 $$ Collections.sort((List<?>) result, adaptDependencyComparator(matchingBeans))[ CD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_20 $$ if (descriptor.isRequired()) [ FD ]
Line_14 $$ if (type.isArray()) -->Line_18 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, componentType, targetDesc)[ CD ]
Line_18 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, componentType, targetDesc)-->Line_57 $$ Collections.sort((List<?>) result, adaptDependencyComparator(matchingBeans))[ FD ]
Line_60 $$ if (Map.class.isAssignableFrom(type) && type.isInterface()) -->Line_77 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, valueType, targetDesc)[ CD ]
Line_14 $$ if (type.isArray()) -->Line_30 $$ if (getDependencyComparator() != null && result instanceof Object[]) [ CD ]
Line_79 $$ if (descriptor.isRequired()) -->Line_80 $$ raiseNoSuchBeanDefinitionException(valueType, "map with value type " + valueType.getName(), descriptor)[ CD ]
Line_84 $$ if (autowiredBeanNames != null) -->Line_85 $$ autowiredBeanNames.addAll(matchingBeans.keySet())[ CD ]
Line_6 $$ if (value instanceof String) -->Line_8 $$ BeanDefinition bd = (beanName != null && containsBean(beanName) ? getMergedBeanDefinition(beanName) : null)[ CD ]
Line_16 $$ DependencyDescriptor targetDesc = new DependencyDescriptor(descriptor)-->Line_17 $$ targetDesc.increaseNestingLevel()[ FD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_5 $$ if (value != null) [ CD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_92 $$ raiseNoSuchBeanDefinitionException(type, "", descriptor)[ FD ]
Line_3 $$ Class<?> type = descriptor.getDependencyType()-->Line_71 $$ throw new FatalBeanException("No value type declared for map [" + type.getName() + "]")[ FD ]
Line_106 $$ Map.Entry<String, Object> entry = matchingBeans.entrySet().iterator().next()-->Line_110 $$ return entry.getValue()[ FD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_70 $$ if (descriptor.isRequired()) [ FD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_44 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, elementType, targetDesc)[ FD ]
Line_91 $$ if (descriptor.isRequired()) -->Line_92 $$ raiseNoSuchBeanDefinitionException(type, "", descriptor)[ CD ]
Line_8 $$ BeanDefinition bd = (beanName != null && containsBean(beanName) ? getMergedBeanDefinition(beanName) : null)-->Line_9 $$ value = evaluateBeanDefinitionString(strVal, bd)[ FD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_12 $$ return (descriptor.getField() != null ? converter.convertIfNecessary(value, type, descriptor.getField()) : converter.convertIfNecessary(value, type, descriptor.getMethodParameter()))[ FD ]
Line_34 $$ if (Collection.class.isAssignableFrom(type) && type.isInterface()) -->Line_36 $$ if (elementType == null) [ CD ]
Line_60 $$ if (Map.class.isAssignableFrom(type) && type.isInterface()) -->Line_96 $$ if (matchingBeans.size() > 1) [ CD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_107 $$ if (autowiredBeanNames != null) [ FD ]
Line_3 $$ Class<?> type = descriptor.getDependencyType()-->Line_14 $$ if (type.isArray()) [ FD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_80 $$ raiseNoSuchBeanDefinitionException(valueType, "map with value type " + valueType.getName(), descriptor)[ FD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_108 $$ autowiredBeanNames.add(entry.getKey())[ FD ]
Line_30 $$ if (getDependencyComparator() != null && result instanceof Object[]) -->Line_31 $$ Arrays.sort((Object[]) result, adaptDependencyComparator(matchingBeans))[ CD ]
Line_3 $$ Class<?> type = descriptor.getDependencyType()-->Line_55 $$ Object result = converter.convertIfNecessary(matchingBeans.values(), type)[ FD ]
Line_16 $$ DependencyDescriptor targetDesc = new DependencyDescriptor(descriptor)-->Line_76 $$ targetDesc.increaseNestingLevel()[ FD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_68 $$ Class<?> valueType = descriptor.getMapValueType()[ FD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_84 $$ if (autowiredBeanNames != null) [ FD ]
Line_68 $$ Class<?> valueType = descriptor.getMapValueType()-->Line_69 $$ if (valueType == null) [ FD ]
Line_34 $$ if (Collection.class.isAssignableFrom(type) && type.isInterface()) -->Line_45 $$ if (matchingBeans.isEmpty()) [ CD ]
Line_4 $$ Object value = getAutowireCandidateResolver().getSuggestedValue(descriptor)-->Line_6 $$ if (value instanceof String) [ FD ]
Line_18 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, componentType, targetDesc)-->Line_31 $$ Arrays.sort((Object[]) result, adaptDependencyComparator(matchingBeans))[ FD ]
Line_18 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, componentType, targetDesc)-->Line_78 $$ if (matchingBeans.isEmpty()) [ FD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_8 $$ BeanDefinition bd = (beanName != null && containsBean(beanName) ? getMergedBeanDefinition(beanName) : null)[ FD ]
Line_7 $$ String strVal = resolveEmbeddedValue((String) value)-->Line_9 $$ value = evaluateBeanDefinitionString(strVal, bd)[ FD ]
Line_18 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, componentType, targetDesc)-->Line_55 $$ Object result = converter.convertIfNecessary(matchingBeans.values(), type)[ FD ]
Line_9 $$ value = evaluateBeanDefinitionString(strVal, bd)-->Line_12 $$ return (descriptor.getField() != null ? converter.convertIfNecessary(value, type, descriptor.getField()) : converter.convertIfNecessary(value, type, descriptor.getMethodParameter()))[ FD ]
Line_61 $$ Class<?> keyType = descriptor.getMapKeyType()-->Line_62 $$ if (String.class != keyType) [ FD ]
Line_45 $$ if (matchingBeans.isEmpty()) -->Line_46 $$ if (descriptor.isRequired()) [ CD ]
Line_11 $$ TypeConverter converter = (typeConverter != null ? typeConverter : getTypeConverter())-->Line_12 $$ return (descriptor.getField() != null ? converter.convertIfNecessary(value, type, descriptor.getField()) : converter.convertIfNecessary(value, type, descriptor.getMethodParameter()))[ FD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_52 $$ autowiredBeanNames.addAll(matchingBeans.keySet())[ FD ]
Line_5 $$ if (value != null) -->Line_11 $$ TypeConverter converter = (typeConverter != null ? typeConverter : getTypeConverter())[ CD ]
Line_14 $$ if (type.isArray()) -->Line_29 $$ Object result = converter.convertIfNecessary(matchingBeans.values(), type)[ CD ]
Line_60 $$ if (Map.class.isAssignableFrom(type) && type.isInterface()) -->Line_89 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, type, descriptor)[ CD ]
Line_96 $$ if (matchingBeans.size() > 1) -->Line_101 $$ if (autowiredBeanNames != null) [ CD ]
Line_36 $$ if (elementType == null) -->Line_37 $$ if (descriptor.isRequired()) [ CD ]
Line_14 $$ if (type.isArray()) -->Line_17 $$ targetDesc.increaseNestingLevel()[ CD ]
Line_60 $$ if (Map.class.isAssignableFrom(type) && type.isInterface()) -->Line_61 $$ Class<?> keyType = descriptor.getMapKeyType()[ CD ]
Line_4 $$ Object value = getAutowireCandidateResolver().getSuggestedValue(descriptor)-->Line_5 $$ if (value != null) [ FD ]
Line_78 $$ if (matchingBeans.isEmpty()) -->Line_79 $$ if (descriptor.isRequired()) [ CD ]
Line_15 $$ Class<?> componentType = type.getComponentType()-->Line_21 $$ raiseNoSuchBeanDefinitionException(componentType, "array of " + componentType.getName(), descriptor)[ FD ]
Line_51 $$ if (autowiredBeanNames != null) -->Line_52 $$ autowiredBeanNames.addAll(matchingBeans.keySet())[ CD ]
Line_60 $$ if (Map.class.isAssignableFrom(type) && type.isInterface()) -->Line_76 $$ targetDesc.increaseNestingLevel()[ CD ]
Line_18 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, componentType, targetDesc)-->Line_90 $$ if (matchingBeans.isEmpty()) [ FD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_14 $$ if (type.isArray()) [ CD ]
Line_6 $$ if (value instanceof String) -->Line_9 $$ value = evaluateBeanDefinitionString(strVal, bd)[ CD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_63 $$ if (descriptor.isRequired()) [ FD ]
Line_14 $$ if (type.isArray()) -->Line_33 $$ return result[ CD ]
Line_3 $$ Class<?> type = descriptor.getDependencyType()-->Line_89 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, type, descriptor)[ FD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_4 $$ Object value = getAutowireCandidateResolver().getSuggestedValue(descriptor)[ FD ]
Line_16 $$ DependencyDescriptor targetDesc = new DependencyDescriptor(descriptor)-->Line_43 $$ targetDesc.increaseNestingLevel()[ FD ]
Line_60 $$ if (Map.class.isAssignableFrom(type) && type.isInterface()) -->Line_84 $$ if (autowiredBeanNames != null) [ CD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_85 $$ autowiredBeanNames.addAll(matchingBeans.keySet())[ FD ]
Line_3 $$ Class<?> type = descriptor.getDependencyType()-->Line_38 $$ throw new FatalBeanException("No element type declared for collection [" + type.getName() + "]")[ FD ]
Line_11 $$ TypeConverter converter = (typeConverter != null ? typeConverter : getTypeConverter())-->Line_55 $$ Object result = converter.convertIfNecessary(matchingBeans.values(), type)[ FD ]
Line_18 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, componentType, targetDesc)-->Line_97 $$ String primaryBeanName = determineAutowireCandidate(matchingBeans, descriptor)[ FD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_89 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, type, descriptor)[ FD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_26 $$ autowiredBeanNames.addAll(matchingBeans.keySet())[ FD ]
Line_60 $$ if (Map.class.isAssignableFrom(type) && type.isInterface()) -->Line_78 $$ if (matchingBeans.isEmpty()) [ CD ]
Line_18 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, componentType, targetDesc)-->Line_52 $$ autowiredBeanNames.addAll(matchingBeans.keySet())[ FD ]
Line_4 $$ Object value = getAutowireCandidateResolver().getSuggestedValue(descriptor)-->Line_12 $$ return (descriptor.getField() != null ? converter.convertIfNecessary(value, type, descriptor.getField()) : converter.convertIfNecessary(value, type, descriptor.getMethodParameter()))[ FD ]
Line_3 $$ Class<?> type = descriptor.getDependencyType()-->Line_92 $$ raiseNoSuchBeanDefinitionException(type, "", descriptor)[ FD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_3 $$ Class<?> type = descriptor.getDependencyType()[ CD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_102 $$ autowiredBeanNames.add(primaryBeanName)[ FD ]
Line_60 $$ if (Map.class.isAssignableFrom(type) && type.isInterface()) -->Line_62 $$ if (String.class != keyType) [ CD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_101 $$ if (autowiredBeanNames != null) [ FD ]
Line_68 $$ Class<?> valueType = descriptor.getMapValueType()-->Line_80 $$ raiseNoSuchBeanDefinitionException(valueType, "map with value type " + valueType.getName(), descriptor)[ FD ]
Line_18 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, componentType, targetDesc)-->Line_106 $$ Map.Entry<String, Object> entry = matchingBeans.entrySet().iterator().next()[ FD ]
Line_97 $$ String primaryBeanName = determineAutowireCandidate(matchingBeans, descriptor)-->Line_102 $$ autowiredBeanNames.add(primaryBeanName)[ FD ]
Line_20 $$ if (descriptor.isRequired()) -->Line_21 $$ raiseNoSuchBeanDefinitionException(componentType, "array of " + componentType.getName(), descriptor)[ CD ]
Line_15 $$ Class<?> componentType = type.getComponentType()-->Line_18 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, componentType, targetDesc)[ FD ]
Line_34 $$ if (Collection.class.isAssignableFrom(type) && type.isInterface()) -->Line_43 $$ targetDesc.increaseNestingLevel()[ CD ]
Line_96 $$ if (matchingBeans.size() > 1) -->Line_97 $$ String primaryBeanName = determineAutowireCandidate(matchingBeans, descriptor)[ CD ]
Line_25 $$ if (autowiredBeanNames != null) -->Line_26 $$ autowiredBeanNames.addAll(matchingBeans.keySet())[ CD ]
Line_14 $$ if (type.isArray()) -->Line_15 $$ Class<?> componentType = type.getComponentType()[ CD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_97 $$ String primaryBeanName = determineAutowireCandidate(matchingBeans, descriptor)[ FD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_21 $$ raiseNoSuchBeanDefinitionException(componentType, "array of " + componentType.getName(), descriptor)[ FD ]
Line_90 $$ if (matchingBeans.isEmpty()) -->Line_91 $$ if (descriptor.isRequired()) [ CD ]
Line_14 $$ if (type.isArray()) -->Line_34 $$ if (Collection.class.isAssignableFrom(type) && type.isInterface()) [ CD ]
Line_18 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, componentType, targetDesc)-->Line_85 $$ autowiredBeanNames.addAll(matchingBeans.keySet())[ FD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_91 $$ if (descriptor.isRequired()) [ FD ]
Line_18 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, componentType, targetDesc)-->Line_19 $$ if (matchingBeans.isEmpty()) [ FD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_46 $$ if (descriptor.isRequired()) [ FD ]
Line_34 $$ if (Collection.class.isAssignableFrom(type) && type.isInterface()) -->Line_59 $$ return result[ CD ]
Line_78 $$ if (matchingBeans.isEmpty()) -->Line_82 $$ return null[ CD ]
Line_6 $$ if (value instanceof String) -->Line_7 $$ String strVal = resolveEmbeddedValue((String) value)[ CD ]
Line_35 $$ Class<?> elementType = descriptor.getCollectionType()-->Line_36 $$ if (elementType == null) [ FD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_3 $$ Class<?> type = descriptor.getDependencyType()[ FD ]
Line_18 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, componentType, targetDesc)-->Line_45 $$ if (matchingBeans.isEmpty()) [ FD ]
Line_3 $$ Class<?> type = descriptor.getDependencyType()-->Line_29 $$ Object result = converter.convertIfNecessary(matchingBeans.values(), type)[ FD ]
Line_34 $$ if (Collection.class.isAssignableFrom(type) && type.isInterface()) -->Line_35 $$ Class<?> elementType = descriptor.getCollectionType()[ CD ]
Line_60 $$ if (Map.class.isAssignableFrom(type) && type.isInterface()) -->Line_87 $$ return matchingBeans[ CD ]
Line_11 $$ TypeConverter converter = (typeConverter != null ? typeConverter : getTypeConverter())-->Line_29 $$ Object result = converter.convertIfNecessary(matchingBeans.values(), type)[ FD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_35 $$ Class<?> elementType = descriptor.getCollectionType()[ FD ]
Line_101 $$ if (autowiredBeanNames != null) -->Line_102 $$ autowiredBeanNames.add(primaryBeanName)[ CD ]
Line_5 $$ if (value != null) -->Line_12 $$ return (descriptor.getField() != null ? converter.convertIfNecessary(value, type, descriptor.getField()) : converter.convertIfNecessary(value, type, descriptor.getMethodParameter()))[ CD ]
Line_62 $$ if (String.class != keyType) -->Line_66 $$ return null[ CD ]
Line_60 $$ if (Map.class.isAssignableFrom(type) && type.isInterface()) -->Line_68 $$ Class<?> valueType = descriptor.getMapValueType()[ CD ]
Line_18 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, componentType, targetDesc)-->Line_26 $$ autowiredBeanNames.addAll(matchingBeans.keySet())[ FD ]
Line_60 $$ if (Map.class.isAssignableFrom(type) && type.isInterface()) -->Line_90 $$ if (matchingBeans.isEmpty()) [ CD ]
Line_69 $$ if (valueType == null) -->Line_73 $$ return null[ CD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_79 $$ if (descriptor.isRequired()) [ FD ]
Line_106 $$ Map.Entry<String, Object> entry = matchingBeans.entrySet().iterator().next()-->Line_108 $$ autowiredBeanNames.add(entry.getKey())[ FD ]
Line_5 $$ if (value != null) -->Line_6 $$ if (value instanceof String) [ CD ]
Line_18 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, componentType, targetDesc)-->Line_99 $$ throw new NoUniqueBeanDefinitionException(type, matchingBeans.keySet())[ FD ]
Line_3 $$ Class<?> type = descriptor.getDependencyType()-->Line_12 $$ return (descriptor.getField() != null ? converter.convertIfNecessary(value, type, descriptor.getField()) : converter.convertIfNecessary(value, type, descriptor.getMethodParameter()))[ FD ]
Line_60 $$ if (Map.class.isAssignableFrom(type) && type.isInterface()) -->Line_69 $$ if (valueType == null) [ CD ]
Line_19 $$ if (matchingBeans.isEmpty()) -->Line_20 $$ if (descriptor.isRequired()) [ CD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_77 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, valueType, targetDesc)[ FD ]
Line_60 $$ if (Map.class.isAssignableFrom(type) && type.isInterface()) -->Line_110 $$ return entry.getValue()[ CD ]
Line_16 $$ DependencyDescriptor targetDesc = new DependencyDescriptor(descriptor)-->Line_77 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, valueType, targetDesc)[ FD ]
Line_14 $$ if (type.isArray()) -->Line_25 $$ if (autowiredBeanNames != null) [ CD ]
Line_35 $$ Class<?> elementType = descriptor.getCollectionType()-->Line_47 $$ raiseNoSuchBeanDefinitionException(elementType, "collection of " + elementType.getName(), descriptor)[ FD ]
Line_35 $$ Class<?> elementType = descriptor.getCollectionType()-->Line_44 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, elementType, targetDesc)[ FD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_37 $$ if (descriptor.isRequired()) [ FD ]
Line_18 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, componentType, targetDesc)-->Line_96 $$ if (matchingBeans.size() > 1) [ FD ]
Line_96 $$ if (matchingBeans.size() > 1) -->Line_104 $$ return matchingBeans.get(primaryBeanName)[ CD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_61 $$ Class<?> keyType = descriptor.getMapKeyType()[ FD ]
Line_2 $$ public Object doResolveDependency(DependencyDescriptor descriptor, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) throws BeansException -->Line_25 $$ if (autowiredBeanNames != null) [ FD ]
Line_18 $$ Map<String, Object> matchingBeans = findAutowireCandidates(beanName, componentType, targetDesc)-->Line_29 $$ Object result = converter.convertIfNecessary(matchingBeans.values(), type)[ FD ]
