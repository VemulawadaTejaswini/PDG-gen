Line_2 $$ public static MultiSearchRequest parseRequest(MultiSearchRequest msr, BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex, IndicesQueriesRegistry indicesQueriesRegistry, ParseFieldMatcher parseFieldMatcher) throws Exception -->Line_7 $$ final QueryParseContext queryParseContext = new QueryParseContext(indicesQueriesRegistry)[ CD ]
Line_58 $$ from = nextMarker + 1-->Line_63 $$ final BytesReference slice = data.slice(from, nextMarker - from)[ FD ]
Line_2 $$ public static MultiSearchRequest parseRequest(MultiSearchRequest msr, BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex, IndicesQueriesRegistry indicesQueriesRegistry, ParseFieldMatcher parseFieldMatcher) throws Exception -->Line_21 $$ if (indicesOptions != null) [ FD ]
Line_33 $$ try (XContentParser parser = xContent.createParser(data.slice(from, nextMarker - from))) -->Line_34 $$ Map<String, Object> source = parser.map()[ FD ]
Line_77 $$ from = nextMarker + 1-->Line_9 $$ int nextMarker = findNextMarker(marker, from, data, length)[ FD ]
Line_2 $$ public static MultiSearchRequest parseRequest(MultiSearchRequest msr, BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex, IndicesQueriesRegistry indicesQueriesRegistry, ParseFieldMatcher parseFieldMatcher) throws Exception -->Line_30 $$ searchRequest.searchType(searchType)[ FD ]
Line_2 $$ public static MultiSearchRequest parseRequest(MultiSearchRequest msr, BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex, IndicesQueriesRegistry indicesQueriesRegistry, ParseFieldMatcher parseFieldMatcher) throws Exception -->Line_28 $$ searchRequest.routing(routing)[ FD ]
Line_42 $$ if ("type".equals(entry.getKey()) || "types".equals(entry.getKey())) -->Line_44 $$ if ("search_type".equals(entry.getKey()) || "searchType".equals(entry.getKey())) [ CD ]
Line_59 $$ nextMarker = findNextMarker(marker, from, data, length)-->Line_77 $$ from = nextMarker + 1[ FD ]
Line_3 $$ XContent xContent = XContentFactory.xContent(data)-->Line_33 $$ try (XContentParser parser = xContent.createParser(data.slice(from, nextMarker - from))) [ FD ]
Line_35 $$ for (Map.Entry<String, Object> entry : source.entrySet()) -->Line_42 $$ if ("type".equals(entry.getKey()) || "types".equals(entry.getKey())) [ FD ]
Line_2 $$ public static MultiSearchRequest parseRequest(MultiSearchRequest msr, BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex, IndicesQueriesRegistry indicesQueriesRegistry, ParseFieldMatcher parseFieldMatcher) throws Exception -->Line_33 $$ try (XContentParser parser = xContent.createParser(data.slice(from, nextMarker - from))) [ FD ]
Line_14 $$ from = nextMarker + 1-->Line_9 $$ int nextMarker = findNextMarker(marker, from, data, length)[ FD ]
Line_44 $$ if ("search_type".equals(entry.getKey()) || "searchType".equals(entry.getKey())) -->Line_45 $$ searchRequest.searchType(nodeStringValue(value, null))[ CD ]
Line_50 $$ if ("routing".equals(entry.getKey())) -->Line_51 $$ searchRequest.routing(nodeStringValue(value, null))[ CD ]
Line_48 $$ if ("preference".equals(entry.getKey())) -->Line_50 $$ if ("routing".equals(entry.getKey())) [ CD ]
Line_36 $$ Object value = entry.getValue()-->Line_47 $$ searchRequest.requestCache(nodeBooleanValue(value))[ FD ]
Line_37 $$ if ("index".equals(entry.getKey()) || "indices".equals(entry.getKey())) -->Line_41 $$ searchRequest.indices(nodeStringArrayValue(value))[ CD ]
Line_2 $$ public static MultiSearchRequest parseRequest(MultiSearchRequest msr, BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex, IndicesQueriesRegistry indicesQueriesRegistry, ParseFieldMatcher parseFieldMatcher) throws Exception -->Line_22 $$ searchRequest.indicesOptions(indicesOptions)[ FD ]
Line_77 $$ from = nextMarker + 1-->Line_59 $$ nextMarker = findNextMarker(marker, from, data, length)[ FD ]
Line_8 $$ while (true) -->Line_21 $$ if (indicesOptions != null) [ CD ]
Line_44 $$ if ("search_type".equals(entry.getKey()) || "searchType".equals(entry.getKey())) -->Line_46 $$ if ("request_cache".equals(entry.getKey()) || "requestCache".equals(entry.getKey())) [ CD ]
Line_17 $$ SearchRequest searchRequest = new SearchRequest()-->Line_47 $$ searchRequest.requestCache(nodeBooleanValue(value))[ FD ]
Line_59 $$ nextMarker = findNextMarker(marker, from, data, length)-->Line_58 $$ from = nextMarker + 1[ FD ]
Line_35 $$ for (Map.Entry<String, Object> entry : source.entrySet()) -->Line_48 $$ if ("preference".equals(entry.getKey())) [ FD ]
Line_2 $$ public static MultiSearchRequest parseRequest(MultiSearchRequest msr, BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex, IndicesQueriesRegistry indicesQueriesRegistry, ParseFieldMatcher parseFieldMatcher) throws Exception -->Line_8 $$ while (true) [ CD ]
Line_17 $$ SearchRequest searchRequest = new SearchRequest()-->Line_30 $$ searchRequest.searchType(searchType)[ FD ]
Line_31 $$ IndicesOptions defaultOptions = IndicesOptions.strictExpandOpenAndForbidClosed()-->Line_54 $$ defaultOptions = IndicesOptions.fromMap(source, defaultOptions)[ FD ]
Line_3 $$ XContent xContent = XContentFactory.xContent(data)-->Line_6 $$ byte marker = xContent.streamSeparator()[ FD ]
Line_6 $$ byte marker = xContent.streamSeparator()-->Line_9 $$ int nextMarker = findNextMarker(marker, from, data, length)[ FD ]
Line_34 $$ Map<String, Object> source = parser.map()-->Line_54 $$ defaultOptions = IndicesOptions.fromMap(source, defaultOptions)[ FD ]
Line_17 $$ SearchRequest searchRequest = new SearchRequest()-->Line_43 $$ searchRequest.types(nodeStringArrayValue(value))[ FD ]
Line_8 $$ while (true) -->Line_63 $$ final BytesReference slice = data.slice(from, nextMarker - from)[ CD ]
Line_59 $$ nextMarker = findNextMarker(marker, from, data, length)-->Line_14 $$ from = nextMarker + 1[ FD ]
Line_8 $$ while (true) -->Line_30 $$ searchRequest.searchType(searchType)[ CD ]
Line_8 $$ while (true) -->Line_77 $$ from = nextMarker + 1[ CD ]
Line_59 $$ nextMarker = findNextMarker(marker, from, data, length)-->Line_60 $$ if (nextMarker == -1) [ FD ]
Line_14 $$ from = nextMarker + 1-->Line_59 $$ nextMarker = findNextMarker(marker, from, data, length)[ FD ]
Line_63 $$ final BytesReference slice = data.slice(from, nextMarker - from)-->Line_65 $$ try (XContentParser parser = XContentFactory.xContent(slice).createParser(slice)) [ FD ]
Line_58 $$ from = nextMarker + 1-->Line_77 $$ from = nextMarker + 1[ FD ]
Line_2 $$ public static MultiSearchRequest parseRequest(MultiSearchRequest msr, BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex, IndicesQueriesRegistry indicesQueriesRegistry, ParseFieldMatcher parseFieldMatcher) throws Exception -->Line_4 $$ int from = 0[ CD ]
Line_2 $$ public static MultiSearchRequest parseRequest(MultiSearchRequest msr, BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex, IndicesQueriesRegistry indicesQueriesRegistry, ParseFieldMatcher parseFieldMatcher) throws Exception -->Line_59 $$ nextMarker = findNextMarker(marker, from, data, length)[ FD ]
Line_48 $$ if ("preference".equals(entry.getKey())) -->Line_49 $$ searchRequest.preference(nodeStringValue(value, null))[ CD ]
Line_9 $$ int nextMarker = findNextMarker(marker, from, data, length)-->Line_60 $$ if (nextMarker == -1) [ FD ]
Line_8 $$ while (true) -->Line_9 $$ int nextMarker = findNextMarker(marker, from, data, length)[ CD ]
Line_4 $$ int from = 0-->Line_9 $$ int nextMarker = findNextMarker(marker, from, data, length)[ FD ]
Line_4 $$ int from = 0-->Line_14 $$ from = nextMarker + 1[ FD ]
Line_8 $$ while (true) -->Line_13 $$ if (nextMarker == 0) [ CD ]
Line_36 $$ Object value = entry.getValue()-->Line_45 $$ searchRequest.searchType(nodeStringValue(value, null))[ FD ]
Line_8 $$ while (true) -->Line_58 $$ from = nextMarker + 1[ CD ]
Line_35 $$ for (Map.Entry<String, Object> entry : source.entrySet()) -->Line_36 $$ Object value = entry.getValue()[ FD ]
Line_33 $$ try (XContentParser parser = xContent.createParser(data.slice(from, nextMarker - from))) -->Line_66 $$ queryParseContext.reset(parser)[ FD ]
Line_7 $$ final QueryParseContext queryParseContext = new QueryParseContext(indicesQueriesRegistry)-->Line_68 $$ Template template = TemplateQueryParser.parse(parser, queryParseContext.parseFieldMatcher(), "params", "template")[ FD ]
Line_58 $$ from = nextMarker + 1-->Line_9 $$ int nextMarker = findNextMarker(marker, from, data, length)[ FD ]
Line_42 $$ if ("type".equals(entry.getKey()) || "types".equals(entry.getKey())) -->Line_43 $$ searchRequest.types(nodeStringArrayValue(value))[ CD ]
Line_2 $$ public static MultiSearchRequest parseRequest(MultiSearchRequest msr, BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex, IndicesQueriesRegistry indicesQueriesRegistry, ParseFieldMatcher parseFieldMatcher) throws Exception -->Line_38 $$ if (!allowExplicitIndex) [ FD ]
Line_2 $$ public static MultiSearchRequest parseRequest(MultiSearchRequest msr, BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex, IndicesQueriesRegistry indicesQueriesRegistry, ParseFieldMatcher parseFieldMatcher) throws Exception -->Line_5 $$ int length = data.length()[ FD ]
Line_33 $$ try (XContentParser parser = xContent.createParser(data.slice(from, nextMarker - from))) -->Line_68 $$ Template template = TemplateQueryParser.parse(parser, queryParseContext.parseFieldMatcher(), "params", "template")[ FD ]
Line_2 $$ public static MultiSearchRequest parseRequest(MultiSearchRequest msr, BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex, IndicesQueriesRegistry indicesQueriesRegistry, ParseFieldMatcher parseFieldMatcher) throws Exception -->Line_18 $$ if (indices != null) [ FD ]
Line_17 $$ SearchRequest searchRequest = new SearchRequest()-->Line_45 $$ searchRequest.searchType(nodeStringValue(value, null))[ FD ]
Line_14 $$ from = nextMarker + 1-->Line_33 $$ try (XContentParser parser = xContent.createParser(data.slice(from, nextMarker - from))) [ FD ]
Line_2 $$ public static MultiSearchRequest parseRequest(MultiSearchRequest msr, BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex, IndicesQueriesRegistry indicesQueriesRegistry, ParseFieldMatcher parseFieldMatcher) throws Exception -->Line_80 $$ return msr[ CD ]
Line_7 $$ final QueryParseContext queryParseContext = new QueryParseContext(indicesQueriesRegistry)-->Line_74 $$ searchRequest.source(SearchSourceBuilder.parseSearchSource(requestParser, queryParseContext))[ FD ]
Line_4 $$ int from = 0-->Line_33 $$ try (XContentParser parser = xContent.createParser(data.slice(from, nextMarker - from))) [ FD ]
Line_8 $$ while (true) -->Line_10 $$ if (nextMarker == -1) [ CD ]
Line_8 $$ while (true) -->Line_27 $$ if (routing != null) [ CD ]
Line_72 $$ try (XContentParser requestParser = XContentFactory.xContent(slice).createParser(slice)) -->Line_74 $$ searchRequest.source(SearchSourceBuilder.parseSearchSource(requestParser, queryParseContext))[ FD ]
Line_36 $$ Object value = entry.getValue()-->Line_51 $$ searchRequest.routing(nodeStringValue(value, null))[ FD ]
Line_46 $$ if ("request_cache".equals(entry.getKey()) || "requestCache".equals(entry.getKey())) -->Line_47 $$ searchRequest.requestCache(nodeBooleanValue(value))[ CD ]
Line_17 $$ SearchRequest searchRequest = new SearchRequest()-->Line_49 $$ searchRequest.preference(nodeStringValue(value, null))[ FD ]
Line_9 $$ int nextMarker = findNextMarker(marker, from, data, length)-->Line_58 $$ from = nextMarker + 1[ FD ]
Line_2 $$ public static MultiSearchRequest parseRequest(MultiSearchRequest msr, BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex, IndicesQueriesRegistry indicesQueriesRegistry, ParseFieldMatcher parseFieldMatcher) throws Exception -->Line_27 $$ if (routing != null) [ FD ]
Line_8 $$ while (true) -->Line_78 $$ msr.add(searchRequest)[ CD ]
Line_58 $$ from = nextMarker + 1-->Line_33 $$ try (XContentParser parser = xContent.createParser(data.slice(from, nextMarker - from))) [ FD ]
Line_77 $$ from = nextMarker + 1-->Line_33 $$ try (XContentParser parser = xContent.createParser(data.slice(from, nextMarker - from))) [ FD ]
Line_2 $$ public static MultiSearchRequest parseRequest(MultiSearchRequest msr, BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex, IndicesQueriesRegistry indicesQueriesRegistry, ParseFieldMatcher parseFieldMatcher) throws Exception -->Line_25 $$ searchRequest.types(types)[ FD ]
Line_4 $$ int from = 0-->Line_58 $$ from = nextMarker + 1[ FD ]
Line_35 $$ for (Map.Entry<String, Object> entry : source.entrySet()) -->Line_46 $$ if ("request_cache".equals(entry.getKey()) || "requestCache".equals(entry.getKey())) [ FD ]
Line_8 $$ while (true) -->Line_59 $$ nextMarker = findNextMarker(marker, from, data, length)[ CD ]
Line_8 $$ while (true) -->Line_24 $$ if (types != null && types.length > 0) [ CD ]
Line_2 $$ public static MultiSearchRequest parseRequest(MultiSearchRequest msr, BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex, IndicesQueriesRegistry indicesQueriesRegistry, ParseFieldMatcher parseFieldMatcher) throws Exception -->Line_78 $$ msr.add(searchRequest)[ FD ]
Line_37 $$ if ("index".equals(entry.getKey()) || "indices".equals(entry.getKey())) -->Line_42 $$ if ("type".equals(entry.getKey()) || "types".equals(entry.getKey())) [ CD ]
Line_17 $$ SearchRequest searchRequest = new SearchRequest()-->Line_19 $$ searchRequest.indices(indices)[ FD ]
Line_37 $$ if ("index".equals(entry.getKey()) || "indices".equals(entry.getKey())) -->Line_38 $$ if (!allowExplicitIndex) [ CD ]
Line_9 $$ int nextMarker = findNextMarker(marker, from, data, length)-->Line_59 $$ nextMarker = findNextMarker(marker, from, data, length)[ FD ]
Line_9 $$ int nextMarker = findNextMarker(marker, from, data, length)-->Line_14 $$ from = nextMarker + 1[ FD ]
Line_46 $$ if ("request_cache".equals(entry.getKey()) || "requestCache".equals(entry.getKey())) -->Line_48 $$ if ("preference".equals(entry.getKey())) [ CD ]
Line_59 $$ nextMarker = findNextMarker(marker, from, data, length)-->Line_13 $$ if (nextMarker == 0) [ FD ]
Line_18 $$ if (indices != null) -->Line_19 $$ searchRequest.indices(indices)[ CD ]
Line_5 $$ int length = data.length()-->Line_9 $$ int nextMarker = findNextMarker(marker, from, data, length)[ FD ]
Line_35 $$ for (Map.Entry<String, Object> entry : source.entrySet()) -->Line_37 $$ if ("index".equals(entry.getKey()) || "indices".equals(entry.getKey())) [ FD ]
Line_8 $$ while (true) -->Line_18 $$ if (indices != null) [ CD ]
Line_2 $$ public static MultiSearchRequest parseRequest(MultiSearchRequest msr, BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex, IndicesQueriesRegistry indicesQueriesRegistry, ParseFieldMatcher parseFieldMatcher) throws Exception -->Line_5 $$ int length = data.length()[ CD ]
Line_36 $$ Object value = entry.getValue()-->Line_43 $$ searchRequest.types(nodeStringArrayValue(value))[ FD ]
Line_8 $$ while (true) -->Line_32 $$ if (nextMarker - from > 0) [ CD ]
Line_35 $$ for (Map.Entry<String, Object> entry : source.entrySet()) -->Line_50 $$ if ("routing".equals(entry.getKey())) [ FD ]
Line_17 $$ SearchRequest searchRequest = new SearchRequest()-->Line_25 $$ searchRequest.types(types)[ FD ]
Line_21 $$ if (indicesOptions != null) -->Line_22 $$ searchRequest.indicesOptions(indicesOptions)[ CD ]
Line_17 $$ SearchRequest searchRequest = new SearchRequest()-->Line_22 $$ searchRequest.indicesOptions(indicesOptions)[ FD ]
Line_17 $$ SearchRequest searchRequest = new SearchRequest()-->Line_51 $$ searchRequest.routing(nodeStringValue(value, null))[ FD ]
Line_34 $$ Map<String, Object> source = parser.map()-->Line_35 $$ for (Map.Entry<String, Object> entry : source.entrySet()) [ FD ]
Line_58 $$ from = nextMarker + 1-->Line_59 $$ nextMarker = findNextMarker(marker, from, data, length)[ FD ]
Line_24 $$ if (types != null && types.length > 0) -->Line_25 $$ searchRequest.types(types)[ CD ]
Line_14 $$ from = nextMarker + 1-->Line_77 $$ from = nextMarker + 1[ FD ]
Line_54 $$ defaultOptions = IndicesOptions.fromMap(source, defaultOptions)-->Line_57 $$ searchRequest.indicesOptions(defaultOptions)[ FD ]
Line_59 $$ nextMarker = findNextMarker(marker, from, data, length)-->Line_10 $$ if (nextMarker == -1) [ FD ]
Line_7 $$ final QueryParseContext queryParseContext = new QueryParseContext(indicesQueriesRegistry)-->Line_66 $$ queryParseContext.reset(parser)[ FD ]
Line_2 $$ public static MultiSearchRequest parseRequest(MultiSearchRequest msr, BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex, IndicesQueriesRegistry indicesQueriesRegistry, ParseFieldMatcher parseFieldMatcher) throws Exception -->Line_3 $$ XContent xContent = XContentFactory.xContent(data)[ FD ]
Line_4 $$ int from = 0-->Line_63 $$ final BytesReference slice = data.slice(from, nextMarker - from)[ FD ]
Line_2 $$ public static MultiSearchRequest parseRequest(MultiSearchRequest msr, BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex, IndicesQueriesRegistry indicesQueriesRegistry, ParseFieldMatcher parseFieldMatcher) throws Exception -->Line_19 $$ searchRequest.indices(indices)[ FD ]
Line_4 $$ int from = 0-->Line_59 $$ nextMarker = findNextMarker(marker, from, data, length)[ FD ]
Line_9 $$ int nextMarker = findNextMarker(marker, from, data, length)-->Line_13 $$ if (nextMarker == 0) [ FD ]
Line_8 $$ while (true) -->Line_57 $$ searchRequest.indicesOptions(defaultOptions)[ CD ]
Line_2 $$ public static MultiSearchRequest parseRequest(MultiSearchRequest msr, BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex, IndicesQueriesRegistry indicesQueriesRegistry, ParseFieldMatcher parseFieldMatcher) throws Exception -->Line_67 $$ queryParseContext.parseFieldMatcher(parseFieldMatcher)[ FD ]
Line_77 $$ from = nextMarker + 1-->Line_63 $$ final BytesReference slice = data.slice(from, nextMarker - from)[ FD ]
Line_14 $$ from = nextMarker + 1-->Line_58 $$ from = nextMarker + 1[ FD ]
Line_2 $$ public static MultiSearchRequest parseRequest(MultiSearchRequest msr, BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex, IndicesQueriesRegistry indicesQueriesRegistry, ParseFieldMatcher parseFieldMatcher) throws Exception -->Line_3 $$ XContent xContent = XContentFactory.xContent(data)[ CD ]
Line_9 $$ int nextMarker = findNextMarker(marker, from, data, length)-->Line_77 $$ from = nextMarker + 1[ FD ]
Line_5 $$ int length = data.length()-->Line_59 $$ nextMarker = findNextMarker(marker, from, data, length)[ FD ]
Line_2 $$ public static MultiSearchRequest parseRequest(MultiSearchRequest msr, BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex, IndicesQueriesRegistry indicesQueriesRegistry, ParseFieldMatcher parseFieldMatcher) throws Exception -->Line_9 $$ int nextMarker = findNextMarker(marker, from, data, length)[ FD ]
Line_7 $$ final QueryParseContext queryParseContext = new QueryParseContext(indicesQueriesRegistry)-->Line_73 $$ queryParseContext.reset(requestParser)[ FD ]
Line_8 $$ while (true) -->Line_17 $$ SearchRequest searchRequest = new SearchRequest()[ CD ]
Line_17 $$ SearchRequest searchRequest = new SearchRequest()-->Line_74 $$ searchRequest.source(SearchSourceBuilder.parseSearchSource(requestParser, queryParseContext))[ FD ]
Line_35 $$ for (Map.Entry<String, Object> entry : source.entrySet()) -->Line_44 $$ if ("search_type".equals(entry.getKey()) || "searchType".equals(entry.getKey())) [ FD ]
Line_8 $$ while (true) -->Line_64 $$ if (isTemplateRequest) [ CD ]
Line_31 $$ IndicesOptions defaultOptions = IndicesOptions.strictExpandOpenAndForbidClosed()-->Line_57 $$ searchRequest.indicesOptions(defaultOptions)[ FD ]
Line_7 $$ final QueryParseContext queryParseContext = new QueryParseContext(indicesQueriesRegistry)-->Line_67 $$ queryParseContext.parseFieldMatcher(parseFieldMatcher)[ FD ]
Line_2 $$ public static MultiSearchRequest parseRequest(MultiSearchRequest msr, BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex, IndicesQueriesRegistry indicesQueriesRegistry, ParseFieldMatcher parseFieldMatcher) throws Exception -->Line_6 $$ byte marker = xContent.streamSeparator()[ CD ]
Line_36 $$ Object value = entry.getValue()-->Line_41 $$ searchRequest.indices(nodeStringArrayValue(value))[ FD ]
Line_72 $$ try (XContentParser requestParser = XContentFactory.xContent(slice).createParser(slice)) -->Line_73 $$ queryParseContext.reset(requestParser)[ FD ]
Line_4 $$ int from = 0-->Line_77 $$ from = nextMarker + 1[ FD ]
Line_14 $$ from = nextMarker + 1-->Line_63 $$ final BytesReference slice = data.slice(from, nextMarker - from)[ FD ]
Line_17 $$ SearchRequest searchRequest = new SearchRequest()-->Line_41 $$ searchRequest.indices(nodeStringArrayValue(value))[ FD ]
Line_9 $$ int nextMarker = findNextMarker(marker, from, data, length)-->Line_10 $$ if (nextMarker == -1) [ FD ]
Line_17 $$ SearchRequest searchRequest = new SearchRequest()-->Line_69 $$ searchRequest.template(template)[ FD ]
Line_17 $$ SearchRequest searchRequest = new SearchRequest()-->Line_57 $$ searchRequest.indicesOptions(defaultOptions)[ FD ]
Line_68 $$ Template template = TemplateQueryParser.parse(parser, queryParseContext.parseFieldMatcher(), "params", "template")-->Line_69 $$ searchRequest.template(template)[ FD ]
Line_36 $$ Object value = entry.getValue()-->Line_49 $$ searchRequest.preference(nodeStringValue(value, null))[ FD ]
Line_13 $$ if (nextMarker == 0) -->Line_14 $$ from = nextMarker + 1[ CD ]
Line_17 $$ SearchRequest searchRequest = new SearchRequest()-->Line_28 $$ searchRequest.routing(routing)[ FD ]
Line_6 $$ byte marker = xContent.streamSeparator()-->Line_59 $$ nextMarker = findNextMarker(marker, from, data, length)[ FD ]
Line_8 $$ while (true) -->Line_31 $$ IndicesOptions defaultOptions = IndicesOptions.strictExpandOpenAndForbidClosed()[ CD ]
Line_63 $$ final BytesReference slice = data.slice(from, nextMarker - from)-->Line_72 $$ try (XContentParser requestParser = XContentFactory.xContent(slice).createParser(slice)) [ FD ]
Line_8 $$ while (true) -->Line_60 $$ if (nextMarker == -1) [ CD ]
Line_27 $$ if (routing != null) -->Line_28 $$ searchRequest.routing(routing)[ CD ]
Line_17 $$ SearchRequest searchRequest = new SearchRequest()-->Line_78 $$ msr.add(searchRequest)[ FD ]
Line_2 $$ public static MultiSearchRequest parseRequest(MultiSearchRequest msr, BytesReference data, boolean isTemplateRequest, @Nullable String[] indices, @Nullable String[] types, @Nullable String searchType, @Nullable String routing, IndicesOptions indicesOptions, boolean allowExplicitIndex, IndicesQueriesRegistry indicesQueriesRegistry, ParseFieldMatcher parseFieldMatcher) throws Exception -->Line_63 $$ final BytesReference slice = data.slice(from, nextMarker - from)[ FD ]
