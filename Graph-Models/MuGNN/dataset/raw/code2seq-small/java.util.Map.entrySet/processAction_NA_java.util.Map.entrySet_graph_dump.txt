Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_43 $$ SessionMessages.add(actionRequest, PortalUtil.getPortletId(actionRequest) + SessionMessages.KEY_SUFFIX_UPDATED_CONFIGURATION)[ FD ]
Line_13 $$ Settings settings = getSettings(actionRequest)-->Line_14 $$ ModifiableSettings modifiableSettings = settings.getModifiableSettings()[ FD ]
Line_8 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_9 $$ Layout layout = PortletConfigurationLayoutUtil.getLayout(themeDisplay)[ FD ]
Line_23 $$ Map<String, String[]> portletPreferencesMap = (Map<String, String[]>) actionRequest.getAttribute(WebKeys.PORTLET_PREFERENCES_MAP)-->Line_25 $$ for (Map.Entry<String, String[]> entry : portletPreferencesMap.entrySet()) [ FD ]
Line_8 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_34 $$ postProcess(themeDisplay.getCompanyId(), actionRequest, settings)[ FD ]
Line_29 $$ if (!Validator.equals(values, oldValues)) -->Line_30 $$ modifiableSettings.setValues(name, values)[ CD ]
Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_10 $$ String portletResource = ParamUtil.getString(actionRequest, "portletResource")[ CD ]
Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_23 $$ Map<String, String[]> portletPreferencesMap = (Map<String, String[]>) actionRequest.getAttribute(WebKeys.PORTLET_PREFERENCES_MAP)[ FD ]
Line_35 $$ if (SessionErrors.isEmpty(actionRequest)) -->Line_42 $$ SessionMessages.add(actionRequest, PortalUtil.getPortletId(actionRequest) + SessionMessages.KEY_SUFFIX_REFRESH_PORTLET, portletResource)[ CD ]
Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_46 $$ actionResponse.sendRedirect(redirect)[ FD ]
Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_14 $$ ModifiableSettings modifiableSettings = settings.getModifiableSettings()[ CD ]
Line_35 $$ if (SessionErrors.isEmpty(actionRequest)) -->Line_43 $$ SessionMessages.add(actionRequest, PortalUtil.getPortletId(actionRequest) + SessionMessages.KEY_SUFFIX_UPDATED_CONFIGURATION)[ CD ]
Line_13 $$ Settings settings = getSettings(actionRequest)-->Line_34 $$ postProcess(themeDisplay.getCompanyId(), actionRequest, settings)[ FD ]
Line_19 $$ if (!StringUtil.equalsIgnoreBreakLine(value, oldValue)) -->Line_20 $$ modifiableSettings.setValue(name, value)[ CD ]
Line_4 $$ String cmd = ParamUtil.getString(actionRequest, Constants.CMD)-->Line_5 $$ if (!cmd.equals(Constants.UPDATE)) [ FD ]
Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_39 $$ SessionErrors.add(actionRequest, ValidatorException.class.getName(), ve)[ FD ]
Line_35 $$ if (SessionErrors.isEmpty(actionRequest)) -->Line_44 $$ String redirect = PortalUtil.escapeRedirect(ParamUtil.getString(actionRequest, "redirect"))[ CD ]
Line_44 $$ String redirect = PortalUtil.escapeRedirect(ParamUtil.getString(actionRequest, "redirect"))-->Line_45 $$ if (Validator.isNotNull(redirect)) [ FD ]
Line_14 $$ ModifiableSettings modifiableSettings = settings.getModifiableSettings()-->Line_20 $$ modifiableSettings.setValue(name, value)[ FD ]
Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_9 $$ Layout layout = PortletConfigurationLayoutUtil.getLayout(themeDisplay)[ CD ]
Line_44 $$ String redirect = PortalUtil.escapeRedirect(ParamUtil.getString(actionRequest, "redirect"))-->Line_46 $$ actionResponse.sendRedirect(redirect)[ FD ]
Line_15 $$ for (Map.Entry<String, String> entry : properties.entrySet()) -->Line_16 $$ String name = entry.getKey()[ FD ]
Line_15 $$ for (Map.Entry<String, String> entry : properties.entrySet()) -->Line_27 $$ String[] values = entry.getValue()[ FD ]
Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_34 $$ postProcess(themeDisplay.getCompanyId(), actionRequest, settings)[ FD ]
Line_15 $$ for (Map.Entry<String, String> entry : properties.entrySet()) -->Line_17 $$ String value = entry.getValue()[ FD ]
Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_24 $$ if (portletPreferencesMap != null) [ CD ]
Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_4 $$ String cmd = ParamUtil.getString(actionRequest, Constants.CMD)[ FD ]
Line_27 $$ String[] values = entry.getValue()-->Line_30 $$ modifiableSettings.setValues(name, values)[ FD ]
Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_35 $$ if (SessionErrors.isEmpty(actionRequest)) [ CD ]
Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_4 $$ String cmd = ParamUtil.getString(actionRequest, Constants.CMD)[ CD ]
Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_10 $$ String portletResource = ParamUtil.getString(actionRequest, "portletResource")[ FD ]
Line_9 $$ Layout layout = PortletConfigurationLayoutUtil.getLayout(themeDisplay)-->Line_11 $$ PortletPermissionUtil.check(themeDisplay.getPermissionChecker(), themeDisplay.getScopeGroupId(), layout, portletResource, ActionKeys.CONFIGURATION)[ FD ]
Line_16 $$ String name = entry.getKey()-->Line_30 $$ modifiableSettings.setValues(name, values)[ FD ]
Line_10 $$ String portletResource = ParamUtil.getString(actionRequest, "portletResource")-->Line_42 $$ SessionMessages.add(actionRequest, PortalUtil.getPortletId(actionRequest) + SessionMessages.KEY_SUFFIX_REFRESH_PORTLET, portletResource)[ FD ]
Line_5 $$ if (!cmd.equals(Constants.UPDATE)) -->Line_6 $$ return[ CD ]
Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_12 $$ UnicodeProperties properties = PropertiesParamUtil.getProperties(actionRequest, _parameterNamePrefix)[ FD ]
Line_28 $$ String[] oldValues = settings.getValues(name, null)-->Line_29 $$ if (!Validator.equals(values, oldValues)) [ FD ]
Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_3 $$ updateMultiValuedKeys(actionRequest)[ FD ]
Line_17 $$ String value = entry.getValue()-->Line_19 $$ if (!StringUtil.equalsIgnoreBreakLine(value, oldValue)) [ FD ]
Line_16 $$ String name = entry.getKey()-->Line_20 $$ modifiableSettings.setValue(name, value)[ FD ]
Line_14 $$ ModifiableSettings modifiableSettings = settings.getModifiableSettings()-->Line_30 $$ modifiableSettings.setValues(name, values)[ FD ]
Line_35 $$ if (SessionErrors.isEmpty(actionRequest)) -->Line_45 $$ if (Validator.isNotNull(redirect)) [ CD ]
Line_45 $$ if (Validator.isNotNull(redirect)) -->Line_46 $$ actionResponse.sendRedirect(redirect)[ CD ]
Line_10 $$ String portletResource = ParamUtil.getString(actionRequest, "portletResource")-->Line_11 $$ PortletPermissionUtil.check(themeDisplay.getPermissionChecker(), themeDisplay.getScopeGroupId(), layout, portletResource, ActionKeys.CONFIGURATION)[ FD ]
Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_5 $$ if (!cmd.equals(Constants.UPDATE)) [ CD ]
Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_8 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)[ CD ]
Line_17 $$ String value = entry.getValue()-->Line_20 $$ modifiableSettings.setValue(name, value)[ FD ]
Line_16 $$ String name = entry.getKey()-->Line_28 $$ String[] oldValues = settings.getValues(name, null)[ FD ]
Line_14 $$ ModifiableSettings modifiableSettings = settings.getModifiableSettings()-->Line_37 $$ modifiableSettings.store()[ FD ]
Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_3 $$ updateMultiValuedKeys(actionRequest)[ CD ]
Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_35 $$ if (SessionErrors.isEmpty(actionRequest)) [ FD ]
Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_23 $$ Map<String, String[]> portletPreferencesMap = (Map<String, String[]>) actionRequest.getAttribute(WebKeys.PORTLET_PREFERENCES_MAP)[ CD ]
Line_16 $$ String name = entry.getKey()-->Line_18 $$ String oldValue = settings.getValue(name, null)[ FD ]
Line_18 $$ String oldValue = settings.getValue(name, null)-->Line_19 $$ if (!StringUtil.equalsIgnoreBreakLine(value, oldValue)) [ FD ]
Line_15 $$ for (Map.Entry<String, String> entry : properties.entrySet()) -->Line_26 $$ String name = entry.getKey()[ FD ]
Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_42 $$ SessionMessages.add(actionRequest, PortalUtil.getPortletId(actionRequest) + SessionMessages.KEY_SUFFIX_REFRESH_PORTLET, portletResource)[ FD ]
Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_34 $$ postProcess(themeDisplay.getCompanyId(), actionRequest, settings)[ CD ]
Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_13 $$ Settings settings = getSettings(actionRequest)[ FD ]
Line_8 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_11 $$ PortletPermissionUtil.check(themeDisplay.getPermissionChecker(), themeDisplay.getScopeGroupId(), layout, portletResource, ActionKeys.CONFIGURATION)[ FD ]
Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_44 $$ String redirect = PortalUtil.escapeRedirect(ParamUtil.getString(actionRequest, "redirect"))[ FD ]
Line_27 $$ String[] values = entry.getValue()-->Line_29 $$ if (!Validator.equals(values, oldValues)) [ FD ]
Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_12 $$ UnicodeProperties properties = PropertiesParamUtil.getProperties(actionRequest, _parameterNamePrefix)[ CD ]
Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_8 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)[ FD ]
Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_11 $$ PortletPermissionUtil.check(themeDisplay.getPermissionChecker(), themeDisplay.getScopeGroupId(), layout, portletResource, ActionKeys.CONFIGURATION)[ CD ]
Line_23 $$ Map<String, String[]> portletPreferencesMap = (Map<String, String[]>) actionRequest.getAttribute(WebKeys.PORTLET_PREFERENCES_MAP)-->Line_24 $$ if (portletPreferencesMap != null) [ FD ]
Line_13 $$ Settings settings = getSettings(actionRequest)-->Line_28 $$ String[] oldValues = settings.getValues(name, null)[ FD ]
Line_13 $$ Settings settings = getSettings(actionRequest)-->Line_18 $$ String oldValue = settings.getValue(name, null)[ FD ]
Line_12 $$ UnicodeProperties properties = PropertiesParamUtil.getProperties(actionRequest, _parameterNamePrefix)-->Line_15 $$ for (Map.Entry<String, String> entry : properties.entrySet()) [ FD ]
Line_2 $$ public void processAction(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_13 $$ Settings settings = getSettings(actionRequest)[ CD ]
