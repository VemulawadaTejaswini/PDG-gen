Line_4 $$ ZipOutputStream zos = null-->Line_7 $$ addStructure(pluginName, zos)[ FD ]
Line_4 $$ ZipOutputStream zos = null-->Line_8 $$ addStructure(pluginName + "/" + MIDDLE_LIB_DIR, zos)[ FD ]
Line_4 $$ ZipOutputStream zos = null-->Line_13 $$ ZipUtil.addFileToZip(zos, jpsPluginJar, getZipPath(pluginName, entry.getValue()), null, null)[ FD ]
Line_4 $$ ZipOutputStream zos = null-->Line_10 $$ ZipUtil.addFileToZip(zos, jarFile, getZipPath(pluginName, entryName), new HashSet<String>(), createFilter(progressIndicator, FileTypeManager.getInstance()))[ FD ]
Line_2 $$ private static void processLibrariesAndJpsPlugins(final File jarFile, final File zipFile, final String pluginName, final Set<Library> libs, Map<Module, String> jpsModules, final ProgressIndicator progressIndicator) throws IOException -->Line_25 $$ makeAndAddLibraryJar(virtualFile, zipFile, pluginName, zos, usedJarNames, progressIndicator, library.getName())[ FD ]
Line_18 $$ for (Library library : libs) -->Line_25 $$ makeAndAddLibraryJar(virtualFile, zipFile, pluginName, zos, usedJarNames, progressIndicator, library.getName())[ FD ]
Line_6 $$ zos = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFile)))-->Line_31 $$ if (zos != null)[ FD ]
Line_6 $$ zos = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFile)))-->Line_8 $$ addStructure(pluginName + "/" + MIDDLE_LIB_DIR, zos)[ FD ]
Line_31 $$ if (zos != null)-->Line_32 $$ zos.close()[ CD ]
Line_6 $$ zos = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFile)))-->Line_32 $$ zos.close()[ FD ]
Line_20 $$ for (VirtualFile virtualFile : files) -->Line_22 $$ if (virtualFile.getFileSystem() instanceof JarFileSystem) [ FD ]
Line_18 $$ for (Library library : libs) -->Line_19 $$ final VirtualFile[] files = library.getFiles(OrderRootType.CLASSES)[ FD ]
Line_4 $$ ZipOutputStream zos = null-->Line_6 $$ zos = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFile)))[ FD ]
Line_2 $$ private static void processLibrariesAndJpsPlugins(final File jarFile, final File zipFile, final String pluginName, final Set<Library> libs, Map<Module, String> jpsModules, final ProgressIndicator progressIndicator) throws IOException -->Line_7 $$ addStructure(pluginName, zos)[ FD ]
Line_15 $$ Set<String> usedJarNames = new HashSet<String>()-->Line_16 $$ usedJarNames.add(entryName)[ FD ]
Line_11 $$ for (Map.Entry<Module, String> entry : jpsModules.entrySet()) -->Line_13 $$ ZipUtil.addFileToZip(zos, jpsPluginJar, getZipPath(pluginName, entry.getValue()), null, null)[ FD ]
Line_2 $$ private static void processLibrariesAndJpsPlugins(final File jarFile, final File zipFile, final String pluginName, final Set<Library> libs, Map<Module, String> jpsModules, final ProgressIndicator progressIndicator) throws IOException -->Line_3 $$ if (FileUtil.ensureCanCreateFile(zipFile)) [ FD ]
Line_2 $$ private static void processLibrariesAndJpsPlugins(final File jarFile, final File zipFile, final String pluginName, final Set<Library> libs, Map<Module, String> jpsModules, final ProgressIndicator progressIndicator) throws IOException -->Line_3 $$ if (FileUtil.ensureCanCreateFile(zipFile)) [ CD ]
Line_9 $$ final String entryName = pluginName + JAR_EXTENSION-->Line_16 $$ usedJarNames.add(entryName)[ FD ]
Line_4 $$ ZipOutputStream zos = null-->Line_32 $$ zos.close()[ FD ]
Line_15 $$ Set<String> usedJarNames = new HashSet<String>()-->Line_25 $$ makeAndAddLibraryJar(virtualFile, zipFile, pluginName, zos, usedJarNames, progressIndicator, library.getName())[ FD ]
Line_12 $$ File jpsPluginJar = jarModulesOutput(Collections.singleton(entry.getKey()), null, null)-->Line_13 $$ ZipUtil.addFileToZip(zos, jpsPluginJar, getZipPath(pluginName, entry.getValue()), null, null)[ FD ]
Line_17 $$ Set<VirtualFile> jarredVirtualFiles = new HashSet<VirtualFile>()-->Line_21 $$ if (jarredVirtualFiles.add(virtualFile)) [ FD ]
Line_2 $$ private static void processLibrariesAndJpsPlugins(final File jarFile, final File zipFile, final String pluginName, final Set<Library> libs, Map<Module, String> jpsModules, final ProgressIndicator progressIndicator) throws IOException -->Line_13 $$ ZipUtil.addFileToZip(zos, jpsPluginJar, getZipPath(pluginName, entry.getValue()), null, null)[ FD ]
Line_2 $$ private static void processLibrariesAndJpsPlugins(final File jarFile, final File zipFile, final String pluginName, final Set<Library> libs, Map<Module, String> jpsModules, final ProgressIndicator progressIndicator) throws IOException -->Line_11 $$ for (Map.Entry<Module, String> entry : jpsModules.entrySet()) [ FD ]
Line_22 $$ if (virtualFile.getFileSystem() instanceof JarFileSystem) -->Line_25 $$ makeAndAddLibraryJar(virtualFile, zipFile, pluginName, zos, usedJarNames, progressIndicator, library.getName())[ CD ]
Line_21 $$ if (jarredVirtualFiles.add(virtualFile)) -->Line_22 $$ if (virtualFile.getFileSystem() instanceof JarFileSystem) [ CD ]
Line_22 $$ if (virtualFile.getFileSystem() instanceof JarFileSystem) -->Line_23 $$ addLibraryJar(virtualFile, zipFile, pluginName, zos, usedJarNames, progressIndicator)[ CD ]
Line_6 $$ zos = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFile)))-->Line_23 $$ addLibraryJar(virtualFile, zipFile, pluginName, zos, usedJarNames, progressIndicator)[ FD ]
Line_20 $$ for (VirtualFile virtualFile : files) -->Line_25 $$ makeAndAddLibraryJar(virtualFile, zipFile, pluginName, zos, usedJarNames, progressIndicator, library.getName())[ FD ]
Line_6 $$ zos = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFile)))-->Line_7 $$ addStructure(pluginName, zos)[ FD ]
Line_6 $$ zos = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFile)))-->Line_13 $$ ZipUtil.addFileToZip(zos, jpsPluginJar, getZipPath(pluginName, entry.getValue()), null, null)[ FD ]
Line_11 $$ for (Map.Entry<Module, String> entry : jpsModules.entrySet()) -->Line_12 $$ File jpsPluginJar = jarModulesOutput(Collections.singleton(entry.getKey()), null, null)[ FD ]
Line_20 $$ for (VirtualFile virtualFile : files) -->Line_21 $$ if (jarredVirtualFiles.add(virtualFile)) [ FD ]
Line_9 $$ final String entryName = pluginName + JAR_EXTENSION-->Line_10 $$ ZipUtil.addFileToZip(zos, jarFile, getZipPath(pluginName, entryName), new HashSet<String>(), createFilter(progressIndicator, FileTypeManager.getInstance()))[ FD ]
Line_3 $$ if (FileUtil.ensureCanCreateFile(zipFile)) -->Line_4 $$ ZipOutputStream zos = null[ CD ]
Line_4 $$ ZipOutputStream zos = null-->Line_31 $$ if (zos != null)[ FD ]
Line_20 $$ for (VirtualFile virtualFile : files) -->Line_23 $$ addLibraryJar(virtualFile, zipFile, pluginName, zos, usedJarNames, progressIndicator)[ FD ]
Line_2 $$ private static void processLibrariesAndJpsPlugins(final File jarFile, final File zipFile, final String pluginName, final Set<Library> libs, Map<Module, String> jpsModules, final ProgressIndicator progressIndicator) throws IOException -->Line_23 $$ addLibraryJar(virtualFile, zipFile, pluginName, zos, usedJarNames, progressIndicator)[ FD ]
Line_2 $$ private static void processLibrariesAndJpsPlugins(final File jarFile, final File zipFile, final String pluginName, final Set<Library> libs, Map<Module, String> jpsModules, final ProgressIndicator progressIndicator) throws IOException -->Line_10 $$ ZipUtil.addFileToZip(zos, jarFile, getZipPath(pluginName, entryName), new HashSet<String>(), createFilter(progressIndicator, FileTypeManager.getInstance()))[ FD ]
Line_4 $$ ZipOutputStream zos = null-->Line_25 $$ makeAndAddLibraryJar(virtualFile, zipFile, pluginName, zos, usedJarNames, progressIndicator, library.getName())[ FD ]
Line_6 $$ zos = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFile)))-->Line_10 $$ ZipUtil.addFileToZip(zos, jarFile, getZipPath(pluginName, entryName), new HashSet<String>(), createFilter(progressIndicator, FileTypeManager.getInstance()))[ FD ]
Line_15 $$ Set<String> usedJarNames = new HashSet<String>()-->Line_23 $$ addLibraryJar(virtualFile, zipFile, pluginName, zos, usedJarNames, progressIndicator)[ FD ]
Line_6 $$ zos = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFile)))-->Line_25 $$ makeAndAddLibraryJar(virtualFile, zipFile, pluginName, zos, usedJarNames, progressIndicator, library.getName())[ FD ]
Line_4 $$ ZipOutputStream zos = null-->Line_23 $$ addLibraryJar(virtualFile, zipFile, pluginName, zos, usedJarNames, progressIndicator)[ FD ]
