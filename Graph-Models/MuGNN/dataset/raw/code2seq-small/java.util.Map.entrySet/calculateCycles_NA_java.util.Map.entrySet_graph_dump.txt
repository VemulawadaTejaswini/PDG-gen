Line_2 $$ private Set<LinkedHashSet<ThreadInfo>> calculateCycles(Map<Long, ThreadInfo> threadInfoMap) -->Line_6 $$ for (ThreadInfo t = entry.getValue(); !cycle.contains(t); t = threadInfoMap.get(Long.valueOf(t.getLockOwnerId()))) cycle.add(t)[ FD ]
Line_7 $$ if (!cycles.contains(cycle))-->Line_8 $$ cycles.add(cycle)[ CD ]
Line_5 $$ LinkedHashSet<ThreadInfo> cycle = new LinkedHashSet()-->Line_6 $$ for (ThreadInfo t = entry.getValue(); !cycle.contains(t); t = threadInfoMap.get(Long.valueOf(t.getLockOwnerId()))) cycle.add(t)[ FD ]
Line_5 $$ LinkedHashSet<ThreadInfo> cycle = new LinkedHashSet()-->Line_8 $$ cycles.add(cycle)[ FD ]
Line_3 $$ Set<LinkedHashSet<ThreadInfo>> cycles = new HashSet()-->Line_7 $$ if (!cycles.contains(cycle))[ FD ]
Line_2 $$ private Set<LinkedHashSet<ThreadInfo>> calculateCycles(Map<Long, ThreadInfo> threadInfoMap) -->Line_10 $$ return cycles[ CD ]
Line_4 $$ for (Map.Entry<Long, ThreadInfo> entry : threadInfoMap.entrySet()) -->Line_6 $$ for (ThreadInfo t = entry.getValue(); !cycle.contains(t); t = threadInfoMap.get(Long.valueOf(t.getLockOwnerId()))) cycle.add(t)[ FD ]
Line_5 $$ LinkedHashSet<ThreadInfo> cycle = new LinkedHashSet()-->Line_6 $$ cycle.add(t)[ FD ]
Line_3 $$ Set<LinkedHashSet<ThreadInfo>> cycles = new HashSet()-->Line_8 $$ cycles.add(cycle)[ FD ]
Line_2 $$ private Set<LinkedHashSet<ThreadInfo>> calculateCycles(Map<Long, ThreadInfo> threadInfoMap) -->Line_3 $$ Set<LinkedHashSet<ThreadInfo>> cycles = new HashSet()[ CD ]
Line_2 $$ private Set<LinkedHashSet<ThreadInfo>> calculateCycles(Map<Long, ThreadInfo> threadInfoMap) -->Line_4 $$ for (Map.Entry<Long, ThreadInfo> entry : threadInfoMap.entrySet()) [ FD ]
Line_5 $$ LinkedHashSet<ThreadInfo> cycle = new LinkedHashSet()-->Line_7 $$ if (!cycles.contains(cycle))[ FD ]
