Line_4 $$ for (Map.Entry<Key, FileSystem> entry : map.entrySet()) -->Line_5 $$ final Key key = entry.getKey()[ FD ]
Line_4 $$ for (Map.Entry<Key, FileSystem> entry : map.entrySet()) -->Line_6 $$ final FileSystem fs = entry.getValue()[ FD ]
Line_11 $$ List<IOException> exceptions = new ArrayList<IOException>()-->Line_20 $$ throw MultipleIOException.createIOException(exceptions)[ FD ]
Line_2 $$ synchronized void closeAll(UserGroupInformation ugi) throws IOException -->Line_11 $$ List<IOException> exceptions = new ArrayList<IOException>()[ CD ]
Line_3 $$ List<FileSystem> targetFSList = new ArrayList<FileSystem>()-->Line_8 $$ targetFSList.add(fs)[ FD ]
Line_6 $$ final FileSystem fs = entry.getValue()-->Line_14 $$ fs.close()[ FD ]
Line_11 $$ List<IOException> exceptions = new ArrayList<IOException>()-->Line_19 $$ if (!exceptions.isEmpty()) [ FD ]
Line_2 $$ synchronized void closeAll(UserGroupInformation ugi) throws IOException -->Line_3 $$ List<FileSystem> targetFSList = new ArrayList<FileSystem>()[ CD ]
Line_2 $$ synchronized void closeAll(UserGroupInformation ugi) throws IOException -->Line_7 $$ if (ugi.equals(key.ugi) && fs != null) [ FD ]
Line_7 $$ if (ugi.equals(key.ugi) && fs != null) -->Line_8 $$ targetFSList.add(fs)[ CD ]
Line_6 $$ final FileSystem fs = entry.getValue()-->Line_8 $$ targetFSList.add(fs)[ FD ]
Line_2 $$ synchronized void closeAll(UserGroupInformation ugi) throws IOException -->Line_19 $$ if (!exceptions.isEmpty()) [ CD ]
Line_11 $$ List<IOException> exceptions = new ArrayList<IOException>()-->Line_16 $$ exceptions.add(ioe)[ FD ]
