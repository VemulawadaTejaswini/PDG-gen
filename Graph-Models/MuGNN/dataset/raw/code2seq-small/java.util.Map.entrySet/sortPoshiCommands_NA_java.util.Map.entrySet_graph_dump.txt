Line_2 $$ protected String sortPoshiCommands(String content) -->Line_42 $$ return StringUtil.replaceFirst(content, commandBlock, newCommandBlock)[ CD ]
Line_2 $$ protected String sortPoshiCommands(String content) -->Line_38 $$ int y = content.lastIndexOf("</command>")[ CD ]
Line_19 $$ StringBundler sb = new StringBundler()-->Line_34 $$ sb.append(entry.getValue())[ FD ]
Line_4 $$ Map<String, String> commandBlocksMap = new TreeMap(String.CASE_INSENSITIVE_ORDER)-->Line_32 $$ for (Map.Entry<String, String> entry : commandBlocksMap.entrySet()) [ FD ]
Line_41 $$ String newCommandBlock = sb.toString()-->Line_42 $$ return StringUtil.replaceFirst(content, commandBlock, newCommandBlock)[ FD ]
Line_20 $$ matcher = _poshiSetUpPattern.matcher(content)-->Line_22 $$ String setUpBlock = matcher.group()[ FD ]
Line_28 $$ String tearDownBlock = matcher.group()-->Line_30 $$ sb.append(tearDownBlock)[ FD ]
Line_22 $$ String setUpBlock = matcher.group()-->Line_23 $$ content = content.replace(setUpBlock, "")[ FD ]
Line_2 $$ protected String sortPoshiCommands(String content) -->Line_39 $$ String commandBlock = content.substring(x, y)[ FD ]
Line_2 $$ protected String sortPoshiCommands(String content) -->Line_41 $$ String newCommandBlock = sb.toString()[ CD ]
Line_11 $$ if (!hasUnsortedCommands && (commandName.compareToIgnoreCase(previousName) < 0)) -->Line_12 $$ hasUnsortedCommands = true[ CD ]
Line_3 $$ Matcher matcher = _poshiCommandsPattern.matcher(content)-->Line_28 $$ String tearDownBlock = matcher.group()[ FD ]
Line_3 $$ Matcher matcher = _poshiCommandsPattern.matcher(content)-->Line_9 $$ String commandName = matcher.group(1)[ FD ]
Line_23 $$ content = content.replace(setUpBlock, "")-->Line_38 $$ int y = content.lastIndexOf("</command>")[ FD ]
Line_2 $$ protected String sortPoshiCommands(String content) -->Line_37 $$ int x = content.indexOf("<command")[ CD ]
Line_7 $$ while (matcher.find()) -->Line_14 $$ previousName = commandName[ CD ]
Line_2 $$ protected String sortPoshiCommands(String content) -->Line_26 $$ matcher = _poshiTearDownPattern.matcher(content)[ FD ]
Line_20 $$ matcher = _poshiSetUpPattern.matcher(content)-->Line_27 $$ if (matcher.find()) [ FD ]
Line_4 $$ Map<String, String> commandBlocksMap = new TreeMap(String.CASE_INSENSITIVE_ORDER)-->Line_10 $$ commandBlocksMap.put(commandName, commandBlock)[ FD ]
Line_3 $$ Matcher matcher = _poshiCommandsPattern.matcher(content)-->Line_20 $$ matcher = _poshiSetUpPattern.matcher(content)[ FD ]
Line_22 $$ String setUpBlock = matcher.group()-->Line_24 $$ sb.append(setUpBlock)[ FD ]
Line_23 $$ content = content.replace(setUpBlock, "")-->Line_29 $$ content = content.replace(tearDownBlock, "")[ FD ]
Line_2 $$ protected String sortPoshiCommands(String content) -->Line_21 $$ if (matcher.find()) [ CD ]
Line_2 $$ protected String sortPoshiCommands(String content) -->Line_26 $$ matcher = _poshiTearDownPattern.matcher(content)[ CD ]
Line_2 $$ protected String sortPoshiCommands(String content) -->Line_3 $$ Matcher matcher = _poshiCommandsPattern.matcher(content)[ FD ]
Line_19 $$ StringBundler sb = new StringBundler()-->Line_24 $$ sb.append(setUpBlock)[ FD ]
Line_29 $$ content = content.replace(tearDownBlock, "")-->Line_37 $$ int x = content.indexOf("<command")[ FD ]
Line_9 $$ String commandName = matcher.group(1)-->Line_10 $$ commandBlocksMap.put(commandName, commandBlock)[ FD ]
Line_3 $$ Matcher matcher = _poshiCommandsPattern.matcher(content)-->Line_22 $$ String setUpBlock = matcher.group()[ FD ]
Line_2 $$ protected String sortPoshiCommands(String content) -->Line_16 $$ if (!hasUnsortedCommands) [ CD ]
Line_2 $$ protected String sortPoshiCommands(String content) -->Line_23 $$ content = content.replace(setUpBlock, "")[ FD ]
Line_39 $$ String commandBlock = content.substring(x, y)-->Line_42 $$ return StringUtil.replaceFirst(content, commandBlock, newCommandBlock)[ FD ]
Line_2 $$ protected String sortPoshiCommands(String content) -->Line_39 $$ String commandBlock = content.substring(x, y)[ CD ]
Line_26 $$ matcher = _poshiTearDownPattern.matcher(content)-->Line_27 $$ if (matcher.find()) [ FD ]
Line_2 $$ protected String sortPoshiCommands(String content) -->Line_27 $$ if (matcher.find()) [ CD ]
Line_29 $$ content = content.replace(tearDownBlock, "")-->Line_39 $$ String commandBlock = content.substring(x, y)[ FD ]
Line_8 $$ String commandBlock = matcher.group()-->Line_40 $$ commandBlock = "\n\t" + commandBlock + "</command>\n"[ FD ]
Line_23 $$ content = content.replace(setUpBlock, "")-->Line_26 $$ matcher = _poshiTearDownPattern.matcher(content)[ FD ]
Line_27 $$ if (matcher.find()) -->Line_28 $$ String tearDownBlock = matcher.group()[ CD ]
Line_8 $$ String commandBlock = matcher.group()-->Line_10 $$ commandBlocksMap.put(commandName, commandBlock)[ FD ]
Line_29 $$ content = content.replace(tearDownBlock, "")-->Line_38 $$ int y = content.lastIndexOf("</command>")[ FD ]
Line_38 $$ int y = content.lastIndexOf("</command>")-->Line_39 $$ String commandBlock = content.substring(x, y)[ FD ]
Line_23 $$ content = content.replace(setUpBlock, "")-->Line_37 $$ int x = content.indexOf("<command")[ FD ]
Line_39 $$ String commandBlock = content.substring(x, y)-->Line_40 $$ commandBlock = "\n\t" + commandBlock + "</command>\n"[ FD ]
Line_19 $$ StringBundler sb = new StringBundler()-->Line_30 $$ sb.append(tearDownBlock)[ FD ]
Line_2 $$ protected String sortPoshiCommands(String content) -->Line_40 $$ commandBlock = "\n\t" + commandBlock + "</command>\n"[ CD ]
Line_5 $$ String previousName = StringPool.BLANK-->Line_11 $$ if (!hasUnsortedCommands && (commandName.compareToIgnoreCase(previousName) < 0)) [ FD ]
Line_14 $$ previousName = commandName-->Line_11 $$ if (!hasUnsortedCommands && (commandName.compareToIgnoreCase(previousName) < 0)) [ FD ]
Line_7 $$ while (matcher.find()) -->Line_9 $$ String commandName = matcher.group(1)[ CD ]
Line_2 $$ protected String sortPoshiCommands(String content) -->Line_3 $$ Matcher matcher = _poshiCommandsPattern.matcher(content)[ CD ]
Line_6 $$ boolean hasUnsortedCommands = false-->Line_12 $$ hasUnsortedCommands = true[ FD ]
Line_21 $$ if (matcher.find()) -->Line_24 $$ sb.append(setUpBlock)[ CD ]
Line_2 $$ protected String sortPoshiCommands(String content) -->Line_19 $$ StringBundler sb = new StringBundler()[ CD ]
Line_2 $$ protected String sortPoshiCommands(String content) -->Line_4 $$ Map<String, String> commandBlocksMap = new TreeMap(String.CASE_INSENSITIVE_ORDER)[ CD ]
Line_27 $$ if (matcher.find()) -->Line_29 $$ content = content.replace(tearDownBlock, "")[ CD ]
Line_9 $$ String commandName = matcher.group(1)-->Line_11 $$ if (!hasUnsortedCommands && (commandName.compareToIgnoreCase(previousName) < 0)) [ FD ]
Line_21 $$ if (matcher.find()) -->Line_23 $$ content = content.replace(setUpBlock, "")[ CD ]
Line_23 $$ content = content.replace(setUpBlock, "")-->Line_39 $$ String commandBlock = content.substring(x, y)[ FD ]
Line_2 $$ protected String sortPoshiCommands(String content) -->Line_5 $$ String previousName = StringPool.BLANK[ CD ]
Line_8 $$ String commandBlock = matcher.group()-->Line_42 $$ return StringUtil.replaceFirst(content, commandBlock, newCommandBlock)[ FD ]
Line_2 $$ protected String sortPoshiCommands(String content) -->Line_6 $$ boolean hasUnsortedCommands = false[ CD ]
Line_6 $$ boolean hasUnsortedCommands = false-->Line_16 $$ if (!hasUnsortedCommands) [ FD ]
Line_26 $$ matcher = _poshiTearDownPattern.matcher(content)-->Line_28 $$ String tearDownBlock = matcher.group()[ FD ]
Line_20 $$ matcher = _poshiSetUpPattern.matcher(content)-->Line_21 $$ if (matcher.find()) [ FD ]
Line_5 $$ String previousName = StringPool.BLANK-->Line_14 $$ previousName = commandName[ FD ]
Line_2 $$ protected String sortPoshiCommands(String content) -->Line_38 $$ int y = content.lastIndexOf("</command>")[ FD ]
Line_20 $$ matcher = _poshiSetUpPattern.matcher(content)-->Line_28 $$ String tearDownBlock = matcher.group()[ FD ]
Line_2 $$ protected String sortPoshiCommands(String content) -->Line_42 $$ return StringUtil.replaceFirst(content, commandBlock, newCommandBlock)[ FD ]
Line_3 $$ Matcher matcher = _poshiCommandsPattern.matcher(content)-->Line_21 $$ if (matcher.find()) [ FD ]
Line_2 $$ protected String sortPoshiCommands(String content) -->Line_20 $$ matcher = _poshiSetUpPattern.matcher(content)[ CD ]
Line_23 $$ content = content.replace(setUpBlock, "")-->Line_42 $$ return StringUtil.replaceFirst(content, commandBlock, newCommandBlock)[ FD ]
Line_2 $$ protected String sortPoshiCommands(String content) -->Line_7 $$ while (matcher.find()) [ CD ]
Line_29 $$ content = content.replace(tearDownBlock, "")-->Line_42 $$ return StringUtil.replaceFirst(content, commandBlock, newCommandBlock)[ FD ]
Line_12 $$ hasUnsortedCommands = true-->Line_11 $$ if (!hasUnsortedCommands && (commandName.compareToIgnoreCase(previousName) < 0)) [ FD ]
Line_40 $$ commandBlock = "\n\t" + commandBlock + "</command>\n"-->Line_42 $$ return StringUtil.replaceFirst(content, commandBlock, newCommandBlock)[ FD ]
Line_28 $$ String tearDownBlock = matcher.group()-->Line_29 $$ content = content.replace(tearDownBlock, "")[ FD ]
Line_32 $$ for (Map.Entry<String, String> entry : commandBlocksMap.entrySet()) -->Line_34 $$ sb.append(entry.getValue())[ FD ]
Line_7 $$ while (matcher.find()) -->Line_11 $$ if (!hasUnsortedCommands && (commandName.compareToIgnoreCase(previousName) < 0)) [ CD ]
Line_21 $$ if (matcher.find()) -->Line_22 $$ String setUpBlock = matcher.group()[ CD ]
Line_3 $$ Matcher matcher = _poshiCommandsPattern.matcher(content)-->Line_26 $$ matcher = _poshiTearDownPattern.matcher(content)[ FD ]
Line_2 $$ protected String sortPoshiCommands(String content) -->Line_29 $$ content = content.replace(tearDownBlock, "")[ FD ]
Line_9 $$ String commandName = matcher.group(1)-->Line_14 $$ previousName = commandName[ FD ]
Line_3 $$ Matcher matcher = _poshiCommandsPattern.matcher(content)-->Line_27 $$ if (matcher.find()) [ FD ]
Line_7 $$ while (matcher.find()) -->Line_8 $$ String commandBlock = matcher.group()[ CD ]
Line_12 $$ hasUnsortedCommands = true-->Line_16 $$ if (!hasUnsortedCommands) [ FD ]
Line_19 $$ StringBundler sb = new StringBundler()-->Line_33 $$ sb.append("\n\t")[ FD ]
Line_27 $$ if (matcher.find()) -->Line_30 $$ sb.append(tearDownBlock)[ CD ]
Line_3 $$ Matcher matcher = _poshiCommandsPattern.matcher(content)-->Line_8 $$ String commandBlock = matcher.group()[ FD ]
Line_3 $$ Matcher matcher = _poshiCommandsPattern.matcher(content)-->Line_7 $$ while (matcher.find()) [ FD ]
Line_6 $$ boolean hasUnsortedCommands = false-->Line_11 $$ if (!hasUnsortedCommands && (commandName.compareToIgnoreCase(previousName) < 0)) [ FD ]
Line_19 $$ StringBundler sb = new StringBundler()-->Line_35 $$ sb.append("\n")[ FD ]
Line_16 $$ if (!hasUnsortedCommands) -->Line_17 $$ return content[ CD ]
Line_2 $$ protected String sortPoshiCommands(String content) -->Line_37 $$ int x = content.indexOf("<command")[ FD ]
Line_2 $$ protected String sortPoshiCommands(String content) -->Line_20 $$ matcher = _poshiSetUpPattern.matcher(content)[ FD ]
Line_20 $$ matcher = _poshiSetUpPattern.matcher(content)-->Line_26 $$ matcher = _poshiTearDownPattern.matcher(content)[ FD ]
Line_37 $$ int x = content.indexOf("<command")-->Line_39 $$ String commandBlock = content.substring(x, y)[ FD ]
Line_7 $$ while (matcher.find()) -->Line_10 $$ commandBlocksMap.put(commandName, commandBlock)[ CD ]
Line_19 $$ StringBundler sb = new StringBundler()-->Line_41 $$ String newCommandBlock = sb.toString()[ FD ]
