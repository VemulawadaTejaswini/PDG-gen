Line_15 $$ if (entry.getKey().equals(key)) -->Line_19 $$ return null[ CD ]
Line_24 $$ final Map.Entry<K, V> next = i.next()-->Line_26 $$ newMap = Collections.singletonMap(next.getKey(), next.getValue())[ FD ]
Line_14 $$ final Map.Entry<K, V> entry = oldMap.entrySet().iterator().next()-->Line_15 $$ if (entry.getKey().equals(key)) [ FD ]
Line_14 $$ final Map.Entry<K, V> entry = oldMap.entrySet().iterator().next()-->Line_25 $$ if (entry.getKey().equals(key)) [ FD ]
Line_2 $$ public V remove(C instance, K key) -->Line_15 $$ if (entry.getKey().equals(key)) [ FD ]
Line_10 $$ final int oldSize = oldMap.size()-->Line_11 $$ if (oldSize == 0) [ FD ]
Line_2 $$ public V remove(C instance, K key) -->Line_39 $$ oldValue = newMap.remove(key)[ FD ]
Line_6 $$ for (; ; ) -->Line_9 $$ final V oldValue[ CD ]
Line_16 $$ newMap = Collections.emptyMap()-->Line_41 $$ if (updater.compareAndSet(instance, oldMap, newMap)) [ FD ]
Line_2 $$ public V remove(C instance, K key) -->Line_25 $$ if (entry.getKey().equals(key)) [ FD ]
Line_8 $$ final Map<K, V> newMap-->Line_26 $$ newMap = Collections.singletonMap(next.getKey(), next.getValue())[ FD ]
Line_6 $$ for (; ; ) -->Line_8 $$ final Map<K, V> newMap[ CD ]
Line_26 $$ newMap = Collections.singletonMap(next.getKey(), next.getValue())-->Line_41 $$ if (updater.compareAndSet(instance, oldMap, newMap)) [ FD ]
Line_21 $$ if (oldSize == 2) -->Line_25 $$ if (entry.getKey().equals(key)) [ CD ]
Line_28 $$ if (next.getKey().equals(key)) -->Line_30 $$ oldValue = next.getValue()[ CD ]
Line_21 $$ if (oldSize == 2) -->Line_38 $$ newMap = new FastCopyHashMap<K, V>(oldMap)[ CD ]
Line_38 $$ newMap = new FastCopyHashMap<K, V>(oldMap)-->Line_39 $$ oldValue = newMap.remove(key)[ FD ]
Line_22 $$ final Iterator<Map.Entry<K, V>> i = oldMap.entrySet().iterator()-->Line_24 $$ final Map.Entry<K, V> next = i.next()[ FD ]
Line_28 $$ if (next.getKey().equals(key)) -->Line_29 $$ newMap = Collections.singletonMap(entry.getKey(), entry.getValue())[ CD ]
Line_41 $$ if (updater.compareAndSet(instance, oldMap, newMap)) -->Line_42 $$ return oldValue[ CD ]
Line_7 $$ final Map<K, V> oldMap = updater.get(instance)-->Line_22 $$ final Iterator<Map.Entry<K, V>> i = oldMap.entrySet().iterator()[ FD ]
Line_13 $$ if (oldSize == 1) -->Line_21 $$ if (oldSize == 2) [ CD ]
Line_30 $$ oldValue = next.getValue()-->Line_39 $$ oldValue = newMap.remove(key)[ FD ]
Line_14 $$ final Map.Entry<K, V> entry = oldMap.entrySet().iterator().next()-->Line_27 $$ oldValue = entry.getValue()[ FD ]
Line_29 $$ newMap = Collections.singletonMap(entry.getKey(), entry.getValue())-->Line_39 $$ oldValue = newMap.remove(key)[ FD ]
Line_3 $$ if (key == null) -->Line_4 $$ return null[ CD ]
Line_26 $$ newMap = Collections.singletonMap(next.getKey(), next.getValue())-->Line_39 $$ oldValue = newMap.remove(key)[ FD ]
Line_17 $$ oldValue = entry.getValue()-->Line_39 $$ oldValue = newMap.remove(key)[ FD ]
Line_13 $$ if (oldSize == 1) -->Line_15 $$ if (entry.getKey().equals(key)) [ CD ]
Line_16 $$ newMap = Collections.emptyMap()-->Line_39 $$ oldValue = newMap.remove(key)[ FD ]
Line_6 $$ for (; ; ) -->Line_41 $$ if (updater.compareAndSet(instance, oldMap, newMap)) [ CD ]
Line_35 $$ if (!oldMap.containsKey(key)) -->Line_36 $$ return null[ CD ]
Line_2 $$ public V remove(C instance, K key) -->Line_41 $$ if (updater.compareAndSet(instance, oldMap, newMap)) [ FD ]
Line_28 $$ if (next.getKey().equals(key)) -->Line_32 $$ return null[ CD ]
Line_7 $$ final Map<K, V> oldMap = updater.get(instance)-->Line_10 $$ final int oldSize = oldMap.size()[ FD ]
Line_8 $$ final Map<K, V> newMap-->Line_41 $$ if (updater.compareAndSet(instance, oldMap, newMap)) [ FD ]
Line_9 $$ final V oldValue-->Line_17 $$ oldValue = entry.getValue()[ FD ]
Line_10 $$ final int oldSize = oldMap.size()-->Line_21 $$ if (oldSize == 2) [ FD ]
Line_38 $$ newMap = new FastCopyHashMap<K, V>(oldMap)-->Line_41 $$ if (updater.compareAndSet(instance, oldMap, newMap)) [ FD ]
Line_29 $$ newMap = Collections.singletonMap(entry.getKey(), entry.getValue())-->Line_41 $$ if (updater.compareAndSet(instance, oldMap, newMap)) [ FD ]
Line_26 $$ newMap = Collections.singletonMap(next.getKey(), next.getValue())-->Line_38 $$ newMap = new FastCopyHashMap<K, V>(oldMap)[ FD ]
Line_14 $$ final Map.Entry<K, V> entry = oldMap.entrySet().iterator().next()-->Line_17 $$ oldValue = entry.getValue()[ FD ]
Line_8 $$ final Map<K, V> newMap-->Line_29 $$ newMap = Collections.singletonMap(entry.getKey(), entry.getValue())[ FD ]
Line_27 $$ oldValue = entry.getValue()-->Line_39 $$ oldValue = newMap.remove(key)[ FD ]
Line_16 $$ newMap = Collections.emptyMap()-->Line_29 $$ newMap = Collections.singletonMap(entry.getKey(), entry.getValue())[ FD ]
Line_21 $$ if (oldSize == 2) -->Line_22 $$ final Iterator<Map.Entry<K, V>> i = oldMap.entrySet().iterator()[ CD ]
Line_7 $$ final Map<K, V> oldMap = updater.get(instance)-->Line_41 $$ if (updater.compareAndSet(instance, oldMap, newMap)) [ FD ]
Line_21 $$ if (oldSize == 2) -->Line_24 $$ final Map.Entry<K, V> next = i.next()[ CD ]
Line_6 $$ for (; ; ) -->Line_11 $$ if (oldSize == 0) [ CD ]
Line_8 $$ final Map<K, V> newMap-->Line_38 $$ newMap = new FastCopyHashMap<K, V>(oldMap)[ FD ]
Line_9 $$ final V oldValue-->Line_39 $$ oldValue = newMap.remove(key)[ FD ]
Line_25 $$ if (entry.getKey().equals(key)) -->Line_26 $$ newMap = Collections.singletonMap(next.getKey(), next.getValue())[ CD ]
Line_24 $$ final Map.Entry<K, V> next = i.next()-->Line_30 $$ oldValue = next.getValue()[ FD ]
Line_6 $$ for (; ; ) -->Line_10 $$ final int oldSize = oldMap.size()[ CD ]
Line_25 $$ if (entry.getKey().equals(key)) -->Line_28 $$ if (next.getKey().equals(key)) [ CD ]
Line_26 $$ newMap = Collections.singletonMap(next.getKey(), next.getValue())-->Line_29 $$ newMap = Collections.singletonMap(entry.getKey(), entry.getValue())[ FD ]
Line_17 $$ oldValue = entry.getValue()-->Line_27 $$ oldValue = entry.getValue()[ FD ]
Line_9 $$ final V oldValue-->Line_30 $$ oldValue = next.getValue()[ FD ]
Line_16 $$ newMap = Collections.emptyMap()-->Line_38 $$ newMap = new FastCopyHashMap<K, V>(oldMap)[ FD ]
Line_14 $$ final Map.Entry<K, V> entry = oldMap.entrySet().iterator().next()-->Line_29 $$ newMap = Collections.singletonMap(entry.getKey(), entry.getValue())[ FD ]
Line_2 $$ public V remove(C instance, K key) -->Line_28 $$ if (next.getKey().equals(key)) [ FD ]
Line_21 $$ if (oldSize == 2) -->Line_39 $$ oldValue = newMap.remove(key)[ CD ]
Line_29 $$ newMap = Collections.singletonMap(entry.getKey(), entry.getValue())-->Line_38 $$ newMap = new FastCopyHashMap<K, V>(oldMap)[ FD ]
Line_24 $$ final Map.Entry<K, V> next = i.next()-->Line_28 $$ if (next.getKey().equals(key)) [ FD ]
Line_21 $$ if (oldSize == 2) -->Line_35 $$ if (!oldMap.containsKey(key)) [ CD ]
Line_9 $$ final V oldValue-->Line_27 $$ oldValue = entry.getValue()[ FD ]
Line_16 $$ newMap = Collections.emptyMap()-->Line_26 $$ newMap = Collections.singletonMap(next.getKey(), next.getValue())[ FD ]
Line_11 $$ if (oldSize == 0) -->Line_13 $$ if (oldSize == 1) [ CD ]
Line_17 $$ oldValue = entry.getValue()-->Line_30 $$ oldValue = next.getValue()[ FD ]
Line_2 $$ public V remove(C instance, K key) -->Line_7 $$ final Map<K, V> oldMap = updater.get(instance)[ FD ]
Line_2 $$ public V remove(C instance, K key) -->Line_35 $$ if (!oldMap.containsKey(key)) [ FD ]
Line_8 $$ final Map<K, V> newMap-->Line_16 $$ newMap = Collections.emptyMap()[ FD ]
Line_15 $$ if (entry.getKey().equals(key)) -->Line_17 $$ oldValue = entry.getValue()[ CD ]
Line_27 $$ oldValue = entry.getValue()-->Line_30 $$ oldValue = next.getValue()[ FD ]
Line_15 $$ if (entry.getKey().equals(key)) -->Line_16 $$ newMap = Collections.emptyMap()[ CD ]
Line_7 $$ final Map<K, V> oldMap = updater.get(instance)-->Line_14 $$ final Map.Entry<K, V> entry = oldMap.entrySet().iterator().next()[ FD ]
Line_22 $$ final Iterator<Map.Entry<K, V>> i = oldMap.entrySet().iterator()-->Line_23 $$ final Map.Entry<K, V> entry = i.next()[ FD ]
Line_2 $$ public V remove(C instance, K key) -->Line_6 $$ for (; ; ) [ CD ]
Line_25 $$ if (entry.getKey().equals(key)) -->Line_27 $$ oldValue = entry.getValue()[ CD ]
Line_6 $$ for (; ; ) -->Line_7 $$ final Map<K, V> oldMap = updater.get(instance)[ CD ]
Line_2 $$ public V remove(C instance, K key) -->Line_3 $$ if (key == null) [ FD ]
Line_10 $$ final int oldSize = oldMap.size()-->Line_13 $$ if (oldSize == 1) [ FD ]
Line_13 $$ if (oldSize == 1) -->Line_14 $$ final Map.Entry<K, V> entry = oldMap.entrySet().iterator().next()[ CD ]
Line_8 $$ final Map<K, V> newMap-->Line_39 $$ oldValue = newMap.remove(key)[ FD ]
Line_21 $$ if (oldSize == 2) -->Line_23 $$ final Map.Entry<K, V> entry = i.next()[ CD ]
Line_7 $$ final Map<K, V> oldMap = updater.get(instance)-->Line_35 $$ if (!oldMap.containsKey(key)) [ FD ]
Line_2 $$ public V remove(C instance, K key) -->Line_3 $$ if (key == null) [ CD ]
Line_11 $$ if (oldSize == 0) -->Line_12 $$ return null[ CD ]
