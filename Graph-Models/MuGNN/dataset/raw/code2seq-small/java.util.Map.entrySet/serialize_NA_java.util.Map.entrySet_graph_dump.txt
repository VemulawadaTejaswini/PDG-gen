Line_2 $$ public void serialize(DataOutputPlus out, int version) throws IOException -->Line_13 $$ out.writeInt((int) longSize)[ CD ]
Line_2 $$ public void serialize(DataOutputPlus out, int version) throws IOException -->Line_8 $$ out.writeInt(entry.getValue().length)[ FD ]
Line_2 $$ public void serialize(DataOutputPlus out, int version) throws IOException -->Line_15 $$ serializer.serialize(payload, out, version)[ FD ]
Line_2 $$ public void serialize(DataOutputPlus out, int version) throws IOException -->Line_13 $$ out.writeInt((int) longSize)[ FD ]
Line_2 $$ public void serialize(DataOutputPlus out, int version) throws IOException -->Line_11 $$ long longSize = payloadSize(version)[ FD ]
Line_2 $$ public void serialize(DataOutputPlus out, int version) throws IOException -->Line_5 $$ out.writeInt(parameters.size())[ FD ]
Line_6 $$ for (Map.Entry<String, byte[]> entry : parameters.entrySet()) -->Line_9 $$ out.write(entry.getValue())[ FD ]
Line_2 $$ public void serialize(DataOutputPlus out, int version) throws IOException -->Line_14 $$ if (payload != null)[ CD ]
Line_2 $$ public void serialize(DataOutputPlus out, int version) throws IOException -->Line_4 $$ out.writeInt(verb.ordinal())[ CD ]
Line_2 $$ public void serialize(DataOutputPlus out, int version) throws IOException -->Line_11 $$ long longSize = payloadSize(version)[ CD ]
Line_2 $$ public void serialize(DataOutputPlus out, int version) throws IOException -->Line_7 $$ out.writeUTF(entry.getKey())[ FD ]
Line_6 $$ for (Map.Entry<String, byte[]> entry : parameters.entrySet()) -->Line_7 $$ out.writeUTF(entry.getKey())[ FD ]
Line_6 $$ for (Map.Entry<String, byte[]> entry : parameters.entrySet()) -->Line_8 $$ out.writeInt(entry.getValue().length)[ FD ]
Line_14 $$ if (payload != null)-->Line_15 $$ serializer.serialize(payload, out, version)[ CD ]
Line_2 $$ public void serialize(DataOutputPlus out, int version) throws IOException -->Line_3 $$ CompactEndpointSerializationHelper.serialize(from, out)[ FD ]
Line_2 $$ public void serialize(DataOutputPlus out, int version) throws IOException -->Line_3 $$ CompactEndpointSerializationHelper.serialize(from, out)[ CD ]
Line_2 $$ public void serialize(DataOutputPlus out, int version) throws IOException -->Line_9 $$ out.write(entry.getValue())[ FD ]
Line_2 $$ public void serialize(DataOutputPlus out, int version) throws IOException -->Line_4 $$ out.writeInt(verb.ordinal())[ FD ]
Line_2 $$ public void serialize(DataOutputPlus out, int version) throws IOException -->Line_5 $$ out.writeInt(parameters.size())[ CD ]
