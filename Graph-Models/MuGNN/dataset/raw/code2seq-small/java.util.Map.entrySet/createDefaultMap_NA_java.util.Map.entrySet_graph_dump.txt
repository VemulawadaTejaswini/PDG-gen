Line_3 $$ final Map<Object, Object> delegate = super.createDefaultMap()-->Line_6 $$ if (delegate.containsKey(key)) [ FD ]
Line_4 $$ return new AbstractMap<Object, Object>() -->Line_6 $$ if (delegate.containsKey(key)) [ CD ]
Line_4 $$ return new AbstractMap<Object, Object>() -->Line_9 $$ return delegate.put(key, value)[ CD ]
Line_4 $$ return new AbstractMap<Object, Object>() -->Line_9 $$ return delegate.put(key, value)[ FD ]
Line_3 $$ final Map<Object, Object> delegate = super.createDefaultMap()-->Line_12 $$ return delegate.entrySet()[ FD ]
Line_3 $$ final Map<Object, Object> delegate = super.createDefaultMap()-->Line_9 $$ return delegate.put(key, value)[ FD ]
Line_4 $$ return new AbstractMap<Object, Object>() -->Line_12 $$ return delegate.entrySet()[ CD ]
Line_2 $$ protected Map<Object, Object> createDefaultMap() -->Line_4 $$ return new AbstractMap<Object, Object>() [ CD ]
Line_4 $$ return new AbstractMap<Object, Object>() -->Line_6 $$ if (delegate.containsKey(key)) [ FD ]
Line_2 $$ protected Map<Object, Object> createDefaultMap() -->Line_3 $$ final Map<Object, Object> delegate = super.createDefaultMap()[ CD ]
