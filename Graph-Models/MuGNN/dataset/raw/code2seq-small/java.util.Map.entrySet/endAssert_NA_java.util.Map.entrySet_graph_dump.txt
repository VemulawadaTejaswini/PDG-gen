Line_3 $$ for (CaptureAppender captureAppender : captureAppenders) -->Line_12 $$ captureAppender.close()[ FD ]
Line_2 $$ public static void endAssert(List<ExpectedLogs> expectedLogsList, List<CaptureAppender> captureAppenders) -->Line_15 $$ Thread.setDefaultUncaughtExceptionHandler(_uncaughtExceptionHandler)[ CD ]
Line_2 $$ public static void endAssert(List<ExpectedLogs> expectedLogsList, List<CaptureAppender> captureAppenders) -->Line_7 $$ if (!isExpected(expectedLogsList, renderedMessage)) [ FD ]
Line_18 $$ for (Map.Entry<Thread, Error> entry : _concurrentFailures.entrySet()) -->Line_20 $$ Error error = entry.getValue()[ FD ]
Line_18 $$ for (Map.Entry<Thread, Error> entry : _concurrentFailures.entrySet()) -->Line_19 $$ Thread thread = entry.getKey()[ FD ]
Line_5 $$ for (LoggingEvent loggingEvent : captureAppender.getLoggingEvents()) -->Line_6 $$ String renderedMessage = loggingEvent.getRenderedMessage()[ FD ]
Line_6 $$ String renderedMessage = loggingEvent.getRenderedMessage()-->Line_8 $$ Assert.fail(renderedMessage)[ FD ]
Line_6 $$ String renderedMessage = loggingEvent.getRenderedMessage()-->Line_7 $$ if (!isExpected(expectedLogsList, renderedMessage)) [ FD ]
Line_3 $$ for (CaptureAppender captureAppender : captureAppenders) -->Line_5 $$ for (LoggingEvent loggingEvent : captureAppender.getLoggingEvents()) [ FD ]
Line_7 $$ if (!isExpected(expectedLogsList, renderedMessage)) -->Line_8 $$ Assert.fail(renderedMessage)[ CD ]
