Line_4 $$ Interpreter interpreter = new Interpreter()-->Line_8 $$ interpreter.set(entry.getKey(), entry.getValue())[ FD ]
Line_2 $$ public Object evaluate(ScriptSource script, Map<String, Object> arguments) -->Line_11 $$ return interpreter.eval(new StringReader(script.getScriptAsString()))[ FD ]
Line_4 $$ Interpreter interpreter = new Interpreter()-->Line_11 $$ return interpreter.eval(new StringReader(script.getScriptAsString()))[ FD ]
Line_2 $$ public Object evaluate(ScriptSource script, Map<String, Object> arguments) -->Line_7 $$ for (Map.Entry<String, Object> entry : arguments.entrySet()) [ FD ]
Line_2 $$ public Object evaluate(ScriptSource script, Map<String, Object> arguments) -->Line_6 $$ if (arguments != null) [ FD ]
Line_7 $$ for (Map.Entry<String, Object> entry : arguments.entrySet()) -->Line_8 $$ interpreter.set(entry.getKey(), entry.getValue())[ FD ]
Line_4 $$ Interpreter interpreter = new Interpreter()-->Line_5 $$ interpreter.setClassLoader(this.classLoader)[ FD ]
