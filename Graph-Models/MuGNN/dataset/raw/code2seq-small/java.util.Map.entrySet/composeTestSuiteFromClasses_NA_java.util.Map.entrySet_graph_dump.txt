Line_8 $$ for (Map.Entry<PsiMethod, List<String>> method : depMethods.entrySet()) -->Line_13 $$ if (TestNGUtil.hasTest(method)) [ FD ]
Line_7 $$ LinkedHashMap<String, List<String>> methods = new LinkedHashMap<String, List<String>>()-->Line_24 $$ map.put(className, methods)[ FD ]
Line_52 $$ if (groupNames != null) -->Line_58 $$ xmlFile = suite.save(new File(PathManager.getSystemPath()))[ CD ]
Line_60 $$ xmlFile = TestNGXmlSuiteHelper.writeSuite(map, testParams, myProject.getName(), PathManager.getSystemPath(), new TestNGXmlSuiteHelper.Logger() -->Line_62 $$ LOG.error(e)[ CD ]
Line_28 $$ if (TestType.GROUP.getType().equals(myData.TEST_OBJECT)) -->Line_30 $$ if (!StringUtil.isEmptyOrSpaces(groupName)) [ CD ]
Line_4 $$ final boolean findTestMethodsForClass = shouldSearchForTestMethods()-->Line_11 $$ if (findTestMethodsForClass && depMethods.isEmpty()) [ FD ]
Line_8 $$ for (Map.Entry<PsiMethod, List<String>> method : depMethods.entrySet()) -->Line_9 $$ methods.put(method.getKey().getName(), method.getValue())[ FD ]
Line_31 $$ final List<String> names = ContainerUtil.map(StringUtil.split(groupName, ","), new Function<String, String>() -->Line_33 $$ return groupName.trim()[ CD ]
Line_60 $$ xmlFile = TestNGXmlSuiteHelper.writeSuite(map, testParams, myProject.getName(), PathManager.getSystemPath(), new TestNGXmlSuiteHelper.Logger() -->Line_62 $$ LOG.error(e)[ FD ]
Line_30 $$ if (!StringUtil.isEmptyOrSpaces(groupName)) -->Line_31 $$ final List<String> names = ContainerUtil.map(StringUtil.split(groupName, ","), new Function<String, String>() [ CD ]
Line_2 $$ private void composeTestSuiteFromClasses() -->Line_28 $$ if (TestType.GROUP.getType().equals(myData.TEST_OBJECT)) [ CD ]
Line_18 $$ final String className = ApplicationManager.getApplication().runReadAction(new Computable<String>() -->Line_24 $$ map.put(className, methods)[ FD ]
Line_5 $$ for (final Map.Entry<PsiClass, Map<PsiMethod, List<String>>> entry : myClasses.entrySet()) -->Line_55 $$ methodNames.put(entry.getKey(), entry.getValue().keySet())[ FD ]
Line_13 $$ if (TestNGUtil.hasTest(method)) -->Line_14 $$ methods.put(method.getName(), Collections.<String>emptyList())[ CD ]
Line_5 $$ for (final Map.Entry<PsiClass, Map<PsiMethod, List<String>>> entry : myClasses.entrySet()) -->Line_6 $$ final Map<PsiMethod, List<String>> depMethods = entry.getValue()[ FD ]
Line_31 $$ final List<String> names = ContainerUtil.map(StringUtil.split(groupName, ","), new Function<String, String>() -->Line_33 $$ return groupName.trim()[ FD ]
Line_6 $$ final Map<PsiMethod, List<String>> depMethods = entry.getValue()-->Line_8 $$ for (Map.Entry<PsiMethod, List<String>> method : depMethods.entrySet()) [ FD ]
Line_18 $$ final String className = ApplicationManager.getApplication().runReadAction(new Computable<String>() -->Line_20 $$ return ClassUtil.getJVMClassName(entry.getKey())[ CD ]
Line_52 $$ if (groupNames != null) -->Line_60 $$ xmlFile = TestNGXmlSuiteHelper.writeSuite(map, testParams, myProject.getName(), PathManager.getSystemPath(), new TestNGXmlSuiteHelper.Logger() [ CD ]
Line_2 $$ private void composeTestSuiteFromClasses() -->Line_3 $$ Map<String, Map<String, List<String>>> map = new LinkedHashMap<String, Map<String, List<String>>>()[ CD ]
Line_3 $$ Map<String, Map<String, List<String>>> map = new LinkedHashMap<String, Map<String, List<String>>>()-->Line_54 $$ for (Map.Entry<String, Map<String, List<String>>> entry : map.entrySet()) [ FD ]
Line_52 $$ if (groupNames != null) -->Line_57 $$ LaunchSuite suite = SuiteGenerator.createSuite(myProject.getName(), null, methodNames, groupNames, testParams, "jdk", logLevel)[ CD ]
Line_8 $$ for (Map.Entry<PsiMethod, List<String>> method : depMethods.entrySet()) -->Line_14 $$ methods.put(method.getName(), Collections.<String>emptyList())[ FD ]
Line_23 $$ if (className != null) -->Line_24 $$ map.put(className, methods)[ CD ]
Line_18 $$ final String className = ApplicationManager.getApplication().runReadAction(new Computable<String>() -->Line_23 $$ if (className != null) [ FD ]
Line_6 $$ final Map<PsiMethod, List<String>> depMethods = entry.getValue()-->Line_11 $$ if (findTestMethodsForClass && depMethods.isEmpty()) [ FD ]
Line_2 $$ private void composeTestSuiteFromClasses() -->Line_52 $$ if (groupNames != null) [ CD ]
Line_5 $$ for (final Map.Entry<PsiClass, Map<PsiMethod, List<String>>> entry : myClasses.entrySet()) -->Line_20 $$ return ClassUtil.getJVMClassName(entry.getKey())[ FD ]
Line_5 $$ for (final Map.Entry<PsiClass, Map<PsiMethod, List<String>>> entry : myClasses.entrySet()) -->Line_12 $$ for (PsiMethod method : entry.getKey().getMethods()) [ FD ]
Line_2 $$ private void composeTestSuiteFromClasses() -->Line_4 $$ final boolean findTestMethodsForClass = shouldSearchForTestMethods()[ CD ]
Line_7 $$ LinkedHashMap<String, List<String>> methods = new LinkedHashMap<String, List<String>>()-->Line_14 $$ methods.put(method.getName(), Collections.<String>emptyList())[ FD ]
Line_2 $$ private void composeTestSuiteFromClasses() -->Line_39 $$ Map<String, String> testParams = buildTestParameters()[ CD ]
Line_3 $$ Map<String, Map<String, List<String>>> map = new LinkedHashMap<String, Map<String, List<String>>>()-->Line_60 $$ xmlFile = TestNGXmlSuiteHelper.writeSuite(map, testParams, myProject.getName(), PathManager.getSystemPath(), new TestNGXmlSuiteHelper.Logger() [ FD ]
Line_3 $$ Map<String, Map<String, List<String>>> map = new LinkedHashMap<String, Map<String, List<String>>>()-->Line_24 $$ map.put(className, methods)[ FD ]
Line_7 $$ LinkedHashMap<String, List<String>> methods = new LinkedHashMap<String, List<String>>()-->Line_9 $$ methods.put(method.getKey().getName(), method.getValue())[ FD ]
Line_45 $$ if (verbose != null) -->Line_46 $$ logLevel = Integer.parseInt(verbose)[ CD ]
Line_28 $$ if (TestType.GROUP.getType().equals(myData.TEST_OBJECT)) -->Line_29 $$ String groupName = myData.getGroupName()[ CD ]
Line_60 $$ xmlFile = TestNGXmlSuiteHelper.writeSuite(map, testParams, myProject.getName(), PathManager.getSystemPath(), new TestNGXmlSuiteHelper.Logger() -->Line_70 $$ LOG.error(e)[ FD ]
