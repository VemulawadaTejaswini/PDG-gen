Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_16 $$ builder.field("gram_size", gramSize)[ FD ]
Line_39 $$ if (preTag != null) -->Line_41 $$ builder.field("pre_tag", preTag)[ CD ]
Line_9 $$ if (separator != null) -->Line_10 $$ builder.field("separator", separator)[ CD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_15 $$ if (gramSize != null) [ CD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_4 $$ builder.field("real_word_error_likelihood", realWordErrorLikelihood)[ FD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_43 $$ builder.endObject()[ FD ]
Line_45 $$ if (collateQuery != null) -->Line_47 $$ builder.field("query", collateQuery)[ CD ]
Line_26 $$ for (Entry<String, List<CandidateGenerator>> entry : entrySet) -->Line_27 $$ builder.startArray(entry.getKey())[ FD ]
Line_45 $$ if (collateQuery != null) -->Line_54 $$ builder.endObject()[ CD ]
Line_3 $$ if (realWordErrorLikelihood != null) -->Line_4 $$ builder.field("real_word_error_likelihood", realWordErrorLikelihood)[ CD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_40 $$ builder.startObject("highlight")[ FD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_13 $$ builder.field("max_errors", maxErrors)[ FD ]
Line_18 $$ if (forceUnigrams != null) -->Line_19 $$ builder.field("force_unigrams", forceUnigrams)[ CD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_54 $$ builder.endObject()[ FD ]
Line_15 $$ if (gramSize != null) -->Line_16 $$ builder.field("gram_size", gramSize)[ CD ]
Line_51 $$ if (collatePrune != null) -->Line_52 $$ builder.field("prune", collatePrune.booleanValue())[ CD ]
Line_45 $$ if (collateQuery != null) -->Line_48 $$ if (collateParams != null) [ CD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_29 $$ generator.toXContent(builder, params)[ FD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_56 $$ return builder[ CD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_45 $$ if (collateQuery != null) [ CD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_41 $$ builder.field("pre_tag", preTag)[ FD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_34 $$ if (model != null) [ CD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_42 $$ builder.field("post_tag", postTag)[ FD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_37 $$ builder.endObject()[ FD ]
Line_12 $$ if (maxErrors != null) -->Line_13 $$ builder.field("max_errors", maxErrors)[ CD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_18 $$ if (forceUnigrams != null) [ CD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_9 $$ if (separator != null) [ CD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_7 $$ builder.field("confidence", confidence)[ FD ]
Line_39 $$ if (preTag != null) -->Line_43 $$ builder.endObject()[ CD ]
Line_45 $$ if (collateQuery != null) -->Line_51 $$ if (collatePrune != null) [ CD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_12 $$ if (maxErrors != null) [ CD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_27 $$ builder.startArray(entry.getKey())[ FD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_49 $$ builder.field("params", collateParams)[ FD ]
Line_34 $$ if (model != null) -->Line_35 $$ builder.startObject("smoothing")[ CD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_10 $$ builder.field("separator", separator)[ FD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_52 $$ builder.field("prune", collatePrune.booleanValue())[ FD ]
Line_45 $$ if (collateQuery != null) -->Line_46 $$ builder.startObject("collate")[ CD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_6 $$ if (confidence != null) [ CD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_24 $$ if (!generators.isEmpty()) [ CD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_22 $$ builder.field("token_limit", tokenLimit)[ FD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_47 $$ builder.field("query", collateQuery)[ FD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_39 $$ if (preTag != null) [ CD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_46 $$ builder.startObject("collate")[ FD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_31 $$ builder.endArray()[ FD ]
Line_34 $$ if (model != null) -->Line_36 $$ model.toXContent(builder, params)[ CD ]
Line_6 $$ if (confidence != null) -->Line_7 $$ builder.field("confidence", confidence)[ CD ]
Line_21 $$ if (tokenLimit != null) -->Line_22 $$ builder.field("token_limit", tokenLimit)[ CD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_36 $$ model.toXContent(builder, params)[ FD ]
Line_26 $$ for (Entry<String, List<CandidateGenerator>> entry : entrySet) -->Line_28 $$ for (CandidateGenerator generator : entry.getValue()) [ FD ]
Line_39 $$ if (preTag != null) -->Line_40 $$ builder.startObject("highlight")[ CD ]
Line_48 $$ if (collateParams != null) -->Line_49 $$ builder.field("params", collateParams)[ CD ]
Line_39 $$ if (preTag != null) -->Line_42 $$ builder.field("post_tag", postTag)[ CD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_19 $$ builder.field("force_unigrams", forceUnigrams)[ FD ]
Line_34 $$ if (model != null) -->Line_37 $$ builder.endObject()[ CD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_35 $$ builder.startObject("smoothing")[ FD ]
Line_24 $$ if (!generators.isEmpty()) -->Line_25 $$ Set<Entry<String, List<CandidateGenerator>>> entrySet = generators.entrySet()[ CD ]
Line_28 $$ for (CandidateGenerator generator : entry.getValue()) -->Line_29 $$ generator.toXContent(builder, params)[ FD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_3 $$ if (realWordErrorLikelihood != null) [ CD ]
Line_2 $$ public XContentBuilder innerToXContent(XContentBuilder builder, Params params) throws IOException -->Line_21 $$ if (tokenLimit != null) [ CD ]
