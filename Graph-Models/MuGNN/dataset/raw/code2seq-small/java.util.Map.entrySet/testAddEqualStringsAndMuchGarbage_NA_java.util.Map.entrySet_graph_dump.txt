Line_4 $$ String s = "IntelliJ IDEA"-->Line_6 $$ strings.put(index, s)[ FD ]
Line_9 $$ final int idx = myEnumerator.enumerate(v)-->Line_10 $$ assertEquals(v, myEnumerator.valueOf(idx))[ FD ]
Line_13 $$ for (Map.Entry<Integer, String> e : strings.entrySet()) -->Line_14 $$ assertEquals((int) e.getKey(), myEnumerator.enumerate(e.getValue()))[ FD ]
Line_8 $$ final String v = Integer.toString(i) + "Just another string"-->Line_10 $$ assertEquals(v, myEnumerator.valueOf(idx))[ FD ]
Line_2 $$ public void testAddEqualStringsAndMuchGarbage() throws IOException -->Line_6 $$ strings.put(index, s)[ CD ]
Line_9 $$ final int idx = myEnumerator.enumerate(v)-->Line_11 $$ strings.put(idx, v)[ FD ]
Line_3 $$ final Map<Integer, String> strings = new THashMap<Integer, String>(10001)-->Line_13 $$ for (Map.Entry<Integer, String> e : strings.entrySet()) [ FD ]
Line_2 $$ public void testAddEqualStringsAndMuchGarbage() throws IOException -->Line_17 $$ assertEquals(new HashSet<String>(strings.values()), enumerated)[ CD ]
Line_2 $$ public void testAddEqualStringsAndMuchGarbage() throws IOException -->Line_16 $$ final Set<String> enumerated = new HashSet<String>(myEnumerator.getAllDataObjects(null))[ CD ]
Line_3 $$ final Map<Integer, String> strings = new THashMap<Integer, String>(10001)-->Line_11 $$ strings.put(idx, v)[ FD ]
Line_2 $$ public void testAddEqualStringsAndMuchGarbage() throws IOException -->Line_5 $$ final int index = myEnumerator.enumerate(s)[ CD ]
Line_4 $$ String s = "IntelliJ IDEA"-->Line_5 $$ final int index = myEnumerator.enumerate(s)[ FD ]
Line_7 $$ for (int i = 0; i < 10000; ++i) -->Line_8 $$ final String v = Integer.toString(i) + "Just another string"[ CD ]
Line_8 $$ final String v = Integer.toString(i) + "Just another string"-->Line_9 $$ final int idx = myEnumerator.enumerate(v)[ FD ]
Line_7 $$ for (int i = 0; i < 10000; ++i) -->Line_10 $$ assertEquals(v, myEnumerator.valueOf(idx))[ CD ]
Line_7 $$ for (int i = 0; i < 10000; ++i) -->Line_11 $$ strings.put(idx, v)[ CD ]
Line_7 $$ for (int i = 0; i < 10000; ++i) -->Line_9 $$ final int idx = myEnumerator.enumerate(v)[ CD ]
Line_5 $$ final int index = myEnumerator.enumerate(s)-->Line_6 $$ strings.put(index, s)[ FD ]
Line_2 $$ public void testAddEqualStringsAndMuchGarbage() throws IOException -->Line_4 $$ String s = "IntelliJ IDEA"[ CD ]
Line_7 $$ for (int i = 0; i < 10000; ++i) -->Line_8 $$ final String v = Integer.toString(i) + "Just another string"[ FD ]
Line_2 $$ public void testAddEqualStringsAndMuchGarbage() throws IOException -->Line_3 $$ final Map<Integer, String> strings = new THashMap<Integer, String>(10001)[ CD ]
Line_3 $$ final Map<Integer, String> strings = new THashMap<Integer, String>(10001)-->Line_6 $$ strings.put(index, s)[ FD ]
Line_8 $$ final String v = Integer.toString(i) + "Just another string"-->Line_11 $$ strings.put(idx, v)[ FD ]
Line_3 $$ final Map<Integer, String> strings = new THashMap<Integer, String>(10001)-->Line_17 $$ assertEquals(new HashSet<String>(strings.values()), enumerated)[ FD ]
Line_2 $$ public void testAddEqualStringsAndMuchGarbage() throws IOException -->Line_7 $$ for (int i = 0; i < 10000; ++i) [ CD ]
Line_16 $$ final Set<String> enumerated = new HashSet<String>(myEnumerator.getAllDataObjects(null))-->Line_17 $$ assertEquals(new HashSet<String>(strings.values()), enumerated)[ FD ]
