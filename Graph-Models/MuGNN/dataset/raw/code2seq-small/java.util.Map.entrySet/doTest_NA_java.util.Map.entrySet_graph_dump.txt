Line_2 $$ private void doTest(final boolean createNewBuilderClass, final Map<String, String> expectedDefaults, final String conflicts, final String packageName) throws Exception -->Line_24 $$ if (conflicts == null) [ FD ]
Line_2 $$ private void doTest(final boolean createNewBuilderClass, final Map<String, String> expectedDefaults, final String conflicts, final String packageName) throws Exception -->Line_20 $$ if (conflicts != null) [ FD ]
Line_13 $$ final ParameterData parameterData = map.get(entry.getKey())-->Line_15 $$ assertEquals(entry.getValue(), parameterData.getDefaultValue())[ FD ]
Line_2 $$ private void doTest(final boolean createNewBuilderClass, final Map<String, String> expectedDefaults, final String conflicts, final String packageName) throws Exception -->Line_11 $$ if (expectedDefaults != null) [ FD ]
Line_12 $$ for (Map.Entry<String, String> entry : expectedDefaults.entrySet()) -->Line_15 $$ assertEquals(entry.getValue(), parameterData.getDefaultValue())[ FD ]
Line_4 $$ final PsiClass aClass = myJavaFacade.findClass("Test", GlobalSearchScope.projectScope(getProject()))-->Line_7 $$ final PsiMethod[] constructors = aClass.getConstructors()[ FD ]
Line_12 $$ for (Map.Entry<String, String> entry : expectedDefaults.entrySet()) -->Line_13 $$ final ParameterData parameterData = map.get(entry.getKey())[ FD ]
Line_8 $$ for (PsiMethod constructor : constructors) -->Line_9 $$ ParameterData.createFromConstructor(constructor, "set", map)[ FD ]
Line_20 $$ if (conflicts != null) -->Line_21 $$ fail("Conflicts were not detected:" + conflicts)[ CD ]
Line_13 $$ final ParameterData parameterData = map.get(entry.getKey())-->Line_14 $$ assertNotNull(parameterData)[ FD ]
Line_6 $$ final LinkedHashMap<String, ParameterData> map = new LinkedHashMap()-->Line_9 $$ ParameterData.createFromConstructor(constructor, "set", map)[ FD ]
Line_6 $$ final LinkedHashMap<String, ParameterData> map = new LinkedHashMap()-->Line_13 $$ final ParameterData parameterData = map.get(entry.getKey())[ FD ]
Line_4 $$ final PsiClass aClass = myJavaFacade.findClass("Test", GlobalSearchScope.projectScope(getProject()))-->Line_5 $$ assertNotNull("Class Test not found", aClass)[ FD ]
Line_2 $$ private void doTest(final boolean createNewBuilderClass, final Map<String, String> expectedDefaults, final String conflicts, final String packageName) throws Exception -->Line_3 $$ doTest(( rootDir,  rootAfter) -> [ CD ]
Line_24 $$ if (conflicts == null) -->Line_25 $$ fail("Conflict detected:" + e.getMessage())[ CD ]
Line_2 $$ private void doTest(final boolean createNewBuilderClass, final Map<String, String> expectedDefaults, final String conflicts, final String packageName) throws Exception -->Line_12 $$ for (Map.Entry<String, String> entry : expectedDefaults.entrySet()) [ FD ]
