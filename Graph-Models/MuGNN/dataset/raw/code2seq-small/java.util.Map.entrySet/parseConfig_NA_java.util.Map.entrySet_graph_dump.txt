Line_18 $$ if (parseFieldMatcher.match(parameterName, parameter)) -->Line_19 $$ String coreParameterName = parameter.getPreferredName()[ CD ]
Line_5 $$ String parameterName = entry.getKey()-->Line_7 $$ if (parseFieldMatcher.match(parameterName, ScriptService.SCRIPT_LANG)) [ FD ]
Line_8 $$ if (parameterValue instanceof String || parameterValue == null) -->Line_10 $$ if (removeMatchedEntries) [ CD ]
Line_20 $$ String stringValue-->Line_53 $$ stringValue = (String) parameterValue[ FD ]
Line_19 $$ String coreParameterName = parameter.getPreferredName()-->Line_26 $$ putParameterValue(coreParameterName, stringValue, ScriptType.INLINE)[ FD ]
Line_22 $$ stringValue = (String) parameterValue-->Line_57 $$ putParameterValue(coreParameterName, stringValue, ScriptType.INDEXED)[ FD ]
Line_53 $$ stringValue = (String) parameterValue-->Line_57 $$ putParameterValue(coreParameterName, stringValue, ScriptType.INDEXED)[ FD ]
Line_38 $$ stringValue = (String) parameterValue-->Line_26 $$ putParameterValue(coreParameterName, stringValue, ScriptType.INLINE)[ FD ]
Line_2 $$ public void parseConfig(Map<String, Object> config, boolean removeMatchedEntries, ParseFieldMatcher parseFieldMatcher) -->Line_3 $$ for (Iterator<Map.Entry<String, Object>> itr = config.entrySet().iterator(); itr.hasNext(); ) [ FD ]
Line_3 $$ for (Iterator<Map.Entry<String, Object>> itr = config.entrySet().iterator(); itr.hasNext(); ) -->Line_5 $$ String parameterName = entry.getKey()[ CD ]
Line_6 $$ Object parameterValue = entry.getValue()-->Line_52 $$ if (parameterValue instanceof String) [ FD ]
Line_33 $$ if (parseFieldMatcher.match(parameterName, parameter)) -->Line_43 $$ if (removeMatchedEntries) [ CD ]
Line_6 $$ Object parameterValue = entry.getValue()-->Line_37 $$ if (parameterValue instanceof String) [ FD ]
Line_2 $$ public void parseConfig(Map<String, Object> config, boolean removeMatchedEntries, ParseFieldMatcher parseFieldMatcher) -->Line_33 $$ if (parseFieldMatcher.match(parameterName, parameter)) [ FD ]
Line_49 $$ if (parseFieldMatcher.match(parameterName, parameter)) -->Line_57 $$ putParameterValue(coreParameterName, stringValue, ScriptType.INDEXED)[ CD ]
Line_2 $$ public void parseConfig(Map<String, Object> config, boolean removeMatchedEntries, ParseFieldMatcher parseFieldMatcher) -->Line_18 $$ if (parseFieldMatcher.match(parameterName, parameter)) [ FD ]
Line_6 $$ Object parameterValue = entry.getValue()-->Line_21 $$ if (parameterValue instanceof String) [ FD ]
Line_5 $$ String parameterName = entry.getKey()-->Line_33 $$ if (parseFieldMatcher.match(parameterName, parameter)) [ FD ]
Line_2 $$ public void parseConfig(Map<String, Object> config, boolean removeMatchedEntries, ParseFieldMatcher parseFieldMatcher) -->Line_3 $$ for (Iterator<Map.Entry<String, Object>> itr = config.entrySet().iterator(); itr.hasNext(); ) [ CD ]
Line_7 $$ if (parseFieldMatcher.match(parameterName, ScriptService.SCRIPT_LANG)) -->Line_8 $$ if (parameterValue instanceof String || parameterValue == null) [ CD ]
Line_18 $$ if (parseFieldMatcher.match(parameterName, parameter)) -->Line_21 $$ if (parameterValue instanceof String) [ CD ]
Line_4 $$ Map.Entry<String, Object> entry = itr.next()-->Line_6 $$ Object parameterValue = entry.getValue()[ FD ]
Line_22 $$ stringValue = (String) parameterValue-->Line_26 $$ putParameterValue(coreParameterName, stringValue, ScriptType.INLINE)[ FD ]
Line_49 $$ if (parseFieldMatcher.match(parameterName, parameter)) -->Line_50 $$ String coreParameterName = parameter.getPreferredName().replace(INDEXED_SUFFIX, "")[ CD ]
Line_2 $$ public void parseConfig(Map<String, Object> config, boolean removeMatchedEntries, ParseFieldMatcher parseFieldMatcher) -->Line_7 $$ if (parseFieldMatcher.match(parameterName, ScriptService.SCRIPT_LANG)) [ FD ]
Line_4 $$ Map.Entry<String, Object> entry = itr.next()-->Line_5 $$ String parameterName = entry.getKey()[ FD ]
Line_33 $$ if (parseFieldMatcher.match(parameterName, parameter)) -->Line_42 $$ putParameterValue(coreParameterName, stringValue, ScriptType.FILE)[ CD ]
Line_22 $$ stringValue = (String) parameterValue-->Line_53 $$ stringValue = (String) parameterValue[ FD ]
Line_3 $$ for (Iterator<Map.Entry<String, Object>> itr = config.entrySet().iterator(); itr.hasNext(); ) -->Line_59 $$ itr.remove()[ FD ]
Line_17 $$ for (ParseField parameter : inlineParameters) -->Line_33 $$ if (parseFieldMatcher.match(parameterName, parameter)) [ FD ]
Line_58 $$ if (removeMatchedEntries) -->Line_59 $$ itr.remove()[ CD ]
Line_33 $$ if (parseFieldMatcher.match(parameterName, parameter)) -->Line_37 $$ if (parameterValue instanceof String) [ CD ]
Line_18 $$ if (parseFieldMatcher.match(parameterName, parameter)) -->Line_27 $$ if (removeMatchedEntries) [ CD ]
Line_17 $$ for (ParseField parameter : inlineParameters) -->Line_19 $$ String coreParameterName = parameter.getPreferredName()[ FD ]
Line_20 $$ String stringValue-->Line_38 $$ stringValue = (String) parameterValue[ FD ]
Line_2 $$ public void parseConfig(Map<String, Object> config, boolean removeMatchedEntries, ParseFieldMatcher parseFieldMatcher) -->Line_49 $$ if (parseFieldMatcher.match(parameterName, parameter)) [ FD ]
Line_38 $$ stringValue = (String) parameterValue-->Line_53 $$ stringValue = (String) parameterValue[ FD ]
Line_17 $$ for (ParseField parameter : inlineParameters) -->Line_49 $$ if (parseFieldMatcher.match(parameterName, parameter)) [ FD ]
Line_17 $$ for (ParseField parameter : inlineParameters) -->Line_18 $$ if (parseFieldMatcher.match(parameterName, parameter)) [ FD ]
Line_43 $$ if (removeMatchedEntries) -->Line_44 $$ itr.remove()[ CD ]
Line_17 $$ for (ParseField parameter : inlineParameters) -->Line_50 $$ String coreParameterName = parameter.getPreferredName().replace(INDEXED_SUFFIX, "")[ FD ]
Line_52 $$ if (parameterValue instanceof String) -->Line_53 $$ stringValue = (String) parameterValue[ CD ]
Line_20 $$ String stringValue-->Line_22 $$ stringValue = (String) parameterValue[ FD ]
Line_22 $$ stringValue = (String) parameterValue-->Line_42 $$ putParameterValue(coreParameterName, stringValue, ScriptType.FILE)[ FD ]
Line_3 $$ for (Iterator<Map.Entry<String, Object>> itr = config.entrySet().iterator(); itr.hasNext(); ) -->Line_4 $$ Map.Entry<String, Object> entry = itr.next()[ CD ]
Line_10 $$ if (removeMatchedEntries) -->Line_11 $$ itr.remove()[ CD ]
Line_17 $$ for (ParseField parameter : inlineParameters) -->Line_34 $$ String coreParameterName = parameter.getPreferredName().replace(FILE_SUFFIX, "")[ FD ]
Line_3 $$ for (Iterator<Map.Entry<String, Object>> itr = config.entrySet().iterator(); itr.hasNext(); ) -->Line_11 $$ itr.remove()[ FD ]
Line_5 $$ String parameterName = entry.getKey()-->Line_18 $$ if (parseFieldMatcher.match(parameterName, parameter)) [ FD ]
Line_20 $$ String stringValue-->Line_57 $$ putParameterValue(coreParameterName, stringValue, ScriptType.INDEXED)[ FD ]
Line_3 $$ for (Iterator<Map.Entry<String, Object>> itr = config.entrySet().iterator(); itr.hasNext(); ) -->Line_4 $$ Map.Entry<String, Object> entry = itr.next()[ FD ]
Line_3 $$ for (Iterator<Map.Entry<String, Object>> itr = config.entrySet().iterator(); itr.hasNext(); ) -->Line_44 $$ itr.remove()[ FD ]
Line_53 $$ stringValue = (String) parameterValue-->Line_26 $$ putParameterValue(coreParameterName, stringValue, ScriptType.INLINE)[ FD ]
Line_18 $$ if (parseFieldMatcher.match(parameterName, parameter)) -->Line_26 $$ putParameterValue(coreParameterName, stringValue, ScriptType.INLINE)[ CD ]
Line_3 $$ for (Iterator<Map.Entry<String, Object>> itr = config.entrySet().iterator(); itr.hasNext(); ) -->Line_28 $$ itr.remove()[ FD ]
Line_37 $$ if (parameterValue instanceof String) -->Line_38 $$ stringValue = (String) parameterValue[ CD ]
Line_19 $$ String coreParameterName = parameter.getPreferredName()-->Line_42 $$ putParameterValue(coreParameterName, stringValue, ScriptType.FILE)[ FD ]
Line_27 $$ if (removeMatchedEntries) -->Line_28 $$ itr.remove()[ CD ]
Line_49 $$ if (parseFieldMatcher.match(parameterName, parameter)) -->Line_58 $$ if (removeMatchedEntries) [ CD ]
Line_5 $$ String parameterName = entry.getKey()-->Line_49 $$ if (parseFieldMatcher.match(parameterName, parameter)) [ FD ]
Line_33 $$ if (parseFieldMatcher.match(parameterName, parameter)) -->Line_34 $$ String coreParameterName = parameter.getPreferredName().replace(FILE_SUFFIX, "")[ CD ]
Line_19 $$ String coreParameterName = parameter.getPreferredName()-->Line_57 $$ putParameterValue(coreParameterName, stringValue, ScriptType.INDEXED)[ FD ]
Line_20 $$ String stringValue-->Line_42 $$ putParameterValue(coreParameterName, stringValue, ScriptType.FILE)[ FD ]
Line_38 $$ stringValue = (String) parameterValue-->Line_42 $$ putParameterValue(coreParameterName, stringValue, ScriptType.FILE)[ FD ]
Line_38 $$ stringValue = (String) parameterValue-->Line_57 $$ putParameterValue(coreParameterName, stringValue, ScriptType.INDEXED)[ FD ]
Line_21 $$ if (parameterValue instanceof String) -->Line_22 $$ stringValue = (String) parameterValue[ CD ]
Line_53 $$ stringValue = (String) parameterValue-->Line_42 $$ putParameterValue(coreParameterName, stringValue, ScriptType.FILE)[ FD ]
Line_3 $$ for (Iterator<Map.Entry<String, Object>> itr = config.entrySet().iterator(); itr.hasNext(); ) -->Line_6 $$ Object parameterValue = entry.getValue()[ CD ]
Line_20 $$ String stringValue-->Line_26 $$ putParameterValue(coreParameterName, stringValue, ScriptType.INLINE)[ FD ]
Line_49 $$ if (parseFieldMatcher.match(parameterName, parameter)) -->Line_52 $$ if (parameterValue instanceof String) [ CD ]
Line_18 $$ if (parseFieldMatcher.match(parameterName, parameter)) -->Line_20 $$ String stringValue[ CD ]
Line_22 $$ stringValue = (String) parameterValue-->Line_38 $$ stringValue = (String) parameterValue[ FD ]
Line_3 $$ for (Iterator<Map.Entry<String, Object>> itr = config.entrySet().iterator(); itr.hasNext(); ) -->Line_7 $$ if (parseFieldMatcher.match(parameterName, ScriptService.SCRIPT_LANG)) [ CD ]
