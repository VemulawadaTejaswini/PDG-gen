Line_3 $$ final InterceptorContext interceptorContext = new InterceptorContext()-->Line_21 $$ interceptorContext.putPrivateData(privateAttachment.getKey(), privateAttachment.getValue())[ FD ]
Line_2 $$ private Object invokeMethod(final short invocationId, final ComponentView componentView, final Method method, final Object[] args, final EJBLocator<?> ejbLocator, final Map<String, Object> attachments) throws Throwable -->Line_30 $$ if (ejbLocator instanceof EntityEJBLocator) [ FD ]
Line_3 $$ final InterceptorContext interceptorContext = new InterceptorContext()-->Line_41 $$ interceptorContext.putPrivateData(CancellationFlag.class, asyncInvocationCancellationFlag)[ FD ]
Line_2 $$ private Object invokeMethod(final short invocationId, final ComponentView componentView, final Method method, final Object[] args, final EJBLocator<?> ejbLocator, final Map<String, Object> attachments) throws Throwable -->Line_34 $$ if (componentView.isAsynchronous(method)) [ CD ]
Line_2 $$ private Object invokeMethod(final short invocationId, final ComponentView componentView, final Method method, final Object[] args, final EJBLocator<?> ejbLocator, final Map<String, Object> attachments) throws Throwable -->Line_5 $$ interceptorContext.setMethod(method)[ FD ]
Line_31 $$ final Object primaryKey = ((EntityEJBLocator<?>) ejbLocator).getPrimaryKey()-->Line_32 $$ interceptorContext.putPrivateData(EntityBeanComponent.PRIMARY_KEY_CONTEXT_KEY, primaryKey)[ FD ]
Line_2 $$ private Object invokeMethod(final short invocationId, final ComponentView componentView, final Method method, final Object[] args, final EJBLocator<?> ejbLocator, final Map<String, Object> attachments) throws Throwable -->Line_28 $$ if (ejbLocator instanceof StatefulEJBLocator) [ FD ]
Line_18 $$ if (EJBClientInvocationContext.PRIVATE_ATTACHMENTS_KEY.equals(key)) -->Line_19 $$ final Map<?, ?> privateAttachments = (Map<?, ?>) value[ CD ]
Line_30 $$ if (ejbLocator instanceof EntityEJBLocator) -->Line_32 $$ interceptorContext.putPrivateData(EntityBeanComponent.PRIMARY_KEY_CONTEXT_KEY, primaryKey)[ CD ]
Line_34 $$ if (componentView.isAsynchronous(method)) -->Line_35 $$ final Component component = componentView.getComponent()[ CD ]
Line_2 $$ private Object invokeMethod(final short invocationId, final ComponentView componentView, final Method method, final Object[] args, final EJBLocator<?> ejbLocator, final Map<String, Object> attachments) throws Throwable -->Line_35 $$ final Component component = componentView.getComponent()[ FD ]
Line_17 $$ final Object value = attachment.getValue()-->Line_24 $$ invocationContextData.put(key, value)[ FD ]
Line_2 $$ private Object invokeMethod(final short invocationId, final ComponentView componentView, final Method method, final Object[] args, final EJBLocator<?> ejbLocator, final Map<String, Object> attachments) throws Throwable -->Line_11 $$ if (attachments != null) [ FD ]
Line_2 $$ private Object invokeMethod(final short invocationId, final ComponentView componentView, final Method method, final Object[] args, final EJBLocator<?> ejbLocator, final Map<String, Object> attachments) throws Throwable -->Line_50 $$ return componentView.invoke(interceptorContext)[ FD ]
Line_3 $$ final InterceptorContext interceptorContext = new InterceptorContext()-->Line_38 $$ return componentView.invoke(interceptorContext)[ FD ]
Line_9 $$ final Map<String, Object> invocationContextData = new HashMap<String, Object>()-->Line_10 $$ interceptorContext.setContextData(invocationContextData)[ FD ]
Line_34 $$ if (componentView.isAsynchronous(method)) -->Line_42 $$ this.remoteAsyncInvocationCancelStatus.registerAsyncInvocation(invocationId, asyncInvocationCancellationFlag)[ CD ]
Line_30 $$ if (ejbLocator instanceof EntityEJBLocator) -->Line_31 $$ final Object primaryKey = ((EntityEJBLocator<?>) ejbLocator).getPrimaryKey()[ CD ]
Line_3 $$ final InterceptorContext interceptorContext = new InterceptorContext()-->Line_4 $$ interceptorContext.setParameters(args)[ FD ]
Line_2 $$ private Object invokeMethod(final short invocationId, final ComponentView componentView, final Method method, final Object[] args, final EJBLocator<?> ejbLocator, final Map<String, Object> attachments) throws Throwable -->Line_34 $$ if (componentView.isAsynchronous(method)) [ FD ]
Line_19 $$ final Map<?, ?> privateAttachments = (Map<?, ?>) value-->Line_20 $$ for (final Map.Entry<?, ?> privateAttachment : privateAttachments.entrySet()) [ FD ]
Line_3 $$ final InterceptorContext interceptorContext = new InterceptorContext()-->Line_32 $$ interceptorContext.putPrivateData(EntityBeanComponent.PRIMARY_KEY_CONTEXT_KEY, primaryKey)[ FD ]
Line_2 $$ private Object invokeMethod(final short invocationId, final ComponentView componentView, final Method method, final Object[] args, final EJBLocator<?> ejbLocator, final Map<String, Object> attachments) throws Throwable -->Line_6 $$ interceptorContext.putPrivateData(Component.class, componentView.getComponent())[ CD ]
Line_3 $$ final InterceptorContext interceptorContext = new InterceptorContext()-->Line_7 $$ interceptorContext.putPrivateData(ComponentView.class, componentView)[ FD ]
Line_36 $$ if (!(component instanceof SessionBeanComponent)) -->Line_37 $$ EjbLogger.REMOTE_LOGGER.asyncMethodSupportedOnlyForSessionBeans(component.getComponentClass(), method)[ CD ]
Line_36 $$ if (!(component instanceof SessionBeanComponent)) -->Line_38 $$ return componentView.invoke(interceptorContext)[ CD ]
Line_34 $$ if (componentView.isAsynchronous(method)) -->Line_50 $$ return componentView.invoke(interceptorContext)[ CD ]
Line_3 $$ final InterceptorContext interceptorContext = new InterceptorContext()-->Line_6 $$ interceptorContext.putPrivateData(Component.class, componentView.getComponent())[ FD ]
Line_9 $$ final Map<String, Object> invocationContextData = new HashMap<String, Object>()-->Line_24 $$ invocationContextData.put(key, value)[ FD ]
Line_3 $$ final InterceptorContext interceptorContext = new InterceptorContext()-->Line_5 $$ interceptorContext.setMethod(method)[ FD ]
Line_12 $$ for (final Map.Entry<String, Object> attachment : attachments.entrySet()) -->Line_16 $$ final String key = attachment.getKey()[ FD ]
Line_2 $$ private Object invokeMethod(final short invocationId, final ComponentView componentView, final Method method, final Object[] args, final EJBLocator<?> ejbLocator, final Map<String, Object> attachments) throws Throwable -->Line_6 $$ interceptorContext.putPrivateData(Component.class, componentView.getComponent())[ FD ]
Line_3 $$ final InterceptorContext interceptorContext = new InterceptorContext()-->Line_29 $$ interceptorContext.putPrivateData(SessionID.class, ((StatefulEJBLocator<?>) ejbLocator).getSessionId())[ FD ]
Line_40 $$ final CancellationFlag asyncInvocationCancellationFlag = new CancellationFlag()-->Line_42 $$ this.remoteAsyncInvocationCancelStatus.registerAsyncInvocation(invocationId, asyncInvocationCancellationFlag)[ FD ]
Line_2 $$ private Object invokeMethod(final short invocationId, final ComponentView componentView, final Method method, final Object[] args, final EJBLocator<?> ejbLocator, final Map<String, Object> attachments) throws Throwable -->Line_3 $$ final InterceptorContext interceptorContext = new InterceptorContext()[ CD ]
Line_40 $$ final CancellationFlag asyncInvocationCancellationFlag = new CancellationFlag()-->Line_41 $$ interceptorContext.putPrivateData(CancellationFlag.class, asyncInvocationCancellationFlag)[ FD ]
Line_20 $$ for (final Map.Entry<?, ?> privateAttachment : privateAttachments.entrySet()) -->Line_21 $$ interceptorContext.putPrivateData(privateAttachment.getKey(), privateAttachment.getValue())[ FD ]
Line_3 $$ final InterceptorContext interceptorContext = new InterceptorContext()-->Line_8 $$ interceptorContext.putPrivateData(InvocationType.class, InvocationType.REMOTE)[ FD ]
Line_12 $$ for (final Map.Entry<String, Object> attachment : attachments.entrySet()) -->Line_17 $$ final Object value = attachment.getValue()[ FD ]
Line_34 $$ if (componentView.isAsynchronous(method)) -->Line_41 $$ interceptorContext.putPrivateData(CancellationFlag.class, asyncInvocationCancellationFlag)[ CD ]
Line_2 $$ private Object invokeMethod(final short invocationId, final ComponentView componentView, final Method method, final Object[] args, final EJBLocator<?> ejbLocator, final Map<String, Object> attachments) throws Throwable -->Line_9 $$ final Map<String, Object> invocationContextData = new HashMap<String, Object>()[ CD ]
Line_2 $$ private Object invokeMethod(final short invocationId, final ComponentView componentView, final Method method, final Object[] args, final EJBLocator<?> ejbLocator, final Map<String, Object> attachments) throws Throwable -->Line_47 $$ this.remoteAsyncInvocationCancelStatus.asyncInvocationDone(invocationId)[ FD ]
Line_3 $$ final InterceptorContext interceptorContext = new InterceptorContext()-->Line_10 $$ interceptorContext.setContextData(invocationContextData)[ FD ]
Line_34 $$ if (componentView.isAsynchronous(method)) -->Line_36 $$ if (!(component instanceof SessionBeanComponent)) [ CD ]
Line_35 $$ final Component component = componentView.getComponent()-->Line_37 $$ EjbLogger.REMOTE_LOGGER.asyncMethodSupportedOnlyForSessionBeans(component.getComponentClass(), method)[ FD ]
Line_2 $$ private Object invokeMethod(final short invocationId, final ComponentView componentView, final Method method, final Object[] args, final EJBLocator<?> ejbLocator, final Map<String, Object> attachments) throws Throwable -->Line_4 $$ interceptorContext.setParameters(args)[ FD ]
Line_34 $$ if (componentView.isAsynchronous(method)) -->Line_40 $$ final CancellationFlag asyncInvocationCancellationFlag = new CancellationFlag()[ CD ]
Line_2 $$ private Object invokeMethod(final short invocationId, final ComponentView componentView, final Method method, final Object[] args, final EJBLocator<?> ejbLocator, final Map<String, Object> attachments) throws Throwable -->Line_7 $$ interceptorContext.putPrivateData(ComponentView.class, componentView)[ CD ]
Line_3 $$ final InterceptorContext interceptorContext = new InterceptorContext()-->Line_50 $$ return componentView.invoke(interceptorContext)[ FD ]
Line_3 $$ final InterceptorContext interceptorContext = new InterceptorContext()-->Line_44 $$ final Object result = componentView.invoke(interceptorContext)[ FD ]
Line_28 $$ if (ejbLocator instanceof StatefulEJBLocator) -->Line_29 $$ interceptorContext.putPrivateData(SessionID.class, ((StatefulEJBLocator<?>) ejbLocator).getSessionId())[ CD ]
Line_2 $$ private Object invokeMethod(final short invocationId, final ComponentView componentView, final Method method, final Object[] args, final EJBLocator<?> ejbLocator, final Map<String, Object> attachments) throws Throwable -->Line_4 $$ interceptorContext.setParameters(args)[ CD ]
Line_2 $$ private Object invokeMethod(final short invocationId, final ComponentView componentView, final Method method, final Object[] args, final EJBLocator<?> ejbLocator, final Map<String, Object> attachments) throws Throwable -->Line_42 $$ this.remoteAsyncInvocationCancelStatus.registerAsyncInvocation(invocationId, asyncInvocationCancellationFlag)[ FD ]
Line_2 $$ private Object invokeMethod(final short invocationId, final ComponentView componentView, final Method method, final Object[] args, final EJBLocator<?> ejbLocator, final Map<String, Object> attachments) throws Throwable -->Line_5 $$ interceptorContext.setMethod(method)[ CD ]
Line_16 $$ final String key = attachment.getKey()-->Line_18 $$ if (EJBClientInvocationContext.PRIVATE_ATTACHMENTS_KEY.equals(key)) [ FD ]
Line_2 $$ private Object invokeMethod(final short invocationId, final ComponentView componentView, final Method method, final Object[] args, final EJBLocator<?> ejbLocator, final Map<String, Object> attachments) throws Throwable -->Line_8 $$ interceptorContext.putPrivateData(InvocationType.class, InvocationType.REMOTE)[ CD ]
Line_18 $$ if (EJBClientInvocationContext.PRIVATE_ATTACHMENTS_KEY.equals(key)) -->Line_24 $$ invocationContextData.put(key, value)[ CD ]
Line_16 $$ final String key = attachment.getKey()-->Line_24 $$ invocationContextData.put(key, value)[ FD ]
Line_12 $$ for (final Map.Entry<String, Object> attachment : attachments.entrySet()) -->Line_13 $$ if (attachment == null) [ FD ]
Line_28 $$ if (ejbLocator instanceof StatefulEJBLocator) -->Line_30 $$ if (ejbLocator instanceof EntityEJBLocator) [ CD ]
Line_2 $$ private Object invokeMethod(final short invocationId, final ComponentView componentView, final Method method, final Object[] args, final EJBLocator<?> ejbLocator, final Map<String, Object> attachments) throws Throwable -->Line_12 $$ for (final Map.Entry<String, Object> attachment : attachments.entrySet()) [ FD ]
Line_2 $$ private Object invokeMethod(final short invocationId, final ComponentView componentView, final Method method, final Object[] args, final EJBLocator<?> ejbLocator, final Map<String, Object> attachments) throws Throwable -->Line_10 $$ interceptorContext.setContextData(invocationContextData)[ CD ]
Line_2 $$ private Object invokeMethod(final short invocationId, final ComponentView componentView, final Method method, final Object[] args, final EJBLocator<?> ejbLocator, final Map<String, Object> attachments) throws Throwable -->Line_38 $$ return componentView.invoke(interceptorContext)[ FD ]
Line_2 $$ private Object invokeMethod(final short invocationId, final ComponentView componentView, final Method method, final Object[] args, final EJBLocator<?> ejbLocator, final Map<String, Object> attachments) throws Throwable -->Line_28 $$ if (ejbLocator instanceof StatefulEJBLocator) [ CD ]
Line_2 $$ private Object invokeMethod(final short invocationId, final ComponentView componentView, final Method method, final Object[] args, final EJBLocator<?> ejbLocator, final Map<String, Object> attachments) throws Throwable -->Line_44 $$ final Object result = componentView.invoke(interceptorContext)[ FD ]
Line_2 $$ private Object invokeMethod(final short invocationId, final ComponentView componentView, final Method method, final Object[] args, final EJBLocator<?> ejbLocator, final Map<String, Object> attachments) throws Throwable -->Line_7 $$ interceptorContext.putPrivateData(ComponentView.class, componentView)[ FD ]
Line_2 $$ private Object invokeMethod(final short invocationId, final ComponentView componentView, final Method method, final Object[] args, final EJBLocator<?> ejbLocator, final Map<String, Object> attachments) throws Throwable -->Line_11 $$ if (attachments != null) [ CD ]
Line_2 $$ private Object invokeMethod(final short invocationId, final ComponentView componentView, final Method method, final Object[] args, final EJBLocator<?> ejbLocator, final Map<String, Object> attachments) throws Throwable -->Line_37 $$ EjbLogger.REMOTE_LOGGER.asyncMethodSupportedOnlyForSessionBeans(component.getComponentClass(), method)[ FD ]
