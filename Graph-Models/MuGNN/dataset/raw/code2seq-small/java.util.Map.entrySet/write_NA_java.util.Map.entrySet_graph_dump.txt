Line_3 $$ TTupleProtocol oprot = (TTupleProtocol) prot-->Line_14 $$ oprot.writeI32(struct.success.size())[ FD ]
Line_3 $$ TTupleProtocol oprot = (TTupleProtocol) prot-->Line_11 $$ oprot.writeBitSet(optionals, 2)[ FD ]
Line_2 $$ public void write(org.apache.thrift.protocol.TProtocol prot, describe_token_map_result struct) throws org.apache.thrift.TException -->Line_8 $$ if (struct.isSetIre()) [ FD ]
Line_2 $$ public void write(org.apache.thrift.protocol.TProtocol prot, describe_token_map_result struct) throws org.apache.thrift.TException -->Line_4 $$ BitSet optionals = new BitSet()[ CD ]
Line_4 $$ BitSet optionals = new BitSet()-->Line_11 $$ oprot.writeBitSet(optionals, 2)[ FD ]
Line_3 $$ TTupleProtocol oprot = (TTupleProtocol) prot-->Line_22 $$ struct.ire.write(oprot)[ FD ]
Line_3 $$ TTupleProtocol oprot = (TTupleProtocol) prot-->Line_16 $$ oprot.writeString(_iter427.getKey())[ FD ]
Line_2 $$ public void write(org.apache.thrift.protocol.TProtocol prot, describe_token_map_result struct) throws org.apache.thrift.TException -->Line_5 $$ if (struct.isSetSuccess()) [ FD ]
Line_2 $$ public void write(org.apache.thrift.protocol.TProtocol prot, describe_token_map_result struct) throws org.apache.thrift.TException -->Line_5 $$ if (struct.isSetSuccess()) [ CD ]
Line_15 $$ for (Map.Entry<String, String> _iter427 : struct.success.entrySet()) -->Line_17 $$ oprot.writeString(_iter427.getValue())[ FD ]
Line_5 $$ if (struct.isSetSuccess()) -->Line_6 $$ optionals.set(0)[ CD ]
Line_2 $$ public void write(org.apache.thrift.protocol.TProtocol prot, describe_token_map_result struct) throws org.apache.thrift.TException -->Line_3 $$ TTupleProtocol oprot = (TTupleProtocol) prot[ CD ]
Line_4 $$ BitSet optionals = new BitSet()-->Line_9 $$ optionals.set(1)[ FD ]
Line_8 $$ if (struct.isSetIre()) -->Line_9 $$ optionals.set(1)[ CD ]
Line_2 $$ public void write(org.apache.thrift.protocol.TProtocol prot, describe_token_map_result struct) throws org.apache.thrift.TException -->Line_11 $$ oprot.writeBitSet(optionals, 2)[ CD ]
Line_3 $$ TTupleProtocol oprot = (TTupleProtocol) prot-->Line_17 $$ oprot.writeString(_iter427.getValue())[ FD ]
Line_21 $$ if (struct.isSetIre()) -->Line_22 $$ struct.ire.write(oprot)[ CD ]
Line_4 $$ BitSet optionals = new BitSet()-->Line_6 $$ optionals.set(0)[ FD ]
Line_2 $$ public void write(org.apache.thrift.protocol.TProtocol prot, describe_token_map_result struct) throws org.apache.thrift.TException -->Line_12 $$ if (struct.isSetSuccess()) [ CD ]
Line_12 $$ if (struct.isSetSuccess()) -->Line_14 $$ oprot.writeI32(struct.success.size())[ CD ]
Line_2 $$ public void write(org.apache.thrift.protocol.TProtocol prot, describe_token_map_result struct) throws org.apache.thrift.TException -->Line_21 $$ if (struct.isSetIre()) [ FD ]
Line_15 $$ for (Map.Entry<String, String> _iter427 : struct.success.entrySet()) -->Line_16 $$ oprot.writeString(_iter427.getKey())[ FD ]
Line_2 $$ public void write(org.apache.thrift.protocol.TProtocol prot, describe_token_map_result struct) throws org.apache.thrift.TException -->Line_8 $$ if (struct.isSetIre()) [ CD ]
Line_2 $$ public void write(org.apache.thrift.protocol.TProtocol prot, describe_token_map_result struct) throws org.apache.thrift.TException -->Line_21 $$ if (struct.isSetIre()) [ CD ]
Line_2 $$ public void write(org.apache.thrift.protocol.TProtocol prot, describe_token_map_result struct) throws org.apache.thrift.TException -->Line_12 $$ if (struct.isSetSuccess()) [ FD ]
