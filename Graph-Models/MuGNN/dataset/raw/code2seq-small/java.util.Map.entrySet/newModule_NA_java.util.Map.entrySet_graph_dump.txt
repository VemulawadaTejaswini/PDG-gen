Line_8 $$ final ModuleEx newModule = module-->Line_11 $$ newModule.setOption(Module.ELEMENT_TYPE, moduleTypeId)[ FD ]
Line_6 $$ if (module == null) -->Line_9 $$ initModule(module, filePath, new Runnable() [ CD ]
Line_9 $$ initModule(module, filePath, new Runnable() -->Line_11 $$ newModule.setOption(Module.ELEMENT_TYPE, moduleTypeId)[ CD ]
Line_5 $$ ModuleEx module = getModuleByFilePath(filePath)-->Line_9 $$ initModule(module, filePath, new Runnable() [ FD ]
Line_8 $$ final ModuleEx newModule = module-->Line_14 $$ newModule.setOption(option.getKey(), option.getValue())[ FD ]
Line_2 $$ public Module newModule(@NotNull String filePath, @NotNull final String moduleTypeId, @Nullable final Map<String, String> options) -->Line_11 $$ newModule.setOption(Module.ELEMENT_TYPE, moduleTypeId)[ FD ]
Line_2 $$ public Module newModule(@NotNull String filePath, @NotNull final String moduleTypeId, @Nullable final Map<String, String> options) -->Line_4 $$ filePath = FileUtil.toSystemIndependentName(resolveShortWindowsName(filePath))[ FD ]
Line_2 $$ public Module newModule(@NotNull String filePath, @NotNull final String moduleTypeId, @Nullable final Map<String, String> options) -->Line_5 $$ ModuleEx module = getModuleByFilePath(filePath)[ FD ]
Line_2 $$ public Module newModule(@NotNull String filePath, @NotNull final String moduleTypeId, @Nullable final Map<String, String> options) -->Line_5 $$ ModuleEx module = getModuleByFilePath(filePath)[ CD ]
Line_2 $$ public Module newModule(@NotNull String filePath, @NotNull final String moduleTypeId, @Nullable final Map<String, String> options) -->Line_3 $$ assertWritable()[ CD ]
Line_9 $$ initModule(module, filePath, new Runnable() -->Line_12 $$ if (options != null) [ CD ]
Line_5 $$ ModuleEx module = getModuleByFilePath(filePath)-->Line_7 $$ module = createModule(filePath)[ FD ]
Line_5 $$ ModuleEx module = getModuleByFilePath(filePath)-->Line_6 $$ if (module == null) [ FD ]
Line_2 $$ public Module newModule(@NotNull String filePath, @NotNull final String moduleTypeId, @Nullable final Map<String, String> options) -->Line_13 $$ for (Map.Entry<String, String> option : options.entrySet()) [ FD ]
Line_2 $$ public Module newModule(@NotNull String filePath, @NotNull final String moduleTypeId, @Nullable final Map<String, String> options) -->Line_4 $$ filePath = FileUtil.toSystemIndependentName(resolveShortWindowsName(filePath))[ CD ]
Line_2 $$ public Module newModule(@NotNull String filePath, @NotNull final String moduleTypeId, @Nullable final Map<String, String> options) -->Line_20 $$ return module[ CD ]
Line_7 $$ module = createModule(filePath)-->Line_9 $$ initModule(module, filePath, new Runnable() [ FD ]
Line_6 $$ if (module == null) -->Line_7 $$ module = createModule(filePath)[ CD ]
Line_13 $$ for (Map.Entry<String, String> option : options.entrySet()) -->Line_14 $$ newModule.setOption(option.getKey(), option.getValue())[ FD ]
Line_2 $$ public Module newModule(@NotNull String filePath, @NotNull final String moduleTypeId, @Nullable final Map<String, String> options) -->Line_9 $$ initModule(module, filePath, new Runnable() [ FD ]
Line_2 $$ public Module newModule(@NotNull String filePath, @NotNull final String moduleTypeId, @Nullable final Map<String, String> options) -->Line_7 $$ module = createModule(filePath)[ FD ]
Line_2 $$ public Module newModule(@NotNull String filePath, @NotNull final String moduleTypeId, @Nullable final Map<String, String> options) -->Line_6 $$ if (module == null) [ CD ]
Line_6 $$ if (module == null) -->Line_8 $$ final ModuleEx newModule = module[ CD ]
Line_2 $$ public Module newModule(@NotNull String filePath, @NotNull final String moduleTypeId, @Nullable final Map<String, String> options) -->Line_12 $$ if (options != null) [ FD ]
