Line_6 $$ Dictionary<String, Object> properties = new Hashtable()-->Line_9 $$ properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_DISPATCHER, filterDefinition.getDispatchers())[ FD ]
Line_15 $$ for (Entry<String, String> initParametersEntry : initParameters.entrySet()) -->Line_16 $$ String key = initParametersEntry.getKey()[ FD ]
Line_20 $$ FilterExceptionAdapter filterExceptionAdaptor = new FilterExceptionAdapter(filterDefinition.getFilter())-->Line_22 $$ Exception exception = filterExceptionAdaptor.getException()[ FD ]
Line_6 $$ Dictionary<String, Object> properties = new Hashtable()-->Line_11 $$ properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_PATTERN, filterDefinition.getURLPatterns())[ FD ]
Line_15 $$ for (Entry<String, String> initParametersEntry : initParameters.entrySet()) -->Line_17 $$ String value = initParametersEntry.getValue()[ FD ]
Line_6 $$ Dictionary<String, Object> properties = new Hashtable()-->Line_21 $$ ServiceRegistration<Filter> serviceRegistration = _bundleContext.registerService(Filter.class, filterExceptionAdaptor, properties)[ FD ]
Line_5 $$ FilterDefinition filterDefinition = entry.getValue()-->Line_9 $$ properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_DISPATCHER, filterDefinition.getDispatchers())[ FD ]
Line_23 $$ if (exception != null) -->Line_24 $$ serviceRegistration.unregister()[ CD ]
Line_5 $$ FilterDefinition filterDefinition = entry.getValue()-->Line_10 $$ properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_NAME, filterDefinition.getName())[ FD ]
Line_21 $$ ServiceRegistration<Filter> serviceRegistration = _bundleContext.registerService(Filter.class, filterExceptionAdaptor, properties)-->Line_24 $$ serviceRegistration.unregister()[ FD ]
Line_3 $$ Map<String, FilterDefinition> filterDefinitions = _webXMLDefinition.getFilterDefinitions()-->Line_4 $$ for (Map.Entry<String, FilterDefinition> entry : filterDefinitions.entrySet()) [ FD ]
Line_4 $$ for (Map.Entry<String, FilterDefinition> entry : filterDefinitions.entrySet()) -->Line_5 $$ FilterDefinition filterDefinition = entry.getValue()[ FD ]
Line_14 $$ Map<String, String> initParameters = filterDefinition.getInitParameters()-->Line_15 $$ for (Entry<String, String> initParametersEntry : initParameters.entrySet()) [ FD ]
Line_5 $$ FilterDefinition filterDefinition = entry.getValue()-->Line_20 $$ FilterExceptionAdapter filterExceptionAdaptor = new FilterExceptionAdapter(filterDefinition.getFilter())[ FD ]
Line_5 $$ FilterDefinition filterDefinition = entry.getValue()-->Line_14 $$ Map<String, String> initParameters = filterDefinition.getInitParameters()[ FD ]
Line_21 $$ ServiceRegistration<Filter> serviceRegistration = _bundleContext.registerService(Filter.class, filterExceptionAdaptor, properties)-->Line_27 $$ _filterRegistrations.add(serviceRegistration)[ FD ]
Line_5 $$ FilterDefinition filterDefinition = entry.getValue()-->Line_13 $$ properties.put(Constants.SERVICE_RANKING, filterDefinition.getPriority())[ FD ]
Line_6 $$ Dictionary<String, Object> properties = new Hashtable()-->Line_10 $$ properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_NAME, filterDefinition.getName())[ FD ]
Line_6 $$ Dictionary<String, Object> properties = new Hashtable()-->Line_12 $$ properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_SERVLET, filterDefinition.getServletNames())[ FD ]
Line_5 $$ FilterDefinition filterDefinition = entry.getValue()-->Line_12 $$ properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_SERVLET, filterDefinition.getServletNames())[ FD ]
Line_2 $$ protected void initFilters() throws Exception -->Line_3 $$ Map<String, FilterDefinition> filterDefinitions = _webXMLDefinition.getFilterDefinitions()[ CD ]
Line_22 $$ Exception exception = filterExceptionAdaptor.getException()-->Line_23 $$ if (exception != null) [ FD ]
Line_6 $$ Dictionary<String, Object> properties = new Hashtable()-->Line_8 $$ properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_ASYNC_SUPPORTED, filterDefinition.isAsyncSupported())[ FD ]
Line_6 $$ Dictionary<String, Object> properties = new Hashtable()-->Line_13 $$ properties.put(Constants.SERVICE_RANKING, filterDefinition.getPriority())[ FD ]
Line_5 $$ FilterDefinition filterDefinition = entry.getValue()-->Line_8 $$ properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_ASYNC_SUPPORTED, filterDefinition.isAsyncSupported())[ FD ]
Line_5 $$ FilterDefinition filterDefinition = entry.getValue()-->Line_11 $$ properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_PATTERN, filterDefinition.getURLPatterns())[ FD ]
Line_6 $$ Dictionary<String, Object> properties = new Hashtable()-->Line_7 $$ properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_CONTEXT_SELECT, _contextName)[ FD ]
Line_6 $$ Dictionary<String, Object> properties = new Hashtable()-->Line_18 $$ properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_INIT_PARAM_PREFIX + key, value)[ FD ]
Line_17 $$ String value = initParametersEntry.getValue()-->Line_18 $$ properties.put(HttpWhiteboardConstants.HTTP_WHITEBOARD_FILTER_INIT_PARAM_PREFIX + key, value)[ FD ]
Line_20 $$ FilterExceptionAdapter filterExceptionAdaptor = new FilterExceptionAdapter(filterDefinition.getFilter())-->Line_21 $$ ServiceRegistration<Filter> serviceRegistration = _bundleContext.registerService(Filter.class, filterExceptionAdaptor, properties)[ FD ]
