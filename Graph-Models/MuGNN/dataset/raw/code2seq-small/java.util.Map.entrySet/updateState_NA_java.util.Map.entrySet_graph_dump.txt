Line_6 $$ BufferState state = this.state.get()-->Line_10 $$ if (!state.canAddPages()) [ FD ]
Line_14 $$ for (Map.Entry<Integer, Set<NamedBuffer>> entry : partitionToNamedBuffer.entrySet()) -->Line_16 $$ long newMasterSequenceId = entry.getValue().stream().mapToLong(NamedBuffer::<>getSequenceId).min().getAsLong()[ FD ]
Line_13 $$ if (!state.canAddBuffers() && !namedBuffers.isEmpty()) -->Line_19 $$ partitionBuffers.values().forEach(PartitionBuffer::<>dequeuePages)[ CD ]
Line_7 $$ if (state.isTerminal()) -->Line_8 $$ return[ CD ]
Line_14 $$ for (Map.Entry<Integer, Set<NamedBuffer>> entry : partitionToNamedBuffer.entrySet()) -->Line_15 $$ PartitionBuffer partitionBuffer = partitionBuffers.get(entry.getKey())[ FD ]
Line_2 $$ private void updateState() -->Line_3 $$ checkHoldsLock()[ CD ]
Line_16 $$ long newMasterSequenceId = entry.getValue().stream().mapToLong(NamedBuffer::<>getSequenceId).min().getAsLong()-->Line_17 $$ partitionBuffer.advanceSequenceId(newMasterSequenceId)[ FD ]
Line_6 $$ BufferState state = this.state.get()-->Line_7 $$ if (state.isTerminal()) [ FD ]
Line_6 $$ BufferState state = this.state.get()-->Line_13 $$ if (!state.canAddBuffers() && !namedBuffers.isEmpty()) [ FD ]
Line_15 $$ PartitionBuffer partitionBuffer = partitionBuffers.get(entry.getKey())-->Line_17 $$ partitionBuffer.advanceSequenceId(newMasterSequenceId)[ FD ]
Line_10 $$ if (!state.canAddPages()) -->Line_11 $$ partitionBuffers.values().forEach(PartitionBuffer::<>clearQueue)[ CD ]
