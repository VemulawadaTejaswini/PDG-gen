Line_11 $$ BlockBuilder subBlockBuilder = blockBuilder.beginBlockEntry()-->Line_23 $$ appendToBlockBuilder(type.getTypeParameters().get(field), subElement, subBlockBuilder)[ FD ]
Line_2 $$ public static void appendToBlockBuilder(Type type, Object element, BlockBuilder blockBuilder) -->Line_5 $$ blockBuilder.appendNull()[ FD ]
Line_2 $$ public static void appendToBlockBuilder(Type type, Object element, BlockBuilder blockBuilder) -->Line_34 $$ appendToBlockBuilder(type.getTypeParameters().get(1), entry.getValue(), subBlockBuilder)[ FD ]
Line_52 $$ long daysSinceEpochInLocalZone = ((Date) element).toLocalDate().toEpochDay()-->Line_54 $$ type.writeLong(blockBuilder, daysSinceEpochInLocalZone)[ FD ]
Line_2 $$ public static void appendToBlockBuilder(Type type, Object element, BlockBuilder blockBuilder) -->Line_20 $$ BlockBuilder subBlockBuilder = blockBuilder.beginBlockEntry()[ FD ]
Line_57 $$ Instant instant = ((Timestamp) element).toInstant()-->Line_59 $$ int nano = instant.getNano()[ FD ]
Line_2 $$ public static void appendToBlockBuilder(Type type, Object element, BlockBuilder blockBuilder) -->Line_40 $$ type.writeBoolean(blockBuilder, (Boolean) element)[ FD ]
Line_21 $$ int field = 0-->Line_23 $$ appendToBlockBuilder(type.getTypeParameters().get(field), subElement, subBlockBuilder)[ FD ]
Line_2 $$ public static void appendToBlockBuilder(Type type, Object element, BlockBuilder blockBuilder) -->Line_31 $$ BlockBuilder subBlockBuilder = blockBuilder.beginBlockEntry()[ FD ]
Line_2 $$ public static void appendToBlockBuilder(Type type, Object element, BlockBuilder blockBuilder) -->Line_4 $$ if (element == null) [ FD ]
Line_2 $$ public static void appendToBlockBuilder(Type type, Object element, BlockBuilder blockBuilder) -->Line_46 $$ type.writeDouble(blockBuilder, ((Number) element).doubleValue())[ FD ]
Line_52 $$ long daysSinceEpochInLocalZone = ((Date) element).toLocalDate().toEpochDay()-->Line_53 $$ assertEquals(daysSinceEpochInLocalZone, DateWritable.dateToDays((Date) element))[ FD ]
Line_12 $$ for (Object subElement : (Iterable<?>) element) -->Line_23 $$ appendToBlockBuilder(type.getTypeParameters().get(field), subElement, subBlockBuilder)[ FD ]
Line_32 $$ for (Entry<?, ?> entry : ((Map<?, ?>) element).entrySet()) -->Line_33 $$ appendToBlockBuilder(type.getTypeParameters().get(0), entry.getKey(), subBlockBuilder)[ FD ]
Line_2 $$ public static void appendToBlockBuilder(Type type, Object element, BlockBuilder blockBuilder) -->Line_61 $$ type.writeLong(blockBuilder, epochSecond * 1000 + nano / 1_000_000)[ FD ]
Line_11 $$ BlockBuilder subBlockBuilder = blockBuilder.beginBlockEntry()-->Line_34 $$ appendToBlockBuilder(type.getTypeParameters().get(1), entry.getValue(), subBlockBuilder)[ FD ]
Line_2 $$ public static void appendToBlockBuilder(Type type, Object element, BlockBuilder blockBuilder) -->Line_36 $$ blockBuilder.closeEntry()[ FD ]
Line_21 $$ int field = 0-->Line_24 $$ field++[ FD ]
Line_2 $$ public static void appendToBlockBuilder(Type type, Object element, BlockBuilder blockBuilder) -->Line_23 $$ appendToBlockBuilder(type.getTypeParameters().get(field), subElement, subBlockBuilder)[ FD ]
Line_4 $$ if (element == null) -->Line_6 $$ return[ CD ]
Line_2 $$ public static void appendToBlockBuilder(Type type, Object element, BlockBuilder blockBuilder) -->Line_3 $$ String typeBase = type.getTypeSignature().getBase()[ CD ]
Line_2 $$ public static void appendToBlockBuilder(Type type, Object element, BlockBuilder blockBuilder) -->Line_13 $$ appendToBlockBuilder(type.getTypeParameters().get(0), subElement, subBlockBuilder)[ FD ]
Line_2 $$ public static void appendToBlockBuilder(Type type, Object element, BlockBuilder blockBuilder) -->Line_43 $$ type.writeLong(blockBuilder, ((Number) element).longValue())[ FD ]
Line_2 $$ public static void appendToBlockBuilder(Type type, Object element, BlockBuilder blockBuilder) -->Line_54 $$ type.writeLong(blockBuilder, daysSinceEpochInLocalZone)[ FD ]
Line_4 $$ if (element == null) -->Line_5 $$ blockBuilder.appendNull()[ CD ]
Line_2 $$ public static void appendToBlockBuilder(Type type, Object element, BlockBuilder blockBuilder) -->Line_26 $$ blockBuilder.closeEntry()[ FD ]
Line_32 $$ for (Entry<?, ?> entry : ((Map<?, ?>) element).entrySet()) -->Line_34 $$ appendToBlockBuilder(type.getTypeParameters().get(1), entry.getValue(), subBlockBuilder)[ FD ]
Line_11 $$ BlockBuilder subBlockBuilder = blockBuilder.beginBlockEntry()-->Line_33 $$ appendToBlockBuilder(type.getTypeParameters().get(0), entry.getKey(), subBlockBuilder)[ FD ]
Line_2 $$ public static void appendToBlockBuilder(Type type, Object element, BlockBuilder blockBuilder) -->Line_4 $$ if (element == null) [ CD ]
Line_57 $$ Instant instant = ((Timestamp) element).toInstant()-->Line_58 $$ long epochSecond = instant.getEpochSecond()[ FD ]
Line_2 $$ public static void appendToBlockBuilder(Type type, Object element, BlockBuilder blockBuilder) -->Line_3 $$ String typeBase = type.getTypeSignature().getBase()[ FD ]
Line_2 $$ public static void appendToBlockBuilder(Type type, Object element, BlockBuilder blockBuilder) -->Line_49 $$ type.writeSlice(blockBuilder, Slices.utf8Slice(element.toString()))[ FD ]
Line_12 $$ for (Object subElement : (Iterable<?>) element) -->Line_13 $$ appendToBlockBuilder(type.getTypeParameters().get(0), subElement, subBlockBuilder)[ FD ]
Line_11 $$ BlockBuilder subBlockBuilder = blockBuilder.beginBlockEntry()-->Line_13 $$ appendToBlockBuilder(type.getTypeParameters().get(0), subElement, subBlockBuilder)[ FD ]
Line_2 $$ public static void appendToBlockBuilder(Type type, Object element, BlockBuilder blockBuilder) -->Line_15 $$ blockBuilder.closeEntry()[ FD ]
Line_2 $$ public static void appendToBlockBuilder(Type type, Object element, BlockBuilder blockBuilder) -->Line_33 $$ appendToBlockBuilder(type.getTypeParameters().get(0), entry.getKey(), subBlockBuilder)[ FD ]
Line_2 $$ public static void appendToBlockBuilder(Type type, Object element, BlockBuilder blockBuilder) -->Line_11 $$ BlockBuilder subBlockBuilder = blockBuilder.beginBlockEntry()[ FD ]
