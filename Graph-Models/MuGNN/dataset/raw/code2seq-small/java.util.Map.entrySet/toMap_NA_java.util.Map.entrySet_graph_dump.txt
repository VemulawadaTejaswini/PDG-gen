Line_10 $$ BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(keyType, valueType), new BlockBuilderStatus(), map.size() * 2)-->Line_12 $$ appendToBlockBuilder(keyType, entry.getKey(), blockBuilder)[ FD ]
Line_8 $$ Type keyType = ((MapType) mapType).getKeyType()-->Line_10 $$ BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(keyType, valueType), new BlockBuilderStatus(), map.size() * 2)[ FD ]
Line_11 $$ for (Map.Entry<?, ?> entry : map.entrySet()) -->Line_12 $$ appendToBlockBuilder(keyType, entry.getKey(), blockBuilder)[ FD ]
Line_4 $$ Map<?, ?> map = (Map<?, ?>) stackRepresentationToObject(connectorSession, json, mapType)-->Line_11 $$ for (Map.Entry<?, ?> entry : map.entrySet()) [ FD ]
Line_9 $$ Type valueType = ((MapType) mapType).getValueType()-->Line_13 $$ appendToBlockBuilder(valueType, entry.getValue(), blockBuilder)[ FD ]
Line_11 $$ for (Map.Entry<?, ?> entry : map.entrySet()) -->Line_13 $$ appendToBlockBuilder(valueType, entry.getValue(), blockBuilder)[ FD ]
Line_4 $$ Map<?, ?> map = (Map<?, ?>) stackRepresentationToObject(connectorSession, json, mapType)-->Line_10 $$ BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(keyType, valueType), new BlockBuilderStatus(), map.size() * 2)[ FD ]
Line_2 $$ public static Block toMap(Type mapType, ConnectorSession connectorSession, Slice json) -->Line_4 $$ Map<?, ?> map = (Map<?, ?>) stackRepresentationToObject(connectorSession, json, mapType)[ FD ]
Line_10 $$ BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(keyType, valueType), new BlockBuilderStatus(), map.size() * 2)-->Line_15 $$ return blockBuilder.build()[ FD ]
Line_9 $$ Type valueType = ((MapType) mapType).getValueType()-->Line_10 $$ BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(keyType, valueType), new BlockBuilderStatus(), map.size() * 2)[ FD ]
Line_5 $$ if (map == null) -->Line_6 $$ return null[ CD ]
Line_8 $$ Type keyType = ((MapType) mapType).getKeyType()-->Line_12 $$ appendToBlockBuilder(keyType, entry.getKey(), blockBuilder)[ FD ]
Line_10 $$ BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(keyType, valueType), new BlockBuilderStatus(), map.size() * 2)-->Line_13 $$ appendToBlockBuilder(valueType, entry.getValue(), blockBuilder)[ FD ]
Line_4 $$ Map<?, ?> map = (Map<?, ?>) stackRepresentationToObject(connectorSession, json, mapType)-->Line_5 $$ if (map == null) [ FD ]
