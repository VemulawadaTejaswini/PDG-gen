Line_3 $$ OrderEnumerator e = ModuleRootManager.getInstance(myModule).orderEntries()-->Line_6 $$ e.withoutSdk()[ FD ]
Line_2 $$ private void analyze() -->Line_16 $$ final Map<String, List<OrderPath>> urlExplanations = new LinkedHashMap<String, List<OrderPath>>()[ CD ]
Line_21 $$ for (String url : classes.getUrls()) -->Line_23 $$ urlExplanations.put(url, new ArrayList<OrderPath>())[ FD ]
Line_2 $$ private void analyze() -->Line_8 $$ if (myCompile) [ CD ]
Line_18 $$ if (myCompile) -->Line_19 $$ classes.withoutSelfModuleOutput()[ CD ]
Line_26 $$ final Map<OrderEntry, List<OrderPath>> orderExplanations = new LinkedHashMap<OrderEntry, List<OrderPath>>()-->Line_28 $$ for (Map.Entry<OrderEntry, List<OrderPath>> entry : orderExplanations.entrySet()) [ FD ]
Line_17 $$ final OrderRootsEnumerator classes = e.classes()-->Line_21 $$ for (String url : classes.getUrls()) [ FD ]
Line_2 $$ private void analyze() -->Line_13 $$ if (myProduction) [ CD ]
Line_3 $$ OrderEnumerator e = ModuleRootManager.getInstance(myModule).orderEntries()-->Line_17 $$ final OrderRootsEnumerator classes = e.classes()[ FD ]
Line_16 $$ final Map<String, List<OrderPath>> urlExplanations = new LinkedHashMap<String, List<OrderPath>>()-->Line_22 $$ if (!urlExplanations.containsKey(url)) [ FD ]
Line_2 $$ private void analyze() -->Line_5 $$ if (!mySdk) [ CD ]
Line_5 $$ if (!mySdk) -->Line_6 $$ e.withoutSdk()[ CD ]
Line_21 $$ for (String url : classes.getUrls()) -->Line_22 $$ if (!urlExplanations.containsKey(url)) [ FD ]
Line_8 $$ if (myCompile) -->Line_9 $$ e.compileOnly()[ CD ]
Line_3 $$ OrderEnumerator e = ModuleRootManager.getInstance(myModule).orderEntries()-->Line_14 $$ e.productionOnly()[ FD ]
Line_2 $$ private void analyze() -->Line_26 $$ final Map<OrderEntry, List<OrderPath>> orderExplanations = new LinkedHashMap<OrderEntry, List<OrderPath>>()[ CD ]
Line_3 $$ OrderEnumerator e = ModuleRootManager.getInstance(myModule).orderEntries()-->Line_11 $$ e.runtimeOnly()[ FD ]
Line_2 $$ private void analyze() -->Line_27 $$ new PathWalker(urlExplanations, orderExplanations).examine(myModule, 0)[ CD ]
Line_13 $$ if (myProduction) -->Line_14 $$ e.productionOnly()[ CD ]
Line_22 $$ if (!urlExplanations.containsKey(url)) -->Line_23 $$ urlExplanations.put(url, new ArrayList<OrderPath>())[ CD ]
Line_3 $$ OrderEnumerator e = ModuleRootManager.getInstance(myModule).orderEntries()-->Line_9 $$ e.compileOnly()[ FD ]
Line_28 $$ for (Map.Entry<OrderEntry, List<OrderPath>> entry : orderExplanations.entrySet()) -->Line_32 $$ myUrls.add(new UrlExplanation(entry.getKey(), entry.getValue()))[ FD ]
Line_16 $$ final Map<String, List<OrderPath>> urlExplanations = new LinkedHashMap<String, List<OrderPath>>()-->Line_31 $$ for (Map.Entry<String, List<OrderPath>> entry : urlExplanations.entrySet()) [ FD ]
Line_8 $$ if (myCompile) -->Line_11 $$ e.runtimeOnly()[ CD ]
Line_28 $$ for (Map.Entry<OrderEntry, List<OrderPath>> entry : orderExplanations.entrySet()) -->Line_29 $$ myOrderEntries.add(new OrderEntryExplanation(entry.getKey(), entry.getValue()))[ FD ]
Line_17 $$ final OrderRootsEnumerator classes = e.classes()-->Line_19 $$ classes.withoutSelfModuleOutput()[ FD ]
Line_16 $$ final Map<String, List<OrderPath>> urlExplanations = new LinkedHashMap<String, List<OrderPath>>()-->Line_23 $$ urlExplanations.put(url, new ArrayList<OrderPath>())[ FD ]
Line_2 $$ private void analyze() -->Line_4 $$ e.recursively()[ CD ]
Line_3 $$ OrderEnumerator e = ModuleRootManager.getInstance(myModule).orderEntries()-->Line_4 $$ e.recursively()[ FD ]
Line_2 $$ private void analyze() -->Line_18 $$ if (myCompile) [ CD ]
Line_2 $$ private void analyze() -->Line_3 $$ OrderEnumerator e = ModuleRootManager.getInstance(myModule).orderEntries()[ CD ]
Line_2 $$ private void analyze() -->Line_17 $$ final OrderRootsEnumerator classes = e.classes()[ CD ]
