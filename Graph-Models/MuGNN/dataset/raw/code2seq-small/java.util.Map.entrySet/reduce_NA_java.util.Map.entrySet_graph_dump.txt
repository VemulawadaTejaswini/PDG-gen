Line_2 $$ public static List<Suggestion<? extends Entry<? extends Option>>> reduce(Map<String, List<Suggest.Suggestion>> groupedSuggestions) -->Line_4 $$ for (java.util.Map.Entry<String, List<Suggestion>> unmergedResults : groupedSuggestions.entrySet()) [ FD ]
Line_4 $$ for (java.util.Map.Entry<String, List<Suggestion>> unmergedResults : groupedSuggestions.entrySet()) -->Line_5 $$ List<Suggestion> value = unmergedResults.getValue()[ FD ]
Line_6 $$ Suggestion reduce = value.get(0).reduce(value)-->Line_8 $$ reduced.add(reduce)[ FD ]
Line_6 $$ Suggestion reduce = value.get(0).reduce(value)-->Line_7 $$ reduce.trim()[ FD ]
Line_2 $$ public static List<Suggestion<? extends Entry<? extends Option>>> reduce(Map<String, List<Suggest.Suggestion>> groupedSuggestions) -->Line_10 $$ return reduced[ CD ]
Line_2 $$ public static List<Suggestion<? extends Entry<? extends Option>>> reduce(Map<String, List<Suggest.Suggestion>> groupedSuggestions) -->Line_3 $$ List<Suggestion<? extends Entry<? extends Option>>> reduced = new ArrayList(groupedSuggestions.size())[ FD ]
Line_5 $$ List<Suggestion> value = unmergedResults.getValue()-->Line_6 $$ Suggestion reduce = value.get(0).reduce(value)[ FD ]
Line_3 $$ List<Suggestion<? extends Entry<? extends Option>>> reduced = new ArrayList(groupedSuggestions.size())-->Line_8 $$ reduced.add(reduce)[ FD ]
Line_2 $$ public static List<Suggestion<? extends Entry<? extends Option>>> reduce(Map<String, List<Suggest.Suggestion>> groupedSuggestions) -->Line_3 $$ List<Suggestion<? extends Entry<? extends Option>>> reduced = new ArrayList(groupedSuggestions.size())[ CD ]
