Line_14 $$ ServiceContext serviceContext = ServiceContextThreadLocal.popServiceContext()-->Line_24 $$ ServiceContextThreadLocal.pushServiceContext(serviceContext)[ FD ]
Line_12 $$ long companyId = layoutSet.getCompanyId()-->Line_168 $$ Map<String, Boolean> exportPortletControlsMap = ExportImportHelperUtil.getExportPortletControlsMap(companyId, portletId, parameterMap, type)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_76 $$ if (layoutSetBranch != null) [ CD ]
Line_82 $$ Element settingsElement = headerElement.addElement("settings")-->Line_84 $$ settingsElement.addCDATA(layoutSetBranch.getSettings())[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_11 $$ LayoutSet layoutSet = _layoutSetLocalService.getLayoutSet(portletDataContext.getGroupId(), portletDataContext.isPrivateLayout())[ CD ]
Line_32 $$ Element rootElement = document.addElement("root")-->Line_34 $$ Element headerElement = rootElement.addElement("header")[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_162 $$ portletDataContext.setPlid(plid)[ FD ]
Line_14 $$ ServiceContext serviceContext = ServiceContextThreadLocal.popServiceContext()-->Line_18 $$ serviceContext.setCompanyId(companyId)[ FD ]
Line_94 $$ for (Portlet portlet : ExportImportHelperUtil.getDataSiteLevelPortlets(companyId)) -->Line_95 $$ String portletId = portlet.getRootPortletId()[ FD ]
Line_34 $$ Element headerElement = rootElement.addElement("header")-->Line_44 $$ headerElement.addAttribute("group-id", String.valueOf(portletDataContext.getGroupId()))[ FD ]
Line_34 $$ Element headerElement = rootElement.addElement("header")-->Line_52 $$ headerElement.addAttribute("type-uuid", layoutPrototype.getUuid())[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_40 $$ headerElement.addAttribute("end-date", String.valueOf(portletDataContext.getEndDate()))[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_33 $$ portletDataContext.setExportDataRootElement(rootElement)[ CD ]
Line_68 $$ String logoPath = ExportImportPathUtil.getRootPath(portletDataContext)-->Line_71 $$ portletDataContext.addZipEntry(logoPath, image.getTextObj())[ FD ]
Line_99 $$ if (BackgroundTaskThreadLocal.hasBackgroundTask()) -->Line_100 $$ PortletDataHandler portletDataHandler = portlet.getPortletDataHandlerInstance()[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_18 $$ serviceContext.setCompanyId(companyId)[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_123 $$ portletDataContext.addDeletionSystemEventStagedModelTypes(new StagedModelType(Layout.class))[ FD ]
Line_137 $$ for (Map.Entry<String, Object[]> portletIdsEntry : portletIds.entrySet()) -->Line_151 $$ plid = (Long) portletIdsEntry.getValue()[1][ FD ]
Line_146 $$ plid = (Long) portletIdsEntry.getValue()[1]-->Line_162 $$ portletDataContext.setPlid(plid)[ FD ]
Line_158 $$ layout = new LayoutImpl()-->Line_171 $$ _portletExportController.exportPortlet(portletDataContext, layout, portletsElement, exportPermissions, exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS), exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_DATA), exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_SETUP), exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_USER_PREFERENCES))[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_58 $$ headerElement.addAttribute("type", type)[ CD ]
Line_50 $$ type = "layout-prototype"-->Line_54 $$ type = "layout-set-prototype"[ FD ]
Line_140 $$ long plid = LayoutConstants.DEFAULT_PLID-->Line_163 $$ portletDataContext.setOldPlid(plid)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_123 $$ portletDataContext.addDeletionSystemEventStagedModelTypes(new StagedModelType(Layout.class))[ CD ]
Line_95 $$ String portletId = portlet.getRootPortletId()-->Line_96 $$ if (ExportImportThreadLocal.isStagingInProcess() && !group.isStagedPortlet(portletId)) [ FD ]
Line_32 $$ Element rootElement = document.addElement("root")-->Line_135 $$ Element servicesElement = rootElement.addElement("services")[ FD ]
Line_47 $$ Group group = layoutSet.getGroup()-->Line_91 $$ if (group.isStagingGroup()) [ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_183 $$ _deletionSystemEventExporter.exportDeletionSystemEvents(portletDataContext)[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_75 $$ portletDataContext.setMissingReferencesElement(missingReferencesElement)[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_46 $$ headerElement.addAttribute("private-layout", String.valueOf(portletDataContext.isPrivateLayout()))[ CD ]
Line_16 $$ serviceContext = new ServiceContext()-->Line_19 $$ serviceContext.setSignedIn(false)[ FD ]
Line_89 $$ Map<String, Object[]> portletIds = new LinkedHashMap()-->Line_116 $$ getLayoutPortlets(portletDataContext, layoutIds, portletIds, layout)[ FD ]
Line_144 $$ if (portletObjects.length == 4) -->Line_150 $$ portletId = (String) portletIdsEntry.getValue()[0][ CD ]
Line_158 $$ layout = new LayoutImpl()-->Line_159 $$ layout.setCompanyId(companyId)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_32 $$ Element rootElement = document.addElement("root")[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_8 $$ if (_log.isDebugEnabled()) [ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_191 $$ boolean updateLastPublishDate = MapUtil.getBoolean(portletDataContext.getParameterMap(), PortletDataHandlerKeys.UPDATE_LAST_PUBLISH_DATE)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_46 $$ headerElement.addAttribute("private-layout", String.valueOf(portletDataContext.isPrivateLayout()))[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_185 $$ _permissionExporter.exportPortletDataPermissions(portletDataContext)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_181 $$ _portletExportController.exportExpandoTables(portletDataContext)[ CD ]
Line_137 $$ for (Map.Entry<String, Object[]> portletIdsEntry : portletIds.entrySet()) -->Line_154 $$ scopeLayoutUuid = (String) portletIdsEntry.getValue()[4][ FD ]
Line_3 $$ Map<String, String[]> parameterMap = portletDataContext.getParameterMap()-->Line_4 $$ boolean exportIgnoreLastPublishDate = MapUtil.getBoolean(parameterMap, PortletDataHandlerKeys.IGNORE_LAST_PUBLISH_DATE)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_81 $$ if (exportLayoutSetSettings) [ CD ]
Line_140 $$ long plid = LayoutConstants.DEFAULT_PLID-->Line_151 $$ plid = (Long) portletIdsEntry.getValue()[1][ FD ]
Line_53 $$ if (group.isLayoutSetPrototype()) -->Line_54 $$ type = "layout-set-prototype"[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_13 $$ long defaultUserId = _userLocalService.getDefaultUserId(companyId)[ CD ]
Line_62 $$ if (layoutSetBranch != null) -->Line_65 $$ image = _imageLocalService.getImage(layoutSet.getLogoId())[ CD ]
Line_144 $$ if (portletObjects.length == 4) -->Line_153 $$ scopeType = (String) portletIdsEntry.getValue()[3][ CD ]
Line_31 $$ Document document = SAXReaderUtil.createDocument()-->Line_195 $$ portletDataContext.addZipEntry("/manifest.xml", document.formattedString())[ FD ]
Line_137 $$ for (Map.Entry<String, Object[]> portletIdsEntry : portletIds.entrySet()) -->Line_146 $$ plid = (Long) portletIdsEntry.getValue()[1][ FD ]
Line_140 $$ long plid = LayoutConstants.DEFAULT_PLID-->Line_156 $$ Layout layout = _layoutLocalService.fetchLayout(plid)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_180 $$ _portletExportController.exportAssetLinks(portletDataContext)[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_35 $$ headerElement.addAttribute("available-locales", StringUtil.merge(LanguageUtil.getAvailableLocales(portletDataContext.getScopeGroupId())))[ FD ]
Line_168 $$ Map<String, Boolean> exportPortletControlsMap = ExportImportHelperUtil.getExportPortletControlsMap(companyId, portletId, parameterMap, type)-->Line_171 $$ _portletExportController.exportPortlet(portletDataContext, layout, portletsElement, exportPermissions, exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS), exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_DATA), exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_SETUP), exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_USER_PREFERENCES))[ FD ]
Line_16 $$ serviceContext = new ServiceContext()-->Line_21 $$ serviceContext.setAttribute("exporting", Boolean.TRUE)[ FD ]
Line_95 $$ String portletId = portlet.getRootPortletId()-->Line_150 $$ portletId = (String) portletIdsEntry.getValue()[0][ FD ]
Line_95 $$ String portletId = portlet.getRootPortletId()-->Line_168 $$ Map<String, Boolean> exportPortletControlsMap = ExportImportHelperUtil.getExportPortletControlsMap(companyId, portletId, parameterMap, type)[ FD ]
Line_146 $$ plid = (Long) portletIdsEntry.getValue()[1]-->Line_163 $$ portletDataContext.setOldPlid(plid)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_90 $$ List<Layout> layouts = _layoutLocalService.getLayouts(portletDataContext.getGroupId(), portletDataContext.isPrivateLayout())[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_171 $$ _portletExportController.exportPortlet(portletDataContext, layout, portletsElement, exportPermissions, exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS), exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_DATA), exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_SETUP), exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_USER_PREFERENCES))[ FD ]
Line_83 $$ if (layoutSetBranch != null) -->Line_86 $$ settingsElement.addCDATA(layoutSet.getSettings())[ CD ]
Line_54 $$ type = "layout-set-prototype"-->Line_168 $$ Map<String, Boolean> exportPortletControlsMap = ExportImportHelperUtil.getExportPortletControlsMap(companyId, portletId, parameterMap, type)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_71 $$ portletDataContext.addZipEntry(logoPath, image.getTextObj())[ FD ]
Line_95 $$ String portletId = portlet.getRootPortletId()-->Line_103 $$ portletIds.put(PortletPermissionUtil.getPrimaryKey(0, portletId), new Object[] [ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_43 $$ headerElement.addAttribute("company-group-id", String.valueOf(portletDataContext.getCompanyGroupId()))[ FD ]
Line_107 $$ for (Layout layout : layouts) -->Line_116 $$ getLayoutPortlets(portletDataContext, layoutIds, portletIds, layout)[ FD ]
Line_53 $$ if (group.isLayoutSetPrototype()) -->Line_56 $$ headerElement.addAttribute("type-uuid", layoutSetPrototype.getUuid())[ CD ]
Line_49 $$ if (group.isLayoutPrototype()) -->Line_51 $$ LayoutPrototype layoutPrototype = _layoutPrototypeLocalService.getLayoutPrototype(group.getClassPK())[ CD ]
Line_16 $$ serviceContext = new ServiceContext()-->Line_23 $$ serviceContext.setAttribute("layoutSetBranchId", layoutSetBranchId)[ FD ]
Line_55 $$ LayoutSetPrototype layoutSetPrototype = _layoutSetPrototypeLocalService.getLayoutSetPrototype(group.getClassPK())-->Line_129 $$ layoutsElement.addAttribute("layout-set-prototype-name", layoutSetPrototype.getName(LocaleUtil.getDefault()))[ FD ]
Line_53 $$ if (group.isLayoutSetPrototype()) -->Line_55 $$ LayoutSetPrototype layoutSetPrototype = _layoutSetPrototypeLocalService.getLayoutSetPrototype(group.getClassPK())[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_179 $$ portletDataContext.setScopeGroupId(previousScopeGroupId)[ CD ]
Line_38 $$ if (portletDataContext.hasDateRange()) -->Line_40 $$ headerElement.addAttribute("end-date", String.valueOf(portletDataContext.getEndDate()))[ CD ]
Line_11 $$ LayoutSet layoutSet = _layoutSetLocalService.getLayoutSet(portletDataContext.getGroupId(), portletDataContext.isPrivateLayout())-->Line_125 $$ String layoutSetPrototypeUuid = layoutSet.getLayoutSetPrototypeUuid()[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_4 $$ boolean exportIgnoreLastPublishDate = MapUtil.getBoolean(parameterMap, PortletDataHandlerKeys.IGNORE_LAST_PUBLISH_DATE)[ CD ]
Line_49 $$ if (group.isLayoutPrototype()) -->Line_52 $$ headerElement.addAttribute("type-uuid", layoutPrototype.getUuid())[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_101 $$ portletDataHandler.prepareManifestSummary(portletDataContext)[ FD ]
Line_61 $$ Image image = null-->Line_71 $$ portletDataContext.addZipEntry(logoPath, image.getTextObj())[ FD ]
Line_126 $$ if (Validator.isNotNull(layoutSetPrototypeUuid)) -->Line_127 $$ LayoutSetPrototype layoutSetPrototype = _layoutSetPrototypeLocalService.getLayoutSetPrototypeByUuidAndCompanyId(layoutSetPrototypeUuid, companyId)[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_24 $$ ServiceContextThreadLocal.pushServiceContext(serviceContext)[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_5 $$ boolean exportPermissions = MapUtil.getBoolean(parameterMap, PortletDataHandlerKeys.PERMISSIONS)[ CD ]
Line_61 $$ Image image = null-->Line_65 $$ image = _imageLocalService.getImage(layoutSet.getLogoId())[ FD ]
Line_59 $$ LayoutSetBranch layoutSetBranch = _layoutSetBranchLocalService.fetchLayoutSetBranch(layoutSetBranchId)-->Line_77 $$ _themeExporter.exportTheme(portletDataContext, layoutSetBranch)[ FD ]
Line_125 $$ String layoutSetPrototypeUuid = layoutSet.getLayoutSetPrototypeUuid()-->Line_127 $$ LayoutSetPrototype layoutSetPrototype = _layoutSetPrototypeLocalService.getLayoutSetPrototypeByUuidAndCompanyId(layoutSetPrototypeUuid, companyId)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_21 $$ serviceContext.setAttribute("exporting", Boolean.TRUE)[ CD ]
Line_151 $$ plid = (Long) portletIdsEntry.getValue()[1]-->Line_162 $$ portletDataContext.setPlid(plid)[ FD ]
Line_119 $$ ManifestSummary manifestSummary = portletDataContext.getManifestSummary()-->Line_121 $$ manifestSummary.resetCounters()[ FD ]
Line_12 $$ long companyId = layoutSet.getCompanyId()-->Line_94 $$ for (Portlet portlet : ExportImportHelperUtil.getDataSiteLevelPortlets(companyId)) [ FD ]
Line_14 $$ ServiceContext serviceContext = ServiceContextThreadLocal.popServiceContext()-->Line_20 $$ serviceContext.setUserId(defaultUserId)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_33 $$ portletDataContext.setExportDataRootElement(rootElement)[ FD ]
Line_48 $$ String type = "layout-set"-->Line_58 $$ headerElement.addAttribute("type", type)[ FD ]
Line_153 $$ scopeType = (String) portletIdsEntry.getValue()[3]-->Line_166 $$ portletDataContext.setScopeType(scopeType)[ FD ]
Line_65 $$ image = _imageLocalService.getImage(layoutSet.getLogoId())-->Line_71 $$ portletDataContext.addZipEntry(logoPath, image.getTextObj())[ FD ]
Line_49 $$ if (group.isLayoutPrototype()) -->Line_53 $$ if (group.isLayoutSetPrototype()) [ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_182 $$ _portletExportController.exportLocks(portletDataContext)[ CD ]
Line_34 $$ Element headerElement = rootElement.addElement("header")-->Line_42 $$ headerElement.addAttribute("company-id", String.valueOf(portletDataContext.getCompanyId()))[ FD ]
Line_151 $$ plid = (Long) portletIdsEntry.getValue()[1]-->Line_156 $$ Layout layout = _layoutLocalService.fetchLayout(plid)[ FD ]
Line_140 $$ long plid = LayoutConstants.DEFAULT_PLID-->Line_146 $$ plid = (Long) portletIdsEntry.getValue()[1][ FD ]
Line_134 $$ Element portletsElement = rootElement.addElement("portlets")-->Line_171 $$ _portletExportController.exportPortlet(portletDataContext, layout, portletsElement, exportPermissions, exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS), exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_DATA), exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_SETUP), exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_USER_PREFERENCES))[ FD ]
Line_192 $$ if (ExportImportThreadLocal.isStagingInProcess() && updateLastPublishDate) -->Line_193 $$ ExportImportProcessCallbackRegistryUtil.registerCallback(new UpdateLayoutSetLastPublishDateCallable(portletDataContext.getDateRange(), portletDataContext.getGroupId(), portletDataContext.isPrivateLayout()))[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_125 $$ String layoutSetPrototypeUuid = layoutSet.getLayoutSetPrototypeUuid()[ CD ]
Line_148 $$ scopeLayoutUuid = (String) portletIdsEntry.getValue()[3]-->Line_154 $$ scopeLayoutUuid = (String) portletIdsEntry.getValue()[4][ FD ]
Line_34 $$ Element headerElement = rootElement.addElement("header")-->Line_56 $$ headerElement.addAttribute("type-uuid", layoutSetPrototype.getUuid())[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_163 $$ portletDataContext.setOldPlid(plid)[ FD ]
Line_144 $$ if (portletObjects.length == 4) -->Line_151 $$ plid = (Long) portletIdsEntry.getValue()[1][ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_196 $$ ZipWriter zipWriter = portletDataContext.getZipWriter()[ FD ]
Line_94 $$ for (Portlet portlet : ExportImportHelperUtil.getDataSiteLevelPortlets(companyId)) -->Line_112 $$ portletIds.put(PortletPermissionUtil.getPrimaryKey(layout.getPlid(), portlet.getPortletId()), new Object[] [ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_175 $$ _exportImportLifecycleManager.fireExportImportLifecycleEvent(EVENT_PORTLET_EXPORT_FAILED, getProcessFlag(), PortletDataContextFactoryUtil.clonePortletDataContext(portletDataContext), t)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_15 $$ if (serviceContext == null) [ CD ]
Line_107 $$ for (Layout layout : layouts) -->Line_159 $$ layout.setCompanyId(companyId)[ FD ]
Line_125 $$ String layoutSetPrototypeUuid = layoutSet.getLayoutSetPrototypeUuid()-->Line_126 $$ if (Validator.isNotNull(layoutSetPrototypeUuid)) [ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_12 $$ long companyId = layoutSet.getCompanyId()[ CD ]
Line_51 $$ LayoutPrototype layoutPrototype = _layoutPrototypeLocalService.getLayoutPrototype(group.getClassPK())-->Line_52 $$ headerElement.addAttribute("type-uuid", layoutPrototype.getUuid())[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_166 $$ portletDataContext.setScopeType(scopeType)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_124 $$ Element layoutsElement = portletDataContext.getExportDataGroupElement(Layout.class)[ FD ]
Line_196 $$ ZipWriter zipWriter = portletDataContext.getZipWriter()-->Line_197 $$ return zipWriter.getFile()[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_14 $$ ServiceContext serviceContext = ServiceContextThreadLocal.popServiceContext()[ CD ]
Line_11 $$ LayoutSet layoutSet = _layoutSetLocalService.getLayoutSet(portletDataContext.getGroupId(), portletDataContext.isPrivateLayout())-->Line_65 $$ image = _imageLocalService.getImage(layoutSet.getLogoId())[ FD ]
Line_22 $$ long layoutSetBranchId = MapUtil.getLong(parameterMap, "layoutSetBranchId")-->Line_59 $$ LayoutSetBranch layoutSetBranch = _layoutSetBranchLocalService.fetchLayoutSetBranch(layoutSetBranchId)[ FD ]
Line_67 $$ if ((image != null) && (image.getTextObj() != null)) -->Line_69 $$ logoPath += "/logo"[ CD ]
Line_69 $$ logoPath += "/logo"-->Line_70 $$ headerElement.addAttribute("logo-path", logoPath)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_60 $$ if (exportLogo) [ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_132 $$ exportLayout(portletDataContext, layoutIds, layout)[ FD ]
Line_146 $$ plid = (Long) portletIdsEntry.getValue()[1]-->Line_156 $$ Layout layout = _layoutLocalService.fetchLayout(plid)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_118 $$ if (BackgroundTaskThreadLocal.hasBackgroundTask()) [ CD ]
Line_34 $$ Element headerElement = rootElement.addElement("header")-->Line_58 $$ headerElement.addAttribute("type", type)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_89 $$ Map<String, Object[]> portletIds = new LinkedHashMap()[ CD ]
Line_3 $$ Map<String, String[]> parameterMap = portletDataContext.getParameterMap()-->Line_6 $$ boolean exportLogo = MapUtil.getBoolean(parameterMap, PortletDataHandlerKeys.LOGO)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_11 $$ LayoutSet layoutSet = _layoutSetLocalService.getLayoutSet(portletDataContext.getGroupId(), portletDataContext.isPrivateLayout())[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_184 $$ if (exportPermissions) [ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_135 $$ Element servicesElement = rootElement.addElement("services")[ CD ]
Line_11 $$ LayoutSet layoutSet = _layoutSetLocalService.getLayoutSet(portletDataContext.getGroupId(), portletDataContext.isPrivateLayout())-->Line_79 $$ _themeExporter.exportTheme(portletDataContext, layoutSet)[ FD ]
Line_29 $$ StopWatch stopWatch = new StopWatch()-->Line_30 $$ stopWatch.start()[ FD ]
Line_118 $$ if (BackgroundTaskThreadLocal.hasBackgroundTask()) -->Line_120 $$ PortletDataHandlerStatusMessageSenderUtil.sendStatusMessage("layout", ArrayUtil.toStringArray(portletIds.keySet()), manifestSummary)[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_182 $$ _portletExportController.exportLocks(portletDataContext)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_167 $$ portletDataContext.setScopeLayoutUuid(scopeLayoutUuid)[ FD ]
Line_111 $$ Group scopeGroup = layout.getScopeGroup()-->Line_112 $$ portletIds.put(PortletPermissionUtil.getPrimaryKey(layout.getPlid(), portlet.getPortletId()), new Object[] [ FD ]
Line_34 $$ Element headerElement = rootElement.addElement("header")-->Line_70 $$ headerElement.addAttribute("logo-path", logoPath)[ FD ]
Line_16 $$ serviceContext = new ServiceContext()-->Line_18 $$ serviceContext.setCompanyId(companyId)[ FD ]
Line_147 $$ scopeGroupId = (Long) portletIdsEntry.getValue()[2]-->Line_165 $$ portletDataContext.setScopeGroupId(scopeGroupId)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_68 $$ String logoPath = ExportImportPathUtil.getRootPath(portletDataContext)[ FD ]
Line_107 $$ for (Layout layout : layouts) -->Line_160 $$ layout.setGroupId(portletDataContext.getGroupId())[ FD ]
Line_3 $$ Map<String, String[]> parameterMap = portletDataContext.getParameterMap()-->Line_22 $$ long layoutSetBranchId = MapUtil.getLong(parameterMap, "layoutSetBranchId")[ FD ]
Line_47 $$ Group group = layoutSet.getGroup()-->Line_53 $$ if (group.isLayoutSetPrototype()) [ FD ]
Line_14 $$ ServiceContext serviceContext = ServiceContextThreadLocal.popServiceContext()-->Line_16 $$ serviceContext = new ServiceContext()[ FD ]
Line_60 $$ if (exportLogo) -->Line_67 $$ if ((image != null) && (image.getTextObj() != null)) [ CD ]
Line_32 $$ Element rootElement = document.addElement("root")-->Line_74 $$ Element missingReferencesElement = rootElement.addElement("missing-references")[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_29 $$ StopWatch stopWatch = new StopWatch()[ CD ]
Line_137 $$ for (Map.Entry<String, Object[]> portletIdsEntry : portletIds.entrySet()) -->Line_152 $$ scopeGroupId = (Long) portletIdsEntry.getValue()[2][ FD ]
Line_107 $$ for (Layout layout : layouts) -->Line_171 $$ _portletExportController.exportPortlet(portletDataContext, layout, portletsElement, exportPermissions, exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS), exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_DATA), exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_SETUP), exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_USER_PREFERENCES))[ FD ]
Line_92 $$ group = group.getLiveGroup()-->Line_96 $$ if (ExportImportThreadLocal.isStagingInProcess() && !group.isStagedPortlet(portletId)) [ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_172 $$ _portletExportController.exportService(portletDataContext, servicesElement, exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_SETUP))[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_191 $$ boolean updateLastPublishDate = MapUtil.getBoolean(portletDataContext.getParameterMap(), PortletDataHandlerKeys.UPDATE_LAST_PUBLISH_DATE)[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_25 $$ if (exportIgnoreLastPublishDate) [ CD ]
Line_48 $$ String type = "layout-set"-->Line_54 $$ type = "layout-set-prototype"[ FD ]
Line_124 $$ Element layoutsElement = portletDataContext.getExportDataGroupElement(Layout.class)-->Line_128 $$ layoutsElement.addAttribute("layout-set-prototype-uuid", layoutSetPrototypeUuid)[ FD ]
Line_142 $$ String scopeType = StringPool.BLANK-->Line_153 $$ scopeType = (String) portletIdsEntry.getValue()[3][ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_77 $$ _themeExporter.exportTheme(portletDataContext, layoutSetBranch)[ FD ]
Line_16 $$ serviceContext = new ServiceContext()-->Line_24 $$ ServiceContextThreadLocal.pushServiceContext(serviceContext)[ FD ]
Line_62 $$ if (layoutSetBranch != null) -->Line_63 $$ image = _imageLocalService.getImage(layoutSetBranch.getLogoId())[ CD ]
Line_94 $$ for (Portlet portlet : ExportImportHelperUtil.getDataSiteLevelPortlets(companyId)) -->Line_100 $$ PortletDataHandler portletDataHandler = portlet.getPortletDataHandlerInstance()[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_183 $$ _deletionSystemEventExporter.exportDeletionSystemEvents(portletDataContext)[ FD ]
Line_59 $$ LayoutSetBranch layoutSetBranch = _layoutSetBranchLocalService.fetchLayoutSetBranch(layoutSetBranchId)-->Line_76 $$ if (layoutSetBranch != null) [ FD ]
Line_137 $$ for (Map.Entry<String, Object[]> portletIdsEntry : portletIds.entrySet()) -->Line_150 $$ portletId = (String) portletIdsEntry.getValue()[0][ FD ]
Line_61 $$ Image image = null-->Line_63 $$ image = _imageLocalService.getImage(layoutSetBranch.getLogoId())[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_38 $$ if (portletDataContext.hasDateRange()) [ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_20 $$ serviceContext.setUserId(defaultUserId)[ CD ]
Line_55 $$ LayoutSetPrototype layoutSetPrototype = _layoutSetPrototypeLocalService.getLayoutSetPrototype(group.getClassPK())-->Line_56 $$ headerElement.addAttribute("type-uuid", layoutSetPrototype.getUuid())[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_192 $$ if (ExportImportThreadLocal.isStagingInProcess() && updateLastPublishDate) [ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_49 $$ if (group.isLayoutPrototype()) [ CD ]
Line_5 $$ boolean exportPermissions = MapUtil.getBoolean(parameterMap, PortletDataHandlerKeys.PERMISSIONS)-->Line_171 $$ _portletExportController.exportPortlet(portletDataContext, layout, portletsElement, exportPermissions, exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_ARCHIVED_SETUPS), exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_DATA), exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_SETUP), exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_USER_PREFERENCES))[ FD ]
Line_107 $$ for (Layout layout : layouts) -->Line_108 $$ if (!ArrayUtil.contains(layoutIds, layout.getLayoutId()) || !layout.isTypePortlet() || !layout.hasScopeGroup()) [ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_170 $$ _exportImportLifecycleManager.fireExportImportLifecycleEvent(EVENT_PORTLET_EXPORT_STARTED, getProcessFlag(), PortletDataContextFactoryUtil.clonePortletDataContext(portletDataContext))[ FD ]
Line_13 $$ long defaultUserId = _userLocalService.getDefaultUserId(companyId)-->Line_20 $$ serviceContext.setUserId(defaultUserId)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_188 $$ if (_log.isInfoEnabled()) [ CD ]
Line_34 $$ Element headerElement = rootElement.addElement("header")-->Line_40 $$ headerElement.addAttribute("end-date", String.valueOf(portletDataContext.getEndDate()))[ FD ]
Line_14 $$ ServiceContext serviceContext = ServiceContextThreadLocal.popServiceContext()-->Line_19 $$ serviceContext.setSignedIn(false)[ FD ]
Line_68 $$ String logoPath = ExportImportPathUtil.getRootPath(portletDataContext)-->Line_70 $$ headerElement.addAttribute("logo-path", logoPath)[ FD ]
Line_47 $$ Group group = layoutSet.getGroup()-->Line_96 $$ if (ExportImportThreadLocal.isStagingInProcess() && !group.isStagedPortlet(portletId)) [ FD ]
Line_154 $$ scopeLayoutUuid = (String) portletIdsEntry.getValue()[4]-->Line_167 $$ portletDataContext.setScopeLayoutUuid(scopeLayoutUuid)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_126 $$ if (Validator.isNotNull(layoutSetPrototypeUuid)) [ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_136 $$ long previousScopeGroupId = portletDataContext.getScopeGroupId()[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_45 $$ headerElement.addAttribute("user-personal-site-group-id", String.valueOf(portletDataContext.getUserPersonalSiteGroupId()))[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_173 $$ _exportImportLifecycleManager.fireExportImportLifecycleEvent(EVENT_PORTLET_EXPORT_SUCCEEDED, getProcessFlag(), PortletDataContextFactoryUtil.clonePortletDataContext(portletDataContext))[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_38 $$ if (portletDataContext.hasDateRange()) [ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_195 $$ portletDataContext.addZipEntry("/manifest.xml", document.formattedString())[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_48 $$ String type = "layout-set"[ CD ]
Line_68 $$ String logoPath = ExportImportPathUtil.getRootPath(portletDataContext)-->Line_69 $$ logoPath += "/logo"[ FD ]
Line_140 $$ long plid = LayoutConstants.DEFAULT_PLID-->Line_162 $$ portletDataContext.setPlid(plid)[ FD ]
Line_12 $$ long companyId = layoutSet.getCompanyId()-->Line_127 $$ LayoutSetPrototype layoutSetPrototype = _layoutSetPrototypeLocalService.getLayoutSetPrototypeByUuidAndCompanyId(layoutSetPrototypeUuid, companyId)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_136 $$ long previousScopeGroupId = portletDataContext.getScopeGroupId()[ FD ]
Line_60 $$ if (exportLogo) -->Line_61 $$ Image image = null[ CD ]
Line_118 $$ if (BackgroundTaskThreadLocal.hasBackgroundTask()) -->Line_121 $$ manifestSummary.resetCounters()[ CD ]
Line_25 $$ if (exportIgnoreLastPublishDate) -->Line_26 $$ portletDataContext.setEndDate(null)[ CD ]
Line_83 $$ if (layoutSetBranch != null) -->Line_84 $$ settingsElement.addCDATA(layoutSetBranch.getSettings())[ CD ]
Line_25 $$ if (exportIgnoreLastPublishDate) -->Line_27 $$ portletDataContext.setStartDate(null)[ CD ]
Line_143 $$ String scopeLayoutUuid = null-->Line_148 $$ scopeLayoutUuid = (String) portletIdsEntry.getValue()[3][ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_43 $$ headerElement.addAttribute("company-group-id", String.valueOf(portletDataContext.getCompanyGroupId()))[ CD ]
Line_15 $$ if (serviceContext == null) -->Line_16 $$ serviceContext = new ServiceContext()[ CD ]
Line_22 $$ long layoutSetBranchId = MapUtil.getLong(parameterMap, "layoutSetBranchId")-->Line_23 $$ serviceContext.setAttribute("layoutSetBranchId", layoutSetBranchId)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_103 $$ portletIds.put(PortletPermissionUtil.getPrimaryKey(0, portletId), new Object[] [ FD ]
Line_144 $$ if (portletObjects.length == 4) -->Line_148 $$ scopeLayoutUuid = (String) portletIdsEntry.getValue()[3][ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_36 $$ headerElement.addAttribute("build-number", String.valueOf(ReleaseInfo.getBuildNumber()))[ CD ]
Line_14 $$ ServiceContext serviceContext = ServiceContextThreadLocal.popServiceContext()-->Line_15 $$ if (serviceContext == null) [ FD ]
Line_95 $$ String portletId = portlet.getRootPortletId()-->Line_164 $$ portletDataContext.setPortletId(portletId)[ FD ]
Line_3 $$ Map<String, String[]> parameterMap = portletDataContext.getParameterMap()-->Line_7 $$ boolean exportLayoutSetSettings = MapUtil.getBoolean(parameterMap, PortletDataHandlerKeys.LAYOUT_SET_SETTINGS)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_124 $$ Element layoutsElement = portletDataContext.getExportDataGroupElement(Layout.class)[ CD ]
Line_143 $$ String scopeLayoutUuid = null-->Line_167 $$ portletDataContext.setScopeLayoutUuid(scopeLayoutUuid)[ FD ]
Line_47 $$ Group group = layoutSet.getGroup()-->Line_49 $$ if (group.isLayoutPrototype()) [ FD ]
Line_59 $$ LayoutSetBranch layoutSetBranch = _layoutSetBranchLocalService.fetchLayoutSetBranch(layoutSetBranchId)-->Line_83 $$ if (layoutSetBranch != null) [ FD ]
Line_137 $$ for (Map.Entry<String, Object[]> portletIdsEntry : portletIds.entrySet()) -->Line_153 $$ scopeType = (String) portletIdsEntry.getValue()[3][ FD ]
Line_60 $$ if (exportLogo) -->Line_62 $$ if (layoutSetBranch != null) [ CD ]
Line_67 $$ if ((image != null) && (image.getTextObj() != null)) -->Line_71 $$ portletDataContext.addZipEntry(logoPath, image.getTextObj())[ CD ]
Line_12 $$ long companyId = layoutSet.getCompanyId()-->Line_18 $$ serviceContext.setCompanyId(companyId)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_3 $$ Map<String, String[]> parameterMap = portletDataContext.getParameterMap()[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_74 $$ Element missingReferencesElement = rootElement.addElement("missing-references")[ CD ]
Line_158 $$ layout = new LayoutImpl()-->Line_160 $$ layout.setGroupId(portletDataContext.getGroupId())[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_27 $$ portletDataContext.setStartDate(null)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_91 $$ if (group.isStagingGroup()) [ CD ]
Line_191 $$ boolean updateLastPublishDate = MapUtil.getBoolean(portletDataContext.getParameterMap(), PortletDataHandlerKeys.UPDATE_LAST_PUBLISH_DATE)-->Line_192 $$ if (ExportImportThreadLocal.isStagingInProcess() && updateLastPublishDate) [ FD ]
Line_59 $$ LayoutSetBranch layoutSetBranch = _layoutSetBranchLocalService.fetchLayoutSetBranch(layoutSetBranchId)-->Line_84 $$ settingsElement.addCDATA(layoutSetBranch.getSettings())[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_47 $$ Group group = layoutSet.getGroup()[ CD ]
Line_67 $$ if ((image != null) && (image.getTextObj() != null)) -->Line_68 $$ String logoPath = ExportImportPathUtil.getRootPath(portletDataContext)[ CD ]
Line_107 $$ for (Layout layout : layouts) -->Line_111 $$ Group scopeGroup = layout.getScopeGroup()[ FD ]
Line_34 $$ Element headerElement = rootElement.addElement("header")-->Line_37 $$ headerElement.addAttribute("export-date", Time.getRFC822())[ FD ]
Line_144 $$ if (portletObjects.length == 4) -->Line_146 $$ plid = (Long) portletIdsEntry.getValue()[1][ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_44 $$ headerElement.addAttribute("group-id", String.valueOf(portletDataContext.getGroupId()))[ FD ]
Line_89 $$ Map<String, Object[]> portletIds = new LinkedHashMap()-->Line_112 $$ portletIds.put(PortletPermissionUtil.getPrimaryKey(layout.getPlid(), portlet.getPortletId()), new Object[] [ FD ]
Line_11 $$ LayoutSet layoutSet = _layoutSetLocalService.getLayoutSet(portletDataContext.getGroupId(), portletDataContext.isPrivateLayout())-->Line_47 $$ Group group = layoutSet.getGroup()[ FD ]
Line_89 $$ Map<String, Object[]> portletIds = new LinkedHashMap()-->Line_137 $$ for (Map.Entry<String, Object[]> portletIdsEntry : portletIds.entrySet()) [ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_6 $$ boolean exportLogo = MapUtil.getBoolean(parameterMap, PortletDataHandlerKeys.LOGO)[ CD ]
Line_59 $$ LayoutSetBranch layoutSetBranch = _layoutSetBranchLocalService.fetchLayoutSetBranch(layoutSetBranchId)-->Line_63 $$ image = _imageLocalService.getImage(layoutSetBranch.getLogoId())[ FD ]
Line_118 $$ if (BackgroundTaskThreadLocal.hasBackgroundTask()) -->Line_119 $$ ManifestSummary manifestSummary = portletDataContext.getManifestSummary()[ CD ]
Line_107 $$ for (Layout layout : layouts) -->Line_158 $$ layout = new LayoutImpl()[ FD ]
Line_14 $$ ServiceContext serviceContext = ServiceContextThreadLocal.popServiceContext()-->Line_23 $$ serviceContext.setAttribute("layoutSetBranchId", layoutSetBranchId)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_193 $$ ExportImportProcessCallbackRegistryUtil.registerCallback(new UpdateLayoutSetLastPublishDateCallable(portletDataContext.getDateRange(), portletDataContext.getGroupId(), portletDataContext.isPrivateLayout()))[ FD ]
Line_141 $$ long scopeGroupId = 0-->Line_152 $$ scopeGroupId = (Long) portletIdsEntry.getValue()[2][ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_160 $$ layout.setGroupId(portletDataContext.getGroupId())[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_164 $$ portletDataContext.setPortletId(portletId)[ FD ]
Line_99 $$ if (BackgroundTaskThreadLocal.hasBackgroundTask()) -->Line_101 $$ portletDataHandler.prepareManifestSummary(portletDataContext)[ CD ]
Line_143 $$ String scopeLayoutUuid = null-->Line_154 $$ scopeLayoutUuid = (String) portletIdsEntry.getValue()[4][ FD ]
Line_142 $$ String scopeType = StringPool.BLANK-->Line_166 $$ portletDataContext.setScopeType(scopeType)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_116 $$ getLayoutPortlets(portletDataContext, layoutIds, portletIds, layout)[ FD ]
Line_34 $$ Element headerElement = rootElement.addElement("header")-->Line_35 $$ headerElement.addAttribute("available-locales", StringUtil.merge(LanguageUtil.getAvailableLocales(portletDataContext.getScopeGroupId())))[ FD ]
Line_81 $$ if (exportLayoutSetSettings) -->Line_82 $$ Element settingsElement = headerElement.addElement("settings")[ CD ]
Line_168 $$ Map<String, Boolean> exportPortletControlsMap = ExportImportHelperUtil.getExportPortletControlsMap(companyId, portletId, parameterMap, type)-->Line_172 $$ _portletExportController.exportService(portletDataContext, servicesElement, exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_SETUP))[ FD ]
Line_89 $$ Map<String, Object[]> portletIds = new LinkedHashMap()-->Line_120 $$ PortletDataHandlerStatusMessageSenderUtil.sendStatusMessage("layout", ArrayUtil.toStringArray(portletIds.keySet()), manifestSummary)[ FD ]
Line_91 $$ if (group.isStagingGroup()) -->Line_92 $$ group = group.getLiveGroup()[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_19 $$ serviceContext.setSignedIn(false)[ CD ]
Line_119 $$ ManifestSummary manifestSummary = portletDataContext.getManifestSummary()-->Line_120 $$ PortletDataHandlerStatusMessageSenderUtil.sendStatusMessage("layout", ArrayUtil.toStringArray(portletIds.keySet()), manifestSummary)[ FD ]
Line_141 $$ long scopeGroupId = 0-->Line_165 $$ portletDataContext.setScopeGroupId(scopeGroupId)[ FD ]
Line_34 $$ Element headerElement = rootElement.addElement("header")-->Line_36 $$ headerElement.addAttribute("build-number", String.valueOf(ReleaseInfo.getBuildNumber()))[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_165 $$ portletDataContext.setScopeGroupId(scopeGroupId)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_180 $$ _portletExportController.exportAssetLinks(portletDataContext)[ FD ]
Line_12 $$ long companyId = layoutSet.getCompanyId()-->Line_13 $$ long defaultUserId = _userLocalService.getDefaultUserId(companyId)[ FD ]
Line_144 $$ if (portletObjects.length == 4) -->Line_147 $$ scopeGroupId = (Long) portletIdsEntry.getValue()[2][ CD ]
Line_63 $$ image = _imageLocalService.getImage(layoutSetBranch.getLogoId())-->Line_65 $$ image = _imageLocalService.getImage(layoutSet.getLogoId())[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_179 $$ portletDataContext.setScopeGroupId(previousScopeGroupId)[ FD ]
Line_94 $$ for (Portlet portlet : ExportImportHelperUtil.getDataSiteLevelPortlets(companyId)) -->Line_104 $$ if (!portlet.isScopeable()) [ FD ]
Line_65 $$ image = _imageLocalService.getImage(layoutSet.getLogoId())-->Line_67 $$ if ((image != null) && (image.getTextObj() != null)) [ FD ]
Line_107 $$ for (Layout layout : layouts) -->Line_132 $$ exportLayout(portletDataContext, layoutIds, layout)[ FD ]
Line_157 $$ if (layout == null) -->Line_160 $$ layout.setGroupId(portletDataContext.getGroupId())[ CD ]
Line_157 $$ if (layout == null) -->Line_159 $$ layout.setCompanyId(companyId)[ CD ]
Line_47 $$ Group group = layoutSet.getGroup()-->Line_55 $$ LayoutSetPrototype layoutSetPrototype = _layoutSetPrototypeLocalService.getLayoutSetPrototype(group.getClassPK())[ FD ]
Line_3 $$ Map<String, String[]> parameterMap = portletDataContext.getParameterMap()-->Line_5 $$ boolean exportPermissions = MapUtil.getBoolean(parameterMap, PortletDataHandlerKeys.PERMISSIONS)[ FD ]
Line_34 $$ Element headerElement = rootElement.addElement("header")-->Line_45 $$ headerElement.addAttribute("user-personal-site-group-id", String.valueOf(portletDataContext.getUserPersonalSiteGroupId()))[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_45 $$ headerElement.addAttribute("user-personal-site-group-id", String.valueOf(portletDataContext.getUserPersonalSiteGroupId()))[ FD ]
Line_124 $$ Element layoutsElement = portletDataContext.getExportDataGroupElement(Layout.class)-->Line_129 $$ layoutsElement.addAttribute("layout-set-prototype-name", layoutSetPrototype.getName(LocaleUtil.getDefault()))[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_196 $$ ZipWriter zipWriter = portletDataContext.getZipWriter()[ CD ]
Line_34 $$ Element headerElement = rootElement.addElement("header")-->Line_43 $$ headerElement.addAttribute("company-group-id", String.valueOf(portletDataContext.getCompanyGroupId()))[ FD ]
Line_54 $$ type = "layout-set-prototype"-->Line_58 $$ headerElement.addAttribute("type", type)[ FD ]
Line_50 $$ type = "layout-prototype"-->Line_58 $$ headerElement.addAttribute("type", type)[ FD ]
Line_144 $$ if (portletObjects.length == 4) -->Line_152 $$ scopeGroupId = (Long) portletIdsEntry.getValue()[2][ CD ]
Line_89 $$ Map<String, Object[]> portletIds = new LinkedHashMap()-->Line_103 $$ portletIds.put(PortletPermissionUtil.getPrimaryKey(0, portletId), new Object[] [ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_187 $$ ExportImportHelperUtil.writeManifestSummary(document, portletDataContext.getManifestSummary())[ FD ]
Line_11 $$ LayoutSet layoutSet = _layoutSetLocalService.getLayoutSet(portletDataContext.getGroupId(), portletDataContext.isPrivateLayout())-->Line_12 $$ long companyId = layoutSet.getCompanyId()[ FD ]
Line_76 $$ if (layoutSetBranch != null) -->Line_79 $$ _themeExporter.exportTheme(portletDataContext, layoutSet)[ CD ]
Line_144 $$ if (portletObjects.length == 4) -->Line_145 $$ portletId = (String) portletIdsEntry.getValue()[0][ CD ]
Line_34 $$ Element headerElement = rootElement.addElement("header")-->Line_39 $$ headerElement.addAttribute("start-date", String.valueOf(portletDataContext.getStartDate()))[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_42 $$ headerElement.addAttribute("company-id", String.valueOf(portletDataContext.getCompanyId()))[ CD ]
Line_34 $$ Element headerElement = rootElement.addElement("header")-->Line_46 $$ headerElement.addAttribute("private-layout", String.valueOf(portletDataContext.isPrivateLayout()))[ FD ]
Line_100 $$ PortletDataHandler portletDataHandler = portlet.getPortletDataHandlerInstance()-->Line_101 $$ portletDataHandler.prepareManifestSummary(portletDataContext)[ FD ]
Line_137 $$ for (Map.Entry<String, Object[]> portletIdsEntry : portletIds.entrySet()) -->Line_145 $$ portletId = (String) portletIdsEntry.getValue()[0][ FD ]
Line_76 $$ if (layoutSetBranch != null) -->Line_77 $$ _themeExporter.exportTheme(portletDataContext, layoutSetBranch)[ CD ]
Line_82 $$ Element settingsElement = headerElement.addElement("settings")-->Line_86 $$ settingsElement.addCDATA(layoutSet.getSettings())[ FD ]
Line_95 $$ String portletId = portlet.getRootPortletId()-->Line_145 $$ portletId = (String) portletIdsEntry.getValue()[0][ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_42 $$ headerElement.addAttribute("company-id", String.valueOf(portletDataContext.getCompanyId()))[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_7 $$ boolean exportLayoutSetSettings = MapUtil.getBoolean(parameterMap, PortletDataHandlerKeys.LAYOUT_SET_SETTINGS)[ CD ]
Line_81 $$ if (exportLayoutSetSettings) -->Line_83 $$ if (layoutSetBranch != null) [ CD ]
Line_146 $$ plid = (Long) portletIdsEntry.getValue()[1]-->Line_151 $$ plid = (Long) portletIdsEntry.getValue()[1][ FD ]
Line_63 $$ image = _imageLocalService.getImage(layoutSetBranch.getLogoId())-->Line_71 $$ portletDataContext.addZipEntry(logoPath, image.getTextObj())[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_22 $$ long layoutSetBranchId = MapUtil.getLong(parameterMap, "layoutSetBranchId")[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_26 $$ portletDataContext.setEndDate(null)[ FD ]
Line_31 $$ Document document = SAXReaderUtil.createDocument()-->Line_32 $$ Element rootElement = document.addElement("root")[ FD ]
Line_63 $$ image = _imageLocalService.getImage(layoutSetBranch.getLogoId())-->Line_67 $$ if ((image != null) && (image.getTextObj() != null)) [ FD ]
Line_141 $$ long scopeGroupId = 0-->Line_147 $$ scopeGroupId = (Long) portletIdsEntry.getValue()[2][ FD ]
Line_32 $$ Element rootElement = document.addElement("root")-->Line_33 $$ portletDataContext.setExportDataRootElement(rootElement)[ FD ]
Line_107 $$ for (Layout layout : layouts) -->Line_112 $$ portletIds.put(PortletPermissionUtil.getPrimaryKey(layout.getPlid(), portlet.getPortletId()), new Object[] [ FD ]
Line_107 $$ for (Layout layout : layouts) -->Line_157 $$ if (layout == null) [ FD ]
Line_126 $$ if (Validator.isNotNull(layoutSetPrototypeUuid)) -->Line_129 $$ layoutsElement.addAttribute("layout-set-prototype-name", layoutSetPrototype.getName(LocaleUtil.getDefault()))[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_75 $$ portletDataContext.setMissingReferencesElement(missingReferencesElement)[ FD ]
Line_145 $$ portletId = (String) portletIdsEntry.getValue()[0]-->Line_168 $$ Map<String, Boolean> exportPortletControlsMap = ExportImportHelperUtil.getExportPortletControlsMap(companyId, portletId, parameterMap, type)[ FD ]
Line_49 $$ if (group.isLayoutPrototype()) -->Line_50 $$ type = "layout-prototype"[ CD ]
Line_184 $$ if (exportPermissions) -->Line_185 $$ _permissionExporter.exportPortletDataPermissions(portletDataContext)[ CD ]
Line_48 $$ String type = "layout-set"-->Line_50 $$ type = "layout-prototype"[ FD ]
Line_34 $$ Element headerElement = rootElement.addElement("header")-->Line_82 $$ Element settingsElement = headerElement.addElement("settings")[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_181 $$ _portletExportController.exportExpandoTables(portletDataContext)[ FD ]
Line_8 $$ if (_log.isDebugEnabled()) -->Line_9 $$ _log.debug("Export permissions " + exportPermissions)[ CD ]
Line_32 $$ Element rootElement = document.addElement("root")-->Line_134 $$ Element portletsElement = rootElement.addElement("portlets")[ FD ]
Line_148 $$ scopeLayoutUuid = (String) portletIdsEntry.getValue()[3]-->Line_167 $$ portletDataContext.setScopeLayoutUuid(scopeLayoutUuid)[ FD ]
Line_152 $$ scopeGroupId = (Long) portletIdsEntry.getValue()[2]-->Line_165 $$ portletDataContext.setScopeGroupId(scopeGroupId)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_195 $$ portletDataContext.addZipEntry("/manifest.xml", document.formattedString())[ CD ]
Line_38 $$ if (portletDataContext.hasDateRange()) -->Line_39 $$ headerElement.addAttribute("start-date", String.valueOf(portletDataContext.getStartDate()))[ CD ]
Line_50 $$ type = "layout-prototype"-->Line_168 $$ Map<String, Boolean> exportPortletControlsMap = ExportImportHelperUtil.getExportPortletControlsMap(companyId, portletId, parameterMap, type)[ FD ]
Line_135 $$ Element servicesElement = rootElement.addElement("services")-->Line_172 $$ _portletExportController.exportService(portletDataContext, servicesElement, exportPortletControlsMap.get(PortletDataHandlerKeys.PORTLET_SETUP))[ FD ]
Line_145 $$ portletId = (String) portletIdsEntry.getValue()[0]-->Line_150 $$ portletId = (String) portletIdsEntry.getValue()[0][ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_59 $$ LayoutSetBranch layoutSetBranch = _layoutSetBranchLocalService.fetchLayoutSetBranch(layoutSetBranchId)[ CD ]
Line_151 $$ plid = (Long) portletIdsEntry.getValue()[1]-->Line_163 $$ portletDataContext.setOldPlid(plid)[ FD ]
Line_126 $$ if (Validator.isNotNull(layoutSetPrototypeUuid)) -->Line_128 $$ layoutsElement.addAttribute("layout-set-prototype-uuid", layoutSetPrototypeUuid)[ CD ]
Line_125 $$ String layoutSetPrototypeUuid = layoutSet.getLayoutSetPrototypeUuid()-->Line_128 $$ layoutsElement.addAttribute("layout-set-prototype-uuid", layoutSetPrototypeUuid)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_44 $$ headerElement.addAttribute("group-id", String.valueOf(portletDataContext.getGroupId()))[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_35 $$ headerElement.addAttribute("available-locales", StringUtil.merge(LanguageUtil.getAvailableLocales(portletDataContext.getScopeGroupId())))[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_34 $$ Element headerElement = rootElement.addElement("header")[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_134 $$ Element portletsElement = rootElement.addElement("portlets")[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_37 $$ headerElement.addAttribute("export-date", Time.getRFC822())[ CD ]
Line_3 $$ Map<String, String[]> parameterMap = portletDataContext.getParameterMap()-->Line_168 $$ Map<String, Boolean> exportPortletControlsMap = ExportImportHelperUtil.getExportPortletControlsMap(companyId, portletId, parameterMap, type)[ FD ]
Line_48 $$ String type = "layout-set"-->Line_168 $$ Map<String, Boolean> exportPortletControlsMap = ExportImportHelperUtil.getExportPortletControlsMap(companyId, portletId, parameterMap, type)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_30 $$ stopWatch.start()[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_187 $$ ExportImportHelperUtil.writeManifestSummary(document, portletDataContext.getManifestSummary())[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_90 $$ List<Layout> layouts = _layoutLocalService.getLayouts(portletDataContext.getGroupId(), portletDataContext.isPrivateLayout())[ FD ]
Line_59 $$ LayoutSetBranch layoutSetBranch = _layoutSetBranchLocalService.fetchLayoutSetBranch(layoutSetBranchId)-->Line_62 $$ if (layoutSetBranch != null) [ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_39 $$ headerElement.addAttribute("start-date", String.valueOf(portletDataContext.getStartDate()))[ FD ]
Line_137 $$ for (Map.Entry<String, Object[]> portletIdsEntry : portletIds.entrySet()) -->Line_147 $$ scopeGroupId = (Long) portletIdsEntry.getValue()[2][ FD ]
Line_16 $$ serviceContext = new ServiceContext()-->Line_20 $$ serviceContext.setUserId(defaultUserId)[ FD ]
Line_31 $$ Document document = SAXReaderUtil.createDocument()-->Line_187 $$ ExportImportHelperUtil.writeManifestSummary(document, portletDataContext.getManifestSummary())[ FD ]
Line_136 $$ long previousScopeGroupId = portletDataContext.getScopeGroupId()-->Line_179 $$ portletDataContext.setScopeGroupId(previousScopeGroupId)[ FD ]
Line_69 $$ logoPath += "/logo"-->Line_71 $$ portletDataContext.addZipEntry(logoPath, image.getTextObj())[ FD ]
Line_12 $$ long companyId = layoutSet.getCompanyId()-->Line_159 $$ layout.setCompanyId(companyId)[ FD ]
Line_150 $$ portletId = (String) portletIdsEntry.getValue()[0]-->Line_164 $$ portletDataContext.setPortletId(portletId)[ FD ]
Line_150 $$ portletId = (String) portletIdsEntry.getValue()[0]-->Line_168 $$ Map<String, Boolean> exportPortletControlsMap = ExportImportHelperUtil.getExportPortletControlsMap(companyId, portletId, parameterMap, type)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_79 $$ _themeExporter.exportTheme(portletDataContext, layoutSet)[ FD ]
Line_61 $$ Image image = null-->Line_67 $$ if ((image != null) && (image.getTextObj() != null)) [ FD ]
Line_188 $$ if (_log.isInfoEnabled()) -->Line_189 $$ _log.info("Exporting layouts takes " + stopWatch.getTime() + " ms")[ CD ]
Line_67 $$ if ((image != null) && (image.getTextObj() != null)) -->Line_70 $$ headerElement.addAttribute("logo-path", logoPath)[ CD ]
Line_137 $$ for (Map.Entry<String, Object[]> portletIdsEntry : portletIds.entrySet()) -->Line_138 $$ Object[] portletObjects = portletIdsEntry.getValue()[ FD ]
Line_47 $$ Group group = layoutSet.getGroup()-->Line_51 $$ LayoutPrototype layoutPrototype = _layoutPrototypeLocalService.getLayoutPrototype(group.getClassPK())[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_119 $$ ManifestSummary manifestSummary = portletDataContext.getManifestSummary()[ FD ]
Line_29 $$ StopWatch stopWatch = new StopWatch()-->Line_189 $$ _log.info("Exporting layouts takes " + stopWatch.getTime() + " ms")[ FD ]
Line_74 $$ Element missingReferencesElement = rootElement.addElement("missing-references")-->Line_75 $$ portletDataContext.setMissingReferencesElement(missingReferencesElement)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_197 $$ return zipWriter.getFile()[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_23 $$ serviceContext.setAttribute("layoutSetBranchId", layoutSetBranchId)[ CD ]
Line_11 $$ LayoutSet layoutSet = _layoutSetLocalService.getLayoutSet(portletDataContext.getGroupId(), portletDataContext.isPrivateLayout())-->Line_86 $$ settingsElement.addCDATA(layoutSet.getSettings())[ FD ]
Line_157 $$ if (layout == null) -->Line_158 $$ layout = new LayoutImpl()[ CD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_108 $$ if (!ArrayUtil.contains(layoutIds, layout.getLayoutId()) || !layout.isTypePortlet() || !layout.hasScopeGroup()) [ FD ]
Line_144 $$ if (portletObjects.length == 4) -->Line_154 $$ scopeLayoutUuid = (String) portletIdsEntry.getValue()[4][ CD ]
Line_145 $$ portletId = (String) portletIdsEntry.getValue()[0]-->Line_164 $$ portletDataContext.setPortletId(portletId)[ FD ]
Line_47 $$ Group group = layoutSet.getGroup()-->Line_92 $$ group = group.getLiveGroup()[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_31 $$ Document document = SAXReaderUtil.createDocument()[ CD ]
Line_137 $$ for (Map.Entry<String, Object[]> portletIdsEntry : portletIds.entrySet()) -->Line_148 $$ scopeLayoutUuid = (String) portletIdsEntry.getValue()[3][ FD ]
Line_14 $$ ServiceContext serviceContext = ServiceContextThreadLocal.popServiceContext()-->Line_21 $$ serviceContext.setAttribute("exporting", Boolean.TRUE)[ FD ]
Line_2 $$ protected File doExport(PortletDataContext portletDataContext, long[] layoutIds) throws Exception -->Line_3 $$ Map<String, String[]> parameterMap = portletDataContext.getParameterMap()[ FD ]
Line_147 $$ scopeGroupId = (Long) portletIdsEntry.getValue()[2]-->Line_152 $$ scopeGroupId = (Long) portletIdsEntry.getValue()[2][ FD ]
