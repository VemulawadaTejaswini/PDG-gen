Line_49 $$ if (outputRoot.exists()) -->Line_50 $$ collectCoverageInformation(outputRoot, packageCoverageMap, flattenPackageCoverageMap, data, rootPackageVMName, annotator, module, suite.isTrackTestFolders(), true)[ CD ]
Line_9 $$ if (((JavaCoverageSuite) coverageSuite).isPackageFiltered(qualifiedName)) -->Line_10 $$ filtered = true[ CD ]
Line_2 $$ public void annotate(final CoverageSuitesBundle suite, Annotator annotator) -->Line_38 $$ collectCoverageInformation(outputRoot, packageCoverageMap, flattenPackageCoverageMap, data, rootPackageVMName, annotator, module, suite.isTrackTestFolders(), false)[ FD ]
Line_2 $$ public void annotate(final CoverageSuitesBundle suite, Annotator annotator) -->Line_6 $$ final String qualifiedName = myPackage.getQualifiedName()[ CD ]
Line_2 $$ public void annotate(final CoverageSuitesBundle suite, Annotator annotator) -->Line_22 $$ if (modules == null)[ CD ]
Line_30 $$ final VirtualFile output = myCoverageManager.doInReadActionIfProjectOpen(new Computable<VirtualFile>() -->Line_32 $$ return CompilerModuleExtension.getInstance(module).getCompilerOutputPath()[ CD ]
Line_2 $$ public void annotate(final CoverageSuitesBundle suite, Annotator annotator) -->Line_50 $$ collectCoverageInformation(outputRoot, packageCoverageMap, flattenPackageCoverageMap, data, rootPackageVMName, annotator, module, suite.isTrackTestFolders(), true)[ FD ]
Line_3 $$ final ProjectData data = suite.getCoverageData()-->Line_38 $$ collectCoverageInformation(outputRoot, packageCoverageMap, flattenPackageCoverageMap, data, rootPackageVMName, annotator, module, suite.isTrackTestFolders(), false)[ FD ]
Line_41 $$ if (suite.isTrackTestFolders()) -->Line_47 $$ if (testPackageRoot != null) [ CD ]
Line_2 $$ public void annotate(final CoverageSuitesBundle suite, Annotator annotator) -->Line_3 $$ final ProjectData data = suite.getCoverageData()[ FD ]
Line_17 $$ final Module[] modules = myCoverageManager.doInReadActionIfProjectOpen(new Computable<Module[]>() -->Line_19 $$ return ModuleManager.getInstance(myProject).getModules()[ CD ]
Line_42 $$ final VirtualFile testPackageRoot = myCoverageManager.doInReadActionIfProjectOpen(new Computable<VirtualFile>() -->Line_44 $$ return CompilerModuleExtension.getInstance(module).getCompilerOutputPathForTests()[ CD ]
Line_7 $$ boolean filtered = false-->Line_10 $$ filtered = true[ FD ]
Line_2 $$ public void annotate(final CoverageSuitesBundle suite, Annotator annotator) -->Line_63 $$ annotator.annotatePackage(packageFQName, info, true)[ FD ]
Line_2 $$ public void annotate(final CoverageSuitesBundle suite, Annotator annotator) -->Line_14 $$ if (!filtered)[ CD ]
Line_3 $$ final ProjectData data = suite.getCoverageData()-->Line_50 $$ collectCoverageInformation(outputRoot, packageCoverageMap, flattenPackageCoverageMap, data, rootPackageVMName, annotator, module, suite.isTrackTestFolders(), true)[ FD ]
Line_37 $$ if (outputRoot.exists()) -->Line_38 $$ collectCoverageInformation(outputRoot, packageCoverageMap, flattenPackageCoverageMap, data, rootPackageVMName, annotator, module, suite.isTrackTestFolders(), false)[ CD ]
Line_4 $$ if (data == null)-->Line_5 $$ return[ CD ]
Line_35 $$ if (output != null) -->Line_37 $$ if (outputRoot.exists()) [ CD ]
Line_35 $$ if (output != null) -->Line_36 $$ File outputRoot = findRelativeFile(rootPackageVMName, output)[ CD ]
Line_2 $$ public void annotate(final CoverageSuitesBundle suite, Annotator annotator) -->Line_8 $$ for (CoverageSuite coverageSuite : suite.getSuites()) [ FD ]
Line_22 $$ if (modules == null)-->Line_23 $$ return[ CD ]
Line_7 $$ boolean filtered = false-->Line_14 $$ if (!filtered)[ FD ]
Line_2 $$ public void annotate(final CoverageSuitesBundle suite, Annotator annotator) -->Line_41 $$ if (suite.isTrackTestFolders()) [ FD ]
Line_2 $$ public void annotate(final CoverageSuitesBundle suite, Annotator annotator) -->Line_16 $$ final GlobalSearchScope scope = suite.getSearchScope(myProject)[ FD ]
Line_2 $$ public void annotate(final CoverageSuitesBundle suite, Annotator annotator) -->Line_3 $$ final ProjectData data = suite.getCoverageData()[ CD ]
Line_16 $$ final GlobalSearchScope scope = suite.getSearchScope(myProject)-->Line_27 $$ if (!scope.isSearchInModuleContent(module))[ FD ]
Line_41 $$ if (suite.isTrackTestFolders()) -->Line_42 $$ final VirtualFile testPackageRoot = myCoverageManager.doInReadActionIfProjectOpen(new Computable<VirtualFile>() [ CD ]
Line_2 $$ public void annotate(final CoverageSuitesBundle suite, Annotator annotator) -->Line_7 $$ boolean filtered = false[ CD ]
Line_6 $$ final String qualifiedName = myPackage.getQualifiedName()-->Line_29 $$ final String rootPackageVMName = qualifiedName.replaceAll("\\.", "/")[ FD ]
Line_3 $$ final ProjectData data = suite.getCoverageData()-->Line_4 $$ if (data == null)[ FD ]
Line_10 $$ filtered = true-->Line_14 $$ if (!filtered)[ FD ]
Line_47 $$ if (testPackageRoot != null) -->Line_49 $$ if (outputRoot.exists()) [ CD ]
Line_2 $$ public void annotate(final CoverageSuitesBundle suite, Annotator annotator) -->Line_4 $$ if (data == null)[ CD ]
Line_47 $$ if (testPackageRoot != null) -->Line_48 $$ final File outputRoot = findRelativeFile(rootPackageVMName, testPackageRoot)[ CD ]
Line_2 $$ public void annotate(final CoverageSuitesBundle suite, Annotator annotator) -->Line_17 $$ final Module[] modules = myCoverageManager.doInReadActionIfProjectOpen(new Computable<Module[]>() [ CD ]
Line_2 $$ public void annotate(final CoverageSuitesBundle suite, Annotator annotator) -->Line_16 $$ final GlobalSearchScope scope = suite.getSearchScope(myProject)[ CD ]
Line_6 $$ final String qualifiedName = myPackage.getQualifiedName()-->Line_9 $$ if (((JavaCoverageSuite) coverageSuite).isPackageFiltered(qualifiedName)) [ FD ]
Line_14 $$ if (!filtered)-->Line_15 $$ return[ CD ]
Line_2 $$ public void annotate(final CoverageSuitesBundle suite, Annotator annotator) -->Line_58 $$ annotator.annotatePackage(packageFQName, info)[ FD ]
Line_17 $$ final Module[] modules = myCoverageManager.doInReadActionIfProjectOpen(new Computable<Module[]>() -->Line_22 $$ if (modules == null)[ FD ]
