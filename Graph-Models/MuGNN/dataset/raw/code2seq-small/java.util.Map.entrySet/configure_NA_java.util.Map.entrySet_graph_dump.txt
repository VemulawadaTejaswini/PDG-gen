Line_2 $$ protected void configure() -->Line_51 $$ registerAction(SyncedFlushAction.INSTANCE, TransportSyncedFlushAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_16 $$ registerAction(ClusterUpdateSettingsAction.INSTANCE, TransportClusterUpdateSettingsAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_82 $$ registerAction(GetIndexedScriptAction.INSTANCE, TransportGetIndexedScriptAction.class)[ CD ]
Line_89 $$ if (!proxy) -->Line_90 $$ bind(TransportLivenessAction.class).asEagerSingleton()[ CD ]
Line_2 $$ protected void configure() -->Line_35 $$ registerAction(OpenIndexAction.INSTANCE, TransportOpenIndexAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_40 $$ registerAction(GetFieldMappingsAction.INSTANCE, TransportGetFieldMappingsAction.class, TransportGetFieldMappingsIndexAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_57 $$ registerAction(PutWarmerAction.INSTANCE, TransportPutWarmerAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_53 $$ registerAction(UpgradeAction.INSTANCE, TransportUpgradeAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_26 $$ registerAction(CreateSnapshotAction.INSTANCE, TransportCreateSnapshotAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_74 $$ registerAction(MultiSearchAction.INSTANCE, TransportMultiSearchAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_3 $$ Multibinder<ActionFilter> actionFilterMultibinder = Multibinder.newSetBinder(binder(), ActionFilter.class)[ CD ]
Line_2 $$ protected void configure() -->Line_12 $$ registerAction(NodesHotThreadsAction.INSTANCE, TransportNodesHotThreadsAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_32 $$ registerAction(CreateIndexAction.INSTANCE, TransportCreateIndexAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_45 $$ registerAction(PutIndexTemplateAction.INSTANCE, TransportPutIndexTemplateAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_7 $$ bind(ActionFilters.class).asEagerSingleton()[ CD ]
Line_2 $$ protected void configure() -->Line_80 $$ registerAction(RenderSearchTemplateAction.INSTANCE, TransportRenderSearchTemplateAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_28 $$ registerAction(SnapshotsStatusAction.INSTANCE, TransportSnapshotsStatusAction.class)[ CD ]
Line_86 $$ for (Map.Entry<String, ActionEntry> entry : actions.entrySet()) -->Line_94 $$ transportActionsBinder.addBinding(entry.getValue().action).to(entry.getValue().transportAction).asEagerSingleton()[ FD ]
Line_2 $$ protected void configure() -->Line_42 $$ registerAction(IndicesAliasesAction.INSTANCE, TransportIndicesAliasesAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_69 $$ registerAction(UpdateAction.INSTANCE, TransportUpdateAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_18 $$ registerAction(ClusterSearchShardsAction.INSTANCE, TransportClusterSearchShardsAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_38 $$ registerAction(TypesExistsAction.INSTANCE, TransportTypesExistsAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_46 $$ registerAction(GetIndexTemplatesAction.INSTANCE, TransportGetIndexTemplatesAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_79 $$ registerAction(RecoveryAction.INSTANCE, TransportRecoveryAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_33 $$ registerAction(DeleteIndexAction.INSTANCE, TransportDeleteIndexAction.class)[ CD ]
Line_3 $$ Multibinder<ActionFilter> actionFilterMultibinder = Multibinder.newSetBinder(binder(), ActionFilter.class)-->Line_5 $$ actionFilterMultibinder.addBinding().to(actionFilter)[ FD ]
Line_2 $$ protected void configure() -->Line_73 $$ registerAction(SearchScrollAction.INSTANCE, TransportSearchScrollAction.class, TransportSearchScrollQueryThenFetchAction.class, TransportSearchScrollQueryAndFetchAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_25 $$ registerAction(DeleteSnapshotAction.INSTANCE, TransportDeleteSnapshotAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_71 $$ registerAction(BulkAction.INSTANCE, TransportBulkAction.class, TransportShardBulkAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_10 $$ registerAction(NodesInfoAction.INSTANCE, TransportNodesInfoAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_56 $$ registerAction(ClearIndicesCacheAction.INSTANCE, TransportClearIndicesCacheAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_81 $$ registerAction(PutIndexedScriptAction.INSTANCE, TransportPutIndexedScriptAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_13 $$ registerAction(ClusterStatsAction.INSTANCE, TransportClusterStatsAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_29 $$ registerAction(IndicesStatsAction.INSTANCE, TransportIndicesStatsAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_43 $$ registerAction(UpdateSettingsAction.INSTANCE, TransportUpdateSettingsAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_60 $$ registerAction(GetAliasesAction.INSTANCE, TransportGetAliasesAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_14 $$ registerAction(ClusterStateAction.INSTANCE, TransportClusterStateAction.class)[ CD ]
Line_4 $$ for (Class<? extends ActionFilter> actionFilter : actionFilters) -->Line_5 $$ actionFilterMultibinder.addBinding().to(actionFilter)[ FD ]
Line_2 $$ protected void configure() -->Line_27 $$ registerAction(RestoreSnapshotAction.INSTANCE, TransportRestoreSnapshotAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_9 $$ bind(DestructiveOperations.class).asEagerSingleton()[ CD ]
Line_2 $$ protected void configure() -->Line_65 $$ registerAction(TermVectorsAction.INSTANCE, TransportTermVectorsAction.class, TransportDfsOnlyAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_11 $$ registerAction(NodesStatsAction.INSTANCE, TransportNodesStatsAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_89 $$ if (!proxy) [ CD ]
Line_2 $$ protected void configure() -->Line_63 $$ registerAction(IndexAction.INSTANCE, TransportIndexAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_37 $$ registerAction(IndicesExistsAction.INSTANCE, TransportIndicesExistsAction.class)[ CD ]
Line_95 $$ for (Class supportAction : entry.getValue().supportTransportActions) -->Line_96 $$ bind(supportAction).asEagerSingleton()[ FD ]
Line_2 $$ protected void configure() -->Line_83 $$ registerAction(DeleteIndexedScriptAction.INSTANCE, TransportDeleteIndexedScriptAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_76 $$ registerAction(MultiPercolateAction.INSTANCE, TransportMultiPercolateAction.class, TransportShardMultiPercolateAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_49 $$ registerAction(RefreshAction.INSTANCE, TransportRefreshAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_70 $$ registerAction(MultiGetAction.INSTANCE, TransportMultiGetAction.class, TransportShardMultiGetAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_15 $$ registerAction(ClusterHealthAction.INSTANCE, TransportClusterHealthAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_59 $$ registerAction(GetWarmersAction.INSTANCE, TransportGetWarmersAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_54 $$ registerAction(UpgradeStatusAction.INSTANCE, TransportUpgradeStatusAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_24 $$ registerAction(GetSnapshotsAction.INSTANCE, TransportGetSnapshotsAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_20 $$ registerAction(PutRepositoryAction.INSTANCE, TransportPutRepositoryAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_77 $$ registerAction(ExplainAction.INSTANCE, TransportExplainAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_44 $$ registerAction(AnalyzeAction.INSTANCE, TransportAnalyzeAction.class)[ CD ]
Line_86 $$ for (Map.Entry<String, ActionEntry> entry : actions.entrySet()) -->Line_95 $$ for (Class supportAction : entry.getValue().supportTransportActions) [ FD ]
Line_2 $$ protected void configure() -->Line_66 $$ registerAction(MultiTermVectorsAction.INSTANCE, TransportMultiTermVectorsAction.class, TransportShardMultiTermsVectorAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_68 $$ registerAction(SuggestAction.INSTANCE, TransportSuggestAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_23 $$ registerAction(VerifyRepositoryAction.INSTANCE, TransportVerifyRepositoryAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_21 $$ registerAction(GetRepositoriesAction.INSTANCE, TransportGetRepositoriesAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_50 $$ registerAction(FlushAction.INSTANCE, TransportFlushAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_48 $$ registerAction(ValidateQueryAction.INSTANCE, TransportValidateQueryAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_55 $$ registerAction(UpgradeSettingsAction.INSTANCE, TransportUpgradeSettingsAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_62 $$ registerAction(GetSettingsAction.INSTANCE, TransportGetSettingsAction.class)[ CD ]
Line_89 $$ if (!proxy) -->Line_91 $$ MapBinder<GenericAction, TransportAction> transportActionsBinder = MapBinder.newMapBinder(binder(), GenericAction.class, TransportAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_67 $$ registerAction(DeleteAction.INSTANCE, TransportDeleteAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_19 $$ registerAction(PendingClusterTasksAction.INSTANCE, TransportPendingClusterTasksAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_78 $$ registerAction(ClearScrollAction.INSTANCE, TransportClearScrollAction.class)[ CD ]
Line_85 $$ MapBinder<String, GenericAction> actionsBinder = MapBinder.newMapBinder(binder(), String.class, GenericAction.class)-->Line_87 $$ actionsBinder.addBinding(entry.getKey()).toInstance(entry.getValue().action)[ FD ]
Line_2 $$ protected void configure() -->Line_61 $$ registerAction(AliasesExistAction.INSTANCE, TransportAliasesExistAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_52 $$ registerAction(ForceMergeAction.INSTANCE, TransportForceMergeAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_30 $$ registerAction(IndicesSegmentsAction.INSTANCE, TransportIndicesSegmentsAction.class)[ CD ]
Line_86 $$ for (Map.Entry<String, ActionEntry> entry : actions.entrySet()) -->Line_87 $$ actionsBinder.addBinding(entry.getKey()).toInstance(entry.getValue().action)[ FD ]
Line_2 $$ protected void configure() -->Line_22 $$ registerAction(DeleteRepositoryAction.INSTANCE, TransportDeleteRepositoryAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_8 $$ bind(AutoCreateIndex.class).asEagerSingleton()[ CD ]
Line_2 $$ protected void configure() -->Line_85 $$ MapBinder<String, GenericAction> actionsBinder = MapBinder.newMapBinder(binder(), String.class, GenericAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_58 $$ registerAction(DeleteWarmerAction.INSTANCE, TransportDeleteWarmerAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_31 $$ registerAction(IndicesShardStoresAction.INSTANCE, TransportIndicesShardStoresAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_72 $$ registerAction(SearchAction.INSTANCE, TransportSearchAction.class, TransportSearchDfsQueryThenFetchAction.class, TransportSearchQueryThenFetchAction.class, TransportSearchDfsQueryAndFetchAction.class, TransportSearchQueryAndFetchAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_64 $$ registerAction(GetAction.INSTANCE, TransportGetAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_84 $$ registerAction(FieldStatsAction.INSTANCE, TransportFieldStatsTransportAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_41 $$ registerAction(PutMappingAction.INSTANCE, TransportPutMappingAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_75 $$ registerAction(PercolateAction.INSTANCE, TransportPercolateAction.class)[ CD ]
Line_86 $$ for (Map.Entry<String, ActionEntry> entry : actions.entrySet()) -->Line_93 $$ bind(entry.getValue().transportAction).asEagerSingleton()[ FD ]
Line_91 $$ MapBinder<GenericAction, TransportAction> transportActionsBinder = MapBinder.newMapBinder(binder(), GenericAction.class, TransportAction.class)-->Line_94 $$ transportActionsBinder.addBinding(entry.getValue().action).to(entry.getValue().transportAction).asEagerSingleton()[ FD ]
Line_2 $$ protected void configure() -->Line_39 $$ registerAction(GetMappingsAction.INSTANCE, TransportGetMappingsAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_36 $$ registerAction(CloseIndexAction.INSTANCE, TransportCloseIndexAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_17 $$ registerAction(ClusterRerouteAction.INSTANCE, TransportClusterRerouteAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_47 $$ registerAction(DeleteIndexTemplateAction.INSTANCE, TransportDeleteIndexTemplateAction.class)[ CD ]
Line_2 $$ protected void configure() -->Line_34 $$ registerAction(GetIndexAction.INSTANCE, TransportGetIndexAction.class)[ CD ]
