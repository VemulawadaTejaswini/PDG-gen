Line_4 $$ File projectPropertiesFile = new File(project.getProjectDir(), Project.GRADLE_PROPERTIES)-->Line_7 $$ projectProperties = GUtil.loadProperties(projectPropertiesFile)[ FD ]
Line_14 $$ for (Map.Entry<String, String> entry : mergedProperties.entrySet()) -->Line_21 $$ extraProperties.set(entry.getKey(), entry.getValue())[ FD ]
Line_2 $$ private void addPropertiesToProject(Project project) -->Line_12 $$ Map<String, String> mergedProperties = propertiesLoader.mergeProperties(new HashMap(projectProperties))[ CD ]
Line_14 $$ for (Map.Entry<String, String> entry : mergedProperties.entrySet()) -->Line_16 $$ project.setProperty(entry.getKey(), entry.getValue())[ FD ]
Line_7 $$ projectProperties = GUtil.loadProperties(projectPropertiesFile)-->Line_8 $$ LOGGER.debug("Adding project properties (if not overwritten by user properties): [ FD ]
Line_6 $$ if (projectPropertiesFile.isFile()) -->Line_7 $$ projectProperties = GUtil.loadProperties(projectPropertiesFile)[ CD ]
Line_2 $$ private void addPropertiesToProject(Project project) -->Line_4 $$ File projectPropertiesFile = new File(project.getProjectDir(), Project.GRADLE_PROPERTIES)[ CD ]
Line_6 $$ if (projectPropertiesFile.isFile()) -->Line_10 $$ LOGGER.debug("project property file does not exists. We continue!")[ CD ]
Line_6 $$ if (projectPropertiesFile.isFile()) -->Line_8 $$ LOGGER.debug("Adding project properties (if not overwritten by user properties): [ CD ]
Line_2 $$ private void addPropertiesToProject(Project project) -->Line_3 $$ Properties projectProperties = new Properties()[ CD ]
Line_2 $$ private void addPropertiesToProject(Project project) -->Line_16 $$ project.setProperty(entry.getKey(), entry.getValue())[ FD ]
Line_12 $$ Map<String, String> mergedProperties = propertiesLoader.mergeProperties(new HashMap(projectProperties))-->Line_14 $$ for (Map.Entry<String, String> entry : mergedProperties.entrySet()) [ FD ]
Line_14 $$ for (Map.Entry<String, String> entry : mergedProperties.entrySet()) -->Line_18 $$ if (!entry.getKey().equals(e.getProperty())) [ FD ]
Line_2 $$ private void addPropertiesToProject(Project project) -->Line_5 $$ LOGGER.debug("Looking for project properties from: [ CD ]
Line_3 $$ Properties projectProperties = new Properties()-->Line_7 $$ projectProperties = GUtil.loadProperties(projectPropertiesFile)[ FD ]
Line_3 $$ Properties projectProperties = new Properties()-->Line_8 $$ LOGGER.debug("Adding project properties (if not overwritten by user properties): [ FD ]
Line_2 $$ private void addPropertiesToProject(Project project) -->Line_6 $$ if (projectPropertiesFile.isFile()) [ CD ]
Line_2 $$ private void addPropertiesToProject(Project project) -->Line_13 $$ ExtraPropertiesExtension extraProperties = new DslObject(project).getExtensions().getExtraProperties()[ CD ]
Line_4 $$ File projectPropertiesFile = new File(project.getProjectDir(), Project.GRADLE_PROPERTIES)-->Line_6 $$ if (projectPropertiesFile.isFile()) [ FD ]
Line_13 $$ ExtraPropertiesExtension extraProperties = new DslObject(project).getExtensions().getExtraProperties()-->Line_21 $$ extraProperties.set(entry.getKey(), entry.getValue())[ FD ]
Line_2 $$ private void addPropertiesToProject(Project project) -->Line_4 $$ File projectPropertiesFile = new File(project.getProjectDir(), Project.GRADLE_PROPERTIES)[ FD ]
Line_4 $$ File projectPropertiesFile = new File(project.getProjectDir(), Project.GRADLE_PROPERTIES)-->Line_5 $$ LOGGER.debug("Looking for project properties from: [ FD ]
