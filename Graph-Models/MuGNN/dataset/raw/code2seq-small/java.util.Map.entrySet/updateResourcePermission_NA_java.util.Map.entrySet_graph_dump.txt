Line_2 $$ protected void updateResourcePermission(long companyId, String name, int scope, String primKey, long ownerId, Map<Long, String[]> roleIdsToActionIds) throws PortalException -->Line_6 $$ long[] roleIds = ArrayUtil.toLongArray(roleIdsToActionIds.keySet())[ FD ]
Line_9 $$ long roleId = resourcePermission.getRoleId()-->Line_11 $$ doUpdateResourcePermission(companyId, name, scope, primKey, ownerId, roleId, actionIds, ResourcePermissionConstants.OPERATOR_SET, true)[ FD ]
Line_2 $$ protected void updateResourcePermission(long companyId, String name, int scope, String primKey, long ownerId, Map<Long, String[]> roleIdsToActionIds) throws PortalException -->Line_3 $$ boolean flushResourcePermissionEnabled = PermissionThreadLocal.isFlushResourcePermissionEnabled(name, primKey)[ CD ]
Line_2 $$ protected void updateResourcePermission(long companyId, String name, int scope, String primKey, long ownerId, Map<Long, String[]> roleIdsToActionIds) throws PortalException -->Line_7 $$ List<ResourcePermission> resourcePermissions = resourcePermissionPersistence.findByC_N_S_P_R(companyId, name, scope, primKey, roleIds)[ FD ]
Line_2 $$ protected void updateResourcePermission(long companyId, String name, int scope, String primKey, long ownerId, Map<Long, String[]> roleIdsToActionIds) throws PortalException -->Line_16 $$ for (Map.Entry<Long, String[]> entry : roleIdsToActionIds.entrySet()) [ FD ]
Line_10 $$ String[] actionIds = roleIdsToActionIds.remove(roleId)-->Line_11 $$ doUpdateResourcePermission(companyId, name, scope, primKey, ownerId, roleId, actionIds, ResourcePermissionConstants.OPERATOR_SET, true)[ FD ]
Line_2 $$ protected void updateResourcePermission(long companyId, String name, int scope, String primKey, long ownerId, Map<Long, String[]> roleIdsToActionIds) throws PortalException -->Line_19 $$ doUpdateResourcePermission(companyId, name, scope, primKey, ownerId, roleId, actionIds, ResourcePermissionConstants.OPERATOR_SET, false)[ FD ]
Line_2 $$ protected void updateResourcePermission(long companyId, String name, int scope, String primKey, long ownerId, Map<Long, String[]> roleIdsToActionIds) throws PortalException -->Line_24 $$ PermissionCacheUtil.clearResourcePermissionCache(scope, name, primKey)[ FD ]
Line_2 $$ protected void updateResourcePermission(long companyId, String name, int scope, String primKey, long ownerId, Map<Long, String[]> roleIdsToActionIds) throws PortalException -->Line_4 $$ PermissionThreadLocal.setFlushResourcePermissionEnabled(name, primKey, false)[ CD ]
Line_9 $$ long roleId = resourcePermission.getRoleId()-->Line_19 $$ doUpdateResourcePermission(companyId, name, scope, primKey, ownerId, roleId, actionIds, ResourcePermissionConstants.OPERATOR_SET, false)[ FD ]
Line_6 $$ long[] roleIds = ArrayUtil.toLongArray(roleIdsToActionIds.keySet())-->Line_7 $$ List<ResourcePermission> resourcePermissions = resourcePermissionPersistence.findByC_N_S_P_R(companyId, name, scope, primKey, roleIds)[ FD ]
Line_13 $$ if (roleIdsToActionIds.isEmpty()) -->Line_14 $$ return[ CD ]
Line_2 $$ protected void updateResourcePermission(long companyId, String name, int scope, String primKey, long ownerId, Map<Long, String[]> roleIdsToActionIds) throws PortalException -->Line_3 $$ boolean flushResourcePermissionEnabled = PermissionThreadLocal.isFlushResourcePermissionEnabled(name, primKey)[ FD ]
Line_2 $$ protected void updateResourcePermission(long companyId, String name, int scope, String primKey, long ownerId, Map<Long, String[]> roleIdsToActionIds) throws PortalException -->Line_25 $$ IndexWriterHelperUtil.updatePermissionFields(name, primKey)[ FD ]
Line_16 $$ for (Map.Entry<Long, String[]> entry : roleIdsToActionIds.entrySet()) -->Line_18 $$ String[] actionIds = entry.getValue()[ FD ]
Line_8 $$ for (ResourcePermission resourcePermission : resourcePermissions) -->Line_9 $$ long roleId = resourcePermission.getRoleId()[ FD ]
Line_2 $$ protected void updateResourcePermission(long companyId, String name, int scope, String primKey, long ownerId, Map<Long, String[]> roleIdsToActionIds) throws PortalException -->Line_4 $$ PermissionThreadLocal.setFlushResourcePermissionEnabled(name, primKey, false)[ FD ]
Line_2 $$ protected void updateResourcePermission(long companyId, String name, int scope, String primKey, long ownerId, Map<Long, String[]> roleIdsToActionIds) throws PortalException -->Line_23 $$ PermissionThreadLocal.setFlushResourcePermissionEnabled(name, primKey, flushResourcePermissionEnabled)[ FD ]
Line_10 $$ String[] actionIds = roleIdsToActionIds.remove(roleId)-->Line_19 $$ doUpdateResourcePermission(companyId, name, scope, primKey, ownerId, roleId, actionIds, ResourcePermissionConstants.OPERATOR_SET, false)[ FD ]
Line_9 $$ long roleId = resourcePermission.getRoleId()-->Line_10 $$ String[] actionIds = roleIdsToActionIds.remove(roleId)[ FD ]
Line_3 $$ boolean flushResourcePermissionEnabled = PermissionThreadLocal.isFlushResourcePermissionEnabled(name, primKey)-->Line_23 $$ PermissionThreadLocal.setFlushResourcePermissionEnabled(name, primKey, flushResourcePermissionEnabled)[ FD ]
Line_2 $$ protected void updateResourcePermission(long companyId, String name, int scope, String primKey, long ownerId, Map<Long, String[]> roleIdsToActionIds) throws PortalException -->Line_11 $$ doUpdateResourcePermission(companyId, name, scope, primKey, ownerId, roleId, actionIds, ResourcePermissionConstants.OPERATOR_SET, true)[ FD ]
Line_2 $$ protected void updateResourcePermission(long companyId, String name, int scope, String primKey, long ownerId, Map<Long, String[]> roleIdsToActionIds) throws PortalException -->Line_13 $$ if (roleIdsToActionIds.isEmpty()) [ FD ]
Line_16 $$ for (Map.Entry<Long, String[]> entry : roleIdsToActionIds.entrySet()) -->Line_17 $$ long roleId = entry.getKey()[ FD ]
Line_2 $$ protected void updateResourcePermission(long companyId, String name, int scope, String primKey, long ownerId, Map<Long, String[]> roleIdsToActionIds) throws PortalException -->Line_10 $$ String[] actionIds = roleIdsToActionIds.remove(roleId)[ FD ]
