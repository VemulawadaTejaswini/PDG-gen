Line_52 $$ if (selected && actionId.equals(ActionKeys.ACCESS_IN_CONTROL_PANEL)) -->Line_53 $$ updateViewControlPanelPermission(role, themeDisplay.getScopeGroupId(), selResource, scope, groupIds)[ CD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_24 $$ String[] rootResourceGroupIds = null[ CD ]
Line_5 $$ Role role = _roleLocalService.getRole(roleId)-->Line_50 $$ updateAction(role, themeDisplay.getScopeGroupId(), selResource, actionId, selected, scope, groupIds)[ FD ]
Line_47 $$ if (_resourceBlockLocalService.isSupported(selResource)) -->Line_50 $$ updateAction(role, themeDisplay.getScopeGroupId(), selResource, actionId, selected, scope, groupIds)[ CD ]
Line_38 $$ groupIds = ArrayUtil.distinct(groupIds)-->Line_50 $$ updateAction(role, themeDisplay.getScopeGroupId(), selResource, actionId, selected, scope, groupIds)[ FD ]
Line_55 $$ rootResourceGroupIds = groupIds-->Line_60 $$ updateViewRootResourcePermission(role, themeDisplay.getScopeGroupId(), portletResource, rootResourceScope, rootResourceGroupIds)[ FD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_4 $$ long roleId = ParamUtil.getLong(actionRequest, "roleId")[ FD ]
Line_41 $$ scope = ResourceConstants.SCOPE_GROUP_TEMPLATE-->Line_48 $$ updateActions_Blocks(role, themeDisplay.getScopeGroupId(), selResource, actionId, selected, scope, groupIds)[ FD ]
Line_33 $$ boolean selected = ArrayUtil.contains(selectedTargets, target)-->Line_34 $$ if (!selected && !ArrayUtil.contains(unselectedTargets, target)) [ FD ]
Line_37 $$ String[] groupIds = StringUtil.split(ParamUtil.getString(actionRequest, "groupIds" + target))-->Line_55 $$ rootResourceGroupIds = groupIds[ FD ]
Line_5 $$ Role role = _roleLocalService.getRole(roleId)-->Line_40 $$ if ((role.getType() == RoleConstants.TYPE_ORGANIZATION) || (role.getType() == RoleConstants.TYPE_PROVIDER) || (role.getType() == RoleConstants.TYPE_SITE)) [ FD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_53 $$ updateViewControlPanelPermission(role, themeDisplay.getScopeGroupId(), selResource, scope, groupIds)[ FD ]
Line_64 $$ if (Validator.isNotNull(redirect)) -->Line_65 $$ actionResponse.sendRedirect(redirect)[ CD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_13 $$ Map<String, List<String>> resourceActionsMap = new HashMap()[ CD ]
Line_37 $$ String[] groupIds = StringUtil.split(ParamUtil.getString(actionRequest, "groupIds" + target))-->Line_53 $$ updateViewControlPanelPermission(role, themeDisplay.getScopeGroupId(), selResource, scope, groupIds)[ FD ]
Line_28 $$ String selResource = entry.getKey()-->Line_47 $$ if (_resourceBlockLocalService.isSupported(selResource)) [ FD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_12 $$ String[] modelResources = StringUtil.split(ParamUtil.getString(actionRequest, "modelResources"))[ CD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_25 $$ String[] selectedTargets = StringUtil.split(ParamUtil.getString(actionRequest, "selectedTargets"))[ FD ]
Line_33 $$ boolean selected = ArrayUtil.contains(selectedTargets, target)-->Line_52 $$ if (selected && actionId.equals(ActionKeys.ACCESS_IN_CONTROL_PANEL)) [ FD ]
Line_43 $$ if (groupIds.length > 0) -->Line_44 $$ scope = ResourceConstants.SCOPE_GROUP[ CD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_26 $$ String[] unselectedTargets = StringUtil.split(ParamUtil.getString(actionRequest, "unselectedTargets"))[ CD ]
Line_33 $$ boolean selected = ArrayUtil.contains(selectedTargets, target)-->Line_48 $$ updateActions_Blocks(role, themeDisplay.getScopeGroupId(), selResource, actionId, selected, scope, groupIds)[ FD ]
Line_39 $$ int scope = ResourceConstants.SCOPE_COMPANY-->Line_44 $$ scope = ResourceConstants.SCOPE_GROUP[ FD ]
Line_55 $$ rootResourceGroupIds = groupIds-->Line_59 $$ if (rootResourceGroupIds != null) [ FD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_64 $$ if (Validator.isNotNull(redirect)) [ CD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_60 $$ updateViewRootResourcePermission(role, themeDisplay.getScopeGroupId(), portletResource, rootResourceScope, rootResourceGroupIds)[ FD ]
Line_20 $$ for (String modelResource : modelResources) -->Line_21 $$ resourceActionsMap.put(modelResource, ResourceActionsUtil.getResourceActions(null, modelResource))[ FD ]
Line_41 $$ scope = ResourceConstants.SCOPE_GROUP_TEMPLATE-->Line_54 $$ rootResourceScope = scope[ FD ]
Line_17 $$ for (String relatedPortletResource : relatedPortletResources) -->Line_18 $$ resourceActionsMap.put(relatedPortletResource, ResourceActionsUtil.getResourceActions(relatedPortletResource, null))[ FD ]
Line_28 $$ String selResource = entry.getKey()-->Line_48 $$ updateActions_Blocks(role, themeDisplay.getScopeGroupId(), selResource, actionId, selected, scope, groupIds)[ FD ]
Line_14 $$ if (Validator.isNotNull(portletResource)) -->Line_15 $$ resourceActionsMap.put(portletResource, ResourceActionsUtil.getResourceActions(portletResource, null))[ CD ]
Line_32 $$ String target = selResource + actionId-->Line_33 $$ boolean selected = ArrayUtil.contains(selectedTargets, target)[ FD ]
Line_40 $$ if ((role.getType() == RoleConstants.TYPE_ORGANIZATION) || (role.getType() == RoleConstants.TYPE_PROVIDER) || (role.getType() == RoleConstants.TYPE_SITE)) -->Line_41 $$ scope = ResourceConstants.SCOPE_GROUP_TEMPLATE[ CD ]
Line_39 $$ int scope = ResourceConstants.SCOPE_COMPANY-->Line_54 $$ rootResourceScope = scope[ FD ]
Line_6 $$ String roleName = role.getName()-->Line_7 $$ if (roleName.equals(RoleConstants.ADMINISTRATOR) || roleName.equals(RoleConstants.ORGANIZATION_ADMINISTRATOR) || roleName.equals(RoleConstants.ORGANIZATION_OWNER) || roleName.equals(RoleConstants.OWNER) || roleName.equals(RoleConstants.SITE_ADMINISTRATOR) || roleName.equals(RoleConstants.SITE_OWNER)) [ FD ]
Line_4 $$ long roleId = ParamUtil.getLong(actionRequest, "roleId")-->Line_5 $$ Role role = _roleLocalService.getRole(roleId)[ FD ]
Line_63 $$ String redirect = PortalUtil.escapeRedirect(ParamUtil.getString(actionRequest, "redirect"))-->Line_64 $$ if (Validator.isNotNull(redirect)) [ FD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_11 $$ String[] relatedPortletResources = StringUtil.split(ParamUtil.getString(actionRequest, "relatedPortletResources"))[ CD ]
Line_13 $$ Map<String, List<String>> resourceActionsMap = new HashMap()-->Line_18 $$ resourceActionsMap.put(relatedPortletResource, ResourceActionsUtil.getResourceActions(relatedPortletResource, null))[ FD ]
Line_39 $$ int scope = ResourceConstants.SCOPE_COMPANY-->Line_48 $$ updateActions_Blocks(role, themeDisplay.getScopeGroupId(), selResource, actionId, selected, scope, groupIds)[ FD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_26 $$ String[] unselectedTargets = StringUtil.split(ParamUtil.getString(actionRequest, "unselectedTargets"))[ FD ]
Line_39 $$ int scope = ResourceConstants.SCOPE_COMPANY-->Line_50 $$ updateAction(role, themeDisplay.getScopeGroupId(), selResource, actionId, selected, scope, groupIds)[ FD ]
Line_39 $$ int scope = ResourceConstants.SCOPE_COMPANY-->Line_53 $$ updateViewControlPanelPermission(role, themeDisplay.getScopeGroupId(), selResource, scope, groupIds)[ FD ]
Line_10 $$ String portletResource = ParamUtil.getString(actionRequest, "portletResource")-->Line_14 $$ if (Validator.isNotNull(portletResource)) [ FD ]
Line_63 $$ String redirect = PortalUtil.escapeRedirect(ParamUtil.getString(actionRequest, "redirect"))-->Line_65 $$ actionResponse.sendRedirect(redirect)[ FD ]
Line_10 $$ String portletResource = ParamUtil.getString(actionRequest, "portletResource")-->Line_15 $$ resourceActionsMap.put(portletResource, ResourceActionsUtil.getResourceActions(portletResource, null))[ FD ]
Line_5 $$ Role role = _roleLocalService.getRole(roleId)-->Line_48 $$ updateActions_Blocks(role, themeDisplay.getScopeGroupId(), selResource, actionId, selected, scope, groupIds)[ FD ]
Line_37 $$ String[] groupIds = StringUtil.split(ParamUtil.getString(actionRequest, "groupIds" + target))-->Line_50 $$ updateAction(role, themeDisplay.getScopeGroupId(), selResource, actionId, selected, scope, groupIds)[ FD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_30 $$ actions = ListUtil.sort(actions, new ActionComparator(themeDisplay.getLocale()))[ FD ]
Line_24 $$ String[] rootResourceGroupIds = null-->Line_59 $$ if (rootResourceGroupIds != null) [ FD ]
Line_31 $$ for (String actionId : actions) -->Line_50 $$ updateAction(role, themeDisplay.getScopeGroupId(), selResource, actionId, selected, scope, groupIds)[ FD ]
Line_25 $$ String[] selectedTargets = StringUtil.split(ParamUtil.getString(actionRequest, "selectedTargets"))-->Line_33 $$ boolean selected = ArrayUtil.contains(selectedTargets, target)[ FD ]
Line_24 $$ String[] rootResourceGroupIds = null-->Line_60 $$ updateViewRootResourcePermission(role, themeDisplay.getScopeGroupId(), portletResource, rootResourceScope, rootResourceGroupIds)[ FD ]
Line_44 $$ scope = ResourceConstants.SCOPE_GROUP-->Line_50 $$ updateAction(role, themeDisplay.getScopeGroupId(), selResource, actionId, selected, scope, groupIds)[ FD ]
Line_26 $$ String[] unselectedTargets = StringUtil.split(ParamUtil.getString(actionRequest, "unselectedTargets"))-->Line_34 $$ if (!selected && !ArrayUtil.contains(unselectedTargets, target)) [ FD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_23 $$ int rootResourceScope = ResourceConstants.SCOPE_COMPANY[ CD ]
Line_44 $$ scope = ResourceConstants.SCOPE_GROUP-->Line_54 $$ rootResourceScope = scope[ FD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_10 $$ String portletResource = ParamUtil.getString(actionRequest, "portletResource")[ CD ]
Line_40 $$ if ((role.getType() == RoleConstants.TYPE_ORGANIZATION) || (role.getType() == RoleConstants.TYPE_PROVIDER) || (role.getType() == RoleConstants.TYPE_SITE)) -->Line_43 $$ if (groupIds.length > 0) [ CD ]
Line_41 $$ scope = ResourceConstants.SCOPE_GROUP_TEMPLATE-->Line_50 $$ updateAction(role, themeDisplay.getScopeGroupId(), selResource, actionId, selected, scope, groupIds)[ FD ]
Line_5 $$ Role role = _roleLocalService.getRole(roleId)-->Line_60 $$ updateViewRootResourcePermission(role, themeDisplay.getScopeGroupId(), portletResource, rootResourceScope, rootResourceGroupIds)[ FD ]
Line_28 $$ String selResource = entry.getKey()-->Line_53 $$ updateViewControlPanelPermission(role, themeDisplay.getScopeGroupId(), selResource, scope, groupIds)[ FD ]
Line_27 $$ for (Map.Entry<String, List<String>> entry : resourceActionsMap.entrySet()) -->Line_29 $$ List<String> actions = entry.getValue()[ FD ]
Line_28 $$ String selResource = entry.getKey()-->Line_50 $$ updateAction(role, themeDisplay.getScopeGroupId(), selResource, actionId, selected, scope, groupIds)[ FD ]
Line_5 $$ Role role = _roleLocalService.getRole(roleId)-->Line_6 $$ String roleName = role.getName()[ FD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_59 $$ if (rootResourceGroupIds != null) [ CD ]
Line_10 $$ String portletResource = ParamUtil.getString(actionRequest, "portletResource")-->Line_60 $$ updateViewRootResourcePermission(role, themeDisplay.getScopeGroupId(), portletResource, rootResourceScope, rootResourceGroupIds)[ FD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_7 $$ if (roleName.equals(RoleConstants.ADMINISTRATOR) || roleName.equals(RoleConstants.ORGANIZATION_ADMINISTRATOR) || roleName.equals(RoleConstants.ORGANIZATION_OWNER) || roleName.equals(RoleConstants.OWNER) || roleName.equals(RoleConstants.SITE_ADMINISTRATOR) || roleName.equals(RoleConstants.SITE_OWNER)) [ CD ]
Line_32 $$ String target = selResource + actionId-->Line_34 $$ if (!selected && !ArrayUtil.contains(unselectedTargets, target)) [ FD ]
Line_54 $$ rootResourceScope = scope-->Line_60 $$ updateViewRootResourcePermission(role, themeDisplay.getScopeGroupId(), portletResource, rootResourceScope, rootResourceGroupIds)[ FD ]
Line_13 $$ Map<String, List<String>> resourceActionsMap = new HashMap()-->Line_15 $$ resourceActionsMap.put(portletResource, ResourceActionsUtil.getResourceActions(portletResource, null))[ FD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_50 $$ updateAction(role, themeDisplay.getScopeGroupId(), selResource, actionId, selected, scope, groupIds)[ FD ]
Line_44 $$ scope = ResourceConstants.SCOPE_GROUP-->Line_53 $$ updateViewControlPanelPermission(role, themeDisplay.getScopeGroupId(), selResource, scope, groupIds)[ FD ]
Line_37 $$ String[] groupIds = StringUtil.split(ParamUtil.getString(actionRequest, "groupIds" + target))-->Line_38 $$ groupIds = ArrayUtil.distinct(groupIds)[ FD ]
Line_5 $$ Role role = _roleLocalService.getRole(roleId)-->Line_53 $$ updateViewControlPanelPermission(role, themeDisplay.getScopeGroupId(), selResource, scope, groupIds)[ FD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_25 $$ String[] selectedTargets = StringUtil.split(ParamUtil.getString(actionRequest, "selectedTargets"))[ CD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_37 $$ String[] groupIds = StringUtil.split(ParamUtil.getString(actionRequest, "groupIds" + target))[ FD ]
Line_33 $$ boolean selected = ArrayUtil.contains(selectedTargets, target)-->Line_50 $$ updateAction(role, themeDisplay.getScopeGroupId(), selResource, actionId, selected, scope, groupIds)[ FD ]
Line_31 $$ for (String actionId : actions) -->Line_48 $$ updateActions_Blocks(role, themeDisplay.getScopeGroupId(), selResource, actionId, selected, scope, groupIds)[ FD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_63 $$ String redirect = PortalUtil.escapeRedirect(ParamUtil.getString(actionRequest, "redirect"))[ FD ]
Line_52 $$ if (selected && actionId.equals(ActionKeys.ACCESS_IN_CONTROL_PANEL)) -->Line_54 $$ rootResourceScope = scope[ CD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_4 $$ long roleId = ParamUtil.getLong(actionRequest, "roleId")[ CD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_6 $$ String roleName = role.getName()[ CD ]
Line_38 $$ groupIds = ArrayUtil.distinct(groupIds)-->Line_53 $$ updateViewControlPanelPermission(role, themeDisplay.getScopeGroupId(), selResource, scope, groupIds)[ FD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_62 $$ SessionMessages.add(actionRequest, "permissionsUpdated")[ CD ]
Line_13 $$ Map<String, List<String>> resourceActionsMap = new HashMap()-->Line_27 $$ for (Map.Entry<String, List<String>> entry : resourceActionsMap.entrySet()) [ FD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_10 $$ String portletResource = ParamUtil.getString(actionRequest, "portletResource")[ FD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)[ FD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_62 $$ SessionMessages.add(actionRequest, "permissionsUpdated")[ FD ]
Line_44 $$ scope = ResourceConstants.SCOPE_GROUP-->Line_48 $$ updateActions_Blocks(role, themeDisplay.getScopeGroupId(), selResource, actionId, selected, scope, groupIds)[ FD ]
Line_39 $$ int scope = ResourceConstants.SCOPE_COMPANY-->Line_41 $$ scope = ResourceConstants.SCOPE_GROUP_TEMPLATE[ FD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_5 $$ Role role = _roleLocalService.getRole(roleId)[ CD ]
Line_23 $$ int rootResourceScope = ResourceConstants.SCOPE_COMPANY-->Line_60 $$ updateViewRootResourcePermission(role, themeDisplay.getScopeGroupId(), portletResource, rootResourceScope, rootResourceGroupIds)[ FD ]
Line_41 $$ scope = ResourceConstants.SCOPE_GROUP_TEMPLATE-->Line_53 $$ updateViewControlPanelPermission(role, themeDisplay.getScopeGroupId(), selResource, scope, groupIds)[ FD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_11 $$ String[] relatedPortletResources = StringUtil.split(ParamUtil.getString(actionRequest, "relatedPortletResources"))[ FD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_65 $$ actionResponse.sendRedirect(redirect)[ FD ]
Line_41 $$ scope = ResourceConstants.SCOPE_GROUP_TEMPLATE-->Line_44 $$ scope = ResourceConstants.SCOPE_GROUP[ FD ]
Line_38 $$ groupIds = ArrayUtil.distinct(groupIds)-->Line_55 $$ rootResourceGroupIds = groupIds[ FD ]
Line_47 $$ if (_resourceBlockLocalService.isSupported(selResource)) -->Line_48 $$ updateActions_Blocks(role, themeDisplay.getScopeGroupId(), selResource, actionId, selected, scope, groupIds)[ CD ]
Line_23 $$ int rootResourceScope = ResourceConstants.SCOPE_COMPANY-->Line_54 $$ rootResourceScope = scope[ FD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_12 $$ String[] modelResources = StringUtil.split(ParamUtil.getString(actionRequest, "modelResources"))[ FD ]
Line_29 $$ List<String> actions = entry.getValue()-->Line_30 $$ actions = ListUtil.sort(actions, new ActionComparator(themeDisplay.getLocale()))[ FD ]
Line_38 $$ groupIds = ArrayUtil.distinct(groupIds)-->Line_48 $$ updateActions_Blocks(role, themeDisplay.getScopeGroupId(), selResource, actionId, selected, scope, groupIds)[ FD ]
Line_31 $$ for (String actionId : actions) -->Line_52 $$ if (selected && actionId.equals(ActionKeys.ACCESS_IN_CONTROL_PANEL)) [ FD ]
Line_24 $$ String[] rootResourceGroupIds = null-->Line_55 $$ rootResourceGroupIds = groupIds[ FD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_14 $$ if (Validator.isNotNull(portletResource)) [ CD ]
Line_37 $$ String[] groupIds = StringUtil.split(ParamUtil.getString(actionRequest, "groupIds" + target))-->Line_48 $$ updateActions_Blocks(role, themeDisplay.getScopeGroupId(), selResource, actionId, selected, scope, groupIds)[ FD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_48 $$ updateActions_Blocks(role, themeDisplay.getScopeGroupId(), selResource, actionId, selected, scope, groupIds)[ FD ]
Line_52 $$ if (selected && actionId.equals(ActionKeys.ACCESS_IN_CONTROL_PANEL)) -->Line_55 $$ rootResourceGroupIds = groupIds[ CD ]
Line_59 $$ if (rootResourceGroupIds != null) -->Line_60 $$ updateViewRootResourcePermission(role, themeDisplay.getScopeGroupId(), portletResource, rootResourceScope, rootResourceGroupIds)[ CD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)[ CD ]
Line_13 $$ Map<String, List<String>> resourceActionsMap = new HashMap()-->Line_21 $$ resourceActionsMap.put(modelResource, ResourceActionsUtil.getResourceActions(null, modelResource))[ FD ]
Line_2 $$ public void updateActions(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_63 $$ String redirect = PortalUtil.escapeRedirect(ParamUtil.getString(actionRequest, "redirect"))[ CD ]
Line_27 $$ for (Map.Entry<String, List<String>> entry : resourceActionsMap.entrySet()) -->Line_28 $$ String selResource = entry.getKey()[ FD ]
