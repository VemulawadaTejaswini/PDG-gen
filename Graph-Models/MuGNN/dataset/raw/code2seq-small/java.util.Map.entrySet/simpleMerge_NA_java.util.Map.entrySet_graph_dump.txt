Line_3 $$ Map<VarVersionPair, VarType> mapExprentMaxTypes = typeProcessor.getMapExprentMaxTypes()-->Line_32 $$ VarType firstMaxType = mapExprentMaxTypes.get(firstPair)[ FD ]
Line_2 $$ private static void simpleMerge(VarTypeProcessor typeProcessor, DirectGraph graph, StructMethod mt) -->Line_5 $$ Map<Integer, Set<Integer>> mapVarVersions = new HashMap<Integer, Set<Integer>>()[ CD ]
Line_2 $$ private static void simpleMerge(VarTypeProcessor typeProcessor, DirectGraph graph, StructMethod mt) -->Line_43 $$ typeProcessor.getMapFinalVars().put(firstPair, VarTypeProcessor.VAR_NON_FINAL)[ FD ]
Line_4 $$ Map<VarVersionPair, VarType> mapExprentMinTypes = typeProcessor.getMapExprentMinTypes()-->Line_38 $$ mapExprentMinTypes.remove(secondPair)[ FD ]
Line_19 $$ if (ent.getValue().size() > 1) -->Line_22 $$ for (int i = 0; i < lstVersions.size(); i++) [ CD ]
Line_24 $$ VarType firstType = mapExprentMinTypes.get(firstPair)-->Line_41 $$ firstType = secondType[ FD ]
Line_17 $$ Map<VarVersionPair, Integer> mapMergedVersions = new HashMap<VarVersionPair, Integer>()-->Line_51 $$ if (!mapMergedVersions.isEmpty()) [ FD ]
Line_29 $$ VarVersionPair secondPair = new VarVersionPair(ent.getKey(), lstVersions.get(j))-->Line_37 $$ mapExprentMaxTypes.remove(secondPair)[ FD ]
Line_28 $$ for (int j = i + 1; j < lstVersions.size(); j++) -->Line_31 $$ if (firstType.equals(secondType) || (firstType.equals(VarType.VARTYPE_NULL) && secondType.type == CodeConstants.TYPE_OBJECT) || (secondType.equals(VarType.VARTYPE_NULL) && firstType.type == CodeConstants.TYPE_OBJECT)) [ CD ]
Line_31 $$ if (firstType.equals(secondType) || (firstType.equals(VarType.VARTYPE_NULL) && secondType.type == CodeConstants.TYPE_OBJECT) || (secondType.equals(VarType.VARTYPE_NULL) && firstType.type == CodeConstants.TYPE_OBJECT)) -->Line_32 $$ VarType firstMaxType = mapExprentMaxTypes.get(firstPair)[ CD ]
Line_31 $$ if (firstType.equals(secondType) || (firstType.equals(VarType.VARTYPE_NULL) && secondType.type == CodeConstants.TYPE_OBJECT) || (secondType.equals(VarType.VARTYPE_NULL) && firstType.type == CodeConstants.TYPE_OBJECT)) -->Line_37 $$ mapExprentMaxTypes.remove(secondPair)[ CD ]
Line_31 $$ if (firstType.equals(secondType) || (firstType.equals(VarType.VARTYPE_NULL) && secondType.type == CodeConstants.TYPE_OBJECT) || (secondType.equals(VarType.VARTYPE_NULL) && firstType.type == CodeConstants.TYPE_OBJECT)) -->Line_44 $$ lstVersions.remove(j)[ CD ]
Line_2 $$ private static void simpleMerge(VarTypeProcessor typeProcessor, DirectGraph graph, StructMethod mt) -->Line_52 $$ updateVersions(graph, mapMergedVersions)[ FD ]
Line_20 $$ List<Integer> lstVersions = new ArrayList<Integer>(ent.getValue())-->Line_29 $$ VarVersionPair secondPair = new VarVersionPair(ent.getKey(), lstVersions.get(j))[ FD ]
Line_3 $$ Map<VarVersionPair, VarType> mapExprentMaxTypes = typeProcessor.getMapExprentMaxTypes()-->Line_35 $$ mapExprentMaxTypes.put(firstPair, type)[ FD ]
Line_8 $$ Set<Integer> set = mapVarVersions.get(pair.var)-->Line_10 $$ set = new HashSet<Integer>()[ FD ]
Line_8 $$ Set<Integer> set = mapVarVersions.get(pair.var)-->Line_9 $$ if (set == null) [ FD ]
Line_22 $$ for (int i = 0; i < lstVersions.size(); i++) -->Line_23 $$ VarVersionPair firstPair = new VarVersionPair(ent.getKey(), lstVersions.get(i))[ FD ]
Line_31 $$ if (firstType.equals(secondType) || (firstType.equals(VarType.VARTYPE_NULL) && secondType.type == CodeConstants.TYPE_OBJECT) || (secondType.equals(VarType.VARTYPE_NULL) && firstType.type == CodeConstants.TYPE_OBJECT)) -->Line_38 $$ mapExprentMinTypes.remove(secondPair)[ CD ]
Line_5 $$ Map<Integer, Set<Integer>> mapVarVersions = new HashMap<Integer, Set<Integer>>()-->Line_8 $$ Set<Integer> set = mapVarVersions.get(pair.var)[ FD ]
Line_39 $$ if (firstType.equals(VarType.VARTYPE_NULL)) -->Line_41 $$ firstType = secondType[ CD ]
Line_22 $$ for (int i = 0; i < lstVersions.size(); i++) -->Line_28 $$ for (int j = i + 1; j < lstVersions.size(); j++) [ CD ]
Line_28 $$ for (int j = i + 1; j < lstVersions.size(); j++) -->Line_30 $$ VarType secondType = mapExprentMinTypes.get(secondPair)[ CD ]
Line_23 $$ VarVersionPair firstPair = new VarVersionPair(ent.getKey(), lstVersions.get(i))-->Line_35 $$ mapExprentMaxTypes.put(firstPair, type)[ FD ]
Line_4 $$ Map<VarVersionPair, VarType> mapExprentMinTypes = typeProcessor.getMapExprentMinTypes()-->Line_6 $$ for (VarVersionPair pair : mapExprentMinTypes.keySet()) [ FD ]
Line_8 $$ Set<Integer> set = mapVarVersions.get(pair.var)-->Line_13 $$ set.add(pair.version)[ FD ]
Line_20 $$ List<Integer> lstVersions = new ArrayList<Integer>(ent.getValue())-->Line_44 $$ lstVersions.remove(j)[ FD ]
Line_5 $$ Map<Integer, Set<Integer>> mapVarVersions = new HashMap<Integer, Set<Integer>>()-->Line_11 $$ mapVarVersions.put(pair.var, set)[ FD ]
Line_8 $$ Set<Integer> set = mapVarVersions.get(pair.var)-->Line_11 $$ mapVarVersions.put(pair.var, set)[ FD ]
Line_23 $$ VarVersionPair firstPair = new VarVersionPair(ent.getKey(), lstVersions.get(i))-->Line_24 $$ VarType firstType = mapExprentMinTypes.get(firstPair)[ FD ]
Line_22 $$ for (int i = 0; i < lstVersions.size(); i++) -->Line_25 $$ if (firstPair.var == 0 && firstPair.version == 1 && !is_method_static) [ CD ]
Line_9 $$ if (set == null) -->Line_11 $$ mapVarVersions.put(pair.var, set)[ CD ]
Line_2 $$ private static void simpleMerge(VarTypeProcessor typeProcessor, DirectGraph graph, StructMethod mt) -->Line_17 $$ Map<VarVersionPair, Integer> mapMergedVersions = new HashMap<VarVersionPair, Integer>()[ CD ]
Line_29 $$ VarVersionPair secondPair = new VarVersionPair(ent.getKey(), lstVersions.get(j))-->Line_38 $$ mapExprentMinTypes.remove(secondPair)[ FD ]
Line_2 $$ private static void simpleMerge(VarTypeProcessor typeProcessor, DirectGraph graph, StructMethod mt) -->Line_3 $$ Map<VarVersionPair, VarType> mapExprentMaxTypes = typeProcessor.getMapExprentMaxTypes()[ FD ]
Line_10 $$ set = new HashSet<Integer>()-->Line_13 $$ set.add(pair.version)[ FD ]
Line_5 $$ Map<Integer, Set<Integer>> mapVarVersions = new HashMap<Integer, Set<Integer>>()-->Line_18 $$ for (Entry<Integer, Set<Integer>> ent : mapVarVersions.entrySet()) [ FD ]
Line_18 $$ for (Entry<Integer, Set<Integer>> ent : mapVarVersions.entrySet()) -->Line_20 $$ List<Integer> lstVersions = new ArrayList<Integer>(ent.getValue())[ FD ]
Line_4 $$ Map<VarVersionPair, VarType> mapExprentMinTypes = typeProcessor.getMapExprentMinTypes()-->Line_40 $$ mapExprentMinTypes.put(firstPair, secondType)[ FD ]
Line_4 $$ Map<VarVersionPair, VarType> mapExprentMinTypes = typeProcessor.getMapExprentMinTypes()-->Line_30 $$ VarType secondType = mapExprentMinTypes.get(secondPair)[ FD ]
Line_30 $$ VarType secondType = mapExprentMinTypes.get(secondPair)-->Line_41 $$ firstType = secondType[ FD ]
Line_22 $$ for (int i = 0; i < lstVersions.size(); i++) -->Line_23 $$ VarVersionPair firstPair = new VarVersionPair(ent.getKey(), lstVersions.get(i))[ CD ]
Line_30 $$ VarType secondType = mapExprentMinTypes.get(secondPair)-->Line_31 $$ if (firstType.equals(secondType) || (firstType.equals(VarType.VARTYPE_NULL) && secondType.type == CodeConstants.TYPE_OBJECT) || (secondType.equals(VarType.VARTYPE_NULL) && firstType.type == CodeConstants.TYPE_OBJECT)) [ FD ]
Line_22 $$ for (int i = 0; i < lstVersions.size(); i++) -->Line_24 $$ VarType firstType = mapExprentMinTypes.get(firstPair)[ CD ]
Line_51 $$ if (!mapMergedVersions.isEmpty()) -->Line_52 $$ updateVersions(graph, mapMergedVersions)[ CD ]
Line_24 $$ VarType firstType = mapExprentMinTypes.get(firstPair)-->Line_39 $$ if (firstType.equals(VarType.VARTYPE_NULL)) [ FD ]
Line_19 $$ if (ent.getValue().size() > 1) -->Line_20 $$ List<Integer> lstVersions = new ArrayList<Integer>(ent.getValue())[ CD ]
Line_28 $$ for (int j = i + 1; j < lstVersions.size(); j++) -->Line_29 $$ VarVersionPair secondPair = new VarVersionPair(ent.getKey(), lstVersions.get(j))[ FD ]
Line_23 $$ VarVersionPair firstPair = new VarVersionPair(ent.getKey(), lstVersions.get(i))-->Line_40 $$ mapExprentMinTypes.put(firstPair, secondType)[ FD ]
Line_23 $$ VarVersionPair firstPair = new VarVersionPair(ent.getKey(), lstVersions.get(i))-->Line_32 $$ VarType firstMaxType = mapExprentMaxTypes.get(firstPair)[ FD ]
Line_3 $$ Map<VarVersionPair, VarType> mapExprentMaxTypes = typeProcessor.getMapExprentMaxTypes()-->Line_37 $$ mapExprentMaxTypes.remove(secondPair)[ FD ]
Line_39 $$ if (firstType.equals(VarType.VARTYPE_NULL)) -->Line_40 $$ mapExprentMinTypes.put(firstPair, secondType)[ CD ]
Line_31 $$ if (firstType.equals(secondType) || (firstType.equals(VarType.VARTYPE_NULL) && secondType.type == CodeConstants.TYPE_OBJECT) || (secondType.equals(VarType.VARTYPE_NULL) && firstType.type == CodeConstants.TYPE_OBJECT)) -->Line_45 $$ j--[ CD ]
Line_24 $$ VarType firstType = mapExprentMinTypes.get(firstPair)-->Line_31 $$ if (firstType.equals(secondType) || (firstType.equals(VarType.VARTYPE_NULL) && secondType.type == CodeConstants.TYPE_OBJECT) || (secondType.equals(VarType.VARTYPE_NULL) && firstType.type == CodeConstants.TYPE_OBJECT)) [ FD ]
Line_7 $$ if (pair.version >= 0) -->Line_9 $$ if (set == null) [ CD ]
Line_18 $$ for (Entry<Integer, Set<Integer>> ent : mapVarVersions.entrySet()) -->Line_29 $$ VarVersionPair secondPair = new VarVersionPair(ent.getKey(), lstVersions.get(j))[ FD ]
Line_31 $$ if (firstType.equals(secondType) || (firstType.equals(VarType.VARTYPE_NULL) && secondType.type == CodeConstants.TYPE_OBJECT) || (secondType.equals(VarType.VARTYPE_NULL) && firstType.type == CodeConstants.TYPE_OBJECT)) -->Line_33 $$ VarType secondMaxType = mapExprentMaxTypes.get(secondPair)[ CD ]
Line_7 $$ if (pair.version >= 0) -->Line_8 $$ Set<Integer> set = mapVarVersions.get(pair.var)[ CD ]
Line_20 $$ List<Integer> lstVersions = new ArrayList<Integer>(ent.getValue())-->Line_21 $$ Collections.sort(lstVersions)[ FD ]
Line_10 $$ set = new HashSet<Integer>()-->Line_11 $$ mapVarVersions.put(pair.var, set)[ FD ]
Line_2 $$ private static void simpleMerge(VarTypeProcessor typeProcessor, DirectGraph graph, StructMethod mt) -->Line_3 $$ Map<VarVersionPair, VarType> mapExprentMaxTypes = typeProcessor.getMapExprentMaxTypes()[ CD ]
Line_34 $$ VarType type = firstMaxType == null ? secondMaxType : secondMaxType == null ? firstMaxType : VarType.getCommonMinType(firstMaxType, secondMaxType)-->Line_35 $$ mapExprentMaxTypes.put(firstPair, type)[ FD ]
Line_31 $$ if (firstType.equals(secondType) || (firstType.equals(VarType.VARTYPE_NULL) && secondType.type == CodeConstants.TYPE_OBJECT) || (secondType.equals(VarType.VARTYPE_NULL) && firstType.type == CodeConstants.TYPE_OBJECT)) -->Line_36 $$ mapMergedVersions.put(secondPair, firstPair.version)[ CD ]
Line_2 $$ private static void simpleMerge(VarTypeProcessor typeProcessor, DirectGraph graph, StructMethod mt) -->Line_51 $$ if (!mapMergedVersions.isEmpty()) [ CD ]
Line_2 $$ private static void simpleMerge(VarTypeProcessor typeProcessor, DirectGraph graph, StructMethod mt) -->Line_16 $$ boolean is_method_static = mt.hasModifier(CodeConstants.ACC_STATIC)[ CD ]
Line_20 $$ List<Integer> lstVersions = new ArrayList<Integer>(ent.getValue())-->Line_28 $$ for (int j = i + 1; j < lstVersions.size(); j++) [ FD ]
Line_31 $$ if (firstType.equals(secondType) || (firstType.equals(VarType.VARTYPE_NULL) && secondType.type == CodeConstants.TYPE_OBJECT) || (secondType.equals(VarType.VARTYPE_NULL) && firstType.type == CodeConstants.TYPE_OBJECT)) -->Line_34 $$ VarType type = firstMaxType == null ? secondMaxType : secondMaxType == null ? firstMaxType : VarType.getCommonMinType(firstMaxType, secondMaxType)[ CD ]
Line_9 $$ if (set == null) -->Line_10 $$ set = new HashSet<Integer>()[ CD ]
Line_3 $$ Map<VarVersionPair, VarType> mapExprentMaxTypes = typeProcessor.getMapExprentMaxTypes()-->Line_33 $$ VarType secondMaxType = mapExprentMaxTypes.get(secondPair)[ FD ]
Line_19 $$ if (ent.getValue().size() > 1) -->Line_21 $$ Collections.sort(lstVersions)[ CD ]
Line_41 $$ firstType = secondType-->Line_39 $$ if (firstType.equals(VarType.VARTYPE_NULL)) [ FD ]
Line_20 $$ List<Integer> lstVersions = new ArrayList<Integer>(ent.getValue())-->Line_22 $$ for (int i = 0; i < lstVersions.size(); i++) [ FD ]
Line_4 $$ Map<VarVersionPair, VarType> mapExprentMinTypes = typeProcessor.getMapExprentMinTypes()-->Line_24 $$ VarType firstType = mapExprentMinTypes.get(firstPair)[ FD ]
Line_18 $$ for (Entry<Integer, Set<Integer>> ent : mapVarVersions.entrySet()) -->Line_23 $$ VarVersionPair firstPair = new VarVersionPair(ent.getKey(), lstVersions.get(i))[ FD ]
Line_20 $$ List<Integer> lstVersions = new ArrayList<Integer>(ent.getValue())-->Line_23 $$ VarVersionPair firstPair = new VarVersionPair(ent.getKey(), lstVersions.get(i))[ FD ]
Line_29 $$ VarVersionPair secondPair = new VarVersionPair(ent.getKey(), lstVersions.get(j))-->Line_33 $$ VarType secondMaxType = mapExprentMaxTypes.get(secondPair)[ FD ]
Line_28 $$ for (int j = i + 1; j < lstVersions.size(); j++) -->Line_45 $$ j--[ FD ]
Line_41 $$ firstType = secondType-->Line_31 $$ if (firstType.equals(secondType) || (firstType.equals(VarType.VARTYPE_NULL) && secondType.type == CodeConstants.TYPE_OBJECT) || (secondType.equals(VarType.VARTYPE_NULL) && firstType.type == CodeConstants.TYPE_OBJECT)) [ FD ]
Line_23 $$ VarVersionPair firstPair = new VarVersionPair(ent.getKey(), lstVersions.get(i))-->Line_43 $$ typeProcessor.getMapFinalVars().put(firstPair, VarTypeProcessor.VAR_NON_FINAL)[ FD ]
Line_29 $$ VarVersionPair secondPair = new VarVersionPair(ent.getKey(), lstVersions.get(j))-->Line_30 $$ VarType secondType = mapExprentMinTypes.get(secondPair)[ FD ]
Line_32 $$ VarType firstMaxType = mapExprentMaxTypes.get(firstPair)-->Line_34 $$ VarType type = firstMaxType == null ? secondMaxType : secondMaxType == null ? firstMaxType : VarType.getCommonMinType(firstMaxType, secondMaxType)[ FD ]
Line_16 $$ boolean is_method_static = mt.hasModifier(CodeConstants.ACC_STATIC)-->Line_25 $$ if (firstPair.var == 0 && firstPair.version == 1 && !is_method_static) [ FD ]
Line_7 $$ if (pair.version >= 0) -->Line_13 $$ set.add(pair.version)[ CD ]
Line_28 $$ for (int j = i + 1; j < lstVersions.size(); j++) -->Line_29 $$ VarVersionPair secondPair = new VarVersionPair(ent.getKey(), lstVersions.get(j))[ CD ]
Line_33 $$ VarType secondMaxType = mapExprentMaxTypes.get(secondPair)-->Line_34 $$ VarType type = firstMaxType == null ? secondMaxType : secondMaxType == null ? firstMaxType : VarType.getCommonMinType(firstMaxType, secondMaxType)[ FD ]
Line_28 $$ for (int j = i + 1; j < lstVersions.size(); j++) -->Line_44 $$ lstVersions.remove(j)[ FD ]
Line_2 $$ private static void simpleMerge(VarTypeProcessor typeProcessor, DirectGraph graph, StructMethod mt) -->Line_16 $$ boolean is_method_static = mt.hasModifier(CodeConstants.ACC_STATIC)[ FD ]
Line_31 $$ if (firstType.equals(secondType) || (firstType.equals(VarType.VARTYPE_NULL) && secondType.type == CodeConstants.TYPE_OBJECT) || (secondType.equals(VarType.VARTYPE_NULL) && firstType.type == CodeConstants.TYPE_OBJECT)) -->Line_39 $$ if (firstType.equals(VarType.VARTYPE_NULL)) [ CD ]
Line_2 $$ private static void simpleMerge(VarTypeProcessor typeProcessor, DirectGraph graph, StructMethod mt) -->Line_4 $$ Map<VarVersionPair, VarType> mapExprentMinTypes = typeProcessor.getMapExprentMinTypes()[ FD ]
Line_17 $$ Map<VarVersionPair, Integer> mapMergedVersions = new HashMap<VarVersionPair, Integer>()-->Line_52 $$ updateVersions(graph, mapMergedVersions)[ FD ]
Line_30 $$ VarType secondType = mapExprentMinTypes.get(secondPair)-->Line_40 $$ mapExprentMinTypes.put(firstPair, secondType)[ FD ]
Line_29 $$ VarVersionPair secondPair = new VarVersionPair(ent.getKey(), lstVersions.get(j))-->Line_36 $$ mapMergedVersions.put(secondPair, firstPair.version)[ FD ]
Line_31 $$ if (firstType.equals(secondType) || (firstType.equals(VarType.VARTYPE_NULL) && secondType.type == CodeConstants.TYPE_OBJECT) || (secondType.equals(VarType.VARTYPE_NULL) && firstType.type == CodeConstants.TYPE_OBJECT)) -->Line_35 $$ mapExprentMaxTypes.put(firstPair, type)[ CD ]
Line_18 $$ for (Entry<Integer, Set<Integer>> ent : mapVarVersions.entrySet()) -->Line_19 $$ if (ent.getValue().size() > 1) [ FD ]
Line_17 $$ Map<VarVersionPair, Integer> mapMergedVersions = new HashMap<VarVersionPair, Integer>()-->Line_36 $$ mapMergedVersions.put(secondPair, firstPair.version)[ FD ]
Line_2 $$ private static void simpleMerge(VarTypeProcessor typeProcessor, DirectGraph graph, StructMethod mt) -->Line_4 $$ Map<VarVersionPair, VarType> mapExprentMinTypes = typeProcessor.getMapExprentMinTypes()[ CD ]
Line_31 $$ if (firstType.equals(secondType) || (firstType.equals(VarType.VARTYPE_NULL) && secondType.type == CodeConstants.TYPE_OBJECT) || (secondType.equals(VarType.VARTYPE_NULL) && firstType.type == CodeConstants.TYPE_OBJECT)) -->Line_43 $$ typeProcessor.getMapFinalVars().put(firstPair, VarTypeProcessor.VAR_NON_FINAL)[ CD ]
