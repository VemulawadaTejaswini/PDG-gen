Line_7 $$ SelfNamingTestBean testBean1 = new SelfNamingTestBean()-->Line_8 $$ testBean1.setObjectName(objectName1)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_25 $$ exporter.setBeanFactory(factory)[ CD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_9 $$ SelfNamingTestBean testBean2 = new SelfNamingTestBean()[ CD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_12 $$ factory.registerSingleton(beanName1, testBean1)[ CD ]
Line_11 $$ DefaultListableBeanFactory factory = new DefaultListableBeanFactory()-->Line_25 $$ exporter.setBeanFactory(factory)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_11 $$ DefaultListableBeanFactory factory = new DefaultListableBeanFactory()[ CD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_26 $$ start(exporter)[ CD ]
Line_7 $$ SelfNamingTestBean testBean1 = new SelfNamingTestBean()-->Line_12 $$ factory.registerSingleton(beanName1, testBean1)[ FD ]
Line_14 $$ Map<String, Object> beans = new HashMap<String, Object>()-->Line_16 $$ beans.put(beanName2, testBean2)[ FD ]
Line_9 $$ SelfNamingTestBean testBean2 = new SelfNamingTestBean()-->Line_13 $$ factory.registerSingleton(beanName2, testBean2)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_14 $$ Map<String, Object> beans = new HashMap<String, Object>()[ CD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_18 $$ CountingAttributeChangeNotificationListener listener = new CountingAttributeChangeNotificationListener()[ CD ]
Line_18 $$ CountingAttributeChangeNotificationListener listener = new CountingAttributeChangeNotificationListener()-->Line_30 $$ assertEquals("Listener not notified for testBean1", 1, listener.getCount("Age"))[ FD ]
Line_21 $$ MBeanExporter exporter = new MBeanExporter()-->Line_22 $$ exporter.setServer(server)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_3 $$ String beanName1 = "testBean1"[ CD ]
Line_11 $$ DefaultListableBeanFactory factory = new DefaultListableBeanFactory()-->Line_12 $$ factory.registerSingleton(beanName1, testBean1)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_16 $$ beans.put(beanName2, testBean2)[ CD ]
Line_14 $$ Map<String, Object> beans = new HashMap<String, Object>()-->Line_23 $$ exporter.setBeans(beans)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_13 $$ factory.registerSingleton(beanName2, testBean2)[ CD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_29 $$ server.setAttribute(ObjectNameManager.getInstance(objectName1), new Attribute("Age", new Integer(77)))[ CD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_31 $$ server.setAttribute(ObjectNameManager.getInstance(objectName2), new Attribute("Age", new Integer(33)))[ CD ]
Line_21 $$ MBeanExporter exporter = new MBeanExporter()-->Line_24 $$ exporter.setNotificationListenerMappings(listenerMappings)[ FD ]
Line_3 $$ String beanName1 = "testBean1"-->Line_12 $$ factory.registerSingleton(beanName1, testBean1)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_7 $$ SelfNamingTestBean testBean1 = new SelfNamingTestBean()[ CD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_23 $$ exporter.setBeans(beans)[ CD ]
Line_6 $$ ObjectName objectName2 = ObjectName.getInstance("spring:name=Test2")-->Line_10 $$ testBean2.setObjectName(objectName2)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_28 $$ assertIsRegistered("Should have registered MBean", objectName2)[ CD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_20 $$ listenerMappings.put(beanName2, listener)[ CD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_22 $$ exporter.setServer(server)[ CD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_4 $$ String beanName2 = "testBean2"[ CD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_19 $$ listenerMappings.put(beanName1, listener)[ CD ]
Line_21 $$ MBeanExporter exporter = new MBeanExporter()-->Line_25 $$ exporter.setBeanFactory(factory)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_32 $$ assertEquals("Listener not notified for testBean2", 2, listener.getCount("Age"))[ CD ]
Line_7 $$ SelfNamingTestBean testBean1 = new SelfNamingTestBean()-->Line_15 $$ beans.put(beanName1, testBean1)[ FD ]
Line_18 $$ CountingAttributeChangeNotificationListener listener = new CountingAttributeChangeNotificationListener()-->Line_20 $$ listenerMappings.put(beanName2, listener)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_27 $$ assertIsRegistered("Should have registered MBean", objectName1)[ CD ]
Line_4 $$ String beanName2 = "testBean2"-->Line_16 $$ beans.put(beanName2, testBean2)[ FD ]
Line_21 $$ MBeanExporter exporter = new MBeanExporter()-->Line_26 $$ start(exporter)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_6 $$ ObjectName objectName2 = ObjectName.getInstance("spring:name=Test2")[ CD ]
Line_17 $$ Map listenerMappings = new HashMap()-->Line_24 $$ exporter.setNotificationListenerMappings(listenerMappings)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_15 $$ beans.put(beanName1, testBean1)[ CD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_24 $$ exporter.setNotificationListenerMappings(listenerMappings)[ CD ]
Line_9 $$ SelfNamingTestBean testBean2 = new SelfNamingTestBean()-->Line_16 $$ beans.put(beanName2, testBean2)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_21 $$ MBeanExporter exporter = new MBeanExporter()[ CD ]
Line_6 $$ ObjectName objectName2 = ObjectName.getInstance("spring:name=Test2")-->Line_28 $$ assertIsRegistered("Should have registered MBean", objectName2)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_30 $$ assertEquals("Listener not notified for testBean1", 1, listener.getCount("Age"))[ CD ]
Line_17 $$ Map listenerMappings = new HashMap()-->Line_19 $$ listenerMappings.put(beanName1, listener)[ FD ]
Line_11 $$ DefaultListableBeanFactory factory = new DefaultListableBeanFactory()-->Line_13 $$ factory.registerSingleton(beanName2, testBean2)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_8 $$ testBean1.setObjectName(objectName1)[ CD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_10 $$ testBean2.setObjectName(objectName2)[ CD ]
Line_14 $$ Map<String, Object> beans = new HashMap<String, Object>()-->Line_15 $$ beans.put(beanName1, testBean1)[ FD ]
Line_18 $$ CountingAttributeChangeNotificationListener listener = new CountingAttributeChangeNotificationListener()-->Line_19 $$ listenerMappings.put(beanName1, listener)[ FD ]
Line_3 $$ String beanName1 = "testBean1"-->Line_15 $$ beans.put(beanName1, testBean1)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_5 $$ ObjectName objectName1 = ObjectName.getInstance("spring:name=Test1")[ CD ]
Line_4 $$ String beanName2 = "testBean2"-->Line_20 $$ listenerMappings.put(beanName2, listener)[ FD ]
Line_9 $$ SelfNamingTestBean testBean2 = new SelfNamingTestBean()-->Line_10 $$ testBean2.setObjectName(objectName2)[ FD ]
Line_5 $$ ObjectName objectName1 = ObjectName.getInstance("spring:name=Test1")-->Line_29 $$ server.setAttribute(ObjectNameManager.getInstance(objectName1), new Attribute("Age", new Integer(77)))[ FD ]
Line_4 $$ String beanName2 = "testBean2"-->Line_13 $$ factory.registerSingleton(beanName2, testBean2)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithTwoBeanNamesMappedToDifferentBeanInstances() throws Exception -->Line_17 $$ Map listenerMappings = new HashMap()[ CD ]
Line_6 $$ ObjectName objectName2 = ObjectName.getInstance("spring:name=Test2")-->Line_31 $$ server.setAttribute(ObjectNameManager.getInstance(objectName2), new Attribute("Age", new Integer(33)))[ FD ]
Line_18 $$ CountingAttributeChangeNotificationListener listener = new CountingAttributeChangeNotificationListener()-->Line_32 $$ assertEquals("Listener not notified for testBean2", 2, listener.getCount("Age"))[ FD ]
Line_21 $$ MBeanExporter exporter = new MBeanExporter()-->Line_23 $$ exporter.setBeans(beans)[ FD ]
Line_17 $$ Map listenerMappings = new HashMap()-->Line_20 $$ listenerMappings.put(beanName2, listener)[ FD ]
Line_5 $$ ObjectName objectName1 = ObjectName.getInstance("spring:name=Test1")-->Line_27 $$ assertIsRegistered("Should have registered MBean", objectName1)[ FD ]
Line_3 $$ String beanName1 = "testBean1"-->Line_19 $$ listenerMappings.put(beanName1, listener)[ FD ]
Line_5 $$ ObjectName objectName1 = ObjectName.getInstance("spring:name=Test1")-->Line_8 $$ testBean1.setObjectName(objectName1)[ FD ]
