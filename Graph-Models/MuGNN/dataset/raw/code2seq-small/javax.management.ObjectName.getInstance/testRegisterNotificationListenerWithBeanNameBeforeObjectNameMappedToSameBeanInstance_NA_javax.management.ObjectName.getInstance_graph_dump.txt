Line_12 $$ CountingAttributeChangeNotificationListener listener = new CountingAttributeChangeNotificationListener()-->Line_14 $$ listenerMappings.put(objectName, listener)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithBeanNameBeforeObjectNameMappedToSameBeanInstance() throws Exception -->Line_9 $$ Map<String, Object> beans = new HashMap<String, Object>()[ CD ]
Line_5 $$ SelfNamingTestBean testBean = new SelfNamingTestBean()-->Line_8 $$ factory.registerSingleton(beanName, testBean)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithBeanNameBeforeObjectNameMappedToSameBeanInstance() throws Exception -->Line_6 $$ testBean.setObjectName(objectName)[ CD ]
Line_4 $$ ObjectName objectName = ObjectName.getInstance("spring:name=Test")-->Line_6 $$ testBean.setObjectName(objectName)[ FD ]
Line_9 $$ Map<String, Object> beans = new HashMap<String, Object>()-->Line_10 $$ beans.put(beanName, testBean)[ FD ]
Line_5 $$ SelfNamingTestBean testBean = new SelfNamingTestBean()-->Line_6 $$ testBean.setObjectName(objectName)[ FD ]
Line_7 $$ DefaultListableBeanFactory factory = new DefaultListableBeanFactory()-->Line_19 $$ exporter.setBeanFactory(factory)[ FD ]
Line_3 $$ String beanName = "testBean"-->Line_8 $$ factory.registerSingleton(beanName, testBean)[ FD ]
Line_7 $$ DefaultListableBeanFactory factory = new DefaultListableBeanFactory()-->Line_8 $$ factory.registerSingleton(beanName, testBean)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithBeanNameBeforeObjectNameMappedToSameBeanInstance() throws Exception -->Line_23 $$ assertEquals("Listener should have been notified exactly once", 1, listener.getCount("Age"))[ CD ]
Line_11 $$ Map listenerMappings = new HashMap()-->Line_14 $$ listenerMappings.put(objectName, listener)[ FD ]
Line_4 $$ ObjectName objectName = ObjectName.getInstance("spring:name=Test")-->Line_14 $$ listenerMappings.put(objectName, listener)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithBeanNameBeforeObjectNameMappedToSameBeanInstance() throws Exception -->Line_16 $$ exporter.setServer(server)[ CD ]
Line_2 $$ public void testRegisterNotificationListenerWithBeanNameBeforeObjectNameMappedToSameBeanInstance() throws Exception -->Line_4 $$ ObjectName objectName = ObjectName.getInstance("spring:name=Test")[ CD ]
Line_2 $$ public void testRegisterNotificationListenerWithBeanNameBeforeObjectNameMappedToSameBeanInstance() throws Exception -->Line_12 $$ CountingAttributeChangeNotificationListener listener = new CountingAttributeChangeNotificationListener()[ CD ]
Line_15 $$ MBeanExporter exporter = new MBeanExporter()-->Line_17 $$ exporter.setBeans(beans)[ FD ]
Line_11 $$ Map listenerMappings = new HashMap()-->Line_18 $$ exporter.setNotificationListenerMappings(listenerMappings)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithBeanNameBeforeObjectNameMappedToSameBeanInstance() throws Exception -->Line_10 $$ beans.put(beanName, testBean)[ CD ]
Line_2 $$ public void testRegisterNotificationListenerWithBeanNameBeforeObjectNameMappedToSameBeanInstance() throws Exception -->Line_14 $$ listenerMappings.put(objectName, listener)[ CD ]
Line_2 $$ public void testRegisterNotificationListenerWithBeanNameBeforeObjectNameMappedToSameBeanInstance() throws Exception -->Line_8 $$ factory.registerSingleton(beanName, testBean)[ CD ]
Line_2 $$ public void testRegisterNotificationListenerWithBeanNameBeforeObjectNameMappedToSameBeanInstance() throws Exception -->Line_5 $$ SelfNamingTestBean testBean = new SelfNamingTestBean()[ CD ]
Line_5 $$ SelfNamingTestBean testBean = new SelfNamingTestBean()-->Line_10 $$ beans.put(beanName, testBean)[ FD ]
Line_3 $$ String beanName = "testBean"-->Line_13 $$ listenerMappings.put(beanName, listener)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithBeanNameBeforeObjectNameMappedToSameBeanInstance() throws Exception -->Line_20 $$ start(exporter)[ CD ]
Line_12 $$ CountingAttributeChangeNotificationListener listener = new CountingAttributeChangeNotificationListener()-->Line_23 $$ assertEquals("Listener should have been notified exactly once", 1, listener.getCount("Age"))[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithBeanNameBeforeObjectNameMappedToSameBeanInstance() throws Exception -->Line_15 $$ MBeanExporter exporter = new MBeanExporter()[ CD ]
Line_2 $$ public void testRegisterNotificationListenerWithBeanNameBeforeObjectNameMappedToSameBeanInstance() throws Exception -->Line_11 $$ Map listenerMappings = new HashMap()[ CD ]
Line_2 $$ public void testRegisterNotificationListenerWithBeanNameBeforeObjectNameMappedToSameBeanInstance() throws Exception -->Line_13 $$ listenerMappings.put(beanName, listener)[ CD ]
Line_15 $$ MBeanExporter exporter = new MBeanExporter()-->Line_18 $$ exporter.setNotificationListenerMappings(listenerMappings)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithBeanNameBeforeObjectNameMappedToSameBeanInstance() throws Exception -->Line_22 $$ server.setAttribute(objectName, new Attribute("Age", new Integer(77)))[ CD ]
Line_2 $$ public void testRegisterNotificationListenerWithBeanNameBeforeObjectNameMappedToSameBeanInstance() throws Exception -->Line_7 $$ DefaultListableBeanFactory factory = new DefaultListableBeanFactory()[ CD ]
Line_11 $$ Map listenerMappings = new HashMap()-->Line_13 $$ listenerMappings.put(beanName, listener)[ FD ]
Line_4 $$ ObjectName objectName = ObjectName.getInstance("spring:name=Test")-->Line_22 $$ server.setAttribute(objectName, new Attribute("Age", new Integer(77)))[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithBeanNameBeforeObjectNameMappedToSameBeanInstance() throws Exception -->Line_3 $$ String beanName = "testBean"[ CD ]
Line_4 $$ ObjectName objectName = ObjectName.getInstance("spring:name=Test")-->Line_21 $$ assertIsRegistered("Should have registered MBean", objectName)[ FD ]
Line_15 $$ MBeanExporter exporter = new MBeanExporter()-->Line_16 $$ exporter.setServer(server)[ FD ]
Line_9 $$ Map<String, Object> beans = new HashMap<String, Object>()-->Line_17 $$ exporter.setBeans(beans)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithBeanNameBeforeObjectNameMappedToSameBeanInstance() throws Exception -->Line_19 $$ exporter.setBeanFactory(factory)[ CD ]
Line_2 $$ public void testRegisterNotificationListenerWithBeanNameBeforeObjectNameMappedToSameBeanInstance() throws Exception -->Line_21 $$ assertIsRegistered("Should have registered MBean", objectName)[ CD ]
Line_15 $$ MBeanExporter exporter = new MBeanExporter()-->Line_20 $$ start(exporter)[ FD ]
Line_3 $$ String beanName = "testBean"-->Line_10 $$ beans.put(beanName, testBean)[ FD ]
Line_15 $$ MBeanExporter exporter = new MBeanExporter()-->Line_19 $$ exporter.setBeanFactory(factory)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithBeanNameBeforeObjectNameMappedToSameBeanInstance() throws Exception -->Line_18 $$ exporter.setNotificationListenerMappings(listenerMappings)[ CD ]
Line_12 $$ CountingAttributeChangeNotificationListener listener = new CountingAttributeChangeNotificationListener()-->Line_13 $$ listenerMappings.put(beanName, listener)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerWithBeanNameBeforeObjectNameMappedToSameBeanInstance() throws Exception -->Line_17 $$ exporter.setBeans(beans)[ CD ]
