Line_3 $$ ObjectName objectName = ObjectName.getInstance("spring:name=Test")-->Line_24 $$ server.setAttribute(objectName, new Attribute(attributeName, "Rob Harrop"))[ FD ]
Line_2 $$ public void testNotificationListenerRegistrarWithMultipleNames() throws Exception -->Line_11 $$ exporter.setServer(server)[ CD ]
Line_15 $$ NotificationListenerRegistrar registrar = new NotificationListenerRegistrar()-->Line_17 $$ registrar.setNotificationListener(listener)[ FD ]
Line_2 $$ public void testNotificationListenerRegistrarWithMultipleNames() throws Exception -->Line_15 $$ NotificationListenerRegistrar registrar = new NotificationListenerRegistrar()[ CD ]
Line_2 $$ public void testNotificationListenerRegistrarWithMultipleNames() throws Exception -->Line_6 $$ JmxTestBean bean2 = new JmxTestBean()[ CD ]
Line_2 $$ public void testNotificationListenerRegistrarWithMultipleNames() throws Exception -->Line_14 $$ CountingAttributeChangeNotificationListener listener = new CountingAttributeChangeNotificationListener()[ CD ]
Line_7 $$ Map<String, Object> beans = new HashMap<String, Object>()-->Line_8 $$ beans.put(objectName.getCanonicalName(), bean)[ FD ]
Line_2 $$ public void testNotificationListenerRegistrarWithMultipleNames() throws Exception -->Line_25 $$ assertEquals("Listener notified after destruction", 1, listener.getCount(attributeName))[ CD ]
Line_6 $$ JmxTestBean bean2 = new JmxTestBean()-->Line_9 $$ beans.put(objectName2.getCanonicalName(), bean2)[ FD ]
Line_14 $$ CountingAttributeChangeNotificationListener listener = new CountingAttributeChangeNotificationListener()-->Line_17 $$ registrar.setNotificationListener(listener)[ FD ]
Line_15 $$ NotificationListenerRegistrar registrar = new NotificationListenerRegistrar()-->Line_19 $$ registrar.afterPropertiesSet()[ FD ]
Line_2 $$ public void testNotificationListenerRegistrarWithMultipleNames() throws Exception -->Line_7 $$ Map<String, Object> beans = new HashMap<String, Object>()[ CD ]
Line_2 $$ public void testNotificationListenerRegistrarWithMultipleNames() throws Exception -->Line_22 $$ assertEquals("Listener not notified", 1, listener.getCount(attributeName))[ CD ]
Line_20 $$ String attributeName = "Name"-->Line_22 $$ assertEquals("Listener not notified", 1, listener.getCount(attributeName))[ FD ]
Line_2 $$ public void testNotificationListenerRegistrarWithMultipleNames() throws Exception -->Line_12 $$ exporter.setBeans(beans)[ CD ]
Line_2 $$ public void testNotificationListenerRegistrarWithMultipleNames() throws Exception -->Line_17 $$ registrar.setNotificationListener(listener)[ CD ]
Line_15 $$ NotificationListenerRegistrar registrar = new NotificationListenerRegistrar()-->Line_16 $$ registrar.setServer(server)[ FD ]
Line_15 $$ NotificationListenerRegistrar registrar = new NotificationListenerRegistrar()-->Line_18 $$ registrar.setMappedObjectNames(new String[] [ FD ]
Line_2 $$ public void testNotificationListenerRegistrarWithMultipleNames() throws Exception -->Line_21 $$ server.setAttribute(objectName, new Attribute(attributeName, "Rob Harrop"))[ CD ]
Line_14 $$ CountingAttributeChangeNotificationListener listener = new CountingAttributeChangeNotificationListener()-->Line_22 $$ assertEquals("Listener not notified", 1, listener.getCount(attributeName))[ FD ]
Line_10 $$ MBeanExporter exporter = new MBeanExporter()-->Line_13 $$ start(exporter)[ FD ]
Line_2 $$ public void testNotificationListenerRegistrarWithMultipleNames() throws Exception -->Line_9 $$ beans.put(objectName2.getCanonicalName(), bean2)[ CD ]
Line_5 $$ JmxTestBean bean = new JmxTestBean()-->Line_8 $$ beans.put(objectName.getCanonicalName(), bean)[ FD ]
Line_7 $$ Map<String, Object> beans = new HashMap<String, Object>()-->Line_9 $$ beans.put(objectName2.getCanonicalName(), bean2)[ FD ]
Line_2 $$ public void testNotificationListenerRegistrarWithMultipleNames() throws Exception -->Line_10 $$ MBeanExporter exporter = new MBeanExporter()[ CD ]
Line_2 $$ public void testNotificationListenerRegistrarWithMultipleNames() throws Exception -->Line_23 $$ registrar.destroy()[ CD ]
Line_2 $$ public void testNotificationListenerRegistrarWithMultipleNames() throws Exception -->Line_4 $$ ObjectName objectName2 = ObjectName.getInstance("spring:name=Test2")[ CD ]
Line_20 $$ String attributeName = "Name"-->Line_25 $$ assertEquals("Listener notified after destruction", 1, listener.getCount(attributeName))[ FD ]
Line_2 $$ public void testNotificationListenerRegistrarWithMultipleNames() throws Exception -->Line_5 $$ JmxTestBean bean = new JmxTestBean()[ CD ]
Line_2 $$ public void testNotificationListenerRegistrarWithMultipleNames() throws Exception -->Line_13 $$ start(exporter)[ CD ]
Line_7 $$ Map<String, Object> beans = new HashMap<String, Object>()-->Line_12 $$ exporter.setBeans(beans)[ FD ]
Line_2 $$ public void testNotificationListenerRegistrarWithMultipleNames() throws Exception -->Line_20 $$ String attributeName = "Name"[ CD ]
Line_14 $$ CountingAttributeChangeNotificationListener listener = new CountingAttributeChangeNotificationListener()-->Line_25 $$ assertEquals("Listener notified after destruction", 1, listener.getCount(attributeName))[ FD ]
Line_3 $$ ObjectName objectName = ObjectName.getInstance("spring:name=Test")-->Line_8 $$ beans.put(objectName.getCanonicalName(), bean)[ FD ]
Line_2 $$ public void testNotificationListenerRegistrarWithMultipleNames() throws Exception -->Line_24 $$ server.setAttribute(objectName, new Attribute(attributeName, "Rob Harrop"))[ CD ]
Line_4 $$ ObjectName objectName2 = ObjectName.getInstance("spring:name=Test2")-->Line_9 $$ beans.put(objectName2.getCanonicalName(), bean2)[ FD ]
Line_15 $$ NotificationListenerRegistrar registrar = new NotificationListenerRegistrar()-->Line_23 $$ registrar.destroy()[ FD ]
Line_2 $$ public void testNotificationListenerRegistrarWithMultipleNames() throws Exception -->Line_3 $$ ObjectName objectName = ObjectName.getInstance("spring:name=Test")[ CD ]
Line_2 $$ public void testNotificationListenerRegistrarWithMultipleNames() throws Exception -->Line_19 $$ registrar.afterPropertiesSet()[ CD ]
Line_10 $$ MBeanExporter exporter = new MBeanExporter()-->Line_11 $$ exporter.setServer(server)[ FD ]
Line_2 $$ public void testNotificationListenerRegistrarWithMultipleNames() throws Exception -->Line_18 $$ registrar.setMappedObjectNames(new String[] [ CD ]
Line_10 $$ MBeanExporter exporter = new MBeanExporter()-->Line_12 $$ exporter.setBeans(beans)[ FD ]
Line_2 $$ public void testNotificationListenerRegistrarWithMultipleNames() throws Exception -->Line_8 $$ beans.put(objectName.getCanonicalName(), bean)[ CD ]
Line_2 $$ public void testNotificationListenerRegistrarWithMultipleNames() throws Exception -->Line_16 $$ registrar.setServer(server)[ CD ]
Line_3 $$ ObjectName objectName = ObjectName.getInstance("spring:name=Test")-->Line_21 $$ server.setAttribute(objectName, new Attribute(attributeName, "Rob Harrop"))[ FD ]
