Line_2 $$ private AffineTransform setMirrorTransformIfNeeded(Graphics2D g, int offset, int width) -->Line_4 $$ AffineTransform old = g.getTransform()[ FD ]
Line_3 $$ if (isMirrored()) -->Line_5 $$ AffineTransform transform = new AffineTransform(old)[ CD ]
Line_2 $$ private AffineTransform setMirrorTransformIfNeeded(Graphics2D g, int offset, int width) -->Line_7 $$ transform.translate(-offset * 2 - width, 0)[ FD ]
Line_3 $$ if (isMirrored()) -->Line_11 $$ return null[ CD ]
Line_2 $$ private AffineTransform setMirrorTransformIfNeeded(Graphics2D g, int offset, int width) -->Line_8 $$ g.setTransform(transform)[ FD ]
Line_5 $$ AffineTransform transform = new AffineTransform(old)-->Line_7 $$ transform.translate(-offset * 2 - width, 0)[ FD ]
Line_5 $$ AffineTransform transform = new AffineTransform(old)-->Line_6 $$ transform.scale(-1, 1)[ FD ]
Line_5 $$ AffineTransform transform = new AffineTransform(old)-->Line_8 $$ g.setTransform(transform)[ FD ]
Line_3 $$ if (isMirrored()) -->Line_7 $$ transform.translate(-offset * 2 - width, 0)[ CD ]
Line_3 $$ if (isMirrored()) -->Line_9 $$ return old[ CD ]
Line_3 $$ if (isMirrored()) -->Line_6 $$ transform.scale(-1, 1)[ CD ]
Line_3 $$ if (isMirrored()) -->Line_4 $$ AffineTransform old = g.getTransform()[ CD ]
Line_2 $$ private AffineTransform setMirrorTransformIfNeeded(Graphics2D g, int offset, int width) -->Line_3 $$ if (isMirrored()) [ CD ]
Line_3 $$ if (isMirrored()) -->Line_8 $$ g.setTransform(transform)[ CD ]
