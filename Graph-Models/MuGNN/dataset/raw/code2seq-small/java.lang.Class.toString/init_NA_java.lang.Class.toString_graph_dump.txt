Line_2 $$ public static void init() throws IOException -->Line_4 $$ injector = new ModulesBuilder().add(new SettingsModule(settings, new SettingsFilter(settings)), new ThreadPoolModule(new ThreadPool(settings)), new IndicesModule() [ CD ]
Line_4 $$ injector = new ModulesBuilder().add(new SettingsModule(settings, new SettingsFilter(settings)), new ThreadPoolModule(new ThreadPool(settings)), new IndicesModule() -->Line_11 $$ bind(NamedWriteableRegistry.class).asEagerSingleton()[ CD ]
Line_2 $$ public static void init() throws IOException -->Line_14 $$ indicesQueriesRegistry = injector.getInstance(IndicesQueriesRegistry.class)[ CD ]
Line_2 $$ public static void init() throws IOException -->Line_3 $$ Settings settings = Settings.settingsBuilder().put("name", SearchSourceBuilderTests.class.toString()).put("path.home", createTempDir()).build()[ CD ]
Line_4 $$ injector = new ModulesBuilder().add(new SettingsModule(settings, new SettingsFilter(settings)), new ThreadPoolModule(new ThreadPool(settings)), new IndicesModule() -->Line_6 $$ bindQueryParsersExtension()[ CD ]
Line_4 $$ injector = new ModulesBuilder().add(new SettingsModule(settings, new SettingsFilter(settings)), new ThreadPoolModule(new ThreadPool(settings)), new IndicesModule() -->Line_10 $$ Multibinder.newSetBinder(binder(), ScoreFunctionParser.class)[ CD ]
Line_2 $$ public static void init() throws IOException -->Line_15 $$ namedWriteableRegistry = injector.getInstance(NamedWriteableRegistry.class)[ CD ]
