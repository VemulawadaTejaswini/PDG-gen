Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_24 $$ final List<InterceptorBindingMetaData> bindingsForAllEJBs = new ArrayList<InterceptorBindingMetaData>()[ CD ]
Line_63 $$ final Map<Method, List<InterceptorBindingMetaData>> methodInterceptors = new HashMap<Method, List<InterceptorBindingMetaData>>()-->Line_118 $$ methodInterceptors.put(resolvedMethod, methodSpecificInterceptorBindings)[ FD ]
Line_36 $$ if (bindings == null) -->Line_37 $$ bindings = new ArrayList<InterceptorBindingMetaData>()[ CD ]
Line_85 $$ final NamedMethodMetaData methodData = binding.getMethod()-->Line_101 $$ if (!method.getParameterTypes()[i].getName().equals(methodData.getMethodParams().get(i))) [ FD ]
Line_55 $$ final EJBComponentDescription ejbComponentDescription = (EJBComponentDescription) componentDescription-->Line_58 $$ componentClass = module.getClassLoader().loadClass(ejbComponentDescription.getComponentClassName())[ FD ]
Line_95 $$ resolvedMethod = methods.iterator().next()-->Line_107 $$ resolvedMethod = method[ FD ]
Line_115 $$ List<InterceptorBindingMetaData> methodSpecificInterceptorBindings = methodInterceptors.get(resolvedMethod)-->Line_116 $$ if (methodSpecificInterceptorBindings == null) [ FD ]
Line_78 $$ if (classLevelAbsoluteOrder) -->Line_81 $$ classLevelAbsoluteOrder = true[ CD ]
Line_44 $$ for (InterceptorBindingMetaData binding : bindingsForAllEJBs) -->Line_127 $$ if (binding.isTotalOrdering()) [ FD ]
Line_107 $$ resolvedMethod = method-->Line_118 $$ methodInterceptors.put(resolvedMethod, methodSpecificInterceptorBindings)[ FD ]
Line_67 $$ Map<Method, Boolean> methodLevelExcludeClassInterceptors = new HashMap<Method, Boolean>()-->Line_125 $$ methodLevelExcludeClassInterceptors.put(resolvedMethod, true)[ FD ]
Line_62 $$ final List<InterceptorBindingMetaData> bindingsApplicableForCurrentEJB = bindingsPerEJB.get(ejbComponentDescription.getComponentName())-->Line_70 $$ if (bindingsApplicableForCurrentEJB != null) [ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_15 $$ final ContainerInterceptorsMetaData containerInterceptorsMetaData = containerInterceptorConfigurations.get(0)[ CD ]
Line_174 $$ if (!excludeClassInterceptors) -->Line_175 $$ excludeClassInterceptors = ejbComponentDescription.isExcludeClassLevelContainerInterceptors(methodIdentifier)[ CD ]
Line_87 $$ Method resolvedMethod = null-->Line_118 $$ methodInterceptors.put(resolvedMethod, methodSpecificInterceptorBindings)[ FD ]
Line_36 $$ if (bindings == null) -->Line_38 $$ bindingsPerEJB.put(containerInterceptorBinding.getEjbName(), bindings)[ CD ]
Line_169 $$ if (!excludeDefaultInterceptors) -->Line_170 $$ excludeDefaultInterceptors = ejbComponentDescription.isExcludeDefaultContainerInterceptors() || ejbComponentDescription.isExcludeDefaultContainerInterceptors(methodIdentifier)[ CD ]
Line_187 $$ if (!excludeDefaultInterceptors) -->Line_188 $$ methodLevelInterceptors.addAll(interceptorDescriptionsForAllEJBs)[ CD ]
Line_167 $$ Boolean excludeDefaultInterceptors = methodLevelExcludeDefaultInterceptors.get(method)-->Line_170 $$ excludeDefaultInterceptors = ejbComponentDescription.isExcludeDefaultContainerInterceptors() || ejbComponentDescription.isExcludeDefaultContainerInterceptors(methodIdentifier)[ FD ]
Line_141 $$ final List<InterceptorDescription> classLevelInterceptors = new ArrayList<InterceptorDescription>()-->Line_161 $$ ejbComponentDescription.setClassLevelContainerInterceptors(classLevelInterceptors)[ FD ]
Line_15 $$ final ContainerInterceptorsMetaData containerInterceptorsMetaData = containerInterceptorConfigurations.get(0)-->Line_19 $$ final InterceptorBindingsMetaData containerInterceptorBindings = containerInterceptorsMetaData.getInterceptorBindings()[ FD ]
Line_168 $$ excludeDefaultInterceptors = excludeDefaultInterceptors == null ? false : excludeDefaultInterceptors-->Line_170 $$ excludeDefaultInterceptors = ejbComponentDescription.isExcludeDefaultContainerInterceptors() || ejbComponentDescription.isExcludeDefaultContainerInterceptors(methodIdentifier)[ FD ]
Line_43 $$ final List<InterceptorDescription> interceptorDescriptionsForAllEJBs = new ArrayList<InterceptorDescription>()-->Line_47 $$ interceptorDescriptionsForAllEJBs.add(new InterceptorDescription(clazz))[ FD ]
Line_25 $$ for (final InterceptorBindingMetaData containerInterceptorBinding : containerInterceptorBindings) -->Line_35 $$ List<InterceptorBindingMetaData> bindings = bindingsPerEJB.get(containerInterceptorBinding.getEjbName())[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_4 $$ final EjbJarMetaData metaData = deploymentUnit.getAttachment(EjbDeploymentAttachmentKeys.EJB_JAR_METADATA)[ CD ]
Line_85 $$ final NamedMethodMetaData methodData = binding.getMethod()-->Line_97 $$ final Collection<Method> methods = classIndex.getAllMethods(methodData.getMethodName(), methodData.getMethodParams().size())[ FD ]
Line_35 $$ List<InterceptorBindingMetaData> bindings = bindingsPerEJB.get(containerInterceptorBinding.getEjbName())-->Line_37 $$ bindings = new ArrayList<InterceptorBindingMetaData>()[ FD ]
Line_142 $$ if (classLevelAbsoluteOrder) -->Line_151 $$ ejbComponentDescription.setExcludeDefaultContainerInterceptors(true)[ CD ]
Line_117 $$ methodSpecificInterceptorBindings = new ArrayList<InterceptorBindingMetaData>()-->Line_120 $$ methodSpecificInterceptorBindings.add(binding)[ FD ]
Line_44 $$ for (InterceptorBindingMetaData binding : bindingsForAllEJBs) -->Line_197 $$ for (final String interceptor : binding.getInterceptorClasses()) [ FD ]
Line_44 $$ for (InterceptorBindingMetaData binding : bindingsForAllEJBs) -->Line_124 $$ if (binding.isExcludeClassInterceptors()) [ FD ]
Line_88 $$ if (methodData.getMethodParams() == null) -->Line_97 $$ final Collection<Method> methods = classIndex.getAllMethods(methodData.getMethodName(), methodData.getMethodParams().size())[ CD ]
Line_98 $$ for (final Method method : methods) -->Line_107 $$ resolvedMethod = method[ FD ]
Line_85 $$ final NamedMethodMetaData methodData = binding.getMethod()-->Line_93 $$ throw EjbLogger.ROOT_LOGGER.multipleMethodReferencedInEjbJarXml(methodData.getMethodName(), componentClass.getName())[ FD ]
Line_55 $$ final EJBComponentDescription ejbComponentDescription = (EJBComponentDescription) componentDescription-->Line_139 $$ ejbComponentDescription.setExcludeDefaultContainerInterceptors(true)[ FD ]
Line_166 $$ final MethodIdentifier methodIdentifier = MethodIdentifier.getIdentifierForMethod(method)-->Line_203 $$ ejbComponentDescription.excludeClassLevelContainerInterceptors(methodIdentifier)[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_16 $$ if (containerInterceptorsMetaData == null) [ CD ]
Line_98 $$ for (final Method method : methods) -->Line_166 $$ final MethodIdentifier methodIdentifier = MethodIdentifier.getIdentifierForMethod(method)[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()[ FD ]
Line_72 $$ if (binding.getMethod() == null) -->Line_124 $$ if (binding.isExcludeClassInterceptors()) [ CD ]
Line_23 $$ final Map<String, List<InterceptorBindingMetaData>> bindingsPerEJB = new HashMap<String, List<InterceptorBindingMetaData>>()-->Line_35 $$ List<InterceptorBindingMetaData> bindings = bindingsPerEJB.get(containerInterceptorBinding.getEjbName())[ FD ]
Line_44 $$ for (InterceptorBindingMetaData binding : bindingsForAllEJBs) -->Line_155 $$ for (final String interceptor : binding.getInterceptorClasses()) [ FD ]
Line_98 $$ for (final Method method : methods) -->Line_167 $$ Boolean excludeDefaultInterceptors = methodLevelExcludeDefaultInterceptors.get(method)[ FD ]
Line_72 $$ if (binding.getMethod() == null) -->Line_127 $$ if (binding.isTotalOrdering()) [ CD ]
Line_87 $$ Method resolvedMethod = null-->Line_122 $$ methodLevelExcludeDefaultInterceptors.put(resolvedMethod, true)[ FD ]
Line_44 $$ for (InterceptorBindingMetaData binding : bindingsForAllEJBs) -->Line_180 $$ if (binding.isTotalOrdering()) [ FD ]
Line_170 $$ excludeDefaultInterceptors = ejbComponentDescription.isExcludeDefaultContainerInterceptors() || ejbComponentDescription.isExcludeDefaultContainerInterceptors(methodIdentifier)-->Line_187 $$ if (!excludeDefaultInterceptors) [ FD ]
Line_43 $$ final List<InterceptorDescription> interceptorDescriptionsForAllEJBs = new ArrayList<InterceptorDescription>()-->Line_188 $$ methodLevelInterceptors.addAll(interceptorDescriptionsForAllEJBs)[ FD ]
Line_166 $$ final MethodIdentifier methodIdentifier = MethodIdentifier.getIdentifierForMethod(method)-->Line_204 $$ ejbComponentDescription.excludeDefaultContainerInterceptors(methodIdentifier)[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_10 $$ final DeploymentReflectionIndex index = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.REFLECTION_INDEX)[ FD ]
Line_72 $$ if (binding.getMethod() == null) -->Line_88 $$ if (methodData.getMethodParams() == null) [ CD ]
Line_167 $$ Boolean excludeDefaultInterceptors = methodLevelExcludeDefaultInterceptors.get(method)-->Line_187 $$ if (!excludeDefaultInterceptors) [ FD ]
Line_101 $$ if (!method.getParameterTypes()[i].getName().equals(methodData.getMethodParams().get(i))) -->Line_102 $$ match = false[ CD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_9 $$ final Module module = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE)[ CD ]
Line_56 $$ final Class<?> componentClass-->Line_86 $$ final ClassReflectionIndex classIndex = index.getClassIndex(componentClass)[ FD ]
Line_115 $$ List<InterceptorBindingMetaData> methodSpecificInterceptorBindings = methodInterceptors.get(resolvedMethod)-->Line_120 $$ methodSpecificInterceptorBindings.add(binding)[ FD ]
Line_167 $$ Boolean excludeDefaultInterceptors = methodLevelExcludeDefaultInterceptors.get(method)-->Line_169 $$ if (!excludeDefaultInterceptors) [ FD ]
Line_85 $$ final NamedMethodMetaData methodData = binding.getMethod()-->Line_91 $$ throw EjbLogger.ROOT_LOGGER.failToFindMethodInEjbJarXml(componentClass.getName(), methodData.getMethodName())[ FD ]
Line_65 $$ boolean classLevelExcludeDefaultInterceptors = false-->Line_75 $$ classLevelExcludeDefaultInterceptors = true[ FD ]
Line_89 $$ final Collection<Method> methods = classIndex.getAllMethods(methodData.getMethodName())-->Line_95 $$ resolvedMethod = methods.iterator().next()[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()[ CD ]
Line_88 $$ if (methodData.getMethodParams() == null) -->Line_90 $$ if (methods.isEmpty()) [ CD ]
Line_44 $$ for (InterceptorBindingMetaData binding : bindingsForAllEJBs) -->Line_120 $$ methodSpecificInterceptorBindings.add(binding)[ FD ]
Line_19 $$ final InterceptorBindingsMetaData containerInterceptorBindings = containerInterceptorsMetaData.getInterceptorBindings()-->Line_20 $$ if (containerInterceptorBindings == null || containerInterceptorBindings.isEmpty()) [ FD ]
Line_85 $$ final NamedMethodMetaData methodData = binding.getMethod()-->Line_112 $$ throw EjbLogger.ROOT_LOGGER.failToFindMethodWithParameterTypes(componentClass.getName(), methodData.getMethodName(), methodData.getMethodParams())[ FD ]
Line_87 $$ Method resolvedMethod = null-->Line_107 $$ resolvedMethod = method[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_4 $$ final EjbJarMetaData metaData = deploymentUnit.getAttachment(EjbDeploymentAttachmentKeys.EJB_JAR_METADATA)[ FD ]
Line_56 $$ final Class<?> componentClass-->Line_93 $$ throw EjbLogger.ROOT_LOGGER.multipleMethodReferencedInEjbJarXml(methodData.getMethodName(), componentClass.getName())[ FD ]
Line_44 $$ for (InterceptorBindingMetaData binding : bindingsForAllEJBs) -->Line_73 $$ classLevelBindings.add(binding)[ FD ]
Line_66 $$ Map<Method, Boolean> methodLevelExcludeDefaultInterceptors = new HashMap<Method, Boolean>()-->Line_122 $$ methodLevelExcludeDefaultInterceptors.put(resolvedMethod, true)[ FD ]
Line_44 $$ for (InterceptorBindingMetaData binding : bindingsForAllEJBs) -->Line_85 $$ final NamedMethodMetaData methodData = binding.getMethod()[ FD ]
Line_141 $$ final List<InterceptorDescription> classLevelInterceptors = new ArrayList<InterceptorDescription>()-->Line_146 $$ classLevelInterceptors.add(new InterceptorDescription(interceptor))[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_8 $$ final EEModuleDescription eeModuleDescription = deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION)[ FD ]
Line_44 $$ for (InterceptorBindingMetaData binding : bindingsForAllEJBs) -->Line_181 $$ for (final String interceptor : binding.getInterceptorOrder()) [ FD ]
Line_166 $$ final MethodIdentifier methodIdentifier = MethodIdentifier.getIdentifierForMethod(method)-->Line_205 $$ ejbComponentDescription.setMethodContainerInterceptors(methodIdentifier, methodLevelInterceptors)[ FD ]
Line_177 $$ final List<InterceptorDescription> methodLevelInterceptors = new ArrayList<InterceptorDescription>()-->Line_205 $$ ejbComponentDescription.setMethodContainerInterceptors(methodIdentifier, methodLevelInterceptors)[ FD ]
Line_15 $$ final ContainerInterceptorsMetaData containerInterceptorsMetaData = containerInterceptorConfigurations.get(0)-->Line_16 $$ if (containerInterceptorsMetaData == null) [ FD ]
Line_16 $$ if (containerInterceptorsMetaData == null) -->Line_17 $$ return[ CD ]
Line_25 $$ for (final InterceptorBindingMetaData containerInterceptorBinding : containerInterceptorBindings) -->Line_26 $$ if (containerInterceptorBinding.getEjbName().equals("*")) [ FD ]
Line_95 $$ resolvedMethod = methods.iterator().next()-->Line_118 $$ methodInterceptors.put(resolvedMethod, methodSpecificInterceptorBindings)[ FD ]
Line_121 $$ if (binding.isExcludeDefaultInterceptors()) -->Line_122 $$ methodLevelExcludeDefaultInterceptors.put(resolvedMethod, true)[ CD ]
Line_87 $$ Method resolvedMethod = null-->Line_131 $$ methodLevelAbsoluteOrder.put(resolvedMethod, true)[ FD ]
Line_162 $$ for (Map.Entry<Method, List<InterceptorBindingMetaData>> entry : methodInterceptors.entrySet()) -->Line_163 $$ final Method method = entry.getKey()[ FD ]
Line_107 $$ resolvedMethod = method-->Line_131 $$ methodLevelAbsoluteOrder.put(resolvedMethod, true)[ FD ]
Line_20 $$ if (containerInterceptorBindings == null || containerInterceptorBindings.isEmpty()) -->Line_21 $$ return[ CD ]
Line_9 $$ final Module module = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE)-->Line_58 $$ componentClass = module.getClassLoader().loadClass(ejbComponentDescription.getComponentClassName())[ FD ]
Line_175 $$ excludeClassInterceptors = ejbComponentDescription.isExcludeClassLevelContainerInterceptors(methodIdentifier)-->Line_190 $$ if (!excludeClassInterceptors) [ FD ]
Line_63 $$ final Map<Method, List<InterceptorBindingMetaData>> methodInterceptors = new HashMap<Method, List<InterceptorBindingMetaData>>()-->Line_115 $$ List<InterceptorBindingMetaData> methodSpecificInterceptorBindings = methodInterceptors.get(resolvedMethod)[ FD ]
Line_44 $$ for (InterceptorBindingMetaData binding : bindingsForAllEJBs) -->Line_121 $$ if (binding.isExcludeDefaultInterceptors()) [ FD ]
Line_86 $$ final ClassReflectionIndex classIndex = index.getClassIndex(componentClass)-->Line_89 $$ final Collection<Method> methods = classIndex.getAllMethods(methodData.getMethodName())[ FD ]
Line_100 $$ for (int i = 0; i < method.getParameterTypes().length; ++i) -->Line_101 $$ if (!method.getParameterTypes()[i].getName().equals(methodData.getMethodParams().get(i))) [ CD ]
Line_26 $$ if (containerInterceptorBinding.getEjbName().equals("*")) -->Line_27 $$ if (containerInterceptorBinding.getMethod() != null) [ CD ]
Line_11 $$ final List<ContainerInterceptorsMetaData> containerInterceptorConfigurations = metaData.getAssemblyDescriptor().getAny(ContainerInterceptorsMetaData.class)-->Line_15 $$ final ContainerInterceptorsMetaData containerInterceptorsMetaData = containerInterceptorConfigurations.get(0)[ FD ]
Line_44 $$ for (InterceptorBindingMetaData binding : bindingsForAllEJBs) -->Line_72 $$ if (binding.getMethod() == null) [ FD ]
Line_55 $$ final EJBComponentDescription ejbComponentDescription = (EJBComponentDescription) componentDescription-->Line_203 $$ ejbComponentDescription.excludeClassLevelContainerInterceptors(methodIdentifier)[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_10 $$ final DeploymentReflectionIndex index = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.REFLECTION_INDEX)[ CD ]
Line_116 $$ if (methodSpecificInterceptorBindings == null) -->Line_118 $$ methodInterceptors.put(resolvedMethod, methodSpecificInterceptorBindings)[ CD ]
Line_95 $$ resolvedMethod = methods.iterator().next()-->Line_122 $$ methodLevelExcludeDefaultInterceptors.put(resolvedMethod, true)[ FD ]
Line_56 $$ final Class<?> componentClass-->Line_91 $$ throw EjbLogger.ROOT_LOGGER.failToFindMethodInEjbJarXml(componentClass.getName(), methodData.getMethodName())[ FD ]
Line_95 $$ resolvedMethod = methods.iterator().next()-->Line_129 $$ throw EjbLogger.ROOT_LOGGER.twoEjbBindingsSpecifyAbsoluteOrder(resolvedMethod.toString())[ FD ]
Line_63 $$ final Map<Method, List<InterceptorBindingMetaData>> methodInterceptors = new HashMap<Method, List<InterceptorBindingMetaData>>()-->Line_162 $$ for (Map.Entry<Method, List<InterceptorBindingMetaData>> entry : methodInterceptors.entrySet()) [ FD ]
Line_72 $$ if (binding.getMethod() == null) -->Line_77 $$ if (binding.isTotalOrdering()) [ CD ]
Line_172 $$ Boolean excludeClassInterceptors = methodLevelExcludeClassInterceptors.get(method)-->Line_174 $$ if (!excludeClassInterceptors) [ FD ]
Line_166 $$ final MethodIdentifier methodIdentifier = MethodIdentifier.getIdentifierForMethod(method)-->Line_170 $$ excludeDefaultInterceptors = ejbComponentDescription.isExcludeDefaultContainerInterceptors() || ejbComponentDescription.isExcludeDefaultContainerInterceptors(methodIdentifier)[ FD ]
Line_168 $$ excludeDefaultInterceptors = excludeDefaultInterceptors == null ? false : excludeDefaultInterceptors-->Line_187 $$ if (!excludeDefaultInterceptors) [ FD ]
Line_26 $$ if (containerInterceptorBinding.getEjbName().equals("*")) -->Line_35 $$ List<InterceptorBindingMetaData> bindings = bindingsPerEJB.get(containerInterceptorBinding.getEjbName())[ CD ]
Line_95 $$ resolvedMethod = methods.iterator().next()-->Line_115 $$ List<InterceptorBindingMetaData> methodSpecificInterceptorBindings = methodInterceptors.get(resolvedMethod)[ FD ]
Line_173 $$ excludeClassInterceptors = excludeClassInterceptors == null ? false : excludeClassInterceptors-->Line_174 $$ if (!excludeClassInterceptors) [ FD ]
Line_116 $$ if (methodSpecificInterceptorBindings == null) -->Line_117 $$ methodSpecificInterceptorBindings = new ArrayList<InterceptorBindingMetaData>()[ CD ]
Line_55 $$ final EJBComponentDescription ejbComponentDescription = (EJBComponentDescription) componentDescription-->Line_60 $$ throw EjbLogger.ROOT_LOGGER.failToLoadComponentClass(e, ejbComponentDescription.getComponentClassName())[ FD ]
Line_74 $$ if (binding.isExcludeDefaultInterceptors()) -->Line_75 $$ classLevelExcludeDefaultInterceptors = true[ CD ]
Line_172 $$ Boolean excludeClassInterceptors = methodLevelExcludeClassInterceptors.get(method)-->Line_175 $$ excludeClassInterceptors = ejbComponentDescription.isExcludeClassLevelContainerInterceptors(methodIdentifier)[ FD ]
Line_11 $$ final List<ContainerInterceptorsMetaData> containerInterceptorConfigurations = metaData.getAssemblyDescriptor().getAny(ContainerInterceptorsMetaData.class)-->Line_12 $$ if (containerInterceptorConfigurations == null || containerInterceptorConfigurations.isEmpty()) [ FD ]
Line_23 $$ final Map<String, List<InterceptorBindingMetaData>> bindingsPerEJB = new HashMap<String, List<InterceptorBindingMetaData>>()-->Line_62 $$ final List<InterceptorBindingMetaData> bindingsApplicableForCurrentEJB = bindingsPerEJB.get(ejbComponentDescription.getComponentName())[ FD ]
Line_107 $$ resolvedMethod = method-->Line_128 $$ if (methodLevelAbsoluteOrder.containsKey(resolvedMethod)) [ FD ]
Line_107 $$ resolvedMethod = method-->Line_129 $$ throw EjbLogger.ROOT_LOGGER.twoEjbBindingsSpecifyAbsoluteOrder(resolvedMethod.toString())[ FD ]
Line_95 $$ resolvedMethod = methods.iterator().next()-->Line_128 $$ if (methodLevelAbsoluteOrder.containsKey(resolvedMethod)) [ FD ]
Line_56 $$ final Class<?> componentClass-->Line_79 $$ throw EjbLogger.ROOT_LOGGER.twoEjbBindingsSpecifyAbsoluteOrder(componentClass.toString())[ FD ]
Line_43 $$ final List<InterceptorDescription> interceptorDescriptionsForAllEJBs = new ArrayList<InterceptorDescription>()-->Line_137 $$ ejbComponentDescription.setDefaultContainerInterceptors(interceptorDescriptionsForAllEJBs)[ FD ]
Line_72 $$ if (binding.getMethod() == null) -->Line_74 $$ if (binding.isExcludeDefaultInterceptors()) [ CD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_11 $$ final List<ContainerInterceptorsMetaData> containerInterceptorConfigurations = metaData.getAssemblyDescriptor().getAny(ContainerInterceptorsMetaData.class)[ CD ]
Line_26 $$ if (containerInterceptorBinding.getEjbName().equals("*")) -->Line_30 $$ if (containerInterceptorBinding.getInterceptorOrder() != null) [ CD ]
Line_89 $$ final Collection<Method> methods = classIndex.getAllMethods(methodData.getMethodName())-->Line_92 $$ if (methods.size() > 1) [ FD ]
Line_26 $$ if (containerInterceptorBinding.getEjbName().equals("*")) -->Line_36 $$ if (bindings == null) [ CD ]
Line_55 $$ final EJBComponentDescription ejbComponentDescription = (EJBComponentDescription) componentDescription-->Line_204 $$ ejbComponentDescription.excludeDefaultContainerInterceptors(methodIdentifier)[ FD ]
Line_72 $$ if (binding.getMethod() == null) -->Line_85 $$ final NamedMethodMetaData methodData = binding.getMethod()[ CD ]
Line_168 $$ excludeDefaultInterceptors = excludeDefaultInterceptors == null ? false : excludeDefaultInterceptors-->Line_169 $$ if (!excludeDefaultInterceptors) [ FD ]
Line_95 $$ resolvedMethod = methods.iterator().next()-->Line_131 $$ methodLevelAbsoluteOrder.put(resolvedMethod, true)[ FD ]
Line_55 $$ final EJBComponentDescription ejbComponentDescription = (EJBComponentDescription) componentDescription-->Line_151 $$ ejbComponentDescription.setExcludeDefaultContainerInterceptors(true)[ FD ]
Line_69 $$ final Map<Method, Boolean> methodLevelAbsoluteOrder = new HashMap<Method, Boolean>()-->Line_165 $$ boolean totalOrder = methodLevelAbsoluteOrder.containsKey(method)[ FD ]
Line_173 $$ excludeClassInterceptors = excludeClassInterceptors == null ? false : excludeClassInterceptors-->Line_175 $$ excludeClassInterceptors = ejbComponentDescription.isExcludeClassLevelContainerInterceptors(methodIdentifier)[ FD ]
Line_35 $$ List<InterceptorBindingMetaData> bindings = bindingsPerEJB.get(containerInterceptorBinding.getEjbName())-->Line_40 $$ bindings.add(containerInterceptorBinding)[ FD ]
Line_8 $$ final EEModuleDescription eeModuleDescription = deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION)-->Line_51 $$ for (final ComponentDescription componentDescription : eeModuleDescription.getComponentDescriptions()) [ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_8 $$ final EEModuleDescription eeModuleDescription = deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION)[ CD ]
Line_117 $$ methodSpecificInterceptorBindings = new ArrayList<InterceptorBindingMetaData>()-->Line_118 $$ methodInterceptors.put(resolvedMethod, methodSpecificInterceptorBindings)[ FD ]
Line_166 $$ final MethodIdentifier methodIdentifier = MethodIdentifier.getIdentifierForMethod(method)-->Line_175 $$ excludeClassInterceptors = ejbComponentDescription.isExcludeClassLevelContainerInterceptors(methodIdentifier)[ FD ]
Line_128 $$ if (methodLevelAbsoluteOrder.containsKey(resolvedMethod)) -->Line_131 $$ methodLevelAbsoluteOrder.put(resolvedMethod, true)[ CD ]
Line_58 $$ componentClass = module.getClassLoader().loadClass(ejbComponentDescription.getComponentClassName())-->Line_79 $$ throw EjbLogger.ROOT_LOGGER.twoEjbBindingsSpecifyAbsoluteOrder(componentClass.toString())[ FD ]
Line_44 $$ for (InterceptorBindingMetaData binding : bindingsForAllEJBs) -->Line_154 $$ if (binding.getInterceptorClasses() != null) [ FD ]
Line_107 $$ resolvedMethod = method-->Line_122 $$ methodLevelExcludeDefaultInterceptors.put(resolvedMethod, true)[ FD ]
Line_87 $$ Method resolvedMethod = null-->Line_125 $$ methodLevelExcludeClassInterceptors.put(resolvedMethod, true)[ FD ]
Line_44 $$ for (InterceptorBindingMetaData binding : bindingsForAllEJBs) -->Line_45 $$ if (binding.getInterceptorClasses() != null) [ FD ]
Line_44 $$ for (InterceptorBindingMetaData binding : bindingsForAllEJBs) -->Line_74 $$ if (binding.isExcludeDefaultInterceptors()) [ FD ]
Line_87 $$ Method resolvedMethod = null-->Line_128 $$ if (methodLevelAbsoluteOrder.containsKey(resolvedMethod)) [ FD ]
Line_55 $$ final EJBComponentDescription ejbComponentDescription = (EJBComponentDescription) componentDescription-->Line_161 $$ ejbComponentDescription.setClassLevelContainerInterceptors(classLevelInterceptors)[ FD ]
Line_88 $$ if (methodData.getMethodParams() == null) -->Line_111 $$ if (resolvedMethod == null) [ CD ]
Line_25 $$ for (final InterceptorBindingMetaData containerInterceptorBinding : containerInterceptorBindings) -->Line_33 $$ bindingsForAllEJBs.add(containerInterceptorBinding)[ FD ]
Line_56 $$ final Class<?> componentClass-->Line_58 $$ componentClass = module.getClassLoader().loadClass(ejbComponentDescription.getComponentClassName())[ FD ]
Line_56 $$ final Class<?> componentClass-->Line_112 $$ throw EjbLogger.ROOT_LOGGER.failToFindMethodWithParameterTypes(componentClass.getName(), methodData.getMethodName(), methodData.getMethodParams())[ FD ]
Line_37 $$ bindings = new ArrayList<InterceptorBindingMetaData>()-->Line_38 $$ bindingsPerEJB.put(containerInterceptorBinding.getEjbName(), bindings)[ FD ]
Line_95 $$ resolvedMethod = methods.iterator().next()-->Line_111 $$ if (resolvedMethod == null) [ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_20 $$ if (containerInterceptorBindings == null || containerInterceptorBindings.isEmpty()) [ CD ]
Line_72 $$ if (binding.getMethod() == null) -->Line_120 $$ methodSpecificInterceptorBindings.add(binding)[ CD ]
Line_37 $$ bindings = new ArrayList<InterceptorBindingMetaData>()-->Line_40 $$ bindings.add(containerInterceptorBinding)[ FD ]
Line_58 $$ componentClass = module.getClassLoader().loadClass(ejbComponentDescription.getComponentClassName())-->Line_91 $$ throw EjbLogger.ROOT_LOGGER.failToFindMethodInEjbJarXml(componentClass.getName(), methodData.getMethodName())[ FD ]
Line_98 $$ for (final Method method : methods) -->Line_100 $$ for (int i = 0; i < method.getParameterTypes().length; ++i) [ FD ]
Line_145 $$ for (final String interceptor : binding.getInterceptorOrder()) -->Line_192 $$ methodLevelInterceptors.add(interceptor)[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_23 $$ final Map<String, List<InterceptorBindingMetaData>> bindingsPerEJB = new HashMap<String, List<InterceptorBindingMetaData>>()[ CD ]
Line_85 $$ final NamedMethodMetaData methodData = binding.getMethod()-->Line_89 $$ final Collection<Method> methods = classIndex.getAllMethods(methodData.getMethodName())[ FD ]
Line_87 $$ Method resolvedMethod = null-->Line_95 $$ resolvedMethod = methods.iterator().next()[ FD ]
Line_55 $$ final EJBComponentDescription ejbComponentDescription = (EJBComponentDescription) componentDescription-->Line_175 $$ excludeClassInterceptors = ejbComponentDescription.isExcludeClassLevelContainerInterceptors(methodIdentifier)[ FD ]
Line_107 $$ resolvedMethod = method-->Line_115 $$ List<InterceptorBindingMetaData> methodSpecificInterceptorBindings = methodInterceptors.get(resolvedMethod)[ FD ]
Line_35 $$ List<InterceptorBindingMetaData> bindings = bindingsPerEJB.get(containerInterceptorBinding.getEjbName())-->Line_38 $$ bindingsPerEJB.put(containerInterceptorBinding.getEjbName(), bindings)[ FD ]
Line_177 $$ final List<InterceptorDescription> methodLevelInterceptors = new ArrayList<InterceptorDescription>()-->Line_182 $$ methodLevelInterceptors.add(new InterceptorDescription(interceptor))[ FD ]
Line_55 $$ final EJBComponentDescription ejbComponentDescription = (EJBComponentDescription) componentDescription-->Line_205 $$ ejbComponentDescription.setMethodContainerInterceptors(methodIdentifier, methodLevelInterceptors)[ FD ]
Line_178 $$ if (totalOrder) -->Line_190 $$ if (!excludeClassInterceptors) [ CD ]
Line_100 $$ for (int i = 0; i < method.getParameterTypes().length; ++i) -->Line_101 $$ if (!method.getParameterTypes()[i].getName().equals(methodData.getMethodParams().get(i))) [ FD ]
Line_177 $$ final List<InterceptorDescription> methodLevelInterceptors = new ArrayList<InterceptorDescription>()-->Line_188 $$ methodLevelInterceptors.addAll(interceptorDescriptionsForAllEJBs)[ FD ]
Line_177 $$ final List<InterceptorDescription> methodLevelInterceptors = new ArrayList<InterceptorDescription>()-->Line_192 $$ methodLevelInterceptors.add(interceptor)[ FD ]
Line_127 $$ if (binding.isTotalOrdering()) -->Line_128 $$ if (methodLevelAbsoluteOrder.containsKey(resolvedMethod)) [ CD ]
Line_88 $$ if (methodData.getMethodParams() == null) -->Line_89 $$ final Collection<Method> methods = classIndex.getAllMethods(methodData.getMethodName())[ CD ]
Line_172 $$ Boolean excludeClassInterceptors = methodLevelExcludeClassInterceptors.get(method)-->Line_190 $$ if (!excludeClassInterceptors) [ FD ]
Line_107 $$ resolvedMethod = method-->Line_111 $$ if (resolvedMethod == null) [ FD ]
Line_72 $$ if (binding.getMethod() == null) -->Line_73 $$ classLevelBindings.add(binding)[ CD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_43 $$ final List<InterceptorDescription> interceptorDescriptionsForAllEJBs = new ArrayList<InterceptorDescription>()[ CD ]
Line_87 $$ Method resolvedMethod = null-->Line_115 $$ List<InterceptorBindingMetaData> methodSpecificInterceptorBindings = methodInterceptors.get(resolvedMethod)[ FD ]
Line_44 $$ for (InterceptorBindingMetaData binding : bindingsForAllEJBs) -->Line_144 $$ if (binding.isTotalOrdering()) [ FD ]
Line_25 $$ for (final InterceptorBindingMetaData containerInterceptorBinding : containerInterceptorBindings) -->Line_27 $$ if (containerInterceptorBinding.getMethod() != null) [ FD ]
Line_25 $$ for (final InterceptorBindingMetaData containerInterceptorBinding : containerInterceptorBindings) -->Line_38 $$ bindingsPerEJB.put(containerInterceptorBinding.getEjbName(), bindings)[ FD ]
Line_68 $$ boolean classLevelAbsoluteOrder = false-->Line_81 $$ classLevelAbsoluteOrder = true[ FD ]
Line_106 $$ if (match) -->Line_107 $$ resolvedMethod = method[ CD ]
Line_98 $$ for (final Method method : methods) -->Line_172 $$ Boolean excludeClassInterceptors = methodLevelExcludeClassInterceptors.get(method)[ FD ]
Line_124 $$ if (binding.isExcludeClassInterceptors()) -->Line_125 $$ methodLevelExcludeClassInterceptors.put(resolvedMethod, true)[ CD ]
Line_115 $$ List<InterceptorBindingMetaData> methodSpecificInterceptorBindings = methodInterceptors.get(resolvedMethod)-->Line_117 $$ methodSpecificInterceptorBindings = new ArrayList<InterceptorBindingMetaData>()[ FD ]
Line_23 $$ final Map<String, List<InterceptorBindingMetaData>> bindingsPerEJB = new HashMap<String, List<InterceptorBindingMetaData>>()-->Line_38 $$ bindingsPerEJB.put(containerInterceptorBinding.getEjbName(), bindings)[ FD ]
Line_26 $$ if (containerInterceptorBinding.getEjbName().equals("*")) -->Line_40 $$ bindings.add(containerInterceptorBinding)[ CD ]
Line_12 $$ if (containerInterceptorConfigurations == null || containerInterceptorConfigurations.isEmpty()) -->Line_13 $$ return[ CD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_19 $$ final InterceptorBindingsMetaData containerInterceptorBindings = containerInterceptorsMetaData.getInterceptorBindings()[ CD ]
Line_173 $$ excludeClassInterceptors = excludeClassInterceptors == null ? false : excludeClassInterceptors-->Line_190 $$ if (!excludeClassInterceptors) [ FD ]
Line_5 $$ if (metaData == null || metaData.getAssemblyDescriptor() == null) -->Line_6 $$ return[ CD ]
Line_167 $$ Boolean excludeDefaultInterceptors = methodLevelExcludeDefaultInterceptors.get(method)-->Line_168 $$ excludeDefaultInterceptors = excludeDefaultInterceptors == null ? false : excludeDefaultInterceptors[ FD ]
Line_72 $$ if (binding.getMethod() == null) -->Line_86 $$ final ClassReflectionIndex classIndex = index.getClassIndex(componentClass)[ CD ]
Line_72 $$ if (binding.getMethod() == null) -->Line_121 $$ if (binding.isExcludeDefaultInterceptors()) [ CD ]
Line_69 $$ final Map<Method, Boolean> methodLevelAbsoluteOrder = new HashMap<Method, Boolean>()-->Line_128 $$ if (methodLevelAbsoluteOrder.containsKey(resolvedMethod)) [ FD ]
Line_55 $$ final EJBComponentDescription ejbComponentDescription = (EJBComponentDescription) componentDescription-->Line_62 $$ final List<InterceptorBindingMetaData> bindingsApplicableForCurrentEJB = bindingsPerEJB.get(ejbComponentDescription.getComponentName())[ FD ]
Line_85 $$ final NamedMethodMetaData methodData = binding.getMethod()-->Line_88 $$ if (methodData.getMethodParams() == null) [ FD ]
Line_88 $$ if (methodData.getMethodParams() == null) -->Line_95 $$ resolvedMethod = methods.iterator().next()[ CD ]
Line_87 $$ Method resolvedMethod = null-->Line_111 $$ if (resolvedMethod == null) [ FD ]
Line_4 $$ final EjbJarMetaData metaData = deploymentUnit.getAttachment(EjbDeploymentAttachmentKeys.EJB_JAR_METADATA)-->Line_11 $$ final List<ContainerInterceptorsMetaData> containerInterceptorConfigurations = metaData.getAssemblyDescriptor().getAny(ContainerInterceptorsMetaData.class)[ FD ]
Line_64 $$ final List<InterceptorBindingMetaData> classLevelBindings = new ArrayList<InterceptorBindingMetaData>()-->Line_73 $$ classLevelBindings.add(binding)[ FD ]
Line_44 $$ for (InterceptorBindingMetaData binding : bindingsForAllEJBs) -->Line_196 $$ if (binding.getInterceptorClasses() != null) [ FD ]
Line_66 $$ Map<Method, Boolean> methodLevelExcludeDefaultInterceptors = new HashMap<Method, Boolean>()-->Line_167 $$ Boolean excludeDefaultInterceptors = methodLevelExcludeDefaultInterceptors.get(method)[ FD ]
Line_58 $$ componentClass = module.getClassLoader().loadClass(ejbComponentDescription.getComponentClassName())-->Line_86 $$ final ClassReflectionIndex classIndex = index.getClassIndex(componentClass)[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_9 $$ final Module module = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE)[ FD ]
Line_67 $$ Map<Method, Boolean> methodLevelExcludeClassInterceptors = new HashMap<Method, Boolean>()-->Line_172 $$ Boolean excludeClassInterceptors = methodLevelExcludeClassInterceptors.get(method)[ FD ]
Line_178 $$ if (totalOrder) -->Line_187 $$ if (!excludeDefaultInterceptors) [ CD ]
Line_58 $$ componentClass = module.getClassLoader().loadClass(ejbComponentDescription.getComponentClassName())-->Line_93 $$ throw EjbLogger.ROOT_LOGGER.multipleMethodReferencedInEjbJarXml(methodData.getMethodName(), componentClass.getName())[ FD ]
Line_86 $$ final ClassReflectionIndex classIndex = index.getClassIndex(componentClass)-->Line_97 $$ final Collection<Method> methods = classIndex.getAllMethods(methodData.getMethodName(), methodData.getMethodParams().size())[ FD ]
Line_107 $$ resolvedMethod = method-->Line_125 $$ methodLevelExcludeClassInterceptors.put(resolvedMethod, true)[ FD ]
Line_35 $$ List<InterceptorBindingMetaData> bindings = bindingsPerEJB.get(containerInterceptorBinding.getEjbName())-->Line_36 $$ if (bindings == null) [ FD ]
Line_89 $$ final Collection<Method> methods = classIndex.getAllMethods(methodData.getMethodName())-->Line_90 $$ if (methods.isEmpty()) [ FD ]
Line_72 $$ if (binding.getMethod() == null) -->Line_116 $$ if (methodSpecificInterceptorBindings == null) [ CD ]
Line_55 $$ final EJBComponentDescription ejbComponentDescription = (EJBComponentDescription) componentDescription-->Line_137 $$ ejbComponentDescription.setDefaultContainerInterceptors(interceptorDescriptionsForAllEJBs)[ FD ]
Line_172 $$ Boolean excludeClassInterceptors = methodLevelExcludeClassInterceptors.get(method)-->Line_173 $$ excludeClassInterceptors = excludeClassInterceptors == null ? false : excludeClassInterceptors[ FD ]
Line_95 $$ resolvedMethod = methods.iterator().next()-->Line_125 $$ methodLevelExcludeClassInterceptors.put(resolvedMethod, true)[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_12 $$ if (containerInterceptorConfigurations == null || containerInterceptorConfigurations.isEmpty()) [ CD ]
Line_141 $$ final List<InterceptorDescription> classLevelInterceptors = new ArrayList<InterceptorDescription>()-->Line_156 $$ classLevelInterceptors.add(new InterceptorDescription(interceptor))[ FD ]
Line_115 $$ List<InterceptorBindingMetaData> methodSpecificInterceptorBindings = methodInterceptors.get(resolvedMethod)-->Line_118 $$ methodInterceptors.put(resolvedMethod, methodSpecificInterceptorBindings)[ FD ]
Line_26 $$ if (containerInterceptorBinding.getEjbName().equals("*")) -->Line_33 $$ bindingsForAllEJBs.add(containerInterceptorBinding)[ CD ]
Line_98 $$ for (final Method method : methods) -->Line_165 $$ boolean totalOrder = methodLevelAbsoluteOrder.containsKey(method)[ FD ]
Line_4 $$ final EjbJarMetaData metaData = deploymentUnit.getAttachment(EjbDeploymentAttachmentKeys.EJB_JAR_METADATA)-->Line_5 $$ if (metaData == null || metaData.getAssemblyDescriptor() == null) [ FD ]
Line_10 $$ final DeploymentReflectionIndex index = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.REFLECTION_INDEX)-->Line_86 $$ final ClassReflectionIndex classIndex = index.getClassIndex(componentClass)[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_5 $$ if (metaData == null || metaData.getAssemblyDescriptor() == null) [ CD ]
Line_44 $$ for (InterceptorBindingMetaData binding : bindingsForAllEJBs) -->Line_46 $$ for (final String clazz : binding.getInterceptorClasses()) [ FD ]
Line_72 $$ if (binding.getMethod() == null) -->Line_87 $$ Method resolvedMethod = null[ CD ]
Line_138 $$ if (classLevelExcludeDefaultInterceptors) -->Line_139 $$ ejbComponentDescription.setExcludeDefaultContainerInterceptors(true)[ CD ]
Line_98 $$ for (final Method method : methods) -->Line_101 $$ if (!method.getParameterTypes()[i].getName().equals(methodData.getMethodParams().get(i))) [ FD ]
Line_24 $$ final List<InterceptorBindingMetaData> bindingsForAllEJBs = new ArrayList<InterceptorBindingMetaData>()-->Line_33 $$ bindingsForAllEJBs.add(containerInterceptorBinding)[ FD ]
Line_25 $$ for (final InterceptorBindingMetaData containerInterceptorBinding : containerInterceptorBindings) -->Line_40 $$ bindings.add(containerInterceptorBinding)[ FD ]
Line_72 $$ if (binding.getMethod() == null) -->Line_115 $$ List<InterceptorBindingMetaData> methodSpecificInterceptorBindings = methodInterceptors.get(resolvedMethod)[ CD ]
Line_99 $$ boolean match = true-->Line_102 $$ match = false[ FD ]
Line_90 $$ if (methods.isEmpty()) -->Line_92 $$ if (methods.size() > 1) [ CD ]
Line_177 $$ final List<InterceptorDescription> methodLevelInterceptors = new ArrayList<InterceptorDescription>()-->Line_198 $$ methodLevelInterceptors.add(new InterceptorDescription(interceptor))[ FD ]
Line_77 $$ if (binding.isTotalOrdering()) -->Line_78 $$ if (classLevelAbsoluteOrder) [ CD ]
Line_87 $$ Method resolvedMethod = null-->Line_129 $$ throw EjbLogger.ROOT_LOGGER.twoEjbBindingsSpecifyAbsoluteOrder(resolvedMethod.toString())[ FD ]
Line_69 $$ final Map<Method, Boolean> methodLevelAbsoluteOrder = new HashMap<Method, Boolean>()-->Line_131 $$ methodLevelAbsoluteOrder.put(resolvedMethod, true)[ FD ]
Line_162 $$ for (Map.Entry<Method, List<InterceptorBindingMetaData>> entry : methodInterceptors.entrySet()) -->Line_164 $$ final List<InterceptorBindingMetaData> methodBindings = entry.getValue()[ FD ]
Line_55 $$ final EJBComponentDescription ejbComponentDescription = (EJBComponentDescription) componentDescription-->Line_170 $$ excludeDefaultInterceptors = ejbComponentDescription.isExcludeDefaultContainerInterceptors() || ejbComponentDescription.isExcludeDefaultContainerInterceptors(methodIdentifier)[ FD ]
Line_44 $$ for (InterceptorBindingMetaData binding : bindingsForAllEJBs) -->Line_145 $$ for (final String interceptor : binding.getInterceptorOrder()) [ FD ]
Line_25 $$ for (final InterceptorBindingMetaData containerInterceptorBinding : containerInterceptorBindings) -->Line_30 $$ if (containerInterceptorBinding.getInterceptorOrder() != null) [ FD ]
Line_58 $$ componentClass = module.getClassLoader().loadClass(ejbComponentDescription.getComponentClassName())-->Line_112 $$ throw EjbLogger.ROOT_LOGGER.failToFindMethodWithParameterTypes(componentClass.getName(), methodData.getMethodName(), methodData.getMethodParams())[ FD ]
Line_44 $$ for (InterceptorBindingMetaData binding : bindingsForAllEJBs) -->Line_77 $$ if (binding.isTotalOrdering()) [ FD ]
