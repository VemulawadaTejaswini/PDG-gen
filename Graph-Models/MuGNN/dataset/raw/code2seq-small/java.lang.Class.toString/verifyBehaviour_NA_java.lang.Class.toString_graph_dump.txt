Line_2 $$ private void verifyBehaviour(ConcurrentServiceBinding<Class, String> binder) -->Line_11 $$ isEmpty(binder)[ FD ]
Line_5 $$ for (Class newtype : testTypes) -->Line_6 $$ addedTypes.add(newtype)[ FD ]
Line_2 $$ private void verifyBehaviour(ConcurrentServiceBinding<Class, String> binder) -->Line_4 $$ HashSet<Class> addedTypes = new HashSet<Class>()[ CD ]
Line_5 $$ for (Class newtype : testTypes) -->Line_7 $$ binder.put(newtype, newtype.toString())[ FD ]
Line_4 $$ HashSet<Class> addedTypes = new HashSet<Class>()-->Line_6 $$ addedTypes.add(newtype)[ FD ]
Line_4 $$ HashSet<Class> addedTypes = new HashSet<Class>()-->Line_8 $$ containsExactly(binder, addedTypes)[ FD ]
Line_2 $$ private void verifyBehaviour(ConcurrentServiceBinding<Class, String> binder) -->Line_11 $$ isEmpty(binder)[ CD ]
Line_2 $$ private void verifyBehaviour(ConcurrentServiceBinding<Class, String> binder) -->Line_3 $$ isEmpty(binder)[ CD ]
Line_2 $$ private void verifyBehaviour(ConcurrentServiceBinding<Class, String> binder) -->Line_3 $$ isEmpty(binder)[ FD ]
Line_2 $$ private void verifyBehaviour(ConcurrentServiceBinding<Class, String> binder) -->Line_10 $$ binder.clear()[ CD ]
Line_2 $$ private void verifyBehaviour(ConcurrentServiceBinding<Class, String> binder) -->Line_10 $$ binder.clear()[ FD ]
Line_2 $$ private void verifyBehaviour(ConcurrentServiceBinding<Class, String> binder) -->Line_8 $$ containsExactly(binder, addedTypes)[ FD ]
Line_2 $$ private void verifyBehaviour(ConcurrentServiceBinding<Class, String> binder) -->Line_7 $$ binder.put(newtype, newtype.toString())[ FD ]
