Line_3 $$ Class<? extends ModuleFixtureBuilder> implClass = myProviders.get(key)-->Line_4 $$ Assert.assertNotNull(key.toString(), implClass)[ FD ]
Line_2 $$ private <M extends ModuleFixtureBuilder> M createModuleBuilder(Class<M> key) -->Line_3 $$ Class<? extends ModuleFixtureBuilder> implClass = myProviders.get(key)[ FD ]
Line_2 $$ private <M extends ModuleFixtureBuilder> M createModuleBuilder(Class<M> key) -->Line_4 $$ Assert.assertNotNull(key.toString(), implClass)[ FD ]
Line_5 $$ final ConstructorInjectionComponentAdapter adapter = new ConstructorInjectionComponentAdapter(implClass, implClass, null, true)-->Line_6 $$ return (M) adapter.getComponentInstance(myContainer)[ FD ]
Line_2 $$ private <M extends ModuleFixtureBuilder> M createModuleBuilder(Class<M> key) -->Line_4 $$ Assert.assertNotNull(key.toString(), implClass)[ CD ]
Line_2 $$ private <M extends ModuleFixtureBuilder> M createModuleBuilder(Class<M> key) -->Line_5 $$ final ConstructorInjectionComponentAdapter adapter = new ConstructorInjectionComponentAdapter(implClass, implClass, null, true)[ CD ]
Line_2 $$ private <M extends ModuleFixtureBuilder> M createModuleBuilder(Class<M> key) -->Line_3 $$ Class<? extends ModuleFixtureBuilder> implClass = myProviders.get(key)[ CD ]
Line_2 $$ private <M extends ModuleFixtureBuilder> M createModuleBuilder(Class<M> key) -->Line_6 $$ return (M) adapter.getComponentInstance(myContainer)[ CD ]
