Line_2 $$ public void readFields(DataInput in) throws IOException -->Line_10 $$ int length = in.readInt()[ CD ]
Line_4 $$ Class<?> componentType = getPrimitiveClass(className)-->Line_24 $$ if (componentType == Integer.TYPE) [ FD ]
Line_2 $$ public void readFields(DataInput in) throws IOException -->Line_5 $$ if (componentType == null) [ CD ]
Line_28 $$ if (componentType == Float.TYPE) -->Line_29 $$ readFloatArray(in)[ CD ]
Line_22 $$ if (componentType == Short.TYPE) -->Line_23 $$ readShortArray(in)[ CD ]
Line_4 $$ Class<?> componentType = getPrimitiveClass(className)-->Line_20 $$ if (componentType == Byte.TYPE) [ FD ]
Line_4 $$ Class<?> componentType = getPrimitiveClass(className)-->Line_18 $$ if (componentType == Character.TYPE) [ FD ]
Line_3 $$ String className = UTF8.readString(in)-->Line_4 $$ Class<?> componentType = getPrimitiveClass(className)[ FD ]
Line_2 $$ public void readFields(DataInput in) throws IOException -->Line_29 $$ readFloatArray(in)[ FD ]
Line_16 $$ if (componentType == Boolean.TYPE) -->Line_17 $$ readBooleanArray(in)[ CD ]
Line_4 $$ Class<?> componentType = getPrimitiveClass(className)-->Line_26 $$ if (componentType == Long.TYPE) [ FD ]
Line_2 $$ public void readFields(DataInput in) throws IOException -->Line_8 $$ checkDeclaredComponentType(componentType)[ CD ]
Line_10 $$ int length = in.readInt()-->Line_11 $$ if (length < 0) [ FD ]
Line_4 $$ Class<?> componentType = getPrimitiveClass(className)-->Line_9 $$ this.componentType = componentType[ FD ]
Line_4 $$ Class<?> componentType = getPrimitiveClass(className)-->Line_16 $$ if (componentType == Boolean.TYPE) [ FD ]
Line_20 $$ if (componentType == Byte.TYPE) -->Line_21 $$ readByteArray(in)[ CD ]
Line_2 $$ public void readFields(DataInput in) throws IOException -->Line_3 $$ String className = UTF8.readString(in)[ CD ]
Line_2 $$ public void readFields(DataInput in) throws IOException -->Line_10 $$ int length = in.readInt()[ FD ]
Line_22 $$ if (componentType == Short.TYPE) -->Line_24 $$ if (componentType == Integer.TYPE) [ CD ]
Line_4 $$ Class<?> componentType = getPrimitiveClass(className)-->Line_15 $$ value = Array.newInstance(componentType, length)[ FD ]
Line_26 $$ if (componentType == Long.TYPE) -->Line_27 $$ readLongArray(in)[ CD ]
Line_2 $$ public void readFields(DataInput in) throws IOException -->Line_25 $$ readIntArray(in)[ FD ]
Line_2 $$ public void readFields(DataInput in) throws IOException -->Line_3 $$ String className = UTF8.readString(in)[ FD ]
Line_2 $$ public void readFields(DataInput in) throws IOException -->Line_9 $$ this.componentType = componentType[ CD ]
Line_4 $$ Class<?> componentType = getPrimitiveClass(className)-->Line_33 $$ throw new IOException("Encoded type " + className + " converted to valid component type " + componentType.toString() + " but no encoding is implemented for this type.")[ FD ]
Line_2 $$ public void readFields(DataInput in) throws IOException -->Line_27 $$ readLongArray(in)[ FD ]
Line_10 $$ int length = in.readInt()-->Line_14 $$ this.length = length[ FD ]
Line_10 $$ int length = in.readInt()-->Line_15 $$ value = Array.newInstance(componentType, length)[ FD ]
Line_18 $$ if (componentType == Character.TYPE) -->Line_20 $$ if (componentType == Byte.TYPE) [ CD ]
Line_18 $$ if (componentType == Character.TYPE) -->Line_19 $$ readCharArray(in)[ CD ]
Line_2 $$ public void readFields(DataInput in) throws IOException -->Line_4 $$ Class<?> componentType = getPrimitiveClass(className)[ CD ]
Line_2 $$ public void readFields(DataInput in) throws IOException -->Line_21 $$ readByteArray(in)[ FD ]
Line_2 $$ public void readFields(DataInput in) throws IOException -->Line_23 $$ readShortArray(in)[ FD ]
Line_4 $$ Class<?> componentType = getPrimitiveClass(className)-->Line_28 $$ if (componentType == Float.TYPE) [ FD ]
Line_28 $$ if (componentType == Float.TYPE) -->Line_30 $$ if (componentType == Double.TYPE) [ CD ]
Line_16 $$ if (componentType == Boolean.TYPE) -->Line_18 $$ if (componentType == Character.TYPE) [ CD ]
Line_24 $$ if (componentType == Integer.TYPE) -->Line_25 $$ readIntArray(in)[ CD ]
Line_26 $$ if (componentType == Long.TYPE) -->Line_28 $$ if (componentType == Float.TYPE) [ CD ]
Line_2 $$ public void readFields(DataInput in) throws IOException -->Line_31 $$ readDoubleArray(in)[ FD ]
Line_4 $$ Class<?> componentType = getPrimitiveClass(className)-->Line_22 $$ if (componentType == Short.TYPE) [ FD ]
Line_2 $$ public void readFields(DataInput in) throws IOException -->Line_14 $$ this.length = length[ CD ]
Line_30 $$ if (componentType == Double.TYPE) -->Line_31 $$ readDoubleArray(in)[ CD ]
Line_4 $$ Class<?> componentType = getPrimitiveClass(className)-->Line_5 $$ if (componentType == null) [ FD ]
Line_2 $$ public void readFields(DataInput in) throws IOException -->Line_17 $$ readBooleanArray(in)[ FD ]
Line_4 $$ Class<?> componentType = getPrimitiveClass(className)-->Line_8 $$ checkDeclaredComponentType(componentType)[ FD ]
Line_2 $$ public void readFields(DataInput in) throws IOException -->Line_16 $$ if (componentType == Boolean.TYPE) [ CD ]
Line_2 $$ public void readFields(DataInput in) throws IOException -->Line_19 $$ readCharArray(in)[ FD ]
Line_4 $$ Class<?> componentType = getPrimitiveClass(className)-->Line_30 $$ if (componentType == Double.TYPE) [ FD ]
Line_2 $$ public void readFields(DataInput in) throws IOException -->Line_11 $$ if (length < 0) [ CD ]
Line_20 $$ if (componentType == Byte.TYPE) -->Line_22 $$ if (componentType == Short.TYPE) [ CD ]
Line_24 $$ if (componentType == Integer.TYPE) -->Line_26 $$ if (componentType == Long.TYPE) [ CD ]
Line_2 $$ public void readFields(DataInput in) throws IOException -->Line_15 $$ value = Array.newInstance(componentType, length)[ CD ]
