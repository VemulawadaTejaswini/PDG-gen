Line_2 $$ private void containsExactly(ConcurrentServiceBinding<Class, String> binder, HashSet<Class> addedTypes) -->Line_16 $$ Assert.assertEquals(addedTypes.size(), countElements)[ FD ]
Line_3 $$ for (Class knownType : addedTypes) -->Line_6 $$ Assert.assertEquals(knownType.toString(), value)[ FD ]
Line_7 $$ int countElements = 0-->Line_10 $$ countElements++[ FD ]
Line_13 $$ present = true-->Line_17 $$ Assert.assertTrue(present)[ FD ]
Line_8 $$ boolean present = false-->Line_12 $$ Assert.assertFalse("should have been unique", present)[ FD ]
Line_11 $$ if (each.equals(knownType.toString())) -->Line_13 $$ present = true[ CD ]
Line_8 $$ boolean present = false-->Line_17 $$ Assert.assertTrue(present)[ FD ]
Line_3 $$ for (Class knownType : addedTypes) -->Line_4 $$ final String value = binder.get(knownType)[ FD ]
Line_11 $$ if (each.equals(knownType.toString())) -->Line_12 $$ Assert.assertFalse("should have been unique", present)[ CD ]
Line_3 $$ for (Class knownType : addedTypes) -->Line_11 $$ if (each.equals(knownType.toString())) [ FD ]
Line_2 $$ private void containsExactly(ConcurrentServiceBinding<Class, String> binder, HashSet<Class> addedTypes) -->Line_4 $$ final String value = binder.get(knownType)[ FD ]
Line_4 $$ final String value = binder.get(knownType)-->Line_6 $$ Assert.assertEquals(knownType.toString(), value)[ FD ]
Line_9 $$ for (String each : binder.values()) -->Line_11 $$ if (each.equals(knownType.toString())) [ FD ]
Line_8 $$ boolean present = false-->Line_13 $$ present = true[ FD ]
Line_2 $$ private void containsExactly(ConcurrentServiceBinding<Class, String> binder, HashSet<Class> addedTypes) -->Line_9 $$ for (String each : binder.values()) [ FD ]
Line_7 $$ int countElements = 0-->Line_16 $$ Assert.assertEquals(addedTypes.size(), countElements)[ FD ]
Line_4 $$ final String value = binder.get(knownType)-->Line_5 $$ Assert.assertNotNull(value)[ FD ]
