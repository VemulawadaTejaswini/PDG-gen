Line_2 $$ public static void addSecondLevelCacheDependencies(Properties mutableProperties, String scopedPersistenceUnitName) -->Line_4 $$ if (scopedPersistenceUnitName != null) [ FD ]
Line_23 $$ if (Boolean.parseBoolean(mutableProperties.getProperty(AvailableSettings.USE_QUERY_CACHE))) -->Line_25 $$ cacheSettings.put(TIMESTAMPS, mutableProperties.getProperty(InfinispanRegionFactory.TIMESTAMPS_CACHE_RESOURCE_PROP, InfinispanRegionFactory.DEF_QUERY_RESOURCE))[ CD ]
Line_13 $$ if (regionFactory.equals(DEFAULT_REGION_FACTORY)) -->Line_23 $$ if (Boolean.parseBoolean(mutableProperties.getProperty(AvailableSettings.USE_QUERY_CACHE))) [ CD ]
Line_14 $$ String container = mutableProperties.getProperty(InfinispanRegionFactory.CACHE_CONTAINER)-->Line_15 $$ if (container == null) [ FD ]
Line_8 $$ String regionFactory = mutableProperties.getProperty(AvailableSettings.CACHE_REGION_FACTORY)-->Line_9 $$ if (regionFactory == null) [ FD ]
Line_19 $$ Properties cacheSettings = new Properties()-->Line_21 $$ cacheSettings.put(ENTITY, mutableProperties.getProperty(InfinispanRegionFactory.ENTITY_CACHE_RESOURCE_PROP, InfinispanRegionFactory.DEF_ENTITY_RESOURCE))[ FD ]
Line_19 $$ Properties cacheSettings = new Properties()-->Line_27 $$ Notification.addCacheDependencies(Classification.INFINISPAN, cacheSettings)[ FD ]
Line_3 $$ if (mutableProperties.getProperty(AvailableSettings.CACHE_REGION_PREFIX) == null) -->Line_4 $$ if (scopedPersistenceUnitName != null) [ CD ]
Line_2 $$ public static void addSecondLevelCacheDependencies(Properties mutableProperties, String scopedPersistenceUnitName) -->Line_25 $$ cacheSettings.put(TIMESTAMPS, mutableProperties.getProperty(InfinispanRegionFactory.TIMESTAMPS_CACHE_RESOURCE_PROP, InfinispanRegionFactory.DEF_QUERY_RESOURCE))[ FD ]
Line_14 $$ String container = mutableProperties.getProperty(InfinispanRegionFactory.CACHE_CONTAINER)-->Line_16 $$ container = InfinispanRegionFactory.DEFAULT_CACHE_CONTAINER[ FD ]
Line_15 $$ if (container == null) -->Line_16 $$ container = InfinispanRegionFactory.DEFAULT_CACHE_CONTAINER[ CD ]
Line_10 $$ regionFactory = DEFAULT_REGION_FACTORY-->Line_13 $$ if (regionFactory.equals(DEFAULT_REGION_FACTORY)) [ FD ]
Line_8 $$ String regionFactory = mutableProperties.getProperty(AvailableSettings.CACHE_REGION_FACTORY)-->Line_10 $$ regionFactory = DEFAULT_REGION_FACTORY[ FD ]
Line_2 $$ public static void addSecondLevelCacheDependencies(Properties mutableProperties, String scopedPersistenceUnitName) -->Line_11 $$ mutableProperties.setProperty(AvailableSettings.CACHE_REGION_FACTORY, regionFactory)[ FD ]
Line_2 $$ public static void addSecondLevelCacheDependencies(Properties mutableProperties, String scopedPersistenceUnitName) -->Line_9 $$ if (regionFactory == null) [ CD ]
Line_4 $$ if (scopedPersistenceUnitName != null) -->Line_5 $$ mutableProperties.setProperty(AvailableSettings.CACHE_REGION_PREFIX, scopedPersistenceUnitName)[ CD ]
Line_13 $$ if (regionFactory.equals(DEFAULT_REGION_FACTORY)) -->Line_21 $$ cacheSettings.put(ENTITY, mutableProperties.getProperty(InfinispanRegionFactory.ENTITY_CACHE_RESOURCE_PROP, InfinispanRegionFactory.DEF_ENTITY_RESOURCE))[ CD ]
Line_19 $$ Properties cacheSettings = new Properties()-->Line_20 $$ cacheSettings.put(CONTAINER, container)[ FD ]
Line_19 $$ Properties cacheSettings = new Properties()-->Line_22 $$ cacheSettings.put(COLLECTION, mutableProperties.getProperty(InfinispanRegionFactory.COLLECTION_CACHE_RESOURCE_PROP, InfinispanRegionFactory.DEF_ENTITY_RESOURCE))[ FD ]
Line_13 $$ if (regionFactory.equals(DEFAULT_REGION_FACTORY)) -->Line_14 $$ String container = mutableProperties.getProperty(InfinispanRegionFactory.CACHE_CONTAINER)[ CD ]
Line_2 $$ public static void addSecondLevelCacheDependencies(Properties mutableProperties, String scopedPersistenceUnitName) -->Line_13 $$ if (regionFactory.equals(DEFAULT_REGION_FACTORY)) [ CD ]
Line_2 $$ public static void addSecondLevelCacheDependencies(Properties mutableProperties, String scopedPersistenceUnitName) -->Line_23 $$ if (Boolean.parseBoolean(mutableProperties.getProperty(AvailableSettings.USE_QUERY_CACHE))) [ FD ]
Line_13 $$ if (regionFactory.equals(DEFAULT_REGION_FACTORY)) -->Line_20 $$ cacheSettings.put(CONTAINER, container)[ CD ]
Line_2 $$ public static void addSecondLevelCacheDependencies(Properties mutableProperties, String scopedPersistenceUnitName) -->Line_24 $$ cacheSettings.put(QUERY, mutableProperties.getProperty(InfinispanRegionFactory.QUERY_CACHE_RESOURCE_PROP, InfinispanRegionFactory.DEF_QUERY_RESOURCE))[ FD ]
Line_8 $$ String regionFactory = mutableProperties.getProperty(AvailableSettings.CACHE_REGION_FACTORY)-->Line_13 $$ if (regionFactory.equals(DEFAULT_REGION_FACTORY)) [ FD ]
Line_19 $$ Properties cacheSettings = new Properties()-->Line_25 $$ cacheSettings.put(TIMESTAMPS, mutableProperties.getProperty(InfinispanRegionFactory.TIMESTAMPS_CACHE_RESOURCE_PROP, InfinispanRegionFactory.DEF_QUERY_RESOURCE))[ FD ]
Line_8 $$ String regionFactory = mutableProperties.getProperty(AvailableSettings.CACHE_REGION_FACTORY)-->Line_11 $$ mutableProperties.setProperty(AvailableSettings.CACHE_REGION_FACTORY, regionFactory)[ FD ]
Line_9 $$ if (regionFactory == null) -->Line_11 $$ mutableProperties.setProperty(AvailableSettings.CACHE_REGION_FACTORY, regionFactory)[ CD ]
Line_10 $$ regionFactory = DEFAULT_REGION_FACTORY-->Line_11 $$ mutableProperties.setProperty(AvailableSettings.CACHE_REGION_FACTORY, regionFactory)[ FD ]
Line_2 $$ public static void addSecondLevelCacheDependencies(Properties mutableProperties, String scopedPersistenceUnitName) -->Line_17 $$ mutableProperties.setProperty(InfinispanRegionFactory.CACHE_CONTAINER, container)[ FD ]
Line_14 $$ String container = mutableProperties.getProperty(InfinispanRegionFactory.CACHE_CONTAINER)-->Line_17 $$ mutableProperties.setProperty(InfinispanRegionFactory.CACHE_CONTAINER, container)[ FD ]
Line_13 $$ if (regionFactory.equals(DEFAULT_REGION_FACTORY)) -->Line_19 $$ Properties cacheSettings = new Properties()[ CD ]
Line_9 $$ if (regionFactory == null) -->Line_10 $$ regionFactory = DEFAULT_REGION_FACTORY[ CD ]
Line_2 $$ public static void addSecondLevelCacheDependencies(Properties mutableProperties, String scopedPersistenceUnitName) -->Line_8 $$ String regionFactory = mutableProperties.getProperty(AvailableSettings.CACHE_REGION_FACTORY)[ FD ]
Line_19 $$ Properties cacheSettings = new Properties()-->Line_24 $$ cacheSettings.put(QUERY, mutableProperties.getProperty(InfinispanRegionFactory.QUERY_CACHE_RESOURCE_PROP, InfinispanRegionFactory.DEF_QUERY_RESOURCE))[ FD ]
Line_2 $$ public static void addSecondLevelCacheDependencies(Properties mutableProperties, String scopedPersistenceUnitName) -->Line_21 $$ cacheSettings.put(ENTITY, mutableProperties.getProperty(InfinispanRegionFactory.ENTITY_CACHE_RESOURCE_PROP, InfinispanRegionFactory.DEF_ENTITY_RESOURCE))[ FD ]
Line_15 $$ if (container == null) -->Line_17 $$ mutableProperties.setProperty(InfinispanRegionFactory.CACHE_CONTAINER, container)[ CD ]
Line_23 $$ if (Boolean.parseBoolean(mutableProperties.getProperty(AvailableSettings.USE_QUERY_CACHE))) -->Line_24 $$ cacheSettings.put(QUERY, mutableProperties.getProperty(InfinispanRegionFactory.QUERY_CACHE_RESOURCE_PROP, InfinispanRegionFactory.DEF_QUERY_RESOURCE))[ CD ]
Line_2 $$ public static void addSecondLevelCacheDependencies(Properties mutableProperties, String scopedPersistenceUnitName) -->Line_3 $$ if (mutableProperties.getProperty(AvailableSettings.CACHE_REGION_PREFIX) == null) [ CD ]
Line_2 $$ public static void addSecondLevelCacheDependencies(Properties mutableProperties, String scopedPersistenceUnitName) -->Line_5 $$ mutableProperties.setProperty(AvailableSettings.CACHE_REGION_PREFIX, scopedPersistenceUnitName)[ FD ]
Line_16 $$ container = InfinispanRegionFactory.DEFAULT_CACHE_CONTAINER-->Line_17 $$ mutableProperties.setProperty(InfinispanRegionFactory.CACHE_CONTAINER, container)[ FD ]
Line_16 $$ container = InfinispanRegionFactory.DEFAULT_CACHE_CONTAINER-->Line_20 $$ cacheSettings.put(CONTAINER, container)[ FD ]
Line_13 $$ if (regionFactory.equals(DEFAULT_REGION_FACTORY)) -->Line_22 $$ cacheSettings.put(COLLECTION, mutableProperties.getProperty(InfinispanRegionFactory.COLLECTION_CACHE_RESOURCE_PROP, InfinispanRegionFactory.DEF_ENTITY_RESOURCE))[ CD ]
Line_2 $$ public static void addSecondLevelCacheDependencies(Properties mutableProperties, String scopedPersistenceUnitName) -->Line_22 $$ cacheSettings.put(COLLECTION, mutableProperties.getProperty(InfinispanRegionFactory.COLLECTION_CACHE_RESOURCE_PROP, InfinispanRegionFactory.DEF_ENTITY_RESOURCE))[ FD ]
Line_14 $$ String container = mutableProperties.getProperty(InfinispanRegionFactory.CACHE_CONTAINER)-->Line_20 $$ cacheSettings.put(CONTAINER, container)[ FD ]
Line_2 $$ public static void addSecondLevelCacheDependencies(Properties mutableProperties, String scopedPersistenceUnitName) -->Line_14 $$ String container = mutableProperties.getProperty(InfinispanRegionFactory.CACHE_CONTAINER)[ FD ]
Line_13 $$ if (regionFactory.equals(DEFAULT_REGION_FACTORY)) -->Line_27 $$ Notification.addCacheDependencies(Classification.INFINISPAN, cacheSettings)[ CD ]
Line_2 $$ public static void addSecondLevelCacheDependencies(Properties mutableProperties, String scopedPersistenceUnitName) -->Line_8 $$ String regionFactory = mutableProperties.getProperty(AvailableSettings.CACHE_REGION_FACTORY)[ CD ]
Line_13 $$ if (regionFactory.equals(DEFAULT_REGION_FACTORY)) -->Line_15 $$ if (container == null) [ CD ]
Line_2 $$ public static void addSecondLevelCacheDependencies(Properties mutableProperties, String scopedPersistenceUnitName) -->Line_3 $$ if (mutableProperties.getProperty(AvailableSettings.CACHE_REGION_PREFIX) == null) [ FD ]
