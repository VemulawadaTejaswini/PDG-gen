Line_23 $$ if (properties.size() > 1) -->Line_24 $$ File cacheFile = new File(_dir, _cacheFileName)[ CD ]
Line_2 $$ public void execute() throws BuildException -->Line_10 $$ Properties properties = new Properties()[ CD ]
Line_17 $$ if (!UpToDateUtil.isClean(git, relativePath)) -->Line_18 $$ properties.put(relativePath, "false")[ CD ]
Line_2 $$ public void execute() throws BuildException -->Line_3 $$ if (_dir == null) [ CD ]
Line_16 $$ String relativePath = PathUtil.toRelativePath(gitDir, path.toString())-->Line_21 $$ properties.put(relativePath, Boolean.toString(!UpToDateUtil.hasChangedSince(repository, relativePath, getModuleSnapshotGitHash(path))))[ FD ]
Line_10 $$ Properties properties = new Properties()-->Line_11 $$ properties.put("pname", UpToDateUtil.getProcessName())[ FD ]
Line_15 $$ for (Path path : paths) -->Line_16 $$ String relativePath = PathUtil.toRelativePath(gitDir, path.toString())[ FD ]
Line_26 $$ try (OutputStream outputStream = new FileOutputStream(cacheFile)) -->Line_27 $$ properties.store(outputStream, null)[ FD ]
Line_14 $$ Git git = new Git(repository)-->Line_17 $$ if (!UpToDateUtil.isClean(git, relativePath)) [ FD ]
Line_7 $$ if (paths.isEmpty()) -->Line_8 $$ return[ CD ]
Line_16 $$ String relativePath = PathUtil.toRelativePath(gitDir, path.toString())-->Line_17 $$ if (!UpToDateUtil.isClean(git, relativePath)) [ FD ]
Line_10 $$ Properties properties = new Properties()-->Line_21 $$ properties.put(relativePath, Boolean.toString(!UpToDateUtil.hasChangedSince(repository, relativePath, getModuleSnapshotGitHash(path))))[ FD ]
Line_24 $$ File cacheFile = new File(_dir, _cacheFileName)-->Line_25 $$ cacheFile.deleteOnExit()[ FD ]
Line_10 $$ Properties properties = new Properties()-->Line_27 $$ properties.store(outputStream, null)[ FD ]
Line_23 $$ if (properties.size() > 1) -->Line_25 $$ cacheFile.deleteOnExit()[ CD ]
Line_2 $$ public void execute() throws BuildException -->Line_6 $$ List<Path> paths = scanSnapshotPaths()[ CD ]
Line_13 $$ try (Repository repository = RepositoryCache.open(FileKey.exact(gitDir, FS.DETECTED))) -->Line_21 $$ properties.put(relativePath, Boolean.toString(!UpToDateUtil.hasChangedSince(repository, relativePath, getModuleSnapshotGitHash(path))))[ FD ]
Line_2 $$ public void execute() throws BuildException -->Line_11 $$ properties.put("pname", UpToDateUtil.getProcessName())[ CD ]
Line_6 $$ List<Path> paths = scanSnapshotPaths()-->Line_7 $$ if (paths.isEmpty()) [ FD ]
Line_12 $$ File gitDir = PathUtil.getGitDir(_gitDir, getProject(), getLocation())-->Line_16 $$ String relativePath = PathUtil.toRelativePath(gitDir, path.toString())[ FD ]
Line_10 $$ Properties properties = new Properties()-->Line_23 $$ if (properties.size() > 1) [ FD ]
Line_10 $$ Properties properties = new Properties()-->Line_18 $$ properties.put(relativePath, "false")[ FD ]
Line_12 $$ File gitDir = PathUtil.getGitDir(_gitDir, getProject(), getLocation())-->Line_13 $$ try (Repository repository = RepositoryCache.open(FileKey.exact(gitDir, FS.DETECTED))) [ FD ]
Line_2 $$ public void execute() throws BuildException -->Line_7 $$ if (paths.isEmpty()) [ CD ]
Line_2 $$ public void execute() throws BuildException -->Line_12 $$ File gitDir = PathUtil.getGitDir(_gitDir, getProject(), getLocation())[ CD ]
Line_16 $$ String relativePath = PathUtil.toRelativePath(gitDir, path.toString())-->Line_18 $$ properties.put(relativePath, "false")[ FD ]
Line_15 $$ for (Path path : paths) -->Line_21 $$ properties.put(relativePath, Boolean.toString(!UpToDateUtil.hasChangedSince(repository, relativePath, getModuleSnapshotGitHash(path))))[ FD ]
