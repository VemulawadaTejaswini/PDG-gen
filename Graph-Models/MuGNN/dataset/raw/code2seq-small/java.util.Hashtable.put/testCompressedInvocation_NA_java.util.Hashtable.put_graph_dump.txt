Line_10 $$ final String echoWithRequestCompressed = bean.echoWithRequestCompress(message)-->Line_11 $$ Assert.assertEquals("Unexpected response for invocation with only request compressed", message, echoWithRequestCompressed)[ FD ]
Line_7 $$ final Context jndiCtx = new InitialContext(props)-->Line_8 $$ final MethodOverrideDataCompressionRemoteView bean = (MethodOverrideDataCompressionRemoteView) jndiCtx.lookup("ejb:" + "" + "/" + MODULE_NAME + "/" + "" + "/" + CompressableDataBean.class.getSimpleName() + "!" + MethodOverrideDataCompressionRemoteView.class.getName())[ FD ]
Line_14 $$ final String echoWithRequestAndResponseCompressed = bean.echoWithNoExplicitDataCompressionHintOnMethod(message)-->Line_15 $$ Assert.assertEquals("Unexpected response for invocation with both request and response compressed", message, echoWithRequestAndResponseCompressed)[ FD ]
Line_9 $$ final String message = "some message"-->Line_14 $$ final String echoWithRequestAndResponseCompressed = bean.echoWithNoExplicitDataCompressionHintOnMethod(message)[ FD ]
Line_8 $$ final MethodOverrideDataCompressionRemoteView bean = (MethodOverrideDataCompressionRemoteView) jndiCtx.lookup("ejb:" + "" + "/" + MODULE_NAME + "/" + "" + "/" + CompressableDataBean.class.getSimpleName() + "!" + MethodOverrideDataCompressionRemoteView.class.getName())-->Line_12 $$ final String echoWithResponseCompressed = bean.echoWithResponseCompress(message)[ FD ]
Line_5 $$ final Properties props = new Properties()-->Line_6 $$ props.put(Context.URL_PKG_PREFIXES, "org.jboss.ejb.client.naming")[ FD ]
Line_8 $$ final MethodOverrideDataCompressionRemoteView bean = (MethodOverrideDataCompressionRemoteView) jndiCtx.lookup("ejb:" + "" + "/" + MODULE_NAME + "/" + "" + "/" + CompressableDataBean.class.getSimpleName() + "!" + MethodOverrideDataCompressionRemoteView.class.getName())-->Line_10 $$ final String echoWithRequestCompressed = bean.echoWithRequestCompress(message)[ FD ]
Line_2 $$ public void testCompressedInvocation() throws Exception -->Line_3 $$ System.setProperty("org.jboss.ejb.client.view.annotation.scan.enabled", "true")[ CD ]
Line_9 $$ final String message = "some message"-->Line_10 $$ final String echoWithRequestCompressed = bean.echoWithRequestCompress(message)[ FD ]
Line_12 $$ final String echoWithResponseCompressed = bean.echoWithResponseCompress(message)-->Line_13 $$ Assert.assertEquals("Unexpected response for invocation with only response compressed", message, echoWithResponseCompressed)[ FD ]
Line_8 $$ final MethodOverrideDataCompressionRemoteView bean = (MethodOverrideDataCompressionRemoteView) jndiCtx.lookup("ejb:" + "" + "/" + MODULE_NAME + "/" + "" + "/" + CompressableDataBean.class.getSimpleName() + "!" + MethodOverrideDataCompressionRemoteView.class.getName())-->Line_14 $$ final String echoWithRequestAndResponseCompressed = bean.echoWithNoExplicitDataCompressionHintOnMethod(message)[ FD ]
Line_9 $$ final String message = "some message"-->Line_12 $$ final String echoWithResponseCompressed = bean.echoWithResponseCompress(message)[ FD ]
Line_9 $$ final String message = "some message"-->Line_11 $$ Assert.assertEquals("Unexpected response for invocation with only request compressed", message, echoWithRequestCompressed)[ FD ]
Line_9 $$ final String message = "some message"-->Line_15 $$ Assert.assertEquals("Unexpected response for invocation with both request and response compressed", message, echoWithRequestAndResponseCompressed)[ FD ]
Line_9 $$ final String message = "some message"-->Line_13 $$ Assert.assertEquals("Unexpected response for invocation with only response compressed", message, echoWithResponseCompressed)[ FD ]
