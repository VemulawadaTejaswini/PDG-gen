Line_7 $$ final ContextSelector<EJBClientContext> previousSelector = EJBClientContextSelector.setup(CLIENT_PROPERTIES)-->Line_27 $$ EJBClientContext.setSelector(previousSelector)[ FD ]
Line_2 $$ private void loadbalance(EJBDirectory directory, String deployment1, String deployment2) throws Exception -->Line_9 $$ int numberOfCalls = 40[ CD ]
Line_26 $$ if (previousSelector != null) -->Line_27 $$ EJBClientContext.setSelector(previousSelector)[ CD ]
Line_13 $$ StatelessRemote bean = home.create()-->Line_21 $$ bean = home.create()[ FD ]
Line_2 $$ private void loadbalance(EJBDirectory directory, String deployment1, String deployment2) throws Exception -->Line_7 $$ final ContextSelector<EJBClientContext> previousSelector = EJBClientContextSelector.setup(CLIENT_PROPERTIES)[ CD ]
Line_9 $$ int numberOfCalls = 40-->Line_24 $$ validateBalancing(bean, numberOfCalls, numberOfServers, serversProccessedAtLeast)[ FD ]
Line_13 $$ StatelessRemote bean = home.create()-->Line_14 $$ String node = bean.getNodeName()[ FD ]
Line_17 $$ Properties contextChangeProperties = new Properties()-->Line_19 $$ contextChangeProperties.put(REMOTE_HOST_PROPERTY_NAME, HOST_2.toString())[ FD ]
Line_9 $$ int numberOfCalls = 40-->Line_16 $$ validateBalancing(bean, numberOfCalls, numberOfServers, serversProccessedAtLeast)[ FD ]
Line_21 $$ bean = home.create()-->Line_24 $$ validateBalancing(bean, numberOfCalls, numberOfServers, serversProccessedAtLeast)[ FD ]
Line_2 $$ private void loadbalance(EJBDirectory directory, String deployment1, String deployment2) throws Exception -->Line_3 $$ this.start(CONTAINER_1)[ CD ]
Line_8 $$ int numberOfServers = 2-->Line_16 $$ validateBalancing(bean, numberOfCalls, numberOfServers, serversProccessedAtLeast)[ FD ]
Line_12 $$ StatelessRemoteHome home = directory.lookupHome(StatelessBean.class, StatelessRemoteHome.class)-->Line_21 $$ bean = home.create()[ FD ]
Line_2 $$ private void loadbalance(EJBDirectory directory, String deployment1, String deployment2) throws Exception -->Line_12 $$ StatelessRemoteHome home = directory.lookupHome(StatelessBean.class, StatelessRemoteHome.class)[ FD ]
Line_2 $$ private void loadbalance(EJBDirectory directory, String deployment1, String deployment2) throws Exception -->Line_4 $$ this.deploy(CONTAINER_1, deployment1)[ FD ]
Line_17 $$ Properties contextChangeProperties = new Properties()-->Line_20 $$ EJBClientContextSelector.setup(CLIENT_PROPERTIES, contextChangeProperties)[ FD ]
Line_17 $$ Properties contextChangeProperties = new Properties()-->Line_18 $$ contextChangeProperties.put(REMOTE_PORT_PROPERTY_NAME, PORT_2.toString())[ FD ]
Line_2 $$ private void loadbalance(EJBDirectory directory, String deployment1, String deployment2) throws Exception -->Line_4 $$ this.deploy(CONTAINER_1, deployment1)[ CD ]
Line_10 $$ double serversProccessedAtLeast = 0.2-->Line_16 $$ validateBalancing(bean, numberOfCalls, numberOfServers, serversProccessedAtLeast)[ FD ]
Line_2 $$ private void loadbalance(EJBDirectory directory, String deployment1, String deployment2) throws Exception -->Line_6 $$ this.deploy(CONTAINER_2, deployment2)[ CD ]
Line_14 $$ String node = bean.getNodeName()-->Line_22 $$ node = bean.getNodeName()[ FD ]
Line_12 $$ StatelessRemoteHome home = directory.lookupHome(StatelessBean.class, StatelessRemoteHome.class)-->Line_13 $$ StatelessRemote bean = home.create()[ FD ]
Line_2 $$ private void loadbalance(EJBDirectory directory, String deployment1, String deployment2) throws Exception -->Line_10 $$ double serversProccessedAtLeast = 0.2[ CD ]
Line_10 $$ double serversProccessedAtLeast = 0.2-->Line_24 $$ validateBalancing(bean, numberOfCalls, numberOfServers, serversProccessedAtLeast)[ FD ]
Line_21 $$ bean = home.create()-->Line_22 $$ node = bean.getNodeName()[ FD ]
Line_2 $$ private void loadbalance(EJBDirectory directory, String deployment1, String deployment2) throws Exception -->Line_8 $$ int numberOfServers = 2[ CD ]
Line_2 $$ private void loadbalance(EJBDirectory directory, String deployment1, String deployment2) throws Exception -->Line_6 $$ this.deploy(CONTAINER_2, deployment2)[ FD ]
Line_13 $$ StatelessRemote bean = home.create()-->Line_24 $$ validateBalancing(bean, numberOfCalls, numberOfServers, serversProccessedAtLeast)[ FD ]
Line_13 $$ StatelessRemote bean = home.create()-->Line_22 $$ node = bean.getNodeName()[ FD ]
Line_2 $$ private void loadbalance(EJBDirectory directory, String deployment1, String deployment2) throws Exception -->Line_5 $$ this.start(CONTAINER_2)[ CD ]
Line_7 $$ final ContextSelector<EJBClientContext> previousSelector = EJBClientContextSelector.setup(CLIENT_PROPERTIES)-->Line_26 $$ if (previousSelector != null) [ FD ]
Line_13 $$ StatelessRemote bean = home.create()-->Line_16 $$ validateBalancing(bean, numberOfCalls, numberOfServers, serversProccessedAtLeast)[ FD ]
Line_8 $$ int numberOfServers = 2-->Line_24 $$ validateBalancing(bean, numberOfCalls, numberOfServers, serversProccessedAtLeast)[ FD ]
