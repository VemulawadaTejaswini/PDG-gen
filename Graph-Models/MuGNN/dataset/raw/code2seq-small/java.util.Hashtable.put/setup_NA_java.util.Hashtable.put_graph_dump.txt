Line_7 $$ final Properties properties = new Properties()-->Line_11 $$ properties.put(key, propertiesToReplace.get(key))[ FD ]
Line_2 $$ public static ContextSelector<EJBClientContext> setup(String file, Properties propertiesToReplace) throws IOException -->Line_10 $$ for (Object key : propertiesToReplace.keySet()) [ FD ]
Line_3 $$ final InputStream inputStream = EJBClientContextSelector.class.getClassLoader().getResourceAsStream(file)-->Line_8 $$ properties.load(inputStream)[ FD ]
Line_2 $$ public static ContextSelector<EJBClientContext> setup(String file, Properties propertiesToReplace) throws IOException -->Line_9 $$ if (propertiesToReplace != null) [ CD ]
Line_2 $$ public static ContextSelector<EJBClientContext> setup(String file, Properties propertiesToReplace) throws IOException -->Line_4 $$ if (inputStream == null) [ CD ]
Line_7 $$ final Properties properties = new Properties()-->Line_8 $$ properties.load(inputStream)[ FD ]
Line_2 $$ public static ContextSelector<EJBClientContext> setup(String file, Properties propertiesToReplace) throws IOException -->Line_14 $$ final EJBClientConfiguration ejbClientConfiguration = new PropertiesBasedEJBClientConfiguration(properties)[ CD ]
Line_15 $$ final ConfigBasedEJBClientContextSelector selector = new ConfigBasedEJBClientContextSelector(ejbClientConfiguration)-->Line_16 $$ return EJBClientContext.setSelector(selector)[ FD ]
Line_2 $$ public static ContextSelector<EJBClientContext> setup(String file, Properties propertiesToReplace) throws IOException -->Line_9 $$ if (propertiesToReplace != null) [ FD ]
Line_2 $$ public static ContextSelector<EJBClientContext> setup(String file, Properties propertiesToReplace) throws IOException -->Line_7 $$ final Properties properties = new Properties()[ CD ]
Line_10 $$ for (Object key : propertiesToReplace.keySet()) -->Line_11 $$ properties.put(key, propertiesToReplace.get(key))[ FD ]
Line_2 $$ public static ContextSelector<EJBClientContext> setup(String file, Properties propertiesToReplace) throws IOException -->Line_11 $$ properties.put(key, propertiesToReplace.get(key))[ FD ]
Line_2 $$ public static ContextSelector<EJBClientContext> setup(String file, Properties propertiesToReplace) throws IOException -->Line_3 $$ final InputStream inputStream = EJBClientContextSelector.class.getClassLoader().getResourceAsStream(file)[ FD ]
Line_2 $$ public static ContextSelector<EJBClientContext> setup(String file, Properties propertiesToReplace) throws IOException -->Line_15 $$ final ConfigBasedEJBClientContextSelector selector = new ConfigBasedEJBClientContextSelector(ejbClientConfiguration)[ CD ]
Line_2 $$ public static ContextSelector<EJBClientContext> setup(String file, Properties propertiesToReplace) throws IOException -->Line_8 $$ properties.load(inputStream)[ CD ]
Line_2 $$ public static ContextSelector<EJBClientContext> setup(String file, Properties propertiesToReplace) throws IOException -->Line_16 $$ return EJBClientContext.setSelector(selector)[ CD ]
Line_3 $$ final InputStream inputStream = EJBClientContextSelector.class.getClassLoader().getResourceAsStream(file)-->Line_4 $$ if (inputStream == null) [ FD ]
Line_2 $$ public static ContextSelector<EJBClientContext> setup(String file, Properties propertiesToReplace) throws IOException -->Line_3 $$ final InputStream inputStream = EJBClientContextSelector.class.getClassLoader().getResourceAsStream(file)[ CD ]
