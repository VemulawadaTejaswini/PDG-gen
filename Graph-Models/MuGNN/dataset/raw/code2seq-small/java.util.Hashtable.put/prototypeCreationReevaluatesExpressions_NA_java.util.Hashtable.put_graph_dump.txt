Line_2 $$ public void prototypeCreationReevaluatesExpressions() -->Line_16 $$ ac.registerBeanDefinition("test", rbd)[ CD ]
Line_6 $$ cs.addConverter(String.class, String.class, new Converter<String, String>() -->Line_8 $$ return source.trim()[ CD ]
Line_3 $$ GenericApplicationContext ac = new GenericApplicationContext()-->Line_17 $$ ac.refresh()[ FD ]
Line_2 $$ public void prototypeCreationReevaluatesExpressions() -->Line_15 $$ rbd.getPropertyValues().add("country2", new TypedStringValue("-#[ CD ]
Line_5 $$ GenericConversionService cs = new GenericConversionService()-->Line_11 $$ ac.getBeanFactory().registerSingleton(GenericApplicationContext.CONVERSION_SERVICE_BEAN_NAME, cs)[ FD ]
Line_2 $$ public void prototypeCreationReevaluatesExpressions() -->Line_4 $$ AnnotationConfigUtils.registerAnnotationConfigProcessors(ac)[ CD ]
Line_3 $$ GenericApplicationContext ac = new GenericApplicationContext()-->Line_16 $$ ac.registerBeanDefinition("test", rbd)[ FD ]
Line_3 $$ GenericApplicationContext ac = new GenericApplicationContext()-->Line_4 $$ AnnotationConfigUtils.registerAnnotationConfigProcessors(ac)[ FD ]
Line_3 $$ GenericApplicationContext ac = new GenericApplicationContext()-->Line_11 $$ ac.getBeanFactory().registerSingleton(GenericApplicationContext.CONVERSION_SERVICE_BEAN_NAME, cs)[ FD ]
Line_2 $$ public void prototypeCreationReevaluatesExpressions() -->Line_5 $$ GenericConversionService cs = new GenericConversionService()[ CD ]
Line_3 $$ GenericApplicationContext ac = new GenericApplicationContext()-->Line_27 $$ tb = (PrototypeTestBean) ac.getBean("test")[ FD ]
Line_2 $$ public void prototypeCreationReevaluatesExpressions() -->Line_11 $$ ac.getBeanFactory().registerSingleton(GenericApplicationContext.CONVERSION_SERVICE_BEAN_NAME, cs)[ CD ]
Line_2 $$ public void prototypeCreationReevaluatesExpressions() -->Line_14 $$ rbd.getPropertyValues().add("country", "#[ CD ]
Line_5 $$ GenericConversionService cs = new GenericConversionService()-->Line_6 $$ cs.addConverter(String.class, String.class, new Converter<String, String>() [ FD ]
Line_6 $$ cs.addConverter(String.class, String.class, new Converter<String, String>() -->Line_8 $$ return source.trim()[ FD ]
Line_2 $$ public void prototypeCreationReevaluatesExpressions() -->Line_6 $$ cs.addConverter(String.class, String.class, new Converter<String, String>() [ CD ]
Line_2 $$ public void prototypeCreationReevaluatesExpressions() -->Line_17 $$ ac.refresh()[ CD ]
Line_2 $$ public void prototypeCreationReevaluatesExpressions() -->Line_3 $$ GenericApplicationContext ac = new GenericApplicationContext()[ CD ]
Line_2 $$ public void prototypeCreationReevaluatesExpressions() -->Line_13 $$ rbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)[ CD ]
Line_3 $$ GenericApplicationContext ac = new GenericApplicationContext()-->Line_21 $$ PrototypeTestBean tb = (PrototypeTestBean) ac.getBean("test")[ FD ]
