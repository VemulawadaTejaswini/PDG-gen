Line_2 $$ public void pathMatching() throws Exception -->Line_4 $$ HttpServletRequest request = new MockHttpServletRequest("GET", "/welcome.html")[ CD ]
Line_2 $$ public void pathMatching() throws Exception -->Line_5 $$ HttpServletResponse response = new MockHttpServletResponse()[ CD ]
Line_2 $$ public void pathMatching() throws Exception -->Line_11 $$ ModelAndView mv = mc.handleRequest(request, response)[ CD ]
Line_2 $$ public void pathMatching() throws Exception -->Line_9 $$ mn.setMappings(p)[ CD ]
Line_6 $$ Properties p = new Properties()-->Line_9 $$ mn.setMappings(p)[ FD ]
Line_2 $$ public void pathMatching() throws Exception -->Line_24 $$ assertTrue("No method invoked", mc.getInvokedMethods() == 0)[ CD ]
Line_15 $$ mc = new TestMaController()-->Line_20 $$ mv = mc.handleRequest(request, response)[ FD ]
Line_2 $$ public void pathMatching() throws Exception -->Line_18 $$ response = new MockHttpServletResponse()[ CD ]
Line_15 $$ mc = new TestMaController()-->Line_24 $$ assertTrue("No method invoked", mc.getInvokedMethods() == 0)[ FD ]
Line_2 $$ public void pathMatching() throws Exception -->Line_13 $$ assertTrue("view name is welcome", mv.getViewName().equals("welcome"))[ CD ]
Line_8 $$ PropertiesMethodNameResolver mn = new PropertiesMethodNameResolver()-->Line_10 $$ mc.setMethodNameResolver(mn)[ FD ]
Line_4 $$ HttpServletRequest request = new MockHttpServletRequest("GET", "/welcome.html")-->Line_11 $$ ModelAndView mv = mc.handleRequest(request, response)[ FD ]
Line_5 $$ HttpServletResponse response = new MockHttpServletResponse()-->Line_18 $$ response = new MockHttpServletResponse()[ FD ]
Line_4 $$ HttpServletRequest request = new MockHttpServletRequest("GET", "/welcome.html")-->Line_20 $$ mv = mc.handleRequest(request, response)[ FD ]
Line_2 $$ public void pathMatching() throws Exception -->Line_14 $$ assertTrue("Only one method invoked", mc.getInvokedMethods() == 1)[ CD ]
Line_8 $$ PropertiesMethodNameResolver mn = new PropertiesMethodNameResolver()-->Line_9 $$ mn.setMappings(p)[ FD ]
Line_6 $$ Properties p = new Properties()-->Line_7 $$ p.put("/welc*.html", "welcome")[ FD ]
Line_2 $$ public void pathMatching() throws Exception -->Line_8 $$ PropertiesMethodNameResolver mn = new PropertiesMethodNameResolver()[ CD ]
Line_2 $$ public void pathMatching() throws Exception -->Line_12 $$ assertTrue("Invoked welcome method", mc.wasInvoked("welcome"))[ CD ]
Line_3 $$ TestMaController mc = new TestMaController()-->Line_23 $$ assertFalse("Not invoking welcome method", mc.wasInvoked("welcome"))[ FD ]
Line_8 $$ PropertiesMethodNameResolver mn = new PropertiesMethodNameResolver()-->Line_16 $$ mc.setMethodNameResolver(mn)[ FD ]
Line_15 $$ mc = new TestMaController()-->Line_16 $$ mc.setMethodNameResolver(mn)[ FD ]
Line_3 $$ TestMaController mc = new TestMaController()-->Line_10 $$ mc.setMethodNameResolver(mn)[ FD ]
Line_15 $$ mc = new TestMaController()-->Line_23 $$ assertFalse("Not invoking welcome method", mc.wasInvoked("welcome"))[ FD ]
Line_2 $$ public void pathMatching() throws Exception -->Line_7 $$ p.put("/welc*.html", "welcome")[ CD ]
Line_3 $$ TestMaController mc = new TestMaController()-->Line_24 $$ assertTrue("No method invoked", mc.getInvokedMethods() == 0)[ FD ]
Line_4 $$ HttpServletRequest request = new MockHttpServletRequest("GET", "/welcome.html")-->Line_17 $$ request = new MockHttpServletRequest("GET", "/nomatch")[ FD ]
Line_2 $$ public void pathMatching() throws Exception -->Line_10 $$ mc.setMethodNameResolver(mn)[ CD ]
Line_18 $$ response = new MockHttpServletResponse()-->Line_20 $$ mv = mc.handleRequest(request, response)[ FD ]
Line_5 $$ HttpServletResponse response = new MockHttpServletResponse()-->Line_20 $$ mv = mc.handleRequest(request, response)[ FD ]
Line_2 $$ public void pathMatching() throws Exception -->Line_15 $$ mc = new TestMaController()[ CD ]
Line_3 $$ TestMaController mc = new TestMaController()-->Line_20 $$ mv = mc.handleRequest(request, response)[ FD ]
Line_11 $$ ModelAndView mv = mc.handleRequest(request, response)-->Line_13 $$ assertTrue("view name is welcome", mv.getViewName().equals("welcome"))[ FD ]
Line_3 $$ TestMaController mc = new TestMaController()-->Line_15 $$ mc = new TestMaController()[ FD ]
Line_2 $$ public void pathMatching() throws Exception -->Line_6 $$ Properties p = new Properties()[ CD ]
Line_2 $$ public void pathMatching() throws Exception -->Line_17 $$ request = new MockHttpServletRequest("GET", "/nomatch")[ CD ]
Line_11 $$ ModelAndView mv = mc.handleRequest(request, response)-->Line_20 $$ mv = mc.handleRequest(request, response)[ FD ]
Line_17 $$ request = new MockHttpServletRequest("GET", "/nomatch")-->Line_20 $$ mv = mc.handleRequest(request, response)[ FD ]
Line_2 $$ public void pathMatching() throws Exception -->Line_23 $$ assertFalse("Not invoking welcome method", mc.wasInvoked("welcome"))[ CD ]
Line_2 $$ public void pathMatching() throws Exception -->Line_3 $$ TestMaController mc = new TestMaController()[ CD ]
Line_3 $$ TestMaController mc = new TestMaController()-->Line_12 $$ assertTrue("Invoked welcome method", mc.wasInvoked("welcome"))[ FD ]
Line_3 $$ TestMaController mc = new TestMaController()-->Line_14 $$ assertTrue("Only one method invoked", mc.getInvokedMethods() == 1)[ FD ]
Line_3 $$ TestMaController mc = new TestMaController()-->Line_11 $$ ModelAndView mv = mc.handleRequest(request, response)[ FD ]
Line_2 $$ public void pathMatching() throws Exception -->Line_16 $$ mc.setMethodNameResolver(mn)[ CD ]
Line_3 $$ TestMaController mc = new TestMaController()-->Line_16 $$ mc.setMethodNameResolver(mn)[ FD ]
Line_5 $$ HttpServletResponse response = new MockHttpServletResponse()-->Line_11 $$ ModelAndView mv = mc.handleRequest(request, response)[ FD ]
