Line_5 $$ if (useQuartzCluster) -->Line_6 $$ DB db = DBManagerUtil.getDB()[ CD ]
Line_4 $$ Properties properties = _props.getProperties(propertiesPrefix, true)-->Line_9 $$ String lockHandlerClassName = properties.getProperty("org.quartz.jobStore.lockHandler.class")[ FD ]
Line_7 $$ DBType dbType = db.getDBType()-->Line_8 $$ if (dbType == DBType.SQLSERVER) [ FD ]
Line_5 $$ if (useQuartzCluster) -->Line_8 $$ if (dbType == DBType.SQLSERVER) [ CD ]
Line_15 $$ if (dbType == DBType.HYPERSONIC) -->Line_18 $$ properties.put("org.quartz.jobStore.isClustered", Boolean.TRUE.toString())[ CD ]
Line_5 $$ if (useQuartzCluster) -->Line_14 $$ if (GetterUtil.getBoolean(_props.get(PropsKeys.CLUSTER_LINK_ENABLED))) [ CD ]
Line_4 $$ Properties properties = _props.getProperties(propertiesPrefix, true)-->Line_18 $$ properties.put("org.quartz.jobStore.isClustered", Boolean.TRUE.toString())[ FD ]
Line_5 $$ if (useQuartzCluster) -->Line_7 $$ DBType dbType = db.getDBType()[ CD ]
Line_14 $$ if (GetterUtil.getBoolean(_props.get(PropsKeys.CLUSTER_LINK_ENABLED))) -->Line_15 $$ if (dbType == DBType.HYPERSONIC) [ CD ]
Line_8 $$ if (dbType == DBType.SQLSERVER) -->Line_10 $$ if (Validator.isNull(lockHandlerClassName)) [ CD ]
Line_15 $$ if (dbType == DBType.HYPERSONIC) -->Line_16 $$ _log.error("Unable to cluster scheduler on Hypersonic")[ CD ]
Line_8 $$ if (dbType == DBType.SQLSERVER) -->Line_9 $$ String lockHandlerClassName = properties.getProperty("org.quartz.jobStore.lockHandler.class")[ CD ]
Line_7 $$ DBType dbType = db.getDBType()-->Line_15 $$ if (dbType == DBType.HYPERSONIC) [ FD ]
Line_2 $$ protected Scheduler initializeScheduler(String propertiesPrefix, boolean useQuartzCluster) throws Exception -->Line_23 $$ return schedulerFactory.getScheduler()[ CD ]
Line_2 $$ protected Scheduler initializeScheduler(String propertiesPrefix, boolean useQuartzCluster) throws Exception -->Line_22 $$ schedulerFactory.initialize(properties)[ CD ]
Line_2 $$ protected Scheduler initializeScheduler(String propertiesPrefix, boolean useQuartzCluster) throws Exception -->Line_4 $$ Properties properties = _props.getProperties(propertiesPrefix, true)[ FD ]
Line_2 $$ protected Scheduler initializeScheduler(String propertiesPrefix, boolean useQuartzCluster) throws Exception -->Line_3 $$ StdSchedulerFactory schedulerFactory = new StdSchedulerFactory()[ CD ]
Line_3 $$ StdSchedulerFactory schedulerFactory = new StdSchedulerFactory()-->Line_23 $$ return schedulerFactory.getScheduler()[ FD ]
Line_10 $$ if (Validator.isNull(lockHandlerClassName)) -->Line_11 $$ properties.setProperty("org.quartz.jobStore.lockHandler.class", UpdateLockRowSemaphore.class.getName())[ CD ]
Line_3 $$ StdSchedulerFactory schedulerFactory = new StdSchedulerFactory()-->Line_22 $$ schedulerFactory.initialize(properties)[ FD ]
Line_2 $$ protected Scheduler initializeScheduler(String propertiesPrefix, boolean useQuartzCluster) throws Exception -->Line_5 $$ if (useQuartzCluster) [ CD ]
Line_2 $$ protected Scheduler initializeScheduler(String propertiesPrefix, boolean useQuartzCluster) throws Exception -->Line_4 $$ Properties properties = _props.getProperties(propertiesPrefix, true)[ CD ]
Line_9 $$ String lockHandlerClassName = properties.getProperty("org.quartz.jobStore.lockHandler.class")-->Line_10 $$ if (Validator.isNull(lockHandlerClassName)) [ FD ]
Line_4 $$ Properties properties = _props.getProperties(propertiesPrefix, true)-->Line_11 $$ properties.setProperty("org.quartz.jobStore.lockHandler.class", UpdateLockRowSemaphore.class.getName())[ FD ]
Line_6 $$ DB db = DBManagerUtil.getDB()-->Line_7 $$ DBType dbType = db.getDBType()[ FD ]
Line_4 $$ Properties properties = _props.getProperties(propertiesPrefix, true)-->Line_22 $$ schedulerFactory.initialize(properties)[ FD ]
