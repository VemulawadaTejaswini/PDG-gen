Line_44 $$ Properties original = (Properties) value-->Line_46 $$ for (Map.Entry<Object, Object> propEntry : original.entrySet()) [ FD ]
Line_2 $$ public Object resolveValueIfNecessary(Object argName, Object value) -->Line_58 $$ if (value instanceof TypedStringValue) [ FD ]
Line_41 $$ if (value instanceof ManagedMap) -->Line_43 $$ if (value instanceof ManagedProperties) [ CD ]
Line_23 $$ if (elementType == null) -->Line_25 $$ if (StringUtils.hasText(elementTypeName)) [ CD ]
Line_6 $$ if (value instanceof RuntimeBeanNameReference) -->Line_12 $$ return refName[ CD ]
Line_22 $$ Class<?> elementType = array.resolvedElementType-->Line_23 $$ if (elementType == null) [ FD ]
Line_62 $$ Class<?> resolvedTargetType = resolveTargetType(typedStringValue)-->Line_63 $$ if (resolvedTargetType != null) [ FD ]
Line_3 $$ if (value instanceof RuntimeBeanReference) -->Line_5 $$ return resolveReference(argName, ref)[ CD ]
Line_13 $$ if (value instanceof BeanDefinitionHolder) -->Line_14 $$ BeanDefinitionHolder bdHolder = (BeanDefinitionHolder) value[ CD ]
Line_2 $$ public Object resolveValueIfNecessary(Object argName, Object value) -->Line_15 $$ return resolveInnerBean(argName, bdHolder.getBeanName(), bdHolder.getBeanDefinition())[ FD ]
Line_27 $$ elementType = ClassUtils.forName(elementTypeName, this.beanFactory.getBeanClassLoader())-->Line_36 $$ return resolveManagedArray(argName, (List<?>) value, elementType)[ FD ]
Line_43 $$ if (value instanceof ManagedProperties) -->Line_44 $$ Properties original = (Properties) value[ CD ]
Line_59 $$ TypedStringValue typedStringValue = (TypedStringValue) value-->Line_60 $$ Object valueObject = evaluate(typedStringValue)[ FD ]
Line_46 $$ for (Map.Entry<Object, Object> propEntry : original.entrySet()) -->Line_47 $$ Object propKey = propEntry.getKey()[ FD ]
Line_17 $$ BeanDefinition bd = (BeanDefinition) value-->Line_18 $$ String innerBeanName = "(inner bean)" + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR + ObjectUtils.getIdentityHexString(bd)[ FD ]
Line_39 $$ if (value instanceof ManagedSet) -->Line_40 $$ return resolveManagedSet(argName, (Set<?>) value)[ CD ]
Line_16 $$ if (value instanceof BeanDefinition) -->Line_18 $$ String innerBeanName = "(inner bean)" + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR + ObjectUtils.getIdentityHexString(bd)[ CD ]
Line_4 $$ RuntimeBeanReference ref = (RuntimeBeanReference) value-->Line_5 $$ return resolveReference(argName, ref)[ FD ]
Line_2 $$ public Object resolveValueIfNecessary(Object argName, Object value) -->Line_3 $$ if (value instanceof RuntimeBeanReference) [ CD ]
Line_2 $$ public Object resolveValueIfNecessary(Object argName, Object value) -->Line_38 $$ return resolveManagedList(argName, (List<?>) value)[ FD ]
Line_22 $$ Class<?> elementType = array.resolvedElementType-->Line_28 $$ array.resolvedElementType = elementType[ FD ]
Line_3 $$ if (value instanceof RuntimeBeanReference) -->Line_4 $$ RuntimeBeanReference ref = (RuntimeBeanReference) value[ CD ]
Line_20 $$ if (value instanceof ManagedArray) -->Line_22 $$ Class<?> elementType = array.resolvedElementType[ CD ]
Line_47 $$ Object propKey = propEntry.getKey()-->Line_55 $$ copy.put(propKey, propValue)[ FD ]
Line_3 $$ if (value instanceof RuntimeBeanReference) -->Line_6 $$ if (value instanceof RuntimeBeanNameReference) [ CD ]
Line_2 $$ public Object resolveValueIfNecessary(Object argName, Object value) -->Line_16 $$ if (value instanceof BeanDefinition) [ FD ]
Line_20 $$ if (value instanceof ManagedArray) -->Line_23 $$ if (elementType == null) [ CD ]
Line_43 $$ if (value instanceof ManagedProperties) -->Line_57 $$ return copy[ CD ]
Line_48 $$ Object propValue = propEntry.getValue()-->Line_53 $$ propValue = evaluate((TypedStringValue) propValue)[ FD ]
Line_6 $$ if (value instanceof RuntimeBeanNameReference) -->Line_8 $$ refName = String.valueOf(doEvaluate(refName))[ CD ]
Line_2 $$ public Object resolveValueIfNecessary(Object argName, Object value) -->Line_37 $$ if (value instanceof ManagedList) [ FD ]
Line_2 $$ public Object resolveValueIfNecessary(Object argName, Object value) -->Line_5 $$ return resolveReference(argName, ref)[ FD ]
Line_2 $$ public Object resolveValueIfNecessary(Object argName, Object value) -->Line_6 $$ if (value instanceof RuntimeBeanNameReference) [ FD ]
Line_2 $$ public Object resolveValueIfNecessary(Object argName, Object value) -->Line_42 $$ return resolveManagedMap(argName, (Map<?, ?>) value)[ FD ]
Line_16 $$ if (value instanceof BeanDefinition) -->Line_17 $$ BeanDefinition bd = (BeanDefinition) value[ CD ]
Line_58 $$ if (value instanceof TypedStringValue) -->Line_59 $$ TypedStringValue typedStringValue = (TypedStringValue) value[ CD ]
Line_53 $$ propValue = evaluate((TypedStringValue) propValue)-->Line_55 $$ copy.put(propKey, propValue)[ FD ]
Line_48 $$ Object propValue = propEntry.getValue()-->Line_55 $$ copy.put(propKey, propValue)[ FD ]
Line_41 $$ if (value instanceof ManagedMap) -->Line_42 $$ return resolveManagedMap(argName, (Map<?, ?>) value)[ CD ]
Line_2 $$ public Object resolveValueIfNecessary(Object argName, Object value) -->Line_43 $$ if (value instanceof ManagedProperties) [ FD ]
Line_49 $$ if (propKey instanceof TypedStringValue) -->Line_50 $$ propKey = evaluate((TypedStringValue) propKey)[ CD ]
Line_37 $$ if (value instanceof ManagedList) -->Line_39 $$ if (value instanceof ManagedSet) [ CD ]
Line_23 $$ if (elementType == null) -->Line_24 $$ String elementTypeName = array.getElementTypeName()[ CD ]
Line_6 $$ if (value instanceof RuntimeBeanNameReference) -->Line_7 $$ String refName = ((RuntimeBeanNameReference) value).getBeanName()[ CD ]
Line_37 $$ if (value instanceof ManagedList) -->Line_38 $$ return resolveManagedList(argName, (List<?>) value)[ CD ]
Line_47 $$ Object propKey = propEntry.getKey()-->Line_49 $$ if (propKey instanceof TypedStringValue) [ FD ]
Line_18 $$ String innerBeanName = "(inner bean)" + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR + ObjectUtils.getIdentityHexString(bd)-->Line_19 $$ return resolveInnerBean(argName, innerBeanName, bd)[ FD ]
Line_58 $$ if (value instanceof TypedStringValue) -->Line_60 $$ Object valueObject = evaluate(typedStringValue)[ CD ]
Line_27 $$ elementType = ClassUtils.forName(elementTypeName, this.beanFactory.getBeanClassLoader())-->Line_28 $$ array.resolvedElementType = elementType[ FD ]
Line_24 $$ String elementTypeName = array.getElementTypeName()-->Line_25 $$ if (StringUtils.hasText(elementTypeName)) [ FD ]
Line_13 $$ if (value instanceof BeanDefinitionHolder) -->Line_15 $$ return resolveInnerBean(argName, bdHolder.getBeanName(), bdHolder.getBeanDefinition())[ CD ]
Line_20 $$ if (value instanceof ManagedArray) -->Line_37 $$ if (value instanceof ManagedList) [ CD ]
Line_2 $$ public Object resolveValueIfNecessary(Object argName, Object value) -->Line_39 $$ if (value instanceof ManagedSet) [ FD ]
Line_63 $$ if (resolvedTargetType != null) -->Line_66 $$ return valueObject[ CD ]
Line_2 $$ public Object resolveValueIfNecessary(Object argName, Object value) -->Line_72 $$ return evaluate(value)[ FD ]
Line_46 $$ for (Map.Entry<Object, Object> propEntry : original.entrySet()) -->Line_48 $$ Object propValue = propEntry.getValue()[ FD ]
Line_7 $$ String refName = ((RuntimeBeanNameReference) value).getBeanName()-->Line_9 $$ if (!this.beanFactory.containsBean(refName)) [ FD ]
Line_20 $$ if (value instanceof ManagedArray) -->Line_36 $$ return resolveManagedArray(argName, (List<?>) value, elementType)[ CD ]
Line_62 $$ Class<?> resolvedTargetType = resolveTargetType(typedStringValue)-->Line_64 $$ return this.typeConverter.convertIfNecessary(valueObject, resolvedTargetType)[ FD ]
Line_13 $$ if (value instanceof BeanDefinitionHolder) -->Line_16 $$ if (value instanceof BeanDefinition) [ CD ]
Line_45 $$ Properties copy = new Properties()-->Line_55 $$ copy.put(propKey, propValue)[ FD ]
Line_43 $$ if (value instanceof ManagedProperties) -->Line_58 $$ if (value instanceof TypedStringValue) [ CD ]
Line_27 $$ elementType = ClassUtils.forName(elementTypeName, this.beanFactory.getBeanClassLoader())-->Line_33 $$ elementType = Object.class[ FD ]
Line_47 $$ Object propKey = propEntry.getKey()-->Line_50 $$ propKey = evaluate((TypedStringValue) propKey)[ FD ]
Line_22 $$ Class<?> elementType = array.resolvedElementType-->Line_33 $$ elementType = Object.class[ FD ]
Line_52 $$ if (propValue instanceof TypedStringValue) -->Line_53 $$ propValue = evaluate((TypedStringValue) propValue)[ CD ]
Line_22 $$ Class<?> elementType = array.resolvedElementType-->Line_36 $$ return resolveManagedArray(argName, (List<?>) value, elementType)[ FD ]
Line_17 $$ BeanDefinition bd = (BeanDefinition) value-->Line_19 $$ return resolveInnerBean(argName, innerBeanName, bd)[ FD ]
Line_21 $$ ManagedArray array = (ManagedArray) value-->Line_24 $$ String elementTypeName = array.getElementTypeName()[ FD ]
Line_22 $$ Class<?> elementType = array.resolvedElementType-->Line_27 $$ elementType = ClassUtils.forName(elementTypeName, this.beanFactory.getBeanClassLoader())[ FD ]
Line_60 $$ Object valueObject = evaluate(typedStringValue)-->Line_64 $$ return this.typeConverter.convertIfNecessary(valueObject, resolvedTargetType)[ FD ]
Line_2 $$ public Object resolveValueIfNecessary(Object argName, Object value) -->Line_20 $$ if (value instanceof ManagedArray) [ FD ]
Line_63 $$ if (resolvedTargetType != null) -->Line_64 $$ return this.typeConverter.convertIfNecessary(valueObject, resolvedTargetType)[ CD ]
Line_39 $$ if (value instanceof ManagedSet) -->Line_41 $$ if (value instanceof ManagedMap) [ CD ]
Line_14 $$ BeanDefinitionHolder bdHolder = (BeanDefinitionHolder) value-->Line_15 $$ return resolveInnerBean(argName, bdHolder.getBeanName(), bdHolder.getBeanDefinition())[ FD ]
Line_2 $$ public Object resolveValueIfNecessary(Object argName, Object value) -->Line_41 $$ if (value instanceof ManagedMap) [ FD ]
Line_59 $$ TypedStringValue typedStringValue = (TypedStringValue) value-->Line_62 $$ Class<?> resolvedTargetType = resolveTargetType(typedStringValue)[ FD ]
Line_2 $$ public Object resolveValueIfNecessary(Object argName, Object value) -->Line_13 $$ if (value instanceof BeanDefinitionHolder) [ FD ]
Line_16 $$ if (value instanceof BeanDefinition) -->Line_19 $$ return resolveInnerBean(argName, innerBeanName, bd)[ CD ]
Line_33 $$ elementType = Object.class-->Line_36 $$ return resolveManagedArray(argName, (List<?>) value, elementType)[ FD ]
Line_6 $$ if (value instanceof RuntimeBeanNameReference) -->Line_9 $$ if (!this.beanFactory.containsBean(refName)) [ CD ]
Line_7 $$ String refName = ((RuntimeBeanNameReference) value).getBeanName()-->Line_8 $$ refName = String.valueOf(doEvaluate(refName))[ FD ]
Line_48 $$ Object propValue = propEntry.getValue()-->Line_52 $$ if (propValue instanceof TypedStringValue) [ FD ]
Line_50 $$ propKey = evaluate((TypedStringValue) propKey)-->Line_55 $$ copy.put(propKey, propValue)[ FD ]
Line_2 $$ public Object resolveValueIfNecessary(Object argName, Object value) -->Line_36 $$ return resolveManagedArray(argName, (List<?>) value, elementType)[ FD ]
Line_25 $$ if (StringUtils.hasText(elementTypeName)) -->Line_33 $$ elementType = Object.class[ CD ]
Line_6 $$ if (value instanceof RuntimeBeanNameReference) -->Line_13 $$ if (value instanceof BeanDefinitionHolder) [ CD ]
Line_16 $$ if (value instanceof BeanDefinition) -->Line_20 $$ if (value instanceof ManagedArray) [ CD ]
Line_24 $$ String elementTypeName = array.getElementTypeName()-->Line_27 $$ elementType = ClassUtils.forName(elementTypeName, this.beanFactory.getBeanClassLoader())[ FD ]
Line_43 $$ if (value instanceof ManagedProperties) -->Line_45 $$ Properties copy = new Properties()[ CD ]
Line_2 $$ public Object resolveValueIfNecessary(Object argName, Object value) -->Line_3 $$ if (value instanceof RuntimeBeanReference) [ FD ]
Line_8 $$ refName = String.valueOf(doEvaluate(refName))-->Line_9 $$ if (!this.beanFactory.containsBean(refName)) [ FD ]
Line_2 $$ public Object resolveValueIfNecessary(Object argName, Object value) -->Line_19 $$ return resolveInnerBean(argName, innerBeanName, bd)[ FD ]
Line_20 $$ if (value instanceof ManagedArray) -->Line_21 $$ ManagedArray array = (ManagedArray) value[ CD ]
Line_58 $$ if (value instanceof TypedStringValue) -->Line_72 $$ return evaluate(value)[ CD ]
Line_2 $$ public Object resolveValueIfNecessary(Object argName, Object value) -->Line_40 $$ return resolveManagedSet(argName, (Set<?>) value)[ FD ]
