Line_3 $$ final UIDefaults uiDefaults = UIManager.getLookAndFeelDefaults()-->Line_16 $$ patchLafFonts(uiDefaults)[ FD ]
Line_2 $$ public void updateUI() -->Line_6 $$ fixTreeWideSelection(uiDefaults)[ CD ]
Line_2 $$ public void updateUI() -->Line_19 $$ fixSeparatorColor(uiDefaults)[ CD ]
Line_3 $$ final UIDefaults uiDefaults = UIManager.getLookAndFeelDefaults()-->Line_13 $$ initInputMapDefaults(uiDefaults)[ FD ]
Line_2 $$ public void updateUI() -->Line_27 $$ fireLookAndFeelChanged()[ CD ]
Line_2 $$ public void updateUI() -->Line_4 $$ fixPopupWeight()[ CD ]
Line_21 $$ for (Frame frame : Frame.getFrames()) -->Line_25 $$ updateUI(frame)[ FD ]
Line_2 $$ public void updateUI() -->Line_18 $$ patchGtkDefaults(uiDefaults)[ CD ]
Line_3 $$ final UIDefaults uiDefaults = UIManager.getLookAndFeelDefaults()-->Line_17 $$ patchHiDPI(uiDefaults)[ FD ]
Line_2 $$ public void updateUI() -->Line_5 $$ fixGtkPopupStyle()[ CD ]
Line_21 $$ for (Frame frame : Frame.getFrames()) -->Line_23 $$ frame.setBackground(new Color(UIUtil.getPanelBackground().getRGB()))[ FD ]
Line_3 $$ final UIDefaults uiDefaults = UIManager.getLookAndFeelDefaults()-->Line_18 $$ patchGtkDefaults(uiDefaults)[ FD ]
Line_2 $$ public void updateUI() -->Line_8 $$ if (UIUtil.isUnderAquaLookAndFeel()) [ CD ]
Line_3 $$ final UIDefaults uiDefaults = UIManager.getLookAndFeelDefaults()-->Line_6 $$ fixTreeWideSelection(uiDefaults)[ FD ]
Line_3 $$ final UIDefaults uiDefaults = UIManager.getLookAndFeelDefaults()-->Line_19 $$ fixSeparatorColor(uiDefaults)[ FD ]
Line_3 $$ final UIDefaults uiDefaults = UIManager.getLookAndFeelDefaults()-->Line_7 $$ fixMenuIssues(uiDefaults)[ FD ]
Line_8 $$ if (UIUtil.isUnderAquaLookAndFeel()) -->Line_9 $$ uiDefaults.put("Panel.opaque", Boolean.TRUE)[ CD ]
Line_3 $$ final UIDefaults uiDefaults = UIManager.getLookAndFeelDefaults()-->Line_14 $$ uiDefaults.put("Button.defaultButtonFollowsFocus", Boolean.FALSE)[ FD ]
Line_2 $$ public void updateUI() -->Line_20 $$ updateToolWindows()[ CD ]
Line_2 $$ public void updateUI() -->Line_17 $$ patchHiDPI(uiDefaults)[ CD ]
Line_2 $$ public void updateUI() -->Line_16 $$ patchLafFonts(uiDefaults)[ CD ]
Line_3 $$ final UIDefaults uiDefaults = UIManager.getLookAndFeelDefaults()-->Line_9 $$ uiDefaults.put("Panel.opaque", Boolean.TRUE)[ FD ]
Line_2 $$ public void updateUI() -->Line_7 $$ fixMenuIssues(uiDefaults)[ CD ]
Line_2 $$ public void updateUI() -->Line_13 $$ initInputMapDefaults(uiDefaults)[ CD ]
Line_22 $$ if (SystemInfo.isMac) -->Line_23 $$ frame.setBackground(new Color(UIUtil.getPanelBackground().getRGB()))[ CD ]
Line_8 $$ if (UIUtil.isUnderAquaLookAndFeel()) -->Line_10 $$ if (UIUtil.isWinLafOnVista()) [ CD ]
Line_2 $$ public void updateUI() -->Line_15 $$ patchFileChooserStrings(uiDefaults)[ CD ]
Line_3 $$ final UIDefaults uiDefaults = UIManager.getLookAndFeelDefaults()-->Line_11 $$ uiDefaults.put("ComboBox.border", null)[ FD ]
Line_2 $$ public void updateUI() -->Line_14 $$ uiDefaults.put("Button.defaultButtonFollowsFocus", Boolean.FALSE)[ CD ]
Line_3 $$ final UIDefaults uiDefaults = UIManager.getLookAndFeelDefaults()-->Line_15 $$ patchFileChooserStrings(uiDefaults)[ FD ]
Line_10 $$ if (UIUtil.isWinLafOnVista()) -->Line_11 $$ uiDefaults.put("ComboBox.border", null)[ CD ]
Line_2 $$ public void updateUI() -->Line_3 $$ final UIDefaults uiDefaults = UIManager.getLookAndFeelDefaults()[ CD ]
