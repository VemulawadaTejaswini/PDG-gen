Line_5 $$ if (mr != null && StringUtils.hasText(mr.getObjectName())) -->Line_6 $$ return ObjectNameManager.getInstance(mr.getObjectName())[ CD ]
Line_15 $$ Hashtable<String, String> properties = new Hashtable<String, String>()-->Line_16 $$ properties.put("type", ClassUtils.getShortName(managedClass))[ FD ]
Line_3 $$ Class<?> managedClass = AopUtils.getTargetClass(managedBean)-->Line_16 $$ properties.put("type", ClassUtils.getShortName(managedClass))[ FD ]
Line_2 $$ public ObjectName getObjectName(Object managedBean, String beanKey) throws MalformedObjectNameException -->Line_3 $$ Class<?> managedClass = AopUtils.getTargetClass(managedBean)[ FD ]
Line_13 $$ domain = ClassUtils.getPackageName(managedClass)-->Line_18 $$ return ObjectNameManager.getInstance(domain, properties)[ FD ]
Line_3 $$ Class<?> managedClass = AopUtils.getTargetClass(managedBean)-->Line_4 $$ ManagedResource mr = this.attributeSource.getManagedResource(managedClass)[ FD ]
Line_11 $$ String domain = this.defaultDomain-->Line_13 $$ domain = ClassUtils.getPackageName(managedClass)[ FD ]
Line_4 $$ ManagedResource mr = this.attributeSource.getManagedResource(managedClass)-->Line_5 $$ if (mr != null && StringUtils.hasText(mr.getObjectName())) [ FD ]
Line_2 $$ public ObjectName getObjectName(Object managedBean, String beanKey) throws MalformedObjectNameException -->Line_9 $$ return ObjectNameManager.getInstance(beanKey)[ FD ]
Line_2 $$ public ObjectName getObjectName(Object managedBean, String beanKey) throws MalformedObjectNameException -->Line_4 $$ ManagedResource mr = this.attributeSource.getManagedResource(managedClass)[ CD ]
Line_3 $$ Class<?> managedClass = AopUtils.getTargetClass(managedBean)-->Line_13 $$ domain = ClassUtils.getPackageName(managedClass)[ FD ]
Line_11 $$ String domain = this.defaultDomain-->Line_18 $$ return ObjectNameManager.getInstance(domain, properties)[ FD ]
Line_2 $$ public ObjectName getObjectName(Object managedBean, String beanKey) throws MalformedObjectNameException -->Line_17 $$ properties.put("name", beanKey)[ FD ]
Line_15 $$ Hashtable<String, String> properties = new Hashtable<String, String>()-->Line_17 $$ properties.put("name", beanKey)[ FD ]
Line_4 $$ ManagedResource mr = this.attributeSource.getManagedResource(managedClass)-->Line_6 $$ return ObjectNameManager.getInstance(mr.getObjectName())[ FD ]
Line_2 $$ public ObjectName getObjectName(Object managedBean, String beanKey) throws MalformedObjectNameException -->Line_3 $$ Class<?> managedClass = AopUtils.getTargetClass(managedBean)[ CD ]
Line_15 $$ Hashtable<String, String> properties = new Hashtable<String, String>()-->Line_18 $$ return ObjectNameManager.getInstance(domain, properties)[ FD ]
Line_12 $$ if (domain == null) -->Line_13 $$ domain = ClassUtils.getPackageName(managedClass)[ CD ]
Line_11 $$ String domain = this.defaultDomain-->Line_12 $$ if (domain == null) [ FD ]
Line_2 $$ public ObjectName getObjectName(Object managedBean, String beanKey) throws MalformedObjectNameException -->Line_5 $$ if (mr != null && StringUtils.hasText(mr.getObjectName())) [ CD ]
