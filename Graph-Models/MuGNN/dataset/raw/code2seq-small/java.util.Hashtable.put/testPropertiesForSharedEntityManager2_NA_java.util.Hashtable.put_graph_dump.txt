Line_2 $$ public void testPropertiesForSharedEntityManager2() -->Line_15 $$ assertNotNull(transactionalField.em)[ CD ]
Line_2 $$ public void testPropertiesForSharedEntityManager2() -->Line_10 $$ DefaultPrivatePersistenceContextFieldWithProperties transactionalFieldWithProperties = new DefaultPrivatePersistenceContextFieldWithProperties()[ CD ]
Line_2 $$ public void testPropertiesForSharedEntityManager2() -->Line_8 $$ given(em.isOpen()).willReturn(true)[ CD ]
Line_2 $$ public void testPropertiesForSharedEntityManager2() -->Line_4 $$ props.put("foo", "bar")[ CD ]
Line_5 $$ EntityManager em = mock(EntityManager.class)-->Line_6 $$ given(mockEmf.createEntityManager()).willReturn(em)[ FD ]
Line_2 $$ public void testPropertiesForSharedEntityManager2() -->Line_6 $$ given(mockEmf.createEntityManager()).willReturn(em)[ CD ]
Line_2 $$ public void testPropertiesForSharedEntityManager2() -->Line_13 $$ pabpp.postProcessPropertyValues(null, null, transactionalField, "bean2")[ CD ]
Line_2 $$ public void testPropertiesForSharedEntityManager2() -->Line_7 $$ given(em.getDelegate()).willReturn(new Object(), 2)[ CD ]
Line_2 $$ public void testPropertiesForSharedEntityManager2() -->Line_11 $$ DefaultPrivatePersistenceContextField transactionalField = new DefaultPrivatePersistenceContextField()[ CD ]
Line_2 $$ public void testPropertiesForSharedEntityManager2() -->Line_9 $$ PersistenceAnnotationBeanPostProcessor pabpp = new MockPersistenceAnnotationBeanPostProcessor()[ CD ]
Line_10 $$ DefaultPrivatePersistenceContextFieldWithProperties transactionalFieldWithProperties = new DefaultPrivatePersistenceContextFieldWithProperties()-->Line_12 $$ pabpp.postProcessPropertyValues(null, null, transactionalFieldWithProperties, "bean1")[ FD ]
Line_2 $$ public void testPropertiesForSharedEntityManager2() -->Line_16 $$ assertNotNull(transactionalField.em.getDelegate())[ CD ]
Line_9 $$ PersistenceAnnotationBeanPostProcessor pabpp = new MockPersistenceAnnotationBeanPostProcessor()-->Line_13 $$ pabpp.postProcessPropertyValues(null, null, transactionalField, "bean2")[ FD ]
Line_5 $$ EntityManager em = mock(EntityManager.class)-->Line_20 $$ verify(em).close()[ FD ]
Line_3 $$ Properties props = new Properties()-->Line_4 $$ props.put("foo", "bar")[ FD ]
Line_9 $$ PersistenceAnnotationBeanPostProcessor pabpp = new MockPersistenceAnnotationBeanPostProcessor()-->Line_12 $$ pabpp.postProcessPropertyValues(null, null, transactionalFieldWithProperties, "bean1")[ FD ]
Line_2 $$ public void testPropertiesForSharedEntityManager2() -->Line_14 $$ assertNotNull(transactionalFieldWithProperties.em)[ CD ]
Line_2 $$ public void testPropertiesForSharedEntityManager2() -->Line_12 $$ pabpp.postProcessPropertyValues(null, null, transactionalFieldWithProperties, "bean1")[ CD ]
Line_5 $$ EntityManager em = mock(EntityManager.class)-->Line_8 $$ given(em.isOpen()).willReturn(true)[ FD ]
Line_11 $$ DefaultPrivatePersistenceContextField transactionalField = new DefaultPrivatePersistenceContextField()-->Line_13 $$ pabpp.postProcessPropertyValues(null, null, transactionalField, "bean2")[ FD ]
Line_5 $$ EntityManager em = mock(EntityManager.class)-->Line_7 $$ given(em.getDelegate()).willReturn(new Object(), 2)[ FD ]
Line_2 $$ public void testPropertiesForSharedEntityManager2() -->Line_5 $$ EntityManager em = mock(EntityManager.class)[ CD ]
Line_2 $$ public void testPropertiesForSharedEntityManager2() -->Line_3 $$ Properties props = new Properties()[ CD ]
