Line_16 $$ for (int i = 0; i < numDocs; ++i) -->Line_23 $$ assertNoFailures(client().prepareSearch("idx").setQuery(QueryBuilders.termQuery("l_value", i)).get())[ FD ]
Line_5 $$ for (long l : threadBean.getAllThreadIds()) -->Line_6 $$ ThreadInfo threadInfo = threadBean.getThreadInfo(l)[ FD ]
Line_2 $$ public void testThreadNames() throws Exception -->Line_15 $$ IndexRequestBuilder[] builders = new IndexRequestBuilder[numDocs][ CD ]
Line_28 $$ if (threadInfo != null) -->Line_29 $$ threadNames.add(threadInfo.getThreadName())[ CD ]
Line_2 $$ public void testThreadNames() throws Exception -->Line_14 $$ int numDocs = randomIntBetween(2, 100)[ CD ]
Line_2 $$ public void testThreadNames() throws Exception -->Line_34 $$ logger.info("post node *new* threads are [ CD ]
Line_2 $$ public void testThreadNames() throws Exception -->Line_12 $$ String node = internalCluster().startNode()[ CD ]
Line_4 $$ Set<String> preNodeStartThreadNames = new HashSet()-->Line_33 $$ threadNames.removeAll(preNodeStartThreadNames)[ FD ]
Line_2 $$ public void testThreadNames() throws Exception -->Line_25 $$ Set<String> threadNames = new HashSet()[ CD ]
Line_6 $$ ThreadInfo threadInfo = threadBean.getThreadInfo(l)-->Line_29 $$ threadNames.add(threadInfo.getThreadName())[ FD ]
Line_2 $$ public void testThreadNames() throws Exception -->Line_3 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()[ CD ]
Line_15 $$ IndexRequestBuilder[] builders = new IndexRequestBuilder[numDocs]-->Line_19 $$ indexRandom(true, builders)[ FD ]
Line_4 $$ Set<String> preNodeStartThreadNames = new HashSet()-->Line_8 $$ preNodeStartThreadNames.add(threadInfo.getThreadName())[ FD ]
Line_16 $$ for (int i = 0; i < numDocs; ++i) -->Line_21 $$ for (int i = 0; i < numSearches; i++) [ FD ]
Line_21 $$ for (int i = 0; i < numSearches; i++) -->Line_23 $$ assertNoFailures(client().prepareSearch("idx").setQuery(QueryBuilders.termQuery("l_value", i)).get())[ FD ]
Line_14 $$ int numDocs = randomIntBetween(2, 100)-->Line_16 $$ for (int i = 0; i < numDocs; ++i) [ FD ]
Line_6 $$ ThreadInfo threadInfo = threadBean.getThreadInfo(l)-->Line_7 $$ if (threadInfo != null) [ FD ]
Line_2 $$ public void testThreadNames() throws Exception -->Line_4 $$ Set<String> preNodeStartThreadNames = new HashSet()[ CD ]
Line_2 $$ public void testThreadNames() throws Exception -->Line_19 $$ indexRandom(true, builders)[ CD ]
Line_35 $$ for (String threadName : threadNames) -->Line_42 $$ assertThat(threadName, RegexMatcher.matches("\\[" + nodePrefix + "\\d+\\]"))[ FD ]
Line_21 $$ for (int i = 0; i < numSearches; i++) -->Line_22 $$ assertNoFailures(client().prepareSearch("idx").setQuery(QueryBuilders.termQuery("str_value", "s" + i)).get())[ CD ]
Line_25 $$ Set<String> threadNames = new HashSet()-->Line_33 $$ threadNames.removeAll(preNodeStartThreadNames)[ FD ]
Line_3 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()-->Line_26 $$ for (long l : threadBean.getAllThreadIds()) [ FD ]
Line_2 $$ public void testThreadNames() throws Exception -->Line_33 $$ threadNames.removeAll(preNodeStartThreadNames)[ CD ]
Line_4 $$ Set<String> preNodeStartThreadNames = new HashSet()-->Line_11 $$ logger.info("pre node threads are [ FD ]
Line_2 $$ public void testThreadNames() throws Exception -->Line_20 $$ int numSearches = randomIntBetween(2, 100)[ CD ]
Line_21 $$ for (int i = 0; i < numSearches; i++) -->Line_23 $$ assertNoFailures(client().prepareSearch("idx").setQuery(QueryBuilders.termQuery("l_value", i)).get())[ CD ]
Line_20 $$ int numSearches = randomIntBetween(2, 100)-->Line_21 $$ for (int i = 0; i < numSearches; i++) [ FD ]
Line_2 $$ public void testThreadNames() throws Exception -->Line_16 $$ for (int i = 0; i < numDocs; ++i) [ CD ]
Line_7 $$ if (threadInfo != null) -->Line_8 $$ preNodeStartThreadNames.add(threadInfo.getThreadName())[ CD ]
Line_2 $$ public void testThreadNames() throws Exception -->Line_13 $$ logger.info("do some indexing, flushing, optimize, and searches")[ CD ]
Line_25 $$ Set<String> threadNames = new HashSet()-->Line_34 $$ logger.info("post node *new* threads are [ FD ]
Line_16 $$ for (int i = 0; i < numDocs; ++i) -->Line_17 $$ builders[i] = client().prepareIndex("idx", "type").setSource(jsonBuilder().startObject().field("str_value", "s" + i).field("str_values", new String[] [ FD ]
Line_6 $$ ThreadInfo threadInfo = threadBean.getThreadInfo(l)-->Line_8 $$ preNodeStartThreadNames.add(threadInfo.getThreadName())[ FD ]
Line_16 $$ for (int i = 0; i < numDocs; ++i) -->Line_17 $$ builders[i] = client().prepareIndex("idx", "type").setSource(jsonBuilder().startObject().field("str_value", "s" + i).field("str_values", new String[] [ CD ]
Line_25 $$ Set<String> threadNames = new HashSet()-->Line_32 $$ logger.info("post node threads are [ FD ]
Line_2 $$ public void testThreadNames() throws Exception -->Line_11 $$ logger.info("pre node threads are [ CD ]
Line_2 $$ public void testThreadNames() throws Exception -->Line_32 $$ logger.info("post node threads are [ CD ]
Line_5 $$ for (long l : threadBean.getAllThreadIds()) -->Line_27 $$ ThreadInfo threadInfo = threadBean.getThreadInfo(l)[ FD ]
Line_3 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()-->Line_6 $$ ThreadInfo threadInfo = threadBean.getThreadInfo(l)[ FD ]
Line_3 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()-->Line_5 $$ for (long l : threadBean.getAllThreadIds()) [ FD ]
Line_25 $$ Set<String> threadNames = new HashSet()-->Line_29 $$ threadNames.add(threadInfo.getThreadName())[ FD ]
Line_3 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()-->Line_27 $$ ThreadInfo threadInfo = threadBean.getThreadInfo(l)[ FD ]
Line_2 $$ public void testThreadNames() throws Exception -->Line_21 $$ for (int i = 0; i < numSearches; i++) [ CD ]
Line_6 $$ ThreadInfo threadInfo = threadBean.getThreadInfo(l)-->Line_28 $$ if (threadInfo != null) [ FD ]
