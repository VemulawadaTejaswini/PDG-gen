Line_4 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()-->Line_5 $$ ThreadInfo[] infos = threadBean.getThreadInfo(threadBean.getAllThreadIds(), 20)[ FD ]
Line_6 $$ for (ThreadInfo info : infos) -->Line_9 $$ if (pattern.matcher(info.getThreadName()).matches()) [ FD ]
Line_2 $$ public static void assertNoThreadsMatching(String regex) -->Line_5 $$ ThreadInfo[] infos = threadBean.getThreadInfo(threadBean.getAllThreadIds(), 20)[ CD ]
Line_6 $$ for (ThreadInfo info : infos) -->Line_7 $$ if (info == null)[ FD ]
Line_3 $$ Pattern pattern = Pattern.compile(regex)-->Line_9 $$ if (pattern.matcher(info.getThreadName()).matches()) [ FD ]
Line_2 $$ public static void assertNoThreadsMatching(String regex) -->Line_3 $$ Pattern pattern = Pattern.compile(regex)[ FD ]
Line_9 $$ if (pattern.matcher(info.getThreadName()).matches()) -->Line_10 $$ Assert.fail("Leaked thread: " + info + "\n" + Joiner.on("\n").join(info.getStackTrace()))[ CD ]
Line_2 $$ public static void assertNoThreadsMatching(String regex) -->Line_4 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()[ CD ]
Line_6 $$ for (ThreadInfo info : infos) -->Line_10 $$ Assert.fail("Leaked thread: " + info + "\n" + Joiner.on("\n").join(info.getStackTrace()))[ FD ]
Line_2 $$ public static void assertNoThreadsMatching(String regex) -->Line_3 $$ Pattern pattern = Pattern.compile(regex)[ CD ]
