Line_11 $$ final Connection connection2 = mock(Connection.class)-->Line_47 $$ verify(connection2).close()[ FD ]
Line_14 $$ TransactionTemplate tt = new TransactionTemplate(ptm)-->Line_17 $$ tt.execute(new TransactionCallbackWithoutResult() [ FD ]
Line_17 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_23 $$ assertSame(connection1, DataSourceUtils.getConnection(dataSource))[ CD ]
Line_17 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_26 $$ tt2.execute(new TransactionCallbackWithoutResult() [ CD ]
Line_17 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_24 $$ TransactionTemplate tt2 = new TransactionTemplate(ptm)[ CD ]
Line_11 $$ final Connection connection2 = mock(Connection.class)-->Line_31 $$ assertSame(connection2, DataSourceUtils.getConnection(dataSource))[ FD ]
Line_17 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_36 $$ assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly())[ CD ]
Line_3 $$ if (notSupported) -->Line_5 $$ given(transactionManager.suspend()).willReturn(transaction)[ CD ]
Line_2 $$ private void doTestJtaTransactionCommitWithNewTransactionWithinEmptyTransaction(final boolean requiresNew, boolean notSupported) throws Exception -->Line_42 $$ verify(userTransaction).begin()[ CD ]
Line_2 $$ private void doTestJtaTransactionCommitWithNewTransactionWithinEmptyTransaction(final boolean requiresNew, boolean notSupported) throws Exception -->Line_12 $$ given(dataSource.getConnection()).willReturn(connection1, connection2)[ CD ]
Line_17 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_21 $$ assertFalse(TransactionSynchronizationManager.isActualTransactionActive())[ CD ]
Line_17 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_38 $$ assertSame(connection1, DataSourceUtils.getConnection(dataSource))[ CD ]
Line_17 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_35 $$ assertTrue(TransactionSynchronizationManager.isSynchronizationActive())[ CD ]
Line_44 $$ if (notSupported) -->Line_45 $$ verify(transactionManager).resume(transaction)[ CD ]
Line_17 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_19 $$ assertTrue(TransactionSynchronizationManager.isSynchronizationActive())[ CD ]
Line_26 $$ tt2.execute(new TransactionCallbackWithoutResult() -->Line_31 $$ assertSame(connection2, DataSourceUtils.getConnection(dataSource))[ CD ]
Line_24 $$ TransactionTemplate tt2 = new TransactionTemplate(ptm)-->Line_25 $$ tt2.setPropagationBehavior(requiresNew ? TransactionDefinition.PROPAGATION_REQUIRES_NEW : TransactionDefinition.PROPAGATION_REQUIRED)[ FD ]
Line_3 $$ if (notSupported) -->Line_4 $$ given(userTransaction.getStatus()).willReturn(Status.STATUS_ACTIVE, Status.STATUS_NO_TRANSACTION, Status.STATUS_ACTIVE, Status.STATUS_ACTIVE)[ CD ]
Line_2 $$ private void doTestJtaTransactionCommitWithNewTransactionWithinEmptyTransaction(final boolean requiresNew, boolean notSupported) throws Exception -->Line_9 $$ final DataSource dataSource = mock(DataSource.class)[ CD ]
Line_9 $$ final DataSource dataSource = mock(DataSource.class)-->Line_32 $$ assertSame(connection2, DataSourceUtils.getConnection(dataSource))[ FD ]
Line_26 $$ tt2.execute(new TransactionCallbackWithoutResult() -->Line_29 $$ assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly())[ CD ]
Line_10 $$ final Connection connection1 = mock(Connection.class)-->Line_23 $$ assertSame(connection1, DataSourceUtils.getConnection(dataSource))[ FD ]
Line_17 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_37 $$ assertFalse(TransactionSynchronizationManager.isActualTransactionActive())[ CD ]
Line_10 $$ final Connection connection1 = mock(Connection.class)-->Line_22 $$ assertSame(connection1, DataSourceUtils.getConnection(dataSource))[ FD ]
Line_2 $$ private void doTestJtaTransactionCommitWithNewTransactionWithinEmptyTransaction(final boolean requiresNew, boolean notSupported) throws Exception -->Line_48 $$ verify(connection1).close()[ CD ]
Line_9 $$ final DataSource dataSource = mock(DataSource.class)-->Line_12 $$ given(dataSource.getConnection()).willReturn(connection1, connection2)[ FD ]
Line_26 $$ tt2.execute(new TransactionCallbackWithoutResult() -->Line_32 $$ assertSame(connection2, DataSourceUtils.getConnection(dataSource))[ CD ]
Line_26 $$ tt2.execute(new TransactionCallbackWithoutResult() -->Line_30 $$ assertTrue(TransactionSynchronizationManager.isActualTransactionActive())[ CD ]
Line_2 $$ private void doTestJtaTransactionCommitWithNewTransactionWithinEmptyTransaction(final boolean requiresNew, boolean notSupported) throws Exception -->Line_41 $$ assertFalse(TransactionSynchronizationManager.isSynchronizationActive())[ CD ]
Line_10 $$ final Connection connection1 = mock(Connection.class)-->Line_48 $$ verify(connection1).close()[ FD ]
Line_9 $$ final DataSource dataSource = mock(DataSource.class)-->Line_38 $$ assertSame(connection1, DataSourceUtils.getConnection(dataSource))[ FD ]
Line_2 $$ private void doTestJtaTransactionCommitWithNewTransactionWithinEmptyTransaction(final boolean requiresNew, boolean notSupported) throws Exception -->Line_43 $$ verify(userTransaction).commit()[ CD ]
Line_2 $$ private void doTestJtaTransactionCommitWithNewTransactionWithinEmptyTransaction(final boolean requiresNew, boolean notSupported) throws Exception -->Line_3 $$ if (notSupported) [ CD ]
Line_2 $$ private void doTestJtaTransactionCommitWithNewTransactionWithinEmptyTransaction(final boolean requiresNew, boolean notSupported) throws Exception -->Line_15 $$ tt.setPropagationBehavior(notSupported ? TransactionDefinition.PROPAGATION_NOT_SUPPORTED : TransactionDefinition.PROPAGATION_SUPPORTS)[ CD ]
Line_2 $$ private void doTestJtaTransactionCommitWithNewTransactionWithinEmptyTransaction(final boolean requiresNew, boolean notSupported) throws Exception -->Line_44 $$ if (notSupported) [ CD ]
Line_14 $$ TransactionTemplate tt = new TransactionTemplate(ptm)-->Line_15 $$ tt.setPropagationBehavior(notSupported ? TransactionDefinition.PROPAGATION_NOT_SUPPORTED : TransactionDefinition.PROPAGATION_SUPPORTS)[ FD ]
Line_3 $$ if (notSupported) -->Line_7 $$ given(userTransaction.getStatus()).willReturn(Status.STATUS_NO_TRANSACTION, Status.STATUS_NO_TRANSACTION, Status.STATUS_ACTIVE, Status.STATUS_ACTIVE)[ CD ]
Line_10 $$ final Connection connection1 = mock(Connection.class)-->Line_12 $$ given(dataSource.getConnection()).willReturn(connection1, connection2)[ FD ]
Line_17 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_20 $$ assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly())[ CD ]
Line_10 $$ final Connection connection1 = mock(Connection.class)-->Line_38 $$ assertSame(connection1, DataSourceUtils.getConnection(dataSource))[ FD ]
Line_2 $$ private void doTestJtaTransactionCommitWithNewTransactionWithinEmptyTransaction(final boolean requiresNew, boolean notSupported) throws Exception -->Line_16 $$ assertFalse(TransactionSynchronizationManager.isSynchronizationActive())[ CD ]
Line_17 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_25 $$ tt2.setPropagationBehavior(requiresNew ? TransactionDefinition.PROPAGATION_REQUIRES_NEW : TransactionDefinition.PROPAGATION_REQUIRED)[ CD ]
Line_2 $$ private void doTestJtaTransactionCommitWithNewTransactionWithinEmptyTransaction(final boolean requiresNew, boolean notSupported) throws Exception -->Line_13 $$ final JtaTransactionManager ptm = new JtaTransactionManager(userTransaction, transactionManager)[ CD ]
Line_26 $$ tt2.execute(new TransactionCallbackWithoutResult() -->Line_28 $$ assertTrue(TransactionSynchronizationManager.isSynchronizationActive())[ CD ]
Line_17 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_22 $$ assertSame(connection1, DataSourceUtils.getConnection(dataSource))[ CD ]
Line_9 $$ final DataSource dataSource = mock(DataSource.class)-->Line_23 $$ assertSame(connection1, DataSourceUtils.getConnection(dataSource))[ FD ]
Line_2 $$ private void doTestJtaTransactionCommitWithNewTransactionWithinEmptyTransaction(final boolean requiresNew, boolean notSupported) throws Exception -->Line_47 $$ verify(connection2).close()[ CD ]
Line_2 $$ private void doTestJtaTransactionCommitWithNewTransactionWithinEmptyTransaction(final boolean requiresNew, boolean notSupported) throws Exception -->Line_17 $$ tt.execute(new TransactionCallbackWithoutResult() [ CD ]
Line_11 $$ final Connection connection2 = mock(Connection.class)-->Line_12 $$ given(dataSource.getConnection()).willReturn(connection1, connection2)[ FD ]
Line_2 $$ private void doTestJtaTransactionCommitWithNewTransactionWithinEmptyTransaction(final boolean requiresNew, boolean notSupported) throws Exception -->Line_14 $$ TransactionTemplate tt = new TransactionTemplate(ptm)[ CD ]
Line_24 $$ TransactionTemplate tt2 = new TransactionTemplate(ptm)-->Line_26 $$ tt2.execute(new TransactionCallbackWithoutResult() [ FD ]
Line_9 $$ final DataSource dataSource = mock(DataSource.class)-->Line_31 $$ assertSame(connection2, DataSourceUtils.getConnection(dataSource))[ FD ]
Line_11 $$ final Connection connection2 = mock(Connection.class)-->Line_32 $$ assertSame(connection2, DataSourceUtils.getConnection(dataSource))[ FD ]
Line_2 $$ private void doTestJtaTransactionCommitWithNewTransactionWithinEmptyTransaction(final boolean requiresNew, boolean notSupported) throws Exception -->Line_10 $$ final Connection connection1 = mock(Connection.class)[ CD ]
Line_9 $$ final DataSource dataSource = mock(DataSource.class)-->Line_22 $$ assertSame(connection1, DataSourceUtils.getConnection(dataSource))[ FD ]
Line_2 $$ private void doTestJtaTransactionCommitWithNewTransactionWithinEmptyTransaction(final boolean requiresNew, boolean notSupported) throws Exception -->Line_11 $$ final Connection connection2 = mock(Connection.class)[ CD ]
