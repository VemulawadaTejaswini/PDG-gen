Line_19 $$ Map<String, Object> out = adder.execute(in)-->Line_20 $$ Integer id = (Integer) out.get("newid")[ FD ]
Line_8 $$ CallableStatement callableStatement = mock(CallableStatement.class)-->Line_22 $$ verify(callableStatement).setObject(1, 1106, Types.INTEGER)[ FD ]
Line_8 $$ CallableStatement callableStatement = mock(CallableStatement.class)-->Line_11 $$ given(callableStatement.execute()).willReturn(false)[ FD ]
Line_2 $$ public void testAddInvoices() throws Exception -->Line_9 $$ TestDataSourceWrapper testDataSource = (TestDataSourceWrapper) bf.getBean("dataSource")[ CD ]
Line_2 $$ public void testAddInvoices() throws Exception -->Line_4 $$ new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource("org/springframework/jdbc/object/GenericStoredProcedureTests-context.xml"))[ CD ]
Line_2 $$ public void testAddInvoices() throws Exception -->Line_25 $$ verify(callableStatement).close()[ CD ]
Line_8 $$ CallableStatement callableStatement = mock(CallableStatement.class)-->Line_25 $$ verify(callableStatement).close()[ FD ]
Line_2 $$ public void testAddInvoices() throws Exception -->Line_5 $$ Connection connection = mock(Connection.class)[ CD ]
Line_2 $$ public void testAddInvoices() throws Exception -->Line_12 $$ given(callableStatement.getUpdateCount()).willReturn(-1)[ CD ]
Line_2 $$ public void testAddInvoices() throws Exception -->Line_11 $$ given(callableStatement.execute()).willReturn(false)[ CD ]
Line_5 $$ Connection connection = mock(Connection.class)-->Line_7 $$ given(dataSource.getConnection()).willReturn(connection)[ FD ]
Line_8 $$ CallableStatement callableStatement = mock(CallableStatement.class)-->Line_14 $$ given(connection.prepareCall("[ FD ]
Line_2 $$ public void testAddInvoices() throws Exception -->Line_22 $$ verify(callableStatement).setObject(1, 1106, Types.INTEGER)[ CD ]
Line_2 $$ public void testAddInvoices() throws Exception -->Line_24 $$ verify(callableStatement).registerOutParameter(3, Types.INTEGER)[ CD ]
Line_2 $$ public void testAddInvoices() throws Exception -->Line_16 $$ Map<String, Object> in = new HashMap<String, Object>(2)[ CD ]
Line_6 $$ DataSource dataSource = mock(DataSource.class)-->Line_10 $$ testDataSource.setTarget(dataSource)[ FD ]
Line_2 $$ public void testAddInvoices() throws Exception -->Line_19 $$ Map<String, Object> out = adder.execute(in)[ CD ]
Line_15 $$ StoredProcedure adder = (StoredProcedure) bf.getBean("genericProcedure")-->Line_19 $$ Map<String, Object> out = adder.execute(in)[ FD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_15 $$ StoredProcedure adder = (StoredProcedure) bf.getBean("genericProcedure")[ FD ]
Line_2 $$ public void testAddInvoices() throws Exception -->Line_23 $$ verify(callableStatement).setObject(2, 3, Types.INTEGER)[ CD ]
Line_5 $$ Connection connection = mock(Connection.class)-->Line_14 $$ given(connection.prepareCall("[ FD ]
Line_8 $$ CallableStatement callableStatement = mock(CallableStatement.class)-->Line_24 $$ verify(callableStatement).registerOutParameter(3, Types.INTEGER)[ FD ]
Line_9 $$ TestDataSourceWrapper testDataSource = (TestDataSourceWrapper) bf.getBean("dataSource")-->Line_10 $$ testDataSource.setTarget(dataSource)[ FD ]
Line_2 $$ public void testAddInvoices() throws Exception -->Line_21 $$ assertEquals(4, id.intValue())[ CD ]
Line_8 $$ CallableStatement callableStatement = mock(CallableStatement.class)-->Line_23 $$ verify(callableStatement).setObject(2, 3, Types.INTEGER)[ FD ]
Line_2 $$ public void testAddInvoices() throws Exception -->Line_18 $$ in.put("custid", 3)[ CD ]
Line_2 $$ public void testAddInvoices() throws Exception -->Line_17 $$ in.put("amount", 1106)[ CD ]
Line_2 $$ public void testAddInvoices() throws Exception -->Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()[ CD ]
Line_2 $$ public void testAddInvoices() throws Exception -->Line_15 $$ StoredProcedure adder = (StoredProcedure) bf.getBean("genericProcedure")[ CD ]
Line_2 $$ public void testAddInvoices() throws Exception -->Line_6 $$ DataSource dataSource = mock(DataSource.class)[ CD ]
Line_2 $$ public void testAddInvoices() throws Exception -->Line_7 $$ given(dataSource.getConnection()).willReturn(connection)[ CD ]
Line_16 $$ Map<String, Object> in = new HashMap<String, Object>(2)-->Line_18 $$ in.put("custid", 3)[ FD ]
Line_8 $$ CallableStatement callableStatement = mock(CallableStatement.class)-->Line_13 $$ given(callableStatement.getObject(3)).willReturn(4)[ FD ]
Line_8 $$ CallableStatement callableStatement = mock(CallableStatement.class)-->Line_12 $$ given(callableStatement.getUpdateCount()).willReturn(-1)[ FD ]
Line_6 $$ DataSource dataSource = mock(DataSource.class)-->Line_7 $$ given(dataSource.getConnection()).willReturn(connection)[ FD ]
Line_16 $$ Map<String, Object> in = new HashMap<String, Object>(2)-->Line_17 $$ in.put("amount", 1106)[ FD ]
Line_20 $$ Integer id = (Integer) out.get("newid")-->Line_21 $$ assertEquals(4, id.intValue())[ FD ]
Line_2 $$ public void testAddInvoices() throws Exception -->Line_8 $$ CallableStatement callableStatement = mock(CallableStatement.class)[ CD ]
Line_2 $$ public void testAddInvoices() throws Exception -->Line_14 $$ given(connection.prepareCall("[ CD ]
Line_2 $$ public void testAddInvoices() throws Exception -->Line_10 $$ testDataSource.setTarget(dataSource)[ CD ]
Line_16 $$ Map<String, Object> in = new HashMap<String, Object>(2)-->Line_19 $$ Map<String, Object> out = adder.execute(in)[ FD ]
Line_2 $$ public void testAddInvoices() throws Exception -->Line_20 $$ Integer id = (Integer) out.get("newid")[ CD ]
Line_2 $$ public void testAddInvoices() throws Exception -->Line_13 $$ given(callableStatement.getObject(3)).willReturn(4)[ CD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_9 $$ TestDataSourceWrapper testDataSource = (TestDataSourceWrapper) bf.getBean("dataSource")[ FD ]
