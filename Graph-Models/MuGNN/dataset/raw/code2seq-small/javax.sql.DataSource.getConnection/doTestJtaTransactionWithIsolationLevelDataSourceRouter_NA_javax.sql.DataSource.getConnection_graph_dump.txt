Line_2 $$ private void doTestJtaTransactionWithIsolationLevelDataSourceRouter(boolean dataSourceLookup) throws Exception -->Line_6 $$ given(dataSource1.getConnection()).willReturn(connection1)[ CD ]
Line_8 $$ final Connection connection2 = mock(Connection.class)-->Line_9 $$ given(dataSource2.getConnection()).willReturn(connection2)[ FD ]
Line_2 $$ private void doTestJtaTransactionWithIsolationLevelDataSourceRouter(boolean dataSourceLookup) throws Exception -->Line_37 $$ tt.execute(new TransactionCallbackWithoutResult() [ CD ]
Line_28 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_31 $$ assertTrue("Has thread connection", TransactionSynchronizationManager.hasResource(dsToUse))[ CD ]
Line_12 $$ if (dataSourceLookup) -->Line_18 $$ dsToUse.setDataSourceLookup(new BeanFactoryDataSourceLookup(beanFactory))[ CD ]
Line_2 $$ private void doTestJtaTransactionWithIsolationLevelDataSourceRouter(boolean dataSourceLookup) throws Exception -->Line_5 $$ final Connection connection1 = mock(Connection.class)[ CD ]
Line_12 $$ if (dataSourceLookup) -->Line_20 $$ targetDataSources.put("ISOLATION_REPEATABLE_READ", dataSource2)[ CD ]
Line_4 $$ final DataSource dataSource1 = mock(DataSource.class)-->Line_16 $$ beanFactory.addBean("ds1", dataSource1)[ FD ]
Line_2 $$ private void doTestJtaTransactionWithIsolationLevelDataSourceRouter(boolean dataSourceLookup) throws Exception -->Line_3 $$ given(userTransaction.getStatus()).willReturn(Status.STATUS_NO_TRANSACTION, Status.STATUS_ACTIVE, Status.STATUS_ACTIVE, Status.STATUS_NO_TRANSACTION, Status.STATUS_ACTIVE, Status.STATUS_ACTIVE)[ CD ]
Line_10 $$ final IsolationLevelDataSourceRouter dsToUse = new IsolationLevelDataSourceRouter()-->Line_24 $$ dsToUse.afterPropertiesSet()[ FD ]
Line_28 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_30 $$ Connection c = DataSourceUtils.getConnection(dsToUse)[ CD ]
Line_27 $$ TransactionTemplate tt = new TransactionTemplate(ptm)-->Line_37 $$ tt.execute(new TransactionCallbackWithoutResult() [ FD ]
Line_10 $$ final IsolationLevelDataSourceRouter dsToUse = new IsolationLevelDataSourceRouter()-->Line_42 $$ DataSourceUtils.releaseConnection(c, dsToUse)[ FD ]
Line_11 $$ Map<Object, Object> targetDataSources = new HashMap<Object, Object>()-->Line_13 $$ targetDataSources.put("ISOLATION_REPEATABLE_READ", "ds2")[ FD ]
Line_2 $$ private void doTestJtaTransactionWithIsolationLevelDataSourceRouter(boolean dataSourceLookup) throws Exception -->Line_45 $$ verify(userTransaction, times(2)).begin()[ CD ]
Line_10 $$ final IsolationLevelDataSourceRouter dsToUse = new IsolationLevelDataSourceRouter()-->Line_30 $$ Connection c = DataSourceUtils.getConnection(dsToUse)[ FD ]
Line_10 $$ final IsolationLevelDataSourceRouter dsToUse = new IsolationLevelDataSourceRouter()-->Line_31 $$ assertTrue("Has thread connection", TransactionSynchronizationManager.hasResource(dsToUse))[ FD ]
Line_2 $$ private void doTestJtaTransactionWithIsolationLevelDataSourceRouter(boolean dataSourceLookup) throws Exception -->Line_28 $$ tt.execute(new TransactionCallbackWithoutResult() [ CD ]
Line_2 $$ private void doTestJtaTransactionWithIsolationLevelDataSourceRouter(boolean dataSourceLookup) throws Exception -->Line_36 $$ tt.setIsolationLevel(TransactionDefinition.ISOLATION_REPEATABLE_READ)[ CD ]
Line_5 $$ final Connection connection1 = mock(Connection.class)-->Line_47 $$ verify(connection1).close()[ FD ]
Line_2 $$ private void doTestJtaTransactionWithIsolationLevelDataSourceRouter(boolean dataSourceLookup) throws Exception -->Line_47 $$ verify(connection1).close()[ CD ]
Line_30 $$ Connection c = DataSourceUtils.getConnection(dsToUse)-->Line_41 $$ assertSame(connection2, c)[ FD ]
Line_2 $$ private void doTestJtaTransactionWithIsolationLevelDataSourceRouter(boolean dataSourceLookup) throws Exception -->Line_4 $$ final DataSource dataSource1 = mock(DataSource.class)[ CD ]
Line_30 $$ Connection c = DataSourceUtils.getConnection(dsToUse)-->Line_32 $$ assertSame(connection1, c)[ FD ]
Line_7 $$ final DataSource dataSource2 = mock(DataSource.class)-->Line_20 $$ targetDataSources.put("ISOLATION_REPEATABLE_READ", dataSource2)[ FD ]
Line_10 $$ final IsolationLevelDataSourceRouter dsToUse = new IsolationLevelDataSourceRouter()-->Line_23 $$ dsToUse.setTargetDataSources(targetDataSources)[ FD ]
Line_25 $$ JtaTransactionManager ptm = new JtaTransactionManager(userTransaction)-->Line_26 $$ ptm.setAllowCustomIsolationLevels(true)[ FD ]
Line_11 $$ Map<Object, Object> targetDataSources = new HashMap<Object, Object>()-->Line_20 $$ targetDataSources.put("ISOLATION_REPEATABLE_READ", dataSource2)[ FD ]
Line_2 $$ private void doTestJtaTransactionWithIsolationLevelDataSourceRouter(boolean dataSourceLookup) throws Exception -->Line_7 $$ final DataSource dataSource2 = mock(DataSource.class)[ CD ]
Line_10 $$ final IsolationLevelDataSourceRouter dsToUse = new IsolationLevelDataSourceRouter()-->Line_39 $$ Connection c = DataSourceUtils.getConnection(dsToUse)[ FD ]
Line_39 $$ Connection c = DataSourceUtils.getConnection(dsToUse)-->Line_41 $$ assertSame(connection2, c)[ FD ]
Line_12 $$ if (dataSourceLookup) -->Line_16 $$ beanFactory.addBean("ds1", dataSource1)[ CD ]
Line_2 $$ private void doTestJtaTransactionWithIsolationLevelDataSourceRouter(boolean dataSourceLookup) throws Exception -->Line_25 $$ JtaTransactionManager ptm = new JtaTransactionManager(userTransaction)[ CD ]
Line_28 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_33 $$ DataSourceUtils.releaseConnection(c, dsToUse)[ CD ]
Line_2 $$ private void doTestJtaTransactionWithIsolationLevelDataSourceRouter(boolean dataSourceLookup) throws Exception -->Line_24 $$ dsToUse.afterPropertiesSet()[ CD ]
Line_39 $$ Connection c = DataSourceUtils.getConnection(dsToUse)-->Line_42 $$ DataSourceUtils.releaseConnection(c, dsToUse)[ FD ]
Line_15 $$ StaticListableBeanFactory beanFactory = new StaticListableBeanFactory()-->Line_17 $$ beanFactory.addBean("ds2", dataSource2)[ FD ]
Line_37 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_40 $$ assertTrue("Has thread connection", TransactionSynchronizationManager.hasResource(dsToUse))[ CD ]
Line_12 $$ if (dataSourceLookup) -->Line_14 $$ dsToUse.setDefaultTargetDataSource("ds1")[ CD ]
Line_10 $$ final IsolationLevelDataSourceRouter dsToUse = new IsolationLevelDataSourceRouter()-->Line_18 $$ dsToUse.setDataSourceLookup(new BeanFactoryDataSourceLookup(beanFactory))[ FD ]
Line_27 $$ TransactionTemplate tt = new TransactionTemplate(ptm)-->Line_28 $$ tt.execute(new TransactionCallbackWithoutResult() [ FD ]
Line_5 $$ final Connection connection1 = mock(Connection.class)-->Line_32 $$ assertSame(connection1, c)[ FD ]
Line_10 $$ final IsolationLevelDataSourceRouter dsToUse = new IsolationLevelDataSourceRouter()-->Line_14 $$ dsToUse.setDefaultTargetDataSource("ds1")[ FD ]
Line_30 $$ Connection c = DataSourceUtils.getConnection(dsToUse)-->Line_33 $$ DataSourceUtils.releaseConnection(c, dsToUse)[ FD ]
Line_7 $$ final DataSource dataSource2 = mock(DataSource.class)-->Line_17 $$ beanFactory.addBean("ds2", dataSource2)[ FD ]
Line_27 $$ TransactionTemplate tt = new TransactionTemplate(ptm)-->Line_36 $$ tt.setIsolationLevel(TransactionDefinition.ISOLATION_REPEATABLE_READ)[ FD ]
Line_8 $$ final Connection connection2 = mock(Connection.class)-->Line_48 $$ verify(connection2).close()[ FD ]
Line_37 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_41 $$ assertSame(connection2, c)[ CD ]
Line_12 $$ if (dataSourceLookup) -->Line_21 $$ dsToUse.setDefaultTargetDataSource(dataSource1)[ CD ]
Line_4 $$ final DataSource dataSource1 = mock(DataSource.class)-->Line_6 $$ given(dataSource1.getConnection()).willReturn(connection1)[ FD ]
Line_12 $$ if (dataSourceLookup) -->Line_17 $$ beanFactory.addBean("ds2", dataSource2)[ CD ]
Line_30 $$ Connection c = DataSourceUtils.getConnection(dsToUse)-->Line_42 $$ DataSourceUtils.releaseConnection(c, dsToUse)[ FD ]
Line_2 $$ private void doTestJtaTransactionWithIsolationLevelDataSourceRouter(boolean dataSourceLookup) throws Exception -->Line_23 $$ dsToUse.setTargetDataSources(targetDataSources)[ CD ]
Line_15 $$ StaticListableBeanFactory beanFactory = new StaticListableBeanFactory()-->Line_16 $$ beanFactory.addBean("ds1", dataSource1)[ FD ]
Line_2 $$ private void doTestJtaTransactionWithIsolationLevelDataSourceRouter(boolean dataSourceLookup) throws Exception -->Line_10 $$ final IsolationLevelDataSourceRouter dsToUse = new IsolationLevelDataSourceRouter()[ CD ]
Line_4 $$ final DataSource dataSource1 = mock(DataSource.class)-->Line_21 $$ dsToUse.setDefaultTargetDataSource(dataSource1)[ FD ]
Line_2 $$ private void doTestJtaTransactionWithIsolationLevelDataSourceRouter(boolean dataSourceLookup) throws Exception -->Line_46 $$ verify(userTransaction, times(2)).commit()[ CD ]
Line_2 $$ private void doTestJtaTransactionWithIsolationLevelDataSourceRouter(boolean dataSourceLookup) throws Exception -->Line_8 $$ final Connection connection2 = mock(Connection.class)[ CD ]
Line_12 $$ if (dataSourceLookup) -->Line_15 $$ StaticListableBeanFactory beanFactory = new StaticListableBeanFactory()[ CD ]
Line_37 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_42 $$ DataSourceUtils.releaseConnection(c, dsToUse)[ CD ]
Line_28 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_32 $$ assertSame(connection1, c)[ CD ]
Line_2 $$ private void doTestJtaTransactionWithIsolationLevelDataSourceRouter(boolean dataSourceLookup) throws Exception -->Line_12 $$ if (dataSourceLookup) [ CD ]
Line_8 $$ final Connection connection2 = mock(Connection.class)-->Line_41 $$ assertSame(connection2, c)[ FD ]
Line_2 $$ private void doTestJtaTransactionWithIsolationLevelDataSourceRouter(boolean dataSourceLookup) throws Exception -->Line_48 $$ verify(connection2).close()[ CD ]
Line_7 $$ final DataSource dataSource2 = mock(DataSource.class)-->Line_9 $$ given(dataSource2.getConnection()).willReturn(connection2)[ FD ]
Line_2 $$ private void doTestJtaTransactionWithIsolationLevelDataSourceRouter(boolean dataSourceLookup) throws Exception -->Line_9 $$ given(dataSource2.getConnection()).willReturn(connection2)[ CD ]
Line_2 $$ private void doTestJtaTransactionWithIsolationLevelDataSourceRouter(boolean dataSourceLookup) throws Exception -->Line_26 $$ ptm.setAllowCustomIsolationLevels(true)[ CD ]
Line_10 $$ final IsolationLevelDataSourceRouter dsToUse = new IsolationLevelDataSourceRouter()-->Line_21 $$ dsToUse.setDefaultTargetDataSource(dataSource1)[ FD ]
Line_5 $$ final Connection connection1 = mock(Connection.class)-->Line_6 $$ given(dataSource1.getConnection()).willReturn(connection1)[ FD ]
Line_12 $$ if (dataSourceLookup) -->Line_13 $$ targetDataSources.put("ISOLATION_REPEATABLE_READ", "ds2")[ CD ]
Line_10 $$ final IsolationLevelDataSourceRouter dsToUse = new IsolationLevelDataSourceRouter()-->Line_33 $$ DataSourceUtils.releaseConnection(c, dsToUse)[ FD ]
Line_2 $$ private void doTestJtaTransactionWithIsolationLevelDataSourceRouter(boolean dataSourceLookup) throws Exception -->Line_11 $$ Map<Object, Object> targetDataSources = new HashMap<Object, Object>()[ CD ]
Line_2 $$ private void doTestJtaTransactionWithIsolationLevelDataSourceRouter(boolean dataSourceLookup) throws Exception -->Line_27 $$ TransactionTemplate tt = new TransactionTemplate(ptm)[ CD ]
Line_37 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_39 $$ Connection c = DataSourceUtils.getConnection(dsToUse)[ CD ]
Line_11 $$ Map<Object, Object> targetDataSources = new HashMap<Object, Object>()-->Line_23 $$ dsToUse.setTargetDataSources(targetDataSources)[ FD ]
Line_10 $$ final IsolationLevelDataSourceRouter dsToUse = new IsolationLevelDataSourceRouter()-->Line_40 $$ assertTrue("Has thread connection", TransactionSynchronizationManager.hasResource(dsToUse))[ FD ]
