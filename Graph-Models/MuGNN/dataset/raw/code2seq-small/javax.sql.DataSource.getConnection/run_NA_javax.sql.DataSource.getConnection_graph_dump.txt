Line_20 $$ PreparedStatement statement = null-->Line_24 $$ statement = connection.prepareStatement(loadTimer)[ FD ]
Line_16 $$ existing = new HashSet(knownTimerIds.get(timedObjectId))-->Line_31 $$ if (!existing.remove(id)) [ FD ]
Line_27 $$ resultSet = statement.executeQuery()-->Line_28 $$ while (resultSet.next()) [ FD ]
Line_10 $$ TimerChangeListener listener = changeListeners.get(timedObjectId)-->Line_48 $$ listener.timerRemoved(timer)[ FD ]
Line_46 $$ for (String timer : existing) -->Line_48 $$ listener.timerRemoved(timer)[ FD ]
Line_30 $$ String id = resultSet.getString(1)-->Line_31 $$ if (!existing.remove(id)) [ FD ]
Line_24 $$ statement = connection.prepareStatement(loadTimer)-->Line_27 $$ resultSet = statement.executeQuery()[ FD ]
Line_36 $$ if (holder != null) -->Line_37 $$ listener.timerAdded(holder.timer)[ CD ]
Line_9 $$ for (String timedObjectId : timedObjects) -->Line_10 $$ TimerChangeListener listener = changeListeners.get(timedObjectId)[ FD ]
Line_18 $$ String loadTimer = sql(LOAD_ALL_TIMERS)-->Line_24 $$ statement = connection.prepareStatement(loadTimer)[ FD ]
Line_9 $$ for (String timedObjectId : timedObjects) -->Line_25 $$ statement.setString(1, timedObjectId)[ FD ]
Line_21 $$ ResultSet resultSet = null-->Line_35 $$ final Holder holder = timerFromResult(resultSet, listener.getTimerService())[ FD ]
Line_46 $$ for (String timer : existing) -->Line_47 $$ timers.remove(timer)[ FD ]
Line_24 $$ statement = connection.prepareStatement(loadTimer)-->Line_26 $$ statement.setString(2, partition)[ FD ]
Line_14 $$ final Set<String> existing-->Line_31 $$ if (!existing.remove(id)) [ FD ]
Line_20 $$ PreparedStatement statement = null-->Line_26 $$ statement.setString(2, partition)[ FD ]
Line_10 $$ TimerChangeListener listener = changeListeners.get(timedObjectId)-->Line_37 $$ listener.timerAdded(holder.timer)[ FD ]
Line_21 $$ ResultSet resultSet = null-->Line_27 $$ resultSet = statement.executeQuery()[ FD ]
Line_21 $$ ResultSet resultSet = null-->Line_54 $$ safeClose(resultSet)[ FD ]
Line_19 $$ Connection connection = null-->Line_56 $$ safeClose(connection)[ FD ]
Line_19 $$ Connection connection = null-->Line_24 $$ statement = connection.prepareStatement(loadTimer)[ FD ]
Line_45 $$ Set<String> timers = knownTimerIds.get(timedObjectId)-->Line_47 $$ timers.remove(timer)[ FD ]
Line_31 $$ if (!existing.remove(id)) -->Line_35 $$ final Holder holder = timerFromResult(resultSet, listener.getTimerService())[ CD ]
Line_27 $$ resultSet = statement.executeQuery()-->Line_35 $$ final Holder holder = timerFromResult(resultSet, listener.getTimerService())[ FD ]
Line_35 $$ final Holder holder = timerFromResult(resultSet, listener.getTimerService())-->Line_36 $$ if (holder != null) [ FD ]
Line_21 $$ ResultSet resultSet = null-->Line_41 $$ EjbLogger.ROOT_LOGGER.timerReinstatementFailed(resultSet.getString(2), resultSet.getString(1), e)[ FD ]
Line_27 $$ resultSet = statement.executeQuery()-->Line_54 $$ safeClose(resultSet)[ FD ]
Line_9 $$ for (String timedObjectId : timedObjects) -->Line_33 $$ knownTimerIds.get(timedObjectId).add(id)[ FD ]
Line_23 $$ connection = dataSource.getConnection()-->Line_24 $$ statement = connection.prepareStatement(loadTimer)[ FD ]
Line_21 $$ ResultSet resultSet = null-->Line_30 $$ String id = resultSet.getString(1)[ FD ]
Line_10 $$ TimerChangeListener listener = changeListeners.get(timedObjectId)-->Line_35 $$ final Holder holder = timerFromResult(resultSet, listener.getTimerService())[ FD ]
Line_9 $$ for (String timedObjectId : timedObjects) -->Line_52 $$ EjbLogger.ROOT_LOGGER.failedToRefreshTimers(timedObjectId)[ FD ]
Line_20 $$ PreparedStatement statement = null-->Line_25 $$ statement.setString(1, timedObjectId)[ FD ]
Line_20 $$ PreparedStatement statement = null-->Line_27 $$ resultSet = statement.executeQuery()[ FD ]
Line_23 $$ connection = dataSource.getConnection()-->Line_56 $$ safeClose(connection)[ FD ]
Line_14 $$ final Set<String> existing-->Line_16 $$ existing = new HashSet(knownTimerIds.get(timedObjectId))[ FD ]
Line_9 $$ for (String timedObjectId : timedObjects) -->Line_16 $$ existing = new HashSet(knownTimerIds.get(timedObjectId))[ FD ]
Line_10 $$ TimerChangeListener listener = changeListeners.get(timedObjectId)-->Line_11 $$ if (listener == null) [ FD ]
Line_30 $$ String id = resultSet.getString(1)-->Line_33 $$ knownTimerIds.get(timedObjectId).add(id)[ FD ]
Line_24 $$ statement = connection.prepareStatement(loadTimer)-->Line_25 $$ statement.setString(1, timedObjectId)[ FD ]
Line_2 $$ public void run() -->Line_3 $$ if (running.compareAndSet(false, true)) [ CD ]
Line_5 $$ Set<String> timedObjects-->Line_7 $$ timedObjects = new HashSet(knownTimerIds.keySet())[ FD ]
Line_21 $$ ResultSet resultSet = null-->Line_28 $$ while (resultSet.next()) [ FD ]
Line_24 $$ statement = connection.prepareStatement(loadTimer)-->Line_55 $$ safeClose(statement)[ FD ]
Line_27 $$ resultSet = statement.executeQuery()-->Line_30 $$ String id = resultSet.getString(1)[ FD ]
Line_20 $$ PreparedStatement statement = null-->Line_55 $$ safeClose(statement)[ FD ]
Line_31 $$ if (!existing.remove(id)) -->Line_36 $$ if (holder != null) [ CD ]
Line_19 $$ Connection connection = null-->Line_23 $$ connection = dataSource.getConnection()[ FD ]
Line_9 $$ for (String timedObjectId : timedObjects) -->Line_45 $$ Set<String> timers = knownTimerIds.get(timedObjectId)[ FD ]
Line_27 $$ resultSet = statement.executeQuery()-->Line_41 $$ EjbLogger.ROOT_LOGGER.timerReinstatementFailed(resultSet.getString(2), resultSet.getString(1), e)[ FD ]
