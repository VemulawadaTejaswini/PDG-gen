Line_31 $$ if (timer.requiresReset) -->Line_33 $$ EjbLogger.DEPLOYMENT_LOGGER.loadedPersistentTimerInTimeout(ret.getId(), ret.getTimedObjectId())[ CD ]
Line_32 $$ TimerImpl ret = timer.timer-->Line_39 $$ ret.setTimerState(TimerState.ACTIVE)[ FD ]
Line_6 $$ ResultSet resultSet = null-->Line_14 $$ while (resultSet.next()) [ FD ]
Line_34 $$ if (ret.getNextExpiration() == null) -->Line_37 $$ return null[ CD ]
Line_6 $$ ResultSet resultSet = null-->Line_21 $$ EjbLogger.ROOT_LOGGER.timerReinstatementFailed(resultSet.getString(2), resultSet.getString(1), e)[ FD ]
Line_2 $$ public List<TimerImpl> loadActiveTimers(final String timedObjectId, final TimerServiceImpl timerService) -->Line_10 $$ statement.setString(1, timedObjectId)[ FD ]
Line_5 $$ PreparedStatement statement = null-->Line_9 $$ statement = connection.prepareStatement(loadTimer)[ FD ]
Line_17 $$ if (timerImpl != null) -->Line_18 $$ timers.add(timerImpl)[ CD ]
Line_34 $$ if (ret.getNextExpiration() == null) -->Line_39 $$ ret.setTimerState(TimerState.ACTIVE)[ CD ]
Line_5 $$ PreparedStatement statement = null-->Line_54 $$ safeClose(statement)[ FD ]
Line_32 $$ TimerImpl ret = timer.timer-->Line_33 $$ EjbLogger.DEPLOYMENT_LOGGER.loadedPersistentTimerInTimeout(ret.getId(), ret.getTimedObjectId())[ FD ]
Line_16 $$ final Holder timerImpl = timerFromResult(resultSet, timerService)-->Line_18 $$ timers.add(timerImpl)[ FD ]
Line_34 $$ if (ret.getNextExpiration() == null) -->Line_35 $$ ret.setTimerState(TimerState.CANCELED)[ CD ]
Line_26 $$ for (Holder timer : timers) -->Line_31 $$ if (timer.requiresReset) [ FD ]
Line_5 $$ PreparedStatement statement = null-->Line_11 $$ statement.setString(2, partition)[ FD ]
Line_4 $$ Connection connection = null-->Line_55 $$ safeClose(connection)[ FD ]
Line_32 $$ TimerImpl ret = timer.timer-->Line_36 $$ persistTimer(ret)[ FD ]
Line_13 $$ final List<Holder> timers = new ArrayList()-->Line_18 $$ timers.add(timerImpl)[ FD ]
Line_4 $$ Connection connection = null-->Line_8 $$ connection = dataSource.getConnection()[ FD ]
Line_2 $$ public List<TimerImpl> loadActiveTimers(final String timedObjectId, final TimerServiceImpl timerService) -->Line_16 $$ final Holder timerImpl = timerFromResult(resultSet, timerService)[ FD ]
Line_9 $$ statement = connection.prepareStatement(loadTimer)-->Line_11 $$ statement.setString(2, partition)[ FD ]
Line_6 $$ ResultSet resultSet = null-->Line_12 $$ resultSet = statement.executeQuery()[ FD ]
Line_9 $$ statement = connection.prepareStatement(loadTimer)-->Line_54 $$ safeClose(statement)[ FD ]
Line_25 $$ Set<String> ids = new HashSet()-->Line_29 $$ knownTimerIds.put(timedObjectId, ids)[ FD ]
Line_9 $$ statement = connection.prepareStatement(loadTimer)-->Line_10 $$ statement.setString(1, timedObjectId)[ FD ]
Line_9 $$ statement = connection.prepareStatement(loadTimer)-->Line_12 $$ resultSet = statement.executeQuery()[ FD ]
Line_31 $$ if (timer.requiresReset) -->Line_34 $$ if (ret.getNextExpiration() == null) [ CD ]
Line_2 $$ public List<TimerImpl> loadActiveTimers(final String timedObjectId, final TimerServiceImpl timerService) -->Line_6 $$ ResultSet resultSet = null[ CD ]
Line_4 $$ Connection connection = null-->Line_9 $$ statement = connection.prepareStatement(loadTimer)[ FD ]
Line_6 $$ ResultSet resultSet = null-->Line_16 $$ final Holder timerImpl = timerFromResult(resultSet, timerService)[ FD ]
Line_2 $$ public List<TimerImpl> loadActiveTimers(final String timedObjectId, final TimerServiceImpl timerService) -->Line_4 $$ Connection connection = null[ CD ]
Line_12 $$ resultSet = statement.executeQuery()-->Line_21 $$ EjbLogger.ROOT_LOGGER.timerReinstatementFailed(resultSet.getString(2), resultSet.getString(1), e)[ FD ]
Line_2 $$ public List<TimerImpl> loadActiveTimers(final String timedObjectId, final TimerServiceImpl timerService) -->Line_3 $$ String loadTimer = sql(LOAD_ALL_TIMERS)[ CD ]
Line_2 $$ public List<TimerImpl> loadActiveTimers(final String timedObjectId, final TimerServiceImpl timerService) -->Line_5 $$ PreparedStatement statement = null[ CD ]
Line_12 $$ resultSet = statement.executeQuery()-->Line_14 $$ while (resultSet.next()) [ FD ]
Line_25 $$ Set<String> ids = new HashSet()-->Line_27 $$ ids.add(timer.timer.getId())[ FD ]
Line_3 $$ String loadTimer = sql(LOAD_ALL_TIMERS)-->Line_9 $$ statement = connection.prepareStatement(loadTimer)[ FD ]
Line_34 $$ if (ret.getNextExpiration() == null) -->Line_40 $$ persistTimer(ret)[ CD ]
Line_32 $$ TimerImpl ret = timer.timer-->Line_47 $$ ret.add(timer.timer)[ FD ]
Line_2 $$ public List<TimerImpl> loadActiveTimers(final String timedObjectId, final TimerServiceImpl timerService) -->Line_29 $$ knownTimerIds.put(timedObjectId, ids)[ FD ]
Line_6 $$ ResultSet resultSet = null-->Line_53 $$ safeClose(resultSet)[ FD ]
Line_8 $$ connection = dataSource.getConnection()-->Line_55 $$ safeClose(connection)[ FD ]
Line_5 $$ PreparedStatement statement = null-->Line_10 $$ statement.setString(1, timedObjectId)[ FD ]
Line_12 $$ resultSet = statement.executeQuery()-->Line_16 $$ final Holder timerImpl = timerFromResult(resultSet, timerService)[ FD ]
Line_34 $$ if (ret.getNextExpiration() == null) -->Line_36 $$ persistTimer(ret)[ CD ]
Line_8 $$ connection = dataSource.getConnection()-->Line_9 $$ statement = connection.prepareStatement(loadTimer)[ FD ]
Line_32 $$ TimerImpl ret = timer.timer-->Line_35 $$ ret.setTimerState(TimerState.CANCELED)[ FD ]
Line_31 $$ if (timer.requiresReset) -->Line_32 $$ TimerImpl ret = timer.timer[ CD ]
Line_16 $$ final Holder timerImpl = timerFromResult(resultSet, timerService)-->Line_17 $$ if (timerImpl != null) [ FD ]
Line_5 $$ PreparedStatement statement = null-->Line_12 $$ resultSet = statement.executeQuery()[ FD ]
Line_12 $$ resultSet = statement.executeQuery()-->Line_53 $$ safeClose(resultSet)[ FD ]
Line_32 $$ TimerImpl ret = timer.timer-->Line_34 $$ if (ret.getNextExpiration() == null) [ FD ]
Line_32 $$ TimerImpl ret = timer.timer-->Line_40 $$ persistTimer(ret)[ FD ]
