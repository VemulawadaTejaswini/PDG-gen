Line_6 $$ final TransactionTemplate tt = new TransactionTemplate(tm)-->Line_7 $$ tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW)[ FD ]
Line_4 $$ SQLException failure = new SQLException()-->Line_31 $$ assertSame(failure, ex.getCause())[ FD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedFailingDataSource() throws Exception -->Line_6 $$ final TransactionTemplate tt = new TransactionTemplate(tm)[ CD ]
Line_16 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_20 $$ assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly())[ CD ]
Line_16 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_22 $$ tt2.execute(new TransactionCallbackWithoutResult() [ CD ]
Line_10 $$ final TransactionTemplate tt2 = new TransactionTemplate(tm2)-->Line_11 $$ tt2.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW)[ FD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedFailingDataSource() throws Exception -->Line_36 $$ verify(con).close()[ CD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedFailingDataSource() throws Exception -->Line_12 $$ assertTrue("Hasn't thread connection", !TransactionSynchronizationManager.hasResource(ds))[ CD ]
Line_4 $$ SQLException failure = new SQLException()-->Line_5 $$ given(ds2.getConnection()).willThrow(failure)[ FD ]
Line_16 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_18 $$ assertTrue("Is new transaction", status.isNewTransaction())[ FD ]
Line_16 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_24 $$ status.setRollbackOnly()[ FD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedFailingDataSource() throws Exception -->Line_4 $$ SQLException failure = new SQLException()[ CD ]
Line_6 $$ final TransactionTemplate tt = new TransactionTemplate(tm)-->Line_16 $$ tt.execute(new TransactionCallbackWithoutResult() [ FD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedFailingDataSource() throws Exception -->Line_5 $$ given(ds2.getConnection()).willThrow(failure)[ CD ]
Line_10 $$ final TransactionTemplate tt2 = new TransactionTemplate(tm2)-->Line_22 $$ tt2.execute(new TransactionCallbackWithoutResult() [ FD ]
Line_22 $$ tt2.execute(new TransactionCallbackWithoutResult() -->Line_24 $$ status.setRollbackOnly()[ CD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedFailingDataSource() throws Exception -->Line_8 $$ DataSourceTransactionManager tm2 = new DataSourceTransactionManager(ds2)[ CD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedFailingDataSource() throws Exception -->Line_10 $$ final TransactionTemplate tt2 = new TransactionTemplate(tm2)[ CD ]
Line_16 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_19 $$ assertTrue("Synchronization active", TransactionSynchronizationManager.isSynchronizationActive())[ CD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedFailingDataSource() throws Exception -->Line_7 $$ tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW)[ CD ]
Line_16 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_21 $$ assertTrue(TransactionSynchronizationManager.isActualTransactionActive())[ CD ]
Line_16 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_18 $$ assertTrue("Is new transaction", status.isNewTransaction())[ CD ]
Line_3 $$ final DataSource ds2 = mock(DataSource.class)-->Line_5 $$ given(ds2.getConnection()).willThrow(failure)[ FD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedFailingDataSource() throws Exception -->Line_33 $$ assertTrue("Hasn't thread connection", !TransactionSynchronizationManager.hasResource(ds))[ CD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedFailingDataSource() throws Exception -->Line_13 $$ assertTrue("Hasn't thread connection", !TransactionSynchronizationManager.hasResource(ds2))[ CD ]
Line_3 $$ final DataSource ds2 = mock(DataSource.class)-->Line_34 $$ assertTrue("Hasn't thread connection", !TransactionSynchronizationManager.hasResource(ds2))[ FD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedFailingDataSource() throws Exception -->Line_11 $$ tt2.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW)[ CD ]
Line_8 $$ DataSourceTransactionManager tm2 = new DataSourceTransactionManager(ds2)-->Line_9 $$ tm2.setTransactionSynchronization(DataSourceTransactionManager.SYNCHRONIZATION_NEVER)[ FD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedFailingDataSource() throws Exception -->Line_9 $$ tm2.setTransactionSynchronization(DataSourceTransactionManager.SYNCHRONIZATION_NEVER)[ CD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedFailingDataSource() throws Exception -->Line_14 $$ assertTrue("Synchronization not active", !TransactionSynchronizationManager.isSynchronizationActive())[ CD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedFailingDataSource() throws Exception -->Line_3 $$ final DataSource ds2 = mock(DataSource.class)[ CD ]
Line_22 $$ tt2.execute(new TransactionCallbackWithoutResult() -->Line_24 $$ status.setRollbackOnly()[ FD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedFailingDataSource() throws Exception -->Line_34 $$ assertTrue("Hasn't thread connection", !TransactionSynchronizationManager.hasResource(ds2))[ CD ]
Line_3 $$ final DataSource ds2 = mock(DataSource.class)-->Line_13 $$ assertTrue("Hasn't thread connection", !TransactionSynchronizationManager.hasResource(ds2))[ FD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedFailingDataSource() throws Exception -->Line_35 $$ verify(con).rollback()[ CD ]
