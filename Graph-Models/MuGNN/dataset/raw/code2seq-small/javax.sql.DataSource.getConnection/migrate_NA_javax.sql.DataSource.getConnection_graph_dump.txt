Line_9 $$ for (Class<? extends BaseModel<?>> model : models) -->Line_10 $$ Map<String, Tuple> modelTableDetails = getModelTableDetails(model)[ FD ]
Line_2 $$ public void migrate(DataSource dataSource, List<Class<? extends BaseModel<?>>> models) throws IOException, SQLException -->Line_3 $$ Dialect dialect = DialectDetector.getDialect(dataSource)[ FD ]
Line_2 $$ public void migrate(DataSource dataSource, List<Class<? extends BaseModel<?>>> models) throws IOException, SQLException -->Line_4 $$ Connection connection = dataSource.getConnection()[ CD ]
Line_2 $$ public void migrate(DataSource dataSource, List<Class<? extends BaseModel<?>>> models) throws IOException, SQLException -->Line_4 $$ Connection connection = dataSource.getConnection()[ FD ]
Line_4 $$ Connection connection = dataSource.getConnection()-->Line_15 $$ DataAccess.cleanUp(connection)[ FD ]
Line_6 $$ if (_log.isDebugEnabled()) -->Line_7 $$ _log.debug("Migrating database tables")[ CD ]
Line_4 $$ Connection connection = dataSource.getConnection()-->Line_12 $$ migrateModel(modelTableDetails, DBManagerUtil.getDB(dialect, dataSource), connection)[ FD ]
Line_2 $$ public void migrate(DataSource dataSource, List<Class<? extends BaseModel<?>>> models) throws IOException, SQLException -->Line_12 $$ migrateModel(modelTableDetails, DBManagerUtil.getDB(dialect, dataSource), connection)[ FD ]
Line_10 $$ Map<String, Tuple> modelTableDetails = getModelTableDetails(model)-->Line_12 $$ migrateModel(modelTableDetails, DBManagerUtil.getDB(dialect, dataSource), connection)[ FD ]
Line_3 $$ Dialect dialect = DialectDetector.getDialect(dataSource)-->Line_12 $$ migrateModel(modelTableDetails, DBManagerUtil.getDB(dialect, dataSource), connection)[ FD ]
Line_10 $$ Map<String, Tuple> modelTableDetails = getModelTableDetails(model)-->Line_11 $$ MaintenanceUtil.appendStatus("Processing " + modelTableDetails.size() + " models")[ FD ]
Line_2 $$ public void migrate(DataSource dataSource, List<Class<? extends BaseModel<?>>> models) throws IOException, SQLException -->Line_3 $$ Dialect dialect = DialectDetector.getDialect(dataSource)[ CD ]
