Line_4 $$ Connection connection = mock(Connection.class)-->Line_6 $$ given(dataSource.getConnection()).willReturn(connection)[ FD ]
Line_2 $$ public void testValid() throws Exception -->Line_5 $$ DataSource dataSource = mock(DataSource.class)[ CD ]
Line_7 $$ ResultSet resultSet = mock(ResultSet.class)-->Line_22 $$ verify(resultSet).close()[ FD ]
Line_4 $$ Connection connection = mock(Connection.class)-->Line_14 $$ given(connection.createStatement()).willReturn(statement)[ FD ]
Line_2 $$ public void testValid() throws Exception -->Line_23 $$ verify(statement).close()[ CD ]
Line_2 $$ public void testValid() throws Exception -->Line_12 $$ Statement statement = mock(Statement.class)[ CD ]
Line_2 $$ public void testValid() throws Exception -->Line_8 $$ given(resultSet.next()).willReturn(true, true, false)[ CD ]
Line_3 $$ String sql = "SELECT NAME AS NAME, PROPERTY AS PROPERTY, VALUE AS VALUE FROM T"-->Line_18 $$ reader.loadBeanDefinitions(sql)[ FD ]
Line_12 $$ Statement statement = mock(Statement.class)-->Line_23 $$ verify(statement).close()[ FD ]
Line_2 $$ public void testValid() throws Exception -->Line_20 $$ TestBean tb = (TestBean) bf.getBean("one")[ CD ]
Line_5 $$ DataSource dataSource = mock(DataSource.class)-->Line_6 $$ given(dataSource.getConnection()).willReturn(connection)[ FD ]
Line_7 $$ ResultSet resultSet = mock(ResultSet.class)-->Line_9 $$ given(resultSet.getString(1)).willReturn("one", "one")[ FD ]
Line_5 $$ DataSource dataSource = mock(DataSource.class)-->Line_17 $$ reader.setDataSource(dataSource)[ FD ]
Line_2 $$ public void testValid() throws Exception -->Line_11 $$ given(resultSet.getString(3)).willReturn("org.springframework.tests.sample.beans.TestBean", "53")[ CD ]
Line_2 $$ public void testValid() throws Exception -->Line_13 $$ given(statement.executeQuery(sql)).willReturn(resultSet)[ CD ]
Line_3 $$ String sql = "SELECT NAME AS NAME, PROPERTY AS PROPERTY, VALUE AS VALUE FROM T"-->Line_13 $$ given(statement.executeQuery(sql)).willReturn(resultSet)[ FD ]
Line_2 $$ public void testValid() throws Exception -->Line_14 $$ given(connection.createStatement()).willReturn(statement)[ CD ]
Line_2 $$ public void testValid() throws Exception -->Line_18 $$ reader.loadBeanDefinitions(sql)[ CD ]
Line_2 $$ public void testValid() throws Exception -->Line_7 $$ ResultSet resultSet = mock(ResultSet.class)[ CD ]
Line_2 $$ public void testValid() throws Exception -->Line_21 $$ assertEquals("Age in TestBean was wrong.", 53, tb.getAge())[ CD ]
Line_2 $$ public void testValid() throws Exception -->Line_22 $$ verify(resultSet).close()[ CD ]
Line_15 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_20 $$ TestBean tb = (TestBean) bf.getBean("one")[ FD ]
Line_12 $$ Statement statement = mock(Statement.class)-->Line_14 $$ given(connection.createStatement()).willReturn(statement)[ FD ]
Line_2 $$ public void testValid() throws Exception -->Line_10 $$ given(resultSet.getString(2)).willReturn("(class)", "age")[ CD ]
Line_16 $$ JdbcBeanDefinitionReader reader = new JdbcBeanDefinitionReader(bf)-->Line_17 $$ reader.setDataSource(dataSource)[ FD ]
Line_2 $$ public void testValid() throws Exception -->Line_6 $$ given(dataSource.getConnection()).willReturn(connection)[ CD ]
Line_16 $$ JdbcBeanDefinitionReader reader = new JdbcBeanDefinitionReader(bf)-->Line_18 $$ reader.loadBeanDefinitions(sql)[ FD ]
Line_7 $$ ResultSet resultSet = mock(ResultSet.class)-->Line_10 $$ given(resultSet.getString(2)).willReturn("(class)", "age")[ FD ]
Line_2 $$ public void testValid() throws Exception -->Line_19 $$ assertEquals("Incorrect number of bean definitions", 1, bf.getBeanDefinitionCount())[ CD ]
Line_2 $$ public void testValid() throws Exception -->Line_4 $$ Connection connection = mock(Connection.class)[ CD ]
Line_20 $$ TestBean tb = (TestBean) bf.getBean("one")-->Line_21 $$ assertEquals("Age in TestBean was wrong.", 53, tb.getAge())[ FD ]
Line_15 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_19 $$ assertEquals("Incorrect number of bean definitions", 1, bf.getBeanDefinitionCount())[ FD ]
Line_7 $$ ResultSet resultSet = mock(ResultSet.class)-->Line_13 $$ given(statement.executeQuery(sql)).willReturn(resultSet)[ FD ]
Line_12 $$ Statement statement = mock(Statement.class)-->Line_13 $$ given(statement.executeQuery(sql)).willReturn(resultSet)[ FD ]
Line_2 $$ public void testValid() throws Exception -->Line_15 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()[ CD ]
Line_2 $$ public void testValid() throws Exception -->Line_17 $$ reader.setDataSource(dataSource)[ CD ]
Line_7 $$ ResultSet resultSet = mock(ResultSet.class)-->Line_8 $$ given(resultSet.next()).willReturn(true, true, false)[ FD ]
Line_2 $$ public void testValid() throws Exception -->Line_16 $$ JdbcBeanDefinitionReader reader = new JdbcBeanDefinitionReader(bf)[ CD ]
Line_2 $$ public void testValid() throws Exception -->Line_9 $$ given(resultSet.getString(1)).willReturn("one", "one")[ CD ]
Line_7 $$ ResultSet resultSet = mock(ResultSet.class)-->Line_11 $$ given(resultSet.getString(3)).willReturn("org.springframework.tests.sample.beans.TestBean", "53")[ FD ]
Line_2 $$ public void testValid() throws Exception -->Line_3 $$ String sql = "SELECT NAME AS NAME, PROPERTY AS PROPERTY, VALUE AS VALUE FROM T"[ CD ]
