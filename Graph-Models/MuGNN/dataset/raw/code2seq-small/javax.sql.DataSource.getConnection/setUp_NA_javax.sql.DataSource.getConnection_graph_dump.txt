Line_2 $$ public void setUp() throws Exception -->Line_8 $$ this.resultSet = mock(ResultSet.class)[ CD ]
Line_2 $$ public void setUp() throws Exception -->Line_11 $$ testDataSource.setTarget(dataSource)[ CD ]
Line_2 $$ public void setUp() throws Exception -->Line_10 $$ TestDataSourceWrapper testDataSource = (TestDataSourceWrapper) beanFactory.getBean("dataSource")[ CD ]
Line_2 $$ public void setUp() throws Exception -->Line_3 $$ this.beanFactory = new DefaultListableBeanFactory()[ CD ]
Line_5 $$ DataSource dataSource = mock(DataSource.class)-->Line_11 $$ testDataSource.setTarget(dataSource)[ FD ]
Line_5 $$ DataSource dataSource = mock(DataSource.class)-->Line_9 $$ given(dataSource.getConnection()).willReturn(connection)[ FD ]
Line_2 $$ public void setUp() throws Exception -->Line_5 $$ DataSource dataSource = mock(DataSource.class)[ CD ]
Line_2 $$ public void setUp() throws Exception -->Line_7 $$ this.preparedStatement = mock(PreparedStatement.class)[ CD ]
Line_2 $$ public void setUp() throws Exception -->Line_4 $$ new XmlBeanDefinitionReader((BeanDefinitionRegistry) this.beanFactory).loadBeanDefinitions(new ClassPathResource("org/springframework/jdbc/object/GenericSqlQueryTests-context.xml"))[ CD ]
Line_2 $$ public void setUp() throws Exception -->Line_6 $$ this.connection = mock(Connection.class)[ CD ]
Line_10 $$ TestDataSourceWrapper testDataSource = (TestDataSourceWrapper) beanFactory.getBean("dataSource")-->Line_11 $$ testDataSource.setTarget(dataSource)[ FD ]
Line_2 $$ public void setUp() throws Exception -->Line_9 $$ given(dataSource.getConnection()).willReturn(connection)[ CD ]
