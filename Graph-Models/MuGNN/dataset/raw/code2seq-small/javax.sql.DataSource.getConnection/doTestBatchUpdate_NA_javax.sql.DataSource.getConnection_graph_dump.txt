Line_16 $$ BatchSqlUpdate update = new BatchSqlUpdate(dataSource, sql)-->Line_43 $$ update.reset()[ FD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_43 $$ update.reset()[ CD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_48 $$ verify(preparedStatement).close()[ CD ]
Line_32 $$ if (flushThroughBatchSize) -->Line_37 $$ assertEquals(rowsAffected[1], actualRowsAffected[1])[ CD ]
Line_16 $$ BatchSqlUpdate update = new BatchSqlUpdate(dataSource, sql)-->Line_31 $$ assertEquals(0, update.getQueueCount())[ FD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_44 $$ assertEquals(0, update.getRowsAffected().length)[ CD ]
Line_6 $$ Connection connection = mock(Connection.class)-->Line_10 $$ given(preparedStatement.getConnection()).willReturn(connection)[ FD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_13 $$ given(mockDatabaseMetaData.supportsBatchUpdates()).willReturn(true)[ CD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_31 $$ assertEquals(0, update.getQueueCount())[ CD ]
Line_16 $$ BatchSqlUpdate update = new BatchSqlUpdate(dataSource, sql)-->Line_17 $$ update.declareParameter(new SqlParameter(Types.INTEGER))[ FD ]
Line_16 $$ BatchSqlUpdate update = new BatchSqlUpdate(dataSource, sql)-->Line_19 $$ update.setBatchSize(2)[ FD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_16 $$ BatchSqlUpdate update = new BatchSqlUpdate(dataSource, sql)[ CD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_42 $$ assertEquals(rowsAffected[1], actualRowsAffected[1])[ CD ]
Line_16 $$ BatchSqlUpdate update = new BatchSqlUpdate(dataSource, sql)-->Line_25 $$ assertEquals(2, update.getRowsAffected().length)[ FD ]
Line_9 $$ PreparedStatement preparedStatement = mock(PreparedStatement.class)-->Line_47 $$ verify(preparedStatement, times(2)).addBatch()[ FD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_4 $$ final int[] ids = new int[] [ CD ]
Line_16 $$ BatchSqlUpdate update = new BatchSqlUpdate(dataSource, sql)-->Line_44 $$ assertEquals(0, update.getRowsAffected().length)[ FD ]
Line_6 $$ Connection connection = mock(Connection.class)-->Line_15 $$ given(connection.getMetaData()).willReturn(mockDatabaseMetaData)[ FD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_40 $$ assertTrue("executed 2 updates", actualRowsAffected.length == 2)[ CD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_46 $$ verify(preparedStatement).setObject(1, ids[1], Types.INTEGER)[ CD ]
Line_32 $$ if (flushThroughBatchSize) -->Line_35 $$ assertTrue("executed 2 updates", actualRowsAffected.length == 2)[ CD ]
Line_23 $$ if (flushThroughBatchSize) -->Line_24 $$ assertEquals(0, update.getQueueCount())[ CD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_3 $$ final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = ?"[ CD ]
Line_32 $$ if (flushThroughBatchSize) -->Line_33 $$ assertTrue("flush did not execute updates", actualRowsAffected.length == 0)[ CD ]
Line_7 $$ DataSource dataSource = mock(DataSource.class)-->Line_8 $$ given(dataSource.getConnection()).willReturn(connection)[ FD ]
Line_9 $$ PreparedStatement preparedStatement = mock(PreparedStatement.class)-->Line_46 $$ verify(preparedStatement).setObject(1, ids[1], Types.INTEGER)[ FD ]
Line_12 $$ DatabaseMetaData mockDatabaseMetaData = mock(DatabaseMetaData.class)-->Line_15 $$ given(connection.getMetaData()).willReturn(mockDatabaseMetaData)[ FD ]
Line_9 $$ PreparedStatement preparedStatement = mock(PreparedStatement.class)-->Line_10 $$ given(preparedStatement.getConnection()).willReturn(connection)[ FD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_39 $$ actualRowsAffected = update.getRowsAffected()[ CD ]
Line_9 $$ PreparedStatement preparedStatement = mock(PreparedStatement.class)-->Line_48 $$ verify(preparedStatement).close()[ FD ]
Line_6 $$ Connection connection = mock(Connection.class)-->Line_8 $$ given(dataSource.getConnection()).willReturn(connection)[ FD ]
Line_9 $$ PreparedStatement preparedStatement = mock(PreparedStatement.class)-->Line_14 $$ given(connection.prepareStatement(sql)).willReturn(preparedStatement)[ FD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_7 $$ DataSource dataSource = mock(DataSource.class)[ CD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_11 $$ given(preparedStatement.executeBatch()).willReturn(rowsAffected)[ CD ]
Line_9 $$ PreparedStatement preparedStatement = mock(PreparedStatement.class)-->Line_45 $$ verify(preparedStatement).setObject(1, ids[0], Types.INTEGER)[ FD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_14 $$ given(connection.prepareStatement(sql)).willReturn(preparedStatement)[ CD ]
Line_18 $$ if (flushThroughBatchSize) -->Line_19 $$ update.setBatchSize(2)[ CD ]
Line_23 $$ if (flushThroughBatchSize) -->Line_27 $$ assertEquals(2, update.getQueueCount())[ CD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_12 $$ DatabaseMetaData mockDatabaseMetaData = mock(DatabaseMetaData.class)[ CD ]
Line_12 $$ DatabaseMetaData mockDatabaseMetaData = mock(DatabaseMetaData.class)-->Line_13 $$ given(mockDatabaseMetaData.supportsBatchUpdates()).willReturn(true)[ FD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_32 $$ if (flushThroughBatchSize) [ CD ]
Line_9 $$ PreparedStatement preparedStatement = mock(PreparedStatement.class)-->Line_11 $$ given(preparedStatement.executeBatch()).willReturn(rowsAffected)[ FD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_41 $$ assertEquals(rowsAffected[0], actualRowsAffected[0])[ CD ]
Line_30 $$ int[] actualRowsAffected = update.flush()-->Line_39 $$ actualRowsAffected = update.getRowsAffected()[ FD ]
Line_23 $$ if (flushThroughBatchSize) -->Line_25 $$ assertEquals(2, update.getRowsAffected().length)[ CD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_30 $$ int[] actualRowsAffected = update.flush()[ CD ]
Line_5 $$ final int[] rowsAffected = new int[] -->Line_11 $$ given(preparedStatement.executeBatch()).willReturn(rowsAffected)[ FD ]
Line_16 $$ BatchSqlUpdate update = new BatchSqlUpdate(dataSource, sql)-->Line_22 $$ update.update(ids[1])[ FD ]
Line_3 $$ final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = ?"-->Line_14 $$ given(connection.prepareStatement(sql)).willReturn(preparedStatement)[ FD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_5 $$ final int[] rowsAffected = new int[] [ CD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_9 $$ PreparedStatement preparedStatement = mock(PreparedStatement.class)[ CD ]
Line_16 $$ BatchSqlUpdate update = new BatchSqlUpdate(dataSource, sql)-->Line_30 $$ int[] actualRowsAffected = update.flush()[ FD ]
Line_32 $$ if (flushThroughBatchSize) -->Line_36 $$ assertEquals(rowsAffected[0], actualRowsAffected[0])[ CD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_22 $$ update.update(ids[1])[ CD ]
Line_16 $$ BatchSqlUpdate update = new BatchSqlUpdate(dataSource, sql)-->Line_28 $$ assertEquals(0, update.getRowsAffected().length)[ FD ]
Line_16 $$ BatchSqlUpdate update = new BatchSqlUpdate(dataSource, sql)-->Line_27 $$ assertEquals(2, update.getQueueCount())[ FD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_18 $$ if (flushThroughBatchSize) [ CD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_8 $$ given(dataSource.getConnection()).willReturn(connection)[ CD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_17 $$ update.declareParameter(new SqlParameter(Types.INTEGER))[ CD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_23 $$ if (flushThroughBatchSize) [ CD ]
Line_23 $$ if (flushThroughBatchSize) -->Line_28 $$ assertEquals(0, update.getRowsAffected().length)[ CD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_6 $$ Connection connection = mock(Connection.class)[ CD ]
Line_16 $$ BatchSqlUpdate update = new BatchSqlUpdate(dataSource, sql)-->Line_39 $$ actualRowsAffected = update.getRowsAffected()[ FD ]
Line_16 $$ BatchSqlUpdate update = new BatchSqlUpdate(dataSource, sql)-->Line_24 $$ assertEquals(0, update.getQueueCount())[ FD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_45 $$ verify(preparedStatement).setObject(1, ids[0], Types.INTEGER)[ CD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_47 $$ verify(preparedStatement, times(2)).addBatch()[ CD ]
Line_6 $$ Connection connection = mock(Connection.class)-->Line_14 $$ given(connection.prepareStatement(sql)).willReturn(preparedStatement)[ FD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_15 $$ given(connection.getMetaData()).willReturn(mockDatabaseMetaData)[ CD ]
Line_16 $$ BatchSqlUpdate update = new BatchSqlUpdate(dataSource, sql)-->Line_21 $$ update.update(ids[0])[ FD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_10 $$ given(preparedStatement.getConnection()).willReturn(connection)[ CD ]
Line_2 $$ private void doTestBatchUpdate(boolean flushThroughBatchSize) throws Exception -->Line_21 $$ update.update(ids[0])[ CD ]
