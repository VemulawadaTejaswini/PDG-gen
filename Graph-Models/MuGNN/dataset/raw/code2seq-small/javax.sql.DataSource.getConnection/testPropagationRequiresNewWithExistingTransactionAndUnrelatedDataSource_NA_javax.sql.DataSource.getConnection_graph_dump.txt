Line_14 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_16 $$ assertTrue("Is new transaction", status.isNewTransaction())[ FD ]
Line_6 $$ final TransactionTemplate tt = new TransactionTemplate(tm)-->Line_7 $$ tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW)[ FD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedDataSource() throws Exception -->Line_8 $$ PlatformTransactionManager tm2 = new DataSourceTransactionManager(ds2)[ CD ]
Line_4 $$ final DataSource ds2 = mock(DataSource.class)-->Line_12 $$ assertTrue("Hasn't thread connection", !TransactionSynchronizationManager.hasResource(ds2))[ FD ]
Line_14 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_17 $$ assertTrue("Synchronization active", TransactionSynchronizationManager.isSynchronizationActive())[ CD ]
Line_14 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_30 $$ assertTrue("Is new transaction", status.isNewTransaction())[ CD ]
Line_3 $$ Connection con2 = mock(Connection.class)-->Line_39 $$ verify(con2).rollback()[ FD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedDataSource() throws Exception -->Line_5 $$ given(ds2.getConnection()).willReturn(con2)[ CD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedDataSource() throws Exception -->Line_36 $$ assertTrue("Hasn't thread connection", !TransactionSynchronizationManager.hasResource(ds2))[ CD ]
Line_20 $$ tt2.execute(new TransactionCallbackWithoutResult() -->Line_24 $$ assertTrue("Is new transaction", status.isNewTransaction())[ FD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedDataSource() throws Exception -->Line_12 $$ assertTrue("Hasn't thread connection", !TransactionSynchronizationManager.hasResource(ds2))[ CD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedDataSource() throws Exception -->Line_4 $$ final DataSource ds2 = mock(DataSource.class)[ CD ]
Line_20 $$ tt2.execute(new TransactionCallbackWithoutResult() -->Line_27 $$ status.setRollbackOnly()[ FD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedDataSource() throws Exception -->Line_38 $$ verify(con).close()[ CD ]
Line_14 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_19 $$ assertTrue(TransactionSynchronizationManager.isActualTransactionActive())[ CD ]
Line_20 $$ tt2.execute(new TransactionCallbackWithoutResult() -->Line_30 $$ assertTrue("Is new transaction", status.isNewTransaction())[ FD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedDataSource() throws Exception -->Line_39 $$ verify(con2).rollback()[ CD ]
Line_14 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_24 $$ assertTrue("Is new transaction", status.isNewTransaction())[ FD ]
Line_14 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_27 $$ status.setRollbackOnly()[ FD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedDataSource() throws Exception -->Line_13 $$ assertTrue("Synchronization not active", !TransactionSynchronizationManager.isSynchronizationActive())[ CD ]
Line_3 $$ Connection con2 = mock(Connection.class)-->Line_40 $$ verify(con2).close()[ FD ]
Line_4 $$ final DataSource ds2 = mock(DataSource.class)-->Line_5 $$ given(ds2.getConnection()).willReturn(con2)[ FD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedDataSource() throws Exception -->Line_7 $$ tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW)[ CD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedDataSource() throws Exception -->Line_14 $$ tt.execute(new TransactionCallbackWithoutResult() [ CD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedDataSource() throws Exception -->Line_6 $$ final TransactionTemplate tt = new TransactionTemplate(tm)[ CD ]
Line_14 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_20 $$ tt2.execute(new TransactionCallbackWithoutResult() [ CD ]
Line_20 $$ tt2.execute(new TransactionCallbackWithoutResult() -->Line_22 $$ assertTrue("Has thread connection", TransactionSynchronizationManager.hasResource(ds))[ CD ]
Line_14 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_18 $$ assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly())[ CD ]
Line_9 $$ final TransactionTemplate tt2 = new TransactionTemplate(tm2)-->Line_20 $$ tt2.execute(new TransactionCallbackWithoutResult() [ FD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedDataSource() throws Exception -->Line_9 $$ final TransactionTemplate tt2 = new TransactionTemplate(tm2)[ CD ]
Line_6 $$ final TransactionTemplate tt = new TransactionTemplate(tm)-->Line_14 $$ tt.execute(new TransactionCallbackWithoutResult() [ FD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedDataSource() throws Exception -->Line_10 $$ tt2.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW)[ CD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedDataSource() throws Exception -->Line_35 $$ assertTrue("Hasn't thread connection", !TransactionSynchronizationManager.hasResource(ds))[ CD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedDataSource() throws Exception -->Line_40 $$ verify(con2).close()[ CD ]
Line_20 $$ tt2.execute(new TransactionCallbackWithoutResult() -->Line_24 $$ assertTrue("Is new transaction", status.isNewTransaction())[ CD ]
Line_9 $$ final TransactionTemplate tt2 = new TransactionTemplate(tm2)-->Line_10 $$ tt2.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW)[ FD ]
Line_20 $$ tt2.execute(new TransactionCallbackWithoutResult() -->Line_26 $$ assertTrue(TransactionSynchronizationManager.isActualTransactionActive())[ CD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedDataSource() throws Exception -->Line_11 $$ assertTrue("Hasn't thread connection", !TransactionSynchronizationManager.hasResource(ds))[ CD ]
Line_14 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_32 $$ assertTrue(TransactionSynchronizationManager.isActualTransactionActive())[ CD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedDataSource() throws Exception -->Line_37 $$ verify(con).commit()[ CD ]
Line_4 $$ final DataSource ds2 = mock(DataSource.class)-->Line_36 $$ assertTrue("Hasn't thread connection", !TransactionSynchronizationManager.hasResource(ds2))[ FD ]
Line_20 $$ tt2.execute(new TransactionCallbackWithoutResult() -->Line_27 $$ status.setRollbackOnly()[ CD ]
Line_14 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_30 $$ assertTrue("Is new transaction", status.isNewTransaction())[ FD ]
Line_3 $$ Connection con2 = mock(Connection.class)-->Line_5 $$ given(ds2.getConnection()).willReturn(con2)[ FD ]
Line_20 $$ tt2.execute(new TransactionCallbackWithoutResult() -->Line_25 $$ assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly())[ CD ]
Line_20 $$ tt2.execute(new TransactionCallbackWithoutResult() -->Line_23 $$ assertTrue("Synchronization active", TransactionSynchronizationManager.isSynchronizationActive())[ CD ]
Line_14 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_31 $$ assertFalse(TransactionSynchronizationManager.isCurrentTransactionReadOnly())[ CD ]
Line_2 $$ public void testPropagationRequiresNewWithExistingTransactionAndUnrelatedDataSource() throws Exception -->Line_3 $$ Connection con2 = mock(Connection.class)[ CD ]
Line_14 $$ tt.execute(new TransactionCallbackWithoutResult() -->Line_16 $$ assertTrue("Is new transaction", status.isNewTransaction())[ CD ]
