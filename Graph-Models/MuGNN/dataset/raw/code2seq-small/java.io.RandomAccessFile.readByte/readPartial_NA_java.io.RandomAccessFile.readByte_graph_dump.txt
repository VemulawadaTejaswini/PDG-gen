Line_13 $$ final Map<String, Change> afterPaths = new HashMap<String, Change>()-->Line_28 $$ change = afterPaths.get(converted)[ FD ]
Line_15 $$ if (change.getBeforeRevision() != null) -->Line_16 $$ beforePaths.put(FilePathsHelper.convertPath(change.getBeforeRevision().getFile()), change)[ CD ]
Line_28 $$ change = afterPaths.get(converted)-->Line_32 $$ if (change != null) [ FD ]
Line_14 $$ for (Change change : changes) -->Line_15 $$ if (change.getBeforeRevision() != null) [ FD ]
Line_22 $$ for (int i = 0; i < count; i++) -->Line_24 $$ String path = file.readUTF()[ CD ]
Line_7 $$ RandomAccessFile file = new RandomAccessFile(partialFile, "r")-->Line_9 $$ int count = file.readInt()[ FD ]
Line_7 $$ RandomAccessFile file = new RandomAccessFile(partialFile, "r")-->Line_38 $$ file.close()[ FD ]
Line_14 $$ for (Change change : changes) -->Line_16 $$ beforePaths.put(FilePathsHelper.convertPath(change.getBeforeRevision().getFile()), change)[ FD ]
Line_13 $$ final Map<String, Change> afterPaths = new HashMap<String, Change>()-->Line_19 $$ afterPaths.put(FilePathsHelper.convertPath(change.getAfterRevision().getFile()), change)[ FD ]
Line_25 $$ final String converted = FilePathsHelper.convertPath(path)-->Line_28 $$ change = afterPaths.get(converted)[ FD ]
Line_10 $$ if (count > 0) -->Line_13 $$ final Map<String, Change> afterPaths = new HashMap<String, Change>()[ CD ]
Line_3 $$ HashSet<Change> result = new HashSet<Change>()-->Line_33 $$ result.add(change)[ FD ]
Line_22 $$ for (int i = 0; i < count; i++) -->Line_25 $$ final String converted = FilePathsHelper.convertPath(path)[ CD ]
Line_28 $$ change = afterPaths.get(converted)-->Line_30 $$ change = beforePaths.get(converted)[ FD ]
Line_22 $$ for (int i = 0; i < count; i++) -->Line_27 $$ if (isAfterRevision) [ CD ]
Line_27 $$ if (isAfterRevision) -->Line_30 $$ change = beforePaths.get(converted)[ CD ]
Line_12 $$ final Map<String, Change> beforePaths = new HashMap<String, Change>()-->Line_16 $$ beforePaths.put(FilePathsHelper.convertPath(change.getBeforeRevision().getFile()), change)[ FD ]
Line_10 $$ if (count > 0) -->Line_22 $$ for (int i = 0; i < count; i++) [ CD ]
Line_22 $$ for (int i = 0; i < count; i++) -->Line_23 $$ boolean isAfterRevision = (file.readByte() != 0)[ CD ]
Line_9 $$ int count = file.readInt()-->Line_10 $$ if (count > 0) [ FD ]
Line_7 $$ RandomAccessFile file = new RandomAccessFile(partialFile, "r")-->Line_24 $$ String path = file.readUTF()[ FD ]
Line_14 $$ for (Change change : changes) -->Line_32 $$ if (change != null) [ FD ]
Line_18 $$ if (change.getAfterRevision() != null) -->Line_19 $$ afterPaths.put(FilePathsHelper.convertPath(change.getAfterRevision().getFile()), change)[ CD ]
Line_26 $$ final Change change-->Line_28 $$ change = afterPaths.get(converted)[ FD ]
Line_14 $$ for (Change change : changes) -->Line_30 $$ change = beforePaths.get(converted)[ FD ]
Line_12 $$ final Map<String, Change> beforePaths = new HashMap<String, Change>()-->Line_30 $$ change = beforePaths.get(converted)[ FD ]
Line_26 $$ final Change change-->Line_33 $$ result.add(change)[ FD ]
Line_28 $$ change = afterPaths.get(converted)-->Line_33 $$ result.add(change)[ FD ]
Line_30 $$ change = beforePaths.get(converted)-->Line_33 $$ result.add(change)[ FD ]
Line_6 $$ if (partialFile.exists()) -->Line_7 $$ RandomAccessFile file = new RandomAccessFile(partialFile, "r")[ CD ]
Line_14 $$ for (Change change : changes) -->Line_28 $$ change = afterPaths.get(converted)[ FD ]
Line_2 $$ private void readPartial(IncomingChangeListData data) -->Line_3 $$ HashSet<Change> result = new HashSet<Change>()[ CD ]
Line_25 $$ final String converted = FilePathsHelper.convertPath(path)-->Line_30 $$ change = beforePaths.get(converted)[ FD ]
Line_3 $$ HashSet<Change> result = new HashSet<Change>()-->Line_44 $$ data.accountedChanges = result[ FD ]
Line_30 $$ change = beforePaths.get(converted)-->Line_32 $$ if (change != null) [ FD ]
Line_10 $$ if (count > 0) -->Line_12 $$ final Map<String, Change> beforePaths = new HashMap<String, Change>()[ CD ]
Line_7 $$ RandomAccessFile file = new RandomAccessFile(partialFile, "r")-->Line_23 $$ boolean isAfterRevision = (file.readByte() != 0)[ FD ]
Line_26 $$ final Change change-->Line_32 $$ if (change != null) [ FD ]
Line_14 $$ for (Change change : changes) -->Line_33 $$ result.add(change)[ FD ]
Line_32 $$ if (change != null) -->Line_33 $$ result.add(change)[ CD ]
Line_9 $$ int count = file.readInt()-->Line_22 $$ for (int i = 0; i < count; i++) [ FD ]
Line_27 $$ if (isAfterRevision) -->Line_28 $$ change = afterPaths.get(converted)[ CD ]
Line_14 $$ for (Change change : changes) -->Line_18 $$ if (change.getAfterRevision() != null) [ FD ]
Line_2 $$ private void readPartial(IncomingChangeListData data) -->Line_44 $$ data.accountedChanges = result[ CD ]
Line_10 $$ if (count > 0) -->Line_11 $$ final Collection<Change> changes = data.changeList.getChanges()[ CD ]
Line_22 $$ for (int i = 0; i < count; i++) -->Line_26 $$ final Change change[ CD ]
Line_22 $$ for (int i = 0; i < count; i++) -->Line_32 $$ if (change != null) [ CD ]
Line_24 $$ String path = file.readUTF()-->Line_25 $$ final String converted = FilePathsHelper.convertPath(path)[ FD ]
Line_5 $$ File partialFile = getPartialPath(data.indexEntry.offset)-->Line_6 $$ if (partialFile.exists()) [ FD ]
Line_14 $$ for (Change change : changes) -->Line_19 $$ afterPaths.put(FilePathsHelper.convertPath(change.getAfterRevision().getFile()), change)[ FD ]
Line_26 $$ final Change change-->Line_30 $$ change = beforePaths.get(converted)[ FD ]
