Line_2 $$ private static PermissionFactory parsePermission(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_24 $$ MetaDataElementParser.requireNoAttributes(reader)[ FD ]
Line_2 $$ private static PermissionFactory parsePermission(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_6 $$ String permissionActions = null[ CD ]
Line_2 $$ private static PermissionFactory parsePermission(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_3 $$ MetaDataElementParser.requireNoAttributes(reader)[ CD ]
Line_2 $$ private static PermissionFactory parsePermission(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_25 $$ permissionClass = reader.getElementText()[ FD ]
Line_6 $$ String permissionActions = null-->Line_37 $$ permissionActions = reader.getElementText()[ FD ]
Line_2 $$ private static PermissionFactory parsePermission(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_30 $$ MetaDataElementParser.requireNoAttributes(reader)[ FD ]
Line_2 $$ private static PermissionFactory parsePermission(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_8 $$ while (reader.hasNext()) [ FD ]
Line_2 $$ private static PermissionFactory parsePermission(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_8 $$ while (reader.hasNext()) [ CD ]
Line_2 $$ private static PermissionFactory parsePermission(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_49 $$ throw unexpectedContent(reader)[ FD ]
Line_2 $$ private static PermissionFactory parsePermission(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_5 $$ String permissionName = null[ CD ]
Line_2 $$ private static PermissionFactory parsePermission(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_4 $$ String permissionClass = null[ CD ]
Line_5 $$ String permissionName = null-->Line_31 $$ permissionName = reader.getElementText()[ FD ]
Line_4 $$ String permissionClass = null-->Line_25 $$ permissionClass = reader.getElementText()[ FD ]
Line_2 $$ private static PermissionFactory parsePermission(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_13 $$ throw missingRequiredElement(reader, requiredElements)[ FD ]
Line_7 $$ EnumSet<Element> requiredElements = EnumSet.of(Element.CLASS_NAME)-->Line_13 $$ throw missingRequiredElement(reader, requiredElements)[ FD ]
Line_19 $$ Element element = Element.forName(reader.getLocalName())-->Line_20 $$ requiredElements.remove(element)[ FD ]
Line_2 $$ private static PermissionFactory parsePermission(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_7 $$ EnumSet<Element> requiredElements = EnumSet.of(Element.CLASS_NAME)[ CD ]
Line_2 $$ private static PermissionFactory parsePermission(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_19 $$ Element element = Element.forName(reader.getLocalName())[ FD ]
Line_7 $$ EnumSet<Element> requiredElements = EnumSet.of(Element.CLASS_NAME)-->Line_12 $$ if (!requiredElements.isEmpty())[ FD ]
Line_7 $$ EnumSet<Element> requiredElements = EnumSet.of(Element.CLASS_NAME)-->Line_20 $$ requiredElements.remove(element)[ FD ]
Line_2 $$ private static PermissionFactory parsePermission(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_36 $$ MetaDataElementParser.requireNoAttributes(reader)[ FD ]
Line_2 $$ private static PermissionFactory parsePermission(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_37 $$ permissionActions = reader.getElementText()[ FD ]
Line_2 $$ private static PermissionFactory parsePermission(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_42 $$ throw MetaDataElementParser.unexpectedElement(reader)[ FD ]
Line_2 $$ private static PermissionFactory parsePermission(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_31 $$ permissionName = reader.getElementText()[ FD ]
Line_2 $$ private static PermissionFactory parsePermission(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_3 $$ MetaDataElementParser.requireNoAttributes(reader)[ FD ]
Line_2 $$ private static PermissionFactory parsePermission(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_53 $$ throw endOfDocument(reader.getLocation())[ FD ]
Line_2 $$ private static PermissionFactory parsePermission(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_9 $$ switch(reader.nextTag()) [ FD ]
