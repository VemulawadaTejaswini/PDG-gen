Line_5 $$ map = (Map) Class.forName(propClass, true, loader).newInstance()-->Line_22 $$ parseMapEntry(reader, map, keyClass, valueClass)[ FD ]
Line_2 $$ private static Map parseMapProperty(XMLStreamReader reader, String propClass, String keyClass, String valueClass, ClassLoader loader) throws XMLStreamException -->Line_7 $$ throw WSLogger.ROOT_LOGGER.cannotInstantiateMap(e, propClass)[ FD ]
Line_2 $$ private static Map parseMapProperty(XMLStreamReader reader, String propClass, String keyClass, String valueClass, ClassLoader loader) throws XMLStreamException -->Line_9 $$ while (reader.hasNext()) [ FD ]
Line_13 $$ if (match(reader, NS, MAP)) -->Line_14 $$ return map[ CD ]
Line_2 $$ private static Map parseMapProperty(XMLStreamReader reader, String propClass, String keyClass, String valueClass, ClassLoader loader) throws XMLStreamException -->Line_22 $$ parseMapEntry(reader, map, keyClass, valueClass)[ FD ]
Line_3 $$ Map map = null-->Line_22 $$ parseMapEntry(reader, map, keyClass, valueClass)[ FD ]
Line_2 $$ private static Map parseMapProperty(XMLStreamReader reader, String propClass, String keyClass, String valueClass, ClassLoader loader) throws XMLStreamException -->Line_16 $$ throw WSLogger.ROOT_LOGGER.unexpectedEndTag(reader.getLocalName())[ FD ]
Line_2 $$ private static Map parseMapProperty(XMLStreamReader reader, String propClass, String keyClass, String valueClass, ClassLoader loader) throws XMLStreamException -->Line_24 $$ throw WSLogger.ROOT_LOGGER.unexpectedElement(reader.getLocalName())[ FD ]
Line_2 $$ private static Map parseMapProperty(XMLStreamReader reader, String propClass, String keyClass, String valueClass, ClassLoader loader) throws XMLStreamException -->Line_5 $$ map = (Map) Class.forName(propClass, true, loader).newInstance()[ FD ]
Line_2 $$ private static Map parseMapProperty(XMLStreamReader reader, String propClass, String keyClass, String valueClass, ClassLoader loader) throws XMLStreamException -->Line_21 $$ if (match(reader, NS, ENTRY)) [ FD ]
Line_3 $$ Map map = null-->Line_5 $$ map = (Map) Class.forName(propClass, true, loader).newInstance()[ FD ]
Line_2 $$ private static Map parseMapProperty(XMLStreamReader reader, String propClass, String keyClass, String valueClass, ClassLoader loader) throws XMLStreamException -->Line_3 $$ Map map = null[ CD ]
Line_2 $$ private static Map parseMapProperty(XMLStreamReader reader, String propClass, String keyClass, String valueClass, ClassLoader loader) throws XMLStreamException -->Line_10 $$ switch(reader.nextTag()) [ FD ]
Line_2 $$ private static Map parseMapProperty(XMLStreamReader reader, String propClass, String keyClass, String valueClass, ClassLoader loader) throws XMLStreamException -->Line_13 $$ if (match(reader, NS, MAP)) [ FD ]
Line_2 $$ private static Map parseMapProperty(XMLStreamReader reader, String propClass, String keyClass, String valueClass, ClassLoader loader) throws XMLStreamException -->Line_9 $$ while (reader.hasNext()) [ CD ]
Line_21 $$ if (match(reader, NS, ENTRY)) -->Line_22 $$ parseMapEntry(reader, map, keyClass, valueClass)[ CD ]
