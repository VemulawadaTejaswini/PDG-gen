Line_20 $$ for (StripeButton eachButton : myButtons) -->Line_49 $$ final Dimension eachSize = eachButton.getPreferredSize()[ FD ]
Line_18 $$ boolean processDrop = isDroppingButton() && stripeSensetiveRec.intersects(myDropRectangle) && !noDrop-->Line_84 $$ if (!sidesStarted && processDrop) [ FD ]
Line_20 $$ for (StripeButton eachButton : myButtons) -->Line_82 $$ layoutButton(data, eachButton, setBounds)[ FD ]
Line_3 $$ final LayoutData data = new LayoutData()-->Line_67 $$ layoutButton(data, myDragButtonImage, false)[ FD ]
Line_10 $$ if (data.horizontal) -->Line_14 $$ data.eachX = 0[ CD ]
Line_46 $$ boolean sidesStarted = false-->Line_77 $$ data.dragToSide = sidesStarted[ FD ]
Line_38 $$ gap -= myDropRectangle.width + data.gap-->Line_43 $$ gap = Math.max(gap, 0)[ FD ]
Line_20 $$ for (StripeButton eachButton : myButtons) -->Line_50 $$ if (!sidesStarted && eachButton.getWindowInfo().isSplit()) [ FD ]
Line_89 $$ if (getAnchor().isHorizontal() == myDragButton.getWindowInfo().getAnchor().isHorizontal()) -->Line_94 $$ data.size.height = Math.max(data.size.height, dragSize.width)[ CD ]
Line_46 $$ boolean sidesStarted = false-->Line_84 $$ if (!sidesStarted && processDrop) [ FD ]
Line_2 $$ private LayoutData recomputeBounds(boolean setBounds, Dimension toFitWith, boolean noDrop) -->Line_19 $$ if (toFitWith == null) [ FD ]
Line_43 $$ gap = Math.max(gap, 0)-->Line_58 $$ data.eachY += gap[ FD ]
Line_3 $$ final LayoutData data = new LayoutData()-->Line_75 $$ layoutButton(data, myDragButtonImage, false)[ FD ]
Line_84 $$ if (!sidesStarted && processDrop) -->Line_85 $$ tryDroppingOnGap(data, gap, -1)[ CD ]
Line_2 $$ private LayoutData recomputeBounds(boolean setBounds, Dimension toFitWith, boolean noDrop) -->Line_10 $$ if (data.horizontal) [ CD ]
Line_28 $$ int gap = 0-->Line_34 $$ gap = toFitWith.height - layoutData.size.height - data.eachY[ FD ]
Line_89 $$ if (getAnchor().isHorizontal() == myDragButton.getWindowInfo().getAnchor().isHorizontal()) -->Line_93 $$ data.size.width = Math.max(data.size.width, dragSize.height)[ CD ]
Line_2 $$ private LayoutData recomputeBounds(boolean setBounds, Dimension toFitWith, boolean noDrop) -->Line_97 $$ if (processDrop && !data.dragTargetChoosen) [ CD ]
Line_28 $$ int gap = 0-->Line_38 $$ gap -= myDropRectangle.width + data.gap[ FD ]
Line_34 $$ gap = toFitWith.height - layoutData.size.height - data.eachY-->Line_52 $$ tryDroppingOnGap(data, gap, eachButton.getWindowInfo().getOrder())[ FD ]
Line_34 $$ gap = toFitWith.height - layoutData.size.height - data.eachY-->Line_55 $$ data.eachX += gap[ FD ]
Line_32 $$ gap = toFitWith.width - horizontaloffset - layoutData.size.width - data.eachX-->Line_56 $$ data.size.width += gap[ FD ]
Line_2 $$ private LayoutData recomputeBounds(boolean setBounds, Dimension toFitWith, boolean noDrop) -->Line_18 $$ boolean processDrop = isDroppingButton() && stripeSensetiveRec.intersects(myDropRectangle) && !noDrop[ CD ]
Line_54 $$ if (data.horizontal) -->Line_59 $$ data.size.height += gap[ CD ]
Line_28 $$ int gap = 0-->Line_58 $$ data.eachY += gap[ FD ]
Line_66 $$ if (distance < eachSize.width / 2 || (myDropRectangle.x + myDropRectangle.width) < eachSize.width / 2) -->Line_67 $$ layoutButton(data, myDragButtonImage, false)[ CD ]
Line_50 $$ if (!sidesStarted && eachButton.getWindowInfo().isSplit()) -->Line_61 $$ sidesStarted = true[ CD ]
Line_32 $$ gap = toFitWith.width - horizontaloffset - layoutData.size.width - data.eachX-->Line_85 $$ tryDroppingOnGap(data, gap, -1)[ FD ]
Line_38 $$ gap -= myDropRectangle.width + data.gap-->Line_55 $$ data.eachX += gap[ FD ]
Line_45 $$ int insertOrder = -1-->Line_48 $$ insertOrder = eachButton.getDecorator().getWindowInfo().getOrder()[ FD ]
Line_64 $$ if (data.horizontal) -->Line_65 $$ int distance = myDropRectangle.x - data.eachX[ CD ]
Line_28 $$ int gap = 0-->Line_85 $$ tryDroppingOnGap(data, gap, -1)[ FD ]
Line_32 $$ gap = toFitWith.width - horizontaloffset - layoutData.size.width - data.eachX-->Line_55 $$ data.eachX += gap[ FD ]
Line_2 $$ private LayoutData recomputeBounds(boolean setBounds, Dimension toFitWith, boolean noDrop) -->Line_46 $$ boolean sidesStarted = false[ CD ]
Line_74 $$ if (distance < eachSize.height / 2 || (myDropRectangle.y + myDropRectangle.height) < eachSize.height / 2) -->Line_75 $$ layoutButton(data, myDragButtonImage, false)[ CD ]
Line_61 $$ sidesStarted = true-->Line_77 $$ data.dragToSide = sidesStarted[ FD ]
Line_32 $$ gap = toFitWith.width - horizontaloffset - layoutData.size.width - data.eachX-->Line_52 $$ tryDroppingOnGap(data, gap, eachButton.getWindowInfo().getOrder())[ FD ]
Line_40 $$ gap -= myDropRectangle.height + data.gap-->Line_59 $$ data.size.height += gap[ FD ]
Line_29 $$ if (toFitWith != null) -->Line_30 $$ LayoutData layoutData = recomputeBounds(false, null, true)[ CD ]
Line_34 $$ gap = toFitWith.height - layoutData.size.height - data.eachY-->Line_43 $$ gap = Math.max(gap, 0)[ FD ]
Line_28 $$ int gap = 0-->Line_59 $$ data.size.height += gap[ FD ]
Line_34 $$ gap = toFitWith.height - layoutData.size.height - data.eachY-->Line_56 $$ data.size.width += gap[ FD ]
Line_32 $$ gap = toFitWith.width - horizontaloffset - layoutData.size.width - data.eachX-->Line_38 $$ gap -= myDropRectangle.width + data.gap[ FD ]
Line_34 $$ gap = toFitWith.height - layoutData.size.height - data.eachY-->Line_59 $$ data.size.height += gap[ FD ]
Line_2 $$ private LayoutData recomputeBounds(boolean setBounds, Dimension toFitWith, boolean noDrop) -->Line_5 $$ data.eachY = 0[ CD ]
Line_97 $$ if (processDrop && !data.dragTargetChoosen) -->Line_99 $$ data.dragToSide = true[ CD ]
Line_43 $$ gap = Math.max(gap, 0)-->Line_85 $$ tryDroppingOnGap(data, gap, -1)[ FD ]
Line_89 $$ if (getAnchor().isHorizontal() == myDragButton.getWindowInfo().getAnchor().isHorizontal()) -->Line_91 $$ data.size.height = Math.max(data.size.height, dragSize.height)[ CD ]
Line_32 $$ gap = toFitWith.width - horizontaloffset - layoutData.size.width - data.eachX-->Line_34 $$ gap = toFitWith.height - layoutData.size.height - data.eachY[ FD ]
Line_74 $$ if (distance < eachSize.height / 2 || (myDropRectangle.y + myDropRectangle.height) < eachSize.height / 2) -->Line_76 $$ data.dragInsertPosition = insertOrder[ CD ]
Line_43 $$ gap = Math.max(gap, 0)-->Line_56 $$ data.size.width += gap[ FD ]
Line_34 $$ gap = toFitWith.height - layoutData.size.height - data.eachY-->Line_38 $$ gap -= myDropRectangle.width + data.gap[ FD ]
Line_66 $$ if (distance < eachSize.width / 2 || (myDropRectangle.x + myDropRectangle.width) < eachSize.width / 2) -->Line_69 $$ data.dragToSide = sidesStarted[ CD ]
Line_2 $$ private LayoutData recomputeBounds(boolean setBounds, Dimension toFitWith, boolean noDrop) -->Line_84 $$ if (!sidesStarted && processDrop) [ CD ]
Line_54 $$ if (data.horizontal) -->Line_58 $$ data.eachY += gap[ CD ]
Line_97 $$ if (processDrop && !data.dragTargetChoosen) -->Line_100 $$ data.dragTargetChoosen = true[ CD ]
Line_43 $$ gap = Math.max(gap, 0)-->Line_55 $$ data.eachX += gap[ FD ]
Line_61 $$ sidesStarted = true-->Line_69 $$ data.dragToSide = sidesStarted[ FD ]
Line_89 $$ if (getAnchor().isHorizontal() == myDragButton.getWindowInfo().getAnchor().isHorizontal()) -->Line_90 $$ data.size.width = Math.max(data.size.width, dragSize.width)[ CD ]
Line_32 $$ gap = toFitWith.width - horizontaloffset - layoutData.size.width - data.eachX-->Line_59 $$ data.size.height += gap[ FD ]
Line_40 $$ gap -= myDropRectangle.height + data.gap-->Line_55 $$ data.eachX += gap[ FD ]
Line_43 $$ gap = Math.max(gap, 0)-->Line_59 $$ data.size.height += gap[ FD ]
Line_54 $$ if (data.horizontal) -->Line_56 $$ data.size.width += gap[ CD ]
Line_36 $$ if (processDrop) -->Line_37 $$ if (data.horizontal) [ CD ]
Line_28 $$ int gap = 0-->Line_32 $$ gap = toFitWith.width - horizontaloffset - layoutData.size.width - data.eachX[ FD ]
Line_64 $$ if (data.horizontal) -->Line_66 $$ if (distance < eachSize.width / 2 || (myDropRectangle.x + myDropRectangle.width) < eachSize.width / 2) [ CD ]
Line_20 $$ for (StripeButton eachButton : myButtons) -->Line_48 $$ insertOrder = eachButton.getDecorator().getWindowInfo().getOrder()[ FD ]
Line_4 $$ final int horizontaloffset = getHeight() - 2-->Line_11 $$ data.eachX = horizontaloffset - 1[ FD ]
Line_34 $$ gap = toFitWith.height - layoutData.size.height - data.eachY-->Line_58 $$ data.eachY += gap[ FD ]
Line_38 $$ gap -= myDropRectangle.width + data.gap-->Line_56 $$ data.size.width += gap[ FD ]
Line_87 $$ if (isDroppingButton()) -->Line_88 $$ final Dimension dragSize = myDragButton.getPreferredSize()[ CD ]
Line_38 $$ gap -= myDropRectangle.width + data.gap-->Line_59 $$ data.size.height += gap[ FD ]
Line_20 $$ for (StripeButton eachButton : myButtons) -->Line_52 $$ tryDroppingOnGap(data, gap, eachButton.getWindowInfo().getOrder())[ FD ]
Line_66 $$ if (distance < eachSize.width / 2 || (myDropRectangle.x + myDropRectangle.width) < eachSize.width / 2) -->Line_70 $$ data.dragTargetChoosen = true[ CD ]
Line_74 $$ if (distance < eachSize.height / 2 || (myDropRectangle.y + myDropRectangle.height) < eachSize.height / 2) -->Line_77 $$ data.dragToSide = sidesStarted[ CD ]
Line_17 $$ final Rectangle stripeSensetiveRec = new Rectangle(-DROP_DISTANCE_SENSIVITY, -DROP_DISTANCE_SENSIVITY, getWidth() + DROP_DISTANCE_SENSIVITY * 2, getHeight() + DROP_DISTANCE_SENSIVITY * 2)-->Line_18 $$ boolean processDrop = isDroppingButton() && stripeSensetiveRec.intersects(myDropRectangle) && !noDrop[ FD ]
Line_28 $$ int gap = 0-->Line_52 $$ tryDroppingOnGap(data, gap, eachButton.getWindowInfo().getOrder())[ FD ]
Line_34 $$ gap = toFitWith.height - layoutData.size.height - data.eachY-->Line_40 $$ gap -= myDropRectangle.height + data.gap[ FD ]
Line_37 $$ if (data.horizontal) -->Line_38 $$ gap -= myDropRectangle.width + data.gap[ CD ]
Line_2 $$ private LayoutData recomputeBounds(boolean setBounds, Dimension toFitWith, boolean noDrop) -->Line_7 $$ data.gap = 0[ CD ]
Line_2 $$ private LayoutData recomputeBounds(boolean setBounds, Dimension toFitWith, boolean noDrop) -->Line_19 $$ if (toFitWith == null) [ CD ]
Line_54 $$ if (data.horizontal) -->Line_55 $$ data.eachX += gap[ CD ]
Line_20 $$ for (StripeButton eachButton : myButtons) -->Line_23 $$ final Dimension eachSize = eachButton.getPreferredSize()[ FD ]
Line_3 $$ final LayoutData data = new LayoutData()-->Line_64 $$ if (data.horizontal) [ FD ]
Line_28 $$ int gap = 0-->Line_43 $$ gap = Math.max(gap, 0)[ FD ]
Line_61 $$ sidesStarted = true-->Line_84 $$ if (!sidesStarted && processDrop) [ FD ]
Line_2 $$ private LayoutData recomputeBounds(boolean setBounds, Dimension toFitWith, boolean noDrop) -->Line_29 $$ if (toFitWith != null) [ CD ]
Line_37 $$ if (data.horizontal) -->Line_40 $$ gap -= myDropRectangle.height + data.gap[ CD ]
Line_3 $$ final LayoutData data = new LayoutData()-->Line_54 $$ if (data.horizontal) [ FD ]
Line_29 $$ if (toFitWith != null) -->Line_36 $$ if (processDrop) [ CD ]
Line_20 $$ for (StripeButton eachButton : myButtons) -->Line_21 $$ if (!isConsideredInLayout(eachButton))[ FD ]
Line_40 $$ gap -= myDropRectangle.height + data.gap-->Line_85 $$ tryDroppingOnGap(data, gap, -1)[ FD ]
Line_28 $$ int gap = 0-->Line_40 $$ gap -= myDropRectangle.height + data.gap[ FD ]
Line_2 $$ private LayoutData recomputeBounds(boolean setBounds, Dimension toFitWith, boolean noDrop) -->Line_82 $$ layoutButton(data, eachButton, setBounds)[ FD ]
Line_2 $$ private LayoutData recomputeBounds(boolean setBounds, Dimension toFitWith, boolean noDrop) -->Line_29 $$ if (toFitWith != null) [ FD ]
Line_2 $$ private LayoutData recomputeBounds(boolean setBounds, Dimension toFitWith, boolean noDrop) -->Line_17 $$ final Rectangle stripeSensetiveRec = new Rectangle(-DROP_DISTANCE_SENSIVITY, -DROP_DISTANCE_SENSIVITY, getWidth() + DROP_DISTANCE_SENSIVITY * 2, getHeight() + DROP_DISTANCE_SENSIVITY * 2)[ CD ]
Line_10 $$ if (data.horizontal) -->Line_12 $$ data.eachY = 1[ CD ]
Line_2 $$ private LayoutData recomputeBounds(boolean setBounds, Dimension toFitWith, boolean noDrop) -->Line_4 $$ final int horizontaloffset = getHeight() - 2[ CD ]
Line_40 $$ gap -= myDropRectangle.height + data.gap-->Line_56 $$ data.size.width += gap[ FD ]
Line_2 $$ private LayoutData recomputeBounds(boolean setBounds, Dimension toFitWith, boolean noDrop) -->Line_3 $$ final LayoutData data = new LayoutData()[ CD ]
Line_74 $$ if (distance < eachSize.height / 2 || (myDropRectangle.y + myDropRectangle.height) < eachSize.height / 2) -->Line_78 $$ data.dragTargetChoosen = true[ CD ]
Line_2 $$ private LayoutData recomputeBounds(boolean setBounds, Dimension toFitWith, boolean noDrop) -->Line_8 $$ data.horizontal = isHorizontal()[ CD ]
Line_2 $$ private LayoutData recomputeBounds(boolean setBounds, Dimension toFitWith, boolean noDrop) -->Line_9 $$ data.dragInsertPosition = -1[ CD ]
Line_28 $$ int gap = 0-->Line_56 $$ data.size.width += gap[ FD ]
Line_2 $$ private LayoutData recomputeBounds(boolean setBounds, Dimension toFitWith, boolean noDrop) -->Line_45 $$ int insertOrder = -1[ CD ]
Line_2 $$ private LayoutData recomputeBounds(boolean setBounds, Dimension toFitWith, boolean noDrop) -->Line_87 $$ if (isDroppingButton()) [ CD ]
Line_29 $$ if (toFitWith != null) -->Line_31 $$ if (data.horizontal) [ CD ]
Line_2 $$ private LayoutData recomputeBounds(boolean setBounds, Dimension toFitWith, boolean noDrop) -->Line_18 $$ boolean processDrop = isDroppingButton() && stripeSensetiveRec.intersects(myDropRectangle) && !noDrop[ FD ]
Line_28 $$ int gap = 0-->Line_55 $$ data.eachX += gap[ FD ]
Line_48 $$ insertOrder = eachButton.getDecorator().getWindowInfo().getOrder()-->Line_76 $$ data.dragInsertPosition = insertOrder[ FD ]
Line_32 $$ gap = toFitWith.width - horizontaloffset - layoutData.size.width - data.eachX-->Line_43 $$ gap = Math.max(gap, 0)[ FD ]
Line_45 $$ int insertOrder = -1-->Line_68 $$ data.dragInsertPosition = insertOrder[ FD ]
Line_40 $$ gap -= myDropRectangle.height + data.gap-->Line_58 $$ data.eachY += gap[ FD ]
Line_2 $$ private LayoutData recomputeBounds(boolean setBounds, Dimension toFitWith, boolean noDrop) -->Line_102 $$ return data[ CD ]
Line_29 $$ if (toFitWith != null) -->Line_43 $$ gap = Math.max(gap, 0)[ CD ]
Line_46 $$ boolean sidesStarted = false-->Line_50 $$ if (!sidesStarted && eachButton.getWindowInfo().isSplit()) [ FD ]
Line_3 $$ final LayoutData data = new LayoutData()-->Line_31 $$ if (data.horizontal) [ FD ]
Line_3 $$ final LayoutData data = new LayoutData()-->Line_37 $$ if (data.horizontal) [ FD ]
Line_32 $$ gap = toFitWith.width - horizontaloffset - layoutData.size.width - data.eachX-->Line_58 $$ data.eachY += gap[ FD ]
Line_40 $$ gap -= myDropRectangle.height + data.gap-->Line_52 $$ tryDroppingOnGap(data, gap, eachButton.getWindowInfo().getOrder())[ FD ]
Line_3 $$ final LayoutData data = new LayoutData()-->Line_82 $$ layoutButton(data, eachButton, setBounds)[ FD ]
Line_46 $$ boolean sidesStarted = false-->Line_61 $$ sidesStarted = true[ FD ]
Line_45 $$ int insertOrder = -1-->Line_76 $$ data.dragInsertPosition = insertOrder[ FD ]
Line_10 $$ if (data.horizontal) -->Line_11 $$ data.eachX = horizontaloffset - 1[ CD ]
Line_63 $$ if (processDrop && !data.dragTargetChoosen) -->Line_64 $$ if (data.horizontal) [ CD ]
Line_3 $$ final LayoutData data = new LayoutData()-->Line_85 $$ tryDroppingOnGap(data, gap, -1)[ FD ]
Line_50 $$ if (!sidesStarted && eachButton.getWindowInfo().isSplit()) -->Line_51 $$ if (processDrop) [ CD ]
Line_51 $$ if (processDrop) -->Line_52 $$ tryDroppingOnGap(data, gap, eachButton.getWindowInfo().getOrder())[ CD ]
Line_38 $$ gap -= myDropRectangle.width + data.gap-->Line_85 $$ tryDroppingOnGap(data, gap, -1)[ FD ]
Line_31 $$ if (data.horizontal) -->Line_32 $$ gap = toFitWith.width - horizontaloffset - layoutData.size.width - data.eachX[ CD ]
Line_2 $$ private LayoutData recomputeBounds(boolean setBounds, Dimension toFitWith, boolean noDrop) -->Line_16 $$ data.fitSize = toFitWith != null ? toFitWith : new Dimension()[ CD ]
Line_66 $$ if (distance < eachSize.width / 2 || (myDropRectangle.x + myDropRectangle.width) < eachSize.width / 2) -->Line_68 $$ data.dragInsertPosition = insertOrder[ CD ]
Line_2 $$ private LayoutData recomputeBounds(boolean setBounds, Dimension toFitWith, boolean noDrop) -->Line_28 $$ int gap = 0[ CD ]
Line_64 $$ if (data.horizontal) -->Line_74 $$ if (distance < eachSize.height / 2 || (myDropRectangle.y + myDropRectangle.height) < eachSize.height / 2) [ CD ]
Line_2 $$ private LayoutData recomputeBounds(boolean setBounds, Dimension toFitWith, boolean noDrop) -->Line_6 $$ data.size = new Dimension()[ CD ]
Line_38 $$ gap -= myDropRectangle.width + data.gap-->Line_58 $$ data.eachY += gap[ FD ]
Line_18 $$ boolean processDrop = isDroppingButton() && stripeSensetiveRec.intersects(myDropRectangle) && !noDrop-->Line_63 $$ if (processDrop && !data.dragTargetChoosen) [ FD ]
Line_48 $$ insertOrder = eachButton.getDecorator().getWindowInfo().getOrder()-->Line_68 $$ data.dragInsertPosition = insertOrder[ FD ]
Line_40 $$ gap -= myDropRectangle.height + data.gap-->Line_43 $$ gap = Math.max(gap, 0)[ FD ]
Line_46 $$ boolean sidesStarted = false-->Line_69 $$ data.dragToSide = sidesStarted[ FD ]
Line_3 $$ final LayoutData data = new LayoutData()-->Line_10 $$ if (data.horizontal) [ FD ]
Line_38 $$ gap -= myDropRectangle.width + data.gap-->Line_52 $$ tryDroppingOnGap(data, gap, eachButton.getWindowInfo().getOrder())[ FD ]
Line_34 $$ gap = toFitWith.height - layoutData.size.height - data.eachY-->Line_85 $$ tryDroppingOnGap(data, gap, -1)[ FD ]
Line_97 $$ if (processDrop && !data.dragTargetChoosen) -->Line_98 $$ data.dragInsertPosition = -1[ CD ]
Line_50 $$ if (!sidesStarted && eachButton.getWindowInfo().isSplit()) -->Line_54 $$ if (data.horizontal) [ CD ]
Line_87 $$ if (isDroppingButton()) -->Line_89 $$ if (getAnchor().isHorizontal() == myDragButton.getWindowInfo().getAnchor().isHorizontal()) [ CD ]
Line_31 $$ if (data.horizontal) -->Line_34 $$ gap = toFitWith.height - layoutData.size.height - data.eachY[ CD ]
Line_38 $$ gap -= myDropRectangle.width + data.gap-->Line_40 $$ gap -= myDropRectangle.height + data.gap[ FD ]
Line_43 $$ gap = Math.max(gap, 0)-->Line_52 $$ tryDroppingOnGap(data, gap, eachButton.getWindowInfo().getOrder())[ FD ]
Line_32 $$ gap = toFitWith.width - horizontaloffset - layoutData.size.width - data.eachX-->Line_40 $$ gap -= myDropRectangle.height + data.gap[ FD ]
Line_18 $$ boolean processDrop = isDroppingButton() && stripeSensetiveRec.intersects(myDropRectangle) && !noDrop-->Line_97 $$ if (processDrop && !data.dragTargetChoosen) [ FD ]
Line_3 $$ final LayoutData data = new LayoutData()-->Line_52 $$ tryDroppingOnGap(data, gap, eachButton.getWindowInfo().getOrder())[ FD ]
