Line_34 $$ Graphics markerGraphics = markersImage.getGraphics()-->Line_40 $$ rowHeader.paint(markerGraphics)[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_11 $$ if (!showFolding) [ CD ]
Line_34 $$ Graphics markerGraphics = markersImage.getGraphics()-->Line_39 $$ markerGraphics.fillRect(0, y1, rowHeader.getWidth(), textImageHeight)[ FD ]
Line_32 $$ markersImageWidth = Math.max(1, rowHeader.getWidth())-->Line_42 $$ markersImageWidth = 0[ FD ]
Line_25 $$ Graphics textGraphics = textImage.getGraphics()-->Line_49 $$ editor.getContentComponent().paint(textGraphics)[ FD ]
Line_31 $$ rowHeader = editor.getGutterComponentEx()-->Line_32 $$ markersImageWidth = Math.max(1, rowHeader.getWidth())[ FD ]
Line_33 $$ markersImage = UIUtil.createImage(markersImageWidth, textImageHeight, BufferedImage.TYPE_INT_RGB)-->Line_34 $$ Graphics markerGraphics = markersImage.getGraphics()[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_57 $$ editor.getScrollingModel().scrollHorizontally(savedScrollOffset)[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_26 $$ EditorUIUtil.setupAntialiasing(textGraphics)[ CD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_59 $$ JComponent component = new JComponent() [ CD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_53 $$ if (!showFolding) [ FD ]
Line_30 $$ if (showGutter) -->Line_35 $$ EditorUIUtil.setupAntialiasing(markerGraphics)[ CD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_18 $$ final int textImageHeight = y2 - y1 == 0 ? editor.getLineHeight() : y2 - y1[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_16 $$ int y1 = p1.y[ CD ]
Line_16 $$ int y1 = p1.y-->Line_36 $$ markerGraphics.translate(0, -y1)[ FD ]
Line_27 $$ final JComponent rowHeader-->Line_43 $$ rowHeader = null[ FD ]
Line_30 $$ if (showGutter) -->Line_31 $$ rowHeader = editor.getGutterComponentEx()[ CD ]
Line_59 $$ JComponent component = new JComponent() -->Line_61 $$ return new Dimension(textImageWidth + markersImageWidth, textImageHeight)[ CD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_49 $$ editor.getContentComponent().paint(textGraphics)[ FD ]
Line_24 $$ final BufferedImage textImage = UIUtil.createImage(textImageWidth, textImageHeight, BufferedImage.TYPE_INT_RGB)-->Line_68 $$ UIUtil.drawImage(graphics, textImage, 0, 0, null)[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_25 $$ Graphics textGraphics = textImage.getGraphics()[ CD ]
Line_16 $$ int y1 = p1.y-->Line_39 $$ markerGraphics.fillRect(0, y1, rowHeader.getWidth(), textImageHeight)[ FD ]
Line_31 $$ rowHeader = editor.getGutterComponentEx()-->Line_43 $$ rowHeader = null[ FD ]
Line_24 $$ final BufferedImage textImage = UIUtil.createImage(textImageWidth, textImageHeight, BufferedImage.TYPE_INT_RGB)-->Line_25 $$ Graphics textGraphics = textImage.getGraphics()[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_48 $$ final boolean wasVisible = editor.setCaretVisible(false)[ FD ]
Line_31 $$ rowHeader = editor.getGutterComponentEx()-->Line_40 $$ rowHeader.paint(markerGraphics)[ FD ]
Line_28 $$ final BufferedImage markersImage-->Line_64 $$ if (markersImage != null) [ FD ]
Line_3 $$ Document doc = editor.getDocument()-->Line_7 $$ final int textImageWidth = Math.min(editor.getMaxWidthInRange(doc.getLineStartOffset(startLine), endOffset) + widthAdjustment, ScreenUtil.getScreenRectangle(1, 1).width)[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_15 $$ Point p2 = editor.logicalPositionToXY(new LogicalPosition(Math.max(endLine, startLine + 1), 0))[ FD ]
Line_30 $$ if (showGutter) -->Line_33 $$ markersImage = UIUtil.createImage(markersImageWidth, textImageHeight, BufferedImage.TYPE_INT_RGB)[ CD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_73 $$ add(component)[ CD ]
Line_34 $$ Graphics markerGraphics = markersImage.getGraphics()-->Line_35 $$ EditorUIUtil.setupAntialiasing(markerGraphics)[ FD ]
Line_28 $$ final BufferedImage markersImage-->Line_44 $$ markersImage = null[ FD ]
Line_44 $$ markersImage = null-->Line_65 $$ UIUtil.drawImage(graphics, markersImage, 0, 0, null)[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_50 $$ if (wasVisible) [ CD ]
Line_30 $$ if (showGutter) -->Line_42 $$ markersImageWidth = 0[ CD ]
Line_10 $$ boolean isFoldingEnabled = foldingModel.isFoldingEnabled()-->Line_54 $$ foldingModel.setFoldingEnabled(isFoldingEnabled)[ FD ]
Line_59 $$ JComponent component = new JComponent() -->Line_65 $$ UIUtil.drawImage(graphics, markersImage, 0, 0, null)[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_46 $$ textGraphics.translate(0, -y1)[ CD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_20 $$ int savedScrollOffset = newRendering ? 0 : editor.getScrollingModel().getHorizontalScrollOffset()[ CD ]
Line_4 $$ final int endOffset = endLine < doc.getLineCount() ? doc.getLineEndOffset(endLine) : doc.getTextLength()-->Line_7 $$ final int textImageWidth = Math.min(editor.getMaxWidthInRange(doc.getLineStartOffset(startLine), endOffset) + widthAdjustment, ScreenUtil.getScreenRectangle(1, 1).width)[ FD ]
Line_20 $$ int savedScrollOffset = newRendering ? 0 : editor.getScrollingModel().getHorizontalScrollOffset()-->Line_57 $$ editor.getScrollingModel().scrollHorizontally(savedScrollOffset)[ FD ]
Line_64 $$ if (markersImage != null) -->Line_65 $$ UIUtil.drawImage(graphics, markersImage, 0, 0, null)[ CD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_72 $$ setLayout(new BorderLayout())[ CD ]
Line_59 $$ JComponent component = new JComponent() -->Line_66 $$ UIUtil.drawImage(graphics, textImage, rowHeader.getWidth(), 0, null)[ FD ]
Line_59 $$ JComponent component = new JComponent() -->Line_64 $$ if (markersImage != null) [ CD ]
Line_44 $$ markersImage = null-->Line_64 $$ if (markersImage != null) [ FD ]
Line_7 $$ final int textImageWidth = Math.min(editor.getMaxWidthInRange(doc.getLineStartOffset(startLine), endOffset) + widthAdjustment, ScreenUtil.getScreenRectangle(1, 1).width)-->Line_24 $$ final BufferedImage textImage = UIUtil.createImage(textImageWidth, textImageHeight, BufferedImage.TYPE_INT_RGB)[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_77 $$ setBorder(BorderFactory.createCompoundBorder(outsideBorder, insideBorder))[ CD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_74 $$ final Color borderColor = editor.getColorsScheme().getColor(EditorColors.SELECTED_TEARLINE_COLOR)[ CD ]
Line_25 $$ Graphics textGraphics = textImage.getGraphics()-->Line_47 $$ textGraphics.setClip(0, y1, textImageWidth, textImageHeight)[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_8 $$ LOG.assertTrue(textImageWidth > 0, "TextWidth: " + textImageWidth + "; startLine:" + startLine + "; endLine:" + endLine + ";")[ CD ]
Line_32 $$ markersImageWidth = Math.max(1, rowHeader.getWidth())-->Line_33 $$ markersImage = UIUtil.createImage(markersImageWidth, textImageHeight, BufferedImage.TYPE_INT_RGB)[ FD ]
Line_64 $$ if (markersImage != null) -->Line_66 $$ UIUtil.drawImage(graphics, textImage, rowHeader.getWidth(), 0, null)[ CD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_29 $$ final int markersImageWidth[ CD ]
Line_3 $$ Document doc = editor.getDocument()-->Line_4 $$ final int endOffset = endLine < doc.getLineCount() ? doc.getLineEndOffset(endLine) : doc.getTextLength()[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_9 $$ FoldingModelEx foldingModel = editor.getFoldingModel()[ CD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_9 $$ FoldingModelEx foldingModel = editor.getFoldingModel()[ FD ]
Line_28 $$ final BufferedImage markersImage-->Line_33 $$ markersImage = UIUtil.createImage(markersImageWidth, textImageHeight, BufferedImage.TYPE_INT_RGB)[ FD ]
Line_18 $$ final int textImageHeight = y2 - y1 == 0 ? editor.getLineHeight() : y2 - y1-->Line_39 $$ markerGraphics.fillRect(0, y1, rowHeader.getWidth(), textImageHeight)[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_31 $$ rowHeader = editor.getGutterComponentEx()[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_5 $$ boolean newRendering = editor instanceof EditorImpl && ((EditorImpl) editor).myUseNewRendering[ CD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_76 $$ Border insideBorder = JBUI.Borders.empty(EMPTY_BORDER_THICKNESS, EMPTY_BORDER_THICKNESS)[ CD ]
Line_16 $$ int y1 = p1.y-->Line_37 $$ markerGraphics.setClip(0, y1, rowHeader.getWidth(), textImageHeight)[ FD ]
Line_21 $$ if (savedScrollOffset > 0) -->Line_22 $$ editor.getScrollingModel().scrollHorizontally(0)[ CD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_53 $$ if (!showFolding) [ CD ]
Line_25 $$ Graphics textGraphics = textImage.getGraphics()-->Line_26 $$ EditorUIUtil.setupAntialiasing(textGraphics)[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_10 $$ boolean isFoldingEnabled = foldingModel.isFoldingEnabled()[ CD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_14 $$ Point p1 = editor.logicalPositionToXY(new LogicalPosition(startLine, 0))[ FD ]
Line_31 $$ rowHeader = editor.getGutterComponentEx()-->Line_39 $$ markerGraphics.fillRect(0, y1, rowHeader.getWidth(), textImageHeight)[ FD ]
Line_27 $$ final JComponent rowHeader-->Line_40 $$ rowHeader.paint(markerGraphics)[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_28 $$ final BufferedImage markersImage[ CD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_4 $$ final int endOffset = endLine < doc.getLineCount() ? doc.getLineEndOffset(endLine) : doc.getTextLength()[ CD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_22 $$ editor.getScrollingModel().scrollHorizontally(0)[ FD ]
Line_34 $$ Graphics markerGraphics = markersImage.getGraphics()-->Line_36 $$ markerGraphics.translate(0, -y1)[ FD ]
Line_7 $$ final int textImageWidth = Math.min(editor.getMaxWidthInRange(doc.getLineStartOffset(startLine), endOffset) + widthAdjustment, ScreenUtil.getScreenRectangle(1, 1).width)-->Line_47 $$ textGraphics.setClip(0, y1, textImageWidth, textImageHeight)[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_14 $$ Point p1 = editor.logicalPositionToXY(new LogicalPosition(startLine, 0))[ CD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_47 $$ textGraphics.setClip(0, y1, textImageWidth, textImageHeight)[ CD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_18 $$ final int textImageHeight = y2 - y1 == 0 ? editor.getLineHeight() : y2 - y1[ CD ]
Line_33 $$ markersImage = UIUtil.createImage(markersImageWidth, textImageHeight, BufferedImage.TYPE_INT_RGB)-->Line_44 $$ markersImage = null[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_30 $$ if (showGutter) [ CD ]
Line_30 $$ if (showGutter) -->Line_38 $$ markerGraphics.setColor(getBackgroundColor(editor))[ CD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_3 $$ Document doc = editor.getDocument()[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_19 $$ LOG.assertTrue(textImageHeight > 0, "Height: " + textImageHeight + "; startLine:" + startLine + "; endLine:" + endLine + "; p1:" + p1 + "; p2:" + p2)[ CD ]
Line_18 $$ final int textImageHeight = y2 - y1 == 0 ? editor.getLineHeight() : y2 - y1-->Line_33 $$ markersImage = UIUtil.createImage(markersImageWidth, textImageHeight, BufferedImage.TYPE_INT_RGB)[ FD ]
Line_27 $$ final JComponent rowHeader-->Line_39 $$ markerGraphics.fillRect(0, y1, rowHeader.getWidth(), textImageHeight)[ FD ]
Line_30 $$ if (showGutter) -->Line_34 $$ Graphics markerGraphics = markersImage.getGraphics()[ CD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_51 $$ editor.setCaretVisible(true)[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_15 $$ Point p2 = editor.logicalPositionToXY(new LogicalPosition(Math.max(endLine, startLine + 1), 0))[ CD ]
Line_53 $$ if (!showFolding) -->Line_54 $$ foldingModel.setFoldingEnabled(isFoldingEnabled)[ CD ]
Line_29 $$ final int markersImageWidth-->Line_32 $$ markersImageWidth = Math.max(1, rowHeader.getWidth())[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_6 $$ int widthAdjustment = newRendering ? EditorUtil.getSpaceWidth(Font.PLAIN, editor) : 0[ FD ]
Line_9 $$ FoldingModelEx foldingModel = editor.getFoldingModel()-->Line_12 $$ foldingModel.setFoldingEnabled(false)[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_7 $$ final int textImageWidth = Math.min(editor.getMaxWidthInRange(doc.getLineStartOffset(startLine), endOffset) + widthAdjustment, ScreenUtil.getScreenRectangle(1, 1).width)[ CD ]
Line_31 $$ rowHeader = editor.getGutterComponentEx()-->Line_66 $$ UIUtil.drawImage(graphics, textImage, rowHeader.getWidth(), 0, null)[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_49 $$ editor.getContentComponent().paint(textGraphics)[ CD ]
Line_34 $$ Graphics markerGraphics = markersImage.getGraphics()-->Line_37 $$ markerGraphics.setClip(0, y1, rowHeader.getWidth(), textImageHeight)[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_6 $$ int widthAdjustment = newRendering ? EditorUtil.getSpaceWidth(Font.PLAIN, editor) : 0[ CD ]
Line_34 $$ Graphics markerGraphics = markersImage.getGraphics()-->Line_38 $$ markerGraphics.setColor(getBackgroundColor(editor))[ FD ]
Line_31 $$ rowHeader = editor.getGutterComponentEx()-->Line_37 $$ markerGraphics.setClip(0, y1, rowHeader.getWidth(), textImageHeight)[ FD ]
Line_18 $$ final int textImageHeight = y2 - y1 == 0 ? editor.getLineHeight() : y2 - y1-->Line_37 $$ markerGraphics.setClip(0, y1, rowHeader.getWidth(), textImageHeight)[ FD ]
Line_30 $$ if (showGutter) -->Line_43 $$ rowHeader = null[ CD ]
Line_50 $$ if (wasVisible) -->Line_51 $$ editor.setCaretVisible(true)[ CD ]
Line_27 $$ final JComponent rowHeader-->Line_37 $$ markerGraphics.setClip(0, y1, rowHeader.getWidth(), textImageHeight)[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_24 $$ final BufferedImage textImage = UIUtil.createImage(textImageWidth, textImageHeight, BufferedImage.TYPE_INT_RGB)[ CD ]
Line_18 $$ final int textImageHeight = y2 - y1 == 0 ? editor.getLineHeight() : y2 - y1-->Line_24 $$ final BufferedImage textImage = UIUtil.createImage(textImageWidth, textImageHeight, BufferedImage.TYPE_INT_RGB)[ FD ]
Line_24 $$ final BufferedImage textImage = UIUtil.createImage(textImageWidth, textImageHeight, BufferedImage.TYPE_INT_RGB)-->Line_66 $$ UIUtil.drawImage(graphics, textImage, rowHeader.getWidth(), 0, null)[ FD ]
Line_30 $$ if (showGutter) -->Line_32 $$ markersImageWidth = Math.max(1, rowHeader.getWidth())[ CD ]
Line_9 $$ FoldingModelEx foldingModel = editor.getFoldingModel()-->Line_10 $$ boolean isFoldingEnabled = foldingModel.isFoldingEnabled()[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_74 $$ final Color borderColor = editor.getColorsScheme().getColor(EditorColors.SELECTED_TEARLINE_COLOR)[ FD ]
Line_33 $$ markersImage = UIUtil.createImage(markersImageWidth, textImageHeight, BufferedImage.TYPE_INT_RGB)-->Line_65 $$ UIUtil.drawImage(graphics, markersImage, 0, 0, null)[ FD ]
Line_27 $$ final JComponent rowHeader-->Line_31 $$ rowHeader = editor.getGutterComponentEx()[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_27 $$ final JComponent rowHeader[ CD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_17 $$ int y2 = p2.y[ CD ]
Line_28 $$ final BufferedImage markersImage-->Line_34 $$ Graphics markerGraphics = markersImage.getGraphics()[ FD ]
Line_30 $$ if (showGutter) -->Line_44 $$ markersImage = null[ CD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_48 $$ final boolean wasVisible = editor.setCaretVisible(false)[ CD ]
Line_43 $$ rowHeader = null-->Line_66 $$ UIUtil.drawImage(graphics, textImage, rowHeader.getWidth(), 0, null)[ FD ]
Line_29 $$ final int markersImageWidth-->Line_33 $$ markersImage = UIUtil.createImage(markersImageWidth, textImageHeight, BufferedImage.TYPE_INT_RGB)[ FD ]
Line_16 $$ int y1 = p1.y-->Line_47 $$ textGraphics.setClip(0, y1, textImageWidth, textImageHeight)[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_56 $$ if (savedScrollOffset > 0) [ CD ]
Line_30 $$ if (showGutter) -->Line_36 $$ markerGraphics.translate(0, -y1)[ CD ]
Line_27 $$ final JComponent rowHeader-->Line_66 $$ UIUtil.drawImage(graphics, textImage, rowHeader.getWidth(), 0, null)[ FD ]
Line_11 $$ if (!showFolding) -->Line_12 $$ foldingModel.setFoldingEnabled(false)[ CD ]
Line_64 $$ if (markersImage != null) -->Line_68 $$ UIUtil.drawImage(graphics, textImage, 0, 0, null)[ CD ]
Line_59 $$ JComponent component = new JComponent() -->Line_68 $$ UIUtil.drawImage(graphics, textImage, 0, 0, null)[ FD ]
Line_28 $$ final BufferedImage markersImage-->Line_65 $$ UIUtil.drawImage(graphics, markersImage, 0, 0, null)[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_20 $$ int savedScrollOffset = newRendering ? 0 : editor.getScrollingModel().getHorizontalScrollOffset()[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_21 $$ if (savedScrollOffset > 0) [ CD ]
Line_29 $$ final int markersImageWidth-->Line_42 $$ markersImageWidth = 0[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_75 $$ Border outsideBorder = JBUI.Borders.customLine(borderColor, LINE_BORDER_THICKNESS)[ CD ]
Line_30 $$ if (showGutter) -->Line_40 $$ rowHeader.paint(markerGraphics)[ CD ]
Line_27 $$ final JComponent rowHeader-->Line_32 $$ markersImageWidth = Math.max(1, rowHeader.getWidth())[ FD ]
Line_30 $$ if (showGutter) -->Line_37 $$ markerGraphics.setClip(0, y1, rowHeader.getWidth(), textImageHeight)[ CD ]
Line_30 $$ if (showGutter) -->Line_39 $$ markerGraphics.fillRect(0, y1, rowHeader.getWidth(), textImageHeight)[ CD ]
Line_9 $$ FoldingModelEx foldingModel = editor.getFoldingModel()-->Line_54 $$ foldingModel.setFoldingEnabled(isFoldingEnabled)[ FD ]
Line_18 $$ final int textImageHeight = y2 - y1 == 0 ? editor.getLineHeight() : y2 - y1-->Line_47 $$ textGraphics.setClip(0, y1, textImageWidth, textImageHeight)[ FD ]
Line_33 $$ markersImage = UIUtil.createImage(markersImageWidth, textImageHeight, BufferedImage.TYPE_INT_RGB)-->Line_64 $$ if (markersImage != null) [ FD ]
Line_16 $$ int y1 = p1.y-->Line_46 $$ textGraphics.translate(0, -y1)[ FD ]
Line_20 $$ int savedScrollOffset = newRendering ? 0 : editor.getScrollingModel().getHorizontalScrollOffset()-->Line_56 $$ if (savedScrollOffset > 0) [ FD ]
Line_25 $$ Graphics textGraphics = textImage.getGraphics()-->Line_46 $$ textGraphics.translate(0, -y1)[ FD ]
Line_59 $$ JComponent component = new JComponent() -->Line_73 $$ add(component)[ FD ]
Line_56 $$ if (savedScrollOffset > 0) -->Line_57 $$ editor.getScrollingModel().scrollHorizontally(savedScrollOffset)[ CD ]
Line_20 $$ int savedScrollOffset = newRendering ? 0 : editor.getScrollingModel().getHorizontalScrollOffset()-->Line_21 $$ if (savedScrollOffset > 0) [ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_11 $$ if (!showFolding) [ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_3 $$ Document doc = editor.getDocument()[ CD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_38 $$ markerGraphics.setColor(getBackgroundColor(editor))[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_7 $$ final int textImageWidth = Math.min(editor.getMaxWidthInRange(doc.getLineStartOffset(startLine), endOffset) + widthAdjustment, ScreenUtil.getScreenRectangle(1, 1).width)[ FD ]
Line_2 $$ private void doInit(EditorEx editor, int startLine, int endLine, boolean showFolding, boolean showGutter) -->Line_4 $$ final int endOffset = endLine < doc.getLineCount() ? doc.getLineEndOffset(endLine) : doc.getTextLength()[ FD ]
