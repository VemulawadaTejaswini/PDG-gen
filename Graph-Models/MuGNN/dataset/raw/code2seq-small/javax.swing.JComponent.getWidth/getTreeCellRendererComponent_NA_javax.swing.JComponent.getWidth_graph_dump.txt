Line_10 $$ if (myRoot == node.getParent()) -->Line_11 $$ myTextLabel.setFont(myTree.getFont())[ CD ]
Line_34 $$ project = findConfigurableProject(configurables[0])-->Line_44 $$ if (project != null) [ FD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean focused) -->Line_60 $$ myNodeIcon.setIcon(nodeIcon)[ CD ]
Line_61 $$ if (node != null && tree.isVisible()) -->Line_67 $$ JScrollBar bar = myScroller.getVerticalScrollBar()[ CD ]
Line_57 $$ nodeIcon = myTree.isExpanded(new TreePath(treeNode.getPath())) ? myTree.getExpandedHandle() : myTree.getCollapsedHandle()-->Line_60 $$ myNodeIcon.setIcon(nodeIcon)[ FD ]
Line_26 $$ if (node != null) -->Line_27 $$ SimpleNode parent = node.getParent()[ CD ]
Line_20 $$ if (myFilter.myContext.getModified().contains(configurable)) -->Line_21 $$ myTextLabel.setForeground(MODIFIED_CONTENT)[ CD ]
Line_18 $$ if (myFilter.myContext.getErrors().containsKey(configurable)) -->Line_20 $$ if (myFilter.myContext.getModified().contains(configurable)) [ CD ]
Line_26 $$ if (node != null) -->Line_28 $$ if (parent instanceof MyNode) [ CD ]
Line_55 $$ nodeIcon = myTree.getEmptyHandle()-->Line_60 $$ myNodeIcon.setIcon(nodeIcon)[ FD ]
Line_5 $$ MyNode node = extractNode(value)-->Line_10 $$ if (myRoot == node.getParent()) [ FD ]
Line_44 $$ if (project != null) -->Line_46 $$ myProjectIcon.setToolTipText(OptionsBundle.message(project.isDefault() ? "configurable.default.project.tooltip" : "configurable.current.project.tooltip"))[ CD ]
Line_69 $$ width += bar.getWidth()-->Line_71 $$ width = Math.min(width, 300)[ FD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean focused) -->Line_25 $$ Project project = null[ CD ]
Line_15 $$ if (!selected && node != null) -->Line_17 $$ if (configurable != null) [ CD ]
Line_72 $$ JComponent view = SettingsTreeView.this-->Line_78 $$ view.repaint()[ FD ]
Line_25 $$ Project project = null-->Line_46 $$ myProjectIcon.setToolTipText(OptionsBundle.message(project.isDefault() ? "configurable.default.project.tooltip" : "configurable.current.project.tooltip"))[ FD ]
Line_61 $$ if (node != null && tree.isVisible()) -->Line_72 $$ JComponent view = SettingsTreeView.this[ CD ]
Line_73 $$ Dimension size = view.getMinimumSize()-->Line_76 $$ view.setMinimumSize(size)[ FD ]
Line_72 $$ JComponent view = SettingsTreeView.this-->Line_77 $$ view.revalidate()[ FD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean focused) -->Line_4 $$ setPreferredSize(null)[ CD ]
Line_72 $$ JComponent view = SettingsTreeView.this-->Line_73 $$ Dimension size = view.getMinimumSize()[ FD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean focused) -->Line_52 $$ if (value instanceof DefaultMutableTreeNode) [ CD ]
Line_61 $$ if (node != null && tree.isVisible()) -->Line_71 $$ width = Math.min(width, 300)[ CD ]
Line_30 $$ project = findConfigurableProject(node)-->Line_34 $$ project = findConfigurableProject(configurables[0])[ FD ]
Line_29 $$ if (myRoot == parent.getParent()) -->Line_37 $$ if (((MyNode) parent).myConfigurable instanceof SortedConfigurableGroup) [ CD ]
Line_18 $$ if (myFilter.myContext.getErrors().containsKey(configurable)) -->Line_19 $$ myTextLabel.setForeground(WRONG_CONTENT)[ CD ]
Line_33 $$ if (configurables != null) -->Line_34 $$ project = findConfigurableProject(configurables[0])[ CD ]
Line_51 $$ Icon nodeIcon = null-->Line_60 $$ myNodeIcon.setIcon(nodeIcon)[ FD ]
Line_34 $$ project = findConfigurableProject(configurables[0])-->Line_39 $$ project = findConfigurableProject(node)[ FD ]
Line_62 $$ int width = getLeftMargin(node.myLevel) + getPreferredSize().width-->Line_75 $$ size.width = width[ FD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean focused) -->Line_61 $$ if (node != null && tree.isVisible()) [ CD ]
Line_74 $$ if (size.width < width) -->Line_76 $$ view.setMinimumSize(size)[ CD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean focused) -->Line_51 $$ Icon nodeIcon = null[ CD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean focused) -->Line_14 $$ myTextLabel.setForeground(selected ? UIUtil.getTreeSelectionForeground() : FOREGROUND)[ CD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean focused) -->Line_61 $$ if (node != null && tree.isVisible()) [ FD ]
Line_5 $$ MyNode node = extractNode(value)-->Line_27 $$ SimpleNode parent = node.getParent()[ FD ]
Line_37 $$ if (((MyNode) parent).myConfigurable instanceof SortedConfigurableGroup) -->Line_38 $$ if (((MyNode) node.getParent()).myConfigurable instanceof SortedConfigurableGroup) [ CD ]
Line_64 $$ if (insets != null) -->Line_65 $$ width += insets.left + insets.right[ CD ]
Line_69 $$ width += bar.getWidth()-->Line_75 $$ size.width = width[ FD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean focused) -->Line_3 $$ myTextLabel.setFont(UIUtil.getLabelFont())[ CD ]
Line_44 $$ if (project != null) -->Line_45 $$ myProjectIcon.setIcon(selected ? AllIcons.General.ProjectConfigurableSelected : AllIcons.General.ProjectConfigurable)[ CD ]
Line_17 $$ if (configurable != null) -->Line_18 $$ if (myFilter.myContext.getErrors().containsKey(configurable)) [ CD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean focused) -->Line_7 $$ myTextLabel.setText(value.toString())[ FD ]
Line_30 $$ project = findConfigurableProject(node)-->Line_39 $$ project = findConfigurableProject(node)[ FD ]
Line_71 $$ width = Math.min(width, 300)-->Line_74 $$ if (size.width < width) [ FD ]
Line_65 $$ width += insets.left + insets.right-->Line_75 $$ size.width = width[ FD ]
Line_65 $$ width += insets.left + insets.right-->Line_69 $$ width += bar.getWidth()[ FD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean focused) -->Line_63 $$ Insets insets = tree.getInsets()[ FD ]
Line_39 $$ project = findConfigurableProject(node)-->Line_46 $$ myProjectIcon.setToolTipText(OptionsBundle.message(project.isDefault() ? "configurable.default.project.tooltip" : "configurable.current.project.tooltip"))[ FD ]
Line_25 $$ Project project = null-->Line_34 $$ project = findConfigurableProject(configurables[0])[ FD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean focused) -->Line_44 $$ if (project != null) [ CD ]
Line_68 $$ if (bar != null && bar.isVisible()) -->Line_69 $$ width += bar.getWidth()[ CD ]
Line_38 $$ if (((MyNode) node.getParent()).myConfigurable instanceof SortedConfigurableGroup) -->Line_39 $$ project = findConfigurableProject(node)[ CD ]
Line_6 $$ if (node == null) -->Line_10 $$ if (myRoot == node.getParent()) [ CD ]
Line_53 $$ DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode) value-->Line_57 $$ nodeIcon = myTree.isExpanded(new TreePath(treeNode.getPath())) ? myTree.getExpandedHandle() : myTree.getCollapsedHandle()[ FD ]
Line_16 $$ Configurable configurable = node.myConfigurable-->Line_20 $$ if (myFilter.myContext.getModified().contains(configurable)) [ FD ]
Line_6 $$ if (node == null) -->Line_9 $$ myTextLabel.setText(node.myDisplayName)[ CD ]
Line_27 $$ SimpleNode parent = node.getParent()-->Line_29 $$ if (myRoot == parent.getParent()) [ FD ]
Line_31 $$ if (node.myConfigurable instanceof SortedConfigurableGroup) -->Line_33 $$ if (configurables != null) [ CD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean focused) -->Line_26 $$ if (node != null) [ CD ]
Line_53 $$ DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode) value-->Line_54 $$ if (0 == treeNode.getChildCount()) [ FD ]
Line_67 $$ JScrollBar bar = myScroller.getVerticalScrollBar()-->Line_69 $$ width += bar.getWidth()[ FD ]
Line_5 $$ MyNode node = extractNode(value)-->Line_38 $$ if (((MyNode) node.getParent()).myConfigurable instanceof SortedConfigurableGroup) [ FD ]
Line_52 $$ if (value instanceof DefaultMutableTreeNode) -->Line_54 $$ if (0 == treeNode.getChildCount()) [ CD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean focused) -->Line_5 $$ MyNode node = extractNode(value)[ CD ]
Line_62 $$ int width = getLeftMargin(node.myLevel) + getPreferredSize().width-->Line_69 $$ width += bar.getWidth()[ FD ]
Line_61 $$ if (node != null && tree.isVisible()) -->Line_62 $$ int width = getLeftMargin(node.myLevel) + getPreferredSize().width[ CD ]
Line_61 $$ if (node != null && tree.isVisible()) -->Line_64 $$ if (insets != null) [ CD ]
Line_32 $$ Configurable[] configurables = ((SortedConfigurableGroup) node.myConfigurable).getConfigurables()-->Line_33 $$ if (configurables != null) [ FD ]
Line_25 $$ Project project = null-->Line_30 $$ project = findConfigurableProject(node)[ FD ]
Line_5 $$ MyNode node = extractNode(value)-->Line_26 $$ if (node != null) [ FD ]
Line_27 $$ SimpleNode parent = node.getParent()-->Line_28 $$ if (parent instanceof MyNode) [ FD ]
Line_16 $$ Configurable configurable = node.myConfigurable-->Line_17 $$ if (configurable != null) [ FD ]
Line_69 $$ width += bar.getWidth()-->Line_74 $$ if (size.width < width) [ FD ]
Line_5 $$ MyNode node = extractNode(value)-->Line_39 $$ project = findConfigurableProject(node)[ FD ]
Line_62 $$ int width = getLeftMargin(node.myLevel) + getPreferredSize().width-->Line_71 $$ width = Math.min(width, 300)[ FD ]
Line_6 $$ if (node == null) -->Line_7 $$ myTextLabel.setText(value.toString())[ CD ]
Line_51 $$ Icon nodeIcon = null-->Line_55 $$ nodeIcon = myTree.getEmptyHandle()[ FD ]
Line_54 $$ if (0 == treeNode.getChildCount()) -->Line_57 $$ nodeIcon = myTree.isExpanded(new TreePath(treeNode.getPath())) ? myTree.getExpandedHandle() : myTree.getCollapsedHandle()[ CD ]
Line_74 $$ if (size.width < width) -->Line_77 $$ view.revalidate()[ CD ]
Line_51 $$ Icon nodeIcon = null-->Line_57 $$ nodeIcon = myTree.isExpanded(new TreePath(treeNode.getPath())) ? myTree.getExpandedHandle() : myTree.getCollapsedHandle()[ FD ]
Line_39 $$ project = findConfigurableProject(node)-->Line_44 $$ if (project != null) [ FD ]
Line_74 $$ if (size.width < width) -->Line_75 $$ size.width = width[ CD ]
Line_29 $$ if (myRoot == parent.getParent()) -->Line_30 $$ project = findConfigurableProject(node)[ CD ]
Line_25 $$ Project project = null-->Line_39 $$ project = findConfigurableProject(node)[ FD ]
Line_44 $$ if (project != null) -->Line_49 $$ myProjectIcon.setVisible(false)[ CD ]
Line_54 $$ if (0 == treeNode.getChildCount()) -->Line_55 $$ nodeIcon = myTree.getEmptyHandle()[ CD ]
Line_65 $$ width += insets.left + insets.right-->Line_74 $$ if (size.width < width) [ FD ]
Line_61 $$ if (node != null && tree.isVisible()) -->Line_73 $$ Dimension size = view.getMinimumSize()[ CD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean focused) -->Line_15 $$ if (!selected && node != null) [ FD ]
Line_15 $$ if (!selected && node != null) -->Line_16 $$ Configurable configurable = node.myConfigurable[ CD ]
Line_71 $$ width = Math.min(width, 300)-->Line_75 $$ size.width = width[ FD ]
Line_52 $$ if (value instanceof DefaultMutableTreeNode) -->Line_53 $$ DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode) value[ CD ]
Line_67 $$ JScrollBar bar = myScroller.getVerticalScrollBar()-->Line_68 $$ if (bar != null && bar.isVisible()) [ FD ]
Line_63 $$ Insets insets = tree.getInsets()-->Line_64 $$ if (insets != null) [ FD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean focused) -->Line_5 $$ MyNode node = extractNode(value)[ FD ]
Line_34 $$ project = findConfigurableProject(configurables[0])-->Line_46 $$ myProjectIcon.setToolTipText(OptionsBundle.message(project.isDefault() ? "configurable.default.project.tooltip" : "configurable.current.project.tooltip"))[ FD ]
Line_55 $$ nodeIcon = myTree.getEmptyHandle()-->Line_57 $$ nodeIcon = myTree.isExpanded(new TreePath(treeNode.getPath())) ? myTree.getExpandedHandle() : myTree.getCollapsedHandle()[ FD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean focused) -->Line_52 $$ if (value instanceof DefaultMutableTreeNode) [ FD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean focused) -->Line_6 $$ if (node == null) [ CD ]
Line_61 $$ if (node != null && tree.isVisible()) -->Line_74 $$ if (size.width < width) [ CD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean focused) -->Line_15 $$ if (!selected && node != null) [ CD ]
Line_30 $$ project = findConfigurableProject(node)-->Line_44 $$ if (project != null) [ FD ]
Line_44 $$ if (project != null) -->Line_47 $$ myProjectIcon.setVisible(true)[ CD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean focused) -->Line_81 $$ return this[ CD ]
Line_16 $$ Configurable configurable = node.myConfigurable-->Line_18 $$ if (myFilter.myContext.getErrors().containsKey(configurable)) [ FD ]
Line_74 $$ if (size.width < width) -->Line_78 $$ view.repaint()[ CD ]
Line_5 $$ MyNode node = extractNode(value)-->Line_30 $$ project = findConfigurableProject(node)[ FD ]
Line_28 $$ if (parent instanceof MyNode) -->Line_29 $$ if (myRoot == parent.getParent()) [ CD ]
Line_62 $$ int width = getLeftMargin(node.myLevel) + getPreferredSize().width-->Line_65 $$ width += insets.left + insets.right[ FD ]
Line_25 $$ Project project = null-->Line_44 $$ if (project != null) [ FD ]
Line_61 $$ if (node != null && tree.isVisible()) -->Line_68 $$ if (bar != null && bar.isVisible()) [ CD ]
Line_65 $$ width += insets.left + insets.right-->Line_71 $$ width = Math.min(width, 300)[ FD ]
Line_61 $$ if (node != null && tree.isVisible()) -->Line_63 $$ Insets insets = tree.getInsets()[ CD ]
Line_5 $$ MyNode node = extractNode(value)-->Line_6 $$ if (node == null) [ FD ]
Line_31 $$ if (node.myConfigurable instanceof SortedConfigurableGroup) -->Line_32 $$ Configurable[] configurables = ((SortedConfigurableGroup) node.myConfigurable).getConfigurables()[ CD ]
Line_72 $$ JComponent view = SettingsTreeView.this-->Line_76 $$ view.setMinimumSize(size)[ FD ]
Line_29 $$ if (myRoot == parent.getParent()) -->Line_31 $$ if (node.myConfigurable instanceof SortedConfigurableGroup) [ CD ]
Line_62 $$ int width = getLeftMargin(node.myLevel) + getPreferredSize().width-->Line_74 $$ if (size.width < width) [ FD ]
Line_30 $$ project = findConfigurableProject(node)-->Line_46 $$ myProjectIcon.setToolTipText(OptionsBundle.message(project.isDefault() ? "configurable.default.project.tooltip" : "configurable.current.project.tooltip"))[ FD ]
