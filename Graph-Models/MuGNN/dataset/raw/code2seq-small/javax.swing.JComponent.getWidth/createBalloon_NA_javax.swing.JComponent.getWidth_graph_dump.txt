Line_46 $$ int maxWidth = JBUI.scale(600)-->Line_49 $$ maxWidth = Math.min(maxWidth, windowComponent.getWidth() - 20)[ FD ]
Line_17 $$ final JPanel content = new NonOpaquePanel(new BorderLayout((int) (label.getIconTextGap() * 1.5), (int) (label.getIconTextGap() * 1.5)))-->Line_35 $$ content.add(BorderLayout.SOUTH, buttons)[ FD ]
Line_42 $$ Dimension preferredSize = text.getPreferredSize()-->Line_43 $$ text.setSize(preferredSize)[ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_44 $$ Dimension paneSize = new Dimension(text.getPreferredSize())[ CD ]
Line_3 $$ final JEditorPane text = new JEditorPane()-->Line_18 $$ if (text.getCaret() != null) [ FD ]
Line_37 $$ JButton button = new JButton(action)-->Line_39 $$ buttons.add(HorizontalLayout.RIGHT, button)[ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_57 $$ builder.setFillColor(new JBColor(Gray._234, Gray._92)).setCloseButtonEnabled(buttons == null).setShowCallout(showCallout).setShadow(false).setHideOnClickOutside(hideOnClickOutside).setHideOnAction(hideOnClickOutside).setHideOnKeyOutside(hideOnClickOutside).setHideOnFrameResize(false).setBorderColor(new JBColor(Gray._180, Gray._110))[ CD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_42 $$ Dimension preferredSize = text.getPreferredSize()[ CD ]
Line_31 $$ if (notification instanceof NotificationActionProvider) -->Line_35 $$ content.add(BorderLayout.SOUTH, buttons)[ CD ]
Line_3 $$ final JEditorPane text = new JEditorPane()-->Line_14 $$ text.setBackground(UIUtil.TRANSPARENT_COLOR)[ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_9 $$ final JLabel label = new JLabel(NotificationsUtil.buildHtml(notification, null))[ FD ]
Line_3 $$ final JEditorPane text = new JEditorPane()-->Line_4 $$ text.setEditorKit(UIUtil.getHTMLEditorKit())[ FD ]
Line_21 $$ JScrollPane pane = new JScrollPane(text)-->Line_24 $$ pane.getViewport().setOpaque(false)[ FD ]
Line_9 $$ final JLabel label = new JLabel(NotificationsUtil.buildHtml(notification, null))-->Line_17 $$ final JPanel content = new NonOpaquePanel(new BorderLayout((int) (label.getIconTextGap() * 1.5), (int) (label.getIconTextGap() * 1.5)))[ FD ]
Line_5 $$ final HyperlinkListener listener = NotificationsUtil.wrapListener(notification)-->Line_36 $$ for (Action action : provider.getActions(listener)) [ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_56 $$ final BalloonBuilder builder = JBPopupFactory.getInstance().createBalloonBuilder(content)[ CD ]
Line_30 $$ JPanel buttons = null-->Line_33 $$ buttons = new JPanel(new HorizontalLayout(5))[ FD ]
Line_3 $$ final JEditorPane text = new JEditorPane()-->Line_10 $$ text.setText(NotificationsUtil.buildHtml(notification, "width:" + Math.min(JBUI.scale(350), label.getPreferredSize().width) + "px;"))[ FD ]
Line_21 $$ JScrollPane pane = new JScrollPane(text)-->Line_25 $$ content.add(pane, BorderLayout.CENTER)[ FD ]
Line_47 $$ if (windowComponent != null) -->Line_48 $$ maxHeight = Math.min(maxHeight, windowComponent.getHeight() - 20)[ CD ]
Line_46 $$ int maxWidth = JBUI.scale(600)-->Line_52 $$ pane.setPreferredSize(new Dimension(Math.min(maxWidth, paneSize.width + UIUtil.getScrollBarWidth()), maxHeight))[ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_22 $$ pane.setBorder(BorderFactory.createEmptyBorder())[ CD ]
Line_30 $$ JPanel buttons = null-->Line_39 $$ buttons.add(HorizontalLayout.RIGHT, button)[ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_12 $$ text.setOpaque(false)[ CD ]
Line_9 $$ final JLabel label = new JLabel(NotificationsUtil.buildHtml(notification, null))-->Line_10 $$ text.setText(NotificationsUtil.buildHtml(notification, "width:" + Math.min(JBUI.scale(350), label.getPreferredSize().width) + "px;"))[ FD ]
Line_47 $$ if (windowComponent != null) -->Line_49 $$ maxWidth = Math.min(maxWidth, windowComponent.getWidth() - 20)[ CD ]
Line_21 $$ JScrollPane pane = new JScrollPane(text)-->Line_52 $$ pane.setPreferredSize(new Dimension(Math.min(maxWidth, paneSize.width + UIUtil.getScrollBarWidth()), maxHeight))[ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_26 $$ final NonOpaquePanel north = new NonOpaquePanel(new BorderLayout())[ CD ]
Line_3 $$ final JEditorPane text = new JEditorPane()-->Line_44 $$ Dimension paneSize = new Dimension(text.getPreferredSize())[ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_9 $$ final JLabel label = new JLabel(NotificationsUtil.buildHtml(notification, null))[ CD ]
Line_51 $$ if (paneSize.height > maxHeight) -->Line_52 $$ pane.setPreferredSize(new Dimension(Math.min(maxWidth, paneSize.width + UIUtil.getScrollBarWidth()), maxHeight))[ CD ]
Line_49 $$ maxWidth = Math.min(maxWidth, windowComponent.getWidth() - 20)-->Line_52 $$ pane.setPreferredSize(new Dimension(Math.min(maxWidth, paneSize.width + UIUtil.getScrollBarWidth()), maxHeight))[ FD ]
Line_31 $$ if (notification instanceof NotificationActionProvider) -->Line_32 $$ NotificationActionProvider provider = (NotificationActionProvider) notification[ CD ]
Line_3 $$ final JEditorPane text = new JEditorPane()-->Line_7 $$ text.addHyperlinkListener(listener)[ FD ]
Line_33 $$ buttons = new JPanel(new HorizontalLayout(5))-->Line_34 $$ buttons.setOpaque(false)[ FD ]
Line_26 $$ final NonOpaquePanel north = new NonOpaquePanel(new BorderLayout())-->Line_28 $$ content.add(north, BorderLayout.WEST)[ FD ]
Line_33 $$ buttons = new JPanel(new HorizontalLayout(5))-->Line_35 $$ content.add(BorderLayout.SOUTH, buttons)[ FD ]
Line_21 $$ JScrollPane pane = new JScrollPane(text)-->Line_54 $$ pane.setPreferredSize(new Dimension(maxWidth, paneSize.height + UIUtil.getScrollBarWidth()))[ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_51 $$ if (paneSize.height > maxHeight) [ CD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_30 $$ JPanel buttons = null[ CD ]
Line_5 $$ final HyperlinkListener listener = NotificationsUtil.wrapListener(notification)-->Line_7 $$ text.addHyperlinkListener(listener)[ FD ]
Line_49 $$ maxWidth = Math.min(maxWidth, windowComponent.getWidth() - 20)-->Line_53 $$ if (paneSize.width > maxWidth) [ FD ]
Line_58 $$ final Balloon balloon = builder.createBalloon()-->Line_60 $$ notification.setBalloon(balloon)[ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_60 $$ notification.setBalloon(balloon)[ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_16 $$ text.setBorder(null)[ CD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_27 $$ north.add(new JLabel(NotificationsUtil.getIcon(notification)), BorderLayout.NORTH)[ CD ]
Line_6 $$ if (listener != null) -->Line_7 $$ text.addHyperlinkListener(listener)[ CD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_10 $$ text.setText(NotificationsUtil.buildHtml(notification, "width:" + Math.min(JBUI.scale(350), label.getPreferredSize().width) + "px;"))[ CD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_49 $$ maxWidth = Math.min(maxWidth, windowComponent.getWidth() - 20)[ FD ]
Line_37 $$ JButton button = new JButton(action)-->Line_38 $$ button.setOpaque(false)[ FD ]
Line_33 $$ buttons = new JPanel(new HorizontalLayout(5))-->Line_39 $$ buttons.add(HorizontalLayout.RIGHT, button)[ FD ]
Line_58 $$ final Balloon balloon = builder.createBalloon()-->Line_59 $$ balloon.setAnimationEnabled(false)[ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_47 $$ if (windowComponent != null) [ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_21 $$ JScrollPane pane = new JScrollPane(text)[ CD ]
Line_56 $$ final BalloonBuilder builder = JBPopupFactory.getInstance().createBalloonBuilder(content)-->Line_57 $$ builder.setFillColor(new JBColor(Gray._234, Gray._92)).setCloseButtonEnabled(buttons == null).setShowCallout(showCallout).setShadow(false).setHideOnClickOutside(hideOnClickOutside).setHideOnAction(hideOnClickOutside).setHideOnKeyOutside(hideOnClickOutside).setHideOnFrameResize(false).setBorderColor(new JBColor(Gray._180, Gray._110))[ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_31 $$ if (notification instanceof NotificationActionProvider) [ CD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_61 $$ return balloon[ CD ]
Line_17 $$ final JPanel content = new NonOpaquePanel(new BorderLayout((int) (label.getIconTextGap() * 1.5), (int) (label.getIconTextGap() * 1.5)))-->Line_56 $$ final BalloonBuilder builder = JBPopupFactory.getInstance().createBalloonBuilder(content)[ FD ]
Line_45 $$ int maxHeight = JBUI.scale(400)-->Line_51 $$ if (paneSize.height > maxHeight) [ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_58 $$ final Balloon balloon = builder.createBalloon()[ CD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_47 $$ if (windowComponent != null) [ CD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_25 $$ content.add(pane, BorderLayout.CENTER)[ CD ]
Line_21 $$ JScrollPane pane = new JScrollPane(text)-->Line_22 $$ pane.setBorder(BorderFactory.createEmptyBorder())[ FD ]
Line_45 $$ int maxHeight = JBUI.scale(400)-->Line_48 $$ maxHeight = Math.min(maxHeight, windowComponent.getHeight() - 20)[ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_24 $$ pane.getViewport().setOpaque(false)[ CD ]
Line_3 $$ final JEditorPane text = new JEditorPane()-->Line_43 $$ text.setSize(preferredSize)[ FD ]
Line_3 $$ final JEditorPane text = new JEditorPane()-->Line_16 $$ text.setBorder(null)[ FD ]
Line_17 $$ final JPanel content = new NonOpaquePanel(new BorderLayout((int) (label.getIconTextGap() * 1.5), (int) (label.getIconTextGap() * 1.5)))-->Line_29 $$ content.setBorder(new EmptyBorder(2, 4, 2, 4))[ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_6 $$ if (listener != null) [ CD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_48 $$ maxHeight = Math.min(maxHeight, windowComponent.getHeight() - 20)[ FD ]
Line_3 $$ final JEditorPane text = new JEditorPane()-->Line_12 $$ text.setOpaque(false)[ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_17 $$ final JPanel content = new NonOpaquePanel(new BorderLayout((int) (label.getIconTextGap() * 1.5), (int) (label.getIconTextGap() * 1.5)))[ CD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_11 $$ text.setEditable(false)[ CD ]
Line_3 $$ final JEditorPane text = new JEditorPane()-->Line_19 $$ text.setCaretPosition(0)[ FD ]
Line_5 $$ final HyperlinkListener listener = NotificationsUtil.wrapListener(notification)-->Line_6 $$ if (listener != null) [ FD ]
Line_3 $$ final JEditorPane text = new JEditorPane()-->Line_11 $$ text.setEditable(false)[ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_4 $$ text.setEditorKit(UIUtil.getHTMLEditorKit())[ CD ]
Line_13 $$ if (UIUtil.isUnderNimbusLookAndFeel()) -->Line_14 $$ text.setBackground(UIUtil.TRANSPARENT_COLOR)[ CD ]
Line_46 $$ int maxWidth = JBUI.scale(600)-->Line_53 $$ if (paneSize.width > maxWidth) [ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_10 $$ text.setText(NotificationsUtil.buildHtml(notification, "width:" + Math.min(JBUI.scale(350), label.getPreferredSize().width) + "px;"))[ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_57 $$ builder.setFillColor(new JBColor(Gray._234, Gray._92)).setCloseButtonEnabled(buttons == null).setShowCallout(showCallout).setShadow(false).setHideOnClickOutside(hideOnClickOutside).setHideOnAction(hideOnClickOutside).setHideOnKeyOutside(hideOnClickOutside).setHideOnFrameResize(false).setBorderColor(new JBColor(Gray._180, Gray._110))[ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_13 $$ if (UIUtil.isUnderNimbusLookAndFeel()) [ CD ]
Line_30 $$ JPanel buttons = null-->Line_35 $$ content.add(BorderLayout.SOUTH, buttons)[ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_5 $$ final HyperlinkListener listener = NotificationsUtil.wrapListener(notification)[ FD ]
Line_31 $$ if (notification instanceof NotificationActionProvider) -->Line_34 $$ buttons.setOpaque(false)[ CD ]
Line_48 $$ maxHeight = Math.min(maxHeight, windowComponent.getHeight() - 20)-->Line_51 $$ if (paneSize.height > maxHeight) [ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_31 $$ if (notification instanceof NotificationActionProvider) [ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_43 $$ text.setSize(preferredSize)[ CD ]
Line_31 $$ if (notification instanceof NotificationActionProvider) -->Line_33 $$ buttons = new JPanel(new HorizontalLayout(5))[ CD ]
Line_32 $$ NotificationActionProvider provider = (NotificationActionProvider) notification-->Line_36 $$ for (Action action : provider.getActions(listener)) [ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_46 $$ int maxWidth = JBUI.scale(600)[ CD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_27 $$ north.add(new JLabel(NotificationsUtil.getIcon(notification)), BorderLayout.NORTH)[ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_59 $$ balloon.setAnimationEnabled(false)[ CD ]
Line_56 $$ final BalloonBuilder builder = JBPopupFactory.getInstance().createBalloonBuilder(content)-->Line_58 $$ final Balloon balloon = builder.createBalloon()[ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_5 $$ final HyperlinkListener listener = NotificationsUtil.wrapListener(notification)[ CD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_45 $$ int maxHeight = JBUI.scale(400)[ CD ]
Line_30 $$ JPanel buttons = null-->Line_34 $$ buttons.setOpaque(false)[ FD ]
Line_18 $$ if (text.getCaret() != null) -->Line_19 $$ text.setCaretPosition(0)[ CD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_28 $$ content.add(north, BorderLayout.WEST)[ CD ]
Line_53 $$ if (paneSize.width > maxWidth) -->Line_54 $$ pane.setPreferredSize(new Dimension(maxWidth, paneSize.height + UIUtil.getScrollBarWidth()))[ CD ]
Line_3 $$ final JEditorPane text = new JEditorPane()-->Line_42 $$ Dimension preferredSize = text.getPreferredSize()[ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_60 $$ notification.setBalloon(balloon)[ CD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_23 $$ pane.setOpaque(false)[ CD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_18 $$ if (text.getCaret() != null) [ CD ]
Line_51 $$ if (paneSize.height > maxHeight) -->Line_53 $$ if (paneSize.width > maxWidth) [ CD ]
Line_21 $$ JScrollPane pane = new JScrollPane(text)-->Line_23 $$ pane.setOpaque(false)[ FD ]
Line_26 $$ final NonOpaquePanel north = new NonOpaquePanel(new BorderLayout())-->Line_27 $$ north.add(new JLabel(NotificationsUtil.getIcon(notification)), BorderLayout.NORTH)[ FD ]
Line_17 $$ final JPanel content = new NonOpaquePanel(new BorderLayout((int) (label.getIconTextGap() * 1.5), (int) (label.getIconTextGap() * 1.5)))-->Line_25 $$ content.add(pane, BorderLayout.CENTER)[ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_29 $$ content.setBorder(new EmptyBorder(2, 4, 2, 4))[ CD ]
Line_17 $$ final JPanel content = new NonOpaquePanel(new BorderLayout((int) (label.getIconTextGap() * 1.5), (int) (label.getIconTextGap() * 1.5)))-->Line_28 $$ content.add(north, BorderLayout.WEST)[ FD ]
Line_2 $$ public static Balloon createBalloon(@Nullable final JComponent windowComponent, final Notification notification, final boolean showCallout, final boolean hideOnClickOutside) -->Line_3 $$ final JEditorPane text = new JEditorPane()[ CD ]
