Line_3 $$ if (LOG.isTraceEnabled()) -->Line_4 $$ LOG.trace(this + ": " + caller + " starting sendCallback for fd " + fd)[ CD ]
Line_6 $$ Entry entry = entries.get(fd)-->Line_9 $$ if (entry.getHandler().handle(sock)) [ FD ]
Line_9 $$ if (entry.getHandler().handle(sock)) -->Line_25 $$ fdSet.remove(fd)[ CD ]
Line_9 $$ if (entry.getHandler().handle(sock)) -->Line_27 $$ if (LOG.isTraceEnabled()) [ CD ]
Line_27 $$ if (LOG.isTraceEnabled()) -->Line_28 $$ LOG.trace(this + ": " + caller + ": sendCallback not " + "closing fd " + fd)[ CD ]
Line_2 $$ private void sendCallback(String caller, TreeMap<Integer, Entry> entries, FdSet fdSet, int fd) -->Line_24 $$ entries.remove(fd)[ FD ]
Line_2 $$ private void sendCallback(String caller, TreeMap<Integer, Entry> entries, FdSet fdSet, int fd) -->Line_7 $$ Preconditions.checkNotNull(entry, this + ": fdSet contained " + fd + ", which we were " + "not tracking.")[ CD ]
Line_8 $$ DomainSocket sock = entry.getDomainSocket()-->Line_23 $$ IOUtils.cleanup(LOG, sock)[ FD ]
Line_2 $$ private void sendCallback(String caller, TreeMap<Integer, Entry> entries, FdSet fdSet, int fd) -->Line_13 $$ if (toRemove.remove(fd) != null) [ FD ]
Line_2 $$ private void sendCallback(String caller, TreeMap<Integer, Entry> entries, FdSet fdSet, int fd) -->Line_6 $$ Entry entry = entries.get(fd)[ CD ]
Line_8 $$ DomainSocket sock = entry.getDomainSocket()-->Line_9 $$ if (entry.getHandler().handle(sock)) [ FD ]
Line_2 $$ private void sendCallback(String caller, TreeMap<Integer, Entry> entries, FdSet fdSet, int fd) -->Line_8 $$ DomainSocket sock = entry.getDomainSocket()[ CD ]
Line_2 $$ private void sendCallback(String caller, TreeMap<Integer, Entry> entries, FdSet fdSet, int fd) -->Line_6 $$ Entry entry = entries.get(fd)[ FD ]
Line_9 $$ if (entry.getHandler().handle(sock)) -->Line_23 $$ IOUtils.cleanup(LOG, sock)[ CD ]
Line_9 $$ if (entry.getHandler().handle(sock)) -->Line_13 $$ if (toRemove.remove(fd) != null) [ CD ]
Line_2 $$ private void sendCallback(String caller, TreeMap<Integer, Entry> entries, FdSet fdSet, int fd) -->Line_9 $$ if (entry.getHandler().handle(sock)) [ CD ]
Line_14 $$ if (LOG.isTraceEnabled()) -->Line_15 $$ LOG.trace(this + ": " + caller + " : sendCallback processed fd " + fd + " in toRemove.")[ CD ]
Line_13 $$ if (toRemove.remove(fd) != null) -->Line_14 $$ if (LOG.isTraceEnabled()) [ CD ]
Line_6 $$ Entry entry = entries.get(fd)-->Line_7 $$ Preconditions.checkNotNull(entry, this + ": fdSet contained " + fd + ", which we were " + "not tracking.")[ FD ]
Line_2 $$ private void sendCallback(String caller, TreeMap<Integer, Entry> entries, FdSet fdSet, int fd) -->Line_3 $$ if (LOG.isTraceEnabled()) [ CD ]
Line_2 $$ private void sendCallback(String caller, TreeMap<Integer, Entry> entries, FdSet fdSet, int fd) -->Line_25 $$ fdSet.remove(fd)[ FD ]
Line_9 $$ if (entry.getHandler().handle(sock)) -->Line_10 $$ if (LOG.isTraceEnabled()) [ CD ]
Line_10 $$ if (LOG.isTraceEnabled()) -->Line_11 $$ LOG.trace(this + ": " + caller + ": closing fd " + fd + " at the request of the handler.")[ CD ]
Line_6 $$ Entry entry = entries.get(fd)-->Line_8 $$ DomainSocket sock = entry.getDomainSocket()[ FD ]
Line_9 $$ if (entry.getHandler().handle(sock)) -->Line_24 $$ entries.remove(fd)[ CD ]
