Line_15 $$ Injector injector = WebAppTests.testPage(AggregatedLogsPage.class, AppContext.class, ctx, params, new AbstractModule() -->Line_20 $$ PrintWriter spyPw = WebAppTests.getPrintWriter(injector)[ FD ]
Line_6 $$ final Configuration conf = new YarnConfiguration()-->Line_17 $$ bind(Configuration.class).toInstance(conf)[ FD ]
Line_2 $$ public void testLogsViewSingle() throws IOException -->Line_8 $$ params.put("start", "-2048")[ CD ]
Line_5 $$ Map<String, String> params = new HashMap<String, String>()-->Line_8 $$ params.put("start", "-2048")[ FD ]
Line_2 $$ public void testLogsViewSingle() throws IOException -->Line_11 $$ params.put(CONTAINER_ID, MRApp.newContainerId(1, 1, 333, 1).toString())[ CD ]
Line_2 $$ public void testLogsViewSingle() throws IOException -->Line_7 $$ conf.setBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED, true)[ CD ]
Line_5 $$ Map<String, String> params = new HashMap<String, String>()-->Line_14 $$ params.put(APP_OWNER, "owner")[ FD ]
Line_2 $$ public void testLogsViewSingle() throws IOException -->Line_5 $$ Map<String, String> params = new HashMap<String, String>()[ CD ]
Line_2 $$ public void testLogsViewSingle() throws IOException -->Line_14 $$ params.put(APP_OWNER, "owner")[ CD ]
Line_6 $$ final Configuration conf = new YarnConfiguration()-->Line_7 $$ conf.setBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED, true)[ FD ]
Line_2 $$ public void testLogsViewSingle() throws IOException -->Line_6 $$ final Configuration conf = new YarnConfiguration()[ CD ]
Line_4 $$ MockAppContext ctx = new MockAppContext(0, 1, 1, 1)-->Line_15 $$ Injector injector = WebAppTests.testPage(AggregatedLogsPage.class, AppContext.class, ctx, params, new AbstractModule() [ FD ]
Line_5 $$ Map<String, String> params = new HashMap<String, String>()-->Line_12 $$ params.put(NM_NODENAME, NodeId.newInstance(MockJobs.NM_HOST, MockJobs.NM_PORT).toString())[ FD ]
Line_2 $$ public void testLogsViewSingle() throws IOException -->Line_13 $$ params.put(ENTITY_STRING, "container_10_0001_01_000001")[ CD ]
Line_15 $$ Injector injector = WebAppTests.testPage(AggregatedLogsPage.class, AppContext.class, ctx, params, new AbstractModule() -->Line_17 $$ bind(Configuration.class).toInstance(conf)[ CD ]
Line_2 $$ public void testLogsViewSingle() throws IOException -->Line_20 $$ PrintWriter spyPw = WebAppTests.getPrintWriter(injector)[ CD ]
Line_2 $$ public void testLogsViewSingle() throws IOException -->Line_9 $$ params.put("end", "-1024")[ CD ]
Line_5 $$ Map<String, String> params = new HashMap<String, String>()-->Line_9 $$ params.put("end", "-1024")[ FD ]
Line_5 $$ Map<String, String> params = new HashMap<String, String>()-->Line_11 $$ params.put(CONTAINER_ID, MRApp.newContainerId(1, 1, 333, 1).toString())[ FD ]
Line_2 $$ public void testLogsViewSingle() throws IOException -->Line_10 $$ params.put(CONTAINER_LOG_TYPE, "syslog")[ CD ]
Line_5 $$ Map<String, String> params = new HashMap<String, String>()-->Line_13 $$ params.put(ENTITY_STRING, "container_10_0001_01_000001")[ FD ]
Line_2 $$ public void testLogsViewSingle() throws IOException -->Line_3 $$ LOG.info("HsLogsPage with params for single log and data limits")[ CD ]
Line_2 $$ public void testLogsViewSingle() throws IOException -->Line_21 $$ verify(spyPw).write("Logs not available for container_10_0001_01_000001." + " Aggregation may not be complete, " + "Check back later or try the nodemanager at " + MockJobs.NM_HOST + ":" + MockJobs.NM_PORT)[ CD ]
Line_2 $$ public void testLogsViewSingle() throws IOException -->Line_12 $$ params.put(NM_NODENAME, NodeId.newInstance(MockJobs.NM_HOST, MockJobs.NM_PORT).toString())[ CD ]
Line_2 $$ public void testLogsViewSingle() throws IOException -->Line_4 $$ MockAppContext ctx = new MockAppContext(0, 1, 1, 1)[ CD ]
Line_2 $$ public void testLogsViewSingle() throws IOException -->Line_15 $$ Injector injector = WebAppTests.testPage(AggregatedLogsPage.class, AppContext.class, ctx, params, new AbstractModule() [ CD ]
Line_5 $$ Map<String, String> params = new HashMap<String, String>()-->Line_10 $$ params.put(CONTAINER_LOG_TYPE, "syslog")[ FD ]
Line_5 $$ Map<String, String> params = new HashMap<String, String>()-->Line_15 $$ Injector injector = WebAppTests.testPage(AggregatedLogsPage.class, AppContext.class, ctx, params, new AbstractModule() [ FD ]
