Line_6 $$ ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter()-->Line_17 $$ output.write(writer.writeValueAsString(rack) + EOL)[ FD ]
Line_3 $$ Writer output = new FileWriter(outputFile)-->Line_20 $$ output.close()[ FD ]
Line_8 $$ Map rack = new LinkedHashMap()-->Line_9 $$ rack.put("rack", entry.getKey())[ FD ]
Line_5 $$ ObjectMapper mapper = new ObjectMapper()-->Line_6 $$ ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter()[ FD ]
Line_10 $$ List nodes = new ArrayList()-->Line_14 $$ nodes.add(node)[ FD ]
Line_12 $$ Map node = new LinkedHashMap()-->Line_14 $$ nodes.add(node)[ FD ]
Line_8 $$ Map rack = new LinkedHashMap()-->Line_16 $$ rack.put("nodes", nodes)[ FD ]
Line_2 $$ private static void generateSLSNodeFile(String outputFile) throws IOException -->Line_3 $$ Writer output = new FileWriter(outputFile)[ CD ]
Line_8 $$ Map rack = new LinkedHashMap()-->Line_17 $$ output.write(writer.writeValueAsString(rack) + EOL)[ FD ]
Line_3 $$ Writer output = new FileWriter(outputFile)-->Line_17 $$ output.write(writer.writeValueAsString(rack) + EOL)[ FD ]
Line_10 $$ List nodes = new ArrayList()-->Line_16 $$ rack.put("nodes", nodes)[ FD ]
Line_12 $$ Map node = new LinkedHashMap()-->Line_13 $$ node.put("node", name)[ FD ]
Line_7 $$ for (Map.Entry<String, Set<String>> entry : rackNodeMap.entrySet()) -->Line_9 $$ rack.put("rack", entry.getKey())[ FD ]
Line_7 $$ for (Map.Entry<String, Set<String>> entry : rackNodeMap.entrySet()) -->Line_11 $$ for (String name : entry.getValue()) [ FD ]
Line_11 $$ for (String name : entry.getValue()) -->Line_13 $$ node.put("node", name)[ FD ]
