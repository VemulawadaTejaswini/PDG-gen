Line_2 $$ public void testRegisterNotificationListenerForNonExistentMBean() throws Exception -->Line_9 $$ listeners.put("spring:type=Test", dummyListener)[ CD ]
Line_4 $$ NotificationListener dummyListener = new NotificationListener() -->Line_9 $$ listeners.put("spring:type=Test", dummyListener)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerForNonExistentMBean() throws Exception -->Line_11 $$ exporter.setBeans(getBeanMap())[ CD ]
Line_3 $$ Map<String, NotificationListener> listeners = new HashMap<String, NotificationListener>()-->Line_13 $$ exporter.setNotificationListenerMappings(listeners)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerForNonExistentMBean() throws Exception -->Line_4 $$ NotificationListener dummyListener = new NotificationListener() [ CD ]
Line_2 $$ public void testRegisterNotificationListenerForNonExistentMBean() throws Exception -->Line_13 $$ exporter.setNotificationListenerMappings(listeners)[ CD ]
Line_2 $$ public void testRegisterNotificationListenerForNonExistentMBean() throws Exception -->Line_3 $$ Map<String, NotificationListener> listeners = new HashMap<String, NotificationListener>()[ CD ]
Line_3 $$ Map<String, NotificationListener> listeners = new HashMap<String, NotificationListener>()-->Line_9 $$ listeners.put("spring:type=Test", dummyListener)[ FD ]
Line_2 $$ public void testRegisterNotificationListenerForNonExistentMBean() throws Exception -->Line_12 $$ exporter.setServer(server)[ CD ]
