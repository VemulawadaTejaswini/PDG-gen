Line_4 $$ if (virtualEnvRoot != null) -->Line_7 $$ if (!bin.exists()) [ CD ]
Line_14 $$ pathValue = PythonEnvUtil.appendToPathEnvVar(env.get(PATH), virtualenvBin)-->Line_18 $$ pathValue = virtualenvBin[ FD ]
Line_8 $$ bin = new File(virtualEnvRoot, "Scripts")-->Line_10 $$ String virtualenvBin = bin.getPath()[ FD ]
Line_14 $$ pathValue = PythonEnvUtil.appendToPathEnvVar(env.get(PATH), virtualenvBin)-->Line_20 $$ env.put(PATH, pathValue)[ FD ]
Line_18 $$ pathValue = virtualenvBin-->Line_20 $$ env.put(PATH, pathValue)[ FD ]
Line_10 $$ String virtualenvBin = bin.getPath()-->Line_18 $$ pathValue = virtualenvBin[ FD ]
Line_4 $$ if (virtualEnvRoot != null) -->Line_10 $$ String virtualenvBin = bin.getPath()[ CD ]
Line_3 $$ File virtualEnvRoot = getVirtualEnvRoot(sdkHome)-->Line_4 $$ if (virtualEnvRoot != null) [ FD ]
Line_11 $$ Map<String, String> env = commandLine.getEnvironment()-->Line_14 $$ pathValue = PythonEnvUtil.appendToPathEnvVar(env.get(PATH), virtualenvBin)[ FD ]
Line_6 $$ File bin = new File(virtualEnvRoot, "bin")-->Line_7 $$ if (!bin.exists()) [ FD ]
Line_5 $$ final String PATH = "PATH"-->Line_14 $$ pathValue = PythonEnvUtil.appendToPathEnvVar(env.get(PATH), virtualenvBin)[ FD ]
Line_15 $$ if (passParentEnvironment) -->Line_18 $$ pathValue = virtualenvBin[ CD ]
Line_5 $$ final String PATH = "PATH"-->Line_20 $$ env.put(PATH, pathValue)[ FD ]
Line_2 $$ public static void patchCommandLineForVirtualenv(GeneralCommandLine commandLine, String sdkHome, boolean passParentEnvironment) -->Line_3 $$ File virtualEnvRoot = getVirtualEnvRoot(sdkHome)[ CD ]
Line_10 $$ String virtualenvBin = bin.getPath()-->Line_16 $$ pathValue = PythonEnvUtil.appendToPathEnvVar(System.getenv(PATH), virtualenvBin)[ FD ]
Line_4 $$ if (virtualEnvRoot != null) -->Line_11 $$ Map<String, String> env = commandLine.getEnvironment()[ CD ]
Line_5 $$ final String PATH = "PATH"-->Line_13 $$ if (env.containsKey(PATH)) [ FD ]
Line_10 $$ String virtualenvBin = bin.getPath()-->Line_14 $$ pathValue = PythonEnvUtil.appendToPathEnvVar(env.get(PATH), virtualenvBin)[ FD ]
Line_4 $$ if (virtualEnvRoot != null) -->Line_20 $$ env.put(PATH, pathValue)[ CD ]
Line_5 $$ final String PATH = "PATH"-->Line_16 $$ pathValue = PythonEnvUtil.appendToPathEnvVar(System.getenv(PATH), virtualenvBin)[ FD ]
Line_2 $$ public static void patchCommandLineForVirtualenv(GeneralCommandLine commandLine, String sdkHome, boolean passParentEnvironment) -->Line_3 $$ File virtualEnvRoot = getVirtualEnvRoot(sdkHome)[ FD ]
Line_15 $$ if (passParentEnvironment) -->Line_16 $$ pathValue = PythonEnvUtil.appendToPathEnvVar(System.getenv(PATH), virtualenvBin)[ CD ]
Line_13 $$ if (env.containsKey(PATH)) -->Line_14 $$ pathValue = PythonEnvUtil.appendToPathEnvVar(env.get(PATH), virtualenvBin)[ CD ]
Line_4 $$ if (virtualEnvRoot != null) -->Line_12 $$ String pathValue[ CD ]
Line_12 $$ String pathValue-->Line_16 $$ pathValue = PythonEnvUtil.appendToPathEnvVar(System.getenv(PATH), virtualenvBin)[ FD ]
Line_12 $$ String pathValue-->Line_20 $$ env.put(PATH, pathValue)[ FD ]
Line_16 $$ pathValue = PythonEnvUtil.appendToPathEnvVar(System.getenv(PATH), virtualenvBin)-->Line_20 $$ env.put(PATH, pathValue)[ FD ]
Line_11 $$ Map<String, String> env = commandLine.getEnvironment()-->Line_13 $$ if (env.containsKey(PATH)) [ FD ]
Line_2 $$ public static void patchCommandLineForVirtualenv(GeneralCommandLine commandLine, String sdkHome, boolean passParentEnvironment) -->Line_4 $$ if (virtualEnvRoot != null) [ CD ]
Line_2 $$ public static void patchCommandLineForVirtualenv(GeneralCommandLine commandLine, String sdkHome, boolean passParentEnvironment) -->Line_13 $$ if (env.containsKey(PATH)) [ FD ]
Line_12 $$ String pathValue-->Line_14 $$ pathValue = PythonEnvUtil.appendToPathEnvVar(env.get(PATH), virtualenvBin)[ FD ]
Line_11 $$ Map<String, String> env = commandLine.getEnvironment()-->Line_20 $$ env.put(PATH, pathValue)[ FD ]
Line_6 $$ File bin = new File(virtualEnvRoot, "bin")-->Line_8 $$ bin = new File(virtualEnvRoot, "Scripts")[ FD ]
Line_4 $$ if (virtualEnvRoot != null) -->Line_13 $$ if (env.containsKey(PATH)) [ CD ]
Line_16 $$ pathValue = PythonEnvUtil.appendToPathEnvVar(System.getenv(PATH), virtualenvBin)-->Line_18 $$ pathValue = virtualenvBin[ FD ]
Line_7 $$ if (!bin.exists()) -->Line_8 $$ bin = new File(virtualEnvRoot, "Scripts")[ CD ]
Line_12 $$ String pathValue-->Line_18 $$ pathValue = virtualenvBin[ FD ]
Line_14 $$ pathValue = PythonEnvUtil.appendToPathEnvVar(env.get(PATH), virtualenvBin)-->Line_16 $$ pathValue = PythonEnvUtil.appendToPathEnvVar(System.getenv(PATH), virtualenvBin)[ FD ]
Line_4 $$ if (virtualEnvRoot != null) -->Line_5 $$ final String PATH = "PATH"[ CD ]
Line_2 $$ public static void patchCommandLineForVirtualenv(GeneralCommandLine commandLine, String sdkHome, boolean passParentEnvironment) -->Line_11 $$ Map<String, String> env = commandLine.getEnvironment()[ FD ]
Line_6 $$ File bin = new File(virtualEnvRoot, "bin")-->Line_10 $$ String virtualenvBin = bin.getPath()[ FD ]
Line_13 $$ if (env.containsKey(PATH)) -->Line_15 $$ if (passParentEnvironment) [ CD ]
Line_4 $$ if (virtualEnvRoot != null) -->Line_6 $$ File bin = new File(virtualEnvRoot, "bin")[ CD ]
