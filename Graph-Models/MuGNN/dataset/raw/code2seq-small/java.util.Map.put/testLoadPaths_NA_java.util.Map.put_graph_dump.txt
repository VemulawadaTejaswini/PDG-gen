Line_3 $$ final Map<Path, Path> mergedPaths = new HashMap()-->Line_26 $$ mergedPaths.put(runtimePath2, mappedRuntimePath2)[ FD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_18 $$ mergedPaths.put(bootstrapPath3, mappedBootstrapPath3)[ CD ]
Line_28 $$ NettyFabricWorkerExecutionChannelHandler nettyFabricWorkerExecutionChannelHandler = new NettyFabricWorkerExecutionChannelHandler(new MockRepository<Channel>("repository") -->Line_42 $$ NoticeableFuture<LoadedPaths> noticeableFuture = nettyFabricWorkerExecutionChannelHandler.loadPaths(_embeddedChannel, new NettyFabricWorkerConfig<Serializable>(0, processConfig, processCallable, fabricPathMappingVisitor.getPathMap()))[ FD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_50 $$ Assert.assertEquals(mappedRuntimePath1 + File.pathSeparator + mappedRuntimePath2 + File.pathSeparator + mappedRuntimePath3, processConfig.getRuntimeClassPath())[ CD ]
Line_6 $$ Path inputPath2 = Paths.get("inputPaths2")-->Line_9 $$ mergedPaths.put(inputPath2, mappedInputPath2)[ FD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_3 $$ final Map<Path, Path> mergedPaths = new HashMap()[ CD ]
Line_4 $$ Path inputPath1 = Paths.get("inputPaths1")-->Line_8 $$ mergedPaths.put(inputPath1, mappedInputPath1)[ FD ]
Line_10 $$ Path bootstrapPath1 = Paths.get("bootstrapPath1")-->Line_16 $$ mergedPaths.put(bootstrapPath1, mappedBootstrapPath1)[ FD ]
Line_5 $$ Path mappedInputPath1 = Paths.get("mappedInputPath1")-->Line_8 $$ mergedPaths.put(inputPath1, mappedInputPath1)[ FD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_10 $$ Path bootstrapPath1 = Paths.get("bootstrapPath1")[ CD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_23 $$ Path runtimePath3 = Paths.get("runtimePath3")[ CD ]
Line_3 $$ final Map<Path, Path> mergedPaths = new HashMap()-->Line_17 $$ mergedPaths.put(bootstrapPath2, mappedBootstrapPath2)[ FD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_19 $$ Path runtimePath1 = Paths.get("runtimePath1")[ CD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_20 $$ Path mappedRuntimePath1 = Paths.get("mappedRuntimePath1")[ CD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_41 $$ ObjectGraphUtil.walkObjectGraph(processCallable, fabricPathMappingVisitor)[ CD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_47 $$ Assert.assertEquals(mappedInputPath2, loadedInputPaths.get(inputPath2))[ CD ]
Line_3 $$ final Map<Path, Path> mergedPaths = new HashMap()-->Line_9 $$ mergedPaths.put(inputPath2, mappedInputPath2)[ FD ]
Line_14 $$ Path bootstrapPath3 = Paths.get("bootstrapPath3")-->Line_18 $$ mergedPaths.put(bootstrapPath3, mappedBootstrapPath3)[ FD ]
Line_6 $$ Path inputPath2 = Paths.get("inputPaths2")-->Line_47 $$ Assert.assertEquals(mappedInputPath2, loadedInputPaths.get(inputPath2))[ FD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_6 $$ Path inputPath2 = Paths.get("inputPaths2")[ CD ]
Line_3 $$ final Map<Path, Path> mergedPaths = new HashMap()-->Line_27 $$ mergedPaths.put(runtimePath3, mappedRuntimePath3)[ FD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_17 $$ mergedPaths.put(bootstrapPath2, mappedBootstrapPath2)[ CD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_45 $$ Assert.assertEquals(2, loadedInputPaths.size())[ CD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_14 $$ Path bootstrapPath3 = Paths.get("bootstrapPath3")[ CD ]
Line_4 $$ Path inputPath1 = Paths.get("inputPaths1")-->Line_46 $$ Assert.assertEquals(mappedInputPath1, loadedInputPaths.get(inputPath1))[ FD ]
Line_21 $$ Path runtimePath2 = Paths.get("runtimePath2")-->Line_26 $$ mergedPaths.put(runtimePath2, mappedRuntimePath2)[ FD ]
Line_4 $$ Path inputPath1 = Paths.get("inputPaths1")-->Line_39 $$ ProcessCallable<Serializable> processCallable = new LoadPathProcessCallable(inputPath1.toFile(), inputPath2.toFile())[ FD ]
Line_20 $$ Path mappedRuntimePath1 = Paths.get("mappedRuntimePath1")-->Line_25 $$ mergedPaths.put(runtimePath1, mappedRuntimePath1)[ FD ]
Line_28 $$ NettyFabricWorkerExecutionChannelHandler nettyFabricWorkerExecutionChannelHandler = new NettyFabricWorkerExecutionChannelHandler(new MockRepository<Channel>("repository") -->Line_32 $$ return defaultNoticeableFuture[ CD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_46 $$ Assert.assertEquals(mappedInputPath1, loadedInputPaths.get(inputPath1))[ CD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_49 $$ Assert.assertEquals(mappedBootstrapPath1 + File.pathSeparator + mappedBootstrapPath2 + File.pathSeparator + mappedBootstrapPath3, processConfig.getBootstrapClassPath())[ CD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_38 $$ ProcessConfig processConfig = builder.build()[ CD ]
Line_28 $$ NettyFabricWorkerExecutionChannelHandler nettyFabricWorkerExecutionChannelHandler = new NettyFabricWorkerExecutionChannelHandler(new MockRepository<Channel>("repository") -->Line_31 $$ defaultNoticeableFuture.set(mergedPaths)[ CD ]
Line_28 $$ NettyFabricWorkerExecutionChannelHandler nettyFabricWorkerExecutionChannelHandler = new NettyFabricWorkerExecutionChannelHandler(new MockRepository<Channel>("repository") -->Line_30 $$ DefaultNoticeableFuture<Map<Path, Path>> defaultNoticeableFuture = new DefaultNoticeableFuture()[ CD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_36 $$ builder.setBootstrapClassPath(bootstrapPath1 + File.pathSeparator + bootstrapPath2 + File.pathSeparator + bootstrapPath3)[ CD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_24 $$ Path mappedRuntimePath3 = Paths.get("mappedRuntimePath3")[ CD ]
Line_3 $$ final Map<Path, Path> mergedPaths = new HashMap()-->Line_31 $$ defaultNoticeableFuture.set(mergedPaths)[ FD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_13 $$ Path mappedBootstrapPath2 = Paths.get("mappedBootstrapPath2")[ CD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_4 $$ Path inputPath1 = Paths.get("inputPaths1")[ CD ]
Line_3 $$ final Map<Path, Path> mergedPaths = new HashMap()-->Line_16 $$ mergedPaths.put(bootstrapPath1, mappedBootstrapPath1)[ FD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_16 $$ mergedPaths.put(bootstrapPath1, mappedBootstrapPath1)[ CD ]
Line_3 $$ final Map<Path, Path> mergedPaths = new HashMap()-->Line_18 $$ mergedPaths.put(bootstrapPath3, mappedBootstrapPath3)[ FD ]
Line_3 $$ final Map<Path, Path> mergedPaths = new HashMap()-->Line_8 $$ mergedPaths.put(inputPath1, mappedInputPath1)[ FD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_43 $$ LoadedPaths loadedPaths = noticeableFuture.get()[ CD ]
Line_7 $$ Path mappedInputPath2 = Paths.get("mappedInputPath2")-->Line_47 $$ Assert.assertEquals(mappedInputPath2, loadedInputPaths.get(inputPath2))[ FD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_48 $$ processConfig = loadedPaths.toProcessConfig(processConfig)[ CD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_44 $$ Map<Path, Path> loadedInputPaths = loadedPaths.getInputPaths()[ CD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_21 $$ Path runtimePath2 = Paths.get("runtimePath2")[ CD ]
Line_30 $$ DefaultNoticeableFuture<Map<Path, Path>> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_31 $$ defaultNoticeableFuture.set(mergedPaths)[ FD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_9 $$ mergedPaths.put(inputPath2, mappedInputPath2)[ CD ]
Line_6 $$ Path inputPath2 = Paths.get("inputPaths2")-->Line_39 $$ ProcessCallable<Serializable> processCallable = new LoadPathProcessCallable(inputPath1.toFile(), inputPath2.toFile())[ FD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_37 $$ builder.setRuntimeClassPath(runtimePath1 + File.pathSeparator + runtimePath2 + File.pathSeparator + runtimePath3)[ CD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_7 $$ Path mappedInputPath2 = Paths.get("mappedInputPath2")[ CD ]
Line_22 $$ Path mappedRuntimePath2 = Paths.get("mappedRuntimePath2")-->Line_26 $$ mergedPaths.put(runtimePath2, mappedRuntimePath2)[ FD ]
Line_5 $$ Path mappedInputPath1 = Paths.get("mappedInputPath1")-->Line_46 $$ Assert.assertEquals(mappedInputPath1, loadedInputPaths.get(inputPath1))[ FD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_28 $$ NettyFabricWorkerExecutionChannelHandler nettyFabricWorkerExecutionChannelHandler = new NettyFabricWorkerExecutionChannelHandler(new MockRepository<Channel>("repository") [ CD ]
Line_7 $$ Path mappedInputPath2 = Paths.get("mappedInputPath2")-->Line_9 $$ mergedPaths.put(inputPath2, mappedInputPath2)[ FD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_42 $$ NoticeableFuture<LoadedPaths> noticeableFuture = nettyFabricWorkerExecutionChannelHandler.loadPaths(_embeddedChannel, new NettyFabricWorkerConfig<Serializable>(0, processConfig, processCallable, fabricPathMappingVisitor.getPathMap()))[ CD ]
Line_15 $$ Path mappedBootstrapPath3 = Paths.get("mappedBootstrapPath3")-->Line_18 $$ mergedPaths.put(bootstrapPath3, mappedBootstrapPath3)[ FD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_26 $$ mergedPaths.put(runtimePath2, mappedRuntimePath2)[ CD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_27 $$ mergedPaths.put(runtimePath3, mappedRuntimePath3)[ CD ]
Line_19 $$ Path runtimePath1 = Paths.get("runtimePath1")-->Line_25 $$ mergedPaths.put(runtimePath1, mappedRuntimePath1)[ FD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_25 $$ mergedPaths.put(runtimePath1, mappedRuntimePath1)[ CD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_15 $$ Path mappedBootstrapPath3 = Paths.get("mappedBootstrapPath3")[ CD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_8 $$ mergedPaths.put(inputPath1, mappedInputPath1)[ CD ]
Line_11 $$ Path mappedBootstrapPath1 = Paths.get("mappedBootstrapPath1")-->Line_16 $$ mergedPaths.put(bootstrapPath1, mappedBootstrapPath1)[ FD ]
Line_23 $$ Path runtimePath3 = Paths.get("runtimePath3")-->Line_27 $$ mergedPaths.put(runtimePath3, mappedRuntimePath3)[ FD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_5 $$ Path mappedInputPath1 = Paths.get("mappedInputPath1")[ CD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_11 $$ Path mappedBootstrapPath1 = Paths.get("mappedBootstrapPath1")[ CD ]
Line_13 $$ Path mappedBootstrapPath2 = Paths.get("mappedBootstrapPath2")-->Line_17 $$ mergedPaths.put(bootstrapPath2, mappedBootstrapPath2)[ FD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_22 $$ Path mappedRuntimePath2 = Paths.get("mappedRuntimePath2")[ CD ]
Line_3 $$ final Map<Path, Path> mergedPaths = new HashMap()-->Line_25 $$ mergedPaths.put(runtimePath1, mappedRuntimePath1)[ FD ]
Line_24 $$ Path mappedRuntimePath3 = Paths.get("mappedRuntimePath3")-->Line_27 $$ mergedPaths.put(runtimePath3, mappedRuntimePath3)[ FD ]
Line_12 $$ Path bootstrapPath2 = Paths.get("bootstrapPath2")-->Line_17 $$ mergedPaths.put(bootstrapPath2, mappedBootstrapPath2)[ FD ]
Line_2 $$ public void testLoadPaths() throws Exception -->Line_12 $$ Path bootstrapPath2 = Paths.get("bootstrapPath2")[ CD ]
