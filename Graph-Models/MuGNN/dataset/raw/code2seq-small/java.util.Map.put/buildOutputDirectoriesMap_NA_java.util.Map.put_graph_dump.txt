Line_2 $$ private static Map<File, Set<File>> buildOutputDirectoriesMap(CompileContext context, ModuleChunk chunk) -->Line_15 $$ return map[ CD ]
Line_2 $$ private static Map<File, Set<File>> buildOutputDirectoriesMap(CompileContext context, ModuleChunk chunk) -->Line_4 $$ for (ModuleBuildTarget target : chunk.getTargets()) [ FD ]
Line_3 $$ final Map<File, Set<File>> map = new THashMap<File, Set<File>>(FileUtil.FILE_HASHING_STRATEGY)-->Line_13 $$ map.put(outputDir, roots)[ FD ]
Line_2 $$ private static Map<File, Set<File>> buildOutputDirectoriesMap(CompileContext context, ModuleChunk chunk) -->Line_3 $$ final Map<File, Set<File>> map = new THashMap<File, Set<File>>(FileUtil.FILE_HASHING_STRATEGY)[ CD ]
Line_2 $$ private static Map<File, Set<File>> buildOutputDirectoriesMap(CompileContext context, ModuleChunk chunk) -->Line_10 $$ for (JavaSourceRootDescriptor descriptor : context.getProjectDescriptor().getBuildRootIndex().getTargetRoots(target, context)) [ FD ]
Line_4 $$ for (ModuleBuildTarget target : chunk.getTargets()) -->Line_5 $$ final File outputDir = target.getOutputDir()[ FD ]
Line_5 $$ final File outputDir = target.getOutputDir()-->Line_6 $$ if (outputDir == null) [ FD ]
Line_9 $$ final Set<File> roots = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_13 $$ map.put(outputDir, roots)[ FD ]
Line_9 $$ final Set<File> roots = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_11 $$ roots.add(descriptor.root)[ FD ]
Line_4 $$ for (ModuleBuildTarget target : chunk.getTargets()) -->Line_10 $$ for (JavaSourceRootDescriptor descriptor : context.getProjectDescriptor().getBuildRootIndex().getTargetRoots(target, context)) [ FD ]
Line_5 $$ final File outputDir = target.getOutputDir()-->Line_13 $$ map.put(outputDir, roots)[ FD ]
