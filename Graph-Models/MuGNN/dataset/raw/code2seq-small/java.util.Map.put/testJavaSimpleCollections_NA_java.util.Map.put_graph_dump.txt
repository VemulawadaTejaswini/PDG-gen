Line_2 $$ public void testJavaSimpleCollections() throws Throwable -->Line_12 $$ map.put(3, true)[ CD ]
Line_2 $$ public void testJavaSimpleCollections() throws Throwable -->Line_10 $$ map.put(1, true)[ CD ]
Line_2 $$ public void testJavaSimpleCollections() throws Throwable -->Line_8 $$ Set<String> set = new TreeSet(Arrays.asList("one", "three", "two"))[ CD ]
Line_2 $$ public void testJavaSimpleCollections() throws Throwable -->Line_9 $$ Map<Integer, Boolean> map = new TreeMap()[ CD ]
Line_9 $$ Map<Integer, Boolean> map = new TreeMap()-->Line_14 $$ assertRows(execute("SELECT " + fList + "(lst), " + fSet + "(st), " + fMap + "(mp) FROM %s WHERE key = 1"), row(list, set, map))[ FD ]
Line_9 $$ Map<Integer, Boolean> map = new TreeMap()-->Line_13 $$ execute("INSERT INTO %s (key, lst, st, mp) VALUES (1, ?, ?, ?)", list, set, map)[ FD ]
Line_9 $$ Map<Integer, Boolean> map = new TreeMap()-->Line_11 $$ map.put(2, false)[ FD ]
Line_9 $$ Map<Integer, Boolean> map = new TreeMap()-->Line_12 $$ map.put(3, true)[ FD ]
Line_7 $$ List<Double> list = Arrays.asList(1d, 2d, 3d)-->Line_15 $$ assertRowsNet(version, executeNet(version, "SELECT " + fList + "(lst), " + fSet + "(st), " + fMap + "(mp) FROM %s WHERE key = 1"), row(list, set, map))[ FD ]
Line_2 $$ public void testJavaSimpleCollections() throws Throwable -->Line_3 $$ createTable("CREATE TABLE %s (key int primary key, lst list<double>, st set<text>, mp map<int, boolean>)")[ CD ]
Line_8 $$ Set<String> set = new TreeSet(Arrays.asList("one", "three", "two"))-->Line_14 $$ assertRows(execute("SELECT " + fList + "(lst), " + fSet + "(st), " + fMap + "(mp) FROM %s WHERE key = 1"), row(list, set, map))[ FD ]
Line_8 $$ Set<String> set = new TreeSet(Arrays.asList("one", "three", "two"))-->Line_13 $$ execute("INSERT INTO %s (key, lst, st, mp) VALUES (1, ?, ?, ?)", list, set, map)[ FD ]
Line_7 $$ List<Double> list = Arrays.asList(1d, 2d, 3d)-->Line_13 $$ execute("INSERT INTO %s (key, lst, st, mp) VALUES (1, ?, ?, ?)", list, set, map)[ FD ]
Line_7 $$ List<Double> list = Arrays.asList(1d, 2d, 3d)-->Line_14 $$ assertRows(execute("SELECT " + fList + "(lst), " + fSet + "(st), " + fMap + "(mp) FROM %s WHERE key = 1"), row(list, set, map))[ FD ]
Line_9 $$ Map<Integer, Boolean> map = new TreeMap()-->Line_15 $$ assertRowsNet(version, executeNet(version, "SELECT " + fList + "(lst), " + fSet + "(st), " + fMap + "(mp) FROM %s WHERE key = 1"), row(list, set, map))[ FD ]
Line_9 $$ Map<Integer, Boolean> map = new TreeMap()-->Line_10 $$ map.put(1, true)[ FD ]
Line_2 $$ public void testJavaSimpleCollections() throws Throwable -->Line_14 $$ assertRows(execute("SELECT " + fList + "(lst), " + fSet + "(st), " + fMap + "(mp) FROM %s WHERE key = 1"), row(list, set, map))[ CD ]
Line_8 $$ Set<String> set = new TreeSet(Arrays.asList("one", "three", "two"))-->Line_15 $$ assertRowsNet(version, executeNet(version, "SELECT " + fList + "(lst), " + fSet + "(st), " + fMap + "(mp) FROM %s WHERE key = 1"), row(list, set, map))[ FD ]
Line_2 $$ public void testJavaSimpleCollections() throws Throwable -->Line_11 $$ map.put(2, false)[ CD ]
Line_2 $$ public void testJavaSimpleCollections() throws Throwable -->Line_13 $$ execute("INSERT INTO %s (key, lst, st, mp) VALUES (1, ?, ?, ?)", list, set, map)[ CD ]
Line_2 $$ public void testJavaSimpleCollections() throws Throwable -->Line_7 $$ List<Double> list = Arrays.asList(1d, 2d, 3d)[ CD ]
