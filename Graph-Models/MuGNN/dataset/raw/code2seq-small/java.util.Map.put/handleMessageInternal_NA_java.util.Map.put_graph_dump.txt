Line_25 $$ StompHeaderAccessor stompAccessor-->Line_60 $$ stompAccessor = (stompAccessor.isMutable() ? stompAccessor : StompHeaderAccessor.wrap(message))[ FD ]
Line_9 $$ if (handler != null) -->Line_14 $$ if (getHeaderInitializer() != null) [ CD ]
Line_25 $$ StompHeaderAccessor stompAccessor-->Line_43 $$ if (!SimpMessageType.MESSAGE.equals(stompAccessor.getMessageType())) [ FD ]
Line_25 $$ StompHeaderAccessor stompAccessor-->Line_52 $$ String destination = stompAccessor.getDestination()[ FD ]
Line_25 $$ StompHeaderAccessor stompAccessor-->Line_50 $$ stompAccessor.setSessionId(sessionId)[ FD ]
Line_31 $$ stompAccessor = (StompHeaderAccessor) accessor-->Line_62 $$ stompAccessor.setPasscode(this.clientPasscode)[ FD ]
Line_49 $$ sessionId = SYSTEM_SESSION_ID-->Line_71 $$ StompConnectionHandler handler = this.connectionHandlers.get(sessionId)[ FD ]
Line_13 $$ StompHeaderAccessor accessor = StompHeaderAccessor.create(StompCommand.ERROR)-->Line_33 $$ if (accessor instanceof SimpMessageHeaderAccessor) [ FD ]
Line_35 $$ command = stompAccessor.getCommand()-->Line_37 $$ command = stompAccessor.updateStompCommandAsClientMessage()[ FD ]
Line_4 $$ if (!isBrokerAvailable()) -->Line_23 $$ return[ CD ]
Line_31 $$ stompAccessor = (StompHeaderAccessor) accessor-->Line_52 $$ String destination = stompAccessor.getDestination()[ FD ]
Line_26 $$ StompCommand command-->Line_37 $$ command = stompAccessor.updateStompCommandAsClientMessage()[ FD ]
Line_33 $$ if (accessor instanceof SimpMessageHeaderAccessor) -->Line_35 $$ command = stompAccessor.getCommand()[ CD ]
Line_9 $$ if (handler != null) -->Line_20 $$ MessageHeaders headers = accessor.getMessageHeaders()[ CD ]
Line_56 $$ if (StompCommand.CONNECT.equals(command)) -->Line_60 $$ stompAccessor = (stompAccessor.isMutable() ? stompAccessor : StompHeaderAccessor.wrap(message))[ CD ]
Line_25 $$ StompHeaderAccessor stompAccessor-->Line_32 $$ command = stompAccessor.getCommand()[ FD ]
Line_32 $$ command = stompAccessor.getCommand()-->Line_36 $$ if (command == null) [ FD ]
Line_30 $$ if (accessor instanceof StompHeaderAccessor) -->Line_33 $$ if (accessor instanceof SimpMessageHeaderAccessor) [ CD ]
Line_3 $$ String sessionId = SimpMessageHeaderAccessor.getSessionId(message.getHeaders())-->Line_81 $$ StompConnectionHandler handler = this.connectionHandlers.get(sessionId)[ FD ]
Line_25 $$ StompHeaderAccessor stompAccessor-->Line_37 $$ command = stompAccessor.updateStompCommandAsClientMessage()[ FD ]
Line_57 $$ if (logger.isDebugEnabled()) -->Line_58 $$ logger.debug(stompAccessor.getShortLogMessage(EMPTY_PAYLOAD))[ CD ]
Line_13 $$ StompHeaderAccessor accessor = StompHeaderAccessor.create(StompCommand.ERROR)-->Line_28 $$ if (accessor == null) [ FD ]
Line_42 $$ if (sessionId == null) -->Line_49 $$ sessionId = SYSTEM_SESSION_ID[ CD ]
Line_70 $$ if (StompCommand.DISCONNECT.equals(command)) -->Line_81 $$ StompConnectionHandler handler = this.connectionHandlers.get(sessionId)[ CD ]
Line_52 $$ String destination = stompAccessor.getDestination()-->Line_53 $$ if (command != null && command.requiresDestination() && !checkDestinationPrefix(destination)) [ FD ]
Line_14 $$ if (getHeaderInitializer() != null) -->Line_15 $$ getHeaderInitializer().initHeaders(accessor)[ CD ]
Line_3 $$ String sessionId = SimpMessageHeaderAccessor.getSessionId(message.getHeaders())-->Line_71 $$ StompConnectionHandler handler = this.connectionHandlers.get(sessionId)[ FD ]
Line_26 $$ StompCommand command-->Line_35 $$ command = stompAccessor.getCommand()[ FD ]
Line_8 $$ StompConnectionHandler handler = this.connectionHandlers.get(sessionId)-->Line_9 $$ if (handler != null) [ FD ]
Line_56 $$ if (StompCommand.CONNECT.equals(command)) -->Line_62 $$ stompAccessor.setPasscode(this.clientPasscode)[ CD ]
Line_2 $$ protected void handleMessageInternal(Message<?> message) -->Line_27 $$ MessageHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, MessageHeaderAccessor.class)[ FD ]
Line_70 $$ if (StompCommand.DISCONNECT.equals(command)) -->Line_82 $$ if (handler == null) [ CD ]
Line_56 $$ if (StompCommand.CONNECT.equals(command)) -->Line_61 $$ stompAccessor.setLogin(this.clientLogin)[ CD ]
Line_42 $$ if (sessionId == null) -->Line_43 $$ if (!SimpMessageType.MESSAGE.equals(stompAccessor.getMessageType())) [ CD ]
Line_31 $$ stompAccessor = (StompHeaderAccessor) accessor-->Line_58 $$ logger.debug(stompAccessor.getShortLogMessage(EMPTY_PAYLOAD))[ FD ]
Line_2 $$ protected void handleMessageInternal(Message<?> message) -->Line_18 $$ accessor.setUser(SimpMessageHeaderAccessor.getUser(message.getHeaders()))[ FD ]
Line_70 $$ if (StompCommand.DISCONNECT.equals(command)) -->Line_71 $$ StompConnectionHandler handler = this.connectionHandlers.get(sessionId)[ CD ]
Line_2 $$ protected void handleMessageInternal(Message<?> message) -->Line_56 $$ if (StompCommand.CONNECT.equals(command)) [ CD ]
Line_70 $$ if (StompCommand.DISCONNECT.equals(command)) -->Line_78 $$ stats.incrementDisconnectCount()[ CD ]
Line_31 $$ stompAccessor = (StompHeaderAccessor) accessor-->Line_64 $$ stompAccessor.setHost(getVirtualHost())[ FD ]
Line_32 $$ command = stompAccessor.getCommand()-->Line_56 $$ if (StompCommand.CONNECT.equals(command)) [ FD ]
Line_34 $$ stompAccessor = StompHeaderAccessor.wrap(message)-->Line_62 $$ stompAccessor.setPasscode(this.clientPasscode)[ FD ]
Line_31 $$ stompAccessor = (StompHeaderAccessor) accessor-->Line_88 $$ handler.forward(message, stompAccessor)[ FD ]
Line_13 $$ StompHeaderAccessor accessor = StompHeaderAccessor.create(StompCommand.ERROR)-->Line_18 $$ accessor.setUser(SimpMessageHeaderAccessor.getUser(message.getHeaders()))[ FD ]
Line_49 $$ sessionId = SYSTEM_SESSION_ID-->Line_81 $$ StompConnectionHandler handler = this.connectionHandlers.get(sessionId)[ FD ]
Line_13 $$ StompHeaderAccessor accessor = StompHeaderAccessor.create(StompCommand.ERROR)-->Line_17 $$ accessor.setSessionId(sessionId)[ FD ]
Line_26 $$ StompCommand command-->Line_32 $$ command = stompAccessor.getCommand()[ FD ]
Line_3 $$ String sessionId = SimpMessageHeaderAccessor.getSessionId(message.getHeaders())-->Line_42 $$ if (sessionId == null) [ FD ]
Line_30 $$ if (accessor instanceof StompHeaderAccessor) -->Line_32 $$ command = stompAccessor.getCommand()[ CD ]
Line_70 $$ if (StompCommand.DISCONNECT.equals(command)) -->Line_79 $$ handler.forward(message, stompAccessor)[ CD ]
Line_35 $$ command = stompAccessor.getCommand()-->Line_53 $$ if (command != null && command.requiresDestination() && !checkDestinationPrefix(destination)) [ FD ]
Line_34 $$ stompAccessor = StompHeaderAccessor.wrap(message)-->Line_79 $$ handler.forward(message, stompAccessor)[ FD ]
Line_26 $$ StompCommand command-->Line_56 $$ if (StompCommand.CONNECT.equals(command)) [ FD ]
Line_49 $$ sessionId = SYSTEM_SESSION_ID-->Line_50 $$ stompAccessor.setSessionId(sessionId)[ FD ]
Line_60 $$ stompAccessor = (stompAccessor.isMutable() ? stompAccessor : StompHeaderAccessor.wrap(message))-->Line_79 $$ handler.forward(message, stompAccessor)[ FD ]
Line_31 $$ stompAccessor = (StompHeaderAccessor) accessor-->Line_32 $$ command = stompAccessor.getCommand()[ FD ]
Line_2 $$ protected void handleMessageInternal(Message<?> message) -->Line_53 $$ if (command != null && command.requiresDestination() && !checkDestinationPrefix(destination)) [ CD ]
Line_3 $$ String sessionId = SimpMessageHeaderAccessor.getSessionId(message.getHeaders())-->Line_50 $$ stompAccessor.setSessionId(sessionId)[ FD ]
Line_34 $$ stompAccessor = StompHeaderAccessor.wrap(message)-->Line_88 $$ handler.forward(message, stompAccessor)[ FD ]
Line_63 $$ if (getVirtualHost() != null) -->Line_64 $$ stompAccessor.setHost(getVirtualHost())[ CD ]
Line_20 $$ MessageHeaders headers = accessor.getMessageHeaders()-->Line_21 $$ getClientOutboundChannel().send(MessageBuilder.createMessage(EMPTY_PAYLOAD, headers))[ FD ]
Line_8 $$ StompConnectionHandler handler = this.connectionHandlers.get(sessionId)-->Line_11 $$ handler.clearConnection()[ FD ]
Line_34 $$ stompAccessor = StompHeaderAccessor.wrap(message)-->Line_64 $$ stompAccessor.setHost(getVirtualHost())[ FD ]
Line_9 $$ if (handler != null) -->Line_11 $$ handler.clearConnection()[ CD ]
Line_2 $$ protected void handleMessageInternal(Message<?> message) -->Line_79 $$ handler.forward(message, stompAccessor)[ FD ]
Line_8 $$ StompConnectionHandler handler = this.connectionHandlers.get(sessionId)-->Line_72 $$ if (handler == null) [ FD ]
Line_26 $$ StompCommand command-->Line_36 $$ if (command == null) [ FD ]
Line_31 $$ stompAccessor = (StompHeaderAccessor) accessor-->Line_79 $$ handler.forward(message, stompAccessor)[ FD ]
Line_35 $$ command = stompAccessor.getCommand()-->Line_36 $$ if (command == null) [ FD ]
Line_13 $$ StompHeaderAccessor accessor = StompHeaderAccessor.create(StompCommand.ERROR)-->Line_20 $$ MessageHeaders headers = accessor.getMessageHeaders()[ FD ]
Line_72 $$ if (handler == null) -->Line_73 $$ if (logger.isDebugEnabled()) [ CD ]
Line_37 $$ command = stompAccessor.updateStompCommandAsClientMessage()-->Line_53 $$ if (command != null && command.requiresDestination() && !checkDestinationPrefix(destination)) [ FD ]
Line_34 $$ stompAccessor = StompHeaderAccessor.wrap(message)-->Line_58 $$ logger.debug(stompAccessor.getShortLogMessage(EMPTY_PAYLOAD))[ FD ]
Line_56 $$ if (StompCommand.CONNECT.equals(command)) -->Line_67 $$ this.connectionHandlers.put(sessionId, handler)[ CD ]
Line_8 $$ StompConnectionHandler handler = this.connectionHandlers.get(sessionId)-->Line_69 $$ this.tcpClient.connect(handler)[ FD ]
Line_56 $$ if (StompCommand.CONNECT.equals(command)) -->Line_57 $$ if (logger.isDebugEnabled()) [ CD ]
Line_37 $$ command = stompAccessor.updateStompCommandAsClientMessage()-->Line_70 $$ if (StompCommand.DISCONNECT.equals(command)) [ FD ]
Line_31 $$ stompAccessor = (StompHeaderAccessor) accessor-->Line_60 $$ stompAccessor = (stompAccessor.isMutable() ? stompAccessor : StompHeaderAccessor.wrap(message))[ FD ]
Line_34 $$ stompAccessor = StompHeaderAccessor.wrap(message)-->Line_52 $$ String destination = stompAccessor.getDestination()[ FD ]
Line_35 $$ command = stompAccessor.getCommand()-->Line_56 $$ if (StompCommand.CONNECT.equals(command)) [ FD ]
Line_32 $$ command = stompAccessor.getCommand()-->Line_37 $$ command = stompAccessor.updateStompCommandAsClientMessage()[ FD ]
Line_2 $$ protected void handleMessageInternal(Message<?> message) -->Line_3 $$ String sessionId = SimpMessageHeaderAccessor.getSessionId(message.getHeaders())[ FD ]
Line_33 $$ if (accessor instanceof SimpMessageHeaderAccessor) -->Line_34 $$ stompAccessor = StompHeaderAccessor.wrap(message)[ CD ]
Line_8 $$ StompConnectionHandler handler = this.connectionHandlers.get(sessionId)-->Line_88 $$ handler.forward(message, stompAccessor)[ FD ]
Line_25 $$ StompHeaderAccessor stompAccessor-->Line_34 $$ stompAccessor = StompHeaderAccessor.wrap(message)[ FD ]
Line_9 $$ if (handler != null) -->Line_10 $$ handler.sendStompErrorFrameToClient("Broker not available.")[ CD ]
Line_25 $$ StompHeaderAccessor stompAccessor-->Line_62 $$ stompAccessor.setPasscode(this.clientPasscode)[ FD ]
Line_3 $$ String sessionId = SimpMessageHeaderAccessor.getSessionId(message.getHeaders())-->Line_17 $$ accessor.setSessionId(sessionId)[ FD ]
Line_2 $$ protected void handleMessageInternal(Message<?> message) -->Line_25 $$ StompHeaderAccessor stompAccessor[ CD ]
Line_3 $$ String sessionId = SimpMessageHeaderAccessor.getSessionId(message.getHeaders())-->Line_5 $$ if (sessionId == null || SYSTEM_SESSION_ID.equals(sessionId)) [ FD ]
Line_13 $$ StompHeaderAccessor accessor = StompHeaderAccessor.create(StompCommand.ERROR)-->Line_19 $$ accessor.setMessage("Broker not available.")[ FD ]
Line_13 $$ StompHeaderAccessor accessor = StompHeaderAccessor.create(StompCommand.ERROR)-->Line_40 $$ throw new IllegalStateException("Unexpected header accessor type " + accessor.getClass() + " in " + message)[ FD ]
Line_9 $$ if (handler != null) -->Line_13 $$ StompHeaderAccessor accessor = StompHeaderAccessor.create(StompCommand.ERROR)[ CD ]
Line_25 $$ StompHeaderAccessor stompAccessor-->Line_35 $$ command = stompAccessor.getCommand()[ FD ]
Line_37 $$ command = stompAccessor.updateStompCommandAsClientMessage()-->Line_56 $$ if (StompCommand.CONNECT.equals(command)) [ FD ]
Line_4 $$ if (!isBrokerAvailable()) -->Line_8 $$ StompConnectionHandler handler = this.connectionHandlers.get(sessionId)[ CD ]
Line_2 $$ protected void handleMessageInternal(Message<?> message) -->Line_28 $$ if (accessor == null) [ CD ]
Line_4 $$ if (!isBrokerAvailable()) -->Line_5 $$ if (sessionId == null || SYSTEM_SESSION_ID.equals(sessionId)) [ CD ]
Line_31 $$ stompAccessor = (StompHeaderAccessor) accessor-->Line_50 $$ stompAccessor.setSessionId(sessionId)[ FD ]
Line_82 $$ if (handler == null) -->Line_83 $$ if (logger.isDebugEnabled()) [ CD ]
Line_31 $$ stompAccessor = (StompHeaderAccessor) accessor-->Line_61 $$ stompAccessor.setLogin(this.clientLogin)[ FD ]
Line_3 $$ String sessionId = SimpMessageHeaderAccessor.getSessionId(message.getHeaders())-->Line_67 $$ this.connectionHandlers.put(sessionId, handler)[ FD ]
Line_9 $$ if (handler != null) -->Line_18 $$ accessor.setUser(SimpMessageHeaderAccessor.getUser(message.getHeaders()))[ CD ]
Line_26 $$ StompCommand command-->Line_70 $$ if (StompCommand.DISCONNECT.equals(command)) [ FD ]
Line_25 $$ StompHeaderAccessor stompAccessor-->Line_61 $$ stompAccessor.setLogin(this.clientLogin)[ FD ]
Line_8 $$ StompConnectionHandler handler = this.connectionHandlers.get(sessionId)-->Line_10 $$ handler.sendStompErrorFrameToClient("Broker not available.")[ FD ]
Line_56 $$ if (StompCommand.CONNECT.equals(command)) -->Line_63 $$ if (getVirtualHost() != null) [ CD ]
Line_31 $$ stompAccessor = (StompHeaderAccessor) accessor-->Line_43 $$ if (!SimpMessageType.MESSAGE.equals(stompAccessor.getMessageType())) [ FD ]
Line_2 $$ protected void handleMessageInternal(Message<?> message) -->Line_26 $$ StompCommand command[ CD ]
Line_25 $$ StompHeaderAccessor stompAccessor-->Line_64 $$ stompAccessor.setHost(getVirtualHost())[ FD ]
Line_3 $$ String sessionId = SimpMessageHeaderAccessor.getSessionId(message.getHeaders())-->Line_8 $$ StompConnectionHandler handler = this.connectionHandlers.get(sessionId)[ FD ]
Line_34 $$ stompAccessor = StompHeaderAccessor.wrap(message)-->Line_35 $$ command = stompAccessor.getCommand()[ FD ]
Line_8 $$ StompConnectionHandler handler = this.connectionHandlers.get(sessionId)-->Line_79 $$ handler.forward(message, stompAccessor)[ FD ]
Line_34 $$ stompAccessor = StompHeaderAccessor.wrap(message)-->Line_61 $$ stompAccessor.setLogin(this.clientLogin)[ FD ]
Line_2 $$ protected void handleMessageInternal(Message<?> message) -->Line_3 $$ String sessionId = SimpMessageHeaderAccessor.getSessionId(message.getHeaders())[ CD ]
Line_34 $$ stompAccessor = StompHeaderAccessor.wrap(message)-->Line_43 $$ if (!SimpMessageType.MESSAGE.equals(stompAccessor.getMessageType())) [ FD ]
Line_43 $$ if (!SimpMessageType.MESSAGE.equals(stompAccessor.getMessageType())) -->Line_44 $$ if (logger.isErrorEnabled()) [ CD ]
Line_43 $$ if (!SimpMessageType.MESSAGE.equals(stompAccessor.getMessageType())) -->Line_47 $$ return[ CD ]
Line_4 $$ if (!isBrokerAvailable()) -->Line_9 $$ if (handler != null) [ CD ]
Line_2 $$ protected void handleMessageInternal(Message<?> message) -->Line_52 $$ String destination = stompAccessor.getDestination()[ CD ]
Line_73 $$ if (logger.isDebugEnabled()) -->Line_74 $$ logger.debug("Ignoring DISCONNECT in session " + sessionId + ". Connection already cleaned up.")[ CD ]
Line_9 $$ if (handler != null) -->Line_17 $$ accessor.setSessionId(sessionId)[ CD ]
Line_25 $$ StompHeaderAccessor stompAccessor-->Line_58 $$ logger.debug(stompAccessor.getShortLogMessage(EMPTY_PAYLOAD))[ FD ]
Line_60 $$ stompAccessor = (stompAccessor.isMutable() ? stompAccessor : StompHeaderAccessor.wrap(message))-->Line_62 $$ stompAccessor.setPasscode(this.clientPasscode)[ FD ]
Line_25 $$ StompHeaderAccessor stompAccessor-->Line_79 $$ handler.forward(message, stompAccessor)[ FD ]
Line_9 $$ if (handler != null) -->Line_19 $$ accessor.setMessage("Broker not available.")[ CD ]
Line_35 $$ command = stompAccessor.getCommand()-->Line_70 $$ if (StompCommand.DISCONNECT.equals(command)) [ FD ]
Line_9 $$ if (handler != null) -->Line_21 $$ getClientOutboundChannel().send(MessageBuilder.createMessage(EMPTY_PAYLOAD, headers))[ CD ]
Line_34 $$ stompAccessor = StompHeaderAccessor.wrap(message)-->Line_50 $$ stompAccessor.setSessionId(sessionId)[ FD ]
Line_8 $$ StompConnectionHandler handler = this.connectionHandlers.get(sessionId)-->Line_82 $$ if (handler == null) [ FD ]
Line_31 $$ stompAccessor = (StompHeaderAccessor) accessor-->Line_34 $$ stompAccessor = StompHeaderAccessor.wrap(message)[ FD ]
Line_34 $$ stompAccessor = StompHeaderAccessor.wrap(message)-->Line_37 $$ command = stompAccessor.updateStompCommandAsClientMessage()[ FD ]
Line_60 $$ stompAccessor = (stompAccessor.isMutable() ? stompAccessor : StompHeaderAccessor.wrap(message))-->Line_61 $$ stompAccessor.setLogin(this.clientLogin)[ FD ]
Line_72 $$ if (handler == null) -->Line_76 $$ return[ CD ]
Line_83 $$ if (logger.isDebugEnabled()) -->Line_84 $$ logger.debug("No TCP connection for session " + sessionId + " in " + message)[ CD ]
Line_2 $$ protected void handleMessageInternal(Message<?> message) -->Line_88 $$ handler.forward(message, stompAccessor)[ FD ]
Line_32 $$ command = stompAccessor.getCommand()-->Line_53 $$ if (command != null && command.requiresDestination() && !checkDestinationPrefix(destination)) [ FD ]
Line_60 $$ stompAccessor = (stompAccessor.isMutable() ? stompAccessor : StompHeaderAccessor.wrap(message))-->Line_88 $$ handler.forward(message, stompAccessor)[ FD ]
Line_34 $$ stompAccessor = StompHeaderAccessor.wrap(message)-->Line_60 $$ stompAccessor = (stompAccessor.isMutable() ? stompAccessor : StompHeaderAccessor.wrap(message))[ FD ]
Line_30 $$ if (accessor instanceof StompHeaderAccessor) -->Line_31 $$ stompAccessor = (StompHeaderAccessor) accessor[ CD ]
Line_56 $$ if (StompCommand.CONNECT.equals(command)) -->Line_69 $$ this.tcpClient.connect(handler)[ CD ]
Line_49 $$ sessionId = SYSTEM_SESSION_ID-->Line_67 $$ this.connectionHandlers.put(sessionId, handler)[ FD ]
Line_25 $$ StompHeaderAccessor stompAccessor-->Line_31 $$ stompAccessor = (StompHeaderAccessor) accessor[ FD ]
Line_70 $$ if (StompCommand.DISCONNECT.equals(command)) -->Line_72 $$ if (handler == null) [ CD ]
Line_13 $$ StompHeaderAccessor accessor = StompHeaderAccessor.create(StompCommand.ERROR)-->Line_15 $$ getHeaderInitializer().initHeaders(accessor)[ FD ]
Line_2 $$ protected void handleMessageInternal(Message<?> message) -->Line_34 $$ stompAccessor = StompHeaderAccessor.wrap(message)[ FD ]
Line_2 $$ protected void handleMessageInternal(Message<?> message) -->Line_60 $$ stompAccessor = (stompAccessor.isMutable() ? stompAccessor : StompHeaderAccessor.wrap(message))[ FD ]
Line_56 $$ if (StompCommand.CONNECT.equals(command)) -->Line_68 $$ this.stats.incrementConnectCount()[ CD ]
Line_32 $$ command = stompAccessor.getCommand()-->Line_70 $$ if (StompCommand.DISCONNECT.equals(command)) [ FD ]
Line_31 $$ stompAccessor = (StompHeaderAccessor) accessor-->Line_35 $$ command = stompAccessor.getCommand()[ FD ]
Line_70 $$ if (StompCommand.DISCONNECT.equals(command)) -->Line_88 $$ handler.forward(message, stompAccessor)[ CD ]
Line_25 $$ StompHeaderAccessor stompAccessor-->Line_88 $$ handler.forward(message, stompAccessor)[ FD ]
Line_56 $$ if (StompCommand.CONNECT.equals(command)) -->Line_70 $$ if (StompCommand.DISCONNECT.equals(command)) [ CD ]
Line_36 $$ if (command == null) -->Line_37 $$ command = stompAccessor.updateStompCommandAsClientMessage()[ CD ]
Line_2 $$ protected void handleMessageInternal(Message<?> message) -->Line_42 $$ if (sessionId == null) [ CD ]
Line_44 $$ if (logger.isErrorEnabled()) -->Line_45 $$ logger.error("Only STOMP SEND supported from within the server side. Ignoring " + message)[ CD ]
Line_28 $$ if (accessor == null) -->Line_30 $$ if (accessor instanceof StompHeaderAccessor) [ CD ]
Line_82 $$ if (handler == null) -->Line_86 $$ return[ CD ]
Line_60 $$ stompAccessor = (stompAccessor.isMutable() ? stompAccessor : StompHeaderAccessor.wrap(message))-->Line_64 $$ stompAccessor.setHost(getVirtualHost())[ FD ]
Line_26 $$ StompCommand command-->Line_53 $$ if (command != null && command.requiresDestination() && !checkDestinationPrefix(destination)) [ FD ]
Line_53 $$ if (command != null && command.requiresDestination() && !checkDestinationPrefix(destination)) -->Line_54 $$ return[ CD ]
Line_42 $$ if (sessionId == null) -->Line_50 $$ stompAccessor.setSessionId(sessionId)[ CD ]
Line_32 $$ command = stompAccessor.getCommand()-->Line_35 $$ command = stompAccessor.getCommand()[ FD ]
Line_3 $$ String sessionId = SimpMessageHeaderAccessor.getSessionId(message.getHeaders())-->Line_49 $$ sessionId = SYSTEM_SESSION_ID[ FD ]
Line_13 $$ StompHeaderAccessor accessor = StompHeaderAccessor.create(StompCommand.ERROR)-->Line_30 $$ if (accessor instanceof StompHeaderAccessor) [ FD ]
Line_2 $$ protected void handleMessageInternal(Message<?> message) -->Line_4 $$ if (!isBrokerAvailable()) [ CD ]
Line_33 $$ if (accessor instanceof SimpMessageHeaderAccessor) -->Line_36 $$ if (command == null) [ CD ]
Line_8 $$ StompConnectionHandler handler = this.connectionHandlers.get(sessionId)-->Line_67 $$ this.connectionHandlers.put(sessionId, handler)[ FD ]
Line_2 $$ protected void handleMessageInternal(Message<?> message) -->Line_27 $$ MessageHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, MessageHeaderAccessor.class)[ CD ]
Line_31 $$ stompAccessor = (StompHeaderAccessor) accessor-->Line_37 $$ command = stompAccessor.updateStompCommandAsClientMessage()[ FD ]
