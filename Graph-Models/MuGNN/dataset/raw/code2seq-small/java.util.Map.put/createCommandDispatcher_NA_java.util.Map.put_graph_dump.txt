Line_2 $$ public <C> CommandDispatcher<C> createCommandDispatcher(final Object id, C context) -->Line_19 $$ this.contexts.put(id, new AtomicReference<Object>(context))[ CD ]
Line_4 $$ CommandMarshaller<C> marshaller = new CommandMarshaller<C>() -->Line_12 $$ marshaller.writeObject(command)[ FD ]
Line_9 $$ try (Marshaller marshaller = ChannelCommandDispatcherFactory.this.marshallingContext.createMarshaller(version)) -->Line_12 $$ marshaller.writeObject(command)[ FD ]
Line_7 $$ try (DataOutputStream output = new DataOutputStream(bytes)) -->Line_8 $$ IndexExternalizer.VARIABLE.writeData(output, version)[ FD ]
Line_21 $$ return new ChannelCommandDispatcher<C>(this.dispatcher, marshaller, this.nodeFactory, this.timeout, localDispatcher) -->Line_23 $$ localDispatcher.close()[ CD ]
Line_21 $$ return new ChannelCommandDispatcher<C>(this.dispatcher, marshaller, this.nodeFactory, this.timeout, localDispatcher) -->Line_24 $$ ChannelCommandDispatcherFactory.this.contexts.remove(id)[ CD ]
Line_4 $$ CommandMarshaller<C> marshaller = new CommandMarshaller<C>() -->Line_11 $$ marshaller.writeObject(id)[ FD ]
Line_9 $$ try (Marshaller marshaller = ChannelCommandDispatcherFactory.this.marshallingContext.createMarshaller(version)) -->Line_10 $$ marshaller.start(Marshalling.createByteOutput(output))[ FD ]
Line_4 $$ CommandMarshaller<C> marshaller = new CommandMarshaller<C>() -->Line_13 $$ marshaller.flush()[ FD ]
Line_2 $$ public <C> CommandDispatcher<C> createCommandDispatcher(final Object id, C context) -->Line_21 $$ return new ChannelCommandDispatcher<C>(this.dispatcher, marshaller, this.nodeFactory, this.timeout, localDispatcher) [ CD ]
Line_2 $$ public <C> CommandDispatcher<C> createCommandDispatcher(final Object id, C context) -->Line_24 $$ ChannelCommandDispatcherFactory.this.contexts.remove(id)[ FD ]
Line_6 $$ ByteArrayOutputStream bytes = new ByteArrayOutputStream()-->Line_15 $$ return bytes.toByteArray()[ FD ]
Line_9 $$ try (Marshaller marshaller = ChannelCommandDispatcherFactory.this.marshallingContext.createMarshaller(version)) -->Line_11 $$ marshaller.writeObject(id)[ FD ]
Line_4 $$ CommandMarshaller<C> marshaller = new CommandMarshaller<C>() -->Line_10 $$ marshaller.start(Marshalling.createByteOutput(output))[ FD ]
Line_2 $$ public <C> CommandDispatcher<C> createCommandDispatcher(final Object id, C context) -->Line_4 $$ CommandMarshaller<C> marshaller = new CommandMarshaller<C>() [ CD ]
Line_2 $$ public <C> CommandDispatcher<C> createCommandDispatcher(final Object id, C context) -->Line_19 $$ this.contexts.put(id, new AtomicReference<Object>(context))[ FD ]
Line_3 $$ final int version = this.marshallingContext.getCurrentVersion()-->Line_8 $$ IndexExternalizer.VARIABLE.writeData(output, version)[ FD ]
Line_2 $$ public <C> CommandDispatcher<C> createCommandDispatcher(final Object id, C context) -->Line_3 $$ final int version = this.marshallingContext.getCurrentVersion()[ CD ]
Line_3 $$ final int version = this.marshallingContext.getCurrentVersion()-->Line_9 $$ try (Marshaller marshaller = ChannelCommandDispatcherFactory.this.marshallingContext.createMarshaller(version)) [ FD ]
Line_9 $$ try (Marshaller marshaller = ChannelCommandDispatcherFactory.this.marshallingContext.createMarshaller(version)) -->Line_13 $$ marshaller.flush()[ FD ]
Line_4 $$ CommandMarshaller<C> marshaller = new CommandMarshaller<C>() -->Line_6 $$ ByteArrayOutputStream bytes = new ByteArrayOutputStream()[ CD ]
Line_7 $$ try (DataOutputStream output = new DataOutputStream(bytes)) -->Line_10 $$ marshaller.start(Marshalling.createByteOutput(output))[ FD ]
Line_2 $$ public <C> CommandDispatcher<C> createCommandDispatcher(final Object id, C context) -->Line_11 $$ marshaller.writeObject(id)[ FD ]
