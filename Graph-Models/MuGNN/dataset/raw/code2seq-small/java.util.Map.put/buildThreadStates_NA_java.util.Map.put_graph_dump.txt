Line_8 $$ final StringBuilder buffer = new StringBuilder()-->Line_106 $$ buffer.append("\n\t ").append(DebuggerBundle.message("threads.export.attribute.error.incompatible.state"))[ FD ]
Line_37 $$ Field tid = referenceType.fieldByName("tid")-->Line_39 $$ Value value = threadReference.getValue(tid)[ FD ]
Line_14 $$ final String threadName = threadName(threadReference)-->Line_16 $$ nameToThreadMap.put(threadName, threadState)[ FD ]
Line_8 $$ final StringBuilder buffer = new StringBuilder()-->Line_73 $$ buffer.append("\n\t ").append(DebuggerBundle.message("threads.export.attribute.label.waiting.for.thread", monitorOwningThreadName, renderObject(waitedMonitor)))[ FD ]
Line_8 $$ final StringBuilder buffer = new StringBuilder()-->Line_42 $$ buffer.append(" nid=NA")[ FD ]
Line_93 $$ final Location location = stackFrame.location()-->Line_94 $$ buffer.append("\n\t  ").append(renderLocation(location))[ FD ]
Line_2 $$ static List<ThreadState> buildThreadStates(VirtualMachineProxyImpl vmProxy) -->Line_3 $$ final List<ThreadReference> threads = vmProxy.getVirtualMachine().allThreads()[ FD ]
Line_79 $$ final TIntObjectHashMap<List<ObjectReference>> lockedAt = new TIntObjectHashMap<List<ObjectReference>>()-->Line_95 $$ final List<ObjectReference> monitors = lockedAt.get(i)[ FD ]
Line_14 $$ final String threadName = threadName(threadReference)-->Line_19 $$ buffer.append("\"").append(threadName).append("\"")[ FD ]
Line_15 $$ final ThreadState threadState = new ThreadState(threadName, threadStatusToState(threadStatus))-->Line_109 $$ ThreadDumpParser.inferThreadStateDetail(threadState)[ FD ]
Line_113 $$ final ThreadState awaitedThread = nameToThreadMap.get(waitingMap.get(waiting))-->Line_114 $$ awaitedThread.addWaitingThread(waitingThread)[ FD ]
Line_15 $$ final ThreadState threadState = new ThreadState(threadName, threadStatusToState(threadStatus))-->Line_108 $$ threadState.setStackTrace(buffer.toString(), hasEmptyStack)[ FD ]
Line_85 $$ lockedAt.put(stackDepth, monitors = new SmartList<ObjectReference>())-->Line_96 $$ if (monitors != null) [ FD ]
Line_117 $$ for (ThreadState awaitingThread : thread.getAwaitingThreads()) -->Line_120 $$ awaitingThread.addDeadlockedThread(thread)[ FD ]
Line_7 $$ for (ThreadReference threadReference : threads) -->Line_14 $$ final String threadName = threadName(threadReference)[ FD ]
Line_21 $$ if (referenceType != null) -->Line_37 $$ Field tid = referenceType.fieldByName("tid")[ CD ]
Line_21 $$ if (referenceType != null) -->Line_38 $$ if (tid != null) [ CD ]
Line_8 $$ final StringBuilder buffer = new StringBuilder()-->Line_102 $$ buffer.append("\n\t  Invalid stack frame: ").append(e.getMessage())[ FD ]
Line_25 $$ if (value instanceof BooleanValue && ((BooleanValue) value).booleanValue()) -->Line_26 $$ buffer.append(" ").append(DebuggerBundle.message("threads.export.attribute.label.daemon"))[ CD ]
Line_66 $$ ObjectReference waitedMonitor = vmProxy.canGetCurrentContendedMonitor() ? threadReference.currentContendedMonitor() : null-->Line_73 $$ buffer.append("\n\t ").append(DebuggerBundle.message("threads.export.attribute.label.waiting.for.thread", monitorOwningThreadName, renderObject(waitedMonitor)))[ FD ]
Line_8 $$ final StringBuilder buffer = new StringBuilder()-->Line_94 $$ buffer.append("\n\t  ").append(renderLocation(location))[ FD ]
Line_97 $$ for (ObjectReference monitor : monitors) -->Line_98 $$ buffer.append("\n\t  - ").append(renderLockedObject(monitor))[ FD ]
Line_5 $$ final Map<String, ThreadState> nameToThreadMap = new HashMap<String, ThreadState>()-->Line_113 $$ final ThreadState awaitedThread = nameToThreadMap.get(waitingMap.get(waiting))[ FD ]
Line_20 $$ ReferenceType referenceType = threadReference.referenceType()-->Line_37 $$ Field tid = referenceType.fieldByName("tid")[ FD ]
Line_2 $$ static List<ThreadState> buildThreadStates(VirtualMachineProxyImpl vmProxy) -->Line_125 $$ return result[ CD ]
Line_70 $$ if (waitedMonitorOwner != null) -->Line_71 $$ final String monitorOwningThreadName = threadName(waitedMonitorOwner)[ CD ]
Line_31 $$ if (priority != null) -->Line_33 $$ if (value instanceof IntegerValue) [ CD ]
Line_58 $$ final List<ThreadReference> waiting = reference.waitingThreads()-->Line_113 $$ final ThreadState awaitedThread = nameToThreadMap.get(waitingMap.get(waiting))[ FD ]
Line_15 $$ final ThreadState threadState = new ThreadState(threadName, threadStatusToState(threadStatus))-->Line_18 $$ threadState.setJavaThreadState(threadStatusToJavaThreadState(threadStatus))[ FD ]
Line_68 $$ if (vmProxy.canGetMonitorInfo()) -->Line_69 $$ ThreadReference waitedMonitorOwner = waitedMonitor.owningThread()[ CD ]
Line_77 $$ final List<StackFrame> frames = threadReference.frames()-->Line_78 $$ hasEmptyStack = frames.size() == 0[ FD ]
Line_69 $$ ThreadReference waitedMonitorOwner = waitedMonitor.owningThread()-->Line_70 $$ if (waitedMonitorOwner != null) [ FD ]
Line_77 $$ final List<StackFrame> frames = threadReference.frames()-->Line_90 $$ for (int i = 0, framesSize = frames.size(); i < framesSize; i++) [ FD ]
Line_2 $$ static List<ThreadState> buildThreadStates(VirtualMachineProxyImpl vmProxy) -->Line_3 $$ final List<ThreadReference> threads = vmProxy.getVirtualMachine().allThreads()[ CD ]
Line_15 $$ final ThreadState threadState = new ThreadState(threadName, threadStatusToState(threadStatus))-->Line_27 $$ threadState.setDaemon(true)[ FD ]
Line_84 $$ if ((monitors = lockedAt.get(stackDepth)) == null) -->Line_85 $$ lockedAt.put(stackDepth, monitors = new SmartList<ObjectReference>())[ CD ]
Line_77 $$ final List<StackFrame> frames = threadReference.frames()-->Line_91 $$ final StackFrame stackFrame = frames.get(i)[ FD ]
Line_2 $$ static List<ThreadState> buildThreadStates(VirtualMachineProxyImpl vmProxy) -->Line_6 $$ final Map<String, String> waitingMap = new HashMap<String, String>()[ CD ]
Line_8 $$ final StringBuilder buffer = new StringBuilder()-->Line_108 $$ threadState.setStackTrace(buffer.toString(), hasEmptyStack)[ FD ]
Line_8 $$ final StringBuilder buffer = new StringBuilder()-->Line_48 $$ buffer.append(" ").append(state)[ FD ]
Line_82 $$ final int stackDepth = info.stackDepth()-->Line_85 $$ lockedAt.put(stackDepth, monitors = new SmartList<ObjectReference>())[ FD ]
Line_8 $$ final StringBuilder buffer = new StringBuilder()-->Line_56 $$ buffer.append("\n\t ").append(renderLockedObject(reference))[ FD ]
Line_83 $$ List<ObjectReference> monitors-->Line_84 $$ if ((monitors = lockedAt.get(stackDepth)) == null) [ FD ]
Line_7 $$ for (ThreadReference threadReference : threads) -->Line_20 $$ ReferenceType referenceType = threadReference.referenceType()[ FD ]
Line_8 $$ final StringBuilder buffer = new StringBuilder()-->Line_62 $$ buffer.append("\n\t ").append(DebuggerBundle.message("threads.export.attribute.label.blocks.thread", waitingThreadName))[ FD ]
Line_81 $$ for (MonitorInfo info : threadReference.ownedMonitorsAndFrames()) -->Line_82 $$ final int stackDepth = info.stackDepth()[ FD ]
Line_15 $$ final ThreadState threadState = new ThreadState(threadName, threadStatusToState(threadStatus))-->Line_17 $$ result.add(threadState)[ FD ]
Line_95 $$ final List<ObjectReference> monitors = lockedAt.get(i)-->Line_96 $$ if (monitors != null) [ FD ]
Line_67 $$ if (waitedMonitor != null) -->Line_68 $$ if (vmProxy.canGetMonitorInfo()) [ CD ]
Line_21 $$ if (referenceType != null) -->Line_31 $$ if (priority != null) [ CD ]
Line_7 $$ for (ThreadReference threadReference : threads) -->Line_53 $$ List<ObjectReference> list = threadReference.ownedMonitors()[ FD ]
Line_68 $$ if (vmProxy.canGetMonitorInfo()) -->Line_70 $$ if (waitedMonitorOwner != null) [ CD ]
Line_33 $$ if (value instanceof IntegerValue) -->Line_34 $$ buffer.append(" ").append(DebuggerBundle.message("threads.export.attribute.label.priority", ((IntegerValue) value).intValue()))[ CD ]
Line_40 $$ if (value instanceof LongValue) -->Line_41 $$ buffer.append(" ").append(DebuggerBundle.message("threads.export.attribute.label.tid", Long.toHexString(((LongValue) value).longValue())))[ CD ]
Line_2 $$ static List<ThreadState> buildThreadStates(VirtualMachineProxyImpl vmProxy) -->Line_68 $$ if (vmProxy.canGetMonitorInfo()) [ FD ]
Line_81 $$ for (MonitorInfo info : threadReference.ownedMonitorsAndFrames()) -->Line_87 $$ monitors.add(info.monitor())[ FD ]
Line_59 $$ for (ThreadReference thread : waiting) -->Line_120 $$ awaitingThread.addDeadlockedThread(thread)[ FD ]
Line_9 $$ boolean hasEmptyStack = true-->Line_78 $$ hasEmptyStack = frames.size() == 0[ FD ]
Line_8 $$ final StringBuilder buffer = new StringBuilder()-->Line_50 $$ buffer.append("\n  java.lang.Thread.State: ").append(threadState.getJavaThreadState())[ FD ]
Line_10 $$ final int threadStatus = threadReference.status()-->Line_15 $$ final ThreadState threadState = new ThreadState(threadName, threadStatusToState(threadStatus))[ FD ]
Line_55 $$ if (!vmProxy.canGetMonitorFrameInfo()) -->Line_56 $$ buffer.append("\n\t ").append(renderLockedObject(reference))[ CD ]
Line_6 $$ final Map<String, String> waitingMap = new HashMap<String, String>()-->Line_111 $$ for (String waiting : waitingMap.keySet()) [ FD ]
Line_66 $$ ObjectReference waitedMonitor = vmProxy.canGetCurrentContendedMonitor() ? threadReference.currentContendedMonitor() : null-->Line_67 $$ if (waitedMonitor != null) [ FD ]
Line_38 $$ if (tid != null) -->Line_40 $$ if (value instanceof LongValue) [ CD ]
Line_46 $$ final String state = threadState.getState()-->Line_47 $$ if (state != null) [ FD ]
Line_14 $$ final String threadName = threadName(threadReference)-->Line_72 $$ waitingMap.put(threadName, monitorOwningThreadName)[ FD ]
Line_20 $$ ReferenceType referenceType = threadReference.referenceType()-->Line_21 $$ if (referenceType != null) [ FD ]
Line_6 $$ final Map<String, String> waitingMap = new HashMap<String, String>()-->Line_113 $$ final ThreadState awaitedThread = nameToThreadMap.get(waitingMap.get(waiting))[ FD ]
Line_112 $$ final ThreadState waitingThread = nameToThreadMap.get(waiting)-->Line_114 $$ awaitedThread.addWaitingThread(waitingThread)[ FD ]
Line_31 $$ if (priority != null) -->Line_32 $$ Value value = threadReference.getValue(priority)[ CD ]
Line_70 $$ if (waitedMonitorOwner != null) -->Line_72 $$ waitingMap.put(threadName, monitorOwningThreadName)[ CD ]
Line_7 $$ for (ThreadReference threadReference : threads) -->Line_24 $$ Value value = threadReference.getValue(daemon)[ FD ]
Line_5 $$ final Map<String, ThreadState> nameToThreadMap = new HashMap<String, ThreadState>()-->Line_16 $$ nameToThreadMap.put(threadName, threadState)[ FD ]
Line_59 $$ for (ThreadReference thread : waiting) -->Line_118 $$ if (awaitingThread.isAwaitedBy(thread)) [ FD ]
Line_66 $$ ObjectReference waitedMonitor = vmProxy.canGetCurrentContendedMonitor() ? threadReference.currentContendedMonitor() : null-->Line_69 $$ ThreadReference waitedMonitorOwner = waitedMonitor.owningThread()[ FD ]
Line_2 $$ static List<ThreadState> buildThreadStates(VirtualMachineProxyImpl vmProxy) -->Line_66 $$ ObjectReference waitedMonitor = vmProxy.canGetCurrentContendedMonitor() ? threadReference.currentContendedMonitor() : null[ FD ]
Line_7 $$ for (ThreadReference threadReference : threads) -->Line_81 $$ for (MonitorInfo info : threadReference.ownedMonitorsAndFrames()) [ FD ]
Line_2 $$ static List<ThreadState> buildThreadStates(VirtualMachineProxyImpl vmProxy) -->Line_124 $$ ThreadDumpParser.sortThreads(result)[ CD ]
Line_30 $$ Field priority = referenceType.fieldByName("priority")-->Line_32 $$ Value value = threadReference.getValue(priority)[ FD ]
Line_5 $$ final Map<String, ThreadState> nameToThreadMap = new HashMap<String, ThreadState>()-->Line_112 $$ final ThreadState waitingThread = nameToThreadMap.get(waiting)[ FD ]
Line_84 $$ if ((monitors = lockedAt.get(stackDepth)) == null) -->Line_87 $$ monitors.add(info.monitor())[ FD ]
Line_60 $$ final String waitingThreadName = threadName(thread)-->Line_62 $$ buffer.append("\n\t ").append(DebuggerBundle.message("threads.export.attribute.label.blocks.thread", waitingThreadName))[ FD ]
Line_15 $$ final ThreadState threadState = new ThreadState(threadName, threadStatusToState(threadStatus))-->Line_50 $$ buffer.append("\n  java.lang.Thread.State: ").append(threadState.getJavaThreadState())[ FD ]
Line_90 $$ for (int i = 0, framesSize = frames.size(); i < framesSize; i++) -->Line_91 $$ final StackFrame stackFrame = frames.get(i)[ FD ]
Line_8 $$ final StringBuilder buffer = new StringBuilder()-->Line_26 $$ buffer.append(" ").append(DebuggerBundle.message("threads.export.attribute.label.daemon"))[ FD ]
Line_117 $$ for (ThreadState awaitingThread : thread.getAwaitingThreads()) -->Line_119 $$ thread.addDeadlockedThread(awaitingThread)[ FD ]
Line_78 $$ hasEmptyStack = frames.size() == 0-->Line_108 $$ threadState.setStackTrace(buffer.toString(), hasEmptyStack)[ FD ]
Line_38 $$ if (tid != null) -->Line_39 $$ Value value = threadReference.getValue(tid)[ CD ]
Line_23 $$ if (daemon != null) -->Line_25 $$ if (value instanceof BooleanValue && ((BooleanValue) value).booleanValue()) [ CD ]
Line_4 $$ final List<ThreadState> result = new ArrayList<ThreadState>()-->Line_17 $$ result.add(threadState)[ FD ]
Line_59 $$ for (ThreadReference thread : waiting) -->Line_60 $$ final String waitingThreadName = threadName(thread)[ FD ]
Line_30 $$ Field priority = referenceType.fieldByName("priority")-->Line_31 $$ if (priority != null) [ FD ]
Line_8 $$ final StringBuilder buffer = new StringBuilder()-->Line_34 $$ buffer.append(" ").append(DebuggerBundle.message("threads.export.attribute.label.priority", ((IntegerValue) value).intValue()))[ FD ]
Line_22 $$ Field daemon = referenceType.fieldByName("daemon")-->Line_23 $$ if (daemon != null) [ FD ]
Line_60 $$ final String waitingThreadName = threadName(thread)-->Line_61 $$ waitingMap.put(waitingThreadName, threadName)[ FD ]
Line_2 $$ static List<ThreadState> buildThreadStates(VirtualMachineProxyImpl vmProxy) -->Line_55 $$ if (!vmProxy.canGetMonitorFrameInfo()) [ FD ]
Line_7 $$ for (ThreadReference threadReference : threads) -->Line_10 $$ final int threadStatus = threadReference.status()[ FD ]
Line_118 $$ if (awaitingThread.isAwaitedBy(thread)) -->Line_119 $$ thread.addDeadlockedThread(awaitingThread)[ CD ]
Line_10 $$ final int threadStatus = threadReference.status()-->Line_11 $$ if (threadStatus == ThreadReference.THREAD_STATUS_ZOMBIE) [ FD ]
Line_22 $$ Field daemon = referenceType.fieldByName("daemon")-->Line_24 $$ Value value = threadReference.getValue(daemon)[ FD ]
Line_23 $$ if (daemon != null) -->Line_24 $$ Value value = threadReference.getValue(daemon)[ CD ]
Line_69 $$ ThreadReference waitedMonitorOwner = waitedMonitor.owningThread()-->Line_71 $$ final String monitorOwningThreadName = threadName(waitedMonitorOwner)[ FD ]
Line_25 $$ if (value instanceof BooleanValue && ((BooleanValue) value).booleanValue()) -->Line_27 $$ threadState.setDaemon(true)[ CD ]
Line_24 $$ Value value = threadReference.getValue(daemon)-->Line_40 $$ if (value instanceof LongValue) [ FD ]
Line_79 $$ final TIntObjectHashMap<List<ObjectReference>> lockedAt = new TIntObjectHashMap<List<ObjectReference>>()-->Line_85 $$ lockedAt.put(stackDepth, monitors = new SmartList<ObjectReference>())[ FD ]
Line_4 $$ final List<ThreadState> result = new ArrayList<ThreadState>()-->Line_124 $$ ThreadDumpParser.sortThreads(result)[ FD ]
Line_40 $$ if (value instanceof LongValue) -->Line_42 $$ buffer.append(" nid=NA")[ CD ]
Line_15 $$ final ThreadState threadState = new ThreadState(threadName, threadStatusToState(threadStatus))-->Line_46 $$ final String state = threadState.getState()[ FD ]
Line_6 $$ final Map<String, String> waitingMap = new HashMap<String, String>()-->Line_61 $$ waitingMap.put(waitingThreadName, threadName)[ FD ]
Line_8 $$ final StringBuilder buffer = new StringBuilder()-->Line_19 $$ buffer.append("\"").append(threadName).append("\"")[ FD ]
Line_84 $$ if ((monitors = lockedAt.get(stackDepth)) == null) -->Line_85 $$ lockedAt.put(stackDepth, monitors = new SmartList<ObjectReference>())[ FD ]
Line_21 $$ if (referenceType != null) -->Line_23 $$ if (daemon != null) [ CD ]
Line_91 $$ final StackFrame stackFrame = frames.get(i)-->Line_93 $$ final Location location = stackFrame.location()[ FD ]
Line_37 $$ Field tid = referenceType.fieldByName("tid")-->Line_38 $$ if (tid != null) [ FD ]
Line_2 $$ static List<ThreadState> buildThreadStates(VirtualMachineProxyImpl vmProxy) -->Line_4 $$ final List<ThreadState> result = new ArrayList<ThreadState>()[ CD ]
Line_52 $$ if (vmProxy.canGetOwnedMonitorInfo() && vmProxy.canGetMonitorInfo()) -->Line_53 $$ List<ObjectReference> list = threadReference.ownedMonitors()[ CD ]
Line_10 $$ final int threadStatus = threadReference.status()-->Line_18 $$ threadState.setJavaThreadState(threadStatusToJavaThreadState(threadStatus))[ FD ]
Line_83 $$ List<ObjectReference> monitors-->Line_87 $$ monitors.add(info.monitor())[ FD ]
Line_90 $$ for (int i = 0, framesSize = frames.size(); i < framesSize; i++) -->Line_91 $$ final StackFrame stackFrame = frames.get(i)[ CD ]
Line_24 $$ Value value = threadReference.getValue(daemon)-->Line_33 $$ if (value instanceof IntegerValue) [ FD ]
Line_15 $$ final ThreadState threadState = new ThreadState(threadName, threadStatusToState(threadStatus))-->Line_16 $$ nameToThreadMap.put(threadName, threadState)[ FD ]
Line_59 $$ for (ThreadReference thread : waiting) -->Line_117 $$ for (ThreadState awaitingThread : thread.getAwaitingThreads()) [ FD ]
Line_83 $$ List<ObjectReference> monitors-->Line_96 $$ if (monitors != null) [ FD ]
Line_118 $$ if (awaitingThread.isAwaitedBy(thread)) -->Line_120 $$ awaitingThread.addDeadlockedThread(thread)[ CD ]
Line_117 $$ for (ThreadState awaitingThread : thread.getAwaitingThreads()) -->Line_118 $$ if (awaitingThread.isAwaitedBy(thread)) [ FD ]
Line_7 $$ for (ThreadReference threadReference : threads) -->Line_77 $$ final List<StackFrame> frames = threadReference.frames()[ FD ]
Line_7 $$ for (ThreadReference threadReference : threads) -->Line_32 $$ Value value = threadReference.getValue(priority)[ FD ]
Line_20 $$ ReferenceType referenceType = threadReference.referenceType()-->Line_30 $$ Field priority = referenceType.fieldByName("priority")[ FD ]
Line_8 $$ final StringBuilder buffer = new StringBuilder()-->Line_98 $$ buffer.append("\n\t  - ").append(renderLockedObject(monitor))[ FD ]
Line_7 $$ for (ThreadReference threadReference : threads) -->Line_66 $$ ObjectReference waitedMonitor = vmProxy.canGetCurrentContendedMonitor() ? threadReference.currentContendedMonitor() : null[ FD ]
Line_54 $$ for (ObjectReference reference : list) -->Line_58 $$ final List<ThreadReference> waiting = reference.waitingThreads()[ FD ]
Line_59 $$ for (ThreadReference thread : waiting) -->Line_119 $$ thread.addDeadlockedThread(awaitingThread)[ FD ]
Line_2 $$ static List<ThreadState> buildThreadStates(VirtualMachineProxyImpl vmProxy) -->Line_52 $$ if (vmProxy.canGetOwnedMonitorInfo() && vmProxy.canGetMonitorInfo()) [ FD ]
Line_54 $$ for (ObjectReference reference : list) -->Line_56 $$ buffer.append("\n\t ").append(renderLockedObject(reference))[ FD ]
Line_9 $$ boolean hasEmptyStack = true-->Line_108 $$ threadState.setStackTrace(buffer.toString(), hasEmptyStack)[ FD ]
Line_6 $$ final Map<String, String> waitingMap = new HashMap<String, String>()-->Line_72 $$ waitingMap.put(threadName, monitorOwningThreadName)[ FD ]
Line_58 $$ final List<ThreadReference> waiting = reference.waitingThreads()-->Line_112 $$ final ThreadState waitingThread = nameToThreadMap.get(waiting)[ FD ]
Line_20 $$ ReferenceType referenceType = threadReference.referenceType()-->Line_22 $$ Field daemon = referenceType.fieldByName("daemon")[ FD ]
Line_71 $$ final String monitorOwningThreadName = threadName(waitedMonitorOwner)-->Line_72 $$ waitingMap.put(threadName, monitorOwningThreadName)[ FD ]
Line_2 $$ static List<ThreadState> buildThreadStates(VirtualMachineProxyImpl vmProxy) -->Line_5 $$ final Map<String, ThreadState> nameToThreadMap = new HashMap<String, ThreadState>()[ CD ]
Line_47 $$ if (state != null) -->Line_48 $$ buffer.append(" ").append(state)[ CD ]
Line_21 $$ if (referenceType != null) -->Line_22 $$ Field daemon = referenceType.fieldByName("daemon")[ CD ]
Line_14 $$ final String threadName = threadName(threadReference)-->Line_61 $$ waitingMap.put(waitingThreadName, threadName)[ FD ]
Line_85 $$ lockedAt.put(stackDepth, monitors = new SmartList<ObjectReference>())-->Line_87 $$ monitors.add(info.monitor())[ FD ]
Line_71 $$ final String monitorOwningThreadName = threadName(waitedMonitorOwner)-->Line_73 $$ buffer.append("\n\t ").append(DebuggerBundle.message("threads.export.attribute.label.waiting.for.thread", monitorOwningThreadName, renderObject(waitedMonitor)))[ FD ]
Line_46 $$ final String state = threadState.getState()-->Line_48 $$ buffer.append(" ").append(state)[ FD ]
Line_90 $$ for (int i = 0, framesSize = frames.size(); i < framesSize; i++) -->Line_95 $$ final List<ObjectReference> monitors = lockedAt.get(i)[ FD ]
Line_84 $$ if ((monitors = lockedAt.get(stackDepth)) == null) -->Line_96 $$ if (monitors != null) [ FD ]
Line_2 $$ static List<ThreadState> buildThreadStates(VirtualMachineProxyImpl vmProxy) -->Line_80 $$ if (vmProxy.canGetMonitorFrameInfo()) [ FD ]
Line_8 $$ final StringBuilder buffer = new StringBuilder()-->Line_41 $$ buffer.append(" ").append(DebuggerBundle.message("threads.export.attribute.label.tid", Long.toHexString(((LongValue) value).longValue())))[ FD ]
Line_70 $$ if (waitedMonitorOwner != null) -->Line_73 $$ buffer.append("\n\t ").append(DebuggerBundle.message("threads.export.attribute.label.waiting.for.thread", monitorOwningThreadName, renderObject(waitedMonitor)))[ CD ]
Line_83 $$ List<ObjectReference> monitors-->Line_85 $$ lockedAt.put(stackDepth, monitors = new SmartList<ObjectReference>())[ FD ]
Line_21 $$ if (referenceType != null) -->Line_30 $$ Field priority = referenceType.fieldByName("priority")[ CD ]
Line_7 $$ for (ThreadReference threadReference : threads) -->Line_39 $$ Value value = threadReference.getValue(tid)[ FD ]
Line_82 $$ final int stackDepth = info.stackDepth()-->Line_84 $$ if ((monitors = lockedAt.get(stackDepth)) == null) [ FD ]
Line_79 $$ final TIntObjectHashMap<List<ObjectReference>> lockedAt = new TIntObjectHashMap<List<ObjectReference>>()-->Line_84 $$ if ((monitors = lockedAt.get(stackDepth)) == null) [ FD ]
