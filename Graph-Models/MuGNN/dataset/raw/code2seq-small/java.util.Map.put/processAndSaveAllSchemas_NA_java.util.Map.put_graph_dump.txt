Line_13 $$ final String text = psiElement.getText()-->Line_14 $$ result.append(text)[ FD ]
Line_35 $$ if (s != null) -->Line_37 $$ replaced = true[ CD ]
Line_8 $$ final StringBuilder result = new StringBuilder()-->Line_14 $$ result.append(text)[ FD ]
Line_19 $$ if (xmlAttribute.isNamespaceDeclaration()) -->Line_22 $$ result.append(xmlAttribute.getText()).append(" ")[ CD ]
Line_2 $$ public static String processAndSaveAllSchemas(@NotNull XmlFile file, @NotNull final Map<String, String> scannedToFileName, @NotNull final SchemaReferenceProcessor schemaReferenceProcessor) -->Line_7 $$ scannedToFileName.put(fileName, fileName)[ CD ]
Line_19 $$ if (xmlAttribute.isNamespaceDeclaration()) -->Line_21 $$ final String value = xmlAttribute.getValue()[ CD ]
Line_20 $$ replaced = true-->Line_42 $$ if (!replaced)[ FD ]
Line_42 $$ if (!replaced)-->Line_43 $$ result.append(xmlAttribute.getText())[ CD ]
Line_2 $$ public static String processAndSaveAllSchemas(@NotNull XmlFile file, @NotNull final Map<String, String> scannedToFileName, @NotNull final SchemaReferenceProcessor schemaReferenceProcessor) -->Line_3 $$ final String fileName = file.getName()[ CD ]
Line_9 $$ file.acceptChildren(new XmlRecursiveElementVisitor() -->Line_30 $$ final PsiReference[] references = xmlAttribute.getValueElement().getReferences()[ FD ]
Line_2 $$ public static String processAndSaveAllSchemas(@NotNull XmlFile file, @NotNull final Map<String, String> scannedToFileName, @NotNull final SchemaReferenceProcessor schemaReferenceProcessor) -->Line_3 $$ final String fileName = file.getName()[ FD ]
Line_18 $$ boolean replaced = false-->Line_37 $$ replaced = true[ FD ]
Line_2 $$ public static String processAndSaveAllSchemas(@NotNull XmlFile file, @NotNull final Map<String, String> scannedToFileName, @NotNull final SchemaReferenceProcessor schemaReferenceProcessor) -->Line_26 $$ processAndSaveAllSchemas(nsDescriptor.getDescriptorFile(), scannedToFileName, schemaReferenceProcessor)[ FD ]
Line_35 $$ if (s != null) -->Line_36 $$ result.append(xmlAttribute.getName()).append("='").append(s).append('\'')[ CD ]
Line_25 $$ if (nsDescriptor != null) -->Line_26 $$ processAndSaveAllSchemas(nsDescriptor.getDescriptorFile(), scannedToFileName, schemaReferenceProcessor)[ CD ]
Line_29 $$ if ("schemaLocation".equals(xmlAttribute.getName())) -->Line_30 $$ final PsiReference[] references = xmlAttribute.getValueElement().getReferences()[ CD ]
Line_33 $$ if (psiElement instanceof XmlFile) -->Line_35 $$ if (s != null) [ CD ]
Line_2 $$ public static String processAndSaveAllSchemas(@NotNull XmlFile file, @NotNull final Map<String, String> scannedToFileName, @NotNull final SchemaReferenceProcessor schemaReferenceProcessor) -->Line_47 $$ final String content = result.toString()[ CD ]
Line_24 $$ final XmlNSDescriptor nsDescriptor = xmlAttribute.getParent().getNSDescriptor(value, true)-->Line_25 $$ if (nsDescriptor != null) [ FD ]
Line_12 $$ if (psiElement instanceof LeafPsiElement) -->Line_14 $$ result.append(text)[ CD ]
Line_9 $$ file.acceptChildren(new XmlRecursiveElementVisitor() -->Line_19 $$ if (xmlAttribute.isNamespaceDeclaration()) [ CD ]
Line_2 $$ public static String processAndSaveAllSchemas(@NotNull XmlFile file, @NotNull final Map<String, String> scannedToFileName, @NotNull final SchemaReferenceProcessor schemaReferenceProcessor) -->Line_9 $$ file.acceptChildren(new XmlRecursiveElementVisitor() [ FD ]
Line_3 $$ final String fileName = file.getName()-->Line_59 $$ schemaReferenceProcessor.processSchema(fileName, bytes)[ FD ]
Line_33 $$ if (psiElement instanceof XmlFile) -->Line_34 $$ final String s = processAndSaveAllSchemas(((XmlFile) psiElement), scannedToFileName, schemaReferenceProcessor)[ CD ]
Line_3 $$ final String fileName = file.getName()-->Line_4 $$ String previous = scannedToFileName.get(fileName)[ FD ]
Line_21 $$ final String value = xmlAttribute.getValue()-->Line_24 $$ final XmlNSDescriptor nsDescriptor = xmlAttribute.getParent().getNSDescriptor(value, true)[ FD ]
Line_24 $$ final XmlNSDescriptor nsDescriptor = xmlAttribute.getParent().getNSDescriptor(value, true)-->Line_26 $$ processAndSaveAllSchemas(nsDescriptor.getDescriptorFile(), scannedToFileName, schemaReferenceProcessor)[ FD ]
Line_4 $$ String previous = scannedToFileName.get(fileName)-->Line_5 $$ if (previous != null)[ FD ]
Line_34 $$ final String s = processAndSaveAllSchemas(((XmlFile) psiElement), scannedToFileName, schemaReferenceProcessor)-->Line_35 $$ if (s != null) [ FD ]
Line_29 $$ if ("schemaLocation".equals(xmlAttribute.getName())) -->Line_31 $$ if (references.length > 0) [ CD ]
Line_2 $$ public static String processAndSaveAllSchemas(@NotNull XmlFile file, @NotNull final Map<String, String> scannedToFileName, @NotNull final SchemaReferenceProcessor schemaReferenceProcessor) -->Line_34 $$ final String s = processAndSaveAllSchemas(((XmlFile) psiElement), scannedToFileName, schemaReferenceProcessor)[ FD ]
Line_19 $$ if (xmlAttribute.isNamespaceDeclaration()) -->Line_29 $$ if ("schemaLocation".equals(xmlAttribute.getName())) [ CD ]
Line_12 $$ if (psiElement instanceof LeafPsiElement) -->Line_13 $$ final String text = psiElement.getText()[ CD ]
Line_2 $$ public static String processAndSaveAllSchemas(@NotNull XmlFile file, @NotNull final Map<String, String> scannedToFileName, @NotNull final SchemaReferenceProcessor schemaReferenceProcessor) -->Line_46 $$ final VirtualFile virtualFile = file.getVirtualFile()[ FD ]
Line_2 $$ public static String processAndSaveAllSchemas(@NotNull XmlFile file, @NotNull final Map<String, String> scannedToFileName, @NotNull final SchemaReferenceProcessor schemaReferenceProcessor) -->Line_4 $$ String previous = scannedToFileName.get(fileName)[ FD ]
Line_2 $$ public static String processAndSaveAllSchemas(@NotNull XmlFile file, @NotNull final Map<String, String> scannedToFileName, @NotNull final SchemaReferenceProcessor schemaReferenceProcessor) -->Line_8 $$ final StringBuilder result = new StringBuilder()[ CD ]
Line_2 $$ public static String processAndSaveAllSchemas(@NotNull XmlFile file, @NotNull final Map<String, String> scannedToFileName, @NotNull final SchemaReferenceProcessor schemaReferenceProcessor) -->Line_5 $$ if (previous != null)[ CD ]
Line_32 $$ PsiElement psiElement = references[0].resolve()-->Line_33 $$ if (psiElement instanceof XmlFile) [ FD ]
Line_2 $$ public static String processAndSaveAllSchemas(@NotNull XmlFile file, @NotNull final Map<String, String> scannedToFileName, @NotNull final SchemaReferenceProcessor schemaReferenceProcessor) -->Line_7 $$ scannedToFileName.put(fileName, fileName)[ FD ]
Line_9 $$ file.acceptChildren(new XmlRecursiveElementVisitor() -->Line_21 $$ final String value = xmlAttribute.getValue()[ FD ]
Line_31 $$ if (references.length > 0) -->Line_32 $$ PsiElement psiElement = references[0].resolve()[ CD ]
Line_2 $$ public static String processAndSaveAllSchemas(@NotNull XmlFile file, @NotNull final Map<String, String> scannedToFileName, @NotNull final SchemaReferenceProcessor schemaReferenceProcessor) -->Line_4 $$ String previous = scannedToFileName.get(fileName)[ CD ]
Line_9 $$ file.acceptChildren(new XmlRecursiveElementVisitor() -->Line_36 $$ result.append(xmlAttribute.getName()).append("='").append(s).append('\'')[ FD ]
Line_19 $$ if (xmlAttribute.isNamespaceDeclaration()) -->Line_23 $$ if (!scannedToFileName.containsKey(value)) [ CD ]
Line_2 $$ public static String processAndSaveAllSchemas(@NotNull XmlFile file, @NotNull final Map<String, String> scannedToFileName, @NotNull final SchemaReferenceProcessor schemaReferenceProcessor) -->Line_59 $$ schemaReferenceProcessor.processSchema(fileName, bytes)[ FD ]
Line_9 $$ file.acceptChildren(new XmlRecursiveElementVisitor() -->Line_11 $$ super.visitElement(psiElement)[ CD ]
Line_9 $$ file.acceptChildren(new XmlRecursiveElementVisitor() -->Line_12 $$ if (psiElement instanceof LeafPsiElement) [ FD ]
Line_2 $$ public static String processAndSaveAllSchemas(@NotNull XmlFile file, @NotNull final Map<String, String> scannedToFileName, @NotNull final SchemaReferenceProcessor schemaReferenceProcessor) -->Line_60 $$ return fileName[ CD ]
Line_2 $$ public static String processAndSaveAllSchemas(@NotNull XmlFile file, @NotNull final Map<String, String> scannedToFileName, @NotNull final SchemaReferenceProcessor schemaReferenceProcessor) -->Line_59 $$ schemaReferenceProcessor.processSchema(fileName, bytes)[ CD ]
Line_9 $$ file.acceptChildren(new XmlRecursiveElementVisitor() -->Line_42 $$ if (!replaced)[ CD ]
Line_8 $$ final StringBuilder result = new StringBuilder()-->Line_22 $$ result.append(xmlAttribute.getText()).append(" ")[ FD ]
Line_9 $$ file.acceptChildren(new XmlRecursiveElementVisitor() -->Line_43 $$ result.append(xmlAttribute.getText())[ FD ]
Line_9 $$ file.acceptChildren(new XmlRecursiveElementVisitor() -->Line_11 $$ super.visitElement(psiElement)[ FD ]
Line_8 $$ final StringBuilder result = new StringBuilder()-->Line_36 $$ result.append(xmlAttribute.getName()).append("='").append(s).append('\'')[ FD ]
Line_2 $$ public static String processAndSaveAllSchemas(@NotNull XmlFile file, @NotNull final Map<String, String> scannedToFileName, @NotNull final SchemaReferenceProcessor schemaReferenceProcessor) -->Line_9 $$ file.acceptChildren(new XmlRecursiveElementVisitor() [ CD ]
Line_20 $$ replaced = true-->Line_37 $$ replaced = true[ FD ]
Line_9 $$ file.acceptChildren(new XmlRecursiveElementVisitor() -->Line_24 $$ final XmlNSDescriptor nsDescriptor = xmlAttribute.getParent().getNSDescriptor(value, true)[ FD ]
Line_2 $$ public static String processAndSaveAllSchemas(@NotNull XmlFile file, @NotNull final Map<String, String> scannedToFileName, @NotNull final SchemaReferenceProcessor schemaReferenceProcessor) -->Line_23 $$ if (!scannedToFileName.containsKey(value)) [ FD ]
Line_5 $$ if (previous != null)-->Line_6 $$ return previous[ CD ]
Line_23 $$ if (!scannedToFileName.containsKey(value)) -->Line_24 $$ final XmlNSDescriptor nsDescriptor = xmlAttribute.getParent().getNSDescriptor(value, true)[ CD ]
Line_49 $$ if (virtualFile != null) -->Line_50 $$ bytes = content.getBytes(virtualFile.getCharset())[ CD ]
Line_9 $$ file.acceptChildren(new XmlRecursiveElementVisitor() -->Line_12 $$ if (psiElement instanceof LeafPsiElement) [ CD ]
Line_19 $$ if (xmlAttribute.isNamespaceDeclaration()) -->Line_20 $$ replaced = true[ CD ]
Line_9 $$ file.acceptChildren(new XmlRecursiveElementVisitor() -->Line_22 $$ result.append(xmlAttribute.getText()).append(" ")[ FD ]
Line_8 $$ final StringBuilder result = new StringBuilder()-->Line_43 $$ result.append(xmlAttribute.getText())[ FD ]
Line_8 $$ final StringBuilder result = new StringBuilder()-->Line_47 $$ final String content = result.toString()[ FD ]
Line_37 $$ replaced = true-->Line_42 $$ if (!replaced)[ FD ]
Line_9 $$ file.acceptChildren(new XmlRecursiveElementVisitor() -->Line_18 $$ boolean replaced = false[ CD ]
Line_9 $$ file.acceptChildren(new XmlRecursiveElementVisitor() -->Line_29 $$ if ("schemaLocation".equals(xmlAttribute.getName())) [ FD ]
Line_9 $$ file.acceptChildren(new XmlRecursiveElementVisitor() -->Line_19 $$ if (xmlAttribute.isNamespaceDeclaration()) [ FD ]
Line_18 $$ boolean replaced = false-->Line_42 $$ if (!replaced)[ FD ]
Line_9 $$ file.acceptChildren(new XmlRecursiveElementVisitor() -->Line_33 $$ if (psiElement instanceof XmlFile) [ FD ]
Line_34 $$ final String s = processAndSaveAllSchemas(((XmlFile) psiElement), scannedToFileName, schemaReferenceProcessor)-->Line_36 $$ result.append(xmlAttribute.getName()).append("='").append(s).append('\'')[ FD ]
Line_2 $$ public static String processAndSaveAllSchemas(@NotNull XmlFile file, @NotNull final Map<String, String> scannedToFileName, @NotNull final SchemaReferenceProcessor schemaReferenceProcessor) -->Line_49 $$ if (virtualFile != null) [ CD ]
Line_2 $$ public static String processAndSaveAllSchemas(@NotNull XmlFile file, @NotNull final Map<String, String> scannedToFileName, @NotNull final SchemaReferenceProcessor schemaReferenceProcessor) -->Line_46 $$ final VirtualFile virtualFile = file.getVirtualFile()[ CD ]
Line_21 $$ final String value = xmlAttribute.getValue()-->Line_23 $$ if (!scannedToFileName.containsKey(value)) [ FD ]
Line_31 $$ if (references.length > 0) -->Line_33 $$ if (psiElement instanceof XmlFile) [ CD ]
Line_3 $$ final String fileName = file.getName()-->Line_7 $$ scannedToFileName.put(fileName, fileName)[ FD ]
Line_23 $$ if (!scannedToFileName.containsKey(value)) -->Line_25 $$ if (nsDescriptor != null) [ CD ]
Line_9 $$ file.acceptChildren(new XmlRecursiveElementVisitor() -->Line_13 $$ final String text = psiElement.getText()[ FD ]
Line_18 $$ boolean replaced = false-->Line_20 $$ replaced = true[ FD ]
