Line_2 $$ public void testQueryForObjectWithMapAndInteger() throws Exception -->Line_8 $$ Object o = template.queryForObject("SELECT AGE FROM CUSTMR WHERE ID = :id", parms, Integer.class)[ CD ]
Line_2 $$ public void testQueryForObjectWithMapAndInteger() throws Exception -->Line_7 $$ parms.put("id", 3)[ CD ]
Line_2 $$ public void testQueryForObjectWithMapAndInteger() throws Exception -->Line_9 $$ assertTrue("Correct result type", o instanceof Integer)[ CD ]
Line_2 $$ public void testQueryForObjectWithMapAndInteger() throws Exception -->Line_4 $$ given(resultSet.next()).willReturn(true, false)[ CD ]
Line_6 $$ Map<String, Object> parms = new HashMap<String, Object>()-->Line_7 $$ parms.put("id", 3)[ FD ]
Line_2 $$ public void testQueryForObjectWithMapAndInteger() throws Exception -->Line_11 $$ verify(preparedStatement).setObject(1, 3)[ CD ]
Line_2 $$ public void testQueryForObjectWithMapAndInteger() throws Exception -->Line_6 $$ Map<String, Object> parms = new HashMap<String, Object>()[ CD ]
Line_2 $$ public void testQueryForObjectWithMapAndInteger() throws Exception -->Line_10 $$ verify(connection).prepareStatement("SELECT AGE FROM CUSTMR WHERE ID = ?")[ CD ]
Line_2 $$ public void testQueryForObjectWithMapAndInteger() throws Exception -->Line_3 $$ given(resultSet.getMetaData()).willReturn(resultSetMetaData)[ CD ]
Line_6 $$ Map<String, Object> parms = new HashMap<String, Object>()-->Line_8 $$ Object o = template.queryForObject("SELECT AGE FROM CUSTMR WHERE ID = :id", parms, Integer.class)[ FD ]
Line_2 $$ public void testQueryForObjectWithMapAndInteger() throws Exception -->Line_5 $$ given(resultSet.getInt(1)).willReturn(22)[ CD ]
