Line_2 $$ public void testSoftLeaseRecovery() throws Exception -->Line_19 $$ cluster.setLeasePeriod(SHORT_LEASE_PERIOD, LONG_LEASE_PERIOD)[ CD ]
Line_2 $$ public void testSoftLeaseRecovery() throws Exception -->Line_18 $$ dfs.dfs.getLeaseRenewer().interruptAndJoin()[ CD ]
Line_23 $$ boolean done = false-->Line_30 $$ done = true[ FD ]
Line_23 $$ boolean done = false-->Line_24 $$ for (int i = 0; i < 10 && !done; i++) [ FD ]
Line_7 $$ String filestr = "/foo" + AppendTestUtil.nextInt()-->Line_11 $$ assertTrue(dfs.dfs.exists(filestr))[ FD ]
Line_12 $$ int size = AppendTestUtil.nextInt(FILE_SIZE)-->Line_14 $$ stm.write(buffer, 0, size)[ FD ]
Line_2 $$ public void testSoftLeaseRecovery() throws Exception -->Line_17 $$ AppendTestUtil.LOG.info("leasechecker.interruptAndJoin()")[ CD ]
Line_24 $$ for (int i = 0; i < 10 && !done; i++) -->Line_25 $$ AppendTestUtil.LOG.info("i=" + i)[ CD ]
Line_2 $$ public void testSoftLeaseRecovery() throws Exception -->Line_22 $$ FileSystem dfs2 = DFSTestUtil.getFileSystemAs(ugi, conf)[ CD ]
Line_36 $$ if (!done) -->Line_37 $$ AppendTestUtil.LOG.info("sleep " + 5000 + "ms")[ CD ]
Line_23 $$ boolean done = false-->Line_44 $$ assertTrue(done)[ FD ]
Line_3 $$ Map<String, String[]> u2g_map = new HashMap<String, String[]>(1)-->Line_4 $$ u2g_map.put(fakeUsername, new String[] [ FD ]
Line_2 $$ public void testSoftLeaseRecovery() throws Exception -->Line_46 $$ AppendTestUtil.LOG.info("Lease for file " + filepath + " is recovered. " + "Validating its contents now...")[ CD ]
Line_2 $$ public void testSoftLeaseRecovery() throws Exception -->Line_15 $$ AppendTestUtil.LOG.info("hflush")[ CD ]
Line_2 $$ public void testSoftLeaseRecovery() throws Exception -->Line_12 $$ int size = AppendTestUtil.nextInt(FILE_SIZE)[ CD ]
Line_2 $$ public void testSoftLeaseRecovery() throws Exception -->Line_4 $$ u2g_map.put(fakeUsername, new String[] [ CD ]
Line_2 $$ public void testSoftLeaseRecovery() throws Exception -->Line_44 $$ assertTrue(done)[ CD ]
Line_9 $$ Path filepath = new Path(filestr)-->Line_50 $$ AppendTestUtil.checkFullFile(dfs, filepath, size, buffer, filestr)[ FD ]
Line_2 $$ public void testSoftLeaseRecovery() throws Exception -->Line_24 $$ for (int i = 0; i < 10 && !done; i++) [ CD ]
Line_24 $$ for (int i = 0; i < 10 && !done; i++) -->Line_36 $$ if (!done) [ CD ]
Line_2 $$ public void testSoftLeaseRecovery() throws Exception -->Line_6 $$ cluster.setLeasePeriod(HdfsConstants.LEASE_SOFTLIMIT_PERIOD, HdfsConstants.LEASE_HARDLIMIT_PERIOD)[ CD ]
Line_2 $$ public void testSoftLeaseRecovery() throws Exception -->Line_14 $$ stm.write(buffer, 0, size)[ CD ]
Line_2 $$ public void testSoftLeaseRecovery() throws Exception -->Line_9 $$ Path filepath = new Path(filestr)[ CD ]
Line_2 $$ public void testSoftLeaseRecovery() throws Exception -->Line_11 $$ assertTrue(dfs.dfs.exists(filestr))[ CD ]
Line_3 $$ Map<String, String[]> u2g_map = new HashMap<String, String[]>(1)-->Line_5 $$ DFSTestUtil.updateConfWithFakeGroupMapping(conf, u2g_map)[ FD ]
Line_9 $$ Path filepath = new Path(filestr)-->Line_27 $$ dfs2.create(filepath, false, BUF_SIZE, REPLICATION_NUM, BLOCK_SIZE)[ FD ]
Line_23 $$ boolean done = false-->Line_36 $$ if (!done) [ FD ]
Line_2 $$ public void testSoftLeaseRecovery() throws Exception -->Line_47 $$ long fileSize = dfs.getFileStatus(filepath).getLen()[ CD ]
Line_30 $$ done = true-->Line_24 $$ for (int i = 0; i < 10 && !done; i++) [ FD ]
Line_2 $$ public void testSoftLeaseRecovery() throws Exception -->Line_7 $$ String filestr = "/foo" + AppendTestUtil.nextInt()[ CD ]
Line_21 $$ UserGroupInformation ugi = UserGroupInformation.createUserForTesting(fakeUsername, new String[] -->Line_22 $$ FileSystem dfs2 = DFSTestUtil.getFileSystemAs(ugi, conf)[ FD ]
Line_2 $$ public void testSoftLeaseRecovery() throws Exception -->Line_23 $$ boolean done = false[ CD ]
Line_9 $$ Path filepath = new Path(filestr)-->Line_10 $$ FSDataOutputStream stm = dfs.create(filepath, true, BUF_SIZE, REPLICATION_NUM, BLOCK_SIZE)[ FD ]
Line_9 $$ Path filepath = new Path(filestr)-->Line_47 $$ long fileSize = dfs.getFileStatus(filepath).getLen()[ FD ]
Line_2 $$ public void testSoftLeaseRecovery() throws Exception -->Line_3 $$ Map<String, String[]> u2g_map = new HashMap<String, String[]>(1)[ CD ]
Line_2 $$ public void testSoftLeaseRecovery() throws Exception -->Line_48 $$ assertTrue("File should be " + size + " bytes, but is actually " + " found to be " + fileSize + " bytes", fileSize == size)[ CD ]
Line_7 $$ String filestr = "/foo" + AppendTestUtil.nextInt()-->Line_50 $$ AppendTestUtil.checkFullFile(dfs, filepath, size, buffer, filestr)[ FD ]
Line_2 $$ public void testSoftLeaseRecovery() throws Exception -->Line_5 $$ DFSTestUtil.updateConfWithFakeGroupMapping(conf, u2g_map)[ CD ]
Line_10 $$ FSDataOutputStream stm = dfs.create(filepath, true, BUF_SIZE, REPLICATION_NUM, BLOCK_SIZE)-->Line_16 $$ stm.hflush()[ FD ]
Line_2 $$ public void testSoftLeaseRecovery() throws Exception -->Line_21 $$ UserGroupInformation ugi = UserGroupInformation.createUserForTesting(fakeUsername, new String[] [ CD ]
Line_10 $$ FSDataOutputStream stm = dfs.create(filepath, true, BUF_SIZE, REPLICATION_NUM, BLOCK_SIZE)-->Line_14 $$ stm.write(buffer, 0, size)[ FD ]
Line_30 $$ done = true-->Line_36 $$ if (!done) [ FD ]
Line_2 $$ public void testSoftLeaseRecovery() throws Exception -->Line_8 $$ AppendTestUtil.LOG.info("filestr=" + filestr)[ CD ]
Line_22 $$ FileSystem dfs2 = DFSTestUtil.getFileSystemAs(ugi, conf)-->Line_27 $$ dfs2.create(filepath, false, BUF_SIZE, REPLICATION_NUM, BLOCK_SIZE)[ FD ]
Line_2 $$ public void testSoftLeaseRecovery() throws Exception -->Line_49 $$ AppendTestUtil.LOG.info("File size is good. " + "Now validating data and sizes from datanodes...")[ CD ]
Line_2 $$ public void testSoftLeaseRecovery() throws Exception -->Line_50 $$ AppendTestUtil.checkFullFile(dfs, filepath, size, buffer, filestr)[ CD ]
Line_12 $$ int size = AppendTestUtil.nextInt(FILE_SIZE)-->Line_50 $$ AppendTestUtil.checkFullFile(dfs, filepath, size, buffer, filestr)[ FD ]
Line_2 $$ public void testSoftLeaseRecovery() throws Exception -->Line_10 $$ FSDataOutputStream stm = dfs.create(filepath, true, BUF_SIZE, REPLICATION_NUM, BLOCK_SIZE)[ CD ]
Line_2 $$ public void testSoftLeaseRecovery() throws Exception -->Line_13 $$ AppendTestUtil.LOG.info("size=" + size)[ CD ]
Line_2 $$ public void testSoftLeaseRecovery() throws Exception -->Line_16 $$ stm.hflush()[ CD ]
Line_30 $$ done = true-->Line_44 $$ assertTrue(done)[ FD ]
