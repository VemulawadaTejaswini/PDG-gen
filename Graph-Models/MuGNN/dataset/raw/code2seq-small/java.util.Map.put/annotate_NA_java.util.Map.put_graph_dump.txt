Line_2 $$ public void annotate(@NotNull final VirtualFile contentRoot, @NotNull final CoverageSuitesBundle suite, @NotNull final CoverageDataManager dataManager, @NotNull final ProjectData data, final Project project, final Annotator annotator) -->Line_6 $$ final ProjectFileIndex index = ProjectRootManager.getInstance(project).getFileIndex()[ FD ]
Line_2 $$ public void annotate(@NotNull final VirtualFile contentRoot, @NotNull final CoverageSuitesBundle suite, @NotNull final CoverageDataManager dataManager, @NotNull final ProjectData data, final Project project, final Annotator annotator) -->Line_12 $$ collectFolderCoverage(contentRoot, dataManager, annotator, data, suite.isTrackTestFolders(), index, suite.getCoverageEngine(), ContainerUtil.<VirtualFile>newHashSet(), Collections.unmodifiableMap(normalizedFiles2Files))[ FD ]
Line_2 $$ public void annotate(@NotNull final VirtualFile contentRoot, @NotNull final CoverageSuitesBundle suite, @NotNull final CoverageDataManager dataManager, @NotNull final ProjectData data, final Project project, final Annotator annotator) -->Line_7 $$ final Set<String> files = data.getClasses().keySet()[ CD ]
Line_6 $$ final ProjectFileIndex index = ProjectRootManager.getInstance(project).getFileIndex()-->Line_12 $$ collectFolderCoverage(contentRoot, dataManager, annotator, data, suite.isTrackTestFolders(), index, suite.getCoverageEngine(), ContainerUtil.<VirtualFile>newHashSet(), Collections.unmodifiableMap(normalizedFiles2Files))[ FD ]
Line_2 $$ public void annotate(@NotNull final VirtualFile contentRoot, @NotNull final CoverageSuitesBundle suite, @NotNull final CoverageDataManager dataManager, @NotNull final ProjectData data, final Project project, final Annotator annotator) -->Line_12 $$ collectFolderCoverage(contentRoot, dataManager, annotator, data, suite.isTrackTestFolders(), index, suite.getCoverageEngine(), ContainerUtil.<VirtualFile>newHashSet(), Collections.unmodifiableMap(normalizedFiles2Files))[ CD ]
Line_3 $$ if (!contentRoot.isValid()) -->Line_4 $$ return[ CD ]
Line_2 $$ public void annotate(@NotNull final VirtualFile contentRoot, @NotNull final CoverageSuitesBundle suite, @NotNull final CoverageDataManager dataManager, @NotNull final ProjectData data, final Project project, final Annotator annotator) -->Line_3 $$ if (!contentRoot.isValid()) [ CD ]
Line_2 $$ public void annotate(@NotNull final VirtualFile contentRoot, @NotNull final CoverageSuitesBundle suite, @NotNull final CoverageDataManager dataManager, @NotNull final ProjectData data, final Project project, final Annotator annotator) -->Line_8 $$ final Map<String, String> normalizedFiles2Files = ContainerUtil.newHashMap()[ CD ]
Line_2 $$ public void annotate(@NotNull final VirtualFile contentRoot, @NotNull final CoverageSuitesBundle suite, @NotNull final CoverageDataManager dataManager, @NotNull final ProjectData data, final Project project, final Annotator annotator) -->Line_7 $$ final Set<String> files = data.getClasses().keySet()[ FD ]
Line_8 $$ final Map<String, String> normalizedFiles2Files = ContainerUtil.newHashMap()-->Line_10 $$ normalizedFiles2Files.put(normalizeFilePath(file), file)[ FD ]
Line_9 $$ for (final String file : files) -->Line_10 $$ normalizedFiles2Files.put(normalizeFilePath(file), file)[ FD ]
Line_8 $$ final Map<String, String> normalizedFiles2Files = ContainerUtil.newHashMap()-->Line_12 $$ collectFolderCoverage(contentRoot, dataManager, annotator, data, suite.isTrackTestFolders(), index, suite.getCoverageEngine(), ContainerUtil.<VirtualFile>newHashSet(), Collections.unmodifiableMap(normalizedFiles2Files))[ FD ]
Line_2 $$ public void annotate(@NotNull final VirtualFile contentRoot, @NotNull final CoverageSuitesBundle suite, @NotNull final CoverageDataManager dataManager, @NotNull final ProjectData data, final Project project, final Annotator annotator) -->Line_6 $$ final ProjectFileIndex index = ProjectRootManager.getInstance(project).getFileIndex()[ CD ]
Line_2 $$ public void annotate(@NotNull final VirtualFile contentRoot, @NotNull final CoverageSuitesBundle suite, @NotNull final CoverageDataManager dataManager, @NotNull final ProjectData data, final Project project, final Annotator annotator) -->Line_3 $$ if (!contentRoot.isValid()) [ FD ]
