Line_3 $$ FreeMarkerView fv = new FreeMarkerView()-->Line_12 $$ fv.setUrl("templateName")[ FD ]
Line_18 $$ HttpServletResponse response = new MockHttpServletResponse()-->Line_22 $$ assertEquals(AbstractView.DEFAULT_CONTENT_TYPE, response.getContentType())[ FD ]
Line_4 $$ WebApplicationContext wac = mock(WebApplicationContext.class)-->Line_10 $$ given(wac.getBeansOfType(FreeMarkerConfig.class, true, false)).willReturn(configs)[ FD ]
Line_2 $$ public void validTemplateName() throws Exception -->Line_5 $$ MockServletContext sc = new MockServletContext()[ CD ]
Line_2 $$ public void validTemplateName() throws Exception -->Line_11 $$ given(wac.getServletContext()).willReturn(sc)[ CD ]
Line_2 $$ public void validTemplateName() throws Exception -->Line_4 $$ WebApplicationContext wac = mock(WebApplicationContext.class)[ CD ]
Line_3 $$ FreeMarkerView fv = new FreeMarkerView()-->Line_13 $$ fv.setApplicationContext(wac)[ FD ]
Line_2 $$ public void validTemplateName() throws Exception -->Line_15 $$ request.addPreferredLocale(Locale.US)[ CD ]
Line_2 $$ public void validTemplateName() throws Exception -->Line_14 $$ MockHttpServletRequest request = new MockHttpServletRequest()[ CD ]
Line_19 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_20 $$ model.put("myattr", "myvalue")[ FD ]
Line_14 $$ MockHttpServletRequest request = new MockHttpServletRequest()-->Line_21 $$ fv.render(model, request, response)[ FD ]
Line_2 $$ public void validTemplateName() throws Exception -->Line_19 $$ Map<String, Object> model = new HashMap<String, Object>()[ CD ]
Line_6 $$ Map<String, FreeMarkerConfig> configs = new HashMap<String, FreeMarkerConfig>()-->Line_9 $$ configs.put("configurer", configurer)[ FD ]
Line_2 $$ public void validTemplateName() throws Exception -->Line_9 $$ configs.put("configurer", configurer)[ CD ]
Line_2 $$ public void validTemplateName() throws Exception -->Line_16 $$ request.setAttribute(DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE, wac)[ CD ]
Line_2 $$ public void validTemplateName() throws Exception -->Line_10 $$ given(wac.getBeansOfType(FreeMarkerConfig.class, true, false)).willReturn(configs)[ CD ]
Line_4 $$ WebApplicationContext wac = mock(WebApplicationContext.class)-->Line_16 $$ request.setAttribute(DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE, wac)[ FD ]
Line_2 $$ public void validTemplateName() throws Exception -->Line_22 $$ assertEquals(AbstractView.DEFAULT_CONTENT_TYPE, response.getContentType())[ CD ]
Line_4 $$ WebApplicationContext wac = mock(WebApplicationContext.class)-->Line_13 $$ fv.setApplicationContext(wac)[ FD ]
Line_14 $$ MockHttpServletRequest request = new MockHttpServletRequest()-->Line_15 $$ request.addPreferredLocale(Locale.US)[ FD ]
Line_2 $$ public void validTemplateName() throws Exception -->Line_21 $$ fv.render(model, request, response)[ CD ]
Line_2 $$ public void validTemplateName() throws Exception -->Line_12 $$ fv.setUrl("templateName")[ CD ]
Line_2 $$ public void validTemplateName() throws Exception -->Line_17 $$ request.setAttribute(DispatcherServlet.LOCALE_RESOLVER_ATTRIBUTE, new AcceptHeaderLocaleResolver())[ CD ]
Line_7 $$ FreeMarkerConfigurer configurer = new FreeMarkerConfigurer()-->Line_8 $$ configurer.setConfiguration(new TestConfiguration())[ FD ]
Line_4 $$ WebApplicationContext wac = mock(WebApplicationContext.class)-->Line_11 $$ given(wac.getServletContext()).willReturn(sc)[ FD ]
Line_2 $$ public void validTemplateName() throws Exception -->Line_6 $$ Map<String, FreeMarkerConfig> configs = new HashMap<String, FreeMarkerConfig>()[ CD ]
Line_3 $$ FreeMarkerView fv = new FreeMarkerView()-->Line_21 $$ fv.render(model, request, response)[ FD ]
Line_19 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_21 $$ fv.render(model, request, response)[ FD ]
Line_2 $$ public void validTemplateName() throws Exception -->Line_13 $$ fv.setApplicationContext(wac)[ CD ]
Line_2 $$ public void validTemplateName() throws Exception -->Line_7 $$ FreeMarkerConfigurer configurer = new FreeMarkerConfigurer()[ CD ]
Line_7 $$ FreeMarkerConfigurer configurer = new FreeMarkerConfigurer()-->Line_9 $$ configs.put("configurer", configurer)[ FD ]
Line_2 $$ public void validTemplateName() throws Exception -->Line_18 $$ HttpServletResponse response = new MockHttpServletResponse()[ CD ]
Line_18 $$ HttpServletResponse response = new MockHttpServletResponse()-->Line_21 $$ fv.render(model, request, response)[ FD ]
Line_14 $$ MockHttpServletRequest request = new MockHttpServletRequest()-->Line_17 $$ request.setAttribute(DispatcherServlet.LOCALE_RESOLVER_ATTRIBUTE, new AcceptHeaderLocaleResolver())[ FD ]
Line_2 $$ public void validTemplateName() throws Exception -->Line_3 $$ FreeMarkerView fv = new FreeMarkerView()[ CD ]
Line_14 $$ MockHttpServletRequest request = new MockHttpServletRequest()-->Line_16 $$ request.setAttribute(DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE, wac)[ FD ]
Line_2 $$ public void validTemplateName() throws Exception -->Line_20 $$ model.put("myattr", "myvalue")[ CD ]
Line_6 $$ Map<String, FreeMarkerConfig> configs = new HashMap<String, FreeMarkerConfig>()-->Line_10 $$ given(wac.getBeansOfType(FreeMarkerConfig.class, true, false)).willReturn(configs)[ FD ]
Line_2 $$ public void validTemplateName() throws Exception -->Line_8 $$ configurer.setConfiguration(new TestConfiguration())[ CD ]
Line_5 $$ MockServletContext sc = new MockServletContext()-->Line_11 $$ given(wac.getServletContext()).willReturn(sc)[ FD ]
