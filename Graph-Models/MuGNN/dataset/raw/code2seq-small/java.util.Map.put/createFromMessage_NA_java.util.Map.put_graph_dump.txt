Line_2 $$ public void createFromMessage() -->Line_10 $$ NativeMessageHeaderAccessor headerAccessor = new NativeMessageHeaderAccessor(message)[ CD ]
Line_11 $$ Map<String, Object> actual = headerAccessor.toMap()-->Line_13 $$ assertEquals("b", actual.get("a"))[ FD ]
Line_2 $$ public void createFromMessage() -->Line_8 $$ inputHeaders.put(NativeMessageHeaderAccessor.NATIVE_HEADERS, inputNativeHeaders)[ CD ]
Line_3 $$ MultiValueMap<String, String> inputNativeHeaders = new LinkedMultiValueMap()-->Line_4 $$ inputNativeHeaders.add("foo", "bar")[ FD ]
Line_2 $$ public void createFromMessage() -->Line_11 $$ Map<String, Object> actual = headerAccessor.toMap()[ CD ]
Line_2 $$ public void createFromMessage() -->Line_6 $$ Map<String, Object> inputHeaders = new HashMap<String, Object>()[ CD ]
Line_2 $$ public void createFromMessage() -->Line_9 $$ GenericMessage<String> message = new GenericMessage("p", inputHeaders)[ CD ]
Line_6 $$ Map<String, Object> inputHeaders = new HashMap<String, Object>()-->Line_7 $$ inputHeaders.put("a", "b")[ FD ]
Line_10 $$ NativeMessageHeaderAccessor headerAccessor = new NativeMessageHeaderAccessor(message)-->Line_11 $$ Map<String, Object> actual = headerAccessor.toMap()[ FD ]
Line_2 $$ public void createFromMessage() -->Line_5 $$ inputNativeHeaders.add("bar", "baz")[ CD ]
Line_11 $$ Map<String, Object> actual = headerAccessor.toMap()-->Line_12 $$ assertEquals(2, actual.size())[ FD ]
Line_2 $$ public void createFromMessage() -->Line_14 $$ assertNotNull(actual.get(NativeMessageHeaderAccessor.NATIVE_HEADERS))[ CD ]
Line_3 $$ MultiValueMap<String, String> inputNativeHeaders = new LinkedMultiValueMap()-->Line_5 $$ inputNativeHeaders.add("bar", "baz")[ FD ]
Line_2 $$ public void createFromMessage() -->Line_12 $$ assertEquals(2, actual.size())[ CD ]
Line_2 $$ public void createFromMessage() -->Line_16 $$ assertNotSame(inputNativeHeaders, actual.get(NativeMessageHeaderAccessor.NATIVE_HEADERS))[ CD ]
Line_2 $$ public void createFromMessage() -->Line_7 $$ inputHeaders.put("a", "b")[ CD ]
Line_3 $$ MultiValueMap<String, String> inputNativeHeaders = new LinkedMultiValueMap()-->Line_8 $$ inputHeaders.put(NativeMessageHeaderAccessor.NATIVE_HEADERS, inputNativeHeaders)[ FD ]
Line_2 $$ public void createFromMessage() -->Line_15 $$ assertEquals(inputNativeHeaders, actual.get(NativeMessageHeaderAccessor.NATIVE_HEADERS))[ CD ]
Line_6 $$ Map<String, Object> inputHeaders = new HashMap<String, Object>()-->Line_8 $$ inputHeaders.put(NativeMessageHeaderAccessor.NATIVE_HEADERS, inputNativeHeaders)[ FD ]
Line_11 $$ Map<String, Object> actual = headerAccessor.toMap()-->Line_16 $$ assertNotSame(inputNativeHeaders, actual.get(NativeMessageHeaderAccessor.NATIVE_HEADERS))[ FD ]
Line_2 $$ public void createFromMessage() -->Line_4 $$ inputNativeHeaders.add("foo", "bar")[ CD ]
Line_2 $$ public void createFromMessage() -->Line_3 $$ MultiValueMap<String, String> inputNativeHeaders = new LinkedMultiValueMap()[ CD ]
Line_3 $$ MultiValueMap<String, String> inputNativeHeaders = new LinkedMultiValueMap()-->Line_16 $$ assertNotSame(inputNativeHeaders, actual.get(NativeMessageHeaderAccessor.NATIVE_HEADERS))[ FD ]
Line_11 $$ Map<String, Object> actual = headerAccessor.toMap()-->Line_15 $$ assertEquals(inputNativeHeaders, actual.get(NativeMessageHeaderAccessor.NATIVE_HEADERS))[ FD ]
Line_2 $$ public void createFromMessage() -->Line_13 $$ assertEquals("b", actual.get("a"))[ CD ]
Line_11 $$ Map<String, Object> actual = headerAccessor.toMap()-->Line_14 $$ assertNotNull(actual.get(NativeMessageHeaderAccessor.NATIVE_HEADERS))[ FD ]
Line_3 $$ MultiValueMap<String, String> inputNativeHeaders = new LinkedMultiValueMap()-->Line_15 $$ assertEquals(inputNativeHeaders, actual.get(NativeMessageHeaderAccessor.NATIVE_HEADERS))[ FD ]
