Line_2 $$ public void testGetValuePerformance() throws Exception -->Line_4 $$ Map<String, String> map = new HashMap<String, String>()[ CD ]
Line_2 $$ public void testGetValuePerformance() throws Exception -->Line_3 $$ Assume.group(TestGroup.PERFORMANCE)[ CD ]
Line_4 $$ Map<String, String> map = new HashMap<String, String>()-->Line_5 $$ map.put("key", "value")[ FD ]
Line_6 $$ EvaluationContext context = new StandardEvaluationContext(map)-->Line_12 $$ expr.getValue(context)[ FD ]
Line_2 $$ public void testGetValuePerformance() throws Exception -->Line_14 $$ s.stop()[ CD ]
Line_2 $$ public void testGetValuePerformance() throws Exception -->Line_9 $$ StopWatch s = new StopWatch()[ CD ]
Line_11 $$ for (int i = 0; i < 10000; i++) -->Line_12 $$ expr.getValue(context)[ CD ]
Line_9 $$ StopWatch s = new StopWatch()-->Line_10 $$ s.start()[ FD ]
Line_2 $$ public void testGetValuePerformance() throws Exception -->Line_11 $$ for (int i = 0; i < 10000; i++) [ CD ]
Line_9 $$ StopWatch s = new StopWatch()-->Line_14 $$ s.stop()[ FD ]
Line_7 $$ ExpressionParser spelExpressionParser = new SpelExpressionParser()-->Line_8 $$ Expression expr = spelExpressionParser.parseExpression("#root['key']")[ FD ]
Line_2 $$ public void testGetValuePerformance() throws Exception -->Line_10 $$ s.start()[ CD ]
Line_2 $$ public void testGetValuePerformance() throws Exception -->Line_8 $$ Expression expr = spelExpressionParser.parseExpression("#root['key']")[ CD ]
Line_9 $$ StopWatch s = new StopWatch()-->Line_15 $$ assertThat(s.getTotalTimeMillis(), lessThan(200L))[ FD ]
Line_2 $$ public void testGetValuePerformance() throws Exception -->Line_15 $$ assertThat(s.getTotalTimeMillis(), lessThan(200L))[ CD ]
Line_2 $$ public void testGetValuePerformance() throws Exception -->Line_6 $$ EvaluationContext context = new StandardEvaluationContext(map)[ CD ]
Line_8 $$ Expression expr = spelExpressionParser.parseExpression("#root['key']")-->Line_12 $$ expr.getValue(context)[ FD ]
Line_2 $$ public void testGetValuePerformance() throws Exception -->Line_5 $$ map.put("key", "value")[ CD ]
Line_2 $$ public void testGetValuePerformance() throws Exception -->Line_7 $$ ExpressionParser spelExpressionParser = new SpelExpressionParser()[ CD ]
