Line_8 $$ Layout layout = LayoutLocalServiceUtil.getLayout(plid)-->Line_19 $$ for (Layout childLayout : layout.getAllChildren()) [ FD ]
Line_14 $$ if (!layouts.contains(parentLayout)) -->Line_15 $$ layouts.add(parentLayout)[ CD ]
Line_2 $$ protected File exportLayoutsAsFile(ExportImportConfiguration exportImportConfiguration, Map<Long, Boolean> layoutIdMap, long remoteGroupId, HttpPrincipal httpPrincipal) throws PortalException -->Line_28 $$ Map<String, Serializable> settingsMap = exportImportConfiguration.getSettingsMap()[ CD ]
Line_8 $$ Layout layout = LayoutLocalServiceUtil.getLayout(plid)-->Line_10 $$ layouts.add(layout)[ FD ]
Line_2 $$ protected File exportLayoutsAsFile(ExportImportConfiguration exportImportConfiguration, Map<Long, Boolean> layoutIdMap, long remoteGroupId, HttpPrincipal httpPrincipal) throws PortalException -->Line_31 $$ return ExportImportLocalServiceUtil.exportLayoutsAsFile(exportImportConfiguration)[ FD ]
Line_13 $$ for (Layout parentLayout : parentLayouts) -->Line_15 $$ layouts.add(parentLayout)[ FD ]
Line_3 $$ List<Layout> layouts = new ArrayList()-->Line_14 $$ if (!layouts.contains(parentLayout)) [ FD ]
Line_6 $$ long plid = GetterUtil.getLong(String.valueOf(entry.getKey()))-->Line_8 $$ Layout layout = LayoutLocalServiceUtil.getLayout(plid)[ FD ]
Line_3 $$ List<Layout> layouts = new ArrayList()-->Line_20 $$ if (!layouts.contains(childLayout)) [ FD ]
Line_2 $$ protected File exportLayoutsAsFile(ExportImportConfiguration exportImportConfiguration, Map<Long, Boolean> layoutIdMap, long remoteGroupId, HttpPrincipal httpPrincipal) throws PortalException -->Line_30 $$ settingsMap.put("layoutIds", layoutIds)[ CD ]
Line_2 $$ protected File exportLayoutsAsFile(ExportImportConfiguration exportImportConfiguration, Map<Long, Boolean> layoutIdMap, long remoteGroupId, HttpPrincipal httpPrincipal) throws PortalException -->Line_3 $$ List<Layout> layouts = new ArrayList()[ CD ]
Line_28 $$ Map<String, Serializable> settingsMap = exportImportConfiguration.getSettingsMap()-->Line_30 $$ settingsMap.put("layoutIds", layoutIds)[ FD ]
Line_2 $$ protected File exportLayoutsAsFile(ExportImportConfiguration exportImportConfiguration, Map<Long, Boolean> layoutIdMap, long remoteGroupId, HttpPrincipal httpPrincipal) throws PortalException -->Line_4 $$ if (layoutIdMap != null) [ CD ]
Line_5 $$ for (Map.Entry<Long, Boolean> entry : layoutIdMap.entrySet()) -->Line_6 $$ long plid = GetterUtil.getLong(String.valueOf(entry.getKey()))[ FD ]
Line_9 $$ if (!layouts.contains(layout)) -->Line_10 $$ layouts.add(layout)[ CD ]
Line_27 $$ long[] layoutIds = ExportImportHelperUtil.getLayoutIds(layouts)-->Line_30 $$ settingsMap.put("layoutIds", layoutIds)[ FD ]
Line_2 $$ protected File exportLayoutsAsFile(ExportImportConfiguration exportImportConfiguration, Map<Long, Boolean> layoutIdMap, long remoteGroupId, HttpPrincipal httpPrincipal) throws PortalException -->Line_27 $$ long[] layoutIds = ExportImportHelperUtil.getLayoutIds(layouts)[ CD ]
Line_3 $$ List<Layout> layouts = new ArrayList()-->Line_9 $$ if (!layouts.contains(layout)) [ FD ]
Line_8 $$ Layout layout = LayoutLocalServiceUtil.getLayout(plid)-->Line_9 $$ if (!layouts.contains(layout)) [ FD ]
Line_2 $$ protected File exportLayoutsAsFile(ExportImportConfiguration exportImportConfiguration, Map<Long, Boolean> layoutIdMap, long remoteGroupId, HttpPrincipal httpPrincipal) throws PortalException -->Line_28 $$ Map<String, Serializable> settingsMap = exportImportConfiguration.getSettingsMap()[ FD ]
Line_5 $$ for (Map.Entry<Long, Boolean> entry : layoutIdMap.entrySet()) -->Line_7 $$ boolean includeChildren = entry.getValue()[ FD ]
Line_28 $$ Map<String, Serializable> settingsMap = exportImportConfiguration.getSettingsMap()-->Line_29 $$ settingsMap.remove("layoutIdMap")[ FD ]
Line_2 $$ protected File exportLayoutsAsFile(ExportImportConfiguration exportImportConfiguration, Map<Long, Boolean> layoutIdMap, long remoteGroupId, HttpPrincipal httpPrincipal) throws PortalException -->Line_31 $$ return ExportImportLocalServiceUtil.exportLayoutsAsFile(exportImportConfiguration)[ CD ]
Line_13 $$ for (Layout parentLayout : parentLayouts) -->Line_14 $$ if (!layouts.contains(parentLayout)) [ FD ]
Line_2 $$ protected File exportLayoutsAsFile(ExportImportConfiguration exportImportConfiguration, Map<Long, Boolean> layoutIdMap, long remoteGroupId, HttpPrincipal httpPrincipal) throws PortalException -->Line_5 $$ for (Map.Entry<Long, Boolean> entry : layoutIdMap.entrySet()) [ FD ]
Line_2 $$ protected File exportLayoutsAsFile(ExportImportConfiguration exportImportConfiguration, Map<Long, Boolean> layoutIdMap, long remoteGroupId, HttpPrincipal httpPrincipal) throws PortalException -->Line_12 $$ List<Layout> parentLayouts = getMissingRemoteParentLayouts(httpPrincipal, layout, remoteGroupId)[ FD ]
Line_8 $$ Layout layout = LayoutLocalServiceUtil.getLayout(plid)-->Line_12 $$ List<Layout> parentLayouts = getMissingRemoteParentLayouts(httpPrincipal, layout, remoteGroupId)[ FD ]
Line_19 $$ for (Layout childLayout : layout.getAllChildren()) -->Line_20 $$ if (!layouts.contains(childLayout)) [ FD ]
Line_3 $$ List<Layout> layouts = new ArrayList()-->Line_27 $$ long[] layoutIds = ExportImportHelperUtil.getLayoutIds(layouts)[ FD ]
Line_19 $$ for (Layout childLayout : layout.getAllChildren()) -->Line_21 $$ layouts.add(childLayout)[ FD ]
Line_2 $$ protected File exportLayoutsAsFile(ExportImportConfiguration exportImportConfiguration, Map<Long, Boolean> layoutIdMap, long remoteGroupId, HttpPrincipal httpPrincipal) throws PortalException -->Line_4 $$ if (layoutIdMap != null) [ FD ]
Line_3 $$ List<Layout> layouts = new ArrayList()-->Line_15 $$ layouts.add(parentLayout)[ FD ]
Line_3 $$ List<Layout> layouts = new ArrayList()-->Line_21 $$ layouts.add(childLayout)[ FD ]
Line_2 $$ protected File exportLayoutsAsFile(ExportImportConfiguration exportImportConfiguration, Map<Long, Boolean> layoutIdMap, long remoteGroupId, HttpPrincipal httpPrincipal) throws PortalException -->Line_29 $$ settingsMap.remove("layoutIdMap")[ CD ]
Line_3 $$ List<Layout> layouts = new ArrayList()-->Line_10 $$ layouts.add(layout)[ FD ]
Line_20 $$ if (!layouts.contains(childLayout)) -->Line_21 $$ layouts.add(childLayout)[ CD ]
