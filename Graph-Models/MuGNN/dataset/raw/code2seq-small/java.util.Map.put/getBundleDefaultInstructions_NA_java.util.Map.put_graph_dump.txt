Line_3 $$ Map<String, String> map = new HashMap()-->Line_6 $$ map.put(Constants.DONOTCOPY, "(.touch)")[ FD ]
Line_3 $$ Map<String, String> map = new HashMap()-->Line_10 $$ map.put(Constants.SOURCES, "false")[ FD ]
Line_2 $$ public Map<String, String> getBundleDefaultInstructions() -->Line_17 $$ String encoding = compileOptions.getEncoding()[ CD ]
Line_3 $$ Map<String, String> map = new HashMap()-->Line_4 $$ map.put(Constants.BUNDLE_SYMBOLICNAME, project.getName())[ FD ]
Line_14 $$ CompileOptions compileOptions = javaCompile.getOptions()-->Line_17 $$ String encoding = compileOptions.getEncoding()[ FD ]
Line_3 $$ Map<String, String> map = new HashMap()-->Line_5 $$ map.put(Constants.BUNDLE_VENDOR, "Liferay, Inc.")[ FD ]
Line_17 $$ String encoding = compileOptions.getEncoding()-->Line_18 $$ if (Validator.isNull(encoding)) [ FD ]
Line_2 $$ public Map<String, String> getBundleDefaultInstructions() -->Line_15 $$ map.put("Javac-Debug", _getOnOffValue(compileOptions.isDebug()))[ CD ]
Line_2 $$ public Map<String, String> getBundleDefaultInstructions() -->Line_14 $$ CompileOptions compileOptions = javaCompile.getOptions()[ CD ]
Line_3 $$ Map<String, String> map = new HashMap()-->Line_21 $$ map.put("Javac-Encoding", encoding)[ FD ]
Line_14 $$ CompileOptions compileOptions = javaCompile.getOptions()-->Line_16 $$ map.put("Javac-Deprecation", _getOnOffValue(compileOptions.isDeprecation()))[ FD ]
Line_2 $$ public Map<String, String> getBundleDefaultInstructions() -->Line_5 $$ map.put(Constants.BUNDLE_VENDOR, "Liferay, Inc.")[ CD ]
Line_17 $$ String encoding = compileOptions.getEncoding()-->Line_21 $$ map.put("Javac-Encoding", encoding)[ FD ]
Line_2 $$ public Map<String, String> getBundleDefaultInstructions() -->Line_4 $$ map.put(Constants.BUNDLE_SYMBOLICNAME, project.getName())[ CD ]
Line_18 $$ if (Validator.isNull(encoding)) -->Line_19 $$ encoding = System.getProperty("file.encoding")[ CD ]
Line_3 $$ Map<String, String> map = new HashMap()-->Line_9 $$ map.put(Constants.PLUGIN, StringUtil.merge(_BND_PLUGIN_CLASS_NAMES, ","))[ FD ]
Line_2 $$ public Map<String, String> getBundleDefaultInstructions() -->Line_24 $$ return map[ CD ]
Line_2 $$ public Map<String, String> getBundleDefaultInstructions() -->Line_13 $$ JavaCompile javaCompile = (JavaCompile) GradleUtil.getTask(project, JavaPlugin.COMPILE_JAVA_TASK_NAME)[ CD ]
Line_3 $$ Map<String, String> map = new HashMap()-->Line_23 $$ map.put("-sass", "*")[ FD ]
Line_2 $$ public Map<String, String> getBundleDefaultInstructions() -->Line_3 $$ Map<String, String> map = new HashMap()[ CD ]
Line_2 $$ public Map<String, String> getBundleDefaultInstructions() -->Line_6 $$ map.put(Constants.DONOTCOPY, "(.touch)")[ CD ]
Line_13 $$ JavaCompile javaCompile = (JavaCompile) GradleUtil.getTask(project, JavaPlugin.COMPILE_JAVA_TASK_NAME)-->Line_14 $$ CompileOptions compileOptions = javaCompile.getOptions()[ FD ]
Line_2 $$ public Map<String, String> getBundleDefaultInstructions() -->Line_16 $$ map.put("Javac-Deprecation", _getOnOffValue(compileOptions.isDeprecation()))[ CD ]
Line_17 $$ String encoding = compileOptions.getEncoding()-->Line_19 $$ encoding = System.getProperty("file.encoding")[ FD ]
Line_2 $$ public Map<String, String> getBundleDefaultInstructions() -->Line_8 $$ map.put(Constants.METATYPE, "*")[ CD ]
Line_2 $$ public Map<String, String> getBundleDefaultInstructions() -->Line_22 $$ map.put("-jsp", "*.jsp,*.jspf")[ CD ]
Line_14 $$ CompileOptions compileOptions = javaCompile.getOptions()-->Line_15 $$ map.put("Javac-Debug", _getOnOffValue(compileOptions.isDebug()))[ FD ]
Line_3 $$ Map<String, String> map = new HashMap()-->Line_7 $$ map.put(Constants.DSANNOTATIONS, "*")[ FD ]
Line_2 $$ public Map<String, String> getBundleDefaultInstructions() -->Line_7 $$ map.put(Constants.DSANNOTATIONS, "*")[ CD ]
Line_2 $$ public Map<String, String> getBundleDefaultInstructions() -->Line_18 $$ if (Validator.isNull(encoding)) [ CD ]
Line_2 $$ public Map<String, String> getBundleDefaultInstructions() -->Line_21 $$ map.put("Javac-Encoding", encoding)[ CD ]
Line_3 $$ Map<String, String> map = new HashMap()-->Line_16 $$ map.put("Javac-Deprecation", _getOnOffValue(compileOptions.isDeprecation()))[ FD ]
Line_19 $$ encoding = System.getProperty("file.encoding")-->Line_21 $$ map.put("Javac-Encoding", encoding)[ FD ]
Line_2 $$ public Map<String, String> getBundleDefaultInstructions() -->Line_9 $$ map.put(Constants.PLUGIN, StringUtil.merge(_BND_PLUGIN_CLASS_NAMES, ","))[ CD ]
Line_2 $$ public Map<String, String> getBundleDefaultInstructions() -->Line_12 $$ map.put("Git-SHA", "$[ CD ]
Line_2 $$ public Map<String, String> getBundleDefaultInstructions() -->Line_10 $$ map.put(Constants.SOURCES, "false")[ CD ]
Line_2 $$ public Map<String, String> getBundleDefaultInstructions() -->Line_23 $$ map.put("-sass", "*")[ CD ]
Line_3 $$ Map<String, String> map = new HashMap()-->Line_15 $$ map.put("Javac-Debug", _getOnOffValue(compileOptions.isDebug()))[ FD ]
Line_3 $$ Map<String, String> map = new HashMap()-->Line_22 $$ map.put("-jsp", "*.jsp,*.jspf")[ FD ]
Line_3 $$ Map<String, String> map = new HashMap()-->Line_12 $$ map.put("Git-SHA", "$[ FD ]
Line_2 $$ public Map<String, String> getBundleDefaultInstructions() -->Line_11 $$ map.put("Git-Descriptor", "$[ CD ]
Line_3 $$ Map<String, String> map = new HashMap()-->Line_8 $$ map.put(Constants.METATYPE, "*")[ FD ]
Line_3 $$ Map<String, String> map = new HashMap()-->Line_11 $$ map.put("Git-Descriptor", "$[ FD ]
