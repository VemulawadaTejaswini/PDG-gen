Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()[ CD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_37 $$ deploymentUnit.addToAttachmentList(ServletContextAttribute.ATTACHMENT_KEY, new ServletContextAttribute(FACES_ANNOTATIONS_SC_ATTR, instances))[ CD ]
Line_24 $$ final DotName className = ClassInfo.class.cast(target).name()-->Line_27 $$ annotatedClass = classLoader.loadClass(className.toString())[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_10 $$ if (module == null) [ CD ]
Line_22 $$ final AnnotationTarget target = annotationInstance.target()-->Line_23 $$ if (target instanceof ClassInfo) [ FD ]
Line_25 $$ final Class<?> annotatedClass-->Line_27 $$ annotatedClass = classLoader.loadClass(className.toString())[ FD ]
Line_23 $$ if (target instanceof ClassInfo) -->Line_24 $$ final DotName className = ClassInfo.class.cast(target).name()[ CD ]
Line_5 $$ final CompositeIndex compositeIndex = deploymentUnit.getAttachment(Attachments.COMPOSITE_ANNOTATION_INDEX)-->Line_6 $$ if (compositeIndex == null) [ FD ]
Line_24 $$ final DotName className = ClassInfo.class.cast(target).name()-->Line_29 $$ throw new DeploymentUnitProcessingException(JSFLogger.ROOT_LOGGER.classLoadingFailed(className))[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_9 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)[ CD ]
Line_27 $$ annotatedClass = classLoader.loadClass(className.toString())-->Line_31 $$ discoveredClasses.add(annotatedClass)[ FD ]
Line_6 $$ if (compositeIndex == null) -->Line_7 $$ return[ CD ]
Line_9 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)-->Line_10 $$ if (module == null) [ FD ]
Line_23 $$ if (target instanceof ClassInfo) -->Line_31 $$ discoveredClasses.add(annotatedClass)[ CD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_5 $$ final CompositeIndex compositeIndex = deploymentUnit.getAttachment(Attachments.COMPOSITE_ANNOTATION_INDEX)[ CD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_9 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_37 $$ deploymentUnit.addToAttachmentList(ServletContextAttribute.ATTACHMENT_KEY, new ServletContextAttribute(FACES_ANNOTATIONS_SC_ATTR, instances))[ FD ]
Line_25 $$ final Class<?> annotatedClass-->Line_31 $$ discoveredClasses.add(annotatedClass)[ FD ]
Line_4 $$ final Map<Class<? extends Annotation>, Set<Class<?>>> instances = new HashMap<Class<? extends Annotation>, Set<Class<?>>>()-->Line_20 $$ instances.put(annotation.annotationClass, discoveredClasses)[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_6 $$ if (compositeIndex == null) [ CD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_4 $$ final Map<Class<? extends Annotation>, Set<Class<?>>> instances = new HashMap<Class<? extends Annotation>, Set<Class<?>>>()[ CD ]
Line_15 $$ final List<AnnotationInstance> annotationInstances = compositeIndex.getAnnotations(annotation.indexName)-->Line_16 $$ if (annotationInstances == null || annotationInstances.isEmpty()) [ FD ]
Line_19 $$ final Set<Class<?>> discoveredClasses = new HashSet<Class<?>>()-->Line_31 $$ discoveredClasses.add(annotatedClass)[ FD ]
Line_5 $$ final CompositeIndex compositeIndex = deploymentUnit.getAttachment(Attachments.COMPOSITE_ANNOTATION_INDEX)-->Line_15 $$ final List<AnnotationInstance> annotationInstances = compositeIndex.getAnnotations(annotation.indexName)[ FD ]
Line_13 $$ final ClassLoader classLoader = module.getClassLoader()-->Line_27 $$ annotatedClass = classLoader.loadClass(className.toString())[ FD ]
Line_22 $$ final AnnotationTarget target = annotationInstance.target()-->Line_33 $$ throw new DeploymentUnitProcessingException(JSFLogger.ROOT_LOGGER.invalidAnnotationLocation(annotation, target))[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_13 $$ final ClassLoader classLoader = module.getClassLoader()[ CD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_5 $$ final CompositeIndex compositeIndex = deploymentUnit.getAttachment(Attachments.COMPOSITE_ANNOTATION_INDEX)[ FD ]
Line_10 $$ if (module == null) -->Line_11 $$ return[ CD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()[ FD ]
Line_22 $$ final AnnotationTarget target = annotationInstance.target()-->Line_24 $$ final DotName className = ClassInfo.class.cast(target).name()[ FD ]
Line_14 $$ for (FacesAnnotation annotation : FacesAnnotation.values()) -->Line_33 $$ throw new DeploymentUnitProcessingException(JSFLogger.ROOT_LOGGER.invalidAnnotationLocation(annotation, target))[ FD ]
Line_23 $$ if (target instanceof ClassInfo) -->Line_25 $$ final Class<?> annotatedClass[ CD ]
Line_9 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)-->Line_13 $$ final ClassLoader classLoader = module.getClassLoader()[ FD ]
Line_19 $$ final Set<Class<?>> discoveredClasses = new HashSet<Class<?>>()-->Line_20 $$ instances.put(annotation.annotationClass, discoveredClasses)[ FD ]
Line_21 $$ for (AnnotationInstance annotationInstance : annotationInstances) -->Line_22 $$ final AnnotationTarget target = annotationInstance.target()[ FD ]
