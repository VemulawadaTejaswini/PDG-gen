Line_25 $$ parentCharset = currentCharset-->Line_32 $$ if (parentCharset != null) [ FD ]
Line_7 $$ for (Map.Entry<VirtualFile, Charset> entry : mappings.entrySet()) -->Line_8 $$ final VirtualFile file = entry.getKey()[ FD ]
Line_3 $$ final Map<Module, Set<Charset>> map = new THashMap<Module, Set<Charset>>()-->Line_45 $$ map.put(module, charsets)[ FD ]
Line_44 $$ charsets = new LinkedHashSet<Charset>()-->Line_45 $$ map.put(module, charsets)[ FD ]
Line_8 $$ final VirtualFile file = entry.getKey()-->Line_19 $$ final VirtualFile sourceRoot = index.getSourceRootForFile(file)[ FD ]
Line_41 $$ if (encoding != null) -->Line_43 $$ if (charsets == null) [ CD ]
Line_44 $$ charsets = new LinkedHashSet<Charset>()-->Line_47 $$ charsets.add(encoding)[ FD ]
Line_3 $$ final Map<Module, Set<Charset>> map = new THashMap<Module, Set<Charset>>()-->Line_15 $$ Set<Charset> set = map.get(module)[ FD ]
Line_30 $$ current = current.getParent()-->Line_27 $$ if (current.equals(sourceRoot)) [ FD ]
Line_20 $$ VirtualFile current = file.getParent()-->Line_23 $$ final Charset currentCharset = mappings.get(current)[ FD ]
Line_19 $$ final VirtualFile sourceRoot = index.getSourceRootForFile(file)-->Line_27 $$ if (current.equals(sourceRoot)) [ FD ]
Line_23 $$ final Charset currentCharset = mappings.get(current)-->Line_24 $$ if (currentCharset != null) [ FD ]
Line_42 $$ Set<Charset> charsets = map.get(module)-->Line_45 $$ map.put(module, charsets)[ FD ]
Line_7 $$ for (Map.Entry<VirtualFile, Charset> entry : mappings.entrySet()) -->Line_9 $$ final Charset charset = entry.getValue()[ FD ]
Line_5 $$ ProjectFileIndex index = ProjectRootManager.getInstance(myProject).getFileIndex()-->Line_10 $$ if (file == null || charset == null || (!file.isDirectory() && !compilerManager.isCompilableFileType(file.getFileType())) || !index.isUnderSourceRootOfType(file, JavaModuleSourceRootTypes.SOURCES))[ FD ]
Line_6 $$ final CompilerManager compilerManager = CompilerManager.getInstance(myProject)-->Line_10 $$ if (file == null || charset == null || (!file.isDirectory() && !compilerManager.isCompilableFileType(file.getFileType())) || !index.isUnderSourceRootOfType(file, JavaModuleSourceRootTypes.SOURCES))[ FD ]
Line_8 $$ final VirtualFile file = entry.getKey()-->Line_12 $$ final Module module = index.getModuleForFile(file)[ FD ]
Line_16 $$ if (set == null) -->Line_22 $$ while (current != null) [ CD ]
Line_17 $$ set = new LinkedHashSet<Charset>()-->Line_18 $$ map.put(module, set)[ FD ]
Line_2 $$ private Map<Module, Set<Charset>> computeModuleCharsetMap() -->Line_6 $$ final CompilerManager compilerManager = CompilerManager.getInstance(myProject)[ CD ]
Line_30 $$ current = current.getParent()-->Line_22 $$ while (current != null) [ FD ]
Line_42 $$ Set<Charset> charsets = map.get(module)-->Line_43 $$ if (charsets == null) [ FD ]
Line_2 $$ private Map<Module, Set<Charset>> computeModuleCharsetMap() -->Line_51 $$ return map[ CD ]
Line_24 $$ if (currentCharset != null) -->Line_25 $$ parentCharset = currentCharset[ CD ]
Line_12 $$ final Module module = index.getModuleForFile(file)-->Line_42 $$ Set<Charset> charsets = map.get(module)[ FD ]
Line_40 $$ Charset encoding = EncodingProjectManager.getInstance(myProject).getEncoding(file, true)-->Line_41 $$ if (encoding != null) [ FD ]
Line_8 $$ final VirtualFile file = entry.getKey()-->Line_20 $$ VirtualFile current = file.getParent()[ FD ]
Line_42 $$ Set<Charset> charsets = map.get(module)-->Line_47 $$ charsets.add(encoding)[ FD ]
Line_22 $$ while (current != null) -->Line_24 $$ if (currentCharset != null) [ CD ]
Line_20 $$ VirtualFile current = file.getParent()-->Line_22 $$ while (current != null) [ FD ]
Line_12 $$ final Module module = index.getModuleForFile(file)-->Line_13 $$ if (module == null)[ FD ]
Line_25 $$ parentCharset = currentCharset-->Line_33 $$ set.add(parentCharset)[ FD ]
Line_43 $$ if (charsets == null) -->Line_44 $$ charsets = new LinkedHashSet<Charset>()[ CD ]
Line_16 $$ if (set == null) -->Line_19 $$ final VirtualFile sourceRoot = index.getSourceRootForFile(file)[ CD ]
Line_22 $$ while (current != null) -->Line_23 $$ final Charset currentCharset = mappings.get(current)[ CD ]
Line_3 $$ final Map<Module, Set<Charset>> map = new THashMap<Module, Set<Charset>>()-->Line_42 $$ Set<Charset> charsets = map.get(module)[ FD ]
Line_15 $$ Set<Charset> set = map.get(module)-->Line_18 $$ map.put(module, set)[ FD ]
Line_3 $$ final Map<Module, Set<Charset>> map = new THashMap<Module, Set<Charset>>()-->Line_18 $$ map.put(module, set)[ FD ]
Line_22 $$ while (current != null) -->Line_27 $$ if (current.equals(sourceRoot)) [ CD ]
Line_41 $$ if (encoding != null) -->Line_42 $$ Set<Charset> charsets = map.get(module)[ CD ]
Line_4 $$ final Map<VirtualFile, Charset> mappings = ((EncodingProjectManagerImpl) EncodingProjectManager.getInstance(myProject)).getAllMappings()-->Line_7 $$ for (Map.Entry<VirtualFile, Charset> entry : mappings.entrySet()) [ FD ]
Line_5 $$ ProjectFileIndex index = ProjectRootManager.getInstance(myProject).getFileIndex()-->Line_12 $$ final Module module = index.getModuleForFile(file)[ FD ]
Line_17 $$ set = new LinkedHashSet<Charset>()-->Line_33 $$ set.add(parentCharset)[ FD ]
Line_21 $$ Charset parentCharset = null-->Line_33 $$ set.add(parentCharset)[ FD ]
Line_20 $$ VirtualFile current = file.getParent()-->Line_27 $$ if (current.equals(sourceRoot)) [ FD ]
Line_42 $$ Set<Charset> charsets = map.get(module)-->Line_44 $$ charsets = new LinkedHashSet<Charset>()[ FD ]
Line_8 $$ final VirtualFile file = entry.getKey()-->Line_10 $$ if (file == null || charset == null || (!file.isDirectory() && !compilerManager.isCompilableFileType(file.getFileType())) || !index.isUnderSourceRootOfType(file, JavaModuleSourceRootTypes.SOURCES))[ FD ]
Line_16 $$ if (set == null) -->Line_21 $$ Charset parentCharset = null[ CD ]
Line_32 $$ if (parentCharset != null) -->Line_33 $$ set.add(parentCharset)[ CD ]
Line_30 $$ current = current.getParent()-->Line_23 $$ final Charset currentCharset = mappings.get(current)[ FD ]
Line_20 $$ VirtualFile current = file.getParent()-->Line_30 $$ current = current.getParent()[ FD ]
Line_9 $$ final Charset charset = entry.getValue()-->Line_36 $$ set.add(charset)[ FD ]
Line_2 $$ private Map<Module, Set<Charset>> computeModuleCharsetMap() -->Line_3 $$ final Map<Module, Set<Charset>> map = new THashMap<Module, Set<Charset>>()[ CD ]
Line_12 $$ final Module module = index.getModuleForFile(file)-->Line_15 $$ Set<Charset> set = map.get(module)[ FD ]
Line_15 $$ Set<Charset> set = map.get(module)-->Line_33 $$ set.add(parentCharset)[ FD ]
Line_12 $$ final Module module = index.getModuleForFile(file)-->Line_45 $$ map.put(module, charsets)[ FD ]
Line_2 $$ private Map<Module, Set<Charset>> computeModuleCharsetMap() -->Line_4 $$ final Map<VirtualFile, Charset> mappings = ((EncodingProjectManagerImpl) EncodingProjectManager.getInstance(myProject)).getAllMappings()[ CD ]
Line_43 $$ if (charsets == null) -->Line_45 $$ map.put(module, charsets)[ CD ]
Line_16 $$ if (set == null) -->Line_20 $$ VirtualFile current = file.getParent()[ CD ]
Line_16 $$ if (set == null) -->Line_32 $$ if (parentCharset != null) [ CD ]
Line_21 $$ Charset parentCharset = null-->Line_32 $$ if (parentCharset != null) [ FD ]
Line_4 $$ final Map<VirtualFile, Charset> mappings = ((EncodingProjectManagerImpl) EncodingProjectManager.getInstance(myProject)).getAllMappings()-->Line_23 $$ final Charset currentCharset = mappings.get(current)[ FD ]
Line_15 $$ Set<Charset> set = map.get(module)-->Line_36 $$ set.add(charset)[ FD ]
Line_17 $$ set = new LinkedHashSet<Charset>()-->Line_36 $$ set.add(charset)[ FD ]
Line_21 $$ Charset parentCharset = null-->Line_25 $$ parentCharset = currentCharset[ FD ]
Line_8 $$ final VirtualFile file = entry.getKey()-->Line_40 $$ Charset encoding = EncodingProjectManager.getInstance(myProject).getEncoding(file, true)[ FD ]
Line_41 $$ if (encoding != null) -->Line_47 $$ charsets.add(encoding)[ CD ]
Line_2 $$ private Map<Module, Set<Charset>> computeModuleCharsetMap() -->Line_5 $$ ProjectFileIndex index = ProjectRootManager.getInstance(myProject).getFileIndex()[ CD ]
Line_23 $$ final Charset currentCharset = mappings.get(current)-->Line_25 $$ parentCharset = currentCharset[ FD ]
Line_12 $$ final Module module = index.getModuleForFile(file)-->Line_18 $$ map.put(module, set)[ FD ]
Line_12 $$ final Module module = index.getModuleForFile(file)-->Line_39 $$ for (VirtualFile file : ModuleRootManager.getInstance(module).getSourceRoots(true)) [ FD ]
Line_40 $$ Charset encoding = EncodingProjectManager.getInstance(myProject).getEncoding(file, true)-->Line_47 $$ charsets.add(encoding)[ FD ]
Line_16 $$ if (set == null) -->Line_18 $$ map.put(module, set)[ CD ]
Line_15 $$ Set<Charset> set = map.get(module)-->Line_17 $$ set = new LinkedHashSet<Charset>()[ FD ]
Line_16 $$ if (set == null) -->Line_17 $$ set = new LinkedHashSet<Charset>()[ CD ]
Line_5 $$ ProjectFileIndex index = ProjectRootManager.getInstance(myProject).getFileIndex()-->Line_19 $$ final VirtualFile sourceRoot = index.getSourceRootForFile(file)[ FD ]
Line_22 $$ while (current != null) -->Line_30 $$ current = current.getParent()[ CD ]
Line_15 $$ Set<Charset> set = map.get(module)-->Line_16 $$ if (set == null) [ FD ]
