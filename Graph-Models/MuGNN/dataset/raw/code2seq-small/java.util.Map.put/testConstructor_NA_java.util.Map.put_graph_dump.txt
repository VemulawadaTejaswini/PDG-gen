Line_2 $$ public void testConstructor() throws Exception -->Line_14 $$ assertInvalidFunction("MAP(ARRAY [1], ARRAY [2, 4])", "Key and value arrays must be the same length")[ CD ]
Line_2 $$ public void testConstructor() throws Exception -->Line_4 $$ Map<Long, Long> map = new HashMap()[ CD ]
Line_4 $$ Map<Long, Long> map = new HashMap()-->Line_7 $$ assertFunction("MAP(ARRAY [1, 3], ARRAY[2, NULL])", new MapType(BIGINT, BIGINT), map)[ FD ]
Line_4 $$ Map<Long, Long> map = new HashMap()-->Line_5 $$ map.put(1L, 2L)[ FD ]
Line_2 $$ public void testConstructor() throws Exception -->Line_13 $$ assertFunction("MAP(ARRAY[from_unixtime(1), from_unixtime(100)], ARRAY[1.0, 100.0])", new MapType(TIMESTAMP, DOUBLE), ImmutableMap.of(new SqlTimestamp(1000, TEST_SESSION.getTimeZoneKey()), 1.0, new SqlTimestamp(100_000, TEST_SESSION.getTimeZoneKey()), 100.0))[ CD ]
Line_2 $$ public void testConstructor() throws Exception -->Line_3 $$ assertFunction("MAP(ARRAY ['1','3'], ARRAY [2,4])", new MapType(VARCHAR, BIGINT), ImmutableMap.of("1", 2L, "3", 4L))[ CD ]
Line_2 $$ public void testConstructor() throws Exception -->Line_11 $$ assertFunction("MAP(ARRAY[TRUE, FALSE], ARRAY[2,4])", new MapType(BOOLEAN, BIGINT), ImmutableMap.of(true, 2L, false, 4L))[ CD ]
Line_2 $$ public void testConstructor() throws Exception -->Line_6 $$ map.put(3L, null)[ CD ]
Line_2 $$ public void testConstructor() throws Exception -->Line_8 $$ assertFunction("MAP(ARRAY [1, 3], ARRAY [2.0, 4.0])", new MapType(BIGINT, DOUBLE), ImmutableMap.of(1L, 2.0, 3L, 4.0))[ CD ]
Line_2 $$ public void testConstructor() throws Exception -->Line_10 $$ assertFunction("MAP(ARRAY['puppies'], ARRAY['kittens'])", new MapType(VARCHAR, VARCHAR), ImmutableMap.of("puppies", "kittens"))[ CD ]
Line_2 $$ public void testConstructor() throws Exception -->Line_5 $$ map.put(1L, 2L)[ CD ]
Line_4 $$ Map<Long, Long> map = new HashMap()-->Line_6 $$ map.put(3L, null)[ FD ]
Line_2 $$ public void testConstructor() throws Exception -->Line_7 $$ assertFunction("MAP(ARRAY [1, 3], ARRAY[2, NULL])", new MapType(BIGINT, BIGINT), map)[ CD ]
Line_2 $$ public void testConstructor() throws Exception -->Line_9 $$ assertFunction("MAP(ARRAY[1.0, 2.0], ARRAY[ ARRAY[1, 2], ARRAY[3]])", new MapType(DOUBLE, new ArrayType(BIGINT)), ImmutableMap.of(1.0, ImmutableList.of(1L, 2L), 2.0, ImmutableList.of(3L)))[ CD ]
Line_2 $$ public void testConstructor() throws Exception -->Line_12 $$ assertFunction("MAP(ARRAY['1', '100'], ARRAY[from_unixtime(1), from_unixtime(100)])", new MapType(VARCHAR, TIMESTAMP), ImmutableMap.of("1", new SqlTimestamp(1000, TEST_SESSION.getTimeZoneKey()), "100", new SqlTimestamp(100_000, TEST_SESSION.getTimeZoneKey())))[ CD ]
