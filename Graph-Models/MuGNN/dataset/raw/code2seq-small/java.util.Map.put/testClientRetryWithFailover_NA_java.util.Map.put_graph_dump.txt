Line_2 $$ public void testClientRetryWithFailover(final AtMostOnceOp op) throws Exception -->Line_9 $$ op.invoke()[ FD ]
Line_2 $$ public void testClientRetryWithFailover(final AtMostOnceOp op) throws Exception -->Line_23 $$ assertTrue("After waiting the operation " + op.name + " still has not taken effect on NN yet", op.checkNamenodeBeforeReturn())[ CD ]
Line_2 $$ public void testClientRetryWithFailover(final AtMostOnceOp op) throws Exception -->Line_25 $$ cluster.transitionToActive(1)[ CD ]
Line_2 $$ public void testClientRetryWithFailover(final AtMostOnceOp op) throws Exception -->Line_4 $$ op.prepare()[ FD ]
Line_2 $$ public void testClientRetryWithFailover(final AtMostOnceOp op) throws Exception -->Line_23 $$ assertTrue("After waiting the operation " + op.name + " still has not taken effect on NN yet", op.checkNamenodeBeforeReturn())[ FD ]
Line_3 $$ final Map<String, Object> results = new HashMap<String, Object>()-->Line_29 $$ while (!results.containsKey(op.name)) [ FD ]
Line_2 $$ public void testClientRetryWithFailover(final AtMostOnceOp op) throws Exception -->Line_3 $$ final Map<String, Object> results = new HashMap<String, Object>()[ CD ]
Line_2 $$ public void testClientRetryWithFailover(final AtMostOnceOp op) throws Exception -->Line_5 $$ DummyRetryInvocationHandler.block.set(true)[ CD ]
Line_3 $$ final Map<String, Object> results = new HashMap<String, Object>()-->Line_13 $$ results.put(op.name, result == null ? "SUCCESS" : result)[ FD ]
Line_2 $$ public void testClientRetryWithFailover(final AtMostOnceOp op) throws Exception -->Line_10 $$ Object result = op.getResult()[ FD ]
Line_2 $$ public void testClientRetryWithFailover(final AtMostOnceOp op) throws Exception -->Line_40 $$ long updatedNN0 = cluster.getNamesystem(0).getRetryCache().getMetricsForTests().getCacheUpdated()[ CD ]
Line_29 $$ while (!results.containsKey(op.name)) -->Line_30 $$ this.wait()[ CD ]
Line_2 $$ public void testClientRetryWithFailover(final AtMostOnceOp op) throws Exception -->Line_37 $$ long hitNN0 = cluster.getNamesystem(0).getRetryCache().getMetricsForTests().getCacheHit()[ CD ]
Line_2 $$ public void testClientRetryWithFailover(final AtMostOnceOp op) throws Exception -->Line_24 $$ cluster.transitionToStandby(0)[ CD ]
Line_2 $$ public void testClientRetryWithFailover(final AtMostOnceOp op) throws Exception -->Line_41 $$ long updatedNN1 = cluster.getNamesystem(1).getRetryCache().getMetricsForTests().getCacheUpdated()[ CD ]
Line_2 $$ public void testClientRetryWithFailover(final AtMostOnceOp op) throws Exception -->Line_38 $$ long hitNN1 = cluster.getNamesystem(1).getRetryCache().getMetricsForTests().getCacheHit()[ CD ]
Line_2 $$ public void testClientRetryWithFailover(final AtMostOnceOp op) throws Exception -->Line_39 $$ assertTrue("CacheHit: " + hitNN0 + ", " + hitNN1, hitNN0 + hitNN1 > 0)[ CD ]
Line_2 $$ public void testClientRetryWithFailover(final AtMostOnceOp op) throws Exception -->Line_26 $$ LOG.info("Setting block to false")[ CD ]
Line_2 $$ public void testClientRetryWithFailover(final AtMostOnceOp op) throws Exception -->Line_34 $$ while (cluster.getNamesystem(1).isInStandbyState()) [ CD ]
Line_2 $$ public void testClientRetryWithFailover(final AtMostOnceOp op) throws Exception -->Line_43 $$ assertTrue("CacheUpdated on NN1: " + updatedNN1, updatedNN1 > 0)[ CD ]
Line_2 $$ public void testClientRetryWithFailover(final AtMostOnceOp op) throws Exception -->Line_6 $$ new Thread() [ CD ]
Line_2 $$ public void testClientRetryWithFailover(final AtMostOnceOp op) throws Exception -->Line_27 $$ DummyRetryInvocationHandler.block.set(false)[ CD ]
Line_3 $$ final Map<String, Object> results = new HashMap<String, Object>()-->Line_32 $$ LOG.info("Got the result of " + op.name + ": " + results.get(op.name))[ FD ]
Line_2 $$ public void testClientRetryWithFailover(final AtMostOnceOp op) throws Exception -->Line_4 $$ op.prepare()[ CD ]
Line_2 $$ public void testClientRetryWithFailover(final AtMostOnceOp op) throws Exception -->Line_42 $$ assertTrue("CacheUpdated on NN0: " + updatedNN0, updatedNN0 > 0)[ CD ]
Line_34 $$ while (cluster.getNamesystem(1).isInStandbyState()) -->Line_35 $$ Thread.sleep(10)[ CD ]
