Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_8 $$ vars.put("x", i)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_14 $$ for (long i = 0; i < ITER; i++) [ CD ]
Line_14 $$ for (long i = 0; i < ITER; i++) -->Line_26 $$ for (long i = 0; i < ITER; i++) [ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_10 $$ se.executable(compiledScript, vars).run()[ CD ]
Line_6 $$ Map<String, Object> vars = new HashMap<String, Object>()-->Line_10 $$ se.executable(compiledScript, vars).run()[ FD ]
Line_3 $$ JavaScriptScriptEngineService se = new JavaScriptScriptEngineService(Settings.Builder.EMPTY_SETTINGS)-->Line_15 $$ se.executable(compiledScript, vars).run()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_17 $$ System.out.println("Execute Took: " + stopWatch.stop().lastTaskTime())[ CD ]
Line_13 $$ StopWatch stopWatch = new StopWatch().start()-->Line_23 $$ System.out.println("Executable Took: " + stopWatch.stop().lastTaskTime())[ FD ]
Line_19 $$ ExecutableScript executableScript = se.executable(compiledScript, vars)-->Line_21 $$ executableScript.run()[ FD ]
Line_6 $$ Map<String, Object> vars = new HashMap<String, Object>()-->Line_15 $$ se.executable(compiledScript, vars).run()[ FD ]
Line_19 $$ ExecutableScript executableScript = se.executable(compiledScript, vars)-->Line_25 $$ executableScript = se.executable(compiledScript, vars)[ FD ]
Line_3 $$ JavaScriptScriptEngineService se = new JavaScriptScriptEngineService(Settings.Builder.EMPTY_SETTINGS)-->Line_25 $$ executableScript = se.executable(compiledScript, vars)[ FD ]
Line_18 $$ stopWatch = new StopWatch().start()-->Line_24 $$ stopWatch = new StopWatch().start()[ FD ]
Line_6 $$ Map<String, Object> vars = new HashMap<String, Object>()-->Line_19 $$ ExecutableScript executableScript = se.executable(compiledScript, vars)[ FD ]
Line_25 $$ executableScript = se.executable(compiledScript, vars)-->Line_30 $$ executableScript.run()[ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_20 $$ for (long i = 0; i < ITER; i++) [ FD ]
Line_14 $$ for (long i = 0; i < ITER; i++) -->Line_15 $$ se.executable(compiledScript, vars).run()[ CD ]
Line_12 $$ final long ITER = 100000-->Line_14 $$ for (long i = 0; i < ITER; i++) [ FD ]
Line_13 $$ StopWatch stopWatch = new StopWatch().start()-->Line_17 $$ System.out.println("Execute Took: " + stopWatch.stop().lastTaskTime())[ FD ]
Line_6 $$ Map<String, Object> vars = new HashMap<String, Object>()-->Line_27 $$ for (Map.Entry<String, Object> entry : vars.entrySet()) [ FD ]
Line_2 $$ public static void main(String[] args) -->Line_12 $$ final long ITER = 100000[ CD ]
Line_6 $$ Map<String, Object> vars = new HashMap<String, Object>()-->Line_9 $$ vars.put("y", i + 1)[ FD ]
Line_19 $$ ExecutableScript executableScript = se.executable(compiledScript, vars)-->Line_30 $$ executableScript.run()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_6 $$ Map<String, Object> vars = new HashMap<String, Object>()[ CD ]
Line_5 $$ CompiledScript compiledScript = new CompiledScript(ScriptService.ScriptType.INLINE, "testExecutableNoRuntimeParams", "js", compiled)-->Line_10 $$ se.executable(compiledScript, vars).run()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_26 $$ for (long i = 0; i < ITER; i++) [ CD ]
Line_19 $$ ExecutableScript executableScript = se.executable(compiledScript, vars)-->Line_28 $$ executableScript.setNextVar(entry.getKey(), entry.getValue())[ FD ]
Line_12 $$ final long ITER = 100000-->Line_26 $$ for (long i = 0; i < ITER; i++) [ FD ]
Line_2 $$ public static void main(String[] args) -->Line_19 $$ ExecutableScript executableScript = se.executable(compiledScript, vars)[ CD ]
Line_12 $$ final long ITER = 100000-->Line_20 $$ for (long i = 0; i < ITER; i++) [ FD ]
Line_3 $$ JavaScriptScriptEngineService se = new JavaScriptScriptEngineService(Settings.Builder.EMPTY_SETTINGS)-->Line_4 $$ Object compiled = se.compile("x + y", Collections.emptyMap())[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_4 $$ Object compiled = se.compile("x + y", Collections.emptyMap())[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_13 $$ StopWatch stopWatch = new StopWatch().start()[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_32 $$ System.out.println("Executable (vars) Took: " + stopWatch.stop().lastTaskTime())[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_23 $$ System.out.println("Executable Took: " + stopWatch.stop().lastTaskTime())[ CD ]
Line_13 $$ StopWatch stopWatch = new StopWatch().start()-->Line_18 $$ stopWatch = new StopWatch().start()[ FD ]
Line_3 $$ JavaScriptScriptEngineService se = new JavaScriptScriptEngineService(Settings.Builder.EMPTY_SETTINGS)-->Line_10 $$ se.executable(compiledScript, vars).run()[ FD ]
Line_24 $$ stopWatch = new StopWatch().start()-->Line_32 $$ System.out.println("Executable (vars) Took: " + stopWatch.stop().lastTaskTime())[ FD ]
Line_13 $$ StopWatch stopWatch = new StopWatch().start()-->Line_24 $$ stopWatch = new StopWatch().start()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_5 $$ CompiledScript compiledScript = new CompiledScript(ScriptService.ScriptType.INLINE, "testExecutableNoRuntimeParams", "js", compiled)[ CD ]
Line_13 $$ StopWatch stopWatch = new StopWatch().start()-->Line_32 $$ System.out.println("Executable (vars) Took: " + stopWatch.stop().lastTaskTime())[ FD ]
Line_6 $$ Map<String, Object> vars = new HashMap<String, Object>()-->Line_8 $$ vars.put("x", i)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_20 $$ for (long i = 0; i < ITER; i++) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_18 $$ stopWatch = new StopWatch().start()[ CD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_14 $$ for (long i = 0; i < ITER; i++) [ FD ]
Line_6 $$ Map<String, Object> vars = new HashMap<String, Object>()-->Line_25 $$ executableScript = se.executable(compiledScript, vars)[ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_9 $$ vars.put("y", i + 1)[ CD ]
Line_5 $$ CompiledScript compiledScript = new CompiledScript(ScriptService.ScriptType.INLINE, "testExecutableNoRuntimeParams", "js", compiled)-->Line_19 $$ ExecutableScript executableScript = se.executable(compiledScript, vars)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_7 $$ for (int i = 0; i < 1000; i++) [ CD ]
Line_18 $$ stopWatch = new StopWatch().start()-->Line_23 $$ System.out.println("Executable Took: " + stopWatch.stop().lastTaskTime())[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_25 $$ executableScript = se.executable(compiledScript, vars)[ CD ]
Line_18 $$ stopWatch = new StopWatch().start()-->Line_32 $$ System.out.println("Executable (vars) Took: " + stopWatch.stop().lastTaskTime())[ FD ]
Line_25 $$ executableScript = se.executable(compiledScript, vars)-->Line_28 $$ executableScript.setNextVar(entry.getKey(), entry.getValue())[ FD ]
Line_5 $$ CompiledScript compiledScript = new CompiledScript(ScriptService.ScriptType.INLINE, "testExecutableNoRuntimeParams", "js", compiled)-->Line_15 $$ se.executable(compiledScript, vars).run()[ FD ]
Line_3 $$ JavaScriptScriptEngineService se = new JavaScriptScriptEngineService(Settings.Builder.EMPTY_SETTINGS)-->Line_19 $$ ExecutableScript executableScript = se.executable(compiledScript, vars)[ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_26 $$ for (long i = 0; i < ITER; i++) [ FD ]
Line_20 $$ for (long i = 0; i < ITER; i++) -->Line_26 $$ for (long i = 0; i < ITER; i++) [ FD ]
Line_20 $$ for (long i = 0; i < ITER; i++) -->Line_21 $$ executableScript.run()[ CD ]
Line_27 $$ for (Map.Entry<String, Object> entry : vars.entrySet()) -->Line_28 $$ executableScript.setNextVar(entry.getKey(), entry.getValue())[ FD ]
Line_5 $$ CompiledScript compiledScript = new CompiledScript(ScriptService.ScriptType.INLINE, "testExecutableNoRuntimeParams", "js", compiled)-->Line_25 $$ executableScript = se.executable(compiledScript, vars)[ FD ]
Line_14 $$ for (long i = 0; i < ITER; i++) -->Line_20 $$ for (long i = 0; i < ITER; i++) [ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_8 $$ vars.put("x", i)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_24 $$ stopWatch = new StopWatch().start()[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ JavaScriptScriptEngineService se = new JavaScriptScriptEngineService(Settings.Builder.EMPTY_SETTINGS)[ CD ]
Line_26 $$ for (long i = 0; i < ITER; i++) -->Line_30 $$ executableScript.run()[ CD ]
