Line_14 $$ SimpMessageHeaderAccessor actual = getCapturedAccessor(0)-->Line_16 $$ assertEquals("/topic/chat.message.filtered.roomA", actual.getDestination())[ FD ]
Line_6 $$ String sessionId = "sess1"-->Line_15 $$ assertEquals(sessionId, actual.getSessionId())[ FD ]
Line_4 $$ Map<String, String> vars = new LinkedHashMap(1)-->Line_5 $$ vars.put("roomName", "roomA")[ FD ]
Line_2 $$ public void sendToWithDestinationPlaceholders() throws Exception -->Line_8 $$ accessor.setSessionId(sessionId)[ CD ]
Line_2 $$ public void sendToWithDestinationPlaceholders() throws Exception -->Line_3 $$ given(this.messageChannel.send(any(Message.class))).willReturn(true)[ CD ]
Line_2 $$ public void sendToWithDestinationPlaceholders() throws Exception -->Line_7 $$ SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create()[ CD ]
Line_7 $$ SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create()-->Line_11 $$ Message<?> message = MessageBuilder.createMessage(PAYLOAD, accessor.getMessageHeaders())[ FD ]
Line_2 $$ public void sendToWithDestinationPlaceholders() throws Exception -->Line_4 $$ Map<String, String> vars = new LinkedHashMap(1)[ CD ]
Line_14 $$ SimpMessageHeaderAccessor actual = getCapturedAccessor(0)-->Line_15 $$ assertEquals(sessionId, actual.getSessionId())[ FD ]
Line_2 $$ public void sendToWithDestinationPlaceholders() throws Exception -->Line_12 $$ this.handler.handleReturnValue(PAYLOAD, this.sendToWithPlaceholdersReturnType, message)[ CD ]
Line_7 $$ SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create()-->Line_8 $$ accessor.setSessionId(sessionId)[ FD ]
Line_6 $$ String sessionId = "sess1"-->Line_8 $$ accessor.setSessionId(sessionId)[ FD ]
Line_7 $$ SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create()-->Line_10 $$ accessor.setHeader(DESTINATION_TEMPLATE_VARIABLES_HEADER, vars)[ FD ]
Line_2 $$ public void sendToWithDestinationPlaceholders() throws Exception -->Line_9 $$ accessor.setSubscriptionId("sub1")[ CD ]
Line_2 $$ public void sendToWithDestinationPlaceholders() throws Exception -->Line_14 $$ SimpMessageHeaderAccessor actual = getCapturedAccessor(0)[ CD ]
Line_2 $$ public void sendToWithDestinationPlaceholders() throws Exception -->Line_15 $$ assertEquals(sessionId, actual.getSessionId())[ CD ]
Line_11 $$ Message<?> message = MessageBuilder.createMessage(PAYLOAD, accessor.getMessageHeaders())-->Line_12 $$ this.handler.handleReturnValue(PAYLOAD, this.sendToWithPlaceholdersReturnType, message)[ FD ]
Line_2 $$ public void sendToWithDestinationPlaceholders() throws Exception -->Line_5 $$ vars.put("roomName", "roomA")[ CD ]
Line_7 $$ SimpMessageHeaderAccessor accessor = SimpMessageHeaderAccessor.create()-->Line_9 $$ accessor.setSubscriptionId("sub1")[ FD ]
Line_2 $$ public void sendToWithDestinationPlaceholders() throws Exception -->Line_6 $$ String sessionId = "sess1"[ CD ]
Line_2 $$ public void sendToWithDestinationPlaceholders() throws Exception -->Line_16 $$ assertEquals("/topic/chat.message.filtered.roomA", actual.getDestination())[ CD ]
Line_2 $$ public void sendToWithDestinationPlaceholders() throws Exception -->Line_11 $$ Message<?> message = MessageBuilder.createMessage(PAYLOAD, accessor.getMessageHeaders())[ CD ]
Line_2 $$ public void sendToWithDestinationPlaceholders() throws Exception -->Line_10 $$ accessor.setHeader(DESTINATION_TEMPLATE_VARIABLES_HEADER, vars)[ CD ]
Line_4 $$ Map<String, String> vars = new LinkedHashMap(1)-->Line_10 $$ accessor.setHeader(DESTINATION_TEMPLATE_VARIABLES_HEADER, vars)[ FD ]
Line_2 $$ public void sendToWithDestinationPlaceholders() throws Exception -->Line_13 $$ verify(this.messageChannel, times(1)).send(this.messageCaptor.capture())[ CD ]
