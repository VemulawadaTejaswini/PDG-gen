Line_2 $$ public void setDebugVarNames(Map<Integer, String> mapDebugVarNames) -->Line_7 $$ List<VarVersionPair> listVars = new ArrayList<VarVersionPair>(mapVarNames.keySet())[ CD ]
Line_17 $$ if (index != null && mapDebugVarNames.containsKey(index)) -->Line_18 $$ name = mapDebugVarNames.get(index)[ CD ]
Line_2 $$ public void setDebugVarNames(Map<Integer, String> mapDebugVarNames) -->Line_3 $$ if (varVersions == null) [ CD ]
Line_3 $$ if (varVersions == null) -->Line_4 $$ return[ CD ]
Line_22 $$ if (counter > 0) -->Line_23 $$ name += String.valueOf(counter)[ CD ]
Line_8 $$ Collections.sort(listVars, new Comparator<VarVersionPair>() -->Line_10 $$ return o1.var - o2.var[ CD ]
Line_2 $$ public void setDebugVarNames(Map<Integer, String> mapDebugVarNames) -->Line_6 $$ Map<Integer, Integer> mapOriginalVarIndices = varVersions.getMapOriginalVarIndices()[ CD ]
Line_2 $$ public void setDebugVarNames(Map<Integer, String> mapDebugVarNames) -->Line_8 $$ Collections.sort(listVars, new Comparator<VarVersionPair>() [ CD ]
Line_2 $$ public void setDebugVarNames(Map<Integer, String> mapDebugVarNames) -->Line_18 $$ name = mapDebugVarNames.get(index)[ FD ]
Line_7 $$ List<VarVersionPair> listVars = new ArrayList<VarVersionPair>(mapVarNames.keySet())-->Line_8 $$ Collections.sort(listVars, new Comparator<VarVersionPair>() [ FD ]
Line_2 $$ public void setDebugVarNames(Map<Integer, String> mapDebugVarNames) -->Line_17 $$ if (index != null && mapDebugVarNames.containsKey(index)) [ FD ]
Line_6 $$ Map<Integer, Integer> mapOriginalVarIndices = varVersions.getMapOriginalVarIndices()-->Line_16 $$ Integer index = mapOriginalVarIndices.get(pair.var)[ FD ]
