Line_6 $$ if (currentSum == null) -->Line_7 $$ currentSum = 0L[ CD ]
Line_2 $$ public BenchmarkResultHook addResults(Map<String, Long> results) -->Line_12 $$ return this[ CD ]
Line_2 $$ public BenchmarkResultHook addResults(Map<String, Long> results) -->Line_3 $$ requireNonNull(results, "results is null")[ FD ]
Line_5 $$ Long currentSum = resultsSum.get(entry.getKey())-->Line_6 $$ if (currentSum == null) [ FD ]
Line_4 $$ for (Entry<String, Long> entry : results.entrySet()) -->Line_9 $$ resultsSum.put(entry.getKey(), currentSum + entry.getValue())[ FD ]
Line_2 $$ public BenchmarkResultHook addResults(Map<String, Long> results) -->Line_4 $$ for (Entry<String, Long> entry : results.entrySet()) [ FD ]
Line_5 $$ Long currentSum = resultsSum.get(entry.getKey())-->Line_7 $$ currentSum = 0L[ FD ]
Line_4 $$ for (Entry<String, Long> entry : results.entrySet()) -->Line_5 $$ Long currentSum = resultsSum.get(entry.getKey())[ FD ]
Line_2 $$ public BenchmarkResultHook addResults(Map<String, Long> results) -->Line_3 $$ requireNonNull(results, "results is null")[ CD ]
