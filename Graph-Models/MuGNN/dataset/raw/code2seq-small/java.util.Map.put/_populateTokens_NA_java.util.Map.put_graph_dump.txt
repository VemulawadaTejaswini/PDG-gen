Line_6 $$ String friendlyUrlCurrent = null-->Line_10 $$ friendlyUrlCurrent = themeDisplayModel.getPathFriendlyURLPrivateUser()[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_25 $$ tokens.put("friendly_url_public", themeDisplayModel.getPathFriendlyURLPublic())[ CD ]
Line_15 $$ String virtualHostname = layoutSet.getVirtualHostname()-->Line_16 $$ if (Validator.isNull(virtualHostname) || !virtualHostname.equals(themeDisplayModel.getServerName())) [ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_20 $$ tokens.put("cdn_host", themeDisplayModel.getCdnHost())[ CD ]
Line_12 $$ friendlyUrlCurrent = themeDisplayModel.getPathFriendlyURLPrivateGroup()-->Line_17 $$ layoutSetFriendlyUrl = friendlyUrlCurrent + group.getFriendlyURL()[ FD ]
Line_7 $$ if (layout.isPublicLayout()) -->Line_8 $$ friendlyUrlCurrent = themeDisplayModel.getPathFriendlyURLPublic()[ CD ]
Line_3 $$ Layout layout = LayoutLocalServiceUtil.getLayout(themeDisplayModel.getPlid())-->Line_4 $$ Group group = layout.getGroup()[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_31 $$ tokens.put("portal_url", HttpUtil.removeProtocol(themeDisplayModel.getURLPortal()))[ CD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_35 $$ tokens.put("theme_image_path", themeDisplayModel.getPathThemeImages())[ FD ]
Line_4 $$ Group group = layout.getGroup()-->Line_17 $$ layoutSetFriendlyUrl = friendlyUrlCurrent + group.getFriendlyURL()[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_12 $$ friendlyUrlCurrent = themeDisplayModel.getPathFriendlyURLPrivateGroup()[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_35 $$ tokens.put("theme_image_path", themeDisplayModel.getPathThemeImages())[ CD ]
Line_8 $$ friendlyUrlCurrent = themeDisplayModel.getPathFriendlyURLPublic()-->Line_22 $$ tokens.put("friendly_url_current", friendlyUrlCurrent)[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_32 $$ tokens.put("protocol", HttpUtil.getProtocol(themeDisplayModel.getURLPortal()))[ CD ]
Line_17 $$ layoutSetFriendlyUrl = friendlyUrlCurrent + group.getFriendlyURL()-->Line_28 $$ tokens.put("layout_set_friendly_url", layoutSetFriendlyUrl)[ FD ]
Line_10 $$ friendlyUrlCurrent = themeDisplayModel.getPathFriendlyURLPrivateUser()-->Line_12 $$ friendlyUrlCurrent = themeDisplayModel.getPathFriendlyURLPrivateGroup()[ FD ]
Line_8 $$ friendlyUrlCurrent = themeDisplayModel.getPathFriendlyURLPublic()-->Line_17 $$ layoutSetFriendlyUrl = friendlyUrlCurrent + group.getFriendlyURL()[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_33 $$ tokens.put("root_path", themeDisplayModel.getPathContext())[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_6 $$ String friendlyUrlCurrent = null[ CD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_34 $$ tokens.put("scope_group_id", String.valueOf(themeDisplayModel.getScopeGroupId()))[ CD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_27 $$ tokens.put("image_path", themeDisplayModel.getPathImage())[ CD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_39 $$ tokens.put("group_id", String.valueOf(articleGroupId))[ CD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_23 $$ tokens.put("friendly_url_private_group", themeDisplayModel.getPathFriendlyURLPrivateGroup())[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_33 $$ tokens.put("root_path", themeDisplayModel.getPathContext())[ CD ]
Line_4 $$ Group group = layout.getGroup()-->Line_9 $$ if (group.isUserGroup()) [ FD ]
Line_3 $$ Layout layout = LayoutLocalServiceUtil.getLayout(themeDisplayModel.getPlid())-->Line_7 $$ if (layout.isPublicLayout()) [ FD ]
Line_16 $$ if (Validator.isNull(virtualHostname) || !virtualHostname.equals(themeDisplayModel.getServerName())) -->Line_17 $$ layoutSetFriendlyUrl = friendlyUrlCurrent + group.getFriendlyURL()[ CD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_21 $$ tokens.put("company_id", String.valueOf(themeDisplayModel.getCompanyId()))[ CD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_30 $$ tokens.put("portal_ctx", themeDisplayModel.getPathContext())[ FD ]
Line_9 $$ if (group.isUserGroup()) -->Line_12 $$ friendlyUrlCurrent = themeDisplayModel.getPathFriendlyURLPrivateGroup()[ CD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_30 $$ tokens.put("portal_ctx", themeDisplayModel.getPathContext())[ CD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_40 $$ tokens.put("page_url", themeDisplayModel.getPathFriendlyURLPublic())[ CD ]
Line_8 $$ friendlyUrlCurrent = themeDisplayModel.getPathFriendlyURLPublic()-->Line_10 $$ friendlyUrlCurrent = themeDisplayModel.getPathFriendlyURLPrivateUser()[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_20 $$ tokens.put("cdn_host", themeDisplayModel.getCdnHost())[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_29 $$ tokens.put("main_path", themeDisplayModel.getPathMain())[ CD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_31 $$ tokens.put("portal_url", HttpUtil.removeProtocol(themeDisplayModel.getURLPortal()))[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_3 $$ Layout layout = LayoutLocalServiceUtil.getLayout(themeDisplayModel.getPlid())[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_5 $$ LayoutSet layoutSet = layout.getLayoutSet()[ CD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_40 $$ tokens.put("page_url", themeDisplayModel.getPathFriendlyURLPublic())[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_22 $$ tokens.put("friendly_url_current", friendlyUrlCurrent)[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_37 $$ tokens.put("friendly_url", themeDisplayModel.getPathFriendlyURLPublic())[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_39 $$ tokens.put("group_id", String.valueOf(articleGroupId))[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_8 $$ friendlyUrlCurrent = themeDisplayModel.getPathFriendlyURLPublic()[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_21 $$ tokens.put("company_id", String.valueOf(themeDisplayModel.getCompanyId()))[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_19 $$ tokens.put("article_group_id", String.valueOf(articleGroupId))[ CD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_36 $$ _populateCustomTokens(tokens)[ CD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_27 $$ tokens.put("image_path", themeDisplayModel.getPathImage())[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_16 $$ if (Validator.isNull(virtualHostname) || !virtualHostname.equals(themeDisplayModel.getServerName())) [ CD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_38 $$ tokens.put("friendly_url_private", themeDisplayModel.getPathFriendlyURLPrivateGroup())[ FD ]
Line_14 $$ String layoutSetFriendlyUrl = themeDisplayModel.getI18nPath()-->Line_17 $$ layoutSetFriendlyUrl = friendlyUrlCurrent + group.getFriendlyURL()[ FD ]
Line_6 $$ String friendlyUrlCurrent = null-->Line_17 $$ layoutSetFriendlyUrl = friendlyUrlCurrent + group.getFriendlyURL()[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_34 $$ tokens.put("scope_group_id", String.valueOf(themeDisplayModel.getScopeGroupId()))[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_38 $$ tokens.put("friendly_url_private", themeDisplayModel.getPathFriendlyURLPrivateGroup())[ CD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_26 $$ tokens.put("group_friendly_url", group.getFriendlyURL())[ FD ]
Line_6 $$ String friendlyUrlCurrent = null-->Line_8 $$ friendlyUrlCurrent = themeDisplayModel.getPathFriendlyURLPublic()[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_10 $$ friendlyUrlCurrent = themeDisplayModel.getPathFriendlyURLPrivateUser()[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_36 $$ _populateCustomTokens(tokens)[ FD ]
Line_9 $$ if (group.isUserGroup()) -->Line_10 $$ friendlyUrlCurrent = themeDisplayModel.getPathFriendlyURLPrivateUser()[ CD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_26 $$ tokens.put("group_friendly_url", group.getFriendlyURL())[ CD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_15 $$ String virtualHostname = layoutSet.getVirtualHostname()[ CD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_3 $$ Layout layout = LayoutLocalServiceUtil.getLayout(themeDisplayModel.getPlid())[ CD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_25 $$ tokens.put("friendly_url_public", themeDisplayModel.getPathFriendlyURLPublic())[ FD ]
Line_14 $$ String layoutSetFriendlyUrl = themeDisplayModel.getI18nPath()-->Line_28 $$ tokens.put("layout_set_friendly_url", layoutSetFriendlyUrl)[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_32 $$ tokens.put("protocol", HttpUtil.getProtocol(themeDisplayModel.getURLPortal()))[ FD ]
Line_5 $$ LayoutSet layoutSet = layout.getLayoutSet()-->Line_15 $$ String virtualHostname = layoutSet.getVirtualHostname()[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_24 $$ tokens.put("friendly_url_private_user", themeDisplayModel.getPathFriendlyURLPrivateUser())[ CD ]
Line_4 $$ Group group = layout.getGroup()-->Line_26 $$ tokens.put("group_friendly_url", group.getFriendlyURL())[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_24 $$ tokens.put("friendly_url_private_user", themeDisplayModel.getPathFriendlyURLPrivateUser())[ FD ]
Line_10 $$ friendlyUrlCurrent = themeDisplayModel.getPathFriendlyURLPrivateUser()-->Line_22 $$ tokens.put("friendly_url_current", friendlyUrlCurrent)[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_14 $$ String layoutSetFriendlyUrl = themeDisplayModel.getI18nPath()[ CD ]
Line_12 $$ friendlyUrlCurrent = themeDisplayModel.getPathFriendlyURLPrivateGroup()-->Line_22 $$ tokens.put("friendly_url_current", friendlyUrlCurrent)[ FD ]
Line_10 $$ friendlyUrlCurrent = themeDisplayModel.getPathFriendlyURLPrivateUser()-->Line_17 $$ layoutSetFriendlyUrl = friendlyUrlCurrent + group.getFriendlyURL()[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_29 $$ tokens.put("main_path", themeDisplayModel.getPathMain())[ FD ]
Line_6 $$ String friendlyUrlCurrent = null-->Line_22 $$ tokens.put("friendly_url_current", friendlyUrlCurrent)[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_22 $$ tokens.put("friendly_url_current", friendlyUrlCurrent)[ CD ]
Line_8 $$ friendlyUrlCurrent = themeDisplayModel.getPathFriendlyURLPublic()-->Line_12 $$ friendlyUrlCurrent = themeDisplayModel.getPathFriendlyURLPrivateGroup()[ FD ]
Line_7 $$ if (layout.isPublicLayout()) -->Line_9 $$ if (group.isUserGroup()) [ CD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_28 $$ tokens.put("layout_set_friendly_url", layoutSetFriendlyUrl)[ FD ]
Line_3 $$ Layout layout = LayoutLocalServiceUtil.getLayout(themeDisplayModel.getPlid())-->Line_5 $$ LayoutSet layoutSet = layout.getLayoutSet()[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_23 $$ tokens.put("friendly_url_private_group", themeDisplayModel.getPathFriendlyURLPrivateGroup())[ CD ]
Line_6 $$ String friendlyUrlCurrent = null-->Line_12 $$ friendlyUrlCurrent = themeDisplayModel.getPathFriendlyURLPrivateGroup()[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_14 $$ String layoutSetFriendlyUrl = themeDisplayModel.getI18nPath()[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_37 $$ tokens.put("friendly_url", themeDisplayModel.getPathFriendlyURLPublic())[ CD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_4 $$ Group group = layout.getGroup()[ CD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_19 $$ tokens.put("article_group_id", String.valueOf(articleGroupId))[ FD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_7 $$ if (layout.isPublicLayout()) [ CD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_28 $$ tokens.put("layout_set_friendly_url", layoutSetFriendlyUrl)[ CD ]
Line_2 $$ private static void _populateTokens(Map<String, String> tokens, long articleGroupId, ThemeDisplayModel themeDisplayModel) throws Exception -->Line_16 $$ if (Validator.isNull(virtualHostname) || !virtualHostname.equals(themeDisplayModel.getServerName())) [ FD ]
