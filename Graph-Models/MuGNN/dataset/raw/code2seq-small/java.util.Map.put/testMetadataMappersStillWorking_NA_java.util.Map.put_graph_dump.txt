Line_2 $$ public void testMetadataMappersStillWorking() throws MapperParsingException, IOException -->Line_8 $$ rootTypes.put("numeric_detection", "true")[ CD ]
Line_11 $$ mapping += "\"" + key + "\"" + ":" + rootTypes.get(key) + ",\n"-->Line_13 $$ mapping += "\"properties\":[ FD ]
Line_4 $$ Map<String, String> rootTypes = new HashMap()-->Line_6 $$ rootTypes.put("include_in_all", "true")[ FD ]
Line_2 $$ public void testMetadataMappersStillWorking() throws MapperParsingException, IOException -->Line_3 $$ String mapping = "[ CD ]
Line_2 $$ public void testMetadataMappersStillWorking() throws MapperParsingException, IOException -->Line_4 $$ Map<String, String> rootTypes = new HashMap()[ CD ]
Line_3 $$ String mapping = "-->Line_13 $$ mapping += "\"properties\":[ FD ]
Line_2 $$ public void testMetadataMappersStillWorking() throws MapperParsingException, IOException -->Line_5 $$ rootTypes.put(TimestampFieldMapper.NAME, "[ CD ]
Line_4 $$ Map<String, String> rootTypes = new HashMap()-->Line_9 $$ rootTypes.put("dynamic_templates", "[]")[ FD ]
Line_2 $$ public void testMetadataMappersStillWorking() throws MapperParsingException, IOException -->Line_13 $$ mapping += "\"properties\":[ CD ]
Line_2 $$ public void testMetadataMappersStillWorking() throws MapperParsingException, IOException -->Line_9 $$ rootTypes.put("dynamic_templates", "[]")[ CD ]
Line_4 $$ Map<String, String> rootTypes = new HashMap()-->Line_5 $$ rootTypes.put(TimestampFieldMapper.NAME, "[ FD ]
Line_4 $$ Map<String, String> rootTypes = new HashMap()-->Line_10 $$ for (String key : rootTypes.keySet()) [ FD ]
Line_4 $$ Map<String, String> rootTypes = new HashMap()-->Line_7 $$ rootTypes.put("dynamic_date_formats", "[\"yyyy-MM-dd\", \"dd-MM-yyyy\"]")[ FD ]
Line_2 $$ public void testMetadataMappersStillWorking() throws MapperParsingException, IOException -->Line_7 $$ rootTypes.put("dynamic_date_formats", "[\"yyyy-MM-dd\", \"dd-MM-yyyy\"]")[ CD ]
Line_2 $$ public void testMetadataMappersStillWorking() throws MapperParsingException, IOException -->Line_14 $$ createIndex("test").mapperService().documentMapperParser().parse("test", new CompressedXContent(mapping))[ CD ]
Line_3 $$ String mapping = "-->Line_11 $$ mapping += "\"" + key + "\"" + ":" + rootTypes.get(key) + ",\n"[ FD ]
Line_10 $$ for (String key : rootTypes.keySet()) -->Line_11 $$ mapping += "\"" + key + "\"" + ":" + rootTypes.get(key) + ",\n"[ FD ]
Line_4 $$ Map<String, String> rootTypes = new HashMap()-->Line_11 $$ mapping += "\"" + key + "\"" + ":" + rootTypes.get(key) + ",\n"[ FD ]
Line_4 $$ Map<String, String> rootTypes = new HashMap()-->Line_8 $$ rootTypes.put("numeric_detection", "true")[ FD ]
Line_2 $$ public void testMetadataMappersStillWorking() throws MapperParsingException, IOException -->Line_6 $$ rootTypes.put("include_in_all", "true")[ CD ]
