Line_16 $$ if (!commitAuthorColors.containsKey(number)) -->Line_22 $$ commitAuthorColors.put(number, authorColors.get(author))[ CD ]
Line_6 $$ final List<VcsFileRevision> fileRevisionList = fileAnnotation.getRevisions()-->Line_9 $$ final int revisionsCount = fileRevisionList.size()[ FD ]
Line_12 $$ final VcsRevisionNumber number = revision.getRevisionNumber()-->Line_22 $$ commitAuthorColors.put(number, authorColors.get(author))[ FD ]
Line_2 $$ private static Couple<Map<VcsRevisionNumber, Color>> computeBgColors(@NotNull FileAnnotation fileAnnotation) -->Line_6 $$ final List<VcsFileRevision> fileRevisionList = fileAnnotation.getRevisions()[ CD ]
Line_13 $$ final String author = revision.getAuthor()-->Line_17 $$ if (author != null && !authorColors.containsKey(author)) [ FD ]
Line_7 $$ if (fileRevisionList != null) -->Line_9 $$ final int revisionsCount = fileRevisionList.size()[ CD ]
Line_17 $$ if (author != null && !authorColors.containsKey(author)) -->Line_20 $$ authorColors.put(author, color)[ CD ]
Line_10 $$ for (int i = 0; i < fileRevisionList.size(); i++) -->Line_13 $$ final String author = revision.getAuthor()[ CD ]
Line_6 $$ final List<VcsFileRevision> fileRevisionList = fileAnnotation.getRevisions()-->Line_10 $$ for (int i = 0; i < fileRevisionList.size(); i++) [ FD ]
Line_17 $$ if (author != null && !authorColors.containsKey(author)) -->Line_18 $$ final int index = authorColors.size()[ CD ]
Line_2 $$ private static Couple<Map<VcsRevisionNumber, Color>> computeBgColors(@NotNull FileAnnotation fileAnnotation) -->Line_4 $$ final Map<VcsRevisionNumber, Color> commitAuthorColors = new HashMap<VcsRevisionNumber, Color>()[ CD ]
Line_17 $$ if (author != null && !authorColors.containsKey(author)) -->Line_19 $$ Color color = BG_COLORS[index * BG_COLORS_PRIME % colorsCount][ CD ]
Line_6 $$ final List<VcsFileRevision> fileRevisionList = fileAnnotation.getRevisions()-->Line_7 $$ if (fileRevisionList != null) [ FD ]
Line_19 $$ Color color = BG_COLORS[index * BG_COLORS_PRIME % colorsCount]-->Line_26 $$ commitOrderColors.put(number, color)[ FD ]
Line_7 $$ if (fileRevisionList != null) -->Line_10 $$ for (int i = 0; i < fileRevisionList.size(); i++) [ CD ]
Line_3 $$ final Map<VcsRevisionNumber, Color> commitOrderColors = new HashMap<VcsRevisionNumber, Color>()-->Line_26 $$ commitOrderColors.put(number, color)[ FD ]
Line_2 $$ private static Couple<Map<VcsRevisionNumber, Color>> computeBgColors(@NotNull FileAnnotation fileAnnotation) -->Line_6 $$ final List<VcsFileRevision> fileRevisionList = fileAnnotation.getRevisions()[ FD ]
Line_19 $$ Color color = BG_COLORS[index * BG_COLORS_PRIME % colorsCount]-->Line_20 $$ authorColors.put(author, color)[ FD ]
Line_2 $$ private static Couple<Map<VcsRevisionNumber, Color>> computeBgColors(@NotNull FileAnnotation fileAnnotation) -->Line_7 $$ if (fileRevisionList != null) [ CD ]
Line_3 $$ final Map<VcsRevisionNumber, Color> commitOrderColors = new HashMap<VcsRevisionNumber, Color>()-->Line_30 $$ return Couple.of(commitOrderColors.size() > 1 ? commitOrderColors : null, commitAuthorColors.size() > 1 ? commitAuthorColors : null)[ FD ]
Line_12 $$ final VcsRevisionNumber number = revision.getRevisionNumber()-->Line_14 $$ if (number == null)[ FD ]
Line_4 $$ final Map<VcsRevisionNumber, Color> commitAuthorColors = new HashMap<VcsRevisionNumber, Color>()-->Line_30 $$ return Couple.of(commitOrderColors.size() > 1 ? commitOrderColors : null, commitAuthorColors.size() > 1 ? commitAuthorColors : null)[ FD ]
Line_10 $$ for (int i = 0; i < fileRevisionList.size(); i++) -->Line_24 $$ if (!commitOrderColors.containsKey(number)) [ CD ]
Line_6 $$ final List<VcsFileRevision> fileRevisionList = fileAnnotation.getRevisions()-->Line_11 $$ VcsFileRevision revision = fileRevisionList.get(i)[ FD ]
Line_12 $$ final VcsRevisionNumber number = revision.getRevisionNumber()-->Line_16 $$ if (!commitAuthorColors.containsKey(number)) [ FD ]
Line_4 $$ final Map<VcsRevisionNumber, Color> commitAuthorColors = new HashMap<VcsRevisionNumber, Color>()-->Line_16 $$ if (!commitAuthorColors.containsKey(number)) [ FD ]
Line_11 $$ VcsFileRevision revision = fileRevisionList.get(i)-->Line_12 $$ final VcsRevisionNumber number = revision.getRevisionNumber()[ FD ]
Line_13 $$ final String author = revision.getAuthor()-->Line_20 $$ authorColors.put(author, color)[ FD ]
Line_13 $$ final String author = revision.getAuthor()-->Line_22 $$ commitAuthorColors.put(number, authorColors.get(author))[ FD ]
Line_2 $$ private static Couple<Map<VcsRevisionNumber, Color>> computeBgColors(@NotNull FileAnnotation fileAnnotation) -->Line_30 $$ return Couple.of(commitOrderColors.size() > 1 ? commitOrderColors : null, commitAuthorColors.size() > 1 ? commitAuthorColors : null)[ CD ]
Line_16 $$ if (!commitAuthorColors.containsKey(number)) -->Line_17 $$ if (author != null && !authorColors.containsKey(author)) [ CD ]
Line_12 $$ final VcsRevisionNumber number = revision.getRevisionNumber()-->Line_24 $$ if (!commitOrderColors.containsKey(number)) [ FD ]
Line_7 $$ if (fileRevisionList != null) -->Line_8 $$ final int colorsCount = BG_COLORS.length[ CD ]
Line_10 $$ for (int i = 0; i < fileRevisionList.size(); i++) -->Line_16 $$ if (!commitAuthorColors.containsKey(number)) [ CD ]
Line_5 $$ final Map<String, Color> authorColors = new HashMap<String, Color>()-->Line_22 $$ commitAuthorColors.put(number, authorColors.get(author))[ FD ]
Line_5 $$ final Map<String, Color> authorColors = new HashMap<String, Color>()-->Line_17 $$ if (author != null && !authorColors.containsKey(author)) [ FD ]
Line_10 $$ for (int i = 0; i < fileRevisionList.size(); i++) -->Line_12 $$ final VcsRevisionNumber number = revision.getRevisionNumber()[ CD ]
Line_10 $$ for (int i = 0; i < fileRevisionList.size(); i++) -->Line_14 $$ if (number == null)[ CD ]
Line_24 $$ if (!commitOrderColors.containsKey(number)) -->Line_26 $$ commitOrderColors.put(number, color)[ CD ]
Line_2 $$ private static Couple<Map<VcsRevisionNumber, Color>> computeBgColors(@NotNull FileAnnotation fileAnnotation) -->Line_5 $$ final Map<String, Color> authorColors = new HashMap<String, Color>()[ CD ]
Line_10 $$ for (int i = 0; i < fileRevisionList.size(); i++) -->Line_11 $$ VcsFileRevision revision = fileRevisionList.get(i)[ CD ]
Line_2 $$ private static Couple<Map<VcsRevisionNumber, Color>> computeBgColors(@NotNull FileAnnotation fileAnnotation) -->Line_3 $$ final Map<VcsRevisionNumber, Color> commitOrderColors = new HashMap<VcsRevisionNumber, Color>()[ CD ]
Line_3 $$ final Map<VcsRevisionNumber, Color> commitOrderColors = new HashMap<VcsRevisionNumber, Color>()-->Line_24 $$ if (!commitOrderColors.containsKey(number)) [ FD ]
Line_4 $$ final Map<VcsRevisionNumber, Color> commitAuthorColors = new HashMap<VcsRevisionNumber, Color>()-->Line_22 $$ commitAuthorColors.put(number, authorColors.get(author))[ FD ]
Line_5 $$ final Map<String, Color> authorColors = new HashMap<String, Color>()-->Line_20 $$ authorColors.put(author, color)[ FD ]
Line_5 $$ final Map<String, Color> authorColors = new HashMap<String, Color>()-->Line_18 $$ final int index = authorColors.size()[ FD ]
Line_12 $$ final VcsRevisionNumber number = revision.getRevisionNumber()-->Line_26 $$ commitOrderColors.put(number, color)[ FD ]
Line_11 $$ VcsFileRevision revision = fileRevisionList.get(i)-->Line_13 $$ final String author = revision.getAuthor()[ FD ]
Line_10 $$ for (int i = 0; i < fileRevisionList.size(); i++) -->Line_11 $$ VcsFileRevision revision = fileRevisionList.get(i)[ FD ]
