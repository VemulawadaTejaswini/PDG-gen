Line_15 $$ DeletionTaskRecoveryInfo successor = idToInfoMap.get(successorId)-->Line_16 $$ if (successor != null) [ FD ]
Line_22 $$ if (!successorTasks.contains(info.task.taskId)) -->Line_23 $$ long msecTilDeletion = info.deletionTimestamp - now[ CD ]
Line_16 $$ if (successor != null) -->Line_19 $$ LOG.error("Unable to locate dependency task for deletion task " + info.task.taskId + " at " + info.task.getSubDir())[ CD ]
Line_23 $$ long msecTilDeletion = info.deletionTimestamp - now-->Line_24 $$ sched.schedule(info.task, msecTilDeletion, TimeUnit.MILLISECONDS)[ FD ]
Line_5 $$ Set<Integer> successorTasks = new HashSet<Integer>()-->Line_22 $$ if (!successorTasks.contains(info.task.taskId)) [ FD ]
Line_4 $$ Map<Integer, DeletionTaskRecoveryInfo> idToInfoMap = new HashMap<Integer, DeletionTaskRecoveryInfo>(taskProtos.size())-->Line_15 $$ DeletionTaskRecoveryInfo successor = idToInfoMap.get(successorId)[ FD ]
Line_3 $$ List<DeletionServiceDeleteTaskProto> taskProtos = state.getTasks()-->Line_4 $$ Map<Integer, DeletionTaskRecoveryInfo> idToInfoMap = new HashMap<Integer, DeletionTaskRecoveryInfo>(taskProtos.size())[ FD ]
Line_2 $$ private void recover(RecoveredDeletionServiceState state) throws IOException -->Line_4 $$ Map<Integer, DeletionTaskRecoveryInfo> idToInfoMap = new HashMap<Integer, DeletionTaskRecoveryInfo>(taskProtos.size())[ CD ]
Line_2 $$ private void recover(RecoveredDeletionServiceState state) throws IOException -->Line_5 $$ Set<Integer> successorTasks = new HashSet<Integer>()[ CD ]
Line_6 $$ for (DeletionServiceDeleteTaskProto proto : taskProtos) -->Line_7 $$ DeletionTaskRecoveryInfo info = parseTaskProto(proto)[ FD ]
Line_7 $$ DeletionTaskRecoveryInfo info = parseTaskProto(proto)-->Line_8 $$ idToInfoMap.put(info.task.taskId, info)[ FD ]
Line_22 $$ if (!successorTasks.contains(info.task.taskId)) -->Line_24 $$ sched.schedule(info.task, msecTilDeletion, TimeUnit.MILLISECONDS)[ CD ]
Line_2 $$ private void recover(RecoveredDeletionServiceState state) throws IOException -->Line_3 $$ List<DeletionServiceDeleteTaskProto> taskProtos = state.getTasks()[ FD ]
Line_4 $$ Map<Integer, DeletionTaskRecoveryInfo> idToInfoMap = new HashMap<Integer, DeletionTaskRecoveryInfo>(taskProtos.size())-->Line_8 $$ idToInfoMap.put(info.task.taskId, info)[ FD ]
Line_16 $$ if (successor != null) -->Line_17 $$ info.task.addFileDeletionTaskDependency(successor.task)[ CD ]
Line_5 $$ Set<Integer> successorTasks = new HashSet<Integer>()-->Line_10 $$ successorTasks.addAll(info.successorTaskIds)[ FD ]
Line_4 $$ Map<Integer, DeletionTaskRecoveryInfo> idToInfoMap = new HashMap<Integer, DeletionTaskRecoveryInfo>(taskProtos.size())-->Line_13 $$ for (DeletionTaskRecoveryInfo info : idToInfoMap.values()) [ FD ]
Line_2 $$ private void recover(RecoveredDeletionServiceState state) throws IOException -->Line_3 $$ List<DeletionServiceDeleteTaskProto> taskProtos = state.getTasks()[ CD ]
Line_14 $$ for (Integer successorId : info.successorTaskIds) -->Line_15 $$ DeletionTaskRecoveryInfo successor = idToInfoMap.get(successorId)[ FD ]
Line_2 $$ private void recover(RecoveredDeletionServiceState state) throws IOException -->Line_12 $$ final long now = System.currentTimeMillis()[ CD ]
