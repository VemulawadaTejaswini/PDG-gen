Line_2 $$ private void _createServiceClpSerializer(List<String> exceptions) throws Exception -->Line_8 $$ context.put("exceptions", exceptions)[ FD ]
Line_2 $$ private void _createServiceClpSerializer(List<String> exceptions) throws Exception -->Line_8 $$ context.put("exceptions", exceptions)[ CD ]
Line_6 $$ Map<String, Object> context = _getContext()-->Line_7 $$ context.put("entities", _ejbList)[ FD ]
Line_2 $$ private void _createServiceClpSerializer(List<String> exceptions) throws Exception -->Line_11 $$ ToolsUtil.writeFile(ejbFile, content, _author, _modifiedFileNames)[ CD ]
Line_2 $$ private void _createServiceClpSerializer(List<String> exceptions) throws Exception -->Line_6 $$ Map<String, Object> context = _getContext()[ CD ]
Line_3 $$ if (Validator.isNull(_pluginName)) -->Line_4 $$ return[ CD ]
Line_2 $$ private void _createServiceClpSerializer(List<String> exceptions) throws Exception -->Line_10 $$ File ejbFile = new File(_serviceOutputPath + "/service/ClpSerializer.java")[ CD ]
Line_10 $$ File ejbFile = new File(_serviceOutputPath + "/service/ClpSerializer.java")-->Line_11 $$ ToolsUtil.writeFile(ejbFile, content, _author, _modifiedFileNames)[ FD ]
Line_2 $$ private void _createServiceClpSerializer(List<String> exceptions) throws Exception -->Line_7 $$ context.put("entities", _ejbList)[ CD ]
Line_2 $$ private void _createServiceClpSerializer(List<String> exceptions) throws Exception -->Line_9 $$ String content = _processTemplate(_tplServiceClpSerializer, context)[ CD ]
Line_6 $$ Map<String, Object> context = _getContext()-->Line_9 $$ String content = _processTemplate(_tplServiceClpSerializer, context)[ FD ]
Line_9 $$ String content = _processTemplate(_tplServiceClpSerializer, context)-->Line_11 $$ ToolsUtil.writeFile(ejbFile, content, _author, _modifiedFileNames)[ FD ]
Line_2 $$ private void _createServiceClpSerializer(List<String> exceptions) throws Exception -->Line_3 $$ if (Validator.isNull(_pluginName)) [ CD ]
Line_6 $$ Map<String, Object> context = _getContext()-->Line_8 $$ context.put("exceptions", exceptions)[ FD ]
