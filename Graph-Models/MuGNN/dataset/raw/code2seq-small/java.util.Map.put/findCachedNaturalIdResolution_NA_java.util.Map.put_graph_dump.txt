Line_2 $$ public Serializable findCachedNaturalIdResolution(EntityPersister persister, Object[] naturalIdValues) -->Line_8 $$ if (entityNaturalIdResolutionCache != null) [ CD ]
Line_7 $$ final CachedNaturalId cachedNaturalId = new CachedNaturalId(persister, naturalIdValues)-->Line_41 $$ entityNaturalIdResolutionCache.pkToNaturalIdMap.put(pk, cachedNaturalId)[ FD ]
Line_2 $$ public Serializable findCachedNaturalIdResolution(EntityPersister persister, Object[] naturalIdValues) -->Line_5 $$ NaturalIdResolutionCache entityNaturalIdResolutionCache = naturalIdResolutionCacheMap.get(persister)[ CD ]
Line_7 $$ final CachedNaturalId cachedNaturalId = new CachedNaturalId(persister, naturalIdValues)-->Line_9 $$ pk = entityNaturalIdResolutionCache.naturalIdToPkMap.get(cachedNaturalId)[ FD ]
Line_25 $$ pk = CacheHelper.fromSharedCache(session(), naturalIdCacheKey, naturalIdCacheAccessStrategy)-->Line_42 $$ entityNaturalIdResolutionCache.naturalIdToPkMap.put(cachedNaturalId, pk)[ FD ]
Line_36 $$ NaturalIdResolutionCache existingCache = naturalIdResolutionCacheMap.putIfAbsent(persister, entityNaturalIdResolutionCache)-->Line_38 $$ entityNaturalIdResolutionCache = existingCache[ FD ]
Line_3 $$ persister = locatePersisterForKey(persister)-->Line_4 $$ validateNaturalId(persister, naturalIdValues)[ FD ]
Line_2 $$ public Serializable findCachedNaturalIdResolution(EntityPersister persister, Object[] naturalIdValues) -->Line_3 $$ persister = locatePersisterForKey(persister)[ CD ]
Line_34 $$ if (entityNaturalIdResolutionCache == null) -->Line_37 $$ if (existingCache != null) [ CD ]
Line_2 $$ public Serializable findCachedNaturalIdResolution(EntityPersister persister, Object[] naturalIdValues) -->Line_20 $$ if (!persister.hasNaturalIdCache()) [ FD ]
Line_27 $$ if (pk != null) -->Line_28 $$ if (factory.getStatistics().isStatisticsEnabled()) [ CD ]
Line_26 $$ final SessionFactoryImplementor factory = session().getFactory()-->Line_43 $$ if (factory.getStatistics().isStatisticsEnabled()) [ FD ]
Line_23 $$ final NaturalIdRegionAccessStrategy naturalIdCacheAccessStrategy = persister.getNaturalIdCacheAccessStrategy()-->Line_24 $$ final Object naturalIdCacheKey = naturalIdCacheAccessStrategy.generateCacheKey(naturalIdValues, persister, session())[ FD ]
Line_23 $$ final NaturalIdRegionAccessStrategy naturalIdCacheAccessStrategy = persister.getNaturalIdCacheAccessStrategy()-->Line_25 $$ pk = CacheHelper.fromSharedCache(session(), naturalIdCacheKey, naturalIdCacheAccessStrategy)[ FD ]
Line_25 $$ pk = CacheHelper.fromSharedCache(session(), naturalIdCacheKey, naturalIdCacheAccessStrategy)-->Line_32 $$ LOG.tracef("Found natural key [%s] -> primary key [%s] xref in second-level cache for %s", Arrays.toString(naturalIdValues), pk, persister.getRootEntityName())[ FD ]
Line_10 $$ if (pk != null) -->Line_11 $$ if (LOG.isTraceEnabled()) [ CD ]
Line_5 $$ NaturalIdResolutionCache entityNaturalIdResolutionCache = naturalIdResolutionCacheMap.get(persister)-->Line_16 $$ if (entityNaturalIdResolutionCache.containsInvalidNaturalIdReference(naturalIdValues)) [ FD ]
Line_3 $$ persister = locatePersisterForKey(persister)-->Line_24 $$ final Object naturalIdCacheKey = naturalIdCacheAccessStrategy.generateCacheKey(naturalIdValues, persister, session())[ FD ]
Line_3 $$ persister = locatePersisterForKey(persister)-->Line_5 $$ NaturalIdResolutionCache entityNaturalIdResolutionCache = naturalIdResolutionCacheMap.get(persister)[ FD ]
Line_16 $$ if (entityNaturalIdResolutionCache.containsInvalidNaturalIdReference(naturalIdValues)) -->Line_17 $$ return PersistenceContext.NaturalIdHelper.INVALID_NATURAL_ID_REFERENCE[ CD ]
Line_26 $$ final SessionFactoryImplementor factory = session().getFactory()-->Line_28 $$ if (factory.getStatistics().isStatisticsEnabled()) [ FD ]
Line_2 $$ public Serializable findCachedNaturalIdResolution(EntityPersister persister, Object[] naturalIdValues) -->Line_20 $$ if (!persister.hasNaturalIdCache()) [ CD ]
Line_2 $$ public Serializable findCachedNaturalIdResolution(EntityPersister persister, Object[] naturalIdValues) -->Line_32 $$ LOG.tracef("Found natural key [%s] -> primary key [%s] xref in second-level cache for %s", Arrays.toString(naturalIdValues), pk, persister.getRootEntityName())[ FD ]
Line_31 $$ if (LOG.isTraceEnabled()) -->Line_32 $$ LOG.tracef("Found natural key [%s] -> primary key [%s] xref in second-level cache for %s", Arrays.toString(naturalIdValues), pk, persister.getRootEntityName())[ CD ]
Line_9 $$ pk = entityNaturalIdResolutionCache.naturalIdToPkMap.get(cachedNaturalId)-->Line_10 $$ if (pk != null) [ FD ]
Line_2 $$ public Serializable findCachedNaturalIdResolution(EntityPersister persister, Object[] naturalIdValues) -->Line_16 $$ if (entityNaturalIdResolutionCache.containsInvalidNaturalIdReference(naturalIdValues)) [ FD ]
Line_10 $$ if (pk != null) -->Line_14 $$ return pk[ CD ]
Line_2 $$ public Serializable findCachedNaturalIdResolution(EntityPersister persister, Object[] naturalIdValues) -->Line_25 $$ pk = CacheHelper.fromSharedCache(session(), naturalIdCacheKey, naturalIdCacheAccessStrategy)[ CD ]
Line_5 $$ NaturalIdResolutionCache entityNaturalIdResolutionCache = naturalIdResolutionCacheMap.get(persister)-->Line_38 $$ entityNaturalIdResolutionCache = existingCache[ FD ]
Line_2 $$ public Serializable findCachedNaturalIdResolution(EntityPersister persister, Object[] naturalIdValues) -->Line_24 $$ final Object naturalIdCacheKey = naturalIdCacheAccessStrategy.generateCacheKey(naturalIdValues, persister, session())[ CD ]
Line_2 $$ public Serializable findCachedNaturalIdResolution(EntityPersister persister, Object[] naturalIdValues) -->Line_46 $$ return pk[ CD ]
Line_8 $$ if (entityNaturalIdResolutionCache != null) -->Line_9 $$ pk = entityNaturalIdResolutionCache.naturalIdToPkMap.get(cachedNaturalId)[ CD ]
Line_27 $$ if (pk != null) -->Line_42 $$ entityNaturalIdResolutionCache.naturalIdToPkMap.put(cachedNaturalId, pk)[ CD ]
Line_23 $$ final NaturalIdRegionAccessStrategy naturalIdCacheAccessStrategy = persister.getNaturalIdCacheAccessStrategy()-->Line_29 $$ factory.getStatisticsImplementor().naturalIdCacheHit(naturalIdCacheAccessStrategy.getRegion().getName())[ FD ]
Line_27 $$ if (pk != null) -->Line_43 $$ if (factory.getStatistics().isStatisticsEnabled()) [ CD ]
Line_9 $$ pk = entityNaturalIdResolutionCache.naturalIdToPkMap.get(cachedNaturalId)-->Line_25 $$ pk = CacheHelper.fromSharedCache(session(), naturalIdCacheKey, naturalIdCacheAccessStrategy)[ FD ]
Line_36 $$ NaturalIdResolutionCache existingCache = naturalIdResolutionCacheMap.putIfAbsent(persister, entityNaturalIdResolutionCache)-->Line_37 $$ if (existingCache != null) [ FD ]
Line_23 $$ final NaturalIdRegionAccessStrategy naturalIdCacheAccessStrategy = persister.getNaturalIdCacheAccessStrategy()-->Line_44 $$ factory.getStatisticsImplementor().naturalIdCacheMiss(naturalIdCacheAccessStrategy.getRegion().getName())[ FD ]
Line_7 $$ final CachedNaturalId cachedNaturalId = new CachedNaturalId(persister, naturalIdValues)-->Line_42 $$ entityNaturalIdResolutionCache.naturalIdToPkMap.put(cachedNaturalId, pk)[ FD ]
Line_2 $$ public Serializable findCachedNaturalIdResolution(EntityPersister persister, Object[] naturalIdValues) -->Line_7 $$ final CachedNaturalId cachedNaturalId = new CachedNaturalId(persister, naturalIdValues)[ CD ]
Line_11 $$ if (LOG.isTraceEnabled()) -->Line_12 $$ LOG.trace("Resolved natural key -> primary key resolution in session cache: " + persister.getRootEntityName() + "#[" + Arrays.toString(naturalIdValues) + "]")[ CD ]
Line_2 $$ public Serializable findCachedNaturalIdResolution(EntityPersister persister, Object[] naturalIdValues) -->Line_6 $$ Serializable pk[ CD ]
Line_27 $$ if (pk != null) -->Line_41 $$ entityNaturalIdResolutionCache.pkToNaturalIdMap.put(pk, cachedNaturalId)[ CD ]
Line_5 $$ NaturalIdResolutionCache entityNaturalIdResolutionCache = naturalIdResolutionCacheMap.get(persister)-->Line_36 $$ NaturalIdResolutionCache existingCache = naturalIdResolutionCacheMap.putIfAbsent(persister, entityNaturalIdResolutionCache)[ FD ]
Line_2 $$ public Serializable findCachedNaturalIdResolution(EntityPersister persister, Object[] naturalIdValues) -->Line_23 $$ final NaturalIdRegionAccessStrategy naturalIdCacheAccessStrategy = persister.getNaturalIdCacheAccessStrategy()[ CD ]
Line_2 $$ public Serializable findCachedNaturalIdResolution(EntityPersister persister, Object[] naturalIdValues) -->Line_3 $$ persister = locatePersisterForKey(persister)[ FD ]
Line_25 $$ pk = CacheHelper.fromSharedCache(session(), naturalIdCacheKey, naturalIdCacheAccessStrategy)-->Line_41 $$ entityNaturalIdResolutionCache.pkToNaturalIdMap.put(pk, cachedNaturalId)[ FD ]
Line_9 $$ pk = entityNaturalIdResolutionCache.naturalIdToPkMap.get(cachedNaturalId)-->Line_42 $$ entityNaturalIdResolutionCache.naturalIdToPkMap.put(cachedNaturalId, pk)[ FD ]
Line_3 $$ persister = locatePersisterForKey(persister)-->Line_12 $$ LOG.trace("Resolved natural key -> primary key resolution in session cache: " + persister.getRootEntityName() + "#[" + Arrays.toString(naturalIdValues) + "]")[ FD ]
Line_6 $$ Serializable pk-->Line_25 $$ pk = CacheHelper.fromSharedCache(session(), naturalIdCacheKey, naturalIdCacheAccessStrategy)[ FD ]
Line_26 $$ final SessionFactoryImplementor factory = session().getFactory()-->Line_44 $$ factory.getStatisticsImplementor().naturalIdCacheMiss(naturalIdCacheAccessStrategy.getRegion().getName())[ FD ]
Line_8 $$ if (entityNaturalIdResolutionCache != null) -->Line_16 $$ if (entityNaturalIdResolutionCache.containsInvalidNaturalIdReference(naturalIdValues)) [ CD ]
Line_3 $$ persister = locatePersisterForKey(persister)-->Line_23 $$ final NaturalIdRegionAccessStrategy naturalIdCacheAccessStrategy = persister.getNaturalIdCacheAccessStrategy()[ FD ]
Line_6 $$ Serializable pk-->Line_10 $$ if (pk != null) [ FD ]
Line_2 $$ public Serializable findCachedNaturalIdResolution(EntityPersister persister, Object[] naturalIdValues) -->Line_27 $$ if (pk != null) [ CD ]
Line_34 $$ if (entityNaturalIdResolutionCache == null) -->Line_36 $$ NaturalIdResolutionCache existingCache = naturalIdResolutionCacheMap.putIfAbsent(persister, entityNaturalIdResolutionCache)[ CD ]
Line_5 $$ NaturalIdResolutionCache entityNaturalIdResolutionCache = naturalIdResolutionCacheMap.get(persister)-->Line_35 $$ entityNaturalIdResolutionCache = new NaturalIdResolutionCache(persister)[ FD ]
Line_5 $$ NaturalIdResolutionCache entityNaturalIdResolutionCache = naturalIdResolutionCacheMap.get(persister)-->Line_34 $$ if (entityNaturalIdResolutionCache == null) [ FD ]
Line_3 $$ persister = locatePersisterForKey(persister)-->Line_20 $$ if (!persister.hasNaturalIdCache()) [ FD ]
Line_2 $$ public Serializable findCachedNaturalIdResolution(EntityPersister persister, Object[] naturalIdValues) -->Line_24 $$ final Object naturalIdCacheKey = naturalIdCacheAccessStrategy.generateCacheKey(naturalIdValues, persister, session())[ FD ]
Line_8 $$ if (entityNaturalIdResolutionCache != null) -->Line_10 $$ if (pk != null) [ CD ]
Line_26 $$ final SessionFactoryImplementor factory = session().getFactory()-->Line_29 $$ factory.getStatisticsImplementor().naturalIdCacheHit(naturalIdCacheAccessStrategy.getRegion().getName())[ FD ]
Line_2 $$ public Serializable findCachedNaturalIdResolution(EntityPersister persister, Object[] naturalIdValues) -->Line_5 $$ NaturalIdResolutionCache entityNaturalIdResolutionCache = naturalIdResolutionCacheMap.get(persister)[ FD ]
Line_27 $$ if (pk != null) -->Line_34 $$ if (entityNaturalIdResolutionCache == null) [ CD ]
Line_6 $$ Serializable pk-->Line_32 $$ LOG.tracef("Found natural key [%s] -> primary key [%s] xref in second-level cache for %s", Arrays.toString(naturalIdValues), pk, persister.getRootEntityName())[ FD ]
Line_28 $$ if (factory.getStatistics().isStatisticsEnabled()) -->Line_29 $$ factory.getStatisticsImplementor().naturalIdCacheHit(naturalIdCacheAccessStrategy.getRegion().getName())[ CD ]
Line_6 $$ Serializable pk-->Line_27 $$ if (pk != null) [ FD ]
Line_43 $$ if (factory.getStatistics().isStatisticsEnabled()) -->Line_44 $$ factory.getStatisticsImplementor().naturalIdCacheMiss(naturalIdCacheAccessStrategy.getRegion().getName())[ CD ]
Line_27 $$ if (pk != null) -->Line_31 $$ if (LOG.isTraceEnabled()) [ CD ]
Line_37 $$ if (existingCache != null) -->Line_38 $$ entityNaturalIdResolutionCache = existingCache[ CD ]
Line_6 $$ Serializable pk-->Line_42 $$ entityNaturalIdResolutionCache.naturalIdToPkMap.put(cachedNaturalId, pk)[ FD ]
Line_6 $$ Serializable pk-->Line_9 $$ pk = entityNaturalIdResolutionCache.naturalIdToPkMap.get(cachedNaturalId)[ FD ]
Line_6 $$ Serializable pk-->Line_41 $$ entityNaturalIdResolutionCache.pkToNaturalIdMap.put(pk, cachedNaturalId)[ FD ]
Line_9 $$ pk = entityNaturalIdResolutionCache.naturalIdToPkMap.get(cachedNaturalId)-->Line_41 $$ entityNaturalIdResolutionCache.pkToNaturalIdMap.put(pk, cachedNaturalId)[ FD ]
Line_35 $$ entityNaturalIdResolutionCache = new NaturalIdResolutionCache(persister)-->Line_38 $$ entityNaturalIdResolutionCache = existingCache[ FD ]
Line_20 $$ if (!persister.hasNaturalIdCache()) -->Line_21 $$ return null[ CD ]
Line_3 $$ persister = locatePersisterForKey(persister)-->Line_36 $$ NaturalIdResolutionCache existingCache = naturalIdResolutionCacheMap.putIfAbsent(persister, entityNaturalIdResolutionCache)[ FD ]
Line_5 $$ NaturalIdResolutionCache entityNaturalIdResolutionCache = naturalIdResolutionCacheMap.get(persister)-->Line_8 $$ if (entityNaturalIdResolutionCache != null) [ FD ]
Line_2 $$ public Serializable findCachedNaturalIdResolution(EntityPersister persister, Object[] naturalIdValues) -->Line_36 $$ NaturalIdResolutionCache existingCache = naturalIdResolutionCacheMap.putIfAbsent(persister, entityNaturalIdResolutionCache)[ FD ]
Line_34 $$ if (entityNaturalIdResolutionCache == null) -->Line_35 $$ entityNaturalIdResolutionCache = new NaturalIdResolutionCache(persister)[ CD ]
Line_2 $$ public Serializable findCachedNaturalIdResolution(EntityPersister persister, Object[] naturalIdValues) -->Line_4 $$ validateNaturalId(persister, naturalIdValues)[ CD ]
Line_35 $$ entityNaturalIdResolutionCache = new NaturalIdResolutionCache(persister)-->Line_36 $$ NaturalIdResolutionCache existingCache = naturalIdResolutionCacheMap.putIfAbsent(persister, entityNaturalIdResolutionCache)[ FD ]
Line_2 $$ public Serializable findCachedNaturalIdResolution(EntityPersister persister, Object[] naturalIdValues) -->Line_23 $$ final NaturalIdRegionAccessStrategy naturalIdCacheAccessStrategy = persister.getNaturalIdCacheAccessStrategy()[ FD ]
Line_2 $$ public Serializable findCachedNaturalIdResolution(EntityPersister persister, Object[] naturalIdValues) -->Line_12 $$ LOG.trace("Resolved natural key -> primary key resolution in session cache: " + persister.getRootEntityName() + "#[" + Arrays.toString(naturalIdValues) + "]")[ FD ]
Line_9 $$ pk = entityNaturalIdResolutionCache.naturalIdToPkMap.get(cachedNaturalId)-->Line_32 $$ LOG.tracef("Found natural key [%s] -> primary key [%s] xref in second-level cache for %s", Arrays.toString(naturalIdValues), pk, persister.getRootEntityName())[ FD ]
Line_25 $$ pk = CacheHelper.fromSharedCache(session(), naturalIdCacheKey, naturalIdCacheAccessStrategy)-->Line_27 $$ if (pk != null) [ FD ]
Line_2 $$ public Serializable findCachedNaturalIdResolution(EntityPersister persister, Object[] naturalIdValues) -->Line_4 $$ validateNaturalId(persister, naturalIdValues)[ FD ]
Line_2 $$ public Serializable findCachedNaturalIdResolution(EntityPersister persister, Object[] naturalIdValues) -->Line_26 $$ final SessionFactoryImplementor factory = session().getFactory()[ CD ]
Line_9 $$ pk = entityNaturalIdResolutionCache.naturalIdToPkMap.get(cachedNaturalId)-->Line_27 $$ if (pk != null) [ FD ]
Line_3 $$ persister = locatePersisterForKey(persister)-->Line_32 $$ LOG.tracef("Found natural key [%s] -> primary key [%s] xref in second-level cache for %s", Arrays.toString(naturalIdValues), pk, persister.getRootEntityName())[ FD ]
Line_24 $$ final Object naturalIdCacheKey = naturalIdCacheAccessStrategy.generateCacheKey(naturalIdValues, persister, session())-->Line_25 $$ pk = CacheHelper.fromSharedCache(session(), naturalIdCacheKey, naturalIdCacheAccessStrategy)[ FD ]
