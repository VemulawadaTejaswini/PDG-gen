Line_2 $$ protected void testExportImportDisplayStyle(long displayStyleGroupId, String scopeType) throws Exception -->Line_11 $$ TemplateHandler templateHandler = portlet.getTemplateHandlerInstance()[ CD ]
Line_30 $$ long importedDisplayStyleGroupId = GetterUtil.getLong(portletPreferences.getValue("displayStyleGroupId", null))-->Line_38 $$ Assert.assertEquals(expectedDisplayStyleGroupId, importedDisplayStyleGroupId)[ FD ]
Line_19 $$ Map<String, String[]> preferenceMap = new HashMap()-->Line_26 $$ preferenceMap.put("lfrScopeType", new String[] [ FD ]
Line_2 $$ protected void testExportImportDisplayStyle(long displayStyleGroupId, String scopeType) throws Exception -->Line_32 $$ if (scopeType.equals("company")) [ FD ]
Line_2 $$ protected void testExportImportDisplayStyle(long displayStyleGroupId, String scopeType) throws Exception -->Line_18 $$ DDMTemplate ddmTemplate = DDMTemplateTestUtil.addTemplate(displayStyleGroupId, PortalUtil.getClassNameId(className), 0, resourceClassNameId)[ CD ]
Line_36 $$ expectedDisplayStyleGroupId = displayStyleGroupId-->Line_38 $$ Assert.assertEquals(expectedDisplayStyleGroupId, importedDisplayStyleGroupId)[ FD ]
Line_2 $$ protected void testExportImportDisplayStyle(long displayStyleGroupId, String scopeType) throws Exception -->Line_12 $$ if (templateHandler == null) [ CD ]
Line_3 $$ Portlet portlet = PortletLocalServiceUtil.getPortletById(group.getCompanyId(), getPortletId())-->Line_7 $$ if (scopeType.equals("layout") && !portlet.isScopeable()) [ FD ]
Line_23 $$ if (scopeType.equals("layout")) -->Line_24 $$ preferenceMap.put("lfrScopeLayoutUuid", new String[] [ CD ]
Line_12 $$ if (templateHandler == null) -->Line_13 $$ Assert.assertTrue("This test does not apply", true)[ CD ]
Line_4 $$ if (portlet == null) -->Line_5 $$ return[ CD ]
Line_11 $$ TemplateHandler templateHandler = portlet.getTemplateHandlerInstance()-->Line_12 $$ if (templateHandler == null) [ FD ]
Line_2 $$ protected void testExportImportDisplayStyle(long displayStyleGroupId, String scopeType) throws Exception -->Line_23 $$ if (scopeType.equals("layout")) [ FD ]
Line_33 $$ Group companyGroup = GroupLocalServiceUtil.getCompanyGroup(importedGroup.getCompanyId())-->Line_34 $$ expectedDisplayStyleGroupId = companyGroup.getGroupId()[ FD ]
Line_2 $$ protected void testExportImportDisplayStyle(long displayStyleGroupId, String scopeType) throws Exception -->Line_31 $$ long expectedDisplayStyleGroupId = importedGroup.getGroupId()[ CD ]
Line_2 $$ protected void testExportImportDisplayStyle(long displayStyleGroupId, String scopeType) throws Exception -->Line_20 $$ String displayStyle = PortletDisplayTemplateManager.DISPLAY_STYLE_PREFIX + ddmTemplate.getTemplateKey()[ CD ]
Line_19 $$ Map<String, String[]> preferenceMap = new HashMap()-->Line_24 $$ preferenceMap.put("lfrScopeLayoutUuid", new String[] [ FD ]
Line_7 $$ if (scopeType.equals("layout") && !portlet.isScopeable()) -->Line_9 $$ return[ CD ]
Line_31 $$ long expectedDisplayStyleGroupId = importedGroup.getGroupId()-->Line_38 $$ Assert.assertEquals(expectedDisplayStyleGroupId, importedDisplayStyleGroupId)[ FD ]
Line_2 $$ protected void testExportImportDisplayStyle(long displayStyleGroupId, String scopeType) throws Exception -->Line_28 $$ String importedDisplayStyle = portletPreferences.getValue("displayStyle", StringPool.BLANK)[ CD ]
Line_2 $$ protected void testExportImportDisplayStyle(long displayStyleGroupId, String scopeType) throws Exception -->Line_35 $$ if (displayStyleGroupId != group.getGroupId()) [ FD ]
Line_19 $$ Map<String, String[]> preferenceMap = new HashMap()-->Line_21 $$ preferenceMap.put("displayStyle", new String[] [ FD ]
Line_2 $$ protected void testExportImportDisplayStyle(long displayStyleGroupId, String scopeType) throws Exception -->Line_21 $$ preferenceMap.put("displayStyle", new String[] [ CD ]
Line_2 $$ protected void testExportImportDisplayStyle(long displayStyleGroupId, String scopeType) throws Exception -->Line_23 $$ if (scopeType.equals("layout")) [ CD ]
Line_20 $$ String displayStyle = PortletDisplayTemplateManager.DISPLAY_STYLE_PREFIX + ddmTemplate.getTemplateKey()-->Line_29 $$ Assert.assertEquals(displayStyle, importedDisplayStyle)[ FD ]
Line_32 $$ if (scopeType.equals("company")) -->Line_33 $$ Group companyGroup = GroupLocalServiceUtil.getCompanyGroup(importedGroup.getCompanyId())[ CD ]
Line_31 $$ long expectedDisplayStyleGroupId = importedGroup.getGroupId()-->Line_36 $$ expectedDisplayStyleGroupId = displayStyleGroupId[ FD ]
Line_34 $$ expectedDisplayStyleGroupId = companyGroup.getGroupId()-->Line_36 $$ expectedDisplayStyleGroupId = displayStyleGroupId[ FD ]
Line_11 $$ TemplateHandler templateHandler = portlet.getTemplateHandlerInstance()-->Line_16 $$ String className = templateHandler.getClassName()[ FD ]
Line_19 $$ Map<String, String[]> preferenceMap = new HashMap()-->Line_27 $$ PortletPreferences portletPreferences = getImportedPortletPreferences(preferenceMap)[ FD ]
Line_3 $$ Portlet portlet = PortletLocalServiceUtil.getPortletById(group.getCompanyId(), getPortletId())-->Line_4 $$ if (portlet == null) [ FD ]
Line_2 $$ protected void testExportImportDisplayStyle(long displayStyleGroupId, String scopeType) throws Exception -->Line_3 $$ Portlet portlet = PortletLocalServiceUtil.getPortletById(group.getCompanyId(), getPortletId())[ CD ]
Line_2 $$ protected void testExportImportDisplayStyle(long displayStyleGroupId, String scopeType) throws Exception -->Line_16 $$ String className = templateHandler.getClassName()[ CD ]
Line_2 $$ protected void testExportImportDisplayStyle(long displayStyleGroupId, String scopeType) throws Exception -->Line_32 $$ if (scopeType.equals("company")) [ CD ]
Line_2 $$ protected void testExportImportDisplayStyle(long displayStyleGroupId, String scopeType) throws Exception -->Line_7 $$ if (scopeType.equals("layout") && !portlet.isScopeable()) [ CD ]
Line_2 $$ protected void testExportImportDisplayStyle(long displayStyleGroupId, String scopeType) throws Exception -->Line_26 $$ preferenceMap.put("lfrScopeType", new String[] [ CD ]
Line_2 $$ protected void testExportImportDisplayStyle(long displayStyleGroupId, String scopeType) throws Exception -->Line_29 $$ Assert.assertEquals(displayStyle, importedDisplayStyle)[ CD ]
Line_35 $$ if (displayStyleGroupId != group.getGroupId()) -->Line_36 $$ expectedDisplayStyleGroupId = displayStyleGroupId[ CD ]
Line_2 $$ protected void testExportImportDisplayStyle(long displayStyleGroupId, String scopeType) throws Exception -->Line_7 $$ if (scopeType.equals("layout") && !portlet.isScopeable()) [ FD ]
Line_2 $$ protected void testExportImportDisplayStyle(long displayStyleGroupId, String scopeType) throws Exception -->Line_17 $$ long resourceClassNameId = PortalUtil.getClassNameId("com.liferay.portlet.display.template.PortletDisplayTemplate")[ CD ]
Line_2 $$ protected void testExportImportDisplayStyle(long displayStyleGroupId, String scopeType) throws Exception -->Line_18 $$ DDMTemplate ddmTemplate = DDMTemplateTestUtil.addTemplate(displayStyleGroupId, PortalUtil.getClassNameId(className), 0, resourceClassNameId)[ FD ]
Line_18 $$ DDMTemplate ddmTemplate = DDMTemplateTestUtil.addTemplate(displayStyleGroupId, PortalUtil.getClassNameId(className), 0, resourceClassNameId)-->Line_20 $$ String displayStyle = PortletDisplayTemplateManager.DISPLAY_STYLE_PREFIX + ddmTemplate.getTemplateKey()[ FD ]
Line_2 $$ protected void testExportImportDisplayStyle(long displayStyleGroupId, String scopeType) throws Exception -->Line_22 $$ preferenceMap.put("displayStyleGroupId", new String[] [ CD ]
Line_2 $$ protected void testExportImportDisplayStyle(long displayStyleGroupId, String scopeType) throws Exception -->Line_30 $$ long importedDisplayStyleGroupId = GetterUtil.getLong(portletPreferences.getValue("displayStyleGroupId", null))[ CD ]
Line_32 $$ if (scopeType.equals("company")) -->Line_34 $$ expectedDisplayStyleGroupId = companyGroup.getGroupId()[ CD ]
Line_34 $$ expectedDisplayStyleGroupId = companyGroup.getGroupId()-->Line_38 $$ Assert.assertEquals(expectedDisplayStyleGroupId, importedDisplayStyleGroupId)[ FD ]
Line_18 $$ DDMTemplate ddmTemplate = DDMTemplateTestUtil.addTemplate(displayStyleGroupId, PortalUtil.getClassNameId(className), 0, resourceClassNameId)-->Line_22 $$ preferenceMap.put("displayStyleGroupId", new String[] [ FD ]
Line_12 $$ if (templateHandler == null) -->Line_14 $$ return[ CD ]
Line_31 $$ long expectedDisplayStyleGroupId = importedGroup.getGroupId()-->Line_34 $$ expectedDisplayStyleGroupId = companyGroup.getGroupId()[ FD ]
Line_16 $$ String className = templateHandler.getClassName()-->Line_18 $$ DDMTemplate ddmTemplate = DDMTemplateTestUtil.addTemplate(displayStyleGroupId, PortalUtil.getClassNameId(className), 0, resourceClassNameId)[ FD ]
Line_27 $$ PortletPreferences portletPreferences = getImportedPortletPreferences(preferenceMap)-->Line_30 $$ long importedDisplayStyleGroupId = GetterUtil.getLong(portletPreferences.getValue("displayStyleGroupId", null))[ FD ]
Line_2 $$ protected void testExportImportDisplayStyle(long displayStyleGroupId, String scopeType) throws Exception -->Line_38 $$ Assert.assertEquals(expectedDisplayStyleGroupId, importedDisplayStyleGroupId)[ CD ]
Line_19 $$ Map<String, String[]> preferenceMap = new HashMap()-->Line_22 $$ preferenceMap.put("displayStyleGroupId", new String[] [ FD ]
Line_28 $$ String importedDisplayStyle = portletPreferences.getValue("displayStyle", StringPool.BLANK)-->Line_29 $$ Assert.assertEquals(displayStyle, importedDisplayStyle)[ FD ]
Line_17 $$ long resourceClassNameId = PortalUtil.getClassNameId("com.liferay.portlet.display.template.PortletDisplayTemplate")-->Line_18 $$ DDMTemplate ddmTemplate = DDMTemplateTestUtil.addTemplate(displayStyleGroupId, PortalUtil.getClassNameId(className), 0, resourceClassNameId)[ FD ]
Line_2 $$ protected void testExportImportDisplayStyle(long displayStyleGroupId, String scopeType) throws Exception -->Line_4 $$ if (portlet == null) [ CD ]
Line_2 $$ protected void testExportImportDisplayStyle(long displayStyleGroupId, String scopeType) throws Exception -->Line_27 $$ PortletPreferences portletPreferences = getImportedPortletPreferences(preferenceMap)[ CD ]
Line_27 $$ PortletPreferences portletPreferences = getImportedPortletPreferences(preferenceMap)-->Line_28 $$ String importedDisplayStyle = portletPreferences.getValue("displayStyle", StringPool.BLANK)[ FD ]
Line_32 $$ if (scopeType.equals("company")) -->Line_35 $$ if (displayStyleGroupId != group.getGroupId()) [ CD ]
Line_2 $$ protected void testExportImportDisplayStyle(long displayStyleGroupId, String scopeType) throws Exception -->Line_36 $$ expectedDisplayStyleGroupId = displayStyleGroupId[ FD ]
Line_3 $$ Portlet portlet = PortletLocalServiceUtil.getPortletById(group.getCompanyId(), getPortletId())-->Line_11 $$ TemplateHandler templateHandler = portlet.getTemplateHandlerInstance()[ FD ]
Line_2 $$ protected void testExportImportDisplayStyle(long displayStyleGroupId, String scopeType) throws Exception -->Line_19 $$ Map<String, String[]> preferenceMap = new HashMap()[ CD ]
Line_7 $$ if (scopeType.equals("layout") && !portlet.isScopeable()) -->Line_8 $$ Assert.assertTrue("This test does not apply", true)[ CD ]
