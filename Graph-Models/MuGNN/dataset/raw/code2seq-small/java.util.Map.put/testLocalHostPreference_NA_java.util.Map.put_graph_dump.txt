Line_2 $$ public void testLocalHostPreference() throws Exception -->Line_9 $$ Map<String, String> replicationMap = new HashMap()[ CD ]
Line_2 $$ public void testLocalHostPreference() throws Exception -->Line_12 $$ replicationMap.put("DC2", "2")[ CD ]
Line_14 $$ KeyspaceMetadata meta = KeyspaceMetadata.create("Keyspace1", KeyspaceParams.create(false, replicationMap))-->Line_15 $$ Schema.instance.setKeyspaceMetadata(meta)[ FD ]
Line_2 $$ public void testLocalHostPreference() throws Exception -->Line_16 $$ Optional<InetAddress> naturalEndpoint = ViewUtils.getViewNaturalEndpoint("Keyspace1", new StringToken("CA"), new StringToken("BB"))[ CD ]
Line_9 $$ Map<String, String> replicationMap = new HashMap()-->Line_12 $$ replicationMap.put("DC2", "2")[ FD ]
Line_2 $$ public void testLocalHostPreference() throws Exception -->Line_17 $$ Assert.assertTrue(naturalEndpoint.isPresent())[ CD ]
Line_2 $$ public void testLocalHostPreference() throws Exception -->Line_13 $$ Keyspace.clear("Keyspace1")[ CD ]
Line_2 $$ public void testLocalHostPreference() throws Exception -->Line_18 $$ Assert.assertEquals(InetAddress.getByName("127.0.0.1"), naturalEndpoint.get())[ CD ]
Line_2 $$ public void testLocalHostPreference() throws Exception -->Line_6 $$ metadata.updateNormalToken(new StringToken("C"), InetAddress.getByName("127.0.0.2"))[ CD ]
Line_16 $$ Optional<InetAddress> naturalEndpoint = ViewUtils.getViewNaturalEndpoint("Keyspace1", new StringToken("CA"), new StringToken("BB"))-->Line_18 $$ Assert.assertEquals(InetAddress.getByName("127.0.0.1"), naturalEndpoint.get())[ FD ]
Line_3 $$ TokenMetadata metadata = StorageService.instance.getTokenMetadata()-->Line_5 $$ metadata.updateNormalToken(new StringToken("A"), InetAddress.getByName("127.0.0.1"))[ FD ]
Line_2 $$ public void testLocalHostPreference() throws Exception -->Line_10 $$ replicationMap.put(ReplicationParams.CLASS, NetworkTopologyStrategy.class.getName())[ CD ]
Line_9 $$ Map<String, String> replicationMap = new HashMap()-->Line_14 $$ KeyspaceMetadata meta = KeyspaceMetadata.create("Keyspace1", KeyspaceParams.create(false, replicationMap))[ FD ]
Line_16 $$ Optional<InetAddress> naturalEndpoint = ViewUtils.getViewNaturalEndpoint("Keyspace1", new StringToken("CA"), new StringToken("BB"))-->Line_17 $$ Assert.assertTrue(naturalEndpoint.isPresent())[ FD ]
Line_2 $$ public void testLocalHostPreference() throws Exception -->Line_5 $$ metadata.updateNormalToken(new StringToken("A"), InetAddress.getByName("127.0.0.1"))[ CD ]
Line_2 $$ public void testLocalHostPreference() throws Exception -->Line_3 $$ TokenMetadata metadata = StorageService.instance.getTokenMetadata()[ CD ]
Line_2 $$ public void testLocalHostPreference() throws Exception -->Line_14 $$ KeyspaceMetadata meta = KeyspaceMetadata.create("Keyspace1", KeyspaceParams.create(false, replicationMap))[ CD ]
Line_2 $$ public void testLocalHostPreference() throws Exception -->Line_15 $$ Schema.instance.setKeyspaceMetadata(meta)[ CD ]
Line_2 $$ public void testLocalHostPreference() throws Exception -->Line_7 $$ metadata.updateNormalToken(new StringToken("B"), InetAddress.getByName("127.0.0.4"))[ CD ]
Line_3 $$ TokenMetadata metadata = StorageService.instance.getTokenMetadata()-->Line_6 $$ metadata.updateNormalToken(new StringToken("C"), InetAddress.getByName("127.0.0.2"))[ FD ]
Line_3 $$ TokenMetadata metadata = StorageService.instance.getTokenMetadata()-->Line_8 $$ metadata.updateNormalToken(new StringToken("D"), InetAddress.getByName("127.0.0.5"))[ FD ]
Line_2 $$ public void testLocalHostPreference() throws Exception -->Line_4 $$ metadata.clearUnsafe()[ CD ]
Line_3 $$ TokenMetadata metadata = StorageService.instance.getTokenMetadata()-->Line_7 $$ metadata.updateNormalToken(new StringToken("B"), InetAddress.getByName("127.0.0.4"))[ FD ]
Line_3 $$ TokenMetadata metadata = StorageService.instance.getTokenMetadata()-->Line_4 $$ metadata.clearUnsafe()[ FD ]
Line_2 $$ public void testLocalHostPreference() throws Exception -->Line_11 $$ replicationMap.put("DC1", "2")[ CD ]
Line_2 $$ public void testLocalHostPreference() throws Exception -->Line_8 $$ metadata.updateNormalToken(new StringToken("D"), InetAddress.getByName("127.0.0.5"))[ CD ]
Line_9 $$ Map<String, String> replicationMap = new HashMap()-->Line_10 $$ replicationMap.put(ReplicationParams.CLASS, NetworkTopologyStrategy.class.getName())[ FD ]
Line_9 $$ Map<String, String> replicationMap = new HashMap()-->Line_11 $$ replicationMap.put("DC1", "2")[ FD ]
