Line_2 $$ public Conflict newElement(K target, Collection<? extends T> candidates, @Nullable K replacedBy) -->Line_3 $$ elements.put(target, candidates)[ CD ]
Line_2 $$ public Conflict newElement(K target, Collection<? extends T> candidates, @Nullable K replacedBy) -->Line_14 $$ if (candidates.size() > 1) [ FD ]
Line_2 $$ public Conflict newElement(K target, Collection<? extends T> candidates, @Nullable K replacedBy) -->Line_10 $$ Collection<K> replacementSource = targetToSource.get(target)[ FD ]
Line_2 $$ public Conflict newElement(K target, Collection<? extends T> candidates, @Nullable K replacedBy) -->Line_3 $$ elements.put(target, candidates)[ FD ]
Line_2 $$ public Conflict newElement(K target, Collection<? extends T> candidates, @Nullable K replacedBy) -->Line_6 $$ if (elements.containsKey(replacedBy)) [ FD ]
Line_11 $$ if (!replacementSource.isEmpty()) -->Line_12 $$ return registerConflict(replacementSource, target)[ CD ]
Line_2 $$ public Conflict newElement(K target, Collection<? extends T> candidates, @Nullable K replacedBy) -->Line_5 $$ targetToSource.put(replacedBy, target)[ FD ]
Line_14 $$ if (candidates.size() > 1) -->Line_15 $$ return registerConflict(target, target)[ CD ]
Line_2 $$ public Conflict newElement(K target, Collection<? extends T> candidates, @Nullable K replacedBy) -->Line_15 $$ return registerConflict(target, target)[ FD ]
Line_2 $$ public Conflict newElement(K target, Collection<? extends T> candidates, @Nullable K replacedBy) -->Line_10 $$ Collection<K> replacementSource = targetToSource.get(target)[ CD ]
Line_2 $$ public Conflict newElement(K target, Collection<? extends T> candidates, @Nullable K replacedBy) -->Line_12 $$ return registerConflict(replacementSource, target)[ FD ]
Line_2 $$ public Conflict newElement(K target, Collection<? extends T> candidates, @Nullable K replacedBy) -->Line_14 $$ if (candidates.size() > 1) [ CD ]
Line_10 $$ Collection<K> replacementSource = targetToSource.get(target)-->Line_11 $$ if (!replacementSource.isEmpty()) [ FD ]
Line_6 $$ if (elements.containsKey(replacedBy)) -->Line_7 $$ return registerConflict(target, replacedBy)[ CD ]
Line_2 $$ public Conflict newElement(K target, Collection<? extends T> candidates, @Nullable K replacedBy) -->Line_4 $$ if (replacedBy != null) [ CD ]
Line_4 $$ if (replacedBy != null) -->Line_5 $$ targetToSource.put(replacedBy, target)[ CD ]
Line_4 $$ if (replacedBy != null) -->Line_6 $$ if (elements.containsKey(replacedBy)) [ CD ]
Line_2 $$ public Conflict newElement(K target, Collection<? extends T> candidates, @Nullable K replacedBy) -->Line_7 $$ return registerConflict(target, replacedBy)[ FD ]
Line_2 $$ public Conflict newElement(K target, Collection<? extends T> candidates, @Nullable K replacedBy) -->Line_17 $$ return null[ CD ]
Line_10 $$ Collection<K> replacementSource = targetToSource.get(target)-->Line_12 $$ return registerConflict(replacementSource, target)[ FD ]
Line_2 $$ public Conflict newElement(K target, Collection<? extends T> candidates, @Nullable K replacedBy) -->Line_4 $$ if (replacedBy != null) [ FD ]
Line_2 $$ public Conflict newElement(K target, Collection<? extends T> candidates, @Nullable K replacedBy) -->Line_11 $$ if (!replacementSource.isEmpty()) [ CD ]
