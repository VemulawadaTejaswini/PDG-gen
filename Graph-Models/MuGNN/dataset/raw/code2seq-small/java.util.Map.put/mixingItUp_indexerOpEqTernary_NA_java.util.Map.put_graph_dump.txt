Line_2 $$ public void mixingItUp_indexerOpEqTernary() throws Exception -->Line_8 $$ assertEquals(2, expression.getValue(m))[ CD ]
Line_3 $$ Map<String, String> m = new HashMap<String, String>()-->Line_6 $$ System.out.println(expression.getValue(m))[ FD ]
Line_3 $$ Map<String, String> m = new HashMap<String, String>()-->Line_9 $$ m.remove("andy")[ FD ]
Line_2 $$ public void mixingItUp_indexerOpEqTernary() throws Exception -->Line_6 $$ System.out.println(expression.getValue(m))[ CD ]
Line_2 $$ public void mixingItUp_indexerOpEqTernary() throws Exception -->Line_10 $$ assertEquals(1, expression.getValue(m))[ CD ]
Line_3 $$ Map<String, String> m = new HashMap<String, String>()-->Line_10 $$ assertEquals(1, expression.getValue(m))[ FD ]
Line_2 $$ public void mixingItUp_indexerOpEqTernary() throws Exception -->Line_9 $$ m.remove("andy")[ CD ]
Line_2 $$ public void mixingItUp_indexerOpEqTernary() throws Exception -->Line_3 $$ Map<String, String> m = new HashMap<String, String>()[ CD ]
Line_2 $$ public void mixingItUp_indexerOpEqTernary() throws Exception -->Line_4 $$ m.put("andy", "778")[ CD ]
Line_3 $$ Map<String, String> m = new HashMap<String, String>()-->Line_4 $$ m.put("andy", "778")[ FD ]
Line_2 $$ public void mixingItUp_indexerOpEqTernary() throws Exception -->Line_7 $$ assertCanCompile(expression)[ CD ]
Line_3 $$ Map<String, String> m = new HashMap<String, String>()-->Line_8 $$ assertEquals(2, expression.getValue(m))[ FD ]
Line_2 $$ public void mixingItUp_indexerOpEqTernary() throws Exception -->Line_5 $$ expression = parse("['andy']==null?1:2")[ CD ]
