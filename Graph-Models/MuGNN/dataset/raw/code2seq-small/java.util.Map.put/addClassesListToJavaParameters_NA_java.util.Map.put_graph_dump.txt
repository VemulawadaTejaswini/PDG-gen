Line_38 $$ if (JUnitConfiguration.TEST_PACKAGE.equals(data.TEST_OBJECT)) -->Line_39 $$ Collections.sort(testNames)[ CD ]
Line_20 $$ if (module != null) -->Line_22 $$ if (list == null) [ CD ]
Line_4 $$ if (createTempFile) -->Line_5 $$ createTempFiles(javaParameters)[ CD ]
Line_2 $$ protected <T> void addClassesListToJavaParameters(Collection<? extends T> elements, Function<T, String> nameFunction, String packageName, boolean createTempFile, JavaParameters javaParameters) throws CantRunException -->Line_14 $$ final String name = nameFunction.fun(element)[ FD ]
Line_7 $$ final Map<Module, List<String>> perModule = forkPerModule() ? new TreeMap<Module, List<String>>(new Comparator<Module>() -->Line_9 $$ return StringUtil.compare(o1.getName(), o2.getName(), true)[ FD ]
Line_7 $$ final Map<Module, List<String>> perModule = forkPerModule() ? new TreeMap<Module, List<String>>(new Comparator<Module>() -->Line_43 $$ writeClassesPerModule(packageName, javaParameters, perModule)[ FD ]
Line_18 $$ if (perModule != null && element instanceof PsiElement) -->Line_29 $$ testNames.add(name)[ CD ]
Line_7 $$ final Map<Module, List<String>> perModule = forkPerModule() ? new TreeMap<Module, List<String>>(new Comparator<Module>() -->Line_9 $$ return StringUtil.compare(o1.getName(), o2.getName(), true)[ CD ]
Line_20 $$ if (module != null) -->Line_21 $$ List<String> list = perModule.get(module)[ CD ]
Line_22 $$ if (list == null) -->Line_24 $$ perModule.put(module, list)[ CD ]
Line_18 $$ if (perModule != null && element instanceof PsiElement) -->Line_20 $$ if (module != null) [ CD ]
Line_7 $$ final Map<Module, List<String>> perModule = forkPerModule() ? new TreeMap<Module, List<String>>(new Comparator<Module>() -->Line_33 $$ if (perModule != null) [ FD ]
Line_2 $$ protected <T> void addClassesListToJavaParameters(Collection<? extends T> elements, Function<T, String> nameFunction, String packageName, boolean createTempFile, JavaParameters javaParameters) throws CantRunException -->Line_5 $$ createTempFiles(javaParameters)[ FD ]
Line_7 $$ final Map<Module, List<String>> perModule = forkPerModule() ? new TreeMap<Module, List<String>>(new Comparator<Module>() -->Line_24 $$ perModule.put(module, list)[ FD ]
Line_2 $$ protected <T> void addClassesListToJavaParameters(Collection<? extends T> elements, Function<T, String> nameFunction, String packageName, boolean createTempFile, JavaParameters javaParameters) throws CantRunException -->Line_43 $$ writeClassesPerModule(packageName, javaParameters, perModule)[ FD ]
Line_33 $$ if (perModule != null) -->Line_38 $$ if (JUnitConfiguration.TEST_PACKAGE.equals(data.TEST_OBJECT)) [ CD ]
Line_2 $$ protected <T> void addClassesListToJavaParameters(Collection<? extends T> elements, Function<T, String> nameFunction, String packageName, boolean createTempFile, JavaParameters javaParameters) throws CantRunException -->Line_42 $$ JUnitStarter.printClassesList(testNames, packageName, category, myTempFile)[ FD ]
Line_7 $$ final Map<Module, List<String>> perModule = forkPerModule() ? new TreeMap<Module, List<String>>(new Comparator<Module>() -->Line_21 $$ List<String> list = perModule.get(module)[ FD ]
Line_20 $$ if (module != null) -->Line_26 $$ list.add(name)[ CD ]
Line_7 $$ final Map<Module, List<String>> perModule = forkPerModule() ? new TreeMap<Module, List<String>>(new Comparator<Module>() -->Line_34 $$ for (List<String> perModuleClasses : perModule.values()) [ FD ]
Line_18 $$ if (perModule != null && element instanceof PsiElement) -->Line_19 $$ final Module module = ModuleUtilCore.findModuleForPsiElement((PsiElement) element)[ CD ]
