Line_29 $$ List<String> urlPatterns = new ArrayList()-->Line_32 $$ urlPatterns.add(urlPatternElement.getTextTrim())[ FD ]
Line_2 $$ protected void readLiferayFilterWebXML(ServletContext servletContext, String path) throws Exception -->Line_3 $$ InputStream inputStream = servletContext.getResourceAsStream(path)[ FD ]
Line_9 $$ Map<String, ObjectValuePair<Filter, FilterConfig>> filterObjectValuePairs = new HashMap()-->Line_23 $$ filterObjectValuePairs.put(filterName, new ObjectValuePair(filter, filterConfig))[ FD ]
Line_9 $$ Map<String, ObjectValuePair<Filter, FilterConfig>> filterObjectValuePairs = new HashMap()-->Line_40 $$ ObjectValuePair<Filter, FilterConfig> filterObjectValuePair = filterObjectValuePairs.get(filterName)[ FD ]
Line_4 $$ if (inputStream == null) -->Line_5 $$ return[ CD ]
Line_41 $$ if (filterObjectValuePair == null) -->Line_42 $$ if (_log.isWarnEnabled()) [ CD ]
Line_10 $$ for (Element filterElement : rootElement.elements("filter")) -->Line_14 $$ List<Element> initParamElements = filterElement.elements("init-param")[ FD ]
Line_15 $$ for (Element initParamElement : initParamElements) -->Line_17 $$ String value = initParamElement.elementText("param-value")[ FD ]
Line_8 $$ Element rootElement = document.getRootElement()-->Line_26 $$ List<Element> filterMappingElements = rootElement.elements("filter-mapping")[ FD ]
Line_36 $$ for (Element dispatcherElement : dispatcherElements) -->Line_37 $$ String dispatcher = StringUtil.toUpperCase(dispatcherElement.getTextTrim())[ FD ]
Line_11 $$ String filterName = filterElement.elementText("filter-name")-->Line_21 $$ Filter filter = initFilter(servletContext, filterClassName, filterName, filterConfig)[ FD ]
Line_2 $$ protected void readLiferayFilterWebXML(ServletContext servletContext, String path) throws Exception -->Line_9 $$ Map<String, ObjectValuePair<Filter, FilterConfig>> filterObjectValuePairs = new HashMap()[ CD ]
Line_3 $$ InputStream inputStream = servletContext.getResourceAsStream(path)-->Line_7 $$ Document document = UnsecureSAXReaderUtil.read(inputStream, true)[ FD ]
Line_2 $$ protected void readLiferayFilterWebXML(ServletContext servletContext, String path) throws Exception -->Line_26 $$ List<Element> filterMappingElements = rootElement.elements("filter-mapping")[ CD ]
Line_11 $$ String filterName = filterElement.elementText("filter-name")-->Line_23 $$ filterObjectValuePairs.put(filterName, new ObjectValuePair(filter, filterConfig))[ FD ]
Line_10 $$ for (Element filterElement : rootElement.elements("filter")) -->Line_11 $$ String filterName = filterElement.elementText("filter-name")[ FD ]
Line_12 $$ String filterClassName = filterElement.elementText("filter-class")-->Line_21 $$ Filter filter = initFilter(servletContext, filterClassName, filterName, filterConfig)[ FD ]
Line_22 $$ if (filter != null) -->Line_23 $$ filterObjectValuePairs.put(filterName, new ObjectValuePair(filter, filterConfig))[ CD ]
Line_20 $$ FilterConfig filterConfig = new InvokerFilterConfig(servletContext, filterName, initParameterMap)-->Line_21 $$ Filter filter = initFilter(servletContext, filterClassName, filterName, filterConfig)[ FD ]
Line_16 $$ String name = initParamElement.elementText("param-name")-->Line_18 $$ initParameterMap.put(name, value)[ FD ]
Line_31 $$ for (Element urlPatternElement : urlPatternElements) -->Line_32 $$ urlPatterns.add(urlPatternElement.getTextTrim())[ FD ]
Line_27 $$ for (Element filterMappingElement : filterMappingElements) -->Line_35 $$ List<Element> dispatcherElements = filterMappingElement.elements("dispatcher")[ FD ]
Line_10 $$ for (Element filterElement : rootElement.elements("filter")) -->Line_12 $$ String filterClassName = filterElement.elementText("filter-class")[ FD ]
Line_13 $$ Map<String, String> initParameterMap = new HashMap()-->Line_18 $$ initParameterMap.put(name, value)[ FD ]
Line_2 $$ protected void readLiferayFilterWebXML(ServletContext servletContext, String path) throws Exception -->Line_8 $$ Element rootElement = document.getRootElement()[ CD ]
Line_37 $$ String dispatcher = StringUtil.toUpperCase(dispatcherElement.getTextTrim())-->Line_38 $$ dispatchers.add(dispatcher)[ FD ]
Line_40 $$ ObjectValuePair<Filter, FilterConfig> filterObjectValuePair = filterObjectValuePairs.get(filterName)-->Line_41 $$ if (filterObjectValuePair == null) [ FD ]
Line_3 $$ InputStream inputStream = servletContext.getResourceAsStream(path)-->Line_4 $$ if (inputStream == null) [ FD ]
Line_11 $$ String filterName = filterElement.elementText("filter-name")-->Line_48 $$ registerFilterMapping(filterMapping, filterName, true)[ FD ]
Line_17 $$ String value = initParamElement.elementText("param-value")-->Line_18 $$ initParameterMap.put(name, value)[ FD ]
Line_34 $$ List<String> dispatchers = new ArrayList(4)-->Line_38 $$ dispatchers.add(dispatcher)[ FD ]
Line_11 $$ String filterName = filterElement.elementText("filter-name")-->Line_40 $$ ObjectValuePair<Filter, FilterConfig> filterObjectValuePair = filterObjectValuePairs.get(filterName)[ FD ]
Line_2 $$ protected void readLiferayFilterWebXML(ServletContext servletContext, String path) throws Exception -->Line_7 $$ Document document = UnsecureSAXReaderUtil.read(inputStream, true)[ CD ]
Line_47 $$ FilterMapping filterMapping = new FilterMapping(filterName, filterObjectValuePair.getKey(), filterObjectValuePair.getValue(), urlPatterns, dispatchers)-->Line_48 $$ registerFilterMapping(filterMapping, filterName, true)[ FD ]
Line_2 $$ protected void readLiferayFilterWebXML(ServletContext servletContext, String path) throws Exception -->Line_21 $$ Filter filter = initFilter(servletContext, filterClassName, filterName, filterConfig)[ FD ]
Line_2 $$ protected void readLiferayFilterWebXML(ServletContext servletContext, String path) throws Exception -->Line_3 $$ InputStream inputStream = servletContext.getResourceAsStream(path)[ CD ]
Line_27 $$ for (Element filterMappingElement : filterMappingElements) -->Line_30 $$ List<Element> urlPatternElements = filterMappingElement.elements("url-pattern")[ FD ]
Line_27 $$ for (Element filterMappingElement : filterMappingElements) -->Line_28 $$ String filterName = filterMappingElement.elementText("filter-name")[ FD ]
Line_15 $$ for (Element initParamElement : initParamElements) -->Line_16 $$ String name = initParamElement.elementText("param-name")[ FD ]
Line_8 $$ Element rootElement = document.getRootElement()-->Line_10 $$ for (Element filterElement : rootElement.elements("filter")) [ FD ]
Line_42 $$ if (_log.isWarnEnabled()) -->Line_43 $$ _log.warn("No filter and filter config for filter name " + filterName)[ CD ]
Line_21 $$ Filter filter = initFilter(servletContext, filterClassName, filterName, filterConfig)-->Line_22 $$ if (filter != null) [ FD ]
Line_7 $$ Document document = UnsecureSAXReaderUtil.read(inputStream, true)-->Line_8 $$ Element rootElement = document.getRootElement()[ FD ]
Line_40 $$ ObjectValuePair<Filter, FilterConfig> filterObjectValuePair = filterObjectValuePairs.get(filterName)-->Line_47 $$ FilterMapping filterMapping = new FilterMapping(filterName, filterObjectValuePair.getKey(), filterObjectValuePair.getValue(), urlPatterns, dispatchers)[ FD ]
Line_2 $$ protected void readLiferayFilterWebXML(ServletContext servletContext, String path) throws Exception -->Line_4 $$ if (inputStream == null) [ CD ]
