Line_25 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_28 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ FD ]
Line_2 $$ public void testClassFilter() throws Exception -->Line_8 $$ properties.put("a.property", "G")[ CD ]
Line_2 $$ public void testClassFilter() throws Exception -->Line_7 $$ Map<String, Object> properties = new HashMap()[ CD ]
Line_2 $$ public void testClassFilter() throws Exception -->Line_9 $$ ServiceRegistration<InterfaceOne> serviceRegistrationA = _registry.registerService(InterfaceOne.class, interfaceOneA, properties)[ CD ]
Line_2 $$ public void testClassFilter() throws Exception -->Line_5 $$ Assert.assertEquals(0, serviceTrackerList.size())[ CD ]
Line_9 $$ ServiceRegistration<InterfaceOne> serviceRegistrationA = _registry.registerService(InterfaceOne.class, interfaceOneA, properties)-->Line_23 $$ serviceRegistrationA.unregister()[ FD ]
Line_25 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_26 $$ Assert.assertEquals(0, interfaceOnes.size())[ FD ]
Line_21 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_28 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ FD ]
Line_4 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter)-->Line_30 $$ Assert.assertEquals(0, serviceTrackerList.size())[ FD ]
Line_7 $$ Map<String, Object> properties = new HashMap()-->Line_9 $$ ServiceRegistration<InterfaceOne> serviceRegistrationA = _registry.registerService(InterfaceOne.class, interfaceOneA, properties)[ FD ]
Line_2 $$ public void testClassFilter() throws Exception -->Line_17 $$ Assert.assertEquals(1, serviceTrackerList.size())[ CD ]
Line_2 $$ public void testClassFilter() throws Exception -->Line_3 $$ Filter filter = _registry.getFilter("(a.property=G)")[ CD ]
Line_2 $$ public void testClassFilter() throws Exception -->Line_27 $$ serviceTrackerList.remove(interfaceOneB)[ CD ]
Line_21 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_22 $$ Assert.assertEquals(1, interfaceOnes.size())[ FD ]
Line_4 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter)-->Line_5 $$ Assert.assertEquals(0, serviceTrackerList.size())[ FD ]
Line_7 $$ Map<String, Object> properties = new HashMap()-->Line_8 $$ properties.put("a.property", "G")[ FD ]
Line_21 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_26 $$ Assert.assertEquals(0, interfaceOnes.size())[ FD ]
Line_2 $$ public void testClassFilter() throws Exception -->Line_4 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter)[ CD ]
Line_2 $$ public void testClassFilter() throws Exception -->Line_29 $$ Assert.assertEquals(0, interfaceOnes.size())[ CD ]
Line_18 $$ for (InterfaceOne interfaceOne : serviceTrackerList) -->Line_19 $$ Assert.assertNotNull(interfaceOne)[ FD ]
Line_4 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter)-->Line_17 $$ Assert.assertEquals(1, serviceTrackerList.size())[ FD ]
Line_21 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_29 $$ Assert.assertEquals(0, interfaceOnes.size())[ FD ]
Line_9 $$ ServiceRegistration<InterfaceOne> serviceRegistrationA = _registry.registerService(InterfaceOne.class, interfaceOneA, properties)-->Line_10 $$ Assert.assertNotNull(serviceRegistrationA)[ FD ]
Line_4 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter)-->Line_27 $$ serviceTrackerList.remove(interfaceOneB)[ FD ]
Line_4 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter)-->Line_24 $$ Assert.assertEquals(0, serviceTrackerList.size())[ FD ]
Line_3 $$ Filter filter = _registry.getFilter("(a.property=G)")-->Line_4 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter)[ FD ]
Line_25 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_29 $$ Assert.assertEquals(0, interfaceOnes.size())[ FD ]
Line_2 $$ public void testClassFilter() throws Exception -->Line_10 $$ Assert.assertNotNull(serviceRegistrationA)[ CD ]
Line_2 $$ public void testClassFilter() throws Exception -->Line_11 $$ InterfaceOne interfaceOneB = getInstance()[ CD ]
Line_21 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_25 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ FD ]
Line_6 $$ InterfaceOne interfaceOneA = getInstance()-->Line_9 $$ ServiceRegistration<InterfaceOne> serviceRegistrationA = _registry.registerService(InterfaceOne.class, interfaceOneA, properties)[ FD ]
Line_4 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter)-->Line_13 $$ serviceTrackerList.add(interfaceOneB)[ FD ]
Line_2 $$ public void testClassFilter() throws Exception -->Line_22 $$ Assert.assertEquals(1, interfaceOnes.size())[ CD ]
Line_11 $$ InterfaceOne interfaceOneB = getInstance()-->Line_27 $$ serviceTrackerList.remove(interfaceOneB)[ FD ]
Line_2 $$ public void testClassFilter() throws Exception -->Line_28 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ CD ]
Line_2 $$ public void testClassFilter() throws Exception -->Line_23 $$ serviceRegistrationA.unregister()[ CD ]
Line_2 $$ public void testClassFilter() throws Exception -->Line_25 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ CD ]
Line_2 $$ public void testClassFilter() throws Exception -->Line_24 $$ Assert.assertEquals(0, serviceTrackerList.size())[ CD ]
Line_2 $$ public void testClassFilter() throws Exception -->Line_30 $$ Assert.assertEquals(0, serviceTrackerList.size())[ CD ]
Line_11 $$ InterfaceOne interfaceOneB = getInstance()-->Line_13 $$ serviceTrackerList.add(interfaceOneB)[ FD ]
Line_28 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_29 $$ Assert.assertEquals(0, interfaceOnes.size())[ FD ]
Line_2 $$ public void testClassFilter() throws Exception -->Line_6 $$ InterfaceOne interfaceOneA = getInstance()[ CD ]
Line_2 $$ public void testClassFilter() throws Exception -->Line_26 $$ Assert.assertEquals(0, interfaceOnes.size())[ CD ]
Line_2 $$ public void testClassFilter() throws Exception -->Line_21 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ CD ]
