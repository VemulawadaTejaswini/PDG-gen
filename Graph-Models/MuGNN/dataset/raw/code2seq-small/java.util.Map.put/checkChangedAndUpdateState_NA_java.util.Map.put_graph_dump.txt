Line_4 $$ if (processed.containsKey(file)) -->Line_5 $$ return processed.get(file)[ CD ]
Line_2 $$ public boolean checkChangedAndUpdateState(File file) -->Line_4 $$ if (processed.containsKey(file)) [ FD ]
Line_3 $$ boolean changed = false-->Line_33 $$ processed.put(file, changed)[ FD ]
Line_11 $$ CompilationFileState previousState = previous.getState(file)-->Line_20 $$ if (!sameResolved(previousState, newState)) [ FD ]
Line_12 $$ CompilationFileState newState = new CompilationFileState(snapshotter.snapshot(file).getHash())-->Line_23 $$ current.setState(file, newState)[ FD ]
Line_2 $$ public boolean checkChangedAndUpdateState(File file) -->Line_3 $$ boolean changed = false[ CD ]
Line_12 $$ CompilationFileState newState = new CompilationFileState(snapshotter.snapshot(file).getHash())-->Line_19 $$ newState.setResolvedIncludes(resolveIncludes(file, newState.getSourceIncludes(), candidates))[ FD ]
Line_24 $$ for (ResolvedInclude dep : newState.getResolvedIncludes()) -->Line_29 $$ boolean depChanged = checkChangedAndUpdateState(dep.getFile())[ FD ]
Line_2 $$ public boolean checkChangedAndUpdateState(File file) -->Line_20 $$ if (!sameResolved(previousState, newState)) [ CD ]
Line_29 $$ boolean depChanged = checkChangedAndUpdateState(dep.getFile())-->Line_30 $$ changed = changed || depChanged[ FD ]
Line_2 $$ public boolean checkChangedAndUpdateState(File file) -->Line_5 $$ return processed.get(file)[ FD ]
Line_14 $$ changed = true-->Line_21 $$ changed = true[ FD ]
Line_24 $$ for (ResolvedInclude dep : newState.getResolvedIncludes()) -->Line_26 $$ LOGGER.info(String.format("Cannot determine changed state of included '%s' in source file '%s'. Assuming changed.", dep.getInclude(), file.getName()))[ FD ]
Line_2 $$ public boolean checkChangedAndUpdateState(File file) -->Line_11 $$ CompilationFileState previousState = previous.getState(file)[ FD ]
Line_20 $$ if (!sameResolved(previousState, newState)) -->Line_21 $$ changed = true[ CD ]
Line_25 $$ if (dep.isUnknown()) -->Line_27 $$ changed = true[ CD ]
Line_12 $$ CompilationFileState newState = new CompilationFileState(snapshotter.snapshot(file).getHash())-->Line_15 $$ newState.setSourceIncludes(sourceIncludesParser.parseIncludes(file))[ FD ]
Line_2 $$ public boolean checkChangedAndUpdateState(File file) -->Line_10 $$ processed.put(file, false)[ CD ]
Line_11 $$ CompilationFileState previousState = previous.getState(file)-->Line_13 $$ if (!sameHash(previousState, newState)) [ FD ]
Line_2 $$ public boolean checkChangedAndUpdateState(File file) -->Line_19 $$ newState.setResolvedIncludes(resolveIncludes(file, newState.getSourceIncludes(), candidates))[ FD ]
Line_2 $$ public boolean checkChangedAndUpdateState(File file) -->Line_23 $$ current.setState(file, newState)[ CD ]
Line_14 $$ changed = true-->Line_27 $$ changed = true[ FD ]
Line_21 $$ changed = true-->Line_27 $$ changed = true[ FD ]
Line_2 $$ public boolean checkChangedAndUpdateState(File file) -->Line_10 $$ processed.put(file, false)[ FD ]
Line_2 $$ public boolean checkChangedAndUpdateState(File file) -->Line_12 $$ CompilationFileState newState = new CompilationFileState(snapshotter.snapshot(file).getHash())[ CD ]
Line_2 $$ public boolean checkChangedAndUpdateState(File file) -->Line_33 $$ processed.put(file, changed)[ FD ]
Line_27 $$ changed = true-->Line_33 $$ processed.put(file, changed)[ FD ]
Line_12 $$ CompilationFileState newState = new CompilationFileState(snapshotter.snapshot(file).getHash())-->Line_13 $$ if (!sameHash(previousState, newState)) [ FD ]
Line_14 $$ changed = true-->Line_33 $$ processed.put(file, changed)[ FD ]
Line_25 $$ if (dep.isUnknown()) -->Line_29 $$ boolean depChanged = checkChangedAndUpdateState(dep.getFile())[ CD ]
Line_14 $$ changed = true-->Line_30 $$ changed = changed || depChanged[ FD ]
Line_30 $$ changed = changed || depChanged-->Line_33 $$ processed.put(file, changed)[ FD ]
Line_3 $$ boolean changed = false-->Line_30 $$ changed = changed || depChanged[ FD ]
Line_3 $$ boolean changed = false-->Line_27 $$ changed = true[ FD ]
Line_2 $$ public boolean checkChangedAndUpdateState(File file) -->Line_19 $$ newState.setResolvedIncludes(resolveIncludes(file, newState.getSourceIncludes(), candidates))[ CD ]
Line_27 $$ changed = true-->Line_30 $$ changed = changed || depChanged[ FD ]
Line_2 $$ public boolean checkChangedAndUpdateState(File file) -->Line_33 $$ processed.put(file, changed)[ CD ]
Line_13 $$ if (!sameHash(previousState, newState)) -->Line_14 $$ changed = true[ CD ]
Line_11 $$ CompilationFileState previousState = previous.getState(file)-->Line_17 $$ newState.setSourceIncludes(previousState.getSourceIncludes())[ FD ]
Line_25 $$ if (dep.isUnknown()) -->Line_30 $$ changed = changed || depChanged[ CD ]
Line_13 $$ if (!sameHash(previousState, newState)) -->Line_17 $$ newState.setSourceIncludes(previousState.getSourceIncludes())[ CD ]
Line_2 $$ public boolean checkChangedAndUpdateState(File file) -->Line_7 $$ if (!file.exists()) [ CD ]
Line_7 $$ if (!file.exists()) -->Line_8 $$ return true[ CD ]
Line_13 $$ if (!sameHash(previousState, newState)) -->Line_15 $$ newState.setSourceIncludes(sourceIncludesParser.parseIncludes(file))[ CD ]
Line_24 $$ for (ResolvedInclude dep : newState.getResolvedIncludes()) -->Line_25 $$ if (dep.isUnknown()) [ FD ]
Line_12 $$ CompilationFileState newState = new CompilationFileState(snapshotter.snapshot(file).getHash())-->Line_20 $$ if (!sameResolved(previousState, newState)) [ FD ]
Line_2 $$ public boolean checkChangedAndUpdateState(File file) -->Line_11 $$ CompilationFileState previousState = previous.getState(file)[ CD ]
Line_2 $$ public boolean checkChangedAndUpdateState(File file) -->Line_34 $$ return changed[ CD ]
Line_2 $$ public boolean checkChangedAndUpdateState(File file) -->Line_23 $$ current.setState(file, newState)[ FD ]
Line_12 $$ CompilationFileState newState = new CompilationFileState(snapshotter.snapshot(file).getHash())-->Line_17 $$ newState.setSourceIncludes(previousState.getSourceIncludes())[ FD ]
Line_2 $$ public boolean checkChangedAndUpdateState(File file) -->Line_4 $$ if (processed.containsKey(file)) [ CD ]
Line_3 $$ boolean changed = false-->Line_21 $$ changed = true[ FD ]
Line_2 $$ public boolean checkChangedAndUpdateState(File file) -->Line_13 $$ if (!sameHash(previousState, newState)) [ CD ]
Line_2 $$ public boolean checkChangedAndUpdateState(File file) -->Line_26 $$ LOGGER.info(String.format("Cannot determine changed state of included '%s' in source file '%s'. Assuming changed.", dep.getInclude(), file.getName()))[ FD ]
Line_21 $$ changed = true-->Line_30 $$ changed = changed || depChanged[ FD ]
Line_2 $$ public boolean checkChangedAndUpdateState(File file) -->Line_15 $$ newState.setSourceIncludes(sourceIncludesParser.parseIncludes(file))[ FD ]
Line_3 $$ boolean changed = false-->Line_14 $$ changed = true[ FD ]
Line_2 $$ public boolean checkChangedAndUpdateState(File file) -->Line_7 $$ if (!file.exists()) [ FD ]
Line_21 $$ changed = true-->Line_33 $$ processed.put(file, changed)[ FD ]
Line_2 $$ public boolean checkChangedAndUpdateState(File file) -->Line_12 $$ CompilationFileState newState = new CompilationFileState(snapshotter.snapshot(file).getHash())[ FD ]
Line_12 $$ CompilationFileState newState = new CompilationFileState(snapshotter.snapshot(file).getHash())-->Line_24 $$ for (ResolvedInclude dep : newState.getResolvedIncludes()) [ FD ]
Line_25 $$ if (dep.isUnknown()) -->Line_26 $$ LOGGER.info(String.format("Cannot determine changed state of included '%s' in source file '%s'. Assuming changed.", dep.getInclude(), file.getName()))[ CD ]
