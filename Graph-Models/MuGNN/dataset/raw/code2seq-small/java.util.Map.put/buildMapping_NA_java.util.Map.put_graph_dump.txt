Line_2 $$ private <T> Map<String, T> buildMapping(boolean analyzer, String toBuild, IndexSettings settings, Map<String, Settings> settingsMap, Map<String, AnalysisModule.AnalysisProvider<T>> providerMap, Map<String, AnalysisModule.AnalysisProvider<T>> defaultInstance) throws IOException -->Line_31 $$ AnalysisModule.AnalysisProvider<T> type = providerMap.get(typeName)[ FD ]
Line_18 $$ factory = (T) new CustomAnalyzerProvider(settings, name, currentSettings)-->Line_36 $$ factories.put(name, factory)[ FD ]
Line_2 $$ private <T> Map<String, T> buildMapping(boolean analyzer, String toBuild, IndexSettings settings, Map<String, Settings> settingsMap, Map<String, AnalysisModule.AnalysisProvider<T>> providerMap, Map<String, AnalysisModule.AnalysisProvider<T>> defaultInstance) throws IOException -->Line_51 $$ instance = provider.get(settings, environemnt, name, defaultSettings)[ FD ]
Line_49 $$ final T instance-->Line_71 $$ factories.put(camelCase, instance)[ FD ]
Line_65 $$ if (factories.containsKey(name) == false || (defaultInstance.containsKey(camelCase) == false && factories.containsKey(camelCase) == false)) -->Line_67 $$ if (factories.containsKey(name) == false) [ CD ]
Line_53 $$ instance = defaultProvider.get(settings, environemnt, name, defaultSettings)-->Line_71 $$ factories.put(camelCase, instance)[ FD ]
Line_17 $$ if (typeName.equals("custom")) -->Line_24 $$ factory = type.get(settings, environemnt, name, currentSettings)[ CD ]
Line_6 $$ String name = entry.getKey()-->Line_64 $$ final String camelCase = Strings.toCamelCase(name)[ FD ]
Line_24 $$ factory = type.get(settings, environemnt, name, currentSettings)-->Line_26 $$ factories.put(name, factory)[ FD ]
Line_10 $$ T factory-->Line_13 $$ factory = (T) new CustomAnalyzerProvider(settings, name, currentSettings)[ FD ]
Line_4 $$ Map<String, T> factories = new HashMap()-->Line_58 $$ factories.put(camelCase, instance)[ FD ]
Line_51 $$ instance = provider.get(settings, environemnt, name, defaultSettings)-->Line_68 $$ factories.put(name, instance)[ FD ]
Line_49 $$ final T instance-->Line_55 $$ factories.put(name, instance)[ FD ]
Line_12 $$ if (currentSettings.get("tokenizer") != null) -->Line_13 $$ factory = (T) new CustomAnalyzerProvider(settings, name, currentSettings)[ CD ]
Line_2 $$ private <T> Map<String, T> buildMapping(boolean analyzer, String toBuild, IndexSettings settings, Map<String, Settings> settingsMap, Map<String, AnalysisModule.AnalysisProvider<T>> providerMap, Map<String, AnalysisModule.AnalysisProvider<T>> defaultInstance) throws IOException -->Line_53 $$ instance = defaultProvider.get(settings, environemnt, name, defaultSettings)[ FD ]
Line_6 $$ String name = entry.getKey()-->Line_67 $$ if (factories.containsKey(name) == false) [ FD ]
Line_6 $$ String name = entry.getKey()-->Line_51 $$ instance = provider.get(settings, environemnt, name, defaultSettings)[ FD ]
Line_2 $$ private <T> Map<String, T> buildMapping(boolean analyzer, String toBuild, IndexSettings settings, Map<String, Settings> settingsMap, Map<String, AnalysisModule.AnalysisProvider<T>> providerMap, Map<String, AnalysisModule.AnalysisProvider<T>> defaultInstance) throws IOException -->Line_48 $$ AnalysisModule.AnalysisProvider<T> defaultProvider = defaultInstance.get(name)[ FD ]
Line_2 $$ private <T> Map<String, T> buildMapping(boolean analyzer, String toBuild, IndexSettings settings, Map<String, Settings> settingsMap, Map<String, AnalysisModule.AnalysisProvider<T>> providerMap, Map<String, AnalysisModule.AnalysisProvider<T>> defaultInstance) throws IOException -->Line_66 $$ final T instance = provider.get(settings, environemnt, name, defaultSettings)[ FD ]
Line_48 $$ AnalysisModule.AnalysisProvider<T> defaultProvider = defaultInstance.get(name)-->Line_53 $$ instance = defaultProvider.get(settings, environemnt, name, defaultSettings)[ FD ]
Line_5 $$ for (Map.Entry<String, Settings> entry : settingsMap.entrySet()) -->Line_7 $$ Settings currentSettings = entry.getValue()[ FD ]
Line_3 $$ Settings defaultSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, settings.getIndexVersionCreated()).build()-->Line_53 $$ instance = defaultProvider.get(settings, environemnt, name, defaultSettings)[ FD ]
Line_6 $$ String name = entry.getKey()-->Line_53 $$ instance = defaultProvider.get(settings, environemnt, name, defaultSettings)[ FD ]
Line_2 $$ private <T> Map<String, T> buildMapping(boolean analyzer, String toBuild, IndexSettings settings, Map<String, Settings> settingsMap, Map<String, AnalysisModule.AnalysisProvider<T>> providerMap, Map<String, AnalysisModule.AnalysisProvider<T>> defaultInstance) throws IOException -->Line_70 $$ if ((defaultInstance.containsKey(camelCase) == false && factories.containsKey(camelCase) == false)) [ FD ]
Line_56 $$ String camelCase = Strings.toCamelCase(name)-->Line_57 $$ if (providerMap.containsKey(camelCase) == false && factories.containsKey(camelCase) == false) [ FD ]
Line_8 $$ String typeName = currentSettings.get("type")-->Line_20 $$ AnalysisModule.AnalysisProvider<T> type = providerMap.get(typeName)[ FD ]
Line_4 $$ Map<String, T> factories = new HashMap()-->Line_68 $$ factories.put(name, instance)[ FD ]
Line_4 $$ Map<String, T> factories = new HashMap()-->Line_36 $$ factories.put(name, factory)[ FD ]
Line_8 $$ String typeName = currentSettings.get("type")-->Line_31 $$ AnalysisModule.AnalysisProvider<T> type = providerMap.get(typeName)[ FD ]
Line_2 $$ private <T> Map<String, T> buildMapping(boolean analyzer, String toBuild, IndexSettings settings, Map<String, Settings> settingsMap, Map<String, AnalysisModule.AnalysisProvider<T>> providerMap, Map<String, AnalysisModule.AnalysisProvider<T>> defaultInstance) throws IOException -->Line_61 $$ for (Map.Entry<String, AnalysisModule.AnalysisProvider<T>> entry : defaultInstance.entrySet()) [ FD ]
Line_20 $$ AnalysisModule.AnalysisProvider<T> type = providerMap.get(typeName)-->Line_35 $$ final T factory = type.get(settings, environemnt, name, currentSettings)[ FD ]
Line_6 $$ String name = entry.getKey()-->Line_24 $$ factory = type.get(settings, environemnt, name, currentSettings)[ FD ]
Line_2 $$ private <T> Map<String, T> buildMapping(boolean analyzer, String toBuild, IndexSettings settings, Map<String, Settings> settingsMap, Map<String, AnalysisModule.AnalysisProvider<T>> providerMap, Map<String, AnalysisModule.AnalysisProvider<T>> defaultInstance) throws IOException -->Line_5 $$ for (Map.Entry<String, Settings> entry : settingsMap.entrySet()) [ FD ]
Line_18 $$ factory = (T) new CustomAnalyzerProvider(settings, name, currentSettings)-->Line_24 $$ factory = type.get(settings, environemnt, name, currentSettings)[ FD ]
Line_49 $$ final T instance-->Line_53 $$ instance = defaultProvider.get(settings, environemnt, name, defaultSettings)[ FD ]
Line_57 $$ if (providerMap.containsKey(camelCase) == false && factories.containsKey(camelCase) == false) -->Line_58 $$ factories.put(camelCase, instance)[ CD ]
Line_4 $$ Map<String, T> factories = new HashMap()-->Line_65 $$ if (factories.containsKey(name) == false || (defaultInstance.containsKey(camelCase) == false && factories.containsKey(camelCase) == false)) [ FD ]
Line_2 $$ private <T> Map<String, T> buildMapping(boolean analyzer, String toBuild, IndexSettings settings, Map<String, Settings> settingsMap, Map<String, AnalysisModule.AnalysisProvider<T>> providerMap, Map<String, AnalysisModule.AnalysisProvider<T>> defaultInstance) throws IOException -->Line_4 $$ Map<String, T> factories = new HashMap()[ CD ]
Line_20 $$ AnalysisModule.AnalysisProvider<T> type = providerMap.get(typeName)-->Line_21 $$ if (type == null) [ FD ]
Line_7 $$ Settings currentSettings = entry.getValue()-->Line_35 $$ final T factory = type.get(settings, environemnt, name, currentSettings)[ FD ]
Line_24 $$ factory = type.get(settings, environemnt, name, currentSettings)-->Line_36 $$ factories.put(name, factory)[ FD ]
Line_2 $$ private <T> Map<String, T> buildMapping(boolean analyzer, String toBuild, IndexSettings settings, Map<String, Settings> settingsMap, Map<String, AnalysisModule.AnalysisProvider<T>> providerMap, Map<String, AnalysisModule.AnalysisProvider<T>> defaultInstance) throws IOException -->Line_20 $$ AnalysisModule.AnalysisProvider<T> type = providerMap.get(typeName)[ FD ]
Line_10 $$ T factory-->Line_36 $$ factories.put(name, factory)[ FD ]
Line_17 $$ if (typeName.equals("custom")) -->Line_18 $$ factory = (T) new CustomAnalyzerProvider(settings, name, currentSettings)[ CD ]
Line_9 $$ if (analyzer) -->Line_31 $$ AnalysisModule.AnalysisProvider<T> type = providerMap.get(typeName)[ CD ]
Line_3 $$ Settings defaultSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, settings.getIndexVersionCreated()).build()-->Line_51 $$ instance = provider.get(settings, environemnt, name, defaultSettings)[ FD ]
Line_2 $$ private <T> Map<String, T> buildMapping(boolean analyzer, String toBuild, IndexSettings settings, Map<String, Settings> settingsMap, Map<String, AnalysisModule.AnalysisProvider<T>> providerMap, Map<String, AnalysisModule.AnalysisProvider<T>> defaultInstance) throws IOException -->Line_65 $$ if (factories.containsKey(name) == false || (defaultInstance.containsKey(camelCase) == false && factories.containsKey(camelCase) == false)) [ FD ]
Line_5 $$ for (Map.Entry<String, Settings> entry : settingsMap.entrySet()) -->Line_63 $$ final AnalysisModule.AnalysisProvider<T> provider = entry.getValue()[ FD ]
Line_11 $$ if (typeName == null) -->Line_17 $$ if (typeName.equals("custom")) [ CD ]
Line_9 $$ if (analyzer) -->Line_26 $$ factories.put(name, factory)[ CD ]
Line_4 $$ Map<String, T> factories = new HashMap()-->Line_71 $$ factories.put(camelCase, instance)[ FD ]
Line_7 $$ Settings currentSettings = entry.getValue()-->Line_12 $$ if (currentSettings.get("tokenizer") != null) [ FD ]
Line_51 $$ instance = provider.get(settings, environemnt, name, defaultSettings)-->Line_58 $$ factories.put(camelCase, instance)[ FD ]
Line_17 $$ if (typeName.equals("custom")) -->Line_20 $$ AnalysisModule.AnalysisProvider<T> type = providerMap.get(typeName)[ CD ]
Line_2 $$ private <T> Map<String, T> buildMapping(boolean analyzer, String toBuild, IndexSettings settings, Map<String, Settings> settingsMap, Map<String, AnalysisModule.AnalysisProvider<T>> providerMap, Map<String, AnalysisModule.AnalysisProvider<T>> defaultInstance) throws IOException -->Line_3 $$ Settings defaultSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, settings.getIndexVersionCreated()).build()[ FD ]
Line_6 $$ String name = entry.getKey()-->Line_35 $$ final T factory = type.get(settings, environemnt, name, currentSettings)[ FD ]
Line_6 $$ String name = entry.getKey()-->Line_65 $$ if (factories.containsKey(name) == false || (defaultInstance.containsKey(camelCase) == false && factories.containsKey(camelCase) == false)) [ FD ]
Line_10 $$ T factory-->Line_18 $$ factory = (T) new CustomAnalyzerProvider(settings, name, currentSettings)[ FD ]
Line_5 $$ for (Map.Entry<String, Settings> entry : settingsMap.entrySet()) -->Line_40 $$ String name = entry.getKey()[ FD ]
Line_13 $$ factory = (T) new CustomAnalyzerProvider(settings, name, currentSettings)-->Line_26 $$ factories.put(name, factory)[ FD ]
Line_51 $$ instance = provider.get(settings, environemnt, name, defaultSettings)-->Line_71 $$ factories.put(camelCase, instance)[ FD ]
Line_67 $$ if (factories.containsKey(name) == false) -->Line_68 $$ factories.put(name, instance)[ CD ]
Line_9 $$ if (analyzer) -->Line_32 $$ if (type == null) [ CD ]
Line_2 $$ private <T> Map<String, T> buildMapping(boolean analyzer, String toBuild, IndexSettings settings, Map<String, Settings> settingsMap, Map<String, AnalysisModule.AnalysisProvider<T>> providerMap, Map<String, AnalysisModule.AnalysisProvider<T>> defaultInstance) throws IOException -->Line_35 $$ final T factory = type.get(settings, environemnt, name, currentSettings)[ FD ]
Line_6 $$ String name = entry.getKey()-->Line_36 $$ factories.put(name, factory)[ FD ]
Line_4 $$ Map<String, T> factories = new HashMap()-->Line_26 $$ factories.put(name, factory)[ FD ]
Line_2 $$ private <T> Map<String, T> buildMapping(boolean analyzer, String toBuild, IndexSettings settings, Map<String, Settings> settingsMap, Map<String, AnalysisModule.AnalysisProvider<T>> providerMap, Map<String, AnalysisModule.AnalysisProvider<T>> defaultInstance) throws IOException -->Line_42 $$ if (settingsMap.containsKey(name)) [ FD ]
Line_6 $$ String name = entry.getKey()-->Line_42 $$ if (settingsMap.containsKey(name)) [ FD ]
Line_4 $$ Map<String, T> factories = new HashMap()-->Line_57 $$ if (providerMap.containsKey(camelCase) == false && factories.containsKey(camelCase) == false) [ FD ]
Line_53 $$ instance = defaultProvider.get(settings, environemnt, name, defaultSettings)-->Line_55 $$ factories.put(name, instance)[ FD ]
Line_41 $$ AnalysisModule.AnalysisProvider<T> provider = entry.getValue()-->Line_51 $$ instance = provider.get(settings, environemnt, name, defaultSettings)[ FD ]
Line_13 $$ factory = (T) new CustomAnalyzerProvider(settings, name, currentSettings)-->Line_18 $$ factory = (T) new CustomAnalyzerProvider(settings, name, currentSettings)[ FD ]
Line_56 $$ String camelCase = Strings.toCamelCase(name)-->Line_71 $$ factories.put(camelCase, instance)[ FD ]
Line_70 $$ if ((defaultInstance.containsKey(camelCase) == false && factories.containsKey(camelCase) == false)) -->Line_71 $$ factories.put(camelCase, instance)[ CD ]
Line_9 $$ if (analyzer) -->Line_28 $$ if (typeName == null) [ CD ]
Line_4 $$ Map<String, T> factories = new HashMap()-->Line_67 $$ if (factories.containsKey(name) == false) [ FD ]
Line_41 $$ AnalysisModule.AnalysisProvider<T> provider = entry.getValue()-->Line_45 $$ if (provider.requiresAnalysisSettings()) [ FD ]
Line_51 $$ instance = provider.get(settings, environemnt, name, defaultSettings)-->Line_53 $$ instance = defaultProvider.get(settings, environemnt, name, defaultSettings)[ FD ]
Line_49 $$ final T instance-->Line_51 $$ instance = provider.get(settings, environemnt, name, defaultSettings)[ FD ]
Line_13 $$ factory = (T) new CustomAnalyzerProvider(settings, name, currentSettings)-->Line_24 $$ factory = type.get(settings, environemnt, name, currentSettings)[ FD ]
Line_49 $$ final T instance-->Line_58 $$ factories.put(camelCase, instance)[ FD ]
Line_4 $$ Map<String, T> factories = new HashMap()-->Line_55 $$ factories.put(name, instance)[ FD ]
Line_53 $$ instance = defaultProvider.get(settings, environemnt, name, defaultSettings)-->Line_58 $$ factories.put(camelCase, instance)[ FD ]
Line_48 $$ AnalysisModule.AnalysisProvider<T> defaultProvider = defaultInstance.get(name)-->Line_50 $$ if (defaultProvider == null) [ FD ]
Line_7 $$ Settings currentSettings = entry.getValue()-->Line_8 $$ String typeName = currentSettings.get("type")[ FD ]
Line_4 $$ Map<String, T> factories = new HashMap()-->Line_70 $$ if ((defaultInstance.containsKey(camelCase) == false && factories.containsKey(camelCase) == false)) [ FD ]
Line_13 $$ factory = (T) new CustomAnalyzerProvider(settings, name, currentSettings)-->Line_36 $$ factories.put(name, factory)[ FD ]
Line_20 $$ AnalysisModule.AnalysisProvider<T> type = providerMap.get(typeName)-->Line_32 $$ if (type == null) [ FD ]
Line_18 $$ factory = (T) new CustomAnalyzerProvider(settings, name, currentSettings)-->Line_26 $$ factories.put(name, factory)[ FD ]
Line_11 $$ if (typeName == null) -->Line_12 $$ if (currentSettings.get("tokenizer") != null) [ CD ]
Line_6 $$ String name = entry.getKey()-->Line_55 $$ factories.put(name, instance)[ FD ]
Line_65 $$ if (factories.containsKey(name) == false || (defaultInstance.containsKey(camelCase) == false && factories.containsKey(camelCase) == false)) -->Line_66 $$ final T instance = provider.get(settings, environemnt, name, defaultSettings)[ CD ]
Line_7 $$ Settings currentSettings = entry.getValue()-->Line_24 $$ factory = type.get(settings, environemnt, name, currentSettings)[ FD ]
Line_9 $$ if (analyzer) -->Line_35 $$ final T factory = type.get(settings, environemnt, name, currentSettings)[ CD ]
Line_9 $$ if (analyzer) -->Line_36 $$ factories.put(name, factory)[ CD ]
Line_5 $$ for (Map.Entry<String, Settings> entry : settingsMap.entrySet()) -->Line_62 $$ final String name = entry.getKey()[ FD ]
Line_56 $$ String camelCase = Strings.toCamelCase(name)-->Line_58 $$ factories.put(camelCase, instance)[ FD ]
Line_41 $$ AnalysisModule.AnalysisProvider<T> provider = entry.getValue()-->Line_66 $$ final T instance = provider.get(settings, environemnt, name, defaultSettings)[ FD ]
Line_56 $$ String camelCase = Strings.toCamelCase(name)-->Line_70 $$ if ((defaultInstance.containsKey(camelCase) == false && factories.containsKey(camelCase) == false)) [ FD ]
Line_9 $$ if (analyzer) -->Line_11 $$ if (typeName == null) [ CD ]
Line_6 $$ String name = entry.getKey()-->Line_68 $$ factories.put(name, instance)[ FD ]
Line_50 $$ if (defaultProvider == null) -->Line_51 $$ instance = provider.get(settings, environemnt, name, defaultSettings)[ CD ]
Line_6 $$ String name = entry.getKey()-->Line_48 $$ AnalysisModule.AnalysisProvider<T> defaultProvider = defaultInstance.get(name)[ FD ]
Line_50 $$ if (defaultProvider == null) -->Line_53 $$ instance = defaultProvider.get(settings, environemnt, name, defaultSettings)[ CD ]
Line_2 $$ private <T> Map<String, T> buildMapping(boolean analyzer, String toBuild, IndexSettings settings, Map<String, Settings> settingsMap, Map<String, AnalysisModule.AnalysisProvider<T>> providerMap, Map<String, AnalysisModule.AnalysisProvider<T>> defaultInstance) throws IOException -->Line_57 $$ if (providerMap.containsKey(camelCase) == false && factories.containsKey(camelCase) == false) [ FD ]
Line_9 $$ if (analyzer) -->Line_10 $$ T factory[ CD ]
Line_8 $$ String typeName = currentSettings.get("type")-->Line_17 $$ if (typeName.equals("custom")) [ FD ]
Line_56 $$ String camelCase = Strings.toCamelCase(name)-->Line_65 $$ if (factories.containsKey(name) == false || (defaultInstance.containsKey(camelCase) == false && factories.containsKey(camelCase) == false)) [ FD ]
Line_5 $$ for (Map.Entry<String, Settings> entry : settingsMap.entrySet()) -->Line_6 $$ String name = entry.getKey()[ FD ]
Line_2 $$ private <T> Map<String, T> buildMapping(boolean analyzer, String toBuild, IndexSettings settings, Map<String, Settings> settingsMap, Map<String, AnalysisModule.AnalysisProvider<T>> providerMap, Map<String, AnalysisModule.AnalysisProvider<T>> defaultInstance) throws IOException -->Line_39 $$ for (Map.Entry<String, AnalysisModule.AnalysisProvider<T>> entry : providerMap.entrySet()) [ FD ]
Line_49 $$ final T instance-->Line_68 $$ factories.put(name, instance)[ FD ]
Line_8 $$ String typeName = currentSettings.get("type")-->Line_28 $$ if (typeName == null) [ FD ]
Line_10 $$ T factory-->Line_24 $$ factory = type.get(settings, environemnt, name, currentSettings)[ FD ]
Line_17 $$ if (typeName.equals("custom")) -->Line_21 $$ if (type == null) [ CD ]
Line_65 $$ if (factories.containsKey(name) == false || (defaultInstance.containsKey(camelCase) == false && factories.containsKey(camelCase) == false)) -->Line_70 $$ if ((defaultInstance.containsKey(camelCase) == false && factories.containsKey(camelCase) == false)) [ CD ]
Line_2 $$ private <T> Map<String, T> buildMapping(boolean analyzer, String toBuild, IndexSettings settings, Map<String, Settings> settingsMap, Map<String, AnalysisModule.AnalysisProvider<T>> providerMap, Map<String, AnalysisModule.AnalysisProvider<T>> defaultInstance) throws IOException -->Line_75 $$ return factories[ CD ]
Line_2 $$ private <T> Map<String, T> buildMapping(boolean analyzer, String toBuild, IndexSettings settings, Map<String, Settings> settingsMap, Map<String, AnalysisModule.AnalysisProvider<T>> providerMap, Map<String, AnalysisModule.AnalysisProvider<T>> defaultInstance) throws IOException -->Line_24 $$ factory = type.get(settings, environemnt, name, currentSettings)[ FD ]
Line_53 $$ instance = defaultProvider.get(settings, environemnt, name, defaultSettings)-->Line_68 $$ factories.put(name, instance)[ FD ]
Line_10 $$ T factory-->Line_26 $$ factories.put(name, factory)[ FD ]
Line_3 $$ Settings defaultSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, settings.getIndexVersionCreated()).build()-->Line_66 $$ final T instance = provider.get(settings, environemnt, name, defaultSettings)[ FD ]
Line_2 $$ private <T> Map<String, T> buildMapping(boolean analyzer, String toBuild, IndexSettings settings, Map<String, Settings> settingsMap, Map<String, AnalysisModule.AnalysisProvider<T>> providerMap, Map<String, AnalysisModule.AnalysisProvider<T>> defaultInstance) throws IOException -->Line_3 $$ Settings defaultSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, settings.getIndexVersionCreated()).build()[ CD ]
Line_6 $$ String name = entry.getKey()-->Line_26 $$ factories.put(name, factory)[ FD ]
Line_8 $$ String typeName = currentSettings.get("type")-->Line_11 $$ if (typeName == null) [ FD ]
Line_51 $$ instance = provider.get(settings, environemnt, name, defaultSettings)-->Line_55 $$ factories.put(name, instance)[ FD ]
Line_20 $$ AnalysisModule.AnalysisProvider<T> type = providerMap.get(typeName)-->Line_24 $$ factory = type.get(settings, environemnt, name, currentSettings)[ FD ]
Line_6 $$ String name = entry.getKey()-->Line_66 $$ final T instance = provider.get(settings, environemnt, name, defaultSettings)[ FD ]
Line_6 $$ String name = entry.getKey()-->Line_56 $$ String camelCase = Strings.toCamelCase(name)[ FD ]
Line_5 $$ for (Map.Entry<String, Settings> entry : settingsMap.entrySet()) -->Line_41 $$ AnalysisModule.AnalysisProvider<T> provider = entry.getValue()[ FD ]
