Line_6 $$ final Map<O, O> entries = new HashMap()-->Line_16 $$ O merger = entries.get(option)[ FD ]
Line_15 $$ for (O option : entry) -->Line_16 $$ O merger = entries.get(option)[ FD ]
Line_15 $$ for (O option : entry) -->Line_18 $$ entries.put(option, option)[ FD ]
Line_17 $$ if (merger == null) -->Line_20 $$ merger.mergeInto(option)[ CD ]
Line_2 $$ protected <T extends Entry<O>> Entry<O> reduce(List<T> toReduce) -->Line_3 $$ if (toReduce.size() == 1) [ CD ]
Line_15 $$ for (O option : entry) -->Line_20 $$ merger.mergeInto(option)[ FD ]
Line_2 $$ protected <T extends Entry<O>> Entry<O> reduce(List<T> toReduce) -->Line_4 $$ return toReduce.get(0)[ FD ]
Line_7 $$ Entry<O> leader = toReduce.get(0)-->Line_14 $$ leader.merge(entry)[ FD ]
Line_8 $$ for (Entry<O> entry : toReduce) -->Line_14 $$ leader.merge(entry)[ FD ]
Line_6 $$ final Map<O, O> entries = new HashMap()-->Line_18 $$ entries.put(option, option)[ FD ]
Line_3 $$ if (toReduce.size() == 1) -->Line_4 $$ return toReduce.get(0)[ CD ]
Line_16 $$ O merger = entries.get(option)-->Line_17 $$ if (merger == null) [ FD ]
Line_2 $$ protected <T extends Entry<O>> Entry<O> reduce(List<T> toReduce) -->Line_6 $$ final Map<O, O> entries = new HashMap()[ CD ]
Line_2 $$ protected <T extends Entry<O>> Entry<O> reduce(List<T> toReduce) -->Line_7 $$ Entry<O> leader = toReduce.get(0)[ FD ]
Line_2 $$ protected <T extends Entry<O>> Entry<O> reduce(List<T> toReduce) -->Line_7 $$ Entry<O> leader = toReduce.get(0)[ CD ]
Line_6 $$ final Map<O, O> entries = new HashMap()-->Line_25 $$ for (O option : entries.keySet()) [ FD ]
Line_7 $$ Entry<O> leader = toReduce.get(0)-->Line_26 $$ leader.addOption(option)[ FD ]
Line_2 $$ protected <T extends Entry<O>> Entry<O> reduce(List<T> toReduce) -->Line_28 $$ return leader[ CD ]
Line_16 $$ O merger = entries.get(option)-->Line_20 $$ merger.mergeInto(option)[ FD ]
Line_2 $$ protected <T extends Entry<O>> Entry<O> reduce(List<T> toReduce) -->Line_3 $$ if (toReduce.size() == 1) [ FD ]
Line_17 $$ if (merger == null) -->Line_18 $$ entries.put(option, option)[ CD ]
Line_2 $$ protected <T extends Entry<O>> Entry<O> reduce(List<T> toReduce) -->Line_24 $$ leader.options.clear()[ CD ]
Line_15 $$ for (O option : entry) -->Line_26 $$ leader.addOption(option)[ FD ]
