Line_18 $$ GraphGenerator.SemiGraph<Orderable> graph = new GraphGenerator.SemiGraph<Orderable>() -->Line_33 $$ String id = n.getOrderId()[ CD ]
Line_7 $$ for (Orderable o : orderable) -->Line_46 $$ predecessors.add(o)[ FD ]
Line_6 $$ final Set<Orderable> hasBefore = new LinkedHashSet<Orderable>(orderable.size())-->Line_16 $$ hasBefore.add(o)[ FD ]
Line_26 $$ Set<Orderable> predecessors = new LinkedHashSet<Orderable>()-->Line_38 $$ predecessors.add(o)[ FD ]
Line_7 $$ for (Orderable o : orderable) -->Line_8 $$ String id = o.getOrderId()[ FD ]
Line_9 $$ if (StringUtil.isNotEmpty(id))-->Line_10 $$ map.put(id, o)[ CD ]
Line_8 $$ String id = o.getOrderId()-->Line_10 $$ map.put(id, o)[ FD ]
Line_2 $$ public static void sort(@NotNull final List<? extends Orderable> orderable) -->Line_61 $$ Collections.sort(orderable, builder.comparator())[ FD ]
Line_18 $$ GraphGenerator.SemiGraph<Orderable> graph = new GraphGenerator.SemiGraph<Orderable>() -->Line_50 $$ if (!order.myFirst) [ CD ]
Line_4 $$ final Map<Orderable, LoadingOrder> cachedMap = ContainerUtil.newLinkedHashMap()-->Line_36 $$ LoadingOrder hisOrder = cachedMap.get(o)[ FD ]
Line_28 $$ Orderable o = map.get(id)-->Line_29 $$ if (o != null) [ FD ]
Line_8 $$ String id = o.getOrderId()-->Line_9 $$ if (StringUtil.isNotEmpty(id))[ FD ]
Line_13 $$ if (order.myFirst)-->Line_14 $$ first.add(o)[ CD ]
Line_7 $$ for (Orderable o : orderable) -->Line_11 $$ LoadingOrder order = o.getOrder()[ FD ]
Line_8 $$ String id = o.getOrderId()-->Line_28 $$ Orderable o = map.get(id)[ FD ]
Line_11 $$ LoadingOrder order = o.getOrder()-->Line_12 $$ cachedMap.put(o, order)[ FD ]
Line_7 $$ for (Orderable o : orderable) -->Line_38 $$ predecessors.add(o)[ FD ]
Line_2 $$ public static void sort(@NotNull final List<? extends Orderable> orderable) -->Line_3 $$ final Map<String, Orderable> map = ContainerUtil.newLinkedHashMap()[ CD ]
Line_18 $$ GraphGenerator.SemiGraph<Orderable> graph = new GraphGenerator.SemiGraph<Orderable>() -->Line_20 $$ List<Orderable> list = ContainerUtil.newArrayList(orderable)[ CD ]
Line_18 $$ GraphGenerator.SemiGraph<Orderable> graph = new GraphGenerator.SemiGraph<Orderable>() -->Line_25 $$ LoadingOrder order = cachedMap.get(n)[ CD ]
Line_15 $$ if (order.myBefore.size() != 0)-->Line_16 $$ hasBefore.add(o)[ CD ]
Line_26 $$ Set<Orderable> predecessors = new LinkedHashSet<Orderable>()-->Line_51 $$ predecessors.addAll(first)[ FD ]
Line_11 $$ LoadingOrder order = o.getOrder()-->Line_13 $$ if (order.myFirst)[ FD ]
Line_7 $$ for (Orderable o : orderable) -->Line_16 $$ hasBefore.add(o)[ FD ]
Line_2 $$ public static void sort(@NotNull final List<? extends Orderable> orderable) -->Line_4 $$ final Map<Orderable, LoadingOrder> cachedMap = ContainerUtil.newLinkedHashMap()[ CD ]
Line_18 $$ GraphGenerator.SemiGraph<Orderable> graph = new GraphGenerator.SemiGraph<Orderable>() -->Line_22 $$ return list[ CD ]
Line_7 $$ for (Orderable o : orderable) -->Line_29 $$ if (o != null) [ FD ]
Line_2 $$ public static void sort(@NotNull final List<? extends Orderable> orderable) -->Line_6 $$ final Set<Orderable> hasBefore = new LinkedHashSet<Orderable>(orderable.size())[ FD ]
Line_2 $$ public static void sort(@NotNull final List<? extends Orderable> orderable) -->Line_18 $$ GraphGenerator.SemiGraph<Orderable> graph = new GraphGenerator.SemiGraph<Orderable>() [ CD ]
Line_20 $$ List<Orderable> list = ContainerUtil.newArrayList(orderable)-->Line_21 $$ Collections.reverse(list)[ FD ]
Line_18 $$ GraphGenerator.SemiGraph<Orderable> graph = new GraphGenerator.SemiGraph<Orderable>() -->Line_21 $$ Collections.reverse(list)[ CD ]
Line_4 $$ final Map<Orderable, LoadingOrder> cachedMap = ContainerUtil.newLinkedHashMap()-->Line_25 $$ LoadingOrder order = cachedMap.get(n)[ FD ]
Line_26 $$ Set<Orderable> predecessors = new LinkedHashSet<Orderable>()-->Line_46 $$ predecessors.add(o)[ FD ]
Line_8 $$ String id = o.getOrderId()-->Line_34 $$ if (StringUtil.isNotEmpty(id)) [ FD ]
Line_57 $$ if (!builder.isAcyclic()) -->Line_58 $$ Couple<Orderable> p = builder.getCircularDependency()[ CD ]
Line_3 $$ final Map<String, Orderable> map = ContainerUtil.newLinkedHashMap()-->Line_28 $$ Orderable o = map.get(id)[ FD ]
Line_7 $$ for (Orderable o : orderable) -->Line_14 $$ first.add(o)[ FD ]
Line_7 $$ for (Orderable o : orderable) -->Line_12 $$ cachedMap.put(o, order)[ FD ]
Line_18 $$ GraphGenerator.SemiGraph<Orderable> graph = new GraphGenerator.SemiGraph<Orderable>() -->Line_25 $$ LoadingOrder order = cachedMap.get(n)[ FD ]
Line_4 $$ final Map<Orderable, LoadingOrder> cachedMap = ContainerUtil.newLinkedHashMap()-->Line_12 $$ cachedMap.put(o, order)[ FD ]
Line_7 $$ for (Orderable o : orderable) -->Line_30 $$ predecessors.add(o)[ FD ]
Line_18 $$ GraphGenerator.SemiGraph<Orderable> graph = new GraphGenerator.SemiGraph<Orderable>() -->Line_34 $$ if (StringUtil.isNotEmpty(id)) [ CD ]
Line_27 $$ for (String id : order.myAfter) -->Line_34 $$ if (StringUtil.isNotEmpty(id)) [ FD ]
Line_37 $$ if (hisOrder.myBefore.contains(id)) -->Line_38 $$ predecessors.add(o)[ CD ]
Line_18 $$ GraphGenerator.SemiGraph<Orderable> graph = new GraphGenerator.SemiGraph<Orderable>() -->Line_33 $$ String id = n.getOrderId()[ FD ]
Line_5 $$ final Set<Orderable> first = new LinkedHashSet<Orderable>(1)-->Line_14 $$ first.add(o)[ FD ]
Line_5 $$ final Set<Orderable> first = new LinkedHashSet<Orderable>(1)-->Line_51 $$ predecessors.addAll(first)[ FD ]
Line_28 $$ Orderable o = map.get(id)-->Line_46 $$ predecessors.add(o)[ FD ]
Line_25 $$ LoadingOrder order = cachedMap.get(n)-->Line_42 $$ if (order.myLast) [ FD ]
Line_28 $$ Orderable o = map.get(id)-->Line_30 $$ predecessors.add(o)[ FD ]
Line_27 $$ for (String id : order.myAfter) -->Line_37 $$ if (hisOrder.myBefore.contains(id)) [ FD ]
Line_29 $$ if (o != null) -->Line_30 $$ predecessors.add(o)[ CD ]
Line_28 $$ Orderable o = map.get(id)-->Line_38 $$ predecessors.add(o)[ FD ]
Line_50 $$ if (!order.myFirst) -->Line_51 $$ predecessors.addAll(first)[ CD ]
Line_18 $$ GraphGenerator.SemiGraph<Orderable> graph = new GraphGenerator.SemiGraph<Orderable>() -->Line_53 $$ return predecessors.iterator()[ CD ]
Line_18 $$ GraphGenerator.SemiGraph<Orderable> graph = new GraphGenerator.SemiGraph<Orderable>() -->Line_42 $$ if (order.myLast) [ CD ]
Line_2 $$ public static void sort(@NotNull final List<? extends Orderable> orderable) -->Line_20 $$ List<Orderable> list = ContainerUtil.newArrayList(orderable)[ FD ]
Line_11 $$ LoadingOrder order = o.getOrder()-->Line_42 $$ if (order.myLast) [ FD ]
Line_2 $$ public static void sort(@NotNull final List<? extends Orderable> orderable) -->Line_57 $$ if (!builder.isAcyclic()) [ CD ]
Line_28 $$ Orderable o = map.get(id)-->Line_36 $$ LoadingOrder hisOrder = cachedMap.get(o)[ FD ]
Line_27 $$ for (String id : order.myAfter) -->Line_28 $$ Orderable o = map.get(id)[ FD ]
Line_18 $$ GraphGenerator.SemiGraph<Orderable> graph = new GraphGenerator.SemiGraph<Orderable>() -->Line_26 $$ Set<Orderable> predecessors = new LinkedHashSet<Orderable>()[ CD ]
Line_28 $$ Orderable o = map.get(id)-->Line_44 $$ LoadingOrder hisOrder = cachedMap.get(o)[ FD ]
Line_2 $$ public static void sort(@NotNull final List<? extends Orderable> orderable) -->Line_5 $$ final Set<Orderable> first = new LinkedHashSet<Orderable>(1)[ CD ]
Line_2 $$ public static void sort(@NotNull final List<? extends Orderable> orderable) -->Line_6 $$ final Set<Orderable> hasBefore = new LinkedHashSet<Orderable>(orderable.size())[ CD ]
Line_26 $$ Set<Orderable> predecessors = new LinkedHashSet<Orderable>()-->Line_30 $$ predecessors.add(o)[ FD ]
Line_8 $$ String id = o.getOrderId()-->Line_37 $$ if (hisOrder.myBefore.contains(id)) [ FD ]
Line_26 $$ Set<Orderable> predecessors = new LinkedHashSet<Orderable>()-->Line_53 $$ return predecessors.iterator()[ FD ]
Line_7 $$ for (Orderable o : orderable) -->Line_36 $$ LoadingOrder hisOrder = cachedMap.get(o)[ FD ]
Line_3 $$ final Map<String, Orderable> map = ContainerUtil.newLinkedHashMap()-->Line_10 $$ map.put(id, o)[ FD ]
Line_2 $$ public static void sort(@NotNull final List<? extends Orderable> orderable) -->Line_61 $$ Collections.sort(orderable, builder.comparator())[ CD ]
Line_4 $$ final Map<Orderable, LoadingOrder> cachedMap = ContainerUtil.newLinkedHashMap()-->Line_44 $$ LoadingOrder hisOrder = cachedMap.get(o)[ FD ]
Line_7 $$ for (Orderable o : orderable) -->Line_10 $$ map.put(id, o)[ FD ]
Line_45 $$ if (!hisOrder.myLast) -->Line_46 $$ predecessors.add(o)[ CD ]
Line_7 $$ for (Orderable o : orderable) -->Line_44 $$ LoadingOrder hisOrder = cachedMap.get(o)[ FD ]
