Line_5 $$ Map<Integer, Future<ScanInfoPerBlockPool>> compilersInProgress = new HashMap<Integer, Future<ScanInfoPerBlockPool>>()-->Line_10 $$ compilersInProgress.put(i, result)[ FD ]
Line_6 $$ for (int i = 0; i < volumes.size(); i++) -->Line_7 $$ if (isValid(dataset, volumes.get(i))) [ CD ]
Line_21 $$ ScanInfoPerBlockPool list = new ScanInfoPerBlockPool()-->Line_27 $$ return list.toSortedArrays()[ FD ]
Line_3 $$ final List<? extends FsVolumeSpi> volumes = dataset.getVolumes()-->Line_6 $$ for (int i = 0; i < volumes.size(); i++) [ FD ]
Line_7 $$ if (isValid(dataset, volumes.get(i))) -->Line_9 $$ Future<ScanInfoPerBlockPool> result = reportCompileThreadPool.submit(reportCompiler)[ CD ]
Line_5 $$ Map<Integer, Future<ScanInfoPerBlockPool>> compilersInProgress = new HashMap<Integer, Future<ScanInfoPerBlockPool>>()-->Line_13 $$ for (Entry<Integer, Future<ScanInfoPerBlockPool>> report : compilersInProgress.entrySet()) [ FD ]
Line_6 $$ for (int i = 0; i < volumes.size(); i++) -->Line_22 $$ for (int i = 0; i < volumes.size(); i++) [ FD ]
Line_3 $$ final List<? extends FsVolumeSpi> volumes = dataset.getVolumes()-->Line_4 $$ ScanInfoPerBlockPool[] dirReports = new ScanInfoPerBlockPool[volumes.size()][ FD ]
Line_7 $$ if (isValid(dataset, volumes.get(i))) -->Line_10 $$ compilersInProgress.put(i, result)[ CD ]
Line_6 $$ for (int i = 0; i < volumes.size(); i++) -->Line_8 $$ ReportCompiler reportCompiler = new ReportCompiler(volumes.get(i))[ FD ]
Line_2 $$ private Map<String, ScanInfo[]> getDiskReport() -->Line_6 $$ for (int i = 0; i < volumes.size(); i++) [ CD ]
Line_7 $$ if (isValid(dataset, volumes.get(i))) -->Line_8 $$ ReportCompiler reportCompiler = new ReportCompiler(volumes.get(i))[ CD ]
Line_2 $$ private Map<String, ScanInfo[]> getDiskReport() -->Line_27 $$ return list.toSortedArrays()[ CD ]
Line_3 $$ final List<? extends FsVolumeSpi> volumes = dataset.getVolumes()-->Line_23 $$ if (isValid(dataset, volumes.get(i))) [ FD ]
Line_22 $$ for (int i = 0; i < volumes.size(); i++) -->Line_23 $$ if (isValid(dataset, volumes.get(i))) [ FD ]
Line_2 $$ private Map<String, ScanInfo[]> getDiskReport() -->Line_3 $$ final List<? extends FsVolumeSpi> volumes = dataset.getVolumes()[ CD ]
Line_3 $$ final List<? extends FsVolumeSpi> volumes = dataset.getVolumes()-->Line_7 $$ if (isValid(dataset, volumes.get(i))) [ FD ]
Line_23 $$ if (isValid(dataset, volumes.get(i))) -->Line_24 $$ list.addAll(dirReports[i])[ CD ]
Line_6 $$ for (int i = 0; i < volumes.size(); i++) -->Line_10 $$ compilersInProgress.put(i, result)[ FD ]
Line_13 $$ for (Entry<Integer, Future<ScanInfoPerBlockPool>> report : compilersInProgress.entrySet()) -->Line_15 $$ dirReports[report.getKey()] = report.getValue().get()[ FD ]
Line_3 $$ final List<? extends FsVolumeSpi> volumes = dataset.getVolumes()-->Line_22 $$ for (int i = 0; i < volumes.size(); i++) [ FD ]
Line_6 $$ for (int i = 0; i < volumes.size(); i++) -->Line_7 $$ if (isValid(dataset, volumes.get(i))) [ FD ]
Line_8 $$ ReportCompiler reportCompiler = new ReportCompiler(volumes.get(i))-->Line_9 $$ Future<ScanInfoPerBlockPool> result = reportCompileThreadPool.submit(reportCompiler)[ FD ]
Line_2 $$ private Map<String, ScanInfo[]> getDiskReport() -->Line_5 $$ Map<Integer, Future<ScanInfoPerBlockPool>> compilersInProgress = new HashMap<Integer, Future<ScanInfoPerBlockPool>>()[ CD ]
Line_22 $$ for (int i = 0; i < volumes.size(); i++) -->Line_23 $$ if (isValid(dataset, volumes.get(i))) [ CD ]
Line_3 $$ final List<? extends FsVolumeSpi> volumes = dataset.getVolumes()-->Line_8 $$ ReportCompiler reportCompiler = new ReportCompiler(volumes.get(i))[ FD ]
Line_2 $$ private Map<String, ScanInfo[]> getDiskReport() -->Line_21 $$ ScanInfoPerBlockPool list = new ScanInfoPerBlockPool()[ CD ]
Line_21 $$ ScanInfoPerBlockPool list = new ScanInfoPerBlockPool()-->Line_24 $$ list.addAll(dirReports[i])[ FD ]
Line_6 $$ for (int i = 0; i < volumes.size(); i++) -->Line_23 $$ if (isValid(dataset, volumes.get(i))) [ FD ]
Line_9 $$ Future<ScanInfoPerBlockPool> result = reportCompileThreadPool.submit(reportCompiler)-->Line_10 $$ compilersInProgress.put(i, result)[ FD ]
Line_2 $$ private Map<String, ScanInfo[]> getDiskReport() -->Line_4 $$ ScanInfoPerBlockPool[] dirReports = new ScanInfoPerBlockPool[volumes.size()][ CD ]
Line_2 $$ private Map<String, ScanInfo[]> getDiskReport() -->Line_22 $$ for (int i = 0; i < volumes.size(); i++) [ CD ]
