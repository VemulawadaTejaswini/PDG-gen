Line_21 $$ if (logger.isDebugEnabled()) -->Line_22 $$ logger.debug(resource + " could not be resolved in the file system - assuming that it hasn't changed", ex)[ CD ]
Line_34 $$ propHolder = new PropertiesHolder()-->Line_42 $$ propHolder.setRefreshTimestamp(refreshTimestamp)[ FD ]
Line_29 $$ propHolder = new PropertiesHolder(props, fileTimestamp)-->Line_40 $$ propHolder = new PropertiesHolder()[ FD ]
Line_40 $$ propHolder = new PropertiesHolder()-->Line_43 $$ this.cachedProperties.put(filename, propHolder)[ FD ]
Line_8 $$ if (resource.exists()) -->Line_40 $$ propHolder = new PropertiesHolder()[ CD ]
Line_6 $$ resource = this.resourceLoader.getResource(filename + XML_SUFFIX)-->Line_28 $$ Properties props = loadProperties(resource, filename)[ FD ]
Line_37 $$ if (logger.isDebugEnabled()) -->Line_38 $$ logger.debug("No properties file found for [" + filename + "] - neither plain properties nor XML")[ CD ]
Line_2 $$ protected PropertiesHolder refreshProperties(String filename, PropertiesHolder propHolder) -->Line_3 $$ long refreshTimestamp = (this.cacheMillis < 0 ? -1 : System.currentTimeMillis())[ CD ]
Line_8 $$ if (resource.exists()) -->Line_9 $$ long fileTimestamp = -1[ CD ]
Line_13 $$ if (propHolder != null && propHolder.getFileTimestamp() == fileTimestamp) -->Line_17 $$ propHolder.setRefreshTimestamp(refreshTimestamp)[ CD ]
Line_2 $$ protected PropertiesHolder refreshProperties(String filename, PropertiesHolder propHolder) -->Line_5 $$ if (!resource.exists()) [ CD ]
Line_4 $$ Resource resource = this.resourceLoader.getResource(filename + PROPERTIES_SUFFIX)-->Line_8 $$ if (resource.exists()) [ FD ]
Line_2 $$ protected PropertiesHolder refreshProperties(String filename, PropertiesHolder propHolder) -->Line_40 $$ propHolder = new PropertiesHolder()[ FD ]
Line_29 $$ propHolder = new PropertiesHolder(props, fileTimestamp)-->Line_34 $$ propHolder = new PropertiesHolder()[ FD ]
Line_2 $$ protected PropertiesHolder refreshProperties(String filename, PropertiesHolder propHolder) -->Line_43 $$ this.cachedProperties.put(filename, propHolder)[ CD ]
Line_6 $$ resource = this.resourceLoader.getResource(filename + XML_SUFFIX)-->Line_8 $$ if (resource.exists()) [ FD ]
Line_4 $$ Resource resource = this.resourceLoader.getResource(filename + PROPERTIES_SUFFIX)-->Line_32 $$ logger.warn("Could not parse properties file [" + resource.getFilename() + "]", ex)[ FD ]
Line_6 $$ resource = this.resourceLoader.getResource(filename + XML_SUFFIX)-->Line_32 $$ logger.warn("Could not parse properties file [" + resource.getFilename() + "]", ex)[ FD ]
Line_9 $$ long fileTimestamp = -1-->Line_24 $$ fileTimestamp = -1[ FD ]
Line_12 $$ fileTimestamp = resource.lastModified()-->Line_24 $$ fileTimestamp = -1[ FD ]
Line_2 $$ protected PropertiesHolder refreshProperties(String filename, PropertiesHolder propHolder) -->Line_29 $$ propHolder = new PropertiesHolder(props, fileTimestamp)[ FD ]
Line_40 $$ propHolder = new PropertiesHolder()-->Line_42 $$ propHolder.setRefreshTimestamp(refreshTimestamp)[ FD ]
Line_2 $$ protected PropertiesHolder refreshProperties(String filename, PropertiesHolder propHolder) -->Line_17 $$ propHolder.setRefreshTimestamp(refreshTimestamp)[ FD ]
Line_9 $$ long fileTimestamp = -1-->Line_12 $$ fileTimestamp = resource.lastModified()[ FD ]
Line_29 $$ propHolder = new PropertiesHolder(props, fileTimestamp)-->Line_42 $$ propHolder.setRefreshTimestamp(refreshTimestamp)[ FD ]
Line_4 $$ Resource resource = this.resourceLoader.getResource(filename + PROPERTIES_SUFFIX)-->Line_12 $$ fileTimestamp = resource.lastModified()[ FD ]
Line_2 $$ protected PropertiesHolder refreshProperties(String filename, PropertiesHolder propHolder) -->Line_28 $$ Properties props = loadProperties(resource, filename)[ FD ]
Line_31 $$ if (logger.isWarnEnabled()) -->Line_32 $$ logger.warn("Could not parse properties file [" + resource.getFilename() + "]", ex)[ CD ]
Line_3 $$ long refreshTimestamp = (this.cacheMillis < 0 ? -1 : System.currentTimeMillis())-->Line_42 $$ propHolder.setRefreshTimestamp(refreshTimestamp)[ FD ]
Line_8 $$ if (resource.exists()) -->Line_10 $$ if (this.cacheMillis >= 0) [ CD ]
Line_29 $$ propHolder = new PropertiesHolder(props, fileTimestamp)-->Line_43 $$ this.cachedProperties.put(filename, propHolder)[ FD ]
Line_2 $$ protected PropertiesHolder refreshProperties(String filename, PropertiesHolder propHolder) -->Line_43 $$ this.cachedProperties.put(filename, propHolder)[ FD ]
Line_6 $$ resource = this.resourceLoader.getResource(filename + XML_SUFFIX)-->Line_12 $$ fileTimestamp = resource.lastModified()[ FD ]
Line_13 $$ if (propHolder != null && propHolder.getFileTimestamp() == fileTimestamp) -->Line_14 $$ if (logger.isDebugEnabled()) [ CD ]
Line_8 $$ if (resource.exists()) -->Line_37 $$ if (logger.isDebugEnabled()) [ CD ]
Line_5 $$ if (!resource.exists()) -->Line_6 $$ resource = this.resourceLoader.getResource(filename + XML_SUFFIX)[ CD ]
Line_13 $$ if (propHolder != null && propHolder.getFileTimestamp() == fileTimestamp) -->Line_18 $$ return propHolder[ CD ]
Line_14 $$ if (logger.isDebugEnabled()) -->Line_15 $$ logger.debug("Re-caching properties for filename [" + filename + "] - file hasn't been modified")[ CD ]
Line_2 $$ protected PropertiesHolder refreshProperties(String filename, PropertiesHolder propHolder) -->Line_42 $$ propHolder.setRefreshTimestamp(refreshTimestamp)[ FD ]
Line_2 $$ protected PropertiesHolder refreshProperties(String filename, PropertiesHolder propHolder) -->Line_8 $$ if (resource.exists()) [ CD ]
Line_2 $$ protected PropertiesHolder refreshProperties(String filename, PropertiesHolder propHolder) -->Line_44 $$ return propHolder[ CD ]
Line_2 $$ protected PropertiesHolder refreshProperties(String filename, PropertiesHolder propHolder) -->Line_13 $$ if (propHolder != null && propHolder.getFileTimestamp() == fileTimestamp) [ FD ]
Line_3 $$ long refreshTimestamp = (this.cacheMillis < 0 ? -1 : System.currentTimeMillis())-->Line_17 $$ propHolder.setRefreshTimestamp(refreshTimestamp)[ FD ]
Line_4 $$ Resource resource = this.resourceLoader.getResource(filename + PROPERTIES_SUFFIX)-->Line_6 $$ resource = this.resourceLoader.getResource(filename + XML_SUFFIX)[ FD ]
Line_34 $$ propHolder = new PropertiesHolder()-->Line_43 $$ this.cachedProperties.put(filename, propHolder)[ FD ]
Line_34 $$ propHolder = new PropertiesHolder()-->Line_40 $$ propHolder = new PropertiesHolder()[ FD ]
Line_2 $$ protected PropertiesHolder refreshProperties(String filename, PropertiesHolder propHolder) -->Line_42 $$ propHolder.setRefreshTimestamp(refreshTimestamp)[ CD ]
Line_4 $$ Resource resource = this.resourceLoader.getResource(filename + PROPERTIES_SUFFIX)-->Line_28 $$ Properties props = loadProperties(resource, filename)[ FD ]
Line_2 $$ protected PropertiesHolder refreshProperties(String filename, PropertiesHolder propHolder) -->Line_34 $$ propHolder = new PropertiesHolder()[ FD ]
Line_2 $$ protected PropertiesHolder refreshProperties(String filename, PropertiesHolder propHolder) -->Line_4 $$ Resource resource = this.resourceLoader.getResource(filename + PROPERTIES_SUFFIX)[ CD ]
Line_4 $$ Resource resource = this.resourceLoader.getResource(filename + PROPERTIES_SUFFIX)-->Line_5 $$ if (!resource.exists()) [ FD ]
