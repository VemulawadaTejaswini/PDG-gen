Line_2 $$ synchronized CountingReentrantLock<K> getLock(K key) -->Line_3 $$ CountingReentrantLock<K> lock = locks.get(key)[ CD ]
Line_2 $$ synchronized CountingReentrantLock<K> getLock(K key) -->Line_3 $$ CountingReentrantLock<K> lock = locks.get(key)[ FD ]
Line_5 $$ lock = new CountingReentrantLock<K>(key)-->Line_6 $$ locks.put(key, lock)[ FD ]
Line_3 $$ CountingReentrantLock<K> lock = locks.get(key)-->Line_6 $$ locks.put(key, lock)[ FD ]
Line_2 $$ synchronized CountingReentrantLock<K> getLock(K key) -->Line_9 $$ return lock[ CD ]
Line_2 $$ synchronized CountingReentrantLock<K> getLock(K key) -->Line_4 $$ if (lock == null) [ CD ]
Line_4 $$ if (lock == null) -->Line_6 $$ locks.put(key, lock)[ CD ]
Line_3 $$ CountingReentrantLock<K> lock = locks.get(key)-->Line_4 $$ if (lock == null) [ FD ]
Line_4 $$ if (lock == null) -->Line_5 $$ lock = new CountingReentrantLock<K>(key)[ CD ]
Line_2 $$ synchronized CountingReentrantLock<K> getLock(K key) -->Line_6 $$ locks.put(key, lock)[ FD ]
Line_3 $$ CountingReentrantLock<K> lock = locks.get(key)-->Line_5 $$ lock = new CountingReentrantLock<K>(key)[ FD ]
Line_2 $$ synchronized CountingReentrantLock<K> getLock(K key) -->Line_8 $$ lock.count++[ CD ]
