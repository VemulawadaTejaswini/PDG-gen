Line_23 $$ int lastpoint = fullname.lastIndexOf(".")-->Line_26 $$ npackage = fullname.substring(0, lastpoint)[ FD ]
Line_2 $$ public String getShortName(String fullname, boolean imported) -->Line_6 $$ if (node != null && node.classStruct.isOwn()) [ CD ]
Line_25 $$ nshort = fullname.substring(lastpoint + 1)-->Line_35 $$ mapSimpleNames.put(nshort, npackage)[ FD ]
Line_26 $$ npackage = fullname.substring(0, lastpoint)-->Line_32 $$ if (existsDefaultClass || (mapSimpleNames.containsKey(nshort) && !npackage.equals(mapSimpleNames.get(nshort)))) [ FD ]
Line_2 $$ public String getShortName(String fullname, boolean imported) -->Line_36 $$ if (!imported) [ FD ]
Line_22 $$ String npackage = ""-->Line_35 $$ mapSimpleNames.put(nshort, npackage)[ FD ]
Line_2 $$ public String getShortName(String fullname, boolean imported) -->Line_23 $$ int lastpoint = fullname.lastIndexOf(".")[ CD ]
Line_32 $$ if (existsDefaultClass || (mapSimpleNames.containsKey(nshort) && !npackage.equals(mapSimpleNames.get(nshort)))) -->Line_34 $$ if (!mapSimpleNames.containsKey(nshort)) [ CD ]
Line_2 $$ public String getShortName(String fullname, boolean imported) -->Line_40 $$ return retname == null ? nshort : retname[ CD ]
Line_23 $$ int lastpoint = fullname.lastIndexOf(".")-->Line_24 $$ if (lastpoint >= 0) [ FD ]
Line_2 $$ public String getShortName(String fullname, boolean imported) -->Line_14 $$ fullname = fullname.replace('/', '.')[ FD ]
Line_29 $$ boolean existsDefaultClass = (context.getClass(currentPackageSlash + nshort) != null && !npackage.equals(currentPackagePoint)) || (context.getClass(nshort) != null && !currentPackagePoint.isEmpty())-->Line_32 $$ if (existsDefaultClass || (mapSimpleNames.containsKey(nshort) && !npackage.equals(mapSimpleNames.get(nshort)))) [ FD ]
Line_25 $$ nshort = fullname.substring(lastpoint + 1)-->Line_32 $$ if (existsDefaultClass || (mapSimpleNames.containsKey(nshort) && !npackage.equals(mapSimpleNames.get(nshort)))) [ FD ]
Line_32 $$ if (existsDefaultClass || (mapSimpleNames.containsKey(nshort) && !npackage.equals(mapSimpleNames.get(nshort)))) -->Line_33 $$ return retname == null ? fullname : (npackage + "." + retname)[ CD ]
Line_14 $$ fullname = fullname.replace('/', '.')-->Line_25 $$ nshort = fullname.substring(lastpoint + 1)[ FD ]
Line_21 $$ String nshort = fullname-->Line_35 $$ mapSimpleNames.put(nshort, npackage)[ FD ]
Line_2 $$ public String getShortName(String fullname, boolean imported) -->Line_3 $$ ClassesProcessor clproc = DecompilerContext.getClassProcessor()[ CD ]
Line_14 $$ fullname = fullname.replace('/', '.')-->Line_19 $$ fullname = fullname.replace('$', '.')[ FD ]
Line_19 $$ fullname = fullname.replace('$', '.')-->Line_26 $$ npackage = fullname.substring(0, lastpoint)[ FD ]
Line_28 $$ StructContext context = DecompilerContext.getStructContext()-->Line_29 $$ boolean existsDefaultClass = (context.getClass(currentPackageSlash + nshort) != null && !npackage.equals(currentPackagePoint)) || (context.getClass(nshort) != null && !currentPackagePoint.isEmpty())[ FD ]
Line_14 $$ fullname = fullname.replace('/', '.')-->Line_26 $$ npackage = fullname.substring(0, lastpoint)[ FD ]
Line_5 $$ String retname = null-->Line_7 $$ retname = node.simpleName[ FD ]
Line_24 $$ if (lastpoint >= 0) -->Line_25 $$ nshort = fullname.substring(lastpoint + 1)[ CD ]
Line_2 $$ public String getShortName(String fullname, boolean imported) -->Line_13 $$ fullname = node.classStruct.qualifiedName[ FD ]
Line_2 $$ public String getShortName(String fullname, boolean imported) -->Line_32 $$ if (existsDefaultClass || (mapSimpleNames.containsKey(nshort) && !npackage.equals(mapSimpleNames.get(nshort)))) [ CD ]
Line_2 $$ public String getShortName(String fullname, boolean imported) -->Line_25 $$ nshort = fullname.substring(lastpoint + 1)[ FD ]
Line_8 $$ while (node.parent != null && node.type == ClassNode.CLASS_MEMBER) -->Line_9 $$ retname = node.parent.simpleName + "." + retname[ CD ]
Line_13 $$ fullname = node.classStruct.qualifiedName-->Line_19 $$ fullname = fullname.replace('$', '.')[ FD ]
Line_6 $$ if (node != null && node.classStruct.isOwn()) -->Line_12 $$ if (node.type == ClassNode.CLASS_ROOT) [ CD ]
Line_2 $$ public String getShortName(String fullname, boolean imported) -->Line_28 $$ StructContext context = DecompilerContext.getStructContext()[ CD ]
Line_4 $$ ClassNode node = clproc.getMapRootClasses().get(fullname.replace('.', '/'))-->Line_10 $$ node = node.parent[ FD ]
Line_2 $$ public String getShortName(String fullname, boolean imported) -->Line_4 $$ ClassNode node = clproc.getMapRootClasses().get(fullname.replace('.', '/'))[ CD ]
Line_13 $$ fullname = node.classStruct.qualifiedName-->Line_23 $$ int lastpoint = fullname.lastIndexOf(".")[ FD ]
Line_22 $$ String npackage = ""-->Line_29 $$ boolean existsDefaultClass = (context.getClass(currentPackageSlash + nshort) != null && !npackage.equals(currentPackagePoint)) || (context.getClass(nshort) != null && !currentPackagePoint.isEmpty())[ FD ]
Line_22 $$ String npackage = ""-->Line_26 $$ npackage = fullname.substring(0, lastpoint)[ FD ]
Line_21 $$ String nshort = fullname-->Line_29 $$ boolean existsDefaultClass = (context.getClass(currentPackageSlash + nshort) != null && !npackage.equals(currentPackagePoint)) || (context.getClass(nshort) != null && !currentPackagePoint.isEmpty())[ FD ]
Line_6 $$ if (node != null && node.classStruct.isOwn()) -->Line_7 $$ retname = node.simpleName[ CD ]
Line_2 $$ public String getShortName(String fullname, boolean imported) -->Line_5 $$ String retname = null[ CD ]
Line_25 $$ nshort = fullname.substring(lastpoint + 1)-->Line_29 $$ boolean existsDefaultClass = (context.getClass(currentPackageSlash + nshort) != null && !npackage.equals(currentPackagePoint)) || (context.getClass(nshort) != null && !currentPackagePoint.isEmpty())[ FD ]
Line_36 $$ if (!imported) -->Line_37 $$ setNotImportedNames.add(nshort)[ CD ]
Line_24 $$ if (lastpoint >= 0) -->Line_26 $$ npackage = fullname.substring(0, lastpoint)[ CD ]
Line_2 $$ public String getShortName(String fullname, boolean imported) -->Line_29 $$ boolean existsDefaultClass = (context.getClass(currentPackageSlash + nshort) != null && !npackage.equals(currentPackagePoint)) || (context.getClass(nshort) != null && !currentPackagePoint.isEmpty())[ CD ]
Line_3 $$ ClassesProcessor clproc = DecompilerContext.getClassProcessor()-->Line_4 $$ ClassNode node = clproc.getMapRootClasses().get(fullname.replace('.', '/'))[ FD ]
Line_6 $$ if (node != null && node.classStruct.isOwn()) -->Line_19 $$ fullname = fullname.replace('$', '.')[ CD ]
Line_5 $$ String retname = null-->Line_9 $$ retname = node.parent.simpleName + "." + retname[ FD ]
Line_19 $$ fullname = fullname.replace('$', '.')-->Line_23 $$ int lastpoint = fullname.lastIndexOf(".")[ FD ]
Line_6 $$ if (node != null && node.classStruct.isOwn()) -->Line_8 $$ while (node.parent != null && node.type == ClassNode.CLASS_MEMBER) [ CD ]
Line_21 $$ String nshort = fullname-->Line_25 $$ nshort = fullname.substring(lastpoint + 1)[ FD ]
Line_25 $$ nshort = fullname.substring(lastpoint + 1)-->Line_34 $$ if (!mapSimpleNames.containsKey(nshort)) [ FD ]
Line_26 $$ npackage = fullname.substring(0, lastpoint)-->Line_35 $$ mapSimpleNames.put(nshort, npackage)[ FD ]
Line_13 $$ fullname = node.classStruct.qualifiedName-->Line_14 $$ fullname = fullname.replace('/', '.')[ FD ]
Line_2 $$ public String getShortName(String fullname, boolean imported) -->Line_22 $$ String npackage = ""[ CD ]
Line_14 $$ fullname = fullname.replace('/', '.')-->Line_23 $$ int lastpoint = fullname.lastIndexOf(".")[ FD ]
Line_12 $$ if (node.type == ClassNode.CLASS_ROOT) -->Line_14 $$ fullname = fullname.replace('/', '.')[ CD ]
Line_19 $$ fullname = fullname.replace('$', '.')-->Line_25 $$ nshort = fullname.substring(lastpoint + 1)[ FD ]
Line_12 $$ if (node.type == ClassNode.CLASS_ROOT) -->Line_13 $$ fullname = node.classStruct.qualifiedName[ CD ]
Line_21 $$ String nshort = fullname-->Line_34 $$ if (!mapSimpleNames.containsKey(nshort)) [ FD ]
Line_2 $$ public String getShortName(String fullname, boolean imported) -->Line_24 $$ if (lastpoint >= 0) [ CD ]
Line_2 $$ public String getShortName(String fullname, boolean imported) -->Line_23 $$ int lastpoint = fullname.lastIndexOf(".")[ FD ]
Line_22 $$ String npackage = ""-->Line_32 $$ if (existsDefaultClass || (mapSimpleNames.containsKey(nshort) && !npackage.equals(mapSimpleNames.get(nshort)))) [ FD ]
Line_2 $$ public String getShortName(String fullname, boolean imported) -->Line_26 $$ npackage = fullname.substring(0, lastpoint)[ FD ]
Line_21 $$ String nshort = fullname-->Line_32 $$ if (existsDefaultClass || (mapSimpleNames.containsKey(nshort) && !npackage.equals(mapSimpleNames.get(nshort)))) [ FD ]
Line_8 $$ while (node.parent != null && node.type == ClassNode.CLASS_MEMBER) -->Line_10 $$ node = node.parent[ CD ]
Line_2 $$ public String getShortName(String fullname, boolean imported) -->Line_21 $$ String nshort = fullname[ CD ]
Line_2 $$ public String getShortName(String fullname, boolean imported) -->Line_19 $$ fullname = fullname.replace('$', '.')[ FD ]
Line_13 $$ fullname = node.classStruct.qualifiedName-->Line_26 $$ npackage = fullname.substring(0, lastpoint)[ FD ]
Line_26 $$ npackage = fullname.substring(0, lastpoint)-->Line_29 $$ boolean existsDefaultClass = (context.getClass(currentPackageSlash + nshort) != null && !npackage.equals(currentPackagePoint)) || (context.getClass(nshort) != null && !currentPackagePoint.isEmpty())[ FD ]
Line_34 $$ if (!mapSimpleNames.containsKey(nshort)) -->Line_36 $$ if (!imported) [ CD ]
Line_25 $$ nshort = fullname.substring(lastpoint + 1)-->Line_37 $$ setNotImportedNames.add(nshort)[ FD ]
Line_13 $$ fullname = node.classStruct.qualifiedName-->Line_25 $$ nshort = fullname.substring(lastpoint + 1)[ FD ]
Line_21 $$ String nshort = fullname-->Line_37 $$ setNotImportedNames.add(nshort)[ FD ]
Line_34 $$ if (!mapSimpleNames.containsKey(nshort)) -->Line_35 $$ mapSimpleNames.put(nshort, npackage)[ CD ]
Line_7 $$ retname = node.simpleName-->Line_9 $$ retname = node.parent.simpleName + "." + retname[ FD ]
Line_12 $$ if (node.type == ClassNode.CLASS_ROOT) -->Line_16 $$ return retname[ CD ]
Line_2 $$ public String getShortName(String fullname, boolean imported) -->Line_4 $$ ClassNode node = clproc.getMapRootClasses().get(fullname.replace('.', '/'))[ FD ]
