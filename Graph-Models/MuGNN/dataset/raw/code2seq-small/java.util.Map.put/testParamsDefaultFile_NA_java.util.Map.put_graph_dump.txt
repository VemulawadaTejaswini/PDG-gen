Line_2 $$ public void testParamsDefaultFile() throws IOException -->Line_6 $$ ScriptParameterParser paramParser = new ScriptParameterParser()[ CD ]
Line_2 $$ public void testParamsDefaultFile() throws IOException -->Line_7 $$ paramParser.parseParams(params)[ CD ]
Line_2 $$ public void testParamsDefaultFile() throws IOException -->Line_9 $$ assertThat(paramParser.lang(), nullValue())[ CD ]
Line_6 $$ ScriptParameterParser paramParser = new ScriptParameterParser()-->Line_8 $$ assertDefaultParameterValue(paramParser, "scriptValue", ScriptType.FILE)[ FD ]
Line_3 $$ Map<String, String> config = new HashMap()-->Line_4 $$ config.put("script_file", "scriptValue")[ FD ]
Line_2 $$ public void testParamsDefaultFile() throws IOException -->Line_4 $$ config.put("script_file", "scriptValue")[ CD ]
Line_5 $$ MapParams params = new MapParams(config)-->Line_7 $$ paramParser.parseParams(params)[ FD ]
Line_2 $$ public void testParamsDefaultFile() throws IOException -->Line_3 $$ Map<String, String> config = new HashMap()[ CD ]
Line_6 $$ ScriptParameterParser paramParser = new ScriptParameterParser()-->Line_7 $$ paramParser.parseParams(params)[ FD ]
Line_2 $$ public void testParamsDefaultFile() throws IOException -->Line_5 $$ MapParams params = new MapParams(config)[ CD ]
Line_2 $$ public void testParamsDefaultFile() throws IOException -->Line_8 $$ assertDefaultParameterValue(paramParser, "scriptValue", ScriptType.FILE)[ CD ]
Line_6 $$ ScriptParameterParser paramParser = new ScriptParameterParser()-->Line_9 $$ assertThat(paramParser.lang(), nullValue())[ FD ]
