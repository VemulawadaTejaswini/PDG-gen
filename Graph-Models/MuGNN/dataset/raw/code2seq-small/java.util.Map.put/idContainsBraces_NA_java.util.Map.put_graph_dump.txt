Line_20 $$ Map<String, String> names = new HashMap<String, String>()-->Line_30 $$ model.put("nameOptionMap", names)[ FD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_33 $$ view.setUrl("org/springframework/web/servlet/view/velocity/test-spr5172.vm")[ CD ]
Line_4 $$ Map<String, String> msgMap = new HashMap<String, String>()-->Line_6 $$ msgMap.put("world", "Mundo")[ FD ]
Line_40 $$ for (int i = 0; i < tokens.length; i++) -->Line_55 $$ if (tokens[i].equals("FORM8"))[ CD ]
Line_26 $$ VelocityEngine ve = vc.createVelocityEngine()-->Line_36 $$ view.setVelocityEngine(ve)[ FD ]
Line_13 $$ TestBean darren = new TestBean("Darren", 99)-->Line_19 $$ request.setAttribute("command", darren)[ FD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_23 $$ names.put("Fred", "Fred Bloggs")[ CD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_17 $$ darren.setJedi(true)[ CD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_5 $$ msgMap.put("hello", "Howdy")[ CD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_35 $$ view.setExposeSpringMacroHelpers(false)[ CD ]
Line_47 $$ if (tokens[i].equals("FORM4"))-->Line_48 $$ assertEquals("<select multiple=\"multiple\" id=\"spouses\" name=\"spouses\" >", tokens[i + 1])[ CD ]
Line_24 $$ VelocityConfigurer vc = new VelocityConfigurer()-->Line_25 $$ vc.setPreferFileSystemAccess(false)[ FD ]
Line_13 $$ TestBean darren = new TestBean("Darren", 99)-->Line_18 $$ darren.setStringArray(new String[] [ FD ]
Line_55 $$ if (tokens[i].equals("FORM8"))-->Line_56 $$ assertEquals("<input type=\"hidden\" name=\"_spouses0.name\" value=\"on\"/>", tokens[i + 1])[ CD ]
Line_27 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_30 $$ model.put("nameOptionMap", names)[ FD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_14 $$ TestBean fred = new TestBean("Fred")[ CD ]
Line_38 $$ String output = response.getContentAsString()-->Line_39 $$ String[] tokens = StringUtils.tokenizeToStringArray(output, "\t\n")[ FD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_29 $$ model.put("springMacroRequestContext", rc)[ CD ]
Line_8 $$ Map<String, String> themeMsgMap = new HashMap<String, String>()-->Line_9 $$ themeMsgMap.put("hello", "Howdy!")[ FD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_21 $$ names.put("Darren", "Darren Davison")[ CD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_27 $$ Map<String, Object> model = new HashMap<String, Object>()[ CD ]
Line_40 $$ for (int i = 0; i < tokens.length; i++) -->Line_47 $$ if (tokens[i].equals("FORM4"))[ CD ]
Line_51 $$ if (tokens[i].equals("FORM6"))-->Line_52 $$ assertEquals("<input type=\"password\" id=\"spouses0.name\" name=\"spouses[0].name\" value=\"\" >", tokens[i + 1])[ CD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_18 $$ darren.setStringArray(new String[] [ CD ]
Line_20 $$ Map<String, String> names = new HashMap<String, String>()-->Line_21 $$ names.put("Darren", "Darren Davison")[ FD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_38 $$ String output = response.getContentAsString()[ CD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_36 $$ view.setVelocityEngine(ve)[ CD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_24 $$ VelocityConfigurer vc = new VelocityConfigurer()[ CD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_32 $$ view.setBeanName("myView")[ CD ]
Line_45 $$ if (tokens[i].equals("FORM3"))-->Line_46 $$ assertEquals("<select id=\"spouses0.name\" name=\"spouses[0].name\" >", tokens[i + 1])[ CD ]
Line_49 $$ if (tokens[i].equals("FORM5"))-->Line_50 $$ assertEquals("<input type=\"radio\" name=\"spouses[0].name\" value=\"Darren\"", tokens[i + 1])[ CD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_6 $$ msgMap.put("world", "Mundo")[ CD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_13 $$ TestBean darren = new TestBean("Darren", 99)[ CD ]
Line_13 $$ TestBean darren = new TestBean("Darren", 99)-->Line_17 $$ darren.setJedi(true)[ FD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_3 $$ DummyMacroRequestContext rc = new DummyMacroRequestContext(request)[ CD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_7 $$ rc.setMessageMap(msgMap)[ CD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_22 $$ names.put("John", "John Doe")[ CD ]
Line_59 $$ if (tokens[i].equals("FORM9"))-->Line_60 $$ assertEquals("<input type=\"hidden\" name=\"_spouses0.jedi\" value=\"on\"/>", tokens[i + 1])[ CD ]
Line_31 $$ VelocityView view = new VelocityView()-->Line_34 $$ view.setEncoding("UTF-8")[ FD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_10 $$ themeMsgMap.put("world", "Mundo!")[ CD ]
Line_20 $$ Map<String, String> names = new HashMap<String, String>()-->Line_22 $$ names.put("John", "John Doe")[ FD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_28 $$ model.put("command", darren)[ CD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_12 $$ rc.setContextPath("/springtest")[ CD ]
Line_14 $$ TestBean fred = new TestBean("Fred")-->Line_15 $$ fred.setJedi(true)[ FD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_34 $$ view.setEncoding("UTF-8")[ CD ]
Line_27 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_37 $$ view.render(model, request, response)[ FD ]
Line_20 $$ Map<String, String> names = new HashMap<String, String>()-->Line_23 $$ names.put("Fred", "Fred Bloggs")[ FD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_25 $$ vc.setPreferFileSystemAccess(false)[ CD ]
Line_8 $$ Map<String, String> themeMsgMap = new HashMap<String, String>()-->Line_10 $$ themeMsgMap.put("world", "Mundo!")[ FD ]
Line_61 $$ if (tokens[i].equals("FORM9"))-->Line_62 $$ assertEquals("<input type=\"checkbox\" id=\"spouses0.jedi\" name=\"spouses[0].jedi\" checked=\"checked\" />", tokens[i + 2])[ CD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_15 $$ fred.setJedi(true)[ CD ]
Line_8 $$ Map<String, String> themeMsgMap = new HashMap<String, String>()-->Line_11 $$ rc.setThemeMessageMap(themeMsgMap)[ FD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_19 $$ request.setAttribute("command", darren)[ CD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_8 $$ Map<String, String> themeMsgMap = new HashMap<String, String>()[ CD ]
Line_40 $$ for (int i = 0; i < tokens.length; i++) -->Line_49 $$ if (tokens[i].equals("FORM5"))[ CD ]
Line_3 $$ DummyMacroRequestContext rc = new DummyMacroRequestContext(request)-->Line_11 $$ rc.setThemeMessageMap(themeMsgMap)[ FD ]
Line_40 $$ for (int i = 0; i < tokens.length; i++) -->Line_51 $$ if (tokens[i].equals("FORM6"))[ CD ]
Line_41 $$ if (tokens[i].equals("FORM1"))-->Line_42 $$ assertEquals("<input type=\"text\" id=\"spouses0.name\" name=\"spouses[0].name\" value=\"Fred\" >", tokens[i + 1])[ CD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_39 $$ String[] tokens = StringUtils.tokenizeToStringArray(output, "\t\n")[ CD ]
Line_40 $$ for (int i = 0; i < tokens.length; i++) -->Line_57 $$ if (tokens[i].equals("FORM8"))[ CD ]
Line_43 $$ if (tokens[i].equals("FORM2"))-->Line_44 $$ assertEquals("<textarea id=\"spouses0.name\" name=\"spouses[0].name\" >Fred</textarea>", tokens[i + 1])[ CD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_26 $$ VelocityEngine ve = vc.createVelocityEngine()[ CD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_31 $$ VelocityView view = new VelocityView()[ CD ]
Line_14 $$ TestBean fred = new TestBean("Fred")-->Line_16 $$ darren.setSpouse(fred)[ FD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_11 $$ rc.setThemeMessageMap(themeMsgMap)[ CD ]
Line_31 $$ VelocityView view = new VelocityView()-->Line_32 $$ view.setBeanName("myView")[ FD ]
Line_31 $$ VelocityView view = new VelocityView()-->Line_35 $$ view.setExposeSpringMacroHelpers(false)[ FD ]
Line_40 $$ for (int i = 0; i < tokens.length; i++) -->Line_59 $$ if (tokens[i].equals("FORM9"))[ CD ]
Line_3 $$ DummyMacroRequestContext rc = new DummyMacroRequestContext(request)-->Line_29 $$ model.put("springMacroRequestContext", rc)[ FD ]
Line_31 $$ VelocityView view = new VelocityView()-->Line_33 $$ view.setUrl("org/springframework/web/servlet/view/velocity/test-spr5172.vm")[ FD ]
Line_4 $$ Map<String, String> msgMap = new HashMap<String, String>()-->Line_5 $$ msgMap.put("hello", "Howdy")[ FD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_20 $$ Map<String, String> names = new HashMap<String, String>()[ CD ]
Line_27 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_29 $$ model.put("springMacroRequestContext", rc)[ FD ]
Line_27 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_28 $$ model.put("command", darren)[ FD ]
Line_31 $$ VelocityView view = new VelocityView()-->Line_36 $$ view.setVelocityEngine(ve)[ FD ]
Line_40 $$ for (int i = 0; i < tokens.length; i++) -->Line_43 $$ if (tokens[i].equals("FORM2"))[ CD ]
Line_4 $$ Map<String, String> msgMap = new HashMap<String, String>()-->Line_7 $$ rc.setMessageMap(msgMap)[ FD ]
Line_53 $$ if (tokens[i].equals("FORM7"))-->Line_54 $$ assertEquals("<input type=\"hidden\" id=\"spouses0.name\" name=\"spouses[0].name\" value=\"Fred\" >", tokens[i + 1])[ CD ]
Line_3 $$ DummyMacroRequestContext rc = new DummyMacroRequestContext(request)-->Line_12 $$ rc.setContextPath("/springtest")[ FD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_16 $$ darren.setSpouse(fred)[ CD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_4 $$ Map<String, String> msgMap = new HashMap<String, String>()[ CD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_30 $$ model.put("nameOptionMap", names)[ CD ]
Line_13 $$ TestBean darren = new TestBean("Darren", 99)-->Line_16 $$ darren.setSpouse(fred)[ FD ]
Line_40 $$ for (int i = 0; i < tokens.length; i++) -->Line_53 $$ if (tokens[i].equals("FORM7"))[ CD ]
Line_40 $$ for (int i = 0; i < tokens.length; i++) -->Line_41 $$ if (tokens[i].equals("FORM1"))[ CD ]
Line_57 $$ if (tokens[i].equals("FORM8"))-->Line_58 $$ assertEquals("<input type=\"checkbox\" id=\"spouses0.name\" name=\"spouses[0].name\" />", tokens[i + 2])[ CD ]
Line_13 $$ TestBean darren = new TestBean("Darren", 99)-->Line_28 $$ model.put("command", darren)[ FD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_40 $$ for (int i = 0; i < tokens.length; i++) [ CD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_9 $$ themeMsgMap.put("hello", "Howdy!")[ CD ]
Line_2 $$ public void idContainsBraces() throws Exception -->Line_37 $$ view.render(model, request, response)[ CD ]
Line_40 $$ for (int i = 0; i < tokens.length; i++) -->Line_61 $$ if (tokens[i].equals("FORM9"))[ CD ]
Line_40 $$ for (int i = 0; i < tokens.length; i++) -->Line_45 $$ if (tokens[i].equals("FORM3"))[ CD ]
Line_24 $$ VelocityConfigurer vc = new VelocityConfigurer()-->Line_26 $$ VelocityEngine ve = vc.createVelocityEngine()[ FD ]
Line_3 $$ DummyMacroRequestContext rc = new DummyMacroRequestContext(request)-->Line_7 $$ rc.setMessageMap(msgMap)[ FD ]
Line_31 $$ VelocityView view = new VelocityView()-->Line_37 $$ view.render(model, request, response)[ FD ]
