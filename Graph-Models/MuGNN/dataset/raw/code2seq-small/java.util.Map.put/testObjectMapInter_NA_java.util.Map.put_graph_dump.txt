Line_2 $$ public void testObjectMapInter() -->Line_11 $$ ctx = (Map<String, Object>) executable.unwrap(vars.get("ctx"))[ CD ]
Line_2 $$ public void testObjectMapInter() -->Line_8 $$ vars.put("ctx", ctx)[ CD ]
Line_3 $$ Map<String, Object> vars = new HashMap<String, Object>()-->Line_9 $$ ExecutableScript executable = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testObjectInterMap", "python", se.compile("ctx['obj2'] = [ FD ]
Line_9 $$ ExecutableScript executable = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testObjectInterMap", "python", se.compile("ctx['obj2'] = -->Line_10 $$ executable.run()[ FD ]
Line_9 $$ ExecutableScript executable = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testObjectInterMap", "python", se.compile("ctx['obj2'] = -->Line_11 $$ ctx = (Map<String, Object>) executable.unwrap(vars.get("ctx"))[ FD ]
Line_2 $$ public void testObjectMapInter() -->Line_6 $$ obj1.put("prop1", "value1")[ CD ]
Line_4 $$ Map<String, Object> ctx = new HashMap<String, Object>()-->Line_7 $$ ctx.put("obj1", obj1)[ FD ]
Line_11 $$ ctx = (Map<String, Object>) executable.unwrap(vars.get("ctx"))-->Line_15 $$ assertThat((String) ((Map<String, Object>) ctx.get("obj2")).get("prop2"), equalTo("value2"))[ FD ]
Line_3 $$ Map<String, Object> vars = new HashMap<String, Object>()-->Line_8 $$ vars.put("ctx", ctx)[ FD ]
Line_2 $$ public void testObjectMapInter() -->Line_3 $$ Map<String, Object> vars = new HashMap<String, Object>()[ CD ]
Line_2 $$ public void testObjectMapInter() -->Line_9 $$ ExecutableScript executable = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testObjectInterMap", "python", se.compile("ctx['obj2'] = [ CD ]
Line_11 $$ ctx = (Map<String, Object>) executable.unwrap(vars.get("ctx"))-->Line_14 $$ assertThat(ctx.containsKey("obj2"), equalTo(true))[ FD ]
Line_4 $$ Map<String, Object> ctx = new HashMap<String, Object>()-->Line_14 $$ assertThat(ctx.containsKey("obj2"), equalTo(true))[ FD ]
Line_4 $$ Map<String, Object> ctx = new HashMap<String, Object>()-->Line_15 $$ assertThat((String) ((Map<String, Object>) ctx.get("obj2")).get("prop2"), equalTo("value2"))[ FD ]
Line_2 $$ public void testObjectMapInter() -->Line_7 $$ ctx.put("obj1", obj1)[ CD ]
Line_4 $$ Map<String, Object> ctx = new HashMap<String, Object>()-->Line_13 $$ assertThat((String) ((Map<String, Object>) ctx.get("obj1")).get("prop1"), equalTo("uvalue1"))[ FD ]
Line_4 $$ Map<String, Object> ctx = new HashMap<String, Object>()-->Line_11 $$ ctx = (Map<String, Object>) executable.unwrap(vars.get("ctx"))[ FD ]
Line_2 $$ public void testObjectMapInter() -->Line_4 $$ Map<String, Object> ctx = new HashMap<String, Object>()[ CD ]
Line_2 $$ public void testObjectMapInter() -->Line_14 $$ assertThat(ctx.containsKey("obj2"), equalTo(true))[ CD ]
Line_3 $$ Map<String, Object> vars = new HashMap<String, Object>()-->Line_11 $$ ctx = (Map<String, Object>) executable.unwrap(vars.get("ctx"))[ FD ]
Line_5 $$ Map<String, Object> obj1 = new HashMap<String, Object>()-->Line_6 $$ obj1.put("prop1", "value1")[ FD ]
Line_2 $$ public void testObjectMapInter() -->Line_10 $$ executable.run()[ CD ]
Line_2 $$ public void testObjectMapInter() -->Line_13 $$ assertThat((String) ((Map<String, Object>) ctx.get("obj1")).get("prop1"), equalTo("uvalue1"))[ CD ]
Line_4 $$ Map<String, Object> ctx = new HashMap<String, Object>()-->Line_12 $$ assertThat(ctx.containsKey("obj1"), equalTo(true))[ FD ]
Line_11 $$ ctx = (Map<String, Object>) executable.unwrap(vars.get("ctx"))-->Line_13 $$ assertThat((String) ((Map<String, Object>) ctx.get("obj1")).get("prop1"), equalTo("uvalue1"))[ FD ]
Line_5 $$ Map<String, Object> obj1 = new HashMap<String, Object>()-->Line_7 $$ ctx.put("obj1", obj1)[ FD ]
Line_2 $$ public void testObjectMapInter() -->Line_12 $$ assertThat(ctx.containsKey("obj1"), equalTo(true))[ CD ]
Line_4 $$ Map<String, Object> ctx = new HashMap<String, Object>()-->Line_8 $$ vars.put("ctx", ctx)[ FD ]
Line_11 $$ ctx = (Map<String, Object>) executable.unwrap(vars.get("ctx"))-->Line_12 $$ assertThat(ctx.containsKey("obj1"), equalTo(true))[ FD ]
Line_2 $$ public void testObjectMapInter() -->Line_15 $$ assertThat((String) ((Map<String, Object>) ctx.get("obj2")).get("prop2"), equalTo("value2"))[ CD ]
Line_2 $$ public void testObjectMapInter() -->Line_5 $$ Map<String, Object> obj1 = new HashMap<String, Object>()[ CD ]
