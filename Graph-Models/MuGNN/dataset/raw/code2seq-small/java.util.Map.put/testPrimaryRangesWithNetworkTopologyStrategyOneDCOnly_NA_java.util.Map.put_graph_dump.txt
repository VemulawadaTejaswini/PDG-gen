Line_2 $$ public void testPrimaryRangesWithNetworkTopologyStrategyOneDCOnly() throws Exception -->Line_8 $$ metadata.updateNormalToken(new StringToken("D"), InetAddress.getByName("127.0.0.5"))[ CD ]
Line_23 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.5"))-->Line_24 $$ assert primaryRanges.size() == 2[ FD ]
Line_2 $$ public void testPrimaryRangesWithNetworkTopologyStrategyOneDCOnly() throws Exception -->Line_4 $$ metadata.clearUnsafe()[ CD ]
Line_2 $$ public void testPrimaryRangesWithNetworkTopologyStrategyOneDCOnly() throws Exception -->Line_7 $$ metadata.updateNormalToken(new StringToken("B"), InetAddress.getByName("127.0.0.4"))[ CD ]
Line_17 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_26 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("B"), new StringToken("C")))[ FD ]
Line_2 $$ public void testPrimaryRangesWithNetworkTopologyStrategyOneDCOnly() throws Exception -->Line_3 $$ TokenMetadata metadata = StorageService.instance.getTokenMetadata()[ CD ]
Line_9 $$ Map<String, String> configOptions = new HashMap()-->Line_11 $$ configOptions.put(ReplicationParams.CLASS, "NetworkTopologyStrategy")[ FD ]
Line_17 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_21 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("D"), new StringToken("A")))[ FD ]
Line_13 $$ KeyspaceMetadata meta = KeyspaceMetadata.create("Keyspace1", KeyspaceParams.create(false, configOptions))-->Line_14 $$ Schema.instance.setKeyspaceMetadata(meta)[ FD ]
Line_2 $$ public void testPrimaryRangesWithNetworkTopologyStrategyOneDCOnly() throws Exception -->Line_11 $$ configOptions.put(ReplicationParams.CLASS, "NetworkTopologyStrategy")[ CD ]
Line_23 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.5"))-->Line_26 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("B"), new StringToken("C")))[ FD ]
Line_2 $$ public void testPrimaryRangesWithNetworkTopologyStrategyOneDCOnly() throws Exception -->Line_6 $$ metadata.updateNormalToken(new StringToken("C"), InetAddress.getByName("127.0.0.2"))[ CD ]
Line_19 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_26 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("B"), new StringToken("C")))[ FD ]
Line_15 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_23 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.5"))[ FD ]
Line_2 $$ public void testPrimaryRangesWithNetworkTopologyStrategyOneDCOnly() throws Exception -->Line_14 $$ Schema.instance.setKeyspaceMetadata(meta)[ CD ]
Line_15 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_25 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("C"), new StringToken("D")))[ FD ]
Line_19 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_20 $$ assert primaryRanges.size() == 2[ FD ]
Line_3 $$ TokenMetadata metadata = StorageService.instance.getTokenMetadata()-->Line_5 $$ metadata.updateNormalToken(new StringToken("A"), InetAddress.getByName("127.0.0.1"))[ FD ]
Line_2 $$ public void testPrimaryRangesWithNetworkTopologyStrategyOneDCOnly() throws Exception -->Line_17 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))[ CD ]
Line_15 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_22 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("A"), new StringToken("B")))[ FD ]
Line_15 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_16 $$ assert primaryRanges.isEmpty()[ FD ]
Line_19 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_24 $$ assert primaryRanges.size() == 2[ FD ]
Line_2 $$ public void testPrimaryRangesWithNetworkTopologyStrategyOneDCOnly() throws Exception -->Line_12 $$ Keyspace.clear("Keyspace1")[ CD ]
Line_19 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_21 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("D"), new StringToken("A")))[ FD ]
Line_17 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_22 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("A"), new StringToken("B")))[ FD ]
Line_15 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_19 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))[ FD ]
Line_9 $$ Map<String, String> configOptions = new HashMap()-->Line_10 $$ configOptions.put("DC2", "2")[ FD ]
Line_2 $$ public void testPrimaryRangesWithNetworkTopologyStrategyOneDCOnly() throws Exception -->Line_10 $$ configOptions.put("DC2", "2")[ CD ]
Line_19 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_23 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.5"))[ FD ]
Line_2 $$ public void testPrimaryRangesWithNetworkTopologyStrategyOneDCOnly() throws Exception -->Line_9 $$ Map<String, String> configOptions = new HashMap()[ CD ]
Line_15 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_18 $$ assert primaryRanges.isEmpty()[ FD ]
Line_17 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_25 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("C"), new StringToken("D")))[ FD ]
Line_17 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_23 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.5"))[ FD ]
Line_2 $$ public void testPrimaryRangesWithNetworkTopologyStrategyOneDCOnly() throws Exception -->Line_23 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.5"))[ CD ]
Line_23 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.5"))-->Line_25 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("C"), new StringToken("D")))[ FD ]
Line_3 $$ TokenMetadata metadata = StorageService.instance.getTokenMetadata()-->Line_6 $$ metadata.updateNormalToken(new StringToken("C"), InetAddress.getByName("127.0.0.2"))[ FD ]
Line_3 $$ TokenMetadata metadata = StorageService.instance.getTokenMetadata()-->Line_8 $$ metadata.updateNormalToken(new StringToken("D"), InetAddress.getByName("127.0.0.5"))[ FD ]
Line_15 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_17 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))[ FD ]
Line_17 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_20 $$ assert primaryRanges.size() == 2[ FD ]
Line_3 $$ TokenMetadata metadata = StorageService.instance.getTokenMetadata()-->Line_7 $$ metadata.updateNormalToken(new StringToken("B"), InetAddress.getByName("127.0.0.4"))[ FD ]
Line_19 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_25 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("C"), new StringToken("D")))[ FD ]
Line_17 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_24 $$ assert primaryRanges.size() == 2[ FD ]
Line_2 $$ public void testPrimaryRangesWithNetworkTopologyStrategyOneDCOnly() throws Exception -->Line_15 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))[ CD ]
Line_17 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_18 $$ assert primaryRanges.isEmpty()[ FD ]
Line_15 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_20 $$ assert primaryRanges.size() == 2[ FD ]
Line_3 $$ TokenMetadata metadata = StorageService.instance.getTokenMetadata()-->Line_4 $$ metadata.clearUnsafe()[ FD ]
Line_15 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_24 $$ assert primaryRanges.size() == 2[ FD ]
Line_2 $$ public void testPrimaryRangesWithNetworkTopologyStrategyOneDCOnly() throws Exception -->Line_5 $$ metadata.updateNormalToken(new StringToken("A"), InetAddress.getByName("127.0.0.1"))[ CD ]
Line_17 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_19 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))[ FD ]
Line_15 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_26 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("B"), new StringToken("C")))[ FD ]
Line_2 $$ public void testPrimaryRangesWithNetworkTopologyStrategyOneDCOnly() throws Exception -->Line_13 $$ KeyspaceMetadata meta = KeyspaceMetadata.create("Keyspace1", KeyspaceParams.create(false, configOptions))[ CD ]
Line_9 $$ Map<String, String> configOptions = new HashMap()-->Line_13 $$ KeyspaceMetadata meta = KeyspaceMetadata.create("Keyspace1", KeyspaceParams.create(false, configOptions))[ FD ]
Line_15 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_21 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("D"), new StringToken("A")))[ FD ]
Line_2 $$ public void testPrimaryRangesWithNetworkTopologyStrategyOneDCOnly() throws Exception -->Line_19 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))[ CD ]
Line_19 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_22 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("A"), new StringToken("B")))[ FD ]
