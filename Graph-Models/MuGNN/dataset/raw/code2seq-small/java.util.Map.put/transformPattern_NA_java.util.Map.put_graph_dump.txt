Line_3 $$ Map<String, String> macros = new HashMap<String, String>()-->Line_18 $$ macros.put("module.name", moduleQName.toString())[ FD ]
Line_2 $$ private static String transformPattern(@NotNull String urlPattern, QualifiedName moduleQName, @Nullable PsiNamedElement element, String pyVersion) -->Line_4 $$ macros.put("element.name", element == null ? null : element.getName())[ CD ]
Line_3 $$ Map<String, String> macros = new HashMap<String, String>()-->Line_17 $$ macros.put("function.name", element instanceof PyFunction ? element.getName() : "")[ FD ]
Line_2 $$ private static String transformPattern(@NotNull String urlPattern, QualifiedName moduleQName, @Nullable PsiNamedElement element, String pyVersion) -->Line_18 $$ macros.put("module.name", moduleQName.toString())[ FD ]
Line_2 $$ private static String transformPattern(@NotNull String urlPattern, QualifiedName moduleQName, @Nullable PsiNamedElement element, String pyVersion) -->Line_6 $$ macros.put("class.name", pyClass == null ? null : pyClass.getName())[ CD ]
Line_3 $$ Map<String, String> macros = new HashMap<String, String>()-->Line_19 $$ macros.put("python.version", pyVersion)[ FD ]
Line_2 $$ private static String transformPattern(@NotNull String urlPattern, QualifiedName moduleQName, @Nullable PsiNamedElement element, String pyVersion) -->Line_12 $$ qName.append(element.getName())[ FD ]
Line_2 $$ private static String transformPattern(@NotNull String urlPattern, QualifiedName moduleQName, @Nullable PsiNamedElement element, String pyVersion) -->Line_4 $$ macros.put("element.name", element == null ? null : element.getName())[ FD ]
Line_2 $$ private static String transformPattern(@NotNull String urlPattern, QualifiedName moduleQName, @Nullable PsiNamedElement element, String pyVersion) -->Line_5 $$ PyClass pyClass = element == null ? null : PsiTreeUtil.getParentOfType(element, PyClass.class, false)[ CD ]
Line_2 $$ private static String transformPattern(@NotNull String urlPattern, QualifiedName moduleQName, @Nullable PsiNamedElement element, String pyVersion) -->Line_19 $$ macros.put("python.version", pyVersion)[ CD ]
Line_2 $$ private static String transformPattern(@NotNull String urlPattern, QualifiedName moduleQName, @Nullable PsiNamedElement element, String pyVersion) -->Line_7 $$ if (element != null) [ CD ]
Line_8 $$ StringBuilder qName = new StringBuilder(moduleQName.toString()).append(".")-->Line_12 $$ qName.append(element.getName())[ FD ]
Line_5 $$ PyClass pyClass = element == null ? null : PsiTreeUtil.getParentOfType(element, PyClass.class, false)-->Line_6 $$ macros.put("class.name", pyClass == null ? null : pyClass.getName())[ FD ]
Line_2 $$ private static String transformPattern(@NotNull String urlPattern, QualifiedName moduleQName, @Nullable PsiNamedElement element, String pyVersion) -->Line_17 $$ macros.put("function.name", element instanceof PyFunction ? element.getName() : "")[ FD ]
Line_2 $$ private static String transformPattern(@NotNull String urlPattern, QualifiedName moduleQName, @Nullable PsiNamedElement element, String pyVersion) -->Line_3 $$ Map<String, String> macros = new HashMap<String, String>()[ CD ]
Line_2 $$ private static String transformPattern(@NotNull String urlPattern, QualifiedName moduleQName, @Nullable PsiNamedElement element, String pyVersion) -->Line_19 $$ macros.put("python.version", pyVersion)[ FD ]
Line_2 $$ private static String transformPattern(@NotNull String urlPattern, QualifiedName moduleQName, @Nullable PsiNamedElement element, String pyVersion) -->Line_18 $$ macros.put("module.name", moduleQName.toString())[ CD ]
Line_3 $$ Map<String, String> macros = new HashMap<String, String>()-->Line_4 $$ macros.put("element.name", element == null ? null : element.getName())[ FD ]
Line_8 $$ StringBuilder qName = new StringBuilder(moduleQName.toString()).append(".")-->Line_10 $$ qName.append(((PyFunction) element).getContainingClass().getName()).append(".")[ FD ]
Line_7 $$ if (element != null) -->Line_9 $$ if (element instanceof PyFunction && ((PyFunction) element).getContainingClass() != null) [ CD ]
Line_2 $$ private static String transformPattern(@NotNull String urlPattern, QualifiedName moduleQName, @Nullable PsiNamedElement element, String pyVersion) -->Line_20 $$ final String pattern = transformPattern(urlPattern, macros)[ FD ]
Line_7 $$ if (element != null) -->Line_13 $$ macros.put("element.qname", qName.toString())[ CD ]
Line_2 $$ private static String transformPattern(@NotNull String urlPattern, QualifiedName moduleQName, @Nullable PsiNamedElement element, String pyVersion) -->Line_22 $$ return rootForPattern(urlPattern)[ FD ]
Line_20 $$ final String pattern = transformPattern(urlPattern, macros)-->Line_21 $$ if (pattern == null) [ FD ]
Line_8 $$ StringBuilder qName = new StringBuilder(moduleQName.toString()).append(".")-->Line_13 $$ macros.put("element.qname", qName.toString())[ FD ]
Line_3 $$ Map<String, String> macros = new HashMap<String, String>()-->Line_6 $$ macros.put("class.name", pyClass == null ? null : pyClass.getName())[ FD ]
Line_7 $$ if (element != null) -->Line_8 $$ StringBuilder qName = new StringBuilder(moduleQName.toString()).append(".")[ CD ]
Line_2 $$ private static String transformPattern(@NotNull String urlPattern, QualifiedName moduleQName, @Nullable PsiNamedElement element, String pyVersion) -->Line_20 $$ final String pattern = transformPattern(urlPattern, macros)[ CD ]
Line_3 $$ Map<String, String> macros = new HashMap<String, String>()-->Line_13 $$ macros.put("element.qname", qName.toString())[ FD ]
Line_7 $$ if (element != null) -->Line_12 $$ qName.append(element.getName())[ CD ]
Line_2 $$ private static String transformPattern(@NotNull String urlPattern, QualifiedName moduleQName, @Nullable PsiNamedElement element, String pyVersion) -->Line_8 $$ StringBuilder qName = new StringBuilder(moduleQName.toString()).append(".")[ FD ]
Line_3 $$ Map<String, String> macros = new HashMap<String, String>()-->Line_20 $$ final String pattern = transformPattern(urlPattern, macros)[ FD ]
Line_2 $$ private static String transformPattern(@NotNull String urlPattern, QualifiedName moduleQName, @Nullable PsiNamedElement element, String pyVersion) -->Line_5 $$ PyClass pyClass = element == null ? null : PsiTreeUtil.getParentOfType(element, PyClass.class, false)[ FD ]
Line_2 $$ private static String transformPattern(@NotNull String urlPattern, QualifiedName moduleQName, @Nullable PsiNamedElement element, String pyVersion) -->Line_24 $$ return pattern[ CD ]
Line_3 $$ Map<String, String> macros = new HashMap<String, String>()-->Line_15 $$ macros.put("element.qname", "")[ FD ]
Line_2 $$ private static String transformPattern(@NotNull String urlPattern, QualifiedName moduleQName, @Nullable PsiNamedElement element, String pyVersion) -->Line_7 $$ if (element != null) [ FD ]
Line_7 $$ if (element != null) -->Line_15 $$ macros.put("element.qname", "")[ CD ]
Line_2 $$ private static String transformPattern(@NotNull String urlPattern, QualifiedName moduleQName, @Nullable PsiNamedElement element, String pyVersion) -->Line_21 $$ if (pattern == null) [ CD ]
Line_21 $$ if (pattern == null) -->Line_22 $$ return rootForPattern(urlPattern)[ CD ]
Line_9 $$ if (element instanceof PyFunction && ((PyFunction) element).getContainingClass() != null) -->Line_10 $$ qName.append(((PyFunction) element).getContainingClass().getName()).append(".")[ CD ]
Line_2 $$ private static String transformPattern(@NotNull String urlPattern, QualifiedName moduleQName, @Nullable PsiNamedElement element, String pyVersion) -->Line_17 $$ macros.put("function.name", element instanceof PyFunction ? element.getName() : "")[ CD ]
