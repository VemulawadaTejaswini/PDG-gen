Line_2 $$ static Map<String, String> getSaslProperties(Configuration conf) -->Line_4 $$ String[] qop = conf.getStrings(HADOOP_RPC_PROTECTION_NON_WHITELIST, QualityOfProtection.PRIVACY.toString())[ FD ]
Line_3 $$ Map<String, String> saslProps = new TreeMap<String, String>()-->Line_9 $$ saslProps.put(Sasl.SERVER_AUTH, "true")[ FD ]
Line_2 $$ static Map<String, String> getSaslProperties(Configuration conf) -->Line_10 $$ return saslProps[ CD ]
Line_3 $$ Map<String, String> saslProps = new TreeMap<String, String>()-->Line_8 $$ saslProps.put(Sasl.QOP, StringUtils.join(",", qop))[ FD ]
Line_2 $$ static Map<String, String> getSaslProperties(Configuration conf) -->Line_4 $$ String[] qop = conf.getStrings(HADOOP_RPC_PROTECTION_NON_WHITELIST, QualityOfProtection.PRIVACY.toString())[ CD ]
Line_2 $$ static Map<String, String> getSaslProperties(Configuration conf) -->Line_5 $$ for (int i = 0; i < qop.length; i++) [ CD ]
Line_2 $$ static Map<String, String> getSaslProperties(Configuration conf) -->Line_8 $$ saslProps.put(Sasl.QOP, StringUtils.join(",", qop))[ CD ]
Line_2 $$ static Map<String, String> getSaslProperties(Configuration conf) -->Line_3 $$ Map<String, String> saslProps = new TreeMap<String, String>()[ CD ]
Line_4 $$ String[] qop = conf.getStrings(HADOOP_RPC_PROTECTION_NON_WHITELIST, QualityOfProtection.PRIVACY.toString())-->Line_8 $$ saslProps.put(Sasl.QOP, StringUtils.join(",", qop))[ FD ]
Line_5 $$ for (int i = 0; i < qop.length; i++) -->Line_6 $$ qop[i] = QualityOfProtection.valueOf(qop[i].toUpperCase()).getSaslQop()[ CD ]
Line_2 $$ static Map<String, String> getSaslProperties(Configuration conf) -->Line_9 $$ saslProps.put(Sasl.SERVER_AUTH, "true")[ CD ]
