Line_26 $$ if (binPath.isDirectory() && libPath.isDirectory()) -->Line_39 $$ includePaths.put(architecture, includePath)[ CD ]
Line_4 $$ Map<Architecture, List<File>> paths = new HashMap<Architecture, List<File>>()-->Line_41 $$ paths.put(architecture, pathsList)[ FD ]
Line_2 $$ private VisualCppInstall buildVisualCppInstall(String name, File vsPath, File basePath, VersionNumber version) -->Line_75 $$ return new VisualCppInstall(name, version, paths, binaryPaths, libraryPaths, includePaths, assemblerFilenames, definitions)[ CD ]
Line_17 $$ if (isNativeAmd64) -->Line_20 $$ String[] libPaths = [ CD ]
Line_54 $$ File libPath = new File(basePath, libPaths[i])-->Line_55 $$ if (binPath.isDirectory() && libPath.isDirectory()) [ FD ]
Line_31 $$ if (architecture != amd64) -->Line_32 $$ pathsList.add(new File(basePath, binPaths[0]))[ CD ]
Line_2 $$ private VisualCppInstall buildVisualCppInstall(String name, File vsPath, File basePath, VersionNumber version) -->Line_3 $$ boolean isNativeAmd64 = systemInfo.getArchitecture() == SystemInfo.Architecture.amd64[ CD ]
Line_23 $$ Architecture architecture = architectures[i]-->Line_40 $$ assemblerFilenames.put(architecture, asmFilenames[i])[ FD ]
Line_60 $$ if (architecture != x86) -->Line_61 $$ pathsList.add(new File(basePath, binPaths[0]))[ CD ]
Line_12 $$ Architecture arm = Architectures.forInput(ARCHITECTURE_ARM)-->Line_63 $$ if (architecture == arm) [ FD ]
Line_16 $$ File commonIde = new File(vsPath, PATH_COMMONIDE)-->Line_30 $$ pathsList.add(commonIde)[ FD ]
Line_55 $$ if (binPath.isDirectory() && libPath.isDirectory()) -->Line_71 $$ definitions.put(architecture, definitionsList)[ CD ]
Line_17 $$ if (isNativeAmd64) -->Line_18 $$ Architecture[] architectures = [ CD ]
Line_2 $$ private VisualCppInstall buildVisualCppInstall(String name, File vsPath, File basePath, VersionNumber version) -->Line_12 $$ Architecture arm = Architectures.forInput(ARCHITECTURE_ARM)[ CD ]
Line_17 $$ if (isNativeAmd64) -->Line_21 $$ String[] asmFilenames = [ CD ]
Line_24 $$ File binPath = new File(basePath, binPaths[i])-->Line_66 $$ binaryPaths.put(architecture, binPath)[ FD ]
Line_6 $$ Map<Architecture, File> libraryPaths = new HashMap<Architecture, File>()-->Line_38 $$ libraryPaths.put(architecture, libPath)[ FD ]
Line_55 $$ if (binPath.isDirectory() && libPath.isDirectory()) -->Line_70 $$ paths.put(architecture, pathsList)[ CD ]
Line_23 $$ Architecture architecture = architectures[i]-->Line_60 $$ if (architecture != x86) [ FD ]
Line_23 $$ Architecture architecture = architectures[i]-->Line_38 $$ libraryPaths.put(architecture, libPath)[ FD ]
Line_53 $$ File binPath = new File(basePath, binPaths[i])-->Line_66 $$ binaryPaths.put(architecture, binPath)[ FD ]
Line_51 $$ Architecture architecture = architectures[i]-->Line_71 $$ definitions.put(architecture, definitionsList)[ FD ]
Line_8 $$ Map<Architecture, String> assemblerFilenames = new HashMap<Architecture, String>()-->Line_69 $$ assemblerFilenames.put(architecture, asmFilenames[i])[ FD ]
Line_52 $$ if (!binaryPaths.containsKey(architecture)) -->Line_54 $$ File libPath = new File(basePath, libPaths[i])[ CD ]
Line_5 $$ Map<Architecture, File> binaryPaths = new HashMap<Architecture, File>()-->Line_37 $$ binaryPaths.put(architecture, binPath)[ FD ]
Line_57 $$ List<File> pathsList = new ArrayList<File>()-->Line_70 $$ paths.put(architecture, pathsList)[ FD ]
Line_56 $$ Map<String, String> definitionsList = new LinkedHashMap<String, String>()-->Line_64 $$ definitionsList.put(DEFINE_ARMPARTITIONAVAILABLE, "1")[ FD ]
Line_17 $$ if (isNativeAmd64) -->Line_22 $$ for (int i = 0; i != architectures.length; ++i) [ CD ]
Line_22 $$ for (int i = 0; i != architectures.length; ++i) -->Line_25 $$ File libPath = new File(basePath, libPaths[i])[ CD ]
Line_7 $$ Map<Architecture, File> includePaths = new HashMap<Architecture, File>()-->Line_39 $$ includePaths.put(architecture, includePath)[ FD ]
Line_2 $$ private VisualCppInstall buildVisualCppInstall(String name, File vsPath, File basePath, VersionNumber version) -->Line_50 $$ for (int i = 0; i != architectures.length; ++i) [ CD ]
Line_2 $$ private VisualCppInstall buildVisualCppInstall(String name, File vsPath, File basePath, VersionNumber version) -->Line_17 $$ if (isNativeAmd64) [ CD ]
Line_25 $$ File libPath = new File(basePath, libPaths[i])-->Line_38 $$ libraryPaths.put(architecture, libPath)[ FD ]
Line_51 $$ Architecture architecture = architectures[i]-->Line_67 $$ libraryPaths.put(architecture, libPath)[ FD ]
Line_56 $$ Map<String, String> definitionsList = new LinkedHashMap<String, String>()-->Line_71 $$ definitions.put(architecture, definitionsList)[ FD ]
Line_23 $$ Architecture architecture = architectures[i]-->Line_31 $$ if (architecture != amd64) [ FD ]
Line_28 $$ List<File> pathsList = new ArrayList<File>()-->Line_41 $$ paths.put(architecture, pathsList)[ FD ]
Line_9 $$ Map<Architecture, Map<String, String>> definitions = new HashMap<Architecture, Map<String, String>>()-->Line_71 $$ definitions.put(architecture, definitionsList)[ FD ]
Line_23 $$ Architecture architecture = architectures[i]-->Line_34 $$ if (architecture == arm) [ FD ]
Line_34 $$ if (architecture == arm) -->Line_35 $$ definitionsList.put(DEFINE_ARMPARTITIONAVAILABLE, "1")[ CD ]
Line_2 $$ private VisualCppInstall buildVisualCppInstall(String name, File vsPath, File basePath, VersionNumber version) -->Line_9 $$ Map<Architecture, Map<String, String>> definitions = new HashMap<Architecture, Map<String, String>>()[ CD ]
Line_52 $$ if (!binaryPaths.containsKey(architecture)) -->Line_53 $$ File binPath = new File(basePath, binPaths[i])[ CD ]
Line_2 $$ private VisualCppInstall buildVisualCppInstall(String name, File vsPath, File basePath, VersionNumber version) -->Line_13 $$ Architecture ia64 = Architectures.forInput(ARCHITECTURE_IA64)[ CD ]
Line_57 $$ List<File> pathsList = new ArrayList<File>()-->Line_61 $$ pathsList.add(new File(basePath, binPaths[0]))[ FD ]
Line_27 $$ Map<String, String> definitionsList = new LinkedHashMap<String, String>()-->Line_71 $$ definitions.put(architecture, definitionsList)[ FD ]
Line_15 $$ File commonTools = new File(vsPath, PATH_COMMONTOOLS)-->Line_58 $$ pathsList.add(commonTools)[ FD ]
Line_4 $$ Map<Architecture, List<File>> paths = new HashMap<Architecture, List<File>>()-->Line_70 $$ paths.put(architecture, pathsList)[ FD ]
Line_24 $$ File binPath = new File(basePath, binPaths[i])-->Line_26 $$ if (binPath.isDirectory() && libPath.isDirectory()) [ FD ]
Line_26 $$ if (binPath.isDirectory() && libPath.isDirectory()) -->Line_42 $$ definitions.put(architecture, definitionsList)[ CD ]
Line_57 $$ List<File> pathsList = new ArrayList<File>()-->Line_59 $$ pathsList.add(commonIde)[ FD ]
Line_55 $$ if (binPath.isDirectory() && libPath.isDirectory()) -->Line_60 $$ if (architecture != x86) [ CD ]
Line_2 $$ private VisualCppInstall buildVisualCppInstall(String name, File vsPath, File basePath, VersionNumber version) -->Line_10 $$ Architecture amd64 = Architectures.forInput(ARCHITECTURE_AMD64)[ CD ]
Line_14 $$ File includePath = new File(basePath, PATH_INCLUDE)-->Line_68 $$ includePaths.put(architecture, includePath)[ FD ]
Line_28 $$ List<File> pathsList = new ArrayList<File>()-->Line_58 $$ pathsList.add(commonTools)[ FD ]
Line_26 $$ if (binPath.isDirectory() && libPath.isDirectory()) -->Line_41 $$ paths.put(architecture, pathsList)[ CD ]
Line_23 $$ Architecture architecture = architectures[i]-->Line_70 $$ paths.put(architecture, pathsList)[ FD ]
Line_2 $$ private VisualCppInstall buildVisualCppInstall(String name, File vsPath, File basePath, VersionNumber version) -->Line_14 $$ File includePath = new File(basePath, PATH_INCLUDE)[ CD ]
Line_23 $$ Architecture architecture = architectures[i]-->Line_71 $$ definitions.put(architecture, definitionsList)[ FD ]
Line_51 $$ Architecture architecture = architectures[i]-->Line_52 $$ if (!binaryPaths.containsKey(architecture)) [ FD ]
Line_28 $$ List<File> pathsList = new ArrayList<File>()-->Line_29 $$ pathsList.add(commonTools)[ FD ]
Line_55 $$ if (binPath.isDirectory() && libPath.isDirectory()) -->Line_58 $$ pathsList.add(commonTools)[ CD ]
Line_51 $$ Architecture architecture = architectures[i]-->Line_63 $$ if (architecture == arm) [ FD ]
Line_55 $$ if (binPath.isDirectory() && libPath.isDirectory()) -->Line_57 $$ List<File> pathsList = new ArrayList<File>()[ CD ]
Line_26 $$ if (binPath.isDirectory() && libPath.isDirectory()) -->Line_29 $$ pathsList.add(commonTools)[ CD ]
Line_26 $$ if (binPath.isDirectory() && libPath.isDirectory()) -->Line_34 $$ if (architecture == arm) [ CD ]
Line_25 $$ File libPath = new File(basePath, libPaths[i])-->Line_55 $$ if (binPath.isDirectory() && libPath.isDirectory()) [ FD ]
Line_51 $$ Architecture architecture = architectures[i]-->Line_66 $$ binaryPaths.put(architecture, binPath)[ FD ]
Line_26 $$ if (binPath.isDirectory() && libPath.isDirectory()) -->Line_30 $$ pathsList.add(commonIde)[ CD ]
Line_53 $$ File binPath = new File(basePath, binPaths[i])-->Line_55 $$ if (binPath.isDirectory() && libPath.isDirectory()) [ FD ]
Line_26 $$ if (binPath.isDirectory() && libPath.isDirectory()) -->Line_40 $$ assemblerFilenames.put(architecture, asmFilenames[i])[ CD ]
Line_28 $$ List<File> pathsList = new ArrayList<File>()-->Line_59 $$ pathsList.add(commonIde)[ FD ]
Line_55 $$ if (binPath.isDirectory() && libPath.isDirectory()) -->Line_59 $$ pathsList.add(commonIde)[ CD ]
Line_25 $$ File libPath = new File(basePath, libPaths[i])-->Line_67 $$ libraryPaths.put(architecture, libPath)[ FD ]
Line_52 $$ if (!binaryPaths.containsKey(architecture)) -->Line_55 $$ if (binPath.isDirectory() && libPath.isDirectory()) [ CD ]
Line_55 $$ if (binPath.isDirectory() && libPath.isDirectory()) -->Line_67 $$ libraryPaths.put(architecture, libPath)[ CD ]
Line_55 $$ if (binPath.isDirectory() && libPath.isDirectory()) -->Line_69 $$ assemblerFilenames.put(architecture, asmFilenames[i])[ CD ]
Line_14 $$ File includePath = new File(basePath, PATH_INCLUDE)-->Line_39 $$ includePaths.put(architecture, includePath)[ FD ]
Line_2 $$ private VisualCppInstall buildVisualCppInstall(String name, File vsPath, File basePath, VersionNumber version) -->Line_11 $$ Architecture x86 = Architectures.forInput(ARCHITECTURE_X86)[ CD ]
Line_16 $$ File commonIde = new File(vsPath, PATH_COMMONIDE)-->Line_59 $$ pathsList.add(commonIde)[ FD ]
Line_2 $$ private VisualCppInstall buildVisualCppInstall(String name, File vsPath, File basePath, VersionNumber version) -->Line_8 $$ Map<Architecture, String> assemblerFilenames = new HashMap<Architecture, String>()[ CD ]
Line_12 $$ Architecture arm = Architectures.forInput(ARCHITECTURE_ARM)-->Line_34 $$ if (architecture == arm) [ FD ]
Line_23 $$ Architecture architecture = architectures[i]-->Line_37 $$ binaryPaths.put(architecture, binPath)[ FD ]
Line_27 $$ Map<String, String> definitionsList = new LinkedHashMap<String, String>()-->Line_42 $$ definitions.put(architecture, definitionsList)[ FD ]
Line_55 $$ if (binPath.isDirectory() && libPath.isDirectory()) -->Line_56 $$ Map<String, String> definitionsList = new LinkedHashMap<String, String>()[ CD ]
Line_51 $$ Architecture architecture = architectures[i]-->Line_60 $$ if (architecture != x86) [ FD ]
Line_15 $$ File commonTools = new File(vsPath, PATH_COMMONTOOLS)-->Line_29 $$ pathsList.add(commonTools)[ FD ]
Line_23 $$ Architecture architecture = architectures[i]-->Line_63 $$ if (architecture == arm) [ FD ]
Line_51 $$ Architecture architecture = architectures[i]-->Line_70 $$ paths.put(architecture, pathsList)[ FD ]
Line_22 $$ for (int i = 0; i != architectures.length; ++i) -->Line_24 $$ File binPath = new File(basePath, binPaths[i])[ CD ]
Line_2 $$ private VisualCppInstall buildVisualCppInstall(String name, File vsPath, File basePath, VersionNumber version) -->Line_7 $$ Map<Architecture, File> includePaths = new HashMap<Architecture, File>()[ CD ]
Line_26 $$ if (binPath.isDirectory() && libPath.isDirectory()) -->Line_38 $$ libraryPaths.put(architecture, libPath)[ CD ]
Line_50 $$ for (int i = 0; i != architectures.length; ++i) -->Line_51 $$ Architecture architecture = architectures[i][ CD ]
Line_5 $$ Map<Architecture, File> binaryPaths = new HashMap<Architecture, File>()-->Line_52 $$ if (!binaryPaths.containsKey(architecture)) [ FD ]
Line_2 $$ private VisualCppInstall buildVisualCppInstall(String name, File vsPath, File basePath, VersionNumber version) -->Line_4 $$ Map<Architecture, List<File>> paths = new HashMap<Architecture, List<File>>()[ CD ]
Line_55 $$ if (binPath.isDirectory() && libPath.isDirectory()) -->Line_66 $$ binaryPaths.put(architecture, binPath)[ CD ]
Line_28 $$ List<File> pathsList = new ArrayList<File>()-->Line_70 $$ paths.put(architecture, pathsList)[ FD ]
Line_23 $$ Architecture architecture = architectures[i]-->Line_66 $$ binaryPaths.put(architecture, binPath)[ FD ]
Line_22 $$ for (int i = 0; i != architectures.length; ++i) -->Line_50 $$ for (int i = 0; i != architectures.length; ++i) [ FD ]
Line_55 $$ if (binPath.isDirectory() && libPath.isDirectory()) -->Line_63 $$ if (architecture == arm) [ CD ]
Line_2 $$ private VisualCppInstall buildVisualCppInstall(String name, File vsPath, File basePath, VersionNumber version) -->Line_15 $$ File commonTools = new File(vsPath, PATH_COMMONTOOLS)[ CD ]
Line_50 $$ for (int i = 0; i != architectures.length; ++i) -->Line_52 $$ if (!binaryPaths.containsKey(architecture)) [ CD ]
Line_28 $$ List<File> pathsList = new ArrayList<File>()-->Line_30 $$ pathsList.add(commonIde)[ FD ]
Line_24 $$ File binPath = new File(basePath, binPaths[i])-->Line_37 $$ binaryPaths.put(architecture, binPath)[ FD ]
Line_28 $$ List<File> pathsList = new ArrayList<File>()-->Line_61 $$ pathsList.add(new File(basePath, binPaths[0]))[ FD ]
Line_27 $$ Map<String, String> definitionsList = new LinkedHashMap<String, String>()-->Line_64 $$ definitionsList.put(DEFINE_ARMPARTITIONAVAILABLE, "1")[ FD ]
Line_51 $$ Architecture architecture = architectures[i]-->Line_68 $$ includePaths.put(architecture, includePath)[ FD ]
Line_7 $$ Map<Architecture, File> includePaths = new HashMap<Architecture, File>()-->Line_68 $$ includePaths.put(architecture, includePath)[ FD ]
Line_26 $$ if (binPath.isDirectory() && libPath.isDirectory()) -->Line_31 $$ if (architecture != amd64) [ CD ]
Line_28 $$ List<File> pathsList = new ArrayList<File>()-->Line_32 $$ pathsList.add(new File(basePath, binPaths[0]))[ FD ]
Line_23 $$ Architecture architecture = architectures[i]-->Line_67 $$ libraryPaths.put(architecture, libPath)[ FD ]
Line_23 $$ Architecture architecture = architectures[i]-->Line_68 $$ includePaths.put(architecture, includePath)[ FD ]
Line_22 $$ for (int i = 0; i != architectures.length; ++i) -->Line_23 $$ Architecture architecture = architectures[i][ CD ]
Line_2 $$ private VisualCppInstall buildVisualCppInstall(String name, File vsPath, File basePath, VersionNumber version) -->Line_6 $$ Map<Architecture, File> libraryPaths = new HashMap<Architecture, File>()[ CD ]
Line_17 $$ if (isNativeAmd64) -->Line_19 $$ String[] binPaths = [ CD ]
Line_26 $$ if (binPath.isDirectory() && libPath.isDirectory()) -->Line_28 $$ List<File> pathsList = new ArrayList<File>()[ CD ]
Line_2 $$ private VisualCppInstall buildVisualCppInstall(String name, File vsPath, File basePath, VersionNumber version) -->Line_5 $$ Map<Architecture, File> binaryPaths = new HashMap<Architecture, File>()[ CD ]
Line_27 $$ Map<String, String> definitionsList = new LinkedHashMap<String, String>()-->Line_35 $$ definitionsList.put(DEFINE_ARMPARTITIONAVAILABLE, "1")[ FD ]
Line_23 $$ Architecture architecture = architectures[i]-->Line_41 $$ paths.put(architecture, pathsList)[ FD ]
Line_26 $$ if (binPath.isDirectory() && libPath.isDirectory()) -->Line_37 $$ binaryPaths.put(architecture, binPath)[ CD ]
Line_55 $$ if (binPath.isDirectory() && libPath.isDirectory()) -->Line_68 $$ includePaths.put(architecture, includePath)[ CD ]
Line_23 $$ Architecture architecture = architectures[i]-->Line_69 $$ assemblerFilenames.put(architecture, asmFilenames[i])[ FD ]
Line_9 $$ Map<Architecture, Map<String, String>> definitions = new HashMap<Architecture, Map<String, String>>()-->Line_42 $$ definitions.put(architecture, definitionsList)[ FD ]
Line_6 $$ Map<Architecture, File> libraryPaths = new HashMap<Architecture, File>()-->Line_67 $$ libraryPaths.put(architecture, libPath)[ FD ]
Line_10 $$ Architecture amd64 = Architectures.forInput(ARCHITECTURE_AMD64)-->Line_31 $$ if (architecture != amd64) [ FD ]
Line_8 $$ Map<Architecture, String> assemblerFilenames = new HashMap<Architecture, String>()-->Line_40 $$ assemblerFilenames.put(architecture, asmFilenames[i])[ FD ]
Line_57 $$ List<File> pathsList = new ArrayList<File>()-->Line_58 $$ pathsList.add(commonTools)[ FD ]
Line_51 $$ Architecture architecture = architectures[i]-->Line_69 $$ assemblerFilenames.put(architecture, asmFilenames[i])[ FD ]
Line_2 $$ private VisualCppInstall buildVisualCppInstall(String name, File vsPath, File basePath, VersionNumber version) -->Line_16 $$ File commonIde = new File(vsPath, PATH_COMMONIDE)[ CD ]
Line_25 $$ File libPath = new File(basePath, libPaths[i])-->Line_26 $$ if (binPath.isDirectory() && libPath.isDirectory()) [ FD ]
Line_23 $$ Architecture architecture = architectures[i]-->Line_42 $$ definitions.put(architecture, definitionsList)[ FD ]
Line_23 $$ Architecture architecture = architectures[i]-->Line_39 $$ includePaths.put(architecture, includePath)[ FD ]
Line_54 $$ File libPath = new File(basePath, libPaths[i])-->Line_67 $$ libraryPaths.put(architecture, libPath)[ FD ]
Line_11 $$ Architecture x86 = Architectures.forInput(ARCHITECTURE_X86)-->Line_60 $$ if (architecture != x86) [ FD ]
Line_63 $$ if (architecture == arm) -->Line_64 $$ definitionsList.put(DEFINE_ARMPARTITIONAVAILABLE, "1")[ CD ]
Line_5 $$ Map<Architecture, File> binaryPaths = new HashMap<Architecture, File>()-->Line_66 $$ binaryPaths.put(architecture, binPath)[ FD ]
Line_23 $$ Architecture architecture = architectures[i]-->Line_52 $$ if (!binaryPaths.containsKey(architecture)) [ FD ]
Line_24 $$ File binPath = new File(basePath, binPaths[i])-->Line_55 $$ if (binPath.isDirectory() && libPath.isDirectory()) [ FD ]
Line_26 $$ if (binPath.isDirectory() && libPath.isDirectory()) -->Line_27 $$ Map<String, String> definitionsList = new LinkedHashMap<String, String>()[ CD ]
Line_22 $$ for (int i = 0; i != architectures.length; ++i) -->Line_26 $$ if (binPath.isDirectory() && libPath.isDirectory()) [ CD ]
