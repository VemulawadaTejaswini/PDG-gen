Line_2 $$ public void resolveHeaders(String content, @Headers Map<String, Object> headers) -->Line_4 $$ assertEquals("Wrong payload resolution", "my payload", content)[ FD ]
Line_2 $$ public void resolveHeaders(String content, @Headers Map<String, Object> headers) -->Line_7 $$ assertEquals("Missing custom header", 1234, headers.get("customInt"))[ CD ]
Line_2 $$ public void resolveHeaders(String content, @Headers Map<String, Object> headers) -->Line_6 $$ assertEquals("Missing JMS message id header", "abcd-1234", headers.get(JmsHeaders.MESSAGE_ID))[ FD ]
Line_2 $$ public void resolveHeaders(String content, @Headers Map<String, Object> headers) -->Line_5 $$ assertNotNull("headers not injected", headers)[ CD ]
Line_2 $$ public void resolveHeaders(String content, @Headers Map<String, Object> headers) -->Line_7 $$ assertEquals("Missing custom header", 1234, headers.get("customInt"))[ FD ]
Line_2 $$ public void resolveHeaders(String content, @Headers Map<String, Object> headers) -->Line_3 $$ invocations.put("resolveHeaders", true)[ CD ]
Line_2 $$ public void resolveHeaders(String content, @Headers Map<String, Object> headers) -->Line_6 $$ assertEquals("Missing JMS message id header", "abcd-1234", headers.get(JmsHeaders.MESSAGE_ID))[ CD ]
Line_2 $$ public void resolveHeaders(String content, @Headers Map<String, Object> headers) -->Line_4 $$ assertEquals("Wrong payload resolution", "my payload", content)[ CD ]
Line_2 $$ public void resolveHeaders(String content, @Headers Map<String, Object> headers) -->Line_5 $$ assertNotNull("headers not injected", headers)[ FD ]
