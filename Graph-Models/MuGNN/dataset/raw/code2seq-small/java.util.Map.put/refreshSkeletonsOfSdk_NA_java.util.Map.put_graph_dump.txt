Line_31 $$ module_errors += errors.get(sdk_name).size()-->Line_34 $$ message = PyBundle.message("sdk.errorlog.$0.mods.fail.in.$1.sdks.$2.completely", module_errors, errors.size(), failedSdks.size())[ FD ]
Line_3 $$ final Map<String, List<String>> errors = new TreeMap<String, List<String>>()-->Line_29 $$ if (failedSdks.size() > 0 || errors.size() > 0) [ FD ]
Line_3 $$ final Map<String, List<String>> errors = new TreeMap<String, List<String>>()-->Line_20 $$ errors.put(sdkName, sdkErrors)[ FD ]
Line_30 $$ int module_errors = 0-->Line_31 $$ module_errors += errors.get(sdk_name).size()[ FD ]
Line_18 $$ List<String> knownErrors = errors.get(sdkName)-->Line_22 $$ knownErrors.addAll(sdkErrors)[ FD ]
Line_19 $$ if (knownErrors == null) -->Line_20 $$ errors.put(sdkName, sdkErrors)[ CD ]
Line_17 $$ String sdkName = sdk.getName()-->Line_18 $$ List<String> knownErrors = errors.get(sdkName)[ FD ]
Line_29 $$ if (failedSdks.size() > 0 || errors.size() > 0) -->Line_32 $$ String message[ CD ]
Line_34 $$ message = PyBundle.message("sdk.errorlog.$0.mods.fail.in.$1.sdks.$2.completely", module_errors, errors.size(), failedSdks.size())-->Line_36 $$ message = PyBundle.message("sdk.errorlog.$0.mods.fail.in.$1.sdks", module_errors, errors.size())[ FD ]
Line_3 $$ final Map<String, List<String>> errors = new TreeMap<String, List<String>>()-->Line_36 $$ message = PyBundle.message("sdk.errorlog.$0.mods.fail.in.$1.sdks", module_errors, errors.size())[ FD ]
Line_4 $$ final List<String> failedSdks = new SmartList<String>()-->Line_29 $$ if (failedSdks.size() > 0 || errors.size() > 0) [ FD ]
Line_31 $$ module_errors += errors.get(sdk_name).size()-->Line_36 $$ message = PyBundle.message("sdk.errorlog.$0.mods.fail.in.$1.sdks", module_errors, errors.size())[ FD ]
Line_2 $$ public static void refreshSkeletonsOfSdk(@Nullable Project project, Component ownerComponent, String skeletonsPath, @NotNull Sdk sdk) throws InvalidSdkException -->Line_3 $$ final Map<String, List<String>> errors = new TreeMap<String, List<String>>()[ CD ]
Line_7 $$ if (skeletonsPath == null) -->Line_8 $$ LOG.info("Could not find skeletons path for SDK path " + homePath)[ CD ]
Line_3 $$ final Map<String, List<String>> errors = new TreeMap<String, List<String>>()-->Line_38 $$ logErrors(errors, failedSdks, message)[ FD ]
Line_2 $$ public static void refreshSkeletonsOfSdk(@Nullable Project project, Component ownerComponent, String skeletonsPath, @NotNull Sdk sdk) throws InvalidSdkException -->Line_5 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()[ CD ]
Line_30 $$ int module_errors = 0-->Line_34 $$ message = PyBundle.message("sdk.errorlog.$0.mods.fail.in.$1.sdks.$2.completely", module_errors, errors.size(), failedSdks.size())[ FD ]
Line_2 $$ public static void refreshSkeletonsOfSdk(@Nullable Project project, Component ownerComponent, String skeletonsPath, @NotNull Sdk sdk) throws InvalidSdkException -->Line_6 $$ final String homePath = sdk.getHomePath()[ FD ]
Line_4 $$ final List<String> failedSdks = new SmartList<String>()-->Line_38 $$ logErrors(errors, failedSdks, message)[ FD ]
Line_15 $$ List<String> sdkErrors = refresher.regenerateSkeletons(checker)-->Line_20 $$ errors.put(sdkName, sdkErrors)[ FD ]
Line_32 $$ String message-->Line_36 $$ message = PyBundle.message("sdk.errorlog.$0.mods.fail.in.$1.sdks", module_errors, errors.size())[ FD ]
Line_32 $$ String message-->Line_38 $$ logErrors(errors, failedSdks, message)[ FD ]
Line_16 $$ if (sdkErrors.size() > 0) -->Line_17 $$ String sdkName = sdk.getName()[ CD ]
Line_30 $$ int module_errors = 0-->Line_36 $$ message = PyBundle.message("sdk.errorlog.$0.mods.fail.in.$1.sdks", module_errors, errors.size())[ FD ]
Line_12 $$ final PySkeletonRefresher refresher = new PySkeletonRefresher(project, ownerComponent, sdk, skeletonsPath, indicator, null)-->Line_15 $$ List<String> sdkErrors = refresher.regenerateSkeletons(checker)[ FD ]
Line_2 $$ public static void refreshSkeletonsOfSdk(@Nullable Project project, Component ownerComponent, String skeletonsPath, @NotNull Sdk sdk) throws InvalidSdkException -->Line_17 $$ String sdkName = sdk.getName()[ FD ]
Line_3 $$ final Map<String, List<String>> errors = new TreeMap<String, List<String>>()-->Line_31 $$ for (String sdk_name : errors.keySet()) module_errors += errors.get(sdk_name).size()[ FD ]
Line_32 $$ String message-->Line_34 $$ message = PyBundle.message("sdk.errorlog.$0.mods.fail.in.$1.sdks.$2.completely", module_errors, errors.size(), failedSdks.size())[ FD ]
Line_4 $$ final List<String> failedSdks = new SmartList<String>()-->Line_34 $$ message = PyBundle.message("sdk.errorlog.$0.mods.fail.in.$1.sdks.$2.completely", module_errors, errors.size(), failedSdks.size())[ FD ]
Line_7 $$ if (skeletonsPath == null) -->Line_12 $$ final PySkeletonRefresher refresher = new PySkeletonRefresher(project, ownerComponent, sdk, skeletonsPath, indicator, null)[ CD ]
Line_2 $$ public static void refreshSkeletonsOfSdk(@Nullable Project project, Component ownerComponent, String skeletonsPath, @NotNull Sdk sdk) throws InvalidSdkException -->Line_7 $$ if (skeletonsPath == null) [ FD ]
Line_3 $$ final Map<String, List<String>> errors = new TreeMap<String, List<String>>()-->Line_34 $$ message = PyBundle.message("sdk.errorlog.$0.mods.fail.in.$1.sdks.$2.completely", module_errors, errors.size(), failedSdks.size())[ FD ]
Line_3 $$ final Map<String, List<String>> errors = new TreeMap<String, List<String>>()-->Line_31 $$ module_errors += errors.get(sdk_name).size()[ FD ]
Line_2 $$ public static void refreshSkeletonsOfSdk(@Nullable Project project, Component ownerComponent, String skeletonsPath, @NotNull Sdk sdk) throws InvalidSdkException -->Line_6 $$ final String homePath = sdk.getHomePath()[ CD ]
Line_11 $$ SkeletonVersionChecker checker = new SkeletonVersionChecker(0)-->Line_15 $$ List<String> sdkErrors = refresher.regenerateSkeletons(checker)[ FD ]
Line_33 $$ if (failedSdks.size() > 0) -->Line_34 $$ message = PyBundle.message("sdk.errorlog.$0.mods.fail.in.$1.sdks.$2.completely", module_errors, errors.size(), failedSdks.size())[ CD ]
Line_2 $$ public static void refreshSkeletonsOfSdk(@Nullable Project project, Component ownerComponent, String skeletonsPath, @NotNull Sdk sdk) throws InvalidSdkException -->Line_7 $$ if (skeletonsPath == null) [ CD ]
Line_16 $$ if (sdkErrors.size() > 0) -->Line_18 $$ List<String> knownErrors = errors.get(sdkName)[ CD ]
Line_15 $$ List<String> sdkErrors = refresher.regenerateSkeletons(checker)-->Line_22 $$ knownErrors.addAll(sdkErrors)[ FD ]
Line_33 $$ if (failedSdks.size() > 0) -->Line_36 $$ message = PyBundle.message("sdk.errorlog.$0.mods.fail.in.$1.sdks", module_errors, errors.size())[ CD ]
Line_19 $$ if (knownErrors == null) -->Line_22 $$ knownErrors.addAll(sdkErrors)[ CD ]
Line_2 $$ public static void refreshSkeletonsOfSdk(@Nullable Project project, Component ownerComponent, String skeletonsPath, @NotNull Sdk sdk) throws InvalidSdkException -->Line_29 $$ if (failedSdks.size() > 0 || errors.size() > 0) [ CD ]
Line_7 $$ if (skeletonsPath == null) -->Line_10 $$ LOG.info("Refreshing skeletons for " + homePath)[ CD ]
Line_29 $$ if (failedSdks.size() > 0 || errors.size() > 0) -->Line_33 $$ if (failedSdks.size() > 0) [ CD ]
Line_3 $$ final Map<String, List<String>> errors = new TreeMap<String, List<String>>()-->Line_18 $$ List<String> knownErrors = errors.get(sdkName)[ FD ]
Line_2 $$ public static void refreshSkeletonsOfSdk(@Nullable Project project, Component ownerComponent, String skeletonsPath, @NotNull Sdk sdk) throws InvalidSdkException -->Line_4 $$ final List<String> failedSdks = new SmartList<String>()[ CD ]
Line_4 $$ final List<String> failedSdks = new SmartList<String>()-->Line_33 $$ if (failedSdks.size() > 0) [ FD ]
Line_29 $$ if (failedSdks.size() > 0 || errors.size() > 0) -->Line_38 $$ logErrors(errors, failedSdks, message)[ CD ]
Line_16 $$ if (sdkErrors.size() > 0) -->Line_19 $$ if (knownErrors == null) [ CD ]
Line_34 $$ message = PyBundle.message("sdk.errorlog.$0.mods.fail.in.$1.sdks.$2.completely", module_errors, errors.size(), failedSdks.size())-->Line_38 $$ logErrors(errors, failedSdks, message)[ FD ]
Line_29 $$ if (failedSdks.size() > 0 || errors.size() > 0) -->Line_30 $$ int module_errors = 0[ CD ]
Line_36 $$ message = PyBundle.message("sdk.errorlog.$0.mods.fail.in.$1.sdks", module_errors, errors.size())-->Line_38 $$ logErrors(errors, failedSdks, message)[ FD ]
Line_15 $$ List<String> sdkErrors = refresher.regenerateSkeletons(checker)-->Line_16 $$ if (sdkErrors.size() > 0) [ FD ]
Line_7 $$ if (skeletonsPath == null) -->Line_13 $$ changeGeneratingSkeletons(1)[ CD ]
Line_7 $$ if (skeletonsPath == null) -->Line_11 $$ SkeletonVersionChecker checker = new SkeletonVersionChecker(0)[ CD ]
Line_17 $$ String sdkName = sdk.getName()-->Line_20 $$ errors.put(sdkName, sdkErrors)[ FD ]
Line_18 $$ List<String> knownErrors = errors.get(sdkName)-->Line_19 $$ if (knownErrors == null) [ FD ]
