Line_6 $$ final File[] files = fromRoot.listFiles()-->Line_7 $$ if (files != null) [ FD ]
Line_16 $$ final HashSet<String> libraryPackages = new HashSet<String>()-->Line_23 $$ if (!libraryPackages.contains(s)) [ FD ]
Line_2 $$ private void scanRootForLibraries(File fromRoot) -->Line_6 $$ final File[] files = fromRoot.listFiles()[ CD ]
Line_16 $$ final HashSet<String> libraryPackages = new HashSet<String>()-->Line_24 $$ libraryPackages.add(myInterner.intern(s))[ FD ]
Line_2 $$ private void scanRootForLibraries(File fromRoot) -->Line_7 $$ if (files != null) [ CD ]
Line_15 $$ if (!myJarToPackagesMap.containsKey(file)) -->Line_19 $$ myProgress.setText2(file.getName())[ CD ]
Line_9 $$ for (File file : files) -->Line_17 $$ myJarToPackagesMap.put(file, libraryPackages)[ FD ]
Line_21 $$ scanLibraryForDeclaredPackages(file, new Consumer<String>() -->Line_24 $$ libraryPackages.add(myInterner.intern(s))[ FD ]
Line_15 $$ if (!myJarToPackagesMap.containsKey(file)) -->Line_17 $$ myJarToPackagesMap.put(file, libraryPackages)[ CD ]
Line_23 $$ if (!libraryPackages.contains(s)) -->Line_24 $$ libraryPackages.add(myInterner.intern(s))[ CD ]
Line_3 $$ if (myIgnoredNames.contains(fromRoot.getName())) -->Line_4 $$ return[ CD ]
Line_21 $$ scanLibraryForDeclaredPackages(file, new Consumer<String>() -->Line_23 $$ if (!libraryPackages.contains(s)) [ FD ]
Line_15 $$ if (!myJarToPackagesMap.containsKey(file)) -->Line_16 $$ final HashSet<String> libraryPackages = new HashSet<String>()[ CD ]
Line_9 $$ for (File file : files) -->Line_13 $$ final String fileName = file.getName()[ FD ]
Line_10 $$ if (file.isDirectory()) -->Line_14 $$ if (isLibraryFile(fileName)) [ CD ]
Line_9 $$ for (File file : files) -->Line_21 $$ scanLibraryForDeclaredPackages(file, new Consumer<String>() [ FD ]
Line_9 $$ for (File file : files) -->Line_11 $$ scanRootForLibraries(file)[ FD ]
Line_15 $$ if (!myJarToPackagesMap.containsKey(file)) -->Line_18 $$ myProgress.pushState()[ CD ]
Line_14 $$ if (isLibraryFile(fileName)) -->Line_15 $$ if (!myJarToPackagesMap.containsKey(file)) [ CD ]
Line_10 $$ if (file.isDirectory()) -->Line_11 $$ scanRootForLibraries(file)[ CD ]
Line_2 $$ private void scanRootForLibraries(File fromRoot) -->Line_3 $$ if (myIgnoredNames.contains(fromRoot.getName())) [ FD ]
Line_10 $$ if (file.isDirectory()) -->Line_13 $$ final String fileName = file.getName()[ CD ]
Line_16 $$ final HashSet<String> libraryPackages = new HashSet<String>()-->Line_17 $$ myJarToPackagesMap.put(file, libraryPackages)[ FD ]
Line_21 $$ scanLibraryForDeclaredPackages(file, new Consumer<String>() -->Line_23 $$ if (!libraryPackages.contains(s)) [ CD ]
Line_9 $$ for (File file : files) -->Line_15 $$ if (!myJarToPackagesMap.containsKey(file)) [ FD ]
Line_9 $$ for (File file : files) -->Line_19 $$ myProgress.setText2(file.getName())[ FD ]
Line_13 $$ final String fileName = file.getName()-->Line_14 $$ if (isLibraryFile(fileName)) [ FD ]
Line_7 $$ if (files != null) -->Line_8 $$ myProgress.checkCanceled()[ CD ]
Line_2 $$ private void scanRootForLibraries(File fromRoot) -->Line_6 $$ final File[] files = fromRoot.listFiles()[ FD ]
Line_2 $$ private void scanRootForLibraries(File fromRoot) -->Line_3 $$ if (myIgnoredNames.contains(fromRoot.getName())) [ CD ]
Line_9 $$ for (File file : files) -->Line_10 $$ if (file.isDirectory()) [ FD ]
