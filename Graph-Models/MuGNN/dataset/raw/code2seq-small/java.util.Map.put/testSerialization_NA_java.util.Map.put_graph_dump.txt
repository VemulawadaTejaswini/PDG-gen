Line_2 $$ public void testSerialization() throws ProcessException -->Line_25 $$ Assert.assertNull(copyProcessConfig.getReactClassLoader())[ CD ]
Line_21 $$ ProcessConfig copyProcessConfig = copyNettyFabricWorkerConfig.getProcessConfig()-->Line_22 $$ Assert.assertEquals(arguments, copyProcessConfig.getArguments())[ FD ]
Line_18 $$ NettyFabricWorkerConfig<String> copyNettyFabricWorkerConfig = (NettyFabricWorkerConfig<String>) SerializableUtil.deserialize(SerializableUtil.serialize(new NettyFabricWorkerConfig<String>(id, builder.build(), processCallable, inputPathMap)))-->Line_27 $$ ProcessCallable<String> copyProcessCallable = copyNettyFabricWorkerConfig.getProcessCallable()[ FD ]
Line_2 $$ public void testSerialization() throws ProcessException -->Line_11 $$ String runtimeClassPath = "runtimeClassPath"[ CD ]
Line_2 $$ public void testSerialization() throws ProcessException -->Line_28 $$ Assert.assertEquals(processCallable.call(), copyProcessCallable.call())[ CD ]
Line_2 $$ public void testSerialization() throws ProcessException -->Line_5 $$ builder.setArguments(arguments)[ CD ]
Line_15 $$ Map<Path, Path> inputPathMap = new HashMap()-->Line_16 $$ inputPathMap.put(Paths.get("path1"), Paths.get("path2"))[ FD ]
Line_8 $$ String javaExecutable = "java"-->Line_24 $$ Assert.assertEquals(javaExecutable, copyProcessConfig.getJavaExecutable())[ FD ]
Line_2 $$ public void testSerialization() throws ProcessException -->Line_15 $$ Map<Path, Path> inputPathMap = new HashMap()[ CD ]
Line_15 $$ Map<Path, Path> inputPathMap = new HashMap()-->Line_20 $$ Assert.assertEquals(inputPathMap, copyNettyFabricWorkerConfig.getInputPathMap())[ FD ]
Line_2 $$ public void testSerialization() throws ProcessException -->Line_16 $$ inputPathMap.put(Paths.get("path1"), Paths.get("path2"))[ CD ]
Line_2 $$ public void testSerialization() throws ProcessException -->Line_6 $$ String bootstrapClassPath = "bootstrapClassPath"[ CD ]
Line_14 $$ ProcessCallable<String> processCallable = new ReturnProcessCallable("Test ProcessCallable")-->Line_28 $$ Assert.assertEquals(processCallable.call(), copyProcessCallable.call())[ FD ]
Line_3 $$ Builder builder = new Builder()-->Line_9 $$ builder.setJavaExecutable(javaExecutable)[ FD ]
Line_6 $$ String bootstrapClassPath = "bootstrapClassPath"-->Line_7 $$ builder.setBootstrapClassPath(bootstrapClassPath)[ FD ]
Line_2 $$ public void testSerialization() throws ProcessException -->Line_22 $$ Assert.assertEquals(arguments, copyProcessConfig.getArguments())[ CD ]
Line_4 $$ List<String> arguments = Arrays.asList("x", "y", "z")-->Line_5 $$ builder.setArguments(arguments)[ FD ]
Line_2 $$ public void testSerialization() throws ProcessException -->Line_24 $$ Assert.assertEquals(javaExecutable, copyProcessConfig.getJavaExecutable())[ CD ]
Line_2 $$ public void testSerialization() throws ProcessException -->Line_10 $$ builder.setReactClassLoader(NettyFabricWorkerConfigTest.class.getClassLoader())[ CD ]
Line_21 $$ ProcessConfig copyProcessConfig = copyNettyFabricWorkerConfig.getProcessConfig()-->Line_25 $$ Assert.assertNull(copyProcessConfig.getReactClassLoader())[ FD ]
Line_8 $$ String javaExecutable = "java"-->Line_9 $$ builder.setJavaExecutable(javaExecutable)[ FD ]
Line_2 $$ public void testSerialization() throws ProcessException -->Line_20 $$ Assert.assertEquals(inputPathMap, copyNettyFabricWorkerConfig.getInputPathMap())[ CD ]
Line_13 $$ long id = 10-->Line_19 $$ Assert.assertEquals(id, copyNettyFabricWorkerConfig.getId())[ FD ]
Line_2 $$ public void testSerialization() throws ProcessException -->Line_12 $$ builder.setRuntimeClassPath(runtimeClassPath)[ CD ]
Line_2 $$ public void testSerialization() throws ProcessException -->Line_14 $$ ProcessCallable<String> processCallable = new ReturnProcessCallable("Test ProcessCallable")[ CD ]
Line_27 $$ ProcessCallable<String> copyProcessCallable = copyNettyFabricWorkerConfig.getProcessCallable()-->Line_28 $$ Assert.assertEquals(processCallable.call(), copyProcessCallable.call())[ FD ]
Line_2 $$ public void testSerialization() throws ProcessException -->Line_3 $$ Builder builder = new Builder()[ CD ]
Line_3 $$ Builder builder = new Builder()-->Line_18 $$ NettyFabricWorkerConfig<String> copyNettyFabricWorkerConfig = (NettyFabricWorkerConfig<String>) SerializableUtil.deserialize(SerializableUtil.serialize(new NettyFabricWorkerConfig<String>(id, builder.build(), processCallable, inputPathMap)))[ FD ]
Line_4 $$ List<String> arguments = Arrays.asList("x", "y", "z")-->Line_22 $$ Assert.assertEquals(arguments, copyProcessConfig.getArguments())[ FD ]
Line_3 $$ Builder builder = new Builder()-->Line_5 $$ builder.setArguments(arguments)[ FD ]
Line_3 $$ Builder builder = new Builder()-->Line_7 $$ builder.setBootstrapClassPath(bootstrapClassPath)[ FD ]
Line_3 $$ Builder builder = new Builder()-->Line_10 $$ builder.setReactClassLoader(NettyFabricWorkerConfigTest.class.getClassLoader())[ FD ]
Line_15 $$ Map<Path, Path> inputPathMap = new HashMap()-->Line_17 $$ inputPathMap.put(Paths.get("path3"), Paths.get("path4"))[ FD ]
Line_2 $$ public void testSerialization() throws ProcessException -->Line_4 $$ List<String> arguments = Arrays.asList("x", "y", "z")[ CD ]
Line_2 $$ public void testSerialization() throws ProcessException -->Line_21 $$ ProcessConfig copyProcessConfig = copyNettyFabricWorkerConfig.getProcessConfig()[ CD ]
Line_6 $$ String bootstrapClassPath = "bootstrapClassPath"-->Line_23 $$ Assert.assertEquals(bootstrapClassPath, copyProcessConfig.getBootstrapClassPath())[ FD ]
Line_21 $$ ProcessConfig copyProcessConfig = copyNettyFabricWorkerConfig.getProcessConfig()-->Line_26 $$ Assert.assertEquals(runtimeClassPath, copyProcessConfig.getRuntimeClassPath())[ FD ]
Line_18 $$ NettyFabricWorkerConfig<String> copyNettyFabricWorkerConfig = (NettyFabricWorkerConfig<String>) SerializableUtil.deserialize(SerializableUtil.serialize(new NettyFabricWorkerConfig<String>(id, builder.build(), processCallable, inputPathMap)))-->Line_19 $$ Assert.assertEquals(id, copyNettyFabricWorkerConfig.getId())[ FD ]
Line_2 $$ public void testSerialization() throws ProcessException -->Line_9 $$ builder.setJavaExecutable(javaExecutable)[ CD ]
Line_2 $$ public void testSerialization() throws ProcessException -->Line_7 $$ builder.setBootstrapClassPath(bootstrapClassPath)[ CD ]
Line_11 $$ String runtimeClassPath = "runtimeClassPath"-->Line_26 $$ Assert.assertEquals(runtimeClassPath, copyProcessConfig.getRuntimeClassPath())[ FD ]
Line_2 $$ public void testSerialization() throws ProcessException -->Line_26 $$ Assert.assertEquals(runtimeClassPath, copyProcessConfig.getRuntimeClassPath())[ CD ]
Line_3 $$ Builder builder = new Builder()-->Line_12 $$ builder.setRuntimeClassPath(runtimeClassPath)[ FD ]
Line_2 $$ public void testSerialization() throws ProcessException -->Line_18 $$ NettyFabricWorkerConfig<String> copyNettyFabricWorkerConfig = (NettyFabricWorkerConfig<String>) SerializableUtil.deserialize(SerializableUtil.serialize(new NettyFabricWorkerConfig<String>(id, builder.build(), processCallable, inputPathMap)))[ CD ]
Line_2 $$ public void testSerialization() throws ProcessException -->Line_27 $$ ProcessCallable<String> copyProcessCallable = copyNettyFabricWorkerConfig.getProcessCallable()[ CD ]
Line_2 $$ public void testSerialization() throws ProcessException -->Line_23 $$ Assert.assertEquals(bootstrapClassPath, copyProcessConfig.getBootstrapClassPath())[ CD ]
Line_11 $$ String runtimeClassPath = "runtimeClassPath"-->Line_12 $$ builder.setRuntimeClassPath(runtimeClassPath)[ FD ]
Line_2 $$ public void testSerialization() throws ProcessException -->Line_8 $$ String javaExecutable = "java"[ CD ]
Line_18 $$ NettyFabricWorkerConfig<String> copyNettyFabricWorkerConfig = (NettyFabricWorkerConfig<String>) SerializableUtil.deserialize(SerializableUtil.serialize(new NettyFabricWorkerConfig<String>(id, builder.build(), processCallable, inputPathMap)))-->Line_20 $$ Assert.assertEquals(inputPathMap, copyNettyFabricWorkerConfig.getInputPathMap())[ FD ]
Line_21 $$ ProcessConfig copyProcessConfig = copyNettyFabricWorkerConfig.getProcessConfig()-->Line_23 $$ Assert.assertEquals(bootstrapClassPath, copyProcessConfig.getBootstrapClassPath())[ FD ]
Line_18 $$ NettyFabricWorkerConfig<String> copyNettyFabricWorkerConfig = (NettyFabricWorkerConfig<String>) SerializableUtil.deserialize(SerializableUtil.serialize(new NettyFabricWorkerConfig<String>(id, builder.build(), processCallable, inputPathMap)))-->Line_21 $$ ProcessConfig copyProcessConfig = copyNettyFabricWorkerConfig.getProcessConfig()[ FD ]
Line_2 $$ public void testSerialization() throws ProcessException -->Line_17 $$ inputPathMap.put(Paths.get("path3"), Paths.get("path4"))[ CD ]
Line_2 $$ public void testSerialization() throws ProcessException -->Line_19 $$ Assert.assertEquals(id, copyNettyFabricWorkerConfig.getId())[ CD ]
Line_2 $$ public void testSerialization() throws ProcessException -->Line_13 $$ long id = 10[ CD ]
Line_21 $$ ProcessConfig copyProcessConfig = copyNettyFabricWorkerConfig.getProcessConfig()-->Line_24 $$ Assert.assertEquals(javaExecutable, copyProcessConfig.getJavaExecutable())[ FD ]
