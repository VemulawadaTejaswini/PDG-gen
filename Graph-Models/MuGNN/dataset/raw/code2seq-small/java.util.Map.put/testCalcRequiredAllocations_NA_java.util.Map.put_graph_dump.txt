Line_2 $$ public void testCalcRequiredAllocations() -->Line_10 $$ expectedResult.put("full", nodeCount)[ CD ]
Line_4 $$ int nodeCount = randomIntBetween(1, 6)-->Line_10 $$ expectedResult.put("full", nodeCount)[ FD ]
Line_2 $$ public void testCalcRequiredAllocations() -->Line_16 $$ expectedResult.put(randomUnicodeOfCodepointLength(10), 1)[ CD ]
Line_5 $$ Map<String, Integer> expectedResult = new HashMap()-->Line_17 $$ for (String setting : expectedResult.keySet()) [ FD ]
Line_2 $$ public void testCalcRequiredAllocations() -->Line_9 $$ expectedResult.put("one", 1)[ CD ]
Line_5 $$ Map<String, Integer> expectedResult = new HashMap()-->Line_6 $$ expectedResult.put("quorum", nodeCount > 2 ? nodeCount / 2 + 1 : 1)[ FD ]
Line_17 $$ for (String setting : expectedResult.keySet()) -->Line_18 $$ assertThat("unexpected result for setting [" + setting + "]", gateway.calcRequiredAllocations(setting, nodeCount), equalTo(expectedResult.get(setting).intValue()))[ FD ]
Line_5 $$ Map<String, Integer> expectedResult = new HashMap()-->Line_13 $$ expectedResult.put("all-1", Math.max(1, nodeCount - 1))[ FD ]
Line_2 $$ public void testCalcRequiredAllocations() -->Line_8 $$ expectedResult.put("half", expectedResult.get("quorum-1"))[ CD ]
Line_2 $$ public void testCalcRequiredAllocations() -->Line_4 $$ int nodeCount = randomIntBetween(1, 6)[ CD ]
Line_3 $$ MockGateway gateway = new MockGateway(Settings.EMPTY, new TestClusterService())-->Line_18 $$ assertThat("unexpected result for setting [" + setting + "]", gateway.calcRequiredAllocations(setting, nodeCount), equalTo(expectedResult.get(setting).intValue()))[ FD ]
Line_4 $$ int nodeCount = randomIntBetween(1, 6)-->Line_11 $$ expectedResult.put("all", nodeCount)[ FD ]
Line_2 $$ public void testCalcRequiredAllocations() -->Line_14 $$ int i = randomIntBetween(1, 20)[ CD ]
Line_5 $$ Map<String, Integer> expectedResult = new HashMap()-->Line_9 $$ expectedResult.put("one", 1)[ FD ]
Line_2 $$ public void testCalcRequiredAllocations() -->Line_11 $$ expectedResult.put("all", nodeCount)[ CD ]
Line_2 $$ public void testCalcRequiredAllocations() -->Line_13 $$ expectedResult.put("all-1", Math.max(1, nodeCount - 1))[ CD ]
Line_14 $$ int i = randomIntBetween(1, 20)-->Line_15 $$ expectedResult.put("" + i, i)[ FD ]
Line_2 $$ public void testCalcRequiredAllocations() -->Line_6 $$ expectedResult.put("quorum", nodeCount > 2 ? nodeCount / 2 + 1 : 1)[ CD ]
Line_2 $$ public void testCalcRequiredAllocations() -->Line_12 $$ expectedResult.put("full-1", Math.max(1, nodeCount - 1))[ CD ]
Line_2 $$ public void testCalcRequiredAllocations() -->Line_7 $$ expectedResult.put("quorum-1", nodeCount > 2 ? (nodeCount + 1) / 2 : 1)[ CD ]
Line_2 $$ public void testCalcRequiredAllocations() -->Line_15 $$ expectedResult.put("" + i, i)[ CD ]
Line_2 $$ public void testCalcRequiredAllocations() -->Line_5 $$ Map<String, Integer> expectedResult = new HashMap()[ CD ]
Line_5 $$ Map<String, Integer> expectedResult = new HashMap()-->Line_11 $$ expectedResult.put("all", nodeCount)[ FD ]
Line_2 $$ public void testCalcRequiredAllocations() -->Line_3 $$ MockGateway gateway = new MockGateway(Settings.EMPTY, new TestClusterService())[ CD ]
Line_5 $$ Map<String, Integer> expectedResult = new HashMap()-->Line_12 $$ expectedResult.put("full-1", Math.max(1, nodeCount - 1))[ FD ]
Line_5 $$ Map<String, Integer> expectedResult = new HashMap()-->Line_10 $$ expectedResult.put("full", nodeCount)[ FD ]
Line_5 $$ Map<String, Integer> expectedResult = new HashMap()-->Line_7 $$ expectedResult.put("quorum-1", nodeCount > 2 ? (nodeCount + 1) / 2 : 1)[ FD ]
Line_5 $$ Map<String, Integer> expectedResult = new HashMap()-->Line_8 $$ expectedResult.put("half", expectedResult.get("quorum-1"))[ FD ]
Line_4 $$ int nodeCount = randomIntBetween(1, 6)-->Line_18 $$ assertThat("unexpected result for setting [" + setting + "]", gateway.calcRequiredAllocations(setting, nodeCount), equalTo(expectedResult.get(setting).intValue()))[ FD ]
Line_5 $$ Map<String, Integer> expectedResult = new HashMap()-->Line_16 $$ expectedResult.put(randomUnicodeOfCodepointLength(10), 1)[ FD ]
Line_5 $$ Map<String, Integer> expectedResult = new HashMap()-->Line_15 $$ expectedResult.put("" + i, i)[ FD ]
Line_5 $$ Map<String, Integer> expectedResult = new HashMap()-->Line_18 $$ assertThat("unexpected result for setting [" + setting + "]", gateway.calcRequiredAllocations(setting, nodeCount), equalTo(expectedResult.get(setting).intValue()))[ FD ]
