Line_9 $$ BytesReference source = response.source()-->Line_10 $$ assertThat(source, notNullValue())[ FD ]
Line_2 $$ public void testFileTemplate() -->Line_25 $$ expected = TEMPLATE_CONTENTS.replace("[ CD ]
Line_19 $$ template = new Template("file_template_1", ScriptType.FILE, MustacheScriptEngineService.NAME, XContentType.JSON, params)-->Line_20 $$ response = client().admin().cluster().prepareRenderSearchTemplate().template(template).get()[ FD ]
Line_2 $$ public void testFileTemplate() -->Line_9 $$ BytesReference source = response.source()[ CD ]
Line_14 $$ Map<String, Object> expectedMap = XContentHelper.convertToMap(new BytesArray(expected), false).v2()-->Line_26 $$ expectedMap = XContentHelper.convertToMap(new BytesArray(expected), false).v2()[ FD ]
Line_2 $$ public void testFileTemplate() -->Line_13 $$ String expected = TEMPLATE_CONTENTS.replace("[ CD ]
Line_3 $$ Map<String, Object> params = new HashMap()-->Line_16 $$ params = new HashMap()[ FD ]
Line_3 $$ Map<String, Object> params = new HashMap()-->Line_4 $$ params.put("value", "bar")[ FD ]
Line_2 $$ public void testFileTemplate() -->Line_14 $$ Map<String, Object> expectedMap = XContentHelper.convertToMap(new BytesArray(expected), false).v2()[ CD ]
Line_7 $$ RenderSearchTemplateResponse response = client().admin().cluster().prepareRenderSearchTemplate().template(template).get()-->Line_22 $$ source = response.source()[ FD ]
Line_7 $$ RenderSearchTemplateResponse response = client().admin().cluster().prepareRenderSearchTemplate().template(template).get()-->Line_9 $$ BytesReference source = response.source()[ FD ]
Line_6 $$ Template template = new Template("file_template_1", ScriptType.FILE, MustacheScriptEngineService.NAME, XContentType.JSON, params)-->Line_7 $$ RenderSearchTemplateResponse response = client().admin().cluster().prepareRenderSearchTemplate().template(template).get()[ FD ]
Line_2 $$ public void testFileTemplate() -->Line_16 $$ params = new HashMap()[ CD ]
Line_20 $$ response = client().admin().cluster().prepareRenderSearchTemplate().template(template).get()-->Line_21 $$ assertThat(response, notNullValue())[ FD ]
Line_2 $$ public void testFileTemplate() -->Line_24 $$ sourceAsMap = XContentHelper.convertToMap(source, false).v2()[ CD ]
Line_2 $$ public void testFileTemplate() -->Line_26 $$ expectedMap = XContentHelper.convertToMap(new BytesArray(expected), false).v2()[ CD ]
Line_2 $$ public void testFileTemplate() -->Line_3 $$ Map<String, Object> params = new HashMap()[ CD ]
Line_26 $$ expectedMap = XContentHelper.convertToMap(new BytesArray(expected), false).v2()-->Line_27 $$ assertThat(sourceAsMap, equalTo(expectedMap))[ FD ]
Line_7 $$ RenderSearchTemplateResponse response = client().admin().cluster().prepareRenderSearchTemplate().template(template).get()-->Line_8 $$ assertThat(response, notNullValue())[ FD ]
Line_14 $$ Map<String, Object> expectedMap = XContentHelper.convertToMap(new BytesArray(expected), false).v2()-->Line_27 $$ assertThat(sourceAsMap, equalTo(expectedMap))[ FD ]
Line_3 $$ Map<String, Object> params = new HashMap()-->Line_5 $$ params.put("size", 20)[ FD ]
Line_2 $$ public void testFileTemplate() -->Line_23 $$ assertThat(source, notNullValue())[ CD ]
Line_9 $$ BytesReference source = response.source()-->Line_11 $$ Map<String, Object> sourceAsMap = XContentHelper.convertToMap(source, false).v2()[ FD ]
Line_2 $$ public void testFileTemplate() -->Line_7 $$ RenderSearchTemplateResponse response = client().admin().cluster().prepareRenderSearchTemplate().template(template).get()[ CD ]
Line_2 $$ public void testFileTemplate() -->Line_19 $$ template = new Template("file_template_1", ScriptType.FILE, MustacheScriptEngineService.NAME, XContentType.JSON, params)[ CD ]
Line_2 $$ public void testFileTemplate() -->Line_22 $$ source = response.source()[ CD ]
Line_3 $$ Map<String, Object> params = new HashMap()-->Line_18 $$ params.put("size", 100)[ FD ]
Line_7 $$ RenderSearchTemplateResponse response = client().admin().cluster().prepareRenderSearchTemplate().template(template).get()-->Line_20 $$ response = client().admin().cluster().prepareRenderSearchTemplate().template(template).get()[ FD ]
Line_9 $$ BytesReference source = response.source()-->Line_23 $$ assertThat(source, notNullValue())[ FD ]
Line_16 $$ params = new HashMap()-->Line_18 $$ params.put("size", 100)[ FD ]
Line_11 $$ Map<String, Object> sourceAsMap = XContentHelper.convertToMap(source, false).v2()-->Line_15 $$ assertThat(sourceAsMap, equalTo(expectedMap))[ FD ]
Line_2 $$ public void testFileTemplate() -->Line_10 $$ assertThat(source, notNullValue())[ CD ]
Line_11 $$ Map<String, Object> sourceAsMap = XContentHelper.convertToMap(source, false).v2()-->Line_27 $$ assertThat(sourceAsMap, equalTo(expectedMap))[ FD ]
Line_6 $$ Template template = new Template("file_template_1", ScriptType.FILE, MustacheScriptEngineService.NAME, XContentType.JSON, params)-->Line_19 $$ template = new Template("file_template_1", ScriptType.FILE, MustacheScriptEngineService.NAME, XContentType.JSON, params)[ FD ]
Line_9 $$ BytesReference source = response.source()-->Line_24 $$ sourceAsMap = XContentHelper.convertToMap(source, false).v2()[ FD ]
Line_7 $$ RenderSearchTemplateResponse response = client().admin().cluster().prepareRenderSearchTemplate().template(template).get()-->Line_21 $$ assertThat(response, notNullValue())[ FD ]
Line_20 $$ response = client().admin().cluster().prepareRenderSearchTemplate().template(template).get()-->Line_22 $$ source = response.source()[ FD ]
Line_13 $$ String expected = TEMPLATE_CONTENTS.replace("-->Line_25 $$ expected = TEMPLATE_CONTENTS.replace("[ FD ]
Line_14 $$ Map<String, Object> expectedMap = XContentHelper.convertToMap(new BytesArray(expected), false).v2()-->Line_15 $$ assertThat(sourceAsMap, equalTo(expectedMap))[ FD ]
Line_2 $$ public void testFileTemplate() -->Line_12 $$ assertThat(sourceAsMap, notNullValue())[ CD ]
Line_2 $$ public void testFileTemplate() -->Line_17 $$ params.put("value", "baz")[ CD ]
Line_2 $$ public void testFileTemplate() -->Line_11 $$ Map<String, Object> sourceAsMap = XContentHelper.convertToMap(source, false).v2()[ CD ]
Line_2 $$ public void testFileTemplate() -->Line_20 $$ response = client().admin().cluster().prepareRenderSearchTemplate().template(template).get()[ CD ]
Line_6 $$ Template template = new Template("file_template_1", ScriptType.FILE, MustacheScriptEngineService.NAME, XContentType.JSON, params)-->Line_20 $$ response = client().admin().cluster().prepareRenderSearchTemplate().template(template).get()[ FD ]
Line_2 $$ public void testFileTemplate() -->Line_27 $$ assertThat(sourceAsMap, equalTo(expectedMap))[ CD ]
Line_2 $$ public void testFileTemplate() -->Line_21 $$ assertThat(response, notNullValue())[ CD ]
Line_2 $$ public void testFileTemplate() -->Line_15 $$ assertThat(sourceAsMap, equalTo(expectedMap))[ CD ]
Line_22 $$ source = response.source()-->Line_23 $$ assertThat(source, notNullValue())[ FD ]
Line_2 $$ public void testFileTemplate() -->Line_8 $$ assertThat(response, notNullValue())[ CD ]
Line_3 $$ Map<String, Object> params = new HashMap()-->Line_17 $$ params.put("value", "baz")[ FD ]
Line_16 $$ params = new HashMap()-->Line_17 $$ params.put("value", "baz")[ FD ]
Line_24 $$ sourceAsMap = XContentHelper.convertToMap(source, false).v2()-->Line_27 $$ assertThat(sourceAsMap, equalTo(expectedMap))[ FD ]
Line_22 $$ source = response.source()-->Line_24 $$ sourceAsMap = XContentHelper.convertToMap(source, false).v2()[ FD ]
Line_2 $$ public void testFileTemplate() -->Line_4 $$ params.put("value", "bar")[ CD ]
Line_2 $$ public void testFileTemplate() -->Line_5 $$ params.put("size", 20)[ CD ]
Line_11 $$ Map<String, Object> sourceAsMap = XContentHelper.convertToMap(source, false).v2()-->Line_12 $$ assertThat(sourceAsMap, notNullValue())[ FD ]
Line_11 $$ Map<String, Object> sourceAsMap = XContentHelper.convertToMap(source, false).v2()-->Line_24 $$ sourceAsMap = XContentHelper.convertToMap(source, false).v2()[ FD ]
Line_9 $$ BytesReference source = response.source()-->Line_22 $$ source = response.source()[ FD ]
Line_2 $$ public void testFileTemplate() -->Line_18 $$ params.put("size", 100)[ CD ]
Line_2 $$ public void testFileTemplate() -->Line_6 $$ Template template = new Template("file_template_1", ScriptType.FILE, MustacheScriptEngineService.NAME, XContentType.JSON, params)[ CD ]
