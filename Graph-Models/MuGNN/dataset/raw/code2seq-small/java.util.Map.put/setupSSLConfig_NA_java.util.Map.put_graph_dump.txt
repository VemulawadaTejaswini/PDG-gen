Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_22 $$ if (trustStore) [ CD ]
Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_10 $$ File sslServerConfFile = new File(sslConfDir + "/ssl-server.xml")[ CD ]
Line_22 $$ if (trustStore) -->Line_23 $$ trustKS = keystoresDir + "/trustKS.jks"[ CD ]
Line_23 $$ trustKS = keystoresDir + "/trustKS.jks"-->Line_27 $$ Configuration serverSSLConf = createServerSSLConfig(serverKS, serverPassword, serverPassword, trustKS)[ FD ]
Line_13 $$ KeyPair cKP = KeyStoreTestUtil.generateKeyPair("RSA")-->Line_14 $$ X509Certificate cCert = KeyStoreTestUtil.generateCertificate("CN=localhost, O=client", cKP, 30, "SHA1withRSA")[ FD ]
Line_3 $$ String clientKS = keystoresDir + "/clientKS.jks"-->Line_15 $$ KeyStoreTestUtil.createKeyStore(clientKS, clientPassword, "client", cKP.getPrivate(), cCert)[ FD ]
Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_11 $$ Map<String, X509Certificate> certs = new HashMap<String, X509Certificate>()[ CD ]
Line_3 $$ String clientKS = keystoresDir + "/clientKS.jks"-->Line_26 $$ Configuration clientSSLConf = createClientSSLConfig(clientKS, clientPassword, clientPassword, trustKS)[ FD ]
Line_7 $$ String trustKS = null-->Line_27 $$ Configuration serverSSLConf = createServerSSLConfig(serverKS, serverPassword, serverPassword, trustKS)[ FD ]
Line_14 $$ X509Certificate cCert = KeyStoreTestUtil.generateCertificate("CN=localhost, O=client", cKP, 30, "SHA1withRSA")-->Line_15 $$ KeyStoreTestUtil.createKeyStore(clientKS, clientPassword, "client", cKP.getPrivate(), cCert)[ FD ]
Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_12 $$ if (useClientCert) [ CD ]
Line_27 $$ Configuration serverSSLConf = createServerSSLConfig(serverKS, serverPassword, serverPassword, trustKS)-->Line_29 $$ saveConfig(sslServerConfFile, serverSSLConf)[ FD ]
Line_18 $$ KeyPair sKP = KeyStoreTestUtil.generateKeyPair("RSA")-->Line_20 $$ KeyStoreTestUtil.createKeyStore(serverKS, serverPassword, "server", sKP.getPrivate(), sCert)[ FD ]
Line_5 $$ String serverKS = keystoresDir + "/serverKS.jks"-->Line_20 $$ KeyStoreTestUtil.createKeyStore(serverKS, serverPassword, "server", sKP.getPrivate(), sCert)[ FD ]
Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_6 $$ String serverPassword = "serverP"[ CD ]
Line_12 $$ if (useClientCert) -->Line_14 $$ X509Certificate cCert = KeyStoreTestUtil.generateCertificate("CN=localhost, O=client", cKP, 30, "SHA1withRSA")[ CD ]
Line_18 $$ KeyPair sKP = KeyStoreTestUtil.generateKeyPair("RSA")-->Line_19 $$ X509Certificate sCert = KeyStoreTestUtil.generateCertificate("CN=localhost, O=server", sKP, 30, "SHA1withRSA")[ FD ]
Line_6 $$ String serverPassword = "serverP"-->Line_20 $$ KeyStoreTestUtil.createKeyStore(serverKS, serverPassword, "server", sKP.getPrivate(), sCert)[ FD ]
Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_7 $$ String trustKS = null[ CD ]
Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_8 $$ String trustPassword = "trustP"[ CD ]
Line_9 $$ File sslClientConfFile = new File(sslConfDir + "/ssl-client.xml")-->Line_31 $$ conf.set(SSLFactory.SSL_CLIENT_CONF_KEY, sslClientConfFile.getName())[ FD ]
Line_5 $$ String serverKS = keystoresDir + "/serverKS.jks"-->Line_27 $$ Configuration serverSSLConf = createServerSSLConfig(serverKS, serverPassword, serverPassword, trustKS)[ FD ]
Line_12 $$ if (useClientCert) -->Line_13 $$ KeyPair cKP = KeyStoreTestUtil.generateKeyPair("RSA")[ CD ]
Line_7 $$ String trustKS = null-->Line_24 $$ KeyStoreTestUtil.createTrustStore(trustKS, trustPassword, certs)[ FD ]
Line_9 $$ File sslClientConfFile = new File(sslConfDir + "/ssl-client.xml")-->Line_28 $$ saveConfig(sslClientConfFile, clientSSLConf)[ FD ]
Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_31 $$ conf.set(SSLFactory.SSL_CLIENT_CONF_KEY, sslClientConfFile.getName())[ CD ]
Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_5 $$ String serverKS = keystoresDir + "/serverKS.jks"[ CD ]
Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_4 $$ String clientPassword = "clientP"[ CD ]
Line_4 $$ String clientPassword = "clientP"-->Line_26 $$ Configuration clientSSLConf = createClientSSLConfig(clientKS, clientPassword, clientPassword, trustKS)[ FD ]
Line_6 $$ String serverPassword = "serverP"-->Line_27 $$ Configuration serverSSLConf = createServerSSLConfig(serverKS, serverPassword, serverPassword, trustKS)[ FD ]
Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_31 $$ conf.set(SSLFactory.SSL_CLIENT_CONF_KEY, sslClientConfFile.getName())[ FD ]
Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_33 $$ conf.setBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY, useClientCert)[ CD ]
Line_7 $$ String trustKS = null-->Line_23 $$ trustKS = keystoresDir + "/trustKS.jks"[ FD ]
Line_22 $$ if (trustStore) -->Line_24 $$ KeyStoreTestUtil.createTrustStore(trustKS, trustPassword, certs)[ CD ]
Line_23 $$ trustKS = keystoresDir + "/trustKS.jks"-->Line_26 $$ Configuration clientSSLConf = createClientSSLConfig(clientKS, clientPassword, clientPassword, trustKS)[ FD ]
Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_21 $$ certs.put("server", sCert)[ CD ]
Line_8 $$ String trustPassword = "trustP"-->Line_24 $$ KeyStoreTestUtil.createTrustStore(trustKS, trustPassword, certs)[ FD ]
Line_11 $$ Map<String, X509Certificate> certs = new HashMap<String, X509Certificate>()-->Line_21 $$ certs.put("server", sCert)[ FD ]
Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_29 $$ saveConfig(sslServerConfFile, serverSSLConf)[ CD ]
Line_4 $$ String clientPassword = "clientP"-->Line_15 $$ KeyStoreTestUtil.createKeyStore(clientKS, clientPassword, "client", cKP.getPrivate(), cCert)[ FD ]
Line_23 $$ trustKS = keystoresDir + "/trustKS.jks"-->Line_24 $$ KeyStoreTestUtil.createTrustStore(trustKS, trustPassword, certs)[ FD ]
Line_11 $$ Map<String, X509Certificate> certs = new HashMap<String, X509Certificate>()-->Line_24 $$ KeyStoreTestUtil.createTrustStore(trustKS, trustPassword, certs)[ FD ]
Line_11 $$ Map<String, X509Certificate> certs = new HashMap<String, X509Certificate>()-->Line_16 $$ certs.put("client", cCert)[ FD ]
Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_23 $$ trustKS = keystoresDir + "/trustKS.jks"[ FD ]
Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_33 $$ conf.setBoolean(SSLFactory.SSL_REQUIRE_CLIENT_CERT_KEY, useClientCert)[ FD ]
Line_19 $$ X509Certificate sCert = KeyStoreTestUtil.generateCertificate("CN=localhost, O=server", sKP, 30, "SHA1withRSA")-->Line_20 $$ KeyStoreTestUtil.createKeyStore(serverKS, serverPassword, "server", sKP.getPrivate(), sCert)[ FD ]
Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_18 $$ KeyPair sKP = KeyStoreTestUtil.generateKeyPair("RSA")[ CD ]
Line_13 $$ KeyPair cKP = KeyStoreTestUtil.generateKeyPair("RSA")-->Line_15 $$ KeyStoreTestUtil.createKeyStore(clientKS, clientPassword, "client", cKP.getPrivate(), cCert)[ FD ]
Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_19 $$ X509Certificate sCert = KeyStoreTestUtil.generateCertificate("CN=localhost, O=server", sKP, 30, "SHA1withRSA")[ CD ]
Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_20 $$ KeyStoreTestUtil.createKeyStore(serverKS, serverPassword, "server", sKP.getPrivate(), sCert)[ CD ]
Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_26 $$ Configuration clientSSLConf = createClientSSLConfig(clientKS, clientPassword, clientPassword, trustKS)[ CD ]
Line_7 $$ String trustKS = null-->Line_26 $$ Configuration clientSSLConf = createClientSSLConfig(clientKS, clientPassword, clientPassword, trustKS)[ FD ]
Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_27 $$ Configuration serverSSLConf = createServerSSLConfig(serverKS, serverPassword, serverPassword, trustKS)[ CD ]
Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_28 $$ saveConfig(sslClientConfFile, clientSSLConf)[ CD ]
Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_30 $$ conf.set(SSLFactory.SSL_HOSTNAME_VERIFIER_KEY, "ALLOW_ALL")[ CD ]
Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_30 $$ conf.set(SSLFactory.SSL_HOSTNAME_VERIFIER_KEY, "ALLOW_ALL")[ FD ]
Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_32 $$ conf.set(SSLFactory.SSL_SERVER_CONF_KEY, sslServerConfFile.getName())[ CD ]
Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_3 $$ String clientKS = keystoresDir + "/clientKS.jks"[ CD ]
Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_9 $$ File sslClientConfFile = new File(sslConfDir + "/ssl-client.xml")[ CD ]
Line_2 $$ public static void setupSSLConfig(String keystoresDir, String sslConfDir, Configuration conf, boolean useClientCert, boolean trustStore) throws Exception -->Line_32 $$ conf.set(SSLFactory.SSL_SERVER_CONF_KEY, sslServerConfFile.getName())[ FD ]
Line_12 $$ if (useClientCert) -->Line_15 $$ KeyStoreTestUtil.createKeyStore(clientKS, clientPassword, "client", cKP.getPrivate(), cCert)[ CD ]
Line_12 $$ if (useClientCert) -->Line_16 $$ certs.put("client", cCert)[ CD ]
Line_10 $$ File sslServerConfFile = new File(sslConfDir + "/ssl-server.xml")-->Line_29 $$ saveConfig(sslServerConfFile, serverSSLConf)[ FD ]
Line_14 $$ X509Certificate cCert = KeyStoreTestUtil.generateCertificate("CN=localhost, O=client", cKP, 30, "SHA1withRSA")-->Line_16 $$ certs.put("client", cCert)[ FD ]
Line_10 $$ File sslServerConfFile = new File(sslConfDir + "/ssl-server.xml")-->Line_32 $$ conf.set(SSLFactory.SSL_SERVER_CONF_KEY, sslServerConfFile.getName())[ FD ]
Line_26 $$ Configuration clientSSLConf = createClientSSLConfig(clientKS, clientPassword, clientPassword, trustKS)-->Line_28 $$ saveConfig(sslClientConfFile, clientSSLConf)[ FD ]
Line_19 $$ X509Certificate sCert = KeyStoreTestUtil.generateCertificate("CN=localhost, O=server", sKP, 30, "SHA1withRSA")-->Line_21 $$ certs.put("server", sCert)[ FD ]
