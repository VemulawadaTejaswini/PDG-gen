Line_3 $$ String newSQL = _transformedSqls.get(sql)-->Line_9 $$ newSQL = StringUtil.replace(newSQL, _HQL_NOT_EQUALS, _JPQL_NOT_EQUALS)[ FD ]
Line_3 $$ String newSQL = _transformedSqls.get(sql)-->Line_11 $$ _transformedSqls.put(sql, newSQL)[ FD ]
Line_9 $$ newSQL = StringUtil.replace(newSQL, _HQL_NOT_EQUALS, _JPQL_NOT_EQUALS)-->Line_10 $$ newSQL = StringUtil.replace(newSQL, _HQL_COMPOSITE_ID_MARKER, _JPQL_DOT_SEPARTOR)[ FD ]
Line_10 $$ newSQL = StringUtil.replace(newSQL, _HQL_COMPOSITE_ID_MARKER, _JPQL_DOT_SEPARTOR)-->Line_11 $$ _transformedSqls.put(sql, newSQL)[ FD ]
Line_3 $$ String newSQL = _transformedSqls.get(sql)-->Line_8 $$ newSQL = _transformPositionalParams(newSQL)[ FD ]
Line_7 $$ newSQL = _transform(sql)-->Line_8 $$ newSQL = _transformPositionalParams(newSQL)[ FD ]
Line_2 $$ private String _transformFromHqlToJpql(String sql) -->Line_7 $$ newSQL = _transform(sql)[ CD ]
Line_8 $$ newSQL = _transformPositionalParams(newSQL)-->Line_11 $$ _transformedSqls.put(sql, newSQL)[ FD ]
Line_2 $$ private String _transformFromHqlToJpql(String sql) -->Line_3 $$ String newSQL = _transformedSqls.get(sql)[ CD ]
Line_3 $$ String newSQL = _transformedSqls.get(sql)-->Line_4 $$ if (newSQL != null) [ FD ]
Line_2 $$ private String _transformFromHqlToJpql(String sql) -->Line_11 $$ _transformedSqls.put(sql, newSQL)[ CD ]
Line_2 $$ private String _transformFromHqlToJpql(String sql) -->Line_7 $$ newSQL = _transform(sql)[ FD ]
Line_2 $$ private String _transformFromHqlToJpql(String sql) -->Line_4 $$ if (newSQL != null) [ CD ]
Line_2 $$ private String _transformFromHqlToJpql(String sql) -->Line_8 $$ newSQL = _transformPositionalParams(newSQL)[ CD ]
Line_2 $$ private String _transformFromHqlToJpql(String sql) -->Line_10 $$ newSQL = StringUtil.replace(newSQL, _HQL_COMPOSITE_ID_MARKER, _JPQL_DOT_SEPARTOR)[ CD ]
Line_7 $$ newSQL = _transform(sql)-->Line_10 $$ newSQL = StringUtil.replace(newSQL, _HQL_COMPOSITE_ID_MARKER, _JPQL_DOT_SEPARTOR)[ FD ]
Line_2 $$ private String _transformFromHqlToJpql(String sql) -->Line_11 $$ _transformedSqls.put(sql, newSQL)[ FD ]
Line_2 $$ private String _transformFromHqlToJpql(String sql) -->Line_3 $$ String newSQL = _transformedSqls.get(sql)[ FD ]
Line_7 $$ newSQL = _transform(sql)-->Line_11 $$ _transformedSqls.put(sql, newSQL)[ FD ]
Line_7 $$ newSQL = _transform(sql)-->Line_9 $$ newSQL = StringUtil.replace(newSQL, _HQL_NOT_EQUALS, _JPQL_NOT_EQUALS)[ FD ]
Line_2 $$ private String _transformFromHqlToJpql(String sql) -->Line_9 $$ newSQL = StringUtil.replace(newSQL, _HQL_NOT_EQUALS, _JPQL_NOT_EQUALS)[ CD ]
Line_3 $$ String newSQL = _transformedSqls.get(sql)-->Line_7 $$ newSQL = _transform(sql)[ FD ]
Line_8 $$ newSQL = _transformPositionalParams(newSQL)-->Line_9 $$ newSQL = StringUtil.replace(newSQL, _HQL_NOT_EQUALS, _JPQL_NOT_EQUALS)[ FD ]
Line_3 $$ String newSQL = _transformedSqls.get(sql)-->Line_10 $$ newSQL = StringUtil.replace(newSQL, _HQL_COMPOSITE_ID_MARKER, _JPQL_DOT_SEPARTOR)[ FD ]
Line_2 $$ private String _transformFromHqlToJpql(String sql) -->Line_12 $$ return newSQL[ CD ]
Line_4 $$ if (newSQL != null) -->Line_5 $$ return newSQL[ CD ]
Line_9 $$ newSQL = StringUtil.replace(newSQL, _HQL_NOT_EQUALS, _JPQL_NOT_EQUALS)-->Line_11 $$ _transformedSqls.put(sql, newSQL)[ FD ]
Line_8 $$ newSQL = _transformPositionalParams(newSQL)-->Line_10 $$ newSQL = StringUtil.replace(newSQL, _HQL_COMPOSITE_ID_MARKER, _JPQL_DOT_SEPARTOR)[ FD ]
