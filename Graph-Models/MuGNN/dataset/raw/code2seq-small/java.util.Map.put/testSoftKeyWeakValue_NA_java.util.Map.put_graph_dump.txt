Line_8 $$ ConcurrentMap<String, Object> concurrentReferenceMap = new ConcurrentReferenceKeyHashMap<String, Object>(new ConcurrentReferenceValueHashMap<Reference<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY), FinalizeManager.SOFT_REFERENCE_FACTORY)-->Line_13 $$ Assert.assertTrue(concurrentReferenceMap.containsValue(testValue1))[ FD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentReferenceMap = new ConcurrentReferenceKeyHashMap<String, Object>(new ConcurrentReferenceValueHashMap<Reference<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY), FinalizeManager.SOFT_REFERENCE_FACTORY)-->Line_10 $$ Assert.assertNull(concurrentReferenceMap.put(testKey2, testValue2))[ FD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentReferenceMap = new ConcurrentReferenceKeyHashMap<String, Object>(new ConcurrentReferenceValueHashMap<Reference<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY), FinalizeManager.SOFT_REFERENCE_FACTORY)-->Line_28 $$ Assert.assertEquals(1, concurrentReferenceMap.size())[ FD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentReferenceMap = new ConcurrentReferenceKeyHashMap<String, Object>(new ConcurrentReferenceValueHashMap<Reference<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY), FinalizeManager.SOFT_REFERENCE_FACTORY)-->Line_31 $$ Assert.assertSame(testValue2, concurrentReferenceMap.get(testKey2))[ FD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_34 $$ ReflectionTestUtil.invoke(FinalizeManager.class, "_pollingCleanup", new Class<?>[0])[ CD ]
Line_4 $$ String testKey1 = new String("testKey1")-->Line_12 $$ Assert.assertTrue(concurrentReferenceMap.containsKey(testKey1))[ FD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentReferenceMap = new ConcurrentReferenceKeyHashMap<String, Object>(new ConcurrentReferenceValueHashMap<Reference<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY), FinalizeManager.SOFT_REFERENCE_FACTORY)-->Line_14 $$ Assert.assertSame(testValue1, concurrentReferenceMap.get(testKey1))[ FD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentReferenceMap = new ConcurrentReferenceKeyHashMap<String, Object>(new ConcurrentReferenceValueHashMap<Reference<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY), FinalizeManager.SOFT_REFERENCE_FACTORY)-->Line_24 $$ Assert.assertTrue(concurrentReferenceMap.containsValue(testValue2))[ FD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_14 $$ Assert.assertSame(testValue1, concurrentReferenceMap.get(testKey1))[ CD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_33 $$ GCUtil.gc(true)[ CD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentReferenceMap = new ConcurrentReferenceKeyHashMap<String, Object>(new ConcurrentReferenceValueHashMap<Reference<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY), FinalizeManager.SOFT_REFERENCE_FACTORY)-->Line_15 $$ Assert.assertTrue(concurrentReferenceMap.containsKey(testKey2))[ FD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentReferenceMap = new ConcurrentReferenceKeyHashMap<String, Object>(new ConcurrentReferenceValueHashMap<Reference<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY), FinalizeManager.SOFT_REFERENCE_FACTORY)-->Line_22 $$ Assert.assertTrue(concurrentReferenceMap.containsValue(testValue1))[ FD ]
Line_7 $$ Object testValue2 = new Object()-->Line_31 $$ Assert.assertSame(testValue2, concurrentReferenceMap.get(testKey2))[ FD ]
Line_7 $$ Object testValue2 = new Object()-->Line_30 $$ Assert.assertTrue(concurrentReferenceMap.containsValue(testValue2))[ FD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_26 $$ GCUtil.fullGC(true)[ CD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_11 $$ Assert.assertEquals(2, concurrentReferenceMap.size())[ CD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_19 $$ GCUtil.gc(true)[ CD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentReferenceMap = new ConcurrentReferenceKeyHashMap<String, Object>(new ConcurrentReferenceValueHashMap<Reference<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY), FinalizeManager.SOFT_REFERENCE_FACTORY)-->Line_17 $$ Assert.assertSame(testValue2, concurrentReferenceMap.get(testKey2))[ FD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentReferenceMap = new ConcurrentReferenceKeyHashMap<String, Object>(new ConcurrentReferenceValueHashMap<Reference<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY), FinalizeManager.SOFT_REFERENCE_FACTORY)-->Line_29 $$ Assert.assertTrue(concurrentReferenceMap.containsKey(testKey2))[ FD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_22 $$ Assert.assertTrue(concurrentReferenceMap.containsValue(testValue1))[ CD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_16 $$ Assert.assertTrue(concurrentReferenceMap.containsValue(testValue2))[ CD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_25 $$ Assert.assertSame(testValue2, concurrentReferenceMap.get(testKey2))[ CD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_32 $$ testValue2 = null[ CD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_4 $$ String testKey1 = new String("testKey1")[ CD ]
Line_6 $$ Object testValue1 = new Object()-->Line_14 $$ Assert.assertSame(testValue1, concurrentReferenceMap.get(testKey1))[ FD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentReferenceMap = new ConcurrentReferenceKeyHashMap<String, Object>(new ConcurrentReferenceValueHashMap<Reference<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY), FinalizeManager.SOFT_REFERENCE_FACTORY)-->Line_21 $$ Assert.assertEquals(2, concurrentReferenceMap.size())[ FD ]
Line_5 $$ String testKey2 = new String("testKey2")-->Line_23 $$ Assert.assertTrue(concurrentReferenceMap.containsKey(testKey2))[ FD ]
Line_4 $$ String testKey1 = new String("testKey1")-->Line_18 $$ testKey1 = null[ FD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentReferenceMap = new ConcurrentReferenceKeyHashMap<String, Object>(new ConcurrentReferenceValueHashMap<Reference<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY), FinalizeManager.SOFT_REFERENCE_FACTORY)-->Line_25 $$ Assert.assertSame(testValue2, concurrentReferenceMap.get(testKey2))[ FD ]
Line_5 $$ String testKey2 = new String("testKey2")-->Line_25 $$ Assert.assertSame(testValue2, concurrentReferenceMap.get(testKey2))[ FD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_28 $$ Assert.assertEquals(1, concurrentReferenceMap.size())[ CD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_13 $$ Assert.assertTrue(concurrentReferenceMap.containsValue(testValue1))[ CD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_21 $$ Assert.assertEquals(2, concurrentReferenceMap.size())[ CD ]
Line_5 $$ String testKey2 = new String("testKey2")-->Line_31 $$ Assert.assertSame(testValue2, concurrentReferenceMap.get(testKey2))[ FD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_7 $$ Object testValue2 = new Object()[ CD ]
Line_7 $$ Object testValue2 = new Object()-->Line_10 $$ Assert.assertNull(concurrentReferenceMap.put(testKey2, testValue2))[ FD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentReferenceMap = new ConcurrentReferenceKeyHashMap<String, Object>(new ConcurrentReferenceValueHashMap<Reference<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY), FinalizeManager.SOFT_REFERENCE_FACTORY)-->Line_11 $$ Assert.assertEquals(2, concurrentReferenceMap.size())[ FD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_24 $$ Assert.assertTrue(concurrentReferenceMap.containsValue(testValue2))[ CD ]
Line_7 $$ Object testValue2 = new Object()-->Line_17 $$ Assert.assertSame(testValue2, concurrentReferenceMap.get(testKey2))[ FD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentReferenceMap = new ConcurrentReferenceKeyHashMap<String, Object>(new ConcurrentReferenceValueHashMap<Reference<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY), FinalizeManager.SOFT_REFERENCE_FACTORY)-->Line_16 $$ Assert.assertTrue(concurrentReferenceMap.containsValue(testValue2))[ FD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_17 $$ Assert.assertSame(testValue2, concurrentReferenceMap.get(testKey2))[ CD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_31 $$ Assert.assertSame(testValue2, concurrentReferenceMap.get(testKey2))[ CD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_30 $$ Assert.assertTrue(concurrentReferenceMap.containsValue(testValue2))[ CD ]
Line_7 $$ Object testValue2 = new Object()-->Line_16 $$ Assert.assertTrue(concurrentReferenceMap.containsValue(testValue2))[ FD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_23 $$ Assert.assertTrue(concurrentReferenceMap.containsKey(testKey2))[ CD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_8 $$ ConcurrentMap<String, Object> concurrentReferenceMap = new ConcurrentReferenceKeyHashMap<String, Object>(new ConcurrentReferenceValueHashMap<Reference<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY), FinalizeManager.SOFT_REFERENCE_FACTORY)[ CD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_18 $$ testKey1 = null[ CD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_27 $$ ReflectionTestUtil.invoke(FinalizeManager.class, "_pollingCleanup", new Class<?>[0])[ CD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_10 $$ Assert.assertNull(concurrentReferenceMap.put(testKey2, testValue2))[ CD ]
Line_6 $$ Object testValue1 = new Object()-->Line_9 $$ Assert.assertNull(concurrentReferenceMap.put(testKey1, testValue1))[ FD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_15 $$ Assert.assertTrue(concurrentReferenceMap.containsKey(testKey2))[ CD ]
Line_6 $$ Object testValue1 = new Object()-->Line_22 $$ Assert.assertTrue(concurrentReferenceMap.containsValue(testValue1))[ FD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_35 $$ Assert.assertTrue(concurrentReferenceMap.isEmpty())[ CD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_3 $$ System.setProperty(FinalizeManager.class.getName() + ".thread.enabled", StringPool.FALSE)[ CD ]
Line_4 $$ String testKey1 = new String("testKey1")-->Line_14 $$ Assert.assertSame(testValue1, concurrentReferenceMap.get(testKey1))[ FD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_5 $$ String testKey2 = new String("testKey2")[ CD ]
Line_5 $$ String testKey2 = new String("testKey2")-->Line_17 $$ Assert.assertSame(testValue2, concurrentReferenceMap.get(testKey2))[ FD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentReferenceMap = new ConcurrentReferenceKeyHashMap<String, Object>(new ConcurrentReferenceValueHashMap<Reference<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY), FinalizeManager.SOFT_REFERENCE_FACTORY)-->Line_23 $$ Assert.assertTrue(concurrentReferenceMap.containsKey(testKey2))[ FD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_20 $$ ReflectionTestUtil.invoke(FinalizeManager.class, "_pollingCleanup", new Class<?>[0])[ CD ]
Line_6 $$ Object testValue1 = new Object()-->Line_13 $$ Assert.assertTrue(concurrentReferenceMap.containsValue(testValue1))[ FD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_12 $$ Assert.assertTrue(concurrentReferenceMap.containsKey(testKey1))[ CD ]
Line_7 $$ Object testValue2 = new Object()-->Line_24 $$ Assert.assertTrue(concurrentReferenceMap.containsValue(testValue2))[ FD ]
Line_7 $$ Object testValue2 = new Object()-->Line_25 $$ Assert.assertSame(testValue2, concurrentReferenceMap.get(testKey2))[ FD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_29 $$ Assert.assertTrue(concurrentReferenceMap.containsKey(testKey2))[ CD ]
Line_5 $$ String testKey2 = new String("testKey2")-->Line_29 $$ Assert.assertTrue(concurrentReferenceMap.containsKey(testKey2))[ FD ]
Line_7 $$ Object testValue2 = new Object()-->Line_32 $$ testValue2 = null[ FD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_6 $$ Object testValue1 = new Object()[ CD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentReferenceMap = new ConcurrentReferenceKeyHashMap<String, Object>(new ConcurrentReferenceValueHashMap<Reference<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY), FinalizeManager.SOFT_REFERENCE_FACTORY)-->Line_30 $$ Assert.assertTrue(concurrentReferenceMap.containsValue(testValue2))[ FD ]
Line_5 $$ String testKey2 = new String("testKey2")-->Line_10 $$ Assert.assertNull(concurrentReferenceMap.put(testKey2, testValue2))[ FD ]
Line_4 $$ String testKey1 = new String("testKey1")-->Line_9 $$ Assert.assertNull(concurrentReferenceMap.put(testKey1, testValue1))[ FD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentReferenceMap = new ConcurrentReferenceKeyHashMap<String, Object>(new ConcurrentReferenceValueHashMap<Reference<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY), FinalizeManager.SOFT_REFERENCE_FACTORY)-->Line_35 $$ Assert.assertTrue(concurrentReferenceMap.isEmpty())[ FD ]
Line_5 $$ String testKey2 = new String("testKey2")-->Line_15 $$ Assert.assertTrue(concurrentReferenceMap.containsKey(testKey2))[ FD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentReferenceMap = new ConcurrentReferenceKeyHashMap<String, Object>(new ConcurrentReferenceValueHashMap<Reference<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY), FinalizeManager.SOFT_REFERENCE_FACTORY)-->Line_12 $$ Assert.assertTrue(concurrentReferenceMap.containsKey(testKey1))[ FD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentReferenceMap = new ConcurrentReferenceKeyHashMap<String, Object>(new ConcurrentReferenceValueHashMap<Reference<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY), FinalizeManager.SOFT_REFERENCE_FACTORY)-->Line_9 $$ Assert.assertNull(concurrentReferenceMap.put(testKey1, testValue1))[ FD ]
Line_2 $$ public void testSoftKeyWeakValue() throws InterruptedException -->Line_9 $$ Assert.assertNull(concurrentReferenceMap.put(testKey1, testValue1))[ CD ]
