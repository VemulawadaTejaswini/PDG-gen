Line_2 $$ public void shouldAllowFilterBySuperType() -->Line_7 $$ inputMap.put("4", 4)[ CD ]
Line_2 $$ public void shouldAllowFilterBySuperType() -->Line_14 $$ Assert.assertEquals(2, outputMap.size())[ CD ]
Line_2 $$ public void shouldAllowFilterBySuperType() -->Line_3 $$ Map<String, Integer> inputMap = new HashMap()[ CD ]
Line_2 $$ public void shouldAllowFilterBySuperType() -->Line_5 $$ inputMap.put("2", 2)[ CD ]
Line_2 $$ public void shouldAllowFilterBySuperType() -->Line_9 $$ Map<String, Integer> outputMap = MapUtil.filterByValues(inputMap, new PredicateFilter<Number>() [ CD ]
Line_9 $$ Map<String, Integer> outputMap = MapUtil.filterByValues(inputMap, new PredicateFilter<Number>() -->Line_15 $$ Assert.assertEquals((Integer) 2, outputMap.get("2"))[ FD ]
Line_2 $$ public void shouldAllowFilterBySuperType() -->Line_4 $$ inputMap.put("1", 1)[ CD ]
Line_2 $$ public void shouldAllowFilterBySuperType() -->Line_15 $$ Assert.assertEquals((Integer) 2, outputMap.get("2"))[ CD ]
Line_2 $$ public void shouldAllowFilterBySuperType() -->Line_16 $$ Assert.assertEquals((Integer) 4, outputMap.get("4"))[ CD ]
Line_3 $$ Map<String, Integer> inputMap = new HashMap()-->Line_9 $$ Map<String, Integer> outputMap = MapUtil.filterByValues(inputMap, new PredicateFilter<Number>() [ FD ]
Line_2 $$ public void shouldAllowFilterBySuperType() -->Line_8 $$ inputMap.put("5", 5)[ CD ]
Line_9 $$ Map<String, Integer> outputMap = MapUtil.filterByValues(inputMap, new PredicateFilter<Number>() -->Line_11 $$ return (number.intValue() % 2 == 0)[ CD ]
Line_9 $$ Map<String, Integer> outputMap = MapUtil.filterByValues(inputMap, new PredicateFilter<Number>() -->Line_16 $$ Assert.assertEquals((Integer) 4, outputMap.get("4"))[ FD ]
Line_2 $$ public void shouldAllowFilterBySuperType() -->Line_6 $$ inputMap.put("3", 3)[ CD ]
Line_3 $$ Map<String, Integer> inputMap = new HashMap()-->Line_5 $$ inputMap.put("2", 2)[ FD ]
Line_9 $$ Map<String, Integer> outputMap = MapUtil.filterByValues(inputMap, new PredicateFilter<Number>() -->Line_11 $$ return (number.intValue() % 2 == 0)[ FD ]
Line_3 $$ Map<String, Integer> inputMap = new HashMap()-->Line_7 $$ inputMap.put("4", 4)[ FD ]
Line_3 $$ Map<String, Integer> inputMap = new HashMap()-->Line_8 $$ inputMap.put("5", 5)[ FD ]
Line_3 $$ Map<String, Integer> inputMap = new HashMap()-->Line_4 $$ inputMap.put("1", 1)[ FD ]
Line_3 $$ Map<String, Integer> inputMap = new HashMap()-->Line_6 $$ inputMap.put("3", 3)[ FD ]
Line_9 $$ Map<String, Integer> outputMap = MapUtil.filterByValues(inputMap, new PredicateFilter<Number>() -->Line_14 $$ Assert.assertEquals(2, outputMap.size())[ FD ]
