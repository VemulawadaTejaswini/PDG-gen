Line_4 $$ File f = new File(getProjectPath(), relativePath)-->Line_5 $$ FileUtil.ensureExists(f.getParentFile())[ FD ]
Line_4 $$ File f = new File(getProjectPath(), relativePath)-->Line_9 $$ throw new AssertionError("Unable to create the project sub file: " + f.getAbsolutePath())[ FD ]
Line_2 $$ protected VirtualFile createProjectJarSubFile(String relativePath, Pair<ByteSequence, String>... contentEntries) throws IOException -->Line_20 $$ final VirtualFile jarFile = JarFileSystem.getInstance().getJarRootForLocalFile(virtualFile)[ CD ]
Line_2 $$ protected VirtualFile createProjectJarSubFile(String relativePath, Pair<ByteSequence, String>... contentEntries) throws IOException -->Line_18 $$ final VirtualFile virtualFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(f)[ CD ]
Line_20 $$ final VirtualFile jarFile = JarFileSystem.getInstance().getJarRootForLocalFile(virtualFile)-->Line_21 $$ assertNotNull(jarFile)[ FD ]
Line_2 $$ protected VirtualFile createProjectJarSubFile(String relativePath, Pair<ByteSequence, String>... contentEntries) throws IOException -->Line_21 $$ assertNotNull(jarFile)[ CD ]
Line_4 $$ File f = new File(getProjectPath(), relativePath)-->Line_7 $$ final boolean created = f.createNewFile()[ FD ]
Line_2 $$ protected VirtualFile createProjectJarSubFile(String relativePath, Pair<ByteSequence, String>... contentEntries) throws IOException -->Line_3 $$ assertTrue("Use 'jar' extension for JAR files: '" + relativePath + "'", FileUtilRt.extensionEquals(relativePath, "jar"))[ CD ]
Line_13 $$ JarOutputStream target = new JarOutputStream(new FileOutputStream(f), manifest)-->Line_17 $$ target.close()[ FD ]
Line_4 $$ File f = new File(getProjectPath(), relativePath)-->Line_6 $$ FileUtil.ensureCanCreateFile(f)[ FD ]
Line_2 $$ protected VirtualFile createProjectJarSubFile(String relativePath, Pair<ByteSequence, String>... contentEntries) throws IOException -->Line_13 $$ JarOutputStream target = new JarOutputStream(new FileOutputStream(f), manifest)[ CD ]
Line_13 $$ JarOutputStream target = new JarOutputStream(new FileOutputStream(f), manifest)-->Line_15 $$ addJarEntry(contentEntry.first.getBytes(), contentEntry.second, target)[ FD ]
Line_2 $$ protected VirtualFile createProjectJarSubFile(String relativePath, Pair<ByteSequence, String>... contentEntries) throws IOException -->Line_8 $$ if (!created) [ CD ]
Line_2 $$ protected VirtualFile createProjectJarSubFile(String relativePath, Pair<ByteSequence, String>... contentEntries) throws IOException -->Line_17 $$ target.close()[ CD ]
Line_18 $$ final VirtualFile virtualFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(f)-->Line_19 $$ assertNotNull(virtualFile)[ FD ]
Line_18 $$ final VirtualFile virtualFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(f)-->Line_20 $$ final VirtualFile jarFile = JarFileSystem.getInstance().getJarRootForLocalFile(virtualFile)[ FD ]
Line_2 $$ protected VirtualFile createProjectJarSubFile(String relativePath, Pair<ByteSequence, String>... contentEntries) throws IOException -->Line_3 $$ assertTrue("Use 'jar' extension for JAR files: '" + relativePath + "'", FileUtilRt.extensionEquals(relativePath, "jar"))[ FD ]
Line_2 $$ protected VirtualFile createProjectJarSubFile(String relativePath, Pair<ByteSequence, String>... contentEntries) throws IOException -->Line_5 $$ FileUtil.ensureExists(f.getParentFile())[ CD ]
Line_2 $$ protected VirtualFile createProjectJarSubFile(String relativePath, Pair<ByteSequence, String>... contentEntries) throws IOException -->Line_19 $$ assertNotNull(virtualFile)[ CD ]
Line_2 $$ protected VirtualFile createProjectJarSubFile(String relativePath, Pair<ByteSequence, String>... contentEntries) throws IOException -->Line_4 $$ File f = new File(getProjectPath(), relativePath)[ CD ]
Line_2 $$ protected VirtualFile createProjectJarSubFile(String relativePath, Pair<ByteSequence, String>... contentEntries) throws IOException -->Line_7 $$ final boolean created = f.createNewFile()[ CD ]
Line_4 $$ File f = new File(getProjectPath(), relativePath)-->Line_18 $$ final VirtualFile virtualFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(f)[ FD ]
Line_2 $$ protected VirtualFile createProjectJarSubFile(String relativePath, Pair<ByteSequence, String>... contentEntries) throws IOException -->Line_6 $$ FileUtil.ensureCanCreateFile(f)[ CD ]
Line_11 $$ Manifest manifest = new Manifest()-->Line_12 $$ manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1.0")[ FD ]
Line_2 $$ protected VirtualFile createProjectJarSubFile(String relativePath, Pair<ByteSequence, String>... contentEntries) throws IOException -->Line_11 $$ Manifest manifest = new Manifest()[ CD ]
Line_7 $$ final boolean created = f.createNewFile()-->Line_8 $$ if (!created) [ FD ]
Line_2 $$ protected VirtualFile createProjectJarSubFile(String relativePath, Pair<ByteSequence, String>... contentEntries) throws IOException -->Line_12 $$ manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1.0")[ CD ]
Line_2 $$ protected VirtualFile createProjectJarSubFile(String relativePath, Pair<ByteSequence, String>... contentEntries) throws IOException -->Line_22 $$ return jarFile[ CD ]
