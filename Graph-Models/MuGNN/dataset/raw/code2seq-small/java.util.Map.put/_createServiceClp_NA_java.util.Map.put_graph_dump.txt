Line_2 $$ private void _createServiceClp(Entity entity, int sessionType) throws Exception -->Line_7 $$ Map<String, Object> context = _getContext()[ CD ]
Line_3 $$ if (Validator.isNull(_pluginName)) -->Line_4 $$ return[ CD ]
Line_7 $$ Map<String, Object> context = _getContext()-->Line_10 $$ context.put("sessionTypeName", _getSessionTypeName(sessionType))[ FD ]
Line_2 $$ private void _createServiceClp(Entity entity, int sessionType) throws Exception -->Line_9 $$ context.put("methods", _getMethods(javaClass))[ CD ]
Line_2 $$ private void _createServiceClp(Entity entity, int sessionType) throws Exception -->Line_14 $$ ToolsUtil.writeFile(ejbFile, content, _author, _modifiedFileNames)[ CD ]
Line_2 $$ private void _createServiceClp(Entity entity, int sessionType) throws Exception -->Line_3 $$ if (Validator.isNull(_pluginName)) [ CD ]
Line_7 $$ Map<String, Object> context = _getContext()-->Line_8 $$ context.put("entity", entity)[ FD ]
Line_2 $$ private void _createServiceClp(Entity entity, int sessionType) throws Exception -->Line_10 $$ context.put("sessionTypeName", _getSessionTypeName(sessionType))[ CD ]
Line_2 $$ private void _createServiceClp(Entity entity, int sessionType) throws Exception -->Line_12 $$ String content = _processTemplate(_tplServiceClp, context)[ CD ]
Line_12 $$ String content = _processTemplate(_tplServiceClp, context)-->Line_14 $$ ToolsUtil.writeFile(ejbFile, content, _author, _modifiedFileNames)[ FD ]
Line_6 $$ JavaClass javaClass = _getJavaClass(_serviceOutputPath + "/service/" + entity.getName() + _getSessionTypeName(sessionType) + "Service.java")-->Line_9 $$ context.put("methods", _getMethods(javaClass))[ FD ]
Line_11 $$ context = _putDeprecatedKeys(context, javaClass)-->Line_12 $$ String content = _processTemplate(_tplServiceClp, context)[ FD ]
Line_2 $$ private void _createServiceClp(Entity entity, int sessionType) throws Exception -->Line_6 $$ JavaClass javaClass = _getJavaClass(_serviceOutputPath + "/service/" + entity.getName() + _getSessionTypeName(sessionType) + "Service.java")[ CD ]
Line_7 $$ Map<String, Object> context = _getContext()-->Line_9 $$ context.put("methods", _getMethods(javaClass))[ FD ]
Line_13 $$ File ejbFile = new File(_serviceOutputPath + "/service/" + entity.getName() + _getSessionTypeName(sessionType) + "ServiceClp.java")-->Line_14 $$ ToolsUtil.writeFile(ejbFile, content, _author, _modifiedFileNames)[ FD ]
Line_2 $$ private void _createServiceClp(Entity entity, int sessionType) throws Exception -->Line_10 $$ context.put("sessionTypeName", _getSessionTypeName(sessionType))[ FD ]
Line_2 $$ private void _createServiceClp(Entity entity, int sessionType) throws Exception -->Line_8 $$ context.put("entity", entity)[ FD ]
Line_2 $$ private void _createServiceClp(Entity entity, int sessionType) throws Exception -->Line_6 $$ JavaClass javaClass = _getJavaClass(_serviceOutputPath + "/service/" + entity.getName() + _getSessionTypeName(sessionType) + "Service.java")[ FD ]
Line_2 $$ private void _createServiceClp(Entity entity, int sessionType) throws Exception -->Line_11 $$ context = _putDeprecatedKeys(context, javaClass)[ CD ]
Line_2 $$ private void _createServiceClp(Entity entity, int sessionType) throws Exception -->Line_8 $$ context.put("entity", entity)[ CD ]
Line_2 $$ private void _createServiceClp(Entity entity, int sessionType) throws Exception -->Line_13 $$ File ejbFile = new File(_serviceOutputPath + "/service/" + entity.getName() + _getSessionTypeName(sessionType) + "ServiceClp.java")[ CD ]
Line_2 $$ private void _createServiceClp(Entity entity, int sessionType) throws Exception -->Line_13 $$ File ejbFile = new File(_serviceOutputPath + "/service/" + entity.getName() + _getSessionTypeName(sessionType) + "ServiceClp.java")[ FD ]
Line_7 $$ Map<String, Object> context = _getContext()-->Line_11 $$ context = _putDeprecatedKeys(context, javaClass)[ FD ]
Line_6 $$ JavaClass javaClass = _getJavaClass(_serviceOutputPath + "/service/" + entity.getName() + _getSessionTypeName(sessionType) + "Service.java")-->Line_11 $$ context = _putDeprecatedKeys(context, javaClass)[ FD ]
Line_7 $$ Map<String, Object> context = _getContext()-->Line_12 $$ String content = _processTemplate(_tplServiceClp, context)[ FD ]
