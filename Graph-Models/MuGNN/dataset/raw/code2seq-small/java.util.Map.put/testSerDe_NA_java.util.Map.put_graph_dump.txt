Line_2 $$ public void testSerDe() throws Exception -->Line_13 $$ expected1.put(2.0, 1L)[ CD ]
Line_2 $$ public void testSerDe() throws Exception -->Line_16 $$ expected1.put(23.0, 1L)[ CD ]
Line_2 $$ public void testSerDe() throws Exception -->Line_17 $$ expected1.put(36.0, 1L)[ CD ]
Line_12 $$ Map<Double, Long> expected1 = new LinkedHashMap<Double, Long>(5)-->Line_17 $$ expected1.put(36.0, 1L)[ FD ]
Line_19 $$ for (Map.Entry<Double, Long> actual : deserialized.getAsMap().entrySet()) -->Line_22 $$ assertEquals(entry.getValue(), actual.getValue())[ FD ]
Line_2 $$ public void testSerDe() throws Exception -->Line_11 $$ StreamingHistogram deserialized = StreamingHistogram.serializer.deserialize(new DataInputBuffer(bytes))[ CD ]
Line_2 $$ public void testSerDe() throws Exception -->Line_18 $$ Iterator<Map.Entry<Double, Long>> expectedItr = expected1.entrySet().iterator()[ CD ]
Line_3 $$ StreamingHistogram hist = new StreamingHistogram(5)-->Line_9 $$ StreamingHistogram.serializer.serialize(hist, out)[ FD ]
Line_2 $$ public void testSerDe() throws Exception -->Line_3 $$ StreamingHistogram hist = new StreamingHistogram(5)[ CD ]
Line_2 $$ public void testSerDe() throws Exception -->Line_15 $$ expected1.put(17.5, 2L)[ CD ]
Line_19 $$ for (Map.Entry<Double, Long> actual : deserialized.getAsMap().entrySet()) -->Line_21 $$ assertEquals(entry.getKey(), actual.getKey(), 0.01)[ FD ]
Line_2 $$ public void testSerDe() throws Exception -->Line_12 $$ Map<Double, Long> expected1 = new LinkedHashMap<Double, Long>(5)[ CD ]
Line_12 $$ Map<Double, Long> expected1 = new LinkedHashMap<Double, Long>(5)-->Line_18 $$ Iterator<Map.Entry<Double, Long>> expectedItr = expected1.entrySet().iterator()[ FD ]
Line_3 $$ StreamingHistogram hist = new StreamingHistogram(5)-->Line_6 $$ hist.update(samples[i])[ FD ]
Line_11 $$ StreamingHistogram deserialized = StreamingHistogram.serializer.deserialize(new DataInputBuffer(bytes))-->Line_19 $$ for (Map.Entry<Double, Long> actual : deserialized.getAsMap().entrySet()) [ FD ]
Line_12 $$ Map<Double, Long> expected1 = new LinkedHashMap<Double, Long>(5)-->Line_14 $$ expected1.put(9.5, 2L)[ FD ]
Line_2 $$ public void testSerDe() throws Exception -->Line_10 $$ byte[] bytes = out.toByteArray()[ CD ]
Line_20 $$ Map.Entry<Double, Long> entry = expectedItr.next()-->Line_21 $$ assertEquals(entry.getKey(), actual.getKey(), 0.01)[ FD ]
Line_12 $$ Map<Double, Long> expected1 = new LinkedHashMap<Double, Long>(5)-->Line_15 $$ expected1.put(17.5, 2L)[ FD ]
Line_20 $$ Map.Entry<Double, Long> entry = expectedItr.next()-->Line_22 $$ assertEquals(entry.getValue(), actual.getValue())[ FD ]
Line_8 $$ DataOutputBuffer out = new DataOutputBuffer()-->Line_10 $$ byte[] bytes = out.toByteArray()[ FD ]
Line_2 $$ public void testSerDe() throws Exception -->Line_9 $$ StreamingHistogram.serializer.serialize(hist, out)[ CD ]
Line_2 $$ public void testSerDe() throws Exception -->Line_5 $$ for (int i = 0; i < samples.length; i++) [ CD ]
Line_18 $$ Iterator<Map.Entry<Double, Long>> expectedItr = expected1.entrySet().iterator()-->Line_20 $$ Map.Entry<Double, Long> entry = expectedItr.next()[ FD ]
Line_12 $$ Map<Double, Long> expected1 = new LinkedHashMap<Double, Long>(5)-->Line_16 $$ expected1.put(23.0, 1L)[ FD ]
Line_2 $$ public void testSerDe() throws Exception -->Line_14 $$ expected1.put(9.5, 2L)[ CD ]
Line_2 $$ public void testSerDe() throws Exception -->Line_8 $$ DataOutputBuffer out = new DataOutputBuffer()[ CD ]
Line_8 $$ DataOutputBuffer out = new DataOutputBuffer()-->Line_9 $$ StreamingHistogram.serializer.serialize(hist, out)[ FD ]
Line_2 $$ public void testSerDe() throws Exception -->Line_4 $$ long[] samples = new long[] [ CD ]
Line_5 $$ for (int i = 0; i < samples.length; i++) -->Line_6 $$ hist.update(samples[i])[ CD ]
Line_12 $$ Map<Double, Long> expected1 = new LinkedHashMap<Double, Long>(5)-->Line_13 $$ expected1.put(2.0, 1L)[ FD ]
