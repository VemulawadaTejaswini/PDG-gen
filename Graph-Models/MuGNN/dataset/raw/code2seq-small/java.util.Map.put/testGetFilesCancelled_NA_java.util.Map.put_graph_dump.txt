Line_2 $$ public void testGetFilesCancelled() -->Line_6 $$ pathMap.put(Paths.get("remoteFile2"), Paths.get("requestFile2"))[ CD ]
Line_3 $$ Map<Path, Path> pathMap = new HashMap()-->Line_6 $$ pathMap.put(Paths.get("remoteFile2"), Paths.get("requestFile2"))[ FD ]
Line_3 $$ Map<Path, Path> pathMap = new HashMap()-->Line_5 $$ pathMap.put(remoteFilePath1, Paths.get("localFile1"))[ FD ]
Line_2 $$ public void testGetFilesCancelled() -->Line_11 $$ fileGetNoticeableFuture.cancel(true)[ CD ]
Line_2 $$ public void testGetFilesCancelled() -->Line_10 $$ Assert.assertNotNull(fileGetNoticeableFuture)[ CD ]
Line_2 $$ public void testGetFilesCancelled() -->Line_8 $$ Map<Path, NoticeableFuture<FileResponse>> openBids = _asyncBroker.getOpenBids()[ CD ]
Line_2 $$ public void testGetFilesCancelled() -->Line_9 $$ NoticeableFuture<FileResponse> fileGetNoticeableFuture = openBids.get(remoteFilePath1)[ CD ]
Line_4 $$ Path remoteFilePath1 = Paths.get("remoteFile1")-->Line_9 $$ NoticeableFuture<FileResponse> fileGetNoticeableFuture = openBids.get(remoteFilePath1)[ FD ]
Line_2 $$ public void testGetFilesCancelled() -->Line_5 $$ pathMap.put(remoteFilePath1, Paths.get("localFile1"))[ CD ]
Line_2 $$ public void testGetFilesCancelled() -->Line_4 $$ Path remoteFilePath1 = Paths.get("remoteFile1")[ CD ]
Line_3 $$ Map<Path, Path> pathMap = new HashMap()-->Line_7 $$ NoticeableFuture<Map<Path, Path>> noticeableFuture = _nettyRepository.getFiles(_embeddedChannel, pathMap, true)[ FD ]
Line_2 $$ public void testGetFilesCancelled() -->Line_7 $$ NoticeableFuture<Map<Path, Path>> noticeableFuture = _nettyRepository.getFiles(_embeddedChannel, pathMap, true)[ CD ]
Line_2 $$ public void testGetFilesCancelled() -->Line_12 $$ Assert.assertTrue(noticeableFuture.isCancelled())[ CD ]
Line_7 $$ NoticeableFuture<Map<Path, Path>> noticeableFuture = _nettyRepository.getFiles(_embeddedChannel, pathMap, true)-->Line_12 $$ Assert.assertTrue(noticeableFuture.isCancelled())[ FD ]
Line_9 $$ NoticeableFuture<FileResponse> fileGetNoticeableFuture = openBids.get(remoteFilePath1)-->Line_11 $$ fileGetNoticeableFuture.cancel(true)[ FD ]
Line_2 $$ public void testGetFilesCancelled() -->Line_3 $$ Map<Path, Path> pathMap = new HashMap()[ CD ]
Line_8 $$ Map<Path, NoticeableFuture<FileResponse>> openBids = _asyncBroker.getOpenBids()-->Line_9 $$ NoticeableFuture<FileResponse> fileGetNoticeableFuture = openBids.get(remoteFilePath1)[ FD ]
Line_4 $$ Path remoteFilePath1 = Paths.get("remoteFile1")-->Line_5 $$ pathMap.put(remoteFilePath1, Paths.get("localFile1"))[ FD ]
Line_9 $$ NoticeableFuture<FileResponse> fileGetNoticeableFuture = openBids.get(remoteFilePath1)-->Line_10 $$ Assert.assertNotNull(fileGetNoticeableFuture)[ FD ]
