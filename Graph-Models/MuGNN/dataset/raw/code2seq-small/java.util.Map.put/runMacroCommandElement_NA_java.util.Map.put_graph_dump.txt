Line_10 $$ for (String returnName : returnNames) -->Line_11 $$ if (PoshiRunnerVariablesUtil.containsKeyInReturnMap(returnName)) [ FD ]
Line_11 $$ if (PoshiRunnerVariablesUtil.containsKeyInReturnMap(returnName)) -->Line_13 $$ macroReturns.put(returnName, returnValue)[ CD ]
Line_2 $$ public static Map<String, String> runMacroCommandElement(String classCommandName, Element commandElement) throws Exception -->Line_3 $$ PoshiRunnerStackTraceUtil.setCurrentElement(commandElement)[ CD ]
Line_2 $$ public static Map<String, String> runMacroCommandElement(String classCommandName, Element commandElement) throws Exception -->Line_3 $$ PoshiRunnerStackTraceUtil.setCurrentElement(commandElement)[ FD ]
Line_2 $$ public static Map<String, String> runMacroCommandElement(String classCommandName, Element commandElement) throws Exception -->Line_5 $$ parseElement(commandElement)[ CD ]
Line_2 $$ public static Map<String, String> runMacroCommandElement(String classCommandName, Element commandElement) throws Exception -->Line_8 $$ if (Validator.isNotNull(returns)) [ CD ]
Line_10 $$ for (String returnName : returnNames) -->Line_13 $$ macroReturns.put(returnName, returnValue)[ FD ]
Line_2 $$ public static Map<String, String> runMacroCommandElement(String classCommandName, Element commandElement) throws Exception -->Line_18 $$ return macroReturns[ CD ]
Line_2 $$ public static Map<String, String> runMacroCommandElement(String classCommandName, Element commandElement) throws Exception -->Line_4 $$ PoshiRunnerVariablesUtil.pushCommandMap()[ CD ]
Line_7 $$ String returns = commandElement.attributeValue("returns")-->Line_8 $$ if (Validator.isNotNull(returns)) [ FD ]
Line_8 $$ if (Validator.isNotNull(returns)) -->Line_9 $$ String[] returnNames = StringUtil.split(returns)[ CD ]
Line_10 $$ for (String returnName : returnNames) -->Line_12 $$ String returnValue = PoshiRunnerVariablesUtil.getValueFromReturnMap(returnName)[ FD ]
Line_2 $$ public static Map<String, String> runMacroCommandElement(String classCommandName, Element commandElement) throws Exception -->Line_7 $$ String returns = commandElement.attributeValue("returns")[ FD ]
Line_7 $$ String returns = commandElement.attributeValue("returns")-->Line_9 $$ String[] returnNames = StringUtil.split(returns)[ FD ]
Line_6 $$ Map<String, String> macroReturns = new HashMap()-->Line_13 $$ macroReturns.put(returnName, returnValue)[ FD ]
Line_11 $$ if (PoshiRunnerVariablesUtil.containsKeyInReturnMap(returnName)) -->Line_12 $$ String returnValue = PoshiRunnerVariablesUtil.getValueFromReturnMap(returnName)[ CD ]
Line_2 $$ public static Map<String, String> runMacroCommandElement(String classCommandName, Element commandElement) throws Exception -->Line_7 $$ String returns = commandElement.attributeValue("returns")[ CD ]
Line_2 $$ public static Map<String, String> runMacroCommandElement(String classCommandName, Element commandElement) throws Exception -->Line_5 $$ parseElement(commandElement)[ FD ]
Line_12 $$ String returnValue = PoshiRunnerVariablesUtil.getValueFromReturnMap(returnName)-->Line_13 $$ macroReturns.put(returnName, returnValue)[ FD ]
Line_2 $$ public static Map<String, String> runMacroCommandElement(String classCommandName, Element commandElement) throws Exception -->Line_17 $$ PoshiRunnerVariablesUtil.popCommandMap()[ CD ]
Line_2 $$ public static Map<String, String> runMacroCommandElement(String classCommandName, Element commandElement) throws Exception -->Line_6 $$ Map<String, String> macroReturns = new HashMap()[ CD ]
