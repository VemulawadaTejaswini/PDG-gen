Line_2 $$ public Constructor<?>[] determineCandidateConstructors(Class<?> beanClass, final String beanName) throws BeansException -->Line_32 $$ Class<?> userClass = ClassUtils.getUserClass(beanClass)[ FD ]
Line_6 $$ Lookup lookup = method.getAnnotation(Lookup.class)-->Line_7 $$ if (lookup != null) [ FD ]
Line_7 $$ if (lookup != null) -->Line_8 $$ LookupOverride override = new LookupOverride(method, lookup.value())[ CD ]
Line_41 $$ if (ann != null) -->Line_49 $$ if (required) [ CD ]
Line_62 $$ if (defaultConstructor != null) -->Line_63 $$ candidates.add(defaultConstructor)[ CD ]
Line_41 $$ if (ann != null) -->Line_42 $$ if (requiredConstructor != null) [ CD ]
Line_41 $$ if (ann != null) -->Line_45 $$ if (candidate.getParameterTypes().length == 0) [ CD ]
Line_6 $$ Lookup lookup = method.getAnnotation(Lookup.class)-->Line_8 $$ LookupOverride override = new LookupOverride(method, lookup.value())[ FD ]
Line_41 $$ if (ann != null) -->Line_48 $$ boolean required = determineRequiredStatus(ann)[ CD ]
Line_24 $$ if (candidateConstructors == null) -->Line_60 $$ if (!candidates.isEmpty()) [ CD ]
Line_2 $$ public Constructor<?>[] determineCandidateConstructors(Class<?> beanClass, final String beanName) throws BeansException -->Line_20 $$ Constructor<?>[] candidateConstructors = this.candidateConstructorsCache.get(beanClass)[ CD ]
Line_8 $$ LookupOverride override = new LookupOverride(method, lookup.value())-->Line_11 $$ mbd.getMethodOverrides().addOverride(override)[ FD ]
Line_2 $$ public Constructor<?>[] determineCandidateConstructors(Class<?> beanClass, final String beanName) throws BeansException -->Line_10 $$ RootBeanDefinition mbd = (RootBeanDefinition) beanFactory.getMergedBeanDefinition(beanName)[ FD ]
Line_2 $$ public Constructor<?>[] determineCandidateConstructors(Class<?> beanClass, final String beanName) throws BeansException -->Line_25 $$ Constructor<?>[] rawCandidates = beanClass.getDeclaredConstructors()[ FD ]
Line_10 $$ RootBeanDefinition mbd = (RootBeanDefinition) beanFactory.getMergedBeanDefinition(beanName)-->Line_11 $$ mbd.getMethodOverrides().addOverride(override)[ FD ]
Line_49 $$ if (required) -->Line_50 $$ if (!candidates.isEmpty()) [ CD ]
Line_41 $$ if (ann != null) -->Line_56 $$ if (candidate.getParameterTypes().length == 0) [ CD ]
Line_60 $$ if (!candidates.isEmpty()) -->Line_69 $$ if (rawCandidates.length == 1 && rawCandidates[0].getParameterTypes().length > 0) [ CD ]
Line_2 $$ public Constructor<?>[] determineCandidateConstructors(Class<?> beanClass, final String beanName) throws BeansException -->Line_23 $$ candidateConstructors = this.candidateConstructorsCache.get(beanClass)[ FD ]
Line_2 $$ public Constructor<?>[] determineCandidateConstructors(Class<?> beanClass, final String beanName) throws BeansException -->Line_33 $$ if (userClass != beanClass) [ FD ]
Line_61 $$ if (requiredConstructor == null) -->Line_62 $$ if (defaultConstructor != null) [ CD ]
Line_3 $$ if (!this.lookupMethodsChecked.contains(beanName)) -->Line_4 $$ ReflectionUtils.doWithMethods(beanClass, new ReflectionUtils.MethodCallback() [ CD ]
Line_24 $$ if (candidateConstructors == null) -->Line_74 $$ this.candidateConstructorsCache.put(beanClass, candidateConstructors)[ CD ]
Line_4 $$ ReflectionUtils.doWithMethods(beanClass, new ReflectionUtils.MethodCallback() -->Line_7 $$ if (lookup != null) [ CD ]
Line_4 $$ ReflectionUtils.doWithMethods(beanClass, new ReflectionUtils.MethodCallback() -->Line_6 $$ Lookup lookup = method.getAnnotation(Lookup.class)[ FD ]
Line_2 $$ public Constructor<?>[] determineCandidateConstructors(Class<?> beanClass, final String beanName) throws BeansException -->Line_74 $$ this.candidateConstructorsCache.put(beanClass, candidateConstructors)[ FD ]
Line_60 $$ if (!candidates.isEmpty()) -->Line_68 $$ candidateConstructors = candidates.toArray(new Constructor<?>[candidates.size()])[ CD ]
Line_2 $$ public Constructor<?>[] determineCandidateConstructors(Class<?> beanClass, final String beanName) throws BeansException -->Line_78 $$ return (candidateConstructors.length > 0 ? candidateConstructors : null)[ CD ]
Line_64 $$ if (candidates.size() == 1 && logger.isWarnEnabled()) -->Line_65 $$ logger.warn("Inconsistent constructor declaration on bean with name '" + beanName + "': single autowire-marked constructor flagged as optional - this constructor " + "is effectively required since there is no default constructor to fall back to: " + candidates.get(0))[ CD ]
Line_60 $$ if (!candidates.isEmpty()) -->Line_61 $$ if (requiredConstructor == null) [ CD ]
Line_3 $$ if (!this.lookupMethodsChecked.contains(beanName)) -->Line_18 $$ this.lookupMethodsChecked.add(beanName)[ CD ]
Line_2 $$ public Constructor<?>[] determineCandidateConstructors(Class<?> beanClass, final String beanName) throws BeansException -->Line_20 $$ Constructor<?>[] candidateConstructors = this.candidateConstructorsCache.get(beanClass)[ FD ]
Line_4 $$ ReflectionUtils.doWithMethods(beanClass, new ReflectionUtils.MethodCallback() -->Line_6 $$ Lookup lookup = method.getAnnotation(Lookup.class)[ CD ]
Line_2 $$ public Constructor<?>[] determineCandidateConstructors(Class<?> beanClass, final String beanName) throws BeansException -->Line_21 $$ if (candidateConstructors == null) [ CD ]
Line_2 $$ public Constructor<?>[] determineCandidateConstructors(Class<?> beanClass, final String beanName) throws BeansException -->Line_3 $$ if (!this.lookupMethodsChecked.contains(beanName)) [ FD ]
Line_2 $$ public Constructor<?>[] determineCandidateConstructors(Class<?> beanClass, final String beanName) throws BeansException -->Line_3 $$ if (!this.lookupMethodsChecked.contains(beanName)) [ CD ]
Line_24 $$ if (candidateConstructors == null) -->Line_25 $$ Constructor<?>[] rawCandidates = beanClass.getDeclaredConstructors()[ CD ]
Line_31 $$ if (ann == null) -->Line_32 $$ Class<?> userClass = ClassUtils.getUserClass(beanClass)[ CD ]
Line_2 $$ public Constructor<?>[] determineCandidateConstructors(Class<?> beanClass, final String beanName) throws BeansException -->Line_4 $$ ReflectionUtils.doWithMethods(beanClass, new ReflectionUtils.MethodCallback() [ FD ]
Line_2 $$ public Constructor<?>[] determineCandidateConstructors(Class<?> beanClass, final String beanName) throws BeansException -->Line_18 $$ this.lookupMethodsChecked.add(beanName)[ FD ]
Line_31 $$ if (ann == null) -->Line_33 $$ if (userClass != beanClass) [ CD ]
Line_62 $$ if (defaultConstructor != null) -->Line_64 $$ if (candidates.size() == 1 && logger.isWarnEnabled()) [ CD ]
Line_41 $$ if (ann != null) -->Line_55 $$ candidates.add(candidate)[ CD ]
