Line_3 $$ final TransparentlyFailedValue<Map<String, Map<String, CharSequence>>, PatchSyntaxException> value = new TransparentlyFailedValue<Map<String, Map<String, CharSequence>>, PatchSyntaxException>()-->Line_15 $$ value.fail(e)[ FD ]
Line_2 $$ public TransparentlyFailedValueI<Map<String, Map<String, CharSequence>>, PatchSyntaxException> getAdditionalInfo(final Set<String> filterByPaths) -->Line_17 $$ return value[ CD ]
Line_2 $$ public TransparentlyFailedValueI<Map<String, Map<String, CharSequence>>, PatchSyntaxException> getAdditionalInfo(final Set<String> filterByPaths) -->Line_4 $$ final Map<String, Map<String, CharSequence>> map = myAdditionalInfoParser.getResultMap()[ CD ]
Line_6 $$ for (Map.Entry<String, Map<String, CharSequence>> entry : map.entrySet()) -->Line_8 $$ if (filterByPaths == null || filterByPaths.contains(entry.getKey())) [ FD ]
Line_6 $$ for (Map.Entry<String, Map<String, CharSequence>> entry : map.entrySet()) -->Line_7 $$ final Map<String, CharSequence> innerMap = entry.getValue()[ FD ]
Line_2 $$ public TransparentlyFailedValueI<Map<String, Map<String, CharSequence>>, PatchSyntaxException> getAdditionalInfo(final Set<String> filterByPaths) -->Line_8 $$ if (filterByPaths == null || filterByPaths.contains(entry.getKey())) [ FD ]
Line_2 $$ public TransparentlyFailedValueI<Map<String, Map<String, CharSequence>>, PatchSyntaxException> getAdditionalInfo(final Set<String> filterByPaths) -->Line_5 $$ final Map<String, Map<String, CharSequence>> newMap = new HashMap<String, Map<String, CharSequence>>()[ CD ]
Line_13 $$ final PatchSyntaxException e = myAdditionalInfoParser.getSyntaxException()-->Line_14 $$ if (e != null) [ FD ]
Line_14 $$ if (e != null) -->Line_15 $$ value.fail(e)[ CD ]
Line_2 $$ public TransparentlyFailedValueI<Map<String, Map<String, CharSequence>>, PatchSyntaxException> getAdditionalInfo(final Set<String> filterByPaths) -->Line_12 $$ value.set(newMap)[ CD ]
Line_3 $$ final TransparentlyFailedValue<Map<String, Map<String, CharSequence>>, PatchSyntaxException> value = new TransparentlyFailedValue<Map<String, Map<String, CharSequence>>, PatchSyntaxException>()-->Line_12 $$ value.set(newMap)[ FD ]
Line_7 $$ final Map<String, CharSequence> innerMap = entry.getValue()-->Line_9 $$ newMap.put(entry.getKey(), innerMap)[ FD ]
Line_4 $$ final Map<String, Map<String, CharSequence>> map = myAdditionalInfoParser.getResultMap()-->Line_6 $$ for (Map.Entry<String, Map<String, CharSequence>> entry : map.entrySet()) [ FD ]
Line_8 $$ if (filterByPaths == null || filterByPaths.contains(entry.getKey())) -->Line_9 $$ newMap.put(entry.getKey(), innerMap)[ CD ]
Line_5 $$ final Map<String, Map<String, CharSequence>> newMap = new HashMap<String, Map<String, CharSequence>>()-->Line_9 $$ newMap.put(entry.getKey(), innerMap)[ FD ]
Line_2 $$ public TransparentlyFailedValueI<Map<String, Map<String, CharSequence>>, PatchSyntaxException> getAdditionalInfo(final Set<String> filterByPaths) -->Line_13 $$ final PatchSyntaxException e = myAdditionalInfoParser.getSyntaxException()[ CD ]
Line_13 $$ final PatchSyntaxException e = myAdditionalInfoParser.getSyntaxException()-->Line_15 $$ value.fail(e)[ FD ]
Line_2 $$ public TransparentlyFailedValueI<Map<String, Map<String, CharSequence>>, PatchSyntaxException> getAdditionalInfo(final Set<String> filterByPaths) -->Line_14 $$ if (e != null) [ CD ]
Line_2 $$ public TransparentlyFailedValueI<Map<String, Map<String, CharSequence>>, PatchSyntaxException> getAdditionalInfo(final Set<String> filterByPaths) -->Line_3 $$ final TransparentlyFailedValue<Map<String, Map<String, CharSequence>>, PatchSyntaxException> value = new TransparentlyFailedValue<Map<String, Map<String, CharSequence>>, PatchSyntaxException>()[ CD ]
Line_6 $$ for (Map.Entry<String, Map<String, CharSequence>> entry : map.entrySet()) -->Line_9 $$ newMap.put(entry.getKey(), innerMap)[ FD ]
Line_5 $$ final Map<String, Map<String, CharSequence>> newMap = new HashMap<String, Map<String, CharSequence>>()-->Line_12 $$ value.set(newMap)[ FD ]
