Line_2 $$ private void loadProfilesFromOldFormat(Element processing) -->Line_4 $$ final boolean isUseClasspath = Boolean.parseBoolean(processing.getAttributeValue("useClasspath", "true"))[ CD ]
Line_2 $$ private void loadProfilesFromOldFormat(Element processing) -->Line_42 $$ if (processorPath.length() > 0) [ CD ]
Line_37 $$ final String dir = moduleElement.getAttributeValue("generatedDirName", (String) null)-->Line_59 $$ Set<String> set = dirNameToModulesMap.get(dir)[ FD ]
Line_2 $$ private void loadProfilesFromOldFormat(Element processing) -->Line_41 $$ myDefaultProcessorsProfile.setObtainProcessorsFromClasspath(isUseClasspath)[ CD ]
Line_59 $$ Set<String> set = dirNameToModulesMap.get(dir)-->Line_62 $$ dirNameToModulesMap.put(dir, set)[ FD ]
Line_57 $$ for (Couple<String> moduleDirPair : modulesToProcess) -->Line_58 $$ final String dir = moduleDirPair.getSecond()[ FD ]
Line_10 $$ final Element pathElement = (Element) child-->Line_11 $$ final String path = pathElement.getAttributeValue("value", (String) null)[ FD ]
Line_2 $$ private void loadProfilesFromOldFormat(Element processing) -->Line_8 $$ final List<Couple<String>> modulesToProcess = new ArrayList<Couple<String>>()[ CD ]
Line_27 $$ final String pair = tokenizer.nextToken()-->Line_28 $$ optionPairs.add(pair)[ FD ]
Line_11 $$ final String path = pathElement.getAttributeValue("value", (String) null)-->Line_12 $$ if (path != null) [ FD ]
Line_2 $$ private void loadProfilesFromOldFormat(Element processing) -->Line_66 $$ int profileIndex = 0[ CD ]
Line_46 $$ for (String pair : optionPairs) -->Line_47 $$ final int index = pair.indexOf("=")[ FD ]
Line_37 $$ final String dir = moduleElement.getAttributeValue("generatedDirName", (String) null)-->Line_38 $$ modulesToProcess.add(Couple.of(name, dir))[ FD ]
Line_3 $$ final boolean isEnabled = Boolean.parseBoolean(processing.getAttributeValue(JpsJavaCompilerConfigurationSerializer.ENABLED, "false"))-->Line_71 $$ profile.setEnabled(isEnabled)[ FD ]
Line_5 $$ final StringBuilder processorPath = new StringBuilder()-->Line_14 $$ processorPath.append(File.pathSeparator)[ FD ]
Line_2 $$ private void loadProfilesFromOldFormat(Element processing) -->Line_4 $$ final boolean isUseClasspath = Boolean.parseBoolean(processing.getAttributeValue("useClasspath", "true"))[ FD ]
Line_48 $$ if (index > 0) -->Line_49 $$ myDefaultProcessorsProfile.setOption(pair.substring(0, index), pair.substring(index + 1))[ CD ]
Line_2 $$ private void loadProfilesFromOldFormat(Element processing) -->Line_9 $$ for (Object child : processing.getChildren("processorPath")) [ FD ]
Line_60 $$ if (set == null) -->Line_62 $$ dirNameToModulesMap.put(dir, set)[ CD ]
Line_2 $$ private void loadProfilesFromOldFormat(Element processing) -->Line_45 $$ if (!optionPairs.isEmpty()) [ CD ]
Line_6 $$ final Set<String> optionPairs = new HashSet<String>()-->Line_45 $$ if (!optionPairs.isEmpty()) [ FD ]
Line_2 $$ private void loadProfilesFromOldFormat(Element processing) -->Line_6 $$ final Set<String> optionPairs = new HashSet<String>()[ CD ]
Line_21 $$ final String proc = processorElement.getAttributeValue(JpsJavaCompilerConfigurationSerializer.NAME, (String) null)-->Line_23 $$ processors.add(proc)[ FD ]
Line_8 $$ final List<Couple<String>> modulesToProcess = new ArrayList<Couple<String>>()-->Line_38 $$ modulesToProcess.add(Couple.of(name, dir))[ FD ]
Line_2 $$ private void loadProfilesFromOldFormat(Element processing) -->Line_5 $$ final StringBuilder processorPath = new StringBuilder()[ CD ]
Line_47 $$ final int index = pair.indexOf("=")-->Line_48 $$ if (index > 0) [ FD ]
Line_33 $$ final String name = moduleElement.getAttributeValue(JpsJavaCompilerConfigurationSerializer.NAME, (String) null)-->Line_34 $$ if (name == null) [ FD ]
Line_53 $$ for (String processor : processors) -->Line_54 $$ myDefaultProcessorsProfile.addProcessor(processor)[ FD ]
Line_56 $$ final Map<String, Set<String>> dirNameToModulesMap = new HashMap<String, Set<String>>()-->Line_67 $$ for (Map.Entry<String, Set<String>> entry : dirNameToModulesMap.entrySet()) [ FD ]
Line_37 $$ final String dir = moduleElement.getAttributeValue("generatedDirName", (String) null)-->Line_62 $$ dirNameToModulesMap.put(dir, set)[ FD ]
Line_67 $$ for (Map.Entry<String, Set<String>> entry : dirNameToModulesMap.entrySet()) -->Line_73 $$ for (String moduleName : entry.getValue()) [ FD ]
Line_69 $$ final ProcessorConfigProfile profile = new ProcessorConfigProfileImpl(myDefaultProcessorsProfile)-->Line_74 $$ profile.addModuleName(moduleName)[ FD ]
Line_7 $$ final Set<String> processors = new HashSet<String>()-->Line_23 $$ processors.add(proc)[ FD ]
Line_42 $$ if (processorPath.length() > 0) -->Line_43 $$ myDefaultProcessorsProfile.setProcessorPath(processorPath.toString())[ CD ]
Line_2 $$ private void loadProfilesFromOldFormat(Element processing) -->Line_7 $$ final Set<String> processors = new HashSet<String>()[ CD ]
Line_56 $$ final Map<String, Set<String>> dirNameToModulesMap = new HashMap<String, Set<String>>()-->Line_59 $$ Set<String> set = dirNameToModulesMap.get(dir)[ FD ]
Line_73 $$ for (String moduleName : entry.getValue()) -->Line_74 $$ profile.addModuleName(moduleName)[ FD ]
Line_5 $$ final StringBuilder processorPath = new StringBuilder()-->Line_16 $$ processorPath.append(path)[ FD ]
Line_2 $$ private void loadProfilesFromOldFormat(Element processing) -->Line_3 $$ final boolean isEnabled = Boolean.parseBoolean(processing.getAttributeValue(JpsJavaCompilerConfigurationSerializer.ENABLED, "false"))[ CD ]
Line_67 $$ for (Map.Entry<String, Set<String>> entry : dirNameToModulesMap.entrySet()) -->Line_68 $$ final String dirName = entry.getKey()[ FD ]
Line_46 $$ for (String pair : optionPairs) -->Line_49 $$ myDefaultProcessorsProfile.setOption(pair.substring(0, index), pair.substring(index + 1))[ FD ]
Line_25 $$ final StringTokenizer tokenizer = new StringTokenizer(processorElement.getAttributeValue("options", ""), " ", false)-->Line_27 $$ final String pair = tokenizer.nextToken()[ FD ]
Line_26 $$ while (tokenizer.hasMoreTokens()) -->Line_28 $$ optionPairs.add(pair)[ CD ]
Line_20 $$ final Element processorElement = (Element) child-->Line_21 $$ final String proc = processorElement.getAttributeValue(JpsJavaCompilerConfigurationSerializer.NAME, (String) null)[ FD ]
Line_13 $$ if (processorPath.length() > 0) -->Line_14 $$ processorPath.append(File.pathSeparator)[ CD ]
Line_5 $$ final StringBuilder processorPath = new StringBuilder()-->Line_42 $$ if (processorPath.length() > 0) [ FD ]
Line_12 $$ if (path != null) -->Line_16 $$ processorPath.append(path)[ CD ]
Line_2 $$ private void loadProfilesFromOldFormat(Element processing) -->Line_19 $$ for (Object child : processing.getChildren("processor")) [ FD ]
Line_4 $$ final boolean isUseClasspath = Boolean.parseBoolean(processing.getAttributeValue("useClasspath", "true"))-->Line_41 $$ myDefaultProcessorsProfile.setObtainProcessorsFromClasspath(isUseClasspath)[ FD ]
Line_59 $$ Set<String> set = dirNameToModulesMap.get(dir)-->Line_61 $$ set = new HashSet<String>()[ FD ]
Line_69 $$ final ProcessorConfigProfile profile = new ProcessorConfigProfileImpl(myDefaultProcessorsProfile)-->Line_70 $$ profile.setName("Profile" + (++profileIndex))[ FD ]
Line_2 $$ private void loadProfilesFromOldFormat(Element processing) -->Line_40 $$ myDefaultProcessorsProfile.setEnabled(false)[ CD ]
Line_47 $$ final int index = pair.indexOf("=")-->Line_49 $$ myDefaultProcessorsProfile.setOption(pair.substring(0, index), pair.substring(index + 1))[ FD ]
Line_2 $$ private void loadProfilesFromOldFormat(Element processing) -->Line_31 $$ for (Object child : processing.getChildren("processModule")) [ FD ]
Line_27 $$ final String pair = tokenizer.nextToken()-->Line_49 $$ myDefaultProcessorsProfile.setOption(pair.substring(0, index), pair.substring(index + 1))[ FD ]
Line_61 $$ set = new HashSet<String>()-->Line_64 $$ set.add(moduleDirPair.getFirst())[ FD ]
Line_6 $$ final Set<String> optionPairs = new HashSet<String>()-->Line_28 $$ optionPairs.add(pair)[ FD ]
Line_5 $$ final StringBuilder processorPath = new StringBuilder()-->Line_13 $$ if (processorPath.length() > 0) [ FD ]
Line_69 $$ final ProcessorConfigProfile profile = new ProcessorConfigProfileImpl(myDefaultProcessorsProfile)-->Line_71 $$ profile.setEnabled(isEnabled)[ FD ]
Line_59 $$ Set<String> set = dirNameToModulesMap.get(dir)-->Line_64 $$ set.add(moduleDirPair.getFirst())[ FD ]
Line_57 $$ for (Couple<String> moduleDirPair : modulesToProcess) -->Line_64 $$ set.add(moduleDirPair.getFirst())[ FD ]
Line_11 $$ final String path = pathElement.getAttributeValue("value", (String) null)-->Line_16 $$ processorPath.append(path)[ FD ]
Line_32 $$ final Element moduleElement = (Element) child-->Line_33 $$ final String name = moduleElement.getAttributeValue(JpsJavaCompilerConfigurationSerializer.NAME, (String) null)[ FD ]
Line_20 $$ final Element processorElement = (Element) child-->Line_25 $$ final StringTokenizer tokenizer = new StringTokenizer(processorElement.getAttributeValue("options", ""), " ", false)[ FD ]
Line_69 $$ final ProcessorConfigProfile profile = new ProcessorConfigProfileImpl(myDefaultProcessorsProfile)-->Line_76 $$ myModuleProcessorProfiles.add(profile)[ FD ]
Line_22 $$ if (proc != null) -->Line_23 $$ processors.add(proc)[ CD ]
Line_33 $$ final String name = moduleElement.getAttributeValue(JpsJavaCompilerConfigurationSerializer.NAME, (String) null)-->Line_38 $$ modulesToProcess.add(Couple.of(name, dir))[ FD ]
Line_2 $$ private void loadProfilesFromOldFormat(Element processing) -->Line_3 $$ final boolean isEnabled = Boolean.parseBoolean(processing.getAttributeValue(JpsJavaCompilerConfigurationSerializer.ENABLED, "false"))[ FD ]
Line_26 $$ while (tokenizer.hasMoreTokens()) -->Line_27 $$ final String pair = tokenizer.nextToken()[ CD ]
Line_60 $$ if (set == null) -->Line_61 $$ set = new HashSet<String>()[ CD ]
Line_56 $$ final Map<String, Set<String>> dirNameToModulesMap = new HashMap<String, Set<String>>()-->Line_62 $$ dirNameToModulesMap.put(dir, set)[ FD ]
Line_12 $$ if (path != null) -->Line_13 $$ if (processorPath.length() > 0) [ CD ]
Line_27 $$ final String pair = tokenizer.nextToken()-->Line_47 $$ final int index = pair.indexOf("=")[ FD ]
Line_69 $$ final ProcessorConfigProfile profile = new ProcessorConfigProfileImpl(myDefaultProcessorsProfile)-->Line_72 $$ profile.setGeneratedSourcesDirectoryName(dirName, false)[ FD ]
Line_61 $$ set = new HashSet<String>()-->Line_62 $$ dirNameToModulesMap.put(dir, set)[ FD ]
Line_66 $$ int profileIndex = 0-->Line_70 $$ profile.setName("Profile" + (++profileIndex))[ FD ]
Line_5 $$ final StringBuilder processorPath = new StringBuilder()-->Line_43 $$ myDefaultProcessorsProfile.setProcessorPath(processorPath.toString())[ FD ]
Line_25 $$ final StringTokenizer tokenizer = new StringTokenizer(processorElement.getAttributeValue("options", ""), " ", false)-->Line_26 $$ while (tokenizer.hasMoreTokens()) [ FD ]
Line_59 $$ Set<String> set = dirNameToModulesMap.get(dir)-->Line_60 $$ if (set == null) [ FD ]
Line_68 $$ final String dirName = entry.getKey()-->Line_72 $$ profile.setGeneratedSourcesDirectoryName(dirName, false)[ FD ]
Line_32 $$ final Element moduleElement = (Element) child-->Line_37 $$ final String dir = moduleElement.getAttributeValue("generatedDirName", (String) null)[ FD ]
Line_2 $$ private void loadProfilesFromOldFormat(Element processing) -->Line_56 $$ final Map<String, Set<String>> dirNameToModulesMap = new HashMap<String, Set<String>>()[ CD ]
Line_21 $$ final String proc = processorElement.getAttributeValue(JpsJavaCompilerConfigurationSerializer.NAME, (String) null)-->Line_22 $$ if (proc != null) [ FD ]
