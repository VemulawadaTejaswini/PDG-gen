Line_2 $$ private Map<GitLogOption, String> parseCommitInfo(@NotNull String commitInfo) -->Line_3 $$ final String[] values = commitInfo.split(ITEMS_SEPARATOR)[ FD ]
Line_9 $$ for (; i < myOptions.length; i++) -->Line_10 $$ res.put(myOptions[i], "")[ CD ]
Line_5 $$ int i = 0-->Line_9 $$ for (; i < myOptions.length; i++) [ FD ]
Line_6 $$ for (; i < values.length && i < myOptions.length; i++) -->Line_7 $$ res.put(myOptions[i], values[i])[ CD ]
Line_4 $$ final Map<GitLogOption, String> res = new HashMap<GitLogOption, String>(values.length)-->Line_7 $$ res.put(myOptions[i], values[i])[ FD ]
Line_2 $$ private Map<GitLogOption, String> parseCommitInfo(@NotNull String commitInfo) -->Line_4 $$ final Map<GitLogOption, String> res = new HashMap<GitLogOption, String>(values.length)[ CD ]
Line_5 $$ int i = 0-->Line_6 $$ for (; i < values.length && i < myOptions.length; i++) [ FD ]
Line_2 $$ private Map<GitLogOption, String> parseCommitInfo(@NotNull String commitInfo) -->Line_5 $$ int i = 0[ CD ]
Line_2 $$ private Map<GitLogOption, String> parseCommitInfo(@NotNull String commitInfo) -->Line_12 $$ return res[ CD ]
Line_2 $$ private Map<GitLogOption, String> parseCommitInfo(@NotNull String commitInfo) -->Line_6 $$ for (; i < values.length && i < myOptions.length; i++) [ CD ]
Line_4 $$ final Map<GitLogOption, String> res = new HashMap<GitLogOption, String>(values.length)-->Line_10 $$ res.put(myOptions[i], "")[ FD ]
Line_2 $$ private Map<GitLogOption, String> parseCommitInfo(@NotNull String commitInfo) -->Line_3 $$ final String[] values = commitInfo.split(ITEMS_SEPARATOR)[ CD ]
Line_2 $$ private Map<GitLogOption, String> parseCommitInfo(@NotNull String commitInfo) -->Line_9 $$ for (; i < myOptions.length; i++) [ CD ]
