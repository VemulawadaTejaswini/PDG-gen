Line_2 $$ public void shouldGenerateClassWithAppropriateGetter() throws Exception -->Line_10 $$ Getter getter = ReflectionTools.getGetter(testClass, "age", "property", serviceRegistry)[ CD ]
Line_2 $$ public void shouldGenerateClassWithAppropriateGetter() throws Exception -->Line_11 $$ int age = (Integer) getter.get(testClassInstance)[ CD ]
Line_2 $$ public void shouldGenerateClassWithAppropriateGetter() throws Exception -->Line_5 $$ map.put("age", ageExpected)[ CD ]
Line_3 $$ Map<String, Object> map = new HashMap<String, Object>()-->Line_9 $$ Object testClassInstance = testClass.getConstructor(Map.class).newInstance(map)[ FD ]
Line_2 $$ public void shouldGenerateClassWithAppropriateGetter() throws Exception -->Line_8 $$ Class testClass = MapProxyTool.classForName("TestClass1", properties, new ClassLoaderServiceImpl())[ CD ]
Line_6 $$ Map<String, Class<?>> properties = new HashMap<String, Class<?>>()-->Line_7 $$ properties.put("age", Integer.class)[ FD ]
Line_9 $$ Object testClassInstance = testClass.getConstructor(Map.class).newInstance(map)-->Line_11 $$ int age = (Integer) getter.get(testClassInstance)[ FD ]
Line_2 $$ public void shouldGenerateClassWithAppropriateGetter() throws Exception -->Line_3 $$ Map<String, Object> map = new HashMap<String, Object>()[ CD ]
Line_2 $$ public void shouldGenerateClassWithAppropriateGetter() throws Exception -->Line_4 $$ int ageExpected = 14[ CD ]
Line_3 $$ Map<String, Object> map = new HashMap<String, Object>()-->Line_5 $$ map.put("age", ageExpected)[ FD ]
Line_2 $$ public void shouldGenerateClassWithAppropriateGetter() throws Exception -->Line_6 $$ Map<String, Class<?>> properties = new HashMap<String, Class<?>>()[ CD ]
Line_8 $$ Class testClass = MapProxyTool.classForName("TestClass1", properties, new ClassLoaderServiceImpl())-->Line_9 $$ Object testClassInstance = testClass.getConstructor(Map.class).newInstance(map)[ FD ]
Line_6 $$ Map<String, Class<?>> properties = new HashMap<String, Class<?>>()-->Line_8 $$ Class testClass = MapProxyTool.classForName("TestClass1", properties, new ClassLoaderServiceImpl())[ FD ]
Line_2 $$ public void shouldGenerateClassWithAppropriateGetter() throws Exception -->Line_9 $$ Object testClassInstance = testClass.getConstructor(Map.class).newInstance(map)[ CD ]
Line_2 $$ public void shouldGenerateClassWithAppropriateGetter() throws Exception -->Line_7 $$ properties.put("age", Integer.class)[ CD ]
Line_10 $$ Getter getter = ReflectionTools.getGetter(testClass, "age", "property", serviceRegistry)-->Line_11 $$ int age = (Integer) getter.get(testClassInstance)[ FD ]
Line_2 $$ public void shouldGenerateClassWithAppropriateGetter() throws Exception -->Line_12 $$ Assert.assertEquals(ageExpected, age)[ CD ]
Line_11 $$ int age = (Integer) getter.get(testClassInstance)-->Line_12 $$ Assert.assertEquals(ageExpected, age)[ FD ]
Line_8 $$ Class testClass = MapProxyTool.classForName("TestClass1", properties, new ClassLoaderServiceImpl())-->Line_10 $$ Getter getter = ReflectionTools.getGetter(testClass, "age", "property", serviceRegistry)[ FD ]
Line_4 $$ int ageExpected = 14-->Line_12 $$ Assert.assertEquals(ageExpected, age)[ FD ]
Line_4 $$ int ageExpected = 14-->Line_5 $$ map.put("age", ageExpected)[ FD ]
