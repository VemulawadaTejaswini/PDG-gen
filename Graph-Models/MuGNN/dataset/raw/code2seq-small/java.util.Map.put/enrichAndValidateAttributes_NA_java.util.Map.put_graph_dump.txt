Line_41 $$ if (requiredReturnType.isArray() && actualReturnType.isArray() && Annotation.class.isAssignableFrom(requiredReturnType.getComponentType()) && Map.class.isAssignableFrom(actualReturnType.getComponentType())) -->Line_43 $$ Map<String, Object>[] maps = (Map<String, Object>[]) attributeValue[ CD ]
Line_39 $$ converted = true-->Line_45 $$ converted = true[ FD ]
Line_32 $$ Class<? extends Object> actualReturnType = attributeValue.getClass()-->Line_35 $$ if (Annotation.class.isAssignableFrom(requiredReturnType) && Map.class.isAssignableFrom(actualReturnType)) [ FD ]
Line_34 $$ boolean converted = false-->Line_39 $$ converted = true[ FD ]
Line_14 $$ attributeValue = aliasValue-->Line_28 $$ if (attributeValue == null) [ FD ]
Line_32 $$ Class<? extends Object> actualReturnType = attributeValue.getClass()-->Line_33 $$ if (!ClassUtils.isAssignable(requiredReturnType, actualReturnType)) [ FD ]
Line_24 $$ attributeValue = defaultValue-->Line_28 $$ if (attributeValue == null) [ FD ]
Line_36 $$ Class<? extends Annotation> nestedAnnotationType = (Class<? extends Annotation>) requiredReturnType-->Line_44 $$ attributes.put(attributeName, synthesizeAnnotationArray(maps, nestedAnnotationType))[ FD ]
Line_5 $$ for (Method attributeMethod : getAttributeMethods(annotationType)) -->Line_6 $$ String attributeName = attributeMethod.getName()[ FD ]
Line_8 $$ if (attributeValue == null) -->Line_10 $$ if (aliasNames != null) [ CD ]
Line_33 $$ if (!ClassUtils.isAssignable(requiredReturnType, actualReturnType)) -->Line_35 $$ if (Annotation.class.isAssignableFrom(requiredReturnType) && Map.class.isAssignableFrom(actualReturnType)) [ CD ]
Line_3 $$ Map<String, Object> attributes = new HashMap<String, Object>(originalAttributes)-->Line_7 $$ Object attributeValue = attributes.get(attributeName)[ FD ]
Line_14 $$ attributeValue = aliasValue-->Line_21 $$ if (attributeValue == null) [ FD ]
Line_39 $$ converted = true-->Line_47 $$ if (!converted) [ FD ]
Line_31 $$ Class<?> requiredReturnType = attributeMethod.getReturnType()-->Line_35 $$ if (Annotation.class.isAssignableFrom(requiredReturnType) && Map.class.isAssignableFrom(actualReturnType)) [ FD ]
Line_2 $$ private static Map<String, Object> enrichAndValidateAttributes(Map<String, Object> originalAttributes, Class<? extends Annotation> annotationType) -->Line_4 $$ Map<String, List<String>> attributeAliasMap = getAttributeAliasMap(annotationType)[ CD ]
Line_9 $$ List<String> aliasNames = attributeAliasMap.get(attributeName)-->Line_10 $$ if (aliasNames != null) [ FD ]
Line_8 $$ if (attributeValue == null) -->Line_9 $$ List<String> aliasNames = attributeAliasMap.get(attributeName)[ CD ]
Line_31 $$ Class<?> requiredReturnType = attributeMethod.getReturnType()-->Line_48 $$ throw new IllegalArgumentException(String.format("Attributes map [%s] returned a value of type [%s] for attribute [%s], " + "but a value of type [%s] is required as defined by annotation type [%s].", attributes, actualReturnType.getName(), attributeName, requiredReturnType.getName(), annotationType.getName()))[ FD ]
Line_5 $$ for (Method attributeMethod : getAttributeMethods(annotationType)) -->Line_31 $$ Class<?> requiredReturnType = attributeMethod.getReturnType()[ FD ]
Line_2 $$ private static Map<String, Object> enrichAndValidateAttributes(Map<String, Object> originalAttributes, Class<? extends Annotation> annotationType) -->Line_5 $$ for (Method attributeMethod : getAttributeMethods(annotationType)) [ FD ]
Line_7 $$ Object attributeValue = attributes.get(attributeName)-->Line_15 $$ attributes.put(attributeName, attributeValue)[ FD ]
Line_6 $$ String attributeName = attributeMethod.getName()-->Line_25 $$ attributes.put(attributeName, attributeValue)[ FD ]
Line_7 $$ Object attributeValue = attributes.get(attributeName)-->Line_25 $$ attributes.put(attributeName, attributeValue)[ FD ]
Line_2 $$ private static Map<String, Object> enrichAndValidateAttributes(Map<String, Object> originalAttributes, Class<? extends Annotation> annotationType) -->Line_22 $$ Object defaultValue = getDefaultValue(annotationType, attributeName)[ FD ]
Line_11 $$ for (String aliasName : aliasNames) -->Line_12 $$ Object aliasValue = attributes.get(aliasName)[ FD ]
Line_3 $$ Map<String, Object> attributes = new HashMap<String, Object>(originalAttributes)-->Line_48 $$ throw new IllegalArgumentException(String.format("Attributes map [%s] returned a value of type [%s] for attribute [%s], " + "but a value of type [%s] is required as defined by annotation type [%s].", attributes, actualReturnType.getName(), attributeName, requiredReturnType.getName(), annotationType.getName()))[ FD ]
Line_6 $$ String attributeName = attributeMethod.getName()-->Line_44 $$ attributes.put(attributeName, synthesizeAnnotationArray(maps, nestedAnnotationType))[ FD ]
Line_3 $$ Map<String, Object> attributes = new HashMap<String, Object>(originalAttributes)-->Line_44 $$ attributes.put(attributeName, synthesizeAnnotationArray(maps, nestedAnnotationType))[ FD ]
Line_2 $$ private static Map<String, Object> enrichAndValidateAttributes(Map<String, Object> originalAttributes, Class<? extends Annotation> annotationType) -->Line_4 $$ Map<String, List<String>> attributeAliasMap = getAttributeAliasMap(annotationType)[ FD ]
Line_2 $$ private static Map<String, Object> enrichAndValidateAttributes(Map<String, Object> originalAttributes, Class<? extends Annotation> annotationType) -->Line_52 $$ return attributes[ CD ]
Line_2 $$ private static Map<String, Object> enrichAndValidateAttributes(Map<String, Object> originalAttributes, Class<? extends Annotation> annotationType) -->Line_48 $$ throw new IllegalArgumentException(String.format("Attributes map [%s] returned a value of type [%s] for attribute [%s], " + "but a value of type [%s] is required as defined by annotation type [%s].", attributes, actualReturnType.getName(), attributeName, requiredReturnType.getName(), annotationType.getName()))[ FD ]
Line_21 $$ if (attributeValue == null) -->Line_22 $$ Object defaultValue = getDefaultValue(annotationType, attributeName)[ CD ]
Line_33 $$ if (!ClassUtils.isAssignable(requiredReturnType, actualReturnType)) -->Line_47 $$ if (!converted) [ CD ]
Line_21 $$ if (attributeValue == null) -->Line_23 $$ if (defaultValue != null) [ CD ]
Line_3 $$ Map<String, Object> attributes = new HashMap<String, Object>(originalAttributes)-->Line_38 $$ attributes.put(attributeName, synthesizeAnnotation(map, nestedAnnotationType, null))[ FD ]
Line_7 $$ Object attributeValue = attributes.get(attributeName)-->Line_28 $$ if (attributeValue == null) [ FD ]
Line_14 $$ attributeValue = aliasValue-->Line_25 $$ attributes.put(attributeName, attributeValue)[ FD ]
Line_12 $$ Object aliasValue = attributes.get(aliasName)-->Line_14 $$ attributeValue = aliasValue[ FD ]
Line_14 $$ attributeValue = aliasValue-->Line_32 $$ Class<? extends Object> actualReturnType = attributeValue.getClass()[ FD ]
Line_31 $$ Class<?> requiredReturnType = attributeMethod.getReturnType()-->Line_33 $$ if (!ClassUtils.isAssignable(requiredReturnType, actualReturnType)) [ FD ]
Line_6 $$ String attributeName = attributeMethod.getName()-->Line_9 $$ List<String> aliasNames = attributeAliasMap.get(attributeName)[ FD ]
Line_32 $$ Class<? extends Object> actualReturnType = attributeValue.getClass()-->Line_48 $$ throw new IllegalArgumentException(String.format("Attributes map [%s] returned a value of type [%s] for attribute [%s], " + "but a value of type [%s] is required as defined by annotation type [%s].", attributes, actualReturnType.getName(), attributeName, requiredReturnType.getName(), annotationType.getName()))[ FD ]
Line_4 $$ Map<String, List<String>> attributeAliasMap = getAttributeAliasMap(annotationType)-->Line_9 $$ List<String> aliasNames = attributeAliasMap.get(attributeName)[ FD ]
Line_6 $$ String attributeName = attributeMethod.getName()-->Line_22 $$ Object defaultValue = getDefaultValue(annotationType, attributeName)[ FD ]
Line_7 $$ Object attributeValue = attributes.get(attributeName)-->Line_8 $$ if (attributeValue == null) [ FD ]
Line_36 $$ Class<? extends Annotation> nestedAnnotationType = (Class<? extends Annotation>) requiredReturnType-->Line_38 $$ attributes.put(attributeName, synthesizeAnnotation(map, nestedAnnotationType, null))[ FD ]
Line_24 $$ attributeValue = defaultValue-->Line_32 $$ Class<? extends Object> actualReturnType = attributeValue.getClass()[ FD ]
Line_35 $$ if (Annotation.class.isAssignableFrom(requiredReturnType) && Map.class.isAssignableFrom(actualReturnType)) -->Line_36 $$ Class<? extends Annotation> nestedAnnotationType = (Class<? extends Annotation>) requiredReturnType[ CD ]
Line_35 $$ if (Annotation.class.isAssignableFrom(requiredReturnType) && Map.class.isAssignableFrom(actualReturnType)) -->Line_37 $$ Map<String, Object> map = (Map<String, Object>) attributeValue[ CD ]
Line_6 $$ String attributeName = attributeMethod.getName()-->Line_48 $$ throw new IllegalArgumentException(String.format("Attributes map [%s] returned a value of type [%s] for attribute [%s], " + "but a value of type [%s] is required as defined by annotation type [%s].", attributes, actualReturnType.getName(), attributeName, requiredReturnType.getName(), annotationType.getName()))[ FD ]
Line_14 $$ attributeValue = aliasValue-->Line_24 $$ attributeValue = defaultValue[ FD ]
Line_35 $$ if (Annotation.class.isAssignableFrom(requiredReturnType) && Map.class.isAssignableFrom(actualReturnType)) -->Line_39 $$ converted = true[ CD ]
Line_23 $$ if (defaultValue != null) -->Line_24 $$ attributeValue = defaultValue[ CD ]
Line_7 $$ Object attributeValue = attributes.get(attributeName)-->Line_32 $$ Class<? extends Object> actualReturnType = attributeValue.getClass()[ FD ]
Line_6 $$ String attributeName = attributeMethod.getName()-->Line_38 $$ attributes.put(attributeName, synthesizeAnnotation(map, nestedAnnotationType, null))[ FD ]
Line_41 $$ if (requiredReturnType.isArray() && actualReturnType.isArray() && Annotation.class.isAssignableFrom(requiredReturnType.getComponentType()) && Map.class.isAssignableFrom(actualReturnType.getComponentType())) -->Line_44 $$ attributes.put(attributeName, synthesizeAnnotationArray(maps, nestedAnnotationType))[ CD ]
Line_6 $$ String attributeName = attributeMethod.getName()-->Line_7 $$ Object attributeValue = attributes.get(attributeName)[ FD ]
Line_7 $$ Object attributeValue = attributes.get(attributeName)-->Line_24 $$ attributeValue = defaultValue[ FD ]
Line_35 $$ if (Annotation.class.isAssignableFrom(requiredReturnType) && Map.class.isAssignableFrom(actualReturnType)) -->Line_38 $$ attributes.put(attributeName, synthesizeAnnotation(map, nestedAnnotationType, null))[ CD ]
Line_7 $$ Object attributeValue = attributes.get(attributeName)-->Line_21 $$ if (attributeValue == null) [ FD ]
Line_24 $$ attributeValue = defaultValue-->Line_25 $$ attributes.put(attributeName, attributeValue)[ FD ]
Line_34 $$ boolean converted = false-->Line_47 $$ if (!converted) [ FD ]
Line_22 $$ Object defaultValue = getDefaultValue(annotationType, attributeName)-->Line_23 $$ if (defaultValue != null) [ FD ]
Line_37 $$ Map<String, Object> map = (Map<String, Object>) attributeValue-->Line_38 $$ attributes.put(attributeName, synthesizeAnnotation(map, nestedAnnotationType, null))[ FD ]
Line_33 $$ if (!ClassUtils.isAssignable(requiredReturnType, actualReturnType)) -->Line_34 $$ boolean converted = false[ CD ]
Line_3 $$ Map<String, Object> attributes = new HashMap<String, Object>(originalAttributes)-->Line_29 $$ throw new IllegalArgumentException(String.format("Attributes map [%s] returned null for required attribute [%s] defined by annotation type [%s].", attributes, attributeName, annotationType.getName()))[ FD ]
Line_41 $$ if (requiredReturnType.isArray() && actualReturnType.isArray() && Annotation.class.isAssignableFrom(requiredReturnType.getComponentType()) && Map.class.isAssignableFrom(actualReturnType.getComponentType())) -->Line_45 $$ converted = true[ CD ]
Line_35 $$ if (Annotation.class.isAssignableFrom(requiredReturnType) && Map.class.isAssignableFrom(actualReturnType)) -->Line_41 $$ if (requiredReturnType.isArray() && actualReturnType.isArray() && Annotation.class.isAssignableFrom(requiredReturnType.getComponentType()) && Map.class.isAssignableFrom(actualReturnType.getComponentType())) [ CD ]
Line_2 $$ private static Map<String, Object> enrichAndValidateAttributes(Map<String, Object> originalAttributes, Class<? extends Annotation> annotationType) -->Line_3 $$ Map<String, Object> attributes = new HashMap<String, Object>(originalAttributes)[ CD ]
Line_23 $$ if (defaultValue != null) -->Line_25 $$ attributes.put(attributeName, attributeValue)[ CD ]
Line_22 $$ Object defaultValue = getDefaultValue(annotationType, attributeName)-->Line_24 $$ attributeValue = defaultValue[ FD ]
Line_43 $$ Map<String, Object>[] maps = (Map<String, Object>[]) attributeValue-->Line_44 $$ attributes.put(attributeName, synthesizeAnnotationArray(maps, nestedAnnotationType))[ FD ]
Line_12 $$ Object aliasValue = attributes.get(aliasName)-->Line_13 $$ if (aliasValue != null) [ FD ]
Line_3 $$ Map<String, Object> attributes = new HashMap<String, Object>(originalAttributes)-->Line_12 $$ Object aliasValue = attributes.get(aliasName)[ FD ]
Line_31 $$ Class<?> requiredReturnType = attributeMethod.getReturnType()-->Line_42 $$ Class<? extends Annotation> nestedAnnotationType = (Class<? extends Annotation>) requiredReturnType.getComponentType()[ FD ]
Line_6 $$ String attributeName = attributeMethod.getName()-->Line_15 $$ attributes.put(attributeName, attributeValue)[ FD ]
Line_13 $$ if (aliasValue != null) -->Line_14 $$ attributeValue = aliasValue[ CD ]
Line_3 $$ Map<String, Object> attributes = new HashMap<String, Object>(originalAttributes)-->Line_25 $$ attributes.put(attributeName, attributeValue)[ FD ]
Line_34 $$ boolean converted = false-->Line_45 $$ converted = true[ FD ]
Line_3 $$ Map<String, Object> attributes = new HashMap<String, Object>(originalAttributes)-->Line_15 $$ attributes.put(attributeName, attributeValue)[ FD ]
Line_6 $$ String attributeName = attributeMethod.getName()-->Line_29 $$ throw new IllegalArgumentException(String.format("Attributes map [%s] returned null for required attribute [%s] defined by annotation type [%s].", attributes, attributeName, annotationType.getName()))[ FD ]
Line_2 $$ private static Map<String, Object> enrichAndValidateAttributes(Map<String, Object> originalAttributes, Class<? extends Annotation> annotationType) -->Line_29 $$ throw new IllegalArgumentException(String.format("Attributes map [%s] returned null for required attribute [%s] defined by annotation type [%s].", attributes, attributeName, annotationType.getName()))[ FD ]
Line_14 $$ attributeValue = aliasValue-->Line_15 $$ attributes.put(attributeName, attributeValue)[ FD ]
Line_13 $$ if (aliasValue != null) -->Line_15 $$ attributes.put(attributeName, attributeValue)[ CD ]
Line_7 $$ Object attributeValue = attributes.get(attributeName)-->Line_14 $$ attributeValue = aliasValue[ FD ]
Line_31 $$ Class<?> requiredReturnType = attributeMethod.getReturnType()-->Line_41 $$ if (requiredReturnType.isArray() && actualReturnType.isArray() && Annotation.class.isAssignableFrom(requiredReturnType.getComponentType()) && Map.class.isAssignableFrom(actualReturnType.getComponentType())) [ FD ]
Line_45 $$ converted = true-->Line_47 $$ if (!converted) [ FD ]
Line_32 $$ Class<? extends Object> actualReturnType = attributeValue.getClass()-->Line_41 $$ if (requiredReturnType.isArray() && actualReturnType.isArray() && Annotation.class.isAssignableFrom(requiredReturnType.getComponentType()) && Map.class.isAssignableFrom(actualReturnType.getComponentType())) [ FD ]
