Line_3 $$ ServiceName name = ServiceName.parse(serviceName)-->Line_4 $$ ServiceController<?> service = currentServiceContainer().getRequiredService(name)[ FD ]
Line_2 $$ private Object readResolve() throws ObjectStreamException -->Line_11 $$ context.put(BasicComponentInstance.INSTANCE_KEY, instance)[ CD ]
Line_6 $$ final Map<Object, Object> context = new HashMap<Object, Object>()-->Line_8 $$ context.put(entry.getKey(), entry.getValue())[ FD ]
Line_2 $$ private Object readResolve() throws ObjectStreamException -->Line_4 $$ ServiceController<?> service = currentServiceContainer().getRequiredService(name)[ CD ]
Line_2 $$ private Object readResolve() throws ObjectStreamException -->Line_3 $$ ServiceName name = ServiceName.parse(serviceName)[ CD ]
Line_7 $$ for (final Map.Entry<Object, Object> entry : serializableInterceptors.entrySet()) -->Line_8 $$ context.put(entry.getKey(), entry.getValue())[ FD ]
Line_6 $$ final Map<Object, Object> context = new HashMap<Object, Object>()-->Line_12 $$ return component.constructComponentInstance(instance, false, context)[ FD ]
Line_5 $$ StatefulSessionComponent component = (StatefulSessionComponent) service.getValue()-->Line_12 $$ return component.constructComponentInstance(instance, false, context)[ FD ]
Line_2 $$ private Object readResolve() throws ObjectStreamException -->Line_10 $$ context.put(SessionID.class, sessionID)[ CD ]
Line_6 $$ final Map<Object, Object> context = new HashMap<Object, Object>()-->Line_11 $$ context.put(BasicComponentInstance.INSTANCE_KEY, instance)[ FD ]
Line_2 $$ private Object readResolve() throws ObjectStreamException -->Line_5 $$ StatefulSessionComponent component = (StatefulSessionComponent) service.getValue()[ CD ]
Line_6 $$ final Map<Object, Object> context = new HashMap<Object, Object>()-->Line_10 $$ context.put(SessionID.class, sessionID)[ FD ]
Line_4 $$ ServiceController<?> service = currentServiceContainer().getRequiredService(name)-->Line_5 $$ StatefulSessionComponent component = (StatefulSessionComponent) service.getValue()[ FD ]
Line_2 $$ private Object readResolve() throws ObjectStreamException -->Line_6 $$ final Map<Object, Object> context = new HashMap<Object, Object>()[ CD ]
Line_2 $$ private Object readResolve() throws ObjectStreamException -->Line_12 $$ return component.constructComponentInstance(instance, false, context)[ CD ]
