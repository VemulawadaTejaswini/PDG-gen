Line_18 $$ while (!nextCommits.isEmpty()) -->Line_20 $$ Iterator<Commit> iterator = nextCommits.get(lastCommit)[ CD ]
Line_2 $$ public List<Commit> join(@NotNull Collection<List<Commit>> logsFromRepos) -->Line_3 $$ if (logsFromRepos.size() == 1) [ FD ]
Line_19 $$ Commit lastCommit = findLatestCommit(nextCommits.keySet())-->Line_20 $$ Iterator<Commit> iterator = nextCommits.get(lastCommit)[ FD ]
Line_2 $$ public List<Commit> join(@NotNull Collection<List<Commit>> logsFromRepos) -->Line_3 $$ if (logsFromRepos.size() == 1) [ CD ]
Line_18 $$ while (!nextCommits.isEmpty()) -->Line_21 $$ result.add(lastCommit)[ CD ]
Line_13 $$ Iterator<Commit> iterator = log.iterator()-->Line_15 $$ nextCommits.put(iterator.next(), iterator)[ FD ]
Line_10 $$ List<Commit> result = new ArrayList<Commit>(size)-->Line_21 $$ result.add(lastCommit)[ FD ]
Line_13 $$ Iterator<Commit> iterator = log.iterator()-->Line_23 $$ if (iterator.hasNext()) [ FD ]
Line_18 $$ while (!nextCommits.isEmpty()) -->Line_22 $$ nextCommits.remove(lastCommit)[ CD ]
Line_2 $$ public List<Commit> join(@NotNull Collection<List<Commit>> logsFromRepos) -->Line_4 $$ return logsFromRepos.iterator().next()[ FD ]
Line_19 $$ Commit lastCommit = findLatestCommit(nextCommits.keySet())-->Line_21 $$ result.add(lastCommit)[ FD ]
Line_11 $$ Map<Commit, Iterator<Commit>> nextCommits = ContainerUtil.newHashMap()-->Line_22 $$ nextCommits.remove(lastCommit)[ FD ]
Line_3 $$ if (logsFromRepos.size() == 1) -->Line_4 $$ return logsFromRepos.iterator().next()[ CD ]
Line_13 $$ Iterator<Commit> iterator = log.iterator()-->Line_14 $$ if (iterator.hasNext()) [ FD ]
Line_6 $$ int size = 0-->Line_8 $$ size += repo.size()[ FD ]
Line_11 $$ Map<Commit, Iterator<Commit>> nextCommits = ContainerUtil.newHashMap()-->Line_20 $$ Iterator<Commit> iterator = nextCommits.get(lastCommit)[ FD ]
Line_20 $$ Iterator<Commit> iterator = nextCommits.get(lastCommit)-->Line_23 $$ if (iterator.hasNext()) [ FD ]
Line_12 $$ for (List<Commit> log : logsFromRepos) -->Line_13 $$ Iterator<Commit> iterator = log.iterator()[ FD ]
Line_11 $$ Map<Commit, Iterator<Commit>> nextCommits = ContainerUtil.newHashMap()-->Line_24 $$ nextCommits.put(iterator.next(), iterator)[ FD ]
Line_2 $$ public List<Commit> join(@NotNull Collection<List<Commit>> logsFromRepos) -->Line_11 $$ Map<Commit, Iterator<Commit>> nextCommits = ContainerUtil.newHashMap()[ CD ]
Line_11 $$ Map<Commit, Iterator<Commit>> nextCommits = ContainerUtil.newHashMap()-->Line_18 $$ while (!nextCommits.isEmpty()) [ FD ]
Line_2 $$ public List<Commit> join(@NotNull Collection<List<Commit>> logsFromRepos) -->Line_6 $$ int size = 0[ CD ]
Line_18 $$ while (!nextCommits.isEmpty()) -->Line_19 $$ Commit lastCommit = findLatestCommit(nextCommits.keySet())[ CD ]
Line_18 $$ while (!nextCommits.isEmpty()) -->Line_23 $$ if (iterator.hasNext()) [ CD ]
Line_2 $$ public List<Commit> join(@NotNull Collection<List<Commit>> logsFromRepos) -->Line_10 $$ List<Commit> result = new ArrayList<Commit>(size)[ CD ]
Line_2 $$ public List<Commit> join(@NotNull Collection<List<Commit>> logsFromRepos) -->Line_27 $$ return result[ CD ]
Line_13 $$ Iterator<Commit> iterator = log.iterator()-->Line_24 $$ nextCommits.put(iterator.next(), iterator)[ FD ]
Line_14 $$ if (iterator.hasNext()) -->Line_15 $$ nextCommits.put(iterator.next(), iterator)[ CD ]
Line_20 $$ Iterator<Commit> iterator = nextCommits.get(lastCommit)-->Line_24 $$ nextCommits.put(iterator.next(), iterator)[ FD ]
Line_11 $$ Map<Commit, Iterator<Commit>> nextCommits = ContainerUtil.newHashMap()-->Line_15 $$ nextCommits.put(iterator.next(), iterator)[ FD ]
Line_2 $$ public List<Commit> join(@NotNull Collection<List<Commit>> logsFromRepos) -->Line_18 $$ while (!nextCommits.isEmpty()) [ CD ]
Line_23 $$ if (iterator.hasNext()) -->Line_24 $$ nextCommits.put(iterator.next(), iterator)[ CD ]
Line_7 $$ for (List<Commit> repo : logsFromRepos) -->Line_8 $$ size += repo.size()[ FD ]
Line_11 $$ Map<Commit, Iterator<Commit>> nextCommits = ContainerUtil.newHashMap()-->Line_19 $$ Commit lastCommit = findLatestCommit(nextCommits.keySet())[ FD ]
Line_19 $$ Commit lastCommit = findLatestCommit(nextCommits.keySet())-->Line_22 $$ nextCommits.remove(lastCommit)[ FD ]
