Line_8 $$ final Node node = queue.removeFirst()-->Line_9 $$ if (node.equals(start)) [ FD ]
Line_2 $$ public List<Node> findPath(Node start, Node finish) -->Line_6 $$ boolean found = false[ CD ]
Line_2 $$ public List<Node> findPath(Node start, Node finish) -->Line_5 $$ queue.addLast(finish)[ CD ]
Line_8 $$ final Node node = queue.removeFirst()-->Line_13 $$ final Iterator<Node> in = myGraph.getIn(node)[ FD ]
Line_3 $$ Map<Node, Node> nextNodes = new HashMap<Node, Node>()-->Line_17 $$ nextNodes.put(prev, node)[ FD ]
Line_26 $$ Node current = start-->Line_27 $$ while (!current.equals(finish)) [ FD ]
Line_27 $$ while (!current.equals(finish)) -->Line_28 $$ path.add(current)[ CD ]
Line_2 $$ public List<Node> findPath(Node start, Node finish) -->Line_27 $$ while (!current.equals(finish)) [ CD ]
Line_2 $$ public List<Node> findPath(Node start, Node finish) -->Line_32 $$ return path[ CD ]
Line_9 $$ if (node.equals(start)) -->Line_10 $$ found = true[ CD ]
Line_13 $$ final Iterator<Node> in = myGraph.getIn(node)-->Line_14 $$ while (in.hasNext()) [ FD ]
Line_4 $$ Deque<Node> queue = new ArrayDeque<Node>()-->Line_8 $$ final Node node = queue.removeFirst()[ FD ]
Line_2 $$ public List<Node> findPath(Node start, Node finish) -->Line_5 $$ queue.addLast(finish)[ FD ]
Line_22 $$ if (!found) -->Line_23 $$ return null[ CD ]
Line_7 $$ while (!queue.isEmpty()) -->Line_9 $$ if (node.equals(start)) [ CD ]
Line_27 $$ while (!current.equals(finish)) -->Line_29 $$ current = nextNodes.get(current)[ CD ]
Line_15 $$ Node prev = in.next()-->Line_16 $$ if (!nextNodes.containsKey(prev)) [ FD ]
Line_2 $$ public List<Node> findPath(Node start, Node finish) -->Line_31 $$ path.add(finish)[ CD ]
Line_4 $$ Deque<Node> queue = new ArrayDeque<Node>()-->Line_5 $$ queue.addLast(finish)[ FD ]
Line_8 $$ final Node node = queue.removeFirst()-->Line_17 $$ nextNodes.put(prev, node)[ FD ]
Line_26 $$ Node current = start-->Line_28 $$ path.add(current)[ FD ]
Line_7 $$ while (!queue.isEmpty()) -->Line_13 $$ final Iterator<Node> in = myGraph.getIn(node)[ CD ]
Line_29 $$ current = nextNodes.get(current)-->Line_27 $$ while (!current.equals(finish)) [ FD ]
Line_2 $$ public List<Node> findPath(Node start, Node finish) -->Line_3 $$ Map<Node, Node> nextNodes = new HashMap<Node, Node>()[ CD ]
Line_16 $$ if (!nextNodes.containsKey(prev)) -->Line_18 $$ queue.addLast(prev)[ CD ]
Line_2 $$ public List<Node> findPath(Node start, Node finish) -->Line_27 $$ while (!current.equals(finish)) [ FD ]
Line_4 $$ Deque<Node> queue = new ArrayDeque<Node>()-->Line_7 $$ while (!queue.isEmpty()) [ FD ]
Line_15 $$ Node prev = in.next()-->Line_17 $$ nextNodes.put(prev, node)[ FD ]
Line_14 $$ while (in.hasNext()) -->Line_15 $$ Node prev = in.next()[ CD ]
Line_3 $$ Map<Node, Node> nextNodes = new HashMap<Node, Node>()-->Line_16 $$ if (!nextNodes.containsKey(prev)) [ FD ]
Line_7 $$ while (!queue.isEmpty()) -->Line_8 $$ final Node node = queue.removeFirst()[ CD ]
Line_10 $$ found = true-->Line_22 $$ if (!found) [ FD ]
Line_2 $$ public List<Node> findPath(Node start, Node finish) -->Line_22 $$ if (!found) [ CD ]
Line_2 $$ public List<Node> findPath(Node start, Node finish) -->Line_26 $$ Node current = start[ CD ]
Line_13 $$ final Iterator<Node> in = myGraph.getIn(node)-->Line_15 $$ Node prev = in.next()[ FD ]
Line_6 $$ boolean found = false-->Line_10 $$ found = true[ FD ]
Line_15 $$ Node prev = in.next()-->Line_18 $$ queue.addLast(prev)[ FD ]
Line_2 $$ public List<Node> findPath(Node start, Node finish) -->Line_31 $$ path.add(finish)[ FD ]
Line_26 $$ Node current = start-->Line_29 $$ current = nextNodes.get(current)[ FD ]
Line_4 $$ Deque<Node> queue = new ArrayDeque<Node>()-->Line_18 $$ queue.addLast(prev)[ FD ]
Line_25 $$ List<Node> path = new ArrayList<Node>()-->Line_28 $$ path.add(current)[ FD ]
Line_2 $$ public List<Node> findPath(Node start, Node finish) -->Line_9 $$ if (node.equals(start)) [ FD ]
Line_16 $$ if (!nextNodes.containsKey(prev)) -->Line_17 $$ nextNodes.put(prev, node)[ CD ]
Line_6 $$ boolean found = false-->Line_22 $$ if (!found) [ FD ]
Line_25 $$ List<Node> path = new ArrayList<Node>()-->Line_31 $$ path.add(finish)[ FD ]
Line_3 $$ Map<Node, Node> nextNodes = new HashMap<Node, Node>()-->Line_29 $$ current = nextNodes.get(current)[ FD ]
Line_29 $$ current = nextNodes.get(current)-->Line_28 $$ path.add(current)[ FD ]
Line_2 $$ public List<Node> findPath(Node start, Node finish) -->Line_25 $$ List<Node> path = new ArrayList<Node>()[ CD ]
Line_2 $$ public List<Node> findPath(Node start, Node finish) -->Line_4 $$ Deque<Node> queue = new ArrayDeque<Node>()[ CD ]
Line_14 $$ while (in.hasNext()) -->Line_16 $$ if (!nextNodes.containsKey(prev)) [ CD ]
Line_2 $$ public List<Node> findPath(Node start, Node finish) -->Line_7 $$ while (!queue.isEmpty()) [ CD ]
Line_7 $$ while (!queue.isEmpty()) -->Line_14 $$ while (in.hasNext()) [ CD ]
