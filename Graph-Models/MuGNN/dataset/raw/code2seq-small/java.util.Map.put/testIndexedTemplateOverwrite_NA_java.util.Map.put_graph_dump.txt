Line_2 $$ public void testIndexedTemplateOverwrite() throws Exception -->Line_8 $$ for (int i = 1; i < iterations; i++) [ CD ]
Line_2 $$ public void testIndexedTemplateOverwrite() throws Exception -->Line_4 $$ ensureGreen("testindex")[ CD ]
Line_2 $$ public void testIndexedTemplateOverwrite() throws Exception -->Line_3 $$ createIndex("testindex")[ CD ]
Line_2 $$ public void testIndexedTemplateOverwrite() throws Exception -->Line_6 $$ refresh()[ CD ]
Line_20 $$ PutIndexedScriptRequestBuilder builder = client().preparePutIndexedScript(MustacheScriptEngineService.NAME, "git01", "-->Line_21 $$ scriptResponse = builder.get()[ FD ]
Line_13 $$ Map<String, Object> templateParams = new HashMap()-->Line_14 $$ templateParams.put("P_Keyword1", "dev")[ FD ]
Line_9 $$ PutIndexedScriptResponse scriptResponse = client().preparePutIndexedScript(MustacheScriptEngineService.NAME, "git01", "-->Line_10 $$ assertEquals(i * 2 - 1, scriptResponse.getVersion())[ FD ]
Line_8 $$ for (int i = 1; i < iterations; i++) -->Line_12 $$ assertTrue(getResponse.isExists())[ CD ]
Line_8 $$ for (int i = 1; i < iterations; i++) -->Line_10 $$ assertEquals(i * 2 - 1, scriptResponse.getVersion())[ CD ]
Line_21 $$ scriptResponse = builder.get()-->Line_22 $$ assertEquals(i * 2, scriptResponse.getVersion())[ FD ]
Line_8 $$ for (int i = 1; i < iterations; i++) -->Line_14 $$ templateParams.put("P_Keyword1", "dev")[ CD ]
Line_21 $$ scriptResponse = builder.get()-->Line_10 $$ assertEquals(i * 2 - 1, scriptResponse.getVersion())[ FD ]
Line_9 $$ PutIndexedScriptResponse scriptResponse = client().preparePutIndexedScript(MustacheScriptEngineService.NAME, "git01", "-->Line_22 $$ assertEquals(i * 2, scriptResponse.getVersion())[ FD ]
Line_8 $$ for (int i = 1; i < iterations; i++) -->Line_23 $$ SearchResponse searchResponse = client().prepareSearch("testindex").setTypes("test").setTemplate(new Template("git01", ScriptService.ScriptType.INDEXED, MustacheScriptEngineService.NAME, null, templateParams)).get()[ CD ]
Line_9 $$ PutIndexedScriptResponse scriptResponse = client().preparePutIndexedScript(MustacheScriptEngineService.NAME, "git01", "-->Line_21 $$ scriptResponse = builder.get()[ FD ]
Line_8 $$ for (int i = 1; i < iterations; i++) -->Line_24 $$ assertHitCount(searchResponse, 1)[ CD ]
Line_8 $$ for (int i = 1; i < iterations; i++) -->Line_11 $$ GetIndexedScriptResponse getResponse = client().prepareGetIndexedScript(MustacheScriptEngineService.NAME, "git01").get()[ CD ]
Line_7 $$ int iterations = randomIntBetween(2, 11)-->Line_8 $$ for (int i = 1; i < iterations; i++) [ FD ]
Line_8 $$ for (int i = 1; i < iterations; i++) -->Line_22 $$ assertEquals(i * 2, scriptResponse.getVersion())[ CD ]
Line_8 $$ for (int i = 1; i < iterations; i++) -->Line_13 $$ Map<String, Object> templateParams = new HashMap()[ CD ]
Line_2 $$ public void testIndexedTemplateOverwrite() throws Exception -->Line_5 $$ index("testindex", "test", "1", jsonBuilder().startObject().field("searchtext", "dev1").endObject())[ CD ]
Line_11 $$ GetIndexedScriptResponse getResponse = client().prepareGetIndexedScript(MustacheScriptEngineService.NAME, "git01").get()-->Line_12 $$ assertTrue(getResponse.isExists())[ FD ]
Line_8 $$ for (int i = 1; i < iterations; i++) -->Line_21 $$ scriptResponse = builder.get()[ CD ]
Line_23 $$ SearchResponse searchResponse = client().prepareSearch("testindex").setTypes("test").setTemplate(new Template("git01", ScriptService.ScriptType.INDEXED, MustacheScriptEngineService.NAME, null, templateParams)).get()-->Line_24 $$ assertHitCount(searchResponse, 1)[ FD ]
Line_8 $$ for (int i = 1; i < iterations; i++) -->Line_9 $$ PutIndexedScriptResponse scriptResponse = client().preparePutIndexedScript(MustacheScriptEngineService.NAME, "git01", "[ CD ]
Line_2 $$ public void testIndexedTemplateOverwrite() throws Exception -->Line_7 $$ int iterations = randomIntBetween(2, 11)[ CD ]
Line_8 $$ for (int i = 1; i < iterations; i++) -->Line_20 $$ PutIndexedScriptRequestBuilder builder = client().preparePutIndexedScript(MustacheScriptEngineService.NAME, "git01", "[ CD ]
