Line_2 $$ public static Map<Pattern, Set<Pattern>> loadPatterns(@NonNls String propertyKey) -->Line_24 $$ return result[ CD ]
Line_17 $$ if (dirPatterns == null) -->Line_19 $$ result.put(modulePattern, dirPatterns)[ CD ]
Line_10 $$ if (excludedPattern.startsWith("[")) -->Line_11 $$ idx = excludedPattern.indexOf("]") + 1[ CD ]
Line_5 $$ if (patterns != null) -->Line_6 $$ final String[] pathPatterns = patterns.split(";")[ CD ]
Line_9 $$ int idx = 0-->Line_15 $$ final Pattern pattern = Pattern.compile(FileUtil.convertAntToRegexp(excludedPattern.substring(idx)))[ FD ]
Line_17 $$ if (dirPatterns == null) -->Line_18 $$ dirPatterns = new HashSet<Pattern>()[ CD ]
Line_14 $$ final Pattern modulePattern = module != null ? Pattern.compile(StringUtil.replace(module, "*", ".*")) : null-->Line_19 $$ result.put(modulePattern, dirPatterns)[ FD ]
Line_16 $$ Set<Pattern> dirPatterns = result.get(modulePattern)-->Line_19 $$ result.put(modulePattern, dirPatterns)[ FD ]
Line_3 $$ final Map<Pattern, Set<Pattern>> result = new HashMap<Pattern, Set<Pattern>>()-->Line_16 $$ Set<Pattern> dirPatterns = result.get(modulePattern)[ FD ]
Line_2 $$ public static Map<Pattern, Set<Pattern>> loadPatterns(@NonNls String propertyKey) -->Line_3 $$ final Map<Pattern, Set<Pattern>> result = new HashMap<Pattern, Set<Pattern>>()[ CD ]
Line_4 $$ final String patterns = System.getProperty(propertyKey)-->Line_6 $$ final String[] pathPatterns = patterns.split(";")[ FD ]
Line_2 $$ public static Map<Pattern, Set<Pattern>> loadPatterns(@NonNls String propertyKey) -->Line_4 $$ final String patterns = System.getProperty(propertyKey)[ CD ]
Line_11 $$ idx = excludedPattern.indexOf("]") + 1-->Line_15 $$ final Pattern pattern = Pattern.compile(FileUtil.convertAntToRegexp(excludedPattern.substring(idx)))[ FD ]
Line_7 $$ for (String excludedPattern : pathPatterns) -->Line_11 $$ idx = excludedPattern.indexOf("]") + 1[ FD ]
Line_8 $$ String module = null-->Line_14 $$ final Pattern modulePattern = module != null ? Pattern.compile(StringUtil.replace(module, "*", ".*")) : null[ FD ]
Line_8 $$ String module = null-->Line_12 $$ module = excludedPattern.substring(1, idx - 1)[ FD ]
Line_18 $$ dirPatterns = new HashSet<Pattern>()-->Line_19 $$ result.put(modulePattern, dirPatterns)[ FD ]
Line_4 $$ final String patterns = System.getProperty(propertyKey)-->Line_5 $$ if (patterns != null) [ FD ]
Line_14 $$ final Pattern modulePattern = module != null ? Pattern.compile(StringUtil.replace(module, "*", ".*")) : null-->Line_16 $$ Set<Pattern> dirPatterns = result.get(modulePattern)[ FD ]
Line_16 $$ Set<Pattern> dirPatterns = result.get(modulePattern)-->Line_21 $$ dirPatterns.add(pattern)[ FD ]
Line_10 $$ if (excludedPattern.startsWith("[")) -->Line_12 $$ module = excludedPattern.substring(1, idx - 1)[ CD ]
Line_7 $$ for (String excludedPattern : pathPatterns) -->Line_10 $$ if (excludedPattern.startsWith("[")) [ FD ]
Line_9 $$ int idx = 0-->Line_11 $$ idx = excludedPattern.indexOf("]") + 1[ FD ]
Line_2 $$ public static Map<Pattern, Set<Pattern>> loadPatterns(@NonNls String propertyKey) -->Line_4 $$ final String patterns = System.getProperty(propertyKey)[ FD ]
Line_18 $$ dirPatterns = new HashSet<Pattern>()-->Line_21 $$ dirPatterns.add(pattern)[ FD ]
Line_16 $$ Set<Pattern> dirPatterns = result.get(modulePattern)-->Line_17 $$ if (dirPatterns == null) [ FD ]
Line_12 $$ module = excludedPattern.substring(1, idx - 1)-->Line_14 $$ final Pattern modulePattern = module != null ? Pattern.compile(StringUtil.replace(module, "*", ".*")) : null[ FD ]
Line_15 $$ final Pattern pattern = Pattern.compile(FileUtil.convertAntToRegexp(excludedPattern.substring(idx)))-->Line_21 $$ dirPatterns.add(pattern)[ FD ]
Line_2 $$ public static Map<Pattern, Set<Pattern>> loadPatterns(@NonNls String propertyKey) -->Line_5 $$ if (patterns != null) [ CD ]
Line_7 $$ for (String excludedPattern : pathPatterns) -->Line_15 $$ final Pattern pattern = Pattern.compile(FileUtil.convertAntToRegexp(excludedPattern.substring(idx)))[ FD ]
Line_7 $$ for (String excludedPattern : pathPatterns) -->Line_12 $$ module = excludedPattern.substring(1, idx - 1)[ FD ]
Line_16 $$ Set<Pattern> dirPatterns = result.get(modulePattern)-->Line_18 $$ dirPatterns = new HashSet<Pattern>()[ FD ]
Line_3 $$ final Map<Pattern, Set<Pattern>> result = new HashMap<Pattern, Set<Pattern>>()-->Line_19 $$ result.put(modulePattern, dirPatterns)[ FD ]
