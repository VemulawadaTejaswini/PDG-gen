Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_36 $$ checkXSS(fileName, newContent)[ FD ]
Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_22 $$ newContent = StringUtil.replace(newContent, new String[] [ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_39 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ FD ]
Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)-->Line_33 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)-->Line_38 $$ newContent = checkPrincipalException(newContent)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_22 $$ newContent = StringUtil.replace(newContent, new String[] [ FD ]
Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_39 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)-->Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")[ FD ]
Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_48 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_41 $$ processErrorMessage(fileName, "Do not use Registry in modules: " + fileName)[ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_38 $$ newContent = checkPrincipalException(newContent)[ FD ]
Line_38 $$ newContent = checkPrincipalException(newContent)-->Line_43 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_5 $$ newContent = fixRedirectBackURL(newContent)-->Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)[ FD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_38 $$ newContent = checkPrincipalException(newContent)[ FD ]
Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_37 $$ newContent = fixIncorrectParameterTypeForLanguageUtil(newContent, true, fileName)[ FD ]
Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_39 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")[ FD ]
Line_5 $$ newContent = fixRedirectBackURL(newContent)-->Line_22 $$ newContent = StringUtil.replace(newContent, new String[] [ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)[ FD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)[ FD ]
Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_52 $$ if (!content.equals(newContent)) [ FD ]
Line_37 $$ newContent = fixIncorrectParameterTypeForLanguageUtil(newContent, true, fileName)-->Line_43 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_33 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_22 $$ newContent = StringUtil.replace(newContent, new String[] [ FD ]
Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)-->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_38 $$ newContent = checkPrincipalException(newContent)[ FD ]
Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_38 $$ newContent = checkPrincipalException(newContent)[ FD ]
Line_22 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_43 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)[ FD ]
Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)[ FD ]
Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_50 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_40 $$ if (portalSource && isModulesFile(absolutePath) && newContent.contains("import=\"com.liferay.registry.Registry")) [ FD ]
Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_37 $$ newContent = fixIncorrectParameterTypeForLanguageUtil(newContent, true, fileName)[ FD ]
Line_40 $$ if (portalSource && isModulesFile(absolutePath) && newContent.contains("import=\"com.liferay.registry.Registry")) -->Line_41 $$ processErrorMessage(fileName, "Do not use Registry in modules: " + fileName)[ CD ]
Line_37 $$ newContent = fixIncorrectParameterTypeForLanguageUtil(newContent, true, fileName)-->Line_52 $$ if (!content.equals(newContent)) [ FD ]
Line_5 $$ newContent = fixRedirectBackURL(newContent)-->Line_48 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_37 $$ newContent = fixIncorrectParameterTypeForLanguageUtil(newContent, true, fileName)[ FD ]
Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)-->Line_53 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_52 $$ if (!content.equals(newContent)) [ FD ]
Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)-->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)[ FD ]
Line_5 $$ newContent = fixRedirectBackURL(newContent)-->Line_53 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_5 $$ newContent = fixRedirectBackURL(newContent)-->Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)[ FD ]
Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_36 $$ checkXSS(fileName, newContent)[ FD ]
Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_40 $$ if (portalSource && isModulesFile(absolutePath) && newContent.contains("import=\"com.liferay.registry.Registry")) [ FD ]
Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_37 $$ newContent = fixIncorrectParameterTypeForLanguageUtil(newContent, true, fileName)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_32 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_53 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_50 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_38 $$ newContent = checkPrincipalException(newContent)[ FD ]
Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_23 $$ if (newContent.contains("    ")) [ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)[ FD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_19 $$ processErrorMessage(fileName, "move imports to init.jsp: " + fileName)[ FD ]
Line_22 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_37 $$ newContent = fixIncorrectParameterTypeForLanguageUtil(newContent, true, fileName)[ FD ]
Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_32 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)[ FD ]
Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)-->Line_48 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_22 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_32 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_4 $$ newContent = StringUtil.replace(newContent, new String[] [ CD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_52 $$ if (!content.equals(newContent)) [ FD ]
Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)[ FD ]
Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_48 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_44 $$ if (matcher.find()) -->Line_50 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ CD ]
Line_5 $$ newContent = fixRedirectBackURL(newContent)-->Line_37 $$ newContent = fixIncorrectParameterTypeForLanguageUtil(newContent, true, fileName)[ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_4 $$ newContent = StringUtil.replace(newContent, new String[] [ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)-->Line_48 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_22 $$ newContent = StringUtil.replace(newContent, new String[] [ FD ]
Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_36 $$ checkXSS(fileName, newContent)[ FD ]
Line_39 $$ newContent = formatLogFileName(absolutePath, newContent)-->Line_43 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")[ FD ]
Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_53 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_5 $$ newContent = fixRedirectBackURL(newContent)[ FD ]
Line_37 $$ newContent = fixIncorrectParameterTypeForLanguageUtil(newContent, true, fileName)-->Line_40 $$ if (portalSource && isModulesFile(absolutePath) && newContent.contains("import=\"com.liferay.registry.Registry")) [ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_50 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_38 $$ newContent = checkPrincipalException(newContent)[ FD ]
Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_32 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)-->Line_50 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_24 $$ if (!fileName.matches(".*template.*\\.vm$")) [ FD ]
Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)-->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")[ FD ]
Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")[ FD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_39 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)-->Line_53 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ CD ]
Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_37 $$ newContent = fixIncorrectParameterTypeForLanguageUtil(newContent, true, fileName)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_18 $$ if (portalSource && content.contains("page import=") && !fileName.contains("init.jsp") && !fileName.contains("init-ext.jsp") && !fileName.contains("/taglib/aui/") && !fileName.endsWith("touch.jsp") && (fileName.endsWith(".jspf") || content.contains("include file="))) [ CD ]
Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_53 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_33 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_39 $$ newContent = formatLogFileName(absolutePath, newContent)[ CD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_18 $$ if (portalSource && content.contains("page import=") && !fileName.contains("init.jsp") && !fileName.contains("init-ext.jsp") && !fileName.contains("/taglib/aui/") && !fileName.endsWith("touch.jsp") && (fileName.endsWith(".jspf") || content.contains("include file="))) [ FD ]
Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")[ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_33 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_22 $$ newContent = StringUtil.replace(newContent, new String[] [ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_48 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)[ CD ]
Line_5 $$ newContent = fixRedirectBackURL(newContent)-->Line_50 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_5 $$ newContent = fixRedirectBackURL(newContent)-->Line_36 $$ checkXSS(fileName, newContent)[ FD ]
Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_43 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_36 $$ checkXSS(fileName, newContent)[ FD ]
Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_40 $$ if (portalSource && isModulesFile(absolutePath) && newContent.contains("import=\"com.liferay.registry.Registry")) [ FD ]
Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_53 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)-->Line_52 $$ if (!content.equals(newContent)) [ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_22 $$ newContent = StringUtil.replace(newContent, new String[] [ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_55 $$ return newContent[ CD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_40 $$ if (portalSource && isModulesFile(absolutePath) && newContent.contains("import=\"com.liferay.registry.Registry")) [ CD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_50 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_5 $$ newContent = fixRedirectBackURL(newContent)-->Line_33 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_50 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")[ CD ]
Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_23 $$ if (newContent.contains("    ")) [ FD ]
Line_37 $$ newContent = fixIncorrectParameterTypeForLanguageUtil(newContent, true, fileName)-->Line_53 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_33 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_50 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_23 $$ if (newContent.contains("    ")) [ FD ]
Line_5 $$ newContent = fixRedirectBackURL(newContent)-->Line_40 $$ if (portalSource && isModulesFile(absolutePath) && newContent.contains("import=\"com.liferay.registry.Registry")) [ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")[ FD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_50 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_53 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_49 $$ int javaClassLineCount = StringUtil.count(beforeJavaClass, "\n") + 1-->Line_50 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_33 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ CD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)[ CD ]
Line_5 $$ newContent = fixRedirectBackURL(newContent)-->Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_5 $$ newContent = fixRedirectBackURL(newContent)[ CD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_48 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_5 $$ newContent = fixRedirectBackURL(newContent)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)[ FD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_33 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_52 $$ if (!content.equals(newContent)) [ CD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_50 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_53 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ FD ]
Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)-->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_43 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_18 $$ if (portalSource && content.contains("page import=") && !fileName.contains("init.jsp") && !fileName.contains("init-ext.jsp") && !fileName.contains("/taglib/aui/") && !fileName.endsWith("touch.jsp") && (fileName.endsWith(".jspf") || content.contains("include file="))) -->Line_19 $$ processErrorMessage(fileName, "move imports to init.jsp: " + fileName)[ CD ]
Line_5 $$ newContent = fixRedirectBackURL(newContent)-->Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")[ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_39 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)[ CD ]
Line_38 $$ newContent = checkPrincipalException(newContent)-->Line_50 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ FD ]
Line_24 $$ if (!fileName.matches(".*template.*\\.vm$")) -->Line_25 $$ processErrorMessage(fileName, "tab: " + fileName)[ CD ]
Line_5 $$ newContent = fixRedirectBackURL(newContent)-->Line_52 $$ if (!content.equals(newContent)) [ FD ]
Line_50 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)-->Line_53 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)[ FD ]
Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)-->Line_36 $$ checkXSS(fileName, newContent)[ FD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)[ FD ]
Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)-->Line_43 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_52 $$ if (!content.equals(newContent)) [ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_36 $$ checkXSS(fileName, newContent)[ FD ]
Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)-->Line_39 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)[ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_33 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_43 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_38 $$ newContent = checkPrincipalException(newContent)-->Line_52 $$ if (!content.equals(newContent)) [ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_33 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)[ CD ]
Line_22 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_40 $$ if (portalSource && isModulesFile(absolutePath) && newContent.contains("import=\"com.liferay.registry.Registry")) [ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_52 $$ if (!content.equals(newContent)) [ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_22 $$ newContent = StringUtil.replace(newContent, new String[] [ CD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)[ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)[ FD ]
Line_39 $$ newContent = formatLogFileName(absolutePath, newContent)-->Line_50 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_37 $$ newContent = fixIncorrectParameterTypeForLanguageUtil(newContent, true, fileName)[ FD ]
Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)-->Line_52 $$ if (!content.equals(newContent)) [ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_43 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)[ FD ]
Line_44 $$ if (matcher.find()) -->Line_48 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ CD ]
Line_39 $$ newContent = formatLogFileName(absolutePath, newContent)-->Line_52 $$ if (!content.equals(newContent)) [ FD ]
Line_5 $$ newContent = fixRedirectBackURL(newContent)-->Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_32 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_33 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_22 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_50 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_5 $$ newContent = fixRedirectBackURL(newContent)-->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_52 $$ if (!content.equals(newContent)) [ FD ]
Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_33 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_32 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ CD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_37 $$ newContent = fixIncorrectParameterTypeForLanguageUtil(newContent, true, fileName)[ FD ]
Line_38 $$ newContent = checkPrincipalException(newContent)-->Line_53 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")[ FD ]
Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)[ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_40 $$ if (portalSource && isModulesFile(absolutePath) && newContent.contains("import=\"com.liferay.registry.Registry")) [ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_32 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_40 $$ if (portalSource && isModulesFile(absolutePath) && newContent.contains("import=\"com.liferay.registry.Registry")) [ FD ]
Line_5 $$ newContent = fixRedirectBackURL(newContent)-->Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_37 $$ newContent = fixIncorrectParameterTypeForLanguageUtil(newContent, true, fileName)[ CD ]
Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_40 $$ if (portalSource && isModulesFile(absolutePath) && newContent.contains("import=\"com.liferay.registry.Registry")) [ FD ]
Line_39 $$ newContent = formatLogFileName(absolutePath, newContent)-->Line_40 $$ if (portalSource && isModulesFile(absolutePath) && newContent.contains("import=\"com.liferay.registry.Registry")) [ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)[ FD ]
Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_52 $$ if (!content.equals(newContent)) [ FD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)[ FD ]
Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_50 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_25 $$ processErrorMessage(fileName, "tab: " + fileName)[ FD ]
Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)-->Line_33 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_40 $$ if (portalSource && isModulesFile(absolutePath) && newContent.contains("import=\"com.liferay.registry.Registry")) [ FD ]
Line_5 $$ newContent = fixRedirectBackURL(newContent)-->Line_43 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_38 $$ newContent = checkPrincipalException(newContent)-->Line_40 $$ if (portalSource && isModulesFile(absolutePath) && newContent.contains("import=\"com.liferay.registry.Registry")) [ FD ]
Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_32 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_43 $$ Matcher matcher = _javaClassPattern.matcher(newContent)-->Line_44 $$ if (matcher.find()) [ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_50 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_43 $$ Matcher matcher = _javaClassPattern.matcher(newContent)-->Line_45 $$ String javaClassContent = matcher.group()[ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_39 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)[ FD ]
Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)-->Line_50 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_36 $$ checkXSS(fileName, newContent)[ CD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_36 $$ checkXSS(fileName, newContent)[ FD ]
Line_22 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")[ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_39 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_36 $$ checkXSS(fileName, newContent)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_22 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_23 $$ if (newContent.contains("    ")) [ FD ]
Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_33 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ FD ]
Line_5 $$ newContent = fixRedirectBackURL(newContent)-->Line_38 $$ newContent = checkPrincipalException(newContent)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")[ CD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_43 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ CD ]
Line_47 $$ String javaClassName = matcher.group(2)-->Line_50 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_37 $$ newContent = fixIncorrectParameterTypeForLanguageUtil(newContent, true, fileName)-->Line_38 $$ newContent = checkPrincipalException(newContent)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")[ FD ]
Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)[ FD ]
Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_48 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_22 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ FD ]
Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)[ FD ]
Line_22 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_38 $$ newContent = checkPrincipalException(newContent)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_38 $$ newContent = checkPrincipalException(newContent)[ CD ]
Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)-->Line_32 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)-->Line_38 $$ newContent = checkPrincipalException(newContent)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")[ FD ]
Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)[ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)[ FD ]
Line_22 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_48 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_36 $$ checkXSS(fileName, newContent)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ CD ]
Line_5 $$ newContent = fixRedirectBackURL(newContent)-->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)[ FD ]
Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")[ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_33 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_44 $$ if (matcher.find()) -->Line_49 $$ int javaClassLineCount = StringUtil.count(beforeJavaClass, "\n") + 1[ CD ]
Line_22 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ CD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_40 $$ if (portalSource && isModulesFile(absolutePath) && newContent.contains("import=\"com.liferay.registry.Registry")) [ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_38 $$ newContent = checkPrincipalException(newContent)[ FD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_32 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_5 $$ newContent = fixRedirectBackURL(newContent)-->Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")[ FD ]
Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_53 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_39 $$ newContent = formatLogFileName(absolutePath, newContent)-->Line_48 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ FD ]
Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)-->Line_37 $$ newContent = fixIncorrectParameterTypeForLanguageUtil(newContent, true, fileName)[ FD ]
Line_5 $$ newContent = fixRedirectBackURL(newContent)-->Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)[ FD ]
Line_22 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_43 $$ Matcher matcher = _javaClassPattern.matcher(newContent)-->Line_47 $$ String javaClassName = matcher.group(2)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_52 $$ if (!content.equals(newContent)) [ FD ]
Line_50 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)-->Line_52 $$ if (!content.equals(newContent)) [ FD ]
Line_44 $$ if (matcher.find()) -->Line_45 $$ String javaClassContent = matcher.group()[ CD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_44 $$ if (matcher.find()) [ CD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_37 $$ newContent = fixIncorrectParameterTypeForLanguageUtil(newContent, true, fileName)[ FD ]
Line_44 $$ if (matcher.find()) -->Line_47 $$ String javaClassName = matcher.group(2)[ CD ]
Line_5 $$ newContent = fixRedirectBackURL(newContent)-->Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)[ FD ]
Line_5 $$ newContent = fixRedirectBackURL(newContent)-->Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)[ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")[ FD ]
Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_48 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_48 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_38 $$ newContent = checkPrincipalException(newContent)[ FD ]
Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_53 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ FD ]
Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ FD ]
Line_38 $$ newContent = checkPrincipalException(newContent)-->Line_48 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_40 $$ if (portalSource && isModulesFile(absolutePath) && newContent.contains("import=\"com.liferay.registry.Registry")) [ FD ]
Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)-->Line_43 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ FD ]
Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_38 $$ newContent = checkPrincipalException(newContent)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)[ FD ]
Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)-->Line_37 $$ newContent = fixIncorrectParameterTypeForLanguageUtil(newContent, true, fileName)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")[ FD ]
Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_36 $$ checkXSS(fileName, newContent)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)[ CD ]
Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_23 $$ if (newContent.contains("    ")) [ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_40 $$ if (portalSource && isModulesFile(absolutePath) && newContent.contains("import=\"com.liferay.registry.Registry")) [ FD ]
Line_39 $$ newContent = formatLogFileName(absolutePath, newContent)-->Line_53 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ CD ]
Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_52 $$ if (!content.equals(newContent)) [ FD ]
Line_37 $$ newContent = fixIncorrectParameterTypeForLanguageUtil(newContent, true, fileName)-->Line_39 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_37 $$ newContent = fixIncorrectParameterTypeForLanguageUtil(newContent, true, fileName)[ FD ]
Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_23 $$ if (newContent.contains("    ")) [ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)[ FD ]
Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_37 $$ newContent = fixIncorrectParameterTypeForLanguageUtil(newContent, true, fileName)[ FD ]
Line_5 $$ newContent = fixRedirectBackURL(newContent)-->Line_23 $$ if (newContent.contains("    ")) [ FD ]
Line_22 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_33 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_37 $$ newContent = fixIncorrectParameterTypeForLanguageUtil(newContent, true, fileName)-->Line_48 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_52 $$ if (!content.equals(newContent)) [ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_22 $$ newContent = StringUtil.replace(newContent, new String[] [ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_40 $$ if (portalSource && isModulesFile(absolutePath) && newContent.contains("import=\"com.liferay.registry.Registry")) [ FD ]
Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_38 $$ newContent = checkPrincipalException(newContent)[ FD ]
Line_22 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_52 $$ if (!content.equals(newContent)) [ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_39 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_23 $$ if (newContent.contains("    ")) [ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_37 $$ newContent = fixIncorrectParameterTypeForLanguageUtil(newContent, true, fileName)[ FD ]
Line_22 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_48 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_52 $$ if (!content.equals(newContent)) -->Line_53 $$ _jspContents.put(fileName, newContent)[ CD ]
Line_23 $$ if (newContent.contains("    ")) -->Line_24 $$ if (!fileName.matches(".*template.*\\.vm$")) [ CD ]
Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_32 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_43 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_36 $$ checkXSS(fileName, newContent)[ FD ]
Line_46 $$ javaClassContent = javaClassContent.substring(1)-->Line_50 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_23 $$ if (newContent.contains("    ")) [ CD ]
Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_43 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_50 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_44 $$ if (matcher.find()) -->Line_46 $$ javaClassContent = javaClassContent.substring(1)[ CD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)[ FD ]
Line_5 $$ newContent = fixRedirectBackURL(newContent)-->Line_39 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)[ CD ]
Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)-->Line_36 $$ checkXSS(fileName, newContent)[ FD ]
Line_45 $$ String javaClassContent = matcher.group()-->Line_46 $$ javaClassContent = javaClassContent.substring(1)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_32 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_53 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_38 $$ newContent = checkPrincipalException(newContent)[ FD ]
Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_43 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_38 $$ newContent = checkPrincipalException(newContent)-->Line_39 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_40 $$ if (portalSource && isModulesFile(absolutePath) && newContent.contains("import=\"com.liferay.registry.Registry")) [ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_50 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_32 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)[ FD ]
Line_22 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_39 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)-->Line_40 $$ if (portalSource && isModulesFile(absolutePath) && newContent.contains("import=\"com.liferay.registry.Registry")) [ FD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_48 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_43 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_53 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_23 $$ if (newContent.contains("    ")) [ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_23 $$ if (newContent.contains("    ")) [ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)[ FD ]
Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_22 $$ newContent = StringUtil.replace(newContent, new String[] [ FD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_36 $$ checkXSS(fileName, newContent)[ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_37 $$ newContent = fixIncorrectParameterTypeForLanguageUtil(newContent, true, fileName)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_10 $$ if (_stripJSPImports && !_jspContents.isEmpty()) [ CD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_53 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_36 $$ checkXSS(fileName, newContent)[ FD ]
Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")[ FD ]
Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_39 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)[ FD ]
Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)-->Line_40 $$ if (portalSource && isModulesFile(absolutePath) && newContent.contains("import=\"com.liferay.registry.Registry")) [ FD ]
Line_22 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_53 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_43 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_5 $$ newContent = fixRedirectBackURL(newContent)-->Line_32 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_32 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_53 $$ _jspContents.put(fileName, newContent)[ FD ]
Line_22 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_39 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_22 $$ newContent = StringUtil.replace(newContent, new String[] [ FD ]
Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")[ FD ]
Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)[ FD ]
Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")[ FD ]
Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_43 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_37 $$ newContent = fixIncorrectParameterTypeForLanguageUtil(newContent, true, fileName)-->Line_50 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_6 $$ newContent = fixCompatClassImports(absolutePath, newContent)-->Line_39 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_45 $$ String javaClassContent = matcher.group()-->Line_50 $$ newContent = formatJavaTerms(javaClassName, null, file, fileName, absolutePath, newContent, javaClassContent, javaClassLineCount, null, null, null, null)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_23 $$ if (newContent.contains("    ")) [ FD ]
Line_48 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)-->Line_49 $$ int javaClassLineCount = StringUtil.count(beforeJavaClass, "\n") + 1[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_48 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_8 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern2, false)-->Line_52 $$ if (!content.equals(newContent)) [ FD ]
Line_3 $$ String newContent = formatJSP(fileName, absolutePath, content)-->Line_52 $$ if (!content.equals(newContent)) [ FD ]
Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")-->Line_32 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_30 $$ newContent = fixSessionKey(fileName, newContent, sessionKeyPattern)-->Line_32 $$ checkLanguageKeys(fileName, newContent, languageKeyPattern)[ FD ]
Line_43 $$ Matcher matcher = _javaClassPattern.matcher(newContent)-->Line_48 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)-->Line_43 $$ Matcher matcher = _javaClassPattern.matcher(newContent)[ FD ]
Line_22 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_36 $$ checkXSS(fileName, newContent)[ FD ]
Line_28 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ page import=")-->Line_29 $$ newContent = compressImportsOrTaglibs(fileName, newContent, "<%@ taglib uri=")[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_31 $$ newContent = fixSessionKey(fileName, newContent, taglibSessionKeyPattern)-->Line_39 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_12 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspImportPattern, true)-->Line_34 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern2)[ FD ]
Line_7 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern1, true)-->Line_39 $$ newContent = formatLogFileName(absolutePath, newContent)[ FD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_35 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern3)[ FD ]
Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)-->Line_33 $$ checkLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern1)[ FD ]
Line_21 $$ newContent = fixCopyright(newContent, absolutePath, fileName)-->Line_48 $$ String beforeJavaClass = newContent.substring(0, matcher.start() + 1)[ FD ]
Line_5 $$ newContent = fixRedirectBackURL(newContent)-->Line_13 $$ newContent = formatJSPImportsOrTaglibs(fileName, newContent, _jspTaglibPattern, false)[ FD ]
Line_4 $$ newContent = StringUtil.replace(newContent, new String[] -->Line_9 $$ newContent = fixEmptyLineInNestedTags(newContent, _emptyLineInNestedTagsPattern3, false)[ FD ]
