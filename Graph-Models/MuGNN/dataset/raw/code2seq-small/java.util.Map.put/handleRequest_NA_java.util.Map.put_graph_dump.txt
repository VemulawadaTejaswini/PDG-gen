Line_16 $$ if (scriptValue != null) -->Line_23 $$ updateRequest.script(new Script(scriptValue.script(), scriptValue.scriptType(), scriptParameterParser.lang(), scriptParams))[ CD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_45 $$ upsertRequest.version(RestActions.parseVersion(request))[ FD ]
Line_25 $$ String sField = request.param("fields")-->Line_26 $$ if (sField != null) [ FD ]
Line_3 $$ UpdateRequest updateRequest = new UpdateRequest(request.param("index"), request.param("type"), request.param("id"))-->Line_4 $$ updateRequest.routing(request.param("routing"))[ FD ]
Line_37 $$ IndexRequest upsertRequest = updateRequest.upsertRequest()-->Line_46 $$ upsertRequest.versionType(VersionType.fromString(request.param("version_type"), upsertRequest.versionType()))[ FD ]
Line_35 $$ if (request.hasContent()) -->Line_48 $$ IndexRequest doc = updateRequest.doc()[ CD ]
Line_3 $$ UpdateRequest updateRequest = new UpdateRequest(request.param("index"), request.param("type"), request.param("id"))-->Line_12 $$ updateRequest.docAsUpsert(request.paramAsBoolean("doc_as_upsert", updateRequest.docAsUpsert()))[ FD ]
Line_49 $$ if (doc != null) -->Line_50 $$ doc.routing(request.param("routing"))[ CD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_7 $$ updateRequest.refresh(request.paramAsBoolean("refresh", updateRequest.refresh()))[ FD ]
Line_49 $$ if (doc != null) -->Line_52 $$ doc.timestamp(request.param("timestamp"))[ CD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_4 $$ updateRequest.routing(request.param("routing"))[ FD ]
Line_3 $$ UpdateRequest updateRequest = new UpdateRequest(request.param("index"), request.param("type"), request.param("id"))-->Line_23 $$ updateRequest.script(new Script(scriptValue.script(), scriptValue.scriptType(), scriptParameterParser.lang(), scriptParams))[ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_42 $$ if (request.hasParam("ttl")) [ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_13 $$ ScriptParameterParser scriptParameterParser = new ScriptParameterParser()[ CD ]
Line_3 $$ UpdateRequest updateRequest = new UpdateRequest(request.param("index"), request.param("type"), request.param("id"))-->Line_33 $$ updateRequest.version(RestActions.parseVersion(request))[ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_6 $$ updateRequest.timeout(request.paramAsTime("timeout", updateRequest.timeout()))[ CD ]
Line_9 $$ if (consistencyLevel != null) -->Line_10 $$ updateRequest.consistencyLevel(WriteConsistencyLevel.fromString(consistencyLevel))[ CD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_3 $$ UpdateRequest updateRequest = new UpdateRequest(request.param("index"), request.param("type"), request.param("id"))[ CD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_35 $$ if (request.hasContent()) [ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_41 $$ upsertRequest.timestamp(request.param("timestamp"))[ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_3 $$ UpdateRequest updateRequest = new UpdateRequest(request.param("index"), request.param("type"), request.param("id"))[ FD ]
Line_3 $$ UpdateRequest updateRequest = new UpdateRequest(request.param("index"), request.param("type"), request.param("id"))-->Line_37 $$ IndexRequest upsertRequest = updateRequest.upsertRequest()[ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_60 $$ client.update(updateRequest, new RestStatusToXContentListener(channel))[ CD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_26 $$ if (sField != null) [ CD ]
Line_13 $$ ScriptParameterParser scriptParameterParser = new ScriptParameterParser()-->Line_23 $$ updateRequest.script(new Script(scriptValue.script(), scriptValue.scriptType(), scriptParameterParser.lang(), scriptParams))[ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_43 $$ upsertRequest.ttl(request.param("ttl"))[ FD ]
Line_8 $$ String consistencyLevel = request.param("consistency")-->Line_9 $$ if (consistencyLevel != null) [ FD ]
Line_3 $$ UpdateRequest updateRequest = new UpdateRequest(request.param("index"), request.param("type"), request.param("id"))-->Line_34 $$ updateRequest.versionType(VersionType.fromString(request.param("version_type"), updateRequest.versionType()))[ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_57 $$ doc.versionType(VersionType.fromString(request.param("version_type"), doc.versionType()))[ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_25 $$ String sField = request.param("fields")[ FD ]
Line_48 $$ IndexRequest doc = updateRequest.doc()-->Line_49 $$ if (doc != null) [ FD ]
Line_37 $$ IndexRequest upsertRequest = updateRequest.upsertRequest()-->Line_45 $$ upsertRequest.version(RestActions.parseVersion(request))[ FD ]
Line_48 $$ IndexRequest doc = updateRequest.doc()-->Line_51 $$ doc.parent(request.param("parent"))[ FD ]
Line_3 $$ UpdateRequest updateRequest = new UpdateRequest(request.param("index"), request.param("type"), request.param("id"))-->Line_60 $$ client.update(updateRequest, new RestStatusToXContentListener(channel))[ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_5 $$ updateRequest.parent(request.param("parent"))[ FD ]
Line_35 $$ if (request.hasContent()) -->Line_49 $$ if (doc != null) [ CD ]
Line_3 $$ UpdateRequest updateRequest = new UpdateRequest(request.param("index"), request.param("type"), request.param("id"))-->Line_32 $$ updateRequest.retryOnConflict(request.paramAsInt("retry_on_conflict", updateRequest.retryOnConflict()))[ FD ]
Line_49 $$ if (doc != null) -->Line_56 $$ doc.version(RestActions.parseVersion(request))[ CD ]
Line_13 $$ ScriptParameterParser scriptParameterParser = new ScriptParameterParser()-->Line_14 $$ scriptParameterParser.parseParams(request)[ FD ]
Line_37 $$ IndexRequest upsertRequest = updateRequest.upsertRequest()-->Line_40 $$ upsertRequest.parent(request.param("parent"))[ FD ]
Line_38 $$ if (upsertRequest != null) -->Line_42 $$ if (request.hasParam("ttl")) [ CD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_60 $$ client.update(updateRequest, new RestStatusToXContentListener(channel))[ FD ]
Line_3 $$ UpdateRequest updateRequest = new UpdateRequest(request.param("index"), request.param("type"), request.param("id"))-->Line_7 $$ updateRequest.refresh(request.paramAsBoolean("refresh", updateRequest.refresh()))[ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_32 $$ updateRequest.retryOnConflict(request.paramAsInt("retry_on_conflict", updateRequest.retryOnConflict()))[ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_52 $$ doc.timestamp(request.param("timestamp"))[ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_34 $$ updateRequest.versionType(VersionType.fromString(request.param("version_type"), updateRequest.versionType()))[ FD ]
Line_25 $$ String sField = request.param("fields")-->Line_27 $$ String[] sFields = Strings.splitStringByCommaToArray(sField)[ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_4 $$ updateRequest.routing(request.param("routing"))[ CD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_18 $$ for (Map.Entry<String, String> entry : request.params().entrySet()) [ FD ]
Line_49 $$ if (doc != null) -->Line_51 $$ doc.parent(request.param("parent"))[ CD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_54 $$ doc.ttl(request.param("ttl"))[ FD ]
Line_53 $$ if (request.hasParam("ttl")) -->Line_54 $$ doc.ttl(request.param("ttl"))[ CD ]
Line_37 $$ IndexRequest upsertRequest = updateRequest.upsertRequest()-->Line_38 $$ if (upsertRequest != null) [ FD ]
Line_28 $$ if (sFields != null) -->Line_29 $$ updateRequest.fields(sFields)[ CD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_56 $$ doc.version(RestActions.parseVersion(request))[ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_39 $$ upsertRequest.routing(request.param("routing"))[ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_6 $$ updateRequest.timeout(request.paramAsTime("timeout", updateRequest.timeout()))[ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_7 $$ updateRequest.refresh(request.paramAsBoolean("refresh", updateRequest.refresh()))[ CD ]
Line_37 $$ IndexRequest upsertRequest = updateRequest.upsertRequest()-->Line_41 $$ upsertRequest.timestamp(request.param("timestamp"))[ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_12 $$ updateRequest.docAsUpsert(request.paramAsBoolean("doc_as_upsert", updateRequest.docAsUpsert()))[ CD ]
Line_49 $$ if (doc != null) -->Line_57 $$ doc.versionType(VersionType.fromString(request.param("version_type"), doc.versionType()))[ CD ]
Line_26 $$ if (sField != null) -->Line_27 $$ String[] sFields = Strings.splitStringByCommaToArray(sField)[ CD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_25 $$ String sField = request.param("fields")[ CD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_34 $$ updateRequest.versionType(VersionType.fromString(request.param("version_type"), updateRequest.versionType()))[ CD ]
Line_35 $$ if (request.hasContent()) -->Line_36 $$ updateRequest.source(request.content())[ CD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_46 $$ upsertRequest.versionType(VersionType.fromString(request.param("version_type"), upsertRequest.versionType()))[ FD ]
Line_18 $$ for (Map.Entry<String, String> entry : request.params().entrySet()) -->Line_20 $$ scriptParams.put(entry.getKey().substring(3), entry.getValue())[ FD ]
Line_35 $$ if (request.hasContent()) -->Line_38 $$ if (upsertRequest != null) [ CD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_51 $$ doc.parent(request.param("parent"))[ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_5 $$ updateRequest.parent(request.param("parent"))[ CD ]
Line_26 $$ if (sField != null) -->Line_28 $$ if (sFields != null) [ CD ]
Line_13 $$ ScriptParameterParser scriptParameterParser = new ScriptParameterParser()-->Line_15 $$ ScriptParameterValue scriptValue = scriptParameterParser.getDefaultScriptParameterValue()[ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_32 $$ updateRequest.retryOnConflict(request.paramAsInt("retry_on_conflict", updateRequest.retryOnConflict()))[ CD ]
Line_48 $$ IndexRequest doc = updateRequest.doc()-->Line_54 $$ doc.ttl(request.param("ttl"))[ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_8 $$ String consistencyLevel = request.param("consistency")[ FD ]
Line_16 $$ if (scriptValue != null) -->Line_17 $$ Map<String, Object> scriptParams = new HashMap()[ CD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_16 $$ if (scriptValue != null) [ CD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_50 $$ doc.routing(request.param("routing"))[ FD ]
Line_19 $$ if (entry.getKey().startsWith("sp_")) -->Line_20 $$ scriptParams.put(entry.getKey().substring(3), entry.getValue())[ CD ]
Line_15 $$ ScriptParameterValue scriptValue = scriptParameterParser.getDefaultScriptParameterValue()-->Line_23 $$ updateRequest.script(new Script(scriptValue.script(), scriptValue.scriptType(), scriptParameterParser.lang(), scriptParams))[ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_35 $$ if (request.hasContent()) [ CD ]
Line_38 $$ if (upsertRequest != null) -->Line_45 $$ upsertRequest.version(RestActions.parseVersion(request))[ CD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_40 $$ upsertRequest.parent(request.param("parent"))[ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_12 $$ updateRequest.docAsUpsert(request.paramAsBoolean("doc_as_upsert", updateRequest.docAsUpsert()))[ FD ]
Line_3 $$ UpdateRequest updateRequest = new UpdateRequest(request.param("index"), request.param("type"), request.param("id"))-->Line_48 $$ IndexRequest doc = updateRequest.doc()[ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_8 $$ String consistencyLevel = request.param("consistency")[ CD ]
Line_35 $$ if (request.hasContent()) -->Line_37 $$ IndexRequest upsertRequest = updateRequest.upsertRequest()[ CD ]
Line_48 $$ IndexRequest doc = updateRequest.doc()-->Line_57 $$ doc.versionType(VersionType.fromString(request.param("version_type"), doc.versionType()))[ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_15 $$ ScriptParameterValue scriptValue = scriptParameterParser.getDefaultScriptParameterValue()[ CD ]
Line_38 $$ if (upsertRequest != null) -->Line_41 $$ upsertRequest.timestamp(request.param("timestamp"))[ CD ]
Line_38 $$ if (upsertRequest != null) -->Line_40 $$ upsertRequest.parent(request.param("parent"))[ CD ]
Line_37 $$ IndexRequest upsertRequest = updateRequest.upsertRequest()-->Line_39 $$ upsertRequest.routing(request.param("routing"))[ FD ]
Line_3 $$ UpdateRequest updateRequest = new UpdateRequest(request.param("index"), request.param("type"), request.param("id"))-->Line_10 $$ updateRequest.consistencyLevel(WriteConsistencyLevel.fromString(consistencyLevel))[ FD ]
Line_17 $$ Map<String, Object> scriptParams = new HashMap()-->Line_20 $$ scriptParams.put(entry.getKey().substring(3), entry.getValue())[ FD ]
Line_3 $$ UpdateRequest updateRequest = new UpdateRequest(request.param("index"), request.param("type"), request.param("id"))-->Line_6 $$ updateRequest.timeout(request.paramAsTime("timeout", updateRequest.timeout()))[ FD ]
Line_8 $$ String consistencyLevel = request.param("consistency")-->Line_10 $$ updateRequest.consistencyLevel(WriteConsistencyLevel.fromString(consistencyLevel))[ FD ]
Line_38 $$ if (upsertRequest != null) -->Line_46 $$ upsertRequest.versionType(VersionType.fromString(request.param("version_type"), upsertRequest.versionType()))[ CD ]
Line_18 $$ for (Map.Entry<String, String> entry : request.params().entrySet()) -->Line_19 $$ if (entry.getKey().startsWith("sp_")) [ FD ]
Line_27 $$ String[] sFields = Strings.splitStringByCommaToArray(sField)-->Line_29 $$ updateRequest.fields(sFields)[ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_36 $$ updateRequest.source(request.content())[ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_14 $$ scriptParameterParser.parseParams(request)[ CD ]
Line_3 $$ UpdateRequest updateRequest = new UpdateRequest(request.param("index"), request.param("type"), request.param("id"))-->Line_5 $$ updateRequest.parent(request.param("parent"))[ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_9 $$ if (consistencyLevel != null) [ CD ]
Line_38 $$ if (upsertRequest != null) -->Line_39 $$ upsertRequest.routing(request.param("routing"))[ CD ]
Line_15 $$ ScriptParameterValue scriptValue = scriptParameterParser.getDefaultScriptParameterValue()-->Line_16 $$ if (scriptValue != null) [ FD ]
Line_42 $$ if (request.hasParam("ttl")) -->Line_43 $$ upsertRequest.ttl(request.param("ttl"))[ CD ]
Line_3 $$ UpdateRequest updateRequest = new UpdateRequest(request.param("index"), request.param("type"), request.param("id"))-->Line_29 $$ updateRequest.fields(sFields)[ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_53 $$ if (request.hasParam("ttl")) [ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_14 $$ scriptParameterParser.parseParams(request)[ FD ]
Line_3 $$ UpdateRequest updateRequest = new UpdateRequest(request.param("index"), request.param("type"), request.param("id"))-->Line_36 $$ updateRequest.source(request.content())[ FD ]
Line_48 $$ IndexRequest doc = updateRequest.doc()-->Line_52 $$ doc.timestamp(request.param("timestamp"))[ FD ]
Line_37 $$ IndexRequest upsertRequest = updateRequest.upsertRequest()-->Line_43 $$ upsertRequest.ttl(request.param("ttl"))[ FD ]
Line_27 $$ String[] sFields = Strings.splitStringByCommaToArray(sField)-->Line_28 $$ if (sFields != null) [ FD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_33 $$ updateRequest.version(RestActions.parseVersion(request))[ FD ]
Line_48 $$ IndexRequest doc = updateRequest.doc()-->Line_50 $$ doc.routing(request.param("routing"))[ FD ]
Line_48 $$ IndexRequest doc = updateRequest.doc()-->Line_56 $$ doc.version(RestActions.parseVersion(request))[ FD ]
Line_49 $$ if (doc != null) -->Line_53 $$ if (request.hasParam("ttl")) [ CD ]
Line_2 $$ public void handleRequest(final RestRequest request, final RestChannel channel, final Client client) throws Exception -->Line_33 $$ updateRequest.version(RestActions.parseVersion(request))[ CD ]
