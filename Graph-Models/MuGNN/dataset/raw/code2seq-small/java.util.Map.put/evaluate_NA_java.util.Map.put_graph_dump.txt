Line_9 $$ if (pattern != null) -->Line_11 $$ return matcher.find()[ CD ]
Line_2 $$ public static Boolean evaluate(String string, String regex, int flags, Navigator navigator) -->Line_8 $$ Pattern pattern = patterns.get(regex)[ CD ]
Line_10 $$ Matcher matcher = pattern.matcher(string)-->Line_11 $$ return matcher.find()[ FD ]
Line_4 $$ Map<String, Pattern> patterns = threadLocalPatterns.get(_THREAD_LOCAL_PATTERNS_KEY)-->Line_14 $$ patterns.put(regex, pattern)[ FD ]
Line_13 $$ pattern = Pattern.compile(regex, flags)-->Line_16 $$ Matcher matcher = pattern.matcher(string)[ FD ]
Line_8 $$ Pattern pattern = patterns.get(regex)-->Line_16 $$ Matcher matcher = pattern.matcher(string)[ FD ]
Line_6 $$ patterns = new HashMap()-->Line_8 $$ Pattern pattern = patterns.get(regex)[ FD ]
Line_8 $$ Pattern pattern = patterns.get(regex)-->Line_13 $$ pattern = Pattern.compile(regex, flags)[ FD ]
Line_2 $$ public static Boolean evaluate(String string, String regex, int flags, Navigator navigator) -->Line_4 $$ Map<String, Pattern> patterns = threadLocalPatterns.get(_THREAD_LOCAL_PATTERNS_KEY)[ CD ]
Line_8 $$ Pattern pattern = patterns.get(regex)-->Line_9 $$ if (pattern != null) [ FD ]
Line_2 $$ public static Boolean evaluate(String string, String regex, int flags, Navigator navigator) -->Line_14 $$ patterns.put(regex, pattern)[ CD ]
Line_4 $$ Map<String, Pattern> patterns = threadLocalPatterns.get(_THREAD_LOCAL_PATTERNS_KEY)-->Line_15 $$ threadLocalPatterns.put(_THREAD_LOCAL_PATTERNS_KEY, patterns)[ FD ]
Line_2 $$ public static Boolean evaluate(String string, String regex, int flags, Navigator navigator) -->Line_17 $$ return matcher.find()[ CD ]
Line_13 $$ pattern = Pattern.compile(regex, flags)-->Line_14 $$ patterns.put(regex, pattern)[ FD ]
Line_2 $$ public static Boolean evaluate(String string, String regex, int flags, Navigator navigator) -->Line_10 $$ Matcher matcher = pattern.matcher(string)[ FD ]
Line_2 $$ public static Boolean evaluate(String string, String regex, int flags, Navigator navigator) -->Line_5 $$ if (patterns == null) [ CD ]
Line_3 $$ ThreadLocalCache<Map<String, Pattern>> threadLocalPatterns = ThreadLocalCacheManager.getThreadLocalCache(Lifecycle.ETERNAL, MatchesFunction.class.getName())-->Line_15 $$ threadLocalPatterns.put(_THREAD_LOCAL_PATTERNS_KEY, patterns)[ FD ]
Line_6 $$ patterns = new HashMap()-->Line_14 $$ patterns.put(regex, pattern)[ FD ]
Line_10 $$ Matcher matcher = pattern.matcher(string)-->Line_17 $$ return matcher.find()[ FD ]
Line_8 $$ Pattern pattern = patterns.get(regex)-->Line_10 $$ Matcher matcher = pattern.matcher(string)[ FD ]
Line_2 $$ public static Boolean evaluate(String string, String regex, int flags, Navigator navigator) -->Line_13 $$ pattern = Pattern.compile(regex, flags)[ FD ]
Line_4 $$ Map<String, Pattern> patterns = threadLocalPatterns.get(_THREAD_LOCAL_PATTERNS_KEY)-->Line_6 $$ patterns = new HashMap()[ FD ]
Line_6 $$ patterns = new HashMap()-->Line_15 $$ threadLocalPatterns.put(_THREAD_LOCAL_PATTERNS_KEY, patterns)[ FD ]
Line_2 $$ public static Boolean evaluate(String string, String regex, int flags, Navigator navigator) -->Line_8 $$ Pattern pattern = patterns.get(regex)[ FD ]
Line_2 $$ public static Boolean evaluate(String string, String regex, int flags, Navigator navigator) -->Line_16 $$ Matcher matcher = pattern.matcher(string)[ CD ]
Line_9 $$ if (pattern != null) -->Line_10 $$ Matcher matcher = pattern.matcher(string)[ CD ]
Line_2 $$ public static Boolean evaluate(String string, String regex, int flags, Navigator navigator) -->Line_14 $$ patterns.put(regex, pattern)[ FD ]
Line_8 $$ Pattern pattern = patterns.get(regex)-->Line_14 $$ patterns.put(regex, pattern)[ FD ]
Line_2 $$ public static Boolean evaluate(String string, String regex, int flags, Navigator navigator) -->Line_15 $$ threadLocalPatterns.put(_THREAD_LOCAL_PATTERNS_KEY, patterns)[ CD ]
Line_4 $$ Map<String, Pattern> patterns = threadLocalPatterns.get(_THREAD_LOCAL_PATTERNS_KEY)-->Line_8 $$ Pattern pattern = patterns.get(regex)[ FD ]
Line_5 $$ if (patterns == null) -->Line_6 $$ patterns = new HashMap()[ CD ]
Line_4 $$ Map<String, Pattern> patterns = threadLocalPatterns.get(_THREAD_LOCAL_PATTERNS_KEY)-->Line_5 $$ if (patterns == null) [ FD ]
Line_2 $$ public static Boolean evaluate(String string, String regex, int flags, Navigator navigator) -->Line_9 $$ if (pattern != null) [ CD ]
Line_2 $$ public static Boolean evaluate(String string, String regex, int flags, Navigator navigator) -->Line_13 $$ pattern = Pattern.compile(regex, flags)[ CD ]
Line_3 $$ ThreadLocalCache<Map<String, Pattern>> threadLocalPatterns = ThreadLocalCacheManager.getThreadLocalCache(Lifecycle.ETERNAL, MatchesFunction.class.getName())-->Line_4 $$ Map<String, Pattern> patterns = threadLocalPatterns.get(_THREAD_LOCAL_PATTERNS_KEY)[ FD ]
Line_2 $$ public static Boolean evaluate(String string, String regex, int flags, Navigator navigator) -->Line_3 $$ ThreadLocalCache<Map<String, Pattern>> threadLocalPatterns = ThreadLocalCacheManager.getThreadLocalCache(Lifecycle.ETERNAL, MatchesFunction.class.getName())[ CD ]
Line_2 $$ public static Boolean evaluate(String string, String regex, int flags, Navigator navigator) -->Line_16 $$ Matcher matcher = pattern.matcher(string)[ FD ]
