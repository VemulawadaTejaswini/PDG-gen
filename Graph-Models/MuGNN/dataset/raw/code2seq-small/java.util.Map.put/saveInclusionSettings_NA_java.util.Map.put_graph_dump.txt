Line_2 $$ synchronized void saveInclusionSettings(@Nullable DataNode<ProjectData> projectDataNode) -->Line_27 $$ if (inclusionMap.size() < exclusionMap.size()) [ CD ]
Line_2 $$ synchronized void saveInclusionSettings(@Nullable DataNode<ProjectData> projectDataNode) -->Line_7 $$ ExternalSystemApiUtil.visit(projectDataNode, new Consumer<DataNode<?>>() [ CD ]
Line_11 $$ DataNode<ExternalConfigPathAware> projectNode = resolveProjectNode(dataNode)-->Line_12 $$ if (projectNode != null) [ FD ]
Line_2 $$ synchronized void saveInclusionSettings(@Nullable DataNode<ProjectData> projectDataNode) -->Line_7 $$ ExternalSystemApiUtil.visit(projectDataNode, new Consumer<DataNode<?>>() [ FD ]
Line_2 $$ synchronized void saveInclusionSettings(@Nullable DataNode<ProjectData> projectDataNode) -->Line_5 $$ final MultiMap<String, String> inclusionMap = MultiMap.create()[ CD ]
Line_7 $$ ExternalSystemApiUtil.visit(projectDataNode, new Consumer<DataNode<?>>() -->Line_10 $$ dataNode.getDataBytes()[ FD ]
Line_2 $$ synchronized void saveInclusionSettings(@Nullable DataNode<ProjectData> projectDataNode) -->Line_3 $$ if (projectDataNode == null)[ FD ]
Line_11 $$ DataNode<ExternalConfigPathAware> projectNode = resolveProjectNode(dataNode)-->Line_13 $$ final String projectPath = projectNode.getData().getLinkedExternalProjectPath()[ FD ]
Line_14 $$ if (projectNode.isIgnored() || dataNode.isIgnored()) -->Line_17 $$ inclusionMap.putValue(projectPath, dataNode.getKey().getDataType())[ CD ]
Line_2 $$ synchronized void saveInclusionSettings(@Nullable DataNode<ProjectData> projectDataNode) -->Line_37 $$ myState.map.put(projectDataNode.getData().getLinkedExternalProjectPath(), projectState)[ FD ]
Line_6 $$ final MultiMap<String, String> exclusionMap = MultiMap.create()-->Line_27 $$ if (inclusionMap.size() < exclusionMap.size()) [ FD ]
Line_2 $$ synchronized void saveInclusionSettings(@Nullable DataNode<ProjectData> projectDataNode) -->Line_3 $$ if (projectDataNode == null)[ CD ]
Line_27 $$ if (inclusionMap.size() < exclusionMap.size()) -->Line_28 $$ projectState.isInclusion = true[ CD ]
Line_5 $$ final MultiMap<String, String> inclusionMap = MultiMap.create()-->Line_27 $$ if (inclusionMap.size() < exclusionMap.size()) [ FD ]
Line_12 $$ if (projectNode != null) -->Line_13 $$ final String projectPath = projectNode.getData().getLinkedExternalProjectPath()[ CD ]
Line_12 $$ if (projectNode != null) -->Line_14 $$ if (projectNode.isIgnored() || dataNode.isIgnored()) [ CD ]
Line_13 $$ final String projectPath = projectNode.getData().getLinkedExternalProjectPath()-->Line_17 $$ inclusionMap.putValue(projectPath, dataNode.getKey().getDataType())[ FD ]
Line_6 $$ final MultiMap<String, String> exclusionMap = MultiMap.create()-->Line_15 $$ exclusionMap.putValue(projectPath, dataNode.getKey().getDataType())[ FD ]
Line_7 $$ ExternalSystemApiUtil.visit(projectDataNode, new Consumer<DataNode<?>>() -->Line_14 $$ if (projectNode.isIgnored() || dataNode.isIgnored()) [ FD ]
Line_11 $$ DataNode<ExternalConfigPathAware> projectNode = resolveProjectNode(dataNode)-->Line_14 $$ if (projectNode.isIgnored() || dataNode.isIgnored()) [ FD ]
Line_2 $$ synchronized void saveInclusionSettings(@Nullable DataNode<ProjectData> projectDataNode) -->Line_38 $$ changed.set(true)[ CD ]
Line_2 $$ synchronized void saveInclusionSettings(@Nullable DataNode<ProjectData> projectDataNode) -->Line_37 $$ myState.map.put(projectDataNode.getData().getLinkedExternalProjectPath(), projectState)[ CD ]
Line_3 $$ if (projectDataNode == null)-->Line_4 $$ return[ CD ]
Line_2 $$ synchronized void saveInclusionSettings(@Nullable DataNode<ProjectData> projectDataNode) -->Line_6 $$ final MultiMap<String, String> exclusionMap = MultiMap.create()[ CD ]
Line_7 $$ ExternalSystemApiUtil.visit(projectDataNode, new Consumer<DataNode<?>>() -->Line_17 $$ inclusionMap.putValue(projectPath, dataNode.getKey().getDataType())[ FD ]
Line_5 $$ final MultiMap<String, String> inclusionMap = MultiMap.create()-->Line_17 $$ inclusionMap.putValue(projectPath, dataNode.getKey().getDataType())[ FD ]
Line_13 $$ final String projectPath = projectNode.getData().getLinkedExternalProjectPath()-->Line_15 $$ exclusionMap.putValue(projectPath, dataNode.getKey().getDataType())[ FD ]
Line_7 $$ ExternalSystemApiUtil.visit(projectDataNode, new Consumer<DataNode<?>>() -->Line_11 $$ DataNode<ExternalConfigPathAware> projectNode = resolveProjectNode(dataNode)[ FD ]
Line_7 $$ ExternalSystemApiUtil.visit(projectDataNode, new Consumer<DataNode<?>>() -->Line_15 $$ exclusionMap.putValue(projectPath, dataNode.getKey().getDataType())[ FD ]
Line_7 $$ ExternalSystemApiUtil.visit(projectDataNode, new Consumer<DataNode<?>>() -->Line_21 $$ dataNode.clear(true)[ FD ]
Line_14 $$ if (projectNode.isIgnored() || dataNode.isIgnored()) -->Line_15 $$ exclusionMap.putValue(projectPath, dataNode.getKey().getDataType())[ CD ]
Line_27 $$ if (inclusionMap.size() < exclusionMap.size()) -->Line_31 $$ projectState.isInclusion = false[ CD ]
