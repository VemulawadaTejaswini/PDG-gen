Line_10 $$ String restype = null-->Line_77 $$ if (restype.equals("javax.jms.Topic")) [ FD ]
Line_54 $$ if (propName.equals("imqDestinationName") || propName.equalsIgnoreCase("name")) -->Line_55 $$ name = propValue[ CD ]
Line_67 $$ DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder()-->Line_94 $$ builder.getModelNode().get("entries").add(jndiName)[ FD ]
Line_14 $$ int i = 0-->Line_18 $$ if (i < args.length) [ FD ]
Line_88 $$ if (restype.equals("javax.jms.ConnectionFactory") || restype.equals("javax.jms.TopicConnectionFactory") || restype.equals("javax.jms.QueueConnectionFactory")) -->Line_92 $$ builder.addNode("connection-factory", name)[ CD ]
Line_44 $$ for (String prop : propsArr) -->Line_49 $$ String propName = prop.substring(0, equalsIndex).trim()[ FD ]
Line_16 $$ String arg = args[i++]-->Line_21 $$ if (arg.equals("--target")) [ FD ]
Line_12 $$ String jndiName = null-->Line_72 $$ builder.getModelNode().get("entries").add(jndiName)[ FD ]
Line_23 $$ if (arg.equals("--property")) -->Line_27 $$ if (arg.equals("--enabled")) [ CD ]
Line_14 $$ int i = 0-->Line_19 $$ restype = args[i++][ FD ]
Line_66 $$ if (restype.equals("javax.jms.Queue")) -->Line_69 $$ builder.addNode("hornetq-server", serverName)[ CD ]
Line_16 $$ String arg = args[i++]-->Line_17 $$ if (arg.equals("--restype")) [ FD ]
Line_67 $$ DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder()-->Line_82 $$ builder.setOperationName("add")[ FD ]
Line_2 $$ public ModelNode buildRequestWithoutHeaders(CommandContext ctx) throws OperationFormatException -->Line_4 $$ if (!ctx.getParsedCommandLine().hasProperties()) [ FD ]
Line_64 $$ name = jndiName.replace('/', '_')-->Line_70 $$ builder.addNode("jms-queue", name)[ FD ]
Line_40 $$ final Map<String, String> props-->Line_42 $$ props = new HashMap<String, String>()[ FD ]
Line_66 $$ if (restype.equals("javax.jms.Queue")) -->Line_72 $$ builder.getModelNode().get("entries").add(jndiName)[ CD ]
Line_38 $$ String name = null-->Line_92 $$ builder.addNode("connection-factory", name)[ FD ]
Line_49 $$ String propName = prop.substring(0, equalsIndex).trim()-->Line_51 $$ if (propName.isEmpty()) [ FD ]
Line_2 $$ public ModelNode buildRequestWithoutHeaders(CommandContext ctx) throws OperationFormatException -->Line_12 $$ String jndiName = null[ CD ]
Line_61 $$ props = Collections.emptyMap()-->Line_73 $$ for (String prop : props.keySet()) [ FD ]
Line_54 $$ if (propName.equals("imqDestinationName") || propName.equalsIgnoreCase("name")) -->Line_56 $$ if ("ClientId".equals(propName)) [ CD ]
Line_66 $$ if (restype.equals("javax.jms.Queue")) -->Line_67 $$ DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder()[ CD ]
Line_49 $$ String propName = prop.substring(0, equalsIndex).trim()-->Line_56 $$ if ("ClientId".equals(propName)) [ FD ]
Line_11 $$ String propsStr = null-->Line_25 $$ propsStr = args[i++][ FD ]
Line_2 $$ public ModelNode buildRequestWithoutHeaders(CommandContext ctx) throws OperationFormatException -->Line_66 $$ if (restype.equals("javax.jms.Queue")) [ CD ]
Line_67 $$ DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder()-->Line_90 $$ builder.addNode("subsystem", "messaging")[ FD ]
Line_67 $$ DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder()-->Line_93 $$ builder.setOperationName("add")[ FD ]
Line_40 $$ final Map<String, String> props-->Line_95 $$ for (String prop : props.keySet()) [ FD ]
Line_38 $$ String name = null-->Line_55 $$ name = propValue[ FD ]
Line_88 $$ if (restype.equals("javax.jms.ConnectionFactory") || restype.equals("javax.jms.TopicConnectionFactory") || restype.equals("javax.jms.QueueConnectionFactory")) -->Line_94 $$ builder.getModelNode().get("entries").add(jndiName)[ CD ]
Line_42 $$ props = new HashMap<String, String>()-->Line_95 $$ for (String prop : props.keySet()) [ FD ]
Line_2 $$ public ModelNode buildRequestWithoutHeaders(CommandContext ctx) throws OperationFormatException -->Line_32 $$ if (restype == null) [ CD ]
Line_12 $$ String jndiName = null-->Line_35 $$ if (jndiName == null) [ FD ]
Line_77 $$ if (restype.equals("javax.jms.Topic")) -->Line_79 $$ builder.addNode("subsystem", "messaging")[ CD ]
Line_19 $$ restype = args[i++]-->Line_77 $$ if (restype.equals("javax.jms.Topic")) [ FD ]
Line_39 $$ String serverName = "default"-->Line_80 $$ builder.addNode("hornetq-server", serverName)[ FD ]
Line_38 $$ String name = null-->Line_81 $$ builder.addNode("jms-topic", name)[ FD ]
Line_14 $$ int i = 0-->Line_25 $$ propsStr = args[i++][ FD ]
Line_49 $$ String propName = prop.substring(0, equalsIndex).trim()-->Line_54 $$ if (propName.equals("imqDestinationName") || propName.equalsIgnoreCase("name")) [ FD ]
Line_29 $$ jndiName = arg-->Line_35 $$ if (jndiName == null) [ FD ]
Line_42 $$ props = new HashMap<String, String>()-->Line_57 $$ props.put("client-id", propValue)[ FD ]
Line_2 $$ public ModelNode buildRequestWithoutHeaders(CommandContext ctx) throws OperationFormatException -->Line_35 $$ if (jndiName == null) [ CD ]
Line_29 $$ jndiName = arg-->Line_83 $$ builder.getModelNode().get("entries").add(jndiName)[ FD ]
Line_19 $$ restype = args[i++]-->Line_88 $$ if (restype.equals("javax.jms.ConnectionFactory") || restype.equals("javax.jms.TopicConnectionFactory") || restype.equals("javax.jms.QueueConnectionFactory")) [ FD ]
Line_10 $$ String restype = null-->Line_19 $$ restype = args[i++][ FD ]
Line_67 $$ DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder()-->Line_87 $$ return builder.buildRequest()[ FD ]
Line_17 $$ if (arg.equals("--restype")) -->Line_21 $$ if (arg.equals("--target")) [ CD ]
Line_25 $$ propsStr = args[i++]-->Line_43 $$ String[] propsArr = propsStr.split(":")[ FD ]
Line_2 $$ public ModelNode buildRequestWithoutHeaders(CommandContext ctx) throws OperationFormatException -->Line_38 $$ String name = null[ CD ]
Line_10 $$ String restype = null-->Line_32 $$ if (restype == null) [ FD ]
Line_2 $$ public ModelNode buildRequestWithoutHeaders(CommandContext ctx) throws OperationFormatException -->Line_39 $$ String serverName = "default"[ CD ]
Line_44 $$ for (String prop : propsArr) -->Line_46 $$ if (equalsIndex < 0 || equalsIndex == prop.length() - 1) [ FD ]
Line_77 $$ if (restype.equals("javax.jms.Topic")) -->Line_83 $$ builder.getModelNode().get("entries").add(jndiName)[ CD ]
Line_16 $$ String arg = args[i++]-->Line_27 $$ if (arg.equals("--enabled")) [ FD ]
Line_24 $$ if (i < args.length) -->Line_25 $$ propsStr = args[i++][ CD ]
Line_42 $$ props = new HashMap<String, String>()-->Line_61 $$ props = Collections.emptyMap()[ FD ]
Line_67 $$ DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder()-->Line_74 $$ builder.addProperty(prop, props.get(prop))[ FD ]
Line_67 $$ DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder()-->Line_79 $$ builder.addNode("subsystem", "messaging")[ FD ]
Line_67 $$ DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder()-->Line_83 $$ builder.getModelNode().get("entries").add(jndiName)[ FD ]
Line_61 $$ props = Collections.emptyMap()-->Line_84 $$ for (String prop : props.keySet()) [ FD ]
Line_38 $$ String name = null-->Line_63 $$ if (name == null) [ FD ]
Line_42 $$ props = new HashMap<String, String>()-->Line_74 $$ builder.addProperty(prop, props.get(prop))[ FD ]
Line_19 $$ restype = args[i++]-->Line_66 $$ if (restype.equals("javax.jms.Queue")) [ FD ]
Line_2 $$ public ModelNode buildRequestWithoutHeaders(CommandContext ctx) throws OperationFormatException -->Line_41 $$ if (propsStr != null) [ CD ]
Line_67 $$ DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder()-->Line_91 $$ builder.addNode("hornetq-server", serverName)[ FD ]
Line_55 $$ name = propValue-->Line_64 $$ name = jndiName.replace('/', '_')[ FD ]
Line_38 $$ String name = null-->Line_64 $$ name = jndiName.replace('/', '_')[ FD ]
Line_88 $$ if (restype.equals("javax.jms.ConnectionFactory") || restype.equals("javax.jms.TopicConnectionFactory") || restype.equals("javax.jms.QueueConnectionFactory")) -->Line_91 $$ builder.addNode("hornetq-server", serverName)[ CD ]
Line_42 $$ props = new HashMap<String, String>()-->Line_96 $$ builder.addProperty(prop, props.get(prop))[ FD ]
Line_67 $$ DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder()-->Line_98 $$ return builder.buildRequest()[ FD ]
Line_40 $$ final Map<String, String> props-->Line_85 $$ builder.addProperty(prop, props.get(prop))[ FD ]
Line_10 $$ String restype = null-->Line_66 $$ if (restype.equals("javax.jms.Queue")) [ FD ]
Line_42 $$ props = new HashMap<String, String>()-->Line_85 $$ builder.addProperty(prop, props.get(prop))[ FD ]
Line_55 $$ name = propValue-->Line_81 $$ builder.addNode("jms-topic", name)[ FD ]
Line_50 $$ String propValue = prop.substring(equalsIndex + 1).trim()-->Line_55 $$ name = propValue[ FD ]
Line_61 $$ props = Collections.emptyMap()-->Line_96 $$ builder.addProperty(prop, props.get(prop))[ FD ]
Line_63 $$ if (name == null) -->Line_64 $$ name = jndiName.replace('/', '_')[ CD ]
Line_44 $$ for (String prop : propsArr) -->Line_50 $$ String propValue = prop.substring(equalsIndex + 1).trim()[ FD ]
Line_2 $$ public ModelNode buildRequestWithoutHeaders(CommandContext ctx) throws OperationFormatException -->Line_63 $$ if (name == null) [ CD ]
Line_2 $$ public ModelNode buildRequestWithoutHeaders(CommandContext ctx) throws OperationFormatException -->Line_14 $$ int i = 0[ CD ]
Line_67 $$ DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder()-->Line_92 $$ builder.addNode("connection-factory", name)[ FD ]
Line_67 $$ DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder()-->Line_85 $$ builder.addProperty(prop, props.get(prop))[ FD ]
Line_41 $$ if (propsStr != null) -->Line_43 $$ String[] propsArr = propsStr.split(":")[ CD ]
Line_44 $$ for (String prop : propsArr) -->Line_45 $$ int equalsIndex = prop.indexOf('=')[ FD ]
Line_45 $$ int equalsIndex = prop.indexOf('=')-->Line_49 $$ String propName = prop.substring(0, equalsIndex).trim()[ FD ]
Line_2 $$ public ModelNode buildRequestWithoutHeaders(CommandContext ctx) throws OperationFormatException -->Line_15 $$ while (i < args.length) [ CD ]
Line_38 $$ String name = null-->Line_70 $$ builder.addNode("jms-queue", name)[ FD ]
Line_41 $$ if (propsStr != null) -->Line_42 $$ props = new HashMap<String, String>()[ CD ]
Line_39 $$ String serverName = "default"-->Line_69 $$ builder.addNode("hornetq-server", serverName)[ FD ]
Line_11 $$ String propsStr = null-->Line_43 $$ String[] propsArr = propsStr.split(":")[ FD ]
Line_12 $$ String jndiName = null-->Line_83 $$ builder.getModelNode().get("entries").add(jndiName)[ FD ]
Line_67 $$ DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder()-->Line_96 $$ builder.addProperty(prop, props.get(prop))[ FD ]
Line_77 $$ if (restype.equals("javax.jms.Topic")) -->Line_82 $$ builder.setOperationName("add")[ CD ]
Line_16 $$ String arg = args[i++]-->Line_29 $$ jndiName = arg[ FD ]
Line_40 $$ final Map<String, String> props-->Line_96 $$ builder.addProperty(prop, props.get(prop))[ FD ]
Line_88 $$ if (restype.equals("javax.jms.ConnectionFactory") || restype.equals("javax.jms.TopicConnectionFactory") || restype.equals("javax.jms.QueueConnectionFactory")) -->Line_98 $$ return builder.buildRequest()[ CD ]
Line_2 $$ public ModelNode buildRequestWithoutHeaders(CommandContext ctx) throws OperationFormatException -->Line_10 $$ String restype = null[ CD ]
Line_40 $$ final Map<String, String> props-->Line_61 $$ props = Collections.emptyMap()[ FD ]
Line_22 $$ if (arg.equals("--description")) -->Line_23 $$ if (arg.equals("--property")) [ CD ]
Line_77 $$ if (restype.equals("javax.jms.Topic")) -->Line_88 $$ if (restype.equals("javax.jms.ConnectionFactory") || restype.equals("javax.jms.TopicConnectionFactory") || restype.equals("javax.jms.QueueConnectionFactory")) [ CD ]
Line_11 $$ String propsStr = null-->Line_41 $$ if (propsStr != null) [ FD ]
Line_67 $$ DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder()-->Line_81 $$ builder.addNode("jms-topic", name)[ FD ]
Line_61 $$ props = Collections.emptyMap()-->Line_95 $$ for (String prop : props.keySet()) [ FD ]
Line_12 $$ String jndiName = null-->Line_64 $$ name = jndiName.replace('/', '_')[ FD ]
Line_18 $$ if (i < args.length) -->Line_19 $$ restype = args[i++][ CD ]
Line_66 $$ if (restype.equals("javax.jms.Queue")) -->Line_70 $$ builder.addNode("jms-queue", name)[ CD ]
Line_55 $$ name = propValue-->Line_92 $$ builder.addNode("connection-factory", name)[ FD ]
Line_12 $$ String jndiName = null-->Line_94 $$ builder.getModelNode().get("entries").add(jndiName)[ FD ]
Line_2 $$ public ModelNode buildRequestWithoutHeaders(CommandContext ctx) throws OperationFormatException -->Line_11 $$ String propsStr = null[ CD ]
Line_66 $$ if (restype.equals("javax.jms.Queue")) -->Line_71 $$ builder.setOperationName("add")[ CD ]
Line_77 $$ if (restype.equals("javax.jms.Topic")) -->Line_81 $$ builder.addNode("jms-topic", name)[ CD ]
Line_40 $$ final Map<String, String> props-->Line_84 $$ for (String prop : props.keySet()) [ FD ]
Line_41 $$ if (propsStr != null) -->Line_61 $$ props = Collections.emptyMap()[ CD ]
Line_14 $$ int i = 0-->Line_24 $$ if (i < args.length) [ FD ]
Line_67 $$ DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder()-->Line_72 $$ builder.getModelNode().get("entries").add(jndiName)[ FD ]
Line_15 $$ while (i < args.length) -->Line_16 $$ String arg = args[i++][ CD ]
Line_66 $$ if (restype.equals("javax.jms.Queue")) -->Line_76 $$ return builder.buildRequest()[ CD ]
Line_29 $$ jndiName = arg-->Line_64 $$ name = jndiName.replace('/', '_')[ FD ]
Line_77 $$ if (restype.equals("javax.jms.Topic")) -->Line_80 $$ builder.addNode("hornetq-server", serverName)[ CD ]
Line_88 $$ if (restype.equals("javax.jms.ConnectionFactory") || restype.equals("javax.jms.TopicConnectionFactory") || restype.equals("javax.jms.QueueConnectionFactory")) -->Line_93 $$ builder.setOperationName("add")[ CD ]
Line_67 $$ DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder()-->Line_68 $$ builder.addNode("subsystem", "messaging")[ FD ]
Line_15 $$ while (i < args.length) -->Line_17 $$ if (arg.equals("--restype")) [ CD ]
Line_39 $$ String serverName = "default"-->Line_91 $$ builder.addNode("hornetq-server", serverName)[ FD ]
Line_44 $$ for (String prop : propsArr) -->Line_74 $$ builder.addProperty(prop, props.get(prop))[ FD ]
Line_66 $$ if (restype.equals("javax.jms.Queue")) -->Line_77 $$ if (restype.equals("javax.jms.Topic")) [ CD ]
Line_64 $$ name = jndiName.replace('/', '_')-->Line_92 $$ builder.addNode("connection-factory", name)[ FD ]
Line_40 $$ final Map<String, String> props-->Line_73 $$ for (String prop : props.keySet()) [ FD ]
Line_25 $$ propsStr = args[i++]-->Line_41 $$ if (propsStr != null) [ FD ]
Line_66 $$ if (restype.equals("javax.jms.Queue")) -->Line_68 $$ builder.addNode("subsystem", "messaging")[ CD ]
Line_19 $$ restype = args[i++]-->Line_32 $$ if (restype == null) [ FD ]
Line_12 $$ String jndiName = null-->Line_29 $$ jndiName = arg[ FD ]
Line_67 $$ DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder()-->Line_71 $$ builder.setOperationName("add")[ FD ]
Line_56 $$ if ("ClientId".equals(propName)) -->Line_57 $$ props.put("client-id", propValue)[ CD ]
Line_44 $$ for (String prop : propsArr) -->Line_85 $$ builder.addProperty(prop, props.get(prop))[ FD ]
Line_55 $$ name = propValue-->Line_63 $$ if (name == null) [ FD ]
Line_64 $$ name = jndiName.replace('/', '_')-->Line_81 $$ builder.addNode("jms-topic", name)[ FD ]
Line_40 $$ final Map<String, String> props-->Line_57 $$ props.put("client-id", propValue)[ FD ]
Line_67 $$ DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder()-->Line_69 $$ builder.addNode("hornetq-server", serverName)[ FD ]
Line_29 $$ jndiName = arg-->Line_94 $$ builder.getModelNode().get("entries").add(jndiName)[ FD ]
Line_55 $$ name = propValue-->Line_70 $$ builder.addNode("jms-queue", name)[ FD ]
Line_2 $$ public ModelNode buildRequestWithoutHeaders(CommandContext ctx) throws OperationFormatException -->Line_40 $$ final Map<String, String> props[ CD ]
Line_61 $$ props = Collections.emptyMap()-->Line_74 $$ builder.addProperty(prop, props.get(prop))[ FD ]
Line_21 $$ if (arg.equals("--target")) -->Line_22 $$ if (arg.equals("--description")) [ CD ]
Line_27 $$ if (arg.equals("--enabled")) -->Line_29 $$ jndiName = arg[ CD ]
Line_14 $$ int i = 0-->Line_15 $$ while (i < args.length) [ FD ]
Line_61 $$ props = Collections.emptyMap()-->Line_85 $$ builder.addProperty(prop, props.get(prop))[ FD ]
Line_67 $$ DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder()-->Line_70 $$ builder.addNode("jms-queue", name)[ FD ]
Line_42 $$ props = new HashMap<String, String>()-->Line_73 $$ for (String prop : props.keySet()) [ FD ]
Line_2 $$ public ModelNode buildRequestWithoutHeaders(CommandContext ctx) throws OperationFormatException -->Line_13 $$ String[] args = ctx.getArgumentsString().split("\\s+")[ CD ]
Line_16 $$ String arg = args[i++]-->Line_23 $$ if (arg.equals("--property")) [ FD ]
Line_42 $$ props = new HashMap<String, String>()-->Line_84 $$ for (String prop : props.keySet()) [ FD ]
Line_29 $$ jndiName = arg-->Line_72 $$ builder.getModelNode().get("entries").add(jndiName)[ FD ]
Line_17 $$ if (arg.equals("--restype")) -->Line_18 $$ if (i < args.length) [ CD ]
Line_44 $$ for (String prop : propsArr) -->Line_96 $$ builder.addProperty(prop, props.get(prop))[ FD ]
Line_16 $$ String arg = args[i++]-->Line_22 $$ if (arg.equals("--description")) [ FD ]
Line_88 $$ if (restype.equals("javax.jms.ConnectionFactory") || restype.equals("javax.jms.TopicConnectionFactory") || restype.equals("javax.jms.QueueConnectionFactory")) -->Line_90 $$ builder.addNode("subsystem", "messaging")[ CD ]
Line_10 $$ String restype = null-->Line_88 $$ if (restype.equals("javax.jms.ConnectionFactory") || restype.equals("javax.jms.TopicConnectionFactory") || restype.equals("javax.jms.QueueConnectionFactory")) [ FD ]
Line_23 $$ if (arg.equals("--property")) -->Line_24 $$ if (i < args.length) [ CD ]
Line_67 $$ DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder()-->Line_80 $$ builder.addNode("hornetq-server", serverName)[ FD ]
Line_14 $$ int i = 0-->Line_16 $$ String arg = args[i++][ FD ]
Line_50 $$ String propValue = prop.substring(equalsIndex + 1).trim()-->Line_57 $$ props.put("client-id", propValue)[ FD ]
Line_67 $$ DefaultOperationRequestBuilder builder = new DefaultOperationRequestBuilder()-->Line_76 $$ return builder.buildRequest()[ FD ]
Line_77 $$ if (restype.equals("javax.jms.Topic")) -->Line_87 $$ return builder.buildRequest()[ CD ]
Line_40 $$ final Map<String, String> props-->Line_74 $$ builder.addProperty(prop, props.get(prop))[ FD ]
Line_2 $$ public ModelNode buildRequestWithoutHeaders(CommandContext ctx) throws OperationFormatException -->Line_13 $$ String[] args = ctx.getArgumentsString().split("\\s+")[ FD ]
