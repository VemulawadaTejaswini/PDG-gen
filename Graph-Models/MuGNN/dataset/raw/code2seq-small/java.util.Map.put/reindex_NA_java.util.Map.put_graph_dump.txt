Line_35 $$ int extendedMaxInactiveIntervalTime = (int) (System.currentTimeMillis() - lastAccessedTime + maxInactiveInterval)-->Line_36 $$ portletSession.setMaxInactiveInterval(extendedMaxInactiveIntervalTime)[ FD ]
Line_8 $$ String taskExecutorClassName = _CLASS_NAME_REINDEX_PORTAL_BACKGROUND_TASK_EXECUTOR-->Line_13 $$ BackgroundTaskManagerUtil.addBackgroundTask(themeDisplay.getUserId(), CompanyConstants.SYSTEM, "reindex", taskExecutorClassName, taskContextMap, new ServiceContext())[ FD ]
Line_8 $$ String taskExecutorClassName = _CLASS_NAME_REINDEX_PORTAL_BACKGROUND_TASK_EXECUTOR-->Line_43 $$ BackgroundTaskManagerUtil.addBackgroundTask(themeDisplay.getUserId(), CompanyConstants.SYSTEM, "reindex", taskExecutorClassName, taskContextMap, new ServiceContext())[ FD ]
Line_2 $$ protected void reindex(final ActionRequest actionRequest) throws Exception -->Line_12 $$ if (!ParamUtil.getBoolean(actionRequest, "blocking")) [ FD ]
Line_2 $$ protected void reindex(final ActionRequest actionRequest) throws Exception -->Line_7 $$ taskContextMap.put("companyIds", PortalInstances.getCompanyIds())[ CD ]
Line_19 $$ MessageListener messageListener = new MessageListener() -->Line_41 $$ MessageBusUtil.registerMessageListener(DestinationNames.BACKGROUND_TASK_STATUS, messageListener)[ FD ]
Line_2 $$ protected void reindex(final ActionRequest actionRequest) throws Exception -->Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)[ CD ]
Line_4 $$ Map<String, Serializable> taskContextMap = new HashMap()-->Line_24 $$ if (!uuid.equals(taskContextMap.get("uuid"))) [ FD ]
Line_32 $$ PortletSession portletSession = actionRequest.getPortletSession()-->Line_33 $$ long lastAccessedTime = portletSession.getLastAccessedTime()[ FD ]
Line_18 $$ final CountDownLatch countDownLatch = new CountDownLatch(1)-->Line_44 $$ countDownLatch.await(ParamUtil.getLong(actionRequest, "timeout", Time.HOUR), TimeUnit.MILLISECONDS)[ FD ]
Line_5 $$ String className = ParamUtil.getString(actionRequest, "className")-->Line_6 $$ taskContextMap.put("className", className)[ FD ]
Line_19 $$ MessageListener messageListener = new MessageListener() -->Line_30 $$ int status = message.getInteger("status")[ CD ]
Line_16 $$ final String uuid = PortalUUIDUtil.generate()-->Line_17 $$ taskContextMap.put("uuid", uuid)[ FD ]
Line_2 $$ protected void reindex(final ActionRequest actionRequest) throws Exception -->Line_44 $$ countDownLatch.await(ParamUtil.getLong(actionRequest, "timeout", Time.HOUR), TimeUnit.MILLISECONDS)[ FD ]
Line_2 $$ protected void reindex(final ActionRequest actionRequest) throws Exception -->Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)[ FD ]
Line_2 $$ protected void reindex(final ActionRequest actionRequest) throws Exception -->Line_8 $$ String taskExecutorClassName = _CLASS_NAME_REINDEX_PORTAL_BACKGROUND_TASK_EXECUTOR[ CD ]
Line_32 $$ PortletSession portletSession = actionRequest.getPortletSession()-->Line_34 $$ int maxInactiveInterval = portletSession.getMaxInactiveInterval()[ FD ]
Line_18 $$ final CountDownLatch countDownLatch = new CountDownLatch(1)-->Line_37 $$ countDownLatch.countDown()[ FD ]
Line_10 $$ taskExecutorClassName = _CLASS_NAME_REINDEX_SINGLE_INDEXER_BACKGROUND_TASK_EXECUTOR-->Line_13 $$ BackgroundTaskManagerUtil.addBackgroundTask(themeDisplay.getUserId(), CompanyConstants.SYSTEM, "reindex", taskExecutorClassName, taskContextMap, new ServiceContext())[ FD ]
Line_2 $$ protected void reindex(final ActionRequest actionRequest) throws Exception -->Line_5 $$ String className = ParamUtil.getString(actionRequest, "className")[ CD ]
Line_2 $$ protected void reindex(final ActionRequest actionRequest) throws Exception -->Line_18 $$ final CountDownLatch countDownLatch = new CountDownLatch(1)[ CD ]
Line_2 $$ protected void reindex(final ActionRequest actionRequest) throws Exception -->Line_32 $$ PortletSession portletSession = actionRequest.getPortletSession()[ FD ]
Line_12 $$ if (!ParamUtil.getBoolean(actionRequest, "blocking")) -->Line_13 $$ BackgroundTaskManagerUtil.addBackgroundTask(themeDisplay.getUserId(), CompanyConstants.SYSTEM, "reindex", taskExecutorClassName, taskContextMap, new ServiceContext())[ CD ]
Line_2 $$ protected void reindex(final ActionRequest actionRequest) throws Exception -->Line_5 $$ String className = ParamUtil.getString(actionRequest, "className")[ FD ]
Line_2 $$ protected void reindex(final ActionRequest actionRequest) throws Exception -->Line_41 $$ MessageBusUtil.registerMessageListener(DestinationNames.BACKGROUND_TASK_STATUS, messageListener)[ CD ]
Line_4 $$ Map<String, Serializable> taskContextMap = new HashMap()-->Line_17 $$ taskContextMap.put("uuid", uuid)[ FD ]
Line_31 $$ if ((status == BackgroundTaskConstants.STATUS_CANCELLED) || (status == BackgroundTaskConstants.STATUS_FAILED) || (status == BackgroundTaskConstants.STATUS_SUCCESSFUL)) -->Line_37 $$ countDownLatch.countDown()[ CD ]
Line_5 $$ String className = ParamUtil.getString(actionRequest, "className")-->Line_9 $$ if (Validator.isNotNull(className)) [ FD ]
Line_4 $$ Map<String, Serializable> taskContextMap = new HashMap()-->Line_6 $$ taskContextMap.put("className", className)[ FD ]
Line_2 $$ protected void reindex(final ActionRequest actionRequest) throws Exception -->Line_17 $$ taskContextMap.put("uuid", uuid)[ CD ]
Line_4 $$ Map<String, Serializable> taskContextMap = new HashMap()-->Line_7 $$ taskContextMap.put("companyIds", PortalInstances.getCompanyIds())[ FD ]
Line_32 $$ PortletSession portletSession = actionRequest.getPortletSession()-->Line_36 $$ portletSession.setMaxInactiveInterval(extendedMaxInactiveIntervalTime)[ FD ]
Line_16 $$ final String uuid = PortalUUIDUtil.generate()-->Line_24 $$ if (!uuid.equals(taskContextMap.get("uuid"))) [ FD ]
Line_2 $$ protected void reindex(final ActionRequest actionRequest) throws Exception -->Line_6 $$ taskContextMap.put("className", className)[ CD ]
Line_31 $$ if ((status == BackgroundTaskConstants.STATUS_CANCELLED) || (status == BackgroundTaskConstants.STATUS_FAILED) || (status == BackgroundTaskConstants.STATUS_SUCCESSFUL)) -->Line_36 $$ portletSession.setMaxInactiveInterval(extendedMaxInactiveIntervalTime)[ CD ]
Line_31 $$ if ((status == BackgroundTaskConstants.STATUS_CANCELLED) || (status == BackgroundTaskConstants.STATUS_FAILED) || (status == BackgroundTaskConstants.STATUS_SUCCESSFUL)) -->Line_33 $$ long lastAccessedTime = portletSession.getLastAccessedTime()[ CD ]
Line_2 $$ protected void reindex(final ActionRequest actionRequest) throws Exception -->Line_9 $$ if (Validator.isNotNull(className)) [ CD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_43 $$ BackgroundTaskManagerUtil.addBackgroundTask(themeDisplay.getUserId(), CompanyConstants.SYSTEM, "reindex", taskExecutorClassName, taskContextMap, new ServiceContext())[ FD ]
Line_24 $$ if (!uuid.equals(taskContextMap.get("uuid"))) -->Line_25 $$ return[ CD ]
Line_4 $$ Map<String, Serializable> taskContextMap = new HashMap()-->Line_43 $$ BackgroundTaskManagerUtil.addBackgroundTask(themeDisplay.getUserId(), CompanyConstants.SYSTEM, "reindex", taskExecutorClassName, taskContextMap, new ServiceContext())[ FD ]
Line_2 $$ protected void reindex(final ActionRequest actionRequest) throws Exception -->Line_4 $$ Map<String, Serializable> taskContextMap = new HashMap()[ CD ]
Line_22 $$ BackgroundTask backgroundTask = BackgroundTaskManagerUtil.getBackgroundTask(message.getLong(BackgroundTaskConstants.BACKGROUND_TASK_ID))-->Line_23 $$ Map<String, Serializable> taskContextMap = backgroundTask.getTaskContextMap()[ FD ]
Line_12 $$ if (!ParamUtil.getBoolean(actionRequest, "blocking")) -->Line_14 $$ return[ CD ]
Line_4 $$ Map<String, Serializable> taskContextMap = new HashMap()-->Line_13 $$ BackgroundTaskManagerUtil.addBackgroundTask(themeDisplay.getUserId(), CompanyConstants.SYSTEM, "reindex", taskExecutorClassName, taskContextMap, new ServiceContext())[ FD ]
Line_31 $$ if ((status == BackgroundTaskConstants.STATUS_CANCELLED) || (status == BackgroundTaskConstants.STATUS_FAILED) || (status == BackgroundTaskConstants.STATUS_SUCCESSFUL)) -->Line_35 $$ int extendedMaxInactiveIntervalTime = (int) (System.currentTimeMillis() - lastAccessedTime + maxInactiveInterval)[ CD ]
Line_23 $$ Map<String, Serializable> taskContextMap = backgroundTask.getTaskContextMap()-->Line_43 $$ BackgroundTaskManagerUtil.addBackgroundTask(themeDisplay.getUserId(), CompanyConstants.SYSTEM, "reindex", taskExecutorClassName, taskContextMap, new ServiceContext())[ FD ]
Line_10 $$ taskExecutorClassName = _CLASS_NAME_REINDEX_SINGLE_INDEXER_BACKGROUND_TASK_EXECUTOR-->Line_43 $$ BackgroundTaskManagerUtil.addBackgroundTask(themeDisplay.getUserId(), CompanyConstants.SYSTEM, "reindex", taskExecutorClassName, taskContextMap, new ServiceContext())[ FD ]
Line_31 $$ if ((status == BackgroundTaskConstants.STATUS_CANCELLED) || (status == BackgroundTaskConstants.STATUS_FAILED) || (status == BackgroundTaskConstants.STATUS_SUCCESSFUL)) -->Line_32 $$ PortletSession portletSession = actionRequest.getPortletSession()[ CD ]
Line_19 $$ MessageListener messageListener = new MessageListener() -->Line_46 $$ MessageBusUtil.unregisterMessageListener(DestinationNames.BACKGROUND_TASK_STATUS, messageListener)[ FD ]
Line_3 $$ ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY)-->Line_13 $$ BackgroundTaskManagerUtil.addBackgroundTask(themeDisplay.getUserId(), CompanyConstants.SYSTEM, "reindex", taskExecutorClassName, taskContextMap, new ServiceContext())[ FD ]
Line_9 $$ if (Validator.isNotNull(className)) -->Line_10 $$ taskExecutorClassName = _CLASS_NAME_REINDEX_SINGLE_INDEXER_BACKGROUND_TASK_EXECUTOR[ CD ]
Line_19 $$ MessageListener messageListener = new MessageListener() -->Line_30 $$ int status = message.getInteger("status")[ FD ]
Line_19 $$ MessageListener messageListener = new MessageListener() -->Line_22 $$ BackgroundTask backgroundTask = BackgroundTaskManagerUtil.getBackgroundTask(message.getLong(BackgroundTaskConstants.BACKGROUND_TASK_ID))[ FD ]
Line_31 $$ if ((status == BackgroundTaskConstants.STATUS_CANCELLED) || (status == BackgroundTaskConstants.STATUS_FAILED) || (status == BackgroundTaskConstants.STATUS_SUCCESSFUL)) -->Line_34 $$ int maxInactiveInterval = portletSession.getMaxInactiveInterval()[ CD ]
Line_8 $$ String taskExecutorClassName = _CLASS_NAME_REINDEX_PORTAL_BACKGROUND_TASK_EXECUTOR-->Line_10 $$ taskExecutorClassName = _CLASS_NAME_REINDEX_SINGLE_INDEXER_BACKGROUND_TASK_EXECUTOR[ FD ]
Line_23 $$ Map<String, Serializable> taskContextMap = backgroundTask.getTaskContextMap()-->Line_24 $$ if (!uuid.equals(taskContextMap.get("uuid"))) [ FD ]
Line_2 $$ protected void reindex(final ActionRequest actionRequest) throws Exception -->Line_12 $$ if (!ParamUtil.getBoolean(actionRequest, "blocking")) [ CD ]
Line_2 $$ protected void reindex(final ActionRequest actionRequest) throws Exception -->Line_19 $$ MessageListener messageListener = new MessageListener() [ CD ]
Line_19 $$ MessageListener messageListener = new MessageListener() -->Line_31 $$ if ((status == BackgroundTaskConstants.STATUS_CANCELLED) || (status == BackgroundTaskConstants.STATUS_FAILED) || (status == BackgroundTaskConstants.STATUS_SUCCESSFUL)) [ CD ]
Line_2 $$ protected void reindex(final ActionRequest actionRequest) throws Exception -->Line_16 $$ final String uuid = PortalUUIDUtil.generate()[ CD ]
