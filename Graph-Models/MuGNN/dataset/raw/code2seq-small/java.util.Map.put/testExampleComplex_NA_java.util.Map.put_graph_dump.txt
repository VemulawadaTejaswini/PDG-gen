Line_13 $$ PersistenceUnitInfo pu1 = info[0]-->Line_14 $$ assertEquals("pu1", pu1.getPersistenceUnitName())[ FD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_32 $$ assertEquals(1, pu2.getMappingFileNames().size())[ CD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_33 $$ assertEquals("order2.xml", pu2.getMappingFileNames().get(0))[ CD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_20 $$ assertFalse(pu1.excludeUnlistedClasses())[ CD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_18 $$ assertEquals(1, pu1.getJarFileUrls().size())[ CD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_8 $$ dataSources.put("jdbc/MyDB", ds)[ CD ]
Line_13 $$ PersistenceUnitInfo pu1 = info[0]-->Line_26 $$ assertNull(pu1.getNonJtaDataSource())[ FD ]
Line_3 $$ DataSource ds = new DriverManagerDataSource()-->Line_36 $$ assertEquals(ds, pu2.getNonJtaDataSource())[ FD ]
Line_4 $$ String resource = "/org/springframework/orm/jpa/persistence-complex.xml"-->Line_11 $$ PersistenceUnitInfo[] info = reader.readPersistenceUnitInfos(resource)[ FD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_13 $$ PersistenceUnitInfo pu1 = info[0][ CD ]
Line_13 $$ PersistenceUnitInfo pu1 = info[0]-->Line_27 $$ assertSame(ds, pu1.getJtaDataSource())[ FD ]
Line_22 $$ Properties props = pu1.getProperties()-->Line_24 $$ assertEquals("on", props.getProperty("com.acme.persistence.sql-logging"))[ FD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_10 $$ PersistenceUnitReader reader = new PersistenceUnitReader(new PathMatchingResourcePatternResolver(), dataSourceLookup)[ CD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_11 $$ PersistenceUnitInfo[] info = reader.readPersistenceUnitInfos(resource)[ CD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_27 $$ assertSame(ds, pu1.getJtaDataSource())[ CD ]
Line_13 $$ PersistenceUnitInfo pu1 = info[0]-->Line_18 $$ assertEquals(1, pu1.getJarFileUrls().size())[ FD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_16 $$ assertEquals(1, pu1.getMappingFileNames().size())[ CD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_22 $$ Properties props = pu1.getProperties()[ CD ]
Line_13 $$ PersistenceUnitInfo pu1 = info[0]-->Line_20 $$ assertFalse(pu1.excludeUnlistedClasses())[ FD ]
Line_10 $$ PersistenceUnitReader reader = new PersistenceUnitReader(new PathMatchingResourcePatternResolver(), dataSourceLookup)-->Line_11 $$ PersistenceUnitInfo[] info = reader.readPersistenceUnitInfos(resource)[ FD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_12 $$ assertEquals(2, info.length)[ CD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_14 $$ assertEquals("pu1", pu1.getPersistenceUnitName())[ CD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_17 $$ assertEquals("ormap2.xml", pu1.getMappingFileNames().get(0))[ CD ]
Line_13 $$ PersistenceUnitInfo pu1 = info[0]-->Line_28 $$ assertFalse("Exclude unlisted should default false in 1.0.", pu1.excludeUnlistedClasses())[ FD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_21 $$ assertSame(PersistenceUnitTransactionType.RESOURCE_LOCAL, pu1.getTransactionType())[ CD ]
Line_13 $$ PersistenceUnitInfo pu1 = info[0]-->Line_19 $$ assertEquals(new ClassPathResource("order.jar").getURL(), pu1.getJarFileUrls().get(0))[ FD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_7 $$ dataSources.put("jdbc/MyPartDB", ds)[ CD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_25 $$ assertEquals("bar", props.getProperty("foo"))[ CD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_28 $$ assertFalse("Exclude unlisted should default false in 1.0.", pu1.excludeUnlistedClasses())[ CD ]
Line_29 $$ PersistenceUnitInfo pu2 = info[1]-->Line_31 $$ assertEquals("com.acme.AcmePersistence", pu2.getPersistenceProviderClassName())[ FD ]
Line_3 $$ DataSource ds = new DriverManagerDataSource()-->Line_7 $$ dataSources.put("jdbc/MyPartDB", ds)[ FD ]
Line_29 $$ PersistenceUnitInfo pu2 = info[1]-->Line_33 $$ assertEquals("order2.xml", pu2.getMappingFileNames().get(0))[ FD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_3 $$ DataSource ds = new DriverManagerDataSource()[ CD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_37 $$ assertTrue("Exclude unlisted should be true when no value.", pu2.excludeUnlistedClasses())[ CD ]
Line_13 $$ PersistenceUnitInfo pu1 = info[0]-->Line_22 $$ Properties props = pu1.getProperties()[ FD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_23 $$ assertEquals(2, props.keySet().size())[ CD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_24 $$ assertEquals("on", props.getProperty("com.acme.persistence.sql-logging"))[ CD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_5 $$ MapDataSourceLookup dataSourceLookup = new MapDataSourceLookup()[ CD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_19 $$ assertEquals(new ClassPathResource("order.jar").getURL(), pu1.getJarFileUrls().get(0))[ CD ]
Line_29 $$ PersistenceUnitInfo pu2 = info[1]-->Line_37 $$ assertTrue("Exclude unlisted should be true when no value.", pu2.excludeUnlistedClasses())[ FD ]
Line_29 $$ PersistenceUnitInfo pu2 = info[1]-->Line_32 $$ assertEquals(1, pu2.getMappingFileNames().size())[ FD ]
Line_6 $$ Map<String, DataSource> dataSources = new HashMap<String, DataSource>()-->Line_7 $$ dataSources.put("jdbc/MyPartDB", ds)[ FD ]
Line_5 $$ MapDataSourceLookup dataSourceLookup = new MapDataSourceLookup()-->Line_9 $$ dataSourceLookup.setDataSources(dataSources)[ FD ]
Line_3 $$ DataSource ds = new DriverManagerDataSource()-->Line_8 $$ dataSources.put("jdbc/MyDB", ds)[ FD ]
Line_6 $$ Map<String, DataSource> dataSources = new HashMap<String, DataSource>()-->Line_9 $$ dataSourceLookup.setDataSources(dataSources)[ FD ]
Line_13 $$ PersistenceUnitInfo pu1 = info[0]-->Line_15 $$ assertEquals("com.acme.AcmePersistence", pu1.getPersistenceProviderClassName())[ FD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_35 $$ assertNull(pu2.getJtaDataSource())[ CD ]
Line_29 $$ PersistenceUnitInfo pu2 = info[1]-->Line_36 $$ assertEquals(ds, pu2.getNonJtaDataSource())[ FD ]
Line_22 $$ Properties props = pu1.getProperties()-->Line_23 $$ assertEquals(2, props.keySet().size())[ FD ]
Line_29 $$ PersistenceUnitInfo pu2 = info[1]-->Line_35 $$ assertNull(pu2.getJtaDataSource())[ FD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_29 $$ PersistenceUnitInfo pu2 = info[1][ CD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_31 $$ assertEquals("com.acme.AcmePersistence", pu2.getPersistenceProviderClassName())[ CD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_9 $$ dataSourceLookup.setDataSources(dataSources)[ CD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_15 $$ assertEquals("com.acme.AcmePersistence", pu1.getPersistenceProviderClassName())[ CD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_30 $$ assertSame(PersistenceUnitTransactionType.JTA, pu2.getTransactionType())[ CD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_4 $$ String resource = "/org/springframework/orm/jpa/persistence-complex.xml"[ CD ]
Line_22 $$ Properties props = pu1.getProperties()-->Line_25 $$ assertEquals("bar", props.getProperty("foo"))[ FD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_26 $$ assertNull(pu1.getNonJtaDataSource())[ CD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_6 $$ Map<String, DataSource> dataSources = new HashMap<String, DataSource>()[ CD ]
Line_29 $$ PersistenceUnitInfo pu2 = info[1]-->Line_34 $$ assertTrue(pu2.excludeUnlistedClasses())[ FD ]
Line_29 $$ PersistenceUnitInfo pu2 = info[1]-->Line_30 $$ assertSame(PersistenceUnitTransactionType.JTA, pu2.getTransactionType())[ FD ]
Line_6 $$ Map<String, DataSource> dataSources = new HashMap<String, DataSource>()-->Line_8 $$ dataSources.put("jdbc/MyDB", ds)[ FD ]
Line_13 $$ PersistenceUnitInfo pu1 = info[0]-->Line_17 $$ assertEquals("ormap2.xml", pu1.getMappingFileNames().get(0))[ FD ]
Line_13 $$ PersistenceUnitInfo pu1 = info[0]-->Line_21 $$ assertSame(PersistenceUnitTransactionType.RESOURCE_LOCAL, pu1.getTransactionType())[ FD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_34 $$ assertTrue(pu2.excludeUnlistedClasses())[ CD ]
Line_3 $$ DataSource ds = new DriverManagerDataSource()-->Line_27 $$ assertSame(ds, pu1.getJtaDataSource())[ FD ]
Line_13 $$ PersistenceUnitInfo pu1 = info[0]-->Line_16 $$ assertEquals(1, pu1.getMappingFileNames().size())[ FD ]
Line_2 $$ public void testExampleComplex() throws Exception -->Line_36 $$ assertEquals(ds, pu2.getNonJtaDataSource())[ CD ]
