Line_3 $$ final Map<String, String> libs = new HashMap<String, String>()-->Line_55 $$ if (libs.size() == 1) [ FD ]
Line_9 $$ final Document doc = parser.getDocument()-->Line_10 $$ if (doc != null) [ FD ]
Line_64 $$ final String jarName = (String) value-->Line_67 $$ initiateDownload(url, jarName)[ FD ]
Line_33 $$ final Task.Modal task = new Task.Modal(editor.getProject(), "Looking for libraries", true) -->Line_36 $$ runUncanceledRunnableWithProgress(runnable, indicator)[ FD ]
Line_9 $$ final Document doc = parser.getDocument()-->Line_11 $$ final NodeList links = doc.getElementsByTagName(LINK_TAG_NAME)[ FD ]
Line_12 $$ for (int i = 0; i < links.getLength(); i++) -->Line_13 $$ final Node link = links.item(i)[ FD ]
Line_4 $$ final Runnable runnable = new Runnable() -->Line_36 $$ runUncanceledRunnableWithProgress(runnable, indicator)[ FD ]
Line_13 $$ final Node link = links.item(i)-->Line_14 $$ final String libName = link.getTextContent()[ FD ]
Line_60 $$ JBPopupFactory.getInstance().createListPopupBuilder(libNames).setTitle("Select a JAR file").setItemChoosenCallback(new Runnable() -->Line_63 $$ if (value instanceof String) [ CD ]
Line_33 $$ final Task.Modal task = new Task.Modal(editor.getProject(), "Looking for libraries", true) -->Line_35 $$ indicator.setIndeterminate(true)[ CD ]
Line_63 $$ if (value instanceof String) -->Line_66 $$ if (url != null) [ CD ]
Line_44 $$ Collections.sort(variants, new Comparator<String>() -->Line_46 $$ return o1.compareTo(o2)[ FD ]
Line_40 $$ if (libs.isEmpty()) -->Line_43 $$ final ArrayList<String> variants = new ArrayList<String>(libs.keySet())[ CD ]
Line_14 $$ final String libName = link.getTextContent()-->Line_21 $$ libs.put(libName, SERVICE_URL + pathToJar)[ FD ]
Line_7 $$ final DOMParser parser = new DOMParser()-->Line_8 $$ parser.parse(CLASS_ROOT_URL + fqn.replace('.', '/') + CLASS_PAGE_EXT)[ FD ]
Line_15 $$ final NamedNodeMap attributes = link.getAttributes()-->Line_17 $$ final Node href = attributes.getNamedItem(LINK_ATTR_NAME)[ FD ]
Line_12 $$ for (int i = 0; i < links.getLength(); i++) -->Line_13 $$ final Node link = links.item(i)[ CD ]
Line_3 $$ final Map<String, String> libs = new HashMap<String, String>()-->Line_21 $$ libs.put(libName, SERVICE_URL + pathToJar)[ FD ]
Line_40 $$ if (libs.isEmpty()) -->Line_55 $$ if (libs.size() == 1) [ CD ]
Line_62 $$ final Object value = libNames.getSelectedValue()-->Line_63 $$ if (value instanceof String) [ FD ]
Line_2 $$ private void findJarsForFqn(final String fqn, final Editor editor) -->Line_4 $$ final Runnable runnable = new Runnable() [ CD ]
Line_44 $$ Collections.sort(variants, new Comparator<String>() -->Line_46 $$ return o1.compareTo(o2)[ CD ]
Line_40 $$ if (libs.isEmpty()) -->Line_44 $$ Collections.sort(variants, new Comparator<String>() [ CD ]
Line_65 $$ final String url = libs.get(jarName)-->Line_67 $$ initiateDownload(url, jarName)[ FD ]
Line_64 $$ final String jarName = (String) value-->Line_65 $$ final String url = libs.get(jarName)[ FD ]
Line_17 $$ final Node href = attributes.getNamedItem(LINK_ATTR_NAME)-->Line_19 $$ final String pathToJar = href.getTextContent()[ FD ]
Line_50 $$ libNames.installCellRenderer(new NotNullFunction<Object, JComponent>() -->Line_52 $$ return new JLabel(o.toString(), PlatformIcons.JAR_ICON, SwingConstants.LEFT)[ CD ]
Line_12 $$ for (int i = 0; i < links.getLength(); i++) -->Line_15 $$ final NamedNodeMap attributes = link.getAttributes()[ CD ]
Line_18 $$ if (href != null) -->Line_20 $$ if (pathToJar != null && (pathToJar.startsWith("/jar/") || pathToJar.startsWith("/class/../"))) [ CD ]
Line_40 $$ if (libs.isEmpty()) -->Line_50 $$ libNames.installCellRenderer(new NotNullFunction<Object, JComponent>() [ CD ]
Line_2 $$ private void findJarsForFqn(final String fqn, final Editor editor) -->Line_8 $$ parser.parse(CLASS_ROOT_URL + fqn.replace('.', '/') + CLASS_PAGE_EXT)[ FD ]
Line_10 $$ if (doc != null) -->Line_11 $$ final NodeList links = doc.getElementsByTagName(LINK_TAG_NAME)[ CD ]
Line_2 $$ private void findJarsForFqn(final String fqn, final Editor editor) -->Line_33 $$ final Task.Modal task = new Task.Modal(editor.getProject(), "Looking for libraries", true) [ FD ]
Line_50 $$ libNames.installCellRenderer(new NotNullFunction<Object, JComponent>() -->Line_52 $$ return new JLabel(o.toString(), PlatformIcons.JAR_ICON, SwingConstants.LEFT)[ FD ]
Line_33 $$ final Task.Modal task = new Task.Modal(editor.getProject(), "Looking for libraries", true) -->Line_35 $$ indicator.setIndeterminate(true)[ FD ]
Line_10 $$ if (doc != null) -->Line_12 $$ for (int i = 0; i < links.getLength(); i++) [ CD ]
Line_33 $$ final Task.Modal task = new Task.Modal(editor.getProject(), "Looking for libraries", true) -->Line_40 $$ if (libs.isEmpty()) [ CD ]
Line_3 $$ final Map<String, String> libs = new HashMap<String, String>()-->Line_40 $$ if (libs.isEmpty()) [ FD ]
Line_66 $$ if (url != null) -->Line_67 $$ initiateDownload(url, jarName)[ CD ]
Line_17 $$ final Node href = attributes.getNamedItem(LINK_ATTR_NAME)-->Line_18 $$ if (href != null) [ FD ]
Line_7 $$ final DOMParser parser = new DOMParser()-->Line_9 $$ final Document doc = parser.getDocument()[ FD ]
Line_19 $$ final String pathToJar = href.getTextContent()-->Line_20 $$ if (pathToJar != null && (pathToJar.startsWith("/jar/") || pathToJar.startsWith("/class/../"))) [ FD ]
Line_16 $$ if (attributes != null) -->Line_18 $$ if (href != null) [ CD ]
Line_65 $$ final String url = libs.get(jarName)-->Line_66 $$ if (url != null) [ FD ]
Line_33 $$ final Task.Modal task = new Task.Modal(editor.getProject(), "Looking for libraries", true) -->Line_36 $$ runUncanceledRunnableWithProgress(runnable, indicator)[ CD ]
Line_13 $$ final Node link = links.item(i)-->Line_15 $$ final NamedNodeMap attributes = link.getAttributes()[ FD ]
Line_43 $$ final ArrayList<String> variants = new ArrayList<String>(libs.keySet())-->Line_44 $$ Collections.sort(variants, new Comparator<String>() [ FD ]
Line_3 $$ final Map<String, String> libs = new HashMap<String, String>()-->Line_65 $$ final String url = libs.get(jarName)[ FD ]
Line_20 $$ if (pathToJar != null && (pathToJar.startsWith("/jar/") || pathToJar.startsWith("/class/../"))) -->Line_21 $$ libs.put(libName, SERVICE_URL + pathToJar)[ CD ]
Line_33 $$ final Task.Modal task = new Task.Modal(editor.getProject(), "Looking for libraries", true) -->Line_39 $$ super.onSuccess()[ CD ]
Line_11 $$ final NodeList links = doc.getElementsByTagName(LINK_TAG_NAME)-->Line_13 $$ final Node link = links.item(i)[ FD ]
Line_63 $$ if (value instanceof String) -->Line_65 $$ final String url = libs.get(jarName)[ CD ]
Line_12 $$ for (int i = 0; i < links.getLength(); i++) -->Line_16 $$ if (attributes != null) [ CD ]
Line_16 $$ if (attributes != null) -->Line_17 $$ final Node href = attributes.getNamedItem(LINK_ATTR_NAME)[ CD ]
Line_55 $$ if (libs.size() == 1) -->Line_60 $$ JBPopupFactory.getInstance().createListPopupBuilder(libNames).setTitle("Select a JAR file").setItemChoosenCallback(new Runnable() [ CD ]
Line_2 $$ private void findJarsForFqn(final String fqn, final Editor editor) -->Line_60 $$ JBPopupFactory.getInstance().createListPopupBuilder(libNames).setTitle("Select a JAR file").setItemChoosenCallback(new Runnable() [ FD ]
Line_2 $$ private void findJarsForFqn(final String fqn, final Editor editor) -->Line_76 $$ ProgressManager.getInstance().run(task)[ CD ]
Line_2 $$ private void findJarsForFqn(final String fqn, final Editor editor) -->Line_3 $$ final Map<String, String> libs = new HashMap<String, String>()[ CD ]
Line_12 $$ for (int i = 0; i < links.getLength(); i++) -->Line_14 $$ final String libName = link.getTextContent()[ CD ]
Line_40 $$ if (libs.isEmpty()) -->Line_41 $$ HintManager.getInstance().showInformationHint(editor, "No libraries found for '" + fqn + "'")[ CD ]
Line_55 $$ if (libs.size() == 1) -->Line_56 $$ final String jarName = libs.keySet().iterator().next()[ CD ]
Line_3 $$ final Map<String, String> libs = new HashMap<String, String>()-->Line_56 $$ final String jarName = libs.keySet().iterator().next()[ FD ]
Line_55 $$ if (libs.size() == 1) -->Line_57 $$ final String url = libs.get(jarName)[ CD ]
Line_15 $$ final NamedNodeMap attributes = link.getAttributes()-->Line_16 $$ if (attributes != null) [ FD ]
Line_3 $$ final Map<String, String> libs = new HashMap<String, String>()-->Line_57 $$ final String url = libs.get(jarName)[ FD ]
Line_18 $$ if (href != null) -->Line_19 $$ final String pathToJar = href.getTextContent()[ CD ]
Line_55 $$ if (libs.size() == 1) -->Line_58 $$ initiateDownload(url, jarName)[ CD ]
Line_63 $$ if (value instanceof String) -->Line_64 $$ final String jarName = (String) value[ CD ]
Line_3 $$ final Map<String, String> libs = new HashMap<String, String>()-->Line_43 $$ final ArrayList<String> variants = new ArrayList<String>(libs.keySet())[ FD ]
Line_2 $$ private void findJarsForFqn(final String fqn, final Editor editor) -->Line_41 $$ HintManager.getInstance().showInformationHint(editor, "No libraries found for '" + fqn + "'")[ FD ]
Line_60 $$ JBPopupFactory.getInstance().createListPopupBuilder(libNames).setTitle("Select a JAR file").setItemChoosenCallback(new Runnable() -->Line_62 $$ final Object value = libNames.getSelectedValue()[ CD ]
Line_11 $$ final NodeList links = doc.getElementsByTagName(LINK_TAG_NAME)-->Line_12 $$ for (int i = 0; i < links.getLength(); i++) [ FD ]
