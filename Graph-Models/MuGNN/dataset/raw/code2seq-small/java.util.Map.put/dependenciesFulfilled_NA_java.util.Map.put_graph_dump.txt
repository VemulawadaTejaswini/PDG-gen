Line_4 $$ if (SPIUtil.isSPI()) -->Line_5 $$ SPI spi = SPIUtil.getSPI()[ CD ]
Line_2 $$ public void dependenciesFulfilled() -->Line_20 $$ properties.put("message.listener.operating.class.loader", operatingClassLoader)[ CD ]
Line_10 $$ StringBundler sb = new StringBundler(4)-->Line_14 $$ sb.append(_destinationName)[ FD ]
Line_18 $$ Map<String, Object> properties = new HashMap()-->Line_19 $$ properties.put("destination.name", _destinationName)[ FD ]
Line_3 $$ ClassLoader operatingClassLoader = getOperatingClassloader()-->Line_20 $$ properties.put("message.listener.operating.class.loader", operatingClassLoader)[ FD ]
Line_2 $$ public void dependenciesFulfilled() -->Line_19 $$ properties.put("destination.name", _destinationName)[ CD ]
Line_2 $$ public void dependenciesFulfilled() -->Line_3 $$ ClassLoader operatingClassLoader = getOperatingClassloader()[ CD ]
Line_10 $$ StringBundler sb = new StringBundler(4)-->Line_12 $$ sb.append(DestinationConfigurationProcessCallable.class.getName())[ FD ]
Line_2 $$ public void dependenciesFulfilled() -->Line_18 $$ Map<String, Object> properties = new HashMap()[ CD ]
Line_18 $$ Map<String, Object> properties = new HashMap()-->Line_20 $$ properties.put("message.listener.operating.class.loader", operatingClassLoader)[ FD ]
Line_21 $$ for (MessageListener messageListener : _messageListeners) -->Line_22 $$ _messageListenerServiceRegistrar.registerService(MessageListener.class, messageListener, properties)[ FD ]
Line_18 $$ Map<String, Object> properties = new HashMap()-->Line_22 $$ _messageListenerServiceRegistrar.registerService(MessageListener.class, messageListener, properties)[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(4)-->Line_11 $$ sb.append("Unable to install ")[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(4)-->Line_15 $$ _log.error(sb.toString(), e)[ FD ]
Line_7 $$ RegistrationReference registrationReference = spi.getRegistrationReference()-->Line_8 $$ IntrabandRPCUtil.execute(registrationReference, new DestinationConfigurationProcessCallable(_destinationName))[ FD ]
Line_5 $$ SPI spi = SPIUtil.getSPI()-->Line_7 $$ RegistrationReference registrationReference = spi.getRegistrationReference()[ FD ]
Line_2 $$ public void dependenciesFulfilled() -->Line_4 $$ if (SPIUtil.isSPI()) [ CD ]
Line_10 $$ StringBundler sb = new StringBundler(4)-->Line_13 $$ sb.append(" on MPI for ")[ FD ]
