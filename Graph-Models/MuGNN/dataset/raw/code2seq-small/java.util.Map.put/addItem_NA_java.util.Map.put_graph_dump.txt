Line_6 $$ DefaultMutableTreeNode node = myModuleNodes.get(module)-->Line_29 $$ ((DefaultTreeModel) myTree.getModel()).nodeStructureChanged(node)[ FD ]
Line_4 $$ final PsiDirectory directory = itemWrapper.getDirectory()-->Line_5 $$ final Module module = myFileIndex.getModuleForFile(directory.getVirtualFile())[ FD ]
Line_8 $$ node = new DefaultMutableTreeNode(module, true)-->Line_29 $$ ((DefaultTreeModel) myTree.getModel()).nodeStructureChanged(node)[ FD ]
Line_2 $$ public void addItem(DirectoryChooser.ItemWrapper itemWrapper) -->Line_7 $$ if (node == null) [ CD ]
Line_6 $$ DefaultMutableTreeNode node = myModuleNodes.get(module)-->Line_11 $$ insertNode(node, myRootNode)[ FD ]
Line_2 $$ public void addItem(DirectoryChooser.ItemWrapper itemWrapper) -->Line_4 $$ final PsiDirectory directory = itemWrapper.getDirectory()[ FD ]
Line_8 $$ node = new DefaultMutableTreeNode(module, true)-->Line_11 $$ insertNode(node, myRootNode)[ FD ]
Line_5 $$ final Module module = myFileIndex.getModuleForFile(directory.getVirtualFile())-->Line_24 $$ myModuleNodes.put(module, node)[ FD ]
Line_8 $$ node = new DefaultMutableTreeNode(module, true)-->Line_28 $$ insertNode(itemNode, node)[ FD ]
Line_2 $$ public void addItem(DirectoryChooser.ItemWrapper itemWrapper) -->Line_29 $$ ((DefaultTreeModel) myTree.getModel()).nodeStructureChanged(node)[ CD ]
Line_10 $$ if (groupPath == null || groupPath.length == 0) -->Line_22 $$ insertNode(node, parentNode)[ CD ]
Line_5 $$ final Module module = myFileIndex.getModuleForFile(directory.getVirtualFile())-->Line_6 $$ DefaultMutableTreeNode node = myModuleNodes.get(module)[ FD ]
Line_8 $$ node = new DefaultMutableTreeNode(module, true)-->Line_22 $$ insertNode(node, parentNode)[ FD ]
Line_5 $$ final Module module = myFileIndex.getModuleForFile(directory.getVirtualFile())-->Line_9 $$ final String[] groupPath = module != null ? ModuleManager.getInstance(myProject).getModuleGroupPath(module) : null[ FD ]
Line_6 $$ DefaultMutableTreeNode node = myModuleNodes.get(module)-->Line_24 $$ myModuleNodes.put(module, node)[ FD ]
Line_2 $$ public void addItem(DirectoryChooser.ItemWrapper itemWrapper) -->Line_27 $$ myItemNodes.put(itemWrapper, itemNode)[ CD ]
Line_7 $$ if (node == null) -->Line_24 $$ myModuleNodes.put(module, node)[ CD ]
Line_2 $$ public void addItem(DirectoryChooser.ItemWrapper itemWrapper) -->Line_27 $$ myItemNodes.put(itemWrapper, itemNode)[ FD ]
Line_6 $$ DefaultMutableTreeNode node = myModuleNodes.get(module)-->Line_22 $$ insertNode(node, parentNode)[ FD ]
Line_6 $$ DefaultMutableTreeNode node = myModuleNodes.get(module)-->Line_28 $$ insertNode(itemNode, node)[ FD ]
Line_7 $$ if (node == null) -->Line_9 $$ final String[] groupPath = module != null ? ModuleManager.getInstance(myProject).getModuleGroupPath(module) : null[ CD ]
Line_6 $$ DefaultMutableTreeNode node = myModuleNodes.get(module)-->Line_7 $$ if (node == null) [ FD ]
Line_7 $$ if (node == null) -->Line_10 $$ if (groupPath == null || groupPath.length == 0) [ CD ]
Line_2 $$ public void addItem(DirectoryChooser.ItemWrapper itemWrapper) -->Line_3 $$ myItems.add(itemWrapper)[ CD ]
Line_13 $$ final DefaultMutableTreeNode parentNode = ModuleGroupUtil.buildModuleGroupPath(new ModuleGroup(groupPath), myRootNode, myModuleGroupNodes, new Consumer<ModuleGroupUtil.ParentChildRelation<DefaultMutableTreeNode>>() -->Line_22 $$ insertNode(node, parentNode)[ FD ]
Line_2 $$ public void addItem(DirectoryChooser.ItemWrapper itemWrapper) -->Line_3 $$ myItems.add(itemWrapper)[ FD ]
Line_13 $$ final DefaultMutableTreeNode parentNode = ModuleGroupUtil.buildModuleGroupPath(new ModuleGroup(groupPath), myRootNode, myModuleGroupNodes, new Consumer<ModuleGroupUtil.ParentChildRelation<DefaultMutableTreeNode>>() -->Line_15 $$ insertNode(parentChildRelation.getChild(), parentChildRelation.getParent())[ CD ]
Line_2 $$ public void addItem(DirectoryChooser.ItemWrapper itemWrapper) -->Line_28 $$ insertNode(itemNode, node)[ CD ]
Line_7 $$ if (node == null) -->Line_8 $$ node = new DefaultMutableTreeNode(module, true)[ CD ]
Line_2 $$ public void addItem(DirectoryChooser.ItemWrapper itemWrapper) -->Line_4 $$ final PsiDirectory directory = itemWrapper.getDirectory()[ CD ]
Line_2 $$ public void addItem(DirectoryChooser.ItemWrapper itemWrapper) -->Line_6 $$ DefaultMutableTreeNode node = myModuleNodes.get(module)[ CD ]
Line_6 $$ DefaultMutableTreeNode node = myModuleNodes.get(module)-->Line_8 $$ node = new DefaultMutableTreeNode(module, true)[ FD ]
Line_2 $$ public void addItem(DirectoryChooser.ItemWrapper itemWrapper) -->Line_5 $$ final Module module = myFileIndex.getModuleForFile(directory.getVirtualFile())[ CD ]
Line_13 $$ final DefaultMutableTreeNode parentNode = ModuleGroupUtil.buildModuleGroupPath(new ModuleGroup(groupPath), myRootNode, myModuleGroupNodes, new Consumer<ModuleGroupUtil.ParentChildRelation<DefaultMutableTreeNode>>() -->Line_15 $$ insertNode(parentChildRelation.getChild(), parentChildRelation.getParent())[ FD ]
Line_13 $$ final DefaultMutableTreeNode parentNode = ModuleGroupUtil.buildModuleGroupPath(new ModuleGroup(groupPath), myRootNode, myModuleGroupNodes, new Consumer<ModuleGroupUtil.ParentChildRelation<DefaultMutableTreeNode>>() -->Line_19 $$ return new DefaultMutableTreeNode(moduleGroup, true)[ CD ]
Line_10 $$ if (groupPath == null || groupPath.length == 0) -->Line_11 $$ insertNode(node, myRootNode)[ CD ]
Line_8 $$ node = new DefaultMutableTreeNode(module, true)-->Line_24 $$ myModuleNodes.put(module, node)[ FD ]
Line_10 $$ if (groupPath == null || groupPath.length == 0) -->Line_13 $$ final DefaultMutableTreeNode parentNode = ModuleGroupUtil.buildModuleGroupPath(new ModuleGroup(groupPath), myRootNode, myModuleGroupNodes, new Consumer<ModuleGroupUtil.ParentChildRelation<DefaultMutableTreeNode>>() [ CD ]
