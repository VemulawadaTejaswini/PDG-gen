Line_17 $$ ExecutableScript script = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testExecutableNoRuntimeParams", "js", compiled), vars)-->Line_21 $$ script.setNextVar("y", y)[ FD ]
Line_2 $$ public void testExecutableWithRuntimeParams() throws Exception -->Line_37 $$ barrier.await()[ CD ]
Line_20 $$ long addition = x + y-->Line_23 $$ assertThat(result, equalTo(addition))[ FD ]
Line_18 $$ for (int i = 0; i < 100000; i++) -->Line_21 $$ script.setNextVar("y", y)[ CD ]
Line_2 $$ public void testExecutableWithRuntimeParams() throws Exception -->Line_6 $$ Thread[] threads = new Thread[50][ CD ]
Line_34 $$ for (int i = 0; i < threads.length; i++) -->Line_35 $$ threads[i].start()[ CD ]
Line_3 $$ final JavaScriptScriptEngineService se = new JavaScriptScriptEngineService(Settings.Builder.EMPTY_SETTINGS)-->Line_17 $$ ExecutableScript script = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testExecutableNoRuntimeParams", "js", compiled), vars)[ FD ]
Line_5 $$ final AtomicBoolean failed = new AtomicBoolean()-->Line_39 $$ assertThat(failed.get(), equalTo(false))[ FD ]
Line_17 $$ ExecutableScript script = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testExecutableNoRuntimeParams", "js", compiled), vars)-->Line_22 $$ long result = ((Number) script.run()).longValue()[ FD ]
Line_9 $$ for (int i = 0; i < threads.length; i++) -->Line_18 $$ for (int i = 0; i < 100000; i++) [ FD ]
Line_18 $$ for (int i = 0; i < 100000; i++) -->Line_20 $$ long addition = x + y[ CD ]
Line_8 $$ final CyclicBarrier barrier = new CyclicBarrier(threads.length + 1)-->Line_37 $$ barrier.await()[ FD ]
Line_2 $$ public void testExecutableWithRuntimeParams() throws Exception -->Line_7 $$ final CountDownLatch latch = new CountDownLatch(threads.length)[ CD ]
Line_2 $$ public void testExecutableWithRuntimeParams() throws Exception -->Line_3 $$ final JavaScriptScriptEngineService se = new JavaScriptScriptEngineService(Settings.Builder.EMPTY_SETTINGS)[ CD ]
Line_2 $$ public void testExecutableWithRuntimeParams() throws Exception -->Line_9 $$ for (int i = 0; i < threads.length; i++) [ CD ]
Line_9 $$ for (int i = 0; i < threads.length; i++) -->Line_10 $$ threads[i] = new Thread(new Runnable() [ CD ]
Line_18 $$ for (int i = 0; i < 100000; i++) -->Line_34 $$ for (int i = 0; i < threads.length; i++) [ FD ]
Line_15 $$ Map<String, Object> vars = new HashMap<String, Object>()-->Line_16 $$ vars.put("x", x)[ FD ]
Line_5 $$ final AtomicBoolean failed = new AtomicBoolean()-->Line_26 $$ failed.set(true)[ FD ]
Line_18 $$ for (int i = 0; i < 100000; i++) -->Line_19 $$ long y = ThreadLocalRandom.current().nextInt()[ CD ]
Line_14 $$ long x = ThreadLocalRandom.current().nextInt()-->Line_16 $$ vars.put("x", x)[ FD ]
Line_7 $$ final CountDownLatch latch = new CountDownLatch(threads.length)-->Line_38 $$ latch.await()[ FD ]
Line_2 $$ public void testExecutableWithRuntimeParams() throws Exception -->Line_4 $$ final Object compiled = se.compile("x + y", Collections.emptyMap())[ CD ]
Line_3 $$ final JavaScriptScriptEngineService se = new JavaScriptScriptEngineService(Settings.Builder.EMPTY_SETTINGS)-->Line_4 $$ final Object compiled = se.compile("x + y", Collections.emptyMap())[ FD ]
Line_18 $$ for (int i = 0; i < 100000; i++) -->Line_22 $$ long result = ((Number) script.run()).longValue()[ CD ]
Line_7 $$ final CountDownLatch latch = new CountDownLatch(threads.length)-->Line_29 $$ latch.countDown()[ FD ]
Line_8 $$ final CyclicBarrier barrier = new CyclicBarrier(threads.length + 1)-->Line_13 $$ barrier.await()[ FD ]
Line_9 $$ for (int i = 0; i < threads.length; i++) -->Line_34 $$ for (int i = 0; i < threads.length; i++) [ FD ]
Line_2 $$ public void testExecutableWithRuntimeParams() throws Exception -->Line_5 $$ final AtomicBoolean failed = new AtomicBoolean()[ CD ]
Line_2 $$ public void testExecutableWithRuntimeParams() throws Exception -->Line_8 $$ final CyclicBarrier barrier = new CyclicBarrier(threads.length + 1)[ CD ]
Line_2 $$ public void testExecutableWithRuntimeParams() throws Exception -->Line_39 $$ assertThat(failed.get(), equalTo(false))[ CD ]
Line_19 $$ long y = ThreadLocalRandom.current().nextInt()-->Line_21 $$ script.setNextVar("y", y)[ FD ]
Line_18 $$ for (int i = 0; i < 100000; i++) -->Line_23 $$ assertThat(result, equalTo(addition))[ CD ]
Line_15 $$ Map<String, Object> vars = new HashMap<String, Object>()-->Line_17 $$ ExecutableScript script = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testExecutableNoRuntimeParams", "js", compiled), vars)[ FD ]
Line_2 $$ public void testExecutableWithRuntimeParams() throws Exception -->Line_38 $$ latch.await()[ CD ]
Line_22 $$ long result = ((Number) script.run()).longValue()-->Line_23 $$ assertThat(result, equalTo(addition))[ FD ]
Line_2 $$ public void testExecutableWithRuntimeParams() throws Exception -->Line_34 $$ for (int i = 0; i < threads.length; i++) [ CD ]
