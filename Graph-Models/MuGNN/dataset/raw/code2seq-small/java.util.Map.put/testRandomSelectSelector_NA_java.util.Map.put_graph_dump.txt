Line_8 $$ int v = selector.next()-->Line_9 $$ if (v < 0)[ FD ]
Line_2 $$ private void testRandomSelectSelector(int niter, int m, int n) -->Line_3 $$ RandomAlgorithms.Selector selector = new RandomAlgorithms.Selector(n, (double) m / n, new Random())[ CD ]
Line_2 $$ private void testRandomSelectSelector(int niter, int m, int n) -->Line_4 $$ Map<List<Integer>, Integer> results = new HashMap<List<Integer>, Integer>(niter)[ CD ]
Line_7 $$ for (int j = 0; j < m; ++j) -->Line_11 $$ result[j] = v[ CD ]
Line_6 $$ int[] result = new int[m]-->Line_13 $$ Arrays.sort(result)[ FD ]
Line_5 $$ for (int i = 0; i < niter; ++i, selector.reset()) -->Line_16 $$ if (count == null) [ CD ]
Line_16 $$ if (count == null) -->Line_19 $$ results.put(resultAsList, ++count)[ CD ]
Line_8 $$ int v = selector.next()-->Line_11 $$ result[j] = v[ FD ]
Line_4 $$ Map<List<Integer>, Integer> results = new HashMap<List<Integer>, Integer>(niter)-->Line_15 $$ Integer count = results.get(resultAsList)[ FD ]
Line_3 $$ RandomAlgorithms.Selector selector = new RandomAlgorithms.Selector(n, (double) m / n, new Random())-->Line_5 $$ for (int i = 0; i < niter; ++i, selector.reset()) [ FD ]
Line_5 $$ for (int i = 0; i < niter; ++i, selector.reset()) -->Line_7 $$ for (int j = 0; j < m; ++j) [ CD ]
Line_5 $$ for (int i = 0; i < niter; ++i, selector.reset()) -->Line_15 $$ Integer count = results.get(resultAsList)[ CD ]
Line_2 $$ private void testRandomSelectSelector(int niter, int m, int n) -->Line_7 $$ for (int j = 0; j < m; ++j) [ FD ]
Line_2 $$ private void testRandomSelectSelector(int niter, int m, int n) -->Line_5 $$ for (int i = 0; i < niter; ++i, selector.reset()) [ CD ]
Line_5 $$ for (int i = 0; i < niter; ++i, selector.reset()) -->Line_14 $$ List<Integer> resultAsList = convertIntArray(result)[ CD ]
Line_5 $$ for (int i = 0; i < niter; ++i, selector.reset()) -->Line_13 $$ Arrays.sort(result)[ CD ]
Line_7 $$ for (int j = 0; j < m; ++j) -->Line_8 $$ int v = selector.next()[ CD ]
Line_2 $$ private void testRandomSelectSelector(int niter, int m, int n) -->Line_5 $$ for (int i = 0; i < niter; ++i, selector.reset()) [ FD ]
Line_2 $$ private void testRandomSelectSelector(int niter, int m, int n) -->Line_22 $$ verifyResults(results, m, n)[ CD ]
Line_4 $$ Map<List<Integer>, Integer> results = new HashMap<List<Integer>, Integer>(niter)-->Line_22 $$ verifyResults(results, m, n)[ FD ]
Line_7 $$ for (int j = 0; j < m; ++j) -->Line_9 $$ if (v < 0)[ CD ]
Line_4 $$ Map<List<Integer>, Integer> results = new HashMap<List<Integer>, Integer>(niter)-->Line_19 $$ results.put(resultAsList, ++count)[ FD ]
Line_16 $$ if (count == null) -->Line_17 $$ results.put(resultAsList, 1)[ CD ]
Line_6 $$ int[] result = new int[m]-->Line_14 $$ List<Integer> resultAsList = convertIntArray(result)[ FD ]
Line_5 $$ for (int i = 0; i < niter; ++i, selector.reset()) -->Line_6 $$ int[] result = new int[m][ CD ]
Line_4 $$ Map<List<Integer>, Integer> results = new HashMap<List<Integer>, Integer>(niter)-->Line_17 $$ results.put(resultAsList, 1)[ FD ]
Line_3 $$ RandomAlgorithms.Selector selector = new RandomAlgorithms.Selector(n, (double) m / n, new Random())-->Line_8 $$ int v = selector.next()[ FD ]
Line_2 $$ private void testRandomSelectSelector(int niter, int m, int n) -->Line_22 $$ verifyResults(results, m, n)[ FD ]
