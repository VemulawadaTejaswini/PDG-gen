Line_2 $$ public void testUpdateKeyspace() throws ConfigurationException -->Line_19 $$ KeyspaceMetadata newFetchedKs = Schema.instance.getKSMetaData(newKs.name)[ CD ]
Line_3 $$ CFMetaData cf = addTestTable("UpdatedKeyspace", "AddedStandard1", "A new cf for a new ks")-->Line_4 $$ KeyspaceMetadata oldKs = KeyspaceMetadata.create(cf.ksName, KeyspaceParams.simple(5), Tables.of(cf))[ FD ]
Line_2 $$ public void testUpdateKeyspace() throws ConfigurationException -->Line_17 $$ KeyspaceMetadata newKs = KeyspaceMetadata.create(cf.ksName, KeyspaceParams.create(true, replicationMap))[ CD ]
Line_2 $$ public void testUpdateKeyspace() throws ConfigurationException -->Line_3 $$ CFMetaData cf = addTestTable("UpdatedKeyspace", "AddedStandard1", "A new cf for a new ks")[ CD ]
Line_2 $$ public void testUpdateKeyspace() throws ConfigurationException -->Line_5 $$ MigrationManager.announceNewKeyspace(oldKs)[ CD ]
Line_2 $$ public void testUpdateKeyspace() throws ConfigurationException -->Line_14 $$ Map<String, String> replicationMap = new HashMap()[ CD ]
Line_14 $$ Map<String, String> replicationMap = new HashMap()-->Line_16 $$ replicationMap.put("replication_factor", "1")[ FD ]
Line_2 $$ public void testUpdateKeyspace() throws ConfigurationException -->Line_18 $$ MigrationManager.announceKeyspaceUpdate(newKs)[ CD ]
Line_2 $$ public void testUpdateKeyspace() throws ConfigurationException -->Line_21 $$ assertFalse(newFetchedKs.params.replication.klass.equals(oldKs.params.replication.klass))[ CD ]
Line_4 $$ KeyspaceMetadata oldKs = KeyspaceMetadata.create(cf.ksName, KeyspaceParams.simple(5), Tables.of(cf))-->Line_5 $$ MigrationManager.announceNewKeyspace(oldKs)[ FD ]
Line_17 $$ KeyspaceMetadata newKs = KeyspaceMetadata.create(cf.ksName, KeyspaceParams.create(true, replicationMap))-->Line_18 $$ MigrationManager.announceKeyspaceUpdate(newKs)[ FD ]
Line_14 $$ Map<String, String> replicationMap = new HashMap()-->Line_15 $$ replicationMap.put(ReplicationParams.CLASS, OldNetworkTopologyStrategy.class.getName())[ FD ]
Line_2 $$ public void testUpdateKeyspace() throws ConfigurationException -->Line_8 $$ KeyspaceMetadata newBadKs2 = KeyspaceMetadata.create(cf.ksName + "trash", KeyspaceParams.simple(4))[ CD ]
Line_4 $$ KeyspaceMetadata oldKs = KeyspaceMetadata.create(cf.ksName, KeyspaceParams.simple(5), Tables.of(cf))-->Line_7 $$ assertEquals(Schema.instance.getKSMetaData(cf.ksName), oldKs)[ FD ]
Line_2 $$ public void testUpdateKeyspace() throws ConfigurationException -->Line_7 $$ assertEquals(Schema.instance.getKSMetaData(cf.ksName), oldKs)[ CD ]
Line_14 $$ Map<String, String> replicationMap = new HashMap()-->Line_17 $$ KeyspaceMetadata newKs = KeyspaceMetadata.create(cf.ksName, KeyspaceParams.create(true, replicationMap))[ FD ]
Line_2 $$ public void testUpdateKeyspace() throws ConfigurationException -->Line_15 $$ replicationMap.put(ReplicationParams.CLASS, OldNetworkTopologyStrategy.class.getName())[ CD ]
Line_2 $$ public void testUpdateKeyspace() throws ConfigurationException -->Line_20 $$ assertEquals(newFetchedKs.params.replication.klass, newKs.params.replication.klass)[ CD ]
Line_2 $$ public void testUpdateKeyspace() throws ConfigurationException -->Line_6 $$ assertNotNull(Schema.instance.getKSMetaData(cf.ksName))[ CD ]
Line_2 $$ public void testUpdateKeyspace() throws ConfigurationException -->Line_4 $$ KeyspaceMetadata oldKs = KeyspaceMetadata.create(cf.ksName, KeyspaceParams.simple(5), Tables.of(cf))[ CD ]
Line_8 $$ KeyspaceMetadata newBadKs2 = KeyspaceMetadata.create(cf.ksName + "trash", KeyspaceParams.simple(4))-->Line_10 $$ MigrationManager.announceKeyspaceUpdate(newBadKs2)[ FD ]
Line_2 $$ public void testUpdateKeyspace() throws ConfigurationException -->Line_16 $$ replicationMap.put("replication_factor", "1")[ CD ]
