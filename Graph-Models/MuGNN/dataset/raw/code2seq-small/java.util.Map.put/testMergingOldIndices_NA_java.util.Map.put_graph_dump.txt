Line_6 $$ final IndexWriter iw = new IndexWriter(dir, iwConf)-->Line_32 $$ iw.commit()[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_12 $$ uid.setStringValue("2")[ CD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_3 $$ final IndexWriterConfig iwConf = new IndexWriterConfig(new KeywordAnalyzer())[ CD ]
Line_7 $$ Document document = new Document()-->Line_27 $$ document.add(version)[ FD ]
Line_7 $$ Document document = new Document()-->Line_21 $$ iw.addDocument(document)[ FD ]
Line_41 $$ final LeafReader ir = SlowCompositeReaderWrapper.wrap(ElasticsearchDirectoryReader.wrap(DirectoryReader.open(iw.getDirectory()), new ShardId("foo", 1)))-->Line_45 $$ final String uidValue = ir.document(i).get(UidFieldMapper.NAME)[ FD ]
Line_9 $$ StringField uid = new StringField(UidFieldMapper.NAME, "1", Store.YES)-->Line_12 $$ uid.setStringValue("2")[ FD ]
Line_42 $$ final NumericDocValues versions = ir.getNumericDocValues(VersionFieldMapper.NAME)-->Line_47 $$ assertThat(versions.get(i), equalTo(expectedVersion))[ FD ]
Line_9 $$ StringField uid = new StringField(UidFieldMapper.NAME, "1", Store.YES)-->Line_29 $$ uid.setStringValue("6")[ FD ]
Line_23 $$ document = new Document()-->Line_26 $$ document.add(uid)[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_43 $$ assertThat(versions, notNullValue())[ CD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_6 $$ final IndexWriter iw = new IndexWriter(dir, iwConf)[ CD ]
Line_6 $$ final IndexWriter iw = new IndexWriter(dir, iwConf)-->Line_22 $$ iw.commit()[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_25 $$ Field version = new NumericDocValuesField(VersionFieldMapper.NAME, 5L)[ CD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_35 $$ expectedVersions.put("2", 0L)[ CD ]
Line_45 $$ final String uidValue = ir.document(i).get(UidFieldMapper.NAME)-->Line_46 $$ final long expectedVersion = expectedVersions.get(uidValue)[ FD ]
Line_16 $$ UidField uidAndVersion = new UidField("3", 3L)-->Line_17 $$ document.add(uidAndVersion)[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_23 $$ document = new Document()[ CD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_15 $$ document = new Document()[ CD ]
Line_41 $$ final LeafReader ir = SlowCompositeReaderWrapper.wrap(ElasticsearchDirectoryReader.wrap(DirectoryReader.open(iw.getDirectory()), new ShardId("foo", 1)))-->Line_42 $$ final NumericDocValues versions = ir.getNumericDocValues(VersionFieldMapper.NAME)[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_32 $$ iw.commit()[ CD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_4 $$ iwConf.setMergePolicy(new ElasticsearchMergePolicy(iwConf.getMergePolicy()))[ CD ]
Line_25 $$ Field version = new NumericDocValuesField(VersionFieldMapper.NAME, 5L)-->Line_27 $$ document.add(version)[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_26 $$ document.add(uid)[ CD ]
Line_15 $$ document = new Document()-->Line_23 $$ document = new Document()[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_11 $$ iw.addDocument(document)[ CD ]
Line_33 $$ Map<String, Long> expectedVersions = new HashMap()-->Line_46 $$ final long expectedVersion = expectedVersions.get(uidValue)[ FD ]
Line_15 $$ document = new Document()-->Line_18 $$ iw.addDocument(document)[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_16 $$ UidField uidAndVersion = new UidField("3", 3L)[ CD ]
Line_5 $$ final Directory dir = newDirectory()-->Line_52 $$ dir.close()[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_52 $$ dir.close()[ CD ]
Line_44 $$ for (int i = 0; i < ir.maxDoc(); ++i) -->Line_46 $$ final long expectedVersion = expectedVersions.get(uidValue)[ CD ]
Line_6 $$ final IndexWriter iw = new IndexWriter(dir, iwConf)-->Line_40 $$ iw.forceMerge(1, true)[ FD ]
Line_7 $$ Document document = new Document()-->Line_26 $$ document.add(uid)[ FD ]
Line_7 $$ Document document = new Document()-->Line_13 $$ iw.addDocument(document)[ FD ]
Line_6 $$ final IndexWriter iw = new IndexWriter(dir, iwConf)-->Line_14 $$ iw.commit()[ FD ]
Line_44 $$ for (int i = 0; i < ir.maxDoc(); ++i) -->Line_45 $$ final String uidValue = ir.document(i).get(UidFieldMapper.NAME)[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_27 $$ document.add(version)[ CD ]
Line_7 $$ Document document = new Document()-->Line_28 $$ iw.addDocument(document)[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_18 $$ iw.addDocument(document)[ CD ]
Line_44 $$ for (int i = 0; i < ir.maxDoc(); ++i) -->Line_47 $$ assertThat(versions.get(i), equalTo(expectedVersion))[ CD ]
Line_6 $$ final IndexWriter iw = new IndexWriter(dir, iwConf)-->Line_49 $$ iw.close()[ FD ]
Line_41 $$ final LeafReader ir = SlowCompositeReaderWrapper.wrap(ElasticsearchDirectoryReader.wrap(DirectoryReader.open(iw.getDirectory()), new ShardId("foo", 1)))-->Line_51 $$ ir.close()[ FD ]
Line_15 $$ document = new Document()-->Line_21 $$ iw.addDocument(document)[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_33 $$ Map<String, Long> expectedVersions = new HashMap()[ CD ]
Line_7 $$ Document document = new Document()-->Line_31 $$ iw.addDocument(document)[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_36 $$ expectedVersions.put("3", 0L)[ CD ]
Line_23 $$ document = new Document()-->Line_31 $$ iw.addDocument(document)[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_31 $$ iw.addDocument(document)[ CD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_38 $$ expectedVersions.put("5", 5L)[ CD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_40 $$ iw.forceMerge(1, true)[ CD ]
Line_6 $$ final IndexWriter iw = new IndexWriter(dir, iwConf)-->Line_41 $$ final LeafReader ir = SlowCompositeReaderWrapper.wrap(ElasticsearchDirectoryReader.wrap(DirectoryReader.open(iw.getDirectory()), new ShardId("foo", 1)))[ FD ]
Line_46 $$ final long expectedVersion = expectedVersions.get(uidValue)-->Line_47 $$ assertThat(versions.get(i), equalTo(expectedVersion))[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_10 $$ document.add(uid)[ CD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_41 $$ final LeafReader ir = SlowCompositeReaderWrapper.wrap(ElasticsearchDirectoryReader.wrap(DirectoryReader.open(iw.getDirectory()), new ShardId("foo", 1)))[ CD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_42 $$ final NumericDocValues versions = ir.getNumericDocValues(VersionFieldMapper.NAME)[ CD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_5 $$ final Directory dir = newDirectory()[ CD ]
Line_41 $$ final LeafReader ir = SlowCompositeReaderWrapper.wrap(ElasticsearchDirectoryReader.wrap(DirectoryReader.open(iw.getDirectory()), new ShardId("foo", 1)))-->Line_44 $$ for (int i = 0; i < ir.maxDoc(); ++i) [ FD ]
Line_15 $$ document = new Document()-->Line_26 $$ document.add(uid)[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_7 $$ Document document = new Document()[ CD ]
Line_33 $$ Map<String, Long> expectedVersions = new HashMap()-->Line_37 $$ expectedVersions.put("4", 4L)[ FD ]
Line_6 $$ final IndexWriter iw = new IndexWriter(dir, iwConf)-->Line_21 $$ iw.addDocument(document)[ FD ]
Line_6 $$ final IndexWriter iw = new IndexWriter(dir, iwConf)-->Line_31 $$ iw.addDocument(document)[ FD ]
Line_9 $$ StringField uid = new StringField(UidFieldMapper.NAME, "1", Store.YES)-->Line_10 $$ document.add(uid)[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_28 $$ iw.addDocument(document)[ CD ]
Line_15 $$ document = new Document()-->Line_27 $$ document.add(version)[ FD ]
Line_6 $$ final IndexWriter iw = new IndexWriter(dir, iwConf)-->Line_28 $$ iw.addDocument(document)[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_14 $$ iw.commit()[ CD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_8 $$ document.add(new StringField("a", "b", Store.NO))[ CD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_24 $$ uid.setStringValue("5")[ CD ]
Line_15 $$ document = new Document()-->Line_31 $$ iw.addDocument(document)[ FD ]
Line_3 $$ final IndexWriterConfig iwConf = new IndexWriterConfig(new KeywordAnalyzer())-->Line_4 $$ iwConf.setMergePolicy(new ElasticsearchMergePolicy(iwConf.getMergePolicy()))[ FD ]
Line_6 $$ final IndexWriter iw = new IndexWriter(dir, iwConf)-->Line_18 $$ iw.addDocument(document)[ FD ]
Line_33 $$ Map<String, Long> expectedVersions = new HashMap()-->Line_39 $$ expectedVersions.put("6", 6L)[ FD ]
Line_6 $$ final IndexWriter iw = new IndexWriter(dir, iwConf)-->Line_11 $$ iw.addDocument(document)[ FD ]
Line_15 $$ document = new Document()-->Line_17 $$ document.add(uidAndVersion)[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_51 $$ ir.close()[ CD ]
Line_42 $$ final NumericDocValues versions = ir.getNumericDocValues(VersionFieldMapper.NAME)-->Line_43 $$ assertThat(versions, notNullValue())[ FD ]
Line_25 $$ Field version = new NumericDocValuesField(VersionFieldMapper.NAME, 5L)-->Line_30 $$ version.setLongValue(6L)[ FD ]
Line_33 $$ Map<String, Long> expectedVersions = new HashMap()-->Line_38 $$ expectedVersions.put("5", 5L)[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_13 $$ iw.addDocument(document)[ CD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_49 $$ iw.close()[ CD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_34 $$ expectedVersions.put("1", 0L)[ CD ]
Line_33 $$ Map<String, Long> expectedVersions = new HashMap()-->Line_36 $$ expectedVersions.put("3", 0L)[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_21 $$ iw.addDocument(document)[ CD ]
Line_7 $$ Document document = new Document()-->Line_11 $$ iw.addDocument(document)[ FD ]
Line_9 $$ StringField uid = new StringField(UidFieldMapper.NAME, "1", Store.YES)-->Line_26 $$ document.add(uid)[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_50 $$ assertThat(IndexWriter.isLocked(iw.getDirectory()), is(false))[ CD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_20 $$ uidAndVersion.version = 4L[ CD ]
Line_15 $$ document = new Document()-->Line_28 $$ iw.addDocument(document)[ FD ]
Line_23 $$ document = new Document()-->Line_27 $$ document.add(version)[ FD ]
Line_7 $$ Document document = new Document()-->Line_15 $$ document = new Document()[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_22 $$ iw.commit()[ CD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_29 $$ uid.setStringValue("6")[ CD ]
Line_44 $$ for (int i = 0; i < ir.maxDoc(); ++i) -->Line_45 $$ final String uidValue = ir.document(i).get(UidFieldMapper.NAME)[ CD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_30 $$ version.setLongValue(6L)[ CD ]
Line_33 $$ Map<String, Long> expectedVersions = new HashMap()-->Line_35 $$ expectedVersions.put("2", 0L)[ FD ]
Line_7 $$ Document document = new Document()-->Line_18 $$ iw.addDocument(document)[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_44 $$ for (int i = 0; i < ir.maxDoc(); ++i) [ CD ]
Line_6 $$ final IndexWriter iw = new IndexWriter(dir, iwConf)-->Line_13 $$ iw.addDocument(document)[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_37 $$ expectedVersions.put("4", 4L)[ CD ]
Line_7 $$ Document document = new Document()-->Line_23 $$ document = new Document()[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_39 $$ expectedVersions.put("6", 6L)[ CD ]
Line_9 $$ StringField uid = new StringField(UidFieldMapper.NAME, "1", Store.YES)-->Line_24 $$ uid.setStringValue("5")[ FD ]
Line_7 $$ Document document = new Document()-->Line_10 $$ document.add(uid)[ FD ]
Line_33 $$ Map<String, Long> expectedVersions = new HashMap()-->Line_34 $$ expectedVersions.put("1", 0L)[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_19 $$ uidAndVersion.uid = "4"[ CD ]
Line_7 $$ Document document = new Document()-->Line_17 $$ document.add(uidAndVersion)[ FD ]
Line_44 $$ for (int i = 0; i < ir.maxDoc(); ++i) -->Line_47 $$ assertThat(versions.get(i), equalTo(expectedVersion))[ FD ]
Line_7 $$ Document document = new Document()-->Line_8 $$ document.add(new StringField("a", "b", Store.NO))[ FD ]
Line_6 $$ final IndexWriter iw = new IndexWriter(dir, iwConf)-->Line_50 $$ assertThat(IndexWriter.isLocked(iw.getDirectory()), is(false))[ FD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_17 $$ document.add(uidAndVersion)[ CD ]
Line_2 $$ public void testMergingOldIndices() throws Exception -->Line_9 $$ StringField uid = new StringField(UidFieldMapper.NAME, "1", Store.YES)[ CD ]
Line_23 $$ document = new Document()-->Line_28 $$ iw.addDocument(document)[ FD ]
