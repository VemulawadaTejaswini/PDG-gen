Line_5 $$ MutablePropertyValues pvs1 = new MutablePropertyValues()-->Line_12 $$ parent.setPropertyValues(pvs1)[ FD ]
Line_4 $$ if (parentChildSeparation) -->Line_14 $$ factory.registerBeanDefinition("parent1", parent)[ CD ]
Line_4 $$ if (parentChildSeparation) -->Line_17 $$ MutablePropertyValues pvs = new MutablePropertyValues()[ CD ]
Line_40 $$ Map<Object, Object> someMap = new ManagedMap<Object, Object>()-->Line_51 $$ someMap.put("$[ FD ]
Line_4 $$ if (parentChildSeparation) -->Line_23 $$ bd.setPropertyValues(pvs)[ CD ]
Line_45 $$ MutablePropertyValues innerPvs = new MutablePropertyValues()-->Line_48 $$ innerBd.setPropertyValues(innerPvs)[ FD ]
Line_7 $$ MutablePropertyValues pvs2 = new MutablePropertyValues()-->Line_10 $$ pvs2.add("someMap", singletonMap)[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_46 $$ innerPvs.add("country", "$[ CD ]
Line_45 $$ MutablePropertyValues innerPvs = new MutablePropertyValues()-->Line_46 $$ innerPvs.add("country", "$[ FD ]
Line_40 $$ Map<Object, Object> someMap = new ManagedMap<Object, Object>()-->Line_49 $$ someMap.put("key3", innerBd)[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_56 $$ Properties props = new Properties()[ CD ]
Line_56 $$ Properties props = new Properties()-->Line_59 $$ props.setProperty("ref", "tb2")[ FD ]
Line_55 $$ PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer()-->Line_63 $$ ppc.setProperties(props)[ FD ]
Line_17 $$ MutablePropertyValues pvs = new MutablePropertyValues()-->Line_23 $$ bd.setPropertyValues(pvs)[ FD ]
Line_66 $$ TestBean tb2 = (TestBean) factory.getBean("tb2")-->Line_77 $$ assertEquals(2, tb2.getFriends().size())[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_38 $$ someSet.add(new TypedStringValue("$[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_77 $$ assertEquals(2, tb2.getFriends().size())[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_59 $$ props.setProperty("ref", "tb2")[ CD ]
Line_40 $$ Map<Object, Object> someMap = new ManagedMap<Object, Object>()-->Line_41 $$ someMap.put(new TypedStringValue("key$[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_85 $$ assertEquals("98", tb2.getSomeMap().get("key98"))[ CD ]
Line_4 $$ if (parentChildSeparation) -->Line_19 $$ pvs.add("name", "name$[ CD ]
Line_26 $$ ConstructorArgumentValues cas = new ConstructorArgumentValues()-->Line_27 $$ cas.addIndexedArgumentValue(1, "$[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_49 $$ someMap.put("key3", innerBd)[ CD ]
Line_66 $$ TestBean tb2 = (TestBean) factory.getBean("tb2")-->Line_88 $$ assertEquals("98name", tb2.getSomeMap().get("key2"))[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_30 $$ pvs.add("stringArray", new String[] [ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_32 $$ friends.add("na$[ CD ]
Line_66 $$ TestBean tb2 = (TestBean) factory.getBean("tb2")-->Line_74 $$ assertEquals(2, tb2.getStringArray().length)[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_93 $$ assertEquals(System.getProperty("os.name"), inner1.getCountry())[ CD ]
Line_90 $$ TestBean inner2 = (TestBean) tb2.getSomeMap().get("mykey4")-->Line_96 $$ assertEquals(System.getProperty("os.name"), inner2.getCountry())[ FD ]
Line_66 $$ TestBean tb2 = (TestBean) factory.getBean("tb2")-->Line_87 $$ assertEquals(tb2, tb2.getSomeMap().get("key1"))[ FD ]
Line_7 $$ MutablePropertyValues pvs2 = new MutablePropertyValues()-->Line_8 $$ pvs2.add("name", "name$[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_63 $$ ppc.setProperties(props)[ CD ]
Line_13 $$ ChildBeanDefinition bd = new ChildBeanDefinition("$-->Line_23 $$ bd.setPropertyValues(pvs)[ FD ]
Line_3 $$ Map singletonMap = Collections.singletonMap("myKey", "myValue")-->Line_21 $$ pvs.add("someMap", singletonMap)[ FD ]
Line_4 $$ if (parentChildSeparation) -->Line_6 $$ pvs1.add("age", "$[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_81 $$ assertTrue(tb2.getSomeSet().contains("na98me"))[ CD ]
Line_4 $$ if (parentChildSeparation) -->Line_11 $$ RootBeanDefinition parent = new RootBeanDefinition(TestBean.class)[ CD ]
Line_11 $$ RootBeanDefinition parent = new RootBeanDefinition(TestBean.class)-->Line_14 $$ factory.registerBeanDefinition("parent1", parent)[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_40 $$ Map<Object, Object> someMap = new ManagedMap<Object, Object>()[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_43 $$ someMap.put("key1", new RuntimeBeanReference("$[ CD ]
Line_66 $$ TestBean tb2 = (TestBean) factory.getBean("tb2")-->Line_81 $$ assertTrue(tb2.getSomeSet().contains("na98me"))[ FD ]
Line_66 $$ TestBean tb2 = (TestBean) factory.getBean("tb2")-->Line_83 $$ assertTrue(tb2.getSomeSet().contains(new Integer(98)))[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_60 $$ props.setProperty("m", "my")[ CD ]
Line_66 $$ TestBean tb2 = (TestBean) factory.getBean("tb2")-->Line_76 $$ assertEquals("98", tb2.getStringArray()[1])[ FD ]
Line_4 $$ if (parentChildSeparation) -->Line_5 $$ MutablePropertyValues pvs1 = new MutablePropertyValues()[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_79 $$ assertEquals(tb2, tb2.getFriends().toArray()[1])[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_33 $$ friends.add(new RuntimeBeanReference("$[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_89 $$ TestBean inner1 = (TestBean) tb2.getSomeMap().get("key3")[ CD ]
Line_90 $$ TestBean inner2 = (TestBean) tb2.getSomeMap().get("mykey4")-->Line_94 $$ assertEquals(98, inner2.getAge())[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_68 $$ assertEquals(98, tb2.getAge())[ CD ]
Line_4 $$ if (parentChildSeparation) -->Line_7 $$ MutablePropertyValues pvs2 = new MutablePropertyValues()[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_44 $$ someMap.put("key2", "$[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_96 $$ assertEquals(System.getProperty("os.name"), inner2.getCountry())[ CD ]
Line_17 $$ MutablePropertyValues pvs = new MutablePropertyValues()-->Line_20 $$ pvs.add("spouse", new RuntimeBeanReference("$[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_94 $$ assertEquals(98, inner2.getAge())[ CD ]
Line_89 $$ TestBean inner1 = (TestBean) tb2.getSomeMap().get("key3")-->Line_92 $$ assertEquals(null, inner1.getName())[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_64 $$ ppc.postProcessBeanFactory(factory)[ CD ]
Line_90 $$ TestBean inner2 = (TestBean) tb2.getSomeMap().get("mykey4")-->Line_95 $$ assertEquals("namemyvarmyvar$[ FD ]
Line_55 $$ PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer()-->Line_64 $$ ppc.postProcessBeanFactory(factory)[ FD ]
Line_65 $$ TestBean tb1 = (TestBean) factory.getBean("tb1")-->Line_71 $$ assertEquals(tb2, tb1.getSpouse())[ FD ]
Line_66 $$ TestBean tb2 = (TestBean) factory.getBean("tb2")-->Line_84 $$ assertEquals(6, tb2.getSomeMap().size())[ FD ]
Line_56 $$ Properties props = new Properties()-->Line_61 $$ props.setProperty("key4", "mykey4")[ FD ]
Line_4 $$ if (parentChildSeparation) -->Line_15 $$ factory.registerBeanDefinition("tb1", bd)[ CD ]
Line_4 $$ if (parentChildSeparation) -->Line_12 $$ parent.setPropertyValues(pvs1)[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_76 $$ assertEquals("98", tb2.getStringArray()[1])[ CD ]
Line_13 $$ ChildBeanDefinition bd = new ChildBeanDefinition("$-->Line_54 $$ factory.registerBeanDefinition("tb2", bd)[ FD ]
Line_11 $$ RootBeanDefinition parent = new RootBeanDefinition(TestBean.class)-->Line_12 $$ parent.setPropertyValues(pvs1)[ FD ]
Line_4 $$ if (parentChildSeparation) -->Line_20 $$ pvs.add("spouse", new RuntimeBeanReference("$[ CD ]
Line_4 $$ if (parentChildSeparation) -->Line_9 $$ pvs2.add("spouse", new RuntimeBeanReference("$[ CD ]
Line_4 $$ if (parentChildSeparation) -->Line_8 $$ pvs2.add("name", "name$[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_88 $$ assertEquals("98name", tb2.getSomeMap().get("key2"))[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_91 $$ assertEquals(0, inner1.getAge())[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_80 $$ assertEquals(3, tb2.getSomeSet().size())[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_47 $$ RootBeanDefinition innerBd = new RootBeanDefinition(TestBean.class)[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_74 $$ assertEquals(2, tb2.getStringArray().length)[ CD ]
Line_17 $$ MutablePropertyValues pvs = new MutablePropertyValues()-->Line_34 $$ pvs.add("friends", friends)[ FD ]
Line_65 $$ TestBean tb1 = (TestBean) factory.getBean("tb1")-->Line_72 $$ assertEquals(1, tb1.getSomeMap().size())[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_41 $$ someMap.put(new TypedStringValue("key$[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_84 $$ assertEquals(6, tb2.getSomeMap().size())[ CD ]
Line_5 $$ MutablePropertyValues pvs1 = new MutablePropertyValues()-->Line_6 $$ pvs1.add("age", "$[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_83 $$ assertTrue(tb2.getSomeSet().contains(new Integer(98)))[ CD ]
Line_35 $$ Set<Object> someSet = new ManagedSet<Object>()-->Line_37 $$ someSet.add(new RuntimeBeanReference("$[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_34 $$ pvs.add("friends", friends)[ CD ]
Line_17 $$ MutablePropertyValues pvs = new MutablePropertyValues()-->Line_39 $$ pvs.add("someSet", someSet)[ FD ]
Line_66 $$ TestBean tb2 = (TestBean) factory.getBean("tb2")-->Line_82 $$ assertTrue(tb2.getSomeSet().contains(tb2))[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_50 $$ MutablePropertyValues innerPvs2 = new MutablePropertyValues(innerPvs)[ CD ]
Line_7 $$ MutablePropertyValues pvs2 = new MutablePropertyValues()-->Line_9 $$ pvs2.add("spouse", new RuntimeBeanReference("$[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_35 $$ Set<Object> someSet = new ManagedSet<Object>()[ CD ]
Line_4 $$ if (parentChildSeparation) -->Line_13 $$ ChildBeanDefinition bd = new ChildBeanDefinition("$[ CD ]
Line_66 $$ TestBean tb2 = (TestBean) factory.getBean("tb2")-->Line_75 $$ assertEquals(System.getProperty("os.name"), tb2.getStringArray()[0])[ FD ]
Line_65 $$ TestBean tb1 = (TestBean) factory.getBean("tb1")-->Line_67 $$ assertEquals(98, tb1.getAge())[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_86 $$ assertEquals(tb2, tb2.getSomeMap().get("key98ref"))[ CD ]
Line_3 $$ Map singletonMap = Collections.singletonMap("myKey", "myValue")-->Line_10 $$ pvs2.add("someMap", singletonMap)[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_55 $$ PropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer()[ CD ]
Line_66 $$ TestBean tb2 = (TestBean) factory.getBean("tb2")-->Line_89 $$ TestBean inner1 = (TestBean) tb2.getSomeMap().get("key3")[ FD ]
Line_35 $$ Set<Object> someSet = new ManagedSet<Object>()-->Line_38 $$ someSet.add(new TypedStringValue("$[ FD ]
Line_40 $$ Map<Object, Object> someMap = new ManagedMap<Object, Object>()-->Line_44 $$ someMap.put("key2", "$[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_61 $$ props.setProperty("key4", "mykey4")[ CD ]
Line_66 $$ TestBean tb2 = (TestBean) factory.getBean("tb2")-->Line_70 $$ assertEquals("myvarname98", tb2.getName())[ FD ]
Line_4 $$ if (parentChildSeparation) -->Line_10 $$ pvs2.add("someMap", singletonMap)[ CD ]
Line_56 $$ Properties props = new Properties()-->Line_60 $$ props.setProperty("m", "my")[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_78 $$ assertEquals("na98me", tb2.getFriends().iterator().next())[ CD ]
Line_66 $$ TestBean tb2 = (TestBean) factory.getBean("tb2")-->Line_90 $$ TestBean inner2 = (TestBean) tb2.getSomeMap().get("mykey4")[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_90 $$ TestBean inner2 = (TestBean) tb2.getSomeMap().get("mykey4")[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_82 $$ assertTrue(tb2.getSomeSet().contains(tb2))[ CD ]
Line_66 $$ TestBean tb2 = (TestBean) factory.getBean("tb2")-->Line_79 $$ assertEquals(tb2, tb2.getFriends().toArray()[1])[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_71 $$ assertEquals(tb2, tb1.getSpouse())[ CD ]
Line_66 $$ TestBean tb2 = (TestBean) factory.getBean("tb2")-->Line_71 $$ assertEquals(tb2, tb1.getSpouse())[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_65 $$ TestBean tb1 = (TestBean) factory.getBean("tb1")[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_48 $$ innerBd.setPropertyValues(innerPvs)[ CD ]
Line_31 $$ List<Object> friends = new ManagedList<Object>()-->Line_32 $$ friends.add("na$[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_62 $$ props.setProperty("parent", "parent1")[ CD ]
Line_40 $$ Map<Object, Object> someMap = new ManagedMap<Object, Object>()-->Line_43 $$ someMap.put("key1", new RuntimeBeanReference("$[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_36 $$ someSet.add("na$[ CD ]
Line_56 $$ Properties props = new Properties()-->Line_57 $$ props.setProperty("age", "98")[ FD ]
Line_89 $$ TestBean inner1 = (TestBean) tb2.getSomeMap().get("key3")-->Line_91 $$ assertEquals(0, inner1.getAge())[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_92 $$ assertEquals(null, inner1.getName())[ CD ]
Line_31 $$ List<Object> friends = new ManagedList<Object>()-->Line_33 $$ friends.add(new RuntimeBeanReference("$[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_42 $$ someMap.put(new TypedStringValue("key$[ CD ]
Line_89 $$ TestBean inner1 = (TestBean) tb2.getSomeMap().get("key3")-->Line_93 $$ assertEquals(System.getProperty("os.name"), inner1.getCountry())[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_95 $$ assertEquals("namemyvarmyvar$[ CD ]
Line_13 $$ ChildBeanDefinition bd = new ChildBeanDefinition("$-->Line_24 $$ factory.registerBeanDefinition("tb1", bd)[ FD ]
Line_47 $$ RootBeanDefinition innerBd = new RootBeanDefinition(TestBean.class)-->Line_48 $$ innerBd.setPropertyValues(innerPvs)[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_66 $$ TestBean tb2 = (TestBean) factory.getBean("tb2")[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_72 $$ assertEquals(1, tb1.getSomeMap().size())[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_27 $$ cas.addIndexedArgumentValue(1, "$[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_39 $$ pvs.add("someSet", someSet)[ CD ]
Line_13 $$ ChildBeanDefinition bd = new ChildBeanDefinition("$-->Line_15 $$ factory.registerBeanDefinition("tb1", bd)[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_69 $$ assertEquals("namemyvarmyvar$[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_31 $$ List<Object> friends = new ManagedList<Object>()[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_37 $$ someSet.add(new RuntimeBeanReference("$[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_3 $$ Map singletonMap = Collections.singletonMap("myKey", "myValue")[ CD ]
Line_4 $$ if (parentChildSeparation) -->Line_21 $$ pvs.add("someMap", singletonMap)[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_51 $$ someMap.put("$[ CD ]
Line_4 $$ if (parentChildSeparation) -->Line_18 $$ pvs.add("age", "$[ CD ]
Line_17 $$ MutablePropertyValues pvs = new MutablePropertyValues()-->Line_52 $$ pvs.add("someMap", someMap)[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_26 $$ ConstructorArgumentValues cas = new ConstructorArgumentValues()[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_52 $$ pvs.add("someMap", someMap)[ CD ]
Line_35 $$ Set<Object> someSet = new ManagedSet<Object>()-->Line_36 $$ someSet.add("na$[ FD ]
Line_17 $$ MutablePropertyValues pvs = new MutablePropertyValues()-->Line_19 $$ pvs.add("name", "name$[ FD ]
Line_17 $$ MutablePropertyValues pvs = new MutablePropertyValues()-->Line_18 $$ pvs.add("age", "$[ FD ]
Line_56 $$ Properties props = new Properties()-->Line_58 $$ props.setProperty("var", "$[ FD ]
Line_65 $$ TestBean tb1 = (TestBean) factory.getBean("tb1")-->Line_69 $$ assertEquals("namemyvarmyvar$[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_57 $$ props.setProperty("age", "98")[ CD ]
Line_66 $$ TestBean tb2 = (TestBean) factory.getBean("tb2")-->Line_85 $$ assertEquals("98", tb2.getSomeMap().get("key98"))[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_70 $$ assertEquals("myvarname98", tb2.getName())[ CD ]
Line_31 $$ List<Object> friends = new ManagedList<Object>()-->Line_34 $$ pvs.add("friends", friends)[ FD ]
Line_40 $$ Map<Object, Object> someMap = new ManagedMap<Object, Object>()-->Line_42 $$ someMap.put(new TypedStringValue("key$[ FD ]
Line_65 $$ TestBean tb1 = (TestBean) factory.getBean("tb1")-->Line_73 $$ assertEquals("myValue", tb1.getSomeMap().get("myKey"))[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_54 $$ factory.registerBeanDefinition("tb2", bd)[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_45 $$ MutablePropertyValues innerPvs = new MutablePropertyValues()[ CD ]
Line_17 $$ MutablePropertyValues pvs = new MutablePropertyValues()-->Line_21 $$ pvs.add("someMap", singletonMap)[ FD ]
Line_35 $$ Set<Object> someSet = new ManagedSet<Object>()-->Line_39 $$ pvs.add("someSet", someSet)[ FD ]
Line_47 $$ RootBeanDefinition innerBd = new RootBeanDefinition(TestBean.class)-->Line_49 $$ someMap.put("key3", innerBd)[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_4 $$ if (parentChildSeparation) [ CD ]
Line_17 $$ MutablePropertyValues pvs = new MutablePropertyValues()-->Line_30 $$ pvs.add("stringArray", new String[] [ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_58 $$ props.setProperty("var", "$[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_73 $$ assertEquals("myValue", tb1.getSomeMap().get("myKey"))[ CD ]
Line_56 $$ Properties props = new Properties()-->Line_62 $$ props.setProperty("parent", "parent1")[ FD ]
Line_66 $$ TestBean tb2 = (TestBean) factory.getBean("tb2")-->Line_80 $$ assertEquals(3, tb2.getSomeSet().size())[ FD ]
Line_66 $$ TestBean tb2 = (TestBean) factory.getBean("tb2")-->Line_78 $$ assertEquals("na98me", tb2.getFriends().iterator().next())[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_28 $$ cas.addGenericArgumentValue("$[ CD ]
Line_66 $$ TestBean tb2 = (TestBean) factory.getBean("tb2")-->Line_68 $$ assertEquals(98, tb2.getAge())[ FD ]
Line_26 $$ ConstructorArgumentValues cas = new ConstructorArgumentValues()-->Line_28 $$ cas.addGenericArgumentValue("$[ FD ]
Line_4 $$ if (parentChildSeparation) -->Line_24 $$ factory.registerBeanDefinition("tb1", bd)[ CD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_87 $$ assertEquals(tb2, tb2.getSomeMap().get("key1"))[ CD ]
Line_66 $$ TestBean tb2 = (TestBean) factory.getBean("tb2")-->Line_86 $$ assertEquals(tb2, tb2.getSomeMap().get("key98ref"))[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_67 $$ assertEquals(98, tb1.getAge())[ CD ]
Line_40 $$ Map<Object, Object> someMap = new ManagedMap<Object, Object>()-->Line_52 $$ pvs.add("someMap", someMap)[ FD ]
Line_2 $$ private void doTestPropertyPlaceholderConfigurer(boolean parentChildSeparation) -->Line_75 $$ assertEquals(System.getProperty("os.name"), tb2.getStringArray()[0])[ CD ]
Line_56 $$ Properties props = new Properties()-->Line_63 $$ ppc.setProperties(props)[ FD ]
