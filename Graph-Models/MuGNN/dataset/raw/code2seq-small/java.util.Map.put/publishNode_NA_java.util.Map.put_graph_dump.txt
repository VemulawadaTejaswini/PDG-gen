Line_2 $$ private synchronized void publishNode(NodeAndClient nodeAndClient) -->Line_5 $$ if (nodeEnv.hasNodeFile()) [ CD ]
Line_5 $$ if (nodeEnv.hasNodeFile()) -->Line_6 $$ dataDirToClean.addAll(Arrays.asList(nodeEnv.nodeDataPaths()))[ CD ]
Line_2 $$ private synchronized void publishNode(NodeAndClient nodeAndClient) -->Line_4 $$ NodeEnvironment nodeEnv = getInstanceFromNode(NodeEnvironment.class, nodeAndClient.node)[ CD ]
Line_4 $$ NodeEnvironment nodeEnv = getInstanceFromNode(NodeEnvironment.class, nodeAndClient.node)-->Line_5 $$ if (nodeEnv.hasNodeFile()) [ FD ]
Line_2 $$ private synchronized void publishNode(NodeAndClient nodeAndClient) -->Line_8 $$ nodes.put(nodeAndClient.name, nodeAndClient)[ FD ]
Line_2 $$ private synchronized void publishNode(NodeAndClient nodeAndClient) -->Line_9 $$ applyDisruptionSchemeToNode(nodeAndClient)[ FD ]
Line_2 $$ private synchronized void publishNode(NodeAndClient nodeAndClient) -->Line_3 $$ assert !nodeAndClient.node().isClosed()[ FD ]
Line_2 $$ private synchronized void publishNode(NodeAndClient nodeAndClient) -->Line_8 $$ nodes.put(nodeAndClient.name, nodeAndClient)[ CD ]
Line_4 $$ NodeEnvironment nodeEnv = getInstanceFromNode(NodeEnvironment.class, nodeAndClient.node)-->Line_6 $$ dataDirToClean.addAll(Arrays.asList(nodeEnv.nodeDataPaths()))[ FD ]
Line_2 $$ private synchronized void publishNode(NodeAndClient nodeAndClient) -->Line_9 $$ applyDisruptionSchemeToNode(nodeAndClient)[ CD ]
