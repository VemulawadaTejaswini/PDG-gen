Line_2 $$ public void testWithShardSizeStringSingleShard() throws Exception -->Line_4 $$ indexData()[ CD ]
Line_9 $$ Map<String, Long> expected = new HashMap()-->Line_14 $$ assertThat(bucket.getDocCount(), equalTo(expected.get(bucket.getKey())))[ FD ]
Line_2 $$ public void testWithShardSizeStringSingleShard() throws Exception -->Line_7 $$ Collection<Terms.Bucket> buckets = terms.getBuckets()[ CD ]
Line_2 $$ public void testWithShardSizeStringSingleShard() throws Exception -->Line_8 $$ assertThat(buckets.size(), equalTo(3))[ CD ]
Line_5 $$ SearchResponse response = client().prepareSearch("idx").setTypes("type").setRouting(routing1).setQuery(matchAllQuery()).addAggregation(terms("keys").field("key").size(3).collectMode(randomFrom(SubAggCollectionMode.values())).shardSize(5).order(Terms.Order.count(false))).execute().actionGet()-->Line_6 $$ Terms terms = response.getAggregations().get("keys")[ FD ]
Line_9 $$ Map<String, Long> expected = new HashMap()-->Line_10 $$ expected.put("1", 5l)[ FD ]
Line_2 $$ public void testWithShardSizeStringSingleShard() throws Exception -->Line_6 $$ Terms terms = response.getAggregations().get("keys")[ CD ]
Line_6 $$ Terms terms = response.getAggregations().get("keys")-->Line_7 $$ Collection<Terms.Bucket> buckets = terms.getBuckets()[ FD ]
Line_2 $$ public void testWithShardSizeStringSingleShard() throws Exception -->Line_9 $$ Map<String, Long> expected = new HashMap()[ CD ]
Line_2 $$ public void testWithShardSizeStringSingleShard() throws Exception -->Line_10 $$ expected.put("1", 5l)[ CD ]
Line_9 $$ Map<String, Long> expected = new HashMap()-->Line_11 $$ expected.put("2", 4l)[ FD ]
Line_2 $$ public void testWithShardSizeStringSingleShard() throws Exception -->Line_3 $$ createIdx("type=string,index=not_analyzed")[ CD ]
Line_9 $$ Map<String, Long> expected = new HashMap()-->Line_12 $$ expected.put("3", 3l)[ FD ]
Line_2 $$ public void testWithShardSizeStringSingleShard() throws Exception -->Line_11 $$ expected.put("2", 4l)[ CD ]
Line_7 $$ Collection<Terms.Bucket> buckets = terms.getBuckets()-->Line_8 $$ assertThat(buckets.size(), equalTo(3))[ FD ]
Line_2 $$ public void testWithShardSizeStringSingleShard() throws Exception -->Line_12 $$ expected.put("3", 3l)[ CD ]
Line_2 $$ public void testWithShardSizeStringSingleShard() throws Exception -->Line_5 $$ SearchResponse response = client().prepareSearch("idx").setTypes("type").setRouting(routing1).setQuery(matchAllQuery()).addAggregation(terms("keys").field("key").size(3).collectMode(randomFrom(SubAggCollectionMode.values())).shardSize(5).order(Terms.Order.count(false))).execute().actionGet()[ CD ]
Line_13 $$ for (Terms.Bucket bucket : buckets) -->Line_14 $$ assertThat(bucket.getDocCount(), equalTo(expected.get(bucket.getKey())))[ FD ]
