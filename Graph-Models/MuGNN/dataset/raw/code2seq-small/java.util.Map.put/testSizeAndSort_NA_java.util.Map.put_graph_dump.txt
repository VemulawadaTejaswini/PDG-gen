Line_5 $$ Map<String, Integer> termsAndDocCount = new HashMap()-->Line_12 $$ termsAndDocCount.put("prefix_abaa", 8)[ FD ]
Line_2 $$ public void testSizeAndSort() throws Exception -->Line_4 $$ ensureGreen()[ CD ]
Line_2 $$ public void testSizeAndSort() throws Exception -->Line_16 $$ termsAndDocCount.put("prefix_abcc", 1)[ CD ]
Line_2 $$ public void testSizeAndSort() throws Exception -->Line_28 $$ assertSuggestion(suggest, 0, "size10SortFrequencyFirst", "prefix_aaad", "prefix_abbb", "prefix_aaca", "prefix_abba", "prefix_accc", "prefix_addd", "prefix_abaa", "prefix_dbca", "prefix_cbad", "prefix_aacd")[ CD ]
Line_2 $$ public void testSizeAndSort() throws Exception -->Line_11 $$ termsAndDocCount.put("prefix_addd", 10)[ CD ]
Line_5 $$ Map<String, Integer> termsAndDocCount = new HashMap()-->Line_8 $$ termsAndDocCount.put("prefix_aaca", 16)[ FD ]
Line_2 $$ public void testSizeAndSort() throws Exception -->Line_5 $$ Map<String, Integer> termsAndDocCount = new HashMap()[ CD ]
Line_5 $$ Map<String, Integer> termsAndDocCount = new HashMap()-->Line_9 $$ termsAndDocCount.put("prefix_abba", 14)[ FD ]
Line_2 $$ public void testSizeAndSort() throws Exception -->Line_24 $$ Suggest suggest = searchSuggest("prefix_abcd", termSuggestion("size3SortScoreFirst").size(3).minDocFreq(0).field("field1").suggestMode("always"), termSuggestion("size10SortScoreFirst").size(10).minDocFreq(0).field("field1").suggestMode("always").shardSize(50), termSuggestion("size3SortScoreFirstMaxEdits1").maxEdits(1).size(10).minDocFreq(0).field("field1").suggestMode("always"), termSuggestion("size10SortFrequencyFirst").size(10).sort("frequency").shardSize(1000).minDocFreq(0).field("field1").suggestMode("always"))[ CD ]
Line_2 $$ public void testSizeAndSort() throws Exception -->Line_25 $$ assertSuggestion(suggest, 0, "size3SortScoreFirst", "prefix_aacd", "prefix_abcc", "prefix_accd")[ CD ]
Line_2 $$ public void testSizeAndSort() throws Exception -->Line_7 $$ termsAndDocCount.put("prefix_abbb", 18)[ CD ]
Line_18 $$ for (Map.Entry<String, Integer> entry : termsAndDocCount.entrySet()) -->Line_19 $$ for (int i = 0; i < entry.getValue(); i++) [ FD ]
Line_19 $$ for (int i = 0; i < entry.getValue(); i++) -->Line_20 $$ index("test", "type1", entry.getKey() + i, "field1", entry.getKey())[ CD ]
Line_5 $$ Map<String, Integer> termsAndDocCount = new HashMap()-->Line_15 $$ termsAndDocCount.put("prefix_aacd", 1)[ FD ]
Line_2 $$ public void testSizeAndSort() throws Exception -->Line_9 $$ termsAndDocCount.put("prefix_abba", 14)[ CD ]
Line_5 $$ Map<String, Integer> termsAndDocCount = new HashMap()-->Line_6 $$ termsAndDocCount.put("prefix_aaad", 20)[ FD ]
Line_2 $$ public void testSizeAndSort() throws Exception -->Line_12 $$ termsAndDocCount.put("prefix_abaa", 8)[ CD ]
Line_2 $$ public void testSizeAndSort() throws Exception -->Line_13 $$ termsAndDocCount.put("prefix_dbca", 6)[ CD ]
Line_5 $$ Map<String, Integer> termsAndDocCount = new HashMap()-->Line_11 $$ termsAndDocCount.put("prefix_addd", 10)[ FD ]
Line_5 $$ Map<String, Integer> termsAndDocCount = new HashMap()-->Line_13 $$ termsAndDocCount.put("prefix_dbca", 6)[ FD ]
Line_2 $$ public void testSizeAndSort() throws Exception -->Line_10 $$ termsAndDocCount.put("prefix_accc", 12)[ CD ]
Line_5 $$ Map<String, Integer> termsAndDocCount = new HashMap()-->Line_7 $$ termsAndDocCount.put("prefix_abbb", 18)[ FD ]
Line_24 $$ Suggest suggest = searchSuggest("prefix_abcd", termSuggestion("size3SortScoreFirst").size(3).minDocFreq(0).field("field1").suggestMode("always"), termSuggestion("size10SortScoreFirst").size(10).minDocFreq(0).field("field1").suggestMode("always").shardSize(50), termSuggestion("size3SortScoreFirstMaxEdits1").maxEdits(1).size(10).minDocFreq(0).field("field1").suggestMode("always"), termSuggestion("size10SortFrequencyFirst").size(10).sort("frequency").shardSize(1000).minDocFreq(0).field("field1").suggestMode("always"))-->Line_27 $$ assertSuggestion(suggest, 0, "size3SortScoreFirstMaxEdits1", "prefix_aacd", "prefix_abcc", "prefix_accd")[ FD ]
Line_2 $$ public void testSizeAndSort() throws Exception -->Line_27 $$ assertSuggestion(suggest, 0, "size3SortScoreFirstMaxEdits1", "prefix_aacd", "prefix_abcc", "prefix_accd")[ CD ]
Line_24 $$ Suggest suggest = searchSuggest("prefix_abcd", termSuggestion("size3SortScoreFirst").size(3).minDocFreq(0).field("field1").suggestMode("always"), termSuggestion("size10SortScoreFirst").size(10).minDocFreq(0).field("field1").suggestMode("always").shardSize(50), termSuggestion("size3SortScoreFirstMaxEdits1").maxEdits(1).size(10).minDocFreq(0).field("field1").suggestMode("always"), termSuggestion("size10SortFrequencyFirst").size(10).sort("frequency").shardSize(1000).minDocFreq(0).field("field1").suggestMode("always"))-->Line_28 $$ assertSuggestion(suggest, 0, "size10SortFrequencyFirst", "prefix_aaad", "prefix_abbb", "prefix_aaca", "prefix_abba", "prefix_accc", "prefix_addd", "prefix_abaa", "prefix_dbca", "prefix_cbad", "prefix_aacd")[ FD ]
Line_24 $$ Suggest suggest = searchSuggest("prefix_abcd", termSuggestion("size3SortScoreFirst").size(3).minDocFreq(0).field("field1").suggestMode("always"), termSuggestion("size10SortScoreFirst").size(10).minDocFreq(0).field("field1").suggestMode("always").shardSize(50), termSuggestion("size3SortScoreFirstMaxEdits1").maxEdits(1).size(10).minDocFreq(0).field("field1").suggestMode("always"), termSuggestion("size10SortFrequencyFirst").size(10).sort("frequency").shardSize(1000).minDocFreq(0).field("field1").suggestMode("always"))-->Line_26 $$ assertSuggestion(suggest, 0, "size10SortScoreFirst", 10, "prefix_aacd", "prefix_abcc", "prefix_accd")[ FD ]
Line_2 $$ public void testSizeAndSort() throws Exception -->Line_3 $$ createIndex("test")[ CD ]
Line_2 $$ public void testSizeAndSort() throws Exception -->Line_15 $$ termsAndDocCount.put("prefix_aacd", 1)[ CD ]
Line_2 $$ public void testSizeAndSort() throws Exception -->Line_14 $$ termsAndDocCount.put("prefix_cbad", 4)[ CD ]
Line_2 $$ public void testSizeAndSort() throws Exception -->Line_23 $$ refresh()[ CD ]
Line_5 $$ Map<String, Integer> termsAndDocCount = new HashMap()-->Line_10 $$ termsAndDocCount.put("prefix_accc", 12)[ FD ]
Line_5 $$ Map<String, Integer> termsAndDocCount = new HashMap()-->Line_16 $$ termsAndDocCount.put("prefix_abcc", 1)[ FD ]
Line_5 $$ Map<String, Integer> termsAndDocCount = new HashMap()-->Line_14 $$ termsAndDocCount.put("prefix_cbad", 4)[ FD ]
Line_5 $$ Map<String, Integer> termsAndDocCount = new HashMap()-->Line_18 $$ for (Map.Entry<String, Integer> entry : termsAndDocCount.entrySet()) [ FD ]
Line_2 $$ public void testSizeAndSort() throws Exception -->Line_8 $$ termsAndDocCount.put("prefix_aaca", 16)[ CD ]
Line_24 $$ Suggest suggest = searchSuggest("prefix_abcd", termSuggestion("size3SortScoreFirst").size(3).minDocFreq(0).field("field1").suggestMode("always"), termSuggestion("size10SortScoreFirst").size(10).minDocFreq(0).field("field1").suggestMode("always").shardSize(50), termSuggestion("size3SortScoreFirstMaxEdits1").maxEdits(1).size(10).minDocFreq(0).field("field1").suggestMode("always"), termSuggestion("size10SortFrequencyFirst").size(10).sort("frequency").shardSize(1000).minDocFreq(0).field("field1").suggestMode("always"))-->Line_25 $$ assertSuggestion(suggest, 0, "size3SortScoreFirst", "prefix_aacd", "prefix_abcc", "prefix_accd")[ FD ]
Line_18 $$ for (Map.Entry<String, Integer> entry : termsAndDocCount.entrySet()) -->Line_20 $$ index("test", "type1", entry.getKey() + i, "field1", entry.getKey())[ FD ]
Line_2 $$ public void testSizeAndSort() throws Exception -->Line_17 $$ termsAndDocCount.put("prefix_accd", 1)[ CD ]
Line_2 $$ public void testSizeAndSort() throws Exception -->Line_6 $$ termsAndDocCount.put("prefix_aaad", 20)[ CD ]
Line_5 $$ Map<String, Integer> termsAndDocCount = new HashMap()-->Line_17 $$ termsAndDocCount.put("prefix_accd", 1)[ FD ]
Line_2 $$ public void testSizeAndSort() throws Exception -->Line_26 $$ assertSuggestion(suggest, 0, "size10SortScoreFirst", 10, "prefix_aacd", "prefix_abcc", "prefix_accd")[ CD ]
