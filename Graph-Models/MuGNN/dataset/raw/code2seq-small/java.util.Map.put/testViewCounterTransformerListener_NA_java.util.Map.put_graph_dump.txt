Line_8 $$ StringBundler sb = new StringBundler(5)-->Line_10 $$ sb.append("Liferay.Service.Asset.AssetEntry.incrementViewCounter")[ FD ]
Line_2 $$ public void testViewCounterTransformerListener() throws Exception -->Line_14 $$ Assert.assertEquals(sb.toString(), content)[ CD ]
Line_2 $$ public void testViewCounterTransformerListener() throws Exception -->Line_10 $$ sb.append("Liferay.Service.Asset.AssetEntry.incrementViewCounter")[ CD ]
Line_3 $$ Map<String, String> tokens = getTokens()-->Line_7 $$ String content = JournalUtil.transform(null, tokens, Constants.VIEW, "en_US", UnsecureSAXReaderUtil.read(xml), null, script, TemplateConstants.LANG_TYPE_VM)[ FD ]
Line_6 $$ String script = "@view_counter@"-->Line_7 $$ String content = JournalUtil.transform(null, tokens, Constants.VIEW, "en_US", UnsecureSAXReaderUtil.read(xml), null, script, TemplateConstants.LANG_TYPE_VM)[ FD ]
Line_8 $$ StringBundler sb = new StringBundler(5)-->Line_12 $$ sb.append("com.liferay.journal.model.JournalArticle', classPK:1});")[ FD ]
Line_7 $$ String content = JournalUtil.transform(null, tokens, Constants.VIEW, "en_US", UnsecureSAXReaderUtil.read(xml), null, script, TemplateConstants.LANG_TYPE_VM)-->Line_14 $$ Assert.assertEquals(sb.toString(), content)[ FD ]
Line_8 $$ StringBundler sb = new StringBundler(5)-->Line_11 $$ sb.append("([ FD ]
Line_2 $$ public void testViewCounterTransformerListener() throws Exception -->Line_7 $$ String content = JournalUtil.transform(null, tokens, Constants.VIEW, "en_US", UnsecureSAXReaderUtil.read(xml), null, script, TemplateConstants.LANG_TYPE_VM)[ CD ]
Line_2 $$ public void testViewCounterTransformerListener() throws Exception -->Line_4 $$ tokens.put("article_resource_pk", "1")[ CD ]
Line_2 $$ public void testViewCounterTransformerListener() throws Exception -->Line_11 $$ sb.append("([ CD ]
Line_8 $$ StringBundler sb = new StringBundler(5)-->Line_14 $$ Assert.assertEquals(sb.toString(), content)[ FD ]
Line_2 $$ public void testViewCounterTransformerListener() throws Exception -->Line_9 $$ sb.append("<script type=\"text/javascript\">")[ CD ]
Line_2 $$ public void testViewCounterTransformerListener() throws Exception -->Line_8 $$ StringBundler sb = new StringBundler(5)[ CD ]
Line_2 $$ public void testViewCounterTransformerListener() throws Exception -->Line_3 $$ Map<String, String> tokens = getTokens()[ CD ]
Line_2 $$ public void testViewCounterTransformerListener() throws Exception -->Line_6 $$ String script = "@view_counter@"[ CD ]
Line_8 $$ StringBundler sb = new StringBundler(5)-->Line_9 $$ sb.append("<script type=\"text/javascript\">")[ FD ]
Line_8 $$ StringBundler sb = new StringBundler(5)-->Line_13 $$ sb.append("</script>")[ FD ]
Line_3 $$ Map<String, String> tokens = getTokens()-->Line_4 $$ tokens.put("article_resource_pk", "1")[ FD ]
Line_2 $$ public void testViewCounterTransformerListener() throws Exception -->Line_5 $$ String xml = DDMStructureTestUtil.getSampleStructuredContent()[ CD ]
Line_2 $$ public void testViewCounterTransformerListener() throws Exception -->Line_12 $$ sb.append("com.liferay.journal.model.JournalArticle', classPK:1});")[ CD ]
Line_2 $$ public void testViewCounterTransformerListener() throws Exception -->Line_13 $$ sb.append("</script>")[ CD ]
Line_5 $$ String xml = DDMStructureTestUtil.getSampleStructuredContent()-->Line_7 $$ String content = JournalUtil.transform(null, tokens, Constants.VIEW, "en_US", UnsecureSAXReaderUtil.read(xml), null, script, TemplateConstants.LANG_TYPE_VM)[ FD ]
