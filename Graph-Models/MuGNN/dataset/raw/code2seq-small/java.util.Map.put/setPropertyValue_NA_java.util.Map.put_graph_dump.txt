Line_82 $$ Object convertedMapKey = convertIfNecessary(null, null, key, mapKeyType, typeDescriptor)-->Line_85 $$ oldValue = map.get(convertedMapKey)[ FD ]
Line_13 $$ propValue = getPropertyValue(getterTokens)-->Line_33 $$ if (isExtractOldValueForEditor() && arrayIndex < Array.getLength(propValue)) [ FD ]
Line_27 $$ if (propValue.getClass().isArray()) -->Line_49 $$ if (propValue instanceof List) [ CD ]
Line_28 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)-->Line_134 $$ throw new TypeMismatchException(propertyChangeEvent, ph.getPropertyType(), ex.getTargetException())[ FD ]
Line_22 $$ propValue = setDefaultValue(getterTokens)-->Line_43 $$ propValue = getPropertyValue(actualName)[ FD ]
Line_53 $$ int index = Integer.parseInt(key)-->Line_56 $$ oldValue = list.get(index)[ FD ]
Line_31 $$ Object oldValue = null-->Line_36 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))[ FD ]
Line_22 $$ propValue = setDefaultValue(getterTokens)-->Line_41 $$ System.arraycopy(propValue, 0, newArray, 0, length)[ FD ]
Line_38 $$ if (arrayIndex >= length && arrayIndex < this.autoGrowCollectionLimit) -->Line_40 $$ Object newArray = Array.newInstance(componentType, arrayIndex + 1)[ CD ]
Line_2 $$ protected void setPropertyValue(PropertyTokenHolder tokens, PropertyValue pv) throws BeansException -->Line_95 $$ if (pv.isOptional()) [ FD ]
Line_3 $$ String propertyName = tokens.canonicalName-->Line_101 $$ throw createNotWritablePropertyException(propertyName)[ FD ]
Line_108 $$ if (!Boolean.FALSE.equals(pv.conversionNecessary)) -->Line_109 $$ if (pv.isConverted()) [ CD ]
Line_13 $$ propValue = getPropertyValue(getterTokens)-->Line_34 $$ oldValue = Array.get(propValue, arrayIndex)[ FD ]
Line_136 $$ Throwable cause = ex.getTargetException()-->Line_137 $$ if (cause instanceof UndeclaredThrowableException) [ FD ]
Line_13 $$ propValue = getPropertyValue(getterTokens)-->Line_29 $$ Class<?> requiredType = propValue.getClass().getComponentType()[ FD ]
Line_17 $$ String key = tokens.keys[tokens.keys.length - 1]-->Line_82 $$ Object convertedMapKey = convertIfNecessary(null, null, key, mapKeyType, typeDescriptor)[ FD ]
Line_34 $$ oldValue = Array.get(propValue, arrayIndex)-->Line_124 $$ valueToApply = convertForProperty(propertyName, oldValue, originalValue, ph.toTypeDescriptor())[ FD ]
Line_82 $$ Object convertedMapKey = convertIfNecessary(null, null, key, mapKeyType, typeDescriptor)-->Line_88 $$ map.put(convertedMapKey, convertedMapValue)[ FD ]
Line_136 $$ Throwable cause = ex.getTargetException()-->Line_138 $$ cause = cause.getCause()[ FD ]
Line_76 $$ if (propValue instanceof Map) -->Line_77 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)[ CD ]
Line_5 $$ if (tokens.keys != null) -->Line_11 $$ Object propValue[ CD ]
Line_37 $$ int length = Array.getLength(propValue)-->Line_41 $$ System.arraycopy(propValue, 0, newArray, 0, length)[ FD ]
Line_95 $$ if (pv.isOptional()) -->Line_99 $$ return[ CD ]
Line_11 $$ Object propValue-->Line_33 $$ if (isExtractOldValueForEditor() && arrayIndex < Array.getLength(propValue)) [ FD ]
Line_49 $$ if (propValue instanceof List) -->Line_52 $$ List<Object> list = (List<Object>) propValue[ CD ]
Line_13 $$ propValue = getPropertyValue(getterTokens)-->Line_49 $$ if (propValue instanceof List) [ FD ]
Line_76 $$ if (propValue instanceof Map) -->Line_81 $$ TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(mapKeyType)[ CD ]
Line_56 $$ oldValue = list.get(index)-->Line_114 $$ oldValue = ph.getValue()[ FD ]
Line_22 $$ propValue = setDefaultValue(getterTokens)-->Line_34 $$ oldValue = Array.get(propValue, arrayIndex)[ FD ]
Line_31 $$ Object oldValue = null-->Line_58 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))[ FD ]
Line_95 $$ if (pv.isOptional()) -->Line_96 $$ if (logger.isDebugEnabled()) [ CD ]
Line_5 $$ if (tokens.keys != null) -->Line_18 $$ if (propValue == null) [ CD ]
Line_96 $$ if (logger.isDebugEnabled()) -->Line_97 $$ logger.debug("Ignoring optional value for property '" + actualName + "' - property not found on bean class [" + getRootClass().getName() + "]")[ CD ]
Line_2 $$ protected void setPropertyValue(PropertyTokenHolder tokens, PropertyValue pv) throws BeansException -->Line_3 $$ String propertyName = tokens.canonicalName[ CD ]
Line_49 $$ if (propValue instanceof List) -->Line_76 $$ if (propValue instanceof Map) [ CD ]
Line_27 $$ if (propValue.getClass().isArray()) -->Line_29 $$ Class<?> requiredType = propValue.getClass().getComponentType()[ CD ]
Line_13 $$ propValue = getPropertyValue(getterTokens)-->Line_43 $$ propValue = getPropertyValue(actualName)[ FD ]
Line_52 $$ List<Object> list = (List<Object>) propValue-->Line_55 $$ if (isExtractOldValueForEditor() && index < list.size()) [ FD ]
Line_106 $$ Object originalValue = pv.getValue()-->Line_124 $$ valueToApply = convertForProperty(propertyName, oldValue, originalValue, ph.toTypeDescriptor())[ FD ]
Line_13 $$ propValue = getPropertyValue(getterTokens)-->Line_37 $$ int length = Array.getLength(propValue)[ FD ]
Line_5 $$ if (tokens.keys != null) -->Line_9 $$ getterTokens.keys = new String[tokens.keys.length - 1][ CD ]
Line_28 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)-->Line_78 $$ Class<?> mapKeyType = ph.getMapKeyType(tokens.keys.length)[ FD ]
Line_13 $$ propValue = getPropertyValue(getterTokens)-->Line_76 $$ if (propValue instanceof Map) [ FD ]
Line_3 $$ String propertyName = tokens.canonicalName-->Line_87 $$ Object convertedMapValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), mapValueType, ph.nested(tokens.keys.length))[ FD ]
Line_19 $$ if (isAutoGrowNestedPaths()) -->Line_20 $$ int lastKeyIndex = tokens.canonicalName.lastIndexOf('[')[ CD ]
Line_49 $$ if (propValue instanceof List) -->Line_51 $$ Class<?> requiredType = ph.getCollectionType(tokens.keys.length)[ CD ]
Line_4 $$ String actualName = tokens.actualName-->Line_42 $$ setPropertyValue(actualName, newArray)[ FD ]
Line_27 $$ if (propValue.getClass().isArray()) -->Line_30 $$ int arrayIndex = Integer.parseInt(key)[ CD ]
Line_2 $$ protected void setPropertyValue(PropertyTokenHolder tokens, PropertyValue pv) throws BeansException -->Line_4 $$ String actualName = tokens.actualName[ CD ]
Line_52 $$ List<Object> list = (List<Object>) propValue-->Line_56 $$ oldValue = list.get(index)[ FD ]
Line_78 $$ Class<?> mapKeyType = ph.getMapKeyType(tokens.keys.length)-->Line_81 $$ TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(mapKeyType)[ FD ]
Line_11 $$ Object propValue-->Line_41 $$ System.arraycopy(propValue, 0, newArray, 0, length)[ FD ]
Line_2 $$ protected void setPropertyValue(PropertyTokenHolder tokens, PropertyValue pv) throws BeansException -->Line_143 $$ PropertyChangeEvent pce = new PropertyChangeEvent(this.rootObject, this.nestedPath + propertyName, oldValue, pv.getValue())[ FD ]
Line_87 $$ Object convertedMapValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), mapValueType, ph.nested(tokens.keys.length))-->Line_88 $$ map.put(convertedMapKey, convertedMapValue)[ FD ]
Line_2 $$ protected void setPropertyValue(PropertyTokenHolder tokens, PropertyValue pv) throws BeansException -->Line_106 $$ Object originalValue = pv.getValue()[ FD ]
Line_22 $$ propValue = setDefaultValue(getterTokens)-->Line_27 $$ if (propValue.getClass().isArray()) [ FD ]
Line_4 $$ String actualName = tokens.actualName-->Line_28 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)[ FD ]
Line_13 $$ propValue = getPropertyValue(getterTokens)-->Line_45 $$ Array.set(propValue, arrayIndex, convertedValue)[ FD ]
Line_108 $$ if (!Boolean.FALSE.equals(pv.conversionNecessary)) -->Line_126 $$ pv.getOriginalPropertyValue().conversionNecessary = (valueToApply != originalValue)[ CD ]
Line_28 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)-->Line_58 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))[ FD ]
Line_2 $$ protected void setPropertyValue(PropertyTokenHolder tokens, PropertyValue pv) throws BeansException -->Line_132 $$ PropertyChangeEvent propertyChangeEvent = new PropertyChangeEvent(this.rootObject, this.nestedPath + propertyName, oldValue, pv.getValue())[ FD ]
Line_56 $$ oldValue = list.get(index)-->Line_85 $$ oldValue = map.get(convertedMapKey)[ FD ]
Line_133 $$ if (ex.getTargetException() instanceof ClassCastException) -->Line_136 $$ Throwable cause = ex.getTargetException()[ CD ]
Line_3 $$ String propertyName = tokens.canonicalName-->Line_36 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))[ FD ]
Line_27 $$ if (propValue.getClass().isArray()) -->Line_28 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)[ CD ]
Line_52 $$ List<Object> list = (List<Object>) propValue-->Line_68 $$ list.add(convertedValue)[ FD ]
Line_52 $$ List<Object> list = (List<Object>) propValue-->Line_71 $$ list.set(index, convertedValue)[ FD ]
Line_2 $$ protected void setPropertyValue(PropertyTokenHolder tokens, PropertyValue pv) throws BeansException -->Line_87 $$ Object convertedMapValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), mapValueType, ph.nested(tokens.keys.length))[ FD ]
Line_133 $$ if (ex.getTargetException() instanceof ClassCastException) -->Line_137 $$ if (cause instanceof UndeclaredThrowableException) [ CD ]
Line_109 $$ if (pv.isConverted()) -->Line_110 $$ valueToApply = pv.getConvertedValue()[ CD ]
Line_22 $$ propValue = setDefaultValue(getterTokens)-->Line_45 $$ Array.set(propValue, arrayIndex, convertedValue)[ FD ]
Line_110 $$ valueToApply = pv.getConvertedValue()-->Line_124 $$ valueToApply = convertForProperty(propertyName, oldValue, originalValue, ph.toTypeDescriptor())[ FD ]
Line_5 $$ if (tokens.keys != null) -->Line_6 $$ PropertyTokenHolder getterTokens = new PropertyTokenHolder()[ CD ]
Line_5 $$ if (tokens.keys != null) -->Line_94 $$ if (ph == null || !ph.isWritable()) [ CD ]
Line_22 $$ propValue = setDefaultValue(getterTokens)-->Line_39 $$ Class<?> componentType = propValue.getClass().getComponentType()[ FD ]
Line_53 $$ int index = Integer.parseInt(key)-->Line_71 $$ list.set(index, convertedValue)[ FD ]
Line_11 $$ Object propValue-->Line_27 $$ if (propValue.getClass().isArray()) [ FD ]
Line_2 $$ protected void setPropertyValue(PropertyTokenHolder tokens, PropertyValue pv) throws BeansException -->Line_109 $$ if (pv.isConverted()) [ FD ]
Line_13 $$ propValue = getPropertyValue(getterTokens)-->Line_39 $$ Class<?> componentType = propValue.getClass().getComponentType()[ FD ]
Line_38 $$ if (arrayIndex >= length && arrayIndex < this.autoGrowCollectionLimit) -->Line_42 $$ setPropertyValue(actualName, newArray)[ CD ]
Line_5 $$ if (tokens.keys != null) -->Line_17 $$ String key = tokens.keys[tokens.keys.length - 1][ CD ]
Line_29 $$ Class<?> requiredType = propValue.getClass().getComponentType()-->Line_58 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))[ FD ]
Line_31 $$ Object oldValue = null-->Line_124 $$ valueToApply = convertForProperty(propertyName, oldValue, originalValue, ph.toTypeDescriptor())[ FD ]
Line_28 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)-->Line_114 $$ oldValue = ph.getValue()[ FD ]
Line_30 $$ int arrayIndex = Integer.parseInt(key)-->Line_34 $$ oldValue = Array.get(propValue, arrayIndex)[ FD ]
Line_76 $$ if (propValue instanceof Map) -->Line_80 $$ Map<Object, Object> map = (Map<Object, Object>) propValue[ CD ]
Line_34 $$ oldValue = Array.get(propValue, arrayIndex)-->Line_114 $$ oldValue = ph.getValue()[ FD ]
Line_38 $$ if (arrayIndex >= length && arrayIndex < this.autoGrowCollectionLimit) -->Line_39 $$ Class<?> componentType = propValue.getClass().getComponentType()[ CD ]
Line_53 $$ int index = Integer.parseInt(key)-->Line_61 $$ for (int i = size; i < index; i++) [ FD ]
Line_2 $$ protected void setPropertyValue(PropertyTokenHolder tokens, PropertyValue pv) throws BeansException -->Line_36 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))[ FD ]
Line_11 $$ Object propValue-->Line_13 $$ propValue = getPropertyValue(getterTokens)[ FD ]
Line_40 $$ Object newArray = Array.newInstance(componentType, arrayIndex + 1)-->Line_41 $$ System.arraycopy(propValue, 0, newArray, 0, length)[ FD ]
Line_55 $$ if (isExtractOldValueForEditor() && index < list.size()) -->Line_56 $$ oldValue = list.get(index)[ CD ]
Line_76 $$ if (propValue instanceof Map) -->Line_79 $$ Class<?> mapValueType = ph.getMapValueType(tokens.keys.length)[ CD ]
Line_11 $$ Object propValue-->Line_29 $$ Class<?> requiredType = propValue.getClass().getComponentType()[ FD ]
Line_76 $$ if (propValue instanceof Map) -->Line_84 $$ if (isExtractOldValueForEditor()) [ CD ]
Line_6 $$ PropertyTokenHolder getterTokens = new PropertyTokenHolder()-->Line_22 $$ propValue = setDefaultValue(getterTokens)[ FD ]
Line_11 $$ Object propValue-->Line_37 $$ int length = Array.getLength(propValue)[ FD ]
Line_36 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))-->Line_45 $$ Array.set(propValue, arrayIndex, convertedValue)[ FD ]
Line_22 $$ propValue = setDefaultValue(getterTokens)-->Line_76 $$ if (propValue instanceof Map) [ FD ]
Line_116 $$ if (ex instanceof PrivilegedActionException) -->Line_117 $$ ex = ((PrivilegedActionException) ex).getException()[ CD ]
Line_4 $$ String actualName = tokens.actualName-->Line_77 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)[ FD ]
Line_49 $$ if (propValue instanceof List) -->Line_53 $$ int index = Integer.parseInt(key)[ CD ]
Line_28 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)-->Line_36 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))[ FD ]
Line_56 $$ oldValue = list.get(index)-->Line_58 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))[ FD ]
Line_60 $$ if (index >= size && index < this.autoGrowCollectionLimit) -->Line_68 $$ list.add(convertedValue)[ CD ]
Line_124 $$ valueToApply = convertForProperty(propertyName, oldValue, originalValue, ph.toTypeDescriptor())-->Line_128 $$ ph.setValue(object, valueToApply)[ FD ]
Line_2 $$ protected void setPropertyValue(PropertyTokenHolder tokens, PropertyValue pv) throws BeansException -->Line_110 $$ valueToApply = pv.getConvertedValue()[ FD ]
Line_11 $$ Object propValue-->Line_76 $$ if (propValue instanceof Map) [ FD ]
Line_3 $$ String propertyName = tokens.canonicalName-->Line_124 $$ valueToApply = convertForProperty(propertyName, oldValue, originalValue, ph.toTypeDescriptor())[ FD ]
Line_52 $$ List<Object> list = (List<Object>) propValue-->Line_59 $$ int size = list.size()[ FD ]
Line_27 $$ if (propValue.getClass().isArray()) -->Line_31 $$ Object oldValue = null[ CD ]
Line_94 $$ if (ph == null || !ph.isWritable()) -->Line_95 $$ if (pv.isOptional()) [ CD ]
Line_17 $$ String key = tokens.keys[tokens.keys.length - 1]-->Line_30 $$ int arrayIndex = Integer.parseInt(key)[ FD ]
Line_79 $$ Class<?> mapValueType = ph.getMapValueType(tokens.keys.length)-->Line_87 $$ Object convertedMapValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), mapValueType, ph.nested(tokens.keys.length))[ FD ]
Line_34 $$ oldValue = Array.get(propValue, arrayIndex)-->Line_85 $$ oldValue = map.get(convertedMapKey)[ FD ]
Line_31 $$ Object oldValue = null-->Line_114 $$ oldValue = ph.getValue()[ FD ]
Line_4 $$ String actualName = tokens.actualName-->Line_93 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)[ FD ]
Line_4 $$ String actualName = tokens.actualName-->Line_50 $$ PropertyHandler ph = getPropertyHandler(actualName)[ FD ]
Line_28 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)-->Line_124 $$ valueToApply = convertForProperty(propertyName, oldValue, originalValue, ph.toTypeDescriptor())[ FD ]
Line_5 $$ if (tokens.keys != null) -->Line_8 $$ getterTokens.actualName = tokens.actualName[ CD ]
Line_22 $$ propValue = setDefaultValue(getterTokens)-->Line_29 $$ Class<?> requiredType = propValue.getClass().getComponentType()[ FD ]
Line_13 $$ propValue = getPropertyValue(getterTokens)-->Line_18 $$ if (propValue == null) [ FD ]
Line_28 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)-->Line_94 $$ if (ph == null || !ph.isWritable()) [ FD ]
Line_11 $$ Object propValue-->Line_49 $$ if (propValue instanceof List) [ FD ]
Line_109 $$ if (pv.isConverted()) -->Line_112 $$ if (isExtractOldValueForEditor() && ph.isReadable()) [ CD ]
Line_11 $$ Object propValue-->Line_18 $$ if (propValue == null) [ FD ]
Line_80 $$ Map<Object, Object> map = (Map<Object, Object>) propValue-->Line_85 $$ oldValue = map.get(convertedMapKey)[ FD ]
Line_85 $$ oldValue = map.get(convertedMapKey)-->Line_87 $$ Object convertedMapValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), mapValueType, ph.nested(tokens.keys.length))[ FD ]
Line_34 $$ oldValue = Array.get(propValue, arrayIndex)-->Line_36 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))[ FD ]
Line_18 $$ if (propValue == null) -->Line_19 $$ if (isAutoGrowNestedPaths()) [ CD ]
Line_11 $$ Object propValue-->Line_45 $$ Array.set(propValue, arrayIndex, convertedValue)[ FD ]
Line_43 $$ propValue = getPropertyValue(actualName)-->Line_49 $$ if (propValue instanceof List) [ FD ]
Line_17 $$ String key = tokens.keys[tokens.keys.length - 1]-->Line_53 $$ int index = Integer.parseInt(key)[ FD ]
Line_38 $$ if (arrayIndex >= length && arrayIndex < this.autoGrowCollectionLimit) -->Line_43 $$ propValue = getPropertyValue(actualName)[ CD ]
Line_34 $$ oldValue = Array.get(propValue, arrayIndex)-->Line_56 $$ oldValue = list.get(index)[ FD ]
Line_19 $$ if (isAutoGrowNestedPaths()) -->Line_21 $$ getterTokens.canonicalName = tokens.canonicalName.substring(0, lastKeyIndex)[ CD ]
Line_33 $$ if (isExtractOldValueForEditor() && arrayIndex < Array.getLength(propValue)) -->Line_34 $$ oldValue = Array.get(propValue, arrayIndex)[ CD ]
Line_40 $$ Object newArray = Array.newInstance(componentType, arrayIndex + 1)-->Line_42 $$ setPropertyValue(actualName, newArray)[ FD ]
Line_36 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))-->Line_71 $$ list.set(index, convertedValue)[ FD ]
Line_85 $$ oldValue = map.get(convertedMapKey)-->Line_114 $$ oldValue = ph.getValue()[ FD ]
Line_2 $$ protected void setPropertyValue(PropertyTokenHolder tokens, PropertyValue pv) throws BeansException -->Line_126 $$ pv.getOriginalPropertyValue().conversionNecessary = (valueToApply != originalValue)[ FD ]
Line_19 $$ if (isAutoGrowNestedPaths()) -->Line_22 $$ propValue = setDefaultValue(getterTokens)[ CD ]
Line_22 $$ propValue = setDefaultValue(getterTokens)-->Line_49 $$ if (propValue instanceof List) [ FD ]
Line_49 $$ if (propValue instanceof List) -->Line_50 $$ PropertyHandler ph = getPropertyHandler(actualName)[ CD ]
Line_49 $$ if (propValue instanceof List) -->Line_59 $$ int size = list.size()[ CD ]
Line_31 $$ Object oldValue = null-->Line_56 $$ oldValue = list.get(index)[ FD ]
Line_49 $$ if (propValue instanceof List) -->Line_55 $$ if (isExtractOldValueForEditor() && index < list.size()) [ CD ]
Line_30 $$ int arrayIndex = Integer.parseInt(key)-->Line_45 $$ Array.set(propValue, arrayIndex, convertedValue)[ FD ]
Line_6 $$ PropertyTokenHolder getterTokens = new PropertyTokenHolder()-->Line_13 $$ propValue = getPropertyValue(getterTokens)[ FD ]
Line_43 $$ propValue = getPropertyValue(actualName)-->Line_76 $$ if (propValue instanceof Map) [ FD ]
Line_56 $$ oldValue = list.get(index)-->Line_87 $$ Object convertedMapValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), mapValueType, ph.nested(tokens.keys.length))[ FD ]
Line_29 $$ Class<?> requiredType = propValue.getClass().getComponentType()-->Line_36 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))[ FD ]
Line_2 $$ protected void setPropertyValue(PropertyTokenHolder tokens, PropertyValue pv) throws BeansException -->Line_5 $$ if (tokens.keys != null) [ CD ]
Line_13 $$ propValue = getPropertyValue(getterTokens)-->Line_41 $$ System.arraycopy(propValue, 0, newArray, 0, length)[ FD ]
Line_49 $$ if (propValue instanceof List) -->Line_60 $$ if (index >= size && index < this.autoGrowCollectionLimit) [ CD ]
Line_85 $$ oldValue = map.get(convertedMapKey)-->Line_124 $$ valueToApply = convertForProperty(propertyName, oldValue, originalValue, ph.toTypeDescriptor())[ FD ]
Line_34 $$ oldValue = Array.get(propValue, arrayIndex)-->Line_87 $$ Object convertedMapValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), mapValueType, ph.nested(tokens.keys.length))[ FD ]
Line_76 $$ if (propValue instanceof Map) -->Line_82 $$ Object convertedMapKey = convertIfNecessary(null, null, key, mapKeyType, typeDescriptor)[ CD ]
Line_34 $$ oldValue = Array.get(propValue, arrayIndex)-->Line_58 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))[ FD ]
Line_137 $$ if (cause instanceof UndeclaredThrowableException) -->Line_138 $$ cause = cause.getCause()[ CD ]
Line_31 $$ Object oldValue = null-->Line_85 $$ oldValue = map.get(convertedMapKey)[ FD ]
Line_76 $$ if (propValue instanceof Map) -->Line_87 $$ Object convertedMapValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), mapValueType, ph.nested(tokens.keys.length))[ CD ]
Line_3 $$ String propertyName = tokens.canonicalName-->Line_58 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))[ FD ]
Line_36 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))-->Line_68 $$ list.add(convertedValue)[ FD ]
Line_107 $$ Object valueToApply = originalValue-->Line_124 $$ valueToApply = convertForProperty(propertyName, oldValue, originalValue, ph.toTypeDescriptor())[ FD ]
Line_11 $$ Object propValue-->Line_22 $$ propValue = setDefaultValue(getterTokens)[ FD ]
Line_5 $$ if (tokens.keys != null) -->Line_7 $$ getterTokens.canonicalName = tokens.canonicalName[ CD ]
Line_28 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)-->Line_51 $$ Class<?> requiredType = ph.getCollectionType(tokens.keys.length)[ FD ]
Line_13 $$ propValue = getPropertyValue(getterTokens)-->Line_22 $$ propValue = setDefaultValue(getterTokens)[ FD ]
Line_49 $$ if (propValue instanceof List) -->Line_58 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))[ CD ]
Line_28 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)-->Line_87 $$ Object convertedMapValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), mapValueType, ph.nested(tokens.keys.length))[ FD ]
Line_22 $$ propValue = setDefaultValue(getterTokens)-->Line_37 $$ int length = Array.getLength(propValue)[ FD ]
Line_13 $$ propValue = getPropertyValue(getterTokens)-->Line_27 $$ if (propValue.getClass().isArray()) [ FD ]
Line_4 $$ String actualName = tokens.actualName-->Line_43 $$ propValue = getPropertyValue(actualName)[ FD ]
Line_76 $$ if (propValue instanceof Map) -->Line_78 $$ Class<?> mapKeyType = ph.getMapKeyType(tokens.keys.length)[ CD ]
Line_114 $$ oldValue = ph.getValue()-->Line_124 $$ valueToApply = convertForProperty(propertyName, oldValue, originalValue, ph.toTypeDescriptor())[ FD ]
Line_11 $$ Object propValue-->Line_43 $$ propValue = getPropertyValue(actualName)[ FD ]
Line_28 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)-->Line_112 $$ if (isExtractOldValueForEditor() && ph.isReadable()) [ FD ]
Line_28 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)-->Line_128 $$ ph.setValue(object, valueToApply)[ FD ]
Line_11 $$ Object propValue-->Line_34 $$ oldValue = Array.get(propValue, arrayIndex)[ FD ]
Line_52 $$ List<Object> list = (List<Object>) propValue-->Line_63 $$ list.add(null)[ FD ]
Line_80 $$ Map<Object, Object> map = (Map<Object, Object>) propValue-->Line_88 $$ map.put(convertedMapKey, convertedMapValue)[ FD ]
Line_22 $$ propValue = setDefaultValue(getterTokens)-->Line_33 $$ if (isExtractOldValueForEditor() && arrayIndex < Array.getLength(propValue)) [ FD ]
Line_5 $$ if (tokens.keys != null) -->Line_10 $$ System.arraycopy(tokens.keys, 0, getterTokens.keys, 0, tokens.keys.length - 1)[ CD ]
Line_31 $$ Object oldValue = null-->Line_34 $$ oldValue = Array.get(propValue, arrayIndex)[ FD ]
Line_28 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)-->Line_79 $$ Class<?> mapValueType = ph.getMapValueType(tokens.keys.length)[ FD ]
Line_56 $$ oldValue = list.get(index)-->Line_124 $$ valueToApply = convertForProperty(propertyName, oldValue, originalValue, ph.toTypeDescriptor())[ FD ]
Line_76 $$ if (propValue instanceof Map) -->Line_88 $$ map.put(convertedMapKey, convertedMapValue)[ CD ]
Line_84 $$ if (isExtractOldValueForEditor()) -->Line_85 $$ oldValue = map.get(convertedMapKey)[ CD ]
Line_107 $$ Object valueToApply = originalValue-->Line_128 $$ ph.setValue(object, valueToApply)[ FD ]
Line_20 $$ int lastKeyIndex = tokens.canonicalName.lastIndexOf('[')-->Line_21 $$ getterTokens.canonicalName = tokens.canonicalName.substring(0, lastKeyIndex)[ FD ]
Line_110 $$ valueToApply = pv.getConvertedValue()-->Line_128 $$ ph.setValue(object, valueToApply)[ FD ]
Line_81 $$ TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(mapKeyType)-->Line_82 $$ Object convertedMapKey = convertIfNecessary(null, null, key, mapKeyType, typeDescriptor)[ FD ]
Line_5 $$ if (tokens.keys != null) -->Line_93 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)[ CD ]
Line_39 $$ Class<?> componentType = propValue.getClass().getComponentType()-->Line_40 $$ Object newArray = Array.newInstance(componentType, arrayIndex + 1)[ FD ]
Line_109 $$ if (pv.isConverted()) -->Line_124 $$ valueToApply = convertForProperty(propertyName, oldValue, originalValue, ph.toTypeDescriptor())[ CD ]
Line_5 $$ if (tokens.keys != null) -->Line_27 $$ if (propValue.getClass().isArray()) [ CD ]
Line_31 $$ Object oldValue = null-->Line_87 $$ Object convertedMapValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), mapValueType, ph.nested(tokens.keys.length))[ FD ]
Line_11 $$ Object propValue-->Line_39 $$ Class<?> componentType = propValue.getClass().getComponentType()[ FD ]
Line_119 $$ if (logger.isDebugEnabled()) -->Line_120 $$ logger.debug("Could not read previous value of property '" + this.nestedPath + propertyName + "'", ex)[ CD ]
Line_60 $$ if (index >= size && index < this.autoGrowCollectionLimit) -->Line_61 $$ for (int i = size; i < index; i++) [ CD ]
Line_38 $$ if (arrayIndex >= length && arrayIndex < this.autoGrowCollectionLimit) -->Line_41 $$ System.arraycopy(propValue, 0, newArray, 0, length)[ CD ]
Line_2 $$ protected void setPropertyValue(PropertyTokenHolder tokens, PropertyValue pv) throws BeansException -->Line_58 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))[ FD ]
Line_43 $$ propValue = getPropertyValue(actualName)-->Line_45 $$ Array.set(propValue, arrayIndex, convertedValue)[ FD ]
Line_107 $$ Object valueToApply = originalValue-->Line_110 $$ valueToApply = pv.getConvertedValue()[ FD ]
Line_78 $$ Class<?> mapKeyType = ph.getMapKeyType(tokens.keys.length)-->Line_82 $$ Object convertedMapKey = convertIfNecessary(null, null, key, mapKeyType, typeDescriptor)[ FD ]
