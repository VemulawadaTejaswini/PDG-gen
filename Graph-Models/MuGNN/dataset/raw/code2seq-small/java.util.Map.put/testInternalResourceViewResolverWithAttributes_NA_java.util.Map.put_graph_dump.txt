Line_7 $$ InternalResourceViewResolver vr = new InternalResourceViewResolver()-->Line_21 $$ view = vr.resolveViewName("example2", Locale.getDefault())[ FD ]
Line_7 $$ InternalResourceViewResolver vr = new InternalResourceViewResolver()-->Line_10 $$ vr.setAttributes(props)[ FD ]
Line_15 $$ View view = vr.resolveViewName("example1", Locale.getDefault())-->Line_22 $$ assertEquals("Correct view class", JstlView.class, view.getClass())[ FD ]
Line_18 $$ Map attributes = ((InternalResourceView) view).getStaticAttributes()-->Line_20 $$ assertEquals(new Integer(2), attributes.get("key2"))[ FD ]
Line_4 $$ StaticWebApplicationContext wac = new StaticWebApplicationContext()-->Line_29 $$ request.setAttribute(DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE, wac)[ FD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_9 $$ props.setProperty("key1", "value1")[ CD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_22 $$ assertEquals("Correct view class", JstlView.class, view.getClass())[ CD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_13 $$ vr.setAttributesMap(map)[ CD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_24 $$ attributes = ((InternalResourceView) view).getStaticAttributes()[ CD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_34 $$ view.render(model, request, response)[ CD ]
Line_24 $$ attributes = ((InternalResourceView) view).getStaticAttributes()-->Line_26 $$ assertEquals(new Integer(2), attributes.get("key2"))[ FD ]
Line_28 $$ HttpServletResponse response = new MockHttpServletResponse()-->Line_34 $$ view.render(model, request, response)[ FD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_16 $$ assertEquals("Correct view class", JstlView.class, view.getClass())[ CD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_14 $$ vr.setApplicationContext(wac)[ CD ]
Line_32 $$ TestBean tb = new TestBean()-->Line_33 $$ model.put("tb", tb)[ FD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_19 $$ assertEquals("value1", attributes.get("key1"))[ CD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_36 $$ assertTrue("Correct rc attribute", request.getAttribute("rc") == null)[ CD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_18 $$ Map attributes = ((InternalResourceView) view).getStaticAttributes()[ CD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_7 $$ InternalResourceViewResolver vr = new InternalResourceViewResolver()[ CD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_3 $$ MockServletContext sc = new MockServletContext()[ CD ]
Line_27 $$ MockHttpServletRequest request = new MockHttpServletRequest(sc)-->Line_34 $$ view.render(model, request, response)[ FD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_38 $$ assertEquals(new Integer(2), request.getAttribute("key2"))[ CD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_11 $$ Map map = new HashMap()[ CD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_26 $$ assertEquals(new Integer(2), attributes.get("key2"))[ CD ]
Line_32 $$ TestBean tb = new TestBean()-->Line_35 $$ assertTrue("Correct tb attribute", tb.equals(request.getAttribute("tb")))[ FD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_29 $$ request.setAttribute(DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE, wac)[ CD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_25 $$ assertEquals("value1", attributes.get("key1"))[ CD ]
Line_27 $$ MockHttpServletRequest request = new MockHttpServletRequest(sc)-->Line_36 $$ assertTrue("Correct rc attribute", request.getAttribute("rc") == null)[ FD ]
Line_27 $$ MockHttpServletRequest request = new MockHttpServletRequest(sc)-->Line_35 $$ assertTrue("Correct tb attribute", tb.equals(request.getAttribute("tb")))[ FD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_30 $$ request.setAttribute(DispatcherServlet.LOCALE_RESOLVER_ATTRIBUTE, new AcceptHeaderLocaleResolver())[ CD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_23 $$ assertEquals("Correct URL", "example2", ((InternalResourceView) view).getUrl())[ CD ]
Line_8 $$ Properties props = new Properties()-->Line_9 $$ props.setProperty("key1", "value1")[ FD ]
Line_7 $$ InternalResourceViewResolver vr = new InternalResourceViewResolver()-->Line_15 $$ View view = vr.resolveViewName("example1", Locale.getDefault())[ FD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_17 $$ assertEquals("Correct URL", "example1", ((InternalResourceView) view).getUrl())[ CD ]
Line_18 $$ Map attributes = ((InternalResourceView) view).getStaticAttributes()-->Line_25 $$ assertEquals("value1", attributes.get("key1"))[ FD ]
Line_18 $$ Map attributes = ((InternalResourceView) view).getStaticAttributes()-->Line_19 $$ assertEquals("value1", attributes.get("key1"))[ FD ]
Line_7 $$ InternalResourceViewResolver vr = new InternalResourceViewResolver()-->Line_14 $$ vr.setApplicationContext(wac)[ FD ]
Line_15 $$ View view = vr.resolveViewName("example1", Locale.getDefault())-->Line_21 $$ view = vr.resolveViewName("example2", Locale.getDefault())[ FD ]
Line_21 $$ view = vr.resolveViewName("example2", Locale.getDefault())-->Line_22 $$ assertEquals("Correct view class", JstlView.class, view.getClass())[ FD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_12 $$ map.put("key2", new Integer(2))[ CD ]
Line_4 $$ StaticWebApplicationContext wac = new StaticWebApplicationContext()-->Line_14 $$ vr.setApplicationContext(wac)[ FD ]
Line_21 $$ view = vr.resolveViewName("example2", Locale.getDefault())-->Line_34 $$ view.render(model, request, response)[ FD ]
Line_11 $$ Map map = new HashMap()-->Line_13 $$ vr.setAttributesMap(map)[ FD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_37 $$ assertEquals("value1", request.getAttribute("key1"))[ CD ]
Line_11 $$ Map map = new HashMap()-->Line_12 $$ map.put("key2", new Integer(2))[ FD ]
Line_31 $$ Map model = new HashMap()-->Line_34 $$ view.render(model, request, response)[ FD ]
Line_27 $$ MockHttpServletRequest request = new MockHttpServletRequest(sc)-->Line_37 $$ assertEquals("value1", request.getAttribute("key1"))[ FD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_33 $$ model.put("tb", tb)[ CD ]
Line_31 $$ Map model = new HashMap()-->Line_33 $$ model.put("tb", tb)[ FD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_15 $$ View view = vr.resolveViewName("example1", Locale.getDefault())[ CD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_5 $$ wac.setServletContext(sc)[ CD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_10 $$ vr.setAttributes(props)[ CD ]
Line_15 $$ View view = vr.resolveViewName("example1", Locale.getDefault())-->Line_16 $$ assertEquals("Correct view class", JstlView.class, view.getClass())[ FD ]
Line_4 $$ StaticWebApplicationContext wac = new StaticWebApplicationContext()-->Line_6 $$ wac.refresh()[ FD ]
Line_18 $$ Map attributes = ((InternalResourceView) view).getStaticAttributes()-->Line_24 $$ attributes = ((InternalResourceView) view).getStaticAttributes()[ FD ]
Line_18 $$ Map attributes = ((InternalResourceView) view).getStaticAttributes()-->Line_26 $$ assertEquals(new Integer(2), attributes.get("key2"))[ FD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_21 $$ view = vr.resolveViewName("example2", Locale.getDefault())[ CD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_28 $$ HttpServletResponse response = new MockHttpServletResponse()[ CD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_27 $$ MockHttpServletRequest request = new MockHttpServletRequest(sc)[ CD ]
Line_8 $$ Properties props = new Properties()-->Line_10 $$ vr.setAttributes(props)[ FD ]
Line_27 $$ MockHttpServletRequest request = new MockHttpServletRequest(sc)-->Line_29 $$ request.setAttribute(DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE, wac)[ FD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_20 $$ assertEquals(new Integer(2), attributes.get("key2"))[ CD ]
Line_27 $$ MockHttpServletRequest request = new MockHttpServletRequest(sc)-->Line_38 $$ assertEquals(new Integer(2), request.getAttribute("key2"))[ FD ]
Line_4 $$ StaticWebApplicationContext wac = new StaticWebApplicationContext()-->Line_5 $$ wac.setServletContext(sc)[ FD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_8 $$ Properties props = new Properties()[ CD ]
Line_7 $$ InternalResourceViewResolver vr = new InternalResourceViewResolver()-->Line_13 $$ vr.setAttributesMap(map)[ FD ]
Line_24 $$ attributes = ((InternalResourceView) view).getStaticAttributes()-->Line_25 $$ assertEquals("value1", attributes.get("key1"))[ FD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_31 $$ Map model = new HashMap()[ CD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_35 $$ assertTrue("Correct tb attribute", tb.equals(request.getAttribute("tb")))[ CD ]
Line_15 $$ View view = vr.resolveViewName("example1", Locale.getDefault())-->Line_34 $$ view.render(model, request, response)[ FD ]
Line_3 $$ MockServletContext sc = new MockServletContext()-->Line_5 $$ wac.setServletContext(sc)[ FD ]
Line_27 $$ MockHttpServletRequest request = new MockHttpServletRequest(sc)-->Line_30 $$ request.setAttribute(DispatcherServlet.LOCALE_RESOLVER_ATTRIBUTE, new AcceptHeaderLocaleResolver())[ FD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_32 $$ TestBean tb = new TestBean()[ CD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_6 $$ wac.refresh()[ CD ]
Line_2 $$ public void testInternalResourceViewResolverWithAttributes() throws Exception -->Line_4 $$ StaticWebApplicationContext wac = new StaticWebApplicationContext()[ CD ]
