Line_2 $$ public void testExists() throws Exception -->Line_27 $$ final long numDocs = sources.length[ CD ]
Line_28 $$ SearchResponse allDocs = client().prepareSearch("idx").setSize(sources.length).get()-->Line_30 $$ assertHitCount(allDocs, numDocs)[ FD ]
Line_32 $$ final String fieldName = entry.getKey()-->Line_34 $$ SearchResponse resp = client().prepareSearch("idx").setQuery(QueryBuilders.existsQuery(fieldName)).execute().actionGet()[ FD ]
Line_2 $$ public void testExists() throws Exception -->Line_16 $$ indexRandom(true, false, reqs)[ CD ]
Line_2 $$ public void testExists() throws Exception -->Line_6 $$ barObject.put("foo", "bar")[ CD ]
Line_2 $$ public void testExists() throws Exception -->Line_30 $$ assertHitCount(allDocs, numDocs)[ CD ]
Line_12 $$ List<IndexRequestBuilder> reqs = new ArrayList<IndexRequestBuilder>()-->Line_16 $$ indexRandom(true, false, reqs)[ FD ]
Line_2 $$ public void testExists() throws Exception -->Line_26 $$ ensureYellow("idx")[ CD ]
Line_17 $$ final Map<String, Integer> expected = new LinkedHashMap<String, Integer>()-->Line_19 $$ expected.put("f*", 1)[ FD ]
Line_39 $$ for (SearchHit searchHit : allDocs.getHits()) -->Line_44 $$ logger.info("Explanation for [[ FD ]
Line_32 $$ final String fieldName = entry.getKey()-->Line_44 $$ logger.info("Explanation for [[ FD ]
Line_31 $$ for (Map.Entry<String, Integer> entry : expected.entrySet()) -->Line_33 $$ final int count = entry.getValue()[ FD ]
Line_32 $$ final String fieldName = entry.getKey()-->Line_43 $$ final ExplainResponse explanation = client().prepareExplain(index, type, id).setQuery(QueryBuilders.existsQuery(fieldName)).get()[ FD ]
Line_2 $$ public void testExists() throws Exception -->Line_21 $$ expected.put("bar.*", 2)[ CD ]
Line_17 $$ final Map<String, Integer> expected = new LinkedHashMap<String, Integer>()-->Line_24 $$ expected.put("bar.bar.bar", 1)[ FD ]
Line_17 $$ final Map<String, Integer> expected = new LinkedHashMap<String, Integer>()-->Line_31 $$ for (Map.Entry<String, Integer> entry : expected.entrySet()) [ FD ]
Line_32 $$ final String fieldName = entry.getKey()-->Line_37 $$ assertEquals(String.format(Locale.ROOT, "exists(%s, %d) mapping: %s response: %s", fieldName, count, mapping.string(), resp), count, resp.getHits().totalHits())[ FD ]
Line_5 $$ Map<String, Object> barObject = new HashMap()-->Line_7 $$ barObject.put("bar", singletonMap("bar", "foo"))[ FD ]
Line_33 $$ final int count = entry.getValue()-->Line_37 $$ assertEquals(String.format(Locale.ROOT, "exists(%s, %d) mapping: %s response: %s", fieldName, count, mapping.string(), resp), count, resp.getHits().totalHits())[ FD ]
Line_40 $$ final String index = searchHit.getIndex()-->Line_43 $$ final ExplainResponse explanation = client().prepareExplain(index, type, id).setQuery(QueryBuilders.existsQuery(fieldName)).get()[ FD ]
Line_2 $$ public void testExists() throws Exception -->Line_12 $$ List<IndexRequestBuilder> reqs = new ArrayList<IndexRequestBuilder>()[ CD ]
Line_17 $$ final Map<String, Integer> expected = new LinkedHashMap<String, Integer>()-->Line_25 $$ expected.put("foobar", 0)[ FD ]
Line_42 $$ final String id = searchHit.getId()-->Line_43 $$ final ExplainResponse explanation = client().prepareExplain(index, type, id).setQuery(QueryBuilders.existsQuery(fieldName)).get()[ FD ]
Line_17 $$ final Map<String, Integer> expected = new LinkedHashMap<String, Integer>()-->Line_22 $$ expected.put("bar.foo", 1)[ FD ]
Line_3 $$ XContentBuilder mapping = XContentBuilder.builder(JsonXContent.jsonXContent).startObject().startObject("type").startObject(FieldNamesFieldMapper.NAME).field("enabled", randomBoolean()).endObject().startObject("properties").startObject("foo").field("type", "string").endObject().startObject("bar").field("type", "object").startObject("properties").startObject("foo").field("type", "string").endObject().startObject("bar").field("type", "object").startObject("properties").startObject("bar").field("type", "string").endObject().endObject().endObject().startObject("baz").field("type", "long").endObject().endObject().endObject().endObject().endObject().endObject()-->Line_4 $$ assertAcked(client().admin().indices().prepareCreate("idx").addMapping("type", mapping))[ FD ]
Line_5 $$ Map<String, Object> barObject = new HashMap()-->Line_6 $$ barObject.put("foo", "bar")[ FD ]
Line_17 $$ final Map<String, Integer> expected = new LinkedHashMap<String, Integer>()-->Line_23 $$ expected.put("bar.bar", 1)[ FD ]
Line_39 $$ for (SearchHit searchHit : allDocs.getHits()) -->Line_40 $$ final String index = searchHit.getIndex()[ FD ]
Line_39 $$ for (SearchHit searchHit : allDocs.getHits()) -->Line_42 $$ final String id = searchHit.getId()[ FD ]
Line_2 $$ public void testExists() throws Exception -->Line_22 $$ expected.put("bar.foo", 1)[ CD ]
Line_28 $$ SearchResponse allDocs = client().prepareSearch("idx").setSize(sources.length).get()-->Line_29 $$ assertSearchResponse(allDocs)[ FD ]
Line_2 $$ public void testExists() throws Exception -->Line_5 $$ Map<String, Object> barObject = new HashMap()[ CD ]
Line_2 $$ public void testExists() throws Exception -->Line_25 $$ expected.put("foobar", 0)[ CD ]
Line_5 $$ Map<String, Object> barObject = new HashMap()-->Line_8 $$ final Map<String, Object>[] sources = new Map[] [ FD ]
Line_2 $$ public void testExists() throws Exception -->Line_17 $$ final Map<String, Integer> expected = new LinkedHashMap<String, Integer>()[ CD ]
Line_27 $$ final long numDocs = sources.length-->Line_30 $$ assertHitCount(allDocs, numDocs)[ FD ]
Line_39 $$ for (SearchHit searchHit : allDocs.getHits()) -->Line_41 $$ final String type = searchHit.getType()[ FD ]
Line_17 $$ final Map<String, Integer> expected = new LinkedHashMap<String, Integer>()-->Line_18 $$ expected.put("foo", 1)[ FD ]
Line_34 $$ SearchResponse resp = client().prepareSearch("idx").setQuery(QueryBuilders.existsQuery(fieldName)).execute().actionGet()-->Line_35 $$ assertSearchResponse(resp)[ FD ]
Line_2 $$ public void testExists() throws Exception -->Line_20 $$ expected.put("bar", 2)[ CD ]
Line_17 $$ final Map<String, Integer> expected = new LinkedHashMap<String, Integer>()-->Line_20 $$ expected.put("bar", 2)[ FD ]
Line_2 $$ public void testExists() throws Exception -->Line_8 $$ final Map<String, Object>[] sources = new Map[] [ CD ]
Line_17 $$ final Map<String, Integer> expected = new LinkedHashMap<String, Integer>()-->Line_21 $$ expected.put("bar.*", 2)[ FD ]
Line_3 $$ XContentBuilder mapping = XContentBuilder.builder(JsonXContent.jsonXContent).startObject().startObject("type").startObject(FieldNamesFieldMapper.NAME).field("enabled", randomBoolean()).endObject().startObject("properties").startObject("foo").field("type", "string").endObject().startObject("bar").field("type", "object").startObject("properties").startObject("foo").field("type", "string").endObject().startObject("bar").field("type", "object").startObject("properties").startObject("bar").field("type", "string").endObject().endObject().endObject().startObject("baz").field("type", "long").endObject().endObject().endObject().endObject().endObject().endObject()-->Line_37 $$ assertEquals(String.format(Locale.ROOT, "exists(%s, %d) mapping: %s response: %s", fieldName, count, mapping.string(), resp), count, resp.getHits().totalHits())[ FD ]
Line_2 $$ public void testExists() throws Exception -->Line_24 $$ expected.put("bar.bar.bar", 1)[ CD ]
Line_2 $$ public void testExists() throws Exception -->Line_3 $$ XContentBuilder mapping = XContentBuilder.builder(JsonXContent.jsonXContent).startObject().startObject("type").startObject(FieldNamesFieldMapper.NAME).field("enabled", randomBoolean()).endObject().startObject("properties").startObject("foo").field("type", "string").endObject().startObject("bar").field("type", "object").startObject("properties").startObject("foo").field("type", "string").endObject().startObject("bar").field("type", "object").startObject("properties").startObject("bar").field("type", "string").endObject().endObject().endObject().startObject("baz").field("type", "long").endObject().endObject().endObject().endObject().endObject().endObject()[ CD ]
Line_43 $$ final ExplainResponse explanation = client().prepareExplain(index, type, id).setQuery(QueryBuilders.existsQuery(fieldName)).get()-->Line_44 $$ logger.info("Explanation for [[ FD ]
Line_12 $$ List<IndexRequestBuilder> reqs = new ArrayList<IndexRequestBuilder>()-->Line_14 $$ reqs.add(client().prepareIndex("idx", "type").setSource(source))[ FD ]
Line_2 $$ public void testExists() throws Exception -->Line_19 $$ expected.put("f*", 1)[ CD ]
Line_34 $$ SearchResponse resp = client().prepareSearch("idx").setQuery(QueryBuilders.existsQuery(fieldName)).execute().actionGet()-->Line_37 $$ assertEquals(String.format(Locale.ROOT, "exists(%s, %d) mapping: %s response: %s", fieldName, count, mapping.string(), resp), count, resp.getHits().totalHits())[ FD ]
Line_42 $$ final String id = searchHit.getId()-->Line_44 $$ logger.info("Explanation for [[ FD ]
Line_2 $$ public void testExists() throws Exception -->Line_18 $$ expected.put("foo", 1)[ CD ]
Line_2 $$ public void testExists() throws Exception -->Line_28 $$ SearchResponse allDocs = client().prepareSearch("idx").setSize(sources.length).get()[ CD ]
Line_2 $$ public void testExists() throws Exception -->Line_4 $$ assertAcked(client().admin().indices().prepareCreate("idx").addMapping("type", mapping))[ CD ]
Line_41 $$ final String type = searchHit.getType()-->Line_43 $$ final ExplainResponse explanation = client().prepareExplain(index, type, id).setQuery(QueryBuilders.existsQuery(fieldName)).get()[ FD ]
Line_2 $$ public void testExists() throws Exception -->Line_29 $$ assertSearchResponse(allDocs)[ CD ]
Line_28 $$ SearchResponse allDocs = client().prepareSearch("idx").setSize(sources.length).get()-->Line_39 $$ for (SearchHit searchHit : allDocs.getHits()) [ FD ]
Line_2 $$ public void testExists() throws Exception -->Line_7 $$ barObject.put("bar", singletonMap("bar", "foo"))[ CD ]
Line_2 $$ public void testExists() throws Exception -->Line_23 $$ expected.put("bar.bar", 1)[ CD ]
Line_13 $$ for (Map<String, Object> source : sources) -->Line_14 $$ reqs.add(client().prepareIndex("idx", "type").setSource(source))[ FD ]
Line_31 $$ for (Map.Entry<String, Integer> entry : expected.entrySet()) -->Line_32 $$ final String fieldName = entry.getKey()[ FD ]
