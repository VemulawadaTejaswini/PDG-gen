Line_2 $$ public void testGenericMapWithKeyTypeFactoryMethod() throws MalformedURLException -->Line_6 $$ Map<String, String> input = new HashMap<String, String>()[ CD ]
Line_2 $$ public void testGenericMapWithKeyTypeFactoryMethod() throws MalformedURLException -->Line_8 $$ input.put("6", "7")[ CD ]
Line_2 $$ public void testGenericMapWithKeyTypeFactoryMethod() throws MalformedURLException -->Line_4 $$ RootBeanDefinition rbd = new RootBeanDefinition(GenericBean.class)[ CD ]
Line_2 $$ public void testGenericMapWithKeyTypeFactoryMethod() throws MalformedURLException -->Line_7 $$ input.put("4", "5")[ CD ]
Line_6 $$ Map<String, String> input = new HashMap<String, String>()-->Line_7 $$ input.put("4", "5")[ FD ]
Line_2 $$ public void testGenericMapWithKeyTypeFactoryMethod() throws MalformedURLException -->Line_9 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(input)[ CD ]
Line_11 $$ GenericBean<?> gb = (GenericBean<?>) bf.getBean("genericBean")-->Line_12 $$ assertEquals("5", gb.getLongMap().get(new Long("4")))[ FD ]
Line_11 $$ GenericBean<?> gb = (GenericBean<?>) bf.getBean("genericBean")-->Line_13 $$ assertEquals("7", gb.getLongMap().get(new Long("6")))[ FD ]
Line_4 $$ RootBeanDefinition rbd = new RootBeanDefinition(GenericBean.class)-->Line_5 $$ rbd.setFactoryMethodName("createInstance")[ FD ]
Line_4 $$ RootBeanDefinition rbd = new RootBeanDefinition(GenericBean.class)-->Line_9 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(input)[ FD ]
Line_4 $$ RootBeanDefinition rbd = new RootBeanDefinition(GenericBean.class)-->Line_10 $$ bf.registerBeanDefinition("genericBean", rbd)[ FD ]
Line_6 $$ Map<String, String> input = new HashMap<String, String>()-->Line_8 $$ input.put("6", "7")[ FD ]
Line_6 $$ Map<String, String> input = new HashMap<String, String>()-->Line_9 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(input)[ FD ]
Line_2 $$ public void testGenericMapWithKeyTypeFactoryMethod() throws MalformedURLException -->Line_12 $$ assertEquals("5", gb.getLongMap().get(new Long("4")))[ CD ]
Line_2 $$ public void testGenericMapWithKeyTypeFactoryMethod() throws MalformedURLException -->Line_13 $$ assertEquals("7", gb.getLongMap().get(new Long("6")))[ CD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_10 $$ bf.registerBeanDefinition("genericBean", rbd)[ FD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_11 $$ GenericBean<?> gb = (GenericBean<?>) bf.getBean("genericBean")[ FD ]
Line_2 $$ public void testGenericMapWithKeyTypeFactoryMethod() throws MalformedURLException -->Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()[ CD ]
Line_2 $$ public void testGenericMapWithKeyTypeFactoryMethod() throws MalformedURLException -->Line_5 $$ rbd.setFactoryMethodName("createInstance")[ CD ]
Line_2 $$ public void testGenericMapWithKeyTypeFactoryMethod() throws MalformedURLException -->Line_10 $$ bf.registerBeanDefinition("genericBean", rbd)[ CD ]
Line_2 $$ public void testGenericMapWithKeyTypeFactoryMethod() throws MalformedURLException -->Line_11 $$ GenericBean<?> gb = (GenericBean<?>) bf.getBean("genericBean")[ CD ]
