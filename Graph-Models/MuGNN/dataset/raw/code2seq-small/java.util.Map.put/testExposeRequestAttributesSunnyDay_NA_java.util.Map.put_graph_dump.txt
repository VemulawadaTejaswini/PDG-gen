Line_3 $$ MockPortletRequest request = new MockPortletRequest()-->Line_8 $$ assertEquals("Rick Hunter", request.getAttribute("ace"))[ FD ]
Line_4 $$ Map<String, String> attributes = new HashMap<String, String>()-->Line_7 $$ PortletUtils.exposeRequestAttributes(request, attributes)[ FD ]
Line_2 $$ public void testExposeRequestAttributesSunnyDay() throws Exception -->Line_7 $$ PortletUtils.exposeRequestAttributes(request, attributes)[ CD ]
Line_4 $$ Map<String, String> attributes = new HashMap<String, String>()-->Line_5 $$ attributes.put("ace", "Rick Hunter")[ FD ]
Line_2 $$ public void testExposeRequestAttributesSunnyDay() throws Exception -->Line_8 $$ assertEquals("Rick Hunter", request.getAttribute("ace"))[ CD ]
Line_3 $$ MockPortletRequest request = new MockPortletRequest()-->Line_7 $$ PortletUtils.exposeRequestAttributes(request, attributes)[ FD ]
Line_2 $$ public void testExposeRequestAttributesSunnyDay() throws Exception -->Line_5 $$ attributes.put("ace", "Rick Hunter")[ CD ]
Line_2 $$ public void testExposeRequestAttributesSunnyDay() throws Exception -->Line_3 $$ MockPortletRequest request = new MockPortletRequest()[ CD ]
Line_2 $$ public void testExposeRequestAttributesSunnyDay() throws Exception -->Line_4 $$ Map<String, String> attributes = new HashMap<String, String>()[ CD ]
Line_2 $$ public void testExposeRequestAttributesSunnyDay() throws Exception -->Line_6 $$ attributes.put("mentor", "Roy Fokker")[ CD ]
Line_2 $$ public void testExposeRequestAttributesSunnyDay() throws Exception -->Line_9 $$ assertEquals("Roy Fokker", request.getAttribute("mentor"))[ CD ]
Line_4 $$ Map<String, String> attributes = new HashMap<String, String>()-->Line_6 $$ attributes.put("mentor", "Roy Fokker")[ FD ]
Line_3 $$ MockPortletRequest request = new MockPortletRequest()-->Line_9 $$ assertEquals("Roy Fokker", request.getAttribute("mentor"))[ FD ]
