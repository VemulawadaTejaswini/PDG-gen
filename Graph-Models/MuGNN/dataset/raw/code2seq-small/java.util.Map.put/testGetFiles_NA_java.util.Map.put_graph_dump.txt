Line_16 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_18 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_2 $$ public void testGetFiles() throws Exception -->Line_5 $$ Path remoteFilePath2 = Paths.get("remoteFile2")[ CD ]
Line_2 $$ public void testGetFiles() throws Exception -->Line_4 $$ Path remoteFilePath1 = Paths.get("remoteFile1")[ CD ]
Line_5 $$ Path remoteFilePath2 = Paths.get("remoteFile2")-->Line_8 $$ pathMap.put(remoteFilePath2, Paths.get("localFile2"))[ FD ]
Line_2 $$ public void testGetFiles() throws Exception -->Line_10 $$ Path tempFilePath = FileServerTestUtil.createFileWithData(Paths.get("tempFile"))[ CD ]
Line_5 $$ Path remoteFilePath2 = Paths.get("remoteFile2")-->Line_15 $$ Assert.assertTrue(_asyncBroker.takeWithResult(remoteFilePath2, new FileResponse(remoteFilePath2, FileResponse.FILE_NOT_FOUND, -1, false)))[ FD ]
Line_21 $$ Map<Path, Path> resultPathMap = noticeableFuture.get()-->Line_22 $$ Assert.assertEquals(1, resultPathMap.size())[ FD ]
Line_2 $$ public void testGetFiles() throws Exception -->Line_13 $$ Assert.assertTrue(_asyncBroker.takeWithResult(remoteFilePath1, fileResponse1))[ CD ]
Line_6 $$ Path localFilePath = FileServerTestUtil.registerForCleanUp(Paths.get("localFile1"))-->Line_7 $$ pathMap.put(remoteFilePath1, localFilePath)[ FD ]
Line_2 $$ public void testGetFiles() throws Exception -->Line_22 $$ Assert.assertEquals(1, resultPathMap.size())[ CD ]
Line_3 $$ Map<Path, Path> pathMap = new HashMap()-->Line_9 $$ NoticeableFuture<Map<Path, Path>> noticeableFuture = _nettyRepository.getFiles(_embeddedChannel, pathMap, true)[ FD ]
Line_4 $$ Path remoteFilePath1 = Paths.get("remoteFile1")-->Line_23 $$ Assert.assertEquals(localFilePath, resultPathMap.get(remoteFilePath1))[ FD ]
Line_3 $$ Map<Path, Path> pathMap = new HashMap()-->Line_7 $$ pathMap.put(remoteFilePath1, localFilePath)[ FD ]
Line_10 $$ Path tempFilePath = FileServerTestUtil.createFileWithData(Paths.get("tempFile"))-->Line_11 $$ FileResponse fileResponse1 = new FileResponse(remoteFilePath1, Files.size(tempFilePath), -1, false)[ FD ]
Line_4 $$ Path remoteFilePath1 = Paths.get("remoteFile1")-->Line_7 $$ pathMap.put(remoteFilePath1, localFilePath)[ FD ]
Line_2 $$ public void testGetFiles() throws Exception -->Line_8 $$ pathMap.put(remoteFilePath2, Paths.get("localFile2"))[ CD ]
Line_16 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_17 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_2 $$ public void testGetFiles() throws Exception -->Line_9 $$ NoticeableFuture<Map<Path, Path>> noticeableFuture = _nettyRepository.getFiles(_embeddedChannel, pathMap, true)[ CD ]
Line_10 $$ Path tempFilePath = FileServerTestUtil.createFileWithData(Paths.get("tempFile"))-->Line_12 $$ fileResponse1.setLocalFile(tempFilePath)[ FD ]
Line_21 $$ Map<Path, Path> resultPathMap = noticeableFuture.get()-->Line_23 $$ Assert.assertEquals(localFilePath, resultPathMap.get(remoteFilePath1))[ FD ]
Line_2 $$ public void testGetFiles() throws Exception -->Line_3 $$ Map<Path, Path> pathMap = new HashMap()[ CD ]
Line_2 $$ public void testGetFiles() throws Exception -->Line_12 $$ fileResponse1.setLocalFile(tempFilePath)[ CD ]
Line_4 $$ Path remoteFilePath1 = Paths.get("remoteFile1")-->Line_13 $$ Assert.assertTrue(_asyncBroker.takeWithResult(remoteFilePath1, fileResponse1))[ FD ]
Line_11 $$ FileResponse fileResponse1 = new FileResponse(remoteFilePath1, Files.size(tempFilePath), -1, false)-->Line_12 $$ fileResponse1.setLocalFile(tempFilePath)[ FD ]
Line_2 $$ public void testGetFiles() throws Exception -->Line_7 $$ pathMap.put(remoteFilePath1, localFilePath)[ CD ]
Line_2 $$ public void testGetFiles() throws Exception -->Line_23 $$ Assert.assertEquals(localFilePath, resultPathMap.get(remoteFilePath1))[ CD ]
Line_11 $$ FileResponse fileResponse1 = new FileResponse(remoteFilePath1, Files.size(tempFilePath), -1, false)-->Line_13 $$ Assert.assertTrue(_asyncBroker.takeWithResult(remoteFilePath1, fileResponse1))[ FD ]
Line_9 $$ NoticeableFuture<Map<Path, Path>> noticeableFuture = _nettyRepository.getFiles(_embeddedChannel, pathMap, true)-->Line_21 $$ Map<Path, Path> resultPathMap = noticeableFuture.get()[ FD ]
Line_6 $$ Path localFilePath = FileServerTestUtil.registerForCleanUp(Paths.get("localFile1"))-->Line_23 $$ Assert.assertEquals(localFilePath, resultPathMap.get(remoteFilePath1))[ FD ]
Line_2 $$ public void testGetFiles() throws Exception -->Line_11 $$ FileResponse fileResponse1 = new FileResponse(remoteFilePath1, Files.size(tempFilePath), -1, false)[ CD ]
Line_14 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyRepository.class.getName(), Level.WARNING)) -->Line_16 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_18 $$ LogRecord logRecord = logRecords.get(0)-->Line_19 $$ Assert.assertEquals("Remote file remoteFile2 is not found", logRecord.getMessage())[ FD ]
Line_2 $$ public void testGetFiles() throws Exception -->Line_6 $$ Path localFilePath = FileServerTestUtil.registerForCleanUp(Paths.get("localFile1"))[ CD ]
Line_3 $$ Map<Path, Path> pathMap = new HashMap()-->Line_8 $$ pathMap.put(remoteFilePath2, Paths.get("localFile2"))[ FD ]
Line_2 $$ public void testGetFiles() throws Exception -->Line_21 $$ Map<Path, Path> resultPathMap = noticeableFuture.get()[ CD ]
