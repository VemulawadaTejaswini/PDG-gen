Line_2 $$ private void addEdgeDirectInternal(int direction, StatEdge edge, int edgetype) -->Line_5 $$ List<StatEdge> lst = mapEdges.get(edgetype)[ FD ]
Line_2 $$ private void addEdgeDirectInternal(int direction, StatEdge edge, int edgetype) -->Line_14 $$ lstStates.add(direction == DIRECTION_BACKWARD ? edge.getSource() : edge.getDestination())[ CD ]
Line_2 $$ private void addEdgeDirectInternal(int direction, StatEdge edge, int edgetype) -->Line_11 $$ if (lstStates == null) [ CD ]
Line_2 $$ private void addEdgeDirectInternal(int direction, StatEdge edge, int edgetype) -->Line_12 $$ mapStates.put(edgetype, lstStates = new ArrayList<Statement>())[ FD ]
Line_2 $$ private void addEdgeDirectInternal(int direction, StatEdge edge, int edgetype) -->Line_3 $$ Map<Integer, List<StatEdge>> mapEdges = direction == DIRECTION_BACKWARD ? mapPredEdges : mapSuccEdges[ CD ]
Line_11 $$ if (lstStates == null) -->Line_12 $$ mapStates.put(edgetype, lstStates = new ArrayList<Statement>())[ CD ]
Line_2 $$ private void addEdgeDirectInternal(int direction, StatEdge edge, int edgetype) -->Line_5 $$ List<StatEdge> lst = mapEdges.get(edgetype)[ CD ]
Line_10 $$ List<Statement> lstStates = mapStates.get(edgetype)-->Line_14 $$ lstStates.add(direction == DIRECTION_BACKWARD ? edge.getSource() : edge.getDestination())[ FD ]
Line_2 $$ private void addEdgeDirectInternal(int direction, StatEdge edge, int edgetype) -->Line_10 $$ List<Statement> lstStates = mapStates.get(edgetype)[ CD ]
Line_10 $$ List<Statement> lstStates = mapStates.get(edgetype)-->Line_11 $$ if (lstStates == null) [ FD ]
Line_2 $$ private void addEdgeDirectInternal(int direction, StatEdge edge, int edgetype) -->Line_9 $$ lst.add(edge)[ CD ]
Line_5 $$ List<StatEdge> lst = mapEdges.get(edgetype)-->Line_9 $$ lst.add(edge)[ FD ]
Line_10 $$ List<Statement> lstStates = mapStates.get(edgetype)-->Line_12 $$ mapStates.put(edgetype, lstStates = new ArrayList<Statement>())[ FD ]
Line_5 $$ List<StatEdge> lst = mapEdges.get(edgetype)-->Line_6 $$ if (lst == null) [ FD ]
Line_12 $$ mapStates.put(edgetype, lstStates = new ArrayList<Statement>())-->Line_14 $$ lstStates.add(direction == DIRECTION_BACKWARD ? edge.getSource() : edge.getDestination())[ FD ]
Line_2 $$ private void addEdgeDirectInternal(int direction, StatEdge edge, int edgetype) -->Line_7 $$ mapEdges.put(edgetype, lst = new ArrayList<StatEdge>())[ FD ]
Line_7 $$ mapEdges.put(edgetype, lst = new ArrayList<StatEdge>())-->Line_9 $$ lst.add(edge)[ FD ]
Line_2 $$ private void addEdgeDirectInternal(int direction, StatEdge edge, int edgetype) -->Line_9 $$ lst.add(edge)[ FD ]
Line_5 $$ List<StatEdge> lst = mapEdges.get(edgetype)-->Line_7 $$ mapEdges.put(edgetype, lst = new ArrayList<StatEdge>())[ FD ]
Line_2 $$ private void addEdgeDirectInternal(int direction, StatEdge edge, int edgetype) -->Line_10 $$ List<Statement> lstStates = mapStates.get(edgetype)[ FD ]
Line_3 $$ Map<Integer, List<StatEdge>> mapEdges = direction == DIRECTION_BACKWARD ? mapPredEdges : mapSuccEdges-->Line_5 $$ List<StatEdge> lst = mapEdges.get(edgetype)[ FD ]
Line_3 $$ Map<Integer, List<StatEdge>> mapEdges = direction == DIRECTION_BACKWARD ? mapPredEdges : mapSuccEdges-->Line_7 $$ mapEdges.put(edgetype, lst = new ArrayList<StatEdge>())[ FD ]
Line_6 $$ if (lst == null) -->Line_7 $$ mapEdges.put(edgetype, lst = new ArrayList<StatEdge>())[ CD ]
Line_2 $$ private void addEdgeDirectInternal(int direction, StatEdge edge, int edgetype) -->Line_6 $$ if (lst == null) [ CD ]
Line_2 $$ private void addEdgeDirectInternal(int direction, StatEdge edge, int edgetype) -->Line_4 $$ Map<Integer, List<Statement>> mapStates = direction == DIRECTION_BACKWARD ? mapPredStates : mapSuccStates[ CD ]
Line_2 $$ private void addEdgeDirectInternal(int direction, StatEdge edge, int edgetype) -->Line_14 $$ lstStates.add(direction == DIRECTION_BACKWARD ? edge.getSource() : edge.getDestination())[ FD ]
Line_4 $$ Map<Integer, List<Statement>> mapStates = direction == DIRECTION_BACKWARD ? mapPredStates : mapSuccStates-->Line_10 $$ List<Statement> lstStates = mapStates.get(edgetype)[ FD ]
Line_4 $$ Map<Integer, List<Statement>> mapStates = direction == DIRECTION_BACKWARD ? mapPredStates : mapSuccStates-->Line_12 $$ mapStates.put(edgetype, lstStates = new ArrayList<Statement>())[ FD ]
