Line_2 $$ public static synchronized void retryServerConnection(long syncAccountId, long delay) -->Line_8 $$ scheduledFuture = _scheduledExecutorService.schedule(retryServerConnectionEvent, delay, TimeUnit.MILLISECONDS)[ CD ]
Line_2 $$ public static synchronized void retryServerConnection(long syncAccountId, long delay) -->Line_3 $$ ScheduledFuture scheduledFuture = _retryServerConnectionScheduledFutures.get(syncAccountId)[ CD ]
Line_3 $$ ScheduledFuture scheduledFuture = _retryServerConnectionScheduledFutures.get(syncAccountId)-->Line_4 $$ if (scheduledFuture != null) [ FD ]
Line_2 $$ public static synchronized void retryServerConnection(long syncAccountId, long delay) -->Line_9 $$ _retryServerConnectionScheduledFutures.put(syncAccountId, scheduledFuture)[ FD ]
Line_4 $$ if (scheduledFuture != null) -->Line_5 $$ scheduledFuture.cancel(false)[ CD ]
Line_2 $$ public static synchronized void retryServerConnection(long syncAccountId, long delay) -->Line_8 $$ scheduledFuture = _scheduledExecutorService.schedule(retryServerConnectionEvent, delay, TimeUnit.MILLISECONDS)[ FD ]
Line_2 $$ public static synchronized void retryServerConnection(long syncAccountId, long delay) -->Line_3 $$ ScheduledFuture scheduledFuture = _retryServerConnectionScheduledFutures.get(syncAccountId)[ FD ]
Line_8 $$ scheduledFuture = _scheduledExecutorService.schedule(retryServerConnectionEvent, delay, TimeUnit.MILLISECONDS)-->Line_9 $$ _retryServerConnectionScheduledFutures.put(syncAccountId, scheduledFuture)[ FD ]
Line_3 $$ ScheduledFuture scheduledFuture = _retryServerConnectionScheduledFutures.get(syncAccountId)-->Line_5 $$ scheduledFuture.cancel(false)[ FD ]
Line_2 $$ public static synchronized void retryServerConnection(long syncAccountId, long delay) -->Line_7 $$ RetryServerConnectionEvent retryServerConnectionEvent = new RetryServerConnectionEvent(syncAccountId, Collections.<String, Object>emptyMap())[ CD ]
Line_3 $$ ScheduledFuture scheduledFuture = _retryServerConnectionScheduledFutures.get(syncAccountId)-->Line_9 $$ _retryServerConnectionScheduledFutures.put(syncAccountId, scheduledFuture)[ FD ]
Line_7 $$ RetryServerConnectionEvent retryServerConnectionEvent = new RetryServerConnectionEvent(syncAccountId, Collections.<String, Object>emptyMap())-->Line_8 $$ scheduledFuture = _scheduledExecutorService.schedule(retryServerConnectionEvent, delay, TimeUnit.MILLISECONDS)[ FD ]
Line_3 $$ ScheduledFuture scheduledFuture = _retryServerConnectionScheduledFutures.get(syncAccountId)-->Line_8 $$ scheduledFuture = _scheduledExecutorService.schedule(retryServerConnectionEvent, delay, TimeUnit.MILLISECONDS)[ FD ]
Line_2 $$ public static synchronized void retryServerConnection(long syncAccountId, long delay) -->Line_4 $$ if (scheduledFuture != null) [ CD ]
Line_2 $$ public static synchronized void retryServerConnection(long syncAccountId, long delay) -->Line_9 $$ _retryServerConnectionScheduledFutures.put(syncAccountId, scheduledFuture)[ CD ]
