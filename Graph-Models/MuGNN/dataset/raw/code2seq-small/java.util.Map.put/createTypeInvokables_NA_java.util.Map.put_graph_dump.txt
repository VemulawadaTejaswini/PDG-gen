Line_2 $$ private void createTypeInvokables(JClassType c, String varName, String methodType, JAbstractMethod[] methodTypes) -->Line_4 $$ pb(varName + "." + methodType.toLowerCase() + "s = new " + methodType + "[] [ FD ]
Line_40 $$ String paramName = (p.getName() + "__" + p.getType().getErasedType().getJNISignature()).replaceAll("[/;\\[\\]]", "_")-->Line_42 $$ parameterName2ParameterInstantiation.put(paramName, paramInstantiation)[ FD ]
Line_5 $$ for (JAbstractMethod m : methodTypes) -->Line_49 $$ pb(stub.isAbstract + ", " + stub.isFinal + ", " + stub.isStatic + ", " + m.isDefaultAccess() + ", " + m.isPrivate() + ", " + m.isProtected() + ", " + m.isPublic() + ", " + stub.isNative + ", " + m.isVarArgs() + ", " + stub.isMethod + ", " + stub.isConstructor + ", " + stub.methodId + "," + getAnnotations(m.getDeclaredAnnotations()) + "),")[ FD ]
Line_5 $$ for (JAbstractMethod m : methodTypes) -->Line_13 $$ stub.isAbstract = m.isMethod().isAbstract()[ FD ]
Line_2 $$ private void createTypeInvokables(JClassType c, String varName, String methodType, JAbstractMethod[] methodTypes) -->Line_18 $$ logger.log(Type.INFO, "Skipping non-visible constructor for class " + c.getName())[ FD ]
Line_3 $$ if (methodTypes != null && methodTypes.length > 0) -->Line_51 $$ pb("};")[ CD ]
Line_5 $$ for (JAbstractMethod m : methodTypes) -->Line_15 $$ stub.isFinal = m.isMethod().isFinal()[ FD ]
Line_2 $$ private void createTypeInvokables(JClassType c, String varName, String methodType, JAbstractMethod[] methodTypes) -->Line_3 $$ if (methodTypes != null && methodTypes.length > 0) [ CD ]
Line_9 $$ if (m.isMethod() != null) -->Line_11 $$ stub.returnType = getType(m.isMethod().getReturnType())[ CD ]
Line_9 $$ if (m.isMethod() != null) -->Line_15 $$ stub.isFinal = m.isMethod().isFinal()[ CD ]
Line_5 $$ for (JAbstractMethod m : methodTypes) -->Line_7 $$ stub.isPublic = m.isPublic()[ FD ]
Line_17 $$ if (m.isPrivate() || m.isDefaultAccess()) -->Line_18 $$ logger.log(Type.INFO, "Skipping non-visible constructor for class " + c.getName())[ CD ]
Line_41 $$ String paramInstantiation = "new Parameter(\"" + p.getName() + "\", " + getType(p.getType()) + ", \"" + p.getType().getJNISignature() + "\")"-->Line_42 $$ parameterName2ParameterInstantiation.put(paramName, paramInstantiation)[ FD ]
Line_9 $$ if (m.isMethod() != null) -->Line_10 $$ stub.isMethod = true[ CD ]
Line_2 $$ private void createTypeInvokables(JClassType c, String varName, String methodType, JAbstractMethod[] methodTypes) -->Line_22 $$ logger.log(Type.INFO, "Skipping non-public constructor for final class" + c.getName())[ FD ]
Line_9 $$ if (m.isMethod() != null) -->Line_21 $$ if (m.getEnclosingType().isFinal() && !m.isPublic()) [ CD ]
Line_5 $$ for (JAbstractMethod m : methodTypes) -->Line_12 $$ stub.isStatic = m.isMethod().isStatic()[ FD ]
Line_3 $$ if (methodTypes != null && methodTypes.length > 0) -->Line_4 $$ pb(varName + "." + methodType.toLowerCase() + "s = new " + methodType + "[] [ CD ]
Line_5 $$ for (JAbstractMethod m : methodTypes) -->Line_32 $$ pbn("    new " + methodType + "(\"" + m.getName() + "\", ")[ FD ]
Line_37 $$ for (JParameter p : m.getParameters()) -->Line_39 $$ stub.jnsi += p.getType().getErasedType().getJNISignature()[ FD ]
Line_35 $$ if (m.getParameters() != null && m.getParameters().length > 0) -->Line_47 $$ pbn("EMPTY_PARAMETERS,")[ CD ]
Line_2 $$ private void createTypeInvokables(JClassType c, String varName, String methodType, JAbstractMethod[] methodTypes) -->Line_8 $$ stub.enclosingType = getType(c)[ FD ]
Line_6 $$ MethodStub stub = new MethodStub()-->Line_31 $$ methodStubs.add(stub)[ FD ]
Line_37 $$ for (JParameter p : m.getParameters()) -->Line_41 $$ String paramInstantiation = "new Parameter(\"" + p.getName() + "\", " + getType(p.getType()) + ", \"" + p.getType().getJNISignature() + "\")"[ FD ]
Line_9 $$ if (m.isMethod() != null) -->Line_17 $$ if (m.isPrivate() || m.isDefaultAccess()) [ CD ]
Line_9 $$ if (m.isMethod() != null) -->Line_13 $$ stub.isAbstract = m.isMethod().isAbstract()[ CD ]
Line_21 $$ if (m.getEnclosingType().isFinal() && !m.isPublic()) -->Line_22 $$ logger.log(Type.INFO, "Skipping non-public constructor for final class" + c.getName())[ CD ]
Line_5 $$ for (JAbstractMethod m : methodTypes) -->Line_21 $$ if (m.getEnclosingType().isFinal() && !m.isPublic()) [ FD ]
Line_9 $$ if (m.isMethod() != null) -->Line_26 $$ stub.returnType = stub.enclosingType[ CD ]
Line_35 $$ if (m.getParameters() != null && m.getParameters().length > 0) -->Line_36 $$ pbn("new Parameter[] [ CD ]
Line_9 $$ if (m.isMethod() != null) -->Line_12 $$ stub.isStatic = m.isMethod().isStatic()[ CD ]
Line_37 $$ for (JParameter p : m.getParameters()) -->Line_38 $$ stub.parameterTypes.add(getType(p.getType()))[ FD ]
Line_5 $$ for (JAbstractMethod m : methodTypes) -->Line_30 $$ stub.name = m.getName()[ FD ]
Line_37 $$ for (JParameter p : m.getParameters()) -->Line_40 $$ String paramName = (p.getName() + "__" + p.getType().getErasedType().getJNISignature()).replaceAll("[/;\\[\\]]", "_")[ FD ]
Line_9 $$ if (m.isMethod() != null) -->Line_14 $$ stub.isNative = m.isMethod().isAbstract()[ CD ]
Line_5 $$ for (JAbstractMethod m : methodTypes) -->Line_17 $$ if (m.isPrivate() || m.isDefaultAccess()) [ FD ]
Line_5 $$ for (JAbstractMethod m : methodTypes) -->Line_35 $$ if (m.getParameters() != null && m.getParameters().length > 0) [ FD ]
Line_9 $$ if (m.isMethod() != null) -->Line_25 $$ stub.isConstructor = true[ CD ]
Line_35 $$ if (m.getParameters() != null && m.getParameters().length > 0) -->Line_45 $$ pbn("}, ")[ CD ]
Line_5 $$ for (JAbstractMethod m : methodTypes) -->Line_11 $$ stub.returnType = getType(m.isMethod().getReturnType())[ FD ]
Line_5 $$ for (JAbstractMethod m : methodTypes) -->Line_9 $$ if (m.isMethod() != null) [ FD ]
Line_5 $$ for (JAbstractMethod m : methodTypes) -->Line_14 $$ stub.isNative = m.isMethod().isAbstract()[ FD ]
Line_5 $$ for (JAbstractMethod m : methodTypes) -->Line_37 $$ for (JParameter p : m.getParameters()) [ FD ]
