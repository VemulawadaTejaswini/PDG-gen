Line_4 $$ Map<Token, Float> tokenMap = new TreeMap<Token, Float>(tokenMetadata.partitioner.describeOwnership(sortedTokens))-->Line_6 $$ for (Map.Entry<Token, Float> entry : tokenMap.entrySet()) [ FD ]
Line_6 $$ for (Map.Entry<Token, Float> entry : tokenMap.entrySet()) -->Line_7 $$ InetAddress endpoint = tokenMetadata.getEndpoint(entry.getKey())[ FD ]
Line_7 $$ InetAddress endpoint = tokenMetadata.getEndpoint(entry.getKey())-->Line_9 $$ if (nodeMap.containsKey(endpoint))[ FD ]
Line_5 $$ Map<InetAddress, Float> nodeMap = new LinkedHashMap()-->Line_10 $$ nodeMap.put(endpoint, nodeMap.get(endpoint) + tokenOwnership)[ FD ]
Line_5 $$ Map<InetAddress, Float> nodeMap = new LinkedHashMap()-->Line_9 $$ if (nodeMap.containsKey(endpoint))[ FD ]
Line_2 $$ public Map<InetAddress, Float> getOwnership() -->Line_14 $$ return nodeMap[ CD ]
Line_5 $$ Map<InetAddress, Float> nodeMap = new LinkedHashMap()-->Line_12 $$ nodeMap.put(endpoint, tokenOwnership)[ FD ]
Line_2 $$ public Map<InetAddress, Float> getOwnership() -->Line_3 $$ List<Token> sortedTokens = tokenMetadata.sortedTokens()[ CD ]
Line_7 $$ InetAddress endpoint = tokenMetadata.getEndpoint(entry.getKey())-->Line_10 $$ nodeMap.put(endpoint, nodeMap.get(endpoint) + tokenOwnership)[ FD ]
Line_9 $$ if (nodeMap.containsKey(endpoint))-->Line_10 $$ nodeMap.put(endpoint, nodeMap.get(endpoint) + tokenOwnership)[ CD ]
Line_9 $$ if (nodeMap.containsKey(endpoint))-->Line_12 $$ nodeMap.put(endpoint, tokenOwnership)[ CD ]
Line_8 $$ Float tokenOwnership = entry.getValue()-->Line_12 $$ nodeMap.put(endpoint, tokenOwnership)[ FD ]
Line_3 $$ List<Token> sortedTokens = tokenMetadata.sortedTokens()-->Line_4 $$ Map<Token, Float> tokenMap = new TreeMap<Token, Float>(tokenMetadata.partitioner.describeOwnership(sortedTokens))[ FD ]
Line_7 $$ InetAddress endpoint = tokenMetadata.getEndpoint(entry.getKey())-->Line_12 $$ nodeMap.put(endpoint, tokenOwnership)[ FD ]
Line_2 $$ public Map<InetAddress, Float> getOwnership() -->Line_5 $$ Map<InetAddress, Float> nodeMap = new LinkedHashMap()[ CD ]
Line_6 $$ for (Map.Entry<Token, Float> entry : tokenMap.entrySet()) -->Line_8 $$ Float tokenOwnership = entry.getValue()[ FD ]
Line_2 $$ public Map<InetAddress, Float> getOwnership() -->Line_4 $$ Map<Token, Float> tokenMap = new TreeMap<Token, Float>(tokenMetadata.partitioner.describeOwnership(sortedTokens))[ CD ]
