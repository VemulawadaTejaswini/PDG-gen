Line_2 $$ private static void buildDependenciesForModule(final Module module, final Graph<Module> graph, Map<Module, Collection<Module>> map) -->Line_7 $$ for (Iterator<Module> iterator = graph.getIn(m); iterator.hasNext(); ) [ FD ]
Line_8 $$ final Module dep = iterator.next()-->Line_9 $$ if (!deps.contains(dep)) [ FD ]
Line_9 $$ if (!deps.contains(dep)) -->Line_11 $$ traverse(dep)[ CD ]
Line_7 $$ for (Iterator<Module> iterator = graph.getIn(m); iterator.hasNext(); ) -->Line_9 $$ if (!deps.contains(dep)) [ CD ]
Line_5 $$ new Object() -->Line_7 $$ for (Iterator<Module> iterator = graph.getIn(m); iterator.hasNext(); ) [ CD ]
Line_2 $$ private static void buildDependenciesForModule(final Module module, final Graph<Module> graph, Map<Module, Collection<Module>> map) -->Line_5 $$ new Object() [ CD ]
Line_9 $$ if (!deps.contains(dep)) -->Line_10 $$ deps.add(dep)[ CD ]
Line_2 $$ private static void buildDependenciesForModule(final Module module, final Graph<Module> graph, Map<Module, Collection<Module>> map) -->Line_4 $$ map.put(module, deps)[ FD ]
Line_3 $$ final Set<Module> deps = new com.intellij.util.containers.HashSet<Module>()-->Line_9 $$ if (!deps.contains(dep)) [ FD ]
Line_7 $$ for (Iterator<Module> iterator = graph.getIn(m); iterator.hasNext(); ) -->Line_8 $$ final Module dep = iterator.next()[ FD ]
Line_7 $$ for (Iterator<Module> iterator = graph.getIn(m); iterator.hasNext(); ) -->Line_8 $$ final Module dep = iterator.next()[ CD ]
Line_8 $$ final Module dep = iterator.next()-->Line_10 $$ deps.add(dep)[ FD ]
Line_3 $$ final Set<Module> deps = new com.intellij.util.containers.HashSet<Module>()-->Line_4 $$ map.put(module, deps)[ FD ]
Line_2 $$ private static void buildDependenciesForModule(final Module module, final Graph<Module> graph, Map<Module, Collection<Module>> map) -->Line_4 $$ map.put(module, deps)[ CD ]
Line_2 $$ private static void buildDependenciesForModule(final Module module, final Graph<Module> graph, Map<Module, Collection<Module>> map) -->Line_5 $$ new Object() [ FD ]
Line_8 $$ final Module dep = iterator.next()-->Line_11 $$ traverse(dep)[ FD ]
Line_5 $$ new Object() -->Line_7 $$ for (Iterator<Module> iterator = graph.getIn(m); iterator.hasNext(); ) [ FD ]
Line_3 $$ final Set<Module> deps = new com.intellij.util.containers.HashSet<Module>()-->Line_10 $$ deps.add(dep)[ FD ]
Line_2 $$ private static void buildDependenciesForModule(final Module module, final Graph<Module> graph, Map<Module, Collection<Module>> map) -->Line_3 $$ final Set<Module> deps = new com.intellij.util.containers.HashSet<Module>()[ CD ]
