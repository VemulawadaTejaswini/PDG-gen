Line_7 $$ Map<Integer, Boolean> dbexpected = expectationsFactory.getRelate(expectationsFactory.getTestPolygon(), matrix)-->Line_13 $$ dbexpected = expectationsFactory.getRelate(expectationsFactory.getTestPolygon(), matrix)[ FD ]
Line_2 $$ public void relate(String pckg) throws SQLException -->Line_13 $$ dbexpected = expectationsFactory.getRelate(expectationsFactory.getTestPolygon(), matrix)[ CD ]
Line_2 $$ public void relate(String pckg) throws SQLException -->Line_9 $$ Map<String, Object> params = createQueryParams("filter", expectationsFactory.getTestPolygon())[ CD ]
Line_2 $$ public void relate(String pckg) throws SQLException -->Line_6 $$ String matrix = "T*T***T**"[ CD ]
Line_2 $$ public void relate(String pckg) throws SQLException -->Line_8 $$ String hql = format("SELECT id, relate(geom, :filter, :matrix) from org.hibernate.spatial.integration.%s.GeomEntity " + "where relate(geom, :filter, :matrix) = true and srid(geom) = 4326", pckg)[ CD ]
Line_2 $$ public void relate(String pckg) throws SQLException -->Line_3 $$ if (!isSupportedByDialect(SpatialFunction.relate)) [ CD ]
Line_2 $$ public void relate(String pckg) throws SQLException -->Line_14 $$ params.put("matrix", matrix)[ CD ]
Line_2 $$ public void relate(String pckg) throws SQLException -->Line_12 $$ matrix = "FF*FF****"[ CD ]
Line_2 $$ public void relate(String pckg) throws SQLException -->Line_8 $$ String hql = format("SELECT id, relate(geom, :filter, :matrix) from org.hibernate.spatial.integration.%s.GeomEntity " + "where relate(geom, :filter, :matrix) = true and srid(geom) = 4326", pckg)[ FD ]
Line_2 $$ public void relate(String pckg) throws SQLException -->Line_10 $$ params.put("matrix", matrix)[ CD ]
Line_2 $$ public void relate(String pckg) throws SQLException -->Line_15 $$ retrieveHQLResultsAndCompare(dbexpected, hql, params, pckg)[ CD ]
Line_2 $$ public void relate(String pckg) throws SQLException -->Line_15 $$ retrieveHQLResultsAndCompare(dbexpected, hql, params, pckg)[ FD ]
Line_6 $$ String matrix = "T*T***T**"-->Line_13 $$ dbexpected = expectationsFactory.getRelate(expectationsFactory.getTestPolygon(), matrix)[ FD ]
Line_13 $$ dbexpected = expectationsFactory.getRelate(expectationsFactory.getTestPolygon(), matrix)-->Line_15 $$ retrieveHQLResultsAndCompare(dbexpected, hql, params, pckg)[ FD ]
Line_12 $$ matrix = "FF*FF****"-->Line_14 $$ params.put("matrix", matrix)[ FD ]
Line_8 $$ String hql = format("SELECT id, relate(geom, :filter, :matrix) from org.hibernate.spatial.integration.%s.GeomEntity " + "where relate(geom, :filter, :matrix) = true and srid(geom) = 4326", pckg)-->Line_15 $$ retrieveHQLResultsAndCompare(dbexpected, hql, params, pckg)[ FD ]
Line_7 $$ Map<Integer, Boolean> dbexpected = expectationsFactory.getRelate(expectationsFactory.getTestPolygon(), matrix)-->Line_15 $$ retrieveHQLResultsAndCompare(dbexpected, hql, params, pckg)[ FD ]
Line_8 $$ String hql = format("SELECT id, relate(geom, :filter, :matrix) from org.hibernate.spatial.integration.%s.GeomEntity " + "where relate(geom, :filter, :matrix) = true and srid(geom) = 4326", pckg)-->Line_11 $$ retrieveHQLResultsAndCompare(dbexpected, hql, params, pckg)[ FD ]
Line_7 $$ Map<Integer, Boolean> dbexpected = expectationsFactory.getRelate(expectationsFactory.getTestPolygon(), matrix)-->Line_11 $$ retrieveHQLResultsAndCompare(dbexpected, hql, params, pckg)[ FD ]
Line_9 $$ Map<String, Object> params = createQueryParams("filter", expectationsFactory.getTestPolygon())-->Line_11 $$ retrieveHQLResultsAndCompare(dbexpected, hql, params, pckg)[ FD ]
Line_2 $$ public void relate(String pckg) throws SQLException -->Line_7 $$ Map<Integer, Boolean> dbexpected = expectationsFactory.getRelate(expectationsFactory.getTestPolygon(), matrix)[ CD ]
Line_9 $$ Map<String, Object> params = createQueryParams("filter", expectationsFactory.getTestPolygon())-->Line_10 $$ params.put("matrix", matrix)[ FD ]
Line_12 $$ matrix = "FF*FF****"-->Line_13 $$ dbexpected = expectationsFactory.getRelate(expectationsFactory.getTestPolygon(), matrix)[ FD ]
Line_6 $$ String matrix = "T*T***T**"-->Line_10 $$ params.put("matrix", matrix)[ FD ]
Line_2 $$ public void relate(String pckg) throws SQLException -->Line_11 $$ retrieveHQLResultsAndCompare(dbexpected, hql, params, pckg)[ FD ]
Line_9 $$ Map<String, Object> params = createQueryParams("filter", expectationsFactory.getTestPolygon())-->Line_15 $$ retrieveHQLResultsAndCompare(dbexpected, hql, params, pckg)[ FD ]
Line_6 $$ String matrix = "T*T***T**"-->Line_7 $$ Map<Integer, Boolean> dbexpected = expectationsFactory.getRelate(expectationsFactory.getTestPolygon(), matrix)[ FD ]
Line_2 $$ public void relate(String pckg) throws SQLException -->Line_11 $$ retrieveHQLResultsAndCompare(dbexpected, hql, params, pckg)[ CD ]
Line_9 $$ Map<String, Object> params = createQueryParams("filter", expectationsFactory.getTestPolygon())-->Line_14 $$ params.put("matrix", matrix)[ FD ]
Line_6 $$ String matrix = "T*T***T**"-->Line_14 $$ params.put("matrix", matrix)[ FD ]
Line_6 $$ String matrix = "T*T***T**"-->Line_12 $$ matrix = "FF*FF****"[ FD ]
Line_3 $$ if (!isSupportedByDialect(SpatialFunction.relate)) -->Line_4 $$ return[ CD ]
