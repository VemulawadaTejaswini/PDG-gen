Line_23 $$ if (key != null) -->Line_24 $$ cache.put(key, result)[ CD ]
Line_2 $$ public static Set<String> getAllSuperTypes(@NotNull PsiType base, final Project project) -->Line_9 $$ final PsiClass cls = PsiUtil.resolveClassInType(base)[ CD ]
Line_11 $$ if (cls instanceof PsiTypeParameter) -->Line_12 $$ final PsiClass superClass = cls.getSuperClass()[ CD ]
Line_14 $$ if (base instanceof PsiClassType) -->Line_15 $$ key = TypesUtil.getQualifiedName(base)[ CD ]
Line_3 $$ final Map<String, Set<String>> cache = CachedValuesManager.getManager(project).getCachedValue(project, new CachedValueProvider<Map<String, Set<String>>>() -->Line_24 $$ cache.put(key, result)[ FD ]
Line_3 $$ final Map<String, Set<String>> cache = CachedValuesManager.getManager(project).getCachedValue(project, new CachedValueProvider<Map<String, Set<String>>>() -->Line_5 $$ final Map<String, Set<String>> result = ContainerUtil.newConcurrentMap()[ CD ]
Line_2 $$ public static Set<String> getAllSuperTypes(@NotNull PsiType base, final Project project) -->Line_3 $$ final Map<String, Set<String>> cache = CachedValuesManager.getManager(project).getCachedValue(project, new CachedValueProvider<Map<String, Set<String>>>() [ CD ]
Line_5 $$ final Map<String, Set<String>> result = ContainerUtil.newConcurrentMap()-->Line_21 $$ result = ContainerUtil.newHashSet()[ FD ]
Line_5 $$ final Map<String, Set<String>> result = ContainerUtil.newConcurrentMap()-->Line_22 $$ collectSuperTypes(base, result, project)[ FD ]
Line_2 $$ public static Set<String> getAllSuperTypes(@NotNull PsiType base, final Project project) -->Line_11 $$ if (cls instanceof PsiTypeParameter) [ CD ]
Line_20 $$ if (result == null) -->Line_22 $$ collectSuperTypes(base, result, project)[ CD ]
Line_2 $$ public static Set<String> getAllSuperTypes(@NotNull PsiType base, final Project project) -->Line_22 $$ collectSuperTypes(base, result, project)[ FD ]
Line_2 $$ public static Set<String> getAllSuperTypes(@NotNull PsiType base, final Project project) -->Line_3 $$ final Map<String, Set<String>> cache = CachedValuesManager.getManager(project).getCachedValue(project, new CachedValueProvider<Map<String, Set<String>>>() [ FD ]
Line_5 $$ final Map<String, Set<String>> result = ContainerUtil.newConcurrentMap()-->Line_24 $$ cache.put(key, result)[ FD ]
Line_2 $$ public static Set<String> getAllSuperTypes(@NotNull PsiType base, final Project project) -->Line_9 $$ final PsiClass cls = PsiUtil.resolveClassInType(base)[ FD ]
Line_2 $$ public static Set<String> getAllSuperTypes(@NotNull PsiType base, final Project project) -->Line_14 $$ if (base instanceof PsiClassType) [ FD ]
Line_2 $$ public static Set<String> getAllSuperTypes(@NotNull PsiType base, final Project project) -->Line_27 $$ return result[ CD ]
Line_20 $$ if (result == null) -->Line_23 $$ if (key != null) [ CD ]
Line_20 $$ if (result == null) -->Line_21 $$ result = ContainerUtil.newHashSet()[ CD ]
Line_14 $$ if (base instanceof PsiClassType) -->Line_17 $$ key = base.getCanonicalText()[ CD ]
Line_2 $$ public static Set<String> getAllSuperTypes(@NotNull PsiType base, final Project project) -->Line_20 $$ if (result == null) [ CD ]
Line_3 $$ final Map<String, Set<String>> cache = CachedValuesManager.getManager(project).getCachedValue(project, new CachedValueProvider<Map<String, Set<String>>>() -->Line_19 $$ Set<String> result = key == null ? null : cache.get(key)[ FD ]
Line_21 $$ result = ContainerUtil.newHashSet()-->Line_22 $$ collectSuperTypes(base, result, project)[ FD ]
Line_5 $$ final Map<String, Set<String>> result = ContainerUtil.newConcurrentMap()-->Line_6 $$ return Result.create(result, PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT)[ FD ]
Line_2 $$ public static Set<String> getAllSuperTypes(@NotNull PsiType base, final Project project) -->Line_15 $$ key = TypesUtil.getQualifiedName(base)[ FD ]
Line_21 $$ result = ContainerUtil.newHashSet()-->Line_24 $$ cache.put(key, result)[ FD ]
Line_5 $$ final Map<String, Set<String>> result = ContainerUtil.newConcurrentMap()-->Line_20 $$ if (result == null) [ FD ]
Line_3 $$ final Map<String, Set<String>> cache = CachedValuesManager.getManager(project).getCachedValue(project, new CachedValueProvider<Map<String, Set<String>>>() -->Line_6 $$ return Result.create(result, PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT)[ CD ]
Line_2 $$ public static Set<String> getAllSuperTypes(@NotNull PsiType base, final Project project) -->Line_17 $$ key = base.getCanonicalText()[ FD ]
Line_11 $$ if (cls instanceof PsiTypeParameter) -->Line_14 $$ if (base instanceof PsiClassType) [ CD ]
