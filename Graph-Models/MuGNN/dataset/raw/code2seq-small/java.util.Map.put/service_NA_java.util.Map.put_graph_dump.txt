Line_55 $$ for (String name : mockHttpServletResponse.getHeaderNames()) -->Line_56 $$ responseHeaders.put(name, mockHttpServletResponse.getHeader(name))[ FD ]
Line_44 $$ for (Map.Entry<String, String> entry : headers.entrySet()) -->Line_45 $$ String key = entry.getKey()[ FD ]
Line_35 $$ if (data != null) -->Line_37 $$ String contentType = headers.remove(HttpHeaders.CONTENT_TYPE)[ CD ]
Line_25 $$ for (StackTraceElement stackTraceElement : stackTraceElements) -->Line_28 $$ String testName = StringUtil.extractLast(stackTraceElement.getClassName(), CharPool.PERIOD)[ FD ]
Line_46 $$ String value = entry.getValue()-->Line_47 $$ mockHttpServletRequest.addHeader(key, value)[ FD ]
Line_2 $$ public Tuple service(String method, String path, Map<String, String> headers, byte[] data) -->Line_30 $$ headers.put("X-Litmus", testName + ": (" + stackTraceElement.getMethodName() + ":" + stackTraceElement.getLineNumber() + ")")[ FD ]
Line_2 $$ public Tuple service(String method, String path, Map<String, String> headers, byte[] data) -->Line_35 $$ if (data != null) [ FD ]
Line_18 $$ headers = new HashMap()-->Line_20 $$ headers.put(HttpHeaders.USER_AGENT, getUserAgent())[ FD ]
Line_26 $$ String methodName = stackTraceElement.getMethodName()-->Line_27 $$ if (methodName.equals("setUp") || methodName.equals("tearDown") || methodName.startsWith("test")) [ FD ]
Line_27 $$ if (methodName.equals("setUp") || methodName.equals("tearDown") || methodName.startsWith("test")) -->Line_28 $$ String testName = StringUtil.extractLast(stackTraceElement.getClassName(), CharPool.PERIOD)[ CD ]
Line_18 $$ headers = new HashMap()-->Line_37 $$ String contentType = headers.remove(HttpHeaders.CONTENT_TYPE)[ FD ]
Line_2 $$ public Tuple service(String method, String path, Map<String, String> headers, byte[] data) -->Line_62 $$ return null[ CD ]
Line_2 $$ public Tuple service(String method, String path, Map<String, String> headers, byte[] data) -->Line_4 $$ webDAVStorage.setToken("document_library")[ CD ]
Line_3 $$ WebDAVStorage webDAVStorage = new DLWebDAVStorageImpl()-->Line_4 $$ webDAVStorage.setToken("document_library")[ FD ]
Line_2 $$ public Tuple service(String method, String path, Map<String, String> headers, byte[] data) -->Line_36 $$ mockHttpServletRequest.setContent(data)[ FD ]
Line_35 $$ if (data != null) -->Line_38 $$ if (contentType != null) [ CD ]
Line_44 $$ for (Map.Entry<String, String> entry : headers.entrySet()) -->Line_46 $$ String value = entry.getValue()[ FD ]
Line_8 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest(method, requestURI)-->Line_39 $$ mockHttpServletRequest.setContentType(contentType)[ FD ]
Line_2 $$ public Tuple service(String method, String path, Map<String, String> headers, byte[] data) -->Line_9 $$ mockHttpServletRequest.setContextPath(_CONTEXT_PATH)[ CD ]
Line_28 $$ String testName = StringUtil.extractLast(stackTraceElement.getClassName(), CharPool.PERIOD)-->Line_29 $$ testName = StringUtil.replace(testName, new String[] [ FD ]
Line_2 $$ public Tuple service(String method, String path, Map<String, String> headers, byte[] data) -->Line_8 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest(method, requestURI)[ CD ]
Line_2 $$ public Tuple service(String method, String path, Map<String, String> headers, byte[] data) -->Line_44 $$ for (Map.Entry<String, String> entry : headers.entrySet()) [ FD ]
Line_25 $$ for (StackTraceElement stackTraceElement : stackTraceElements) -->Line_26 $$ String methodName = stackTraceElement.getMethodName()[ FD ]
Line_50 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_56 $$ responseHeaders.put(name, mockHttpServletResponse.getHeader(name))[ FD ]
Line_8 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest(method, requestURI)-->Line_51 $$ webDAVServlet.service(mockHttpServletRequest, mockHttpServletResponse)[ FD ]
Line_18 $$ headers = new HashMap()-->Line_30 $$ headers.put("X-Litmus", testName + ": (" + stackTraceElement.getMethodName() + ":" + stackTraceElement.getLineNumber() + ")")[ FD ]
Line_50 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_52 $$ int statusCode = mockHttpServletResponse.getStatus()[ FD ]
Line_8 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest(method, requestURI)-->Line_13 $$ mockHttpServletRequest.setRemoteUser(String.valueOf(TestPropsValues.getUserId()))[ FD ]
Line_18 $$ headers = new HashMap()-->Line_44 $$ for (Map.Entry<String, String> entry : headers.entrySet()) [ FD ]
Line_2 $$ public Tuple service(String method, String path, Map<String, String> headers, byte[] data) -->Line_17 $$ if (headers == null) [ CD ]
Line_17 $$ if (headers == null) -->Line_18 $$ headers = new HashMap()[ CD ]
Line_54 $$ Map<String, String> responseHeaders = new HashMap()-->Line_56 $$ responseHeaders.put(name, mockHttpServletResponse.getHeader(name))[ FD ]
Line_2 $$ public Tuple service(String method, String path, Map<String, String> headers, byte[] data) -->Line_7 $$ String requestURI = _CONTEXT_PATH + _SERVLET_PATH + _PATH_INFO_PREFACE + path[ CD ]
Line_38 $$ if (contentType != null) -->Line_39 $$ mockHttpServletRequest.setContentType(contentType)[ CD ]
Line_8 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest(method, requestURI)-->Line_41 $$ mockHttpServletRequest.setContentType(ContentTypes.TEXT_PLAIN)[ FD ]
Line_38 $$ if (contentType != null) -->Line_41 $$ mockHttpServletRequest.setContentType(ContentTypes.TEXT_PLAIN)[ CD ]
Line_50 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_55 $$ for (String name : mockHttpServletResponse.getHeaderNames()) [ FD ]
Line_37 $$ String contentType = headers.remove(HttpHeaders.CONTENT_TYPE)-->Line_38 $$ if (contentType != null) [ FD ]
Line_2 $$ public Tuple service(String method, String path, Map<String, String> headers, byte[] data) -->Line_35 $$ if (data != null) [ CD ]
Line_45 $$ String key = entry.getKey()-->Line_47 $$ mockHttpServletRequest.addHeader(key, value)[ FD ]
Line_2 $$ public Tuple service(String method, String path, Map<String, String> headers, byte[] data) -->Line_5 $$ WebDAVUtil.addStorage(webDAVStorage)[ CD ]
Line_2 $$ public Tuple service(String method, String path, Map<String, String> headers, byte[] data) -->Line_3 $$ WebDAVStorage webDAVStorage = new DLWebDAVStorageImpl()[ CD ]
Line_2 $$ public Tuple service(String method, String path, Map<String, String> headers, byte[] data) -->Line_6 $$ WebDAVServlet webDAVServlet = new WebDAVServlet()[ CD ]
Line_8 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest(method, requestURI)-->Line_9 $$ mockHttpServletRequest.setContextPath(_CONTEXT_PATH)[ FD ]
Line_2 $$ public Tuple service(String method, String path, Map<String, String> headers, byte[] data) -->Line_10 $$ mockHttpServletRequest.setServletPath(_SERVLET_PATH)[ CD ]
Line_25 $$ for (StackTraceElement stackTraceElement : stackTraceElements) -->Line_30 $$ headers.put("X-Litmus", testName + ": (" + stackTraceElement.getMethodName() + ":" + stackTraceElement.getLineNumber() + ")")[ FD ]
Line_2 $$ public Tuple service(String method, String path, Map<String, String> headers, byte[] data) -->Line_20 $$ headers.put(HttpHeaders.USER_AGENT, getUserAgent())[ FD ]
Line_8 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest(method, requestURI)-->Line_36 $$ mockHttpServletRequest.setContent(data)[ FD ]
Line_2 $$ public Tuple service(String method, String path, Map<String, String> headers, byte[] data) -->Line_17 $$ if (headers == null) [ FD ]
Line_50 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_51 $$ webDAVServlet.service(mockHttpServletRequest, mockHttpServletResponse)[ FD ]
Line_27 $$ if (methodName.equals("setUp") || methodName.equals("tearDown") || methodName.startsWith("test")) -->Line_29 $$ testName = StringUtil.replace(testName, new String[] [ CD ]
Line_6 $$ WebDAVServlet webDAVServlet = new WebDAVServlet()-->Line_51 $$ webDAVServlet.service(mockHttpServletRequest, mockHttpServletResponse)[ FD ]
Line_2 $$ public Tuple service(String method, String path, Map<String, String> headers, byte[] data) -->Line_18 $$ headers = new HashMap()[ FD ]
Line_3 $$ WebDAVStorage webDAVStorage = new DLWebDAVStorageImpl()-->Line_5 $$ WebDAVUtil.addStorage(webDAVStorage)[ FD ]
Line_2 $$ public Tuple service(String method, String path, Map<String, String> headers, byte[] data) -->Line_11 $$ mockHttpServletRequest.setPathInfo(_PATH_INFO_PREFACE + path)[ CD ]
Line_8 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest(method, requestURI)-->Line_10 $$ mockHttpServletRequest.setServletPath(_SERVLET_PATH)[ FD ]
Line_8 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest(method, requestURI)-->Line_47 $$ mockHttpServletRequest.addHeader(key, value)[ FD ]
Line_50 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_53 $$ byte[] responseBody = mockHttpServletResponse.getContentAsByteArray()[ FD ]
Line_37 $$ String contentType = headers.remove(HttpHeaders.CONTENT_TYPE)-->Line_39 $$ mockHttpServletRequest.setContentType(contentType)[ FD ]
Line_27 $$ if (methodName.equals("setUp") || methodName.equals("tearDown") || methodName.startsWith("test")) -->Line_30 $$ headers.put("X-Litmus", testName + ": (" + stackTraceElement.getMethodName() + ":" + stackTraceElement.getLineNumber() + ")")[ CD ]
Line_8 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest(method, requestURI)-->Line_11 $$ mockHttpServletRequest.setPathInfo(_PATH_INFO_PREFACE + path)[ FD ]
Line_2 $$ public Tuple service(String method, String path, Map<String, String> headers, byte[] data) -->Line_37 $$ String contentType = headers.remove(HttpHeaders.CONTENT_TYPE)[ FD ]
Line_35 $$ if (data != null) -->Line_36 $$ mockHttpServletRequest.setContent(data)[ CD ]
Line_2 $$ public Tuple service(String method, String path, Map<String, String> headers, byte[] data) -->Line_20 $$ headers.put(HttpHeaders.USER_AGENT, getUserAgent())[ CD ]
