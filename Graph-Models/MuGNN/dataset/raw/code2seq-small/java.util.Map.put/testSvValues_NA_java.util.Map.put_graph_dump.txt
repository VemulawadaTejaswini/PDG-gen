Line_2 $$ public void testSvValues() throws IOException -->Line_6 $$ OrdinalsBuilder builder = new OrdinalsBuilder(numDocs)[ CD ]
Line_9 $$ if (doc % numOrdinals == 0) -->Line_10 $$ ordinal = builder.nextOrdinal()[ CD ]
Line_2 $$ public void testSvValues() throws IOException -->Line_15 $$ Ordinals ords = builder.build(Settings.EMPTY)[ CD ]
Line_18 $$ final SortedDocValues singleOrds = DocValues.unwrapSingleton(docs)-->Line_19 $$ assertNotNull(singleOrds)[ FD ]
Line_15 $$ Ordinals ords = builder.build(Settings.EMPTY)-->Line_16 $$ assertThat(ords, instanceOf(SinglePackedOrdinals.class))[ FD ]
Line_3 $$ int numDocs = 1000000-->Line_8 $$ for (int doc = 0; doc < numDocs; doc++) [ FD ]
Line_2 $$ public void testSvValues() throws IOException -->Line_5 $$ Map<Integer, Long> controlDocToOrdinal = new HashMap()[ CD ]
Line_2 $$ public void testSvValues() throws IOException -->Line_19 $$ assertNotNull(singleOrds)[ CD ]
Line_8 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_12 $$ controlDocToOrdinal.put(doc, ordinal)[ FD ]
Line_2 $$ public void testSvValues() throws IOException -->Line_3 $$ int numDocs = 1000000[ CD ]
Line_8 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_13 $$ builder.addDoc(doc)[ FD ]
Line_7 $$ long ordinal = builder.currentOrdinal()-->Line_10 $$ ordinal = builder.nextOrdinal()[ FD ]
Line_17 $$ RandomAccessOrds docs = ords.ordinals()-->Line_18 $$ final SortedDocValues singleOrds = DocValues.unwrapSingleton(docs)[ FD ]
Line_6 $$ OrdinalsBuilder builder = new OrdinalsBuilder(numDocs)-->Line_7 $$ long ordinal = builder.currentOrdinal()[ FD ]
Line_5 $$ Map<Integer, Long> controlDocToOrdinal = new HashMap()-->Line_20 $$ for (Map.Entry<Integer, Long> entry : controlDocToOrdinal.entrySet()) [ FD ]
Line_8 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_12 $$ controlDocToOrdinal.put(doc, ordinal)[ CD ]
Line_2 $$ public void testSvValues() throws IOException -->Line_16 $$ assertThat(ords, instanceOf(SinglePackedOrdinals.class))[ CD ]
Line_2 $$ public void testSvValues() throws IOException -->Line_17 $$ RandomAccessOrds docs = ords.ordinals()[ CD ]
Line_6 $$ OrdinalsBuilder builder = new OrdinalsBuilder(numDocs)-->Line_13 $$ builder.addDoc(doc)[ FD ]
Line_2 $$ public void testSvValues() throws IOException -->Line_4 $$ int numOrdinals = numDocs / 4[ CD ]
Line_2 $$ public void testSvValues() throws IOException -->Line_7 $$ long ordinal = builder.currentOrdinal()[ CD ]
Line_6 $$ OrdinalsBuilder builder = new OrdinalsBuilder(numDocs)-->Line_10 $$ ordinal = builder.nextOrdinal()[ FD ]
Line_2 $$ public void testSvValues() throws IOException -->Line_8 $$ for (int doc = 0; doc < numDocs; doc++) [ CD ]
Line_15 $$ Ordinals ords = builder.build(Settings.EMPTY)-->Line_17 $$ RandomAccessOrds docs = ords.ordinals()[ FD ]
Line_5 $$ Map<Integer, Long> controlDocToOrdinal = new HashMap()-->Line_12 $$ controlDocToOrdinal.put(doc, ordinal)[ FD ]
Line_8 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_9 $$ if (doc % numOrdinals == 0) [ CD ]
Line_20 $$ for (Map.Entry<Integer, Long> entry : controlDocToOrdinal.entrySet()) -->Line_21 $$ assertThat(entry.getValue(), equalTo((long) singleOrds.getOrd(entry.getKey())))[ FD ]
Line_6 $$ OrdinalsBuilder builder = new OrdinalsBuilder(numDocs)-->Line_15 $$ Ordinals ords = builder.build(Settings.EMPTY)[ FD ]
Line_10 $$ ordinal = builder.nextOrdinal()-->Line_12 $$ controlDocToOrdinal.put(doc, ordinal)[ FD ]
Line_7 $$ long ordinal = builder.currentOrdinal()-->Line_12 $$ controlDocToOrdinal.put(doc, ordinal)[ FD ]
Line_18 $$ final SortedDocValues singleOrds = DocValues.unwrapSingleton(docs)-->Line_21 $$ assertThat(entry.getValue(), equalTo((long) singleOrds.getOrd(entry.getKey())))[ FD ]
Line_2 $$ public void testSvValues() throws IOException -->Line_18 $$ final SortedDocValues singleOrds = DocValues.unwrapSingleton(docs)[ CD ]
Line_8 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_13 $$ builder.addDoc(doc)[ CD ]
