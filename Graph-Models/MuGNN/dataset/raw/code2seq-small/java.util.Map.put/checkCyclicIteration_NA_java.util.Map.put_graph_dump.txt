Line_12 $$ final List<Integer> iteration = new ArrayList<Integer>()-->Line_19 $$ assertEquals("i=" + i + ", j=" + j, iteration.get(i), integers[j])[ FD ]
Line_2 $$ private static void checkCyclicIteration(int numOfElements) -->Line_5 $$ for (int i = 0; i < integers.length; i++) [ CD ]
Line_12 $$ final List<Integer> iteration = new ArrayList<Integer>()-->Line_14 $$ iteration.add(e.getKey())[ FD ]
Line_3 $$ final NavigableMap<Integer, Integer> map = new TreeMap<Integer, Integer>()-->Line_7 $$ map.put(integers[i], integers[i])[ FD ]
Line_17 $$ for (int i = 0; i < integers.length; i++) -->Line_19 $$ assertEquals("i=" + i + ", j=" + j, iteration.get(i), integers[j])[ CD ]
Line_5 $$ for (int i = 0; i < integers.length; i++) -->Line_19 $$ assertEquals("i=" + i + ", j=" + j, iteration.get(i), integers[j])[ FD ]
Line_11 $$ for (int start = -1; start <= 2 * integers.length - 1; start++) -->Line_17 $$ for (int i = 0; i < integers.length; i++) [ CD ]
Line_5 $$ for (int i = 0; i < integers.length; i++) -->Line_17 $$ for (int i = 0; i < integers.length; i++) [ FD ]
Line_11 $$ for (int start = -1; start <= 2 * integers.length - 1; start++) -->Line_16 $$ System.out.println("start=" + start + ", iteration=" + iteration)[ CD ]
Line_2 $$ private static void checkCyclicIteration(int numOfElements) -->Line_11 $$ for (int start = -1; start <= 2 * integers.length - 1; start++) [ CD ]
Line_17 $$ for (int i = 0; i < integers.length; i++) -->Line_19 $$ assertEquals("i=" + i + ", j=" + j, iteration.get(i), integers[j])[ FD ]
Line_2 $$ private static void checkCyclicIteration(int numOfElements) -->Line_3 $$ final NavigableMap<Integer, Integer> map = new TreeMap<Integer, Integer>()[ CD ]
Line_11 $$ for (int start = -1; start <= 2 * integers.length - 1; start++) -->Line_12 $$ final List<Integer> iteration = new ArrayList<Integer>()[ CD ]
Line_4 $$ final Integer[] integers = new Integer[numOfElements]-->Line_9 $$ System.out.println("\n\nintegers=" + Arrays.asList(integers))[ FD ]
Line_13 $$ for (Map.Entry<Integer, Integer> e : new CyclicIteration<Integer, Integer>(map, start)) -->Line_14 $$ iteration.add(e.getKey())[ FD ]
Line_2 $$ private static void checkCyclicIteration(int numOfElements) -->Line_4 $$ final Integer[] integers = new Integer[numOfElements][ CD ]
Line_2 $$ private static void checkCyclicIteration(int numOfElements) -->Line_9 $$ System.out.println("\n\nintegers=" + Arrays.asList(integers))[ CD ]
Line_17 $$ for (int i = 0; i < integers.length; i++) -->Line_18 $$ final int j = ((start + 2) / 2 + i) % integers.length[ CD ]
Line_5 $$ for (int i = 0; i < integers.length; i++) -->Line_7 $$ map.put(integers[i], integers[i])[ CD ]
Line_5 $$ for (int i = 0; i < integers.length; i++) -->Line_6 $$ integers[i] = 2 * i[ FD ]
Line_5 $$ for (int i = 0; i < integers.length; i++) -->Line_6 $$ integers[i] = 2 * i[ CD ]
Line_2 $$ private static void checkCyclicIteration(int numOfElements) -->Line_10 $$ System.out.println("map=" + map)[ CD ]
