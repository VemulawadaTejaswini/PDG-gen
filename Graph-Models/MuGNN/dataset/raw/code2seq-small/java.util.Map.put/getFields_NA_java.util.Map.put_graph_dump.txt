Line_2 $$ static List<Field> getFields(Class<?> clazz) -->Line_5 $$ List<Field> fields = fieldMap.get(clazz)[ FD ]
Line_3 $$ if (clazz == null || clazz == PhantomReference.class || clazz == Class.class || java.lang.reflect.Member.class.isAssignableFrom(clazz))-->Line_4 $$ return emptyList()[ CD ]
Line_9 $$ for (Field field : clazz.getDeclaredFields()) -->Line_12 $$ field.setAccessible(true)[ FD ]
Line_2 $$ static List<Field> getFields(Class<?> clazz) -->Line_15 $$ fields.addAll(getFields(clazz.getSuperclass()))[ FD ]
Line_5 $$ List<Field> fields = fieldMap.get(clazz)-->Line_13 $$ fields.add(field)[ FD ]
Line_5 $$ List<Field> fields = fieldMap.get(clazz)-->Line_8 $$ fieldMap.put(clazz, fields = new ArrayList())[ FD ]
Line_2 $$ static List<Field> getFields(Class<?> clazz) -->Line_6 $$ if (fields != null)[ CD ]
Line_6 $$ if (fields != null)-->Line_7 $$ return fields[ CD ]
Line_9 $$ for (Field field : clazz.getDeclaredFields()) -->Line_10 $$ if (field.getType().isPrimitive() || Modifier.isStatic(field.getModifiers()))[ FD ]
Line_2 $$ static List<Field> getFields(Class<?> clazz) -->Line_16 $$ return fields[ CD ]
Line_2 $$ static List<Field> getFields(Class<?> clazz) -->Line_9 $$ for (Field field : clazz.getDeclaredFields()) [ FD ]
Line_8 $$ fieldMap.put(clazz, fields = new ArrayList())-->Line_15 $$ fields.addAll(getFields(clazz.getSuperclass()))[ FD ]
Line_2 $$ static List<Field> getFields(Class<?> clazz) -->Line_8 $$ fieldMap.put(clazz, fields = new ArrayList())[ CD ]
Line_5 $$ List<Field> fields = fieldMap.get(clazz)-->Line_6 $$ if (fields != null)[ FD ]
Line_5 $$ List<Field> fields = fieldMap.get(clazz)-->Line_15 $$ fields.addAll(getFields(clazz.getSuperclass()))[ FD ]
Line_2 $$ static List<Field> getFields(Class<?> clazz) -->Line_8 $$ fieldMap.put(clazz, fields = new ArrayList())[ FD ]
Line_2 $$ static List<Field> getFields(Class<?> clazz) -->Line_15 $$ fields.addAll(getFields(clazz.getSuperclass()))[ CD ]
Line_2 $$ static List<Field> getFields(Class<?> clazz) -->Line_3 $$ if (clazz == null || clazz == PhantomReference.class || clazz == Class.class || java.lang.reflect.Member.class.isAssignableFrom(clazz))[ CD ]
Line_2 $$ static List<Field> getFields(Class<?> clazz) -->Line_3 $$ if (clazz == null || clazz == PhantomReference.class || clazz == Class.class || java.lang.reflect.Member.class.isAssignableFrom(clazz))[ FD ]
Line_2 $$ static List<Field> getFields(Class<?> clazz) -->Line_5 $$ List<Field> fields = fieldMap.get(clazz)[ CD ]
Line_8 $$ fieldMap.put(clazz, fields = new ArrayList())-->Line_13 $$ fields.add(field)[ FD ]
Line_9 $$ for (Field field : clazz.getDeclaredFields()) -->Line_13 $$ fields.add(field)[ FD ]
