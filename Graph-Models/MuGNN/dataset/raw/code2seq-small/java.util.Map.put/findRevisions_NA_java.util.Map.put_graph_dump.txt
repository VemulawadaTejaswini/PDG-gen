Line_2 $$ public <T> Map<Number, T> findRevisions(Class<T> revisionEntityClass, Set<Number> revisions) throws IllegalArgumentException, IllegalStateException -->Line_9 $$ checkSession()[ CD ]
Line_2 $$ public <T> Map<Number, T> findRevisions(Class<T> revisionEntityClass, Set<Number> revisions) throws IllegalArgumentException, IllegalStateException -->Line_10 $$ final Criteria query = enversService.getRevisionInfoQueryCreator().getRevisionsQuery(session, revisions)[ FD ]
Line_5 $$ for (Number revision : revisions) -->Line_7 $$ checkPositive(revision, "Entity revision")[ FD ]
Line_2 $$ public <T> Map<Number, T> findRevisions(Class<T> revisionEntityClass, Set<Number> revisions) throws IllegalArgumentException, IllegalStateException -->Line_10 $$ final Criteria query = enversService.getRevisionInfoQueryCreator().getRevisionsQuery(session, revisions)[ CD ]
Line_5 $$ for (Number revision : revisions) -->Line_6 $$ checkNotNull(revision, "Entity revision")[ FD ]
Line_2 $$ public <T> Map<Number, T> findRevisions(Class<T> revisionEntityClass, Set<Number> revisions) throws IllegalArgumentException, IllegalStateException -->Line_4 $$ final Map<Number, T> result = new HashMap<Number, T>(revisions.size())[ CD ]
Line_5 $$ for (Number revision : revisions) -->Line_15 $$ result.put(revNo, revision)[ FD ]
Line_2 $$ public <T> Map<Number, T> findRevisions(Class<T> revisionEntityClass, Set<Number> revisions) throws IllegalArgumentException, IllegalStateException -->Line_4 $$ final Map<Number, T> result = new HashMap<Number, T>(revisions.size())[ FD ]
Line_14 $$ final Number revNo = enversService.getRevisionInfoNumberReader().getRevisionNumber(revision)-->Line_15 $$ result.put(revNo, revision)[ FD ]
Line_10 $$ final Criteria query = enversService.getRevisionInfoQueryCreator().getRevisionsQuery(session, revisions)-->Line_12 $$ final List<T> revisionList = query.list()[ FD ]
Line_2 $$ public <T> Map<Number, T> findRevisions(Class<T> revisionEntityClass, Set<Number> revisions) throws IllegalArgumentException, IllegalStateException -->Line_3 $$ revisionEntityClass = getTargetClassIfProxied(revisionEntityClass)[ FD ]
Line_4 $$ final Map<Number, T> result = new HashMap<Number, T>(revisions.size())-->Line_15 $$ result.put(revNo, revision)[ FD ]
Line_5 $$ for (Number revision : revisions) -->Line_14 $$ final Number revNo = enversService.getRevisionInfoNumberReader().getRevisionNumber(revision)[ FD ]
Line_2 $$ public <T> Map<Number, T> findRevisions(Class<T> revisionEntityClass, Set<Number> revisions) throws IllegalArgumentException, IllegalStateException -->Line_3 $$ revisionEntityClass = getTargetClassIfProxied(revisionEntityClass)[ CD ]
