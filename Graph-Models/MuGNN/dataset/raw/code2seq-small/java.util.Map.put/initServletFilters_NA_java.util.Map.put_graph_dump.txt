Line_32 $$ Map<String, Object> properties = new HashMap()-->Line_43 $$ properties.put("servlet-filter-name", servletFilterName)[ FD ]
Line_4 $$ if (!servletFilterElements.isEmpty() && !checkPermission(PACLConstants.PORTAL_HOOK_PERMISSION_SERVLET_FILTERS, portletClassLoader, null, "Rejecting servlet filters")) -->Line_5 $$ return[ CD ]
Line_2 $$ protected void initServletFilters(ServletContext servletContext, String servletContextName, ClassLoader portletClassLoader, Element parentElement) throws Exception -->Line_8 $$ List<Element> servletFilterMappingElements = parentElement.elements("servlet-filter-mapping")[ FD ]
Line_10 $$ String servletFilterName = servletFilterMappingElement.elementText("servlet-filter-name")-->Line_43 $$ properties.put("servlet-filter-name", servletFilterName)[ FD ]
Line_10 $$ String servletFilterName = servletFilterMappingElement.elementText("servlet-filter-name")-->Line_38 $$ Tuple filterTuple = filterTuples.get(servletFilterName)[ FD ]
Line_23 $$ dispatcher = StringUtil.toUpperCase(dispatcher)-->Line_24 $$ dispatchers.add(dispatcher)[ FD ]
Line_33 $$ for (Element initParamElement : initParamElements) -->Line_35 $$ String paramValue = initParamElement.elementText("param-value")[ FD ]
Line_9 $$ for (Element servletFilterMappingElement : servletFilterMappingElements) -->Line_12 $$ String beforeFilter = servletFilterMappingElement.elementText("before-filter")[ FD ]
Line_21 $$ for (Element dispatcherElement : dispatcherElements) -->Line_22 $$ String dispatcher = dispatcherElement.getTextTrim()[ FD ]
Line_2 $$ protected void initServletFilters(ServletContext servletContext, String servletContextName, ClassLoader portletClassLoader, Element parentElement) throws Exception -->Line_8 $$ List<Element> servletFilterMappingElements = parentElement.elements("servlet-filter-mapping")[ CD ]
Line_16 $$ String urlPattern = urlPatternElement.getTextTrim()-->Line_17 $$ urlPatterns.add(urlPattern)[ FD ]
Line_14 $$ List<String> urlPatterns = new ArrayList()-->Line_17 $$ urlPatterns.add(urlPattern)[ FD ]
Line_15 $$ for (Element urlPatternElement : urlPatternElements) -->Line_16 $$ String urlPattern = urlPatternElement.getTextTrim()[ FD ]
Line_28 $$ for (Element servletFilterElement : servletFilterElements) -->Line_29 $$ String servletFilterName = servletFilterElement.elementText("servlet-filter-name")[ FD ]
Line_2 $$ protected void initServletFilters(ServletContext servletContext, String servletContextName, ClassLoader portletClassLoader, Element parentElement) throws Exception -->Line_45 $$ Filter filter = initServletFilter(servletFilterImpl, portletClassLoader)[ FD ]
Line_28 $$ for (Element servletFilterElement : servletFilterElements) -->Line_30 $$ String servletFilterImpl = servletFilterElement.elementText("servlet-filter-impl")[ FD ]
Line_45 $$ Filter filter = initServletFilter(servletFilterImpl, portletClassLoader)-->Line_46 $$ registerService(servletContextName, servletFilterName, Filter.class, filter, properties)[ FD ]
Line_2 $$ protected void initServletFilters(ServletContext servletContext, String servletContextName, ClassLoader portletClassLoader, Element parentElement) throws Exception -->Line_3 $$ List<Element> servletFilterElements = parentElement.elements("servlet-filter")[ CD ]
Line_2 $$ protected void initServletFilters(ServletContext servletContext, String servletContextName, ClassLoader portletClassLoader, Element parentElement) throws Exception -->Line_4 $$ if (!servletFilterElements.isEmpty() && !checkPermission(PACLConstants.PORTAL_HOOK_PERMISSION_SERVLET_FILTERS, portletClassLoader, null, "Rejecting servlet filters")) [ FD ]
Line_2 $$ protected void initServletFilters(ServletContext servletContext, String servletContextName, ClassLoader portletClassLoader, Element parentElement) throws Exception -->Line_46 $$ registerService(servletContextName, servletFilterName, Filter.class, filter, properties)[ FD ]
Line_10 $$ String servletFilterName = servletFilterMappingElement.elementText("servlet-filter-name")-->Line_26 $$ filterTuples.put(servletFilterName, new Tuple(afterFilter, beforeFilter, dispatchers, urlPatterns))[ FD ]
Line_3 $$ List<Element> servletFilterElements = parentElement.elements("servlet-filter")-->Line_4 $$ if (!servletFilterElements.isEmpty() && !checkPermission(PACLConstants.PORTAL_HOOK_PERMISSION_SERVLET_FILTERS, portletClassLoader, null, "Rejecting servlet filters")) [ FD ]
Line_32 $$ Map<String, Object> properties = new HashMap()-->Line_40 $$ properties.put("before-filter", filterTuple.getObject(1))[ FD ]
Line_32 $$ Map<String, Object> properties = new HashMap()-->Line_41 $$ properties.put("dispatcher", filterTuple.getObject(2))[ FD ]
Line_32 $$ Map<String, Object> properties = new HashMap()-->Line_44 $$ properties.put("url-pattern", filterTuple.getObject(3))[ FD ]
Line_38 $$ Tuple filterTuple = filterTuples.get(servletFilterName)-->Line_39 $$ properties.put("after-filter", filterTuple.getObject(0))[ FD ]
Line_30 $$ String servletFilterImpl = servletFilterElement.elementText("servlet-filter-impl")-->Line_45 $$ Filter filter = initServletFilter(servletFilterImpl, portletClassLoader)[ FD ]
Line_32 $$ Map<String, Object> properties = new HashMap()-->Line_36 $$ properties.put("init.param." + paramName, paramValue)[ FD ]
Line_35 $$ String paramValue = initParamElement.elementText("param-value")-->Line_36 $$ properties.put("init.param." + paramName, paramValue)[ FD ]
Line_7 $$ Map<String, Tuple> filterTuples = new HashMap()-->Line_26 $$ filterTuples.put(servletFilterName, new Tuple(afterFilter, beforeFilter, dispatchers, urlPatterns))[ FD ]
Line_20 $$ List<String> dispatchers = new ArrayList()-->Line_24 $$ dispatchers.add(dispatcher)[ FD ]
Line_28 $$ for (Element servletFilterElement : servletFilterElements) -->Line_31 $$ List<Element> initParamElements = servletFilterElement.elements("init-param")[ FD ]
Line_9 $$ for (Element servletFilterMappingElement : servletFilterMappingElements) -->Line_10 $$ String servletFilterName = servletFilterMappingElement.elementText("servlet-filter-name")[ FD ]
Line_2 $$ protected void initServletFilters(ServletContext servletContext, String servletContextName, ClassLoader portletClassLoader, Element parentElement) throws Exception -->Line_3 $$ List<Element> servletFilterElements = parentElement.elements("servlet-filter")[ FD ]
Line_32 $$ Map<String, Object> properties = new HashMap()-->Line_46 $$ registerService(servletContextName, servletFilterName, Filter.class, filter, properties)[ FD ]
Line_32 $$ Map<String, Object> properties = new HashMap()-->Line_42 $$ properties.put("servlet-context-name", PortalContextLoaderListener.getPortalServletContextName())[ FD ]
Line_32 $$ Map<String, Object> properties = new HashMap()-->Line_39 $$ properties.put("after-filter", filterTuple.getObject(0))[ FD ]
Line_38 $$ Tuple filterTuple = filterTuples.get(servletFilterName)-->Line_41 $$ properties.put("dispatcher", filterTuple.getObject(2))[ FD ]
Line_22 $$ String dispatcher = dispatcherElement.getTextTrim()-->Line_23 $$ dispatcher = StringUtil.toUpperCase(dispatcher)[ FD ]
Line_22 $$ String dispatcher = dispatcherElement.getTextTrim()-->Line_24 $$ dispatchers.add(dispatcher)[ FD ]
Line_2 $$ protected void initServletFilters(ServletContext servletContext, String servletContextName, ClassLoader portletClassLoader, Element parentElement) throws Exception -->Line_7 $$ Map<String, Tuple> filterTuples = new HashMap()[ CD ]
Line_2 $$ protected void initServletFilters(ServletContext servletContext, String servletContextName, ClassLoader portletClassLoader, Element parentElement) throws Exception -->Line_4 $$ if (!servletFilterElements.isEmpty() && !checkPermission(PACLConstants.PORTAL_HOOK_PERMISSION_SERVLET_FILTERS, portletClassLoader, null, "Rejecting servlet filters")) [ CD ]
Line_38 $$ Tuple filterTuple = filterTuples.get(servletFilterName)-->Line_44 $$ properties.put("url-pattern", filterTuple.getObject(3))[ FD ]
Line_38 $$ Tuple filterTuple = filterTuples.get(servletFilterName)-->Line_40 $$ properties.put("before-filter", filterTuple.getObject(1))[ FD ]
Line_9 $$ for (Element servletFilterMappingElement : servletFilterMappingElements) -->Line_11 $$ String afterFilter = servletFilterMappingElement.elementText("after-filter")[ FD ]
Line_7 $$ Map<String, Tuple> filterTuples = new HashMap()-->Line_38 $$ Tuple filterTuple = filterTuples.get(servletFilterName)[ FD ]
Line_9 $$ for (Element servletFilterMappingElement : servletFilterMappingElements) -->Line_13 $$ List<Element> urlPatternElements = servletFilterMappingElement.elements("url-pattern")[ FD ]
Line_33 $$ for (Element initParamElement : initParamElements) -->Line_34 $$ String paramName = initParamElement.elementText("param-name")[ FD ]
Line_10 $$ String servletFilterName = servletFilterMappingElement.elementText("servlet-filter-name")-->Line_46 $$ registerService(servletContextName, servletFilterName, Filter.class, filter, properties)[ FD ]
Line_9 $$ for (Element servletFilterMappingElement : servletFilterMappingElements) -->Line_19 $$ List<Element> dispatcherElements = servletFilterMappingElement.elements("dispatcher")[ FD ]
