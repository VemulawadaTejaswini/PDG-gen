Line_32 $$ RoutingAllocation routingAllocation = new RoutingAllocation(null, new RoutingNodes(clusterState), discoveryNodes, clusterInfo, System.nanoTime())-->Line_61 $$ decision = diskThresholdDecider.canRemain(firstRouting, firstRoutingNode, routingAllocation)[ FD ]
Line_14 $$ MetaData metaData = MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(2).numberOfReplicas(0)).build()-->Line_15 $$ RoutingTable routingTable = RoutingTable.builder().addAsNew(metaData.index("test")).build()[ FD ]
Line_13 $$ DiskThresholdDecider diskThresholdDecider = new DiskThresholdDecider(diskSettings)-->Line_43 $$ AllocationDeciders deciders = new AllocationDeciders(Settings.EMPTY, new HashSet(Arrays.asList(new SameShardAllocationDecider(Settings.EMPTY), diskThresholdDecider)))[ FD ]
Line_30 $$ RoutingTable.Builder builder = RoutingTable.builder().add(IndexRoutingTable.builder("test").addIndexShard(new IndexShardRoutingTable.Builder(new ShardId("test", 0)).addShard(firstRouting).build()).addIndexShard(new IndexShardRoutingTable.Builder(new ShardId("test", 1)).addShard(secondRouting).build()))-->Line_59 $$ clusterState = ClusterState.builder(updateClusterState).routingTable(builder.build()).build()[ FD ]
Line_23 $$ DiscoveryNode discoveryNode1 = new DiscoveryNode("", "node1", new LocalTransportAddress("1"), masterNodeAttributes, Version.CURRENT)-->Line_25 $$ DiscoveryNodes discoveryNodes = DiscoveryNodes.builder().put(discoveryNode1).put(discoveryNode2).build()[ FD ]
Line_2 $$ public void testForSingleDataNode() -->Line_11 $$ shardSizes.put("[test][1][p]", 40L)[ CD ]
Line_27 $$ ShardRouting firstRouting = TestShardRouting.newShardRouting("test", 0, "node2", null, null, true, ShardRoutingState.STARTED, 1)-->Line_61 $$ decision = diskThresholdDecider.canRemain(firstRouting, firstRoutingNode, routingAllocation)[ FD ]
Line_27 $$ ShardRouting firstRouting = TestShardRouting.newShardRouting("test", 0, "node2", null, null, true, ShardRoutingState.STARTED, 1)-->Line_58 $$ builder = RoutingTable.builder().add(IndexRoutingTable.builder("test").addIndexShard(new IndexShardRoutingTable.Builder(new ShardId("test", 0)).addShard(firstRouting).build()).addIndexShard(new IndexShardRoutingTable.Builder(new ShardId("test", 1)).addShard(secondRouting).build()))[ FD ]
Line_2 $$ public void testForSingleDataNode() -->Line_49 $$ assertThat(result.routingTable().index("test").getShards().get(1).primaryShard().state(), equalTo(STARTED))[ CD ]
Line_4 $$ ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder()-->Line_5 $$ usagesBuilder.put("node1", new DiskUsage("node1", "n1", "/dev/null", 100, 100))[ FD ]
Line_2 $$ public void testForSingleDataNode() -->Line_18 $$ masterNodeAttributes.put("master", "true")[ CD ]
Line_17 $$ Map<String, String> masterNodeAttributes = new HashMap()-->Line_19 $$ masterNodeAttributes.put("data", "false")[ FD ]
Line_2 $$ public void testForSingleDataNode() -->Line_58 $$ builder = RoutingTable.builder().add(IndexRoutingTable.builder("test").addIndexShard(new IndexShardRoutingTable.Builder(new ShardId("test", 0)).addShard(firstRouting).build()).addIndexShard(new IndexShardRoutingTable.Builder(new ShardId("test", 1)).addShard(secondRouting).build()))[ CD ]
Line_2 $$ public void testForSingleDataNode() -->Line_30 $$ RoutingTable.Builder builder = RoutingTable.builder().add(IndexRoutingTable.builder("test").addIndexShard(new IndexShardRoutingTable.Builder(new ShardId("test", 0)).addShard(firstRouting).build()).addIndexShard(new IndexShardRoutingTable.Builder(new ShardId("test", 1)).addShard(secondRouting).build()))[ CD ]
Line_27 $$ ShardRouting firstRouting = TestShardRouting.newShardRouting("test", 0, "node2", null, null, true, ShardRoutingState.STARTED, 1)-->Line_29 $$ RoutingNode firstRoutingNode = new RoutingNode("node2", discoveryNode2, Arrays.asList(firstRouting, secondRouting))[ FD ]
Line_2 $$ public void testForSingleDataNode() -->Line_64 $$ assertThat(result.routingTable().index("test").getShards().get(0).primaryShard().state(), equalTo(STARTED))[ CD ]
Line_2 $$ public void testForSingleDataNode() -->Line_32 $$ RoutingAllocation routingAllocation = new RoutingAllocation(null, new RoutingNodes(clusterState), discoveryNodes, clusterInfo, System.nanoTime())[ CD ]
Line_27 $$ ShardRouting firstRouting = TestShardRouting.newShardRouting("test", 0, "node2", null, null, true, ShardRoutingState.STARTED, 1)-->Line_57 $$ firstRoutingNode = new RoutingNode("node2", discoveryNode2, Arrays.asList(firstRouting, secondRouting))[ FD ]
Line_2 $$ public void testForSingleDataNode() -->Line_10 $$ shardSizes.put("[test][0][p]", 40L)[ CD ]
Line_2 $$ public void testForSingleDataNode() -->Line_56 $$ secondRouting = TestShardRouting.newShardRouting("test", 1, "node2", "node3", null, true, ShardRoutingState.RELOCATING, 1)[ CD ]
Line_28 $$ ShardRouting secondRouting = TestShardRouting.newShardRouting("test", 1, "node2", null, null, true, ShardRoutingState.STARTED, 1)-->Line_58 $$ builder = RoutingTable.builder().add(IndexRoutingTable.builder("test").addIndexShard(new IndexShardRoutingTable.Builder(new ShardId("test", 0)).addShard(firstRouting).build()).addIndexShard(new IndexShardRoutingTable.Builder(new ShardId("test", 1)).addShard(secondRouting).build()))[ FD ]
Line_33 $$ Decision decision = diskThresholdDecider.canRemain(firstRouting, firstRoutingNode, routingAllocation)-->Line_34 $$ assertThat(decision.type(), equalTo(Decision.Type.YES))[ FD ]
Line_13 $$ DiskThresholdDecider diskThresholdDecider = new DiskThresholdDecider(diskSettings)-->Line_61 $$ decision = diskThresholdDecider.canRemain(firstRouting, firstRoutingNode, routingAllocation)[ FD ]
Line_2 $$ public void testForSingleDataNode() -->Line_68 $$ assertThat(result.routingTable().index("test").getShards().get(1).primaryShard().currentNodeId(), equalTo("node2"))[ CD ]
Line_2 $$ public void testForSingleDataNode() -->Line_61 $$ decision = diskThresholdDecider.canRemain(firstRouting, firstRoutingNode, routingAllocation)[ CD ]
Line_4 $$ ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder()-->Line_7 $$ usagesBuilder.put("node3", new DiskUsage("node3", "n3", "/dev/null", 100, 100))[ FD ]
Line_2 $$ public void testForSingleDataNode() -->Line_55 $$ firstRouting = TestShardRouting.newShardRouting("test", 0, "node2", null, null, true, ShardRoutingState.STARTED, 1)[ CD ]
Line_9 $$ ImmutableOpenMap.Builder<String, Long> shardSizes = ImmutableOpenMap.builder()-->Line_10 $$ shardSizes.put("[test][0][p]", 40L)[ FD ]
Line_2 $$ public void testForSingleDataNode() -->Line_7 $$ usagesBuilder.put("node3", new DiskUsage("node3", "n3", "/dev/null", 100, 100))[ CD ]
Line_2 $$ public void testForSingleDataNode() -->Line_59 $$ clusterState = ClusterState.builder(updateClusterState).routingTable(builder.build()).build()[ CD ]
Line_15 $$ RoutingTable routingTable = RoutingTable.builder().addAsNew(metaData.index("test")).build()-->Line_26 $$ ClusterState baseClusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).nodes(discoveryNodes).build()[ FD ]
Line_33 $$ Decision decision = diskThresholdDecider.canRemain(firstRouting, firstRoutingNode, routingAllocation)-->Line_62 $$ assertThat(decision.type(), equalTo(Decision.Type.YES))[ FD ]
Line_4 $$ ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder()-->Line_8 $$ ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build()[ FD ]
Line_2 $$ public void testForSingleDataNode() -->Line_14 $$ MetaData metaData = MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(2).numberOfReplicas(0)).build()[ CD ]
Line_2 $$ public void testForSingleDataNode() -->Line_17 $$ Map<String, String> masterNodeAttributes = new HashMap()[ CD ]
Line_2 $$ public void testForSingleDataNode() -->Line_3 $$ Settings diskSettings = settingsBuilder().put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(), true).put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_INCLUDE_RELOCATIONS_SETTING.getKey(), true).put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(), "60%").put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(), "70%").build()[ CD ]
Line_14 $$ MetaData metaData = MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(2).numberOfReplicas(0)).build()-->Line_26 $$ ClusterState baseClusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).nodes(discoveryNodes).build()[ FD ]
Line_2 $$ public void testForSingleDataNode() -->Line_25 $$ DiscoveryNodes discoveryNodes = DiscoveryNodes.builder().put(discoveryNode1).put(discoveryNode2).build()[ CD ]
Line_2 $$ public void testForSingleDataNode() -->Line_34 $$ assertThat(decision.type(), equalTo(Decision.Type.YES))[ CD ]
Line_28 $$ ShardRouting secondRouting = TestShardRouting.newShardRouting("test", 1, "node2", null, null, true, ShardRoutingState.STARTED, 1)-->Line_29 $$ RoutingNode firstRoutingNode = new RoutingNode("node2", discoveryNode2, Arrays.asList(firstRouting, secondRouting))[ FD ]
Line_2 $$ public void testForSingleDataNode() -->Line_50 $$ assertThat(result.routingTable().index("test").getShards().get(1).primaryShard().currentNodeId(), equalTo("node2"))[ CD ]
Line_29 $$ RoutingNode firstRoutingNode = new RoutingNode("node2", discoveryNode2, Arrays.asList(firstRouting, secondRouting))-->Line_33 $$ Decision decision = diskThresholdDecider.canRemain(firstRouting, firstRoutingNode, routingAllocation)[ FD ]
Line_27 $$ ShardRouting firstRouting = TestShardRouting.newShardRouting("test", 0, "node2", null, null, true, ShardRoutingState.STARTED, 1)-->Line_33 $$ Decision decision = diskThresholdDecider.canRemain(firstRouting, firstRoutingNode, routingAllocation)[ FD ]
Line_2 $$ public void testForSingleDataNode() -->Line_65 $$ assertThat(result.routingTable().index("test").getShards().get(0).primaryShard().currentNodeId(), equalTo("node2"))[ CD ]
Line_2 $$ public void testForSingleDataNode() -->Line_48 $$ assertThat(result.routingTable().index("test").getShards().get(0).primaryShard().relocatingNodeId(), nullValue())[ CD ]
Line_28 $$ ShardRouting secondRouting = TestShardRouting.newShardRouting("test", 1, "node2", null, null, true, ShardRoutingState.STARTED, 1)-->Line_57 $$ firstRoutingNode = new RoutingNode("node2", discoveryNode2, Arrays.asList(firstRouting, secondRouting))[ FD ]
Line_9 $$ ImmutableOpenMap.Builder<String, Long> shardSizes = ImmutableOpenMap.builder()-->Line_11 $$ shardSizes.put("[test][1][p]", 40L)[ FD ]
Line_2 $$ public void testForSingleDataNode() -->Line_45 $$ RoutingAllocation.Result result = strategy.reroute(clusterState, "reroute")[ CD ]
Line_2 $$ public void testForSingleDataNode() -->Line_19 $$ masterNodeAttributes.put("data", "false")[ CD ]
Line_2 $$ public void testForSingleDataNode() -->Line_62 $$ assertThat(decision.type(), equalTo(Decision.Type.YES))[ CD ]
Line_13 $$ DiskThresholdDecider diskThresholdDecider = new DiskThresholdDecider(diskSettings)-->Line_33 $$ Decision decision = diskThresholdDecider.canRemain(firstRouting, firstRoutingNode, routingAllocation)[ FD ]
Line_2 $$ public void testForSingleDataNode() -->Line_46 $$ assertThat(result.routingTable().index("test").getShards().get(0).primaryShard().state(), equalTo(STARTED))[ CD ]
Line_35 $$ ClusterInfoService cis = new ClusterInfoService() -->Line_38 $$ return clusterInfo[ CD ]
Line_2 $$ public void testForSingleDataNode() -->Line_28 $$ ShardRouting secondRouting = TestShardRouting.newShardRouting("test", 1, "node2", null, null, true, ShardRoutingState.STARTED, 1)[ CD ]
Line_4 $$ ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder()-->Line_6 $$ usagesBuilder.put("node2", new DiskUsage("node2", "n2", "/dev/null", 100, 20))[ FD ]
Line_31 $$ ClusterState clusterState = ClusterState.builder(baseClusterState).routingTable(builder.build()).build()-->Line_54 $$ ClusterState updateClusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).put(discoveryNode3)).build()[ FD ]
Line_2 $$ public void testForSingleDataNode() -->Line_29 $$ RoutingNode firstRoutingNode = new RoutingNode("node2", discoveryNode2, Arrays.asList(firstRouting, secondRouting))[ CD ]
Line_20 $$ Map<String, String> dataNodeAttributes = new HashMap()-->Line_21 $$ dataNodeAttributes.put("master", "false")[ FD ]
Line_2 $$ public void testForSingleDataNode() -->Line_15 $$ RoutingTable routingTable = RoutingTable.builder().addAsNew(metaData.index("test")).build()[ CD ]
Line_2 $$ public void testForSingleDataNode() -->Line_5 $$ usagesBuilder.put("node1", new DiskUsage("node1", "n1", "/dev/null", 100, 100))[ CD ]
Line_26 $$ ClusterState baseClusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).nodes(discoveryNodes).build()-->Line_31 $$ ClusterState clusterState = ClusterState.builder(baseClusterState).routingTable(builder.build()).build()[ FD ]
Line_17 $$ Map<String, String> masterNodeAttributes = new HashMap()-->Line_18 $$ masterNodeAttributes.put("master", "true")[ FD ]
Line_2 $$ public void testForSingleDataNode() -->Line_23 $$ DiscoveryNode discoveryNode1 = new DiscoveryNode("", "node1", new LocalTransportAddress("1"), masterNodeAttributes, Version.CURRENT)[ CD ]
Line_27 $$ ShardRouting firstRouting = TestShardRouting.newShardRouting("test", 0, "node2", null, null, true, ShardRoutingState.STARTED, 1)-->Line_30 $$ RoutingTable.Builder builder = RoutingTable.builder().add(IndexRoutingTable.builder("test").addIndexShard(new IndexShardRoutingTable.Builder(new ShardId("test", 0)).addShard(firstRouting).build()).addIndexShard(new IndexShardRoutingTable.Builder(new ShardId("test", 1)).addShard(secondRouting).build()))[ FD ]
Line_2 $$ public void testForSingleDataNode() -->Line_31 $$ ClusterState clusterState = ClusterState.builder(baseClusterState).routingTable(builder.build()).build()[ CD ]
Line_2 $$ public void testForSingleDataNode() -->Line_20 $$ Map<String, String> dataNodeAttributes = new HashMap()[ CD ]
Line_2 $$ public void testForSingleDataNode() -->Line_67 $$ assertThat(result.routingTable().index("test").getShards().get(1).primaryShard().state(), equalTo(RELOCATING))[ CD ]
Line_29 $$ RoutingNode firstRoutingNode = new RoutingNode("node2", discoveryNode2, Arrays.asList(firstRouting, secondRouting))-->Line_61 $$ decision = diskThresholdDecider.canRemain(firstRouting, firstRoutingNode, routingAllocation)[ FD ]
Line_2 $$ public void testForSingleDataNode() -->Line_66 $$ assertThat(result.routingTable().index("test").getShards().get(0).primaryShard().relocatingNodeId(), nullValue())[ CD ]
Line_2 $$ public void testForSingleDataNode() -->Line_4 $$ ImmutableOpenMap.Builder<String, DiskUsage> usagesBuilder = ImmutableOpenMap.builder()[ CD ]
Line_25 $$ DiscoveryNodes discoveryNodes = DiscoveryNodes.builder().put(discoveryNode1).put(discoveryNode2).build()-->Line_26 $$ ClusterState baseClusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).nodes(discoveryNodes).build()[ FD ]
Line_2 $$ public void testForSingleDataNode() -->Line_69 $$ assertThat(result.routingTable().index("test").getShards().get(1).primaryShard().relocatingNodeId(), equalTo("node3"))[ CD ]
Line_31 $$ ClusterState clusterState = ClusterState.builder(baseClusterState).routingTable(builder.build()).build()-->Line_63 $$ result = strategy.reroute(clusterState, "reroute")[ FD ]
Line_2 $$ public void testForSingleDataNode() -->Line_22 $$ dataNodeAttributes.put("data", "true")[ CD ]
Line_2 $$ public void testForSingleDataNode() -->Line_6 $$ usagesBuilder.put("node2", new DiskUsage("node2", "n2", "/dev/null", 100, 20))[ CD ]
Line_2 $$ public void testForSingleDataNode() -->Line_13 $$ DiskThresholdDecider diskThresholdDecider = new DiskThresholdDecider(diskSettings)[ CD ]
Line_2 $$ public void testForSingleDataNode() -->Line_24 $$ DiscoveryNode discoveryNode2 = new DiscoveryNode("", "node2", new LocalTransportAddress("2"), dataNodeAttributes, Version.CURRENT)[ CD ]
Line_2 $$ public void testForSingleDataNode() -->Line_8 $$ ImmutableOpenMap<String, DiskUsage> usages = usagesBuilder.build()[ CD ]
Line_2 $$ public void testForSingleDataNode() -->Line_27 $$ ShardRouting firstRouting = TestShardRouting.newShardRouting("test", 0, "node2", null, null, true, ShardRoutingState.STARTED, 1)[ CD ]
Line_32 $$ RoutingAllocation routingAllocation = new RoutingAllocation(null, new RoutingNodes(clusterState), discoveryNodes, clusterInfo, System.nanoTime())-->Line_33 $$ Decision decision = diskThresholdDecider.canRemain(firstRouting, firstRoutingNode, routingAllocation)[ FD ]
Line_2 $$ public void testForSingleDataNode() -->Line_47 $$ assertThat(result.routingTable().index("test").getShards().get(0).primaryShard().currentNodeId(), equalTo("node2"))[ CD ]
Line_9 $$ ImmutableOpenMap.Builder<String, Long> shardSizes = ImmutableOpenMap.builder()-->Line_12 $$ final ClusterInfo clusterInfo = new DevNullClusterInfo(usages, usages, shardSizes.build())[ FD ]
Line_20 $$ Map<String, String> dataNodeAttributes = new HashMap()-->Line_22 $$ dataNodeAttributes.put("data", "true")[ FD ]
Line_2 $$ public void testForSingleDataNode() -->Line_54 $$ ClusterState updateClusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).put(discoveryNode3)).build()[ CD ]
Line_2 $$ public void testForSingleDataNode() -->Line_12 $$ final ClusterInfo clusterInfo = new DevNullClusterInfo(usages, usages, shardSizes.build())[ CD ]
Line_2 $$ public void testForSingleDataNode() -->Line_63 $$ result = strategy.reroute(clusterState, "reroute")[ CD ]
Line_2 $$ public void testForSingleDataNode() -->Line_9 $$ ImmutableOpenMap.Builder<String, Long> shardSizes = ImmutableOpenMap.builder()[ CD ]
Line_30 $$ RoutingTable.Builder builder = RoutingTable.builder().add(IndexRoutingTable.builder("test").addIndexShard(new IndexShardRoutingTable.Builder(new ShardId("test", 0)).addShard(firstRouting).build()).addIndexShard(new IndexShardRoutingTable.Builder(new ShardId("test", 1)).addShard(secondRouting).build()))-->Line_31 $$ ClusterState clusterState = ClusterState.builder(baseClusterState).routingTable(builder.build()).build()[ FD ]
Line_2 $$ public void testForSingleDataNode() -->Line_33 $$ Decision decision = diskThresholdDecider.canRemain(firstRouting, firstRoutingNode, routingAllocation)[ CD ]
Line_2 $$ public void testForSingleDataNode() -->Line_26 $$ ClusterState baseClusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).nodes(discoveryNodes).build()[ CD ]
Line_2 $$ public void testForSingleDataNode() -->Line_21 $$ dataNodeAttributes.put("master", "false")[ CD ]
Line_24 $$ DiscoveryNode discoveryNode2 = new DiscoveryNode("", "node2", new LocalTransportAddress("2"), dataNodeAttributes, Version.CURRENT)-->Line_25 $$ DiscoveryNodes discoveryNodes = DiscoveryNodes.builder().put(discoveryNode1).put(discoveryNode2).build()[ FD ]
Line_28 $$ ShardRouting secondRouting = TestShardRouting.newShardRouting("test", 1, "node2", null, null, true, ShardRoutingState.STARTED, 1)-->Line_30 $$ RoutingTable.Builder builder = RoutingTable.builder().add(IndexRoutingTable.builder("test").addIndexShard(new IndexShardRoutingTable.Builder(new ShardId("test", 0)).addShard(firstRouting).build()).addIndexShard(new IndexShardRoutingTable.Builder(new ShardId("test", 1)).addShard(secondRouting).build()))[ FD ]
Line_2 $$ public void testForSingleDataNode() -->Line_51 $$ assertThat(result.routingTable().index("test").getShards().get(1).primaryShard().relocatingNodeId(), nullValue())[ CD ]
Line_2 $$ public void testForSingleDataNode() -->Line_35 $$ ClusterInfoService cis = new ClusterInfoService() [ CD ]
Line_31 $$ ClusterState clusterState = ClusterState.builder(baseClusterState).routingTable(builder.build()).build()-->Line_45 $$ RoutingAllocation.Result result = strategy.reroute(clusterState, "reroute")[ FD ]
