Line_2 $$ private Map<Integer, Integer> buildExceptionDoms(Integer id) -->Line_4 $$ Set<Integer> children = mapTreeBranches.get(id)[ FD ]
Line_2 $$ private Map<Integer, Integer> buildExceptionDoms(Integer id) -->Line_15 $$ map.put(entry.getKey(), id)[ FD ]
Line_7 $$ Map<Integer, Integer> mapChild = buildExceptionDoms(childid)-->Line_9 $$ map.put(handler, map.containsKey(handler) ? id : mapChild.get(handler))[ FD ]
Line_2 $$ private Map<Integer, Integer> buildExceptionDoms(Integer id) -->Line_4 $$ Set<Integer> children = mapTreeBranches.get(id)[ CD ]
Line_2 $$ private Map<Integer, Integer> buildExceptionDoms(Integer id) -->Line_14 $$ if (entry.getValue().contains(id)) [ FD ]
Line_8 $$ for (Integer handler : mapChild.keySet()) -->Line_9 $$ map.put(handler, map.containsKey(handler) ? id : mapChild.get(handler))[ FD ]
Line_13 $$ for (Entry<Integer, Set<Integer>> entry : mapExceptionRanges.entrySet()) -->Line_15 $$ map.put(entry.getKey(), id)[ FD ]
Line_2 $$ private Map<Integer, Integer> buildExceptionDoms(Integer id) -->Line_5 $$ if (children != null) [ CD ]
Line_3 $$ Map<Integer, Integer> map = new HashMap<Integer, Integer>()-->Line_15 $$ map.put(entry.getKey(), id)[ FD ]
Line_6 $$ for (Integer childid : children) -->Line_7 $$ Map<Integer, Integer> mapChild = buildExceptionDoms(childid)[ FD ]
Line_13 $$ for (Entry<Integer, Set<Integer>> entry : mapExceptionRanges.entrySet()) -->Line_14 $$ if (entry.getValue().contains(id)) [ FD ]
Line_4 $$ Set<Integer> children = mapTreeBranches.get(id)-->Line_5 $$ if (children != null) [ FD ]
Line_14 $$ if (entry.getValue().contains(id)) -->Line_15 $$ map.put(entry.getKey(), id)[ CD ]
Line_7 $$ Map<Integer, Integer> mapChild = buildExceptionDoms(childid)-->Line_8 $$ for (Integer handler : mapChild.keySet()) [ FD ]
Line_2 $$ private Map<Integer, Integer> buildExceptionDoms(Integer id) -->Line_18 $$ return map[ CD ]
Line_3 $$ Map<Integer, Integer> map = new HashMap<Integer, Integer>()-->Line_9 $$ map.put(handler, map.containsKey(handler) ? id : mapChild.get(handler))[ FD ]
Line_2 $$ private Map<Integer, Integer> buildExceptionDoms(Integer id) -->Line_3 $$ Map<Integer, Integer> map = new HashMap<Integer, Integer>()[ CD ]
