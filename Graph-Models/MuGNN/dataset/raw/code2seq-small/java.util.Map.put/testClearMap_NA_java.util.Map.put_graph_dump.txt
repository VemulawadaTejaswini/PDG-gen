Line_2 $$ public void testClearMap() -->Line_5 $$ User user = new User()[ CD ]
Line_3 $$ Session s = openSession()-->Line_19 $$ s.getTransaction().commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_20 $$ s.getTransaction().begin()[ FD ]
Line_5 $$ User user = new User()-->Line_7 $$ userData.user = user[ FD ]
Line_2 $$ public void testClearMap() -->Line_12 $$ s.beginTransaction()[ CD ]
Line_3 $$ Session s = openSession()-->Line_15 $$ s.update(user)[ FD ]
Line_2 $$ public void testClearMap() -->Line_22 $$ assertEquals(s.createQuery("FROM " + UserData.class.getName()).list().size(), 0)[ CD ]
Line_3 $$ Session s = openSession()-->Line_12 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testClearMap() -->Line_13 $$ user = s.get(User.class, 1)[ CD ]
Line_2 $$ public void testClearMap() -->Line_23 $$ s.createQuery("delete " + User.class.getName()).executeUpdate()[ CD ]
Line_2 $$ public void testClearMap() -->Line_25 $$ s.close()[ CD ]
Line_13 $$ user = s.get(User.class, 1)-->Line_17 $$ q.setParameter("user", user)[ FD ]
Line_5 $$ User user = new User()-->Line_9 $$ s.persist(user)[ FD ]
Line_3 $$ Session s = openSession()-->Line_24 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testClearMap() -->Line_24 $$ s.getTransaction().commit()[ CD ]
Line_3 $$ Session s = openSession()-->Line_22 $$ assertEquals(s.createQuery("FROM " + UserData.class.getName()).list().size(), 0)[ FD ]
Line_2 $$ public void testClearMap() -->Line_18 $$ q.executeUpdate()[ CD ]
Line_6 $$ UserData userData = new UserData()-->Line_8 $$ user.userDatas.put("foo", userData)[ FD ]
Line_2 $$ public void testClearMap() -->Line_7 $$ userData.user = user[ CD ]
Line_2 $$ public void testClearMap() -->Line_6 $$ UserData userData = new UserData()[ CD ]
Line_2 $$ public void testClearMap() -->Line_9 $$ s.persist(user)[ CD ]
Line_2 $$ public void testClearMap() -->Line_19 $$ s.getTransaction().commit()[ CD ]
Line_3 $$ Session s = openSession()-->Line_16 $$ Query q = s.createQuery("DELETE FROM " + UserData.class.getName() + " d WHERE d.user = :user")[ FD ]
Line_16 $$ Query q = s.createQuery("DELETE FROM " + UserData.class.getName() + " d WHERE d.user = :user")-->Line_18 $$ q.executeUpdate()[ FD ]
Line_2 $$ public void testClearMap() -->Line_17 $$ q.setParameter("user", user)[ CD ]
Line_2 $$ public void testClearMap() -->Line_16 $$ Query q = s.createQuery("DELETE FROM " + UserData.class.getName() + " d WHERE d.user = :user")[ CD ]
Line_3 $$ Session s = openSession()-->Line_25 $$ s.close()[ FD ]
Line_5 $$ User user = new User()-->Line_17 $$ q.setParameter("user", user)[ FD ]
Line_3 $$ Session s = openSession()-->Line_9 $$ s.persist(user)[ FD ]
Line_2 $$ public void testClearMap() -->Line_4 $$ s.beginTransaction()[ CD ]
Line_3 $$ Session s = openSession()-->Line_10 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testClearMap() -->Line_15 $$ s.update(user)[ CD ]
Line_2 $$ public void testClearMap() -->Line_3 $$ Session s = openSession()[ CD ]
Line_2 $$ public void testClearMap() -->Line_14 $$ user.userDatas.clear()[ CD ]
Line_5 $$ User user = new User()-->Line_15 $$ s.update(user)[ FD ]
Line_2 $$ public void testClearMap() -->Line_21 $$ assertEquals(s.get(User.class, user.id).userDatas.size(), 0)[ CD ]
Line_2 $$ public void testClearMap() -->Line_8 $$ user.userDatas.put("foo", userData)[ CD ]
Line_3 $$ Session s = openSession()-->Line_23 $$ s.createQuery("delete " + User.class.getName()).executeUpdate()[ FD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ s.beginTransaction()[ FD ]
Line_16 $$ Query q = s.createQuery("DELETE FROM " + UserData.class.getName() + " d WHERE d.user = :user")-->Line_17 $$ q.setParameter("user", user)[ FD ]
Line_13 $$ user = s.get(User.class, 1)-->Line_15 $$ s.update(user)[ FD ]
Line_2 $$ public void testClearMap() -->Line_20 $$ s.getTransaction().begin()[ CD ]
Line_2 $$ public void testClearMap() -->Line_11 $$ s.clear()[ CD ]
Line_3 $$ Session s = openSession()-->Line_11 $$ s.clear()[ FD ]
Line_3 $$ Session s = openSession()-->Line_13 $$ user = s.get(User.class, 1)[ FD ]
Line_5 $$ User user = new User()-->Line_13 $$ user = s.get(User.class, 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_21 $$ assertEquals(s.get(User.class, user.id).userDatas.size(), 0)[ FD ]
Line_2 $$ public void testClearMap() -->Line_10 $$ s.getTransaction().commit()[ CD ]
