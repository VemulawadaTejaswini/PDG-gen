Line_64 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_73 $$ List<Object[]> list = (List<Object[]>) QueryUtil.list(q, getDialect(), QueryUtil.ALL_POS, QueryUtil.ALL_POS)[ FD ]
Line_7 $$ Session session = null-->Line_10 $$ session = openSession()[ FD ]
Line_17 $$ sb = new StringBundler(13)-->Line_49 $$ sb.append(" UNION ALL ")[ FD ]
Line_17 $$ sb = new StringBundler(13)-->Line_33 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_2 $$ public Map<Long, Integer> countByGroups(long companyId, int status, long[] groupIds) -->Line_3 $$ if (ArrayUtil.isEmpty(groupIds)) [ CD ]
Line_17 $$ sb = new StringBundler(13)-->Line_60 $$ String sql = StringUtil.replace(sb.toString(), "[$GROUP_ID$]", StringPool.OPEN_PARENTHESIS + StringUtil.merge(groupIds) + StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_2 $$ public Map<Long, Integer> countByGroups(long companyId, int status, long[] groupIds) -->Line_60 $$ String sql = StringUtil.replace(sb.toString(), "[$GROUP_ID$]", StringPool.OPEN_PARENTHESIS + StringUtil.merge(groupIds) + StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_2 $$ public Map<Long, Integer> countByGroups(long companyId, int status, long[] groupIds) -->Line_3 $$ if (ArrayUtil.isEmpty(groupIds)) [ FD ]
Line_11 $$ StringBundler sb = null-->Line_60 $$ String sql = StringUtil.replace(sb.toString(), "[$GROUP_ID$]", StringPool.OPEN_PARENTHESIS + StringUtil.merge(groupIds) + StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_15 $$ sb = new StringBundler(19)-->Line_43 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_17 $$ sb = new StringBundler(13)-->Line_25 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_15 $$ sb = new StringBundler(19)-->Line_45 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_11 $$ StringBundler sb = null-->Line_51 $$ sb.append("SELECT userId, groupId FROM ")[ FD ]
Line_15 $$ sb = new StringBundler(19)-->Line_44 $$ sb.append(CustomSQLUtil.get(FIND_BY_USERS_ORGS_GROUP))[ FD ]
Line_15 $$ sb = new StringBundler(19)-->Line_31 $$ sb.append("SELECT userId, groupId FROM ")[ FD ]
Line_11 $$ StringBundler sb = null-->Line_25 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_30 $$ if (sybase) -->Line_31 $$ sb.append("SELECT userId, groupId FROM ")[ CD ]
Line_11 $$ StringBundler sb = null-->Line_24 $$ sb.append(CustomSQLUtil.get(FIND_BY_USERS_GROUPS))[ FD ]
Line_64 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_65 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_17 $$ sb = new StringBundler(13)-->Line_57 $$ sb.append(" USERS_USER_GROUPS")[ FD ]
Line_10 $$ session = openSession()-->Line_64 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_11 $$ StringBundler sb = null-->Line_29 $$ sb.append(" UNION ALL ")[ FD ]
Line_15 $$ sb = new StringBundler(19)-->Line_39 $$ sb.append(" UNION ALL ")[ FD ]
Line_15 $$ sb = new StringBundler(19)-->Line_59 $$ sb.append(") TEMP_TABLE GROUP BY groupId")[ FD ]
Line_17 $$ sb = new StringBundler(13)-->Line_24 $$ sb.append(CustomSQLUtil.get(FIND_BY_USERS_GROUPS))[ FD ]
Line_9 $$ Map<Long, Integer> counts = new HashMap()-->Line_77 $$ counts.put(groupId.longValue(), count.intValue())[ FD ]
Line_61 $$ if (status == WorkflowConstants.STATUS_ANY) -->Line_62 $$ sql = StringUtil.replace(sql, _STATUS_SQL, StringPool.BLANK)[ CD ]
Line_66 $$ for (int i = 0; i < 4; i++) -->Line_68 $$ qPos.add(false)[ CD ]
Line_15 $$ sb = new StringBundler(19)-->Line_41 $$ sb.append("SELECT userId, groupId FROM ")[ FD ]
Line_7 $$ Session session = null-->Line_64 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_17 $$ sb = new StringBundler(13)-->Line_34 $$ sb.append(CustomSQLUtil.get(FIND_BY_USERS_ORGS))[ FD ]
Line_15 $$ sb = new StringBundler(19)-->Line_25 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_3 $$ if (ArrayUtil.isEmpty(groupIds)) -->Line_4 $$ return Collections.emptyMap()[ CD ]
Line_17 $$ sb = new StringBundler(13)-->Line_37 $$ sb.append(" USERS_ORGS")[ FD ]
Line_60 $$ String sql = StringUtil.replace(sb.toString(), "[$GROUP_ID$]", StringPool.OPEN_PARENTHESIS + StringUtil.merge(groupIds) + StringPool.CLOSE_PARENTHESIS)-->Line_64 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_11 $$ StringBundler sb = null-->Line_21 $$ sb.append("SELECT userId, groupId FROM ")[ FD ]
Line_11 $$ StringBundler sb = null-->Line_37 $$ sb.append(" USERS_ORGS")[ FD ]
Line_60 $$ String sql = StringUtil.replace(sb.toString(), "[$GROUP_ID$]", StringPool.OPEN_PARENTHESIS + StringUtil.merge(groupIds) + StringPool.CLOSE_PARENTHESIS)-->Line_62 $$ sql = StringUtil.replace(sql, _STATUS_SQL, StringPool.BLANK)[ FD ]
Line_15 $$ sb = new StringBundler(19)-->Line_53 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_11 $$ StringBundler sb = null-->Line_49 $$ sb.append(" UNION ALL ")[ FD ]
Line_11 $$ StringBundler sb = null-->Line_31 $$ sb.append("SELECT userId, groupId FROM ")[ FD ]
Line_26 $$ if (sybase) -->Line_27 $$ sb.append(" USERS_GROUPS")[ CD ]
Line_17 $$ sb = new StringBundler(13)-->Line_44 $$ sb.append(CustomSQLUtil.get(FIND_BY_USERS_ORGS_GROUP))[ FD ]
Line_2 $$ public Map<Long, Integer> countByGroups(long companyId, int status, long[] groupIds) -->Line_61 $$ if (status == WorkflowConstants.STATUS_ANY) [ FD ]
Line_62 $$ sql = StringUtil.replace(sql, _STATUS_SQL, StringPool.BLANK)-->Line_64 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_11 $$ StringBundler sb = null-->Line_57 $$ sb.append(" USERS_USER_GROUPS")[ FD ]
Line_15 $$ sb = new StringBundler(19)-->Line_60 $$ String sql = StringUtil.replace(sb.toString(), "[$GROUP_ID$]", StringPool.OPEN_PARENTHESIS + StringUtil.merge(groupIds) + StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_14 $$ if (sybase) -->Line_17 $$ sb = new StringBundler(13)[ CD ]
Line_12 $$ DB db = getDB()-->Line_13 $$ boolean sybase = db.getDBType() == DBType.SYBASE[ FD ]
Line_17 $$ sb = new StringBundler(13)-->Line_53 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_15 $$ sb = new StringBundler(19)-->Line_17 $$ sb = new StringBundler(13)[ FD ]
Line_15 $$ sb = new StringBundler(19)-->Line_33 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_10 $$ session = openSession()-->Line_83 $$ closeSession(session)[ FD ]
Line_17 $$ sb = new StringBundler(13)-->Line_54 $$ sb.append(CustomSQLUtil.get(FIND_BY_USERS_USER_GROUPS))[ FD ]
Line_11 $$ StringBundler sb = null-->Line_15 $$ sb = new StringBundler(19)[ FD ]
Line_2 $$ public Map<Long, Integer> countByGroups(long companyId, int status, long[] groupIds) -->Line_6 $$ Arrays.sort(groupIds)[ CD ]
Line_2 $$ public Map<Long, Integer> countByGroups(long companyId, int status, long[] groupIds) -->Line_7 $$ Session session = null[ CD ]
Line_2 $$ public Map<Long, Integer> countByGroups(long companyId, int status, long[] groupIds) -->Line_67 $$ qPos.add(companyId)[ FD ]
Line_15 $$ sb = new StringBundler(19)-->Line_34 $$ sb.append(CustomSQLUtil.get(FIND_BY_USERS_ORGS))[ FD ]
Line_17 $$ sb = new StringBundler(13)-->Line_43 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_15 $$ sb = new StringBundler(19)-->Line_35 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_17 $$ sb = new StringBundler(13)-->Line_31 $$ sb.append("SELECT userId, groupId FROM ")[ FD ]
Line_65 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_70 $$ qPos.add(status)[ FD ]
Line_17 $$ sb = new StringBundler(13)-->Line_21 $$ sb.append("SELECT userId, groupId FROM ")[ FD ]
Line_2 $$ public Map<Long, Integer> countByGroups(long companyId, int status, long[] groupIds) -->Line_70 $$ qPos.add(status)[ FD ]
Line_46 $$ if (sybase) -->Line_47 $$ sb.append(" USERS_ORGS_GROUP")[ CD ]
Line_11 $$ StringBundler sb = null-->Line_47 $$ sb.append(" USERS_ORGS_GROUP")[ FD ]
Line_17 $$ sb = new StringBundler(13)-->Line_23 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_11 $$ StringBundler sb = null-->Line_27 $$ sb.append(" USERS_GROUPS")[ FD ]
Line_15 $$ sb = new StringBundler(19)-->Line_51 $$ sb.append("SELECT userId, groupId FROM ")[ FD ]
Line_69 $$ if (status != WorkflowConstants.STATUS_ANY) -->Line_70 $$ qPos.add(status)[ CD ]
Line_36 $$ if (sybase) -->Line_37 $$ sb.append(" USERS_ORGS")[ CD ]
Line_11 $$ StringBundler sb = null-->Line_41 $$ sb.append("SELECT userId, groupId FROM ")[ FD ]
Line_65 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_68 $$ qPos.add(false)[ FD ]
Line_17 $$ sb = new StringBundler(13)-->Line_45 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_7 $$ Session session = null-->Line_83 $$ closeSession(session)[ FD ]
Line_17 $$ sb = new StringBundler(13)-->Line_35 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_20 $$ if (sybase) -->Line_21 $$ sb.append("SELECT userId, groupId FROM ")[ CD ]
Line_15 $$ sb = new StringBundler(19)-->Line_47 $$ sb.append(" USERS_ORGS_GROUP")[ FD ]
Line_2 $$ public Map<Long, Integer> countByGroups(long companyId, int status, long[] groupIds) -->Line_69 $$ if (status != WorkflowConstants.STATUS_ANY) [ FD ]
Line_15 $$ sb = new StringBundler(19)-->Line_27 $$ sb.append(" USERS_GROUPS")[ FD ]
Line_17 $$ sb = new StringBundler(13)-->Line_59 $$ sb.append(") TEMP_TABLE GROUP BY groupId")[ FD ]
Line_14 $$ if (sybase) -->Line_15 $$ sb = new StringBundler(19)[ CD ]
Line_11 $$ StringBundler sb = null-->Line_19 $$ sb.append("SELECT groupId, COUNT(DISTINCT userId) FROM (")[ FD ]
Line_15 $$ sb = new StringBundler(19)-->Line_54 $$ sb.append(CustomSQLUtil.get(FIND_BY_USERS_USER_GROUPS))[ FD ]
Line_11 $$ StringBundler sb = null-->Line_35 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_11 $$ StringBundler sb = null-->Line_53 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_11 $$ StringBundler sb = null-->Line_44 $$ sb.append(CustomSQLUtil.get(FIND_BY_USERS_ORGS_GROUP))[ FD ]
Line_15 $$ sb = new StringBundler(19)-->Line_29 $$ sb.append(" UNION ALL ")[ FD ]
Line_56 $$ if (sybase) -->Line_57 $$ sb.append(" USERS_USER_GROUPS")[ CD ]
Line_15 $$ sb = new StringBundler(19)-->Line_21 $$ sb.append("SELECT userId, groupId FROM ")[ FD ]
Line_15 $$ sb = new StringBundler(19)-->Line_24 $$ sb.append(CustomSQLUtil.get(FIND_BY_USERS_GROUPS))[ FD ]
Line_15 $$ sb = new StringBundler(19)-->Line_19 $$ sb.append("SELECT groupId, COUNT(DISTINCT userId) FROM (")[ FD ]
Line_17 $$ sb = new StringBundler(13)-->Line_19 $$ sb.append("SELECT groupId, COUNT(DISTINCT userId) FROM (")[ FD ]
Line_11 $$ StringBundler sb = null-->Line_54 $$ sb.append(CustomSQLUtil.get(FIND_BY_USERS_USER_GROUPS))[ FD ]
Line_17 $$ sb = new StringBundler(13)-->Line_55 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_40 $$ if (sybase) -->Line_41 $$ sb.append("SELECT userId, groupId FROM ")[ CD ]
Line_15 $$ sb = new StringBundler(19)-->Line_55 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_15 $$ sb = new StringBundler(19)-->Line_37 $$ sb.append(" USERS_ORGS")[ FD ]
Line_17 $$ sb = new StringBundler(13)-->Line_41 $$ sb.append("SELECT userId, groupId FROM ")[ FD ]
Line_11 $$ StringBundler sb = null-->Line_45 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_15 $$ sb = new StringBundler(19)-->Line_49 $$ sb.append(" UNION ALL ")[ FD ]
Line_11 $$ StringBundler sb = null-->Line_23 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_76 $$ Number count = (Number) objects[1]-->Line_77 $$ counts.put(groupId.longValue(), count.intValue())[ FD ]
Line_11 $$ StringBundler sb = null-->Line_34 $$ sb.append(CustomSQLUtil.get(FIND_BY_USERS_ORGS))[ FD ]
Line_11 $$ StringBundler sb = null-->Line_59 $$ sb.append(") TEMP_TABLE GROUP BY groupId")[ FD ]
Line_66 $$ for (int i = 0; i < 4; i++) -->Line_69 $$ if (status != WorkflowConstants.STATUS_ANY) [ CD ]
Line_75 $$ Number groupId = (Number) objects[0]-->Line_77 $$ counts.put(groupId.longValue(), count.intValue())[ FD ]
Line_17 $$ sb = new StringBundler(13)-->Line_47 $$ sb.append(" USERS_ORGS_GROUP")[ FD ]
Line_17 $$ sb = new StringBundler(13)-->Line_29 $$ sb.append(" UNION ALL ")[ FD ]
Line_65 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_67 $$ qPos.add(companyId)[ FD ]
Line_2 $$ public Map<Long, Integer> countByGroups(long companyId, int status, long[] groupIds) -->Line_6 $$ Arrays.sort(groupIds)[ FD ]
Line_11 $$ StringBundler sb = null-->Line_39 $$ sb.append(" UNION ALL ")[ FD ]
Line_11 $$ StringBundler sb = null-->Line_17 $$ sb = new StringBundler(13)[ FD ]
Line_66 $$ for (int i = 0; i < 4; i++) -->Line_67 $$ qPos.add(companyId)[ CD ]
Line_17 $$ sb = new StringBundler(13)-->Line_51 $$ sb.append("SELECT userId, groupId FROM ")[ FD ]
Line_17 $$ sb = new StringBundler(13)-->Line_39 $$ sb.append(" UNION ALL ")[ FD ]
Line_15 $$ sb = new StringBundler(19)-->Line_23 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_15 $$ sb = new StringBundler(19)-->Line_57 $$ sb.append(" USERS_USER_GROUPS")[ FD ]
Line_11 $$ StringBundler sb = null-->Line_55 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_50 $$ if (sybase) -->Line_51 $$ sb.append("SELECT userId, groupId FROM ")[ CD ]
Line_11 $$ StringBundler sb = null-->Line_43 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_17 $$ sb = new StringBundler(13)-->Line_27 $$ sb.append(" USERS_GROUPS")[ FD ]
Line_11 $$ StringBundler sb = null-->Line_33 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
