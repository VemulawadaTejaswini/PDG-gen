Line_2 $$ public void renderSimpleBean() throws Exception -->Line_11 $$ validateResult()[ CD ]
Line_2 $$ public void renderSimpleBean() throws Exception -->Line_6 $$ model.put("foo", bean)[ CD ]
Line_2 $$ public void renderSimpleBean() throws Exception -->Line_10 $$ assertEquals(response.getContentAsString().length(), response.getContentLength())[ CD ]
Line_2 $$ public void renderSimpleBean() throws Exception -->Line_8 $$ view.render(model, request, response)[ CD ]
Line_4 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_5 $$ model.put("bindingResult", mock(BindingResult.class, "binding_result"))[ FD ]
Line_4 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_8 $$ view.render(model, request, response)[ FD ]
Line_2 $$ public void renderSimpleBean() throws Exception -->Line_3 $$ Object bean = new TestBeanSimple()[ CD ]
Line_2 $$ public void renderSimpleBean() throws Exception -->Line_5 $$ model.put("bindingResult", mock(BindingResult.class, "binding_result"))[ CD ]
Line_3 $$ Object bean = new TestBeanSimple()-->Line_6 $$ model.put("foo", bean)[ FD ]
Line_2 $$ public void renderSimpleBean() throws Exception -->Line_7 $$ view.setUpdateContentLength(true)[ CD ]
Line_4 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_6 $$ model.put("foo", bean)[ FD ]
Line_2 $$ public void renderSimpleBean() throws Exception -->Line_4 $$ Map<String, Object> model = new HashMap<String, Object>()[ CD ]
Line_2 $$ public void renderSimpleBean() throws Exception -->Line_9 $$ assertTrue(response.getContentAsString().length() > 0)[ CD ]
