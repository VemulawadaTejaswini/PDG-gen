Line_2 $$ static Map<String, Policy> getPluginPermissions() throws Exception -->Line_7 $$ Set<URL> codebases = new HashSet(Arrays.asList(parseClassPathWithSymlinks()))[ CD ]
Line_23 $$ for (Policy p : policies) -->Line_24 $$ if (p.implies(domain, permission)) [ FD ]
Line_2 $$ static Map<String, Policy> getPluginPermissions() throws Exception -->Line_3 $$ List<URL> pluginPolicies = Collections.list(BootstrapForTesting.class.getClassLoader().getResources(PluginInfo.ES_PLUGIN_POLICY))[ CD ]
Line_16 $$ for (URL policyFile : pluginPolicies) -->Line_17 $$ policies.add(Security.readPolicy(policyFile, codebases.toArray(new URL[codebases.size()])))[ FD ]
Line_2 $$ static Map<String, Policy> getPluginPermissions() throws Exception -->Line_32 $$ return Collections.unmodifiableMap(map)[ CD ]
Line_21 $$ map.put(url.getFile(), new Policy() -->Line_28 $$ return false[ CD ]
Line_2 $$ static Map<String, Policy> getPluginPermissions() throws Exception -->Line_14 $$ codebases.removeAll(excluded)[ CD ]
Line_3 $$ List<URL> pluginPolicies = Collections.list(BootstrapForTesting.class.getClassLoader().getResources(PluginInfo.ES_PLUGIN_POLICY))-->Line_4 $$ if (pluginPolicies.isEmpty()) [ FD ]
Line_7 $$ Set<URL> codebases = new HashSet(Arrays.asList(parseClassPathWithSymlinks()))-->Line_17 $$ policies.add(Security.readPolicy(policyFile, codebases.toArray(new URL[codebases.size()])))[ FD ]
Line_24 $$ if (p.implies(domain, permission)) -->Line_25 $$ return true[ CD ]
Line_19 $$ Map<String, Policy> map = new HashMap()-->Line_21 $$ map.put(url.getFile(), new Policy() [ FD ]
Line_8 $$ Set<URL> excluded = new HashSet(Arrays.asList(Bootstrap.class.getProtectionDomain().getCodeSource().getLocation(), BootstrapForTesting.class.getProtectionDomain().getCodeSource().getLocation(), LuceneTestCase.class.getProtectionDomain().getCodeSource().getLocation(), RandomizedRunner.class.getProtectionDomain().getCodeSource().getLocation(), Assert.class.getProtectionDomain().getCodeSource().getLocation()))-->Line_14 $$ codebases.removeAll(excluded)[ FD ]
Line_2 $$ static Map<String, Policy> getPluginPermissions() throws Exception -->Line_8 $$ Set<URL> excluded = new HashSet(Arrays.asList(Bootstrap.class.getProtectionDomain().getCodeSource().getLocation(), BootstrapForTesting.class.getProtectionDomain().getCodeSource().getLocation(), LuceneTestCase.class.getProtectionDomain().getCodeSource().getLocation(), RandomizedRunner.class.getProtectionDomain().getCodeSource().getLocation(), Assert.class.getProtectionDomain().getCodeSource().getLocation()))[ CD ]
Line_7 $$ Set<URL> codebases = new HashSet(Arrays.asList(parseClassPathWithSymlinks()))-->Line_14 $$ codebases.removeAll(excluded)[ FD ]
Line_21 $$ map.put(url.getFile(), new Policy() -->Line_24 $$ if (p.implies(domain, permission)) [ FD ]
Line_2 $$ static Map<String, Policy> getPluginPermissions() throws Exception -->Line_15 $$ final List<Policy> policies = new ArrayList()[ CD ]
Line_20 $$ for (URL url : codebases) -->Line_21 $$ map.put(url.getFile(), new Policy() [ FD ]
Line_19 $$ Map<String, Policy> map = new HashMap()-->Line_32 $$ return Collections.unmodifiableMap(map)[ FD ]
Line_2 $$ static Map<String, Policy> getPluginPermissions() throws Exception -->Line_19 $$ Map<String, Policy> map = new HashMap()[ CD ]
Line_4 $$ if (pluginPolicies.isEmpty()) -->Line_5 $$ return Collections.emptyMap()[ CD ]
Line_2 $$ static Map<String, Policy> getPluginPermissions() throws Exception -->Line_4 $$ if (pluginPolicies.isEmpty()) [ CD ]
Line_15 $$ final List<Policy> policies = new ArrayList()-->Line_17 $$ policies.add(Security.readPolicy(policyFile, codebases.toArray(new URL[codebases.size()])))[ FD ]
