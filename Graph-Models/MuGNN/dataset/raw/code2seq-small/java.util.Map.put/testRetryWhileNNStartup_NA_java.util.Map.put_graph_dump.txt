Line_17 $$ FileSystem fs = null-->Line_21 $$ result = fs.mkdirs(dir)[ FD ]
Line_14 $$ new Thread() -->Line_17 $$ FileSystem fs = null[ CD ]
Line_20 $$ final Path dir = new Path("/test")-->Line_21 $$ result = fs.mkdirs(dir)[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_9 $$ cluster.waitActive()[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_8 $$ HATestUtil.setFailoverConfigurations(cluster, conf, LOGICAL_NAME)[ FD ]
Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).nnTopology(topo).numDataNodes(0).build()-->Line_10 $$ cluster.transitionToActive(0)[ FD ]
Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).nnTopology(topo).numDataNodes(0).build()-->Line_43 $$ cluster.shutdown()[ FD ]
Line_19 $$ fs = FileSystem.get(WEBHDFS_URI, conf)-->Line_21 $$ result = fs.mkdirs(dir)[ FD ]
Line_11 $$ final NameNode namenode = cluster.getNameNode(0)-->Line_34 $$ Whitebox.setInternalState(namenode, "rpcServer", rpcServer)[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_10 $$ cluster.transitionToActive(0)[ FD ]
Line_16 $$ boolean result = false-->Line_28 $$ resultMap.put("mkdirs", result)[ FD ]
Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).nnTopology(topo).numDataNodes(0).build()-->Line_9 $$ cluster.waitActive()[ FD ]
Line_2 $$ public void testRetryWhileNNStartup() throws Exception -->Line_3 $$ final Configuration conf = DFSTestUtil.newHAConfiguration(LOGICAL_NAME)[ CD ]
Line_11 $$ final NameNode namenode = cluster.getNameNode(0)-->Line_13 $$ Whitebox.setInternalState(namenode, "rpcServer", null)[ FD ]
Line_11 $$ final NameNode namenode = cluster.getNameNode(0)-->Line_12 $$ final NamenodeProtocols rpcServer = namenode.getRpcServer()[ FD ]
Line_14 $$ new Thread() -->Line_16 $$ boolean result = false[ CD ]
Line_16 $$ boolean result = false-->Line_21 $$ result = fs.mkdirs(dir)[ FD ]
Line_21 $$ result = fs.mkdirs(dir)-->Line_23 $$ result = false[ FD ]
Line_5 $$ final Map<String, Boolean> resultMap = new HashMap<String, Boolean>()-->Line_28 $$ resultMap.put("mkdirs", result)[ FD ]
Line_23 $$ result = false-->Line_28 $$ resultMap.put("mkdirs", result)[ FD ]
Line_5 $$ final Map<String, Boolean> resultMap = new HashMap<String, Boolean>()-->Line_39 $$ Assert.assertTrue(resultMap.get("mkdirs"))[ FD ]
Line_2 $$ public void testRetryWhileNNStartup() throws Exception -->Line_4 $$ MiniDFSCluster cluster = null[ CD ]
Line_3 $$ final Configuration conf = DFSTestUtil.newHAConfiguration(LOGICAL_NAME)-->Line_19 $$ fs = FileSystem.get(WEBHDFS_URI, conf)[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_43 $$ cluster.shutdown()[ FD ]
Line_42 $$ if (cluster != null) -->Line_43 $$ cluster.shutdown()[ CD ]
Line_5 $$ final Map<String, Boolean> resultMap = new HashMap<String, Boolean>()-->Line_36 $$ while (!resultMap.containsKey("mkdirs")) [ FD ]
Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).nnTopology(topo).numDataNodes(0).build()-->Line_42 $$ if (cluster != null) [ FD ]
Line_12 $$ final NamenodeProtocols rpcServer = namenode.getRpcServer()-->Line_34 $$ Whitebox.setInternalState(namenode, "rpcServer", rpcServer)[ FD ]
Line_21 $$ result = fs.mkdirs(dir)-->Line_28 $$ resultMap.put("mkdirs", result)[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).nnTopology(topo).numDataNodes(0).build()[ FD ]
Line_17 $$ FileSystem fs = null-->Line_19 $$ fs = FileSystem.get(WEBHDFS_URI, conf)[ FD ]
Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).nnTopology(topo).numDataNodes(0).build()-->Line_8 $$ HATestUtil.setFailoverConfigurations(cluster, conf, LOGICAL_NAME)[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_42 $$ if (cluster != null) [ FD ]
Line_17 $$ FileSystem fs = null-->Line_25 $$ IOUtils.cleanup(null, fs)[ FD ]
Line_2 $$ public void testRetryWhileNNStartup() throws Exception -->Line_5 $$ final Map<String, Boolean> resultMap = new HashMap<String, Boolean>()[ CD ]
Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).nnTopology(topo).numDataNodes(0).build()-->Line_11 $$ final NameNode namenode = cluster.getNameNode(0)[ FD ]
Line_19 $$ fs = FileSystem.get(WEBHDFS_URI, conf)-->Line_25 $$ IOUtils.cleanup(null, fs)[ FD ]
Line_3 $$ final Configuration conf = DFSTestUtil.newHAConfiguration(LOGICAL_NAME)-->Line_8 $$ HATestUtil.setFailoverConfigurations(cluster, conf, LOGICAL_NAME)[ FD ]
Line_36 $$ while (!resultMap.containsKey("mkdirs")) -->Line_37 $$ this.wait()[ CD ]
Line_16 $$ boolean result = false-->Line_23 $$ result = false[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_11 $$ final NameNode namenode = cluster.getNameNode(0)[ FD ]
