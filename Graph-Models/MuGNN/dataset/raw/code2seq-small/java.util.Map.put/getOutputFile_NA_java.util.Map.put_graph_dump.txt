Line_7 $$ if (packageFiles == null) -->Line_8 $$ packageFiles = new HashMap<String, JavaFileObject>()[ CD ]
Line_6 $$ Map<String, JavaFileObject> packageFiles = packageMap.get(packageName)-->Line_7 $$ if (packageFiles == null) [ FD ]
Line_7 $$ if (packageFiles == null) -->Line_9 $$ packageMap.put(packageName, packageFiles)[ CD ]
Line_2 $$ protected JavaFileObject getOutputFile(final String className, final URI uri) -->Line_12 $$ classFiles.add(classFile)[ CD ]
Line_6 $$ Map<String, JavaFileObject> packageFiles = packageMap.get(packageName)-->Line_11 $$ packageFiles.put(className, classFile)[ FD ]
Line_8 $$ packageFiles = new HashMap<String, JavaFileObject>()-->Line_9 $$ packageMap.put(packageName, packageFiles)[ FD ]
Line_2 $$ protected JavaFileObject getOutputFile(final String className, final URI uri) -->Line_11 $$ packageFiles.put(className, classFile)[ CD ]
Line_2 $$ protected JavaFileObject getOutputFile(final String className, final URI uri) -->Line_11 $$ packageFiles.put(className, classFile)[ FD ]
Line_2 $$ protected JavaFileObject getOutputFile(final String className, final URI uri) -->Line_4 $$ String packageName = className.substring(0, className.lastIndexOf("."))[ FD ]
Line_2 $$ protected JavaFileObject getOutputFile(final String className, final URI uri) -->Line_5 $$ Map<String, Map<String, JavaFileObject>> packageMap = rtctxt.getPackageMap()[ CD ]
Line_2 $$ protected JavaFileObject getOutputFile(final String className, final URI uri) -->Line_3 $$ BytecodeFile classFile = new BytecodeFile(uri, className)[ CD ]
Line_4 $$ String packageName = className.substring(0, className.lastIndexOf("."))-->Line_6 $$ Map<String, JavaFileObject> packageFiles = packageMap.get(packageName)[ FD ]
Line_3 $$ BytecodeFile classFile = new BytecodeFile(uri, className)-->Line_11 $$ packageFiles.put(className, classFile)[ FD ]
Line_4 $$ String packageName = className.substring(0, className.lastIndexOf("."))-->Line_9 $$ packageMap.put(packageName, packageFiles)[ FD ]
Line_5 $$ Map<String, Map<String, JavaFileObject>> packageMap = rtctxt.getPackageMap()-->Line_6 $$ Map<String, JavaFileObject> packageFiles = packageMap.get(packageName)[ FD ]
Line_2 $$ protected JavaFileObject getOutputFile(final String className, final URI uri) -->Line_6 $$ Map<String, JavaFileObject> packageFiles = packageMap.get(packageName)[ CD ]
Line_2 $$ protected JavaFileObject getOutputFile(final String className, final URI uri) -->Line_7 $$ if (packageFiles == null) [ CD ]
Line_2 $$ protected JavaFileObject getOutputFile(final String className, final URI uri) -->Line_13 $$ return classFile[ CD ]
Line_2 $$ protected JavaFileObject getOutputFile(final String className, final URI uri) -->Line_4 $$ String packageName = className.substring(0, className.lastIndexOf("."))[ CD ]
Line_3 $$ BytecodeFile classFile = new BytecodeFile(uri, className)-->Line_12 $$ classFiles.add(classFile)[ FD ]
Line_5 $$ Map<String, Map<String, JavaFileObject>> packageMap = rtctxt.getPackageMap()-->Line_9 $$ packageMap.put(packageName, packageFiles)[ FD ]
Line_6 $$ Map<String, JavaFileObject> packageFiles = packageMap.get(packageName)-->Line_8 $$ packageFiles = new HashMap<String, JavaFileObject>()[ FD ]
Line_8 $$ packageFiles = new HashMap<String, JavaFileObject>()-->Line_11 $$ packageFiles.put(className, classFile)[ FD ]
Line_6 $$ Map<String, JavaFileObject> packageFiles = packageMap.get(packageName)-->Line_9 $$ packageMap.put(packageName, packageFiles)[ FD ]
