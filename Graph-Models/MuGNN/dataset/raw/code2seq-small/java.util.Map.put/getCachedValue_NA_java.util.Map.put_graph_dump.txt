Line_2 $$ public V getCachedValue(T key) -->Line_3 $$ SofterReference<ConcurrentMap<T, V>> ref = myCache[ CD ]
Line_2 $$ public V getCachedValue(T key) -->Line_10 $$ map.put(key, value = myValueProvider.fun(key))[ FD ]
Line_4 $$ ConcurrentMap<T, V> map = ref == null ? null : ref.get()-->Line_5 $$ if (map == null) [ FD ]
Line_4 $$ ConcurrentMap<T, V> map = ref == null ? null : ref.get()-->Line_6 $$ myCache = new SofterReference<ConcurrentMap<T, V>>(map = ContainerUtil.newConcurrentMap())[ FD ]
Line_8 $$ V value = map.get(key)-->Line_10 $$ map.put(key, value = myValueProvider.fun(key))[ FD ]
Line_2 $$ public V getCachedValue(T key) -->Line_4 $$ ConcurrentMap<T, V> map = ref == null ? null : ref.get()[ CD ]
Line_3 $$ SofterReference<ConcurrentMap<T, V>> ref = myCache-->Line_4 $$ ConcurrentMap<T, V> map = ref == null ? null : ref.get()[ FD ]
Line_2 $$ public V getCachedValue(T key) -->Line_8 $$ V value = map.get(key)[ CD ]
Line_4 $$ ConcurrentMap<T, V> map = ref == null ? null : ref.get()-->Line_8 $$ V value = map.get(key)[ FD ]
Line_8 $$ V value = map.get(key)-->Line_9 $$ if (value == null) [ FD ]
Line_2 $$ public V getCachedValue(T key) -->Line_8 $$ V value = map.get(key)[ FD ]
Line_2 $$ public V getCachedValue(T key) -->Line_9 $$ if (value == null) [ CD ]
Line_4 $$ ConcurrentMap<T, V> map = ref == null ? null : ref.get()-->Line_10 $$ map.put(key, value = myValueProvider.fun(key))[ FD ]
Line_2 $$ public V getCachedValue(T key) -->Line_5 $$ if (map == null) [ CD ]
Line_9 $$ if (value == null) -->Line_10 $$ map.put(key, value = myValueProvider.fun(key))[ CD ]
Line_6 $$ myCache = new SofterReference<ConcurrentMap<T, V>>(map = ContainerUtil.newConcurrentMap())-->Line_8 $$ V value = map.get(key)[ FD ]
Line_2 $$ public V getCachedValue(T key) -->Line_12 $$ return value[ CD ]
Line_6 $$ myCache = new SofterReference<ConcurrentMap<T, V>>(map = ContainerUtil.newConcurrentMap())-->Line_10 $$ map.put(key, value = myValueProvider.fun(key))[ FD ]
