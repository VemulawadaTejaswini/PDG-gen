Line_12 $$ Map<String, Map<String, String>> jMap = new HashMap<String, Map<String, String>>()-->Line_16 $$ assertEquals(JSON.toString(jMap), journalStatus)[ FD ]
Line_2 $$ public void testJournalNodeMXBean() throws Exception -->Line_4 $$ ObjectName mxbeanName = new ObjectName("Hadoop:service=JournalNode,name=JournalNodeInfo")[ CD ]
Line_5 $$ String journalStatus = (String) mbs.getAttribute(mxbeanName, "JournalsStatus")-->Line_7 $$ assertFalse(journalStatus.contains(NAMESERVICE))[ FD ]
Line_4 $$ ObjectName mxbeanName = new ObjectName("Hadoop:service=JournalNode,name=JournalNodeInfo")-->Line_10 $$ journalStatus = (String) mbs.getAttribute(mxbeanName, "JournalsStatus")[ FD ]
Line_5 $$ String journalStatus = (String) mbs.getAttribute(mxbeanName, "JournalsStatus")-->Line_16 $$ assertEquals(JSON.toString(jMap), journalStatus)[ FD ]
Line_2 $$ public void testJournalNodeMXBean() throws Exception -->Line_15 $$ jMap.put(NAMESERVICE, infoMap)[ CD ]
Line_13 $$ Map<String, String> infoMap = new HashMap<String, String>()-->Line_24 $$ jMap.put(NAMESERVICE, infoMap)[ FD ]
Line_13 $$ Map<String, String> infoMap = new HashMap<String, String>()-->Line_22 $$ infoMap = new HashMap<String, String>()[ FD ]
Line_5 $$ String journalStatus = (String) mbs.getAttribute(mxbeanName, "JournalsStatus")-->Line_10 $$ journalStatus = (String) mbs.getAttribute(mxbeanName, "JournalsStatus")[ FD ]
Line_12 $$ Map<String, Map<String, String>> jMap = new HashMap<String, Map<String, String>>()-->Line_24 $$ jMap.put(NAMESERVICE, infoMap)[ FD ]
Line_2 $$ public void testJournalNodeMXBean() throws Exception -->Line_7 $$ assertFalse(journalStatus.contains(NAMESERVICE))[ CD ]
Line_5 $$ String journalStatus = (String) mbs.getAttribute(mxbeanName, "JournalsStatus")-->Line_11 $$ assertEquals(jn.getJournalsStatus(), journalStatus)[ FD ]
Line_22 $$ infoMap = new HashMap<String, String>()-->Line_24 $$ jMap.put(NAMESERVICE, infoMap)[ FD ]
Line_2 $$ public void testJournalNodeMXBean() throws Exception -->Line_11 $$ assertEquals(jn.getJournalsStatus(), journalStatus)[ CD ]
Line_2 $$ public void testJournalNodeMXBean() throws Exception -->Line_12 $$ Map<String, Map<String, String>> jMap = new HashMap<String, Map<String, String>>()[ CD ]
Line_22 $$ infoMap = new HashMap<String, String>()-->Line_23 $$ infoMap.put("Formatted", "true")[ FD ]
Line_3 $$ MBeanServer mbs = ManagementFactory.getPlatformMBeanServer()-->Line_10 $$ journalStatus = (String) mbs.getAttribute(mxbeanName, "JournalsStatus")[ FD ]
Line_2 $$ public void testJournalNodeMXBean() throws Exception -->Line_16 $$ assertEquals(JSON.toString(jMap), journalStatus)[ CD ]
Line_13 $$ Map<String, String> infoMap = new HashMap<String, String>()-->Line_23 $$ infoMap.put("Formatted", "true")[ FD ]
Line_2 $$ public void testJournalNodeMXBean() throws Exception -->Line_3 $$ MBeanServer mbs = ManagementFactory.getPlatformMBeanServer()[ CD ]
Line_2 $$ public void testJournalNodeMXBean() throws Exception -->Line_8 $$ final NamespaceInfo FAKE_NSINFO = new NamespaceInfo(12345, "mycluster", "my-bp", 0L)[ CD ]
Line_12 $$ Map<String, Map<String, String>> jMap = new HashMap<String, Map<String, String>>()-->Line_15 $$ jMap.put(NAMESERVICE, infoMap)[ FD ]
Line_2 $$ public void testJournalNodeMXBean() throws Exception -->Line_24 $$ jMap.put(NAMESERVICE, infoMap)[ CD ]
Line_2 $$ public void testJournalNodeMXBean() throws Exception -->Line_14 $$ infoMap.put("Formatted", "true")[ CD ]
Line_8 $$ final NamespaceInfo FAKE_NSINFO = new NamespaceInfo(12345, "mycluster", "my-bp", 0L)-->Line_9 $$ jn.getOrCreateJournal(NAMESERVICE).format(FAKE_NSINFO)[ FD ]
Line_4 $$ ObjectName mxbeanName = new ObjectName("Hadoop:service=JournalNode,name=JournalNodeInfo")-->Line_19 $$ journalStatus = (String) mbs.getAttribute(mxbeanName, "JournalsStatus")[ FD ]
Line_2 $$ public void testJournalNodeMXBean() throws Exception -->Line_10 $$ journalStatus = (String) mbs.getAttribute(mxbeanName, "JournalsStatus")[ CD ]
Line_2 $$ public void testJournalNodeMXBean() throws Exception -->Line_6 $$ assertEquals(jn.getJournalsStatus(), journalStatus)[ CD ]
Line_3 $$ MBeanServer mbs = ManagementFactory.getPlatformMBeanServer()-->Line_19 $$ journalStatus = (String) mbs.getAttribute(mxbeanName, "JournalsStatus")[ FD ]
Line_10 $$ journalStatus = (String) mbs.getAttribute(mxbeanName, "JournalsStatus")-->Line_11 $$ assertEquals(jn.getJournalsStatus(), journalStatus)[ FD ]
Line_12 $$ Map<String, Map<String, String>> jMap = new HashMap<String, Map<String, String>>()-->Line_21 $$ jMap = new HashMap<String, Map<String, String>>()[ FD ]
Line_2 $$ public void testJournalNodeMXBean() throws Exception -->Line_25 $$ assertEquals(JSON.toString(jMap), journalStatus)[ CD ]
Line_5 $$ String journalStatus = (String) mbs.getAttribute(mxbeanName, "JournalsStatus")-->Line_20 $$ assertEquals(jn.getJournalsStatus(), journalStatus)[ FD ]
Line_2 $$ public void testJournalNodeMXBean() throws Exception -->Line_21 $$ jMap = new HashMap<String, Map<String, String>>()[ CD ]
Line_21 $$ jMap = new HashMap<String, Map<String, String>>()-->Line_25 $$ assertEquals(JSON.toString(jMap), journalStatus)[ FD ]
Line_2 $$ public void testJournalNodeMXBean() throws Exception -->Line_13 $$ Map<String, String> infoMap = new HashMap<String, String>()[ CD ]
Line_2 $$ public void testJournalNodeMXBean() throws Exception -->Line_18 $$ jn = jCluster.getJournalNode(0)[ CD ]
Line_2 $$ public void testJournalNodeMXBean() throws Exception -->Line_17 $$ jCluster = new MiniJournalCluster.Builder(new Configuration()).format(false).numJournalNodes(NUM_JN).build()[ CD ]
Line_3 $$ MBeanServer mbs = ManagementFactory.getPlatformMBeanServer()-->Line_5 $$ String journalStatus = (String) mbs.getAttribute(mxbeanName, "JournalsStatus")[ FD ]
Line_19 $$ journalStatus = (String) mbs.getAttribute(mxbeanName, "JournalsStatus")-->Line_20 $$ assertEquals(jn.getJournalsStatus(), journalStatus)[ FD ]
Line_2 $$ public void testJournalNodeMXBean() throws Exception -->Line_22 $$ infoMap = new HashMap<String, String>()[ CD ]
Line_5 $$ String journalStatus = (String) mbs.getAttribute(mxbeanName, "JournalsStatus")-->Line_25 $$ assertEquals(JSON.toString(jMap), journalStatus)[ FD ]
Line_4 $$ ObjectName mxbeanName = new ObjectName("Hadoop:service=JournalNode,name=JournalNodeInfo")-->Line_5 $$ String journalStatus = (String) mbs.getAttribute(mxbeanName, "JournalsStatus")[ FD ]
Line_2 $$ public void testJournalNodeMXBean() throws Exception -->Line_20 $$ assertEquals(jn.getJournalsStatus(), journalStatus)[ CD ]
Line_21 $$ jMap = new HashMap<String, Map<String, String>>()-->Line_24 $$ jMap.put(NAMESERVICE, infoMap)[ FD ]
Line_10 $$ journalStatus = (String) mbs.getAttribute(mxbeanName, "JournalsStatus")-->Line_20 $$ assertEquals(jn.getJournalsStatus(), journalStatus)[ FD ]
Line_2 $$ public void testJournalNodeMXBean() throws Exception -->Line_23 $$ infoMap.put("Formatted", "true")[ CD ]
Line_2 $$ public void testJournalNodeMXBean() throws Exception -->Line_9 $$ jn.getOrCreateJournal(NAMESERVICE).format(FAKE_NSINFO)[ CD ]
Line_13 $$ Map<String, String> infoMap = new HashMap<String, String>()-->Line_14 $$ infoMap.put("Formatted", "true")[ FD ]
Line_10 $$ journalStatus = (String) mbs.getAttribute(mxbeanName, "JournalsStatus")-->Line_25 $$ assertEquals(JSON.toString(jMap), journalStatus)[ FD ]
Line_13 $$ Map<String, String> infoMap = new HashMap<String, String>()-->Line_15 $$ jMap.put(NAMESERVICE, infoMap)[ FD ]
Line_12 $$ Map<String, Map<String, String>> jMap = new HashMap<String, Map<String, String>>()-->Line_25 $$ assertEquals(JSON.toString(jMap), journalStatus)[ FD ]
Line_2 $$ public void testJournalNodeMXBean() throws Exception -->Line_19 $$ journalStatus = (String) mbs.getAttribute(mxbeanName, "JournalsStatus")[ CD ]
Line_10 $$ journalStatus = (String) mbs.getAttribute(mxbeanName, "JournalsStatus")-->Line_19 $$ journalStatus = (String) mbs.getAttribute(mxbeanName, "JournalsStatus")[ FD ]
Line_5 $$ String journalStatus = (String) mbs.getAttribute(mxbeanName, "JournalsStatus")-->Line_6 $$ assertEquals(jn.getJournalsStatus(), journalStatus)[ FD ]
Line_10 $$ journalStatus = (String) mbs.getAttribute(mxbeanName, "JournalsStatus")-->Line_16 $$ assertEquals(JSON.toString(jMap), journalStatus)[ FD ]
Line_19 $$ journalStatus = (String) mbs.getAttribute(mxbeanName, "JournalsStatus")-->Line_25 $$ assertEquals(JSON.toString(jMap), journalStatus)[ FD ]
Line_2 $$ public void testJournalNodeMXBean() throws Exception -->Line_5 $$ String journalStatus = (String) mbs.getAttribute(mxbeanName, "JournalsStatus")[ CD ]
Line_5 $$ String journalStatus = (String) mbs.getAttribute(mxbeanName, "JournalsStatus")-->Line_19 $$ journalStatus = (String) mbs.getAttribute(mxbeanName, "JournalsStatus")[ FD ]
