Line_2 $$ public void testStartContainerFailureWithUnknownAuxService() throws Exception -->Line_4 $$ conf.setClass(String.format(YarnConfiguration.NM_AUX_SERVICE_FMT, "existService"), ServiceA.class, Service.class)[ CD ]
Line_8 $$ Map<String, ByteBuffer> serviceData = new HashMap<String, ByteBuffer>()-->Line_10 $$ serviceData.put(serviceName, ByteBuffer.wrap(serviceName.getBytes()))[ FD ]
Line_6 $$ List<StartContainerRequest> startRequest = new ArrayList<StartContainerRequest>()-->Line_16 $$ startRequest.add(request)[ FD ]
Line_2 $$ public void testStartContainerFailureWithUnknownAuxService() throws Exception -->Line_17 $$ StartContainersRequest requestList = StartContainersRequest.newInstance(startRequest)[ CD ]
Line_18 $$ StartContainersResponse response = containerManager.startContainers(requestList)-->Line_19 $$ Assert.assertTrue(response.getFailedRequests().size() == 1)[ FD ]
Line_2 $$ public void testStartContainerFailureWithUnknownAuxService() throws Exception -->Line_6 $$ List<StartContainerRequest> startRequest = new ArrayList<StartContainerRequest>()[ CD ]
Line_13 $$ String user = "start_container_fail"-->Line_14 $$ Token containerToken = createContainerToken(cId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager())[ FD ]
Line_7 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_15 $$ StartContainerRequest request = StartContainerRequest.newInstance(containerLaunchContext, containerToken)[ FD ]
Line_2 $$ public void testStartContainerFailureWithUnknownAuxService() throws Exception -->Line_9 $$ String serviceName = "non_exist_auxService"[ CD ]
Line_18 $$ StartContainersResponse response = containerManager.startContainers(requestList)-->Line_21 $$ Assert.assertTrue(response.getFailedRequests().containsKey(cId))[ FD ]
Line_2 $$ public void testStartContainerFailureWithUnknownAuxService() throws Exception -->Line_5 $$ containerManager.start()[ CD ]
Line_7 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_11 $$ containerLaunchContext.setServiceData(serviceData)[ FD ]
Line_14 $$ Token containerToken = createContainerToken(cId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager())-->Line_15 $$ StartContainerRequest request = StartContainerRequest.newInstance(containerLaunchContext, containerToken)[ FD ]
Line_6 $$ List<StartContainerRequest> startRequest = new ArrayList<StartContainerRequest>()-->Line_17 $$ StartContainersRequest requestList = StartContainersRequest.newInstance(startRequest)[ FD ]
Line_2 $$ public void testStartContainerFailureWithUnknownAuxService() throws Exception -->Line_20 $$ Assert.assertTrue(response.getSuccessfullyStartedContainers().size() == 0)[ CD ]
Line_2 $$ public void testStartContainerFailureWithUnknownAuxService() throws Exception -->Line_15 $$ StartContainerRequest request = StartContainerRequest.newInstance(containerLaunchContext, containerToken)[ CD ]
Line_2 $$ public void testStartContainerFailureWithUnknownAuxService() throws Exception -->Line_18 $$ StartContainersResponse response = containerManager.startContainers(requestList)[ CD ]
Line_2 $$ public void testStartContainerFailureWithUnknownAuxService() throws Exception -->Line_19 $$ Assert.assertTrue(response.getFailedRequests().size() == 1)[ CD ]
Line_2 $$ public void testStartContainerFailureWithUnknownAuxService() throws Exception -->Line_21 $$ Assert.assertTrue(response.getFailedRequests().containsKey(cId))[ CD ]
Line_2 $$ public void testStartContainerFailureWithUnknownAuxService() throws Exception -->Line_14 $$ Token containerToken = createContainerToken(cId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager())[ CD ]
Line_2 $$ public void testStartContainerFailureWithUnknownAuxService() throws Exception -->Line_16 $$ startRequest.add(request)[ CD ]
Line_2 $$ public void testStartContainerFailureWithUnknownAuxService() throws Exception -->Line_8 $$ Map<String, ByteBuffer> serviceData = new HashMap<String, ByteBuffer>()[ CD ]
Line_2 $$ public void testStartContainerFailureWithUnknownAuxService() throws Exception -->Line_10 $$ serviceData.put(serviceName, ByteBuffer.wrap(serviceName.getBytes()))[ CD ]
Line_2 $$ public void testStartContainerFailureWithUnknownAuxService() throws Exception -->Line_11 $$ containerLaunchContext.setServiceData(serviceData)[ CD ]
Line_2 $$ public void testStartContainerFailureWithUnknownAuxService() throws Exception -->Line_12 $$ ContainerId cId = createContainerId(0)[ CD ]
Line_2 $$ public void testStartContainerFailureWithUnknownAuxService() throws Exception -->Line_7 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)[ CD ]
Line_8 $$ Map<String, ByteBuffer> serviceData = new HashMap<String, ByteBuffer>()-->Line_11 $$ containerLaunchContext.setServiceData(serviceData)[ FD ]
Line_12 $$ ContainerId cId = createContainerId(0)-->Line_21 $$ Assert.assertTrue(response.getFailedRequests().containsKey(cId))[ FD ]
Line_17 $$ StartContainersRequest requestList = StartContainersRequest.newInstance(startRequest)-->Line_18 $$ StartContainersResponse response = containerManager.startContainers(requestList)[ FD ]
Line_18 $$ StartContainersResponse response = containerManager.startContainers(requestList)-->Line_20 $$ Assert.assertTrue(response.getSuccessfullyStartedContainers().size() == 0)[ FD ]
Line_2 $$ public void testStartContainerFailureWithUnknownAuxService() throws Exception -->Line_22 $$ Assert.assertTrue(response.getFailedRequests().get(cId).getMessage().contains("The auxService:" + serviceName + " does not exist"))[ CD ]
Line_9 $$ String serviceName = "non_exist_auxService"-->Line_10 $$ serviceData.put(serviceName, ByteBuffer.wrap(serviceName.getBytes()))[ FD ]
Line_2 $$ public void testStartContainerFailureWithUnknownAuxService() throws Exception -->Line_13 $$ String user = "start_container_fail"[ CD ]
Line_18 $$ StartContainersResponse response = containerManager.startContainers(requestList)-->Line_22 $$ Assert.assertTrue(response.getFailedRequests().get(cId).getMessage().contains("The auxService:" + serviceName + " does not exist"))[ FD ]
Line_12 $$ ContainerId cId = createContainerId(0)-->Line_22 $$ Assert.assertTrue(response.getFailedRequests().get(cId).getMessage().contains("The auxService:" + serviceName + " does not exist"))[ FD ]
Line_15 $$ StartContainerRequest request = StartContainerRequest.newInstance(containerLaunchContext, containerToken)-->Line_16 $$ startRequest.add(request)[ FD ]
Line_2 $$ public void testStartContainerFailureWithUnknownAuxService() throws Exception -->Line_3 $$ conf.setStrings(YarnConfiguration.NM_AUX_SERVICES, new String[] [ CD ]
Line_12 $$ ContainerId cId = createContainerId(0)-->Line_14 $$ Token containerToken = createContainerToken(cId, DUMMY_RM_IDENTIFIER, context.getNodeId(), user, context.getContainerTokenSecretManager())[ FD ]
