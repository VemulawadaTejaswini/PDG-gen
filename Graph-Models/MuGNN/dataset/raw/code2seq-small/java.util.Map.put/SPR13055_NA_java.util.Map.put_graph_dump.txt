Line_2 $$ public void SPR13055() throws Exception -->Line_14 $$ String ex = "#root.![T(org.springframework.util.StringUtils).collectionToCommaDelimitedString(#this.values())]"[ CD ]
Line_2 $$ public void SPR13055() throws Exception -->Line_16 $$ assertEquals("[test12,test11, test22,test21]", res.toString())[ CD ]
Line_2 $$ public void SPR13055() throws Exception -->Line_11 $$ myPayload.add(v2)[ CD ]
Line_12 $$ EvaluationContext context = new StandardEvaluationContext(myPayload)-->Line_19 $$ res = parser.parseExpression("#root.![values()]").getValue(context, List.class)[ FD ]
Line_12 $$ EvaluationContext context = new StandardEvaluationContext(myPayload)-->Line_15 $$ List res = parser.parseExpression(ex).getValue(context, List.class)[ FD ]
Line_5 $$ Map<String, Object> v2 = new HashMap<String, Object>()-->Line_11 $$ myPayload.add(v2)[ FD ]
Line_2 $$ public void SPR13055() throws Exception -->Line_5 $$ Map<String, Object> v2 = new HashMap<String, Object>()[ CD ]
Line_14 $$ String ex = "#root.![T(org.springframework.util.StringUtils).collectionToCommaDelimitedString(#this.values())]"-->Line_15 $$ List res = parser.parseExpression(ex).getValue(context, List.class)[ FD ]
Line_5 $$ Map<String, Object> v2 = new HashMap<String, Object>()-->Line_9 $$ v2.put("test22", "test22")[ FD ]
Line_2 $$ public void SPR13055() throws Exception -->Line_10 $$ myPayload.add(v1)[ CD ]
Line_15 $$ List res = parser.parseExpression(ex).getValue(context, List.class)-->Line_18 $$ assertEquals("[[test12, test11], [test22, test21]]", res.toString())[ FD ]
Line_4 $$ Map<String, Object> v1 = new HashMap<String, Object>()-->Line_10 $$ myPayload.add(v1)[ FD ]
Line_15 $$ List res = parser.parseExpression(ex).getValue(context, List.class)-->Line_17 $$ res = parser.parseExpression("#root.![#this.values()]").getValue(context, List.class)[ FD ]
Line_2 $$ public void SPR13055() throws Exception -->Line_15 $$ List res = parser.parseExpression(ex).getValue(context, List.class)[ CD ]
Line_4 $$ Map<String, Object> v1 = new HashMap<String, Object>()-->Line_6 $$ v1.put("test11", "test11")[ FD ]
Line_3 $$ List<Map<String, Object>> myPayload = new ArrayList<Map<String, Object>>()-->Line_11 $$ myPayload.add(v2)[ FD ]
Line_2 $$ public void SPR13055() throws Exception -->Line_4 $$ Map<String, Object> v1 = new HashMap<String, Object>()[ CD ]
Line_12 $$ EvaluationContext context = new StandardEvaluationContext(myPayload)-->Line_17 $$ res = parser.parseExpression("#root.![#this.values()]").getValue(context, List.class)[ FD ]
Line_2 $$ public void SPR13055() throws Exception -->Line_13 $$ ExpressionParser parser = new SpelExpressionParser()[ CD ]
Line_15 $$ List res = parser.parseExpression(ex).getValue(context, List.class)-->Line_20 $$ assertEquals("[[test12, test11], [test22, test21]]", res.toString())[ FD ]
Line_13 $$ ExpressionParser parser = new SpelExpressionParser()-->Line_17 $$ res = parser.parseExpression("#root.![#this.values()]").getValue(context, List.class)[ FD ]
Line_2 $$ public void SPR13055() throws Exception -->Line_19 $$ res = parser.parseExpression("#root.![values()]").getValue(context, List.class)[ CD ]
Line_5 $$ Map<String, Object> v2 = new HashMap<String, Object>()-->Line_8 $$ v2.put("test21", "test21")[ FD ]
Line_2 $$ public void SPR13055() throws Exception -->Line_17 $$ res = parser.parseExpression("#root.![#this.values()]").getValue(context, List.class)[ CD ]
Line_2 $$ public void SPR13055() throws Exception -->Line_7 $$ v1.put("test12", "test12")[ CD ]
Line_17 $$ res = parser.parseExpression("#root.![#this.values()]").getValue(context, List.class)-->Line_19 $$ res = parser.parseExpression("#root.![values()]").getValue(context, List.class)[ FD ]
Line_2 $$ public void SPR13055() throws Exception -->Line_18 $$ assertEquals("[[test12, test11], [test22, test21]]", res.toString())[ CD ]
Line_17 $$ res = parser.parseExpression("#root.![#this.values()]").getValue(context, List.class)-->Line_20 $$ assertEquals("[[test12, test11], [test22, test21]]", res.toString())[ FD ]
Line_13 $$ ExpressionParser parser = new SpelExpressionParser()-->Line_15 $$ List res = parser.parseExpression(ex).getValue(context, List.class)[ FD ]
Line_15 $$ List res = parser.parseExpression(ex).getValue(context, List.class)-->Line_16 $$ assertEquals("[test12,test11, test22,test21]", res.toString())[ FD ]
Line_15 $$ List res = parser.parseExpression(ex).getValue(context, List.class)-->Line_19 $$ res = parser.parseExpression("#root.![values()]").getValue(context, List.class)[ FD ]
Line_4 $$ Map<String, Object> v1 = new HashMap<String, Object>()-->Line_7 $$ v1.put("test12", "test12")[ FD ]
Line_2 $$ public void SPR13055() throws Exception -->Line_6 $$ v1.put("test11", "test11")[ CD ]
Line_3 $$ List<Map<String, Object>> myPayload = new ArrayList<Map<String, Object>>()-->Line_10 $$ myPayload.add(v1)[ FD ]
Line_2 $$ public void SPR13055() throws Exception -->Line_9 $$ v2.put("test22", "test22")[ CD ]
Line_2 $$ public void SPR13055() throws Exception -->Line_12 $$ EvaluationContext context = new StandardEvaluationContext(myPayload)[ CD ]
Line_13 $$ ExpressionParser parser = new SpelExpressionParser()-->Line_19 $$ res = parser.parseExpression("#root.![values()]").getValue(context, List.class)[ FD ]
Line_2 $$ public void SPR13055() throws Exception -->Line_20 $$ assertEquals("[[test12, test11], [test22, test21]]", res.toString())[ CD ]
Line_17 $$ res = parser.parseExpression("#root.![#this.values()]").getValue(context, List.class)-->Line_18 $$ assertEquals("[[test12, test11], [test22, test21]]", res.toString())[ FD ]
Line_19 $$ res = parser.parseExpression("#root.![values()]").getValue(context, List.class)-->Line_20 $$ assertEquals("[[test12, test11], [test22, test21]]", res.toString())[ FD ]
Line_2 $$ public void SPR13055() throws Exception -->Line_3 $$ List<Map<String, Object>> myPayload = new ArrayList<Map<String, Object>>()[ CD ]
Line_2 $$ public void SPR13055() throws Exception -->Line_8 $$ v2.put("test21", "test21")[ CD ]
