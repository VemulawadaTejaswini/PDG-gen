Line_2 $$ public void testLogsViewBadStartEnd() throws IOException -->Line_4 $$ MockAppContext ctx = new MockAppContext(0, 1, 1, 1)[ CD ]
Line_2 $$ public void testLogsViewBadStartEnd() throws IOException -->Line_10 $$ params.put(ENTITY_STRING, "container_10_0001_01_000001")[ CD ]
Line_2 $$ public void testLogsViewBadStartEnd() throws IOException -->Line_8 $$ params.put(CONTAINER_ID, MRApp.newContainerId(1, 1, 333, 1).toString())[ CD ]
Line_2 $$ public void testLogsViewBadStartEnd() throws IOException -->Line_3 $$ LOG.info("HsLogsPage with bad start/end params")[ CD ]
Line_5 $$ Map<String, String> params = new HashMap<String, String>()-->Line_10 $$ params.put(ENTITY_STRING, "container_10_0001_01_000001")[ FD ]
Line_2 $$ public void testLogsViewBadStartEnd() throws IOException -->Line_11 $$ params.put(APP_OWNER, "owner")[ CD ]
Line_5 $$ Map<String, String> params = new HashMap<String, String>()-->Line_12 $$ Injector injector = WebAppTests.testPage(AggregatedLogsPage.class, AppContext.class, ctx, params)[ FD ]
Line_2 $$ public void testLogsViewBadStartEnd() throws IOException -->Line_15 $$ verify(spyPw).write("Invalid log end value: bar")[ CD ]
Line_5 $$ Map<String, String> params = new HashMap<String, String>()-->Line_8 $$ params.put(CONTAINER_ID, MRApp.newContainerId(1, 1, 333, 1).toString())[ FD ]
Line_5 $$ Map<String, String> params = new HashMap<String, String>()-->Line_9 $$ params.put(NM_NODENAME, NodeId.newInstance(MockJobs.NM_HOST, MockJobs.NM_PORT).toString())[ FD ]
Line_2 $$ public void testLogsViewBadStartEnd() throws IOException -->Line_13 $$ PrintWriter spyPw = WebAppTests.getPrintWriter(injector)[ CD ]
Line_13 $$ PrintWriter spyPw = WebAppTests.getPrintWriter(injector)-->Line_14 $$ verify(spyPw).write("Invalid log start value: foo")[ FD ]
Line_2 $$ public void testLogsViewBadStartEnd() throws IOException -->Line_6 $$ params.put("start", "foo")[ CD ]
Line_2 $$ public void testLogsViewBadStartEnd() throws IOException -->Line_14 $$ verify(spyPw).write("Invalid log start value: foo")[ CD ]
Line_13 $$ PrintWriter spyPw = WebAppTests.getPrintWriter(injector)-->Line_15 $$ verify(spyPw).write("Invalid log end value: bar")[ FD ]
Line_5 $$ Map<String, String> params = new HashMap<String, String>()-->Line_6 $$ params.put("start", "foo")[ FD ]
Line_2 $$ public void testLogsViewBadStartEnd() throws IOException -->Line_12 $$ Injector injector = WebAppTests.testPage(AggregatedLogsPage.class, AppContext.class, ctx, params)[ CD ]
Line_2 $$ public void testLogsViewBadStartEnd() throws IOException -->Line_7 $$ params.put("end", "bar")[ CD ]
Line_5 $$ Map<String, String> params = new HashMap<String, String>()-->Line_11 $$ params.put(APP_OWNER, "owner")[ FD ]
Line_2 $$ public void testLogsViewBadStartEnd() throws IOException -->Line_9 $$ params.put(NM_NODENAME, NodeId.newInstance(MockJobs.NM_HOST, MockJobs.NM_PORT).toString())[ CD ]
Line_5 $$ Map<String, String> params = new HashMap<String, String>()-->Line_7 $$ params.put("end", "bar")[ FD ]
Line_2 $$ public void testLogsViewBadStartEnd() throws IOException -->Line_5 $$ Map<String, String> params = new HashMap<String, String>()[ CD ]
Line_12 $$ Injector injector = WebAppTests.testPage(AggregatedLogsPage.class, AppContext.class, ctx, params)-->Line_13 $$ PrintWriter spyPw = WebAppTests.getPrintWriter(injector)[ FD ]
Line_4 $$ MockAppContext ctx = new MockAppContext(0, 1, 1, 1)-->Line_12 $$ Injector injector = WebAppTests.testPage(AggregatedLogsPage.class, AppContext.class, ctx, params)[ FD ]
