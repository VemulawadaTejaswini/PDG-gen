Line_3 $$ Map<String, Object> response = new HashMap<String, Object>()-->Line_9 $$ response.put("ipcPort", 1339l)[ FD ]
Line_3 $$ Map<String, Object> response = new HashMap<String, Object>()-->Line_19 $$ response.put("cacheUsed", 321l)[ FD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_3 $$ Map<String, Object> response = new HashMap<String, Object>()[ CD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_32 $$ checkDecodeFailure(response)[ CD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_6 $$ response.put("hostName", "localhost")[ CD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_8 $$ response.put("infoPort", 1338l)[ CD ]
Line_4 $$ String name = "127.0.0.1:1004"-->Line_23 $$ Assert.assertEquals(name, r.get("name"))[ FD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_13 $$ response.put("blockPoolUsed", 512l)[ CD ]
Line_27 $$ for (String badName : badNames) -->Line_28 $$ response.put("name", badName)[ FD ]
Line_3 $$ Map<String, Object> response = new HashMap<String, Object>()-->Line_20 $$ DatanodeInfo di = JsonUtil.toDatanodeInfo(response)[ FD ]
Line_3 $$ Map<String, Object> response = new HashMap<String, Object>()-->Line_34 $$ checkDecodeFailure(response)[ FD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_5 $$ response.put("name", name)[ CD ]
Line_3 $$ Map<String, Object> response = new HashMap<String, Object>()-->Line_16 $$ response.put("networkLocation", "foo.bar.baz")[ FD ]
Line_4 $$ String name = "127.0.0.1:1004"-->Line_5 $$ response.put("name", name)[ FD ]
Line_3 $$ Map<String, Object> response = new HashMap<String, Object>()-->Line_11 $$ response.put("dfsUsed", 512l)[ FD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_16 $$ response.put("networkLocation", "foo.bar.baz")[ CD ]
Line_22 $$ Map<String, Object> r = JsonUtil.toJsonMap(di)-->Line_24 $$ Assert.assertEquals("127.0.0.1", r.get("ipAddr"))[ FD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_9 $$ response.put("ipcPort", 1339l)[ CD ]
Line_3 $$ Map<String, Object> response = new HashMap<String, Object>()-->Line_32 $$ checkDecodeFailure(response)[ FD ]
Line_3 $$ Map<String, Object> response = new HashMap<String, Object>()-->Line_12 $$ response.put("remaining", 512l)[ FD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_25 $$ Assert.assertEquals(1004, (int) (Integer) r.get("xferPort"))[ CD ]
Line_3 $$ Map<String, Object> response = new HashMap<String, Object>()-->Line_8 $$ response.put("infoPort", 1338l)[ FD ]
Line_3 $$ Map<String, Object> response = new HashMap<String, Object>()-->Line_13 $$ response.put("blockPoolUsed", 512l)[ FD ]
Line_3 $$ Map<String, Object> response = new HashMap<String, Object>()-->Line_17 $$ response.put("adminState", "NORMAL")[ FD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_33 $$ response.put("ipAddr", "127.0.0.1")[ CD ]
Line_3 $$ Map<String, Object> response = new HashMap<String, Object>()-->Line_14 $$ response.put("lastUpdate", 0l)[ FD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_11 $$ response.put("dfsUsed", 512l)[ CD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_10 $$ response.put("capacity", 1024l)[ CD ]
Line_3 $$ Map<String, Object> response = new HashMap<String, Object>()-->Line_18 $$ response.put("cacheCapacity", 123l)[ FD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_19 $$ response.put("cacheUsed", 321l)[ CD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_21 $$ Assert.assertEquals(name, di.getXferAddr())[ CD ]
Line_22 $$ Map<String, Object> r = JsonUtil.toJsonMap(di)-->Line_25 $$ Assert.assertEquals(1004, (int) (Integer) r.get("xferPort"))[ FD ]
Line_3 $$ Map<String, Object> response = new HashMap<String, Object>()-->Line_31 $$ response.remove("name")[ FD ]
Line_20 $$ DatanodeInfo di = JsonUtil.toDatanodeInfo(response)-->Line_22 $$ Map<String, Object> r = JsonUtil.toJsonMap(di)[ FD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_14 $$ response.put("lastUpdate", 0l)[ CD ]
Line_3 $$ Map<String, Object> response = new HashMap<String, Object>()-->Line_29 $$ checkDecodeFailure(response)[ FD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_23 $$ Assert.assertEquals(name, r.get("name"))[ CD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_7 $$ response.put("storageID", "fake-id")[ CD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_12 $$ response.put("remaining", 512l)[ CD ]
Line_3 $$ Map<String, Object> response = new HashMap<String, Object>()-->Line_6 $$ response.put("hostName", "localhost")[ FD ]
Line_20 $$ DatanodeInfo di = JsonUtil.toDatanodeInfo(response)-->Line_21 $$ Assert.assertEquals(name, di.getXferAddr())[ FD ]
Line_4 $$ String name = "127.0.0.1:1004"-->Line_21 $$ Assert.assertEquals(name, di.getXferAddr())[ FD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_22 $$ Map<String, Object> r = JsonUtil.toJsonMap(di)[ CD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_26 $$ String[] badNames = [ CD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_15 $$ response.put("xceiverCount", 4096l)[ CD ]
Line_3 $$ Map<String, Object> response = new HashMap<String, Object>()-->Line_28 $$ response.put("name", badName)[ FD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_4 $$ String name = "127.0.0.1:1004"[ CD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_31 $$ response.remove("name")[ CD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_20 $$ DatanodeInfo di = JsonUtil.toDatanodeInfo(response)[ CD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_34 $$ checkDecodeFailure(response)[ CD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_17 $$ response.put("adminState", "NORMAL")[ CD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_18 $$ response.put("cacheCapacity", 123l)[ CD ]
Line_2 $$ public void testToDatanodeInfoWithName() throws Exception -->Line_24 $$ Assert.assertEquals("127.0.0.1", r.get("ipAddr"))[ CD ]
Line_3 $$ Map<String, Object> response = new HashMap<String, Object>()-->Line_15 $$ response.put("xceiverCount", 4096l)[ FD ]
Line_3 $$ Map<String, Object> response = new HashMap<String, Object>()-->Line_5 $$ response.put("name", name)[ FD ]
Line_3 $$ Map<String, Object> response = new HashMap<String, Object>()-->Line_7 $$ response.put("storageID", "fake-id")[ FD ]
Line_3 $$ Map<String, Object> response = new HashMap<String, Object>()-->Line_33 $$ response.put("ipAddr", "127.0.0.1")[ FD ]
Line_22 $$ Map<String, Object> r = JsonUtil.toJsonMap(di)-->Line_23 $$ Assert.assertEquals(name, r.get("name"))[ FD ]
Line_3 $$ Map<String, Object> response = new HashMap<String, Object>()-->Line_10 $$ response.put("capacity", 1024l)[ FD ]
