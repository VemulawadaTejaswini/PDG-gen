Line_2 $$ public void simpleHtmlRender() throws Exception -->Line_3 $$ Assume.group(TestGroup.CUSTOM_COMPILATION)[ CD ]
Line_2 $$ public void simpleHtmlRender() throws Exception -->Line_9 $$ assertEquals("Invalid content type", "text/html", response.getContentType())[ CD ]
Line_6 $$ Map<String, Object> model = getBaseModel()-->Line_8 $$ view.render(model, request, response)[ FD ]
Line_6 $$ Map<String, Object> model = getBaseModel()-->Line_7 $$ model.put(getDiscriminatorKey(), "html")[ FD ]
Line_2 $$ public void simpleHtmlRender() throws Exception -->Line_8 $$ view.render(model, request, response)[ CD ]
Line_2 $$ public void simpleHtmlRender() throws Exception -->Line_4 $$ assumeTrue(canCompileReport)[ CD ]
Line_2 $$ public void simpleHtmlRender() throws Exception -->Line_7 $$ model.put(getDiscriminatorKey(), "html")[ CD ]
Line_2 $$ public void simpleHtmlRender() throws Exception -->Line_6 $$ Map<String, Object> model = getBaseModel()[ CD ]
Line_2 $$ public void simpleHtmlRender() throws Exception -->Line_5 $$ AbstractJasperReportsView view = getView(UNCOMPILED_REPORT)[ CD ]
Line_5 $$ AbstractJasperReportsView view = getView(UNCOMPILED_REPORT)-->Line_8 $$ view.render(model, request, response)[ FD ]
