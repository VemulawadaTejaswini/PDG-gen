Line_11 $$ if (StringUtil.isNotEmpty(packageName) && !StringUtil.startsWithChar(packageName, '.')) -->Line_12 $$ int i = packageName.lastIndexOf('.')[ CD ]
Line_13 $$ while (true) -->Line_20 $$ i = packageName.lastIndexOf('.', i - 1)[ CD ]
Line_12 $$ int i = packageName.lastIndexOf('.')-->Line_18 $$ if (i < 0)[ FD ]
Line_2 $$ private PackageInfo getPackageInfo(@NotNull final String packageName) -->Line_16 $$ result.addAll(parentInfo.getSubPackageDirectories(packageName.substring(i + 1)))[ FD ]
Line_23 $$ for (VirtualFile file : myRootsByPackagePrefix.get(packageName)) -->Line_24 $$ if (file.isDirectory()) [ FD ]
Line_23 $$ for (VirtualFile file : myRootsByPackagePrefix.get(packageName)) -->Line_25 $$ result.add(file)[ FD ]
Line_10 $$ List<VirtualFile> result = ContainerUtil.newSmartList()-->Line_28 $$ if (!result.isEmpty()) [ FD ]
Line_24 $$ if (file.isDirectory()) -->Line_25 $$ result.add(file)[ CD ]
Line_20 $$ i = packageName.lastIndexOf('.', i - 1)-->Line_14 $$ PackageInfo parentInfo = getPackageInfo(i > 0 ? packageName.substring(0, i) : "")[ FD ]
Line_2 $$ private PackageInfo getPackageInfo(@NotNull final String packageName) -->Line_31 $$ myNonExistentPackages.add(packageName)[ FD ]
Line_12 $$ int i = packageName.lastIndexOf('.')-->Line_20 $$ i = packageName.lastIndexOf('.', i - 1)[ FD ]
Line_2 $$ private PackageInfo getPackageInfo(@NotNull final String packageName) -->Line_14 $$ PackageInfo parentInfo = getPackageInfo(i > 0 ? packageName.substring(0, i) : "")[ FD ]
Line_2 $$ private PackageInfo getPackageInfo(@NotNull final String packageName) -->Line_23 $$ for (VirtualFile file : myRootsByPackagePrefix.get(packageName)) [ FD ]
Line_13 $$ while (true) -->Line_15 $$ if (parentInfo != null) [ CD ]
Line_3 $$ PackageInfo info = myDirectoriesByPackageNameCache.get(packageName)-->Line_29 $$ myDirectoriesByPackageNameCache.put(packageName, info = new PackageInfo(packageName, result))[ FD ]
Line_7 $$ if (packageName.length() > Registry.intValue("java.max.package.name.length") || StringUtil.containsAnyChar(packageName, ";[/")) -->Line_8 $$ return null[ CD ]
Line_13 $$ while (true) -->Line_18 $$ if (i < 0)[ CD ]
Line_28 $$ if (!result.isEmpty()) -->Line_29 $$ myDirectoriesByPackageNameCache.put(packageName, info = new PackageInfo(packageName, result))[ CD ]
Line_14 $$ PackageInfo parentInfo = getPackageInfo(i > 0 ? packageName.substring(0, i) : "")-->Line_16 $$ result.addAll(parentInfo.getSubPackageDirectories(packageName.substring(i + 1)))[ FD ]
Line_28 $$ if (!result.isEmpty()) -->Line_31 $$ myNonExistentPackages.add(packageName)[ CD ]
Line_2 $$ private PackageInfo getPackageInfo(@NotNull final String packageName) -->Line_3 $$ PackageInfo info = myDirectoriesByPackageNameCache.get(packageName)[ CD ]
Line_2 $$ private PackageInfo getPackageInfo(@NotNull final String packageName) -->Line_34 $$ return info[ CD ]
Line_14 $$ PackageInfo parentInfo = getPackageInfo(i > 0 ? packageName.substring(0, i) : "")-->Line_15 $$ if (parentInfo != null) [ FD ]
Line_2 $$ private PackageInfo getPackageInfo(@NotNull final String packageName) -->Line_4 $$ if (info == null) [ CD ]
Line_5 $$ if (myNonExistentPackages.contains(packageName))-->Line_6 $$ return null[ CD ]
Line_13 $$ while (true) -->Line_14 $$ PackageInfo parentInfo = getPackageInfo(i > 0 ? packageName.substring(0, i) : "")[ CD ]
Line_2 $$ private PackageInfo getPackageInfo(@NotNull final String packageName) -->Line_7 $$ if (packageName.length() > Registry.intValue("java.max.package.name.length") || StringUtil.containsAnyChar(packageName, ";[/")) [ FD ]
Line_4 $$ if (info == null) -->Line_11 $$ if (StringUtil.isNotEmpty(packageName) && !StringUtil.startsWithChar(packageName, '.')) [ CD ]
Line_4 $$ if (info == null) -->Line_5 $$ if (myNonExistentPackages.contains(packageName))[ CD ]
Line_2 $$ private PackageInfo getPackageInfo(@NotNull final String packageName) -->Line_11 $$ if (StringUtil.isNotEmpty(packageName) && !StringUtil.startsWithChar(packageName, '.')) [ FD ]
Line_15 $$ if (parentInfo != null) -->Line_16 $$ result.addAll(parentInfo.getSubPackageDirectories(packageName.substring(i + 1)))[ CD ]
Line_2 $$ private PackageInfo getPackageInfo(@NotNull final String packageName) -->Line_20 $$ i = packageName.lastIndexOf('.', i - 1)[ FD ]
Line_11 $$ if (StringUtil.isNotEmpty(packageName) && !StringUtil.startsWithChar(packageName, '.')) -->Line_13 $$ while (true) [ CD ]
Line_12 $$ int i = packageName.lastIndexOf('.')-->Line_14 $$ PackageInfo parentInfo = getPackageInfo(i > 0 ? packageName.substring(0, i) : "")[ FD ]
Line_10 $$ List<VirtualFile> result = ContainerUtil.newSmartList()-->Line_25 $$ result.add(file)[ FD ]
Line_4 $$ if (info == null) -->Line_28 $$ if (!result.isEmpty()) [ CD ]
Line_10 $$ List<VirtualFile> result = ContainerUtil.newSmartList()-->Line_16 $$ result.addAll(parentInfo.getSubPackageDirectories(packageName.substring(i + 1)))[ FD ]
Line_20 $$ i = packageName.lastIndexOf('.', i - 1)-->Line_18 $$ if (i < 0)[ FD ]
Line_2 $$ private PackageInfo getPackageInfo(@NotNull final String packageName) -->Line_5 $$ if (myNonExistentPackages.contains(packageName))[ FD ]
Line_3 $$ PackageInfo info = myDirectoriesByPackageNameCache.get(packageName)-->Line_4 $$ if (info == null) [ FD ]
Line_2 $$ private PackageInfo getPackageInfo(@NotNull final String packageName) -->Line_29 $$ myDirectoriesByPackageNameCache.put(packageName, info = new PackageInfo(packageName, result))[ FD ]
Line_4 $$ if (info == null) -->Line_7 $$ if (packageName.length() > Registry.intValue("java.max.package.name.length") || StringUtil.containsAnyChar(packageName, ";[/")) [ CD ]
Line_2 $$ private PackageInfo getPackageInfo(@NotNull final String packageName) -->Line_3 $$ PackageInfo info = myDirectoriesByPackageNameCache.get(packageName)[ FD ]
Line_4 $$ if (info == null) -->Line_10 $$ List<VirtualFile> result = ContainerUtil.newSmartList()[ CD ]
Line_2 $$ private PackageInfo getPackageInfo(@NotNull final String packageName) -->Line_12 $$ int i = packageName.lastIndexOf('.')[ FD ]
