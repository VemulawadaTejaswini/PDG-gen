Line_2 $$ public void property(Map<Object, Object> args) -->Line_25 $$ setter.put("params", param)[ CD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_6 $$ Object type = args.get("type")[ CD ]
Line_9 $$ Boolean isStatic = (Boolean) args.get("isStatic")-->Line_20 $$ setter.put("isStatic", isStatic)[ FD ]
Line_10 $$ Map<Object, Object> getter = new HashMap<Object, Object>()-->Line_16 $$ method(getter)[ FD ]
Line_6 $$ Object type = args.get("type")-->Line_12 $$ getter.put("type", type)[ FD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_18 $$ setter.put("name", GroovyPropertyUtils.getSetterName(name))[ CD ]
Line_10 $$ Map<Object, Object> getter = new HashMap<Object, Object>()-->Line_15 $$ getter.put("docUrl", docUrl)[ FD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_3 $$ if (args == null)[ CD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_3 $$ if (args == null)[ FD ]
Line_17 $$ Map<Object, Object> setter = new HashMap<Object, Object>()-->Line_18 $$ setter.put("name", GroovyPropertyUtils.getSetterName(name))[ FD ]
Line_5 $$ String name = (String) args.get("name")-->Line_11 $$ getter.put("name", GroovyPropertyUtils.getGetterNameNonBoolean(name))[ FD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_21 $$ setter.put("doc", doc)[ CD ]
Line_5 $$ String name = (String) args.get("name")-->Line_24 $$ param.put(name, type)[ FD ]
Line_10 $$ Map<Object, Object> getter = new HashMap<Object, Object>()-->Line_12 $$ getter.put("type", type)[ FD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_22 $$ setter.put("docUrl", docUrl)[ CD ]
Line_17 $$ Map<Object, Object> setter = new HashMap<Object, Object>()-->Line_21 $$ setter.put("doc", doc)[ FD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_13 $$ getter.put("isStatic", isStatic)[ CD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_8 $$ Object docUrl = args.get("docUrl")[ CD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_9 $$ Boolean isStatic = (Boolean) args.get("isStatic")[ FD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_17 $$ Map<Object, Object> setter = new HashMap<Object, Object>()[ CD ]
Line_6 $$ Object type = args.get("type")-->Line_24 $$ param.put(name, type)[ FD ]
Line_3 $$ if (args == null)-->Line_4 $$ return[ CD ]
Line_10 $$ Map<Object, Object> getter = new HashMap<Object, Object>()-->Line_11 $$ getter.put("name", GroovyPropertyUtils.getGetterNameNonBoolean(name))[ FD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_8 $$ Object docUrl = args.get("docUrl")[ FD ]
Line_17 $$ Map<Object, Object> setter = new HashMap<Object, Object>()-->Line_19 $$ setter.put("type", "void")[ FD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_20 $$ setter.put("isStatic", isStatic)[ CD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_9 $$ Boolean isStatic = (Boolean) args.get("isStatic")[ CD ]
Line_8 $$ Object docUrl = args.get("docUrl")-->Line_15 $$ getter.put("docUrl", docUrl)[ FD ]
Line_7 $$ Object doc = args.get("doc")-->Line_21 $$ setter.put("doc", doc)[ FD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_7 $$ Object doc = args.get("doc")[ CD ]
Line_17 $$ Map<Object, Object> setter = new HashMap<Object, Object>()-->Line_26 $$ method(setter)[ FD ]
Line_5 $$ String name = (String) args.get("name")-->Line_18 $$ setter.put("name", GroovyPropertyUtils.getSetterName(name))[ FD ]
Line_9 $$ Boolean isStatic = (Boolean) args.get("isStatic")-->Line_13 $$ getter.put("isStatic", isStatic)[ FD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_24 $$ param.put(name, type)[ CD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_11 $$ getter.put("name", GroovyPropertyUtils.getGetterNameNonBoolean(name))[ CD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_5 $$ String name = (String) args.get("name")[ FD ]
Line_10 $$ Map<Object, Object> getter = new HashMap<Object, Object>()-->Line_13 $$ getter.put("isStatic", isStatic)[ FD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_6 $$ Object type = args.get("type")[ FD ]
Line_8 $$ Object docUrl = args.get("docUrl")-->Line_22 $$ setter.put("docUrl", docUrl)[ FD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_23 $$ final HashMap<Object, Object> param = new HashMap<Object, Object>()[ CD ]
Line_10 $$ Map<Object, Object> getter = new HashMap<Object, Object>()-->Line_14 $$ getter.put("doc", doc)[ FD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_19 $$ setter.put("type", "void")[ CD ]
Line_23 $$ final HashMap<Object, Object> param = new HashMap<Object, Object>()-->Line_24 $$ param.put(name, type)[ FD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_12 $$ getter.put("type", type)[ CD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_7 $$ Object doc = args.get("doc")[ FD ]
Line_17 $$ Map<Object, Object> setter = new HashMap<Object, Object>()-->Line_22 $$ setter.put("docUrl", docUrl)[ FD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_5 $$ String name = (String) args.get("name")[ CD ]
Line_23 $$ final HashMap<Object, Object> param = new HashMap<Object, Object>()-->Line_25 $$ setter.put("params", param)[ FD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_26 $$ method(setter)[ CD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_10 $$ Map<Object, Object> getter = new HashMap<Object, Object>()[ CD ]
Line_7 $$ Object doc = args.get("doc")-->Line_14 $$ getter.put("doc", doc)[ FD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_16 $$ method(getter)[ CD ]
Line_17 $$ Map<Object, Object> setter = new HashMap<Object, Object>()-->Line_20 $$ setter.put("isStatic", isStatic)[ FD ]
Line_17 $$ Map<Object, Object> setter = new HashMap<Object, Object>()-->Line_25 $$ setter.put("params", param)[ FD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_15 $$ getter.put("docUrl", docUrl)[ CD ]
Line_2 $$ public void property(Map<Object, Object> args) -->Line_14 $$ getter.put("doc", doc)[ CD ]
