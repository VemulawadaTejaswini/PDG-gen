Line_23 $$ Set<String> values = keyToValues.get(key)-->Line_25 $$ values = new HashSet<String>()[ FD ]
Line_4 $$ if (progress != null) -->Line_5 $$ progress.setText2(InspectionsBundle.message("duplicate.property.key.progress.indicator.text", key))[ CD ]
Line_2 $$ private void prepareDuplicateKeysByFile(final Map<String, Set<PsiFile>> keyToFiles, final InspectionManager manager, final Map<String, Set<String>> keyToValues, final List<ProblemDescriptor> problemDescriptors, final PsiFile psiFile, final ProgressIndicator progress) -->Line_26 $$ keyToValues.put(key, values)[ FD ]
Line_23 $$ Set<String> values = keyToValues.get(key)-->Line_24 $$ if (values == null) [ FD ]
Line_24 $$ if (values == null) -->Line_26 $$ keyToValues.put(key, values)[ CD ]
Line_2 $$ private void prepareDuplicateKeysByFile(final Map<String, Set<PsiFile>> keyToFiles, final InspectionManager manager, final Map<String, Set<String>> keyToValues, final List<ProblemDescriptor> problemDescriptors, final PsiFile psiFile, final ProgressIndicator progress) -->Line_6 $$ if (progress.isCanceled())[ FD ]
Line_10 $$ int duplicatesCount = 0-->Line_22 $$ duplicatesCount++[ FD ]
Line_2 $$ private void prepareDuplicateKeysByFile(final Map<String, Set<PsiFile>> keyToFiles, final InspectionManager manager, final Map<String, Set<String>> keyToValues, final List<ProblemDescriptor> problemDescriptors, final PsiFile psiFile, final ProgressIndicator progress) -->Line_32 $$ problemDescriptors.add(manager.createProblemDescriptor(psiFile, message.toString(), false, null, ProblemHighlightType.GENERIC_ERROR_OR_WARNING))[ FD ]
Line_18 $$ if (duplicatesCount == 0) -->Line_19 $$ message.append(InspectionsBundle.message("duplicate.property.key.problem.descriptor", key))[ CD ]
Line_2 $$ private void prepareDuplicateKeysByFile(final Map<String, Set<PsiFile>> keyToFiles, final InspectionManager manager, final Map<String, Set<String>> keyToValues, final List<ProblemDescriptor> problemDescriptors, final PsiFile psiFile, final ProgressIndicator progress) -->Line_5 $$ progress.setText2(InspectionsBundle.message("duplicate.property.key.progress.indicator.text", key))[ FD ]
Line_10 $$ int duplicatesCount = 0-->Line_18 $$ if (duplicatesCount == 0) [ FD ]
Line_24 $$ if (values == null) -->Line_25 $$ values = new HashSet<String>()[ CD ]
Line_2 $$ private void prepareDuplicateKeysByFile(final Map<String, Set<PsiFile>> keyToFiles, final InspectionManager manager, final Map<String, Set<String>> keyToValues, final List<ProblemDescriptor> problemDescriptors, final PsiFile psiFile, final ProgressIndicator progress) -->Line_3 $$ for (String key : keyToFiles.keySet()) [ FD ]
Line_2 $$ private void prepareDuplicateKeysByFile(final Map<String, Set<PsiFile>> keyToFiles, final InspectionManager manager, final Map<String, Set<String>> keyToValues, final List<ProblemDescriptor> problemDescriptors, final PsiFile psiFile, final ProgressIndicator progress) -->Line_4 $$ if (progress != null) [ FD ]
Line_3 $$ for (String key : keyToFiles.keySet()) -->Line_23 $$ Set<String> values = keyToValues.get(key)[ FD ]
Line_4 $$ if (progress != null) -->Line_6 $$ if (progress.isCanceled())[ CD ]
Line_3 $$ for (String key : keyToFiles.keySet()) -->Line_19 $$ message.append(InspectionsBundle.message("duplicate.property.key.problem.descriptor", key))[ FD ]
Line_2 $$ private void prepareDuplicateKeysByFile(final Map<String, Set<PsiFile>> keyToFiles, final InspectionManager manager, final Map<String, Set<String>> keyToValues, final List<ProblemDescriptor> problemDescriptors, final PsiFile psiFile, final ProgressIndicator progress) -->Line_11 $$ Set<PsiFile> psiFilesWithDuplicates = keyToFiles.get(key)[ FD ]
Line_23 $$ Set<String> values = keyToValues.get(key)-->Line_28 $$ values.add(property.getValue())[ FD ]
Line_9 $$ final StringBuffer message = new StringBuffer()-->Line_32 $$ problemDescriptors.add(manager.createProblemDescriptor(psiFile, message.toString(), false, null, ProblemHighlightType.GENERIC_ERROR_OR_WARNING))[ FD ]
Line_9 $$ final StringBuffer message = new StringBuffer()-->Line_19 $$ message.append(InspectionsBundle.message("duplicate.property.key.problem.descriptor", key))[ FD ]
Line_25 $$ values = new HashSet<String>()-->Line_26 $$ keyToValues.put(key, values)[ FD ]
Line_23 $$ Set<String> values = keyToValues.get(key)-->Line_26 $$ keyToValues.put(key, values)[ FD ]
Line_25 $$ values = new HashSet<String>()-->Line_28 $$ values.add(property.getValue())[ FD ]
Line_3 $$ for (String key : keyToFiles.keySet()) -->Line_5 $$ progress.setText2(InspectionsBundle.message("duplicate.property.key.progress.indicator.text", key))[ FD ]
Line_17 $$ for (IProperty property : propertiesByKey) -->Line_21 $$ surroundWithHref(message, property.getPsiElement().getFirstChild(), false)[ FD ]
Line_3 $$ for (String key : keyToFiles.keySet()) -->Line_26 $$ keyToValues.put(key, values)[ FD ]
Line_17 $$ for (IProperty property : propertiesByKey) -->Line_28 $$ values.add(property.getValue())[ FD ]
Line_9 $$ final StringBuffer message = new StringBuffer()-->Line_21 $$ surroundWithHref(message, property.getPsiElement().getFirstChild(), false)[ FD ]
Line_15 $$ PropertiesFile propertiesFile = (PropertiesFile) file-->Line_16 $$ final List<IProperty> propertiesByKey = propertiesFile.findPropertiesByKey(key)[ FD ]
Line_2 $$ private void prepareDuplicateKeysByFile(final Map<String, Set<PsiFile>> keyToFiles, final InspectionManager manager, final Map<String, Set<String>> keyToValues, final List<ProblemDescriptor> problemDescriptors, final PsiFile psiFile, final ProgressIndicator progress) -->Line_23 $$ Set<String> values = keyToValues.get(key)[ FD ]
Line_31 $$ if (duplicatesCount > 1 && CHECK_DUPLICATE_KEYS) -->Line_32 $$ problemDescriptors.add(manager.createProblemDescriptor(psiFile, message.toString(), false, null, ProblemHighlightType.GENERIC_ERROR_OR_WARNING))[ CD ]
Line_3 $$ for (String key : keyToFiles.keySet()) -->Line_11 $$ Set<PsiFile> psiFilesWithDuplicates = keyToFiles.get(key)[ FD ]
Line_3 $$ for (String key : keyToFiles.keySet()) -->Line_16 $$ final List<IProperty> propertiesByKey = propertiesFile.findPropertiesByKey(key)[ FD ]
