Line_2 $$ public void pathVarsOverrideStaticAttributes() throws Exception -->Line_8 $$ tv.setApplicationContext(wac)[ CD ]
Line_7 $$ TestView tv = new TestView(wac)-->Line_8 $$ tv.setApplicationContext(wac)[ FD ]
Line_2 $$ public void pathVarsOverrideStaticAttributes() throws Exception -->Line_11 $$ p.setProperty("something", "else")[ CD ]
Line_7 $$ TestView tv = new TestView(wac)-->Line_12 $$ tv.setAttributes(p)[ FD ]
Line_3 $$ WebApplicationContext wac = mock(WebApplicationContext.class)-->Line_8 $$ tv.setApplicationContext(wac)[ FD ]
Line_9 $$ Properties p = new Properties()-->Line_12 $$ tv.setAttributes(p)[ FD ]
Line_2 $$ public void pathVarsOverrideStaticAttributes() throws Exception -->Line_18 $$ checkContainsAll(pathVars, tv.model)[ CD ]
Line_2 $$ public void pathVarsOverrideStaticAttributes() throws Exception -->Line_14 $$ pathVars.put("one", new HashMap<Object, Object>())[ CD ]
Line_2 $$ public void pathVarsOverrideStaticAttributes() throws Exception -->Line_4 $$ given(wac.getServletContext()).willReturn(new MockServletContext())[ CD ]
Line_2 $$ public void pathVarsOverrideStaticAttributes() throws Exception -->Line_3 $$ WebApplicationContext wac = mock(WebApplicationContext.class)[ CD ]
Line_2 $$ public void pathVarsOverrideStaticAttributes() throws Exception -->Line_7 $$ TestView tv = new TestView(wac)[ CD ]
Line_2 $$ public void pathVarsOverrideStaticAttributes() throws Exception -->Line_16 $$ request.setAttribute(View.PATH_VARIABLES, pathVars)[ CD ]
Line_2 $$ public void pathVarsOverrideStaticAttributes() throws Exception -->Line_21 $$ assertTrue(tv.initialized)[ CD ]
Line_5 $$ HttpServletRequest request = new MockHttpServletRequest()-->Line_17 $$ tv.render(new HashMap<String, Object>(), request, response)[ FD ]
Line_2 $$ public void pathVarsOverrideStaticAttributes() throws Exception -->Line_5 $$ HttpServletRequest request = new MockHttpServletRequest()[ CD ]
Line_13 $$ Map<String, Object> pathVars = new HashMap<String, Object>()-->Line_15 $$ pathVars.put("two", new Object())[ FD ]
Line_9 $$ Properties p = new Properties()-->Line_10 $$ p.setProperty("one", "bar")[ FD ]
Line_13 $$ Map<String, Object> pathVars = new HashMap<String, Object>()-->Line_14 $$ pathVars.put("one", new HashMap<Object, Object>())[ FD ]
Line_13 $$ Map<String, Object> pathVars = new HashMap<String, Object>()-->Line_16 $$ request.setAttribute(View.PATH_VARIABLES, pathVars)[ FD ]
Line_2 $$ public void pathVarsOverrideStaticAttributes() throws Exception -->Line_13 $$ Map<String, Object> pathVars = new HashMap<String, Object>()[ CD ]
Line_2 $$ public void pathVarsOverrideStaticAttributes() throws Exception -->Line_12 $$ tv.setAttributes(p)[ CD ]
Line_6 $$ HttpServletResponse response = new MockHttpServletResponse()-->Line_17 $$ tv.render(new HashMap<String, Object>(), request, response)[ FD ]
Line_2 $$ public void pathVarsOverrideStaticAttributes() throws Exception -->Line_9 $$ Properties p = new Properties()[ CD ]
Line_2 $$ public void pathVarsOverrideStaticAttributes() throws Exception -->Line_19 $$ assertEquals(3, tv.model.size())[ CD ]
Line_2 $$ public void pathVarsOverrideStaticAttributes() throws Exception -->Line_10 $$ p.setProperty("one", "bar")[ CD ]
Line_9 $$ Properties p = new Properties()-->Line_11 $$ p.setProperty("something", "else")[ FD ]
Line_3 $$ WebApplicationContext wac = mock(WebApplicationContext.class)-->Line_4 $$ given(wac.getServletContext()).willReturn(new MockServletContext())[ FD ]
Line_2 $$ public void pathVarsOverrideStaticAttributes() throws Exception -->Line_17 $$ tv.render(new HashMap<String, Object>(), request, response)[ CD ]
Line_2 $$ public void pathVarsOverrideStaticAttributes() throws Exception -->Line_15 $$ pathVars.put("two", new Object())[ CD ]
Line_5 $$ HttpServletRequest request = new MockHttpServletRequest()-->Line_16 $$ request.setAttribute(View.PATH_VARIABLES, pathVars)[ FD ]
Line_2 $$ public void pathVarsOverrideStaticAttributes() throws Exception -->Line_6 $$ HttpServletResponse response = new MockHttpServletResponse()[ CD ]
Line_7 $$ TestView tv = new TestView(wac)-->Line_17 $$ tv.render(new HashMap<String, Object>(), request, response)[ FD ]
Line_13 $$ Map<String, Object> pathVars = new HashMap<String, Object>()-->Line_18 $$ checkContainsAll(pathVars, tv.model)[ FD ]
Line_2 $$ public void pathVarsOverrideStaticAttributes() throws Exception -->Line_20 $$ assertEquals("else", tv.model.get("something"))[ CD ]
