Line_3 $$ Map<String, Object> map1 = new LinkedHashMap()-->Line_5 $$ map1.put("$data = /foo/get-foo-data", params)[ FD ]
Line_7 $$ Map<String, Object> map2 = new LinkedHashMap()-->Line_11 $$ map2.put("$thief = /foo/get-foo-data", map3)[ FD ]
Line_2 $$ public void testInnerCallsNested() throws Exception -->Line_12 $$ map3.put("id", -13)[ CD ]
Line_10 $$ Map<String, Object> map3 = new LinkedHashMap()-->Line_12 $$ map3.put("id", -13)[ FD ]
Line_2 $$ public void testInnerCallsNested() throws Exception -->Line_19 $$ Object result = jsonWebServiceAction.invoke()[ CD ]
Line_2 $$ public void testInnerCallsNested() throws Exception -->Line_22 $$ StringBundler sb = new StringBundler(5)[ CD ]
Line_22 $$ StringBundler sb = new StringBundler(5)-->Line_23 $$ sb.append("[ FD ]
Line_17 $$ String json = toJSON(map1)-->Line_18 $$ JSONWebServiceAction jsonWebServiceAction = prepareInvokerAction(json)[ FD ]
Line_2 $$ public void testInnerCallsNested() throws Exception -->Line_17 $$ String json = toJSON(map1)[ CD ]
Line_10 $$ Map<String, Object> map3 = new LinkedHashMap()-->Line_14 $$ map3.put("$world = /foo/hello-world", map4)[ FD ]
Line_2 $$ public void testInnerCallsNested() throws Exception -->Line_10 $$ Map<String, Object> map3 = new LinkedHashMap()[ CD ]
Line_2 $$ public void testInnerCallsNested() throws Exception -->Line_8 $$ params.put("$spy = /foo/get-foo-data", map2)[ CD ]
Line_2 $$ public void testInnerCallsNested() throws Exception -->Line_6 $$ params.put("id", 173)[ CD ]
Line_13 $$ Map<String, Object> map4 = new LinkedHashMap()-->Line_16 $$ map4.put("worldName", "Jupiter")[ FD ]
Line_2 $$ public void testInnerCallsNested() throws Exception -->Line_24 $$ sb.append("\"spy\":[ CD ]
Line_4 $$ Map<String, Object> params = new LinkedHashMap()-->Line_5 $$ map1.put("$data = /foo/get-foo-data", params)[ FD ]
Line_2 $$ public void testInnerCallsNested() throws Exception -->Line_25 $$ sb.append("\"thief\":[ CD ]
Line_2 $$ public void testInnerCallsNested() throws Exception -->Line_27 $$ sb.append("\"value\":\"licensed\"},\"value\":\"foo!\"}")[ CD ]
Line_10 $$ Map<String, Object> map3 = new LinkedHashMap()-->Line_11 $$ map2.put("$thief = /foo/get-foo-data", map3)[ FD ]
Line_2 $$ public void testInnerCallsNested() throws Exception -->Line_7 $$ Map<String, Object> map2 = new LinkedHashMap()[ CD ]
Line_2 $$ public void testInnerCallsNested() throws Exception -->Line_15 $$ map4.put("@userId", "$thief.id")[ CD ]
Line_22 $$ StringBundler sb = new StringBundler(5)-->Line_28 $$ Assert.assertEquals(toMap(sb.toString()), toMap(toJSON(result)))[ FD ]
Line_2 $$ public void testInnerCallsNested() throws Exception -->Line_3 $$ Map<String, Object> map1 = new LinkedHashMap()[ CD ]
Line_13 $$ Map<String, Object> map4 = new LinkedHashMap()-->Line_14 $$ map3.put("$world = /foo/hello-world", map4)[ FD ]
Line_2 $$ public void testInnerCallsNested() throws Exception -->Line_13 $$ Map<String, Object> map4 = new LinkedHashMap()[ CD ]
Line_22 $$ StringBundler sb = new StringBundler(5)-->Line_25 $$ sb.append("\"thief\":[ FD ]
Line_2 $$ public void testInnerCallsNested() throws Exception -->Line_26 $$ sb.append("\"value\":\"fun\",\"world\":\"Welcome -13 to Jupiter\"},")[ CD ]
Line_2 $$ public void testInnerCallsNested() throws Exception -->Line_21 $$ Assert.assertTrue(invokerResult.getResult() instanceof Map)[ CD ]
Line_18 $$ JSONWebServiceAction jsonWebServiceAction = prepareInvokerAction(json)-->Line_19 $$ Object result = jsonWebServiceAction.invoke()[ FD ]
Line_2 $$ public void testInnerCallsNested() throws Exception -->Line_23 $$ sb.append("[ CD ]
Line_2 $$ public void testInnerCallsNested() throws Exception -->Line_5 $$ map1.put("$data = /foo/get-foo-data", params)[ CD ]
Line_2 $$ public void testInnerCallsNested() throws Exception -->Line_20 $$ JSONWebServiceInvokerAction.InvokerResult invokerResult = (JSONWebServiceInvokerAction.InvokerResult) result[ CD ]
Line_2 $$ public void testInnerCallsNested() throws Exception -->Line_14 $$ map3.put("$world = /foo/hello-world", map4)[ CD ]
Line_2 $$ public void testInnerCallsNested() throws Exception -->Line_9 $$ map2.put("id", "007")[ CD ]
Line_7 $$ Map<String, Object> map2 = new LinkedHashMap()-->Line_9 $$ map2.put("id", "007")[ FD ]
Line_4 $$ Map<String, Object> params = new LinkedHashMap()-->Line_6 $$ params.put("id", 173)[ FD ]
Line_22 $$ StringBundler sb = new StringBundler(5)-->Line_26 $$ sb.append("\"value\":\"fun\",\"world\":\"Welcome -13 to Jupiter\"},")[ FD ]
Line_2 $$ public void testInnerCallsNested() throws Exception -->Line_28 $$ Assert.assertEquals(toMap(sb.toString()), toMap(toJSON(result)))[ CD ]
Line_3 $$ Map<String, Object> map1 = new LinkedHashMap()-->Line_17 $$ String json = toJSON(map1)[ FD ]
Line_22 $$ StringBundler sb = new StringBundler(5)-->Line_27 $$ sb.append("\"value\":\"licensed\"},\"value\":\"foo!\"}")[ FD ]
Line_20 $$ JSONWebServiceInvokerAction.InvokerResult invokerResult = (JSONWebServiceInvokerAction.InvokerResult) result-->Line_21 $$ Assert.assertTrue(invokerResult.getResult() instanceof Map)[ FD ]
Line_4 $$ Map<String, Object> params = new LinkedHashMap()-->Line_8 $$ params.put("$spy = /foo/get-foo-data", map2)[ FD ]
Line_2 $$ public void testInnerCallsNested() throws Exception -->Line_11 $$ map2.put("$thief = /foo/get-foo-data", map3)[ CD ]
Line_7 $$ Map<String, Object> map2 = new LinkedHashMap()-->Line_8 $$ params.put("$spy = /foo/get-foo-data", map2)[ FD ]
Line_2 $$ public void testInnerCallsNested() throws Exception -->Line_16 $$ map4.put("worldName", "Jupiter")[ CD ]
Line_2 $$ public void testInnerCallsNested() throws Exception -->Line_18 $$ JSONWebServiceAction jsonWebServiceAction = prepareInvokerAction(json)[ CD ]
Line_22 $$ StringBundler sb = new StringBundler(5)-->Line_24 $$ sb.append("\"spy\":[ FD ]
Line_19 $$ Object result = jsonWebServiceAction.invoke()-->Line_28 $$ Assert.assertEquals(toMap(sb.toString()), toMap(toJSON(result)))[ FD ]
Line_2 $$ public void testInnerCallsNested() throws Exception -->Line_4 $$ Map<String, Object> params = new LinkedHashMap()[ CD ]
Line_13 $$ Map<String, Object> map4 = new LinkedHashMap()-->Line_15 $$ map4.put("@userId", "$thief.id")[ FD ]
