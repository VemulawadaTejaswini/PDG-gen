Line_9 $$ Map<String, String> outputMap = MapUtil.filter(inputMap, new PredicateFilter<Map.Entry<String, ?>>() -->Line_19 $$ Assert.assertEquals("two", outputMap.get("2"))[ FD ]
Line_2 $$ public void shouldReturnMapFilteredByEven() -->Line_3 $$ Map<String, String> inputMap = new HashMap()[ CD ]
Line_3 $$ Map<String, String> inputMap = new HashMap()-->Line_9 $$ Map<String, String> outputMap = MapUtil.filter(inputMap, new PredicateFilter<Map.Entry<String, ?>>() [ FD ]
Line_2 $$ public void shouldReturnMapFilteredByEven() -->Line_18 $$ Assert.assertEquals(2, outputMap.size())[ CD ]
Line_2 $$ public void shouldReturnMapFilteredByEven() -->Line_4 $$ inputMap.put("1", "one")[ CD ]
Line_9 $$ Map<String, String> outputMap = MapUtil.filter(inputMap, new PredicateFilter<Map.Entry<String, ?>>() -->Line_11 $$ int value = GetterUtil.getInteger(entry.getKey())[ CD ]
Line_2 $$ public void shouldReturnMapFilteredByEven() -->Line_7 $$ inputMap.put("4", "four")[ CD ]
Line_3 $$ Map<String, String> inputMap = new HashMap()-->Line_8 $$ inputMap.put("5", "five")[ FD ]
Line_12 $$ if ((value % 2) == 0) -->Line_13 $$ return true[ CD ]
Line_9 $$ Map<String, String> outputMap = MapUtil.filter(inputMap, new PredicateFilter<Map.Entry<String, ?>>() -->Line_20 $$ Assert.assertEquals("four", outputMap.get("4"))[ FD ]
Line_9 $$ Map<String, String> outputMap = MapUtil.filter(inputMap, new PredicateFilter<Map.Entry<String, ?>>() -->Line_18 $$ Assert.assertEquals(2, outputMap.size())[ FD ]
Line_9 $$ Map<String, String> outputMap = MapUtil.filter(inputMap, new PredicateFilter<Map.Entry<String, ?>>() -->Line_12 $$ if ((value % 2) == 0) [ CD ]
Line_2 $$ public void shouldReturnMapFilteredByEven() -->Line_9 $$ Map<String, String> outputMap = MapUtil.filter(inputMap, new PredicateFilter<Map.Entry<String, ?>>() [ CD ]
Line_3 $$ Map<String, String> inputMap = new HashMap()-->Line_5 $$ inputMap.put("2", "two")[ FD ]
Line_9 $$ Map<String, String> outputMap = MapUtil.filter(inputMap, new PredicateFilter<Map.Entry<String, ?>>() -->Line_15 $$ return false[ CD ]
Line_2 $$ public void shouldReturnMapFilteredByEven() -->Line_5 $$ inputMap.put("2", "two")[ CD ]
Line_2 $$ public void shouldReturnMapFilteredByEven() -->Line_8 $$ inputMap.put("5", "five")[ CD ]
Line_2 $$ public void shouldReturnMapFilteredByEven() -->Line_6 $$ inputMap.put("3", "three")[ CD ]
Line_2 $$ public void shouldReturnMapFilteredByEven() -->Line_19 $$ Assert.assertEquals("two", outputMap.get("2"))[ CD ]
Line_3 $$ Map<String, String> inputMap = new HashMap()-->Line_7 $$ inputMap.put("4", "four")[ FD ]
Line_2 $$ public void shouldReturnMapFilteredByEven() -->Line_20 $$ Assert.assertEquals("four", outputMap.get("4"))[ CD ]
Line_3 $$ Map<String, String> inputMap = new HashMap()-->Line_4 $$ inputMap.put("1", "one")[ FD ]
Line_9 $$ Map<String, String> outputMap = MapUtil.filter(inputMap, new PredicateFilter<Map.Entry<String, ?>>() -->Line_11 $$ int value = GetterUtil.getInteger(entry.getKey())[ FD ]
Line_3 $$ Map<String, String> inputMap = new HashMap()-->Line_6 $$ inputMap.put("3", "three")[ FD ]
