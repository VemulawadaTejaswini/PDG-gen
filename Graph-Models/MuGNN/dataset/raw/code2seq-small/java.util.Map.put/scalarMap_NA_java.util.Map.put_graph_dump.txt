Line_3 $$ Map<String, String> map = new HashMap<String, String>()-->Line_16 $$ Map<Integer, Integer> result = (Map<Integer, Integer>) conversionService.convert(map, sourceType, targetType)[ FD ]
Line_2 $$ public void scalarMap() throws Exception -->Line_6 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(map)[ CD ]
Line_2 $$ public void scalarMap() throws Exception -->Line_16 $$ Map<Integer, Integer> result = (Map<Integer, Integer>) conversionService.convert(map, sourceType, targetType)[ CD ]
Line_6 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(map)-->Line_10 $$ conversionService.convert(map, sourceType, targetType)[ FD ]
Line_7 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("scalarMapTarget"))-->Line_16 $$ Map<Integer, Integer> result = (Map<Integer, Integer>) conversionService.convert(map, sourceType, targetType)[ FD ]
Line_16 $$ Map<Integer, Integer> result = (Map<Integer, Integer>) conversionService.convert(map, sourceType, targetType)-->Line_18 $$ assertEquals((Integer) 9, result.get(1))[ FD ]
Line_6 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(map)-->Line_8 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ FD ]
Line_3 $$ Map<String, String> map = new HashMap<String, String>()-->Line_6 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(map)[ FD ]
Line_2 $$ public void scalarMap() throws Exception -->Line_15 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ CD ]
Line_6 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(map)-->Line_16 $$ Map<Integer, Integer> result = (Map<Integer, Integer>) conversionService.convert(map, sourceType, targetType)[ FD ]
Line_2 $$ public void scalarMap() throws Exception -->Line_8 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ CD ]
Line_3 $$ Map<String, String> map = new HashMap<String, String>()-->Line_5 $$ map.put("2", "37")[ FD ]
Line_2 $$ public void scalarMap() throws Exception -->Line_19 $$ assertEquals((Integer) 37, result.get(2))[ CD ]
Line_3 $$ Map<String, String> map = new HashMap<String, String>()-->Line_10 $$ conversionService.convert(map, sourceType, targetType)[ FD ]
Line_7 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("scalarMapTarget"))-->Line_15 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ FD ]
Line_3 $$ Map<String, String> map = new HashMap<String, String>()-->Line_17 $$ assertFalse(map.equals(result))[ FD ]
Line_16 $$ Map<Integer, Integer> result = (Map<Integer, Integer>) conversionService.convert(map, sourceType, targetType)-->Line_17 $$ assertFalse(map.equals(result))[ FD ]
Line_2 $$ public void scalarMap() throws Exception -->Line_3 $$ Map<String, String> map = new HashMap<String, String>()[ CD ]
Line_2 $$ public void scalarMap() throws Exception -->Line_17 $$ assertFalse(map.equals(result))[ CD ]
Line_6 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(map)-->Line_15 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ FD ]
Line_7 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("scalarMapTarget"))-->Line_10 $$ conversionService.convert(map, sourceType, targetType)[ FD ]
Line_2 $$ public void scalarMap() throws Exception -->Line_7 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("scalarMapTarget"))[ CD ]
Line_3 $$ Map<String, String> map = new HashMap<String, String>()-->Line_4 $$ map.put("1", "9")[ FD ]
Line_2 $$ public void scalarMap() throws Exception -->Line_14 $$ conversionService.addConverterFactory(new StringToNumberConverterFactory())[ CD ]
Line_2 $$ public void scalarMap() throws Exception -->Line_5 $$ map.put("2", "37")[ CD ]
Line_2 $$ public void scalarMap() throws Exception -->Line_18 $$ assertEquals((Integer) 9, result.get(1))[ CD ]
Line_16 $$ Map<Integer, Integer> result = (Map<Integer, Integer>) conversionService.convert(map, sourceType, targetType)-->Line_19 $$ assertEquals((Integer) 37, result.get(2))[ FD ]
Line_2 $$ public void scalarMap() throws Exception -->Line_4 $$ map.put("1", "9")[ CD ]
Line_7 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("scalarMapTarget"))-->Line_8 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ FD ]
