Line_3 $$ int methodId = decoder.readSmallInt()-->Line_4 $$ Method method = methods.get(methodId)[ FD ]
Line_5 $$ if (method == null) -->Line_8 $$ int paramCount = decoder.readSmallInt()[ CD ]
Line_13 $$ method = declaringClass.getDeclaredMethod(methodName, paramTypes)-->Line_14 $$ methods.put(methodId, method)[ FD ]
Line_5 $$ if (method == null) -->Line_9 $$ Class<?>[] paramTypes = new Class<?>[paramCount][ CD ]
Line_5 $$ if (method == null) -->Line_6 $$ Class<?> declaringClass = readType()[ CD ]
Line_4 $$ Method method = methods.get(methodId)-->Line_5 $$ if (method == null) [ FD ]
Line_5 $$ if (method == null) -->Line_10 $$ for (int i = 0; i < paramTypes.length; i++) [ CD ]
Line_7 $$ String methodName = decoder.readString()-->Line_13 $$ method = declaringClass.getDeclaredMethod(methodName, paramTypes)[ FD ]
Line_4 $$ Method method = methods.get(methodId)-->Line_14 $$ methods.put(methodId, method)[ FD ]
Line_10 $$ for (int i = 0; i < paramTypes.length; i++) -->Line_11 $$ paramTypes[i] = readType()[ CD ]
Line_2 $$ private Method readMethod() throws ClassNotFoundException, NoSuchMethodException, IOException -->Line_16 $$ return method[ CD ]
Line_2 $$ private Method readMethod() throws ClassNotFoundException, NoSuchMethodException, IOException -->Line_4 $$ Method method = methods.get(methodId)[ CD ]
Line_5 $$ if (method == null) -->Line_14 $$ methods.put(methodId, method)[ CD ]
Line_9 $$ Class<?>[] paramTypes = new Class<?>[paramCount]-->Line_13 $$ method = declaringClass.getDeclaredMethod(methodName, paramTypes)[ FD ]
Line_2 $$ private Method readMethod() throws ClassNotFoundException, NoSuchMethodException, IOException -->Line_5 $$ if (method == null) [ CD ]
Line_5 $$ if (method == null) -->Line_13 $$ method = declaringClass.getDeclaredMethod(methodName, paramTypes)[ CD ]
Line_2 $$ private Method readMethod() throws ClassNotFoundException, NoSuchMethodException, IOException -->Line_3 $$ int methodId = decoder.readSmallInt()[ CD ]
Line_4 $$ Method method = methods.get(methodId)-->Line_13 $$ method = declaringClass.getDeclaredMethod(methodName, paramTypes)[ FD ]
Line_3 $$ int methodId = decoder.readSmallInt()-->Line_14 $$ methods.put(methodId, method)[ FD ]
Line_5 $$ if (method == null) -->Line_7 $$ String methodName = decoder.readString()[ CD ]
Line_6 $$ Class<?> declaringClass = readType()-->Line_13 $$ method = declaringClass.getDeclaredMethod(methodName, paramTypes)[ FD ]
