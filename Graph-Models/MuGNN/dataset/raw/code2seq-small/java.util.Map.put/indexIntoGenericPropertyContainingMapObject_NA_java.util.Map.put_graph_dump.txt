Line_8 $$ StandardEvaluationContext context = new StandardEvaluationContext()-->Line_14 $$ assertEquals(map, expression.getValue(context, Map.class))[ FD ]
Line_7 $$ SpelExpressionParser parser = new SpelExpressionParser()-->Line_15 $$ expression = parser.parseExpression("property['foo']")[ FD ]
Line_2 $$ public void indexIntoGenericPropertyContainingMapObject() -->Line_6 $$ property.put("property", map)[ CD ]
Line_11 $$ Expression expression = parser.parseExpression("property")-->Line_13 $$ assertEquals(map, expression.getValue(context))[ FD ]
Line_2 $$ public void indexIntoGenericPropertyContainingMapObject() -->Line_12 $$ assertEquals("java.util.HashMap<?, ?>", expression.getValueTypeDescriptor(context).toString())[ CD ]
Line_4 $$ Map<String, String> map = new HashMap<String, String>()-->Line_13 $$ assertEquals(map, expression.getValue(context))[ FD ]
Line_2 $$ public void indexIntoGenericPropertyContainingMapObject() -->Line_10 $$ context.setRootObject(property)[ CD ]
Line_2 $$ public void indexIntoGenericPropertyContainingMapObject() -->Line_16 $$ assertEquals("bar", expression.getValue(context))[ CD ]
Line_4 $$ Map<String, String> map = new HashMap<String, String>()-->Line_6 $$ property.put("property", map)[ FD ]
Line_8 $$ StandardEvaluationContext context = new StandardEvaluationContext()-->Line_9 $$ context.addPropertyAccessor(new MapAccessor())[ FD ]
Line_7 $$ SpelExpressionParser parser = new SpelExpressionParser()-->Line_11 $$ Expression expression = parser.parseExpression("property")[ FD ]
Line_15 $$ expression = parser.parseExpression("property['foo']")-->Line_16 $$ assertEquals("bar", expression.getValue(context))[ FD ]
Line_3 $$ Map<String, Map<String, String>> property = new HashMap<String, Map<String, String>>()-->Line_10 $$ context.setRootObject(property)[ FD ]
Line_11 $$ Expression expression = parser.parseExpression("property")-->Line_12 $$ assertEquals("java.util.HashMap<?, ?>", expression.getValueTypeDescriptor(context).toString())[ FD ]
Line_2 $$ public void indexIntoGenericPropertyContainingMapObject() -->Line_14 $$ assertEquals(map, expression.getValue(context, Map.class))[ CD ]
Line_2 $$ public void indexIntoGenericPropertyContainingMapObject() -->Line_15 $$ expression = parser.parseExpression("property['foo']")[ CD ]
Line_11 $$ Expression expression = parser.parseExpression("property")-->Line_15 $$ expression = parser.parseExpression("property['foo']")[ FD ]
Line_2 $$ public void indexIntoGenericPropertyContainingMapObject() -->Line_5 $$ map.put("foo", "bar")[ CD ]
Line_2 $$ public void indexIntoGenericPropertyContainingMapObject() -->Line_7 $$ SpelExpressionParser parser = new SpelExpressionParser()[ CD ]
Line_2 $$ public void indexIntoGenericPropertyContainingMapObject() -->Line_3 $$ Map<String, Map<String, String>> property = new HashMap<String, Map<String, String>>()[ CD ]
Line_8 $$ StandardEvaluationContext context = new StandardEvaluationContext()-->Line_10 $$ context.setRootObject(property)[ FD ]
Line_8 $$ StandardEvaluationContext context = new StandardEvaluationContext()-->Line_16 $$ assertEquals("bar", expression.getValue(context))[ FD ]
Line_11 $$ Expression expression = parser.parseExpression("property")-->Line_16 $$ assertEquals("bar", expression.getValue(context))[ FD ]
Line_3 $$ Map<String, Map<String, String>> property = new HashMap<String, Map<String, String>>()-->Line_6 $$ property.put("property", map)[ FD ]
Line_11 $$ Expression expression = parser.parseExpression("property")-->Line_14 $$ assertEquals(map, expression.getValue(context, Map.class))[ FD ]
Line_2 $$ public void indexIntoGenericPropertyContainingMapObject() -->Line_4 $$ Map<String, String> map = new HashMap<String, String>()[ CD ]
Line_2 $$ public void indexIntoGenericPropertyContainingMapObject() -->Line_8 $$ StandardEvaluationContext context = new StandardEvaluationContext()[ CD ]
Line_4 $$ Map<String, String> map = new HashMap<String, String>()-->Line_14 $$ assertEquals(map, expression.getValue(context, Map.class))[ FD ]
Line_8 $$ StandardEvaluationContext context = new StandardEvaluationContext()-->Line_12 $$ assertEquals("java.util.HashMap<?, ?>", expression.getValueTypeDescriptor(context).toString())[ FD ]
Line_8 $$ StandardEvaluationContext context = new StandardEvaluationContext()-->Line_13 $$ assertEquals(map, expression.getValue(context))[ FD ]
Line_2 $$ public void indexIntoGenericPropertyContainingMapObject() -->Line_9 $$ context.addPropertyAccessor(new MapAccessor())[ CD ]
Line_4 $$ Map<String, String> map = new HashMap<String, String>()-->Line_5 $$ map.put("foo", "bar")[ FD ]
Line_2 $$ public void indexIntoGenericPropertyContainingMapObject() -->Line_13 $$ assertEquals(map, expression.getValue(context))[ CD ]
Line_2 $$ public void indexIntoGenericPropertyContainingMapObject() -->Line_11 $$ Expression expression = parser.parseExpression("property")[ CD ]
