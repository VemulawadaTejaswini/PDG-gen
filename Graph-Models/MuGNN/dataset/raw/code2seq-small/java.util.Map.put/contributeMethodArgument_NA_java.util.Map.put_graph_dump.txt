Line_2 $$ public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) -->Line_3 $$ if (Map.class.isAssignableFrom(parameter.getParameterType())) [ CD ]
Line_2 $$ public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) -->Line_6 $$ PathVariable ann = parameter.getParameterAnnotation(PathVariable.class)[ CD ]
Line_2 $$ public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) -->Line_7 $$ String name = (ann == null || StringUtils.isEmpty(ann.value()) ? parameter.getParameterName() : ann.value())[ CD ]
Line_2 $$ public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) -->Line_8 $$ value = formatUriValue(conversionService, new TypeDescriptor(parameter), value)[ CD ]
Line_2 $$ public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) -->Line_3 $$ if (Map.class.isAssignableFrom(parameter.getParameterType())) [ FD ]
Line_7 $$ String name = (ann == null || StringUtils.isEmpty(ann.value()) ? parameter.getParameterName() : ann.value())-->Line_9 $$ uriVariables.put(name, value)[ FD ]
Line_8 $$ value = formatUriValue(conversionService, new TypeDescriptor(parameter), value)-->Line_9 $$ uriVariables.put(name, value)[ FD ]
Line_2 $$ public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) -->Line_8 $$ value = formatUriValue(conversionService, new TypeDescriptor(parameter), value)[ FD ]
Line_2 $$ public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) -->Line_9 $$ uriVariables.put(name, value)[ FD ]
Line_2 $$ public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) -->Line_6 $$ PathVariable ann = parameter.getParameterAnnotation(PathVariable.class)[ FD ]
Line_2 $$ public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) -->Line_9 $$ uriVariables.put(name, value)[ CD ]
Line_6 $$ PathVariable ann = parameter.getParameterAnnotation(PathVariable.class)-->Line_7 $$ String name = (ann == null || StringUtils.isEmpty(ann.value()) ? parameter.getParameterName() : ann.value())[ FD ]
Line_2 $$ public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) -->Line_7 $$ String name = (ann == null || StringUtils.isEmpty(ann.value()) ? parameter.getParameterName() : ann.value())[ FD ]
Line_3 $$ if (Map.class.isAssignableFrom(parameter.getParameterType())) -->Line_4 $$ return[ CD ]
