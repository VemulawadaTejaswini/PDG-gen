Line_6 $$ Map<String, byte[]> xAttrs = Maps.newHashMap()-->Line_13 $$ xAttrs.put(userName1, userValue1)[ FD ]
Line_2 $$ private void doTestPreserveRawXAttrs(String src, String dest, String preserveOpts, boolean expectRaw, boolean expectUser, int expectedExitCode) throws Exception -->Line_5 $$ if (expectedExitCode == DistCpConstants.SUCCESS) [ CD ]
Line_6 $$ Map<String, byte[]> xAttrs = Maps.newHashMap()-->Line_10 $$ xAttrs.put(rawName1, rawValue1)[ FD ]
Line_12 $$ if (expectUser) -->Line_13 $$ xAttrs.put(userName1, userValue1)[ CD ]
Line_2 $$ private void doTestPreserveRawXAttrs(String src, String dest, String preserveOpts, boolean expectRaw, boolean expectUser, int expectedExitCode) throws Exception -->Line_4 $$ DistCpTestUtils.assertRunDistCp(expectedExitCode, src, dest, preserveOpts, conf)[ CD ]
Line_9 $$ if (expectRaw) -->Line_10 $$ xAttrs.put(rawName1, rawValue1)[ CD ]
Line_2 $$ private void doTestPreserveRawXAttrs(String src, String dest, String preserveOpts, boolean expectRaw, boolean expectUser, int expectedExitCode) throws Exception -->Line_3 $$ initXAttrs()[ CD ]
Line_2 $$ private void doTestPreserveRawXAttrs(String src, String dest, String preserveOpts, boolean expectRaw, boolean expectUser, int expectedExitCode) throws Exception -->Line_4 $$ DistCpTestUtils.assertRunDistCp(expectedExitCode, src, dest, preserveOpts, conf)[ FD ]
Line_2 $$ private void doTestPreserveRawXAttrs(String src, String dest, String preserveOpts, boolean expectRaw, boolean expectUser, int expectedExitCode) throws Exception -->Line_5 $$ if (expectedExitCode == DistCpConstants.SUCCESS) [ FD ]
Line_6 $$ Map<String, byte[]> xAttrs = Maps.newHashMap()-->Line_8 $$ xAttrs.clear()[ FD ]
Line_5 $$ if (expectedExitCode == DistCpConstants.SUCCESS) -->Line_6 $$ Map<String, byte[]> xAttrs = Maps.newHashMap()[ CD ]
Line_6 $$ Map<String, byte[]> xAttrs = Maps.newHashMap()-->Line_15 $$ DistCpTestUtils.assertXAttrs(new Path(dest, p), fs, xAttrs)[ FD ]
