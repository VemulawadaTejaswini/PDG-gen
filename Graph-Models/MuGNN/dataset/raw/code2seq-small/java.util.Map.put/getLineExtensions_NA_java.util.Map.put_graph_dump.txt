Line_28 $$ for (XValueNodeImpl value : values) -->Line_49 $$ final String name = value.getName()[ FD ]
Line_2 $$ public Collection<LineExtensionInfo> getLineExtensions(@NotNull Project project, @NotNull VirtualFile file, int lineNumber) -->Line_3 $$ if (!Registry.is("ide.debugger.inline")) [ CD ]
Line_22 $$ if (values != null && !values.isEmpty()) -->Line_27 $$ ArrayList<VariableText> result = new ArrayList<VariableText>()[ CD ]
Line_59 $$ variableValue = new VariableValue(text.toString(), null, value.hashCode())-->Line_67 $$ if (!variableValue.isChanged()) [ FD ]
Line_7 $$ final ObjectLongHashMap<VirtualFile> timestamps = project.getUserData(XVariablesView.DEBUG_VARIABLES_TIMESTAMPS)-->Line_17 $$ final Long timestamp = timestamps.get(file)[ FD ]
Line_67 $$ if (!variableValue.isChanged()) -->Line_72 $$ variableValue.produceChangedParts(res.infos)[ CD ]
Line_75 $$ final List<LineExtensionInfo> infos = new ArrayList<LineExtensionInfo>()-->Line_79 $$ return infos.size() > LINE_EXTENTIONS_MAX_COUNT ? infos.subList(0, LINE_EXTENTIONS_MAX_COUNT) : infos[ FD ]
Line_57 $$ VariableValue variableValue = oldValues.get(var)-->Line_60 $$ oldValues.put(var, variableValue)[ FD ]
Line_29 $$ SimpleColoredText text = new SimpleColoredText()-->Line_43 $$ text.append(type, SimpleTextAttributes.REGULAR_ATTRIBUTES)[ FD ]
Line_27 $$ ArrayList<VariableText> result = new ArrayList<VariableText>()-->Line_54 $$ result.add(res)[ FD ]
Line_2 $$ public Collection<LineExtensionInfo> getLineExtensions(@NotNull Project project, @NotNull VirtualFile file, int lineNumber) -->Line_81 $$ return null[ CD ]
Line_13 $$ if (oldValues == null) -->Line_14 $$ oldValues = new HashMap<Variable, VariableValue>()[ CD ]
Line_2 $$ public Collection<LineExtensionInfo> getLineExtensions(@NotNull Project project, @NotNull VirtualFile file, int lineNumber) -->Line_8 $$ final Document doc = FileDocumentManager.getInstance().getDocument(file)[ CD ]
Line_2 $$ public Collection<LineExtensionInfo> getLineExtensions(@NotNull Project project, @NotNull VirtualFile file, int lineNumber) -->Line_24 $$ final int bpLine = getCurrentBreakPointLineInFile(session, file)[ FD ]
Line_2 $$ public Collection<LineExtensionInfo> getLineExtensions(@NotNull Project project, @NotNull VirtualFile file, int lineNumber) -->Line_6 $$ XVariablesView.InlineVariablesInfo data = project.getUserData(XVariablesView.DEBUG_VARIABLES)[ FD ]
Line_3 $$ if (!Registry.is("ide.debugger.inline")) -->Line_4 $$ return null[ CD ]
Line_2 $$ public Collection<LineExtensionInfo> getLineExtensions(@NotNull Project project, @NotNull VirtualFile file, int lineNumber) -->Line_9 $$ if (data == null || timestamps == null || doc == null) [ CD ]
Line_57 $$ VariableValue variableValue = oldValues.get(var)-->Line_72 $$ variableValue.produceChangedParts(res.infos)[ FD ]
Line_14 $$ oldValues = new HashMap<Variable, VariableValue>()-->Line_57 $$ VariableValue variableValue = oldValues.get(var)[ FD ]
Line_2 $$ public Collection<LineExtensionInfo> getLineExtensions(@NotNull Project project, @NotNull VirtualFile file, int lineNumber) -->Line_12 $$ Map<Variable, VariableValue> oldValues = project.getUserData(CACHE)[ CD ]
Line_22 $$ if (values != null && !values.isEmpty()) -->Line_26 $$ final TextAttributes attributes = bpLine == lineNumber && isTopFrame && ((XDebuggerManagerImpl) XDebuggerManager.getInstance(project)).isFullLineHighlighter() ? getTopFrameSelectedAttributes() : getNormalAttributes()[ CD ]
Line_53 $$ final VariableText res = new VariableText()-->Line_69 $$ res.add(new LineExtensionInfo(s, attributes))[ FD ]
Line_2 $$ public Collection<LineExtensionInfo> getLineExtensions(@NotNull Project project, @NotNull VirtualFile file, int lineNumber) -->Line_13 $$ if (oldValues == null) [ CD ]
Line_57 $$ VariableValue variableValue = oldValues.get(var)-->Line_58 $$ if (variableValue == null) [ FD ]
Line_41 $$ final String type = value.getValuePresentation().getType()-->Line_42 $$ if (!StringUtil.isEmpty(type)) [ FD ]
Line_62 $$ if (variableValue.valueNodeHashCode != value.hashCode()) -->Line_65 $$ variableValue.valueNodeHashCode = value.hashCode()[ CD ]
Line_12 $$ Map<Variable, VariableValue> oldValues = project.getUserData(CACHE)-->Line_15 $$ project.putUserData(CACHE, oldValues)[ FD ]
Line_56 $$ Variable var = new Variable(name, lineNumber)-->Line_60 $$ oldValues.put(var, variableValue)[ FD ]
Line_2 $$ public Collection<LineExtensionInfo> getLineExtensions(@NotNull Project project, @NotNull VirtualFile file, int lineNumber) -->Line_17 $$ final Long timestamp = timestamps.get(file)[ CD ]
Line_2 $$ public Collection<LineExtensionInfo> getLineExtensions(@NotNull Project project, @NotNull VirtualFile file, int lineNumber) -->Line_7 $$ final ObjectLongHashMap<VirtualFile> timestamps = project.getUserData(XVariablesView.DEBUG_VARIABLES_TIMESTAMPS)[ FD ]
Line_53 $$ final VariableText res = new VariableText()-->Line_54 $$ result.add(res)[ FD ]
Line_22 $$ if (values != null && !values.isEmpty()) -->Line_23 $$ XDebugSession session = XDebugView.getSession(values.iterator().next().getTree())[ CD ]
Line_2 $$ public Collection<LineExtensionInfo> getLineExtensions(@NotNull Project project, @NotNull VirtualFile file, int lineNumber) -->Line_21 $$ List<XValueNodeImpl> values = data.get(file, lineNumber)[ CD ]
Line_2 $$ public Collection<LineExtensionInfo> getLineExtensions(@NotNull Project project, @NotNull VirtualFile file, int lineNumber) -->Line_18 $$ if (timestamp == -1 || timestamp < doc.getModificationStamp()) [ CD ]
Line_28 $$ for (XValueNodeImpl value : values) -->Line_41 $$ final String type = value.getValuePresentation().getType()[ FD ]
Line_31 $$ final XValuePresentation presentation = value.getValuePresentation()-->Line_38 $$ presentation.renderValue(renderer)[ FD ]
Line_2 $$ public Collection<LineExtensionInfo> getLineExtensions(@NotNull Project project, @NotNull VirtualFile file, int lineNumber) -->Line_17 $$ final Long timestamp = timestamps.get(file)[ FD ]
Line_30 $$ XValueTextRendererImpl renderer = new XValueTextRendererImpl(text)-->Line_38 $$ presentation.renderValue(renderer)[ FD ]
Line_28 $$ for (XValueNodeImpl value : values) -->Line_35 $$ if (presentation instanceof XValueCompactPresentation && !value.getTree().isUnderRemoteDebug()) [ FD ]
Line_59 $$ variableValue = new VariableValue(text.toString(), null, value.hashCode())-->Line_72 $$ variableValue.produceChangedParts(res.infos)[ FD ]
Line_35 $$ if (presentation instanceof XValueCompactPresentation && !value.getTree().isUnderRemoteDebug()) -->Line_38 $$ presentation.renderValue(renderer)[ CD ]
Line_62 $$ if (variableValue.valueNodeHashCode != value.hashCode()) -->Line_64 $$ variableValue.actual = text.toString()[ CD ]
Line_12 $$ Map<Variable, VariableValue> oldValues = project.getUserData(CACHE)-->Line_14 $$ oldValues = new HashMap<Variable, VariableValue>()[ FD ]
Line_2 $$ public Collection<LineExtensionInfo> getLineExtensions(@NotNull Project project, @NotNull VirtualFile file, int lineNumber) -->Line_6 $$ XVariablesView.InlineVariablesInfo data = project.getUserData(XVariablesView.DEBUG_VARIABLES)[ CD ]
Line_35 $$ if (presentation instanceof XValueCompactPresentation && !value.getTree().isUnderRemoteDebug()) -->Line_36 $$ ((XValueCompactPresentation) presentation).renderValue(renderer, value)[ CD ]
Line_40 $$ if (StringUtil.isEmpty(text.toString())) -->Line_42 $$ if (!StringUtil.isEmpty(type)) [ CD ]
Line_56 $$ Variable var = new Variable(name, lineNumber)-->Line_57 $$ VariableValue variableValue = oldValues.get(var)[ FD ]
Line_2 $$ public Collection<LineExtensionInfo> getLineExtensions(@NotNull Project project, @NotNull VirtualFile file, int lineNumber) -->Line_15 $$ project.putUserData(CACHE, oldValues)[ FD ]
Line_29 $$ SimpleColoredText text = new SimpleColoredText()-->Line_50 $$ if (StringUtil.isEmpty(text.toString())) [ FD ]
Line_28 $$ for (XValueNodeImpl value : values) -->Line_65 $$ variableValue.valueNodeHashCode = value.hashCode()[ FD ]
Line_2 $$ public Collection<LineExtensionInfo> getLineExtensions(@NotNull Project project, @NotNull VirtualFile file, int lineNumber) -->Line_8 $$ final Document doc = FileDocumentManager.getInstance().getDocument(file)[ FD ]
Line_53 $$ final VariableText res = new VariableText()-->Line_55 $$ res.add(new LineExtensionInfo("  " + name + ": ", attributes))[ FD ]
Line_42 $$ if (!StringUtil.isEmpty(type)) -->Line_43 $$ text.append(type, SimpleTextAttributes.REGULAR_ATTRIBUTES)[ CD ]
Line_58 $$ if (variableValue == null) -->Line_60 $$ oldValues.put(var, variableValue)[ CD ]
Line_14 $$ oldValues = new HashMap<Variable, VariableValue>()-->Line_15 $$ project.putUserData(CACHE, oldValues)[ FD ]
Line_2 $$ public Collection<LineExtensionInfo> getLineExtensions(@NotNull Project project, @NotNull VirtualFile file, int lineNumber) -->Line_22 $$ if (values != null && !values.isEmpty()) [ CD ]
Line_62 $$ if (variableValue.valueNodeHashCode != value.hashCode()) -->Line_63 $$ variableValue.old = variableValue.actual[ CD ]
Line_23 $$ XDebugSession session = XDebugView.getSession(values.iterator().next().getTree())-->Line_24 $$ final int bpLine = getCurrentBreakPointLineInFile(session, file)[ FD ]
Line_21 $$ List<XValueNodeImpl> values = data.get(file, lineNumber)-->Line_22 $$ if (values != null && !values.isEmpty()) [ FD ]
Line_12 $$ Map<Variable, VariableValue> oldValues = project.getUserData(CACHE)-->Line_57 $$ VariableValue variableValue = oldValues.get(var)[ FD ]
Line_13 $$ if (oldValues == null) -->Line_15 $$ project.putUserData(CACHE, oldValues)[ CD ]
Line_29 $$ SimpleColoredText text = new SimpleColoredText()-->Line_40 $$ if (StringUtil.isEmpty(text.toString())) [ FD ]
Line_22 $$ if (values != null && !values.isEmpty()) -->Line_79 $$ return infos.size() > LINE_EXTENTIONS_MAX_COUNT ? infos.subList(0, LINE_EXTENTIONS_MAX_COUNT) : infos[ CD ]
Line_8 $$ final Document doc = FileDocumentManager.getInstance().getDocument(file)-->Line_18 $$ if (timestamp == -1 || timestamp < doc.getModificationStamp()) [ FD ]
Line_12 $$ Map<Variable, VariableValue> oldValues = project.getUserData(CACHE)-->Line_13 $$ if (oldValues == null) [ FD ]
Line_40 $$ if (StringUtil.isEmpty(text.toString())) -->Line_41 $$ final String type = value.getValuePresentation().getType()[ CD ]
Line_59 $$ variableValue = new VariableValue(text.toString(), null, value.hashCode())-->Line_60 $$ oldValues.put(var, variableValue)[ FD ]
Line_28 $$ for (XValueNodeImpl value : values) -->Line_31 $$ final XValuePresentation presentation = value.getValuePresentation()[ FD ]
Line_28 $$ for (XValueNodeImpl value : values) -->Line_36 $$ ((XValueCompactPresentation) presentation).renderValue(renderer, value)[ FD ]
Line_22 $$ if (values != null && !values.isEmpty()) -->Line_25 $$ boolean isTopFrame = session instanceof XDebugSessionImpl && ((XDebugSessionImpl) session).isTopFrameSelected()[ CD ]
Line_6 $$ XVariablesView.InlineVariablesInfo data = project.getUserData(XVariablesView.DEBUG_VARIABLES)-->Line_21 $$ List<XValueNodeImpl> values = data.get(file, lineNumber)[ FD ]
Line_31 $$ final XValuePresentation presentation = value.getValuePresentation()-->Line_32 $$ if (presentation == null)[ FD ]
Line_22 $$ if (values != null && !values.isEmpty()) -->Line_24 $$ final int bpLine = getCurrentBreakPointLineInFile(session, file)[ CD ]
Line_57 $$ VariableValue variableValue = oldValues.get(var)-->Line_67 $$ if (!variableValue.isChanged()) [ FD ]
Line_9 $$ if (data == null || timestamps == null || doc == null) -->Line_10 $$ return null[ CD ]
Line_12 $$ Map<Variable, VariableValue> oldValues = project.getUserData(CACHE)-->Line_60 $$ oldValues.put(var, variableValue)[ FD ]
Line_29 $$ SimpleColoredText text = new SimpleColoredText()-->Line_68 $$ for (String s : text.getTexts()) [ FD ]
Line_58 $$ if (variableValue == null) -->Line_59 $$ variableValue = new VariableValue(text.toString(), null, value.hashCode())[ CD ]
Line_29 $$ SimpleColoredText text = new SimpleColoredText()-->Line_64 $$ variableValue.actual = text.toString()[ FD ]
Line_2 $$ public Collection<LineExtensionInfo> getLineExtensions(@NotNull Project project, @NotNull VirtualFile file, int lineNumber) -->Line_21 $$ List<XValueNodeImpl> values = data.get(file, lineNumber)[ FD ]
Line_41 $$ final String type = value.getValuePresentation().getType()-->Line_43 $$ text.append(type, SimpleTextAttributes.REGULAR_ATTRIBUTES)[ FD ]
Line_21 $$ List<XValueNodeImpl> values = data.get(file, lineNumber)-->Line_23 $$ XDebugSession session = XDebugView.getSession(values.iterator().next().getTree())[ FD ]
Line_75 $$ final List<LineExtensionInfo> infos = new ArrayList<LineExtensionInfo>()-->Line_77 $$ infos.addAll(text.infos)[ FD ]
Line_2 $$ public Collection<LineExtensionInfo> getLineExtensions(@NotNull Project project, @NotNull VirtualFile file, int lineNumber) -->Line_7 $$ final ObjectLongHashMap<VirtualFile> timestamps = project.getUserData(XVariablesView.DEBUG_VARIABLES_TIMESTAMPS)[ CD ]
Line_30 $$ XValueTextRendererImpl renderer = new XValueTextRendererImpl(text)-->Line_36 $$ ((XValueCompactPresentation) presentation).renderValue(renderer, value)[ FD ]
Line_2 $$ public Collection<LineExtensionInfo> getLineExtensions(@NotNull Project project, @NotNull VirtualFile file, int lineNumber) -->Line_12 $$ Map<Variable, VariableValue> oldValues = project.getUserData(CACHE)[ FD ]
Line_29 $$ SimpleColoredText text = new SimpleColoredText()-->Line_59 $$ variableValue = new VariableValue(text.toString(), null, value.hashCode())[ FD ]
Line_28 $$ for (XValueNodeImpl value : values) -->Line_62 $$ if (variableValue.valueNodeHashCode != value.hashCode()) [ FD ]
Line_22 $$ if (values != null && !values.isEmpty()) -->Line_75 $$ final List<LineExtensionInfo> infos = new ArrayList<LineExtensionInfo>()[ CD ]
Line_18 $$ if (timestamp == -1 || timestamp < doc.getModificationStamp()) -->Line_19 $$ return null[ CD ]
Line_2 $$ public Collection<LineExtensionInfo> getLineExtensions(@NotNull Project project, @NotNull VirtualFile file, int lineNumber) -->Line_26 $$ final TextAttributes attributes = bpLine == lineNumber && isTopFrame && ((XDebuggerManagerImpl) XDebuggerManager.getInstance(project)).isFullLineHighlighter() ? getTopFrameSelectedAttributes() : getNormalAttributes()[ FD ]
Line_57 $$ VariableValue variableValue = oldValues.get(var)-->Line_59 $$ variableValue = new VariableValue(text.toString(), null, value.hashCode())[ FD ]
Line_14 $$ oldValues = new HashMap<Variable, VariableValue>()-->Line_60 $$ oldValues.put(var, variableValue)[ FD ]
Line_28 $$ for (XValueNodeImpl value : values) -->Line_59 $$ variableValue = new VariableValue(text.toString(), null, value.hashCode())[ FD ]
