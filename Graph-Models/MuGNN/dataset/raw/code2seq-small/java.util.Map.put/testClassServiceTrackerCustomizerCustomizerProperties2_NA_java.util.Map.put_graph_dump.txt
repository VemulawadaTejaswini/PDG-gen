Line_2 $$ public void testClassServiceTrackerCustomizerCustomizerProperties2() throws Exception -->Line_24 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ CD ]
Line_3 $$ AtomicInteger counter = new AtomicInteger()-->Line_23 $$ Assert.assertEquals(3, counter.intValue())[ FD ]
Line_10 $$ ServiceRegistration<InterfaceOne> serviceRegistrationA = _registry.registerService(InterfaceOne.class, interfaceOneA)-->Line_11 $$ Assert.assertNotNull(serviceRegistrationA)[ FD ]
Line_2 $$ public void testClassServiceTrackerCustomizerCustomizerProperties2() throws Exception -->Line_22 $$ Assert.assertEquals(1, serviceTrackerList.size())[ CD ]
Line_18 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_27 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ FD ]
Line_2 $$ public void testClassServiceTrackerCustomizerCustomizerProperties2() throws Exception -->Line_27 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ CD ]
Line_2 $$ public void testClassServiceTrackerCustomizerCustomizerProperties2() throws Exception -->Line_28 $$ Assert.assertEquals(0, interfaceOnes.size())[ CD ]
Line_4 $$ ServiceTrackerCustomizer<InterfaceOne, InterfaceOne> serviceTrackerCustomizer = new MockServiceTrackerCustomizer(counter)-->Line_7 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, serviceTrackerCustomizer, properties)[ FD ]
Line_10 $$ ServiceRegistration<InterfaceOne> serviceRegistrationA = _registry.registerService(InterfaceOne.class, interfaceOneA)-->Line_21 $$ serviceRegistrationA.unregister()[ FD ]
Line_7 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, serviceTrackerCustomizer, properties)-->Line_29 $$ Assert.assertEquals(0, serviceTrackerList.size())[ FD ]
Line_2 $$ public void testClassServiceTrackerCustomizerCustomizerProperties2() throws Exception -->Line_12 $$ InterfaceOne interfaceOneB = getInstance()[ CD ]
Line_2 $$ public void testClassServiceTrackerCustomizerCustomizerProperties2() throws Exception -->Line_14 $$ Assert.assertEquals(2, serviceTrackerList.size())[ CD ]
Line_2 $$ public void testClassServiceTrackerCustomizerCustomizerProperties2() throws Exception -->Line_6 $$ properties.put("a.property", "G")[ CD ]
Line_5 $$ Map<String, Object> properties = new HashMap()-->Line_6 $$ properties.put("a.property", "G")[ FD ]
Line_24 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_27 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ FD ]
Line_7 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, serviceTrackerCustomizer, properties)-->Line_26 $$ serviceTrackerList.remove(interfaceOneB)[ FD ]
Line_9 $$ InterfaceOne interfaceOneA = getInstance()-->Line_10 $$ ServiceRegistration<InterfaceOne> serviceRegistrationA = _registry.registerService(InterfaceOne.class, interfaceOneA)[ FD ]
Line_2 $$ public void testClassServiceTrackerCustomizerCustomizerProperties2() throws Exception -->Line_13 $$ serviceTrackerList.add(interfaceOneB)[ CD ]
Line_2 $$ public void testClassServiceTrackerCustomizerCustomizerProperties2() throws Exception -->Line_7 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, serviceTrackerCustomizer, properties)[ CD ]
Line_2 $$ public void testClassServiceTrackerCustomizerCustomizerProperties2() throws Exception -->Line_11 $$ Assert.assertNotNull(serviceRegistrationA)[ CD ]
Line_2 $$ public void testClassServiceTrackerCustomizerCustomizerProperties2() throws Exception -->Line_21 $$ serviceRegistrationA.unregister()[ CD ]
Line_7 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, serviceTrackerCustomizer, properties)-->Line_8 $$ Assert.assertEquals(0, serviceTrackerList.size())[ FD ]
Line_18 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_28 $$ Assert.assertEquals(0, interfaceOnes.size())[ FD ]
Line_2 $$ public void testClassServiceTrackerCustomizerCustomizerProperties2() throws Exception -->Line_19 $$ Assert.assertEquals(1, interfaceOnes.size())[ CD ]
Line_7 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, serviceTrackerCustomizer, properties)-->Line_14 $$ Assert.assertEquals(2, serviceTrackerList.size())[ FD ]
Line_24 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_25 $$ Assert.assertEquals(1, interfaceOnes.size())[ FD ]
Line_2 $$ public void testClassServiceTrackerCustomizerCustomizerProperties2() throws Exception -->Line_8 $$ Assert.assertEquals(0, serviceTrackerList.size())[ CD ]
Line_12 $$ InterfaceOne interfaceOneB = getInstance()-->Line_13 $$ serviceTrackerList.add(interfaceOneB)[ FD ]
Line_2 $$ public void testClassServiceTrackerCustomizerCustomizerProperties2() throws Exception -->Line_3 $$ AtomicInteger counter = new AtomicInteger()[ CD ]
Line_7 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, serviceTrackerCustomizer, properties)-->Line_13 $$ serviceTrackerList.add(interfaceOneB)[ FD ]
Line_3 $$ AtomicInteger counter = new AtomicInteger()-->Line_20 $$ Assert.assertEquals(2, counter.intValue())[ FD ]
Line_18 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_25 $$ Assert.assertEquals(1, interfaceOnes.size())[ FD ]
Line_2 $$ public void testClassServiceTrackerCustomizerCustomizerProperties2() throws Exception -->Line_18 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ CD ]
Line_18 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_24 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ FD ]
Line_2 $$ public void testClassServiceTrackerCustomizerCustomizerProperties2() throws Exception -->Line_9 $$ InterfaceOne interfaceOneA = getInstance()[ CD ]
Line_18 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_19 $$ Assert.assertEquals(1, interfaceOnes.size())[ FD ]
Line_12 $$ InterfaceOne interfaceOneB = getInstance()-->Line_26 $$ serviceTrackerList.remove(interfaceOneB)[ FD ]
Line_5 $$ Map<String, Object> properties = new HashMap()-->Line_7 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, serviceTrackerCustomizer, properties)[ FD ]
Line_2 $$ public void testClassServiceTrackerCustomizerCustomizerProperties2() throws Exception -->Line_20 $$ Assert.assertEquals(2, counter.intValue())[ CD ]
Line_27 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_28 $$ Assert.assertEquals(0, interfaceOnes.size())[ FD ]
Line_2 $$ public void testClassServiceTrackerCustomizerCustomizerProperties2() throws Exception -->Line_26 $$ serviceTrackerList.remove(interfaceOneB)[ CD ]
Line_2 $$ public void testClassServiceTrackerCustomizerCustomizerProperties2() throws Exception -->Line_5 $$ Map<String, Object> properties = new HashMap()[ CD ]
Line_24 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_28 $$ Assert.assertEquals(0, interfaceOnes.size())[ FD ]
Line_2 $$ public void testClassServiceTrackerCustomizerCustomizerProperties2() throws Exception -->Line_25 $$ Assert.assertEquals(1, interfaceOnes.size())[ CD ]
Line_2 $$ public void testClassServiceTrackerCustomizerCustomizerProperties2() throws Exception -->Line_10 $$ ServiceRegistration<InterfaceOne> serviceRegistrationA = _registry.registerService(InterfaceOne.class, interfaceOneA)[ CD ]
Line_2 $$ public void testClassServiceTrackerCustomizerCustomizerProperties2() throws Exception -->Line_29 $$ Assert.assertEquals(0, serviceTrackerList.size())[ CD ]
Line_2 $$ public void testClassServiceTrackerCustomizerCustomizerProperties2() throws Exception -->Line_23 $$ Assert.assertEquals(3, counter.intValue())[ CD ]
Line_2 $$ public void testClassServiceTrackerCustomizerCustomizerProperties2() throws Exception -->Line_30 $$ Assert.assertEquals(4, counter.intValue())[ CD ]
Line_15 $$ for (InterfaceOne interfaceOne : serviceTrackerList) -->Line_16 $$ Assert.assertNotNull(interfaceOne)[ FD ]
Line_7 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, serviceTrackerCustomizer, properties)-->Line_22 $$ Assert.assertEquals(1, serviceTrackerList.size())[ FD ]
Line_2 $$ public void testClassServiceTrackerCustomizerCustomizerProperties2() throws Exception -->Line_4 $$ ServiceTrackerCustomizer<InterfaceOne, InterfaceOne> serviceTrackerCustomizer = new MockServiceTrackerCustomizer(counter)[ CD ]
Line_3 $$ AtomicInteger counter = new AtomicInteger()-->Line_30 $$ Assert.assertEquals(4, counter.intValue())[ FD ]
