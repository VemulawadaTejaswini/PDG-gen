Line_2 $$ public void renderOnlySpecifiedModelKey() throws Exception -->Line_9 $$ String result = response.getContentAsString()[ CD ]
Line_2 $$ public void renderOnlySpecifiedModelKey() throws Exception -->Line_14 $$ validateResult()[ CD ]
Line_2 $$ public void renderOnlySpecifiedModelKey() throws Exception -->Line_10 $$ assertTrue(result.length() > 0)[ CD ]
Line_2 $$ public void renderOnlySpecifiedModelKey() throws Exception -->Line_3 $$ view.setModelKey("bar")[ CD ]
Line_2 $$ public void renderOnlySpecifiedModelKey() throws Exception -->Line_4 $$ Map<String, Object> model = new HashMap<String, Object>()[ CD ]
Line_2 $$ public void renderOnlySpecifiedModelKey() throws Exception -->Line_8 $$ view.render(model, request, response)[ CD ]
Line_4 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_8 $$ view.render(model, request, response)[ FD ]
Line_4 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_6 $$ model.put("bar", "bar")[ FD ]
Line_2 $$ public void renderOnlySpecifiedModelKey() throws Exception -->Line_5 $$ model.put("foo", "foo")[ CD ]
Line_4 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_5 $$ model.put("foo", "foo")[ FD ]
Line_2 $$ public void renderOnlySpecifiedModelKey() throws Exception -->Line_7 $$ model.put("baz", "baz")[ CD ]
Line_2 $$ public void renderOnlySpecifiedModelKey() throws Exception -->Line_11 $$ assertFalse(result.contains("foo"))[ CD ]
Line_9 $$ String result = response.getContentAsString()-->Line_12 $$ assertTrue(result.contains("bar"))[ FD ]
Line_2 $$ public void renderOnlySpecifiedModelKey() throws Exception -->Line_12 $$ assertTrue(result.contains("bar"))[ CD ]
Line_9 $$ String result = response.getContentAsString()-->Line_13 $$ assertFalse(result.contains("baz"))[ FD ]
Line_4 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_7 $$ model.put("baz", "baz")[ FD ]
Line_2 $$ public void renderOnlySpecifiedModelKey() throws Exception -->Line_6 $$ model.put("bar", "bar")[ CD ]
Line_2 $$ public void renderOnlySpecifiedModelKey() throws Exception -->Line_13 $$ assertFalse(result.contains("baz"))[ CD ]
Line_9 $$ String result = response.getContentAsString()-->Line_11 $$ assertFalse(result.contains("foo"))[ FD ]
Line_9 $$ String result = response.getContentAsString()-->Line_10 $$ assertTrue(result.length() > 0)[ FD ]
