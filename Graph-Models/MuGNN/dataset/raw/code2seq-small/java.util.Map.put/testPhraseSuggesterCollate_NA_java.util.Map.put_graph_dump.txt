Line_23 $$ String filterString = XContentFactory.jsonBuilder().startObject().startObject("match_phrase").field("title", "-->Line_24 $$ PhraseSuggestionBuilder filteredQuerySuggest = suggest.collateQuery(filterString)[ FD ]
Line_55 $$ Map<String, Object> params = new HashMap()-->Line_58 $$ PhraseSuggestionBuilder phraseSuggestWithParams = suggest.collateQuery(collateWithParams).collateParams(params)[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_41 $$ String filterStr = XContentFactory.jsonBuilder().startObject().startObject("pprefix").field("title", "[ CD ]
Line_31 $$ PhraseSuggestionBuilder incorrectFilteredSuggest = suggest.collateQuery(incorrectFilterString)-->Line_33 $$ searchSuggest("united states house of representatives elections in washington 2006", numShards.numPrimaries, incorrectFilteredSuggest)[ FD ]
Line_25 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", filteredQuerySuggest)-->Line_28 $$ assertSuggestionSize(searchSuggest, 0, 0, "title")[ FD ]
Line_30 $$ String incorrectFilterString = XContentFactory.jsonBuilder().startObject().startObject("test").field("title", "-->Line_31 $$ PhraseSuggestionBuilder incorrectFilteredSuggest = suggest.collateQuery(incorrectFilterString)[ FD ]
Line_27 $$ searchSuggest = searchSuggest("Elections of Representatives Parliament", filteredQuerySuggest)-->Line_28 $$ assertSuggestionSize(searchSuggest, 0, 0, "title")[ FD ]
Line_21 $$ Suggest searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", suggest)-->Line_26 $$ assertSuggestionSize(searchSuggest, 0, 2, "title")[ FD ]
Line_24 $$ PhraseSuggestionBuilder filteredQuerySuggest = suggest.collateQuery(filterString)-->Line_27 $$ searchSuggest = searchSuggest("Elections of Representatives Parliament", filteredQuerySuggest)[ FD ]
Line_8 $$ List<String> titles = new ArrayList()-->Line_11 $$ titles.add("State")[ FD ]
Line_8 $$ List<String> titles = new ArrayList()-->Line_14 $$ titles.add("Election")[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_31 $$ PhraseSuggestionBuilder incorrectFilteredSuggest = suggest.collateQuery(incorrectFilterString)[ CD ]
Line_48 $$ String collateWithParams = XContentFactory.jsonBuilder().startObject().startObject("-->Line_61 $$ PhraseSuggestionBuilder phraseSuggestWithParamsAndReturn = suggest.collateQuery(collateWithParams).collateParams(params).collatePrune(true)[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_57 $$ params.put("query_field", "title")[ CD ]
Line_62 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", phraseSuggestWithParamsAndReturn)-->Line_64 $$ assertSuggestionPhraseCollateMatchExists(searchSuggest, "title", 2)[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_60 $$ assertSuggestionSize(searchSuggest, 0, 2, "title")[ CD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_42 $$ PhraseSuggestionBuilder in = suggest.collateQuery(filterStr)[ CD ]
Line_16 $$ for (String title : titles) -->Line_17 $$ builders.add(client().prepareIndex("test", "type1").setSource("title", title))[ FD ]
Line_20 $$ PhraseSuggestionBuilder suggest = phraseSuggestion("title").field("title").addCandidateGenerator(PhraseSuggestionBuilder.candidateGenerator("title").suggestMode("always").maxTermFreq(.99f).size(10).maxInspections(200)).confidence(0f).maxErrors(2f).shardSize(30000).size(10)-->Line_24 $$ PhraseSuggestionBuilder filteredQuerySuggest = suggest.collateQuery(filterString)[ FD ]
Line_25 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", filteredQuerySuggest)-->Line_27 $$ searchSuggest = searchSuggest("Elections of Representatives Parliament", filteredQuerySuggest)[ FD ]
Line_59 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", phraseSuggestWithParams)-->Line_60 $$ assertSuggestionSize(searchSuggest, 0, 2, "title")[ FD ]
Line_39 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", filteredFilterSuggest)-->Line_64 $$ assertSuggestionPhraseCollateMatchExists(searchSuggest, "title", 2)[ FD ]
Line_27 $$ searchSuggest = searchSuggest("Elections of Representatives Parliament", filteredQuerySuggest)-->Line_62 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", phraseSuggestWithParamsAndReturn)[ FD ]
Line_15 $$ List<IndexRequestBuilder> builders = new ArrayList()-->Line_17 $$ builders.add(client().prepareIndex("test", "type1").setSource("title", title))[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_6 $$ assertAcked(builder.addMapping("type1", mapping))[ CD ]
Line_39 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", filteredFilterSuggest)-->Line_63 $$ assertSuggestionSize(searchSuggest, 0, 10, "title")[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_11 $$ titles.add("State")[ CD ]
Line_39 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", filteredFilterSuggest)-->Line_40 $$ assertSuggestionSize(searchSuggest, 0, 2, "title")[ FD ]
Line_8 $$ List<String> titles = new ArrayList()-->Line_9 $$ titles.add("United States House of Representatives Elections in Washington 2006")[ FD ]
Line_21 $$ Suggest searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", suggest)-->Line_22 $$ assertSuggestionSize(searchSuggest, 0, 10, "title")[ FD ]
Line_25 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", filteredQuerySuggest)-->Line_59 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", phraseSuggestWithParams)[ FD ]
Line_21 $$ Suggest searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", suggest)-->Line_27 $$ searchSuggest = searchSuggest("Elections of Representatives Parliament", filteredQuerySuggest)[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_55 $$ Map<String, Object> params = new HashMap()[ CD ]
Line_20 $$ PhraseSuggestionBuilder suggest = phraseSuggestion("title").field("title").addCandidateGenerator(PhraseSuggestionBuilder.candidateGenerator("title").suggestMode("always").maxTermFreq(.99f).size(10).maxInspections(200)).confidence(0f).maxErrors(2f).shardSize(30000).size(10)-->Line_49 $$ PhraseSuggestionBuilder phraseSuggestWithNoParams = suggest.collateQuery(collateWithParams)[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_3 $$ CreateIndexRequestBuilder builder = prepareCreate("test").setSettings(settingsBuilder().put(indexSettings()).put(SETTING_NUMBER_OF_SHARDS, 1).put("index.analysis.analyzer.text.tokenizer", "standard").putArray("index.analysis.analyzer.text.filter", "lowercase", "my_shingle").put("index.analysis.filter.my_shingle.type", "shingle").put("index.analysis.filter.my_shingle.output_unigrams", true).put("index.analysis.filter.my_shingle.min_shingle_size", 2).put("index.analysis.filter.my_shingle.max_shingle_size", 3))[ CD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_22 $$ assertSuggestionSize(searchSuggest, 0, 10, "title")[ CD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_48 $$ String collateWithParams = XContentFactory.jsonBuilder().startObject().startObject("[ CD ]
Line_39 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", filteredFilterSuggest)-->Line_62 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", phraseSuggestWithParamsAndReturn)[ FD ]
Line_39 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", filteredFilterSuggest)-->Line_59 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", phraseSuggestWithParams)[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_62 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", phraseSuggestWithParamsAndReturn)[ CD ]
Line_42 $$ PhraseSuggestionBuilder in = suggest.collateQuery(filterStr)-->Line_44 $$ searchSuggest("united states house of representatives elections in washington 2006", numShards.numPrimaries, in)[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_38 $$ PhraseSuggestionBuilder filteredFilterSuggest = suggest.collateQuery(filterStringAsFilter)[ CD ]
Line_55 $$ Map<String, Object> params = new HashMap()-->Line_56 $$ params.put("query_type", "match_phrase")[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_9 $$ titles.add("United States House of Representatives Elections in Washington 2006")[ CD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_30 $$ String incorrectFilterString = XContentFactory.jsonBuilder().startObject().startObject("test").field("title", "[ CD ]
Line_21 $$ Suggest searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", suggest)-->Line_39 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", filteredFilterSuggest)[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_5 $$ XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("title").field("type", "string").field("analyzer", "text").endObject().endObject().endObject().endObject()[ CD ]
Line_21 $$ Suggest searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", suggest)-->Line_28 $$ assertSuggestionSize(searchSuggest, 0, 0, "title")[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_15 $$ List<IndexRequestBuilder> builders = new ArrayList()[ CD ]
Line_20 $$ PhraseSuggestionBuilder suggest = phraseSuggestion("title").field("title").addCandidateGenerator(PhraseSuggestionBuilder.candidateGenerator("title").suggestMode("always").maxTermFreq(.99f).size(10).maxInspections(200)).confidence(0f).maxErrors(2f).shardSize(30000).size(10)-->Line_38 $$ PhraseSuggestionBuilder filteredFilterSuggest = suggest.collateQuery(filterStringAsFilter)[ FD ]
Line_25 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", filteredQuerySuggest)-->Line_64 $$ assertSuggestionPhraseCollateMatchExists(searchSuggest, "title", 2)[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_61 $$ PhraseSuggestionBuilder phraseSuggestWithParamsAndReturn = suggest.collateQuery(collateWithParams).collateParams(params).collatePrune(true)[ CD ]
Line_21 $$ Suggest searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", suggest)-->Line_25 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", filteredQuerySuggest)[ FD ]
Line_21 $$ Suggest searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", suggest)-->Line_63 $$ assertSuggestionSize(searchSuggest, 0, 10, "title")[ FD ]
Line_3 $$ CreateIndexRequestBuilder builder = prepareCreate("test").setSettings(settingsBuilder().put(indexSettings()).put(SETTING_NUMBER_OF_SHARDS, 1).put("index.analysis.analyzer.text.tokenizer", "standard").putArray("index.analysis.analyzer.text.filter", "lowercase", "my_shingle").put("index.analysis.filter.my_shingle.type", "shingle").put("index.analysis.filter.my_shingle.output_unigrams", true).put("index.analysis.filter.my_shingle.min_shingle_size", 2).put("index.analysis.filter.my_shingle.max_shingle_size", 3))-->Line_6 $$ assertAcked(builder.addMapping("type1", mapping))[ FD ]
Line_41 $$ String filterStr = XContentFactory.jsonBuilder().startObject().startObject("pprefix").field("title", "-->Line_42 $$ PhraseSuggestionBuilder in = suggest.collateQuery(filterStr)[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_13 $$ titles.add("Representative Government")[ CD ]
Line_20 $$ PhraseSuggestionBuilder suggest = phraseSuggestion("title").field("title").addCandidateGenerator(PhraseSuggestionBuilder.candidateGenerator("title").suggestMode("always").maxTermFreq(.99f).size(10).maxInspections(200)).confidence(0f).maxErrors(2f).shardSize(30000).size(10)-->Line_58 $$ PhraseSuggestionBuilder phraseSuggestWithParams = suggest.collateQuery(collateWithParams).collateParams(params)[ FD ]
Line_24 $$ PhraseSuggestionBuilder filteredQuerySuggest = suggest.collateQuery(filterString)-->Line_25 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", filteredQuerySuggest)[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_39 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", filteredFilterSuggest)[ CD ]
Line_27 $$ searchSuggest = searchSuggest("Elections of Representatives Parliament", filteredQuerySuggest)-->Line_63 $$ assertSuggestionSize(searchSuggest, 0, 10, "title")[ FD ]
Line_25 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", filteredQuerySuggest)-->Line_62 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", phraseSuggestWithParamsAndReturn)[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_20 $$ PhraseSuggestionBuilder suggest = phraseSuggestion("title").field("title").addCandidateGenerator(PhraseSuggestionBuilder.candidateGenerator("title").suggestMode("always").maxTermFreq(.99f).size(10).maxInspections(200)).confidence(0f).maxErrors(2f).shardSize(30000).size(10)[ CD ]
Line_20 $$ PhraseSuggestionBuilder suggest = phraseSuggestion("title").field("title").addCandidateGenerator(PhraseSuggestionBuilder.candidateGenerator("title").suggestMode("always").maxTermFreq(.99f).size(10).maxInspections(200)).confidence(0f).maxErrors(2f).shardSize(30000).size(10)-->Line_42 $$ PhraseSuggestionBuilder in = suggest.collateQuery(filterStr)[ FD ]
Line_25 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", filteredQuerySuggest)-->Line_63 $$ assertSuggestionSize(searchSuggest, 0, 10, "title")[ FD ]
Line_8 $$ List<String> titles = new ArrayList()-->Line_13 $$ titles.add("Representative Government")[ FD ]
Line_25 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", filteredQuerySuggest)-->Line_39 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", filteredFilterSuggest)[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_27 $$ searchSuggest = searchSuggest("Elections of Representatives Parliament", filteredQuerySuggest)[ CD ]
Line_55 $$ Map<String, Object> params = new HashMap()-->Line_57 $$ params.put("query_field", "title")[ FD ]
Line_59 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", phraseSuggestWithParams)-->Line_64 $$ assertSuggestionPhraseCollateMatchExists(searchSuggest, "title", 2)[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_64 $$ assertSuggestionPhraseCollateMatchExists(searchSuggest, "title", 2)[ CD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_63 $$ assertSuggestionSize(searchSuggest, 0, 10, "title")[ CD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_21 $$ Suggest searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", suggest)[ CD ]
Line_58 $$ PhraseSuggestionBuilder phraseSuggestWithParams = suggest.collateQuery(collateWithParams).collateParams(params)-->Line_59 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", phraseSuggestWithParams)[ FD ]
Line_5 $$ XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("title").field("type", "string").field("analyzer", "text").endObject().endObject().endObject().endObject()-->Line_6 $$ assertAcked(builder.addMapping("type1", mapping))[ FD ]
Line_27 $$ searchSuggest = searchSuggest("Elections of Representatives Parliament", filteredQuerySuggest)-->Line_60 $$ assertSuggestionSize(searchSuggest, 0, 2, "title")[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_25 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", filteredQuerySuggest)[ CD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_8 $$ List<String> titles = new ArrayList()[ CD ]
Line_21 $$ Suggest searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", suggest)-->Line_64 $$ assertSuggestionPhraseCollateMatchExists(searchSuggest, "title", 2)[ FD ]
Line_8 $$ List<String> titles = new ArrayList()-->Line_12 $$ titles.add("Houses of Parliament")[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_56 $$ params.put("query_type", "match_phrase")[ CD ]
Line_21 $$ Suggest searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", suggest)-->Line_60 $$ assertSuggestionSize(searchSuggest, 0, 2, "title")[ FD ]
Line_21 $$ Suggest searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", suggest)-->Line_62 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", phraseSuggestWithParamsAndReturn)[ FD ]
Line_20 $$ PhraseSuggestionBuilder suggest = phraseSuggestion("title").field("title").addCandidateGenerator(PhraseSuggestionBuilder.candidateGenerator("title").suggestMode("always").maxTermFreq(.99f).size(10).maxInspections(200)).confidence(0f).maxErrors(2f).shardSize(30000).size(10)-->Line_31 $$ PhraseSuggestionBuilder incorrectFilteredSuggest = suggest.collateQuery(incorrectFilterString)[ FD ]
Line_59 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", phraseSuggestWithParams)-->Line_63 $$ assertSuggestionSize(searchSuggest, 0, 10, "title")[ FD ]
Line_20 $$ PhraseSuggestionBuilder suggest = phraseSuggestion("title").field("title").addCandidateGenerator(PhraseSuggestionBuilder.candidateGenerator("title").suggestMode("always").maxTermFreq(.99f).size(10).maxInspections(200)).confidence(0f).maxErrors(2f).shardSize(30000).size(10)-->Line_21 $$ Suggest searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", suggest)[ FD ]
Line_27 $$ searchSuggest = searchSuggest("Elections of Representatives Parliament", filteredQuerySuggest)-->Line_39 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", filteredFilterSuggest)[ FD ]
Line_27 $$ searchSuggest = searchSuggest("Elections of Representatives Parliament", filteredQuerySuggest)-->Line_40 $$ assertSuggestionSize(searchSuggest, 0, 2, "title")[ FD ]
Line_62 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", phraseSuggestWithParamsAndReturn)-->Line_63 $$ assertSuggestionSize(searchSuggest, 0, 10, "title")[ FD ]
Line_25 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", filteredQuerySuggest)-->Line_40 $$ assertSuggestionSize(searchSuggest, 0, 2, "title")[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_58 $$ PhraseSuggestionBuilder phraseSuggestWithParams = suggest.collateQuery(collateWithParams).collateParams(params)[ CD ]
Line_37 $$ String filterStringAsFilter = XContentFactory.jsonBuilder().startObject().startObject("match_phrase").field("title", "-->Line_38 $$ PhraseSuggestionBuilder filteredFilterSuggest = suggest.collateQuery(filterStringAsFilter)[ FD ]
Line_61 $$ PhraseSuggestionBuilder phraseSuggestWithParamsAndReturn = suggest.collateQuery(collateWithParams).collateParams(params).collatePrune(true)-->Line_62 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", phraseSuggestWithParamsAndReturn)[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_26 $$ assertSuggestionSize(searchSuggest, 0, 2, "title")[ CD ]
Line_55 $$ Map<String, Object> params = new HashMap()-->Line_61 $$ PhraseSuggestionBuilder phraseSuggestWithParamsAndReturn = suggest.collateQuery(collateWithParams).collateParams(params).collatePrune(true)[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_12 $$ titles.add("Houses of Parliament")[ CD ]
Line_39 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", filteredFilterSuggest)-->Line_60 $$ assertSuggestionSize(searchSuggest, 0, 2, "title")[ FD ]
Line_49 $$ PhraseSuggestionBuilder phraseSuggestWithNoParams = suggest.collateQuery(collateWithParams)-->Line_51 $$ searchSuggest("united states house of representatives elections in washington 2006", numShards.numPrimaries, phraseSuggestWithNoParams)[ FD ]
Line_48 $$ String collateWithParams = XContentFactory.jsonBuilder().startObject().startObject("-->Line_49 $$ PhraseSuggestionBuilder phraseSuggestWithNoParams = suggest.collateQuery(collateWithParams)[ FD ]
Line_59 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", phraseSuggestWithParams)-->Line_62 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", phraseSuggestWithParamsAndReturn)[ FD ]
Line_38 $$ PhraseSuggestionBuilder filteredFilterSuggest = suggest.collateQuery(filterStringAsFilter)-->Line_39 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", filteredFilterSuggest)[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_7 $$ ensureGreen()[ CD ]
Line_15 $$ List<IndexRequestBuilder> builders = new ArrayList()-->Line_19 $$ indexRandom(true, builders)[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_49 $$ PhraseSuggestionBuilder phraseSuggestWithNoParams = suggest.collateQuery(collateWithParams)[ CD ]
Line_20 $$ PhraseSuggestionBuilder suggest = phraseSuggestion("title").field("title").addCandidateGenerator(PhraseSuggestionBuilder.candidateGenerator("title").suggestMode("always").maxTermFreq(.99f).size(10).maxInspections(200)).confidence(0f).maxErrors(2f).shardSize(30000).size(10)-->Line_61 $$ PhraseSuggestionBuilder phraseSuggestWithParamsAndReturn = suggest.collateQuery(collateWithParams).collateParams(params).collatePrune(true)[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_28 $$ assertSuggestionSize(searchSuggest, 0, 0, "title")[ CD ]
Line_25 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", filteredQuerySuggest)-->Line_26 $$ assertSuggestionSize(searchSuggest, 0, 2, "title")[ FD ]
Line_27 $$ searchSuggest = searchSuggest("Elections of Representatives Parliament", filteredQuerySuggest)-->Line_59 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", phraseSuggestWithParams)[ FD ]
Line_21 $$ Suggest searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", suggest)-->Line_40 $$ assertSuggestionSize(searchSuggest, 0, 2, "title")[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_40 $$ assertSuggestionSize(searchSuggest, 0, 2, "title")[ CD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_10 $$ titles.add("United States House of Representatives Elections in Washington 2005")[ CD ]
Line_48 $$ String collateWithParams = XContentFactory.jsonBuilder().startObject().startObject("-->Line_58 $$ PhraseSuggestionBuilder phraseSuggestWithParams = suggest.collateQuery(collateWithParams).collateParams(params)[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_23 $$ String filterString = XContentFactory.jsonBuilder().startObject().startObject("match_phrase").field("title", "[ CD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_14 $$ titles.add("Election")[ CD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_29 $$ NumShards numShards = getNumShards("test")[ CD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_59 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", phraseSuggestWithParams)[ CD ]
Line_8 $$ List<String> titles = new ArrayList()-->Line_10 $$ titles.add("United States House of Representatives Elections in Washington 2005")[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_19 $$ indexRandom(true, builders)[ CD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_37 $$ String filterStringAsFilter = XContentFactory.jsonBuilder().startObject().startObject("match_phrase").field("title", "[ CD ]
Line_25 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", filteredQuerySuggest)-->Line_60 $$ assertSuggestionSize(searchSuggest, 0, 2, "title")[ FD ]
Line_2 $$ public void testPhraseSuggesterCollate() throws InterruptedException, ExecutionException, IOException -->Line_24 $$ PhraseSuggestionBuilder filteredQuerySuggest = suggest.collateQuery(filterString)[ CD ]
Line_27 $$ searchSuggest = searchSuggest("Elections of Representatives Parliament", filteredQuerySuggest)-->Line_64 $$ assertSuggestionPhraseCollateMatchExists(searchSuggest, "title", 2)[ FD ]
Line_21 $$ Suggest searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", suggest)-->Line_59 $$ searchSuggest = searchSuggest("united states house of representatives elections in washington 2006", phraseSuggestWithParams)[ FD ]
