Line_16 $$ if (names[i].groupId.equals(names[k].groupId)) -->Line_17 $$ names[i].hasDuplicatedGroup = true[ CD ]
Line_14 $$ if (names[i].originalName.equals(names[k].originalName)) -->Line_15 $$ nameCounters.put(names[i].originalName, 0)[ CD ]
Line_2 $$ private static void resolveModuleNames(Collection<MavenProject> projects, Map<MavenProject, Module> mavenProjectToModule, Map<MavenProject, String> mavenProjectToModuleName) -->Line_23 $$ Set<String> existingNames = new HashSet<String>()[ CD ]
Line_3 $$ NameItem[] names = new NameItem[projects.size()]-->Line_8 $$ Arrays.sort(names)[ FD ]
Line_2 $$ private static void resolveModuleNames(Collection<MavenProject> projects, Map<MavenProject, Module> mavenProjectToModule, Map<MavenProject, String> mavenProjectToModuleName) -->Line_4 $$ int i = 0[ CD ]
Line_4 $$ int i = 0-->Line_10 $$ for (i = 0; i < names.length; i++) [ FD ]
Line_32 $$ if (c != null) -->Line_33 $$ nameItem.number = c[ CD ]
Line_29 $$ for (NameItem nameItem : names) -->Line_37 $$ String name = nameItem.getResultName()[ FD ]
Line_5 $$ for (MavenProject each : projects) -->Line_6 $$ names[i++] = new NameItem(each, mavenProjectToModule.get(each))[ FD ]
Line_4 $$ int i = 0-->Line_6 $$ names[i++] = new NameItem(each, mavenProjectToModule.get(each))[ FD ]
Line_9 $$ Map<String, Integer> nameCounters = new HashMap<String, Integer>()-->Line_31 $$ Integer c = nameCounters.get(nameItem.originalName)[ FD ]
Line_10 $$ for (i = 0; i < names.length; i++) -->Line_13 $$ for (int k = i + 1; k < names.length; k++) [ CD ]
Line_2 $$ private static void resolveModuleNames(Collection<MavenProject> projects, Map<MavenProject, Module> mavenProjectToModule, Map<MavenProject, String> mavenProjectToModuleName) -->Line_6 $$ names[i++] = new NameItem(each, mavenProjectToModule.get(each))[ FD ]
Line_31 $$ Integer c = nameCounters.get(nameItem.originalName)-->Line_33 $$ nameItem.number = c[ FD ]
Line_23 $$ Set<String> existingNames = new HashSet<String>()-->Line_38 $$ if (existingNames.add(name))[ FD ]
Line_24 $$ for (NameItem name : names) -->Line_26 $$ boolean wasAdded = existingNames.add(name.getResultName())[ FD ]
Line_24 $$ for (NameItem name : names) -->Line_38 $$ if (existingNames.add(name))[ FD ]
Line_30 $$ if (nameItem.module == null) -->Line_31 $$ Integer c = nameCounters.get(nameItem.originalName)[ CD ]
Line_2 $$ private static void resolveModuleNames(Collection<MavenProject> projects, Map<MavenProject, Module> mavenProjectToModule, Map<MavenProject, String> mavenProjectToModuleName) -->Line_3 $$ NameItem[] names = new NameItem[projects.size()][ FD ]
Line_2 $$ private static void resolveModuleNames(Collection<MavenProject> projects, Map<MavenProject, Module> mavenProjectToModule, Map<MavenProject, String> mavenProjectToModuleName) -->Line_8 $$ Arrays.sort(names)[ CD ]
Line_31 $$ Integer c = nameCounters.get(nameItem.originalName)-->Line_32 $$ if (c != null) [ FD ]
Line_32 $$ if (c != null) -->Line_34 $$ nameCounters.put(nameItem.originalName, c + 1)[ CD ]
Line_14 $$ if (names[i].originalName.equals(names[k].originalName)) -->Line_16 $$ if (names[i].groupId.equals(names[k].groupId)) [ CD ]
Line_36 $$ do -->Line_37 $$ String name = nameItem.getResultName()[ CD ]
Line_2 $$ private static void resolveModuleNames(Collection<MavenProject> projects, Map<MavenProject, Module> mavenProjectToModule, Map<MavenProject, String> mavenProjectToModuleName) -->Line_9 $$ Map<String, Integer> nameCounters = new HashMap<String, Integer>()[ CD ]
Line_30 $$ if (nameItem.module == null) -->Line_36 $$ do [ CD ]
Line_37 $$ String name = nameItem.getResultName()-->Line_38 $$ if (existingNames.add(name))[ FD ]
Line_23 $$ Set<String> existingNames = new HashSet<String>()-->Line_26 $$ boolean wasAdded = existingNames.add(name.getResultName())[ FD ]
Line_9 $$ Map<String, Integer> nameCounters = new HashMap<String, Integer>()-->Line_41 $$ nameCounters.put(nameItem.originalName, nameItem.number + 1)[ FD ]
Line_2 $$ private static void resolveModuleNames(Collection<MavenProject> projects, Map<MavenProject, Module> mavenProjectToModule, Map<MavenProject, String> mavenProjectToModuleName) -->Line_3 $$ NameItem[] names = new NameItem[projects.size()][ CD ]
Line_36 $$ do -->Line_40 $$ nameItem.number++[ CD ]
Line_9 $$ Map<String, Integer> nameCounters = new HashMap<String, Integer>()-->Line_34 $$ nameCounters.put(nameItem.originalName, c + 1)[ FD ]
Line_36 $$ do -->Line_38 $$ if (existingNames.add(name))[ CD ]
Line_2 $$ private static void resolveModuleNames(Collection<MavenProject> projects, Map<MavenProject, Module> mavenProjectToModule, Map<MavenProject, String> mavenProjectToModuleName) -->Line_10 $$ for (i = 0; i < names.length; i++) [ CD ]
Line_9 $$ Map<String, Integer> nameCounters = new HashMap<String, Integer>()-->Line_15 $$ nameCounters.put(names[i].originalName, 0)[ FD ]
Line_10 $$ for (i = 0; i < names.length; i++) -->Line_11 $$ if (names[i].hasDuplicatedGroup)[ CD ]
Line_25 $$ if (name.module != null) -->Line_26 $$ boolean wasAdded = existingNames.add(name.getResultName())[ CD ]
Line_36 $$ do -->Line_41 $$ nameCounters.put(nameItem.originalName, nameItem.number + 1)[ CD ]
Line_30 $$ if (nameItem.module == null) -->Line_32 $$ if (c != null) [ CD ]
Line_5 $$ for (MavenProject each : projects) -->Line_46 $$ mavenProjectToModuleName.put(each.project, each.getResultName())[ FD ]
Line_2 $$ private static void resolveModuleNames(Collection<MavenProject> projects, Map<MavenProject, Module> mavenProjectToModule, Map<MavenProject, String> mavenProjectToModuleName) -->Line_46 $$ mavenProjectToModuleName.put(each.project, each.getResultName())[ FD ]
Line_16 $$ if (names[i].groupId.equals(names[k].groupId)) -->Line_18 $$ names[k].hasDuplicatedGroup = true[ CD ]
Line_13 $$ for (int k = i + 1; k < names.length; k++) -->Line_14 $$ if (names[i].originalName.equals(names[k].originalName)) [ CD ]
