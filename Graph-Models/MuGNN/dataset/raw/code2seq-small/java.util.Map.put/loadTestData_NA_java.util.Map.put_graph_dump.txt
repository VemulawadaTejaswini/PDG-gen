Line_45 $$ response = store.put(entities)-->Line_63 $$ assertEquals(1, response.getErrors().size())[ FD ]
Line_8 $$ Set<Object> l2 = new HashSet<Object>()-->Line_9 $$ l2.add((long) Integer.MAX_VALUE)[ FD ]
Line_5 $$ Map<String, Set<Object>> primaryFilters = new HashMap<String, Set<Object>>()-->Line_17 $$ primaryFilters.put("long", l4)[ FD ]
Line_71 $$ response = store.put(entities)-->Line_72 $$ assertEquals(0, response.getErrors().size())[ FD ]
Line_5 $$ Map<String, Set<Object>> primaryFilters = new HashMap<String, Set<Object>>()-->Line_16 $$ primaryFilters.put("other", l3)[ FD ]
Line_62 $$ response = store.put(entities)-->Line_64 $$ TimelinePutError error = response.getErrors().get(0)[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_71 $$ response = store.put(entities)[ CD ]
Line_45 $$ response = store.put(entities)-->Line_72 $$ assertEquals(0, response.getErrors().size())[ FD ]
Line_50 $$ Map<String, Object> eventInfo = new HashMap<String, Object>()-->Line_52 $$ TimelineEvent ev2 = createEvent(456l, "end_event", eventInfo)[ FD ]
Line_35 $$ TimelineEvent ev3 = createEvent(789l, "launch_event", null)-->Line_38 $$ events.add(ev3)[ FD ]
Line_26 $$ String entityId1b = "id_2"-->Line_47 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1b, entityType1, null, Collections.singletonList(ev1), relatedEntities, primaryFilters, otherInfo1)))[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_67 $$ assertEquals(TimelinePutError.NO_START_TIME, error.getErrorCode())[ CD ]
Line_53 $$ Map<String, Object> otherInfo2 = new HashMap<String, Object>()-->Line_55 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1, entityType1, null, Collections.singletonList(ev2), null, primaryFilters, otherInfo2)))[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_57 $$ assertEquals(0, response.getErrors().size())[ CD ]
Line_37 $$ List<TimelineEvent> events = new ArrayList<TimelineEvent>()-->Line_40 $$ entities.setEntities(Collections.singletonList(createEntity(entityId2, entityType2, null, events, null, null, null)))[ FD ]
Line_41 $$ TimelinePutResponse response = store.put(entities)-->Line_45 $$ response = store.put(entities)[ FD ]
Line_45 $$ response = store.put(entities)-->Line_59 $$ response = store.put(entities)[ FD ]
Line_41 $$ TimelinePutResponse response = store.put(entities)-->Line_59 $$ response = store.put(entities)[ FD ]
Line_32 $$ String entityType5 = "type_5"-->Line_69 $$ relatedEntities.put(entityType5, Collections.singleton(entityId5))[ FD ]
Line_12 $$ Set<Object> l4 = new HashSet<Object>()-->Line_13 $$ l4.add((long) Integer.MAX_VALUE + 1l)[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_9 $$ l2.add((long) Integer.MAX_VALUE)[ CD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_4 $$ TimelineEntities entities = new TimelineEntities()[ CD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_62 $$ response = store.put(entities)[ CD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_38 $$ events.add(ev3)[ CD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_31 $$ String entityId5 = "id_5"[ CD ]
Line_41 $$ TimelinePutResponse response = store.put(entities)-->Line_64 $$ TimelinePutError error = response.getErrors().get(0)[ FD ]
Line_53 $$ Map<String, Object> otherInfo2 = new HashMap<String, Object>()-->Line_58 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1b, entityType1, 789l, Collections.singletonList(ev2), null, primaryFilters, otherInfo2)))[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_54 $$ otherInfo2.put("info2", "val2")[ CD ]
Line_33 $$ Map<String, Set<String>> relatedEntities = new HashMap<String, Set<String>>()-->Line_68 $$ relatedEntities.clear()[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_70 $$ entities.setEntities(Collections.singletonList(createEntity(entityId4, entityType4, 42l, null, relatedEntities, null, null)))[ CD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_11 $$ l3.add("123abc")[ CD ]
Line_56 $$ response = store.put(entities)-->Line_63 $$ assertEquals(1, response.getErrors().size())[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_16 $$ primaryFilters.put("other", l3)[ CD ]
Line_48 $$ response = store.put(entities)-->Line_64 $$ TimelinePutError error = response.getErrors().get(0)[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_46 $$ assertEquals(0, response.getErrors().size())[ CD ]
Line_28 $$ String entityType2 = "type_2"-->Line_34 $$ relatedEntities.put(entityType2, Collections.singleton(entityId2))[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_10 $$ Set<Object> l3 = new HashSet<Object>()[ CD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_43 $$ TimelineEvent ev1 = createEvent(123l, "start_event", null)[ CD ]
Line_45 $$ response = store.put(entities)-->Line_49 $$ assertEquals(0, response.getErrors().size())[ FD ]
Line_8 $$ Set<Object> l2 = new HashSet<Object>()-->Line_15 $$ primaryFilters.put("appname", l2)[ FD ]
Line_18 $$ Map<String, Object> secondaryFilters = new HashMap<String, Object>()-->Line_19 $$ secondaryFilters.put("startTime", 123456l)[ FD ]
Line_41 $$ TimelinePutResponse response = store.put(entities)-->Line_60 $$ assertEquals(0, response.getErrors().size())[ FD ]
Line_45 $$ response = store.put(entities)-->Line_60 $$ assertEquals(0, response.getErrors().size())[ FD ]
Line_59 $$ response = store.put(entities)-->Line_72 $$ assertEquals(0, response.getErrors().size())[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_60 $$ assertEquals(0, response.getErrors().size())[ CD ]
Line_5 $$ Map<String, Set<Object>> primaryFilters = new HashMap<String, Set<Object>>()-->Line_58 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1b, entityType1, 789l, Collections.singletonList(ev2), null, primaryFilters, otherInfo2)))[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_69 $$ relatedEntities.put(entityType5, Collections.singleton(entityId5))[ CD ]
Line_25 $$ String entityType1 = "type_1"-->Line_44 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1, entityType1, 123l, Collections.singletonList(ev1), relatedEntities, primaryFilters, otherInfo1)))[ FD ]
Line_56 $$ response = store.put(entities)-->Line_59 $$ response = store.put(entities)[ FD ]
Line_56 $$ response = store.put(entities)-->Line_64 $$ TimelinePutError error = response.getErrors().get(0)[ FD ]
Line_45 $$ response = store.put(entities)-->Line_56 $$ response = store.put(entities)[ FD ]
Line_41 $$ TimelinePutResponse response = store.put(entities)-->Line_72 $$ assertEquals(0, response.getErrors().size())[ FD ]
Line_24 $$ String entityId1 = "id_1"-->Line_44 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1, entityType1, 123l, Collections.singletonList(ev1), relatedEntities, primaryFilters, otherInfo1)))[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_15 $$ primaryFilters.put("appname", l2)[ CD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_50 $$ Map<String, Object> eventInfo = new HashMap<String, Object>()[ CD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_51 $$ eventInfo.put("event info 1", "val1")[ CD ]
Line_59 $$ response = store.put(entities)-->Line_63 $$ assertEquals(1, response.getErrors().size())[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_63 $$ assertEquals(1, response.getErrors().size())[ CD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_30 $$ String entityType4 = "type_4"[ CD ]
Line_5 $$ Map<String, Set<Object>> primaryFilters = new HashMap<String, Set<Object>>()-->Line_44 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1, entityType1, 123l, Collections.singletonList(ev1), relatedEntities, primaryFilters, otherInfo1)))[ FD ]
Line_64 $$ TimelinePutError error = response.getErrors().get(0)-->Line_66 $$ assertEquals("badentity", error.getEntityType())[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_32 $$ String entityType5 = "type_5"[ CD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_53 $$ Map<String, Object> otherInfo2 = new HashMap<String, Object>()[ CD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_12 $$ Set<Object> l4 = new HashSet<Object>()[ CD ]
Line_4 $$ TimelineEntities entities = new TimelineEntities()-->Line_55 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1, entityType1, null, Collections.singletonList(ev2), null, primaryFilters, otherInfo2)))[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_13 $$ l4.add((long) Integer.MAX_VALUE + 1l)[ CD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_36 $$ TimelineEvent ev4 = createEvent(-123l, "init_event", null)[ CD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_45 $$ response = store.put(entities)[ CD ]
Line_12 $$ Set<Object> l4 = new HashSet<Object>()-->Line_17 $$ primaryFilters.put("long", l4)[ FD ]
Line_21 $$ Map<String, Object> otherInfo1 = new HashMap<String, Object>()-->Line_44 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1, entityType1, 123l, Collections.singletonList(ev1), relatedEntities, primaryFilters, otherInfo1)))[ FD ]
Line_21 $$ Map<String, Object> otherInfo1 = new HashMap<String, Object>()-->Line_61 $$ entities.setEntities(Collections.singletonList(createEntity("badentityid", "badentity", null, null, null, null, otherInfo1)))[ FD ]
Line_56 $$ response = store.put(entities)-->Line_62 $$ response = store.put(entities)[ FD ]
Line_37 $$ List<TimelineEvent> events = new ArrayList<TimelineEvent>()-->Line_38 $$ events.add(ev3)[ FD ]
Line_41 $$ TimelinePutResponse response = store.put(entities)-->Line_63 $$ assertEquals(1, response.getErrors().size())[ FD ]
Line_4 $$ TimelineEntities entities = new TimelineEntities()-->Line_61 $$ entities.setEntities(Collections.singletonList(createEntity("badentityid", "badentity", null, null, null, null, otherInfo1)))[ FD ]
Line_48 $$ response = store.put(entities)-->Line_63 $$ assertEquals(1, response.getErrors().size())[ FD ]
Line_56 $$ response = store.put(entities)-->Line_57 $$ assertEquals(0, response.getErrors().size())[ FD ]
Line_29 $$ String entityId4 = "id_4"-->Line_70 $$ entities.setEntities(Collections.singletonList(createEntity(entityId4, entityType4, 42l, null, relatedEntities, null, null)))[ FD ]
Line_48 $$ response = store.put(entities)-->Line_59 $$ response = store.put(entities)[ FD ]
Line_56 $$ response = store.put(entities)-->Line_71 $$ response = store.put(entities)[ FD ]
Line_37 $$ List<TimelineEvent> events = new ArrayList<TimelineEvent>()-->Line_39 $$ events.add(ev4)[ FD ]
Line_30 $$ String entityType4 = "type_4"-->Line_70 $$ entities.setEntities(Collections.singletonList(createEntity(entityId4, entityType4, 42l, null, relatedEntities, null, null)))[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_17 $$ primaryFilters.put("long", l4)[ CD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_27 $$ String entityId2 = "id_2"[ CD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_52 $$ TimelineEvent ev2 = createEvent(456l, "end_event", eventInfo)[ CD ]
Line_41 $$ TimelinePutResponse response = store.put(entities)-->Line_57 $$ assertEquals(0, response.getErrors().size())[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_44 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1, entityType1, 123l, Collections.singletonList(ev1), relatedEntities, primaryFilters, otherInfo1)))[ CD ]
Line_5 $$ Map<String, Set<Object>> primaryFilters = new HashMap<String, Set<Object>>()-->Line_47 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1b, entityType1, null, Collections.singletonList(ev1), relatedEntities, primaryFilters, otherInfo1)))[ FD ]
Line_36 $$ TimelineEvent ev4 = createEvent(-123l, "init_event", null)-->Line_39 $$ events.add(ev4)[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_39 $$ events.add(ev4)[ CD ]
Line_21 $$ Map<String, Object> otherInfo1 = new HashMap<String, Object>()-->Line_47 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1b, entityType1, null, Collections.singletonList(ev1), relatedEntities, primaryFilters, otherInfo1)))[ FD ]
Line_48 $$ response = store.put(entities)-->Line_57 $$ assertEquals(0, response.getErrors().size())[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_5 $$ Map<String, Set<Object>> primaryFilters = new HashMap<String, Set<Object>>()[ CD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_64 $$ TimelinePutError error = response.getErrors().get(0)[ CD ]
Line_64 $$ TimelinePutError error = response.getErrors().get(0)-->Line_65 $$ assertEquals("badentityid", error.getEntityId())[ FD ]
Line_5 $$ Map<String, Set<Object>> primaryFilters = new HashMap<String, Set<Object>>()-->Line_15 $$ primaryFilters.put("appname", l2)[ FD ]
Line_62 $$ response = store.put(entities)-->Line_63 $$ assertEquals(1, response.getErrors().size())[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_59 $$ response = store.put(entities)[ CD ]
Line_56 $$ response = store.put(entities)-->Line_60 $$ assertEquals(0, response.getErrors().size())[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_61 $$ entities.setEntities(Collections.singletonList(createEntity("badentityid", "badentity", null, null, null, null, otherInfo1)))[ CD ]
Line_18 $$ Map<String, Object> secondaryFilters = new HashMap<String, Object>()-->Line_20 $$ secondaryFilters.put("status", "RUNNING")[ FD ]
Line_41 $$ TimelinePutResponse response = store.put(entities)-->Line_48 $$ response = store.put(entities)[ FD ]
Line_62 $$ response = store.put(entities)-->Line_72 $$ assertEquals(0, response.getErrors().size())[ FD ]
Line_41 $$ TimelinePutResponse response = store.put(entities)-->Line_62 $$ response = store.put(entities)[ FD ]
Line_4 $$ TimelineEntities entities = new TimelineEntities()-->Line_41 $$ TimelinePutResponse response = store.put(entities)[ FD ]
Line_53 $$ Map<String, Object> otherInfo2 = new HashMap<String, Object>()-->Line_54 $$ otherInfo2.put("info2", "val2")[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_58 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1b, entityType1, 789l, Collections.singletonList(ev2), null, primaryFilters, otherInfo2)))[ CD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_49 $$ assertEquals(0, response.getErrors().size())[ CD ]
Line_28 $$ String entityType2 = "type_2"-->Line_40 $$ entities.setEntities(Collections.singletonList(createEntity(entityId2, entityType2, null, events, null, null, null)))[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_19 $$ secondaryFilters.put("startTime", 123456l)[ CD ]
Line_10 $$ Set<Object> l3 = new HashSet<Object>()-->Line_16 $$ primaryFilters.put("other", l3)[ FD ]
Line_41 $$ TimelinePutResponse response = store.put(entities)-->Line_49 $$ assertEquals(0, response.getErrors().size())[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_56 $$ response = store.put(entities)[ CD ]
Line_26 $$ String entityId1b = "id_2"-->Line_58 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1b, entityType1, 789l, Collections.singletonList(ev2), null, primaryFilters, otherInfo2)))[ FD ]
Line_64 $$ TimelinePutError error = response.getErrors().get(0)-->Line_67 $$ assertEquals(TimelinePutError.NO_START_TIME, error.getErrorCode())[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_72 $$ assertEquals(0, response.getErrors().size())[ CD ]
Line_48 $$ response = store.put(entities)-->Line_72 $$ assertEquals(0, response.getErrors().size())[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_48 $$ response = store.put(entities)[ CD ]
Line_10 $$ Set<Object> l3 = new HashSet<Object>()-->Line_11 $$ l3.add("123abc")[ FD ]
Line_50 $$ Map<String, Object> eventInfo = new HashMap<String, Object>()-->Line_51 $$ eventInfo.put("event info 1", "val1")[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_47 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1b, entityType1, null, Collections.singletonList(ev1), relatedEntities, primaryFilters, otherInfo1)))[ CD ]
Line_18 $$ Map<String, Object> secondaryFilters = new HashMap<String, Object>()-->Line_23 $$ otherInfo1.putAll(secondaryFilters)[ FD ]
Line_21 $$ Map<String, Object> otherInfo1 = new HashMap<String, Object>()-->Line_23 $$ otherInfo1.putAll(secondaryFilters)[ FD ]
Line_21 $$ Map<String, Object> otherInfo1 = new HashMap<String, Object>()-->Line_22 $$ otherInfo1.put("info1", "val1")[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_29 $$ String entityId4 = "id_4"[ CD ]
Line_4 $$ TimelineEntities entities = new TimelineEntities()-->Line_58 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1b, entityType1, 789l, Collections.singletonList(ev2), null, primaryFilters, otherInfo2)))[ FD ]
Line_45 $$ response = store.put(entities)-->Line_71 $$ response = store.put(entities)[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_21 $$ Map<String, Object> otherInfo1 = new HashMap<String, Object>()[ CD ]
Line_43 $$ TimelineEvent ev1 = createEvent(123l, "start_event", null)-->Line_47 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1b, entityType1, null, Collections.singletonList(ev1), relatedEntities, primaryFilters, otherInfo1)))[ FD ]
Line_33 $$ Map<String, Set<String>> relatedEntities = new HashMap<String, Set<String>>()-->Line_69 $$ relatedEntities.put(entityType5, Collections.singleton(entityId5))[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_41 $$ TimelinePutResponse response = store.put(entities)[ CD ]
Line_6 $$ Set<Object> l1 = new HashSet<Object>()-->Line_14 $$ primaryFilters.put("user", l1)[ FD ]
Line_33 $$ Map<String, Set<String>> relatedEntities = new HashMap<String, Set<String>>()-->Line_34 $$ relatedEntities.put(entityType2, Collections.singleton(entityId2))[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_40 $$ entities.setEntities(Collections.singletonList(createEntity(entityId2, entityType2, null, events, null, null, null)))[ CD ]
Line_41 $$ TimelinePutResponse response = store.put(entities)-->Line_71 $$ response = store.put(entities)[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_8 $$ Set<Object> l2 = new HashSet<Object>()[ CD ]
Line_45 $$ response = store.put(entities)-->Line_62 $$ response = store.put(entities)[ FD ]
Line_25 $$ String entityType1 = "type_1"-->Line_55 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1, entityType1, null, Collections.singletonList(ev2), null, primaryFilters, otherInfo2)))[ FD ]
Line_48 $$ response = store.put(entities)-->Line_49 $$ assertEquals(0, response.getErrors().size())[ FD ]
Line_6 $$ Set<Object> l1 = new HashSet<Object>()-->Line_7 $$ l1.add("username")[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_24 $$ String entityId1 = "id_1"[ CD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_6 $$ Set<Object> l1 = new HashSet<Object>()[ CD ]
Line_33 $$ Map<String, Set<String>> relatedEntities = new HashMap<String, Set<String>>()-->Line_44 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1, entityType1, 123l, Collections.singletonList(ev1), relatedEntities, primaryFilters, otherInfo1)))[ FD ]
Line_4 $$ TimelineEntities entities = new TimelineEntities()-->Line_44 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1, entityType1, 123l, Collections.singletonList(ev1), relatedEntities, primaryFilters, otherInfo1)))[ FD ]
Line_33 $$ Map<String, Set<String>> relatedEntities = new HashMap<String, Set<String>>()-->Line_47 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1b, entityType1, null, Collections.singletonList(ev1), relatedEntities, primaryFilters, otherInfo1)))[ FD ]
Line_25 $$ String entityType1 = "type_1"-->Line_58 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1b, entityType1, 789l, Collections.singletonList(ev2), null, primaryFilters, otherInfo2)))[ FD ]
Line_4 $$ TimelineEntities entities = new TimelineEntities()-->Line_45 $$ response = store.put(entities)[ FD ]
Line_45 $$ response = store.put(entities)-->Line_46 $$ assertEquals(0, response.getErrors().size())[ FD ]
Line_45 $$ response = store.put(entities)-->Line_64 $$ TimelinePutError error = response.getErrors().get(0)[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_42 $$ assertEquals(0, response.getErrors().size())[ CD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_28 $$ String entityType2 = "type_2"[ CD ]
Line_4 $$ TimelineEntities entities = new TimelineEntities()-->Line_48 $$ response = store.put(entities)[ FD ]
Line_4 $$ TimelineEntities entities = new TimelineEntities()-->Line_62 $$ response = store.put(entities)[ FD ]
Line_33 $$ Map<String, Set<String>> relatedEntities = new HashMap<String, Set<String>>()-->Line_70 $$ entities.setEntities(Collections.singletonList(createEntity(entityId4, entityType4, 42l, null, relatedEntities, null, null)))[ FD ]
Line_48 $$ response = store.put(entities)-->Line_71 $$ response = store.put(entities)[ FD ]
Line_56 $$ response = store.put(entities)-->Line_72 $$ assertEquals(0, response.getErrors().size())[ FD ]
Line_52 $$ TimelineEvent ev2 = createEvent(456l, "end_event", eventInfo)-->Line_55 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1, entityType1, null, Collections.singletonList(ev2), null, primaryFilters, otherInfo2)))[ FD ]
Line_59 $$ response = store.put(entities)-->Line_60 $$ assertEquals(0, response.getErrors().size())[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_33 $$ Map<String, Set<String>> relatedEntities = new HashMap<String, Set<String>>()[ CD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_34 $$ relatedEntities.put(entityType2, Collections.singleton(entityId2))[ CD ]
Line_45 $$ response = store.put(entities)-->Line_57 $$ assertEquals(0, response.getErrors().size())[ FD ]
Line_48 $$ response = store.put(entities)-->Line_62 $$ response = store.put(entities)[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_55 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1, entityType1, null, Collections.singletonList(ev2), null, primaryFilters, otherInfo2)))[ CD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_25 $$ String entityType1 = "type_1"[ CD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_14 $$ primaryFilters.put("user", l1)[ CD ]
Line_4 $$ TimelineEntities entities = new TimelineEntities()-->Line_40 $$ entities.setEntities(Collections.singletonList(createEntity(entityId2, entityType2, null, events, null, null, null)))[ FD ]
Line_41 $$ TimelinePutResponse response = store.put(entities)-->Line_56 $$ response = store.put(entities)[ FD ]
Line_4 $$ TimelineEntities entities = new TimelineEntities()-->Line_70 $$ entities.setEntities(Collections.singletonList(createEntity(entityId4, entityType4, 42l, null, relatedEntities, null, null)))[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_68 $$ relatedEntities.clear()[ CD ]
Line_25 $$ String entityType1 = "type_1"-->Line_47 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1b, entityType1, null, Collections.singletonList(ev1), relatedEntities, primaryFilters, otherInfo1)))[ FD ]
Line_27 $$ String entityId2 = "id_2"-->Line_34 $$ relatedEntities.put(entityType2, Collections.singleton(entityId2))[ FD ]
Line_5 $$ Map<String, Set<Object>> primaryFilters = new HashMap<String, Set<Object>>()-->Line_14 $$ primaryFilters.put("user", l1)[ FD ]
Line_5 $$ Map<String, Set<Object>> primaryFilters = new HashMap<String, Set<Object>>()-->Line_55 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1, entityType1, null, Collections.singletonList(ev2), null, primaryFilters, otherInfo2)))[ FD ]
Line_43 $$ TimelineEvent ev1 = createEvent(123l, "start_event", null)-->Line_44 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1, entityType1, 123l, Collections.singletonList(ev1), relatedEntities, primaryFilters, otherInfo1)))[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_22 $$ otherInfo1.put("info1", "val1")[ CD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_23 $$ otherInfo1.putAll(secondaryFilters)[ CD ]
Line_4 $$ TimelineEntities entities = new TimelineEntities()-->Line_71 $$ response = store.put(entities)[ FD ]
Line_59 $$ response = store.put(entities)-->Line_64 $$ TimelinePutError error = response.getErrors().get(0)[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_65 $$ assertEquals("badentityid", error.getEntityId())[ CD ]
Line_62 $$ response = store.put(entities)-->Line_71 $$ response = store.put(entities)[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_37 $$ List<TimelineEvent> events = new ArrayList<TimelineEvent>()[ CD ]
Line_4 $$ TimelineEntities entities = new TimelineEntities()-->Line_47 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1b, entityType1, null, Collections.singletonList(ev1), relatedEntities, primaryFilters, otherInfo1)))[ FD ]
Line_4 $$ TimelineEntities entities = new TimelineEntities()-->Line_59 $$ response = store.put(entities)[ FD ]
Line_45 $$ response = store.put(entities)-->Line_48 $$ response = store.put(entities)[ FD ]
Line_41 $$ TimelinePutResponse response = store.put(entities)-->Line_42 $$ assertEquals(0, response.getErrors().size())[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_20 $$ secondaryFilters.put("status", "RUNNING")[ CD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_18 $$ Map<String, Object> secondaryFilters = new HashMap<String, Object>()[ CD ]
Line_4 $$ TimelineEntities entities = new TimelineEntities()-->Line_56 $$ response = store.put(entities)[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_7 $$ l1.add("username")[ CD ]
Line_48 $$ response = store.put(entities)-->Line_56 $$ response = store.put(entities)[ FD ]
Line_41 $$ TimelinePutResponse response = store.put(entities)-->Line_46 $$ assertEquals(0, response.getErrors().size())[ FD ]
Line_31 $$ String entityId5 = "id_5"-->Line_69 $$ relatedEntities.put(entityType5, Collections.singleton(entityId5))[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_26 $$ String entityId1b = "id_2"[ CD ]
Line_48 $$ response = store.put(entities)-->Line_60 $$ assertEquals(0, response.getErrors().size())[ FD ]
Line_59 $$ response = store.put(entities)-->Line_71 $$ response = store.put(entities)[ FD ]
Line_27 $$ String entityId2 = "id_2"-->Line_40 $$ entities.setEntities(Collections.singletonList(createEntity(entityId2, entityType2, null, events, null, null, null)))[ FD ]
Line_59 $$ response = store.put(entities)-->Line_62 $$ response = store.put(entities)[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_66 $$ assertEquals("badentity", error.getEntityType())[ CD ]
Line_52 $$ TimelineEvent ev2 = createEvent(456l, "end_event", eventInfo)-->Line_58 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1b, entityType1, 789l, Collections.singletonList(ev2), null, primaryFilters, otherInfo2)))[ FD ]
Line_2 $$ protected void loadTestData() throws IOException -->Line_35 $$ TimelineEvent ev3 = createEvent(789l, "launch_event", null)[ CD ]
Line_24 $$ String entityId1 = "id_1"-->Line_55 $$ entities.setEntities(Collections.singletonList(createEntity(entityId1, entityType1, null, Collections.singletonList(ev2), null, primaryFilters, otherInfo2)))[ FD ]
