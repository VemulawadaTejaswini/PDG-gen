Line_19 $$ for (int i = 0; i < numberOfDocs; i++) -->Line_41 $$ for (int i = 0; i < docs.length; i++) [ FD ]
Line_23 $$ for (String term : terms) -->Line_50 $$ referenceAll.put(term, new FreqHolder())[ FD ]
Line_19 $$ for (int i = 0; i < numberOfDocs; i++) -->Line_21 $$ doc.add(new StringField("id", Integer.toString(i), Field.Store.YES))[ CD ]
Line_57 $$ Document doc = reader.document(docId)-->Line_60 $$ addFreqs(doc, referenceNotDeleted)[ FD ]
Line_2 $$ public void setUp() throws Exception -->Line_17 $$ int numberOfDocs = scaledRandomIntBetween(30, 300)[ CD ]
Line_43 $$ if (randomInt(5) == 2) -->Line_45 $$ deletedIds.add(idTerm.text())[ CD ]
Line_55 $$ List<Term> filterTerms = new ArrayList()-->Line_62 $$ filterTerms.add(new Term("id", doc.getField("id").stringValue()))[ FD ]
Line_2 $$ public void setUp() throws Exception -->Line_41 $$ for (int i = 0; i < docs.length; i++) [ CD ]
Line_56 $$ for (int docId = 0; docId < reader.maxDoc(); docId++) -->Line_57 $$ Document doc = reader.document(docId)[ CD ]
Line_20 $$ Document doc = new Document()-->Line_58 $$ addFreqs(doc, referenceAll)[ FD ]
Line_49 $$ for (String term : terms) -->Line_51 $$ referenceFilter.put(term, new FreqHolder())[ FD ]
Line_2 $$ public void setUp() throws Exception -->Line_14 $$ for (int i = 0; i < terms.length; i++) [ CD ]
Line_33 $$ for (int i = 0; i < docs.length; i++) -->Line_36 $$ if (rarely()) [ CD ]
Line_20 $$ Document doc = new Document()-->Line_35 $$ iw.addDocument(doc)[ FD ]
Line_2 $$ public void setUp() throws Exception -->Line_19 $$ for (int i = 0; i < numberOfDocs; i++) [ CD ]
Line_34 $$ Document doc = docs[i]-->Line_35 $$ iw.addDocument(doc)[ FD ]
Line_34 $$ Document doc = docs[i]-->Line_58 $$ addFreqs(doc, referenceAll)[ FD ]
Line_40 $$ Set<String> deletedIds = new HashSet()-->Line_59 $$ if (!deletedIds.contains(doc.getField("id").stringValue())) [ FD ]
Line_2 $$ public void setUp() throws Exception -->Line_3 $$ super.setUp()[ CD ]
Line_2 $$ public void setUp() throws Exception -->Line_7 $$ Directory dir = newDirectory()[ CD ]
Line_17 $$ int numberOfDocs = scaledRandomIntBetween(30, 300)-->Line_19 $$ for (int i = 0; i < numberOfDocs; i++) [ FD ]
Line_14 $$ for (int i = 0; i < terms.length; i++) -->Line_19 $$ for (int i = 0; i < numberOfDocs; i++) [ FD ]
Line_59 $$ if (!deletedIds.contains(doc.getField("id").stringValue())) -->Line_61 $$ if (randomBoolean()) [ CD ]
Line_14 $$ for (int i = 0; i < terms.length; i++) -->Line_33 $$ for (int i = 0; i < docs.length; i++) [ FD ]
Line_40 $$ Set<String> deletedIds = new HashSet()-->Line_45 $$ deletedIds.add(idTerm.text())[ FD ]
Line_14 $$ for (int i = 0; i < terms.length; i++) -->Line_21 $$ doc.add(new StringField("id", Integer.toString(i), Field.Store.YES))[ FD ]
Line_2 $$ public void setUp() throws Exception -->Line_33 $$ for (int i = 0; i < docs.length; i++) [ CD ]
Line_23 $$ for (String term : terms) -->Line_51 $$ referenceFilter.put(term, new FreqHolder())[ FD ]
Line_57 $$ Document doc = reader.document(docId)-->Line_59 $$ if (!deletedIds.contains(doc.getField("id").stringValue())) [ FD ]
Line_20 $$ Document doc = new Document()-->Line_29 $$ doc.add(new TextField("field", term, Field.Store.YES))[ FD ]
Line_2 $$ public void setUp() throws Exception -->Line_56 $$ for (int docId = 0; docId < reader.maxDoc(); docId++) [ CD ]
Line_23 $$ for (String term : terms) -->Line_52 $$ referenceNotDeleted.put(term, new FreqHolder())[ FD ]
Line_44 $$ Term idTerm = new Term("id", doc.getField("id").stringValue())-->Line_46 $$ iw.deleteDocuments(idTerm)[ FD ]
Line_2 $$ public void setUp() throws Exception -->Line_18 $$ Document[] docs = new Document[numberOfDocs][ CD ]
Line_14 $$ for (int i = 0; i < terms.length; i++) -->Line_15 $$ terms[i] = randomAsciiOfLength(5)[ CD ]
Line_61 $$ if (randomBoolean()) -->Line_62 $$ filterTerms.add(new Term("id", doc.getField("id").stringValue()))[ CD ]
Line_9 $$ if (frequently()) -->Line_10 $$ conf.setMergePolicy(NoMergePolicy.INSTANCE)[ CD ]
Line_61 $$ if (randomBoolean()) -->Line_63 $$ addFreqs(doc, referenceFilter)[ CD ]
Line_43 $$ if (randomInt(5) == 2) -->Line_44 $$ Term idTerm = new Term("id", doc.getField("id").stringValue())[ CD ]
Line_42 $$ Document doc = docs[i]-->Line_63 $$ addFreqs(doc, referenceFilter)[ FD ]
Line_2 $$ public void setUp() throws Exception -->Line_54 $$ reader = DirectoryReader.open(iw, true)[ CD ]
Line_56 $$ for (int docId = 0; docId < reader.maxDoc(); docId++) -->Line_59 $$ if (!deletedIds.contains(doc.getField("id").stringValue())) [ CD ]
Line_41 $$ for (int i = 0; i < docs.length; i++) -->Line_43 $$ if (randomInt(5) == 2) [ CD ]
Line_8 $$ IndexWriterConfig conf = newIndexWriterConfig(new KeywordAnalyzer())-->Line_10 $$ conf.setMergePolicy(NoMergePolicy.INSTANCE)[ FD ]
Line_33 $$ for (int i = 0; i < docs.length; i++) -->Line_41 $$ for (int i = 0; i < docs.length; i++) [ FD ]
Line_42 $$ Document doc = docs[i]-->Line_44 $$ Term idTerm = new Term("id", doc.getField("id").stringValue())[ FD ]
Line_34 $$ Document doc = docs[i]-->Line_62 $$ filterTerms.add(new Term("id", doc.getField("id").stringValue()))[ FD ]
Line_20 $$ Document doc = new Document()-->Line_60 $$ addFreqs(doc, referenceNotDeleted)[ FD ]
Line_33 $$ for (int i = 0; i < docs.length; i++) -->Line_35 $$ iw.addDocument(doc)[ CD ]
Line_28 $$ for (int j = 0; j < freq; j++) -->Line_29 $$ doc.add(new TextField("field", term, Field.Store.YES))[ CD ]
Line_42 $$ Document doc = docs[i]-->Line_59 $$ if (!deletedIds.contains(doc.getField("id").stringValue())) [ FD ]
Line_34 $$ Document doc = docs[i]-->Line_60 $$ addFreqs(doc, referenceNotDeleted)[ FD ]
Line_2 $$ public void setUp() throws Exception -->Line_8 $$ IndexWriterConfig conf = newIndexWriterConfig(new KeywordAnalyzer())[ CD ]
Line_59 $$ if (!deletedIds.contains(doc.getField("id").stringValue())) -->Line_60 $$ addFreqs(doc, referenceNotDeleted)[ CD ]
Line_42 $$ Document doc = docs[i]-->Line_60 $$ addFreqs(doc, referenceNotDeleted)[ FD ]
Line_20 $$ Document doc = new Document()-->Line_62 $$ filterTerms.add(new Term("id", doc.getField("id").stringValue()))[ FD ]
Line_49 $$ for (String term : terms) -->Line_52 $$ referenceNotDeleted.put(term, new FreqHolder())[ FD ]
Line_20 $$ Document doc = new Document()-->Line_21 $$ doc.add(new StringField("id", Integer.toString(i), Field.Store.YES))[ FD ]
Line_2 $$ public void setUp() throws Exception -->Line_9 $$ if (frequently()) [ CD ]
Line_19 $$ for (int i = 0; i < numberOfDocs; i++) -->Line_21 $$ doc.add(new StringField("id", Integer.toString(i), Field.Store.YES))[ FD ]
Line_57 $$ Document doc = reader.document(docId)-->Line_58 $$ addFreqs(doc, referenceAll)[ FD ]
Line_42 $$ Document doc = docs[i]-->Line_62 $$ filterTerms.add(new Term("id", doc.getField("id").stringValue()))[ FD ]
Line_41 $$ for (int i = 0; i < docs.length; i++) -->Line_42 $$ Document doc = docs[i][ CD ]
Line_43 $$ if (randomInt(5) == 2) -->Line_46 $$ iw.deleteDocuments(idTerm)[ CD ]
Line_27 $$ int freq = randomIntBetween(1, 3)-->Line_28 $$ for (int j = 0; j < freq; j++) [ FD ]
Line_20 $$ Document doc = new Document()-->Line_63 $$ addFreqs(doc, referenceFilter)[ FD ]
Line_57 $$ Document doc = reader.document(docId)-->Line_63 $$ addFreqs(doc, referenceFilter)[ FD ]
Line_36 $$ if (rarely()) -->Line_37 $$ iw.commit()[ CD ]
Line_34 $$ Document doc = docs[i]-->Line_59 $$ if (!deletedIds.contains(doc.getField("id").stringValue())) [ FD ]
Line_2 $$ public void setUp() throws Exception -->Line_40 $$ Set<String> deletedIds = new HashSet()[ CD ]
Line_56 $$ for (int docId = 0; docId < reader.maxDoc(); docId++) -->Line_58 $$ addFreqs(doc, referenceAll)[ CD ]
Line_33 $$ for (int i = 0; i < docs.length; i++) -->Line_34 $$ Document doc = docs[i][ CD ]
Line_20 $$ Document doc = new Document()-->Line_44 $$ Term idTerm = new Term("id", doc.getField("id").stringValue())[ FD ]
Line_19 $$ for (int i = 0; i < numberOfDocs; i++) -->Line_22 $$ docs[i] = doc[ CD ]
Line_56 $$ for (int docId = 0; docId < reader.maxDoc(); docId++) -->Line_57 $$ Document doc = reader.document(docId)[ FD ]
Line_44 $$ Term idTerm = new Term("id", doc.getField("id").stringValue())-->Line_45 $$ deletedIds.add(idTerm.text())[ FD ]
Line_20 $$ Document doc = new Document()-->Line_59 $$ if (!deletedIds.contains(doc.getField("id").stringValue())) [ FD ]
Line_57 $$ Document doc = reader.document(docId)-->Line_62 $$ filterTerms.add(new Term("id", doc.getField("id").stringValue()))[ FD ]
Line_34 $$ Document doc = docs[i]-->Line_63 $$ addFreqs(doc, referenceFilter)[ FD ]
Line_19 $$ for (int i = 0; i < numberOfDocs; i++) -->Line_20 $$ Document doc = new Document()[ CD ]
Line_34 $$ Document doc = docs[i]-->Line_44 $$ Term idTerm = new Term("id", doc.getField("id").stringValue())[ FD ]
Line_20 $$ Document doc = new Document()-->Line_22 $$ docs[i] = doc[ FD ]
Line_14 $$ for (int i = 0; i < terms.length; i++) -->Line_41 $$ for (int i = 0; i < docs.length; i++) [ FD ]
Line_42 $$ Document doc = docs[i]-->Line_58 $$ addFreqs(doc, referenceAll)[ FD ]
Line_49 $$ for (String term : terms) -->Line_50 $$ referenceAll.put(term, new FreqHolder())[ FD ]
Line_19 $$ for (int i = 0; i < numberOfDocs; i++) -->Line_33 $$ for (int i = 0; i < docs.length; i++) [ FD ]
Line_2 $$ public void setUp() throws Exception -->Line_55 $$ List<Term> filterTerms = new ArrayList()[ CD ]
