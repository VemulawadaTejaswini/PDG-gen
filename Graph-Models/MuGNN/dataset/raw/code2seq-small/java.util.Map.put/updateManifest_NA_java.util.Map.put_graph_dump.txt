Line_21 $$ if (!updatedClasspath.contains(path)) -->Line_22 $$ updatedClasspath.add(path)[ CD ]
Line_11 $$ List<String> updatedClasspath-->Line_21 $$ if (!updatedClasspath.contains(path)) [ FD ]
Line_10 $$ if (classpath != null && !classpath.isEmpty()) -->Line_11 $$ List<String> updatedClasspath[ CD ]
Line_20 $$ for (String path : classpath) -->Line_22 $$ updatedClasspath.add(path)[ FD ]
Line_11 $$ List<String> updatedClasspath-->Line_26 $$ mainAttributes.put(Attributes.Name.CLASS_PATH, StringUtil.join(updatedClasspath, " "))[ FD ]
Line_10 $$ if (classpath != null && !classpath.isEmpty()) -->Line_27 $$ if (replaceValues) [ CD ]
Line_10 $$ if (classpath != null && !classpath.isEmpty()) -->Line_12 $$ if (replaceValues) [ CD ]
Line_17 $$ if (!StringUtil.isEmpty(oldClasspath)) -->Line_18 $$ updatedClasspath.addAll(StringUtil.split(oldClasspath, " "))[ CD ]
Line_12 $$ if (replaceValues) -->Line_15 $$ updatedClasspath = new ArrayList<String>()[ CD ]
Line_16 $$ final String oldClasspath = (String) mainAttributes.get(Attributes.Name.CLASS_PATH)-->Line_18 $$ updatedClasspath.addAll(StringUtil.split(oldClasspath, " "))[ FD ]
Line_2 $$ public static void updateManifest(@NotNull final VirtualFile file, @Nullable final String mainClass, @Nullable final List<String> classpath, final boolean replaceValues) -->Line_6 $$ mainAttributes.put(Attributes.Name.MAIN_CLASS, mainClass)[ FD ]
Line_3 $$ final Manifest manifest = readManifest(file)-->Line_36 $$ manifest.write(outputStream)[ FD ]
Line_2 $$ public static void updateManifest(@NotNull final VirtualFile file, @Nullable final String mainClass, @Nullable final List<String> classpath, final boolean replaceValues) -->Line_5 $$ if (mainClass != null) [ CD ]
Line_2 $$ public static void updateManifest(@NotNull final VirtualFile file, @Nullable final String mainClass, @Nullable final List<String> classpath, final boolean replaceValues) -->Line_3 $$ final Manifest manifest = readManifest(file)[ FD ]
Line_11 $$ List<String> updatedClasspath-->Line_13 $$ updatedClasspath = classpath[ FD ]
Line_11 $$ List<String> updatedClasspath-->Line_15 $$ updatedClasspath = new ArrayList<String>()[ FD ]
Line_16 $$ final String oldClasspath = (String) mainAttributes.get(Attributes.Name.CLASS_PATH)-->Line_17 $$ if (!StringUtil.isEmpty(oldClasspath)) [ FD ]
Line_3 $$ final Manifest manifest = readManifest(file)-->Line_4 $$ final Attributes mainAttributes = manifest.getMainAttributes()[ FD ]
Line_13 $$ updatedClasspath = classpath-->Line_15 $$ updatedClasspath = new ArrayList<String>()[ FD ]
Line_2 $$ public static void updateManifest(@NotNull final VirtualFile file, @Nullable final String mainClass, @Nullable final List<String> classpath, final boolean replaceValues) -->Line_10 $$ if (classpath != null && !classpath.isEmpty()) [ CD ]
Line_11 $$ List<String> updatedClasspath-->Line_18 $$ updatedClasspath.addAll(StringUtil.split(oldClasspath, " "))[ FD ]
Line_4 $$ final Attributes mainAttributes = manifest.getMainAttributes()-->Line_16 $$ final String oldClasspath = (String) mainAttributes.get(Attributes.Name.CLASS_PATH)[ FD ]
Line_5 $$ if (mainClass != null) -->Line_7 $$ if (replaceValues) [ CD ]
Line_4 $$ final Attributes mainAttributes = manifest.getMainAttributes()-->Line_28 $$ mainAttributes.remove(Attributes.Name.CLASS_PATH)[ FD ]
Line_7 $$ if (replaceValues) -->Line_8 $$ mainAttributes.remove(Attributes.Name.MAIN_CLASS)[ CD ]
Line_27 $$ if (replaceValues) -->Line_28 $$ mainAttributes.remove(Attributes.Name.CLASS_PATH)[ CD ]
Line_2 $$ public static void updateManifest(@NotNull final VirtualFile file, @Nullable final String mainClass, @Nullable final List<String> classpath, final boolean replaceValues) -->Line_30 $$ ManifestBuilder.setVersionAttribute(mainAttributes)[ CD ]
Line_2 $$ public static void updateManifest(@NotNull final VirtualFile file, @Nullable final String mainClass, @Nullable final List<String> classpath, final boolean replaceValues) -->Line_31 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() [ CD ]
Line_13 $$ updatedClasspath = classpath-->Line_18 $$ updatedClasspath.addAll(StringUtil.split(oldClasspath, " "))[ FD ]
Line_2 $$ public static void updateManifest(@NotNull final VirtualFile file, @Nullable final String mainClass, @Nullable final List<String> classpath, final boolean replaceValues) -->Line_13 $$ updatedClasspath = classpath[ FD ]
Line_4 $$ final Attributes mainAttributes = manifest.getMainAttributes()-->Line_26 $$ mainAttributes.put(Attributes.Name.CLASS_PATH, StringUtil.join(updatedClasspath, " "))[ FD ]
Line_4 $$ final Attributes mainAttributes = manifest.getMainAttributes()-->Line_30 $$ ManifestBuilder.setVersionAttribute(mainAttributes)[ FD ]
Line_15 $$ updatedClasspath = new ArrayList<String>()-->Line_22 $$ updatedClasspath.add(path)[ FD ]
Line_2 $$ public static void updateManifest(@NotNull final VirtualFile file, @Nullable final String mainClass, @Nullable final List<String> classpath, final boolean replaceValues) -->Line_5 $$ if (mainClass != null) [ FD ]
Line_4 $$ final Attributes mainAttributes = manifest.getMainAttributes()-->Line_8 $$ mainAttributes.remove(Attributes.Name.MAIN_CLASS)[ FD ]
Line_34 $$ final OutputStream outputStream = file.getOutputStream(ManifestFileUtil.class)-->Line_38 $$ outputStream.close()[ FD ]
Line_2 $$ public static void updateManifest(@NotNull final VirtualFile file, @Nullable final String mainClass, @Nullable final List<String> classpath, final boolean replaceValues) -->Line_34 $$ final OutputStream outputStream = file.getOutputStream(ManifestFileUtil.class)[ FD ]
Line_5 $$ if (mainClass != null) -->Line_6 $$ mainAttributes.put(Attributes.Name.MAIN_CLASS, mainClass)[ CD ]
Line_4 $$ final Attributes mainAttributes = manifest.getMainAttributes()-->Line_6 $$ mainAttributes.put(Attributes.Name.MAIN_CLASS, mainClass)[ FD ]
Line_2 $$ public static void updateManifest(@NotNull final VirtualFile file, @Nullable final String mainClass, @Nullable final List<String> classpath, final boolean replaceValues) -->Line_4 $$ final Attributes mainAttributes = manifest.getMainAttributes()[ CD ]
Line_13 $$ updatedClasspath = classpath-->Line_21 $$ if (!updatedClasspath.contains(path)) [ FD ]
Line_2 $$ public static void updateManifest(@NotNull final VirtualFile file, @Nullable final String mainClass, @Nullable final List<String> classpath, final boolean replaceValues) -->Line_10 $$ if (classpath != null && !classpath.isEmpty()) [ FD ]
Line_15 $$ updatedClasspath = new ArrayList<String>()-->Line_21 $$ if (!updatedClasspath.contains(path)) [ FD ]
Line_13 $$ updatedClasspath = classpath-->Line_26 $$ mainAttributes.put(Attributes.Name.CLASS_PATH, StringUtil.join(updatedClasspath, " "))[ FD ]
Line_12 $$ if (replaceValues) -->Line_13 $$ updatedClasspath = classpath[ CD ]
Line_20 $$ for (String path : classpath) -->Line_21 $$ if (!updatedClasspath.contains(path)) [ FD ]
Line_13 $$ updatedClasspath = classpath-->Line_22 $$ updatedClasspath.add(path)[ FD ]
Line_34 $$ final OutputStream outputStream = file.getOutputStream(ManifestFileUtil.class)-->Line_36 $$ manifest.write(outputStream)[ FD ]
Line_11 $$ List<String> updatedClasspath-->Line_22 $$ updatedClasspath.add(path)[ FD ]
Line_10 $$ if (classpath != null && !classpath.isEmpty()) -->Line_26 $$ mainAttributes.put(Attributes.Name.CLASS_PATH, StringUtil.join(updatedClasspath, " "))[ CD ]
Line_2 $$ public static void updateManifest(@NotNull final VirtualFile file, @Nullable final String mainClass, @Nullable final List<String> classpath, final boolean replaceValues) -->Line_3 $$ final Manifest manifest = readManifest(file)[ CD ]
Line_15 $$ updatedClasspath = new ArrayList<String>()-->Line_18 $$ updatedClasspath.addAll(StringUtil.split(oldClasspath, " "))[ FD ]
Line_15 $$ updatedClasspath = new ArrayList<String>()-->Line_26 $$ mainAttributes.put(Attributes.Name.CLASS_PATH, StringUtil.join(updatedClasspath, " "))[ FD ]
Line_12 $$ if (replaceValues) -->Line_17 $$ if (!StringUtil.isEmpty(oldClasspath)) [ CD ]
Line_12 $$ if (replaceValues) -->Line_16 $$ final String oldClasspath = (String) mainAttributes.get(Attributes.Name.CLASS_PATH)[ CD ]
