Line_19 $$ if (Validator.isNotNull(licenseXML)) -->Line_22 $$ attributes.put("SUCCESS_MESSAGE", "Your license has been successfully registered.")[ CD ]
Line_10 $$ JSONObject responseJSONObject = new JSONObjectImpl(response)-->Line_13 $$ String errorMessage = responseJSONObject.getString("errorMessage")[ FD ]
Line_19 $$ if (Validator.isNotNull(licenseXML)) -->Line_21 $$ attributes.clear()[ CD ]
Line_3 $$ Map<String, Object> attributes = new HashMap()-->Line_21 $$ attributes.clear()[ FD ]
Line_14 $$ if (Validator.isNotNull(errorMessage)) -->Line_16 $$ return attributes[ CD ]
Line_10 $$ JSONObject responseJSONObject = new JSONObjectImpl(response)-->Line_18 $$ String licenseXML = responseJSONObject.getString("licenseXML")[ FD ]
Line_4 $$ if (Validator.isNull(orderUuid)) -->Line_5 $$ return attributes[ CD ]
Line_3 $$ Map<String, Object> attributes = new HashMap()-->Line_12 $$ attributes.put("ORDER_PRODUCTS", _getOrderProducts(responseJSONObject))[ FD ]
Line_2 $$ public static Map<String, Object> registerOrder(String orderUuid, String productEntryName, int maxServers) -->Line_28 $$ return attributes[ CD ]
Line_10 $$ JSONObject responseJSONObject = new JSONObjectImpl(response)-->Line_11 $$ attributes.put("ORDER_PRODUCT_ID", responseJSONObject.getString("productId"))[ FD ]
Line_3 $$ Map<String, Object> attributes = new HashMap()-->Line_15 $$ attributes.put("ERROR_MESSAGE", errorMessage)[ FD ]
Line_2 $$ public static Map<String, Object> registerOrder(String orderUuid, String productEntryName, int maxServers) -->Line_4 $$ if (Validator.isNull(orderUuid)) [ FD ]
Line_2 $$ public static Map<String, Object> registerOrder(String orderUuid, String productEntryName, int maxServers) -->Line_8 $$ JSONObject jsonObject = _createRequest(orderUuid, productEntryName, maxServers)[ FD ]
Line_13 $$ String errorMessage = responseJSONObject.getString("errorMessage")-->Line_15 $$ attributes.put("ERROR_MESSAGE", errorMessage)[ FD ]
Line_14 $$ if (Validator.isNotNull(errorMessage)) -->Line_15 $$ attributes.put("ERROR_MESSAGE", errorMessage)[ CD ]
Line_8 $$ JSONObject jsonObject = _createRequest(orderUuid, productEntryName, maxServers)-->Line_9 $$ String response = sendRequest(jsonObject.toString())[ FD ]
Line_3 $$ Map<String, Object> attributes = new HashMap()-->Line_22 $$ attributes.put("SUCCESS_MESSAGE", "Your license has been successfully registered.")[ FD ]
Line_3 $$ Map<String, Object> attributes = new HashMap()-->Line_11 $$ attributes.put("ORDER_PRODUCT_ID", responseJSONObject.getString("productId"))[ FD ]
Line_10 $$ JSONObject responseJSONObject = new JSONObjectImpl(response)-->Line_12 $$ attributes.put("ORDER_PRODUCTS", _getOrderProducts(responseJSONObject))[ FD ]
Line_3 $$ Map<String, Object> attributes = new HashMap()-->Line_26 $$ attributes.put("ERROR_MESSAGE", "There was an error contacting " + LICENSE_SERVER_URL)[ FD ]
Line_13 $$ String errorMessage = responseJSONObject.getString("errorMessage")-->Line_14 $$ if (Validator.isNotNull(errorMessage)) [ FD ]
Line_10 $$ JSONObject responseJSONObject = new JSONObjectImpl(response)-->Line_20 $$ LicenseManagerUtil.registerLicense(responseJSONObject)[ FD ]
Line_2 $$ public static Map<String, Object> registerOrder(String orderUuid, String productEntryName, int maxServers) -->Line_4 $$ if (Validator.isNull(orderUuid)) [ CD ]
Line_2 $$ public static Map<String, Object> registerOrder(String orderUuid, String productEntryName, int maxServers) -->Line_3 $$ Map<String, Object> attributes = new HashMap()[ CD ]
Line_18 $$ String licenseXML = responseJSONObject.getString("licenseXML")-->Line_19 $$ if (Validator.isNotNull(licenseXML)) [ FD ]
Line_19 $$ if (Validator.isNotNull(licenseXML)) -->Line_20 $$ LicenseManagerUtil.registerLicense(responseJSONObject)[ CD ]
