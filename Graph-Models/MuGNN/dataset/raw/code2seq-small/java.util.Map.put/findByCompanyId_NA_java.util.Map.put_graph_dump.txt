Line_59 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_67 $$ setJoin(qPos, params4)[ FD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_4 $$ params = _emptyLinkedHashMap[ FD ]
Line_62 $$ if (doUnion) -->Line_63 $$ setJoin(qPos, params2)[ CD ]
Line_14 $$ params2 = new LinkedHashMap(params1)-->Line_16 $$ params2.put("groupOrg", userId)[ FD ]
Line_3 $$ if (params == null) -->Line_4 $$ params = _emptyLinkedHashMap[ CD ]
Line_27 $$ if (sql == null) -->Line_33 $$ findByC_C_SQL = replaceOrderBy(findByC_C_SQL, obc)[ CD ]
Line_4 $$ params = _emptyLinkedHashMap-->Line_10 $$ Long userId = (Long) params.get("usersGroups")[ FD ]
Line_6 $$ LinkedHashMap<String, Object> params1 = params-->Line_60 $$ setJoin(qPos, params1)[ FD ]
Line_4 $$ params = _emptyLinkedHashMap-->Line_11 $$ boolean inherit = GetterUtil.getBoolean(params.get("inherit"), true)[ FD ]
Line_30 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "(Group_.liveGroupId = 0) AND", StringPool.BLANK)-->Line_42 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params3))[ FD ]
Line_27 $$ if (sql == null) -->Line_47 $$ if (obc != null) [ CD ]
Line_13 $$ if (doUnion) -->Line_17 $$ params3 = new LinkedHashMap(params1)[ CD ]
Line_10 $$ Long userId = (Long) params.get("usersGroups")-->Line_12 $$ boolean doUnion = Validator.isNotNull(userId) && inherit[ FD ]
Line_28 $$ String findByC_C_SQL = CustomSQLUtil.get(FIND_BY_C_C)-->Line_33 $$ findByC_C_SQL = replaceOrderBy(findByC_C_SQL, obc)[ FD ]
Line_34 $$ StringBundler sb = new StringBundler(12)-->Line_48 $$ sb.append(" ORDER BY ")[ FD ]
Line_51 $$ sql = sb.toString()-->Line_52 $$ _findByCompanyIdSQLCache.put(sqlKey, sql)[ FD ]
Line_9 $$ LinkedHashMap<String, Object> params4 = null-->Line_21 $$ params4.remove("usersGroups")[ FD ]
Line_20 $$ params4 = new LinkedHashMap(params1)-->Line_22 $$ params4.put("groupsUserGroups", userId)[ FD ]
Line_62 $$ if (doUnion) -->Line_65 $$ setJoin(qPos, params3)[ CD ]
Line_9 $$ LinkedHashMap<String, Object> params4 = null-->Line_20 $$ params4 = new LinkedHashMap(params1)[ FD ]
Line_24 $$ String sql = null-->Line_26 $$ sql = _findByCompanyIdSQLCache.get(sqlKey)[ FD ]
Line_38 $$ if (doUnion) -->Line_42 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params3))[ CD ]
Line_54 $$ Session session = null-->Line_56 $$ session = openSession()[ FD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_11 $$ boolean inherit = GetterUtil.getBoolean(params.get("inherit"), true)[ CD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_25 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_30 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "(Group_.liveGroupId = 0) AND", StringPool.BLANK)-->Line_32 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "Group_.classNameId = ?", "Group_.classNameId = ".concat(StringUtil.merge(_getGroupOrganizationClassNameIds(), " OR Group_.classNameId = ")))[ FD ]
Line_12 $$ boolean doUnion = Validator.isNotNull(userId) && inherit-->Line_25 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_8 $$ LinkedHashMap<String, Object> params3 = null-->Line_42 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params3))[ FD ]
Line_28 $$ String findByC_C_SQL = CustomSQLUtil.get(FIND_BY_C_C)-->Line_36 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params1))[ FD ]
Line_34 $$ StringBundler sb = new StringBundler(12)-->Line_40 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params2))[ FD ]
Line_28 $$ String findByC_C_SQL = CustomSQLUtil.get(FIND_BY_C_C)-->Line_40 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params2))[ FD ]
Line_59 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_68 $$ qPos.add(companyId)[ FD ]
Line_26 $$ sql = _findByCompanyIdSQLCache.get(sqlKey)-->Line_52 $$ _findByCompanyIdSQLCache.put(sqlKey, sql)[ FD ]
Line_7 $$ LinkedHashMap<String, Object> params2 = null-->Line_15 $$ params2.remove("usersGroups")[ FD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_3 $$ if (params == null) [ FD ]
Line_38 $$ if (doUnion) -->Line_45 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_14 $$ params2 = new LinkedHashMap(params1)-->Line_15 $$ params2.remove("usersGroups")[ FD ]
Line_27 $$ if (sql == null) -->Line_36 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params1))[ CD ]
Line_30 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "(Group_.liveGroupId = 0) AND", StringPool.BLANK)-->Line_36 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params1))[ FD ]
Line_9 $$ LinkedHashMap<String, Object> params4 = null-->Line_22 $$ params4.put("groupsUserGroups", userId)[ FD ]
Line_30 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "(Group_.liveGroupId = 0) AND", StringPool.BLANK)-->Line_44 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params4))[ FD ]
Line_62 $$ if (doUnion) -->Line_68 $$ qPos.add(companyId)[ CD ]
Line_9 $$ LinkedHashMap<String, Object> params4 = null-->Line_25 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_56 $$ session = openSession()-->Line_57 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_7 $$ LinkedHashMap<String, Object> params2 = null-->Line_16 $$ params2.put("groupOrg", userId)[ FD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_33 $$ findByC_C_SQL = replaceOrderBy(findByC_C_SQL, obc)[ FD ]
Line_47 $$ if (obc != null) -->Line_49 $$ sb.append(obc.toString())[ CD ]
Line_20 $$ params4 = new LinkedHashMap(params1)-->Line_44 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params4))[ FD ]
Line_28 $$ String findByC_C_SQL = CustomSQLUtil.get(FIND_BY_C_C)-->Line_32 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "Group_.classNameId = ?", "Group_.classNameId = ".concat(StringUtil.merge(_getGroupOrganizationClassNameIds(), " OR Group_.classNameId = ")))[ FD ]
Line_26 $$ sql = _findByCompanyIdSQLCache.get(sqlKey)-->Line_57 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_59 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_64 $$ qPos.add(companyId)[ FD ]
Line_34 $$ StringBundler sb = new StringBundler(12)-->Line_49 $$ sb.append(obc.toString())[ FD ]
Line_59 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_60 $$ setJoin(qPos, params1)[ FD ]
Line_13 $$ if (doUnion) -->Line_15 $$ params2.remove("usersGroups")[ CD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_66 $$ qPos.add(companyId)[ FD ]
Line_8 $$ LinkedHashMap<String, Object> params3 = null-->Line_18 $$ params3.remove("usersGroups")[ FD ]
Line_13 $$ if (doUnion) -->Line_22 $$ params4.put("groupsUserGroups", userId)[ CD ]
Line_8 $$ LinkedHashMap<String, Object> params3 = null-->Line_19 $$ params3.put("groupsOrgs", userId)[ FD ]
Line_7 $$ LinkedHashMap<String, Object> params2 = null-->Line_63 $$ setJoin(qPos, params2)[ FD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_10 $$ Long userId = (Long) params.get("usersGroups")[ CD ]
Line_8 $$ LinkedHashMap<String, Object> params3 = null-->Line_17 $$ params3 = new LinkedHashMap(params1)[ FD ]
Line_34 $$ StringBundler sb = new StringBundler(12)-->Line_35 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_72 $$ for (Long groupId : groupIds) -->Line_73 $$ Group group = GroupUtil.findByPrimaryKey(groupId)[ FD ]
Line_17 $$ params3 = new LinkedHashMap(params1)-->Line_18 $$ params3.remove("usersGroups")[ FD ]
Line_29 $$ if (params.get("active") == Boolean.TRUE) -->Line_30 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "(Group_.liveGroupId = 0) AND", StringPool.BLANK)[ CD ]
Line_25 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)-->Line_52 $$ _findByCompanyIdSQLCache.put(sqlKey, sql)[ FD ]
Line_8 $$ LinkedHashMap<String, Object> params3 = null-->Line_25 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_20 $$ params4 = new LinkedHashMap(params1)-->Line_67 $$ setJoin(qPos, params4)[ FD ]
Line_32 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "Group_.classNameId = ?", "Group_.classNameId = ".concat(StringUtil.merge(_getGroupOrganizationClassNameIds(), " OR Group_.classNameId = ")))-->Line_42 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params3))[ FD ]
Line_4 $$ params = _emptyLinkedHashMap-->Line_29 $$ if (params.get("active") == Boolean.TRUE) [ FD ]
Line_54 $$ Session session = null-->Line_57 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_64 $$ qPos.add(companyId)[ FD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_13 $$ if (doUnion) [ CD ]
Line_59 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_66 $$ qPos.add(companyId)[ FD ]
Line_32 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "Group_.classNameId = ?", "Group_.classNameId = ".concat(StringUtil.merge(_getGroupOrganizationClassNameIds(), " OR Group_.classNameId = ")))-->Line_33 $$ findByC_C_SQL = replaceOrderBy(findByC_C_SQL, obc)[ FD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_61 $$ qPos.add(companyId)[ FD ]
Line_24 $$ String sql = null-->Line_27 $$ if (sql == null) [ FD ]
Line_30 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "(Group_.liveGroupId = 0) AND", StringPool.BLANK)-->Line_40 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params2))[ FD ]
Line_25 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)-->Line_26 $$ sql = _findByCompanyIdSQLCache.get(sqlKey)[ FD ]
Line_27 $$ if (sql == null) -->Line_51 $$ sql = sb.toString()[ CD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_25 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ CD ]
Line_32 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "Group_.classNameId = ?", "Group_.classNameId = ".concat(StringUtil.merge(_getGroupOrganizationClassNameIds(), " OR Group_.classNameId = ")))-->Line_36 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params1))[ FD ]
Line_7 $$ LinkedHashMap<String, Object> params2 = null-->Line_25 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_54 $$ Session session = null-->Line_80 $$ closeSession(session)[ FD ]
Line_26 $$ sql = _findByCompanyIdSQLCache.get(sqlKey)-->Line_51 $$ sql = sb.toString()[ FD ]
Line_17 $$ params3 = new LinkedHashMap(params1)-->Line_19 $$ params3.put("groupsOrgs", userId)[ FD ]
Line_27 $$ if (sql == null) -->Line_34 $$ StringBundler sb = new StringBundler(12)[ CD ]
Line_71 $$ List<Group> groups = new ArrayList(groupIds.size())-->Line_74 $$ groups.add(group)[ FD ]
Line_70 $$ List<Long> groupIds = (List<Long>) QueryUtil.list(q, getDialect(), start, end)-->Line_71 $$ List<Group> groups = new ArrayList(groupIds.size())[ FD ]
Line_57 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_59 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_33 $$ findByC_C_SQL = replaceOrderBy(findByC_C_SQL, obc)-->Line_36 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params1))[ FD ]
Line_27 $$ if (sql == null) -->Line_32 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "Group_.classNameId = ?", "Group_.classNameId = ".concat(StringUtil.merge(_getGroupOrganizationClassNameIds(), " OR Group_.classNameId = ")))[ CD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_49 $$ sb.append(obc.toString())[ FD ]
Line_34 $$ StringBundler sb = new StringBundler(12)-->Line_37 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_10 $$ Long userId = (Long) params.get("usersGroups")-->Line_19 $$ params3.put("groupsOrgs", userId)[ FD ]
Line_30 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "(Group_.liveGroupId = 0) AND", StringPool.BLANK)-->Line_33 $$ findByC_C_SQL = replaceOrderBy(findByC_C_SQL, obc)[ FD ]
Line_13 $$ if (doUnion) -->Line_20 $$ params4 = new LinkedHashMap(params1)[ CD ]
Line_14 $$ params2 = new LinkedHashMap(params1)-->Line_40 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params2))[ FD ]
Line_14 $$ params2 = new LinkedHashMap(params1)-->Line_25 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_28 $$ String findByC_C_SQL = CustomSQLUtil.get(FIND_BY_C_C)-->Line_44 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params4))[ FD ]
Line_34 $$ StringBundler sb = new StringBundler(12)-->Line_41 $$ sb.append(") UNION (")[ FD ]
Line_27 $$ if (sql == null) -->Line_28 $$ String findByC_C_SQL = CustomSQLUtil.get(FIND_BY_C_C)[ CD ]
Line_8 $$ LinkedHashMap<String, Object> params3 = null-->Line_65 $$ setJoin(qPos, params3)[ FD ]
Line_10 $$ Long userId = (Long) params.get("usersGroups")-->Line_22 $$ params4.put("groupsUserGroups", userId)[ FD ]
Line_13 $$ if (doUnion) -->Line_19 $$ params3.put("groupsOrgs", userId)[ CD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_54 $$ Session session = null[ CD ]
Line_32 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "Group_.classNameId = ?", "Group_.classNameId = ".concat(StringUtil.merge(_getGroupOrganizationClassNameIds(), " OR Group_.classNameId = ")))-->Line_44 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params4))[ FD ]
Line_24 $$ String sql = null-->Line_51 $$ sql = sb.toString()[ FD ]
Line_32 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "Group_.classNameId = ?", "Group_.classNameId = ".concat(StringUtil.merge(_getGroupOrganizationClassNameIds(), " OR Group_.classNameId = ")))-->Line_40 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params2))[ FD ]
Line_38 $$ if (doUnion) -->Line_41 $$ sb.append(") UNION (")[ CD ]
Line_34 $$ StringBundler sb = new StringBundler(12)-->Line_51 $$ sql = sb.toString()[ FD ]
Line_28 $$ String findByC_C_SQL = CustomSQLUtil.get(FIND_BY_C_C)-->Line_30 $$ findByC_C_SQL = StringUtil.replace(findByC_C_SQL, "(Group_.liveGroupId = 0) AND", StringPool.BLANK)[ FD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_27 $$ if (sql == null) [ CD ]
Line_33 $$ findByC_C_SQL = replaceOrderBy(findByC_C_SQL, obc)-->Line_42 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params3))[ FD ]
Line_62 $$ if (doUnion) -->Line_66 $$ qPos.add(companyId)[ CD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_70 $$ List<Long> groupIds = (List<Long>) QueryUtil.list(q, getDialect(), start, end)[ FD ]
Line_62 $$ if (doUnion) -->Line_67 $$ setJoin(qPos, params4)[ CD ]
Line_57 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_58 $$ q.addScalar("groupId", Type.LONG)[ FD ]
Line_62 $$ if (doUnion) -->Line_64 $$ qPos.add(companyId)[ CD ]
Line_24 $$ String sql = null-->Line_57 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_6 $$ LinkedHashMap<String, Object> params1 = params[ CD ]
Line_7 $$ LinkedHashMap<String, Object> params2 = null-->Line_40 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params2))[ FD ]
Line_27 $$ if (sql == null) -->Line_38 $$ if (doUnion) [ CD ]
Line_20 $$ params4 = new LinkedHashMap(params1)-->Line_21 $$ params4.remove("usersGroups")[ FD ]
Line_20 $$ params4 = new LinkedHashMap(params1)-->Line_25 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_27 $$ if (sql == null) -->Line_52 $$ _findByCompanyIdSQLCache.put(sqlKey, sql)[ CD ]
Line_59 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_61 $$ qPos.add(companyId)[ FD ]
Line_38 $$ if (doUnion) -->Line_39 $$ sb.append(" UNION (")[ CD ]
Line_27 $$ if (sql == null) -->Line_35 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ CD ]
Line_28 $$ String findByC_C_SQL = CustomSQLUtil.get(FIND_BY_C_C)-->Line_42 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params3))[ FD ]
Line_73 $$ Group group = GroupUtil.findByPrimaryKey(groupId)-->Line_74 $$ groups.add(group)[ FD ]
Line_13 $$ if (doUnion) -->Line_16 $$ params2.put("groupOrg", userId)[ CD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_9 $$ LinkedHashMap<String, Object> params4 = null[ CD ]
Line_33 $$ findByC_C_SQL = replaceOrderBy(findByC_C_SQL, obc)-->Line_40 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params2))[ FD ]
Line_17 $$ params3 = new LinkedHashMap(params1)-->Line_42 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params3))[ FD ]
Line_34 $$ StringBundler sb = new StringBundler(12)-->Line_45 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_6 $$ LinkedHashMap<String, Object> params1 = params-->Line_36 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params1))[ FD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_8 $$ LinkedHashMap<String, Object> params3 = null[ CD ]
Line_26 $$ sql = _findByCompanyIdSQLCache.get(sqlKey)-->Line_27 $$ if (sql == null) [ FD ]
Line_27 $$ if (sql == null) -->Line_37 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_3 $$ if (params == null) [ CD ]
Line_59 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_65 $$ setJoin(qPos, params3)[ FD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_12 $$ boolean doUnion = Validator.isNotNull(userId) && inherit[ CD ]
Line_57 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_70 $$ List<Long> groupIds = (List<Long>) QueryUtil.list(q, getDialect(), start, end)[ FD ]
Line_34 $$ StringBundler sb = new StringBundler(12)-->Line_42 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params3))[ FD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_7 $$ LinkedHashMap<String, Object> params2 = null[ CD ]
Line_33 $$ findByC_C_SQL = replaceOrderBy(findByC_C_SQL, obc)-->Line_44 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params4))[ FD ]
Line_13 $$ if (doUnion) -->Line_14 $$ params2 = new LinkedHashMap(params1)[ CD ]
Line_38 $$ if (doUnion) -->Line_40 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params2))[ CD ]
Line_9 $$ LinkedHashMap<String, Object> params4 = null-->Line_44 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params4))[ FD ]
Line_47 $$ if (obc != null) -->Line_48 $$ sb.append(" ORDER BY ")[ CD ]
Line_34 $$ StringBundler sb = new StringBundler(12)-->Line_43 $$ sb.append(") UNION (")[ FD ]
Line_6 $$ LinkedHashMap<String, Object> params1 = params-->Line_25 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_27 $$ if (sql == null) -->Line_29 $$ if (params.get("active") == Boolean.TRUE) [ CD ]
Line_34 $$ StringBundler sb = new StringBundler(12)-->Line_36 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params1))[ FD ]
Line_13 $$ if (doUnion) -->Line_18 $$ params3.remove("usersGroups")[ CD ]
Line_34 $$ StringBundler sb = new StringBundler(12)-->Line_39 $$ sb.append(" UNION (")[ FD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_24 $$ String sql = null[ CD ]
Line_24 $$ String sql = null-->Line_52 $$ _findByCompanyIdSQLCache.put(sqlKey, sql)[ FD ]
Line_56 $$ session = openSession()-->Line_80 $$ closeSession(session)[ FD ]
Line_59 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_63 $$ setJoin(qPos, params2)[ FD ]
Line_38 $$ if (doUnion) -->Line_43 $$ sb.append(") UNION (")[ CD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_29 $$ if (params.get("active") == Boolean.TRUE) [ FD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_26 $$ sql = _findByCompanyIdSQLCache.get(sqlKey)[ CD ]
Line_51 $$ sql = sb.toString()-->Line_57 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_47 $$ if (obc != null) [ FD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_11 $$ boolean inherit = GetterUtil.getBoolean(params.get("inherit"), true)[ FD ]
Line_38 $$ if (doUnion) -->Line_44 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params4))[ CD ]
Line_34 $$ StringBundler sb = new StringBundler(12)-->Line_44 $$ sb.append(replaceJoinAndWhere(findByC_C_SQL, params4))[ FD ]
Line_14 $$ params2 = new LinkedHashMap(params1)-->Line_63 $$ setJoin(qPos, params2)[ FD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_68 $$ qPos.add(companyId)[ FD ]
Line_17 $$ params3 = new LinkedHashMap(params1)-->Line_65 $$ setJoin(qPos, params3)[ FD ]
Line_17 $$ params3 = new LinkedHashMap(params1)-->Line_25 $$ String sqlKey = _buildSQLKey(params1, params2, params3, params4, obc, doUnion)[ FD ]
Line_2 $$ public List<Group> findByCompanyId(long companyId, LinkedHashMap<String, Object> params, int start, int end, OrderByComparator<Group> obc) -->Line_10 $$ Long userId = (Long) params.get("usersGroups")[ FD ]
Line_10 $$ Long userId = (Long) params.get("usersGroups")-->Line_16 $$ params2.put("groupOrg", userId)[ FD ]
Line_7 $$ LinkedHashMap<String, Object> params2 = null-->Line_14 $$ params2 = new LinkedHashMap(params1)[ FD ]
Line_13 $$ if (doUnion) -->Line_21 $$ params4.remove("usersGroups")[ CD ]
Line_9 $$ LinkedHashMap<String, Object> params4 = null-->Line_67 $$ setJoin(qPos, params4)[ FD ]
