Line_3 $$ String index = "test"-->Line_44 $$ enableAllocation(index)[ FD ]
Line_2 $$ public void testCorruptedShards() throws Exception -->Line_4 $$ internalCluster().ensureAtLeastNumDataNodes(2)[ CD ]
Line_19 $$ Set<String> nodes = corruptedShardIDMap.get(shardId)-->Line_20 $$ if (nodes == null) [ FD ]
Line_29 $$ ImmutableOpenIntMap<List<IndicesShardStoresResponse.StoreStatus>> shardStatuses = rsp.getStoreStatuses().get(index)-->Line_30 $$ assertNotNull(shardStatuses)[ FD ]
Line_2 $$ public void testCorruptedShards() throws Exception -->Line_3 $$ String index = "test"[ CD ]
Line_3 $$ String index = "test"-->Line_28 $$ IndicesShardStoresResponse rsp = client().admin().indices().prepareShardStores(index).setShardStatuses("all").get()[ FD ]
Line_29 $$ ImmutableOpenIntMap<List<IndicesShardStoresResponse.StoreStatus>> shardStatuses = rsp.getStoreStatuses().get(index)-->Line_31 $$ assertThat(shardStatuses.size(), greaterThan(0))[ FD ]
Line_21 $$ nodes = new HashSet()-->Line_23 $$ nodes.add(node)[ FD ]
Line_2 $$ public void testCorruptedShards() throws Exception -->Line_44 $$ enableAllocation(index)[ CD ]
Line_19 $$ Set<String> nodes = corruptedShardIDMap.get(shardId)-->Line_21 $$ nodes = new HashSet()[ FD ]
Line_2 $$ public void testCorruptedShards() throws Exception -->Line_11 $$ Map<Integer, Set<String>> corruptedShardIDMap = new HashMap()[ CD ]
Line_2 $$ public void testCorruptedShards() throws Exception -->Line_29 $$ ImmutableOpenIntMap<List<IndicesShardStoresResponse.StoreStatus>> shardStatuses = rsp.getStoreStatuses().get(index)[ CD ]
Line_3 $$ String index = "test"-->Line_9 $$ disableAllocation(index)[ FD ]
Line_19 $$ Set<String> nodes = corruptedShardIDMap.get(shardId)-->Line_23 $$ nodes.add(node)[ FD ]
Line_11 $$ Map<Integer, Set<String>> corruptedShardIDMap = new HashMap()-->Line_24 $$ corruptedShardIDMap.put(shardId, nodes)[ FD ]
Line_2 $$ public void testCorruptedShards() throws Exception -->Line_30 $$ assertNotNull(shardStatuses)[ CD ]
Line_34 $$ if (corruptedShardIDMap.containsKey(shardStatus.key) && corruptedShardIDMap.get(shardStatus.key).contains(status.getNode().name())) -->Line_38 $$ assertThat(status.getVersion(), greaterThanOrEqualTo(0l))[ CD ]
Line_17 $$ if (randomBoolean()) -->Line_24 $$ corruptedShardIDMap.put(shardId, nodes)[ CD ]
Line_16 $$ IndexShard shard = indexShards.getShard(shardId)-->Line_18 $$ shard.failShard("test", new CorruptIndexException("test corrupted", ""))[ FD ]
Line_2 $$ public void testCorruptedShards() throws Exception -->Line_9 $$ disableAllocation(index)[ CD ]
Line_15 $$ for (Integer shardId : indexShards.shardIds()) -->Line_24 $$ corruptedShardIDMap.put(shardId, nodes)[ FD ]
Line_3 $$ String index = "test"-->Line_29 $$ ImmutableOpenIntMap<List<IndicesShardStoresResponse.StoreStatus>> shardStatuses = rsp.getStoreStatuses().get(index)[ FD ]
Line_34 $$ if (corruptedShardIDMap.containsKey(shardStatus.key) && corruptedShardIDMap.get(shardStatus.key).contains(status.getNode().name())) -->Line_39 $$ assertNull(status.getStoreException())[ CD ]
Line_17 $$ if (randomBoolean()) -->Line_20 $$ if (nodes == null) [ CD ]
Line_2 $$ public void testCorruptedShards() throws Exception -->Line_5 $$ assertAcked(prepareCreate(index).setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, "5").put(MockFSIndexStore.CHECK_INDEX_ON_CLOSE, false)))[ CD ]
Line_11 $$ Map<Integer, Set<String>> corruptedShardIDMap = new HashMap()-->Line_19 $$ Set<String> nodes = corruptedShardIDMap.get(shardId)[ FD ]
Line_33 $$ for (IndicesShardStoresResponse.StoreStatus status : shardStatus.value) -->Line_38 $$ assertThat(status.getVersion(), greaterThanOrEqualTo(0l))[ FD ]
Line_17 $$ if (randomBoolean()) -->Line_18 $$ shard.failShard("test", new CorruptIndexException("test corrupted", ""))[ CD ]
Line_14 $$ IndexService indexShards = indexServices.indexServiceSafe(index)-->Line_15 $$ for (Integer shardId : indexShards.shardIds()) [ FD ]
Line_3 $$ String index = "test"-->Line_6 $$ indexRandomData(index)[ FD ]
Line_2 $$ public void testCorruptedShards() throws Exception -->Line_31 $$ assertThat(shardStatuses.size(), greaterThan(0))[ CD ]
Line_3 $$ String index = "test"-->Line_14 $$ IndexService indexShards = indexServices.indexServiceSafe(index)[ FD ]
Line_2 $$ public void testCorruptedShards() throws Exception -->Line_6 $$ indexRandomData(index)[ CD ]
Line_12 $$ for (String node : internalCluster().nodesInclude(index)) -->Line_13 $$ IndicesService indexServices = internalCluster().getInstance(IndicesService.class, node)[ FD ]
Line_33 $$ for (IndicesShardStoresResponse.StoreStatus status : shardStatus.value) -->Line_36 $$ assertThat(status.getStoreException(), notNullValue())[ FD ]
Line_15 $$ for (Integer shardId : indexShards.shardIds()) -->Line_16 $$ IndexShard shard = indexShards.getShard(shardId)[ FD ]
Line_20 $$ if (nodes == null) -->Line_21 $$ nodes = new HashSet()[ CD ]
Line_2 $$ public void testCorruptedShards() throws Exception -->Line_28 $$ IndicesShardStoresResponse rsp = client().admin().indices().prepareShardStores(index).setShardStatuses("all").get()[ CD ]
Line_3 $$ String index = "test"-->Line_7 $$ ensureGreen(index)[ FD ]
Line_12 $$ for (String node : internalCluster().nodesInclude(index)) -->Line_23 $$ nodes.add(node)[ FD ]
Line_33 $$ for (IndicesShardStoresResponse.StoreStatus status : shardStatus.value) -->Line_39 $$ assertNull(status.getStoreException())[ FD ]
Line_33 $$ for (IndicesShardStoresResponse.StoreStatus status : shardStatus.value) -->Line_35 $$ assertThat(status.getVersion(), greaterThanOrEqualTo(0l))[ FD ]
Line_11 $$ Map<Integer, Set<String>> corruptedShardIDMap = new HashMap()-->Line_34 $$ if (corruptedShardIDMap.containsKey(shardStatus.key) && corruptedShardIDMap.get(shardStatus.key).contains(status.getNode().name())) [ FD ]
Line_34 $$ if (corruptedShardIDMap.containsKey(shardStatus.key) && corruptedShardIDMap.get(shardStatus.key).contains(status.getNode().name())) -->Line_35 $$ assertThat(status.getVersion(), greaterThanOrEqualTo(0l))[ CD ]
Line_13 $$ IndicesService indexServices = internalCluster().getInstance(IndicesService.class, node)-->Line_14 $$ IndexService indexShards = indexServices.indexServiceSafe(index)[ FD ]
Line_21 $$ nodes = new HashSet()-->Line_24 $$ corruptedShardIDMap.put(shardId, nodes)[ FD ]
Line_15 $$ for (Integer shardId : indexShards.shardIds()) -->Line_19 $$ Set<String> nodes = corruptedShardIDMap.get(shardId)[ FD ]
Line_3 $$ String index = "test"-->Line_12 $$ for (String node : internalCluster().nodesInclude(index)) [ FD ]
Line_3 $$ String index = "test"-->Line_5 $$ assertAcked(prepareCreate(index).setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, "5").put(MockFSIndexStore.CHECK_INDEX_ON_CLOSE, false)))[ FD ]
Line_33 $$ for (IndicesShardStoresResponse.StoreStatus status : shardStatus.value) -->Line_34 $$ if (corruptedShardIDMap.containsKey(shardStatus.key) && corruptedShardIDMap.get(shardStatus.key).contains(status.getNode().name())) [ FD ]
Line_14 $$ IndexService indexShards = indexServices.indexServiceSafe(index)-->Line_16 $$ IndexShard shard = indexShards.getShard(shardId)[ FD ]
Line_17 $$ if (randomBoolean()) -->Line_23 $$ nodes.add(node)[ CD ]
Line_34 $$ if (corruptedShardIDMap.containsKey(shardStatus.key) && corruptedShardIDMap.get(shardStatus.key).contains(status.getNode().name())) -->Line_36 $$ assertThat(status.getStoreException(), notNullValue())[ CD ]
Line_28 $$ IndicesShardStoresResponse rsp = client().admin().indices().prepareShardStores(index).setShardStatuses("all").get()-->Line_29 $$ ImmutableOpenIntMap<List<IndicesShardStoresResponse.StoreStatus>> shardStatuses = rsp.getStoreStatuses().get(index)[ FD ]
Line_19 $$ Set<String> nodes = corruptedShardIDMap.get(shardId)-->Line_24 $$ corruptedShardIDMap.put(shardId, nodes)[ FD ]
Line_17 $$ if (randomBoolean()) -->Line_19 $$ Set<String> nodes = corruptedShardIDMap.get(shardId)[ CD ]
Line_2 $$ public void testCorruptedShards() throws Exception -->Line_7 $$ ensureGreen(index)[ CD ]
