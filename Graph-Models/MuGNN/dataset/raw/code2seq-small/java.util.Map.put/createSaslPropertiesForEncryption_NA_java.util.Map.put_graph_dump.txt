Line_2 $$ public static Map<String, String> createSaslPropertiesForEncryption(String encryptionAlgorithm) -->Line_6 $$ saslProps.put("com.sun.security.sasl.digest.cipher", encryptionAlgorithm)[ CD ]
Line_2 $$ public static Map<String, String> createSaslPropertiesForEncryption(String encryptionAlgorithm) -->Line_3 $$ Map<String, String> saslProps = Maps.newHashMapWithExpectedSize(3)[ CD ]
Line_3 $$ Map<String, String> saslProps = Maps.newHashMapWithExpectedSize(3)-->Line_4 $$ saslProps.put(Sasl.QOP, QualityOfProtection.PRIVACY.getSaslQop())[ FD ]
Line_2 $$ public static Map<String, String> createSaslPropertiesForEncryption(String encryptionAlgorithm) -->Line_5 $$ saslProps.put(Sasl.SERVER_AUTH, "true")[ CD ]
Line_2 $$ public static Map<String, String> createSaslPropertiesForEncryption(String encryptionAlgorithm) -->Line_4 $$ saslProps.put(Sasl.QOP, QualityOfProtection.PRIVACY.getSaslQop())[ CD ]
Line_2 $$ public static Map<String, String> createSaslPropertiesForEncryption(String encryptionAlgorithm) -->Line_6 $$ saslProps.put("com.sun.security.sasl.digest.cipher", encryptionAlgorithm)[ FD ]
Line_3 $$ Map<String, String> saslProps = Maps.newHashMapWithExpectedSize(3)-->Line_5 $$ saslProps.put(Sasl.SERVER_AUTH, "true")[ FD ]
Line_2 $$ public static Map<String, String> createSaslPropertiesForEncryption(String encryptionAlgorithm) -->Line_7 $$ return saslProps[ CD ]
Line_3 $$ Map<String, String> saslProps = Maps.newHashMapWithExpectedSize(3)-->Line_6 $$ saslProps.put("com.sun.security.sasl.digest.cipher", encryptionAlgorithm)[ FD ]
