Line_6 $$ Map<String, Class<? extends AbstractJasperReportsView>> mappings = new HashMap<String, Class<? extends AbstractJasperReportsView>>()-->Line_7 $$ mappings.put("test", ExporterParameterTestView.class)[ FD ]
Line_5 $$ JasperReportsMultiFormatView view = (JasperReportsMultiFormatView) getView(UNCOMPILED_REPORT)-->Line_11 $$ view.setFormatMappings(mappings)[ FD ]
Line_13 $$ Map<String, Object> model = getBaseModel()-->Line_15 $$ view.render(model, request, response)[ FD ]
Line_2 $$ public void exporterParametersAreCarriedAcross() throws Exception -->Line_3 $$ Assume.group(TestGroup.CUSTOM_COMPILATION)[ CD ]
Line_2 $$ public void exporterParametersAreCarriedAcross() throws Exception -->Line_15 $$ view.render(model, request, response)[ CD ]
Line_5 $$ JasperReportsMultiFormatView view = (JasperReportsMultiFormatView) getView(UNCOMPILED_REPORT)-->Line_12 $$ view.initApplicationContext()[ FD ]
Line_13 $$ Map<String, Object> model = getBaseModel()-->Line_14 $$ model.put(getDiscriminatorKey(), "test")[ FD ]
Line_2 $$ public void exporterParametersAreCarriedAcross() throws Exception -->Line_7 $$ mappings.put("test", ExporterParameterTestView.class)[ CD ]
Line_2 $$ public void exporterParametersAreCarriedAcross() throws Exception -->Line_5 $$ JasperReportsMultiFormatView view = (JasperReportsMultiFormatView) getView(UNCOMPILED_REPORT)[ CD ]
Line_2 $$ public void exporterParametersAreCarriedAcross() throws Exception -->Line_10 $$ view.setExporterParameters(exporterParameters)[ CD ]
Line_8 $$ Map<String, String> exporterParameters = new HashMap<String, String>()-->Line_10 $$ view.setExporterParameters(exporterParameters)[ FD ]
Line_2 $$ public void exporterParametersAreCarriedAcross() throws Exception -->Line_13 $$ Map<String, Object> model = getBaseModel()[ CD ]
Line_2 $$ public void exporterParametersAreCarriedAcross() throws Exception -->Line_11 $$ view.setFormatMappings(mappings)[ CD ]
Line_5 $$ JasperReportsMultiFormatView view = (JasperReportsMultiFormatView) getView(UNCOMPILED_REPORT)-->Line_15 $$ view.render(model, request, response)[ FD ]
Line_6 $$ Map<String, Class<? extends AbstractJasperReportsView>> mappings = new HashMap<String, Class<? extends AbstractJasperReportsView>>()-->Line_11 $$ view.setFormatMappings(mappings)[ FD ]
Line_5 $$ JasperReportsMultiFormatView view = (JasperReportsMultiFormatView) getView(UNCOMPILED_REPORT)-->Line_10 $$ view.setExporterParameters(exporterParameters)[ FD ]
Line_2 $$ public void exporterParametersAreCarriedAcross() throws Exception -->Line_4 $$ assumeTrue(canCompileReport)[ CD ]
Line_2 $$ public void exporterParametersAreCarriedAcross() throws Exception -->Line_14 $$ model.put(getDiscriminatorKey(), "test")[ CD ]
Line_2 $$ public void exporterParametersAreCarriedAcross() throws Exception -->Line_9 $$ exporterParameters.put(ExporterParameterTestView.TEST_PARAM, "foo")[ CD ]
Line_2 $$ public void exporterParametersAreCarriedAcross() throws Exception -->Line_6 $$ Map<String, Class<? extends AbstractJasperReportsView>> mappings = new HashMap<String, Class<? extends AbstractJasperReportsView>>()[ CD ]
Line_8 $$ Map<String, String> exporterParameters = new HashMap<String, String>()-->Line_9 $$ exporterParameters.put(ExporterParameterTestView.TEST_PARAM, "foo")[ FD ]
Line_2 $$ public void exporterParametersAreCarriedAcross() throws Exception -->Line_12 $$ view.initApplicationContext()[ CD ]
Line_2 $$ public void exporterParametersAreCarriedAcross() throws Exception -->Line_8 $$ Map<String, String> exporterParameters = new HashMap<String, String>()[ CD ]
