Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)-->Line_41 $$ AdvancedEntity ver9 = getAuditReader().find(AdvancedEntity.class, advancedEntity.getId(), 9)[ FD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_32 $$ Set<InternalComponent> internalComponentSet = (Set) advancedEntity.getDynamicConfiguration().get(INTERNAL_SET_OF_COMPONENTS)[ CD ]
Line_3 $$ Session session = openSession()-->Line_4 $$ session.getTransaction().begin()[ FD ]
Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)-->Line_34 $$ AdvancedEntity ver7 = getAuditReader().find(AdvancedEntity.class, advancedEntity.getId(), 7)[ FD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_15 $$ List internalList = (List) advancedEntity.getDynamicConfiguration().get(INTERNAL_LIST)[ CD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_10 $$ Assert.assertEquals(advancedEntity, ver1)[ CD ]
Line_9 $$ AdvancedEntity ver1 = getAuditReader().find(AdvancedEntity.class, advancedEntity.getId(), 1)-->Line_10 $$ Assert.assertEquals(advancedEntity, ver1)[ FD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_21 $$ AdvancedEntity ver4 = getAuditReader().find(AdvancedEntity.class, advancedEntity.getId(), 4)[ CD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_30 $$ AdvancedEntity ver6 = getAuditReader().find(AdvancedEntity.class, advancedEntity.getId(), 6)[ CD ]
Line_17 $$ AdvancedEntity ver3 = getAuditReader().find(AdvancedEntity.class, advancedEntity.getId(), 3)-->Line_18 $$ Assert.assertEquals(advancedEntity, ver3)[ FD ]
Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)-->Line_21 $$ AdvancedEntity ver4 = getAuditReader().find(AdvancedEntity.class, advancedEntity.getId(), 4)[ FD ]
Line_41 $$ AdvancedEntity ver9 = getAuditReader().find(AdvancedEntity.class, advancedEntity.getId(), 9)-->Line_42 $$ Assert.assertEquals(advancedEntity, ver9)[ FD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_40 $$ ages.add(new Age(4))[ CD ]
Line_28 $$ mapWithManyToMany = (Map) advancedEntity.getDynamicConfiguration().get(INTERNAL_MAP_WITH_MANY_TO_MANY)-->Line_29 $$ mapWithManyToMany.clear()[ FD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_34 $$ AdvancedEntity ver7 = getAuditReader().find(AdvancedEntity.class, advancedEntity.getId(), 7)[ CD ]
Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)-->Line_9 $$ AdvancedEntity ver1 = getAuditReader().find(AdvancedEntity.class, advancedEntity.getId(), 1)[ FD ]
Line_19 $$ Map<String, String> map = (Map) advancedEntity.getDynamicConfiguration().get(INTERNAL_MAP)-->Line_20 $$ map.put("three", "3")[ FD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_37 $$ AdvancedEntity ver8 = getAuditReader().find(AdvancedEntity.class, advancedEntity.getId(), 8)[ CD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_39 $$ List<Age> ages = (List<Age>) advancedEntity.getDynamicConfiguration().get(INTERNAL_LIST_OF_USER_TYPES)[ CD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_5 $$ ManyToOneEntity manyToOne = getManyToOneEntity()[ CD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)[ CD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_36 $$ advancedEntity.getDynamicConfiguration().put(AGE_USER_TYPE, new Age(19))[ CD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_41 $$ AdvancedEntity ver9 = getAuditReader().find(AdvancedEntity.class, advancedEntity.getId(), 9)[ CD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_19 $$ Map<String, String> map = (Map) advancedEntity.getDynamicConfiguration().get(INTERNAL_MAP)[ CD ]
Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)-->Line_19 $$ Map<String, String> map = (Map) advancedEntity.getDynamicConfiguration().get(INTERNAL_MAP)[ FD ]
Line_5 $$ ManyToOneEntity manyToOne = getManyToOneEntity()-->Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)[ FD ]
Line_7 $$ ManyToManyEntity manyToManyEntity = getManyToManyEntity()-->Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)[ FD ]
Line_3 $$ Session session = openSession()-->Line_43 $$ session.getTransaction().commit()[ FD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_29 $$ mapWithManyToMany.clear()[ CD ]
Line_26 $$ AdvancedEntity ver5 = getAuditReader().find(AdvancedEntity.class, advancedEntity.getId(), 5)-->Line_27 $$ Assert.assertEquals(advancedEntity, ver5)[ FD ]
Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)-->Line_10 $$ Assert.assertEquals(advancedEntity, ver1)[ FD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_35 $$ Assert.assertEquals(advancedEntity, ver7)[ CD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_6 $$ OneToOneEntity oneToOne = getOneToOneEntity()[ CD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_43 $$ session.getTransaction().commit()[ CD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_11 $$ InternalComponent internalComponent = (InternalComponent) advancedEntity.getDynamicConfiguration().get(INTERNAL_COMPONENT)[ CD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_23 $$ Map<String, ManyToManyEntity> mapWithManyToMany = (Map) advancedEntity.getDynamicConfiguration().get(INTERNAL_MAP_WITH_MANY_TO_MANY)[ CD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_42 $$ Assert.assertEquals(advancedEntity, ver9)[ CD ]
Line_34 $$ AdvancedEntity ver7 = getAuditReader().find(AdvancedEntity.class, advancedEntity.getId(), 7)-->Line_35 $$ Assert.assertEquals(advancedEntity, ver7)[ FD ]
Line_32 $$ Set<InternalComponent> internalComponentSet = (Set) advancedEntity.getDynamicConfiguration().get(INTERNAL_SET_OF_COMPONENTS)-->Line_33 $$ internalComponentSet.add(new InternalComponent("drei"))[ FD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_14 $$ Assert.assertEquals(advancedEntity, ver2)[ CD ]
Line_37 $$ AdvancedEntity ver8 = getAuditReader().find(AdvancedEntity.class, advancedEntity.getId(), 8)-->Line_38 $$ Assert.assertEquals(advancedEntity, ver8)[ FD ]
Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)-->Line_27 $$ Assert.assertEquals(advancedEntity, ver5)[ FD ]
Line_23 $$ Map<String, ManyToManyEntity> mapWithManyToMany = (Map) advancedEntity.getDynamicConfiguration().get(INTERNAL_MAP_WITH_MANY_TO_MANY)-->Line_28 $$ mapWithManyToMany = (Map) advancedEntity.getDynamicConfiguration().get(INTERNAL_MAP_WITH_MANY_TO_MANY)[ FD ]
Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)-->Line_23 $$ Map<String, ManyToManyEntity> mapWithManyToMany = (Map) advancedEntity.getDynamicConfiguration().get(INTERNAL_MAP_WITH_MANY_TO_MANY)[ FD ]
Line_21 $$ AdvancedEntity ver4 = getAuditReader().find(AdvancedEntity.class, advancedEntity.getId(), 4)-->Line_22 $$ Assert.assertEquals(advancedEntity, ver4)[ FD ]
Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)-->Line_28 $$ mapWithManyToMany = (Map) advancedEntity.getDynamicConfiguration().get(INTERNAL_MAP_WITH_MANY_TO_MANY)[ FD ]
Line_23 $$ Map<String, ManyToManyEntity> mapWithManyToMany = (Map) advancedEntity.getDynamicConfiguration().get(INTERNAL_MAP_WITH_MANY_TO_MANY)-->Line_25 $$ mapWithManyToMany.put("entity2", manyToManyEntity2)[ FD ]
Line_23 $$ Map<String, ManyToManyEntity> mapWithManyToMany = (Map) advancedEntity.getDynamicConfiguration().get(INTERNAL_MAP_WITH_MANY_TO_MANY)-->Line_29 $$ mapWithManyToMany.clear()[ FD ]
Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)-->Line_11 $$ InternalComponent internalComponent = (InternalComponent) advancedEntity.getDynamicConfiguration().get(INTERNAL_COMPONENT)[ FD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_25 $$ mapWithManyToMany.put("entity2", manyToManyEntity2)[ CD ]
Line_24 $$ ManyToManyEntity manyToManyEntity2 = new ManyToManyEntity(2L, "new value")-->Line_25 $$ mapWithManyToMany.put("entity2", manyToManyEntity2)[ FD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_20 $$ map.put("three", "3")[ CD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_17 $$ AdvancedEntity ver3 = getAuditReader().find(AdvancedEntity.class, advancedEntity.getId(), 3)[ CD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_26 $$ AdvancedEntity ver5 = getAuditReader().find(AdvancedEntity.class, advancedEntity.getId(), 5)[ CD ]
Line_30 $$ AdvancedEntity ver6 = getAuditReader().find(AdvancedEntity.class, advancedEntity.getId(), 6)-->Line_31 $$ Assert.assertEquals(advancedEntity, ver6)[ FD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_16 $$ internalList.add("four")[ CD ]
Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)-->Line_18 $$ Assert.assertEquals(advancedEntity, ver3)[ FD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_4 $$ session.getTransaction().begin()[ CD ]
Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)-->Line_26 $$ AdvancedEntity ver5 = getAuditReader().find(AdvancedEntity.class, advancedEntity.getId(), 5)[ FD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_22 $$ Assert.assertEquals(advancedEntity, ver4)[ CD ]
Line_11 $$ InternalComponent internalComponent = (InternalComponent) advancedEntity.getDynamicConfiguration().get(INTERNAL_COMPONENT)-->Line_12 $$ internalComponent.setProperty("new value")[ FD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_28 $$ mapWithManyToMany = (Map) advancedEntity.getDynamicConfiguration().get(INTERNAL_MAP_WITH_MANY_TO_MANY)[ CD ]
Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)-->Line_31 $$ Assert.assertEquals(advancedEntity, ver6)[ FD ]
Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)-->Line_42 $$ Assert.assertEquals(advancedEntity, ver9)[ FD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_38 $$ Assert.assertEquals(advancedEntity, ver8)[ CD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_3 $$ Session session = openSession()[ CD ]
Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)-->Line_32 $$ Set<InternalComponent> internalComponentSet = (Set) advancedEntity.getDynamicConfiguration().get(INTERNAL_SET_OF_COMPONENTS)[ FD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_13 $$ AdvancedEntity ver2 = getAuditReader().find(AdvancedEntity.class, advancedEntity.getId(), 2)[ CD ]
Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)-->Line_39 $$ List<Age> ages = (List<Age>) advancedEntity.getDynamicConfiguration().get(INTERNAL_LIST_OF_USER_TYPES)[ FD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_12 $$ internalComponent.setProperty("new value")[ CD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_27 $$ Assert.assertEquals(advancedEntity, ver5)[ CD ]
Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)-->Line_30 $$ AdvancedEntity ver6 = getAuditReader().find(AdvancedEntity.class, advancedEntity.getId(), 6)[ FD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_33 $$ internalComponentSet.add(new InternalComponent("drei"))[ CD ]
Line_6 $$ OneToOneEntity oneToOne = getOneToOneEntity()-->Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)[ FD ]
Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)-->Line_38 $$ Assert.assertEquals(advancedEntity, ver8)[ FD ]
Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)-->Line_36 $$ advancedEntity.getDynamicConfiguration().put(AGE_USER_TYPE, new Age(19))[ FD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_9 $$ AdvancedEntity ver1 = getAuditReader().find(AdvancedEntity.class, advancedEntity.getId(), 1)[ CD ]
Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)-->Line_37 $$ AdvancedEntity ver8 = getAuditReader().find(AdvancedEntity.class, advancedEntity.getId(), 8)[ FD ]
Line_39 $$ List<Age> ages = (List<Age>) advancedEntity.getDynamicConfiguration().get(INTERNAL_LIST_OF_USER_TYPES)-->Line_40 $$ ages.add(new Age(4))[ FD ]
Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)-->Line_17 $$ AdvancedEntity ver3 = getAuditReader().find(AdvancedEntity.class, advancedEntity.getId(), 3)[ FD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_31 $$ Assert.assertEquals(advancedEntity, ver6)[ CD ]
Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)-->Line_14 $$ Assert.assertEquals(advancedEntity, ver2)[ FD ]
Line_13 $$ AdvancedEntity ver2 = getAuditReader().find(AdvancedEntity.class, advancedEntity.getId(), 2)-->Line_14 $$ Assert.assertEquals(advancedEntity, ver2)[ FD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_24 $$ ManyToManyEntity manyToManyEntity2 = new ManyToManyEntity(2L, "new value")[ CD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_18 $$ Assert.assertEquals(advancedEntity, ver3)[ CD ]
Line_2 $$ public void shouldMakeRevisions() -->Line_7 $$ ManyToManyEntity manyToManyEntity = getManyToManyEntity()[ CD ]
Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)-->Line_13 $$ AdvancedEntity ver2 = getAuditReader().find(AdvancedEntity.class, advancedEntity.getId(), 2)[ FD ]
Line_15 $$ List internalList = (List) advancedEntity.getDynamicConfiguration().get(INTERNAL_LIST)-->Line_16 $$ internalList.add("four")[ FD ]
Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)-->Line_15 $$ List internalList = (List) advancedEntity.getDynamicConfiguration().get(INTERNAL_LIST)[ FD ]
Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)-->Line_22 $$ Assert.assertEquals(advancedEntity, ver4)[ FD ]
Line_8 $$ AdvancedEntity advancedEntity = getAdvancedEntity(manyToOne, oneToOne, manyToManyEntity)-->Line_35 $$ Assert.assertEquals(advancedEntity, ver7)[ FD ]
