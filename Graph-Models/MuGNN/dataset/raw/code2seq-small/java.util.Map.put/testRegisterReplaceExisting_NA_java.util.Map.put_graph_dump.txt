Line_2 $$ public void testRegisterReplaceExisting() throws Exception -->Line_16 $$ ObjectInstance instance = server.getObjectInstance(objectName)[ CD ]
Line_2 $$ public void testRegisterReplaceExisting() throws Exception -->Line_14 $$ exporter.setRegistrationPolicy(RegistrationPolicy.REPLACE_EXISTING)[ CD ]
Line_11 $$ MBeanExporter exporter = new MBeanExporter()-->Line_13 $$ exporter.setBeans(beans)[ FD ]
Line_2 $$ public void testRegisterReplaceExisting() throws Exception -->Line_17 $$ assertNotNull(instance)[ CD ]
Line_4 $$ Person preRegistered = new Person()-->Line_5 $$ preRegistered.setName("Rob Harrop")[ FD ]
Line_2 $$ public void testRegisterReplaceExisting() throws Exception -->Line_10 $$ beans.put(objectName.toString(), springRegistered)[ CD ]
Line_2 $$ public void testRegisterReplaceExisting() throws Exception -->Line_4 $$ Person preRegistered = new Person()[ CD ]
Line_2 $$ public void testRegisterReplaceExisting() throws Exception -->Line_5 $$ preRegistered.setName("Rob Harrop")[ CD ]
Line_9 $$ Map<String, Object> beans = new HashMap<String, Object>()-->Line_13 $$ exporter.setBeans(beans)[ FD ]
Line_2 $$ public void testRegisterReplaceExisting() throws Exception -->Line_8 $$ springRegistered.setName("Sally Greenwood")[ CD ]
Line_9 $$ Map<String, Object> beans = new HashMap<String, Object>()-->Line_10 $$ beans.put(objectName.toString(), springRegistered)[ FD ]
Line_2 $$ public void testRegisterReplaceExisting() throws Exception -->Line_3 $$ ObjectName objectName = ObjectNameManager.getInstance(OBJECT_NAME)[ CD ]
Line_2 $$ public void testRegisterReplaceExisting() throws Exception -->Line_6 $$ server.registerMBean(preRegistered, objectName)[ CD ]
Line_2 $$ public void testRegisterReplaceExisting() throws Exception -->Line_12 $$ exporter.setServer(server)[ CD ]
Line_11 $$ MBeanExporter exporter = new MBeanExporter()-->Line_12 $$ exporter.setServer(server)[ FD ]
Line_7 $$ Person springRegistered = new Person()-->Line_10 $$ beans.put(objectName.toString(), springRegistered)[ FD ]
Line_7 $$ Person springRegistered = new Person()-->Line_8 $$ springRegistered.setName("Sally Greenwood")[ FD ]
Line_11 $$ MBeanExporter exporter = new MBeanExporter()-->Line_15 $$ start(exporter)[ FD ]
Line_3 $$ ObjectName objectName = ObjectNameManager.getInstance(OBJECT_NAME)-->Line_10 $$ beans.put(objectName.toString(), springRegistered)[ FD ]
Line_2 $$ public void testRegisterReplaceExisting() throws Exception -->Line_13 $$ exporter.setBeans(beans)[ CD ]
Line_2 $$ public void testRegisterReplaceExisting() throws Exception -->Line_11 $$ MBeanExporter exporter = new MBeanExporter()[ CD ]
Line_16 $$ ObjectInstance instance = server.getObjectInstance(objectName)-->Line_17 $$ assertNotNull(instance)[ FD ]
Line_2 $$ public void testRegisterReplaceExisting() throws Exception -->Line_15 $$ start(exporter)[ CD ]
Line_3 $$ ObjectName objectName = ObjectNameManager.getInstance(OBJECT_NAME)-->Line_6 $$ server.registerMBean(preRegistered, objectName)[ FD ]
Line_2 $$ public void testRegisterReplaceExisting() throws Exception -->Line_18 $$ assertEquals("Sally Greenwood", server.getAttribute(objectName, "Name"))[ CD ]
Line_2 $$ public void testRegisterReplaceExisting() throws Exception -->Line_9 $$ Map<String, Object> beans = new HashMap<String, Object>()[ CD ]
Line_3 $$ ObjectName objectName = ObjectNameManager.getInstance(OBJECT_NAME)-->Line_16 $$ ObjectInstance instance = server.getObjectInstance(objectName)[ FD ]
Line_4 $$ Person preRegistered = new Person()-->Line_6 $$ server.registerMBean(preRegistered, objectName)[ FD ]
Line_2 $$ public void testRegisterReplaceExisting() throws Exception -->Line_7 $$ Person springRegistered = new Person()[ CD ]
Line_3 $$ ObjectName objectName = ObjectNameManager.getInstance(OBJECT_NAME)-->Line_18 $$ assertEquals("Sally Greenwood", server.getAttribute(objectName, "Name"))[ FD ]
Line_11 $$ MBeanExporter exporter = new MBeanExporter()-->Line_14 $$ exporter.setRegistrationPolicy(RegistrationPolicy.REPLACE_EXISTING)[ FD ]
