Line_10 $$ ugi = UserGroupInformation.createRemoteUser(realUser, handlerAuthMethod)-->Line_13 $$ ugi = UserGroupInformation.createProxyUser(doAsUser, ugi)[ FD ]
Line_12 $$ if (doAsUser != null) -->Line_13 $$ ugi = UserGroupInformation.createProxyUser(doAsUser, ugi)[ CD ]
Line_35 $$ request = new HttpServletRequestWrapper(request) -->Line_40 $$ return (ugiF != null) ? ugiF.getShortUserName() : null[ CD ]
Line_11 $$ String doAsUser = getDoAs(request)-->Line_17 $$ String msg = String.format("User '%s' from host '%s' not allowed to impersonate user '%s'", realUser, request.getRemoteHost(), doAsUser)[ FD ]
Line_2 $$ protected void doFilter(FilterChain filterChain, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException -->Line_50 $$ super.doFilter(filterChain, request, response)[ FD ]
Line_7 $$ ugi = (UserGroupInformation) request.getAttribute(DelegationTokenAuthenticationHandler.DELEGATION_TOKEN_UGI_ATTRIBUTE)-->Line_13 $$ ugi = UserGroupInformation.createProxyUser(doAsUser, ugi)[ FD ]
Line_6 $$ if (authToken != null && authToken != AuthenticationToken.ANONYMOUS) -->Line_30 $$ UGI_TL.set(ugi)[ CD ]
Line_20 $$ Map<String, String> json = new HashMap<String, String>()-->Line_22 $$ json.put(ERROR_MESSAGE_JSON, msg)[ FD ]
Line_7 $$ ugi = (UserGroupInformation) request.getAttribute(DelegationTokenAuthenticationHandler.DELEGATION_TOKEN_UGI_ATTRIBUTE)-->Line_8 $$ if (ugi == null) [ FD ]
Line_7 $$ ugi = (UserGroupInformation) request.getAttribute(DelegationTokenAuthenticationHandler.DELEGATION_TOKEN_UGI_ATTRIBUTE)-->Line_10 $$ ugi = UserGroupInformation.createRemoteUser(realUser, handlerAuthMethod)[ FD ]
Line_13 $$ ugi = UserGroupInformation.createProxyUser(doAsUser, ugi)-->Line_30 $$ UGI_TL.set(ugi)[ FD ]
Line_2 $$ protected void doFilter(FilterChain filterChain, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException -->Line_6 $$ if (authToken != null && authToken != AuthenticationToken.ANONYMOUS) [ CD ]
Line_11 $$ String doAsUser = getDoAs(request)-->Line_12 $$ if (doAsUser != null) [ FD ]
Line_2 $$ protected void doFilter(FilterChain filterChain, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException -->Line_15 $$ ProxyUsers.authorize(ugi, request.getRemoteHost())[ FD ]
Line_3 $$ boolean requestCompleted = false-->Line_32 $$ if (!requestCompleted) [ FD ]
Line_8 $$ if (ugi == null) -->Line_10 $$ ugi = UserGroupInformation.createRemoteUser(realUser, handlerAuthMethod)[ CD ]
Line_4 $$ UserGroupInformation ugi = null-->Line_8 $$ if (ugi == null) [ FD ]
Line_4 $$ UserGroupInformation ugi = null-->Line_10 $$ ugi = UserGroupInformation.createRemoteUser(realUser, handlerAuthMethod)[ FD ]
Line_3 $$ boolean requestCompleted = false-->Line_26 $$ requestCompleted = true[ FD ]
Line_11 $$ String doAsUser = getDoAs(request)-->Line_13 $$ ugi = UserGroupInformation.createProxyUser(doAsUser, ugi)[ FD ]
Line_9 $$ String realUser = request.getUserPrincipal().getName()-->Line_10 $$ ugi = UserGroupInformation.createRemoteUser(realUser, handlerAuthMethod)[ FD ]
Line_10 $$ ugi = UserGroupInformation.createRemoteUser(realUser, handlerAuthMethod)-->Line_30 $$ UGI_TL.set(ugi)[ FD ]
Line_32 $$ if (!requestCompleted) -->Line_33 $$ final UserGroupInformation ugiF = ugi[ CD ]
Line_2 $$ protected void doFilter(FilterChain filterChain, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException -->Line_7 $$ ugi = (UserGroupInformation) request.getAttribute(DelegationTokenAuthenticationHandler.DELEGATION_TOKEN_UGI_ATTRIBUTE)[ FD ]
Line_6 $$ if (authToken != null && authToken != AuthenticationToken.ANONYMOUS) -->Line_8 $$ if (ugi == null) [ CD ]
Line_2 $$ protected void doFilter(FilterChain filterChain, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException -->Line_11 $$ String doAsUser = getDoAs(request)[ FD ]
Line_17 $$ String msg = String.format("User '%s' from host '%s' not allowed to impersonate user '%s'", realUser, request.getRemoteHost(), doAsUser)-->Line_22 $$ json.put(ERROR_MESSAGE_JSON, msg)[ FD ]
Line_26 $$ requestCompleted = true-->Line_32 $$ if (!requestCompleted) [ FD ]
Line_2 $$ protected void doFilter(FilterChain filterChain, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException -->Line_5 $$ AuthenticationToken authToken = (AuthenticationToken) request.getUserPrincipal()[ FD ]
Line_20 $$ Map<String, String> json = new HashMap<String, String>()-->Line_21 $$ json.put(ERROR_EXCEPTION_JSON, AuthorizationException.class.getName())[ FD ]
Line_2 $$ protected void doFilter(FilterChain filterChain, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException -->Line_35 $$ request = new HttpServletRequestWrapper(request) [ FD ]
Line_2 $$ protected void doFilter(FilterChain filterChain, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException -->Line_23 $$ Writer writer = response.getWriter()[ FD ]
Line_8 $$ if (ugi == null) -->Line_12 $$ if (doAsUser != null) [ CD ]
Line_4 $$ UserGroupInformation ugi = null-->Line_30 $$ UGI_TL.set(ugi)[ FD ]
Line_7 $$ ugi = (UserGroupInformation) request.getAttribute(DelegationTokenAuthenticationHandler.DELEGATION_TOKEN_UGI_ATTRIBUTE)-->Line_30 $$ UGI_TL.set(ugi)[ FD ]
Line_35 $$ request = new HttpServletRequestWrapper(request) -->Line_43 $$ return (ugiF != null) ? new Principal() [ CD ]
Line_4 $$ UserGroupInformation ugi = null-->Line_7 $$ ugi = (UserGroupInformation) request.getAttribute(DelegationTokenAuthenticationHandler.DELEGATION_TOKEN_UGI_ATTRIBUTE)[ FD ]
Line_43 $$ return (ugiF != null) ? new Principal() -->Line_45 $$ return ugiF.getUserName()[ CD ]
Line_13 $$ ugi = UserGroupInformation.createProxyUser(doAsUser, ugi)-->Line_15 $$ ProxyUsers.authorize(ugi, request.getRemoteHost())[ FD ]
Line_4 $$ UserGroupInformation ugi = null-->Line_15 $$ ProxyUsers.authorize(ugi, request.getRemoteHost())[ FD ]
Line_2 $$ protected void doFilter(FilterChain filterChain, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException -->Line_9 $$ String realUser = request.getUserPrincipal().getName()[ FD ]
Line_4 $$ UserGroupInformation ugi = null-->Line_13 $$ ugi = UserGroupInformation.createProxyUser(doAsUser, ugi)[ FD ]
Line_35 $$ request = new HttpServletRequestWrapper(request) -->Line_37 $$ return (ugiF != null) ? handlerAuthMethod.toString() : null[ CD ]
Line_8 $$ if (ugi == null) -->Line_9 $$ String realUser = request.getUserPrincipal().getName()[ CD ]
Line_23 $$ Writer writer = response.getWriter()-->Line_25 $$ jsonMapper.writeValue(writer, json)[ FD ]
Line_2 $$ protected void doFilter(FilterChain filterChain, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException -->Line_5 $$ AuthenticationToken authToken = (AuthenticationToken) request.getUserPrincipal()[ CD ]
Line_2 $$ protected void doFilter(FilterChain filterChain, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException -->Line_19 $$ response.setContentType(APPLICATION_JSON_MIME)[ FD ]
Line_10 $$ ugi = UserGroupInformation.createRemoteUser(realUser, handlerAuthMethod)-->Line_15 $$ ProxyUsers.authorize(ugi, request.getRemoteHost())[ FD ]
Line_2 $$ protected void doFilter(FilterChain filterChain, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException -->Line_18 $$ response.setStatus(HttpServletResponse.SC_FORBIDDEN)[ FD ]
Line_20 $$ Map<String, String> json = new HashMap<String, String>()-->Line_25 $$ jsonMapper.writeValue(writer, json)[ FD ]
Line_2 $$ protected void doFilter(FilterChain filterChain, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException -->Line_4 $$ UserGroupInformation ugi = null[ CD ]
Line_8 $$ if (ugi == null) -->Line_11 $$ String doAsUser = getDoAs(request)[ CD ]
Line_9 $$ String realUser = request.getUserPrincipal().getName()-->Line_17 $$ String msg = String.format("User '%s' from host '%s' not allowed to impersonate user '%s'", realUser, request.getRemoteHost(), doAsUser)[ FD ]
Line_2 $$ protected void doFilter(FilterChain filterChain, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException -->Line_17 $$ String msg = String.format("User '%s' from host '%s' not allowed to impersonate user '%s'", realUser, request.getRemoteHost(), doAsUser)[ FD ]
Line_33 $$ final UserGroupInformation ugiF = ugi-->Line_45 $$ return ugiF.getUserName()[ FD ]
Line_24 $$ ObjectMapper jsonMapper = new ObjectMapper()-->Line_25 $$ jsonMapper.writeValue(writer, json)[ FD ]
Line_35 $$ request = new HttpServletRequestWrapper(request) -->Line_50 $$ super.doFilter(filterChain, request, response)[ FD ]
Line_2 $$ protected void doFilter(FilterChain filterChain, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException -->Line_32 $$ if (!requestCompleted) [ CD ]
Line_33 $$ final UserGroupInformation ugiF = ugi-->Line_40 $$ return (ugiF != null) ? ugiF.getShortUserName() : null[ FD ]
Line_6 $$ if (authToken != null && authToken != AuthenticationToken.ANONYMOUS) -->Line_7 $$ ugi = (UserGroupInformation) request.getAttribute(DelegationTokenAuthenticationHandler.DELEGATION_TOKEN_UGI_ATTRIBUTE)[ CD ]
Line_2 $$ protected void doFilter(FilterChain filterChain, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException -->Line_3 $$ boolean requestCompleted = false[ CD ]
Line_7 $$ ugi = (UserGroupInformation) request.getAttribute(DelegationTokenAuthenticationHandler.DELEGATION_TOKEN_UGI_ATTRIBUTE)-->Line_15 $$ ProxyUsers.authorize(ugi, request.getRemoteHost())[ FD ]
