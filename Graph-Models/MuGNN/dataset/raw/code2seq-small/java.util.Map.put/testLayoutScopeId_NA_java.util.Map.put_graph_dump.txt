Line_2 $$ public void testLayoutScopeId() throws Exception -->Line_5 $$ preferenceMap.put("scopeIds", new String[] [ CD ]
Line_2 $$ public void testLayoutScopeId() throws Exception -->Line_4 $$ GroupTestUtil.addGroup(TestPropsValues.getUserId(), layout)[ CD ]
Line_2 $$ public void testLayoutScopeId() throws Exception -->Line_3 $$ Map<String, String[]> preferenceMap = new HashMap()[ CD ]
Line_3 $$ Map<String, String[]> preferenceMap = new HashMap()-->Line_6 $$ PortletPreferences portletPreferences = getImportedPortletPreferences(preferenceMap)[ FD ]
Line_6 $$ PortletPreferences portletPreferences = getImportedPortletPreferences(preferenceMap)-->Line_7 $$ Assert.assertEquals(AssetPublisherUtil.SCOPE_ID_LAYOUT_UUID_PREFIX + importedLayout.getUuid(), portletPreferences.getValue("scopeIds", null))[ FD ]
Line_6 $$ PortletPreferences portletPreferences = getImportedPortletPreferences(preferenceMap)-->Line_8 $$ Assert.assertEquals(null, portletPreferences.getValue("scopeId", null))[ FD ]
Line_3 $$ Map<String, String[]> preferenceMap = new HashMap()-->Line_5 $$ preferenceMap.put("scopeIds", new String[] [ FD ]
Line_2 $$ public void testLayoutScopeId() throws Exception -->Line_7 $$ Assert.assertEquals(AssetPublisherUtil.SCOPE_ID_LAYOUT_UUID_PREFIX + importedLayout.getUuid(), portletPreferences.getValue("scopeIds", null))[ CD ]
Line_2 $$ public void testLayoutScopeId() throws Exception -->Line_8 $$ Assert.assertEquals(null, portletPreferences.getValue("scopeId", null))[ CD ]
Line_2 $$ public void testLayoutScopeId() throws Exception -->Line_6 $$ PortletPreferences portletPreferences = getImportedPortletPreferences(preferenceMap)[ CD ]
