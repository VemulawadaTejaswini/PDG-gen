Line_7 $$ Files.walkFileTree(fromPath, new SimpleFileVisitor<Path>() -->Line_30 $$ Files.copy(dir, toPath.resolve(fromPath.relativize(dir)), StandardCopyOption.COPY_ATTRIBUTES, StandardCopyOption.REPLACE_EXISTING)[ CD ]
Line_5 $$ final Map<Path, FileTime> fileTimes = new HashMap()-->Line_31 $$ fileTimes.put(dir, Files.getLastModifiedTime(dir))[ FD ]
Line_2 $$ public static void move(final Path fromPath, final Path toPath, boolean tryAtomicMove) throws IOException -->Line_36 $$ delete(true, toPath)[ FD ]
Line_4 $$ final AtomicBoolean touched = new AtomicBoolean()-->Line_37 $$ if (touched.get()) [ FD ]
Line_3 $$ final AtomicBoolean atomicMove = new AtomicBoolean(tryAtomicMove)-->Line_17 $$ if (atomicMove.get()) [ FD ]
Line_2 $$ public static void move(final Path fromPath, final Path toPath, boolean tryAtomicMove) throws IOException -->Line_5 $$ final Map<Path, FileTime> fileTimes = new HashMap()[ CD ]
Line_7 $$ Files.walkFileTree(fromPath, new SimpleFileVisitor<Path>() -->Line_16 $$ Path toFile = toPath.resolve(fromPath.relativize(file))[ CD ]
Line_7 $$ Files.walkFileTree(fromPath, new SimpleFileVisitor<Path>() -->Line_10 $$ if (atomicMove.get()) [ CD ]
Line_4 $$ final AtomicBoolean touched = new AtomicBoolean()-->Line_20 $$ touched.set(true)[ FD ]
Line_7 $$ Files.walkFileTree(fromPath, new SimpleFileVisitor<Path>() -->Line_31 $$ fileTimes.put(dir, Files.getLastModifiedTime(dir))[ CD ]
Line_3 $$ final AtomicBoolean atomicMove = new AtomicBoolean(tryAtomicMove)-->Line_23 $$ atomicMove.set(false)[ FD ]
Line_2 $$ public static void move(final Path fromPath, final Path toPath, boolean tryAtomicMove) throws IOException -->Line_7 $$ Files.walkFileTree(fromPath, new SimpleFileVisitor<Path>() [ FD ]
Line_7 $$ Files.walkFileTree(fromPath, new SimpleFileVisitor<Path>() -->Line_11 $$ Files.delete(dir)[ FD ]
Line_7 $$ Files.walkFileTree(fromPath, new SimpleFileVisitor<Path>() -->Line_17 $$ if (atomicMove.get()) [ CD ]
Line_7 $$ Files.walkFileTree(fromPath, new SimpleFileVisitor<Path>() -->Line_30 $$ Files.copy(dir, toPath.resolve(fromPath.relativize(dir)), StandardCopyOption.COPY_ATTRIBUTES, StandardCopyOption.REPLACE_EXISTING)[ FD ]
Line_2 $$ public static void move(final Path fromPath, final Path toPath, boolean tryAtomicMove) throws IOException -->Line_16 $$ Path toFile = toPath.resolve(fromPath.relativize(file))[ FD ]
Line_16 $$ Path toFile = toPath.resolve(fromPath.relativize(file))-->Line_26 $$ Files.copy(file, toFile, StandardCopyOption.COPY_ATTRIBUTES, StandardCopyOption.REPLACE_EXISTING)[ FD ]
Line_7 $$ Files.walkFileTree(fromPath, new SimpleFileVisitor<Path>() -->Line_32 $$ return FileVisitResult.CONTINUE[ CD ]
Line_2 $$ public static void move(final Path fromPath, final Path toPath, boolean tryAtomicMove) throws IOException -->Line_43 $$ delete(false, fromPath)[ FD ]
Line_16 $$ Path toFile = toPath.resolve(fromPath.relativize(file))-->Line_19 $$ Files.move(file, toFile, StandardCopyOption.ATOMIC_MOVE, StandardCopyOption.REPLACE_EXISTING)[ FD ]
Line_3 $$ final AtomicBoolean atomicMove = new AtomicBoolean(tryAtomicMove)-->Line_10 $$ if (atomicMove.get()) [ FD ]
Line_7 $$ Files.walkFileTree(fromPath, new SimpleFileVisitor<Path>() -->Line_31 $$ fileTimes.put(dir, Files.getLastModifiedTime(dir))[ FD ]
Line_7 $$ Files.walkFileTree(fromPath, new SimpleFileVisitor<Path>() -->Line_9 $$ Files.setLastModifiedTime(toPath.resolve(fromPath.relativize(dir)), fileTimes.remove(dir))[ CD ]
Line_2 $$ public static void move(final Path fromPath, final Path toPath, boolean tryAtomicMove) throws IOException -->Line_9 $$ Files.setLastModifiedTime(toPath.resolve(fromPath.relativize(dir)), fileTimes.remove(dir))[ FD ]
Line_2 $$ public static void move(final Path fromPath, final Path toPath, boolean tryAtomicMove) throws IOException -->Line_42 $$ if (!atomicMove.get()) [ CD ]
Line_7 $$ Files.walkFileTree(fromPath, new SimpleFileVisitor<Path>() -->Line_19 $$ Files.move(file, toFile, StandardCopyOption.ATOMIC_MOVE, StandardCopyOption.REPLACE_EXISTING)[ FD ]
Line_7 $$ Files.walkFileTree(fromPath, new SimpleFileVisitor<Path>() -->Line_26 $$ Files.copy(file, toFile, StandardCopyOption.COPY_ATTRIBUTES, StandardCopyOption.REPLACE_EXISTING)[ FD ]
Line_2 $$ public static void move(final Path fromPath, final Path toPath, boolean tryAtomicMove) throws IOException -->Line_30 $$ Files.copy(dir, toPath.resolve(fromPath.relativize(dir)), StandardCopyOption.COPY_ATTRIBUTES, StandardCopyOption.REPLACE_EXISTING)[ FD ]
Line_7 $$ Files.walkFileTree(fromPath, new SimpleFileVisitor<Path>() -->Line_9 $$ Files.setLastModifiedTime(toPath.resolve(fromPath.relativize(dir)), fileTimes.remove(dir))[ FD ]
Line_7 $$ Files.walkFileTree(fromPath, new SimpleFileVisitor<Path>() -->Line_13 $$ return FileVisitResult.CONTINUE[ CD ]
Line_7 $$ Files.walkFileTree(fromPath, new SimpleFileVisitor<Path>() -->Line_26 $$ Files.copy(file, toFile, StandardCopyOption.COPY_ATTRIBUTES, StandardCopyOption.REPLACE_EXISTING)[ CD ]
Line_2 $$ public static void move(final Path fromPath, final Path toPath, boolean tryAtomicMove) throws IOException -->Line_3 $$ final AtomicBoolean atomicMove = new AtomicBoolean(tryAtomicMove)[ CD ]
Line_7 $$ Files.walkFileTree(fromPath, new SimpleFileVisitor<Path>() -->Line_16 $$ Path toFile = toPath.resolve(fromPath.relativize(file))[ FD ]
Line_7 $$ Files.walkFileTree(fromPath, new SimpleFileVisitor<Path>() -->Line_27 $$ return FileVisitResult.CONTINUE[ CD ]
Line_5 $$ final Map<Path, FileTime> fileTimes = new HashMap()-->Line_9 $$ Files.setLastModifiedTime(toPath.resolve(fromPath.relativize(dir)), fileTimes.remove(dir))[ FD ]
Line_3 $$ final AtomicBoolean atomicMove = new AtomicBoolean(tryAtomicMove)-->Line_42 $$ if (!atomicMove.get()) [ FD ]
Line_42 $$ if (!atomicMove.get()) -->Line_43 $$ delete(false, fromPath)[ CD ]
Line_10 $$ if (atomicMove.get()) -->Line_11 $$ Files.delete(dir)[ CD ]
Line_2 $$ public static void move(final Path fromPath, final Path toPath, boolean tryAtomicMove) throws IOException -->Line_4 $$ final AtomicBoolean touched = new AtomicBoolean()[ CD ]
