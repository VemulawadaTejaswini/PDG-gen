Line_5 $$ Map<String, Object> obj1 = MapBuilder.<String, Object>newMapBuilder().put("prop1", "value1").put("obj2", obj2).map()-->Line_6 $$ vars.put("l", Arrays.asList("1", "2", "3", obj1))[ FD ]
Line_3 $$ Map<String, Object> vars = new HashMap<String, Object>()-->Line_7 $$ Object o = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testAccessInScript", "js", se.compile("l.length", Collections.emptyMap())), vars).run()[ FD ]
Line_2 $$ public void testAccessListInScript() -->Line_3 $$ Map<String, Object> vars = new HashMap<String, Object>()[ CD ]
Line_2 $$ public void testAccessListInScript() -->Line_7 $$ Object o = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testAccessInScript", "js", se.compile("l.length", Collections.emptyMap())), vars).run()[ CD ]
Line_2 $$ public void testAccessListInScript() -->Line_10 $$ assertThat(((String) o), equalTo("1"))[ CD ]
Line_2 $$ public void testAccessListInScript() -->Line_15 $$ o = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testAccessInScript", "js", se.compile("l[3].prop1", Collections.emptyMap())), vars).run()[ CD ]
Line_3 $$ Map<String, Object> vars = new HashMap<String, Object>()-->Line_6 $$ vars.put("l", Arrays.asList("1", "2", "3", obj1))[ FD ]
Line_2 $$ public void testAccessListInScript() -->Line_6 $$ vars.put("l", Arrays.asList("1", "2", "3", obj1))[ CD ]
Line_11 $$ o = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testAccessInScript", "js", se.compile("l[3]", Collections.emptyMap())), vars).run()-->Line_15 $$ o = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testAccessInScript", "js", se.compile("l[3].prop1", Collections.emptyMap())), vars).run()[ FD ]
Line_2 $$ public void testAccessListInScript() -->Line_9 $$ o = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testAccessInScript", "js", se.compile("l[0]", Collections.emptyMap())), vars).run()[ CD ]
Line_4 $$ Map<String, Object> obj2 = MapBuilder.<String, Object>newMapBuilder().put("prop2", "value2").map()-->Line_5 $$ Map<String, Object> obj1 = MapBuilder.<String, Object>newMapBuilder().put("prop1", "value1").put("obj2", obj2).map()[ FD ]
Line_3 $$ Map<String, Object> vars = new HashMap<String, Object>()-->Line_9 $$ o = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testAccessInScript", "js", se.compile("l[0]", Collections.emptyMap())), vars).run()[ FD ]
Line_12 $$ obj1 = (Map<String, Object>) o-->Line_13 $$ assertThat((String) obj1.get("prop1"), equalTo("value1"))[ FD ]
Line_9 $$ o = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testAccessInScript", "js", se.compile("l[0]", Collections.emptyMap())), vars).run()-->Line_11 $$ o = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testAccessInScript", "js", se.compile("l[3]", Collections.emptyMap())), vars).run()[ FD ]
Line_2 $$ public void testAccessListInScript() -->Line_11 $$ o = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testAccessInScript", "js", se.compile("l[3]", Collections.emptyMap())), vars).run()[ CD ]
Line_2 $$ public void testAccessListInScript() -->Line_5 $$ Map<String, Object> obj1 = MapBuilder.<String, Object>newMapBuilder().put("prop1", "value1").put("obj2", obj2).map()[ CD ]
Line_3 $$ Map<String, Object> vars = new HashMap<String, Object>()-->Line_15 $$ o = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testAccessInScript", "js", se.compile("l[3].prop1", Collections.emptyMap())), vars).run()[ FD ]
Line_2 $$ public void testAccessListInScript() -->Line_8 $$ assertThat(((Number) o).intValue(), equalTo(4))[ CD ]
Line_5 $$ Map<String, Object> obj1 = MapBuilder.<String, Object>newMapBuilder().put("prop1", "value1").put("obj2", obj2).map()-->Line_12 $$ obj1 = (Map<String, Object>) o[ FD ]
Line_5 $$ Map<String, Object> obj1 = MapBuilder.<String, Object>newMapBuilder().put("prop1", "value1").put("obj2", obj2).map()-->Line_14 $$ assertThat((String) ((Map<String, Object>) obj1.get("obj2")).get("prop2"), equalTo("value2"))[ FD ]
Line_2 $$ public void testAccessListInScript() -->Line_16 $$ assertThat(((String) o), equalTo("value1"))[ CD ]
Line_12 $$ obj1 = (Map<String, Object>) o-->Line_14 $$ assertThat((String) ((Map<String, Object>) obj1.get("obj2")).get("prop2"), equalTo("value2"))[ FD ]
Line_2 $$ public void testAccessListInScript() -->Line_14 $$ assertThat((String) ((Map<String, Object>) obj1.get("obj2")).get("prop2"), equalTo("value2"))[ CD ]
Line_3 $$ Map<String, Object> vars = new HashMap<String, Object>()-->Line_11 $$ o = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testAccessInScript", "js", se.compile("l[3]", Collections.emptyMap())), vars).run()[ FD ]
Line_5 $$ Map<String, Object> obj1 = MapBuilder.<String, Object>newMapBuilder().put("prop1", "value1").put("obj2", obj2).map()-->Line_13 $$ assertThat((String) obj1.get("prop1"), equalTo("value1"))[ FD ]
Line_2 $$ public void testAccessListInScript() -->Line_4 $$ Map<String, Object> obj2 = MapBuilder.<String, Object>newMapBuilder().put("prop2", "value2").map()[ CD ]
Line_7 $$ Object o = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testAccessInScript", "js", se.compile("l.length", Collections.emptyMap())), vars).run()-->Line_11 $$ o = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testAccessInScript", "js", se.compile("l[3]", Collections.emptyMap())), vars).run()[ FD ]
Line_7 $$ Object o = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testAccessInScript", "js", se.compile("l.length", Collections.emptyMap())), vars).run()-->Line_9 $$ o = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testAccessInScript", "js", se.compile("l[0]", Collections.emptyMap())), vars).run()[ FD ]
Line_9 $$ o = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testAccessInScript", "js", se.compile("l[0]", Collections.emptyMap())), vars).run()-->Line_15 $$ o = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testAccessInScript", "js", se.compile("l[3].prop1", Collections.emptyMap())), vars).run()[ FD ]
Line_2 $$ public void testAccessListInScript() -->Line_13 $$ assertThat((String) obj1.get("prop1"), equalTo("value1"))[ CD ]
Line_7 $$ Object o = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testAccessInScript", "js", se.compile("l.length", Collections.emptyMap())), vars).run()-->Line_15 $$ o = se.executable(new CompiledScript(ScriptService.ScriptType.INLINE, "testAccessInScript", "js", se.compile("l[3].prop1", Collections.emptyMap())), vars).run()[ FD ]
Line_2 $$ public void testAccessListInScript() -->Line_12 $$ obj1 = (Map<String, Object>) o[ CD ]
