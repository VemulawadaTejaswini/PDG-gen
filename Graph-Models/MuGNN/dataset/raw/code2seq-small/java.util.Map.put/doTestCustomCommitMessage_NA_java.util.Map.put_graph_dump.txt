Line_2 $$ private void doTestCustomCommitMessage(@NotNull String subject, @NotNull String expectedSubject) -->Line_10 $$ assertEquals(records.get(0).getSubject(), expectedSubject)[ CD ]
Line_2 $$ private void doTestCustomCommitMessage(@NotNull String subject, @NotNull String expectedSubject) -->Line_3 $$ Map<GitTestLogRecordInfo, Object> data = ContainerUtil.newHashMap(myRecord.myData)[ CD ]
Line_2 $$ private void doTestCustomCommitMessage(@NotNull String subject, @NotNull String expectedSubject) -->Line_9 $$ assertEquals("Incorrect amount of actual records: " + StringUtil.join(records, "\n"), 1, records.size())[ CD ]
Line_8 $$ List<GitLogRecord> records = myParser.parse(s)-->Line_9 $$ assertEquals("Incorrect amount of actual records: " + StringUtil.join(records, "\n"), 1, records.size())[ FD ]
Line_8 $$ List<GitLogRecord> records = myParser.parse(s)-->Line_10 $$ assertEquals(records.get(0).getSubject(), expectedSubject)[ FD ]
Line_3 $$ Map<GitTestLogRecordInfo, Object> data = ContainerUtil.newHashMap(myRecord.myData)-->Line_4 $$ data.put(GitTestLogRecordInfo.SUBJECT, subject)[ FD ]
Line_2 $$ private void doTestCustomCommitMessage(@NotNull String subject, @NotNull String expectedSubject) -->Line_4 $$ data.put(GitTestLogRecordInfo.SUBJECT, subject)[ CD ]
Line_7 $$ String s = myRecord.prepareOutputLine(NONE)-->Line_8 $$ List<GitLogRecord> records = myParser.parse(s)[ FD ]
Line_2 $$ private void doTestCustomCommitMessage(@NotNull String subject, @NotNull String expectedSubject) -->Line_7 $$ String s = myRecord.prepareOutputLine(NONE)[ CD ]
Line_2 $$ private void doTestCustomCommitMessage(@NotNull String subject, @NotNull String expectedSubject) -->Line_4 $$ data.put(GitTestLogRecordInfo.SUBJECT, subject)[ FD ]
Line_2 $$ private void doTestCustomCommitMessage(@NotNull String subject, @NotNull String expectedSubject) -->Line_10 $$ assertEquals(records.get(0).getSubject(), expectedSubject)[ FD ]
Line_2 $$ private void doTestCustomCommitMessage(@NotNull String subject, @NotNull String expectedSubject) -->Line_8 $$ List<GitLogRecord> records = myParser.parse(s)[ CD ]
