Line_2 $$ public List<org.jgroups.conf.ProtocolConfiguration> getProtocolStack() -->Line_8 $$ SocketBinding binding = transport.getSocketBinding()[ CD ]
Line_4 $$ TransportConfiguration transport = this.configuration.getTransport()-->Line_14 $$ SocketBinding diagnosticsSocketBinding = transport.getDiagnosticsSocketBinding()[ FD ]
Line_7 $$ Introspector introspector = new Introspector(protocol)-->Line_18 $$ configureMulticastSocket(introspector, protocol, "diagnostics_addr", "diagnostics_port", diagnosticsSocketBinding)[ FD ]
Line_5 $$ org.jgroups.conf.ProtocolConfiguration protocol = createProtocol(this.configuration, transport)-->Line_11 $$ configureServerSocket(introspector, protocol, "bind_port", binding)[ FD ]
Line_2 $$ public List<org.jgroups.conf.ProtocolConfiguration> getProtocolStack() -->Line_21 $$ final Class<? extends TP> transportClass = introspector.getProtocolClass().asSubclass(TP.class)[ CD ]
Line_6 $$ Map<String, String> properties = protocol.getProperties()-->Line_16 $$ properties.put("enable_diagnostics", String.valueOf(diagnostics))[ FD ]
Line_2 $$ public List<org.jgroups.conf.ProtocolConfiguration> getProtocolStack() -->Line_17 $$ if (diagnostics) [ CD ]
Line_7 $$ Introspector introspector = new Introspector(protocol)-->Line_21 $$ final Class<? extends TP> transportClass = introspector.getProtocolClass().asSubclass(TP.class)[ FD ]
Line_21 $$ final Class<? extends TP> transportClass = introspector.getProtocolClass().asSubclass(TP.class)-->Line_24 $$ return transportClass.newInstance()[ FD ]
Line_9 $$ if (binding != null) -->Line_12 $$ configureMulticastSocket(introspector, protocol, "mcast_addr", "mcast_port", binding)[ CD ]
Line_5 $$ org.jgroups.conf.ProtocolConfiguration protocol = createProtocol(this.configuration, transport)-->Line_12 $$ configureMulticastSocket(introspector, protocol, "mcast_addr", "mcast_port", binding)[ FD ]
Line_22 $$ PrivilegedExceptionAction<TP> action = new PrivilegedExceptionAction<TP>() -->Line_28 $$ stack.addAll(createProtocols(this.configuration, WildFlySecurityManager.doChecked(action).isMulticastCapable()))[ FD ]
Line_5 $$ org.jgroups.conf.ProtocolConfiguration protocol = createProtocol(this.configuration, transport)-->Line_10 $$ configureBindAddress(introspector, protocol, binding)[ FD ]
Line_15 $$ boolean diagnostics = (diagnosticsSocketBinding != null)-->Line_16 $$ properties.put("enable_diagnostics", String.valueOf(diagnostics))[ FD ]
Line_2 $$ public List<org.jgroups.conf.ProtocolConfiguration> getProtocolStack() -->Line_20 $$ stack.add(protocol)[ CD ]
Line_2 $$ public List<org.jgroups.conf.ProtocolConfiguration> getProtocolStack() -->Line_6 $$ Map<String, String> properties = protocol.getProperties()[ CD ]
Line_2 $$ public List<org.jgroups.conf.ProtocolConfiguration> getProtocolStack() -->Line_22 $$ PrivilegedExceptionAction<TP> action = new PrivilegedExceptionAction<TP>() [ CD ]
Line_22 $$ PrivilegedExceptionAction<TP> action = new PrivilegedExceptionAction<TP>() -->Line_24 $$ return transportClass.newInstance()[ CD ]
Line_7 $$ Introspector introspector = new Introspector(protocol)-->Line_12 $$ configureMulticastSocket(introspector, protocol, "mcast_addr", "mcast_port", binding)[ FD ]
Line_7 $$ Introspector introspector = new Introspector(protocol)-->Line_11 $$ configureServerSocket(introspector, protocol, "bind_port", binding)[ FD ]
Line_14 $$ SocketBinding diagnosticsSocketBinding = transport.getDiagnosticsSocketBinding()-->Line_18 $$ configureMulticastSocket(introspector, protocol, "diagnostics_addr", "diagnostics_port", diagnosticsSocketBinding)[ FD ]
Line_3 $$ List<org.jgroups.conf.ProtocolConfiguration> stack = new ArrayList(this.configuration.getProtocols().size() + 1)-->Line_28 $$ stack.addAll(createProtocols(this.configuration, WildFlySecurityManager.doChecked(action).isMulticastCapable()))[ FD ]
Line_3 $$ List<org.jgroups.conf.ProtocolConfiguration> stack = new ArrayList(this.configuration.getProtocols().size() + 1)-->Line_20 $$ stack.add(protocol)[ FD ]
Line_2 $$ public List<org.jgroups.conf.ProtocolConfiguration> getProtocolStack() -->Line_32 $$ return stack[ CD ]
Line_2 $$ public List<org.jgroups.conf.ProtocolConfiguration> getProtocolStack() -->Line_5 $$ org.jgroups.conf.ProtocolConfiguration protocol = createProtocol(this.configuration, transport)[ CD ]
Line_2 $$ public List<org.jgroups.conf.ProtocolConfiguration> getProtocolStack() -->Line_3 $$ List<org.jgroups.conf.ProtocolConfiguration> stack = new ArrayList(this.configuration.getProtocols().size() + 1)[ CD ]
Line_2 $$ public List<org.jgroups.conf.ProtocolConfiguration> getProtocolStack() -->Line_15 $$ boolean diagnostics = (diagnosticsSocketBinding != null)[ CD ]
Line_8 $$ SocketBinding binding = transport.getSocketBinding()-->Line_12 $$ configureMulticastSocket(introspector, protocol, "mcast_addr", "mcast_port", binding)[ FD ]
Line_4 $$ TransportConfiguration transport = this.configuration.getTransport()-->Line_5 $$ org.jgroups.conf.ProtocolConfiguration protocol = createProtocol(this.configuration, transport)[ FD ]
Line_2 $$ public List<org.jgroups.conf.ProtocolConfiguration> getProtocolStack() -->Line_9 $$ if (binding != null) [ CD ]
Line_8 $$ SocketBinding binding = transport.getSocketBinding()-->Line_9 $$ if (binding != null) [ FD ]
Line_8 $$ SocketBinding binding = transport.getSocketBinding()-->Line_11 $$ configureServerSocket(introspector, protocol, "bind_port", binding)[ FD ]
Line_17 $$ if (diagnostics) -->Line_18 $$ configureMulticastSocket(introspector, protocol, "diagnostics_addr", "diagnostics_port", diagnosticsSocketBinding)[ CD ]
Line_7 $$ Introspector introspector = new Introspector(protocol)-->Line_10 $$ configureBindAddress(introspector, protocol, binding)[ FD ]
Line_8 $$ SocketBinding binding = transport.getSocketBinding()-->Line_10 $$ configureBindAddress(introspector, protocol, binding)[ FD ]
Line_9 $$ if (binding != null) -->Line_11 $$ configureServerSocket(introspector, protocol, "bind_port", binding)[ CD ]
Line_2 $$ public List<org.jgroups.conf.ProtocolConfiguration> getProtocolStack() -->Line_7 $$ Introspector introspector = new Introspector(protocol)[ CD ]
Line_2 $$ public List<org.jgroups.conf.ProtocolConfiguration> getProtocolStack() -->Line_14 $$ SocketBinding diagnosticsSocketBinding = transport.getDiagnosticsSocketBinding()[ CD ]
Line_2 $$ public List<org.jgroups.conf.ProtocolConfiguration> getProtocolStack() -->Line_4 $$ TransportConfiguration transport = this.configuration.getTransport()[ CD ]
Line_2 $$ public List<org.jgroups.conf.ProtocolConfiguration> getProtocolStack() -->Line_16 $$ properties.put("enable_diagnostics", String.valueOf(diagnostics))[ CD ]
Line_5 $$ org.jgroups.conf.ProtocolConfiguration protocol = createProtocol(this.configuration, transport)-->Line_18 $$ configureMulticastSocket(introspector, protocol, "diagnostics_addr", "diagnostics_port", diagnosticsSocketBinding)[ FD ]
Line_9 $$ if (binding != null) -->Line_10 $$ configureBindAddress(introspector, protocol, binding)[ CD ]
Line_5 $$ org.jgroups.conf.ProtocolConfiguration protocol = createProtocol(this.configuration, transport)-->Line_20 $$ stack.add(protocol)[ FD ]
Line_5 $$ org.jgroups.conf.ProtocolConfiguration protocol = createProtocol(this.configuration, transport)-->Line_6 $$ Map<String, String> properties = protocol.getProperties()[ FD ]
Line_4 $$ TransportConfiguration transport = this.configuration.getTransport()-->Line_8 $$ SocketBinding binding = transport.getSocketBinding()[ FD ]
