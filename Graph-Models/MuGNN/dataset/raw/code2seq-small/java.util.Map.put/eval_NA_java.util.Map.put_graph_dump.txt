Line_12 $$ String key = entry.getKey()-->Line_14 $$ ScriptableObject.putProperty(scriptable, key, Context.javaToJS(value, scriptable))[ FD ]
Line_7 $$ if (ArrayUtil.isNotEmpty(classLoaders)) -->Line_8 $$ ClassLoader aggregateClassLoader = AggregateClassLoader.getAggregateClassLoader(PortalClassLoaderUtil.getClassLoader(), classLoaders)[ CD ]
Line_8 $$ ClassLoader aggregateClassLoader = AggregateClassLoader.getAggregateClassLoader(PortalClassLoaderUtil.getClassLoader(), classLoaders)-->Line_9 $$ context.setApplicationClassLoader(aggregateClassLoader)[ FD ]
Line_2 $$ public Map<String, Object> eval(Set<String> allowedClasses, Map<String, Object> inputObjects, Set<String> outputNames, String script, ClassLoader... classLoaders) throws ScriptingException -->Line_3 $$ Script compiledScript = getCompiledScript(script, classLoaders)[ CD ]
Line_11 $$ for (Map.Entry<String, Object> entry : inputObjects.entrySet()) -->Line_13 $$ Object value = entry.getValue()[ FD ]
Line_2 $$ public Map<String, Object> eval(Set<String> allowedClasses, Map<String, Object> inputObjects, Set<String> outputNames, String script, ClassLoader... classLoaders) throws ScriptingException -->Line_16 $$ if (allowedClasses != null) [ FD ]
Line_6 $$ Scriptable scriptable = context.initStandardObjects()-->Line_25 $$ Object property = ScriptableObject.getProperty(scriptable, outputName)[ FD ]
Line_26 $$ if (property instanceof Wrapper) -->Line_28 $$ property = wrapper.unwrap()[ CD ]
Line_7 $$ if (ArrayUtil.isNotEmpty(classLoaders)) -->Line_9 $$ context.setApplicationClassLoader(aggregateClassLoader)[ CD ]
Line_2 $$ public Map<String, Object> eval(Set<String> allowedClasses, Map<String, Object> inputObjects, Set<String> outputNames, String script, ClassLoader... classLoaders) throws ScriptingException -->Line_11 $$ for (Map.Entry<String, Object> entry : inputObjects.entrySet()) [ FD ]
Line_26 $$ if (property instanceof Wrapper) -->Line_27 $$ Wrapper wrapper = (Wrapper) property[ CD ]
Line_25 $$ Object property = ScriptableObject.getProperty(scriptable, outputName)-->Line_28 $$ property = wrapper.unwrap()[ FD ]
Line_25 $$ Object property = ScriptableObject.getProperty(scriptable, outputName)-->Line_30 $$ outputObjects.put(outputName, property)[ FD ]
Line_23 $$ Map<String, Object> outputObjects = new HashMap()-->Line_30 $$ outputObjects.put(outputName, property)[ FD ]
Line_2 $$ public Map<String, Object> eval(Set<String> allowedClasses, Map<String, Object> inputObjects, Set<String> outputNames, String script, ClassLoader... classLoaders) throws ScriptingException -->Line_3 $$ Script compiledScript = getCompiledScript(script, classLoaders)[ FD ]
Line_2 $$ public Map<String, Object> eval(Set<String> allowedClasses, Map<String, Object> inputObjects, Set<String> outputNames, String script, ClassLoader... classLoaders) throws ScriptingException -->Line_8 $$ ClassLoader aggregateClassLoader = AggregateClassLoader.getAggregateClassLoader(PortalClassLoaderUtil.getClassLoader(), classLoaders)[ FD ]
Line_5 $$ Context context = Context.enter()-->Line_17 $$ context.setClassShutter(new JavaScriptClassVisibilityChecker(allowedClasses, _forbiddenClassNames))[ FD ]
Line_27 $$ Wrapper wrapper = (Wrapper) property-->Line_28 $$ property = wrapper.unwrap()[ FD ]
Line_6 $$ Scriptable scriptable = context.initStandardObjects()-->Line_14 $$ ScriptableObject.putProperty(scriptable, key, Context.javaToJS(value, scriptable))[ FD ]
Line_16 $$ if (allowedClasses != null) -->Line_17 $$ context.setClassShutter(new JavaScriptClassVisibilityChecker(allowedClasses, _forbiddenClassNames))[ CD ]
Line_13 $$ Object value = entry.getValue()-->Line_14 $$ ScriptableObject.putProperty(scriptable, key, Context.javaToJS(value, scriptable))[ FD ]
Line_3 $$ Script compiledScript = getCompiledScript(script, classLoaders)-->Line_19 $$ compiledScript.exec(context, scriptable)[ FD ]
Line_6 $$ Scriptable scriptable = context.initStandardObjects()-->Line_19 $$ compiledScript.exec(context, scriptable)[ FD ]
Line_5 $$ Context context = Context.enter()-->Line_9 $$ context.setApplicationClassLoader(aggregateClassLoader)[ FD ]
Line_2 $$ public Map<String, Object> eval(Set<String> allowedClasses, Map<String, Object> inputObjects, Set<String> outputNames, String script, ClassLoader... classLoaders) throws ScriptingException -->Line_7 $$ if (ArrayUtil.isNotEmpty(classLoaders)) [ FD ]
Line_2 $$ public Map<String, Object> eval(Set<String> allowedClasses, Map<String, Object> inputObjects, Set<String> outputNames, String script, ClassLoader... classLoaders) throws ScriptingException -->Line_20 $$ if (outputNames == null) [ FD ]
Line_25 $$ Object property = ScriptableObject.getProperty(scriptable, outputName)-->Line_26 $$ if (property instanceof Wrapper) [ FD ]
Line_24 $$ for (String outputName : outputNames) -->Line_30 $$ outputObjects.put(outputName, property)[ FD ]
Line_24 $$ for (String outputName : outputNames) -->Line_25 $$ Object property = ScriptableObject.getProperty(scriptable, outputName)[ FD ]
Line_20 $$ if (outputNames == null) -->Line_21 $$ return null[ CD ]
Line_28 $$ property = wrapper.unwrap()-->Line_30 $$ outputObjects.put(outputName, property)[ FD ]
Line_5 $$ Context context = Context.enter()-->Line_19 $$ compiledScript.exec(context, scriptable)[ FD ]
Line_5 $$ Context context = Context.enter()-->Line_6 $$ Scriptable scriptable = context.initStandardObjects()[ FD ]
Line_11 $$ for (Map.Entry<String, Object> entry : inputObjects.entrySet()) -->Line_12 $$ String key = entry.getKey()[ FD ]
