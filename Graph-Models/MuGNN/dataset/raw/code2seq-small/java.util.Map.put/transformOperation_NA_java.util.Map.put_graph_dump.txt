Line_18 $$ if (initialValue.equals(newValue) || (initialValue.isDefined() && initialValue.asPropertyList().isEmpty() && !newValue.isDefined())) -->Line_19 $$ return new TransformedOperation(null, DEFAULT_REJECTION_POLICY, SUCCESSFUL_RESULT)[ CD ]
Line_3 $$ if (operation.get(NAME).asString().equals(PROPERTIES)) -->Line_12 $$ undoAliases.put("STRING_KEYED_JDBC_STORE", "string-jdbc")[ CD ]
Line_6 $$ Map<String, String> undoAliases = new HashMap()-->Line_11 $$ undoAliases.put("REMOTE_STORE", "remote")[ FD ]
Line_3 $$ if (operation.get(NAME).asString().equals(PROPERTIES)) -->Line_6 $$ Map<String, String> undoAliases = new HashMap()[ CD ]
Line_3 $$ if (operation.get(NAME).asString().equals(PROPERTIES)) -->Line_54 $$ return new TransformedOperation(composite, OperationResultTransformer.ORIGINAL_RESULT)[ CD ]
Line_17 $$ ModelNode newValue = context.readResourceFromRoot(address).getModel().get(PROPERTIES).clone()-->Line_32 $$ for (Property property : newValue.asPropertyList()) [ FD ]
Line_36 $$ ModelNode addOp = Util.createAddOperation(legacyAddress.append(PathElement.pathElement(PROPERTY, key)))-->Line_38 $$ composite.get(STEPS).add(addOp)[ FD ]
Line_3 $$ if (operation.get(NAME).asString().equals(PROPERTIES)) -->Line_21 $$ final Map<String, ModelNode> oldMap = new HashMap()[ CD ]
Line_3 $$ if (operation.get(NAME).asString().equals(PROPERTIES)) -->Line_10 $$ undoAliases.put("MIXED_KEYED_JDBC_STORE", "mixed-jdbc")[ CD ]
Line_35 $$ if (!oldMap.containsKey(key)) -->Line_37 $$ addOp.get(VALUE).set(value)[ CD ]
Line_27 $$ final PathAddress legacyAddress = Operations.getPathAddress(operation)-->Line_42 $$ ModelNode writeOp = Util.getWriteAttributeOperation(legacyAddress.append(PathElement.pathElement(PROPERTY, key)), VALUE, value)[ FD ]
Line_3 $$ if (operation.get(NAME).asString().equals(PROPERTIES)) -->Line_11 $$ undoAliases.put("REMOTE_STORE", "remote")[ CD ]
Line_6 $$ Map<String, String> undoAliases = new HashMap()-->Line_8 $$ undoAliases.put("STORE", "custom")[ FD ]
Line_6 $$ Map<String, String> undoAliases = new HashMap()-->Line_14 $$ address = address.subAddress(0, address.size() - 1).append("store", undoAliases.get(address.getLastElement().getValue()))[ FD ]
Line_3 $$ if (operation.get(NAME).asString().equals(PROPERTIES)) -->Line_4 $$ InitialAttributeValueOperationContextAttachment attachment = context.getAttachment(InitialAttributeValueOperationContextAttachment.INITIAL_VALUES_ATTACHMENT)[ CD ]
Line_2 $$ public TransformedOperation transformOperation(TransformationContext context, PathAddress address, ModelNode operation) throws OperationFailedException -->Line_3 $$ if (operation.get(NAME).asString().equals(PROPERTIES)) [ FD ]
Line_35 $$ if (!oldMap.containsKey(key)) -->Line_41 $$ if (!oldPropValue.equals(value)) [ CD ]
Line_34 $$ ModelNode value = property.getValue()-->Line_37 $$ addOp.get(VALUE).set(value)[ FD ]
Line_3 $$ if (operation.get(NAME).asString().equals(PROPERTIES)) -->Line_22 $$ if (initialValue.isDefined()) [ CD ]
Line_28 $$ final ModelNode composite = new ModelNode()-->Line_29 $$ composite.get(OP).set(COMPOSITE)[ FD ]
Line_28 $$ final ModelNode composite = new ModelNode()-->Line_30 $$ composite.get(OP_ADDR).setEmptyList()[ FD ]
Line_3 $$ if (operation.get(NAME).asString().equals(PROPERTIES)) -->Line_9 $$ undoAliases.put("FILE_STORE", "file")[ CD ]
Line_33 $$ String key = property.getName()-->Line_42 $$ ModelNode writeOp = Util.getWriteAttributeOperation(legacyAddress.append(PathElement.pathElement(PROPERTY, key)), VALUE, value)[ FD ]
Line_21 $$ final Map<String, ModelNode> oldMap = new HashMap()-->Line_45 $$ oldMap.remove(key)[ FD ]
Line_33 $$ String key = property.getName()-->Line_35 $$ if (!oldMap.containsKey(key)) [ FD ]
Line_3 $$ if (operation.get(NAME).asString().equals(PROPERTIES)) -->Line_16 $$ ModelNode initialValue = attachment.getInitialValue(address, Operations.getAttributeName(operation))[ CD ]
Line_27 $$ final PathAddress legacyAddress = Operations.getPathAddress(operation)-->Line_50 $$ ModelNode removeOperation = Util.createRemoveOperation(legacyAddress.append(PathElement.pathElement(PROPERTY, prop.getKey())))[ FD ]
Line_6 $$ Map<String, String> undoAliases = new HashMap()-->Line_10 $$ undoAliases.put("MIXED_KEYED_JDBC_STORE", "mixed-jdbc")[ FD ]
Line_49 $$ for (Map.Entry<String, ModelNode> prop : oldMap.entrySet()) -->Line_50 $$ ModelNode removeOperation = Util.createRemoveOperation(legacyAddress.append(PathElement.pathElement(PROPERTY, prop.getKey())))[ FD ]
Line_2 $$ public TransformedOperation transformOperation(TransformationContext context, PathAddress address, ModelNode operation) throws OperationFailedException -->Line_14 $$ address = address.subAddress(0, address.size() - 1).append("store", undoAliases.get(address.getLastElement().getValue()))[ FD ]
Line_23 $$ for (Property property : initialValue.asPropertyList()) -->Line_34 $$ ModelNode value = property.getValue()[ FD ]
Line_34 $$ ModelNode value = property.getValue()-->Line_42 $$ ModelNode writeOp = Util.getWriteAttributeOperation(legacyAddress.append(PathElement.pathElement(PROPERTY, key)), VALUE, value)[ FD ]
Line_3 $$ if (operation.get(NAME).asString().equals(PROPERTIES)) -->Line_53 $$ initialValue.set(newValue.clone())[ CD ]
Line_23 $$ for (Property property : initialValue.asPropertyList()) -->Line_24 $$ oldMap.put(property.getName(), property.getValue())[ FD ]
Line_21 $$ final Map<String, ModelNode> oldMap = new HashMap()-->Line_49 $$ for (Map.Entry<String, ModelNode> prop : oldMap.entrySet()) [ FD ]
Line_2 $$ public TransformedOperation transformOperation(TransformationContext context, PathAddress address, ModelNode operation) throws OperationFailedException -->Line_56 $$ return new TransformedOperation(operation, OperationResultTransformer.ORIGINAL_RESULT)[ CD ]
Line_17 $$ ModelNode newValue = context.readResourceFromRoot(address).getModel().get(PROPERTIES).clone()-->Line_18 $$ if (initialValue.equals(newValue) || (initialValue.isDefined() && initialValue.asPropertyList().isEmpty() && !newValue.isDefined())) [ FD ]
Line_3 $$ if (operation.get(NAME).asString().equals(PROPERTIES)) -->Line_28 $$ final ModelNode composite = new ModelNode()[ CD ]
Line_16 $$ ModelNode initialValue = attachment.getInitialValue(address, Operations.getAttributeName(operation))-->Line_53 $$ initialValue.set(newValue.clone())[ FD ]
Line_33 $$ String key = property.getName()-->Line_45 $$ oldMap.remove(key)[ FD ]
Line_3 $$ if (operation.get(NAME).asString().equals(PROPERTIES)) -->Line_31 $$ if (newValue.isDefined()) [ CD ]
Line_6 $$ Map<String, String> undoAliases = new HashMap()-->Line_13 $$ if (undoAliases.containsKey(address.getLastElement().getValue())) [ FD ]
Line_28 $$ final ModelNode composite = new ModelNode()-->Line_51 $$ composite.get(STEPS).add(removeOperation)[ FD ]
Line_21 $$ final Map<String, ModelNode> oldMap = new HashMap()-->Line_35 $$ if (!oldMap.containsKey(key)) [ FD ]
Line_2 $$ public TransformedOperation transformOperation(TransformationContext context, PathAddress address, ModelNode operation) throws OperationFailedException -->Line_3 $$ if (operation.get(NAME).asString().equals(PROPERTIES)) [ CD ]
Line_3 $$ if (operation.get(NAME).asString().equals(PROPERTIES)) -->Line_7 $$ undoAliases.put("BINARY_KEYED_JDBC_STORE", "binary-jdbc")[ CD ]
Line_16 $$ ModelNode initialValue = attachment.getInitialValue(address, Operations.getAttributeName(operation))-->Line_23 $$ for (Property property : initialValue.asPropertyList()) [ FD ]
Line_17 $$ ModelNode newValue = context.readResourceFromRoot(address).getModel().get(PROPERTIES).clone()-->Line_53 $$ initialValue.set(newValue.clone())[ FD ]
Line_6 $$ Map<String, String> undoAliases = new HashMap()-->Line_12 $$ undoAliases.put("STRING_KEYED_JDBC_STORE", "string-jdbc")[ FD ]
Line_2 $$ public TransformedOperation transformOperation(TransformationContext context, PathAddress address, ModelNode operation) throws OperationFailedException -->Line_13 $$ if (undoAliases.containsKey(address.getLastElement().getValue())) [ FD ]
Line_3 $$ if (operation.get(NAME).asString().equals(PROPERTIES)) -->Line_8 $$ undoAliases.put("STORE", "custom")[ CD ]
Line_14 $$ address = address.subAddress(0, address.size() - 1).append("store", undoAliases.get(address.getLastElement().getValue()))-->Line_16 $$ ModelNode initialValue = attachment.getInitialValue(address, Operations.getAttributeName(operation))[ FD ]
Line_42 $$ ModelNode writeOp = Util.getWriteAttributeOperation(legacyAddress.append(PathElement.pathElement(PROPERTY, key)), VALUE, value)-->Line_43 $$ composite.get(STEPS).add(writeOp)[ FD ]
Line_2 $$ public TransformedOperation transformOperation(TransformationContext context, PathAddress address, ModelNode operation) throws OperationFailedException -->Line_4 $$ InitialAttributeValueOperationContextAttachment attachment = context.getAttachment(InitialAttributeValueOperationContextAttachment.INITIAL_VALUES_ATTACHMENT)[ FD ]
Line_35 $$ if (!oldMap.containsKey(key)) -->Line_36 $$ ModelNode addOp = Util.createAddOperation(legacyAddress.append(PathElement.pathElement(PROPERTY, key)))[ CD ]
Line_50 $$ ModelNode removeOperation = Util.createRemoveOperation(legacyAddress.append(PathElement.pathElement(PROPERTY, prop.getKey())))-->Line_51 $$ composite.get(STEPS).add(removeOperation)[ FD ]
Line_27 $$ final PathAddress legacyAddress = Operations.getPathAddress(operation)-->Line_36 $$ ModelNode addOp = Util.createAddOperation(legacyAddress.append(PathElement.pathElement(PROPERTY, key)))[ FD ]
Line_2 $$ public TransformedOperation transformOperation(TransformationContext context, PathAddress address, ModelNode operation) throws OperationFailedException -->Line_27 $$ final PathAddress legacyAddress = Operations.getPathAddress(operation)[ FD ]
Line_23 $$ for (Property property : initialValue.asPropertyList()) -->Line_33 $$ String key = property.getName()[ FD ]
Line_3 $$ if (operation.get(NAME).asString().equals(PROPERTIES)) -->Line_27 $$ final PathAddress legacyAddress = Operations.getPathAddress(operation)[ CD ]
Line_35 $$ if (!oldMap.containsKey(key)) -->Line_38 $$ composite.get(STEPS).add(addOp)[ CD ]
Line_2 $$ public TransformedOperation transformOperation(TransformationContext context, PathAddress address, ModelNode operation) throws OperationFailedException -->Line_17 $$ ModelNode newValue = context.readResourceFromRoot(address).getModel().get(PROPERTIES).clone()[ FD ]
Line_28 $$ final ModelNode composite = new ModelNode()-->Line_38 $$ composite.get(STEPS).add(addOp)[ FD ]
Line_21 $$ final Map<String, ModelNode> oldMap = new HashMap()-->Line_40 $$ final ModelNode oldPropValue = oldMap.get(key)[ FD ]
Line_14 $$ address = address.subAddress(0, address.size() - 1).append("store", undoAliases.get(address.getLastElement().getValue()))-->Line_17 $$ ModelNode newValue = context.readResourceFromRoot(address).getModel().get(PROPERTIES).clone()[ FD ]
Line_3 $$ if (operation.get(NAME).asString().equals(PROPERTIES)) -->Line_30 $$ composite.get(OP_ADDR).setEmptyList()[ CD ]
Line_35 $$ if (!oldMap.containsKey(key)) -->Line_40 $$ final ModelNode oldPropValue = oldMap.get(key)[ CD ]
Line_3 $$ if (operation.get(NAME).asString().equals(PROPERTIES)) -->Line_29 $$ composite.get(OP).set(COMPOSITE)[ CD ]
Line_41 $$ if (!oldPropValue.equals(value)) -->Line_42 $$ ModelNode writeOp = Util.getWriteAttributeOperation(legacyAddress.append(PathElement.pathElement(PROPERTY, key)), VALUE, value)[ CD ]
Line_28 $$ final ModelNode composite = new ModelNode()-->Line_43 $$ composite.get(STEPS).add(writeOp)[ FD ]
Line_40 $$ final ModelNode oldPropValue = oldMap.get(key)-->Line_41 $$ if (!oldPropValue.equals(value)) [ FD ]
Line_35 $$ if (!oldMap.containsKey(key)) -->Line_45 $$ oldMap.remove(key)[ CD ]
Line_13 $$ if (undoAliases.containsKey(address.getLastElement().getValue())) -->Line_14 $$ address = address.subAddress(0, address.size() - 1).append("store", undoAliases.get(address.getLastElement().getValue()))[ CD ]
Line_3 $$ if (operation.get(NAME).asString().equals(PROPERTIES)) -->Line_13 $$ if (undoAliases.containsKey(address.getLastElement().getValue())) [ CD ]
Line_21 $$ final Map<String, ModelNode> oldMap = new HashMap()-->Line_24 $$ oldMap.put(property.getName(), property.getValue())[ FD ]
Line_6 $$ Map<String, String> undoAliases = new HashMap()-->Line_9 $$ undoAliases.put("FILE_STORE", "file")[ FD ]
Line_17 $$ ModelNode newValue = context.readResourceFromRoot(address).getModel().get(PROPERTIES).clone()-->Line_31 $$ if (newValue.isDefined()) [ FD ]
Line_6 $$ Map<String, String> undoAliases = new HashMap()-->Line_7 $$ undoAliases.put("BINARY_KEYED_JDBC_STORE", "binary-jdbc")[ FD ]
Line_36 $$ ModelNode addOp = Util.createAddOperation(legacyAddress.append(PathElement.pathElement(PROPERTY, key)))-->Line_37 $$ addOp.get(VALUE).set(value)[ FD ]
Line_34 $$ ModelNode value = property.getValue()-->Line_41 $$ if (!oldPropValue.equals(value)) [ FD ]
Line_3 $$ if (operation.get(NAME).asString().equals(PROPERTIES)) -->Line_18 $$ if (initialValue.equals(newValue) || (initialValue.isDefined() && initialValue.asPropertyList().isEmpty() && !newValue.isDefined())) [ CD ]
Line_4 $$ InitialAttributeValueOperationContextAttachment attachment = context.getAttachment(InitialAttributeValueOperationContextAttachment.INITIAL_VALUES_ATTACHMENT)-->Line_16 $$ ModelNode initialValue = attachment.getInitialValue(address, Operations.getAttributeName(operation))[ FD ]
Line_3 $$ if (operation.get(NAME).asString().equals(PROPERTIES)) -->Line_17 $$ ModelNode newValue = context.readResourceFromRoot(address).getModel().get(PROPERTIES).clone()[ CD ]
Line_16 $$ ModelNode initialValue = attachment.getInitialValue(address, Operations.getAttributeName(operation))-->Line_18 $$ if (initialValue.equals(newValue) || (initialValue.isDefined() && initialValue.asPropertyList().isEmpty() && !newValue.isDefined())) [ FD ]
Line_2 $$ public TransformedOperation transformOperation(TransformationContext context, PathAddress address, ModelNode operation) throws OperationFailedException -->Line_16 $$ ModelNode initialValue = attachment.getInitialValue(address, Operations.getAttributeName(operation))[ FD ]
Line_41 $$ if (!oldPropValue.equals(value)) -->Line_43 $$ composite.get(STEPS).add(writeOp)[ CD ]
Line_33 $$ String key = property.getName()-->Line_40 $$ final ModelNode oldPropValue = oldMap.get(key)[ FD ]
Line_16 $$ ModelNode initialValue = attachment.getInitialValue(address, Operations.getAttributeName(operation))-->Line_22 $$ if (initialValue.isDefined()) [ FD ]
Line_33 $$ String key = property.getName()-->Line_36 $$ ModelNode addOp = Util.createAddOperation(legacyAddress.append(PathElement.pathElement(PROPERTY, key)))[ FD ]
