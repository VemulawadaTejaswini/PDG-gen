Line_2 $$ private void checkAndAddAuthors(final Set<String> names, final Map<String, Long> known) throws VcsException -->Line_17 $$ known.put(name, id)[ FD ]
Line_9 $$ for (final Iterator<String> iterator = names.iterator(); iterator.hasNext(); ) -->Line_10 $$ final String name = iterator.next()[ FD ]
Line_10 $$ final String name = iterator.next()-->Line_30 $$ insertAuthor.setString(1, name)[ FD ]
Line_2 $$ private void checkAndAddAuthors(final Set<String> names, final Map<String, Long> known) throws VcsException -->Line_22 $$ if (names.isEmpty())[ FD ]
Line_15 $$ final long id = set.getLong(SqliteTables.AUTHOR.ID)-->Line_16 $$ myKnownRepositoryLocations.addKnownAuthor(name, id)[ FD ]
Line_9 $$ for (final Iterator<String> iterator = names.iterator(); iterator.hasNext(); ) -->Line_18 $$ iterator.remove()[ FD ]
Line_10 $$ final String name = iterator.next()-->Line_11 $$ statement.setString(1, name)[ FD ]
Line_2 $$ private void checkAndAddAuthors(final Set<String> names, final Map<String, Long> known) throws VcsException -->Line_33 $$ known.put(name, id)[ FD ]
Line_10 $$ final String name = iterator.next()-->Line_17 $$ known.put(name, id)[ FD ]
Line_10 $$ final String name = iterator.next()-->Line_33 $$ known.put(name, id)[ FD ]
Line_24 $$ final PreparedStatement insertAuthor = myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_ADD_AUTHOR, new ThrowableConvertor<Connection, PreparedStatement, SQLException>() -->Line_26 $$ return connection.prepareStatement("INSERT INTO " + SqliteTables.AUTHOR.TABLE_NAME + " ( " + SqliteTables.AUTHOR.NAME + ") VALUES (?)", Statement.RETURN_GENERATED_KEYS)[ CD ]
Line_2 $$ private void checkAndAddAuthors(final Set<String> names, final Map<String, Long> known) throws VcsException -->Line_9 $$ for (final Iterator<String> iterator = names.iterator(); iterator.hasNext(); ) [ FD ]
Line_15 $$ final long id = set.getLong(SqliteTables.AUTHOR.ID)-->Line_32 $$ myKnownRepositoryLocations.addKnownAuthor(name, id)[ FD ]
Line_9 $$ for (final Iterator<String> iterator = names.iterator(); iterator.hasNext(); ) -->Line_13 $$ SqliteUtil.readSelectResults(set, new ThrowableRunnable<SQLException>() [ CD ]
Line_3 $$ final PreparedStatement statement = myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_FILTER_KNOWN_AUTHORS, new ThrowableConvertor<Connection, PreparedStatement, SQLException>() -->Line_26 $$ return connection.prepareStatement("INSERT INTO " + SqliteTables.AUTHOR.TABLE_NAME + " ( " + SqliteTables.AUTHOR.NAME + ") VALUES (?)", Statement.RETURN_GENERATED_KEYS)[ FD ]
Line_12 $$ final ResultSet set = statement.executeQuery()-->Line_13 $$ SqliteUtil.readSelectResults(set, new ThrowableRunnable<SQLException>() [ FD ]
Line_2 $$ private void checkAndAddAuthors(final Set<String> names, final Map<String, Long> known) throws VcsException -->Line_3 $$ final PreparedStatement statement = myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_FILTER_KNOWN_AUTHORS, new ThrowableConvertor<Connection, PreparedStatement, SQLException>() [ CD ]
Line_13 $$ SqliteUtil.readSelectResults(set, new ThrowableRunnable<SQLException>() -->Line_16 $$ myKnownRepositoryLocations.addKnownAuthor(name, id)[ CD ]
Line_22 $$ if (names.isEmpty())-->Line_23 $$ return[ CD ]
Line_12 $$ final ResultSet set = statement.executeQuery()-->Line_15 $$ final long id = set.getLong(SqliteTables.AUTHOR.ID)[ FD ]
Line_3 $$ final PreparedStatement statement = myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_FILTER_KNOWN_AUTHORS, new ThrowableConvertor<Connection, PreparedStatement, SQLException>() -->Line_12 $$ final ResultSet set = statement.executeQuery()[ FD ]
Line_3 $$ final PreparedStatement statement = myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_FILTER_KNOWN_AUTHORS, new ThrowableConvertor<Connection, PreparedStatement, SQLException>() -->Line_5 $$ return connection.prepareStatement("SELECT " + SqliteTables.AUTHOR.ID + ", " + SqliteTables.AUTHOR.NAME + " FROM " + SqliteTables.AUTHOR.TABLE_NAME + " WHERE " + SqliteTables.AUTHOR.NAME + "=?")[ FD ]
Line_10 $$ final String name = iterator.next()-->Line_16 $$ myKnownRepositoryLocations.addKnownAuthor(name, id)[ FD ]
Line_15 $$ final long id = set.getLong(SqliteTables.AUTHOR.ID)-->Line_17 $$ known.put(name, id)[ FD ]
Line_13 $$ SqliteUtil.readSelectResults(set, new ThrowableRunnable<SQLException>() -->Line_17 $$ known.put(name, id)[ CD ]
Line_15 $$ final long id = set.getLong(SqliteTables.AUTHOR.ID)-->Line_33 $$ known.put(name, id)[ FD ]
Line_10 $$ final String name = iterator.next()-->Line_32 $$ myKnownRepositoryLocations.addKnownAuthor(name, id)[ FD ]
Line_3 $$ final PreparedStatement statement = myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_FILTER_KNOWN_AUTHORS, new ThrowableConvertor<Connection, PreparedStatement, SQLException>() -->Line_11 $$ statement.setString(1, name)[ FD ]
Line_9 $$ for (final Iterator<String> iterator = names.iterator(); iterator.hasNext(); ) -->Line_11 $$ statement.setString(1, name)[ CD ]
Line_13 $$ SqliteUtil.readSelectResults(set, new ThrowableRunnable<SQLException>() -->Line_15 $$ final long id = set.getLong(SqliteTables.AUTHOR.ID)[ CD ]
Line_13 $$ SqliteUtil.readSelectResults(set, new ThrowableRunnable<SQLException>() -->Line_18 $$ iterator.remove()[ CD ]
Line_3 $$ final PreparedStatement statement = myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_FILTER_KNOWN_AUTHORS, new ThrowableConvertor<Connection, PreparedStatement, SQLException>() -->Line_5 $$ return connection.prepareStatement("SELECT " + SqliteTables.AUTHOR.ID + ", " + SqliteTables.AUTHOR.NAME + " FROM " + SqliteTables.AUTHOR.TABLE_NAME + " WHERE " + SqliteTables.AUTHOR.NAME + "=?")[ CD ]
Line_24 $$ final PreparedStatement insertAuthor = myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_ADD_AUTHOR, new ThrowableConvertor<Connection, PreparedStatement, SQLException>() -->Line_26 $$ return connection.prepareStatement("INSERT INTO " + SqliteTables.AUTHOR.TABLE_NAME + " ( " + SqliteTables.AUTHOR.NAME + ") VALUES (?)", Statement.RETURN_GENERATED_KEYS)[ FD ]
Line_9 $$ for (final Iterator<String> iterator = names.iterator(); iterator.hasNext(); ) -->Line_10 $$ final String name = iterator.next()[ CD ]
Line_9 $$ for (final Iterator<String> iterator = names.iterator(); iterator.hasNext(); ) -->Line_12 $$ final ResultSet set = statement.executeQuery()[ CD ]
