Line_2 $$ private void mark(long classId, long testId, boolean isStdout) -->Line_6 $$ Map<Long, TestCaseRegion> testCaseRegions = index.get(classId)[ FD ]
Line_6 $$ Map<Long, TestCaseRegion> testCaseRegions = index.get(classId)-->Line_7 $$ if (!testCaseRegions.containsKey(testId)) [ FD ]
Line_3 $$ if (!index.containsKey(classId)) -->Line_4 $$ index.put(classId, new LinkedHashMap<Long, TestCaseRegion>())[ CD ]
Line_2 $$ private void mark(long classId, long testId, boolean isStdout) -->Line_11 $$ TestCaseRegion region = testCaseRegions.get(testId)[ FD ]
Line_6 $$ Map<Long, TestCaseRegion> testCaseRegions = index.get(classId)-->Line_9 $$ testCaseRegions.put(testId, region)[ FD ]
Line_2 $$ private void mark(long classId, long testId, boolean isStdout) -->Line_11 $$ TestCaseRegion region = testCaseRegions.get(testId)[ CD ]
Line_2 $$ private void mark(long classId, long testId, boolean isStdout) -->Line_3 $$ if (!index.containsKey(classId)) [ CD ]
Line_2 $$ private void mark(long classId, long testId, boolean isStdout) -->Line_7 $$ if (!testCaseRegions.containsKey(testId)) [ CD ]
Line_8 $$ TestCaseRegion region = new TestCaseRegion()-->Line_9 $$ testCaseRegions.put(testId, region)[ FD ]
Line_2 $$ private void mark(long classId, long testId, boolean isStdout) -->Line_9 $$ testCaseRegions.put(testId, region)[ FD ]
Line_7 $$ if (!testCaseRegions.containsKey(testId)) -->Line_9 $$ testCaseRegions.put(testId, region)[ CD ]
Line_2 $$ private void mark(long classId, long testId, boolean isStdout) -->Line_7 $$ if (!testCaseRegions.containsKey(testId)) [ FD ]
Line_2 $$ private void mark(long classId, long testId, boolean isStdout) -->Line_17 $$ streamRegion.stop = total[ CD ]
Line_7 $$ if (!testCaseRegions.containsKey(testId)) -->Line_8 $$ TestCaseRegion region = new TestCaseRegion()[ CD ]
Line_6 $$ Map<Long, TestCaseRegion> testCaseRegions = index.get(classId)-->Line_11 $$ TestCaseRegion region = testCaseRegions.get(testId)[ FD ]
Line_13 $$ int total = output.getWritePosition()-->Line_15 $$ streamRegion.start = total[ FD ]
Line_2 $$ private void mark(long classId, long testId, boolean isStdout) -->Line_14 $$ if (streamRegion.start < 0) [ CD ]
Line_2 $$ private void mark(long classId, long testId, boolean isStdout) -->Line_6 $$ Map<Long, TestCaseRegion> testCaseRegions = index.get(classId)[ CD ]
Line_2 $$ private void mark(long classId, long testId, boolean isStdout) -->Line_13 $$ int total = output.getWritePosition()[ CD ]
Line_2 $$ private void mark(long classId, long testId, boolean isStdout) -->Line_3 $$ if (!index.containsKey(classId)) [ FD ]
Line_2 $$ private void mark(long classId, long testId, boolean isStdout) -->Line_12 $$ Region streamRegion = isStdout ? region.stdOutRegion : region.stdErrRegion[ CD ]
Line_2 $$ private void mark(long classId, long testId, boolean isStdout) -->Line_4 $$ index.put(classId, new LinkedHashMap<Long, TestCaseRegion>())[ FD ]
Line_13 $$ int total = output.getWritePosition()-->Line_17 $$ streamRegion.stop = total[ FD ]
Line_14 $$ if (streamRegion.start < 0) -->Line_15 $$ streamRegion.start = total[ CD ]
