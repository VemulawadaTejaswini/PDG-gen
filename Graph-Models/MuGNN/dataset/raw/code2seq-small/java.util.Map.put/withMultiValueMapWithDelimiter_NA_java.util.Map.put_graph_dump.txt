Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_28 $$ assertEquals("radio", radioButtonElement2.attribute("type").getValue())[ CD ]
Line_18 $$ Element radioButtonElement1 = (Element) spanElement1.elements().get(0)-->Line_22 $$ assertEquals("checked", radioButtonElement1.attribute("checked").getValue())[ FD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_14 $$ output = "<doc>" + output + "</doc>"[ CD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_22 $$ assertEquals("checked", radioButtonElement1.attribute("checked").getValue())[ CD ]
Line_17 $$ Element spanElement1 = (Element) document.getRootElement().elements().get(0)-->Line_24 $$ assertEquals("FOO", spanElement1.getStringValue())[ FD ]
Line_6 $$ Map m = new LinkedHashMap()-->Line_8 $$ m.put("bar", "BAR")[ FD ]
Line_18 $$ Element radioButtonElement1 = (Element) spanElement1.elements().get(0)-->Line_19 $$ assertEquals("input", radioButtonElement1.getName())[ FD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_8 $$ m.put("bar", "BAR")[ CD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_10 $$ this.tag.setItems(m)[ CD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_30 $$ assertEquals("checked", radioButtonElement2.attribute("checked").getValue())[ CD ]
Line_6 $$ Map m = new LinkedHashMap()-->Line_7 $$ m.put("foo", "FOO")[ FD ]
Line_26 $$ Element radioButtonElement2 = (Element) spanElement2.elements().get(0)-->Line_29 $$ assertEquals("stringArray", radioButtonElement2.attribute("name").getValue())[ FD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_31 $$ assertEquals("bar", radioButtonElement2.attribute("value").getValue())[ CD ]
Line_34 $$ Element radioButtonElement3 = (Element) spanElement3.elements().get(0)-->Line_36 $$ assertEquals("radio", radioButtonElement3.attribute("type").getValue())[ FD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_5 $$ this.tag.setPath("stringArray")[ CD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_23 $$ assertEquals("foo", radioButtonElement1.attribute("value").getValue())[ CD ]
Line_26 $$ Element radioButtonElement2 = (Element) spanElement2.elements().get(0)-->Line_30 $$ assertEquals("checked", radioButtonElement2.attribute("checked").getValue())[ FD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_25 $$ Element spanElement2 = (Element) document.getRootElement().elements().get(1)[ CD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_36 $$ assertEquals("radio", radioButtonElement3.attribute("type").getValue())[ CD ]
Line_25 $$ Element spanElement2 = (Element) document.getRootElement().elements().get(1)-->Line_26 $$ Element radioButtonElement2 = (Element) spanElement2.elements().get(0)[ FD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_6 $$ Map m = new LinkedHashMap()[ CD ]
Line_33 $$ Element spanElement3 = (Element) document.getRootElement().elements().get(2)-->Line_34 $$ Element radioButtonElement3 = (Element) spanElement3.elements().get(0)[ FD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_19 $$ assertEquals("input", radioButtonElement1.getName())[ CD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_4 $$ this.tag.setDelimiter(delimiter)[ CD ]
Line_6 $$ Map m = new LinkedHashMap()-->Line_10 $$ this.tag.setItems(m)[ FD ]
Line_17 $$ Element spanElement1 = (Element) document.getRootElement().elements().get(0)-->Line_18 $$ Element radioButtonElement1 = (Element) spanElement1.elements().get(0)[ FD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_20 $$ assertEquals("radio", radioButtonElement1.attribute("type").getValue())[ CD ]
Line_18 $$ Element radioButtonElement1 = (Element) spanElement1.elements().get(0)-->Line_21 $$ assertEquals("stringArray", radioButtonElement1.attribute("name").getValue())[ FD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_9 $$ m.put("baz", "BAZ")[ CD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_26 $$ Element radioButtonElement2 = (Element) spanElement2.elements().get(0)[ CD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_33 $$ Element spanElement3 = (Element) document.getRootElement().elements().get(2)[ CD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_38 $$ assertNull("not checked", radioButtonElement3.attribute("checked"))[ CD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_39 $$ assertEquals("baz", radioButtonElement3.attribute("value").getValue())[ CD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_11 $$ int result = this.tag.doStartTag()[ CD ]
Line_34 $$ Element radioButtonElement3 = (Element) spanElement3.elements().get(0)-->Line_39 $$ assertEquals("baz", radioButtonElement3.attribute("value").getValue())[ FD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_18 $$ Element radioButtonElement1 = (Element) spanElement1.elements().get(0)[ CD ]
Line_16 $$ Document document = reader.read(new StringReader(output))-->Line_25 $$ Element spanElement2 = (Element) document.getRootElement().elements().get(1)[ FD ]
Line_3 $$ String delimiter = " | "-->Line_4 $$ this.tag.setDelimiter(delimiter)[ FD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_27 $$ assertEquals("input", radioButtonElement2.getName())[ CD ]
Line_11 $$ int result = this.tag.doStartTag()-->Line_12 $$ assertEquals(Tag.SKIP_BODY, result)[ FD ]
Line_15 $$ SAXReader reader = new SAXReader()-->Line_16 $$ Document document = reader.read(new StringReader(output))[ FD ]
Line_6 $$ Map m = new LinkedHashMap()-->Line_9 $$ m.put("baz", "BAZ")[ FD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_13 $$ String output = getOutput()[ CD ]
Line_26 $$ Element radioButtonElement2 = (Element) spanElement2.elements().get(0)-->Line_27 $$ assertEquals("input", radioButtonElement2.getName())[ FD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_3 $$ String delimiter = " | "[ CD ]
Line_25 $$ Element spanElement2 = (Element) document.getRootElement().elements().get(1)-->Line_32 $$ assertEquals(delimiter + "BAR", spanElement2.getStringValue())[ FD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_34 $$ Element radioButtonElement3 = (Element) spanElement3.elements().get(0)[ CD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_7 $$ m.put("foo", "FOO")[ CD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_29 $$ assertEquals("stringArray", radioButtonElement2.attribute("name").getValue())[ CD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_21 $$ assertEquals("stringArray", radioButtonElement1.attribute("name").getValue())[ CD ]
Line_26 $$ Element radioButtonElement2 = (Element) spanElement2.elements().get(0)-->Line_31 $$ assertEquals("bar", radioButtonElement2.attribute("value").getValue())[ FD ]
Line_18 $$ Element radioButtonElement1 = (Element) spanElement1.elements().get(0)-->Line_23 $$ assertEquals("foo", radioButtonElement1.attribute("value").getValue())[ FD ]
Line_26 $$ Element radioButtonElement2 = (Element) spanElement2.elements().get(0)-->Line_28 $$ assertEquals("radio", radioButtonElement2.attribute("type").getValue())[ FD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_35 $$ assertEquals("input", radioButtonElement3.getName())[ CD ]
Line_16 $$ Document document = reader.read(new StringReader(output))-->Line_17 $$ Element spanElement1 = (Element) document.getRootElement().elements().get(0)[ FD ]
Line_34 $$ Element radioButtonElement3 = (Element) spanElement3.elements().get(0)-->Line_38 $$ assertNull("not checked", radioButtonElement3.attribute("checked"))[ FD ]
Line_34 $$ Element radioButtonElement3 = (Element) spanElement3.elements().get(0)-->Line_35 $$ assertEquals("input", radioButtonElement3.getName())[ FD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_40 $$ assertEquals(delimiter + "BAZ", spanElement3.getStringValue())[ CD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_12 $$ assertEquals(Tag.SKIP_BODY, result)[ CD ]
Line_33 $$ Element spanElement3 = (Element) document.getRootElement().elements().get(2)-->Line_40 $$ assertEquals(delimiter + "BAZ", spanElement3.getStringValue())[ FD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_15 $$ SAXReader reader = new SAXReader()[ CD ]
Line_13 $$ String output = getOutput()-->Line_14 $$ output = "<doc>" + output + "</doc>"[ FD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_16 $$ Document document = reader.read(new StringReader(output))[ CD ]
Line_34 $$ Element radioButtonElement3 = (Element) spanElement3.elements().get(0)-->Line_37 $$ assertEquals("stringArray", radioButtonElement3.attribute("name").getValue())[ FD ]
Line_18 $$ Element radioButtonElement1 = (Element) spanElement1.elements().get(0)-->Line_20 $$ assertEquals("radio", radioButtonElement1.attribute("type").getValue())[ FD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_17 $$ Element spanElement1 = (Element) document.getRootElement().elements().get(0)[ CD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_37 $$ assertEquals("stringArray", radioButtonElement3.attribute("name").getValue())[ CD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_24 $$ assertEquals("FOO", spanElement1.getStringValue())[ CD ]
Line_16 $$ Document document = reader.read(new StringReader(output))-->Line_33 $$ Element spanElement3 = (Element) document.getRootElement().elements().get(2)[ FD ]
Line_2 $$ public void withMultiValueMapWithDelimiter() throws Exception -->Line_32 $$ assertEquals(delimiter + "BAR", spanElement2.getStringValue())[ CD ]
