Line_2 $$ public void createFromMessageAndModify() -->Line_16 $$ Map<String, List<String>> actualNativeHeaders = (Map<String, List<String>>) actual.get(NativeMessageHeaderAccessor.NATIVE_HEADERS)[ CD ]
Line_2 $$ public void createFromMessageAndModify() -->Line_5 $$ inputNativeHeaders.add("bar", "baz")[ CD ]
Line_3 $$ MultiValueMap<String, String> inputNativeHeaders = new LinkedMultiValueMap()-->Line_4 $$ inputNativeHeaders.add("foo", "bar")[ FD ]
Line_16 $$ Map<String, List<String>> actualNativeHeaders = (Map<String, List<String>>) actual.get(NativeMessageHeaderAccessor.NATIVE_HEADERS)-->Line_18 $$ assertEquals(Arrays.asList("BAR"), actualNativeHeaders.get("foo"))[ FD ]
Line_2 $$ public void createFromMessageAndModify() -->Line_8 $$ nativeHeaders.put(NativeMessageHeaderAccessor.NATIVE_HEADERS, inputNativeHeaders)[ CD ]
Line_13 $$ Map<String, Object> actual = headerAccessor.toMap()-->Line_16 $$ Map<String, List<String>> actualNativeHeaders = (Map<String, List<String>>) actual.get(NativeMessageHeaderAccessor.NATIVE_HEADERS)[ FD ]
Line_2 $$ public void createFromMessageAndModify() -->Line_3 $$ MultiValueMap<String, String> inputNativeHeaders = new LinkedMultiValueMap()[ CD ]
Line_2 $$ public void createFromMessageAndModify() -->Line_13 $$ Map<String, Object> actual = headerAccessor.toMap()[ CD ]
Line_2 $$ public void createFromMessageAndModify() -->Line_18 $$ assertEquals(Arrays.asList("BAR"), actualNativeHeaders.get("foo"))[ CD ]
Line_13 $$ Map<String, Object> actual = headerAccessor.toMap()-->Line_15 $$ assertEquals("B", actual.get("a"))[ FD ]
Line_2 $$ public void createFromMessageAndModify() -->Line_19 $$ assertEquals(Arrays.asList("baz"), actualNativeHeaders.get("bar"))[ CD ]
Line_2 $$ public void createFromMessageAndModify() -->Line_10 $$ NativeMessageHeaderAccessor headerAccessor = new NativeMessageHeaderAccessor(message)[ CD ]
Line_2 $$ public void createFromMessageAndModify() -->Line_15 $$ assertEquals("B", actual.get("a"))[ CD ]
Line_16 $$ Map<String, List<String>> actualNativeHeaders = (Map<String, List<String>>) actual.get(NativeMessageHeaderAccessor.NATIVE_HEADERS)-->Line_17 $$ assertNotNull(actualNativeHeaders)[ FD ]
Line_3 $$ MultiValueMap<String, String> inputNativeHeaders = new LinkedMultiValueMap()-->Line_5 $$ inputNativeHeaders.add("bar", "baz")[ FD ]
Line_2 $$ public void createFromMessageAndModify() -->Line_4 $$ inputNativeHeaders.add("foo", "bar")[ CD ]
Line_2 $$ public void createFromMessageAndModify() -->Line_14 $$ assertEquals(2, actual.size())[ CD ]
Line_2 $$ public void createFromMessageAndModify() -->Line_11 $$ headerAccessor.setHeader("a", "B")[ CD ]
Line_2 $$ public void createFromMessageAndModify() -->Line_9 $$ GenericMessage<String> message = new GenericMessage("p", nativeHeaders)[ CD ]
Line_13 $$ Map<String, Object> actual = headerAccessor.toMap()-->Line_14 $$ assertEquals(2, actual.size())[ FD ]
Line_10 $$ NativeMessageHeaderAccessor headerAccessor = new NativeMessageHeaderAccessor(message)-->Line_13 $$ Map<String, Object> actual = headerAccessor.toMap()[ FD ]
Line_2 $$ public void createFromMessageAndModify() -->Line_6 $$ Map<String, Object> nativeHeaders = new HashMap<String, Object>()[ CD ]
Line_3 $$ MultiValueMap<String, String> inputNativeHeaders = new LinkedMultiValueMap()-->Line_8 $$ nativeHeaders.put(NativeMessageHeaderAccessor.NATIVE_HEADERS, inputNativeHeaders)[ FD ]
Line_10 $$ NativeMessageHeaderAccessor headerAccessor = new NativeMessageHeaderAccessor(message)-->Line_11 $$ headerAccessor.setHeader("a", "B")[ FD ]
Line_16 $$ Map<String, List<String>> actualNativeHeaders = (Map<String, List<String>>) actual.get(NativeMessageHeaderAccessor.NATIVE_HEADERS)-->Line_19 $$ assertEquals(Arrays.asList("baz"), actualNativeHeaders.get("bar"))[ FD ]
Line_6 $$ Map<String, Object> nativeHeaders = new HashMap<String, Object>()-->Line_7 $$ nativeHeaders.put("a", "b")[ FD ]
Line_2 $$ public void createFromMessageAndModify() -->Line_17 $$ assertNotNull(actualNativeHeaders)[ CD ]
Line_6 $$ Map<String, Object> nativeHeaders = new HashMap<String, Object>()-->Line_8 $$ nativeHeaders.put(NativeMessageHeaderAccessor.NATIVE_HEADERS, inputNativeHeaders)[ FD ]
Line_10 $$ NativeMessageHeaderAccessor headerAccessor = new NativeMessageHeaderAccessor(message)-->Line_12 $$ headerAccessor.setNativeHeader("foo", "BAR")[ FD ]
Line_2 $$ public void createFromMessageAndModify() -->Line_7 $$ nativeHeaders.put("a", "b")[ CD ]
Line_2 $$ public void createFromMessageAndModify() -->Line_12 $$ headerAccessor.setNativeHeader("foo", "BAR")[ CD ]
