Line_2 $$ public HttpURLConnection openConnection(URL url, Token token, String doAs) throws IOException, AuthenticationException -->Line_18 $$ url = augmentURL(url, extraParams)[ FD ]
Line_2 $$ public HttpURLConnection openConnection(URL url, Token token, String doAs) throws IOException, AuthenticationException -->Line_5 $$ Map<String, String> extraParams = new HashMap<String, String>()[ CD ]
Line_2 $$ public HttpURLConnection openConnection(URL url, Token token, String doAs) throws IOException, AuthenticationException -->Line_16 $$ extraParams.put(DO_AS, URLEncoder.encode(doAs, "UTF-8"))[ FD ]
Line_18 $$ url = augmentURL(url, extraParams)-->Line_19 $$ return super.openConnection(url, token)[ FD ]
Line_10 $$ org.apache.hadoop.security.token.Token<? extends TokenIdentifier> dt = creds.getToken(service)-->Line_11 $$ if (dt != null) [ FD ]
Line_2 $$ public HttpURLConnection openConnection(URL url, Token token, String doAs) throws IOException, AuthenticationException -->Line_19 $$ return super.openConnection(url, token)[ FD ]
Line_7 $$ if (!creds.getAllTokens().isEmpty()) -->Line_10 $$ org.apache.hadoop.security.token.Token<? extends TokenIdentifier> dt = creds.getToken(service)[ CD ]
Line_6 $$ Credentials creds = UserGroupInformation.getCurrentUser().getCredentials()-->Line_10 $$ org.apache.hadoop.security.token.Token<? extends TokenIdentifier> dt = creds.getToken(service)[ FD ]
Line_2 $$ public HttpURLConnection openConnection(URL url, Token token, String doAs) throws IOException, AuthenticationException -->Line_15 $$ if (doAs != null) [ FD ]
Line_5 $$ Map<String, String> extraParams = new HashMap<String, String>()-->Line_18 $$ url = augmentURL(url, extraParams)[ FD ]
Line_2 $$ public HttpURLConnection openConnection(URL url, Token token, String doAs) throws IOException, AuthenticationException -->Line_3 $$ Preconditions.checkNotNull(url, "url")[ FD ]
Line_2 $$ public HttpURLConnection openConnection(URL url, Token token, String doAs) throws IOException, AuthenticationException -->Line_19 $$ return super.openConnection(url, token)[ CD ]
Line_2 $$ public HttpURLConnection openConnection(URL url, Token token, String doAs) throws IOException, AuthenticationException -->Line_4 $$ Preconditions.checkNotNull(token, "token")[ FD ]
Line_2 $$ public HttpURLConnection openConnection(URL url, Token token, String doAs) throws IOException, AuthenticationException -->Line_7 $$ if (!creds.getAllTokens().isEmpty()) [ CD ]
Line_2 $$ public HttpURLConnection openConnection(URL url, Token token, String doAs) throws IOException, AuthenticationException -->Line_6 $$ Credentials creds = UserGroupInformation.getCurrentUser().getCredentials()[ CD ]
Line_8 $$ InetSocketAddress serviceAddr = new InetSocketAddress(url.getHost(), url.getPort())-->Line_9 $$ Text service = SecurityUtil.buildTokenService(serviceAddr)[ FD ]
Line_11 $$ if (dt != null) -->Line_12 $$ extraParams.put(KerberosDelegationTokenAuthenticator.DELEGATION_PARAM, dt.encodeToUrlString())[ CD ]
Line_5 $$ Map<String, String> extraParams = new HashMap<String, String>()-->Line_16 $$ extraParams.put(DO_AS, URLEncoder.encode(doAs, "UTF-8"))[ FD ]
Line_9 $$ Text service = SecurityUtil.buildTokenService(serviceAddr)-->Line_10 $$ org.apache.hadoop.security.token.Token<? extends TokenIdentifier> dt = creds.getToken(service)[ FD ]
Line_7 $$ if (!creds.getAllTokens().isEmpty()) -->Line_11 $$ if (dt != null) [ CD ]
Line_2 $$ public HttpURLConnection openConnection(URL url, Token token, String doAs) throws IOException, AuthenticationException -->Line_15 $$ if (doAs != null) [ CD ]
Line_5 $$ Map<String, String> extraParams = new HashMap<String, String>()-->Line_12 $$ extraParams.put(KerberosDelegationTokenAuthenticator.DELEGATION_PARAM, dt.encodeToUrlString())[ FD ]
Line_7 $$ if (!creds.getAllTokens().isEmpty()) -->Line_8 $$ InetSocketAddress serviceAddr = new InetSocketAddress(url.getHost(), url.getPort())[ CD ]
Line_2 $$ public HttpURLConnection openConnection(URL url, Token token, String doAs) throws IOException, AuthenticationException -->Line_4 $$ Preconditions.checkNotNull(token, "token")[ CD ]
Line_10 $$ org.apache.hadoop.security.token.Token<? extends TokenIdentifier> dt = creds.getToken(service)-->Line_12 $$ extraParams.put(KerberosDelegationTokenAuthenticator.DELEGATION_PARAM, dt.encodeToUrlString())[ FD ]
Line_2 $$ public HttpURLConnection openConnection(URL url, Token token, String doAs) throws IOException, AuthenticationException -->Line_18 $$ url = augmentURL(url, extraParams)[ CD ]
Line_2 $$ public HttpURLConnection openConnection(URL url, Token token, String doAs) throws IOException, AuthenticationException -->Line_8 $$ InetSocketAddress serviceAddr = new InetSocketAddress(url.getHost(), url.getPort())[ FD ]
Line_2 $$ public HttpURLConnection openConnection(URL url, Token token, String doAs) throws IOException, AuthenticationException -->Line_3 $$ Preconditions.checkNotNull(url, "url")[ CD ]
Line_6 $$ Credentials creds = UserGroupInformation.getCurrentUser().getCredentials()-->Line_7 $$ if (!creds.getAllTokens().isEmpty()) [ FD ]
Line_15 $$ if (doAs != null) -->Line_16 $$ extraParams.put(DO_AS, URLEncoder.encode(doAs, "UTF-8"))[ CD ]
Line_7 $$ if (!creds.getAllTokens().isEmpty()) -->Line_9 $$ Text service = SecurityUtil.buildTokenService(serviceAddr)[ CD ]
