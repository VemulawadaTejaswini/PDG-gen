Line_12 $$ String name = line.substring(0, pos)-->Line_14 $$ newEnv.put(name, line.substring(pos + 1))[ FD ]
Line_12 $$ String name = line.substring(0, pos)-->Line_13 $$ if (!toIgnore.contains(name)) [ FD ]
Line_2 $$ private static Map<String, String> parseEnv(String text) throws Exception -->Line_4 $$ Map<String, String> env = System.getenv()[ CD ]
Line_12 $$ String name = line.substring(0, pos)-->Line_16 $$ newEnv.put(name, env.get(name))[ FD ]
Line_7 $$ for (String line : lines) -->Line_8 $$ int pos = line.indexOf('=')[ FD ]
Line_13 $$ if (!toIgnore.contains(name)) -->Line_14 $$ newEnv.put(name, line.substring(pos + 1))[ CD ]
Line_2 $$ private static Map<String, String> parseEnv(String text) throws Exception -->Line_19 $$ LOG.info("shell environment loaded (" + newEnv.size() + " vars)")[ CD ]
Line_7 $$ for (String line : lines) -->Line_14 $$ newEnv.put(name, line.substring(pos + 1))[ FD ]
Line_2 $$ private static Map<String, String> parseEnv(String text) throws Exception -->Line_3 $$ Set<String> toIgnore = new HashSet<String>(Arrays.asList("_", "PWD", "SHLVL"))[ CD ]
Line_7 $$ for (String line : lines) -->Line_12 $$ String name = line.substring(0, pos)[ FD ]
Line_8 $$ int pos = line.indexOf('=')-->Line_9 $$ if (pos <= 0) [ FD ]
Line_3 $$ Set<String> toIgnore = new HashSet<String>(Arrays.asList("_", "PWD", "SHLVL"))-->Line_13 $$ if (!toIgnore.contains(name)) [ FD ]
Line_5 $$ Map<String, String> newEnv = new HashMap<String, String>()-->Line_14 $$ newEnv.put(name, line.substring(pos + 1))[ FD ]
Line_4 $$ Map<String, String> env = System.getenv()-->Line_16 $$ newEnv.put(name, env.get(name))[ FD ]
Line_5 $$ Map<String, String> newEnv = new HashMap<String, String>()-->Line_19 $$ LOG.info("shell environment loaded (" + newEnv.size() + " vars)")[ FD ]
Line_4 $$ Map<String, String> env = System.getenv()-->Line_15 $$ if (env.containsKey(name)) [ FD ]
Line_8 $$ int pos = line.indexOf('=')-->Line_12 $$ String name = line.substring(0, pos)[ FD ]
Line_2 $$ private static Map<String, String> parseEnv(String text) throws Exception -->Line_6 $$ String[] lines = text.split("\0")[ CD ]
Line_12 $$ String name = line.substring(0, pos)-->Line_15 $$ if (env.containsKey(name)) [ FD ]
Line_2 $$ private static Map<String, String> parseEnv(String text) throws Exception -->Line_6 $$ String[] lines = text.split("\0")[ FD ]
Line_15 $$ if (env.containsKey(name)) -->Line_16 $$ newEnv.put(name, env.get(name))[ CD ]
Line_2 $$ private static Map<String, String> parseEnv(String text) throws Exception -->Line_5 $$ Map<String, String> newEnv = new HashMap<String, String>()[ CD ]
Line_13 $$ if (!toIgnore.contains(name)) -->Line_15 $$ if (env.containsKey(name)) [ CD ]
Line_5 $$ Map<String, String> newEnv = new HashMap<String, String>()-->Line_16 $$ newEnv.put(name, env.get(name))[ FD ]
Line_2 $$ private static Map<String, String> parseEnv(String text) throws Exception -->Line_20 $$ return newEnv[ CD ]
