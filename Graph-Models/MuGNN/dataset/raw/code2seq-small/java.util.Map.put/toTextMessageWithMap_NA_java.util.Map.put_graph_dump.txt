Line_2 $$ public void toTextMessageWithMap() throws Exception -->Line_6 $$ toBeMarshalled.put("foo", "bar")[ CD ]
Line_2 $$ public void toTextMessageWithMap() throws Exception -->Line_4 $$ TextMessage textMessageMock = mock(TextMessage.class)[ CD ]
Line_2 $$ public void toTextMessageWithMap() throws Exception -->Line_8 $$ converter.toMessage(toBeMarshalled, sessionMock)[ CD ]
Line_2 $$ public void toTextMessageWithMap() throws Exception -->Line_7 $$ given(sessionMock.createTextMessage(isA(String.class))).willReturn(textMessageMock)[ CD ]
Line_2 $$ public void toTextMessageWithMap() throws Exception -->Line_5 $$ Map<String, String> toBeMarshalled = new HashMap<String, String>()[ CD ]
Line_2 $$ public void toTextMessageWithMap() throws Exception -->Line_9 $$ verify(textMessageMock).setStringProperty("__typeid__", HashMap.class.getName())[ CD ]
Line_4 $$ TextMessage textMessageMock = mock(TextMessage.class)-->Line_7 $$ given(sessionMock.createTextMessage(isA(String.class))).willReturn(textMessageMock)[ FD ]
Line_2 $$ public void toTextMessageWithMap() throws Exception -->Line_3 $$ converter.setTargetType(MessageType.TEXT)[ CD ]
Line_5 $$ Map<String, String> toBeMarshalled = new HashMap<String, String>()-->Line_6 $$ toBeMarshalled.put("foo", "bar")[ FD ]
Line_5 $$ Map<String, String> toBeMarshalled = new HashMap<String, String>()-->Line_8 $$ converter.toMessage(toBeMarshalled, sessionMock)[ FD ]
Line_4 $$ TextMessage textMessageMock = mock(TextMessage.class)-->Line_9 $$ verify(textMessageMock).setStringProperty("__typeid__", HashMap.class.getName())[ FD ]
