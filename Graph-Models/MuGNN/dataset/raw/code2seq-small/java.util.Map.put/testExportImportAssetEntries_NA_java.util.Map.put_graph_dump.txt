Line_3 $$ List<AssetEntry> assetEntries = new ArrayList()-->Line_6 $$ assetEntries = addAssetEntries(scopeGroup, 3, assetEntries)[ FD ]
Line_2 $$ protected void testExportImportAssetEntries(List<Group> scopeGroups) throws Exception -->Line_16 $$ List<AssetEntry> actualAssetEntries = AssetPublisherUtil.getAssetEntries(new MockPortletRequest(), importedPortletPreferences, _permissionChecker, selectedGroupIds, false, false)[ CD ]
Line_8 $$ scopeIds = ArrayUtil.append(scopeIds, scopeId)-->Line_12 $$ preferenceMap.put("scopeIds", scopeIds)[ FD ]
Line_2 $$ protected void testExportImportAssetEntries(List<Group> scopeGroups) throws Exception -->Line_11 $$ preferenceMap.put("assetEntryXml", getAssetEntriesXmls(assetEntries))[ CD ]
Line_2 $$ protected void testExportImportAssetEntries(List<Group> scopeGroups) throws Exception -->Line_10 $$ Map<String, String[]> preferenceMap = new HashMap()[ CD ]
Line_5 $$ for (Group scopeGroup : scopeGroups) -->Line_7 $$ String scopeId = AssetPublisherUtil.getScopeId(scopeGroup, group.getGroupId())[ FD ]
Line_2 $$ protected void testExportImportAssetEntries(List<Group> scopeGroups) throws Exception -->Line_17 $$ assertAssetEntries(assetEntries, actualAssetEntries)[ CD ]
Line_2 $$ protected void testExportImportAssetEntries(List<Group> scopeGroups) throws Exception -->Line_12 $$ preferenceMap.put("scopeIds", scopeIds)[ CD ]
Line_2 $$ protected void testExportImportAssetEntries(List<Group> scopeGroups) throws Exception -->Line_14 $$ String[] importedScopeIds = importedPortletPreferences.getValues("scopeIds", null)[ CD ]
Line_10 $$ Map<String, String[]> preferenceMap = new HashMap()-->Line_11 $$ preferenceMap.put("assetEntryXml", getAssetEntriesXmls(assetEntries))[ FD ]
Line_2 $$ protected void testExportImportAssetEntries(List<Group> scopeGroups) throws Exception -->Line_4 $$ String[] scopeIds = new String[0][ CD ]
Line_3 $$ List<AssetEntry> assetEntries = new ArrayList()-->Line_11 $$ preferenceMap.put("assetEntryXml", getAssetEntriesXmls(assetEntries))[ FD ]
Line_4 $$ String[] scopeIds = new String[0]-->Line_8 $$ scopeIds = ArrayUtil.append(scopeIds, scopeId)[ FD ]
Line_5 $$ for (Group scopeGroup : scopeGroups) -->Line_6 $$ assetEntries = addAssetEntries(scopeGroup, 3, assetEntries)[ FD ]
Line_4 $$ String[] scopeIds = new String[0]-->Line_12 $$ preferenceMap.put("scopeIds", scopeIds)[ FD ]
Line_14 $$ String[] importedScopeIds = importedPortletPreferences.getValues("scopeIds", null)-->Line_15 $$ long[] selectedGroupIds = getGroupIdsFromScopeIds(importedScopeIds, importedLayout)[ FD ]
Line_2 $$ protected void testExportImportAssetEntries(List<Group> scopeGroups) throws Exception -->Line_3 $$ List<AssetEntry> assetEntries = new ArrayList()[ CD ]
Line_15 $$ long[] selectedGroupIds = getGroupIdsFromScopeIds(importedScopeIds, importedLayout)-->Line_16 $$ List<AssetEntry> actualAssetEntries = AssetPublisherUtil.getAssetEntries(new MockPortletRequest(), importedPortletPreferences, _permissionChecker, selectedGroupIds, false, false)[ FD ]
Line_10 $$ Map<String, String[]> preferenceMap = new HashMap()-->Line_13 $$ PortletPreferences importedPortletPreferences = getImportedPortletPreferences(preferenceMap)[ FD ]
Line_2 $$ protected void testExportImportAssetEntries(List<Group> scopeGroups) throws Exception -->Line_13 $$ PortletPreferences importedPortletPreferences = getImportedPortletPreferences(preferenceMap)[ CD ]
Line_3 $$ List<AssetEntry> assetEntries = new ArrayList()-->Line_17 $$ assertAssetEntries(assetEntries, actualAssetEntries)[ FD ]
Line_10 $$ Map<String, String[]> preferenceMap = new HashMap()-->Line_12 $$ preferenceMap.put("scopeIds", scopeIds)[ FD ]
Line_6 $$ assetEntries = addAssetEntries(scopeGroup, 3, assetEntries)-->Line_17 $$ assertAssetEntries(assetEntries, actualAssetEntries)[ FD ]
Line_13 $$ PortletPreferences importedPortletPreferences = getImportedPortletPreferences(preferenceMap)-->Line_14 $$ String[] importedScopeIds = importedPortletPreferences.getValues("scopeIds", null)[ FD ]
Line_2 $$ protected void testExportImportAssetEntries(List<Group> scopeGroups) throws Exception -->Line_15 $$ long[] selectedGroupIds = getGroupIdsFromScopeIds(importedScopeIds, importedLayout)[ CD ]
Line_6 $$ assetEntries = addAssetEntries(scopeGroup, 3, assetEntries)-->Line_11 $$ preferenceMap.put("assetEntryXml", getAssetEntriesXmls(assetEntries))[ FD ]
Line_13 $$ PortletPreferences importedPortletPreferences = getImportedPortletPreferences(preferenceMap)-->Line_16 $$ List<AssetEntry> actualAssetEntries = AssetPublisherUtil.getAssetEntries(new MockPortletRequest(), importedPortletPreferences, _permissionChecker, selectedGroupIds, false, false)[ FD ]
Line_16 $$ List<AssetEntry> actualAssetEntries = AssetPublisherUtil.getAssetEntries(new MockPortletRequest(), importedPortletPreferences, _permissionChecker, selectedGroupIds, false, false)-->Line_17 $$ assertAssetEntries(assetEntries, actualAssetEntries)[ FD ]
Line_7 $$ String scopeId = AssetPublisherUtil.getScopeId(scopeGroup, group.getGroupId())-->Line_8 $$ scopeIds = ArrayUtil.append(scopeIds, scopeId)[ FD ]
