Line_40 $$ Element element = (Element) node-->Line_74 $$ String text = ((Text) element.getFirstChild()).getData().trim()[ FD ]
Line_40 $$ Element element = (Element) node-->Line_82 $$ placementPolicyElement = element[ FD ]
Line_40 $$ Element element = (Element) node-->Line_81 $$ if ("queuePlacementPolicy".equals(element.getTagName())) [ FD ]
Line_38 $$ Node node = elements.item(i)-->Line_39 $$ if (node instanceof Element) [ FD ]
Line_40 $$ Element element = (Element) node-->Line_78 $$ if ("defaultQueueSchedulingPolicy".equals(element.getTagName()) || "defaultQueueSchedulingMode".equals(element.getTagName())) [ FD ]
Line_57 $$ if ("userMaxAppsDefault".equals(element.getTagName())) -->Line_60 $$ userMaxAppsDefault = val[ CD ]
Line_98 $$ Configuration conf = getConfig()-->Line_102 $$ newPlacementPolicy = QueuePlacementPolicy.fromConfiguration(conf, configuredQueues)[ FD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_29 $$ DocumentBuilder builder = docBuilderFactory.newDocumentBuilder()[ CD ]
Line_36 $$ Element placementPolicyElement = null-->Line_99 $$ if (placementPolicyElement != null) [ FD ]
Line_43 $$ if ("user".equals(element.getTagName())) -->Line_57 $$ if ("userMaxAppsDefault".equals(element.getTagName())) [ CD ]
Line_3 $$ if (allocFile == null) -->Line_4 $$ return[ CD ]
Line_69 $$ if ("queueMaxAppsDefault".equals(element.getTagName())) -->Line_71 $$ int val = Integer.parseInt(text)[ CD ]
Line_52 $$ String text = ((Text) field.getFirstChild()).getData().trim()-->Line_71 $$ int val = Integer.parseInt(text)[ FD ]
Line_23 $$ Map<FSQueueType, Set<String>> configuredQueues = new HashMap<FSQueueType, Set<String>>()-->Line_25 $$ configuredQueues.put(queueType, new HashSet<String>())[ FD ]
Line_43 $$ if ("user".equals(element.getTagName())) -->Line_46 $$ for (int j = 0; j < fields.getLength(); j++) [ CD ]
Line_65 $$ if ("defaultMinSharePreemptionTimeout".equals(element.getTagName())) -->Line_66 $$ String text = ((Text) element.getFirstChild()).getData().trim()[ CD ]
Line_40 $$ Element element = (Element) node-->Line_90 $$ if (element.getAttribute("name").equalsIgnoreCase("root")) [ FD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_17 $$ int queueMaxAppsDefault = Integer.MAX_VALUE[ CD ]
Line_53 $$ int val = Integer.parseInt(text)-->Line_68 $$ defaultMinSharePreemptionTimeout = val[ FD ]
Line_69 $$ if ("queueMaxAppsDefault".equals(element.getTagName())) -->Line_72 $$ queueMaxAppsDefault = val[ CD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_19 $$ long fairSharePreemptionTimeout = Long.MAX_VALUE[ CD ]
Line_27 $$ DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance()-->Line_28 $$ docBuilderFactory.setIgnoringComments(true)[ FD ]
Line_65 $$ if ("defaultMinSharePreemptionTimeout".equals(element.getTagName())) -->Line_69 $$ if ("queueMaxAppsDefault".equals(element.getTagName())) [ CD ]
Line_76 $$ val = Math.min(val, 1.0f)-->Line_77 $$ queueMaxAMShareDefault = val[ FD ]
Line_88 $$ for (Element element : queueElements) -->Line_96 $$ loadQueue(parent, element, minQueueResources, maxQueueResources, queueMaxApps, userMaxApps, queueMaxAMShares, queueWeights, queuePolicies, minSharePreemptionTimeouts, queueAcls, configuredQueues)[ FD ]
Line_23 $$ Map<FSQueueType, Set<String>> configuredQueues = new HashMap<FSQueueType, Set<String>>()-->Line_100 $$ newPlacementPolicy = QueuePlacementPolicy.fromXml(placementPolicyElement, configuredQueues, conf)[ FD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_35 $$ List<Element> queueElements = new ArrayList<Element>()[ CD ]
Line_34 $$ NodeList elements = root.getChildNodes()-->Line_37 $$ for (int i = 0; i < elements.getLength(); i++) [ FD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_6 $$ LOG.info("Loading allocation file " + allocFile)[ CD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_30 $$ Document doc = builder.parse(allocFile)[ CD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_23 $$ Map<FSQueueType, Set<String>> configuredQueues = new HashMap<FSQueueType, Set<String>>()[ CD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_31 $$ Element root = doc.getDocumentElement()[ CD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_37 $$ for (int i = 0; i < elements.getLength(); i++) [ CD ]
Line_37 $$ for (int i = 0; i < elements.getLength(); i++) -->Line_38 $$ Node node = elements.item(i)[ CD ]
Line_41 $$ if ("queue".equals(element.getTagName()) || "pool".equals(element.getTagName())) -->Line_42 $$ queueElements.add(element)[ CD ]
Line_45 $$ NodeList fields = element.getChildNodes()-->Line_47 $$ Node fieldNode = fields.item(j)[ FD ]
Line_73 $$ if ("queueMaxAMShareDefault".equals(element.getTagName())) -->Line_75 $$ float val = Float.parseFloat(text)[ CD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_9 $$ Map<String, Integer> queueMaxApps = new HashMap<String, Integer>()[ CD ]
Line_40 $$ Element element = (Element) node-->Line_58 $$ String text = ((Text) element.getFirstChild()).getData().trim()[ FD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_107 $$ reloadListener.onReload(info)[ CD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_12 $$ Map<String, ResourceWeights> queueWeights = new HashMap<String, ResourceWeights>()[ CD ]
Line_90 $$ if (element.getAttribute("name").equalsIgnoreCase("root")) -->Line_91 $$ if (queueElements.size() > 1) [ CD ]
Line_76 $$ val = Math.min(val, 1.0f)-->Line_72 $$ queueMaxAppsDefault = val[ FD ]
Line_52 $$ String text = ((Text) field.getFirstChild()).getData().trim()-->Line_75 $$ float val = Float.parseFloat(text)[ FD ]
Line_82 $$ placementPolicyElement = element-->Line_99 $$ if (placementPolicyElement != null) [ FD ]
Line_41 $$ if ("queue".equals(element.getTagName()) || "pool".equals(element.getTagName())) -->Line_43 $$ if ("user".equals(element.getTagName())) [ CD ]
Line_73 $$ if ("queueMaxAMShareDefault".equals(element.getTagName())) -->Line_74 $$ String text = ((Text) element.getFirstChild()).getData().trim()[ CD ]
Line_40 $$ Element element = (Element) node-->Line_45 $$ NodeList fields = element.getChildNodes()[ FD ]
Line_53 $$ int val = Integer.parseInt(text)-->Line_76 $$ val = Math.min(val, 1.0f)[ FD ]
Line_99 $$ if (placementPolicyElement != null) -->Line_100 $$ newPlacementPolicy = QueuePlacementPolicy.fromXml(placementPolicyElement, configuredQueues, conf)[ CD ]
Line_69 $$ if ("queueMaxAppsDefault".equals(element.getTagName())) -->Line_70 $$ String text = ((Text) element.getFirstChild()).getData().trim()[ CD ]
Line_37 $$ for (int i = 0; i < elements.getLength(); i++) -->Line_38 $$ Node node = elements.item(i)[ FD ]
Line_21 $$ SchedulingPolicy defaultSchedPolicy = SchedulingPolicy.DEFAULT_POLICY-->Line_80 $$ defaultSchedPolicy = SchedulingPolicy.parse(text)[ FD ]
Line_78 $$ if ("defaultQueueSchedulingPolicy".equals(element.getTagName()) || "defaultQueueSchedulingMode".equals(element.getTagName())) -->Line_81 $$ if ("queuePlacementPolicy".equals(element.getTagName())) [ CD ]
Line_39 $$ if (node instanceof Element) -->Line_41 $$ if ("queue".equals(element.getTagName()) || "pool".equals(element.getTagName())) [ CD ]
Line_34 $$ NodeList elements = root.getChildNodes()-->Line_38 $$ Node node = elements.item(i)[ FD ]
Line_53 $$ int val = Integer.parseInt(text)-->Line_77 $$ queueMaxAMShareDefault = val[ FD ]
Line_46 $$ for (int j = 0; j < fields.getLength(); j++) -->Line_48 $$ if (!(fieldNode instanceof Element))[ CD ]
Line_27 $$ DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance()-->Line_29 $$ DocumentBuilder builder = docBuilderFactory.newDocumentBuilder()[ FD ]
Line_89 $$ String parent = "root"-->Line_94 $$ parent = null[ FD ]
Line_13 $$ Map<String, SchedulingPolicy> queuePolicies = new HashMap<String, SchedulingPolicy>()-->Line_96 $$ loadQueue(parent, element, minQueueResources, maxQueueResources, queueMaxApps, userMaxApps, queueMaxAMShares, queueWeights, queuePolicies, minSharePreemptionTimeouts, queueAcls, configuredQueues)[ FD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_3 $$ if (allocFile == null) [ CD ]
Line_46 $$ for (int j = 0; j < fields.getLength(); j++) -->Line_50 $$ Element field = (Element) fieldNode[ CD ]
Line_46 $$ for (int j = 0; j < fields.getLength(); j++) -->Line_51 $$ if ("maxRunningApps".equals(field.getTagName())) [ CD ]
Line_36 $$ Element placementPolicyElement = null-->Line_100 $$ newPlacementPolicy = QueuePlacementPolicy.fromXml(placementPolicyElement, configuredQueues, conf)[ FD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_14 $$ Map<String, Long> minSharePreemptionTimeouts = new HashMap<String, Long>()[ CD ]
Line_8 $$ Map<String, Resource> maxQueueResources = new HashMap<String, Resource>()-->Line_96 $$ loadQueue(parent, element, minQueueResources, maxQueueResources, queueMaxApps, userMaxApps, queueMaxAMShares, queueWeights, queuePolicies, minSharePreemptionTimeouts, queueAcls, configuredQueues)[ FD ]
Line_40 $$ Element element = (Element) node-->Line_73 $$ if ("queueMaxAMShareDefault".equals(element.getTagName())) [ FD ]
Line_40 $$ Element element = (Element) node-->Line_44 $$ String userName = element.getAttribute("name")[ FD ]
Line_61 $$ if ("fairSharePreemptionTimeout".equals(element.getTagName())) -->Line_64 $$ fairSharePreemptionTimeout = val[ CD ]
Line_51 $$ if ("maxRunningApps".equals(field.getTagName())) -->Line_52 $$ String text = ((Text) field.getFirstChild()).getData().trim()[ CD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_28 $$ docBuilderFactory.setIgnoringComments(true)[ CD ]
Line_31 $$ Element root = doc.getDocumentElement()-->Line_34 $$ NodeList elements = root.getChildNodes()[ FD ]
Line_40 $$ Element element = (Element) node-->Line_69 $$ if ("queueMaxAppsDefault".equals(element.getTagName())) [ FD ]
Line_104 $$ AllocationConfiguration info = new AllocationConfiguration(minQueueResources, maxQueueResources, queueMaxApps, userMaxApps, queueWeights, queueMaxAMShares, userMaxAppsDefault, queueMaxAppsDefault, queueMaxAMShareDefault, queuePolicies, defaultSchedPolicy, minSharePreemptionTimeouts, queueAcls, fairSharePreemptionTimeout, defaultMinSharePreemptionTimeout, newPlacementPolicy, configuredQueues)-->Line_107 $$ reloadListener.onReload(info)[ FD ]
Line_76 $$ val = Math.min(val, 1.0f)-->Line_60 $$ userMaxAppsDefault = val[ FD ]
Line_35 $$ List<Element> queueElements = new ArrayList<Element>()-->Line_42 $$ queueElements.add(element)[ FD ]
Line_53 $$ int val = Integer.parseInt(text)-->Line_54 $$ userMaxApps.put(userName, val)[ FD ]
Line_40 $$ Element element = (Element) node-->Line_65 $$ if ("defaultMinSharePreemptionTimeout".equals(element.getTagName())) [ FD ]
Line_53 $$ int val = Integer.parseInt(text)-->Line_60 $$ userMaxAppsDefault = val[ FD ]
Line_53 $$ int val = Integer.parseInt(text)-->Line_72 $$ queueMaxAppsDefault = val[ FD ]
Line_73 $$ if ("queueMaxAMShareDefault".equals(element.getTagName())) -->Line_76 $$ val = Math.min(val, 1.0f)[ CD ]
Line_100 $$ newPlacementPolicy = QueuePlacementPolicy.fromXml(placementPolicyElement, configuredQueues, conf)-->Line_102 $$ newPlacementPolicy = QueuePlacementPolicy.fromConfiguration(conf, configuredQueues)[ FD ]
Line_18 $$ float queueMaxAMShareDefault = -1.0f-->Line_77 $$ queueMaxAMShareDefault = val[ FD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_16 $$ int userMaxAppsDefault = Integer.MAX_VALUE[ CD ]
Line_10 $$ Map<String, Integer> userMaxApps = new HashMap<String, Integer>()-->Line_54 $$ userMaxApps.put(userName, val)[ FD ]
Line_31 $$ Element root = doc.getDocumentElement()-->Line_32 $$ if (!"allocations".equals(root.getTagName()))[ FD ]
Line_45 $$ NodeList fields = element.getChildNodes()-->Line_46 $$ for (int j = 0; j < fields.getLength(); j++) [ FD ]
Line_37 $$ for (int i = 0; i < elements.getLength(); i++) -->Line_39 $$ if (node instanceof Element) [ CD ]
Line_40 $$ Element element = (Element) node-->Line_42 $$ queueElements.add(element)[ FD ]
Line_81 $$ if ("queuePlacementPolicy".equals(element.getTagName())) -->Line_84 $$ LOG.warn("Bad element in allocations file: " + element.getTagName())[ CD ]
Line_17 $$ int queueMaxAppsDefault = Integer.MAX_VALUE-->Line_72 $$ queueMaxAppsDefault = val[ FD ]
Line_23 $$ Map<FSQueueType, Set<String>> configuredQueues = new HashMap<FSQueueType, Set<String>>()-->Line_102 $$ newPlacementPolicy = QueuePlacementPolicy.fromConfiguration(conf, configuredQueues)[ FD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_8 $$ Map<String, Resource> maxQueueResources = new HashMap<String, Resource>()[ CD ]
Line_57 $$ if ("userMaxAppsDefault".equals(element.getTagName())) -->Line_58 $$ String text = ((Text) element.getFirstChild()).getData().trim()[ CD ]
Line_78 $$ if ("defaultQueueSchedulingPolicy".equals(element.getTagName()) || "defaultQueueSchedulingMode".equals(element.getTagName())) -->Line_79 $$ String text = ((Text) element.getFirstChild()).getData().trim()[ CD ]
Line_7 $$ Map<String, Resource> minQueueResources = new HashMap<String, Resource>()-->Line_96 $$ loadQueue(parent, element, minQueueResources, maxQueueResources, queueMaxApps, userMaxApps, queueMaxAMShares, queueWeights, queuePolicies, minSharePreemptionTimeouts, queueAcls, configuredQueues)[ FD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_105 $$ lastSuccessfulReload = clock.getTime()[ CD ]
Line_40 $$ Element element = (Element) node-->Line_62 $$ String text = ((Text) element.getFirstChild()).getData().trim()[ FD ]
Line_40 $$ Element element = (Element) node-->Line_57 $$ if ("userMaxAppsDefault".equals(element.getTagName())) [ FD ]
Line_40 $$ Element element = (Element) node-->Line_61 $$ if ("fairSharePreemptionTimeout".equals(element.getTagName())) [ FD ]
Line_81 $$ if ("queuePlacementPolicy".equals(element.getTagName())) -->Line_82 $$ placementPolicyElement = element[ CD ]
Line_29 $$ DocumentBuilder builder = docBuilderFactory.newDocumentBuilder()-->Line_30 $$ Document doc = builder.parse(allocFile)[ FD ]
Line_35 $$ List<Element> queueElements = new ArrayList<Element>()-->Line_91 $$ if (queueElements.size() > 1) [ FD ]
Line_9 $$ Map<String, Integer> queueMaxApps = new HashMap<String, Integer>()-->Line_96 $$ loadQueue(parent, element, minQueueResources, maxQueueResources, queueMaxApps, userMaxApps, queueMaxAMShares, queueWeights, queuePolicies, minSharePreemptionTimeouts, queueAcls, configuredQueues)[ FD ]
Line_50 $$ Element field = (Element) fieldNode-->Line_51 $$ if ("maxRunningApps".equals(field.getTagName())) [ FD ]
Line_40 $$ Element element = (Element) node-->Line_43 $$ if ("user".equals(element.getTagName())) [ FD ]
Line_94 $$ parent = null-->Line_96 $$ loadQueue(parent, element, minQueueResources, maxQueueResources, queueMaxApps, userMaxApps, queueMaxAMShares, queueWeights, queuePolicies, minSharePreemptionTimeouts, queueAcls, configuredQueues)[ FD ]
Line_16 $$ int userMaxAppsDefault = Integer.MAX_VALUE-->Line_60 $$ userMaxAppsDefault = val[ FD ]
Line_40 $$ Element element = (Element) node-->Line_70 $$ String text = ((Text) element.getFirstChild()).getData().trim()[ FD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_18 $$ float queueMaxAMShareDefault = -1.0f[ CD ]
Line_46 $$ for (int j = 0; j < fields.getLength(); j++) -->Line_47 $$ Node fieldNode = fields.item(j)[ FD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_99 $$ if (placementPolicyElement != null) [ CD ]
Line_43 $$ if ("user".equals(element.getTagName())) -->Line_45 $$ NodeList fields = element.getChildNodes()[ CD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_7 $$ Map<String, Resource> minQueueResources = new HashMap<String, Resource>()[ CD ]
Line_61 $$ if ("fairSharePreemptionTimeout".equals(element.getTagName())) -->Line_65 $$ if ("defaultMinSharePreemptionTimeout".equals(element.getTagName())) [ CD ]
Line_22 $$ QueuePlacementPolicy newPlacementPolicy = null-->Line_102 $$ newPlacementPolicy = QueuePlacementPolicy.fromConfiguration(conf, configuredQueues)[ FD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_22 $$ QueuePlacementPolicy newPlacementPolicy = null[ CD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_20 $$ long defaultMinSharePreemptionTimeout = Long.MAX_VALUE[ CD ]
Line_73 $$ if ("queueMaxAMShareDefault".equals(element.getTagName())) -->Line_78 $$ if ("defaultQueueSchedulingPolicy".equals(element.getTagName()) || "defaultQueueSchedulingMode".equals(element.getTagName())) [ CD ]
Line_52 $$ String text = ((Text) field.getFirstChild()).getData().trim()-->Line_59 $$ int val = Integer.parseInt(text)[ FD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_21 $$ SchedulingPolicy defaultSchedPolicy = SchedulingPolicy.DEFAULT_POLICY[ CD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_27 $$ DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance()[ CD ]
Line_76 $$ val = Math.min(val, 1.0f)-->Line_64 $$ fairSharePreemptionTimeout = val[ FD ]
Line_51 $$ if ("maxRunningApps".equals(field.getTagName())) -->Line_54 $$ userMaxApps.put(userName, val)[ CD ]
Line_57 $$ if ("userMaxAppsDefault".equals(element.getTagName())) -->Line_61 $$ if ("fairSharePreemptionTimeout".equals(element.getTagName())) [ CD ]
Line_52 $$ String text = ((Text) field.getFirstChild()).getData().trim()-->Line_63 $$ long val = Long.parseLong(text) * 1000L[ FD ]
Line_15 $$ Map<String, Map<QueueACL, AccessControlList>> queueAcls = new HashMap<String, Map<QueueACL, AccessControlList>>()-->Line_96 $$ loadQueue(parent, element, minQueueResources, maxQueueResources, queueMaxApps, userMaxApps, queueMaxAMShares, queueWeights, queuePolicies, minSharePreemptionTimeouts, queueAcls, configuredQueues)[ FD ]
Line_82 $$ placementPolicyElement = element-->Line_100 $$ newPlacementPolicy = QueuePlacementPolicy.fromXml(placementPolicyElement, configuredQueues, conf)[ FD ]
Line_22 $$ QueuePlacementPolicy newPlacementPolicy = null-->Line_100 $$ newPlacementPolicy = QueuePlacementPolicy.fromXml(placementPolicyElement, configuredQueues, conf)[ FD ]
Line_40 $$ Element element = (Element) node-->Line_84 $$ LOG.warn("Bad element in allocations file: " + element.getTagName())[ FD ]
Line_23 $$ Map<FSQueueType, Set<String>> configuredQueues = new HashMap<FSQueueType, Set<String>>()-->Line_96 $$ loadQueue(parent, element, minQueueResources, maxQueueResources, queueMaxApps, userMaxApps, queueMaxAMShares, queueWeights, queuePolicies, minSharePreemptionTimeouts, queueAcls, configuredQueues)[ FD ]
Line_52 $$ String text = ((Text) field.getFirstChild()).getData().trim()-->Line_80 $$ defaultSchedPolicy = SchedulingPolicy.parse(text)[ FD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_34 $$ NodeList elements = root.getChildNodes()[ CD ]
Line_53 $$ int val = Integer.parseInt(text)-->Line_64 $$ fairSharePreemptionTimeout = val[ FD ]
Line_14 $$ Map<String, Long> minSharePreemptionTimeouts = new HashMap<String, Long>()-->Line_96 $$ loadQueue(parent, element, minQueueResources, maxQueueResources, queueMaxApps, userMaxApps, queueMaxAMShares, queueWeights, queuePolicies, minSharePreemptionTimeouts, queueAcls, configuredQueues)[ FD ]
Line_24 $$ for (FSQueueType queueType : FSQueueType.values()) -->Line_25 $$ configuredQueues.put(queueType, new HashSet<String>())[ FD ]
Line_40 $$ Element element = (Element) node-->Line_41 $$ if ("queue".equals(element.getTagName()) || "pool".equals(element.getTagName())) [ FD ]
Line_69 $$ if ("queueMaxAppsDefault".equals(element.getTagName())) -->Line_73 $$ if ("queueMaxAMShareDefault".equals(element.getTagName())) [ CD ]
Line_11 $$ Map<String, Float> queueMaxAMShares = new HashMap<String, Float>()-->Line_96 $$ loadQueue(parent, element, minQueueResources, maxQueueResources, queueMaxApps, userMaxApps, queueMaxAMShares, queueWeights, queuePolicies, minSharePreemptionTimeouts, queueAcls, configuredQueues)[ FD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_11 $$ Map<String, Float> queueMaxAMShares = new HashMap<String, Float>()[ CD ]
Line_73 $$ if ("queueMaxAMShareDefault".equals(element.getTagName())) -->Line_77 $$ queueMaxAMShareDefault = val[ CD ]
Line_61 $$ if ("fairSharePreemptionTimeout".equals(element.getTagName())) -->Line_62 $$ String text = ((Text) element.getFirstChild()).getData().trim()[ CD ]
Line_52 $$ String text = ((Text) field.getFirstChild()).getData().trim()-->Line_67 $$ long val = Long.parseLong(text) * 1000L[ FD ]
Line_39 $$ if (node instanceof Element) -->Line_40 $$ Element element = (Element) node[ CD ]
Line_43 $$ if ("user".equals(element.getTagName())) -->Line_44 $$ String userName = element.getAttribute("name")[ CD ]
Line_65 $$ if ("defaultMinSharePreemptionTimeout".equals(element.getTagName())) -->Line_68 $$ defaultMinSharePreemptionTimeout = val[ CD ]
Line_40 $$ Element element = (Element) node-->Line_79 $$ String text = ((Text) element.getFirstChild()).getData().trim()[ FD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_104 $$ AllocationConfiguration info = new AllocationConfiguration(minQueueResources, maxQueueResources, queueMaxApps, userMaxApps, queueWeights, queueMaxAMShares, userMaxAppsDefault, queueMaxAppsDefault, queueMaxAMShareDefault, queuePolicies, defaultSchedPolicy, minSharePreemptionTimeouts, queueAcls, fairSharePreemptionTimeout, defaultMinSharePreemptionTimeout, newPlacementPolicy, configuredQueues)[ CD ]
Line_50 $$ Element field = (Element) fieldNode-->Line_52 $$ String text = ((Text) field.getFirstChild()).getData().trim()[ FD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_13 $$ Map<String, SchedulingPolicy> queuePolicies = new HashMap<String, SchedulingPolicy>()[ CD ]
Line_12 $$ Map<String, ResourceWeights> queueWeights = new HashMap<String, ResourceWeights>()-->Line_96 $$ loadQueue(parent, element, minQueueResources, maxQueueResources, queueMaxApps, userMaxApps, queueMaxAMShares, queueWeights, queuePolicies, minSharePreemptionTimeouts, queueAcls, configuredQueues)[ FD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_10 $$ Map<String, Integer> userMaxApps = new HashMap<String, Integer>()[ CD ]
Line_40 $$ Element element = (Element) node-->Line_66 $$ String text = ((Text) element.getFirstChild()).getData().trim()[ FD ]
Line_90 $$ if (element.getAttribute("name").equalsIgnoreCase("root")) -->Line_94 $$ parent = null[ CD ]
Line_78 $$ if ("defaultQueueSchedulingPolicy".equals(element.getTagName()) || "defaultQueueSchedulingMode".equals(element.getTagName())) -->Line_80 $$ defaultSchedPolicy = SchedulingPolicy.parse(text)[ CD ]
Line_51 $$ if ("maxRunningApps".equals(field.getTagName())) -->Line_53 $$ int val = Integer.parseInt(text)[ CD ]
Line_30 $$ Document doc = builder.parse(allocFile)-->Line_31 $$ Element root = doc.getDocumentElement()[ FD ]
Line_19 $$ long fairSharePreemptionTimeout = Long.MAX_VALUE-->Line_64 $$ fairSharePreemptionTimeout = val[ FD ]
Line_98 $$ Configuration conf = getConfig()-->Line_100 $$ newPlacementPolicy = QueuePlacementPolicy.fromXml(placementPolicyElement, configuredQueues, conf)[ FD ]
Line_10 $$ Map<String, Integer> userMaxApps = new HashMap<String, Integer>()-->Line_96 $$ loadQueue(parent, element, minQueueResources, maxQueueResources, queueMaxApps, userMaxApps, queueMaxAMShares, queueWeights, queuePolicies, minSharePreemptionTimeouts, queueAcls, configuredQueues)[ FD ]
Line_99 $$ if (placementPolicyElement != null) -->Line_102 $$ newPlacementPolicy = QueuePlacementPolicy.fromConfiguration(conf, configuredQueues)[ CD ]
Line_89 $$ String parent = "root"-->Line_96 $$ loadQueue(parent, element, minQueueResources, maxQueueResources, queueMaxApps, userMaxApps, queueMaxAMShares, queueWeights, queuePolicies, minSharePreemptionTimeouts, queueAcls, configuredQueues)[ FD ]
Line_20 $$ long defaultMinSharePreemptionTimeout = Long.MAX_VALUE-->Line_68 $$ defaultMinSharePreemptionTimeout = val[ FD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_98 $$ Configuration conf = getConfig()[ CD ]
Line_40 $$ Element element = (Element) node-->Line_96 $$ loadQueue(parent, element, minQueueResources, maxQueueResources, queueMaxApps, userMaxApps, queueMaxAMShares, queueWeights, queuePolicies, minSharePreemptionTimeouts, queueAcls, configuredQueues)[ FD ]
Line_44 $$ String userName = element.getAttribute("name")-->Line_54 $$ userMaxApps.put(userName, val)[ FD ]
Line_57 $$ if ("userMaxAppsDefault".equals(element.getTagName())) -->Line_59 $$ int val = Integer.parseInt(text)[ CD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_32 $$ if (!"allocations".equals(root.getTagName()))[ CD ]
Line_88 $$ for (Element element : queueElements) -->Line_90 $$ if (element.getAttribute("name").equalsIgnoreCase("root")) [ FD ]
Line_76 $$ val = Math.min(val, 1.0f)-->Line_68 $$ defaultMinSharePreemptionTimeout = val[ FD ]
Line_52 $$ String text = ((Text) field.getFirstChild()).getData().trim()-->Line_53 $$ int val = Integer.parseInt(text)[ FD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_15 $$ Map<String, Map<QueueACL, AccessControlList>> queueAcls = new HashMap<String, Map<QueueACL, AccessControlList>>()[ CD ]
Line_2 $$ public synchronized void reloadAllocations() throws IOException, ParserConfigurationException, SAXException, AllocationConfigurationException -->Line_36 $$ Element placementPolicyElement = null[ CD ]
Line_36 $$ Element placementPolicyElement = null-->Line_82 $$ placementPolicyElement = element[ FD ]
Line_46 $$ for (int j = 0; j < fields.getLength(); j++) -->Line_47 $$ Node fieldNode = fields.item(j)[ CD ]
