Line_22 $$ VelocityView vv = new VelocityView() -->Line_26 $$ assertTrue(context.get("foo").equals("bar"))[ CD ]
Line_2 $$ private void testValidTemplateName(final Exception mergeTemplateFailureException) throws Exception -->Line_17 $$ given(wac.getBeansOfType(VelocityConfig.class, true, false)).willReturn(configurers)[ CD ]
Line_22 $$ VelocityView vv = new VelocityView() -->Line_28 $$ if (mergeTemplateFailureException != null) [ CD ]
Line_2 $$ private void testValidTemplateName(final Exception mergeTemplateFailureException) throws Exception -->Line_9 $$ final Template expectedTemplate = new Template()[ CD ]
Line_2 $$ private void testValidTemplateName(final Exception mergeTemplateFailureException) throws Exception -->Line_6 $$ WebApplicationContext wac = mock(WebApplicationContext.class)[ CD ]
Line_10 $$ VelocityConfig vc = new VelocityConfig() -->Line_16 $$ configurers.put("velocityConfigurer", vc)[ FD ]
Line_22 $$ VelocityView vv = new VelocityView() -->Line_27 $$ assertTrue(response == expectedResponse)[ CD ]
Line_22 $$ VelocityView vv = new VelocityView() -->Line_25 $$ assertTrue(context.getKeys().length >= 1)[ FD ]
Line_6 $$ WebApplicationContext wac = mock(WebApplicationContext.class)-->Line_34 $$ vv.setApplicationContext(wac)[ FD ]
Line_2 $$ private void testValidTemplateName(final Exception mergeTemplateFailureException) throws Exception -->Line_4 $$ model.put("foo", "bar")[ CD ]
Line_2 $$ private void testValidTemplateName(final Exception mergeTemplateFailureException) throws Exception -->Line_28 $$ if (mergeTemplateFailureException != null) [ FD ]
Line_2 $$ private void testValidTemplateName(final Exception mergeTemplateFailureException) throws Exception -->Line_7 $$ MockServletContext sc = new MockServletContext()[ CD ]
Line_2 $$ private void testValidTemplateName(final Exception mergeTemplateFailureException) throws Exception -->Line_19 $$ given(wac.getBean("requestDataValueProcessor", RequestDataValueProcessor.class)).willReturn(null)[ CD ]
Line_22 $$ VelocityView vv = new VelocityView() -->Line_26 $$ assertTrue(context.get("foo").equals("bar"))[ FD ]
Line_6 $$ WebApplicationContext wac = mock(WebApplicationContext.class)-->Line_17 $$ given(wac.getBeansOfType(VelocityConfig.class, true, false)).willReturn(configurers)[ FD ]
Line_6 $$ WebApplicationContext wac = mock(WebApplicationContext.class)-->Line_19 $$ given(wac.getBean("requestDataValueProcessor", RequestDataValueProcessor.class)).willReturn(null)[ FD ]
Line_5 $$ final String templateName = "test.vm"-->Line_33 $$ vv.setUrl(templateName)[ FD ]
Line_37 $$ if (mergeTemplateFailureException != null) -->Line_38 $$ fail()[ CD ]
Line_2 $$ private void testValidTemplateName(final Exception mergeTemplateFailureException) throws Exception -->Line_8 $$ sc.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, wac)[ CD ]
Line_2 $$ private void testValidTemplateName(final Exception mergeTemplateFailureException) throws Exception -->Line_18 $$ given(wac.getServletContext()).willReturn(sc)[ CD ]
Line_6 $$ WebApplicationContext wac = mock(WebApplicationContext.class)-->Line_18 $$ given(wac.getServletContext()).willReturn(sc)[ FD ]
Line_10 $$ VelocityConfig vc = new VelocityConfig() -->Line_12 $$ return new TestVelocityEngine(templateName, expectedTemplate)[ CD ]
Line_3 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_36 $$ vv.render(model, request, expectedResponse)[ FD ]
Line_22 $$ VelocityView vv = new VelocityView() -->Line_25 $$ assertTrue(context.getKeys().length >= 1)[ CD ]
Line_3 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_4 $$ model.put("foo", "bar")[ FD ]
Line_2 $$ private void testValidTemplateName(final Exception mergeTemplateFailureException) throws Exception -->Line_42 $$ assertEquals(ex, mergeTemplateFailureException)[ FD ]
Line_2 $$ private void testValidTemplateName(final Exception mergeTemplateFailureException) throws Exception -->Line_37 $$ if (mergeTemplateFailureException != null) [ FD ]
Line_2 $$ private void testValidTemplateName(final Exception mergeTemplateFailureException) throws Exception -->Line_3 $$ Map<String, Object> model = new HashMap<String, Object>()[ CD ]
Line_2 $$ private void testValidTemplateName(final Exception mergeTemplateFailureException) throws Exception -->Line_33 $$ vv.setUrl(templateName)[ CD ]
Line_2 $$ private void testValidTemplateName(final Exception mergeTemplateFailureException) throws Exception -->Line_16 $$ configurers.put("velocityConfigurer", vc)[ CD ]
Line_6 $$ WebApplicationContext wac = mock(WebApplicationContext.class)-->Line_8 $$ sc.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, wac)[ FD ]
Line_2 $$ private void testValidTemplateName(final Exception mergeTemplateFailureException) throws Exception -->Line_34 $$ vv.setApplicationContext(wac)[ CD ]
Line_2 $$ private void testValidTemplateName(final Exception mergeTemplateFailureException) throws Exception -->Line_5 $$ final String templateName = "test.vm"[ CD ]
Line_2 $$ private void testValidTemplateName(final Exception mergeTemplateFailureException) throws Exception -->Line_10 $$ VelocityConfig vc = new VelocityConfig() [ CD ]
Line_7 $$ MockServletContext sc = new MockServletContext()-->Line_8 $$ sc.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, wac)[ FD ]
Line_7 $$ MockServletContext sc = new MockServletContext()-->Line_18 $$ given(wac.getServletContext()).willReturn(sc)[ FD ]
Line_22 $$ VelocityView vv = new VelocityView() -->Line_24 $$ assertTrue(template == expectedTemplate)[ CD ]
Line_2 $$ private void testValidTemplateName(final Exception mergeTemplateFailureException) throws Exception -->Line_41 $$ assertNotNull(mergeTemplateFailureException)[ FD ]
