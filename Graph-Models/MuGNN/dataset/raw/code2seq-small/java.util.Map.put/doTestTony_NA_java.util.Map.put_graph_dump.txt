Line_2 $$ protected void doTestTony(PropertyValues pvs) throws Exception -->Line_6 $$ assertTrue("Contains age", pvs.contains("age"))[ FD ]
Line_9 $$ Map<String, String> m = new HashMap<String, String>()-->Line_10 $$ m.put("forname", "Tony")[ FD ]
Line_2 $$ protected void doTestTony(PropertyValues pvs) throws Exception -->Line_7 $$ assertTrue("Doesn't contain tory", !pvs.contains("tory"))[ FD ]
Line_2 $$ protected void doTestTony(PropertyValues pvs) throws Exception -->Line_8 $$ PropertyValue[] ps = pvs.getPropertyValues()[ FD ]
Line_2 $$ protected void doTestTony(PropertyValues pvs) throws Exception -->Line_3 $$ assertTrue("Contains 3", pvs.getPropertyValues().length == 3)[ FD ]
Line_2 $$ protected void doTestTony(PropertyValues pvs) throws Exception -->Line_10 $$ m.put("forname", "Tony")[ CD ]
Line_2 $$ protected void doTestTony(PropertyValues pvs) throws Exception -->Line_6 $$ assertTrue("Contains age", pvs.contains("age"))[ CD ]
Line_9 $$ Map<String, String> m = new HashMap<String, String>()-->Line_20 $$ assertTrue("Map size is 0", m.size() == 0)[ FD ]
Line_2 $$ protected void doTestTony(PropertyValues pvs) throws Exception -->Line_5 $$ assertTrue("Contains surname", pvs.contains("surname"))[ FD ]
Line_13 $$ for (int i = 0; i < ps.length; i++) -->Line_18 $$ m.remove(ps[i].getName())[ CD ]
Line_2 $$ protected void doTestTony(PropertyValues pvs) throws Exception -->Line_9 $$ Map<String, String> m = new HashMap<String, String>()[ CD ]
Line_2 $$ protected void doTestTony(PropertyValues pvs) throws Exception -->Line_3 $$ assertTrue("Contains 3", pvs.getPropertyValues().length == 3)[ CD ]
Line_2 $$ protected void doTestTony(PropertyValues pvs) throws Exception -->Line_5 $$ assertTrue("Contains surname", pvs.contains("surname"))[ CD ]
Line_14 $$ Object val = m.get(ps[i].getName())-->Line_17 $$ assertTrue("val matches expected", val.equals(ps[i].getValue()))[ FD ]
Line_2 $$ protected void doTestTony(PropertyValues pvs) throws Exception -->Line_20 $$ assertTrue("Map size is 0", m.size() == 0)[ CD ]
Line_2 $$ protected void doTestTony(PropertyValues pvs) throws Exception -->Line_12 $$ m.put("age", "50")[ CD ]
Line_2 $$ protected void doTestTony(PropertyValues pvs) throws Exception -->Line_13 $$ for (int i = 0; i < ps.length; i++) [ CD ]
Line_13 $$ for (int i = 0; i < ps.length; i++) -->Line_16 $$ assertTrue("Val i string", val instanceof String)[ CD ]
Line_2 $$ protected void doTestTony(PropertyValues pvs) throws Exception -->Line_4 $$ assertTrue("Contains forname", pvs.contains("forname"))[ CD ]
Line_9 $$ Map<String, String> m = new HashMap<String, String>()-->Line_14 $$ Object val = m.get(ps[i].getName())[ FD ]
Line_13 $$ for (int i = 0; i < ps.length; i++) -->Line_15 $$ assertTrue("Can't have unexpected value", val != null)[ CD ]
Line_2 $$ protected void doTestTony(PropertyValues pvs) throws Exception -->Line_4 $$ assertTrue("Contains forname", pvs.contains("forname"))[ FD ]
Line_9 $$ Map<String, String> m = new HashMap<String, String>()-->Line_11 $$ m.put("surname", "Blair")[ FD ]
Line_2 $$ protected void doTestTony(PropertyValues pvs) throws Exception -->Line_11 $$ m.put("surname", "Blair")[ CD ]
Line_13 $$ for (int i = 0; i < ps.length; i++) -->Line_17 $$ assertTrue("val matches expected", val.equals(ps[i].getValue()))[ CD ]
Line_9 $$ Map<String, String> m = new HashMap<String, String>()-->Line_12 $$ m.put("age", "50")[ FD ]
Line_9 $$ Map<String, String> m = new HashMap<String, String>()-->Line_18 $$ m.remove(ps[i].getName())[ FD ]
Line_2 $$ protected void doTestTony(PropertyValues pvs) throws Exception -->Line_8 $$ PropertyValue[] ps = pvs.getPropertyValues()[ CD ]
Line_13 $$ for (int i = 0; i < ps.length; i++) -->Line_14 $$ Object val = m.get(ps[i].getName())[ CD ]
Line_2 $$ protected void doTestTony(PropertyValues pvs) throws Exception -->Line_7 $$ assertTrue("Doesn't contain tory", !pvs.contains("tory"))[ CD ]
