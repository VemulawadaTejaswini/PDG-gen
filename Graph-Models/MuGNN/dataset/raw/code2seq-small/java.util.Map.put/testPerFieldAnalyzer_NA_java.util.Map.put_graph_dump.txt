Line_7 $$ for (int i = 0; i < numFields; i++) -->Line_9 $$ if (randomBoolean()) [ CD ]
Line_31 $$ if (randomBoolean()) -->Line_32 $$ selectedFields.add("field" + i)[ CD ]
Line_5 $$ XContentBuilder mapping = jsonBuilder().startObject().startObject("type1").startObject("properties")-->Line_18 $$ assertAcked(prepareCreate("test").addAlias(new Alias("alias")).setSettings(settings).addMapping("type1", mapping))[ FD ]
Line_5 $$ XContentBuilder mapping = jsonBuilder().startObject().startObject("type1").startObject("properties")-->Line_16 $$ mapping.endObject().endObject().endObject()[ FD ]
Line_4 $$ Set<String> withTermVectors = new HashSet()-->Line_10 $$ withTermVectors.add(fieldName)[ FD ]
Line_5 $$ XContentBuilder mapping = jsonBuilder().startObject().startObject("type1").startObject("properties")-->Line_12 $$ mapping.startObject(fieldName).field("type", "string").field("term_vector", withTermVectors.contains(fieldName) ? "yes" : "no").endObject()[ FD ]
Line_17 $$ Settings.Builder settings = settingsBuilder().put(indexSettings()).put("index.analysis.analyzer", "standard")-->Line_18 $$ assertAcked(prepareCreate("test").addAlias(new Alias("alias")).setSettings(settings).addMapping("type1", mapping))[ FD ]
Line_2 $$ public void testPerFieldAnalyzer() throws IOException -->Line_17 $$ Settings.Builder settings = settingsBuilder().put(indexSettings()).put("index.analysis.analyzer", "standard")[ CD ]
Line_2 $$ public void testPerFieldAnalyzer() throws IOException -->Line_15 $$ source.endObject()[ CD ]
Line_3 $$ int numFields = 25-->Line_24 $$ for (int i = 0; i < numFields; i++) [ FD ]
Line_2 $$ public void testPerFieldAnalyzer() throws IOException -->Line_38 $$ TermVectorsResponse response = client().prepareTermVectors(indexOrAlias(), "type1", "0").setPerFieldAnalyzer(perFieldAnalyzer).get()[ CD ]
Line_23 $$ Set<String> selectedFields = new HashSet()-->Line_40 $$ response = client().prepareTermVectors(indexOrAlias(), "type1", "0").setSelectedFields(selectedFields.toArray(Strings.EMPTY_ARRAY)).setPerFieldAnalyzer(perFieldAnalyzer).get()[ FD ]
Line_2 $$ public void testPerFieldAnalyzer() throws IOException -->Line_24 $$ for (int i = 0; i < numFields; i++) [ CD ]
Line_2 $$ public void testPerFieldAnalyzer() throws IOException -->Line_19 $$ ensureGreen()[ CD ]
Line_24 $$ for (int i = 0; i < numFields; i++) -->Line_34 $$ if (randomBoolean()) [ CD ]
Line_2 $$ public void testPerFieldAnalyzer() throws IOException -->Line_23 $$ Set<String> selectedFields = new HashSet()[ CD ]
Line_7 $$ for (int i = 0; i < numFields; i++) -->Line_8 $$ String fieldName = "field" + i[ CD ]
Line_8 $$ String fieldName = "field" + i-->Line_10 $$ withTermVectors.add(fieldName)[ FD ]
Line_8 $$ String fieldName = "field" + i-->Line_12 $$ mapping.startObject(fieldName).field("type", "string").field("term_vector", withTermVectors.contains(fieldName) ? "yes" : "no").endObject()[ FD ]
Line_2 $$ public void testPerFieldAnalyzer() throws IOException -->Line_21 $$ refresh()[ CD ]
Line_40 $$ response = client().prepareTermVectors(indexOrAlias(), "type1", "0").setSelectedFields(selectedFields.toArray(Strings.EMPTY_ARRAY)).setPerFieldAnalyzer(perFieldAnalyzer).get()-->Line_41 $$ checkAnalyzedFields(response.getFields(), selectedFields, perFieldAnalyzer)[ FD ]
Line_22 $$ Map<String, String> perFieldAnalyzer = new HashMap()-->Line_39 $$ checkAnalyzedFields(response.getFields(), withTermVectors, perFieldAnalyzer)[ FD ]
Line_23 $$ Set<String> selectedFields = new HashSet()-->Line_41 $$ checkAnalyzedFields(response.getFields(), selectedFields, perFieldAnalyzer)[ FD ]
Line_2 $$ public void testPerFieldAnalyzer() throws IOException -->Line_3 $$ int numFields = 25[ CD ]
Line_25 $$ if (randomBoolean()) -->Line_26 $$ perFieldAnalyzer.put("field" + i, "keyword")[ CD ]
Line_2 $$ public void testPerFieldAnalyzer() throws IOException -->Line_41 $$ checkAnalyzedFields(response.getFields(), selectedFields, perFieldAnalyzer)[ CD ]
Line_22 $$ Map<String, String> perFieldAnalyzer = new HashMap()-->Line_38 $$ TermVectorsResponse response = client().prepareTermVectors(indexOrAlias(), "type1", "0").setPerFieldAnalyzer(perFieldAnalyzer).get()[ FD ]
Line_2 $$ public void testPerFieldAnalyzer() throws IOException -->Line_18 $$ assertAcked(prepareCreate("test").addAlias(new Alias("alias")).setSettings(settings).addMapping("type1", mapping))[ CD ]
Line_22 $$ Map<String, String> perFieldAnalyzer = new HashMap()-->Line_26 $$ perFieldAnalyzer.put("field" + i, "keyword")[ FD ]
Line_2 $$ public void testPerFieldAnalyzer() throws IOException -->Line_20 $$ client().prepareIndex("test", "type1", "0").setSource(source).get()[ CD ]
Line_2 $$ public void testPerFieldAnalyzer() throws IOException -->Line_5 $$ XContentBuilder mapping = jsonBuilder().startObject().startObject("type1").startObject("properties")[ CD ]
Line_23 $$ Set<String> selectedFields = new HashSet()-->Line_32 $$ selectedFields.add("field" + i)[ FD ]
Line_2 $$ public void testPerFieldAnalyzer() throws IOException -->Line_22 $$ Map<String, String> perFieldAnalyzer = new HashMap()[ CD ]
Line_3 $$ int numFields = 25-->Line_7 $$ for (int i = 0; i < numFields; i++) [ FD ]
Line_22 $$ Map<String, String> perFieldAnalyzer = new HashMap()-->Line_29 $$ perFieldAnalyzer.put("non_existing" + i, "keyword")[ FD ]
Line_2 $$ public void testPerFieldAnalyzer() throws IOException -->Line_16 $$ mapping.endObject().endObject().endObject()[ CD ]
Line_23 $$ Set<String> selectedFields = new HashSet()-->Line_35 $$ selectedFields.add("non_existing" + i)[ FD ]
Line_9 $$ if (randomBoolean()) -->Line_10 $$ withTermVectors.add(fieldName)[ CD ]
Line_2 $$ public void testPerFieldAnalyzer() throws IOException -->Line_4 $$ Set<String> withTermVectors = new HashSet()[ CD ]
Line_2 $$ public void testPerFieldAnalyzer() throws IOException -->Line_6 $$ XContentBuilder source = jsonBuilder().startObject()[ CD ]
Line_24 $$ for (int i = 0; i < numFields; i++) -->Line_28 $$ if (randomBoolean()) [ CD ]
Line_4 $$ Set<String> withTermVectors = new HashSet()-->Line_39 $$ checkAnalyzedFields(response.getFields(), withTermVectors, perFieldAnalyzer)[ FD ]
Line_38 $$ TermVectorsResponse response = client().prepareTermVectors(indexOrAlias(), "type1", "0").setPerFieldAnalyzer(perFieldAnalyzer).get()-->Line_41 $$ checkAnalyzedFields(response.getFields(), selectedFields, perFieldAnalyzer)[ FD ]
Line_38 $$ TermVectorsResponse response = client().prepareTermVectors(indexOrAlias(), "type1", "0").setPerFieldAnalyzer(perFieldAnalyzer).get()-->Line_39 $$ checkAnalyzedFields(response.getFields(), withTermVectors, perFieldAnalyzer)[ FD ]
Line_24 $$ for (int i = 0; i < numFields; i++) -->Line_25 $$ if (randomBoolean()) [ CD ]
Line_2 $$ public void testPerFieldAnalyzer() throws IOException -->Line_7 $$ for (int i = 0; i < numFields; i++) [ CD ]
Line_22 $$ Map<String, String> perFieldAnalyzer = new HashMap()-->Line_41 $$ checkAnalyzedFields(response.getFields(), selectedFields, perFieldAnalyzer)[ FD ]
Line_28 $$ if (randomBoolean()) -->Line_29 $$ perFieldAnalyzer.put("non_existing" + i, "keyword")[ CD ]
Line_2 $$ public void testPerFieldAnalyzer() throws IOException -->Line_39 $$ checkAnalyzedFields(response.getFields(), withTermVectors, perFieldAnalyzer)[ CD ]
Line_8 $$ String fieldName = "field" + i-->Line_13 $$ source.field(fieldName, "some text here")[ FD ]
Line_24 $$ for (int i = 0; i < numFields; i++) -->Line_31 $$ if (randomBoolean()) [ CD ]
Line_22 $$ Map<String, String> perFieldAnalyzer = new HashMap()-->Line_40 $$ response = client().prepareTermVectors(indexOrAlias(), "type1", "0").setSelectedFields(selectedFields.toArray(Strings.EMPTY_ARRAY)).setPerFieldAnalyzer(perFieldAnalyzer).get()[ FD ]
Line_2 $$ public void testPerFieldAnalyzer() throws IOException -->Line_40 $$ response = client().prepareTermVectors(indexOrAlias(), "type1", "0").setSelectedFields(selectedFields.toArray(Strings.EMPTY_ARRAY)).setPerFieldAnalyzer(perFieldAnalyzer).get()[ CD ]
Line_6 $$ XContentBuilder source = jsonBuilder().startObject()-->Line_13 $$ source.field(fieldName, "some text here")[ FD ]
Line_7 $$ for (int i = 0; i < numFields; i++) -->Line_12 $$ mapping.startObject(fieldName).field("type", "string").field("term_vector", withTermVectors.contains(fieldName) ? "yes" : "no").endObject()[ CD ]
Line_34 $$ if (randomBoolean()) -->Line_35 $$ selectedFields.add("non_existing" + i)[ CD ]
Line_38 $$ TermVectorsResponse response = client().prepareTermVectors(indexOrAlias(), "type1", "0").setPerFieldAnalyzer(perFieldAnalyzer).get()-->Line_40 $$ response = client().prepareTermVectors(indexOrAlias(), "type1", "0").setSelectedFields(selectedFields.toArray(Strings.EMPTY_ARRAY)).setPerFieldAnalyzer(perFieldAnalyzer).get()[ FD ]
Line_7 $$ for (int i = 0; i < numFields; i++) -->Line_13 $$ source.field(fieldName, "some text here")[ CD ]
Line_4 $$ Set<String> withTermVectors = new HashSet()-->Line_12 $$ mapping.startObject(fieldName).field("type", "string").field("term_vector", withTermVectors.contains(fieldName) ? "yes" : "no").endObject()[ FD ]
Line_6 $$ XContentBuilder source = jsonBuilder().startObject()-->Line_15 $$ source.endObject()[ FD ]
Line_6 $$ XContentBuilder source = jsonBuilder().startObject()-->Line_20 $$ client().prepareIndex("test", "type1", "0").setSource(source).get()[ FD ]
Line_7 $$ for (int i = 0; i < numFields; i++) -->Line_24 $$ for (int i = 0; i < numFields; i++) [ FD ]
