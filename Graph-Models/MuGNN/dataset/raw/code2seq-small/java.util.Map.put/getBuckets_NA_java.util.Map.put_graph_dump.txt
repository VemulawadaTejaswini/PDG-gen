Line_15 $$ if ((size > (oldAverageSize * bucketLow) && size < (oldAverageSize * bucketHigh)) || (size < minSSTableSize && oldAverageSize < minSSTableSize)) -->Line_17 $$ long totalSize = bucket.size() * oldAverageSize[ CD ]
Line_15 $$ if ((size > (oldAverageSize * bucketLow) && size < (oldAverageSize * bucketHigh)) || (size < minSSTableSize && oldAverageSize < minSSTableSize)) -->Line_16 $$ buckets.remove(oldAverageSize)[ CD ]
Line_2 $$ public static <T> List<List<T>> getBuckets(Collection<Pair<T, Long>> files, double bucketHigh, double bucketLow, long minSSTableSize) -->Line_28 $$ return new ArrayList<List<T>>(buckets.values())[ CD ]
Line_15 $$ if ((size > (oldAverageSize * bucketLow) && size < (oldAverageSize * bucketHigh)) || (size < minSSTableSize && oldAverageSize < minSSTableSize)) -->Line_19 $$ bucket.add(pair.left)[ CD ]
Line_15 $$ if ((size > (oldAverageSize * bucketLow) && size < (oldAverageSize * bucketHigh)) || (size < minSSTableSize && oldAverageSize < minSSTableSize)) -->Line_20 $$ buckets.put(newAverageSize, bucket)[ CD ]
Line_2 $$ public static <T> List<List<T>> getBuckets(Collection<Pair<T, Long>> files, double bucketHigh, double bucketLow, long minSSTableSize) -->Line_3 $$ List<Pair<T, Long>> sortedFiles = new ArrayList<Pair<T, Long>>(files)[ CD ]
Line_3 $$ List<Pair<T, Long>> sortedFiles = new ArrayList<Pair<T, Long>>(files)-->Line_4 $$ Collections.sort(sortedFiles, new Comparator<Pair<T, Long>>() [ FD ]
Line_4 $$ Collections.sort(sortedFiles, new Comparator<Pair<T, Long>>() -->Line_6 $$ return p1.right.compareTo(p2.right)[ CD ]
Line_2 $$ public static <T> List<List<T>> getBuckets(Collection<Pair<T, Long>> files, double bucketHigh, double bucketLow, long minSSTableSize) -->Line_4 $$ Collections.sort(sortedFiles, new Comparator<Pair<T, Long>>() [ CD ]
