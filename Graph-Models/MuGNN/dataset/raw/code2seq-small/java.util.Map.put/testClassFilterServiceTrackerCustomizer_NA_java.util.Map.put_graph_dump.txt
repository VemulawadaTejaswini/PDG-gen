Line_2 $$ public void testClassFilterServiceTrackerCustomizer() throws Exception -->Line_29 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ CD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizer() throws Exception -->Line_33 $$ Assert.assertEquals(0, interfaceOnes.size())[ CD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizer() throws Exception -->Line_3 $$ Filter filter = _registry.getFilter("(a.property=G)")[ CD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizer() throws Exception -->Line_28 $$ Assert.assertEquals(2, counter.intValue())[ CD ]
Line_11 $$ ServiceRegistration<InterfaceOne> serviceRegistrationA = _registry.registerService(InterfaceOne.class, interfaceOneA, properties)-->Line_26 $$ serviceRegistrationA.unregister()[ FD ]
Line_23 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_32 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ FD ]
Line_6 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, serviceTrackerCustomizer)-->Line_27 $$ Assert.assertEquals(0, serviceTrackerList.size())[ FD ]
Line_11 $$ ServiceRegistration<InterfaceOne> serviceRegistrationA = _registry.registerService(InterfaceOne.class, interfaceOneA, properties)-->Line_12 $$ Assert.assertNotNull(serviceRegistrationA)[ FD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizer() throws Exception -->Line_12 $$ Assert.assertNotNull(serviceRegistrationA)[ CD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizer() throws Exception -->Line_25 $$ Assert.assertEquals(1, counter.intValue())[ CD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizer() throws Exception -->Line_9 $$ Map<String, Object> properties = new HashMap()[ CD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizer() throws Exception -->Line_35 $$ Assert.assertEquals(2, counter.intValue())[ CD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizer() throws Exception -->Line_10 $$ properties.put("a.property", "G")[ CD ]
Line_6 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, serviceTrackerCustomizer)-->Line_7 $$ Assert.assertEquals(0, serviceTrackerList.size())[ FD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizer() throws Exception -->Line_4 $$ AtomicInteger counter = new AtomicInteger()[ CD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizer() throws Exception -->Line_7 $$ Assert.assertEquals(0, serviceTrackerList.size())[ CD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizer() throws Exception -->Line_5 $$ ServiceTrackerCustomizer<InterfaceOne, InterfaceOne> serviceTrackerCustomizer = new MockServiceTrackerCustomizer(counter)[ CD ]
Line_6 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, serviceTrackerCustomizer)-->Line_34 $$ Assert.assertEquals(0, serviceTrackerList.size())[ FD ]
Line_9 $$ Map<String, Object> properties = new HashMap()-->Line_11 $$ ServiceRegistration<InterfaceOne> serviceRegistrationA = _registry.registerService(InterfaceOne.class, interfaceOneA, properties)[ FD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizer() throws Exception -->Line_6 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, serviceTrackerCustomizer)[ CD ]
Line_20 $$ for (InterfaceOne interfaceOne : serviceTrackerList) -->Line_21 $$ Assert.assertNotNull(interfaceOne)[ FD ]
Line_3 $$ Filter filter = _registry.getFilter("(a.property=G)")-->Line_6 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, serviceTrackerCustomizer)[ FD ]
Line_23 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_24 $$ Assert.assertEquals(1, interfaceOnes.size())[ FD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizer() throws Exception -->Line_26 $$ serviceRegistrationA.unregister()[ CD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizer() throws Exception -->Line_34 $$ Assert.assertEquals(0, serviceTrackerList.size())[ CD ]
Line_4 $$ AtomicInteger counter = new AtomicInteger()-->Line_25 $$ Assert.assertEquals(1, counter.intValue())[ FD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizer() throws Exception -->Line_24 $$ Assert.assertEquals(1, interfaceOnes.size())[ CD ]
Line_6 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, serviceTrackerCustomizer)-->Line_19 $$ Assert.assertEquals(1, serviceTrackerList.size())[ FD ]
Line_13 $$ InterfaceOne interfaceOneB = getInstance()-->Line_31 $$ serviceTrackerList.remove(interfaceOneB)[ FD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizer() throws Exception -->Line_11 $$ ServiceRegistration<InterfaceOne> serviceRegistrationA = _registry.registerService(InterfaceOne.class, interfaceOneA, properties)[ CD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizer() throws Exception -->Line_30 $$ Assert.assertEquals(0, interfaceOnes.size())[ CD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizer() throws Exception -->Line_31 $$ serviceTrackerList.remove(interfaceOneB)[ CD ]
Line_23 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_33 $$ Assert.assertEquals(0, interfaceOnes.size())[ FD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizer() throws Exception -->Line_32 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ CD ]
Line_29 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_32 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ FD ]
Line_8 $$ InterfaceOne interfaceOneA = getInstance()-->Line_11 $$ ServiceRegistration<InterfaceOne> serviceRegistrationA = _registry.registerService(InterfaceOne.class, interfaceOneA, properties)[ FD ]
Line_29 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_30 $$ Assert.assertEquals(0, interfaceOnes.size())[ FD ]
Line_23 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_29 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ FD ]
Line_23 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_30 $$ Assert.assertEquals(0, interfaceOnes.size())[ FD ]
Line_4 $$ AtomicInteger counter = new AtomicInteger()-->Line_35 $$ Assert.assertEquals(2, counter.intValue())[ FD ]
Line_32 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_33 $$ Assert.assertEquals(0, interfaceOnes.size())[ FD ]
Line_13 $$ InterfaceOne interfaceOneB = getInstance()-->Line_15 $$ serviceTrackerList.add(interfaceOneB)[ FD ]
Line_5 $$ ServiceTrackerCustomizer<InterfaceOne, InterfaceOne> serviceTrackerCustomizer = new MockServiceTrackerCustomizer(counter)-->Line_6 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, serviceTrackerCustomizer)[ FD ]
Line_4 $$ AtomicInteger counter = new AtomicInteger()-->Line_28 $$ Assert.assertEquals(2, counter.intValue())[ FD ]
Line_9 $$ Map<String, Object> properties = new HashMap()-->Line_10 $$ properties.put("a.property", "G")[ FD ]
Line_29 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_33 $$ Assert.assertEquals(0, interfaceOnes.size())[ FD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizer() throws Exception -->Line_27 $$ Assert.assertEquals(0, serviceTrackerList.size())[ CD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizer() throws Exception -->Line_23 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ CD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizer() throws Exception -->Line_19 $$ Assert.assertEquals(1, serviceTrackerList.size())[ CD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizer() throws Exception -->Line_13 $$ InterfaceOne interfaceOneB = getInstance()[ CD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizer() throws Exception -->Line_8 $$ InterfaceOne interfaceOneA = getInstance()[ CD ]
Line_6 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, serviceTrackerCustomizer)-->Line_31 $$ serviceTrackerList.remove(interfaceOneB)[ FD ]
Line_6 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, serviceTrackerCustomizer)-->Line_15 $$ serviceTrackerList.add(interfaceOneB)[ FD ]
