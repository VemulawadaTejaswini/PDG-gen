Line_4 $$ float max = 0-->Line_31 $$ innerInfo.put("max", StringUtils.format("%.2f%%", max))[ FD ]
Line_5 $$ float min = 0-->Line_29 $$ innerInfo.put("min", StringUtils.format("%.2f%%", min))[ FD ]
Line_2 $$ public String getNodeUsage() -->Line_32 $$ innerInfo.put("stdDev", StringUtils.format("%.2f%%", dev))[ CD ]
Line_28 $$ final Map<String, Object> innerInfo = new HashMap<String, Object>()-->Line_29 $$ innerInfo.put("min", StringUtils.format("%.2f%%", min))[ FD ]
Line_14 $$ for (DatanodeDescriptor dn : live) -->Line_15 $$ usages[i++] = dn.getDfsUsedPercent()[ FD ]
Line_10 $$ if (live.size() > 0) -->Line_22 $$ min = usages[0][ CD ]
Line_28 $$ final Map<String, Object> innerInfo = new HashMap<String, Object>()-->Line_33 $$ info.put("nodeUsage", innerInfo)[ FD ]
Line_8 $$ final List<DatanodeDescriptor> live = new ArrayList<DatanodeDescriptor>()-->Line_10 $$ if (live.size() > 0) [ FD ]
Line_2 $$ public String getNodeUsage() -->Line_34 $$ return JSON.toString(info)[ CD ]
Line_10 $$ if (live.size() > 0) -->Line_23 $$ for (i = 0; i < usages.length; i++) [ CD ]
Line_2 $$ public String getNodeUsage() -->Line_33 $$ info.put("nodeUsage", innerInfo)[ CD ]
Line_5 $$ float min = 0-->Line_22 $$ min = usages[0][ FD ]
Line_10 $$ if (live.size() > 0) -->Line_26 $$ dev = (float) Math.sqrt(dev / usages.length)[ CD ]
Line_2 $$ public String getNodeUsage() -->Line_10 $$ if (live.size() > 0) [ CD ]
Line_2 $$ public String getNodeUsage() -->Line_5 $$ float min = 0[ CD ]
Line_6 $$ float dev = 0-->Line_32 $$ innerInfo.put("stdDev", StringUtils.format("%.2f%%", dev))[ FD ]
Line_20 $$ median = usages[usages.length / 2]-->Line_30 $$ innerInfo.put("median", StringUtils.format("%.2f%%", median))[ FD ]
Line_2 $$ public String getNodeUsage() -->Line_7 $$ final Map<String, Map<String, Object>> info = new HashMap<String, Map<String, Object>>()[ CD ]
Line_8 $$ final List<DatanodeDescriptor> live = new ArrayList<DatanodeDescriptor>()-->Line_18 $$ totalDfsUsed /= live.size()[ FD ]
Line_8 $$ final List<DatanodeDescriptor> live = new ArrayList<DatanodeDescriptor>()-->Line_9 $$ blockManager.getDatanodeManager().fetchDatanodes(live, null, true)[ FD ]
Line_14 $$ for (DatanodeDescriptor dn : live) -->Line_16 $$ totalDfsUsed += dn.getDfsUsedPercent()[ FD ]
Line_13 $$ int i = 0-->Line_15 $$ usages[i++] = dn.getDfsUsedPercent()[ FD ]
Line_10 $$ if (live.size() > 0) -->Line_13 $$ int i = 0[ CD ]
Line_10 $$ if (live.size() > 0) -->Line_11 $$ float totalDfsUsed = 0[ CD ]
Line_2 $$ public String getNodeUsage() -->Line_6 $$ float dev = 0[ CD ]
Line_11 $$ float totalDfsUsed = 0-->Line_18 $$ totalDfsUsed /= live.size()[ FD ]
Line_12 $$ float[] usages = new float[live.size()]-->Line_19 $$ Arrays.sort(usages)[ FD ]
Line_13 $$ int i = 0-->Line_23 $$ for (i = 0; i < usages.length; i++) [ FD ]
Line_6 $$ float dev = 0-->Line_26 $$ dev = (float) Math.sqrt(dev / usages.length)[ FD ]
Line_3 $$ float median = 0-->Line_30 $$ innerInfo.put("median", StringUtils.format("%.2f%%", median))[ FD ]
Line_28 $$ final Map<String, Object> innerInfo = new HashMap<String, Object>()-->Line_31 $$ innerInfo.put("max", StringUtils.format("%.2f%%", max))[ FD ]
Line_11 $$ float totalDfsUsed = 0-->Line_16 $$ totalDfsUsed += dn.getDfsUsedPercent()[ FD ]
Line_2 $$ public String getNodeUsage() -->Line_8 $$ final List<DatanodeDescriptor> live = new ArrayList<DatanodeDescriptor>()[ CD ]
Line_16 $$ totalDfsUsed += dn.getDfsUsedPercent()-->Line_18 $$ totalDfsUsed /= live.size()[ FD ]
Line_10 $$ if (live.size() > 0) -->Line_21 $$ max = usages[usages.length - 1][ CD ]
Line_4 $$ float max = 0-->Line_21 $$ max = usages[usages.length - 1][ FD ]
Line_10 $$ if (live.size() > 0) -->Line_19 $$ Arrays.sort(usages)[ CD ]
Line_3 $$ float median = 0-->Line_20 $$ median = usages[usages.length / 2][ FD ]
Line_2 $$ public String getNodeUsage() -->Line_28 $$ final Map<String, Object> innerInfo = new HashMap<String, Object>()[ CD ]
Line_23 $$ for (i = 0; i < usages.length; i++) -->Line_24 $$ dev += (usages[i] - totalDfsUsed) * (usages[i] - totalDfsUsed)[ CD ]
Line_26 $$ dev = (float) Math.sqrt(dev / usages.length)-->Line_32 $$ innerInfo.put("stdDev", StringUtils.format("%.2f%%", dev))[ FD ]
Line_7 $$ final Map<String, Map<String, Object>> info = new HashMap<String, Map<String, Object>>()-->Line_34 $$ return JSON.toString(info)[ FD ]
Line_24 $$ dev += (usages[i] - totalDfsUsed) * (usages[i] - totalDfsUsed)-->Line_26 $$ dev = (float) Math.sqrt(dev / usages.length)[ FD ]
Line_2 $$ public String getNodeUsage() -->Line_31 $$ innerInfo.put("max", StringUtils.format("%.2f%%", max))[ CD ]
Line_2 $$ public String getNodeUsage() -->Line_30 $$ innerInfo.put("median", StringUtils.format("%.2f%%", median))[ CD ]
Line_2 $$ public String getNodeUsage() -->Line_9 $$ blockManager.getDatanodeManager().fetchDatanodes(live, null, true)[ CD ]
Line_2 $$ public String getNodeUsage() -->Line_4 $$ float max = 0[ CD ]
Line_2 $$ public String getNodeUsage() -->Line_3 $$ float median = 0[ CD ]
Line_22 $$ min = usages[0]-->Line_29 $$ innerInfo.put("min", StringUtils.format("%.2f%%", min))[ FD ]
Line_6 $$ float dev = 0-->Line_24 $$ dev += (usages[i] - totalDfsUsed) * (usages[i] - totalDfsUsed)[ FD ]
Line_10 $$ if (live.size() > 0) -->Line_18 $$ totalDfsUsed /= live.size()[ CD ]
Line_10 $$ if (live.size() > 0) -->Line_20 $$ median = usages[usages.length / 2][ CD ]
Line_21 $$ max = usages[usages.length - 1]-->Line_31 $$ innerInfo.put("max", StringUtils.format("%.2f%%", max))[ FD ]
Line_28 $$ final Map<String, Object> innerInfo = new HashMap<String, Object>()-->Line_32 $$ innerInfo.put("stdDev", StringUtils.format("%.2f%%", dev))[ FD ]
Line_7 $$ final Map<String, Map<String, Object>> info = new HashMap<String, Map<String, Object>>()-->Line_33 $$ info.put("nodeUsage", innerInfo)[ FD ]
Line_8 $$ final List<DatanodeDescriptor> live = new ArrayList<DatanodeDescriptor>()-->Line_12 $$ float[] usages = new float[live.size()][ FD ]
Line_2 $$ public String getNodeUsage() -->Line_29 $$ innerInfo.put("min", StringUtils.format("%.2f%%", min))[ CD ]
Line_10 $$ if (live.size() > 0) -->Line_12 $$ float[] usages = new float[live.size()][ CD ]
Line_28 $$ final Map<String, Object> innerInfo = new HashMap<String, Object>()-->Line_30 $$ innerInfo.put("median", StringUtils.format("%.2f%%", median))[ FD ]
Line_24 $$ dev += (usages[i] - totalDfsUsed) * (usages[i] - totalDfsUsed)-->Line_32 $$ innerInfo.put("stdDev", StringUtils.format("%.2f%%", dev))[ FD ]
