Line_3 $$ final Map<String, Boolean> cachedValue = CachedValuesManager.getCachedValue(element, new CachedValueProvider<Map<String, Boolean>>() -->Line_8 $$ Boolean conflictingRef = cachedValue.get(fullyQualifiedName)[ FD ]
Line_2 $$ private static boolean containsConflictingReference(PsiFile element, String fullyQualifiedName) -->Line_14 $$ conflictingRef = visitor.isConflictingReferenceFound()[ CD ]
Line_3 $$ final Map<String, Boolean> cachedValue = CachedValuesManager.getCachedValue(element, new CachedValueProvider<Map<String, Boolean>>() -->Line_5 $$ return new Result<Map<String, Boolean>>(Collections.synchronizedMap(new HashMap<String, Boolean>()), PsiModificationTracker.MODIFICATION_COUNT)[ CD ]
Line_2 $$ private static boolean containsConflictingReference(PsiFile element, String fullyQualifiedName) -->Line_16 $$ return conflictingRef.booleanValue()[ CD ]
Line_9 $$ if (conflictingRef != null) -->Line_10 $$ return conflictingRef.booleanValue()[ CD ]
Line_2 $$ private static boolean containsConflictingReference(PsiFile element, String fullyQualifiedName) -->Line_9 $$ if (conflictingRef != null) [ CD ]
Line_2 $$ private static boolean containsConflictingReference(PsiFile element, String fullyQualifiedName) -->Line_13 $$ element.accept(visitor)[ FD ]
Line_2 $$ private static boolean containsConflictingReference(PsiFile element, String fullyQualifiedName) -->Line_13 $$ element.accept(visitor)[ CD ]
Line_2 $$ private static boolean containsConflictingReference(PsiFile element, String fullyQualifiedName) -->Line_15 $$ cachedValue.put(fullyQualifiedName, conflictingRef)[ CD ]
Line_2 $$ private static boolean containsConflictingReference(PsiFile element, String fullyQualifiedName) -->Line_8 $$ Boolean conflictingRef = cachedValue.get(fullyQualifiedName)[ CD ]
Line_2 $$ private static boolean containsConflictingReference(PsiFile element, String fullyQualifiedName) -->Line_3 $$ final Map<String, Boolean> cachedValue = CachedValuesManager.getCachedValue(element, new CachedValueProvider<Map<String, Boolean>>() [ FD ]
Line_2 $$ private static boolean containsConflictingReference(PsiFile element, String fullyQualifiedName) -->Line_15 $$ cachedValue.put(fullyQualifiedName, conflictingRef)[ FD ]
Line_2 $$ private static boolean containsConflictingReference(PsiFile element, String fullyQualifiedName) -->Line_8 $$ Boolean conflictingRef = cachedValue.get(fullyQualifiedName)[ FD ]
Line_3 $$ final Map<String, Boolean> cachedValue = CachedValuesManager.getCachedValue(element, new CachedValueProvider<Map<String, Boolean>>() -->Line_15 $$ cachedValue.put(fullyQualifiedName, conflictingRef)[ FD ]
Line_2 $$ private static boolean containsConflictingReference(PsiFile element, String fullyQualifiedName) -->Line_3 $$ final Map<String, Boolean> cachedValue = CachedValuesManager.getCachedValue(element, new CachedValueProvider<Map<String, Boolean>>() [ CD ]
