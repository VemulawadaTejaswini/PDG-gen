Line_6 $$ NoticeableFuture<Map<Path, Path>> noticeableFuture = _nettyRepository.getFiles(_embeddedChannel, pathMap, true)-->Line_17 $$ noticeableFuture.get()[ FD ]
Line_3 $$ Map<Path, Path> pathMap = new HashMap()-->Line_6 $$ NoticeableFuture<Map<Path, Path>> noticeableFuture = _nettyRepository.getFiles(_embeddedChannel, pathMap, true)[ FD ]
Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_14 $$ Assert.assertEquals("Remote file remoteFile is not found", logRecord.getMessage())[ FD ]
Line_7 $$ Exception exception = new Exception()-->Line_20 $$ Assert.assertSame(exception, ee.getCause())[ FD ]
Line_7 $$ Exception exception = new Exception()-->Line_8 $$ DefaultNoticeableFutureAdvice.setConvertThrowable(exception)[ FD ]
Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_13 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_4 $$ Path remoteFilePath = Paths.get("remoteFile")-->Line_10 $$ Assert.assertTrue(_asyncBroker.takeWithResult(remoteFilePath, new FileResponse(_repositoryPath, FileResponse.FILE_NOT_FOUND, -1, false)))[ FD ]
Line_3 $$ Map<Path, Path> pathMap = new HashMap()-->Line_5 $$ pathMap.put(remoteFilePath, Paths.get("localFile"))[ FD ]
Line_2 $$ public void testGetFilesCovertCausedException() throws Exception -->Line_7 $$ Exception exception = new Exception()[ CD ]
Line_4 $$ Path remoteFilePath = Paths.get("remoteFile")-->Line_5 $$ pathMap.put(remoteFilePath, Paths.get("localFile"))[ FD ]
Line_2 $$ public void testGetFilesCovertCausedException() throws Exception -->Line_6 $$ NoticeableFuture<Map<Path, Path>> noticeableFuture = _nettyRepository.getFiles(_embeddedChannel, pathMap, true)[ CD ]
Line_2 $$ public void testGetFilesCovertCausedException() throws Exception -->Line_4 $$ Path remoteFilePath = Paths.get("remoteFile")[ CD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyRepository.class.getName(), Level.WARNING)) -->Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_2 $$ public void testGetFilesCovertCausedException() throws Exception -->Line_3 $$ Map<Path, Path> pathMap = new HashMap()[ CD ]
Line_2 $$ public void testGetFilesCovertCausedException() throws Exception -->Line_5 $$ pathMap.put(remoteFilePath, Paths.get("localFile"))[ CD ]
Line_2 $$ public void testGetFilesCovertCausedException() throws Exception -->Line_8 $$ DefaultNoticeableFutureAdvice.setConvertThrowable(exception)[ CD ]
Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_12 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
