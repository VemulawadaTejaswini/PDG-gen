Line_2 $$ public void testConcurrentDynamicMapping() throws Exception -->Line_4 $$ final String mapping = "[ CD ]
Line_3 $$ final String fieldName = "field"-->Line_16 $$ source.put(fieldName, "test-user")[ FD ]
Line_14 $$ for (int j = 0; j < numDocs; j++) -->Line_15 $$ Map<String, Object> source = new HashMap()[ CD ]
Line_6 $$ for (int i = 0; i < iters; i++) -->Line_12 $$ final List<Throwable> throwable = new CopyOnWriteArrayList()[ CD ]
Line_6 $$ for (int i = 0; i < iters; i++) -->Line_31 $$ assertHitCount(client().prepareSearch("test").setQuery(QueryBuilders.matchQuery(fieldName, "test user")).get(), 0)[ CD ]
Line_2 $$ public void testConcurrentDynamicMapping() throws Exception -->Line_6 $$ for (int i = 0; i < iters; i++) [ CD ]
Line_5 $$ int iters = scaledRandomIntBetween(5, 15)-->Line_6 $$ for (int i = 0; i < iters; i++) [ FD ]
Line_6 $$ for (int i = 0; i < iters; i++) -->Line_9 $$ ensureYellow()[ CD ]
Line_6 $$ for (int i = 0; i < iters; i++) -->Line_30 $$ assertHitCount(client().prepareSearch("test").setQuery(QueryBuilders.matchQuery(fieldName, "test-user")).get(), numDocs)[ CD ]
Line_11 $$ final CountDownLatch latch = new CountDownLatch(numDocs)-->Line_23 $$ latch.countDown()[ FD ]
Line_6 $$ for (int i = 0; i < iters; i++) -->Line_13 $$ int currentID = 0[ CD ]
Line_6 $$ for (int i = 0; i < iters; i++) -->Line_8 $$ assertAcked(prepareCreate("test").addMapping(mappingType, mapping))[ CD ]
Line_17 $$ client().prepareIndex("test", mappingType, Integer.toString(currentID++)).setSource(source).execute(new ActionListener<IndexResponse>() -->Line_23 $$ latch.countDown()[ CD ]
Line_13 $$ int currentID = 0-->Line_17 $$ client().prepareIndex("test", mappingType, Integer.toString(currentID++)).setSource(source).execute(new ActionListener<IndexResponse>() [ FD ]
Line_6 $$ for (int i = 0; i < iters; i++) -->Line_7 $$ cluster().wipeIndices("test")[ CD ]
Line_10 $$ int numDocs = scaledRandomIntBetween(10, 100)-->Line_14 $$ for (int j = 0; j < numDocs; j++) [ FD ]
Line_11 $$ final CountDownLatch latch = new CountDownLatch(numDocs)-->Line_19 $$ latch.countDown()[ FD ]
Line_12 $$ final List<Throwable> throwable = new CopyOnWriteArrayList()-->Line_28 $$ assertThat(throwable, emptyIterable())[ FD ]
Line_2 $$ public void testConcurrentDynamicMapping() throws Exception -->Line_5 $$ int iters = scaledRandomIntBetween(5, 15)[ CD ]
Line_11 $$ final CountDownLatch latch = new CountDownLatch(numDocs)-->Line_27 $$ latch.await()[ FD ]
Line_2 $$ public void testConcurrentDynamicMapping() throws Exception -->Line_3 $$ final String fieldName = "field"[ CD ]
Line_6 $$ for (int i = 0; i < iters; i++) -->Line_28 $$ assertThat(throwable, emptyIterable())[ CD ]
Line_14 $$ for (int j = 0; j < numDocs; j++) -->Line_16 $$ source.put(fieldName, "test-user")[ CD ]
Line_3 $$ final String fieldName = "field"-->Line_31 $$ assertHitCount(client().prepareSearch("test").setQuery(QueryBuilders.matchQuery(fieldName, "test user")).get(), 0)[ FD ]
Line_6 $$ for (int i = 0; i < iters; i++) -->Line_29 $$ refresh()[ CD ]
Line_14 $$ for (int j = 0; j < numDocs; j++) -->Line_17 $$ client().prepareIndex("test", mappingType, Integer.toString(currentID++)).setSource(source).execute(new ActionListener<IndexResponse>() [ CD ]
Line_6 $$ for (int i = 0; i < iters; i++) -->Line_11 $$ final CountDownLatch latch = new CountDownLatch(numDocs)[ CD ]
Line_17 $$ client().prepareIndex("test", mappingType, Integer.toString(currentID++)).setSource(source).execute(new ActionListener<IndexResponse>() -->Line_19 $$ latch.countDown()[ CD ]
Line_17 $$ client().prepareIndex("test", mappingType, Integer.toString(currentID++)).setSource(source).execute(new ActionListener<IndexResponse>() -->Line_22 $$ throwable.add(e)[ FD ]
Line_15 $$ Map<String, Object> source = new HashMap()-->Line_17 $$ client().prepareIndex("test", mappingType, Integer.toString(currentID++)).setSource(source).execute(new ActionListener<IndexResponse>() [ FD ]
Line_10 $$ int numDocs = scaledRandomIntBetween(10, 100)-->Line_30 $$ assertHitCount(client().prepareSearch("test").setQuery(QueryBuilders.matchQuery(fieldName, "test-user")).get(), numDocs)[ FD ]
Line_15 $$ Map<String, Object> source = new HashMap()-->Line_16 $$ source.put(fieldName, "test-user")[ FD ]
Line_6 $$ for (int i = 0; i < iters; i++) -->Line_27 $$ latch.await()[ CD ]
Line_6 $$ for (int i = 0; i < iters; i++) -->Line_14 $$ for (int j = 0; j < numDocs; j++) [ CD ]
Line_12 $$ final List<Throwable> throwable = new CopyOnWriteArrayList()-->Line_22 $$ throwable.add(e)[ FD ]
Line_6 $$ for (int i = 0; i < iters; i++) -->Line_10 $$ int numDocs = scaledRandomIntBetween(10, 100)[ CD ]
Line_4 $$ final String mapping = "-->Line_8 $$ assertAcked(prepareCreate("test").addMapping(mappingType, mapping))[ FD ]
Line_17 $$ client().prepareIndex("test", mappingType, Integer.toString(currentID++)).setSource(source).execute(new ActionListener<IndexResponse>() -->Line_22 $$ throwable.add(e)[ CD ]
Line_3 $$ final String fieldName = "field"-->Line_30 $$ assertHitCount(client().prepareSearch("test").setQuery(QueryBuilders.matchQuery(fieldName, "test-user")).get(), numDocs)[ FD ]
