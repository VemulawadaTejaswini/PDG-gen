Line_7 $$ Object[] original = selection.testAsSet.tree()-->Line_15 $$ Assert.assertEquals(BTree.size(original), function.count)[ FD ]
Line_8 $$ Object[] transformed-->Line_20 $$ assertSame(filter(transform(selection.canonicalList, function.wrapped), notNull()), iterable(transformed))[ FD ]
Line_8 $$ Object[] transformed-->Line_16 $$ assertSame(transform(selection.canonicalList, function.wrapped), iterable(transformed))[ FD ]
Line_6 $$ CountingFunction function-->Line_22 $$ transformed = BTree.transformAndFilter(selection.testAsList.tree(), function)[ FD ]
Line_13 $$ function = new CountingFunction(( x) -> update.containsKey(x) ? update.get(x) : x)-->Line_17 $$ function = new CountingFunction(update::<>get)[ FD ]
Line_13 $$ function = new CountingFunction(( x) -> update.containsKey(x) ? update.get(x) : x)-->Line_21 $$ function = new CountingFunction(( x) -> update.containsKey(x) ? null : x)[ FD ]
Line_8 $$ Object[] transformed-->Line_22 $$ transformed = BTree.transformAndFilter(selection.testAsList.tree(), function)[ FD ]
Line_10 $$ transformed = BTree.transformAndFilter(original, function)-->Line_16 $$ assertSame(transform(selection.canonicalList, function.wrapped), iterable(transformed))[ FD ]
Line_7 $$ Object[] original = selection.testAsSet.tree()-->Line_11 $$ Assert.assertEquals(BTree.size(original), function.count)[ FD ]
Line_9 $$ function = new CountingFunction(( x) -> x)-->Line_18 $$ transformed = BTree.transformAndFilter(original, function)[ FD ]
Line_7 $$ Object[] original = selection.testAsSet.tree()-->Line_14 $$ transformed = BTree.transformAndFilter(original, function)[ FD ]
Line_9 $$ function = new CountingFunction(( x) -> x)-->Line_22 $$ transformed = BTree.transformAndFilter(selection.testAsList.tree(), function)[ FD ]
Line_17 $$ function = new CountingFunction(update::<>get)-->Line_22 $$ transformed = BTree.transformAndFilter(selection.testAsList.tree(), function)[ FD ]
Line_21 $$ function = new CountingFunction(( x) -> update.containsKey(x) ? null : x)-->Line_22 $$ transformed = BTree.transformAndFilter(selection.testAsList.tree(), function)[ FD ]
Line_17 $$ function = new CountingFunction(update::<>get)-->Line_18 $$ transformed = BTree.transformAndFilter(original, function)[ FD ]
Line_10 $$ transformed = BTree.transformAndFilter(original, function)-->Line_22 $$ transformed = BTree.transformAndFilter(selection.testAsList.tree(), function)[ FD ]
Line_6 $$ CountingFunction function-->Line_14 $$ transformed = BTree.transformAndFilter(original, function)[ FD ]
Line_9 $$ function = new CountingFunction(( x) -> x)-->Line_21 $$ function = new CountingFunction(( x) -> update.containsKey(x) ? null : x)[ FD ]
Line_7 $$ Object[] original = selection.testAsSet.tree()-->Line_10 $$ transformed = BTree.transformAndFilter(original, function)[ FD ]
Line_6 $$ CountingFunction function-->Line_13 $$ function = new CountingFunction(( x) -> update.containsKey(x) ? update.get(x) : x)[ FD ]
Line_4 $$ Map<Integer, Integer> update = new LinkedHashMap()-->Line_21 $$ update.containsKey(x) ? null : x[ FD ]
Line_17 $$ function = new CountingFunction(update::<>get)-->Line_21 $$ function = new CountingFunction(( x) -> update.containsKey(x) ? null : x)[ FD ]
Line_7 $$ Object[] original = selection.testAsSet.tree()-->Line_23 $$ Assert.assertEquals(BTree.size(original), function.count)[ FD ]
Line_14 $$ transformed = BTree.transformAndFilter(original, function)-->Line_18 $$ transformed = BTree.transformAndFilter(original, function)[ FD ]
Line_14 $$ transformed = BTree.transformAndFilter(original, function)-->Line_20 $$ assertSame(filter(transform(selection.canonicalList, function.wrapped), notNull()), iterable(transformed))[ FD ]
Line_4 $$ Map<Integer, Integer> update = new LinkedHashMap()-->Line_13 $$ update.containsKey(x) ? update.get(x) : x[ FD ]
Line_18 $$ transformed = BTree.transformAndFilter(original, function)-->Line_24 $$ assertSame(filter(transform(selection.canonicalList, function.wrapped), notNull()), iterable(transformed))[ FD ]
Line_9 $$ function = new CountingFunction(( x) -> x)-->Line_17 $$ function = new CountingFunction(update::<>get)[ FD ]
Line_13 $$ function = new CountingFunction(( x) -> update.containsKey(x) ? update.get(x) : x)-->Line_18 $$ transformed = BTree.transformAndFilter(original, function)[ FD ]
Line_8 $$ Object[] transformed-->Line_14 $$ transformed = BTree.transformAndFilter(original, function)[ FD ]
Line_10 $$ transformed = BTree.transformAndFilter(original, function)-->Line_20 $$ assertSame(filter(transform(selection.canonicalList, function.wrapped), notNull()), iterable(transformed))[ FD ]
Line_14 $$ transformed = BTree.transformAndFilter(original, function)-->Line_22 $$ transformed = BTree.transformAndFilter(selection.testAsList.tree(), function)[ FD ]
Line_10 $$ transformed = BTree.transformAndFilter(original, function)-->Line_18 $$ transformed = BTree.transformAndFilter(original, function)[ FD ]
Line_6 $$ CountingFunction function-->Line_17 $$ function = new CountingFunction(update::<>get)[ FD ]
Line_18 $$ transformed = BTree.transformAndFilter(original, function)-->Line_20 $$ assertSame(filter(transform(selection.canonicalList, function.wrapped), notNull()), iterable(transformed))[ FD ]
Line_7 $$ Object[] original = selection.testAsSet.tree()-->Line_12 $$ Assert.assertSame(original, transformed)[ FD ]
Line_18 $$ transformed = BTree.transformAndFilter(original, function)-->Line_22 $$ transformed = BTree.transformAndFilter(selection.testAsList.tree(), function)[ FD ]
Line_10 $$ transformed = BTree.transformAndFilter(original, function)-->Line_24 $$ assertSame(filter(transform(selection.canonicalList, function.wrapped), notNull()), iterable(transformed))[ FD ]
Line_9 $$ function = new CountingFunction(( x) -> x)-->Line_13 $$ function = new CountingFunction(( x) -> update.containsKey(x) ? update.get(x) : x)[ FD ]
Line_9 $$ function = new CountingFunction(( x) -> x)-->Line_14 $$ transformed = BTree.transformAndFilter(original, function)[ FD ]
Line_8 $$ Object[] transformed-->Line_12 $$ Assert.assertSame(original, transformed)[ FD ]
Line_4 $$ Map<Integer, Integer> update = new LinkedHashMap()-->Line_5 $$ update.put(i, new Integer(i))[ FD ]
Line_22 $$ transformed = BTree.transformAndFilter(selection.testAsList.tree(), function)-->Line_24 $$ assertSame(filter(transform(selection.canonicalList, function.wrapped), notNull()), iterable(transformed))[ FD ]
Line_6 $$ CountingFunction function-->Line_21 $$ function = new CountingFunction(( x) -> update.containsKey(x) ? null : x)[ FD ]
Line_7 $$ Object[] original = selection.testAsSet.tree()-->Line_19 $$ Assert.assertEquals(BTree.size(original), function.count)[ FD ]
Line_7 $$ Object[] original = selection.testAsSet.tree()-->Line_18 $$ transformed = BTree.transformAndFilter(original, function)[ FD ]
Line_6 $$ CountingFunction function-->Line_9 $$ function = new CountingFunction(( x) -> x)[ FD ]
Line_6 $$ CountingFunction function-->Line_10 $$ transformed = BTree.transformAndFilter(original, function)[ FD ]
Line_8 $$ Object[] transformed-->Line_24 $$ assertSame(filter(transform(selection.canonicalList, function.wrapped), notNull()), iterable(transformed))[ FD ]
Line_14 $$ transformed = BTree.transformAndFilter(original, function)-->Line_24 $$ assertSame(filter(transform(selection.canonicalList, function.wrapped), notNull()), iterable(transformed))[ FD ]
Line_8 $$ Object[] transformed-->Line_10 $$ transformed = BTree.transformAndFilter(original, function)[ FD ]
Line_13 $$ function = new CountingFunction(( x) -> update.containsKey(x) ? update.get(x) : x)-->Line_22 $$ transformed = BTree.transformAndFilter(selection.testAsList.tree(), function)[ FD ]
Line_2 $$ public void testTransformAndFilter() throws InterruptedException -->Line_3 $$ testRandomSelection(perThreadTrees, 4, false, false, false, ( selection) -> [ CD ]
Line_10 $$ transformed = BTree.transformAndFilter(original, function)-->Line_14 $$ transformed = BTree.transformAndFilter(original, function)[ FD ]
Line_8 $$ Object[] transformed-->Line_18 $$ transformed = BTree.transformAndFilter(original, function)[ FD ]
Line_13 $$ function = new CountingFunction(( x) -> update.containsKey(x) ? update.get(x) : x)-->Line_14 $$ transformed = BTree.transformAndFilter(original, function)[ FD ]
Line_9 $$ function = new CountingFunction(( x) -> x)-->Line_10 $$ transformed = BTree.transformAndFilter(original, function)[ FD ]
Line_6 $$ CountingFunction function-->Line_18 $$ transformed = BTree.transformAndFilter(original, function)[ FD ]
Line_14 $$ transformed = BTree.transformAndFilter(original, function)-->Line_16 $$ assertSame(transform(selection.canonicalList, function.wrapped), iterable(transformed))[ FD ]
Line_10 $$ transformed = BTree.transformAndFilter(original, function)-->Line_12 $$ Assert.assertSame(original, transformed)[ FD ]
