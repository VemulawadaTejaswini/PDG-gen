Line_2 $$ public void map() -->Line_6 $$ Map<Integer, Integer> integers = (Map<Integer, Integer>) conversionService.convert(strings, TypeDescriptor.map(Map.class, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.valueOf(Integer.class)))[ CD ]
Line_2 $$ public void map() -->Line_7 $$ assertEquals(new Integer(9), integers.get(3))[ CD ]
Line_2 $$ public void map() -->Line_3 $$ Map<String, String> strings = new HashMap<String, String>()[ CD ]
Line_2 $$ public void map() -->Line_5 $$ strings.put("6", "31")[ CD ]
Line_6 $$ Map<Integer, Integer> integers = (Map<Integer, Integer>) conversionService.convert(strings, TypeDescriptor.map(Map.class, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.valueOf(Integer.class)))-->Line_8 $$ assertEquals(new Integer(31), integers.get(6))[ FD ]
Line_3 $$ Map<String, String> strings = new HashMap<String, String>()-->Line_4 $$ strings.put("3", "9")[ FD ]
Line_2 $$ public void map() -->Line_4 $$ strings.put("3", "9")[ CD ]
Line_2 $$ public void map() -->Line_8 $$ assertEquals(new Integer(31), integers.get(6))[ CD ]
Line_3 $$ Map<String, String> strings = new HashMap<String, String>()-->Line_6 $$ Map<Integer, Integer> integers = (Map<Integer, Integer>) conversionService.convert(strings, TypeDescriptor.map(Map.class, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.valueOf(Integer.class)))[ FD ]
Line_6 $$ Map<Integer, Integer> integers = (Map<Integer, Integer>) conversionService.convert(strings, TypeDescriptor.map(Map.class, TypeDescriptor.valueOf(Integer.class), TypeDescriptor.valueOf(Integer.class)))-->Line_7 $$ assertEquals(new Integer(9), integers.get(3))[ FD ]
Line_3 $$ Map<String, String> strings = new HashMap<String, String>()-->Line_5 $$ strings.put("6", "31")[ FD ]
