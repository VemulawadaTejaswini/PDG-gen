Line_9 $$ byte[] bytes = FileCopyUtils.copyToByteArray(is)-->Line_11 $$ Class<?> cls = defineClass(name, bytes, 0, bytes.length)[ FD ]
Line_13 $$ int packageSeparator = name.lastIndexOf('.')-->Line_14 $$ if (packageSeparator != -1) [ FD ]
Line_4 $$ InputStream is = this.enclosingClassLoader.getResourceAsStream(internalName)-->Line_5 $$ if (is == null) [ FD ]
Line_14 $$ if (packageSeparator != -1) -->Line_15 $$ String packageName = name.substring(0, packageSeparator)[ CD ]
Line_14 $$ if (packageSeparator != -1) -->Line_16 $$ definePackage(packageName, null, null, null, null, null, null, null)[ CD ]
Line_2 $$ private Class<?> doLoadClass(String name) throws ClassNotFoundException -->Line_3 $$ String internalName = StringUtils.replace(name, ".", "/") + ".class"[ CD ]
Line_2 $$ private Class<?> doLoadClass(String name) throws ClassNotFoundException -->Line_11 $$ Class<?> cls = defineClass(name, bytes, 0, bytes.length)[ FD ]
Line_2 $$ private Class<?> doLoadClass(String name) throws ClassNotFoundException -->Line_15 $$ String packageName = name.substring(0, packageSeparator)[ FD ]
Line_2 $$ private Class<?> doLoadClass(String name) throws ClassNotFoundException -->Line_5 $$ if (is == null) [ CD ]
Line_3 $$ String internalName = StringUtils.replace(name, ".", "/") + ".class"-->Line_4 $$ InputStream is = this.enclosingClassLoader.getResourceAsStream(internalName)[ FD ]
Line_2 $$ private Class<?> doLoadClass(String name) throws ClassNotFoundException -->Line_10 $$ bytes = applyTransformers(name, bytes)[ FD ]
Line_11 $$ Class<?> cls = defineClass(name, bytes, 0, bytes.length)-->Line_12 $$ if (cls.getPackage() == null) [ FD ]
Line_9 $$ byte[] bytes = FileCopyUtils.copyToByteArray(is)-->Line_10 $$ bytes = applyTransformers(name, bytes)[ FD ]
Line_2 $$ private Class<?> doLoadClass(String name) throws ClassNotFoundException -->Line_19 $$ this.classCache.put(name, cls)[ FD ]
Line_15 $$ String packageName = name.substring(0, packageSeparator)-->Line_16 $$ definePackage(packageName, null, null, null, null, null, null, null)[ FD ]
Line_12 $$ if (cls.getPackage() == null) -->Line_13 $$ int packageSeparator = name.lastIndexOf('.')[ CD ]
Line_13 $$ int packageSeparator = name.lastIndexOf('.')-->Line_15 $$ String packageName = name.substring(0, packageSeparator)[ FD ]
Line_11 $$ Class<?> cls = defineClass(name, bytes, 0, bytes.length)-->Line_19 $$ this.classCache.put(name, cls)[ FD ]
Line_4 $$ InputStream is = this.enclosingClassLoader.getResourceAsStream(internalName)-->Line_9 $$ byte[] bytes = FileCopyUtils.copyToByteArray(is)[ FD ]
Line_2 $$ private Class<?> doLoadClass(String name) throws ClassNotFoundException -->Line_4 $$ InputStream is = this.enclosingClassLoader.getResourceAsStream(internalName)[ CD ]
Line_2 $$ private Class<?> doLoadClass(String name) throws ClassNotFoundException -->Line_3 $$ String internalName = StringUtils.replace(name, ".", "/") + ".class"[ FD ]
Line_2 $$ private Class<?> doLoadClass(String name) throws ClassNotFoundException -->Line_13 $$ int packageSeparator = name.lastIndexOf('.')[ FD ]
Line_10 $$ bytes = applyTransformers(name, bytes)-->Line_11 $$ Class<?> cls = defineClass(name, bytes, 0, bytes.length)[ FD ]
Line_12 $$ if (cls.getPackage() == null) -->Line_14 $$ if (packageSeparator != -1) [ CD ]
