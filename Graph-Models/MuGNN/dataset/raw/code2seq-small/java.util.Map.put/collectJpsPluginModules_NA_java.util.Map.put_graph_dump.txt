Line_10 $$ IdeaPlugin plugin = fileElement.getRootElement()-->Line_11 $$ List<Extensions> extensions = plugin.getExtensions()[ FD ]
Line_2 $$ private static Map<Module, String> collectJpsPluginModules(@NotNull Module module) -->Line_3 $$ XmlFile pluginXml = PluginModuleType.getPluginXml(module)[ CD ]
Line_15 $$ for (XmlTag tag : extensionsTag.getSubTags()) -->Line_19 $$ String classpath = tag.getAttributeValue("classpath")[ FD ]
Line_21 $$ for (String path : StringUtil.split(classpath, ";")) -->Line_25 $$ jpsPluginToOutputPath.put(jpsModule, path)[ FD ]
Line_6 $$ DomFileElement<IdeaPlugin> fileElement = DomManager.getDomManager(module.getProject()).getFileElement(pluginXml, IdeaPlugin.class)-->Line_7 $$ if (fileElement == null)[ FD ]
Line_13 $$ XmlTag extensionsTag = extensionGroup.getXmlTag()-->Line_14 $$ String defaultExtensionNs = extensionsTag.getAttributeValue("defaultExtensionNs")[ FD ]
Line_22 $$ String moduleName = FileUtil.getNameWithoutExtension(PathUtil.getFileName(path))-->Line_23 $$ Module jpsModule = ModuleManager.getInstance(module.getProject()).findModuleByName(moduleName)[ FD ]
Line_18 $$ if (CompileServerPlugin.EP_NAME.getName().equals(qualifiedName)) -->Line_19 $$ String classpath = tag.getAttributeValue("classpath")[ CD ]
Line_2 $$ private static Map<Module, String> collectJpsPluginModules(@NotNull Module module) -->Line_32 $$ return jpsPluginToOutputPath[ CD ]
Line_4 $$ if (pluginXml == null)-->Line_5 $$ return Collections.emptyMap()[ CD ]
Line_23 $$ Module jpsModule = ModuleManager.getInstance(module.getProject()).findModuleByName(moduleName)-->Line_24 $$ if (jpsModule != null) [ FD ]
Line_24 $$ if (jpsModule != null) -->Line_25 $$ jpsPluginToOutputPath.put(jpsModule, path)[ CD ]
Line_2 $$ private static Map<Module, String> collectJpsPluginModules(@NotNull Module module) -->Line_11 $$ List<Extensions> extensions = plugin.getExtensions()[ CD ]
Line_18 $$ if (CompileServerPlugin.EP_NAME.getName().equals(qualifiedName)) -->Line_20 $$ if (classpath != null) [ CD ]
Line_2 $$ private static Map<Module, String> collectJpsPluginModules(@NotNull Module module) -->Line_23 $$ Module jpsModule = ModuleManager.getInstance(module.getProject()).findModuleByName(moduleName)[ FD ]
Line_17 $$ String qualifiedName = defaultExtensionNs != null ? defaultExtensionNs + "." + name : name-->Line_18 $$ if (CompileServerPlugin.EP_NAME.getName().equals(qualifiedName)) [ FD ]
Line_3 $$ XmlFile pluginXml = PluginModuleType.getPluginXml(module)-->Line_4 $$ if (pluginXml == null)[ FD ]
Line_6 $$ DomFileElement<IdeaPlugin> fileElement = DomManager.getDomManager(module.getProject()).getFileElement(pluginXml, IdeaPlugin.class)-->Line_10 $$ IdeaPlugin plugin = fileElement.getRootElement()[ FD ]
Line_19 $$ String classpath = tag.getAttributeValue("classpath")-->Line_20 $$ if (classpath != null) [ FD ]
Line_19 $$ String classpath = tag.getAttributeValue("classpath")-->Line_21 $$ for (String path : StringUtil.split(classpath, ";")) [ FD ]
Line_2 $$ private static Map<Module, String> collectJpsPluginModules(@NotNull Module module) -->Line_4 $$ if (pluginXml == null)[ CD ]
Line_23 $$ Module jpsModule = ModuleManager.getInstance(module.getProject()).findModuleByName(moduleName)-->Line_25 $$ jpsPluginToOutputPath.put(jpsModule, path)[ FD ]
Line_21 $$ for (String path : StringUtil.split(classpath, ";")) -->Line_22 $$ String moduleName = FileUtil.getNameWithoutExtension(PathUtil.getFileName(path))[ FD ]
Line_15 $$ for (XmlTag tag : extensionsTag.getSubTags()) -->Line_16 $$ String name = tag.getLocalName()[ FD ]
Line_2 $$ private static Map<Module, String> collectJpsPluginModules(@NotNull Module module) -->Line_6 $$ DomFileElement<IdeaPlugin> fileElement = DomManager.getDomManager(module.getProject()).getFileElement(pluginXml, IdeaPlugin.class)[ FD ]
Line_2 $$ private static Map<Module, String> collectJpsPluginModules(@NotNull Module module) -->Line_9 $$ Map<Module, String> jpsPluginToOutputPath = new HashMap<Module, String>()[ CD ]
Line_2 $$ private static Map<Module, String> collectJpsPluginModules(@NotNull Module module) -->Line_7 $$ if (fileElement == null)[ CD ]
Line_9 $$ Map<Module, String> jpsPluginToOutputPath = new HashMap<Module, String>()-->Line_25 $$ jpsPluginToOutputPath.put(jpsModule, path)[ FD ]
Line_2 $$ private static Map<Module, String> collectJpsPluginModules(@NotNull Module module) -->Line_10 $$ IdeaPlugin plugin = fileElement.getRootElement()[ CD ]
Line_2 $$ private static Map<Module, String> collectJpsPluginModules(@NotNull Module module) -->Line_6 $$ DomFileElement<IdeaPlugin> fileElement = DomManager.getDomManager(module.getProject()).getFileElement(pluginXml, IdeaPlugin.class)[ CD ]
Line_7 $$ if (fileElement == null)-->Line_8 $$ return Collections.emptyMap()[ CD ]
Line_3 $$ XmlFile pluginXml = PluginModuleType.getPluginXml(module)-->Line_6 $$ DomFileElement<IdeaPlugin> fileElement = DomManager.getDomManager(module.getProject()).getFileElement(pluginXml, IdeaPlugin.class)[ FD ]
Line_13 $$ XmlTag extensionsTag = extensionGroup.getXmlTag()-->Line_15 $$ for (XmlTag tag : extensionsTag.getSubTags()) [ FD ]
Line_2 $$ private static Map<Module, String> collectJpsPluginModules(@NotNull Module module) -->Line_3 $$ XmlFile pluginXml = PluginModuleType.getPluginXml(module)[ FD ]
Line_12 $$ for (Extensions extensionGroup : extensions) -->Line_13 $$ XmlTag extensionsTag = extensionGroup.getXmlTag()[ FD ]
