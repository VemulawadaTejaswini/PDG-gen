Line_2 $$ public static FileCollection shrinkClasspath(Project project, FileCollection fileCollection) -->Line_9 $$ driveJarDirs.put(getDriveLetter(project.getBuildDir()), project.getBuildDir())[ FD ]
Line_7 $$ Map<Character, File> driveJarDirs = new HashMap()-->Line_28 $$ File jarFile = _createClasspathJarFile(project, curDriveFiles, driveJarDirs.get(curDriveLetter))[ FD ]
Line_14 $$ if (curDriveLetter != driveLetter) -->Line_15 $$ File jarFile = _createClasspathJarFile(project, curDriveFiles, driveJarDirs.get(curDriveLetter))[ CD ]
Line_10 $$ char curDriveLetter = 0-->Line_15 $$ File jarFile = _createClasspathJarFile(project, curDriveFiles, driveJarDirs.get(curDriveLetter))[ FD ]
Line_13 $$ char driveLetter = getDriveLetter(file)-->Line_19 $$ curDriveLetter = driveLetter[ FD ]
Line_29 $$ if (jarFile != null) -->Line_30 $$ shrunkClasspath.add(jarFile)[ CD ]
Line_2 $$ public static FileCollection shrinkClasspath(Project project, FileCollection fileCollection) -->Line_3 $$ if (!OSDetector.isWindows()) [ CD ]
Line_2 $$ public static FileCollection shrinkClasspath(Project project, FileCollection fileCollection) -->Line_32 $$ return project.files(shrunkClasspath)[ FD ]
Line_2 $$ public static FileCollection shrinkClasspath(Project project, FileCollection fileCollection) -->Line_32 $$ return project.files(shrunkClasspath)[ CD ]
Line_2 $$ public static FileCollection shrinkClasspath(Project project, FileCollection fileCollection) -->Line_15 $$ File jarFile = _createClasspathJarFile(project, curDriveFiles, driveJarDirs.get(curDriveLetter))[ FD ]
Line_10 $$ char curDriveLetter = 0-->Line_19 $$ curDriveLetter = driveLetter[ FD ]
Line_10 $$ char curDriveLetter = 0-->Line_14 $$ if (curDriveLetter != driveLetter) [ FD ]
Line_15 $$ File jarFile = _createClasspathJarFile(project, curDriveFiles, driveJarDirs.get(curDriveLetter))-->Line_16 $$ if (jarFile != null) [ FD ]
Line_2 $$ public static FileCollection shrinkClasspath(Project project, FileCollection fileCollection) -->Line_6 $$ List<File> shrunkClasspath = new ArrayList()[ CD ]
Line_12 $$ for (File file : fileCollection) -->Line_25 $$ shrunkClasspath.add(file)[ FD ]
Line_2 $$ public static FileCollection shrinkClasspath(Project project, FileCollection fileCollection) -->Line_28 $$ File jarFile = _createClasspathJarFile(project, curDriveFiles, driveJarDirs.get(curDriveLetter))[ FD ]
Line_2 $$ public static FileCollection shrinkClasspath(Project project, FileCollection fileCollection) -->Line_29 $$ if (jarFile != null) [ CD ]
Line_14 $$ if (curDriveLetter != driveLetter) -->Line_16 $$ if (jarFile != null) [ CD ]
Line_13 $$ char driveLetter = getDriveLetter(file)-->Line_22 $$ if (driveJarDirs.containsKey(driveLetter)) [ FD ]
Line_15 $$ File jarFile = _createClasspathJarFile(project, curDriveFiles, driveJarDirs.get(curDriveLetter))-->Line_17 $$ shrunkClasspath.add(jarFile)[ FD ]
Line_12 $$ for (File file : fileCollection) -->Line_13 $$ char driveLetter = getDriveLetter(file)[ FD ]
Line_2 $$ public static FileCollection shrinkClasspath(Project project, FileCollection fileCollection) -->Line_11 $$ List<File> curDriveFiles = new ArrayList()[ CD ]
Line_2 $$ public static FileCollection shrinkClasspath(Project project, FileCollection fileCollection) -->Line_28 $$ File jarFile = _createClasspathJarFile(project, curDriveFiles, driveJarDirs.get(curDriveLetter))[ CD ]
Line_2 $$ public static FileCollection shrinkClasspath(Project project, FileCollection fileCollection) -->Line_10 $$ char curDriveLetter = 0[ CD ]
Line_6 $$ List<File> shrunkClasspath = new ArrayList()-->Line_30 $$ shrunkClasspath.add(jarFile)[ FD ]
Line_15 $$ File jarFile = _createClasspathJarFile(project, curDriveFiles, driveJarDirs.get(curDriveLetter))-->Line_30 $$ shrunkClasspath.add(jarFile)[ FD ]
Line_11 $$ List<File> curDriveFiles = new ArrayList()-->Line_28 $$ File jarFile = _createClasspathJarFile(project, curDriveFiles, driveJarDirs.get(curDriveLetter))[ FD ]
Line_2 $$ public static FileCollection shrinkClasspath(Project project, FileCollection fileCollection) -->Line_9 $$ driveJarDirs.put(getDriveLetter(project.getBuildDir()), project.getBuildDir())[ CD ]
Line_12 $$ for (File file : fileCollection) -->Line_23 $$ curDriveFiles.add(file)[ FD ]
Line_6 $$ List<File> shrunkClasspath = new ArrayList()-->Line_25 $$ shrunkClasspath.add(file)[ FD ]
Line_15 $$ File jarFile = _createClasspathJarFile(project, curDriveFiles, driveJarDirs.get(curDriveLetter))-->Line_29 $$ if (jarFile != null) [ FD ]
Line_3 $$ if (!OSDetector.isWindows()) -->Line_4 $$ return fileCollection[ CD ]
Line_11 $$ List<File> curDriveFiles = new ArrayList()-->Line_20 $$ curDriveFiles.clear()[ FD ]
Line_11 $$ List<File> curDriveFiles = new ArrayList()-->Line_15 $$ File jarFile = _createClasspathJarFile(project, curDriveFiles, driveJarDirs.get(curDriveLetter))[ FD ]
Line_22 $$ if (driveJarDirs.containsKey(driveLetter)) -->Line_25 $$ shrunkClasspath.add(file)[ CD ]
Line_2 $$ public static FileCollection shrinkClasspath(Project project, FileCollection fileCollection) -->Line_7 $$ Map<Character, File> driveJarDirs = new HashMap()[ CD ]
Line_14 $$ if (curDriveLetter != driveLetter) -->Line_20 $$ curDriveFiles.clear()[ CD ]
Line_7 $$ Map<Character, File> driveJarDirs = new HashMap()-->Line_9 $$ driveJarDirs.put(getDriveLetter(project.getBuildDir()), project.getBuildDir())[ FD ]
Line_13 $$ char driveLetter = getDriveLetter(file)-->Line_14 $$ if (curDriveLetter != driveLetter) [ FD ]
Line_14 $$ if (curDriveLetter != driveLetter) -->Line_19 $$ curDriveLetter = driveLetter[ CD ]
Line_22 $$ if (driveJarDirs.containsKey(driveLetter)) -->Line_23 $$ curDriveFiles.add(file)[ CD ]
Line_11 $$ List<File> curDriveFiles = new ArrayList()-->Line_23 $$ curDriveFiles.add(file)[ FD ]
Line_7 $$ Map<Character, File> driveJarDirs = new HashMap()-->Line_15 $$ File jarFile = _createClasspathJarFile(project, curDriveFiles, driveJarDirs.get(curDriveLetter))[ FD ]
Line_6 $$ List<File> shrunkClasspath = new ArrayList()-->Line_17 $$ shrunkClasspath.add(jarFile)[ FD ]
Line_6 $$ List<File> shrunkClasspath = new ArrayList()-->Line_32 $$ return project.files(shrunkClasspath)[ FD ]
Line_2 $$ public static FileCollection shrinkClasspath(Project project, FileCollection fileCollection) -->Line_8 $$ driveJarDirs.put(getDriveLetter(_TMP_DIR), _TMP_DIR)[ CD ]
Line_16 $$ if (jarFile != null) -->Line_17 $$ shrunkClasspath.add(jarFile)[ CD ]
Line_7 $$ Map<Character, File> driveJarDirs = new HashMap()-->Line_22 $$ if (driveJarDirs.containsKey(driveLetter)) [ FD ]
Line_7 $$ Map<Character, File> driveJarDirs = new HashMap()-->Line_8 $$ driveJarDirs.put(getDriveLetter(_TMP_DIR), _TMP_DIR)[ FD ]
Line_19 $$ curDriveLetter = driveLetter-->Line_28 $$ File jarFile = _createClasspathJarFile(project, curDriveFiles, driveJarDirs.get(curDriveLetter))[ FD ]
Line_10 $$ char curDriveLetter = 0-->Line_28 $$ File jarFile = _createClasspathJarFile(project, curDriveFiles, driveJarDirs.get(curDriveLetter))[ FD ]
