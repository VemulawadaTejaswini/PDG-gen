Line_6 $$ analysisMap = (Map) extraProperties.get("scalaCompileAnalysisMap")-->Line_8 $$ analysisMap = Maps.newHashMap()[ FD ]
Line_12 $$ File analysisFile = task.getScalaCompileOptions().getIncrementalOptions().getAnalysisFile()-->Line_13 $$ analysisMap.put(publishedCode, analysisFile)[ FD ]
Line_3 $$ ExtraPropertiesExtension extraProperties = getProject().getRootProject().getExtensions().getExtraProperties()-->Line_5 $$ if (extraProperties.has("scalaCompileAnalysisMap")) [ FD ]
Line_8 $$ analysisMap = Maps.newHashMap()-->Line_13 $$ analysisMap.put(publishedCode, analysisFile)[ FD ]
Line_2 $$ protected Map<File, File> getOrCreateGlobalAnalysisMap() -->Line_18 $$ return analysisMap[ CD ]
Line_2 $$ protected Map<File, File> getOrCreateGlobalAnalysisMap() -->Line_3 $$ ExtraPropertiesExtension extraProperties = getProject().getRootProject().getExtensions().getExtraProperties()[ CD ]
Line_3 $$ ExtraPropertiesExtension extraProperties = getProject().getRootProject().getExtensions().getExtraProperties()-->Line_16 $$ extraProperties.set("scalaCompileAnalysisMap", Collections.unmodifiableMap(analysisMap))[ FD ]
Line_6 $$ analysisMap = (Map) extraProperties.get("scalaCompileAnalysisMap")-->Line_16 $$ extraProperties.set("scalaCompileAnalysisMap", Collections.unmodifiableMap(analysisMap))[ FD ]
Line_8 $$ analysisMap = Maps.newHashMap()-->Line_16 $$ extraProperties.set("scalaCompileAnalysisMap", Collections.unmodifiableMap(analysisMap))[ FD ]
Line_4 $$ Map<File, File> analysisMap-->Line_13 $$ analysisMap.put(publishedCode, analysisFile)[ FD ]
Line_2 $$ protected Map<File, File> getOrCreateGlobalAnalysisMap() -->Line_4 $$ Map<File, File> analysisMap[ CD ]
Line_9 $$ for (Project project : getProject().getRootProject().getAllprojects()) -->Line_10 $$ for (AbstractScalaCompile task : project.getTasks().withType(AbstractScalaCompile.class)) [ FD ]
Line_2 $$ protected Map<File, File> getOrCreateGlobalAnalysisMap() -->Line_5 $$ if (extraProperties.has("scalaCompileAnalysisMap")) [ CD ]
Line_3 $$ ExtraPropertiesExtension extraProperties = getProject().getRootProject().getExtensions().getExtraProperties()-->Line_6 $$ analysisMap = (Map) extraProperties.get("scalaCompileAnalysisMap")[ FD ]
Line_4 $$ Map<File, File> analysisMap-->Line_16 $$ extraProperties.set("scalaCompileAnalysisMap", Collections.unmodifiableMap(analysisMap))[ FD ]
Line_10 $$ for (AbstractScalaCompile task : project.getTasks().withType(AbstractScalaCompile.class)) -->Line_12 $$ File analysisFile = task.getScalaCompileOptions().getIncrementalOptions().getAnalysisFile()[ FD ]
Line_4 $$ Map<File, File> analysisMap-->Line_6 $$ analysisMap = (Map) extraProperties.get("scalaCompileAnalysisMap")[ FD ]
Line_5 $$ if (extraProperties.has("scalaCompileAnalysisMap")) -->Line_8 $$ analysisMap = Maps.newHashMap()[ CD ]
Line_10 $$ for (AbstractScalaCompile task : project.getTasks().withType(AbstractScalaCompile.class)) -->Line_11 $$ File publishedCode = task.getScalaCompileOptions().getIncrementalOptions().getPublishedCode()[ FD ]
Line_6 $$ analysisMap = (Map) extraProperties.get("scalaCompileAnalysisMap")-->Line_13 $$ analysisMap.put(publishedCode, analysisFile)[ FD ]
Line_11 $$ File publishedCode = task.getScalaCompileOptions().getIncrementalOptions().getPublishedCode()-->Line_13 $$ analysisMap.put(publishedCode, analysisFile)[ FD ]
Line_5 $$ if (extraProperties.has("scalaCompileAnalysisMap")) -->Line_6 $$ analysisMap = (Map) extraProperties.get("scalaCompileAnalysisMap")[ CD ]
Line_4 $$ Map<File, File> analysisMap-->Line_8 $$ analysisMap = Maps.newHashMap()[ FD ]
Line_5 $$ if (extraProperties.has("scalaCompileAnalysisMap")) -->Line_16 $$ extraProperties.set("scalaCompileAnalysisMap", Collections.unmodifiableMap(analysisMap))[ CD ]
