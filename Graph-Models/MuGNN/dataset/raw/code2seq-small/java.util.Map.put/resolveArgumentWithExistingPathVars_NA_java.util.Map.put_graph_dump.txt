Line_2 $$ public void resolveArgumentWithExistingPathVars() throws Exception -->Line_7 $$ uriTemplateVars.put("oldName", "oldValue")[ CD ]
Line_6 $$ Map<String, Object> pathVars-->Line_14 $$ assertEquals("value", pathVars.get("name"))[ FD ]
Line_11 $$ pathVars = (Map<String, Object>) request.getAttribute(View.PATH_VARIABLES)-->Line_13 $$ assertEquals(2, pathVars.size())[ FD ]
Line_2 $$ public void resolveArgumentWithExistingPathVars() throws Exception -->Line_14 $$ assertEquals("value", pathVars.get("name"))[ CD ]
Line_3 $$ Map<String, String> uriTemplateVars = new HashMap<String, String>()-->Line_7 $$ uriTemplateVars.put("oldName", "oldValue")[ FD ]
Line_2 $$ public void resolveArgumentWithExistingPathVars() throws Exception -->Line_15 $$ assertEquals("oldValue", pathVars.get("oldName"))[ CD ]
Line_2 $$ public void resolveArgumentWithExistingPathVars() throws Exception -->Line_10 $$ assertEquals("PathVariable not resolved correctly", "value", result)[ CD ]
Line_2 $$ public void resolveArgumentWithExistingPathVars() throws Exception -->Line_9 $$ String result = (String) resolver.resolveArgument(paramNamedString, mavContainer, webRequest, null)[ CD ]
Line_6 $$ Map<String, Object> pathVars-->Line_12 $$ assertNotNull(pathVars)[ FD ]
Line_2 $$ public void resolveArgumentWithExistingPathVars() throws Exception -->Line_6 $$ Map<String, Object> pathVars[ CD ]
Line_9 $$ String result = (String) resolver.resolveArgument(paramNamedString, mavContainer, webRequest, null)-->Line_10 $$ assertEquals("PathVariable not resolved correctly", "value", result)[ FD ]
Line_2 $$ public void resolveArgumentWithExistingPathVars() throws Exception -->Line_3 $$ Map<String, String> uriTemplateVars = new HashMap<String, String>()[ CD ]
Line_2 $$ public void resolveArgumentWithExistingPathVars() throws Exception -->Line_4 $$ uriTemplateVars.put("name", "value")[ CD ]
Line_2 $$ public void resolveArgumentWithExistingPathVars() throws Exception -->Line_11 $$ pathVars = (Map<String, Object>) request.getAttribute(View.PATH_VARIABLES)[ CD ]
Line_11 $$ pathVars = (Map<String, Object>) request.getAttribute(View.PATH_VARIABLES)-->Line_12 $$ assertNotNull(pathVars)[ FD ]
Line_3 $$ Map<String, String> uriTemplateVars = new HashMap<String, String>()-->Line_4 $$ uriTemplateVars.put("name", "value")[ FD ]
Line_2 $$ public void resolveArgumentWithExistingPathVars() throws Exception -->Line_12 $$ assertNotNull(pathVars)[ CD ]
Line_6 $$ Map<String, Object> pathVars-->Line_11 $$ pathVars = (Map<String, Object>) request.getAttribute(View.PATH_VARIABLES)[ FD ]
Line_6 $$ Map<String, Object> pathVars-->Line_13 $$ assertEquals(2, pathVars.size())[ FD ]
Line_3 $$ Map<String, String> uriTemplateVars = new HashMap<String, String>()-->Line_8 $$ request.setAttribute(View.PATH_VARIABLES, uriTemplateVars)[ FD ]
Line_6 $$ Map<String, Object> pathVars-->Line_15 $$ assertEquals("oldValue", pathVars.get("oldName"))[ FD ]
Line_2 $$ public void resolveArgumentWithExistingPathVars() throws Exception -->Line_5 $$ request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVars)[ CD ]
Line_2 $$ public void resolveArgumentWithExistingPathVars() throws Exception -->Line_13 $$ assertEquals(2, pathVars.size())[ CD ]
Line_11 $$ pathVars = (Map<String, Object>) request.getAttribute(View.PATH_VARIABLES)-->Line_14 $$ assertEquals("value", pathVars.get("name"))[ FD ]
Line_11 $$ pathVars = (Map<String, Object>) request.getAttribute(View.PATH_VARIABLES)-->Line_15 $$ assertEquals("oldValue", pathVars.get("oldName"))[ FD ]
Line_3 $$ Map<String, String> uriTemplateVars = new HashMap<String, String>()-->Line_5 $$ request.setAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVars)[ FD ]
Line_2 $$ public void resolveArgumentWithExistingPathVars() throws Exception -->Line_8 $$ request.setAttribute(View.PATH_VARIABLES, uriTemplateVars)[ CD ]
