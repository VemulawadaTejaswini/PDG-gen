Line_2 $$ public void testIdentityKeyWeakValue() throws InterruptedException -->Line_7 $$ Object testValue2 = new Object()[ CD ]
Line_2 $$ public void testIdentityKeyWeakValue() throws InterruptedException -->Line_5 $$ String testKey2 = new String(testKey1)[ CD ]
Line_2 $$ public void testIdentityKeyWeakValue() throws InterruptedException -->Line_20 $$ ReflectionTestUtil.invoke(FinalizeManager.class, "_pollingCleanup", new Class<?>[0])[ CD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentMap = new ConcurrentIdentityHashMap<String, Object>(new ConcurrentReferenceValueHashMap<IdentityKey<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY))-->Line_9 $$ Assert.assertNull(concurrentMap.put(testKey1, testValue1))[ FD ]
Line_2 $$ public void testIdentityKeyWeakValue() throws InterruptedException -->Line_3 $$ System.setProperty(FinalizeManager.class.getName() + ".thread.enabled", StringPool.FALSE)[ CD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentMap = new ConcurrentIdentityHashMap<String, Object>(new ConcurrentReferenceValueHashMap<IdentityKey<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY))-->Line_21 $$ Assert.assertEquals(1, concurrentMap.size())[ FD ]
Line_7 $$ Object testValue2 = new Object()-->Line_17 $$ Assert.assertSame(testValue2, concurrentMap.get(testKey2))[ FD ]
Line_5 $$ String testKey2 = new String(testKey1)-->Line_17 $$ Assert.assertSame(testValue2, concurrentMap.get(testKey2))[ FD ]
Line_2 $$ public void testIdentityKeyWeakValue() throws InterruptedException -->Line_25 $$ ReflectionTestUtil.invoke(FinalizeManager.class, "_pollingCleanup", new Class<?>[0])[ CD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentMap = new ConcurrentIdentityHashMap<String, Object>(new ConcurrentReferenceValueHashMap<IdentityKey<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY))-->Line_10 $$ Assert.assertNull(concurrentMap.put(testKey2, testValue2))[ FD ]
Line_2 $$ public void testIdentityKeyWeakValue() throws InterruptedException -->Line_11 $$ Assert.assertEquals(2, concurrentMap.size())[ CD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentMap = new ConcurrentIdentityHashMap<String, Object>(new ConcurrentReferenceValueHashMap<IdentityKey<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY))-->Line_11 $$ Assert.assertEquals(2, concurrentMap.size())[ FD ]
Line_2 $$ public void testIdentityKeyWeakValue() throws InterruptedException -->Line_12 $$ Assert.assertTrue(concurrentMap.containsKey(testKey1))[ CD ]
Line_2 $$ public void testIdentityKeyWeakValue() throws InterruptedException -->Line_26 $$ Assert.assertTrue(concurrentMap.isEmpty())[ CD ]
Line_6 $$ Object testValue1 = new Object()-->Line_13 $$ Assert.assertTrue(concurrentMap.containsValue(testValue1))[ FD ]
Line_2 $$ public void testIdentityKeyWeakValue() throws InterruptedException -->Line_23 $$ testValue2 = null[ CD ]
Line_5 $$ String testKey2 = new String(testKey1)-->Line_14 $$ Assert.assertTrue(concurrentMap.containsKey(testKey2))[ FD ]
Line_4 $$ String testKey1 = "testKey1"-->Line_16 $$ Assert.assertSame(testValue1, concurrentMap.get(testKey1))[ FD ]
Line_6 $$ Object testValue1 = new Object()-->Line_16 $$ Assert.assertSame(testValue1, concurrentMap.get(testKey1))[ FD ]
Line_5 $$ String testKey2 = new String(testKey1)-->Line_22 $$ Assert.assertTrue(concurrentMap.containsKey(testKey2))[ FD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentMap = new ConcurrentIdentityHashMap<String, Object>(new ConcurrentReferenceValueHashMap<IdentityKey<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY))-->Line_14 $$ Assert.assertTrue(concurrentMap.containsKey(testKey2))[ FD ]
Line_4 $$ String testKey1 = "testKey1"-->Line_12 $$ Assert.assertTrue(concurrentMap.containsKey(testKey1))[ FD ]
Line_2 $$ public void testIdentityKeyWeakValue() throws InterruptedException -->Line_24 $$ GCUtil.gc(true)[ CD ]
Line_7 $$ Object testValue2 = new Object()-->Line_23 $$ testValue2 = null[ FD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentMap = new ConcurrentIdentityHashMap<String, Object>(new ConcurrentReferenceValueHashMap<IdentityKey<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY))-->Line_13 $$ Assert.assertTrue(concurrentMap.containsValue(testValue1))[ FD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentMap = new ConcurrentIdentityHashMap<String, Object>(new ConcurrentReferenceValueHashMap<IdentityKey<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY))-->Line_15 $$ Assert.assertTrue(concurrentMap.containsValue(testValue2))[ FD ]
Line_2 $$ public void testIdentityKeyWeakValue() throws InterruptedException -->Line_10 $$ Assert.assertNull(concurrentMap.put(testKey2, testValue2))[ CD ]
Line_7 $$ Object testValue2 = new Object()-->Line_10 $$ Assert.assertNull(concurrentMap.put(testKey2, testValue2))[ FD ]
Line_2 $$ public void testIdentityKeyWeakValue() throws InterruptedException -->Line_13 $$ Assert.assertTrue(concurrentMap.containsValue(testValue1))[ CD ]
Line_2 $$ public void testIdentityKeyWeakValue() throws InterruptedException -->Line_8 $$ ConcurrentMap<String, Object> concurrentMap = new ConcurrentIdentityHashMap<String, Object>(new ConcurrentReferenceValueHashMap<IdentityKey<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY))[ CD ]
Line_2 $$ public void testIdentityKeyWeakValue() throws InterruptedException -->Line_18 $$ testValue1 = null[ CD ]
Line_2 $$ public void testIdentityKeyWeakValue() throws InterruptedException -->Line_9 $$ Assert.assertNull(concurrentMap.put(testKey1, testValue1))[ CD ]
Line_2 $$ public void testIdentityKeyWeakValue() throws InterruptedException -->Line_16 $$ Assert.assertSame(testValue1, concurrentMap.get(testKey1))[ CD ]
Line_2 $$ public void testIdentityKeyWeakValue() throws InterruptedException -->Line_15 $$ Assert.assertTrue(concurrentMap.containsValue(testValue2))[ CD ]
Line_2 $$ public void testIdentityKeyWeakValue() throws InterruptedException -->Line_17 $$ Assert.assertSame(testValue2, concurrentMap.get(testKey2))[ CD ]
Line_6 $$ Object testValue1 = new Object()-->Line_18 $$ testValue1 = null[ FD ]
Line_2 $$ public void testIdentityKeyWeakValue() throws InterruptedException -->Line_19 $$ GCUtil.gc(true)[ CD ]
Line_6 $$ Object testValue1 = new Object()-->Line_9 $$ Assert.assertNull(concurrentMap.put(testKey1, testValue1))[ FD ]
Line_4 $$ String testKey1 = "testKey1"-->Line_9 $$ Assert.assertNull(concurrentMap.put(testKey1, testValue1))[ FD ]
Line_2 $$ public void testIdentityKeyWeakValue() throws InterruptedException -->Line_4 $$ String testKey1 = "testKey1"[ CD ]
Line_5 $$ String testKey2 = new String(testKey1)-->Line_10 $$ Assert.assertNull(concurrentMap.put(testKey2, testValue2))[ FD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentMap = new ConcurrentIdentityHashMap<String, Object>(new ConcurrentReferenceValueHashMap<IdentityKey<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY))-->Line_26 $$ Assert.assertTrue(concurrentMap.isEmpty())[ FD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentMap = new ConcurrentIdentityHashMap<String, Object>(new ConcurrentReferenceValueHashMap<IdentityKey<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY))-->Line_17 $$ Assert.assertSame(testValue2, concurrentMap.get(testKey2))[ FD ]
Line_2 $$ public void testIdentityKeyWeakValue() throws InterruptedException -->Line_14 $$ Assert.assertTrue(concurrentMap.containsKey(testKey2))[ CD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentMap = new ConcurrentIdentityHashMap<String, Object>(new ConcurrentReferenceValueHashMap<IdentityKey<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY))-->Line_16 $$ Assert.assertSame(testValue1, concurrentMap.get(testKey1))[ FD ]
Line_2 $$ public void testIdentityKeyWeakValue() throws InterruptedException -->Line_22 $$ Assert.assertTrue(concurrentMap.containsKey(testKey2))[ CD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentMap = new ConcurrentIdentityHashMap<String, Object>(new ConcurrentReferenceValueHashMap<IdentityKey<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY))-->Line_22 $$ Assert.assertTrue(concurrentMap.containsKey(testKey2))[ FD ]
Line_2 $$ public void testIdentityKeyWeakValue() throws InterruptedException -->Line_21 $$ Assert.assertEquals(1, concurrentMap.size())[ CD ]
Line_8 $$ ConcurrentMap<String, Object> concurrentMap = new ConcurrentIdentityHashMap<String, Object>(new ConcurrentReferenceValueHashMap<IdentityKey<String>, Object>(FinalizeManager.WEAK_REFERENCE_FACTORY))-->Line_12 $$ Assert.assertTrue(concurrentMap.containsKey(testKey1))[ FD ]
Line_7 $$ Object testValue2 = new Object()-->Line_15 $$ Assert.assertTrue(concurrentMap.containsValue(testValue2))[ FD ]
Line_2 $$ public void testIdentityKeyWeakValue() throws InterruptedException -->Line_6 $$ Object testValue1 = new Object()[ CD ]
