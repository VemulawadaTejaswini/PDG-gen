Line_3 $$ Map<Object, Integer> nextCache = new HashMap<Object, Integer>()-->Line_9 $$ nextCache.put(id, computedLevel)[ FD ]
Line_2 $$ private void recomputeScheduleCache() -->Line_11 $$ scheduleCacheRef.set(Collections.unmodifiableMap(nextCache))[ CD ]
Line_4 $$ for (Map.Entry<Object, AtomicLong> entry : callCounts.entrySet()) -->Line_6 $$ AtomicLong value = entry.getValue()[ FD ]
Line_4 $$ for (Map.Entry<Object, AtomicLong> entry : callCounts.entrySet()) -->Line_5 $$ Object id = entry.getKey()[ FD ]
Line_2 $$ private void recomputeScheduleCache() -->Line_3 $$ Map<Object, Integer> nextCache = new HashMap<Object, Integer>()[ CD ]
Line_6 $$ AtomicLong value = entry.getValue()-->Line_7 $$ long snapshot = value.get()[ FD ]
Line_7 $$ long snapshot = value.get()-->Line_8 $$ int computedLevel = computePriorityLevel(snapshot)[ FD ]
Line_3 $$ Map<Object, Integer> nextCache = new HashMap<Object, Integer>()-->Line_11 $$ scheduleCacheRef.set(Collections.unmodifiableMap(nextCache))[ FD ]
Line_5 $$ Object id = entry.getKey()-->Line_9 $$ nextCache.put(id, computedLevel)[ FD ]
Line_8 $$ int computedLevel = computePriorityLevel(snapshot)-->Line_9 $$ nextCache.put(id, computedLevel)[ FD ]
