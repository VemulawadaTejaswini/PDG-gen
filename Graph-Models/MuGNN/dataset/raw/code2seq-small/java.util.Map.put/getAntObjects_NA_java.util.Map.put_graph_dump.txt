Line_24 $$ map.put(urls, loader = new AntClassLoader(urls))-->Line_27 $$ return loader.getAntObjects()[ FD ]
Line_2 $$ private static Map<String, Class> getAntObjects(final GroovyFile groovyFile) -->Line_19 $$ AntClassLoader loader[ CD ]
Line_2 $$ private static Map<String, Class> getAntObjects(final GroovyFile groovyFile) -->Line_5 $$ Set<VirtualFile> jars = new HashSet<VirtualFile>()[ CD ]
Line_2 $$ private static Map<String, Class> getAntObjects(final GroovyFile groovyFile) -->Line_4 $$ final Module module = ModuleUtil.findModuleForPsiElement(groovyFile)[ CD ]
Line_2 $$ private static Map<String, Class> getAntObjects(final GroovyFile groovyFile) -->Line_12 $$ final ArrayList<URL> urls = new ArrayList<URL>()[ CD ]
Line_19 $$ AntClassLoader loader-->Line_27 $$ return loader.getAntObjects()[ FD ]
Line_14 $$ VirtualFile localFile = PathUtil.getLocalFile(jar)-->Line_16 $$ urls.add(VfsUtilCore.convertToURL(localFile.getUrl()))[ FD ]
Line_12 $$ final ArrayList<URL> urls = new ArrayList<URL>()-->Line_22 $$ loader = map.get(urls)[ FD ]
Line_15 $$ if (localFile.getFileSystem() instanceof LocalFileSystem) -->Line_16 $$ urls.add(VfsUtilCore.convertToURL(localFile.getUrl()))[ CD ]
Line_13 $$ for (VirtualFile jar : jars) -->Line_14 $$ VirtualFile localFile = PathUtil.getLocalFile(jar)[ FD ]
Line_2 $$ private static Map<String, Class> getAntObjects(final GroovyFile groovyFile) -->Line_3 $$ final Project project = groovyFile.getProject()[ CD ]
Line_2 $$ private static Map<String, Class> getAntObjects(final GroovyFile groovyFile) -->Line_4 $$ final Module module = ModuleUtil.findModuleForPsiElement(groovyFile)[ FD ]
Line_2 $$ private static Map<String, Class> getAntObjects(final GroovyFile groovyFile) -->Line_10 $$ jars.addAll(GantScriptType.additionalScopeFiles(groovyFile))[ FD ]
Line_21 $$ final Map<List<URL>, AntClassLoader> map = CachedValuesManager.getManager(project).getParameterizedCachedValue(project, KEY, PROVIDER, false, project)-->Line_22 $$ loader = map.get(urls)[ FD ]
Line_19 $$ AntClassLoader loader-->Line_23 $$ if (loader == null) [ FD ]
Line_9 $$ if (groovyFile.isScript() && GroovyScriptUtil.getScriptType(groovyFile) instanceof GantScriptType) -->Line_10 $$ jars.addAll(GantScriptType.additionalScopeFiles(groovyFile))[ CD ]
Line_23 $$ if (loader == null) -->Line_24 $$ map.put(urls, loader = new AntClassLoader(urls))[ CD ]
Line_22 $$ loader = map.get(urls)-->Line_24 $$ map.put(urls, loader = new AntClassLoader(urls))[ FD ]
Line_5 $$ Set<VirtualFile> jars = new HashSet<VirtualFile>()-->Line_10 $$ jars.addAll(GantScriptType.additionalScopeFiles(groovyFile))[ FD ]
Line_12 $$ final ArrayList<URL> urls = new ArrayList<URL>()-->Line_24 $$ map.put(urls, loader = new AntClassLoader(urls))[ FD ]
Line_21 $$ final Map<List<URL>, AntClassLoader> map = CachedValuesManager.getManager(project).getParameterizedCachedValue(project, KEY, PROVIDER, false, project)-->Line_24 $$ map.put(urls, loader = new AntClassLoader(urls))[ FD ]
Line_19 $$ AntClassLoader loader-->Line_24 $$ map.put(urls, loader = new AntClassLoader(urls))[ FD ]
Line_12 $$ final ArrayList<URL> urls = new ArrayList<URL>()-->Line_16 $$ urls.add(VfsUtilCore.convertToURL(localFile.getUrl()))[ FD ]
Line_3 $$ final Project project = groovyFile.getProject()-->Line_21 $$ final Map<List<URL>, AntClassLoader> map = CachedValuesManager.getManager(project).getParameterizedCachedValue(project, KEY, PROVIDER, false, project)[ FD ]
Line_22 $$ loader = map.get(urls)-->Line_23 $$ if (loader == null) [ FD ]
Line_5 $$ Set<VirtualFile> jars = new HashSet<VirtualFile>()-->Line_7 $$ ContainerUtil.addAll(jars, OrderEnumerator.orderEntries(module).getAllLibrariesAndSdkClassesRoots())[ FD ]
Line_19 $$ AntClassLoader loader-->Line_22 $$ loader = map.get(urls)[ FD ]
Line_6 $$ if (module != null) -->Line_7 $$ ContainerUtil.addAll(jars, OrderEnumerator.orderEntries(module).getAllLibrariesAndSdkClassesRoots())[ CD ]
Line_2 $$ private static Map<String, Class> getAntObjects(final GroovyFile groovyFile) -->Line_6 $$ if (module != null) [ CD ]
Line_2 $$ private static Map<String, Class> getAntObjects(final GroovyFile groovyFile) -->Line_27 $$ return loader.getAntObjects()[ CD ]
Line_2 $$ private static Map<String, Class> getAntObjects(final GroovyFile groovyFile) -->Line_9 $$ if (groovyFile.isScript() && GroovyScriptUtil.getScriptType(groovyFile) instanceof GantScriptType) [ CD ]
Line_4 $$ final Module module = ModuleUtil.findModuleForPsiElement(groovyFile)-->Line_7 $$ ContainerUtil.addAll(jars, OrderEnumerator.orderEntries(module).getAllLibrariesAndSdkClassesRoots())[ FD ]
Line_2 $$ private static Map<String, Class> getAntObjects(final GroovyFile groovyFile) -->Line_9 $$ if (groovyFile.isScript() && GroovyScriptUtil.getScriptType(groovyFile) instanceof GantScriptType) [ FD ]
Line_4 $$ final Module module = ModuleUtil.findModuleForPsiElement(groovyFile)-->Line_6 $$ if (module != null) [ FD ]
Line_14 $$ VirtualFile localFile = PathUtil.getLocalFile(jar)-->Line_15 $$ if (localFile.getFileSystem() instanceof LocalFileSystem) [ FD ]
Line_2 $$ private static Map<String, Class> getAntObjects(final GroovyFile groovyFile) -->Line_3 $$ final Project project = groovyFile.getProject()[ FD ]
Line_22 $$ loader = map.get(urls)-->Line_27 $$ return loader.getAntObjects()[ FD ]
