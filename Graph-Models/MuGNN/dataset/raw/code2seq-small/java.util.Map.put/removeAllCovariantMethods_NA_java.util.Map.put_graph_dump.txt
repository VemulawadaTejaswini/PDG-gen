Line_2 $$ private static void removeAllCovariantMethods(final List<Method> actualMethods, final Method method, final Map<Method, Method> covariantMethods) -->Line_3 $$ if ((method.getModifiers() & Constants.ACC_SYNTHETIC) != 0) [ CD ]
Line_2 $$ private static void removeAllCovariantMethods(final List<Method> actualMethods, final Method method, final Map<Method, Method> covariantMethods) -->Line_6 $$ for (Iterator<Method> it = actualMethods.iterator(); it.hasNext(); ) [ FD ]
Line_2 $$ private static void removeAllCovariantMethods(final List<Method> actualMethods, final Method method, final Map<Method, Method> covariantMethods) -->Line_6 $$ for (Iterator<Method> it = actualMethods.iterator(); it.hasNext(); ) [ CD ]
Line_2 $$ private static void removeAllCovariantMethods(final List<Method> actualMethods, final Method method, final Map<Method, Method> covariantMethods) -->Line_16 $$ covariantMethods.put(actualMethod, method)[ FD ]
Line_15 $$ if ((actualMethod.getModifiers() & Constants.ACC_ABSTRACT) != 0 || (actualMethod.getModifiers() & Constants.ACC_SYNTHETIC) != 0) -->Line_18 $$ it.remove()[ CD ]
Line_7 $$ Method actualMethod = it.next()-->Line_14 $$ if (ReflectionUtil.isAssignable(actualMethod.getReturnType(), method.getReturnType())) [ FD ]
Line_7 $$ Method actualMethod = it.next()-->Line_8 $$ if (actualMethod.equals(method)) [ FD ]
Line_2 $$ private static void removeAllCovariantMethods(final List<Method> actualMethods, final Method method, final Map<Method, Method> covariantMethods) -->Line_3 $$ if ((method.getModifiers() & Constants.ACC_SYNTHETIC) != 0) [ FD ]
Line_7 $$ Method actualMethod = it.next()-->Line_11 $$ if (!actualMethod.getName().equals(method.getName()) || !Arrays.equals(actualMethod.getParameterTypes(), method.getParameterTypes())) [ FD ]
Line_2 $$ private static void removeAllCovariantMethods(final List<Method> actualMethods, final Method method, final Map<Method, Method> covariantMethods) -->Line_8 $$ if (actualMethod.equals(method)) [ FD ]
Line_6 $$ for (Iterator<Method> it = actualMethods.iterator(); it.hasNext(); ) -->Line_7 $$ Method actualMethod = it.next()[ FD ]
Line_2 $$ private static void removeAllCovariantMethods(final List<Method> actualMethods, final Method method, final Map<Method, Method> covariantMethods) -->Line_11 $$ if (!actualMethod.getName().equals(method.getName()) || !Arrays.equals(actualMethod.getParameterTypes(), method.getParameterTypes())) [ FD ]
Line_14 $$ if (ReflectionUtil.isAssignable(actualMethod.getReturnType(), method.getReturnType())) -->Line_15 $$ if ((actualMethod.getModifiers() & Constants.ACC_ABSTRACT) != 0 || (actualMethod.getModifiers() & Constants.ACC_SYNTHETIC) != 0) [ CD ]
Line_3 $$ if ((method.getModifiers() & Constants.ACC_SYNTHETIC) != 0) -->Line_4 $$ return[ CD ]
Line_7 $$ Method actualMethod = it.next()-->Line_15 $$ if ((actualMethod.getModifiers() & Constants.ACC_ABSTRACT) != 0 || (actualMethod.getModifiers() & Constants.ACC_SYNTHETIC) != 0) [ FD ]
Line_2 $$ private static void removeAllCovariantMethods(final List<Method> actualMethods, final Method method, final Map<Method, Method> covariantMethods) -->Line_14 $$ if (ReflectionUtil.isAssignable(actualMethod.getReturnType(), method.getReturnType())) [ FD ]
Line_6 $$ for (Iterator<Method> it = actualMethods.iterator(); it.hasNext(); ) -->Line_8 $$ if (actualMethod.equals(method)) [ CD ]
Line_6 $$ for (Iterator<Method> it = actualMethods.iterator(); it.hasNext(); ) -->Line_11 $$ if (!actualMethod.getName().equals(method.getName()) || !Arrays.equals(actualMethod.getParameterTypes(), method.getParameterTypes())) [ CD ]
Line_7 $$ Method actualMethod = it.next()-->Line_16 $$ covariantMethods.put(actualMethod, method)[ FD ]
Line_15 $$ if ((actualMethod.getModifiers() & Constants.ACC_ABSTRACT) != 0 || (actualMethod.getModifiers() & Constants.ACC_SYNTHETIC) != 0) -->Line_16 $$ covariantMethods.put(actualMethod, method)[ CD ]
Line_6 $$ for (Iterator<Method> it = actualMethods.iterator(); it.hasNext(); ) -->Line_7 $$ Method actualMethod = it.next()[ CD ]
Line_6 $$ for (Iterator<Method> it = actualMethods.iterator(); it.hasNext(); ) -->Line_14 $$ if (ReflectionUtil.isAssignable(actualMethod.getReturnType(), method.getReturnType())) [ CD ]
Line_6 $$ for (Iterator<Method> it = actualMethods.iterator(); it.hasNext(); ) -->Line_18 $$ it.remove()[ FD ]
