Line_10 $$ String line-->Line_46 $$ line = reader.readLine()[ FD ]
Line_4 $$ BufferedReader reader = null-->Line_40 $$ compilerConfiguration.setSourceEncoding(reader.readLine())[ FD ]
Line_4 $$ BufferedReader reader = null-->Line_21 $$ class2File.put(line, new File(reader.readLine()))[ FD ]
Line_11 $$ while ((line = reader.readLine()) != null) -->Line_46 $$ line = reader.readLine()[ FD ]
Line_11 $$ while ((line = reader.readLine()) != null) -->Line_12 $$ if (!GroovyRtConstants.SRC_FILE.equals(line)) [ CD ]
Line_11 $$ while ((line = reader.readLine()) != null) -->Line_16 $$ srcFiles.add(file)[ CD ]
Line_18 $$ while (line != null) -->Line_19 $$ if (line.equals("class2src")) [ CD ]
Line_10 $$ String line-->Line_18 $$ while (line != null) [ FD ]
Line_20 $$ while (!GroovyRtConstants.END.equals(line = reader.readLine())) -->Line_21 $$ class2File.put(line, new File(reader.readLine()))[ CD ]
Line_11 $$ while ((line = reader.readLine()) != null) -->Line_15 $$ final File file = new File(reader.readLine())[ CD ]
Line_4 $$ BufferedReader reader = null-->Line_42 $$ compilerConfiguration.setTargetDirectory(reader.readLine())[ FD ]
Line_11 $$ while ((line = reader.readLine()) != null) -->Line_43 $$ if (line.startsWith(GroovyRtConstants.FINAL_OUTPUTPATH)) [ FD ]
Line_11 $$ while ((line = reader.readLine()) != null) -->Line_23 $$ if (line.startsWith(GroovyRtConstants.PATCHERS)) [ FD ]
Line_2 $$ private static String fillFromArgsFile(File argsFile, CompilerConfiguration compilerConfiguration, List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, List<File> srcFiles, Map<String, File> class2File, String[] finalOutputs) -->Line_3 $$ String moduleClasspath = null[ CD ]
Line_4 $$ BufferedReader reader = null-->Line_9 $$ reader.readLine()[ FD ]
Line_43 $$ if (line.startsWith(GroovyRtConstants.FINAL_OUTPUTPATH)) -->Line_44 $$ finalOutputs[0] = reader.readLine()[ CD ]
Line_41 $$ if (line.startsWith(GroovyRtConstants.OUTPUTPATH)) -->Line_42 $$ compilerConfiguration.setTargetDirectory(reader.readLine())[ CD ]
Line_18 $$ while (line != null) -->Line_46 $$ line = reader.readLine()[ CD ]
Line_10 $$ String line-->Line_21 $$ class2File.put(line, new File(reader.readLine()))[ FD ]
Line_2 $$ private static String fillFromArgsFile(File argsFile, CompilerConfiguration compilerConfiguration, List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, List<File> srcFiles, Map<String, File> class2File, String[] finalOutputs) -->Line_61 $$ return moduleClasspath[ CD ]
Line_5 $$ FileInputStream stream-->Line_7 $$ stream = new FileInputStream(argsFile)[ FD ]
Line_11 $$ while ((line = reader.readLine()) != null) -->Line_18 $$ while (line != null) [ FD ]
Line_8 $$ reader = new BufferedReader(new InputStreamReader(stream))-->Line_15 $$ final File file = new File(reader.readLine())[ FD ]
Line_10 $$ String line-->Line_12 $$ if (!GroovyRtConstants.SRC_FILE.equals(line)) [ FD ]
Line_10 $$ String line-->Line_23 $$ if (line.startsWith(GroovyRtConstants.PATCHERS)) [ FD ]
Line_46 $$ line = reader.readLine()-->Line_19 $$ if (line.equals("class2src")) [ FD ]
Line_8 $$ reader = new BufferedReader(new InputStreamReader(stream))-->Line_26 $$ while (!GroovyRtConstants.END.equals(s = reader.readLine())) [ FD ]
Line_23 $$ if (line.startsWith(GroovyRtConstants.PATCHERS)) -->Line_24 $$ final ClassLoader classLoader = Thread.currentThread().getContextClassLoader()[ CD ]
Line_11 $$ while ((line = reader.readLine()) != null) -->Line_39 $$ if (line.startsWith(GroovyRtConstants.ENCODING)) [ FD ]
Line_29 $$ final CompilationUnitPatcher patcher = (CompilationUnitPatcher) patcherClass.newInstance()-->Line_30 $$ patchers.add(patcher)[ FD ]
Line_20 $$ while (!GroovyRtConstants.END.equals(line = reader.readLine())) -->Line_21 $$ class2File.put(line, new File(reader.readLine()))[ FD ]
Line_4 $$ BufferedReader reader = null-->Line_46 $$ line = reader.readLine()[ FD ]
Line_19 $$ if (line.equals("class2src")) -->Line_23 $$ if (line.startsWith(GroovyRtConstants.PATCHERS)) [ CD ]
Line_4 $$ BufferedReader reader = null-->Line_44 $$ finalOutputs[0] = reader.readLine()[ FD ]
Line_4 $$ BufferedReader reader = null-->Line_11 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_10 $$ String line-->Line_39 $$ if (line.startsWith(GroovyRtConstants.ENCODING)) [ FD ]
Line_11 $$ while ((line = reader.readLine()) != null) -->Line_20 $$ while (!GroovyRtConstants.END.equals(line = reader.readLine())) [ FD ]
Line_8 $$ reader = new BufferedReader(new InputStreamReader(stream))-->Line_54 $$ reader.close()[ FD ]
Line_8 $$ reader = new BufferedReader(new InputStreamReader(stream))-->Line_9 $$ reader.readLine()[ FD ]
Line_20 $$ while (!GroovyRtConstants.END.equals(line = reader.readLine())) -->Line_23 $$ if (line.startsWith(GroovyRtConstants.PATCHERS)) [ FD ]
Line_2 $$ private static String fillFromArgsFile(File argsFile, CompilerConfiguration compilerConfiguration, List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, List<File> srcFiles, Map<String, File> class2File, String[] finalOutputs) -->Line_16 $$ srcFiles.add(file)[ FD ]
Line_23 $$ if (line.startsWith(GroovyRtConstants.PATCHERS)) -->Line_26 $$ while (!GroovyRtConstants.END.equals(s = reader.readLine())) [ CD ]
Line_8 $$ reader = new BufferedReader(new InputStreamReader(stream))-->Line_46 $$ line = reader.readLine()[ FD ]
Line_4 $$ BufferedReader reader = null-->Line_26 $$ while (!GroovyRtConstants.END.equals(s = reader.readLine())) [ FD ]
Line_11 $$ while ((line = reader.readLine()) != null) -->Line_12 $$ if (!GroovyRtConstants.SRC_FILE.equals(line)) [ FD ]
Line_20 $$ while (!GroovyRtConstants.END.equals(line = reader.readLine())) -->Line_39 $$ if (line.startsWith(GroovyRtConstants.ENCODING)) [ FD ]
Line_11 $$ while ((line = reader.readLine()) != null) -->Line_21 $$ class2File.put(line, new File(reader.readLine()))[ FD ]
Line_15 $$ final File file = new File(reader.readLine())-->Line_16 $$ srcFiles.add(file)[ FD ]
Line_28 $$ final Class<?> patcherClass = classLoader.loadClass(s)-->Line_29 $$ final CompilationUnitPatcher patcher = (CompilationUnitPatcher) patcherClass.newInstance()[ FD ]
Line_2 $$ private static String fillFromArgsFile(File argsFile, CompilerConfiguration compilerConfiguration, List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, List<File> srcFiles, Map<String, File> class2File, String[] finalOutputs) -->Line_5 $$ FileInputStream stream[ CD ]
Line_41 $$ if (line.startsWith(GroovyRtConstants.OUTPUTPATH)) -->Line_43 $$ if (line.startsWith(GroovyRtConstants.FINAL_OUTPUTPATH)) [ CD ]
Line_20 $$ while (!GroovyRtConstants.END.equals(line = reader.readLine())) -->Line_46 $$ line = reader.readLine()[ FD ]
Line_11 $$ while ((line = reader.readLine()) != null) -->Line_41 $$ if (line.startsWith(GroovyRtConstants.OUTPUTPATH)) [ FD ]
Line_20 $$ while (!GroovyRtConstants.END.equals(line = reader.readLine())) -->Line_43 $$ if (line.startsWith(GroovyRtConstants.FINAL_OUTPUTPATH)) [ FD ]
Line_4 $$ BufferedReader reader = null-->Line_8 $$ reader = new BufferedReader(new InputStreamReader(stream))[ FD ]
Line_2 $$ private static String fillFromArgsFile(File argsFile, CompilerConfiguration compilerConfiguration, List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, List<File> srcFiles, Map<String, File> class2File, String[] finalOutputs) -->Line_32 $$ addExceptionInfo(compilerMessages, e, "Couldn't instantiate " + s)[ FD ]
Line_10 $$ String line-->Line_19 $$ if (line.equals("class2src")) [ FD ]
Line_10 $$ String line-->Line_20 $$ while (!GroovyRtConstants.END.equals(line = reader.readLine())) [ FD ]
Line_8 $$ reader = new BufferedReader(new InputStreamReader(stream))-->Line_21 $$ class2File.put(line, new File(reader.readLine()))[ FD ]
Line_2 $$ private static String fillFromArgsFile(File argsFile, CompilerConfiguration compilerConfiguration, List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, List<File> srcFiles, Map<String, File> class2File, String[] finalOutputs) -->Line_36 $$ addExceptionInfo(compilerMessages, e, "Couldn't instantiate " + s)[ FD ]
Line_8 $$ reader = new BufferedReader(new InputStreamReader(stream))-->Line_40 $$ compilerConfiguration.setSourceEncoding(reader.readLine())[ FD ]
Line_46 $$ line = reader.readLine()-->Line_23 $$ if (line.startsWith(GroovyRtConstants.PATCHERS)) [ FD ]
Line_19 $$ if (line.equals("class2src")) -->Line_20 $$ while (!GroovyRtConstants.END.equals(line = reader.readLine())) [ CD ]
Line_8 $$ reader = new BufferedReader(new InputStreamReader(stream))-->Line_42 $$ compilerConfiguration.setTargetDirectory(reader.readLine())[ FD ]
Line_39 $$ if (line.startsWith(GroovyRtConstants.ENCODING)) -->Line_41 $$ if (line.startsWith(GroovyRtConstants.OUTPUTPATH)) [ CD ]
Line_2 $$ private static String fillFromArgsFile(File argsFile, CompilerConfiguration compilerConfiguration, List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, List<File> srcFiles, Map<String, File> class2File, String[] finalOutputs) -->Line_4 $$ BufferedReader reader = null[ CD ]
Line_39 $$ if (line.startsWith(GroovyRtConstants.ENCODING)) -->Line_40 $$ compilerConfiguration.setSourceEncoding(reader.readLine())[ CD ]
Line_46 $$ line = reader.readLine()-->Line_43 $$ if (line.startsWith(GroovyRtConstants.FINAL_OUTPUTPATH)) [ FD ]
Line_2 $$ private static String fillFromArgsFile(File argsFile, CompilerConfiguration compilerConfiguration, List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, List<File> srcFiles, Map<String, File> class2File, String[] finalOutputs) -->Line_40 $$ compilerConfiguration.setSourceEncoding(reader.readLine())[ FD ]
Line_2 $$ private static String fillFromArgsFile(File argsFile, CompilerConfiguration compilerConfiguration, List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, List<File> srcFiles, Map<String, File> class2File, String[] finalOutputs) -->Line_58 $$ argsFile.delete()[ FD ]
Line_8 $$ reader = new BufferedReader(new InputStreamReader(stream))-->Line_44 $$ finalOutputs[0] = reader.readLine()[ FD ]
Line_46 $$ line = reader.readLine()-->Line_39 $$ if (line.startsWith(GroovyRtConstants.ENCODING)) [ FD ]
Line_4 $$ BufferedReader reader = null-->Line_54 $$ reader.close()[ FD ]
Line_20 $$ while (!GroovyRtConstants.END.equals(line = reader.readLine())) -->Line_41 $$ if (line.startsWith(GroovyRtConstants.OUTPUTPATH)) [ FD ]
Line_10 $$ String line-->Line_41 $$ if (line.startsWith(GroovyRtConstants.OUTPUTPATH)) [ FD ]
Line_2 $$ private static String fillFromArgsFile(File argsFile, CompilerConfiguration compilerConfiguration, List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, List<File> srcFiles, Map<String, File> class2File, String[] finalOutputs) -->Line_42 $$ compilerConfiguration.setTargetDirectory(reader.readLine())[ FD ]
Line_2 $$ private static String fillFromArgsFile(File argsFile, CompilerConfiguration compilerConfiguration, List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, List<File> srcFiles, Map<String, File> class2File, String[] finalOutputs) -->Line_30 $$ patchers.add(patcher)[ FD ]
Line_8 $$ reader = new BufferedReader(new InputStreamReader(stream))-->Line_11 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_46 $$ line = reader.readLine()-->Line_18 $$ while (line != null) [ FD ]
Line_4 $$ BufferedReader reader = null-->Line_15 $$ final File file = new File(reader.readLine())[ FD ]
Line_8 $$ reader = new BufferedReader(new InputStreamReader(stream))-->Line_20 $$ while (!GroovyRtConstants.END.equals(line = reader.readLine())) [ FD ]
Line_10 $$ String line-->Line_43 $$ if (line.startsWith(GroovyRtConstants.FINAL_OUTPUTPATH)) [ FD ]
Line_10 $$ String line-->Line_11 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_46 $$ line = reader.readLine()-->Line_41 $$ if (line.startsWith(GroovyRtConstants.OUTPUTPATH)) [ FD ]
Line_23 $$ if (line.startsWith(GroovyRtConstants.PATCHERS)) -->Line_39 $$ if (line.startsWith(GroovyRtConstants.ENCODING)) [ CD ]
Line_4 $$ BufferedReader reader = null-->Line_20 $$ while (!GroovyRtConstants.END.equals(line = reader.readLine())) [ FD ]
Line_11 $$ while ((line = reader.readLine()) != null) -->Line_19 $$ if (line.equals("class2src")) [ FD ]
Line_2 $$ private static String fillFromArgsFile(File argsFile, CompilerConfiguration compilerConfiguration, List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, List<File> srcFiles, Map<String, File> class2File, String[] finalOutputs) -->Line_21 $$ class2File.put(line, new File(reader.readLine()))[ FD ]
Line_2 $$ private static String fillFromArgsFile(File argsFile, CompilerConfiguration compilerConfiguration, List<CompilationUnitPatcher> patchers, List<CompilerMessage> compilerMessages, List<File> srcFiles, Map<String, File> class2File, String[] finalOutputs) -->Line_34 $$ addExceptionInfo(compilerMessages, e, "Couldn't instantiate " + s)[ FD ]
