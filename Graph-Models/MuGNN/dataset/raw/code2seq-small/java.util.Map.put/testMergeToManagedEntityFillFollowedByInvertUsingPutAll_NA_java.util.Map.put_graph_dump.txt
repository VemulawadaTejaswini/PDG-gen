Line_2 $$ public void testMergeToManagedEntityFillFollowedByInvertUsingPutAll() -->Line_20 $$ assertFalse(cache.invertMap().containsKey(mergeEntity2))[ CD ]
Line_2 $$ public void testMergeToManagedEntityFillFollowedByInvertUsingPutAll() -->Line_5 $$ Object mergeEntity1 = new Simple(1)[ CD ]
Line_3 $$ MergeContext cache = new MergeContext(session, new DoNothingEntityCopyObserver())-->Line_11 $$ cache.putAll(input)[ FD ]
Line_2 $$ public void testMergeToManagedEntityFillFollowedByInvertUsingPutAll() -->Line_12 $$ checkCacheConsistency(cache, 2)[ CD ]
Line_2 $$ public void testMergeToManagedEntityFillFollowedByInvertUsingPutAll() -->Line_15 $$ assertTrue(cache.containsKey(mergeEntity2))[ CD ]
Line_8 $$ Object mergeEntity2 = new Simple(3)-->Line_20 $$ assertFalse(cache.invertMap().containsKey(mergeEntity2))[ FD ]
Line_3 $$ MergeContext cache = new MergeContext(session, new DoNothingEntityCopyObserver())-->Line_19 $$ assertTrue(cache.invertMap().containsKey(managedEntity2))[ FD ]
Line_2 $$ public void testMergeToManagedEntityFillFollowedByInvertUsingPutAll() -->Line_14 $$ assertFalse(cache.containsKey(managedEntity1))[ CD ]
Line_3 $$ MergeContext cache = new MergeContext(session, new DoNothingEntityCopyObserver())-->Line_13 $$ assertTrue(cache.containsKey(mergeEntity1))[ FD ]
Line_3 $$ MergeContext cache = new MergeContext(session, new DoNothingEntityCopyObserver())-->Line_15 $$ assertTrue(cache.containsKey(mergeEntity2))[ FD ]
Line_3 $$ MergeContext cache = new MergeContext(session, new DoNothingEntityCopyObserver())-->Line_20 $$ assertFalse(cache.invertMap().containsKey(mergeEntity2))[ FD ]
Line_2 $$ public void testMergeToManagedEntityFillFollowedByInvertUsingPutAll() -->Line_13 $$ assertTrue(cache.containsKey(mergeEntity1))[ CD ]
Line_5 $$ Object mergeEntity1 = new Simple(1)-->Line_18 $$ assertFalse(cache.invertMap().containsKey(mergeEntity1))[ FD ]
Line_2 $$ public void testMergeToManagedEntityFillFollowedByInvertUsingPutAll() -->Line_11 $$ cache.putAll(input)[ CD ]
Line_4 $$ Map<Object, Object> input = new HashMap<Object, Object>()-->Line_10 $$ input.put(mergeEntity2, managedEntity2)[ FD ]
Line_9 $$ Object managedEntity2 = 2-->Line_16 $$ assertFalse(cache.containsKey(managedEntity2))[ FD ]
Line_2 $$ public void testMergeToManagedEntityFillFollowedByInvertUsingPutAll() -->Line_18 $$ assertFalse(cache.invertMap().containsKey(mergeEntity1))[ CD ]
Line_5 $$ Object mergeEntity1 = new Simple(1)-->Line_13 $$ assertTrue(cache.containsKey(mergeEntity1))[ FD ]
Line_2 $$ public void testMergeToManagedEntityFillFollowedByInvertUsingPutAll() -->Line_17 $$ assertTrue(cache.invertMap().containsKey(managedEntity1))[ CD ]
Line_2 $$ public void testMergeToManagedEntityFillFollowedByInvertUsingPutAll() -->Line_19 $$ assertTrue(cache.invertMap().containsKey(managedEntity2))[ CD ]
Line_6 $$ Object managedEntity1 = 1-->Line_17 $$ assertTrue(cache.invertMap().containsKey(managedEntity1))[ FD ]
Line_4 $$ Map<Object, Object> input = new HashMap<Object, Object>()-->Line_11 $$ cache.putAll(input)[ FD ]
Line_2 $$ public void testMergeToManagedEntityFillFollowedByInvertUsingPutAll() -->Line_7 $$ input.put(mergeEntity1, managedEntity1)[ CD ]
Line_2 $$ public void testMergeToManagedEntityFillFollowedByInvertUsingPutAll() -->Line_6 $$ Object managedEntity1 = 1[ CD ]
Line_8 $$ Object mergeEntity2 = new Simple(3)-->Line_10 $$ input.put(mergeEntity2, managedEntity2)[ FD ]
Line_9 $$ Object managedEntity2 = 2-->Line_10 $$ input.put(mergeEntity2, managedEntity2)[ FD ]
Line_2 $$ public void testMergeToManagedEntityFillFollowedByInvertUsingPutAll() -->Line_16 $$ assertFalse(cache.containsKey(managedEntity2))[ CD ]
Line_3 $$ MergeContext cache = new MergeContext(session, new DoNothingEntityCopyObserver())-->Line_16 $$ assertFalse(cache.containsKey(managedEntity2))[ FD ]
Line_2 $$ public void testMergeToManagedEntityFillFollowedByInvertUsingPutAll() -->Line_9 $$ Object managedEntity2 = 2[ CD ]
Line_3 $$ MergeContext cache = new MergeContext(session, new DoNothingEntityCopyObserver())-->Line_17 $$ assertTrue(cache.invertMap().containsKey(managedEntity1))[ FD ]
Line_2 $$ public void testMergeToManagedEntityFillFollowedByInvertUsingPutAll() -->Line_8 $$ Object mergeEntity2 = new Simple(3)[ CD ]
Line_2 $$ public void testMergeToManagedEntityFillFollowedByInvertUsingPutAll() -->Line_10 $$ input.put(mergeEntity2, managedEntity2)[ CD ]
Line_6 $$ Object managedEntity1 = 1-->Line_7 $$ input.put(mergeEntity1, managedEntity1)[ FD ]
Line_4 $$ Map<Object, Object> input = new HashMap<Object, Object>()-->Line_7 $$ input.put(mergeEntity1, managedEntity1)[ FD ]
Line_2 $$ public void testMergeToManagedEntityFillFollowedByInvertUsingPutAll() -->Line_3 $$ MergeContext cache = new MergeContext(session, new DoNothingEntityCopyObserver())[ CD ]
Line_5 $$ Object mergeEntity1 = new Simple(1)-->Line_7 $$ input.put(mergeEntity1, managedEntity1)[ FD ]
Line_3 $$ MergeContext cache = new MergeContext(session, new DoNothingEntityCopyObserver())-->Line_18 $$ assertFalse(cache.invertMap().containsKey(mergeEntity1))[ FD ]
Line_3 $$ MergeContext cache = new MergeContext(session, new DoNothingEntityCopyObserver())-->Line_12 $$ checkCacheConsistency(cache, 2)[ FD ]
Line_3 $$ MergeContext cache = new MergeContext(session, new DoNothingEntityCopyObserver())-->Line_14 $$ assertFalse(cache.containsKey(managedEntity1))[ FD ]
Line_2 $$ public void testMergeToManagedEntityFillFollowedByInvertUsingPutAll() -->Line_4 $$ Map<Object, Object> input = new HashMap<Object, Object>()[ CD ]
Line_9 $$ Object managedEntity2 = 2-->Line_19 $$ assertTrue(cache.invertMap().containsKey(managedEntity2))[ FD ]
Line_6 $$ Object managedEntity1 = 1-->Line_14 $$ assertFalse(cache.containsKey(managedEntity1))[ FD ]
Line_8 $$ Object mergeEntity2 = new Simple(3)-->Line_15 $$ assertTrue(cache.containsKey(mergeEntity2))[ FD ]
