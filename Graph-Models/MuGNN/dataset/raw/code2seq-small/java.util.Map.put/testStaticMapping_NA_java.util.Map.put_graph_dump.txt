Line_2 $$ public void testStaticMapping() throws IOException -->Line_16 $$ assertEquals(1000, (int) uMap.inverse().get("atm"))[ CD ]
Line_2 $$ public void testStaticMapping() throws IOException -->Line_14 $$ assertEquals(10, (int) uMap.inverse().get("hdfs"))[ CD ]
Line_2 $$ public void testStaticMapping() throws IOException -->Line_12 $$ IdUserGroup.updateMapInternal(gMap, "group", GET_ALL_GROUPS_CMD, ":", gidStaticMap)[ CD ]
Line_7 $$ BiMap<Integer, String> uMap = HashBiMap.create()-->Line_11 $$ IdUserGroup.updateMapInternal(uMap, "user", GET_ALL_USERS_CMD, ":", uidStaticMap)[ FD ]
Line_2 $$ public void testStaticMapping() throws IOException -->Line_19 $$ assertEquals("mapred", gMap.get(200))[ CD ]
Line_2 $$ public void testStaticMapping() throws IOException -->Line_11 $$ IdUserGroup.updateMapInternal(uMap, "user", GET_ALL_USERS_CMD, ":", uidStaticMap)[ CD ]
Line_8 $$ BiMap<Integer, String> gMap = HashBiMap.create()-->Line_19 $$ assertEquals("mapred", gMap.get(200))[ FD ]
Line_3 $$ Map<Integer, Integer> uidStaticMap = new PassThroughMap<Integer>()-->Line_5 $$ uidStaticMap.put(11501, 10)[ FD ]
Line_2 $$ public void testStaticMapping() throws IOException -->Line_22 $$ assertEquals(498, (int) gMap.inverse().get("mapred2"))[ CD ]
Line_2 $$ public void testStaticMapping() throws IOException -->Line_17 $$ assertEquals("hdfs", gMap.get(11501))[ CD ]
Line_8 $$ BiMap<Integer, String> gMap = HashBiMap.create()-->Line_12 $$ IdUserGroup.updateMapInternal(gMap, "group", GET_ALL_GROUPS_CMD, ":", gidStaticMap)[ FD ]
Line_7 $$ BiMap<Integer, String> uMap = HashBiMap.create()-->Line_16 $$ assertEquals(1000, (int) uMap.inverse().get("atm"))[ FD ]
Line_2 $$ public void testStaticMapping() throws IOException -->Line_8 $$ BiMap<Integer, String> gMap = HashBiMap.create()[ CD ]
Line_8 $$ BiMap<Integer, String> gMap = HashBiMap.create()-->Line_20 $$ assertEquals(200, (int) gMap.inverse().get("mapred"))[ FD ]
Line_4 $$ Map<Integer, Integer> gidStaticMap = new PassThroughMap<Integer>()-->Line_12 $$ IdUserGroup.updateMapInternal(gMap, "group", GET_ALL_GROUPS_CMD, ":", gidStaticMap)[ FD ]
Line_9 $$ String GET_ALL_USERS_CMD = "echo \"atm:x:1000:1000:Aaron T. Myers,,,:/home/atm:/bin/bash\n" + "hdfs:x:11501:10787:Grid Distributed File System:/home/hdfs:/bin/bash\"" + " | cut -d: -f1,3"-->Line_11 $$ IdUserGroup.updateMapInternal(uMap, "user", GET_ALL_USERS_CMD, ":", uidStaticMap)[ FD ]
Line_2 $$ public void testStaticMapping() throws IOException -->Line_18 $$ assertEquals(11501, (int) gMap.inverse().get("hdfs"))[ CD ]
Line_7 $$ BiMap<Integer, String> uMap = HashBiMap.create()-->Line_13 $$ assertEquals("hdfs", uMap.get(10))[ FD ]
Line_7 $$ BiMap<Integer, String> uMap = HashBiMap.create()-->Line_14 $$ assertEquals(10, (int) uMap.inverse().get("hdfs"))[ FD ]
Line_2 $$ public void testStaticMapping() throws IOException -->Line_9 $$ String GET_ALL_USERS_CMD = "echo \"atm:x:1000:1000:Aaron T. Myers,,,:/home/atm:/bin/bash\n" + "hdfs:x:11501:10787:Grid Distributed File System:/home/hdfs:/bin/bash\"" + " | cut -d: -f1,3"[ CD ]
Line_10 $$ String GET_ALL_GROUPS_CMD = "echo \"hdfs:*:11501:hrt_hdfs\n" + "mapred:x:497\n" + "mapred2:x:498\"" + " | cut -d: -f1,3"-->Line_12 $$ IdUserGroup.updateMapInternal(gMap, "group", GET_ALL_GROUPS_CMD, ":", gidStaticMap)[ FD ]
Line_2 $$ public void testStaticMapping() throws IOException -->Line_7 $$ BiMap<Integer, String> uMap = HashBiMap.create()[ CD ]
Line_8 $$ BiMap<Integer, String> gMap = HashBiMap.create()-->Line_18 $$ assertEquals(11501, (int) gMap.inverse().get("hdfs"))[ FD ]
Line_2 $$ public void testStaticMapping() throws IOException -->Line_20 $$ assertEquals(200, (int) gMap.inverse().get("mapred"))[ CD ]
Line_7 $$ BiMap<Integer, String> uMap = HashBiMap.create()-->Line_15 $$ assertEquals("atm", uMap.get(1000))[ FD ]
Line_2 $$ public void testStaticMapping() throws IOException -->Line_15 $$ assertEquals("atm", uMap.get(1000))[ CD ]
Line_8 $$ BiMap<Integer, String> gMap = HashBiMap.create()-->Line_22 $$ assertEquals(498, (int) gMap.inverse().get("mapred2"))[ FD ]
Line_2 $$ public void testStaticMapping() throws IOException -->Line_3 $$ Map<Integer, Integer> uidStaticMap = new PassThroughMap<Integer>()[ CD ]
Line_2 $$ public void testStaticMapping() throws IOException -->Line_4 $$ Map<Integer, Integer> gidStaticMap = new PassThroughMap<Integer>()[ CD ]
Line_8 $$ BiMap<Integer, String> gMap = HashBiMap.create()-->Line_21 $$ assertEquals("mapred2", gMap.get(498))[ FD ]
Line_2 $$ public void testStaticMapping() throws IOException -->Line_10 $$ String GET_ALL_GROUPS_CMD = "echo \"hdfs:*:11501:hrt_hdfs\n" + "mapred:x:497\n" + "mapred2:x:498\"" + " | cut -d: -f1,3"[ CD ]
Line_2 $$ public void testStaticMapping() throws IOException -->Line_5 $$ uidStaticMap.put(11501, 10)[ CD ]
Line_4 $$ Map<Integer, Integer> gidStaticMap = new PassThroughMap<Integer>()-->Line_6 $$ gidStaticMap.put(497, 200)[ FD ]
Line_2 $$ public void testStaticMapping() throws IOException -->Line_21 $$ assertEquals("mapred2", gMap.get(498))[ CD ]
Line_2 $$ public void testStaticMapping() throws IOException -->Line_6 $$ gidStaticMap.put(497, 200)[ CD ]
Line_2 $$ public void testStaticMapping() throws IOException -->Line_13 $$ assertEquals("hdfs", uMap.get(10))[ CD ]
Line_8 $$ BiMap<Integer, String> gMap = HashBiMap.create()-->Line_17 $$ assertEquals("hdfs", gMap.get(11501))[ FD ]
Line_3 $$ Map<Integer, Integer> uidStaticMap = new PassThroughMap<Integer>()-->Line_11 $$ IdUserGroup.updateMapInternal(uMap, "user", GET_ALL_USERS_CMD, ":", uidStaticMap)[ FD ]
