Line_28 $$ if (fileName.endsWith(".macro")) -->Line_29 $$ String macroName = _getName(fileName)[ CD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_58 $$ String testCaseName = _getName(fileName)[ FD ]
Line_58 $$ String testCaseName = _getName(fileName)-->Line_71 $$ _testCaseSimpleClassNames.put(testCaseName, _getSimpleClassName(fileName))[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_27 $$ _functionSimpleClassNames.put(functionName, _getSimpleClassName(fileName))[ FD ]
Line_57 $$ if (fileName.endsWith(".testcase")) -->Line_60 $$ Element rootElement = _getRootElement(fileName)[ CD ]
Line_58 $$ String testCaseName = _getName(fileName)-->Line_69 $$ _testCasePackageNames.put(testCaseName, _getPackageName(fileName))[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_12 $$ if (fileName.endsWith(".function")) [ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_30 $$ _macroClassNames.put(macroName, _getClassName(fileName))[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_49 $$ _pathJavaFileNames.put(pathName, _getJavaFileName(fileName))[ FD ]
Line_13 $$ String functionName = _getName(fileName)-->Line_19 $$ _functionLocatorCounts.put(functionName, _getLocatorCount(rootElement))[ FD ]
Line_12 $$ if (fileName.endsWith(".function")) -->Line_20 $$ if (_functionNames.contains(functionName)) [ CD ]
Line_41 $$ String pathName = _getName(fileName)-->Line_43 $$ _actionJavaFileNames.put(pathName, _getJavaFileName(fileName, "Action"))[ FD ]
Line_40 $$ if (fileName.endsWith(".path")) -->Line_57 $$ if (fileName.endsWith(".testcase")) [ CD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_28 $$ if (fileName.endsWith(".macro")) [ FD ]
Line_15 $$ Element rootElement = _getRootElement(fileName)-->Line_19 $$ _functionLocatorCounts.put(functionName, _getLocatorCount(rootElement))[ FD ]
Line_28 $$ if (fileName.endsWith(".macro")) -->Line_39 $$ _macroRootElements.put(macroName, _getRootElement(fileName))[ CD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_45 $$ _actionPackageNames.put(pathName, _getPackageName(fileName))[ FD ]
Line_4 $$ if (fileName.endsWith(".action")) -->Line_12 $$ if (fileName.endsWith(".function")) [ CD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_43 $$ _actionJavaFileNames.put(pathName, _getJavaFileName(fileName, "Action"))[ FD ]
Line_40 $$ if (fileName.endsWith(".path")) -->Line_48 $$ _pathFileNames.put(pathName, fileName)[ CD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_49 $$ _pathJavaFileNames.put(pathName, _getJavaFileName(fileName))[ FD ]
Line_58 $$ String testCaseName = _getName(fileName)-->Line_62 $$ _testCaseFileNames.put(testCaseName, fileName)[ FD ]
Line_28 $$ if (fileName.endsWith(".macro")) -->Line_36 $$ _macroNames.add(macroName)[ CD ]
Line_40 $$ if (fileName.endsWith(".path")) -->Line_56 $$ _pathSimpleClassNames.put(pathName, _getSimpleClassName(fileName))[ CD ]
Line_58 $$ String testCaseName = _getName(fileName)-->Line_61 $$ _testCaseCommandNames.put(testCaseName, _getTestCaseCommandNames(rootElement))[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_46 $$ _actionSimpleClassNames.put(pathName, _getSimpleClassName(fileName, "Action"))[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_43 $$ _actionJavaFileNames.put(pathName, _getJavaFileName(fileName, "Action"))[ FD ]
Line_29 $$ String macroName = _getName(fileName)-->Line_39 $$ _macroRootElements.put(macroName, _getRootElement(fileName))[ FD ]
Line_4 $$ if (fileName.endsWith(".action")) -->Line_10 $$ _actionNames.add(actionName)[ CD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_21 $$ _seleniumBuilderFileUtil.throwValidationException(1008, fileName, functionName)[ FD ]
Line_41 $$ String pathName = _getName(fileName)-->Line_50 $$ if (_pathNames.contains(pathName)) [ FD ]
Line_50 $$ if (_pathNames.contains(pathName)) -->Line_51 $$ _seleniumBuilderFileUtil.throwValidationException(1008, fileName, pathName)[ CD ]
Line_40 $$ if (fileName.endsWith(".path")) -->Line_42 $$ _actionClassNames.put(pathName, _getClassName(fileName, "Action"))[ CD ]
Line_40 $$ if (fileName.endsWith(".path")) -->Line_46 $$ _actionSimpleClassNames.put(pathName, _getSimpleClassName(fileName, "Action"))[ CD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_46 $$ _actionSimpleClassNames.put(pathName, _getSimpleClassName(fileName, "Action"))[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_63 $$ _testCaseHTMLFileNames.put(testCaseName, _getHTMLFileName(fileName))[ FD ]
Line_5 $$ String actionName = _getName(fileName)-->Line_6 $$ if (_actionFileNames.containsKey(actionName)) [ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_42 $$ _actionClassNames.put(pathName, _getClassName(fileName, "Action"))[ FD ]
Line_28 $$ if (fileName.endsWith(".macro")) -->Line_31 $$ _macroFileNames.put(macroName, fileName)[ CD ]
Line_57 $$ if (fileName.endsWith(".testcase")) -->Line_62 $$ _testCaseFileNames.put(testCaseName, fileName)[ CD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_56 $$ _pathSimpleClassNames.put(pathName, _getSimpleClassName(fileName))[ FD ]
Line_4 $$ if (fileName.endsWith(".action")) -->Line_9 $$ _actionFileNames.put(actionName, fileName)[ CD ]
Line_57 $$ if (fileName.endsWith(".testcase")) -->Line_59 $$ _testCaseClassNames.put(testCaseName, _getClassName(fileName))[ CD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_14 $$ _functionClassNames.put(functionName, _getClassName(fileName))[ FD ]
Line_12 $$ if (fileName.endsWith(".function")) -->Line_14 $$ _functionClassNames.put(functionName, _getClassName(fileName))[ CD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_31 $$ _macroFileNames.put(macroName, fileName)[ FD ]
Line_29 $$ String macroName = _getName(fileName)-->Line_38 $$ _macroSimpleClassNames.put(macroName, _getSimpleClassName(fileName))[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_54 $$ _pathPackageNames.put(pathName, _getPackageName(fileName))[ FD ]
Line_40 $$ if (fileName.endsWith(".path")) -->Line_55 $$ _pathRootElements.put(pathName, _getRootElement(fileName))[ CD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_7 $$ _seleniumBuilderFileUtil.throwValidationException(1008, fileName, actionName)[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_17 $$ _functionFileNames.put(functionName, fileName)[ FD ]
Line_12 $$ if (fileName.endsWith(".function")) -->Line_25 $$ _functionReturnTypes.put(functionName, _getReturnType(functionName))[ CD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_37 $$ _macroPackageNames.put(macroName, _getPackageName(fileName))[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_18 $$ _functionJavaFileNames.put(functionName, _getJavaFileName(fileName))[ FD ]
Line_28 $$ if (fileName.endsWith(".macro")) -->Line_33 $$ if (_macroNames.contains(macroName)) [ CD ]
Line_58 $$ String testCaseName = _getName(fileName)-->Line_59 $$ _testCaseClassNames.put(testCaseName, _getClassName(fileName))[ FD ]
Line_12 $$ if (fileName.endsWith(".function")) -->Line_28 $$ if (fileName.endsWith(".macro")) [ CD ]
Line_5 $$ String actionName = _getName(fileName)-->Line_7 $$ _seleniumBuilderFileUtil.throwValidationException(1008, fileName, actionName)[ FD ]
Line_29 $$ String macroName = _getName(fileName)-->Line_37 $$ _macroPackageNames.put(macroName, _getPackageName(fileName))[ FD ]
Line_4 $$ if (fileName.endsWith(".action")) -->Line_5 $$ String actionName = _getName(fileName)[ CD ]
Line_29 $$ String macroName = _getName(fileName)-->Line_33 $$ if (_macroNames.contains(macroName)) [ FD ]
Line_40 $$ if (fileName.endsWith(".path")) -->Line_43 $$ _actionJavaFileNames.put(pathName, _getJavaFileName(fileName, "Action"))[ CD ]
Line_65 $$ if (_testCaseNames.contains(testCaseName)) -->Line_66 $$ _seleniumBuilderFileUtil.throwValidationException(1008, fileName, testCaseName)[ CD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_24 $$ _functionPackageNames.put(functionName, _getPackageName(fileName))[ FD ]
Line_15 $$ Element rootElement = _getRootElement(fileName)-->Line_16 $$ _functionDefaultCommandNames.put(functionName, _getDefaultCommandName(rootElement))[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_41 $$ String pathName = _getName(fileName)[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_5 $$ String actionName = _getName(fileName)[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_55 $$ _pathRootElements.put(pathName, _getRootElement(fileName))[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_54 $$ _pathPackageNames.put(pathName, _getPackageName(fileName))[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_59 $$ _testCaseClassNames.put(testCaseName, _getClassName(fileName))[ FD ]
Line_41 $$ String pathName = _getName(fileName)-->Line_48 $$ _pathFileNames.put(pathName, fileName)[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_60 $$ Element rootElement = _getRootElement(fileName)[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_37 $$ _macroPackageNames.put(macroName, _getPackageName(fileName))[ FD ]
Line_57 $$ if (fileName.endsWith(".testcase")) -->Line_64 $$ _testCaseJavaFileNames.put(testCaseName, _getJavaFileName(fileName))[ CD ]
Line_40 $$ if (fileName.endsWith(".path")) -->Line_54 $$ _pathPackageNames.put(pathName, _getPackageName(fileName))[ CD ]
Line_15 $$ Element rootElement = _getRootElement(fileName)-->Line_61 $$ _testCaseCommandNames.put(testCaseName, _getTestCaseCommandNames(rootElement))[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_45 $$ _actionPackageNames.put(pathName, _getPackageName(fileName))[ FD ]
Line_15 $$ Element rootElement = _getRootElement(fileName)-->Line_26 $$ _functionRootElements.put(functionName, rootElement)[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_9 $$ _actionFileNames.put(actionName, fileName)[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_48 $$ _pathFileNames.put(pathName, fileName)[ FD ]
Line_40 $$ if (fileName.endsWith(".path")) -->Line_49 $$ _pathJavaFileNames.put(pathName, _getJavaFileName(fileName))[ CD ]
Line_40 $$ if (fileName.endsWith(".path")) -->Line_50 $$ if (_pathNames.contains(pathName)) [ CD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_71 $$ _testCaseSimpleClassNames.put(testCaseName, _getSimpleClassName(fileName))[ FD ]
Line_13 $$ String functionName = _getName(fileName)-->Line_24 $$ _functionPackageNames.put(functionName, _getPackageName(fileName))[ FD ]
Line_6 $$ if (_actionFileNames.containsKey(actionName)) -->Line_7 $$ _seleniumBuilderFileUtil.throwValidationException(1008, fileName, actionName)[ CD ]
Line_41 $$ String pathName = _getName(fileName)-->Line_53 $$ _pathNames.add(pathName)[ FD ]
Line_13 $$ String functionName = _getName(fileName)-->Line_25 $$ _functionReturnTypes.put(functionName, _getReturnType(functionName))[ FD ]
Line_13 $$ String functionName = _getName(fileName)-->Line_27 $$ _functionSimpleClassNames.put(functionName, _getSimpleClassName(fileName))[ FD ]
Line_28 $$ if (fileName.endsWith(".macro")) -->Line_30 $$ _macroClassNames.put(macroName, _getClassName(fileName))[ CD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_69 $$ _testCasePackageNames.put(testCaseName, _getPackageName(fileName))[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_15 $$ Element rootElement = _getRootElement(fileName)[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_11 $$ _actionRootElements.put(actionName, _getRootElement(fileName))[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_17 $$ _functionFileNames.put(functionName, fileName)[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_59 $$ _testCaseClassNames.put(testCaseName, _getClassName(fileName))[ FD ]
Line_29 $$ String macroName = _getName(fileName)-->Line_31 $$ _macroFileNames.put(macroName, fileName)[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_66 $$ _seleniumBuilderFileUtil.throwValidationException(1008, fileName, testCaseName)[ FD ]
Line_57 $$ if (fileName.endsWith(".testcase")) -->Line_71 $$ _testCaseSimpleClassNames.put(testCaseName, _getSimpleClassName(fileName))[ CD ]
Line_4 $$ if (fileName.endsWith(".action")) -->Line_6 $$ if (_actionFileNames.containsKey(actionName)) [ CD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_29 $$ String macroName = _getName(fileName)[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_24 $$ _functionPackageNames.put(functionName, _getPackageName(fileName))[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_69 $$ _testCasePackageNames.put(testCaseName, _getPackageName(fileName))[ FD ]
Line_13 $$ String functionName = _getName(fileName)-->Line_20 $$ if (_functionNames.contains(functionName)) [ FD ]
Line_12 $$ if (fileName.endsWith(".function")) -->Line_16 $$ _functionDefaultCommandNames.put(functionName, _getDefaultCommandName(rootElement))[ CD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_9 $$ _actionFileNames.put(actionName, fileName)[ FD ]
Line_40 $$ if (fileName.endsWith(".path")) -->Line_44 $$ _actionNames.add(pathName)[ CD ]
Line_13 $$ String functionName = _getName(fileName)-->Line_26 $$ _functionRootElements.put(functionName, rootElement)[ FD ]
Line_57 $$ if (fileName.endsWith(".testcase")) -->Line_61 $$ _testCaseCommandNames.put(testCaseName, _getTestCaseCommandNames(rootElement))[ CD ]
Line_40 $$ if (fileName.endsWith(".path")) -->Line_41 $$ String pathName = _getName(fileName)[ CD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_34 $$ _seleniumBuilderFileUtil.throwValidationException(1008, fileName, macroName)[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_3 $$ fileName = _normalizeFileName(fileName)[ FD ]
Line_12 $$ if (fileName.endsWith(".function")) -->Line_17 $$ _functionFileNames.put(functionName, fileName)[ CD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_55 $$ _pathRootElements.put(pathName, _getRootElement(fileName))[ FD ]
Line_57 $$ if (fileName.endsWith(".testcase")) -->Line_63 $$ _testCaseHTMLFileNames.put(testCaseName, _getHTMLFileName(fileName))[ CD ]
Line_58 $$ String testCaseName = _getName(fileName)-->Line_65 $$ if (_testCaseNames.contains(testCaseName)) [ FD ]
Line_41 $$ String pathName = _getName(fileName)-->Line_42 $$ _actionClassNames.put(pathName, _getClassName(fileName, "Action"))[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_15 $$ Element rootElement = _getRootElement(fileName)[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_57 $$ if (fileName.endsWith(".testcase")) [ FD ]
Line_5 $$ String actionName = _getName(fileName)-->Line_10 $$ _actionNames.add(actionName)[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_21 $$ _seleniumBuilderFileUtil.throwValidationException(1008, fileName, functionName)[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_40 $$ if (fileName.endsWith(".path")) [ FD ]
Line_41 $$ String pathName = _getName(fileName)-->Line_47 $$ _pathClassNames.put(pathName, _getClassName(fileName))[ FD ]
Line_12 $$ if (fileName.endsWith(".function")) -->Line_27 $$ _functionSimpleClassNames.put(functionName, _getSimpleClassName(fileName))[ CD ]
Line_57 $$ if (fileName.endsWith(".testcase")) -->Line_69 $$ _testCasePackageNames.put(testCaseName, _getPackageName(fileName))[ CD ]
Line_15 $$ Element rootElement = _getRootElement(fileName)-->Line_70 $$ _testCaseRootElements.put(testCaseName, rootElement)[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_71 $$ _testCaseSimpleClassNames.put(testCaseName, _getSimpleClassName(fileName))[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_42 $$ _actionClassNames.put(pathName, _getClassName(fileName, "Action"))[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_66 $$ _seleniumBuilderFileUtil.throwValidationException(1008, fileName, testCaseName)[ FD ]
Line_29 $$ String macroName = _getName(fileName)-->Line_32 $$ _macroJavaFileNames.put(macroName, _getJavaFileName(fileName))[ FD ]
Line_20 $$ if (_functionNames.contains(functionName)) -->Line_21 $$ _seleniumBuilderFileUtil.throwValidationException(1008, fileName, functionName)[ CD ]
Line_29 $$ String macroName = _getName(fileName)-->Line_30 $$ _macroClassNames.put(macroName, _getClassName(fileName))[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_34 $$ _seleniumBuilderFileUtil.throwValidationException(1008, fileName, macroName)[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_38 $$ _macroSimpleClassNames.put(macroName, _getSimpleClassName(fileName))[ FD ]
Line_28 $$ if (fileName.endsWith(".macro")) -->Line_37 $$ _macroPackageNames.put(macroName, _getPackageName(fileName))[ CD ]
Line_57 $$ if (fileName.endsWith(".testcase")) -->Line_58 $$ String testCaseName = _getName(fileName)[ CD ]
Line_5 $$ String actionName = _getName(fileName)-->Line_11 $$ _actionRootElements.put(actionName, _getRootElement(fileName))[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_39 $$ _macroRootElements.put(macroName, _getRootElement(fileName))[ FD ]
Line_12 $$ if (fileName.endsWith(".function")) -->Line_15 $$ Element rootElement = _getRootElement(fileName)[ CD ]
Line_28 $$ if (fileName.endsWith(".macro")) -->Line_38 $$ _macroSimpleClassNames.put(macroName, _getSimpleClassName(fileName))[ CD ]
Line_28 $$ if (fileName.endsWith(".macro")) -->Line_32 $$ _macroJavaFileNames.put(macroName, _getJavaFileName(fileName))[ CD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_63 $$ _testCaseHTMLFileNames.put(testCaseName, _getHTMLFileName(fileName))[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_64 $$ _testCaseJavaFileNames.put(testCaseName, _getJavaFileName(fileName))[ FD ]
Line_12 $$ if (fileName.endsWith(".function")) -->Line_24 $$ _functionPackageNames.put(functionName, _getPackageName(fileName))[ CD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_32 $$ _macroJavaFileNames.put(macroName, _getJavaFileName(fileName))[ FD ]
Line_12 $$ if (fileName.endsWith(".function")) -->Line_26 $$ _functionRootElements.put(functionName, rootElement)[ CD ]
Line_12 $$ if (fileName.endsWith(".function")) -->Line_18 $$ _functionJavaFileNames.put(functionName, _getJavaFileName(fileName))[ CD ]
Line_41 $$ String pathName = _getName(fileName)-->Line_46 $$ _actionSimpleClassNames.put(pathName, _getSimpleClassName(fileName, "Action"))[ FD ]
Line_12 $$ if (fileName.endsWith(".function")) -->Line_19 $$ _functionLocatorCounts.put(functionName, _getLocatorCount(rootElement))[ CD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_4 $$ if (fileName.endsWith(".action")) [ FD ]
Line_29 $$ String macroName = _getName(fileName)-->Line_36 $$ _macroNames.add(macroName)[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_13 $$ String functionName = _getName(fileName)[ FD ]
Line_40 $$ if (fileName.endsWith(".path")) -->Line_47 $$ _pathClassNames.put(pathName, _getClassName(fileName))[ CD ]
Line_13 $$ String functionName = _getName(fileName)-->Line_18 $$ _functionJavaFileNames.put(functionName, _getJavaFileName(fileName))[ FD ]
Line_13 $$ String functionName = _getName(fileName)-->Line_17 $$ _functionFileNames.put(functionName, fileName)[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_56 $$ _pathSimpleClassNames.put(pathName, _getSimpleClassName(fileName))[ FD ]
Line_41 $$ String pathName = _getName(fileName)-->Line_51 $$ _seleniumBuilderFileUtil.throwValidationException(1008, fileName, pathName)[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_4 $$ if (fileName.endsWith(".action")) [ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_47 $$ _pathClassNames.put(pathName, _getClassName(fileName))[ FD ]
Line_4 $$ if (fileName.endsWith(".action")) -->Line_11 $$ _actionRootElements.put(actionName, _getRootElement(fileName))[ CD ]
Line_58 $$ String testCaseName = _getName(fileName)-->Line_63 $$ _testCaseHTMLFileNames.put(testCaseName, _getHTMLFileName(fileName))[ FD ]
Line_57 $$ if (fileName.endsWith(".testcase")) -->Line_65 $$ if (_testCaseNames.contains(testCaseName)) [ CD ]
Line_13 $$ String functionName = _getName(fileName)-->Line_21 $$ _seleniumBuilderFileUtil.throwValidationException(1008, fileName, functionName)[ FD ]
Line_41 $$ String pathName = _getName(fileName)-->Line_49 $$ _pathJavaFileNames.put(pathName, _getJavaFileName(fileName))[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_39 $$ _macroRootElements.put(macroName, _getRootElement(fileName))[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_58 $$ String testCaseName = _getName(fileName)[ FD ]
Line_33 $$ if (_macroNames.contains(macroName)) -->Line_34 $$ _seleniumBuilderFileUtil.throwValidationException(1008, fileName, macroName)[ CD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_38 $$ _macroSimpleClassNames.put(macroName, _getSimpleClassName(fileName))[ FD ]
Line_41 $$ String pathName = _getName(fileName)-->Line_56 $$ _pathSimpleClassNames.put(pathName, _getSimpleClassName(fileName))[ FD ]
Line_13 $$ String functionName = _getName(fileName)-->Line_23 $$ _functionNames.add(functionName)[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_13 $$ String functionName = _getName(fileName)[ FD ]
Line_41 $$ String pathName = _getName(fileName)-->Line_55 $$ _pathRootElements.put(pathName, _getRootElement(fileName))[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_64 $$ _testCaseJavaFileNames.put(testCaseName, _getJavaFileName(fileName))[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_30 $$ _macroClassNames.put(macroName, _getClassName(fileName))[ FD ]
Line_28 $$ if (fileName.endsWith(".macro")) -->Line_40 $$ if (fileName.endsWith(".path")) [ CD ]
Line_29 $$ String macroName = _getName(fileName)-->Line_34 $$ _seleniumBuilderFileUtil.throwValidationException(1008, fileName, macroName)[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_7 $$ _seleniumBuilderFileUtil.throwValidationException(1008, fileName, actionName)[ FD ]
Line_12 $$ if (fileName.endsWith(".function")) -->Line_23 $$ _functionNames.add(functionName)[ CD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_32 $$ _macroJavaFileNames.put(macroName, _getJavaFileName(fileName))[ FD ]
Line_41 $$ String pathName = _getName(fileName)-->Line_54 $$ _pathPackageNames.put(pathName, _getPackageName(fileName))[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_60 $$ Element rootElement = _getRootElement(fileName)[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_3 $$ fileName = _normalizeFileName(fileName)[ CD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_4 $$ if (fileName.endsWith(".action")) [ CD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_62 $$ _testCaseFileNames.put(testCaseName, fileName)[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_57 $$ if (fileName.endsWith(".testcase")) [ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_18 $$ _functionJavaFileNames.put(functionName, _getJavaFileName(fileName))[ FD ]
Line_57 $$ if (fileName.endsWith(".testcase")) -->Line_68 $$ _testCaseNames.add(testCaseName)[ CD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_12 $$ if (fileName.endsWith(".function")) [ FD ]
Line_13 $$ String functionName = _getName(fileName)-->Line_14 $$ _functionClassNames.put(functionName, _getClassName(fileName))[ FD ]
Line_41 $$ String pathName = _getName(fileName)-->Line_44 $$ _actionNames.add(pathName)[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_27 $$ _functionSimpleClassNames.put(functionName, _getSimpleClassName(fileName))[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_62 $$ _testCaseFileNames.put(testCaseName, fileName)[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_40 $$ if (fileName.endsWith(".path")) [ FD ]
Line_58 $$ String testCaseName = _getName(fileName)-->Line_66 $$ _seleniumBuilderFileUtil.throwValidationException(1008, fileName, testCaseName)[ FD ]
Line_58 $$ String testCaseName = _getName(fileName)-->Line_70 $$ _testCaseRootElements.put(testCaseName, rootElement)[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_51 $$ _seleniumBuilderFileUtil.throwValidationException(1008, fileName, pathName)[ FD ]
Line_58 $$ String testCaseName = _getName(fileName)-->Line_68 $$ _testCaseNames.add(testCaseName)[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_51 $$ _seleniumBuilderFileUtil.throwValidationException(1008, fileName, pathName)[ FD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_5 $$ String actionName = _getName(fileName)[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_11 $$ _actionRootElements.put(actionName, _getRootElement(fileName))[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_41 $$ String pathName = _getName(fileName)[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_28 $$ if (fileName.endsWith(".macro")) [ FD ]
Line_13 $$ String functionName = _getName(fileName)-->Line_16 $$ _functionDefaultCommandNames.put(functionName, _getDefaultCommandName(rootElement))[ FD ]
Line_58 $$ String testCaseName = _getName(fileName)-->Line_64 $$ _testCaseJavaFileNames.put(testCaseName, _getJavaFileName(fileName))[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_31 $$ _macroFileNames.put(macroName, fileName)[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_47 $$ _pathClassNames.put(pathName, _getClassName(fileName))[ FD ]
Line_40 $$ if (fileName.endsWith(".path")) -->Line_53 $$ _pathNames.add(pathName)[ CD ]
Line_41 $$ String pathName = _getName(fileName)-->Line_45 $$ _actionPackageNames.put(pathName, _getPackageName(fileName))[ FD ]
Line_57 $$ if (fileName.endsWith(".testcase")) -->Line_70 $$ _testCaseRootElements.put(testCaseName, rootElement)[ CD ]
Line_2 $$ public void addFile(String fileName) throws Exception -->Line_14 $$ _functionClassNames.put(functionName, _getClassName(fileName))[ FD ]
Line_5 $$ String actionName = _getName(fileName)-->Line_9 $$ _actionFileNames.put(actionName, fileName)[ FD ]
Line_40 $$ if (fileName.endsWith(".path")) -->Line_45 $$ _actionPackageNames.put(pathName, _getPackageName(fileName))[ CD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_29 $$ String macroName = _getName(fileName)[ FD ]
Line_3 $$ fileName = _normalizeFileName(fileName)-->Line_48 $$ _pathFileNames.put(pathName, fileName)[ FD ]
Line_12 $$ if (fileName.endsWith(".function")) -->Line_13 $$ String functionName = _getName(fileName)[ CD ]
