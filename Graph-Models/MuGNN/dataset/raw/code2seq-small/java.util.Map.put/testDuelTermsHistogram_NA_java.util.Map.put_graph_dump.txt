Line_2 $$ public void testDuelTermsHistogram() throws Exception -->Line_8 $$ for (int i = 0; i < values.length; ++i) [ CD ]
Line_2 $$ public void testDuelTermsHistogram() throws Exception -->Line_11 $$ for (int i = 0; i < numDocs; ++i) [ CD ]
Line_8 $$ for (int i = 0; i < values.length; ++i) -->Line_9 $$ values[i] = randomInt(maxNumTerms * 3) - maxNumTerms[ CD ]
Line_25 $$ Terms terms = resp.getAggregations().get("terms")-->Line_26 $$ assertThat(terms, notNullValue())[ FD ]
Line_11 $$ for (int i = 0; i < numDocs; ++i) -->Line_12 $$ XContentBuilder source = jsonBuilder().startObject().field("num", randomDouble()).startArray("values")[ CD ]
Line_4 $$ final int numDocs = scaledRandomIntBetween(500, 5000)-->Line_11 $$ for (int i = 0; i < numDocs; ++i) [ FD ]
Line_27 $$ Histogram histo = resp.getAggregations().get("histo")-->Line_29 $$ assertThat(terms.getBuckets().size(), equalTo(histo.getBuckets().size()))[ FD ]
Line_15 $$ source = source.value(randomFrom(values))-->Line_17 $$ source = source.endArray().endObject()[ FD ]
Line_12 $$ XContentBuilder source = jsonBuilder().startObject().field("num", randomDouble()).startArray("values")-->Line_15 $$ source = source.value(randomFrom(values))[ FD ]
Line_32 $$ final Terms.Bucket termsBucket = terms.getBucketByKey(String.valueOf(key))-->Line_33 $$ assertEquals(bucket.getDocCount(), termsBucket.getDocCount())[ FD ]
Line_2 $$ public void testDuelTermsHistogram() throws Exception -->Line_5 $$ final int maxNumTerms = randomIntBetween(10, 2000)[ CD ]
Line_2 $$ public void testDuelTermsHistogram() throws Exception -->Line_20 $$ assertNoFailures(client().admin().indices().prepareRefresh("idx").setIndicesOptions(IndicesOptions.lenientExpandOpen()).execute().get())[ CD ]
Line_27 $$ Histogram histo = resp.getAggregations().get("histo")-->Line_28 $$ assertThat(histo, notNullValue())[ FD ]
Line_5 $$ final int maxNumTerms = randomIntBetween(10, 2000)-->Line_23 $$ SearchResponse resp = client().prepareSearch("idx").addAggregation(terms("terms").field("values").collectMode(randomFrom(SubAggCollectionMode.values())).script(new Script("floor(_value / interval)", ScriptType.INLINE, null, params)).size(maxNumTerms)).addAggregation(histogram("histo").field("values").interval(interval).minDocCount(1)).execute().actionGet()[ FD ]
Line_7 $$ final Integer[] values = new Integer[maxNumTerms]-->Line_15 $$ source = source.value(randomFrom(values))[ FD ]
Line_12 $$ XContentBuilder source = jsonBuilder().startObject().field("num", randomDouble()).startArray("values")-->Line_18 $$ client().prepareIndex("idx", "type").setSource(source).execute().actionGet()[ FD ]
Line_25 $$ Terms terms = resp.getAggregations().get("terms")-->Line_29 $$ assertThat(terms.getBuckets().size(), equalTo(histo.getBuckets().size()))[ FD ]
Line_2 $$ public void testDuelTermsHistogram() throws Exception -->Line_22 $$ params.put("interval", interval)[ CD ]
Line_11 $$ for (int i = 0; i < numDocs; ++i) -->Line_13 $$ final int numValues = randomInt(4)[ CD ]
Line_14 $$ for (int j = 0; j < numValues; ++j) -->Line_15 $$ source = source.value(randomFrom(values))[ CD ]
Line_2 $$ public void testDuelTermsHistogram() throws Exception -->Line_23 $$ SearchResponse resp = client().prepareSearch("idx").addAggregation(terms("terms").field("values").collectMode(randomFrom(SubAggCollectionMode.values())).script(new Script("floor(_value / interval)", ScriptType.INLINE, null, params)).size(maxNumTerms)).addAggregation(histogram("histo").field("values").interval(interval).minDocCount(1)).execute().actionGet()[ CD ]
Line_2 $$ public void testDuelTermsHistogram() throws Exception -->Line_27 $$ Histogram histo = resp.getAggregations().get("histo")[ CD ]
Line_2 $$ public void testDuelTermsHistogram() throws Exception -->Line_3 $$ createIndex("idx")[ CD ]
Line_5 $$ final int maxNumTerms = randomIntBetween(10, 2000)-->Line_9 $$ values[i] = randomInt(maxNumTerms * 3) - maxNumTerms[ FD ]
Line_23 $$ SearchResponse resp = client().prepareSearch("idx").addAggregation(terms("terms").field("values").collectMode(randomFrom(SubAggCollectionMode.values())).script(new Script("floor(_value / interval)", ScriptType.INLINE, null, params)).size(maxNumTerms)).addAggregation(histogram("histo").field("values").interval(interval).minDocCount(1)).execute().actionGet()-->Line_24 $$ assertSearchResponse(resp)[ FD ]
Line_23 $$ SearchResponse resp = client().prepareSearch("idx").addAggregation(terms("terms").field("values").collectMode(randomFrom(SubAggCollectionMode.values())).script(new Script("floor(_value / interval)", ScriptType.INLINE, null, params)).size(maxNumTerms)).addAggregation(histogram("histo").field("values").interval(interval).minDocCount(1)).execute().actionGet()-->Line_25 $$ Terms terms = resp.getAggregations().get("terms")[ FD ]
Line_17 $$ source = source.endArray().endObject()-->Line_18 $$ client().prepareIndex("idx", "type").setSource(source).execute().actionGet()[ FD ]
Line_6 $$ final int interval = randomIntBetween(1, 100)-->Line_23 $$ SearchResponse resp = client().prepareSearch("idx").addAggregation(terms("terms").field("values").collectMode(randomFrom(SubAggCollectionMode.values())).script(new Script("floor(_value / interval)", ScriptType.INLINE, null, params)).size(maxNumTerms)).addAggregation(histogram("histo").field("values").interval(interval).minDocCount(1)).execute().actionGet()[ FD ]
Line_2 $$ public void testDuelTermsHistogram() throws Exception -->Line_7 $$ final Integer[] values = new Integer[maxNumTerms][ CD ]
Line_2 $$ public void testDuelTermsHistogram() throws Exception -->Line_25 $$ Terms terms = resp.getAggregations().get("terms")[ CD ]
Line_11 $$ for (int i = 0; i < numDocs; ++i) -->Line_17 $$ source = source.endArray().endObject()[ CD ]
Line_21 $$ Map<String, Object> params = new HashMap()-->Line_22 $$ params.put("interval", interval)[ FD ]
Line_8 $$ for (int i = 0; i < values.length; ++i) -->Line_11 $$ for (int i = 0; i < numDocs; ++i) [ FD ]
Line_2 $$ public void testDuelTermsHistogram() throws Exception -->Line_24 $$ assertSearchResponse(resp)[ CD ]
Line_11 $$ for (int i = 0; i < numDocs; ++i) -->Line_14 $$ for (int j = 0; j < numValues; ++j) [ CD ]
Line_2 $$ public void testDuelTermsHistogram() throws Exception -->Line_29 $$ assertThat(terms.getBuckets().size(), equalTo(histo.getBuckets().size()))[ CD ]
Line_23 $$ SearchResponse resp = client().prepareSearch("idx").addAggregation(terms("terms").field("values").collectMode(randomFrom(SubAggCollectionMode.values())).script(new Script("floor(_value / interval)", ScriptType.INLINE, null, params)).size(maxNumTerms)).addAggregation(histogram("histo").field("values").interval(interval).minDocCount(1)).execute().actionGet()-->Line_27 $$ Histogram histo = resp.getAggregations().get("histo")[ FD ]
Line_30 $$ for (Histogram.Bucket bucket : histo.getBuckets()) -->Line_33 $$ assertEquals(bucket.getDocCount(), termsBucket.getDocCount())[ FD ]
Line_2 $$ public void testDuelTermsHistogram() throws Exception -->Line_4 $$ final int numDocs = scaledRandomIntBetween(500, 5000)[ CD ]
Line_30 $$ for (Histogram.Bucket bucket : histo.getBuckets()) -->Line_31 $$ final double key = ((Number) bucket.getKey()).doubleValue() / interval[ FD ]
Line_25 $$ Terms terms = resp.getAggregations().get("terms")-->Line_32 $$ final Terms.Bucket termsBucket = terms.getBucketByKey(String.valueOf(key))[ FD ]
Line_11 $$ for (int i = 0; i < numDocs; ++i) -->Line_18 $$ client().prepareIndex("idx", "type").setSource(source).execute().actionGet()[ CD ]
Line_6 $$ final int interval = randomIntBetween(1, 100)-->Line_22 $$ params.put("interval", interval)[ FD ]
Line_27 $$ Histogram histo = resp.getAggregations().get("histo")-->Line_30 $$ for (Histogram.Bucket bucket : histo.getBuckets()) [ FD ]
Line_15 $$ source = source.value(randomFrom(values))-->Line_18 $$ client().prepareIndex("idx", "type").setSource(source).execute().actionGet()[ FD ]
Line_13 $$ final int numValues = randomInt(4)-->Line_14 $$ for (int j = 0; j < numValues; ++j) [ FD ]
Line_2 $$ public void testDuelTermsHistogram() throws Exception -->Line_21 $$ Map<String, Object> params = new HashMap()[ CD ]
Line_2 $$ public void testDuelTermsHistogram() throws Exception -->Line_28 $$ assertThat(histo, notNullValue())[ CD ]
Line_12 $$ XContentBuilder source = jsonBuilder().startObject().field("num", randomDouble()).startArray("values")-->Line_17 $$ source = source.endArray().endObject()[ FD ]
Line_2 $$ public void testDuelTermsHistogram() throws Exception -->Line_26 $$ assertThat(terms, notNullValue())[ CD ]
Line_2 $$ public void testDuelTermsHistogram() throws Exception -->Line_6 $$ final int interval = randomIntBetween(1, 100)[ CD ]
Line_31 $$ final double key = ((Number) bucket.getKey()).doubleValue() / interval-->Line_32 $$ final Terms.Bucket termsBucket = terms.getBucketByKey(String.valueOf(key))[ FD ]
