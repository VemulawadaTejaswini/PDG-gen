Line_2 $$ private static void validateBalancing(StatelessRemote bean, int numCalls, int expectedServers, double minPercentage) -->Line_18 $$ log.info("All " + expectedServers + " servers processed at least " + minNumOfProcessedCalls + " of calls")[ CD ]
Line_2 $$ private static void validateBalancing(StatelessRemote bean, int numCalls, int expectedServers, double minPercentage) -->Line_5 $$ int minNumOfProcessedCalls = Integer.MAX_VALUE[ CD ]
Line_9 $$ count = count == null ? 1 : ++count-->Line_10 $$ callCount.put(nodeName, count)[ FD ]
Line_7 $$ String nodeName = bean.getNodeName()-->Line_10 $$ callCount.put(nodeName, count)[ FD ]
Line_6 $$ for (int i = 0; i < numCalls; i++) -->Line_10 $$ callCount.put(nodeName, count)[ CD ]
Line_3 $$ Map<String, Integer> callCount = new HashMap<String, Integer>()-->Line_8 $$ Integer count = callCount.get(nodeName)[ FD ]
Line_8 $$ Integer count = callCount.get(nodeName)-->Line_9 $$ count = count == null ? 1 : ++count[ FD ]
Line_2 $$ private static void validateBalancing(StatelessRemote bean, int numCalls, int expectedServers, double minPercentage) -->Line_6 $$ for (int i = 0; i < numCalls; i++) [ FD ]
Line_2 $$ private static void validateBalancing(StatelessRemote bean, int numCalls, int expectedServers, double minPercentage) -->Line_7 $$ String nodeName = bean.getNodeName()[ FD ]
Line_2 $$ private static void validateBalancing(StatelessRemote bean, int numCalls, int expectedServers, double minPercentage) -->Line_4 $$ int maxNumOfProcessedCalls = -1[ CD ]
Line_6 $$ for (int i = 0; i < numCalls; i++) -->Line_9 $$ count = count == null ? 1 : ++count[ CD ]
Line_8 $$ Integer count = callCount.get(nodeName)-->Line_10 $$ callCount.put(nodeName, count)[ FD ]
Line_7 $$ String nodeName = bean.getNodeName()-->Line_8 $$ Integer count = callCount.get(nodeName)[ FD ]
Line_6 $$ for (int i = 0; i < numCalls; i++) -->Line_7 $$ String nodeName = bean.getNodeName()[ CD ]
Line_5 $$ int minNumOfProcessedCalls = Integer.MAX_VALUE-->Line_15 $$ minNumOfProcessedCalls = count < minNumOfProcessedCalls ? count : minNumOfProcessedCalls[ FD ]
Line_2 $$ private static void validateBalancing(StatelessRemote bean, int numCalls, int expectedServers, double minPercentage) -->Line_12 $$ Assert.assertEquals("It was running " + expectedServers + " servers but not all of them were used for loadbalancing.", expectedServers, callCount.size())[ CD ]
Line_2 $$ private static void validateBalancing(StatelessRemote bean, int numCalls, int expectedServers, double minPercentage) -->Line_17 $$ Assert.assertTrue("Minimal number of calls done to all servers have to be " + minPercentage * numCalls + " but was " + minNumOfProcessedCalls, minPercentage * numCalls <= minNumOfProcessedCalls)[ CD ]
Line_2 $$ private static void validateBalancing(StatelessRemote bean, int numCalls, int expectedServers, double minPercentage) -->Line_12 $$ Assert.assertEquals("It was running " + expectedServers + " servers but not all of them were used for loadbalancing.", expectedServers, callCount.size())[ FD ]
Line_6 $$ for (int i = 0; i < numCalls; i++) -->Line_8 $$ Integer count = callCount.get(nodeName)[ CD ]
Line_3 $$ Map<String, Integer> callCount = new HashMap<String, Integer>()-->Line_12 $$ Assert.assertEquals("It was running " + expectedServers + " servers but not all of them were used for loadbalancing.", expectedServers, callCount.size())[ FD ]
Line_4 $$ int maxNumOfProcessedCalls = -1-->Line_14 $$ maxNumOfProcessedCalls = count > maxNumOfProcessedCalls ? count : maxNumOfProcessedCalls[ FD ]
Line_2 $$ private static void validateBalancing(StatelessRemote bean, int numCalls, int expectedServers, double minPercentage) -->Line_6 $$ for (int i = 0; i < numCalls; i++) [ CD ]
Line_3 $$ Map<String, Integer> callCount = new HashMap<String, Integer>()-->Line_13 $$ for (Integer count : callCount.values()) [ FD ]
Line_3 $$ Map<String, Integer> callCount = new HashMap<String, Integer>()-->Line_10 $$ callCount.put(nodeName, count)[ FD ]
Line_2 $$ private static void validateBalancing(StatelessRemote bean, int numCalls, int expectedServers, double minPercentage) -->Line_3 $$ Map<String, Integer> callCount = new HashMap<String, Integer>()[ CD ]
