Line_8 $$ String key = PyPsiUtils.strValue(PyPsiUtils.flattenParens(element.getKey()))-->Line_11 $$ result.put(key, value)[ FD ]
Line_7 $$ for (PyKeyValueExpression element : elements) -->Line_8 $$ String key = PyPsiUtils.strValue(PyPsiUtils.flattenParens(element.getKey()))[ FD ]
Line_9 $$ String value = PyPsiUtils.strValue(PyPsiUtils.flattenParens(element.getValue()))-->Line_11 $$ result.put(key, value)[ FD ]
Line_3 $$ Map<String, String> result = new HashMap<String, String>()-->Line_11 $$ result.put(key, value)[ FD ]
Line_2 $$ private static Map<String, String> parseNegativeOpt(PyExpression dict) -->Line_15 $$ return result[ CD ]
Line_10 $$ if (key != null && value != null) -->Line_11 $$ result.put(key, value)[ CD ]
Line_2 $$ private static Map<String, String> parseNegativeOpt(PyExpression dict) -->Line_5 $$ if (dict instanceof PyDictLiteralExpression) [ FD ]
Line_2 $$ private static Map<String, String> parseNegativeOpt(PyExpression dict) -->Line_5 $$ if (dict instanceof PyDictLiteralExpression) [ CD ]
Line_4 $$ dict = PyPsiUtils.flattenParens(dict)-->Line_5 $$ if (dict instanceof PyDictLiteralExpression) [ FD ]
Line_7 $$ for (PyKeyValueExpression element : elements) -->Line_9 $$ String value = PyPsiUtils.strValue(PyPsiUtils.flattenParens(element.getValue()))[ FD ]
Line_2 $$ private static Map<String, String> parseNegativeOpt(PyExpression dict) -->Line_4 $$ dict = PyPsiUtils.flattenParens(dict)[ FD ]
Line_2 $$ private static Map<String, String> parseNegativeOpt(PyExpression dict) -->Line_4 $$ dict = PyPsiUtils.flattenParens(dict)[ CD ]
Line_2 $$ private static Map<String, String> parseNegativeOpt(PyExpression dict) -->Line_3 $$ Map<String, String> result = new HashMap<String, String>()[ CD ]
Line_5 $$ if (dict instanceof PyDictLiteralExpression) -->Line_6 $$ final PyKeyValueExpression[] elements = ((PyDictLiteralExpression) dict).getElements()[ CD ]
