Line_25 $$ if (!versions.contains(split.get(1))) -->Line_26 $$ versions.add(split.get(1))[ CD ]
Line_18 $$ if (VersionComparatorUtil.compare(aPackage, split.get(1)) < 0)-->Line_19 $$ CONDA_PACKAGES.put(split.get(0), split.get(1))[ CD ]
Line_2 $$ public void updatePackagesCache() -->Line_7 $$ final String runDirectory = new File(condaPython).getParent()[ CD ]
Line_23 $$ if (PACKAGES_TO_RELEASES.containsKey(split.get(0))) -->Line_31 $$ PACKAGES_TO_RELEASES.put(split.get(0), versions)[ CD ]
Line_13 $$ final List<String> split = StringUtil.split(line, "\t")-->Line_31 $$ PACKAGES_TO_RELEASES.put(split.get(0), versions)[ FD ]
Line_4 $$ if (condaPython == null)-->Line_5 $$ return[ CD ]
Line_2 $$ public void updatePackagesCache() -->Line_11 $$ final List<String> lines = output.getStdoutLines()[ CD ]
Line_16 $$ final String aPackage = CONDA_PACKAGES.get(split.get(0))-->Line_17 $$ if (aPackage != null) [ FD ]
Line_23 $$ if (PACKAGES_TO_RELEASES.containsKey(split.get(0))) -->Line_30 $$ versions.add(split.get(1))[ CD ]
Line_9 $$ if (output.getExitCode() != 0)-->Line_10 $$ return[ CD ]
Line_2 $$ public void updatePackagesCache() -->Line_8 $$ final ProcessOutput output = PySdkUtil.getProcessOutput(runDirectory, new String[] [ CD ]
Line_13 $$ final List<String> split = StringUtil.split(line, "\t")-->Line_21 $$ CONDA_PACKAGES.put(split.get(0), split.get(1))[ FD ]
Line_13 $$ final List<String> split = StringUtil.split(line, "\t")-->Line_19 $$ CONDA_PACKAGES.put(split.get(0), split.get(1))[ FD ]
Line_13 $$ final List<String> split = StringUtil.split(line, "\t")-->Line_16 $$ final String aPackage = CONDA_PACKAGES.get(split.get(0))[ FD ]
Line_2 $$ public void updatePackagesCache() -->Line_6 $$ final String path = PythonHelpersLocator.getHelperPath("conda_packaging_tool.py")[ CD ]
Line_23 $$ if (PACKAGES_TO_RELEASES.containsKey(split.get(0))) -->Line_25 $$ if (!versions.contains(split.get(1))) [ CD ]
Line_2 $$ public void updatePackagesCache() -->Line_9 $$ if (output.getExitCode() != 0)[ CD ]
Line_23 $$ if (PACKAGES_TO_RELEASES.containsKey(split.get(0))) -->Line_24 $$ final List<String> versions = PACKAGES_TO_RELEASES.get(split.get(0))[ CD ]
Line_13 $$ final List<String> split = StringUtil.split(line, "\t")-->Line_26 $$ versions.add(split.get(1))[ FD ]
Line_13 $$ final List<String> split = StringUtil.split(line, "\t")-->Line_30 $$ versions.add(split.get(1))[ FD ]
Line_7 $$ final String runDirectory = new File(condaPython).getParent()-->Line_8 $$ final ProcessOutput output = PySdkUtil.getProcessOutput(runDirectory, new String[] [ FD ]
Line_2 $$ public void updatePackagesCache() -->Line_34 $$ LAST_TIME_CHECKED = System.currentTimeMillis()[ CD ]
Line_3 $$ final String condaPython = getCondaPython()-->Line_4 $$ if (condaPython == null)[ FD ]
Line_8 $$ final ProcessOutput output = PySdkUtil.getProcessOutput(runDirectory, new String[] -->Line_9 $$ if (output.getExitCode() != 0)[ FD ]
Line_8 $$ final ProcessOutput output = PySdkUtil.getProcessOutput(runDirectory, new String[] -->Line_11 $$ final List<String> lines = output.getStdoutLines()[ FD ]
Line_24 $$ final List<String> versions = PACKAGES_TO_RELEASES.get(split.get(0))-->Line_25 $$ if (!versions.contains(split.get(1))) [ FD ]
Line_24 $$ final List<String> versions = PACKAGES_TO_RELEASES.get(split.get(0))-->Line_30 $$ versions.add(split.get(1))[ FD ]
Line_13 $$ final List<String> split = StringUtil.split(line, "\t")-->Line_25 $$ if (!versions.contains(split.get(1))) [ FD ]
Line_2 $$ public void updatePackagesCache() -->Line_3 $$ final String condaPython = getCondaPython()[ CD ]
Line_2 $$ public void updatePackagesCache() -->Line_4 $$ if (condaPython == null)[ CD ]
Line_13 $$ final List<String> split = StringUtil.split(line, "\t")-->Line_24 $$ final List<String> versions = PACKAGES_TO_RELEASES.get(split.get(0))[ FD ]
Line_17 $$ if (aPackage != null) -->Line_21 $$ CONDA_PACKAGES.put(split.get(0), split.get(1))[ CD ]
Line_17 $$ if (aPackage != null) -->Line_18 $$ if (VersionComparatorUtil.compare(aPackage, split.get(1)) < 0)[ CD ]
Line_24 $$ final List<String> versions = PACKAGES_TO_RELEASES.get(split.get(0))-->Line_26 $$ versions.add(split.get(1))[ FD ]
Line_24 $$ final List<String> versions = PACKAGES_TO_RELEASES.get(split.get(0))-->Line_31 $$ PACKAGES_TO_RELEASES.put(split.get(0), versions)[ FD ]
Line_12 $$ for (String line : lines) -->Line_13 $$ final List<String> split = StringUtil.split(line, "\t")[ FD ]
Line_16 $$ final String aPackage = CONDA_PACKAGES.get(split.get(0))-->Line_18 $$ if (VersionComparatorUtil.compare(aPackage, split.get(1)) < 0)[ FD ]
Line_13 $$ final List<String> split = StringUtil.split(line, "\t")-->Line_14 $$ if (split.size() < 2)[ FD ]
Line_13 $$ final List<String> split = StringUtil.split(line, "\t")-->Line_23 $$ if (PACKAGES_TO_RELEASES.containsKey(split.get(0))) [ FD ]
Line_13 $$ final List<String> split = StringUtil.split(line, "\t")-->Line_18 $$ if (VersionComparatorUtil.compare(aPackage, split.get(1)) < 0)[ FD ]
