Line_11 $$ Session s = openSession()-->Line_15 $$ s.close()[ FD ]
Line_18 $$ EntityStatistics addressStats = sessionFactory().getStatistics().getEntityStatistics("Address")-->Line_31 $$ assertEquals(addressStats.getFetchCount(), 0)[ FD ]
Line_19 $$ person = (Map) s.createQuery("from Person p join fetch p.address").uniqueResult()-->Line_21 $$ assertNotNull("could not locate persons address", person.get("address"))[ FD ]
Line_11 $$ Session s = openSession()-->Line_30 $$ s.close()[ FD ]
Line_5 $$ Map address = new HashMap()-->Line_6 $$ address.put("zip", "12345")[ FD ]
Line_3 $$ Map person = new HashMap()-->Line_26 $$ assertNotNull("could not locate person", person)[ FD ]
Line_5 $$ Map address = new HashMap()-->Line_7 $$ address.put("state", "TX")[ FD ]
Line_5 $$ Map address = new HashMap()-->Line_10 $$ address.put("owner", person)[ FD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_12 $$ s.beginTransaction()[ CD ]
Line_3 $$ Map person = new HashMap()-->Line_13 $$ s.persist("Person", person)[ FD ]
Line_11 $$ Session s = openSession()-->Line_17 $$ s.beginTransaction()[ FD ]
Line_3 $$ Map person = new HashMap()-->Line_10 $$ address.put("owner", person)[ FD ]
Line_3 $$ Map person = new HashMap()-->Line_25 $$ person = (Map) tuple[1][ FD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_6 $$ address.put("zip", "12345")[ CD ]
Line_11 $$ Session s = openSession()-->Line_23 $$ Object[] tuple = (Object[]) s.createQuery("select p.name, p from Person p join fetch p.address").uniqueResult()[ FD ]
Line_19 $$ person = (Map) s.createQuery("from Person p join fetch p.address").uniqueResult()-->Line_25 $$ person = (Map) tuple[1][ FD ]
Line_16 $$ s = openSession()-->Line_28 $$ s.delete("Person", person)[ FD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_28 $$ s.delete("Person", person)[ CD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_17 $$ s.beginTransaction()[ CD ]
Line_25 $$ person = (Map) tuple[1]-->Line_26 $$ assertNotNull("could not locate person", person)[ FD ]
Line_25 $$ person = (Map) tuple[1]-->Line_28 $$ s.delete("Person", person)[ FD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_14 $$ s.getTransaction().commit()[ CD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_3 $$ Map person = new HashMap()[ CD ]
Line_3 $$ Map person = new HashMap()-->Line_19 $$ person = (Map) s.createQuery("from Person p join fetch p.address").uniqueResult()[ FD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_11 $$ Session s = openSession()[ CD ]
Line_3 $$ Map person = new HashMap()-->Line_20 $$ assertNotNull("could not locate person", person)[ FD ]
Line_3 $$ Map person = new HashMap()-->Line_27 $$ assertNotNull("could not locate persons address", person.get("address"))[ FD ]
Line_19 $$ person = (Map) s.createQuery("from Person p join fetch p.address").uniqueResult()-->Line_27 $$ assertNotNull("could not locate persons address", person.get("address"))[ FD ]
Line_3 $$ Map person = new HashMap()-->Line_9 $$ person.put("address", address)[ FD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_29 $$ s.getTransaction().commit()[ CD ]
Line_11 $$ Session s = openSession()-->Line_22 $$ s.clear()[ FD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_20 $$ assertNotNull("could not locate person", person)[ CD ]
Line_16 $$ s = openSession()-->Line_29 $$ s.getTransaction().commit()[ FD ]
Line_11 $$ Session s = openSession()-->Line_14 $$ s.getTransaction().commit()[ FD ]
Line_16 $$ s = openSession()-->Line_17 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_26 $$ assertNotNull("could not locate person", person)[ CD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_16 $$ s = openSession()[ CD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_7 $$ address.put("state", "TX")[ CD ]
Line_11 $$ Session s = openSession()-->Line_12 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_22 $$ s.clear()[ CD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_15 $$ s.close()[ CD ]
Line_3 $$ Map person = new HashMap()-->Line_21 $$ assertNotNull("could not locate persons address", person.get("address"))[ FD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_30 $$ s.close()[ CD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_24 $$ assertEquals(tuple.length, 2)[ CD ]
Line_11 $$ Session s = openSession()-->Line_28 $$ s.delete("Person", person)[ FD ]
Line_3 $$ Map person = new HashMap()-->Line_4 $$ person.put("name", "Steve")[ FD ]
Line_11 $$ Session s = openSession()-->Line_16 $$ s = openSession()[ FD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_10 $$ address.put("owner", person)[ CD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_13 $$ s.persist("Person", person)[ CD ]
Line_11 $$ Session s = openSession()-->Line_19 $$ person = (Map) s.createQuery("from Person p join fetch p.address").uniqueResult()[ FD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_9 $$ person.put("address", address)[ CD ]
Line_16 $$ s = openSession()-->Line_19 $$ person = (Map) s.createQuery("from Person p join fetch p.address").uniqueResult()[ FD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_8 $$ address.put("street", "123 Main St")[ CD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_21 $$ assertNotNull("could not locate persons address", person.get("address"))[ CD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_27 $$ assertNotNull("could not locate persons address", person.get("address"))[ CD ]
Line_19 $$ person = (Map) s.createQuery("from Person p join fetch p.address").uniqueResult()-->Line_28 $$ s.delete("Person", person)[ FD ]
Line_16 $$ s = openSession()-->Line_23 $$ Object[] tuple = (Object[]) s.createQuery("select p.name, p from Person p join fetch p.address").uniqueResult()[ FD ]
Line_11 $$ Session s = openSession()-->Line_29 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_18 $$ EntityStatistics addressStats = sessionFactory().getStatistics().getEntityStatistics("Address")[ CD ]
Line_19 $$ person = (Map) s.createQuery("from Person p join fetch p.address").uniqueResult()-->Line_20 $$ assertNotNull("could not locate person", person)[ FD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_31 $$ assertEquals(addressStats.getFetchCount(), 0)[ CD ]
Line_11 $$ Session s = openSession()-->Line_13 $$ s.persist("Person", person)[ FD ]
Line_5 $$ Map address = new HashMap()-->Line_8 $$ address.put("street", "123 Main St")[ FD ]
Line_16 $$ s = openSession()-->Line_22 $$ s.clear()[ FD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_5 $$ Map address = new HashMap()[ CD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_19 $$ person = (Map) s.createQuery("from Person p join fetch p.address").uniqueResult()[ CD ]
Line_25 $$ person = (Map) tuple[1]-->Line_27 $$ assertNotNull("could not locate persons address", person.get("address"))[ FD ]
Line_16 $$ s = openSession()-->Line_30 $$ s.close()[ FD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_4 $$ person.put("name", "Steve")[ CD ]
Line_5 $$ Map address = new HashMap()-->Line_9 $$ person.put("address", address)[ FD ]
Line_3 $$ Map person = new HashMap()-->Line_28 $$ s.delete("Person", person)[ FD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_23 $$ Object[] tuple = (Object[]) s.createQuery("select p.name, p from Person p join fetch p.address").uniqueResult()[ CD ]
Line_19 $$ person = (Map) s.createQuery("from Person p join fetch p.address").uniqueResult()-->Line_26 $$ assertNotNull("could not locate person", person)[ FD ]
Line_2 $$ public void testOneToOneOnSubclass() -->Line_25 $$ person = (Map) tuple[1][ CD ]
