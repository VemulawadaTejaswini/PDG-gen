Line_7 $$ Map<Class, List> after = multicaster.getListeners()-->Line_9 $$ for (Map.Entry<Class, List> entry : after.entrySet()) [ FD ]
Line_4 $$ if (myDefaultProjectInitialized != ((ProjectManagerImpl) ProjectManager.getInstance()).isDefaultProjectInitialized())-->Line_5 $$ return[ CD ]
Line_11 $$ List beforeList = before.get(aClass)-->Line_13 $$ if (beforeList != null) [ FD ]
Line_12 $$ List afterList = entry.getValue()-->Line_16 $$ if (!afterList.isEmpty()) [ FD ]
Line_10 $$ Class aClass = entry.getKey()-->Line_17 $$ leaked.put(aClass, afterList)[ FD ]
Line_9 $$ for (Map.Entry<Class, List> entry : after.entrySet()) -->Line_21 $$ Class aClass = entry.getKey()[ FD ]
Line_9 $$ for (Map.Entry<Class, List> entry : after.entrySet()) -->Line_12 $$ List afterList = entry.getValue()[ FD ]
Line_9 $$ for (Map.Entry<Class, List> entry : after.entrySet()) -->Line_10 $$ Class aClass = entry.getKey()[ FD ]
Line_6 $$ EditorEventMulticasterImpl multicaster = (EditorEventMulticasterImpl) EditorFactory.getInstance().getEventMulticaster()-->Line_7 $$ Map<Class, List> after = multicaster.getListeners()[ FD ]
Line_13 $$ if (beforeList != null) -->Line_14 $$ afterList.removeAll(beforeList)[ CD ]
Line_11 $$ List beforeList = before.get(aClass)-->Line_14 $$ afterList.removeAll(beforeList)[ FD ]
Line_16 $$ if (!afterList.isEmpty()) -->Line_17 $$ leaked.put(aClass, afterList)[ CD ]
Line_8 $$ Map<Class, List> leaked = new LinkedHashMap<Class, List>()-->Line_17 $$ leaked.put(aClass, afterList)[ FD ]
Line_8 $$ Map<Class, List> leaked = new LinkedHashMap<Class, List>()-->Line_20 $$ for (Map.Entry<Class, List> entry : leaked.entrySet()) [ FD ]
Line_12 $$ List afterList = entry.getValue()-->Line_17 $$ leaked.put(aClass, afterList)[ FD ]
Line_12 $$ List afterList = entry.getValue()-->Line_14 $$ afterList.removeAll(beforeList)[ FD ]
Line_9 $$ for (Map.Entry<Class, List> entry : after.entrySet()) -->Line_22 $$ List list = entry.getValue()[ FD ]
Line_10 $$ Class aClass = entry.getKey()-->Line_11 $$ List beforeList = before.get(aClass)[ FD ]
