Line_3 $$ Map<Integer, String> m = new HashMap<Integer, String>()-->Line_4 $$ m.put(123, "123")[ FD ]
Line_3 $$ Map<Integer, String> m = new HashMap<Integer, String>()-->Line_6 $$ m.put(null, "789")[ FD ]
Line_2 $$ public void shouldPutAll() throws Exception -->Line_3 $$ Map<Integer, String> m = new HashMap<Integer, String>()[ CD ]
Line_3 $$ Map<Integer, String> m = new HashMap<Integer, String>()-->Line_7 $$ this.map.putAll(m)[ FD ]
Line_2 $$ public void shouldPutAll() throws Exception -->Line_6 $$ m.put(null, "789")[ CD ]
Line_2 $$ public void shouldPutAll() throws Exception -->Line_10 $$ assertThat(this.map.get(456), is(nullValue()))[ CD ]
Line_2 $$ public void shouldPutAll() throws Exception -->Line_11 $$ assertThat(this.map.get(null), is("789"))[ CD ]
Line_2 $$ public void shouldPutAll() throws Exception -->Line_9 $$ assertThat(this.map.get(123), is("123"))[ CD ]
Line_2 $$ public void shouldPutAll() throws Exception -->Line_4 $$ m.put(123, "123")[ CD ]
Line_2 $$ public void shouldPutAll() throws Exception -->Line_5 $$ m.put(456, null)[ CD ]
Line_2 $$ public void shouldPutAll() throws Exception -->Line_7 $$ this.map.putAll(m)[ CD ]
Line_3 $$ Map<Integer, String> m = new HashMap<Integer, String>()-->Line_5 $$ m.put(456, null)[ FD ]
Line_2 $$ public void shouldPutAll() throws Exception -->Line_8 $$ assertThat(this.map.size(), is(3))[ CD ]
