Line_7 $$ MockHttpServletResponse response = new MockHttpServletResponse()-->Line_9 $$ view.render(model, request, response)[ FD ]
Line_2 $$ public void renderNullModelValue() throws Exception -->Line_4 $$ Map<String, Object> model = new HashMap<String, Object>()[ CD ]
Line_2 $$ public void renderNullModelValue() throws Exception -->Line_7 $$ MockHttpServletResponse response = new MockHttpServletResponse()[ CD ]
Line_7 $$ MockHttpServletResponse response = new MockHttpServletResponse()-->Line_13 $$ assertEquals("Invalid content length", 0, response.getContentLength())[ FD ]
Line_2 $$ public void renderNullModelValue() throws Exception -->Line_5 $$ model.put(modelKey, null)[ CD ]
Line_2 $$ public void renderNullModelValue() throws Exception -->Line_6 $$ MockHttpServletRequest request = new MockHttpServletRequest()[ CD ]
Line_6 $$ MockHttpServletRequest request = new MockHttpServletRequest()-->Line_9 $$ view.render(model, request, response)[ FD ]
Line_4 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_9 $$ view.render(model, request, response)[ FD ]
Line_2 $$ public void renderNullModelValue() throws Exception -->Line_13 $$ assertEquals("Invalid content length", 0, response.getContentLength())[ CD ]
Line_4 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_5 $$ model.put(modelKey, null)[ FD ]
Line_2 $$ public void renderNullModelValue() throws Exception -->Line_3 $$ String modelKey = "key"[ CD ]
Line_3 $$ String modelKey = "key"-->Line_5 $$ model.put(modelKey, null)[ FD ]
