Line_16 $$ if (currentTokens.get(identifier) == null) -->Line_17 $$ currentTokens.put(identifier, new DelegationTokenInformation(renewDate, password, getTrackingIdIfEnabled(identifier)))[ CD ]
Line_2 $$ public synchronized void addPersistedDelegationToken(TokenIdent identifier, long renewDate) throws IOException -->Line_8 $$ if (dKey == null) [ CD ]
Line_2 $$ public synchronized void addPersistedDelegationToken(TokenIdent identifier, long renewDate) throws IOException -->Line_12 $$ byte[] password = createPassword(identifier.getBytes(), dKey.getKey())[ CD ]
Line_8 $$ if (dKey == null) -->Line_10 $$ return[ CD ]
Line_2 $$ public synchronized void addPersistedDelegationToken(TokenIdent identifier, long renewDate) throws IOException -->Line_16 $$ if (currentTokens.get(identifier) == null) [ FD ]
Line_8 $$ if (dKey == null) -->Line_9 $$ LOG.warn("No KEY found for persisted identifier " + identifier.toString())[ CD ]
Line_2 $$ public synchronized void addPersistedDelegationToken(TokenIdent identifier, long renewDate) throws IOException -->Line_9 $$ LOG.warn("No KEY found for persisted identifier " + identifier.toString())[ FD ]
Line_2 $$ public synchronized void addPersistedDelegationToken(TokenIdent identifier, long renewDate) throws IOException -->Line_14 $$ this.delegationTokenSequenceNumber = identifier.getSequenceNumber()[ FD ]
Line_2 $$ public synchronized void addPersistedDelegationToken(TokenIdent identifier, long renewDate) throws IOException -->Line_3 $$ if (running) [ CD ]
Line_2 $$ public synchronized void addPersistedDelegationToken(TokenIdent identifier, long renewDate) throws IOException -->Line_13 $$ if (identifier.getSequenceNumber() > this.delegationTokenSequenceNumber) [ FD ]
Line_2 $$ public synchronized void addPersistedDelegationToken(TokenIdent identifier, long renewDate) throws IOException -->Line_7 $$ DelegationKey dKey = allKeys.get(keyId)[ CD ]
Line_2 $$ public synchronized void addPersistedDelegationToken(TokenIdent identifier, long renewDate) throws IOException -->Line_17 $$ currentTokens.put(identifier, new DelegationTokenInformation(renewDate, password, getTrackingIdIfEnabled(identifier)))[ FD ]
Line_7 $$ DelegationKey dKey = allKeys.get(keyId)-->Line_8 $$ if (dKey == null) [ FD ]
Line_2 $$ public synchronized void addPersistedDelegationToken(TokenIdent identifier, long renewDate) throws IOException -->Line_16 $$ if (currentTokens.get(identifier) == null) [ CD ]
Line_2 $$ public synchronized void addPersistedDelegationToken(TokenIdent identifier, long renewDate) throws IOException -->Line_6 $$ int keyId = identifier.getMasterKeyId()[ CD ]
Line_2 $$ public synchronized void addPersistedDelegationToken(TokenIdent identifier, long renewDate) throws IOException -->Line_13 $$ if (identifier.getSequenceNumber() > this.delegationTokenSequenceNumber) [ CD ]
Line_7 $$ DelegationKey dKey = allKeys.get(keyId)-->Line_12 $$ byte[] password = createPassword(identifier.getBytes(), dKey.getKey())[ FD ]
Line_2 $$ public synchronized void addPersistedDelegationToken(TokenIdent identifier, long renewDate) throws IOException -->Line_6 $$ int keyId = identifier.getMasterKeyId()[ FD ]
Line_2 $$ public synchronized void addPersistedDelegationToken(TokenIdent identifier, long renewDate) throws IOException -->Line_12 $$ byte[] password = createPassword(identifier.getBytes(), dKey.getKey())[ FD ]
Line_6 $$ int keyId = identifier.getMasterKeyId()-->Line_7 $$ DelegationKey dKey = allKeys.get(keyId)[ FD ]
Line_13 $$ if (identifier.getSequenceNumber() > this.delegationTokenSequenceNumber) -->Line_14 $$ this.delegationTokenSequenceNumber = identifier.getSequenceNumber()[ CD ]
