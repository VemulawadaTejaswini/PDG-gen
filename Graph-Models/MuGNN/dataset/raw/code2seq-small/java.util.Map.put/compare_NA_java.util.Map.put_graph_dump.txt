Line_11 $$ ProgressLogger progressLogger = getProgressLoggerFactory().newOperation(getClass())-->Line_12 $$ progressLogger.setDescription("Gradle Build Comparison")[ FD ]
Line_14 $$ GradleBuildComparison comparison = new GradleBuildComparison(sourceBuildExecuter, targetBuildExecuter, logger, progressLogger, getProject().getGradle())-->Line_16 $$ comparison.registerType(UnknownBuildOutcome.class, new UnknownBuildOutcomeComparator(), new UnknownBuildOutcomeComparisonResultHtmlRenderer(), new UnknownBuildOutcomeHtmlRenderer())[ FD ]
Line_19 $$ Map<String, String> hostAttributes = new LinkedHashMap<String, String>(4)-->Line_20 $$ hostAttributes.put("Project", getProject().getRootDir().getAbsolutePath())[ FD ]
Line_19 $$ Map<String, String> hostAttributes = new LinkedHashMap<String, String>(4)-->Line_22 $$ hostAttributes.put("Gradle version", GradleVersion.current().getVersion())[ FD ]
Line_2 $$ void compare() -->Line_21 $$ hostAttributes.put("Task", getPath())[ CD ]
Line_2 $$ void compare() -->Line_11 $$ ProgressLogger progressLogger = getProgressLoggerFactory().newOperation(getClass())[ CD ]
Line_3 $$ GradleBuildInvocationSpec sourceBuild = getSourceBuild()-->Line_5 $$ if (sourceBuild.equals(targetBuild)) [ FD ]
Line_19 $$ Map<String, String> hostAttributes = new LinkedHashMap<String, String>(4)-->Line_23 $$ hostAttributes.put("Executed at", new SimpleDateFormat().format(new Date()))[ FD ]
Line_24 $$ BuildComparisonResult result = comparison.compare(fileStore, getReportDir(), hostAttributes)-->Line_25 $$ communicateResult(result)[ FD ]
Line_2 $$ void compare() -->Line_16 $$ comparison.registerType(UnknownBuildOutcome.class, new UnknownBuildOutcomeComparator(), new UnknownBuildOutcomeComparisonResultHtmlRenderer(), new UnknownBuildOutcomeHtmlRenderer())[ CD ]
Line_2 $$ void compare() -->Line_12 $$ progressLogger.setDescription("Gradle Build Comparison")[ CD ]
Line_11 $$ ProgressLogger progressLogger = getProgressLoggerFactory().newOperation(getClass())-->Line_13 $$ progressLogger.setShortDescription(getName())[ FD ]
Line_19 $$ Map<String, String> hostAttributes = new LinkedHashMap<String, String>(4)-->Line_24 $$ BuildComparisonResult result = comparison.compare(fileStore, getReportDir(), hostAttributes)[ FD ]
Line_2 $$ void compare() -->Line_10 $$ Logger logger = getLogger()[ CD ]
Line_14 $$ GradleBuildComparison comparison = new GradleBuildComparison(sourceBuildExecuter, targetBuildExecuter, logger, progressLogger, getProject().getGradle())-->Line_15 $$ comparison.registerType(GeneratedArchiveBuildOutcome.class, new GeneratedArchiveBuildOutcomeComparator(), new GeneratedArchiveBuildOutcomeComparisonResultHtmlRenderer(), new GeneratedArchiveBuildOutcomeHtmlRenderer())[ FD ]
Line_2 $$ void compare() -->Line_24 $$ BuildComparisonResult result = comparison.compare(fileStore, getReportDir(), hostAttributes)[ CD ]
Line_18 $$ FileStore<String> fileStore = new PathNormalisingKeyFileStore(fileStoreTmpBase)-->Line_24 $$ BuildComparisonResult result = comparison.compare(fileStore, getReportDir(), hostAttributes)[ FD ]
Line_14 $$ GradleBuildComparison comparison = new GradleBuildComparison(sourceBuildExecuter, targetBuildExecuter, logger, progressLogger, getProject().getGradle())-->Line_24 $$ BuildComparisonResult result = comparison.compare(fileStore, getReportDir(), hostAttributes)[ FD ]
Line_2 $$ void compare() -->Line_20 $$ hostAttributes.put("Project", getProject().getRootDir().getAbsolutePath())[ CD ]
Line_19 $$ Map<String, String> hostAttributes = new LinkedHashMap<String, String>(4)-->Line_21 $$ hostAttributes.put("Task", getPath())[ FD ]
Line_2 $$ void compare() -->Line_4 $$ GradleBuildInvocationSpec targetBuild = getTargetBuild()[ CD ]
Line_2 $$ void compare() -->Line_3 $$ GradleBuildInvocationSpec sourceBuild = getSourceBuild()[ CD ]
Line_2 $$ void compare() -->Line_15 $$ comparison.registerType(GeneratedArchiveBuildOutcome.class, new GeneratedArchiveBuildOutcomeComparator(), new GeneratedArchiveBuildOutcomeComparisonResultHtmlRenderer(), new GeneratedArchiveBuildOutcomeHtmlRenderer())[ CD ]
Line_2 $$ void compare() -->Line_14 $$ GradleBuildComparison comparison = new GradleBuildComparison(sourceBuildExecuter, targetBuildExecuter, logger, progressLogger, getProject().getGradle())[ CD ]
Line_2 $$ void compare() -->Line_18 $$ FileStore<String> fileStore = new PathNormalisingKeyFileStore(fileStoreTmpBase)[ CD ]
Line_2 $$ void compare() -->Line_8 $$ ComparableGradleBuildExecuter sourceBuildExecuter = new ComparableGradleBuildExecuter(sourceBuild)[ CD ]
Line_2 $$ void compare() -->Line_22 $$ hostAttributes.put("Gradle version", GradleVersion.current().getVersion())[ CD ]
Line_2 $$ void compare() -->Line_13 $$ progressLogger.setShortDescription(getName())[ CD ]
Line_4 $$ GradleBuildInvocationSpec targetBuild = getTargetBuild()-->Line_5 $$ if (sourceBuild.equals(targetBuild)) [ FD ]
Line_5 $$ if (sourceBuild.equals(targetBuild)) -->Line_6 $$ getLogger().warn("The source build and target build are identical. Set '[ CD ]
Line_2 $$ void compare() -->Line_5 $$ if (sourceBuild.equals(targetBuild)) [ CD ]
Line_2 $$ void compare() -->Line_17 $$ File fileStoreTmpBase = getFileResolver().resolve(String.format(TMP_FILESTORAGE_PREFIX + "-%s-%s", getName(), System.currentTimeMillis()))[ CD ]
Line_2 $$ void compare() -->Line_9 $$ ComparableGradleBuildExecuter targetBuildExecuter = new ComparableGradleBuildExecuter(targetBuild)[ CD ]
Line_2 $$ void compare() -->Line_19 $$ Map<String, String> hostAttributes = new LinkedHashMap<String, String>(4)[ CD ]
Line_2 $$ void compare() -->Line_25 $$ communicateResult(result)[ CD ]
Line_2 $$ void compare() -->Line_23 $$ hostAttributes.put("Executed at", new SimpleDateFormat().format(new Date()))[ CD ]
