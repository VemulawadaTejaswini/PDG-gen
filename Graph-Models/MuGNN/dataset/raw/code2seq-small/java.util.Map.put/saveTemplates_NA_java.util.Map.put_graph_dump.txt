Line_41 $$ final String templateText = templateToSave.getText()-->Line_42 $$ if (!diskText.equals(templateText)) [ FD ]
Line_17 $$ for (FileTemplateBase template : getAllTemplates(true)) -->Line_21 $$ final String name = template.getQualifiedName()[ FD ]
Line_30 $$ if (customizedTemplateFile == null) -->Line_36 $$ if (templateToSave == null) [ CD ]
Line_10 $$ final String name = file.getName()-->Line_29 $$ final FileTemplateBase templateToSave = templatesToSave.get(name)[ FD ]
Line_42 $$ if (!diskText.equals(templateText)) -->Line_43 $$ saveTemplate(configRoot, templateToSave, lineSeparator)[ CD ]
Line_28 $$ final File customizedTemplateFile = templatesOnDisk.get(name)-->Line_30 $$ if (customizedTemplateFile == null) [ FD ]
Line_26 $$ final String lineSeparator = CodeStyleSettingsManager.getSettings(ProjectManagerEx.getInstanceEx().getDefaultProject()).getLineSeparator()-->Line_32 $$ saveTemplate(configRoot, templateToSave, lineSeparator)[ FD ]
Line_9 $$ if (!file.isDirectory()) -->Line_12 $$ allNames.add(name)[ CD ]
Line_8 $$ for (File file : files) -->Line_10 $$ final String name = file.getName()[ FD ]
Line_40 $$ final String diskText = StringUtil.convertLineSeparators(FileUtil.loadFile(customizedTemplateFile, CharsetToolkit.UTF8_CHARSET))-->Line_42 $$ if (!diskText.equals(templateText)) [ FD ]
Line_2 $$ public void saveTemplates() -->Line_25 $$ if (!allNames.isEmpty()) [ CD ]
Line_17 $$ for (FileTemplateBase template : getAllTemplates(true)) -->Line_22 $$ templatesToSave.put(name, template)[ FD ]
Line_5 $$ final Set<String> allNames = new HashSet<String>()-->Line_23 $$ allNames.add(name)[ FD ]
Line_3 $$ final File configRoot = getConfigRoot(true)-->Line_43 $$ saveTemplate(configRoot, templateToSave, lineSeparator)[ FD ]
Line_2 $$ public void saveTemplates() -->Line_3 $$ final File configRoot = getConfigRoot(true)[ CD ]
Line_10 $$ final String name = file.getName()-->Line_22 $$ templatesToSave.put(name, template)[ FD ]
Line_2 $$ public void saveTemplates() -->Line_6 $$ final Map<String, File> templatesOnDisk = files != null && files.length > 0 ? new HashMap<String, File>() : Collections.<String, File>emptyMap()[ CD ]
Line_26 $$ final String lineSeparator = CodeStyleSettingsManager.getSettings(ProjectManagerEx.getInstanceEx().getDefaultProject()).getLineSeparator()-->Line_43 $$ saveTemplate(configRoot, templateToSave, lineSeparator)[ FD ]
Line_2 $$ public void saveTemplates() -->Line_4 $$ final File[] files = configRoot.listFiles()[ CD ]
Line_9 $$ if (!file.isDirectory()) -->Line_11 $$ templatesOnDisk.put(name, file)[ CD ]
Line_25 $$ if (!allNames.isEmpty()) -->Line_26 $$ final String lineSeparator = CodeStyleSettingsManager.getSettings(ProjectManagerEx.getInstanceEx().getDefaultProject()).getLineSeparator()[ CD ]
Line_3 $$ final File configRoot = getConfigRoot(true)-->Line_32 $$ saveTemplate(configRoot, templateToSave, lineSeparator)[ FD ]
Line_6 $$ final Map<String, File> templatesOnDisk = files != null && files.length > 0 ? new HashMap<String, File>() : Collections.<String, File>emptyMap()-->Line_11 $$ templatesOnDisk.put(name, file)[ FD ]
Line_29 $$ final FileTemplateBase templateToSave = templatesToSave.get(name)-->Line_36 $$ if (templateToSave == null) [ FD ]
Line_9 $$ if (!file.isDirectory()) -->Line_10 $$ final String name = file.getName()[ CD ]
Line_28 $$ final File customizedTemplateFile = templatesOnDisk.get(name)-->Line_40 $$ final String diskText = StringUtil.convertLineSeparators(FileUtil.loadFile(customizedTemplateFile, CharsetToolkit.UTF8_CHARSET))[ FD ]
Line_5 $$ final Set<String> allNames = new HashSet<String>()-->Line_25 $$ if (!allNames.isEmpty()) [ FD ]
Line_10 $$ final String name = file.getName()-->Line_28 $$ final File customizedTemplateFile = templatesOnDisk.get(name)[ FD ]
Line_16 $$ final Map<String, FileTemplateBase> templatesToSave = new HashMap<String, FileTemplateBase>()-->Line_29 $$ final FileTemplateBase templateToSave = templatesToSave.get(name)[ FD ]
Line_2 $$ public void saveTemplates() -->Line_7 $$ if (files != null) [ CD ]
Line_2 $$ public void saveTemplates() -->Line_16 $$ final Map<String, FileTemplateBase> templatesToSave = new HashMap<String, FileTemplateBase>()[ CD ]
Line_36 $$ if (templateToSave == null) -->Line_37 $$ FileUtil.delete(customizedTemplateFile)[ CD ]
Line_28 $$ final File customizedTemplateFile = templatesOnDisk.get(name)-->Line_37 $$ FileUtil.delete(customizedTemplateFile)[ FD ]
Line_8 $$ for (File file : files) -->Line_9 $$ if (!file.isDirectory()) [ FD ]
Line_10 $$ final String name = file.getName()-->Line_11 $$ templatesOnDisk.put(name, file)[ FD ]
Line_3 $$ final File configRoot = getConfigRoot(true)-->Line_4 $$ final File[] files = configRoot.listFiles()[ FD ]
Line_29 $$ final FileTemplateBase templateToSave = templatesToSave.get(name)-->Line_41 $$ final String templateText = templateToSave.getText()[ FD ]
Line_6 $$ final Map<String, File> templatesOnDisk = files != null && files.length > 0 ? new HashMap<String, File>() : Collections.<String, File>emptyMap()-->Line_28 $$ final File customizedTemplateFile = templatesOnDisk.get(name)[ FD ]
Line_10 $$ final String name = file.getName()-->Line_12 $$ allNames.add(name)[ FD ]
Line_16 $$ final Map<String, FileTemplateBase> templatesToSave = new HashMap<String, FileTemplateBase>()-->Line_22 $$ templatesToSave.put(name, template)[ FD ]
Line_2 $$ public void saveTemplates() -->Line_5 $$ final Set<String> allNames = new HashSet<String>()[ CD ]
Line_29 $$ final FileTemplateBase templateToSave = templatesToSave.get(name)-->Line_43 $$ saveTemplate(configRoot, templateToSave, lineSeparator)[ FD ]
Line_5 $$ final Set<String> allNames = new HashSet<String>()-->Line_12 $$ allNames.add(name)[ FD ]
Line_8 $$ for (File file : files) -->Line_11 $$ templatesOnDisk.put(name, file)[ FD ]
Line_10 $$ final String name = file.getName()-->Line_23 $$ allNames.add(name)[ FD ]
Line_4 $$ final File[] files = configRoot.listFiles()-->Line_7 $$ if (files != null) [ FD ]
Line_29 $$ final FileTemplateBase templateToSave = templatesToSave.get(name)-->Line_32 $$ saveTemplate(configRoot, templateToSave, lineSeparator)[ FD ]
