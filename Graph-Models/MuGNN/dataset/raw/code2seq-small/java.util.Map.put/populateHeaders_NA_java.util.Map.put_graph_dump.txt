Line_15 $$ contentLength += info.partLength-->Line_16 $$ contentLength += dob.getLength()[ FD ]
Line_2 $$ protected void populateHeaders(List<String> mapIds, String outputBaseStr, String user, int reduce, HttpRequest request, HttpResponse response, boolean keepAliveParam, Map<String, MapOutputInfo> mapOutputInfoMap) throws IOException -->Line_6 $$ MapOutputInfo outputInfo = getMapOutputInfo(base, mapId, reduce, user)[ FD ]
Line_3 $$ long contentLength = 0-->Line_15 $$ contentLength += info.partLength[ FD ]
Line_2 $$ protected void populateHeaders(List<String> mapIds, String outputBaseStr, String user, int reduce, HttpRequest request, HttpResponse response, boolean keepAliveParam, Map<String, MapOutputInfo> mapOutputInfoMap) throws IOException -->Line_11 $$ IndexRecord info = indexCache.getIndexInformation(mapId, reduce, indexFileName, user)[ FD ]
Line_4 $$ for (String mapId : mapIds) -->Line_11 $$ IndexRecord info = indexCache.getIndexInformation(mapId, reduce, indexFileName, user)[ FD ]
Line_2 $$ protected void populateHeaders(List<String> mapIds, String outputBaseStr, String user, int reduce, HttpRequest request, HttpResponse response, boolean keepAliveParam, Map<String, MapOutputInfo> mapOutputInfoMap) throws IOException -->Line_18 $$ setResponseHeaders(response, keepAliveParam, contentLength)[ CD ]
Line_2 $$ protected void populateHeaders(List<String> mapIds, String outputBaseStr, String user, int reduce, HttpRequest request, HttpResponse response, boolean keepAliveParam, Map<String, MapOutputInfo> mapOutputInfoMap) throws IOException -->Line_7 $$ if (mapOutputInfoMap.size() < mapOutputMetaInfoCacheSize) [ FD ]
Line_2 $$ protected void populateHeaders(List<String> mapIds, String outputBaseStr, String user, int reduce, HttpRequest request, HttpResponse response, boolean keepAliveParam, Map<String, MapOutputInfo> mapOutputInfoMap) throws IOException -->Line_3 $$ long contentLength = 0[ CD ]
Line_2 $$ protected void populateHeaders(List<String> mapIds, String outputBaseStr, String user, int reduce, HttpRequest request, HttpResponse response, boolean keepAliveParam, Map<String, MapOutputInfo> mapOutputInfoMap) throws IOException -->Line_8 $$ mapOutputInfoMap.put(mapId, outputInfo)[ FD ]
Line_13 $$ DataOutputBuffer dob = new DataOutputBuffer()-->Line_14 $$ header.write(dob)[ FD ]
Line_3 $$ long contentLength = 0-->Line_18 $$ setResponseHeaders(response, keepAliveParam, contentLength)[ FD ]
Line_12 $$ ShuffleHeader header = new ShuffleHeader(mapId, info.partLength, info.rawLength, reduce)-->Line_14 $$ header.write(dob)[ FD ]
Line_15 $$ contentLength += info.partLength-->Line_18 $$ setResponseHeaders(response, keepAliveParam, contentLength)[ FD ]
Line_4 $$ for (String mapId : mapIds) -->Line_8 $$ mapOutputInfoMap.put(mapId, outputInfo)[ FD ]
Line_10 $$ Path indexFileName = lDirAlloc.getLocalPathToRead(base + "/file.out.index", conf)-->Line_11 $$ IndexRecord info = indexCache.getIndexInformation(mapId, reduce, indexFileName, user)[ FD ]
Line_2 $$ protected void populateHeaders(List<String> mapIds, String outputBaseStr, String user, int reduce, HttpRequest request, HttpResponse response, boolean keepAliveParam, Map<String, MapOutputInfo> mapOutputInfoMap) throws IOException -->Line_18 $$ setResponseHeaders(response, keepAliveParam, contentLength)[ FD ]
Line_16 $$ contentLength += dob.getLength()-->Line_18 $$ setResponseHeaders(response, keepAliveParam, contentLength)[ FD ]
Line_4 $$ for (String mapId : mapIds) -->Line_6 $$ MapOutputInfo outputInfo = getMapOutputInfo(base, mapId, reduce, user)[ FD ]
Line_13 $$ DataOutputBuffer dob = new DataOutputBuffer()-->Line_16 $$ contentLength += dob.getLength()[ FD ]
Line_7 $$ if (mapOutputInfoMap.size() < mapOutputMetaInfoCacheSize) -->Line_8 $$ mapOutputInfoMap.put(mapId, outputInfo)[ CD ]
Line_6 $$ MapOutputInfo outputInfo = getMapOutputInfo(base, mapId, reduce, user)-->Line_8 $$ mapOutputInfoMap.put(mapId, outputInfo)[ FD ]
Line_5 $$ String base = outputBaseStr + mapId-->Line_6 $$ MapOutputInfo outputInfo = getMapOutputInfo(base, mapId, reduce, user)[ FD ]
Line_3 $$ long contentLength = 0-->Line_16 $$ contentLength += dob.getLength()[ FD ]
