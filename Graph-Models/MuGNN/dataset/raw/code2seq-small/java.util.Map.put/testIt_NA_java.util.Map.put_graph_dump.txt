Line_3 $$ Map<Integer, String> innerMap = new HashMap()-->Line_6 $$ outerMap.put(1L, innerMap)[ FD ]
Line_2 $$ public void testIt() -->Line_6 $$ outerMap.put(1L, innerMap)[ CD ]
Line_2 $$ public void testIt() -->Line_5 $$ Map<Long, Map<Integer, String>> outerMap = new HashMap()[ CD ]
Line_2 $$ public void testIt() -->Line_4 $$ innerMap.put(2, "abc")[ CD ]
Line_2 $$ public void testIt() -->Line_3 $$ Map<Integer, String> innerMap = new HashMap()[ CD ]
Line_5 $$ Map<Long, Map<Integer, String>> outerMap = new HashMap()-->Line_7 $$ Map<Long, Map<Integer, String>> transformedMap = outerMap.entrySet().stream().collect(Collectors.toMap(Map.Entry::<>getKey,  m -> m.getValue().entrySet().stream().collect(Collectors.toMap(Map.Entry::<>getKey,  v -> v.getValue().toUpperCase()))))[ FD ]
Line_2 $$ public void testIt() -->Line_7 $$ Map<Long, Map<Integer, String>> transformedMap = outerMap.entrySet().stream().collect(Collectors.toMap(Map.Entry::<>getKey,  m -> m.getValue().entrySet().stream().collect(Collectors.toMap(Map.Entry::<>getKey,  v -> v.getValue().toUpperCase()))))[ CD ]
Line_5 $$ Map<Long, Map<Integer, String>> outerMap = new HashMap()-->Line_6 $$ outerMap.put(1L, innerMap)[ FD ]
Line_3 $$ Map<Integer, String> innerMap = new HashMap()-->Line_4 $$ innerMap.put(2, "abc")[ FD ]
