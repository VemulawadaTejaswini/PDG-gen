Line_2 $$ public void testJSONSerialization() -->Line_4 $$ serviceContext.setAttribute("TestName", "TestValue")[ CD ]
Line_2 $$ public void testJSONSerialization() -->Line_8 $$ serviceContext.setRequest(mock(HttpServletRequest.class))[ CD ]
Line_2 $$ public void testJSONSerialization() -->Line_6 $$ headers.put("TestHeaderName", "TestHeaderValue")[ CD ]
Line_3 $$ ServiceContext serviceContext = new ServiceContext()-->Line_9 $$ String json = JSONFactoryUtil.serialize(serviceContext)[ FD ]
Line_2 $$ public void testJSONSerialization() -->Line_13 $$ Assert.assertNull(deserializedServiceContext.getRequest())[ CD ]
Line_2 $$ public void testJSONSerialization() -->Line_11 $$ Assert.assertEquals(deserializedServiceContext.getAttributes(), serviceContext.getAttributes())[ CD ]
Line_2 $$ public void testJSONSerialization() -->Line_10 $$ ServiceContext deserializedServiceContext = (ServiceContext) JSONFactoryUtil.deserialize(json)[ CD ]
Line_2 $$ public void testJSONSerialization() -->Line_12 $$ Assert.assertNull(deserializedServiceContext.getHeaders())[ CD ]
Line_10 $$ ServiceContext deserializedServiceContext = (ServiceContext) JSONFactoryUtil.deserialize(json)-->Line_13 $$ Assert.assertNull(deserializedServiceContext.getRequest())[ FD ]
Line_3 $$ ServiceContext serviceContext = new ServiceContext()-->Line_11 $$ Assert.assertEquals(deserializedServiceContext.getAttributes(), serviceContext.getAttributes())[ FD ]
Line_9 $$ String json = JSONFactoryUtil.serialize(serviceContext)-->Line_10 $$ ServiceContext deserializedServiceContext = (ServiceContext) JSONFactoryUtil.deserialize(json)[ FD ]
Line_2 $$ public void testJSONSerialization() -->Line_9 $$ String json = JSONFactoryUtil.serialize(serviceContext)[ CD ]
Line_2 $$ public void testJSONSerialization() -->Line_5 $$ Map<String, String> headers = new HashMap()[ CD ]
Line_5 $$ Map<String, String> headers = new HashMap()-->Line_7 $$ serviceContext.setHeaders(headers)[ FD ]
Line_10 $$ ServiceContext deserializedServiceContext = (ServiceContext) JSONFactoryUtil.deserialize(json)-->Line_12 $$ Assert.assertNull(deserializedServiceContext.getHeaders())[ FD ]
Line_2 $$ public void testJSONSerialization() -->Line_7 $$ serviceContext.setHeaders(headers)[ CD ]
Line_3 $$ ServiceContext serviceContext = new ServiceContext()-->Line_8 $$ serviceContext.setRequest(mock(HttpServletRequest.class))[ FD ]
Line_5 $$ Map<String, String> headers = new HashMap()-->Line_6 $$ headers.put("TestHeaderName", "TestHeaderValue")[ FD ]
Line_3 $$ ServiceContext serviceContext = new ServiceContext()-->Line_7 $$ serviceContext.setHeaders(headers)[ FD ]
Line_3 $$ ServiceContext serviceContext = new ServiceContext()-->Line_4 $$ serviceContext.setAttribute("TestName", "TestValue")[ FD ]
Line_2 $$ public void testJSONSerialization() -->Line_3 $$ ServiceContext serviceContext = new ServiceContext()[ CD ]
Line_10 $$ ServiceContext deserializedServiceContext = (ServiceContext) JSONFactoryUtil.deserialize(json)-->Line_11 $$ Assert.assertEquals(deserializedServiceContext.getAttributes(), serviceContext.getAttributes())[ FD ]
