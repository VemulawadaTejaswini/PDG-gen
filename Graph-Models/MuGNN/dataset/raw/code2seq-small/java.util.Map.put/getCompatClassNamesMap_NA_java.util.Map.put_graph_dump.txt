Line_10 $$ for (int i = 0; i < 3; i++) -->Line_12 $$ if (!fileNames.isEmpty()) [ CD ]
Line_9 $$ List<String> fileNames = new ArrayList()-->Line_11 $$ fileNames = getFileNames(basedir, new String[0], includes)[ FD ]
Line_10 $$ for (int i = 0; i < 3; i++) -->Line_11 $$ fileNames = getFileNames(basedir, new String[0], includes)[ CD ]
Line_8 $$ String basedir = sourceFormatterArgs.getBaseDirName()-->Line_11 $$ fileNames = getFileNames(basedir, new String[0], includes)[ FD ]
Line_2 $$ protected Map<String, String> getCompatClassNamesMap() throws Exception -->Line_7 $$ String[] includes = new String[] [ CD ]
Line_2 $$ protected Map<String, String> getCompatClassNamesMap() throws Exception -->Line_8 $$ String basedir = sourceFormatterArgs.getBaseDirName()[ CD ]
Line_17 $$ for (String fileName : fileNames) -->Line_18 $$ if (!fileName.startsWith(sourceFormatterArgs.getBaseDirName() + "shared")) [ FD ]
Line_26 $$ String compatClassName = fileName.substring(pos)-->Line_28 $$ String extendedClassName = StringUtil.replace(compatClassName, "compat.", StringPool.BLANK)[ FD ]
Line_23 $$ fileName = StringUtil.replace(fileName, StringPool.BACK_SLASH, StringPool.SLASH)-->Line_24 $$ fileName = StringUtil.replace(fileName, StringPool.SLASH, StringPool.PERIOD)[ FD ]
Line_24 $$ fileName = StringUtil.replace(fileName, StringPool.SLASH, StringPool.PERIOD)-->Line_26 $$ String compatClassName = fileName.substring(pos)[ FD ]
Line_17 $$ for (String fileName : fileNames) -->Line_25 $$ int pos = fileName.indexOf("com.")[ FD ]
Line_6 $$ Map<String, String> compatClassNamesMap = new HashMap()-->Line_30 $$ compatClassNamesMap.put(compatClassName, extendedClassName)[ FD ]
Line_3 $$ if (_compatClassNamesMap != null) -->Line_4 $$ return _compatClassNamesMap[ CD ]
Line_26 $$ String compatClassName = fileName.substring(pos)-->Line_27 $$ compatClassName = compatClassName.substring(0, compatClassName.length() - 5)[ FD ]
Line_11 $$ fileNames = getFileNames(basedir, new String[0], includes)-->Line_12 $$ if (!fileNames.isEmpty()) [ FD ]
Line_9 $$ List<String> fileNames = new ArrayList()-->Line_12 $$ if (!fileNames.isEmpty()) [ FD ]
Line_15 $$ basedir = "../" + basedir-->Line_11 $$ fileNames = getFileNames(basedir, new String[0], includes)[ FD ]
Line_2 $$ protected Map<String, String> getCompatClassNamesMap() throws Exception -->Line_9 $$ List<String> fileNames = new ArrayList()[ CD ]
Line_7 $$ String[] includes = new String[] -->Line_11 $$ fileNames = getFileNames(basedir, new String[0], includes)[ FD ]
Line_17 $$ for (String fileName : fileNames) -->Line_24 $$ fileName = StringUtil.replace(fileName, StringPool.SLASH, StringPool.PERIOD)[ FD ]
Line_8 $$ String basedir = sourceFormatterArgs.getBaseDirName()-->Line_15 $$ basedir = "../" + basedir[ FD ]
Line_2 $$ protected Map<String, String> getCompatClassNamesMap() throws Exception -->Line_6 $$ Map<String, String> compatClassNamesMap = new HashMap()[ CD ]
Line_17 $$ for (String fileName : fileNames) -->Line_26 $$ String compatClassName = fileName.substring(pos)[ FD ]
Line_29 $$ if (content.contains("extends " + extendedClassName)) -->Line_30 $$ compatClassNamesMap.put(compatClassName, extendedClassName)[ CD ]
Line_2 $$ protected Map<String, String> getCompatClassNamesMap() throws Exception -->Line_34 $$ return _compatClassNamesMap[ CD ]
Line_26 $$ String compatClassName = fileName.substring(pos)-->Line_30 $$ compatClassNamesMap.put(compatClassName, extendedClassName)[ FD ]
Line_27 $$ compatClassName = compatClassName.substring(0, compatClassName.length() - 5)-->Line_30 $$ compatClassNamesMap.put(compatClassName, extendedClassName)[ FD ]
Line_23 $$ fileName = StringUtil.replace(fileName, StringPool.BACK_SLASH, StringPool.SLASH)-->Line_26 $$ String compatClassName = fileName.substring(pos)[ FD ]
Line_28 $$ String extendedClassName = StringUtil.replace(compatClassName, "compat.", StringPool.BLANK)-->Line_30 $$ compatClassNamesMap.put(compatClassName, extendedClassName)[ FD ]
Line_2 $$ protected Map<String, String> getCompatClassNamesMap() throws Exception -->Line_10 $$ for (int i = 0; i < 3; i++) [ CD ]
Line_24 $$ fileName = StringUtil.replace(fileName, StringPool.SLASH, StringPool.PERIOD)-->Line_25 $$ int pos = fileName.indexOf("com.")[ FD ]
Line_23 $$ fileName = StringUtil.replace(fileName, StringPool.BACK_SLASH, StringPool.SLASH)-->Line_25 $$ int pos = fileName.indexOf("com.")[ FD ]
Line_27 $$ compatClassName = compatClassName.substring(0, compatClassName.length() - 5)-->Line_28 $$ String extendedClassName = StringUtil.replace(compatClassName, "compat.", StringPool.BLANK)[ FD ]
Line_17 $$ for (String fileName : fileNames) -->Line_23 $$ fileName = StringUtil.replace(fileName, StringPool.BACK_SLASH, StringPool.SLASH)[ FD ]
Line_25 $$ int pos = fileName.indexOf("com.")-->Line_26 $$ String compatClassName = fileName.substring(pos)[ FD ]
Line_10 $$ for (int i = 0; i < 3; i++) -->Line_15 $$ basedir = "../" + basedir[ CD ]
Line_22 $$ String content = FileUtil.read(file)-->Line_29 $$ if (content.contains("extends " + extendedClassName)) [ FD ]
Line_2 $$ protected Map<String, String> getCompatClassNamesMap() throws Exception -->Line_3 $$ if (_compatClassNamesMap != null) [ CD ]
Line_21 $$ File file = new File(basedir + fileName)-->Line_22 $$ String content = FileUtil.read(file)[ FD ]
