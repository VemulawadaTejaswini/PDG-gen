Line_2 $$ protected int putImpl(final Key key, final Val val) -->Line_5 $$ myKeys.add(key)[ FD ]
Line_2 $$ protected int putImpl(final Key key, final Val val) -->Line_11 $$ myKeys.add(insertionIdx, key)[ FD ]
Line_2 $$ protected int putImpl(final Key key, final Val val) -->Line_8 $$ final int idx = Collections.binarySearch(myKeys, key, myComparator)[ FD ]
Line_4 $$ if (myKeys.isEmpty()) -->Line_6 $$ return 0[ CD ]
Line_9 $$ if (idx < 0) -->Line_11 $$ myKeys.add(insertionIdx, key)[ CD ]
Line_2 $$ protected int putImpl(final Key key, final Val val) -->Line_9 $$ if (idx < 0) [ CD ]
Line_9 $$ if (idx < 0) -->Line_12 $$ return insertionIdx[ CD ]
Line_4 $$ if (myKeys.isEmpty()) -->Line_5 $$ myKeys.add(key)[ CD ]
Line_2 $$ protected int putImpl(final Key key, final Val val) -->Line_3 $$ myMap.put(key, val)[ FD ]
Line_2 $$ protected int putImpl(final Key key, final Val val) -->Line_14 $$ return idx[ CD ]
Line_8 $$ final int idx = Collections.binarySearch(myKeys, key, myComparator)-->Line_10 $$ final int insertionIdx = -idx - 1[ FD ]
Line_9 $$ if (idx < 0) -->Line_10 $$ final int insertionIdx = -idx - 1[ CD ]
Line_10 $$ final int insertionIdx = -idx - 1-->Line_11 $$ myKeys.add(insertionIdx, key)[ FD ]
Line_8 $$ final int idx = Collections.binarySearch(myKeys, key, myComparator)-->Line_9 $$ if (idx < 0) [ FD ]
Line_2 $$ protected int putImpl(final Key key, final Val val) -->Line_4 $$ if (myKeys.isEmpty()) [ CD ]
Line_2 $$ protected int putImpl(final Key key, final Val val) -->Line_8 $$ final int idx = Collections.binarySearch(myKeys, key, myComparator)[ CD ]
Line_2 $$ protected int putImpl(final Key key, final Val val) -->Line_3 $$ myMap.put(key, val)[ CD ]
