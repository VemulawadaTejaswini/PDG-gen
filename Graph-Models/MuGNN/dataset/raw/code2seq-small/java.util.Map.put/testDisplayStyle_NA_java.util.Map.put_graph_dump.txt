Line_2 $$ public void testDisplayStyle() throws Exception -->Line_4 $$ String displayStyle = RandomTestUtil.randomString()[ CD ]
Line_2 $$ public void testDisplayStyle() throws Exception -->Line_5 $$ preferenceMap.put("displayStyle", new String[] [ CD ]
Line_3 $$ Map<String, String[]> preferenceMap = new HashMap()-->Line_5 $$ preferenceMap.put("displayStyle", new String[] [ FD ]
Line_2 $$ public void testDisplayStyle() throws Exception -->Line_8 $$ Assert.assertTrue("The display style should not be null", Validator.isNotNull(portletPreferences.getValue("displayStyle", null)))[ CD ]
Line_6 $$ PortletPreferences portletPreferences = getImportedPortletPreferences(preferenceMap)-->Line_8 $$ Assert.assertTrue("The display style should not be null", Validator.isNotNull(portletPreferences.getValue("displayStyle", null)))[ FD ]
Line_3 $$ Map<String, String[]> preferenceMap = new HashMap()-->Line_6 $$ PortletPreferences portletPreferences = getImportedPortletPreferences(preferenceMap)[ FD ]
Line_2 $$ public void testDisplayStyle() throws Exception -->Line_3 $$ Map<String, String[]> preferenceMap = new HashMap()[ CD ]
Line_2 $$ public void testDisplayStyle() throws Exception -->Line_7 $$ Assert.assertEquals(displayStyle, portletPreferences.getValue("displayStyle", null))[ CD ]
Line_4 $$ String displayStyle = RandomTestUtil.randomString()-->Line_7 $$ Assert.assertEquals(displayStyle, portletPreferences.getValue("displayStyle", null))[ FD ]
Line_6 $$ PortletPreferences portletPreferences = getImportedPortletPreferences(preferenceMap)-->Line_7 $$ Assert.assertEquals(displayStyle, portletPreferences.getValue("displayStyle", null))[ FD ]
Line_2 $$ public void testDisplayStyle() throws Exception -->Line_6 $$ PortletPreferences portletPreferences = getImportedPortletPreferences(preferenceMap)[ CD ]
