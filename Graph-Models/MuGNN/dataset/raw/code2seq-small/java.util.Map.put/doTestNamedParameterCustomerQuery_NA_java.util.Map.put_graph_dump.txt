Line_21 $$ Customer cust = new Customer()-->Line_36 $$ assertTrue("Customer forename was assigned correctly", cust.getForename().equals("rod"))[ FD ]
Line_7 $$ class CustomerQuery extends MappingSqlQuery<Customer> -->Line_30 $$ return executeByNamedParam(params).get(0)[ CD ]
Line_2 $$ private void doTestNamedParameterCustomerQuery(final boolean namedDeclarations) throws SQLException -->Line_41 $$ verify(connection).close()[ CD ]
Line_11 $$ if (namedDeclarations) -->Line_15 $$ declareParameter(new SqlParameter(Types.NUMERIC))[ CD ]
Line_21 $$ Customer cust = new Customer()-->Line_35 $$ assertTrue("Customer id was assigned correctly", cust.getId() == 1)[ FD ]
Line_7 $$ class CustomerQuery extends MappingSqlQuery<Customer> -->Line_23 $$ cust.setForename(rs.getString(COLUMN_NAMES[1]))[ FD ]
Line_2 $$ private void doTestNamedParameterCustomerQuery(final boolean namedDeclarations) throws SQLException -->Line_35 $$ assertTrue("Customer id was assigned correctly", cust.getId() == 1)[ CD ]
Line_27 $$ Map<String, Object> params = new HashMap<String, Object>()-->Line_28 $$ params.put("id", id)[ FD ]
Line_2 $$ private void doTestNamedParameterCustomerQuery(final boolean namedDeclarations) throws SQLException -->Line_39 $$ verify(resultSet).close()[ CD ]
Line_2 $$ private void doTestNamedParameterCustomerQuery(final boolean namedDeclarations) throws SQLException -->Line_5 $$ given(resultSet.getString("forename")).willReturn("rod")[ CD ]
Line_21 $$ Customer cust = new Customer()-->Line_22 $$ cust.setId(rs.getInt(COLUMN_NAMES[0]))[ FD ]
Line_2 $$ private void doTestNamedParameterCustomerQuery(final boolean namedDeclarations) throws SQLException -->Line_40 $$ verify(preparedStatement).close()[ CD ]
Line_7 $$ class CustomerQuery extends MappingSqlQuery<Customer> -->Line_28 $$ params.put("id", id)[ CD ]
Line_21 $$ Customer cust = new Customer()-->Line_23 $$ cust.setForename(rs.getString(COLUMN_NAMES[1]))[ FD ]
Line_7 $$ class CustomerQuery extends MappingSqlQuery<Customer> -->Line_23 $$ cust.setForename(rs.getString(COLUMN_NAMES[1]))[ CD ]
Line_2 $$ private void doTestNamedParameterCustomerQuery(final boolean namedDeclarations) throws SQLException -->Line_3 $$ given(resultSet.next()).willReturn(true, false)[ CD ]
Line_2 $$ private void doTestNamedParameterCustomerQuery(final boolean namedDeclarations) throws SQLException -->Line_4 $$ given(resultSet.getInt("id")).willReturn(1)[ CD ]
Line_7 $$ class CustomerQuery extends MappingSqlQuery<Customer> -->Line_29 $$ params.put("country", country)[ CD ]
Line_27 $$ Map<String, Object> params = new HashMap<String, Object>()-->Line_29 $$ params.put("country", country)[ FD ]
Line_7 $$ class CustomerQuery extends MappingSqlQuery<Customer> -->Line_28 $$ params.put("id", id)[ FD ]
Line_27 $$ Map<String, Object> params = new HashMap<String, Object>()-->Line_30 $$ return executeByNamedParam(params).get(0)[ FD ]
Line_2 $$ private void doTestNamedParameterCustomerQuery(final boolean namedDeclarations) throws SQLException -->Line_36 $$ assertTrue("Customer forename was assigned correctly", cust.getForename().equals("rod"))[ CD ]
Line_7 $$ class CustomerQuery extends MappingSqlQuery<Customer> -->Line_29 $$ params.put("country", country)[ FD ]
Line_7 $$ class CustomerQuery extends MappingSqlQuery<Customer> -->Line_22 $$ cust.setId(rs.getInt(COLUMN_NAMES[0]))[ FD ]
Line_2 $$ private void doTestNamedParameterCustomerQuery(final boolean namedDeclarations) throws SQLException -->Line_37 $$ verify(preparedStatement).setObject(1, 1, Types.NUMERIC)[ CD ]
Line_11 $$ if (namedDeclarations) -->Line_13 $$ declareParameter(new SqlParameter("id", Types.NUMERIC))[ CD ]
Line_2 $$ private void doTestNamedParameterCustomerQuery(final boolean namedDeclarations) throws SQLException -->Line_6 $$ given(connection.prepareStatement(SELECT_ID_FORENAME_NAMED_PARAMETERS_PARSED, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY)).willReturn(preparedStatement)[ CD ]
Line_7 $$ class CustomerQuery extends MappingSqlQuery<Customer> -->Line_21 $$ Customer cust = new Customer()[ CD ]
Line_7 $$ class CustomerQuery extends MappingSqlQuery<Customer> -->Line_24 $$ return cust[ CD ]
Line_2 $$ private void doTestNamedParameterCustomerQuery(final boolean namedDeclarations) throws SQLException -->Line_34 $$ Customer cust = query.findCustomer(1, "UK")[ CD ]
Line_7 $$ class CustomerQuery extends MappingSqlQuery<Customer> -->Line_27 $$ Map<String, Object> params = new HashMap<String, Object>()[ CD ]
Line_2 $$ private void doTestNamedParameterCustomerQuery(final boolean namedDeclarations) throws SQLException -->Line_38 $$ verify(preparedStatement).setString(2, "UK")[ CD ]
Line_11 $$ if (namedDeclarations) -->Line_16 $$ declareParameter(new SqlParameter(Types.VARCHAR))[ CD ]
Line_11 $$ if (namedDeclarations) -->Line_12 $$ declareParameter(new SqlParameter("country", Types.VARCHAR))[ CD ]
Line_7 $$ class CustomerQuery extends MappingSqlQuery<Customer> -->Line_22 $$ cust.setId(rs.getInt(COLUMN_NAMES[0]))[ CD ]
