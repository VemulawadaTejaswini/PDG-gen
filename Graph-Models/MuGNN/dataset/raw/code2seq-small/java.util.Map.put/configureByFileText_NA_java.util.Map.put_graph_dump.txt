Line_15 $$ if (rest_index < fileText.length())-->Line_16 $$ text.append(fileText.substring(rest_index))[ CD ]
Line_2 $$ protected Map<String, PsiElement> configureByFileText(String fileText, final String fileName, @NonNls String markerRegexp) -->Line_3 $$ Pattern pat = Pattern.compile(markerRegexp)[ FD ]
Line_8 $$ while (mat.find(rest_index)) -->Line_9 $$ String mark = mat.group()[ CD ]
Line_2 $$ protected Map<String, PsiElement> configureByFileText(String fileText, final String fileName, @NonNls String markerRegexp) -->Line_5 $$ int rest_index = 0[ CD ]
Line_2 $$ protected Map<String, PsiElement> configureByFileText(String fileText, final String fileName, @NonNls String markerRegexp) -->Line_15 $$ if (rest_index < fileText.length())[ FD ]
Line_5 $$ int rest_index = 0-->Line_8 $$ while (mat.find(rest_index)) [ FD ]
Line_9 $$ String mark = mat.group()-->Line_12 $$ offsets.put(mark, text.length())[ FD ]
Line_8 $$ while (mat.find(rest_index)) -->Line_11 $$ text.append(prev_part)[ CD ]
Line_2 $$ protected Map<String, PsiElement> configureByFileText(String fileText, final String fileName, @NonNls String markerRegexp) -->Line_3 $$ Pattern pat = Pattern.compile(markerRegexp)[ CD ]
Line_7 $$ final StringBuffer text = new StringBuffer()-->Line_11 $$ text.append(prev_part)[ FD ]
Line_4 $$ Matcher mat = pat.matcher(fileText)-->Line_10 $$ CharSequence prev_part = fileText.subSequence(rest_index, mat.start())[ FD ]
Line_2 $$ protected Map<String, PsiElement> configureByFileText(String fileText, final String fileName, @NonNls String markerRegexp) -->Line_6 $$ Map<String, Integer> offsets = new HashMap<String, Integer>()[ CD ]
Line_8 $$ while (mat.find(rest_index)) -->Line_13 $$ rest_index = mat.end()[ CD ]
Line_13 $$ rest_index = mat.end()-->Line_16 $$ text.append(fileText.substring(rest_index))[ FD ]
Line_4 $$ Matcher mat = pat.matcher(fileText)-->Line_8 $$ while (mat.find(rest_index)) [ FD ]
Line_13 $$ rest_index = mat.end()-->Line_10 $$ CharSequence prev_part = fileText.subSequence(rest_index, mat.start())[ FD ]
Line_8 $$ while (mat.find(rest_index)) -->Line_10 $$ CharSequence prev_part = fileText.subSequence(rest_index, mat.start())[ CD ]
Line_2 $$ protected Map<String, PsiElement> configureByFileText(String fileText, final String fileName, @NonNls String markerRegexp) -->Line_4 $$ Matcher mat = pat.matcher(fileText)[ CD ]
Line_5 $$ int rest_index = 0-->Line_10 $$ CharSequence prev_part = fileText.subSequence(rest_index, mat.start())[ FD ]
Line_6 $$ Map<String, Integer> offsets = new HashMap<String, Integer>()-->Line_12 $$ offsets.put(mark, text.length())[ FD ]
Line_5 $$ int rest_index = 0-->Line_16 $$ text.append(fileText.substring(rest_index))[ FD ]
Line_2 $$ protected Map<String, PsiElement> configureByFileText(String fileText, final String fileName, @NonNls String markerRegexp) -->Line_19 $$ myFixture.configureFromExistingVirtualFile(myFile.getVirtualFile())[ CD ]
Line_7 $$ final StringBuffer text = new StringBuffer()-->Line_18 $$ myFile = myFixture.addFileToProject(fileName, text.toString())[ FD ]
Line_2 $$ protected Map<String, PsiElement> configureByFileText(String fileText, final String fileName, @NonNls String markerRegexp) -->Line_18 $$ myFile = myFixture.addFileToProject(fileName, text.toString())[ FD ]
Line_10 $$ CharSequence prev_part = fileText.subSequence(rest_index, mat.start())-->Line_11 $$ text.append(prev_part)[ FD ]
Line_2 $$ protected Map<String, PsiElement> configureByFileText(String fileText, final String fileName, @NonNls String markerRegexp) -->Line_16 $$ text.append(fileText.substring(rest_index))[ FD ]
Line_3 $$ Pattern pat = Pattern.compile(markerRegexp)-->Line_4 $$ Matcher mat = pat.matcher(fileText)[ FD ]
Line_2 $$ protected Map<String, PsiElement> configureByFileText(String fileText, final String fileName, @NonNls String markerRegexp) -->Line_17 $$ Map<String, PsiElement> result = new HashMap<String, PsiElement>()[ CD ]
Line_20 $$ for (Map.Entry<String, Integer> entry : offsets.entrySet()) -->Line_21 $$ result.put(entry.getKey(), myFile.findElementAt(entry.getValue()))[ FD ]
Line_2 $$ protected Map<String, PsiElement> configureByFileText(String fileText, final String fileName, @NonNls String markerRegexp) -->Line_4 $$ Matcher mat = pat.matcher(fileText)[ FD ]
Line_2 $$ protected Map<String, PsiElement> configureByFileText(String fileText, final String fileName, @NonNls String markerRegexp) -->Line_10 $$ CharSequence prev_part = fileText.subSequence(rest_index, mat.start())[ FD ]
Line_5 $$ int rest_index = 0-->Line_15 $$ if (rest_index < fileText.length())[ FD ]
Line_7 $$ final StringBuffer text = new StringBuffer()-->Line_16 $$ text.append(fileText.substring(rest_index))[ FD ]
Line_4 $$ Matcher mat = pat.matcher(fileText)-->Line_9 $$ String mark = mat.group()[ FD ]
Line_2 $$ protected Map<String, PsiElement> configureByFileText(String fileText, final String fileName, @NonNls String markerRegexp) -->Line_8 $$ while (mat.find(rest_index)) [ CD ]
Line_2 $$ protected Map<String, PsiElement> configureByFileText(String fileText, final String fileName, @NonNls String markerRegexp) -->Line_15 $$ if (rest_index < fileText.length())[ CD ]
Line_6 $$ Map<String, Integer> offsets = new HashMap<String, Integer>()-->Line_20 $$ for (Map.Entry<String, Integer> entry : offsets.entrySet()) [ FD ]
Line_4 $$ Matcher mat = pat.matcher(fileText)-->Line_13 $$ rest_index = mat.end()[ FD ]
Line_13 $$ rest_index = mat.end()-->Line_15 $$ if (rest_index < fileText.length())[ FD ]
Line_8 $$ while (mat.find(rest_index)) -->Line_12 $$ offsets.put(mark, text.length())[ CD ]
Line_2 $$ protected Map<String, PsiElement> configureByFileText(String fileText, final String fileName, @NonNls String markerRegexp) -->Line_7 $$ final StringBuffer text = new StringBuffer()[ CD ]
Line_7 $$ final StringBuffer text = new StringBuffer()-->Line_12 $$ offsets.put(mark, text.length())[ FD ]
Line_17 $$ Map<String, PsiElement> result = new HashMap<String, PsiElement>()-->Line_21 $$ result.put(entry.getKey(), myFile.findElementAt(entry.getValue()))[ FD ]
Line_13 $$ rest_index = mat.end()-->Line_8 $$ while (mat.find(rest_index)) [ FD ]
Line_2 $$ protected Map<String, PsiElement> configureByFileText(String fileText, final String fileName, @NonNls String markerRegexp) -->Line_18 $$ myFile = myFixture.addFileToProject(fileName, text.toString())[ CD ]
Line_2 $$ protected Map<String, PsiElement> configureByFileText(String fileText, final String fileName, @NonNls String markerRegexp) -->Line_23 $$ return result[ CD ]
Line_5 $$ int rest_index = 0-->Line_13 $$ rest_index = mat.end()[ FD ]
