Line_2 $$ public void populateParams(String friendlyURLPath, Map<String, String[]> parameterMap, Map<String, Object> requestContext) -->Line_10 $$ parameterMap.put("p_p_id", new String[] [ CD ]
Line_12 $$ if (hasBinaryExtension(friendlyURLPath)) -->Line_15 $$ parameterMap.put("p_p_state", new String[] [ CD ]
Line_2 $$ public void populateParams(String friendlyURLPath, Map<String, String[]> parameterMap, Map<String, Object> requestContext) -->Line_11 $$ parameterMap.put("p_p_lifecycle", new String[] [ FD ]
Line_2 $$ public void populateParams(String friendlyURLPath, Map<String, String[]> parameterMap, Map<String, Object> requestContext) -->Line_9 $$ String portletId = prefix + PortletConstants.WAR_SEPARATOR + prefix[ CD ]
Line_2 $$ public void populateParams(String friendlyURLPath, Map<String, String[]> parameterMap, Map<String, Object> requestContext) -->Line_8 $$ String prefix = friendlyURLPath.substring(x + _MAPPING.length() + 1, y)[ CD ]
Line_2 $$ public void populateParams(String friendlyURLPath, Map<String, String[]> parameterMap, Map<String, Object> requestContext) -->Line_8 $$ String prefix = friendlyURLPath.substring(x + _MAPPING.length() + 1, y)[ FD ]
Line_9 $$ String portletId = prefix + PortletConstants.WAR_SEPARATOR + prefix-->Line_18 $$ String namespace = PortalUtil.getPortletNamespace(portletId)[ FD ]
Line_2 $$ public void populateParams(String friendlyURLPath, Map<String, String[]> parameterMap, Map<String, Object> requestContext) -->Line_4 $$ int y = friendlyURLPath.indexOf(CharPool.SLASH, x + _MAPPING.length() + 1)[ CD ]
Line_5 $$ if (x == -1) -->Line_6 $$ return[ CD ]
Line_2 $$ public void populateParams(String friendlyURLPath, Map<String, String[]> parameterMap, Map<String, Object> requestContext) -->Line_19 $$ String path = friendlyURLPath.substring(y)[ CD ]
Line_2 $$ public void populateParams(String friendlyURLPath, Map<String, String[]> parameterMap, Map<String, Object> requestContext) -->Line_5 $$ if (x == -1) [ CD ]
Line_4 $$ int y = friendlyURLPath.indexOf(CharPool.SLASH, x + _MAPPING.length() + 1)-->Line_19 $$ String path = friendlyURLPath.substring(y)[ FD ]
Line_2 $$ public void populateParams(String friendlyURLPath, Map<String, String[]> parameterMap, Map<String, Object> requestContext) -->Line_3 $$ int x = friendlyURLPath.indexOf(_MAPPING)[ FD ]
Line_2 $$ public void populateParams(String friendlyURLPath, Map<String, String[]> parameterMap, Map<String, Object> requestContext) -->Line_12 $$ if (hasBinaryExtension(friendlyURLPath)) [ FD ]
Line_2 $$ public void populateParams(String friendlyURLPath, Map<String, String[]> parameterMap, Map<String, Object> requestContext) -->Line_17 $$ parameterMap.put("p_p_mode", new String[] [ CD ]
Line_2 $$ public void populateParams(String friendlyURLPath, Map<String, String[]> parameterMap, Map<String, Object> requestContext) -->Line_19 $$ String path = friendlyURLPath.substring(y)[ FD ]
Line_2 $$ public void populateParams(String friendlyURLPath, Map<String, String[]> parameterMap, Map<String, Object> requestContext) -->Line_3 $$ int x = friendlyURLPath.indexOf(_MAPPING)[ CD ]
Line_2 $$ public void populateParams(String friendlyURLPath, Map<String, String[]> parameterMap, Map<String, Object> requestContext) -->Line_4 $$ int y = friendlyURLPath.indexOf(CharPool.SLASH, x + _MAPPING.length() + 1)[ FD ]
Line_2 $$ public void populateParams(String friendlyURLPath, Map<String, String[]> parameterMap, Map<String, Object> requestContext) -->Line_20 $$ parameterMap.put(namespace + "appURL", new String[] [ CD ]
Line_12 $$ if (hasBinaryExtension(friendlyURLPath)) -->Line_13 $$ parameterMap.put("p_p_state", new String[] [ CD ]
Line_2 $$ public void populateParams(String friendlyURLPath, Map<String, String[]> parameterMap, Map<String, Object> requestContext) -->Line_18 $$ String namespace = PortalUtil.getPortletNamespace(portletId)[ CD ]
Line_2 $$ public void populateParams(String friendlyURLPath, Map<String, String[]> parameterMap, Map<String, Object> requestContext) -->Line_10 $$ parameterMap.put("p_p_id", new String[] [ FD ]
Line_2 $$ public void populateParams(String friendlyURLPath, Map<String, String[]> parameterMap, Map<String, Object> requestContext) -->Line_20 $$ parameterMap.put(namespace + "appURL", new String[] [ FD ]
Line_2 $$ public void populateParams(String friendlyURLPath, Map<String, String[]> parameterMap, Map<String, Object> requestContext) -->Line_15 $$ parameterMap.put("p_p_state", new String[] [ FD ]
Line_3 $$ int x = friendlyURLPath.indexOf(_MAPPING)-->Line_5 $$ if (x == -1) [ FD ]
Line_4 $$ int y = friendlyURLPath.indexOf(CharPool.SLASH, x + _MAPPING.length() + 1)-->Line_8 $$ String prefix = friendlyURLPath.substring(x + _MAPPING.length() + 1, y)[ FD ]
Line_2 $$ public void populateParams(String friendlyURLPath, Map<String, String[]> parameterMap, Map<String, Object> requestContext) -->Line_17 $$ parameterMap.put("p_p_mode", new String[] [ FD ]
Line_2 $$ public void populateParams(String friendlyURLPath, Map<String, String[]> parameterMap, Map<String, Object> requestContext) -->Line_11 $$ parameterMap.put("p_p_lifecycle", new String[] [ CD ]
Line_2 $$ public void populateParams(String friendlyURLPath, Map<String, String[]> parameterMap, Map<String, Object> requestContext) -->Line_12 $$ if (hasBinaryExtension(friendlyURLPath)) [ CD ]
Line_2 $$ public void populateParams(String friendlyURLPath, Map<String, String[]> parameterMap, Map<String, Object> requestContext) -->Line_13 $$ parameterMap.put("p_p_state", new String[] [ FD ]
