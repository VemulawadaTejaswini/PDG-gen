Line_2 $$ public Tuple serviceUnlock(String path, String lock) -->Line_4 $$ if (Validator.isNotNull(lock)) [ FD ]
Line_3 $$ Map<String, String> headers = null-->Line_8 $$ return service(Method.UNLOCK, path, headers, null)[ FD ]
Line_3 $$ Map<String, String> headers = null-->Line_5 $$ headers = new HashMap()[ FD ]
Line_5 $$ headers = new HashMap()-->Line_6 $$ headers.put("Lock-Token", "<opaquelocktoken:" + lock + ">")[ FD ]
Line_2 $$ public Tuple serviceUnlock(String path, String lock) -->Line_4 $$ if (Validator.isNotNull(lock)) [ CD ]
Line_2 $$ public Tuple serviceUnlock(String path, String lock) -->Line_8 $$ return service(Method.UNLOCK, path, headers, null)[ FD ]
Line_5 $$ headers = new HashMap()-->Line_8 $$ return service(Method.UNLOCK, path, headers, null)[ FD ]
Line_2 $$ public Tuple serviceUnlock(String path, String lock) -->Line_3 $$ Map<String, String> headers = null[ CD ]
Line_2 $$ public Tuple serviceUnlock(String path, String lock) -->Line_8 $$ return service(Method.UNLOCK, path, headers, null)[ CD ]
Line_4 $$ if (Validator.isNotNull(lock)) -->Line_5 $$ headers = new HashMap()[ CD ]
Line_3 $$ Map<String, String> headers = null-->Line_6 $$ headers.put("Lock-Token", "<opaquelocktoken:" + lock + ">")[ FD ]
Line_4 $$ if (Validator.isNotNull(lock)) -->Line_6 $$ headers.put("Lock-Token", "<opaquelocktoken:" + lock + ">")[ CD ]
