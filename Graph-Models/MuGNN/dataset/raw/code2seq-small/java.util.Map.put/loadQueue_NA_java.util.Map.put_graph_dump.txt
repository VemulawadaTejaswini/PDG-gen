Line_3 $$ String queueName = element.getAttribute("name")-->Line_65 $$ LOG.warn(String.format("Queue %s has max resources %s less than min resources %s", queueName, maxQueueResources.get(queueName), minQueueResources.get(queueName)))[ FD ]
Line_14 $$ Element field = (Element) fieldNode-->Line_23 $$ if ("maxRunningApps".equals(field.getTagName())) [ FD ]
Line_2 $$ private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues) throws AllocationConfigurationException -->Line_58 $$ configuredQueues.get(FSQueueType.PARENT).add(queueName)[ FD ]
Line_47 $$ if ("aclAdministerApps".equals(field.getTagName())) -->Line_50 $$ if ("queue".endsWith(field.getTagName()) || "pool".equals(field.getTagName())) [ CD ]
Line_3 $$ String queueName = element.getAttribute("name")-->Line_64 $$ if (maxQueueResources.containsKey(queueName) && minQueueResources.containsKey(queueName) && !Resources.fitsIn(minQueueResources.get(queueName), maxQueueResources.get(queueName))) [ FD ]
Line_14 $$ Element field = (Element) fieldNode-->Line_36 $$ if ("minSharePreemptionTimeout".equals(field.getTagName())) [ FD ]
Line_50 $$ if ("queue".endsWith(field.getTagName()) || "pool".equals(field.getTagName())) -->Line_51 $$ loadQueue(queueName, field, minQueueResources, maxQueueResources, queueMaxApps, userMaxApps, queueMaxAMShares, queueWeights, queuePolicies, minSharePreemptionTimeouts, queueAcls, configuredQueues)[ CD ]
Line_2 $$ private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues) throws AllocationConfigurationException -->Line_31 $$ queueMaxAMShares.put(queueName, val)[ FD ]
Line_4 $$ if (parentName != null) -->Line_5 $$ queueName = parentName + "." + queueName[ CD ]
Line_16 $$ String text = ((Text) field.getFirstChild()).getData().trim()-->Line_17 $$ Resource val = FairSchedulerConfiguration.parseResourceConfigValue(text)[ FD ]
Line_14 $$ Element field = (Element) fieldNode-->Line_19 $$ if ("maxResources".equals(field.getTagName())) [ FD ]
Line_23 $$ if ("maxRunningApps".equals(field.getTagName())) -->Line_26 $$ queueMaxApps.put(queueName, val)[ CD ]
Line_30 $$ val = Math.min(val, 1.0f)-->Line_39 $$ minSharePreemptionTimeouts.put(queueName, val)[ FD ]
Line_3 $$ String queueName = element.getAttribute("name")-->Line_18 $$ minQueueResources.put(queueName, val)[ FD ]
Line_3 $$ String queueName = element.getAttribute("name")-->Line_31 $$ queueMaxAMShares.put(queueName, val)[ FD ]
Line_19 $$ if ("maxResources".equals(field.getTagName())) -->Line_21 $$ Resource val = FairSchedulerConfiguration.parseResourceConfigValue(text)[ CD ]
Line_27 $$ if ("maxAMShare".equals(field.getTagName())) -->Line_28 $$ String text = ((Text) field.getFirstChild()).getData().trim()[ CD ]
Line_14 $$ Element field = (Element) fieldNode-->Line_40 $$ if ("schedulingPolicy".equals(field.getTagName()) || "schedulingMode".equals(field.getTagName())) [ FD ]
Line_14 $$ Element field = (Element) fieldNode-->Line_51 $$ loadQueue(queueName, field, minQueueResources, maxQueueResources, queueMaxApps, userMaxApps, queueMaxAMShares, queueWeights, queuePolicies, minSharePreemptionTimeouts, queueAcls, configuredQueues)[ FD ]
Line_30 $$ val = Math.min(val, 1.0f)-->Line_26 $$ queueMaxApps.put(queueName, val)[ FD ]
Line_14 $$ Element field = (Element) fieldNode-->Line_50 $$ if ("queue".endsWith(field.getTagName()) || "pool".equals(field.getTagName())) [ FD ]
Line_40 $$ if ("schedulingPolicy".equals(field.getTagName()) || "schedulingMode".equals(field.getTagName())) -->Line_41 $$ String text = ((Text) field.getFirstChild()).getData().trim()[ CD ]
Line_3 $$ String queueName = element.getAttribute("name")-->Line_35 $$ queueWeights.put(queueName, new ResourceWeights((float) val))[ FD ]
Line_2 $$ private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues) throws AllocationConfigurationException -->Line_63 $$ queueAcls.put(queueName, acls)[ FD ]
Line_27 $$ if ("maxAMShare".equals(field.getTagName())) -->Line_32 $$ if ("weight".equals(field.getTagName())) [ CD ]
Line_19 $$ if ("maxResources".equals(field.getTagName())) -->Line_23 $$ if ("maxRunningApps".equals(field.getTagName())) [ CD ]
Line_30 $$ val = Math.min(val, 1.0f)-->Line_31 $$ queueMaxAMShares.put(queueName, val)[ FD ]
Line_2 $$ private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues) throws AllocationConfigurationException -->Line_60 $$ configuredQueues.get(FSQueueType.LEAF).add(queueName)[ FD ]
Line_17 $$ Resource val = FairSchedulerConfiguration.parseResourceConfigValue(text)-->Line_18 $$ minQueueResources.put(queueName, val)[ FD ]
Line_10 $$ for (int j = 0; j < fields.getLength(); j++) -->Line_11 $$ Node fieldNode = fields.item(j)[ FD ]
Line_17 $$ Resource val = FairSchedulerConfiguration.parseResourceConfigValue(text)-->Line_39 $$ minSharePreemptionTimeouts.put(queueName, val)[ FD ]
Line_7 $$ Map<QueueACL, AccessControlList> acls = new HashMap<QueueACL, AccessControlList>()-->Line_63 $$ queueAcls.put(queueName, acls)[ FD ]
Line_2 $$ private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues) throws AllocationConfigurationException -->Line_3 $$ String queueName = element.getAttribute("name")[ CD ]
Line_15 $$ if ("minResources".equals(field.getTagName())) -->Line_17 $$ Resource val = FairSchedulerConfiguration.parseResourceConfigValue(text)[ CD ]
Line_2 $$ private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues) throws AllocationConfigurationException -->Line_52 $$ configuredQueues.get(FSQueueType.PARENT).add(queueName)[ FD ]
Line_2 $$ private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues) throws AllocationConfigurationException -->Line_63 $$ queueAcls.put(queueName, acls)[ CD ]
Line_5 $$ queueName = parentName + "." + queueName-->Line_22 $$ maxQueueResources.put(queueName, val)[ FD ]
Line_14 $$ Element field = (Element) fieldNode-->Line_32 $$ if ("weight".equals(field.getTagName())) [ FD ]
Line_8 $$ NodeList fields = element.getChildNodes()-->Line_10 $$ for (int j = 0; j < fields.getLength(); j++) [ FD ]
Line_36 $$ if ("minSharePreemptionTimeout".equals(field.getTagName())) -->Line_40 $$ if ("schedulingPolicy".equals(field.getTagName()) || "schedulingMode".equals(field.getTagName())) [ CD ]
Line_5 $$ queueName = parentName + "." + queueName-->Line_64 $$ if (maxQueueResources.containsKey(queueName) && minQueueResources.containsKey(queueName) && !Resources.fitsIn(minQueueResources.get(queueName), maxQueueResources.get(queueName))) [ FD ]
Line_40 $$ if ("schedulingPolicy".equals(field.getTagName()) || "schedulingMode".equals(field.getTagName())) -->Line_42 $$ SchedulingPolicy policy = SchedulingPolicy.parse(text)[ CD ]
Line_2 $$ private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues) throws AllocationConfigurationException -->Line_26 $$ queueMaxApps.put(queueName, val)[ FD ]
Line_57 $$ if ("parent".equals(element.getAttribute("type"))) -->Line_60 $$ configuredQueues.get(FSQueueType.LEAF).add(queueName)[ CD ]
Line_2 $$ private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues) throws AllocationConfigurationException -->Line_3 $$ String queueName = element.getAttribute("name")[ FD ]
Line_9 $$ boolean isLeaf = true-->Line_53 $$ isLeaf = false[ FD ]
Line_5 $$ queueName = parentName + "." + queueName-->Line_31 $$ queueMaxAMShares.put(queueName, val)[ FD ]
Line_10 $$ for (int j = 0; j < fields.getLength(); j++) -->Line_14 $$ Element field = (Element) fieldNode[ CD ]
Line_14 $$ Element field = (Element) fieldNode-->Line_37 $$ String text = ((Text) field.getFirstChild()).getData().trim()[ FD ]
Line_2 $$ private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues) throws AllocationConfigurationException -->Line_56 $$ if (isLeaf) [ CD ]
Line_2 $$ private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues) throws AllocationConfigurationException -->Line_51 $$ loadQueue(queueName, field, minQueueResources, maxQueueResources, queueMaxApps, userMaxApps, queueMaxAMShares, queueWeights, queuePolicies, minSharePreemptionTimeouts, queueAcls, configuredQueues)[ FD ]
Line_5 $$ queueName = parentName + "." + queueName-->Line_43 $$ queuePolicies.put(queueName, policy)[ FD ]
Line_14 $$ Element field = (Element) fieldNode-->Line_48 $$ String text = ((Text) field.getFirstChild()).getData()[ FD ]
Line_2 $$ private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues) throws AllocationConfigurationException -->Line_64 $$ if (maxQueueResources.containsKey(queueName) && minQueueResources.containsKey(queueName) && !Resources.fitsIn(minQueueResources.get(queueName), maxQueueResources.get(queueName))) [ CD ]
Line_16 $$ String text = ((Text) field.getFirstChild()).getData().trim()-->Line_21 $$ Resource val = FairSchedulerConfiguration.parseResourceConfigValue(text)[ FD ]
Line_5 $$ queueName = parentName + "." + queueName-->Line_63 $$ queueAcls.put(queueName, acls)[ FD ]
Line_14 $$ Element field = (Element) fieldNode-->Line_33 $$ String text = ((Text) field.getFirstChild()).getData().trim()[ FD ]
Line_15 $$ if ("minResources".equals(field.getTagName())) -->Line_18 $$ minQueueResources.put(queueName, val)[ CD ]
Line_16 $$ String text = ((Text) field.getFirstChild()).getData().trim()-->Line_38 $$ long val = Long.parseLong(text) * 1000L[ FD ]
Line_14 $$ Element field = (Element) fieldNode-->Line_15 $$ if ("minResources".equals(field.getTagName())) [ FD ]
Line_23 $$ if ("maxRunningApps".equals(field.getTagName())) -->Line_25 $$ int val = Integer.parseInt(text)[ CD ]
Line_2 $$ private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues) throws AllocationConfigurationException -->Line_64 $$ if (maxQueueResources.containsKey(queueName) && minQueueResources.containsKey(queueName) && !Resources.fitsIn(minQueueResources.get(queueName), maxQueueResources.get(queueName))) [ FD ]
Line_5 $$ queueName = parentName + "." + queueName-->Line_51 $$ loadQueue(queueName, field, minQueueResources, maxQueueResources, queueMaxApps, userMaxApps, queueMaxAMShares, queueWeights, queuePolicies, minSharePreemptionTimeouts, queueAcls, configuredQueues)[ FD ]
Line_56 $$ if (isLeaf) -->Line_57 $$ if ("parent".equals(element.getAttribute("type"))) [ CD ]
Line_36 $$ if ("minSharePreemptionTimeout".equals(field.getTagName())) -->Line_37 $$ String text = ((Text) field.getFirstChild()).getData().trim()[ CD ]
Line_17 $$ Resource val = FairSchedulerConfiguration.parseResourceConfigValue(text)-->Line_30 $$ val = Math.min(val, 1.0f)[ FD ]
Line_19 $$ if ("maxResources".equals(field.getTagName())) -->Line_22 $$ maxQueueResources.put(queueName, val)[ CD ]
Line_27 $$ if ("maxAMShare".equals(field.getTagName())) -->Line_29 $$ float val = Float.parseFloat(text)[ CD ]
Line_5 $$ queueName = parentName + "." + queueName-->Line_58 $$ configuredQueues.get(FSQueueType.PARENT).add(queueName)[ FD ]
Line_7 $$ Map<QueueACL, AccessControlList> acls = new HashMap<QueueACL, AccessControlList>()-->Line_46 $$ acls.put(QueueACL.SUBMIT_APPLICATIONS, new AccessControlList(text))[ FD ]
Line_14 $$ Element field = (Element) fieldNode-->Line_20 $$ String text = ((Text) field.getFirstChild()).getData().trim()[ FD ]
Line_8 $$ NodeList fields = element.getChildNodes()-->Line_11 $$ Node fieldNode = fields.item(j)[ FD ]
Line_19 $$ if ("maxResources".equals(field.getTagName())) -->Line_20 $$ String text = ((Text) field.getFirstChild()).getData().trim()[ CD ]
Line_23 $$ if ("maxRunningApps".equals(field.getTagName())) -->Line_24 $$ String text = ((Text) field.getFirstChild()).getData().trim()[ CD ]
Line_2 $$ private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues) throws AllocationConfigurationException -->Line_8 $$ NodeList fields = element.getChildNodes()[ CD ]
Line_16 $$ String text = ((Text) field.getFirstChild()).getData().trim()-->Line_25 $$ int val = Integer.parseInt(text)[ FD ]
Line_17 $$ Resource val = FairSchedulerConfiguration.parseResourceConfigValue(text)-->Line_22 $$ maxQueueResources.put(queueName, val)[ FD ]
Line_47 $$ if ("aclAdministerApps".equals(field.getTagName())) -->Line_48 $$ String text = ((Text) field.getFirstChild()).getData()[ CD ]
Line_5 $$ queueName = parentName + "." + queueName-->Line_60 $$ configuredQueues.get(FSQueueType.LEAF).add(queueName)[ FD ]
Line_17 $$ Resource val = FairSchedulerConfiguration.parseResourceConfigValue(text)-->Line_26 $$ queueMaxApps.put(queueName, val)[ FD ]
Line_17 $$ Resource val = FairSchedulerConfiguration.parseResourceConfigValue(text)-->Line_31 $$ queueMaxAMShares.put(queueName, val)[ FD ]
Line_30 $$ val = Math.min(val, 1.0f)-->Line_22 $$ maxQueueResources.put(queueName, val)[ FD ]
Line_32 $$ if ("weight".equals(field.getTagName())) -->Line_33 $$ String text = ((Text) field.getFirstChild()).getData().trim()[ CD ]
Line_5 $$ queueName = parentName + "." + queueName-->Line_39 $$ minSharePreemptionTimeouts.put(queueName, val)[ FD ]
Line_3 $$ String queueName = element.getAttribute("name")-->Line_60 $$ configuredQueues.get(FSQueueType.LEAF).add(queueName)[ FD ]
Line_2 $$ private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues) throws AllocationConfigurationException -->Line_18 $$ minQueueResources.put(queueName, val)[ FD ]
Line_15 $$ if ("minResources".equals(field.getTagName())) -->Line_19 $$ if ("maxResources".equals(field.getTagName())) [ CD ]
Line_2 $$ private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues) throws AllocationConfigurationException -->Line_43 $$ queuePolicies.put(queueName, policy)[ FD ]
Line_3 $$ String queueName = element.getAttribute("name")-->Line_22 $$ maxQueueResources.put(queueName, val)[ FD ]
Line_2 $$ private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues) throws AllocationConfigurationException -->Line_10 $$ for (int j = 0; j < fields.getLength(); j++) [ CD ]
Line_44 $$ if ("aclSubmitApps".equals(field.getTagName())) -->Line_45 $$ String text = ((Text) field.getFirstChild()).getData()[ CD ]
Line_14 $$ Element field = (Element) fieldNode-->Line_16 $$ String text = ((Text) field.getFirstChild()).getData().trim()[ FD ]
Line_3 $$ String queueName = element.getAttribute("name")-->Line_5 $$ queueName = parentName + "." + queueName[ FD ]
Line_32 $$ if ("weight".equals(field.getTagName())) -->Line_35 $$ queueWeights.put(queueName, new ResourceWeights((float) val))[ CD ]
Line_14 $$ Element field = (Element) fieldNode-->Line_44 $$ if ("aclSubmitApps".equals(field.getTagName())) [ FD ]
Line_14 $$ Element field = (Element) fieldNode-->Line_28 $$ String text = ((Text) field.getFirstChild()).getData().trim()[ FD ]
Line_16 $$ String text = ((Text) field.getFirstChild()).getData().trim()-->Line_42 $$ SchedulingPolicy policy = SchedulingPolicy.parse(text)[ FD ]
Line_30 $$ val = Math.min(val, 1.0f)-->Line_18 $$ minQueueResources.put(queueName, val)[ FD ]
Line_2 $$ private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues) throws AllocationConfigurationException -->Line_65 $$ LOG.warn(String.format("Queue %s has max resources %s less than min resources %s", queueName, maxQueueResources.get(queueName), minQueueResources.get(queueName)))[ FD ]
Line_3 $$ String queueName = element.getAttribute("name")-->Line_52 $$ configuredQueues.get(FSQueueType.PARENT).add(queueName)[ FD ]
Line_14 $$ Element field = (Element) fieldNode-->Line_45 $$ String text = ((Text) field.getFirstChild()).getData()[ FD ]
Line_14 $$ Element field = (Element) fieldNode-->Line_27 $$ if ("maxAMShare".equals(field.getTagName())) [ FD ]
Line_14 $$ Element field = (Element) fieldNode-->Line_41 $$ String text = ((Text) field.getFirstChild()).getData().trim()[ FD ]
Line_2 $$ private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues) throws AllocationConfigurationException -->Line_9 $$ boolean isLeaf = true[ CD ]
Line_10 $$ for (int j = 0; j < fields.getLength(); j++) -->Line_11 $$ Node fieldNode = fields.item(j)[ CD ]
Line_32 $$ if ("weight".equals(field.getTagName())) -->Line_36 $$ if ("minSharePreemptionTimeout".equals(field.getTagName())) [ CD ]
Line_2 $$ private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues) throws AllocationConfigurationException -->Line_57 $$ if ("parent".equals(element.getAttribute("type"))) [ FD ]
Line_2 $$ private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues) throws AllocationConfigurationException -->Line_7 $$ Map<QueueACL, AccessControlList> acls = new HashMap<QueueACL, AccessControlList>()[ CD ]
Line_14 $$ Element field = (Element) fieldNode-->Line_47 $$ if ("aclAdministerApps".equals(field.getTagName())) [ FD ]
Line_3 $$ String queueName = element.getAttribute("name")-->Line_26 $$ queueMaxApps.put(queueName, val)[ FD ]
Line_5 $$ queueName = parentName + "." + queueName-->Line_35 $$ queueWeights.put(queueName, new ResourceWeights((float) val))[ FD ]
Line_3 $$ String queueName = element.getAttribute("name")-->Line_43 $$ queuePolicies.put(queueName, policy)[ FD ]
Line_2 $$ private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues) throws AllocationConfigurationException -->Line_4 $$ if (parentName != null) [ CD ]
Line_50 $$ if ("queue".endsWith(field.getTagName()) || "pool".equals(field.getTagName())) -->Line_52 $$ configuredQueues.get(FSQueueType.PARENT).add(queueName)[ CD ]
Line_50 $$ if ("queue".endsWith(field.getTagName()) || "pool".equals(field.getTagName())) -->Line_53 $$ isLeaf = false[ CD ]
Line_14 $$ Element field = (Element) fieldNode-->Line_24 $$ String text = ((Text) field.getFirstChild()).getData().trim()[ FD ]
Line_5 $$ queueName = parentName + "." + queueName-->Line_52 $$ configuredQueues.get(FSQueueType.PARENT).add(queueName)[ FD ]
Line_57 $$ if ("parent".equals(element.getAttribute("type"))) -->Line_58 $$ configuredQueues.get(FSQueueType.PARENT).add(queueName)[ CD ]
Line_10 $$ for (int j = 0; j < fields.getLength(); j++) -->Line_15 $$ if ("minResources".equals(field.getTagName())) [ CD ]
Line_7 $$ Map<QueueACL, AccessControlList> acls = new HashMap<QueueACL, AccessControlList>()-->Line_49 $$ acls.put(QueueACL.ADMINISTER_QUEUE, new AccessControlList(text))[ FD ]
Line_2 $$ private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues) throws AllocationConfigurationException -->Line_4 $$ if (parentName != null) [ FD ]
Line_3 $$ String queueName = element.getAttribute("name")-->Line_63 $$ queueAcls.put(queueName, acls)[ FD ]
Line_15 $$ if ("minResources".equals(field.getTagName())) -->Line_16 $$ String text = ((Text) field.getFirstChild()).getData().trim()[ CD ]
Line_23 $$ if ("maxRunningApps".equals(field.getTagName())) -->Line_27 $$ if ("maxAMShare".equals(field.getTagName())) [ CD ]
Line_2 $$ private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues) throws AllocationConfigurationException -->Line_39 $$ minSharePreemptionTimeouts.put(queueName, val)[ FD ]
Line_44 $$ if ("aclSubmitApps".equals(field.getTagName())) -->Line_47 $$ if ("aclAdministerApps".equals(field.getTagName())) [ CD ]
Line_3 $$ String queueName = element.getAttribute("name")-->Line_58 $$ configuredQueues.get(FSQueueType.PARENT).add(queueName)[ FD ]
Line_44 $$ if ("aclSubmitApps".equals(field.getTagName())) -->Line_46 $$ acls.put(QueueACL.SUBMIT_APPLICATIONS, new AccessControlList(text))[ CD ]
Line_36 $$ if ("minSharePreemptionTimeout".equals(field.getTagName())) -->Line_39 $$ minSharePreemptionTimeouts.put(queueName, val)[ CD ]
Line_5 $$ queueName = parentName + "." + queueName-->Line_65 $$ LOG.warn(String.format("Queue %s has max resources %s less than min resources %s", queueName, maxQueueResources.get(queueName), minQueueResources.get(queueName)))[ FD ]
Line_10 $$ for (int j = 0; j < fields.getLength(); j++) -->Line_12 $$ if (!(fieldNode instanceof Element))[ CD ]
Line_27 $$ if ("maxAMShare".equals(field.getTagName())) -->Line_30 $$ val = Math.min(val, 1.0f)[ CD ]
Line_16 $$ String text = ((Text) field.getFirstChild()).getData().trim()-->Line_34 $$ double val = Double.parseDouble(text)[ FD ]
Line_47 $$ if ("aclAdministerApps".equals(field.getTagName())) -->Line_49 $$ acls.put(QueueACL.ADMINISTER_QUEUE, new AccessControlList(text))[ CD ]
Line_3 $$ String queueName = element.getAttribute("name")-->Line_39 $$ minSharePreemptionTimeouts.put(queueName, val)[ FD ]
Line_3 $$ String queueName = element.getAttribute("name")-->Line_51 $$ loadQueue(queueName, field, minQueueResources, maxQueueResources, queueMaxApps, userMaxApps, queueMaxAMShares, queueWeights, queuePolicies, minSharePreemptionTimeouts, queueAcls, configuredQueues)[ FD ]
Line_40 $$ if ("schedulingPolicy".equals(field.getTagName()) || "schedulingMode".equals(field.getTagName())) -->Line_43 $$ queuePolicies.put(queueName, policy)[ CD ]
Line_5 $$ queueName = parentName + "." + queueName-->Line_18 $$ minQueueResources.put(queueName, val)[ FD ]
Line_64 $$ if (maxQueueResources.containsKey(queueName) && minQueueResources.containsKey(queueName) && !Resources.fitsIn(minQueueResources.get(queueName), maxQueueResources.get(queueName))) -->Line_65 $$ LOG.warn(String.format("Queue %s has max resources %s less than min resources %s", queueName, maxQueueResources.get(queueName), minQueueResources.get(queueName)))[ CD ]
Line_32 $$ if ("weight".equals(field.getTagName())) -->Line_34 $$ double val = Double.parseDouble(text)[ CD ]
Line_16 $$ String text = ((Text) field.getFirstChild()).getData().trim()-->Line_29 $$ float val = Float.parseFloat(text)[ FD ]
Line_40 $$ if ("schedulingPolicy".equals(field.getTagName()) || "schedulingMode".equals(field.getTagName())) -->Line_44 $$ if ("aclSubmitApps".equals(field.getTagName())) [ CD ]
Line_42 $$ SchedulingPolicy policy = SchedulingPolicy.parse(text)-->Line_43 $$ queuePolicies.put(queueName, policy)[ FD ]
Line_5 $$ queueName = parentName + "." + queueName-->Line_26 $$ queueMaxApps.put(queueName, val)[ FD ]
Line_27 $$ if ("maxAMShare".equals(field.getTagName())) -->Line_31 $$ queueMaxAMShares.put(queueName, val)[ CD ]
Line_2 $$ private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues) throws AllocationConfigurationException -->Line_35 $$ queueWeights.put(queueName, new ResourceWeights((float) val))[ FD ]
Line_2 $$ private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues) throws AllocationConfigurationException -->Line_8 $$ NodeList fields = element.getChildNodes()[ FD ]
Line_2 $$ private void loadQueue(String parentName, Element element, Map<String, Resource> minQueueResources, Map<String, Resource> maxQueueResources, Map<String, Integer> queueMaxApps, Map<String, Integer> userMaxApps, Map<String, Float> queueMaxAMShares, Map<String, ResourceWeights> queueWeights, Map<String, SchedulingPolicy> queuePolicies, Map<String, Long> minSharePreemptionTimeouts, Map<String, Map<QueueACL, AccessControlList>> queueAcls, Map<FSQueueType, Set<String>> configuredQueues) throws AllocationConfigurationException -->Line_22 $$ maxQueueResources.put(queueName, val)[ FD ]
