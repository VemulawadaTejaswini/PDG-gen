Line_14 $$ String locValue = getLocation().getStringValue()-->Line_20 $$ locValue = PathUtil.getCanonicalPath(new File(baseDir, locValue).getPath())[ FD ]
Line_11 $$ if (propertyValue != null) -->Line_12 $$ result = Collections.singletonMap(propertyName, propertyValue)[ CD ]
Line_39 $$ if (getEnvironment().getRawText() != null) -->Line_40 $$ String prefix = getEnvironment().getRawText()[ CD ]
Line_3 $$ Map<String, String> result = myCachedProperties-->Line_26 $$ result = Collections.singletonMap(propertyName, tagText)[ FD ]
Line_41 $$ if (!prefix.endsWith(".")) -->Line_42 $$ prefix += "."[ CD ]
Line_11 $$ if (propertyValue != null) -->Line_15 $$ if (locValue != null) [ CD ]
Line_2 $$ private Map<String, String> buildProperties() -->Line_8 $$ final String propertyName = getName().getRawText()[ CD ]
Line_12 $$ result = Collections.singletonMap(propertyName, propertyValue)-->Line_57 $$ result = new HashMap<String, String>()[ FD ]
Line_57 $$ result = new HashMap<String, String>()-->Line_59 $$ result.put(property.getUnescapedKey(), property.getUnescapedValue())[ FD ]
Line_15 $$ if (locValue != null) -->Line_26 $$ result = Collections.singletonMap(propertyName, tagText)[ CD ]
Line_40 $$ String prefix = getEnvironment().getRawText()-->Line_42 $$ prefix += "."[ FD ]
Line_44 $$ result = new HashMap<String, String>()-->Line_46 $$ result.put(prefix + entry.getKey(), entry.getValue())[ FD ]
Line_23 $$ result = Collections.singletonMap(propertyName, FileUtil.toSystemDependentName(locValue))-->Line_34 $$ result = new HashMap<String, String>()[ FD ]
Line_31 $$ if (psiFile != null) -->Line_33 $$ if (file != null) [ CD ]
Line_2 $$ private Map<String, String> buildProperties() -->Line_7 $$ result = Collections.emptyMap()[ CD ]
Line_10 $$ final String propertyValue = getValue().getRawText()-->Line_11 $$ if (propertyValue != null) [ FD ]
Line_51 $$ final ClassLoader loader = getClassLoader()-->Line_53 $$ final InputStream stream = loader.getResourceAsStream(resource)[ FD ]
Line_7 $$ result = Collections.emptyMap()-->Line_59 $$ result.put(property.getUnescapedKey(), property.getUnescapedValue())[ FD ]
Line_49 $$ final String resource = getResource().getStringValue()-->Line_50 $$ if (resource != null) [ FD ]
Line_50 $$ if (resource != null) -->Line_52 $$ if (loader != null) [ CD ]
Line_3 $$ Map<String, String> result = myCachedProperties-->Line_36 $$ result.put(property.getUnescapedKey(), property.getUnescapedValue())[ FD ]
Line_10 $$ final String propertyValue = getValue().getRawText()-->Line_12 $$ result = Collections.singletonMap(propertyName, propertyValue)[ FD ]
Line_7 $$ result = Collections.emptyMap()-->Line_23 $$ result = Collections.singletonMap(propertyName, FileUtil.toSystemDependentName(locValue))[ FD ]
Line_16 $$ final File file = new File(locValue)-->Line_33 $$ if (file != null) [ FD ]
Line_3 $$ Map<String, String> result = myCachedProperties-->Line_44 $$ result = new HashMap<String, String>()[ FD ]
Line_26 $$ result = Collections.singletonMap(propertyName, tagText)-->Line_36 $$ result.put(property.getUnescapedKey(), property.getUnescapedValue())[ FD ]
Line_3 $$ Map<String, String> result = myCachedProperties-->Line_4 $$ if (result != null) [ FD ]
Line_23 $$ result = Collections.singletonMap(propertyName, FileUtil.toSystemDependentName(locValue))-->Line_26 $$ result = Collections.singletonMap(propertyName, tagText)[ FD ]
Line_8 $$ final String propertyName = getName().getRawText()-->Line_9 $$ if (propertyName != null) [ FD ]
Line_8 $$ final String propertyName = getName().getRawText()-->Line_12 $$ result = Collections.singletonMap(propertyName, propertyValue)[ FD ]
Line_25 $$ final String tagText = getXmlTag().getText()-->Line_26 $$ result = Collections.singletonMap(propertyName, tagText)[ FD ]
Line_34 $$ result = new HashMap<String, String>()-->Line_46 $$ result.put(prefix + entry.getKey(), entry.getValue())[ FD ]
Line_3 $$ Map<String, String> result = myCachedProperties-->Line_23 $$ result = Collections.singletonMap(propertyName, FileUtil.toSystemDependentName(locValue))[ FD ]
Line_39 $$ if (getEnvironment().getRawText() != null) -->Line_49 $$ final String resource = getResource().getStringValue()[ CD ]
Line_9 $$ if (propertyName != null) -->Line_11 $$ if (propertyValue != null) [ CD ]
Line_23 $$ result = Collections.singletonMap(propertyName, FileUtil.toSystemDependentName(locValue))-->Line_57 $$ result = new HashMap<String, String>()[ FD ]
Line_49 $$ final String resource = getResource().getStringValue()-->Line_53 $$ final InputStream stream = loader.getResourceAsStream(resource)[ FD ]
Line_19 $$ if (baseDir != null) -->Line_20 $$ locValue = PathUtil.getCanonicalPath(new File(baseDir, locValue).getPath())[ CD ]
Line_26 $$ result = Collections.singletonMap(propertyName, tagText)-->Line_46 $$ result.put(prefix + entry.getKey(), entry.getValue())[ FD ]
Line_31 $$ if (psiFile != null) -->Line_39 $$ if (getEnvironment().getRawText() != null) [ CD ]
Line_2 $$ private Map<String, String> buildProperties() -->Line_68 $$ return (myCachedProperties = result)[ CD ]
Line_3 $$ Map<String, String> result = myCachedProperties-->Line_59 $$ result.put(property.getUnescapedKey(), property.getUnescapedValue())[ FD ]
Line_7 $$ result = Collections.emptyMap()-->Line_36 $$ result.put(property.getUnescapedKey(), property.getUnescapedValue())[ FD ]
Line_11 $$ if (propertyValue != null) -->Line_14 $$ String locValue = getLocation().getStringValue()[ CD ]
Line_9 $$ if (propertyName != null) -->Line_31 $$ if (psiFile != null) [ CD ]
Line_16 $$ final File file = new File(locValue)-->Line_17 $$ if (!file.isAbsolute()) [ FD ]
Line_23 $$ result = Collections.singletonMap(propertyName, FileUtil.toSystemDependentName(locValue))-->Line_59 $$ result.put(property.getUnescapedKey(), property.getUnescapedValue())[ FD ]
Line_14 $$ String locValue = getLocation().getStringValue()-->Line_23 $$ result = Collections.singletonMap(propertyName, FileUtil.toSystemDependentName(locValue))[ FD ]
Line_12 $$ result = Collections.singletonMap(propertyName, propertyValue)-->Line_46 $$ result.put(prefix + entry.getKey(), entry.getValue())[ FD ]
Line_56 $$ final PropertiesFile propFile = (PropertiesFile) CustomAntElementsRegistry.loadContentAsFile(getXmlTag().getProject(), stream, StdFileTypes.PROPERTIES)-->Line_58 $$ for (final IProperty property : propFile.getProperties()) [ FD ]
Line_7 $$ result = Collections.emptyMap()-->Line_26 $$ result = Collections.singletonMap(propertyName, tagText)[ FD ]
Line_45 $$ for (Map.Entry<String, String> entry : System.getenv().entrySet()) -->Line_46 $$ result.put(prefix + entry.getKey(), entry.getValue())[ FD ]
Line_23 $$ result = Collections.singletonMap(propertyName, FileUtil.toSystemDependentName(locValue))-->Line_44 $$ result = new HashMap<String, String>()[ FD ]
Line_44 $$ result = new HashMap<String, String>()-->Line_59 $$ result.put(property.getUnescapedKey(), property.getUnescapedValue())[ FD ]
Line_12 $$ result = Collections.singletonMap(propertyName, propertyValue)-->Line_34 $$ result = new HashMap<String, String>()[ FD ]
Line_34 $$ result = new HashMap<String, String>()-->Line_36 $$ result.put(property.getUnescapedKey(), property.getUnescapedValue())[ FD ]
Line_2 $$ private Map<String, String> buildProperties() -->Line_4 $$ if (result != null) [ CD ]
Line_15 $$ if (locValue != null) -->Line_25 $$ final String tagText = getXmlTag().getText()[ CD ]
Line_39 $$ if (getEnvironment().getRawText() != null) -->Line_50 $$ if (resource != null) [ CD ]
Line_18 $$ final String baseDir = getContextAntProject().getProjectBasedirPath()-->Line_19 $$ if (baseDir != null) [ FD ]
Line_12 $$ result = Collections.singletonMap(propertyName, propertyValue)-->Line_23 $$ result = Collections.singletonMap(propertyName, FileUtil.toSystemDependentName(locValue))[ FD ]
Line_12 $$ result = Collections.singletonMap(propertyName, propertyValue)-->Line_36 $$ result.put(property.getUnescapedKey(), property.getUnescapedValue())[ FD ]
Line_23 $$ result = Collections.singletonMap(propertyName, FileUtil.toSystemDependentName(locValue))-->Line_46 $$ result.put(prefix + entry.getKey(), entry.getValue())[ FD ]
Line_34 $$ result = new HashMap<String, String>()-->Line_44 $$ result = new HashMap<String, String>()[ FD ]
Line_31 $$ if (psiFile != null) -->Line_32 $$ final PropertiesFile file = toPropertiesFile(psiFile)[ CD ]
Line_20 $$ locValue = PathUtil.getCanonicalPath(new File(baseDir, locValue).getPath())-->Line_23 $$ result = Collections.singletonMap(propertyName, FileUtil.toSystemDependentName(locValue))[ FD ]
Line_4 $$ if (result != null) -->Line_5 $$ return result[ CD ]
Line_8 $$ final String propertyName = getName().getRawText()-->Line_23 $$ result = Collections.singletonMap(propertyName, FileUtil.toSystemDependentName(locValue))[ FD ]
Line_8 $$ final String propertyName = getName().getRawText()-->Line_26 $$ result = Collections.singletonMap(propertyName, tagText)[ FD ]
Line_17 $$ if (!file.isAbsolute()) -->Line_18 $$ final String baseDir = getContextAntProject().getProjectBasedirPath()[ CD ]
Line_15 $$ if (locValue != null) -->Line_23 $$ result = Collections.singletonMap(propertyName, FileUtil.toSystemDependentName(locValue))[ CD ]
Line_7 $$ result = Collections.emptyMap()-->Line_44 $$ result = new HashMap<String, String>()[ FD ]
Line_3 $$ Map<String, String> result = myCachedProperties-->Line_57 $$ result = new HashMap<String, String>()[ FD ]
Line_34 $$ result = new HashMap<String, String>()-->Line_59 $$ result.put(property.getUnescapedKey(), property.getUnescapedValue())[ FD ]
Line_3 $$ Map<String, String> result = myCachedProperties-->Line_46 $$ result.put(prefix + entry.getKey(), entry.getValue())[ FD ]
Line_26 $$ result = Collections.singletonMap(propertyName, tagText)-->Line_34 $$ result = new HashMap<String, String>()[ FD ]
Line_12 $$ result = Collections.singletonMap(propertyName, propertyValue)-->Line_44 $$ result = new HashMap<String, String>()[ FD ]
Line_16 $$ final File file = new File(locValue)-->Line_35 $$ for (final IProperty property : file.getProperties()) [ FD ]
Line_26 $$ result = Collections.singletonMap(propertyName, tagText)-->Line_59 $$ result.put(property.getUnescapedKey(), property.getUnescapedValue())[ FD ]
Line_23 $$ result = Collections.singletonMap(propertyName, FileUtil.toSystemDependentName(locValue))-->Line_36 $$ result.put(property.getUnescapedKey(), property.getUnescapedValue())[ FD ]
Line_44 $$ result = new HashMap<String, String>()-->Line_57 $$ result = new HashMap<String, String>()[ FD ]
Line_52 $$ if (loader != null) -->Line_53 $$ final InputStream stream = loader.getResourceAsStream(resource)[ CD ]
Line_7 $$ result = Collections.emptyMap()-->Line_34 $$ result = new HashMap<String, String>()[ FD ]
Line_35 $$ for (final IProperty property : file.getProperties()) -->Line_59 $$ result.put(property.getUnescapedKey(), property.getUnescapedValue())[ FD ]
Line_40 $$ String prefix = getEnvironment().getRawText()-->Line_41 $$ if (!prefix.endsWith(".")) [ FD ]
Line_53 $$ final InputStream stream = loader.getResourceAsStream(resource)-->Line_54 $$ if (stream != null) [ FD ]
Line_17 $$ if (!file.isAbsolute()) -->Line_19 $$ if (baseDir != null) [ CD ]
Line_34 $$ result = new HashMap<String, String>()-->Line_57 $$ result = new HashMap<String, String>()[ FD ]
Line_3 $$ Map<String, String> result = myCachedProperties-->Line_12 $$ result = Collections.singletonMap(propertyName, propertyValue)[ FD ]
Line_30 $$ final PsiFileSystemItem psiFile = getFile().getValue()-->Line_31 $$ if (psiFile != null) [ FD ]
Line_2 $$ private Map<String, String> buildProperties() -->Line_3 $$ Map<String, String> result = myCachedProperties[ CD ]
Line_15 $$ if (locValue != null) -->Line_17 $$ if (!file.isAbsolute()) [ CD ]
Line_52 $$ if (loader != null) -->Line_54 $$ if (stream != null) [ CD ]
Line_33 $$ if (file != null) -->Line_34 $$ result = new HashMap<String, String>()[ CD ]
Line_26 $$ result = Collections.singletonMap(propertyName, tagText)-->Line_57 $$ result = new HashMap<String, String>()[ FD ]
Line_9 $$ if (propertyName != null) -->Line_10 $$ final String propertyValue = getValue().getRawText()[ CD ]
Line_7 $$ result = Collections.emptyMap()-->Line_57 $$ result = new HashMap<String, String>()[ FD ]
Line_39 $$ if (getEnvironment().getRawText() != null) -->Line_44 $$ result = new HashMap<String, String>()[ CD ]
Line_50 $$ if (resource != null) -->Line_51 $$ final ClassLoader loader = getClassLoader()[ CD ]
Line_9 $$ if (propertyName != null) -->Line_30 $$ final PsiFileSystemItem psiFile = getFile().getValue()[ CD ]
Line_35 $$ for (final IProperty property : file.getProperties()) -->Line_36 $$ result.put(property.getUnescapedKey(), property.getUnescapedValue())[ FD ]
Line_2 $$ private Map<String, String> buildProperties() -->Line_9 $$ if (propertyName != null) [ CD ]
Line_3 $$ Map<String, String> result = myCachedProperties-->Line_34 $$ result = new HashMap<String, String>()[ FD ]
Line_53 $$ final InputStream stream = loader.getResourceAsStream(resource)-->Line_56 $$ final PropertiesFile propFile = (PropertiesFile) CustomAntElementsRegistry.loadContentAsFile(getXmlTag().getProject(), stream, StdFileTypes.PROPERTIES)[ FD ]
Line_14 $$ String locValue = getLocation().getStringValue()-->Line_15 $$ if (locValue != null) [ FD ]
Line_12 $$ result = Collections.singletonMap(propertyName, propertyValue)-->Line_59 $$ result.put(property.getUnescapedKey(), property.getUnescapedValue())[ FD ]
Line_39 $$ if (getEnvironment().getRawText() != null) -->Line_41 $$ if (!prefix.endsWith(".")) [ CD ]
Line_15 $$ if (locValue != null) -->Line_16 $$ final File file = new File(locValue)[ CD ]
Line_7 $$ result = Collections.emptyMap()-->Line_12 $$ result = Collections.singletonMap(propertyName, propertyValue)[ FD ]
Line_12 $$ result = Collections.singletonMap(propertyName, propertyValue)-->Line_26 $$ result = Collections.singletonMap(propertyName, tagText)[ FD ]
Line_30 $$ final PsiFileSystemItem psiFile = getFile().getValue()-->Line_32 $$ final PropertiesFile file = toPropertiesFile(psiFile)[ FD ]
Line_26 $$ result = Collections.singletonMap(propertyName, tagText)-->Line_44 $$ result = new HashMap<String, String>()[ FD ]
Line_3 $$ Map<String, String> result = myCachedProperties-->Line_7 $$ result = Collections.emptyMap()[ FD ]
Line_7 $$ result = Collections.emptyMap()-->Line_46 $$ result.put(prefix + entry.getKey(), entry.getValue())[ FD ]
Line_51 $$ final ClassLoader loader = getClassLoader()-->Line_52 $$ if (loader != null) [ FD ]
