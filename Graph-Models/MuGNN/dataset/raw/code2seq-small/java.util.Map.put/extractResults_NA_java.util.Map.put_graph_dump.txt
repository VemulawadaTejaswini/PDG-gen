Line_2 $$ public static List<Map<String, ?>> extractResults(ResultSet resultSet) throws SQLException -->Line_11 $$ return results[ CD ]
Line_4 $$ while (resultSet.next()) -->Line_6 $$ for (int i = 1; i <= resultSet.getMetaData().getColumnCount(); i++) [ CD ]
Line_3 $$ List<Map<String, ?>> results = new ArrayList<Map<String, ?>>()-->Line_8 $$ results.add(row)[ FD ]
Line_2 $$ public static List<Map<String, ?>> extractResults(ResultSet resultSet) throws SQLException -->Line_3 $$ List<Map<String, ?>> results = new ArrayList<Map<String, ?>>()[ CD ]
Line_5 $$ Map<String, Object> row = new HashMap<String, Object>()-->Line_8 $$ results.add(row)[ FD ]
Line_2 $$ public static List<Map<String, ?>> extractResults(ResultSet resultSet) throws SQLException -->Line_4 $$ while (resultSet.next()) [ FD ]
Line_5 $$ Map<String, Object> row = new HashMap<String, Object>()-->Line_7 $$ row.put(resultSet.getMetaData().getColumnLabel(i), resultSet.getObject(i))[ FD ]
Line_2 $$ public static List<Map<String, ?>> extractResults(ResultSet resultSet) throws SQLException -->Line_7 $$ row.put(resultSet.getMetaData().getColumnLabel(i), resultSet.getObject(i))[ FD ]
Line_6 $$ for (int i = 1; i <= resultSet.getMetaData().getColumnCount(); i++) -->Line_8 $$ results.add(row)[ CD ]
Line_6 $$ for (int i = 1; i <= resultSet.getMetaData().getColumnCount(); i++) -->Line_7 $$ row.put(resultSet.getMetaData().getColumnLabel(i), resultSet.getObject(i))[ FD ]
Line_2 $$ public static List<Map<String, ?>> extractResults(ResultSet resultSet) throws SQLException -->Line_4 $$ while (resultSet.next()) [ CD ]
Line_6 $$ for (int i = 1; i <= resultSet.getMetaData().getColumnCount(); i++) -->Line_7 $$ row.put(resultSet.getMetaData().getColumnLabel(i), resultSet.getObject(i))[ CD ]
Line_4 $$ while (resultSet.next()) -->Line_5 $$ Map<String, Object> row = new HashMap<String, Object>()[ CD ]
Line_2 $$ public static List<Map<String, ?>> extractResults(ResultSet resultSet) throws SQLException -->Line_6 $$ for (int i = 1; i <= resultSet.getMetaData().getColumnCount(); i++) [ FD ]
