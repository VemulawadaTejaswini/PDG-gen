Line_2 $$ private static void addOwnership(ReplicationAwareTokenAllocator<Unit> t, Token current, Token next, Map<Unit, Double> ownership) -->Line_8 $$ ownership.put(n, v != null ? v + size : size)[ FD ]
Line_5 $$ Token representative = t.partitioner.midpoint(current, next)-->Line_6 $$ for (Unit n : ts.getReplicas(representative, t.sortedTokens)) [ FD ]
Line_2 $$ private static void addOwnership(ReplicationAwareTokenAllocator<Unit> t, Token current, Token next, Map<Unit, Double> ownership) -->Line_5 $$ Token representative = t.partitioner.midpoint(current, next)[ FD ]
Line_6 $$ for (Unit n : ts.getReplicas(representative, t.sortedTokens)) -->Line_8 $$ ownership.put(n, v != null ? v + size : size)[ FD ]
Line_2 $$ private static void addOwnership(ReplicationAwareTokenAllocator<Unit> t, Token current, Token next, Map<Unit, Double> ownership) -->Line_3 $$ TestReplicationStrategy ts = (TestReplicationStrategy) t.strategy[ CD ]
Line_2 $$ private static void addOwnership(ReplicationAwareTokenAllocator<Unit> t, Token current, Token next, Map<Unit, Double> ownership) -->Line_5 $$ Token representative = t.partitioner.midpoint(current, next)[ CD ]
Line_2 $$ private static void addOwnership(ReplicationAwareTokenAllocator<Unit> t, Token current, Token next, Map<Unit, Double> ownership) -->Line_4 $$ double size = current.size(next)[ FD ]
Line_3 $$ TestReplicationStrategy ts = (TestReplicationStrategy) t.strategy-->Line_6 $$ for (Unit n : ts.getReplicas(representative, t.sortedTokens)) [ FD ]
Line_6 $$ for (Unit n : ts.getReplicas(representative, t.sortedTokens)) -->Line_7 $$ Double v = ownership.get(n)[ FD ]
Line_2 $$ private static void addOwnership(ReplicationAwareTokenAllocator<Unit> t, Token current, Token next, Map<Unit, Double> ownership) -->Line_4 $$ double size = current.size(next)[ CD ]
Line_2 $$ private static void addOwnership(ReplicationAwareTokenAllocator<Unit> t, Token current, Token next, Map<Unit, Double> ownership) -->Line_7 $$ Double v = ownership.get(n)[ FD ]
