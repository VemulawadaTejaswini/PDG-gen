Line_8 $$ Map<String, String> attributes = ContainerUtil.newHashMap()-->Line_11 $$ attributes.put(TEMPLATE_ATTRIBUTE_MODULE_NAME, moduleName)[ FD ]
Line_6 $$ if (renderNewFile) -->Line_11 $$ attributes.put(TEMPLATE_ATTRIBUTE_MODULE_NAME, moduleName)[ CD ]
Line_19 $$ if (StringUtil.equals(flatStructureModulePath, modelContentRootDir.getName())) -->Line_20 $$ attributes.put(TEMPLATE_ATTRIBUTE_MODULE_FLAT_DIR, "true")[ CD ]
Line_3 $$ final VirtualFile file = getOrCreateExternalProjectConfigFile(rootProjectPath, GradleConstants.SETTINGS_FILE_NAME)-->Line_14 $$ char separatorChar = file.getParent() == null || !VfsUtilCore.isAncestor(file.getParent(), modelContentRootDir, true) ? '/' : ':'[ FD ]
Line_8 $$ Map<String, String> attributes = ContainerUtil.newHashMap()-->Line_25 $$ appendToFile(file, TEMPLATE_GRADLE_SETTINGS_MERGE, attributes)[ FD ]
Line_6 $$ if (renderNewFile) -->Line_25 $$ appendToFile(file, TEMPLATE_GRADLE_SETTINGS_MERGE, attributes)[ CD ]
Line_8 $$ Map<String, String> attributes = ContainerUtil.newHashMap()-->Line_20 $$ attributes.put(TEMPLATE_ATTRIBUTE_MODULE_FLAT_DIR, "true")[ FD ]
Line_4 $$ if (file == null)-->Line_5 $$ return null[ CD ]
Line_8 $$ Map<String, String> attributes = ContainerUtil.newHashMap()-->Line_12 $$ saveFile(file, TEMPLATE_GRADLE_SETTINGS, attributes)[ FD ]
Line_15 $$ String modulePath = VfsUtil.getPath(file, modelContentRootDir, separatorChar)-->Line_18 $$ final String flatStructureModulePath = modulePath != null && StringUtil.startsWith(modulePath, "../") ? StringUtil.trimStart(modulePath, "../") : null[ FD ]
Line_2 $$ public static VirtualFile setupGradleSettingsFile(@NotNull String rootProjectPath, @NotNull VirtualFile modelContentRootDir, String projectName, String moduleName, boolean renderNewFile) throws ConfigurationException -->Line_3 $$ final VirtualFile file = getOrCreateExternalProjectConfigFile(rootProjectPath, GradleConstants.SETTINGS_FILE_NAME)[ FD ]
Line_6 $$ if (renderNewFile) -->Line_9 $$ attributes.put(TEMPLATE_ATTRIBUTE_PROJECT_NAME, projectName)[ CD ]
Line_2 $$ public static VirtualFile setupGradleSettingsFile(@NotNull String rootProjectPath, @NotNull VirtualFile modelContentRootDir, String projectName, String moduleName, boolean renderNewFile) throws ConfigurationException -->Line_15 $$ String modulePath = VfsUtil.getPath(file, modelContentRootDir, separatorChar)[ FD ]
Line_19 $$ if (StringUtil.equals(flatStructureModulePath, modelContentRootDir.getName())) -->Line_21 $$ attributes.put(TEMPLATE_ATTRIBUTE_MODULE_PATH, flatStructureModulePath)[ CD ]
Line_3 $$ final VirtualFile file = getOrCreateExternalProjectConfigFile(rootProjectPath, GradleConstants.SETTINGS_FILE_NAME)-->Line_7 $$ final String moduleDirName = VfsUtilCore.getRelativePath(modelContentRootDir, file.getParent(), '/')[ FD ]
Line_14 $$ char separatorChar = file.getParent() == null || !VfsUtilCore.isAncestor(file.getParent(), modelContentRootDir, true) ? '/' : ':'-->Line_15 $$ String modulePath = VfsUtil.getPath(file, modelContentRootDir, separatorChar)[ FD ]
Line_6 $$ if (renderNewFile) -->Line_7 $$ final String moduleDirName = VfsUtilCore.getRelativePath(modelContentRootDir, file.getParent(), '/')[ CD ]
Line_6 $$ if (renderNewFile) -->Line_8 $$ Map<String, String> attributes = ContainerUtil.newHashMap()[ CD ]
Line_19 $$ if (StringUtil.equals(flatStructureModulePath, modelContentRootDir.getName())) -->Line_23 $$ attributes.put(TEMPLATE_ATTRIBUTE_MODULE_PATH, modulePath)[ CD ]
Line_2 $$ public static VirtualFile setupGradleSettingsFile(@NotNull String rootProjectPath, @NotNull VirtualFile modelContentRootDir, String projectName, String moduleName, boolean renderNewFile) throws ConfigurationException -->Line_3 $$ final VirtualFile file = getOrCreateExternalProjectConfigFile(rootProjectPath, GradleConstants.SETTINGS_FILE_NAME)[ CD ]
Line_2 $$ public static VirtualFile setupGradleSettingsFile(@NotNull String rootProjectPath, @NotNull VirtualFile modelContentRootDir, String projectName, String moduleName, boolean renderNewFile) throws ConfigurationException -->Line_14 $$ char separatorChar = file.getParent() == null || !VfsUtilCore.isAncestor(file.getParent(), modelContentRootDir, true) ? '/' : ':'[ FD ]
Line_6 $$ if (renderNewFile) -->Line_19 $$ if (StringUtil.equals(flatStructureModulePath, modelContentRootDir.getName())) [ CD ]
Line_18 $$ final String flatStructureModulePath = modulePath != null && StringUtil.startsWith(modulePath, "../") ? StringUtil.trimStart(modulePath, "../") : null-->Line_21 $$ attributes.put(TEMPLATE_ATTRIBUTE_MODULE_PATH, flatStructureModulePath)[ FD ]
Line_6 $$ if (renderNewFile) -->Line_18 $$ final String flatStructureModulePath = modulePath != null && StringUtil.startsWith(modulePath, "../") ? StringUtil.trimStart(modulePath, "../") : null[ CD ]
Line_7 $$ final String moduleDirName = VfsUtilCore.getRelativePath(modelContentRootDir, file.getParent(), '/')-->Line_10 $$ attributes.put(TEMPLATE_ATTRIBUTE_MODULE_PATH, moduleDirName)[ FD ]
Line_8 $$ Map<String, String> attributes = ContainerUtil.newHashMap()-->Line_9 $$ attributes.put(TEMPLATE_ATTRIBUTE_PROJECT_NAME, projectName)[ FD ]
Line_6 $$ if (renderNewFile) -->Line_10 $$ attributes.put(TEMPLATE_ATTRIBUTE_MODULE_PATH, moduleDirName)[ CD ]
Line_8 $$ Map<String, String> attributes = ContainerUtil.newHashMap()-->Line_21 $$ attributes.put(TEMPLATE_ATTRIBUTE_MODULE_PATH, flatStructureModulePath)[ FD ]
Line_3 $$ final VirtualFile file = getOrCreateExternalProjectConfigFile(rootProjectPath, GradleConstants.SETTINGS_FILE_NAME)-->Line_25 $$ appendToFile(file, TEMPLATE_GRADLE_SETTINGS_MERGE, attributes)[ FD ]
Line_6 $$ if (renderNewFile) -->Line_14 $$ char separatorChar = file.getParent() == null || !VfsUtilCore.isAncestor(file.getParent(), modelContentRootDir, true) ? '/' : ':'[ CD ]
Line_8 $$ Map<String, String> attributes = ContainerUtil.newHashMap()-->Line_10 $$ attributes.put(TEMPLATE_ATTRIBUTE_MODULE_PATH, moduleDirName)[ FD ]
Line_6 $$ if (renderNewFile) -->Line_16 $$ Map<String, String> attributes = ContainerUtil.newHashMap()[ CD ]
Line_6 $$ if (renderNewFile) -->Line_17 $$ attributes.put(TEMPLATE_ATTRIBUTE_MODULE_NAME, moduleName)[ CD ]
Line_8 $$ Map<String, String> attributes = ContainerUtil.newHashMap()-->Line_17 $$ attributes.put(TEMPLATE_ATTRIBUTE_MODULE_NAME, moduleName)[ FD ]
Line_2 $$ public static VirtualFile setupGradleSettingsFile(@NotNull String rootProjectPath, @NotNull VirtualFile modelContentRootDir, String projectName, String moduleName, boolean renderNewFile) throws ConfigurationException -->Line_19 $$ if (StringUtil.equals(flatStructureModulePath, modelContentRootDir.getName())) [ FD ]
Line_2 $$ public static VirtualFile setupGradleSettingsFile(@NotNull String rootProjectPath, @NotNull VirtualFile modelContentRootDir, String projectName, String moduleName, boolean renderNewFile) throws ConfigurationException -->Line_7 $$ final String moduleDirName = VfsUtilCore.getRelativePath(modelContentRootDir, file.getParent(), '/')[ FD ]
Line_6 $$ if (renderNewFile) -->Line_15 $$ String modulePath = VfsUtil.getPath(file, modelContentRootDir, separatorChar)[ CD ]
Line_15 $$ String modulePath = VfsUtil.getPath(file, modelContentRootDir, separatorChar)-->Line_23 $$ attributes.put(TEMPLATE_ATTRIBUTE_MODULE_PATH, modulePath)[ FD ]
Line_2 $$ public static VirtualFile setupGradleSettingsFile(@NotNull String rootProjectPath, @NotNull VirtualFile modelContentRootDir, String projectName, String moduleName, boolean renderNewFile) throws ConfigurationException -->Line_27 $$ return file[ CD ]
Line_18 $$ final String flatStructureModulePath = modulePath != null && StringUtil.startsWith(modulePath, "../") ? StringUtil.trimStart(modulePath, "../") : null-->Line_19 $$ if (StringUtil.equals(flatStructureModulePath, modelContentRootDir.getName())) [ FD ]
Line_6 $$ if (renderNewFile) -->Line_12 $$ saveFile(file, TEMPLATE_GRADLE_SETTINGS, attributes)[ CD ]
Line_8 $$ Map<String, String> attributes = ContainerUtil.newHashMap()-->Line_23 $$ attributes.put(TEMPLATE_ATTRIBUTE_MODULE_PATH, modulePath)[ FD ]
Line_2 $$ public static VirtualFile setupGradleSettingsFile(@NotNull String rootProjectPath, @NotNull VirtualFile modelContentRootDir, String projectName, String moduleName, boolean renderNewFile) throws ConfigurationException -->Line_9 $$ attributes.put(TEMPLATE_ATTRIBUTE_PROJECT_NAME, projectName)[ FD ]
Line_3 $$ final VirtualFile file = getOrCreateExternalProjectConfigFile(rootProjectPath, GradleConstants.SETTINGS_FILE_NAME)-->Line_15 $$ String modulePath = VfsUtil.getPath(file, modelContentRootDir, separatorChar)[ FD ]
Line_3 $$ final VirtualFile file = getOrCreateExternalProjectConfigFile(rootProjectPath, GradleConstants.SETTINGS_FILE_NAME)-->Line_4 $$ if (file == null)[ FD ]
Line_2 $$ public static VirtualFile setupGradleSettingsFile(@NotNull String rootProjectPath, @NotNull VirtualFile modelContentRootDir, String projectName, String moduleName, boolean renderNewFile) throws ConfigurationException -->Line_11 $$ attributes.put(TEMPLATE_ATTRIBUTE_MODULE_NAME, moduleName)[ FD ]
Line_2 $$ public static VirtualFile setupGradleSettingsFile(@NotNull String rootProjectPath, @NotNull VirtualFile modelContentRootDir, String projectName, String moduleName, boolean renderNewFile) throws ConfigurationException -->Line_4 $$ if (file == null)[ CD ]
Line_2 $$ public static VirtualFile setupGradleSettingsFile(@NotNull String rootProjectPath, @NotNull VirtualFile modelContentRootDir, String projectName, String moduleName, boolean renderNewFile) throws ConfigurationException -->Line_17 $$ attributes.put(TEMPLATE_ATTRIBUTE_MODULE_NAME, moduleName)[ FD ]
Line_3 $$ final VirtualFile file = getOrCreateExternalProjectConfigFile(rootProjectPath, GradleConstants.SETTINGS_FILE_NAME)-->Line_12 $$ saveFile(file, TEMPLATE_GRADLE_SETTINGS, attributes)[ FD ]
Line_2 $$ public static VirtualFile setupGradleSettingsFile(@NotNull String rootProjectPath, @NotNull VirtualFile modelContentRootDir, String projectName, String moduleName, boolean renderNewFile) throws ConfigurationException -->Line_6 $$ if (renderNewFile) [ CD ]
