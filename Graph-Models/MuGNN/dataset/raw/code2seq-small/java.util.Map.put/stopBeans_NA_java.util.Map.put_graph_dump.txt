Line_9 $$ if (group == null) -->Line_11 $$ phases.put(shutdownOrder, group)[ CD ]
Line_4 $$ Map<Integer, LifecycleGroup> phases = new HashMap<Integer, LifecycleGroup>()-->Line_11 $$ phases.put(shutdownOrder, group)[ FD ]
Line_6 $$ Lifecycle bean = entry.getValue()-->Line_7 $$ int shutdownOrder = getPhase(bean)[ FD ]
Line_4 $$ Map<Integer, LifecycleGroup> phases = new HashMap<Integer, LifecycleGroup>()-->Line_19 $$ phases.get(key).stop()[ FD ]
Line_2 $$ private void stopBeans() -->Line_4 $$ Map<Integer, LifecycleGroup> phases = new HashMap<Integer, LifecycleGroup>()[ CD ]
Line_18 $$ for (Integer key : keys) -->Line_19 $$ phases.get(key).stop()[ FD ]
Line_16 $$ List<Integer> keys = new ArrayList<Integer>(phases.keySet())-->Line_17 $$ Collections.sort(keys, Collections.reverseOrder())[ FD ]
Line_10 $$ group = new LifecycleGroup(shutdownOrder, this.timeoutPerShutdownPhase, lifecycleBeans, false)-->Line_11 $$ phases.put(shutdownOrder, group)[ FD ]
Line_3 $$ Map<String, Lifecycle> lifecycleBeans = getLifecycleBeans()-->Line_5 $$ for (Map.Entry<String, Lifecycle> entry : lifecycleBeans.entrySet()) [ FD ]
Line_2 $$ private void stopBeans() -->Line_3 $$ Map<String, Lifecycle> lifecycleBeans = getLifecycleBeans()[ CD ]
Line_7 $$ int shutdownOrder = getPhase(bean)-->Line_11 $$ phases.put(shutdownOrder, group)[ FD ]
Line_10 $$ group = new LifecycleGroup(shutdownOrder, this.timeoutPerShutdownPhase, lifecycleBeans, false)-->Line_13 $$ group.add(entry.getKey(), bean)[ FD ]
Line_6 $$ Lifecycle bean = entry.getValue()-->Line_13 $$ group.add(entry.getKey(), bean)[ FD ]
Line_4 $$ Map<Integer, LifecycleGroup> phases = new HashMap<Integer, LifecycleGroup>()-->Line_15 $$ if (phases.size() > 0) [ FD ]
Line_15 $$ if (phases.size() > 0) -->Line_17 $$ Collections.sort(keys, Collections.reverseOrder())[ CD ]
Line_4 $$ Map<Integer, LifecycleGroup> phases = new HashMap<Integer, LifecycleGroup>()-->Line_8 $$ LifecycleGroup group = phases.get(shutdownOrder)[ FD ]
Line_5 $$ for (Map.Entry<String, Lifecycle> entry : lifecycleBeans.entrySet()) -->Line_13 $$ group.add(entry.getKey(), bean)[ FD ]
Line_8 $$ LifecycleGroup group = phases.get(shutdownOrder)-->Line_9 $$ if (group == null) [ FD ]
Line_5 $$ for (Map.Entry<String, Lifecycle> entry : lifecycleBeans.entrySet()) -->Line_6 $$ Lifecycle bean = entry.getValue()[ FD ]
Line_8 $$ LifecycleGroup group = phases.get(shutdownOrder)-->Line_10 $$ group = new LifecycleGroup(shutdownOrder, this.timeoutPerShutdownPhase, lifecycleBeans, false)[ FD ]
Line_8 $$ LifecycleGroup group = phases.get(shutdownOrder)-->Line_11 $$ phases.put(shutdownOrder, group)[ FD ]
Line_2 $$ private void stopBeans() -->Line_15 $$ if (phases.size() > 0) [ CD ]
Line_9 $$ if (group == null) -->Line_10 $$ group = new LifecycleGroup(shutdownOrder, this.timeoutPerShutdownPhase, lifecycleBeans, false)[ CD ]
Line_7 $$ int shutdownOrder = getPhase(bean)-->Line_8 $$ LifecycleGroup group = phases.get(shutdownOrder)[ FD ]
Line_4 $$ Map<Integer, LifecycleGroup> phases = new HashMap<Integer, LifecycleGroup>()-->Line_16 $$ List<Integer> keys = new ArrayList<Integer>(phases.keySet())[ FD ]
Line_8 $$ LifecycleGroup group = phases.get(shutdownOrder)-->Line_13 $$ group.add(entry.getKey(), bean)[ FD ]
Line_15 $$ if (phases.size() > 0) -->Line_16 $$ List<Integer> keys = new ArrayList<Integer>(phases.keySet())[ CD ]
