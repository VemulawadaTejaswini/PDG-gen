Line_2 $$ public void renderModelKeyUnsupported() throws Exception -->Line_8 $$ MockHttpServletRequest request = new MockHttpServletRequest()[ CD ]
Line_6 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_12 $$ view.render(model, request, response)[ FD ]
Line_8 $$ MockHttpServletRequest request = new MockHttpServletRequest()-->Line_12 $$ view.render(model, request, response)[ FD ]
Line_4 $$ String modelKey = "key"-->Line_5 $$ view.setModelKey(modelKey)[ FD ]
Line_2 $$ public void renderModelKeyUnsupported() throws Exception -->Line_10 $$ given(marshallerMock.supports(Object.class)).willReturn(false)[ CD ]
Line_3 $$ Object toBeMarshalled = new Object()-->Line_7 $$ model.put(modelKey, toBeMarshalled)[ FD ]
Line_2 $$ public void renderModelKeyUnsupported() throws Exception -->Line_9 $$ MockHttpServletResponse response = new MockHttpServletResponse()[ CD ]
Line_4 $$ String modelKey = "key"-->Line_7 $$ model.put(modelKey, toBeMarshalled)[ FD ]
Line_2 $$ public void renderModelKeyUnsupported() throws Exception -->Line_4 $$ String modelKey = "key"[ CD ]
Line_9 $$ MockHttpServletResponse response = new MockHttpServletResponse()-->Line_12 $$ view.render(model, request, response)[ FD ]
Line_2 $$ public void renderModelKeyUnsupported() throws Exception -->Line_3 $$ Object toBeMarshalled = new Object()[ CD ]
Line_2 $$ public void renderModelKeyUnsupported() throws Exception -->Line_5 $$ view.setModelKey(modelKey)[ CD ]
Line_2 $$ public void renderModelKeyUnsupported() throws Exception -->Line_7 $$ model.put(modelKey, toBeMarshalled)[ CD ]
Line_2 $$ public void renderModelKeyUnsupported() throws Exception -->Line_6 $$ Map<String, Object> model = new HashMap<String, Object>()[ CD ]
Line_6 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_7 $$ model.put(modelKey, toBeMarshalled)[ FD ]
