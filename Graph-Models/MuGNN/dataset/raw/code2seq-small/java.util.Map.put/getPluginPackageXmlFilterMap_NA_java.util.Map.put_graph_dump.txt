Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_24 $$ filterMap.put("tags", getPluginPackageTagsXml(pluginPackage.getTags()))[ FD ]
Line_8 $$ Map<String, String> filterMap = new HashMap()-->Line_19 $$ filterMap.put("plugin_type", pluginType)[ FD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_3 $$ List<String> pluginTypes = pluginPackage.getTypes()[ CD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_18 $$ filterMap.put("plugin_name", wrapCDATA(pluginPackage.getName()))[ CD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_11 $$ filterMap.put("licenses", getPluginPackageLicensesXml(pluginPackage.getLicenses()))[ CD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_18 $$ filterMap.put("plugin_name", wrapCDATA(pluginPackage.getName()))[ FD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_25 $$ return filterMap[ CD ]
Line_8 $$ Map<String, String> filterMap = new HashMap()-->Line_10 $$ filterMap.put("change_log", wrapCDATA(pluginPackage.getChangeLog()))[ FD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_4 $$ String pluginType = pluginTypes.get(0)[ CD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_5 $$ if (!pluginType.equals(getPluginType())) [ CD ]
Line_8 $$ Map<String, String> filterMap = new HashMap()-->Line_18 $$ filterMap.put("plugin_name", wrapCDATA(pluginPackage.getName()))[ FD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_13 $$ filterMap.put("long_description", wrapCDATA(pluginPackage.getLongDescription()))[ FD ]
Line_8 $$ Map<String, String> filterMap = new HashMap()-->Line_20 $$ filterMap.put("plugin_type_name", TextFormatter.format(pluginType, TextFormatter.J))[ FD ]
Line_8 $$ Map<String, String> filterMap = new HashMap()-->Line_22 $$ filterMap.put("required_deployment_contexts", getPluginPackageRequiredDeploymentContextsXml(pluginPackage.getRequiredDeploymentContexts()))[ FD ]
Line_8 $$ Map<String, String> filterMap = new HashMap()-->Line_23 $$ filterMap.put("short_description", wrapCDATA(pluginPackage.getShortDescription()))[ FD ]
Line_8 $$ Map<String, String> filterMap = new HashMap()-->Line_9 $$ filterMap.put("author", wrapCDATA(pluginPackage.getAuthor()))[ FD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_20 $$ filterMap.put("plugin_type_name", TextFormatter.format(pluginType, TextFormatter.J))[ CD ]
Line_4 $$ String pluginType = pluginTypes.get(0)-->Line_20 $$ filterMap.put("plugin_type_name", TextFormatter.format(pluginType, TextFormatter.J))[ FD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_22 $$ filterMap.put("required_deployment_contexts", getPluginPackageRequiredDeploymentContextsXml(pluginPackage.getRequiredDeploymentContexts()))[ CD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_14 $$ filterMap.put("module_artifact_id", pluginPackage.getArtifactId())[ FD ]
Line_8 $$ Map<String, String> filterMap = new HashMap()-->Line_17 $$ filterMap.put("page_url", pluginPackage.getPageURL())[ FD ]
Line_8 $$ Map<String, String> filterMap = new HashMap()-->Line_24 $$ filterMap.put("tags", getPluginPackageTagsXml(pluginPackage.getTags()))[ FD ]
Line_4 $$ String pluginType = pluginTypes.get(0)-->Line_5 $$ if (!pluginType.equals(getPluginType())) [ FD ]
Line_8 $$ Map<String, String> filterMap = new HashMap()-->Line_21 $$ filterMap.put("recommended_deployment_context", pluginPackage.getRecommendedDeploymentContext())[ FD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_23 $$ filterMap.put("short_description", wrapCDATA(pluginPackage.getShortDescription()))[ FD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_10 $$ filterMap.put("change_log", wrapCDATA(pluginPackage.getChangeLog()))[ CD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_15 $$ filterMap.put("module_group_id", pluginPackage.getGroupId())[ CD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_8 $$ Map<String, String> filterMap = new HashMap()[ CD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_23 $$ filterMap.put("short_description", wrapCDATA(pluginPackage.getShortDescription()))[ CD ]
Line_8 $$ Map<String, String> filterMap = new HashMap()-->Line_14 $$ filterMap.put("module_artifact_id", pluginPackage.getArtifactId())[ FD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_12 $$ filterMap.put("liferay_versions", getPluginPackageLiferayVersionsXml(pluginPackage.getLiferayVersions()))[ FD ]
Line_8 $$ Map<String, String> filterMap = new HashMap()-->Line_16 $$ filterMap.put("module_version", pluginPackage.getVersion())[ FD ]
Line_5 $$ if (!pluginType.equals(getPluginType())) -->Line_6 $$ return null[ CD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_16 $$ filterMap.put("module_version", pluginPackage.getVersion())[ FD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_3 $$ List<String> pluginTypes = pluginPackage.getTypes()[ FD ]
Line_8 $$ Map<String, String> filterMap = new HashMap()-->Line_12 $$ filterMap.put("liferay_versions", getPluginPackageLiferayVersionsXml(pluginPackage.getLiferayVersions()))[ FD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_21 $$ filterMap.put("recommended_deployment_context", pluginPackage.getRecommendedDeploymentContext())[ CD ]
Line_8 $$ Map<String, String> filterMap = new HashMap()-->Line_13 $$ filterMap.put("long_description", wrapCDATA(pluginPackage.getLongDescription()))[ FD ]
Line_8 $$ Map<String, String> filterMap = new HashMap()-->Line_11 $$ filterMap.put("licenses", getPluginPackageLicensesXml(pluginPackage.getLicenses()))[ FD ]
Line_8 $$ Map<String, String> filterMap = new HashMap()-->Line_15 $$ filterMap.put("module_group_id", pluginPackage.getGroupId())[ FD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_16 $$ filterMap.put("module_version", pluginPackage.getVersion())[ CD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_17 $$ filterMap.put("page_url", pluginPackage.getPageURL())[ FD ]
Line_3 $$ List<String> pluginTypes = pluginPackage.getTypes()-->Line_4 $$ String pluginType = pluginTypes.get(0)[ FD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_9 $$ filterMap.put("author", wrapCDATA(pluginPackage.getAuthor()))[ FD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_17 $$ filterMap.put("page_url", pluginPackage.getPageURL())[ CD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_10 $$ filterMap.put("change_log", wrapCDATA(pluginPackage.getChangeLog()))[ FD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_11 $$ filterMap.put("licenses", getPluginPackageLicensesXml(pluginPackage.getLicenses()))[ FD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_21 $$ filterMap.put("recommended_deployment_context", pluginPackage.getRecommendedDeploymentContext())[ FD ]
Line_4 $$ String pluginType = pluginTypes.get(0)-->Line_19 $$ filterMap.put("plugin_type", pluginType)[ FD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_12 $$ filterMap.put("liferay_versions", getPluginPackageLiferayVersionsXml(pluginPackage.getLiferayVersions()))[ CD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_15 $$ filterMap.put("module_group_id", pluginPackage.getGroupId())[ FD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_24 $$ filterMap.put("tags", getPluginPackageTagsXml(pluginPackage.getTags()))[ CD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_13 $$ filterMap.put("long_description", wrapCDATA(pluginPackage.getLongDescription()))[ CD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_14 $$ filterMap.put("module_artifact_id", pluginPackage.getArtifactId())[ CD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_19 $$ filterMap.put("plugin_type", pluginType)[ CD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_22 $$ filterMap.put("required_deployment_contexts", getPluginPackageRequiredDeploymentContextsXml(pluginPackage.getRequiredDeploymentContexts()))[ FD ]
Line_2 $$ public Map<String, String> getPluginPackageXmlFilterMap(PluginPackage pluginPackage) -->Line_9 $$ filterMap.put("author", wrapCDATA(pluginPackage.getAuthor()))[ CD ]
