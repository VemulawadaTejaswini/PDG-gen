Line_2 $$ public static String getStorageRoot(String[] urls, Project project) -->Line_6 $$ final String localRepositoryPath = FileUtil.toSystemIndependentName(MavenProjectsManager.getInstance(project).getLocalRepository().getPath())[ CD ]
Line_18 $$ return Collections.max(counts.entrySet(), new Comparator<Map.Entry<String, Integer>>() -->Line_20 $$ return o1.getValue().compareTo(o2.getValue())[ FD ]
Line_18 $$ return Collections.max(counts.entrySet(), new Comparator<Map.Entry<String, Integer>>() -->Line_20 $$ return o1.getValue().compareTo(o2.getValue())[ CD ]
Line_2 $$ public static String getStorageRoot(String[] urls, Project project) -->Line_6 $$ final String localRepositoryPath = FileUtil.toSystemIndependentName(MavenProjectsManager.getInstance(project).getLocalRepository().getPath())[ FD ]
Line_9 $$ String url = StringUtil.trimStart(urlWithPrefix, JarFileSystem.PROTOCOL_PREFIX)-->Line_10 $$ return url.startsWith(localRepositoryPath) ? null : FileUtil.toSystemDependentName(PathUtil.getParentPath(url))[ FD ]
Line_6 $$ final String localRepositoryPath = FileUtil.toSystemIndependentName(MavenProjectsManager.getInstance(project).getLocalRepository().getPath())-->Line_10 $$ return url.startsWith(localRepositoryPath) ? null : FileUtil.toSystemDependentName(PathUtil.getParentPath(url))[ FD ]
Line_2 $$ public static String getStorageRoot(String[] urls, Project project) -->Line_18 $$ return Collections.max(counts.entrySet(), new Comparator<Map.Entry<String, Integer>>() [ CD ]
Line_3 $$ if (urls.length == 0) -->Line_4 $$ return null[ CD ]
Line_2 $$ public static String getStorageRoot(String[] urls, Project project) -->Line_7 $$ List<String> roots = JBIterable.of(urls).transform(new Function<String, String>() [ CD ]
Line_2 $$ public static String getStorageRoot(String[] urls, Project project) -->Line_3 $$ if (urls.length == 0) [ CD ]
Line_2 $$ public static String getStorageRoot(String[] urls, Project project) -->Line_7 $$ List<String> roots = JBIterable.of(urls).transform(new Function<String, String>() [ FD ]
Line_7 $$ List<String> roots = JBIterable.of(urls).transform(new Function<String, String>() -->Line_10 $$ return url.startsWith(localRepositoryPath) ? null : FileUtil.toSystemDependentName(PathUtil.getParentPath(url))[ CD ]
Line_7 $$ List<String> roots = JBIterable.of(urls).transform(new Function<String, String>() -->Line_9 $$ String url = StringUtil.trimStart(urlWithPrefix, JarFileSystem.PROTOCOL_PREFIX)[ CD ]
Line_7 $$ List<String> roots = JBIterable.of(urls).transform(new Function<String, String>() -->Line_9 $$ String url = StringUtil.trimStart(urlWithPrefix, JarFileSystem.PROTOCOL_PREFIX)[ FD ]
