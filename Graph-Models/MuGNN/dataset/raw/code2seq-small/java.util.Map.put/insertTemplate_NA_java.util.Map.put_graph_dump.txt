Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_41 $$ int end = -1[ CD ]
Line_22 $$ newVarName = generateUniqueVarName(oldVarNames, isEndVariable(varName))-->Line_28 $$ newVarName = varName[ FD ]
Line_61 $$ if (endOffset > 0 && endOffset != offset + text.length() && endOffset < myText.length() && !hasVarAtOffset(endOffset)) -->Line_64 $$ myVarNames.add(myLastEndVarName)[ CD ]
Line_14 $$ String varName = template.getVariableNameAt(i)-->Line_15 $$ if (!TemplateImpl.INTERNAL_VARS_SET.contains(varName)) [ FD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_5 $$ String text = template.getTemplateText()[ FD ]
Line_9 $$ for (int i = 0; i < template.getVariableCount(); i++) -->Line_13 $$ for (int i = 0; i < template.getVariableCount(); i++) [ FD ]
Line_28 $$ newVarName = varName-->Line_38 $$ myVarNames.add(newVarName)[ FD ]
Line_15 $$ if (!TemplateImpl.INTERNAL_VARS_SET.contains(varName)) -->Line_37 $$ myVariables.add(var)[ CD ]
Line_14 $$ String varName = template.getVariableNameAt(i)-->Line_24 $$ if (varName.equals(myLastEndVarName)) [ FD ]
Line_55 $$ segmentName = newVarNames.get(segmentName)-->Line_54 $$ if (newVarNames.containsKey(segmentName)) [ FD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_30 $$ Variable var = new Variable(newVarName, template.getExpressionStringAt(i), template.getDefaultValueStringAt(i), template.isAlwaysStopAt(i))[ FD ]
Line_61 $$ if (endOffset > 0 && endOffset != offset + text.length() && endOffset < myText.length() && !hasVarAtOffset(endOffset)) -->Line_62 $$ myLastEndVarName = generateUniqueVarName(myVarNames, true)[ CD ]
Line_5 $$ String text = template.getTemplateText()-->Line_60 $$ int endOffset = end >= 0 ? end : offset + text.length()[ FD ]
Line_14 $$ String varName = template.getVariableNameAt(i)-->Line_22 $$ newVarName = generateUniqueVarName(oldVarNames, isEndVariable(varName))[ FD ]
Line_61 $$ if (endOffset > 0 && endOffset != offset + text.length() && endOffset < myText.length() && !hasVarAtOffset(endOffset)) -->Line_65 $$ myVariableOccurrences.add(new VarOccurence(myLastEndVarName, endOffset))[ CD ]
Line_7 $$ Map<String, String> newVarNames = new HashMap<String, String>()-->Line_23 $$ newVarNames.put(varName, newVarName)[ FD ]
Line_9 $$ for (int i = 0; i < template.getVariableCount(); i++) -->Line_14 $$ String varName = template.getVariableNameAt(i)[ FD ]
Line_22 $$ newVarName = generateUniqueVarName(oldVarNames, isEndVariable(varName))-->Line_23 $$ newVarNames.put(varName, newVarName)[ FD ]
Line_42 $$ for (int i = 0; i < template.getSegmentsCount(); i++) -->Line_45 $$ if (TemplateImpl.END.equals(segmentName)) [ CD ]
Line_7 $$ Map<String, String> newVarNames = new HashMap<String, String>()-->Line_55 $$ segmentName = newVarNames.get(segmentName)[ FD ]
Line_8 $$ Set<String> oldVarNames = new HashSet<String>()-->Line_22 $$ newVarName = generateUniqueVarName(oldVarNames, isEndVariable(varName))[ FD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_60 $$ int endOffset = end >= 0 ? end : offset + text.length()[ CD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_6 $$ insertText(offset, text, false)[ CD ]
Line_51 $$ offset += value.length()-->Line_46 $$ end = offset + localOffset[ FD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_13 $$ for (int i = 0; i < template.getVariableCount(); i++) [ FD ]
Line_20 $$ if (myVarNames.contains(varName)) -->Line_22 $$ newVarName = generateUniqueVarName(oldVarNames, isEndVariable(varName))[ CD ]
Line_19 $$ String newVarName-->Line_38 $$ myVarNames.add(newVarName)[ FD ]
Line_15 $$ if (!TemplateImpl.INTERNAL_VARS_SET.contains(varName)) -->Line_30 $$ Variable var = new Variable(newVarName, template.getExpressionStringAt(i), template.getDefaultValueStringAt(i), template.isAlwaysStopAt(i))[ CD ]
Line_9 $$ for (int i = 0; i < template.getVariableCount(); i++) -->Line_10 $$ String varName = template.getVariableNameAt(i)[ CD ]
Line_43 $$ String segmentName = template.getSegmentName(i)-->Line_48 $$ if (predefinedVarValues != null && predefinedVarValues.containsKey(segmentName)) [ FD ]
Line_14 $$ String varName = template.getVariableNameAt(i)-->Line_20 $$ if (myVarNames.contains(varName)) [ FD ]
Line_55 $$ segmentName = newVarNames.get(segmentName)-->Line_48 $$ if (predefinedVarValues != null && predefinedVarValues.containsKey(segmentName)) [ FD ]
Line_10 $$ String varName = template.getVariableNameAt(i)-->Line_11 $$ oldVarNames.add(varName)[ FD ]
Line_43 $$ String segmentName = template.getSegmentName(i)-->Line_45 $$ if (TemplateImpl.END.equals(segmentName)) [ FD ]
Line_15 $$ if (!TemplateImpl.INTERNAL_VARS_SET.contains(varName)) -->Line_31 $$ if (mySegmentLimit >= 0 && myVariables.size() >= mySegmentLimit) [ CD ]
Line_45 $$ if (TemplateImpl.END.equals(segmentName)) -->Line_57 $$ myVariableOccurrences.add(new VarOccurence(segmentName, offset + localOffset))[ CD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_61 $$ if (endOffset > 0 && endOffset != offset + text.length() && endOffset < myText.length() && !hasVarAtOffset(endOffset)) [ CD ]
Line_13 $$ for (int i = 0; i < template.getVariableCount(); i++) -->Line_43 $$ String segmentName = template.getSegmentName(i)[ FD ]
Line_43 $$ String segmentName = template.getSegmentName(i)-->Line_55 $$ segmentName = newVarNames.get(segmentName)[ FD ]
Line_42 $$ for (int i = 0; i < template.getSegmentsCount(); i++) -->Line_44 $$ int localOffset = template.getSegmentOffset(i)[ CD ]
Line_55 $$ segmentName = newVarNames.get(segmentName)-->Line_49 $$ String value = predefinedVarValues.get(segmentName)[ FD ]
Line_9 $$ for (int i = 0; i < template.getVariableCount(); i++) -->Line_44 $$ int localOffset = template.getSegmentOffset(i)[ FD ]
Line_28 $$ newVarName = varName-->Line_23 $$ newVarNames.put(varName, newVarName)[ FD ]
Line_13 $$ for (int i = 0; i < template.getVariableCount(); i++) -->Line_14 $$ String varName = template.getVariableNameAt(i)[ CD ]
Line_44 $$ int localOffset = template.getSegmentOffset(i)-->Line_46 $$ end = offset + localOffset[ FD ]
Line_55 $$ segmentName = newVarNames.get(segmentName)-->Line_45 $$ if (TemplateImpl.END.equals(segmentName)) [ FD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_8 $$ Set<String> oldVarNames = new HashSet<String>()[ CD ]
Line_31 $$ if (mySegmentLimit >= 0 && myVariables.size() >= mySegmentLimit) -->Line_32 $$ if (mySegmentLimit > 0) [ CD ]
Line_30 $$ Variable var = new Variable(newVarName, template.getExpressionStringAt(i), template.getDefaultValueStringAt(i), template.isAlwaysStopAt(i))-->Line_37 $$ myVariables.add(var)[ FD ]
Line_5 $$ String text = template.getTemplateText()-->Line_61 $$ if (endOffset > 0 && endOffset != offset + text.length() && endOffset < myText.length() && !hasVarAtOffset(endOffset)) [ FD ]
Line_8 $$ Set<String> oldVarNames = new HashSet<String>()-->Line_11 $$ oldVarNames.add(varName)[ FD ]
Line_49 $$ String value = predefinedVarValues.get(segmentName)-->Line_50 $$ insertText(offset + localOffset, value, false)[ FD ]
Line_42 $$ for (int i = 0; i < template.getSegmentsCount(); i++) -->Line_43 $$ String segmentName = template.getSegmentName(i)[ CD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_42 $$ for (int i = 0; i < template.getSegmentsCount(); i++) [ CD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_10 $$ String varName = template.getVariableNameAt(i)[ FD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_48 $$ if (predefinedVarValues != null && predefinedVarValues.containsKey(segmentName)) [ FD ]
Line_5 $$ String text = template.getTemplateText()-->Line_6 $$ insertText(offset, text, false)[ FD ]
Line_20 $$ if (myVarNames.contains(varName)) -->Line_28 $$ newVarName = varName[ CD ]
Line_20 $$ if (myVarNames.contains(varName)) -->Line_21 $$ oldVarNames.remove(varName)[ CD ]
Line_10 $$ String varName = template.getVariableNameAt(i)-->Line_28 $$ newVarName = varName[ FD ]
Line_8 $$ Set<String> oldVarNames = new HashSet<String>()-->Line_21 $$ oldVarNames.remove(varName)[ FD ]
Line_49 $$ String value = predefinedVarValues.get(segmentName)-->Line_51 $$ offset += value.length()[ FD ]
Line_14 $$ String varName = template.getVariableNameAt(i)-->Line_28 $$ newVarName = varName[ FD ]
Line_45 $$ if (TemplateImpl.END.equals(segmentName)) -->Line_48 $$ if (predefinedVarValues != null && predefinedVarValues.containsKey(segmentName)) [ CD ]
Line_7 $$ Map<String, String> newVarNames = new HashMap<String, String>()-->Line_54 $$ if (newVarNames.containsKey(segmentName)) [ FD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_14 $$ String varName = template.getVariableNameAt(i)[ FD ]
Line_9 $$ for (int i = 0; i < template.getVariableCount(); i++) -->Line_30 $$ Variable var = new Variable(newVarName, template.getExpressionStringAt(i), template.getDefaultValueStringAt(i), template.isAlwaysStopAt(i))[ FD ]
Line_32 $$ if (mySegmentLimit > 0) -->Line_33 $$ LOGGER.warn("Template with more than " + mySegmentLimit + " segments had been build. Text: " + myText)[ CD ]
Line_15 $$ if (!TemplateImpl.INTERNAL_VARS_SET.contains(varName)) -->Line_20 $$ if (myVarNames.contains(varName)) [ CD ]
Line_15 $$ if (!TemplateImpl.INTERNAL_VARS_SET.contains(varName)) -->Line_19 $$ String newVarName[ CD ]
Line_10 $$ String varName = template.getVariableNameAt(i)-->Line_21 $$ oldVarNames.remove(varName)[ FD ]
Line_19 $$ String newVarName-->Line_28 $$ newVarName = varName[ FD ]
Line_15 $$ if (!TemplateImpl.INTERNAL_VARS_SET.contains(varName)) -->Line_16 $$ if (predefinedVarValues != null && predefinedVarValues.containsKey(varName)) [ CD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_9 $$ for (int i = 0; i < template.getVariableCount(); i++) [ CD ]
Line_13 $$ for (int i = 0; i < template.getVariableCount(); i++) -->Line_14 $$ String varName = template.getVariableNameAt(i)[ FD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_9 $$ for (int i = 0; i < template.getVariableCount(); i++) [ FD ]
Line_48 $$ if (predefinedVarValues != null && predefinedVarValues.containsKey(segmentName)) -->Line_50 $$ insertText(offset + localOffset, value, false)[ CD ]
Line_19 $$ String newVarName-->Line_23 $$ newVarNames.put(varName, newVarName)[ FD ]
Line_13 $$ for (int i = 0; i < template.getVariableCount(); i++) -->Line_15 $$ if (!TemplateImpl.INTERNAL_VARS_SET.contains(varName)) [ CD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_51 $$ offset += value.length()[ FD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_49 $$ String value = predefinedVarValues.get(segmentName)[ FD ]
Line_45 $$ if (TemplateImpl.END.equals(segmentName)) -->Line_54 $$ if (newVarNames.containsKey(segmentName)) [ CD ]
Line_10 $$ String varName = template.getVariableNameAt(i)-->Line_23 $$ newVarNames.put(varName, newVarName)[ FD ]
Line_14 $$ String varName = template.getVariableNameAt(i)-->Line_16 $$ if (predefinedVarValues != null && predefinedVarValues.containsKey(varName)) [ FD ]
Line_13 $$ for (int i = 0; i < template.getVariableCount(); i++) -->Line_44 $$ int localOffset = template.getSegmentOffset(i)[ FD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_42 $$ for (int i = 0; i < template.getSegmentsCount(); i++) [ FD ]
Line_43 $$ String segmentName = template.getSegmentName(i)-->Line_49 $$ String value = predefinedVarValues.get(segmentName)[ FD ]
Line_15 $$ if (!TemplateImpl.INTERNAL_VARS_SET.contains(varName)) -->Line_38 $$ myVarNames.add(newVarName)[ CD ]
Line_10 $$ String varName = template.getVariableNameAt(i)-->Line_20 $$ if (myVarNames.contains(varName)) [ FD ]
Line_14 $$ String varName = template.getVariableNameAt(i)-->Line_23 $$ newVarNames.put(varName, newVarName)[ FD ]
Line_22 $$ newVarName = generateUniqueVarName(oldVarNames, isEndVariable(varName))-->Line_38 $$ myVarNames.add(newVarName)[ FD ]
Line_61 $$ if (endOffset > 0 && endOffset != offset + text.length() && endOffset < myText.length() && !hasVarAtOffset(endOffset)) -->Line_63 $$ myVariables.add(new Variable(myLastEndVarName, "", "", true))[ CD ]
Line_10 $$ String varName = template.getVariableNameAt(i)-->Line_16 $$ if (predefinedVarValues != null && predefinedVarValues.containsKey(varName)) [ FD ]
Line_42 $$ for (int i = 0; i < template.getSegmentsCount(); i++) -->Line_44 $$ int localOffset = template.getSegmentOffset(i)[ FD ]
Line_60 $$ int endOffset = end >= 0 ? end : offset + text.length()-->Line_61 $$ if (endOffset > 0 && endOffset != offset + text.length() && endOffset < myText.length() && !hasVarAtOffset(endOffset)) [ FD ]
Line_9 $$ for (int i = 0; i < template.getVariableCount(); i++) -->Line_42 $$ for (int i = 0; i < template.getSegmentsCount(); i++) [ FD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_4 $$ removeEndVarAtOffset(offset)[ FD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_5 $$ String text = template.getTemplateText()[ CD ]
Line_14 $$ String varName = template.getVariableNameAt(i)-->Line_21 $$ oldVarNames.remove(varName)[ FD ]
Line_9 $$ for (int i = 0; i < template.getVariableCount(); i++) -->Line_10 $$ String varName = template.getVariableNameAt(i)[ FD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_46 $$ end = offset + localOffset[ FD ]
Line_19 $$ String newVarName-->Line_22 $$ newVarName = generateUniqueVarName(oldVarNames, isEndVariable(varName))[ FD ]
Line_9 $$ for (int i = 0; i < template.getVariableCount(); i++) -->Line_11 $$ oldVarNames.add(varName)[ CD ]
Line_20 $$ if (myVarNames.contains(varName)) -->Line_23 $$ newVarNames.put(varName, newVarName)[ CD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_6 $$ insertText(offset, text, false)[ FD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_13 $$ for (int i = 0; i < template.getVariableCount(); i++) [ CD ]
Line_43 $$ String segmentName = template.getSegmentName(i)-->Line_54 $$ if (newVarNames.containsKey(segmentName)) [ FD ]
Line_13 $$ for (int i = 0; i < template.getVariableCount(); i++) -->Line_30 $$ Variable var = new Variable(newVarName, template.getExpressionStringAt(i), template.getDefaultValueStringAt(i), template.isAlwaysStopAt(i))[ FD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_67 $$ return endOffset[ CD ]
Line_48 $$ if (predefinedVarValues != null && predefinedVarValues.containsKey(segmentName)) -->Line_51 $$ offset += value.length()[ CD ]
Line_10 $$ String varName = template.getVariableNameAt(i)-->Line_15 $$ if (!TemplateImpl.INTERNAL_VARS_SET.contains(varName)) [ FD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_3 $$ myIsToReformat = myText.length() > 0 || template.isToReformat()[ FD ]
Line_41 $$ int end = -1-->Line_46 $$ end = offset + localOffset[ FD ]
Line_10 $$ String varName = template.getVariableNameAt(i)-->Line_22 $$ newVarName = generateUniqueVarName(oldVarNames, isEndVariable(varName))[ FD ]
Line_54 $$ if (newVarNames.containsKey(segmentName)) -->Line_55 $$ segmentName = newVarNames.get(segmentName)[ CD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_44 $$ int localOffset = template.getSegmentOffset(i)[ FD ]
Line_13 $$ for (int i = 0; i < template.getVariableCount(); i++) -->Line_42 $$ for (int i = 0; i < template.getSegmentsCount(); i++) [ FD ]
Line_42 $$ for (int i = 0; i < template.getSegmentsCount(); i++) -->Line_43 $$ String segmentName = template.getSegmentName(i)[ FD ]
Line_10 $$ String varName = template.getVariableNameAt(i)-->Line_24 $$ if (varName.equals(myLastEndVarName)) [ FD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_7 $$ Map<String, String> newVarNames = new HashMap<String, String>()[ CD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_4 $$ removeEndVarAtOffset(offset)[ CD ]
Line_48 $$ if (predefinedVarValues != null && predefinedVarValues.containsKey(segmentName)) -->Line_49 $$ String value = predefinedVarValues.get(segmentName)[ CD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_43 $$ String segmentName = template.getSegmentName(i)[ FD ]
Line_9 $$ for (int i = 0; i < template.getVariableCount(); i++) -->Line_43 $$ String segmentName = template.getSegmentName(i)[ FD ]
Line_45 $$ if (TemplateImpl.END.equals(segmentName)) -->Line_46 $$ end = offset + localOffset[ CD ]
Line_2 $$ public int insertTemplate(int offset, TemplateImpl template, Map<String, String> predefinedVarValues) -->Line_16 $$ if (predefinedVarValues != null && predefinedVarValues.containsKey(varName)) [ FD ]
Line_20 $$ if (myVarNames.contains(varName)) -->Line_24 $$ if (varName.equals(myLastEndVarName)) [ CD ]
