Line_17 $$ if (logger.isInfoEnabled()) -->Line_18 $$ logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure")[ CD ]
Line_13 $$ boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)-->Line_14 $$ Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)[ FD ]
Line_12 $$ if (beanClass != null && callback.include(beanClass, beanName)) -->Line_13 $$ boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)[ CD ]
Line_14 $$ Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)-->Line_15 $$ if (!ScopedProxyUtils.isScopedTarget(beanName) && !this.beans.containsValue(beanName) && (beanInstance == null || !CollectionUtils.containsInstance(this.beans.values(), beanInstance))) [ FD ]
Line_2 $$ private void autodetect(AutodetectCallback callback) -->Line_3 $$ Set<String> beanNames = new LinkedHashSet<String>(this.beanFactory.getBeanDefinitionCount())[ CD ]
Line_8 $$ for (String beanName : beanNames) -->Line_16 $$ this.beans.put(beanName, (beanInstance != null ? beanInstance : beanName))[ FD ]
Line_15 $$ if (!ScopedProxyUtils.isScopedTarget(beanName) && !this.beans.containsValue(beanName) && (beanInstance == null || !CollectionUtils.containsInstance(this.beans.values(), beanInstance))) -->Line_21 $$ if (logger.isDebugEnabled()) [ CD ]
Line_12 $$ if (beanClass != null && callback.include(beanClass, beanName)) -->Line_15 $$ if (!ScopedProxyUtils.isScopedTarget(beanName) && !this.beans.containsValue(beanName) && (beanInstance == null || !CollectionUtils.containsInstance(this.beans.values(), beanInstance))) [ CD ]
Line_2 $$ private void autodetect(AutodetectCallback callback) -->Line_4 $$ beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))[ CD ]
Line_2 $$ private void autodetect(AutodetectCallback callback) -->Line_5 $$ if (this.beanFactory instanceof ConfigurableBeanFactory) [ CD ]
Line_8 $$ for (String beanName : beanNames) -->Line_15 $$ if (!ScopedProxyUtils.isScopedTarget(beanName) && !this.beans.containsValue(beanName) && (beanInstance == null || !CollectionUtils.containsInstance(this.beans.values(), beanInstance))) [ FD ]
Line_15 $$ if (!ScopedProxyUtils.isScopedTarget(beanName) && !this.beans.containsValue(beanName) && (beanInstance == null || !CollectionUtils.containsInstance(this.beans.values(), beanInstance))) -->Line_16 $$ this.beans.put(beanName, (beanInstance != null ? beanInstance : beanName))[ CD ]
Line_3 $$ Set<String> beanNames = new LinkedHashSet<String>(this.beanFactory.getBeanDefinitionCount())-->Line_4 $$ beanNames.addAll(Arrays.asList(this.beanFactory.getBeanDefinitionNames()))[ FD ]
Line_8 $$ for (String beanName : beanNames) -->Line_14 $$ Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)[ FD ]
Line_21 $$ if (logger.isDebugEnabled()) -->Line_22 $$ logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure")[ CD ]
Line_8 $$ for (String beanName : beanNames) -->Line_13 $$ boolean lazyInit = isBeanDefinitionLazyInit(this.beanFactory, beanName)[ FD ]
Line_8 $$ for (String beanName : beanNames) -->Line_12 $$ if (beanClass != null && callback.include(beanClass, beanName)) [ FD ]
Line_5 $$ if (this.beanFactory instanceof ConfigurableBeanFactory) -->Line_6 $$ beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))[ CD ]
Line_3 $$ Set<String> beanNames = new LinkedHashSet<String>(this.beanFactory.getBeanDefinitionCount())-->Line_6 $$ beanNames.addAll(Arrays.asList(((ConfigurableBeanFactory) this.beanFactory).getSingletonNames()))[ FD ]
Line_8 $$ for (String beanName : beanNames) -->Line_11 $$ Class<?> beanClass = this.beanFactory.getType(beanName)[ FD ]
Line_8 $$ for (String beanName : beanNames) -->Line_9 $$ if (!isExcluded(beanName) && !isBeanDefinitionAbstract(this.beanFactory, beanName)) [ FD ]
Line_11 $$ Class<?> beanClass = this.beanFactory.getType(beanName)-->Line_12 $$ if (beanClass != null && callback.include(beanClass, beanName)) [ FD ]
Line_2 $$ private void autodetect(AutodetectCallback callback) -->Line_12 $$ if (beanClass != null && callback.include(beanClass, beanName)) [ FD ]
Line_12 $$ if (beanClass != null && callback.include(beanClass, beanName)) -->Line_14 $$ Object beanInstance = (!lazyInit ? this.beanFactory.getBean(beanName) : null)[ CD ]
Line_15 $$ if (!ScopedProxyUtils.isScopedTarget(beanName) && !this.beans.containsValue(beanName) && (beanInstance == null || !CollectionUtils.containsInstance(this.beans.values(), beanInstance))) -->Line_17 $$ if (logger.isInfoEnabled()) [ CD ]
