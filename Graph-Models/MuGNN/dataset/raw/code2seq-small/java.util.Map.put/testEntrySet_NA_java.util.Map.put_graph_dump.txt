Line_23 $$ Map.Entry<Key, Value> entry = iterator.next()-->Line_40 $$ entry.setValue(_testValue2)[ FD ]
Line_2 $$ public void testEntrySet() -->Line_40 $$ entry.setValue(_testValue2)[ CD ]
Line_2 $$ public void testEntrySet() -->Line_27 $$ _assertEventQueue(Event.UNMAP_KEY_FOR_QUERY)[ CD ]
Line_3 $$ Set<Map.Entry<Key, Value>> entrySet = _concurrentMap.entrySet()-->Line_51 $$ entrySet.clear()[ FD ]
Line_2 $$ public void testEntrySet() -->Line_33 $$ Assert.assertFalse(iterator.hasNext())[ CD ]
Line_2 $$ public void testEntrySet() -->Line_31 $$ _assertEventQueue(Event.UNMAP_KEY_FOR_QUERY, Event.UNMAP_VALUE_FOR_QUERY)[ CD ]
Line_23 $$ Map.Entry<Key, Value> entry = iterator.next()-->Line_28 $$ Assert.assertNotEquals(entry, new SimpleEntry<Key, Value>(_testKey, new Value("")))[ FD ]
Line_23 $$ Map.Entry<Key, Value> entry = iterator.next()-->Line_38 $$ Assert.assertTrue(entrySet.contains(entry))[ FD ]
Line_3 $$ Set<Map.Entry<Key, Value>> entrySet = _concurrentMap.entrySet()-->Line_13 $$ Assert.assertFalse(entrySet.contains(new SimpleEntry<Key, Value>(_testKey, new Value(""))))[ FD ]
Line_3 $$ Set<Map.Entry<Key, Value>> entrySet = _concurrentMap.entrySet()-->Line_5 $$ Assert.assertTrue(entrySet.isEmpty())[ FD ]
Line_2 $$ public void testEntrySet() -->Line_45 $$ Assert.assertTrue(entrySet.isEmpty())[ CD ]
Line_2 $$ public void testEntrySet() -->Line_26 $$ Assert.assertNotEquals(entry, new SimpleEntry<Key, Value>(new Key("someKey"), _testValue))[ CD ]
Line_21 $$ Iterator<Map.Entry<Key, Value>> iterator = entrySet.iterator()-->Line_22 $$ Assert.assertTrue(iterator.hasNext())[ FD ]
Line_2 $$ public void testEntrySet() -->Line_51 $$ entrySet.clear()[ CD ]
Line_3 $$ Set<Map.Entry<Key, Value>> entrySet = _concurrentMap.entrySet()-->Line_4 $$ Assert.assertSame(entrySet, _concurrentMap.entrySet())[ FD ]
Line_2 $$ public void testEntrySet() -->Line_47 $$ _assertEventQueue(Event.UNMAP_KEY_FOR_QUERY, Event.MAP_KEY_FOR_QUERY)[ CD ]
Line_23 $$ Map.Entry<Key, Value> entry = iterator.next()-->Line_32 $$ Assert.assertEquals(_testKey.hashCode() ^ _testValue.hashCode(), entry.hashCode())[ FD ]
Line_3 $$ Set<Map.Entry<Key, Value>> entrySet = _concurrentMap.entrySet()-->Line_38 $$ Assert.assertTrue(entrySet.contains(entry))[ FD ]
Line_2 $$ public void testEntrySet() -->Line_9 $$ _assertEventQueue(Event.MAP_KEY, Event.MAP_VALUE)[ CD ]
Line_23 $$ Map.Entry<Key, Value> entry = iterator.next()-->Line_36 $$ Assert.assertSame(_testValue, entry.getValue())[ FD ]
Line_2 $$ public void testEntrySet() -->Line_16 $$ _assertEventQueue(Event.MAP_KEY_FOR_QUERY, Event.MAP_VALUE_FOR_QUERY)[ CD ]
Line_2 $$ public void testEntrySet() -->Line_34 $$ Assert.assertSame(_testKey, entry.getKey())[ CD ]
Line_2 $$ public void testEntrySet() -->Line_30 $$ Assert.assertEquals(entry, new SimpleEntry<Key, Value>(_testKey, _testValue))[ CD ]
Line_2 $$ public void testEntrySet() -->Line_37 $$ _assertEventQueue(Event.UNMAP_VALUE_FOR_QUERY)[ CD ]
Line_2 $$ public void testEntrySet() -->Line_8 $$ Assert.assertNull(_concurrentMap.put(_testKey, _testValue))[ CD ]
Line_2 $$ public void testEntrySet() -->Line_20 $$ _assertEventQueue(Event.MAP_KEY, Event.MAP_VALUE)[ CD ]
Line_3 $$ Set<Map.Entry<Key, Value>> entrySet = _concurrentMap.entrySet()-->Line_45 $$ Assert.assertTrue(entrySet.isEmpty())[ FD ]
Line_2 $$ public void testEntrySet() -->Line_14 $$ _assertEventQueue(Event.MAP_KEY_FOR_QUERY, Event.UNMAP_VALUE_FOR_QUERY)[ CD ]
Line_2 $$ public void testEntrySet() -->Line_41 $$ _assertEventQueue(Event.UNMAP_KEY_FOR_QUERY, Event.MAP_VALUE_FOR_QUERY, Event.UNMAP_VALUE_FOR_QUERY, Event.MAP_KEY, Event.MAP_VALUE, Event.UNMAP_KEY, Event.UNMAP_VALUE)[ CD ]
Line_2 $$ public void testEntrySet() -->Line_7 $$ Assert.assertFalse(entrySet.remove(new Object()))[ CD ]
Line_2 $$ public void testEntrySet() -->Line_10 $$ Assert.assertEquals(1, entrySet.size())[ CD ]
Line_23 $$ Map.Entry<Key, Value> entry = iterator.next()-->Line_30 $$ Assert.assertEquals(entry, new SimpleEntry<Key, Value>(_testKey, _testValue))[ FD ]
Line_23 $$ Map.Entry<Key, Value> entry = iterator.next()-->Line_25 $$ Assert.assertNotEquals(entry, new Object())[ FD ]
Line_3 $$ Set<Map.Entry<Key, Value>> entrySet = _concurrentMap.entrySet()-->Line_50 $$ Assert.assertEquals(1, entrySet.size())[ FD ]
Line_3 $$ Set<Map.Entry<Key, Value>> entrySet = _concurrentMap.entrySet()-->Line_11 $$ Assert.assertTrue(entrySet.contains(new SimpleEntry<Key, Value>(_testKey, _testValue)))[ FD ]
Line_2 $$ public void testEntrySet() -->Line_39 $$ _assertEventQueue(Event.UNMAP_KEY_FOR_QUERY, Event.MAP_KEY_FOR_QUERY, Event.UNMAP_VALUE_FOR_QUERY, Event.UNMAP_VALUE_FOR_QUERY)[ CD ]
Line_2 $$ public void testEntrySet() -->Line_23 $$ Map.Entry<Key, Value> entry = iterator.next()[ CD ]
Line_2 $$ public void testEntrySet() -->Line_21 $$ Iterator<Map.Entry<Key, Value>> iterator = entrySet.iterator()[ CD ]
Line_21 $$ Iterator<Map.Entry<Key, Value>> iterator = entrySet.iterator()-->Line_33 $$ Assert.assertFalse(iterator.hasNext())[ FD ]
Line_2 $$ public void testEntrySet() -->Line_52 $$ Assert.assertTrue(entrySet.isEmpty())[ CD ]
Line_2 $$ public void testEntrySet() -->Line_49 $$ _assertEventQueue(Event.MAP_KEY, Event.MAP_VALUE)[ CD ]
Line_2 $$ public void testEntrySet() -->Line_44 $$ iterator.remove()[ CD ]
Line_2 $$ public void testEntrySet() -->Line_12 $$ _assertEventQueue(Event.MAP_KEY_FOR_QUERY, Event.UNMAP_VALUE_FOR_QUERY)[ CD ]
Line_2 $$ public void testEntrySet() -->Line_24 $$ Assert.assertEquals(entry, entry)[ CD ]
Line_2 $$ public void testEntrySet() -->Line_18 $$ _assertEventQueue(Event.MAP_KEY_FOR_QUERY, Event.MAP_VALUE_FOR_QUERY, Event.UNMAP_VALUE)[ CD ]
Line_2 $$ public void testEntrySet() -->Line_28 $$ Assert.assertNotEquals(entry, new SimpleEntry<Key, Value>(_testKey, new Value("")))[ CD ]
Line_2 $$ public void testEntrySet() -->Line_38 $$ Assert.assertTrue(entrySet.contains(entry))[ CD ]
Line_3 $$ Set<Map.Entry<Key, Value>> entrySet = _concurrentMap.entrySet()-->Line_46 $$ Assert.assertFalse(entrySet.contains(entry))[ FD ]
Line_23 $$ Map.Entry<Key, Value> entry = iterator.next()-->Line_46 $$ Assert.assertFalse(entrySet.contains(entry))[ FD ]
Line_2 $$ public void testEntrySet() -->Line_50 $$ Assert.assertEquals(1, entrySet.size())[ CD ]
Line_23 $$ Map.Entry<Key, Value> entry = iterator.next()-->Line_26 $$ Assert.assertNotEquals(entry, new SimpleEntry<Key, Value>(new Key("someKey"), _testValue))[ FD ]
Line_23 $$ Map.Entry<Key, Value> entry = iterator.next()-->Line_24 $$ Assert.assertEquals(entry, entry)[ FD ]
Line_2 $$ public void testEntrySet() -->Line_22 $$ Assert.assertTrue(iterator.hasNext())[ CD ]
Line_2 $$ public void testEntrySet() -->Line_19 $$ Assert.assertNull(_concurrentMap.put(_testKey, _testValue))[ CD ]
Line_21 $$ Iterator<Map.Entry<Key, Value>> iterator = entrySet.iterator()-->Line_23 $$ Map.Entry<Key, Value> entry = iterator.next()[ FD ]
Line_23 $$ Map.Entry<Key, Value> entry = iterator.next()-->Line_34 $$ Assert.assertSame(_testKey, entry.getKey())[ FD ]
Line_2 $$ public void testEntrySet() -->Line_5 $$ Assert.assertTrue(entrySet.isEmpty())[ CD ]
Line_2 $$ public void testEntrySet() -->Line_46 $$ Assert.assertFalse(entrySet.contains(entry))[ CD ]
Line_2 $$ public void testEntrySet() -->Line_29 $$ _assertEventQueue(Event.UNMAP_KEY_FOR_QUERY, Event.UNMAP_VALUE_FOR_QUERY)[ CD ]
Line_21 $$ Iterator<Map.Entry<Key, Value>> iterator = entrySet.iterator()-->Line_44 $$ iterator.remove()[ FD ]
Line_2 $$ public void testEntrySet() -->Line_4 $$ Assert.assertSame(entrySet, _concurrentMap.entrySet())[ CD ]
Line_2 $$ public void testEntrySet() -->Line_36 $$ Assert.assertSame(_testValue, entry.getValue())[ CD ]
Line_2 $$ public void testEntrySet() -->Line_35 $$ _assertEventQueue(Event.UNMAP_KEY_FOR_QUERY)[ CD ]
Line_2 $$ public void testEntrySet() -->Line_43 $$ _assertEventQueue(Event.MAP_KEY_FOR_QUERY, Event.UNMAP_VALUE_FOR_QUERY)[ CD ]
Line_2 $$ public void testEntrySet() -->Line_42 $$ Assert.assertSame(_testValue2, _concurrentMap.get(_testKey))[ CD ]
Line_2 $$ public void testEntrySet() -->Line_48 $$ Assert.assertNull(_concurrentMap.put(_testKey, _testValue))[ CD ]
Line_3 $$ Set<Map.Entry<Key, Value>> entrySet = _concurrentMap.entrySet()-->Line_21 $$ Iterator<Map.Entry<Key, Value>> iterator = entrySet.iterator()[ FD ]
Line_3 $$ Set<Map.Entry<Key, Value>> entrySet = _concurrentMap.entrySet()-->Line_6 $$ Assert.assertFalse(entrySet.contains(new Object()))[ FD ]
Line_2 $$ public void testEntrySet() -->Line_32 $$ Assert.assertEquals(_testKey.hashCode() ^ _testValue.hashCode(), entry.hashCode())[ CD ]
Line_3 $$ Set<Map.Entry<Key, Value>> entrySet = _concurrentMap.entrySet()-->Line_52 $$ Assert.assertTrue(entrySet.isEmpty())[ FD ]
Line_2 $$ public void testEntrySet() -->Line_13 $$ Assert.assertFalse(entrySet.contains(new SimpleEntry<Key, Value>(_testKey, new Value(""))))[ CD ]
Line_3 $$ Set<Map.Entry<Key, Value>> entrySet = _concurrentMap.entrySet()-->Line_15 $$ Assert.assertFalse(entrySet.remove(new SimpleEntry<Key, Value>(_testKey, new Value(""))))[ FD ]
Line_3 $$ Set<Map.Entry<Key, Value>> entrySet = _concurrentMap.entrySet()-->Line_10 $$ Assert.assertEquals(1, entrySet.size())[ FD ]
Line_2 $$ public void testEntrySet() -->Line_6 $$ Assert.assertFalse(entrySet.contains(new Object()))[ CD ]
Line_2 $$ public void testEntrySet() -->Line_25 $$ Assert.assertNotEquals(entry, new Object())[ CD ]
Line_2 $$ public void testEntrySet() -->Line_3 $$ Set<Map.Entry<Key, Value>> entrySet = _concurrentMap.entrySet()[ CD ]
Line_2 $$ public void testEntrySet() -->Line_15 $$ Assert.assertFalse(entrySet.remove(new SimpleEntry<Key, Value>(_testKey, new Value(""))))[ CD ]
Line_3 $$ Set<Map.Entry<Key, Value>> entrySet = _concurrentMap.entrySet()-->Line_17 $$ Assert.assertTrue(entrySet.remove(new SimpleEntry<Key, Value>(_testKey, _testValue)))[ FD ]
Line_3 $$ Set<Map.Entry<Key, Value>> entrySet = _concurrentMap.entrySet()-->Line_7 $$ Assert.assertFalse(entrySet.remove(new Object()))[ FD ]
Line_2 $$ public void testEntrySet() -->Line_17 $$ Assert.assertTrue(entrySet.remove(new SimpleEntry<Key, Value>(_testKey, _testValue)))[ CD ]
Line_2 $$ public void testEntrySet() -->Line_11 $$ Assert.assertTrue(entrySet.contains(new SimpleEntry<Key, Value>(_testKey, _testValue)))[ CD ]
