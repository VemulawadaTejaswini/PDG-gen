Line_20 $$ Map<String, String> map = new HashMap<String, String>()-->Line_23 $$ verify(map)[ FD ]
Line_2 $$ public void testValueTypes() throws IOException -->Line_6 $$ assertEquals(Integer.MIN_VALUE, GenericObjectMapper.read(GenericObjectMapper.write((long) Integer.MIN_VALUE)))[ CD ]
Line_2 $$ public void testValueTypes() throws IOException -->Line_21 $$ map.put("k1", "v1")[ CD ]
Line_2 $$ public void testValueTypes() throws IOException -->Line_9 $$ verify(Long.MAX_VALUE)[ CD ]
Line_16 $$ List<String> list = new ArrayList<String>()-->Line_19 $$ verify(list)[ FD ]
Line_2 $$ public void testValueTypes() throws IOException -->Line_16 $$ List<String> list = new ArrayList<String>()[ CD ]
Line_2 $$ public void testValueTypes() throws IOException -->Line_17 $$ list.add("123")[ CD ]
Line_2 $$ public void testValueTypes() throws IOException -->Line_13 $$ verify(1.23)[ CD ]
Line_2 $$ public void testValueTypes() throws IOException -->Line_14 $$ verify("abc")[ CD ]
Line_2 $$ public void testValueTypes() throws IOException -->Line_22 $$ map.put("k2", "v2")[ CD ]
Line_2 $$ public void testValueTypes() throws IOException -->Line_10 $$ verify(Long.MIN_VALUE)[ CD ]
Line_2 $$ public void testValueTypes() throws IOException -->Line_19 $$ verify(list)[ CD ]
Line_2 $$ public void testValueTypes() throws IOException -->Line_20 $$ Map<String, String> map = new HashMap<String, String>()[ CD ]
Line_16 $$ List<String> list = new ArrayList<String>()-->Line_17 $$ list.add("123")[ FD ]
Line_20 $$ Map<String, String> map = new HashMap<String, String>()-->Line_22 $$ map.put("k2", "v2")[ FD ]
Line_2 $$ public void testValueTypes() throws IOException -->Line_5 $$ assertEquals(Integer.MAX_VALUE, GenericObjectMapper.read(GenericObjectMapper.write((long) Integer.MAX_VALUE)))[ CD ]
Line_2 $$ public void testValueTypes() throws IOException -->Line_3 $$ verify(Integer.MAX_VALUE)[ CD ]
Line_2 $$ public void testValueTypes() throws IOException -->Line_7 $$ verify((long) Integer.MAX_VALUE + 1l)[ CD ]
Line_2 $$ public void testValueTypes() throws IOException -->Line_15 $$ verify(true)[ CD ]
Line_2 $$ public void testValueTypes() throws IOException -->Line_4 $$ verify(Integer.MIN_VALUE)[ CD ]
Line_20 $$ Map<String, String> map = new HashMap<String, String>()-->Line_21 $$ map.put("k1", "v1")[ FD ]
Line_2 $$ public void testValueTypes() throws IOException -->Line_18 $$ list.add("abc")[ CD ]
Line_16 $$ List<String> list = new ArrayList<String>()-->Line_18 $$ list.add("abc")[ FD ]
Line_2 $$ public void testValueTypes() throws IOException -->Line_23 $$ verify(map)[ CD ]
Line_2 $$ public void testValueTypes() throws IOException -->Line_8 $$ verify((long) Integer.MIN_VALUE - 1l)[ CD ]
Line_2 $$ public void testValueTypes() throws IOException -->Line_11 $$ assertEquals(42, GenericObjectMapper.read(GenericObjectMapper.write(42l)))[ CD ]
Line_2 $$ public void testValueTypes() throws IOException -->Line_12 $$ verify(42)[ CD ]
