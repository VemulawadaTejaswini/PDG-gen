Line_41 $$ if (e != null) -->Line_44 $$ if (persister.hasCollections()) [ CD ]
Line_17 $$ final EntityPersister persister-->Line_20 $$ persister = source.getEntityPersister(event.getEntityName(), object)[ FD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_57 $$ if (result != null) [ CD ]
Line_19 $$ if (e == null) -->Line_21 $$ id = persister.getIdentifier(object, event.getSession())[ CD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_53 $$ evictCachedCollections(persister, id, source.getFactory())[ CD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_64 $$ source.getLoadQueryInfluencers().setInternalFetchProfile(previousFetchProfile)[ CD ]
Line_11 $$ final Object object = source.getPersistenceContext().unproxyAndReassociate(event.getObject())-->Line_39 $$ refreshedAlready.put(object, object)[ FD ]
Line_41 $$ if (e != null) -->Line_43 $$ source.getPersistenceContext().removeEntity(key)[ CD ]
Line_18 $$ final Serializable id-->Line_23 $$ LOG.tracev("Refreshing transient [ FD ]
Line_17 $$ final EntityPersister persister-->Line_65 $$ UnresolvableObjectException.throwIfNull(result, id, persister.getEntityName())[ FD ]
Line_21 $$ id = persister.getIdentifier(object, event.getSession())-->Line_53 $$ evictCachedCollections(persister, id, source.getFactory())[ FD ]
Line_48 $$ if (persister.hasCache()) -->Line_51 $$ cache.evict(ck)[ CD ]
Line_22 $$ if (LOG.isTraceEnabled()) -->Line_23 $$ LOG.tracev("Refreshing transient [ CD ]
Line_3 $$ final EventSource source = event.getSession()-->Line_43 $$ source.getPersistenceContext().removeEntity(key)[ FD ]
Line_20 $$ persister = source.getEntityPersister(event.getEntityName(), object)-->Line_23 $$ LOG.tracev("Refreshing transient [ FD ]
Line_16 $$ final EntityEntry e = source.getPersistenceContext().getEntry(object)-->Line_61 $$ source.setReadOnly(result, (e == null ? source.isDefaultReadOnly() : e.isReadOnly()))[ FD ]
Line_37 $$ id = e.getId()-->Line_50 $$ Object ck = cache.generateCacheKey(id, persister, source.getFactory(), source.getTenantIdentifier())[ FD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_5 $$ if (source.getPersistenceContext().reassociateIfUninitializedProxy(event.getObject())) [ FD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_39 $$ refreshedAlready.put(object, object)[ CD ]
Line_3 $$ final EventSource source = event.getSession()-->Line_55 $$ source.getLoadQueryInfluencers().setInternalFetchProfile("refresh")[ FD ]
Line_19 $$ if (e == null) -->Line_25 $$ final EntityKey key = source.generateEntityKey(id, persister)[ CD ]
Line_16 $$ final EntityEntry e = source.getPersistenceContext().getEntry(object)-->Line_33 $$ if (!e.isExistsInDatabase()) [ FD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_56 $$ Object result = persister.load(id, object, event.getLockOptions(), source)[ CD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_19 $$ if (e == null) [ CD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_20 $$ persister = source.getEntityPersister(event.getEntityName(), object)[ FD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_3 $$ final EventSource source = event.getSession()[ FD ]
Line_19 $$ if (e == null) -->Line_30 $$ if (LOG.isTraceEnabled()) [ CD ]
Line_20 $$ persister = source.getEntityPersister(event.getEntityName(), object)-->Line_44 $$ if (persister.hasCollections()) [ FD ]
Line_5 $$ if (source.getPersistenceContext().reassociateIfUninitializedProxy(event.getObject())) -->Line_9 $$ return[ CD ]
Line_17 $$ final EntityPersister persister-->Line_58 $$ if (!persister.isMutable()) [ FD ]
Line_37 $$ id = e.getId()-->Line_56 $$ Object result = persister.load(id, object, event.getLockOptions(), source)[ FD ]
Line_20 $$ persister = source.getEntityPersister(event.getEntityName(), object)-->Line_65 $$ UnresolvableObjectException.throwIfNull(result, id, persister.getEntityName())[ FD ]
Line_21 $$ id = persister.getIdentifier(object, event.getSession())-->Line_23 $$ LOG.tracev("Refreshing transient [ FD ]
Line_20 $$ persister = source.getEntityPersister(event.getEntityName(), object)-->Line_45 $$ new EvictVisitor(source).process(object, persister)[ FD ]
Line_17 $$ final EntityPersister persister-->Line_23 $$ LOG.tracev("Refreshing transient [ FD ]
Line_3 $$ final EventSource source = event.getSession()-->Line_59 $$ source.setReadOnly(result, true)[ FD ]
Line_3 $$ final EventSource source = event.getSession()-->Line_5 $$ if (source.getPersistenceContext().reassociateIfUninitializedProxy(event.getObject())) [ FD ]
Line_18 $$ final Serializable id-->Line_50 $$ Object ck = cache.generateCacheKey(id, persister, source.getFactory(), source.getTenantIdentifier())[ FD ]
Line_16 $$ final EntityEntry e = source.getPersistenceContext().getEntry(object)-->Line_31 $$ LOG.tracev("Refreshing ", MessageHelper.infoString(e.getPersister(), e.getId(), source.getFactory()))[ FD ]
Line_16 $$ final EntityEntry e = source.getPersistenceContext().getEntry(object)-->Line_37 $$ id = e.getId()[ FD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_11 $$ final Object object = source.getPersistenceContext().unproxyAndReassociate(event.getObject())[ CD ]
Line_21 $$ id = persister.getIdentifier(object, event.getSession())-->Line_27 $$ throw new PersistentObjectException("attempted to refresh transient instance when persistent instance was already associated with the Session: " + MessageHelper.infoString(persister, id, source.getFactory()))[ FD ]
Line_3 $$ final EventSource source = event.getSession()-->Line_4 $$ boolean isTransient = !source.contains(event.getObject())[ FD ]
Line_20 $$ persister = source.getEntityPersister(event.getEntityName(), object)-->Line_48 $$ if (persister.hasCache()) [ FD ]
Line_36 $$ persister = e.getPersister()-->Line_50 $$ Object ck = cache.generateCacheKey(id, persister, source.getFactory(), source.getTenantIdentifier())[ FD ]
Line_18 $$ final Serializable id-->Line_21 $$ id = persister.getIdentifier(object, event.getSession())[ FD ]
Line_21 $$ id = persister.getIdentifier(object, event.getSession())-->Line_50 $$ Object ck = cache.generateCacheKey(id, persister, source.getFactory(), source.getTenantIdentifier())[ FD ]
Line_19 $$ if (e == null) -->Line_22 $$ if (LOG.isTraceEnabled()) [ CD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_7 $$ source.setReadOnly(event.getObject(), source.isDefaultReadOnly())[ FD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_40 $$ Cascade.cascade(CascadingActions.REFRESH, CascadePoint.BEFORE_REFRESH, source, persister, object, refreshedAlready)[ FD ]
Line_37 $$ id = e.getId()-->Line_65 $$ UnresolvableObjectException.throwIfNull(result, id, persister.getEntityName())[ FD ]
Line_21 $$ id = persister.getIdentifier(object, event.getSession())-->Line_37 $$ id = e.getId()[ FD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_3 $$ final EventSource source = event.getSession()[ CD ]
Line_6 $$ if (isTransient) -->Line_7 $$ source.setReadOnly(event.getObject(), source.isDefaultReadOnly())[ CD ]
Line_16 $$ final EntityEntry e = source.getPersistenceContext().getEntry(object)-->Line_36 $$ persister = e.getPersister()[ FD ]
Line_17 $$ final EntityPersister persister-->Line_42 $$ final EntityKey key = source.generateEntityKey(id, persister)[ FD ]
Line_56 $$ Object result = persister.load(id, object, event.getLockOptions(), source)-->Line_57 $$ if (result != null) [ FD ]
Line_25 $$ final EntityKey key = source.generateEntityKey(id, persister)-->Line_26 $$ if (source.getPersistenceContext().getEntry(key) != null) [ FD ]
Line_20 $$ persister = source.getEntityPersister(event.getEntityName(), object)-->Line_53 $$ evictCachedCollections(persister, id, source.getFactory())[ FD ]
Line_49 $$ final EntityRegionAccessStrategy cache = persister.getCacheAccessStrategy()-->Line_51 $$ cache.evict(ck)[ FD ]
Line_17 $$ final EntityPersister persister-->Line_44 $$ if (persister.hasCollections()) [ FD ]
Line_50 $$ Object ck = cache.generateCacheKey(id, persister, source.getFactory(), source.getTenantIdentifier())-->Line_51 $$ cache.evict(ck)[ FD ]
Line_3 $$ final EventSource source = event.getSession()-->Line_54 $$ String previousFetchProfile = source.getLoadQueryInfluencers().getInternalFetchProfile()[ FD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_18 $$ final Serializable id[ CD ]
Line_36 $$ persister = e.getPersister()-->Line_42 $$ final EntityKey key = source.generateEntityKey(id, persister)[ FD ]
Line_16 $$ final EntityEntry e = source.getPersistenceContext().getEntry(object)-->Line_19 $$ if (e == null) [ FD ]
Line_21 $$ id = persister.getIdentifier(object, event.getSession())-->Line_65 $$ UnresolvableObjectException.throwIfNull(result, id, persister.getEntityName())[ FD ]
Line_44 $$ if (persister.hasCollections()) -->Line_45 $$ new EvictVisitor(source).process(object, persister)[ CD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_54 $$ String previousFetchProfile = source.getLoadQueryInfluencers().getInternalFetchProfile()[ CD ]
Line_54 $$ String previousFetchProfile = source.getLoadQueryInfluencers().getInternalFetchProfile()-->Line_64 $$ source.getLoadQueryInfluencers().setInternalFetchProfile(previousFetchProfile)[ FD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_48 $$ if (persister.hasCache()) [ CD ]
Line_12 $$ if (refreshedAlready.containsKey(object)) -->Line_14 $$ return[ CD ]
Line_25 $$ final EntityKey key = source.generateEntityKey(id, persister)-->Line_43 $$ source.getPersistenceContext().removeEntity(key)[ FD ]
Line_3 $$ final EventSource source = event.getSession()-->Line_11 $$ final Object object = source.getPersistenceContext().unproxyAndReassociate(event.getObject())[ FD ]
Line_19 $$ if (e == null) -->Line_36 $$ persister = e.getPersister()[ CD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_39 $$ refreshedAlready.put(object, object)[ FD ]
Line_56 $$ Object result = persister.load(id, object, event.getLockOptions(), source)-->Line_61 $$ source.setReadOnly(result, (e == null ? source.isDefaultReadOnly() : e.isReadOnly()))[ FD ]
Line_3 $$ final EventSource source = event.getSession()-->Line_16 $$ final EntityEntry e = source.getPersistenceContext().getEntry(object)[ FD ]
Line_17 $$ final EntityPersister persister-->Line_25 $$ final EntityKey key = source.generateEntityKey(id, persister)[ FD ]
Line_3 $$ final EventSource source = event.getSession()-->Line_61 $$ source.setReadOnly(result, (e == null ? source.isDefaultReadOnly() : e.isReadOnly()))[ FD ]
Line_36 $$ persister = e.getPersister()-->Line_40 $$ Cascade.cascade(CascadingActions.REFRESH, CascadePoint.BEFORE_REFRESH, source, persister, object, refreshedAlready)[ FD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_5 $$ if (source.getPersistenceContext().reassociateIfUninitializedProxy(event.getObject())) [ CD ]
Line_18 $$ final Serializable id-->Line_25 $$ final EntityKey key = source.generateEntityKey(id, persister)[ FD ]
Line_16 $$ final EntityEntry e = source.getPersistenceContext().getEntry(object)-->Line_41 $$ if (e != null) [ FD ]
Line_3 $$ final EventSource source = event.getSession()-->Line_25 $$ final EntityKey key = source.generateEntityKey(id, persister)[ FD ]
Line_3 $$ final EventSource source = event.getSession()-->Line_27 $$ throw new PersistentObjectException("attempted to refresh transient instance when persistent instance was already associated with the Session: " + MessageHelper.infoString(persister, id, source.getFactory()))[ FD ]
Line_17 $$ final EntityPersister persister-->Line_50 $$ Object ck = cache.generateCacheKey(id, persister, source.getFactory(), source.getTenantIdentifier())[ FD ]
Line_3 $$ final EventSource source = event.getSession()-->Line_56 $$ Object result = persister.load(id, object, event.getLockOptions(), source)[ FD ]
Line_11 $$ final Object object = source.getPersistenceContext().unproxyAndReassociate(event.getObject())-->Line_20 $$ persister = source.getEntityPersister(event.getEntityName(), object)[ FD ]
Line_36 $$ persister = e.getPersister()-->Line_53 $$ evictCachedCollections(persister, id, source.getFactory())[ FD ]
Line_18 $$ final Serializable id-->Line_65 $$ UnresolvableObjectException.throwIfNull(result, id, persister.getEntityName())[ FD ]
Line_17 $$ final EntityPersister persister-->Line_48 $$ if (persister.hasCache()) [ FD ]
Line_11 $$ final Object object = source.getPersistenceContext().unproxyAndReassociate(event.getObject())-->Line_21 $$ id = persister.getIdentifier(object, event.getSession())[ FD ]
Line_21 $$ id = persister.getIdentifier(object, event.getSession())-->Line_42 $$ final EntityKey key = source.generateEntityKey(id, persister)[ FD ]
Line_18 $$ final Serializable id-->Line_27 $$ throw new PersistentObjectException("attempted to refresh transient instance when persistent instance was already associated with the Session: " + MessageHelper.infoString(persister, id, source.getFactory()))[ FD ]
Line_5 $$ if (source.getPersistenceContext().reassociateIfUninitializedProxy(event.getObject())) -->Line_6 $$ if (isTransient) [ CD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_11 $$ final Object object = source.getPersistenceContext().unproxyAndReassociate(event.getObject())[ FD ]
Line_36 $$ persister = e.getPersister()-->Line_45 $$ new EvictVisitor(source).process(object, persister)[ FD ]
Line_16 $$ final EntityEntry e = source.getPersistenceContext().getEntry(object)-->Line_34 $$ throw new UnresolvableObjectException(e.getId(), "this instance does not yet exist as a row in the database")[ FD ]
Line_3 $$ final EventSource source = event.getSession()-->Line_26 $$ if (source.getPersistenceContext().getEntry(key) != null) [ FD ]
Line_19 $$ if (e == null) -->Line_37 $$ id = e.getId()[ CD ]
Line_17 $$ final EntityPersister persister-->Line_45 $$ new EvictVisitor(source).process(object, persister)[ FD ]
Line_17 $$ final EntityPersister persister-->Line_36 $$ persister = e.getPersister()[ FD ]
Line_17 $$ final EntityPersister persister-->Line_49 $$ final EntityRegionAccessStrategy cache = persister.getCacheAccessStrategy()[ FD ]
Line_18 $$ final Serializable id-->Line_53 $$ evictCachedCollections(persister, id, source.getFactory())[ FD ]
Line_36 $$ persister = e.getPersister()-->Line_49 $$ final EntityRegionAccessStrategy cache = persister.getCacheAccessStrategy()[ FD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_17 $$ final EntityPersister persister[ CD ]
Line_20 $$ persister = source.getEntityPersister(event.getEntityName(), object)-->Line_50 $$ Object ck = cache.generateCacheKey(id, persister, source.getFactory(), source.getTenantIdentifier())[ FD ]
Line_20 $$ persister = source.getEntityPersister(event.getEntityName(), object)-->Line_21 $$ id = persister.getIdentifier(object, event.getSession())[ FD ]
Line_30 $$ if (LOG.isTraceEnabled()) -->Line_31 $$ LOG.tracev("Refreshing ", MessageHelper.infoString(e.getPersister(), e.getId(), source.getFactory()))[ CD ]
Line_37 $$ id = e.getId()-->Line_42 $$ final EntityKey key = source.generateEntityKey(id, persister)[ FD ]
Line_48 $$ if (persister.hasCache()) -->Line_49 $$ final EntityRegionAccessStrategy cache = persister.getCacheAccessStrategy()[ CD ]
Line_3 $$ final EventSource source = event.getSession()-->Line_40 $$ Cascade.cascade(CascadingActions.REFRESH, CascadePoint.BEFORE_REFRESH, source, persister, object, refreshedAlready)[ FD ]
Line_3 $$ final EventSource source = event.getSession()-->Line_50 $$ Object ck = cache.generateCacheKey(id, persister, source.getFactory(), source.getTenantIdentifier())[ FD ]
Line_19 $$ if (e == null) -->Line_26 $$ if (source.getPersistenceContext().getEntry(key) != null) [ CD ]
Line_58 $$ if (!persister.isMutable()) -->Line_59 $$ source.setReadOnly(result, true)[ CD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_12 $$ if (refreshedAlready.containsKey(object)) [ CD ]
Line_37 $$ id = e.getId()-->Line_53 $$ evictCachedCollections(persister, id, source.getFactory())[ FD ]
Line_49 $$ final EntityRegionAccessStrategy cache = persister.getCacheAccessStrategy()-->Line_50 $$ Object ck = cache.generateCacheKey(id, persister, source.getFactory(), source.getTenantIdentifier())[ FD ]
Line_58 $$ if (!persister.isMutable()) -->Line_61 $$ source.setReadOnly(result, (e == null ? source.isDefaultReadOnly() : e.isReadOnly()))[ CD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_40 $$ Cascade.cascade(CascadingActions.REFRESH, CascadePoint.BEFORE_REFRESH, source, persister, object, refreshedAlready)[ CD ]
Line_20 $$ persister = source.getEntityPersister(event.getEntityName(), object)-->Line_25 $$ final EntityKey key = source.generateEntityKey(id, persister)[ FD ]
Line_3 $$ final EventSource source = event.getSession()-->Line_7 $$ source.setReadOnly(event.getObject(), source.isDefaultReadOnly())[ FD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_21 $$ id = persister.getIdentifier(object, event.getSession())[ FD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_4 $$ boolean isTransient = !source.contains(event.getObject())[ CD ]
Line_3 $$ final EventSource source = event.getSession()-->Line_42 $$ final EntityKey key = source.generateEntityKey(id, persister)[ FD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_41 $$ if (e != null) [ CD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_16 $$ final EntityEntry e = source.getPersistenceContext().getEntry(object)[ CD ]
Line_36 $$ persister = e.getPersister()-->Line_48 $$ if (persister.hasCache()) [ FD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_4 $$ boolean isTransient = !source.contains(event.getObject())[ FD ]
Line_3 $$ final EventSource source = event.getSession()-->Line_53 $$ evictCachedCollections(persister, id, source.getFactory())[ FD ]
Line_3 $$ final EventSource source = event.getSession()-->Line_20 $$ persister = source.getEntityPersister(event.getEntityName(), object)[ FD ]
Line_36 $$ persister = e.getPersister()-->Line_56 $$ Object result = persister.load(id, object, event.getLockOptions(), source)[ FD ]
Line_17 $$ final EntityPersister persister-->Line_27 $$ throw new PersistentObjectException("attempted to refresh transient instance when persistent instance was already associated with the Session: " + MessageHelper.infoString(persister, id, source.getFactory()))[ FD ]
Line_17 $$ final EntityPersister persister-->Line_56 $$ Object result = persister.load(id, object, event.getLockOptions(), source)[ FD ]
Line_20 $$ persister = source.getEntityPersister(event.getEntityName(), object)-->Line_58 $$ if (!persister.isMutable()) [ FD ]
Line_3 $$ final EventSource source = event.getSession()-->Line_64 $$ source.getLoadQueryInfluencers().setInternalFetchProfile(previousFetchProfile)[ FD ]
Line_19 $$ if (e == null) -->Line_20 $$ persister = source.getEntityPersister(event.getEntityName(), object)[ CD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_56 $$ Object result = persister.load(id, object, event.getLockOptions(), source)[ FD ]
Line_20 $$ persister = source.getEntityPersister(event.getEntityName(), object)-->Line_36 $$ persister = e.getPersister()[ FD ]
Line_56 $$ Object result = persister.load(id, object, event.getLockOptions(), source)-->Line_59 $$ source.setReadOnly(result, true)[ FD ]
Line_11 $$ final Object object = source.getPersistenceContext().unproxyAndReassociate(event.getObject())-->Line_56 $$ Object result = persister.load(id, object, event.getLockOptions(), source)[ FD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_12 $$ if (refreshedAlready.containsKey(object)) [ FD ]
Line_11 $$ final Object object = source.getPersistenceContext().unproxyAndReassociate(event.getObject())-->Line_16 $$ final EntityEntry e = source.getPersistenceContext().getEntry(object)[ FD ]
Line_20 $$ persister = source.getEntityPersister(event.getEntityName(), object)-->Line_27 $$ throw new PersistentObjectException("attempted to refresh transient instance when persistent instance was already associated with the Session: " + MessageHelper.infoString(persister, id, source.getFactory()))[ FD ]
Line_17 $$ final EntityPersister persister-->Line_40 $$ Cascade.cascade(CascadingActions.REFRESH, CascadePoint.BEFORE_REFRESH, source, persister, object, refreshedAlready)[ FD ]
Line_20 $$ persister = source.getEntityPersister(event.getEntityName(), object)-->Line_40 $$ Cascade.cascade(CascadingActions.REFRESH, CascadePoint.BEFORE_REFRESH, source, persister, object, refreshedAlready)[ FD ]
Line_11 $$ final Object object = source.getPersistenceContext().unproxyAndReassociate(event.getObject())-->Line_40 $$ Cascade.cascade(CascadingActions.REFRESH, CascadePoint.BEFORE_REFRESH, source, persister, object, refreshedAlready)[ FD ]
Line_36 $$ persister = e.getPersister()-->Line_44 $$ if (persister.hasCollections()) [ FD ]
Line_17 $$ final EntityPersister persister-->Line_21 $$ id = persister.getIdentifier(object, event.getSession())[ FD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_55 $$ source.getLoadQueryInfluencers().setInternalFetchProfile("refresh")[ CD ]
Line_21 $$ id = persister.getIdentifier(object, event.getSession())-->Line_56 $$ Object result = persister.load(id, object, event.getLockOptions(), source)[ FD ]
Line_20 $$ persister = source.getEntityPersister(event.getEntityName(), object)-->Line_56 $$ Object result = persister.load(id, object, event.getLockOptions(), source)[ FD ]
Line_48 $$ if (persister.hasCache()) -->Line_50 $$ Object ck = cache.generateCacheKey(id, persister, source.getFactory(), source.getTenantIdentifier())[ CD ]
Line_3 $$ final EventSource source = event.getSession()-->Line_31 $$ LOG.tracev("Refreshing ", MessageHelper.infoString(e.getPersister(), e.getId(), source.getFactory()))[ FD ]
Line_11 $$ final Object object = source.getPersistenceContext().unproxyAndReassociate(event.getObject())-->Line_12 $$ if (refreshedAlready.containsKey(object)) [ FD ]
Line_21 $$ id = persister.getIdentifier(object, event.getSession())-->Line_25 $$ final EntityKey key = source.generateEntityKey(id, persister)[ FD ]
Line_18 $$ final Serializable id-->Line_37 $$ id = e.getId()[ FD ]
Line_20 $$ persister = source.getEntityPersister(event.getEntityName(), object)-->Line_42 $$ final EntityKey key = source.generateEntityKey(id, persister)[ FD ]
Line_12 $$ if (refreshedAlready.containsKey(object)) -->Line_13 $$ LOG.trace("Already refreshed")[ CD ]
Line_18 $$ final Serializable id-->Line_42 $$ final EntityKey key = source.generateEntityKey(id, persister)[ FD ]
Line_56 $$ Object result = persister.load(id, object, event.getLockOptions(), source)-->Line_65 $$ UnresolvableObjectException.throwIfNull(result, id, persister.getEntityName())[ FD ]
Line_3 $$ final EventSource source = event.getSession()-->Line_23 $$ LOG.tracev("Refreshing transient [ FD ]
Line_17 $$ final EntityPersister persister-->Line_53 $$ evictCachedCollections(persister, id, source.getFactory())[ FD ]
Line_2 $$ public void onRefresh(RefreshEvent event, Map refreshedAlready) -->Line_65 $$ UnresolvableObjectException.throwIfNull(result, id, persister.getEntityName())[ CD ]
Line_57 $$ if (result != null) -->Line_58 $$ if (!persister.isMutable()) [ CD ]
Line_36 $$ persister = e.getPersister()-->Line_58 $$ if (!persister.isMutable()) [ FD ]
Line_41 $$ if (e != null) -->Line_42 $$ final EntityKey key = source.generateEntityKey(id, persister)[ CD ]
Line_11 $$ final Object object = source.getPersistenceContext().unproxyAndReassociate(event.getObject())-->Line_45 $$ new EvictVisitor(source).process(object, persister)[ FD ]
Line_20 $$ persister = source.getEntityPersister(event.getEntityName(), object)-->Line_49 $$ final EntityRegionAccessStrategy cache = persister.getCacheAccessStrategy()[ FD ]
Line_18 $$ final Serializable id-->Line_56 $$ Object result = persister.load(id, object, event.getLockOptions(), source)[ FD ]
Line_19 $$ if (e == null) -->Line_33 $$ if (!e.isExistsInDatabase()) [ CD ]
Line_36 $$ persister = e.getPersister()-->Line_65 $$ UnresolvableObjectException.throwIfNull(result, id, persister.getEntityName())[ FD ]
