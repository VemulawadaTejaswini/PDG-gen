Line_9 $$ Map<String, String[]> preferenceMap = new HashMap()-->Line_10 $$ preferenceMap.put("assetVocabularyId", new String[] [ FD ]
Line_14 $$ AssetVocabulary importedVocabulary = AssetVocabularyLocalServiceUtil.fetchAssetVocabulary(importedAssetVocabularyId)-->Line_20 $$ Assert.assertEquals("Vocabulary " + importedAssetVocabularyId + " does not belong to group " + expectedGroupId, expectedGroupId, importedVocabulary.getGroupId())[ FD ]
Line_18 $$ expectedGroupId = importedGroup.getGroupId()-->Line_20 $$ Assert.assertEquals("Vocabulary " + importedAssetVocabularyId + " does not belong to group " + expectedGroupId, expectedGroupId, importedVocabulary.getGroupId())[ FD ]
Line_2 $$ protected void testSortByAssetVocabulary(boolean globalVocabulary) throws Exception -->Line_9 $$ Map<String, String[]> preferenceMap = new HashMap()[ CD ]
Line_16 $$ long expectedGroupId = groupId-->Line_20 $$ Assert.assertEquals("Vocabulary " + importedAssetVocabularyId + " does not belong to group " + expectedGroupId, expectedGroupId, importedVocabulary.getGroupId())[ FD ]
Line_2 $$ protected void testSortByAssetVocabulary(boolean globalVocabulary) throws Exception -->Line_11 $$ PortletPreferences portletPreferences = getImportedPortletPreferences(preferenceMap)[ CD ]
Line_2 $$ protected void testSortByAssetVocabulary(boolean globalVocabulary) throws Exception -->Line_8 $$ AssetVocabulary assetVocabulary = AssetVocabularyLocalServiceUtil.addVocabulary(TestPropsValues.getUserId(), groupId, RandomTestUtil.randomString(), ServiceContextTestUtil.getServiceContext(groupId))[ CD ]
Line_2 $$ protected void testSortByAssetVocabulary(boolean globalVocabulary) throws Exception -->Line_4 $$ if (globalVocabulary) [ CD ]
Line_13 $$ long importedAssetVocabularyId = GetterUtil.getLong(portletPreferences.getValue("assetVocabularyId", null))-->Line_14 $$ AssetVocabulary importedVocabulary = AssetVocabularyLocalServiceUtil.fetchAssetVocabulary(importedAssetVocabularyId)[ FD ]
Line_4 $$ if (globalVocabulary) -->Line_5 $$ Company company = CompanyLocalServiceUtil.getCompany(layout.getCompanyId())[ CD ]
Line_2 $$ protected void testSortByAssetVocabulary(boolean globalVocabulary) throws Exception -->Line_13 $$ long importedAssetVocabularyId = GetterUtil.getLong(portletPreferences.getValue("assetVocabularyId", null))[ CD ]
Line_2 $$ protected void testSortByAssetVocabulary(boolean globalVocabulary) throws Exception -->Line_3 $$ long groupId = group.getGroupId()[ CD ]
Line_2 $$ protected void testSortByAssetVocabulary(boolean globalVocabulary) throws Exception -->Line_21 $$ AssetVocabularyLocalServiceUtil.deleteAssetVocabulary(assetVocabulary)[ CD ]
Line_5 $$ Company company = CompanyLocalServiceUtil.getCompany(layout.getCompanyId())-->Line_6 $$ groupId = company.getGroupId()[ FD ]
Line_2 $$ protected void testSortByAssetVocabulary(boolean globalVocabulary) throws Exception -->Line_12 $$ Assert.assertNotNull("Portlet preference \"assetVocabularyId\" is null", portletPreferences.getValue("assetVocabularyId", null))[ CD ]
Line_2 $$ protected void testSortByAssetVocabulary(boolean globalVocabulary) throws Exception -->Line_16 $$ long expectedGroupId = groupId[ CD ]
Line_2 $$ protected void testSortByAssetVocabulary(boolean globalVocabulary) throws Exception -->Line_17 $$ if (!globalVocabulary) [ CD ]
Line_17 $$ if (!globalVocabulary) -->Line_18 $$ expectedGroupId = importedGroup.getGroupId()[ CD ]
Line_8 $$ AssetVocabulary assetVocabulary = AssetVocabularyLocalServiceUtil.addVocabulary(TestPropsValues.getUserId(), groupId, RandomTestUtil.randomString(), ServiceContextTestUtil.getServiceContext(groupId))-->Line_10 $$ preferenceMap.put("assetVocabularyId", new String[] [ FD ]
Line_2 $$ protected void testSortByAssetVocabulary(boolean globalVocabulary) throws Exception -->Line_17 $$ if (!globalVocabulary) [ FD ]
Line_3 $$ long groupId = group.getGroupId()-->Line_8 $$ AssetVocabulary assetVocabulary = AssetVocabularyLocalServiceUtil.addVocabulary(TestPropsValues.getUserId(), groupId, RandomTestUtil.randomString(), ServiceContextTestUtil.getServiceContext(groupId))[ FD ]
Line_16 $$ long expectedGroupId = groupId-->Line_18 $$ expectedGroupId = importedGroup.getGroupId()[ FD ]
Line_4 $$ if (globalVocabulary) -->Line_6 $$ groupId = company.getGroupId()[ CD ]
Line_2 $$ protected void testSortByAssetVocabulary(boolean globalVocabulary) throws Exception -->Line_15 $$ Assert.assertNotNull("Vocabulary " + importedAssetVocabularyId + " does not exist", importedVocabulary)[ CD ]
Line_2 $$ protected void testSortByAssetVocabulary(boolean globalVocabulary) throws Exception -->Line_20 $$ Assert.assertEquals("Vocabulary " + importedAssetVocabularyId + " does not belong to group " + expectedGroupId, expectedGroupId, importedVocabulary.getGroupId())[ CD ]
Line_11 $$ PortletPreferences portletPreferences = getImportedPortletPreferences(preferenceMap)-->Line_13 $$ long importedAssetVocabularyId = GetterUtil.getLong(portletPreferences.getValue("assetVocabularyId", null))[ FD ]
Line_11 $$ PortletPreferences portletPreferences = getImportedPortletPreferences(preferenceMap)-->Line_12 $$ Assert.assertNotNull("Portlet preference \"assetVocabularyId\" is null", portletPreferences.getValue("assetVocabularyId", null))[ FD ]
Line_14 $$ AssetVocabulary importedVocabulary = AssetVocabularyLocalServiceUtil.fetchAssetVocabulary(importedAssetVocabularyId)-->Line_15 $$ Assert.assertNotNull("Vocabulary " + importedAssetVocabularyId + " does not exist", importedVocabulary)[ FD ]
Line_6 $$ groupId = company.getGroupId()-->Line_8 $$ AssetVocabulary assetVocabulary = AssetVocabularyLocalServiceUtil.addVocabulary(TestPropsValues.getUserId(), groupId, RandomTestUtil.randomString(), ServiceContextTestUtil.getServiceContext(groupId))[ FD ]
Line_2 $$ protected void testSortByAssetVocabulary(boolean globalVocabulary) throws Exception -->Line_10 $$ preferenceMap.put("assetVocabularyId", new String[] [ CD ]
Line_8 $$ AssetVocabulary assetVocabulary = AssetVocabularyLocalServiceUtil.addVocabulary(TestPropsValues.getUserId(), groupId, RandomTestUtil.randomString(), ServiceContextTestUtil.getServiceContext(groupId))-->Line_21 $$ AssetVocabularyLocalServiceUtil.deleteAssetVocabulary(assetVocabulary)[ FD ]
Line_9 $$ Map<String, String[]> preferenceMap = new HashMap()-->Line_11 $$ PortletPreferences portletPreferences = getImportedPortletPreferences(preferenceMap)[ FD ]
Line_2 $$ protected void testSortByAssetVocabulary(boolean globalVocabulary) throws Exception -->Line_14 $$ AssetVocabulary importedVocabulary = AssetVocabularyLocalServiceUtil.fetchAssetVocabulary(importedAssetVocabularyId)[ CD ]
Line_3 $$ long groupId = group.getGroupId()-->Line_6 $$ groupId = company.getGroupId()[ FD ]
