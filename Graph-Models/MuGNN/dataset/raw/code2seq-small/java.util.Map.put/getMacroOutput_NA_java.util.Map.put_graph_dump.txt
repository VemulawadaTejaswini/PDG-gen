Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_7 $$ DummyMacroRequestContext rc = new DummyMacroRequestContext(request)[ CD ]
Line_36 $$ FreeMarkerView view = new FreeMarkerView()-->Line_42 $$ view.render(model, request, response)[ FD ]
Line_5 $$ FileSystemResource resource = new FileSystemResource(System.getProperty("java.io.tmpdir") + "/tmp.ftl")-->Line_6 $$ FileCopyUtils.copy("<#import \"spring.ftl\" as spring />\n" + macro, new FileWriter(resource.getPath()))[ FD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_37 $$ view.setBeanName("myView")[ CD ]
Line_36 $$ FreeMarkerView view = new FreeMarkerView()-->Line_38 $$ view.setUrl("tmp.ftl")[ FD ]
Line_30 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_34 $$ model.put("nameOptionMap", names)[ FD ]
Line_36 $$ FreeMarkerView view = new FreeMarkerView()-->Line_41 $$ view.setServletContext(new MockServletContext())[ FD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_3 $$ String macro = fetchMacro(name)[ FD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_19 $$ fred.setJedi(true)[ CD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_32 $$ model.put("springMacroRequestContext", rc)[ CD ]
Line_17 $$ TestBean darren = new TestBean("Darren", 99)-->Line_23 $$ request.setAttribute("command", darren)[ FD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_3 $$ String macro = fetchMacro(name)[ CD ]
Line_30 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_35 $$ model.put("options", names.values())[ FD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_13 $$ themeMsgMap.put("hello", "Howdy!")[ CD ]
Line_30 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_33 $$ model.put("msgArgs", new Object[] [ FD ]
Line_8 $$ Map<String, String> msgMap = new HashMap<String, String>()-->Line_10 $$ msgMap.put("world", "Mundo")[ FD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_5 $$ FileSystemResource resource = new FileSystemResource(System.getProperty("java.io.tmpdir") + "/tmp.ftl")[ CD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_11 $$ rc.setMessageMap(msgMap)[ CD ]
Line_12 $$ Map<String, String> themeMsgMap = new HashMap<String, String>()-->Line_15 $$ rc.setThemeMessageMap(themeMsgMap)[ FD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_43 $$ String output = response.getContentAsString()[ CD ]
Line_24 $$ Map<String, String> names = new HashMap<String, String>()-->Line_28 $$ names.put("Rob&Harrop", "Rob Harrop")[ FD ]
Line_17 $$ TestBean darren = new TestBean("Darren", 99)-->Line_21 $$ darren.setJedi(true)[ FD ]
Line_17 $$ TestBean darren = new TestBean("Darren", 99)-->Line_22 $$ darren.setStringArray(new String[] [ FD ]
Line_29 $$ Configuration config = fc.getConfiguration()-->Line_40 $$ view.setConfiguration(config)[ FD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_38 $$ view.setUrl("tmp.ftl")[ CD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_41 $$ view.setServletContext(new MockServletContext())[ CD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_39 $$ view.setExposeSpringMacroHelpers(false)[ CD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_6 $$ FileCopyUtils.copy("<#import \"spring.ftl\" as spring />\n" + macro, new FileWriter(resource.getPath()))[ CD ]
Line_30 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_31 $$ model.put("command", darren)[ FD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_44 $$ return output.trim()[ CD ]
Line_30 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_32 $$ model.put("springMacroRequestContext", rc)[ FD ]
Line_24 $$ Map<String, String> names = new HashMap<String, String>()-->Line_27 $$ names.put("Fred", "Fred Bloggs")[ FD ]
Line_36 $$ FreeMarkerView view = new FreeMarkerView()-->Line_37 $$ view.setBeanName("myView")[ FD ]
Line_7 $$ DummyMacroRequestContext rc = new DummyMacroRequestContext(request)-->Line_16 $$ rc.setContextPath("/springtest")[ FD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_42 $$ view.render(model, request, response)[ CD ]
Line_17 $$ TestBean darren = new TestBean("Darren", 99)-->Line_20 $$ darren.setSpouse(fred)[ FD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_33 $$ model.put("msgArgs", new Object[] [ CD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_27 $$ names.put("Fred", "Fred Bloggs")[ CD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_24 $$ Map<String, String> names = new HashMap<String, String>()[ CD ]
Line_24 $$ Map<String, String> names = new HashMap<String, String>()-->Line_34 $$ model.put("nameOptionMap", names)[ FD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_34 $$ model.put("nameOptionMap", names)[ CD ]
Line_12 $$ Map<String, String> themeMsgMap = new HashMap<String, String>()-->Line_14 $$ themeMsgMap.put("world", "Mundo!")[ FD ]
Line_7 $$ DummyMacroRequestContext rc = new DummyMacroRequestContext(request)-->Line_32 $$ model.put("springMacroRequestContext", rc)[ FD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_4 $$ assertNotNull(macro)[ CD ]
Line_36 $$ FreeMarkerView view = new FreeMarkerView()-->Line_39 $$ view.setExposeSpringMacroHelpers(false)[ FD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_14 $$ themeMsgMap.put("world", "Mundo!")[ CD ]
Line_12 $$ Map<String, String> themeMsgMap = new HashMap<String, String>()-->Line_13 $$ themeMsgMap.put("hello", "Howdy!")[ FD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_21 $$ darren.setJedi(true)[ CD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_10 $$ msgMap.put("world", "Mundo")[ CD ]
Line_30 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_42 $$ view.render(model, request, response)[ FD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_30 $$ Map<String, Object> model = new HashMap<String, Object>()[ CD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_15 $$ rc.setThemeMessageMap(themeMsgMap)[ CD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_31 $$ model.put("command", darren)[ CD ]
Line_18 $$ TestBean fred = new TestBean("Fred")-->Line_19 $$ fred.setJedi(true)[ FD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_25 $$ names.put("Darren", "Darren Davison")[ CD ]
Line_36 $$ FreeMarkerView view = new FreeMarkerView()-->Line_40 $$ view.setConfiguration(config)[ FD ]
Line_3 $$ String macro = fetchMacro(name)-->Line_4 $$ assertNotNull(macro)[ FD ]
Line_7 $$ DummyMacroRequestContext rc = new DummyMacroRequestContext(request)-->Line_11 $$ rc.setMessageMap(msgMap)[ FD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_29 $$ Configuration config = fc.getConfiguration()[ CD ]
Line_24 $$ Map<String, String> names = new HashMap<String, String>()-->Line_26 $$ names.put("John", "John Doe")[ FD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_35 $$ model.put("options", names.values())[ CD ]
Line_8 $$ Map<String, String> msgMap = new HashMap<String, String>()-->Line_9 $$ msgMap.put("hello", "Howdy")[ FD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_9 $$ msgMap.put("hello", "Howdy")[ CD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_36 $$ FreeMarkerView view = new FreeMarkerView()[ CD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_18 $$ TestBean fred = new TestBean("Fred")[ CD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_16 $$ rc.setContextPath("/springtest")[ CD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_20 $$ darren.setSpouse(fred)[ CD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_8 $$ Map<String, String> msgMap = new HashMap<String, String>()[ CD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_28 $$ names.put("Rob&Harrop", "Rob Harrop")[ CD ]
Line_8 $$ Map<String, String> msgMap = new HashMap<String, String>()-->Line_11 $$ rc.setMessageMap(msgMap)[ FD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_40 $$ view.setConfiguration(config)[ CD ]
Line_7 $$ DummyMacroRequestContext rc = new DummyMacroRequestContext(request)-->Line_15 $$ rc.setThemeMessageMap(themeMsgMap)[ FD ]
Line_43 $$ String output = response.getContentAsString()-->Line_44 $$ return output.trim()[ FD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_22 $$ darren.setStringArray(new String[] [ CD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_12 $$ Map<String, String> themeMsgMap = new HashMap<String, String>()[ CD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_26 $$ names.put("John", "John Doe")[ CD ]
Line_24 $$ Map<String, String> names = new HashMap<String, String>()-->Line_35 $$ model.put("options", names.values())[ FD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_17 $$ TestBean darren = new TestBean("Darren", 99)[ CD ]
Line_24 $$ Map<String, String> names = new HashMap<String, String>()-->Line_25 $$ names.put("Darren", "Darren Davison")[ FD ]
Line_17 $$ TestBean darren = new TestBean("Darren", 99)-->Line_31 $$ model.put("command", darren)[ FD ]
Line_2 $$ private String getMacroOutput(String name) throws Exception -->Line_23 $$ request.setAttribute("command", darren)[ CD ]
Line_18 $$ TestBean fred = new TestBean("Fred")-->Line_20 $$ darren.setSpouse(fred)[ FD ]
