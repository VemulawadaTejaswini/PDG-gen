Line_58 $$ for (int j = 0; j < numberOfIds; j++) -->Line_108 $$ if (!map.containsKey(j)) [ FD ]
Line_146 $$ for (int i = 0; i < numberOfIdsPerThread; ++i) -->Line_148 $$ GetResponse response = client().prepareGet("test", "type1", Integer.toString(i)).execute().actionGet()[ FD ]
Line_2 $$ public void testStressUpdateDeleteConcurrency() throws Exception -->Line_128 $$ for (int i = 0; i < numberOfThreads; i++) [ CD ]
Line_115 $$ do -->Line_117 $$ logger.info("[[ CD ]
Line_2 $$ public void testStressUpdateDeleteConcurrency() throws Exception -->Line_4 $$ ensureGreen()[ CD ]
Line_148 $$ GetResponse response = client().prepareGet("test", "type1", Integer.toString(i)).execute().actionGet()-->Line_160 $$ assertThat(response.getVersion() + totalFailures, equalTo((long) ((numberOfUpdatesPerId * numberOfThreads * 2) + 1)))[ FD ]
Line_149 $$ if (response.isExists()) -->Line_158 $$ logger.error("Actual version [[ CD ]
Line_128 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_154 $$ totalFailures += ut.failedMap.get(i)[ FD ]
Line_12 $$ final class UpdateThread extends Thread -->Line_119 $$ requestsOutstanding.tryAcquire(maxRequests, msRemaining, TimeUnit.MILLISECONDS)[ FD ]
Line_8 $$ final int retryOnConflict = randomIntBetween(0, 1)-->Line_62 $$ UpdateRequest ur = client().prepareUpdate("test", "type1", Integer.toString(j)).setScript(new Script("field", ScriptService.ScriptType.INLINE, "field_inc", null)).setRetryOnConflict(retryOnConflict).setUpsert(jsonBuilder().startObject().field("field", 1).endObject()).request()[ FD ]
Line_9 $$ final CountDownLatch latch = new CountDownLatch(numberOfThreads)-->Line_104 $$ latch.countDown()[ FD ]
Line_108 $$ if (!map.containsKey(j)) -->Line_109 $$ map.put(j, 0)[ CD ]
Line_129 $$ UpdateThread ut = new UpdateThread(numberOfIdsPerThread, numberOfUpdatesPerId)-->Line_136 $$ ut.join()[ FD ]
Line_62 $$ UpdateRequest ur = client().prepareUpdate("test", "type1", Integer.toString(j)).setScript(new Script("field", ScriptService.ScriptType.INLINE, "field_inc", null)).setRetryOnConflict(retryOnConflict).setUpsert(jsonBuilder().startObject().field("field", 1).endObject()).request()-->Line_63 $$ client().update(ur, new UpdateListener(j))[ FD ]
Line_148 $$ GetResponse response = client().prepareGet("test", "type1", Integer.toString(i)).execute().actionGet()-->Line_158 $$ logger.error("Actual version [[ FD ]
Line_2 $$ public void testStressUpdateDeleteConcurrency() throws Exception -->Line_146 $$ for (int i = 0; i < numberOfIdsPerThread; ++i) [ CD ]
Line_157 $$ expectedVersion -= totalFailures-->Line_158 $$ logger.error("Actual version [[ FD ]
Line_12 $$ final class UpdateThread extends Thread -->Line_109 $$ map.put(j, 0)[ FD ]
Line_58 $$ for (int j = 0; j < numberOfIds; j++) -->Line_62 $$ UpdateRequest ur = client().prepareUpdate("test", "type1", Integer.toString(j)).setScript(new Script("field", ScriptService.ScriptType.INLINE, "field_inc", null)).setRetryOnConflict(retryOnConflict).setUpsert(jsonBuilder().startObject().field("field", 1).endObject()).request()[ FD ]
Line_2 $$ public void testStressUpdateDeleteConcurrency() throws Exception -->Line_7 $$ final int numberOfUpdatesPerId = scaledRandomIntBetween(10, 100)[ CD ]
Line_116 $$ long msRemaining = timeOut.getMillis() - (System.currentTimeMillis() - start)-->Line_119 $$ requestsOutstanding.tryAcquire(maxRequests, msRemaining, TimeUnit.MILLISECONDS)[ FD ]
Line_2 $$ public void testStressUpdateDeleteConcurrency() throws Exception -->Line_142 $$ for (int i = 0; i < numberOfIdsPerThread; ++i) [ CD ]
Line_12 $$ final class UpdateThread extends Thread -->Line_96 $$ failures.add(e)[ FD ]
Line_58 $$ for (int j = 0; j < numberOfIds; j++) -->Line_83 $$ incrementMapValue(j, failedMap)[ FD ]
Line_58 $$ for (int j = 0; j < numberOfIds; j++) -->Line_111 $$ map.put(j, map.get(j) + 1)[ FD ]
Line_142 $$ for (int i = 0; i < numberOfIdsPerThread; ++i) -->Line_143 $$ UpdateResponse ur = client().prepareUpdate("test", "type1", Integer.toString(i)).setScript(new Script("field", ScriptService.ScriptType.INLINE, "field_inc", null)).setRetryOnConflict(Integer.MAX_VALUE).setUpsert(jsonBuilder().startObject().field("field", 1).endObject()).execute().actionGet()[ CD ]
Line_147 $$ int totalFailures = 0-->Line_158 $$ logger.error("Actual version [[ FD ]
Line_142 $$ for (int i = 0; i < numberOfIdsPerThread; ++i) -->Line_148 $$ GetResponse response = client().prepareGet("test", "type1", Integer.toString(i)).execute().actionGet()[ FD ]
Line_129 $$ UpdateThread ut = new UpdateThread(numberOfIdsPerThread, numberOfUpdatesPerId)-->Line_131 $$ threads.add(ut)[ FD ]
Line_148 $$ GetResponse response = client().prepareGet("test", "type1", Integer.toString(i)).execute().actionGet()-->Line_150 $$ assertThat(response.getId(), equalTo(Integer.toString(i)))[ FD ]
Line_148 $$ GetResponse response = client().prepareGet("test", "type1", Integer.toString(i)).execute().actionGet()-->Line_159 $$ assertThat(response.getVersion(), equalTo((long) expectedVersion))[ FD ]
Line_153 $$ if (ut.failedMap.containsKey(i)) -->Line_154 $$ totalFailures += ut.failedMap.get(i)[ CD ]
Line_2 $$ public void testStressUpdateDeleteConcurrency() throws Exception -->Line_134 $$ latch.await()[ CD ]
Line_128 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_143 $$ UpdateResponse ur = client().prepareUpdate("test", "type1", Integer.toString(i)).setScript(new Script("field", ScriptService.ScriptType.INLINE, "field_inc", null)).setRetryOnConflict(Integer.MAX_VALUE).setUpsert(jsonBuilder().startObject().field("field", 1).endObject()).execute().actionGet()[ FD ]
Line_12 $$ final class UpdateThread extends Thread -->Line_115 $$ do [ CD ]
Line_58 $$ for (int j = 0; j < numberOfIds; j++) -->Line_109 $$ map.put(j, 0)[ FD ]
Line_6 $$ final int numberOfIdsPerThread = scaledRandomIntBetween(3, 10)-->Line_142 $$ for (int i = 0; i < numberOfIdsPerThread; ++i) [ FD ]
Line_149 $$ if (response.isExists()) -->Line_150 $$ assertThat(response.getId(), equalTo(Integer.toString(i)))[ CD ]
Line_11 $$ final List<Throwable> failures = new CopyOnWriteArrayList()-->Line_102 $$ failures.add(ete)[ FD ]
Line_12 $$ final class UpdateThread extends Thread -->Line_117 $$ logger.info("[[ FD ]
Line_10 $$ final CountDownLatch startLatch = new CountDownLatch(1)-->Line_56 $$ startLatch.await()[ FD ]
Line_12 $$ final class UpdateThread extends Thread -->Line_108 $$ if (!map.containsKey(j)) [ CD ]
Line_147 $$ int totalFailures = 0-->Line_154 $$ totalFailures += ut.failedMap.get(i)[ FD ]
Line_146 $$ for (int i = 0; i < numberOfIdsPerThread; ++i) -->Line_147 $$ int totalFailures = 0[ CD ]
Line_115 $$ do -->Line_116 $$ long msRemaining = timeOut.getMillis() - (System.currentTimeMillis() - start)[ CD ]
Line_12 $$ final class UpdateThread extends Thread -->Line_45 $$ deleteRequestsOutstanding.release(1)[ CD ]
Line_12 $$ final class UpdateThread extends Thread -->Line_108 $$ if (!map.containsKey(j)) [ FD ]
Line_146 $$ for (int i = 0; i < numberOfIdsPerThread; ++i) -->Line_149 $$ if (response.isExists()) [ CD ]
Line_128 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_148 $$ GetResponse response = client().prepareGet("test", "type1", Integer.toString(i)).execute().actionGet()[ FD ]
Line_78 $$ DeleteRequest dr = client().prepareDelete("test", "type1", Integer.toString(j)).request()-->Line_79 $$ client().delete(dr, new DeleteListener(j))[ FD ]
Line_2 $$ public void testStressUpdateDeleteConcurrency() throws Exception -->Line_141 $$ assertThat(failures.size(), equalTo(0))[ CD ]
Line_6 $$ final int numberOfIdsPerThread = scaledRandomIntBetween(3, 10)-->Line_146 $$ for (int i = 0; i < numberOfIdsPerThread; ++i) [ FD ]
Line_142 $$ for (int i = 0; i < numberOfIdsPerThread; ++i) -->Line_153 $$ if (ut.failedMap.containsKey(i)) [ FD ]
Line_7 $$ final int numberOfUpdatesPerId = scaledRandomIntBetween(10, 100)-->Line_59 $$ for (int k = 0; k < numberOfUpdatesPerId; ++k) [ FD ]
Line_10 $$ final CountDownLatch startLatch = new CountDownLatch(1)-->Line_133 $$ startLatch.countDown()[ FD ]
Line_9 $$ final CountDownLatch latch = new CountDownLatch(numberOfThreads)-->Line_134 $$ latch.await()[ FD ]
Line_149 $$ if (response.isExists()) -->Line_159 $$ assertThat(response.getVersion(), equalTo((long) expectedVersion))[ CD ]
Line_2 $$ public void testStressUpdateDeleteConcurrency() throws Exception -->Line_5 $$ final int numberOfThreads = scaledRandomIntBetween(3, 5)[ CD ]
Line_73 $$ hasWaitedForNoNode = true-->Line_89 $$ hasWaitedForNoNode = true[ FD ]
Line_128 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_146 $$ for (int i = 0; i < numberOfIdsPerThread; ++i) [ FD ]
Line_149 $$ if (response.isExists()) -->Line_160 $$ assertThat(response.getVersion() + totalFailures, equalTo((long) ((numberOfUpdatesPerId * numberOfThreads * 2) + 1)))[ CD ]
Line_58 $$ for (int j = 0; j < numberOfIds; j++) -->Line_78 $$ DeleteRequest dr = client().prepareDelete("test", "type1", Integer.toString(j)).request()[ FD ]
Line_129 $$ UpdateThread ut = new UpdateThread(numberOfIdsPerThread, numberOfUpdatesPerId)-->Line_130 $$ ut.start()[ FD ]
Line_2 $$ public void testStressUpdateDeleteConcurrency() throws Exception -->Line_10 $$ final CountDownLatch startLatch = new CountDownLatch(1)[ CD ]
Line_57 $$ boolean hasWaitedForNoNode = false-->Line_73 $$ hasWaitedForNoNode = true[ FD ]
Line_2 $$ public void testStressUpdateDeleteConcurrency() throws Exception -->Line_145 $$ refresh()[ CD ]
Line_154 $$ totalFailures += ut.failedMap.get(i)-->Line_158 $$ logger.error("Actual version [[ FD ]
Line_142 $$ for (int i = 0; i < numberOfIdsPerThread; ++i) -->Line_150 $$ assertThat(response.getId(), equalTo(Integer.toString(i)))[ FD ]
Line_12 $$ final class UpdateThread extends Thread -->Line_36 $$ updateRequestsOutstanding.release(1)[ CD ]
Line_57 $$ boolean hasWaitedForNoNode = false-->Line_89 $$ hasWaitedForNoNode = true[ FD ]
Line_12 $$ final class UpdateThread extends Thread -->Line_111 $$ map.put(j, map.get(j) + 1)[ CD ]
Line_147 $$ int totalFailures = 0-->Line_157 $$ expectedVersion -= totalFailures[ FD ]
Line_11 $$ final List<Throwable> failures = new CopyOnWriteArrayList()-->Line_141 $$ assertThat(failures.size(), equalTo(0))[ FD ]
Line_142 $$ for (int i = 0; i < numberOfIdsPerThread; ++i) -->Line_143 $$ UpdateResponse ur = client().prepareUpdate("test", "type1", Integer.toString(i)).setScript(new Script("field", ScriptService.ScriptType.INLINE, "field_inc", null)).setRetryOnConflict(Integer.MAX_VALUE).setUpsert(jsonBuilder().startObject().field("field", 1).endObject()).execute().actionGet()[ FD ]
Line_128 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_150 $$ assertThat(response.getId(), equalTo(Integer.toString(i)))[ FD ]
Line_11 $$ final List<Throwable> failures = new CopyOnWriteArrayList()-->Line_96 $$ failures.add(e)[ FD ]
Line_116 $$ long msRemaining = timeOut.getMillis() - (System.currentTimeMillis() - start)-->Line_117 $$ logger.info("[[ FD ]
Line_128 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_131 $$ threads.add(ut)[ CD ]
Line_12 $$ final class UpdateThread extends Thread -->Line_95 $$ logger.error("Something went wrong", e)[ FD ]
Line_58 $$ for (int j = 0; j < numberOfIds; j++) -->Line_59 $$ for (int k = 0; k < numberOfUpdatesPerId; ++k) [ CD ]
Line_12 $$ final class UpdateThread extends Thread -->Line_114 $$ long start = System.currentTimeMillis()[ CD ]
Line_149 $$ if (response.isExists()) -->Line_157 $$ expectedVersion -= totalFailures[ CD ]
Line_154 $$ totalFailures += ut.failedMap.get(i)-->Line_157 $$ expectedVersion -= totalFailures[ FD ]
Line_128 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_129 $$ UpdateThread ut = new UpdateThread(numberOfIdsPerThread, numberOfUpdatesPerId)[ CD ]
Line_2 $$ public void testStressUpdateDeleteConcurrency() throws Exception -->Line_6 $$ final int numberOfIdsPerThread = scaledRandomIntBetween(3, 10)[ CD ]
Line_148 $$ GetResponse response = client().prepareGet("test", "type1", Integer.toString(i)).execute().actionGet()-->Line_149 $$ if (response.isExists()) [ FD ]
Line_128 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_153 $$ if (ut.failedMap.containsKey(i)) [ FD ]
Line_2 $$ public void testStressUpdateDeleteConcurrency() throws Exception -->Line_133 $$ startLatch.countDown()[ CD ]
Line_12 $$ final class UpdateThread extends Thread -->Line_30 $$ updateRequestsOutstanding.release(1)[ CD ]
Line_2 $$ public void testStressUpdateDeleteConcurrency() throws Exception -->Line_9 $$ final CountDownLatch latch = new CountDownLatch(numberOfThreads)[ CD ]
Line_59 $$ for (int k = 0; k < numberOfUpdatesPerId; ++k) -->Line_60 $$ updateRequestsOutstanding.acquire()[ CD ]
Line_128 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_142 $$ for (int i = 0; i < numberOfIdsPerThread; ++i) [ FD ]
Line_146 $$ for (int i = 0; i < numberOfIdsPerThread; ++i) -->Line_148 $$ GetResponse response = client().prepareGet("test", "type1", Integer.toString(i)).execute().actionGet()[ CD ]
Line_146 $$ for (int i = 0; i < numberOfIdsPerThread; ++i) -->Line_154 $$ totalFailures += ut.failedMap.get(i)[ FD ]
Line_12 $$ final class UpdateThread extends Thread -->Line_51 $$ deleteRequestsOutstanding.release(1)[ CD ]
Line_146 $$ for (int i = 0; i < numberOfIdsPerThread; ++i) -->Line_150 $$ assertThat(response.getId(), equalTo(Integer.toString(i)))[ FD ]
Line_128 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_130 $$ ut.start()[ CD ]
Line_2 $$ public void testStressUpdateDeleteConcurrency() throws Exception -->Line_8 $$ final int retryOnConflict = randomIntBetween(0, 1)[ CD ]
Line_149 $$ if (response.isExists()) -->Line_151 $$ int expectedVersion = (numberOfThreads * numberOfUpdatesPerId * 2) + 1[ CD ]
Line_142 $$ for (int i = 0; i < numberOfIdsPerThread; ++i) -->Line_154 $$ totalFailures += ut.failedMap.get(i)[ FD ]
Line_5 $$ final int numberOfThreads = scaledRandomIntBetween(3, 5)-->Line_128 $$ for (int i = 0; i < numberOfThreads; i++) [ FD ]
Line_142 $$ for (int i = 0; i < numberOfIdsPerThread; ++i) -->Line_146 $$ for (int i = 0; i < numberOfIdsPerThread; ++i) [ FD ]
Line_2 $$ public void testStressUpdateDeleteConcurrency() throws Exception -->Line_11 $$ final List<Throwable> failures = new CopyOnWriteArrayList()[ CD ]
Line_151 $$ int expectedVersion = (numberOfThreads * numberOfUpdatesPerId * 2) + 1-->Line_158 $$ logger.error("Actual version [[ FD ]
Line_12 $$ final class UpdateThread extends Thread -->Line_116 $$ long msRemaining = timeOut.getMillis() - (System.currentTimeMillis() - start)[ FD ]
Line_12 $$ final class UpdateThread extends Thread -->Line_111 $$ map.put(j, map.get(j) + 1)[ FD ]
Line_12 $$ final class UpdateThread extends Thread -->Line_115 $$ do [ FD ]
Line_146 $$ for (int i = 0; i < numberOfIdsPerThread; ++i) -->Line_153 $$ if (ut.failedMap.containsKey(i)) [ FD ]
Line_151 $$ int expectedVersion = (numberOfThreads * numberOfUpdatesPerId * 2) + 1-->Line_157 $$ expectedVersion -= totalFailures[ FD ]
Line_58 $$ for (int j = 0; j < numberOfIds; j++) -->Line_67 $$ incrementMapValue(j, failedMap)[ FD ]
Line_2 $$ public void testStressUpdateDeleteConcurrency() throws Exception -->Line_3 $$ assertAcked(prepareCreate("test").addMapping("type1", XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("_timestamp").field("enabled", true).endObject().startObject("_ttl").field("enabled", true).endObject().endObject().endObject()).setSettings(Settings.builder().put(MergePolicyConfig.INDEX_MERGE_ENABLED, false)))[ CD ]
