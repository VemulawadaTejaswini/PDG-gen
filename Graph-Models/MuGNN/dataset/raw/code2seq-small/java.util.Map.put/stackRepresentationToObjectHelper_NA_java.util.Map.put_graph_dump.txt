Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_9 $$ if (type instanceof ArrayType) [ CD ]
Line_47 $$ blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), 1)-->Line_54 $$ type.writeLong(blockBuilder, parser.getLongValue())[ FD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_43 $$ sliceValue = Slices.utf8Slice(parser.getValueAsString())[ FD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_60 $$ return type.getObjectValue(session, blockBuilder.build(), 0)[ FD ]
Line_49 $$ blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), 1, requireNonNull(sliceValue, "sliceValue is null").length())-->Line_56 $$ type.writeDouble(blockBuilder, getDoubleValue(parser))[ FD ]
Line_57 $$ if (type.getJavaType() == Slice.class) -->Line_58 $$ type.writeSlice(blockBuilder, requireNonNull(sliceValue, "sliceValue is null"))[ CD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_51 $$ if (type.getJavaType() == boolean.class) [ FD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_4 $$ return OBJECT_MAPPER.writeValueAsString(parser.readValueAsTree())[ FD ]
Line_53 $$ if (type.getJavaType() == long.class) -->Line_55 $$ if (type.getJavaType() == double.class) [ CD ]
Line_45 $$ BlockBuilder blockBuilder-->Line_49 $$ blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), 1, requireNonNull(sliceValue, "sliceValue is null").length())[ FD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_52 $$ type.writeBoolean(blockBuilder, parser.getBooleanValue())[ FD ]
Line_27 $$ if (type instanceof RowType) -->Line_29 $$ checkState(parser.getCurrentToken() == JsonToken.START_ARRAY, "Expected a json array")[ CD ]
Line_47 $$ blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), 1)-->Line_58 $$ type.writeSlice(blockBuilder, requireNonNull(sliceValue, "sliceValue is null"))[ FD ]
Line_20 $$ while (parser.nextValue() != JsonToken.END_OBJECT) -->Line_23 $$ map.put(key, value)[ CD ]
Line_27 $$ if (type instanceof RowType) -->Line_39 $$ return Collections.unmodifiableList(list)[ CD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_54 $$ type.writeLong(blockBuilder, parser.getLongValue())[ FD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_6 $$ if (parser.getCurrentToken() == JsonToken.VALUE_NULL) [ CD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_9 $$ if (type instanceof ArrayType) [ FD ]
Line_46 $$ if (type instanceof FixedWidthType) -->Line_49 $$ blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), 1, requireNonNull(sliceValue, "sliceValue is null").length())[ CD ]
Line_6 $$ if (parser.getCurrentToken() == JsonToken.VALUE_NULL) -->Line_7 $$ return null[ CD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_60 $$ return type.getObjectValue(session, blockBuilder.build(), 0)[ CD ]
Line_47 $$ blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), 1)-->Line_52 $$ type.writeBoolean(blockBuilder, parser.getBooleanValue())[ FD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_34 $$ Object value = stackRepresentationToObjectHelper(session, parser, rowType.getFields().get(field).getType())[ FD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_17 $$ if (type instanceof MapType) [ FD ]
Line_42 $$ if (type.getJavaType() == Slice.class) -->Line_43 $$ sliceValue = Slices.utf8Slice(parser.getValueAsString())[ CD ]
Line_47 $$ blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), 1)-->Line_60 $$ return type.getObjectValue(session, blockBuilder.build(), 0)[ FD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_20 $$ while (parser.nextValue() != JsonToken.END_OBJECT) [ FD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_12 $$ while (parser.nextToken() != JsonToken.END_ARRAY) [ FD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_13 $$ list.add(stackRepresentationToObjectHelper(session, parser, ((ArrayType) type).getElementType()))[ FD ]
Line_45 $$ BlockBuilder blockBuilder-->Line_60 $$ return type.getObjectValue(session, blockBuilder.build(), 0)[ FD ]
Line_34 $$ Object value = stackRepresentationToObjectHelper(session, parser, rowType.getFields().get(field).getType())-->Line_35 $$ list.add(value)[ FD ]
Line_18 $$ Map<Object, Object> map = new LinkedHashMap()-->Line_23 $$ map.put(key, value)[ FD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_41 $$ Slice sliceValue = null[ CD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_38 $$ checkArgument(field == rowType.getFields().size(), "Expected %s fields for type %s", rowType.getFields().size(), type)[ FD ]
Line_31 $$ RowType rowType = (RowType) type-->Line_33 $$ checkArgument(field < rowType.getFields().size(), "Unexpected field for type %s", type)[ FD ]
Line_47 $$ blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), 1)-->Line_56 $$ type.writeDouble(blockBuilder, getDoubleValue(parser))[ FD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_56 $$ type.writeDouble(blockBuilder, getDoubleValue(parser))[ FD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_53 $$ if (type.getJavaType() == long.class) [ FD ]
Line_9 $$ if (type instanceof ArrayType) -->Line_10 $$ List<Object> list = new ArrayList()[ CD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_42 $$ if (type.getJavaType() == Slice.class) [ CD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_42 $$ if (type.getJavaType() == Slice.class) [ FD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_17 $$ if (type instanceof MapType) [ CD ]
Line_27 $$ if (type instanceof RowType) -->Line_38 $$ checkArgument(field == rowType.getFields().size(), "Expected %s fields for type %s", rowType.getFields().size(), type)[ CD ]
Line_41 $$ Slice sliceValue = null-->Line_58 $$ type.writeSlice(blockBuilder, requireNonNull(sliceValue, "sliceValue is null"))[ FD ]
Line_18 $$ Map<Object, Object> map = new LinkedHashMap()-->Line_25 $$ return Collections.unmodifiableMap(map)[ FD ]
Line_10 $$ List<Object> list = new ArrayList()-->Line_35 $$ list.add(value)[ FD ]
Line_10 $$ List<Object> list = new ArrayList()-->Line_39 $$ return Collections.unmodifiableList(list)[ FD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_45 $$ BlockBuilder blockBuilder[ CD ]
Line_10 $$ List<Object> list = new ArrayList()-->Line_15 $$ return Collections.unmodifiableList(list)[ FD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_51 $$ if (type.getJavaType() == boolean.class) [ CD ]
Line_49 $$ blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), 1, requireNonNull(sliceValue, "sliceValue is null").length())-->Line_54 $$ type.writeLong(blockBuilder, parser.getLongValue())[ FD ]
Line_32 $$ while (parser.nextValue() != JsonToken.END_ARRAY) -->Line_33 $$ checkArgument(field < rowType.getFields().size(), "Unexpected field for type %s", type)[ CD ]
Line_45 $$ BlockBuilder blockBuilder-->Line_58 $$ type.writeSlice(blockBuilder, requireNonNull(sliceValue, "sliceValue is null"))[ FD ]
Line_10 $$ List<Object> list = new ArrayList()-->Line_13 $$ list.add(stackRepresentationToObjectHelper(session, parser, ((ArrayType) type).getElementType()))[ FD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_22 $$ Object value = stackRepresentationToObjectHelper(session, parser, ((MapType) type).getValueType())[ FD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_47 $$ blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), 1)[ FD ]
Line_53 $$ if (type.getJavaType() == long.class) -->Line_54 $$ type.writeLong(blockBuilder, parser.getLongValue())[ CD ]
Line_30 $$ int field = 0-->Line_34 $$ Object value = stackRepresentationToObjectHelper(session, parser, rowType.getFields().get(field).getType())[ FD ]
Line_17 $$ if (type instanceof MapType) -->Line_19 $$ checkState(parser.getCurrentToken() == JsonToken.START_OBJECT, "Expected a json object")[ CD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_49 $$ blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), 1, requireNonNull(sliceValue, "sliceValue is null").length())[ FD ]
Line_45 $$ BlockBuilder blockBuilder-->Line_47 $$ blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), 1)[ FD ]
Line_32 $$ while (parser.nextValue() != JsonToken.END_ARRAY) -->Line_36 $$ field++[ CD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_19 $$ checkState(parser.getCurrentToken() == JsonToken.START_OBJECT, "Expected a json object")[ FD ]
Line_49 $$ blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), 1, requireNonNull(sliceValue, "sliceValue is null").length())-->Line_58 $$ type.writeSlice(blockBuilder, requireNonNull(sliceValue, "sliceValue is null"))[ FD ]
Line_30 $$ int field = 0-->Line_36 $$ field++[ FD ]
Line_27 $$ if (type instanceof RowType) -->Line_30 $$ int field = 0[ CD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_55 $$ if (type.getJavaType() == double.class) [ FD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_27 $$ if (type instanceof RowType) [ FD ]
Line_43 $$ sliceValue = Slices.utf8Slice(parser.getValueAsString())-->Line_58 $$ type.writeSlice(blockBuilder, requireNonNull(sliceValue, "sliceValue is null"))[ FD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_3 $$ if (type instanceof JsonType) [ CD ]
Line_32 $$ while (parser.nextValue() != JsonToken.END_ARRAY) -->Line_34 $$ Object value = stackRepresentationToObjectHelper(session, parser, rowType.getFields().get(field).getType())[ CD ]
Line_9 $$ if (type instanceof ArrayType) -->Line_15 $$ return Collections.unmodifiableList(list)[ CD ]
Line_17 $$ if (type instanceof MapType) -->Line_20 $$ while (parser.nextValue() != JsonToken.END_OBJECT) [ CD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_33 $$ checkArgument(field < rowType.getFields().size(), "Unexpected field for type %s", type)[ FD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_21 $$ Object key = mapKeyToObject(session, parser.getCurrentName(), ((MapType) type).getKeyType())[ FD ]
Line_43 $$ sliceValue = Slices.utf8Slice(parser.getValueAsString())-->Line_49 $$ blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), 1, requireNonNull(sliceValue, "sliceValue is null").length())[ FD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_11 $$ checkState(parser.getCurrentToken() == JsonToken.START_ARRAY, "Expected a json array")[ FD ]
Line_3 $$ if (type instanceof JsonType) -->Line_4 $$ return OBJECT_MAPPER.writeValueAsString(parser.readValueAsTree())[ CD ]
Line_31 $$ RowType rowType = (RowType) type-->Line_34 $$ Object value = stackRepresentationToObjectHelper(session, parser, rowType.getFields().get(field).getType())[ FD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_27 $$ if (type instanceof RowType) [ CD ]
Line_55 $$ if (type.getJavaType() == double.class) -->Line_56 $$ type.writeDouble(blockBuilder, getDoubleValue(parser))[ CD ]
Line_12 $$ while (parser.nextToken() != JsonToken.END_ARRAY) -->Line_13 $$ list.add(stackRepresentationToObjectHelper(session, parser, ((ArrayType) type).getElementType()))[ CD ]
Line_22 $$ Object value = stackRepresentationToObjectHelper(session, parser, ((MapType) type).getValueType())-->Line_35 $$ list.add(value)[ FD ]
Line_45 $$ BlockBuilder blockBuilder-->Line_54 $$ type.writeLong(blockBuilder, parser.getLongValue())[ FD ]
Line_41 $$ Slice sliceValue = null-->Line_49 $$ blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), 1, requireNonNull(sliceValue, "sliceValue is null").length())[ FD ]
Line_31 $$ RowType rowType = (RowType) type-->Line_38 $$ checkArgument(field == rowType.getFields().size(), "Expected %s fields for type %s", rowType.getFields().size(), type)[ FD ]
Line_46 $$ if (type instanceof FixedWidthType) -->Line_47 $$ blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), 1)[ CD ]
Line_17 $$ if (type instanceof MapType) -->Line_18 $$ Map<Object, Object> map = new LinkedHashMap()[ CD ]
Line_45 $$ BlockBuilder blockBuilder-->Line_56 $$ type.writeDouble(blockBuilder, getDoubleValue(parser))[ FD ]
Line_17 $$ if (type instanceof MapType) -->Line_25 $$ return Collections.unmodifiableMap(map)[ CD ]
Line_32 $$ while (parser.nextValue() != JsonToken.END_ARRAY) -->Line_35 $$ list.add(value)[ CD ]
Line_51 $$ if (type.getJavaType() == boolean.class) -->Line_52 $$ type.writeBoolean(blockBuilder, parser.getBooleanValue())[ CD ]
Line_49 $$ blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), 1, requireNonNull(sliceValue, "sliceValue is null").length())-->Line_52 $$ type.writeBoolean(blockBuilder, parser.getBooleanValue())[ FD ]
Line_27 $$ if (type instanceof RowType) -->Line_31 $$ RowType rowType = (RowType) type[ CD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_6 $$ if (parser.getCurrentToken() == JsonToken.VALUE_NULL) [ FD ]
Line_9 $$ if (type instanceof ArrayType) -->Line_12 $$ while (parser.nextToken() != JsonToken.END_ARRAY) [ CD ]
Line_20 $$ while (parser.nextValue() != JsonToken.END_OBJECT) -->Line_22 $$ Object value = stackRepresentationToObjectHelper(session, parser, ((MapType) type).getValueType())[ CD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_57 $$ if (type.getJavaType() == Slice.class) [ FD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_58 $$ type.writeSlice(blockBuilder, requireNonNull(sliceValue, "sliceValue is null"))[ FD ]
Line_41 $$ Slice sliceValue = null-->Line_43 $$ sliceValue = Slices.utf8Slice(parser.getValueAsString())[ FD ]
Line_45 $$ BlockBuilder blockBuilder-->Line_52 $$ type.writeBoolean(blockBuilder, parser.getBooleanValue())[ FD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_29 $$ checkState(parser.getCurrentToken() == JsonToken.START_ARRAY, "Expected a json array")[ FD ]
Line_49 $$ blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), 1, requireNonNull(sliceValue, "sliceValue is null").length())-->Line_60 $$ return type.getObjectValue(session, blockBuilder.build(), 0)[ FD ]
Line_55 $$ if (type.getJavaType() == double.class) -->Line_57 $$ if (type.getJavaType() == Slice.class) [ CD ]
Line_47 $$ blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), 1)-->Line_49 $$ blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), 1, requireNonNull(sliceValue, "sliceValue is null").length())[ FD ]
Line_20 $$ while (parser.nextValue() != JsonToken.END_OBJECT) -->Line_21 $$ Object key = mapKeyToObject(session, parser.getCurrentName(), ((MapType) type).getKeyType())[ CD ]
Line_51 $$ if (type.getJavaType() == boolean.class) -->Line_53 $$ if (type.getJavaType() == long.class) [ CD ]
Line_22 $$ Object value = stackRepresentationToObjectHelper(session, parser, ((MapType) type).getValueType())-->Line_23 $$ map.put(key, value)[ FD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_46 $$ if (type instanceof FixedWidthType) [ FD ]
Line_21 $$ Object key = mapKeyToObject(session, parser.getCurrentName(), ((MapType) type).getKeyType())-->Line_23 $$ map.put(key, value)[ FD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_46 $$ if (type instanceof FixedWidthType) [ CD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_3 $$ if (type instanceof JsonType) [ FD ]
Line_27 $$ if (type instanceof RowType) -->Line_32 $$ while (parser.nextValue() != JsonToken.END_ARRAY) [ CD ]
Line_9 $$ if (type instanceof ArrayType) -->Line_11 $$ checkState(parser.getCurrentToken() == JsonToken.START_ARRAY, "Expected a json array")[ CD ]
Line_2 $$ private static Object stackRepresentationToObjectHelper(ConnectorSession session, JsonParser parser, Type type) throws IOException -->Line_32 $$ while (parser.nextValue() != JsonToken.END_ARRAY) [ FD ]
