Line_2 $$ private static List createSLSTasks(String taskType, List rumenTasks, long offset) -->Line_13 $$ taskFinish = taskFinish - baseline + offset[ FD ]
Line_13 $$ taskFinish = taskFinish - baseline + offset-->Line_17 $$ task.put("container.end.ms", taskFinish)[ FD ]
Line_14 $$ Map task = new LinkedHashMap()-->Line_20 $$ array.add(task)[ FD ]
Line_9 $$ long taskStart = (Long) rumenAttempt.get("startTime")-->Line_16 $$ task.put("container.start.ms", taskStart)[ FD ]
Line_14 $$ Map task = new LinkedHashMap()-->Line_16 $$ task.put("container.start.ms", taskStart)[ FD ]
Line_14 $$ Map task = new LinkedHashMap()-->Line_15 $$ task.put("container.host", hostname)[ FD ]
Line_3 $$ int priority = taskType.equals("reduce") ? 10 : 20-->Line_18 $$ task.put("container.priority", priority)[ FD ]
Line_14 $$ Map task = new LinkedHashMap()-->Line_18 $$ task.put("container.priority", priority)[ FD ]
Line_22 $$ if (rackNodeMap.containsKey(rackHost[0])) -->Line_25 $$ Set<String> hosts = new TreeSet<String>()[ CD ]
Line_22 $$ if (rackNodeMap.containsKey(rackHost[0])) -->Line_27 $$ rackNodeMap.put(rackHost[0], hosts)[ CD ]
Line_2 $$ private static List createSLSTasks(String taskType, List rumenTasks, long offset) -->Line_3 $$ int priority = taskType.equals("reduce") ? 10 : 20[ CD ]
Line_2 $$ private static List createSLSTasks(String taskType, List rumenTasks, long offset) -->Line_31 $$ return array[ CD ]
Line_2 $$ private static List createSLSTasks(String taskType, List rumenTasks, long offset) -->Line_19 $$ task.put("container.type", taskType)[ FD ]
Line_10 $$ long taskFinish = (Long) rumenAttempt.get("finishTime")-->Line_17 $$ task.put("container.end.ms", taskFinish)[ FD ]
Line_22 $$ if (rackNodeMap.containsKey(rackHost[0])) -->Line_23 $$ rackNodeMap.get(rackHost[0]).add(rackHost[1])[ CD ]
Line_11 $$ String hostname = (String) rumenAttempt.get("hostName")-->Line_15 $$ task.put("container.host", hostname)[ FD ]
Line_14 $$ Map task = new LinkedHashMap()-->Line_19 $$ task.put("container.type", taskType)[ FD ]
Line_22 $$ if (rackNodeMap.containsKey(rackHost[0])) -->Line_26 $$ hosts.add(rackHost[1])[ CD ]
Line_8 $$ Map rumenAttempt = (Map) ee-->Line_11 $$ String hostname = (String) rumenAttempt.get("hostName")[ FD ]
Line_25 $$ Set<String> hosts = new TreeSet<String>()-->Line_27 $$ rackNodeMap.put(rackHost[0], hosts)[ FD ]
Line_2 $$ private static List createSLSTasks(String taskType, List rumenTasks, long offset) -->Line_12 $$ taskStart = taskStart - baseline + offset[ FD ]
Line_12 $$ taskStart = taskStart - baseline + offset-->Line_16 $$ task.put("container.start.ms", taskStart)[ FD ]
Line_2 $$ private static List createSLSTasks(String taskType, List rumenTasks, long offset) -->Line_3 $$ int priority = taskType.equals("reduce") ? 10 : 20[ FD ]
Line_25 $$ Set<String> hosts = new TreeSet<String>()-->Line_26 $$ hosts.add(rackHost[1])[ FD ]
Line_4 $$ List array = new ArrayList()-->Line_20 $$ array.add(task)[ FD ]
Line_9 $$ long taskStart = (Long) rumenAttempt.get("startTime")-->Line_12 $$ taskStart = taskStart - baseline + offset[ FD ]
Line_2 $$ private static List createSLSTasks(String taskType, List rumenTasks, long offset) -->Line_4 $$ List array = new ArrayList()[ CD ]
Line_6 $$ Map rumenTask = (Map) e-->Line_7 $$ for (Object ee : (List) rumenTask.get("attempts")) [ FD ]
Line_14 $$ Map task = new LinkedHashMap()-->Line_17 $$ task.put("container.end.ms", taskFinish)[ FD ]
Line_8 $$ Map rumenAttempt = (Map) ee-->Line_10 $$ long taskFinish = (Long) rumenAttempt.get("finishTime")[ FD ]
Line_10 $$ long taskFinish = (Long) rumenAttempt.get("finishTime")-->Line_13 $$ taskFinish = taskFinish - baseline + offset[ FD ]
Line_8 $$ Map rumenAttempt = (Map) ee-->Line_9 $$ long taskStart = (Long) rumenAttempt.get("startTime")[ FD ]
Line_11 $$ String hostname = (String) rumenAttempt.get("hostName")-->Line_21 $$ String[] rackHost = SLSUtils.getRackHostName(hostname)[ FD ]
