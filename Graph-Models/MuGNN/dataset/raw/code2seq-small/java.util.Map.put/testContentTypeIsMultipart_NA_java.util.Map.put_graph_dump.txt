Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_59 $$ Assert.assertNull(populateHttpServletRequest.getContentType())[ CD ]
Line_52 $$ uploadServletRequestImpl = (UploadServletRequestImpl) populateHttpServletRequest-->Line_53 $$ populatedFileParameters = uploadServletRequestImpl.getMultipartParameterMap()[ FD ]
Line_23 $$ UploadServletRequestImpl uploadServletRequestImpl = (UploadServletRequestImpl) populateHttpServletRequest-->Line_39 $$ uploadServletRequestImpl = (UploadServletRequestImpl) populateHttpServletRequest[ FD ]
Line_11 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_29 $$ Assert.assertEquals(-1, populateHttpServletRequest.getContentLength())[ FD ]
Line_4 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, null, null))-->Line_10 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, new HashMap<String, FileItem[]>(), new HashMap<String, List<String>>()))[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_68 $$ Assert.assertArrayEquals(content, FileUtil.getBytes(spiAgentRequest.requestBodyFile))[ CD ]
Line_53 $$ populatedFileParameters = uploadServletRequestImpl.getMultipartParameterMap()-->Line_55 $$ Assert.assertTrue(populatedFileParameters.isEmpty())[ FD ]
Line_4 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, null, null))-->Line_49 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, new HashMap<String, FileItem[]>(), regularParameters))[ FD ]
Line_11 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_22 $$ Assert.assertSame(UploadServletRequestImpl.class, populateHttpServletRequest.getClass())[ FD ]
Line_25 $$ Map<String, List<String>> populatedRegularParameters = uploadServletRequestImpl.getRegularParameterMap()-->Line_41 $$ populatedRegularParameters = uploadServletRequestImpl.getRegularParameterMap()[ FD ]
Line_21 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_22 $$ Assert.assertSame(UploadServletRequestImpl.class, populateHttpServletRequest.getClass())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_23 $$ UploadServletRequestImpl uploadServletRequestImpl = (UploadServletRequestImpl) populateHttpServletRequest[ CD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_4 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, null, null))[ CD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_44 $$ Assert.assertEquals(1, populatedRegularParameters.size())[ CD ]
Line_21 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_51 $$ Assert.assertSame(UploadServletRequestImpl.class, populateHttpServletRequest.getClass())[ FD ]
Line_11 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_15 $$ Assert.assertNull(populateHttpServletRequest.getInputStream())[ FD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_60 $$ Assert.assertNull(populateHttpServletRequest.getInputStream())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_8 $$ Assert.assertNull(populateHttpServletRequest.getContentType())[ CD ]
Line_23 $$ UploadServletRequestImpl uploadServletRequestImpl = (UploadServletRequestImpl) populateHttpServletRequest-->Line_52 $$ uploadServletRequestImpl = (UploadServletRequestImpl) populateHttpServletRequest[ FD ]
Line_20 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, fileParameters, new HashMap<String, List<String>>()))-->Line_65 $$ spiAgentRequest = new SPIAgentRequest(new HttpServletRequestWrapper(_mockHttpServletRequest))[ FD ]
Line_10 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, new HashMap<String, FileItem[]>(), new HashMap<String, List<String>>()))-->Line_69 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_69 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_71 $$ Assert.assertEquals(ContentTypes.MULTIPART_FORM_DATA, populateHttpServletRequest.getContentType())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_57 $$ Assert.assertSame(parameters, populatedRegularParameters.get(regularParameter))[ CD ]
Line_41 $$ populatedRegularParameters = uploadServletRequestImpl.getRegularParameterMap()-->Line_54 $$ populatedRegularParameters = uploadServletRequestImpl.getRegularParameterMap()[ FD ]
Line_37 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_48 $$ Assert.assertNull(populateHttpServletRequest.getInputStream())[ FD ]
Line_33 $$ String regularParameter = "regularParameter"-->Line_35 $$ regularParameters.put(regularParameter, parameters)[ FD ]
Line_25 $$ Map<String, List<String>> populatedRegularParameters = uploadServletRequestImpl.getRegularParameterMap()-->Line_54 $$ populatedRegularParameters = uploadServletRequestImpl.getRegularParameterMap()[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_51 $$ Assert.assertSame(UploadServletRequestImpl.class, populateHttpServletRequest.getClass())[ CD ]
Line_11 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_13 $$ Assert.assertEquals(-1, populateHttpServletRequest.getContentLength())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_26 $$ Assert.assertEquals(1, populatedFileParameters.size())[ CD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_48 $$ Assert.assertNull(populateHttpServletRequest.getInputStream())[ FD ]
Line_11 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_72 $$ ServletInputStream servletInputStream = populateHttpServletRequest.getInputStream()[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_73 $$ Assert.assertNotNull(servletInputStream)[ CD ]
Line_11 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_47 $$ Assert.assertNull(populateHttpServletRequest.getContentType())[ FD ]
Line_21 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_69 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_49 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, new HashMap<String, FileItem[]>(), regularParameters))-->Line_65 $$ spiAgentRequest = new SPIAgentRequest(new HttpServletRequestWrapper(_mockHttpServletRequest))[ FD ]
Line_25 $$ Map<String, List<String>> populatedRegularParameters = uploadServletRequestImpl.getRegularParameterMap()-->Line_45 $$ Assert.assertSame(parameters, populatedRegularParameters.get(regularParameter))[ FD ]
Line_40 $$ populatedFileParameters = uploadServletRequestImpl.getMultipartParameterMap()-->Line_53 $$ populatedFileParameters = uploadServletRequestImpl.getMultipartParameterMap()[ FD ]
Line_37 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_70 $$ Assert.assertEquals(content.length, populateHttpServletRequest.getContentLength())[ FD ]
Line_10 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, new HashMap<String, FileItem[]>(), new HashMap<String, List<String>>()))-->Line_36 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, fileParameters, regularParameters))[ FD ]
Line_21 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_38 $$ Assert.assertSame(UploadServletRequestImpl.class, populateHttpServletRequest.getClass())[ FD ]
Line_37 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_60 $$ Assert.assertNull(populateHttpServletRequest.getInputStream())[ FD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_22 $$ Assert.assertSame(UploadServletRequestImpl.class, populateHttpServletRequest.getClass())[ FD ]
Line_52 $$ uploadServletRequestImpl = (UploadServletRequestImpl) populateHttpServletRequest-->Line_54 $$ populatedRegularParameters = uploadServletRequestImpl.getRegularParameterMap()[ FD ]
Line_21 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_46 $$ Assert.assertEquals(-1, populateHttpServletRequest.getContentLength())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_52 $$ uploadServletRequestImpl = (UploadServletRequestImpl) populateHttpServletRequest[ CD ]
Line_37 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_71 $$ Assert.assertEquals(ContentTypes.MULTIPART_FORM_DATA, populateHttpServletRequest.getContentType())[ FD ]
Line_36 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, fileParameters, regularParameters))-->Line_69 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_70 $$ Assert.assertEquals(content.length, populateHttpServletRequest.getContentLength())[ FD ]
Line_61 $$ byte[] content = new byte[1024]-->Line_74 $$ Assert.assertArrayEquals(content, FileUtil.getBytes(servletInputStream))[ FD ]
Line_4 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, null, null))-->Line_20 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, fileParameters, new HashMap<String, List<String>>()))[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_42 $$ Assert.assertEquals(1, populatedFileParameters.size())[ CD ]
Line_11 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_50 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_33 $$ String regularParameter = "regularParameter"[ CD ]
Line_10 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, new HashMap<String, FileItem[]>(), new HashMap<String, List<String>>()))-->Line_20 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, fileParameters, new HashMap<String, List<String>>()))[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_74 $$ Assert.assertArrayEquals(content, FileUtil.getBytes(servletInputStream))[ CD ]
Line_72 $$ ServletInputStream servletInputStream = populateHttpServletRequest.getInputStream()-->Line_74 $$ Assert.assertArrayEquals(content, FileUtil.getBytes(servletInputStream))[ FD ]
Line_4 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, null, null))-->Line_21 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_25 $$ Map<String, List<String>> populatedRegularParameters = uploadServletRequestImpl.getRegularParameterMap()[ CD ]
Line_21 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_60 $$ Assert.assertNull(populateHttpServletRequest.getInputStream())[ FD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_7 $$ Assert.assertEquals(-1, populateHttpServletRequest.getContentLength())[ FD ]
Line_41 $$ populatedRegularParameters = uploadServletRequestImpl.getRegularParameterMap()-->Line_57 $$ Assert.assertSame(parameters, populatedRegularParameters.get(regularParameter))[ FD ]
Line_24 $$ Map<String, FileItem[]> populatedFileParameters = uploadServletRequestImpl.getMultipartParameterMap()-->Line_43 $$ Assert.assertSame(fileItems, populatedFileParameters.get(fileParameter))[ FD ]
Line_32 $$ Map<String, List<String>> regularParameters = new HashMap()-->Line_35 $$ regularParameters.put(regularParameter, parameters)[ FD ]
Line_20 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, fileParameters, new HashMap<String, List<String>>()))-->Line_50 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_16 $$ Map<String, FileItem[]> fileParameters = new HashMap()-->Line_19 $$ fileParameters.put(fileParameter, fileItems)[ FD ]
Line_10 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, new HashMap<String, FileItem[]>(), new HashMap<String, List<String>>()))-->Line_21 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_40 $$ populatedFileParameters = uploadServletRequestImpl.getMultipartParameterMap()-->Line_55 $$ Assert.assertTrue(populatedFileParameters.isEmpty())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_40 $$ populatedFileParameters = uploadServletRequestImpl.getMultipartParameterMap()[ CD ]
Line_21 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_72 $$ ServletInputStream servletInputStream = populateHttpServletRequest.getInputStream()[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_53 $$ populatedFileParameters = uploadServletRequestImpl.getMultipartParameterMap()[ CD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_12 $$ Assert.assertSame(AgentHttpServletRequestWrapper.class, populateHttpServletRequest.getClass())[ CD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_35 $$ regularParameters.put(regularParameter, parameters)[ CD ]
Line_33 $$ String regularParameter = "regularParameter"-->Line_45 $$ Assert.assertSame(parameters, populatedRegularParameters.get(regularParameter))[ FD ]
Line_17 $$ String fileParameter = "fileParameter"-->Line_19 $$ fileParameters.put(fileParameter, fileItems)[ FD ]
Line_36 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, fileParameters, regularParameters))-->Line_37 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_11 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_38 $$ Assert.assertSame(UploadServletRequestImpl.class, populateHttpServletRequest.getClass())[ FD ]
Line_23 $$ UploadServletRequestImpl uploadServletRequestImpl = (UploadServletRequestImpl) populateHttpServletRequest-->Line_41 $$ populatedRegularParameters = uploadServletRequestImpl.getRegularParameterMap()[ FD ]
Line_21 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_31 $$ Assert.assertNull(populateHttpServletRequest.getInputStream())[ FD ]
Line_39 $$ uploadServletRequestImpl = (UploadServletRequestImpl) populateHttpServletRequest-->Line_54 $$ populatedRegularParameters = uploadServletRequestImpl.getRegularParameterMap()[ FD ]
Line_34 $$ List<String> parameters = new ArrayList()-->Line_57 $$ Assert.assertSame(parameters, populatedRegularParameters.get(regularParameter))[ FD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_12 $$ Assert.assertSame(AgentHttpServletRequestWrapper.class, populateHttpServletRequest.getClass())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_71 $$ Assert.assertEquals(ContentTypes.MULTIPART_FORM_DATA, populateHttpServletRequest.getContentType())[ CD ]
Line_24 $$ Map<String, FileItem[]> populatedFileParameters = uploadServletRequestImpl.getMultipartParameterMap()-->Line_27 $$ Assert.assertSame(fileItems, populatedFileParameters.get(fileParameter))[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_38 $$ Assert.assertSame(UploadServletRequestImpl.class, populateHttpServletRequest.getClass())[ CD ]
Line_4 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, null, null))-->Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_25 $$ Map<String, List<String>> populatedRegularParameters = uploadServletRequestImpl.getRegularParameterMap()-->Line_44 $$ Assert.assertEquals(1, populatedRegularParameters.size())[ FD ]
Line_11 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_59 $$ Assert.assertNull(populateHttpServletRequest.getContentType())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_62 $$ Random random = new Random()[ CD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_61 $$ byte[] content = new byte[1024][ CD ]
Line_11 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_37 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_36 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, fileParameters, regularParameters))-->Line_50 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_72 $$ ServletInputStream servletInputStream = populateHttpServletRequest.getInputStream()[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_46 $$ Assert.assertEquals(-1, populateHttpServletRequest.getContentLength())[ CD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_51 $$ Assert.assertSame(UploadServletRequestImpl.class, populateHttpServletRequest.getClass())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_63 $$ random.nextBytes(content)[ CD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_6 $$ Assert.assertSame(AgentHttpServletRequestWrapper.class, populateHttpServletRequest.getClass())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_67 $$ Assert.assertNotNull(spiAgentRequest.requestBodyFile)[ CD ]
Line_20 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, fileParameters, new HashMap<String, List<String>>()))-->Line_21 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_17 $$ String fileParameter = "fileParameter"-->Line_43 $$ Assert.assertSame(fileItems, populatedFileParameters.get(fileParameter))[ FD ]
Line_49 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, new HashMap<String, FileItem[]>(), regularParameters))-->Line_69 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_40 $$ populatedFileParameters = uploadServletRequestImpl.getMultipartParameterMap()-->Line_42 $$ Assert.assertEquals(1, populatedFileParameters.size())[ FD ]
Line_21 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_59 $$ Assert.assertNull(populateHttpServletRequest.getContentType())[ FD ]
Line_23 $$ UploadServletRequestImpl uploadServletRequestImpl = (UploadServletRequestImpl) populateHttpServletRequest-->Line_24 $$ Map<String, FileItem[]> populatedFileParameters = uploadServletRequestImpl.getMultipartParameterMap()[ FD ]
Line_21 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_47 $$ Assert.assertNull(populateHttpServletRequest.getContentType())[ FD ]
Line_61 $$ byte[] content = new byte[1024]-->Line_63 $$ random.nextBytes(content)[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_15 $$ Assert.assertNull(populateHttpServletRequest.getInputStream())[ CD ]
Line_72 $$ ServletInputStream servletInputStream = populateHttpServletRequest.getInputStream()-->Line_73 $$ Assert.assertNotNull(servletInputStream)[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_69 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ CD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_11 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ CD ]
Line_17 $$ String fileParameter = "fileParameter"-->Line_27 $$ Assert.assertSame(fileItems, populatedFileParameters.get(fileParameter))[ FD ]
Line_11 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_48 $$ Assert.assertNull(populateHttpServletRequest.getInputStream())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_34 $$ List<String> parameters = new ArrayList()[ CD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_47 $$ Assert.assertNull(populateHttpServletRequest.getContentType())[ CD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_36 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, fileParameters, regularParameters))[ CD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_28 $$ Assert.assertTrue(populatedRegularParameters.isEmpty())[ CD ]
Line_21 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_48 $$ Assert.assertNull(populateHttpServletRequest.getInputStream())[ FD ]
Line_39 $$ uploadServletRequestImpl = (UploadServletRequestImpl) populateHttpServletRequest-->Line_40 $$ populatedFileParameters = uploadServletRequestImpl.getMultipartParameterMap()[ FD ]
Line_23 $$ UploadServletRequestImpl uploadServletRequestImpl = (UploadServletRequestImpl) populateHttpServletRequest-->Line_54 $$ populatedRegularParameters = uploadServletRequestImpl.getRegularParameterMap()[ FD ]
Line_4 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, null, null))-->Line_69 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_46 $$ Assert.assertEquals(-1, populateHttpServletRequest.getContentLength())[ FD ]
Line_20 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, fileParameters, new HashMap<String, List<String>>()))-->Line_36 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, fileParameters, regularParameters))[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_3 $$ _mockHttpServletRequest.setContentType(ContentTypes.MULTIPART_FORM_DATA)[ CD ]
Line_36 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, fileParameters, regularParameters))-->Line_49 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, new HashMap<String, FileItem[]>(), regularParameters))[ FD ]
Line_24 $$ Map<String, FileItem[]> populatedFileParameters = uploadServletRequestImpl.getMultipartParameterMap()-->Line_53 $$ populatedFileParameters = uploadServletRequestImpl.getMultipartParameterMap()[ FD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_15 $$ Assert.assertNull(populateHttpServletRequest.getInputStream())[ FD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_21 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_11 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_58 $$ Assert.assertEquals(-1, populateHttpServletRequest.getContentLength())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_18 $$ FileItem[] fileItems = new FileItem[0][ CD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_66 $$ Assert.assertEquals(ContentTypes.MULTIPART_FORM_DATA, spiAgentRequest.contentType)[ CD ]
Line_18 $$ FileItem[] fileItems = new FileItem[0]-->Line_27 $$ Assert.assertSame(fileItems, populatedFileParameters.get(fileParameter))[ FD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_47 $$ Assert.assertNull(populateHttpServletRequest.getContentType())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_50 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ CD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_56 $$ Assert.assertEquals(1, populatedRegularParameters.size())[ CD ]
Line_25 $$ Map<String, List<String>> populatedRegularParameters = uploadServletRequestImpl.getRegularParameterMap()-->Line_57 $$ Assert.assertSame(parameters, populatedRegularParameters.get(regularParameter))[ FD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_37 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_27 $$ Assert.assertSame(fileItems, populatedFileParameters.get(fileParameter))[ CD ]
Line_50 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_58 $$ Assert.assertEquals(-1, populateHttpServletRequest.getContentLength())[ FD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_13 $$ Assert.assertEquals(-1, populateHttpServletRequest.getContentLength())[ FD ]
Line_11 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_12 $$ Assert.assertSame(AgentHttpServletRequestWrapper.class, populateHttpServletRequest.getClass())[ FD ]
Line_21 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_30 $$ Assert.assertNull(populateHttpServletRequest.getContentType())[ FD ]
Line_11 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_46 $$ Assert.assertEquals(-1, populateHttpServletRequest.getContentLength())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_54 $$ populatedRegularParameters = uploadServletRequestImpl.getRegularParameterMap()[ CD ]
Line_11 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_71 $$ Assert.assertEquals(ContentTypes.MULTIPART_FORM_DATA, populateHttpServletRequest.getContentType())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_39 $$ uploadServletRequestImpl = (UploadServletRequestImpl) populateHttpServletRequest[ CD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_65 $$ spiAgentRequest = new SPIAgentRequest(new HttpServletRequestWrapper(_mockHttpServletRequest))[ CD ]
Line_37 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_50 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_60 $$ Assert.assertNull(populateHttpServletRequest.getInputStream())[ CD ]
Line_39 $$ uploadServletRequestImpl = (UploadServletRequestImpl) populateHttpServletRequest-->Line_52 $$ uploadServletRequestImpl = (UploadServletRequestImpl) populateHttpServletRequest[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_13 $$ Assert.assertEquals(-1, populateHttpServletRequest.getContentLength())[ CD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_30 $$ Assert.assertNull(populateHttpServletRequest.getContentType())[ FD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_31 $$ Assert.assertNull(populateHttpServletRequest.getInputStream())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_21 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ CD ]
Line_36 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, fileParameters, regularParameters))-->Line_65 $$ spiAgentRequest = new SPIAgentRequest(new HttpServletRequestWrapper(_mockHttpServletRequest))[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_43 $$ Assert.assertSame(fileItems, populatedFileParameters.get(fileParameter))[ CD ]
Line_39 $$ uploadServletRequestImpl = (UploadServletRequestImpl) populateHttpServletRequest-->Line_41 $$ populatedRegularParameters = uploadServletRequestImpl.getRegularParameterMap()[ FD ]
Line_41 $$ populatedRegularParameters = uploadServletRequestImpl.getRegularParameterMap()-->Line_45 $$ Assert.assertSame(parameters, populatedRegularParameters.get(regularParameter))[ FD ]
Line_50 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_70 $$ Assert.assertEquals(content.length, populateHttpServletRequest.getContentLength())[ FD ]
Line_41 $$ populatedRegularParameters = uploadServletRequestImpl.getRegularParameterMap()-->Line_56 $$ Assert.assertEquals(1, populatedRegularParameters.size())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_64 $$ _mockHttpServletRequest.setContent(content)[ CD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_50 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_50 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_69 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_40 $$ populatedFileParameters = uploadServletRequestImpl.getMultipartParameterMap()-->Line_43 $$ Assert.assertSame(fileItems, populatedFileParameters.get(fileParameter))[ FD ]
Line_4 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, null, null))-->Line_37 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_37 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_72 $$ ServletInputStream servletInputStream = populateHttpServletRequest.getInputStream()[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_29 $$ Assert.assertEquals(-1, populateHttpServletRequest.getContentLength())[ CD ]
Line_20 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, fileParameters, new HashMap<String, List<String>>()))-->Line_37 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_24 $$ Map<String, FileItem[]> populatedFileParameters = uploadServletRequestImpl.getMultipartParameterMap()-->Line_26 $$ Assert.assertEquals(1, populatedFileParameters.size())[ FD ]
Line_50 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_60 $$ Assert.assertNull(populateHttpServletRequest.getInputStream())[ FD ]
Line_54 $$ populatedRegularParameters = uploadServletRequestImpl.getRegularParameterMap()-->Line_57 $$ Assert.assertSame(parameters, populatedRegularParameters.get(regularParameter))[ FD ]
Line_62 $$ Random random = new Random()-->Line_63 $$ random.nextBytes(content)[ FD ]
Line_50 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_72 $$ ServletInputStream servletInputStream = populateHttpServletRequest.getInputStream()[ FD ]
Line_25 $$ Map<String, List<String>> populatedRegularParameters = uploadServletRequestImpl.getRegularParameterMap()-->Line_56 $$ Assert.assertEquals(1, populatedRegularParameters.size())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_9 $$ Assert.assertNull(populateHttpServletRequest.getInputStream())[ CD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_6 $$ Assert.assertSame(AgentHttpServletRequestWrapper.class, populateHttpServletRequest.getClass())[ CD ]
Line_4 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, null, null))-->Line_11 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_50 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_51 $$ Assert.assertSame(UploadServletRequestImpl.class, populateHttpServletRequest.getClass())[ FD ]
Line_41 $$ populatedRegularParameters = uploadServletRequestImpl.getRegularParameterMap()-->Line_44 $$ Assert.assertEquals(1, populatedRegularParameters.size())[ FD ]
Line_37 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_47 $$ Assert.assertNull(populateHttpServletRequest.getContentType())[ FD ]
Line_18 $$ FileItem[] fileItems = new FileItem[0]-->Line_19 $$ fileParameters.put(fileParameter, fileItems)[ FD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_58 $$ Assert.assertEquals(-1, populateHttpServletRequest.getContentLength())[ FD ]
Line_25 $$ Map<String, List<String>> populatedRegularParameters = uploadServletRequestImpl.getRegularParameterMap()-->Line_28 $$ Assert.assertTrue(populatedRegularParameters.isEmpty())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_45 $$ Assert.assertSame(parameters, populatedRegularParameters.get(regularParameter))[ CD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_17 $$ String fileParameter = "fileParameter"[ CD ]
Line_37 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_69 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_4 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, null, null))-->Line_36 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, fileParameters, regularParameters))[ FD ]
Line_11 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_70 $$ Assert.assertEquals(content.length, populateHttpServletRequest.getContentLength())[ FD ]
Line_37 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_59 $$ Assert.assertNull(populateHttpServletRequest.getContentType())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_10 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, new HashMap<String, FileItem[]>(), new HashMap<String, List<String>>()))[ CD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_49 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, new HashMap<String, FileItem[]>(), regularParameters))[ CD ]
Line_37 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_58 $$ Assert.assertEquals(-1, populateHttpServletRequest.getContentLength())[ FD ]
Line_21 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_71 $$ Assert.assertEquals(ContentTypes.MULTIPART_FORM_DATA, populateHttpServletRequest.getContentType())[ FD ]
Line_21 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_29 $$ Assert.assertEquals(-1, populateHttpServletRequest.getContentLength())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_41 $$ populatedRegularParameters = uploadServletRequestImpl.getRegularParameterMap()[ CD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_22 $$ Assert.assertSame(UploadServletRequestImpl.class, populateHttpServletRequest.getClass())[ CD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_72 $$ ServletInputStream servletInputStream = populateHttpServletRequest.getInputStream()[ CD ]
Line_54 $$ populatedRegularParameters = uploadServletRequestImpl.getRegularParameterMap()-->Line_56 $$ Assert.assertEquals(1, populatedRegularParameters.size())[ FD ]
Line_37 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_51 $$ Assert.assertSame(UploadServletRequestImpl.class, populateHttpServletRequest.getClass())[ FD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_69 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_10 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, new HashMap<String, FileItem[]>(), new HashMap<String, List<String>>()))-->Line_37 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_38 $$ Assert.assertSame(UploadServletRequestImpl.class, populateHttpServletRequest.getClass())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_75 $$ _mockHttpServletRequest.setContent(null)[ CD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_32 $$ Map<String, List<String>> regularParameters = new HashMap()[ CD ]
Line_10 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, new HashMap<String, FileItem[]>(), new HashMap<String, List<String>>()))-->Line_49 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, new HashMap<String, FileItem[]>(), regularParameters))[ FD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_29 $$ Assert.assertEquals(-1, populateHttpServletRequest.getContentLength())[ FD ]
Line_23 $$ UploadServletRequestImpl uploadServletRequestImpl = (UploadServletRequestImpl) populateHttpServletRequest-->Line_25 $$ Map<String, List<String>> populatedRegularParameters = uploadServletRequestImpl.getRegularParameterMap()[ FD ]
Line_33 $$ String regularParameter = "regularParameter"-->Line_57 $$ Assert.assertSame(parameters, populatedRegularParameters.get(regularParameter))[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_31 $$ Assert.assertNull(populateHttpServletRequest.getInputStream())[ CD ]
Line_23 $$ UploadServletRequestImpl uploadServletRequestImpl = (UploadServletRequestImpl) populateHttpServletRequest-->Line_40 $$ populatedFileParameters = uploadServletRequestImpl.getMultipartParameterMap()[ FD ]
Line_37 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_46 $$ Assert.assertEquals(-1, populateHttpServletRequest.getContentLength())[ FD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_14 $$ Assert.assertNull(populateHttpServletRequest.getContentType())[ FD ]
Line_11 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_69 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_24 $$ Map<String, FileItem[]> populatedFileParameters = uploadServletRequestImpl.getMultipartParameterMap()-->Line_55 $$ Assert.assertTrue(populatedFileParameters.isEmpty())[ FD ]
Line_61 $$ byte[] content = new byte[1024]-->Line_68 $$ Assert.assertArrayEquals(content, FileUtil.getBytes(spiAgentRequest.requestBodyFile))[ FD ]
Line_11 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_51 $$ Assert.assertSame(UploadServletRequestImpl.class, populateHttpServletRequest.getClass())[ FD ]
Line_65 $$ spiAgentRequest = new SPIAgentRequest(new HttpServletRequestWrapper(_mockHttpServletRequest))-->Line_69 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_50 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_59 $$ Assert.assertNull(populateHttpServletRequest.getContentType())[ FD ]
Line_10 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, new HashMap<String, FileItem[]>(), new HashMap<String, List<String>>()))-->Line_65 $$ spiAgentRequest = new SPIAgentRequest(new HttpServletRequestWrapper(_mockHttpServletRequest))[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_16 $$ Map<String, FileItem[]> fileParameters = new HashMap()[ CD ]
Line_50 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_71 $$ Assert.assertEquals(ContentTypes.MULTIPART_FORM_DATA, populateHttpServletRequest.getContentType())[ FD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_8 $$ Assert.assertNull(populateHttpServletRequest.getContentType())[ FD ]
Line_21 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_58 $$ Assert.assertEquals(-1, populateHttpServletRequest.getContentLength())[ FD ]
Line_11 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_21 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_61 $$ byte[] content = new byte[1024]-->Line_64 $$ _mockHttpServletRequest.setContent(content)[ FD ]
Line_34 $$ List<String> parameters = new ArrayList()-->Line_45 $$ Assert.assertSame(parameters, populatedRegularParameters.get(regularParameter))[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_11 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ CD ]
Line_10 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, new HashMap<String, FileItem[]>(), new HashMap<String, List<String>>()))-->Line_11 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_11 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_31 $$ Assert.assertNull(populateHttpServletRequest.getInputStream())[ FD ]
Line_24 $$ Map<String, FileItem[]> populatedFileParameters = uploadServletRequestImpl.getMultipartParameterMap()-->Line_42 $$ Assert.assertEquals(1, populatedFileParameters.size())[ FD ]
Line_21 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_70 $$ Assert.assertEquals(content.length, populateHttpServletRequest.getContentLength())[ FD ]
Line_37 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_38 $$ Assert.assertSame(UploadServletRequestImpl.class, populateHttpServletRequest.getClass())[ FD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_59 $$ Assert.assertNull(populateHttpServletRequest.getContentType())[ FD ]
Line_69 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_70 $$ Assert.assertEquals(content.length, populateHttpServletRequest.getContentLength())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_58 $$ Assert.assertEquals(-1, populateHttpServletRequest.getContentLength())[ CD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_9 $$ Assert.assertNull(populateHttpServletRequest.getInputStream())[ FD ]
Line_10 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, new HashMap<String, FileItem[]>(), new HashMap<String, List<String>>()))-->Line_50 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_20 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, fileParameters, new HashMap<String, List<String>>()))[ CD ]
Line_34 $$ List<String> parameters = new ArrayList()-->Line_35 $$ regularParameters.put(regularParameter, parameters)[ FD ]
Line_18 $$ FileItem[] fileItems = new FileItem[0]-->Line_43 $$ Assert.assertSame(fileItems, populatedFileParameters.get(fileParameter))[ FD ]
Line_20 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, fileParameters, new HashMap<String, List<String>>()))-->Line_49 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, new HashMap<String, FileItem[]>(), regularParameters))[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_37 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ CD ]
Line_11 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_60 $$ Assert.assertNull(populateHttpServletRequest.getInputStream())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_70 $$ Assert.assertEquals(content.length, populateHttpServletRequest.getContentLength())[ CD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_24 $$ Map<String, FileItem[]> populatedFileParameters = uploadServletRequestImpl.getMultipartParameterMap()[ CD ]
Line_20 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, fileParameters, new HashMap<String, List<String>>()))-->Line_69 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_4 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, null, null))-->Line_50 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_23 $$ UploadServletRequestImpl uploadServletRequestImpl = (UploadServletRequestImpl) populateHttpServletRequest-->Line_53 $$ populatedFileParameters = uploadServletRequestImpl.getMultipartParameterMap()[ FD ]
Line_49 $$ spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, new HashMap<String, FileItem[]>(), regularParameters))-->Line_50 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_55 $$ Assert.assertTrue(populatedFileParameters.isEmpty())[ CD ]
Line_5 $$ HttpServletRequest populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_71 $$ Assert.assertEquals(ContentTypes.MULTIPART_FORM_DATA, populateHttpServletRequest.getContentType())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_19 $$ fileParameters.put(fileParameter, fileItems)[ CD ]
Line_4 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(new UploadServletRequestImpl(_mockHttpServletRequest, null, null))-->Line_65 $$ spiAgentRequest = new SPIAgentRequest(new HttpServletRequestWrapper(_mockHttpServletRequest))[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_30 $$ Assert.assertNull(populateHttpServletRequest.getContentType())[ CD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_48 $$ Assert.assertNull(populateHttpServletRequest.getInputStream())[ CD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_14 $$ Assert.assertNull(populateHttpServletRequest.getContentType())[ CD ]
Line_11 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_14 $$ Assert.assertNull(populateHttpServletRequest.getContentType())[ FD ]
Line_24 $$ Map<String, FileItem[]> populatedFileParameters = uploadServletRequestImpl.getMultipartParameterMap()-->Line_40 $$ populatedFileParameters = uploadServletRequestImpl.getMultipartParameterMap()[ FD ]
Line_69 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_72 $$ ServletInputStream servletInputStream = populateHttpServletRequest.getInputStream()[ FD ]
Line_11 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_30 $$ Assert.assertNull(populateHttpServletRequest.getContentType())[ FD ]
Line_39 $$ uploadServletRequestImpl = (UploadServletRequestImpl) populateHttpServletRequest-->Line_53 $$ populatedFileParameters = uploadServletRequestImpl.getMultipartParameterMap()[ FD ]
Line_21 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_37 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_21 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_50 $$ populateHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_2 $$ public void testContentTypeIsMultipart() throws IOException -->Line_7 $$ Assert.assertEquals(-1, populateHttpServletRequest.getContentLength())[ CD ]
