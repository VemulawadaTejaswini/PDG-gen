Line_2 $$ public <T> Initializable<T> requestInjection(InjectorImpl injector, T instance, Object source, Set<InjectionPoint> injectionPoints) -->Line_3 $$ Objects.requireNonNull(source)[ CD ]
Line_2 $$ public <T> Initializable<T> requestInjection(InjectorImpl injector, T instance, Object source, Set<InjectionPoint> injectionPoints) -->Line_8 $$ pendingInjection.put(instance, initializable)[ FD ]
Line_2 $$ public <T> Initializable<T> requestInjection(InjectorImpl injector, T instance, Object source, Set<InjectionPoint> injectionPoints) -->Line_4 $$ if (instance == null || (injectionPoints.isEmpty() && !injector.membersInjectorStore.hasTypeListeners())) [ FD ]
Line_2 $$ public <T> Initializable<T> requestInjection(InjectorImpl injector, T instance, Object source, Set<InjectionPoint> injectionPoints) -->Line_7 $$ InjectableReference<T> initializable = new InjectableReference(injector, instance, source)[ CD ]
Line_2 $$ public <T> Initializable<T> requestInjection(InjectorImpl injector, T instance, Object source, Set<InjectionPoint> injectionPoints) -->Line_3 $$ Objects.requireNonNull(source)[ FD ]
Line_2 $$ public <T> Initializable<T> requestInjection(InjectorImpl injector, T instance, Object source, Set<InjectionPoint> injectionPoints) -->Line_4 $$ if (instance == null || (injectionPoints.isEmpty() && !injector.membersInjectorStore.hasTypeListeners())) [ CD ]
Line_2 $$ public <T> Initializable<T> requestInjection(InjectorImpl injector, T instance, Object source, Set<InjectionPoint> injectionPoints) -->Line_8 $$ pendingInjection.put(instance, initializable)[ CD ]
Line_2 $$ public <T> Initializable<T> requestInjection(InjectorImpl injector, T instance, Object source, Set<InjectionPoint> injectionPoints) -->Line_9 $$ return initializable[ CD ]
Line_2 $$ public <T> Initializable<T> requestInjection(InjectorImpl injector, T instance, Object source, Set<InjectionPoint> injectionPoints) -->Line_5 $$ return Initializables.of(instance)[ FD ]
Line_4 $$ if (instance == null || (injectionPoints.isEmpty() && !injector.membersInjectorStore.hasTypeListeners())) -->Line_5 $$ return Initializables.of(instance)[ CD ]
Line_7 $$ InjectableReference<T> initializable = new InjectableReference(injector, instance, source)-->Line_8 $$ pendingInjection.put(instance, initializable)[ FD ]
