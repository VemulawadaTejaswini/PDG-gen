Line_5 $$ final Map<String, Object> issue = new Hashtable()-->Line_8 $$ issue.put("assignee", myRepository.getUsername())[ FD ]
Line_2 $$ private String createIssueViaXmlRpc(@NotNull String project, @NotNull String summary) throws Exception -->Line_10 $$ issue.put("state", 1)[ CD ]
Line_4 $$ final XmlRpcClient xmlRpcClient = new XmlRpcClient(url)-->Line_12 $$ final Hashtable result = (Hashtable) xmlRpcClient.execute(new XmlRpcRequest("jira1.createIssue", params), new CommonsXmlRpcTransport(url, myRepository.getHttpClient()))[ FD ]
Line_5 $$ final Map<String, Object> issue = new Hashtable()-->Line_11 $$ final Vector<Object> params = new Vector(Arrays.asList("", issue))[ FD ]
Line_5 $$ final Map<String, Object> issue = new Hashtable()-->Line_7 $$ issue.put("project", project)[ FD ]
Line_2 $$ private String createIssueViaXmlRpc(@NotNull String project, @NotNull String summary) throws Exception -->Line_3 $$ final URL url = new URL(myRepository.getUrl() + "/rpc/xmlrpc")[ CD ]
Line_2 $$ private String createIssueViaXmlRpc(@NotNull String project, @NotNull String summary) throws Exception -->Line_6 $$ issue.put("summary", summary)[ FD ]
Line_2 $$ private String createIssueViaXmlRpc(@NotNull String project, @NotNull String summary) throws Exception -->Line_5 $$ final Map<String, Object> issue = new Hashtable()[ CD ]
Line_2 $$ private String createIssueViaXmlRpc(@NotNull String project, @NotNull String summary) throws Exception -->Line_7 $$ issue.put("project", project)[ FD ]
Line_5 $$ final Map<String, Object> issue = new Hashtable()-->Line_6 $$ issue.put("summary", summary)[ FD ]
Line_5 $$ final Map<String, Object> issue = new Hashtable()-->Line_9 $$ issue.put("type", 1)[ FD ]
Line_2 $$ private String createIssueViaXmlRpc(@NotNull String project, @NotNull String summary) throws Exception -->Line_13 $$ return (String) result.get("key")[ CD ]
Line_2 $$ private String createIssueViaXmlRpc(@NotNull String project, @NotNull String summary) throws Exception -->Line_8 $$ issue.put("assignee", myRepository.getUsername())[ CD ]
Line_2 $$ private String createIssueViaXmlRpc(@NotNull String project, @NotNull String summary) throws Exception -->Line_4 $$ final XmlRpcClient xmlRpcClient = new XmlRpcClient(url)[ CD ]
Line_2 $$ private String createIssueViaXmlRpc(@NotNull String project, @NotNull String summary) throws Exception -->Line_9 $$ issue.put("type", 1)[ CD ]
Line_2 $$ private String createIssueViaXmlRpc(@NotNull String project, @NotNull String summary) throws Exception -->Line_7 $$ issue.put("project", project)[ CD ]
Line_12 $$ final Hashtable result = (Hashtable) xmlRpcClient.execute(new XmlRpcRequest("jira1.createIssue", params), new CommonsXmlRpcTransport(url, myRepository.getHttpClient()))-->Line_13 $$ return (String) result.get("key")[ FD ]
Line_2 $$ private String createIssueViaXmlRpc(@NotNull String project, @NotNull String summary) throws Exception -->Line_11 $$ final Vector<Object> params = new Vector(Arrays.asList("", issue))[ CD ]
Line_2 $$ private String createIssueViaXmlRpc(@NotNull String project, @NotNull String summary) throws Exception -->Line_6 $$ issue.put("summary", summary)[ CD ]
Line_5 $$ final Map<String, Object> issue = new Hashtable()-->Line_10 $$ issue.put("state", 1)[ FD ]
Line_2 $$ private String createIssueViaXmlRpc(@NotNull String project, @NotNull String summary) throws Exception -->Line_12 $$ final Hashtable result = (Hashtable) xmlRpcClient.execute(new XmlRpcRequest("jira1.createIssue", params), new CommonsXmlRpcTransport(url, myRepository.getHttpClient()))[ CD ]
