Line_20 $$ if (!first || !(value instanceof List)) -->Line_21 $$ entry.setValue(stringifyType(value))[ CD ]
Line_2 $$ private static void parseMethod(Map args) -->Line_26 $$ final Object toThrow = args.get(THROWS)[ FD ]
Line_9 $$ Object oldParams = args.get("params")-->Line_10 $$ if (oldParams instanceof Map) [ FD ]
Line_2 $$ private static void parseMethod(Map args) -->Line_5 $$ Object namedParams = args.get("namedParams")[ CD ]
Line_6 $$ if (namedParams instanceof List) -->Line_10 $$ if (oldParams instanceof Map) [ CD ]
Line_2 $$ private static void parseMethod(Map args) -->Line_26 $$ final Object toThrow = args.get(THROWS)[ CD ]
Line_5 $$ Object namedParams = args.get("namedParams")-->Line_6 $$ if (namedParams instanceof List) [ FD ]
Line_29 $$ for (Object o : (List) toThrow) -->Line_30 $$ list.add(stringifyType(o))[ FD ]
Line_27 $$ if (toThrow instanceof List) -->Line_32 $$ args.put(THROWS, list)[ CD ]
Line_2 $$ private static void parseMethod(Map args) -->Line_4 $$ args.put("type", type)[ FD ]
Line_2 $$ private static void parseMethod(Map args) -->Line_34 $$ args.put(THROWS, Collections.singletonList(stringifyType(toThrow)))[ FD ]
Line_33 $$ if (toThrow != null) -->Line_34 $$ args.put(THROWS, Collections.singletonList(stringifyType(toThrow)))[ CD ]
Line_26 $$ final Object toThrow = args.get(THROWS)-->Line_27 $$ if (toThrow instanceof List) [ FD ]
Line_27 $$ if (toThrow instanceof List) -->Line_33 $$ if (toThrow != null) [ CD ]
Line_2 $$ private static void parseMethod(Map args) -->Line_15 $$ Object params = args.get("params")[ FD ]
Line_3 $$ String type = stringifyType(args.get("type"))-->Line_4 $$ args.put("type", type)[ FD ]
Line_26 $$ final Object toThrow = args.get(THROWS)-->Line_33 $$ if (toThrow != null) [ FD ]
Line_7 $$ LinkedHashMap newParams = new LinkedHashMap()-->Line_13 $$ args.put("params", newParams)[ FD ]
Line_27 $$ if (toThrow instanceof List) -->Line_28 $$ final ArrayList<String> list = new ArrayList<String>()[ CD ]
Line_17 $$ boolean first = true-->Line_20 $$ if (!first || !(value instanceof List)) [ FD ]
Line_28 $$ final ArrayList<String> list = new ArrayList<String>()-->Line_30 $$ list.add(stringifyType(o))[ FD ]
Line_2 $$ private static void parseMethod(Map args) -->Line_3 $$ String type = stringifyType(args.get("type"))[ FD ]
Line_2 $$ private static void parseMethod(Map args) -->Line_4 $$ args.put("type", type)[ CD ]
Line_16 $$ if (params instanceof Map) -->Line_17 $$ boolean first = true[ CD ]
Line_6 $$ if (namedParams instanceof List) -->Line_7 $$ LinkedHashMap newParams = new LinkedHashMap()[ CD ]
Line_6 $$ if (namedParams instanceof List) -->Line_13 $$ args.put("params", newParams)[ CD ]
Line_2 $$ private static void parseMethod(Map args) -->Line_6 $$ if (namedParams instanceof List) [ CD ]
Line_2 $$ private static void parseMethod(Map args) -->Line_5 $$ Object namedParams = args.get("namedParams")[ FD ]
Line_19 $$ Object value = entry.getValue()-->Line_21 $$ entry.setValue(stringifyType(value))[ FD ]
Line_2 $$ private static void parseMethod(Map args) -->Line_15 $$ Object params = args.get("params")[ CD ]
Line_6 $$ if (namedParams instanceof List) -->Line_8 $$ newParams.put("args", namedParams)[ CD ]
Line_6 $$ if (namedParams instanceof List) -->Line_9 $$ Object oldParams = args.get("params")[ CD ]
Line_26 $$ final Object toThrow = args.get(THROWS)-->Line_34 $$ args.put(THROWS, Collections.singletonList(stringifyType(toThrow)))[ FD ]
Line_2 $$ private static void parseMethod(Map args) -->Line_32 $$ args.put(THROWS, list)[ FD ]
Line_18 $$ for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) params).entrySet()) -->Line_19 $$ Object value = entry.getValue()[ FD ]
Line_2 $$ private static void parseMethod(Map args) -->Line_27 $$ if (toThrow instanceof List) [ CD ]
Line_7 $$ LinkedHashMap newParams = new LinkedHashMap()-->Line_8 $$ newParams.put("args", namedParams)[ FD ]
Line_2 $$ private static void parseMethod(Map args) -->Line_9 $$ Object oldParams = args.get("params")[ FD ]
Line_15 $$ Object params = args.get("params")-->Line_16 $$ if (params instanceof Map) [ FD ]
Line_2 $$ private static void parseMethod(Map args) -->Line_13 $$ args.put("params", newParams)[ FD ]
Line_17 $$ boolean first = true-->Line_23 $$ first = false[ FD ]
Line_2 $$ private static void parseMethod(Map args) -->Line_3 $$ String type = stringifyType(args.get("type"))[ CD ]
Line_5 $$ Object namedParams = args.get("namedParams")-->Line_8 $$ newParams.put("args", namedParams)[ FD ]
Line_10 $$ if (oldParams instanceof Map) -->Line_11 $$ newParams.putAll((Map) oldParams)[ CD ]
Line_2 $$ private static void parseMethod(Map args) -->Line_16 $$ if (params instanceof Map) [ CD ]
Line_28 $$ final ArrayList<String> list = new ArrayList<String>()-->Line_32 $$ args.put(THROWS, list)[ FD ]
Line_7 $$ LinkedHashMap newParams = new LinkedHashMap()-->Line_11 $$ newParams.putAll((Map) oldParams)[ FD ]
Line_18 $$ for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) params).entrySet()) -->Line_21 $$ entry.setValue(stringifyType(value))[ FD ]
