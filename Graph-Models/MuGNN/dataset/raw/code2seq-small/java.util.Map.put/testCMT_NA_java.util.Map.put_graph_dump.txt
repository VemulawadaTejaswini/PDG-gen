Line_2 $$ public void testCMT() throws Exception -->Line_41 $$ s.createQuery("delete from Item").executeUpdate()[ CD ]
Line_15 $$ s = openSession()-->Line_19 $$ s.persist("Item", item)[ FD ]
Line_25 $$ s = openSession()-->Line_28 $$ s.delete(item)[ FD ]
Line_2 $$ public void testCMT() throws Exception -->Line_19 $$ s.persist("Item", item)[ CD ]
Line_5 $$ Session s = openSession()-->Line_40 $$ s = openSession()[ FD ]
Line_25 $$ s = openSession()-->Line_30 $$ assertFalse(s.isOpen())[ FD ]
Line_15 $$ s = openSession()-->Line_26 $$ item = (Map) s.createQuery("from Item").uniqueResult()[ FD ]
Line_2 $$ public void testCMT() throws Exception -->Line_3 $$ sessionFactory().getStatistics().clear()[ CD ]
Line_15 $$ s = openSession()-->Line_40 $$ s = openSession()[ FD ]
Line_2 $$ public void testCMT() throws Exception -->Line_30 $$ assertFalse(s.isOpen())[ CD ]
Line_2 $$ public void testCMT() throws Exception -->Line_34 $$ assertEquals(sessionFactory().getStatistics().getEntityInsertCount(), 1)[ CD ]
Line_26 $$ item = (Map) s.createQuery("from Item").uniqueResult()-->Line_28 $$ s.delete(item)[ FD ]
Line_5 $$ Session s = openSession()-->Line_19 $$ s.persist("Item", item)[ FD ]
Line_2 $$ public void testCMT() throws Exception -->Line_31 $$ assertEquals(sessionFactory().getStatistics().getTransactionCount(), 4)[ CD ]
Line_16 $$ Map item = new HashMap()-->Line_19 $$ s.persist("Item", item)[ FD ]
Line_2 $$ public void testCMT() throws Exception -->Line_22 $$ assertEquals(sessionFactory().getStatistics().getFlushCount(), 1)[ CD ]
Line_2 $$ public void testCMT() throws Exception -->Line_33 $$ assertEquals(sessionFactory().getStatistics().getEntityDeleteCount(), 1)[ CD ]
Line_2 $$ public void testCMT() throws Exception -->Line_20 $$ TestingJtaPlatformImpl.INSTANCE.getTransactionManager().commit()[ CD ]
Line_5 $$ Session s = openSession()-->Line_30 $$ assertFalse(s.isOpen())[ FD ]
Line_2 $$ public void testCMT() throws Exception -->Line_42 $$ TestingJtaPlatformImpl.INSTANCE.getTransactionManager().commit()[ CD ]
Line_2 $$ public void testCMT() throws Exception -->Line_14 $$ TestingJtaPlatformImpl.INSTANCE.getTransactionManager().begin()[ CD ]
Line_2 $$ public void testCMT() throws Exception -->Line_24 $$ TestingJtaPlatformImpl.INSTANCE.getTransactionManager().begin()[ CD ]
Line_2 $$ public void testCMT() throws Exception -->Line_36 $$ assertEquals(sessionFactory().getStatistics().getSessionCloseCount(), 4)[ CD ]
Line_15 $$ s = openSession()-->Line_41 $$ s.createQuery("delete from Item").executeUpdate()[ FD ]
Line_25 $$ s = openSession()-->Line_40 $$ s = openSession()[ FD ]
Line_15 $$ s = openSession()-->Line_21 $$ assertFalse(s.isOpen())[ FD ]
Line_11 $$ s = openSession()-->Line_25 $$ s = openSession()[ FD ]
Line_2 $$ public void testCMT() throws Exception -->Line_27 $$ assertNotNull(item)[ CD ]
Line_2 $$ public void testCMT() throws Exception -->Line_18 $$ item.put("description", "The only item we have")[ CD ]
Line_2 $$ public void testCMT() throws Exception -->Line_8 $$ assertEquals(sessionFactory().getStatistics().getFlushCount(), 0)[ CD ]
Line_5 $$ Session s = openSession()-->Line_11 $$ s = openSession()[ FD ]
Line_5 $$ Session s = openSession()-->Line_26 $$ item = (Map) s.createQuery("from Item").uniqueResult()[ FD ]
Line_2 $$ public void testCMT() throws Exception -->Line_6 $$ TestingJtaPlatformImpl.INSTANCE.getTransactionManager().commit()[ CD ]
Line_2 $$ public void testCMT() throws Exception -->Line_38 $$ assertEquals(sessionFactory().getStatistics().getFlushCount(), 2)[ CD ]
Line_2 $$ public void testCMT() throws Exception -->Line_28 $$ s.delete(item)[ CD ]
Line_5 $$ Session s = openSession()-->Line_28 $$ s.delete(item)[ FD ]
Line_25 $$ s = openSession()-->Line_26 $$ item = (Map) s.createQuery("from Item").uniqueResult()[ FD ]
Line_5 $$ Session s = openSession()-->Line_41 $$ s.createQuery("delete from Item").executeUpdate()[ FD ]
Line_15 $$ s = openSession()-->Line_30 $$ assertFalse(s.isOpen())[ FD ]
Line_2 $$ public void testCMT() throws Exception -->Line_13 $$ assertFalse(s.isOpen())[ CD ]
Line_11 $$ s = openSession()-->Line_28 $$ s.delete(item)[ FD ]
Line_16 $$ Map item = new HashMap()-->Line_18 $$ item.put("description", "The only item we have")[ FD ]
Line_2 $$ public void testCMT() throws Exception -->Line_23 $$ assertEquals(sessionFactory().getStatistics().getEntityInsertCount(), 1)[ CD ]
Line_2 $$ public void testCMT() throws Exception -->Line_25 $$ s = openSession()[ CD ]
Line_11 $$ s = openSession()-->Line_26 $$ item = (Map) s.createQuery("from Item").uniqueResult()[ FD ]
Line_2 $$ public void testCMT() throws Exception -->Line_39 $$ TestingJtaPlatformImpl.INSTANCE.getTransactionManager().begin()[ CD ]
Line_16 $$ Map item = new HashMap()-->Line_17 $$ item.put("name", "The Item")[ FD ]
Line_2 $$ public void testCMT() throws Exception -->Line_15 $$ s = openSession()[ CD ]
Line_2 $$ public void testCMT() throws Exception -->Line_10 $$ TestingJtaPlatformImpl.INSTANCE.getTransactionManager().begin()[ CD ]
Line_5 $$ Session s = openSession()-->Line_21 $$ assertFalse(s.isOpen())[ FD ]
Line_15 $$ s = openSession()-->Line_28 $$ s.delete(item)[ FD ]
Line_2 $$ public void testCMT() throws Exception -->Line_32 $$ assertEquals(sessionFactory().getStatistics().getSuccessfulTransactionCount(), 3)[ CD ]
Line_11 $$ s = openSession()-->Line_15 $$ s = openSession()[ FD ]
Line_2 $$ public void testCMT() throws Exception -->Line_7 $$ assertFalse(s.isOpen())[ CD ]
Line_11 $$ s = openSession()-->Line_19 $$ s.persist("Item", item)[ FD ]
Line_2 $$ public void testCMT() throws Exception -->Line_12 $$ TestingJtaPlatformImpl.INSTANCE.getTransactionManager().rollback()[ CD ]
Line_16 $$ Map item = new HashMap()-->Line_26 $$ item = (Map) s.createQuery("from Item").uniqueResult()[ FD ]
Line_2 $$ public void testCMT() throws Exception -->Line_11 $$ s = openSession()[ CD ]
Line_5 $$ Session s = openSession()-->Line_13 $$ assertFalse(s.isOpen())[ FD ]
Line_2 $$ public void testCMT() throws Exception -->Line_40 $$ s = openSession()[ CD ]
Line_5 $$ Session s = openSession()-->Line_7 $$ assertFalse(s.isOpen())[ FD ]
Line_11 $$ s = openSession()-->Line_13 $$ assertFalse(s.isOpen())[ FD ]
Line_11 $$ s = openSession()-->Line_41 $$ s.createQuery("delete from Item").executeUpdate()[ FD ]
Line_2 $$ public void testCMT() throws Exception -->Line_21 $$ assertFalse(s.isOpen())[ CD ]
Line_5 $$ Session s = openSession()-->Line_25 $$ s = openSession()[ FD ]
Line_2 $$ public void testCMT() throws Exception -->Line_35 $$ assertEquals(sessionFactory().getStatistics().getSessionOpenCount(), 4)[ CD ]
Line_2 $$ public void testCMT() throws Exception -->Line_26 $$ item = (Map) s.createQuery("from Item").uniqueResult()[ CD ]
Line_11 $$ s = openSession()-->Line_40 $$ s = openSession()[ FD ]
Line_2 $$ public void testCMT() throws Exception -->Line_9 $$ assertEquals(sessionFactory().getStatistics().getEntityInsertCount(), 0)[ CD ]
Line_2 $$ public void testCMT() throws Exception -->Line_29 $$ TestingJtaPlatformImpl.INSTANCE.getTransactionManager().commit()[ CD ]
Line_11 $$ s = openSession()-->Line_30 $$ assertFalse(s.isOpen())[ FD ]
Line_2 $$ public void testCMT() throws Exception -->Line_5 $$ Session s = openSession()[ CD ]
Line_2 $$ public void testCMT() throws Exception -->Line_4 $$ TestingJtaPlatformImpl.INSTANCE.getTransactionManager().begin()[ CD ]
Line_11 $$ s = openSession()-->Line_21 $$ assertFalse(s.isOpen())[ FD ]
Line_15 $$ s = openSession()-->Line_25 $$ s = openSession()[ FD ]
Line_2 $$ public void testCMT() throws Exception -->Line_16 $$ Map item = new HashMap()[ CD ]
Line_16 $$ Map item = new HashMap()-->Line_28 $$ s.delete(item)[ FD ]
Line_26 $$ item = (Map) s.createQuery("from Item").uniqueResult()-->Line_27 $$ assertNotNull(item)[ FD ]
Line_5 $$ Session s = openSession()-->Line_15 $$ s = openSession()[ FD ]
Line_2 $$ public void testCMT() throws Exception -->Line_17 $$ item.put("name", "The Item")[ CD ]
Line_16 $$ Map item = new HashMap()-->Line_27 $$ assertNotNull(item)[ FD ]
Line_2 $$ public void testCMT() throws Exception -->Line_37 $$ assertEquals(sessionFactory().getStatistics().getQueryExecutionCount(), 1)[ CD ]
Line_40 $$ s = openSession()-->Line_41 $$ s.createQuery("delete from Item").executeUpdate()[ FD ]
Line_25 $$ s = openSession()-->Line_41 $$ s.createQuery("delete from Item").executeUpdate()[ FD ]
