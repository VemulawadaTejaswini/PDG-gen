Line_9 $$ if (value != null) -->Line_10 $$ String name = prefix + each.getName()[ CD ]
Line_9 $$ if (value != null) -->Line_11 $$ String sValue = String.valueOf(value)[ CD ]
Line_15 $$ Package pack = type.getPackage()-->Line_16 $$ if (pack != null && Model.class.getPackage().getName().equals(pack.getName())) [ FD ]
Line_11 $$ String sValue = String.valueOf(value)-->Line_13 $$ result.put(name, sValue)[ FD ]
Line_4 $$ Class<?> type = each.getType()-->Line_15 $$ Package pack = type.getPackage()[ FD ]
Line_2 $$ private static void doConvert(Object object, String prefix, Map<String, String> result) throws IllegalAccessException -->Line_17 $$ doConvert(value, name + ".", result)[ FD ]
Line_2 $$ private static void doConvert(Object object, String prefix, Map<String, String> result) throws IllegalAccessException -->Line_3 $$ for (Field each : ReflectionUtil.collectFields(object.getClass())) [ FD ]
Line_8 $$ Object value = each.get(object)-->Line_9 $$ if (value != null) [ FD ]
Line_10 $$ String name = prefix + each.getName()-->Line_13 $$ result.put(name, sValue)[ FD ]
Line_4 $$ Class<?> type = each.getType()-->Line_5 $$ if (shouldSkip(type))[ FD ]
Line_2 $$ private static void doConvert(Object object, String prefix, Map<String, String> result) throws IllegalAccessException -->Line_8 $$ Object value = each.get(object)[ FD ]
Line_12 $$ if (!isNativeToString(sValue, value)) -->Line_13 $$ result.put(name, sValue)[ CD ]
Line_9 $$ if (value != null) -->Line_15 $$ Package pack = type.getPackage()[ CD ]
Line_9 $$ if (value != null) -->Line_12 $$ if (!isNativeToString(sValue, value)) [ CD ]
Line_8 $$ Object value = each.get(object)-->Line_17 $$ doConvert(value, name + ".", result)[ FD ]
Line_8 $$ Object value = each.get(object)-->Line_12 $$ if (!isNativeToString(sValue, value)) [ FD ]
Line_16 $$ if (pack != null && Model.class.getPackage().getName().equals(pack.getName())) -->Line_17 $$ doConvert(value, name + ".", result)[ CD ]
Line_3 $$ for (Field each : ReflectionUtil.collectFields(object.getClass())) -->Line_7 $$ each.setAccessible(true)[ FD ]
Line_3 $$ for (Field each : ReflectionUtil.collectFields(object.getClass())) -->Line_8 $$ Object value = each.get(object)[ FD ]
Line_9 $$ if (value != null) -->Line_16 $$ if (pack != null && Model.class.getPackage().getName().equals(pack.getName())) [ CD ]
Line_11 $$ String sValue = String.valueOf(value)-->Line_12 $$ if (!isNativeToString(sValue, value)) [ FD ]
Line_8 $$ Object value = each.get(object)-->Line_11 $$ String sValue = String.valueOf(value)[ FD ]
Line_3 $$ for (Field each : ReflectionUtil.collectFields(object.getClass())) -->Line_4 $$ Class<?> type = each.getType()[ FD ]
Line_2 $$ private static void doConvert(Object object, String prefix, Map<String, String> result) throws IllegalAccessException -->Line_13 $$ result.put(name, sValue)[ FD ]
Line_3 $$ for (Field each : ReflectionUtil.collectFields(object.getClass())) -->Line_10 $$ String name = prefix + each.getName()[ FD ]
