Line_2 $$ public static <T extends PsiElement> void doDuplicationCheckForElements(final T[] elements, final Map<String, T> presentNames, DuplicationInfoProvider<T> provider, final Validator.ValidationHost host) -->Line_9 $$ final T psiElement = presentNames.get(nameKey)[ FD ]
Line_8 $$ if (presentNames.containsKey(nameKey)) -->Line_9 $$ final T psiElement = presentNames.get(nameKey)[ CD ]
Line_8 $$ if (presentNames.containsKey(nameKey)) -->Line_11 $$ if (psiElement != null) [ CD ]
Line_2 $$ public static <T extends PsiElement> void doDuplicationCheckForElements(final T[] elements, final Map<String, T> presentNames, DuplicationInfoProvider<T> provider, final Validator.ValidationHost host) -->Line_13 $$ host.addMessage(provider.getNodeForMessage(psiElement), message, Validator.ValidationHost.ErrorType.ERROR)[ FD ]
Line_9 $$ final T psiElement = presentNames.get(nameKey)-->Line_13 $$ host.addMessage(provider.getNodeForMessage(psiElement), message, Validator.ValidationHost.ErrorType.ERROR)[ FD ]
Line_3 $$ for (T t : elements) -->Line_4 $$ final String name = provider.getName(t)[ FD ]
Line_2 $$ public static <T extends PsiElement> void doDuplicationCheckForElements(final T[] elements, final Map<String, T> presentNames, DuplicationInfoProvider<T> provider, final Validator.ValidationHost host) -->Line_17 $$ presentNames.put(nameKey, t)[ FD ]
Line_7 $$ final String nameKey = provider.getNameKey(t, name)-->Line_10 $$ final String message = XmlErrorMessages.message("duplicate.declaration", nameKey)[ FD ]
Line_3 $$ for (T t : elements) -->Line_15 $$ host.addMessage(provider.getNodeForMessage(t), message, Validator.ValidationHost.ErrorType.ERROR)[ FD ]
Line_8 $$ if (presentNames.containsKey(nameKey)) -->Line_17 $$ presentNames.put(nameKey, t)[ CD ]
Line_2 $$ public static <T extends PsiElement> void doDuplicationCheckForElements(final T[] elements, final Map<String, T> presentNames, DuplicationInfoProvider<T> provider, final Validator.ValidationHost host) -->Line_12 $$ presentNames.put(nameKey, null)[ FD ]
Line_4 $$ final String name = provider.getName(t)-->Line_5 $$ if (name == null)[ FD ]
Line_7 $$ final String nameKey = provider.getNameKey(t, name)-->Line_17 $$ presentNames.put(nameKey, t)[ FD ]
Line_8 $$ if (presentNames.containsKey(nameKey)) -->Line_10 $$ final String message = XmlErrorMessages.message("duplicate.declaration", nameKey)[ CD ]
Line_3 $$ for (T t : elements) -->Line_7 $$ final String nameKey = provider.getNameKey(t, name)[ FD ]
Line_3 $$ for (T t : elements) -->Line_17 $$ presentNames.put(nameKey, t)[ FD ]
Line_2 $$ public static <T extends PsiElement> void doDuplicationCheckForElements(final T[] elements, final Map<String, T> presentNames, DuplicationInfoProvider<T> provider, final Validator.ValidationHost host) -->Line_15 $$ host.addMessage(provider.getNodeForMessage(t), message, Validator.ValidationHost.ErrorType.ERROR)[ FD ]
Line_7 $$ final String nameKey = provider.getNameKey(t, name)-->Line_9 $$ final T psiElement = presentNames.get(nameKey)[ FD ]
Line_7 $$ final String nameKey = provider.getNameKey(t, name)-->Line_8 $$ if (presentNames.containsKey(nameKey)) [ FD ]
Line_2 $$ public static <T extends PsiElement> void doDuplicationCheckForElements(final T[] elements, final Map<String, T> presentNames, DuplicationInfoProvider<T> provider, final Validator.ValidationHost host) -->Line_8 $$ if (presentNames.containsKey(nameKey)) [ FD ]
Line_8 $$ if (presentNames.containsKey(nameKey)) -->Line_15 $$ host.addMessage(provider.getNodeForMessage(t), message, Validator.ValidationHost.ErrorType.ERROR)[ CD ]
Line_10 $$ final String message = XmlErrorMessages.message("duplicate.declaration", nameKey)-->Line_15 $$ host.addMessage(provider.getNodeForMessage(t), message, Validator.ValidationHost.ErrorType.ERROR)[ FD ]
Line_2 $$ public static <T extends PsiElement> void doDuplicationCheckForElements(final T[] elements, final Map<String, T> presentNames, DuplicationInfoProvider<T> provider, final Validator.ValidationHost host) -->Line_7 $$ final String nameKey = provider.getNameKey(t, name)[ FD ]
Line_10 $$ final String message = XmlErrorMessages.message("duplicate.declaration", nameKey)-->Line_13 $$ host.addMessage(provider.getNodeForMessage(psiElement), message, Validator.ValidationHost.ErrorType.ERROR)[ FD ]
Line_11 $$ if (psiElement != null) -->Line_12 $$ presentNames.put(nameKey, null)[ CD ]
Line_2 $$ public static <T extends PsiElement> void doDuplicationCheckForElements(final T[] elements, final Map<String, T> presentNames, DuplicationInfoProvider<T> provider, final Validator.ValidationHost host) -->Line_4 $$ final String name = provider.getName(t)[ FD ]
Line_7 $$ final String nameKey = provider.getNameKey(t, name)-->Line_12 $$ presentNames.put(nameKey, null)[ FD ]
Line_4 $$ final String name = provider.getName(t)-->Line_7 $$ final String nameKey = provider.getNameKey(t, name)[ FD ]
Line_9 $$ final T psiElement = presentNames.get(nameKey)-->Line_11 $$ if (psiElement != null) [ FD ]
Line_11 $$ if (psiElement != null) -->Line_13 $$ host.addMessage(provider.getNodeForMessage(psiElement), message, Validator.ValidationHost.ErrorType.ERROR)[ CD ]
