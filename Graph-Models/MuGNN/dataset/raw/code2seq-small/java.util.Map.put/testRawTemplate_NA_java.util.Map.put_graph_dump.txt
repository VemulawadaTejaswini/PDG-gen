Line_2 $$ public void testRawTemplate() throws IOException -->Line_7 $$ QueryBuilder<?> expectedBuilder = new TemplateQueryBuilder(new Template(expectedTemplateString, ScriptType.INLINE, null, XContentType.JSON, params))[ CD ]
Line_2 $$ public void testRawTemplate() throws IOException -->Line_4 $$ String query = "[ CD ]
Line_2 $$ public void testRawTemplate() throws IOException -->Line_8 $$ assertParsedQuery(query, expectedBuilder)[ CD ]
Line_2 $$ public void testRawTemplate() throws IOException -->Line_6 $$ params.put("template", "all")[ CD ]
Line_4 $$ String query = "-->Line_8 $$ assertParsedQuery(query, expectedBuilder)[ FD ]
Line_2 $$ public void testRawTemplate() throws IOException -->Line_5 $$ Map<String, Object> params = new HashMap()[ CD ]
Line_7 $$ QueryBuilder<?> expectedBuilder = new TemplateQueryBuilder(new Template(expectedTemplateString, ScriptType.INLINE, null, XContentType.JSON, params))-->Line_8 $$ assertParsedQuery(query, expectedBuilder)[ FD ]
Line_5 $$ Map<String, Object> params = new HashMap()-->Line_6 $$ params.put("template", "all")[ FD ]
Line_2 $$ public void testRawTemplate() throws IOException -->Line_3 $$ String expectedTemplateString = "[ CD ]
