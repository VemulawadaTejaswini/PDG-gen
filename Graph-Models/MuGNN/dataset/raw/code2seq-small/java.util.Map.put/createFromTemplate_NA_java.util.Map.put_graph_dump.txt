Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_4 $$ if (propsMap == null) [ CD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_3 $$ final Project project = directory.getProject()[ FD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_4 $$ if (propsMap == null) [ FD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_7 $$ putAll(propsMap, p)[ FD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_9 $$ FileTemplateManager.getInstance(project).addRecentName(template.getName())[ CD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_50 $$ if (commandException[0] != null) [ CD ]
Line_13 $$ final CreateFromTemplateHandler handler = findHandler(template)-->Line_26 $$ handler.prepareProperties(propsMap)[ FD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_24 $$ propsMap.put(dummyRef, "")[ FD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_31 $$ return template.getText(props_)[ FD ]
Line_27 $$ final Map<String, Object> props_ = propsMap-->Line_42 $$ result[0] = handler.createFromTemplate(project, directory, fileName_, template, templateText, props_)[ FD ]
Line_5 $$ Properties p = FileTemplateManager.getInstance(project).getDefaultProperties()-->Line_7 $$ putAll(propsMap, p)[ FD ]
Line_14 $$ if (fileName != null && propsMap.get(FileTemplate.ATTRIBUTE_NAME) == null) -->Line_16 $$ if (fileName == null && handler.isNameRequired()) [ CD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_14 $$ if (fileName != null && propsMap.get(FileTemplate.ATTRIBUTE_NAME) == null) [ CD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_37 $$ CommandProcessor.getInstance().executeCommand(project, new Runnable() [ CD ]
Line_13 $$ final CreateFromTemplateHandler handler = findHandler(template)-->Line_16 $$ if (fileName == null && handler.isNameRequired()) [ FD ]
Line_3 $$ final Project project = directory.getProject()-->Line_37 $$ CommandProcessor.getInstance().executeCommand(project, new Runnable() [ FD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_3 $$ final Project project = directory.getProject()[ CD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_34 $$ final String templateText = StringUtil.convertLineSeparators(mergedText)[ CD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_11 $$ fillDefaultProperties(p, directory)[ CD ]
Line_37 $$ CommandProcessor.getInstance().executeCommand(project, new Runnable() -->Line_39 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() [ CD ]
Line_4 $$ if (propsMap == null) -->Line_7 $$ putAll(propsMap, p)[ CD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_22 $$ String[] dummyRefs = calculateAttributes(template.getText(), propsMap, true, directory.getProject())[ CD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_12 $$ putAll(propsMap, p)[ FD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_17 $$ fileName = (String) propsMap.get(FileTemplate.ATTRIBUTE_NAME)[ FD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_29 $$ String mergedText = ClassLoaderUtil.runWithClassLoader(classLoader != null ? classLoader : FileTemplateUtil.class.getClassLoader(), new ThrowableComputable<String, IOException>() [ CD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_53 $$ return result[0][ CD ]
Line_14 $$ if (fileName != null && propsMap.get(FileTemplate.ATTRIBUTE_NAME) == null) -->Line_15 $$ propsMap.put(FileTemplate.ATTRIBUTE_NAME, fileName)[ CD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_14 $$ if (fileName != null && propsMap.get(FileTemplate.ATTRIBUTE_NAME) == null) [ FD ]
Line_3 $$ final Project project = directory.getProject()-->Line_5 $$ Properties p = FileTemplateManager.getInstance(project).getDefaultProperties()[ FD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_13 $$ final CreateFromTemplateHandler handler = findHandler(template)[ FD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_15 $$ propsMap.put(FileTemplate.ATTRIBUTE_NAME, fileName)[ FD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_26 $$ handler.prepareProperties(propsMap)[ FD ]
Line_5 $$ Properties p = FileTemplateManager.getInstance(project).getDefaultProperties()-->Line_11 $$ fillDefaultProperties(p, directory)[ FD ]
Line_29 $$ String mergedText = ClassLoaderUtil.runWithClassLoader(classLoader != null ? classLoader : FileTemplateUtil.class.getClassLoader(), new ThrowableComputable<String, IOException>() -->Line_34 $$ final String templateText = StringUtil.convertLineSeparators(mergedText)[ FD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_13 $$ final CreateFromTemplateHandler handler = findHandler(template)[ CD ]
Line_16 $$ if (fileName == null && handler.isNameRequired()) -->Line_18 $$ if (fileName == null) [ CD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_18 $$ if (fileName == null) [ FD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_22 $$ String[] dummyRefs = calculateAttributes(template.getText(), propsMap, true, directory.getProject())[ FD ]
Line_28 $$ final String fileName_ = fileName-->Line_42 $$ result[0] = handler.createFromTemplate(project, directory, fileName_, template, templateText, props_)[ FD ]
Line_3 $$ final Project project = directory.getProject()-->Line_42 $$ result[0] = handler.createFromTemplate(project, directory, fileName_, template, templateText, props_)[ FD ]
Line_13 $$ final CreateFromTemplateHandler handler = findHandler(template)-->Line_42 $$ result[0] = handler.createFromTemplate(project, directory, fileName_, template, templateText, props_)[ FD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_11 $$ fillDefaultProperties(p, directory)[ FD ]
Line_4 $$ if (propsMap == null) -->Line_5 $$ Properties p = FileTemplateManager.getInstance(project).getDefaultProperties()[ CD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_26 $$ handler.prepareProperties(propsMap)[ CD ]
Line_3 $$ final Project project = directory.getProject()-->Line_9 $$ FileTemplateManager.getInstance(project).addRecentName(template.getName())[ FD ]
Line_29 $$ String mergedText = ClassLoaderUtil.runWithClassLoader(classLoader != null ? classLoader : FileTemplateUtil.class.getClassLoader(), new ThrowableComputable<String, IOException>() -->Line_31 $$ return template.getText(props_)[ CD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_27 $$ final Map<String, Object> props_ = propsMap[ CD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_37 $$ CommandProcessor.getInstance().executeCommand(project, new Runnable() [ FD ]
Line_23 $$ for (String dummyRef : dummyRefs) -->Line_24 $$ propsMap.put(dummyRef, "")[ FD ]
Line_27 $$ final Map<String, Object> props_ = propsMap-->Line_31 $$ return template.getText(props_)[ FD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_9 $$ FileTemplateManager.getInstance(project).addRecentName(template.getName())[ FD ]
Line_5 $$ Properties p = FileTemplateManager.getInstance(project).getDefaultProperties()-->Line_12 $$ putAll(propsMap, p)[ FD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_42 $$ result[0] = handler.createFromTemplate(project, directory, fileName_, template, templateText, props_)[ FD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_12 $$ putAll(propsMap, p)[ CD ]
Line_2 $$ public static PsiElement createFromTemplate(@NotNull final FileTemplate template, @NonNls @Nullable String fileName, @Nullable Map<String, Object> propsMap, @NotNull final PsiDirectory directory, @Nullable ClassLoader classLoader) throws Exception -->Line_28 $$ final String fileName_ = fileName[ CD ]
