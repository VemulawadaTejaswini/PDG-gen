Line_15 $$ OutputStream manifestStream = new BufferedOutputStream(new FileOutputStream(moduleManifestFile))-->Line_16 $$ m.write(manifestStream)[ FD ]
Line_2 $$ private void buildProductModule(String layer) throws Exception -->Line_16 $$ m.write(manifestStream)[ CD ]
Line_2 $$ private void buildProductModule(String layer) throws Exception -->Line_5 $$ Assert.assertTrue(moduleDir.mkdirs())[ CD ]
Line_15 $$ OutputStream manifestStream = new BufferedOutputStream(new FileOutputStream(moduleManifestFile))-->Line_17 $$ manifestStream.flush()[ FD ]
Line_21 $$ File productConf = new File(binDir, "product.conf")-->Line_22 $$ if (productConf.exists())[ FD ]
Line_6 $$ File moduleXmlFile = new File(moduleDir, "module.xml")-->Line_7 $$ FileUtils.copyInputStreamToFile(LayeredDistributionTestCase.class.getResourceAsStream("/layered/product-module.xml"), moduleXmlFile)[ FD ]
Line_2 $$ private void buildProductModule(String layer) throws Exception -->Line_18 $$ manifestStream.close()[ CD ]
Line_2 $$ private void buildProductModule(String layer) throws Exception -->Line_8 $$ File manifestDir = new File(moduleDir, "classes" + File.separator + "META-INF")[ CD ]
Line_2 $$ private void buildProductModule(String layer) throws Exception -->Line_13 $$ m.getMainAttributes().putValue("JBoss-Product-Release-Name", PRODUCT_NAME)[ CD ]
Line_2 $$ private void buildProductModule(String layer) throws Exception -->Line_21 $$ File productConf = new File(binDir, "product.conf")[ CD ]
Line_2 $$ private void buildProductModule(String layer) throws Exception -->Line_22 $$ if (productConf.exists())[ CD ]
Line_8 $$ File manifestDir = new File(moduleDir, "classes" + File.separator + "META-INF")-->Line_9 $$ Assert.assertTrue(manifestDir.mkdirs())[ FD ]
Line_2 $$ private void buildProductModule(String layer) throws Exception -->Line_20 $$ Assert.assertTrue(binDir.exists())[ CD ]
Line_2 $$ private void buildProductModule(String layer) throws Exception -->Line_15 $$ OutputStream manifestStream = new BufferedOutputStream(new FileOutputStream(moduleManifestFile))[ CD ]
Line_2 $$ private void buildProductModule(String layer) throws Exception -->Line_6 $$ File moduleXmlFile = new File(moduleDir, "module.xml")[ CD ]
Line_21 $$ File productConf = new File(binDir, "product.conf")-->Line_23 $$ productConf.delete()[ FD ]
Line_2 $$ private void buildProductModule(String layer) throws Exception -->Line_7 $$ FileUtils.copyInputStreamToFile(LayeredDistributionTestCase.class.getResourceAsStream("/layered/product-module.xml"), moduleXmlFile)[ CD ]
Line_22 $$ if (productConf.exists())-->Line_23 $$ productConf.delete()[ CD ]
Line_11 $$ Manifest m = new Manifest()-->Line_16 $$ m.write(manifestStream)[ FD ]
Line_2 $$ private void buildProductModule(String layer) throws Exception -->Line_24 $$ FileUtils.writeStringToFile(productConf, "slot=test" + System.getProperty("line.separator"))[ CD ]
Line_2 $$ private void buildProductModule(String layer) throws Exception -->Line_12 $$ m.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1.0")[ CD ]
Line_11 $$ Manifest m = new Manifest()-->Line_14 $$ m.getMainAttributes().putValue("JBoss-Product-Release-Version", PRODUCT_VERSION)[ FD ]
Line_4 $$ File moduleDir = new File(layerDir, "org" + File.separator + "jboss" + File.separator + "as" + File.separator + "product" + File.separator + "test")-->Line_5 $$ Assert.assertTrue(moduleDir.mkdirs())[ FD ]
Line_11 $$ Manifest m = new Manifest()-->Line_13 $$ m.getMainAttributes().putValue("JBoss-Product-Release-Name", PRODUCT_NAME)[ FD ]
Line_15 $$ OutputStream manifestStream = new BufferedOutputStream(new FileOutputStream(moduleManifestFile))-->Line_18 $$ manifestStream.close()[ FD ]
Line_21 $$ File productConf = new File(binDir, "product.conf")-->Line_24 $$ FileUtils.writeStringToFile(productConf, "slot=test" + System.getProperty("line.separator"))[ FD ]
Line_2 $$ private void buildProductModule(String layer) throws Exception -->Line_9 $$ Assert.assertTrue(manifestDir.mkdirs())[ CD ]
Line_19 $$ File binDir = new File(AS_PATH, "bin")-->Line_20 $$ Assert.assertTrue(binDir.exists())[ FD ]
Line_11 $$ Manifest m = new Manifest()-->Line_12 $$ m.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1.0")[ FD ]
Line_2 $$ private void buildProductModule(String layer) throws Exception -->Line_11 $$ Manifest m = new Manifest()[ CD ]
Line_2 $$ private void buildProductModule(String layer) throws Exception -->Line_17 $$ manifestStream.flush()[ CD ]
Line_2 $$ private void buildProductModule(String layer) throws Exception -->Line_4 $$ File moduleDir = new File(layerDir, "org" + File.separator + "jboss" + File.separator + "as" + File.separator + "product" + File.separator + "test")[ CD ]
Line_2 $$ private void buildProductModule(String layer) throws Exception -->Line_19 $$ File binDir = new File(AS_PATH, "bin")[ CD ]
Line_2 $$ private void buildProductModule(String layer) throws Exception -->Line_3 $$ File layerDir = new File(layersDir, layer)[ CD ]
Line_2 $$ private void buildProductModule(String layer) throws Exception -->Line_14 $$ m.getMainAttributes().putValue("JBoss-Product-Release-Version", PRODUCT_VERSION)[ CD ]
Line_2 $$ private void buildProductModule(String layer) throws Exception -->Line_10 $$ File moduleManifestFile = new File(manifestDir, "MANIFEST.MF")[ CD ]
