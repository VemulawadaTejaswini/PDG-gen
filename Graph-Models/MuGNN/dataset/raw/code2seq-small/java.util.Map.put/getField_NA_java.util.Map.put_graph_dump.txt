Line_39 $$ if (isMapType(type)) -->Line_49 $$ return Collections.unmodifiableMap(map)[ CD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_25 $$ if (TimestampType.TIMESTAMP.equals(type)) [ CD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_3 $$ if (block.isNull(position)) [ FD ]
Line_51 $$ if (isRowType(type)) -->Line_56 $$ for (int i = 0; i < rowBlock.getPositionCount(); i++) [ CD ]
Line_33 $$ for (int i = 0; i < arrayBlock.getPositionCount(); i++) -->Line_57 $$ Object element = getField(fieldTypes.get(i), rowBlock, i)[ FD ]
Line_39 $$ if (isMapType(type)) -->Line_42 $$ Block mapBlock = block.getObject(position, Block.class)[ CD ]
Line_44 $$ for (int i = 0; i < mapBlock.getPositionCount(); i += 2) -->Line_46 $$ Object value = getField(valueType, mapBlock, i + 1)[ CD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_53 $$ List<Type> fieldTypes = type.getTypeParameters()[ FD ]
Line_31 $$ Block arrayBlock = block.getObject(position, Block.class)-->Line_32 $$ List<Object> list = new ArrayList(arrayBlock.getPositionCount())[ FD ]
Line_52 $$ Block rowBlock = block.getObject(position, Block.class)-->Line_54 $$ checkCondition(fieldTypes.size() == rowBlock.getPositionCount(), StandardErrorCode.INTERNAL_ERROR, "Expected row value field count does not match type field count")[ FD ]
Line_34 $$ Object element = getField(elementType, arrayBlock, i)-->Line_35 $$ list.add(element)[ FD ]
Line_52 $$ Block rowBlock = block.getObject(position, Block.class)-->Line_57 $$ Object element = getField(fieldTypes.get(i), rowBlock, i)[ FD ]
Line_33 $$ for (int i = 0; i < arrayBlock.getPositionCount(); i++) -->Line_34 $$ Object element = getField(elementType, arrayBlock, i)[ CD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_22 $$ long days = type.getLong(block, position)[ FD ]
Line_44 $$ for (int i = 0; i < mapBlock.getPositionCount(); i += 2) -->Line_57 $$ Object element = getField(fieldTypes.get(i), rowBlock, i)[ FD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_12 $$ if (DoubleType.DOUBLE.equals(type)) [ FD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_13 $$ return type.getDouble(block, position)[ FD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_30 $$ Type elementType = type.getTypeParameters().get(0)[ FD ]
Line_29 $$ if (isArrayType(type)) -->Line_32 $$ List<Object> list = new ArrayList(arrayBlock.getPositionCount())[ CD ]
Line_42 $$ Block mapBlock = block.getObject(position, Block.class)-->Line_46 $$ Object value = getField(valueType, mapBlock, i + 1)[ FD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_6 $$ if (BooleanType.BOOLEAN.equals(type)) [ CD ]
Line_42 $$ Block mapBlock = block.getObject(position, Block.class)-->Line_45 $$ Object key = getField(keyType, mapBlock, i)[ FD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_41 $$ Type valueType = type.getTypeParameters().get(1)[ FD ]
Line_33 $$ for (int i = 0; i < arrayBlock.getPositionCount(); i++) -->Line_35 $$ list.add(element)[ CD ]
Line_56 $$ for (int i = 0; i < rowBlock.getPositionCount(); i++) -->Line_57 $$ Object element = getField(fieldTypes.get(i), rowBlock, i)[ FD ]
Line_34 $$ Object element = getField(elementType, arrayBlock, i)-->Line_58 $$ row.add(element)[ FD ]
Line_32 $$ List<Object> list = new ArrayList(arrayBlock.getPositionCount())-->Line_35 $$ list.add(element)[ FD ]
Line_22 $$ long days = type.getLong(block, position)-->Line_23 $$ return new Date(UTC.getMillisKeepLocal(DateTimeZone.getDefault(), TimeUnit.DAYS.toMillis(days)))[ FD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_19 $$ return type.getSlice(block, position).getBytes()[ FD ]
Line_44 $$ for (int i = 0; i < mapBlock.getPositionCount(); i += 2) -->Line_45 $$ Object key = getField(keyType, mapBlock, i)[ CD ]
Line_33 $$ for (int i = 0; i < arrayBlock.getPositionCount(); i++) -->Line_34 $$ Object element = getField(elementType, arrayBlock, i)[ FD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_25 $$ if (TimestampType.TIMESTAMP.equals(type)) [ FD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_3 $$ if (block.isNull(position)) [ CD ]
Line_57 $$ Object element = getField(fieldTypes.get(i), rowBlock, i)-->Line_58 $$ row.add(element)[ FD ]
Line_39 $$ if (isMapType(type)) -->Line_41 $$ Type valueType = type.getTypeParameters().get(1)[ CD ]
Line_51 $$ if (isRowType(type)) -->Line_60 $$ return Collections.unmodifiableList(row)[ CD ]
Line_53 $$ List<Type> fieldTypes = type.getTypeParameters()-->Line_57 $$ Object element = getField(fieldTypes.get(i), rowBlock, i)[ FD ]
Line_56 $$ for (int i = 0; i < rowBlock.getPositionCount(); i++) -->Line_57 $$ Object element = getField(fieldTypes.get(i), rowBlock, i)[ CD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_29 $$ if (isArrayType(type)) [ FD ]
Line_56 $$ for (int i = 0; i < rowBlock.getPositionCount(); i++) -->Line_58 $$ row.add(element)[ CD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_52 $$ Block rowBlock = block.getObject(position, Block.class)[ FD ]
Line_51 $$ if (isRowType(type)) -->Line_53 $$ List<Type> fieldTypes = type.getTypeParameters()[ CD ]
Line_55 $$ List<Object> row = new ArrayList(rowBlock.getPositionCount())-->Line_60 $$ return Collections.unmodifiableList(row)[ FD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_26 $$ long millisUtc = type.getLong(block, position)[ FD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_21 $$ if (DateType.DATE.equals(type)) [ CD ]
Line_18 $$ if (VarbinaryType.VARBINARY.equals(type)) -->Line_19 $$ return type.getSlice(block, position).getBytes()[ CD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_6 $$ if (BooleanType.BOOLEAN.equals(type)) [ FD ]
Line_6 $$ if (BooleanType.BOOLEAN.equals(type)) -->Line_7 $$ return type.getBoolean(block, position)[ CD ]
Line_39 $$ if (isMapType(type)) -->Line_44 $$ for (int i = 0; i < mapBlock.getPositionCount(); i += 2) [ CD ]
Line_15 $$ if (VarcharType.VARCHAR.equals(type)) -->Line_16 $$ return type.getSlice(block, position).toStringUtf8()[ CD ]
Line_51 $$ if (isRowType(type)) -->Line_52 $$ Block rowBlock = block.getObject(position, Block.class)[ CD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_10 $$ return type.getLong(block, position)[ FD ]
Line_29 $$ if (isArrayType(type)) -->Line_37 $$ return Collections.unmodifiableList(list)[ CD ]
Line_55 $$ List<Object> row = new ArrayList(rowBlock.getPositionCount())-->Line_58 $$ row.add(element)[ FD ]
Line_21 $$ if (DateType.DATE.equals(type)) -->Line_22 $$ long days = type.getLong(block, position)[ CD ]
Line_31 $$ Block arrayBlock = block.getObject(position, Block.class)-->Line_34 $$ Object element = getField(elementType, arrayBlock, i)[ FD ]
Line_39 $$ if (isMapType(type)) -->Line_43 $$ Map<Object, Object> map = new HashMap()[ CD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_7 $$ return type.getBoolean(block, position)[ FD ]
Line_29 $$ if (isArrayType(type)) -->Line_33 $$ for (int i = 0; i < arrayBlock.getPositionCount(); i++) [ CD ]
Line_12 $$ if (DoubleType.DOUBLE.equals(type)) -->Line_13 $$ return type.getDouble(block, position)[ CD ]
Line_25 $$ if (TimestampType.TIMESTAMP.equals(type)) -->Line_26 $$ long millisUtc = type.getLong(block, position)[ CD ]
Line_43 $$ Map<Object, Object> map = new HashMap()-->Line_49 $$ return Collections.unmodifiableMap(map)[ FD ]
Line_21 $$ if (DateType.DATE.equals(type)) -->Line_23 $$ return new Date(UTC.getMillisKeepLocal(DateTimeZone.getDefault(), TimeUnit.DAYS.toMillis(days)))[ CD ]
Line_41 $$ Type valueType = type.getTypeParameters().get(1)-->Line_46 $$ Object value = getField(valueType, mapBlock, i + 1)[ FD ]
Line_25 $$ if (TimestampType.TIMESTAMP.equals(type)) -->Line_27 $$ return new Timestamp(millisUtc)[ CD ]
Line_33 $$ for (int i = 0; i < arrayBlock.getPositionCount(); i++) -->Line_44 $$ for (int i = 0; i < mapBlock.getPositionCount(); i += 2) [ FD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_21 $$ if (DateType.DATE.equals(type)) [ FD ]
Line_53 $$ List<Type> fieldTypes = type.getTypeParameters()-->Line_54 $$ checkCondition(fieldTypes.size() == rowBlock.getPositionCount(), StandardErrorCode.INTERNAL_ERROR, "Expected row value field count does not match type field count")[ FD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_40 $$ Type keyType = type.getTypeParameters().get(0)[ FD ]
Line_51 $$ if (isRowType(type)) -->Line_55 $$ List<Object> row = new ArrayList(rowBlock.getPositionCount())[ CD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_18 $$ if (VarbinaryType.VARBINARY.equals(type)) [ FD ]
Line_52 $$ Block rowBlock = block.getObject(position, Block.class)-->Line_56 $$ for (int i = 0; i < rowBlock.getPositionCount(); i++) [ FD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_31 $$ Block arrayBlock = block.getObject(position, Block.class)[ FD ]
Line_3 $$ if (block.isNull(position)) -->Line_4 $$ return null[ CD ]
Line_42 $$ Block mapBlock = block.getObject(position, Block.class)-->Line_44 $$ for (int i = 0; i < mapBlock.getPositionCount(); i += 2) [ FD ]
Line_51 $$ if (isRowType(type)) -->Line_54 $$ checkCondition(fieldTypes.size() == rowBlock.getPositionCount(), StandardErrorCode.INTERNAL_ERROR, "Expected row value field count does not match type field count")[ CD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_39 $$ if (isMapType(type)) [ FD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_12 $$ if (DoubleType.DOUBLE.equals(type)) [ CD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_29 $$ if (isArrayType(type)) [ CD ]
Line_29 $$ if (isArrayType(type)) -->Line_31 $$ Block arrayBlock = block.getObject(position, Block.class)[ CD ]
Line_46 $$ Object value = getField(valueType, mapBlock, i + 1)-->Line_47 $$ map.put(key, value)[ FD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_15 $$ if (VarcharType.VARCHAR.equals(type)) [ CD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_15 $$ if (VarcharType.VARCHAR.equals(type)) [ FD ]
Line_33 $$ for (int i = 0; i < arrayBlock.getPositionCount(); i++) -->Line_56 $$ for (int i = 0; i < rowBlock.getPositionCount(); i++) [ FD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_51 $$ if (isRowType(type)) [ CD ]
Line_39 $$ if (isMapType(type)) -->Line_40 $$ Type keyType = type.getTypeParameters().get(0)[ CD ]
Line_31 $$ Block arrayBlock = block.getObject(position, Block.class)-->Line_33 $$ for (int i = 0; i < arrayBlock.getPositionCount(); i++) [ FD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_16 $$ return type.getSlice(block, position).toStringUtf8()[ FD ]
Line_45 $$ Object key = getField(keyType, mapBlock, i)-->Line_47 $$ map.put(key, value)[ FD ]
Line_44 $$ for (int i = 0; i < mapBlock.getPositionCount(); i += 2) -->Line_56 $$ for (int i = 0; i < rowBlock.getPositionCount(); i++) [ FD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_42 $$ Block mapBlock = block.getObject(position, Block.class)[ FD ]
Line_29 $$ if (isArrayType(type)) -->Line_30 $$ Type elementType = type.getTypeParameters().get(0)[ CD ]
Line_52 $$ Block rowBlock = block.getObject(position, Block.class)-->Line_55 $$ List<Object> row = new ArrayList(rowBlock.getPositionCount())[ FD ]
Line_9 $$ if (BigintType.BIGINT.equals(type)) -->Line_10 $$ return type.getLong(block, position)[ CD ]
Line_32 $$ List<Object> list = new ArrayList(arrayBlock.getPositionCount())-->Line_37 $$ return Collections.unmodifiableList(list)[ FD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_9 $$ if (BigintType.BIGINT.equals(type)) [ FD ]
Line_44 $$ for (int i = 0; i < mapBlock.getPositionCount(); i += 2) -->Line_47 $$ map.put(key, value)[ CD ]
Line_43 $$ Map<Object, Object> map = new HashMap()-->Line_47 $$ map.put(key, value)[ FD ]
Line_33 $$ for (int i = 0; i < arrayBlock.getPositionCount(); i++) -->Line_45 $$ Object key = getField(keyType, mapBlock, i)[ FD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_18 $$ if (VarbinaryType.VARBINARY.equals(type)) [ CD ]
Line_40 $$ Type keyType = type.getTypeParameters().get(0)-->Line_45 $$ Object key = getField(keyType, mapBlock, i)[ FD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_9 $$ if (BigintType.BIGINT.equals(type)) [ CD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_39 $$ if (isMapType(type)) [ CD ]
Line_44 $$ for (int i = 0; i < mapBlock.getPositionCount(); i += 2) -->Line_45 $$ Object key = getField(keyType, mapBlock, i)[ FD ]
Line_2 $$ public static Object getField(Type type, Block block, int position) -->Line_51 $$ if (isRowType(type)) [ FD ]
Line_30 $$ Type elementType = type.getTypeParameters().get(0)-->Line_34 $$ Object element = getField(elementType, arrayBlock, i)[ FD ]
