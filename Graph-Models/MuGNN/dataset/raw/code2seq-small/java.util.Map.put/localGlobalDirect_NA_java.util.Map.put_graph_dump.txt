Line_2 $$ public IndexParentChildFieldData localGlobalDirect(DirectoryReader indexReader) throws Exception -->Line_15 $$ final AtomicParentChildFieldData[] fielddata = new AtomicParentChildFieldData[indexReader.leaves().size()][ FD ]
Line_2 $$ public IndexParentChildFieldData localGlobalDirect(DirectoryReader indexReader) throws Exception -->Line_4 $$ long ramBytesUsed = 0[ CD ]
Line_2 $$ public IndexParentChildFieldData localGlobalDirect(DirectoryReader indexReader) throws Exception -->Line_23 $$ return new GlobalFieldData(indexReader, fielddata, ramBytesUsed, perType)[ CD ]
Line_2 $$ public IndexParentChildFieldData localGlobalDirect(DirectoryReader indexReader) throws Exception -->Line_5 $$ final Map<String, OrdinalMapAndAtomicFieldData> perType = new HashMap()[ CD ]
Line_2 $$ public IndexParentChildFieldData localGlobalDirect(DirectoryReader indexReader) throws Exception -->Line_8 $$ for (LeafReaderContext context : indexReader.leaves()) [ FD ]
Line_12 $$ ramBytesUsed += ordMap.ramBytesUsed()-->Line_19 $$ breakerService.getBreaker(CircuitBreaker.FIELDDATA).addWithoutBreaking(ramBytesUsed)[ FD ]
Line_4 $$ long ramBytesUsed = 0-->Line_12 $$ ramBytesUsed += ordMap.ramBytesUsed()[ FD ]
Line_2 $$ public IndexParentChildFieldData localGlobalDirect(DirectoryReader indexReader) throws Exception -->Line_20 $$ if (logger.isDebugEnabled()) [ CD ]
Line_2 $$ public IndexParentChildFieldData localGlobalDirect(DirectoryReader indexReader) throws Exception -->Line_3 $$ final long startTime = System.nanoTime()[ CD ]
Line_8 $$ for (LeafReaderContext context : indexReader.leaves()) -->Line_9 $$ fieldData[context.ord] = load(context)[ FD ]
Line_2 $$ public IndexParentChildFieldData localGlobalDirect(DirectoryReader indexReader) throws Exception -->Line_7 $$ final AtomicParentChildFieldData[] fieldData = new AtomicParentChildFieldData[indexReader.leaves().size()][ FD ]
Line_11 $$ final OrdinalMap ordMap = buildOrdinalMap(fieldData, type)-->Line_12 $$ ramBytesUsed += ordMap.ramBytesUsed()[ FD ]
Line_2 $$ public IndexParentChildFieldData localGlobalDirect(DirectoryReader indexReader) throws Exception -->Line_15 $$ final AtomicParentChildFieldData[] fielddata = new AtomicParentChildFieldData[indexReader.leaves().size()][ CD ]
Line_6 $$ for (String type : parentTypes) -->Line_13 $$ perType.put(type, new OrdinalMapAndAtomicFieldData(ordMap, fieldData))[ FD ]
Line_20 $$ if (logger.isDebugEnabled()) -->Line_21 $$ logger.debug("Global-ordinals[_parent] took [ CD ]
Line_7 $$ final AtomicParentChildFieldData[] fieldData = new AtomicParentChildFieldData[indexReader.leaves().size()]-->Line_11 $$ final OrdinalMap ordMap = buildOrdinalMap(fieldData, type)[ FD ]
Line_6 $$ for (String type : parentTypes) -->Line_11 $$ final OrdinalMap ordMap = buildOrdinalMap(fieldData, type)[ FD ]
Line_2 $$ public IndexParentChildFieldData localGlobalDirect(DirectoryReader indexReader) throws Exception -->Line_19 $$ breakerService.getBreaker(CircuitBreaker.FIELDDATA).addWithoutBreaking(ramBytesUsed)[ CD ]
Line_5 $$ final Map<String, OrdinalMapAndAtomicFieldData> perType = new HashMap()-->Line_13 $$ perType.put(type, new OrdinalMapAndAtomicFieldData(ordMap, fieldData))[ FD ]
Line_2 $$ public IndexParentChildFieldData localGlobalDirect(DirectoryReader indexReader) throws Exception -->Line_16 $$ for (int i = 0; i < fielddata.length; ++i) [ CD ]
Line_16 $$ for (int i = 0; i < fielddata.length; ++i) -->Line_17 $$ fielddata[i] = new GlobalAtomicFieldData(parentTypes, perType, i)[ CD ]
Line_4 $$ long ramBytesUsed = 0-->Line_19 $$ breakerService.getBreaker(CircuitBreaker.FIELDDATA).addWithoutBreaking(ramBytesUsed)[ FD ]
