Line_2 $$ public void testJavaTupleTypeCollection() throws Throwable -->Line_14 $$ map.put(2, false)[ CD ]
Line_25 $$ for (int version : PROTOCOL_VERSIONS) -->Line_30 $$ assertRowsNet(version, executeNet(version, "SELECT " + fTup4 + "(tup) FROM %s WHERE key = 1"), row(map))[ FD ]
Line_2 $$ public void testJavaTupleTypeCollection() throws Throwable -->Line_16 $$ Object t = tuple(1d, list, set, map)[ CD ]
Line_2 $$ public void testJavaTupleTypeCollection() throws Throwable -->Line_21 $$ assertRows(execute("SELECT " + fTup3 + "(tup) FROM %s WHERE key = 1"), row(set))[ CD ]
Line_12 $$ Map<Integer, Boolean> map = new TreeMap()-->Line_13 $$ map.put(1, true)[ FD ]
Line_12 $$ Map<Integer, Boolean> map = new TreeMap()-->Line_30 $$ assertRowsNet(version, executeNet(version, "SELECT " + fTup4 + "(tup) FROM %s WHERE key = 1"), row(map))[ FD ]
Line_11 $$ Set<String> set = new TreeSet(Arrays.asList("one", "three", "two"))-->Line_24 $$ TupleValue tup = tType.newValue(1d, list, set, map)[ FD ]
Line_11 $$ Set<String> set = new TreeSet(Arrays.asList("one", "three", "two"))-->Line_21 $$ assertRows(execute("SELECT " + fTup3 + "(tup) FROM %s WHERE key = 1"), row(set))[ FD ]
Line_16 $$ Object t = tuple(1d, list, set, map)-->Line_17 $$ execute("INSERT INTO %s (key, tup) VALUES (1, ?)", t)[ FD ]
Line_11 $$ Set<String> set = new TreeSet(Arrays.asList("one", "three", "two"))-->Line_16 $$ Object t = tuple(1d, list, set, map)[ FD ]
Line_25 $$ for (int version : PROTOCOL_VERSIONS) -->Line_26 $$ assertRowsNet(version, executeNet(version, "SELECT " + fTup0 + "(tup) FROM %s WHERE key = 1"), row(tup))[ FD ]
Line_2 $$ public void testJavaTupleTypeCollection() throws Throwable -->Line_18 $$ assertRows(execute("SELECT " + fTup0 + "(tup) FROM %s WHERE key = 1"), row(t))[ CD ]
Line_2 $$ public void testJavaTupleTypeCollection() throws Throwable -->Line_19 $$ assertRows(execute("SELECT " + fTup1 + "(tup) FROM %s WHERE key = 1"), row(1d))[ CD ]
Line_2 $$ public void testJavaTupleTypeCollection() throws Throwable -->Line_10 $$ List<Double> list = Arrays.asList(1d, 2d, 3d)[ CD ]
Line_25 $$ for (int version : PROTOCOL_VERSIONS) -->Line_27 $$ assertRowsNet(version, executeNet(version, "SELECT " + fTup1 + "(tup) FROM %s WHERE key = 1"), row(1d))[ FD ]
Line_2 $$ public void testJavaTupleTypeCollection() throws Throwable -->Line_24 $$ TupleValue tup = tType.newValue(1d, list, set, map)[ CD ]
Line_2 $$ public void testJavaTupleTypeCollection() throws Throwable -->Line_12 $$ Map<Integer, Boolean> map = new TreeMap()[ CD ]
Line_10 $$ List<Double> list = Arrays.asList(1d, 2d, 3d)-->Line_28 $$ assertRowsNet(version, executeNet(version, "SELECT " + fTup2 + "(tup) FROM %s WHERE key = 1"), row(list))[ FD ]
Line_2 $$ public void testJavaTupleTypeCollection() throws Throwable -->Line_11 $$ Set<String> set = new TreeSet(Arrays.asList("one", "three", "two"))[ CD ]
Line_23 $$ TupleType tType = tupleTypeOf(Server.VERSION_3, DataType.cdouble(), DataType.list(DataType.cdouble()), DataType.set(DataType.text()), DataType.map(DataType.cint(), DataType.cboolean()))-->Line_24 $$ TupleValue tup = tType.newValue(1d, list, set, map)[ FD ]
Line_11 $$ Set<String> set = new TreeSet(Arrays.asList("one", "three", "two"))-->Line_29 $$ assertRowsNet(version, executeNet(version, "SELECT " + fTup3 + "(tup) FROM %s WHERE key = 1"), row(set))[ FD ]
Line_2 $$ public void testJavaTupleTypeCollection() throws Throwable -->Line_13 $$ map.put(1, true)[ CD ]
Line_25 $$ for (int version : PROTOCOL_VERSIONS) -->Line_29 $$ assertRowsNet(version, executeNet(version, "SELECT " + fTup3 + "(tup) FROM %s WHERE key = 1"), row(set))[ FD ]
Line_12 $$ Map<Integer, Boolean> map = new TreeMap()-->Line_22 $$ assertRows(execute("SELECT " + fTup4 + "(tup) FROM %s WHERE key = 1"), row(map))[ FD ]
Line_12 $$ Map<Integer, Boolean> map = new TreeMap()-->Line_15 $$ map.put(3, true)[ FD ]
Line_2 $$ public void testJavaTupleTypeCollection() throws Throwable -->Line_22 $$ assertRows(execute("SELECT " + fTup4 + "(tup) FROM %s WHERE key = 1"), row(map))[ CD ]
Line_2 $$ public void testJavaTupleTypeCollection() throws Throwable -->Line_4 $$ createTable("CREATE TABLE %s (key int primary key, tup frozen<" + tupleTypeDef + ">)")[ CD ]
Line_10 $$ List<Double> list = Arrays.asList(1d, 2d, 3d)-->Line_24 $$ TupleValue tup = tType.newValue(1d, list, set, map)[ FD ]
Line_10 $$ List<Double> list = Arrays.asList(1d, 2d, 3d)-->Line_20 $$ assertRows(execute("SELECT " + fTup2 + "(tup) FROM %s WHERE key = 1"), row(list))[ FD ]
Line_2 $$ public void testJavaTupleTypeCollection() throws Throwable -->Line_15 $$ map.put(3, true)[ CD ]
Line_2 $$ public void testJavaTupleTypeCollection() throws Throwable -->Line_23 $$ TupleType tType = tupleTypeOf(Server.VERSION_3, DataType.cdouble(), DataType.list(DataType.cdouble()), DataType.set(DataType.text()), DataType.map(DataType.cint(), DataType.cboolean()))[ CD ]
Line_16 $$ Object t = tuple(1d, list, set, map)-->Line_18 $$ assertRows(execute("SELECT " + fTup0 + "(tup) FROM %s WHERE key = 1"), row(t))[ FD ]
Line_10 $$ List<Double> list = Arrays.asList(1d, 2d, 3d)-->Line_16 $$ Object t = tuple(1d, list, set, map)[ FD ]
Line_12 $$ Map<Integer, Boolean> map = new TreeMap()-->Line_14 $$ map.put(2, false)[ FD ]
Line_12 $$ Map<Integer, Boolean> map = new TreeMap()-->Line_16 $$ Object t = tuple(1d, list, set, map)[ FD ]
Line_2 $$ public void testJavaTupleTypeCollection() throws Throwable -->Line_20 $$ assertRows(execute("SELECT " + fTup2 + "(tup) FROM %s WHERE key = 1"), row(list))[ CD ]
Line_12 $$ Map<Integer, Boolean> map = new TreeMap()-->Line_24 $$ TupleValue tup = tType.newValue(1d, list, set, map)[ FD ]
Line_24 $$ TupleValue tup = tType.newValue(1d, list, set, map)-->Line_26 $$ assertRowsNet(version, executeNet(version, "SELECT " + fTup0 + "(tup) FROM %s WHERE key = 1"), row(tup))[ FD ]
Line_2 $$ public void testJavaTupleTypeCollection() throws Throwable -->Line_17 $$ execute("INSERT INTO %s (key, tup) VALUES (1, ?)", t)[ CD ]
Line_25 $$ for (int version : PROTOCOL_VERSIONS) -->Line_28 $$ assertRowsNet(version, executeNet(version, "SELECT " + fTup2 + "(tup) FROM %s WHERE key = 1"), row(list))[ FD ]
Line_2 $$ public void testJavaTupleTypeCollection() throws Throwable -->Line_3 $$ String tupleTypeDef = "tuple<double, list<double>, set<text>, map<int, boolean>>"[ CD ]
