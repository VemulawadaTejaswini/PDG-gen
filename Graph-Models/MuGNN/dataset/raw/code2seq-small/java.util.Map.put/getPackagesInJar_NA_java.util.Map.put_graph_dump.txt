Line_13 $$ resultClasses = getClassesInJar(jarToScan, annotationsToLookFor)-->Line_25 $$ resultClasses.add(pu.getNewTempClassLoader().loadClass(className))[ FD ]
Line_15 $$ if (pu.getAnnotationIndex() != null) -->Line_21 $$ Collection<ClassInfo> allClasses = index.getKnownClasses()[ CD ]
Line_2 $$ public Set<Package> getPackagesInJar(URL jarToScan, Set<Class<? extends Annotation>> annotationsToLookFor) -->Line_8 $$ PersistenceUnitMetadata pu = PERSISTENCE_UNIT_METADATA_TLS.get()[ CD ]
Line_2 $$ public Set<Package> getPackagesInJar(URL jarToScan, Set<Class<? extends Annotation>> annotationsToLookFor) -->Line_18 $$ JPA_LOGGER.tracef("No classes to scan for annotations in jar '%s' (jars with classes '%s')", jarToScan, pu.getAnnotationIndex().keySet())[ FD ]
Line_35 $$ Map<String, Package> uniquePackages = new HashMap<String, Package>()-->Line_43 $$ Set<Package> packages = new HashSet<Package>(uniquePackages.values())[ FD ]
Line_17 $$ if (index == null) -->Line_18 $$ JPA_LOGGER.tracef("No classes to scan for annotations in jar '%s' (jars with classes '%s')", jarToScan, pu.getAnnotationIndex().keySet())[ CD ]
Line_2 $$ public Set<Package> getPackagesInJar(URL jarToScan, Set<Class<? extends Annotation>> annotationsToLookFor) -->Line_6 $$ JPA_LOGGER.tracef("getPackagesInJar url=%s annotations=%s", jarToScan.getPath(), annotationsToLookFor)[ FD ]
Line_38 $$ if (classPackage != null) -->Line_39 $$ JPA_LOGGER.tracef("getPackagesInJar found package %s", classPackage)[ CD ]
Line_12 $$ if (annotationsToLookFor.size() > 0) -->Line_13 $$ resultClasses = getClassesInJar(jarToScan, annotationsToLookFor)[ CD ]
Line_37 $$ Package classPackage = classWithAnnotation.getPackage()-->Line_40 $$ uniquePackages.put(classPackage.getName(), classPackage)[ FD ]
Line_7 $$ Set<Class<?>> resultClasses = new HashSet<Class<?>>()-->Line_13 $$ resultClasses = getClassesInJar(jarToScan, annotationsToLookFor)[ FD ]
Line_2 $$ public Set<Package> getPackagesInJar(URL jarToScan, Set<Class<? extends Annotation>> annotationsToLookFor) -->Line_44 $$ cachePackages(pu, jarToScan, packages)[ FD ]
Line_2 $$ public Set<Package> getPackagesInJar(URL jarToScan, Set<Class<? extends Annotation>> annotationsToLookFor) -->Line_16 $$ Index index = getJarFileIndex(jarToScan, pu)[ FD ]
Line_2 $$ public Set<Package> getPackagesInJar(URL jarToScan, Set<Class<? extends Annotation>> annotationsToLookFor) -->Line_13 $$ resultClasses = getClassesInJar(jarToScan, annotationsToLookFor)[ FD ]
Line_35 $$ Map<String, Package> uniquePackages = new HashMap<String, Package>()-->Line_40 $$ uniquePackages.put(classPackage.getName(), classPackage)[ FD ]
Line_8 $$ PersistenceUnitMetadata pu = PERSISTENCE_UNIT_METADATA_TLS.get()-->Line_15 $$ if (pu.getAnnotationIndex() != null) [ FD ]
Line_2 $$ public Set<Package> getPackagesInJar(URL jarToScan, Set<Class<? extends Annotation>> annotationsToLookFor) -->Line_12 $$ if (annotationsToLookFor.size() > 0) [ FD ]
Line_16 $$ Index index = getJarFileIndex(jarToScan, pu)-->Line_21 $$ Collection<ClassInfo> allClasses = index.getKnownClasses()[ FD ]
Line_8 $$ PersistenceUnitMetadata pu = PERSISTENCE_UNIT_METADATA_TLS.get()-->Line_16 $$ Index index = getJarFileIndex(jarToScan, pu)[ FD ]
Line_23 $$ String className = classInfo.name().toString()-->Line_29 $$ JPA_LOGGER.cannotLoadEntityClass(e, className)[ FD ]
Line_2 $$ public Set<Package> getPackagesInJar(URL jarToScan, Set<Class<? extends Annotation>> annotationsToLookFor) -->Line_34 $$ if (pu.getAnnotationIndex() != null || annotationsToLookFor.size() > 0) [ FD ]
Line_12 $$ if (annotationsToLookFor.size() > 0) -->Line_15 $$ if (pu.getAnnotationIndex() != null) [ CD ]
Line_8 $$ PersistenceUnitMetadata pu = PERSISTENCE_UNIT_METADATA_TLS.get()-->Line_25 $$ resultClasses.add(pu.getNewTempClassLoader().loadClass(className))[ FD ]
Line_8 $$ PersistenceUnitMetadata pu = PERSISTENCE_UNIT_METADATA_TLS.get()-->Line_44 $$ cachePackages(pu, jarToScan, packages)[ FD ]
Line_34 $$ if (pu.getAnnotationIndex() != null || annotationsToLookFor.size() > 0) -->Line_47 $$ return getCachedPackages(pu, jarToScan)[ CD ]
Line_2 $$ public Set<Package> getPackagesInJar(URL jarToScan, Set<Class<? extends Annotation>> annotationsToLookFor) -->Line_3 $$ if (jarToScan == null) [ CD ]
Line_2 $$ public Set<Package> getPackagesInJar(URL jarToScan, Set<Class<? extends Annotation>> annotationsToLookFor) -->Line_9 $$ if (pu == null) [ CD ]
Line_34 $$ if (pu.getAnnotationIndex() != null || annotationsToLookFor.size() > 0) -->Line_35 $$ Map<String, Package> uniquePackages = new HashMap<String, Package>()[ CD ]
Line_15 $$ if (pu.getAnnotationIndex() != null) -->Line_16 $$ Index index = getJarFileIndex(jarToScan, pu)[ CD ]
Line_2 $$ public Set<Package> getPackagesInJar(URL jarToScan, Set<Class<? extends Annotation>> annotationsToLookFor) -->Line_12 $$ if (annotationsToLookFor.size() > 0) [ CD ]
Line_38 $$ if (classPackage != null) -->Line_40 $$ uniquePackages.put(classPackage.getName(), classPackage)[ CD ]
Line_2 $$ public Set<Package> getPackagesInJar(URL jarToScan, Set<Class<? extends Annotation>> annotationsToLookFor) -->Line_3 $$ if (jarToScan == null) [ FD ]
Line_8 $$ PersistenceUnitMetadata pu = PERSISTENCE_UNIT_METADATA_TLS.get()-->Line_47 $$ return getCachedPackages(pu, jarToScan)[ FD ]
Line_8 $$ PersistenceUnitMetadata pu = PERSISTENCE_UNIT_METADATA_TLS.get()-->Line_9 $$ if (pu == null) [ FD ]
Line_15 $$ if (pu.getAnnotationIndex() != null) -->Line_17 $$ if (index == null) [ CD ]
Line_22 $$ for (ClassInfo classInfo : allClasses) -->Line_23 $$ String className = classInfo.name().toString()[ FD ]
Line_23 $$ String className = classInfo.name().toString()-->Line_27 $$ JPA_LOGGER.cannotLoadEntityClass(e, className)[ FD ]
Line_43 $$ Set<Package> packages = new HashSet<Package>(uniquePackages.values())-->Line_44 $$ cachePackages(pu, jarToScan, packages)[ FD ]
Line_8 $$ PersistenceUnitMetadata pu = PERSISTENCE_UNIT_METADATA_TLS.get()-->Line_34 $$ if (pu.getAnnotationIndex() != null || annotationsToLookFor.size() > 0) [ FD ]
Line_34 $$ if (pu.getAnnotationIndex() != null || annotationsToLookFor.size() > 0) -->Line_45 $$ return new HashSet<Package>(packages)[ CD ]
Line_2 $$ public Set<Package> getPackagesInJar(URL jarToScan, Set<Class<? extends Annotation>> annotationsToLookFor) -->Line_7 $$ Set<Class<?>> resultClasses = new HashSet<Class<?>>()[ CD ]
Line_17 $$ if (index == null) -->Line_19 $$ return new HashSet<Package>()[ CD ]
Line_8 $$ PersistenceUnitMetadata pu = PERSISTENCE_UNIT_METADATA_TLS.get()-->Line_18 $$ JPA_LOGGER.tracef("No classes to scan for annotations in jar '%s' (jars with classes '%s')", jarToScan, pu.getAnnotationIndex().keySet())[ FD ]
Line_36 $$ for (Class<?> classWithAnnotation : resultClasses) -->Line_37 $$ Package classPackage = classWithAnnotation.getPackage()[ FD ]
Line_16 $$ Index index = getJarFileIndex(jarToScan, pu)-->Line_17 $$ if (index == null) [ FD ]
Line_23 $$ String className = classInfo.name().toString()-->Line_25 $$ resultClasses.add(pu.getNewTempClassLoader().loadClass(className))[ FD ]
Line_7 $$ Set<Class<?>> resultClasses = new HashSet<Class<?>>()-->Line_25 $$ resultClasses.add(pu.getNewTempClassLoader().loadClass(className))[ FD ]
Line_37 $$ Package classPackage = classWithAnnotation.getPackage()-->Line_39 $$ JPA_LOGGER.tracef("getPackagesInJar found package %s", classPackage)[ FD ]
Line_2 $$ public Set<Package> getPackagesInJar(URL jarToScan, Set<Class<? extends Annotation>> annotationsToLookFor) -->Line_6 $$ JPA_LOGGER.tracef("getPackagesInJar url=%s annotations=%s", jarToScan.getPath(), annotationsToLookFor)[ CD ]
Line_34 $$ if (pu.getAnnotationIndex() != null || annotationsToLookFor.size() > 0) -->Line_43 $$ Set<Package> packages = new HashSet<Package>(uniquePackages.values())[ CD ]
Line_2 $$ public Set<Package> getPackagesInJar(URL jarToScan, Set<Class<? extends Annotation>> annotationsToLookFor) -->Line_47 $$ return getCachedPackages(pu, jarToScan)[ FD ]
Line_34 $$ if (pu.getAnnotationIndex() != null || annotationsToLookFor.size() > 0) -->Line_44 $$ cachePackages(pu, jarToScan, packages)[ CD ]
Line_2 $$ public Set<Package> getPackagesInJar(URL jarToScan, Set<Class<? extends Annotation>> annotationsToLookFor) -->Line_34 $$ if (pu.getAnnotationIndex() != null || annotationsToLookFor.size() > 0) [ CD ]
Line_37 $$ Package classPackage = classWithAnnotation.getPackage()-->Line_38 $$ if (classPackage != null) [ FD ]
