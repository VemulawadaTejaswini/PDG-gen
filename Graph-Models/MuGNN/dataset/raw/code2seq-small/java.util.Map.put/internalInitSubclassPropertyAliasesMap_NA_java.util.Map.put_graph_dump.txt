Line_6 $$ if (prop.isComposite()) -->Line_13 $$ Iterator colIter = prop.getColumnIterator()[ CD ]
Line_14 $$ int l = 0-->Line_19 $$ l++[ FD ]
Line_16 $$ Selectable thing = (Selectable) colIter.next()-->Line_17 $$ aliases[l] = thing.getAlias(getFactory().getDialect(), prop.getValue().getTable())[ FD ]
Line_4 $$ Property prop = (Property) propertyIterator.next()-->Line_6 $$ if (prop.isComposite()) [ FD ]
Line_11 $$ String[] aliases = new String[prop.getColumnSpan()]-->Line_21 $$ subclassPropertyAliases.put(propname, aliases)[ FD ]
Line_16 $$ Selectable thing = (Selectable) colIter.next()-->Line_18 $$ cols[l] = thing.getText(getFactory().getDialect())[ FD ]
Line_6 $$ if (prop.isComposite()) -->Line_15 $$ while (colIter.hasNext()) [ CD ]
Line_8 $$ Iterator compProps = component.getPropertyIterator()-->Line_9 $$ internalInitSubclassPropertyAliasesMap(propname, compProps)[ FD ]
Line_3 $$ while (propertyIterator.hasNext()) -->Line_6 $$ if (prop.isComposite()) [ CD ]
Line_5 $$ String propname = path == null ? prop.getName() : path + "." + prop.getName()-->Line_9 $$ internalInitSubclassPropertyAliasesMap(propname, compProps)[ FD ]
Line_5 $$ String propname = path == null ? prop.getName() : path + "." + prop.getName()-->Line_21 $$ subclassPropertyAliases.put(propname, aliases)[ FD ]
Line_13 $$ Iterator colIter = prop.getColumnIterator()-->Line_16 $$ Selectable thing = (Selectable) colIter.next()[ FD ]
Line_2 $$ private void internalInitSubclassPropertyAliasesMap(String path, Iterator propertyIterator) -->Line_3 $$ while (propertyIterator.hasNext()) [ FD ]
Line_4 $$ Property prop = (Property) propertyIterator.next()-->Line_13 $$ Iterator colIter = prop.getColumnIterator()[ FD ]
Line_6 $$ if (prop.isComposite()) -->Line_21 $$ subclassPropertyAliases.put(propname, aliases)[ CD ]
Line_6 $$ if (prop.isComposite()) -->Line_9 $$ internalInitSubclassPropertyAliasesMap(propname, compProps)[ CD ]
Line_2 $$ private void internalInitSubclassPropertyAliasesMap(String path, Iterator propertyIterator) -->Line_3 $$ while (propertyIterator.hasNext()) [ CD ]
Line_2 $$ private void internalInitSubclassPropertyAliasesMap(String path, Iterator propertyIterator) -->Line_4 $$ Property prop = (Property) propertyIterator.next()[ FD ]
Line_5 $$ String propname = path == null ? prop.getName() : path + "." + prop.getName()-->Line_22 $$ subclassPropertyColumnNames.put(propname, cols)[ FD ]
Line_3 $$ while (propertyIterator.hasNext()) -->Line_4 $$ Property prop = (Property) propertyIterator.next()[ CD ]
Line_4 $$ Property prop = (Property) propertyIterator.next()-->Line_11 $$ String[] aliases = new String[prop.getColumnSpan()][ FD ]
Line_6 $$ if (prop.isComposite()) -->Line_12 $$ String[] cols = new String[prop.getColumnSpan()][ CD ]
Line_3 $$ while (propertyIterator.hasNext()) -->Line_5 $$ String propname = path == null ? prop.getName() : path + "." + prop.getName()[ CD ]
Line_4 $$ Property prop = (Property) propertyIterator.next()-->Line_17 $$ aliases[l] = thing.getAlias(getFactory().getDialect(), prop.getValue().getTable())[ FD ]
Line_6 $$ if (prop.isComposite()) -->Line_22 $$ subclassPropertyColumnNames.put(propname, cols)[ CD ]
Line_15 $$ while (colIter.hasNext()) -->Line_18 $$ cols[l] = thing.getText(getFactory().getDialect())[ CD ]
Line_4 $$ Property prop = (Property) propertyIterator.next()-->Line_12 $$ String[] cols = new String[prop.getColumnSpan()][ FD ]
Line_6 $$ if (prop.isComposite()) -->Line_14 $$ int l = 0[ CD ]
Line_12 $$ String[] cols = new String[prop.getColumnSpan()]-->Line_22 $$ subclassPropertyColumnNames.put(propname, cols)[ FD ]
Line_15 $$ while (colIter.hasNext()) -->Line_19 $$ l++[ CD ]
Line_6 $$ if (prop.isComposite()) -->Line_7 $$ Component component = (Component) prop.getValue()[ CD ]
Line_4 $$ Property prop = (Property) propertyIterator.next()-->Line_7 $$ Component component = (Component) prop.getValue()[ FD ]
Line_7 $$ Component component = (Component) prop.getValue()-->Line_8 $$ Iterator compProps = component.getPropertyIterator()[ FD ]
Line_15 $$ while (colIter.hasNext()) -->Line_16 $$ Selectable thing = (Selectable) colIter.next()[ CD ]
Line_13 $$ Iterator colIter = prop.getColumnIterator()-->Line_15 $$ while (colIter.hasNext()) [ FD ]
Line_4 $$ Property prop = (Property) propertyIterator.next()-->Line_5 $$ String propname = path == null ? prop.getName() : path + "." + prop.getName()[ FD ]
Line_15 $$ while (colIter.hasNext()) -->Line_17 $$ aliases[l] = thing.getAlias(getFactory().getDialect(), prop.getValue().getTable())[ CD ]
Line_6 $$ if (prop.isComposite()) -->Line_11 $$ String[] aliases = new String[prop.getColumnSpan()][ CD ]
Line_6 $$ if (prop.isComposite()) -->Line_8 $$ Iterator compProps = component.getPropertyIterator()[ CD ]
