Line_8 $$ final Map<String, String> jasMap = new HashMap<String, String>()-->Line_12 $$ jasMap.put("manager", manager)[ FD ]
Line_17 $$ if (elos != null) -->Line_20 $$ jasMap.put("stream", "not currently writing")[ CD ]
Line_6 $$ boolean openForWrite = log.isOpenForWrite()-->Line_13 $$ if (jas.isDisabled()) [ FD ]
Line_7 $$ for (JournalAndStream jas : log.getJournals()) -->Line_11 $$ jasMap.put("disabled", String.valueOf(jas.isDisabled()))[ FD ]
Line_8 $$ final Map<String, String> jasMap = new HashMap<String, String>()-->Line_23 $$ jasMap.put("stream", "open for read")[ FD ]
Line_2 $$ public String getNameJournalStatus() -->Line_5 $$ if (log != null) [ CD ]
Line_4 $$ FSEditLog log = getFSImage().getEditLog()-->Line_7 $$ for (JournalAndStream jas : log.getJournals()) [ FD ]
Line_7 $$ for (JournalAndStream jas : log.getJournals()) -->Line_10 $$ jasMap.put("required", String.valueOf(jas.isRequired()))[ FD ]
Line_8 $$ final Map<String, String> jasMap = new HashMap<String, String>()-->Line_11 $$ jasMap.put("disabled", String.valueOf(jas.isDisabled()))[ FD ]
Line_16 $$ EditLogOutputStream elos = jas.getCurrentStream()-->Line_18 $$ jasMap.put("stream", elos.generateReport())[ FD ]
Line_2 $$ public String getNameJournalStatus() -->Line_3 $$ List<Map<String, String>> jasList = new ArrayList<Map<String, String>>()[ CD ]
Line_16 $$ EditLogOutputStream elos = jas.getCurrentStream()-->Line_17 $$ if (elos != null) [ FD ]
Line_8 $$ final Map<String, String> jasMap = new HashMap<String, String>()-->Line_18 $$ jasMap.put("stream", elos.generateReport())[ FD ]
Line_2 $$ public String getNameJournalStatus() -->Line_4 $$ FSEditLog log = getFSImage().getEditLog()[ CD ]
Line_13 $$ if (jas.isDisabled()) -->Line_14 $$ jasMap.put("stream", "Failed")[ CD ]
Line_7 $$ for (JournalAndStream jas : log.getJournals()) -->Line_9 $$ String manager = jas.getManager().toString()[ FD ]
Line_4 $$ FSEditLog log = getFSImage().getEditLog()-->Line_6 $$ boolean openForWrite = log.isOpenForWrite()[ FD ]
Line_17 $$ if (elos != null) -->Line_18 $$ jasMap.put("stream", elos.generateReport())[ CD ]
Line_13 $$ if (jas.isDisabled()) -->Line_15 $$ if (openForWrite) [ CD ]
Line_15 $$ if (openForWrite) -->Line_16 $$ EditLogOutputStream elos = jas.getCurrentStream()[ CD ]
Line_8 $$ final Map<String, String> jasMap = new HashMap<String, String>()-->Line_20 $$ jasMap.put("stream", "not currently writing")[ FD ]
Line_3 $$ List<Map<String, String>> jasList = new ArrayList<Map<String, String>>()-->Line_25 $$ jasList.add(jasMap)[ FD ]
Line_8 $$ final Map<String, String> jasMap = new HashMap<String, String>()-->Line_10 $$ jasMap.put("required", String.valueOf(jas.isRequired()))[ FD ]
Line_4 $$ FSEditLog log = getFSImage().getEditLog()-->Line_5 $$ if (log != null) [ FD ]
Line_8 $$ final Map<String, String> jasMap = new HashMap<String, String>()-->Line_14 $$ jasMap.put("stream", "Failed")[ FD ]
Line_2 $$ public String getNameJournalStatus() -->Line_28 $$ return JSON.toString(jasList)[ CD ]
Line_9 $$ String manager = jas.getManager().toString()-->Line_12 $$ jasMap.put("manager", manager)[ FD ]
Line_15 $$ if (openForWrite) -->Line_23 $$ jasMap.put("stream", "open for read")[ CD ]
Line_3 $$ List<Map<String, String>> jasList = new ArrayList<Map<String, String>>()-->Line_28 $$ return JSON.toString(jasList)[ FD ]
Line_5 $$ if (log != null) -->Line_6 $$ boolean openForWrite = log.isOpenForWrite()[ CD ]
Line_15 $$ if (openForWrite) -->Line_17 $$ if (elos != null) [ CD ]
Line_7 $$ for (JournalAndStream jas : log.getJournals()) -->Line_13 $$ if (jas.isDisabled()) [ FD ]
Line_8 $$ final Map<String, String> jasMap = new HashMap<String, String>()-->Line_25 $$ jasList.add(jasMap)[ FD ]
Line_7 $$ for (JournalAndStream jas : log.getJournals()) -->Line_16 $$ EditLogOutputStream elos = jas.getCurrentStream()[ FD ]
