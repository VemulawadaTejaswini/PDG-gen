Line_2 $$ private void makeStateMachineTable() -->Line_10 $$ while (!stack.isEmpty()) [ CD ]
Line_3 $$ Stack<ApplicableTransition<OPERAND, STATE, EVENTTYPE, EVENT>> stack = new Stack<ApplicableTransition<OPERAND, STATE, EVENTTYPE, EVENT>>()-->Line_8 $$ stack.push(cursor.transition)[ FD ]
Line_7 $$ for (TransitionsListNode cursor = transitionsListNode; cursor != null; cursor = cursor.next) -->Line_8 $$ stack.push(cursor.transition)[ CD ]
Line_3 $$ Stack<ApplicableTransition<OPERAND, STATE, EVENTTYPE, EVENT>> stack = new Stack<ApplicableTransition<OPERAND, STATE, EVENTTYPE, EVENT>>()-->Line_11 $$ stack.pop().apply(this)[ FD ]
Line_3 $$ Stack<ApplicableTransition<OPERAND, STATE, EVENTTYPE, EVENT>> stack = new Stack<ApplicableTransition<OPERAND, STATE, EVENTTYPE, EVENT>>()-->Line_10 $$ while (!stack.isEmpty()) [ FD ]
Line_10 $$ while (!stack.isEmpty()) -->Line_11 $$ stack.pop().apply(this)[ CD ]
Line_2 $$ private void makeStateMachineTable() -->Line_5 $$ prototype.put(defaultInitialState, null)[ CD ]
Line_2 $$ private void makeStateMachineTable() -->Line_4 $$ Map<STATE, Map<EVENTTYPE, Transition<OPERAND, STATE, EVENTTYPE, EVENT>>> prototype = new HashMap<STATE, Map<EVENTTYPE, Transition<OPERAND, STATE, EVENTTYPE, EVENT>>>()[ CD ]
Line_4 $$ Map<STATE, Map<EVENTTYPE, Transition<OPERAND, STATE, EVENTTYPE, EVENT>>> prototype = new HashMap<STATE, Map<EVENTTYPE, Transition<OPERAND, STATE, EVENTTYPE, EVENT>>>()-->Line_5 $$ prototype.put(defaultInitialState, null)[ FD ]
Line_2 $$ private void makeStateMachineTable() -->Line_3 $$ Stack<ApplicableTransition<OPERAND, STATE, EVENTTYPE, EVENT>> stack = new Stack<ApplicableTransition<OPERAND, STATE, EVENTTYPE, EVENT>>()[ CD ]
Line_2 $$ private void makeStateMachineTable() -->Line_7 $$ for (TransitionsListNode cursor = transitionsListNode; cursor != null; cursor = cursor.next) [ CD ]
