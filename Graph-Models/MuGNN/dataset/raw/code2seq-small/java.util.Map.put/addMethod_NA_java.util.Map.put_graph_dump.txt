Line_2 $$ public final void addMethod(final String struct, final String name, final String alias, final boolean statik, final Type rtn, final Type[] args, final Type genrtn, final Type[] genargs) -->Line_10 $$ if (owner.constructors.containsKey(name)) [ FD ]
Line_50 $$ reflect = owner.clazz.getMethod(alias == null ? name : alias, classes)-->Line_55 $$ throw new IllegalArgumentException("Specified return type class [" + rtn.clazz + "]" + " does not match the found return type class [" + reflect.getReturnType() + "] for the " + (statik ? "function" : "method") + " [" + name + "]" + " within the struct [" + owner.name + "].")[ FD ]
Line_2 $$ public final void addMethod(final String struct, final String name, final String alias, final boolean statik, final Type rtn, final Type[] args, final Type genrtn, final Type[] genargs) -->Line_7 $$ if (!name.matches("^[_a-zA-Z][_a-zA-Z0-9]*$")) [ FD ]
Line_60 $$ if (statik) -->Line_61 $$ handle = MethodHandles.publicLookup().in(owner.clazz).findStatic(owner.clazz, alias == null ? name : alias, MethodType.methodType(rtn.clazz, classes))[ CD ]
Line_38 $$ for (int count = 0; count < classes.length; ++count) -->Line_39 $$ if (genargs != null) [ CD ]
Line_50 $$ reflect = owner.clazz.getMethod(alias == null ? name : alias, classes)-->Line_57 $$ final org.objectweb.asm.commons.Method asm = org.objectweb.asm.commons.Method.getMethod(reflect)[ FD ]
Line_60 $$ if (statik) -->Line_63 $$ handle = MethodHandles.publicLookup().in(owner.clazz).findVirtual(owner.clazz, alias == null ? name : alias, MethodType.methodType(rtn.clazz, classes))[ CD ]
Line_20 $$ if (owner.methods.containsKey(name)) -->Line_21 $$ if (statik) [ CD ]
Line_2 $$ public final void addMethod(final String struct, final String name, final String alias, final boolean statik, final Type rtn, final Type[] args, final Type genrtn, final Type[] genargs) -->Line_38 $$ for (int count = 0; count < classes.length; ++count) [ CD ]
Line_2 $$ public final void addMethod(final String struct, final String name, final String alias, final boolean statik, final Type rtn, final Type[] args, final Type genrtn, final Type[] genargs) -->Line_34 $$ if (genargs != null && genargs.length != args.length) [ CD ]
Line_50 $$ reflect = owner.clazz.getMethod(alias == null ? name : alias, classes)-->Line_54 $$ if (!reflect.getReturnType().equals(rtn.clazz)) [ FD ]
Line_2 $$ public final void addMethod(final String struct, final String name, final String alias, final boolean statik, final Type rtn, final Type[] args, final Type genrtn, final Type[] genargs) -->Line_79 $$ owner.methods.put(name, method)[ FD ]
Line_2 $$ public final void addMethod(final String struct, final String name, final String alias, final boolean statik, final Type rtn, final Type[] args, final Type genrtn, final Type[] genargs) -->Line_48 $$ final java.lang.reflect.Method reflect[ CD ]
Line_2 $$ public final void addMethod(final String struct, final String name, final String alias, final boolean statik, final Type rtn, final Type[] args, final Type genrtn, final Type[] genargs) -->Line_69 $$ final int modifiers = reflect.getModifiers()[ CD ]
Line_2 $$ public final void addMethod(final String struct, final String name, final String alias, final boolean statik, final Type rtn, final Type[] args, final Type genrtn, final Type[] genargs) -->Line_20 $$ if (owner.methods.containsKey(name)) [ CD ]
Line_2 $$ public final void addMethod(final String struct, final String name, final String alias, final boolean statik, final Type rtn, final Type[] args, final Type genrtn, final Type[] genargs) -->Line_4 $$ if (owner == null) [ CD ]
Line_2 $$ public final void addMethod(final String struct, final String name, final String alias, final boolean statik, final Type rtn, final Type[] args, final Type genrtn, final Type[] genargs) -->Line_3 $$ final Struct owner = structs.get(struct)[ CD ]
Line_2 $$ public final void addMethod(final String struct, final String name, final String alias, final boolean statik, final Type rtn, final Type[] args, final Type genrtn, final Type[] genargs) -->Line_74 $$ owner.functions.put(name, method)[ FD ]
Line_70 $$ if (statik) -->Line_74 $$ owner.functions.put(name, method)[ CD ]
Line_58 $$ MethodHandle handle-->Line_63 $$ handle = MethodHandles.publicLookup().in(owner.clazz).findVirtual(owner.clazz, alias == null ? name : alias, MethodType.methodType(rtn.clazz, classes))[ FD ]
Line_3 $$ final Struct owner = structs.get(struct)-->Line_4 $$ if (owner == null) [ FD ]
Line_2 $$ public final void addMethod(final String struct, final String name, final String alias, final boolean statik, final Type rtn, final Type[] args, final Type genrtn, final Type[] genargs) -->Line_7 $$ if (!name.matches("^[_a-zA-Z][_a-zA-Z0-9]*$")) [ CD ]
Line_69 $$ final int modifiers = reflect.getModifiers()-->Line_71 $$ if (!java.lang.reflect.Modifier.isStatic(modifiers)) [ FD ]
Line_2 $$ public final void addMethod(final String struct, final String name, final String alias, final boolean statik, final Type rtn, final Type[] args, final Type genrtn, final Type[] genargs) -->Line_10 $$ if (owner.constructors.containsKey(name)) [ CD ]
Line_2 $$ public final void addMethod(final String struct, final String name, final String alias, final boolean statik, final Type rtn, final Type[] args, final Type genrtn, final Type[] genargs) -->Line_37 $$ final Class[] classes = new Class[args.length][ CD ]
Line_2 $$ public final void addMethod(final String struct, final String name, final String alias, final boolean statik, final Type rtn, final Type[] args, final Type genrtn, final Type[] genargs) -->Line_3 $$ final Struct owner = structs.get(struct)[ FD ]
Line_38 $$ for (int count = 0; count < classes.length; ++count) -->Line_46 $$ classes[count] = args[count].clazz[ CD ]
Line_37 $$ final Class[] classes = new Class[args.length]-->Line_50 $$ reflect = owner.clazz.getMethod(alias == null ? name : alias, classes)[ FD ]
Line_37 $$ final Class[] classes = new Class[args.length]-->Line_52 $$ throw new IllegalArgumentException((statik ? "Function" : "Method") + " [" + (alias == null ? name : alias) + "] not found for class [" + owner.clazz.getName() + "]" + " with arguments " + Arrays.toString(classes) + ".")[ FD ]
Line_68 $$ final Method method = new Method(name, owner, genrtn != null ? genrtn : rtn, Arrays.asList(genargs != null ? genargs : args), asm, reflect, handle)-->Line_79 $$ owner.methods.put(name, method)[ FD ]
Line_2 $$ public final void addMethod(final String struct, final String name, final String alias, final boolean statik, final Type rtn, final Type[] args, final Type genrtn, final Type[] genargs) -->Line_27 $$ if (genrtn != null) [ FD ]
Line_2 $$ public final void addMethod(final String struct, final String name, final String alias, final boolean statik, final Type rtn, final Type[] args, final Type genrtn, final Type[] genargs) -->Line_58 $$ MethodHandle handle[ CD ]
Line_69 $$ final int modifiers = reflect.getModifiers()-->Line_76 $$ if (java.lang.reflect.Modifier.isStatic(modifiers)) [ FD ]
Line_2 $$ public final void addMethod(final String struct, final String name, final String alias, final boolean statik, final Type rtn, final Type[] args, final Type genrtn, final Type[] genargs) -->Line_68 $$ final Method method = new Method(name, owner, genrtn != null ? genrtn : rtn, Arrays.asList(genargs != null ? genargs : args), asm, reflect, handle)[ CD ]
Line_2 $$ public final void addMethod(final String struct, final String name, final String alias, final boolean statik, final Type rtn, final Type[] args, final Type genrtn, final Type[] genargs) -->Line_70 $$ if (statik) [ CD ]
Line_2 $$ public final void addMethod(final String struct, final String name, final String alias, final boolean statik, final Type rtn, final Type[] args, final Type genrtn, final Type[] genargs) -->Line_57 $$ final org.objectweb.asm.commons.Method asm = org.objectweb.asm.commons.Method.getMethod(reflect)[ CD ]
Line_58 $$ MethodHandle handle-->Line_61 $$ handle = MethodHandles.publicLookup().in(owner.clazz).findStatic(owner.clazz, alias == null ? name : alias, MethodType.methodType(rtn.clazz, classes))[ FD ]
Line_48 $$ final java.lang.reflect.Method reflect-->Line_57 $$ final org.objectweb.asm.commons.Method asm = org.objectweb.asm.commons.Method.getMethod(reflect)[ FD ]
Line_2 $$ public final void addMethod(final String struct, final String name, final String alias, final boolean statik, final Type rtn, final Type[] args, final Type genrtn, final Type[] genargs) -->Line_13 $$ if (owner.statics.containsKey(name)) [ FD ]
Line_61 $$ handle = MethodHandles.publicLookup().in(owner.clazz).findStatic(owner.clazz, alias == null ? name : alias, MethodType.methodType(rtn.clazz, classes))-->Line_63 $$ handle = MethodHandles.publicLookup().in(owner.clazz).findVirtual(owner.clazz, alias == null ? name : alias, MethodType.methodType(rtn.clazz, classes))[ FD ]
Line_48 $$ final java.lang.reflect.Method reflect-->Line_69 $$ final int modifiers = reflect.getModifiers()[ FD ]
Line_13 $$ if (owner.statics.containsKey(name)) -->Line_14 $$ if (statik) [ CD ]
Line_2 $$ public final void addMethod(final String struct, final String name, final String alias, final boolean statik, final Type rtn, final Type[] args, final Type genrtn, final Type[] genargs) -->Line_20 $$ if (owner.methods.containsKey(name)) [ FD ]
Line_68 $$ final Method method = new Method(name, owner, genrtn != null ? genrtn : rtn, Arrays.asList(genargs != null ? genargs : args), asm, reflect, handle)-->Line_74 $$ owner.functions.put(name, method)[ FD ]
Line_48 $$ final java.lang.reflect.Method reflect-->Line_55 $$ throw new IllegalArgumentException("Specified return type class [" + rtn.clazz + "]" + " does not match the found return type class [" + reflect.getReturnType() + "] for the " + (statik ? "function" : "method") + " [" + name + "]" + " within the struct [" + owner.name + "].")[ FD ]
Line_37 $$ final Class[] classes = new Class[args.length]-->Line_66 $$ throw new IllegalArgumentException("Method [" + (alias == null ? name : alias) + "]" + " not found for class [" + owner.clazz.getName() + "]" + " with arguments " + Arrays.toString(classes) + ".")[ FD ]
Line_70 $$ if (statik) -->Line_79 $$ owner.methods.put(name, method)[ CD ]
Line_2 $$ public final void addMethod(final String struct, final String name, final String alias, final boolean statik, final Type rtn, final Type[] args, final Type genrtn, final Type[] genargs) -->Line_54 $$ if (!reflect.getReturnType().equals(rtn.clazz)) [ CD ]
Line_2 $$ public final void addMethod(final String struct, final String name, final String alias, final boolean statik, final Type rtn, final Type[] args, final Type genrtn, final Type[] genargs) -->Line_39 $$ if (genargs != null) [ FD ]
Line_37 $$ final Class[] classes = new Class[args.length]-->Line_61 $$ handle = MethodHandles.publicLookup().in(owner.clazz).findStatic(owner.clazz, alias == null ? name : alias, MethodType.methodType(rtn.clazz, classes))[ FD ]
Line_2 $$ public final void addMethod(final String struct, final String name, final String alias, final boolean statik, final Type rtn, final Type[] args, final Type genrtn, final Type[] genargs) -->Line_27 $$ if (genrtn != null) [ CD ]
Line_48 $$ final java.lang.reflect.Method reflect-->Line_54 $$ if (!reflect.getReturnType().equals(rtn.clazz)) [ FD ]
Line_37 $$ final Class[] classes = new Class[args.length]-->Line_63 $$ handle = MethodHandles.publicLookup().in(owner.clazz).findVirtual(owner.clazz, alias == null ? name : alias, MethodType.methodType(rtn.clazz, classes))[ FD ]
Line_48 $$ final java.lang.reflect.Method reflect-->Line_50 $$ reflect = owner.clazz.getMethod(alias == null ? name : alias, classes)[ FD ]
Line_50 $$ reflect = owner.clazz.getMethod(alias == null ? name : alias, classes)-->Line_69 $$ final int modifiers = reflect.getModifiers()[ FD ]
Line_70 $$ if (statik) -->Line_71 $$ if (!java.lang.reflect.Modifier.isStatic(modifiers)) [ CD ]
Line_2 $$ public final void addMethod(final String struct, final String name, final String alias, final boolean statik, final Type rtn, final Type[] args, final Type genrtn, final Type[] genargs) -->Line_13 $$ if (owner.statics.containsKey(name)) [ CD ]
Line_70 $$ if (statik) -->Line_76 $$ if (java.lang.reflect.Modifier.isStatic(modifiers)) [ CD ]
