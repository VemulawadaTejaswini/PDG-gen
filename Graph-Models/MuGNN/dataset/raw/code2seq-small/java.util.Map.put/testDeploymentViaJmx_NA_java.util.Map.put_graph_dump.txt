Line_2 $$ public void testDeploymentViaJmx() throws Exception -->Line_4 $$ ObjectName testDeploymentModelName = new ObjectName("" + RESOLVED_DOMAIN + ":deployment=test-jmx-sar.sar")[ CD ]
Line_2 $$ public void testDeploymentViaJmx() throws Exception -->Line_12 $$ int i = in.read()[ CD ]
Line_4 $$ ObjectName testDeploymentModelName = new ObjectName("" + RESOLVED_DOMAIN + ":deployment=test-jmx-sar.sar")-->Line_6 $$ assertNoMBean(testDeploymentModelName)[ FD ]
Line_4 $$ ObjectName testDeploymentModelName = new ObjectName("" + RESOLVED_DOMAIN + ":deployment=test-jmx-sar.sar")-->Line_36 $$ connection.invoke(testDeploymentModelName, "undeploy", new Object[0], new String[0])[ FD ]
Line_19 $$ CompositeType contentType = null-->Line_23 $$ contentType = (CompositeType) ((ArrayType<CompositeType>) ((OpenMBeanParameterInfo) op.getSignature()[2]).getOpenType()).getElementOpenType()[ FD ]
Line_2 $$ public void testDeploymentViaJmx() throws Exception -->Line_27 $$ Map<String, Object> values = new HashMap<String, Object>()[ CD ]
Line_22 $$ if (op.getName().equals("addDeployment")) -->Line_23 $$ contentType = (CompositeType) ((ArrayType<CompositeType>) ((OpenMBeanParameterInfo) op.getSignature()[2]).getOpenType()).getElementOpenType()[ CD ]
Line_2 $$ public void testDeploymentViaJmx() throws Exception -->Line_37 $$ assertNoMBean(testSarMBeanName)[ CD ]
Line_7 $$ final JavaArchive sar = ShrinkWrap.create(JavaArchive.class, "test-jmx-sar.sar")-->Line_8 $$ sar.addClasses(org.jboss.as.test.integration.jmx.sar.Test.class, TestMBean.class)[ FD ]
Line_20 $$ MBeanInfo info = connection.getMBeanInfo(RESOLVED_ROOT_MODEL_NAME)-->Line_21 $$ for (MBeanOperationInfo op : info.getOperations()) [ FD ]
Line_2 $$ public void testDeploymentViaJmx() throws Exception -->Line_20 $$ MBeanInfo info = connection.getMBeanInfo(RESOLVED_ROOT_MODEL_NAME)[ CD ]
Line_23 $$ contentType = (CompositeType) ((ArrayType<CompositeType>) ((OpenMBeanParameterInfo) op.getSignature()[2]).getOpenType()).getElementOpenType()-->Line_28 $$ for (String key : contentType.keySet()) [ FD ]
Line_3 $$ ObjectName testSarMBeanName = new ObjectName("jboss:name=test,type=jmx-sar")-->Line_34 $$ Assert.assertNotNull(connection.getMBeanInfo(testSarMBeanName))[ FD ]
Line_13 $$ while (i != -1) -->Line_15 $$ i = in.read()[ CD ]
Line_3 $$ ObjectName testSarMBeanName = new ObjectName("jboss:name=test,type=jmx-sar")-->Line_5 $$ assertNoMBean(testSarMBeanName)[ FD ]
Line_7 $$ final JavaArchive sar = ShrinkWrap.create(JavaArchive.class, "test-jmx-sar.sar")-->Line_10 $$ InputStream in = sar.as(ZipExporter.class).exportAsInputStream()[ FD ]
Line_4 $$ ObjectName testDeploymentModelName = new ObjectName("" + RESOLVED_DOMAIN + ":deployment=test-jmx-sar.sar")-->Line_39 $$ connection.invoke(testDeploymentModelName, "remove", new Object[0], new String[0])[ FD ]
Line_2 $$ public void testDeploymentViaJmx() throws Exception -->Line_18 $$ byte[] hash = (byte[]) connection.invoke(RESOLVED_ROOT_MODEL_NAME, "uploadDeploymentBytes", new Object[] [ CD ]
Line_2 $$ public void testDeploymentViaJmx() throws Exception -->Line_38 $$ Assert.assertFalse((Boolean) connection.getAttribute(testDeploymentModelName, "enabled"))[ CD ]
Line_2 $$ public void testDeploymentViaJmx() throws Exception -->Line_5 $$ assertNoMBean(testSarMBeanName)[ CD ]
Line_2 $$ public void testDeploymentViaJmx() throws Exception -->Line_11 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()[ CD ]
Line_12 $$ int i = in.read()-->Line_13 $$ while (i != -1) [ FD ]
Line_2 $$ public void testDeploymentViaJmx() throws Exception -->Line_19 $$ CompositeType contentType = null[ CD ]
Line_27 $$ Map<String, Object> values = new HashMap<String, Object>()-->Line_29 $$ values.put(key, null)[ FD ]
Line_2 $$ public void testDeploymentViaJmx() throws Exception -->Line_40 $$ assertNoMBean(testDeploymentModelName)[ CD ]
Line_2 $$ public void testDeploymentViaJmx() throws Exception -->Line_9 $$ sar.addAsManifestResource(ModelControllerMBeanTestCase.class.getPackage(), "jboss-service.xml", "jboss-service.xml")[ CD ]
Line_7 $$ final JavaArchive sar = ShrinkWrap.create(JavaArchive.class, "test-jmx-sar.sar")-->Line_9 $$ sar.addAsManifestResource(ModelControllerMBeanTestCase.class.getPackage(), "jboss-service.xml", "jboss-service.xml")[ FD ]
Line_2 $$ public void testDeploymentViaJmx() throws Exception -->Line_13 $$ while (i != -1) [ CD ]
Line_2 $$ public void testDeploymentViaJmx() throws Exception -->Line_35 $$ Assert.assertTrue((Boolean) connection.getAttribute(testDeploymentModelName, "enabled"))[ CD ]
Line_2 $$ public void testDeploymentViaJmx() throws Exception -->Line_6 $$ assertNoMBean(testDeploymentModelName)[ CD ]
Line_2 $$ public void testDeploymentViaJmx() throws Exception -->Line_39 $$ connection.invoke(testDeploymentModelName, "remove", new Object[0], new String[0])[ CD ]
Line_3 $$ ObjectName testSarMBeanName = new ObjectName("jboss:name=test,type=jmx-sar")-->Line_37 $$ assertNoMBean(testSarMBeanName)[ FD ]
Line_12 $$ int i = in.read()-->Line_15 $$ i = in.read()[ FD ]
Line_2 $$ public void testDeploymentViaJmx() throws Exception -->Line_7 $$ final JavaArchive sar = ShrinkWrap.create(JavaArchive.class, "test-jmx-sar.sar")[ CD ]
Line_28 $$ for (String key : contentType.keySet()) -->Line_29 $$ values.put(key, null)[ FD ]
Line_4 $$ ObjectName testDeploymentModelName = new ObjectName("" + RESOLVED_DOMAIN + ":deployment=test-jmx-sar.sar")-->Line_40 $$ assertNoMBean(testDeploymentModelName)[ FD ]
Line_11 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_14 $$ bout.write(i)[ FD ]
Line_19 $$ CompositeType contentType = null-->Line_28 $$ for (String key : contentType.keySet()) [ FD ]
Line_11 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_17 $$ byte[] bytes = bout.toByteArray()[ FD ]
Line_2 $$ public void testDeploymentViaJmx() throws Exception -->Line_31 $$ values.put("hash", hash)[ CD ]
Line_4 $$ ObjectName testDeploymentModelName = new ObjectName("" + RESOLVED_DOMAIN + ":deployment=test-jmx-sar.sar")-->Line_35 $$ Assert.assertTrue((Boolean) connection.getAttribute(testDeploymentModelName, "enabled"))[ FD ]
Line_13 $$ while (i != -1) -->Line_14 $$ bout.write(i)[ CD ]
Line_12 $$ int i = in.read()-->Line_14 $$ bout.write(i)[ FD ]
Line_2 $$ public void testDeploymentViaJmx() throws Exception -->Line_8 $$ sar.addClasses(org.jboss.as.test.integration.jmx.sar.Test.class, TestMBean.class)[ CD ]
Line_10 $$ InputStream in = sar.as(ZipExporter.class).exportAsInputStream()-->Line_15 $$ i = in.read()[ FD ]
Line_15 $$ i = in.read()-->Line_14 $$ bout.write(i)[ FD ]
Line_21 $$ for (MBeanOperationInfo op : info.getOperations()) -->Line_23 $$ contentType = (CompositeType) ((ArrayType<CompositeType>) ((OpenMBeanParameterInfo) op.getSignature()[2]).getOpenType()).getElementOpenType()[ FD ]
Line_2 $$ public void testDeploymentViaJmx() throws Exception -->Line_10 $$ InputStream in = sar.as(ZipExporter.class).exportAsInputStream()[ CD ]
Line_27 $$ Map<String, Object> values = new HashMap<String, Object>()-->Line_31 $$ values.put("hash", hash)[ FD ]
Line_18 $$ byte[] hash = (byte[]) connection.invoke(RESOLVED_ROOT_MODEL_NAME, "uploadDeploymentBytes", new Object[] -->Line_31 $$ values.put("hash", hash)[ FD ]
Line_2 $$ public void testDeploymentViaJmx() throws Exception -->Line_36 $$ connection.invoke(testDeploymentModelName, "undeploy", new Object[0], new String[0])[ CD ]
Line_2 $$ public void testDeploymentViaJmx() throws Exception -->Line_33 $$ connection.invoke(RESOLVED_ROOT_MODEL_NAME, "addDeployment", new Object[] [ CD ]
Line_4 $$ ObjectName testDeploymentModelName = new ObjectName("" + RESOLVED_DOMAIN + ":deployment=test-jmx-sar.sar")-->Line_38 $$ Assert.assertFalse((Boolean) connection.getAttribute(testDeploymentModelName, "enabled"))[ FD ]
Line_15 $$ i = in.read()-->Line_13 $$ while (i != -1) [ FD ]
Line_21 $$ for (MBeanOperationInfo op : info.getOperations()) -->Line_22 $$ if (op.getName().equals("addDeployment")) [ FD ]
Line_2 $$ public void testDeploymentViaJmx() throws Exception -->Line_3 $$ ObjectName testSarMBeanName = new ObjectName("jboss:name=test,type=jmx-sar")[ CD ]
Line_2 $$ public void testDeploymentViaJmx() throws Exception -->Line_17 $$ byte[] bytes = bout.toByteArray()[ CD ]
Line_2 $$ public void testDeploymentViaJmx() throws Exception -->Line_32 $$ CompositeData contents = new CompositeDataSupport(contentType, values)[ CD ]
Line_2 $$ public void testDeploymentViaJmx() throws Exception -->Line_34 $$ Assert.assertNotNull(connection.getMBeanInfo(testSarMBeanName))[ CD ]
Line_10 $$ InputStream in = sar.as(ZipExporter.class).exportAsInputStream()-->Line_12 $$ int i = in.read()[ FD ]
