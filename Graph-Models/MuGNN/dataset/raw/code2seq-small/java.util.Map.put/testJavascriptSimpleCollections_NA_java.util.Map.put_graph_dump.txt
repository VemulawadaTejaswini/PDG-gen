Line_2 $$ public void testJavascriptSimpleCollections() throws Throwable -->Line_12 $$ map.put(3, true)[ CD ]
Line_7 $$ List<Double> list = Arrays.asList(1d, 2d, 3d)-->Line_16 $$ assertRowsNet(version, executeNet(version, "SELECT " + fName1 + "(lst), " + fName2 + "(st), " + fName3 + "(mp) FROM %s WHERE key = 1"), row(list, set, map))[ FD ]
Line_2 $$ public void testJavascriptSimpleCollections() throws Throwable -->Line_3 $$ createTable("CREATE TABLE %s (key int primary key, lst list<double>, st set<text>, mp map<int, boolean>)")[ CD ]
Line_8 $$ Set<String> set = new TreeSet(Arrays.asList("one", "three", "two"))-->Line_14 $$ assertRows(execute("SELECT lst, st, mp FROM %s WHERE key = 1"), row(list, set, map))[ FD ]
Line_8 $$ Set<String> set = new TreeSet(Arrays.asList("one", "three", "two"))-->Line_16 $$ assertRowsNet(version, executeNet(version, "SELECT " + fName1 + "(lst), " + fName2 + "(st), " + fName3 + "(mp) FROM %s WHERE key = 1"), row(list, set, map))[ FD ]
Line_9 $$ Map<Integer, Boolean> map = new TreeMap()-->Line_13 $$ execute("INSERT INTO %s (key, lst, st, mp) VALUES (1, ?, ?, ?)", list, set, map)[ FD ]
Line_2 $$ public void testJavascriptSimpleCollections() throws Throwable -->Line_15 $$ assertRows(execute("SELECT " + fName1 + "(lst), " + fName2 + "(st), " + fName3 + "(mp) FROM %s WHERE key = 1"), row(list, set, map))[ CD ]
Line_2 $$ public void testJavascriptSimpleCollections() throws Throwable -->Line_14 $$ assertRows(execute("SELECT lst, st, mp FROM %s WHERE key = 1"), row(list, set, map))[ CD ]
Line_9 $$ Map<Integer, Boolean> map = new TreeMap()-->Line_11 $$ map.put(2, false)[ FD ]
Line_2 $$ public void testJavascriptSimpleCollections() throws Throwable -->Line_5 $$ String fName2 = createFunction(KEYSPACE_PER_TEST, "set<text>", "CREATE FUNCTION %s( st set<text> ) " + "RETURNS NULL ON NULL INPUT " + "RETURNS set<text> " + "LANGUAGE javascript\n" + "AS 'st;';")[ CD ]
Line_9 $$ Map<Integer, Boolean> map = new TreeMap()-->Line_12 $$ map.put(3, true)[ FD ]
Line_2 $$ public void testJavascriptSimpleCollections() throws Throwable -->Line_7 $$ List<Double> list = Arrays.asList(1d, 2d, 3d)[ CD ]
Line_7 $$ List<Double> list = Arrays.asList(1d, 2d, 3d)-->Line_15 $$ assertRows(execute("SELECT " + fName1 + "(lst), " + fName2 + "(st), " + fName3 + "(mp) FROM %s WHERE key = 1"), row(list, set, map))[ FD ]
Line_8 $$ Set<String> set = new TreeSet(Arrays.asList("one", "three", "two"))-->Line_13 $$ execute("INSERT INTO %s (key, lst, st, mp) VALUES (1, ?, ?, ?)", list, set, map)[ FD ]
Line_7 $$ List<Double> list = Arrays.asList(1d, 2d, 3d)-->Line_13 $$ execute("INSERT INTO %s (key, lst, st, mp) VALUES (1, ?, ?, ?)", list, set, map)[ FD ]
Line_2 $$ public void testJavascriptSimpleCollections() throws Throwable -->Line_13 $$ execute("INSERT INTO %s (key, lst, st, mp) VALUES (1, ?, ?, ?)", list, set, map)[ CD ]
Line_9 $$ Map<Integer, Boolean> map = new TreeMap()-->Line_16 $$ assertRowsNet(version, executeNet(version, "SELECT " + fName1 + "(lst), " + fName2 + "(st), " + fName3 + "(mp) FROM %s WHERE key = 1"), row(list, set, map))[ FD ]
Line_8 $$ Set<String> set = new TreeSet(Arrays.asList("one", "three", "two"))-->Line_15 $$ assertRows(execute("SELECT " + fName1 + "(lst), " + fName2 + "(st), " + fName3 + "(mp) FROM %s WHERE key = 1"), row(list, set, map))[ FD ]
Line_2 $$ public void testJavascriptSimpleCollections() throws Throwable -->Line_8 $$ Set<String> set = new TreeSet(Arrays.asList("one", "three", "two"))[ CD ]
Line_9 $$ Map<Integer, Boolean> map = new TreeMap()-->Line_15 $$ assertRows(execute("SELECT " + fName1 + "(lst), " + fName2 + "(st), " + fName3 + "(mp) FROM %s WHERE key = 1"), row(list, set, map))[ FD ]
Line_2 $$ public void testJavascriptSimpleCollections() throws Throwable -->Line_4 $$ String fName1 = createFunction(KEYSPACE_PER_TEST, "list<double>", "CREATE FUNCTION %s( lst list<double> ) " + "RETURNS NULL ON NULL INPUT " + "RETURNS list<double> " + "LANGUAGE javascript\n" + "AS 'lst;';")[ CD ]
Line_2 $$ public void testJavascriptSimpleCollections() throws Throwable -->Line_9 $$ Map<Integer, Boolean> map = new TreeMap()[ CD ]
Line_9 $$ Map<Integer, Boolean> map = new TreeMap()-->Line_10 $$ map.put(1, true)[ FD ]
Line_7 $$ List<Double> list = Arrays.asList(1d, 2d, 3d)-->Line_14 $$ assertRows(execute("SELECT lst, st, mp FROM %s WHERE key = 1"), row(list, set, map))[ FD ]
Line_2 $$ public void testJavascriptSimpleCollections() throws Throwable -->Line_10 $$ map.put(1, true)[ CD ]
Line_2 $$ public void testJavascriptSimpleCollections() throws Throwable -->Line_6 $$ String fName3 = createFunction(KEYSPACE_PER_TEST, "map<int, boolean>", "CREATE FUNCTION %s( mp map<int, boolean> ) " + "RETURNS NULL ON NULL INPUT " + "RETURNS map<int, boolean> " + "LANGUAGE javascript\n" + "AS 'mp;';")[ CD ]
Line_9 $$ Map<Integer, Boolean> map = new TreeMap()-->Line_14 $$ assertRows(execute("SELECT lst, st, mp FROM %s WHERE key = 1"), row(list, set, map))[ FD ]
Line_2 $$ public void testJavascriptSimpleCollections() throws Throwable -->Line_11 $$ map.put(2, false)[ CD ]
