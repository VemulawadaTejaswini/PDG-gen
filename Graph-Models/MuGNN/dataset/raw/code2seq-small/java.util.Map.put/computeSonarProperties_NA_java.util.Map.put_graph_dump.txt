Line_14 $$ if (projectPrefix.startsWith(".")) -->Line_15 $$ projectPrefix = projectPrefix.substring(1)[ CD ]
Line_27 $$ String modules = COMMA_JOINER.join(Iterables.transform(enabledChildProjects, new Function<Project, String>() -->Line_29 $$ return input.getName()[ FD ]
Line_18 $$ List<Project> enabledChildProjects = Lists.newLinkedList(Iterables.filter(project.getChildProjects().values(), new Predicate<Project>() -->Line_29 $$ return input.getName()[ FD ]
Line_2 $$ public void computeSonarProperties(Project project, Map<String, Object> properties, Map<Project, ActionBroadcast<SonarProperties>> sonarPropertiesActionBroadcastMap) -->Line_17 $$ convertProperties(rawProperties, projectPrefix, properties)[ FD ]
Line_2 $$ public void computeSonarProperties(Project project, Map<String, Object> properties, Map<Project, ActionBroadcast<SonarProperties>> sonarPropertiesActionBroadcastMap) -->Line_32 $$ properties.put(convertKey("sonar.modules", projectPrefix), modules)[ CD ]
Line_2 $$ public void computeSonarProperties(Project project, Map<String, Object> properties, Map<Project, ActionBroadcast<SonarProperties>> sonarPropertiesActionBroadcastMap) -->Line_13 $$ String projectPrefix = project.getPath().substring(targetProject.getPath().length()).replace(":", ".")[ FD ]
Line_2 $$ public void computeSonarProperties(Project project, Map<String, Object> properties, Map<Project, ActionBroadcast<SonarProperties>> sonarPropertiesActionBroadcastMap) -->Line_9 $$ evaluateSonarPropertiesBlocks(sonarPropertiesActionBroadcastMap.get(project), rawProperties)[ FD ]
Line_2 $$ public void computeSonarProperties(Project project, Map<String, Object> properties, Map<Project, ActionBroadcast<SonarProperties>> sonarPropertiesActionBroadcastMap) -->Line_3 $$ SonarRunnerExtension extension = project.getExtensions().getByType(SonarRunnerExtension.class)[ CD ]
Line_2 $$ public void computeSonarProperties(Project project, Map<String, Object> properties, Map<Project, ActionBroadcast<SonarProperties>> sonarPropertiesActionBroadcastMap) -->Line_32 $$ properties.put(convertKey("sonar.modules", projectPrefix), modules)[ FD ]
Line_2 $$ public void computeSonarProperties(Project project, Map<String, Object> properties, Map<Project, ActionBroadcast<SonarProperties>> sonarPropertiesActionBroadcastMap) -->Line_13 $$ String projectPrefix = project.getPath().substring(targetProject.getPath().length()).replace(":", ".")[ CD ]
Line_2 $$ public void computeSonarProperties(Project project, Map<String, Object> properties, Map<Project, ActionBroadcast<SonarProperties>> sonarPropertiesActionBroadcastMap) -->Line_18 $$ List<Project> enabledChildProjects = Lists.newLinkedList(Iterables.filter(project.getChildProjects().values(), new Predicate<Project>() [ FD ]
Line_3 $$ SonarRunnerExtension extension = project.getExtensions().getByType(SonarRunnerExtension.class)-->Line_4 $$ if (extension.isSkipProject()) [ FD ]
Line_13 $$ String projectPrefix = project.getPath().substring(targetProject.getPath().length()).replace(":", ".")-->Line_14 $$ if (projectPrefix.startsWith(".")) [ FD ]
Line_15 $$ projectPrefix = projectPrefix.substring(1)-->Line_32 $$ properties.put(convertKey("sonar.modules", projectPrefix), modules)[ FD ]
Line_10 $$ if (project.equals(targetProject)) -->Line_11 $$ addSystemProperties(rawProperties)[ CD ]
Line_2 $$ public void computeSonarProperties(Project project, Map<String, Object> properties, Map<Project, ActionBroadcast<SonarProperties>> sonarPropertiesActionBroadcastMap) -->Line_26 $$ Collections.sort(enabledChildProjects)[ CD ]
Line_15 $$ projectPrefix = projectPrefix.substring(1)-->Line_17 $$ convertProperties(rawProperties, projectPrefix, properties)[ FD ]
Line_2 $$ public void computeSonarProperties(Project project, Map<String, Object> properties, Map<Project, ActionBroadcast<SonarProperties>> sonarPropertiesActionBroadcastMap) -->Line_27 $$ String modules = COMMA_JOINER.join(Iterables.transform(enabledChildProjects, new Function<Project, String>() [ CD ]
Line_7 $$ Map<String, Object> rawProperties = Maps.newLinkedHashMap()-->Line_8 $$ addGradleDefaults(project, rawProperties)[ FD ]
Line_18 $$ List<Project> enabledChildProjects = Lists.newLinkedList(Iterables.filter(project.getChildProjects().values(), new Predicate<Project>() -->Line_23 $$ if (enabledChildProjects.isEmpty()) [ FD ]
Line_18 $$ List<Project> enabledChildProjects = Lists.newLinkedList(Iterables.filter(project.getChildProjects().values(), new Predicate<Project>() -->Line_20 $$ return !input.getExtensions().getByType(SonarRunnerExtension.class).isSkipProject()[ FD ]
Line_2 $$ public void computeSonarProperties(Project project, Map<String, Object> properties, Map<Project, ActionBroadcast<SonarProperties>> sonarPropertiesActionBroadcastMap) -->Line_14 $$ if (projectPrefix.startsWith(".")) [ CD ]
Line_2 $$ public void computeSonarProperties(Project project, Map<String, Object> properties, Map<Project, ActionBroadcast<SonarProperties>> sonarPropertiesActionBroadcastMap) -->Line_8 $$ addGradleDefaults(project, rawProperties)[ FD ]
Line_18 $$ List<Project> enabledChildProjects = Lists.newLinkedList(Iterables.filter(project.getChildProjects().values(), new Predicate<Project>() -->Line_26 $$ Collections.sort(enabledChildProjects)[ FD ]
Line_2 $$ public void computeSonarProperties(Project project, Map<String, Object> properties, Map<Project, ActionBroadcast<SonarProperties>> sonarPropertiesActionBroadcastMap) -->Line_3 $$ SonarRunnerExtension extension = project.getExtensions().getByType(SonarRunnerExtension.class)[ FD ]
Line_2 $$ public void computeSonarProperties(Project project, Map<String, Object> properties, Map<Project, ActionBroadcast<SonarProperties>> sonarPropertiesActionBroadcastMap) -->Line_10 $$ if (project.equals(targetProject)) [ CD ]
Line_18 $$ List<Project> enabledChildProjects = Lists.newLinkedList(Iterables.filter(project.getChildProjects().values(), new Predicate<Project>() -->Line_20 $$ return !input.getExtensions().getByType(SonarRunnerExtension.class).isSkipProject()[ CD ]
Line_2 $$ public void computeSonarProperties(Project project, Map<String, Object> properties, Map<Project, ActionBroadcast<SonarProperties>> sonarPropertiesActionBroadcastMap) -->Line_4 $$ if (extension.isSkipProject()) [ CD ]
Line_7 $$ Map<String, Object> rawProperties = Maps.newLinkedHashMap()-->Line_9 $$ evaluateSonarPropertiesBlocks(sonarPropertiesActionBroadcastMap.get(project), rawProperties)[ FD ]
Line_2 $$ public void computeSonarProperties(Project project, Map<String, Object> properties, Map<Project, ActionBroadcast<SonarProperties>> sonarPropertiesActionBroadcastMap) -->Line_23 $$ if (enabledChildProjects.isEmpty()) [ CD ]
Line_18 $$ List<Project> enabledChildProjects = Lists.newLinkedList(Iterables.filter(project.getChildProjects().values(), new Predicate<Project>() -->Line_27 $$ String modules = COMMA_JOINER.join(Iterables.transform(enabledChildProjects, new Function<Project, String>() [ FD ]
Line_4 $$ if (extension.isSkipProject()) -->Line_5 $$ return[ CD ]
Line_2 $$ public void computeSonarProperties(Project project, Map<String, Object> properties, Map<Project, ActionBroadcast<SonarProperties>> sonarPropertiesActionBroadcastMap) -->Line_7 $$ Map<String, Object> rawProperties = Maps.newLinkedHashMap()[ CD ]
Line_13 $$ String projectPrefix = project.getPath().substring(targetProject.getPath().length()).replace(":", ".")-->Line_32 $$ properties.put(convertKey("sonar.modules", projectPrefix), modules)[ FD ]
Line_2 $$ public void computeSonarProperties(Project project, Map<String, Object> properties, Map<Project, ActionBroadcast<SonarProperties>> sonarPropertiesActionBroadcastMap) -->Line_10 $$ if (project.equals(targetProject)) [ FD ]
Line_13 $$ String projectPrefix = project.getPath().substring(targetProject.getPath().length()).replace(":", ".")-->Line_15 $$ projectPrefix = projectPrefix.substring(1)[ FD ]
Line_2 $$ public void computeSonarProperties(Project project, Map<String, Object> properties, Map<Project, ActionBroadcast<SonarProperties>> sonarPropertiesActionBroadcastMap) -->Line_34 $$ computeSonarProperties(childProject, properties, sonarPropertiesActionBroadcastMap)[ FD ]
Line_7 $$ Map<String, Object> rawProperties = Maps.newLinkedHashMap()-->Line_11 $$ addSystemProperties(rawProperties)[ FD ]
Line_2 $$ public void computeSonarProperties(Project project, Map<String, Object> properties, Map<Project, ActionBroadcast<SonarProperties>> sonarPropertiesActionBroadcastMap) -->Line_8 $$ addGradleDefaults(project, rawProperties)[ CD ]
Line_2 $$ public void computeSonarProperties(Project project, Map<String, Object> properties, Map<Project, ActionBroadcast<SonarProperties>> sonarPropertiesActionBroadcastMap) -->Line_18 $$ List<Project> enabledChildProjects = Lists.newLinkedList(Iterables.filter(project.getChildProjects().values(), new Predicate<Project>() [ CD ]
Line_13 $$ String projectPrefix = project.getPath().substring(targetProject.getPath().length()).replace(":", ".")-->Line_17 $$ convertProperties(rawProperties, projectPrefix, properties)[ FD ]
Line_2 $$ public void computeSonarProperties(Project project, Map<String, Object> properties, Map<Project, ActionBroadcast<SonarProperties>> sonarPropertiesActionBroadcastMap) -->Line_17 $$ convertProperties(rawProperties, projectPrefix, properties)[ CD ]
Line_23 $$ if (enabledChildProjects.isEmpty()) -->Line_24 $$ return[ CD ]
Line_7 $$ Map<String, Object> rawProperties = Maps.newLinkedHashMap()-->Line_17 $$ convertProperties(rawProperties, projectPrefix, properties)[ FD ]
Line_27 $$ String modules = COMMA_JOINER.join(Iterables.transform(enabledChildProjects, new Function<Project, String>() -->Line_29 $$ return input.getName()[ CD ]
Line_2 $$ public void computeSonarProperties(Project project, Map<String, Object> properties, Map<Project, ActionBroadcast<SonarProperties>> sonarPropertiesActionBroadcastMap) -->Line_9 $$ evaluateSonarPropertiesBlocks(sonarPropertiesActionBroadcastMap.get(project), rawProperties)[ CD ]
