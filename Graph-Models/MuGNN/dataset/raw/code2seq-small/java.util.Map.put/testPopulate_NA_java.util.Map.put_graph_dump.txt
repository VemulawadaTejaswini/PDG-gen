Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_17 $$ distributedRequestAttributes.put(RequestAttributes.ATTRIBUTE_1, RequestAttributes.ATTRIBUTE_1)[ CD ]
Line_30 $$ List<String> requestAttributeNames = ListUtil.fromEnumeration(requestAttributeNameEnumeration)-->Line_33 $$ Assert.assertTrue(requestAttributeNames.contains(RequestAttributes.ATTRIBUTE_3))[ FD ]
Line_27 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_46 $$ spiAgentResponse.populate(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_19 $$ spiAgentResponse.distributedRequestAttributes = distributedRequestAttributes[ CD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_41 $$ Layout layout = (Layout) mockHttpServletRequest.getAttribute(WebKeys.LAYOUT)[ CD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_42 $$ Assert.assertEquals(typeSetting, layout.getTypeSettings())[ CD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_72 $$ CharBuffer charBuffer = bufferCacheServletResponse.getCharBuffer()[ CD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_71 $$ spiAgentResponse.populate(mockHttpServletRequest, bufferCacheServletResponse)[ CD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_44 $$ spiAgentResponse.byteData = outputData[ CD ]
Line_49 $$ final IOException ioException = new IOException()-->Line_66 $$ Assert.assertSame(ioException, pre.getCause())[ FD ]
Line_27 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_71 $$ spiAgentResponse.populate(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_13 $$ spiAgentResponse.setException(null)[ CD ]
Line_43 $$ byte[] outputData = new byte[10]-->Line_44 $$ spiAgentResponse.byteData = outputData[ FD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_39 $$ mockHttpServletRequest.setAttribute(WebKeys.LAYOUT, new LayoutImpl())[ CD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_33 $$ Assert.assertTrue(requestAttributeNames.contains(RequestAttributes.ATTRIBUTE_3))[ CD ]
Line_27 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_39 $$ mockHttpServletRequest.setAttribute(WebKeys.LAYOUT, new LayoutImpl())[ FD ]
Line_45 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_72 $$ CharBuffer charBuffer = bufferCacheServletResponse.getCharBuffer()[ FD ]
Line_27 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_63 $$ spiAgentResponse.populate(mockHttpServletRequest, httpServletResponse)[ FD ]
Line_16 $$ Map<String, Serializable> distributedRequestAttributes = new HashMap()-->Line_18 $$ distributedRequestAttributes.put(RequestAttributes.ATTRIBUTE_3, RequestAttributes.ATTRIBUTE_3)[ FD ]
Line_3 $$ SPIAgentResponse spiAgentResponse = new SPIAgentResponse(_SERVLET_CONTEXT_NAME)-->Line_7 $$ spiAgentResponse.populate(new MockHttpServletRequest(), new MockHttpServletResponse())[ FD ]
Line_50 $$ HttpServletResponse httpServletResponse = new StubHttpServletResponse() -->Line_63 $$ spiAgentResponse.populate(mockHttpServletRequest, httpServletResponse)[ FD ]
Line_49 $$ final IOException ioException = new IOException()-->Line_78 $$ Assert.assertSame(ioException, pre.getCause())[ FD ]
Line_47 $$ ByteBuffer byteBuffer = bufferCacheServletResponse.getByteBuffer()-->Line_48 $$ Assert.assertSame(outputData, byteBuffer.array())[ FD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_43 $$ byte[] outputData = new byte[10][ CD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_32 $$ Assert.assertTrue(requestAttributeNames.contains(RequestAttributes.ATTRIBUTE_1))[ CD ]
Line_3 $$ SPIAgentResponse spiAgentResponse = new SPIAgentResponse(_SERVLET_CONTEXT_NAME)-->Line_75 $$ spiAgentResponse.populate(mockHttpServletRequest, httpServletResponse)[ FD ]
Line_16 $$ Map<String, Serializable> distributedRequestAttributes = new HashMap()-->Line_19 $$ spiAgentResponse.distributedRequestAttributes = distributedRequestAttributes[ FD ]
Line_30 $$ List<String> requestAttributeNames = ListUtil.fromEnumeration(requestAttributeNameEnumeration)-->Line_31 $$ Assert.assertEquals(2, requestAttributeNames.size())[ FD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_36 $$ distributedRequestAttributes.clear()[ CD ]
Line_16 $$ Map<String, Serializable> distributedRequestAttributes = new HashMap()-->Line_17 $$ distributedRequestAttributes.put(RequestAttributes.ATTRIBUTE_1, RequestAttributes.ATTRIBUTE_1)[ FD ]
Line_20 $$ Map<String, Serializable> deltaSessionAttributes = new HashMap()-->Line_21 $$ deltaSessionAttributes.put(_SESSION_ATTRIBUTE_1, _SESSION_ATTRIBUTE_1)[ FD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_38 $$ distributedRequestAttributes.put(WebKeys.SPI_AGENT_LAYOUT_TYPE_SETTINGS, typeSetting)[ CD ]
Line_3 $$ SPIAgentResponse spiAgentResponse = new SPIAgentResponse(_SERVLET_CONTEXT_NAME)-->Line_5 $$ spiAgentResponse.setException(exception)[ FD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_50 $$ HttpServletResponse httpServletResponse = new StubHttpServletResponse() [ CD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_4 $$ Exception exception = new Exception()[ CD ]
Line_20 $$ Map<String, Serializable> deltaSessionAttributes = new HashMap()-->Line_23 $$ spiAgentResponse.deltaSessionAttributes = deltaSessionAttributes[ FD ]
Line_27 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_28 $$ spiAgentResponse.populate(mockHttpServletRequest, new MockHttpServletResponse())[ FD ]
Line_50 $$ HttpServletResponse httpServletResponse = new StubHttpServletResponse() -->Line_52 $$ return false[ CD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_18 $$ distributedRequestAttributes.put(RequestAttributes.ATTRIBUTE_3, RequestAttributes.ATTRIBUTE_3)[ CD ]
Line_29 $$ Enumeration<String> requestAttributeNameEnumeration = mockHttpServletRequest.getAttributeNames()-->Line_30 $$ List<String> requestAttributeNames = ListUtil.fromEnumeration(requestAttributeNameEnumeration)[ FD ]
Line_4 $$ Exception exception = new Exception()-->Line_11 $$ Assert.assertSame(exception, pre.getCause())[ FD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_31 $$ Assert.assertEquals(2, requestAttributeNames.size())[ CD ]
Line_3 $$ SPIAgentResponse spiAgentResponse = new SPIAgentResponse(_SERVLET_CONTEXT_NAME)-->Line_28 $$ spiAgentResponse.populate(mockHttpServletRequest, new MockHttpServletResponse())[ FD ]
Line_3 $$ SPIAgentResponse spiAgentResponse = new SPIAgentResponse(_SERVLET_CONTEXT_NAME)-->Line_13 $$ spiAgentResponse.setException(null)[ FD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_25 $$ spiAgentResponse.metaData = metaInfoCacheServletResponse.getMetaData()[ CD ]
Line_24 $$ MetaInfoCacheServletResponse metaInfoCacheServletResponse = new MetaInfoCacheServletResponse(new MockHttpServletResponse())-->Line_25 $$ spiAgentResponse.metaData = metaInfoCacheServletResponse.getMetaData()[ FD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_46 $$ spiAgentResponse.populate(mockHttpServletRequest, bufferCacheServletResponse)[ CD ]
Line_27 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_34 $$ Assert.assertEquals(RequestAttributes.ATTRIBUTE_1, mockHttpServletRequest.getAttribute(RequestAttributes.ATTRIBUTE_1))[ FD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_49 $$ final IOException ioException = new IOException()[ CD ]
Line_27 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_41 $$ Layout layout = (Layout) mockHttpServletRequest.getAttribute(WebKeys.LAYOUT)[ FD ]
Line_3 $$ SPIAgentResponse spiAgentResponse = new SPIAgentResponse(_SERVLET_CONTEXT_NAME)-->Line_63 $$ spiAgentResponse.populate(mockHttpServletRequest, httpServletResponse)[ FD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_37 $$ String typeSetting = "typeSetting"[ CD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_48 $$ Assert.assertSame(outputData, byteBuffer.array())[ CD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_28 $$ spiAgentResponse.populate(mockHttpServletRequest, new MockHttpServletResponse())[ CD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_29 $$ Enumeration<String> requestAttributeNameEnumeration = mockHttpServletRequest.getAttributeNames()[ CD ]
Line_3 $$ SPIAgentResponse spiAgentResponse = new SPIAgentResponse(_SERVLET_CONTEXT_NAME)-->Line_46 $$ spiAgentResponse.populate(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_15 $$ spiAgentResponse.portalResiliencyResponse = true[ CD ]
Line_4 $$ Exception exception = new Exception()-->Line_5 $$ spiAgentResponse.setException(exception)[ FD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_24 $$ MetaInfoCacheServletResponse metaInfoCacheServletResponse = new MetaInfoCacheServletResponse(new MockHttpServletResponse())[ CD ]
Line_16 $$ Map<String, Serializable> distributedRequestAttributes = new HashMap()-->Line_38 $$ distributedRequestAttributes.put(WebKeys.SPI_AGENT_LAYOUT_TYPE_SETTINGS, typeSetting)[ FD ]
Line_3 $$ SPIAgentResponse spiAgentResponse = new SPIAgentResponse(_SERVLET_CONTEXT_NAME)-->Line_40 $$ spiAgentResponse.populate(mockHttpServletRequest, new MockHttpServletResponse())[ FD ]
Line_45 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_47 $$ ByteBuffer byteBuffer = bufferCacheServletResponse.getByteBuffer()[ FD ]
Line_27 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_75 $$ spiAgentResponse.populate(mockHttpServletRequest, httpServletResponse)[ FD ]
Line_27 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_40 $$ spiAgentResponse.populate(mockHttpServletRequest, new MockHttpServletResponse())[ FD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_3 $$ SPIAgentResponse spiAgentResponse = new SPIAgentResponse(_SERVLET_CONTEXT_NAME)[ CD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_26 $$ spiAgentResponse.threadLocalDistributors = new ThreadLocalDistributor[0][ CD ]
Line_3 $$ SPIAgentResponse spiAgentResponse = new SPIAgentResponse(_SERVLET_CONTEXT_NAME)-->Line_14 $$ spiAgentResponse.populate(new MockHttpServletRequest(), new MockHttpServletResponse())[ FD ]
Line_37 $$ String typeSetting = "typeSetting"-->Line_42 $$ Assert.assertEquals(typeSetting, layout.getTypeSettings())[ FD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_14 $$ spiAgentResponse.populate(new MockHttpServletRequest(), new MockHttpServletResponse())[ CD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_27 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()[ CD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_35 $$ Assert.assertEquals(RequestAttributes.ATTRIBUTE_1, mockHttpServletRequest.getAttribute(RequestAttributes.ATTRIBUTE_1))[ CD ]
Line_37 $$ String typeSetting = "typeSetting"-->Line_38 $$ distributedRequestAttributes.put(WebKeys.SPI_AGENT_LAYOUT_TYPE_SETTINGS, typeSetting)[ FD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_73 $$ Assert.assertEquals(stringData, charBuffer.toString())[ CD ]
Line_16 $$ Map<String, Serializable> distributedRequestAttributes = new HashMap()-->Line_36 $$ distributedRequestAttributes.clear()[ FD ]
Line_27 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_35 $$ Assert.assertEquals(RequestAttributes.ATTRIBUTE_1, mockHttpServletRequest.getAttribute(RequestAttributes.ATTRIBUTE_1))[ FD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_23 $$ spiAgentResponse.deltaSessionAttributes = deltaSessionAttributes[ CD ]
Line_30 $$ List<String> requestAttributeNames = ListUtil.fromEnumeration(requestAttributeNameEnumeration)-->Line_32 $$ Assert.assertTrue(requestAttributeNames.contains(RequestAttributes.ATTRIBUTE_1))[ FD ]
Line_43 $$ byte[] outputData = new byte[10]-->Line_48 $$ Assert.assertSame(outputData, byteBuffer.array())[ FD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_20 $$ Map<String, Serializable> deltaSessionAttributes = new HashMap()[ CD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_30 $$ List<String> requestAttributeNames = ListUtil.fromEnumeration(requestAttributeNameEnumeration)[ CD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_5 $$ spiAgentResponse.setException(exception)[ CD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_47 $$ ByteBuffer byteBuffer = bufferCacheServletResponse.getByteBuffer()[ CD ]
Line_50 $$ HttpServletResponse httpServletResponse = new StubHttpServletResponse() -->Line_75 $$ spiAgentResponse.populate(mockHttpServletRequest, httpServletResponse)[ FD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_21 $$ deltaSessionAttributes.put(_SESSION_ATTRIBUTE_1, _SESSION_ATTRIBUTE_1)[ CD ]
Line_3 $$ SPIAgentResponse spiAgentResponse = new SPIAgentResponse(_SERVLET_CONTEXT_NAME)-->Line_71 $$ spiAgentResponse.populate(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_40 $$ spiAgentResponse.populate(mockHttpServletRequest, new MockHttpServletResponse())[ CD ]
Line_41 $$ Layout layout = (Layout) mockHttpServletRequest.getAttribute(WebKeys.LAYOUT)-->Line_42 $$ Assert.assertEquals(typeSetting, layout.getTypeSettings())[ FD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_45 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())[ CD ]
Line_20 $$ Map<String, Serializable> deltaSessionAttributes = new HashMap()-->Line_22 $$ deltaSessionAttributes.put(_SESSION_ATTRIBUTE_2, _SESSION_ATTRIBUTE_2)[ FD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_34 $$ Assert.assertEquals(RequestAttributes.ATTRIBUTE_1, mockHttpServletRequest.getAttribute(RequestAttributes.ATTRIBUTE_1))[ CD ]
Line_27 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_29 $$ Enumeration<String> requestAttributeNameEnumeration = mockHttpServletRequest.getAttributeNames()[ FD ]
Line_45 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_71 $$ spiAgentResponse.populate(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_45 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_46 $$ spiAgentResponse.populate(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_16 $$ Map<String, Serializable> distributedRequestAttributes = new HashMap()[ CD ]
Line_2 $$ public void testPopulate() throws IOException, PortalResiliencyException -->Line_22 $$ deltaSessionAttributes.put(_SESSION_ATTRIBUTE_2, _SESSION_ATTRIBUTE_2)[ CD ]
