Line_56 $$ if (p != null) -->Line_59 $$ processSMAPTree.put(p.getPid(), memInfo)[ CD ]
Line_41 $$ for (Map.Entry<String, ProcessInfo> procs : processTree.entrySet()) -->Line_44 $$ procs.getValue().updateJiffy(oldInfo)[ FD ]
Line_35 $$ ProcessInfo pInfo = pInfoQueue.remove()-->Line_36 $$ if (!processTree.containsKey(pInfo.getPid())) [ FD ]
Line_42 $$ ProcessInfo oldInfo = oldProcs.get(procs.getKey())-->Line_45 $$ if (oldInfo != null) [ FD ]
Line_53 $$ if (smapsEnabled) -->Line_54 $$ processSMAPTree.clear()[ CD ]
Line_8 $$ ProcessInfo me = null-->Line_14 $$ me = pInfo[ FD ]
Line_35 $$ ProcessInfo pInfo = pInfoQueue.remove()-->Line_39 $$ pInfoQueue.addAll(pInfo.getChildren())[ FD ]
Line_11 $$ if (constructProcessInfo(pInfo, procfsDir) != null) -->Line_13 $$ if (proc.equals(this.pid)) [ CD ]
Line_57 $$ ProcessTreeSmapMemInfo memInfo = new ProcessTreeSmapMemInfo(p.getPid())-->Line_59 $$ processSMAPTree.put(p.getPid(), memInfo)[ FD ]
Line_3 $$ if (!pid.equals(deadPid)) -->Line_5 $$ Map<String, ProcessInfo> allProcessInfo = new HashMap<String, ProcessInfo>()[ CD ]
Line_3 $$ if (!pid.equals(deadPid)) -->Line_7 $$ processTree.clear()[ CD ]
Line_10 $$ ProcessInfo pInfo = new ProcessInfo(proc)-->Line_37 $$ processTree.put(pInfo.getPid(), pInfo)[ FD ]
Line_50 $$ if (LOG.isDebugEnabled()) -->Line_51 $$ LOG.debug(this.toString())[ CD ]
Line_24 $$ if (!pID.equals("1")) -->Line_27 $$ if (parentPInfo != null) [ CD ]
Line_8 $$ ProcessInfo me = null-->Line_33 $$ pInfoQueue.addAll(me.getChildren())[ FD ]
Line_5 $$ Map<String, ProcessInfo> allProcessInfo = new HashMap<String, ProcessInfo>()-->Line_26 $$ ProcessInfo parentPInfo = allProcessInfo.get(pInfo.getPpid())[ FD ]
Line_13 $$ if (proc.equals(this.pid)) -->Line_15 $$ processTree.put(proc, pInfo)[ CD ]
Line_13 $$ if (proc.equals(this.pid)) -->Line_14 $$ me = pInfo[ CD ]
Line_36 $$ if (!processTree.containsKey(pInfo.getPid())) -->Line_37 $$ processTree.put(pInfo.getPid(), pInfo)[ CD ]
Line_56 $$ if (p != null) -->Line_57 $$ ProcessTreeSmapMemInfo memInfo = new ProcessTreeSmapMemInfo(p.getPid())[ CD ]
Line_8 $$ ProcessInfo me = null-->Line_19 $$ if (me == null) [ FD ]
Line_3 $$ if (!pid.equals(deadPid)) -->Line_19 $$ if (me == null) [ CD ]
Line_34 $$ while (!pInfoQueue.isEmpty()) -->Line_35 $$ ProcessInfo pInfo = pInfoQueue.remove()[ CD ]
Line_55 $$ for (ProcessInfo p : processTree.values()) -->Line_57 $$ ProcessTreeSmapMemInfo memInfo = new ProcessTreeSmapMemInfo(p.getPid())[ FD ]
Line_26 $$ ProcessInfo parentPInfo = allProcessInfo.get(pInfo.getPpid())-->Line_27 $$ if (parentPInfo != null) [ FD ]
Line_41 $$ for (Map.Entry<String, ProcessInfo> procs : processTree.entrySet()) -->Line_42 $$ ProcessInfo oldInfo = oldProcs.get(procs.getKey())[ FD ]
Line_10 $$ ProcessInfo pInfo = new ProcessInfo(proc)-->Line_28 $$ parentPInfo.addChild(pInfo)[ FD ]
Line_32 $$ LinkedList<ProcessInfo> pInfoQueue = new LinkedList<ProcessInfo>()-->Line_35 $$ ProcessInfo pInfo = pInfoQueue.remove()[ FD ]
Line_22 $$ for (Map.Entry<String, ProcessInfo> entry : allProcessInfo.entrySet()) -->Line_25 $$ ProcessInfo pInfo = entry.getValue()[ FD ]
Line_26 $$ ProcessInfo parentPInfo = allProcessInfo.get(pInfo.getPpid())-->Line_28 $$ parentPInfo.addChild(pInfo)[ FD ]
Line_24 $$ if (!pID.equals("1")) -->Line_25 $$ ProcessInfo pInfo = entry.getValue()[ CD ]
Line_56 $$ if (p != null) -->Line_58 $$ constructProcessSMAPInfo(memInfo, procfsDir)[ CD ]
Line_34 $$ while (!pInfoQueue.isEmpty()) -->Line_36 $$ if (!processTree.containsKey(pInfo.getPid())) [ CD ]
Line_3 $$ if (!pid.equals(deadPid)) -->Line_32 $$ LinkedList<ProcessInfo> pInfoQueue = new LinkedList<ProcessInfo>()[ CD ]
Line_22 $$ for (Map.Entry<String, ProcessInfo> entry : allProcessInfo.entrySet()) -->Line_23 $$ String pID = entry.getKey()[ FD ]
Line_43 $$ if (procs.getValue() != null) -->Line_45 $$ if (oldInfo != null) [ CD ]
Line_10 $$ ProcessInfo pInfo = new ProcessInfo(proc)-->Line_36 $$ if (!processTree.containsKey(pInfo.getPid())) [ FD ]
Line_24 $$ if (!pID.equals("1")) -->Line_26 $$ ProcessInfo parentPInfo = allProcessInfo.get(pInfo.getPpid())[ CD ]
Line_3 $$ if (!pid.equals(deadPid)) -->Line_34 $$ while (!pInfoQueue.isEmpty()) [ CD ]
Line_14 $$ me = pInfo-->Line_33 $$ pInfoQueue.addAll(me.getChildren())[ FD ]
Line_42 $$ ProcessInfo oldInfo = oldProcs.get(procs.getKey())-->Line_44 $$ procs.getValue().updateJiffy(oldInfo)[ FD ]
Line_10 $$ ProcessInfo pInfo = new ProcessInfo(proc)-->Line_12 $$ allProcessInfo.put(proc, pInfo)[ FD ]
Line_55 $$ for (ProcessInfo p : processTree.values()) -->Line_56 $$ if (p != null) [ FD ]
Line_42 $$ ProcessInfo oldInfo = oldProcs.get(procs.getKey())-->Line_46 $$ procs.getValue().updateAge(oldInfo)[ FD ]
Line_57 $$ ProcessTreeSmapMemInfo memInfo = new ProcessTreeSmapMemInfo(p.getPid())-->Line_58 $$ constructProcessSMAPInfo(memInfo, procfsDir)[ FD ]
Line_9 $$ for (String proc : processList) -->Line_12 $$ allProcessInfo.put(proc, pInfo)[ FD ]
Line_23 $$ String pID = entry.getKey()-->Line_24 $$ if (!pID.equals("1")) [ FD ]
Line_10 $$ ProcessInfo pInfo = new ProcessInfo(proc)-->Line_11 $$ if (constructProcessInfo(pInfo, procfsDir) != null) [ FD ]
Line_3 $$ if (!pid.equals(deadPid)) -->Line_33 $$ pInfoQueue.addAll(me.getChildren())[ CD ]
Line_55 $$ for (ProcessInfo p : processTree.values()) -->Line_59 $$ processSMAPTree.put(p.getPid(), memInfo)[ FD ]
Line_3 $$ if (!pid.equals(deadPid)) -->Line_50 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_3 $$ if (!pid.equals(deadPid)) -->Line_4 $$ List<String> processList = getProcessList()[ CD ]
Line_3 $$ if (!pid.equals(deadPid)) -->Line_8 $$ ProcessInfo me = null[ CD ]
Line_45 $$ if (oldInfo != null) -->Line_46 $$ procs.getValue().updateAge(oldInfo)[ CD ]
Line_3 $$ if (!pid.equals(deadPid)) -->Line_6 $$ Map<String, ProcessInfo> oldProcs = new HashMap<String, ProcessInfo>(processTree)[ CD ]
Line_10 $$ ProcessInfo pInfo = new ProcessInfo(proc)-->Line_14 $$ me = pInfo[ FD ]
Line_43 $$ if (procs.getValue() != null) -->Line_44 $$ procs.getValue().updateJiffy(oldInfo)[ CD ]
Line_32 $$ LinkedList<ProcessInfo> pInfoQueue = new LinkedList<ProcessInfo>()-->Line_39 $$ pInfoQueue.addAll(pInfo.getChildren())[ FD ]
Line_10 $$ ProcessInfo pInfo = new ProcessInfo(proc)-->Line_26 $$ ProcessInfo parentPInfo = allProcessInfo.get(pInfo.getPpid())[ FD ]
Line_41 $$ for (Map.Entry<String, ProcessInfo> procs : processTree.entrySet()) -->Line_43 $$ if (procs.getValue() != null) [ FD ]
Line_11 $$ if (constructProcessInfo(pInfo, procfsDir) != null) -->Line_12 $$ allProcessInfo.put(proc, pInfo)[ CD ]
Line_2 $$ public void updateProcessTree() -->Line_3 $$ if (!pid.equals(deadPid)) [ CD ]
Line_5 $$ Map<String, ProcessInfo> allProcessInfo = new HashMap<String, ProcessInfo>()-->Line_22 $$ for (Map.Entry<String, ProcessInfo> entry : allProcessInfo.entrySet()) [ FD ]
Line_27 $$ if (parentPInfo != null) -->Line_28 $$ parentPInfo.addChild(pInfo)[ CD ]
Line_14 $$ me = pInfo-->Line_19 $$ if (me == null) [ FD ]
Line_9 $$ for (String proc : processList) -->Line_15 $$ processTree.put(proc, pInfo)[ FD ]
Line_5 $$ Map<String, ProcessInfo> allProcessInfo = new HashMap<String, ProcessInfo>()-->Line_12 $$ allProcessInfo.put(proc, pInfo)[ FD ]
Line_10 $$ ProcessInfo pInfo = new ProcessInfo(proc)-->Line_39 $$ pInfoQueue.addAll(pInfo.getChildren())[ FD ]
Line_32 $$ LinkedList<ProcessInfo> pInfoQueue = new LinkedList<ProcessInfo>()-->Line_33 $$ pInfoQueue.addAll(me.getChildren())[ FD ]
Line_19 $$ if (me == null) -->Line_20 $$ return[ CD ]
Line_32 $$ LinkedList<ProcessInfo> pInfoQueue = new LinkedList<ProcessInfo>()-->Line_34 $$ while (!pInfoQueue.isEmpty()) [ FD ]
Line_6 $$ Map<String, ProcessInfo> oldProcs = new HashMap<String, ProcessInfo>(processTree)-->Line_42 $$ ProcessInfo oldInfo = oldProcs.get(procs.getKey())[ FD ]
Line_41 $$ for (Map.Entry<String, ProcessInfo> procs : processTree.entrySet()) -->Line_46 $$ procs.getValue().updateAge(oldInfo)[ FD ]
Line_35 $$ ProcessInfo pInfo = pInfoQueue.remove()-->Line_37 $$ processTree.put(pInfo.getPid(), pInfo)[ FD ]
Line_9 $$ for (String proc : processList) -->Line_13 $$ if (proc.equals(this.pid)) [ FD ]
Line_10 $$ ProcessInfo pInfo = new ProcessInfo(proc)-->Line_15 $$ processTree.put(proc, pInfo)[ FD ]
Line_3 $$ if (!pid.equals(deadPid)) -->Line_53 $$ if (smapsEnabled) [ CD ]
Line_34 $$ while (!pInfoQueue.isEmpty()) -->Line_39 $$ pInfoQueue.addAll(pInfo.getChildren())[ CD ]
