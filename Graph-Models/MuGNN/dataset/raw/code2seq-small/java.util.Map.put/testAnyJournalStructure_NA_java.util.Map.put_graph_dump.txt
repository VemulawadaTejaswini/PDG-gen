Line_2 $$ public void testAnyJournalStructure() throws Exception -->Line_7 $$ PortletPreferences portletPreferences = getImportedPortletPreferences(preferenceMap)[ CD ]
Line_4 $$ long journalArticleClassNameId = PortalUtil.getClassNameId(JournalArticle.class)-->Line_9 $$ Assert.assertEquals(journalArticleClassNameId, anyAssetType)[ FD ]
Line_7 $$ PortletPreferences portletPreferences = getImportedPortletPreferences(preferenceMap)-->Line_10 $$ String anyClassTypeDLFileEntryAssetRendererFactory = portletPreferences.getValue("anyClassTypeJournalArticleAssetRendererFactory", null)[ FD ]
Line_2 $$ public void testAnyJournalStructure() throws Exception -->Line_11 $$ Assert.assertEquals(anyClassTypeDLFileEntryAssetRendererFactory, String.valueOf(Boolean.TRUE))[ CD ]
Line_2 $$ public void testAnyJournalStructure() throws Exception -->Line_6 $$ preferenceMap.put("anyClassTypeJournalArticleAssetRendererFactory", new String[] [ CD ]
Line_2 $$ public void testAnyJournalStructure() throws Exception -->Line_4 $$ long journalArticleClassNameId = PortalUtil.getClassNameId(JournalArticle.class)[ CD ]
Line_8 $$ long anyAssetType = GetterUtil.getLong(portletPreferences.getValue("anyAssetType", null))-->Line_9 $$ Assert.assertEquals(journalArticleClassNameId, anyAssetType)[ FD ]
Line_2 $$ public void testAnyJournalStructure() throws Exception -->Line_3 $$ Map<String, String[]> preferenceMap = new HashMap()[ CD ]
Line_2 $$ public void testAnyJournalStructure() throws Exception -->Line_10 $$ String anyClassTypeDLFileEntryAssetRendererFactory = portletPreferences.getValue("anyClassTypeJournalArticleAssetRendererFactory", null)[ CD ]
Line_3 $$ Map<String, String[]> preferenceMap = new HashMap()-->Line_6 $$ preferenceMap.put("anyClassTypeJournalArticleAssetRendererFactory", new String[] [ FD ]
Line_2 $$ public void testAnyJournalStructure() throws Exception -->Line_5 $$ preferenceMap.put("anyAssetType", new String[] [ CD ]
Line_2 $$ public void testAnyJournalStructure() throws Exception -->Line_8 $$ long anyAssetType = GetterUtil.getLong(portletPreferences.getValue("anyAssetType", null))[ CD ]
Line_7 $$ PortletPreferences portletPreferences = getImportedPortletPreferences(preferenceMap)-->Line_8 $$ long anyAssetType = GetterUtil.getLong(portletPreferences.getValue("anyAssetType", null))[ FD ]
Line_10 $$ String anyClassTypeDLFileEntryAssetRendererFactory = portletPreferences.getValue("anyClassTypeJournalArticleAssetRendererFactory", null)-->Line_11 $$ Assert.assertEquals(anyClassTypeDLFileEntryAssetRendererFactory, String.valueOf(Boolean.TRUE))[ FD ]
Line_4 $$ long journalArticleClassNameId = PortalUtil.getClassNameId(JournalArticle.class)-->Line_5 $$ preferenceMap.put("anyAssetType", new String[] [ FD ]
Line_2 $$ public void testAnyJournalStructure() throws Exception -->Line_9 $$ Assert.assertEquals(journalArticleClassNameId, anyAssetType)[ CD ]
Line_3 $$ Map<String, String[]> preferenceMap = new HashMap()-->Line_5 $$ preferenceMap.put("anyAssetType", new String[] [ FD ]
Line_3 $$ Map<String, String[]> preferenceMap = new HashMap()-->Line_7 $$ PortletPreferences portletPreferences = getImportedPortletPreferences(preferenceMap)[ FD ]
