Line_8 $$ SimpMessageHeaderAccessor headerAccessor = MessageHeaderAccessor.getAccessor(messages.get(0), SimpMessageHeaderAccessor.class)-->Line_9 $$ assertNotNull(headerAccessor)[ FD ]
Line_2 $$ public void convertAndSendWithCustomHeaderNonNative() -->Line_8 $$ SimpMessageHeaderAccessor headerAccessor = MessageHeaderAccessor.getAccessor(messages.get(0), SimpMessageHeaderAccessor.class)[ CD ]
Line_8 $$ SimpMessageHeaderAccessor headerAccessor = MessageHeaderAccessor.getAccessor(messages.get(0), SimpMessageHeaderAccessor.class)-->Line_10 $$ assertEquals("value", headerAccessor.toMap().get("key"))[ FD ]
Line_8 $$ SimpMessageHeaderAccessor headerAccessor = MessageHeaderAccessor.getAccessor(messages.get(0), SimpMessageHeaderAccessor.class)-->Line_11 $$ assertNull(headerAccessor.getNativeHeader("key"))[ FD ]
Line_2 $$ public void convertAndSendWithCustomHeaderNonNative() -->Line_10 $$ assertEquals("value", headerAccessor.toMap().get("key"))[ CD ]
Line_3 $$ Map<String, Object> headers = new HashMap()-->Line_5 $$ headers.put(NativeMessageHeaderAccessor.NATIVE_HEADERS, new LinkedMultiValueMap<String, String>())[ FD ]
Line_2 $$ public void convertAndSendWithCustomHeaderNonNative() -->Line_4 $$ headers.put("key", "value")[ CD ]
Line_2 $$ public void convertAndSendWithCustomHeaderNonNative() -->Line_9 $$ assertNotNull(headerAccessor)[ CD ]
Line_3 $$ Map<String, Object> headers = new HashMap()-->Line_4 $$ headers.put("key", "value")[ FD ]
Line_7 $$ List<Message<byte[]>> messages = this.messageChannel.getMessages()-->Line_8 $$ SimpMessageHeaderAccessor headerAccessor = MessageHeaderAccessor.getAccessor(messages.get(0), SimpMessageHeaderAccessor.class)[ FD ]
Line_3 $$ Map<String, Object> headers = new HashMap()-->Line_6 $$ this.messagingTemplate.convertAndSend("/foo", "data", headers)[ FD ]
Line_2 $$ public void convertAndSendWithCustomHeaderNonNative() -->Line_3 $$ Map<String, Object> headers = new HashMap()[ CD ]
Line_2 $$ public void convertAndSendWithCustomHeaderNonNative() -->Line_11 $$ assertNull(headerAccessor.getNativeHeader("key"))[ CD ]
Line_2 $$ public void convertAndSendWithCustomHeaderNonNative() -->Line_6 $$ this.messagingTemplate.convertAndSend("/foo", "data", headers)[ CD ]
Line_2 $$ public void convertAndSendWithCustomHeaderNonNative() -->Line_7 $$ List<Message<byte[]>> messages = this.messageChannel.getMessages()[ CD ]
Line_2 $$ public void convertAndSendWithCustomHeaderNonNative() -->Line_5 $$ headers.put(NativeMessageHeaderAccessor.NATIVE_HEADERS, new LinkedMultiValueMap<String, String>())[ CD ]
