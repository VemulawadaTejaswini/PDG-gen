Line_8 $$ List<Log<T>> onTime = writes.get(time)-->Line_12 $$ onTime.add(log)[ FD ]
Line_2 $$ private <T> NavigableMap<Integer, List<Log<T>>> getWritesAtTime(List<Log<T>> list) -->Line_15 $$ return writes[ CD ]
Line_10 $$ writes.put(time, onTime = new ArrayList())-->Line_12 $$ onTime.add(log)[ FD ]
Line_7 $$ for (int time = log.before; time <= log.after; ++time) -->Line_8 $$ List<Log<T>> onTime = writes.get(time)[ CD ]
Line_2 $$ private <T> NavigableMap<Integer, List<Log<T>>> getWritesAtTime(List<Log<T>> list) -->Line_3 $$ NavigableMap<Integer, List<Log<T>>> writes = new TreeMap()[ CD ]
Line_9 $$ if (onTime == null) -->Line_10 $$ writes.put(time, onTime = new ArrayList())[ CD ]
Line_4 $$ for (Log log : list) -->Line_12 $$ onTime.add(log)[ FD ]
Line_7 $$ for (int time = log.before; time <= log.after; ++time) -->Line_9 $$ if (onTime == null) [ CD ]
Line_3 $$ NavigableMap<Integer, List<Log<T>>> writes = new TreeMap()-->Line_8 $$ List<Log<T>> onTime = writes.get(time)[ FD ]
Line_3 $$ NavigableMap<Integer, List<Log<T>>> writes = new TreeMap()-->Line_10 $$ writes.put(time, onTime = new ArrayList())[ FD ]
Line_10 $$ writes.put(time, onTime = new ArrayList())-->Line_9 $$ if (onTime == null) [ FD ]
Line_8 $$ List<Log<T>> onTime = writes.get(time)-->Line_9 $$ if (onTime == null) [ FD ]
Line_8 $$ List<Log<T>> onTime = writes.get(time)-->Line_10 $$ writes.put(time, onTime = new ArrayList())[ FD ]
Line_7 $$ for (int time = log.before; time <= log.after; ++time) -->Line_8 $$ List<Log<T>> onTime = writes.get(time)[ FD ]
Line_7 $$ for (int time = log.before; time <= log.after; ++time) -->Line_12 $$ onTime.add(log)[ CD ]
Line_7 $$ for (int time = log.before; time <= log.after; ++time) -->Line_10 $$ writes.put(time, onTime = new ArrayList())[ FD ]
