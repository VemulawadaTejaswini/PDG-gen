Line_8 $$ WebSocketSession clientSession = sockJsClient.doHandshake(clientHandler, this.baseUrl + "/echo").get()-->Line_13 $$ clientSession.close()[ FD ]
Line_2 $$ public void fallbackAfterConnectTimeout() throws Exception -->Line_12 $$ clientHandler.awaitMessage(message, 5000)[ CD ]
Line_2 $$ public void fallbackAfterConnectTimeout() throws Exception -->Line_11 $$ clientSession.sendMessage(message)[ CD ]
Line_2 $$ public void fallbackAfterConnectTimeout() throws Exception -->Line_4 $$ this.testFilter.sleepDelayMap.put("/xhr_streaming", 10000L)[ CD ]
Line_10 $$ TextMessage message = new TextMessage("message1")-->Line_11 $$ clientSession.sendMessage(message)[ FD ]
Line_3 $$ TestClientHandler clientHandler = new TestClientHandler()-->Line_8 $$ WebSocketSession clientSession = sockJsClient.doHandshake(clientHandler, this.baseUrl + "/echo").get()[ FD ]
Line_8 $$ WebSocketSession clientSession = sockJsClient.doHandshake(clientHandler, this.baseUrl + "/echo").get()-->Line_9 $$ assertEquals("Fallback didn't occur", XhrClientSockJsSession.class, clientSession.getClass())[ FD ]
Line_3 $$ TestClientHandler clientHandler = new TestClientHandler()-->Line_12 $$ clientHandler.awaitMessage(message, 5000)[ FD ]
Line_2 $$ public void fallbackAfterConnectTimeout() throws Exception -->Line_13 $$ clientSession.close()[ CD ]
Line_2 $$ public void fallbackAfterConnectTimeout() throws Exception -->Line_5 $$ this.testFilter.sendErrorMap.put("/xhr_streaming", 503)[ CD ]
Line_2 $$ public void fallbackAfterConnectTimeout() throws Exception -->Line_10 $$ TextMessage message = new TextMessage("message1")[ CD ]
Line_2 $$ public void fallbackAfterConnectTimeout() throws Exception -->Line_6 $$ initSockJsClient(createXhrTransport())[ CD ]
Line_2 $$ public void fallbackAfterConnectTimeout() throws Exception -->Line_7 $$ this.sockJsClient.setConnectTimeoutScheduler(this.wac.getBean(ThreadPoolTaskScheduler.class))[ CD ]
Line_2 $$ public void fallbackAfterConnectTimeout() throws Exception -->Line_8 $$ WebSocketSession clientSession = sockJsClient.doHandshake(clientHandler, this.baseUrl + "/echo").get()[ CD ]
Line_2 $$ public void fallbackAfterConnectTimeout() throws Exception -->Line_9 $$ assertEquals("Fallback didn't occur", XhrClientSockJsSession.class, clientSession.getClass())[ CD ]
Line_8 $$ WebSocketSession clientSession = sockJsClient.doHandshake(clientHandler, this.baseUrl + "/echo").get()-->Line_11 $$ clientSession.sendMessage(message)[ FD ]
Line_2 $$ public void fallbackAfterConnectTimeout() throws Exception -->Line_3 $$ TestClientHandler clientHandler = new TestClientHandler()[ CD ]
Line_10 $$ TextMessage message = new TextMessage("message1")-->Line_12 $$ clientHandler.awaitMessage(message, 5000)[ FD ]
