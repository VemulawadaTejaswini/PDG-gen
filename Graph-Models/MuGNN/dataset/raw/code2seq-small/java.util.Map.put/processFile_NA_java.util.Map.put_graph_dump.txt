Line_38 $$ if (importStatement.isOnDemand()) -->Line_39 $$ if (importStatement.isStatic()) [ CD ]
Line_44 $$ final String classQName = clazz.getQualifiedName()-->Line_45 $$ if (classQName != null) [ FD ]
Line_28 $$ if (context instanceof GrImportStatement) -->Line_84 $$ if (context == null && !(refElement.getParent() instanceof GrImportStatement) && refElement.getQualifier() == null) [ CD ]
Line_3 $$ if (!(file instanceof GroovyFile))-->Line_4 $$ return[ CD ]
Line_23 $$ for (GroovyResolveResult resolveResult : resolveResults) -->Line_25 $$ final PsiElement resolved = resolveResult.getElement()[ FD ]
Line_59 $$ importedName = PsiUtil.getQualifiedReferenceText(importReference)-->Line_77 $$ importedClasses.add(importedName)[ FD ]
Line_152 $$ ((GroovyFile) file).acceptChildren(new GroovyElementVisitor() -->Line_155 $$ if (!StringUtil.isEmptyOrSpaces(annotationText)) [ CD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_6 $$ file.accept(new PsiRecursiveElementWalkingVisitor() [ FD ]
Line_138 $$ if (staticallyImportedMembers != null) -->Line_139 $$ staticallyImportedMembers.add(symbolName)[ CD ]
Line_90 $$ final String qname = getTargetQualifiedName(element)-->Line_91 $$ if (qname != null) [ FD ]
Line_6 $$ file.accept(new PsiRecursiveElementWalkingVisitor() -->Line_101 $$ if (GroovyImportHelper.isImplicitlyImported(resolved, refElement.getReferenceName(), (GroovyFile) file)) [ FD ]
Line_90 $$ final String qname = getTargetQualifiedName(element)-->Line_93 $$ implicitlyImported.add(qname)[ FD ]
Line_142 $$ if (importedClasses != null) -->Line_143 $$ importedClasses.add(symbolName)[ CD ]
Line_28 $$ if (context instanceof GrImportStatement) -->Line_33 $$ if (GroovyImportHelper.isImplicitlyImported(resolved, refName, (GroovyFile) file)) [ CD ]
Line_64 $$ final String importRef = getImportReferenceText(importStatement)-->Line_157 $$ annotations.put(importRef, annotationText)[ FD ]
Line_29 $$ final GrImportStatement importStatement = (GrImportStatement) context-->Line_39 $$ if (importStatement.isStatic()) [ FD ]
Line_14 $$ final String refName = refElement.getReferenceName()-->Line_33 $$ if (GroovyImportHelper.isImplicitlyImported(resolved, refName, (GroovyFile) file)) [ FD ]
Line_14 $$ final String refName = refElement.getReferenceName()-->Line_20 $$ unresolvedReferenceNames.add(refName)[ FD ]
Line_91 $$ if (qname != null) -->Line_92 $$ if (implicitlyImported != null) [ CD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_92 $$ if (implicitlyImported != null) [ FD ]
Line_36 $$ if (!importStatement.isAliasedImport() && !isAnnotatedImport(importStatement)) -->Line_65 $$ if (importStatement.isAliasedImport()) [ CD ]
Line_37 $$ String importedName = null-->Line_80 $$ innerClasses.add(importedName)[ FD ]
Line_36 $$ if (!importStatement.isAliasedImport() && !isAnnotatedImport(importStatement)) -->Line_37 $$ String importedName = null[ CD ]
Line_102 $$ final ClassResolverProcessor processor = new ClassResolverProcessor(refElement.getReferenceName(), refElement, ClassHint.RESOLVE_KINDS_CLASS)-->Line_103 $$ GroovyImportHelper.processImports(ResolveState.initial(), null, refElement, processor, ((GroovyFile) file).getImportStatements(), true)[ FD ]
Line_6 $$ file.accept(new PsiRecursiveElementWalkingVisitor() -->Line_15 $$ if ("super".equals(refName))[ CD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_31 $$ usedImports.add(importStatement)[ FD ]
Line_5 $$ final Set<String> unresolvedReferenceNames = ContainerUtil.newLinkedHashSet()-->Line_20 $$ unresolvedReferenceNames.add(refName)[ FD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_67 $$ aliased.put(importRef, importedName)[ FD ]
Line_118 $$ if (anImport.isOnDemand()) -->Line_126 $$ String importedName = anImport.getImportedName()[ CD ]
Line_6 $$ file.accept(new PsiRecursiveElementWalkingVisitor() -->Line_30 $$ if (usedImports != null && isImportUsed(refElement, resolved)) [ FD ]
Line_29 $$ final GrImportStatement importStatement = (GrImportStatement) context-->Line_36 $$ if (!importStatement.isAliasedImport() && !isAnnotatedImport(importStatement)) [ FD ]
Line_137 $$ if (anImport.isStatic()) -->Line_142 $$ if (importedClasses != null) [ CD ]
Line_37 $$ String importedName = null-->Line_59 $$ importedName = PsiUtil.getQualifiedReferenceText(importReference)[ FD ]
Line_59 $$ importedName = PsiUtil.getQualifiedReferenceText(importReference)-->Line_67 $$ aliased.put(importRef, importedName)[ FD ]
Line_39 $$ if (importStatement.isStatic()) -->Line_54 $$ importedName = getTargetQualifiedName(resolved)[ CD ]
Line_6 $$ file.accept(new PsiRecursiveElementWalkingVisitor() -->Line_101 $$ if (GroovyImportHelper.isImplicitlyImported(resolved, refElement.getReferenceName(), (GroovyFile) file)) [ CD ]
Line_5 $$ final Set<String> unresolvedReferenceNames = ContainerUtil.newLinkedHashSet()-->Line_127 $$ if (importedName != null && unresolvedReferenceNames.contains(importedName)) [ FD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_123 $$ unresolvedOnDemandImports.add(anImport)[ FD ]
Line_48 $$ importedName = classQName + "." + name-->Line_73 $$ staticallyImportedMembers.add(importedName)[ FD ]
Line_29 $$ final GrImportStatement importStatement = (GrImportStatement) context-->Line_154 $$ final String annotationText = importStatement.getAnnotationList().getText()[ FD ]
Line_64 $$ final String importRef = getImportReferenceText(importStatement)-->Line_67 $$ aliased.put(importRef, importedName)[ FD ]
Line_47 $$ if (name != null) -->Line_48 $$ importedName = classQName + "." + name[ CD ]
Line_37 $$ String importedName = null-->Line_134 $$ aliased.put(symbolName, importedName)[ FD ]
Line_92 $$ if (implicitlyImported != null) -->Line_93 $$ implicitlyImported.add(qname)[ CD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_80 $$ innerClasses.add(importedName)[ FD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_133 $$ if (aliased != null) [ FD ]
Line_30 $$ if (usedImports != null && isImportUsed(refElement, resolved)) -->Line_31 $$ usedImports.add(importStatement)[ CD ]
Line_79 $$ if (resolved instanceof PsiClass && ((PsiClass) resolved).getContainingClass() != null && innerClasses != null) -->Line_80 $$ innerClasses.add(importedName)[ CD ]
Line_54 $$ importedName = getTargetQualifiedName(resolved)-->Line_80 $$ innerClasses.add(importedName)[ FD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_119 $$ if (usedImports != null) [ FD ]
Line_137 $$ if (anImport.isStatic()) -->Line_138 $$ if (staticallyImportedMembers != null) [ CD ]
Line_37 $$ String importedName = null-->Line_73 $$ staticallyImportedMembers.add(importedName)[ FD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_96 $$ importedClasses.add(qname)[ FD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_73 $$ staticallyImportedMembers.add(importedName)[ FD ]
Line_48 $$ importedName = classQName + "." + name-->Line_59 $$ importedName = PsiUtil.getQualifiedReferenceText(importReference)[ FD ]
Line_29 $$ final GrImportStatement importStatement = (GrImportStatement) context-->Line_31 $$ usedImports.add(importStatement)[ FD ]
Line_6 $$ file.accept(new PsiRecursiveElementWalkingVisitor() -->Line_17 $$ final GroovyResolveResult[] resolveResults = refElement.multiResolve(false)[ CD ]
Line_25 $$ final PsiElement resolved = resolveResult.getElement()-->Line_101 $$ if (GroovyImportHelper.isImplicitlyImported(resolved, refElement.getReferenceName(), (GroovyFile) file)) [ FD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_6 $$ file.accept(new PsiRecursiveElementWalkingVisitor() [ CD ]
Line_37 $$ String importedName = null-->Line_77 $$ importedClasses.add(importedName)[ FD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_142 $$ if (importedClasses != null) [ FD ]
Line_155 $$ if (!StringUtil.isEmptyOrSpaces(annotationText)) -->Line_157 $$ annotations.put(importRef, annotationText)[ CD ]
Line_133 $$ if (aliased != null) -->Line_134 $$ aliased.put(symbolName, importedName)[ CD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_138 $$ if (staticallyImportedMembers != null) [ FD ]
Line_71 $$ if (importStatement.isStatic()) -->Line_72 $$ if (staticallyImportedMembers != null) [ CD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_5 $$ final Set<String> unresolvedReferenceNames = ContainerUtil.newLinkedHashSet()[ CD ]
Line_25 $$ final PsiElement resolved = resolveResult.getElement()-->Line_85 $$ addImplicitClass(resolved)[ FD ]
Line_25 $$ final PsiElement resolved = resolveResult.getElement()-->Line_34 $$ addImplicitClass(resolved)[ FD ]
Line_127 $$ if (importedName != null && unresolvedReferenceNames.contains(importedName)) -->Line_128 $$ if (usedImports != null) [ CD ]
Line_118 $$ if (anImport.isOnDemand()) -->Line_122 $$ if (unresolvedOnDemandImports != null) [ CD ]
Line_6 $$ file.accept(new PsiRecursiveElementWalkingVisitor() -->Line_90 $$ final String qname = getTargetQualifiedName(element)[ FD ]
Line_48 $$ importedName = classQName + "." + name-->Line_134 $$ aliased.put(symbolName, importedName)[ FD ]
Line_59 $$ importedName = PsiUtil.getQualifiedReferenceText(importReference)-->Line_134 $$ aliased.put(symbolName, importedName)[ FD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_3 $$ if (!(file instanceof GroovyFile))[ CD ]
Line_54 $$ importedName = getTargetQualifiedName(resolved)-->Line_77 $$ importedClasses.add(importedName)[ FD ]
Line_25 $$ final PsiElement resolved = resolveResult.getElement()-->Line_26 $$ if (resolved == null)[ FD ]
Line_6 $$ file.accept(new PsiRecursiveElementWalkingVisitor() -->Line_102 $$ final ClassResolverProcessor processor = new ClassResolverProcessor(refElement.getReferenceName(), refElement, ClassHint.RESOLVE_KINDS_CLASS)[ FD ]
Line_6 $$ file.accept(new PsiRecursiveElementWalkingVisitor() -->Line_19 $$ if (PsiTreeUtil.getParentOfType(refElement, GrImportStatement.class) == null) [ FD ]
Line_28 $$ if (context instanceof GrImportStatement) -->Line_29 $$ final GrImportStatement importStatement = (GrImportStatement) context[ CD ]
Line_71 $$ if (importStatement.isStatic()) -->Line_79 $$ if (resolved instanceof PsiClass && ((PsiClass) resolved).getContainingClass() != null && innerClasses != null) [ CD ]
Line_132 $$ if (anImport.isAliasedImport()) -->Line_133 $$ if (aliased != null) [ CD ]
Line_59 $$ importedName = PsiUtil.getQualifiedReferenceText(importReference)-->Line_127 $$ if (importedName != null && unresolvedReferenceNames.contains(importedName)) [ FD ]
Line_40 $$ if (resolved instanceof PsiMember) -->Line_43 $$ if (clazz != null) [ CD ]
Line_54 $$ importedName = getTargetQualifiedName(resolved)-->Line_62 $$ if (importedName == null)[ FD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_129 $$ usedImports.add(anImport)[ FD ]
Line_37 $$ String importedName = null-->Line_48 $$ importedName = classQName + "." + name[ FD ]
Line_18 $$ if (resolveResults.length == 0 && refName != null) -->Line_19 $$ if (PsiTreeUtil.getParentOfType(refElement, GrImportStatement.class) == null) [ CD ]
Line_28 $$ if (context instanceof GrImportStatement) -->Line_30 $$ if (usedImports != null && isImportUsed(refElement, resolved)) [ CD ]
Line_43 $$ if (clazz != null) -->Line_44 $$ final String classQName = clazz.getQualifiedName()[ CD ]
Line_71 $$ if (importStatement.isStatic()) -->Line_76 $$ if (importedClasses != null) [ CD ]
Line_127 $$ if (importedName != null && unresolvedReferenceNames.contains(importedName)) -->Line_131 $$ final String symbolName = getImportReferenceText(anImport)[ CD ]
Line_58 $$ if (importReference != null) -->Line_59 $$ importedName = PsiUtil.getQualifiedReferenceText(importReference)[ CD ]
Line_132 $$ if (anImport.isAliasedImport()) -->Line_137 $$ if (anImport.isStatic()) [ CD ]
Line_46 $$ final String name = member.getName()-->Line_48 $$ importedName = classQName + "." + name[ FD ]
Line_24 $$ final PsiElement context = resolveResult.getCurrentFileResolveContext()-->Line_28 $$ if (context instanceof GrImportStatement) [ FD ]
Line_37 $$ String importedName = null-->Line_67 $$ aliased.put(importRef, importedName)[ FD ]
Line_15 $$ if ("super".equals(refName))-->Line_16 $$ return[ CD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_128 $$ if (usedImports != null) [ FD ]
Line_6 $$ file.accept(new PsiRecursiveElementWalkingVisitor() -->Line_14 $$ final String refName = refElement.getReferenceName()[ CD ]
Line_154 $$ final String annotationText = importStatement.getAnnotationList().getText()-->Line_157 $$ annotations.put(importRef, annotationText)[ FD ]
Line_6 $$ file.accept(new PsiRecursiveElementWalkingVisitor() -->Line_9 $$ if (element instanceof GrReferenceElement) [ FD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_95 $$ if (importedClasses != null) [ FD ]
Line_90 $$ final String qname = getTargetQualifiedName(element)-->Line_96 $$ importedClasses.add(qname)[ FD ]
Line_54 $$ importedName = getTargetQualifiedName(resolved)-->Line_67 $$ aliased.put(importRef, importedName)[ FD ]
Line_101 $$ if (GroovyImportHelper.isImplicitlyImported(resolved, refElement.getReferenceName(), (GroovyFile) file)) -->Line_104 $$ if (!processor.hasCandidates()) [ CD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_151 $$ if (annotations != null) [ CD ]
Line_6 $$ file.accept(new PsiRecursiveElementWalkingVisitor() -->Line_18 $$ if (resolveResults.length == 0 && refName != null) [ CD ]
Line_76 $$ if (importedClasses != null) -->Line_77 $$ importedClasses.add(importedName)[ CD ]
Line_48 $$ importedName = classQName + "." + name-->Line_67 $$ aliased.put(importRef, importedName)[ FD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_122 $$ if (unresolvedOnDemandImports != null) [ FD ]
Line_29 $$ final GrImportStatement importStatement = (GrImportStatement) context-->Line_71 $$ if (importStatement.isStatic()) [ FD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_157 $$ annotations.put(importRef, annotationText)[ FD ]
Line_45 $$ if (classQName != null) -->Line_46 $$ final String name = member.getName()[ CD ]
Line_38 $$ if (importStatement.isOnDemand()) -->Line_58 $$ if (importReference != null) [ CD ]
Line_37 $$ String importedName = null-->Line_127 $$ if (importedName != null && unresolvedReferenceNames.contains(importedName)) [ FD ]
Line_152 $$ ((GroovyFile) file).acceptChildren(new GroovyElementVisitor() -->Line_156 $$ final String importRef = getImportReferenceText(importStatement)[ FD ]
Line_66 $$ if (aliased != null) -->Line_67 $$ aliased.put(importRef, importedName)[ CD ]
Line_95 $$ if (importedClasses != null) -->Line_96 $$ importedClasses.add(qname)[ CD ]
Line_46 $$ final String name = member.getName()-->Line_47 $$ if (name != null) [ FD ]
Line_65 $$ if (importStatement.isAliasedImport()) -->Line_66 $$ if (aliased != null) [ CD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_76 $$ if (importedClasses != null) [ FD ]
Line_151 $$ if (annotations != null) -->Line_152 $$ ((GroovyFile) file).acceptChildren(new GroovyElementVisitor() [ CD ]
Line_156 $$ final String importRef = getImportReferenceText(importStatement)-->Line_157 $$ annotations.put(importRef, annotationText)[ FD ]
Line_26 $$ if (resolved == null)-->Line_27 $$ return[ CD ]
Line_9 $$ if (element instanceof GrReferenceElement) -->Line_10 $$ visitRefElement((GrReferenceElement) element)[ CD ]
Line_29 $$ final GrImportStatement importStatement = (GrImportStatement) context-->Line_38 $$ if (importStatement.isOnDemand()) [ FD ]
Line_29 $$ final GrImportStatement importStatement = (GrImportStatement) context-->Line_57 $$ final GrCodeReferenceElement importReference = importStatement.getImportReference()[ FD ]
Line_59 $$ importedName = PsiUtil.getQualifiedReferenceText(importReference)-->Line_80 $$ innerClasses.add(importedName)[ FD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_134 $$ aliased.put(symbolName, importedName)[ FD ]
Line_25 $$ final PsiElement resolved = resolveResult.getElement()-->Line_33 $$ if (GroovyImportHelper.isImplicitlyImported(resolved, refName, (GroovyFile) file)) [ FD ]
Line_91 $$ if (qname != null) -->Line_95 $$ if (importedClasses != null) [ CD ]
Line_104 $$ if (!processor.hasCandidates()) -->Line_105 $$ return false[ CD ]
Line_42 $$ final PsiClass clazz = member.getContainingClass()-->Line_43 $$ if (clazz != null) [ FD ]
Line_48 $$ importedName = classQName + "." + name-->Line_80 $$ innerClasses.add(importedName)[ FD ]
Line_102 $$ final ClassResolverProcessor processor = new ClassResolverProcessor(refElement.getReferenceName(), refElement, ClassHint.RESOLVE_KINDS_CLASS)-->Line_104 $$ if (!processor.hasCandidates()) [ FD ]
Line_101 $$ if (GroovyImportHelper.isImplicitlyImported(resolved, refElement.getReferenceName(), (GroovyFile) file)) -->Line_103 $$ GroovyImportHelper.processImports(ResolveState.initial(), null, refElement, processor, ((GroovyFile) file).getImportStatements(), true)[ CD ]
Line_43 $$ if (clazz != null) -->Line_45 $$ if (classQName != null) [ CD ]
Line_101 $$ if (GroovyImportHelper.isImplicitlyImported(resolved, refElement.getReferenceName(), (GroovyFile) file)) -->Line_102 $$ final ClassResolverProcessor processor = new ClassResolverProcessor(refElement.getReferenceName(), refElement, ClassHint.RESOLVE_KINDS_CLASS)[ CD ]
Line_28 $$ if (context instanceof GrImportStatement) -->Line_36 $$ if (!importStatement.isAliasedImport() && !isAnnotatedImport(importStatement)) [ CD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_120 $$ usedImports.add(anImport)[ FD ]
Line_37 $$ String importedName = null-->Line_62 $$ if (importedName == null)[ FD ]
Line_54 $$ importedName = getTargetQualifiedName(resolved)-->Line_73 $$ staticallyImportedMembers.add(importedName)[ FD ]
Line_25 $$ final PsiElement resolved = resolveResult.getElement()-->Line_30 $$ if (usedImports != null && isImportUsed(refElement, resolved)) [ FD ]
Line_6 $$ file.accept(new PsiRecursiveElementWalkingVisitor() -->Line_91 $$ if (qname != null) [ CD ]
Line_118 $$ if (anImport.isOnDemand()) -->Line_119 $$ if (usedImports != null) [ CD ]
Line_48 $$ importedName = classQName + "." + name-->Line_62 $$ if (importedName == null)[ FD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_113 $$ if (usedImports != null && usedImports.contains(anImport))[ FD ]
Line_42 $$ final PsiClass clazz = member.getContainingClass()-->Line_44 $$ final String classQName = clazz.getQualifiedName()[ FD ]
Line_48 $$ importedName = classQName + "." + name-->Line_54 $$ importedName = getTargetQualifiedName(resolved)[ FD ]
Line_6 $$ file.accept(new PsiRecursiveElementWalkingVisitor() -->Line_9 $$ if (element instanceof GrReferenceElement) [ CD ]
Line_25 $$ final PsiElement resolved = resolveResult.getElement()-->Line_54 $$ importedName = getTargetQualifiedName(resolved)[ FD ]
Line_23 $$ for (GroovyResolveResult resolveResult : resolveResults) -->Line_24 $$ final PsiElement context = resolveResult.getCurrentFileResolveContext()[ FD ]
Line_155 $$ if (!StringUtil.isEmptyOrSpaces(annotationText)) -->Line_156 $$ final String importRef = getImportReferenceText(importStatement)[ CD ]
Line_6 $$ file.accept(new PsiRecursiveElementWalkingVisitor() -->Line_17 $$ final GroovyResolveResult[] resolveResults = refElement.multiResolve(false)[ FD ]
Line_48 $$ importedName = classQName + "." + name-->Line_127 $$ if (importedName != null && unresolvedReferenceNames.contains(importedName)) [ FD ]
Line_6 $$ file.accept(new PsiRecursiveElementWalkingVisitor() -->Line_14 $$ final String refName = refElement.getReferenceName()[ FD ]
Line_38 $$ if (importStatement.isOnDemand()) -->Line_57 $$ final GrCodeReferenceElement importReference = importStatement.getImportReference()[ CD ]
Line_41 $$ final PsiMember member = (PsiMember) resolved-->Line_42 $$ final PsiClass clazz = member.getContainingClass()[ FD ]
Line_57 $$ final GrCodeReferenceElement importReference = importStatement.getImportReference()-->Line_58 $$ if (importReference != null) [ FD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_143 $$ importedClasses.add(symbolName)[ FD ]
Line_29 $$ final GrImportStatement importStatement = (GrImportStatement) context-->Line_156 $$ final String importRef = getImportReferenceText(importStatement)[ FD ]
Line_19 $$ if (PsiTreeUtil.getParentOfType(refElement, GrImportStatement.class) == null) -->Line_20 $$ unresolvedReferenceNames.add(refName)[ CD ]
Line_128 $$ if (usedImports != null) -->Line_129 $$ usedImports.add(anImport)[ CD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_77 $$ importedClasses.add(importedName)[ FD ]
Line_36 $$ if (!importStatement.isAliasedImport() && !isAnnotatedImport(importStatement)) -->Line_38 $$ if (importStatement.isOnDemand()) [ CD ]
Line_29 $$ final GrImportStatement importStatement = (GrImportStatement) context-->Line_64 $$ final String importRef = getImportReferenceText(importStatement)[ FD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_72 $$ if (staticallyImportedMembers != null) [ FD ]
Line_57 $$ final GrCodeReferenceElement importReference = importStatement.getImportReference()-->Line_59 $$ importedName = PsiUtil.getQualifiedReferenceText(importReference)[ FD ]
Line_14 $$ final String refName = refElement.getReferenceName()-->Line_15 $$ if ("super".equals(refName))[ FD ]
Line_37 $$ String importedName = null-->Line_54 $$ importedName = getTargetQualifiedName(resolved)[ FD ]
Line_152 $$ ((GroovyFile) file).acceptChildren(new GroovyElementVisitor() -->Line_154 $$ final String annotationText = importStatement.getAnnotationList().getText()[ FD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_66 $$ if (aliased != null) [ FD ]
Line_6 $$ file.accept(new PsiRecursiveElementWalkingVisitor() -->Line_90 $$ final String qname = getTargetQualifiedName(element)[ CD ]
Line_54 $$ importedName = getTargetQualifiedName(resolved)-->Line_127 $$ if (importedName != null && unresolvedReferenceNames.contains(importedName)) [ FD ]
Line_48 $$ importedName = classQName + "." + name-->Line_77 $$ importedClasses.add(importedName)[ FD ]
Line_6 $$ file.accept(new PsiRecursiveElementWalkingVisitor() -->Line_8 $$ super.visitElement(element)[ FD ]
Line_40 $$ if (resolved instanceof PsiMember) -->Line_41 $$ final PsiMember member = (PsiMember) resolved[ CD ]
Line_152 $$ ((GroovyFile) file).acceptChildren(new GroovyElementVisitor() -->Line_154 $$ final String annotationText = importStatement.getAnnotationList().getText()[ CD ]
Line_119 $$ if (usedImports != null) -->Line_120 $$ usedImports.add(anImport)[ CD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_151 $$ if (annotations != null) [ FD ]
Line_29 $$ final GrImportStatement importStatement = (GrImportStatement) context-->Line_65 $$ if (importStatement.isAliasedImport()) [ FD ]
Line_59 $$ importedName = PsiUtil.getQualifiedReferenceText(importReference)-->Line_73 $$ staticallyImportedMembers.add(importedName)[ FD ]
Line_117 $$ if (ref.resolve() == null) -->Line_118 $$ if (anImport.isOnDemand()) [ CD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_93 $$ implicitlyImported.add(qname)[ FD ]
Line_54 $$ importedName = getTargetQualifiedName(resolved)-->Line_134 $$ aliased.put(symbolName, importedName)[ FD ]
Line_36 $$ if (!importStatement.isAliasedImport() && !isAnnotatedImport(importStatement)) -->Line_64 $$ final String importRef = getImportReferenceText(importStatement)[ CD ]
Line_62 $$ if (importedName == null)-->Line_63 $$ return[ CD ]
Line_39 $$ if (importStatement.isStatic()) -->Line_40 $$ if (resolved instanceof PsiMember) [ CD ]
Line_41 $$ final PsiMember member = (PsiMember) resolved-->Line_46 $$ final String name = member.getName()[ FD ]
Line_72 $$ if (staticallyImportedMembers != null) -->Line_73 $$ staticallyImportedMembers.add(importedName)[ CD ]
Line_6 $$ file.accept(new PsiRecursiveElementWalkingVisitor() -->Line_103 $$ GroovyImportHelper.processImports(ResolveState.initial(), null, refElement, processor, ((GroovyFile) file).getImportStatements(), true)[ FD ]
Line_59 $$ importedName = PsiUtil.getQualifiedReferenceText(importReference)-->Line_62 $$ if (importedName == null)[ FD ]
Line_6 $$ file.accept(new PsiRecursiveElementWalkingVisitor() -->Line_8 $$ super.visitElement(element)[ CD ]
Line_65 $$ if (importStatement.isAliasedImport()) -->Line_69 $$ return[ CD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_139 $$ staticallyImportedMembers.add(symbolName)[ FD ]
Line_36 $$ if (!importStatement.isAliasedImport() && !isAnnotatedImport(importStatement)) -->Line_62 $$ if (importedName == null)[ CD ]
Line_122 $$ if (unresolvedOnDemandImports != null) -->Line_123 $$ unresolvedOnDemandImports.add(anImport)[ CD ]
Line_127 $$ if (importedName != null && unresolvedReferenceNames.contains(importedName)) -->Line_132 $$ if (anImport.isAliasedImport()) [ CD ]
Line_54 $$ importedName = getTargetQualifiedName(resolved)-->Line_59 $$ importedName = PsiUtil.getQualifiedReferenceText(importReference)[ FD ]
Line_6 $$ file.accept(new PsiRecursiveElementWalkingVisitor() -->Line_108 $$ return true[ CD ]
Line_154 $$ final String annotationText = importStatement.getAnnotationList().getText()-->Line_155 $$ if (!StringUtil.isEmptyOrSpaces(annotationText)) [ FD ]
Line_2 $$ public static void processFile(@Nullable final PsiFile file, @Nullable final Set<String> importedClasses, @Nullable final Set<String> staticallyImportedMembers, @Nullable final Set<GrImportStatement> usedImports, @Nullable final Set<GrImportStatement> unresolvedOnDemandImports, @Nullable final Set<String> implicitlyImported, @Nullable final Set<String> innerClasses, @Nullable final Map<String, String> aliased, @Nullable final Map<String, String> annotations) -->Line_111 $$ final Set<GrImportStatement> importsToCheck = ContainerUtil.newLinkedHashSet(PsiUtil.getValidImportStatements((GroovyFile) file))[ CD ]
Line_40 $$ if (resolved instanceof PsiMember) -->Line_42 $$ final PsiClass clazz = member.getContainingClass()[ CD ]
Line_6 $$ file.accept(new PsiRecursiveElementWalkingVisitor() -->Line_84 $$ if (context == null && !(refElement.getParent() instanceof GrImportStatement) && refElement.getQualifier() == null) [ FD ]
Line_33 $$ if (GroovyImportHelper.isImplicitlyImported(resolved, refName, (GroovyFile) file)) -->Line_34 $$ addImplicitClass(resolved)[ CD ]
Line_36 $$ if (!importStatement.isAliasedImport() && !isAnnotatedImport(importStatement)) -->Line_71 $$ if (importStatement.isStatic()) [ CD ]
Line_25 $$ final PsiElement resolved = resolveResult.getElement()-->Line_40 $$ if (resolved instanceof PsiMember) [ FD ]
Line_118 $$ if (anImport.isOnDemand()) -->Line_127 $$ if (importedName != null && unresolvedReferenceNames.contains(importedName)) [ CD ]
Line_84 $$ if (context == null && !(refElement.getParent() instanceof GrImportStatement) && refElement.getQualifier() == null) -->Line_85 $$ addImplicitClass(resolved)[ CD ]
Line_45 $$ if (classQName != null) -->Line_47 $$ if (name != null) [ CD ]
