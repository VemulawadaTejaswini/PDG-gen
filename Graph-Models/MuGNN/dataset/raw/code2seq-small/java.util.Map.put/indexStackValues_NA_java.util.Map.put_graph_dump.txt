Line_5 $$ if (block.isNull(position)) -->Line_7 $$ if (type.getJavaType() == boolean.class) [ CD ]
Line_13 $$ if (type.getJavaType() == Slice.class) -->Line_16 $$ values.put(position, type.getObject(block, position))[ CD ]
Line_9 $$ if (type.getJavaType() == long.class) -->Line_11 $$ if (type.getJavaType() == double.class) [ CD ]
Line_3 $$ SortedMap<Integer, Object> values = new TreeMap()-->Line_19 $$ return unmodifiableSortedMap(values)[ FD ]
Line_2 $$ private static SortedMap<Integer, Object> indexStackValues(Type type, Block block) -->Line_14 $$ values.put(position, type.getSlice(block, position))[ FD ]
Line_2 $$ private static SortedMap<Integer, Object> indexStackValues(Type type, Block block) -->Line_10 $$ values.put(position, type.getLong(block, position))[ FD ]
Line_4 $$ for (int position = 0; position < block.getPositionCount(); position++) -->Line_12 $$ values.put(position, type.getDouble(block, position))[ FD ]
Line_13 $$ if (type.getJavaType() == Slice.class) -->Line_14 $$ values.put(position, type.getSlice(block, position))[ CD ]
Line_3 $$ SortedMap<Integer, Object> values = new TreeMap()-->Line_16 $$ values.put(position, type.getObject(block, position))[ FD ]
Line_2 $$ private static SortedMap<Integer, Object> indexStackValues(Type type, Block block) -->Line_3 $$ SortedMap<Integer, Object> values = new TreeMap()[ CD ]
Line_2 $$ private static SortedMap<Integer, Object> indexStackValues(Type type, Block block) -->Line_8 $$ values.put(position, type.getBoolean(block, position))[ FD ]
Line_7 $$ if (type.getJavaType() == boolean.class) -->Line_8 $$ values.put(position, type.getBoolean(block, position))[ CD ]
Line_2 $$ private static SortedMap<Integer, Object> indexStackValues(Type type, Block block) -->Line_4 $$ for (int position = 0; position < block.getPositionCount(); position++) [ FD ]
Line_3 $$ SortedMap<Integer, Object> values = new TreeMap()-->Line_12 $$ values.put(position, type.getDouble(block, position))[ FD ]
Line_3 $$ SortedMap<Integer, Object> values = new TreeMap()-->Line_10 $$ values.put(position, type.getLong(block, position))[ FD ]
Line_2 $$ private static SortedMap<Integer, Object> indexStackValues(Type type, Block block) -->Line_13 $$ if (type.getJavaType() == Slice.class) [ FD ]
Line_2 $$ private static SortedMap<Integer, Object> indexStackValues(Type type, Block block) -->Line_11 $$ if (type.getJavaType() == double.class) [ FD ]
Line_2 $$ private static SortedMap<Integer, Object> indexStackValues(Type type, Block block) -->Line_12 $$ values.put(position, type.getDouble(block, position))[ FD ]
Line_11 $$ if (type.getJavaType() == double.class) -->Line_13 $$ if (type.getJavaType() == Slice.class) [ CD ]
Line_4 $$ for (int position = 0; position < block.getPositionCount(); position++) -->Line_16 $$ values.put(position, type.getObject(block, position))[ FD ]
Line_4 $$ for (int position = 0; position < block.getPositionCount(); position++) -->Line_8 $$ values.put(position, type.getBoolean(block, position))[ FD ]
Line_2 $$ private static SortedMap<Integer, Object> indexStackValues(Type type, Block block) -->Line_5 $$ if (block.isNull(position)) [ FD ]
Line_3 $$ SortedMap<Integer, Object> values = new TreeMap()-->Line_14 $$ values.put(position, type.getSlice(block, position))[ FD ]
Line_4 $$ for (int position = 0; position < block.getPositionCount(); position++) -->Line_6 $$ values.put(position, null)[ FD ]
Line_7 $$ if (type.getJavaType() == boolean.class) -->Line_9 $$ if (type.getJavaType() == long.class) [ CD ]
Line_2 $$ private static SortedMap<Integer, Object> indexStackValues(Type type, Block block) -->Line_9 $$ if (type.getJavaType() == long.class) [ FD ]
Line_2 $$ private static SortedMap<Integer, Object> indexStackValues(Type type, Block block) -->Line_7 $$ if (type.getJavaType() == boolean.class) [ FD ]
Line_4 $$ for (int position = 0; position < block.getPositionCount(); position++) -->Line_10 $$ values.put(position, type.getLong(block, position))[ FD ]
Line_4 $$ for (int position = 0; position < block.getPositionCount(); position++) -->Line_5 $$ if (block.isNull(position)) [ FD ]
Line_2 $$ private static SortedMap<Integer, Object> indexStackValues(Type type, Block block) -->Line_19 $$ return unmodifiableSortedMap(values)[ CD ]
Line_9 $$ if (type.getJavaType() == long.class) -->Line_10 $$ values.put(position, type.getLong(block, position))[ CD ]
Line_11 $$ if (type.getJavaType() == double.class) -->Line_12 $$ values.put(position, type.getDouble(block, position))[ CD ]
Line_2 $$ private static SortedMap<Integer, Object> indexStackValues(Type type, Block block) -->Line_16 $$ values.put(position, type.getObject(block, position))[ FD ]
Line_4 $$ for (int position = 0; position < block.getPositionCount(); position++) -->Line_14 $$ values.put(position, type.getSlice(block, position))[ FD ]
Line_3 $$ SortedMap<Integer, Object> values = new TreeMap()-->Line_8 $$ values.put(position, type.getBoolean(block, position))[ FD ]
Line_2 $$ private static SortedMap<Integer, Object> indexStackValues(Type type, Block block) -->Line_4 $$ for (int position = 0; position < block.getPositionCount(); position++) [ CD ]
Line_3 $$ SortedMap<Integer, Object> values = new TreeMap()-->Line_6 $$ values.put(position, null)[ FD ]
Line_5 $$ if (block.isNull(position)) -->Line_6 $$ values.put(position, null)[ CD ]
Line_4 $$ for (int position = 0; position < block.getPositionCount(); position++) -->Line_5 $$ if (block.isNull(position)) [ CD ]
