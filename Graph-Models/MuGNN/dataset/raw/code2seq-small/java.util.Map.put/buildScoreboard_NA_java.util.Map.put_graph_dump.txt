Line_8 $$ for (String type : types) -->Line_9 $$ partScoreboard.put(type, 0L)[ FD ]
Line_5 $$ for (String state : states) -->Line_7 $$ scoreboard.put(YarnApplicationState.valueOf(state.toUpperCase()), partScoreboard)[ FD ]
Line_2 $$ private static Map<YarnApplicationState, Map<String, Long>> buildScoreboard(Set<String> states, Set<String> types) -->Line_12 $$ return scoreboard[ CD ]
Line_2 $$ private static Map<YarnApplicationState, Map<String, Long>> buildScoreboard(Set<String> states, Set<String> types) -->Line_3 $$ Map<YarnApplicationState, Map<String, Long>> scoreboard = new HashMap<YarnApplicationState, Map<String, Long>>()[ CD ]
Line_2 $$ private static Map<YarnApplicationState, Map<String, Long>> buildScoreboard(Set<String> states, Set<String> types) -->Line_4 $$ assert !states.isEmpty()[ FD ]
Line_6 $$ Map<String, Long> partScoreboard = new HashMap<String, Long>()-->Line_9 $$ partScoreboard.put(type, 0L)[ FD ]
Line_3 $$ Map<YarnApplicationState, Map<String, Long>> scoreboard = new HashMap<YarnApplicationState, Map<String, Long>>()-->Line_7 $$ scoreboard.put(YarnApplicationState.valueOf(state.toUpperCase()), partScoreboard)[ FD ]
Line_6 $$ Map<String, Long> partScoreboard = new HashMap<String, Long>()-->Line_7 $$ scoreboard.put(YarnApplicationState.valueOf(state.toUpperCase()), partScoreboard)[ FD ]
