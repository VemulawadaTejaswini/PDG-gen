Line_3 $$ Configuration conf = new Configuration()-->Line_4 $$ conf.set(KeyProvider.DEFAULT_CIPHER_NAME, "myCipher")[ FD ]
Line_2 $$ public void testOptions() throws Exception -->Line_16 $$ assertEquals(128, options.getBitLength())[ CD ]
Line_8 $$ KeyProvider.Options options = KeyProvider.options(conf)-->Line_12 $$ options.setDescription("description")[ FD ]
Line_2 $$ public void testOptions() throws Exception -->Line_15 $$ assertEquals("yourCipher", options.getCipher())[ CD ]
Line_8 $$ KeyProvider.Options options = KeyProvider.options(conf)-->Line_10 $$ assertEquals(512, options.getBitLength())[ FD ]
Line_2 $$ public void testOptions() throws Exception -->Line_19 $$ options = KeyProvider.options(new Configuration())[ CD ]
Line_2 $$ public void testOptions() throws Exception -->Line_4 $$ conf.set(KeyProvider.DEFAULT_CIPHER_NAME, "myCipher")[ CD ]
Line_2 $$ public void testOptions() throws Exception -->Line_20 $$ assertEquals(KeyProvider.DEFAULT_CIPHER, options.getCipher())[ CD ]
Line_8 $$ KeyProvider.Options options = KeyProvider.options(conf)-->Line_17 $$ assertEquals("description", options.getDescription())[ FD ]
Line_19 $$ options = KeyProvider.options(new Configuration())-->Line_21 $$ assertEquals(KeyProvider.DEFAULT_BITLENGTH, options.getBitLength())[ FD ]
Line_8 $$ KeyProvider.Options options = KeyProvider.options(conf)-->Line_21 $$ assertEquals(KeyProvider.DEFAULT_BITLENGTH, options.getBitLength())[ FD ]
Line_8 $$ KeyProvider.Options options = KeyProvider.options(conf)-->Line_20 $$ assertEquals(KeyProvider.DEFAULT_CIPHER, options.getCipher())[ FD ]
Line_6 $$ Map<String, String> attributes = new HashMap<String, String>()-->Line_7 $$ attributes.put("a", "A")[ FD ]
Line_2 $$ public void testOptions() throws Exception -->Line_13 $$ options.setAttributes(attributes)[ CD ]
Line_2 $$ public void testOptions() throws Exception -->Line_17 $$ assertEquals("description", options.getDescription())[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_5 $$ conf.setInt(KeyProvider.DEFAULT_BITLENGTH_NAME, 512)[ FD ]
Line_2 $$ public void testOptions() throws Exception -->Line_10 $$ assertEquals(512, options.getBitLength())[ CD ]
Line_19 $$ options = KeyProvider.options(new Configuration())-->Line_20 $$ assertEquals(KeyProvider.DEFAULT_CIPHER, options.getCipher())[ FD ]
Line_8 $$ KeyProvider.Options options = KeyProvider.options(conf)-->Line_19 $$ options = KeyProvider.options(new Configuration())[ FD ]
Line_2 $$ public void testOptions() throws Exception -->Line_8 $$ KeyProvider.Options options = KeyProvider.options(conf)[ CD ]
Line_8 $$ KeyProvider.Options options = KeyProvider.options(conf)-->Line_15 $$ assertEquals("yourCipher", options.getCipher())[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_8 $$ KeyProvider.Options options = KeyProvider.options(conf)[ FD ]
Line_2 $$ public void testOptions() throws Exception -->Line_11 $$ options.setCipher("yourCipher")[ CD ]
Line_8 $$ KeyProvider.Options options = KeyProvider.options(conf)-->Line_16 $$ assertEquals(128, options.getBitLength())[ FD ]
Line_2 $$ public void testOptions() throws Exception -->Line_14 $$ options.setBitLength(128)[ CD ]
Line_8 $$ KeyProvider.Options options = KeyProvider.options(conf)-->Line_14 $$ options.setBitLength(128)[ FD ]
Line_2 $$ public void testOptions() throws Exception -->Line_5 $$ conf.setInt(KeyProvider.DEFAULT_BITLENGTH_NAME, 512)[ CD ]
Line_2 $$ public void testOptions() throws Exception -->Line_7 $$ attributes.put("a", "A")[ CD ]
Line_2 $$ public void testOptions() throws Exception -->Line_18 $$ assertEquals(attributes, options.getAttributes())[ CD ]
Line_6 $$ Map<String, String> attributes = new HashMap<String, String>()-->Line_18 $$ assertEquals(attributes, options.getAttributes())[ FD ]
Line_6 $$ Map<String, String> attributes = new HashMap<String, String>()-->Line_13 $$ options.setAttributes(attributes)[ FD ]
Line_8 $$ KeyProvider.Options options = KeyProvider.options(conf)-->Line_13 $$ options.setAttributes(attributes)[ FD ]
Line_2 $$ public void testOptions() throws Exception -->Line_9 $$ assertEquals("myCipher", options.getCipher())[ CD ]
Line_2 $$ public void testOptions() throws Exception -->Line_6 $$ Map<String, String> attributes = new HashMap<String, String>()[ CD ]
Line_8 $$ KeyProvider.Options options = KeyProvider.options(conf)-->Line_18 $$ assertEquals(attributes, options.getAttributes())[ FD ]
Line_2 $$ public void testOptions() throws Exception -->Line_21 $$ assertEquals(KeyProvider.DEFAULT_BITLENGTH, options.getBitLength())[ CD ]
Line_2 $$ public void testOptions() throws Exception -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_8 $$ KeyProvider.Options options = KeyProvider.options(conf)-->Line_9 $$ assertEquals("myCipher", options.getCipher())[ FD ]
Line_2 $$ public void testOptions() throws Exception -->Line_12 $$ options.setDescription("description")[ CD ]
Line_8 $$ KeyProvider.Options options = KeyProvider.options(conf)-->Line_11 $$ options.setCipher("yourCipher")[ FD ]
