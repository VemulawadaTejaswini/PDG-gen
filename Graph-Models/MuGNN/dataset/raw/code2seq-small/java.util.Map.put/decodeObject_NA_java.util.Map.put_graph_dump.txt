Line_25 $$ if (base.equals(MAP)) -->Line_31 $$ for (int entry = 0; entry < entryCount; entry++) [ CD ]
Line_2 $$ private static Object decodeObject(Type type, Block block, int position) -->Line_3 $$ if (block.isNull(position)) [ CD ]
Line_2 $$ private static Object decodeObject(Type type, Block block, int position) -->Line_6 $$ String base = type.getTypeSignature().getBase()[ CD ]
Line_2 $$ private static Object decodeObject(Type type, Block block, int position) -->Line_9 $$ Type elementType = type.getTypeParameters().get(0)[ FD ]
Line_9 $$ Type elementType = type.getTypeParameters().get(0)-->Line_12 $$ array.add(decodeObject(elementType, arrayBlock, entry))[ FD ]
Line_7 $$ if (base.equals(ARRAY)) -->Line_14 $$ return array[ CD ]
Line_2 $$ private static Object decodeObject(Type type, Block block, int position) -->Line_17 $$ Block rowBlock = (Block) type.getObject(block, position)[ FD ]
Line_25 $$ if (base.equals(MAP)) -->Line_27 $$ Type keyType = type.getTypeParameters().get(0)[ CD ]
Line_8 $$ Block arrayBlock = (Block) type.getObject(block, position)-->Line_12 $$ array.add(decodeObject(elementType, arrayBlock, entry))[ FD ]
Line_2 $$ private static Object decodeObject(Type type, Block block, int position) -->Line_25 $$ if (base.equals(MAP)) [ CD ]
Line_17 $$ Block rowBlock = (Block) type.getObject(block, position)-->Line_21 $$ row.add(decodeObject(fieldTypes.get(field), rowBlock, field))[ FD ]
Line_2 $$ private static Object decodeObject(Type type, Block block, int position) -->Line_6 $$ String base = type.getTypeSignature().getBase()[ FD ]
Line_26 $$ Block mapBlock = (Block) type.getObject(block, position)-->Line_30 $$ int entryCount = mapBlock.getPositionCount() / 2[ FD ]
Line_7 $$ if (base.equals(ARRAY)) -->Line_9 $$ Type elementType = type.getTypeParameters().get(0)[ CD ]
Line_28 $$ Type valueType = type.getTypeParameters().get(1)-->Line_35 $$ Object value = decodeObject(valueType, mapBlock, blockPosition + 1)[ FD ]
Line_2 $$ private static Object decodeObject(Type type, Block block, int position) -->Line_18 $$ List<Type> fieldTypes = type.getTypeParameters()[ FD ]
Line_7 $$ if (base.equals(ARRAY)) -->Line_10 $$ List<Object> array = new ArrayList()[ CD ]
Line_29 $$ Map<Object, Object> map = new LinkedHashMap()-->Line_36 $$ map.put(key, value)[ FD ]
Line_20 $$ for (int field = 0; field < fieldTypes.size(); field++) -->Line_21 $$ row.add(decodeObject(fieldTypes.get(field), rowBlock, field))[ CD ]
Line_25 $$ if (base.equals(MAP)) -->Line_39 $$ return map[ CD ]
Line_16 $$ if (base.equals(ROW)) -->Line_23 $$ return row[ CD ]
Line_35 $$ Object value = decodeObject(valueType, mapBlock, blockPosition + 1)-->Line_36 $$ map.put(key, value)[ FD ]
Line_16 $$ if (base.equals(ROW)) -->Line_17 $$ Block rowBlock = (Block) type.getObject(block, position)[ CD ]
Line_11 $$ for (int entry = 0; entry < arrayBlock.getPositionCount(); entry++) -->Line_31 $$ for (int entry = 0; entry < entryCount; entry++) [ FD ]
Line_31 $$ for (int entry = 0; entry < entryCount; entry++) -->Line_32 $$ int blockPosition = entry * 2[ CD ]
Line_33 $$ Object key = decodeObject(keyType, mapBlock, blockPosition)-->Line_34 $$ if (key != null) [ FD ]
Line_34 $$ if (key != null) -->Line_35 $$ Object value = decodeObject(valueType, mapBlock, blockPosition + 1)[ CD ]
Line_26 $$ Block mapBlock = (Block) type.getObject(block, position)-->Line_35 $$ Object value = decodeObject(valueType, mapBlock, blockPosition + 1)[ FD ]
Line_2 $$ private static Object decodeObject(Type type, Block block, int position) -->Line_41 $$ return type.getObjectValue(SESSION, block, position)[ FD ]
Line_6 $$ String base = type.getTypeSignature().getBase()-->Line_7 $$ if (base.equals(ARRAY)) [ FD ]
Line_30 $$ int entryCount = mapBlock.getPositionCount() / 2-->Line_31 $$ for (int entry = 0; entry < entryCount; entry++) [ FD ]
Line_2 $$ private static Object decodeObject(Type type, Block block, int position) -->Line_28 $$ Type valueType = type.getTypeParameters().get(1)[ FD ]
Line_2 $$ private static Object decodeObject(Type type, Block block, int position) -->Line_8 $$ Block arrayBlock = (Block) type.getObject(block, position)[ FD ]
Line_20 $$ for (int field = 0; field < fieldTypes.size(); field++) -->Line_21 $$ row.add(decodeObject(fieldTypes.get(field), rowBlock, field))[ FD ]
Line_2 $$ private static Object decodeObject(Type type, Block block, int position) -->Line_26 $$ Block mapBlock = (Block) type.getObject(block, position)[ FD ]
Line_16 $$ if (base.equals(ROW)) -->Line_18 $$ List<Type> fieldTypes = type.getTypeParameters()[ CD ]
Line_25 $$ if (base.equals(MAP)) -->Line_26 $$ Block mapBlock = (Block) type.getObject(block, position)[ CD ]
Line_7 $$ if (base.equals(ARRAY)) -->Line_11 $$ for (int entry = 0; entry < arrayBlock.getPositionCount(); entry++) [ CD ]
Line_25 $$ if (base.equals(MAP)) -->Line_28 $$ Type valueType = type.getTypeParameters().get(1)[ CD ]
Line_25 $$ if (base.equals(MAP)) -->Line_30 $$ int entryCount = mapBlock.getPositionCount() / 2[ CD ]
Line_2 $$ private static Object decodeObject(Type type, Block block, int position) -->Line_3 $$ if (block.isNull(position)) [ FD ]
Line_2 $$ private static Object decodeObject(Type type, Block block, int position) -->Line_16 $$ if (base.equals(ROW)) [ CD ]
Line_26 $$ Block mapBlock = (Block) type.getObject(block, position)-->Line_33 $$ Object key = decodeObject(keyType, mapBlock, blockPosition)[ FD ]
Line_31 $$ for (int entry = 0; entry < entryCount; entry++) -->Line_33 $$ Object key = decodeObject(keyType, mapBlock, blockPosition)[ CD ]
Line_6 $$ String base = type.getTypeSignature().getBase()-->Line_16 $$ if (base.equals(ROW)) [ FD ]
Line_8 $$ Block arrayBlock = (Block) type.getObject(block, position)-->Line_11 $$ for (int entry = 0; entry < arrayBlock.getPositionCount(); entry++) [ FD ]
Line_27 $$ Type keyType = type.getTypeParameters().get(0)-->Line_33 $$ Object key = decodeObject(keyType, mapBlock, blockPosition)[ FD ]
Line_3 $$ if (block.isNull(position)) -->Line_4 $$ return null[ CD ]
Line_11 $$ for (int entry = 0; entry < arrayBlock.getPositionCount(); entry++) -->Line_12 $$ array.add(decodeObject(elementType, arrayBlock, entry))[ FD ]
Line_2 $$ private static Object decodeObject(Type type, Block block, int position) -->Line_27 $$ Type keyType = type.getTypeParameters().get(0)[ FD ]
Line_2 $$ private static Object decodeObject(Type type, Block block, int position) -->Line_41 $$ return type.getObjectValue(SESSION, block, position)[ CD ]
Line_6 $$ String base = type.getTypeSignature().getBase()-->Line_25 $$ if (base.equals(MAP)) [ FD ]
Line_31 $$ for (int entry = 0; entry < entryCount; entry++) -->Line_34 $$ if (key != null) [ CD ]
Line_11 $$ for (int entry = 0; entry < arrayBlock.getPositionCount(); entry++) -->Line_12 $$ array.add(decodeObject(elementType, arrayBlock, entry))[ CD ]
Line_18 $$ List<Type> fieldTypes = type.getTypeParameters()-->Line_20 $$ for (int field = 0; field < fieldTypes.size(); field++) [ FD ]
Line_25 $$ if (base.equals(MAP)) -->Line_29 $$ Map<Object, Object> map = new LinkedHashMap()[ CD ]
Line_32 $$ int blockPosition = entry * 2-->Line_33 $$ Object key = decodeObject(keyType, mapBlock, blockPosition)[ FD ]
Line_33 $$ Object key = decodeObject(keyType, mapBlock, blockPosition)-->Line_36 $$ map.put(key, value)[ FD ]
Line_2 $$ private static Object decodeObject(Type type, Block block, int position) -->Line_7 $$ if (base.equals(ARRAY)) [ CD ]
Line_16 $$ if (base.equals(ROW)) -->Line_20 $$ for (int field = 0; field < fieldTypes.size(); field++) [ CD ]
Line_7 $$ if (base.equals(ARRAY)) -->Line_8 $$ Block arrayBlock = (Block) type.getObject(block, position)[ CD ]
Line_19 $$ List<Object> row = new ArrayList()-->Line_21 $$ row.add(decodeObject(fieldTypes.get(field), rowBlock, field))[ FD ]
Line_18 $$ List<Type> fieldTypes = type.getTypeParameters()-->Line_21 $$ row.add(decodeObject(fieldTypes.get(field), rowBlock, field))[ FD ]
Line_34 $$ if (key != null) -->Line_36 $$ map.put(key, value)[ CD ]
Line_10 $$ List<Object> array = new ArrayList()-->Line_12 $$ array.add(decodeObject(elementType, arrayBlock, entry))[ FD ]
Line_16 $$ if (base.equals(ROW)) -->Line_19 $$ List<Object> row = new ArrayList()[ CD ]
