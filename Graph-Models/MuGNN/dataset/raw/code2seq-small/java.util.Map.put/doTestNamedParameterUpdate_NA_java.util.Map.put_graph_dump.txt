Line_19 $$ Map<String, Integer> params = new HashMap<String, Integer>()-->Line_21 $$ params.put("priceId", type)[ FD ]
Line_9 $$ if (namedDeclarations) -->Line_13 $$ declareParameter(new SqlParameter(Types.NUMERIC))[ CD ]
Line_5 $$ class NamedParameterUpdater extends SqlUpdate -->Line_20 $$ params.put("perfId", performanceId)[ CD ]
Line_2 $$ private void doTestNamedParameterUpdate(final boolean namedDeclarations) throws SQLException -->Line_27 $$ assertEquals(1, rowsAffected)[ CD ]
Line_2 $$ private void doTestNamedParameterUpdate(final boolean namedDeclarations) throws SQLException -->Line_4 $$ given(connection.prepareStatement(UPDATE_INT_INT)).willReturn(preparedStatement)[ CD ]
Line_5 $$ class NamedParameterUpdater extends SqlUpdate -->Line_21 $$ params.put("priceId", type)[ CD ]
Line_9 $$ if (namedDeclarations) -->Line_11 $$ declareParameter(new SqlParameter("perfId", Types.NUMERIC))[ CD ]
Line_9 $$ if (namedDeclarations) -->Line_10 $$ declareParameter(new SqlParameter("priceId", Types.DECIMAL))[ CD ]
Line_19 $$ Map<String, Integer> params = new HashMap<String, Integer>()-->Line_22 $$ return updateByNamedParam(params)[ FD ]
Line_2 $$ private void doTestNamedParameterUpdate(final boolean namedDeclarations) throws SQLException -->Line_26 $$ int rowsAffected = pc.run(1, 1)[ CD ]
Line_2 $$ private void doTestNamedParameterUpdate(final boolean namedDeclarations) throws SQLException -->Line_29 $$ verify(preparedStatement).setObject(2, 1, Types.DECIMAL)[ CD ]
Line_5 $$ class NamedParameterUpdater extends SqlUpdate -->Line_19 $$ Map<String, Integer> params = new HashMap<String, Integer>()[ CD ]
Line_5 $$ class NamedParameterUpdater extends SqlUpdate -->Line_21 $$ params.put("priceId", type)[ FD ]
Line_9 $$ if (namedDeclarations) -->Line_14 $$ declareParameter(new SqlParameter(Types.DECIMAL))[ CD ]
Line_5 $$ class NamedParameterUpdater extends SqlUpdate -->Line_20 $$ params.put("perfId", performanceId)[ FD ]
Line_2 $$ private void doTestNamedParameterUpdate(final boolean namedDeclarations) throws SQLException -->Line_3 $$ given(preparedStatement.executeUpdate()).willReturn(1)[ CD ]
Line_19 $$ Map<String, Integer> params = new HashMap<String, Integer>()-->Line_20 $$ params.put("perfId", performanceId)[ FD ]
Line_5 $$ class NamedParameterUpdater extends SqlUpdate -->Line_22 $$ return updateByNamedParam(params)[ CD ]
Line_2 $$ private void doTestNamedParameterUpdate(final boolean namedDeclarations) throws SQLException -->Line_28 $$ verify(preparedStatement).setObject(1, 1, Types.NUMERIC)[ CD ]
