Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_31 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("K"), new StringToken("L"))))[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_43 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("I"), new StringToken("J"))))[ CD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_21 $$ Map<String, String> configOptions = new HashMap()[ CD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_7 $$ dc1.put(InetAddress.getByName("127.0.0.1"), new StringToken("E"))[ CD ]
Line_38 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_48 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("K"), new StringToken("L"))))[ FD ]
Line_44 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_45 $$ assertEquals(4, primaryRanges.size())[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_11 $$ dc1.put(InetAddress.getByName("127.0.0.2"), new StringToken("J"))[ CD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_49 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("L"), new StringToken("A"))))[ CD ]
Line_38 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_49 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("L"), new StringToken("A"))))[ FD ]
Line_44 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_54 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("J"), new StringToken("K"))))[ FD ]
Line_5 $$ Multimap<InetAddress, Token> dc1 = HashMultimap.create()-->Line_10 $$ dc1.put(InetAddress.getByName("127.0.0.2"), new StringToken("I"))[ FD ]
Line_5 $$ Multimap<InetAddress, Token> dc1 = HashMultimap.create()-->Line_6 $$ dc1.put(InetAddress.getByName("127.0.0.1"), new StringToken("A"))[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_14 $$ dc2.put(InetAddress.getByName("127.0.0.4"), new StringToken("B"))[ CD ]
Line_44 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_46 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("A"), new StringToken("B"))))[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_42 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("H"), new StringToken("I"))))[ CD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_32 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("L"), new StringToken("A"))))[ CD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_47 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("F"), new StringToken("G"))))[ CD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_26 $$ KeyspaceMetadata meta = KeyspaceMetadata.create("Keyspace1", KeyspaceParams.create(false, configOptions))[ CD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_57 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("B"), new StringToken("C"))))[ CD ]
Line_3 $$ TokenMetadata metadata = StorageService.instance.getTokenMetadata()-->Line_20 $$ metadata.updateNormalTokens(dc2)[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_52 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("C"), new StringToken("D"))))[ CD ]
Line_38 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_52 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("C"), new StringToken("D"))))[ FD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_53 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("E"), new StringToken("F"))))[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_56 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("G"), new StringToken("H"))))[ CD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_22 $$ configOptions.put("DC1", "1")[ CD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_9 $$ dc1.put(InetAddress.getByName("127.0.0.2"), new StringToken("C"))[ CD ]
Line_38 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_53 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("E"), new StringToken("F"))))[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_55 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("D"), new StringToken("E"))))[ CD ]
Line_3 $$ TokenMetadata metadata = StorageService.instance.getTokenMetadata()-->Line_4 $$ metadata.clearUnsafe()[ FD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_41 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("A"), new StringToken("B"))))[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_38 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.2"))[ CD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_35 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("E"), new StringToken("F"))))[ CD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_27 $$ Schema.instance.setKeyspaceMetadata(meta)[ CD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_8 $$ dc1.put(InetAddress.getByName("127.0.0.1"), new StringToken("H"))[ CD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_38 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.2"))[ FD ]
Line_21 $$ Map<String, String> configOptions = new HashMap()-->Line_24 $$ configOptions.put(ReplicationParams.CLASS, "NetworkTopologyStrategy")[ FD ]
Line_5 $$ Multimap<InetAddress, Token> dc1 = HashMultimap.create()-->Line_9 $$ dc1.put(InetAddress.getByName("127.0.0.2"), new StringToken("C"))[ FD ]
Line_38 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_58 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("H"), new StringToken("I"))))[ FD ]
Line_21 $$ Map<String, String> configOptions = new HashMap()-->Line_23 $$ configOptions.put("DC2", "2")[ FD ]
Line_21 $$ Map<String, String> configOptions = new HashMap()-->Line_22 $$ configOptions.put("DC1", "1")[ FD ]
Line_13 $$ Multimap<InetAddress, Token> dc2 = HashMultimap.create()-->Line_16 $$ dc2.put(InetAddress.getByName("127.0.0.4"), new StringToken("L"))[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_20 $$ metadata.updateNormalTokens(dc2)[ CD ]
Line_50 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.5"))-->Line_58 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("H"), new StringToken("I"))))[ FD ]
Line_38 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_43 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("I"), new StringToken("J"))))[ FD ]
Line_50 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.5"))-->Line_54 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("J"), new StringToken("K"))))[ FD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_51 $$ assertTrue(primaryRanges.size() == 8)[ FD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_59 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("I"), new StringToken("J"))))[ FD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_33 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("C"), new StringToken("D"))))[ FD ]
Line_38 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_39 $$ assertEquals(4, primaryRanges.size())[ FD ]
Line_38 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_51 $$ assertTrue(primaryRanges.size() == 8)[ FD ]
Line_3 $$ TokenMetadata metadata = StorageService.instance.getTokenMetadata()-->Line_12 $$ metadata.updateNormalTokens(dc1)[ FD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_44 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.4"))[ FD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_32 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("L"), new StringToken("A"))))[ FD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_43 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("I"), new StringToken("J"))))[ FD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_35 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("E"), new StringToken("F"))))[ FD ]
Line_38 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_44 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.4"))[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_40 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("B"), new StringToken("C"))))[ CD ]
Line_44 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_49 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("L"), new StringToken("A"))))[ FD ]
Line_21 $$ Map<String, String> configOptions = new HashMap()-->Line_26 $$ KeyspaceMetadata meta = KeyspaceMetadata.create("Keyspace1", KeyspaceParams.create(false, configOptions))[ FD ]
Line_44 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_55 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("D"), new StringToken("E"))))[ FD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_55 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("D"), new StringToken("E"))))[ FD ]
Line_50 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.5"))-->Line_55 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("D"), new StringToken("E"))))[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_36 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("F"), new StringToken("G"))))[ CD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_41 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("A"), new StringToken("B"))))[ CD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_54 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("J"), new StringToken("K"))))[ CD ]
Line_38 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_41 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("A"), new StringToken("B"))))[ FD ]
Line_38 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_56 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("G"), new StringToken("H"))))[ FD ]
Line_38 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_59 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("I"), new StringToken("J"))))[ FD ]
Line_5 $$ Multimap<InetAddress, Token> dc1 = HashMultimap.create()-->Line_8 $$ dc1.put(InetAddress.getByName("127.0.0.1"), new StringToken("H"))[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_5 $$ Multimap<InetAddress, Token> dc1 = HashMultimap.create()[ CD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_30 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("J"), new StringToken("K"))))[ FD ]
Line_38 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_40 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("B"), new StringToken("C"))))[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_6 $$ dc1.put(InetAddress.getByName("127.0.0.1"), new StringToken("A"))[ CD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_48 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("K"), new StringToken("L"))))[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_31 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("K"), new StringToken("L"))))[ CD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_44 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.4"))[ CD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_4 $$ metadata.clearUnsafe()[ CD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_58 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("H"), new StringToken("I"))))[ FD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_56 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("G"), new StringToken("H"))))[ FD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_29 $$ assertEquals(8, primaryRanges.size())[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_15 $$ dc2.put(InetAddress.getByName("127.0.0.4"), new StringToken("G"))[ CD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_34 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("D"), new StringToken("E"))))[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_30 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("J"), new StringToken("K"))))[ CD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_23 $$ configOptions.put("DC2", "2")[ CD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_39 $$ assertEquals(4, primaryRanges.size())[ FD ]
Line_13 $$ Multimap<InetAddress, Token> dc2 = HashMultimap.create()-->Line_19 $$ dc2.put(InetAddress.getByName("127.0.0.5"), new StringToken("K"))[ FD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_36 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("F"), new StringToken("G"))))[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_16 $$ dc2.put(InetAddress.getByName("127.0.0.4"), new StringToken("L"))[ CD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_46 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("A"), new StringToken("B"))))[ CD ]
Line_44 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_50 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.5"))[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_37 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("G"), new StringToken("H"))))[ CD ]
Line_5 $$ Multimap<InetAddress, Token> dc1 = HashMultimap.create()-->Line_11 $$ dc1.put(InetAddress.getByName("127.0.0.2"), new StringToken("J"))[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))[ CD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_51 $$ assertTrue(primaryRanges.size() == 8)[ CD ]
Line_13 $$ Multimap<InetAddress, Token> dc2 = HashMultimap.create()-->Line_18 $$ dc2.put(InetAddress.getByName("127.0.0.5"), new StringToken("F"))[ FD ]
Line_5 $$ Multimap<InetAddress, Token> dc1 = HashMultimap.create()-->Line_7 $$ dc1.put(InetAddress.getByName("127.0.0.1"), new StringToken("E"))[ FD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_52 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("C"), new StringToken("D"))))[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_39 $$ assertEquals(4, primaryRanges.size())[ CD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_40 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("B"), new StringToken("C"))))[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_53 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("E"), new StringToken("F"))))[ CD ]
Line_38 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_50 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.5"))[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_12 $$ metadata.updateNormalTokens(dc1)[ CD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_25 $$ Keyspace.clear("Keyspace1")[ CD ]
Line_44 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_57 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("B"), new StringToken("C"))))[ FD ]
Line_38 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_46 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("A"), new StringToken("B"))))[ FD ]
Line_38 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_45 $$ assertEquals(4, primaryRanges.size())[ FD ]
Line_44 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_56 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("G"), new StringToken("H"))))[ FD ]
Line_13 $$ Multimap<InetAddress, Token> dc2 = HashMultimap.create()-->Line_20 $$ metadata.updateNormalTokens(dc2)[ FD ]
Line_44 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_58 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("H"), new StringToken("I"))))[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_29 $$ assertEquals(8, primaryRanges.size())[ CD ]
Line_13 $$ Multimap<InetAddress, Token> dc2 = HashMultimap.create()-->Line_14 $$ dc2.put(InetAddress.getByName("127.0.0.4"), new StringToken("B"))[ FD ]
Line_44 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_47 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("F"), new StringToken("G"))))[ FD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_45 $$ assertEquals(4, primaryRanges.size())[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_13 $$ Multimap<InetAddress, Token> dc2 = HashMultimap.create()[ CD ]
Line_13 $$ Multimap<InetAddress, Token> dc2 = HashMultimap.create()-->Line_17 $$ dc2.put(InetAddress.getByName("127.0.0.5"), new StringToken("D"))[ FD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_37 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("G"), new StringToken("H"))))[ FD ]
Line_50 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.5"))-->Line_52 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("C"), new StringToken("D"))))[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_10 $$ dc1.put(InetAddress.getByName("127.0.0.2"), new StringToken("I"))[ CD ]
Line_44 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_51 $$ assertTrue(primaryRanges.size() == 8)[ FD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_42 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("H"), new StringToken("I"))))[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_3 $$ TokenMetadata metadata = StorageService.instance.getTokenMetadata()[ CD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_50 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.5"))[ FD ]
Line_50 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.5"))-->Line_51 $$ assertTrue(primaryRanges.size() == 8)[ FD ]
Line_38 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_57 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("B"), new StringToken("C"))))[ FD ]
Line_50 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.5"))-->Line_53 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("E"), new StringToken("F"))))[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_58 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("H"), new StringToken("I"))))[ CD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_34 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("D"), new StringToken("E"))))[ CD ]
Line_38 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_47 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("F"), new StringToken("G"))))[ FD ]
Line_38 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_42 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("H"), new StringToken("I"))))[ FD ]
Line_50 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.5"))-->Line_59 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("I"), new StringToken("J"))))[ FD ]
Line_50 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.5"))-->Line_56 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("G"), new StringToken("H"))))[ FD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_57 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("B"), new StringToken("C"))))[ FD ]
Line_26 $$ KeyspaceMetadata meta = KeyspaceMetadata.create("Keyspace1", KeyspaceParams.create(false, configOptions))-->Line_27 $$ Schema.instance.setKeyspaceMetadata(meta)[ FD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_49 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("L"), new StringToken("A"))))[ FD ]
Line_44 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_48 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("K"), new StringToken("L"))))[ FD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_54 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("J"), new StringToken("K"))))[ FD ]
Line_44 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_53 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("E"), new StringToken("F"))))[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_45 $$ assertEquals(4, primaryRanges.size())[ CD ]
Line_44 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_59 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("I"), new StringToken("J"))))[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_48 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("K"), new StringToken("L"))))[ CD ]
Line_44 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_52 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("C"), new StringToken("D"))))[ FD ]
Line_50 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.5"))-->Line_57 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("B"), new StringToken("C"))))[ FD ]
Line_38 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_54 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("J"), new StringToken("K"))))[ FD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_46 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("A"), new StringToken("B"))))[ FD ]
Line_13 $$ Multimap<InetAddress, Token> dc2 = HashMultimap.create()-->Line_15 $$ dc2.put(InetAddress.getByName("127.0.0.4"), new StringToken("G"))[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_50 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.5"))[ CD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_19 $$ dc2.put(InetAddress.getByName("127.0.0.5"), new StringToken("K"))[ CD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_17 $$ dc2.put(InetAddress.getByName("127.0.0.5"), new StringToken("D"))[ CD ]
Line_38 $$ primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_55 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("D"), new StringToken("E"))))[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_18 $$ dc2.put(InetAddress.getByName("127.0.0.5"), new StringToken("F"))[ CD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_24 $$ configOptions.put(ReplicationParams.CLASS, "NetworkTopologyStrategy")[ CD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_59 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("I"), new StringToken("J"))))[ CD ]
Line_28 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangeForEndpointWithinDC(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_47 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("F"), new StringToken("G"))))[ FD ]
Line_5 $$ Multimap<InetAddress, Token> dc1 = HashMultimap.create()-->Line_12 $$ metadata.updateNormalTokens(dc1)[ FD ]
Line_2 $$ public void testPrimaryRangeForEndpointWithinDCWithVnodes() throws Exception -->Line_33 $$ assertTrue(primaryRanges.contains(new Range<Token>(new StringToken("C"), new StringToken("D"))))[ CD ]
