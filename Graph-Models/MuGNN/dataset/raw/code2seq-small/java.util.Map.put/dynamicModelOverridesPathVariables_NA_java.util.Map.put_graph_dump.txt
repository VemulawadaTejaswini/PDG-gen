Line_2 $$ public void dynamicModelOverridesPathVariables() throws Exception -->Line_9 $$ Map<String, Object> pathVars = new HashMap<String, Object>()[ CD ]
Line_2 $$ public void dynamicModelOverridesPathVariables() throws Exception -->Line_4 $$ given(wac.getServletContext()).willReturn(new MockServletContext())[ CD ]
Line_2 $$ public void dynamicModelOverridesPathVariables() throws Exception -->Line_7 $$ MockHttpServletRequest request = new MockHttpServletRequest()[ CD ]
Line_2 $$ public void dynamicModelOverridesPathVariables() throws Exception -->Line_6 $$ tv.setApplicationContext(wac)[ CD ]
Line_2 $$ public void dynamicModelOverridesPathVariables() throws Exception -->Line_8 $$ MockHttpServletResponse response = new MockHttpServletResponse()[ CD ]
Line_2 $$ public void dynamicModelOverridesPathVariables() throws Exception -->Line_11 $$ pathVars.put("something", "else")[ CD ]
Line_2 $$ public void dynamicModelOverridesPathVariables() throws Exception -->Line_19 $$ assertEquals("else", tv.model.get("something"))[ CD ]
Line_9 $$ Map<String, Object> pathVars = new HashMap<String, Object>()-->Line_11 $$ pathVars.put("something", "else")[ FD ]
Line_2 $$ public void dynamicModelOverridesPathVariables() throws Exception -->Line_5 $$ TestView tv = new TestView(wac)[ CD ]
Line_2 $$ public void dynamicModelOverridesPathVariables() throws Exception -->Line_14 $$ model.put("one", new HashMap<Object, Object>())[ CD ]
Line_9 $$ Map<String, Object> pathVars = new HashMap<String, Object>()-->Line_10 $$ pathVars.put("one", "bar")[ FD ]
Line_2 $$ public void dynamicModelOverridesPathVariables() throws Exception -->Line_18 $$ assertEquals(3, tv.model.size())[ CD ]
Line_5 $$ TestView tv = new TestView(wac)-->Line_16 $$ tv.render(model, request, response)[ FD ]
Line_2 $$ public void dynamicModelOverridesPathVariables() throws Exception -->Line_17 $$ checkContainsAll(model, tv.model)[ CD ]
Line_7 $$ MockHttpServletRequest request = new MockHttpServletRequest()-->Line_16 $$ tv.render(model, request, response)[ FD ]
Line_2 $$ public void dynamicModelOverridesPathVariables() throws Exception -->Line_12 $$ request.setAttribute(View.PATH_VARIABLES, pathVars)[ CD ]
Line_9 $$ Map<String, Object> pathVars = new HashMap<String, Object>()-->Line_12 $$ request.setAttribute(View.PATH_VARIABLES, pathVars)[ FD ]
Line_2 $$ public void dynamicModelOverridesPathVariables() throws Exception -->Line_13 $$ Map<String, Object> model = new HashMap<String, Object>()[ CD ]
Line_2 $$ public void dynamicModelOverridesPathVariables() throws Exception -->Line_3 $$ WebApplicationContext wac = mock(WebApplicationContext.class)[ CD ]
Line_3 $$ WebApplicationContext wac = mock(WebApplicationContext.class)-->Line_6 $$ tv.setApplicationContext(wac)[ FD ]
Line_13 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_15 $$ model.put("two", new Object())[ FD ]
Line_2 $$ public void dynamicModelOverridesPathVariables() throws Exception -->Line_15 $$ model.put("two", new Object())[ CD ]
Line_13 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_17 $$ checkContainsAll(model, tv.model)[ FD ]
Line_3 $$ WebApplicationContext wac = mock(WebApplicationContext.class)-->Line_4 $$ given(wac.getServletContext()).willReturn(new MockServletContext())[ FD ]
Line_5 $$ TestView tv = new TestView(wac)-->Line_6 $$ tv.setApplicationContext(wac)[ FD ]
Line_13 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_14 $$ model.put("one", new HashMap<Object, Object>())[ FD ]
Line_8 $$ MockHttpServletResponse response = new MockHttpServletResponse()-->Line_16 $$ tv.render(model, request, response)[ FD ]
Line_2 $$ public void dynamicModelOverridesPathVariables() throws Exception -->Line_10 $$ pathVars.put("one", "bar")[ CD ]
Line_2 $$ public void dynamicModelOverridesPathVariables() throws Exception -->Line_20 $$ assertTrue(tv.initialized)[ CD ]
Line_13 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_16 $$ tv.render(model, request, response)[ FD ]
Line_2 $$ public void dynamicModelOverridesPathVariables() throws Exception -->Line_16 $$ tv.render(model, request, response)[ CD ]
Line_7 $$ MockHttpServletRequest request = new MockHttpServletRequest()-->Line_12 $$ request.setAttribute(View.PATH_VARIABLES, pathVars)[ FD ]
