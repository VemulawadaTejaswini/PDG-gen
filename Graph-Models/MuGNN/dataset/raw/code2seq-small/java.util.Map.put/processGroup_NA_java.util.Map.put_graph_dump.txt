Line_4 $$ if (groupWasAdded) -->Line_22 $$ myFile.modifyGroup(newGroupName, newGroup.getPatterns(), deletedProperties, newOrModifiedProperties, newGroup.isDefault())[ CD ]
Line_16 $$ for (Map.Entry<String, String> entry : newProperties.entrySet()) -->Line_19 $$ newOrModifiedProperties.put(entry.getKey(), entry.getValue())[ FD ]
Line_8 $$ final Map<String, String> newProperties = newGroup.getProperties()-->Line_11 $$ if (!newProperties.containsKey(oldKey)) [ FD ]
Line_9 $$ final Set<String> deletedProperties = new HashSet<String>()-->Line_12 $$ deletedProperties.add(oldKey)[ FD ]
Line_17 $$ final String oldValue = oldProperties.get(entry.getKey())-->Line_18 $$ if ((oldValue == null) || (!oldValue.equals(entry.getValue()))) [ FD ]
Line_3 $$ final String newGroupName = newGroup.getName()-->Line_22 $$ myFile.modifyGroup(newGroupName, newGroup.getPatterns(), deletedProperties, newOrModifiedProperties, newGroup.isDefault())[ FD ]
Line_10 $$ for (String oldKey : oldProperties.keySet()) -->Line_12 $$ deletedProperties.add(oldKey)[ FD ]
Line_9 $$ final Set<String> deletedProperties = new HashSet<String>()-->Line_22 $$ myFile.modifyGroup(newGroupName, newGroup.getPatterns(), deletedProperties, newOrModifiedProperties, newGroup.isDefault())[ FD ]
Line_18 $$ if ((oldValue == null) || (!oldValue.equals(entry.getValue()))) -->Line_19 $$ newOrModifiedProperties.put(entry.getKey(), entry.getValue())[ CD ]
Line_4 $$ if (groupWasAdded) -->Line_5 $$ myFile.addGroup(newGroupName, newGroup.getPatterns(), newGroup.getProperties())[ CD ]
Line_2 $$ private void processGroup(final ProxyGroup newGroup, final ProxyGroup oldGroup, final boolean groupWasAdded) -->Line_7 $$ final Map<String, String> oldProperties = oldGroup.getProperties()[ FD ]
Line_2 $$ private void processGroup(final ProxyGroup newGroup, final ProxyGroup oldGroup, final boolean groupWasAdded) -->Line_3 $$ final String newGroupName = newGroup.getName()[ FD ]
Line_4 $$ if (groupWasAdded) -->Line_15 $$ final Map<String, String> newOrModifiedProperties = new HashMap<String, String>()[ CD ]
Line_10 $$ for (String oldKey : oldProperties.keySet()) -->Line_11 $$ if (!newProperties.containsKey(oldKey)) [ FD ]
Line_3 $$ final String newGroupName = newGroup.getName()-->Line_5 $$ myFile.addGroup(newGroupName, newGroup.getPatterns(), newGroup.getProperties())[ FD ]
Line_7 $$ final Map<String, String> oldProperties = oldGroup.getProperties()-->Line_17 $$ final String oldValue = oldProperties.get(entry.getKey())[ FD ]
Line_16 $$ for (Map.Entry<String, String> entry : newProperties.entrySet()) -->Line_17 $$ final String oldValue = oldProperties.get(entry.getKey())[ FD ]
Line_2 $$ private void processGroup(final ProxyGroup newGroup, final ProxyGroup oldGroup, final boolean groupWasAdded) -->Line_5 $$ myFile.addGroup(newGroupName, newGroup.getPatterns(), newGroup.getProperties())[ FD ]
Line_11 $$ if (!newProperties.containsKey(oldKey)) -->Line_12 $$ deletedProperties.add(oldKey)[ CD ]
Line_4 $$ if (groupWasAdded) -->Line_9 $$ final Set<String> deletedProperties = new HashSet<String>()[ CD ]
Line_4 $$ if (groupWasAdded) -->Line_8 $$ final Map<String, String> newProperties = newGroup.getProperties()[ CD ]
Line_8 $$ final Map<String, String> newProperties = newGroup.getProperties()-->Line_16 $$ for (Map.Entry<String, String> entry : newProperties.entrySet()) [ FD ]
Line_4 $$ if (groupWasAdded) -->Line_7 $$ final Map<String, String> oldProperties = oldGroup.getProperties()[ CD ]
Line_2 $$ private void processGroup(final ProxyGroup newGroup, final ProxyGroup oldGroup, final boolean groupWasAdded) -->Line_4 $$ if (groupWasAdded) [ CD ]
Line_2 $$ private void processGroup(final ProxyGroup newGroup, final ProxyGroup oldGroup, final boolean groupWasAdded) -->Line_8 $$ final Map<String, String> newProperties = newGroup.getProperties()[ FD ]
Line_16 $$ for (Map.Entry<String, String> entry : newProperties.entrySet()) -->Line_18 $$ if ((oldValue == null) || (!oldValue.equals(entry.getValue()))) [ FD ]
Line_15 $$ final Map<String, String> newOrModifiedProperties = new HashMap<String, String>()-->Line_22 $$ myFile.modifyGroup(newGroupName, newGroup.getPatterns(), deletedProperties, newOrModifiedProperties, newGroup.isDefault())[ FD ]
Line_15 $$ final Map<String, String> newOrModifiedProperties = new HashMap<String, String>()-->Line_19 $$ newOrModifiedProperties.put(entry.getKey(), entry.getValue())[ FD ]
Line_7 $$ final Map<String, String> oldProperties = oldGroup.getProperties()-->Line_10 $$ for (String oldKey : oldProperties.keySet()) [ FD ]
Line_2 $$ private void processGroup(final ProxyGroup newGroup, final ProxyGroup oldGroup, final boolean groupWasAdded) -->Line_3 $$ final String newGroupName = newGroup.getName()[ CD ]
Line_2 $$ private void processGroup(final ProxyGroup newGroup, final ProxyGroup oldGroup, final boolean groupWasAdded) -->Line_22 $$ myFile.modifyGroup(newGroupName, newGroup.getPatterns(), deletedProperties, newOrModifiedProperties, newGroup.isDefault())[ FD ]
