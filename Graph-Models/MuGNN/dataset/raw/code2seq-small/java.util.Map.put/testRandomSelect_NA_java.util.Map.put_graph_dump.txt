Line_5 $$ for (int i = 0; i < niter; ++i) -->Line_8 $$ List<Integer> resultAsList = convertIntArray(result)[ CD ]
Line_4 $$ Map<List<Integer>, Integer> results = new HashMap<List<Integer>, Integer>(niter)-->Line_13 $$ results.put(resultAsList, ++count)[ FD ]
Line_10 $$ if (count == null) -->Line_11 $$ results.put(resultAsList, 1)[ CD ]
Line_4 $$ Map<List<Integer>, Integer> results = new HashMap<List<Integer>, Integer>(niter)-->Line_11 $$ results.put(resultAsList, 1)[ FD ]
Line_5 $$ for (int i = 0; i < niter; ++i) -->Line_9 $$ Integer count = results.get(resultAsList)[ CD ]
Line_2 $$ private void testRandomSelect(int niter, int m, int n) -->Line_5 $$ for (int i = 0; i < niter; ++i) [ CD ]
Line_10 $$ if (count == null) -->Line_13 $$ results.put(resultAsList, ++count)[ CD ]
Line_2 $$ private void testRandomSelect(int niter, int m, int n) -->Line_5 $$ for (int i = 0; i < niter; ++i) [ FD ]
Line_9 $$ Integer count = results.get(resultAsList)-->Line_13 $$ results.put(resultAsList, ++count)[ FD ]
Line_4 $$ Map<List<Integer>, Integer> results = new HashMap<List<Integer>, Integer>(niter)-->Line_16 $$ verifyResults(results, m, n)[ FD ]
Line_5 $$ for (int i = 0; i < niter; ++i) -->Line_6 $$ int[] result = RandomAlgorithms.select(m, n, random)[ CD ]
Line_2 $$ private void testRandomSelect(int niter, int m, int n) -->Line_6 $$ int[] result = RandomAlgorithms.select(m, n, random)[ FD ]
Line_2 $$ private void testRandomSelect(int niter, int m, int n) -->Line_16 $$ verifyResults(results, m, n)[ FD ]
Line_8 $$ List<Integer> resultAsList = convertIntArray(result)-->Line_9 $$ Integer count = results.get(resultAsList)[ FD ]
Line_6 $$ int[] result = RandomAlgorithms.select(m, n, random)-->Line_7 $$ Arrays.sort(result)[ FD ]
Line_9 $$ Integer count = results.get(resultAsList)-->Line_10 $$ if (count == null) [ FD ]
Line_8 $$ List<Integer> resultAsList = convertIntArray(result)-->Line_13 $$ results.put(resultAsList, ++count)[ FD ]
Line_3 $$ Random random = new Random()-->Line_6 $$ int[] result = RandomAlgorithms.select(m, n, random)[ FD ]
Line_2 $$ private void testRandomSelect(int niter, int m, int n) -->Line_4 $$ Map<List<Integer>, Integer> results = new HashMap<List<Integer>, Integer>(niter)[ CD ]
Line_2 $$ private void testRandomSelect(int niter, int m, int n) -->Line_3 $$ Random random = new Random()[ CD ]
Line_6 $$ int[] result = RandomAlgorithms.select(m, n, random)-->Line_8 $$ List<Integer> resultAsList = convertIntArray(result)[ FD ]
Line_8 $$ List<Integer> resultAsList = convertIntArray(result)-->Line_11 $$ results.put(resultAsList, 1)[ FD ]
Line_4 $$ Map<List<Integer>, Integer> results = new HashMap<List<Integer>, Integer>(niter)-->Line_9 $$ Integer count = results.get(resultAsList)[ FD ]
Line_5 $$ for (int i = 0; i < niter; ++i) -->Line_7 $$ Arrays.sort(result)[ CD ]
Line_2 $$ private void testRandomSelect(int niter, int m, int n) -->Line_16 $$ verifyResults(results, m, n)[ CD ]
Line_5 $$ for (int i = 0; i < niter; ++i) -->Line_10 $$ if (count == null) [ CD ]
