Line_21 $$ List<String> roleList = roleMap.get(roleName)-->Line_26 $$ roleMap.put(roleName, roleList)[ FD ]
Line_16 $$ Iterator<Object[]> itr = q.iterate()-->Line_18 $$ Object[] array = itr.next()[ FD ]
Line_23 $$ roleList = new ArrayList()-->Line_25 $$ roleList.add(actionId)[ FD ]
Line_23 $$ roleList = new ArrayList()-->Line_22 $$ if (roleList == null) [ FD ]
Line_21 $$ List<String> roleList = roleMap.get(roleName)-->Line_22 $$ if (roleList == null) [ FD ]
Line_7 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_8 $$ q.addScalar("roleName", Type.STRING)[ FD ]
Line_17 $$ while (itr.hasNext()) -->Line_25 $$ roleList.add(actionId)[ CD ]
Line_23 $$ roleList = new ArrayList()-->Line_26 $$ roleMap.put(roleName, roleList)[ FD ]
Line_2 $$ public Map<String, List<String>> findByC_N_S_P(long companyId, String name, int scope, String primKey) -->Line_12 $$ qPos.add(name)[ FD ]
Line_20 $$ String actionId = (String) array[1]-->Line_25 $$ roleList.add(actionId)[ FD ]
Line_10 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_13 $$ qPos.add(scope)[ FD ]
Line_2 $$ public Map<String, List<String>> findByC_N_S_P(long companyId, String name, int scope, String primKey) -->Line_13 $$ qPos.add(scope)[ FD ]
Line_7 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_16 $$ Iterator<Object[]> itr = q.iterate()[ FD ]
Line_6 $$ String sql = CustomSQLUtil.get(FIND_BY_C_N_S_P)-->Line_7 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_17 $$ while (itr.hasNext()) -->Line_20 $$ String actionId = (String) array[1][ CD ]
Line_17 $$ while (itr.hasNext()) -->Line_21 $$ List<String> roleList = roleMap.get(roleName)[ CD ]
Line_2 $$ public Map<String, List<String>> findByC_N_S_P(long companyId, String name, int scope, String primKey) -->Line_3 $$ Session session = null[ CD ]
Line_5 $$ session = openSession()-->Line_7 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_10 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_14 $$ qPos.add(primKey)[ FD ]
Line_2 $$ public Map<String, List<String>> findByC_N_S_P(long companyId, String name, int scope, String primKey) -->Line_11 $$ qPos.add(companyId)[ FD ]
Line_16 $$ Iterator<Object[]> itr = q.iterate()-->Line_17 $$ while (itr.hasNext()) [ FD ]
Line_17 $$ while (itr.hasNext()) -->Line_26 $$ roleMap.put(roleName, roleList)[ CD ]
Line_19 $$ String roleName = (String) array[0]-->Line_26 $$ roleMap.put(roleName, roleList)[ FD ]
Line_22 $$ if (roleList == null) -->Line_23 $$ roleList = new ArrayList()[ CD ]
Line_17 $$ while (itr.hasNext()) -->Line_22 $$ if (roleList == null) [ CD ]
Line_17 $$ while (itr.hasNext()) -->Line_18 $$ Object[] array = itr.next()[ CD ]
Line_3 $$ Session session = null-->Line_7 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_10 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_11 $$ qPos.add(companyId)[ FD ]
Line_21 $$ List<String> roleList = roleMap.get(roleName)-->Line_25 $$ roleList.add(actionId)[ FD ]
Line_5 $$ session = openSession()-->Line_32 $$ closeSession(session)[ FD ]
Line_19 $$ String roleName = (String) array[0]-->Line_21 $$ List<String> roleList = roleMap.get(roleName)[ FD ]
Line_21 $$ List<String> roleList = roleMap.get(roleName)-->Line_23 $$ roleList = new ArrayList()[ FD ]
Line_15 $$ Map<String, List<String>> roleMap = new HashMap()-->Line_21 $$ List<String> roleList = roleMap.get(roleName)[ FD ]
Line_2 $$ public Map<String, List<String>> findByC_N_S_P(long companyId, String name, int scope, String primKey) -->Line_14 $$ qPos.add(primKey)[ FD ]
Line_7 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_10 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_15 $$ Map<String, List<String>> roleMap = new HashMap()-->Line_26 $$ roleMap.put(roleName, roleList)[ FD ]
Line_10 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_12 $$ qPos.add(name)[ FD ]
Line_7 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_9 $$ q.addScalar("actionId", Type.STRING)[ FD ]
Line_17 $$ while (itr.hasNext()) -->Line_19 $$ String roleName = (String) array[0][ CD ]
Line_3 $$ Session session = null-->Line_32 $$ closeSession(session)[ FD ]
Line_3 $$ Session session = null-->Line_5 $$ session = openSession()[ FD ]
