Line_7 $$ String index = result.getShardId().getIndex()-->Line_24 $$ versions.put(index, new Tuple(version, luceneVersion))[ FD ]
Line_2 $$ protected UpgradeResponse newResponse(UpgradeRequest request, int totalShards, int successfulShards, int failedShards, List<ShardUpgradeResult> shardUpgradeResults, List<ShardOperationFailedException> shardFailures, ClusterState clusterState) -->Line_28 $$ MetaData metaData = clusterState.metaData()[ FD ]
Line_32 $$ int expectedPrimaryCount = metaData.index(index).getNumberOfShards()-->Line_36 $$ logger.warn("Not updating settings for the index [[ FD ]
Line_5 $$ for (ShardUpgradeResult result : shardUpgradeResults) -->Line_7 $$ String index = result.getShardId().getIndex()[ FD ]
Line_4 $$ Map<String, Tuple<Version, org.apache.lucene.util.Version>> versions = new HashMap()-->Line_29 $$ for (Map.Entry<String, Tuple<Version, org.apache.lucene.util.Version>> versionEntry : versions.entrySet()) [ FD ]
Line_12 $$ Tuple<Version, org.apache.lucene.util.Version> versionTuple = versions.get(index)-->Line_18 $$ if (result.upgradeVersion().after(versionTuple.v1())) [ FD ]
Line_3 $$ Map<String, Integer> successfulPrimaryShards = new HashMap()-->Line_10 $$ successfulPrimaryShards.put(index, count == null ? 1 : count + 1)[ FD ]
Line_5 $$ for (ShardUpgradeResult result : shardUpgradeResults) -->Line_8 $$ if (result.primary()) [ FD ]
Line_13 $$ if (versionTuple == null) -->Line_14 $$ versions.put(index, new Tuple(result.upgradeVersion(), result.oldestLuceneSegment()))[ CD ]
Line_5 $$ for (ShardUpgradeResult result : shardUpgradeResults) -->Line_22 $$ luceneVersion = result.oldestLuceneSegment()[ FD ]
Line_5 $$ for (ShardUpgradeResult result : shardUpgradeResults) -->Line_19 $$ version = result.upgradeVersion()[ FD ]
Line_7 $$ String index = result.getShardId().getIndex()-->Line_34 $$ updatedVersions.put(index, new Tuple(versionEntry.getValue().v1(), versionEntry.getValue().v2().toString()))[ FD ]
Line_5 $$ for (ShardUpgradeResult result : shardUpgradeResults) -->Line_21 $$ if (result.oldestLuceneSegment().onOrAfter(versionTuple.v2()) == false) [ FD ]
Line_8 $$ if (result.primary()) -->Line_9 $$ Integer count = successfulPrimaryShards.get(index)[ CD ]
Line_8 $$ if (result.primary()) -->Line_10 $$ successfulPrimaryShards.put(index, count == null ? 1 : count + 1)[ CD ]
Line_4 $$ Map<String, Tuple<Version, org.apache.lucene.util.Version>> versions = new HashMap()-->Line_24 $$ versions.put(index, new Tuple(version, luceneVersion))[ FD ]
Line_12 $$ Tuple<Version, org.apache.lucene.util.Version> versionTuple = versions.get(index)-->Line_16 $$ Version version = versionTuple.v1()[ FD ]
Line_12 $$ Tuple<Version, org.apache.lucene.util.Version> versionTuple = versions.get(index)-->Line_13 $$ if (versionTuple == null) [ FD ]
Line_16 $$ Version version = versionTuple.v1()-->Line_19 $$ version = result.upgradeVersion()[ FD ]
Line_13 $$ if (versionTuple == null) -->Line_18 $$ if (result.upgradeVersion().after(versionTuple.v1())) [ CD ]
Line_13 $$ if (versionTuple == null) -->Line_24 $$ versions.put(index, new Tuple(version, luceneVersion))[ CD ]
Line_33 $$ if (primaryCount == metaData.index(index).getNumberOfShards()) -->Line_34 $$ updatedVersions.put(index, new Tuple(versionEntry.getValue().v1(), versionEntry.getValue().v2().toString()))[ CD ]
Line_2 $$ protected UpgradeResponse newResponse(UpgradeRequest request, int totalShards, int successfulShards, int failedShards, List<ShardUpgradeResult> shardUpgradeResults, List<ShardOperationFailedException> shardFailures, ClusterState clusterState) -->Line_27 $$ Map<String, Tuple<org.elasticsearch.Version, String>> updatedVersions = new HashMap()[ CD ]
Line_28 $$ MetaData metaData = clusterState.metaData()-->Line_33 $$ if (primaryCount == metaData.index(index).getNumberOfShards()) [ FD ]
Line_7 $$ String index = result.getShardId().getIndex()-->Line_12 $$ Tuple<Version, org.apache.lucene.util.Version> versionTuple = versions.get(index)[ FD ]
Line_2 $$ protected UpgradeResponse newResponse(UpgradeRequest request, int totalShards, int successfulShards, int failedShards, List<ShardUpgradeResult> shardUpgradeResults, List<ShardOperationFailedException> shardFailures, ClusterState clusterState) -->Line_39 $$ return new UpgradeResponse(updatedVersions, totalShards, successfulShards, failedShards, shardFailures)[ CD ]
Line_3 $$ Map<String, Integer> successfulPrimaryShards = new HashMap()-->Line_9 $$ Integer count = successfulPrimaryShards.get(index)[ FD ]
Line_3 $$ Map<String, Integer> successfulPrimaryShards = new HashMap()-->Line_31 $$ Integer primaryCount = successfulPrimaryShards.get(index)[ FD ]
Line_18 $$ if (result.upgradeVersion().after(versionTuple.v1())) -->Line_19 $$ version = result.upgradeVersion()[ CD ]
Line_28 $$ MetaData metaData = clusterState.metaData()-->Line_32 $$ int expectedPrimaryCount = metaData.index(index).getNumberOfShards()[ FD ]
Line_13 $$ if (versionTuple == null) -->Line_17 $$ org.apache.lucene.util.Version luceneVersion = versionTuple.v2()[ CD ]
Line_7 $$ String index = result.getShardId().getIndex()-->Line_9 $$ Integer count = successfulPrimaryShards.get(index)[ FD ]
Line_7 $$ String index = result.getShardId().getIndex()-->Line_10 $$ successfulPrimaryShards.put(index, count == null ? 1 : count + 1)[ FD ]
Line_12 $$ Tuple<Version, org.apache.lucene.util.Version> versionTuple = versions.get(index)-->Line_17 $$ org.apache.lucene.util.Version luceneVersion = versionTuple.v2()[ FD ]
Line_5 $$ for (ShardUpgradeResult result : shardUpgradeResults) -->Line_18 $$ if (result.upgradeVersion().after(versionTuple.v1())) [ FD ]
Line_13 $$ if (versionTuple == null) -->Line_21 $$ if (result.oldestLuceneSegment().onOrAfter(versionTuple.v2()) == false) [ CD ]
Line_4 $$ Map<String, Tuple<Version, org.apache.lucene.util.Version>> versions = new HashMap()-->Line_12 $$ Tuple<Version, org.apache.lucene.util.Version> versionTuple = versions.get(index)[ FD ]
Line_2 $$ protected UpgradeResponse newResponse(UpgradeRequest request, int totalShards, int successfulShards, int failedShards, List<ShardUpgradeResult> shardUpgradeResults, List<ShardOperationFailedException> shardFailures, ClusterState clusterState) -->Line_28 $$ MetaData metaData = clusterState.metaData()[ CD ]
Line_33 $$ if (primaryCount == metaData.index(index).getNumberOfShards()) -->Line_36 $$ logger.warn("Not updating settings for the index [[ CD ]
Line_2 $$ protected UpgradeResponse newResponse(UpgradeRequest request, int totalShards, int successfulShards, int failedShards, List<ShardUpgradeResult> shardUpgradeResults, List<ShardOperationFailedException> shardFailures, ClusterState clusterState) -->Line_3 $$ Map<String, Integer> successfulPrimaryShards = new HashMap()[ CD ]
Line_2 $$ protected UpgradeResponse newResponse(UpgradeRequest request, int totalShards, int successfulShards, int failedShards, List<ShardUpgradeResult> shardUpgradeResults, List<ShardOperationFailedException> shardFailures, ClusterState clusterState) -->Line_4 $$ Map<String, Tuple<Version, org.apache.lucene.util.Version>> versions = new HashMap()[ CD ]
Line_7 $$ String index = result.getShardId().getIndex()-->Line_32 $$ int expectedPrimaryCount = metaData.index(index).getNumberOfShards()[ FD ]
Line_7 $$ String index = result.getShardId().getIndex()-->Line_14 $$ versions.put(index, new Tuple(result.upgradeVersion(), result.oldestLuceneSegment()))[ FD ]
Line_29 $$ for (Map.Entry<String, Tuple<Version, org.apache.lucene.util.Version>> versionEntry : versions.entrySet()) -->Line_34 $$ updatedVersions.put(index, new Tuple(versionEntry.getValue().v1(), versionEntry.getValue().v2().toString()))[ FD ]
Line_12 $$ Tuple<Version, org.apache.lucene.util.Version> versionTuple = versions.get(index)-->Line_21 $$ if (result.oldestLuceneSegment().onOrAfter(versionTuple.v2()) == false) [ FD ]
Line_2 $$ protected UpgradeResponse newResponse(UpgradeRequest request, int totalShards, int successfulShards, int failedShards, List<ShardUpgradeResult> shardUpgradeResults, List<ShardOperationFailedException> shardFailures, ClusterState clusterState) -->Line_6 $$ successfulShards++[ FD ]
Line_21 $$ if (result.oldestLuceneSegment().onOrAfter(versionTuple.v2()) == false) -->Line_22 $$ luceneVersion = result.oldestLuceneSegment()[ CD ]
Line_31 $$ Integer primaryCount = successfulPrimaryShards.get(index)-->Line_33 $$ if (primaryCount == metaData.index(index).getNumberOfShards()) [ FD ]
Line_5 $$ for (ShardUpgradeResult result : shardUpgradeResults) -->Line_14 $$ versions.put(index, new Tuple(result.upgradeVersion(), result.oldestLuceneSegment()))[ FD ]
Line_7 $$ String index = result.getShardId().getIndex()-->Line_33 $$ if (primaryCount == metaData.index(index).getNumberOfShards()) [ FD ]
Line_13 $$ if (versionTuple == null) -->Line_16 $$ Version version = versionTuple.v1()[ CD ]
Line_7 $$ String index = result.getShardId().getIndex()-->Line_36 $$ logger.warn("Not updating settings for the index [[ FD ]
Line_27 $$ Map<String, Tuple<org.elasticsearch.Version, String>> updatedVersions = new HashMap()-->Line_34 $$ updatedVersions.put(index, new Tuple(versionEntry.getValue().v1(), versionEntry.getValue().v2().toString()))[ FD ]
Line_17 $$ org.apache.lucene.util.Version luceneVersion = versionTuple.v2()-->Line_22 $$ luceneVersion = result.oldestLuceneSegment()[ FD ]
Line_4 $$ Map<String, Tuple<Version, org.apache.lucene.util.Version>> versions = new HashMap()-->Line_14 $$ versions.put(index, new Tuple(result.upgradeVersion(), result.oldestLuceneSegment()))[ FD ]
Line_7 $$ String index = result.getShardId().getIndex()-->Line_31 $$ Integer primaryCount = successfulPrimaryShards.get(index)[ FD ]
Line_29 $$ for (Map.Entry<String, Tuple<Version, org.apache.lucene.util.Version>> versionEntry : versions.entrySet()) -->Line_30 $$ String index = versionEntry.getKey()[ FD ]
