Line_3 $$ final BuilderMessageHandler wrappedHandler = new DelegatingMessageHandler() -->Line_9 $$ super.sessionTerminated(sessionId)[ FD ]
Line_2 $$ public void registerBuildMessageHandler(@NotNull final RequestFuture<? extends BuilderMessageHandler> future, @Nullable CmdlineRemoteProto.Message.ControllerMessage params) -->Line_15 $$ final UUID sessionId = future.getRequestID()[ FD ]
Line_3 $$ final BuilderMessageHandler wrappedHandler = new DelegatingMessageHandler() -->Line_5 $$ return future.getMessageHandler()[ CD ]
Line_2 $$ public void registerBuildMessageHandler(@NotNull final RequestFuture<? extends BuilderMessageHandler> future, @Nullable CmdlineRemoteProto.Message.ControllerMessage params) -->Line_15 $$ final UUID sessionId = future.getRequestID()[ CD ]
Line_2 $$ public void registerBuildMessageHandler(@NotNull final RequestFuture<? extends BuilderMessageHandler> future, @Nullable CmdlineRemoteProto.Message.ControllerMessage params) -->Line_5 $$ return future.getMessageHandler()[ FD ]
Line_2 $$ public void registerBuildMessageHandler(@NotNull final RequestFuture<? extends BuilderMessageHandler> future, @Nullable CmdlineRemoteProto.Message.ControllerMessage params) -->Line_3 $$ final BuilderMessageHandler wrappedHandler = new DelegatingMessageHandler() [ CD ]
Line_2 $$ public void registerBuildMessageHandler(@NotNull final RequestFuture<? extends BuilderMessageHandler> future, @Nullable CmdlineRemoteProto.Message.ControllerMessage params) -->Line_11 $$ future.setDone()[ FD ]
Line_3 $$ final BuilderMessageHandler wrappedHandler = new DelegatingMessageHandler() -->Line_16 $$ mySessionDescriptors.put(sessionId, new SessionData(sessionId, wrappedHandler, params))[ FD ]
Line_2 $$ public void registerBuildMessageHandler(@NotNull final RequestFuture<? extends BuilderMessageHandler> future, @Nullable CmdlineRemoteProto.Message.ControllerMessage params) -->Line_16 $$ mySessionDescriptors.put(sessionId, new SessionData(sessionId, wrappedHandler, params))[ CD ]
