Line_6 $$ value = unwrapValue(((Wrapper) value).unwrap())-->Line_45 $$ value = list[ FD ]
Line_2 $$ public static Object unwrapValue(Object value) -->Line_6 $$ value = unwrapValue(((Wrapper) value).unwrap())[ FD ]
Line_10 $$ value = Context.jsToJava(value, String.class)-->Line_46 $$ if (value instanceof Map) [ FD ]
Line_31 $$ if (propId instanceof String) -->Line_33 $$ propValues.put((String) propId, unwrapValue(val))[ CD ]
Line_5 $$ if (value instanceof Wrapper) -->Line_7 $$ if (value instanceof IdScriptableObject) [ CD ]
Line_9 $$ if ("String".equals(className)) -->Line_12 $$ if ("Date".equals(className)) [ CD ]
Line_13 $$ value = Context.jsToJava(value, Date.class)-->Line_36 $$ value = propValues[ FD ]
Line_10 $$ value = Context.jsToJava(value, String.class)-->Line_36 $$ value = propValues[ FD ]
Line_45 $$ value = list-->Line_52 $$ value = copyMap[ FD ]
Line_19 $$ for (int i = 0; i < propIds.length; i++) -->Line_20 $$ Integer propId = (Integer) propIds[i][ CD ]
Line_39 $$ if (value instanceof Object[]) -->Line_46 $$ if (value instanceof Map) [ CD ]
Line_19 $$ for (int i = 0; i < propIds.length; i++) -->Line_29 $$ for (int i = 0; i < propIds.length; i++) [ FD ]
Line_12 $$ if ("Date".equals(className)) -->Line_13 $$ value = Context.jsToJava(value, Date.class)[ CD ]
Line_17 $$ if (values instanceof NativeArray && isArray(propIds)) -->Line_29 $$ for (int i = 0; i < propIds.length; i++) [ CD ]
Line_7 $$ if (value instanceof IdScriptableObject) -->Line_8 $$ String className = ((IdScriptableObject) value).getClassName()[ CD ]
Line_39 $$ if (value instanceof Object[]) -->Line_42 $$ for (int i = 0; i < array.length; i++) [ CD ]
Line_12 $$ if ("Date".equals(className)) -->Line_15 $$ Scriptable values = (Scriptable) value[ CD ]
Line_6 $$ value = unwrapValue(((Wrapper) value).unwrap())-->Line_7 $$ if (value instanceof IdScriptableObject) [ FD ]
Line_2 $$ public static Object unwrapValue(Object value) -->Line_26 $$ value = propValues[ FD ]
Line_18 $$ List<Object> propValues = new ArrayList<Object>(propIds.length)-->Line_23 $$ propValues.add(unwrapValue(val))[ FD ]
Line_36 $$ value = propValues-->Line_52 $$ value = copyMap[ FD ]
Line_49 $$ for (Object key : map.keySet()) -->Line_50 $$ copyMap.put(key, unwrapValue(map.get(key)))[ FD ]
Line_13 $$ value = Context.jsToJava(value, Date.class)-->Line_39 $$ if (value instanceof Object[]) [ FD ]
Line_26 $$ value = propValues-->Line_36 $$ value = propValues[ FD ]
Line_41 $$ ArrayList<Object> list = new ArrayList<Object>(array.length)-->Line_43 $$ list.add(unwrapValue(array[i]))[ FD ]
Line_2 $$ public static Object unwrapValue(Object value) -->Line_39 $$ if (value instanceof Object[]) [ FD ]
Line_2 $$ public static Object unwrapValue(Object value) -->Line_7 $$ if (value instanceof IdScriptableObject) [ FD ]
Line_19 $$ for (int i = 0; i < propIds.length; i++) -->Line_42 $$ for (int i = 0; i < array.length; i++) [ FD ]
Line_18 $$ List<Object> propValues = new ArrayList<Object>(propIds.length)-->Line_33 $$ propValues.put((String) propId, unwrapValue(val))[ FD ]
Line_6 $$ value = unwrapValue(((Wrapper) value).unwrap())-->Line_26 $$ value = propValues[ FD ]
Line_17 $$ if (values instanceof NativeArray && isArray(propIds)) -->Line_36 $$ value = propValues[ CD ]
Line_18 $$ List<Object> propValues = new ArrayList<Object>(propIds.length)-->Line_26 $$ value = propValues[ FD ]
Line_47 $$ Map<Object, Object> map = (Map<Object, Object>) value-->Line_50 $$ copyMap.put(key, unwrapValue(map.get(key)))[ FD ]
Line_41 $$ ArrayList<Object> list = new ArrayList<Object>(array.length)-->Line_45 $$ value = list[ FD ]
Line_20 $$ Integer propId = (Integer) propIds[i]-->Line_22 $$ Object val = values.get(propId, values)[ FD ]
Line_15 $$ Scriptable values = (Scriptable) value-->Line_32 $$ Object val = values.get((String) propId, values)[ FD ]
Line_2 $$ public static Object unwrapValue(Object value) -->Line_52 $$ value = copyMap[ FD ]
Line_12 $$ if ("Date".equals(className)) -->Line_17 $$ if (values instanceof NativeArray && isArray(propIds)) [ CD ]
Line_21 $$ if (propId instanceof Integer) -->Line_23 $$ propValues.add(unwrapValue(val))[ CD ]
Line_22 $$ Object val = values.get(propId, values)-->Line_23 $$ propValues.add(unwrapValue(val))[ FD ]
Line_2 $$ public static Object unwrapValue(Object value) -->Line_54 $$ return value[ CD ]
Line_10 $$ value = Context.jsToJava(value, String.class)-->Line_52 $$ value = copyMap[ FD ]
Line_39 $$ if (value instanceof Object[]) -->Line_41 $$ ArrayList<Object> list = new ArrayList<Object>(array.length)[ CD ]
Line_21 $$ if (propId instanceof Integer) -->Line_22 $$ Object val = values.get(propId, values)[ CD ]
Line_13 $$ value = Context.jsToJava(value, Date.class)-->Line_45 $$ value = list[ FD ]
Line_48 $$ Map<Object, Object> copyMap = new HashMap<Object, Object>(map.size())-->Line_52 $$ value = copyMap[ FD ]
Line_2 $$ public static Object unwrapValue(Object value) -->Line_3 $$ if (value == null) [ CD ]
Line_36 $$ value = propValues-->Line_45 $$ value = list[ FD ]
Line_2 $$ public static Object unwrapValue(Object value) -->Line_36 $$ value = propValues[ FD ]
Line_32 $$ Object val = values.get((String) propId, values)-->Line_33 $$ propValues.put((String) propId, unwrapValue(val))[ FD ]
Line_17 $$ if (values instanceof NativeArray && isArray(propIds)) -->Line_26 $$ value = propValues[ CD ]
Line_36 $$ value = propValues-->Line_39 $$ if (value instanceof Object[]) [ FD ]
Line_29 $$ for (int i = 0; i < propIds.length; i++) -->Line_42 $$ for (int i = 0; i < array.length; i++) [ FD ]
Line_6 $$ value = unwrapValue(((Wrapper) value).unwrap())-->Line_46 $$ if (value instanceof Map) [ FD ]
Line_13 $$ value = Context.jsToJava(value, Date.class)-->Line_26 $$ value = propValues[ FD ]
Line_18 $$ List<Object> propValues = new ArrayList<Object>(propIds.length)-->Line_36 $$ value = propValues[ FD ]
Line_10 $$ value = Context.jsToJava(value, String.class)-->Line_39 $$ if (value instanceof Object[]) [ FD ]
Line_29 $$ for (int i = 0; i < propIds.length; i++) -->Line_31 $$ if (propId instanceof String) [ CD ]
Line_30 $$ Object propId = propIds[i]-->Line_31 $$ if (propId instanceof String) [ FD ]
Line_5 $$ if (value instanceof Wrapper) -->Line_6 $$ value = unwrapValue(((Wrapper) value).unwrap())[ CD ]
Line_45 $$ value = list-->Line_46 $$ if (value instanceof Map) [ FD ]
Line_42 $$ for (int i = 0; i < array.length; i++) -->Line_43 $$ list.add(unwrapValue(array[i]))[ CD ]
Line_31 $$ if (propId instanceof String) -->Line_32 $$ Object val = values.get((String) propId, values)[ CD ]
Line_16 $$ Object[] propIds = values.getIds()-->Line_17 $$ if (values instanceof NativeArray && isArray(propIds)) [ FD ]
Line_6 $$ value = unwrapValue(((Wrapper) value).unwrap())-->Line_39 $$ if (value instanceof Object[]) [ FD ]
Line_7 $$ if (value instanceof IdScriptableObject) -->Line_9 $$ if ("String".equals(className)) [ CD ]
Line_7 $$ if (value instanceof IdScriptableObject) -->Line_39 $$ if (value instanceof Object[]) [ CD ]
Line_3 $$ if (value == null) -->Line_5 $$ if (value instanceof Wrapper) [ CD ]
Line_46 $$ if (value instanceof Map) -->Line_47 $$ Map<Object, Object> map = (Map<Object, Object>) value[ CD ]
Line_26 $$ value = propValues-->Line_46 $$ if (value instanceof Map) [ FD ]
Line_10 $$ value = Context.jsToJava(value, String.class)-->Line_13 $$ value = Context.jsToJava(value, Date.class)[ FD ]
Line_15 $$ Scriptable values = (Scriptable) value-->Line_16 $$ Object[] propIds = values.getIds()[ FD ]
Line_8 $$ String className = ((IdScriptableObject) value).getClassName()-->Line_9 $$ if ("String".equals(className)) [ FD ]
Line_39 $$ if (value instanceof Object[]) -->Line_45 $$ value = list[ CD ]
Line_39 $$ if (value instanceof Object[]) -->Line_40 $$ Object[] array = (Object[]) value[ CD ]
Line_46 $$ if (value instanceof Map) -->Line_48 $$ Map<Object, Object> copyMap = new HashMap<Object, Object>(map.size())[ CD ]
Line_3 $$ if (value == null) -->Line_4 $$ return null[ CD ]
Line_9 $$ if ("String".equals(className)) -->Line_10 $$ value = Context.jsToJava(value, String.class)[ CD ]
Line_47 $$ Map<Object, Object> map = (Map<Object, Object>) value-->Line_49 $$ for (Object key : map.keySet()) [ FD ]
Line_6 $$ value = unwrapValue(((Wrapper) value).unwrap())-->Line_10 $$ value = Context.jsToJava(value, String.class)[ FD ]
Line_2 $$ public static Object unwrapValue(Object value) -->Line_45 $$ value = list[ FD ]
Line_17 $$ if (values instanceof NativeArray && isArray(propIds)) -->Line_18 $$ List<Object> propValues = new ArrayList<Object>(propIds.length)[ CD ]
Line_2 $$ public static Object unwrapValue(Object value) -->Line_5 $$ if (value instanceof Wrapper) [ FD ]
Line_36 $$ value = propValues-->Line_46 $$ if (value instanceof Map) [ FD ]
Line_26 $$ value = propValues-->Line_39 $$ if (value instanceof Object[]) [ FD ]
Line_19 $$ for (int i = 0; i < propIds.length; i++) -->Line_21 $$ if (propId instanceof Integer) [ CD ]
Line_29 $$ for (int i = 0; i < propIds.length; i++) -->Line_30 $$ Object propId = propIds[i][ CD ]
Line_26 $$ value = propValues-->Line_45 $$ value = list[ FD ]
Line_10 $$ value = Context.jsToJava(value, String.class)-->Line_45 $$ value = list[ FD ]
Line_2 $$ public static Object unwrapValue(Object value) -->Line_13 $$ value = Context.jsToJava(value, Date.class)[ FD ]
Line_10 $$ value = Context.jsToJava(value, String.class)-->Line_26 $$ value = propValues[ FD ]
Line_2 $$ public static Object unwrapValue(Object value) -->Line_46 $$ if (value instanceof Map) [ FD ]
Line_46 $$ if (value instanceof Map) -->Line_52 $$ value = copyMap[ CD ]
Line_48 $$ Map<Object, Object> copyMap = new HashMap<Object, Object>(map.size())-->Line_50 $$ copyMap.put(key, unwrapValue(map.get(key)))[ FD ]
Line_12 $$ if ("Date".equals(className)) -->Line_16 $$ Object[] propIds = values.getIds()[ CD ]
Line_20 $$ Integer propId = (Integer) propIds[i]-->Line_31 $$ if (propId instanceof String) [ FD ]
Line_26 $$ value = propValues-->Line_52 $$ value = copyMap[ FD ]
Line_8 $$ String className = ((IdScriptableObject) value).getClassName()-->Line_12 $$ if ("Date".equals(className)) [ FD ]
Line_13 $$ value = Context.jsToJava(value, Date.class)-->Line_52 $$ value = copyMap[ FD ]
Line_47 $$ Map<Object, Object> map = (Map<Object, Object>) value-->Line_48 $$ Map<Object, Object> copyMap = new HashMap<Object, Object>(map.size())[ FD ]
Line_6 $$ value = unwrapValue(((Wrapper) value).unwrap())-->Line_13 $$ value = Context.jsToJava(value, Date.class)[ FD ]
Line_17 $$ if (values instanceof NativeArray && isArray(propIds)) -->Line_19 $$ for (int i = 0; i < propIds.length; i++) [ CD ]
Line_20 $$ Integer propId = (Integer) propIds[i]-->Line_21 $$ if (propId instanceof Integer) [ FD ]
Line_2 $$ public static Object unwrapValue(Object value) -->Line_10 $$ value = Context.jsToJava(value, String.class)[ FD ]
Line_15 $$ Scriptable values = (Scriptable) value-->Line_22 $$ Object val = values.get(propId, values)[ FD ]
Line_2 $$ public static Object unwrapValue(Object value) -->Line_3 $$ if (value == null) [ FD ]
Line_6 $$ value = unwrapValue(((Wrapper) value).unwrap())-->Line_36 $$ value = propValues[ FD ]
Line_22 $$ Object val = values.get(propId, values)-->Line_33 $$ propValues.put((String) propId, unwrapValue(val))[ FD ]
Line_13 $$ value = Context.jsToJava(value, Date.class)-->Line_46 $$ if (value instanceof Map) [ FD ]
Line_6 $$ value = unwrapValue(((Wrapper) value).unwrap())-->Line_52 $$ value = copyMap[ FD ]
