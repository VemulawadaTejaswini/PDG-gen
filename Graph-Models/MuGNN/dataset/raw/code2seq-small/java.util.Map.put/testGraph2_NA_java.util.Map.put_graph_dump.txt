Line_12 $$ Chunk<String> D = new Chunk<String>("d")-->Line_17 $$ expectedArcs.put(D, toSet(ABC))[ FD ]
Line_10 $$ Chunk<String> ABC = new Chunk<String>(toSet("a", "b", "c"))-->Line_11 $$ expectedNodes.add(ABC)[ FD ]
Line_8 $$ final Graph<Chunk<String>> graph = getAlgorithmsInstance().computeSCCGraph(initGraph(arcs))-->Line_18 $$ checkArcs(expectedArcs, graph)[ FD ]
Line_3 $$ final Map<String, String> arcs = new HashMap<String, String>()-->Line_5 $$ arcs.put("b", "ac")[ FD ]
Line_15 $$ final Map<Chunk<String>, Set<Chunk<String>>> expectedArcs = new HashMap<Chunk<String>, Set<Chunk<String>>>()-->Line_16 $$ expectedArcs.put(ABC, toSet())[ FD ]
Line_2 $$ public void testGraph2() -->Line_6 $$ arcs.put("c", "ad")[ CD ]
Line_9 $$ final List<Chunk<String>> expectedNodes = new ArrayList<Chunk<String>>()-->Line_14 $$ checkVertices(expectedNodes, graph.getNodes().iterator())[ FD ]
Line_3 $$ final Map<String, String> arcs = new HashMap<String, String>()-->Line_8 $$ final Graph<Chunk<String>> graph = getAlgorithmsInstance().computeSCCGraph(initGraph(arcs))[ FD ]
Line_2 $$ public void testGraph2() -->Line_11 $$ expectedNodes.add(ABC)[ CD ]
Line_2 $$ public void testGraph2() -->Line_4 $$ arcs.put("a", "b")[ CD ]
Line_10 $$ Chunk<String> ABC = new Chunk<String>(toSet("a", "b", "c"))-->Line_17 $$ expectedArcs.put(D, toSet(ABC))[ FD ]
Line_12 $$ Chunk<String> D = new Chunk<String>("d")-->Line_13 $$ expectedNodes.add(D)[ FD ]
Line_10 $$ Chunk<String> ABC = new Chunk<String>(toSet("a", "b", "c"))-->Line_16 $$ expectedArcs.put(ABC, toSet())[ FD ]
Line_3 $$ final Map<String, String> arcs = new HashMap<String, String>()-->Line_6 $$ arcs.put("c", "ad")[ FD ]
Line_15 $$ final Map<Chunk<String>, Set<Chunk<String>>> expectedArcs = new HashMap<Chunk<String>, Set<Chunk<String>>>()-->Line_18 $$ checkArcs(expectedArcs, graph)[ FD ]
Line_9 $$ final List<Chunk<String>> expectedNodes = new ArrayList<Chunk<String>>()-->Line_13 $$ expectedNodes.add(D)[ FD ]
Line_2 $$ public void testGraph2() -->Line_7 $$ arcs.put("d", "")[ CD ]
Line_9 $$ final List<Chunk<String>> expectedNodes = new ArrayList<Chunk<String>>()-->Line_11 $$ expectedNodes.add(ABC)[ FD ]
Line_2 $$ public void testGraph2() -->Line_3 $$ final Map<String, String> arcs = new HashMap<String, String>()[ CD ]
Line_15 $$ final Map<Chunk<String>, Set<Chunk<String>>> expectedArcs = new HashMap<Chunk<String>, Set<Chunk<String>>>()-->Line_17 $$ expectedArcs.put(D, toSet(ABC))[ FD ]
Line_2 $$ public void testGraph2() -->Line_16 $$ expectedArcs.put(ABC, toSet())[ CD ]
Line_2 $$ public void testGraph2() -->Line_13 $$ expectedNodes.add(D)[ CD ]
Line_2 $$ public void testGraph2() -->Line_14 $$ checkVertices(expectedNodes, graph.getNodes().iterator())[ CD ]
Line_2 $$ public void testGraph2() -->Line_15 $$ final Map<Chunk<String>, Set<Chunk<String>>> expectedArcs = new HashMap<Chunk<String>, Set<Chunk<String>>>()[ CD ]
Line_2 $$ public void testGraph2() -->Line_18 $$ checkArcs(expectedArcs, graph)[ CD ]
Line_2 $$ public void testGraph2() -->Line_17 $$ expectedArcs.put(D, toSet(ABC))[ CD ]
Line_3 $$ final Map<String, String> arcs = new HashMap<String, String>()-->Line_7 $$ arcs.put("d", "")[ FD ]
Line_3 $$ final Map<String, String> arcs = new HashMap<String, String>()-->Line_4 $$ arcs.put("a", "b")[ FD ]
Line_8 $$ final Graph<Chunk<String>> graph = getAlgorithmsInstance().computeSCCGraph(initGraph(arcs))-->Line_14 $$ checkVertices(expectedNodes, graph.getNodes().iterator())[ FD ]
Line_2 $$ public void testGraph2() -->Line_5 $$ arcs.put("b", "ac")[ CD ]
Line_2 $$ public void testGraph2() -->Line_10 $$ Chunk<String> ABC = new Chunk<String>(toSet("a", "b", "c"))[ CD ]
Line_2 $$ public void testGraph2() -->Line_9 $$ final List<Chunk<String>> expectedNodes = new ArrayList<Chunk<String>>()[ CD ]
Line_2 $$ public void testGraph2() -->Line_8 $$ final Graph<Chunk<String>> graph = getAlgorithmsInstance().computeSCCGraph(initGraph(arcs))[ CD ]
Line_2 $$ public void testGraph2() -->Line_12 $$ Chunk<String> D = new Chunk<String>("d")[ CD ]
