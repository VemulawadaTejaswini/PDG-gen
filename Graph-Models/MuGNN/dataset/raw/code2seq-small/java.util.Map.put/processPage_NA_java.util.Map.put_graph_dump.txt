Line_2 $$ private void processPage(Page page) -->Line_19 $$ Block[] row = getSingleValueBlocks(page, position)[ FD ]
Line_3 $$ Optional<GroupByIdBlock> partitionIds = Optional.empty()-->Line_7 $$ partitionIds = Optional.of(hash.getGroupIds(page))[ FD ]
Line_4 $$ if (groupByHash.isPresent()) -->Line_5 $$ GroupByHash hash = groupByHash.get()[ CD ]
Line_7 $$ partitionIds = Optional.of(hash.getGroupIds(page))-->Line_13 $$ long partitionId = groupByHash.isPresent() ? partitionIds.get().getGroupId(position) : 0[ FD ]
Line_19 $$ Block[] row = getSingleValueBlocks(page, position)-->Line_20 $$ sizeDelta += partitionBuilder.addRow(row)[ FD ]
Line_19 $$ Block[] row = getSingleValueBlocks(page, position)-->Line_23 $$ sizeDelta += partitionBuilder.replaceRow(row)[ FD ]
Line_2 $$ private void processPage(Page page) -->Line_12 $$ for (int position = 0; position < page.getPositionCount(); position++) [ CD ]
Line_26 $$ if (sizeDelta > 0) -->Line_27 $$ operatorContext.reserveMemory(sizeDelta)[ CD ]
Line_10 $$ long sizeDelta = 0-->Line_20 $$ sizeDelta += partitionBuilder.addRow(row)[ FD ]
Line_17 $$ PartitionBuilder partitionBuilder = partitionRows.get(partitionId)-->Line_20 $$ sizeDelta += partitionBuilder.addRow(row)[ FD ]
Line_12 $$ for (int position = 0; position < page.getPositionCount(); position++) -->Line_22 $$ Block[] row = getSingleValueBlocks(page, position)[ FD ]
Line_17 $$ PartitionBuilder partitionBuilder = partitionRows.get(partitionId)-->Line_18 $$ if (partitionBuilder.getRowCount() < maxRowCountPerPartition) [ FD ]
Line_14 $$ if (!partitionRows.containsKey(partitionId)) -->Line_15 $$ partitionRows.put(partitionId, new PartitionBuilder(sortTypes, sortChannels, sortOrders, maxRowCountPerPartition))[ CD ]
Line_23 $$ sizeDelta += partitionBuilder.replaceRow(row)-->Line_29 $$ operatorContext.freeMemory(-sizeDelta)[ FD ]
Line_13 $$ long partitionId = groupByHash.isPresent() ? partitionIds.get().getGroupId(position) : 0-->Line_15 $$ partitionRows.put(partitionId, new PartitionBuilder(sortTypes, sortChannels, sortOrders, maxRowCountPerPartition))[ FD ]
Line_23 $$ sizeDelta += partitionBuilder.replaceRow(row)-->Line_27 $$ operatorContext.reserveMemory(sizeDelta)[ FD ]
Line_2 $$ private void processPage(Page page) -->Line_3 $$ Optional<GroupByIdBlock> partitionIds = Optional.empty()[ CD ]
Line_4 $$ if (groupByHash.isPresent()) -->Line_6 $$ long groupByHashSize = hash.getEstimatedSize()[ CD ]
Line_4 $$ if (groupByHash.isPresent()) -->Line_8 $$ operatorContext.reserveMemory(hash.getEstimatedSize() - groupByHashSize)[ CD ]
Line_21 $$ if (compare(position, blocks, partitionBuilder.peekLastRow()) < 0) -->Line_22 $$ Block[] row = getSingleValueBlocks(page, position)[ CD ]
Line_12 $$ for (int position = 0; position < page.getPositionCount(); position++) -->Line_18 $$ if (partitionBuilder.getRowCount() < maxRowCountPerPartition) [ CD ]
Line_21 $$ if (compare(position, blocks, partitionBuilder.peekLastRow()) < 0) -->Line_23 $$ sizeDelta += partitionBuilder.replaceRow(row)[ CD ]
Line_18 $$ if (partitionBuilder.getRowCount() < maxRowCountPerPartition) -->Line_20 $$ sizeDelta += partitionBuilder.addRow(row)[ CD ]
Line_12 $$ for (int position = 0; position < page.getPositionCount(); position++) -->Line_13 $$ long partitionId = groupByHash.isPresent() ? partitionIds.get().getGroupId(position) : 0[ CD ]
Line_23 $$ sizeDelta += partitionBuilder.replaceRow(row)-->Line_26 $$ if (sizeDelta > 0) [ FD ]
Line_17 $$ PartitionBuilder partitionBuilder = partitionRows.get(partitionId)-->Line_23 $$ sizeDelta += partitionBuilder.replaceRow(row)[ FD ]
Line_12 $$ for (int position = 0; position < page.getPositionCount(); position++) -->Line_13 $$ long partitionId = groupByHash.isPresent() ? partitionIds.get().getGroupId(position) : 0[ FD ]
Line_20 $$ sizeDelta += partitionBuilder.addRow(row)-->Line_27 $$ operatorContext.reserveMemory(sizeDelta)[ FD ]
Line_2 $$ private void processPage(Page page) -->Line_7 $$ partitionIds = Optional.of(hash.getGroupIds(page))[ FD ]
Line_2 $$ private void processPage(Page page) -->Line_12 $$ for (int position = 0; position < page.getPositionCount(); position++) [ FD ]
Line_5 $$ GroupByHash hash = groupByHash.get()-->Line_7 $$ partitionIds = Optional.of(hash.getGroupIds(page))[ FD ]
Line_2 $$ private void processPage(Page page) -->Line_26 $$ if (sizeDelta > 0) [ CD ]
Line_20 $$ sizeDelta += partitionBuilder.addRow(row)-->Line_26 $$ if (sizeDelta > 0) [ FD ]
Line_12 $$ for (int position = 0; position < page.getPositionCount(); position++) -->Line_19 $$ Block[] row = getSingleValueBlocks(page, position)[ FD ]
Line_13 $$ long partitionId = groupByHash.isPresent() ? partitionIds.get().getGroupId(position) : 0-->Line_14 $$ if (!partitionRows.containsKey(partitionId)) [ FD ]
Line_2 $$ private void processPage(Page page) -->Line_11 $$ Block[] blocks = page.getBlocks()[ CD ]
Line_10 $$ long sizeDelta = 0-->Line_27 $$ operatorContext.reserveMemory(sizeDelta)[ FD ]
Line_20 $$ sizeDelta += partitionBuilder.addRow(row)-->Line_29 $$ operatorContext.freeMemory(-sizeDelta)[ FD ]
Line_18 $$ if (partitionBuilder.getRowCount() < maxRowCountPerPartition) -->Line_21 $$ if (compare(position, blocks, partitionBuilder.peekLastRow()) < 0) [ CD ]
Line_10 $$ long sizeDelta = 0-->Line_23 $$ sizeDelta += partitionBuilder.replaceRow(row)[ FD ]
Line_18 $$ if (partitionBuilder.getRowCount() < maxRowCountPerPartition) -->Line_19 $$ Block[] row = getSingleValueBlocks(page, position)[ CD ]
Line_5 $$ GroupByHash hash = groupByHash.get()-->Line_6 $$ long groupByHashSize = hash.getEstimatedSize()[ FD ]
Line_2 $$ private void processPage(Page page) -->Line_22 $$ Block[] row = getSingleValueBlocks(page, position)[ FD ]
Line_10 $$ long sizeDelta = 0-->Line_26 $$ if (sizeDelta > 0) [ FD ]
Line_10 $$ long sizeDelta = 0-->Line_29 $$ operatorContext.freeMemory(-sizeDelta)[ FD ]
Line_17 $$ PartitionBuilder partitionBuilder = partitionRows.get(partitionId)-->Line_21 $$ if (compare(position, blocks, partitionBuilder.peekLastRow()) < 0) [ FD ]
Line_2 $$ private void processPage(Page page) -->Line_4 $$ if (groupByHash.isPresent()) [ CD ]
Line_12 $$ for (int position = 0; position < page.getPositionCount(); position++) -->Line_14 $$ if (!partitionRows.containsKey(partitionId)) [ CD ]
Line_12 $$ for (int position = 0; position < page.getPositionCount(); position++) -->Line_17 $$ PartitionBuilder partitionBuilder = partitionRows.get(partitionId)[ CD ]
Line_2 $$ private void processPage(Page page) -->Line_10 $$ long sizeDelta = 0[ CD ]
Line_3 $$ Optional<GroupByIdBlock> partitionIds = Optional.empty()-->Line_13 $$ long partitionId = groupByHash.isPresent() ? partitionIds.get().getGroupId(position) : 0[ FD ]
Line_26 $$ if (sizeDelta > 0) -->Line_29 $$ operatorContext.freeMemory(-sizeDelta)[ CD ]
Line_5 $$ GroupByHash hash = groupByHash.get()-->Line_8 $$ operatorContext.reserveMemory(hash.getEstimatedSize() - groupByHashSize)[ FD ]
Line_2 $$ private void processPage(Page page) -->Line_11 $$ Block[] blocks = page.getBlocks()[ FD ]
Line_12 $$ for (int position = 0; position < page.getPositionCount(); position++) -->Line_21 $$ if (compare(position, blocks, partitionBuilder.peekLastRow()) < 0) [ FD ]
Line_11 $$ Block[] blocks = page.getBlocks()-->Line_21 $$ if (compare(position, blocks, partitionBuilder.peekLastRow()) < 0) [ FD ]
Line_4 $$ if (groupByHash.isPresent()) -->Line_7 $$ partitionIds = Optional.of(hash.getGroupIds(page))[ CD ]
Line_20 $$ sizeDelta += partitionBuilder.addRow(row)-->Line_23 $$ sizeDelta += partitionBuilder.replaceRow(row)[ FD ]
Line_13 $$ long partitionId = groupByHash.isPresent() ? partitionIds.get().getGroupId(position) : 0-->Line_17 $$ PartitionBuilder partitionBuilder = partitionRows.get(partitionId)[ FD ]
