Line_34 $$ if (targetStatus != null) -->Line_35 $$ if (targetStatus.isOpen) [ CD ]
Line_6 $$ final Hashtable<String, ?> resolutionsInfo = fields.get(1)-->Line_7 $$ final List<String> resolutions = extractNotEmptyNames((Vector<Hashtable<String, ?>>) resolutionsInfo.get("values"))[ FD ]
Line_2 $$ public Set<CustomTaskState> getAvailableTaskStates(@NotNull Task task) throws Exception -->Line_47 $$ return Collections.emptySet()[ CD ]
Line_20 $$ final String name = (String) statusInfo.get("name")-->Line_21 $$ if (StringUtil.isEmpty(name)) [ FD ]
Line_28 $$ if (currentState != null) -->Line_29 $$ final Status status = statuses.get(currentState)[ CD ]
Line_33 $$ final Status targetStatus = statuses.get(targetStatusName)-->Line_34 $$ if (targetStatus != null) [ FD ]
Line_18 $$ final Map<String, Status> statuses = new HashMap<String, Status>()-->Line_33 $$ final Status targetStatus = statuses.get(targetStatusName)[ FD ]
Line_18 $$ final Map<String, Status> statuses = new HashMap<String, Status>()-->Line_29 $$ final Status status = statuses.get(currentState)[ FD ]
Line_2 $$ public Set<CustomTaskState> getAvailableTaskStates(@NotNull Task task) throws Exception -->Line_18 $$ final Map<String, Status> statuses = new HashMap<String, Status>()[ CD ]
Line_2 $$ public Set<CustomTaskState> getAvailableTaskStates(@NotNull Task task) throws Exception -->Line_5 $$ final Hashtable<String, ?> statusesInfo = fields.get(0)[ CD ]
Line_5 $$ final Hashtable<String, ?> statusesInfo = fields.get(0)-->Line_19 $$ for (Hashtable<String, ?> statusInfo : (Vector<Hashtable<String, ?>>) statusesInfo.get("values")) [ FD ]
Line_2 $$ public Set<CustomTaskState> getAvailableTaskStates(@NotNull Task task) throws Exception -->Line_6 $$ final Hashtable<String, ?> resolutionsInfo = fields.get(1)[ CD ]
Line_19 $$ for (Hashtable<String, ?> statusInfo : (Vector<Hashtable<String, ?>>) statusesInfo.get("values")) -->Line_20 $$ final String name = (String) statusInfo.get("name")[ FD ]
Line_32 $$ for (String targetStatusName : status.canChangeTo) -->Line_33 $$ final Status targetStatus = statuses.get(targetStatusName)[ FD ]
Line_20 $$ final String name = (String) statusInfo.get("name")-->Line_25 $$ statuses.put(name, new Status(name, (Boolean) statusInfo.get("is_open"), targetStateNames))[ FD ]
Line_30 $$ if (status != null) -->Line_31 $$ final Set<CustomTaskState> result = new HashSet<CustomTaskState>()[ CD ]
Line_31 $$ final Set<CustomTaskState> result = new HashSet<CustomTaskState>()-->Line_36 $$ result.add(new CustomTaskState(targetStatusName, targetStatusName))[ FD ]
Line_2 $$ public Set<CustomTaskState> getAvailableTaskStates(@NotNull Task task) throws Exception -->Line_27 $$ final String currentState = getCustomStateName(task)[ FD ]
Line_33 $$ final Status targetStatus = statuses.get(targetStatusName)-->Line_35 $$ if (targetStatus.isOpen) [ FD ]
Line_28 $$ if (currentState != null) -->Line_30 $$ if (status != null) [ CD ]
Line_31 $$ final Set<CustomTaskState> result = new HashSet<CustomTaskState>()-->Line_39 $$ result.add(new CustomTaskState(targetStatusName + ":" + resolution, targetStatusName + " (" + resolution + ")"))[ FD ]
Line_19 $$ for (Hashtable<String, ?> statusInfo : (Vector<Hashtable<String, ?>>) statusesInfo.get("values")) -->Line_24 $$ final List<String> targetStateNames = extractNotEmptyNames((Vector<Hashtable<String, ?>>) statusInfo.get("can_change_to"))[ FD ]
Line_4 $$ final Vector<Hashtable<String, ?>> fields = (Vector<Hashtable<String, ?>>) response.get("fields")-->Line_5 $$ final Hashtable<String, ?> statusesInfo = fields.get(0)[ FD ]
Line_2 $$ public Set<CustomTaskState> getAvailableTaskStates(@NotNull Task task) throws Exception -->Line_7 $$ final List<String> resolutions = extractNotEmptyNames((Vector<Hashtable<String, ?>>) resolutionsInfo.get("values"))[ CD ]
Line_2 $$ public Set<CustomTaskState> getAvailableTaskStates(@NotNull Task task) throws Exception -->Line_27 $$ final String currentState = getCustomStateName(task)[ CD ]
Line_18 $$ final Map<String, Status> statuses = new HashMap<String, Status>()-->Line_25 $$ statuses.put(name, new Status(name, (Boolean) statusInfo.get("is_open"), targetStateNames))[ FD ]
Line_2 $$ public Set<CustomTaskState> getAvailableTaskStates(@NotNull Task task) throws Exception -->Line_3 $$ final Hashtable<String, ?> response = new BugzillaXmlRpcRequest("Bug.fields").withParameter("names", newVector("bug_status", "resolution")).requireAuthentication(true).execute()[ CD ]
Line_3 $$ final Hashtable<String, ?> response = new BugzillaXmlRpcRequest("Bug.fields").withParameter("names", newVector("bug_status", "resolution")).requireAuthentication(true).execute()-->Line_4 $$ final Vector<Hashtable<String, ?>> fields = (Vector<Hashtable<String, ?>>) response.get("fields")[ FD ]
Line_2 $$ public Set<CustomTaskState> getAvailableTaskStates(@NotNull Task task) throws Exception -->Line_28 $$ if (currentState != null) [ CD ]
Line_27 $$ final String currentState = getCustomStateName(task)-->Line_29 $$ final Status status = statuses.get(currentState)[ FD ]
Line_2 $$ public Set<CustomTaskState> getAvailableTaskStates(@NotNull Task task) throws Exception -->Line_4 $$ final Vector<Hashtable<String, ?>> fields = (Vector<Hashtable<String, ?>>) response.get("fields")[ CD ]
Line_4 $$ final Vector<Hashtable<String, ?>> fields = (Vector<Hashtable<String, ?>>) response.get("fields")-->Line_6 $$ final Hashtable<String, ?> resolutionsInfo = fields.get(1)[ FD ]
Line_35 $$ if (targetStatus.isOpen) -->Line_36 $$ result.add(new CustomTaskState(targetStatusName, targetStatusName))[ CD ]
Line_19 $$ for (Hashtable<String, ?> statusInfo : (Vector<Hashtable<String, ?>>) statusesInfo.get("values")) -->Line_25 $$ statuses.put(name, new Status(name, (Boolean) statusInfo.get("is_open"), targetStateNames))[ FD ]
Line_27 $$ final String currentState = getCustomStateName(task)-->Line_28 $$ if (currentState != null) [ FD ]
Line_29 $$ final Status status = statuses.get(currentState)-->Line_30 $$ if (status != null) [ FD ]
Line_30 $$ if (status != null) -->Line_44 $$ return result[ CD ]
