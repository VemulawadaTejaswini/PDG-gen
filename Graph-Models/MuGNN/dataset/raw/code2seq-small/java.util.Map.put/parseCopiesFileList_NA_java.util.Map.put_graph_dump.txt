Line_2 $$ static Map<String, String> parseCopiesFileList(@Nullable String fileListString) -->Line_16 $$ return copies[ CD ]
Line_6 $$ Map<String, String> copies = new HashMap<String, String>()-->Line_14 $$ copies.put(files[1].substring(0, files[1].length() - 1), files[0])[ FD ]
Line_2 $$ static Map<String, String> parseCopiesFileList(@Nullable String fileListString) -->Line_7 $$ List<String> filesList = StringUtil.split(fileListString, HgChangesetUtil.FILE_SEPARATOR)[ CD ]
Line_10 $$ if (files.length != 2) -->Line_12 $$ return copies[ CD ]
Line_2 $$ static Map<String, String> parseCopiesFileList(@Nullable String fileListString) -->Line_3 $$ if (StringUtil.isEmpty(fileListString)) [ CD ]
Line_10 $$ if (files.length != 2) -->Line_11 $$ LOG.info("Couldn't parse copied files: " + fileListString)[ CD ]
Line_2 $$ static Map<String, String> parseCopiesFileList(@Nullable String fileListString) -->Line_6 $$ Map<String, String> copies = new HashMap<String, String>()[ CD ]
Line_2 $$ static Map<String, String> parseCopiesFileList(@Nullable String fileListString) -->Line_3 $$ if (StringUtil.isEmpty(fileListString)) [ FD ]
Line_3 $$ if (StringUtil.isEmpty(fileListString)) -->Line_4 $$ return Collections.emptyMap()[ CD ]
Line_2 $$ static Map<String, String> parseCopiesFileList(@Nullable String fileListString) -->Line_7 $$ List<String> filesList = StringUtil.split(fileListString, HgChangesetUtil.FILE_SEPARATOR)[ FD ]
Line_8 $$ for (String pairOfFiles : filesList) -->Line_9 $$ String[] files = pairOfFiles.split("\\s+\\(")[ FD ]
