Line_2 $$ protected ClusterState allocateNew(ClusterState state) -->Line_8 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()[ CD ]
Line_6 $$ RoutingTable routingTable = RoutingTable.builder(state.routingTable()).addAsNew(metaData.index(index)).build()-->Line_14 $$ routingTable = strategy.applyStartedShards(clusterState, routingTable.shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_10 $$ while (true) -->Line_15 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ CD ]
Line_23 $$ count = 0-->Line_26 $$ counts.put(s, count)[ FD ]
Line_2 $$ protected ClusterState allocateNew(ClusterState state) -->Line_9 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ CD ]
Line_5 $$ MetaData metaData = MetaData.builder(state.metaData()).put(IndexMetaData.builder(index).settings(settings(Version.CURRENT)).numberOfShards(5).numberOfReplicas(1)).build()-->Line_7 $$ ClusterState clusterState = ClusterState.builder(state).metaData(metaData).routingTable(routingTable).build()[ FD ]
Line_8 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_11 $$ if (routingTable.shardsWithState(INITIALIZING).isEmpty()) [ FD ]
Line_23 $$ count = 0-->Line_31 $$ assertTrue("Node: " + count.getKey() + " has shard mismatch: " + count.getValue(), count.getValue() <= 3)[ FD ]
Line_2 $$ protected ClusterState allocateNew(ClusterState state) -->Line_4 $$ AllocationService strategy = createAllocationService(settingsBuilder().build())[ CD ]
Line_8 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_15 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_21 $$ Integer count = counts.get(s)-->Line_31 $$ assertTrue("Node: " + count.getKey() + " has shard mismatch: " + count.getValue(), count.getValue() <= 3)[ FD ]
Line_6 $$ RoutingTable routingTable = RoutingTable.builder(state.routingTable()).addAsNew(metaData.index(index)).build()-->Line_7 $$ ClusterState clusterState = ClusterState.builder(state).metaData(metaData).routingTable(routingTable).build()[ FD ]
Line_22 $$ if (count == null) -->Line_23 $$ count = 0[ CD ]
Line_23 $$ count = 0-->Line_25 $$ count++[ FD ]
Line_10 $$ while (true) -->Line_14 $$ routingTable = strategy.applyStartedShards(clusterState, routingTable.shardsWithState(INITIALIZING)).routingTable()[ CD ]
Line_7 $$ ClusterState clusterState = ClusterState.builder(state).metaData(metaData).routingTable(routingTable).build()-->Line_14 $$ routingTable = strategy.applyStartedShards(clusterState, routingTable.shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_21 $$ Integer count = counts.get(s)-->Line_30 $$ assertTrue("Node: " + count.getKey() + " has shard mismatch: " + count.getValue(), count.getValue() >= 2)[ FD ]
Line_19 $$ for (ShardRouting r : table) -->Line_20 $$ String s = r.currentNodeId()[ FD ]
Line_8 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_9 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_7 $$ ClusterState clusterState = ClusterState.builder(state).metaData(metaData).routingTable(routingTable).build()-->Line_15 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_14 $$ routingTable = strategy.applyStartedShards(clusterState, routingTable.shardsWithState(INITIALIZING)).routingTable()-->Line_11 $$ if (routingTable.shardsWithState(INITIALIZING).isEmpty()) [ FD ]
Line_2 $$ protected ClusterState allocateNew(ClusterState state) -->Line_5 $$ MetaData metaData = MetaData.builder(state.metaData()).put(IndexMetaData.builder(index).settings(settings(Version.CURRENT)).numberOfShards(5).numberOfReplicas(1)).build()[ FD ]
Line_4 $$ AllocationService strategy = createAllocationService(settingsBuilder().build())-->Line_14 $$ routingTable = strategy.applyStartedShards(clusterState, routingTable.shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_8 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_14 $$ routingTable = strategy.applyStartedShards(clusterState, routingTable.shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_2 $$ protected ClusterState allocateNew(ClusterState state) -->Line_33 $$ return clusterState[ CD ]
Line_21 $$ Integer count = counts.get(s)-->Line_26 $$ counts.put(s, count)[ FD ]
Line_6 $$ RoutingTable routingTable = RoutingTable.builder(state.routingTable()).addAsNew(metaData.index(index)).build()-->Line_15 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_6 $$ RoutingTable routingTable = RoutingTable.builder(state.routingTable()).addAsNew(metaData.index(index)).build()-->Line_18 $$ for (IndexShardRoutingTable table : routingTable.index(index)) [ FD ]
Line_14 $$ routingTable = strategy.applyStartedShards(clusterState, routingTable.shardsWithState(INITIALIZING)).routingTable()-->Line_18 $$ for (IndexShardRoutingTable table : routingTable.index(index)) [ FD ]
Line_21 $$ Integer count = counts.get(s)-->Line_25 $$ count++[ FD ]
Line_23 $$ count = 0-->Line_30 $$ assertTrue("Node: " + count.getKey() + " has shard mismatch: " + count.getValue(), count.getValue() >= 2)[ FD ]
Line_3 $$ String index = "tweets-2014-12-29:00"-->Line_18 $$ for (IndexShardRoutingTable table : routingTable.index(index)) [ FD ]
Line_7 $$ ClusterState clusterState = ClusterState.builder(state).metaData(metaData).routingTable(routingTable).build()-->Line_9 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_6 $$ RoutingTable routingTable = RoutingTable.builder(state.routingTable()).addAsNew(metaData.index(index)).build()-->Line_9 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_4 $$ AllocationService strategy = createAllocationService(settingsBuilder().build())-->Line_8 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()[ FD ]
Line_5 $$ MetaData metaData = MetaData.builder(state.metaData()).put(IndexMetaData.builder(index).settings(settings(Version.CURRENT)).numberOfShards(5).numberOfReplicas(1)).build()-->Line_6 $$ RoutingTable routingTable = RoutingTable.builder(state.routingTable()).addAsNew(metaData.index(index)).build()[ FD ]
Line_2 $$ protected ClusterState allocateNew(ClusterState state) -->Line_17 $$ Map<String, Integer> counts = new HashMap()[ CD ]
Line_2 $$ protected ClusterState allocateNew(ClusterState state) -->Line_7 $$ ClusterState clusterState = ClusterState.builder(state).metaData(metaData).routingTable(routingTable).build()[ FD ]
Line_3 $$ String index = "tweets-2014-12-29:00"-->Line_5 $$ MetaData metaData = MetaData.builder(state.metaData()).put(IndexMetaData.builder(index).settings(settings(Version.CURRENT)).numberOfShards(5).numberOfReplicas(1)).build()[ FD ]
Line_9 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()-->Line_15 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_8 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_18 $$ for (IndexShardRoutingTable table : routingTable.index(index)) [ FD ]
Line_20 $$ String s = r.currentNodeId()-->Line_21 $$ Integer count = counts.get(s)[ FD ]
Line_21 $$ Integer count = counts.get(s)-->Line_22 $$ if (count == null) [ FD ]
Line_2 $$ protected ClusterState allocateNew(ClusterState state) -->Line_6 $$ RoutingTable routingTable = RoutingTable.builder(state.routingTable()).addAsNew(metaData.index(index)).build()[ CD ]
Line_7 $$ ClusterState clusterState = ClusterState.builder(state).metaData(metaData).routingTable(routingTable).build()-->Line_8 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()[ FD ]
Line_15 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()-->Line_14 $$ routingTable = strategy.applyStartedShards(clusterState, routingTable.shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_10 $$ while (true) -->Line_11 $$ if (routingTable.shardsWithState(INITIALIZING).isEmpty()) [ CD ]
Line_2 $$ protected ClusterState allocateNew(ClusterState state) -->Line_6 $$ RoutingTable routingTable = RoutingTable.builder(state.routingTable()).addAsNew(metaData.index(index)).build()[ FD ]
Line_20 $$ String s = r.currentNodeId()-->Line_26 $$ counts.put(s, count)[ FD ]
Line_2 $$ protected ClusterState allocateNew(ClusterState state) -->Line_10 $$ while (true) [ CD ]
Line_3 $$ String index = "tweets-2014-12-29:00"-->Line_6 $$ RoutingTable routingTable = RoutingTable.builder(state.routingTable()).addAsNew(metaData.index(index)).build()[ FD ]
Line_6 $$ RoutingTable routingTable = RoutingTable.builder(state.routingTable()).addAsNew(metaData.index(index)).build()-->Line_11 $$ if (routingTable.shardsWithState(INITIALIZING).isEmpty()) [ FD ]
Line_2 $$ protected ClusterState allocateNew(ClusterState state) -->Line_3 $$ String index = "tweets-2014-12-29:00"[ CD ]
Line_9 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()-->Line_14 $$ routingTable = strategy.applyStartedShards(clusterState, routingTable.shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_17 $$ Map<String, Integer> counts = new HashMap()-->Line_21 $$ Integer count = counts.get(s)[ FD ]
Line_2 $$ protected ClusterState allocateNew(ClusterState state) -->Line_7 $$ ClusterState clusterState = ClusterState.builder(state).metaData(metaData).routingTable(routingTable).build()[ CD ]
Line_21 $$ Integer count = counts.get(s)-->Line_23 $$ count = 0[ FD ]
Line_17 $$ Map<String, Integer> counts = new HashMap()-->Line_26 $$ counts.put(s, count)[ FD ]
Line_17 $$ Map<String, Integer> counts = new HashMap()-->Line_29 $$ for (Map.Entry<String, Integer> count : counts.entrySet()) [ FD ]
Line_14 $$ routingTable = strategy.applyStartedShards(clusterState, routingTable.shardsWithState(INITIALIZING)).routingTable()-->Line_15 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_6 $$ RoutingTable routingTable = RoutingTable.builder(state.routingTable()).addAsNew(metaData.index(index)).build()-->Line_8 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()[ FD ]
Line_2 $$ protected ClusterState allocateNew(ClusterState state) -->Line_5 $$ MetaData metaData = MetaData.builder(state.metaData()).put(IndexMetaData.builder(index).settings(settings(Version.CURRENT)).numberOfShards(5).numberOfReplicas(1)).build()[ CD ]
