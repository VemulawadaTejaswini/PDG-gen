Line_2 $$ private boolean isInCycle(Module module) -->Line_14 $$ return inCycle[ CD ]
Line_9 $$ for (Module moduleInCycle : cycle) -->Line_10 $$ myCycleMap.put(moduleInCycle, true)[ FD ]
Line_2 $$ private boolean isInCycle(Module module) -->Line_5 $$ Set<List<Module>> cycles = GraphAlgorithms.getInstance().findCycles(myModuleGraph, module)[ FD ]
Line_4 $$ if (inCycle == null) -->Line_6 $$ inCycle = !cycles.isEmpty()[ CD ]
Line_2 $$ private boolean isInCycle(Module module) -->Line_7 $$ myCycleMap.put(module, inCycle)[ FD ]
Line_3 $$ Boolean inCycle = myCycleMap.get(module)-->Line_4 $$ if (inCycle == null) [ FD ]
Line_3 $$ Boolean inCycle = myCycleMap.get(module)-->Line_7 $$ myCycleMap.put(module, inCycle)[ FD ]
Line_5 $$ Set<List<Module>> cycles = GraphAlgorithms.getInstance().findCycles(myModuleGraph, module)-->Line_6 $$ inCycle = !cycles.isEmpty()[ FD ]
Line_4 $$ if (inCycle == null) -->Line_5 $$ Set<List<Module>> cycles = GraphAlgorithms.getInstance().findCycles(myModuleGraph, module)[ CD ]
Line_3 $$ Boolean inCycle = myCycleMap.get(module)-->Line_6 $$ inCycle = !cycles.isEmpty()[ FD ]
Line_2 $$ private boolean isInCycle(Module module) -->Line_4 $$ if (inCycle == null) [ CD ]
Line_2 $$ private boolean isInCycle(Module module) -->Line_3 $$ Boolean inCycle = myCycleMap.get(module)[ CD ]
Line_2 $$ private boolean isInCycle(Module module) -->Line_3 $$ Boolean inCycle = myCycleMap.get(module)[ FD ]
Line_6 $$ inCycle = !cycles.isEmpty()-->Line_7 $$ myCycleMap.put(module, inCycle)[ FD ]
Line_4 $$ if (inCycle == null) -->Line_7 $$ myCycleMap.put(module, inCycle)[ CD ]
