Line_2 $$ private ModelFactory getModelFactory(HandlerMethod handlerMethod, WebDataBinderFactory binderFactory) -->Line_3 $$ SessionAttributesHandler sessionAttrHandler = getSessionAttributesHandler(handlerMethod)[ CD ]
Line_12 $$ if (entry.getKey().isApplicableToBeanType(handlerType)) -->Line_13 $$ Object bean = entry.getKey().resolveBean()[ CD ]
Line_2 $$ private ModelFactory getModelFactory(HandlerMethod handlerMethod, WebDataBinderFactory binderFactory) -->Line_4 $$ Class<?> handlerType = handlerMethod.getBeanType()[ FD ]
Line_5 $$ Set<Method> methods = this.modelAttributeCache.get(handlerType)-->Line_7 $$ methods = MethodIntrospector.selectMethods(handlerType, MODEL_ATTRIBUTE_METHODS)[ FD ]
Line_5 $$ Set<Method> methods = this.modelAttributeCache.get(handlerType)-->Line_8 $$ this.modelAttributeCache.put(handlerType, methods)[ FD ]
Line_11 $$ for (Entry<ControllerAdviceBean, Set<Method>> entry : this.modelAttributeAdviceCache.entrySet()) -->Line_13 $$ Object bean = entry.getKey().resolveBean()[ FD ]
Line_2 $$ private ModelFactory getModelFactory(HandlerMethod handlerMethod, WebDataBinderFactory binderFactory) -->Line_23 $$ return new ModelFactory(attrMethods, binderFactory, sessionAttrHandler)[ CD ]
Line_2 $$ private ModelFactory getModelFactory(HandlerMethod handlerMethod, WebDataBinderFactory binderFactory) -->Line_5 $$ Set<Method> methods = this.modelAttributeCache.get(handlerType)[ CD ]
Line_10 $$ List<InvocableHandlerMethod> attrMethods = new ArrayList<InvocableHandlerMethod>()-->Line_15 $$ attrMethods.add(createModelAttributeMethod(binderFactory, bean, method))[ FD ]
Line_14 $$ for (Method method : entry.getValue()) -->Line_15 $$ attrMethods.add(createModelAttributeMethod(binderFactory, bean, method))[ FD ]
Line_11 $$ for (Entry<ControllerAdviceBean, Set<Method>> entry : this.modelAttributeAdviceCache.entrySet()) -->Line_14 $$ for (Method method : entry.getValue()) [ FD ]
Line_4 $$ Class<?> handlerType = handlerMethod.getBeanType()-->Line_5 $$ Set<Method> methods = this.modelAttributeCache.get(handlerType)[ FD ]
Line_2 $$ private ModelFactory getModelFactory(HandlerMethod handlerMethod, WebDataBinderFactory binderFactory) -->Line_3 $$ SessionAttributesHandler sessionAttrHandler = getSessionAttributesHandler(handlerMethod)[ FD ]
Line_6 $$ if (methods == null) -->Line_7 $$ methods = MethodIntrospector.selectMethods(handlerType, MODEL_ATTRIBUTE_METHODS)[ CD ]
Line_10 $$ List<InvocableHandlerMethod> attrMethods = new ArrayList<InvocableHandlerMethod>()-->Line_21 $$ attrMethods.add(createModelAttributeMethod(binderFactory, bean, method))[ FD ]
Line_2 $$ private ModelFactory getModelFactory(HandlerMethod handlerMethod, WebDataBinderFactory binderFactory) -->Line_4 $$ Class<?> handlerType = handlerMethod.getBeanType()[ CD ]
Line_7 $$ methods = MethodIntrospector.selectMethods(handlerType, MODEL_ATTRIBUTE_METHODS)-->Line_8 $$ this.modelAttributeCache.put(handlerType, methods)[ FD ]
Line_2 $$ private ModelFactory getModelFactory(HandlerMethod handlerMethod, WebDataBinderFactory binderFactory) -->Line_10 $$ List<InvocableHandlerMethod> attrMethods = new ArrayList<InvocableHandlerMethod>()[ CD ]
Line_13 $$ Object bean = entry.getKey().resolveBean()-->Line_15 $$ attrMethods.add(createModelAttributeMethod(binderFactory, bean, method))[ FD ]
Line_14 $$ for (Method method : entry.getValue()) -->Line_21 $$ attrMethods.add(createModelAttributeMethod(binderFactory, bean, method))[ FD ]
Line_2 $$ private ModelFactory getModelFactory(HandlerMethod handlerMethod, WebDataBinderFactory binderFactory) -->Line_21 $$ attrMethods.add(createModelAttributeMethod(binderFactory, bean, method))[ FD ]
Line_2 $$ private ModelFactory getModelFactory(HandlerMethod handlerMethod, WebDataBinderFactory binderFactory) -->Line_15 $$ attrMethods.add(createModelAttributeMethod(binderFactory, bean, method))[ FD ]
Line_13 $$ Object bean = entry.getKey().resolveBean()-->Line_21 $$ attrMethods.add(createModelAttributeMethod(binderFactory, bean, method))[ FD ]
Line_11 $$ for (Entry<ControllerAdviceBean, Set<Method>> entry : this.modelAttributeAdviceCache.entrySet()) -->Line_12 $$ if (entry.getKey().isApplicableToBeanType(handlerType)) [ FD ]
Line_4 $$ Class<?> handlerType = handlerMethod.getBeanType()-->Line_12 $$ if (entry.getKey().isApplicableToBeanType(handlerType)) [ FD ]
Line_4 $$ Class<?> handlerType = handlerMethod.getBeanType()-->Line_7 $$ methods = MethodIntrospector.selectMethods(handlerType, MODEL_ATTRIBUTE_METHODS)[ FD ]
Line_5 $$ Set<Method> methods = this.modelAttributeCache.get(handlerType)-->Line_6 $$ if (methods == null) [ FD ]
Line_2 $$ private ModelFactory getModelFactory(HandlerMethod handlerMethod, WebDataBinderFactory binderFactory) -->Line_6 $$ if (methods == null) [ CD ]
Line_6 $$ if (methods == null) -->Line_8 $$ this.modelAttributeCache.put(handlerType, methods)[ CD ]
Line_4 $$ Class<?> handlerType = handlerMethod.getBeanType()-->Line_8 $$ this.modelAttributeCache.put(handlerType, methods)[ FD ]
Line_2 $$ private ModelFactory getModelFactory(HandlerMethod handlerMethod, WebDataBinderFactory binderFactory) -->Line_20 $$ Object bean = handlerMethod.getBean()[ FD ]
