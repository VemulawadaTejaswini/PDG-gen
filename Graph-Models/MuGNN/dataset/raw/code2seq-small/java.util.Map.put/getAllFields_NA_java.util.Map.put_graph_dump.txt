Line_23 $$ cached = fields.isEmpty() ? EMPTY_FIELD_ARRAY : fields.toArray(new Field[fields.size()])-->Line_25 $$ cached = EMPTY_FIELD_ARRAY[ FD ]
Line_27 $$ cached = EMPTY_FIELD_ARRAY-->Line_29 $$ cached = EMPTY_FIELD_ARRAY[ FD ]
Line_3 $$ Field[] cached = allFields.get(aClass)-->Line_31 $$ allFields.put(aClass, cached)[ FD ]
Line_7 $$ List<Field> fields = new ArrayList<Field>(declaredFields.length + 5)-->Line_18 $$ if (!fields.contains(sup)) [ FD ]
Line_3 $$ Field[] cached = allFields.get(aClass)-->Line_25 $$ cached = EMPTY_FIELD_ARRAY[ FD ]
Line_3 $$ Field[] cached = allFields.get(aClass)-->Line_23 $$ cached = fields.isEmpty() ? EMPTY_FIELD_ARRAY : fields.toArray(new Field[fields.size()])[ FD ]
Line_15 $$ Class superclass = aClass.getSuperclass()-->Line_17 $$ for (Field sup : getAllFields(superclass)) [ FD ]
Line_2 $$ private static Field[] getAllFields(@NotNull Class aClass) -->Line_31 $$ allFields.put(aClass, cached)[ FD ]
Line_3 $$ Field[] cached = allFields.get(aClass)-->Line_27 $$ cached = EMPTY_FIELD_ARRAY[ FD ]
Line_3 $$ Field[] cached = allFields.get(aClass)-->Line_29 $$ cached = EMPTY_FIELD_ARRAY[ FD ]
Line_25 $$ cached = EMPTY_FIELD_ARRAY-->Line_29 $$ cached = EMPTY_FIELD_ARRAY[ FD ]
Line_2 $$ private static Field[] getAllFields(@NotNull Class aClass) -->Line_15 $$ Class superclass = aClass.getSuperclass()[ FD ]
Line_7 $$ List<Field> fields = new ArrayList<Field>(declaredFields.length + 5)-->Line_23 $$ cached = fields.isEmpty() ? EMPTY_FIELD_ARRAY : fields.toArray(new Field[fields.size()])[ FD ]
Line_7 $$ List<Field> fields = new ArrayList<Field>(declaredFields.length + 5)-->Line_13 $$ fields.add(declaredField)[ FD ]
Line_8 $$ for (Field declaredField : declaredFields) -->Line_10 $$ Class<?> type = declaredField.getType()[ FD ]
Line_2 $$ private static Field[] getAllFields(@NotNull Class aClass) -->Line_3 $$ Field[] cached = allFields.get(aClass)[ CD ]
Line_4 $$ if (cached == null) -->Line_31 $$ allFields.put(aClass, cached)[ CD ]
Line_29 $$ cached = EMPTY_FIELD_ARRAY-->Line_31 $$ allFields.put(aClass, cached)[ FD ]
Line_8 $$ for (Field declaredField : declaredFields) -->Line_9 $$ declaredField.setAccessible(true)[ FD ]
Line_23 $$ cached = fields.isEmpty() ? EMPTY_FIELD_ARRAY : fields.toArray(new Field[fields.size()])-->Line_27 $$ cached = EMPTY_FIELD_ARRAY[ FD ]
Line_18 $$ if (!fields.contains(sup)) -->Line_19 $$ fields.add(sup)[ CD ]
Line_23 $$ cached = fields.isEmpty() ? EMPTY_FIELD_ARRAY : fields.toArray(new Field[fields.size()])-->Line_29 $$ cached = EMPTY_FIELD_ARRAY[ FD ]
Line_2 $$ private static Field[] getAllFields(@NotNull Class aClass) -->Line_3 $$ Field[] cached = allFields.get(aClass)[ FD ]
Line_8 $$ for (Field declaredField : declaredFields) -->Line_13 $$ fields.add(declaredField)[ FD ]
Line_10 $$ Class<?> type = declaredField.getType()-->Line_11 $$ if (isTrivial(type))[ FD ]
Line_25 $$ cached = EMPTY_FIELD_ARRAY-->Line_31 $$ allFields.put(aClass, cached)[ FD ]
Line_2 $$ private static Field[] getAllFields(@NotNull Class aClass) -->Line_33 $$ return cached[ CD ]
Line_3 $$ Field[] cached = allFields.get(aClass)-->Line_4 $$ if (cached == null) [ FD ]
Line_15 $$ Class superclass = aClass.getSuperclass()-->Line_16 $$ if (superclass != null) [ FD ]
Line_2 $$ private static Field[] getAllFields(@NotNull Class aClass) -->Line_4 $$ if (cached == null) [ CD ]
Line_17 $$ for (Field sup : getAllFields(superclass)) -->Line_18 $$ if (!fields.contains(sup)) [ FD ]
Line_25 $$ cached = EMPTY_FIELD_ARRAY-->Line_27 $$ cached = EMPTY_FIELD_ARRAY[ FD ]
Line_23 $$ cached = fields.isEmpty() ? EMPTY_FIELD_ARRAY : fields.toArray(new Field[fields.size()])-->Line_31 $$ allFields.put(aClass, cached)[ FD ]
Line_27 $$ cached = EMPTY_FIELD_ARRAY-->Line_31 $$ allFields.put(aClass, cached)[ FD ]
Line_2 $$ private static Field[] getAllFields(@NotNull Class aClass) -->Line_6 $$ Field[] declaredFields = aClass.getDeclaredFields()[ FD ]
Line_17 $$ for (Field sup : getAllFields(superclass)) -->Line_19 $$ fields.add(sup)[ FD ]
Line_7 $$ List<Field> fields = new ArrayList<Field>(declaredFields.length + 5)-->Line_19 $$ fields.add(sup)[ FD ]
