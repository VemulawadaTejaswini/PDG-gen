Line_3 $$ Map<String, Object> vars = new HashMap<String, Object>()-->Line_5 $$ vars.put("name", "value")[ FD ]
Line_7 $$ Object result = this.resolver.resolveArgument(this.paramAnnotated, message)-->Line_10 $$ assertEquals("value", result)[ FD ]
Line_3 $$ Map<String, Object> vars = new HashMap<String, Object>()-->Line_4 $$ vars.put("foo", "bar")[ FD ]
Line_2 $$ public void resolveArgument() throws Exception -->Line_5 $$ vars.put("name", "value")[ CD ]
Line_2 $$ public void resolveArgument() throws Exception -->Line_6 $$ Message<byte[]> message = MessageBuilder.withPayload(new byte[0]).setHeader(DestinationVariableMethodArgumentResolver.DESTINATION_TEMPLATE_VARIABLES_HEADER, vars).build()[ CD ]
Line_6 $$ Message<byte[]> message = MessageBuilder.withPayload(new byte[0]).setHeader(DestinationVariableMethodArgumentResolver.DESTINATION_TEMPLATE_VARIABLES_HEADER, vars).build()-->Line_7 $$ Object result = this.resolver.resolveArgument(this.paramAnnotated, message)[ FD ]
Line_6 $$ Message<byte[]> message = MessageBuilder.withPayload(new byte[0]).setHeader(DestinationVariableMethodArgumentResolver.DESTINATION_TEMPLATE_VARIABLES_HEADER, vars).build()-->Line_9 $$ result = this.resolver.resolveArgument(this.paramAnnotatedValue, message)[ FD ]
Line_9 $$ result = this.resolver.resolveArgument(this.paramAnnotatedValue, message)-->Line_10 $$ assertEquals("value", result)[ FD ]
Line_2 $$ public void resolveArgument() throws Exception -->Line_7 $$ Object result = this.resolver.resolveArgument(this.paramAnnotated, message)[ CD ]
Line_7 $$ Object result = this.resolver.resolveArgument(this.paramAnnotated, message)-->Line_8 $$ assertEquals("bar", result)[ FD ]
Line_2 $$ public void resolveArgument() throws Exception -->Line_3 $$ Map<String, Object> vars = new HashMap<String, Object>()[ CD ]
Line_7 $$ Object result = this.resolver.resolveArgument(this.paramAnnotated, message)-->Line_9 $$ result = this.resolver.resolveArgument(this.paramAnnotatedValue, message)[ FD ]
Line_2 $$ public void resolveArgument() throws Exception -->Line_9 $$ result = this.resolver.resolveArgument(this.paramAnnotatedValue, message)[ CD ]
Line_2 $$ public void resolveArgument() throws Exception -->Line_10 $$ assertEquals("value", result)[ CD ]
Line_3 $$ Map<String, Object> vars = new HashMap<String, Object>()-->Line_6 $$ Message<byte[]> message = MessageBuilder.withPayload(new byte[0]).setHeader(DestinationVariableMethodArgumentResolver.DESTINATION_TEMPLATE_VARIABLES_HEADER, vars).build()[ FD ]
Line_2 $$ public void resolveArgument() throws Exception -->Line_4 $$ vars.put("foo", "bar")[ CD ]
Line_2 $$ public void resolveArgument() throws Exception -->Line_8 $$ assertEquals("bar", result)[ CD ]
