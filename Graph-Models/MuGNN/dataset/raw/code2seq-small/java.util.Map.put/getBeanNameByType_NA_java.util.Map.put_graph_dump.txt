Line_5 $$ if (beanNamesByType == null) -->Line_6 $$ beanNamesByType = new ConcurrentHashMap<Class<?>, String>()[ CD ]
Line_2 $$ private String getBeanNameByType(WebApplicationContext wac, Class<?> endpointClass) -->Line_20 $$ String beanName = beanNamesByType.get(endpointClass)[ CD ]
Line_20 $$ String beanName = beanNamesByType.get(endpointClass)-->Line_21 $$ return (NO_VALUE.equals(beanName) ? null : beanName)[ FD ]
Line_11 $$ if (names.length == 1) -->Line_14 $$ beanNamesByType.put(endpointClass, NO_VALUE)[ CD ]
Line_4 $$ Map<Class<?>, String> beanNamesByType = cache.get(wacId)-->Line_14 $$ beanNamesByType.put(endpointClass, NO_VALUE)[ FD ]
Line_2 $$ private String getBeanNameByType(WebApplicationContext wac, Class<?> endpointClass) -->Line_10 $$ String[] names = wac.getBeanNamesForType(endpointClass)[ FD ]
Line_11 $$ if (names.length == 1) -->Line_12 $$ beanNamesByType.put(endpointClass, names[0])[ CD ]
Line_2 $$ private String getBeanNameByType(WebApplicationContext wac, Class<?> endpointClass) -->Line_14 $$ beanNamesByType.put(endpointClass, NO_VALUE)[ FD ]
Line_2 $$ private String getBeanNameByType(WebApplicationContext wac, Class<?> endpointClass) -->Line_21 $$ return (NO_VALUE.equals(beanName) ? null : beanName)[ CD ]
Line_2 $$ private String getBeanNameByType(WebApplicationContext wac, Class<?> endpointClass) -->Line_9 $$ if (!beanNamesByType.containsKey(endpointClass)) [ CD ]
Line_2 $$ private String getBeanNameByType(WebApplicationContext wac, Class<?> endpointClass) -->Line_5 $$ if (beanNamesByType == null) [ CD ]
Line_10 $$ String[] names = wac.getBeanNamesForType(endpointClass)-->Line_16 $$ throw new IllegalStateException("Found multiple @ServerEndpoint's of type [" + endpointClass.getName() + "]: bean names " + Arrays.asList(names))[ FD ]
Line_4 $$ Map<Class<?>, String> beanNamesByType = cache.get(wacId)-->Line_20 $$ String beanName = beanNamesByType.get(endpointClass)[ FD ]
Line_6 $$ beanNamesByType = new ConcurrentHashMap<Class<?>, String>()-->Line_20 $$ String beanName = beanNamesByType.get(endpointClass)[ FD ]
Line_6 $$ beanNamesByType = new ConcurrentHashMap<Class<?>, String>()-->Line_7 $$ cache.put(wacId, beanNamesByType)[ FD ]
Line_6 $$ beanNamesByType = new ConcurrentHashMap<Class<?>, String>()-->Line_14 $$ beanNamesByType.put(endpointClass, NO_VALUE)[ FD ]
Line_2 $$ private String getBeanNameByType(WebApplicationContext wac, Class<?> endpointClass) -->Line_20 $$ String beanName = beanNamesByType.get(endpointClass)[ FD ]
Line_6 $$ beanNamesByType = new ConcurrentHashMap<Class<?>, String>()-->Line_9 $$ if (!beanNamesByType.containsKey(endpointClass)) [ FD ]
Line_6 $$ beanNamesByType = new ConcurrentHashMap<Class<?>, String>()-->Line_12 $$ beanNamesByType.put(endpointClass, names[0])[ FD ]
Line_5 $$ if (beanNamesByType == null) -->Line_7 $$ cache.put(wacId, beanNamesByType)[ CD ]
Line_4 $$ Map<Class<?>, String> beanNamesByType = cache.get(wacId)-->Line_6 $$ beanNamesByType = new ConcurrentHashMap<Class<?>, String>()[ FD ]
Line_3 $$ String wacId = wac.getId()-->Line_7 $$ cache.put(wacId, beanNamesByType)[ FD ]
Line_3 $$ String wacId = wac.getId()-->Line_4 $$ Map<Class<?>, String> beanNamesByType = cache.get(wacId)[ FD ]
Line_11 $$ if (names.length == 1) -->Line_15 $$ if (names.length > 1) [ CD ]
Line_2 $$ private String getBeanNameByType(WebApplicationContext wac, Class<?> endpointClass) -->Line_4 $$ Map<Class<?>, String> beanNamesByType = cache.get(wacId)[ CD ]
Line_4 $$ Map<Class<?>, String> beanNamesByType = cache.get(wacId)-->Line_7 $$ cache.put(wacId, beanNamesByType)[ FD ]
Line_9 $$ if (!beanNamesByType.containsKey(endpointClass)) -->Line_11 $$ if (names.length == 1) [ CD ]
Line_2 $$ private String getBeanNameByType(WebApplicationContext wac, Class<?> endpointClass) -->Line_3 $$ String wacId = wac.getId()[ FD ]
Line_2 $$ private String getBeanNameByType(WebApplicationContext wac, Class<?> endpointClass) -->Line_9 $$ if (!beanNamesByType.containsKey(endpointClass)) [ FD ]
Line_4 $$ Map<Class<?>, String> beanNamesByType = cache.get(wacId)-->Line_12 $$ beanNamesByType.put(endpointClass, names[0])[ FD ]
Line_9 $$ if (!beanNamesByType.containsKey(endpointClass)) -->Line_10 $$ String[] names = wac.getBeanNamesForType(endpointClass)[ CD ]
Line_4 $$ Map<Class<?>, String> beanNamesByType = cache.get(wacId)-->Line_5 $$ if (beanNamesByType == null) [ FD ]
Line_2 $$ private String getBeanNameByType(WebApplicationContext wac, Class<?> endpointClass) -->Line_3 $$ String wacId = wac.getId()[ CD ]
Line_2 $$ private String getBeanNameByType(WebApplicationContext wac, Class<?> endpointClass) -->Line_16 $$ throw new IllegalStateException("Found multiple @ServerEndpoint's of type [" + endpointClass.getName() + "]: bean names " + Arrays.asList(names))[ FD ]
Line_2 $$ private String getBeanNameByType(WebApplicationContext wac, Class<?> endpointClass) -->Line_12 $$ beanNamesByType.put(endpointClass, names[0])[ FD ]
Line_4 $$ Map<Class<?>, String> beanNamesByType = cache.get(wacId)-->Line_9 $$ if (!beanNamesByType.containsKey(endpointClass)) [ FD ]
