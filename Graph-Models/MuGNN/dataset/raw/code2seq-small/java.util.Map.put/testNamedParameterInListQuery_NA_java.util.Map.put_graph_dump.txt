Line_7 $$ class CustomerQuery extends MappingSqlQuery<Customer> -->Line_16 $$ cust.setId(rs.getInt(COLUMN_NAMES[0]))[ CD ]
Line_7 $$ class CustomerQuery extends MappingSqlQuery<Customer> -->Line_15 $$ Customer cust = new Customer()[ CD ]
Line_2 $$ public void testNamedParameterInListQuery() throws SQLException -->Line_4 $$ given(resultSet.getInt("id")).willReturn(1, 2)[ CD ]
Line_7 $$ class CustomerQuery extends MappingSqlQuery<Customer> -->Line_30 $$ List<Customer> cust = query.findCustomers(ids)[ FD ]
Line_7 $$ class CustomerQuery extends MappingSqlQuery<Customer> -->Line_17 $$ cust.setForename(rs.getString(COLUMN_NAMES[1]))[ FD ]
Line_2 $$ public void testNamedParameterInListQuery() throws SQLException -->Line_40 $$ verify(connection).close()[ CD ]
Line_7 $$ class CustomerQuery extends MappingSqlQuery<Customer> -->Line_21 $$ Map<String, Object> params = new HashMap<String, Object>()[ CD ]
Line_2 $$ public void testNamedParameterInListQuery() throws SQLException -->Line_3 $$ given(resultSet.next()).willReturn(true, true, false)[ CD ]
Line_2 $$ public void testNamedParameterInListQuery() throws SQLException -->Line_30 $$ List<Customer> cust = query.findCustomers(ids)[ CD ]
Line_7 $$ class CustomerQuery extends MappingSqlQuery<Customer> -->Line_22 $$ params.put("ids", ids)[ FD ]
Line_21 $$ Map<String, Object> params = new HashMap<String, Object>()-->Line_22 $$ params.put("ids", ids)[ FD ]
Line_2 $$ public void testNamedParameterInListQuery() throws SQLException -->Line_28 $$ ids.add(1)[ CD ]
Line_21 $$ Map<String, Object> params = new HashMap<String, Object>()-->Line_23 $$ return executeByNamedParam(params)[ FD ]
Line_2 $$ public void testNamedParameterInListQuery() throws SQLException -->Line_34 $$ assertEquals("Second customer id was assigned correctly", cust.get(1).getId(), 2)[ CD ]
Line_15 $$ Customer cust = new Customer()-->Line_33 $$ assertEquals("First customer forename was assigned correctly", cust.get(0).getForename(), "rod")[ FD ]
Line_7 $$ class CustomerQuery extends MappingSqlQuery<Customer> -->Line_22 $$ params.put("ids", ids)[ CD ]
Line_15 $$ Customer cust = new Customer()-->Line_16 $$ cust.setId(rs.getInt(COLUMN_NAMES[0]))[ FD ]
Line_15 $$ Customer cust = new Customer()-->Line_17 $$ cust.setForename(rs.getString(COLUMN_NAMES[1]))[ FD ]
Line_2 $$ public void testNamedParameterInListQuery() throws SQLException -->Line_32 $$ assertEquals("First customer id was assigned correctly", cust.get(0).getId(), 1)[ CD ]
Line_7 $$ class CustomerQuery extends MappingSqlQuery<Customer> -->Line_28 $$ ids.add(1)[ FD ]
Line_7 $$ class CustomerQuery extends MappingSqlQuery<Customer> -->Line_18 $$ return cust[ CD ]
Line_7 $$ class CustomerQuery extends MappingSqlQuery<Customer> -->Line_23 $$ return executeByNamedParam(params)[ CD ]
Line_2 $$ public void testNamedParameterInListQuery() throws SQLException -->Line_33 $$ assertEquals("First customer forename was assigned correctly", cust.get(0).getForename(), "rod")[ CD ]
Line_15 $$ Customer cust = new Customer()-->Line_32 $$ assertEquals("First customer id was assigned correctly", cust.get(0).getId(), 1)[ FD ]
Line_7 $$ class CustomerQuery extends MappingSqlQuery<Customer> -->Line_17 $$ cust.setForename(rs.getString(COLUMN_NAMES[1]))[ CD ]
Line_2 $$ public void testNamedParameterInListQuery() throws SQLException -->Line_29 $$ ids.add(2)[ CD ]
Line_2 $$ public void testNamedParameterInListQuery() throws SQLException -->Line_38 $$ verify(resultSet).close()[ CD ]
Line_15 $$ Customer cust = new Customer()-->Line_31 $$ assertEquals("We got two customers back", cust.size(), 2)[ FD ]
Line_2 $$ public void testNamedParameterInListQuery() throws SQLException -->Line_36 $$ verify(preparedStatement).setObject(1, 1, Types.NUMERIC)[ CD ]
Line_2 $$ public void testNamedParameterInListQuery() throws SQLException -->Line_5 $$ given(resultSet.getString("forename")).willReturn("rod", "juergen")[ CD ]
Line_2 $$ public void testNamedParameterInListQuery() throws SQLException -->Line_37 $$ verify(preparedStatement).setObject(2, 2, Types.NUMERIC)[ CD ]
Line_2 $$ public void testNamedParameterInListQuery() throws SQLException -->Line_39 $$ verify(preparedStatement).close()[ CD ]
Line_15 $$ Customer cust = new Customer()-->Line_34 $$ assertEquals("Second customer id was assigned correctly", cust.get(1).getId(), 2)[ FD ]
Line_15 $$ Customer cust = new Customer()-->Line_35 $$ assertEquals("Second customer forename was assigned correctly", cust.get(1).getForename(), "juergen")[ FD ]
Line_2 $$ public void testNamedParameterInListQuery() throws SQLException -->Line_35 $$ assertEquals("Second customer forename was assigned correctly", cust.get(1).getForename(), "juergen")[ CD ]
Line_7 $$ class CustomerQuery extends MappingSqlQuery<Customer> -->Line_16 $$ cust.setId(rs.getInt(COLUMN_NAMES[0]))[ FD ]
Line_2 $$ public void testNamedParameterInListQuery() throws SQLException -->Line_6 $$ given(connection.prepareStatement(SELECT_ID_FORENAME_WHERE_ID_IN_LIST_1, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY)).willReturn(preparedStatement)[ CD ]
Line_2 $$ public void testNamedParameterInListQuery() throws SQLException -->Line_31 $$ assertEquals("We got two customers back", cust.size(), 2)[ CD ]
Line_7 $$ class CustomerQuery extends MappingSqlQuery<Customer> -->Line_29 $$ ids.add(2)[ FD ]
