Line_2 $$ public void testStructBlock() -->Line_23 $$ outerStruct.map.put("twelve", new InnerStruct(0, 5L))[ CD ]
Line_2 $$ public void testStructBlock() -->Line_16 $$ outerStruct.byteArray = new byte[] [ CD ]
Line_2 $$ public void testStructBlock() -->Line_30 $$ com.facebook.presto.spi.type.Type outerRowType = new RowType(outerRowParameterTypes, Optional.empty())[ CD ]
Line_2 $$ public void testStructBlock() -->Line_35 $$ outerRowValues.add(3)[ CD ]
Line_3 $$ InnerStruct innerStruct = new InnerStruct(13, 14L)-->Line_5 $$ Block actual = toBinaryBlock(rowType, innerStruct, getInspector(InnerStruct.class))[ FD ]
Line_2 $$ public void testStructBlock() -->Line_25 $$ outerStruct.innerStruct = new InnerStruct(18, 19L)[ CD ]
Line_2 $$ public void testStructBlock() -->Line_28 $$ com.facebook.presto.spi.type.Type mapOfInnerRowType = new MapType(VARCHAR, innerRowType)[ CD ]
Line_2 $$ public void testStructBlock() -->Line_14 $$ outerStruct.doubleVal = 6.001d[ CD ]
Line_2 $$ public void testStructBlock() -->Line_32 $$ ImmutableList.Builder<Object> outerRowValues = ImmutableList.builder()[ CD ]
Line_32 $$ ImmutableList.Builder<Object> outerRowValues = ImmutableList.builder()-->Line_35 $$ outerRowValues.add(3)[ FD ]
Line_4 $$ com.facebook.presto.spi.type.Type rowType = new RowType(ImmutableList.of(BIGINT, BIGINT), Optional.empty())-->Line_5 $$ Block actual = toBinaryBlock(rowType, innerStruct, getInspector(InnerStruct.class))[ FD ]
Line_2 $$ public void testStructBlock() -->Line_19 $$ outerStruct.structArray = new ArrayList(2)[ CD ]
Line_28 $$ com.facebook.presto.spi.type.Type mapOfInnerRowType = new MapType(VARCHAR, innerRowType)-->Line_29 $$ List<com.facebook.presto.spi.type.Type> outerRowParameterTypes = ImmutableList.of(BIGINT, BIGINT, BIGINT, BIGINT, DOUBLE, DOUBLE, VARCHAR, VARCHAR, arrayOfInnerRowType, mapOfInnerRowType, innerRowType)[ FD ]
Line_17 $$ InnerStruct is1 = new InnerStruct(2, -5L)-->Line_20 $$ outerStruct.structArray.add(is1)[ FD ]
Line_5 $$ Block actual = toBinaryBlock(rowType, innerStruct, getInspector(InnerStruct.class))-->Line_49 $$ assertBlockEquals(actual, rowBlockOf(outerRowParameterTypes, outerRowValues.build().toArray()))[ FD ]
Line_42 $$ BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(VARCHAR, innerRowType), new BlockBuilderStatus(), 1024)-->Line_44 $$ innerRowType.writeObject(blockBuilder, rowBlockOf(ImmutableList.of(BIGINT, BIGINT), -5, -10L))[ FD ]
Line_2 $$ public void testStructBlock() -->Line_27 $$ com.facebook.presto.spi.type.Type arrayOfInnerRowType = new ArrayType(innerRowType)[ CD ]
Line_2 $$ public void testStructBlock() -->Line_11 $$ outerStruct.intVal = 3[ CD ]
Line_32 $$ ImmutableList.Builder<Object> outerRowValues = ImmutableList.builder()-->Line_47 $$ outerRowValues.add(blockBuilder.build())[ FD ]
Line_2 $$ public void testStructBlock() -->Line_24 $$ outerStruct.map.put("fifteen", new InnerStruct(-5, -10L))[ CD ]
Line_32 $$ ImmutableList.Builder<Object> outerRowValues = ImmutableList.builder()-->Line_49 $$ assertBlockEquals(actual, rowBlockOf(outerRowParameterTypes, outerRowValues.build().toArray()))[ FD ]
Line_2 $$ public void testStructBlock() -->Line_4 $$ com.facebook.presto.spi.type.Type rowType = new RowType(ImmutableList.of(BIGINT, BIGINT), Optional.empty())[ CD ]
Line_2 $$ public void testStructBlock() -->Line_10 $$ outerStruct.shortVal = 2[ CD ]
Line_2 $$ public void testStructBlock() -->Line_7 $$ assertBlockEquals(actual, expected)[ CD ]
Line_2 $$ public void testStructBlock() -->Line_26 $$ com.facebook.presto.spi.type.Type innerRowType = new RowType(ImmutableList.of(BIGINT, BIGINT), Optional.empty())[ CD ]
Line_2 $$ public void testStructBlock() -->Line_40 $$ outerRowValues.add(new byte[] [ CD ]
Line_8 $$ OuterStruct outerStruct = new OuterStruct()-->Line_31 $$ actual = toBinaryBlock(outerRowType, outerStruct, getInspector(OuterStruct.class))[ FD ]
Line_2 $$ public void testStructBlock() -->Line_37 $$ outerRowValues.add(5.01f)[ CD ]
Line_26 $$ com.facebook.presto.spi.type.Type innerRowType = new RowType(ImmutableList.of(BIGINT, BIGINT), Optional.empty())-->Line_44 $$ innerRowType.writeObject(blockBuilder, rowBlockOf(ImmutableList.of(BIGINT, BIGINT), -5, -10L))[ FD ]
Line_2 $$ public void testStructBlock() -->Line_46 $$ innerRowType.writeObject(blockBuilder, rowBlockOf(ImmutableList.of(BIGINT, BIGINT), 0, 5L))[ CD ]
Line_26 $$ com.facebook.presto.spi.type.Type innerRowType = new RowType(ImmutableList.of(BIGINT, BIGINT), Optional.empty())-->Line_42 $$ BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(VARCHAR, innerRowType), new BlockBuilderStatus(), 1024)[ FD ]
Line_26 $$ com.facebook.presto.spi.type.Type innerRowType = new RowType(ImmutableList.of(BIGINT, BIGINT), Optional.empty())-->Line_41 $$ outerRowValues.add(arrayBlockOf(innerRowType, rowBlockOf(ImmutableList.of(BIGINT, BIGINT), 2, -5L), rowBlockOf(ImmutableList.of(BIGINT, BIGINT), -10, 0)))[ FD ]
Line_2 $$ public void testStructBlock() -->Line_3 $$ InnerStruct innerStruct = new InnerStruct(13, 14L)[ CD ]
Line_2 $$ public void testStructBlock() -->Line_39 $$ outerRowValues.add("seven")[ CD ]
Line_32 $$ ImmutableList.Builder<Object> outerRowValues = ImmutableList.builder()-->Line_48 $$ outerRowValues.add(rowBlockOf(ImmutableList.of(BIGINT, BIGINT), 18, 19L))[ FD ]
Line_29 $$ List<com.facebook.presto.spi.type.Type> outerRowParameterTypes = ImmutableList.of(BIGINT, BIGINT, BIGINT, BIGINT, DOUBLE, DOUBLE, VARCHAR, VARCHAR, arrayOfInnerRowType, mapOfInnerRowType, innerRowType)-->Line_49 $$ assertBlockEquals(actual, rowBlockOf(outerRowParameterTypes, outerRowValues.build().toArray()))[ FD ]
Line_2 $$ public void testStructBlock() -->Line_36 $$ outerRowValues.add(4L)[ CD ]
Line_18 $$ InnerStruct is2 = new InnerStruct(-10, 0L)-->Line_21 $$ outerStruct.structArray.add(is2)[ FD ]
Line_30 $$ com.facebook.presto.spi.type.Type outerRowType = new RowType(outerRowParameterTypes, Optional.empty())-->Line_31 $$ actual = toBinaryBlock(outerRowType, outerStruct, getInspector(OuterStruct.class))[ FD ]
Line_2 $$ public void testStructBlock() -->Line_42 $$ BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(VARCHAR, innerRowType), new BlockBuilderStatus(), 1024)[ CD ]
Line_42 $$ BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(VARCHAR, innerRowType), new BlockBuilderStatus(), 1024)-->Line_43 $$ VARCHAR.writeString(blockBuilder, "fifteen")[ FD ]
Line_2 $$ public void testStructBlock() -->Line_21 $$ outerStruct.structArray.add(is2)[ CD ]
Line_2 $$ public void testStructBlock() -->Line_6 $$ Block expected = rowBlockOf(ImmutableList.of(BIGINT, BIGINT), 13, 14L)[ CD ]
Line_2 $$ public void testStructBlock() -->Line_41 $$ outerRowValues.add(arrayBlockOf(innerRowType, rowBlockOf(ImmutableList.of(BIGINT, BIGINT), 2, -5L), rowBlockOf(ImmutableList.of(BIGINT, BIGINT), -10, 0)))[ CD ]
Line_26 $$ com.facebook.presto.spi.type.Type innerRowType = new RowType(ImmutableList.of(BIGINT, BIGINT), Optional.empty())-->Line_46 $$ innerRowType.writeObject(blockBuilder, rowBlockOf(ImmutableList.of(BIGINT, BIGINT), 0, 5L))[ FD ]
Line_2 $$ public void testStructBlock() -->Line_13 $$ outerStruct.floatVal = 5.01f[ CD ]
Line_42 $$ BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(VARCHAR, innerRowType), new BlockBuilderStatus(), 1024)-->Line_47 $$ outerRowValues.add(blockBuilder.build())[ FD ]
Line_32 $$ ImmutableList.Builder<Object> outerRowValues = ImmutableList.builder()-->Line_34 $$ outerRowValues.add(2)[ FD ]
Line_32 $$ ImmutableList.Builder<Object> outerRowValues = ImmutableList.builder()-->Line_36 $$ outerRowValues.add(4L)[ FD ]
Line_42 $$ BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(VARCHAR, innerRowType), new BlockBuilderStatus(), 1024)-->Line_45 $$ VARCHAR.writeString(blockBuilder, "twelve")[ FD ]
Line_2 $$ public void testStructBlock() -->Line_5 $$ Block actual = toBinaryBlock(rowType, innerStruct, getInspector(InnerStruct.class))[ CD ]
Line_2 $$ public void testStructBlock() -->Line_44 $$ innerRowType.writeObject(blockBuilder, rowBlockOf(ImmutableList.of(BIGINT, BIGINT), -5, -10L))[ CD ]
Line_2 $$ public void testStructBlock() -->Line_38 $$ outerRowValues.add(6.001d)[ CD ]
Line_2 $$ public void testStructBlock() -->Line_43 $$ VARCHAR.writeString(blockBuilder, "fifteen")[ CD ]
Line_32 $$ ImmutableList.Builder<Object> outerRowValues = ImmutableList.builder()-->Line_38 $$ outerRowValues.add(6.001d)[ FD ]
Line_5 $$ Block actual = toBinaryBlock(rowType, innerStruct, getInspector(InnerStruct.class))-->Line_31 $$ actual = toBinaryBlock(outerRowType, outerStruct, getInspector(OuterStruct.class))[ FD ]
Line_42 $$ BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(VARCHAR, innerRowType), new BlockBuilderStatus(), 1024)-->Line_46 $$ innerRowType.writeObject(blockBuilder, rowBlockOf(ImmutableList.of(BIGINT, BIGINT), 0, 5L))[ FD ]
Line_32 $$ ImmutableList.Builder<Object> outerRowValues = ImmutableList.builder()-->Line_33 $$ outerRowValues.add(1)[ FD ]
Line_32 $$ ImmutableList.Builder<Object> outerRowValues = ImmutableList.builder()-->Line_39 $$ outerRowValues.add("seven")[ FD ]
Line_2 $$ public void testStructBlock() -->Line_31 $$ actual = toBinaryBlock(outerRowType, outerStruct, getInspector(OuterStruct.class))[ CD ]
Line_2 $$ public void testStructBlock() -->Line_22 $$ outerStruct.map = new TreeMap()[ CD ]
Line_5 $$ Block actual = toBinaryBlock(rowType, innerStruct, getInspector(InnerStruct.class))-->Line_7 $$ assertBlockEquals(actual, expected)[ FD ]
Line_2 $$ public void testStructBlock() -->Line_20 $$ outerStruct.structArray.add(is1)[ CD ]
Line_2 $$ public void testStructBlock() -->Line_47 $$ outerRowValues.add(blockBuilder.build())[ CD ]
Line_2 $$ public void testStructBlock() -->Line_48 $$ outerRowValues.add(rowBlockOf(ImmutableList.of(BIGINT, BIGINT), 18, 19L))[ CD ]
Line_2 $$ public void testStructBlock() -->Line_34 $$ outerRowValues.add(2)[ CD ]
Line_2 $$ public void testStructBlock() -->Line_45 $$ VARCHAR.writeString(blockBuilder, "twelve")[ CD ]
Line_27 $$ com.facebook.presto.spi.type.Type arrayOfInnerRowType = new ArrayType(innerRowType)-->Line_29 $$ List<com.facebook.presto.spi.type.Type> outerRowParameterTypes = ImmutableList.of(BIGINT, BIGINT, BIGINT, BIGINT, DOUBLE, DOUBLE, VARCHAR, VARCHAR, arrayOfInnerRowType, mapOfInnerRowType, innerRowType)[ FD ]
Line_32 $$ ImmutableList.Builder<Object> outerRowValues = ImmutableList.builder()-->Line_37 $$ outerRowValues.add(5.01f)[ FD ]
Line_2 $$ public void testStructBlock() -->Line_9 $$ outerStruct.byteVal = 1[ CD ]
Line_2 $$ public void testStructBlock() -->Line_15 $$ outerStruct.stringVal = "seven"[ CD ]
Line_2 $$ public void testStructBlock() -->Line_49 $$ assertBlockEquals(actual, rowBlockOf(outerRowParameterTypes, outerRowValues.build().toArray()))[ CD ]
Line_32 $$ ImmutableList.Builder<Object> outerRowValues = ImmutableList.builder()-->Line_41 $$ outerRowValues.add(arrayBlockOf(innerRowType, rowBlockOf(ImmutableList.of(BIGINT, BIGINT), 2, -5L), rowBlockOf(ImmutableList.of(BIGINT, BIGINT), -10, 0)))[ FD ]
Line_2 $$ public void testStructBlock() -->Line_8 $$ OuterStruct outerStruct = new OuterStruct()[ CD ]
Line_2 $$ public void testStructBlock() -->Line_33 $$ outerRowValues.add(1)[ CD ]
Line_2 $$ public void testStructBlock() -->Line_29 $$ List<com.facebook.presto.spi.type.Type> outerRowParameterTypes = ImmutableList.of(BIGINT, BIGINT, BIGINT, BIGINT, DOUBLE, DOUBLE, VARCHAR, VARCHAR, arrayOfInnerRowType, mapOfInnerRowType, innerRowType)[ CD ]
Line_31 $$ actual = toBinaryBlock(outerRowType, outerStruct, getInspector(OuterStruct.class))-->Line_49 $$ assertBlockEquals(actual, rowBlockOf(outerRowParameterTypes, outerRowValues.build().toArray()))[ FD ]
Line_2 $$ public void testStructBlock() -->Line_17 $$ InnerStruct is1 = new InnerStruct(2, -5L)[ CD ]
Line_2 $$ public void testStructBlock() -->Line_12 $$ outerStruct.longVal = 4L[ CD ]
Line_32 $$ ImmutableList.Builder<Object> outerRowValues = ImmutableList.builder()-->Line_40 $$ outerRowValues.add(new byte[] [ FD ]
Line_26 $$ com.facebook.presto.spi.type.Type innerRowType = new RowType(ImmutableList.of(BIGINT, BIGINT), Optional.empty())-->Line_29 $$ List<com.facebook.presto.spi.type.Type> outerRowParameterTypes = ImmutableList.of(BIGINT, BIGINT, BIGINT, BIGINT, DOUBLE, DOUBLE, VARCHAR, VARCHAR, arrayOfInnerRowType, mapOfInnerRowType, innerRowType)[ FD ]
Line_6 $$ Block expected = rowBlockOf(ImmutableList.of(BIGINT, BIGINT), 13, 14L)-->Line_7 $$ assertBlockEquals(actual, expected)[ FD ]
Line_2 $$ public void testStructBlock() -->Line_18 $$ InnerStruct is2 = new InnerStruct(-10, 0L)[ CD ]
