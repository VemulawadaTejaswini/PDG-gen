Line_3 $$ final List<NodeAction> actions = nodeActions.get(element)-->Line_6 $$ nodeActions.put(elementToPutNodeActionsFor, actions)[ FD ]
Line_2 $$ private static void _remapNodeActions(Object element, @Nullable Object elementToPutNodeActionsFor, @NotNull final Map<Object, List<NodeAction>> nodeActions) -->Line_3 $$ final List<NodeAction> actions = nodeActions.get(element)[ FD ]
Line_5 $$ if (elementToPutNodeActionsFor != null && actions != null) -->Line_6 $$ nodeActions.put(elementToPutNodeActionsFor, actions)[ CD ]
Line_2 $$ private static void _remapNodeActions(Object element, @Nullable Object elementToPutNodeActionsFor, @NotNull final Map<Object, List<NodeAction>> nodeActions) -->Line_5 $$ if (elementToPutNodeActionsFor != null && actions != null) [ CD ]
Line_2 $$ private static void _remapNodeActions(Object element, @Nullable Object elementToPutNodeActionsFor, @NotNull final Map<Object, List<NodeAction>> nodeActions) -->Line_6 $$ nodeActions.put(elementToPutNodeActionsFor, actions)[ FD ]
Line_2 $$ private static void _remapNodeActions(Object element, @Nullable Object elementToPutNodeActionsFor, @NotNull final Map<Object, List<NodeAction>> nodeActions) -->Line_3 $$ final List<NodeAction> actions = nodeActions.get(element)[ CD ]
Line_2 $$ private static void _remapNodeActions(Object element, @Nullable Object elementToPutNodeActionsFor, @NotNull final Map<Object, List<NodeAction>> nodeActions) -->Line_4 $$ nodeActions.remove(element)[ CD ]
Line_2 $$ private static void _remapNodeActions(Object element, @Nullable Object elementToPutNodeActionsFor, @NotNull final Map<Object, List<NodeAction>> nodeActions) -->Line_4 $$ nodeActions.remove(element)[ FD ]
