Line_8 $$ Map<String, String> input2 = new HashMap<String, String>()-->Line_12 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(input2)[ FD ]
Line_8 $$ Map<String, String> input2 = new HashMap<String, String>()-->Line_9 $$ input2.put("4", "5")[ FD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_14 $$ GenericBean<?> gb = (GenericBean<?>) bf.getBean("genericBean")[ FD ]
Line_2 $$ public void testGenericSetMapConstructor() throws MalformedURLException -->Line_6 $$ input.add("4")[ CD ]
Line_4 $$ RootBeanDefinition rbd = new RootBeanDefinition(GenericBean.class)-->Line_12 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(input2)[ FD ]
Line_2 $$ public void testGenericSetMapConstructor() throws MalformedURLException -->Line_7 $$ input.add("5")[ CD ]
Line_2 $$ public void testGenericSetMapConstructor() throws MalformedURLException -->Line_4 $$ RootBeanDefinition rbd = new RootBeanDefinition(GenericBean.class)[ CD ]
Line_2 $$ public void testGenericSetMapConstructor() throws MalformedURLException -->Line_5 $$ Set<String> input = new HashSet<String>()[ CD ]
Line_2 $$ public void testGenericSetMapConstructor() throws MalformedURLException -->Line_14 $$ GenericBean<?> gb = (GenericBean<?>) bf.getBean("genericBean")[ CD ]
Line_2 $$ public void testGenericSetMapConstructor() throws MalformedURLException -->Line_17 $$ assertEquals(new Integer(5), gb.getShortMap().get(new Short("4")))[ CD ]
Line_2 $$ public void testGenericSetMapConstructor() throws MalformedURLException -->Line_10 $$ input2.put("6", "7")[ CD ]
Line_2 $$ public void testGenericSetMapConstructor() throws MalformedURLException -->Line_8 $$ Map<String, String> input2 = new HashMap<String, String>()[ CD ]
Line_2 $$ public void testGenericSetMapConstructor() throws MalformedURLException -->Line_16 $$ assertTrue(gb.getIntegerSet().contains(new Integer(5)))[ CD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_13 $$ bf.registerBeanDefinition("genericBean", rbd)[ FD ]
Line_2 $$ public void testGenericSetMapConstructor() throws MalformedURLException -->Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()[ CD ]
Line_8 $$ Map<String, String> input2 = new HashMap<String, String>()-->Line_10 $$ input2.put("6", "7")[ FD ]
Line_5 $$ Set<String> input = new HashSet<String>()-->Line_6 $$ input.add("4")[ FD ]
Line_4 $$ RootBeanDefinition rbd = new RootBeanDefinition(GenericBean.class)-->Line_13 $$ bf.registerBeanDefinition("genericBean", rbd)[ FD ]
Line_2 $$ public void testGenericSetMapConstructor() throws MalformedURLException -->Line_11 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(input)[ CD ]
Line_14 $$ GenericBean<?> gb = (GenericBean<?>) bf.getBean("genericBean")-->Line_17 $$ assertEquals(new Integer(5), gb.getShortMap().get(new Short("4")))[ FD ]
Line_5 $$ Set<String> input = new HashSet<String>()-->Line_7 $$ input.add("5")[ FD ]
Line_5 $$ Set<String> input = new HashSet<String>()-->Line_11 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(input)[ FD ]
Line_2 $$ public void testGenericSetMapConstructor() throws MalformedURLException -->Line_12 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(input2)[ CD ]
Line_14 $$ GenericBean<?> gb = (GenericBean<?>) bf.getBean("genericBean")-->Line_16 $$ assertTrue(gb.getIntegerSet().contains(new Integer(5)))[ FD ]
Line_2 $$ public void testGenericSetMapConstructor() throws MalformedURLException -->Line_13 $$ bf.registerBeanDefinition("genericBean", rbd)[ CD ]
Line_2 $$ public void testGenericSetMapConstructor() throws MalformedURLException -->Line_18 $$ assertEquals(new Integer(7), gb.getShortMap().get(new Short("6")))[ CD ]
Line_14 $$ GenericBean<?> gb = (GenericBean<?>) bf.getBean("genericBean")-->Line_18 $$ assertEquals(new Integer(7), gb.getShortMap().get(new Short("6")))[ FD ]
Line_14 $$ GenericBean<?> gb = (GenericBean<?>) bf.getBean("genericBean")-->Line_15 $$ assertTrue(gb.getIntegerSet().contains(new Integer(4)))[ FD ]
Line_2 $$ public void testGenericSetMapConstructor() throws MalformedURLException -->Line_9 $$ input2.put("4", "5")[ CD ]
Line_2 $$ public void testGenericSetMapConstructor() throws MalformedURLException -->Line_15 $$ assertTrue(gb.getIntegerSet().contains(new Integer(4)))[ CD ]
Line_4 $$ RootBeanDefinition rbd = new RootBeanDefinition(GenericBean.class)-->Line_11 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(input)[ FD ]
