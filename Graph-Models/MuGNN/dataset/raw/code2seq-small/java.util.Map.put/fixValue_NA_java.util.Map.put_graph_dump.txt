Line_25 $$ List<Object> listValue = List.class.cast(value)-->Line_27 $$ for (int i = 0; i < listValue.size(); i++) [ FD ]
Line_6 $$ TypeSignature signature = parseTypeSignature(type)-->Line_29 $$ fixedValue.put(key, fixValue(signature.getParameters().get(i).toString(), listValue.get(i)))[ FD ]
Line_3 $$ if (value == null) -->Line_4 $$ return null[ CD ]
Line_25 $$ List<Object> listValue = List.class.cast(value)-->Line_26 $$ checkArgument(listValue.size() == signature.getLiteralParameters().size(), "Mismatched data values and row type")[ FD ]
Line_27 $$ for (int i = 0; i < listValue.size(); i++) -->Line_28 $$ String key = (String) signature.getLiteralParameters().get(i)[ FD ]
Line_2 $$ private static Object fixValue(String type, Object value) -->Line_48 $$ return Boolean.class.cast(value)[ FD ]
Line_23 $$ if (signature.getBase().equals(ROW)) -->Line_25 $$ List<Object> listValue = List.class.cast(value)[ CD ]
Line_2 $$ private static Object fixValue(String type, Object value) -->Line_9 $$ for (Object object : List.class.cast(value)) [ FD ]
Line_2 $$ private static Object fixValue(String type, Object value) -->Line_35 $$ if (value instanceof String) [ FD ]
Line_2 $$ private static Object fixValue(String type, Object value) -->Line_3 $$ if (value == null) [ CD ]
Line_6 $$ TypeSignature signature = parseTypeSignature(type)-->Line_16 $$ String valueType = signature.getParameters().get(1).toString()[ FD ]
Line_27 $$ for (int i = 0; i < listValue.size(); i++) -->Line_29 $$ fixedValue.put(key, fixValue(signature.getParameters().get(i).toString(), listValue.get(i)))[ CD ]
Line_2 $$ private static Object fixValue(String type, Object value) -->Line_3 $$ if (value == null) [ FD ]
Line_6 $$ TypeSignature signature = parseTypeSignature(type)-->Line_15 $$ String keyType = signature.getParameters().get(0).toString()[ FD ]
Line_23 $$ if (signature.getBase().equals(ROW)) -->Line_31 $$ return fixedValue[ CD ]
Line_2 $$ private static Object fixValue(String type, Object value) -->Line_6 $$ TypeSignature signature = parseTypeSignature(type)[ CD ]
Line_45 $$ if (value instanceof String) -->Line_46 $$ return Boolean.parseBoolean((String) value)[ CD ]
Line_6 $$ TypeSignature signature = parseTypeSignature(type)-->Line_14 $$ if (signature.getBase().equals(MAP)) [ FD ]
Line_2 $$ private static Object fixValue(String type, Object value) -->Line_7 $$ if (signature.getBase().equals(ARRAY)) [ CD ]
Line_2 $$ private static Object fixValue(String type, Object value) -->Line_45 $$ if (value instanceof String) [ FD ]
Line_23 $$ if (signature.getBase().equals(ROW)) -->Line_26 $$ checkArgument(listValue.size() == signature.getLiteralParameters().size(), "Mismatched data values and row type")[ CD ]
Line_7 $$ if (signature.getBase().equals(ARRAY)) -->Line_8 $$ List<Object> fixedValue = new ArrayList()[ CD ]
Line_2 $$ private static Object fixValue(String type, Object value) -->Line_14 $$ if (signature.getBase().equals(MAP)) [ CD ]
Line_40 $$ if (value instanceof String) -->Line_41 $$ return Double.parseDouble((String) value)[ CD ]
Line_14 $$ if (signature.getBase().equals(MAP)) -->Line_15 $$ String keyType = signature.getParameters().get(0).toString()[ CD ]
Line_6 $$ TypeSignature signature = parseTypeSignature(type)-->Line_28 $$ String key = (String) signature.getLiteralParameters().get(i)[ FD ]
Line_28 $$ String key = (String) signature.getLiteralParameters().get(i)-->Line_29 $$ fixedValue.put(key, fixValue(signature.getParameters().get(i).toString(), listValue.get(i)))[ FD ]
Line_2 $$ private static Object fixValue(String type, Object value) -->Line_25 $$ List<Object> listValue = List.class.cast(value)[ FD ]
Line_2 $$ private static Object fixValue(String type, Object value) -->Line_23 $$ if (signature.getBase().equals(ROW)) [ CD ]
Line_2 $$ private static Object fixValue(String type, Object value) -->Line_18 $$ for (Map.Entry<?, ?> entry : (Set<Map.Entry<?, ?>>) Map.class.cast(value).entrySet()) [ FD ]
Line_8 $$ List<Object> fixedValue = new ArrayList()-->Line_19 $$ fixedValue.put(fixValue(keyType, entry.getKey()), fixValue(valueType, entry.getValue()))[ FD ]
Line_15 $$ String keyType = signature.getParameters().get(0).toString()-->Line_19 $$ fixedValue.put(fixValue(keyType, entry.getKey()), fixValue(valueType, entry.getValue()))[ FD ]
Line_18 $$ for (Map.Entry<?, ?> entry : (Set<Map.Entry<?, ?>>) Map.class.cast(value).entrySet()) -->Line_19 $$ fixedValue.put(fixValue(keyType, entry.getKey()), fixValue(valueType, entry.getValue()))[ FD ]
Line_2 $$ private static Object fixValue(String type, Object value) -->Line_6 $$ TypeSignature signature = parseTypeSignature(type)[ FD ]
Line_16 $$ String valueType = signature.getParameters().get(1).toString()-->Line_19 $$ fixedValue.put(fixValue(keyType, entry.getKey()), fixValue(valueType, entry.getValue()))[ FD ]
Line_2 $$ private static Object fixValue(String type, Object value) -->Line_40 $$ if (value instanceof String) [ FD ]
Line_27 $$ for (int i = 0; i < listValue.size(); i++) -->Line_28 $$ String key = (String) signature.getLiteralParameters().get(i)[ CD ]
Line_6 $$ TypeSignature signature = parseTypeSignature(type)-->Line_10 $$ fixedValue.add(fixValue(signature.getParameters().get(0).toString(), object))[ FD ]
Line_60 $$ if (value instanceof String) -->Line_61 $$ return Base64.getDecoder().decode((String) value)[ CD ]
Line_14 $$ if (signature.getBase().equals(MAP)) -->Line_16 $$ String valueType = signature.getParameters().get(1).toString()[ CD ]
Line_25 $$ List<Object> listValue = List.class.cast(value)-->Line_29 $$ fixedValue.put(key, fixValue(signature.getParameters().get(i).toString(), listValue.get(i)))[ FD ]
Line_8 $$ List<Object> fixedValue = new ArrayList()-->Line_10 $$ fixedValue.add(fixValue(signature.getParameters().get(0).toString(), object))[ FD ]
Line_9 $$ for (Object object : List.class.cast(value)) -->Line_10 $$ fixedValue.add(fixValue(signature.getParameters().get(0).toString(), object))[ FD ]
Line_7 $$ if (signature.getBase().equals(ARRAY)) -->Line_12 $$ return fixedValue[ CD ]
Line_6 $$ TypeSignature signature = parseTypeSignature(type)-->Line_7 $$ if (signature.getBase().equals(ARRAY)) [ FD ]
Line_6 $$ TypeSignature signature = parseTypeSignature(type)-->Line_23 $$ if (signature.getBase().equals(ROW)) [ FD ]
Line_27 $$ for (int i = 0; i < listValue.size(); i++) -->Line_29 $$ fixedValue.put(key, fixValue(signature.getParameters().get(i).toString(), listValue.get(i)))[ FD ]
Line_2 $$ private static Object fixValue(String type, Object value) -->Line_58 $$ return String.class.cast(value)[ FD ]
Line_8 $$ List<Object> fixedValue = new ArrayList()-->Line_29 $$ fixedValue.put(key, fixValue(signature.getParameters().get(i).toString(), listValue.get(i)))[ FD ]
Line_14 $$ if (signature.getBase().equals(MAP)) -->Line_21 $$ return fixedValue[ CD ]
Line_35 $$ if (value instanceof String) -->Line_36 $$ return Long.parseLong((String) value)[ CD ]
Line_6 $$ TypeSignature signature = parseTypeSignature(type)-->Line_26 $$ checkArgument(listValue.size() == signature.getLiteralParameters().size(), "Mismatched data values and row type")[ FD ]
Line_2 $$ private static Object fixValue(String type, Object value) -->Line_60 $$ if (value instanceof String) [ FD ]
Line_23 $$ if (signature.getBase().equals(ROW)) -->Line_27 $$ for (int i = 0; i < listValue.size(); i++) [ CD ]
