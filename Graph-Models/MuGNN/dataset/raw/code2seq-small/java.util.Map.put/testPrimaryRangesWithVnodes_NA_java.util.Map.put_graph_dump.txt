Line_21 $$ Map<String, String> configOptions = new HashMap()-->Line_22 $$ configOptions.put("DC2", "2")[ FD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_19 $$ dc2.put(InetAddress.getByName("127.0.0.5"), new StringToken("K"))[ CD ]
Line_29 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_30 $$ assert primaryRanges.isEmpty()[ FD ]
Line_27 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_30 $$ assert primaryRanges.isEmpty()[ FD ]
Line_31 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_44 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("B"), new StringToken("C")))[ FD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_27 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))[ CD ]
Line_27 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_39 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("C"), new StringToken("D")))[ FD ]
Line_31 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_37 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.5"))[ FD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_31 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))[ CD ]
Line_29 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_31 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))[ FD ]
Line_31 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_35 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("K"), new StringToken("L")))[ FD ]
Line_5 $$ Multimap<InetAddress, Token> dc1 = HashMultimap.create()-->Line_10 $$ dc1.put(InetAddress.getByName("127.0.0.2"), new StringToken("I"))[ FD ]
Line_5 $$ Multimap<InetAddress, Token> dc1 = HashMultimap.create()-->Line_6 $$ dc1.put(InetAddress.getByName("127.0.0.1"), new StringToken("A"))[ FD ]
Line_31 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_33 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("A"), new StringToken("B")))[ FD ]
Line_27 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_45 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("H"), new StringToken("I")))[ FD ]
Line_3 $$ TokenMetadata metadata = StorageService.instance.getTokenMetadata()-->Line_20 $$ metadata.updateNormalTokens(dc2)[ FD ]
Line_27 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_31 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))[ FD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_37 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.5"))[ CD ]
Line_29 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_40 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("E"), new StringToken("F")))[ FD ]
Line_27 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_33 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("A"), new StringToken("B")))[ FD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_5 $$ Multimap<InetAddress, Token> dc1 = HashMultimap.create()[ CD ]
Line_27 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_35 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("K"), new StringToken("L")))[ FD ]
Line_29 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_41 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("J"), new StringToken("K")))[ FD ]
Line_31 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_42 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("D"), new StringToken("E")))[ FD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_10 $$ dc1.put(InetAddress.getByName("127.0.0.2"), new StringToken("I"))[ CD ]
Line_3 $$ TokenMetadata metadata = StorageService.instance.getTokenMetadata()-->Line_4 $$ metadata.clearUnsafe()[ FD ]
Line_37 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.5"))-->Line_40 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("E"), new StringToken("F")))[ FD ]
Line_5 $$ Multimap<InetAddress, Token> dc1 = HashMultimap.create()-->Line_9 $$ dc1.put(InetAddress.getByName("127.0.0.2"), new StringToken("C"))[ FD ]
Line_21 $$ Map<String, String> configOptions = new HashMap()-->Line_25 $$ KeyspaceMetadata meta = KeyspaceMetadata.create("Keyspace1", KeyspaceParams.create(false, configOptions))[ FD ]
Line_29 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_33 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("A"), new StringToken("B")))[ FD ]
Line_13 $$ Multimap<InetAddress, Token> dc2 = HashMultimap.create()-->Line_16 $$ dc2.put(InetAddress.getByName("127.0.0.4"), new StringToken("L"))[ FD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_29 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))[ CD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_24 $$ Keyspace.clear("Keyspace1")[ CD ]
Line_31 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_40 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("E"), new StringToken("F")))[ FD ]
Line_29 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_43 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("G"), new StringToken("H")))[ FD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_22 $$ configOptions.put("DC2", "2")[ CD ]
Line_27 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_46 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("I"), new StringToken("J")))[ FD ]
Line_31 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_38 $$ assert primaryRanges.size() == 8[ FD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_12 $$ metadata.updateNormalTokens(dc1)[ CD ]
Line_27 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_28 $$ assert primaryRanges.isEmpty()[ FD ]
Line_37 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.5"))-->Line_42 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("D"), new StringToken("E")))[ FD ]
Line_3 $$ TokenMetadata metadata = StorageService.instance.getTokenMetadata()-->Line_12 $$ metadata.updateNormalTokens(dc1)[ FD ]
Line_27 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_29 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))[ FD ]
Line_29 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_39 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("C"), new StringToken("D")))[ FD ]
Line_37 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.5"))-->Line_46 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("I"), new StringToken("J")))[ FD ]
Line_29 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_46 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("I"), new StringToken("J")))[ FD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_3 $$ TokenMetadata metadata = StorageService.instance.getTokenMetadata()[ CD ]
Line_37 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.5"))-->Line_43 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("G"), new StringToken("H")))[ FD ]
Line_27 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_43 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("G"), new StringToken("H")))[ FD ]
Line_5 $$ Multimap<InetAddress, Token> dc1 = HashMultimap.create()-->Line_8 $$ dc1.put(InetAddress.getByName("127.0.0.1"), new StringToken("H"))[ FD ]
Line_27 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_37 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.5"))[ FD ]
Line_29 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_44 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("B"), new StringToken("C")))[ FD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_9 $$ dc1.put(InetAddress.getByName("127.0.0.2"), new StringToken("C"))[ CD ]
Line_29 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_35 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("K"), new StringToken("L")))[ FD ]
Line_37 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.5"))-->Line_41 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("J"), new StringToken("K")))[ FD ]
Line_31 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_32 $$ assert primaryRanges.size() == 4[ FD ]
Line_31 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_43 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("G"), new StringToken("H")))[ FD ]
Line_21 $$ Map<String, String> configOptions = new HashMap()-->Line_23 $$ configOptions.put(ReplicationParams.CLASS, "NetworkTopologyStrategy")[ FD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_14 $$ dc2.put(InetAddress.getByName("127.0.0.4"), new StringToken("B"))[ CD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_17 $$ dc2.put(InetAddress.getByName("127.0.0.5"), new StringToken("D"))[ CD ]
Line_27 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_32 $$ assert primaryRanges.size() == 4[ FD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_6 $$ dc1.put(InetAddress.getByName("127.0.0.1"), new StringToken("A"))[ CD ]
Line_27 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_36 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("L"), new StringToken("A")))[ FD ]
Line_13 $$ Multimap<InetAddress, Token> dc2 = HashMultimap.create()-->Line_19 $$ dc2.put(InetAddress.getByName("127.0.0.5"), new StringToken("K"))[ FD ]
Line_31 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_34 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("F"), new StringToken("G")))[ FD ]
Line_29 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_42 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("D"), new StringToken("E")))[ FD ]
Line_5 $$ Multimap<InetAddress, Token> dc1 = HashMultimap.create()-->Line_11 $$ dc1.put(InetAddress.getByName("127.0.0.2"), new StringToken("J"))[ FD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_13 $$ Multimap<InetAddress, Token> dc2 = HashMultimap.create()[ CD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_26 $$ Schema.instance.setKeyspaceMetadata(meta)[ CD ]
Line_31 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_46 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("I"), new StringToken("J")))[ FD ]
Line_13 $$ Multimap<InetAddress, Token> dc2 = HashMultimap.create()-->Line_18 $$ dc2.put(InetAddress.getByName("127.0.0.5"), new StringToken("F"))[ FD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_11 $$ dc1.put(InetAddress.getByName("127.0.0.2"), new StringToken("J"))[ CD ]
Line_5 $$ Multimap<InetAddress, Token> dc1 = HashMultimap.create()-->Line_7 $$ dc1.put(InetAddress.getByName("127.0.0.1"), new StringToken("E"))[ FD ]
Line_31 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_45 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("H"), new StringToken("I")))[ FD ]
Line_13 $$ Multimap<InetAddress, Token> dc2 = HashMultimap.create()-->Line_20 $$ metadata.updateNormalTokens(dc2)[ FD ]
Line_31 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_39 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("C"), new StringToken("D")))[ FD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_4 $$ metadata.clearUnsafe()[ CD ]
Line_13 $$ Multimap<InetAddress, Token> dc2 = HashMultimap.create()-->Line_14 $$ dc2.put(InetAddress.getByName("127.0.0.4"), new StringToken("B"))[ FD ]
Line_37 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.5"))-->Line_39 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("C"), new StringToken("D")))[ FD ]
Line_27 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_41 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("J"), new StringToken("K")))[ FD ]
Line_27 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_34 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("F"), new StringToken("G")))[ FD ]
Line_31 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_36 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("L"), new StringToken("A")))[ FD ]
Line_29 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_36 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("L"), new StringToken("A")))[ FD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_25 $$ KeyspaceMetadata meta = KeyspaceMetadata.create("Keyspace1", KeyspaceParams.create(false, configOptions))[ CD ]
Line_37 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.5"))-->Line_45 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("H"), new StringToken("I")))[ FD ]
Line_13 $$ Multimap<InetAddress, Token> dc2 = HashMultimap.create()-->Line_17 $$ dc2.put(InetAddress.getByName("127.0.0.5"), new StringToken("D"))[ FD ]
Line_27 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_38 $$ assert primaryRanges.size() == 8[ FD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_15 $$ dc2.put(InetAddress.getByName("127.0.0.4"), new StringToken("G"))[ CD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_21 $$ Map<String, String> configOptions = new HashMap()[ CD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_18 $$ dc2.put(InetAddress.getByName("127.0.0.5"), new StringToken("F"))[ CD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_23 $$ configOptions.put(ReplicationParams.CLASS, "NetworkTopologyStrategy")[ CD ]
Line_27 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_44 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("B"), new StringToken("C")))[ FD ]
Line_37 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.5"))-->Line_38 $$ assert primaryRanges.size() == 8[ FD ]
Line_29 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_37 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.5"))[ FD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_20 $$ metadata.updateNormalTokens(dc2)[ CD ]
Line_25 $$ KeyspaceMetadata meta = KeyspaceMetadata.create("Keyspace1", KeyspaceParams.create(false, configOptions))-->Line_26 $$ Schema.instance.setKeyspaceMetadata(meta)[ FD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_7 $$ dc1.put(InetAddress.getByName("127.0.0.1"), new StringToken("E"))[ CD ]
Line_37 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.5"))-->Line_44 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("B"), new StringToken("C")))[ FD ]
Line_13 $$ Multimap<InetAddress, Token> dc2 = HashMultimap.create()-->Line_15 $$ dc2.put(InetAddress.getByName("127.0.0.4"), new StringToken("G"))[ FD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_16 $$ dc2.put(InetAddress.getByName("127.0.0.4"), new StringToken("L"))[ CD ]
Line_2 $$ public void testPrimaryRangesWithVnodes() throws Exception -->Line_8 $$ dc1.put(InetAddress.getByName("127.0.0.1"), new StringToken("H"))[ CD ]
Line_29 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_34 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("F"), new StringToken("G")))[ FD ]
Line_29 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_32 $$ assert primaryRanges.size() == 4[ FD ]
Line_29 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_38 $$ assert primaryRanges.size() == 8[ FD ]
Line_5 $$ Multimap<InetAddress, Token> dc1 = HashMultimap.create()-->Line_12 $$ metadata.updateNormalTokens(dc1)[ FD ]
Line_27 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_40 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("E"), new StringToken("F")))[ FD ]
Line_31 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.4"))-->Line_41 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("J"), new StringToken("K")))[ FD ]
Line_29 $$ primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.2"))-->Line_45 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("H"), new StringToken("I")))[ FD ]
Line_27 $$ Collection<Range<Token>> primaryRanges = StorageService.instance.getPrimaryRangesForEndpoint(meta.name, InetAddress.getByName("127.0.0.1"))-->Line_42 $$ assert primaryRanges.contains(new Range<Token>(new StringToken("D"), new StringToken("E")))[ FD ]
