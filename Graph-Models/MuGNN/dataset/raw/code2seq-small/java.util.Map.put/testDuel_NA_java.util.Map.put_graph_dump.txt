Line_4 $$ for (int iter = 0; iter < iters; ++iter) -->Line_9 $$ CopyOnWriteHashMap<O, Integer> map = new CopyOnWriteHashMap()[ CD ]
Line_18 $$ if (randomBoolean()) -->Line_25 $$ if (removed == null) [ CD ]
Line_12 $$ for (int i = 0; i < numOps; ++i) -->Line_18 $$ if (randomBoolean()) [ CD ]
Line_18 $$ if (randomBoolean()) -->Line_21 $$ newMap = map.copyAndPut(key, value)[ CD ]
Line_8 $$ Map<O, Integer> ref = new HashMap()-->Line_36 $$ assertEquals(emptyMap(), CopyOnWriteHashMap.copyOf(ref).copyAndRemoveAll(ref.keySet()))[ FD ]
Line_18 $$ if (randomBoolean()) -->Line_19 $$ Integer value = v[ CD ]
Line_16 $$ Map<O, Integer> newRef = new HashMap(ref)-->Line_23 $$ final Integer removed = newRef.remove(key)[ FD ]
Line_4 $$ for (int iter = 0; iter < iters; ++iter) -->Line_10 $$ assertEquals(ref, map)[ CD ]
Line_12 $$ for (int i = 0; i < numOps; ++i) -->Line_14 $$ final int h = (v & ((1 << hashBits) - 1)) ^ hashBase[ CD ]
Line_18 $$ if (randomBoolean()) -->Line_20 $$ newRef.put(key, value)[ CD ]
Line_4 $$ for (int iter = 0; iter < iters; ++iter) -->Line_7 $$ final int numOps = randomInt(10 + hashBits * 100)[ CD ]
Line_33 $$ map = newMap-->Line_26 $$ assertSame(map, newMap)[ FD ]
Line_33 $$ map = newMap-->Line_24 $$ newMap = map.copyAndRemove(key)[ FD ]
Line_15 $$ O key = new O(v, h)-->Line_20 $$ newRef.put(key, value)[ FD ]
Line_8 $$ Map<O, Integer> ref = new HashMap()-->Line_35 $$ assertEquals(ref, CopyOnWriteHashMap.copyOf(ref))[ FD ]
Line_17 $$ final CopyOnWriteHashMap<O, Integer> newMap-->Line_30 $$ assertEquals(newRef, newMap)[ FD ]
Line_25 $$ if (removed == null) -->Line_26 $$ assertSame(map, newMap)[ CD ]
Line_9 $$ CopyOnWriteHashMap<O, Integer> map = new CopyOnWriteHashMap()-->Line_10 $$ assertEquals(ref, map)[ FD ]
Line_4 $$ for (int iter = 0; iter < iters; ++iter) -->Line_11 $$ final int hashBase = randomInt()[ CD ]
Line_4 $$ for (int iter = 0; iter < iters; ++iter) -->Line_6 $$ final int hashBits = randomInt(valueBits)[ CD ]
Line_17 $$ final CopyOnWriteHashMap<O, Integer> newMap-->Line_21 $$ newMap = map.copyAndPut(key, value)[ FD ]
Line_21 $$ newMap = map.copyAndPut(key, value)-->Line_24 $$ newMap = map.copyAndRemove(key)[ FD ]
Line_15 $$ O key = new O(v, h)-->Line_21 $$ newMap = map.copyAndPut(key, value)[ FD ]
Line_8 $$ Map<O, Integer> ref = new HashMap()-->Line_32 $$ ref = newRef[ FD ]
Line_21 $$ newMap = map.copyAndPut(key, value)-->Line_33 $$ map = newMap[ FD ]
Line_21 $$ newMap = map.copyAndPut(key, value)-->Line_30 $$ assertEquals(newRef, newMap)[ FD ]
Line_18 $$ if (randomBoolean()) -->Line_24 $$ newMap = map.copyAndRemove(key)[ CD ]
Line_32 $$ ref = newRef-->Line_36 $$ assertEquals(emptyMap(), CopyOnWriteHashMap.copyOf(ref).copyAndRemoveAll(ref.keySet()))[ FD ]
Line_24 $$ newMap = map.copyAndRemove(key)-->Line_31 $$ assertEquals(newMap, newRef)[ FD ]
Line_12 $$ for (int i = 0; i < numOps; ++i) -->Line_33 $$ map = newMap[ CD ]
Line_9 $$ CopyOnWriteHashMap<O, Integer> map = new CopyOnWriteHashMap()-->Line_33 $$ map = newMap[ FD ]
Line_12 $$ for (int i = 0; i < numOps; ++i) -->Line_13 $$ final int v = randomInt(1 << valueBits)[ CD ]
Line_33 $$ map = newMap-->Line_29 $$ assertEquals(ref, map)[ FD ]
Line_16 $$ Map<O, Integer> newRef = new HashMap(ref)-->Line_20 $$ newRef.put(key, value)[ FD ]
Line_19 $$ Integer value = v-->Line_21 $$ newMap = map.copyAndPut(key, value)[ FD ]
Line_16 $$ Map<O, Integer> newRef = new HashMap(ref)-->Line_32 $$ ref = newRef[ FD ]
Line_8 $$ Map<O, Integer> ref = new HashMap()-->Line_29 $$ assertEquals(ref, map)[ FD ]
Line_4 $$ for (int iter = 0; iter < iters; ++iter) -->Line_35 $$ assertEquals(ref, CopyOnWriteHashMap.copyOf(ref))[ CD ]
Line_4 $$ for (int iter = 0; iter < iters; ++iter) -->Line_36 $$ assertEquals(emptyMap(), CopyOnWriteHashMap.copyOf(ref).copyAndRemoveAll(ref.keySet()))[ CD ]
Line_32 $$ ref = newRef-->Line_35 $$ assertEquals(ref, CopyOnWriteHashMap.copyOf(ref))[ FD ]
Line_24 $$ newMap = map.copyAndRemove(key)-->Line_26 $$ assertSame(map, newMap)[ FD ]
Line_4 $$ for (int iter = 0; iter < iters; ++iter) -->Line_5 $$ final int valueBits = randomIntBetween(1, 30)[ CD ]
Line_33 $$ map = newMap-->Line_21 $$ newMap = map.copyAndPut(key, value)[ FD ]
Line_12 $$ for (int i = 0; i < numOps; ++i) -->Line_16 $$ Map<O, Integer> newRef = new HashMap(ref)[ CD ]
Line_15 $$ O key = new O(v, h)-->Line_24 $$ newMap = map.copyAndRemove(key)[ FD ]
Line_9 $$ CopyOnWriteHashMap<O, Integer> map = new CopyOnWriteHashMap()-->Line_26 $$ assertSame(map, newMap)[ FD ]
Line_12 $$ for (int i = 0; i < numOps; ++i) -->Line_31 $$ assertEquals(newMap, newRef)[ CD ]
Line_17 $$ final CopyOnWriteHashMap<O, Integer> newMap-->Line_31 $$ assertEquals(newMap, newRef)[ FD ]
Line_4 $$ for (int iter = 0; iter < iters; ++iter) -->Line_8 $$ Map<O, Integer> ref = new HashMap()[ CD ]
Line_24 $$ newMap = map.copyAndRemove(key)-->Line_33 $$ map = newMap[ FD ]
Line_23 $$ final Integer removed = newRef.remove(key)-->Line_25 $$ if (removed == null) [ FD ]
Line_12 $$ for (int i = 0; i < numOps; ++i) -->Line_32 $$ ref = newRef[ CD ]
Line_2 $$ public void testDuel() -->Line_3 $$ final int iters = scaledRandomIntBetween(2, 5)[ CD ]
Line_12 $$ for (int i = 0; i < numOps; ++i) -->Line_15 $$ O key = new O(v, h)[ CD ]
Line_8 $$ Map<O, Integer> ref = new HashMap()-->Line_10 $$ assertEquals(ref, map)[ FD ]
Line_5 $$ final int valueBits = randomIntBetween(1, 30)-->Line_6 $$ final int hashBits = randomInt(valueBits)[ FD ]
Line_2 $$ public void testDuel() -->Line_4 $$ for (int iter = 0; iter < iters; ++iter) [ CD ]
Line_9 $$ CopyOnWriteHashMap<O, Integer> map = new CopyOnWriteHashMap()-->Line_21 $$ newMap = map.copyAndPut(key, value)[ FD ]
Line_21 $$ newMap = map.copyAndPut(key, value)-->Line_31 $$ assertEquals(newMap, newRef)[ FD ]
Line_15 $$ O key = new O(v, h)-->Line_23 $$ final Integer removed = newRef.remove(key)[ FD ]
Line_12 $$ for (int i = 0; i < numOps; ++i) -->Line_29 $$ assertEquals(ref, map)[ CD ]
Line_7 $$ final int numOps = randomInt(10 + hashBits * 100)-->Line_12 $$ for (int i = 0; i < numOps; ++i) [ FD ]
Line_17 $$ final CopyOnWriteHashMap<O, Integer> newMap-->Line_24 $$ newMap = map.copyAndRemove(key)[ FD ]
Line_32 $$ ref = newRef-->Line_29 $$ assertEquals(ref, map)[ FD ]
Line_12 $$ for (int i = 0; i < numOps; ++i) -->Line_17 $$ final CopyOnWriteHashMap<O, Integer> newMap[ CD ]
Line_9 $$ CopyOnWriteHashMap<O, Integer> map = new CopyOnWriteHashMap()-->Line_24 $$ newMap = map.copyAndRemove(key)[ FD ]
Line_21 $$ newMap = map.copyAndPut(key, value)-->Line_26 $$ assertSame(map, newMap)[ FD ]
Line_16 $$ Map<O, Integer> newRef = new HashMap(ref)-->Line_31 $$ assertEquals(newMap, newRef)[ FD ]
Line_19 $$ Integer value = v-->Line_20 $$ newRef.put(key, value)[ FD ]
Line_17 $$ final CopyOnWriteHashMap<O, Integer> newMap-->Line_26 $$ assertSame(map, newMap)[ FD ]
Line_12 $$ for (int i = 0; i < numOps; ++i) -->Line_30 $$ assertEquals(newRef, newMap)[ CD ]
Line_4 $$ for (int iter = 0; iter < iters; ++iter) -->Line_12 $$ for (int i = 0; i < numOps; ++i) [ CD ]
Line_18 $$ if (randomBoolean()) -->Line_23 $$ final Integer removed = newRef.remove(key)[ CD ]
Line_17 $$ final CopyOnWriteHashMap<O, Integer> newMap-->Line_33 $$ map = newMap[ FD ]
Line_24 $$ newMap = map.copyAndRemove(key)-->Line_30 $$ assertEquals(newRef, newMap)[ FD ]
Line_3 $$ final int iters = scaledRandomIntBetween(2, 5)-->Line_4 $$ for (int iter = 0; iter < iters; ++iter) [ FD ]
Line_9 $$ CopyOnWriteHashMap<O, Integer> map = new CopyOnWriteHashMap()-->Line_29 $$ assertEquals(ref, map)[ FD ]
Line_16 $$ Map<O, Integer> newRef = new HashMap(ref)-->Line_30 $$ assertEquals(newRef, newMap)[ FD ]
