Line_2 $$ public void testJSONGeneration() throws IOException -->Line_3 $$ Map<String, Object> vars = new HashMap()[ CD ]
Line_2 $$ public void testJSONGeneration() throws IOException -->Line_4 $$ vars.put("template", "filled")[ CD ]
Line_5 $$ TemplateQueryBuilder builder = new TemplateQueryBuilder(new Template("I am a $template string", ScriptType.INLINE, null, null, vars))-->Line_8 $$ builder.doXContent(content, null)[ FD ]
Line_6 $$ XContentBuilder content = XContentFactory.jsonBuilder()-->Line_10 $$ content.close()[ FD ]
Line_6 $$ XContentBuilder content = XContentFactory.jsonBuilder()-->Line_7 $$ content.startObject()[ FD ]
Line_2 $$ public void testJSONGeneration() throws IOException -->Line_6 $$ XContentBuilder content = XContentFactory.jsonBuilder()[ CD ]
Line_3 $$ Map<String, Object> vars = new HashMap()-->Line_4 $$ vars.put("template", "filled")[ FD ]
Line_2 $$ public void testJSONGeneration() throws IOException -->Line_10 $$ content.close()[ CD ]
Line_2 $$ public void testJSONGeneration() throws IOException -->Line_9 $$ content.endObject()[ CD ]
Line_2 $$ public void testJSONGeneration() throws IOException -->Line_7 $$ content.startObject()[ CD ]
Line_2 $$ public void testJSONGeneration() throws IOException -->Line_11 $$ assertEquals("[ CD ]
Line_2 $$ public void testJSONGeneration() throws IOException -->Line_5 $$ TemplateQueryBuilder builder = new TemplateQueryBuilder(new Template("I am a $template string", ScriptType.INLINE, null, null, vars))[ CD ]
Line_6 $$ XContentBuilder content = XContentFactory.jsonBuilder()-->Line_9 $$ content.endObject()[ FD ]
Line_6 $$ XContentBuilder content = XContentFactory.jsonBuilder()-->Line_8 $$ builder.doXContent(content, null)[ FD ]
Line_2 $$ public void testJSONGeneration() throws IOException -->Line_8 $$ builder.doXContent(content, null)[ CD ]
Line_6 $$ XContentBuilder content = XContentFactory.jsonBuilder()-->Line_11 $$ assertEquals("[ FD ]
