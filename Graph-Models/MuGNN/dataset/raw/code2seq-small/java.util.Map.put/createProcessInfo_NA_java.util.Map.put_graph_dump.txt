Line_2 $$ Map<String, ProcessInfo> createProcessInfo(String processesInfoStr) -->Line_3 $$ String[] processesStr = processesInfoStr.split("\r\n")[ FD ]
Line_2 $$ Map<String, ProcessInfo> createProcessInfo(String processesInfoStr) -->Line_3 $$ String[] processesStr = processesInfoStr.split("\r\n")[ CD ]
Line_2 $$ Map<String, ProcessInfo> createProcessInfo(String processesInfoStr) -->Line_5 $$ final int procInfoSplitCount = 4[ CD ]
Line_7 $$ if (processStr != null) -->Line_9 $$ if (procInfo.length == procInfoSplitCount) [ CD ]
Line_7 $$ if (processStr != null) -->Line_8 $$ String[] procInfo = processStr.split(",")[ CD ]
Line_5 $$ final int procInfoSplitCount = 4-->Line_9 $$ if (procInfo.length == procInfoSplitCount) [ FD ]
Line_11 $$ ProcessInfo pInfo = new ProcessInfo()-->Line_16 $$ allProcs.put(pInfo.pid, pInfo)[ FD ]
Line_2 $$ Map<String, ProcessInfo> createProcessInfo(String processesInfoStr) -->Line_4 $$ Map<String, ProcessInfo> allProcs = new HashMap<String, ProcessInfo>()[ CD ]
Line_9 $$ if (procInfo.length == procInfoSplitCount) -->Line_21 $$ LOG.debug("Expected split length of proc info to be " + procInfoSplitCount + ". Got " + procInfo.length)[ CD ]
Line_6 $$ for (String processStr : processesStr) -->Line_8 $$ String[] procInfo = processStr.split(",")[ FD ]
Line_4 $$ Map<String, ProcessInfo> allProcs = new HashMap<String, ProcessInfo>()-->Line_16 $$ allProcs.put(pInfo.pid, pInfo)[ FD ]
Line_2 $$ Map<String, ProcessInfo> createProcessInfo(String processesInfoStr) -->Line_25 $$ return allProcs[ CD ]
Line_6 $$ for (String processStr : processesStr) -->Line_7 $$ if (processStr != null) [ FD ]
