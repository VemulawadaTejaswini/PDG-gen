Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_15 $$ logRecord = logRecords.get(1)[ FD ]
Line_2 $$ public void testGetFileFileNotModified() throws Exception -->Line_6 $$ pathMap.put(remoteFilePath, cachedLocalFilePath)[ CD ]
Line_5 $$ Map<Path, Path> pathMap = _nettyRepository.pathMap-->Line_6 $$ pathMap.put(remoteFilePath, cachedLocalFilePath)[ FD ]
Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_12 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_16 $$ Assert.assertEquals("Remote file " + remoteFilePath + " is not modified, use cached local file " + cachedLocalFilePath, logRecord.getMessage())[ FD ]
Line_3 $$ Path remoteFilePath = Paths.get("remoteFile")-->Line_6 $$ pathMap.put(remoteFilePath, cachedLocalFilePath)[ FD ]
Line_2 $$ public void testGetFileFileNotModified() throws Exception -->Line_5 $$ Map<Path, Path> pathMap = _nettyRepository.pathMap[ CD ]
Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_13 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_2 $$ public void testGetFileFileNotModified() throws Exception -->Line_4 $$ Path cachedLocalFilePath = Paths.get("cacheLocalFile")[ CD ]
Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_14 $$ Assert.assertEquals("Fetching remote file " + remoteFilePath, logRecord.getMessage())[ FD ]
Line_8 $$ NoticeableFuture<Path> noticeableFuture = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, Paths.get("localFile"), false, false)-->Line_21 $$ Assert.assertSame(cachedLocalFilePath, noticeableFuture.get())[ FD ]
Line_3 $$ Path remoteFilePath = Paths.get("remoteFile")-->Line_19 $$ NoticeableFuture<Path> noticeableFuture = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, Paths.get("localFile"), false, false)[ FD ]
Line_8 $$ NoticeableFuture<Path> noticeableFuture = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, Paths.get("localFile"), false, false)-->Line_10 $$ Assert.assertSame(cachedLocalFilePath, noticeableFuture.get())[ FD ]
Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_23 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_4 $$ Path cachedLocalFilePath = Paths.get("cacheLocalFile")-->Line_10 $$ Assert.assertSame(cachedLocalFilePath, noticeableFuture.get())[ FD ]
Line_3 $$ Path remoteFilePath = Paths.get("remoteFile")-->Line_8 $$ NoticeableFuture<Path> noticeableFuture = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, Paths.get("localFile"), false, false)[ FD ]
Line_7 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyRepository.class.getName(), Level.FINEST)) -->Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_4 $$ Path cachedLocalFilePath = Paths.get("cacheLocalFile")-->Line_6 $$ pathMap.put(remoteFilePath, cachedLocalFilePath)[ FD ]
Line_3 $$ Path remoteFilePath = Paths.get("remoteFile")-->Line_9 $$ _asyncBroker.takeWithResult(remoteFilePath, new FileResponse(remoteFilePath, FileResponse.FILE_NOT_MODIFIED, 0, false))[ FD ]
Line_3 $$ Path remoteFilePath = Paths.get("remoteFile")-->Line_20 $$ _asyncBroker.takeWithResult(remoteFilePath, new FileResponse(remoteFilePath, FileResponse.FILE_NOT_MODIFIED, 0, false))[ FD ]
Line_7 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyRepository.class.getName(), Level.FINEST)) -->Line_22 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_4 $$ Path cachedLocalFilePath = Paths.get("cacheLocalFile")-->Line_21 $$ Assert.assertSame(cachedLocalFilePath, noticeableFuture.get())[ FD ]
Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_15 $$ logRecord = logRecords.get(1)[ FD ]
Line_15 $$ logRecord = logRecords.get(1)-->Line_16 $$ Assert.assertEquals("Remote file " + remoteFilePath + " is not modified, use cached local file " + cachedLocalFilePath, logRecord.getMessage())[ FD ]
Line_2 $$ public void testGetFileFileNotModified() throws Exception -->Line_3 $$ Path remoteFilePath = Paths.get("remoteFile")[ CD ]
