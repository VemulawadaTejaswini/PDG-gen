Line_2 $$ public Map<String, ClassAnnotationInformation<A, T>> createAnnotationInformation(final CompositeIndex index, final PropertyReplacer propertyReplacer) -->Line_16 $$ final Map<DotName, List<TargetAnnotation>> methodLevel = new HashMap<DotName, List<TargetAnnotation>>()[ CD ]
Line_33 $$ fieldLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_65 $$ fieldData.put(name, data = new ArrayList<T>(1))[ FD ]
Line_17 $$ final Map<DotName, List<TargetAnnotation>> fieldLevel = new HashMap<DotName, List<TargetAnnotation>>()-->Line_33 $$ fieldLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))[ FD ]
Line_18 $$ for (TargetAnnotation instance : annotations) -->Line_30 $$ if (instance.target() instanceof FieldInfo) [ FD ]
Line_28 $$ methodLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_33 $$ fieldLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))[ FD ]
Line_25 $$ if (instance.target() instanceof MethodInfo) -->Line_27 $$ if (data == null)[ CD ]
Line_5 $$ for (AnnotationInstance multiInstance : index.getAnnotations(multiAnnotationDotName)) -->Line_6 $$ annotations.addAll(fromMultiAnnotation(multiInstance))[ FD ]
Line_58 $$ fieldData = Collections.emptyMap()-->Line_65 $$ fieldData.put(name, data = new ArrayList<T>(1))[ FD ]
Line_28 $$ methodLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_65 $$ fieldData.put(name, data = new ArrayList<T>(1))[ FD ]
Line_56 $$ final Map<String, List<T>> fieldData-->Line_60 $$ fieldData = new HashMap<String, List<T>>()[ FD ]
Line_72 $$ if (methodAnnotations == null) -->Line_75 $$ methodData = new HashMap<MethodIdentifier, List<T>>()[ CD ]
Line_60 $$ fieldData = new HashMap<String, List<T>>()-->Line_65 $$ fieldData.put(name, data = new ArrayList<T>(1))[ FD ]
Line_75 $$ methodData = new HashMap<MethodIdentifier, List<T>>()-->Line_78 $$ List<T> data = methodData.get(identifier)[ FD ]
Line_19 $$ final DotName targetClass = getAnnotationClass(instance.target()).name()-->Line_23 $$ classLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))[ FD ]
Line_30 $$ if (instance.target() instanceof FieldInfo) -->Line_31 $$ List<TargetAnnotation> data = fieldLevel.get(targetClass)[ CD ]
Line_2 $$ public Map<String, ClassAnnotationInformation<A, T>> createAnnotationInformation(final CompositeIndex index, final PropertyReplacer propertyReplacer) -->Line_40 $$ final Map<String, ClassAnnotationInformation<A, T>> ret = new HashMap<String, ClassAnnotationInformation<A, T>>()[ CD ]
Line_64 $$ if (data == null) -->Line_65 $$ fieldData.put(name, data = new ArrayList<T>(1))[ CD ]
Line_27 $$ if (data == null)-->Line_28 $$ methodLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))[ CD ]
Line_23 $$ classLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_27 $$ if (data == null)[ FD ]
Line_28 $$ methodLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_80 $$ methodData.put(identifier, data = new ArrayList<T>(1))[ FD ]
Line_18 $$ for (TargetAnnotation instance : annotations) -->Line_34 $$ data.add(instance)[ FD ]
Line_17 $$ final Map<DotName, List<TargetAnnotation>> fieldLevel = new HashMap<DotName, List<TargetAnnotation>>()-->Line_43 $$ allClasses.addAll(fieldLevel.keySet())[ FD ]
Line_21 $$ List<TargetAnnotation> data = classLevel.get(targetClass)-->Line_22 $$ if (data == null)[ FD ]
Line_20 $$ if (instance.target() instanceof ClassInfo) -->Line_21 $$ List<TargetAnnotation> data = classLevel.get(targetClass)[ CD ]
Line_23 $$ classLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_67 $$ data.add(fromAnnotation(instance.instance(), propertyReplacer))[ FD ]
Line_79 $$ if (data == null) -->Line_80 $$ methodData.put(identifier, data = new ArrayList<T>(1))[ CD ]
Line_33 $$ fieldLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_80 $$ methodData.put(identifier, data = new ArrayList<T>(1))[ FD ]
Line_44 $$ for (DotName clazz : allClasses) -->Line_45 $$ final List<TargetAnnotation> classAnnotations = classLevel.get(clazz)[ FD ]
Line_71 $$ final Map<MethodIdentifier, List<T>> methodData-->Line_73 $$ methodData = Collections.emptyMap()[ FD ]
Line_25 $$ if (instance.target() instanceof MethodInfo) -->Line_29 $$ data.add(instance)[ CD ]
Line_23 $$ classLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_28 $$ methodLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))[ FD ]
Line_2 $$ public Map<String, ClassAnnotationInformation<A, T>> createAnnotationInformation(final CompositeIndex index, final PropertyReplacer propertyReplacer) -->Line_4 $$ if (multiAnnotationDotName != null) [ CD ]
Line_28 $$ methodLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_64 $$ if (data == null) [ FD ]
Line_65 $$ fieldData.put(name, data = new ArrayList<T>(1))-->Line_80 $$ methodData.put(identifier, data = new ArrayList<T>(1))[ FD ]
Line_85 $$ ClassAnnotationInformation<A, T> information = new ClassAnnotationInformation<A, T>(annotationType, classData, methodData, fieldData)-->Line_86 $$ ret.put(clazz.toString(), information)[ FD ]
Line_16 $$ final Map<DotName, List<TargetAnnotation>> methodLevel = new HashMap<DotName, List<TargetAnnotation>>()-->Line_42 $$ allClasses.addAll(methodLevel.keySet())[ FD ]
Line_19 $$ final DotName targetClass = getAnnotationClass(instance.target()).name()-->Line_31 $$ List<TargetAnnotation> data = fieldLevel.get(targetClass)[ FD ]
Line_60 $$ fieldData = new HashMap<String, List<T>>()-->Line_63 $$ List<T> data = fieldData.get(name)[ FD ]
Line_21 $$ List<TargetAnnotation> data = classLevel.get(targetClass)-->Line_27 $$ if (data == null)[ FD ]
Line_2 $$ public Map<String, ClassAnnotationInformation<A, T>> createAnnotationInformation(final CompositeIndex index, final PropertyReplacer propertyReplacer) -->Line_67 $$ data.add(fromAnnotation(instance.instance(), propertyReplacer))[ FD ]
Line_21 $$ List<TargetAnnotation> data = classLevel.get(targetClass)-->Line_65 $$ fieldData.put(name, data = new ArrayList<T>(1))[ FD ]
Line_20 $$ if (instance.target() instanceof ClassInfo) -->Line_25 $$ if (instance.target() instanceof MethodInfo) [ CD ]
Line_21 $$ List<TargetAnnotation> data = classLevel.get(targetClass)-->Line_79 $$ if (data == null) [ FD ]
Line_18 $$ for (TargetAnnotation instance : annotations) -->Line_25 $$ if (instance.target() instanceof MethodInfo) [ FD ]
Line_33 $$ fieldLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_79 $$ if (data == null) [ FD ]
Line_21 $$ List<TargetAnnotation> data = classLevel.get(targetClass)-->Line_23 $$ classLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))[ FD ]
Line_17 $$ final Map<DotName, List<TargetAnnotation>> fieldLevel = new HashMap<DotName, List<TargetAnnotation>>()-->Line_31 $$ List<TargetAnnotation> data = fieldLevel.get(targetClass)[ FD ]
Line_30 $$ if (instance.target() instanceof FieldInfo) -->Line_34 $$ data.add(instance)[ CD ]
Line_71 $$ final Map<MethodIdentifier, List<T>> methodData-->Line_80 $$ methodData.put(identifier, data = new ArrayList<T>(1))[ FD ]
Line_30 $$ if (instance.target() instanceof FieldInfo) -->Line_32 $$ if (data == null)[ CD ]
Line_21 $$ List<TargetAnnotation> data = classLevel.get(targetClass)-->Line_34 $$ data.add(instance)[ FD ]
Line_21 $$ List<TargetAnnotation> data = classLevel.get(targetClass)-->Line_33 $$ fieldLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))[ FD ]
Line_45 $$ final List<TargetAnnotation> classAnnotations = classLevel.get(clazz)-->Line_47 $$ if (classAnnotations == null) [ FD ]
Line_2 $$ public Map<String, ClassAnnotationInformation<A, T>> createAnnotationInformation(final CompositeIndex index, final PropertyReplacer propertyReplacer) -->Line_15 $$ final Map<DotName, List<TargetAnnotation>> classLevel = new HashMap<DotName, List<TargetAnnotation>>()[ CD ]
Line_30 $$ if (instance.target() instanceof FieldInfo) -->Line_35 $$ if (instance.target() instanceof MethodParameterInfo) [ CD ]
Line_23 $$ classLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_65 $$ fieldData.put(name, data = new ArrayList<T>(1))[ FD ]
Line_73 $$ methodData = Collections.emptyMap()-->Line_75 $$ methodData = new HashMap<MethodIdentifier, List<T>>()[ FD ]
Line_21 $$ List<TargetAnnotation> data = classLevel.get(targetClass)-->Line_64 $$ if (data == null) [ FD ]
Line_50 $$ classData = new ArrayList<T>(classAnnotations.size())-->Line_52 $$ classData.add(fromAnnotation(instance.instance(), propertyReplacer))[ FD ]
Line_44 $$ for (DotName clazz : allClasses) -->Line_86 $$ ret.put(clazz.toString(), information)[ FD ]
Line_23 $$ classLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_34 $$ data.add(instance)[ FD ]
Line_18 $$ for (TargetAnnotation instance : annotations) -->Line_62 $$ final String name = ((FieldInfo) instance.target()).name()[ FD ]
Line_18 $$ for (TargetAnnotation instance : annotations) -->Line_24 $$ data.add(instance)[ FD ]
Line_2 $$ public Map<String, ClassAnnotationInformation<A, T>> createAnnotationInformation(final CompositeIndex index, final PropertyReplacer propertyReplacer) -->Line_10 $$ if (simpleAnnotations != null) [ CD ]
Line_21 $$ List<TargetAnnotation> data = classLevel.get(targetClass)-->Line_24 $$ data.add(instance)[ FD ]
Line_28 $$ methodLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_79 $$ if (data == null) [ FD ]
Line_18 $$ for (TargetAnnotation instance : annotations) -->Line_20 $$ if (instance.target() instanceof ClassInfo) [ FD ]
Line_46 $$ final List<T> classData-->Line_52 $$ classData.add(fromAnnotation(instance.instance(), propertyReplacer))[ FD ]
Line_2 $$ public Map<String, ClassAnnotationInformation<A, T>> createAnnotationInformation(final CompositeIndex index, final PropertyReplacer propertyReplacer) -->Line_43 $$ allClasses.addAll(fieldLevel.keySet())[ CD ]
Line_21 $$ List<TargetAnnotation> data = classLevel.get(targetClass)-->Line_67 $$ data.add(fromAnnotation(instance.instance(), propertyReplacer))[ FD ]
Line_21 $$ List<TargetAnnotation> data = classLevel.get(targetClass)-->Line_32 $$ if (data == null)[ FD ]
Line_23 $$ classLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_29 $$ data.add(instance)[ FD ]
Line_33 $$ fieldLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_34 $$ data.add(instance)[ FD ]
Line_18 $$ for (TargetAnnotation instance : annotations) -->Line_37 $$ throw EeLogger.ROOT_LOGGER.unknownAnnotationTargetType(instance.target())[ FD ]
Line_73 $$ methodData = Collections.emptyMap()-->Line_78 $$ List<T> data = methodData.get(identifier)[ FD ]
Line_15 $$ final Map<DotName, List<TargetAnnotation>> classLevel = new HashMap<DotName, List<TargetAnnotation>>()-->Line_45 $$ final List<TargetAnnotation> classAnnotations = classLevel.get(clazz)[ FD ]
Line_73 $$ methodData = Collections.emptyMap()-->Line_80 $$ methodData.put(identifier, data = new ArrayList<T>(1))[ FD ]
Line_11 $$ for (AnnotationInstance annotation : simpleAnnotations) -->Line_12 $$ annotations.add(new TargetAnnotation(annotation, annotation.target()))[ FD ]
Line_62 $$ final String name = ((FieldInfo) instance.target()).name()-->Line_65 $$ fieldData.put(name, data = new ArrayList<T>(1))[ FD ]
Line_33 $$ fieldLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_67 $$ data.add(fromAnnotation(instance.instance(), propertyReplacer))[ FD ]
Line_2 $$ public Map<String, ClassAnnotationInformation<A, T>> createAnnotationInformation(final CompositeIndex index, final PropertyReplacer propertyReplacer) -->Line_41 $$ final Set<DotName> allClasses = new HashSet<DotName>(classLevel.keySet())[ CD ]
Line_19 $$ final DotName targetClass = getAnnotationClass(instance.target()).name()-->Line_26 $$ List<TargetAnnotation> data = methodLevel.get(targetClass)[ FD ]
Line_2 $$ public Map<String, ClassAnnotationInformation<A, T>> createAnnotationInformation(final CompositeIndex index, final PropertyReplacer propertyReplacer) -->Line_9 $$ final List<AnnotationInstance> simpleAnnotations = index.getAnnotations(annotationDotName)[ FD ]
Line_28 $$ methodLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_34 $$ data.add(instance)[ FD ]
Line_22 $$ if (data == null)-->Line_23 $$ classLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))[ CD ]
Line_2 $$ public Map<String, ClassAnnotationInformation<A, T>> createAnnotationInformation(final CompositeIndex index, final PropertyReplacer propertyReplacer) -->Line_5 $$ for (AnnotationInstance multiInstance : index.getAnnotations(multiAnnotationDotName)) [ FD ]
Line_41 $$ final Set<DotName> allClasses = new HashSet<DotName>(classLevel.keySet())-->Line_42 $$ allClasses.addAll(methodLevel.keySet())[ FD ]
Line_77 $$ final MethodIdentifier identifier = getMethodIdentifier(instance.target())-->Line_80 $$ methodData.put(identifier, data = new ArrayList<T>(1))[ FD ]
Line_71 $$ final Map<MethodIdentifier, List<T>> methodData-->Line_78 $$ List<T> data = methodData.get(identifier)[ FD ]
Line_48 $$ classData = Collections.emptyList()-->Line_50 $$ classData = new ArrayList<T>(classAnnotations.size())[ FD ]
Line_16 $$ final Map<DotName, List<TargetAnnotation>> methodLevel = new HashMap<DotName, List<TargetAnnotation>>()-->Line_70 $$ final List<TargetAnnotation> methodAnnotations = methodLevel.get(clazz)[ FD ]
Line_71 $$ final Map<MethodIdentifier, List<T>> methodData-->Line_75 $$ methodData = new HashMap<MethodIdentifier, List<T>>()[ FD ]
Line_9 $$ final List<AnnotationInstance> simpleAnnotations = index.getAnnotations(annotationDotName)-->Line_10 $$ if (simpleAnnotations != null) [ FD ]
Line_2 $$ public Map<String, ClassAnnotationInformation<A, T>> createAnnotationInformation(final CompositeIndex index, final PropertyReplacer propertyReplacer) -->Line_52 $$ classData.add(fromAnnotation(instance.instance(), propertyReplacer))[ FD ]
Line_58 $$ fieldData = Collections.emptyMap()-->Line_63 $$ List<T> data = fieldData.get(name)[ FD ]
Line_17 $$ final Map<DotName, List<TargetAnnotation>> fieldLevel = new HashMap<DotName, List<TargetAnnotation>>()-->Line_55 $$ final List<TargetAnnotation> fieldAnnotations = fieldLevel.get(clazz)[ FD ]
Line_23 $$ classLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_82 $$ data.add(fromAnnotation(instance.instance(), propertyReplacer))[ FD ]
Line_3 $$ final List<TargetAnnotation> annotations = new ArrayList<TargetAnnotation>()-->Line_6 $$ annotations.addAll(fromMultiAnnotation(multiInstance))[ FD ]
Line_3 $$ final List<TargetAnnotation> annotations = new ArrayList<TargetAnnotation>()-->Line_12 $$ annotations.add(new TargetAnnotation(annotation, annotation.target()))[ FD ]
Line_21 $$ List<TargetAnnotation> data = classLevel.get(targetClass)-->Line_28 $$ methodLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))[ FD ]
Line_41 $$ final Set<DotName> allClasses = new HashSet<DotName>(classLevel.keySet())-->Line_43 $$ allClasses.addAll(fieldLevel.keySet())[ FD ]
Line_57 $$ if (fieldAnnotations == null) -->Line_58 $$ fieldData = Collections.emptyMap()[ CD ]
Line_32 $$ if (data == null)-->Line_33 $$ fieldLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))[ CD ]
Line_77 $$ final MethodIdentifier identifier = getMethodIdentifier(instance.target())-->Line_78 $$ List<T> data = methodData.get(identifier)[ FD ]
Line_2 $$ public Map<String, ClassAnnotationInformation<A, T>> createAnnotationInformation(final CompositeIndex index, final PropertyReplacer propertyReplacer) -->Line_88 $$ return ret[ CD ]
Line_65 $$ fieldData.put(name, data = new ArrayList<T>(1))-->Line_67 $$ data.add(fromAnnotation(instance.instance(), propertyReplacer))[ FD ]
Line_33 $$ fieldLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_64 $$ if (data == null) [ FD ]
Line_58 $$ fieldData = Collections.emptyMap()-->Line_60 $$ fieldData = new HashMap<String, List<T>>()[ FD ]
Line_18 $$ for (TargetAnnotation instance : annotations) -->Line_52 $$ classData.add(fromAnnotation(instance.instance(), propertyReplacer))[ FD ]
Line_2 $$ public Map<String, ClassAnnotationInformation<A, T>> createAnnotationInformation(final CompositeIndex index, final PropertyReplacer propertyReplacer) -->Line_82 $$ data.add(fromAnnotation(instance.instance(), propertyReplacer))[ FD ]
Line_44 $$ for (DotName clazz : allClasses) -->Line_55 $$ final List<TargetAnnotation> fieldAnnotations = fieldLevel.get(clazz)[ FD ]
Line_25 $$ if (instance.target() instanceof MethodInfo) -->Line_30 $$ if (instance.target() instanceof FieldInfo) [ CD ]
Line_44 $$ for (DotName clazz : allClasses) -->Line_70 $$ final List<TargetAnnotation> methodAnnotations = methodLevel.get(clazz)[ FD ]
Line_46 $$ final List<T> classData-->Line_50 $$ classData = new ArrayList<T>(classAnnotations.size())[ FD ]
Line_16 $$ final Map<DotName, List<TargetAnnotation>> methodLevel = new HashMap<DotName, List<TargetAnnotation>>()-->Line_26 $$ List<TargetAnnotation> data = methodLevel.get(targetClass)[ FD ]
Line_56 $$ final Map<String, List<T>> fieldData-->Line_63 $$ List<T> data = fieldData.get(name)[ FD ]
Line_19 $$ final DotName targetClass = getAnnotationClass(instance.target()).name()-->Line_21 $$ List<TargetAnnotation> data = classLevel.get(targetClass)[ FD ]
Line_23 $$ classLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_33 $$ fieldLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))[ FD ]
Line_21 $$ List<TargetAnnotation> data = classLevel.get(targetClass)-->Line_29 $$ data.add(instance)[ FD ]
Line_55 $$ final List<TargetAnnotation> fieldAnnotations = fieldLevel.get(clazz)-->Line_57 $$ if (fieldAnnotations == null) [ FD ]
Line_75 $$ methodData = new HashMap<MethodIdentifier, List<T>>()-->Line_80 $$ methodData.put(identifier, data = new ArrayList<T>(1))[ FD ]
Line_20 $$ if (instance.target() instanceof ClassInfo) -->Line_24 $$ data.add(instance)[ CD ]
Line_57 $$ if (fieldAnnotations == null) -->Line_60 $$ fieldData = new HashMap<String, List<T>>()[ CD ]
Line_23 $$ classLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_24 $$ data.add(instance)[ FD ]
Line_2 $$ public Map<String, ClassAnnotationInformation<A, T>> createAnnotationInformation(final CompositeIndex index, final PropertyReplacer propertyReplacer) -->Line_17 $$ final Map<DotName, List<TargetAnnotation>> fieldLevel = new HashMap<DotName, List<TargetAnnotation>>()[ CD ]
Line_23 $$ classLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_79 $$ if (data == null) [ FD ]
Line_18 $$ for (TargetAnnotation instance : annotations) -->Line_19 $$ final DotName targetClass = getAnnotationClass(instance.target()).name()[ FD ]
Line_28 $$ methodLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_32 $$ if (data == null)[ FD ]
Line_18 $$ for (TargetAnnotation instance : annotations) -->Line_67 $$ data.add(fromAnnotation(instance.instance(), propertyReplacer))[ FD ]
Line_28 $$ methodLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_67 $$ data.add(fromAnnotation(instance.instance(), propertyReplacer))[ FD ]
Line_2 $$ public Map<String, ClassAnnotationInformation<A, T>> createAnnotationInformation(final CompositeIndex index, final PropertyReplacer propertyReplacer) -->Line_42 $$ allClasses.addAll(methodLevel.keySet())[ CD ]
Line_19 $$ final DotName targetClass = getAnnotationClass(instance.target()).name()-->Line_33 $$ fieldLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))[ FD ]
Line_40 $$ final Map<String, ClassAnnotationInformation<A, T>> ret = new HashMap<String, ClassAnnotationInformation<A, T>>()-->Line_86 $$ ret.put(clazz.toString(), information)[ FD ]
Line_47 $$ if (classAnnotations == null) -->Line_50 $$ classData = new ArrayList<T>(classAnnotations.size())[ CD ]
Line_16 $$ final Map<DotName, List<TargetAnnotation>> methodLevel = new HashMap<DotName, List<TargetAnnotation>>()-->Line_28 $$ methodLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))[ FD ]
Line_56 $$ final Map<String, List<T>> fieldData-->Line_58 $$ fieldData = Collections.emptyMap()[ FD ]
Line_47 $$ if (classAnnotations == null) -->Line_48 $$ classData = Collections.emptyList()[ CD ]
Line_21 $$ List<TargetAnnotation> data = classLevel.get(targetClass)-->Line_82 $$ data.add(fromAnnotation(instance.instance(), propertyReplacer))[ FD ]
Line_23 $$ classLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_32 $$ if (data == null)[ FD ]
Line_70 $$ final List<TargetAnnotation> methodAnnotations = methodLevel.get(clazz)-->Line_72 $$ if (methodAnnotations == null) [ FD ]
Line_18 $$ for (TargetAnnotation instance : annotations) -->Line_77 $$ final MethodIdentifier identifier = getMethodIdentifier(instance.target())[ FD ]
Line_23 $$ classLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_64 $$ if (data == null) [ FD ]
Line_28 $$ methodLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_82 $$ data.add(fromAnnotation(instance.instance(), propertyReplacer))[ FD ]
Line_2 $$ public Map<String, ClassAnnotationInformation<A, T>> createAnnotationInformation(final CompositeIndex index, final PropertyReplacer propertyReplacer) -->Line_9 $$ final List<AnnotationInstance> simpleAnnotations = index.getAnnotations(annotationDotName)[ CD ]
Line_25 $$ if (instance.target() instanceof MethodInfo) -->Line_26 $$ List<TargetAnnotation> data = methodLevel.get(targetClass)[ CD ]
Line_48 $$ classData = Collections.emptyList()-->Line_52 $$ classData.add(fromAnnotation(instance.instance(), propertyReplacer))[ FD ]
Line_56 $$ final Map<String, List<T>> fieldData-->Line_65 $$ fieldData.put(name, data = new ArrayList<T>(1))[ FD ]
Line_80 $$ methodData.put(identifier, data = new ArrayList<T>(1))-->Line_82 $$ data.add(fromAnnotation(instance.instance(), propertyReplacer))[ FD ]
Line_20 $$ if (instance.target() instanceof ClassInfo) -->Line_22 $$ if (data == null)[ CD ]
Line_62 $$ final String name = ((FieldInfo) instance.target()).name()-->Line_63 $$ List<T> data = fieldData.get(name)[ FD ]
Line_15 $$ final Map<DotName, List<TargetAnnotation>> classLevel = new HashMap<DotName, List<TargetAnnotation>>()-->Line_21 $$ List<TargetAnnotation> data = classLevel.get(targetClass)[ FD ]
Line_33 $$ fieldLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_82 $$ data.add(fromAnnotation(instance.instance(), propertyReplacer))[ FD ]
Line_15 $$ final Map<DotName, List<TargetAnnotation>> classLevel = new HashMap<DotName, List<TargetAnnotation>>()-->Line_23 $$ classLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))[ FD ]
Line_18 $$ for (TargetAnnotation instance : annotations) -->Line_82 $$ data.add(fromAnnotation(instance.instance(), propertyReplacer))[ FD ]
Line_2 $$ public Map<String, ClassAnnotationInformation<A, T>> createAnnotationInformation(final CompositeIndex index, final PropertyReplacer propertyReplacer) -->Line_3 $$ final List<TargetAnnotation> annotations = new ArrayList<TargetAnnotation>()[ CD ]
Line_65 $$ fieldData.put(name, data = new ArrayList<T>(1))-->Line_82 $$ data.add(fromAnnotation(instance.instance(), propertyReplacer))[ FD ]
Line_72 $$ if (methodAnnotations == null) -->Line_73 $$ methodData = Collections.emptyMap()[ CD ]
Line_65 $$ fieldData.put(name, data = new ArrayList<T>(1))-->Line_79 $$ if (data == null) [ FD ]
Line_18 $$ for (TargetAnnotation instance : annotations) -->Line_29 $$ data.add(instance)[ FD ]
Line_21 $$ List<TargetAnnotation> data = classLevel.get(targetClass)-->Line_80 $$ methodData.put(identifier, data = new ArrayList<T>(1))[ FD ]
Line_28 $$ methodLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_29 $$ data.add(instance)[ FD ]
Line_15 $$ final Map<DotName, List<TargetAnnotation>> classLevel = new HashMap<DotName, List<TargetAnnotation>>()-->Line_41 $$ final Set<DotName> allClasses = new HashSet<DotName>(classLevel.keySet())[ FD ]
Line_45 $$ final List<TargetAnnotation> classAnnotations = classLevel.get(clazz)-->Line_50 $$ classData = new ArrayList<T>(classAnnotations.size())[ FD ]
Line_46 $$ final List<T> classData-->Line_48 $$ classData = Collections.emptyList()[ FD ]
Line_23 $$ classLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))-->Line_80 $$ methodData.put(identifier, data = new ArrayList<T>(1))[ FD ]
Line_19 $$ final DotName targetClass = getAnnotationClass(instance.target()).name()-->Line_28 $$ methodLevel.put(targetClass, data = new ArrayList<TargetAnnotation>(1))[ FD ]
Line_18 $$ for (TargetAnnotation instance : annotations) -->Line_35 $$ if (instance.target() instanceof MethodParameterInfo) [ FD ]
