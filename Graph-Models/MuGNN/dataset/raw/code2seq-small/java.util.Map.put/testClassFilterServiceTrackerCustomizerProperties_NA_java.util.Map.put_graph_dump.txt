Line_25 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_28 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ FD ]
Line_8 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, serviceTrackerCustomizer, properties)-->Line_9 $$ Assert.assertEquals(0, serviceTrackerList.size())[ FD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizerProperties() throws Exception -->Line_5 $$ ServiceTrackerCustomizer<InterfaceOne, InterfaceOne> serviceTrackerCustomizer = new MockServiceTrackerCustomizer(counter)[ CD ]
Line_13 $$ InterfaceOne interfaceOneB = getInstance()-->Line_14 $$ serviceTrackerList.add(interfaceOneB)[ FD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizerProperties() throws Exception -->Line_31 $$ Assert.assertEquals(2, counter.intValue())[ CD ]
Line_11 $$ ServiceRegistration<InterfaceOne> serviceRegistrationA = _registry.registerService(InterfaceOne.class, interfaceOneA)-->Line_12 $$ Assert.assertNotNull(serviceRegistrationA)[ FD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizerProperties() throws Exception -->Line_23 $$ Assert.assertEquals(1, serviceTrackerList.size())[ CD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizerProperties() throws Exception -->Line_24 $$ Assert.assertEquals(1, counter.intValue())[ CD ]
Line_19 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_28 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ FD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizerProperties() throws Exception -->Line_19 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ CD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizerProperties() throws Exception -->Line_28 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ CD ]
Line_19 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_29 $$ Assert.assertEquals(0, interfaceOnes.size())[ FD ]
Line_8 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, serviceTrackerCustomizer, properties)-->Line_23 $$ Assert.assertEquals(1, serviceTrackerList.size())[ FD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizerProperties() throws Exception -->Line_25 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ CD ]
Line_8 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, serviceTrackerCustomizer, properties)-->Line_14 $$ serviceTrackerList.add(interfaceOneB)[ FD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizerProperties() throws Exception -->Line_26 $$ Assert.assertEquals(1, interfaceOnes.size())[ CD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizerProperties() throws Exception -->Line_10 $$ InterfaceOne interfaceOneA = getInstance()[ CD ]
Line_8 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, serviceTrackerCustomizer, properties)-->Line_30 $$ Assert.assertEquals(0, serviceTrackerList.size())[ FD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizerProperties() throws Exception -->Line_20 $$ Assert.assertEquals(1, interfaceOnes.size())[ CD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizerProperties() throws Exception -->Line_8 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, serviceTrackerCustomizer, properties)[ CD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizerProperties() throws Exception -->Line_21 $$ Assert.assertEquals(1, counter.intValue())[ CD ]
Line_13 $$ InterfaceOne interfaceOneB = getInstance()-->Line_27 $$ serviceTrackerList.remove(interfaceOneB)[ FD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizerProperties() throws Exception -->Line_29 $$ Assert.assertEquals(0, interfaceOnes.size())[ CD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizerProperties() throws Exception -->Line_15 $$ Assert.assertEquals(1, serviceTrackerList.size())[ CD ]
Line_10 $$ InterfaceOne interfaceOneA = getInstance()-->Line_11 $$ ServiceRegistration<InterfaceOne> serviceRegistrationA = _registry.registerService(InterfaceOne.class, interfaceOneA)[ FD ]
Line_25 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_26 $$ Assert.assertEquals(1, interfaceOnes.size())[ FD ]
Line_25 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_29 $$ Assert.assertEquals(0, interfaceOnes.size())[ FD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizerProperties() throws Exception -->Line_30 $$ Assert.assertEquals(0, serviceTrackerList.size())[ CD ]
Line_5 $$ ServiceTrackerCustomizer<InterfaceOne, InterfaceOne> serviceTrackerCustomizer = new MockServiceTrackerCustomizer(counter)-->Line_8 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, serviceTrackerCustomizer, properties)[ FD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizerProperties() throws Exception -->Line_6 $$ Map<String, Object> properties = new HashMap()[ CD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizerProperties() throws Exception -->Line_7 $$ properties.put("a.property", "G")[ CD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizerProperties() throws Exception -->Line_3 $$ Filter filter = _registry.getFilter("(a.property=G)")[ CD ]
Line_19 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_20 $$ Assert.assertEquals(1, interfaceOnes.size())[ FD ]
Line_19 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_25 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ FD ]
Line_19 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_26 $$ Assert.assertEquals(1, interfaceOnes.size())[ FD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizerProperties() throws Exception -->Line_27 $$ serviceTrackerList.remove(interfaceOneB)[ CD ]
Line_6 $$ Map<String, Object> properties = new HashMap()-->Line_7 $$ properties.put("a.property", "G")[ FD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizerProperties() throws Exception -->Line_12 $$ Assert.assertNotNull(serviceRegistrationA)[ CD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizerProperties() throws Exception -->Line_13 $$ InterfaceOne interfaceOneB = getInstance()[ CD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizerProperties() throws Exception -->Line_14 $$ serviceTrackerList.add(interfaceOneB)[ CD ]
Line_16 $$ for (InterfaceOne interfaceOne : serviceTrackerList) -->Line_17 $$ Assert.assertNotNull(interfaceOne)[ FD ]
Line_11 $$ ServiceRegistration<InterfaceOne> serviceRegistrationA = _registry.registerService(InterfaceOne.class, interfaceOneA)-->Line_22 $$ serviceRegistrationA.unregister()[ FD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizerProperties() throws Exception -->Line_11 $$ ServiceRegistration<InterfaceOne> serviceRegistrationA = _registry.registerService(InterfaceOne.class, interfaceOneA)[ CD ]
Line_4 $$ AtomicInteger counter = new AtomicInteger()-->Line_31 $$ Assert.assertEquals(2, counter.intValue())[ FD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizerProperties() throws Exception -->Line_22 $$ serviceRegistrationA.unregister()[ CD ]
Line_4 $$ AtomicInteger counter = new AtomicInteger()-->Line_24 $$ Assert.assertEquals(1, counter.intValue())[ FD ]
Line_8 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, serviceTrackerCustomizer, properties)-->Line_27 $$ serviceTrackerList.remove(interfaceOneB)[ FD ]
Line_6 $$ Map<String, Object> properties = new HashMap()-->Line_8 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, serviceTrackerCustomizer, properties)[ FD ]
Line_28 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_29 $$ Assert.assertEquals(0, interfaceOnes.size())[ FD ]
Line_8 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, serviceTrackerCustomizer, properties)-->Line_15 $$ Assert.assertEquals(1, serviceTrackerList.size())[ FD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizerProperties() throws Exception -->Line_9 $$ Assert.assertEquals(0, serviceTrackerList.size())[ CD ]
Line_3 $$ Filter filter = _registry.getFilter("(a.property=G)")-->Line_8 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, serviceTrackerCustomizer, properties)[ FD ]
Line_2 $$ public void testClassFilterServiceTrackerCustomizerProperties() throws Exception -->Line_4 $$ AtomicInteger counter = new AtomicInteger()[ CD ]
Line_4 $$ AtomicInteger counter = new AtomicInteger()-->Line_21 $$ Assert.assertEquals(1, counter.intValue())[ FD ]
