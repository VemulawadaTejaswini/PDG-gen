Line_4 $$ PersistentHashMap<Integer, String> map = new PersistentHashMap(file, new IntInlineKeyDescriptor(), EnumeratorStringDescriptor.INSTANCE)-->Line_15 $$ map = new PersistentHashMap(file, new IntInlineKeyDescriptor(), EnumeratorStringDescriptor.INSTANCE)[ FD ]
Line_15 $$ map = new PersistentHashMap(file, new IntInlineKeyDescriptor(), EnumeratorStringDescriptor.INSTANCE)-->Line_17 $$ final Collection<Integer> allKeys = new HashSet(map.getAllKeysWithExistingMapping())[ FD ]
Line_8 $$ for (int i = 0; i < stringsCount; ++i) -->Line_12 $$ map.put(i, value)[ FD ]
Line_17 $$ final Collection<Integer> allKeys = new HashSet(map.getAllKeysWithExistingMapping())-->Line_27 $$ assertEquals(new HashSet(testMapping.keySet()), allKeys)[ FD ]
Line_2 $$ public void testOpeningWithCompact2() throws IOException -->Line_4 $$ PersistentHashMap<Integer, String> map = new PersistentHashMap(file, new IntInlineKeyDescriptor(), EnumeratorStringDescriptor.INSTANCE)[ CD ]
Line_10 $$ String value = key + "_value"-->Line_12 $$ map.put(i, value)[ FD ]
Line_15 $$ map = new PersistentHashMap(file, new IntInlineKeyDescriptor(), EnumeratorStringDescriptor.INSTANCE)-->Line_26 $$ final Collection<Integer> allKeys = new HashSet(map.getAllKeysWithExistingMapping())[ FD ]
Line_15 $$ map = new PersistentHashMap(file, new IntInlineKeyDescriptor(), EnumeratorStringDescriptor.INSTANCE)-->Line_29 $$ final String val = map.get(key)[ FD ]
Line_7 $$ Map<Integer, String> testMapping = new LinkedHashMap(stringsCount)-->Line_27 $$ assertEquals(new HashSet(testMapping.keySet()), allKeys)[ FD ]
Line_15 $$ map = new PersistentHashMap(file, new IntInlineKeyDescriptor(), EnumeratorStringDescriptor.INSTANCE)-->Line_34 $$ clearMap(file, map)[ FD ]
Line_2 $$ public void testOpeningWithCompact2() throws IOException -->Line_3 $$ File file = FileUtil.createTempFile("persistent", "map")[ CD ]
Line_7 $$ Map<Integer, String> testMapping = new LinkedHashMap(stringsCount)-->Line_18 $$ assertEquals(new HashSet(testMapping.keySet()), allKeys)[ FD ]
Line_15 $$ map = new PersistentHashMap(file, new IntInlineKeyDescriptor(), EnumeratorStringDescriptor.INSTANCE)-->Line_20 $$ final String val = map.get(key)[ FD ]
Line_7 $$ Map<Integer, String> testMapping = new LinkedHashMap(stringsCount)-->Line_11 $$ testMapping.put(i, value)[ FD ]
Line_19 $$ for (Integer key : allKeys) -->Line_21 $$ assertEquals(testMapping.get(key), val)[ FD ]
Line_8 $$ for (int i = 0; i < stringsCount; ++i) -->Line_11 $$ testMapping.put(i, value)[ CD ]
Line_4 $$ PersistentHashMap<Integer, String> map = new PersistentHashMap(file, new IntInlineKeyDescriptor(), EnumeratorStringDescriptor.INSTANCE)-->Line_14 $$ map.close()[ FD ]
Line_15 $$ map = new PersistentHashMap(file, new IntInlineKeyDescriptor(), EnumeratorStringDescriptor.INSTANCE)-->Line_24 $$ map.compact()[ FD ]
Line_4 $$ PersistentHashMap<Integer, String> map = new PersistentHashMap(file, new IntInlineKeyDescriptor(), EnumeratorStringDescriptor.INSTANCE)-->Line_29 $$ final String val = map.get(key)[ FD ]
Line_4 $$ PersistentHashMap<Integer, String> map = new PersistentHashMap(file, new IntInlineKeyDescriptor(), EnumeratorStringDescriptor.INSTANCE)-->Line_24 $$ map.compact()[ FD ]
Line_17 $$ final Collection<Integer> allKeys = new HashSet(map.getAllKeysWithExistingMapping())-->Line_18 $$ assertEquals(new HashSet(testMapping.keySet()), allKeys)[ FD ]
Line_9 $$ final String key = createRandomString()-->Line_30 $$ assertEquals(testMapping.get(key), val)[ FD ]
Line_19 $$ for (Integer key : allKeys) -->Line_30 $$ assertEquals(testMapping.get(key), val)[ FD ]
Line_4 $$ PersistentHashMap<Integer, String> map = new PersistentHashMap(file, new IntInlineKeyDescriptor(), EnumeratorStringDescriptor.INSTANCE)-->Line_26 $$ final Collection<Integer> allKeys = new HashSet(map.getAllKeysWithExistingMapping())[ FD ]
Line_20 $$ final String val = map.get(key)-->Line_30 $$ assertEquals(testMapping.get(key), val)[ FD ]
Line_10 $$ String value = key + "_value"-->Line_11 $$ testMapping.put(i, value)[ FD ]
Line_8 $$ for (int i = 0; i < stringsCount; ++i) -->Line_9 $$ final String key = createRandomString()[ CD ]
Line_19 $$ for (Integer key : allKeys) -->Line_20 $$ final String val = map.get(key)[ FD ]
Line_9 $$ final String key = createRandomString()-->Line_21 $$ assertEquals(testMapping.get(key), val)[ FD ]
Line_3 $$ File file = FileUtil.createTempFile("persistent", "map")-->Line_34 $$ clearMap(file, map)[ FD ]
Line_4 $$ PersistentHashMap<Integer, String> map = new PersistentHashMap(file, new IntInlineKeyDescriptor(), EnumeratorStringDescriptor.INSTANCE)-->Line_12 $$ map.put(i, value)[ FD ]
Line_20 $$ final String val = map.get(key)-->Line_21 $$ assertEquals(testMapping.get(key), val)[ FD ]
Line_8 $$ for (int i = 0; i < stringsCount; ++i) -->Line_11 $$ testMapping.put(i, value)[ FD ]
Line_19 $$ for (Integer key : allKeys) -->Line_29 $$ final String val = map.get(key)[ FD ]
Line_8 $$ for (int i = 0; i < stringsCount; ++i) -->Line_10 $$ String value = key + "_value"[ CD ]
Line_9 $$ final String key = createRandomString()-->Line_29 $$ final String val = map.get(key)[ FD ]
Line_9 $$ final String key = createRandomString()-->Line_20 $$ final String val = map.get(key)[ FD ]
Line_7 $$ Map<Integer, String> testMapping = new LinkedHashMap(stringsCount)-->Line_21 $$ assertEquals(testMapping.get(key), val)[ FD ]
Line_7 $$ Map<Integer, String> testMapping = new LinkedHashMap(stringsCount)-->Line_30 $$ assertEquals(testMapping.get(key), val)[ FD ]
Line_4 $$ PersistentHashMap<Integer, String> map = new PersistentHashMap(file, new IntInlineKeyDescriptor(), EnumeratorStringDescriptor.INSTANCE)-->Line_17 $$ final Collection<Integer> allKeys = new HashSet(map.getAllKeysWithExistingMapping())[ FD ]
Line_4 $$ PersistentHashMap<Integer, String> map = new PersistentHashMap(file, new IntInlineKeyDescriptor(), EnumeratorStringDescriptor.INSTANCE)-->Line_20 $$ final String val = map.get(key)[ FD ]
Line_4 $$ PersistentHashMap<Integer, String> map = new PersistentHashMap(file, new IntInlineKeyDescriptor(), EnumeratorStringDescriptor.INSTANCE)-->Line_34 $$ clearMap(file, map)[ FD ]
Line_6 $$ final int stringsCount = 5-->Line_8 $$ for (int i = 0; i < stringsCount; ++i) [ FD ]
Line_8 $$ for (int i = 0; i < stringsCount; ++i) -->Line_12 $$ map.put(i, value)[ CD ]
