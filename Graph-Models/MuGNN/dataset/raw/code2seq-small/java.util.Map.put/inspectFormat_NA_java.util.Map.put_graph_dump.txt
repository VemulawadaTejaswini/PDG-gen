Line_8 $$ for (int i = 0; i < chunks.size(); ++i) -->Line_20 $$ inspectWidth(formatExpression, chunk.getPrecision())[ CD ]
Line_11 $$ if (mapping) -->Line_17 $$ myUsedMappingKeys.put(mappingKey, false)[ CD ]
Line_8 $$ for (int i = 0; i < chunks.size(); ++i) -->Line_10 $$ String mappingKey = Integer.toString(i + 1)[ CD ]
Line_9 $$ PyStringFormatParser.SubstitutionChunk chunk = chunks.get(i)-->Line_19 $$ inspectWidth(formatExpression, chunk.getWidth())[ FD ]
Line_8 $$ for (int i = 0; i < chunks.size(); ++i) -->Line_19 $$ inspectWidth(formatExpression, chunk.getWidth())[ CD ]
Line_24 $$ if (languageLevel.isOlderThan(LanguageLevel.PYTHON35) || !isBytesLiteral(formatExpression, myTypeEvalContext)) -->Line_26 $$ return[ CD ]
Line_8 $$ for (int i = 0; i < chunks.size(); ++i) -->Line_11 $$ if (mapping) [ CD ]
Line_2 $$ private void inspectFormat(@NotNull final PyStringLiteralExpression formatExpression) -->Line_13 $$ registerProblem(formatExpression, PyBundle.message("INSP.too.few.keys"))[ FD ]
Line_8 $$ for (int i = 0; i < chunks.size(); ++i) -->Line_9 $$ PyStringFormatParser.SubstitutionChunk chunk = chunks.get(i)[ CD ]
Line_9 $$ PyStringFormatParser.SubstitutionChunk chunk = chunks.get(i)-->Line_21 $$ final char conversionType = chunk.getConversionType()[ FD ]
Line_29 $$ if (FORMAT_CONVERSIONS.containsKey(conversionType)) -->Line_30 $$ myFormatSpec.put(mappingKey, FORMAT_CONVERSIONS.get(conversionType))[ CD ]
Line_8 $$ for (int i = 0; i < chunks.size(); ++i) -->Line_33 $$ registerProblem(formatExpression, PyBundle.message("INSP.no.format.specifier.char"), new PyAddSpecifierToFormatQuickFix())[ CD ]
Line_2 $$ private void inspectFormat(@NotNull final PyStringLiteralExpression formatExpression) -->Line_33 $$ registerProblem(formatExpression, PyBundle.message("INSP.no.format.specifier.char"), new PyAddSpecifierToFormatQuickFix())[ FD ]
Line_16 $$ mappingKey = chunk.getMappingKey()-->Line_17 $$ myUsedMappingKeys.put(mappingKey, false)[ FD ]
Line_10 $$ String mappingKey = Integer.toString(i + 1)-->Line_30 $$ myFormatSpec.put(mappingKey, FORMAT_CONVERSIONS.get(conversionType))[ FD ]
Line_2 $$ private void inspectFormat(@NotNull final PyStringLiteralExpression formatExpression) -->Line_3 $$ final String value = formatExpression.getStringValue()[ FD ]
Line_10 $$ String mappingKey = Integer.toString(i + 1)-->Line_16 $$ mappingKey = chunk.getMappingKey()[ FD ]
Line_4 $$ final List<PyStringFormatParser.SubstitutionChunk> chunks = filterSubstitutions(parsePercentFormat(value))-->Line_8 $$ for (int i = 0; i < chunks.size(); ++i) [ FD ]
Line_24 $$ if (languageLevel.isOlderThan(LanguageLevel.PYTHON35) || !isBytesLiteral(formatExpression, myTypeEvalContext)) -->Line_25 $$ registerProblem(formatExpression, "Unsupported format character 'b'")[ CD ]
Line_2 $$ private void inspectFormat(@NotNull final PyStringLiteralExpression formatExpression) -->Line_5 $$ myExpectedArguments = chunks.size()[ CD ]
Line_2 $$ private void inspectFormat(@NotNull final PyStringLiteralExpression formatExpression) -->Line_23 $$ final LanguageLevel languageLevel = LanguageLevel.forElement(formatExpression)[ FD ]
Line_12 $$ if (chunk.getMappingKey() == null || chunk.isUnclosedMapping()) -->Line_13 $$ registerProblem(formatExpression, PyBundle.message("INSP.too.few.keys"))[ CD ]
Line_21 $$ final char conversionType = chunk.getConversionType()-->Line_29 $$ if (FORMAT_CONVERSIONS.containsKey(conversionType)) [ FD ]
Line_22 $$ if (conversionType == 'b') -->Line_23 $$ final LanguageLevel languageLevel = LanguageLevel.forElement(formatExpression)[ CD ]
Line_2 $$ private void inspectFormat(@NotNull final PyStringLiteralExpression formatExpression) -->Line_25 $$ registerProblem(formatExpression, "Unsupported format character 'b'")[ FD ]
Line_21 $$ final char conversionType = chunk.getConversionType()-->Line_30 $$ myFormatSpec.put(mappingKey, FORMAT_CONVERSIONS.get(conversionType))[ FD ]
Line_10 $$ String mappingKey = Integer.toString(i + 1)-->Line_17 $$ myUsedMappingKeys.put(mappingKey, false)[ FD ]
Line_21 $$ final char conversionType = chunk.getConversionType()-->Line_22 $$ if (conversionType == 'b') [ FD ]
Line_22 $$ if (conversionType == 'b') -->Line_24 $$ if (languageLevel.isOlderThan(LanguageLevel.PYTHON35) || !isBytesLiteral(formatExpression, myTypeEvalContext)) [ CD ]
Line_8 $$ for (int i = 0; i < chunks.size(); ++i) -->Line_22 $$ if (conversionType == 'b') [ CD ]
Line_8 $$ for (int i = 0; i < chunks.size(); ++i) -->Line_34 $$ return[ CD ]
Line_2 $$ private void inspectFormat(@NotNull final PyStringLiteralExpression formatExpression) -->Line_24 $$ if (languageLevel.isOlderThan(LanguageLevel.PYTHON35) || !isBytesLiteral(formatExpression, myTypeEvalContext)) [ FD ]
Line_2 $$ private void inspectFormat(@NotNull final PyStringLiteralExpression formatExpression) -->Line_6 $$ myUsedMappingKeys.clear()[ CD ]
Line_9 $$ PyStringFormatParser.SubstitutionChunk chunk = chunks.get(i)-->Line_12 $$ if (chunk.getMappingKey() == null || chunk.isUnclosedMapping()) [ FD ]
Line_23 $$ final LanguageLevel languageLevel = LanguageLevel.forElement(formatExpression)-->Line_24 $$ if (languageLevel.isOlderThan(LanguageLevel.PYTHON35) || !isBytesLiteral(formatExpression, myTypeEvalContext)) [ FD ]
Line_11 $$ if (mapping) -->Line_12 $$ if (chunk.getMappingKey() == null || chunk.isUnclosedMapping()) [ CD ]
Line_2 $$ private void inspectFormat(@NotNull final PyStringLiteralExpression formatExpression) -->Line_7 $$ final boolean mapping = chunks.size() > 0 && chunks.get(0).getMappingKey() != null[ CD ]
Line_4 $$ final List<PyStringFormatParser.SubstitutionChunk> chunks = filterSubstitutions(parsePercentFormat(value))-->Line_5 $$ myExpectedArguments = chunks.size()[ FD ]
Line_2 $$ private void inspectFormat(@NotNull final PyStringLiteralExpression formatExpression) -->Line_3 $$ final String value = formatExpression.getStringValue()[ CD ]
Line_3 $$ final String value = formatExpression.getStringValue()-->Line_4 $$ final List<PyStringFormatParser.SubstitutionChunk> chunks = filterSubstitutions(parsePercentFormat(value))[ FD ]
Line_4 $$ final List<PyStringFormatParser.SubstitutionChunk> chunks = filterSubstitutions(parsePercentFormat(value))-->Line_7 $$ final boolean mapping = chunks.size() > 0 && chunks.get(0).getMappingKey() != null[ FD ]
Line_2 $$ private void inspectFormat(@NotNull final PyStringLiteralExpression formatExpression) -->Line_20 $$ inspectWidth(formatExpression, chunk.getPrecision())[ FD ]
Line_2 $$ private void inspectFormat(@NotNull final PyStringLiteralExpression formatExpression) -->Line_19 $$ inspectWidth(formatExpression, chunk.getWidth())[ FD ]
Line_8 $$ for (int i = 0; i < chunks.size(); ++i) -->Line_29 $$ if (FORMAT_CONVERSIONS.containsKey(conversionType)) [ CD ]
Line_16 $$ mappingKey = chunk.getMappingKey()-->Line_30 $$ myFormatSpec.put(mappingKey, FORMAT_CONVERSIONS.get(conversionType))[ FD ]
Line_4 $$ final List<PyStringFormatParser.SubstitutionChunk> chunks = filterSubstitutions(parsePercentFormat(value))-->Line_9 $$ PyStringFormatParser.SubstitutionChunk chunk = chunks.get(i)[ FD ]
Line_9 $$ PyStringFormatParser.SubstitutionChunk chunk = chunks.get(i)-->Line_16 $$ mappingKey = chunk.getMappingKey()[ FD ]
Line_2 $$ private void inspectFormat(@NotNull final PyStringLiteralExpression formatExpression) -->Line_4 $$ final List<PyStringFormatParser.SubstitutionChunk> chunks = filterSubstitutions(parsePercentFormat(value))[ CD ]
Line_9 $$ PyStringFormatParser.SubstitutionChunk chunk = chunks.get(i)-->Line_20 $$ inspectWidth(formatExpression, chunk.getPrecision())[ FD ]
Line_8 $$ for (int i = 0; i < chunks.size(); ++i) -->Line_9 $$ PyStringFormatParser.SubstitutionChunk chunk = chunks.get(i)[ FD ]
Line_11 $$ if (mapping) -->Line_16 $$ mappingKey = chunk.getMappingKey()[ CD ]
Line_8 $$ for (int i = 0; i < chunks.size(); ++i) -->Line_21 $$ final char conversionType = chunk.getConversionType()[ CD ]
Line_2 $$ private void inspectFormat(@NotNull final PyStringLiteralExpression formatExpression) -->Line_8 $$ for (int i = 0; i < chunks.size(); ++i) [ CD ]
