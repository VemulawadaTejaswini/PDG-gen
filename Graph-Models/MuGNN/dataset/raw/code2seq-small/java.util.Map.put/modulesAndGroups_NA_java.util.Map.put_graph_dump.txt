Line_4 $$ List<Module> nonGroupedModules = new ArrayList<Module>(Arrays.asList(modules))-->Line_15 $$ nonGroupedModules.remove(module)[ FD ]
Line_10 $$ if (moduleList == null) -->Line_11 $$ moduleList = new ArrayList<Module>()[ CD ]
Line_2 $$ protected Collection<AbstractTreeNode> modulesAndGroups(Module[] modules) -->Line_18 $$ List<AbstractTreeNode> result = new ArrayList<AbstractTreeNode>()[ CD ]
Line_11 $$ moduleList = new ArrayList<Module>()-->Line_12 $$ groups.put(topLevelGroupName, moduleList)[ FD ]
Line_2 $$ protected Collection<AbstractTreeNode> modulesAndGroups(Module[] modules) -->Line_3 $$ Map<String, List<Module>> groups = new THashMap<String, List<Module>>()[ CD ]
Line_3 $$ Map<String, List<Module>> groups = new THashMap<String, List<Module>>()-->Line_9 $$ List<Module> moduleList = groups.get(topLevelGroupName)[ FD ]
Line_3 $$ Map<String, List<Module>> groups = new THashMap<String, List<Module>>()-->Line_20 $$ for (String groupPath : groups.keySet()) [ FD ]
Line_9 $$ List<Module> moduleList = groups.get(topLevelGroupName)-->Line_12 $$ groups.put(topLevelGroupName, moduleList)[ FD ]
Line_7 $$ if (path != null) -->Line_8 $$ final String topLevelGroupName = path[0][ CD ]
Line_9 $$ List<Module> moduleList = groups.get(topLevelGroupName)-->Line_10 $$ if (moduleList == null) [ FD ]
Line_7 $$ if (path != null) -->Line_10 $$ if (moduleList == null) [ CD ]
Line_7 $$ if (path != null) -->Line_15 $$ nonGroupedModules.remove(module)[ CD ]
Line_5 $$ for (final Module module : modules) -->Line_15 $$ nonGroupedModules.remove(module)[ FD ]
Line_8 $$ final String topLevelGroupName = path[0]-->Line_12 $$ groups.put(topLevelGroupName, moduleList)[ FD ]
Line_2 $$ protected Collection<AbstractTreeNode> modulesAndGroups(Module[] modules) -->Line_4 $$ List<Module> nonGroupedModules = new ArrayList<Module>(Arrays.asList(modules))[ CD ]
Line_11 $$ moduleList = new ArrayList<Module>()-->Line_14 $$ moduleList.add(module)[ FD ]
Line_7 $$ if (path != null) -->Line_14 $$ moduleList.add(module)[ CD ]
Line_18 $$ List<AbstractTreeNode> result = new ArrayList<AbstractTreeNode>()-->Line_21 $$ result.add(createModuleGroupNode(new ModuleGroup(new String[] [ FD ]
Line_7 $$ if (path != null) -->Line_9 $$ List<Module> moduleList = groups.get(topLevelGroupName)[ CD ]
Line_18 $$ List<AbstractTreeNode> result = new ArrayList<AbstractTreeNode>()-->Line_24 $$ result.add(createModuleGroup(module))[ FD ]
Line_10 $$ if (moduleList == null) -->Line_12 $$ groups.put(topLevelGroupName, moduleList)[ CD ]
Line_2 $$ protected Collection<AbstractTreeNode> modulesAndGroups(Module[] modules) -->Line_30 $$ return result[ CD ]
Line_2 $$ protected Collection<AbstractTreeNode> modulesAndGroups(Module[] modules) -->Line_4 $$ List<Module> nonGroupedModules = new ArrayList<Module>(Arrays.asList(modules))[ FD ]
Line_8 $$ final String topLevelGroupName = path[0]-->Line_9 $$ List<Module> moduleList = groups.get(topLevelGroupName)[ FD ]
Line_5 $$ for (final Module module : modules) -->Line_14 $$ moduleList.add(module)[ FD ]
Line_5 $$ for (final Module module : modules) -->Line_6 $$ final String[] path = ModuleManager.getInstance(getProject()).getModuleGroupPath(module)[ FD ]
Line_9 $$ List<Module> moduleList = groups.get(topLevelGroupName)-->Line_11 $$ moduleList = new ArrayList<Module>()[ FD ]
Line_5 $$ for (final Module module : modules) -->Line_24 $$ result.add(createModuleGroup(module))[ FD ]
Line_9 $$ List<Module> moduleList = groups.get(topLevelGroupName)-->Line_14 $$ moduleList.add(module)[ FD ]
Line_6 $$ final String[] path = ModuleManager.getInstance(getProject()).getModuleGroupPath(module)-->Line_7 $$ if (path != null) [ FD ]
Line_3 $$ Map<String, List<Module>> groups = new THashMap<String, List<Module>>()-->Line_12 $$ groups.put(topLevelGroupName, moduleList)[ FD ]
