Line_4 $$ Map<String, Object> properties = new HashMap()-->Line_10 $$ _editorOptionsContributorServiceRegistration1 = registry.registerService(EditorOptionsContributor.class, textEditorOptionsContributor, properties)[ FD ]
Line_2 $$ public void testEditorConfigNotTransformedWhenNoEditorConfigTransformerIsRegistered() throws Exception -->Line_7 $$ EditorConfigContributor basicHTMLEditorConfigContributor = new BasicHTMLEditorConfigContributor()[ CD ]
Line_2 $$ public void testEditorConfigNotTransformedWhenNoEditorConfigTransformerIsRegistered() throws Exception -->Line_5 $$ properties.put("editor.name", _EDITOR_NAME)[ CD ]
Line_7 $$ EditorConfigContributor basicHTMLEditorConfigContributor = new BasicHTMLEditorConfigContributor()-->Line_8 $$ _editorConfigContributorServiceRegistration = registry.registerService(EditorConfigContributor.class, basicHTMLEditorConfigContributor, properties)[ FD ]
Line_2 $$ public void testEditorConfigNotTransformedWhenNoEditorConfigTransformerIsRegistered() throws Exception -->Line_12 $$ JSONObject configJSONObject = editorConfiguration.getConfigJSONObject()[ CD ]
Line_2 $$ public void testEditorConfigNotTransformedWhenNoEditorConfigTransformerIsRegistered() throws Exception -->Line_10 $$ _editorOptionsContributorServiceRegistration1 = registry.registerService(EditorOptionsContributor.class, textEditorOptionsContributor, properties)[ CD ]
Line_2 $$ public void testEditorConfigNotTransformedWhenNoEditorConfigTransformerIsRegistered() throws Exception -->Line_3 $$ Registry registry = RegistryUtil.getRegistry()[ CD ]
Line_2 $$ public void testEditorConfigNotTransformedWhenNoEditorConfigTransformerIsRegistered() throws Exception -->Line_11 $$ EditorConfiguration editorConfiguration = EditorConfigurationFactoryUtil.getEditorConfiguration(_PORTLET_NAME, _CONFIG_KEY, _EDITOR_NAME, new HashMap<String, Object>(), null, null)[ CD ]
Line_4 $$ Map<String, Object> properties = new HashMap()-->Line_5 $$ properties.put("editor.name", _EDITOR_NAME)[ FD ]
Line_12 $$ JSONObject configJSONObject = editorConfiguration.getConfigJSONObject()-->Line_13 $$ Assert.assertEquals("basic", configJSONObject.getString("version"))[ FD ]
Line_11 $$ EditorConfiguration editorConfiguration = EditorConfigurationFactoryUtil.getEditorConfiguration(_PORTLET_NAME, _CONFIG_KEY, _EDITOR_NAME, new HashMap<String, Object>(), null, null)-->Line_12 $$ JSONObject configJSONObject = editorConfiguration.getConfigJSONObject()[ FD ]
Line_3 $$ Registry registry = RegistryUtil.getRegistry()-->Line_10 $$ _editorOptionsContributorServiceRegistration1 = registry.registerService(EditorOptionsContributor.class, textEditorOptionsContributor, properties)[ FD ]
Line_3 $$ Registry registry = RegistryUtil.getRegistry()-->Line_8 $$ _editorConfigContributorServiceRegistration = registry.registerService(EditorConfigContributor.class, basicHTMLEditorConfigContributor, properties)[ FD ]
Line_9 $$ EditorOptionsContributor textEditorOptionsContributor = new TextEditorOptionsContributor()-->Line_10 $$ _editorOptionsContributorServiceRegistration1 = registry.registerService(EditorOptionsContributor.class, textEditorOptionsContributor, properties)[ FD ]
Line_2 $$ public void testEditorConfigNotTransformedWhenNoEditorConfigTransformerIsRegistered() throws Exception -->Line_13 $$ Assert.assertEquals("basic", configJSONObject.getString("version"))[ CD ]
Line_12 $$ JSONObject configJSONObject = editorConfiguration.getConfigJSONObject()-->Line_15 $$ Assert.assertEquals("HTMLToolbar", configJSONObject.getString("toolbar"))[ FD ]
Line_2 $$ public void testEditorConfigNotTransformedWhenNoEditorConfigTransformerIsRegistered() throws Exception -->Line_8 $$ _editorConfigContributorServiceRegistration = registry.registerService(EditorConfigContributor.class, basicHTMLEditorConfigContributor, properties)[ CD ]
Line_12 $$ JSONObject configJSONObject = editorConfiguration.getConfigJSONObject()-->Line_14 $$ Assert.assertEquals("html", configJSONObject.getString("textMode"))[ FD ]
Line_2 $$ public void testEditorConfigNotTransformedWhenNoEditorConfigTransformerIsRegistered() throws Exception -->Line_15 $$ Assert.assertEquals("HTMLToolbar", configJSONObject.getString("toolbar"))[ CD ]
Line_2 $$ public void testEditorConfigNotTransformedWhenNoEditorConfigTransformerIsRegistered() throws Exception -->Line_6 $$ properties.put("service.ranking", 1000)[ CD ]
Line_2 $$ public void testEditorConfigNotTransformedWhenNoEditorConfigTransformerIsRegistered() throws Exception -->Line_4 $$ Map<String, Object> properties = new HashMap()[ CD ]
Line_2 $$ public void testEditorConfigNotTransformedWhenNoEditorConfigTransformerIsRegistered() throws Exception -->Line_14 $$ Assert.assertEquals("html", configJSONObject.getString("textMode"))[ CD ]
Line_4 $$ Map<String, Object> properties = new HashMap()-->Line_6 $$ properties.put("service.ranking", 1000)[ FD ]
Line_2 $$ public void testEditorConfigNotTransformedWhenNoEditorConfigTransformerIsRegistered() throws Exception -->Line_9 $$ EditorOptionsContributor textEditorOptionsContributor = new TextEditorOptionsContributor()[ CD ]
Line_4 $$ Map<String, Object> properties = new HashMap()-->Line_8 $$ _editorConfigContributorServiceRegistration = registry.registerService(EditorConfigContributor.class, basicHTMLEditorConfigContributor, properties)[ FD ]
