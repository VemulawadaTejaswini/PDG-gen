Line_2 $$ public void renderSimpleMap() throws Exception -->Line_9 $$ assertEquals(MappingJackson2JsonView.DEFAULT_CONTENT_TYPE, response.getContentType())[ CD ]
Line_10 $$ String jsonResult = response.getContentAsString()-->Line_12 $$ assertEquals(jsonResult.length(), response.getContentLength())[ FD ]
Line_2 $$ public void renderSimpleMap() throws Exception -->Line_8 $$ assertEquals("no-store", response.getHeader("Cache-Control"))[ CD ]
Line_2 $$ public void renderSimpleMap() throws Exception -->Line_3 $$ Map<String, Object> model = new HashMap<String, Object>()[ CD ]
Line_3 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_7 $$ view.render(model, request, response)[ FD ]
Line_2 $$ public void renderSimpleMap() throws Exception -->Line_11 $$ assertTrue(jsonResult.length() > 0)[ CD ]
Line_2 $$ public void renderSimpleMap() throws Exception -->Line_10 $$ String jsonResult = response.getContentAsString()[ CD ]
Line_2 $$ public void renderSimpleMap() throws Exception -->Line_13 $$ validateResult()[ CD ]
Line_3 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_5 $$ model.put("foo", "bar")[ FD ]
Line_2 $$ public void renderSimpleMap() throws Exception -->Line_12 $$ assertEquals(jsonResult.length(), response.getContentLength())[ CD ]
Line_2 $$ public void renderSimpleMap() throws Exception -->Line_5 $$ model.put("foo", "bar")[ CD ]
Line_3 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_4 $$ model.put("bindingResult", mock(BindingResult.class, "binding_result"))[ FD ]
Line_10 $$ String jsonResult = response.getContentAsString()-->Line_11 $$ assertTrue(jsonResult.length() > 0)[ FD ]
Line_2 $$ public void renderSimpleMap() throws Exception -->Line_4 $$ model.put("bindingResult", mock(BindingResult.class, "binding_result"))[ CD ]
Line_2 $$ public void renderSimpleMap() throws Exception -->Line_6 $$ view.setUpdateContentLength(true)[ CD ]
Line_2 $$ public void renderSimpleMap() throws Exception -->Line_7 $$ view.render(model, request, response)[ CD ]
