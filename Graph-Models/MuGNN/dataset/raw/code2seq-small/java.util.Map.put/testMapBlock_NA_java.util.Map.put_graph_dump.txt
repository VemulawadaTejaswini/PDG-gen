Line_2 $$ public void testMapBlock() -->Line_16 $$ assertBlockEquals(actual, expected)[ CD ]
Line_10 $$ BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(VARCHAR, rowType), new BlockBuilderStatus(), 1024)-->Line_15 $$ Block expected = rowBlockOf(ImmutableList.of(new MapType(VARCHAR, rowType)), blockBuilder)[ FD ]
Line_10 $$ BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(VARCHAR, rowType), new BlockBuilderStatus(), 1024)-->Line_12 $$ rowType.writeObject(blockBuilder, rowBlockOf(ImmutableList.of(BIGINT, BIGINT), 16, 17L))[ FD ]
Line_2 $$ public void testMapBlock() -->Line_7 $$ com.facebook.presto.spi.type.Type rowType = new RowType(ImmutableList.of(BIGINT, BIGINT), Optional.empty())[ CD ]
Line_2 $$ public void testMapBlock() -->Line_10 $$ BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(VARCHAR, rowType), new BlockBuilderStatus(), 1024)[ CD ]
Line_2 $$ public void testMapBlock() -->Line_13 $$ VARCHAR.writeString(blockBuilder, "twelve")[ CD ]
Line_2 $$ public void testMapBlock() -->Line_5 $$ holder.map.put("twelve", new InnerStruct(13, 14L))[ CD ]
Line_2 $$ public void testMapBlock() -->Line_8 $$ com.facebook.presto.spi.type.Type mapOfVarcharRowType = new RowType(ImmutableList.of(new MapType(VARCHAR, rowType)), Optional.empty())[ CD ]
Line_10 $$ BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(VARCHAR, rowType), new BlockBuilderStatus(), 1024)-->Line_14 $$ rowType.writeObject(blockBuilder, rowBlockOf(ImmutableList.of(BIGINT, BIGINT), 13, 14L))[ FD ]
Line_2 $$ public void testMapBlock() -->Line_14 $$ rowType.writeObject(blockBuilder, rowBlockOf(ImmutableList.of(BIGINT, BIGINT), 13, 14L))[ CD ]
Line_10 $$ BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(VARCHAR, rowType), new BlockBuilderStatus(), 1024)-->Line_13 $$ VARCHAR.writeString(blockBuilder, "twelve")[ FD ]
Line_2 $$ public void testMapBlock() -->Line_6 $$ holder.map.put("fifteen", new InnerStruct(16, 17L))[ CD ]
Line_2 $$ public void testMapBlock() -->Line_4 $$ holder.map = new TreeMap()[ CD ]
Line_2 $$ public void testMapBlock() -->Line_11 $$ VARCHAR.writeString(blockBuilder, "fifteen")[ CD ]
Line_2 $$ public void testMapBlock() -->Line_9 $$ Block actual = toBinaryBlock(mapOfVarcharRowType, holder, getInspector(MapHolder.class))[ CD ]
Line_15 $$ Block expected = rowBlockOf(ImmutableList.of(new MapType(VARCHAR, rowType)), blockBuilder)-->Line_16 $$ assertBlockEquals(actual, expected)[ FD ]
Line_3 $$ MapHolder holder = new MapHolder()-->Line_9 $$ Block actual = toBinaryBlock(mapOfVarcharRowType, holder, getInspector(MapHolder.class))[ FD ]
Line_2 $$ public void testMapBlock() -->Line_3 $$ MapHolder holder = new MapHolder()[ CD ]
Line_8 $$ com.facebook.presto.spi.type.Type mapOfVarcharRowType = new RowType(ImmutableList.of(new MapType(VARCHAR, rowType)), Optional.empty())-->Line_9 $$ Block actual = toBinaryBlock(mapOfVarcharRowType, holder, getInspector(MapHolder.class))[ FD ]
Line_2 $$ public void testMapBlock() -->Line_12 $$ rowType.writeObject(blockBuilder, rowBlockOf(ImmutableList.of(BIGINT, BIGINT), 16, 17L))[ CD ]
Line_7 $$ com.facebook.presto.spi.type.Type rowType = new RowType(ImmutableList.of(BIGINT, BIGINT), Optional.empty())-->Line_12 $$ rowType.writeObject(blockBuilder, rowBlockOf(ImmutableList.of(BIGINT, BIGINT), 16, 17L))[ FD ]
Line_9 $$ Block actual = toBinaryBlock(mapOfVarcharRowType, holder, getInspector(MapHolder.class))-->Line_16 $$ assertBlockEquals(actual, expected)[ FD ]
Line_10 $$ BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(VARCHAR, rowType), new BlockBuilderStatus(), 1024)-->Line_11 $$ VARCHAR.writeString(blockBuilder, "fifteen")[ FD ]
Line_7 $$ com.facebook.presto.spi.type.Type rowType = new RowType(ImmutableList.of(BIGINT, BIGINT), Optional.empty())-->Line_14 $$ rowType.writeObject(blockBuilder, rowBlockOf(ImmutableList.of(BIGINT, BIGINT), 13, 14L))[ FD ]
Line_2 $$ public void testMapBlock() -->Line_15 $$ Block expected = rowBlockOf(ImmutableList.of(new MapType(VARCHAR, rowType)), blockBuilder)[ CD ]
Line_7 $$ com.facebook.presto.spi.type.Type rowType = new RowType(ImmutableList.of(BIGINT, BIGINT), Optional.empty())-->Line_10 $$ BlockBuilder blockBuilder = new InterleavedBlockBuilder(ImmutableList.of(VARCHAR, rowType), new BlockBuilderStatus(), 1024)[ FD ]
