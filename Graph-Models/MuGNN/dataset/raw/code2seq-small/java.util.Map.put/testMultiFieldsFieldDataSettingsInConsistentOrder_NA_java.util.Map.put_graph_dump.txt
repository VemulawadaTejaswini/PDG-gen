Line_12 $$ XContentBuilder builder = jsonBuilder().startObject().startObject("type").startObject("properties").startObject("my_field").field("type", "string").startObject("fields").startObject(MY_MULTI_FIELD).field("type", "string").startObject("fielddata")-->Line_15 $$ builder.field(keys[i], possibleSettings.get(keys[i]))[ FD ]
Line_12 $$ XContentBuilder builder = jsonBuilder().startObject().startObject("type").startObject("properties").startObject("my_field").field("type", "string").startObject("fields").startObject(MY_MULTI_FIELD).field("type", "string").startObject("fielddata")-->Line_18 $$ DocumentMapper docMapper = parser.parse("type", new CompressedXContent(builder.string()))[ FD ]
Line_4 $$ Map<String, Object> possibleSettings = new TreeMap<String, Object>()-->Line_15 $$ builder.field(keys[i], possibleSettings.get(keys[i]))[ FD ]
Line_3 $$ final String MY_MULTI_FIELD = "multi_field"-->Line_12 $$ XContentBuilder builder = jsonBuilder().startObject().startObject("type").startObject("properties").startObject("my_field").field("type", "string").startObject("fields").startObject(MY_MULTI_FIELD).field("type", "string").startObject("fielddata")[ FD ]
Line_2 $$ public void testMultiFieldsFieldDataSettingsInConsistentOrder() throws Exception -->Line_14 $$ Collections.shuffle(Arrays.asList(keys), random())[ CD ]
Line_17 $$ final DocumentMapperParser parser = createIndex("test").mapperService().documentMapperParser()-->Line_18 $$ DocumentMapper docMapper = parser.parse("type", new CompressedXContent(builder.string()))[ FD ]
Line_2 $$ public void testMultiFieldsFieldDataSettingsInConsistentOrder() throws Exception -->Line_3 $$ final String MY_MULTI_FIELD = "multi_field"[ CD ]
Line_2 $$ public void testMultiFieldsFieldDataSettingsInConsistentOrder() throws Exception -->Line_20 $$ assertThat(docMapper.mappingSource(), equalTo(docMapper2.mappingSource()))[ CD ]
Line_18 $$ DocumentMapper docMapper = parser.parse("type", new CompressedXContent(builder.string()))-->Line_19 $$ DocumentMapper docMapper2 = parser.parse("type", docMapper.mappingSource())[ FD ]
Line_2 $$ public void testMultiFieldsFieldDataSettingsInConsistentOrder() throws Exception -->Line_5 $$ possibleSettings.put("filter.frequency.min", 1)[ CD ]
Line_2 $$ public void testMultiFieldsFieldDataSettingsInConsistentOrder() throws Exception -->Line_15 $$ for (int i = randomIntBetween(0, possibleSettings.size() - 1); i >= 0; --i) builder.field(keys[i], possibleSettings.get(keys[i]))[ CD ]
Line_2 $$ public void testMultiFieldsFieldDataSettingsInConsistentOrder() throws Exception -->Line_6 $$ possibleSettings.put("filter.frequency.max", 2)[ CD ]
Line_4 $$ Map<String, Object> possibleSettings = new TreeMap<String, Object>()-->Line_15 $$ for (int i = randomIntBetween(0, possibleSettings.size() - 1); i >= 0; --i) builder.field(keys[i], possibleSettings.get(keys[i]))[ FD ]
Line_4 $$ Map<String, Object> possibleSettings = new TreeMap<String, Object>()-->Line_11 $$ possibleSettings.put("aSetting", "aValue")[ FD ]
Line_4 $$ Map<String, Object> possibleSettings = new TreeMap<String, Object>()-->Line_10 $$ possibleSettings.put("zetting", "zValue")[ FD ]
Line_4 $$ Map<String, Object> possibleSettings = new TreeMap<String, Object>()-->Line_8 $$ possibleSettings.put("loading", "eager")[ FD ]
Line_12 $$ XContentBuilder builder = jsonBuilder().startObject().startObject("type").startObject("properties").startObject("my_field").field("type", "string").startObject("fields").startObject(MY_MULTI_FIELD).field("type", "string").startObject("fielddata")-->Line_16 $$ builder.endObject().endObject().endObject().endObject().endObject().endObject().endObject()[ FD ]
Line_4 $$ Map<String, Object> possibleSettings = new TreeMap<String, Object>()-->Line_9 $$ possibleSettings.put("foo", "bar")[ FD ]
Line_2 $$ public void testMultiFieldsFieldDataSettingsInConsistentOrder() throws Exception -->Line_4 $$ Map<String, Object> possibleSettings = new TreeMap<String, Object>()[ CD ]
Line_2 $$ public void testMultiFieldsFieldDataSettingsInConsistentOrder() throws Exception -->Line_13 $$ String[] keys = possibleSettings.keySet().toArray(new String[] [ CD ]
Line_17 $$ final DocumentMapperParser parser = createIndex("test").mapperService().documentMapperParser()-->Line_19 $$ DocumentMapper docMapper2 = parser.parse("type", docMapper.mappingSource())[ FD ]
Line_2 $$ public void testMultiFieldsFieldDataSettingsInConsistentOrder() throws Exception -->Line_7 $$ possibleSettings.put("filter.regex.pattern", ".*")[ CD ]
Line_2 $$ public void testMultiFieldsFieldDataSettingsInConsistentOrder() throws Exception -->Line_12 $$ XContentBuilder builder = jsonBuilder().startObject().startObject("type").startObject("properties").startObject("my_field").field("type", "string").startObject("fields").startObject(MY_MULTI_FIELD).field("type", "string").startObject("fielddata")[ CD ]
Line_2 $$ public void testMultiFieldsFieldDataSettingsInConsistentOrder() throws Exception -->Line_18 $$ DocumentMapper docMapper = parser.parse("type", new CompressedXContent(builder.string()))[ CD ]
Line_2 $$ public void testMultiFieldsFieldDataSettingsInConsistentOrder() throws Exception -->Line_10 $$ possibleSettings.put("zetting", "zValue")[ CD ]
Line_4 $$ Map<String, Object> possibleSettings = new TreeMap<String, Object>()-->Line_7 $$ possibleSettings.put("filter.regex.pattern", ".*")[ FD ]
Line_2 $$ public void testMultiFieldsFieldDataSettingsInConsistentOrder() throws Exception -->Line_9 $$ possibleSettings.put("foo", "bar")[ CD ]
Line_2 $$ public void testMultiFieldsFieldDataSettingsInConsistentOrder() throws Exception -->Line_17 $$ final DocumentMapperParser parser = createIndex("test").mapperService().documentMapperParser()[ CD ]
Line_4 $$ Map<String, Object> possibleSettings = new TreeMap<String, Object>()-->Line_13 $$ String[] keys = possibleSettings.keySet().toArray(new String[] [ FD ]
Line_2 $$ public void testMultiFieldsFieldDataSettingsInConsistentOrder() throws Exception -->Line_16 $$ builder.endObject().endObject().endObject().endObject().endObject().endObject().endObject()[ CD ]
Line_13 $$ String[] keys = possibleSettings.keySet().toArray(new String[] -->Line_14 $$ Collections.shuffle(Arrays.asList(keys), random())[ FD ]
Line_2 $$ public void testMultiFieldsFieldDataSettingsInConsistentOrder() throws Exception -->Line_8 $$ possibleSettings.put("loading", "eager")[ CD ]
Line_4 $$ Map<String, Object> possibleSettings = new TreeMap<String, Object>()-->Line_6 $$ possibleSettings.put("filter.frequency.max", 2)[ FD ]
Line_19 $$ DocumentMapper docMapper2 = parser.parse("type", docMapper.mappingSource())-->Line_20 $$ assertThat(docMapper.mappingSource(), equalTo(docMapper2.mappingSource()))[ FD ]
Line_18 $$ DocumentMapper docMapper = parser.parse("type", new CompressedXContent(builder.string()))-->Line_20 $$ assertThat(docMapper.mappingSource(), equalTo(docMapper2.mappingSource()))[ FD ]
Line_2 $$ public void testMultiFieldsFieldDataSettingsInConsistentOrder() throws Exception -->Line_11 $$ possibleSettings.put("aSetting", "aValue")[ CD ]
Line_2 $$ public void testMultiFieldsFieldDataSettingsInConsistentOrder() throws Exception -->Line_19 $$ DocumentMapper docMapper2 = parser.parse("type", docMapper.mappingSource())[ CD ]
Line_4 $$ Map<String, Object> possibleSettings = new TreeMap<String, Object>()-->Line_5 $$ possibleSettings.put("filter.frequency.min", 1)[ FD ]
