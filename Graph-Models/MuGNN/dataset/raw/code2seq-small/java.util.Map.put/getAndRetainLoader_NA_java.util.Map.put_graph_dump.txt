Line_13 $$ cachedLoader = new CachedClassLoader(classLoader, spec, parentCachedLoader)-->Line_14 $$ bySpec.put(spec, cachedLoader)[ FD ]
Line_2 $$ private CachedClassLoader getAndRetainLoader(ClassPath classPath, ClassLoaderSpec spec, ClassLoaderId id) -->Line_7 $$ if (spec.isFiltered()) [ FD ]
Line_7 $$ if (spec.isFiltered()) -->Line_8 $$ parentCachedLoader = getAndRetainLoader(classPath, spec.unfiltered(), id)[ CD ]
Line_4 $$ if (cachedLoader == null) -->Line_13 $$ cachedLoader = new CachedClassLoader(classLoader, spec, parentCachedLoader)[ CD ]
Line_2 $$ private CachedClassLoader getAndRetainLoader(ClassPath classPath, ClassLoaderSpec spec, ClassLoaderId id) -->Line_16 $$ return cachedLoader.retain(id)[ FD ]
Line_7 $$ if (spec.isFiltered()) -->Line_11 $$ classLoader = new MutableURLClassLoader(spec.parent, classPath)[ CD ]
Line_2 $$ private CachedClassLoader getAndRetainLoader(ClassPath classPath, ClassLoaderSpec spec, ClassLoaderId id) -->Line_3 $$ CachedClassLoader cachedLoader = bySpec.get(spec)[ CD ]
Line_5 $$ ClassLoader classLoader-->Line_11 $$ classLoader = new MutableURLClassLoader(spec.parent, classPath)[ FD ]
Line_4 $$ if (cachedLoader == null) -->Line_14 $$ bySpec.put(spec, cachedLoader)[ CD ]
Line_3 $$ CachedClassLoader cachedLoader = bySpec.get(spec)-->Line_13 $$ cachedLoader = new CachedClassLoader(classLoader, spec, parentCachedLoader)[ FD ]
Line_7 $$ if (spec.isFiltered()) -->Line_9 $$ classLoader = new FilteringClassLoader(parentCachedLoader.classLoader, spec.filterSpec)[ CD ]
Line_9 $$ classLoader = new FilteringClassLoader(parentCachedLoader.classLoader, spec.filterSpec)-->Line_11 $$ classLoader = new MutableURLClassLoader(spec.parent, classPath)[ FD ]
Line_4 $$ if (cachedLoader == null) -->Line_5 $$ ClassLoader classLoader[ CD ]
Line_3 $$ CachedClassLoader cachedLoader = bySpec.get(spec)-->Line_16 $$ return cachedLoader.retain(id)[ FD ]
Line_13 $$ cachedLoader = new CachedClassLoader(classLoader, spec, parentCachedLoader)-->Line_16 $$ return cachedLoader.retain(id)[ FD ]
Line_4 $$ if (cachedLoader == null) -->Line_6 $$ CachedClassLoader parentCachedLoader = null[ CD ]
Line_5 $$ ClassLoader classLoader-->Line_9 $$ classLoader = new FilteringClassLoader(parentCachedLoader.classLoader, spec.filterSpec)[ FD ]
Line_4 $$ if (cachedLoader == null) -->Line_7 $$ if (spec.isFiltered()) [ CD ]
Line_2 $$ private CachedClassLoader getAndRetainLoader(ClassPath classPath, ClassLoaderSpec spec, ClassLoaderId id) -->Line_3 $$ CachedClassLoader cachedLoader = bySpec.get(spec)[ FD ]
Line_2 $$ private CachedClassLoader getAndRetainLoader(ClassPath classPath, ClassLoaderSpec spec, ClassLoaderId id) -->Line_16 $$ return cachedLoader.retain(id)[ CD ]
Line_2 $$ private CachedClassLoader getAndRetainLoader(ClassPath classPath, ClassLoaderSpec spec, ClassLoaderId id) -->Line_4 $$ if (cachedLoader == null) [ CD ]
Line_2 $$ private CachedClassLoader getAndRetainLoader(ClassPath classPath, ClassLoaderSpec spec, ClassLoaderId id) -->Line_8 $$ parentCachedLoader = getAndRetainLoader(classPath, spec.unfiltered(), id)[ FD ]
Line_2 $$ private CachedClassLoader getAndRetainLoader(ClassPath classPath, ClassLoaderSpec spec, ClassLoaderId id) -->Line_14 $$ bySpec.put(spec, cachedLoader)[ FD ]
Line_6 $$ CachedClassLoader parentCachedLoader = null-->Line_8 $$ parentCachedLoader = getAndRetainLoader(classPath, spec.unfiltered(), id)[ FD ]
Line_3 $$ CachedClassLoader cachedLoader = bySpec.get(spec)-->Line_4 $$ if (cachedLoader == null) [ FD ]
Line_3 $$ CachedClassLoader cachedLoader = bySpec.get(spec)-->Line_14 $$ bySpec.put(spec, cachedLoader)[ FD ]
