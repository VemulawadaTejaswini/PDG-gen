Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_12 $$ String ks_prsi = KEYSPACE_PREFIX + "PerRowSecondaryIndex"[ CD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_32 $$ keyspaces.add(keyspaceWithUDFs())[ CD ]
Line_3 $$ Keyspaces.Builder keyspaces = Keyspaces.builder()-->Line_25 $$ keyspaces.add(KeyspaceMetadata.create(ks_nocommit, KeyspaceParams.simpleTransient(1), Tables.of(SchemaLoader.standardCFMD(ks_nocommit, "Standard1"))))[ FD ]
Line_3 $$ Keyspaces.Builder keyspaces = Keyspaces.builder()-->Line_28 $$ keyspaces.add(KeyspaceMetadata.create("nts", KeyspaceParams.nts("dc1", 1, "dc2", 2)))[ FD ]
Line_13 $$ String ks_cql = KEYSPACE_PREFIX + "cql_keyspace"-->Line_27 $$ keyspaces.add(KeyspaceMetadata.create(ks_cql, KeyspaceParams.simple(1), Tables.of(CFMetaData.compile("CREATE TABLE table1 (" + "k int PRIMARY KEY," + "v1 text," + "v2 int" + ')', ks_cql), CFMetaData.compile("CREATE TABLE table2 (" + "k text," + "c text," + "v text," + "PRIMARY KEY (k, c))", ks_cql), CFMetaData.compile("CREATE TABLE foo (" + "bar text, " + "baz text, " + "qux text, " + "PRIMARY KEY(bar, baz) ) " + "WITH COMPACT STORAGE", ks_cql), CFMetaData.compile("CREATE TABLE compact_pkonly (" + "k int, " + "c int, " + "PRIMARY KEY (k, c)) " + "WITH COMPACT STORAGE", ks_cql), CFMetaData.compile("CREATE TABLE foofoo (" + "bar text, " + "baz text, " + "qux text, " + "quz text, " + "foo text, " + "PRIMARY KEY((bar, baz), qux, quz) ) " + "WITH COMPACT STORAGE", ks_cql))))[ FD ]
Line_3 $$ Keyspaces.Builder keyspaces = Keyspaces.builder()-->Line_31 $$ keyspaces.add(keyspaceWithUDTs())[ FD ]
Line_8 $$ String ks5 = KEYSPACE_PREFIX + "Keyspace5"-->Line_22 $$ keyspaces.add(KeyspaceMetadata.create(ks5, KeyspaceParams.simple(2), Tables.of(SchemaLoader.standardCFMD(ks5, "Standard1"))))[ FD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_4 $$ String ks1 = KEYSPACE_PREFIX + "Keyspace1"[ CD ]
Line_3 $$ Keyspaces.Builder keyspaces = Keyspaces.builder()-->Line_21 $$ keyspaces.add(KeyspaceMetadata.create(ks4, KeyspaceParams.simple(3), Tables.of(SchemaLoader.standardCFMD(ks4, "Standard1"), SchemaLoader.superCFMD(ks4, "Super3", BytesType.instance), SchemaLoader.superCFMD(ks4, "Super4", TimeUUIDType.instance), SchemaLoader.superCFMD(ks4, "Super5", TimeUUIDType.instance, BytesType.instance))))[ FD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_14 $$ Map<String, String> compactionOptions = new HashMap()[ CD ]
Line_14 $$ Map<String, String> compactionOptions = new HashMap()-->Line_15 $$ compactionOptions.put("tombstone_compaction_interval", "1")[ FD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_24 $$ keyspaces.add(KeyspaceMetadata.create(ks_rcs, KeyspaceParams.simple(1), Tables.of(SchemaLoader.standardCFMD(ks_rcs, "CFWithoutCache").caching(CachingParams.CACHE_NOTHING), SchemaLoader.standardCFMD(ks_rcs, "CachedCF").caching(CachingParams.CACHE_EVERYTHING), SchemaLoader.standardCFMD(ks_rcs, "CachedIntCF").caching(new CachingParams(true, 100)))))[ CD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_28 $$ keyspaces.add(KeyspaceMetadata.create("nts", KeyspaceParams.nts("dc1", 1, "dc2", 2)))[ CD ]
Line_9 $$ String ks6 = KEYSPACE_PREFIX + "Keyspace6"-->Line_23 $$ keyspaces.add(KeyspaceMetadata.create(ks6, KeyspaceParams.simple(1), Tables.of(SchemaLoader.keysIndexCFMD(ks6, "Indexed1", true))))[ FD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_30 $$ keyspaces.add(keyspaceWithTriggers())[ CD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_25 $$ keyspaces.add(KeyspaceMetadata.create(ks_nocommit, KeyspaceParams.simpleTransient(1), Tables.of(SchemaLoader.standardCFMD(ks_nocommit, "Standard1"))))[ CD ]
Line_16 $$ Map<String, String> leveledOptions = new HashMap()-->Line_17 $$ leveledOptions.put("sstable_size_in_mb", "1")[ FD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_33 $$ keyspaces.add(keyspaceWithUDFsAndUDTs())[ CD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_34 $$ keyspaces.add(keyspaceWithUDAs())[ CD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_16 $$ Map<String, String> leveledOptions = new HashMap()[ CD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_13 $$ String ks_cql = KEYSPACE_PREFIX + "cql_keyspace"[ CD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_7 $$ String ks4 = KEYSPACE_PREFIX + "Keyspace4"[ CD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_21 $$ keyspaces.add(KeyspaceMetadata.create(ks4, KeyspaceParams.simple(3), Tables.of(SchemaLoader.standardCFMD(ks4, "Standard1"), SchemaLoader.superCFMD(ks4, "Super3", BytesType.instance), SchemaLoader.superCFMD(ks4, "Super4", TimeUUIDType.instance), SchemaLoader.superCFMD(ks4, "Super5", TimeUUIDType.instance, BytesType.instance))))[ CD ]
Line_3 $$ Keyspaces.Builder keyspaces = Keyspaces.builder()-->Line_29 $$ keyspaces.add(keyspaceWithDroppedCollections())[ FD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_19 $$ keyspaces.add(KeyspaceMetadata.create(ks2, KeyspaceParams.simple(1), Tables.of(SchemaLoader.standardCFMD(ks2, "Standard1"), SchemaLoader.superCFMD(ks2, "Super3", BytesType.instance), SchemaLoader.superCFMD(ks2, "Super4", TimeUUIDType.instance), SchemaLoader.keysIndexCFMD(ks2, "Indexed1", true), SchemaLoader.compositeIndexCFMD(ks2, "Indexed2", true), SchemaLoader.compositeIndexCFMD(ks2, "Indexed3", true).gcGraceSeconds(0))))[ CD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_27 $$ keyspaces.add(KeyspaceMetadata.create(ks_cql, KeyspaceParams.simple(1), Tables.of(CFMetaData.compile("CREATE TABLE table1 (" + "k int PRIMARY KEY," + "v1 text," + "v2 int" + ')', ks_cql), CFMetaData.compile("CREATE TABLE table2 (" + "k text," + "c text," + "v text," + "PRIMARY KEY (k, c))", ks_cql), CFMetaData.compile("CREATE TABLE foo (" + "bar text, " + "baz text, " + "qux text, " + "PRIMARY KEY(bar, baz) ) " + "WITH COMPACT STORAGE", ks_cql), CFMetaData.compile("CREATE TABLE compact_pkonly (" + "k int, " + "c int, " + "PRIMARY KEY (k, c)) " + "WITH COMPACT STORAGE", ks_cql), CFMetaData.compile("CREATE TABLE foofoo (" + "bar text, " + "baz text, " + "qux text, " + "quz text, " + "foo text, " + "PRIMARY KEY((bar, baz), qux, quz) ) " + "WITH COMPACT STORAGE", ks_cql))))[ CD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_10 $$ String ks_rcs = KEYSPACE_PREFIX + "RowCacheSpace"[ CD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_6 $$ String ks3 = KEYSPACE_PREFIX + "Keyspace3"[ CD ]
Line_16 $$ Map<String, String> leveledOptions = new HashMap()-->Line_18 $$ keyspaces.add(KeyspaceMetadata.create(ks1, KeyspaceParams.simple(1), Tables.of(SchemaLoader.standardCFMD(ks1, "Standard1").compaction(CompactionParams.scts(compactionOptions)), SchemaLoader.standardCFMD(ks1, "StandardGCGS0").gcGraceSeconds(0), SchemaLoader.standardCFMD(ks1, "StandardLong1"), SchemaLoader.superCFMD(ks1, "Super1", LongType.instance), SchemaLoader.superCFMD(ks1, "Super2", UTF8Type.instance), SchemaLoader.superCFMD(ks1, "Super5", BytesType.instance), SchemaLoader.superCFMD(ks1, "Super6", LexicalUUIDType.instance, UTF8Type.instance), SchemaLoader.keysIndexCFMD(ks1, "Indexed1", true), SchemaLoader.keysIndexCFMD(ks1, "Indexed2", false), SchemaLoader.superCFMD(ks1, "SuperDirectGC", BytesType.instance).gcGraceSeconds(0), SchemaLoader.jdbcCFMD(ks1, "JdbcUtf8", UTF8Type.instance).addColumnDefinition(SchemaLoader.utf8Column(ks1, "JdbcUtf8")), SchemaLoader.jdbcCFMD(ks1, "JdbcLong", LongType.instance), SchemaLoader.jdbcCFMD(ks1, "JdbcBytes", BytesType.instance), SchemaLoader.jdbcCFMD(ks1, "JdbcAscii", AsciiType.instance), SchemaLoader.standardCFMD(ks1, "StandardLeveled").compaction(CompactionParams.lcs(leveledOptions)), SchemaLoader.standardCFMD(ks1, "legacyleveled").compaction(CompactionParams.lcs(leveledOptions)), SchemaLoader.standardCFMD(ks1, "StandardLowIndexInterval").minIndexInterval(8).maxIndexInterval(256).caching(CachingParams.CACHE_NOTHING))))[ FD ]
Line_3 $$ Keyspaces.Builder keyspaces = Keyspaces.builder()-->Line_30 $$ keyspaces.add(keyspaceWithTriggers())[ FD ]
Line_5 $$ String ks2 = KEYSPACE_PREFIX + "Keyspace2"-->Line_19 $$ keyspaces.add(KeyspaceMetadata.create(ks2, KeyspaceParams.simple(1), Tables.of(SchemaLoader.standardCFMD(ks2, "Standard1"), SchemaLoader.superCFMD(ks2, "Super3", BytesType.instance), SchemaLoader.superCFMD(ks2, "Super4", TimeUUIDType.instance), SchemaLoader.keysIndexCFMD(ks2, "Indexed1", true), SchemaLoader.compositeIndexCFMD(ks2, "Indexed2", true), SchemaLoader.compositeIndexCFMD(ks2, "Indexed3", true).gcGraceSeconds(0))))[ FD ]
Line_3 $$ Keyspaces.Builder keyspaces = Keyspaces.builder()-->Line_18 $$ keyspaces.add(KeyspaceMetadata.create(ks1, KeyspaceParams.simple(1), Tables.of(SchemaLoader.standardCFMD(ks1, "Standard1").compaction(CompactionParams.scts(compactionOptions)), SchemaLoader.standardCFMD(ks1, "StandardGCGS0").gcGraceSeconds(0), SchemaLoader.standardCFMD(ks1, "StandardLong1"), SchemaLoader.superCFMD(ks1, "Super1", LongType.instance), SchemaLoader.superCFMD(ks1, "Super2", UTF8Type.instance), SchemaLoader.superCFMD(ks1, "Super5", BytesType.instance), SchemaLoader.superCFMD(ks1, "Super6", LexicalUUIDType.instance, UTF8Type.instance), SchemaLoader.keysIndexCFMD(ks1, "Indexed1", true), SchemaLoader.keysIndexCFMD(ks1, "Indexed2", false), SchemaLoader.superCFMD(ks1, "SuperDirectGC", BytesType.instance).gcGraceSeconds(0), SchemaLoader.jdbcCFMD(ks1, "JdbcUtf8", UTF8Type.instance).addColumnDefinition(SchemaLoader.utf8Column(ks1, "JdbcUtf8")), SchemaLoader.jdbcCFMD(ks1, "JdbcLong", LongType.instance), SchemaLoader.jdbcCFMD(ks1, "JdbcBytes", BytesType.instance), SchemaLoader.jdbcCFMD(ks1, "JdbcAscii", AsciiType.instance), SchemaLoader.standardCFMD(ks1, "StandardLeveled").compaction(CompactionParams.lcs(leveledOptions)), SchemaLoader.standardCFMD(ks1, "legacyleveled").compaction(CompactionParams.lcs(leveledOptions)), SchemaLoader.standardCFMD(ks1, "StandardLowIndexInterval").minIndexInterval(8).maxIndexInterval(256).caching(CachingParams.CACHE_NOTHING))))[ FD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_9 $$ String ks6 = KEYSPACE_PREFIX + "Keyspace6"[ CD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_17 $$ leveledOptions.put("sstable_size_in_mb", "1")[ CD ]
Line_3 $$ Keyspaces.Builder keyspaces = Keyspaces.builder()-->Line_20 $$ keyspaces.add(KeyspaceMetadata.create(ks3, KeyspaceParams.simple(5), Tables.of(SchemaLoader.standardCFMD(ks3, "Standard1"), SchemaLoader.keysIndexCFMD(ks3, "Indexed1", true))))[ FD ]
Line_3 $$ Keyspaces.Builder keyspaces = Keyspaces.builder()-->Line_36 $$ return keyspaces.build()[ FD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_20 $$ keyspaces.add(KeyspaceMetadata.create(ks3, KeyspaceParams.simple(5), Tables.of(SchemaLoader.standardCFMD(ks3, "Standard1"), SchemaLoader.keysIndexCFMD(ks3, "Indexed1", true))))[ CD ]
Line_3 $$ Keyspaces.Builder keyspaces = Keyspaces.builder()-->Line_19 $$ keyspaces.add(KeyspaceMetadata.create(ks2, KeyspaceParams.simple(1), Tables.of(SchemaLoader.standardCFMD(ks2, "Standard1"), SchemaLoader.superCFMD(ks2, "Super3", BytesType.instance), SchemaLoader.superCFMD(ks2, "Super4", TimeUUIDType.instance), SchemaLoader.keysIndexCFMD(ks2, "Indexed1", true), SchemaLoader.compositeIndexCFMD(ks2, "Indexed2", true), SchemaLoader.compositeIndexCFMD(ks2, "Indexed3", true).gcGraceSeconds(0))))[ FD ]
Line_3 $$ Keyspaces.Builder keyspaces = Keyspaces.builder()-->Line_33 $$ keyspaces.add(keyspaceWithUDFsAndUDTs())[ FD ]
Line_3 $$ Keyspaces.Builder keyspaces = Keyspaces.builder()-->Line_27 $$ keyspaces.add(KeyspaceMetadata.create(ks_cql, KeyspaceParams.simple(1), Tables.of(CFMetaData.compile("CREATE TABLE table1 (" + "k int PRIMARY KEY," + "v1 text," + "v2 int" + ')', ks_cql), CFMetaData.compile("CREATE TABLE table2 (" + "k text," + "c text," + "v text," + "PRIMARY KEY (k, c))", ks_cql), CFMetaData.compile("CREATE TABLE foo (" + "bar text, " + "baz text, " + "qux text, " + "PRIMARY KEY(bar, baz) ) " + "WITH COMPACT STORAGE", ks_cql), CFMetaData.compile("CREATE TABLE compact_pkonly (" + "k int, " + "c int, " + "PRIMARY KEY (k, c)) " + "WITH COMPACT STORAGE", ks_cql), CFMetaData.compile("CREATE TABLE foofoo (" + "bar text, " + "baz text, " + "qux text, " + "quz text, " + "foo text, " + "PRIMARY KEY((bar, baz), qux, quz) ) " + "WITH COMPACT STORAGE", ks_cql))))[ FD ]
Line_11 $$ String ks_nocommit = KEYSPACE_PREFIX + "NoCommitlogSpace"-->Line_25 $$ keyspaces.add(KeyspaceMetadata.create(ks_nocommit, KeyspaceParams.simpleTransient(1), Tables.of(SchemaLoader.standardCFMD(ks_nocommit, "Standard1"))))[ FD ]
Line_3 $$ Keyspaces.Builder keyspaces = Keyspaces.builder()-->Line_26 $$ keyspaces.add(KeyspaceMetadata.create(ks_prsi, KeyspaceParams.simple(1), Tables.of(SchemaLoader.perRowIndexedCFMD(ks_prsi, "Indexed1"))))[ FD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_29 $$ keyspaces.add(keyspaceWithDroppedCollections())[ CD ]
Line_12 $$ String ks_prsi = KEYSPACE_PREFIX + "PerRowSecondaryIndex"-->Line_26 $$ keyspaces.add(KeyspaceMetadata.create(ks_prsi, KeyspaceParams.simple(1), Tables.of(SchemaLoader.perRowIndexedCFMD(ks_prsi, "Indexed1"))))[ FD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_31 $$ keyspaces.add(keyspaceWithUDTs())[ CD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_15 $$ compactionOptions.put("tombstone_compaction_interval", "1")[ CD ]
Line_3 $$ Keyspaces.Builder keyspaces = Keyspaces.builder()-->Line_34 $$ keyspaces.add(keyspaceWithUDAs())[ FD ]
Line_7 $$ String ks4 = KEYSPACE_PREFIX + "Keyspace4"-->Line_21 $$ keyspaces.add(KeyspaceMetadata.create(ks4, KeyspaceParams.simple(3), Tables.of(SchemaLoader.standardCFMD(ks4, "Standard1"), SchemaLoader.superCFMD(ks4, "Super3", BytesType.instance), SchemaLoader.superCFMD(ks4, "Super4", TimeUUIDType.instance), SchemaLoader.superCFMD(ks4, "Super5", TimeUUIDType.instance, BytesType.instance))))[ FD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_35 $$ keyspaces.add(keyspaceWithUDAsAndUDTs())[ CD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_36 $$ return keyspaces.build()[ CD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_8 $$ String ks5 = KEYSPACE_PREFIX + "Keyspace5"[ CD ]
Line_3 $$ Keyspaces.Builder keyspaces = Keyspaces.builder()-->Line_32 $$ keyspaces.add(keyspaceWithUDFs())[ FD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_26 $$ keyspaces.add(KeyspaceMetadata.create(ks_prsi, KeyspaceParams.simple(1), Tables.of(SchemaLoader.perRowIndexedCFMD(ks_prsi, "Indexed1"))))[ CD ]
Line_14 $$ Map<String, String> compactionOptions = new HashMap()-->Line_18 $$ keyspaces.add(KeyspaceMetadata.create(ks1, KeyspaceParams.simple(1), Tables.of(SchemaLoader.standardCFMD(ks1, "Standard1").compaction(CompactionParams.scts(compactionOptions)), SchemaLoader.standardCFMD(ks1, "StandardGCGS0").gcGraceSeconds(0), SchemaLoader.standardCFMD(ks1, "StandardLong1"), SchemaLoader.superCFMD(ks1, "Super1", LongType.instance), SchemaLoader.superCFMD(ks1, "Super2", UTF8Type.instance), SchemaLoader.superCFMD(ks1, "Super5", BytesType.instance), SchemaLoader.superCFMD(ks1, "Super6", LexicalUUIDType.instance, UTF8Type.instance), SchemaLoader.keysIndexCFMD(ks1, "Indexed1", true), SchemaLoader.keysIndexCFMD(ks1, "Indexed2", false), SchemaLoader.superCFMD(ks1, "SuperDirectGC", BytesType.instance).gcGraceSeconds(0), SchemaLoader.jdbcCFMD(ks1, "JdbcUtf8", UTF8Type.instance).addColumnDefinition(SchemaLoader.utf8Column(ks1, "JdbcUtf8")), SchemaLoader.jdbcCFMD(ks1, "JdbcLong", LongType.instance), SchemaLoader.jdbcCFMD(ks1, "JdbcBytes", BytesType.instance), SchemaLoader.jdbcCFMD(ks1, "JdbcAscii", AsciiType.instance), SchemaLoader.standardCFMD(ks1, "StandardLeveled").compaction(CompactionParams.lcs(leveledOptions)), SchemaLoader.standardCFMD(ks1, "legacyleveled").compaction(CompactionParams.lcs(leveledOptions)), SchemaLoader.standardCFMD(ks1, "StandardLowIndexInterval").minIndexInterval(8).maxIndexInterval(256).caching(CachingParams.CACHE_NOTHING))))[ FD ]
Line_10 $$ String ks_rcs = KEYSPACE_PREFIX + "RowCacheSpace"-->Line_24 $$ keyspaces.add(KeyspaceMetadata.create(ks_rcs, KeyspaceParams.simple(1), Tables.of(SchemaLoader.standardCFMD(ks_rcs, "CFWithoutCache").caching(CachingParams.CACHE_NOTHING), SchemaLoader.standardCFMD(ks_rcs, "CachedCF").caching(CachingParams.CACHE_EVERYTHING), SchemaLoader.standardCFMD(ks_rcs, "CachedIntCF").caching(new CachingParams(true, 100)))))[ FD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_3 $$ Keyspaces.Builder keyspaces = Keyspaces.builder()[ CD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_18 $$ keyspaces.add(KeyspaceMetadata.create(ks1, KeyspaceParams.simple(1), Tables.of(SchemaLoader.standardCFMD(ks1, "Standard1").compaction(CompactionParams.scts(compactionOptions)), SchemaLoader.standardCFMD(ks1, "StandardGCGS0").gcGraceSeconds(0), SchemaLoader.standardCFMD(ks1, "StandardLong1"), SchemaLoader.superCFMD(ks1, "Super1", LongType.instance), SchemaLoader.superCFMD(ks1, "Super2", UTF8Type.instance), SchemaLoader.superCFMD(ks1, "Super5", BytesType.instance), SchemaLoader.superCFMD(ks1, "Super6", LexicalUUIDType.instance, UTF8Type.instance), SchemaLoader.keysIndexCFMD(ks1, "Indexed1", true), SchemaLoader.keysIndexCFMD(ks1, "Indexed2", false), SchemaLoader.superCFMD(ks1, "SuperDirectGC", BytesType.instance).gcGraceSeconds(0), SchemaLoader.jdbcCFMD(ks1, "JdbcUtf8", UTF8Type.instance).addColumnDefinition(SchemaLoader.utf8Column(ks1, "JdbcUtf8")), SchemaLoader.jdbcCFMD(ks1, "JdbcLong", LongType.instance), SchemaLoader.jdbcCFMD(ks1, "JdbcBytes", BytesType.instance), SchemaLoader.jdbcCFMD(ks1, "JdbcAscii", AsciiType.instance), SchemaLoader.standardCFMD(ks1, "StandardLeveled").compaction(CompactionParams.lcs(leveledOptions)), SchemaLoader.standardCFMD(ks1, "legacyleveled").compaction(CompactionParams.lcs(leveledOptions)), SchemaLoader.standardCFMD(ks1, "StandardLowIndexInterval").minIndexInterval(8).maxIndexInterval(256).caching(CachingParams.CACHE_NOTHING))))[ CD ]
Line_3 $$ Keyspaces.Builder keyspaces = Keyspaces.builder()-->Line_22 $$ keyspaces.add(KeyspaceMetadata.create(ks5, KeyspaceParams.simple(2), Tables.of(SchemaLoader.standardCFMD(ks5, "Standard1"))))[ FD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_5 $$ String ks2 = KEYSPACE_PREFIX + "Keyspace2"[ CD ]
Line_3 $$ Keyspaces.Builder keyspaces = Keyspaces.builder()-->Line_23 $$ keyspaces.add(KeyspaceMetadata.create(ks6, KeyspaceParams.simple(1), Tables.of(SchemaLoader.keysIndexCFMD(ks6, "Indexed1", true))))[ FD ]
Line_3 $$ Keyspaces.Builder keyspaces = Keyspaces.builder()-->Line_35 $$ keyspaces.add(keyspaceWithUDAsAndUDTs())[ FD ]
Line_4 $$ String ks1 = KEYSPACE_PREFIX + "Keyspace1"-->Line_18 $$ keyspaces.add(KeyspaceMetadata.create(ks1, KeyspaceParams.simple(1), Tables.of(SchemaLoader.standardCFMD(ks1, "Standard1").compaction(CompactionParams.scts(compactionOptions)), SchemaLoader.standardCFMD(ks1, "StandardGCGS0").gcGraceSeconds(0), SchemaLoader.standardCFMD(ks1, "StandardLong1"), SchemaLoader.superCFMD(ks1, "Super1", LongType.instance), SchemaLoader.superCFMD(ks1, "Super2", UTF8Type.instance), SchemaLoader.superCFMD(ks1, "Super5", BytesType.instance), SchemaLoader.superCFMD(ks1, "Super6", LexicalUUIDType.instance, UTF8Type.instance), SchemaLoader.keysIndexCFMD(ks1, "Indexed1", true), SchemaLoader.keysIndexCFMD(ks1, "Indexed2", false), SchemaLoader.superCFMD(ks1, "SuperDirectGC", BytesType.instance).gcGraceSeconds(0), SchemaLoader.jdbcCFMD(ks1, "JdbcUtf8", UTF8Type.instance).addColumnDefinition(SchemaLoader.utf8Column(ks1, "JdbcUtf8")), SchemaLoader.jdbcCFMD(ks1, "JdbcLong", LongType.instance), SchemaLoader.jdbcCFMD(ks1, "JdbcBytes", BytesType.instance), SchemaLoader.jdbcCFMD(ks1, "JdbcAscii", AsciiType.instance), SchemaLoader.standardCFMD(ks1, "StandardLeveled").compaction(CompactionParams.lcs(leveledOptions)), SchemaLoader.standardCFMD(ks1, "legacyleveled").compaction(CompactionParams.lcs(leveledOptions)), SchemaLoader.standardCFMD(ks1, "StandardLowIndexInterval").minIndexInterval(8).maxIndexInterval(256).caching(CachingParams.CACHE_NOTHING))))[ FD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_11 $$ String ks_nocommit = KEYSPACE_PREFIX + "NoCommitlogSpace"[ CD ]
Line_3 $$ Keyspaces.Builder keyspaces = Keyspaces.builder()-->Line_24 $$ keyspaces.add(KeyspaceMetadata.create(ks_rcs, KeyspaceParams.simple(1), Tables.of(SchemaLoader.standardCFMD(ks_rcs, "CFWithoutCache").caching(CachingParams.CACHE_NOTHING), SchemaLoader.standardCFMD(ks_rcs, "CachedCF").caching(CachingParams.CACHE_EVERYTHING), SchemaLoader.standardCFMD(ks_rcs, "CachedIntCF").caching(new CachingParams(true, 100)))))[ FD ]
Line_6 $$ String ks3 = KEYSPACE_PREFIX + "Keyspace3"-->Line_20 $$ keyspaces.add(KeyspaceMetadata.create(ks3, KeyspaceParams.simple(5), Tables.of(SchemaLoader.standardCFMD(ks3, "Standard1"), SchemaLoader.keysIndexCFMD(ks3, "Indexed1", true))))[ FD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_23 $$ keyspaces.add(KeyspaceMetadata.create(ks6, KeyspaceParams.simple(1), Tables.of(SchemaLoader.keysIndexCFMD(ks6, "Indexed1", true))))[ CD ]
Line_2 $$ private static Keyspaces keyspacesToMigrate() -->Line_22 $$ keyspaces.add(KeyspaceMetadata.create(ks5, KeyspaceParams.simple(2), Tables.of(SchemaLoader.standardCFMD(ks5, "Standard1"))))[ CD ]
