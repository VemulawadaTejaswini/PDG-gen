Line_8 $$ String line = unsyncBufferedReader.readLine()-->Line_18 $$ line = unsyncBufferedReader.readLine()[ FD ]
Line_18 $$ line = unsyncBufferedReader.readLine()-->Line_10 $$ String[] array = StringUtil.split(line)[ FD ]
Line_3 $$ if (usersInputStream == null) -->Line_4 $$ return Collections.emptyMap()[ CD ]
Line_7 $$ UnsyncBufferedReader unsyncBufferedReader = new UnsyncBufferedReader(new InputStreamReader(usersInputStream))-->Line_8 $$ String line = unsyncBufferedReader.readLine()[ FD ]
Line_2 $$ protected Map<String, String> readUsersFile(InputStream usersInputStream) throws IOException -->Line_7 $$ UnsyncBufferedReader unsyncBufferedReader = new UnsyncBufferedReader(new InputStreamReader(usersInputStream))[ CD ]
Line_14 $$ if (_log.isInfoEnabled()) -->Line_15 $$ _log.info("Ignoring line " + line + " because it does not contain exactly 2 columns")[ CD ]
Line_2 $$ protected Map<String, String> readUsersFile(InputStream usersInputStream) throws IOException -->Line_6 $$ Map<String, String> usersMap = new HashMap()[ CD ]
Line_11 $$ if ((array.length == 2) && Validator.isNotNull(array[0]) && Validator.isNotNull(array[1])) -->Line_12 $$ usersMap.put(array[0], array[1])[ CD ]
Line_8 $$ String line = unsyncBufferedReader.readLine()-->Line_9 $$ while (line != null) [ FD ]
Line_9 $$ while (line != null) -->Line_18 $$ line = unsyncBufferedReader.readLine()[ CD ]
Line_6 $$ Map<String, String> usersMap = new HashMap()-->Line_12 $$ usersMap.put(array[0], array[1])[ FD ]
Line_2 $$ protected Map<String, String> readUsersFile(InputStream usersInputStream) throws IOException -->Line_20 $$ return usersMap[ CD ]
Line_9 $$ while (line != null) -->Line_10 $$ String[] array = StringUtil.split(line)[ CD ]
Line_2 $$ protected Map<String, String> readUsersFile(InputStream usersInputStream) throws IOException -->Line_3 $$ if (usersInputStream == null) [ FD ]
Line_2 $$ protected Map<String, String> readUsersFile(InputStream usersInputStream) throws IOException -->Line_9 $$ while (line != null) [ CD ]
Line_11 $$ if ((array.length == 2) && Validator.isNotNull(array[0]) && Validator.isNotNull(array[1])) -->Line_14 $$ if (_log.isInfoEnabled()) [ CD ]
Line_2 $$ protected Map<String, String> readUsersFile(InputStream usersInputStream) throws IOException -->Line_3 $$ if (usersInputStream == null) [ CD ]
Line_2 $$ protected Map<String, String> readUsersFile(InputStream usersInputStream) throws IOException -->Line_8 $$ String line = unsyncBufferedReader.readLine()[ CD ]
Line_18 $$ line = unsyncBufferedReader.readLine()-->Line_9 $$ while (line != null) [ FD ]
Line_9 $$ while (line != null) -->Line_11 $$ if ((array.length == 2) && Validator.isNotNull(array[0]) && Validator.isNotNull(array[1])) [ CD ]
Line_8 $$ String line = unsyncBufferedReader.readLine()-->Line_10 $$ String[] array = StringUtil.split(line)[ FD ]
Line_7 $$ UnsyncBufferedReader unsyncBufferedReader = new UnsyncBufferedReader(new InputStreamReader(usersInputStream))-->Line_18 $$ line = unsyncBufferedReader.readLine()[ FD ]
