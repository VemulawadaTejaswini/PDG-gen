Line_19 $$ while (m < memReport.length && d < blockpoolReport.length) -->Line_40 $$ m++[ CD ]
Line_11 $$ LinkedList<ScanInfo> diffRecord = new LinkedList<ScanInfo>()-->Line_34 $$ addDifference(diffRecord, statsRecord, info)[ FD ]
Line_21 $$ ScanInfo info = blockpoolReport[Math.min(d, blockpoolReport.length - 1)]-->Line_34 $$ addDifference(diffRecord, statsRecord, info)[ FD ]
Line_19 $$ while (m < memReport.length && d < blockpoolReport.length) -->Line_33 $$ if (info.getBlockFile() == null) [ CD ]
Line_9 $$ Stats statsRecord = new Stats(bpid)-->Line_29 $$ addDifference(diffRecord, statsRecord, memBlock.getBlockId(), info.getVolume())[ FD ]
Line_20 $$ Block memBlock = memReport[Math.min(m, memReport.length - 1)]-->Line_28 $$ if (info.getBlockId() > memBlock.getBlockId()) [ FD ]
Line_11 $$ LinkedList<ScanInfo> diffRecord = new LinkedList<ScanInfo>()-->Line_37 $$ addDifference(diffRecord, statsRecord, info)[ FD ]
Line_17 $$ int d = 0-->Line_39 $$ d++[ FD ]
Line_9 $$ Stats statsRecord = new Stats(bpid)-->Line_48 $$ addDifference(diffRecord, statsRecord, blockpoolReport[d++])[ FD ]
Line_7 $$ String bpid = entry.getKey()-->Line_10 $$ stats.put(bpid, statsRecord)[ FD ]
Line_21 $$ ScanInfo info = blockpoolReport[Math.min(d, blockpoolReport.length - 1)]-->Line_24 $$ addDifference(diffRecord, statsRecord, info)[ FD ]
Line_21 $$ ScanInfo info = blockpoolReport[Math.min(d, blockpoolReport.length - 1)]-->Line_37 $$ addDifference(diffRecord, statsRecord, info)[ FD ]
Line_11 $$ LinkedList<ScanInfo> diffRecord = new LinkedList<ScanInfo>()-->Line_24 $$ addDifference(diffRecord, statsRecord, info)[ FD ]
Line_14 $$ List<FinalizedReplica> bl = dataset.getFinalizedBlocks(bpid)-->Line_15 $$ FinalizedReplica[] memReport = bl.toArray(new FinalizedReplica[bl.size()])[ FD ]
Line_28 $$ if (info.getBlockId() > memBlock.getBlockId()) -->Line_30 $$ m++[ CD ]
Line_33 $$ if (info.getBlockFile() == null) -->Line_35 $$ if (info.getGenStamp() != memBlock.getGenerationStamp() || info.getBlockFileLength() != memBlock.getNumBytes()) [ CD ]
Line_42 $$ while (m < memReport.length) -->Line_44 $$ addDifference(diffRecord, statsRecord, current.getBlockId(), current.getVolume())[ CD ]
Line_18 $$ int m = 0-->Line_40 $$ m++[ FD ]
Line_22 $$ if (info.getBlockId() < memBlock.getBlockId()) -->Line_25 $$ d++[ CD ]
Line_20 $$ Block memBlock = memReport[Math.min(m, memReport.length - 1)]-->Line_35 $$ if (info.getGenStamp() != memBlock.getGenerationStamp() || info.getBlockFileLength() != memBlock.getNumBytes()) [ FD ]
Line_19 $$ while (m < memReport.length && d < blockpoolReport.length) -->Line_22 $$ if (info.getBlockId() < memBlock.getBlockId()) [ CD ]
Line_21 $$ ScanInfo info = blockpoolReport[Math.min(d, blockpoolReport.length - 1)]-->Line_35 $$ if (info.getGenStamp() != memBlock.getGenerationStamp() || info.getBlockFileLength() != memBlock.getNumBytes()) [ FD ]
Line_19 $$ while (m < memReport.length && d < blockpoolReport.length) -->Line_39 $$ d++[ CD ]
Line_4 $$ Map<String, ScanInfo[]> diskReport = getDiskReport()-->Line_6 $$ for (Entry<String, ScanInfo[]> entry : diskReport.entrySet()) [ FD ]
Line_22 $$ if (info.getBlockId() < memBlock.getBlockId()) -->Line_24 $$ addDifference(diffRecord, statsRecord, info)[ CD ]
Line_6 $$ for (Entry<String, ScanInfo[]> entry : diskReport.entrySet()) -->Line_7 $$ String bpid = entry.getKey()[ FD ]
Line_11 $$ LinkedList<ScanInfo> diffRecord = new LinkedList<ScanInfo>()-->Line_29 $$ addDifference(diffRecord, statsRecord, memBlock.getBlockId(), info.getVolume())[ FD ]
Line_21 $$ ScanInfo info = blockpoolReport[Math.min(d, blockpoolReport.length - 1)]-->Line_28 $$ if (info.getBlockId() > memBlock.getBlockId()) [ FD ]
Line_33 $$ if (info.getBlockFile() == null) -->Line_34 $$ addDifference(diffRecord, statsRecord, info)[ CD ]
Line_6 $$ for (Entry<String, ScanInfo[]> entry : diskReport.entrySet()) -->Line_8 $$ ScanInfo[] blockpoolReport = entry.getValue()[ FD ]
Line_9 $$ Stats statsRecord = new Stats(bpid)-->Line_24 $$ addDifference(diffRecord, statsRecord, info)[ FD ]
Line_46 $$ while (d < blockpoolReport.length) -->Line_47 $$ statsRecord.missingMemoryBlocks++[ CD ]
Line_11 $$ LinkedList<ScanInfo> diffRecord = new LinkedList<ScanInfo>()-->Line_12 $$ diffs.put(bpid, diffRecord)[ FD ]
Line_15 $$ FinalizedReplica[] memReport = bl.toArray(new FinalizedReplica[bl.size()])-->Line_16 $$ Arrays.sort(memReport)[ FD ]
Line_43 $$ FinalizedReplica current = memReport[m++]-->Line_44 $$ addDifference(diffRecord, statsRecord, current.getBlockId(), current.getVolume())[ FD ]
Line_19 $$ while (m < memReport.length && d < blockpoolReport.length) -->Line_28 $$ if (info.getBlockId() > memBlock.getBlockId()) [ CD ]
Line_28 $$ if (info.getBlockId() > memBlock.getBlockId()) -->Line_29 $$ addDifference(diffRecord, statsRecord, memBlock.getBlockId(), info.getVolume())[ CD ]
Line_18 $$ int m = 0-->Line_43 $$ FinalizedReplica current = memReport[m++][ FD ]
Line_46 $$ while (d < blockpoolReport.length) -->Line_48 $$ addDifference(diffRecord, statsRecord, blockpoolReport[d++])[ CD ]
Line_9 $$ Stats statsRecord = new Stats(bpid)-->Line_10 $$ stats.put(bpid, statsRecord)[ FD ]
Line_17 $$ int d = 0-->Line_48 $$ addDifference(diffRecord, statsRecord, blockpoolReport[d++])[ FD ]
Line_22 $$ if (info.getBlockId() < memBlock.getBlockId()) -->Line_23 $$ statsRecord.missingMemoryBlocks++[ CD ]
Line_17 $$ int d = 0-->Line_25 $$ d++[ FD ]
Line_19 $$ while (m < memReport.length && d < blockpoolReport.length) -->Line_21 $$ ScanInfo info = blockpoolReport[Math.min(d, blockpoolReport.length - 1)][ CD ]
Line_9 $$ Stats statsRecord = new Stats(bpid)-->Line_34 $$ addDifference(diffRecord, statsRecord, info)[ FD ]
Line_9 $$ Stats statsRecord = new Stats(bpid)-->Line_37 $$ addDifference(diffRecord, statsRecord, info)[ FD ]
Line_42 $$ while (m < memReport.length) -->Line_43 $$ FinalizedReplica current = memReport[m++][ CD ]
Line_35 $$ if (info.getGenStamp() != memBlock.getGenerationStamp() || info.getBlockFileLength() != memBlock.getNumBytes()) -->Line_37 $$ addDifference(diffRecord, statsRecord, info)[ CD ]
Line_11 $$ LinkedList<ScanInfo> diffRecord = new LinkedList<ScanInfo>()-->Line_48 $$ addDifference(diffRecord, statsRecord, blockpoolReport[d++])[ FD ]
Line_7 $$ String bpid = entry.getKey()-->Line_12 $$ diffs.put(bpid, diffRecord)[ FD ]
Line_7 $$ String bpid = entry.getKey()-->Line_14 $$ List<FinalizedReplica> bl = dataset.getFinalizedBlocks(bpid)[ FD ]
Line_17 $$ int d = 0-->Line_21 $$ ScanInfo info = blockpoolReport[Math.min(d, blockpoolReport.length - 1)][ FD ]
Line_2 $$ void scan() -->Line_4 $$ Map<String, ScanInfo[]> diskReport = getDiskReport()[ CD ]
Line_2 $$ void scan() -->Line_3 $$ clear()[ CD ]
Line_20 $$ Block memBlock = memReport[Math.min(m, memReport.length - 1)]-->Line_29 $$ addDifference(diffRecord, statsRecord, memBlock.getBlockId(), info.getVolume())[ FD ]
Line_35 $$ if (info.getGenStamp() != memBlock.getGenerationStamp() || info.getBlockFileLength() != memBlock.getNumBytes()) -->Line_36 $$ statsRecord.mismatchBlocks++[ CD ]
Line_20 $$ Block memBlock = memReport[Math.min(m, memReport.length - 1)]-->Line_22 $$ if (info.getBlockId() < memBlock.getBlockId()) [ FD ]
Line_11 $$ LinkedList<ScanInfo> diffRecord = new LinkedList<ScanInfo>()-->Line_44 $$ addDifference(diffRecord, statsRecord, current.getBlockId(), current.getVolume())[ FD ]
Line_17 $$ int d = 0-->Line_46 $$ while (d < blockpoolReport.length) [ FD ]
Line_9 $$ Stats statsRecord = new Stats(bpid)-->Line_50 $$ LOG.info(statsRecord.toString())[ FD ]
Line_9 $$ Stats statsRecord = new Stats(bpid)-->Line_44 $$ addDifference(diffRecord, statsRecord, current.getBlockId(), current.getVolume())[ FD ]
Line_18 $$ int m = 0-->Line_30 $$ m++[ FD ]
Line_21 $$ ScanInfo info = blockpoolReport[Math.min(d, blockpoolReport.length - 1)]-->Line_33 $$ if (info.getBlockFile() == null) [ FD ]
Line_18 $$ int m = 0-->Line_42 $$ while (m < memReport.length) [ FD ]
Line_21 $$ ScanInfo info = blockpoolReport[Math.min(d, blockpoolReport.length - 1)]-->Line_22 $$ if (info.getBlockId() < memBlock.getBlockId()) [ FD ]
Line_19 $$ while (m < memReport.length && d < blockpoolReport.length) -->Line_20 $$ Block memBlock = memReport[Math.min(m, memReport.length - 1)][ CD ]
Line_21 $$ ScanInfo info = blockpoolReport[Math.min(d, blockpoolReport.length - 1)]-->Line_29 $$ addDifference(diffRecord, statsRecord, memBlock.getBlockId(), info.getVolume())[ FD ]
Line_18 $$ int m = 0-->Line_20 $$ Block memBlock = memReport[Math.min(m, memReport.length - 1)][ FD ]
