Line_11 $$ group = new LifecycleGroup(phase, this.timeoutPerShutdownPhase, lifecycleBeans, autoStartupOnly)-->Line_14 $$ group.add(entry.getKey(), bean)[ FD ]
Line_4 $$ Map<Integer, LifecycleGroup> phases = new HashMap<Integer, LifecycleGroup>()-->Line_12 $$ phases.put(phase, group)[ FD ]
Line_9 $$ LifecycleGroup group = phases.get(phase)-->Line_11 $$ group = new LifecycleGroup(phase, this.timeoutPerShutdownPhase, lifecycleBeans, autoStartupOnly)[ FD ]
Line_17 $$ if (phases.size() > 0) -->Line_19 $$ Collections.sort(keys)[ CD ]
Line_4 $$ Map<Integer, LifecycleGroup> phases = new HashMap<Integer, LifecycleGroup>()-->Line_21 $$ phases.get(key).start()[ FD ]
Line_2 $$ private void startBeans(boolean autoStartupOnly) -->Line_4 $$ Map<Integer, LifecycleGroup> phases = new HashMap<Integer, LifecycleGroup>()[ CD ]
Line_20 $$ for (Integer key : keys) -->Line_21 $$ phases.get(key).start()[ FD ]
Line_6 $$ Lifecycle bean = entry.getValue()-->Line_8 $$ int phase = getPhase(bean)[ FD ]
Line_8 $$ int phase = getPhase(bean)-->Line_12 $$ phases.put(phase, group)[ FD ]
Line_7 $$ if (!autoStartupOnly || (bean instanceof SmartLifecycle && ((SmartLifecycle) bean).isAutoStartup())) -->Line_14 $$ group.add(entry.getKey(), bean)[ CD ]
Line_10 $$ if (group == null) -->Line_11 $$ group = new LifecycleGroup(phase, this.timeoutPerShutdownPhase, lifecycleBeans, autoStartupOnly)[ CD ]
Line_5 $$ for (Map.Entry<String, ? extends Lifecycle> entry : lifecycleBeans.entrySet()) -->Line_14 $$ group.add(entry.getKey(), bean)[ FD ]
Line_5 $$ for (Map.Entry<String, ? extends Lifecycle> entry : lifecycleBeans.entrySet()) -->Line_6 $$ Lifecycle bean = entry.getValue()[ FD ]
Line_8 $$ int phase = getPhase(bean)-->Line_9 $$ LifecycleGroup group = phases.get(phase)[ FD ]
Line_9 $$ LifecycleGroup group = phases.get(phase)-->Line_12 $$ phases.put(phase, group)[ FD ]
Line_7 $$ if (!autoStartupOnly || (bean instanceof SmartLifecycle && ((SmartLifecycle) bean).isAutoStartup())) -->Line_8 $$ int phase = getPhase(bean)[ CD ]
Line_4 $$ Map<Integer, LifecycleGroup> phases = new HashMap<Integer, LifecycleGroup>()-->Line_17 $$ if (phases.size() > 0) [ FD ]
Line_6 $$ Lifecycle bean = entry.getValue()-->Line_14 $$ group.add(entry.getKey(), bean)[ FD ]
Line_17 $$ if (phases.size() > 0) -->Line_18 $$ List<Integer> keys = new ArrayList<Integer>(phases.keySet())[ CD ]
Line_11 $$ group = new LifecycleGroup(phase, this.timeoutPerShutdownPhase, lifecycleBeans, autoStartupOnly)-->Line_12 $$ phases.put(phase, group)[ FD ]
Line_4 $$ Map<Integer, LifecycleGroup> phases = new HashMap<Integer, LifecycleGroup>()-->Line_18 $$ List<Integer> keys = new ArrayList<Integer>(phases.keySet())[ FD ]
Line_2 $$ private void startBeans(boolean autoStartupOnly) -->Line_17 $$ if (phases.size() > 0) [ CD ]
Line_3 $$ Map<String, Lifecycle> lifecycleBeans = getLifecycleBeans()-->Line_5 $$ for (Map.Entry<String, ? extends Lifecycle> entry : lifecycleBeans.entrySet()) [ FD ]
Line_9 $$ LifecycleGroup group = phases.get(phase)-->Line_10 $$ if (group == null) [ FD ]
Line_2 $$ private void startBeans(boolean autoStartupOnly) -->Line_3 $$ Map<String, Lifecycle> lifecycleBeans = getLifecycleBeans()[ CD ]
Line_7 $$ if (!autoStartupOnly || (bean instanceof SmartLifecycle && ((SmartLifecycle) bean).isAutoStartup())) -->Line_9 $$ LifecycleGroup group = phases.get(phase)[ CD ]
Line_7 $$ if (!autoStartupOnly || (bean instanceof SmartLifecycle && ((SmartLifecycle) bean).isAutoStartup())) -->Line_10 $$ if (group == null) [ CD ]
Line_2 $$ private void startBeans(boolean autoStartupOnly) -->Line_7 $$ if (!autoStartupOnly || (bean instanceof SmartLifecycle && ((SmartLifecycle) bean).isAutoStartup())) [ FD ]
Line_18 $$ List<Integer> keys = new ArrayList<Integer>(phases.keySet())-->Line_19 $$ Collections.sort(keys)[ FD ]
Line_9 $$ LifecycleGroup group = phases.get(phase)-->Line_14 $$ group.add(entry.getKey(), bean)[ FD ]
Line_10 $$ if (group == null) -->Line_12 $$ phases.put(phase, group)[ CD ]
Line_4 $$ Map<Integer, LifecycleGroup> phases = new HashMap<Integer, LifecycleGroup>()-->Line_9 $$ LifecycleGroup group = phases.get(phase)[ FD ]
