Line_2 $$ public void testSetPropertiesMap() throws Exception -->Line_10 $$ parameters.put("count", new Integer(simple.getCount()))[ CD ]
Line_11 $$ Query q = s.createQuery("from Simple s where s.name=:name and s.count=:count")-->Line_18 $$ q = s.createQuery("from Simple s where s.name in (:several)")[ FD ]
Line_18 $$ q = s.createQuery("from Simple s where s.name in (:several)")-->Line_22 $$ q = s.createQuery("from Simple s where s.name in (:stuff)")[ FD ]
Line_11 $$ Query q = s.createQuery("from Simple s where s.name=:name and s.count=:count")-->Line_22 $$ q = s.createQuery("from Simple s where s.name in (:stuff)")[ FD ]
Line_8 $$ Map parameters = new HashMap()-->Line_23 $$ q.setProperties(parameters)[ FD ]
Line_14 $$ List l = new ArrayList()-->Line_21 $$ parameters.put("stuff", l.toArray(new String[0]))[ FD ]
Line_5 $$ Simple simple = new Simple(Long.valueOf(10))-->Line_6 $$ simple.setName("Simple 1")[ FD ]
Line_2 $$ public void testSetPropertiesMap() throws Exception -->Line_15 $$ l.add("Simple 1")[ CD ]
Line_8 $$ Map parameters = new HashMap()-->Line_21 $$ parameters.put("stuff", l.toArray(new String[0]))[ FD ]
Line_8 $$ Map parameters = new HashMap()-->Line_10 $$ parameters.put("count", new Integer(simple.getCount()))[ FD ]
Line_14 $$ List l = new ArrayList()-->Line_16 $$ l.add("Slimeball")[ FD ]
Line_3 $$ Session s = openSession()-->Line_22 $$ q = s.createQuery("from Simple s where s.name in (:stuff)")[ FD ]
Line_5 $$ Simple simple = new Simple(Long.valueOf(10))-->Line_25 $$ s.delete(simple)[ FD ]
Line_2 $$ public void testSetPropertiesMap() throws Exception -->Line_26 $$ t.commit()[ CD ]
Line_3 $$ Session s = openSession()-->Line_27 $$ s.close()[ FD ]
Line_2 $$ public void testSetPropertiesMap() throws Exception -->Line_7 $$ s.save(simple)[ CD ]
Line_2 $$ public void testSetPropertiesMap() throws Exception -->Line_6 $$ simple.setName("Simple 1")[ CD ]
Line_11 $$ Query q = s.createQuery("from Simple s where s.name=:name and s.count=:count")-->Line_13 $$ assertTrue(q.list().get(0) == simple)[ FD ]
Line_2 $$ public void testSetPropertiesMap() throws Exception -->Line_24 $$ assertTrue(q.list().get(0) == simple)[ CD ]
Line_22 $$ q = s.createQuery("from Simple s where s.name in (:stuff)")-->Line_24 $$ assertTrue(q.list().get(0) == simple)[ FD ]
Line_11 $$ Query q = s.createQuery("from Simple s where s.name=:name and s.count=:count")-->Line_12 $$ q.setProperties((parameters))[ FD ]
Line_2 $$ public void testSetPropertiesMap() throws Exception -->Line_16 $$ l.add("Slimeball")[ CD ]
Line_2 $$ public void testSetPropertiesMap() throws Exception -->Line_19 $$ q.setProperties(parameters)[ CD ]
Line_5 $$ Simple simple = new Simple(Long.valueOf(10))-->Line_7 $$ s.save(simple)[ FD ]
Line_2 $$ public void testSetPropertiesMap() throws Exception -->Line_13 $$ assertTrue(q.list().get(0) == simple)[ CD ]
Line_2 $$ public void testSetPropertiesMap() throws Exception -->Line_21 $$ parameters.put("stuff", l.toArray(new String[0]))[ CD ]
Line_2 $$ public void testSetPropertiesMap() throws Exception -->Line_11 $$ Query q = s.createQuery("from Simple s where s.name=:name and s.count=:count")[ CD ]
Line_8 $$ Map parameters = new HashMap()-->Line_17 $$ parameters.put("several", l)[ FD ]
Line_11 $$ Query q = s.createQuery("from Simple s where s.name=:name and s.count=:count")-->Line_23 $$ q.setProperties(parameters)[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_26 $$ t.commit()[ FD ]
Line_18 $$ q = s.createQuery("from Simple s where s.name in (:several)")-->Line_19 $$ q.setProperties(parameters)[ FD ]
Line_22 $$ q = s.createQuery("from Simple s where s.name in (:stuff)")-->Line_23 $$ q.setProperties(parameters)[ FD ]
Line_2 $$ public void testSetPropertiesMap() throws Exception -->Line_14 $$ List l = new ArrayList()[ CD ]
Line_2 $$ public void testSetPropertiesMap() throws Exception -->Line_4 $$ Transaction t = s.beginTransaction()[ CD ]
Line_2 $$ public void testSetPropertiesMap() throws Exception -->Line_27 $$ s.close()[ CD ]
Line_2 $$ public void testSetPropertiesMap() throws Exception -->Line_12 $$ q.setProperties((parameters))[ CD ]
Line_2 $$ public void testSetPropertiesMap() throws Exception -->Line_18 $$ q = s.createQuery("from Simple s where s.name in (:several)")[ CD ]
Line_18 $$ q = s.createQuery("from Simple s where s.name in (:several)")-->Line_20 $$ assertTrue(q.list().get(0) == simple)[ FD ]
Line_5 $$ Simple simple = new Simple(Long.valueOf(10))-->Line_10 $$ parameters.put("count", new Integer(simple.getCount()))[ FD ]
Line_8 $$ Map parameters = new HashMap()-->Line_9 $$ parameters.put("name", simple.getName())[ FD ]
Line_3 $$ Session s = openSession()-->Line_11 $$ Query q = s.createQuery("from Simple s where s.name=:name and s.count=:count")[ FD ]
Line_2 $$ public void testSetPropertiesMap() throws Exception -->Line_17 $$ parameters.put("several", l)[ CD ]
Line_18 $$ q = s.createQuery("from Simple s where s.name in (:several)")-->Line_23 $$ q.setProperties(parameters)[ FD ]
Line_14 $$ List l = new ArrayList()-->Line_15 $$ l.add("Simple 1")[ FD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ Transaction t = s.beginTransaction()[ FD ]
Line_14 $$ List l = new ArrayList()-->Line_17 $$ parameters.put("several", l)[ FD ]
Line_3 $$ Session s = openSession()-->Line_18 $$ q = s.createQuery("from Simple s where s.name in (:several)")[ FD ]
Line_11 $$ Query q = s.createQuery("from Simple s where s.name=:name and s.count=:count")-->Line_19 $$ q.setProperties(parameters)[ FD ]
Line_2 $$ public void testSetPropertiesMap() throws Exception -->Line_5 $$ Simple simple = new Simple(Long.valueOf(10))[ CD ]
Line_2 $$ public void testSetPropertiesMap() throws Exception -->Line_23 $$ q.setProperties(parameters)[ CD ]
Line_3 $$ Session s = openSession()-->Line_7 $$ s.save(simple)[ FD ]
Line_11 $$ Query q = s.createQuery("from Simple s where s.name=:name and s.count=:count")-->Line_20 $$ assertTrue(q.list().get(0) == simple)[ FD ]
Line_2 $$ public void testSetPropertiesMap() throws Exception -->Line_9 $$ parameters.put("name", simple.getName())[ CD ]
Line_8 $$ Map parameters = new HashMap()-->Line_19 $$ q.setProperties(parameters)[ FD ]
Line_2 $$ public void testSetPropertiesMap() throws Exception -->Line_22 $$ q = s.createQuery("from Simple s where s.name in (:stuff)")[ CD ]
Line_11 $$ Query q = s.createQuery("from Simple s where s.name=:name and s.count=:count")-->Line_24 $$ assertTrue(q.list().get(0) == simple)[ FD ]
Line_2 $$ public void testSetPropertiesMap() throws Exception -->Line_25 $$ s.delete(simple)[ CD ]
Line_3 $$ Session s = openSession()-->Line_25 $$ s.delete(simple)[ FD ]
Line_18 $$ q = s.createQuery("from Simple s where s.name in (:several)")-->Line_24 $$ assertTrue(q.list().get(0) == simple)[ FD ]
Line_2 $$ public void testSetPropertiesMap() throws Exception -->Line_20 $$ assertTrue(q.list().get(0) == simple)[ CD ]
Line_2 $$ public void testSetPropertiesMap() throws Exception -->Line_8 $$ Map parameters = new HashMap()[ CD ]
Line_2 $$ public void testSetPropertiesMap() throws Exception -->Line_3 $$ Session s = openSession()[ CD ]
Line_5 $$ Simple simple = new Simple(Long.valueOf(10))-->Line_9 $$ parameters.put("name", simple.getName())[ FD ]
