Line_2 $$ public void testGraph1() -->Line_7 $$ arcs.put("d", "e")[ CD ]
Line_18 $$ final Map<Chunk<String>, Set<Chunk<String>>> expectedArcs = new HashMap<Chunk<String>, Set<Chunk<String>>>()-->Line_20 $$ expectedArcs.put(BC, toSet(A))[ FD ]
Line_13 $$ Chunk<String> BC = new Chunk<String>(toSet("b", "c"))-->Line_14 $$ expectedNodes.add(BC)[ FD ]
Line_2 $$ public void testGraph1() -->Line_21 $$ expectedArcs.put(DE, toSet(BC))[ CD ]
Line_3 $$ final Map<String, String> arcs = new HashMap<String, String>()-->Line_6 $$ arcs.put("c", "bd")[ FD ]
Line_2 $$ public void testGraph1() -->Line_11 $$ Chunk<String> A = new Chunk<String>("a")[ CD ]
Line_10 $$ final List<Chunk<String>> expectedNodes = new ArrayList<Chunk<String>>()-->Line_14 $$ expectedNodes.add(BC)[ FD ]
Line_18 $$ final Map<Chunk<String>, Set<Chunk<String>>> expectedArcs = new HashMap<Chunk<String>, Set<Chunk<String>>>()-->Line_21 $$ expectedArcs.put(DE, toSet(BC))[ FD ]
Line_10 $$ final List<Chunk<String>> expectedNodes = new ArrayList<Chunk<String>>()-->Line_12 $$ expectedNodes.add(A)[ FD ]
Line_2 $$ public void testGraph1() -->Line_4 $$ arcs.put("a", "b")[ CD ]
Line_2 $$ public void testGraph1() -->Line_13 $$ Chunk<String> BC = new Chunk<String>(toSet("b", "c"))[ CD ]
Line_2 $$ public void testGraph1() -->Line_14 $$ expectedNodes.add(BC)[ CD ]
Line_2 $$ public void testGraph1() -->Line_5 $$ arcs.put("b", "c")[ CD ]
Line_13 $$ Chunk<String> BC = new Chunk<String>(toSet("b", "c"))-->Line_20 $$ expectedArcs.put(BC, toSet(A))[ FD ]
Line_3 $$ final Map<String, String> arcs = new HashMap<String, String>()-->Line_5 $$ arcs.put("b", "c")[ FD ]
Line_10 $$ final List<Chunk<String>> expectedNodes = new ArrayList<Chunk<String>>()-->Line_17 $$ checkVertices(expectedNodes, graph.getNodes().iterator())[ FD ]
Line_3 $$ final Map<String, String> arcs = new HashMap<String, String>()-->Line_7 $$ arcs.put("d", "e")[ FD ]
Line_2 $$ public void testGraph1() -->Line_22 $$ checkArcs(expectedArcs, graph)[ CD ]
Line_3 $$ final Map<String, String> arcs = new HashMap<String, String>()-->Line_8 $$ arcs.put("e", "d")[ FD ]
Line_15 $$ Chunk<String> DE = new Chunk<String>(toSet("d", "e"))-->Line_16 $$ expectedNodes.add(DE)[ FD ]
Line_2 $$ public void testGraph1() -->Line_15 $$ Chunk<String> DE = new Chunk<String>(toSet("d", "e"))[ CD ]
Line_2 $$ public void testGraph1() -->Line_16 $$ expectedNodes.add(DE)[ CD ]
Line_2 $$ public void testGraph1() -->Line_3 $$ final Map<String, String> arcs = new HashMap<String, String>()[ CD ]
Line_9 $$ final Graph<Chunk<String>> graph = getAlgorithmsInstance().computeSCCGraph(initGraph(arcs))-->Line_17 $$ checkVertices(expectedNodes, graph.getNodes().iterator())[ FD ]
Line_2 $$ public void testGraph1() -->Line_19 $$ expectedArcs.put(A, toSet())[ CD ]
Line_2 $$ public void testGraph1() -->Line_9 $$ final Graph<Chunk<String>> graph = getAlgorithmsInstance().computeSCCGraph(initGraph(arcs))[ CD ]
Line_18 $$ final Map<Chunk<String>, Set<Chunk<String>>> expectedArcs = new HashMap<Chunk<String>, Set<Chunk<String>>>()-->Line_19 $$ expectedArcs.put(A, toSet())[ FD ]
Line_15 $$ Chunk<String> DE = new Chunk<String>(toSet("d", "e"))-->Line_21 $$ expectedArcs.put(DE, toSet(BC))[ FD ]
Line_3 $$ final Map<String, String> arcs = new HashMap<String, String>()-->Line_9 $$ final Graph<Chunk<String>> graph = getAlgorithmsInstance().computeSCCGraph(initGraph(arcs))[ FD ]
Line_2 $$ public void testGraph1() -->Line_17 $$ checkVertices(expectedNodes, graph.getNodes().iterator())[ CD ]
Line_11 $$ Chunk<String> A = new Chunk<String>("a")-->Line_20 $$ expectedArcs.put(BC, toSet(A))[ FD ]
Line_2 $$ public void testGraph1() -->Line_6 $$ arcs.put("c", "bd")[ CD ]
Line_18 $$ final Map<Chunk<String>, Set<Chunk<String>>> expectedArcs = new HashMap<Chunk<String>, Set<Chunk<String>>>()-->Line_22 $$ checkArcs(expectedArcs, graph)[ FD ]
Line_10 $$ final List<Chunk<String>> expectedNodes = new ArrayList<Chunk<String>>()-->Line_16 $$ expectedNodes.add(DE)[ FD ]
Line_2 $$ public void testGraph1() -->Line_8 $$ arcs.put("e", "d")[ CD ]
Line_13 $$ Chunk<String> BC = new Chunk<String>(toSet("b", "c"))-->Line_21 $$ expectedArcs.put(DE, toSet(BC))[ FD ]
Line_11 $$ Chunk<String> A = new Chunk<String>("a")-->Line_12 $$ expectedNodes.add(A)[ FD ]
Line_9 $$ final Graph<Chunk<String>> graph = getAlgorithmsInstance().computeSCCGraph(initGraph(arcs))-->Line_22 $$ checkArcs(expectedArcs, graph)[ FD ]
Line_2 $$ public void testGraph1() -->Line_10 $$ final List<Chunk<String>> expectedNodes = new ArrayList<Chunk<String>>()[ CD ]
Line_2 $$ public void testGraph1() -->Line_20 $$ expectedArcs.put(BC, toSet(A))[ CD ]
Line_3 $$ final Map<String, String> arcs = new HashMap<String, String>()-->Line_4 $$ arcs.put("a", "b")[ FD ]
Line_2 $$ public void testGraph1() -->Line_18 $$ final Map<Chunk<String>, Set<Chunk<String>>> expectedArcs = new HashMap<Chunk<String>, Set<Chunk<String>>>()[ CD ]
Line_2 $$ public void testGraph1() -->Line_12 $$ expectedNodes.add(A)[ CD ]
Line_11 $$ Chunk<String> A = new Chunk<String>("a")-->Line_19 $$ expectedArcs.put(A, toSet())[ FD ]
