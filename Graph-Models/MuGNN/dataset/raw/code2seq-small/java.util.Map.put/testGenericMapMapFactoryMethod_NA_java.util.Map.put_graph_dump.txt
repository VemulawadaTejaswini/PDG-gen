Line_2 $$ public void testGenericMapMapFactoryMethod() throws MalformedURLException -->Line_6 $$ Map<String, String> input = new HashMap<String, String>()[ CD ]
Line_2 $$ public void testGenericMapMapFactoryMethod() throws MalformedURLException -->Line_9 $$ Map<String, String> input2 = new HashMap<String, String>()[ CD ]
Line_6 $$ Map<String, String> input = new HashMap<String, String>()-->Line_12 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(input)[ FD ]
Line_2 $$ public void testGenericMapMapFactoryMethod() throws MalformedURLException -->Line_13 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(input2)[ CD ]
Line_15 $$ GenericBean<?> gb = (GenericBean<?>) bf.getBean("genericBean")-->Line_17 $$ assertEquals("3", gb.getPlainMap().get("2"))[ FD ]
Line_15 $$ GenericBean<?> gb = (GenericBean<?>) bf.getBean("genericBean")-->Line_18 $$ assertEquals(new Integer(5), gb.getShortMap().get(new Short("4")))[ FD ]
Line_4 $$ RootBeanDefinition rbd = new RootBeanDefinition(GenericBean.class)-->Line_13 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(input2)[ FD ]
Line_2 $$ public void testGenericMapMapFactoryMethod() throws MalformedURLException -->Line_19 $$ assertEquals(new Integer(7), gb.getShortMap().get(new Short("6")))[ CD ]
Line_4 $$ RootBeanDefinition rbd = new RootBeanDefinition(GenericBean.class)-->Line_12 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(input)[ FD ]
Line_2 $$ public void testGenericMapMapFactoryMethod() throws MalformedURLException -->Line_16 $$ assertEquals("0", gb.getPlainMap().get("1"))[ CD ]
Line_9 $$ Map<String, String> input2 = new HashMap<String, String>()-->Line_10 $$ input2.put("4", "5")[ FD ]
Line_4 $$ RootBeanDefinition rbd = new RootBeanDefinition(GenericBean.class)-->Line_5 $$ rbd.setFactoryMethodName("createInstance")[ FD ]
Line_2 $$ public void testGenericMapMapFactoryMethod() throws MalformedURLException -->Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()[ CD ]
Line_2 $$ public void testGenericMapMapFactoryMethod() throws MalformedURLException -->Line_12 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(input)[ CD ]
Line_2 $$ public void testGenericMapMapFactoryMethod() throws MalformedURLException -->Line_15 $$ GenericBean<?> gb = (GenericBean<?>) bf.getBean("genericBean")[ CD ]
Line_2 $$ public void testGenericMapMapFactoryMethod() throws MalformedURLException -->Line_18 $$ assertEquals(new Integer(5), gb.getShortMap().get(new Short("4")))[ CD ]
Line_2 $$ public void testGenericMapMapFactoryMethod() throws MalformedURLException -->Line_17 $$ assertEquals("3", gb.getPlainMap().get("2"))[ CD ]
Line_2 $$ public void testGenericMapMapFactoryMethod() throws MalformedURLException -->Line_8 $$ input.put("2", "3")[ CD ]
Line_2 $$ public void testGenericMapMapFactoryMethod() throws MalformedURLException -->Line_11 $$ input2.put("6", "7")[ CD ]
Line_9 $$ Map<String, String> input2 = new HashMap<String, String>()-->Line_11 $$ input2.put("6", "7")[ FD ]
Line_2 $$ public void testGenericMapMapFactoryMethod() throws MalformedURLException -->Line_14 $$ bf.registerBeanDefinition("genericBean", rbd)[ CD ]
Line_4 $$ RootBeanDefinition rbd = new RootBeanDefinition(GenericBean.class)-->Line_14 $$ bf.registerBeanDefinition("genericBean", rbd)[ FD ]
Line_2 $$ public void testGenericMapMapFactoryMethod() throws MalformedURLException -->Line_4 $$ RootBeanDefinition rbd = new RootBeanDefinition(GenericBean.class)[ CD ]
Line_6 $$ Map<String, String> input = new HashMap<String, String>()-->Line_7 $$ input.put("1", "0")[ FD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_15 $$ GenericBean<?> gb = (GenericBean<?>) bf.getBean("genericBean")[ FD ]
Line_2 $$ public void testGenericMapMapFactoryMethod() throws MalformedURLException -->Line_10 $$ input2.put("4", "5")[ CD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_14 $$ bf.registerBeanDefinition("genericBean", rbd)[ FD ]
Line_15 $$ GenericBean<?> gb = (GenericBean<?>) bf.getBean("genericBean")-->Line_16 $$ assertEquals("0", gb.getPlainMap().get("1"))[ FD ]
Line_2 $$ public void testGenericMapMapFactoryMethod() throws MalformedURLException -->Line_5 $$ rbd.setFactoryMethodName("createInstance")[ CD ]
Line_15 $$ GenericBean<?> gb = (GenericBean<?>) bf.getBean("genericBean")-->Line_19 $$ assertEquals(new Integer(7), gb.getShortMap().get(new Short("6")))[ FD ]
Line_6 $$ Map<String, String> input = new HashMap<String, String>()-->Line_8 $$ input.put("2", "3")[ FD ]
Line_2 $$ public void testGenericMapMapFactoryMethod() throws MalformedURLException -->Line_7 $$ input.put("1", "0")[ CD ]
Line_9 $$ Map<String, String> input2 = new HashMap<String, String>()-->Line_13 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(input2)[ FD ]
