Line_2 $$ public void testNestedLongerPrefix() -->Line_8 $$ map.put("barbar", "baz")[ CD ]
Line_2 $$ public void testNestedLongerPrefix() -->Line_7 $$ map.put("foo2", "bar")[ CD ]
Line_9 $$ PropertyPlaceholder.PlaceholderResolver placeholderResolver = new SimplePlaceholderResolver(map, false, true)-->Line_10 $$ assertEquals("baz", propertyPlaceholder.replacePlaceholders("$[ FD ]
Line_2 $$ public void testNestedLongerPrefix() -->Line_4 $$ Map<String, String> map = new LinkedHashMap()[ CD ]
Line_4 $$ Map<String, String> map = new LinkedHashMap()-->Line_7 $$ map.put("foo2", "bar")[ FD ]
Line_2 $$ public void testNestedLongerPrefix() -->Line_10 $$ assertEquals("baz", propertyPlaceholder.replacePlaceholders("$[ CD ]
Line_4 $$ Map<String, String> map = new LinkedHashMap()-->Line_6 $$ map.put("foo1", "$[ FD ]
Line_2 $$ public void testNestedLongerPrefix() -->Line_3 $$ PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder("$[ CD ]
Line_4 $$ Map<String, String> map = new LinkedHashMap()-->Line_8 $$ map.put("barbar", "baz")[ FD ]
Line_3 $$ PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder("$-->Line_10 $$ assertEquals("baz", propertyPlaceholder.replacePlaceholders("$[ FD ]
Line_2 $$ public void testNestedLongerPrefix() -->Line_9 $$ PropertyPlaceholder.PlaceholderResolver placeholderResolver = new SimplePlaceholderResolver(map, false, true)[ CD ]
Line_4 $$ Map<String, String> map = new LinkedHashMap()-->Line_5 $$ map.put("foo", "$[ FD ]
Line_2 $$ public void testNestedLongerPrefix() -->Line_6 $$ map.put("foo1", "$[ CD ]
Line_2 $$ public void testNestedLongerPrefix() -->Line_5 $$ map.put("foo", "$[ CD ]
