Line_27 $$ if (!ask.remove(req)) -->Line_28 $$ foundAll = false[ CD ]
Line_26 $$ for (ResourceRequest req : reqMap.values()) -->Line_29 $$ ResourceRequest zeroedRequest = ResourceRequest.newInstance(req.getPriority(), req.getResourceName(), req.getCapability(), req.getNumContainers(), req.getRelaxLocality())[ FD ]
Line_26 $$ for (ResourceRequest req : reqMap.values()) -->Line_27 $$ if (!ask.remove(req)) [ FD ]
Line_27 $$ if (!ask.remove(req)) -->Line_29 $$ ResourceRequest zeroedRequest = ResourceRequest.newInstance(req.getPriority(), req.getResourceName(), req.getCapability(), req.getNumContainers(), req.getRelaxLocality())[ CD ]
Line_12 $$ Integer failures = nodeFailures.remove(hostName)-->Line_14 $$ failures++[ FD ]
Line_7 $$ if (LOG.isDebugEnabled()) -->Line_8 $$ LOG.debug("Host " + hostName + " is already blacklisted.")[ CD ]
Line_2 $$ protected void containerFailedOnHost(String hostName) -->Line_6 $$ if (blacklistedNodes.contains(hostName)) [ FD ]
Line_2 $$ protected void containerFailedOnHost(String hostName) -->Line_6 $$ if (blacklistedNodes.contains(hostName)) [ CD ]
Line_3 $$ if (!nodeBlacklistingEnabled) -->Line_4 $$ return[ CD ]
Line_2 $$ protected void containerFailedOnHost(String hostName) -->Line_17 $$ blacklistedNodes.add(hostName)[ FD ]
Line_12 $$ Integer failures = nodeFailures.remove(hostName)-->Line_16 $$ if (failures >= maxTaskFailuresPerNode) [ FD ]
Line_2 $$ protected void containerFailedOnHost(String hostName) -->Line_12 $$ Integer failures = nodeFailures.remove(hostName)[ FD ]
Line_29 $$ ResourceRequest zeroedRequest = ResourceRequest.newInstance(req.getPriority(), req.getResourceName(), req.getCapability(), req.getNumContainers(), req.getRelaxLocality())-->Line_31 $$ addResourceRequestToAsk(zeroedRequest)[ FD ]
Line_24 $$ Map<Resource, ResourceRequest> reqMap = remoteRequests.get(hostName)-->Line_26 $$ for (ResourceRequest req : reqMap.values()) [ FD ]
Line_34 $$ if (foundAll) -->Line_35 $$ remoteRequests.remove(hostName)[ CD ]
Line_12 $$ Integer failures = nodeFailures.remove(hostName)-->Line_40 $$ nodeFailures.put(hostName, failures)[ FD ]
Line_2 $$ protected void containerFailedOnHost(String hostName) -->Line_15 $$ LOG.info(failures + " failures on node " + hostName)[ CD ]
Line_22 $$ for (Map<String, Map<Resource, ResourceRequest>> remoteRequests : remoteRequestsTable.values()) -->Line_35 $$ remoteRequests.remove(hostName)[ FD ]
Line_13 $$ failures = failures == null ? Integer.valueOf(0) : failures-->Line_40 $$ nodeFailures.put(hostName, failures)[ FD ]
Line_12 $$ Integer failures = nodeFailures.remove(hostName)-->Line_13 $$ failures = failures == null ? Integer.valueOf(0) : failures[ FD ]
Line_2 $$ protected void containerFailedOnHost(String hostName) -->Line_12 $$ Integer failures = nodeFailures.remove(hostName)[ CD ]
Line_13 $$ failures = failures == null ? Integer.valueOf(0) : failures-->Line_16 $$ if (failures >= maxTaskFailuresPerNode) [ FD ]
Line_27 $$ if (!ask.remove(req)) -->Line_30 $$ zeroedRequest.setNumContainers(0)[ CD ]
Line_29 $$ ResourceRequest zeroedRequest = ResourceRequest.newInstance(req.getPriority(), req.getResourceName(), req.getCapability(), req.getNumContainers(), req.getRelaxLocality())-->Line_30 $$ zeroedRequest.setNumContainers(0)[ FD ]
Line_2 $$ protected void containerFailedOnHost(String hostName) -->Line_13 $$ failures = failures == null ? Integer.valueOf(0) : failures[ CD ]
Line_2 $$ protected void containerFailedOnHost(String hostName) -->Line_24 $$ Map<Resource, ResourceRequest> reqMap = remoteRequests.get(hostName)[ FD ]
Line_16 $$ if (failures >= maxTaskFailuresPerNode) -->Line_17 $$ blacklistedNodes.add(hostName)[ CD ]
Line_25 $$ if (reqMap != null) -->Line_34 $$ if (foundAll) [ CD ]
Line_2 $$ protected void containerFailedOnHost(String hostName) -->Line_3 $$ if (!nodeBlacklistingEnabled) [ CD ]
Line_16 $$ if (failures >= maxTaskFailuresPerNode) -->Line_40 $$ nodeFailures.put(hostName, failures)[ CD ]
Line_18 $$ if (!ignoreBlacklisting.get()) -->Line_19 $$ blacklistAdditions.add(hostName)[ CD ]
Line_2 $$ protected void containerFailedOnHost(String hostName) -->Line_16 $$ if (failures >= maxTaskFailuresPerNode) [ CD ]
Line_2 $$ protected void containerFailedOnHost(String hostName) -->Line_19 $$ blacklistAdditions.add(hostName)[ FD ]
Line_22 $$ for (Map<String, Map<Resource, ResourceRequest>> remoteRequests : remoteRequestsTable.values()) -->Line_24 $$ Map<Resource, ResourceRequest> reqMap = remoteRequests.get(hostName)[ FD ]
Line_2 $$ protected void containerFailedOnHost(String hostName) -->Line_40 $$ nodeFailures.put(hostName, failures)[ FD ]
Line_24 $$ Map<Resource, ResourceRequest> reqMap = remoteRequests.get(hostName)-->Line_25 $$ if (reqMap != null) [ FD ]
Line_27 $$ if (!ask.remove(req)) -->Line_31 $$ addResourceRequestToAsk(zeroedRequest)[ CD ]
Line_16 $$ if (failures >= maxTaskFailuresPerNode) -->Line_18 $$ if (!ignoreBlacklisting.get()) [ CD ]
Line_23 $$ boolean foundAll = true-->Line_28 $$ foundAll = false[ FD ]
Line_6 $$ if (blacklistedNodes.contains(hostName)) -->Line_7 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_16 $$ if (failures >= maxTaskFailuresPerNode) -->Line_21 $$ LOG.info("Blacklisted host " + hostName)[ CD ]
Line_6 $$ if (blacklistedNodes.contains(hostName)) -->Line_10 $$ return[ CD ]
Line_2 $$ protected void containerFailedOnHost(String hostName) -->Line_14 $$ failures++[ CD ]
Line_2 $$ protected void containerFailedOnHost(String hostName) -->Line_35 $$ remoteRequests.remove(hostName)[ FD ]
Line_13 $$ failures = failures == null ? Integer.valueOf(0) : failures-->Line_14 $$ failures++[ FD ]
