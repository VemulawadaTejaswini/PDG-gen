Line_2 $$ synchronized COMMIT_STATUS checkCommitInternal(long commitOffset, Channel channel, int xid, Nfs3FileAttributes preOpAttr, boolean fromRead) -->Line_3 $$ if (!activeState) [ CD ]
Line_15 $$ if (aixCompatMode) -->Line_20 $$ if (commitOffset > flushed) [ CD ]
Line_2 $$ synchronized COMMIT_STATUS checkCommitInternal(long commitOffset, Channel channel, int xid, Nfs3FileAttributes preOpAttr, boolean fromRead) -->Line_11 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_2 $$ synchronized COMMIT_STATUS checkCommitInternal(long commitOffset, Channel channel, int xid, Nfs3FileAttributes preOpAttr, boolean fromRead) -->Line_35 $$ if (!fromRead) [ FD ]
Line_2 $$ synchronized COMMIT_STATUS checkCommitInternal(long commitOffset, Channel channel, int xid, Nfs3FileAttributes preOpAttr, boolean fromRead) -->Line_32 $$ if (pendingWrites.isEmpty()) [ CD ]
Line_15 $$ if (aixCompatMode) -->Line_16 $$ if (commitOffset <= flushed) [ CD ]
Line_4 $$ if (pendingWrites.isEmpty()) -->Line_7 $$ return COMMIT_STATUS.COMMIT_INACTIVE_WITH_PENDING_WRITE[ CD ]
Line_2 $$ synchronized COMMIT_STATUS checkCommitInternal(long commitOffset, Channel channel, int xid, Nfs3FileAttributes preOpAttr, boolean fromRead) -->Line_21 $$ if (!fromRead) [ FD ]
Line_22 $$ CommitCtx commitCtx = new CommitCtx(commitOffset, channel, xid, preOpAttr)-->Line_23 $$ pendingCommits.put(commitOffset, commitCtx)[ FD ]
Line_32 $$ if (pendingWrites.isEmpty()) -->Line_35 $$ if (!fromRead) [ CD ]
Line_36 $$ long maxOffset = key.getKey().getMax() - 1-->Line_39 $$ pendingCommits.put(maxOffset, commitCtx)[ FD ]
Line_2 $$ synchronized COMMIT_STATUS checkCommitInternal(long commitOffset, Channel channel, int xid, Nfs3FileAttributes preOpAttr, boolean fromRead) -->Line_20 $$ if (commitOffset > flushed) [ FD ]
Line_2 $$ synchronized COMMIT_STATUS checkCommitInternal(long commitOffset, Channel channel, int xid, Nfs3FileAttributes preOpAttr, boolean fromRead) -->Line_14 $$ if (commitOffset > 0) [ CD ]
Line_2 $$ synchronized COMMIT_STATUS checkCommitInternal(long commitOffset, Channel channel, int xid, Nfs3FileAttributes preOpAttr, boolean fromRead) -->Line_16 $$ if (commitOffset <= flushed) [ FD ]
Line_20 $$ if (commitOffset > flushed) -->Line_27 $$ return COMMIT_STATUS.COMMIT_DO_SYNC[ CD ]
Line_11 $$ if (LOG.isDebugEnabled()) -->Line_12 $$ LOG.debug("getFlushedOffset=" + flushed + " commitOffset=" + commitOffset)[ CD ]
Line_32 $$ if (pendingWrites.isEmpty()) -->Line_33 $$ return COMMIT_STATUS.COMMIT_FINISHED[ CD ]
Line_2 $$ synchronized COMMIT_STATUS checkCommitInternal(long commitOffset, Channel channel, int xid, Nfs3FileAttributes preOpAttr, boolean fromRead) -->Line_23 $$ pendingCommits.put(commitOffset, commitCtx)[ FD ]
Line_20 $$ if (commitOffset > flushed) -->Line_21 $$ if (!fromRead) [ CD ]
Line_20 $$ if (commitOffset > flushed) -->Line_25 $$ return COMMIT_STATUS.COMMIT_WAIT[ CD ]
Line_32 $$ if (pendingWrites.isEmpty()) -->Line_41 $$ return COMMIT_STATUS.COMMIT_WAIT[ CD ]
Line_22 $$ CommitCtx commitCtx = new CommitCtx(commitOffset, channel, xid, preOpAttr)-->Line_39 $$ pendingCommits.put(maxOffset, commitCtx)[ FD ]
Line_2 $$ synchronized COMMIT_STATUS checkCommitInternal(long commitOffset, Channel channel, int xid, Nfs3FileAttributes preOpAttr, boolean fromRead) -->Line_14 $$ if (commitOffset > 0) [ FD ]
Line_4 $$ if (pendingWrites.isEmpty()) -->Line_5 $$ return COMMIT_STATUS.COMMIT_INACTIVE_CTX[ CD ]
Line_21 $$ if (!fromRead) -->Line_23 $$ pendingCommits.put(commitOffset, commitCtx)[ CD ]
Line_35 $$ if (!fromRead) -->Line_36 $$ long maxOffset = key.getKey().getMax() - 1[ CD ]
Line_2 $$ synchronized COMMIT_STATUS checkCommitInternal(long commitOffset, Channel channel, int xid, Nfs3FileAttributes preOpAttr, boolean fromRead) -->Line_10 $$ long flushed = getFlushedOffset()[ CD ]
Line_35 $$ if (!fromRead) -->Line_37 $$ Preconditions.checkState(maxOffset > 0)[ CD ]
Line_35 $$ if (!fromRead) -->Line_39 $$ pendingCommits.put(maxOffset, commitCtx)[ CD ]
Line_10 $$ long flushed = getFlushedOffset()-->Line_16 $$ if (commitOffset <= flushed) [ FD ]
Line_14 $$ if (commitOffset > 0) -->Line_15 $$ if (aixCompatMode) [ CD ]
Line_16 $$ if (commitOffset <= flushed) -->Line_17 $$ return COMMIT_STATUS.COMMIT_DO_SYNC[ CD ]
Line_3 $$ if (!activeState) -->Line_4 $$ if (pendingWrites.isEmpty()) [ CD ]
Line_10 $$ long flushed = getFlushedOffset()-->Line_20 $$ if (commitOffset > flushed) [ FD ]
Line_2 $$ synchronized COMMIT_STATUS checkCommitInternal(long commitOffset, Channel channel, int xid, Nfs3FileAttributes preOpAttr, boolean fromRead) -->Line_31 $$ Entry<OffsetRange, WriteCtx> key = pendingWrites.firstEntry()[ CD ]
Line_31 $$ Entry<OffsetRange, WriteCtx> key = pendingWrites.firstEntry()-->Line_36 $$ long maxOffset = key.getKey().getMax() - 1[ FD ]
Line_21 $$ if (!fromRead) -->Line_22 $$ CommitCtx commitCtx = new CommitCtx(commitOffset, channel, xid, preOpAttr)[ CD ]
