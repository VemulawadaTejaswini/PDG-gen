Line_25 $$ for (AbstractTestProxy child : node.getChildren()) -->Line_33 $$ processNode(child, filter)[ FD ]
Line_11 $$ String locationUrl = node.getLocationUrl()-->Line_12 $$ if (locationUrl != null) [ FD ]
Line_4 $$ Map<String, String> attrs = new HashMap<String, String>()-->Line_22 $$ startElement(elemName, attrs)[ FD ]
Line_21 $$ started = true-->Line_30 $$ started = true[ FD ]
Line_4 $$ Map<String, String> attrs = new HashMap<String, String>()-->Line_9 $$ attrs.put(ATTR_DURATION, String.valueOf(duration))[ FD ]
Line_7 $$ Long duration = node.getDuration()-->Line_9 $$ attrs.put(ATTR_DURATION, String.valueOf(duration))[ FD ]
Line_2 $$ private void processNode(AbstractTestProxy node, final Filter filter) throws SAXException -->Line_19 $$ String elemName = node.isLeaf() ? ELEM_TEST : ELEM_SUITE[ CD ]
Line_25 $$ for (AbstractTestProxy child : node.getChildren()) -->Line_26 $$ if (myHidePassedConfig && child.isConfig() && child.isPassed()) [ FD ]
Line_19 $$ String elemName = node.isLeaf() ? ELEM_TEST : ELEM_SUITE-->Line_31 $$ startElement(elemName, attrs)[ FD ]
Line_12 $$ if (locationUrl != null) -->Line_13 $$ attrs.put(ATTR_LOCATION, locationUrl)[ CD ]
Line_2 $$ private void processNode(AbstractTestProxy node, final Filter filter) throws SAXException -->Line_4 $$ Map<String, String> attrs = new HashMap<String, String>()[ CD ]
Line_2 $$ private void processNode(AbstractTestProxy node, final Filter filter) throws SAXException -->Line_23 $$ writeOutput(node, filter)[ FD ]
Line_20 $$ if (node.isLeaf()) -->Line_22 $$ startElement(elemName, attrs)[ CD ]
Line_18 $$ boolean started = false-->Line_29 $$ if (!started) [ FD ]
Line_18 $$ boolean started = false-->Line_21 $$ started = true[ FD ]
Line_29 $$ if (!started) -->Line_31 $$ startElement(elemName, attrs)[ CD ]
Line_18 $$ boolean started = false-->Line_30 $$ started = true[ FD ]
Line_2 $$ private void processNode(AbstractTestProxy node, final Filter filter) throws SAXException -->Line_5 $$ attrs.put(ATTR_NAME, node.getName())[ CD ]
Line_2 $$ private void processNode(AbstractTestProxy node, final Filter filter) throws SAXException -->Line_12 $$ if (locationUrl != null) [ CD ]
Line_2 $$ private void processNode(AbstractTestProxy node, final Filter filter) throws SAXException -->Line_36 $$ if (started) [ CD ]
Line_2 $$ private void processNode(AbstractTestProxy node, final Filter filter) throws SAXException -->Line_18 $$ boolean started = false[ CD ]
Line_2 $$ private void processNode(AbstractTestProxy node, final Filter filter) throws SAXException -->Line_15 $$ if (node.isConfig()) [ FD ]
Line_2 $$ private void processNode(AbstractTestProxy node, final Filter filter) throws SAXException -->Line_5 $$ attrs.put(ATTR_NAME, node.getName())[ FD ]
Line_11 $$ String locationUrl = node.getLocationUrl()-->Line_13 $$ attrs.put(ATTR_LOCATION, locationUrl)[ FD ]
Line_4 $$ Map<String, String> attrs = new HashMap<String, String>()-->Line_6 $$ attrs.put(ATTR_STATUS, getStatusString(node))[ FD ]
Line_2 $$ private void processNode(AbstractTestProxy node, final Filter filter) throws SAXException -->Line_33 $$ processNode(child, filter)[ FD ]
Line_4 $$ Map<String, String> attrs = new HashMap<String, String>()-->Line_5 $$ attrs.put(ATTR_NAME, node.getName())[ FD ]
Line_2 $$ private void processNode(AbstractTestProxy node, final Filter filter) throws SAXException -->Line_15 $$ if (node.isConfig()) [ CD ]
Line_21 $$ started = true-->Line_29 $$ if (!started) [ FD ]
Line_2 $$ private void processNode(AbstractTestProxy node, final Filter filter) throws SAXException -->Line_20 $$ if (node.isLeaf()) [ CD ]
Line_2 $$ private void processNode(AbstractTestProxy node, final Filter filter) throws SAXException -->Line_11 $$ String locationUrl = node.getLocationUrl()[ FD ]
Line_2 $$ private void processNode(AbstractTestProxy node, final Filter filter) throws SAXException -->Line_25 $$ for (AbstractTestProxy child : node.getChildren()) [ FD ]
Line_36 $$ if (started) -->Line_37 $$ endElement(elemName)[ CD ]
Line_4 $$ Map<String, String> attrs = new HashMap<String, String>()-->Line_13 $$ attrs.put(ATTR_LOCATION, locationUrl)[ FD ]
Line_15 $$ if (node.isConfig()) -->Line_16 $$ attrs.put(ATTR_CONFIG, "true")[ CD ]
Line_2 $$ private void processNode(AbstractTestProxy node, final Filter filter) throws SAXException -->Line_19 $$ String elemName = node.isLeaf() ? ELEM_TEST : ELEM_SUITE[ FD ]
Line_2 $$ private void processNode(AbstractTestProxy node, final Filter filter) throws SAXException -->Line_6 $$ attrs.put(ATTR_STATUS, getStatusString(node))[ FD ]
Line_20 $$ if (node.isLeaf()) -->Line_23 $$ writeOutput(node, filter)[ CD ]
Line_2 $$ private void processNode(AbstractTestProxy node, final Filter filter) throws SAXException -->Line_6 $$ attrs.put(ATTR_STATUS, getStatusString(node))[ CD ]
Line_19 $$ String elemName = node.isLeaf() ? ELEM_TEST : ELEM_SUITE-->Line_37 $$ endElement(elemName)[ FD ]
Line_4 $$ Map<String, String> attrs = new HashMap<String, String>()-->Line_16 $$ attrs.put(ATTR_CONFIG, "true")[ FD ]
Line_2 $$ private void processNode(AbstractTestProxy node, final Filter filter) throws SAXException -->Line_8 $$ if (duration != null) [ CD ]
Line_2 $$ private void processNode(AbstractTestProxy node, final Filter filter) throws SAXException -->Line_3 $$ ProgressManager.checkCanceled()[ CD ]
Line_8 $$ if (duration != null) -->Line_9 $$ attrs.put(ATTR_DURATION, String.valueOf(duration))[ CD ]
Line_2 $$ private void processNode(AbstractTestProxy node, final Filter filter) throws SAXException -->Line_7 $$ Long duration = node.getDuration()[ CD ]
Line_7 $$ Long duration = node.getDuration()-->Line_8 $$ if (duration != null) [ FD ]
Line_20 $$ if (node.isLeaf()) -->Line_21 $$ started = true[ CD ]
Line_19 $$ String elemName = node.isLeaf() ? ELEM_TEST : ELEM_SUITE-->Line_22 $$ startElement(elemName, attrs)[ FD ]
Line_29 $$ if (!started) -->Line_30 $$ started = true[ CD ]
Line_2 $$ private void processNode(AbstractTestProxy node, final Filter filter) throws SAXException -->Line_11 $$ String locationUrl = node.getLocationUrl()[ CD ]
Line_2 $$ private void processNode(AbstractTestProxy node, final Filter filter) throws SAXException -->Line_7 $$ Long duration = node.getDuration()[ FD ]
Line_2 $$ private void processNode(AbstractTestProxy node, final Filter filter) throws SAXException -->Line_20 $$ if (node.isLeaf()) [ FD ]
Line_4 $$ Map<String, String> attrs = new HashMap<String, String>()-->Line_31 $$ startElement(elemName, attrs)[ FD ]
