Line_10 $$ if (failure != null) -->Line_14 $$ ComparisonFailureData.registerSMAttributes(notification, trace, failure.getMessage(), attrs, ex)[ CD ]
Line_6 $$ if (duration > 0) -->Line_7 $$ attrs.put("duration", Long.toString(duration))[ CD ]
Line_3 $$ final Map attrs = new HashMap()-->Line_4 $$ attrs.put("name", methodName)[ FD ]
Line_2 $$ private void testFailure(Failure failure, String messageName, String methodName) -->Line_11 $$ final String trace = getTrace(failure)[ FD ]
Line_11 $$ final String trace = getTrace(failure)-->Line_14 $$ ComparisonFailureData.registerSMAttributes(notification, trace, failure.getMessage(), attrs, ex)[ FD ]
Line_2 $$ private void testFailure(Failure failure, String messageName, String methodName) -->Line_6 $$ if (duration > 0) [ CD ]
Line_2 $$ private void testFailure(Failure failure, String messageName, String methodName) -->Line_22 $$ myPrintStream.println("\n" + MapSerializerUtil.asString(messageName, attrs))[ FD ]
Line_13 $$ final ComparisonFailureData notification = createExceptionNotification(ex)-->Line_14 $$ ComparisonFailureData.registerSMAttributes(notification, trace, failure.getMessage(), attrs, ex)[ FD ]
Line_3 $$ final Map attrs = new HashMap()-->Line_14 $$ ComparisonFailureData.registerSMAttributes(notification, trace, failure.getMessage(), attrs, ex)[ FD ]
Line_3 $$ final Map attrs = new HashMap()-->Line_20 $$ ComparisonFailureData.registerSMAttributes(null, stringWriter.toString(), e.getMessage(), attrs, e)[ FD ]
Line_2 $$ private void testFailure(Failure failure, String messageName, String methodName) -->Line_4 $$ attrs.put("name", methodName)[ FD ]
Line_2 $$ private void testFailure(Failure failure, String messageName, String methodName) -->Line_3 $$ final Map attrs = new HashMap()[ CD ]
Line_17 $$ final StringWriter stringWriter = new StringWriter()-->Line_20 $$ ComparisonFailureData.registerSMAttributes(null, stringWriter.toString(), e.getMessage(), attrs, e)[ FD ]
Line_5 $$ final long duration = currentTime() - myCurrentTestStart-->Line_7 $$ attrs.put("duration", Long.toString(duration))[ FD ]
Line_5 $$ final long duration = currentTime() - myCurrentTestStart-->Line_6 $$ if (duration > 0) [ FD ]
Line_10 $$ if (failure != null) -->Line_12 $$ final Throwable ex = failure.getException()[ CD ]
Line_2 $$ private void testFailure(Failure failure, String messageName, String methodName) -->Line_14 $$ ComparisonFailureData.registerSMAttributes(notification, trace, failure.getMessage(), attrs, ex)[ FD ]
Line_10 $$ if (failure != null) -->Line_13 $$ final ComparisonFailureData notification = createExceptionNotification(ex)[ CD ]
Line_3 $$ final Map attrs = new HashMap()-->Line_7 $$ attrs.put("duration", Long.toString(duration))[ FD ]
Line_12 $$ final Throwable ex = failure.getException()-->Line_14 $$ ComparisonFailureData.registerSMAttributes(notification, trace, failure.getMessage(), attrs, ex)[ FD ]
Line_10 $$ if (failure != null) -->Line_11 $$ final String trace = getTrace(failure)[ CD ]
Line_2 $$ private void testFailure(Failure failure, String messageName, String methodName) -->Line_4 $$ attrs.put("name", methodName)[ CD ]
Line_3 $$ final Map attrs = new HashMap()-->Line_22 $$ myPrintStream.println("\n" + MapSerializerUtil.asString(messageName, attrs))[ FD ]
Line_2 $$ private void testFailure(Failure failure, String messageName, String methodName) -->Line_5 $$ final long duration = currentTime() - myCurrentTestStart[ CD ]
Line_2 $$ private void testFailure(Failure failure, String messageName, String methodName) -->Line_10 $$ if (failure != null) [ FD ]
Line_2 $$ private void testFailure(Failure failure, String messageName, String methodName) -->Line_12 $$ final Throwable ex = failure.getException()[ FD ]
Line_12 $$ final Throwable ex = failure.getException()-->Line_13 $$ final ComparisonFailureData notification = createExceptionNotification(ex)[ FD ]
Line_18 $$ final PrintWriter writer = new PrintWriter(stringWriter)-->Line_19 $$ e.printStackTrace(writer)[ FD ]
