Line_32 $$ final Test testTask = (Test) project.getTasks().getByName(JavaPlugin.TEST_TASK_NAME)-->Line_41 $$ JacocoTaskExtension jacocoTaskExtension = testTask.getExtensions().getByType(JacocoTaskExtension.class)[ FD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_7 $$ properties.put("sonar.dynamicAnalysis", "reuseReports")[ FD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_21 $$ project.getPlugins().withType(JavaPlugin.class, new Action<JavaPlugin>() [ FD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_21 $$ project.getPlugins().withType(JavaPlugin.class, new Action<JavaPlugin>() [ CD ]
Line_21 $$ project.getPlugins().withType(JavaPlugin.class, new Action<JavaPlugin>() -->Line_33 $$ if (sourceDirectories != null || testDirectories != null) [ CD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_17 $$ properties.put("sonar.java.source", javaPluginConvention.getSourceCompatibility())[ FD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_32 $$ final Test testTask = (Test) project.getTasks().getByName(JavaPlugin.TEST_TASK_NAME)[ FD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_5 $$ properties.put("sonar.projectVersion", project.getVersion())[ CD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_7 $$ properties.put("sonar.dynamicAnalysis", "reuseReports")[ CD ]
Line_21 $$ project.getPlugins().withType(JavaPlugin.class, new Action<JavaPlugin>() -->Line_32 $$ final Test testTask = (Test) project.getTasks().getByName(JavaPlugin.TEST_TASK_NAME)[ CD ]
Line_21 $$ project.getPlugins().withType(JavaPlugin.class, new Action<JavaPlugin>() -->Line_30 $$ properties.put("sonar.binaries", nonEmptyOrNull(Iterables.filter(main.getRuntimeClasspath(), IS_DIRECTORY)))[ CD ]
Line_42 $$ File destinationFile = jacocoTaskExtension.getDestinationFile()-->Line_43 $$ if (destinationFile.exists()) [ FD ]
Line_39 $$ project.getPlugins().withType(JacocoPlugin.class, new Action<JacocoPlugin>() -->Line_41 $$ JacocoTaskExtension jacocoTaskExtension = testTask.getExtensions().getByType(JacocoTaskExtension.class)[ CD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_14 $$ project.getPlugins().withType(JavaBasePlugin.class, new Action<JavaBasePlugin>() [ FD ]
Line_32 $$ final Test testTask = (Test) project.getTasks().getByName(JavaPlugin.TEST_TASK_NAME)-->Line_34 $$ File testResultsDir = testTask.getReports().getJunitXml().getDestination()[ FD ]
Line_41 $$ JacocoTaskExtension jacocoTaskExtension = testTask.getExtensions().getByType(JacocoTaskExtension.class)-->Line_42 $$ File destinationFile = jacocoTaskExtension.getDestinationFile()[ FD ]
Line_24 $$ SourceSet main = javaPluginConvention.getSourceSets().getAt("main")-->Line_25 $$ List<File> sourceDirectories = nonEmptyOrNull(Iterables.filter(main.getAllSource().getSrcDirs(), FILE_EXISTS))[ FD ]
Line_8 $$ if (project.equals(targetProject)) -->Line_11 $$ properties.put("sonar.environment.information.version", project.getGradle().getGradleVersion())[ CD ]
Line_39 $$ project.getPlugins().withType(JacocoPlugin.class, new Action<JacocoPlugin>() -->Line_43 $$ if (destinationFile.exists()) [ CD ]
Line_23 $$ JavaPluginConvention javaPluginConvention = new DslObject(project).getConvention().getPlugin(JavaPluginConvention.class)-->Line_27 $$ SourceSet test = javaPluginConvention.getSourceSets().getAt("test")[ FD ]
Line_14 $$ project.getPlugins().withType(JavaBasePlugin.class, new Action<JavaBasePlugin>() -->Line_18 $$ properties.put("sonar.java.target", javaPluginConvention.getTargetCompatibility())[ CD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_39 $$ project.getPlugins().withType(JacocoPlugin.class, new Action<JacocoPlugin>() [ FD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_51 $$ properties.put("sonar.sources", "")[ FD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_8 $$ if (project.equals(targetProject)) [ CD ]
Line_43 $$ if (destinationFile.exists()) -->Line_44 $$ properties.put("sonar.jacoco.reportPath", destinationFile)[ CD ]
Line_21 $$ project.getPlugins().withType(JavaPlugin.class, new Action<JavaPlugin>() -->Line_29 $$ properties.put("sonar.tests", testDirectories)[ CD ]
Line_21 $$ project.getPlugins().withType(JavaPlugin.class, new Action<JavaPlugin>() -->Line_26 $$ properties.put("sonar.sources", sourceDirectories)[ CD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_4 $$ properties.put("sonar.projectDescription", project.getDescription())[ FD ]
Line_21 $$ project.getPlugins().withType(JavaPlugin.class, new Action<JavaPlugin>() -->Line_27 $$ SourceSet test = javaPluginConvention.getSourceSets().getAt("test")[ CD ]
Line_34 $$ File testResultsDir = testTask.getReports().getJunitXml().getDestination()-->Line_35 $$ testResultsDir.mkdirs()[ FD ]
Line_25 $$ List<File> sourceDirectories = nonEmptyOrNull(Iterables.filter(main.getAllSource().getSrcDirs(), FILE_EXISTS))-->Line_26 $$ properties.put("sonar.sources", sourceDirectories)[ FD ]
Line_8 $$ if (project.equals(targetProject)) -->Line_9 $$ properties.put("sonar.projectKey", getProjectKey(project))[ CD ]
Line_16 $$ JavaPluginConvention javaPluginConvention = new DslObject(project).getConvention().getPlugin(JavaPluginConvention.class)-->Line_24 $$ SourceSet main = javaPluginConvention.getSourceSets().getAt("main")[ FD ]
Line_14 $$ project.getPlugins().withType(JavaBasePlugin.class, new Action<JavaBasePlugin>() -->Line_17 $$ properties.put("sonar.java.source", javaPluginConvention.getSourceCompatibility())[ CD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_6 $$ properties.put("sonar.projectBaseDir", project.getProjectDir())[ FD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_5 $$ properties.put("sonar.projectVersion", project.getVersion())[ FD ]
Line_21 $$ project.getPlugins().withType(JavaPlugin.class, new Action<JavaPlugin>() -->Line_39 $$ project.getPlugins().withType(JacocoPlugin.class, new Action<JacocoPlugin>() [ CD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_18 $$ properties.put("sonar.java.target", javaPluginConvention.getTargetCompatibility())[ FD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_50 $$ if (properties.get("sonar.sources") == null) [ CD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_26 $$ properties.put("sonar.sources", sourceDirectories)[ FD ]
Line_33 $$ if (sourceDirectories != null || testDirectories != null) -->Line_36 $$ properties.put("sonar.surefire.reportsPath", testResultsDir)[ CD ]
Line_16 $$ JavaPluginConvention javaPluginConvention = new DslObject(project).getConvention().getPlugin(JavaPluginConvention.class)-->Line_18 $$ properties.put("sonar.java.target", javaPluginConvention.getTargetCompatibility())[ FD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_10 $$ properties.put("sonar.environment.information.key", "Gradle")[ FD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_31 $$ properties.put("sonar.libraries", getLibraries(main))[ FD ]
Line_21 $$ project.getPlugins().withType(JavaPlugin.class, new Action<JavaPlugin>() -->Line_28 $$ List<File> testDirectories = nonEmptyOrNull(Iterables.filter(test.getAllSource().getSrcDirs(), FILE_EXISTS))[ CD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_6 $$ properties.put("sonar.projectBaseDir", project.getProjectDir())[ CD ]
Line_21 $$ project.getPlugins().withType(JavaPlugin.class, new Action<JavaPlugin>() -->Line_31 $$ properties.put("sonar.libraries", getLibraries(main))[ CD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_36 $$ properties.put("sonar.surefire.reportsPath", testResultsDir)[ FD ]
Line_21 $$ project.getPlugins().withType(JavaPlugin.class, new Action<JavaPlugin>() -->Line_25 $$ List<File> sourceDirectories = nonEmptyOrNull(Iterables.filter(main.getAllSource().getSrcDirs(), FILE_EXISTS))[ CD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_11 $$ properties.put("sonar.environment.information.version", project.getGradle().getGradleVersion())[ FD ]
Line_21 $$ project.getPlugins().withType(JavaPlugin.class, new Action<JavaPlugin>() -->Line_24 $$ SourceSet main = javaPluginConvention.getSourceSets().getAt("main")[ CD ]
Line_28 $$ List<File> testDirectories = nonEmptyOrNull(Iterables.filter(test.getAllSource().getSrcDirs(), FILE_EXISTS))-->Line_29 $$ properties.put("sonar.tests", testDirectories)[ FD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_37 $$ properties.put("sonar.junit.reportsPath", testResultsDir)[ FD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_3 $$ properties.put("sonar.projectName", project.getName())[ CD ]
Line_50 $$ if (properties.get("sonar.sources") == null) -->Line_51 $$ properties.put("sonar.sources", "")[ CD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_9 $$ properties.put("sonar.projectKey", getProjectKey(project))[ FD ]
Line_24 $$ SourceSet main = javaPluginConvention.getSourceSets().getAt("main")-->Line_31 $$ properties.put("sonar.libraries", getLibraries(main))[ FD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_29 $$ properties.put("sonar.tests", testDirectories)[ FD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_3 $$ properties.put("sonar.projectName", project.getName())[ FD ]
Line_8 $$ if (project.equals(targetProject)) -->Line_10 $$ properties.put("sonar.environment.information.key", "Gradle")[ CD ]
Line_14 $$ project.getPlugins().withType(JavaBasePlugin.class, new Action<JavaBasePlugin>() -->Line_16 $$ JavaPluginConvention javaPluginConvention = new DslObject(project).getConvention().getPlugin(JavaPluginConvention.class)[ CD ]
Line_24 $$ SourceSet main = javaPluginConvention.getSourceSets().getAt("main")-->Line_30 $$ properties.put("sonar.binaries", nonEmptyOrNull(Iterables.filter(main.getRuntimeClasspath(), IS_DIRECTORY)))[ FD ]
Line_39 $$ project.getPlugins().withType(JacocoPlugin.class, new Action<JacocoPlugin>() -->Line_42 $$ File destinationFile = jacocoTaskExtension.getDestinationFile()[ CD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_30 $$ properties.put("sonar.binaries", nonEmptyOrNull(Iterables.filter(main.getRuntimeClasspath(), IS_DIRECTORY)))[ FD ]
Line_33 $$ if (sourceDirectories != null || testDirectories != null) -->Line_34 $$ File testResultsDir = testTask.getReports().getJunitXml().getDestination()[ CD ]
Line_16 $$ JavaPluginConvention javaPluginConvention = new DslObject(project).getConvention().getPlugin(JavaPluginConvention.class)-->Line_27 $$ SourceSet test = javaPluginConvention.getSourceSets().getAt("test")[ FD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_50 $$ if (properties.get("sonar.sources") == null) [ FD ]
Line_16 $$ JavaPluginConvention javaPluginConvention = new DslObject(project).getConvention().getPlugin(JavaPluginConvention.class)-->Line_17 $$ properties.put("sonar.java.source", javaPluginConvention.getSourceCompatibility())[ FD ]
Line_23 $$ JavaPluginConvention javaPluginConvention = new DslObject(project).getConvention().getPlugin(JavaPluginConvention.class)-->Line_24 $$ SourceSet main = javaPluginConvention.getSourceSets().getAt("main")[ FD ]
Line_33 $$ if (sourceDirectories != null || testDirectories != null) -->Line_35 $$ testResultsDir.mkdirs()[ CD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_8 $$ if (project.equals(targetProject)) [ FD ]
Line_33 $$ if (sourceDirectories != null || testDirectories != null) -->Line_37 $$ properties.put("sonar.junit.reportsPath", testResultsDir)[ CD ]
Line_27 $$ SourceSet test = javaPluginConvention.getSourceSets().getAt("test")-->Line_28 $$ List<File> testDirectories = nonEmptyOrNull(Iterables.filter(test.getAllSource().getSrcDirs(), FILE_EXISTS))[ FD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_4 $$ properties.put("sonar.projectDescription", project.getDescription())[ CD ]
Line_21 $$ project.getPlugins().withType(JavaPlugin.class, new Action<JavaPlugin>() -->Line_23 $$ JavaPluginConvention javaPluginConvention = new DslObject(project).getConvention().getPlugin(JavaPluginConvention.class)[ CD ]
Line_34 $$ File testResultsDir = testTask.getReports().getJunitXml().getDestination()-->Line_36 $$ properties.put("sonar.surefire.reportsPath", testResultsDir)[ FD ]
Line_8 $$ if (project.equals(targetProject)) -->Line_12 $$ properties.put("sonar.working.directory", new File(project.getBuildDir(), "sonar"))[ CD ]
Line_34 $$ File testResultsDir = testTask.getReports().getJunitXml().getDestination()-->Line_37 $$ properties.put("sonar.junit.reportsPath", testResultsDir)[ FD ]
Line_42 $$ File destinationFile = jacocoTaskExtension.getDestinationFile()-->Line_44 $$ properties.put("sonar.jacoco.reportPath", destinationFile)[ FD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_14 $$ project.getPlugins().withType(JavaBasePlugin.class, new Action<JavaBasePlugin>() [ CD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_44 $$ properties.put("sonar.jacoco.reportPath", destinationFile)[ FD ]
Line_2 $$ private void addGradleDefaults(final Project project, final Map<String, Object> properties) -->Line_12 $$ properties.put("sonar.working.directory", new File(project.getBuildDir(), "sonar"))[ FD ]
