Line_8 $$ MockHttpServletRequest request = new MockHttpServletRequest()-->Line_12 $$ view.render(model, request, response)[ FD ]
Line_5 $$ Map<String, Object> model = new LinkedHashMap<String, Object>()-->Line_12 $$ view.render(model, request, response)[ FD ]
Line_5 $$ Map<String, Object> model = new LinkedHashMap<String, Object>()-->Line_7 $$ model.put(modelKey, toBeMarshalled)[ FD ]
Line_9 $$ MockHttpServletResponse response = new MockHttpServletResponse()-->Line_12 $$ view.render(model, request, response)[ FD ]
Line_2 $$ public void renderNoModelKeyAndBindingResultFirst() throws Exception -->Line_6 $$ model.put(BindingResult.MODEL_KEY_PREFIX + modelKey, new BeanPropertyBindingResult(toBeMarshalled, modelKey))[ CD ]
Line_2 $$ public void renderNoModelKeyAndBindingResultFirst() throws Exception -->Line_5 $$ Map<String, Object> model = new LinkedHashMap<String, Object>()[ CD ]
Line_2 $$ public void renderNoModelKeyAndBindingResultFirst() throws Exception -->Line_11 $$ given(marshallerMock.supports(Object.class)).willReturn(true)[ CD ]
Line_5 $$ Map<String, Object> model = new LinkedHashMap<String, Object>()-->Line_6 $$ model.put(BindingResult.MODEL_KEY_PREFIX + modelKey, new BeanPropertyBindingResult(toBeMarshalled, modelKey))[ FD ]
Line_2 $$ public void renderNoModelKeyAndBindingResultFirst() throws Exception -->Line_7 $$ model.put(modelKey, toBeMarshalled)[ CD ]
Line_2 $$ public void renderNoModelKeyAndBindingResultFirst() throws Exception -->Line_9 $$ MockHttpServletResponse response = new MockHttpServletResponse()[ CD ]
Line_2 $$ public void renderNoModelKeyAndBindingResultFirst() throws Exception -->Line_13 $$ assertEquals("Invalid content type", "application/xml", response.getContentType())[ CD ]
Line_2 $$ public void renderNoModelKeyAndBindingResultFirst() throws Exception -->Line_4 $$ String modelKey = "key"[ CD ]
Line_4 $$ String modelKey = "key"-->Line_7 $$ model.put(modelKey, toBeMarshalled)[ FD ]
Line_2 $$ public void renderNoModelKeyAndBindingResultFirst() throws Exception -->Line_3 $$ Object toBeMarshalled = new Object()[ CD ]
Line_2 $$ public void renderNoModelKeyAndBindingResultFirst() throws Exception -->Line_8 $$ MockHttpServletRequest request = new MockHttpServletRequest()[ CD ]
Line_2 $$ public void renderNoModelKeyAndBindingResultFirst() throws Exception -->Line_14 $$ assertEquals("Invalid content length", 0, response.getContentLength())[ CD ]
Line_9 $$ MockHttpServletResponse response = new MockHttpServletResponse()-->Line_14 $$ assertEquals("Invalid content length", 0, response.getContentLength())[ FD ]
Line_9 $$ MockHttpServletResponse response = new MockHttpServletResponse()-->Line_13 $$ assertEquals("Invalid content type", "application/xml", response.getContentType())[ FD ]
Line_3 $$ Object toBeMarshalled = new Object()-->Line_7 $$ model.put(modelKey, toBeMarshalled)[ FD ]
Line_3 $$ Object toBeMarshalled = new Object()-->Line_15 $$ verify(marshallerMock).marshal(eq(toBeMarshalled), isA(StreamResult.class))[ FD ]
Line_2 $$ public void renderNoModelKeyAndBindingResultFirst() throws Exception -->Line_15 $$ verify(marshallerMock).marshal(eq(toBeMarshalled), isA(StreamResult.class))[ CD ]
Line_2 $$ public void renderNoModelKeyAndBindingResultFirst() throws Exception -->Line_12 $$ view.render(model, request, response)[ CD ]
Line_2 $$ public void renderNoModelKeyAndBindingResultFirst() throws Exception -->Line_10 $$ given(marshallerMock.supports(BeanPropertyBindingResult.class)).willReturn(true)[ CD ]
