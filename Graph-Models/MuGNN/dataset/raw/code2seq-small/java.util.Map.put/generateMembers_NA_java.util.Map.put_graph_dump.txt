Line_3 $$ Map<List<Map>, NonCodeMembersHolder> map = CachedValuesManager.getCachedValue(place, new CachedValueProvider<Map<List<Map>, NonCodeMembersHolder>>() -->Line_9 $$ NonCodeMembersHolder result = map.get(methods)[ FD ]
Line_2 $$ public static NonCodeMembersHolder generateMembers(List<Map> methods, final PsiFile place) -->Line_9 $$ NonCodeMembersHolder result = map.get(methods)[ FD ]
Line_10 $$ if (result == null) -->Line_11 $$ map.put(methods, result = new NonCodeMembersHolder(methods, place))[ CD ]
Line_5 $$ final Map<List<Map>, NonCodeMembersHolder> map = ContainerUtil.createConcurrentSoftMap()-->Line_9 $$ NonCodeMembersHolder result = map.get(methods)[ FD ]
Line_2 $$ public static NonCodeMembersHolder generateMembers(List<Map> methods, final PsiFile place) -->Line_10 $$ if (result == null) [ CD ]
Line_5 $$ final Map<List<Map>, NonCodeMembersHolder> map = ContainerUtil.createConcurrentSoftMap()-->Line_6 $$ return Result.create(map, PsiModificationTracker.MODIFICATION_COUNT)[ FD ]
Line_3 $$ Map<List<Map>, NonCodeMembersHolder> map = CachedValuesManager.getCachedValue(place, new CachedValueProvider<Map<List<Map>, NonCodeMembersHolder>>() -->Line_6 $$ return Result.create(map, PsiModificationTracker.MODIFICATION_COUNT)[ FD ]
Line_5 $$ final Map<List<Map>, NonCodeMembersHolder> map = ContainerUtil.createConcurrentSoftMap()-->Line_11 $$ map.put(methods, result = new NonCodeMembersHolder(methods, place))[ FD ]
Line_2 $$ public static NonCodeMembersHolder generateMembers(List<Map> methods, final PsiFile place) -->Line_11 $$ map.put(methods, result = new NonCodeMembersHolder(methods, place))[ FD ]
Line_3 $$ Map<List<Map>, NonCodeMembersHolder> map = CachedValuesManager.getCachedValue(place, new CachedValueProvider<Map<List<Map>, NonCodeMembersHolder>>() -->Line_11 $$ map.put(methods, result = new NonCodeMembersHolder(methods, place))[ FD ]
Line_2 $$ public static NonCodeMembersHolder generateMembers(List<Map> methods, final PsiFile place) -->Line_3 $$ Map<List<Map>, NonCodeMembersHolder> map = CachedValuesManager.getCachedValue(place, new CachedValueProvider<Map<List<Map>, NonCodeMembersHolder>>() [ FD ]
Line_3 $$ Map<List<Map>, NonCodeMembersHolder> map = CachedValuesManager.getCachedValue(place, new CachedValueProvider<Map<List<Map>, NonCodeMembersHolder>>() -->Line_6 $$ return Result.create(map, PsiModificationTracker.MODIFICATION_COUNT)[ CD ]
Line_2 $$ public static NonCodeMembersHolder generateMembers(List<Map> methods, final PsiFile place) -->Line_13 $$ return result[ CD ]
Line_2 $$ public static NonCodeMembersHolder generateMembers(List<Map> methods, final PsiFile place) -->Line_3 $$ Map<List<Map>, NonCodeMembersHolder> map = CachedValuesManager.getCachedValue(place, new CachedValueProvider<Map<List<Map>, NonCodeMembersHolder>>() [ CD ]
Line_2 $$ public static NonCodeMembersHolder generateMembers(List<Map> methods, final PsiFile place) -->Line_9 $$ NonCodeMembersHolder result = map.get(methods)[ CD ]
Line_3 $$ Map<List<Map>, NonCodeMembersHolder> map = CachedValuesManager.getCachedValue(place, new CachedValueProvider<Map<List<Map>, NonCodeMembersHolder>>() -->Line_5 $$ final Map<List<Map>, NonCodeMembersHolder> map = ContainerUtil.createConcurrentSoftMap()[ CD ]
