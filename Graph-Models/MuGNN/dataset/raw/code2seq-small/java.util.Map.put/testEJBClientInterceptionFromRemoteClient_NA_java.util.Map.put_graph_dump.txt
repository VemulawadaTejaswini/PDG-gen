Line_2 $$ public void testEJBClientInterceptionFromRemoteClient() throws Exception -->Line_10 $$ interceptorData.put(keyTwo, valueTwo)[ CD ]
Line_17 $$ final Map<String, Object> valuesSeenOnServerSide = remoteSFSB.getInvocationData(keyOne, keyTwo)-->Line_19 $$ Assert.assertFalse("Server side context data was expected to be non-empty", valuesSeenOnServerSide.isEmpty())[ FD ]
Line_2 $$ public void testEJBClientInterceptionFromRemoteClient() throws Exception -->Line_11 $$ final SimpleEJBClientInterceptor clientInterceptor = new SimpleEJBClientInterceptor(interceptorData)[ CD ]
Line_2 $$ public void testEJBClientInterceptionFromRemoteClient() throws Exception -->Line_12 $$ ejbClientContext.registerInterceptor(CLIENT_INTERCEPTOR_ORDER, clientInterceptor)[ CD ]
Line_15 $$ final Context jndiContext = new InitialContext(props)-->Line_16 $$ final RemoteSFSB remoteSFSB = (RemoteSFSB) jndiContext.lookup("ejb:" + APP_NAME + "/" + MODULE_NAME + "/" + DISTINCT_NAME + "/" + SimpleSFSB.class.getSimpleName() + "!" + RemoteSFSB.class.getName() + "?stateful")[ FD ]
Line_2 $$ public void testEJBClientInterceptionFromRemoteClient() throws Exception -->Line_8 $$ final Object valueTwo = new Integer("12")[ CD ]
Line_3 $$ final EJBClientContext ejbClientContext = EJBClientContext.requireCurrent()-->Line_12 $$ ejbClientContext.registerInterceptor(CLIENT_INTERCEPTOR_ORDER, clientInterceptor)[ FD ]
Line_2 $$ public void testEJBClientInterceptionFromRemoteClient() throws Exception -->Line_13 $$ final Hashtable props = new Hashtable()[ CD ]
Line_2 $$ public void testEJBClientInterceptionFromRemoteClient() throws Exception -->Line_3 $$ final EJBClientContext ejbClientContext = EJBClientContext.requireCurrent()[ CD ]
Line_4 $$ final Map<String, Object> interceptorData = new HashMap<String, Object>()-->Line_20 $$ for (final Map.Entry<String, Object> clientInterceptorDataEntry : interceptorData.entrySet()) [ FD ]
Line_4 $$ final Map<String, Object> interceptorData = new HashMap<String, Object>()-->Line_10 $$ interceptorData.put(keyTwo, valueTwo)[ FD ]
Line_13 $$ final Hashtable props = new Hashtable()-->Line_14 $$ props.put(Context.URL_PKG_PREFIXES, "org.jboss.ejb.client.naming")[ FD ]
Line_2 $$ public void testEJBClientInterceptionFromRemoteClient() throws Exception -->Line_5 $$ final String keyOne = "foo"[ CD ]
Line_2 $$ public void testEJBClientInterceptionFromRemoteClient() throws Exception -->Line_14 $$ props.put(Context.URL_PKG_PREFIXES, "org.jboss.ejb.client.naming")[ CD ]
Line_2 $$ public void testEJBClientInterceptionFromRemoteClient() throws Exception -->Line_19 $$ Assert.assertFalse("Server side context data was expected to be non-empty", valuesSeenOnServerSide.isEmpty())[ CD ]
Line_2 $$ public void testEJBClientInterceptionFromRemoteClient() throws Exception -->Line_7 $$ final String keyTwo = "blah"[ CD ]
Line_17 $$ final Map<String, Object> valuesSeenOnServerSide = remoteSFSB.getInvocationData(keyOne, keyTwo)-->Line_18 $$ Assert.assertNotNull("Server side context data was expected to be non-null", valuesSeenOnServerSide)[ FD ]
Line_2 $$ public void testEJBClientInterceptionFromRemoteClient() throws Exception -->Line_16 $$ final RemoteSFSB remoteSFSB = (RemoteSFSB) jndiContext.lookup("ejb:" + APP_NAME + "/" + MODULE_NAME + "/" + DISTINCT_NAME + "/" + SimpleSFSB.class.getSimpleName() + "!" + RemoteSFSB.class.getName() + "?stateful")[ CD ]
Line_4 $$ final Map<String, Object> interceptorData = new HashMap<String, Object>()-->Line_9 $$ interceptorData.put(keyOne, valueOne)[ FD ]
Line_17 $$ final Map<String, Object> valuesSeenOnServerSide = remoteSFSB.getInvocationData(keyOne, keyTwo)-->Line_23 $$ Assert.assertEquals("Unexpected value in bean, on server side, via InvocationContext.getContextData() for key " + key, expectedValue, valuesSeenOnServerSide.get(key))[ FD ]
Line_11 $$ final SimpleEJBClientInterceptor clientInterceptor = new SimpleEJBClientInterceptor(interceptorData)-->Line_12 $$ ejbClientContext.registerInterceptor(CLIENT_INTERCEPTOR_ORDER, clientInterceptor)[ FD ]
Line_7 $$ final String keyTwo = "blah"-->Line_10 $$ interceptorData.put(keyTwo, valueTwo)[ FD ]
Line_5 $$ final String keyOne = "foo"-->Line_9 $$ interceptorData.put(keyOne, valueOne)[ FD ]
Line_6 $$ final Object valueOne = "bar"-->Line_9 $$ interceptorData.put(keyOne, valueOne)[ FD ]
Line_8 $$ final Object valueTwo = new Integer("12")-->Line_10 $$ interceptorData.put(keyTwo, valueTwo)[ FD ]
Line_22 $$ final Object expectedValue = clientInterceptorDataEntry.getValue()-->Line_23 $$ Assert.assertEquals("Unexpected value in bean, on server side, via InvocationContext.getContextData() for key " + key, expectedValue, valuesSeenOnServerSide.get(key))[ FD ]
Line_2 $$ public void testEJBClientInterceptionFromRemoteClient() throws Exception -->Line_4 $$ final Map<String, Object> interceptorData = new HashMap<String, Object>()[ CD ]
Line_21 $$ final String key = clientInterceptorDataEntry.getKey()-->Line_23 $$ Assert.assertEquals("Unexpected value in bean, on server side, via InvocationContext.getContextData() for key " + key, expectedValue, valuesSeenOnServerSide.get(key))[ FD ]
Line_20 $$ for (final Map.Entry<String, Object> clientInterceptorDataEntry : interceptorData.entrySet()) -->Line_21 $$ final String key = clientInterceptorDataEntry.getKey()[ FD ]
Line_2 $$ public void testEJBClientInterceptionFromRemoteClient() throws Exception -->Line_6 $$ final Object valueOne = "bar"[ CD ]
Line_2 $$ public void testEJBClientInterceptionFromRemoteClient() throws Exception -->Line_15 $$ final Context jndiContext = new InitialContext(props)[ CD ]
Line_5 $$ final String keyOne = "foo"-->Line_17 $$ final Map<String, Object> valuesSeenOnServerSide = remoteSFSB.getInvocationData(keyOne, keyTwo)[ FD ]
Line_2 $$ public void testEJBClientInterceptionFromRemoteClient() throws Exception -->Line_9 $$ interceptorData.put(keyOne, valueOne)[ CD ]
Line_20 $$ for (final Map.Entry<String, Object> clientInterceptorDataEntry : interceptorData.entrySet()) -->Line_22 $$ final Object expectedValue = clientInterceptorDataEntry.getValue()[ FD ]
Line_2 $$ public void testEJBClientInterceptionFromRemoteClient() throws Exception -->Line_18 $$ Assert.assertNotNull("Server side context data was expected to be non-null", valuesSeenOnServerSide)[ CD ]
Line_2 $$ public void testEJBClientInterceptionFromRemoteClient() throws Exception -->Line_17 $$ final Map<String, Object> valuesSeenOnServerSide = remoteSFSB.getInvocationData(keyOne, keyTwo)[ CD ]
Line_7 $$ final String keyTwo = "blah"-->Line_17 $$ final Map<String, Object> valuesSeenOnServerSide = remoteSFSB.getInvocationData(keyOne, keyTwo)[ FD ]
Line_16 $$ final RemoteSFSB remoteSFSB = (RemoteSFSB) jndiContext.lookup("ejb:" + APP_NAME + "/" + MODULE_NAME + "/" + DISTINCT_NAME + "/" + SimpleSFSB.class.getSimpleName() + "!" + RemoteSFSB.class.getName() + "?stateful")-->Line_17 $$ final Map<String, Object> valuesSeenOnServerSide = remoteSFSB.getInvocationData(keyOne, keyTwo)[ FD ]
