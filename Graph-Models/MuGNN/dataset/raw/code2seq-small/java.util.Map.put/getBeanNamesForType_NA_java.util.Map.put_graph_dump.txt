Line_2 $$ public String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) -->Line_15 $$ return resolvedBeanNames[ CD ]
Line_6 $$ Map<Class<?>, String[]> cache = (includeNonSingletons ? this.allBeanNamesByType : this.singletonBeanNamesByType)-->Line_13 $$ cache.put(type, resolvedBeanNames)[ FD ]
Line_2 $$ public String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) -->Line_4 $$ return doGetBeanNamesForType(ResolvableType.forRawClass(type), includeNonSingletons, allowEagerInit)[ FD ]
Line_2 $$ public String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) -->Line_3 $$ if (!isConfigurationFrozen() || type == null || !allowEagerInit) [ CD ]
Line_2 $$ public String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) -->Line_12 $$ if (ClassUtils.isCacheSafe(type, getBeanClassLoader())) [ FD ]
Line_2 $$ public String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) -->Line_12 $$ if (ClassUtils.isCacheSafe(type, getBeanClassLoader())) [ CD ]
Line_2 $$ public String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) -->Line_7 $$ String[] resolvedBeanNames = cache.get(type)[ CD ]
Line_7 $$ String[] resolvedBeanNames = cache.get(type)-->Line_13 $$ cache.put(type, resolvedBeanNames)[ FD ]
Line_3 $$ if (!isConfigurationFrozen() || type == null || !allowEagerInit) -->Line_4 $$ return doGetBeanNamesForType(ResolvableType.forRawClass(type), includeNonSingletons, allowEagerInit)[ CD ]
Line_2 $$ public String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) -->Line_13 $$ cache.put(type, resolvedBeanNames)[ FD ]
Line_2 $$ public String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) -->Line_11 $$ resolvedBeanNames = doGetBeanNamesForType(ResolvableType.forRawClass(type), includeNonSingletons, true)[ FD ]
Line_6 $$ Map<Class<?>, String[]> cache = (includeNonSingletons ? this.allBeanNamesByType : this.singletonBeanNamesByType)-->Line_7 $$ String[] resolvedBeanNames = cache.get(type)[ FD ]
Line_2 $$ public String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) -->Line_11 $$ resolvedBeanNames = doGetBeanNamesForType(ResolvableType.forRawClass(type), includeNonSingletons, true)[ CD ]
Line_2 $$ public String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) -->Line_3 $$ if (!isConfigurationFrozen() || type == null || !allowEagerInit) [ FD ]
Line_7 $$ String[] resolvedBeanNames = cache.get(type)-->Line_8 $$ if (resolvedBeanNames != null) [ FD ]
Line_11 $$ resolvedBeanNames = doGetBeanNamesForType(ResolvableType.forRawClass(type), includeNonSingletons, true)-->Line_13 $$ cache.put(type, resolvedBeanNames)[ FD ]
Line_8 $$ if (resolvedBeanNames != null) -->Line_9 $$ return resolvedBeanNames[ CD ]
Line_2 $$ public String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) -->Line_6 $$ Map<Class<?>, String[]> cache = (includeNonSingletons ? this.allBeanNamesByType : this.singletonBeanNamesByType)[ CD ]
Line_7 $$ String[] resolvedBeanNames = cache.get(type)-->Line_11 $$ resolvedBeanNames = doGetBeanNamesForType(ResolvableType.forRawClass(type), includeNonSingletons, true)[ FD ]
Line_12 $$ if (ClassUtils.isCacheSafe(type, getBeanClassLoader())) -->Line_13 $$ cache.put(type, resolvedBeanNames)[ CD ]
Line_2 $$ public String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) -->Line_8 $$ if (resolvedBeanNames != null) [ CD ]
Line_2 $$ public String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) -->Line_7 $$ String[] resolvedBeanNames = cache.get(type)[ FD ]
