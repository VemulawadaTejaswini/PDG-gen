Line_3 $$ final PreparedStatement select = myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_READ_PATH, new ThrowableConvertor<Connection, PreparedStatement, SQLException>() -->Line_12 $$ final ResultSet set = select.executeQuery()[ FD ]
Line_2 $$ private void checkAndAddPaths(final Set<String> paths, final Map<String, Long> known, final Long locationId) throws VcsException -->Line_31 $$ known.put(path, id)[ FD ]
Line_2 $$ private void checkAndAddPaths(final Set<String> paths, final Map<String, Long> known, final Long locationId) throws VcsException -->Line_27 $$ insert.setLong(1, locationId)[ FD ]
Line_20 $$ if (paths.isEmpty())-->Line_21 $$ return[ CD ]
Line_3 $$ final PreparedStatement select = myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_READ_PATH, new ThrowableConvertor<Connection, PreparedStatement, SQLException>() -->Line_5 $$ return connection.prepareStatement("SELECT " + SqliteTables.PATHS.ID + " FROM " + SqliteTables.PATHS.TABLE_NAME + " WHERE " + SqliteTables.PATHS.ROOT_FK + " = ? AND " + SqliteTables.PATHS.PATH + " = ?")[ CD ]
Line_2 $$ private void checkAndAddPaths(final Set<String> paths, final Map<String, Long> known, final Long locationId) throws VcsException -->Line_3 $$ final PreparedStatement select = myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_READ_PATH, new ThrowableConvertor<Connection, PreparedStatement, SQLException>() [ CD ]
Line_3 $$ final PreparedStatement select = myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_READ_PATH, new ThrowableConvertor<Connection, PreparedStatement, SQLException>() -->Line_11 $$ select.setString(2, path)[ FD ]
Line_2 $$ private void checkAndAddPaths(final Set<String> paths, final Map<String, Long> known, final Long locationId) throws VcsException -->Line_19 $$ paths.removeAll(known.keySet())[ FD ]
Line_2 $$ private void checkAndAddPaths(final Set<String> paths, final Map<String, Long> known, final Long locationId) throws VcsException -->Line_20 $$ if (paths.isEmpty())[ FD ]
Line_3 $$ final PreparedStatement select = myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_READ_PATH, new ThrowableConvertor<Connection, PreparedStatement, SQLException>() -->Line_24 $$ return connection.prepareStatement("INSERT INTO " + SqliteTables.PATHS.TABLE_NAME + " ( " + SqliteTables.PATHS.ROOT_FK + " , " + SqliteTables.PATHS.PATH + " ) VALUES (?,?)", Statement.RETURN_GENERATED_KEYS)[ FD ]
Line_2 $$ private void checkAndAddPaths(final Set<String> paths, final Map<String, Long> known, final Long locationId) throws VcsException -->Line_9 $$ select.setLong(1, locationId)[ FD ]
Line_3 $$ final PreparedStatement select = myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_READ_PATH, new ThrowableConvertor<Connection, PreparedStatement, SQLException>() -->Line_9 $$ select.setLong(1, locationId)[ FD ]
Line_3 $$ final PreparedStatement select = myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_READ_PATH, new ThrowableConvertor<Connection, PreparedStatement, SQLException>() -->Line_5 $$ return connection.prepareStatement("SELECT " + SqliteTables.PATHS.ID + " FROM " + SqliteTables.PATHS.TABLE_NAME + " WHERE " + SqliteTables.PATHS.ROOT_FK + " = ? AND " + SqliteTables.PATHS.PATH + " = ?")[ FD ]
Line_22 $$ final PreparedStatement insert = myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_INSERT_PATH, new ThrowableConvertor<Connection, PreparedStatement, SQLException>() -->Line_24 $$ return connection.prepareStatement("INSERT INTO " + SqliteTables.PATHS.TABLE_NAME + " ( " + SqliteTables.PATHS.ROOT_FK + " , " + SqliteTables.PATHS.PATH + " ) VALUES (?,?)", Statement.RETURN_GENERATED_KEYS)[ FD ]
Line_2 $$ private void checkAndAddPaths(final Set<String> paths, final Map<String, Long> known, final Long locationId) throws VcsException -->Line_15 $$ known.put(path, set.getLong(1))[ FD ]
Line_13 $$ SqliteUtil.readSelectResults(set, new ThrowableRunnable<SQLException>() -->Line_15 $$ known.put(path, set.getLong(1))[ CD ]
Line_22 $$ final PreparedStatement insert = myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_INSERT_PATH, new ThrowableConvertor<Connection, PreparedStatement, SQLException>() -->Line_24 $$ return connection.prepareStatement("INSERT INTO " + SqliteTables.PATHS.TABLE_NAME + " ( " + SqliteTables.PATHS.ROOT_FK + " , " + SqliteTables.PATHS.PATH + " ) VALUES (?,?)", Statement.RETURN_GENERATED_KEYS)[ CD ]
