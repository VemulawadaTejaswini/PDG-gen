Line_2 $$ public void testGroovyScriptWithArgumentsUsingJsr223() -->Line_9 $$ assertEquals(6, result)[ CD ]
Line_3 $$ StandardScriptEvaluator evaluator = new StandardScriptEvaluator()-->Line_8 $$ Object result = evaluator.evaluate(new StaticScriptSource("return a * b"), arguments)[ FD ]
Line_5 $$ Map<String, Object> arguments = new HashMap<String, Object>()-->Line_7 $$ arguments.put("b", 2)[ FD ]
Line_2 $$ public void testGroovyScriptWithArgumentsUsingJsr223() -->Line_5 $$ Map<String, Object> arguments = new HashMap<String, Object>()[ CD ]
Line_3 $$ StandardScriptEvaluator evaluator = new StandardScriptEvaluator()-->Line_4 $$ evaluator.setLanguage("Groovy")[ FD ]
Line_2 $$ public void testGroovyScriptWithArgumentsUsingJsr223() -->Line_3 $$ StandardScriptEvaluator evaluator = new StandardScriptEvaluator()[ CD ]
Line_2 $$ public void testGroovyScriptWithArgumentsUsingJsr223() -->Line_4 $$ evaluator.setLanguage("Groovy")[ CD ]
Line_2 $$ public void testGroovyScriptWithArgumentsUsingJsr223() -->Line_7 $$ arguments.put("b", 2)[ CD ]
Line_5 $$ Map<String, Object> arguments = new HashMap<String, Object>()-->Line_8 $$ Object result = evaluator.evaluate(new StaticScriptSource("return a * b"), arguments)[ FD ]
Line_2 $$ public void testGroovyScriptWithArgumentsUsingJsr223() -->Line_8 $$ Object result = evaluator.evaluate(new StaticScriptSource("return a * b"), arguments)[ CD ]
Line_2 $$ public void testGroovyScriptWithArgumentsUsingJsr223() -->Line_6 $$ arguments.put("a", 3)[ CD ]
Line_5 $$ Map<String, Object> arguments = new HashMap<String, Object>()-->Line_6 $$ arguments.put("a", 3)[ FD ]
Line_8 $$ Object result = evaluator.evaluate(new StaticScriptSource("return a * b"), arguments)-->Line_9 $$ assertEquals(6, result)[ FD ]
