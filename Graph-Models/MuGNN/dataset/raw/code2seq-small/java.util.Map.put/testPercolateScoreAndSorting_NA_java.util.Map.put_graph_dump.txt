Line_2 $$ public void testPercolateScoreAndSorting() throws Exception -->Line_5 $$ client().prepareIndex("my-index", "my-type", "1").setSource("field", "value").execute().actionGet()[ CD ]
Line_47 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchQuery("field1", value), fieldValueFactorFunction("level")).boostMode(CombineFunction.REPLACE)).execute().actionGet()-->Line_49 $$ assertThat(response.getMatches().length, equalTo(Math.min(levels.size(), size)))[ FD ]
Line_2 $$ public void testPercolateScoreAndSorting() throws Exception -->Line_7 $$ long numQueries = randomIntBetween(100, 250)[ CD ]
Line_51 $$ for (PercolateResponse.Match match : response) -->Line_55 $$ assertThat(match.getIndex().string(), equalTo("my-index"))[ FD ]
Line_7 $$ long numQueries = randomIntBetween(100, 250)-->Line_23 $$ assertMatchCount(response, numQueries)[ FD ]
Line_9 $$ for (int i = 0; i < numQueries; i++) -->Line_11 $$ client().prepareIndex("my-index", PercolatorService.TYPE_NAME, Integer.toString(i)).setSource(jsonBuilder().startObject().field("query", matchAllQuery()).field("level", i).field("field1", value).endObject()).execute().actionGet()[ FD ]
Line_6 $$ Map<Integer, NavigableSet<Integer>> controlMap = new HashMap()-->Line_15 $$ controlMap.get(value).add(i)[ FD ]
Line_36 $$ for (PercolateResponse.Match match : response) -->Line_54 $$ assertThat(match.getScore(), equalTo((float) controlLevel))[ FD ]
Line_20 $$ for (int i = 0; i < runs; i++) -->Line_43 $$ for (int i = 0; i < runs; i++) [ FD ]
Line_2 $$ public void testPercolateScoreAndSorting() throws Exception -->Line_19 $$ int runs = randomInt(27)[ CD ]
Line_51 $$ for (PercolateResponse.Match match : response) -->Line_54 $$ assertThat(match.getScore(), equalTo((float) controlLevel))[ FD ]
Line_30 $$ for (int i = 0; i < runs; i++) -->Line_35 $$ int expectedId = (int) (numQueries - 1)[ CD ]
Line_2 $$ public void testPercolateScoreAndSorting() throws Exception -->Line_43 $$ for (int i = 0; i < runs; i++) [ CD ]
Line_50 $$ Iterator<Integer> levelIterator = levels.descendingIterator()-->Line_52 $$ int controlLevel = levelIterator.next()[ FD ]
Line_25 $$ for (int j = 0; j < response.getMatches().length; j++) -->Line_26 $$ String id = response.getMatches()[j].getId().string()[ CD ]
Line_2 $$ public void testPercolateScoreAndSorting() throws Exception -->Line_4 $$ ensureGreen()[ CD ]
Line_2 $$ public void testPercolateScoreAndSorting() throws Exception -->Line_20 $$ for (int i = 0; i < runs; i++) [ CD ]
Line_19 $$ int runs = randomInt(27)-->Line_20 $$ for (int i = 0; i < runs; i++) [ FD ]
Line_7 $$ long numQueries = randomIntBetween(100, 250)-->Line_33 $$ assertMatchCount(response, numQueries)[ FD ]
Line_9 $$ for (int i = 0; i < numQueries; i++) -->Line_20 $$ for (int i = 0; i < runs; i++) [ FD ]
Line_9 $$ for (int i = 0; i < numQueries; i++) -->Line_15 $$ controlMap.get(value).add(i)[ FD ]
Line_2 $$ public void testPercolateScoreAndSorting() throws Exception -->Line_17 $$ List<Integer> usedValues = new ArrayList(controlMap.keySet())[ CD ]
Line_26 $$ String id = response.getMatches()[j].getId().string()-->Line_27 $$ assertThat(Integer.valueOf(id), equalTo((int) response.getMatches()[j].getScore()))[ FD ]
Line_52 $$ int controlLevel = levelIterator.next()-->Line_53 $$ assertThat(match.getId().string(), equalTo(Integer.toString(controlLevel)))[ FD ]
Line_32 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()-->Line_48 $$ assertMatchCount(response, levels.size())[ FD ]
Line_21 $$ int size = randomIntBetween(1, 50)-->Line_32 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()[ FD ]
Line_2 $$ public void testPercolateScoreAndSorting() throws Exception -->Line_6 $$ Map<Integer, NavigableSet<Integer>> controlMap = new HashMap()[ CD ]
Line_36 $$ for (PercolateResponse.Match match : response) -->Line_53 $$ assertThat(match.getId().string(), equalTo(Integer.toString(controlLevel)))[ FD ]
Line_32 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()-->Line_34 $$ assertThat(response.getMatches().length, equalTo(size))[ FD ]
Line_10 $$ int value = randomInt(10)-->Line_13 $$ controlMap.put(value, new TreeSet<Integer>())[ FD ]
Line_20 $$ for (int i = 0; i < runs; i++) -->Line_21 $$ int size = randomIntBetween(1, 50)[ CD ]
Line_6 $$ Map<Integer, NavigableSet<Integer>> controlMap = new HashMap()-->Line_12 $$ if (!controlMap.containsKey(value)) [ FD ]
Line_45 $$ NavigableSet<Integer> levels = controlMap.get(value)-->Line_46 $$ int size = randomIntBetween(1, levels.size())[ FD ]
Line_30 $$ for (int i = 0; i < runs; i++) -->Line_32 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()[ CD ]
Line_6 $$ Map<Integer, NavigableSet<Integer>> controlMap = new HashMap()-->Line_45 $$ NavigableSet<Integer> levels = controlMap.get(value)[ FD ]
Line_46 $$ int size = randomIntBetween(1, levels.size())-->Line_47 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchQuery("field1", value), fieldValueFactorFunction("level")).boostMode(CombineFunction.REPLACE)).execute().actionGet()[ FD ]
Line_36 $$ for (PercolateResponse.Match match : response) -->Line_39 $$ assertThat(match.getIndex().string(), equalTo("my-index"))[ FD ]
Line_10 $$ int value = randomInt(10)-->Line_45 $$ NavigableSet<Integer> levels = controlMap.get(value)[ FD ]
Line_21 $$ int size = randomIntBetween(1, 50)-->Line_47 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchQuery("field1", value), fieldValueFactorFunction("level")).boostMode(CombineFunction.REPLACE)).execute().actionGet()[ FD ]
Line_22 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()-->Line_34 $$ assertThat(response.getMatches().length, equalTo(size))[ FD ]
Line_22 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()-->Line_23 $$ assertMatchCount(response, numQueries)[ FD ]
Line_20 $$ for (int i = 0; i < runs; i++) -->Line_30 $$ for (int i = 0; i < runs; i++) [ FD ]
Line_10 $$ int value = randomInt(10)-->Line_47 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchQuery("field1", value), fieldValueFactorFunction("level")).boostMode(CombineFunction.REPLACE)).execute().actionGet()[ FD ]
Line_45 $$ NavigableSet<Integer> levels = controlMap.get(value)-->Line_50 $$ Iterator<Integer> levelIterator = levels.descendingIterator()[ FD ]
Line_31 $$ int size = randomIntBetween(1, 10)-->Line_32 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()[ FD ]
Line_45 $$ NavigableSet<Integer> levels = controlMap.get(value)-->Line_48 $$ assertMatchCount(response, levels.size())[ FD ]
Line_9 $$ for (int i = 0; i < numQueries; i++) -->Line_30 $$ for (int i = 0; i < runs; i++) [ FD ]
Line_20 $$ for (int i = 0; i < runs; i++) -->Line_23 $$ assertMatchCount(response, numQueries)[ CD ]
Line_31 $$ int size = randomIntBetween(1, 10)-->Line_34 $$ assertThat(response.getMatches().length, equalTo(size))[ FD ]
Line_31 $$ int size = randomIntBetween(1, 10)-->Line_47 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchQuery("field1", value), fieldValueFactorFunction("level")).boostMode(CombineFunction.REPLACE)).execute().actionGet()[ FD ]
Line_21 $$ int size = randomIntBetween(1, 50)-->Line_49 $$ assertThat(response.getMatches().length, equalTo(Math.min(levels.size(), size)))[ FD ]
Line_30 $$ for (int i = 0; i < runs; i++) -->Line_31 $$ int size = randomIntBetween(1, 10)[ CD ]
Line_43 $$ for (int i = 0; i < runs; i++) -->Line_45 $$ NavigableSet<Integer> levels = controlMap.get(value)[ CD ]
Line_21 $$ int size = randomIntBetween(1, 50)-->Line_24 $$ assertThat(response.getMatches().length, equalTo(size))[ FD ]
Line_10 $$ int value = randomInt(10)-->Line_12 $$ if (!controlMap.containsKey(value)) [ FD ]
Line_32 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()-->Line_49 $$ assertThat(response.getMatches().length, equalTo(Math.min(levels.size(), size)))[ FD ]
Line_2 $$ public void testPercolateScoreAndSorting() throws Exception -->Line_3 $$ createIndex("my-index")[ CD ]
Line_19 $$ int runs = randomInt(27)-->Line_30 $$ for (int i = 0; i < runs; i++) [ FD ]
Line_19 $$ int runs = randomInt(27)-->Line_43 $$ for (int i = 0; i < runs; i++) [ FD ]
Line_22 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()-->Line_24 $$ assertThat(response.getMatches().length, equalTo(size))[ FD ]
Line_6 $$ Map<Integer, NavigableSet<Integer>> controlMap = new HashMap()-->Line_17 $$ List<Integer> usedValues = new ArrayList(controlMap.keySet())[ FD ]
Line_44 $$ int value = usedValues.get(randomInt(usedValues.size() - 1))-->Line_47 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchQuery("field1", value), fieldValueFactorFunction("level")).boostMode(CombineFunction.REPLACE)).execute().actionGet()[ FD ]
Line_9 $$ for (int i = 0; i < numQueries; i++) -->Line_11 $$ client().prepareIndex("my-index", PercolatorService.TYPE_NAME, Integer.toString(i)).setSource(jsonBuilder().startObject().field("query", matchAllQuery()).field("level", i).field("field1", value).endObject()).execute().actionGet()[ CD ]
Line_22 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()-->Line_27 $$ assertThat(Integer.valueOf(id), equalTo((int) response.getMatches()[j].getScore()))[ FD ]
Line_20 $$ for (int i = 0; i < runs; i++) -->Line_22 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()[ CD ]
Line_22 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()-->Line_48 $$ assertMatchCount(response, levels.size())[ FD ]
Line_35 $$ int expectedId = (int) (numQueries - 1)-->Line_40 $$ expectedId--[ FD ]
Line_43 $$ for (int i = 0; i < runs; i++) -->Line_47 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchQuery("field1", value), fieldValueFactorFunction("level")).boostMode(CombineFunction.REPLACE)).execute().actionGet()[ CD ]
Line_35 $$ int expectedId = (int) (numQueries - 1)-->Line_37 $$ assertThat(match.getId().string(), equalTo(Integer.toString(expectedId)))[ FD ]
Line_7 $$ long numQueries = randomIntBetween(100, 250)-->Line_9 $$ for (int i = 0; i < numQueries; i++) [ FD ]
Line_30 $$ for (int i = 0; i < runs; i++) -->Line_33 $$ assertMatchCount(response, numQueries)[ CD ]
Line_22 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()-->Line_33 $$ assertMatchCount(response, numQueries)[ FD ]
Line_22 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()-->Line_25 $$ for (int j = 0; j < response.getMatches().length; j++) [ FD ]
Line_46 $$ int size = randomIntBetween(1, levels.size())-->Line_49 $$ assertThat(response.getMatches().length, equalTo(Math.min(levels.size(), size)))[ FD ]
Line_10 $$ int value = randomInt(10)-->Line_11 $$ client().prepareIndex("my-index", PercolatorService.TYPE_NAME, Integer.toString(i)).setSource(jsonBuilder().startObject().field("query", matchAllQuery()).field("level", i).field("field1", value).endObject()).execute().actionGet()[ FD ]
Line_22 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()-->Line_49 $$ assertThat(response.getMatches().length, equalTo(Math.min(levels.size(), size)))[ FD ]
Line_9 $$ for (int i = 0; i < numQueries; i++) -->Line_12 $$ if (!controlMap.containsKey(value)) [ CD ]
Line_36 $$ for (PercolateResponse.Match match : response) -->Line_37 $$ assertThat(match.getId().string(), equalTo(Integer.toString(expectedId)))[ FD ]
Line_9 $$ for (int i = 0; i < numQueries; i++) -->Line_43 $$ for (int i = 0; i < runs; i++) [ FD ]
Line_43 $$ for (int i = 0; i < runs; i++) -->Line_46 $$ int size = randomIntBetween(1, levels.size())[ CD ]
Line_30 $$ for (int i = 0; i < runs; i++) -->Line_43 $$ for (int i = 0; i < runs; i++) [ FD ]
Line_36 $$ for (PercolateResponse.Match match : response) -->Line_55 $$ assertThat(match.getIndex().string(), equalTo("my-index"))[ FD ]
Line_20 $$ for (int i = 0; i < runs; i++) -->Line_24 $$ assertThat(response.getMatches().length, equalTo(size))[ CD ]
Line_30 $$ for (int i = 0; i < runs; i++) -->Line_34 $$ assertThat(response.getMatches().length, equalTo(size))[ CD ]
Line_12 $$ if (!controlMap.containsKey(value)) -->Line_13 $$ controlMap.put(value, new TreeSet<Integer>())[ CD ]
Line_22 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()-->Line_26 $$ String id = response.getMatches()[j].getId().string()[ FD ]
Line_31 $$ int size = randomIntBetween(1, 10)-->Line_49 $$ assertThat(response.getMatches().length, equalTo(Math.min(levels.size(), size)))[ FD ]
Line_17 $$ List<Integer> usedValues = new ArrayList(controlMap.keySet())-->Line_44 $$ int value = usedValues.get(randomInt(usedValues.size() - 1))[ FD ]
Line_32 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()-->Line_33 $$ assertMatchCount(response, numQueries)[ FD ]
Line_6 $$ Map<Integer, NavigableSet<Integer>> controlMap = new HashMap()-->Line_13 $$ controlMap.put(value, new TreeSet<Integer>())[ FD ]
Line_9 $$ for (int i = 0; i < numQueries; i++) -->Line_10 $$ int value = randomInt(10)[ CD ]
Line_45 $$ NavigableSet<Integer> levels = controlMap.get(value)-->Line_49 $$ assertThat(response.getMatches().length, equalTo(Math.min(levels.size(), size)))[ FD ]
Line_25 $$ for (int j = 0; j < response.getMatches().length; j++) -->Line_27 $$ assertThat(Integer.valueOf(id), equalTo((int) response.getMatches()[j].getScore()))[ CD ]
Line_51 $$ for (PercolateResponse.Match match : response) -->Line_53 $$ assertThat(match.getId().string(), equalTo(Integer.toString(controlLevel)))[ FD ]
Line_2 $$ public void testPercolateScoreAndSorting() throws Exception -->Line_30 $$ for (int i = 0; i < runs; i++) [ CD ]
Line_44 $$ int value = usedValues.get(randomInt(usedValues.size() - 1))-->Line_45 $$ NavigableSet<Integer> levels = controlMap.get(value)[ FD ]
Line_43 $$ for (int i = 0; i < runs; i++) -->Line_48 $$ assertMatchCount(response, levels.size())[ CD ]
Line_10 $$ int value = randomInt(10)-->Line_15 $$ controlMap.get(value).add(i)[ FD ]
Line_36 $$ for (PercolateResponse.Match match : response) -->Line_38 $$ assertThat(match.getScore(), equalTo((float) expectedId))[ FD ]
Line_20 $$ for (int i = 0; i < runs; i++) -->Line_25 $$ for (int j = 0; j < response.getMatches().length; j++) [ CD ]
Line_9 $$ for (int i = 0; i < numQueries; i++) -->Line_15 $$ controlMap.get(value).add(i)[ CD ]
Line_43 $$ for (int i = 0; i < runs; i++) -->Line_44 $$ int value = usedValues.get(randomInt(usedValues.size() - 1))[ CD ]
Line_47 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchQuery("field1", value), fieldValueFactorFunction("level")).boostMode(CombineFunction.REPLACE)).execute().actionGet()-->Line_48 $$ assertMatchCount(response, levels.size())[ FD ]
Line_2 $$ public void testPercolateScoreAndSorting() throws Exception -->Line_18 $$ refresh()[ CD ]
Line_43 $$ for (int i = 0; i < runs; i++) -->Line_49 $$ assertThat(response.getMatches().length, equalTo(Math.min(levels.size(), size)))[ CD ]
Line_21 $$ int size = randomIntBetween(1, 50)-->Line_34 $$ assertThat(response.getMatches().length, equalTo(size))[ FD ]
Line_2 $$ public void testPercolateScoreAndSorting() throws Exception -->Line_9 $$ for (int i = 0; i < numQueries; i++) [ CD ]
Line_21 $$ int size = randomIntBetween(1, 50)-->Line_22 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()[ FD ]
Line_43 $$ for (int i = 0; i < runs; i++) -->Line_50 $$ Iterator<Integer> levelIterator = levels.descendingIterator()[ CD ]
