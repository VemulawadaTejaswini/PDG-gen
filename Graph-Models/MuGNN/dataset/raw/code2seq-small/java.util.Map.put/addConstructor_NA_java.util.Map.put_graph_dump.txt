Line_2 $$ public final void addConstructor(final String struct, final String name, final Type[] args, final Type[] genargs) -->Line_16 $$ if (owner.methods.containsKey(name)) [ CD ]
Line_19 $$ final Class[] classes = new Class[args.length]-->Line_32 $$ reflect = owner.clazz.getConstructor(classes)[ FD ]
Line_2 $$ public final void addConstructor(final String struct, final String name, final Type[] args, final Type[] genargs) -->Line_7 $$ if (!name.matches("^[_a-zA-Z][_a-zA-Z0-9]*$")) [ FD ]
Line_20 $$ for (int count = 0; count < classes.length; ++count) -->Line_28 $$ classes[count] = args[count].clazz[ CD ]
Line_30 $$ final java.lang.reflect.Constructor<?> reflect-->Line_32 $$ reflect = owner.clazz.getConstructor(classes)[ FD ]
Line_2 $$ public final void addConstructor(final String struct, final String name, final Type[] args, final Type[] genargs) -->Line_19 $$ final Class[] classes = new Class[args.length][ CD ]
Line_20 $$ for (int count = 0; count < classes.length; ++count) -->Line_21 $$ if (genargs != null) [ CD ]
Line_19 $$ final Class[] classes = new Class[args.length]-->Line_34 $$ throw new IllegalArgumentException("Constructor [" + name + "] not found for class" + " [" + owner.clazz.getName() + "] with arguments " + Arrays.toString(classes) + ".")[ FD ]
Line_3 $$ final Struct owner = structs.get(struct)-->Line_4 $$ if (owner == null) [ FD ]
Line_2 $$ public final void addConstructor(final String struct, final String name, final Type[] args, final Type[] genargs) -->Line_7 $$ if (!name.matches("^[_a-zA-Z][_a-zA-Z0-9]*$")) [ CD ]
Line_2 $$ public final void addConstructor(final String struct, final String name, final Type[] args, final Type[] genargs) -->Line_13 $$ if (owner.statics.containsKey(name)) [ FD ]
Line_2 $$ public final void addConstructor(final String struct, final String name, final Type[] args, final Type[] genargs) -->Line_30 $$ final java.lang.reflect.Constructor<?> reflect[ CD ]
Line_30 $$ final java.lang.reflect.Constructor<?> reflect-->Line_36 $$ final org.objectweb.asm.commons.Method asm = org.objectweb.asm.commons.Method.getMethod(reflect)[ FD ]
Line_2 $$ public final void addConstructor(final String struct, final String name, final Type[] args, final Type[] genargs) -->Line_13 $$ if (owner.statics.containsKey(name)) [ CD ]
Line_2 $$ public final void addConstructor(final String struct, final String name, final Type[] args, final Type[] genargs) -->Line_3 $$ final Struct owner = structs.get(struct)[ FD ]
Line_32 $$ reflect = owner.clazz.getConstructor(classes)-->Line_36 $$ final org.objectweb.asm.commons.Method asm = org.objectweb.asm.commons.Method.getMethod(reflect)[ FD ]
Line_2 $$ public final void addConstructor(final String struct, final String name, final Type[] args, final Type[] genargs) -->Line_16 $$ if (owner.methods.containsKey(name)) [ FD ]
Line_2 $$ public final void addConstructor(final String struct, final String name, final Type[] args, final Type[] genargs) -->Line_3 $$ final Struct owner = structs.get(struct)[ CD ]
Line_2 $$ public final void addConstructor(final String struct, final String name, final Type[] args, final Type[] genargs) -->Line_10 $$ if (owner.constructors.containsKey(name)) [ FD ]
Line_2 $$ public final void addConstructor(final String struct, final String name, final Type[] args, final Type[] genargs) -->Line_21 $$ if (genargs != null) [ FD ]
Line_2 $$ public final void addConstructor(final String struct, final String name, final Type[] args, final Type[] genargs) -->Line_38 $$ owner.constructors.put(name, constructor)[ CD ]
Line_2 $$ public final void addConstructor(final String struct, final String name, final Type[] args, final Type[] genargs) -->Line_20 $$ for (int count = 0; count < classes.length; ++count) [ CD ]
Line_2 $$ public final void addConstructor(final String struct, final String name, final Type[] args, final Type[] genargs) -->Line_37 $$ final Constructor constructor = new Constructor(name, owner, Arrays.asList(genargs != null ? genargs : args), asm, reflect)[ CD ]
Line_2 $$ public final void addConstructor(final String struct, final String name, final Type[] args, final Type[] genargs) -->Line_10 $$ if (owner.constructors.containsKey(name)) [ CD ]
Line_2 $$ public final void addConstructor(final String struct, final String name, final Type[] args, final Type[] genargs) -->Line_36 $$ final org.objectweb.asm.commons.Method asm = org.objectweb.asm.commons.Method.getMethod(reflect)[ CD ]
Line_37 $$ final Constructor constructor = new Constructor(name, owner, Arrays.asList(genargs != null ? genargs : args), asm, reflect)-->Line_38 $$ owner.constructors.put(name, constructor)[ FD ]
Line_2 $$ public final void addConstructor(final String struct, final String name, final Type[] args, final Type[] genargs) -->Line_4 $$ if (owner == null) [ CD ]
Line_2 $$ public final void addConstructor(final String struct, final String name, final Type[] args, final Type[] genargs) -->Line_38 $$ owner.constructors.put(name, constructor)[ FD ]
