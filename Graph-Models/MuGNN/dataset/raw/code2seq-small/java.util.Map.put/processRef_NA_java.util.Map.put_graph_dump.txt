Line_2 $$ private static void processRef(final DeploymentUnit unit, final String type, final WSRefAnnotationWrapper annotation, final ClassInfo classInfo, final InjectionTarget injectionTarget, final String bindingName) throws DeploymentUnitProcessingException -->Line_15 $$ bindingMap.put(bindingName, bindingName)[ FD ]
Line_2 $$ private static void processRef(final DeploymentUnit unit, final String type, final WSRefAnnotationWrapper annotation, final ClassInfo classInfo, final InjectionTarget injectionTarget, final String bindingName) throws DeploymentUnitProcessingException -->Line_19 $$ ManagedReferenceFactory factory = WebServiceReferences.createWebServiceFactory(unit, type, annotation, target, refName, refKey)[ FD ]
Line_8 $$ for (final ComponentDescription componentDescription : moduleDescription.getComponentsByClassName(componentClassName)) -->Line_9 $$ if (componentDescription instanceof SessionBeanComponentDescription) [ FD ]
Line_2 $$ private static void processRef(final DeploymentUnit unit, final String type, final WSRefAnnotationWrapper annotation, final ClassInfo classInfo, final InjectionTarget injectionTarget, final String bindingName) throws DeploymentUnitProcessingException -->Line_3 $$ final EEModuleDescription moduleDescription = unit.getAttachment(Attachments.EE_MODULE_DESCRIPTION)[ CD ]
Line_2 $$ private static void processRef(final DeploymentUnit unit, final String type, final WSRefAnnotationWrapper annotation, final ClassInfo classInfo, final InjectionTarget injectionTarget, final String bindingName) throws DeploymentUnitProcessingException -->Line_3 $$ final EEModuleDescription moduleDescription = unit.getAttachment(Attachments.EE_MODULE_DESCRIPTION)[ FD ]
Line_3 $$ final EEModuleDescription moduleDescription = unit.getAttachment(Attachments.EE_MODULE_DESCRIPTION)-->Line_20 $$ final EEModuleClassDescription classDescription = moduleDescription.addOrGetLocalClassDescription(classInfo.name().toString())[ FD ]
Line_25 $$ if (injectionConfiguration != null) -->Line_26 $$ classDescription.addResourceInjection(injectionConfiguration)[ CD ]
Line_6 $$ final Map<String, String> bindingMap = new HashMap<String, String>()-->Line_11 $$ bindingMap.put(componentDescription.getComponentName() + "/" + bindingName, bindingName)[ FD ]
Line_20 $$ final EEModuleClassDescription classDescription = moduleDescription.addOrGetLocalClassDescription(classInfo.name().toString())-->Line_26 $$ classDescription.addResourceInjection(injectionConfiguration)[ FD ]
Line_2 $$ private static void processRef(final DeploymentUnit unit, final String type, final WSRefAnnotationWrapper annotation, final ClassInfo classInfo, final InjectionTarget injectionTarget, final String bindingName) throws DeploymentUnitProcessingException -->Line_4 $$ final AnnotatedElement target = createAnnotatedElement(unit, classInfo, injectionTarget)[ CD ]
Line_9 $$ if (componentDescription instanceof SessionBeanComponentDescription) -->Line_10 $$ isEJB = true[ CD ]
Line_2 $$ private static void processRef(final DeploymentUnit unit, final String type, final WSRefAnnotationWrapper annotation, final ClassInfo classInfo, final InjectionTarget injectionTarget, final String bindingName) throws DeploymentUnitProcessingException -->Line_11 $$ bindingMap.put(componentDescription.getComponentName() + "/" + bindingName, bindingName)[ FD ]
Line_7 $$ boolean isEJB = false-->Line_14 $$ if (!isEJB) [ FD ]
Line_2 $$ private static void processRef(final DeploymentUnit unit, final String type, final WSRefAnnotationWrapper annotation, final ClassInfo classInfo, final InjectionTarget injectionTarget, final String bindingName) throws DeploymentUnitProcessingException -->Line_6 $$ final Map<String, String> bindingMap = new HashMap<String, String>()[ CD ]
Line_2 $$ private static void processRef(final DeploymentUnit unit, final String type, final WSRefAnnotationWrapper annotation, final ClassInfo classInfo, final InjectionTarget injectionTarget, final String bindingName) throws DeploymentUnitProcessingException -->Line_5 $$ final String componentClassName = classInfo.name().toString()[ FD ]
Line_2 $$ private static void processRef(final DeploymentUnit unit, final String type, final WSRefAnnotationWrapper annotation, final ClassInfo classInfo, final InjectionTarget injectionTarget, final String bindingName) throws DeploymentUnitProcessingException -->Line_7 $$ boolean isEJB = false[ CD ]
Line_8 $$ for (final ComponentDescription componentDescription : moduleDescription.getComponentsByClassName(componentClassName)) -->Line_11 $$ bindingMap.put(componentDescription.getComponentName() + "/" + bindingName, bindingName)[ FD ]
Line_5 $$ final String componentClassName = classInfo.name().toString()-->Line_8 $$ for (final ComponentDescription componentDescription : moduleDescription.getComponentsByClassName(componentClassName)) [ FD ]
Line_18 $$ String refName = bindingMap.get(refKey)-->Line_19 $$ ManagedReferenceFactory factory = WebServiceReferences.createWebServiceFactory(unit, type, annotation, target, refName, refKey)[ FD ]
Line_22 $$ final BindingConfiguration bindingConfiguration = new BindingConfiguration(refName, serviceRefSource)-->Line_23 $$ classDescription.getBindingConfigurations().add(bindingConfiguration)[ FD ]
Line_20 $$ final EEModuleClassDescription classDescription = moduleDescription.addOrGetLocalClassDescription(classInfo.name().toString())-->Line_23 $$ classDescription.getBindingConfigurations().add(bindingConfiguration)[ FD ]
Line_9 $$ if (componentDescription instanceof SessionBeanComponentDescription) -->Line_11 $$ bindingMap.put(componentDescription.getComponentName() + "/" + bindingName, bindingName)[ CD ]
Line_6 $$ final Map<String, String> bindingMap = new HashMap<String, String>()-->Line_15 $$ bindingMap.put(bindingName, bindingName)[ FD ]
Line_3 $$ final EEModuleDescription moduleDescription = unit.getAttachment(Attachments.EE_MODULE_DESCRIPTION)-->Line_8 $$ for (final ComponentDescription componentDescription : moduleDescription.getComponentsByClassName(componentClassName)) [ FD ]
Line_2 $$ private static void processRef(final DeploymentUnit unit, final String type, final WSRefAnnotationWrapper annotation, final ClassInfo classInfo, final InjectionTarget injectionTarget, final String bindingName) throws DeploymentUnitProcessingException -->Line_20 $$ final EEModuleClassDescription classDescription = moduleDescription.addOrGetLocalClassDescription(classInfo.name().toString())[ FD ]
Line_17 $$ for (String refKey : bindingMap.keySet()) -->Line_18 $$ String refName = bindingMap.get(refKey)[ FD ]
Line_2 $$ private static void processRef(final DeploymentUnit unit, final String type, final WSRefAnnotationWrapper annotation, final ClassInfo classInfo, final InjectionTarget injectionTarget, final String bindingName) throws DeploymentUnitProcessingException -->Line_5 $$ final String componentClassName = classInfo.name().toString()[ CD ]
Line_2 $$ private static void processRef(final DeploymentUnit unit, final String type, final WSRefAnnotationWrapper annotation, final ClassInfo classInfo, final InjectionTarget injectionTarget, final String bindingName) throws DeploymentUnitProcessingException -->Line_14 $$ if (!isEJB) [ CD ]
Line_10 $$ isEJB = true-->Line_14 $$ if (!isEJB) [ FD ]
Line_14 $$ if (!isEJB) -->Line_15 $$ bindingMap.put(bindingName, bindingName)[ CD ]
Line_24 $$ final ResourceInjectionConfiguration injectionConfiguration = injectionTarget != null ? new ResourceInjectionConfiguration(injectionTarget, new LookupInjectionSource(refName)) : null-->Line_25 $$ if (injectionConfiguration != null) [ FD ]
Line_7 $$ boolean isEJB = false-->Line_10 $$ isEJB = true[ FD ]
Line_4 $$ final AnnotatedElement target = createAnnotatedElement(unit, classInfo, injectionTarget)-->Line_19 $$ ManagedReferenceFactory factory = WebServiceReferences.createWebServiceFactory(unit, type, annotation, target, refName, refKey)[ FD ]
Line_2 $$ private static void processRef(final DeploymentUnit unit, final String type, final WSRefAnnotationWrapper annotation, final ClassInfo classInfo, final InjectionTarget injectionTarget, final String bindingName) throws DeploymentUnitProcessingException -->Line_4 $$ final AnnotatedElement target = createAnnotatedElement(unit, classInfo, injectionTarget)[ FD ]
Line_17 $$ for (String refKey : bindingMap.keySet()) -->Line_19 $$ ManagedReferenceFactory factory = WebServiceReferences.createWebServiceFactory(unit, type, annotation, target, refName, refKey)[ FD ]
Line_6 $$ final Map<String, String> bindingMap = new HashMap<String, String>()-->Line_17 $$ for (String refKey : bindingMap.keySet()) [ FD ]
Line_6 $$ final Map<String, String> bindingMap = new HashMap<String, String>()-->Line_18 $$ String refName = bindingMap.get(refKey)[ FD ]
Line_24 $$ final ResourceInjectionConfiguration injectionConfiguration = injectionTarget != null ? new ResourceInjectionConfiguration(injectionTarget, new LookupInjectionSource(refName)) : null-->Line_26 $$ classDescription.addResourceInjection(injectionConfiguration)[ FD ]
