Line_7 $$ BeanWrapper bw = new BeanWrapperImpl(gb)-->Line_8 $$ bw.setPropertyValue("mapOfLists[1][0]", new Integer(5))[ FD ]
Line_2 $$ public void testGenericMapOfLists() throws MalformedURLException -->Line_9 $$ assertEquals(new Integer(5), bw.getPropertyValue("mapOfLists[1][0]"))[ CD ]
Line_2 $$ public void testGenericMapOfLists() throws MalformedURLException -->Line_3 $$ GenericBean<String> gb = new GenericBean<String>()[ CD ]
Line_2 $$ public void testGenericMapOfLists() throws MalformedURLException -->Line_10 $$ assertEquals(new Integer(5), gb.getMapOfLists().get(new Integer(1)).get(0))[ CD ]
Line_2 $$ public void testGenericMapOfLists() throws MalformedURLException -->Line_6 $$ gb.setMapOfLists(map)[ CD ]
Line_2 $$ public void testGenericMapOfLists() throws MalformedURLException -->Line_5 $$ map.put(new Integer(1), new LinkedList<Integer>())[ CD ]
Line_4 $$ Map<Integer, List<Integer>> map = new HashMap<Integer, List<Integer>>()-->Line_5 $$ map.put(new Integer(1), new LinkedList<Integer>())[ FD ]
Line_7 $$ BeanWrapper bw = new BeanWrapperImpl(gb)-->Line_9 $$ assertEquals(new Integer(5), bw.getPropertyValue("mapOfLists[1][0]"))[ FD ]
Line_3 $$ GenericBean<String> gb = new GenericBean<String>()-->Line_10 $$ assertEquals(new Integer(5), gb.getMapOfLists().get(new Integer(1)).get(0))[ FD ]
Line_2 $$ public void testGenericMapOfLists() throws MalformedURLException -->Line_8 $$ bw.setPropertyValue("mapOfLists[1][0]", new Integer(5))[ CD ]
Line_2 $$ public void testGenericMapOfLists() throws MalformedURLException -->Line_4 $$ Map<Integer, List<Integer>> map = new HashMap<Integer, List<Integer>>()[ CD ]
Line_3 $$ GenericBean<String> gb = new GenericBean<String>()-->Line_6 $$ gb.setMapOfLists(map)[ FD ]
Line_2 $$ public void testGenericMapOfLists() throws MalformedURLException -->Line_7 $$ BeanWrapper bw = new BeanWrapperImpl(gb)[ CD ]
Line_4 $$ Map<Integer, List<Integer>> map = new HashMap<Integer, List<Integer>>()-->Line_6 $$ gb.setMapOfLists(map)[ FD ]
