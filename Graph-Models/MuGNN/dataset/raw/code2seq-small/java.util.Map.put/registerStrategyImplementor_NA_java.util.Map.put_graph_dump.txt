Line_2 $$ public <T> void registerStrategyImplementor(Class<T> strategy, String name, Class<? extends T> implementation) -->Line_8 $$ final Class old = namedStrategyImplementorMap.put(name, implementation)[ CD ]
Line_2 $$ public <T> void registerStrategyImplementor(Class<T> strategy, String name, Class<? extends T> implementation) -->Line_12 $$ log.debug(String.format("Registering named strategy selector [%s] : [%s] -> [%s] (replacing [%s])", strategy.getName(), name, implementation.getName(), old.getName()))[ FD ]
Line_3 $$ Map<String, Class> namedStrategyImplementorMap = namedStrategyImplementorByStrategyMap.get(strategy)-->Line_4 $$ if (namedStrategyImplementorMap == null) [ FD ]
Line_2 $$ public <T> void registerStrategyImplementor(Class<T> strategy, String name, Class<? extends T> implementation) -->Line_10 $$ log.trace(String.format("Registering named strategy selector [%s] : [%s] -> [%s]", strategy.getName(), name, implementation.getName()))[ FD ]
Line_3 $$ Map<String, Class> namedStrategyImplementorMap = namedStrategyImplementorByStrategyMap.get(strategy)-->Line_5 $$ namedStrategyImplementorMap = new ConcurrentHashMap<String, Class>()[ FD ]
Line_9 $$ if (old == null) -->Line_10 $$ log.trace(String.format("Registering named strategy selector [%s] : [%s] -> [%s]", strategy.getName(), name, implementation.getName()))[ CD ]
Line_2 $$ public <T> void registerStrategyImplementor(Class<T> strategy, String name, Class<? extends T> implementation) -->Line_3 $$ Map<String, Class> namedStrategyImplementorMap = namedStrategyImplementorByStrategyMap.get(strategy)[ CD ]
Line_4 $$ if (namedStrategyImplementorMap == null) -->Line_5 $$ namedStrategyImplementorMap = new ConcurrentHashMap<String, Class>()[ CD ]
Line_8 $$ final Class old = namedStrategyImplementorMap.put(name, implementation)-->Line_9 $$ if (old == null) [ FD ]
Line_2 $$ public <T> void registerStrategyImplementor(Class<T> strategy, String name, Class<? extends T> implementation) -->Line_4 $$ if (namedStrategyImplementorMap == null) [ CD ]
Line_2 $$ public <T> void registerStrategyImplementor(Class<T> strategy, String name, Class<? extends T> implementation) -->Line_6 $$ namedStrategyImplementorByStrategyMap.put(strategy, namedStrategyImplementorMap)[ FD ]
Line_9 $$ if (old == null) -->Line_12 $$ log.debug(String.format("Registering named strategy selector [%s] : [%s] -> [%s] (replacing [%s])", strategy.getName(), name, implementation.getName(), old.getName()))[ CD ]
Line_2 $$ public <T> void registerStrategyImplementor(Class<T> strategy, String name, Class<? extends T> implementation) -->Line_3 $$ Map<String, Class> namedStrategyImplementorMap = namedStrategyImplementorByStrategyMap.get(strategy)[ FD ]
Line_5 $$ namedStrategyImplementorMap = new ConcurrentHashMap<String, Class>()-->Line_8 $$ final Class old = namedStrategyImplementorMap.put(name, implementation)[ FD ]
Line_3 $$ Map<String, Class> namedStrategyImplementorMap = namedStrategyImplementorByStrategyMap.get(strategy)-->Line_6 $$ namedStrategyImplementorByStrategyMap.put(strategy, namedStrategyImplementorMap)[ FD ]
Line_3 $$ Map<String, Class> namedStrategyImplementorMap = namedStrategyImplementorByStrategyMap.get(strategy)-->Line_8 $$ final Class old = namedStrategyImplementorMap.put(name, implementation)[ FD ]
Line_5 $$ namedStrategyImplementorMap = new ConcurrentHashMap<String, Class>()-->Line_6 $$ namedStrategyImplementorByStrategyMap.put(strategy, namedStrategyImplementorMap)[ FD ]
Line_4 $$ if (namedStrategyImplementorMap == null) -->Line_6 $$ namedStrategyImplementorByStrategyMap.put(strategy, namedStrategyImplementorMap)[ CD ]
Line_2 $$ public <T> void registerStrategyImplementor(Class<T> strategy, String name, Class<? extends T> implementation) -->Line_8 $$ final Class old = namedStrategyImplementorMap.put(name, implementation)[ FD ]
Line_8 $$ final Class old = namedStrategyImplementorMap.put(name, implementation)-->Line_12 $$ log.debug(String.format("Registering named strategy selector [%s] : [%s] -> [%s] (replacing [%s])", strategy.getName(), name, implementation.getName(), old.getName()))[ FD ]
Line_2 $$ public <T> void registerStrategyImplementor(Class<T> strategy, String name, Class<? extends T> implementation) -->Line_9 $$ if (old == null) [ CD ]
