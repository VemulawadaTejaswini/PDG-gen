Line_18 $$ MimeMultipart mimeMultipart = (MimeMultipart) partContent-->Line_19 $$ collectMultipartContent(mimeMultipart, mbMailMessage)[ FD ]
Line_5 $$ if ((part.getDisposition() != null) && StringUtil.equalsIgnoreCase(part.getDisposition(), MimeMessage.ATTACHMENT)) -->Line_15 $$ mbMailMessage.addBytes(part.getFileName(), bytes)[ CD ]
Line_2 $$ public static void collectPartContent(Part part, MBMailMessage mbMailMessage) throws Exception -->Line_5 $$ if ((part.getDisposition() != null) && StringUtil.equalsIgnoreCase(part.getDisposition(), MimeMessage.ATTACHMENT)) [ CD ]
Line_20 $$ if (partContent instanceof String) -->Line_22 $$ options.put("emailPartToMBMessageBody", Boolean.TRUE)[ CD ]
Line_23 $$ String messageBody = SanitizerUtil.sanitize(0, 0, 0, MBMessage.class.getName(), 0, contentType, Sanitizer.MODE_ALL, (String) partContent, options)-->Line_27 $$ mbMailMessage.setPlainBody(messageBody)[ FD ]
Line_2 $$ public static void collectPartContent(Part part, MBMailMessage mbMailMessage) throws Exception -->Line_19 $$ collectMultipartContent(mimeMultipart, mbMailMessage)[ FD ]
Line_20 $$ if (partContent instanceof String) -->Line_23 $$ String messageBody = SanitizerUtil.sanitize(0, 0, 0, MBMessage.class.getName(), 0, contentType, Sanitizer.MODE_ALL, (String) partContent, options)[ CD ]
Line_20 $$ if (partContent instanceof String) -->Line_21 $$ Map<String, Object> options = new HashMap()[ CD ]
Line_2 $$ public static void collectPartContent(Part part, MBMailMessage mbMailMessage) throws Exception -->Line_4 $$ String contentType = StringUtil.toLowerCase(part.getContentType())[ FD ]
Line_17 $$ if (partContent instanceof MimeMultipart) -->Line_19 $$ collectMultipartContent(mimeMultipart, mbMailMessage)[ CD ]
Line_2 $$ public static void collectPartContent(Part part, MBMailMessage mbMailMessage) throws Exception -->Line_4 $$ String contentType = StringUtil.toLowerCase(part.getContentType())[ CD ]
Line_5 $$ if ((part.getDisposition() != null) && StringUtil.equalsIgnoreCase(part.getDisposition(), MimeMessage.ATTACHMENT)) -->Line_9 $$ byte[] bytes = null[ CD ]
Line_11 $$ bytes = ((String) partContent).getBytes()-->Line_15 $$ mbMailMessage.addBytes(part.getFileName(), bytes)[ FD ]
Line_21 $$ Map<String, Object> options = new HashMap()-->Line_23 $$ String messageBody = SanitizerUtil.sanitize(0, 0, 0, MBMessage.class.getName(), 0, contentType, Sanitizer.MODE_ALL, (String) partContent, options)[ FD ]
Line_9 $$ byte[] bytes = null-->Line_13 $$ bytes = JavaMailUtil.getBytes(part)[ FD ]
Line_4 $$ String contentType = StringUtil.toLowerCase(part.getContentType())-->Line_23 $$ String messageBody = SanitizerUtil.sanitize(0, 0, 0, MBMessage.class.getName(), 0, contentType, Sanitizer.MODE_ALL, (String) partContent, options)[ FD ]
Line_13 $$ bytes = JavaMailUtil.getBytes(part)-->Line_15 $$ mbMailMessage.addBytes(part.getFileName(), bytes)[ FD ]
Line_5 $$ if ((part.getDisposition() != null) && StringUtil.equalsIgnoreCase(part.getDisposition(), MimeMessage.ATTACHMENT)) -->Line_10 $$ if (partContent instanceof String) [ CD ]
Line_21 $$ Map<String, Object> options = new HashMap()-->Line_22 $$ options.put("emailPartToMBMessageBody", Boolean.TRUE)[ FD ]
Line_11 $$ bytes = ((String) partContent).getBytes()-->Line_13 $$ bytes = JavaMailUtil.getBytes(part)[ FD ]
Line_12 $$ if (partContent instanceof InputStream) -->Line_13 $$ bytes = JavaMailUtil.getBytes(part)[ CD ]
Line_6 $$ if (_log.isDebugEnabled()) -->Line_7 $$ _log.debug("Processing attachment")[ CD ]
Line_23 $$ String messageBody = SanitizerUtil.sanitize(0, 0, 0, MBMessage.class.getName(), 0, contentType, Sanitizer.MODE_ALL, (String) partContent, options)-->Line_25 $$ mbMailMessage.setHtmlBody(messageBody)[ FD ]
Line_2 $$ public static void collectPartContent(Part part, MBMailMessage mbMailMessage) throws Exception -->Line_27 $$ mbMailMessage.setPlainBody(messageBody)[ FD ]
Line_3 $$ Object partContent = _getPartContent(part)-->Line_17 $$ if (partContent instanceof MimeMultipart) [ FD ]
Line_4 $$ String contentType = StringUtil.toLowerCase(part.getContentType())-->Line_24 $$ if (contentType.startsWith(ContentTypes.TEXT_HTML)) [ FD ]
Line_2 $$ public static void collectPartContent(Part part, MBMailMessage mbMailMessage) throws Exception -->Line_5 $$ if ((part.getDisposition() != null) && StringUtil.equalsIgnoreCase(part.getDisposition(), MimeMessage.ATTACHMENT)) [ FD ]
Line_5 $$ if ((part.getDisposition() != null) && StringUtil.equalsIgnoreCase(part.getDisposition(), MimeMessage.ATTACHMENT)) -->Line_6 $$ if (_log.isDebugEnabled()) [ CD ]
Line_3 $$ Object partContent = _getPartContent(part)-->Line_20 $$ if (partContent instanceof String) [ FD ]
Line_2 $$ public static void collectPartContent(Part part, MBMailMessage mbMailMessage) throws Exception -->Line_3 $$ Object partContent = _getPartContent(part)[ FD ]
Line_5 $$ if ((part.getDisposition() != null) && StringUtil.equalsIgnoreCase(part.getDisposition(), MimeMessage.ATTACHMENT)) -->Line_17 $$ if (partContent instanceof MimeMultipart) [ CD ]
Line_17 $$ if (partContent instanceof MimeMultipart) -->Line_20 $$ if (partContent instanceof String) [ CD ]
Line_24 $$ if (contentType.startsWith(ContentTypes.TEXT_HTML)) -->Line_25 $$ mbMailMessage.setHtmlBody(messageBody)[ CD ]
Line_2 $$ public static void collectPartContent(Part part, MBMailMessage mbMailMessage) throws Exception -->Line_3 $$ Object partContent = _getPartContent(part)[ CD ]
Line_3 $$ Object partContent = _getPartContent(part)-->Line_12 $$ if (partContent instanceof InputStream) [ FD ]
Line_2 $$ public static void collectPartContent(Part part, MBMailMessage mbMailMessage) throws Exception -->Line_13 $$ bytes = JavaMailUtil.getBytes(part)[ FD ]
Line_9 $$ byte[] bytes = null-->Line_15 $$ mbMailMessage.addBytes(part.getFileName(), bytes)[ FD ]
Line_2 $$ public static void collectPartContent(Part part, MBMailMessage mbMailMessage) throws Exception -->Line_25 $$ mbMailMessage.setHtmlBody(messageBody)[ FD ]
Line_24 $$ if (contentType.startsWith(ContentTypes.TEXT_HTML)) -->Line_27 $$ mbMailMessage.setPlainBody(messageBody)[ CD ]
Line_10 $$ if (partContent instanceof String) -->Line_12 $$ if (partContent instanceof InputStream) [ CD ]
Line_3 $$ Object partContent = _getPartContent(part)-->Line_10 $$ if (partContent instanceof String) [ FD ]
Line_2 $$ public static void collectPartContent(Part part, MBMailMessage mbMailMessage) throws Exception -->Line_15 $$ mbMailMessage.addBytes(part.getFileName(), bytes)[ FD ]
Line_9 $$ byte[] bytes = null-->Line_11 $$ bytes = ((String) partContent).getBytes()[ FD ]
Line_10 $$ if (partContent instanceof String) -->Line_11 $$ bytes = ((String) partContent).getBytes()[ CD ]
Line_17 $$ if (partContent instanceof MimeMultipart) -->Line_18 $$ MimeMultipart mimeMultipart = (MimeMultipart) partContent[ CD ]
Line_20 $$ if (partContent instanceof String) -->Line_24 $$ if (contentType.startsWith(ContentTypes.TEXT_HTML)) [ CD ]
