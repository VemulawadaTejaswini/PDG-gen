Line_2 $$ public void testSeveralLegacyLayoutScopeIds() throws Exception -->Line_12 $$ sb.append(AssetPublisherUtil.SCOPE_ID_LAYOUT_UUID_PREFIX)[ CD ]
Line_11 $$ StringBundler sb = new StringBundler(5)-->Line_13 $$ sb.append(importedLayout.getUuid())[ FD ]
Line_2 $$ public void testSeveralLegacyLayoutScopeIds() throws Exception -->Line_3 $$ Layout secondLayout = LayoutTestUtil.addLayout(group)[ CD ]
Line_2 $$ public void testSeveralLegacyLayoutScopeIds() throws Exception -->Line_7 $$ preferenceMap.put("scopeIds", new String[] [ CD ]
Line_5 $$ Map<String, String[]> preferenceMap = new HashMap()-->Line_8 $$ PortletPreferences portletPreferences = getImportedPortletPreferences(preferenceMap)[ FD ]
Line_2 $$ public void testSeveralLegacyLayoutScopeIds() throws Exception -->Line_13 $$ sb.append(importedLayout.getUuid())[ CD ]
Line_9 $$ Layout importedSecondLayout = LayoutLocalServiceUtil.fetchLayoutByUuidAndGroupId(secondLayout.getUuid(), importedGroup.getGroupId(), importedLayout.isPrivateLayout())-->Line_16 $$ sb.append(importedSecondLayout.getUuid())[ FD ]
Line_8 $$ PortletPreferences portletPreferences = getImportedPortletPreferences(preferenceMap)-->Line_17 $$ Assert.assertEquals(sb.toString(), StringUtil.merge(portletPreferences.getValues("scopeIds", null)))[ FD ]
Line_2 $$ public void testSeveralLegacyLayoutScopeIds() throws Exception -->Line_8 $$ PortletPreferences portletPreferences = getImportedPortletPreferences(preferenceMap)[ CD ]
Line_2 $$ public void testSeveralLegacyLayoutScopeIds() throws Exception -->Line_4 $$ GroupTestUtil.addGroup(TestPropsValues.getUserId(), secondLayout)[ CD ]
Line_3 $$ Layout secondLayout = LayoutTestUtil.addLayout(group)-->Line_9 $$ Layout importedSecondLayout = LayoutLocalServiceUtil.fetchLayoutByUuidAndGroupId(secondLayout.getUuid(), importedGroup.getGroupId(), importedLayout.isPrivateLayout())[ FD ]
Line_2 $$ public void testSeveralLegacyLayoutScopeIds() throws Exception -->Line_9 $$ Layout importedSecondLayout = LayoutLocalServiceUtil.fetchLayoutByUuidAndGroupId(secondLayout.getUuid(), importedGroup.getGroupId(), importedLayout.isPrivateLayout())[ CD ]
Line_5 $$ Map<String, String[]> preferenceMap = new HashMap()-->Line_7 $$ preferenceMap.put("scopeIds", new String[] [ FD ]
Line_3 $$ Layout secondLayout = LayoutTestUtil.addLayout(group)-->Line_7 $$ preferenceMap.put("scopeIds", new String[] [ FD ]
Line_3 $$ Layout secondLayout = LayoutTestUtil.addLayout(group)-->Line_4 $$ GroupTestUtil.addGroup(TestPropsValues.getUserId(), secondLayout)[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(5)-->Line_16 $$ sb.append(importedSecondLayout.getUuid())[ FD ]
Line_2 $$ public void testSeveralLegacyLayoutScopeIds() throws Exception -->Line_14 $$ sb.append(StringPool.COMMA)[ CD ]
Line_2 $$ public void testSeveralLegacyLayoutScopeIds() throws Exception -->Line_16 $$ sb.append(importedSecondLayout.getUuid())[ CD ]
Line_2 $$ public void testSeveralLegacyLayoutScopeIds() throws Exception -->Line_11 $$ StringBundler sb = new StringBundler(5)[ CD ]
Line_2 $$ public void testSeveralLegacyLayoutScopeIds() throws Exception -->Line_15 $$ sb.append(AssetPublisherUtil.SCOPE_ID_LAYOUT_UUID_PREFIX)[ CD ]
Line_11 $$ StringBundler sb = new StringBundler(5)-->Line_12 $$ sb.append(AssetPublisherUtil.SCOPE_ID_LAYOUT_UUID_PREFIX)[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(5)-->Line_15 $$ sb.append(AssetPublisherUtil.SCOPE_ID_LAYOUT_UUID_PREFIX)[ FD ]
Line_2 $$ public void testSeveralLegacyLayoutScopeIds() throws Exception -->Line_10 $$ Assert.assertEquals(null, portletPreferences.getValue("scopeId", null))[ CD ]
Line_2 $$ public void testSeveralLegacyLayoutScopeIds() throws Exception -->Line_5 $$ Map<String, String[]> preferenceMap = new HashMap()[ CD ]
Line_8 $$ PortletPreferences portletPreferences = getImportedPortletPreferences(preferenceMap)-->Line_10 $$ Assert.assertEquals(null, portletPreferences.getValue("scopeId", null))[ FD ]
Line_2 $$ public void testSeveralLegacyLayoutScopeIds() throws Exception -->Line_17 $$ Assert.assertEquals(sb.toString(), StringUtil.merge(portletPreferences.getValues("scopeIds", null)))[ CD ]
Line_2 $$ public void testSeveralLegacyLayoutScopeIds() throws Exception -->Line_6 $$ GroupTestUtil.addGroup(TestPropsValues.getUserId(), layout)[ CD ]
Line_11 $$ StringBundler sb = new StringBundler(5)-->Line_17 $$ Assert.assertEquals(sb.toString(), StringUtil.merge(portletPreferences.getValues("scopeIds", null)))[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(5)-->Line_14 $$ sb.append(StringPool.COMMA)[ FD ]
