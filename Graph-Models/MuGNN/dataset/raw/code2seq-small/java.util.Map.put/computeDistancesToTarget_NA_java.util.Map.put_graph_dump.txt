Line_16 $$ while (iterator.hasNext()) -->Line_25 $$ nodes.addLast(prev)[ CD ]
Line_10 $$ while (!nodes.isEmpty()) -->Line_15 $$ Iterator<Node> iterator = myGraph.getIn(node)[ CD ]
Line_17 $$ Node prev = iterator.next()-->Line_24 $$ myNextNodes.put(prev, node)[ FD ]
Line_17 $$ Node prev = iterator.next()-->Line_20 $$ myNonTreeEdges.putValue(prev, new GraphEdge<Node>(prev, node, d - dPrev))[ FD ]
Line_10 $$ while (!nodes.isEmpty()) -->Line_13 $$ mySortedNodes.add(node)[ CD ]
Line_2 $$ private void computeDistancesToTarget() -->Line_10 $$ while (!nodes.isEmpty()) [ CD ]
Line_12 $$ Node node = nodes.removeFirst()-->Line_13 $$ mySortedNodes.add(node)[ FD ]
Line_12 $$ Node node = nodes.removeFirst()-->Line_14 $$ int d = distances.get(node) + 1[ FD ]
Line_17 $$ Node prev = iterator.next()-->Line_23 $$ distances.put(prev, d)[ FD ]
Line_12 $$ Node node = nodes.removeFirst()-->Line_24 $$ myNextNodes.put(prev, node)[ FD ]
Line_2 $$ private void computeDistancesToTarget() -->Line_8 $$ nodes.addLast(myFinish)[ CD ]
Line_6 $$ TObjectIntHashMap<Node> distances = new TObjectIntHashMap<Node>()-->Line_14 $$ int d = distances.get(node) + 1[ FD ]
Line_7 $$ Deque<Node> nodes = new ArrayDeque<Node>()-->Line_8 $$ nodes.addLast(myFinish)[ FD ]
Line_16 $$ while (iterator.hasNext()) -->Line_23 $$ distances.put(prev, d)[ CD ]
Line_15 $$ Iterator<Node> iterator = myGraph.getIn(node)-->Line_16 $$ while (iterator.hasNext()) [ FD ]
Line_2 $$ private void computeDistancesToTarget() -->Line_9 $$ distances.put(myFinish, 0)[ CD ]
Line_7 $$ Deque<Node> nodes = new ArrayDeque<Node>()-->Line_12 $$ Node node = nodes.removeFirst()[ FD ]
Line_17 $$ Node prev = iterator.next()-->Line_18 $$ if (distances.containsKey(prev)) [ FD ]
Line_18 $$ if (distances.containsKey(prev)) -->Line_20 $$ myNonTreeEdges.putValue(prev, new GraphEdge<Node>(prev, node, d - dPrev))[ CD ]
Line_10 $$ while (!nodes.isEmpty()) -->Line_16 $$ while (iterator.hasNext()) [ CD ]
Line_10 $$ while (!nodes.isEmpty()) -->Line_14 $$ int d = distances.get(node) + 1[ CD ]
Line_10 $$ while (!nodes.isEmpty()) -->Line_12 $$ Node node = nodes.removeFirst()[ CD ]
Line_6 $$ TObjectIntHashMap<Node> distances = new TObjectIntHashMap<Node>()-->Line_23 $$ distances.put(prev, d)[ FD ]
Line_7 $$ Deque<Node> nodes = new ArrayDeque<Node>()-->Line_25 $$ nodes.addLast(prev)[ FD ]
Line_16 $$ while (iterator.hasNext()) -->Line_24 $$ myNextNodes.put(prev, node)[ CD ]
Line_12 $$ Node node = nodes.removeFirst()-->Line_15 $$ Iterator<Node> iterator = myGraph.getIn(node)[ FD ]
Line_10 $$ while (!nodes.isEmpty()) -->Line_11 $$ myProgressIndicator.checkCanceled()[ CD ]
Line_16 $$ while (iterator.hasNext()) -->Line_17 $$ Node prev = iterator.next()[ CD ]
Line_2 $$ private void computeDistancesToTarget() -->Line_7 $$ Deque<Node> nodes = new ArrayDeque<Node>()[ CD ]
Line_17 $$ Node prev = iterator.next()-->Line_19 $$ int dPrev = distances.get(prev)[ FD ]
Line_17 $$ Node prev = iterator.next()-->Line_25 $$ nodes.addLast(prev)[ FD ]
Line_6 $$ TObjectIntHashMap<Node> distances = new TObjectIntHashMap<Node>()-->Line_18 $$ if (distances.containsKey(prev)) [ FD ]
Line_6 $$ TObjectIntHashMap<Node> distances = new TObjectIntHashMap<Node>()-->Line_19 $$ int dPrev = distances.get(prev)[ FD ]
Line_14 $$ int d = distances.get(node) + 1-->Line_23 $$ distances.put(prev, d)[ FD ]
Line_15 $$ Iterator<Node> iterator = myGraph.getIn(node)-->Line_17 $$ Node prev = iterator.next()[ FD ]
Line_2 $$ private void computeDistancesToTarget() -->Line_6 $$ TObjectIntHashMap<Node> distances = new TObjectIntHashMap<Node>()[ CD ]
Line_18 $$ if (distances.containsKey(prev)) -->Line_19 $$ int dPrev = distances.get(prev)[ CD ]
Line_7 $$ Deque<Node> nodes = new ArrayDeque<Node>()-->Line_10 $$ while (!nodes.isEmpty()) [ FD ]
Line_6 $$ TObjectIntHashMap<Node> distances = new TObjectIntHashMap<Node>()-->Line_9 $$ distances.put(myFinish, 0)[ FD ]
Line_16 $$ while (iterator.hasNext()) -->Line_18 $$ if (distances.containsKey(prev)) [ CD ]
