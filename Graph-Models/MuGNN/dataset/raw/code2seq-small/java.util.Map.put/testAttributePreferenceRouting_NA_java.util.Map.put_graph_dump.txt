Line_5 $$ RoutingTable routingTable = RoutingTable.builder().addAsNew(metaData.index("test")).build()-->Line_6 $$ ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()[ FD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_3 $$ AllocationService strategy = createAllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries", 10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), "always").put("cluster.routing.allocation.awareness.attributes", "rack_id,zone").build())[ CD ]
Line_14 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_15 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_6 $$ ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()-->Line_18 $$ routingTable = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_27 $$ shardIterator = clusterState.routingTable().index("test").shard(0).preferAttributesActiveInitializingShardsIt(new String[] [ CD ]
Line_13 $$ clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1", unmodifiableMap(node1Attributes))).put(newNode("node2", unmodifiableMap(node2Attributes))).localNodeId("node1")).build()-->Line_14 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()[ FD ]
Line_17 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()-->Line_18 $$ routingTable = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_9 $$ node1Attributes.put("zone", "zone1")[ CD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_19 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ CD ]
Line_6 $$ ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()-->Line_15 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_21 $$ ShardRouting shardRouting = shardIterator.nextOrNull()-->Line_29 $$ assertThat(shardRouting, notNullValue())[ FD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_7 $$ Map<String, String> node1Attributes = new HashMap()[ CD ]
Line_18 $$ routingTable = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable()-->Line_19 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_5 $$ RoutingTable routingTable = RoutingTable.builder().addAsNew(metaData.index("test")).build()-->Line_16 $$ routingTable = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_21 $$ ShardRouting shardRouting = shardIterator.nextOrNull()-->Line_25 $$ assertThat(shardRouting, notNullValue())[ FD ]
Line_16 $$ routingTable = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable()-->Line_19 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_30 $$ assertThat(shardRouting.currentNodeId(), equalTo("node1"))[ CD ]
Line_20 $$ ShardIterator shardIterator = clusterState.routingTable().index("test").shard(0).preferAttributesActiveInitializingShardsIt(new String[] -->Line_28 $$ shardRouting = shardIterator.nextOrNull()[ FD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_10 $$ Map<String, String> node2Attributes = new HashMap()[ CD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_15 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ CD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_17 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ CD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_13 $$ clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1", unmodifiableMap(node1Attributes))).put(newNode("node2", unmodifiableMap(node2Attributes))).localNodeId("node1")).build()[ CD ]
Line_21 $$ ShardRouting shardRouting = shardIterator.nextOrNull()-->Line_22 $$ assertThat(shardRouting, notNullValue())[ FD ]
Line_10 $$ Map<String, String> node2Attributes = new HashMap()-->Line_12 $$ node2Attributes.put("zone", "zone2")[ FD ]
Line_21 $$ ShardRouting shardRouting = shardIterator.nextOrNull()-->Line_33 $$ assertThat(shardRouting.currentNodeId(), equalTo("node2"))[ FD ]
Line_17 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()-->Line_19 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_6 $$ ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()-->Line_20 $$ ShardIterator shardIterator = clusterState.routingTable().index("test").shard(0).preferAttributesActiveInitializingShardsIt(new String[] [ FD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_23 $$ assertThat(shardRouting.currentNodeId(), equalTo("node1"))[ CD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_20 $$ ShardIterator shardIterator = clusterState.routingTable().index("test").shard(0).preferAttributesActiveInitializingShardsIt(new String[] [ CD ]
Line_14 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_19 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_24 $$ shardRouting = shardIterator.nextOrNull()-->Line_25 $$ assertThat(shardRouting, notNullValue())[ FD ]
Line_28 $$ shardRouting = shardIterator.nextOrNull()-->Line_30 $$ assertThat(shardRouting.currentNodeId(), equalTo("node1"))[ FD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_4 $$ MetaData metaData = MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1)).build()[ CD ]
Line_24 $$ shardRouting = shardIterator.nextOrNull()-->Line_32 $$ assertThat(shardRouting, notNullValue())[ FD ]
Line_31 $$ shardRouting = shardIterator.nextOrNull()-->Line_33 $$ assertThat(shardRouting.currentNodeId(), equalTo("node2"))[ FD ]
Line_6 $$ ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()-->Line_13 $$ clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1", unmodifiableMap(node1Attributes))).put(newNode("node2", unmodifiableMap(node2Attributes))).localNodeId("node1")).build()[ FD ]
Line_19 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()-->Line_20 $$ ShardIterator shardIterator = clusterState.routingTable().index("test").shard(0).preferAttributesActiveInitializingShardsIt(new String[] [ FD ]
Line_24 $$ shardRouting = shardIterator.nextOrNull()-->Line_28 $$ shardRouting = shardIterator.nextOrNull()[ FD ]
Line_13 $$ clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1", unmodifiableMap(node1Attributes))).put(newNode("node2", unmodifiableMap(node2Attributes))).localNodeId("node1")).build()-->Line_19 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_15 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()-->Line_20 $$ ShardIterator shardIterator = clusterState.routingTable().index("test").shard(0).preferAttributesActiveInitializingShardsIt(new String[] [ FD ]
Line_17 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()-->Line_27 $$ shardIterator = clusterState.routingTable().index("test").shard(0).preferAttributesActiveInitializingShardsIt(new String[] [ FD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_29 $$ assertThat(shardRouting, notNullValue())[ CD ]
Line_14 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_17 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_3 $$ AllocationService strategy = createAllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries", 10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), "always").put("cluster.routing.allocation.awareness.attributes", "rack_id,zone").build())-->Line_14 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()[ FD ]
Line_6 $$ ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()-->Line_27 $$ shardIterator = clusterState.routingTable().index("test").shard(0).preferAttributesActiveInitializingShardsIt(new String[] [ FD ]
Line_14 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_16 $$ routingTable = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_15 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()-->Line_18 $$ routingTable = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_21 $$ ShardRouting shardRouting = shardIterator.nextOrNull()-->Line_26 $$ assertThat(shardRouting.currentNodeId(), equalTo("node2"))[ FD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_18 $$ routingTable = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable()[ CD ]
Line_14 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_18 $$ routingTable = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_13 $$ clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1", unmodifiableMap(node1Attributes))).put(newNode("node2", unmodifiableMap(node2Attributes))).localNodeId("node1")).build()-->Line_27 $$ shardIterator = clusterState.routingTable().index("test").shard(0).preferAttributesActiveInitializingShardsIt(new String[] [ FD ]
Line_24 $$ shardRouting = shardIterator.nextOrNull()-->Line_26 $$ assertThat(shardRouting.currentNodeId(), equalTo("node2"))[ FD ]
Line_13 $$ clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1", unmodifiableMap(node1Attributes))).put(newNode("node2", unmodifiableMap(node2Attributes))).localNodeId("node1")).build()-->Line_17 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_24 $$ shardRouting = shardIterator.nextOrNull()-->Line_29 $$ assertThat(shardRouting, notNullValue())[ FD ]
Line_5 $$ RoutingTable routingTable = RoutingTable.builder().addAsNew(metaData.index("test")).build()-->Line_17 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_6 $$ ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()-->Line_19 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_10 $$ Map<String, String> node2Attributes = new HashMap()-->Line_13 $$ clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1", unmodifiableMap(node1Attributes))).put(newNode("node2", unmodifiableMap(node2Attributes))).localNodeId("node1")).build()[ FD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_14 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()[ CD ]
Line_21 $$ ShardRouting shardRouting = shardIterator.nextOrNull()-->Line_24 $$ shardRouting = shardIterator.nextOrNull()[ FD ]
Line_20 $$ ShardIterator shardIterator = clusterState.routingTable().index("test").shard(0).preferAttributesActiveInitializingShardsIt(new String[] -->Line_21 $$ ShardRouting shardRouting = shardIterator.nextOrNull()[ FD ]
Line_15 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()-->Line_16 $$ routingTable = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_15 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()-->Line_27 $$ shardIterator = clusterState.routingTable().index("test").shard(0).preferAttributesActiveInitializingShardsIt(new String[] [ FD ]
Line_17 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()-->Line_20 $$ ShardIterator shardIterator = clusterState.routingTable().index("test").shard(0).preferAttributesActiveInitializingShardsIt(new String[] [ FD ]
Line_27 $$ shardIterator = clusterState.routingTable().index("test").shard(0).preferAttributesActiveInitializingShardsIt(new String[] -->Line_31 $$ shardRouting = shardIterator.nextOrNull()[ FD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_12 $$ node2Attributes.put("zone", "zone2")[ CD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_32 $$ assertThat(shardRouting, notNullValue())[ CD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_5 $$ RoutingTable routingTable = RoutingTable.builder().addAsNew(metaData.index("test")).build()[ CD ]
Line_20 $$ ShardIterator shardIterator = clusterState.routingTable().index("test").shard(0).preferAttributesActiveInitializingShardsIt(new String[] -->Line_27 $$ shardIterator = clusterState.routingTable().index("test").shard(0).preferAttributesActiveInitializingShardsIt(new String[] [ FD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_22 $$ assertThat(shardRouting, notNullValue())[ CD ]
Line_27 $$ shardIterator = clusterState.routingTable().index("test").shard(0).preferAttributesActiveInitializingShardsIt(new String[] -->Line_28 $$ shardRouting = shardIterator.nextOrNull()[ FD ]
Line_28 $$ shardRouting = shardIterator.nextOrNull()-->Line_33 $$ assertThat(shardRouting.currentNodeId(), equalTo("node2"))[ FD ]
Line_15 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()-->Line_19 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_31 $$ shardRouting = shardIterator.nextOrNull()-->Line_32 $$ assertThat(shardRouting, notNullValue())[ FD ]
Line_5 $$ RoutingTable routingTable = RoutingTable.builder().addAsNew(metaData.index("test")).build()-->Line_19 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_25 $$ assertThat(shardRouting, notNullValue())[ CD ]
Line_28 $$ shardRouting = shardIterator.nextOrNull()-->Line_29 $$ assertThat(shardRouting, notNullValue())[ FD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_11 $$ node2Attributes.put("rack_id", "rack_2")[ CD ]
Line_3 $$ AllocationService strategy = createAllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries", 10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), "always").put("cluster.routing.allocation.awareness.attributes", "rack_id,zone").build())-->Line_18 $$ routingTable = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_6 $$ ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()-->Line_14 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()[ FD ]
Line_3 $$ AllocationService strategy = createAllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries", 10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), "always").put("cluster.routing.allocation.awareness.attributes", "rack_id,zone").build())-->Line_16 $$ routingTable = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_20 $$ ShardIterator shardIterator = clusterState.routingTable().index("test").shard(0).preferAttributesActiveInitializingShardsIt(new String[] -->Line_31 $$ shardRouting = shardIterator.nextOrNull()[ FD ]
Line_10 $$ Map<String, String> node2Attributes = new HashMap()-->Line_11 $$ node2Attributes.put("rack_id", "rack_2")[ FD ]
Line_28 $$ shardRouting = shardIterator.nextOrNull()-->Line_32 $$ assertThat(shardRouting, notNullValue())[ FD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_16 $$ routingTable = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable()[ CD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_6 $$ ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()[ CD ]
Line_5 $$ RoutingTable routingTable = RoutingTable.builder().addAsNew(metaData.index("test")).build()-->Line_14 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()[ FD ]
Line_16 $$ routingTable = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable()-->Line_17 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_8 $$ node1Attributes.put("rack_id", "rack_1")[ CD ]
Line_21 $$ ShardRouting shardRouting = shardIterator.nextOrNull()-->Line_30 $$ assertThat(shardRouting.currentNodeId(), equalTo("node1"))[ FD ]
Line_13 $$ clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1", unmodifiableMap(node1Attributes))).put(newNode("node2", unmodifiableMap(node2Attributes))).localNodeId("node1")).build()-->Line_20 $$ ShardIterator shardIterator = clusterState.routingTable().index("test").shard(0).preferAttributesActiveInitializingShardsIt(new String[] [ FD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_28 $$ shardRouting = shardIterator.nextOrNull()[ CD ]
Line_24 $$ shardRouting = shardIterator.nextOrNull()-->Line_33 $$ assertThat(shardRouting.currentNodeId(), equalTo("node2"))[ FD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_26 $$ assertThat(shardRouting.currentNodeId(), equalTo("node2"))[ CD ]
Line_6 $$ ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()-->Line_17 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_31 $$ shardRouting = shardIterator.nextOrNull()[ CD ]
Line_24 $$ shardRouting = shardIterator.nextOrNull()-->Line_30 $$ assertThat(shardRouting.currentNodeId(), equalTo("node1"))[ FD ]
Line_7 $$ Map<String, String> node1Attributes = new HashMap()-->Line_9 $$ node1Attributes.put("zone", "zone1")[ FD ]
Line_16 $$ routingTable = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable()-->Line_18 $$ routingTable = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_33 $$ assertThat(shardRouting.currentNodeId(), equalTo("node2"))[ CD ]
Line_13 $$ clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1", unmodifiableMap(node1Attributes))).put(newNode("node2", unmodifiableMap(node2Attributes))).localNodeId("node1")).build()-->Line_18 $$ routingTable = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_21 $$ ShardRouting shardRouting = shardIterator.nextOrNull()[ CD ]
Line_6 $$ ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()-->Line_16 $$ routingTable = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_7 $$ Map<String, String> node1Attributes = new HashMap()-->Line_13 $$ clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1", unmodifiableMap(node1Attributes))).put(newNode("node2", unmodifiableMap(node2Attributes))).localNodeId("node1")).build()[ FD ]
Line_24 $$ shardRouting = shardIterator.nextOrNull()-->Line_31 $$ shardRouting = shardIterator.nextOrNull()[ FD ]
Line_5 $$ RoutingTable routingTable = RoutingTable.builder().addAsNew(metaData.index("test")).build()-->Line_15 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_2 $$ public void testAttributePreferenceRouting() -->Line_24 $$ shardRouting = shardIterator.nextOrNull()[ CD ]
Line_7 $$ Map<String, String> node1Attributes = new HashMap()-->Line_8 $$ node1Attributes.put("rack_id", "rack_1")[ FD ]
Line_5 $$ RoutingTable routingTable = RoutingTable.builder().addAsNew(metaData.index("test")).build()-->Line_18 $$ routingTable = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_21 $$ ShardRouting shardRouting = shardIterator.nextOrNull()-->Line_28 $$ shardRouting = shardIterator.nextOrNull()[ FD ]
Line_13 $$ clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1", unmodifiableMap(node1Attributes))).put(newNode("node2", unmodifiableMap(node2Attributes))).localNodeId("node1")).build()-->Line_15 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_4 $$ MetaData metaData = MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1)).build()-->Line_5 $$ RoutingTable routingTable = RoutingTable.builder().addAsNew(metaData.index("test")).build()[ FD ]
Line_28 $$ shardRouting = shardIterator.nextOrNull()-->Line_31 $$ shardRouting = shardIterator.nextOrNull()[ FD ]
Line_19 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()-->Line_27 $$ shardIterator = clusterState.routingTable().index("test").shard(0).preferAttributesActiveInitializingShardsIt(new String[] [ FD ]
Line_21 $$ ShardRouting shardRouting = shardIterator.nextOrNull()-->Line_23 $$ assertThat(shardRouting.currentNodeId(), equalTo("node1"))[ FD ]
Line_21 $$ ShardRouting shardRouting = shardIterator.nextOrNull()-->Line_31 $$ shardRouting = shardIterator.nextOrNull()[ FD ]
Line_15 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()-->Line_17 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_4 $$ MetaData metaData = MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1)).build()-->Line_6 $$ ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()[ FD ]
Line_13 $$ clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1", unmodifiableMap(node1Attributes))).put(newNode("node2", unmodifiableMap(node2Attributes))).localNodeId("node1")).build()-->Line_16 $$ routingTable = strategy.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_21 $$ ShardRouting shardRouting = shardIterator.nextOrNull()-->Line_32 $$ assertThat(shardRouting, notNullValue())[ FD ]
Line_20 $$ ShardIterator shardIterator = clusterState.routingTable().index("test").shard(0).preferAttributesActiveInitializingShardsIt(new String[] -->Line_24 $$ shardRouting = shardIterator.nextOrNull()[ FD ]
