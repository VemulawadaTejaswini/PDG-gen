Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_36 $$ mergedEnv.putAll(environment)[ FD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_10 $$ environment.put(Environment.LOGNAME.name(), container.getUser())[ CD ]
Line_24 $$ if (inputClassPath != null && !inputClassPath.isEmpty()) -->Line_25 $$ StringBuilder newClassPath = new StringBuilder(inputClassPath)[ CD ]
Line_26 $$ for (Map.Entry<Path, List<String>> entry : resources.entrySet()) -->Line_28 $$ for (String linkName : entry.getValue()) [ FD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_12 $$ environment.put(Environment.PWD.name(), pwd.toString())[ FD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_5 $$ environment.put(Environment.NM_HOST.name(), this.context.getNodeId().getHost())[ FD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_21 $$ Apps.setEnvFromInputString(environment, conf.get(YarnConfiguration.NM_ADMIN_USER_ENV, YarnConfiguration.DEFAULT_NM_ADMIN_USER_ENV), File.pathSeparator)[ FD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_4 $$ environment.put(Environment.NM_PORT.name(), String.valueOf(this.context.getNodeId().getPort()))[ CD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_8 $$ environment.put(Environment.LOG_DIRS.name(), StringUtils.join(",", containerLogDirs))[ FD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_42 $$ AuxiliaryServiceHelper.setServiceDataIntoEnv(meta.getKey(), meta.getValue(), environment)[ FD ]
Line_24 $$ if (inputClassPath != null && !inputClassPath.isEmpty()) -->Line_38 $$ environment.put(Environment.CLASSPATH.name(), classPathJar)[ CD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_13 $$ putEnvIfNotNull(environment, Environment.HADOOP_CONF_DIR.name(), System.getenv(Environment.HADOOP_CONF_DIR.name()))[ CD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_14 $$ if (!Shell.WINDOWS) [ CD ]
Line_24 $$ if (inputClassPath != null && !inputClassPath.isEmpty()) -->Line_37 $$ String classPathJar = FileUtil.createJarWithClassPath(newClassPath.toString(), pwd, mergedEnv)[ CD ]
Line_41 $$ for (Map.Entry<String, ByteBuffer> meta : containerManager.getAuxServiceMetaData().entrySet()) -->Line_42 $$ AuxiliaryServiceHelper.setServiceDataIntoEnv(meta.getKey(), meta.getValue(), environment)[ FD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_3 $$ environment.put(Environment.CONTAINER_ID.name(), container.getContainerId().toString())[ FD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_13 $$ putEnvIfNotNull(environment, Environment.HADOOP_CONF_DIR.name(), System.getenv(Environment.HADOOP_CONF_DIR.name()))[ FD ]
Line_22 $$ if (Shell.WINDOWS) -->Line_23 $$ String inputClassPath = environment.get(Environment.CLASSPATH.name())[ CD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_10 $$ environment.put(Environment.LOGNAME.name(), container.getUser())[ FD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_7 $$ environment.put(Environment.LOCAL_DIRS.name(), StringUtils.join(",", appDirs))[ CD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_3 $$ environment.put(Environment.CONTAINER_ID.name(), container.getContainerId().toString())[ CD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_9 $$ environment.put(Environment.USER.name(), container.getUser())[ CD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_8 $$ environment.put(Environment.LOG_DIRS.name(), StringUtils.join(",", containerLogDirs))[ CD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_6 $$ environment.put(Environment.NM_HTTP_PORT.name(), String.valueOf(this.context.getHttpPort()))[ CD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_19 $$ putEnvIfAbsent(environment, whitelistEnvVariable.trim())[ FD ]
Line_24 $$ if (inputClassPath != null && !inputClassPath.isEmpty()) -->Line_36 $$ mergedEnv.putAll(environment)[ CD ]
Line_30 $$ if (targetIsDirectory) -->Line_31 $$ newClassPath.append(Path.SEPARATOR)[ CD ]
Line_35 $$ Map<String, String> mergedEnv = new HashMap<String, String>(System.getenv())-->Line_37 $$ String classPathJar = FileUtil.createJarWithClassPath(newClassPath.toString(), pwd, mergedEnv)[ FD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_17 $$ String[] whitelist = conf.get(YarnConfiguration.NM_ENV_WHITELIST, YarnConfiguration.DEFAULT_NM_ENV_WHITELIST).split(",")[ CD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_11 $$ environment.put(Environment.HOME.name(), conf.get(YarnConfiguration.NM_USER_HOME_DIR, YarnConfiguration.DEFAULT_NM_USER_HOME_DIR))[ FD ]
Line_18 $$ for (String whitelistEnvVariable : whitelist) -->Line_19 $$ putEnvIfAbsent(environment, whitelistEnvVariable.trim())[ FD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_11 $$ environment.put(Environment.HOME.name(), conf.get(YarnConfiguration.NM_USER_HOME_DIR, YarnConfiguration.DEFAULT_NM_USER_HOME_DIR))[ CD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_6 $$ environment.put(Environment.NM_HTTP_PORT.name(), String.valueOf(this.context.getHttpPort()))[ FD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_26 $$ for (Map.Entry<Path, List<String>> entry : resources.entrySet()) [ FD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_5 $$ environment.put(Environment.NM_HOST.name(), this.context.getNodeId().getHost())[ CD ]
Line_35 $$ Map<String, String> mergedEnv = new HashMap<String, String>(System.getenv())-->Line_36 $$ mergedEnv.putAll(environment)[ FD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_37 $$ String classPathJar = FileUtil.createJarWithClassPath(newClassPath.toString(), pwd, mergedEnv)[ FD ]
Line_37 $$ String classPathJar = FileUtil.createJarWithClassPath(newClassPath.toString(), pwd, mergedEnv)-->Line_38 $$ environment.put(Environment.CLASSPATH.name(), classPathJar)[ FD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_9 $$ environment.put(Environment.USER.name(), container.getUser())[ FD ]
Line_26 $$ for (Map.Entry<Path, List<String>> entry : resources.entrySet()) -->Line_27 $$ boolean targetIsDirectory = new File(entry.getKey().toUri().getPath()).isDirectory()[ FD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_38 $$ environment.put(Environment.CLASSPATH.name(), classPathJar)[ FD ]
Line_25 $$ StringBuilder newClassPath = new StringBuilder(inputClassPath)-->Line_31 $$ newClassPath.append(Path.SEPARATOR)[ FD ]
Line_25 $$ StringBuilder newClassPath = new StringBuilder(inputClassPath)-->Line_29 $$ newClassPath.append(File.pathSeparator).append(pwd.toString()).append(Path.SEPARATOR).append(linkName)[ FD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_12 $$ environment.put(Environment.PWD.name(), pwd.toString())[ CD ]
Line_28 $$ for (String linkName : entry.getValue()) -->Line_29 $$ newClassPath.append(File.pathSeparator).append(pwd.toString()).append(Path.SEPARATOR).append(linkName)[ FD ]
Line_23 $$ String inputClassPath = environment.get(Environment.CLASSPATH.name())-->Line_24 $$ if (inputClassPath != null && !inputClassPath.isEmpty()) [ FD ]
Line_22 $$ if (Shell.WINDOWS) -->Line_24 $$ if (inputClassPath != null && !inputClassPath.isEmpty()) [ CD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_22 $$ if (Shell.WINDOWS) [ CD ]
Line_24 $$ if (inputClassPath != null && !inputClassPath.isEmpty()) -->Line_35 $$ Map<String, String> mergedEnv = new HashMap<String, String>(System.getenv())[ CD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_29 $$ newClassPath.append(File.pathSeparator).append(pwd.toString()).append(Path.SEPARATOR).append(linkName)[ FD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_4 $$ environment.put(Environment.NM_PORT.name(), String.valueOf(this.context.getNodeId().getPort()))[ FD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_23 $$ String inputClassPath = environment.get(Environment.CLASSPATH.name())[ FD ]
Line_25 $$ StringBuilder newClassPath = new StringBuilder(inputClassPath)-->Line_37 $$ String classPathJar = FileUtil.createJarWithClassPath(newClassPath.toString(), pwd, mergedEnv)[ FD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_7 $$ environment.put(Environment.LOCAL_DIRS.name(), StringUtils.join(",", appDirs))[ FD ]
Line_2 $$ public void sanitizeEnv(Map<String, String> environment, Path pwd, List<Path> appDirs, List<String> containerLogDirs, Map<Path, List<String>> resources) throws IOException -->Line_21 $$ Apps.setEnvFromInputString(environment, conf.get(YarnConfiguration.NM_ADMIN_USER_ENV, YarnConfiguration.DEFAULT_NM_ADMIN_USER_ENV), File.pathSeparator)[ CD ]
