Line_2 $$ public void setGenericPropertyContainingMap() -->Line_3 $$ Map<String, String> property = new HashMap<String, String>()[ CD ]
Line_7 $$ Expression expression = parser.parseExpression("property")-->Line_9 $$ assertEquals(property, expression.getValue(this))[ FD ]
Line_2 $$ public void setGenericPropertyContainingMap() -->Line_7 $$ Expression expression = parser.parseExpression("property")[ CD ]
Line_2 $$ public void setGenericPropertyContainingMap() -->Line_8 $$ assertEquals("@org.springframework.expression.spel.IndexingTests$FieldAnnotation java.util.HashMap<?, ?>", expression.getValueTypeDescriptor(this).toString())[ CD ]
Line_2 $$ public void setGenericPropertyContainingMap() -->Line_13 $$ assertEquals("baz", expression.getValue(this))[ CD ]
Line_2 $$ public void setGenericPropertyContainingMap() -->Line_12 $$ expression.setValue(this, "baz")[ CD ]
Line_3 $$ Map<String, String> property = new HashMap<String, String>()-->Line_9 $$ assertEquals(property, expression.getValue(this))[ FD ]
Line_2 $$ public void setGenericPropertyContainingMap() -->Line_6 $$ SpelExpressionParser parser = new SpelExpressionParser()[ CD ]
Line_2 $$ public void setGenericPropertyContainingMap() -->Line_10 $$ expression = parser.parseExpression("property['foo']")[ CD ]
Line_3 $$ Map<String, String> property = new HashMap<String, String>()-->Line_5 $$ this.property = property[ FD ]
Line_2 $$ public void setGenericPropertyContainingMap() -->Line_11 $$ assertEquals("bar", expression.getValue(this))[ CD ]
Line_3 $$ Map<String, String> property = new HashMap<String, String>()-->Line_4 $$ property.put("foo", "bar")[ FD ]
Line_7 $$ Expression expression = parser.parseExpression("property")-->Line_12 $$ expression.setValue(this, "baz")[ FD ]
Line_6 $$ SpelExpressionParser parser = new SpelExpressionParser()-->Line_7 $$ Expression expression = parser.parseExpression("property")[ FD ]
Line_2 $$ public void setGenericPropertyContainingMap() -->Line_4 $$ property.put("foo", "bar")[ CD ]
Line_2 $$ public void setGenericPropertyContainingMap() -->Line_9 $$ assertEquals(property, expression.getValue(this))[ CD ]
Line_7 $$ Expression expression = parser.parseExpression("property")-->Line_10 $$ expression = parser.parseExpression("property['foo']")[ FD ]
Line_10 $$ expression = parser.parseExpression("property['foo']")-->Line_12 $$ expression.setValue(this, "baz")[ FD ]
Line_10 $$ expression = parser.parseExpression("property['foo']")-->Line_11 $$ assertEquals("bar", expression.getValue(this))[ FD ]
Line_7 $$ Expression expression = parser.parseExpression("property")-->Line_8 $$ assertEquals("@org.springframework.expression.spel.IndexingTests$FieldAnnotation java.util.HashMap<?, ?>", expression.getValueTypeDescriptor(this).toString())[ FD ]
Line_6 $$ SpelExpressionParser parser = new SpelExpressionParser()-->Line_10 $$ expression = parser.parseExpression("property['foo']")[ FD ]
Line_7 $$ Expression expression = parser.parseExpression("property")-->Line_13 $$ assertEquals("baz", expression.getValue(this))[ FD ]
Line_7 $$ Expression expression = parser.parseExpression("property")-->Line_11 $$ assertEquals("bar", expression.getValue(this))[ FD ]
Line_10 $$ expression = parser.parseExpression("property['foo']")-->Line_13 $$ assertEquals("baz", expression.getValue(this))[ FD ]
Line_2 $$ public void setGenericPropertyContainingMap() -->Line_5 $$ this.property = property[ CD ]
