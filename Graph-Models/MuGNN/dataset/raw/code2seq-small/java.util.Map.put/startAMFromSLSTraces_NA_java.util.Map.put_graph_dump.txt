Line_9 $$ while (i.hasNext()) -->Line_12 $$ long jobFinishTime = Long.parseLong(jsonJob.get("job.end.ms").toString())[ CD ]
Line_11 $$ long jobStartTime = Long.parseLong(jsonJob.get("job.start.ms").toString())-->Line_40 $$ amSim.init(AM_ID++, heartbeatInterval, containerList, rm, this, jobStartTime, jobFinishTime, user, queue, isTracked, oldAppId)[ FD ]
Line_38 $$ AMSimulator amSim = (AMSimulator) ReflectionUtils.newInstance(amClassMap.get(amType), new Configuration())-->Line_41 $$ runner.schedule(amSim)[ FD ]
Line_38 $$ AMSimulator amSim = (AMSimulator) ReflectionUtils.newInstance(amClassMap.get(amType), new Configuration())-->Line_44 $$ amMap.put(oldAppId, amSim)[ FD ]
Line_10 $$ Map jsonJob = i.next()-->Line_16 $$ String queue = jsonJob.get("job.queue.name").toString()[ FD ]
Line_10 $$ Map jsonJob = i.next()-->Line_17 $$ String oldAppId = jsonJob.get("job.id").toString()[ FD ]
Line_15 $$ user = "default"-->Line_40 $$ amSim.init(AM_ID++, heartbeatInterval, containerList, rm, this, jobStartTime, jobFinishTime, user, queue, isTracked, oldAppId)[ FD ]
Line_16 $$ String queue = jsonJob.get("job.queue.name").toString()-->Line_19 $$ int queueSize = queueAppNumMap.containsKey(queue) ? queueAppNumMap.get(queue) : 0[ FD ]
Line_2 $$ private void startAMFromSLSTraces(Resource containerResource, int heartbeatInterval) throws IOException -->Line_40 $$ amSim.init(AM_ID++, heartbeatInterval, containerList, rm, this, jobStartTime, jobFinishTime, user, queue, isTracked, oldAppId)[ FD ]
Line_39 $$ if (amSim != null) -->Line_41 $$ runner.schedule(amSim)[ CD ]
Line_18 $$ boolean isTracked = trackedApps.contains(oldAppId)-->Line_40 $$ amSim.init(AM_ID++, heartbeatInterval, containerList, rm, this, jobStartTime, jobFinishTime, user, queue, isTracked, oldAppId)[ FD ]
Line_3 $$ JsonFactory jsonF = new JsonFactory()-->Line_8 $$ Iterator<Map> i = mapper.readValues(jsonF.createJsonParser(input), Map.class)[ FD ]
Line_13 $$ String user = (String) jsonJob.get("job.user")-->Line_15 $$ user = "default"[ FD ]
Line_16 $$ String queue = jsonJob.get("job.queue.name").toString()-->Line_21 $$ queueAppNumMap.put(queue, queueSize)[ FD ]
Line_8 $$ Iterator<Map> i = mapper.readValues(jsonF.createJsonParser(input), Map.class)-->Line_9 $$ while (i.hasNext()) [ FD ]
Line_38 $$ AMSimulator amSim = (AMSimulator) ReflectionUtils.newInstance(amClassMap.get(amType), new Configuration())-->Line_40 $$ amSim.init(AM_ID++, heartbeatInterval, containerList, rm, this, jobStartTime, jobFinishTime, user, queue, isTracked, oldAppId)[ FD ]
Line_10 $$ Map jsonJob = i.next()-->Line_12 $$ long jobFinishTime = Long.parseLong(jsonJob.get("job.end.ms").toString())[ FD ]
Line_17 $$ String oldAppId = jsonJob.get("job.id").toString()-->Line_18 $$ boolean isTracked = trackedApps.contains(oldAppId)[ FD ]
Line_9 $$ while (i.hasNext()) -->Line_22 $$ List tasks = (List) jsonJob.get("job.tasks")[ CD ]
Line_15 $$ user = "default"-->Line_14 $$ if (user == null)[ FD ]
Line_9 $$ while (i.hasNext()) -->Line_18 $$ boolean isTracked = trackedApps.contains(oldAppId)[ CD ]
Line_6 $$ Reader input = new FileReader(inputTrace)-->Line_8 $$ Iterator<Map> i = mapper.readValues(jsonF.createJsonParser(input), Map.class)[ FD ]
Line_2 $$ private void startAMFromSLSTraces(Resource containerResource, int heartbeatInterval) throws IOException -->Line_3 $$ JsonFactory jsonF = new JsonFactory()[ CD ]
Line_10 $$ Map jsonJob = i.next()-->Line_37 $$ String amType = jsonJob.get("am.type").toString()[ FD ]
Line_28 $$ Map jsonTask = (Map) o-->Line_31 $$ long taskFinish = Long.parseLong(jsonTask.get("container.end.ms").toString())[ FD ]
Line_2 $$ private void startAMFromSLSTraces(Resource containerResource, int heartbeatInterval) throws IOException -->Line_4 $$ ObjectMapper mapper = new ObjectMapper()[ CD ]
Line_37 $$ String amType = jsonJob.get("am.type").toString()-->Line_38 $$ AMSimulator amSim = (AMSimulator) ReflectionUtils.newInstance(amClassMap.get(amType), new Configuration())[ FD ]
Line_9 $$ while (i.hasNext()) -->Line_26 $$ List<ContainerSimulator> containerList = new ArrayList<ContainerSimulator>()[ CD ]
Line_9 $$ while (i.hasNext()) -->Line_20 $$ queueSize++[ CD ]
Line_26 $$ List<ContainerSimulator> containerList = new ArrayList<ContainerSimulator>()-->Line_43 $$ numTasks += containerList.size()[ FD ]
Line_9 $$ while (i.hasNext()) -->Line_10 $$ Map jsonJob = i.next()[ CD ]
Line_9 $$ while (i.hasNext()) -->Line_11 $$ long jobStartTime = Long.parseLong(jsonJob.get("job.start.ms").toString())[ CD ]
Line_10 $$ Map jsonJob = i.next()-->Line_13 $$ String user = (String) jsonJob.get("job.user")[ FD ]
Line_17 $$ String oldAppId = jsonJob.get("job.id").toString()-->Line_44 $$ amMap.put(oldAppId, amSim)[ FD ]
Line_9 $$ while (i.hasNext()) -->Line_21 $$ queueAppNumMap.put(queue, queueSize)[ CD ]
Line_12 $$ long jobFinishTime = Long.parseLong(jsonJob.get("job.end.ms").toString())-->Line_42 $$ maxRuntime = Math.max(maxRuntime, jobFinishTime)[ FD ]
Line_14 $$ if (user == null)-->Line_15 $$ user = "default"[ CD ]
Line_17 $$ String oldAppId = jsonJob.get("job.id").toString()-->Line_40 $$ amSim.init(AM_ID++, heartbeatInterval, containerList, rm, this, jobStartTime, jobFinishTime, user, queue, isTracked, oldAppId)[ FD ]
Line_9 $$ while (i.hasNext()) -->Line_13 $$ String user = (String) jsonJob.get("job.user")[ CD ]
Line_10 $$ Map jsonJob = i.next()-->Line_11 $$ long jobStartTime = Long.parseLong(jsonJob.get("job.start.ms").toString())[ FD ]
Line_19 $$ int queueSize = queueAppNumMap.containsKey(queue) ? queueAppNumMap.get(queue) : 0-->Line_20 $$ queueSize++[ FD ]
Line_9 $$ while (i.hasNext()) -->Line_16 $$ String queue = jsonJob.get("job.queue.name").toString()[ CD ]
Line_28 $$ Map jsonTask = (Map) o-->Line_34 $$ String type = jsonTask.get("container.type").toString()[ FD ]
Line_12 $$ long jobFinishTime = Long.parseLong(jsonJob.get("job.end.ms").toString())-->Line_40 $$ amSim.init(AM_ID++, heartbeatInterval, containerList, rm, this, jobStartTime, jobFinishTime, user, queue, isTracked, oldAppId)[ FD ]
Line_39 $$ if (amSim != null) -->Line_43 $$ numTasks += containerList.size()[ CD ]
Line_39 $$ if (amSim != null) -->Line_44 $$ amMap.put(oldAppId, amSim)[ CD ]
Line_26 $$ List<ContainerSimulator> containerList = new ArrayList<ContainerSimulator>()-->Line_35 $$ containerList.add(new ContainerSimulator(containerResource, lifeTime, hostname, priority, type))[ FD ]
Line_39 $$ if (amSim != null) -->Line_42 $$ maxRuntime = Math.max(maxRuntime, jobFinishTime)[ CD ]
Line_10 $$ Map jsonJob = i.next()-->Line_22 $$ List tasks = (List) jsonJob.get("job.tasks")[ FD ]
Line_22 $$ List tasks = (List) jsonJob.get("job.tasks")-->Line_23 $$ if (tasks == null || tasks.size() == 0) [ FD ]
Line_6 $$ Reader input = new FileReader(inputTrace)-->Line_48 $$ input.close()[ FD ]
Line_9 $$ while (i.hasNext()) -->Line_17 $$ String oldAppId = jsonJob.get("job.id").toString()[ CD ]
Line_9 $$ while (i.hasNext()) -->Line_38 $$ AMSimulator amSim = (AMSimulator) ReflectionUtils.newInstance(amClassMap.get(amType), new Configuration())[ CD ]
Line_9 $$ while (i.hasNext()) -->Line_23 $$ if (tasks == null || tasks.size() == 0) [ CD ]
Line_4 $$ ObjectMapper mapper = new ObjectMapper()-->Line_8 $$ Iterator<Map> i = mapper.readValues(jsonF.createJsonParser(input), Map.class)[ FD ]
Line_28 $$ Map jsonTask = (Map) o-->Line_29 $$ String hostname = jsonTask.get("container.host").toString()[ FD ]
Line_9 $$ while (i.hasNext()) -->Line_39 $$ if (amSim != null) [ CD ]
Line_13 $$ String user = (String) jsonJob.get("job.user")-->Line_40 $$ amSim.init(AM_ID++, heartbeatInterval, containerList, rm, this, jobStartTime, jobFinishTime, user, queue, isTracked, oldAppId)[ FD ]
Line_9 $$ while (i.hasNext()) -->Line_37 $$ String amType = jsonJob.get("am.type").toString()[ CD ]
Line_8 $$ Iterator<Map> i = mapper.readValues(jsonF.createJsonParser(input), Map.class)-->Line_10 $$ Map jsonJob = i.next()[ FD ]
Line_26 $$ List<ContainerSimulator> containerList = new ArrayList<ContainerSimulator>()-->Line_40 $$ amSim.init(AM_ID++, heartbeatInterval, containerList, rm, this, jobStartTime, jobFinishTime, user, queue, isTracked, oldAppId)[ FD ]
Line_13 $$ String user = (String) jsonJob.get("job.user")-->Line_14 $$ if (user == null)[ FD ]
Line_38 $$ AMSimulator amSim = (AMSimulator) ReflectionUtils.newInstance(amClassMap.get(amType), new Configuration())-->Line_39 $$ if (amSim != null) [ FD ]
Line_9 $$ while (i.hasNext()) -->Line_19 $$ int queueSize = queueAppNumMap.containsKey(queue) ? queueAppNumMap.get(queue) : 0[ CD ]
Line_9 $$ while (i.hasNext()) -->Line_14 $$ if (user == null)[ CD ]
Line_28 $$ Map jsonTask = (Map) o-->Line_33 $$ int priority = Integer.parseInt(jsonTask.get("container.priority").toString())[ FD ]
Line_39 $$ if (amSim != null) -->Line_40 $$ amSim.init(AM_ID++, heartbeatInterval, containerList, rm, this, jobStartTime, jobFinishTime, user, queue, isTracked, oldAppId)[ CD ]
Line_19 $$ int queueSize = queueAppNumMap.containsKey(queue) ? queueAppNumMap.get(queue) : 0-->Line_21 $$ queueAppNumMap.put(queue, queueSize)[ FD ]
Line_28 $$ Map jsonTask = (Map) o-->Line_30 $$ long taskStart = Long.parseLong(jsonTask.get("container.start.ms").toString())[ FD ]
Line_16 $$ String queue = jsonJob.get("job.queue.name").toString()-->Line_40 $$ amSim.init(AM_ID++, heartbeatInterval, containerList, rm, this, jobStartTime, jobFinishTime, user, queue, isTracked, oldAppId)[ FD ]
