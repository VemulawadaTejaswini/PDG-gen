Line_2 $$ public void testGroovyScriptWithArguments() -->Line_7 $$ Object result = evaluator.evaluate(new StaticScriptSource("return a * b;"), arguments)[ CD ]
Line_7 $$ Object result = evaluator.evaluate(new StaticScriptSource("return a * b;"), arguments)-->Line_8 $$ assertEquals(6, result)[ FD ]
Line_4 $$ Map<String, Object> arguments = new HashMap<String, Object>()-->Line_7 $$ Object result = evaluator.evaluate(new StaticScriptSource("return a * b;"), arguments)[ FD ]
Line_2 $$ public void testGroovyScriptWithArguments() -->Line_3 $$ ScriptEvaluator evaluator = new BshScriptEvaluator()[ CD ]
Line_3 $$ ScriptEvaluator evaluator = new BshScriptEvaluator()-->Line_7 $$ Object result = evaluator.evaluate(new StaticScriptSource("return a * b;"), arguments)[ FD ]
Line_2 $$ public void testGroovyScriptWithArguments() -->Line_8 $$ assertEquals(6, result)[ CD ]
Line_2 $$ public void testGroovyScriptWithArguments() -->Line_6 $$ arguments.put("b", 2)[ CD ]
Line_2 $$ public void testGroovyScriptWithArguments() -->Line_4 $$ Map<String, Object> arguments = new HashMap<String, Object>()[ CD ]
Line_2 $$ public void testGroovyScriptWithArguments() -->Line_5 $$ arguments.put("a", 3)[ CD ]
Line_4 $$ Map<String, Object> arguments = new HashMap<String, Object>()-->Line_5 $$ arguments.put("a", 3)[ FD ]
Line_4 $$ Map<String, Object> arguments = new HashMap<String, Object>()-->Line_6 $$ arguments.put("b", 2)[ FD ]
