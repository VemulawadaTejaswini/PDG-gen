Line_9 $$ namedParameterTemplate.query(SELECT_NAMED_PARAMETERS, params, new RowCallbackHandler() -->Line_13 $$ cust.setForename(rs.getString(COLUMN_NAMES[1]))[ FD ]
Line_2 $$ public void testQueryWithRowCallbackHandler() throws SQLException -->Line_24 $$ verify(connection).close()[ CD ]
Line_8 $$ final List<Customer> customers = new LinkedList<Customer>()-->Line_17 $$ assertEquals(1, customers.size())[ FD ]
Line_8 $$ final List<Customer> customers = new LinkedList<Customer>()-->Line_14 $$ customers.add(cust)[ FD ]
Line_2 $$ public void testQueryWithRowCallbackHandler() throws SQLException -->Line_3 $$ given(resultSet.next()).willReturn(true, false)[ CD ]
Line_2 $$ public void testQueryWithRowCallbackHandler() throws SQLException -->Line_8 $$ final List<Customer> customers = new LinkedList<Customer>()[ CD ]
Line_2 $$ public void testQueryWithRowCallbackHandler() throws SQLException -->Line_22 $$ verify(preparedStatement).setString(2, "UK")[ CD ]
Line_9 $$ namedParameterTemplate.query(SELECT_NAMED_PARAMETERS, params, new RowCallbackHandler() -->Line_12 $$ cust.setId(rs.getInt(COLUMN_NAMES[0]))[ CD ]
Line_2 $$ public void testQueryWithRowCallbackHandler() throws SQLException -->Line_18 $$ assertTrue("Customer id was assigned correctly", customers.get(0).getId() == 1)[ CD ]
Line_8 $$ final List<Customer> customers = new LinkedList<Customer>()-->Line_19 $$ assertTrue("Customer forename was assigned correctly", customers.get(0).getForename().equals("rod"))[ FD ]
Line_2 $$ public void testQueryWithRowCallbackHandler() throws SQLException -->Line_5 $$ given(resultSet.getString("forename")).willReturn("rod")[ CD ]
Line_2 $$ public void testQueryWithRowCallbackHandler() throws SQLException -->Line_7 $$ params.put("country", "UK")[ CD ]
Line_2 $$ public void testQueryWithRowCallbackHandler() throws SQLException -->Line_6 $$ params.put("id", new SqlParameterValue(Types.DECIMAL, 1))[ CD ]
Line_2 $$ public void testQueryWithRowCallbackHandler() throws SQLException -->Line_9 $$ namedParameterTemplate.query(SELECT_NAMED_PARAMETERS, params, new RowCallbackHandler() [ CD ]
Line_2 $$ public void testQueryWithRowCallbackHandler() throws SQLException -->Line_17 $$ assertEquals(1, customers.size())[ CD ]
Line_2 $$ public void testQueryWithRowCallbackHandler() throws SQLException -->Line_4 $$ given(resultSet.getInt("id")).willReturn(1)[ CD ]
Line_11 $$ Customer cust = new Customer()-->Line_14 $$ customers.add(cust)[ FD ]
Line_9 $$ namedParameterTemplate.query(SELECT_NAMED_PARAMETERS, params, new RowCallbackHandler() -->Line_11 $$ Customer cust = new Customer()[ CD ]
Line_11 $$ Customer cust = new Customer()-->Line_12 $$ cust.setId(rs.getInt(COLUMN_NAMES[0]))[ FD ]
Line_9 $$ namedParameterTemplate.query(SELECT_NAMED_PARAMETERS, params, new RowCallbackHandler() -->Line_13 $$ cust.setForename(rs.getString(COLUMN_NAMES[1]))[ CD ]
Line_2 $$ public void testQueryWithRowCallbackHandler() throws SQLException -->Line_21 $$ verify(preparedStatement).setObject(1, 1, Types.DECIMAL)[ CD ]
Line_9 $$ namedParameterTemplate.query(SELECT_NAMED_PARAMETERS, params, new RowCallbackHandler() -->Line_14 $$ customers.add(cust)[ CD ]
Line_2 $$ public void testQueryWithRowCallbackHandler() throws SQLException -->Line_23 $$ verify(preparedStatement).close()[ CD ]
Line_2 $$ public void testQueryWithRowCallbackHandler() throws SQLException -->Line_20 $$ verify(connection).prepareStatement(SELECT_NAMED_PARAMETERS_PARSED)[ CD ]
Line_2 $$ public void testQueryWithRowCallbackHandler() throws SQLException -->Line_19 $$ assertTrue("Customer forename was assigned correctly", customers.get(0).getForename().equals("rod"))[ CD ]
Line_9 $$ namedParameterTemplate.query(SELECT_NAMED_PARAMETERS, params, new RowCallbackHandler() -->Line_12 $$ cust.setId(rs.getInt(COLUMN_NAMES[0]))[ FD ]
Line_11 $$ Customer cust = new Customer()-->Line_13 $$ cust.setForename(rs.getString(COLUMN_NAMES[1]))[ FD ]
Line_8 $$ final List<Customer> customers = new LinkedList<Customer>()-->Line_18 $$ assertTrue("Customer id was assigned correctly", customers.get(0).getId() == 1)[ FD ]
