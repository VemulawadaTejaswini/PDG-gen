Line_3 $$ if (text.isEmpty())-->Line_4 $$ return Collections.emptyMap()[ CD ]
Line_2 $$ private static Map<String, String> parseAttributes(@NotNull String text) -->Line_5 $$ Matcher matcher = ATTRIBUTE_PATTERN.matcher(text)[ FD ]
Line_2 $$ private static Map<String, String> parseAttributes(@NotNull String text) -->Line_3 $$ if (text.isEmpty())[ FD ]
Line_2 $$ private static Map<String, String> parseAttributes(@NotNull String text) -->Line_8 $$ return result[ CD ]
Line_2 $$ private static Map<String, String> parseAttributes(@NotNull String text) -->Line_3 $$ if (text.isEmpty())[ CD ]
Line_5 $$ Matcher matcher = ATTRIBUTE_PATTERN.matcher(text)-->Line_7 $$ result.put(matcher.group(1), matcher.group(2))[ FD ]
Line_2 $$ private static Map<String, String> parseAttributes(@NotNull String text) -->Line_7 $$ while (matcher.find()) result.put(matcher.group(1), matcher.group(2))[ CD ]
Line_2 $$ private static Map<String, String> parseAttributes(@NotNull String text) -->Line_5 $$ Matcher matcher = ATTRIBUTE_PATTERN.matcher(text)[ CD ]
Line_6 $$ Map<String, String> result = ContainerUtil.newLinkedHashMap()-->Line_7 $$ result.put(matcher.group(1), matcher.group(2))[ FD ]
Line_5 $$ Matcher matcher = ATTRIBUTE_PATTERN.matcher(text)-->Line_7 $$ while (matcher.find()) result.put(matcher.group(1), matcher.group(2))[ FD ]
Line_2 $$ private static Map<String, String> parseAttributes(@NotNull String text) -->Line_6 $$ Map<String, String> result = ContainerUtil.newLinkedHashMap()[ CD ]
