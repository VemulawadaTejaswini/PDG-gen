Line_6 $$ ProjectRootManagerEx.getInstanceEx(myProject).makeRootsChange(new Runnable() -->Line_8 $$ fireModulesRenamed(Collections.singletonList(module), Collections.singletonMap(module, oldName))[ CD ]
Line_2 $$ public void fireModuleRenamedByVfsEvent(@NotNull final Module module, @NotNull final String oldName) -->Line_5 $$ myModuleModel.myModules.put(module.getName(), module)[ CD ]
Line_2 $$ public void fireModuleRenamedByVfsEvent(@NotNull final Module module, @NotNull final String oldName) -->Line_5 $$ myModuleModel.myModules.put(module.getName(), module)[ FD ]
Line_2 $$ public void fireModuleRenamedByVfsEvent(@NotNull final Module module, @NotNull final String oldName) -->Line_4 $$ LOG.assertTrue(moduleInMap == null || moduleInMap == module)[ CD ]
Line_2 $$ public void fireModuleRenamedByVfsEvent(@NotNull final Module module, @NotNull final String oldName) -->Line_3 $$ Module moduleInMap = myModuleModel.myModules.remove(oldName)[ FD ]
Line_2 $$ public void fireModuleRenamedByVfsEvent(@NotNull final Module module, @NotNull final String oldName) -->Line_6 $$ ProjectRootManagerEx.getInstanceEx(myProject).makeRootsChange(new Runnable() [ CD ]
Line_2 $$ public void fireModuleRenamedByVfsEvent(@NotNull final Module module, @NotNull final String oldName) -->Line_3 $$ Module moduleInMap = myModuleModel.myModules.remove(oldName)[ CD ]
Line_2 $$ public void fireModuleRenamedByVfsEvent(@NotNull final Module module, @NotNull final String oldName) -->Line_8 $$ fireModulesRenamed(Collections.singletonList(module), Collections.singletonMap(module, oldName))[ FD ]
