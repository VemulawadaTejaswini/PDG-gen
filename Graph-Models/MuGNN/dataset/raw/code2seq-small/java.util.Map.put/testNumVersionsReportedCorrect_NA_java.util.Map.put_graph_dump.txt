Line_2 $$ public void testNumVersionsReportedCorrect() throws IOException -->Line_5 $$ DatanodeManager dm = new DatanodeManager(Mockito.mock(BlockManager.class), fsn, new Configuration())[ CD ]
Line_14 $$ Iterator<Map.Entry<String, DatanodeRegistration>> it = sIdToDnReg.entrySet().iterator()-->Line_18 $$ DatanodeRegistration toRemove = it.next().getValue()[ FD ]
Line_12 $$ if (rng.nextBoolean() && i % 3 == 0 && sIdToDnReg.size() != 0) -->Line_18 $$ DatanodeRegistration toRemove = it.next().getValue()[ CD ]
Line_12 $$ if (rng.nextBoolean() && i % 3 == 0 && sIdToDnReg.size() != 0) -->Line_14 $$ Iterator<Map.Entry<String, DatanodeRegistration>> it = sIdToDnReg.entrySet().iterator()[ CD ]
Line_11 $$ for (int i = 0; i < NUM_ITERATIONS; ++i) -->Line_12 $$ if (rng.nextBoolean() && i % 3 == 0 && sIdToDnReg.size() != 0) [ CD ]
Line_10 $$ HashMap<String, DatanodeRegistration> sIdToDnReg = new HashMap<String, DatanodeRegistration>()-->Line_12 $$ if (rng.nextBoolean() && i % 3 == 0 && sIdToDnReg.size() != 0) [ FD ]
Line_12 $$ if (rng.nextBoolean() && i % 3 == 0 && sIdToDnReg.size() != 0) -->Line_25 $$ DatanodeRegistration dr = Mockito.mock(DatanodeRegistration.class)[ CD ]
Line_12 $$ if (rng.nextBoolean() && i % 3 == 0 && sIdToDnReg.size() != 0) -->Line_26 $$ Mockito.when(dr.getDatanodeUuid()).thenReturn(storageID)[ CD ]
Line_2 $$ public void testNumVersionsReportedCorrect() throws IOException -->Line_3 $$ FSNamesystem fsn = Mockito.mock(FSNamesystem.class)[ CD ]
Line_12 $$ if (rng.nextBoolean() && i % 3 == 0 && sIdToDnReg.size() != 0) -->Line_41 $$ sIdToDnReg.put(storageID, dr)[ CD ]
Line_12 $$ if (rng.nextBoolean() && i % 3 == 0 && sIdToDnReg.size() != 0) -->Line_15 $$ for (int j = 0; j < randomIndex - 1; ++j) [ CD ]
Line_5 $$ DatanodeManager dm = new DatanodeManager(Mockito.mock(BlockManager.class), fsn, new Configuration())-->Line_20 $$ dm.removeDatanode(toRemove)[ FD ]
Line_12 $$ if (rng.nextBoolean() && i % 3 == 0 && sIdToDnReg.size() != 0) -->Line_21 $$ it.remove()[ CD ]
Line_6 $$ Random rng = new Random()-->Line_24 $$ String storageID = "someStorageID" + rng.nextInt(5000)[ FD ]
Line_10 $$ HashMap<String, DatanodeRegistration> sIdToDnReg = new HashMap<String, DatanodeRegistration>()-->Line_28 $$ dr = sIdToDnReg.get(storageID)[ FD ]
Line_8 $$ rng = new Random(seed)-->Line_38 $$ Mockito.when(dr.getSoftwareVersion()).thenReturn("version" + rng.nextInt(5))[ FD ]
Line_6 $$ Random rng = new Random()-->Line_13 $$ int randomIndex = rng.nextInt() % sIdToDnReg.size()[ FD ]
Line_2 $$ public void testNumVersionsReportedCorrect() throws IOException -->Line_8 $$ rng = new Random(seed)[ CD ]
Line_15 $$ for (int j = 0; j < randomIndex - 1; ++j) -->Line_16 $$ it.next()[ CD ]
Line_27 $$ if (sIdToDnReg.containsKey(storageID)) -->Line_35 $$ Mockito.when(dr.getXferAddr()).thenReturn(ip + ":9000")[ CD ]
Line_12 $$ if (rng.nextBoolean() && i % 3 == 0 && sIdToDnReg.size() != 0) -->Line_27 $$ if (sIdToDnReg.containsKey(storageID)) [ CD ]
Line_12 $$ if (rng.nextBoolean() && i % 3 == 0 && sIdToDnReg.size() != 0) -->Line_38 $$ Mockito.when(dr.getSoftwareVersion()).thenReturn("version" + rng.nextInt(5))[ CD ]
Line_14 $$ Iterator<Map.Entry<String, DatanodeRegistration>> it = sIdToDnReg.entrySet().iterator()-->Line_45 $$ String ver = it.getValue().getSoftwareVersion()[ FD ]
Line_12 $$ if (rng.nextBoolean() && i % 3 == 0 && sIdToDnReg.size() != 0) -->Line_20 $$ dm.removeDatanode(toRemove)[ CD ]
Line_8 $$ rng = new Random(seed)-->Line_29 $$ if (rng.nextBoolean()) [ FD ]
Line_6 $$ Random rng = new Random()-->Line_38 $$ Mockito.when(dr.getSoftwareVersion()).thenReturn("version" + rng.nextInt(5))[ FD ]
Line_10 $$ HashMap<String, DatanodeRegistration> sIdToDnReg = new HashMap<String, DatanodeRegistration>()-->Line_44 $$ for (Entry<String, DatanodeRegistration> it : sIdToDnReg.entrySet()) [ FD ]
Line_5 $$ DatanodeManager dm = new DatanodeManager(Mockito.mock(BlockManager.class), fsn, new Configuration())-->Line_40 $$ dm.registerDatanode(dr)[ FD ]
Line_27 $$ if (sIdToDnReg.containsKey(storageID)) -->Line_29 $$ if (rng.nextBoolean()) [ CD ]
Line_8 $$ rng = new Random(seed)-->Line_12 $$ if (rng.nextBoolean() && i % 3 == 0 && sIdToDnReg.size() != 0) [ FD ]
Line_2 $$ public void testNumVersionsReportedCorrect() throws IOException -->Line_4 $$ Mockito.when(fsn.hasWriteLock()).thenReturn(true)[ CD ]
Line_10 $$ HashMap<String, DatanodeRegistration> sIdToDnReg = new HashMap<String, DatanodeRegistration>()-->Line_14 $$ Iterator<Map.Entry<String, DatanodeRegistration>> it = sIdToDnReg.entrySet().iterator()[ FD ]
Line_8 $$ rng = new Random(seed)-->Line_24 $$ String storageID = "someStorageID" + rng.nextInt(5000)[ FD ]
Line_50 $$ if (mapToCheck.get(ver) == 0) -->Line_51 $$ mapToCheck.remove(ver)[ CD ]
Line_14 $$ Iterator<Map.Entry<String, DatanodeRegistration>> it = sIdToDnReg.entrySet().iterator()-->Line_21 $$ it.remove()[ FD ]
Line_12 $$ if (rng.nextBoolean() && i % 3 == 0 && sIdToDnReg.size() != 0) -->Line_39 $$ LOG.info("Registering node storageID: " + dr.getDatanodeUuid() + ", version: " + dr.getSoftwareVersion() + ", IP address: " + dr.getXferAddr())[ CD ]
Line_27 $$ if (sIdToDnReg.containsKey(storageID)) -->Line_34 $$ Mockito.when(dr.getIpAddr()).thenReturn(ip)[ CD ]
Line_6 $$ Random rng = new Random()-->Line_29 $$ if (rng.nextBoolean()) [ FD ]
Line_2 $$ public void testNumVersionsReportedCorrect() throws IOException -->Line_7 $$ int seed = rng.nextInt()[ CD ]
Line_8 $$ rng = new Random(seed)-->Line_13 $$ int randomIndex = rng.nextInt() % sIdToDnReg.size()[ FD ]
Line_12 $$ if (rng.nextBoolean() && i % 3 == 0 && sIdToDnReg.size() != 0) -->Line_19 $$ LOG.info("Removing node " + toRemove.getDatanodeUuid() + " ip " + toRemove.getXferAddr() + " version : " + toRemove.getSoftwareVersion())[ CD ]
Line_2 $$ public void testNumVersionsReportedCorrect() throws IOException -->Line_9 $$ LOG.info("Using seed " + seed + " for testing")[ CD ]
Line_2 $$ public void testNumVersionsReportedCorrect() throws IOException -->Line_6 $$ Random rng = new Random()[ CD ]
Line_14 $$ Iterator<Map.Entry<String, DatanodeRegistration>> it = sIdToDnReg.entrySet().iterator()-->Line_16 $$ it.next()[ FD ]
Line_11 $$ for (int i = 0; i < NUM_ITERATIONS; ++i) -->Line_43 $$ Map<String, Integer> mapToCheck = dm.getDatanodesSoftwareVersions()[ CD ]
Line_27 $$ if (sIdToDnReg.containsKey(storageID)) -->Line_28 $$ dr = sIdToDnReg.get(storageID)[ CD ]
Line_10 $$ HashMap<String, DatanodeRegistration> sIdToDnReg = new HashMap<String, DatanodeRegistration>()-->Line_13 $$ int randomIndex = rng.nextInt() % sIdToDnReg.size()[ FD ]
Line_27 $$ if (sIdToDnReg.containsKey(storageID)) -->Line_36 $$ Mockito.when(dr.getXferPort()).thenReturn(9000)[ CD ]
Line_12 $$ if (rng.nextBoolean() && i % 3 == 0 && sIdToDnReg.size() != 0) -->Line_40 $$ dm.registerDatanode(dr)[ CD ]
Line_2 $$ public void testNumVersionsReportedCorrect() throws IOException -->Line_11 $$ for (int i = 0; i < NUM_ITERATIONS; ++i) [ CD ]
Line_29 $$ if (rng.nextBoolean()) -->Line_30 $$ dr.setIpAddr(dr.getIpAddr() + "newIP")[ CD ]
Line_11 $$ for (int i = 0; i < NUM_ITERATIONS; ++i) -->Line_57 $$ assertEquals("The map of version counts returned by DatanodeManager was" + " not what it was expected to be on iteration " + i, 0, mapToCheck.size())[ CD ]
Line_6 $$ Random rng = new Random()-->Line_12 $$ if (rng.nextBoolean() && i % 3 == 0 && sIdToDnReg.size() != 0) [ FD ]
Line_12 $$ if (rng.nextBoolean() && i % 3 == 0 && sIdToDnReg.size() != 0) -->Line_13 $$ int randomIndex = rng.nextInt() % sIdToDnReg.size()[ CD ]
Line_10 $$ HashMap<String, DatanodeRegistration> sIdToDnReg = new HashMap<String, DatanodeRegistration>()-->Line_27 $$ if (sIdToDnReg.containsKey(storageID)) [ FD ]
Line_6 $$ Random rng = new Random()-->Line_7 $$ int seed = rng.nextInt()[ FD ]
Line_10 $$ HashMap<String, DatanodeRegistration> sIdToDnReg = new HashMap<String, DatanodeRegistration>()-->Line_41 $$ sIdToDnReg.put(storageID, dr)[ FD ]
Line_6 $$ Random rng = new Random()-->Line_8 $$ rng = new Random(seed)[ FD ]
Line_3 $$ FSNamesystem fsn = Mockito.mock(FSNamesystem.class)-->Line_4 $$ Mockito.when(fsn.hasWriteLock()).thenReturn(true)[ FD ]
Line_5 $$ DatanodeManager dm = new DatanodeManager(Mockito.mock(BlockManager.class), fsn, new Configuration())-->Line_43 $$ Map<String, Integer> mapToCheck = dm.getDatanodesSoftwareVersions()[ FD ]
Line_2 $$ public void testNumVersionsReportedCorrect() throws IOException -->Line_10 $$ HashMap<String, DatanodeRegistration> sIdToDnReg = new HashMap<String, DatanodeRegistration>()[ CD ]
