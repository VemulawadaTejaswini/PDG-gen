Line_10 $$ Map<String, DatacenterEndpoints> dcs = new HashMap(datacenters.size() * 2)-->Line_26 $$ DatacenterEndpoints dcEndpoints = dcs.get(location.left)[ FD ]
Line_2 $$ public List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata) -->Line_9 $$ int dcsToFill = 0[ CD ]
Line_26 $$ DatacenterEndpoints dcEndpoints = dcs.get(location.left)-->Line_27 $$ if (dcEndpoints != null && dcEndpoints.addEndpointAndCheckIfDone(ep, location))[ FD ]
Line_24 $$ InetAddress ep = tokenMetadata.getEndpoint(next)-->Line_25 $$ Pair<String, String> location = topology.getLocation(ep)[ FD ]
Line_12 $$ String dc = en.getKey()-->Line_18 $$ dcs.put(dc, dcEndpoints)[ FD ]
Line_2 $$ public List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata) -->Line_5 $$ Topology topology = tokenMetadata.getTopology()[ CD ]
Line_25 $$ Pair<String, String> location = topology.getLocation(ep)-->Line_27 $$ if (dcEndpoints != null && dcEndpoints.addEndpointAndCheckIfDone(ep, location))[ FD ]
Line_2 $$ public List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata) -->Line_6 $$ Multimap<String, InetAddress> allEndpoints = topology.getDatacenterEndpoints()[ CD ]
Line_2 $$ public List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata) -->Line_10 $$ Map<String, DatacenterEndpoints> dcs = new HashMap(datacenters.size() * 2)[ CD ]
Line_17 $$ DatacenterEndpoints dcEndpoints = new DatacenterEndpoints(rf, sizeOrZero(racks.get(dc)), nodeCount, replicas, seenRacks)-->Line_18 $$ dcs.put(dc, dcEndpoints)[ FD ]
Line_5 $$ Topology topology = tokenMetadata.getTopology()-->Line_25 $$ Pair<String, String> location = topology.getLocation(ep)[ FD ]
Line_6 $$ Multimap<String, InetAddress> allEndpoints = topology.getDatacenterEndpoints()-->Line_8 $$ assert !allEndpoints.isEmpty() && !racks.isEmpty() : "not aware of any cluster members"[ FD ]
Line_9 $$ int dcsToFill = 0-->Line_19 $$ ++dcsToFill[ FD ]
Line_27 $$ if (dcEndpoints != null && dcEndpoints.addEndpointAndCheckIfDone(ep, location))-->Line_28 $$ --dcsToFill[ CD ]
Line_5 $$ Topology topology = tokenMetadata.getTopology()-->Line_7 $$ Map<String, Multimap<String, InetAddress>> racks = topology.getDatacenterRacks()[ FD ]
Line_2 $$ public List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata) -->Line_21 $$ Iterator<Token> tokenIter = TokenMetadata.ringIterator(tokenMetadata.sortedTokens(), searchToken, false)[ FD ]
Line_22 $$ while (dcsToFill > 0 && tokenIter.hasNext()) -->Line_25 $$ Pair<String, String> location = topology.getLocation(ep)[ CD ]
Line_10 $$ Map<String, DatacenterEndpoints> dcs = new HashMap(datacenters.size() * 2)-->Line_18 $$ dcs.put(dc, dcEndpoints)[ FD ]
Line_5 $$ Topology topology = tokenMetadata.getTopology()-->Line_6 $$ Multimap<String, InetAddress> allEndpoints = topology.getDatacenterEndpoints()[ FD ]
Line_12 $$ String dc = en.getKey()-->Line_17 $$ DatacenterEndpoints dcEndpoints = new DatacenterEndpoints(rf, sizeOrZero(racks.get(dc)), nodeCount, replicas, seenRacks)[ FD ]
Line_23 $$ Token next = tokenIter.next()-->Line_24 $$ InetAddress ep = tokenMetadata.getEndpoint(next)[ FD ]
Line_6 $$ Multimap<String, InetAddress> allEndpoints = topology.getDatacenterEndpoints()-->Line_14 $$ int nodeCount = sizeOrZero(allEndpoints.get(dc))[ FD ]
Line_21 $$ Iterator<Token> tokenIter = TokenMetadata.ringIterator(tokenMetadata.sortedTokens(), searchToken, false)-->Line_23 $$ Token next = tokenIter.next()[ FD ]
Line_22 $$ while (dcsToFill > 0 && tokenIter.hasNext()) -->Line_27 $$ if (dcEndpoints != null && dcEndpoints.addEndpointAndCheckIfDone(ep, location))[ CD ]
Line_2 $$ public List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata) -->Line_7 $$ Map<String, Multimap<String, InetAddress>> racks = topology.getDatacenterRacks()[ CD ]
Line_11 $$ for (Map.Entry<String, Integer> en : datacenters.entrySet()) -->Line_13 $$ int rf = en.getValue()[ FD ]
Line_2 $$ public List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata) -->Line_30 $$ return new ArrayList(replicas)[ CD ]
Line_11 $$ for (Map.Entry<String, Integer> en : datacenters.entrySet()) -->Line_12 $$ String dc = en.getKey()[ FD ]
Line_7 $$ Map<String, Multimap<String, InetAddress>> racks = topology.getDatacenterRacks()-->Line_8 $$ assert !allEndpoints.isEmpty() && !racks.isEmpty() : "not aware of any cluster members"[ FD ]
Line_2 $$ public List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata) -->Line_21 $$ Iterator<Token> tokenIter = TokenMetadata.ringIterator(tokenMetadata.sortedTokens(), searchToken, false)[ CD ]
Line_7 $$ Map<String, Multimap<String, InetAddress>> racks = topology.getDatacenterRacks()-->Line_17 $$ DatacenterEndpoints dcEndpoints = new DatacenterEndpoints(rf, sizeOrZero(racks.get(dc)), nodeCount, replicas, seenRacks)[ FD ]
Line_9 $$ int dcsToFill = 0-->Line_28 $$ --dcsToFill[ FD ]
Line_22 $$ while (dcsToFill > 0 && tokenIter.hasNext()) -->Line_26 $$ DatacenterEndpoints dcEndpoints = dcs.get(location.left)[ CD ]
Line_17 $$ DatacenterEndpoints dcEndpoints = new DatacenterEndpoints(rf, sizeOrZero(racks.get(dc)), nodeCount, replicas, seenRacks)-->Line_27 $$ if (dcEndpoints != null && dcEndpoints.addEndpointAndCheckIfDone(ep, location))[ FD ]
Line_2 $$ public List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata) -->Line_3 $$ Set<InetAddress> replicas = new LinkedHashSet()[ CD ]
Line_12 $$ String dc = en.getKey()-->Line_14 $$ int nodeCount = sizeOrZero(allEndpoints.get(dc))[ FD ]
Line_2 $$ public List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata) -->Line_22 $$ while (dcsToFill > 0 && tokenIter.hasNext()) [ CD ]
Line_2 $$ public List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata) -->Line_5 $$ Topology topology = tokenMetadata.getTopology()[ FD ]
Line_2 $$ public List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata) -->Line_4 $$ Set<Pair<String, String>> seenRacks = new HashSet()[ CD ]
Line_22 $$ while (dcsToFill > 0 && tokenIter.hasNext()) -->Line_24 $$ InetAddress ep = tokenMetadata.getEndpoint(next)[ CD ]
Line_24 $$ InetAddress ep = tokenMetadata.getEndpoint(next)-->Line_27 $$ if (dcEndpoints != null && dcEndpoints.addEndpointAndCheckIfDone(ep, location))[ FD ]
Line_22 $$ while (dcsToFill > 0 && tokenIter.hasNext()) -->Line_23 $$ Token next = tokenIter.next()[ CD ]
Line_21 $$ Iterator<Token> tokenIter = TokenMetadata.ringIterator(tokenMetadata.sortedTokens(), searchToken, false)-->Line_22 $$ while (dcsToFill > 0 && tokenIter.hasNext()) [ FD ]
Line_2 $$ public List<InetAddress> calculateNaturalEndpoints(Token searchToken, TokenMetadata tokenMetadata) -->Line_24 $$ InetAddress ep = tokenMetadata.getEndpoint(next)[ FD ]
