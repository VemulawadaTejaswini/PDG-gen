Line_39 $$ r = executeNet(version, "SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 2").one()-->Line_40 $$ Assert.assertNull(r.getBytesUnsafe("l"))[ FD ]
Line_2 $$ public void testComplexNullValues() throws Throwable -->Line_27 $$ Assert.assertNull(row.getBytes("l"))[ CD ]
Line_20 $$ UntypedResultSet.Row row = execute("SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 1").one()-->Line_25 $$ Assert.assertNotNull(row.getBytes("u"))[ FD ]
Line_20 $$ UntypedResultSet.Row row = execute("SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 1").one()-->Line_26 $$ row = execute("SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 2").one()[ FD ]
Line_26 $$ row = execute("SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 2").one()-->Line_30 $$ Assert.assertNull(row.getBytes("t"))[ FD ]
Line_20 $$ UntypedResultSet.Row row = execute("SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 1").one()-->Line_24 $$ Assert.assertNotNull(row.getBytes("t"))[ FD ]
Line_39 $$ r = executeNet(version, "SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 2").one()-->Line_42 $$ Assert.assertNull(r.getBytesUnsafe("m"))[ FD ]
Line_20 $$ UntypedResultSet.Row row = execute("SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 1").one()-->Line_29 $$ Assert.assertNull(row.getBytes("m"))[ FD ]
Line_39 $$ r = executeNet(version, "SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 2").one()-->Line_44 $$ Assert.assertNull(r.getBytesUnsafe("u"))[ FD ]
Line_16 $$ Object t = tuple(1d, "one", 42, false)-->Line_17 $$ execute("INSERT INTO %s (key, lst, st, mp, tup, udt) VALUES (1, ?, ?, ?, ?, [ FD ]
Line_12 $$ Map<Integer, Boolean> map = new TreeMap()-->Line_13 $$ map.put(1, true)[ FD ]
Line_10 $$ List<Double> list = Arrays.asList(1d, 2d, 3d)-->Line_17 $$ execute("INSERT INTO %s (key, lst, st, mp, tup, udt) VALUES (1, ?, ?, ?, ?, [ FD ]
Line_2 $$ public void testComplexNullValues() throws Throwable -->Line_18 $$ execute("INSERT INTO %s (key, lst, st, mp, tup, udt) VALUES (2, ?, ?, ?, ?, null)", null, null, null, null)[ CD ]
Line_20 $$ UntypedResultSet.Row row = execute("SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 1").one()-->Line_23 $$ Assert.assertNotNull(row.getBytes("m"))[ FD ]
Line_20 $$ UntypedResultSet.Row row = execute("SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 1").one()-->Line_27 $$ Assert.assertNull(row.getBytes("l"))[ FD ]
Line_2 $$ public void testComplexNullValues() throws Throwable -->Line_10 $$ List<Double> list = Arrays.asList(1d, 2d, 3d)[ CD ]
Line_26 $$ row = execute("SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 2").one()-->Line_29 $$ Assert.assertNull(row.getBytes("m"))[ FD ]
Line_33 $$ Row r = executeNet(version, "SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 1").one()-->Line_42 $$ Assert.assertNull(r.getBytesUnsafe("m"))[ FD ]
Line_20 $$ UntypedResultSet.Row row = execute("SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 1").one()-->Line_30 $$ Assert.assertNull(row.getBytes("t"))[ FD ]
Line_2 $$ public void testComplexNullValues() throws Throwable -->Line_3 $$ String type = KEYSPACE + '.' + createType("CREATE TYPE %s (txt text, i int)")[ CD ]
Line_33 $$ Row r = executeNet(version, "SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 1").one()-->Line_36 $$ Assert.assertNotNull(r.getBytesUnsafe("m"))[ FD ]
Line_33 $$ Row r = executeNet(version, "SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 1").one()-->Line_43 $$ Assert.assertNull(r.getBytesUnsafe("t"))[ FD ]
Line_2 $$ public void testComplexNullValues() throws Throwable -->Line_14 $$ map.put(2, false)[ CD ]
Line_2 $$ public void testComplexNullValues() throws Throwable -->Line_31 $$ Assert.assertNull(row.getBytes("u"))[ CD ]
Line_2 $$ public void testComplexNullValues() throws Throwable -->Line_30 $$ Assert.assertNull(row.getBytes("t"))[ CD ]
Line_11 $$ Set<String> set = new TreeSet(Arrays.asList("one", "three", "two"))-->Line_17 $$ execute("INSERT INTO %s (key, lst, st, mp, tup, udt) VALUES (1, ?, ?, ?, ?, [ FD ]
Line_2 $$ public void testComplexNullValues() throws Throwable -->Line_28 $$ Assert.assertNull(row.getBytes("s"))[ CD ]
Line_33 $$ Row r = executeNet(version, "SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 1").one()-->Line_37 $$ Assert.assertNotNull(r.getBytesUnsafe("t"))[ FD ]
Line_2 $$ public void testComplexNullValues() throws Throwable -->Line_23 $$ Assert.assertNotNull(row.getBytes("m"))[ CD ]
Line_2 $$ public void testComplexNullValues() throws Throwable -->Line_22 $$ Assert.assertNotNull(row.getBytes("s"))[ CD ]
Line_2 $$ public void testComplexNullValues() throws Throwable -->Line_4 $$ createTable("CREATE TABLE %s (key int primary key, lst list<double>, st set<text>, mp map<int, boolean>," + "tup frozen<tuple<double, text, int, boolean>>, udt frozen<" + type + ">)")[ CD ]
Line_26 $$ row = execute("SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 2").one()-->Line_31 $$ Assert.assertNull(row.getBytes("u"))[ FD ]
Line_33 $$ Row r = executeNet(version, "SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 1").one()-->Line_34 $$ Assert.assertNotNull(r.getBytesUnsafe("l"))[ FD ]
Line_33 $$ Row r = executeNet(version, "SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 1").one()-->Line_40 $$ Assert.assertNull(r.getBytesUnsafe("l"))[ FD ]
Line_20 $$ UntypedResultSet.Row row = execute("SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 1").one()-->Line_31 $$ Assert.assertNull(row.getBytes("u"))[ FD ]
Line_2 $$ public void testComplexNullValues() throws Throwable -->Line_25 $$ Assert.assertNotNull(row.getBytes("u"))[ CD ]
Line_12 $$ Map<Integer, Boolean> map = new TreeMap()-->Line_17 $$ execute("INSERT INTO %s (key, lst, st, mp, tup, udt) VALUES (1, ?, ?, ?, ?, [ FD ]
Line_2 $$ public void testComplexNullValues() throws Throwable -->Line_20 $$ UntypedResultSet.Row row = execute("SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 1").one()[ CD ]
Line_2 $$ public void testComplexNullValues() throws Throwable -->Line_26 $$ row = execute("SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 2").one()[ CD ]
Line_26 $$ row = execute("SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 2").one()-->Line_27 $$ Assert.assertNull(row.getBytes("l"))[ FD ]
Line_2 $$ public void testComplexNullValues() throws Throwable -->Line_12 $$ Map<Integer, Boolean> map = new TreeMap()[ CD ]
Line_33 $$ Row r = executeNet(version, "SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 1").one()-->Line_35 $$ Assert.assertNotNull(r.getBytesUnsafe("s"))[ FD ]
Line_12 $$ Map<Integer, Boolean> map = new TreeMap()-->Line_15 $$ map.put(3, true)[ FD ]
Line_26 $$ row = execute("SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 2").one()-->Line_28 $$ Assert.assertNull(row.getBytes("s"))[ FD ]
Line_32 $$ for (int version : PROTOCOL_VERSIONS) -->Line_33 $$ Row r = executeNet(version, "SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 1").one()[ FD ]
Line_2 $$ public void testComplexNullValues() throws Throwable -->Line_15 $$ map.put(3, true)[ CD ]
Line_2 $$ public void testComplexNullValues() throws Throwable -->Line_17 $$ execute("INSERT INTO %s (key, lst, st, mp, tup, udt) VALUES (1, ?, ?, ?, ?, [ CD ]
Line_20 $$ UntypedResultSet.Row row = execute("SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 1").one()-->Line_21 $$ Assert.assertNotNull(row.getBytes("l"))[ FD ]
Line_33 $$ Row r = executeNet(version, "SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 1").one()-->Line_41 $$ Assert.assertNull(r.getBytesUnsafe("s"))[ FD ]
Line_2 $$ public void testComplexNullValues() throws Throwable -->Line_19 $$ execute("SELECT " + fList + "(lst), " + fSet + "(st), " + fMap + "(mp), " + fTup + "(tup), " + fUdt + "(udt) FROM %s WHERE key = 1")[ CD ]
Line_39 $$ r = executeNet(version, "SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 2").one()-->Line_41 $$ Assert.assertNull(r.getBytesUnsafe("s"))[ FD ]
Line_33 $$ Row r = executeNet(version, "SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 1").one()-->Line_38 $$ Assert.assertNotNull(r.getBytesUnsafe("u"))[ FD ]
Line_33 $$ Row r = executeNet(version, "SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 1").one()-->Line_39 $$ r = executeNet(version, "SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 2").one()[ FD ]
Line_12 $$ Map<Integer, Boolean> map = new TreeMap()-->Line_14 $$ map.put(2, false)[ FD ]
Line_2 $$ public void testComplexNullValues() throws Throwable -->Line_21 $$ Assert.assertNotNull(row.getBytes("l"))[ CD ]
Line_32 $$ for (int version : PROTOCOL_VERSIONS) -->Line_39 $$ r = executeNet(version, "SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 2").one()[ FD ]
Line_2 $$ public void testComplexNullValues() throws Throwable -->Line_29 $$ Assert.assertNull(row.getBytes("m"))[ CD ]
Line_39 $$ r = executeNet(version, "SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 2").one()-->Line_43 $$ Assert.assertNull(r.getBytesUnsafe("t"))[ FD ]
Line_2 $$ public void testComplexNullValues() throws Throwable -->Line_13 $$ map.put(1, true)[ CD ]
Line_2 $$ public void testComplexNullValues() throws Throwable -->Line_16 $$ Object t = tuple(1d, "one", 42, false)[ CD ]
Line_20 $$ UntypedResultSet.Row row = execute("SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 1").one()-->Line_22 $$ Assert.assertNotNull(row.getBytes("s"))[ FD ]
Line_2 $$ public void testComplexNullValues() throws Throwable -->Line_11 $$ Set<String> set = new TreeSet(Arrays.asList("one", "three", "two"))[ CD ]
Line_2 $$ public void testComplexNullValues() throws Throwable -->Line_24 $$ Assert.assertNotNull(row.getBytes("t"))[ CD ]
Line_33 $$ Row r = executeNet(version, "SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 1").one()-->Line_44 $$ Assert.assertNull(r.getBytesUnsafe("u"))[ FD ]
Line_20 $$ UntypedResultSet.Row row = execute("SELECT " + fList + "(lst) as l, " + fSet + "(st) as s, " + fMap + "(mp) as m, " + fTup + "(tup) as t, " + fUdt + "(udt) as u " + "FROM %s WHERE key = 1").one()-->Line_28 $$ Assert.assertNull(row.getBytes("s"))[ FD ]
