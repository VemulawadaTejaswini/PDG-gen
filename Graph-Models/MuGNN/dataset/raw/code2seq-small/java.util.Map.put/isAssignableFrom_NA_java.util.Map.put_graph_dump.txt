Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_14 $$ WildcardBounds typeBounds = WildcardBounds.get(other)[ FD ]
Line_36 $$ ourResolved = resolved.resolve()-->Line_54 $$ ResolvableType[] typeGenerics = other.as(ourResolved).getGenerics()[ FD ]
Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_58 $$ if (matchedBefore == null) [ FD ]
Line_29 $$ ourResolved = resolved.resolve()-->Line_45 $$ if (ourResolved == null) [ FD ]
Line_52 $$ if (checkGenerics) -->Line_54 $$ ResolvableType[] typeGenerics = other.as(ourResolved).getGenerics()[ CD ]
Line_59 $$ matchedBefore = new IdentityHashMap<Type, Type>(1)-->Line_63 $$ if (!ourGenerics[i].isAssignableFrom(typeGenerics[i], matchedBefore)) [ FD ]
Line_55 $$ if (ourGenerics.length != typeGenerics.length) -->Line_56 $$ return false[ CD ]
Line_26 $$ if (this.variableResolver != null) -->Line_28 $$ if (resolved != null) [ CD ]
Line_24 $$ if (this.type instanceof TypeVariable) -->Line_26 $$ if (this.variableResolver != null) [ CD ]
Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_18 $$ if (ourBounds != null) [ CD ]
Line_14 $$ WildcardBounds typeBounds = WildcardBounds.get(other)-->Line_16 $$ return (ourBounds != null && ourBounds.isSameKind(typeBounds) && ourBounds.isAssignableFrom(typeBounds.getBounds()))[ FD ]
Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_7 $$ if (isArray()) [ CD ]
Line_23 $$ Class<?> ourResolved = null-->Line_41 $$ if (ourResolved == null) [ FD ]
Line_45 $$ if (ourResolved == null) -->Line_46 $$ ourResolved = resolve(Object.class)[ CD ]
Line_29 $$ ourResolved = resolved.resolve()-->Line_46 $$ ourResolved = resolve(Object.class)[ FD ]
Line_48 $$ Class<?> otherResolved = other.resolve(Object.class)-->Line_49 $$ if (exactMatch ? !ourResolved.equals(otherResolved) : !ClassUtils.isAssignable(ourResolved, otherResolved)) [ FD ]
Line_33 $$ if (other.variableResolver != null) -->Line_35 $$ if (resolved != null) [ CD ]
Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_8 $$ return (other.isArray() && getComponentType().isAssignableFrom(other.getComponentType()))[ FD ]
Line_59 $$ matchedBefore = new IdentityHashMap<Type, Type>(1)-->Line_61 $$ matchedBefore.put(this.type, other.type)[ FD ]
Line_52 $$ if (checkGenerics) -->Line_55 $$ if (ourGenerics.length != typeGenerics.length) [ CD ]
Line_52 $$ if (checkGenerics) -->Line_58 $$ if (matchedBefore == null) [ CD ]
Line_13 $$ WildcardBounds ourBounds = WildcardBounds.get(this)-->Line_18 $$ if (ourBounds != null) [ FD ]
Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_14 $$ WildcardBounds typeBounds = WildcardBounds.get(other)[ CD ]
Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_10 $$ if (matchedBefore != null && matchedBefore.get(this.type) == other.type) [ FD ]
Line_21 $$ boolean exactMatch = (matchedBefore != null)-->Line_49 $$ if (exactMatch ? !ourResolved.equals(otherResolved) : !ClassUtils.isAssignable(ourResolved, otherResolved)) [ FD ]
Line_62 $$ for (int i = 0; i < ourGenerics.length; i++) -->Line_63 $$ if (!ourGenerics[i].isAssignableFrom(typeGenerics[i], matchedBefore)) [ CD ]
Line_33 $$ if (other.variableResolver != null) -->Line_34 $$ ResolvableType resolved = other.variableResolver.resolveVariable(variable)[ CD ]
Line_14 $$ WildcardBounds typeBounds = WildcardBounds.get(other)-->Line_15 $$ if (typeBounds != null) [ FD ]
Line_10 $$ if (matchedBefore != null && matchedBefore.get(this.type) == other.type) -->Line_11 $$ return true[ CD ]
Line_24 $$ if (this.type instanceof TypeVariable) -->Line_25 $$ TypeVariable<?> variable = (TypeVariable<?>) this.type[ CD ]
Line_41 $$ if (ourResolved == null) -->Line_42 $$ exactMatch = false[ CD ]
Line_58 $$ if (matchedBefore == null) -->Line_59 $$ matchedBefore = new IdentityHashMap<Type, Type>(1)[ CD ]
Line_29 $$ ourResolved = resolved.resolve()-->Line_41 $$ if (ourResolved == null) [ FD ]
Line_63 $$ if (!ourGenerics[i].isAssignableFrom(typeGenerics[i], matchedBefore)) -->Line_64 $$ return false[ CD ]
Line_27 $$ ResolvableType resolved = this.variableResolver.resolveVariable(variable)-->Line_36 $$ ourResolved = resolved.resolve()[ FD ]
Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_48 $$ Class<?> otherResolved = other.resolve(Object.class)[ CD ]
Line_42 $$ exactMatch = false-->Line_49 $$ if (exactMatch ? !ourResolved.equals(otherResolved) : !ClassUtils.isAssignable(ourResolved, otherResolved)) [ FD ]
Line_24 $$ if (this.type instanceof TypeVariable) -->Line_32 $$ if (ourResolved == null) [ CD ]
Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_52 $$ if (checkGenerics) [ CD ]
Line_13 $$ WildcardBounds ourBounds = WildcardBounds.get(this)-->Line_16 $$ return (ourBounds != null && ourBounds.isSameKind(typeBounds) && ourBounds.isAssignableFrom(typeBounds.getBounds()))[ FD ]
Line_27 $$ ResolvableType resolved = this.variableResolver.resolveVariable(variable)-->Line_29 $$ ourResolved = resolved.resolve()[ FD ]
Line_28 $$ if (resolved != null) -->Line_29 $$ ourResolved = resolved.resolve()[ CD ]
Line_22 $$ boolean checkGenerics = true-->Line_37 $$ checkGenerics = false[ FD ]
Line_7 $$ if (isArray()) -->Line_8 $$ return (other.isArray() && getComponentType().isAssignableFrom(other.getComponentType()))[ CD ]
Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_48 $$ Class<?> otherResolved = other.resolve(Object.class)[ FD ]
Line_35 $$ if (resolved != null) -->Line_37 $$ checkGenerics = false[ CD ]
Line_15 $$ if (typeBounds != null) -->Line_16 $$ return (ourBounds != null && ourBounds.isSameKind(typeBounds) && ourBounds.isAssignableFrom(typeBounds.getBounds()))[ CD ]
Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_13 $$ WildcardBounds ourBounds = WildcardBounds.get(this)[ CD ]
Line_27 $$ ResolvableType resolved = this.variableResolver.resolveVariable(variable)-->Line_35 $$ if (resolved != null) [ FD ]
Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_22 $$ boolean checkGenerics = true[ CD ]
Line_52 $$ if (checkGenerics) -->Line_62 $$ for (int i = 0; i < ourGenerics.length; i++) [ CD ]
Line_21 $$ boolean exactMatch = (matchedBefore != null)-->Line_42 $$ exactMatch = false[ FD ]
Line_23 $$ Class<?> ourResolved = null-->Line_54 $$ ResolvableType[] typeGenerics = other.as(ourResolved).getGenerics()[ FD ]
Line_23 $$ Class<?> ourResolved = null-->Line_29 $$ ourResolved = resolved.resolve()[ FD ]
Line_23 $$ Class<?> ourResolved = null-->Line_49 $$ if (exactMatch ? !ourResolved.equals(otherResolved) : !ClassUtils.isAssignable(ourResolved, otherResolved)) [ FD ]
Line_49 $$ if (exactMatch ? !ourResolved.equals(otherResolved) : !ClassUtils.isAssignable(ourResolved, otherResolved)) -->Line_50 $$ return false[ CD ]
Line_36 $$ ourResolved = resolved.resolve()-->Line_45 $$ if (ourResolved == null) [ FD ]
Line_23 $$ Class<?> ourResolved = null-->Line_32 $$ if (ourResolved == null) [ FD ]
Line_27 $$ ResolvableType resolved = this.variableResolver.resolveVariable(variable)-->Line_28 $$ if (resolved != null) [ FD ]
Line_23 $$ Class<?> ourResolved = null-->Line_46 $$ ourResolved = resolve(Object.class)[ FD ]
Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_23 $$ Class<?> ourResolved = null[ CD ]
Line_36 $$ ourResolved = resolved.resolve()-->Line_49 $$ if (exactMatch ? !ourResolved.equals(otherResolved) : !ClassUtils.isAssignable(ourResolved, otherResolved)) [ FD ]
Line_23 $$ Class<?> ourResolved = null-->Line_36 $$ ourResolved = resolved.resolve()[ FD ]
Line_18 $$ if (ourBounds != null) -->Line_19 $$ return ourBounds.isAssignableFrom(other)[ CD ]
Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_10 $$ if (matchedBefore != null && matchedBefore.get(this.type) == other.type) [ CD ]
Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_4 $$ if (this == NONE || other == NONE) [ CD ]
Line_23 $$ Class<?> ourResolved = null-->Line_45 $$ if (ourResolved == null) [ FD ]
Line_13 $$ WildcardBounds ourBounds = WildcardBounds.get(this)-->Line_19 $$ return ourBounds.isAssignableFrom(other)[ FD ]
Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_3 $$ Assert.notNull(other, "ResolvableType must not be null")[ FD ]
Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_15 $$ if (typeBounds != null) [ CD ]
Line_24 $$ if (this.type instanceof TypeVariable) -->Line_41 $$ if (ourResolved == null) [ CD ]
Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_59 $$ matchedBefore = new IdentityHashMap<Type, Type>(1)[ FD ]
Line_32 $$ if (ourResolved == null) -->Line_33 $$ if (other.variableResolver != null) [ CD ]
Line_29 $$ ourResolved = resolved.resolve()-->Line_36 $$ ourResolved = resolved.resolve()[ FD ]
Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_21 $$ boolean exactMatch = (matchedBefore != null)[ CD ]
Line_36 $$ ourResolved = resolved.resolve()-->Line_41 $$ if (ourResolved == null) [ FD ]
Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_24 $$ if (this.type instanceof TypeVariable) [ CD ]
Line_25 $$ TypeVariable<?> variable = (TypeVariable<?>) this.type-->Line_27 $$ ResolvableType resolved = this.variableResolver.resolveVariable(variable)[ FD ]
Line_29 $$ ourResolved = resolved.resolve()-->Line_32 $$ if (ourResolved == null) [ FD ]
Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_63 $$ if (!ourGenerics[i].isAssignableFrom(typeGenerics[i], matchedBefore)) [ FD ]
Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_3 $$ Assert.notNull(other, "ResolvableType must not be null")[ CD ]
Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_54 $$ ResolvableType[] typeGenerics = other.as(ourResolved).getGenerics()[ FD ]
Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_45 $$ if (ourResolved == null) [ CD ]
Line_29 $$ ourResolved = resolved.resolve()-->Line_49 $$ if (exactMatch ? !ourResolved.equals(otherResolved) : !ClassUtils.isAssignable(ourResolved, otherResolved)) [ FD ]
Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_68 $$ return true[ CD ]
Line_35 $$ if (resolved != null) -->Line_36 $$ ourResolved = resolved.resolve()[ CD ]
Line_25 $$ TypeVariable<?> variable = (TypeVariable<?>) this.type-->Line_34 $$ ResolvableType resolved = other.variableResolver.resolveVariable(variable)[ FD ]
Line_46 $$ ourResolved = resolve(Object.class)-->Line_54 $$ ResolvableType[] typeGenerics = other.as(ourResolved).getGenerics()[ FD ]
Line_46 $$ ourResolved = resolve(Object.class)-->Line_49 $$ if (exactMatch ? !ourResolved.equals(otherResolved) : !ClassUtils.isAssignable(ourResolved, otherResolved)) [ FD ]
Line_29 $$ ourResolved = resolved.resolve()-->Line_54 $$ ResolvableType[] typeGenerics = other.as(ourResolved).getGenerics()[ FD ]
Line_52 $$ if (checkGenerics) -->Line_53 $$ ResolvableType[] ourGenerics = getGenerics()[ CD ]
Line_36 $$ ourResolved = resolved.resolve()-->Line_46 $$ ourResolved = resolve(Object.class)[ FD ]
Line_26 $$ if (this.variableResolver != null) -->Line_27 $$ ResolvableType resolved = this.variableResolver.resolveVariable(variable)[ CD ]
Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_61 $$ matchedBefore.put(this.type, other.type)[ FD ]
Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_49 $$ if (exactMatch ? !ourResolved.equals(otherResolved) : !ClassUtils.isAssignable(ourResolved, otherResolved)) [ CD ]
Line_2 $$ private boolean isAssignableFrom(ResolvableType other, Map<Type, Type> matchedBefore) -->Line_19 $$ return ourBounds.isAssignableFrom(other)[ FD ]
Line_4 $$ if (this == NONE || other == NONE) -->Line_5 $$ return false[ CD ]
Line_52 $$ if (checkGenerics) -->Line_61 $$ matchedBefore.put(this.type, other.type)[ CD ]
