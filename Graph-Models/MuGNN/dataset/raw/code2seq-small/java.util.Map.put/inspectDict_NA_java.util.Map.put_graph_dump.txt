Line_4 $$ Map<PyExpression, PyExpression> additionalExpressions-->Line_9 $$ additionalExpressions = new HashMap<PyExpression, PyExpression>()[ FD ]
Line_3 $$ PsiElement pyElement-->Line_12 $$ if (pyElement == null)[ FD ]
Line_4 $$ Map<PyExpression, PyExpression> additionalExpressions-->Line_58 $$ return (expressions.length + additionalExpressions.size())[ FD ]
Line_29 $$ final String name = ((PyStringLiteralExpression) key).getStringValue()-->Line_47 $$ checkExpressionType(value, myFormatSpec.get(name), problemTarget)[ FD ]
Line_2 $$ private int inspectDict(PyExpression rightExpression, PsiElement problemTarget, boolean addSubscriptions) -->Line_15 $$ if (myUsedMappingKeys.isEmpty()) [ CD ]
Line_29 $$ final String name = ((PyStringLiteralExpression) key).getStringValue()-->Line_30 $$ if (myUsedMappingKeys.get(name) != null) [ FD ]
Line_43 $$ if (myUsedMappingKeys.get(name) != null) -->Line_46 $$ if (value != null) [ CD ]
Line_26 $$ for (PyKeyValueExpression expression : expressions) -->Line_32 $$ final PyExpression value = expression.getValue()[ FD ]
Line_2 $$ private int inspectDict(PyExpression rightExpression, PsiElement problemTarget, boolean addSubscriptions) -->Line_6 $$ additionalExpressions = addSubscriptions(rightExpression.getContainingFile(), rightExpression.getText())[ FD ]
Line_41 $$ if (key instanceof PyStringLiteralExpression) -->Line_42 $$ final String name = ((PyStringLiteralExpression) key).getStringValue()[ CD ]
Line_2 $$ private int inspectDict(PyExpression rightExpression, PsiElement problemTarget, boolean addSubscriptions) -->Line_18 $$ registerProblem(rightExpression, PyBundle.message("INSP.format.requires.no.mapping"))[ FD ]
Line_5 $$ if (addSubscriptions) -->Line_10 $$ pyElement = rightExpression[ CD ]
Line_2 $$ private int inspectDict(PyExpression rightExpression, PsiElement problemTarget, boolean addSubscriptions) -->Line_34 $$ checkExpressionType(value, myFormatSpec.get(name), problemTarget)[ FD ]
Line_2 $$ private int inspectDict(PyExpression rightExpression, PsiElement problemTarget, boolean addSubscriptions) -->Line_10 $$ pyElement = rightExpression[ FD ]
Line_2 $$ private int inspectDict(PyExpression rightExpression, PsiElement problemTarget, boolean addSubscriptions) -->Line_5 $$ if (addSubscriptions) [ CD ]
Line_28 $$ if (key instanceof PyStringLiteralExpression) -->Line_29 $$ final String name = ((PyStringLiteralExpression) key).getStringValue()[ CD ]
Line_27 $$ final PyExpression key = expression.getKey()-->Line_41 $$ if (key instanceof PyStringLiteralExpression) [ FD ]
Line_6 $$ additionalExpressions = addSubscriptions(rightExpression.getContainingFile(), rightExpression.getText())-->Line_58 $$ return (expressions.length + additionalExpressions.size())[ FD ]
Line_2 $$ private int inspectDict(PyExpression rightExpression, PsiElement problemTarget, boolean addSubscriptions) -->Line_4 $$ Map<PyExpression, PyExpression> additionalExpressions[ CD ]
Line_30 $$ if (myUsedMappingKeys.get(name) != null) -->Line_32 $$ final PyExpression value = expression.getValue()[ CD ]
Line_30 $$ if (myUsedMappingKeys.get(name) != null) -->Line_33 $$ if (value != null) [ CD ]
Line_17 $$ if (myExpectedArguments == (expressions.length + additionalExpressions.size())) -->Line_18 $$ registerProblem(rightExpression, PyBundle.message("INSP.format.requires.no.mapping"))[ CD ]
Line_33 $$ if (value != null) -->Line_34 $$ checkExpressionType(value, myFormatSpec.get(name), problemTarget)[ CD ]
Line_7 $$ pyElement = ((PyReferenceExpression) rightExpression).followAssignmentsChain(PyResolveContext.noImplicits().withTypeEvalContext(myTypeEvalContext)).getElement()-->Line_12 $$ if (pyElement == null)[ FD ]
Line_12 $$ if (pyElement == null)-->Line_13 $$ return 0[ CD ]
Line_32 $$ final PyExpression value = expression.getValue()-->Line_46 $$ if (value != null) [ FD ]
Line_6 $$ additionalExpressions = addSubscriptions(rightExpression.getContainingFile(), rightExpression.getText())-->Line_9 $$ additionalExpressions = new HashMap<PyExpression, PyExpression>()[ FD ]
Line_2 $$ private int inspectDict(PyExpression rightExpression, PsiElement problemTarget, boolean addSubscriptions) -->Line_3 $$ PsiElement pyElement[ CD ]
Line_16 $$ if (myExpectedArguments > 0) -->Line_17 $$ if (myExpectedArguments == (expressions.length + additionalExpressions.size())) [ CD ]
Line_6 $$ additionalExpressions = addSubscriptions(rightExpression.getContainingFile(), rightExpression.getText())-->Line_39 $$ for (Map.Entry<PyExpression, PyExpression> expression : additionalExpressions.entrySet()) [ FD ]
Line_3 $$ PsiElement pyElement-->Line_10 $$ pyElement = rightExpression[ FD ]
Line_2 $$ private int inspectDict(PyExpression rightExpression, PsiElement problemTarget, boolean addSubscriptions) -->Line_12 $$ if (pyElement == null)[ CD ]
Line_9 $$ additionalExpressions = new HashMap<PyExpression, PyExpression>()-->Line_39 $$ for (Map.Entry<PyExpression, PyExpression> expression : additionalExpressions.entrySet()) [ FD ]
Line_26 $$ for (PyKeyValueExpression expression : expressions) -->Line_45 $$ final PyExpression value = expression.getValue()[ FD ]
Line_2 $$ private int inspectDict(PyExpression rightExpression, PsiElement problemTarget, boolean addSubscriptions) -->Line_58 $$ return (expressions.length + additionalExpressions.size())[ CD ]
Line_15 $$ if (myUsedMappingKeys.isEmpty()) -->Line_16 $$ if (myExpectedArguments > 0) [ CD ]
Line_32 $$ final PyExpression value = expression.getValue()-->Line_34 $$ checkExpressionType(value, myFormatSpec.get(name), problemTarget)[ FD ]
Line_7 $$ pyElement = ((PyReferenceExpression) rightExpression).followAssignmentsChain(PyResolveContext.noImplicits().withTypeEvalContext(myTypeEvalContext)).getElement()-->Line_10 $$ pyElement = rightExpression[ FD ]
Line_26 $$ for (PyKeyValueExpression expression : expressions) -->Line_27 $$ final PyExpression key = expression.getKey()[ FD ]
Line_29 $$ final String name = ((PyStringLiteralExpression) key).getStringValue()-->Line_43 $$ if (myUsedMappingKeys.get(name) != null) [ FD ]
Line_16 $$ if (myExpectedArguments > 0) -->Line_23 $$ return 0[ CD ]
Line_27 $$ final PyExpression key = expression.getKey()-->Line_54 $$ registerProblem(problemTarget, PyBundle.message("INSP.key.$0.has.no.arg", key))[ FD ]
Line_5 $$ if (addSubscriptions) -->Line_7 $$ pyElement = ((PyReferenceExpression) rightExpression).followAssignmentsChain(PyResolveContext.noImplicits().withTypeEvalContext(myTypeEvalContext)).getElement()[ CD ]
Line_4 $$ Map<PyExpression, PyExpression> additionalExpressions-->Line_17 $$ if (myExpectedArguments == (expressions.length + additionalExpressions.size())) [ FD ]
Line_43 $$ if (myUsedMappingKeys.get(name) != null) -->Line_45 $$ final PyExpression value = expression.getValue()[ CD ]
Line_2 $$ private int inspectDict(PyExpression rightExpression, PsiElement problemTarget, boolean addSubscriptions) -->Line_47 $$ checkExpressionType(value, myFormatSpec.get(name), problemTarget)[ FD ]
Line_30 $$ if (myUsedMappingKeys.get(name) != null) -->Line_31 $$ myUsedMappingKeys.put(name, true)[ CD ]
Line_32 $$ final PyExpression value = expression.getValue()-->Line_33 $$ if (value != null) [ FD ]
Line_6 $$ additionalExpressions = addSubscriptions(rightExpression.getContainingFile(), rightExpression.getText())-->Line_17 $$ if (myExpectedArguments == (expressions.length + additionalExpressions.size())) [ FD ]
Line_27 $$ final PyExpression key = expression.getKey()-->Line_28 $$ if (key instanceof PyStringLiteralExpression) [ FD ]
Line_4 $$ Map<PyExpression, PyExpression> additionalExpressions-->Line_39 $$ for (Map.Entry<PyExpression, PyExpression> expression : additionalExpressions.entrySet()) [ FD ]
Line_27 $$ final PyExpression key = expression.getKey()-->Line_53 $$ if (!myUsedMappingKeys.get(key).booleanValue()) [ FD ]
Line_9 $$ additionalExpressions = new HashMap<PyExpression, PyExpression>()-->Line_58 $$ return (expressions.length + additionalExpressions.size())[ FD ]
Line_5 $$ if (addSubscriptions) -->Line_6 $$ additionalExpressions = addSubscriptions(rightExpression.getContainingFile(), rightExpression.getText())[ CD ]
Line_5 $$ if (addSubscriptions) -->Line_9 $$ additionalExpressions = new HashMap<PyExpression, PyExpression>()[ CD ]
Line_28 $$ if (key instanceof PyStringLiteralExpression) -->Line_30 $$ if (myUsedMappingKeys.get(name) != null) [ CD ]
Line_46 $$ if (value != null) -->Line_47 $$ checkExpressionType(value, myFormatSpec.get(name), problemTarget)[ CD ]
Line_3 $$ PsiElement pyElement-->Line_7 $$ pyElement = ((PyReferenceExpression) rightExpression).followAssignmentsChain(PyResolveContext.noImplicits().withTypeEvalContext(myTypeEvalContext)).getElement()[ FD ]
Line_29 $$ final String name = ((PyStringLiteralExpression) key).getStringValue()-->Line_34 $$ checkExpressionType(value, myFormatSpec.get(name), problemTarget)[ FD ]
Line_4 $$ Map<PyExpression, PyExpression> additionalExpressions-->Line_6 $$ additionalExpressions = addSubscriptions(rightExpression.getContainingFile(), rightExpression.getText())[ FD ]
Line_32 $$ final PyExpression value = expression.getValue()-->Line_47 $$ checkExpressionType(value, myFormatSpec.get(name), problemTarget)[ FD ]
Line_17 $$ if (myExpectedArguments == (expressions.length + additionalExpressions.size())) -->Line_20 $$ return 1[ CD ]
Line_9 $$ additionalExpressions = new HashMap<PyExpression, PyExpression>()-->Line_17 $$ if (myExpectedArguments == (expressions.length + additionalExpressions.size())) [ FD ]
Line_53 $$ if (!myUsedMappingKeys.get(key).booleanValue()) -->Line_54 $$ registerProblem(problemTarget, PyBundle.message("INSP.key.$0.has.no.arg", key))[ CD ]
Line_26 $$ for (PyKeyValueExpression expression : expressions) -->Line_40 $$ final PyExpression key = expression.getKey()[ FD ]
Line_10 $$ pyElement = rightExpression-->Line_12 $$ if (pyElement == null)[ FD ]
Line_2 $$ private int inspectDict(PyExpression rightExpression, PsiElement problemTarget, boolean addSubscriptions) -->Line_14 $$ final PyKeyValueExpression[] expressions = ((PyDictLiteralExpression) pyElement).getElements()[ CD ]
Line_29 $$ final String name = ((PyStringLiteralExpression) key).getStringValue()-->Line_44 $$ myUsedMappingKeys.put(name, true)[ FD ]
Line_43 $$ if (myUsedMappingKeys.get(name) != null) -->Line_44 $$ myUsedMappingKeys.put(name, true)[ CD ]
Line_2 $$ private int inspectDict(PyExpression rightExpression, PsiElement problemTarget, boolean addSubscriptions) -->Line_54 $$ registerProblem(problemTarget, PyBundle.message("INSP.key.$0.has.no.arg", key))[ FD ]
Line_41 $$ if (key instanceof PyStringLiteralExpression) -->Line_43 $$ if (myUsedMappingKeys.get(name) != null) [ CD ]
Line_29 $$ final String name = ((PyStringLiteralExpression) key).getStringValue()-->Line_31 $$ myUsedMappingKeys.put(name, true)[ FD ]
