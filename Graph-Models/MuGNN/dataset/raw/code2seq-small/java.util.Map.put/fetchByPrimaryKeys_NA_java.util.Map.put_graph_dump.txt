Line_10 $$ Module module = fetchByPrimaryKey(primaryKey)-->Line_47 $$ uncachedPrimaryKeys.remove(module.getPrimaryKeyObj())[ FD ]
Line_2 $$ public Map<Serializable, Module> fetchByPrimaryKeys(Set<Serializable> primaryKeys) -->Line_28 $$ if (uncachedPrimaryKeys == null) [ CD ]
Line_21 $$ uncachedPrimaryKeys = new HashSet<Serializable>()-->Line_23 $$ uncachedPrimaryKeys.add(primaryKey)[ FD ]
Line_9 $$ Serializable primaryKey = iterator.next()-->Line_25 $$ map.put(primaryKey, module)[ FD ]
Line_7 $$ if (primaryKeys.size() == 1) -->Line_14 $$ return map[ CD ]
Line_9 $$ Serializable primaryKey = iterator.next()-->Line_10 $$ Module module = fetchByPrimaryKey(primaryKey)[ FD ]
Line_9 $$ Serializable primaryKey = iterator.next()-->Line_12 $$ map.put(primaryKey, module)[ FD ]
Line_31 $$ StringBundler query = new StringBundler((uncachedPrimaryKeys.size() * 2) + 1)-->Line_39 $$ String sql = query.toString()[ FD ]
Line_16 $$ Set<Serializable> uncachedPrimaryKeys = null-->Line_23 $$ uncachedPrimaryKeys.add(primaryKey)[ FD ]
Line_2 $$ public Map<Serializable, Module> fetchByPrimaryKeys(Set<Serializable> primaryKeys) -->Line_38 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_16 $$ Set<Serializable> uncachedPrimaryKeys = null-->Line_21 $$ uncachedPrimaryKeys = new HashSet<Serializable>()[ FD ]
Line_40 $$ Session session = null-->Line_43 $$ Query q = session.createQuery(sql)[ FD ]
Line_2 $$ public Map<Serializable, Module> fetchByPrimaryKeys(Set<Serializable> primaryKeys) -->Line_57 $$ return map[ CD ]
Line_9 $$ Serializable primaryKey = iterator.next()-->Line_23 $$ uncachedPrimaryKeys.add(primaryKey)[ FD ]
Line_2 $$ public Map<Serializable, Module> fetchByPrimaryKeys(Set<Serializable> primaryKeys) -->Line_3 $$ if (primaryKeys.isEmpty()) [ FD ]
Line_2 $$ public Map<Serializable, Module> fetchByPrimaryKeys(Set<Serializable> primaryKeys) -->Line_7 $$ if (primaryKeys.size() == 1) [ FD ]
Line_40 $$ Session session = null-->Line_55 $$ closeSession(session)[ FD ]
Line_3 $$ if (primaryKeys.isEmpty()) -->Line_4 $$ return Collections.emptyMap()[ CD ]
Line_2 $$ public Map<Serializable, Module> fetchByPrimaryKeys(Set<Serializable> primaryKeys) -->Line_7 $$ if (primaryKeys.size() == 1) [ CD ]
Line_2 $$ public Map<Serializable, Module> fetchByPrimaryKeys(Set<Serializable> primaryKeys) -->Line_6 $$ Map<Serializable, Module> map = new HashMap<Serializable, Module>()[ CD ]
Line_19 $$ if (module == null) -->Line_25 $$ map.put(primaryKey, module)[ CD ]
Line_2 $$ public Map<Serializable, Module> fetchByPrimaryKeys(Set<Serializable> primaryKeys) -->Line_37 $$ query.setIndex(query.index() - 1)[ CD ]
Line_16 $$ Set<Serializable> uncachedPrimaryKeys = null-->Line_28 $$ if (uncachedPrimaryKeys == null) [ FD ]
Line_21 $$ uncachedPrimaryKeys = new HashSet<Serializable>()-->Line_31 $$ StringBundler query = new StringBundler((uncachedPrimaryKeys.size() * 2) + 1)[ FD ]
Line_2 $$ public Map<Serializable, Module> fetchByPrimaryKeys(Set<Serializable> primaryKeys) -->Line_8 $$ Iterator<Serializable> iterator = primaryKeys.iterator()[ FD ]
Line_2 $$ public Map<Serializable, Module> fetchByPrimaryKeys(Set<Serializable> primaryKeys) -->Line_32 $$ query.append(_SQL_SELECT_MODULE_WHERE_PKS_IN)[ CD ]
Line_6 $$ Map<Serializable, Module> map = new HashMap<Serializable, Module>()-->Line_45 $$ map.put(module.getPrimaryKeyObj(), module)[ FD ]
Line_6 $$ Map<Serializable, Module> map = new HashMap<Serializable, Module>()-->Line_25 $$ map.put(primaryKey, module)[ FD ]
Line_10 $$ Module module = fetchByPrimaryKey(primaryKey)-->Line_45 $$ map.put(module.getPrimaryKeyObj(), module)[ FD ]
Line_31 $$ StringBundler query = new StringBundler((uncachedPrimaryKeys.size() * 2) + 1)-->Line_37 $$ query.setIndex(query.index() - 1)[ FD ]
Line_19 $$ if (module == null) -->Line_20 $$ if (uncachedPrimaryKeys == null) [ CD ]
Line_31 $$ StringBundler query = new StringBundler((uncachedPrimaryKeys.size() * 2) + 1)-->Line_38 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_2 $$ public Map<Serializable, Module> fetchByPrimaryKeys(Set<Serializable> primaryKeys) -->Line_39 $$ String sql = query.toString()[ CD ]
Line_20 $$ if (uncachedPrimaryKeys == null) -->Line_21 $$ uncachedPrimaryKeys = new HashSet<Serializable>()[ CD ]
Line_31 $$ StringBundler query = new StringBundler((uncachedPrimaryKeys.size() * 2) + 1)-->Line_32 $$ query.append(_SQL_SELECT_MODULE_WHERE_PKS_IN)[ FD ]
Line_9 $$ Serializable primaryKey = iterator.next()-->Line_34 $$ query.append(String.valueOf(primaryKey))[ FD ]
Line_11 $$ if (module != null) -->Line_12 $$ map.put(primaryKey, module)[ CD ]
Line_43 $$ Query q = session.createQuery(sql)-->Line_44 $$ for (Module module : (List<Module>) q.list()) [ FD ]
Line_10 $$ Module module = fetchByPrimaryKey(primaryKey)-->Line_25 $$ map.put(primaryKey, module)[ FD ]
Line_2 $$ public Map<Serializable, Module> fetchByPrimaryKeys(Set<Serializable> primaryKeys) -->Line_40 $$ Session session = null[ CD ]
Line_10 $$ Module module = fetchByPrimaryKey(primaryKey)-->Line_46 $$ cacheResult(module)[ FD ]
Line_7 $$ if (primaryKeys.size() == 1) -->Line_9 $$ Serializable primaryKey = iterator.next()[ CD ]
Line_39 $$ String sql = query.toString()-->Line_43 $$ Query q = session.createQuery(sql)[ FD ]
Line_16 $$ Set<Serializable> uncachedPrimaryKeys = null-->Line_31 $$ StringBundler query = new StringBundler((uncachedPrimaryKeys.size() * 2) + 1)[ FD ]
Line_2 $$ public Map<Serializable, Module> fetchByPrimaryKeys(Set<Serializable> primaryKeys) -->Line_3 $$ if (primaryKeys.isEmpty()) [ CD ]
Line_42 $$ session = openSession()-->Line_43 $$ Query q = session.createQuery(sql)[ FD ]
Line_16 $$ Set<Serializable> uncachedPrimaryKeys = null-->Line_20 $$ if (uncachedPrimaryKeys == null) [ FD ]
Line_31 $$ StringBundler query = new StringBundler((uncachedPrimaryKeys.size() * 2) + 1)-->Line_34 $$ query.append(String.valueOf(primaryKey))[ FD ]
Line_9 $$ Serializable primaryKey = iterator.next()-->Line_50 $$ entityCache.putResult(ModuleModelImpl.ENTITY_CACHE_ENABLED, ModuleImpl.class, primaryKey, _nullModule)[ FD ]
Line_2 $$ public Map<Serializable, Module> fetchByPrimaryKeys(Set<Serializable> primaryKeys) -->Line_16 $$ Set<Serializable> uncachedPrimaryKeys = null[ CD ]
Line_7 $$ if (primaryKeys.size() == 1) -->Line_8 $$ Iterator<Serializable> iterator = primaryKeys.iterator()[ CD ]
Line_10 $$ Module module = fetchByPrimaryKey(primaryKey)-->Line_11 $$ if (module != null) [ FD ]
Line_10 $$ Module module = fetchByPrimaryKey(primaryKey)-->Line_12 $$ map.put(primaryKey, module)[ FD ]
Line_40 $$ Session session = null-->Line_42 $$ session = openSession()[ FD ]
Line_16 $$ Set<Serializable> uncachedPrimaryKeys = null-->Line_47 $$ uncachedPrimaryKeys.remove(module.getPrimaryKeyObj())[ FD ]
Line_28 $$ if (uncachedPrimaryKeys == null) -->Line_29 $$ return map[ CD ]
Line_42 $$ session = openSession()-->Line_55 $$ closeSession(session)[ FD ]
Line_21 $$ uncachedPrimaryKeys = new HashSet<Serializable>()-->Line_28 $$ if (uncachedPrimaryKeys == null) [ FD ]
Line_19 $$ if (module == null) -->Line_23 $$ uncachedPrimaryKeys.add(primaryKey)[ CD ]
Line_7 $$ if (primaryKeys.size() == 1) -->Line_10 $$ Module module = fetchByPrimaryKey(primaryKey)[ CD ]
Line_31 $$ StringBundler query = new StringBundler((uncachedPrimaryKeys.size() * 2) + 1)-->Line_35 $$ query.append(StringPool.COMMA)[ FD ]
Line_7 $$ if (primaryKeys.size() == 1) -->Line_11 $$ if (module != null) [ CD ]
Line_6 $$ Map<Serializable, Module> map = new HashMap<Serializable, Module>()-->Line_12 $$ map.put(primaryKey, module)[ FD ]
Line_21 $$ uncachedPrimaryKeys = new HashSet<Serializable>()-->Line_47 $$ uncachedPrimaryKeys.remove(module.getPrimaryKeyObj())[ FD ]
Line_10 $$ Module module = fetchByPrimaryKey(primaryKey)-->Line_19 $$ if (module == null) [ FD ]
Line_8 $$ Iterator<Serializable> iterator = primaryKeys.iterator()-->Line_9 $$ Serializable primaryKey = iterator.next()[ FD ]
Line_9 $$ Serializable primaryKey = iterator.next()-->Line_18 $$ Module module = (Module) entityCache.getResult(ModuleModelImpl.ENTITY_CACHE_ENABLED, ModuleImpl.class, primaryKey)[ FD ]
Line_2 $$ public Map<Serializable, Module> fetchByPrimaryKeys(Set<Serializable> primaryKeys) -->Line_31 $$ StringBundler query = new StringBundler((uncachedPrimaryKeys.size() * 2) + 1)[ CD ]
