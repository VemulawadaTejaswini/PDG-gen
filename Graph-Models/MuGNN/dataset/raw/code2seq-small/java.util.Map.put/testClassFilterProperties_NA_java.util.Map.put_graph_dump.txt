Line_2 $$ public void testClassFilterProperties() throws Exception -->Line_17 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ CD ]
Line_2 $$ public void testClassFilterProperties() throws Exception -->Line_5 $$ properties.put("a.property", "G")[ CD ]
Line_21 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_24 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ FD ]
Line_2 $$ public void testClassFilterProperties() throws Exception -->Line_8 $$ InterfaceOne interfaceOneA = getInstance()[ CD ]
Line_2 $$ public void testClassFilterProperties() throws Exception -->Line_20 $$ Assert.assertEquals(1, serviceTrackerList.size())[ CD ]
Line_2 $$ public void testClassFilterProperties() throws Exception -->Line_6 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, properties)[ CD ]
Line_2 $$ public void testClassFilterProperties() throws Exception -->Line_10 $$ Assert.assertNotNull(serviceRegistrationA)[ CD ]
Line_2 $$ public void testClassFilterProperties() throws Exception -->Line_3 $$ Filter filter = _registry.getFilter("(a.property=G)")[ CD ]
Line_6 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, properties)-->Line_7 $$ Assert.assertEquals(0, serviceTrackerList.size())[ FD ]
Line_11 $$ InterfaceOne interfaceOneB = getInstance()-->Line_23 $$ serviceTrackerList.remove(interfaceOneB)[ FD ]
Line_17 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_18 $$ Assert.assertEquals(1, interfaceOnes.size())[ FD ]
Line_6 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, properties)-->Line_12 $$ serviceTrackerList.add(interfaceOneB)[ FD ]
Line_2 $$ public void testClassFilterProperties() throws Exception -->Line_7 $$ Assert.assertEquals(0, serviceTrackerList.size())[ CD ]
Line_6 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, properties)-->Line_20 $$ Assert.assertEquals(1, serviceTrackerList.size())[ FD ]
Line_2 $$ public void testClassFilterProperties() throws Exception -->Line_26 $$ Assert.assertEquals(0, serviceTrackerList.size())[ CD ]
Line_2 $$ public void testClassFilterProperties() throws Exception -->Line_23 $$ serviceTrackerList.remove(interfaceOneB)[ CD ]
Line_24 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_25 $$ Assert.assertEquals(0, interfaceOnes.size())[ FD ]
Line_6 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, properties)-->Line_23 $$ serviceTrackerList.remove(interfaceOneB)[ FD ]
Line_2 $$ public void testClassFilterProperties() throws Exception -->Line_12 $$ serviceTrackerList.add(interfaceOneB)[ CD ]
Line_3 $$ Filter filter = _registry.getFilter("(a.property=G)")-->Line_6 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, properties)[ FD ]
Line_17 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_22 $$ Assert.assertEquals(1, interfaceOnes.size())[ FD ]
Line_2 $$ public void testClassFilterProperties() throws Exception -->Line_13 $$ Assert.assertEquals(1, serviceTrackerList.size())[ CD ]
Line_2 $$ public void testClassFilterProperties() throws Exception -->Line_22 $$ Assert.assertEquals(1, interfaceOnes.size())[ CD ]
Line_2 $$ public void testClassFilterProperties() throws Exception -->Line_24 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ CD ]
Line_2 $$ public void testClassFilterProperties() throws Exception -->Line_25 $$ Assert.assertEquals(0, interfaceOnes.size())[ CD ]
Line_9 $$ ServiceRegistration<InterfaceOne> serviceRegistrationA = _registry.registerService(InterfaceOne.class, interfaceOneA)-->Line_19 $$ serviceRegistrationA.unregister()[ FD ]
Line_21 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_22 $$ Assert.assertEquals(1, interfaceOnes.size())[ FD ]
Line_4 $$ Map<String, Object> properties = new HashMap()-->Line_6 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, properties)[ FD ]
Line_2 $$ public void testClassFilterProperties() throws Exception -->Line_4 $$ Map<String, Object> properties = new HashMap()[ CD ]
Line_17 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_25 $$ Assert.assertEquals(0, interfaceOnes.size())[ FD ]
Line_14 $$ for (InterfaceOne interfaceOne : serviceTrackerList) -->Line_15 $$ Assert.assertNotNull(interfaceOne)[ FD ]
Line_2 $$ public void testClassFilterProperties() throws Exception -->Line_18 $$ Assert.assertEquals(1, interfaceOnes.size())[ CD ]
Line_2 $$ public void testClassFilterProperties() throws Exception -->Line_11 $$ InterfaceOne interfaceOneB = getInstance()[ CD ]
Line_2 $$ public void testClassFilterProperties() throws Exception -->Line_21 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ CD ]
Line_17 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_24 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ FD ]
Line_11 $$ InterfaceOne interfaceOneB = getInstance()-->Line_12 $$ serviceTrackerList.add(interfaceOneB)[ FD ]
Line_6 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, properties)-->Line_26 $$ Assert.assertEquals(0, serviceTrackerList.size())[ FD ]
Line_17 $$ Collection<InterfaceOne> interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_21 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")[ FD ]
Line_2 $$ public void testClassFilterProperties() throws Exception -->Line_19 $$ serviceRegistrationA.unregister()[ CD ]
Line_2 $$ public void testClassFilterProperties() throws Exception -->Line_9 $$ ServiceRegistration<InterfaceOne> serviceRegistrationA = _registry.registerService(InterfaceOne.class, interfaceOneA)[ CD ]
Line_9 $$ ServiceRegistration<InterfaceOne> serviceRegistrationA = _registry.registerService(InterfaceOne.class, interfaceOneA)-->Line_10 $$ Assert.assertNotNull(serviceRegistrationA)[ FD ]
Line_8 $$ InterfaceOne interfaceOneA = getInstance()-->Line_9 $$ ServiceRegistration<InterfaceOne> serviceRegistrationA = _registry.registerService(InterfaceOne.class, interfaceOneA)[ FD ]
Line_4 $$ Map<String, Object> properties = new HashMap()-->Line_5 $$ properties.put("a.property", "G")[ FD ]
Line_21 $$ interfaceOnes = _registry.getServices(InterfaceOne.class, "(a.property=G)")-->Line_25 $$ Assert.assertEquals(0, interfaceOnes.size())[ FD ]
Line_6 $$ ServiceTrackerList<InterfaceOne> serviceTrackerList = ServiceTrackerCollections.openList(InterfaceOne.class, filter, properties)-->Line_13 $$ Assert.assertEquals(1, serviceTrackerList.size())[ FD ]
