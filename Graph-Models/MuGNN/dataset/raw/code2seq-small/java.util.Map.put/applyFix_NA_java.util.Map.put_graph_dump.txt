Line_7 $$ for (PyKeyValueExpression expression : ((PyDictLiteralExpression) assignedValue).getElements()) -->Line_47 $$ if (expression != null)[ FD ]
Line_23 $$ final PySubscriptionExpression subscription = (PySubscriptionExpression) targetToValue.first-->Line_24 $$ final PyExpression indexExpression = subscription.getIndexExpression()[ FD ]
Line_32 $$ if (targetToValue.second instanceof PyTupleExpression)-->Line_35 $$ valueText = targetToValue.second.getText()[ CD ]
Line_7 $$ for (PyKeyValueExpression expression : ((PyDictLiteralExpression) assignedValue).getElements()) -->Line_10 $$ statementsMap.put(expression.getKey().getText(), value.getText())[ FD ]
Line_5 $$ final PyExpression assignedValue = myStatement.getAssignedValue()-->Line_48 $$ assignedValue.replace(expression)[ FD ]
Line_6 $$ if (assignedValue instanceof PyDictLiteralExpression) -->Line_46 $$ final PyExpression expression = elementGenerator.createExpressionFromText(LanguageLevel.forElement(myStatement), "[ CD ]
Line_6 $$ if (assignedValue instanceof PyDictLiteralExpression) -->Line_13 $$ while (statement instanceof PyAssignmentStatement) [ CD ]
Line_4 $$ final Map<String, String> statementsMap = Maps.newLinkedHashMap()-->Line_10 $$ statementsMap.put(expression.getKey().getText(), value.getText())[ FD ]
Line_43 $$ for (Map.Entry<String, String> entry : statementsMap.entrySet()) -->Line_44 $$ statements.add(entry.getKey() + ": " + entry.getValue())[ FD ]
Line_42 $$ List<String> statements = Lists.newArrayList()-->Line_46 $$ final PyExpression expression = elementGenerator.createExpressionFromText(LanguageLevel.forElement(myStatement), "[ FD ]
Line_16 $$ final String targetName = target.getName()-->Line_17 $$ if (targetName != null) [ FD ]
Line_9 $$ if (value != null)-->Line_10 $$ statementsMap.put(expression.getKey().getText(), value.getText())[ CD ]
Line_7 $$ for (PyKeyValueExpression expression : ((PyDictLiteralExpression) assignedValue).getElements()) -->Line_8 $$ final PyExpression value = expression.getValue()[ FD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_5 $$ final PyExpression assignedValue = myStatement.getAssignedValue()[ CD ]
Line_33 $$ valueText = "(" + targetToValue.second.getText() + ")"-->Line_35 $$ valueText = targetToValue.second.getText()[ FD ]
Line_26 $$ final String indexText-->Line_36 $$ statementsMap.put(indexText, valueText)[ FD ]
Line_6 $$ if (assignedValue instanceof PyDictLiteralExpression) -->Line_42 $$ List<String> statements = Lists.newArrayList()[ CD ]
Line_12 $$ PyStatement statement = PsiTreeUtil.getNextSiblingOfType(myStatement, PyStatement.class)-->Line_39 $$ statement = nextStatement[ FD ]
Line_31 $$ final String valueText-->Line_33 $$ valueText = "(" + targetToValue.second.getText() + ")"[ FD ]
Line_33 $$ valueText = "(" + targetToValue.second.getText() + ")"-->Line_36 $$ statementsMap.put(indexText, valueText)[ FD ]
Line_28 $$ indexText = "(" + indexExpression.getText() + ")"-->Line_30 $$ indexText = indexExpression.getText()[ FD ]
Line_5 $$ final PyExpression assignedValue = myStatement.getAssignedValue()-->Line_6 $$ if (assignedValue instanceof PyDictLiteralExpression) [ FD ]
Line_12 $$ PyStatement statement = PsiTreeUtil.getNextSiblingOfType(myStatement, PyStatement.class)-->Line_19 $$ final PyStatement nextStatement = PsiTreeUtil.getNextSiblingOfType(statement, PyStatement.class)[ FD ]
Line_17 $$ if (targetName != null) -->Line_18 $$ final List<Pair<PyExpression, PyExpression>> targetsToValues = PyDictCreationInspection.getDictTargets(target, targetName, assignmentStatement)[ CD ]
Line_39 $$ statement = nextStatement-->Line_37 $$ statement.delete()[ FD ]
Line_28 $$ indexText = "(" + indexExpression.getText() + ")"-->Line_36 $$ statementsMap.put(indexText, valueText)[ FD ]
Line_27 $$ if (indexExpression instanceof PyTupleExpression)-->Line_28 $$ indexText = "(" + indexExpression.getText() + ")"[ CD ]
Line_13 $$ while (statement instanceof PyAssignmentStatement) -->Line_14 $$ final PyAssignmentStatement assignmentStatement = (PyAssignmentStatement) statement[ CD ]
Line_18 $$ final List<Pair<PyExpression, PyExpression>> targetsToValues = PyDictCreationInspection.getDictTargets(target, targetName, assignmentStatement)-->Line_20 $$ if (targetsToValues == null || targetsToValues.isEmpty())[ FD ]
Line_6 $$ if (assignedValue instanceof PyDictLiteralExpression) -->Line_47 $$ if (expression != null)[ CD ]
Line_17 $$ if (targetName != null) -->Line_20 $$ if (targetsToValues == null || targetsToValues.isEmpty())[ CD ]
Line_35 $$ valueText = targetToValue.second.getText()-->Line_36 $$ statementsMap.put(indexText, valueText)[ FD ]
Line_4 $$ final Map<String, String> statementsMap = Maps.newLinkedHashMap()-->Line_36 $$ statementsMap.put(indexText, valueText)[ FD ]
Line_26 $$ final String indexText-->Line_30 $$ indexText = indexExpression.getText()[ FD ]
Line_14 $$ final PyAssignmentStatement assignmentStatement = (PyAssignmentStatement) statement-->Line_18 $$ final List<Pair<PyExpression, PyExpression>> targetsToValues = PyDictCreationInspection.getDictTargets(target, targetName, assignmentStatement)[ FD ]
Line_42 $$ List<String> statements = Lists.newArrayList()-->Line_44 $$ statements.add(entry.getKey() + ": " + entry.getValue())[ FD ]
Line_4 $$ final Map<String, String> statementsMap = Maps.newLinkedHashMap()-->Line_43 $$ for (Map.Entry<String, String> entry : statementsMap.entrySet()) [ FD ]
Line_19 $$ final PyStatement nextStatement = PsiTreeUtil.getNextSiblingOfType(statement, PyStatement.class)-->Line_39 $$ statement = nextStatement[ FD ]
Line_3 $$ final PyElementGenerator elementGenerator = PyElementGenerator.getInstance(project)-->Line_46 $$ final PyExpression expression = elementGenerator.createExpressionFromText(LanguageLevel.forElement(myStatement), "[ FD ]
Line_15 $$ final PyExpression target = myStatement.getTargets()[0]-->Line_18 $$ final List<Pair<PyExpression, PyExpression>> targetsToValues = PyDictCreationInspection.getDictTargets(target, targetName, assignmentStatement)[ FD ]
Line_32 $$ if (targetToValue.second instanceof PyTupleExpression)-->Line_33 $$ valueText = "(" + targetToValue.second.getText() + ")"[ CD ]
Line_31 $$ final String valueText-->Line_35 $$ valueText = targetToValue.second.getText()[ FD ]
Line_27 $$ if (indexExpression instanceof PyTupleExpression)-->Line_30 $$ indexText = indexExpression.getText()[ CD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_3 $$ final PyElementGenerator elementGenerator = PyElementGenerator.getInstance(project)[ CD ]
Line_17 $$ if (targetName != null) -->Line_19 $$ final PyStatement nextStatement = PsiTreeUtil.getNextSiblingOfType(statement, PyStatement.class)[ CD ]
Line_17 $$ if (targetName != null) -->Line_39 $$ statement = nextStatement[ CD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_4 $$ final Map<String, String> statementsMap = Maps.newLinkedHashMap()[ CD ]
Line_13 $$ while (statement instanceof PyAssignmentStatement) -->Line_15 $$ final PyExpression target = myStatement.getTargets()[0][ CD ]
Line_8 $$ final PyExpression value = expression.getValue()-->Line_9 $$ if (value != null)[ FD ]
Line_8 $$ final PyExpression value = expression.getValue()-->Line_10 $$ statementsMap.put(expression.getKey().getText(), value.getText())[ FD ]
Line_6 $$ if (assignedValue instanceof PyDictLiteralExpression) -->Line_12 $$ PyStatement statement = PsiTreeUtil.getNextSiblingOfType(myStatement, PyStatement.class)[ CD ]
Line_13 $$ while (statement instanceof PyAssignmentStatement) -->Line_17 $$ if (targetName != null) [ CD ]
Line_31 $$ final String valueText-->Line_36 $$ statementsMap.put(indexText, valueText)[ FD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_6 $$ if (assignedValue instanceof PyDictLiteralExpression) [ CD ]
Line_30 $$ indexText = indexExpression.getText()-->Line_36 $$ statementsMap.put(indexText, valueText)[ FD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_3 $$ final PyElementGenerator elementGenerator = PyElementGenerator.getInstance(project)[ FD ]
Line_26 $$ final String indexText-->Line_28 $$ indexText = "(" + indexExpression.getText() + ")"[ FD ]
Line_39 $$ statement = nextStatement-->Line_19 $$ final PyStatement nextStatement = PsiTreeUtil.getNextSiblingOfType(statement, PyStatement.class)[ FD ]
Line_24 $$ final PyExpression indexExpression = subscription.getIndexExpression()-->Line_30 $$ indexText = indexExpression.getText()[ FD ]
Line_12 $$ PyStatement statement = PsiTreeUtil.getNextSiblingOfType(myStatement, PyStatement.class)-->Line_37 $$ statement.delete()[ FD ]
Line_16 $$ final String targetName = target.getName()-->Line_18 $$ final List<Pair<PyExpression, PyExpression>> targetsToValues = PyDictCreationInspection.getDictTargets(target, targetName, assignmentStatement)[ FD ]
Line_24 $$ final PyExpression indexExpression = subscription.getIndexExpression()-->Line_27 $$ if (indexExpression instanceof PyTupleExpression)[ FD ]
Line_24 $$ final PyExpression indexExpression = subscription.getIndexExpression()-->Line_28 $$ indexText = "(" + indexExpression.getText() + ")"[ FD ]
Line_13 $$ while (statement instanceof PyAssignmentStatement) -->Line_16 $$ final String targetName = target.getName()[ CD ]
Line_47 $$ if (expression != null)-->Line_48 $$ assignedValue.replace(expression)[ CD ]
Line_7 $$ for (PyKeyValueExpression expression : ((PyDictLiteralExpression) assignedValue).getElements()) -->Line_48 $$ assignedValue.replace(expression)[ FD ]
Line_15 $$ final PyExpression target = myStatement.getTargets()[0]-->Line_16 $$ final String targetName = target.getName()[ FD ]
