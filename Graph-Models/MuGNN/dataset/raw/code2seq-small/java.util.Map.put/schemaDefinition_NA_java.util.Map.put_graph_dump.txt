Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_37 $$ schema.add(KeyspaceMetadata.create(ks3, KeyspaceParams.simple(5), Tables.of(standardCFMD(ks3, "Standard1"), keysIndexCFMD(ks3, "Indexed1", true))))[ CD ]
Line_3 $$ List<KeyspaceMetadata> schema = new ArrayList<KeyspaceMetadata>()-->Line_29 $$ schema.add(KeyspaceMetadata.create(ks1, KeyspaceParams.simple(1), Tables.of(standardCFMD(ks1, "Standard1").compaction(CompactionParams.scts(compactionOptions)), standardCFMD(ks1, "Standard2"), standardCFMD(ks1, "Standard3"), standardCFMD(ks1, "Standard4"), standardCFMD(ks1, "StandardGCGS0").gcGraceSeconds(0), standardCFMD(ks1, "StandardLong1"), standardCFMD(ks1, "StandardLong2"), superCFMD(ks1, "Super1", LongType.instance), superCFMD(ks1, "Super2", LongType.instance), superCFMD(ks1, "Super3", LongType.instance), superCFMD(ks1, "Super4", UTF8Type.instance), superCFMD(ks1, "Super5", bytes), superCFMD(ks1, "Super6", LexicalUUIDType.instance, UTF8Type.instance), keysIndexCFMD(ks1, "Indexed1", true), keysIndexCFMD(ks1, "Indexed2", false), superCFMD(ks1, "SuperDirectGC", BytesType.instance).gcGraceSeconds(0), jdbcCFMD(ks1, "JdbcUtf8", UTF8Type.instance).addColumnDefinition(utf8Column(ks1, "JdbcUtf8")), jdbcCFMD(ks1, "JdbcLong", LongType.instance), jdbcCFMD(ks1, "JdbcBytes", bytes), jdbcCFMD(ks1, "JdbcAscii", AsciiType.instance), standardCFMD(ks1, "StandardLeveled").compaction(CompactionParams.lcs(leveledOptions)), standardCFMD(ks1, "legacyleveled").compaction(CompactionParams.lcs(leveledOptions)), standardCFMD(ks1, "StandardLowIndexInterval").minIndexInterval(8).maxIndexInterval(256).caching(CachingParams.CACHE_NOTHING))))[ FD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_46 $$ if (Boolean.parseBoolean(System.getProperty("cassandra.test.compression", "false")))[ CD ]
Line_3 $$ List<KeyspaceMetadata> schema = new ArrayList<KeyspaceMetadata>()-->Line_42 $$ schema.add(KeyspaceMetadata.create(ks_rcs, KeyspaceParams.simple(1), Tables.of(standardCFMD(ks_rcs, "CFWithoutCache").caching(CachingParams.CACHE_NOTHING), standardCFMD(ks_rcs, "CachedCF").caching(CachingParams.CACHE_EVERYTHING), standardCFMD(ks_rcs, "CachedIntCF").caching(new CachingParams(true, 100)))))[ FD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_19 $$ Map<Byte, AbstractType<?>> aliases = new HashMap<Byte, AbstractType<?>>()[ CD ]
Line_19 $$ Map<Byte, AbstractType<?>> aliases = new HashMap<Byte, AbstractType<?>>()-->Line_21 $$ aliases.put((byte) 't', TimeUUIDType.instance)[ FD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_29 $$ schema.add(KeyspaceMetadata.create(ks1, KeyspaceParams.simple(1), Tables.of(standardCFMD(ks1, "Standard1").compaction(CompactionParams.scts(compactionOptions)), standardCFMD(ks1, "Standard2"), standardCFMD(ks1, "Standard3"), standardCFMD(ks1, "Standard4"), standardCFMD(ks1, "StandardGCGS0").gcGraceSeconds(0), standardCFMD(ks1, "StandardLong1"), standardCFMD(ks1, "StandardLong2"), superCFMD(ks1, "Super1", LongType.instance), superCFMD(ks1, "Super2", LongType.instance), superCFMD(ks1, "Super3", LongType.instance), superCFMD(ks1, "Super4", UTF8Type.instance), superCFMD(ks1, "Super5", bytes), superCFMD(ks1, "Super6", LexicalUUIDType.instance, UTF8Type.instance), keysIndexCFMD(ks1, "Indexed1", true), keysIndexCFMD(ks1, "Indexed2", false), superCFMD(ks1, "SuperDirectGC", BytesType.instance).gcGraceSeconds(0), jdbcCFMD(ks1, "JdbcUtf8", UTF8Type.instance).addColumnDefinition(utf8Column(ks1, "JdbcUtf8")), jdbcCFMD(ks1, "JdbcLong", LongType.instance), jdbcCFMD(ks1, "JdbcBytes", bytes), jdbcCFMD(ks1, "JdbcAscii", AsciiType.instance), standardCFMD(ks1, "StandardLeveled").compaction(CompactionParams.lcs(leveledOptions)), standardCFMD(ks1, "legacyleveled").compaction(CompactionParams.lcs(leveledOptions)), standardCFMD(ks1, "StandardLowIndexInterval").minIndexInterval(8).maxIndexInterval(256).caching(CachingParams.CACHE_NOTHING))))[ CD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_28 $$ leveledOptions.put("sstable_size_in_mb", "1")[ CD ]
Line_25 $$ Map<String, String> compactionOptions = new HashMap<String, String>()-->Line_29 $$ schema.add(KeyspaceMetadata.create(ks1, KeyspaceParams.simple(1), Tables.of(standardCFMD(ks1, "Standard1").compaction(CompactionParams.scts(compactionOptions)), standardCFMD(ks1, "Standard2"), standardCFMD(ks1, "Standard3"), standardCFMD(ks1, "Standard4"), standardCFMD(ks1, "StandardGCGS0").gcGraceSeconds(0), standardCFMD(ks1, "StandardLong1"), standardCFMD(ks1, "StandardLong2"), superCFMD(ks1, "Super1", LongType.instance), superCFMD(ks1, "Super2", LongType.instance), superCFMD(ks1, "Super3", LongType.instance), superCFMD(ks1, "Super4", UTF8Type.instance), superCFMD(ks1, "Super5", bytes), superCFMD(ks1, "Super6", LexicalUUIDType.instance, UTF8Type.instance), keysIndexCFMD(ks1, "Indexed1", true), keysIndexCFMD(ks1, "Indexed2", false), superCFMD(ks1, "SuperDirectGC", BytesType.instance).gcGraceSeconds(0), jdbcCFMD(ks1, "JdbcUtf8", UTF8Type.instance).addColumnDefinition(utf8Column(ks1, "JdbcUtf8")), jdbcCFMD(ks1, "JdbcLong", LongType.instance), jdbcCFMD(ks1, "JdbcBytes", bytes), jdbcCFMD(ks1, "JdbcAscii", AsciiType.instance), standardCFMD(ks1, "StandardLeveled").compaction(CompactionParams.lcs(leveledOptions)), standardCFMD(ks1, "legacyleveled").compaction(CompactionParams.lcs(leveledOptions)), standardCFMD(ks1, "StandardLowIndexInterval").minIndexInterval(8).maxIndexInterval(256).caching(CachingParams.CACHE_NOTHING))))[ FD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_21 $$ aliases.put((byte) 't', TimeUUIDType.instance)[ CD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_27 $$ Map<String, String> leveledOptions = new HashMap<String, String>()[ CD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_9 $$ String ks6 = testName + "Keyspace6"[ CD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_24 $$ AbstractType<?> dynamicComposite = DynamicCompositeType.getInstance(aliases)[ CD ]
Line_16 $$ AbstractType bytes = BytesType.instance-->Line_29 $$ schema.add(KeyspaceMetadata.create(ks1, KeyspaceParams.simple(1), Tables.of(standardCFMD(ks1, "Standard1").compaction(CompactionParams.scts(compactionOptions)), standardCFMD(ks1, "Standard2"), standardCFMD(ks1, "Standard3"), standardCFMD(ks1, "Standard4"), standardCFMD(ks1, "StandardGCGS0").gcGraceSeconds(0), standardCFMD(ks1, "StandardLong1"), standardCFMD(ks1, "StandardLong2"), superCFMD(ks1, "Super1", LongType.instance), superCFMD(ks1, "Super2", LongType.instance), superCFMD(ks1, "Super3", LongType.instance), superCFMD(ks1, "Super4", UTF8Type.instance), superCFMD(ks1, "Super5", bytes), superCFMD(ks1, "Super6", LexicalUUIDType.instance, UTF8Type.instance), keysIndexCFMD(ks1, "Indexed1", true), keysIndexCFMD(ks1, "Indexed2", false), superCFMD(ks1, "SuperDirectGC", BytesType.instance).gcGraceSeconds(0), jdbcCFMD(ks1, "JdbcUtf8", UTF8Type.instance).addColumnDefinition(utf8Column(ks1, "JdbcUtf8")), jdbcCFMD(ks1, "JdbcLong", LongType.instance), jdbcCFMD(ks1, "JdbcBytes", bytes), jdbcCFMD(ks1, "JdbcAscii", AsciiType.instance), standardCFMD(ks1, "StandardLeveled").compaction(CompactionParams.lcs(leveledOptions)), standardCFMD(ks1, "legacyleveled").compaction(CompactionParams.lcs(leveledOptions)), standardCFMD(ks1, "StandardLowIndexInterval").minIndexInterval(8).maxIndexInterval(256).caching(CachingParams.CACHE_NOTHING))))[ FD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_15 $$ String ks_cql = testName + "cql_keyspace"[ CD ]
Line_15 $$ String ks_cql = testName + "cql_keyspace"-->Line_44 $$ schema.add(KeyspaceMetadata.create(ks_cql, KeyspaceParams.simple(1), Tables.of(CFMetaData.compile("CREATE TABLE table1 (" + "k int PRIMARY KEY," + "v1 text," + "v2 int" + ")", ks_cql), CFMetaData.compile("CREATE TABLE table2 (" + "k text," + "c text," + "v text," + "PRIMARY KEY (k, c))", ks_cql), CFMetaData.compile("CREATE TABLE foo (" + "bar text, " + "baz text, " + "qux text, " + "PRIMARY KEY(bar, baz) ) " + "WITH COMPACT STORAGE", ks_cql), CFMetaData.compile("CREATE TABLE foofoo (" + "bar text, " + "baz text, " + "qux text, " + "quz text, " + "foo text, " + "PRIMARY KEY((bar, baz), qux, quz) ) " + "WITH COMPACT STORAGE", ks_cql))))[ FD ]
Line_9 $$ String ks6 = testName + "Keyspace6"-->Line_40 $$ schema.add(KeyspaceMetadata.create(ks6, KeyspaceParams.simple(1), Tables.of(keysIndexCFMD(ks6, "Indexed1", true))))[ FD ]
Line_46 $$ if (Boolean.parseBoolean(System.getProperty("cassandra.test.compression", "false")))-->Line_47 $$ useCompression(schema)[ CD ]
Line_10 $$ String ks_kcs = testName + "KeyCacheSpace"-->Line_41 $$ schema.add(KeyspaceMetadata.create(ks_kcs, KeyspaceParams.simple(1), Tables.of(standardCFMD(ks_kcs, "Standard1"), standardCFMD(ks_kcs, "Standard2"), standardCFMD(ks_kcs, "Standard3"))))[ FD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_6 $$ String ks3 = testName + "Keyspace3"[ CD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_38 $$ schema.add(KeyspaceMetadata.create(ks4, KeyspaceParams.simple(3), Tables.of(standardCFMD(ks4, "Standard1"), standardCFMD(ks4, "Standard3"), superCFMD(ks4, "Super3", bytes), superCFMD(ks4, "Super4", TimeUUIDType.instance), superCFMD(ks4, "Super5", TimeUUIDType.instance, BytesType.instance))))[ CD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_20 $$ aliases.put((byte) 'b', BytesType.instance)[ CD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_25 $$ Map<String, String> compactionOptions = new HashMap<String, String>()[ CD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_17 $$ AbstractType<?> composite = CompositeType.getInstance(Arrays.asList(new AbstractType<?>[] [ CD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_22 $$ aliases.put((byte) 'B', ReversedType.getInstance(BytesType.instance))[ CD ]
Line_4 $$ String ks1 = testName + "Keyspace1"-->Line_29 $$ schema.add(KeyspaceMetadata.create(ks1, KeyspaceParams.simple(1), Tables.of(standardCFMD(ks1, "Standard1").compaction(CompactionParams.scts(compactionOptions)), standardCFMD(ks1, "Standard2"), standardCFMD(ks1, "Standard3"), standardCFMD(ks1, "Standard4"), standardCFMD(ks1, "StandardGCGS0").gcGraceSeconds(0), standardCFMD(ks1, "StandardLong1"), standardCFMD(ks1, "StandardLong2"), superCFMD(ks1, "Super1", LongType.instance), superCFMD(ks1, "Super2", LongType.instance), superCFMD(ks1, "Super3", LongType.instance), superCFMD(ks1, "Super4", UTF8Type.instance), superCFMD(ks1, "Super5", bytes), superCFMD(ks1, "Super6", LexicalUUIDType.instance, UTF8Type.instance), keysIndexCFMD(ks1, "Indexed1", true), keysIndexCFMD(ks1, "Indexed2", false), superCFMD(ks1, "SuperDirectGC", BytesType.instance).gcGraceSeconds(0), jdbcCFMD(ks1, "JdbcUtf8", UTF8Type.instance).addColumnDefinition(utf8Column(ks1, "JdbcUtf8")), jdbcCFMD(ks1, "JdbcLong", LongType.instance), jdbcCFMD(ks1, "JdbcBytes", bytes), jdbcCFMD(ks1, "JdbcAscii", AsciiType.instance), standardCFMD(ks1, "StandardLeveled").compaction(CompactionParams.lcs(leveledOptions)), standardCFMD(ks1, "legacyleveled").compaction(CompactionParams.lcs(leveledOptions)), standardCFMD(ks1, "StandardLowIndexInterval").minIndexInterval(8).maxIndexInterval(256).caching(CachingParams.CACHE_NOTHING))))[ FD ]
Line_7 $$ String ks4 = testName + "Keyspace4"-->Line_38 $$ schema.add(KeyspaceMetadata.create(ks4, KeyspaceParams.simple(3), Tables.of(standardCFMD(ks4, "Standard1"), standardCFMD(ks4, "Standard3"), superCFMD(ks4, "Super3", bytes), superCFMD(ks4, "Super4", TimeUUIDType.instance), superCFMD(ks4, "Super5", TimeUUIDType.instance, BytesType.instance))))[ FD ]
Line_3 $$ List<KeyspaceMetadata> schema = new ArrayList<KeyspaceMetadata>()-->Line_41 $$ schema.add(KeyspaceMetadata.create(ks_kcs, KeyspaceParams.simple(1), Tables.of(standardCFMD(ks_kcs, "Standard1"), standardCFMD(ks_kcs, "Standard2"), standardCFMD(ks_kcs, "Standard3"))))[ FD ]
Line_27 $$ Map<String, String> leveledOptions = new HashMap<String, String>()-->Line_28 $$ leveledOptions.put("sstable_size_in_mb", "1")[ FD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_13 $$ String ks_nocommit = testName + "NoCommitlogSpace"[ CD ]
Line_16 $$ AbstractType bytes = BytesType.instance-->Line_38 $$ schema.add(KeyspaceMetadata.create(ks4, KeyspaceParams.simple(3), Tables.of(standardCFMD(ks4, "Standard1"), standardCFMD(ks4, "Standard3"), superCFMD(ks4, "Super3", bytes), superCFMD(ks4, "Super4", TimeUUIDType.instance), superCFMD(ks4, "Super5", TimeUUIDType.instance, BytesType.instance))))[ FD ]
Line_19 $$ Map<Byte, AbstractType<?>> aliases = new HashMap<Byte, AbstractType<?>>()-->Line_23 $$ aliases.put((byte) 'T', ReversedType.getInstance(TimeUUIDType.instance))[ FD ]
Line_3 $$ List<KeyspaceMetadata> schema = new ArrayList<KeyspaceMetadata>()-->Line_35 $$ schema.add(KeyspaceMetadata.create(ks2, KeyspaceParams.simple(1), Tables.of(standardCFMD(ks2, "Standard1"), standardCFMD(ks2, "Standard3"), superCFMD(ks2, "Super3", bytes), superCFMD(ks2, "Super4", TimeUUIDType.instance), keysIndexCFMD(ks2, "Indexed1", true), compositeIndexCFMD(ks2, "Indexed2", true), compositeIndexCFMD(ks2, "Indexed3", true).gcGraceSeconds(0))))[ FD ]
Line_19 $$ Map<Byte, AbstractType<?>> aliases = new HashMap<Byte, AbstractType<?>>()-->Line_22 $$ aliases.put((byte) 'B', ReversedType.getInstance(BytesType.instance))[ FD ]
Line_3 $$ List<KeyspaceMetadata> schema = new ArrayList<KeyspaceMetadata>()-->Line_39 $$ schema.add(KeyspaceMetadata.create(ks5, KeyspaceParams.simple(2), Tables.of(standardCFMD(ks5, "Standard1"))))[ FD ]
Line_3 $$ List<KeyspaceMetadata> schema = new ArrayList<KeyspaceMetadata>()-->Line_37 $$ schema.add(KeyspaceMetadata.create(ks3, KeyspaceParams.simple(5), Tables.of(standardCFMD(ks3, "Standard1"), keysIndexCFMD(ks3, "Indexed1", true))))[ FD ]
Line_3 $$ List<KeyspaceMetadata> schema = new ArrayList<KeyspaceMetadata>()-->Line_38 $$ schema.add(KeyspaceMetadata.create(ks4, KeyspaceParams.simple(3), Tables.of(standardCFMD(ks4, "Standard1"), standardCFMD(ks4, "Standard3"), superCFMD(ks4, "Super3", bytes), superCFMD(ks4, "Super4", TimeUUIDType.instance), superCFMD(ks4, "Super5", TimeUUIDType.instance, BytesType.instance))))[ FD ]
Line_8 $$ String ks5 = testName + "Keyspace5"-->Line_39 $$ schema.add(KeyspaceMetadata.create(ks5, KeyspaceParams.simple(2), Tables.of(standardCFMD(ks5, "Standard1"))))[ FD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_43 $$ schema.add(KeyspaceMetadata.create(ks_nocommit, KeyspaceParams.simpleTransient(1), Tables.of(standardCFMD(ks_nocommit, "Standard1"))))[ CD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_40 $$ schema.add(KeyspaceMetadata.create(ks6, KeyspaceParams.simple(1), Tables.of(keysIndexCFMD(ks6, "Indexed1", true))))[ CD ]
Line_13 $$ String ks_nocommit = testName + "NoCommitlogSpace"-->Line_43 $$ schema.add(KeyspaceMetadata.create(ks_nocommit, KeyspaceParams.simpleTransient(1), Tables.of(standardCFMD(ks_nocommit, "Standard1"))))[ FD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_8 $$ String ks5 = testName + "Keyspace5"[ CD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_14 $$ String ks_prsi = testName + "PerRowSecondaryIndex"[ CD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_35 $$ schema.add(KeyspaceMetadata.create(ks2, KeyspaceParams.simple(1), Tables.of(standardCFMD(ks2, "Standard1"), standardCFMD(ks2, "Standard3"), superCFMD(ks2, "Super3", bytes), superCFMD(ks2, "Super4", TimeUUIDType.instance), keysIndexCFMD(ks2, "Indexed1", true), compositeIndexCFMD(ks2, "Indexed2", true), compositeIndexCFMD(ks2, "Indexed3", true).gcGraceSeconds(0))))[ CD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_10 $$ String ks_kcs = testName + "KeyCacheSpace"[ CD ]
Line_19 $$ Map<Byte, AbstractType<?>> aliases = new HashMap<Byte, AbstractType<?>>()-->Line_24 $$ AbstractType<?> dynamicComposite = DynamicCompositeType.getInstance(aliases)[ FD ]
Line_25 $$ Map<String, String> compactionOptions = new HashMap<String, String>()-->Line_26 $$ compactionOptions.put("tombstone_compaction_interval", "1")[ FD ]
Line_3 $$ List<KeyspaceMetadata> schema = new ArrayList<KeyspaceMetadata>()-->Line_40 $$ schema.add(KeyspaceMetadata.create(ks6, KeyspaceParams.simple(1), Tables.of(keysIndexCFMD(ks6, "Indexed1", true))))[ FD ]
Line_3 $$ List<KeyspaceMetadata> schema = new ArrayList<KeyspaceMetadata>()-->Line_43 $$ schema.add(KeyspaceMetadata.create(ks_nocommit, KeyspaceParams.simpleTransient(1), Tables.of(standardCFMD(ks_nocommit, "Standard1"))))[ FD ]
Line_16 $$ AbstractType bytes = BytesType.instance-->Line_35 $$ schema.add(KeyspaceMetadata.create(ks2, KeyspaceParams.simple(1), Tables.of(standardCFMD(ks2, "Standard1"), standardCFMD(ks2, "Standard3"), superCFMD(ks2, "Super3", bytes), superCFMD(ks2, "Super4", TimeUUIDType.instance), keysIndexCFMD(ks2, "Indexed1", true), compositeIndexCFMD(ks2, "Indexed2", true), compositeIndexCFMD(ks2, "Indexed3", true).gcGraceSeconds(0))))[ FD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_12 $$ String ks_ccs = testName + "CounterCacheSpace"[ CD ]
Line_3 $$ List<KeyspaceMetadata> schema = new ArrayList<KeyspaceMetadata>()-->Line_44 $$ schema.add(KeyspaceMetadata.create(ks_cql, KeyspaceParams.simple(1), Tables.of(CFMetaData.compile("CREATE TABLE table1 (" + "k int PRIMARY KEY," + "v1 text," + "v2 int" + ")", ks_cql), CFMetaData.compile("CREATE TABLE table2 (" + "k text," + "c text," + "v text," + "PRIMARY KEY (k, c))", ks_cql), CFMetaData.compile("CREATE TABLE foo (" + "bar text, " + "baz text, " + "qux text, " + "PRIMARY KEY(bar, baz) ) " + "WITH COMPACT STORAGE", ks_cql), CFMetaData.compile("CREATE TABLE foofoo (" + "bar text, " + "baz text, " + "qux text, " + "quz text, " + "foo text, " + "PRIMARY KEY((bar, baz), qux, quz) ) " + "WITH COMPACT STORAGE", ks_cql))))[ FD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_4 $$ String ks1 = testName + "Keyspace1"[ CD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_3 $$ List<KeyspaceMetadata> schema = new ArrayList<KeyspaceMetadata>()[ CD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_7 $$ String ks4 = testName + "Keyspace4"[ CD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_41 $$ schema.add(KeyspaceMetadata.create(ks_kcs, KeyspaceParams.simple(1), Tables.of(standardCFMD(ks_kcs, "Standard1"), standardCFMD(ks_kcs, "Standard2"), standardCFMD(ks_kcs, "Standard3"))))[ CD ]
Line_19 $$ Map<Byte, AbstractType<?>> aliases = new HashMap<Byte, AbstractType<?>>()-->Line_20 $$ aliases.put((byte) 'b', BytesType.instance)[ FD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_26 $$ compactionOptions.put("tombstone_compaction_interval", "1")[ CD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_11 $$ String ks_rcs = testName + "RowCacheSpace"[ CD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_16 $$ AbstractType bytes = BytesType.instance[ CD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_23 $$ aliases.put((byte) 'T', ReversedType.getInstance(TimeUUIDType.instance))[ CD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_5 $$ String ks2 = testName + "Keyspace2"[ CD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_18 $$ AbstractType<?> compositeMaxMin = CompositeType.getInstance(Arrays.asList(new AbstractType<?>[] [ CD ]
Line_27 $$ Map<String, String> leveledOptions = new HashMap<String, String>()-->Line_29 $$ schema.add(KeyspaceMetadata.create(ks1, KeyspaceParams.simple(1), Tables.of(standardCFMD(ks1, "Standard1").compaction(CompactionParams.scts(compactionOptions)), standardCFMD(ks1, "Standard2"), standardCFMD(ks1, "Standard3"), standardCFMD(ks1, "Standard4"), standardCFMD(ks1, "StandardGCGS0").gcGraceSeconds(0), standardCFMD(ks1, "StandardLong1"), standardCFMD(ks1, "StandardLong2"), superCFMD(ks1, "Super1", LongType.instance), superCFMD(ks1, "Super2", LongType.instance), superCFMD(ks1, "Super3", LongType.instance), superCFMD(ks1, "Super4", UTF8Type.instance), superCFMD(ks1, "Super5", bytes), superCFMD(ks1, "Super6", LexicalUUIDType.instance, UTF8Type.instance), keysIndexCFMD(ks1, "Indexed1", true), keysIndexCFMD(ks1, "Indexed2", false), superCFMD(ks1, "SuperDirectGC", BytesType.instance).gcGraceSeconds(0), jdbcCFMD(ks1, "JdbcUtf8", UTF8Type.instance).addColumnDefinition(utf8Column(ks1, "JdbcUtf8")), jdbcCFMD(ks1, "JdbcLong", LongType.instance), jdbcCFMD(ks1, "JdbcBytes", bytes), jdbcCFMD(ks1, "JdbcAscii", AsciiType.instance), standardCFMD(ks1, "StandardLeveled").compaction(CompactionParams.lcs(leveledOptions)), standardCFMD(ks1, "legacyleveled").compaction(CompactionParams.lcs(leveledOptions)), standardCFMD(ks1, "StandardLowIndexInterval").minIndexInterval(8).maxIndexInterval(256).caching(CachingParams.CACHE_NOTHING))))[ FD ]
Line_6 $$ String ks3 = testName + "Keyspace3"-->Line_37 $$ schema.add(KeyspaceMetadata.create(ks3, KeyspaceParams.simple(5), Tables.of(standardCFMD(ks3, "Standard1"), keysIndexCFMD(ks3, "Indexed1", true))))[ FD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_42 $$ schema.add(KeyspaceMetadata.create(ks_rcs, KeyspaceParams.simple(1), Tables.of(standardCFMD(ks_rcs, "CFWithoutCache").caching(CachingParams.CACHE_NOTHING), standardCFMD(ks_rcs, "CachedCF").caching(CachingParams.CACHE_EVERYTHING), standardCFMD(ks_rcs, "CachedIntCF").caching(new CachingParams(true, 100)))))[ CD ]
Line_11 $$ String ks_rcs = testName + "RowCacheSpace"-->Line_42 $$ schema.add(KeyspaceMetadata.create(ks_rcs, KeyspaceParams.simple(1), Tables.of(standardCFMD(ks_rcs, "CFWithoutCache").caching(CachingParams.CACHE_NOTHING), standardCFMD(ks_rcs, "CachedCF").caching(CachingParams.CACHE_EVERYTHING), standardCFMD(ks_rcs, "CachedIntCF").caching(new CachingParams(true, 100)))))[ FD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_44 $$ schema.add(KeyspaceMetadata.create(ks_cql, KeyspaceParams.simple(1), Tables.of(CFMetaData.compile("CREATE TABLE table1 (" + "k int PRIMARY KEY," + "v1 text," + "v2 int" + ")", ks_cql), CFMetaData.compile("CREATE TABLE table2 (" + "k text," + "c text," + "v text," + "PRIMARY KEY (k, c))", ks_cql), CFMetaData.compile("CREATE TABLE foo (" + "bar text, " + "baz text, " + "qux text, " + "PRIMARY KEY(bar, baz) ) " + "WITH COMPACT STORAGE", ks_cql), CFMetaData.compile("CREATE TABLE foofoo (" + "bar text, " + "baz text, " + "qux text, " + "quz text, " + "foo text, " + "PRIMARY KEY((bar, baz), qux, quz) ) " + "WITH COMPACT STORAGE", ks_cql))))[ CD ]
Line_2 $$ public static void schemaDefinition(String testName) throws ConfigurationException -->Line_39 $$ schema.add(KeyspaceMetadata.create(ks5, KeyspaceParams.simple(2), Tables.of(standardCFMD(ks5, "Standard1"))))[ CD ]
Line_3 $$ List<KeyspaceMetadata> schema = new ArrayList<KeyspaceMetadata>()-->Line_47 $$ useCompression(schema)[ FD ]
Line_5 $$ String ks2 = testName + "Keyspace2"-->Line_35 $$ schema.add(KeyspaceMetadata.create(ks2, KeyspaceParams.simple(1), Tables.of(standardCFMD(ks2, "Standard1"), standardCFMD(ks2, "Standard3"), superCFMD(ks2, "Super3", bytes), superCFMD(ks2, "Super4", TimeUUIDType.instance), keysIndexCFMD(ks2, "Indexed1", true), compositeIndexCFMD(ks2, "Indexed2", true), compositeIndexCFMD(ks2, "Indexed3", true).gcGraceSeconds(0))))[ FD ]
