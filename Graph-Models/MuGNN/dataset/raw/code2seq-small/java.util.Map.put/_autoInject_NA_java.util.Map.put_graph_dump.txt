Line_27 $$ referencedBean = _beanFactory.getBean(referencedBeanName)-->Line_47 $$ field.set(targetBean, referencedBean)[ FD ]
Line_11 $$ for (Field field : fields) -->Line_44 $$ ReflectionUtils.makeAccessible(field)[ FD ]
Line_33 $$ try (PrintWriter printWriter = new PrintWriter(stringWriter)) -->Line_36 $$ printWriter.print(" and PortalBeanLocator failed with: ")[ FD ]
Line_33 $$ try (PrintWriter printWriter = new PrintWriter(stringWriter)) -->Line_35 $$ nsbde.printStackTrace(printWriter)[ FD ]
Line_30 $$ referencedBean = PortalBeanLocatorUtil.locate(referencedBeanName)-->Line_47 $$ field.set(targetBean, referencedBean)[ FD ]
Line_16 $$ referencedBeanName = beanReference.name()-->Line_22 $$ referencedBeanName = referencedBeanType.getName()[ FD ]
Line_2 $$ private void _autoInject(Object targetBean, String targetBeanName, Class<?> beanClass) -->Line_6 $$ String className = beanClass.getName()[ FD ]
Line_2 $$ private void _autoInject(Object targetBean, String targetBeanName, Class<?> beanClass) -->Line_6 $$ String className = beanClass.getName()[ CD ]
Line_13 $$ String referencedBeanName = null-->Line_30 $$ referencedBean = PortalBeanLocatorUtil.locate(referencedBeanName)[ FD ]
Line_2 $$ private void _autoInject(Object targetBean, String targetBeanName, Class<?> beanClass) -->Line_10 $$ Field[] fields = beanClass.getDeclaredFields()[ CD ]
Line_22 $$ referencedBeanName = referencedBeanType.getName()-->Line_45 $$ BeanReferenceRefreshUtil.registerRefreshPoint(_beanFactory, targetBean, field, referencedBeanName)[ FD ]
Line_15 $$ if (beanReference != null) -->Line_16 $$ referencedBeanName = beanReference.name()[ CD ]
Line_24 $$ Object referencedBean = _beans.get(referencedBeanName)-->Line_27 $$ referencedBean = _beanFactory.getBean(referencedBeanName)[ FD ]
Line_13 $$ String referencedBeanName = null-->Line_27 $$ referencedBean = _beanFactory.getBean(referencedBeanName)[ FD ]
Line_24 $$ Object referencedBean = _beans.get(referencedBeanName)-->Line_42 $$ _beans.put(referencedBeanName, referencedBean)[ FD ]
Line_22 $$ referencedBeanName = referencedBeanType.getName()-->Line_42 $$ _beans.put(referencedBeanName, referencedBean)[ FD ]
Line_27 $$ referencedBean = _beanFactory.getBean(referencedBeanName)-->Line_42 $$ _beans.put(referencedBeanName, referencedBean)[ FD ]
Line_14 $$ Class<?> referencedBeanType = null-->Line_21 $$ if (!Object.class.equals(referencedBeanType)) [ FD ]
Line_33 $$ try (PrintWriter printWriter = new PrintWriter(stringWriter)) -->Line_37 $$ printWriter.append(ble.getMessage())[ FD ]
Line_11 $$ for (Field field : fields) -->Line_45 $$ BeanReferenceRefreshUtil.registerRefreshPoint(_beanFactory, targetBean, field, referencedBeanName)[ FD ]
Line_11 $$ for (Field field : fields) -->Line_12 $$ BeanReference beanReference = field.getAnnotation(BeanReference.class)[ FD ]
Line_17 $$ referencedBeanType = beanReference.type()-->Line_21 $$ if (!Object.class.equals(referencedBeanType)) [ FD ]
Line_33 $$ try (PrintWriter printWriter = new PrintWriter(stringWriter)) -->Line_34 $$ printWriter.print("BeanFactory could not find bean: ")[ FD ]
Line_15 $$ if (beanReference != null) -->Line_17 $$ referencedBeanType = beanReference.type()[ CD ]
Line_14 $$ Class<?> referencedBeanType = null-->Line_22 $$ referencedBeanName = referencedBeanType.getName()[ FD ]
Line_7 $$ if (className.equals(_JAVA_LANG_OBJECT) || className.startsWith(_ORG_SPRINGFRAMEWORK)) -->Line_8 $$ return[ CD ]
Line_16 $$ referencedBeanName = beanReference.name()-->Line_42 $$ _beans.put(referencedBeanName, referencedBean)[ FD ]
Line_13 $$ String referencedBeanName = null-->Line_45 $$ BeanReferenceRefreshUtil.registerRefreshPoint(_beanFactory, targetBean, field, referencedBeanName)[ FD ]
Line_22 $$ referencedBeanName = referencedBeanType.getName()-->Line_30 $$ referencedBean = PortalBeanLocatorUtil.locate(referencedBeanName)[ FD ]
Line_2 $$ private void _autoInject(Object targetBean, String targetBeanName, Class<?> beanClass) -->Line_52 $$ _autoInject(targetBean, targetBeanName, beanClass.getSuperclass())[ FD ]
Line_24 $$ Object referencedBean = _beans.get(referencedBeanName)-->Line_47 $$ field.set(targetBean, referencedBean)[ FD ]
Line_2 $$ private void _autoInject(Object targetBean, String targetBeanName, Class<?> beanClass) -->Line_10 $$ Field[] fields = beanClass.getDeclaredFields()[ FD ]
Line_16 $$ referencedBeanName = beanReference.name()-->Line_45 $$ BeanReferenceRefreshUtil.registerRefreshPoint(_beanFactory, targetBean, field, referencedBeanName)[ FD ]
Line_2 $$ private void _autoInject(Object targetBean, String targetBeanName, Class<?> beanClass) -->Line_3 $$ if ((beanClass == null) || beanClass.isInterface()) [ FD ]
Line_21 $$ if (!Object.class.equals(referencedBeanType)) -->Line_22 $$ referencedBeanName = referencedBeanType.getName()[ CD ]
Line_14 $$ Class<?> referencedBeanType = null-->Line_17 $$ referencedBeanType = beanReference.type()[ FD ]
Line_24 $$ Object referencedBean = _beans.get(referencedBeanName)-->Line_25 $$ if (referencedBean == null) [ FD ]
Line_17 $$ referencedBeanType = beanReference.type()-->Line_22 $$ referencedBeanName = referencedBeanType.getName()[ FD ]
Line_2 $$ private void _autoInject(Object targetBean, String targetBeanName, Class<?> beanClass) -->Line_52 $$ _autoInject(targetBean, targetBeanName, beanClass.getSuperclass())[ CD ]
Line_2 $$ private void _autoInject(Object targetBean, String targetBeanName, Class<?> beanClass) -->Line_47 $$ field.set(targetBean, referencedBean)[ FD ]
Line_12 $$ BeanReference beanReference = field.getAnnotation(BeanReference.class)-->Line_15 $$ if (beanReference != null) [ FD ]
Line_25 $$ if (referencedBean == null) -->Line_42 $$ _beans.put(referencedBeanName, referencedBean)[ CD ]
Line_13 $$ String referencedBeanName = null-->Line_42 $$ _beans.put(referencedBeanName, referencedBean)[ FD ]
Line_6 $$ String className = beanClass.getName()-->Line_7 $$ if (className.equals(_JAVA_LANG_OBJECT) || className.startsWith(_ORG_SPRINGFRAMEWORK)) [ FD ]
Line_12 $$ BeanReference beanReference = field.getAnnotation(BeanReference.class)-->Line_16 $$ referencedBeanName = beanReference.name()[ FD ]
Line_30 $$ referencedBean = PortalBeanLocatorUtil.locate(referencedBeanName)-->Line_42 $$ _beans.put(referencedBeanName, referencedBean)[ FD ]
Line_2 $$ private void _autoInject(Object targetBean, String targetBeanName, Class<?> beanClass) -->Line_45 $$ BeanReferenceRefreshUtil.registerRefreshPoint(_beanFactory, targetBean, field, referencedBeanName)[ FD ]
Line_16 $$ referencedBeanName = beanReference.name()-->Line_27 $$ referencedBean = _beanFactory.getBean(referencedBeanName)[ FD ]
Line_2 $$ private void _autoInject(Object targetBean, String targetBeanName, Class<?> beanClass) -->Line_7 $$ if (className.equals(_JAVA_LANG_OBJECT) || className.startsWith(_ORG_SPRINGFRAMEWORK)) [ CD ]
Line_13 $$ String referencedBeanName = null-->Line_16 $$ referencedBeanName = beanReference.name()[ FD ]
Line_22 $$ referencedBeanName = referencedBeanType.getName()-->Line_24 $$ Object referencedBean = _beans.get(referencedBeanName)[ FD ]
Line_27 $$ referencedBean = _beanFactory.getBean(referencedBeanName)-->Line_30 $$ referencedBean = PortalBeanLocatorUtil.locate(referencedBeanName)[ FD ]
Line_11 $$ for (Field field : fields) -->Line_47 $$ field.set(targetBean, referencedBean)[ FD ]
Line_3 $$ if ((beanClass == null) || beanClass.isInterface()) -->Line_4 $$ return[ CD ]
Line_13 $$ String referencedBeanName = null-->Line_24 $$ Object referencedBean = _beans.get(referencedBeanName)[ FD ]
Line_12 $$ BeanReference beanReference = field.getAnnotation(BeanReference.class)-->Line_17 $$ referencedBeanType = beanReference.type()[ FD ]
Line_32 $$ StringWriter stringWriter = new StringWriter()-->Line_39 $$ throw new BeanLocatorException(stringWriter.toString(), ble)[ FD ]
Line_22 $$ referencedBeanName = referencedBeanType.getName()-->Line_27 $$ referencedBean = _beanFactory.getBean(referencedBeanName)[ FD ]
Line_24 $$ Object referencedBean = _beans.get(referencedBeanName)-->Line_30 $$ referencedBean = PortalBeanLocatorUtil.locate(referencedBeanName)[ FD ]
Line_13 $$ String referencedBeanName = null-->Line_22 $$ referencedBeanName = referencedBeanType.getName()[ FD ]
Line_2 $$ private void _autoInject(Object targetBean, String targetBeanName, Class<?> beanClass) -->Line_3 $$ if ((beanClass == null) || beanClass.isInterface()) [ CD ]
Line_16 $$ referencedBeanName = beanReference.name()-->Line_30 $$ referencedBean = PortalBeanLocatorUtil.locate(referencedBeanName)[ FD ]
Line_16 $$ referencedBeanName = beanReference.name()-->Line_24 $$ Object referencedBean = _beans.get(referencedBeanName)[ FD ]
