Line_25 $$ final LeafReaderContext subReaderContext = leaves.get(readerIndex)-->Line_30 $$ final AtomicFieldData data = suggestionContext.getIndexFieldDataService().getForField(payloadFieldType).load(subReaderContext)[ FD ]
Line_2 $$ protected Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> innerExecute(String name, final CompletionSuggestionContext suggestionContext, final IndexSearcher searcher, CharsRefBuilder spare) throws IOException -->Line_7 $$ CompletionSuggestion completionSuggestion = new CompletionSuggestion(name, suggestionContext.getSize())[ CD ]
Line_27 $$ for (String field : payloadFields) -->Line_28 $$ MappedFieldType payloadFieldType = suggestionContext.getMapperService().fullName(field)[ FD ]
Line_2 $$ protected Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> innerExecute(String name, final CompletionSuggestionContext suggestionContext, final IndexSearcher searcher, CharsRefBuilder spare) throws IOException -->Line_8 $$ spare.copyUTF8Bytes(suggestionContext.getText())[ CD ]
Line_2 $$ protected Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> innerExecute(String name, final CompletionSuggestionContext suggestionContext, final IndexSearcher searcher, CharsRefBuilder spare) throws IOException -->Line_11 $$ TopSuggestDocsCollector collector = new TopDocumentsCollector(suggestionContext.getSize())[ CD ]
Line_2 $$ protected Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> innerExecute(String name, final CompletionSuggestionContext suggestionContext, final IndexSearcher searcher, CharsRefBuilder spare) throws IOException -->Line_11 $$ TopSuggestDocsCollector collector = new TopDocumentsCollector(suggestionContext.getSize())[ FD ]
Line_14 $$ List<LeafReaderContext> leaves = searcher.getIndexReader().leaves()-->Line_24 $$ final int readerIndex = ReaderUtil.subIndex(suggestDoc.doc, leaves)[ FD ]
Line_2 $$ protected Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> innerExecute(String name, final CompletionSuggestionContext suggestionContext, final IndexSearcher searcher, CharsRefBuilder spare) throws IOException -->Line_28 $$ MappedFieldType payloadFieldType = suggestionContext.getMapperService().fullName(field)[ FD ]
Line_2 $$ protected Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> innerExecute(String name, final CompletionSuggestionContext suggestionContext, final IndexSearcher searcher, CharsRefBuilder spare) throws IOException -->Line_12 $$ suggest(searcher, suggestionContext.toQuery(), collector)[ FD ]
Line_2 $$ protected Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> innerExecute(String name, final CompletionSuggestionContext suggestionContext, final IndexSearcher searcher, CharsRefBuilder spare) throws IOException -->Line_4 $$ if (fieldType == null) [ CD ]
Line_31 $$ final ScriptDocValues scriptValues = data.getScriptValues()-->Line_32 $$ scriptValues.setNextDocId(subDocId)[ FD ]
Line_2 $$ protected Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> innerExecute(String name, final CompletionSuggestionContext suggestionContext, final IndexSearcher searcher, CharsRefBuilder spare) throws IOException -->Line_10 $$ completionSuggestion.addTerm(completionSuggestEntry)[ CD ]
Line_2 $$ protected Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> innerExecute(String name, final CompletionSuggestionContext suggestionContext, final IndexSearcher searcher, CharsRefBuilder spare) throws IOException -->Line_9 $$ CompletionSuggestion.Entry completionSuggestEntry = new CompletionSuggestion.Entry(new Text(spare.toString()), 0, spare.length())[ CD ]
Line_39 $$ if (numResult++ < suggestionContext.getSize()) -->Line_41 $$ completionSuggestEntry.addOption(option)[ CD ]
Line_29 $$ if (payloadFieldType != null) -->Line_31 $$ final ScriptDocValues scriptValues = data.getScriptValues()[ CD ]
Line_2 $$ protected Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> innerExecute(String name, final CompletionSuggestionContext suggestionContext, final IndexSearcher searcher, CharsRefBuilder spare) throws IOException -->Line_8 $$ spare.copyUTF8Bytes(suggestionContext.getText())[ FD ]
Line_23 $$ if (payloadFields.isEmpty() == false) -->Line_25 $$ final LeafReaderContext subReaderContext = leaves.get(readerIndex)[ CD ]
Line_26 $$ final int subDocId = suggestDoc.doc - subReaderContext.docBase-->Line_32 $$ scriptValues.setNextDocId(subDocId)[ FD ]
Line_17 $$ Map<String, Set<CharSequence>> contexts = Collections.emptyMap()-->Line_19 $$ contexts = fieldType.getContextMappings().getNamedContexts(suggestDoc.getContexts())[ FD ]
Line_28 $$ MappedFieldType payloadFieldType = suggestionContext.getMapperService().fullName(field)-->Line_30 $$ final AtomicFieldData data = suggestionContext.getIndexFieldDataService().getForField(payloadFieldType).load(subReaderContext)[ FD ]
Line_2 $$ protected Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> innerExecute(String name, final CompletionSuggestionContext suggestionContext, final IndexSearcher searcher, CharsRefBuilder spare) throws IOException -->Line_30 $$ final AtomicFieldData data = suggestionContext.getIndexFieldDataService().getForField(payloadFieldType).load(subReaderContext)[ FD ]
Line_40 $$ CompletionSuggestion.Entry.Option option = new CompletionSuggestion.Entry.Option(new Text(suggestDoc.key.toString()), suggestDoc.score, contexts, payload)-->Line_41 $$ completionSuggestEntry.addOption(option)[ FD ]
Line_23 $$ if (payloadFields.isEmpty() == false) -->Line_26 $$ final int subDocId = suggestDoc.doc - subReaderContext.docBase[ CD ]
Line_29 $$ if (payloadFieldType != null) -->Line_33 $$ payload.put(field, new ArrayList(scriptValues.getValues()))[ CD ]
Line_2 $$ protected Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> innerExecute(String name, final CompletionSuggestionContext suggestionContext, final IndexSearcher searcher, CharsRefBuilder spare) throws IOException -->Line_13 $$ int numResult = 0[ CD ]
Line_11 $$ TopSuggestDocsCollector collector = new TopDocumentsCollector(suggestionContext.getSize())-->Line_15 $$ for (TopSuggestDocs.SuggestScoreDoc suggestScoreDoc : collector.get().scoreLookupDocs()) [ FD ]
Line_39 $$ if (numResult++ < suggestionContext.getSize()) -->Line_40 $$ CompletionSuggestion.Entry.Option option = new CompletionSuggestion.Entry.Option(new Text(suggestDoc.key.toString()), suggestDoc.score, contexts, payload)[ CD ]
Line_3 $$ final CompletionFieldMapper.CompletionFieldType fieldType = suggestionContext.getFieldType()-->Line_4 $$ if (fieldType == null) [ FD ]
Line_2 $$ protected Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> innerExecute(String name, final CompletionSuggestionContext suggestionContext, final IndexSearcher searcher, CharsRefBuilder spare) throws IOException -->Line_7 $$ CompletionSuggestion completionSuggestion = new CompletionSuggestion(name, suggestionContext.getSize())[ FD ]
Line_9 $$ CompletionSuggestion.Entry completionSuggestEntry = new CompletionSuggestion.Entry(new Text(spare.toString()), 0, spare.length())-->Line_10 $$ completionSuggestion.addTerm(completionSuggestEntry)[ FD ]
Line_2 $$ protected Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> innerExecute(String name, final CompletionSuggestionContext suggestionContext, final IndexSearcher searcher, CharsRefBuilder spare) throws IOException -->Line_3 $$ final CompletionFieldMapper.CompletionFieldType fieldType = suggestionContext.getFieldType()[ CD ]
Line_18 $$ if (fieldType.hasContextMappings() && suggestDoc.getContexts().isEmpty() == false) -->Line_19 $$ contexts = fieldType.getContextMappings().getNamedContexts(suggestDoc.getContexts())[ CD ]
Line_23 $$ if (payloadFields.isEmpty() == false) -->Line_24 $$ final int readerIndex = ReaderUtil.subIndex(suggestDoc.doc, leaves)[ CD ]
Line_31 $$ final ScriptDocValues scriptValues = data.getScriptValues()-->Line_33 $$ payload.put(field, new ArrayList(scriptValues.getValues()))[ FD ]
Line_16 $$ TopDocumentsCollector.SuggestDoc suggestDoc = (TopDocumentsCollector.SuggestDoc) suggestScoreDoc-->Line_18 $$ if (fieldType.hasContextMappings() && suggestDoc.getContexts().isEmpty() == false) [ FD ]
Line_14 $$ List<LeafReaderContext> leaves = searcher.getIndexReader().leaves()-->Line_25 $$ final LeafReaderContext subReaderContext = leaves.get(readerIndex)[ FD ]
Line_2 $$ protected Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> innerExecute(String name, final CompletionSuggestionContext suggestionContext, final IndexSearcher searcher, CharsRefBuilder spare) throws IOException -->Line_9 $$ CompletionSuggestion.Entry completionSuggestEntry = new CompletionSuggestion.Entry(new Text(spare.toString()), 0, spare.length())[ FD ]
Line_2 $$ protected Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> innerExecute(String name, final CompletionSuggestionContext suggestionContext, final IndexSearcher searcher, CharsRefBuilder spare) throws IOException -->Line_12 $$ suggest(searcher, suggestionContext.toQuery(), collector)[ CD ]
Line_2 $$ protected Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> innerExecute(String name, final CompletionSuggestionContext suggestionContext, final IndexSearcher searcher, CharsRefBuilder spare) throws IOException -->Line_22 $$ Set<String> payloadFields = suggestionContext.getPayloadFields()[ FD ]
Line_11 $$ TopSuggestDocsCollector collector = new TopDocumentsCollector(suggestionContext.getSize())-->Line_12 $$ suggest(searcher, suggestionContext.toQuery(), collector)[ FD ]
Line_3 $$ final CompletionFieldMapper.CompletionFieldType fieldType = suggestionContext.getFieldType()-->Line_18 $$ if (fieldType.hasContextMappings() && suggestDoc.getContexts().isEmpty() == false) [ FD ]
Line_21 $$ final Map<String, List<Object>> payload = new HashMap(0)-->Line_33 $$ payload.put(field, new ArrayList(scriptValues.getValues()))[ FD ]
Line_2 $$ protected Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> innerExecute(String name, final CompletionSuggestionContext suggestionContext, final IndexSearcher searcher, CharsRefBuilder spare) throws IOException -->Line_3 $$ final CompletionFieldMapper.CompletionFieldType fieldType = suggestionContext.getFieldType()[ FD ]
Line_22 $$ Set<String> payloadFields = suggestionContext.getPayloadFields()-->Line_23 $$ if (payloadFields.isEmpty() == false) [ FD ]
Line_7 $$ CompletionSuggestion completionSuggestion = new CompletionSuggestion(name, suggestionContext.getSize())-->Line_10 $$ completionSuggestion.addTerm(completionSuggestEntry)[ FD ]
Line_16 $$ TopDocumentsCollector.SuggestDoc suggestDoc = (TopDocumentsCollector.SuggestDoc) suggestScoreDoc-->Line_19 $$ contexts = fieldType.getContextMappings().getNamedContexts(suggestDoc.getContexts())[ FD ]
Line_9 $$ CompletionSuggestion.Entry completionSuggestEntry = new CompletionSuggestion.Entry(new Text(spare.toString()), 0, spare.length())-->Line_41 $$ completionSuggestEntry.addOption(option)[ FD ]
Line_13 $$ int numResult = 0-->Line_39 $$ if (numResult++ < suggestionContext.getSize()) [ FD ]
Line_2 $$ protected Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> innerExecute(String name, final CompletionSuggestionContext suggestionContext, final IndexSearcher searcher, CharsRefBuilder spare) throws IOException -->Line_14 $$ List<LeafReaderContext> leaves = searcher.getIndexReader().leaves()[ FD ]
Line_29 $$ if (payloadFieldType != null) -->Line_32 $$ scriptValues.setNextDocId(subDocId)[ CD ]
Line_24 $$ final int readerIndex = ReaderUtil.subIndex(suggestDoc.doc, leaves)-->Line_25 $$ final LeafReaderContext subReaderContext = leaves.get(readerIndex)[ FD ]
Line_2 $$ protected Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> innerExecute(String name, final CompletionSuggestionContext suggestionContext, final IndexSearcher searcher, CharsRefBuilder spare) throws IOException -->Line_14 $$ List<LeafReaderContext> leaves = searcher.getIndexReader().leaves()[ CD ]
Line_30 $$ final AtomicFieldData data = suggestionContext.getIndexFieldDataService().getForField(payloadFieldType).load(subReaderContext)-->Line_31 $$ final ScriptDocValues scriptValues = data.getScriptValues()[ FD ]
Line_28 $$ MappedFieldType payloadFieldType = suggestionContext.getMapperService().fullName(field)-->Line_29 $$ if (payloadFieldType != null) [ FD ]
Line_2 $$ protected Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> innerExecute(String name, final CompletionSuggestionContext suggestionContext, final IndexSearcher searcher, CharsRefBuilder spare) throws IOException -->Line_39 $$ if (numResult++ < suggestionContext.getSize()) [ FD ]
Line_3 $$ final CompletionFieldMapper.CompletionFieldType fieldType = suggestionContext.getFieldType()-->Line_19 $$ contexts = fieldType.getContextMappings().getNamedContexts(suggestDoc.getContexts())[ FD ]
Line_2 $$ protected Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> innerExecute(String name, final CompletionSuggestionContext suggestionContext, final IndexSearcher searcher, CharsRefBuilder spare) throws IOException -->Line_46 $$ return completionSuggestion[ CD ]
Line_2 $$ protected Suggest.Suggestion<? extends Suggest.Suggestion.Entry<? extends Suggest.Suggestion.Entry.Option>> innerExecute(String name, final CompletionSuggestionContext suggestionContext, final IndexSearcher searcher, CharsRefBuilder spare) throws IOException -->Line_5 $$ throw new IllegalArgumentException("field [" + suggestionContext.getField() + "] is not a completion field")[ FD ]
Line_29 $$ if (payloadFieldType != null) -->Line_30 $$ final AtomicFieldData data = suggestionContext.getIndexFieldDataService().getForField(payloadFieldType).load(subReaderContext)[ CD ]
Line_27 $$ for (String field : payloadFields) -->Line_33 $$ payload.put(field, new ArrayList(scriptValues.getValues()))[ FD ]
