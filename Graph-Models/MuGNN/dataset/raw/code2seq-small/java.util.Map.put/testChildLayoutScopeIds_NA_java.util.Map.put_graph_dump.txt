Line_2 $$ public void testChildLayoutScopeIds() throws Exception -->Line_5 $$ preferenceMap.put("scopeIds", new String[] [ CD ]
Line_2 $$ public void testChildLayoutScopeIds() throws Exception -->Line_3 $$ Map<String, String[]> preferenceMap = new HashMap()[ CD ]
Line_4 $$ Group childGroup = GroupTestUtil.addGroup(group.getGroupId())-->Line_11 $$ GroupLocalServiceUtil.deleteGroup(childGroup)[ FD ]
Line_7 $$ PortletPreferences portletPreferences = getImportedPortletPreferences(preferenceMap)-->Line_8 $$ Assert.assertEquals(null, portletPreferences.getValue("scopeId", null))[ FD ]
Line_7 $$ PortletPreferences portletPreferences = getImportedPortletPreferences(preferenceMap)-->Line_9 $$ Assert.assertTrue("The child group ID should have been filtered out on import", ArrayUtil.isEmpty(portletPreferences.getValues("scopeIds", null)))[ FD ]
Line_2 $$ public void testChildLayoutScopeIds() throws Exception -->Line_4 $$ Group childGroup = GroupTestUtil.addGroup(group.getGroupId())[ CD ]
Line_3 $$ Map<String, String[]> preferenceMap = new HashMap()-->Line_5 $$ preferenceMap.put("scopeIds", new String[] [ FD ]
Line_4 $$ Group childGroup = GroupTestUtil.addGroup(group.getGroupId())-->Line_5 $$ preferenceMap.put("scopeIds", new String[] [ FD ]
Line_3 $$ Map<String, String[]> preferenceMap = new HashMap()-->Line_7 $$ PortletPreferences portletPreferences = getImportedPortletPreferences(preferenceMap)[ FD ]
