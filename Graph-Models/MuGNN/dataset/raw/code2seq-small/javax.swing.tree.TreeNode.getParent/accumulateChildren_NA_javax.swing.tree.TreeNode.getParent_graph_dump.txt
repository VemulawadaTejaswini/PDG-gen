Line_2 $$ private static void accumulateChildren(@NotNull final TreeNode node, @NotNull final List<TreeNode> list, final boolean showRoot) -->Line_3 $$ if (showRoot || node.getParent() != null)[ FD ]
Line_2 $$ private static void accumulateChildren(@NotNull final TreeNode node, @NotNull final List<TreeNode> list, final boolean showRoot) -->Line_4 $$ list.add(node)[ FD ]
Line_2 $$ private static void accumulateChildren(@NotNull final TreeNode node, @NotNull final List<TreeNode> list, final boolean showRoot) -->Line_5 $$ final int count = node.getChildCount()[ FD ]
Line_5 $$ final int count = node.getChildCount()-->Line_6 $$ for (int i = 0; i < count; i++) [ FD ]
Line_6 $$ for (int i = 0; i < count; i++) -->Line_7 $$ accumulateChildren(node.getChildAt(i), list, showRoot)[ FD ]
Line_6 $$ for (int i = 0; i < count; i++) -->Line_7 $$ accumulateChildren(node.getChildAt(i), list, showRoot)[ CD ]
Line_2 $$ private static void accumulateChildren(@NotNull final TreeNode node, @NotNull final List<TreeNode> list, final boolean showRoot) -->Line_5 $$ final int count = node.getChildCount()[ CD ]
Line_2 $$ private static void accumulateChildren(@NotNull final TreeNode node, @NotNull final List<TreeNode> list, final boolean showRoot) -->Line_3 $$ if (showRoot || node.getParent() != null)[ CD ]
Line_2 $$ private static void accumulateChildren(@NotNull final TreeNode node, @NotNull final List<TreeNode> list, final boolean showRoot) -->Line_6 $$ for (int i = 0; i < count; i++) [ CD ]
Line_2 $$ private static void accumulateChildren(@NotNull final TreeNode node, @NotNull final List<TreeNode> list, final boolean showRoot) -->Line_7 $$ accumulateChildren(node.getChildAt(i), list, showRoot)[ FD ]
Line_3 $$ if (showRoot || node.getParent() != null)-->Line_4 $$ list.add(node)[ CD ]
