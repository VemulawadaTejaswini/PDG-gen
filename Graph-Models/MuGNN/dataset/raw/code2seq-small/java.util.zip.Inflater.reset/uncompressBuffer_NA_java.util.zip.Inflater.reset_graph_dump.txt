Line_4 $$ Inflater inf = inflater.get()-->Line_19 $$ while (!inf.needsInput()) [ FD ]
Line_6 $$ byte[] buffer = FBUtilities.getThreadLocalScratchBuffer()-->Line_17 $$ input.get(buffer, 0, inputLength)[ FD ]
Line_16 $$ int inputLength = input.remaining()-->Line_17 $$ input.get(buffer, 0, inputLength)[ FD ]
Line_6 $$ byte[] buffer = FBUtilities.getThreadLocalScratchBuffer()-->Line_9 $$ input.get(buffer, 0, chunkLen)[ FD ]
Line_7 $$ int chunkLen = buffer.length / 2-->Line_10 $$ inf.setInput(buffer, 0, chunkLen)[ FD ]
Line_4 $$ Inflater inf = inflater.get()-->Line_12 $$ int len = inf.inflate(buffer, chunkLen, chunkLen)[ FD ]
Line_11 $$ while (!inf.needsInput()) -->Line_12 $$ int len = inf.inflate(buffer, chunkLen, chunkLen)[ CD ]
Line_7 $$ int chunkLen = buffer.length / 2-->Line_20 $$ int len = inf.inflate(buffer, chunkLen, chunkLen)[ FD ]
Line_4 $$ Inflater inf = inflater.get()-->Line_5 $$ inf.reset()[ FD ]
Line_2 $$ public void uncompressBuffer(ByteBuffer input, ByteBuffer output) throws IOException -->Line_13 $$ output.put(buffer, chunkLen, len)[ FD ]
Line_4 $$ Inflater inf = inflater.get()-->Line_10 $$ inf.setInput(buffer, 0, chunkLen)[ FD ]
Line_6 $$ byte[] buffer = FBUtilities.getThreadLocalScratchBuffer()-->Line_10 $$ inf.setInput(buffer, 0, chunkLen)[ FD ]
Line_6 $$ byte[] buffer = FBUtilities.getThreadLocalScratchBuffer()-->Line_18 $$ inf.setInput(buffer, 0, inputLength)[ FD ]
Line_19 $$ while (!inf.needsInput()) -->Line_20 $$ int len = inf.inflate(buffer, chunkLen, chunkLen)[ CD ]
Line_7 $$ int chunkLen = buffer.length / 2-->Line_13 $$ output.put(buffer, chunkLen, len)[ FD ]
Line_19 $$ while (!inf.needsInput()) -->Line_21 $$ output.put(buffer, chunkLen, len)[ CD ]
Line_8 $$ while (input.remaining() > chunkLen) -->Line_9 $$ input.get(buffer, 0, chunkLen)[ CD ]
Line_4 $$ Inflater inf = inflater.get()-->Line_18 $$ inf.setInput(buffer, 0, inputLength)[ FD ]
Line_4 $$ Inflater inf = inflater.get()-->Line_20 $$ int len = inf.inflate(buffer, chunkLen, chunkLen)[ FD ]
Line_8 $$ while (input.remaining() > chunkLen) -->Line_10 $$ inf.setInput(buffer, 0, chunkLen)[ CD ]
Line_12 $$ int len = inf.inflate(buffer, chunkLen, chunkLen)-->Line_21 $$ output.put(buffer, chunkLen, len)[ FD ]
Line_4 $$ Inflater inf = inflater.get()-->Line_11 $$ while (!inf.needsInput()) [ FD ]
Line_20 $$ int len = inf.inflate(buffer, chunkLen, chunkLen)-->Line_21 $$ output.put(buffer, chunkLen, len)[ FD ]
Line_2 $$ public void uncompressBuffer(ByteBuffer input, ByteBuffer output) throws IOException -->Line_17 $$ input.get(buffer, 0, inputLength)[ FD ]
Line_2 $$ public void uncompressBuffer(ByteBuffer input, ByteBuffer output) throws IOException -->Line_8 $$ while (input.remaining() > chunkLen) [ FD ]
Line_6 $$ byte[] buffer = FBUtilities.getThreadLocalScratchBuffer()-->Line_21 $$ output.put(buffer, chunkLen, len)[ FD ]
Line_7 $$ int chunkLen = buffer.length / 2-->Line_8 $$ while (input.remaining() > chunkLen) [ FD ]
Line_11 $$ while (!inf.needsInput()) -->Line_13 $$ output.put(buffer, chunkLen, len)[ CD ]
Line_2 $$ public void uncompressBuffer(ByteBuffer input, ByteBuffer output) throws IOException -->Line_16 $$ int inputLength = input.remaining()[ FD ]
Line_16 $$ int inputLength = input.remaining()-->Line_18 $$ inf.setInput(buffer, 0, inputLength)[ FD ]
Line_6 $$ byte[] buffer = FBUtilities.getThreadLocalScratchBuffer()-->Line_20 $$ int len = inf.inflate(buffer, chunkLen, chunkLen)[ FD ]
Line_6 $$ byte[] buffer = FBUtilities.getThreadLocalScratchBuffer()-->Line_13 $$ output.put(buffer, chunkLen, len)[ FD ]
Line_12 $$ int len = inf.inflate(buffer, chunkLen, chunkLen)-->Line_13 $$ output.put(buffer, chunkLen, len)[ FD ]
Line_6 $$ byte[] buffer = FBUtilities.getThreadLocalScratchBuffer()-->Line_12 $$ int len = inf.inflate(buffer, chunkLen, chunkLen)[ FD ]
Line_7 $$ int chunkLen = buffer.length / 2-->Line_9 $$ input.get(buffer, 0, chunkLen)[ FD ]
Line_2 $$ public void uncompressBuffer(ByteBuffer input, ByteBuffer output) throws IOException -->Line_21 $$ output.put(buffer, chunkLen, len)[ FD ]
Line_8 $$ while (input.remaining() > chunkLen) -->Line_11 $$ while (!inf.needsInput()) [ CD ]
Line_2 $$ public void uncompressBuffer(ByteBuffer input, ByteBuffer output) throws IOException -->Line_9 $$ input.get(buffer, 0, chunkLen)[ FD ]
Line_7 $$ int chunkLen = buffer.length / 2-->Line_21 $$ output.put(buffer, chunkLen, len)[ FD ]
Line_7 $$ int chunkLen = buffer.length / 2-->Line_12 $$ int len = inf.inflate(buffer, chunkLen, chunkLen)[ FD ]
