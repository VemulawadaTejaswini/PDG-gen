Line_5 $$ int bracketCount = 0-->Line_11 $$ bracketCount++[ FD ]
Line_28 $$ if (c == '(') -->Line_35 $$ if (bracketCount > 0 || textCount > 0) [ CD ]
Line_21 $$ if (textCount == 0) -->Line_22 $$ currentOffset++[ CD ]
Line_2 $$ protected String computeKey(@NotNull CharSequence text) -->Line_5 $$ int bracketCount = 0[ CD ]
Line_4 $$ int groupCount = 0-->Line_27 $$ groupCount++[ FD ]
Line_3 $$ int currentOffset = text.length()-->Line_30 $$ currentOffset++[ FD ]
Line_9 $$ char c = text.charAt(currentOffset)-->Line_26 $$ if (c == ')') [ FD ]
Line_9 $$ char c = text.charAt(currentOffset)-->Line_38 $$ if (!isAllowedChar(c)) [ FD ]
Line_5 $$ int bracketCount = 0-->Line_17 $$ bracketCount--[ FD ]
Line_18 $$ if (c == '}') -->Line_19 $$ textCount++[ CD ]
Line_20 $$ if (c == '-->Line_21 $$ if (textCount == 0) [ CD ]
Line_6 $$ int textCount = 0-->Line_21 $$ if (textCount == 0) [ FD ]
Line_29 $$ if (groupCount == 0) -->Line_30 $$ currentOffset++[ CD ]
Line_2 $$ protected String computeKey(@NotNull CharSequence text) -->Line_3 $$ int currentOffset = text.length()[ FD ]
Line_12 $$ if (c == '[') -->Line_13 $$ if (bracketCount == 0) [ CD ]
Line_38 $$ if (!isAllowedChar(c)) -->Line_39 $$ currentOffset++[ CD ]
Line_7 $$ while (currentOffset > 0) -->Line_10 $$ if (c == ']') [ CD ]
Line_28 $$ if (c == '(') -->Line_38 $$ if (!isAllowedChar(c)) [ CD ]
Line_9 $$ char c = text.charAt(currentOffset)-->Line_28 $$ if (c == '(') [ FD ]
Line_4 $$ int groupCount = 0-->Line_33 $$ groupCount--[ FD ]
Line_3 $$ int currentOffset = text.length()-->Line_14 $$ currentOffset++[ FD ]
Line_26 $$ if (c == ')') -->Line_27 $$ groupCount++[ CD ]
Line_2 $$ protected String computeKey(@NotNull CharSequence text) -->Line_4 $$ int groupCount = 0[ CD ]
Line_2 $$ protected String computeKey(@NotNull CharSequence text) -->Line_44 $$ return groupCount == 0 && textCount == 0 && bracketCount == 0 && currentOffset >= 0 && currentOffset < text.length() ? text.subSequence(currentOffset, text.length()).toString().replaceFirst("^[*+>^]+", "") : null[ CD ]
Line_9 $$ char c = text.charAt(currentOffset)-->Line_10 $$ if (c == ']') [ FD ]
Line_28 $$ if (c == '(') -->Line_33 $$ groupCount--[ CD ]
Line_3 $$ int currentOffset = text.length()-->Line_9 $$ char c = text.charAt(currentOffset)[ FD ]
Line_9 $$ char c = text.charAt(currentOffset)-->Line_20 $$ if (c == '[ FD ]
Line_18 $$ if (c == '}') -->Line_20 $$ if (c == '[ CD ]
Line_3 $$ int currentOffset = text.length()-->Line_8 $$ currentOffset--[ FD ]
Line_12 $$ if (c == '[') -->Line_18 $$ if (c == '}') [ CD ]
Line_2 $$ protected String computeKey(@NotNull CharSequence text) -->Line_7 $$ while (currentOffset > 0) [ CD ]
Line_28 $$ if (c == '(') -->Line_29 $$ if (groupCount == 0) [ CD ]
Line_26 $$ if (c == ')') -->Line_28 $$ if (c == '(') [ CD ]
Line_6 $$ int textCount = 0-->Line_25 $$ textCount--[ FD ]
Line_2 $$ protected String computeKey(@NotNull CharSequence text) -->Line_3 $$ int currentOffset = text.length()[ CD ]
Line_3 $$ int currentOffset = text.length()-->Line_22 $$ currentOffset++[ FD ]
Line_2 $$ protected String computeKey(@NotNull CharSequence text) -->Line_9 $$ char c = text.charAt(currentOffset)[ FD ]
Line_13 $$ if (bracketCount == 0) -->Line_14 $$ currentOffset++[ CD ]
Line_10 $$ if (c == ']') -->Line_11 $$ bracketCount++[ CD ]
Line_7 $$ while (currentOffset > 0) -->Line_8 $$ currentOffset--[ CD ]
Line_20 $$ if (c == '-->Line_26 $$ if (c == ')') [ CD ]
Line_4 $$ int groupCount = 0-->Line_29 $$ if (groupCount == 0) [ FD ]
Line_3 $$ int currentOffset = text.length()-->Line_44 $$ return groupCount == 0 && textCount == 0 && bracketCount == 0 && currentOffset >= 0 && currentOffset < text.length() ? text.subSequence(currentOffset, text.length()).toString().replaceFirst("^[*+>^]+", "") : null[ FD ]
Line_3 $$ int currentOffset = text.length()-->Line_7 $$ while (currentOffset > 0) [ FD ]
Line_2 $$ protected String computeKey(@NotNull CharSequence text) -->Line_44 $$ return groupCount == 0 && textCount == 0 && bracketCount == 0 && currentOffset >= 0 && currentOffset < text.length() ? text.subSequence(currentOffset, text.length()).toString().replaceFirst("^[*+>^]+", "") : null[ FD ]
Line_2 $$ protected String computeKey(@NotNull CharSequence text) -->Line_6 $$ int textCount = 0[ CD ]
Line_5 $$ int bracketCount = 0-->Line_13 $$ if (bracketCount == 0) [ FD ]
Line_3 $$ int currentOffset = text.length()-->Line_39 $$ currentOffset++[ FD ]
Line_9 $$ char c = text.charAt(currentOffset)-->Line_18 $$ if (c == '}') [ FD ]
Line_6 $$ int textCount = 0-->Line_19 $$ textCount++[ FD ]
Line_20 $$ if (c == '-->Line_25 $$ textCount--[ CD ]
Line_12 $$ if (c == '[') -->Line_17 $$ bracketCount--[ CD ]
Line_7 $$ while (currentOffset > 0) -->Line_9 $$ char c = text.charAt(currentOffset)[ CD ]
Line_9 $$ char c = text.charAt(currentOffset)-->Line_12 $$ if (c == '[') [ FD ]
Line_10 $$ if (c == ']') -->Line_12 $$ if (c == '[') [ CD ]
