Line_2 $$ public static String evaluateVariable(String value, Map<String, String> context) -->Line_58 $$ varValue = varValue.replace("\\[ CD ]
Line_38 $$ varValue = varValue.replaceFirst(replaceRegex, result)-->Line_54 $$ varValue = varValue.replaceFirst(replaceRegex, result)[ FD ]
Line_29 $$ if (method.startsWith("length")) -->Line_30 $$ result = String.valueOf(operandValue.length())[ CD ]
Line_33 $$ if (method.startsWith("replace")) -->Line_35 $$ if (method.startsWith("uppercase")) [ CD ]
Line_8 $$ if (statementMatcher.find()) -->Line_15 $$ for (int i = 1; i < arguments.length; i++) [ CD ]
Line_7 $$ Matcher statementMatcher = _variableStatementPattern.matcher(statement)-->Line_9 $$ String operand = statementMatcher.group(1)[ FD ]
Line_38 $$ varValue = varValue.replaceFirst(replaceRegex, result)-->Line_59 $$ varValue = varValue.replace("\\}", "}")[ FD ]
Line_26 $$ if (method.startsWith("increment")) -->Line_28 $$ result = String.valueOf(i)[ CD ]
Line_57 $$ varValue = varValue.replace("\\$", "$")-->Line_59 $$ varValue = varValue.replace("\\}", "}")[ FD ]
Line_8 $$ if (statementMatcher.find()) -->Line_21 $$ String operandValue = context.get(operand)[ CD ]
Line_8 $$ if (statementMatcher.find()) -->Line_39 $$ if (statement.equals("getIPAddress()")) [ CD ]
Line_3 $$ String varValue = value-->Line_38 $$ varValue = varValue.replaceFirst(replaceRegex, result)[ FD ]
Line_54 $$ varValue = varValue.replaceFirst(replaceRegex, result)-->Line_59 $$ varValue = varValue.replace("\\}", "}")[ FD ]
Line_38 $$ varValue = varValue.replaceFirst(replaceRegex, result)-->Line_43 $$ varValue = varValue.replaceFirst("\\$\\[ FD ]
Line_39 $$ if (statement.equals("getIPAddress()")) -->Line_54 $$ varValue = varValue.replaceFirst(replaceRegex, result)[ CD ]
Line_24 $$ if (method.startsWith("getFirstNumber")) -->Line_25 $$ result = operandValue.replaceFirst("\\D*(\\d*).*", "$1")[ CD ]
Line_3 $$ String varValue = value-->Line_43 $$ varValue = varValue.replaceFirst("\\$\\[ FD ]
Line_5 $$ while (matcher.find()) -->Line_6 $$ String statement = matcher.group(1)[ CD ]
Line_26 $$ if (method.startsWith("increment")) -->Line_29 $$ if (method.startsWith("length")) [ CD ]
Line_54 $$ varValue = varValue.replaceFirst(replaceRegex, result)-->Line_57 $$ varValue = varValue.replace("\\$", "$")[ FD ]
Line_5 $$ while (matcher.find()) -->Line_7 $$ Matcher statementMatcher = _variableStatementPattern.matcher(statement)[ CD ]
Line_16 $$ if ((i % 2) == 1) -->Line_17 $$ argumentsList.add(arguments[i])[ CD ]
Line_8 $$ if (statementMatcher.find()) -->Line_20 $$ String method = statementMatcher.group(2)[ CD ]
Line_54 $$ varValue = varValue.replaceFirst(replaceRegex, result)-->Line_58 $$ varValue = varValue.replace("\\[ FD ]
Line_57 $$ varValue = varValue.replace("\\$", "$")-->Line_58 $$ varValue = varValue.replace("\\[ FD ]
Line_31 $$ if (method.startsWith("lowercase")) -->Line_33 $$ if (method.startsWith("replace")) [ CD ]
Line_54 $$ varValue = varValue.replaceFirst(replaceRegex, result)-->Line_38 $$ varValue = varValue.replaceFirst(replaceRegex, result)[ FD ]
Line_2 $$ public static String evaluateVariable(String value, Map<String, String> context) -->Line_4 $$ Matcher matcher = _variablePattern.matcher(varValue)[ CD ]
Line_43 $$ varValue = varValue.replaceFirst("\\$\\-->Line_58 $$ varValue = varValue.replace("\\[ FD ]
Line_14 $$ List<String> argumentsList = new ArrayList()-->Line_34 $$ result = operandValue.replace(argumentsList.get(0), argumentsList.get(1))[ FD ]
Line_39 $$ if (statement.equals("getIPAddress()")) -->Line_53 $$ result = Matcher.quoteReplacement(result)[ CD ]
Line_58 $$ varValue = varValue.replace("\\-->Line_59 $$ varValue = varValue.replace("\\}", "}")[ FD ]
Line_2 $$ public static String evaluateVariable(String value, Map<String, String> context) -->Line_60 $$ return varValue[ CD ]
Line_2 $$ public static String evaluateVariable(String value, Map<String, String> context) -->Line_3 $$ String varValue = value[ CD ]
Line_4 $$ Matcher matcher = _variablePattern.matcher(varValue)-->Line_5 $$ while (matcher.find()) [ FD ]
Line_33 $$ if (method.startsWith("replace")) -->Line_34 $$ result = operandValue.replace(argumentsList.get(0), argumentsList.get(1))[ CD ]
Line_43 $$ varValue = varValue.replaceFirst("\\$\\-->Line_54 $$ varValue = varValue.replaceFirst(replaceRegex, result)[ FD ]
Line_7 $$ Matcher statementMatcher = _variableStatementPattern.matcher(statement)-->Line_8 $$ if (statementMatcher.find()) [ FD ]
Line_38 $$ varValue = varValue.replaceFirst(replaceRegex, result)-->Line_58 $$ varValue = varValue.replace("\\[ FD ]
Line_4 $$ Matcher matcher = _variablePattern.matcher(varValue)-->Line_6 $$ String statement = matcher.group(1)[ FD ]
Line_38 $$ varValue = varValue.replaceFirst(replaceRegex, result)-->Line_57 $$ varValue = varValue.replace("\\$", "$")[ FD ]
Line_43 $$ varValue = varValue.replaceFirst("\\$\\-->Line_57 $$ varValue = varValue.replace("\\$", "$")[ FD ]
Line_2 $$ public static String evaluateVariable(String value, Map<String, String> context) -->Line_5 $$ while (matcher.find()) [ CD ]
Line_31 $$ if (method.startsWith("lowercase")) -->Line_32 $$ result = StringUtil.toLowerCase(operandValue)[ CD ]
Line_29 $$ if (method.startsWith("length")) -->Line_31 $$ if (method.startsWith("lowercase")) [ CD ]
Line_7 $$ Matcher statementMatcher = _variableStatementPattern.matcher(statement)-->Line_20 $$ String method = statementMatcher.group(2)[ FD ]
Line_2 $$ public static String evaluateVariable(String value, Map<String, String> context) -->Line_48 $$ if (!context.containsKey(varName)) [ FD ]
Line_8 $$ if (statementMatcher.find()) -->Line_24 $$ if (method.startsWith("getFirstNumber")) [ CD ]
Line_9 $$ String operand = statementMatcher.group(1)-->Line_21 $$ String operandValue = context.get(operand)[ FD ]
Line_3 $$ String varValue = value-->Line_58 $$ varValue = varValue.replace("\\[ FD ]
Line_8 $$ if (statementMatcher.find()) -->Line_10 $$ if (!context.containsKey(operand)) [ CD ]
Line_8 $$ if (statementMatcher.find()) -->Line_38 $$ varValue = varValue.replaceFirst(replaceRegex, result)[ CD ]
Line_2 $$ public static String evaluateVariable(String value, Map<String, String> context) -->Line_21 $$ String operandValue = context.get(operand)[ FD ]
Line_14 $$ List<String> argumentsList = new ArrayList()-->Line_17 $$ argumentsList.add(arguments[i])[ FD ]
Line_2 $$ public static String evaluateVariable(String value, Map<String, String> context) -->Line_57 $$ varValue = varValue.replace("\\$", "$")[ CD ]
Line_7 $$ Matcher statementMatcher = _variableStatementPattern.matcher(statement)-->Line_13 $$ String[] arguments = StringUtil.split(statementMatcher.group(3), "'")[ FD ]
Line_54 $$ varValue = varValue.replaceFirst(replaceRegex, result)-->Line_43 $$ varValue = varValue.replaceFirst("\\$\\[ FD ]
Line_8 $$ if (statementMatcher.find()) -->Line_14 $$ List<String> argumentsList = new ArrayList()[ CD ]
Line_9 $$ String operand = statementMatcher.group(1)-->Line_10 $$ if (!context.containsKey(operand)) [ FD ]
Line_3 $$ String varValue = value-->Line_4 $$ Matcher matcher = _variablePattern.matcher(varValue)[ FD ]
Line_35 $$ if (method.startsWith("uppercase")) -->Line_36 $$ result = StringUtil.toUpperCase(operandValue)[ CD ]
Line_3 $$ String varValue = value-->Line_59 $$ varValue = varValue.replace("\\}", "}")[ FD ]
Line_39 $$ if (statement.equals("getIPAddress()")) -->Line_48 $$ if (!context.containsKey(varName)) [ CD ]
Line_5 $$ while (matcher.find()) -->Line_8 $$ if (statementMatcher.find()) [ CD ]
Line_15 $$ for (int i = 1; i < arguments.length; i++) -->Line_16 $$ if ((i % 2) == 1) [ CD ]
Line_8 $$ if (statementMatcher.find()) -->Line_13 $$ String[] arguments = StringUtil.split(statementMatcher.group(3), "'")[ CD ]
Line_43 $$ varValue = varValue.replaceFirst("\\$\\-->Line_38 $$ varValue = varValue.replaceFirst(replaceRegex, result)[ FD ]
Line_24 $$ if (method.startsWith("getFirstNumber")) -->Line_26 $$ if (method.startsWith("increment")) [ CD ]
Line_15 $$ for (int i = 1; i < arguments.length; i++) -->Line_28 $$ result = String.valueOf(i)[ FD ]
Line_2 $$ public static String evaluateVariable(String value, Map<String, String> context) -->Line_10 $$ if (!context.containsKey(operand)) [ FD ]
Line_3 $$ String varValue = value-->Line_57 $$ varValue = varValue.replace("\\$", "$")[ FD ]
Line_43 $$ varValue = varValue.replaceFirst("\\$\\-->Line_59 $$ varValue = varValue.replace("\\}", "}")[ FD ]
Line_39 $$ if (statement.equals("getIPAddress()")) -->Line_52 $$ String result = context.get(varName)[ CD ]
Line_2 $$ public static String evaluateVariable(String value, Map<String, String> context) -->Line_59 $$ varValue = varValue.replace("\\}", "}")[ CD ]
Line_6 $$ String statement = matcher.group(1)-->Line_39 $$ if (statement.equals("getIPAddress()")) [ FD ]
Line_8 $$ if (statementMatcher.find()) -->Line_9 $$ String operand = statementMatcher.group(1)[ CD ]
Line_2 $$ public static String evaluateVariable(String value, Map<String, String> context) -->Line_52 $$ String result = context.get(varName)[ FD ]
Line_6 $$ String statement = matcher.group(1)-->Line_7 $$ Matcher statementMatcher = _variableStatementPattern.matcher(statement)[ FD ]
Line_3 $$ String varValue = value-->Line_54 $$ varValue = varValue.replaceFirst(replaceRegex, result)[ FD ]
