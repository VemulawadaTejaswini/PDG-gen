Line_9 $$ displayVersion = ExecUtil.readFirstLine(commandLine.createProcess().getErrorStream(), null)-->Line_23 $$ displayVersion = displayVersion.replaceFirst("\".*\"", "")[ FD ]
Line_21 $$ if (displayVersion != null) -->Line_25 $$ displayVersion = jvm.getName()[ CD ]
Line_2 $$ private static Pair<String, Pair<Version, Integer>> getJDKNameVersionAndUpdate(File jvm, String homeSubPath) -->Line_5 $$ commandLine.addParameter("-version")[ CD ]
Line_9 $$ displayVersion = ExecUtil.readFirstLine(commandLine.createProcess().getErrorStream(), null)-->Line_25 $$ displayVersion = jvm.getName()[ FD ]
Line_14 $$ displayVersion = ExecUtil.readFirstLine(commandLine.createProcess().getErrorStream(), null)-->Line_27 $$ return Pair.create(displayVersion, versionAndUpdate)[ FD ]
Line_2 $$ private static Pair<String, Pair<Version, Integer>> getJDKNameVersionAndUpdate(File jvm, String homeSubPath) -->Line_7 $$ Pair<Version, Integer> versionAndUpdate = null[ CD ]
Line_25 $$ displayVersion = jvm.getName()-->Line_27 $$ return Pair.create(displayVersion, versionAndUpdate)[ FD ]
Line_9 $$ displayVersion = ExecUtil.readFirstLine(commandLine.createProcess().getErrorStream(), null)-->Line_27 $$ return Pair.create(displayVersion, versionAndUpdate)[ FD ]
Line_3 $$ GeneralCommandLine commandLine = new GeneralCommandLine()-->Line_4 $$ commandLine.setExePath(new File(jvm, homeSubPath + File.separator + "jre" + File.separator + "bin" + File.separator + "java").getAbsolutePath())[ FD ]
Line_3 $$ GeneralCommandLine commandLine = new GeneralCommandLine()-->Line_5 $$ commandLine.addParameter("-version")[ FD ]
Line_9 $$ displayVersion = ExecUtil.readFirstLine(commandLine.createProcess().getErrorStream(), null)-->Line_22 $$ versionAndUpdate = VersionUtil.parseVersionAndUpdate(displayVersion, VERSION_UPDATE_PATTERNS)[ FD ]
Line_3 $$ GeneralCommandLine commandLine = new GeneralCommandLine()-->Line_9 $$ displayVersion = ExecUtil.readFirstLine(commandLine.createProcess().getErrorStream(), null)[ FD ]
Line_6 $$ String displayVersion = null-->Line_9 $$ displayVersion = ExecUtil.readFirstLine(commandLine.createProcess().getErrorStream(), null)[ FD ]
Line_2 $$ private static Pair<String, Pair<Version, Integer>> getJDKNameVersionAndUpdate(File jvm, String homeSubPath) -->Line_6 $$ String displayVersion = null[ CD ]
Line_2 $$ private static Pair<String, Pair<Version, Integer>> getJDKNameVersionAndUpdate(File jvm, String homeSubPath) -->Line_21 $$ if (displayVersion != null) [ CD ]
Line_14 $$ displayVersion = ExecUtil.readFirstLine(commandLine.createProcess().getErrorStream(), null)-->Line_25 $$ displayVersion = jvm.getName()[ FD ]
Line_2 $$ private static Pair<String, Pair<Version, Integer>> getJDKNameVersionAndUpdate(File jvm, String homeSubPath) -->Line_27 $$ return Pair.create(displayVersion, versionAndUpdate)[ CD ]
Line_6 $$ String displayVersion = null-->Line_21 $$ if (displayVersion != null) [ FD ]
Line_14 $$ displayVersion = ExecUtil.readFirstLine(commandLine.createProcess().getErrorStream(), null)-->Line_21 $$ if (displayVersion != null) [ FD ]
Line_22 $$ versionAndUpdate = VersionUtil.parseVersionAndUpdate(displayVersion, VERSION_UPDATE_PATTERNS)-->Line_27 $$ return Pair.create(displayVersion, versionAndUpdate)[ FD ]
Line_6 $$ String displayVersion = null-->Line_14 $$ displayVersion = ExecUtil.readFirstLine(commandLine.createProcess().getErrorStream(), null)[ FD ]
Line_6 $$ String displayVersion = null-->Line_23 $$ displayVersion = displayVersion.replaceFirst("\".*\"", "")[ FD ]
Line_21 $$ if (displayVersion != null) -->Line_22 $$ versionAndUpdate = VersionUtil.parseVersionAndUpdate(displayVersion, VERSION_UPDATE_PATTERNS)[ CD ]
Line_11 $$ if (SystemInfo.isMac) -->Line_12 $$ commandLine.setExePath(new File(jvm, homeSubPath + File.separator + "bin" + File.separator + "java").getAbsolutePath())[ CD ]
Line_7 $$ Pair<Version, Integer> versionAndUpdate = null-->Line_22 $$ versionAndUpdate = VersionUtil.parseVersionAndUpdate(displayVersion, VERSION_UPDATE_PATTERNS)[ FD ]
Line_2 $$ private static Pair<String, Pair<Version, Integer>> getJDKNameVersionAndUpdate(File jvm, String homeSubPath) -->Line_3 $$ GeneralCommandLine commandLine = new GeneralCommandLine()[ CD ]
Line_14 $$ displayVersion = ExecUtil.readFirstLine(commandLine.createProcess().getErrorStream(), null)-->Line_22 $$ versionAndUpdate = VersionUtil.parseVersionAndUpdate(displayVersion, VERSION_UPDATE_PATTERNS)[ FD ]
Line_3 $$ GeneralCommandLine commandLine = new GeneralCommandLine()-->Line_12 $$ commandLine.setExePath(new File(jvm, homeSubPath + File.separator + "bin" + File.separator + "java").getAbsolutePath())[ FD ]
Line_6 $$ String displayVersion = null-->Line_27 $$ return Pair.create(displayVersion, versionAndUpdate)[ FD ]
Line_7 $$ Pair<Version, Integer> versionAndUpdate = null-->Line_27 $$ return Pair.create(displayVersion, versionAndUpdate)[ FD ]
Line_6 $$ String displayVersion = null-->Line_22 $$ versionAndUpdate = VersionUtil.parseVersionAndUpdate(displayVersion, VERSION_UPDATE_PATTERNS)[ FD ]
Line_14 $$ displayVersion = ExecUtil.readFirstLine(commandLine.createProcess().getErrorStream(), null)-->Line_23 $$ displayVersion = displayVersion.replaceFirst("\".*\"", "")[ FD ]
Line_6 $$ String displayVersion = null-->Line_25 $$ displayVersion = jvm.getName()[ FD ]
Line_9 $$ displayVersion = ExecUtil.readFirstLine(commandLine.createProcess().getErrorStream(), null)-->Line_21 $$ if (displayVersion != null) [ FD ]
Line_23 $$ displayVersion = displayVersion.replaceFirst("\".*\"", "")-->Line_25 $$ displayVersion = jvm.getName()[ FD ]
Line_2 $$ private static Pair<String, Pair<Version, Integer>> getJDKNameVersionAndUpdate(File jvm, String homeSubPath) -->Line_4 $$ commandLine.setExePath(new File(jvm, homeSubPath + File.separator + "jre" + File.separator + "bin" + File.separator + "java").getAbsolutePath())[ CD ]
Line_21 $$ if (displayVersion != null) -->Line_23 $$ displayVersion = displayVersion.replaceFirst("\".*\"", "")[ CD ]
Line_2 $$ private static Pair<String, Pair<Version, Integer>> getJDKNameVersionAndUpdate(File jvm, String homeSubPath) -->Line_25 $$ displayVersion = jvm.getName()[ FD ]
Line_9 $$ displayVersion = ExecUtil.readFirstLine(commandLine.createProcess().getErrorStream(), null)-->Line_14 $$ displayVersion = ExecUtil.readFirstLine(commandLine.createProcess().getErrorStream(), null)[ FD ]
Line_3 $$ GeneralCommandLine commandLine = new GeneralCommandLine()-->Line_14 $$ displayVersion = ExecUtil.readFirstLine(commandLine.createProcess().getErrorStream(), null)[ FD ]
Line_23 $$ displayVersion = displayVersion.replaceFirst("\".*\"", "")-->Line_27 $$ return Pair.create(displayVersion, versionAndUpdate)[ FD ]
