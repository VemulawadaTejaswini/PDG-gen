Line_3 $$ int count = Math.abs(context.getShort(context.position()))-->Line_7 $$ for (int i = 0; i < count; i++) [ FD ]
Line_6 $$ List<Short> globalShardIndexes = new ArrayList(count)-->Line_10 $$ globalShardIndexes.add(elt)[ FD ]
Line_3 $$ int count = Math.abs(context.getShort(context.position()))-->Line_12 $$ if (count == globalShardIndexes.size())[ FD ]
Line_2 $$ public ByteBuffer clearAllLocal(ByteBuffer context) -->Line_18 $$ ByteBufferUtil.arrayCopy(context, context.position() + origHeaderLength, cleared, cleared.position() + headerLength(cleared), context.remaining() - origHeaderLength)[ FD ]
Line_4 $$ if (count == 0)-->Line_5 $$ return context[ CD ]
Line_6 $$ List<Short> globalShardIndexes = new ArrayList(count)-->Line_16 $$ cleared.putShort(cleared.position() + HEADER_SIZE_LENGTH + i * HEADER_ELT_LENGTH, globalShardIndexes.get(i))[ FD ]
Line_2 $$ public ByteBuffer clearAllLocal(ByteBuffer context) -->Line_17 $$ int origHeaderLength = headerLength(context)[ CD ]
Line_14 $$ ByteBuffer cleared = ByteBuffer.allocate(context.remaining() - (count - globalShardIndexes.size()) * HEADER_ELT_LENGTH)-->Line_15 $$ cleared.putShort(cleared.position(), (short) globalShardIndexes.size())[ FD ]
Line_2 $$ public ByteBuffer clearAllLocal(ByteBuffer context) -->Line_6 $$ List<Short> globalShardIndexes = new ArrayList(count)[ CD ]
Line_2 $$ public ByteBuffer clearAllLocal(ByteBuffer context) -->Line_3 $$ int count = Math.abs(context.getShort(context.position()))[ FD ]
Line_2 $$ public ByteBuffer clearAllLocal(ByteBuffer context) -->Line_16 $$ for (int i = 0; i < globalShardIndexes.size(); i++) cleared.putShort(cleared.position() + HEADER_SIZE_LENGTH + i * HEADER_ELT_LENGTH, globalShardIndexes.get(i))[ CD ]
Line_2 $$ public ByteBuffer clearAllLocal(ByteBuffer context) -->Line_3 $$ int count = Math.abs(context.getShort(context.position()))[ CD ]
Line_2 $$ public ByteBuffer clearAllLocal(ByteBuffer context) -->Line_19 $$ return cleared[ CD ]
Line_6 $$ List<Short> globalShardIndexes = new ArrayList(count)-->Line_12 $$ if (count == globalShardIndexes.size())[ FD ]
Line_6 $$ List<Short> globalShardIndexes = new ArrayList(count)-->Line_14 $$ ByteBuffer cleared = ByteBuffer.allocate(context.remaining() - (count - globalShardIndexes.size()) * HEADER_ELT_LENGTH)[ FD ]
Line_7 $$ for (int i = 0; i < count; i++) -->Line_9 $$ if (elt < 0)[ CD ]
Line_3 $$ int count = Math.abs(context.getShort(context.position()))-->Line_4 $$ if (count == 0)[ FD ]
Line_2 $$ public ByteBuffer clearAllLocal(ByteBuffer context) -->Line_8 $$ short elt = context.getShort(context.position() + HEADER_SIZE_LENGTH + i * HEADER_ELT_LENGTH)[ FD ]
Line_12 $$ if (count == globalShardIndexes.size())-->Line_13 $$ return context[ CD ]
Line_7 $$ for (int i = 0; i < count; i++) -->Line_16 $$ for (int i = 0; i < globalShardIndexes.size(); i++) cleared.putShort(cleared.position() + HEADER_SIZE_LENGTH + i * HEADER_ELT_LENGTH, globalShardIndexes.get(i))[ FD ]
Line_8 $$ short elt = context.getShort(context.position() + HEADER_SIZE_LENGTH + i * HEADER_ELT_LENGTH)-->Line_9 $$ if (elt < 0)[ FD ]
Line_2 $$ public ByteBuffer clearAllLocal(ByteBuffer context) -->Line_14 $$ ByteBuffer cleared = ByteBuffer.allocate(context.remaining() - (count - globalShardIndexes.size()) * HEADER_ELT_LENGTH)[ FD ]
Line_14 $$ ByteBuffer cleared = ByteBuffer.allocate(context.remaining() - (count - globalShardIndexes.size()) * HEADER_ELT_LENGTH)-->Line_16 $$ cleared.putShort(cleared.position() + HEADER_SIZE_LENGTH + i * HEADER_ELT_LENGTH, globalShardIndexes.get(i))[ FD ]
Line_2 $$ public ByteBuffer clearAllLocal(ByteBuffer context) -->Line_12 $$ if (count == globalShardIndexes.size())[ FD ]
Line_7 $$ for (int i = 0; i < count; i++) -->Line_16 $$ cleared.putShort(cleared.position() + HEADER_SIZE_LENGTH + i * HEADER_ELT_LENGTH, globalShardIndexes.get(i))[ FD ]
Line_2 $$ public ByteBuffer clearAllLocal(ByteBuffer context) -->Line_14 $$ ByteBuffer cleared = ByteBuffer.allocate(context.remaining() - (count - globalShardIndexes.size()) * HEADER_ELT_LENGTH)[ CD ]
Line_2 $$ public ByteBuffer clearAllLocal(ByteBuffer context) -->Line_4 $$ if (count == 0)[ CD ]
Line_2 $$ public ByteBuffer clearAllLocal(ByteBuffer context) -->Line_17 $$ int origHeaderLength = headerLength(context)[ FD ]
Line_7 $$ for (int i = 0; i < count; i++) -->Line_8 $$ short elt = context.getShort(context.position() + HEADER_SIZE_LENGTH + i * HEADER_ELT_LENGTH)[ CD ]
Line_6 $$ List<Short> globalShardIndexes = new ArrayList(count)-->Line_15 $$ cleared.putShort(cleared.position(), (short) globalShardIndexes.size())[ FD ]
Line_2 $$ public ByteBuffer clearAllLocal(ByteBuffer context) -->Line_12 $$ if (count == globalShardIndexes.size())[ CD ]
Line_6 $$ List<Short> globalShardIndexes = new ArrayList(count)-->Line_16 $$ for (int i = 0; i < globalShardIndexes.size(); i++) cleared.putShort(cleared.position() + HEADER_SIZE_LENGTH + i * HEADER_ELT_LENGTH, globalShardIndexes.get(i))[ FD ]
Line_2 $$ public ByteBuffer clearAllLocal(ByteBuffer context) -->Line_15 $$ cleared.putShort(cleared.position(), (short) globalShardIndexes.size())[ CD ]
Line_2 $$ public ByteBuffer clearAllLocal(ByteBuffer context) -->Line_7 $$ for (int i = 0; i < count; i++) [ CD ]
Line_2 $$ public ByteBuffer clearAllLocal(ByteBuffer context) -->Line_18 $$ ByteBufferUtil.arrayCopy(context, context.position() + origHeaderLength, cleared, cleared.position() + headerLength(cleared), context.remaining() - origHeaderLength)[ CD ]
Line_14 $$ ByteBuffer cleared = ByteBuffer.allocate(context.remaining() - (count - globalShardIndexes.size()) * HEADER_ELT_LENGTH)-->Line_18 $$ ByteBufferUtil.arrayCopy(context, context.position() + origHeaderLength, cleared, cleared.position() + headerLength(cleared), context.remaining() - origHeaderLength)[ FD ]
Line_2 $$ public ByteBuffer clearAllLocal(ByteBuffer context) -->Line_4 $$ if (count == 0)[ FD ]
Line_8 $$ short elt = context.getShort(context.position() + HEADER_SIZE_LENGTH + i * HEADER_ELT_LENGTH)-->Line_10 $$ globalShardIndexes.add(elt)[ FD ]
Line_9 $$ if (elt < 0)-->Line_10 $$ globalShardIndexes.add(elt)[ CD ]
