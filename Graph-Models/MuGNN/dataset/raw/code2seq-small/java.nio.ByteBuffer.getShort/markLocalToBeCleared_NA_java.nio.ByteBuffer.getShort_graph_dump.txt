Line_2 $$ public ByteBuffer markLocalToBeCleared(ByteBuffer context) -->Line_3 $$ short count = context.getShort(context.position())[ CD ]
Line_7 $$ for (int i = 0; i < count; i++) -->Line_8 $$ if (context.getShort(context.position() + HEADER_SIZE_LENGTH + i * HEADER_ELT_LENGTH) >= 0) [ CD ]
Line_2 $$ public ByteBuffer markLocalToBeCleared(ByteBuffer context) -->Line_16 $$ marked.putShort(marked.position(), (short) (count * -1))[ CD ]
Line_2 $$ public ByteBuffer markLocalToBeCleared(ByteBuffer context) -->Line_7 $$ for (int i = 0; i < count; i++) [ CD ]
Line_2 $$ public ByteBuffer markLocalToBeCleared(ByteBuffer context) -->Line_13 $$ if (!hasLocalShards)[ CD ]
Line_6 $$ boolean hasLocalShards = false-->Line_13 $$ if (!hasLocalShards)[ FD ]
Line_13 $$ if (!hasLocalShards)-->Line_14 $$ return context[ CD ]
Line_3 $$ short count = context.getShort(context.position())-->Line_7 $$ for (int i = 0; i < count; i++) [ FD ]
Line_2 $$ public ByteBuffer markLocalToBeCleared(ByteBuffer context) -->Line_15 $$ ByteBuffer marked = ByteBuffer.allocate(context.remaining())[ FD ]
Line_2 $$ public ByteBuffer markLocalToBeCleared(ByteBuffer context) -->Line_4 $$ if (count <= 0)[ CD ]
Line_2 $$ public ByteBuffer markLocalToBeCleared(ByteBuffer context) -->Line_18 $$ return marked[ CD ]
Line_8 $$ if (context.getShort(context.position() + HEADER_SIZE_LENGTH + i * HEADER_ELT_LENGTH) >= 0) -->Line_9 $$ hasLocalShards = true[ CD ]
Line_2 $$ public ByteBuffer markLocalToBeCleared(ByteBuffer context) -->Line_17 $$ ByteBufferUtil.arrayCopy(context, context.position() + HEADER_SIZE_LENGTH, marked, marked.position() + HEADER_SIZE_LENGTH, context.remaining() - HEADER_SIZE_LENGTH)[ CD ]
Line_6 $$ boolean hasLocalShards = false-->Line_9 $$ hasLocalShards = true[ FD ]
Line_2 $$ public ByteBuffer markLocalToBeCleared(ByteBuffer context) -->Line_13 $$ if (!hasLocalShards)[ FD ]
Line_2 $$ public ByteBuffer markLocalToBeCleared(ByteBuffer context) -->Line_15 $$ ByteBuffer marked = ByteBuffer.allocate(context.remaining())[ CD ]
Line_3 $$ short count = context.getShort(context.position())-->Line_4 $$ if (count <= 0)[ FD ]
Line_15 $$ ByteBuffer marked = ByteBuffer.allocate(context.remaining())-->Line_16 $$ marked.putShort(marked.position(), (short) (count * -1))[ FD ]
Line_2 $$ public ByteBuffer markLocalToBeCleared(ByteBuffer context) -->Line_4 $$ if (count <= 0)[ FD ]
Line_4 $$ if (count <= 0)-->Line_5 $$ return context[ CD ]
Line_2 $$ public ByteBuffer markLocalToBeCleared(ByteBuffer context) -->Line_3 $$ short count = context.getShort(context.position())[ FD ]
Line_2 $$ public ByteBuffer markLocalToBeCleared(ByteBuffer context) -->Line_8 $$ if (context.getShort(context.position() + HEADER_SIZE_LENGTH + i * HEADER_ELT_LENGTH) >= 0) [ FD ]
Line_2 $$ public ByteBuffer markLocalToBeCleared(ByteBuffer context) -->Line_17 $$ ByteBufferUtil.arrayCopy(context, context.position() + HEADER_SIZE_LENGTH, marked, marked.position() + HEADER_SIZE_LENGTH, context.remaining() - HEADER_SIZE_LENGTH)[ FD ]
Line_15 $$ ByteBuffer marked = ByteBuffer.allocate(context.remaining())-->Line_17 $$ ByteBufferUtil.arrayCopy(context, context.position() + HEADER_SIZE_LENGTH, marked, marked.position() + HEADER_SIZE_LENGTH, context.remaining() - HEADER_SIZE_LENGTH)[ FD ]
Line_2 $$ public ByteBuffer markLocalToBeCleared(ByteBuffer context) -->Line_6 $$ boolean hasLocalShards = false[ CD ]
Line_9 $$ hasLocalShards = true-->Line_13 $$ if (!hasLocalShards)[ FD ]
