Line_132 $$ totalRead = corpus.capacity()-->Line_96 $$ totalRead++[ FD ]
Line_128 $$ threw = true-->Line_261 $$ assertTrue(threw)[ FD ]
Line_263 $$ totalRead = corpus.capacity()-->Line_87 $$ totalRead++[ FD ]
Line_120 $$ boolean threw = false-->Line_182 $$ assertTrue(threw)[ FD ]
Line_209 $$ totalRead = corpus.capacity()-->Line_11 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_184 $$ totalRead = corpus.capacity()-->Line_96 $$ totalRead++[ FD ]
Line_2 $$ void fuzzOnce() throws Exception -->Line_10 $$ while (totalRead < corpus.capacity()) [ CD ]
Line_73 $$ read = is.read(bytes)-->Line_65 $$ totalRead += read[ FD ]
Line_294 $$ totalRead += 8-->Line_77 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_209 $$ totalRead = corpus.capacity()-->Line_306 $$ totalRead += actuallySkipped[ FD ]
Line_30 $$ totalRead += 111-->Line_263 $$ totalRead = corpus.capacity()[ FD ]
Line_234 $$ totalRead = corpus.capacity()-->Line_294 $$ totalRead += 8[ FD ]
Line_78 $$ totalRead += read-->Line_263 $$ totalRead = corpus.capacity()[ FD ]
Line_240 $$ totalRead += 4-->Line_270 $$ totalRead += 8[ FD ]
Line_306 $$ totalRead += actuallySkipped-->Line_87 $$ totalRead++[ FD ]
Line_50 $$ totalRead += length-->Line_10 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_60 $$ read = is.read(bytes, offset, length)-->Line_64 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_166 $$ totalRead += 2-->Line_105 $$ totalRead++[ FD ]
Line_50 $$ totalRead += length-->Line_191 $$ totalRead += 2[ FD ]
Line_294 $$ totalRead += 8-->Line_29 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_5 $$ int totalRead = 0-->Line_65 $$ totalRead += read[ FD ]
Line_209 $$ totalRead = corpus.capacity()-->Line_49 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_60 $$ read = is.read(bytes, offset, length)-->Line_78 $$ totalRead += read[ FD ]
Line_306 $$ totalRead += actuallySkipped-->Line_114 $$ totalRead++[ FD ]
Line_5 $$ int totalRead = 0-->Line_50 $$ totalRead += length[ FD ]
Line_5 $$ int totalRead = 0-->Line_30 $$ totalRead += 111[ FD ]
Line_139 $$ totalRead += 2-->Line_318 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_157 $$ totalRead = corpus.capacity()-->Line_263 $$ totalRead = corpus.capacity()[ FD ]
Line_78 $$ totalRead += read-->Line_294 $$ totalRead += 8[ FD ]
Line_78 $$ totalRead += read-->Line_87 $$ totalRead++[ FD ]
Line_84 $$ boolean canonical = dis.readBoolean()-->Line_310 $$ assertEquals(actuallySkipped, canonical)[ FD ]
Line_153 $$ threw = true-->Line_232 $$ assertTrue(threw)[ FD ]
Line_184 $$ totalRead = corpus.capacity()-->Line_216 $$ totalRead += 4[ FD ]
Line_30 $$ totalRead += 111-->Line_87 $$ totalRead++[ FD ]
Line_180 $$ threw = true-->Line_155 $$ assertTrue(threw)[ FD ]
Line_157 $$ totalRead = corpus.capacity()-->Line_87 $$ totalRead++[ FD ]
Line_234 $$ totalRead = corpus.capacity()-->Line_318 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_216 $$ totalRead += 4-->Line_29 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_19 $$ boolean expectEOF = expectedBytes < 111-->Line_26 $$ assertEquals(expectEOF, threwEOF)[ FD ]
Line_65 $$ totalRead += read-->Line_209 $$ totalRead = corpus.capacity()[ FD ]
Line_288 $$ totalRead = corpus.capacity()-->Line_114 $$ totalRead++[ FD ]
Line_50 $$ totalRead += length-->Line_64 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_62 $$ if (expectEOF)-->Line_63 $$ return[ CD ]
Line_288 $$ totalRead = corpus.capacity()-->Line_10 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_5 $$ int totalRead = 0-->Line_10 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_305 $$ int actuallySkipped = Math.min(skipBytes, corpus.remaining())-->Line_306 $$ totalRead += actuallySkipped[ FD ]
Line_270 $$ totalRead += 8-->Line_77 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_139 $$ totalRead += 2-->Line_105 $$ totalRead++[ FD ]
Line_209 $$ totalRead = corpus.capacity()-->Line_288 $$ totalRead = corpus.capacity()[ FD ]
Line_128 $$ threw = true-->Line_259 $$ threw = true[ FD ]
Line_2 $$ void fuzzOnce() throws Exception -->Line_9 $$ int iteration = 0[ CD ]
Line_75 $$ if (expectEOF)-->Line_76 $$ return[ CD ]
Line_184 $$ totalRead = corpus.capacity()-->Line_191 $$ totalRead += 2[ FD ]
Line_128 $$ threw = true-->Line_182 $$ assertTrue(threw)[ FD ]
Line_78 $$ totalRead += read-->Line_234 $$ totalRead = corpus.capacity()[ FD ]
Line_128 $$ threw = true-->Line_153 $$ threw = true[ FD ]
Line_294 $$ totalRead += 8-->Line_11 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_78 $$ totalRead += read-->Line_105 $$ totalRead++[ FD ]
Line_305 $$ int actuallySkipped = Math.min(skipBytes, corpus.remaining())-->Line_310 $$ assertEquals(actuallySkipped, canonical)[ FD ]
Line_7 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_112 $$ int actual = is.readUnsignedByte()[ FD ]
Line_216 $$ totalRead += 4-->Line_263 $$ totalRead = corpus.capacity()[ FD ]
Line_270 $$ totalRead += 8-->Line_318 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_50 $$ totalRead += length-->Line_114 $$ totalRead++[ FD ]
Line_132 $$ totalRead = corpus.capacity()-->Line_157 $$ totalRead = corpus.capacity()[ FD ]
Line_30 $$ totalRead += 111-->Line_166 $$ totalRead += 2[ FD ]
Line_65 $$ totalRead += read-->Line_29 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_78 $$ totalRead += read-->Line_64 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_7 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_224 $$ is.readFloat()[ FD ]
Line_284 $$ threw = true-->Line_182 $$ assertTrue(threw)[ FD ]
Line_270 $$ totalRead += 8-->Line_288 $$ totalRead = corpus.capacity()[ FD ]
Line_5 $$ int totalRead = 0-->Line_49 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_50 $$ totalRead += length-->Line_11 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_132 $$ totalRead = corpus.capacity()-->Line_29 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_78 $$ totalRead += read-->Line_114 $$ totalRead++[ FD ]
Line_230 $$ threw = true-->Line_261 $$ assertTrue(threw)[ FD ]
Line_157 $$ totalRead = corpus.capacity()-->Line_240 $$ totalRead += 4[ FD ]
Line_144 $$ if (corpus.remaining() < 2) -->Line_157 $$ totalRead = corpus.capacity()[ CD ]
Line_5 $$ int totalRead = 0-->Line_184 $$ totalRead = corpus.capacity()[ FD ]
Line_184 $$ totalRead = corpus.capacity()-->Line_49 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_240 $$ totalRead += 4-->Line_105 $$ totalRead++[ FD ]
Line_4 $$ int read = 0-->Line_73 $$ read = is.read(bytes)[ FD ]
Line_270 $$ totalRead += 8-->Line_10 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_5 $$ int totalRead = 0-->Line_64 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_119 $$ if (corpus.remaining() < 2) -->Line_131 $$ assertTrue(corpus.remaining() - totalRead < 2)[ CD ]
Line_259 $$ threw = true-->Line_207 $$ assertTrue(threw)[ FD ]
Line_17 $$ byte[] bytes = new byte[111]-->Line_60 $$ read = is.read(bytes, offset, length)[ FD ]
Line_139 $$ totalRead += 2-->Line_240 $$ totalRead += 4[ FD ]
Line_216 $$ totalRead += 4-->Line_114 $$ totalRead++[ FD ]
Line_288 $$ totalRead = corpus.capacity()-->Line_77 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_139 $$ totalRead += 2-->Line_10 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_120 $$ boolean threw = false-->Line_232 $$ assertTrue(threw)[ FD ]
Line_5 $$ int totalRead = 0-->Line_288 $$ totalRead = corpus.capacity()[ FD ]
Line_284 $$ threw = true-->Line_232 $$ assertTrue(threw)[ FD ]
Line_78 $$ totalRead += read-->Line_10 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_132 $$ totalRead = corpus.capacity()-->Line_306 $$ totalRead += actuallySkipped[ FD ]
Line_2 $$ void fuzzOnce() throws Exception -->Line_7 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)[ CD ]
Line_78 $$ totalRead += read-->Line_11 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_166 $$ totalRead += 2-->Line_294 $$ totalRead += 8[ FD ]
Line_275 $$ if (corpus.remaining() < 8) -->Line_287 $$ assertTrue(corpus.remaining() - totalRead < 8)[ CD ]
Line_230 $$ threw = true-->Line_155 $$ assertTrue(threw)[ FD ]
Line_10 $$ while (totalRead < corpus.capacity()) -->Line_12 $$ int action = r.nextInt(16)[ CD ]
Line_30 $$ totalRead += 111-->Line_77 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_65 $$ totalRead += read-->Line_157 $$ totalRead = corpus.capacity()[ FD ]
Line_263 $$ totalRead = corpus.capacity()-->Line_114 $$ totalRead++[ FD ]
Line_120 $$ boolean threw = false-->Line_230 $$ threw = true[ FD ]
Line_153 $$ threw = true-->Line_286 $$ assertTrue(threw)[ FD ]
Line_65 $$ totalRead += read-->Line_294 $$ totalRead += 8[ FD ]
Line_259 $$ threw = true-->Line_130 $$ assertTrue(threw)[ FD ]
Line_157 $$ totalRead = corpus.capacity()-->Line_216 $$ totalRead += 4[ FD ]
Line_2 $$ void fuzzOnce() throws Exception -->Line_3 $$ init()[ CD ]
Line_139 $$ totalRead += 2-->Line_216 $$ totalRead += 4[ FD ]
Line_157 $$ totalRead = corpus.capacity()-->Line_270 $$ totalRead += 8[ FD ]
Line_196 $$ if (corpus.remaining() < 4) -->Line_207 $$ assertTrue(threw)[ CD ]
Line_132 $$ totalRead = corpus.capacity()-->Line_209 $$ totalRead = corpus.capacity()[ FD ]
Line_270 $$ totalRead += 8-->Line_294 $$ totalRead += 8[ FD ]
Line_37 $$ int length = bytes.length == 0 ? 0 : r.nextInt(bytes.length - offset)-->Line_42 $$ is.readFully(bytes, offset, length)[ FD ]
Line_139 $$ totalRead += 2-->Line_11 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_250 $$ if (corpus.remaining() < 8) -->Line_261 $$ assertTrue(threw)[ CD ]
Line_230 $$ threw = true-->Line_130 $$ assertTrue(threw)[ FD ]
Line_306 $$ totalRead += actuallySkipped-->Line_96 $$ totalRead++[ FD ]
Line_234 $$ totalRead = corpus.capacity()-->Line_114 $$ totalRead++[ FD ]
Line_50 $$ totalRead += length-->Line_87 $$ totalRead++[ FD ]
Line_166 $$ totalRead += 2-->Line_288 $$ totalRead = corpus.capacity()[ FD ]
Line_240 $$ totalRead += 4-->Line_306 $$ totalRead += actuallySkipped[ FD ]
Line_157 $$ totalRead = corpus.capacity()-->Line_11 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_157 $$ totalRead = corpus.capacity()-->Line_318 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_216 $$ totalRead += 4-->Line_10 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_259 $$ threw = true-->Line_261 $$ assertTrue(threw)[ FD ]
Line_191 $$ totalRead += 2-->Line_11 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_50 $$ totalRead += length-->Line_132 $$ totalRead = corpus.capacity()[ FD ]
Line_5 $$ int totalRead = 0-->Line_191 $$ totalRead += 2[ FD ]
Line_166 $$ totalRead += 2-->Line_87 $$ totalRead++[ FD ]
Line_263 $$ totalRead = corpus.capacity()-->Line_77 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_153 $$ threw = true-->Line_230 $$ threw = true[ FD ]
Line_288 $$ totalRead = corpus.capacity()-->Line_11 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_230 $$ threw = true-->Line_259 $$ threw = true[ FD ]
Line_259 $$ threw = true-->Line_155 $$ assertTrue(threw)[ FD ]
Line_139 $$ totalRead += 2-->Line_77 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_65 $$ totalRead += read-->Line_87 $$ totalRead++[ FD ]
Line_78 $$ totalRead += read-->Line_96 $$ totalRead++[ FD ]
Line_191 $$ totalRead += 2-->Line_10 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_216 $$ totalRead += 4-->Line_11 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_304 $$ int skipBytes = r.nextInt(1024)-->Line_305 $$ int actuallySkipped = Math.min(skipBytes, corpus.remaining())[ FD ]
Line_191 $$ totalRead += 2-->Line_270 $$ totalRead += 8[ FD ]
Line_132 $$ totalRead = corpus.capacity()-->Line_105 $$ totalRead++[ FD ]
Line_50 $$ totalRead += length-->Line_65 $$ totalRead += read[ FD ]
Line_171 $$ if (corpus.remaining() < 2) -->Line_184 $$ totalRead = corpus.capacity()[ CD ]
Line_30 $$ totalRead += 111-->Line_11 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_166 $$ totalRead += 2-->Line_240 $$ totalRead += 4[ FD ]
Line_171 $$ if (corpus.remaining() < 2) -->Line_182 $$ assertTrue(threw)[ CD ]
Line_78 $$ totalRead += read-->Line_49 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_157 $$ totalRead = corpus.capacity()-->Line_77 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_65 $$ totalRead += read-->Line_318 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_139 $$ totalRead += 2-->Line_157 $$ totalRead = corpus.capacity()[ FD ]
Line_191 $$ totalRead += 2-->Line_234 $$ totalRead = corpus.capacity()[ FD ]
Line_209 $$ totalRead = corpus.capacity()-->Line_318 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_191 $$ totalRead += 2-->Line_216 $$ totalRead += 4[ FD ]
Line_78 $$ totalRead += read-->Line_29 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_263 $$ totalRead = corpus.capacity()-->Line_64 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_263 $$ totalRead = corpus.capacity()-->Line_96 $$ totalRead++[ FD ]
Line_184 $$ totalRead = corpus.capacity()-->Line_240 $$ totalRead += 4[ FD ]
Line_5 $$ int totalRead = 0-->Line_29 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_4 $$ int read = 0-->Line_77 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_139 $$ totalRead += 2-->Line_166 $$ totalRead += 2[ FD ]
Line_84 $$ boolean canonical = dis.readBoolean()-->Line_311 $$ assertEquals(canonical, actual)[ FD ]
Line_5 $$ int totalRead = 0-->Line_114 $$ totalRead++[ FD ]
Line_234 $$ totalRead = corpus.capacity()-->Line_64 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_65 $$ totalRead += read-->Line_191 $$ totalRead += 2[ FD ]
Line_139 $$ totalRead += 2-->Line_191 $$ totalRead += 2[ FD ]
Line_184 $$ totalRead = corpus.capacity()-->Line_294 $$ totalRead += 8[ FD ]
Line_157 $$ totalRead = corpus.capacity()-->Line_306 $$ totalRead += actuallySkipped[ FD ]
Line_184 $$ totalRead = corpus.capacity()-->Line_270 $$ totalRead += 8[ FD ]
Line_65 $$ totalRead += read-->Line_77 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_7 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_278 $$ is.readDouble()[ FD ]
Line_157 $$ totalRead = corpus.capacity()-->Line_191 $$ totalRead += 2[ FD ]
Line_191 $$ totalRead += 2-->Line_96 $$ totalRead++[ FD ]
Line_270 $$ totalRead += 8-->Line_114 $$ totalRead++[ FD ]
Line_139 $$ totalRead += 2-->Line_49 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_132 $$ totalRead = corpus.capacity()-->Line_11 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_78 $$ totalRead += read-->Line_157 $$ totalRead = corpus.capacity()[ FD ]
Line_263 $$ totalRead = corpus.capacity()-->Line_318 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_306 $$ totalRead += actuallySkipped-->Line_77 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_65 $$ totalRead += read-->Line_216 $$ totalRead += 4[ FD ]
Line_157 $$ totalRead = corpus.capacity()-->Line_288 $$ totalRead = corpus.capacity()[ FD ]
Line_259 $$ threw = true-->Line_284 $$ threw = true[ FD ]
Line_275 $$ if (corpus.remaining() < 8) -->Line_288 $$ totalRead = corpus.capacity()[ CD ]
Line_7 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_85 $$ boolean actual = is.readBoolean()[ FD ]
Line_209 $$ totalRead = corpus.capacity()-->Line_240 $$ totalRead += 4[ FD ]
Line_83 $$ boolean expected = corpus.get() != 0-->Line_295 $$ if (Double.isNaN(expected)) [ FD ]
Line_157 $$ totalRead = corpus.capacity()-->Line_29 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_294 $$ totalRead += 8-->Line_87 $$ totalRead++[ FD ]
Line_139 $$ totalRead += 2-->Line_209 $$ totalRead = corpus.capacity()[ FD ]
Line_288 $$ totalRead = corpus.capacity()-->Line_96 $$ totalRead++[ FD ]
Line_295 $$ if (Double.isNaN(expected)) -->Line_298 $$ assertTrue(expected == canonical && canonical == actual)[ CD ]
Line_295 $$ if (Double.isNaN(expected)) -->Line_296 $$ assertTrue(Double.isNaN(canonical) && Double.isNaN(actual))[ CD ]
Line_2 $$ void fuzzOnce() throws Exception -->Line_4 $$ int read = 0[ CD ]
Line_37 $$ int length = bytes.length == 0 ? 0 : r.nextInt(bytes.length - offset)-->Line_60 $$ read = is.read(bytes, offset, length)[ FD ]
Line_7 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_22 $$ is.readFully(bytes)[ FD ]
Line_139 $$ totalRead += 2-->Line_114 $$ totalRead++[ FD ]
Line_30 $$ totalRead += 111-->Line_184 $$ totalRead = corpus.capacity()[ FD ]
Line_30 $$ totalRead += 111-->Line_191 $$ totalRead += 2[ FD ]
Line_270 $$ totalRead += 8-->Line_87 $$ totalRead++[ FD ]
Line_157 $$ totalRead = corpus.capacity()-->Line_294 $$ totalRead += 8[ FD ]
Line_184 $$ totalRead = corpus.capacity()-->Line_87 $$ totalRead++[ FD ]
Line_240 $$ totalRead += 4-->Line_96 $$ totalRead++[ FD ]
Line_78 $$ totalRead += read-->Line_240 $$ totalRead += 4[ FD ]
Line_132 $$ totalRead = corpus.capacity()-->Line_184 $$ totalRead = corpus.capacity()[ FD ]
Line_78 $$ totalRead += read-->Line_132 $$ totalRead = corpus.capacity()[ FD ]
Line_153 $$ threw = true-->Line_261 $$ assertTrue(threw)[ FD ]
Line_7 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_60 $$ read = is.read(bytes, offset, length)[ FD ]
Line_50 $$ totalRead += length-->Line_216 $$ totalRead += 4[ FD ]
Line_139 $$ totalRead += 2-->Line_288 $$ totalRead = corpus.capacity()[ FD ]
Line_216 $$ totalRead += 4-->Line_288 $$ totalRead = corpus.capacity()[ FD ]
Line_120 $$ boolean threw = false-->Line_155 $$ assertTrue(threw)[ FD ]
Line_50 $$ totalRead += length-->Line_288 $$ totalRead = corpus.capacity()[ FD ]
Line_157 $$ totalRead = corpus.capacity()-->Line_64 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_166 $$ totalRead += 2-->Line_216 $$ totalRead += 4[ FD ]
Line_5 $$ int totalRead = 0-->Line_306 $$ totalRead += actuallySkipped[ FD ]
Line_50 $$ totalRead += length-->Line_166 $$ totalRead += 2[ FD ]
Line_157 $$ totalRead = corpus.capacity()-->Line_184 $$ totalRead = corpus.capacity()[ FD ]
Line_234 $$ totalRead = corpus.capacity()-->Line_288 $$ totalRead = corpus.capacity()[ FD ]
Line_166 $$ totalRead += 2-->Line_318 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_288 $$ totalRead = corpus.capacity()-->Line_318 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_17 $$ byte[] bytes = new byte[111]-->Line_73 $$ read = is.read(bytes)[ FD ]
Line_240 $$ totalRead += 4-->Line_64 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_17 $$ byte[] bytes = new byte[111]-->Line_49 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_50 $$ totalRead += length-->Line_294 $$ totalRead += 8[ FD ]
Line_157 $$ totalRead = corpus.capacity()-->Line_114 $$ totalRead++[ FD ]
Line_60 $$ read = is.read(bytes, offset, length)-->Line_73 $$ read = is.read(bytes)[ FD ]
Line_5 $$ int totalRead = 0-->Line_96 $$ totalRead++[ FD ]
Line_240 $$ totalRead += 4-->Line_318 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_306 $$ totalRead += actuallySkipped-->Line_105 $$ totalRead++[ FD ]
Line_7 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_164 $$ int actual = is.readUnsignedShort()[ FD ]
Line_78 $$ totalRead += read-->Line_191 $$ totalRead += 2[ FD ]
Line_7 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_189 $$ char actual = is.readChar()[ FD ]
Line_180 $$ threw = true-->Line_284 $$ threw = true[ FD ]
Line_306 $$ totalRead += actuallySkipped-->Line_11 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_4 $$ int read = 0-->Line_78 $$ totalRead += read[ FD ]
Line_216 $$ totalRead += 4-->Line_234 $$ totalRead = corpus.capacity()[ FD ]
Line_132 $$ totalRead = corpus.capacity()-->Line_240 $$ totalRead += 4[ FD ]
Line_216 $$ totalRead += 4-->Line_306 $$ totalRead += actuallySkipped[ FD ]
Line_78 $$ totalRead += read-->Line_209 $$ totalRead = corpus.capacity()[ FD ]
Line_128 $$ threw = true-->Line_284 $$ threw = true[ FD ]
Line_83 $$ boolean expected = corpus.get() != 0-->Line_241 $$ if (Float.isNaN(expected)) [ FD ]
Line_30 $$ totalRead += 111-->Line_139 $$ totalRead += 2[ FD ]
Line_24 $$ threwEOF = true-->Line_26 $$ assertEquals(expectEOF, threwEOF)[ FD ]
Line_144 $$ if (corpus.remaining() < 2) -->Line_155 $$ assertTrue(threw)[ CD ]
Line_166 $$ totalRead += 2-->Line_114 $$ totalRead++[ FD ]
Line_288 $$ totalRead = corpus.capacity()-->Line_306 $$ totalRead += actuallySkipped[ FD ]
Line_17 $$ byte[] bytes = new byte[111]-->Line_22 $$ is.readFully(bytes)[ FD ]
Line_132 $$ totalRead = corpus.capacity()-->Line_263 $$ totalRead = corpus.capacity()[ FD ]
Line_166 $$ totalRead += 2-->Line_184 $$ totalRead = corpus.capacity()[ FD ]
Line_120 $$ boolean threw = false-->Line_180 $$ threw = true[ FD ]
Line_120 $$ boolean threw = false-->Line_153 $$ threw = true[ FD ]
Line_216 $$ totalRead += 4-->Line_318 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_205 $$ threw = true-->Line_130 $$ assertTrue(threw)[ FD ]
Line_191 $$ totalRead += 2-->Line_77 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_216 $$ totalRead += 4-->Line_87 $$ totalRead++[ FD ]
Line_17 $$ byte[] bytes = new byte[111]-->Line_29 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_30 $$ totalRead += 111-->Line_132 $$ totalRead = corpus.capacity()[ FD ]
Line_205 $$ threw = true-->Line_259 $$ threw = true[ FD ]
Line_78 $$ totalRead += read-->Line_166 $$ totalRead += 2[ FD ]
Line_65 $$ totalRead += read-->Line_166 $$ totalRead += 2[ FD ]
Line_50 $$ totalRead += length-->Line_29 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_139 $$ totalRead += 2-->Line_64 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_166 $$ totalRead += 2-->Line_64 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_20 $$ boolean threwEOF = false-->Line_44 $$ threwEOF = true[ FD ]
Line_240 $$ totalRead += 4-->Line_288 $$ totalRead = corpus.capacity()[ FD ]
Line_50 $$ totalRead += length-->Line_270 $$ totalRead += 8[ FD ]
Line_50 $$ totalRead += length-->Line_240 $$ totalRead += 4[ FD ]
Line_73 $$ read = is.read(bytes)-->Line_78 $$ totalRead += read[ FD ]
Line_30 $$ totalRead += 111-->Line_240 $$ totalRead += 4[ FD ]
Line_30 $$ totalRead += 111-->Line_114 $$ totalRead++[ FD ]
Line_139 $$ totalRead += 2-->Line_294 $$ totalRead += 8[ FD ]
Line_234 $$ totalRead = corpus.capacity()-->Line_10 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_230 $$ threw = true-->Line_232 $$ assertTrue(threw)[ FD ]
Line_166 $$ totalRead += 2-->Line_263 $$ totalRead = corpus.capacity()[ FD ]
Line_60 $$ read = is.read(bytes, offset, length)-->Line_65 $$ totalRead += read[ FD ]
Line_184 $$ totalRead = corpus.capacity()-->Line_11 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_50 $$ totalRead += length-->Line_184 $$ totalRead = corpus.capacity()[ FD ]
Line_2 $$ void fuzzOnce() throws Exception -->Line_319 $$ assertEquals(-1, dis.read())[ CD ]
Line_205 $$ threw = true-->Line_261 $$ assertTrue(threw)[ FD ]
Line_7 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_94 $$ byte actual = is.readByte()[ FD ]
Line_184 $$ totalRead = corpus.capacity()-->Line_288 $$ totalRead = corpus.capacity()[ FD ]
Line_120 $$ boolean threw = false-->Line_207 $$ assertTrue(threw)[ FD ]
Line_270 $$ totalRead += 8-->Line_306 $$ totalRead += actuallySkipped[ FD ]
Line_65 $$ totalRead += read-->Line_78 $$ totalRead += read[ FD ]
Line_7 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_268 $$ long actual = is.readLong()[ FD ]
Line_263 $$ totalRead = corpus.capacity()-->Line_10 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_230 $$ threw = true-->Line_207 $$ assertTrue(threw)[ FD ]
Line_132 $$ totalRead = corpus.capacity()-->Line_139 $$ totalRead += 2[ FD ]
Line_50 $$ totalRead += length-->Line_77 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_209 $$ totalRead = corpus.capacity()-->Line_64 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_157 $$ totalRead = corpus.capacity()-->Line_234 $$ totalRead = corpus.capacity()[ FD ]
Line_78 $$ totalRead += read-->Line_318 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_305 $$ int actuallySkipped = Math.min(skipBytes, corpus.remaining())-->Line_308 $$ int canonical = dis.skipBytes(actuallySkipped)[ FD ]
Line_4 $$ int read = 0-->Line_60 $$ read = is.read(bytes, offset, length)[ FD ]
Line_191 $$ totalRead += 2-->Line_294 $$ totalRead += 8[ FD ]
Line_36 $$ int offset = bytes.length == 0 ? 0 : r.nextInt(bytes.length)-->Line_42 $$ is.readFully(bytes, offset, length)[ FD ]
Line_230 $$ threw = true-->Line_284 $$ threw = true[ FD ]
Line_191 $$ totalRead += 2-->Line_64 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_306 $$ totalRead += actuallySkipped-->Line_10 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_5 $$ int totalRead = 0-->Line_234 $$ totalRead = corpus.capacity()[ FD ]
Line_30 $$ totalRead += 111-->Line_216 $$ totalRead += 4[ FD ]
Line_294 $$ totalRead += 8-->Line_96 $$ totalRead++[ FD ]
Line_234 $$ totalRead = corpus.capacity()-->Line_77 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_119 $$ if (corpus.remaining() < 2) -->Line_120 $$ boolean threw = false[ CD ]
Line_120 $$ boolean threw = false-->Line_261 $$ assertTrue(threw)[ FD ]
Line_184 $$ totalRead = corpus.capacity()-->Line_263 $$ totalRead = corpus.capacity()[ FD ]
Line_78 $$ totalRead += read-->Line_139 $$ totalRead += 2[ FD ]
Line_153 $$ threw = true-->Line_259 $$ threw = true[ FD ]
Line_60 $$ read = is.read(bytes, offset, length)-->Line_77 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_284 $$ threw = true-->Line_261 $$ assertTrue(threw)[ FD ]
Line_20 $$ boolean threwEOF = false-->Line_24 $$ threwEOF = true[ FD ]
Line_221 $$ if (corpus.remaining() < 4) -->Line_232 $$ assertTrue(threw)[ CD ]
Line_191 $$ totalRead += 2-->Line_263 $$ totalRead = corpus.capacity()[ FD ]
Line_209 $$ totalRead = corpus.capacity()-->Line_263 $$ totalRead = corpus.capacity()[ FD ]
Line_36 $$ int offset = bytes.length == 0 ? 0 : r.nextInt(bytes.length)-->Line_49 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_30 $$ totalRead += 111-->Line_294 $$ totalRead += 8[ FD ]
Line_166 $$ totalRead += 2-->Line_234 $$ totalRead = corpus.capacity()[ FD ]
Line_234 $$ totalRead = corpus.capacity()-->Line_11 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_65 $$ totalRead += read-->Line_240 $$ totalRead += 4[ FD ]
Line_120 $$ boolean threw = false-->Line_130 $$ assertTrue(threw)[ FD ]
Line_73 $$ read = is.read(bytes)-->Line_64 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_17 $$ byte[] bytes = new byte[111]-->Line_42 $$ is.readFully(bytes, offset, length)[ FD ]
Line_240 $$ totalRead += 4-->Line_11 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_30 $$ totalRead += 111-->Line_288 $$ totalRead = corpus.capacity()[ FD ]
Line_209 $$ totalRead = corpus.capacity()-->Line_29 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_209 $$ totalRead = corpus.capacity()-->Line_77 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_7 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_293 $$ double actual = is.readDouble()[ FD ]
Line_128 $$ threw = true-->Line_232 $$ assertTrue(threw)[ FD ]
Line_120 $$ boolean threw = false-->Line_284 $$ threw = true[ FD ]
Line_166 $$ totalRead += 2-->Line_96 $$ totalRead++[ FD ]
Line_196 $$ if (corpus.remaining() < 4) -->Line_208 $$ assertTrue(corpus.remaining() - totalRead < 4)[ CD ]
Line_36 $$ int offset = bytes.length == 0 ? 0 : r.nextInt(bytes.length)-->Line_64 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_221 $$ if (corpus.remaining() < 4) -->Line_233 $$ assertTrue(corpus.remaining() - totalRead < 4)[ CD ]
Line_139 $$ totalRead += 2-->Line_306 $$ totalRead += actuallySkipped[ FD ]
Line_205 $$ threw = true-->Line_230 $$ threw = true[ FD ]
Line_65 $$ totalRead += read-->Line_184 $$ totalRead = corpus.capacity()[ FD ]
Line_191 $$ totalRead += 2-->Line_306 $$ totalRead += actuallySkipped[ FD ]
Line_128 $$ threw = true-->Line_130 $$ assertTrue(threw)[ FD ]
Line_7 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_147 $$ is.readUnsignedShort()[ FD ]
Line_209 $$ totalRead = corpus.capacity()-->Line_96 $$ totalRead++[ FD ]
Line_85 $$ boolean actual = is.readBoolean()-->Line_242 $$ assertTrue(Float.isNaN(canonical) && Float.isNaN(actual))[ FD ]
Line_191 $$ totalRead += 2-->Line_87 $$ totalRead++[ FD ]
Line_288 $$ totalRead = corpus.capacity()-->Line_29 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_50 $$ totalRead += length-->Line_306 $$ totalRead += actuallySkipped[ FD ]
Line_259 $$ threw = true-->Line_182 $$ assertTrue(threw)[ FD ]
Line_284 $$ threw = true-->Line_130 $$ assertTrue(threw)[ FD ]
Line_84 $$ boolean canonical = dis.readBoolean()-->Line_296 $$ assertTrue(Double.isNaN(canonical) && Double.isNaN(actual))[ FD ]
Line_5 $$ int totalRead = 0-->Line_132 $$ totalRead = corpus.capacity()[ FD ]
Line_50 $$ totalRead += length-->Line_157 $$ totalRead = corpus.capacity()[ FD ]
Line_65 $$ totalRead += read-->Line_270 $$ totalRead += 8[ FD ]
Line_166 $$ totalRead += 2-->Line_191 $$ totalRead += 2[ FD ]
Line_153 $$ threw = true-->Line_284 $$ threw = true[ FD ]
Line_73 $$ read = is.read(bytes)-->Line_77 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_263 $$ totalRead = corpus.capacity()-->Line_49 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_37 $$ int length = bytes.length == 0 ? 0 : r.nextInt(bytes.length - offset)-->Line_49 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_30 $$ totalRead += 111-->Line_49 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_4 $$ int read = 0-->Line_64 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_7 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_174 $$ is.readChar()[ FD ]
Line_7 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_137 $$ short actual = is.readShort()[ FD ]
Line_234 $$ totalRead = corpus.capacity()-->Line_263 $$ totalRead = corpus.capacity()[ FD ]
Line_65 $$ totalRead += read-->Line_288 $$ totalRead = corpus.capacity()[ FD ]
Line_221 $$ if (corpus.remaining() < 4) -->Line_234 $$ totalRead = corpus.capacity()[ CD ]
Line_65 $$ totalRead += read-->Line_114 $$ totalRead++[ FD ]
Line_216 $$ totalRead += 4-->Line_105 $$ totalRead++[ FD ]
Line_294 $$ totalRead += 8-->Line_105 $$ totalRead++[ FD ]
Line_30 $$ totalRead += 111-->Line_306 $$ totalRead += actuallySkipped[ FD ]
Line_180 $$ threw = true-->Line_205 $$ threw = true[ FD ]
Line_234 $$ totalRead = corpus.capacity()-->Line_49 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_166 $$ totalRead += 2-->Line_49 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_7 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_199 $$ is.readInt()[ FD ]
Line_240 $$ totalRead += 4-->Line_77 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_180 $$ threw = true-->Line_232 $$ assertTrue(threw)[ FD ]
Line_24 $$ threwEOF = true-->Line_44 $$ threwEOF = true[ FD ]
Line_216 $$ totalRead += 4-->Line_64 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_270 $$ totalRead += 8-->Line_49 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_132 $$ totalRead = corpus.capacity()-->Line_166 $$ totalRead += 2[ FD ]
Line_30 $$ totalRead += 111-->Line_105 $$ totalRead++[ FD ]
Line_250 $$ if (corpus.remaining() < 8) -->Line_263 $$ totalRead = corpus.capacity()[ CD ]
Line_44 $$ threwEOF = true-->Line_46 $$ assertEquals(expectEOF, threwEOF)[ FD ]
Line_216 $$ totalRead += 4-->Line_96 $$ totalRead++[ FD ]
Line_65 $$ totalRead += read-->Line_49 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_270 $$ totalRead += 8-->Line_11 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_230 $$ threw = true-->Line_286 $$ assertTrue(threw)[ FD ]
Line_288 $$ totalRead = corpus.capacity()-->Line_64 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_294 $$ totalRead += 8-->Line_114 $$ totalRead++[ FD ]
Line_216 $$ totalRead += 4-->Line_77 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_44 $$ threwEOF = true-->Line_26 $$ assertEquals(expectEOF, threwEOF)[ FD ]
Line_270 $$ totalRead += 8-->Line_96 $$ totalRead++[ FD ]
Line_50 $$ totalRead += length-->Line_209 $$ totalRead = corpus.capacity()[ FD ]
Line_166 $$ totalRead += 2-->Line_209 $$ totalRead = corpus.capacity()[ FD ]
Line_50 $$ totalRead += length-->Line_105 $$ totalRead++[ FD ]
Line_139 $$ totalRead += 2-->Line_263 $$ totalRead = corpus.capacity()[ FD ]
Line_65 $$ totalRead += read-->Line_139 $$ totalRead += 2[ FD ]
Line_205 $$ threw = true-->Line_286 $$ assertTrue(threw)[ FD ]
Line_30 $$ totalRead += 111-->Line_29 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_128 $$ threw = true-->Line_207 $$ assertTrue(threw)[ FD ]
Line_157 $$ totalRead = corpus.capacity()-->Line_49 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_263 $$ totalRead = corpus.capacity()-->Line_270 $$ totalRead += 8[ FD ]
Line_30 $$ totalRead += 111-->Line_78 $$ totalRead += read[ FD ]
Line_7 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_309 $$ int actual = is.skipBytes(actuallySkipped)[ FD ]
Line_306 $$ totalRead += actuallySkipped-->Line_318 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_132 $$ totalRead = corpus.capacity()-->Line_114 $$ totalRead++[ FD ]
Line_50 $$ totalRead += length-->Line_96 $$ totalRead++[ FD ]
Line_234 $$ totalRead = corpus.capacity()-->Line_306 $$ totalRead += actuallySkipped[ FD ]
Line_132 $$ totalRead = corpus.capacity()-->Line_288 $$ totalRead = corpus.capacity()[ FD ]
Line_166 $$ totalRead += 2-->Line_77 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_180 $$ threw = true-->Line_207 $$ assertTrue(threw)[ FD ]
Line_184 $$ totalRead = corpus.capacity()-->Line_306 $$ totalRead += actuallySkipped[ FD ]
Line_216 $$ totalRead += 4-->Line_49 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_7 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_73 $$ read = is.read(bytes)[ FD ]
Line_17 $$ byte[] bytes = new byte[111]-->Line_77 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_270 $$ totalRead += 8-->Line_64 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_184 $$ totalRead = corpus.capacity()-->Line_209 $$ totalRead = corpus.capacity()[ FD ]
Line_50 $$ totalRead += length-->Line_139 $$ totalRead += 2[ FD ]
Line_153 $$ threw = true-->Line_205 $$ threw = true[ FD ]
Line_184 $$ totalRead = corpus.capacity()-->Line_64 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_234 $$ totalRead = corpus.capacity()-->Line_270 $$ totalRead += 8[ FD ]
Line_9 $$ int iteration = 0-->Line_13 $$ iteration++[ FD ]
Line_209 $$ totalRead = corpus.capacity()-->Line_87 $$ totalRead++[ FD ]
Line_166 $$ totalRead += 2-->Line_10 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_180 $$ threw = true-->Line_261 $$ assertTrue(threw)[ FD ]
Line_157 $$ totalRead = corpus.capacity()-->Line_105 $$ totalRead++[ FD ]
Line_209 $$ totalRead = corpus.capacity()-->Line_270 $$ totalRead += 8[ FD ]
Line_85 $$ boolean actual = is.readBoolean()-->Line_311 $$ assertEquals(canonical, actual)[ FD ]
Line_184 $$ totalRead = corpus.capacity()-->Line_114 $$ totalRead++[ FD ]
Line_263 $$ totalRead = corpus.capacity()-->Line_29 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_306 $$ totalRead += actuallySkipped-->Line_64 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_120 $$ boolean threw = false-->Line_286 $$ assertTrue(threw)[ FD ]
Line_305 $$ int actuallySkipped = Math.min(skipBytes, corpus.remaining())-->Line_309 $$ int actual = is.skipBytes(actuallySkipped)[ FD ]
Line_20 $$ boolean threwEOF = false-->Line_26 $$ assertEquals(expectEOF, threwEOF)[ FD ]
Line_240 $$ totalRead += 4-->Line_49 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_288 $$ totalRead = corpus.capacity()-->Line_49 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_157 $$ totalRead = corpus.capacity()-->Line_209 $$ totalRead = corpus.capacity()[ FD ]
Line_240 $$ totalRead += 4-->Line_10 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_30 $$ totalRead += 111-->Line_157 $$ totalRead = corpus.capacity()[ FD ]
Line_306 $$ totalRead += actuallySkipped-->Line_29 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_180 $$ threw = true-->Line_230 $$ threw = true[ FD ]
Line_263 $$ totalRead = corpus.capacity()-->Line_306 $$ totalRead += actuallySkipped[ FD ]
Line_132 $$ totalRead = corpus.capacity()-->Line_216 $$ totalRead += 4[ FD ]
Line_30 $$ totalRead += 111-->Line_270 $$ totalRead += 8[ FD ]
Line_166 $$ totalRead += 2-->Line_270 $$ totalRead += 8[ FD ]
Line_240 $$ totalRead += 4-->Line_294 $$ totalRead += 8[ FD ]
Line_36 $$ int offset = bytes.length == 0 ? 0 : r.nextInt(bytes.length)-->Line_60 $$ read = is.read(bytes, offset, length)[ FD ]
Line_19 $$ boolean expectEOF = expectedBytes < 111-->Line_74 $$ assertTrue((expectEOF && read <= 0) || (!expectEOF && read >= 0))[ FD ]
Line_30 $$ totalRead += 111-->Line_96 $$ totalRead++[ FD ]
Line_191 $$ totalRead += 2-->Line_240 $$ totalRead += 4[ FD ]
Line_128 $$ threw = true-->Line_286 $$ assertTrue(threw)[ FD ]
Line_78 $$ totalRead += read-->Line_77 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_205 $$ threw = true-->Line_155 $$ assertTrue(threw)[ FD ]
Line_205 $$ threw = true-->Line_232 $$ assertTrue(threw)[ FD ]
Line_294 $$ totalRead += 8-->Line_10 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_230 $$ threw = true-->Line_182 $$ assertTrue(threw)[ FD ]
Line_85 $$ boolean actual = is.readBoolean()-->Line_296 $$ assertTrue(Double.isNaN(canonical) && Double.isNaN(actual))[ FD ]
Line_27 $$ if (expectEOF)-->Line_28 $$ return[ CD ]
Line_7 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_122 $$ is.readShort()[ FD ]
Line_250 $$ if (corpus.remaining() < 8) -->Line_262 $$ assertTrue(corpus.remaining() - totalRead < 8)[ CD ]
Line_270 $$ totalRead += 8-->Line_105 $$ totalRead++[ FD ]
Line_132 $$ totalRead = corpus.capacity()-->Line_77 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_153 $$ threw = true-->Line_207 $$ assertTrue(threw)[ FD ]
Line_5 $$ int totalRead = 0-->Line_11 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_7 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_214 $$ int actual = is.readInt()[ FD ]
Line_132 $$ totalRead = corpus.capacity()-->Line_270 $$ totalRead += 8[ FD ]
Line_184 $$ totalRead = corpus.capacity()-->Line_29 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_209 $$ totalRead = corpus.capacity()-->Line_105 $$ totalRead++[ FD ]
Line_5 $$ int totalRead = 0-->Line_209 $$ totalRead = corpus.capacity()[ FD ]
Line_50 $$ totalRead += length-->Line_78 $$ totalRead += read[ FD ]
Line_30 $$ totalRead += 111-->Line_10 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_284 $$ threw = true-->Line_207 $$ assertTrue(threw)[ FD ]
Line_78 $$ totalRead += read-->Line_270 $$ totalRead += 8[ FD ]
Line_119 $$ if (corpus.remaining() < 2) -->Line_132 $$ totalRead = corpus.capacity()[ CD ]
Line_84 $$ boolean canonical = dis.readBoolean()-->Line_242 $$ assertTrue(Float.isNaN(canonical) && Float.isNaN(actual))[ FD ]
Line_234 $$ totalRead = corpus.capacity()-->Line_105 $$ totalRead++[ FD ]
Line_2 $$ void fuzzOnce() throws Exception -->Line_5 $$ int totalRead = 0[ CD ]
Line_19 $$ boolean expectEOF = expectedBytes < 111-->Line_46 $$ assertEquals(expectEOF, threwEOF)[ FD ]
Line_294 $$ totalRead += 8-->Line_318 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_5 $$ int totalRead = 0-->Line_216 $$ totalRead += 4[ FD ]
Line_153 $$ threw = true-->Line_180 $$ threw = true[ FD ]
Line_166 $$ totalRead += 2-->Line_306 $$ totalRead += actuallySkipped[ FD ]
Line_139 $$ totalRead += 2-->Line_270 $$ totalRead += 8[ FD ]
Line_234 $$ totalRead = corpus.capacity()-->Line_96 $$ totalRead++[ FD ]
Line_184 $$ totalRead = corpus.capacity()-->Line_318 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_294 $$ totalRead += 8-->Line_64 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_288 $$ totalRead = corpus.capacity()-->Line_105 $$ totalRead++[ FD ]
Line_132 $$ totalRead = corpus.capacity()-->Line_318 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_78 $$ totalRead += read-->Line_184 $$ totalRead = corpus.capacity()[ FD ]
Line_5 $$ int totalRead = 0-->Line_240 $$ totalRead += 4[ FD ]
Line_5 $$ int totalRead = 0-->Line_77 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_209 $$ totalRead = corpus.capacity()-->Line_10 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_7 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_42 $$ is.readFully(bytes, offset, length)[ FD ]
Line_191 $$ totalRead += 2-->Line_114 $$ totalRead++[ FD ]
Line_30 $$ totalRead += 111-->Line_65 $$ totalRead += read[ FD ]
Line_5 $$ int totalRead = 0-->Line_157 $$ totalRead = corpus.capacity()[ FD ]
Line_50 $$ totalRead += length-->Line_234 $$ totalRead = corpus.capacity()[ FD ]
Line_144 $$ if (corpus.remaining() < 2) -->Line_156 $$ assertTrue(corpus.remaining() - totalRead < 2)[ CD ]
Line_30 $$ totalRead += 111-->Line_234 $$ totalRead = corpus.capacity()[ FD ]
Line_209 $$ totalRead = corpus.capacity()-->Line_294 $$ totalRead += 8[ FD ]
Line_153 $$ threw = true-->Line_130 $$ assertTrue(threw)[ FD ]
Line_157 $$ totalRead = corpus.capacity()-->Line_166 $$ totalRead += 2[ FD ]
Line_132 $$ totalRead = corpus.capacity()-->Line_64 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_294 $$ totalRead += 8-->Line_49 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_284 $$ threw = true-->Line_155 $$ assertTrue(threw)[ FD ]
Line_157 $$ totalRead = corpus.capacity()-->Line_96 $$ totalRead++[ FD ]
Line_157 $$ totalRead = corpus.capacity()-->Line_10 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_288 $$ totalRead = corpus.capacity()-->Line_294 $$ totalRead += 8[ FD ]
Line_10 $$ while (totalRead < corpus.capacity()) -->Line_13 $$ iteration++[ CD ]
Line_120 $$ boolean threw = false-->Line_205 $$ threw = true[ FD ]
Line_209 $$ totalRead = corpus.capacity()-->Line_216 $$ totalRead += 4[ FD ]
Line_180 $$ threw = true-->Line_130 $$ assertTrue(threw)[ FD ]
Line_171 $$ if (corpus.remaining() < 2) -->Line_183 $$ assertTrue(corpus.remaining() - totalRead < 2)[ CD ]
Line_119 $$ if (corpus.remaining() < 2) -->Line_130 $$ assertTrue(threw)[ CD ]
Line_241 $$ if (Float.isNaN(expected)) -->Line_242 $$ assertTrue(Float.isNaN(canonical) && Float.isNaN(actual))[ CD ]
Line_132 $$ totalRead = corpus.capacity()-->Line_191 $$ totalRead += 2[ FD ]
Line_47 $$ if (expectEOF)-->Line_48 $$ return[ CD ]
Line_205 $$ threw = true-->Line_207 $$ assertTrue(threw)[ FD ]
Line_37 $$ int length = bytes.length == 0 ? 0 : r.nextInt(bytes.length - offset)-->Line_50 $$ totalRead += length[ FD ]
Line_216 $$ totalRead += 4-->Line_270 $$ totalRead += 8[ FD ]
Line_184 $$ totalRead = corpus.capacity()-->Line_10 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_240 $$ totalRead += 4-->Line_29 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_184 $$ totalRead = corpus.capacity()-->Line_77 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_139 $$ totalRead += 2-->Line_96 $$ totalRead++[ FD ]
Line_259 $$ threw = true-->Line_286 $$ assertTrue(threw)[ FD ]
Line_78 $$ totalRead += read-->Line_216 $$ totalRead += 4[ FD ]
Line_306 $$ totalRead += actuallySkipped-->Line_49 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_30 $$ totalRead += 111-->Line_209 $$ totalRead = corpus.capacity()[ FD ]
Line_234 $$ totalRead = corpus.capacity()-->Line_240 $$ totalRead += 4[ FD ]
Line_205 $$ threw = true-->Line_284 $$ threw = true[ FD ]
Line_263 $$ totalRead = corpus.capacity()-->Line_11 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_10 $$ while (totalRead < corpus.capacity()) -->Line_11 $$ assertEquals(corpus.position(), totalRead)[ CD ]
Line_216 $$ totalRead += 4-->Line_240 $$ totalRead += 4[ FD ]
Line_132 $$ totalRead = corpus.capacity()-->Line_234 $$ totalRead = corpus.capacity()[ FD ]
Line_234 $$ totalRead = corpus.capacity()-->Line_87 $$ totalRead++[ FD ]
Line_139 $$ totalRead += 2-->Line_234 $$ totalRead = corpus.capacity()[ FD ]
Line_5 $$ int totalRead = 0-->Line_166 $$ totalRead += 2[ FD ]
Line_17 $$ byte[] bytes = new byte[111]-->Line_64 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_65 $$ totalRead += read-->Line_105 $$ totalRead++[ FD ]
Line_5 $$ int totalRead = 0-->Line_105 $$ totalRead++[ FD ]
Line_65 $$ totalRead += read-->Line_96 $$ totalRead++[ FD ]
Line_65 $$ totalRead += read-->Line_306 $$ totalRead += actuallySkipped[ FD ]
Line_7 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_253 $$ is.readLong()[ FD ]
Line_263 $$ totalRead = corpus.capacity()-->Line_288 $$ totalRead = corpus.capacity()[ FD ]
Line_2 $$ void fuzzOnce() throws Exception -->Line_318 $$ assertEquals(totalRead, corpus.capacity())[ CD ]
Line_132 $$ totalRead = corpus.capacity()-->Line_10 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_153 $$ threw = true-->Line_182 $$ assertTrue(threw)[ FD ]
Line_5 $$ int totalRead = 0-->Line_78 $$ totalRead += read[ FD ]
Line_209 $$ totalRead = corpus.capacity()-->Line_234 $$ totalRead = corpus.capacity()[ FD ]
Line_191 $$ totalRead += 2-->Line_288 $$ totalRead = corpus.capacity()[ FD ]
Line_132 $$ totalRead = corpus.capacity()-->Line_49 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_209 $$ totalRead = corpus.capacity()-->Line_114 $$ totalRead++[ FD ]
Line_180 $$ threw = true-->Line_182 $$ assertTrue(threw)[ FD ]
Line_205 $$ threw = true-->Line_182 $$ assertTrue(threw)[ FD ]
Line_294 $$ totalRead += 8-->Line_306 $$ totalRead += actuallySkipped[ FD ]
Line_5 $$ int totalRead = 0-->Line_139 $$ totalRead += 2[ FD ]
Line_7 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_239 $$ float actual = is.readFloat()[ FD ]
Line_120 $$ boolean threw = false-->Line_259 $$ threw = true[ FD ]
Line_128 $$ threw = true-->Line_205 $$ threw = true[ FD ]
Line_139 $$ totalRead += 2-->Line_29 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_132 $$ totalRead = corpus.capacity()-->Line_87 $$ totalRead++[ FD ]
Line_139 $$ totalRead += 2-->Line_184 $$ totalRead = corpus.capacity()[ FD ]
Line_234 $$ totalRead = corpus.capacity()-->Line_29 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_50 $$ totalRead += length-->Line_263 $$ totalRead = corpus.capacity()[ FD ]
Line_270 $$ totalRead += 8-->Line_29 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_2 $$ void fuzzOnce() throws Exception -->Line_6 $$ DummyChannel dc = new DummyChannel()[ CD ]
Line_191 $$ totalRead += 2-->Line_49 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_180 $$ threw = true-->Line_259 $$ threw = true[ FD ]
Line_5 $$ int totalRead = 0-->Line_294 $$ totalRead += 8[ FD ]
Line_196 $$ if (corpus.remaining() < 4) -->Line_209 $$ totalRead = corpus.capacity()[ CD ]
Line_216 $$ totalRead += 4-->Line_294 $$ totalRead += 8[ FD ]
Line_241 $$ if (Float.isNaN(expected)) -->Line_244 $$ assertTrue(expected == canonical && canonical == actual)[ CD ]
Line_180 $$ threw = true-->Line_286 $$ assertTrue(threw)[ FD ]
Line_20 $$ boolean threwEOF = false-->Line_46 $$ assertEquals(expectEOF, threwEOF)[ FD ]
Line_30 $$ totalRead += 111-->Line_50 $$ totalRead += length[ FD ]
Line_5 $$ int totalRead = 0-->Line_270 $$ totalRead += 8[ FD ]
Line_191 $$ totalRead += 2-->Line_318 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_166 $$ totalRead += 2-->Line_11 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_24 $$ threwEOF = true-->Line_46 $$ assertEquals(expectEOF, threwEOF)[ FD ]
Line_65 $$ totalRead += read-->Line_64 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_78 $$ totalRead += read-->Line_306 $$ totalRead += actuallySkipped[ FD ]
Line_240 $$ totalRead += 4-->Line_263 $$ totalRead = corpus.capacity()[ FD ]
Line_191 $$ totalRead += 2-->Line_209 $$ totalRead = corpus.capacity()[ FD ]
Line_259 $$ threw = true-->Line_232 $$ assertTrue(threw)[ FD ]
Line_153 $$ threw = true-->Line_155 $$ assertTrue(threw)[ FD ]
Line_139 $$ totalRead += 2-->Line_87 $$ totalRead++[ FD ]
Line_184 $$ totalRead = corpus.capacity()-->Line_234 $$ totalRead = corpus.capacity()[ FD ]
Line_65 $$ totalRead += read-->Line_263 $$ totalRead = corpus.capacity()[ FD ]
Line_184 $$ totalRead = corpus.capacity()-->Line_105 $$ totalRead++[ FD ]
Line_30 $$ totalRead += 111-->Line_64 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_240 $$ totalRead += 4-->Line_87 $$ totalRead++[ FD ]
Line_4 $$ int read = 0-->Line_65 $$ totalRead += read[ FD ]
Line_288 $$ totalRead = corpus.capacity()-->Line_87 $$ totalRead++[ FD ]
Line_191 $$ totalRead += 2-->Line_29 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_5 $$ int totalRead = 0-->Line_263 $$ totalRead = corpus.capacity()[ FD ]
Line_50 $$ totalRead += length-->Line_49 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_284 $$ threw = true-->Line_286 $$ assertTrue(threw)[ FD ]
Line_132 $$ totalRead = corpus.capacity()-->Line_294 $$ totalRead += 8[ FD ]
Line_166 $$ totalRead += 2-->Line_29 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_263 $$ totalRead = corpus.capacity()-->Line_105 $$ totalRead++[ FD ]
Line_128 $$ threw = true-->Line_180 $$ threw = true[ FD ]
Line_7 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_103 $$ int actual = is.read()[ FD ]
Line_120 $$ boolean threw = false-->Line_128 $$ threw = true[ FD ]
Line_5 $$ int totalRead = 0-->Line_318 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_263 $$ totalRead = corpus.capacity()-->Line_294 $$ totalRead += 8[ FD ]
Line_19 $$ boolean expectEOF = expectedBytes < 111-->Line_61 $$ assertTrue((expectEOF && read <= 0) || (!expectEOF && read >= 0))[ FD ]
Line_65 $$ totalRead += read-->Line_132 $$ totalRead = corpus.capacity()[ FD ]
Line_30 $$ totalRead += 111-->Line_318 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_50 $$ totalRead += length-->Line_318 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_128 $$ threw = true-->Line_155 $$ assertTrue(threw)[ FD ]
Line_65 $$ totalRead += read-->Line_11 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_78 $$ totalRead += read-->Line_288 $$ totalRead = corpus.capacity()[ FD ]
Line_65 $$ totalRead += read-->Line_10 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_240 $$ totalRead += 4-->Line_114 $$ totalRead++[ FD ]
Line_5 $$ int totalRead = 0-->Line_87 $$ totalRead++[ FD ]
Line_191 $$ totalRead += 2-->Line_105 $$ totalRead++[ FD ]
Line_65 $$ totalRead += read-->Line_234 $$ totalRead = corpus.capacity()[ FD ]
Line_275 $$ if (corpus.remaining() < 8) -->Line_286 $$ assertTrue(threw)[ CD ]
Line_128 $$ threw = true-->Line_230 $$ threw = true[ FD ]
