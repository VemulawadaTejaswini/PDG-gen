Line_8 $$ ContextState right = ContextState.allocate(0, 1, 2)-->Line_74 $$ right.writeLocal(CounterId.fromInt(1), 100L, 100L)[ FD ]
Line_2 $$ public void testMerge() -->Line_59 $$ left.writeGlobal(CounterId.fromInt(1), 10L, 20L)[ CD ]
Line_2 $$ public void testMerge() -->Line_23 $$ assertEquals(5L, merged.getLong(merged.position() + hd + 3 * stepLength + idLength + clockLength))[ CD ]
Line_3 $$ ContextState left = ContextState.allocate(0, 1, 3)-->Line_31 $$ left.writeGlobal(CounterId.fromInt(1), 1L, 1L)[ FD ]
Line_2 $$ public void testMerge() -->Line_3 $$ ContextState left = ContextState.allocate(0, 1, 3)[ CD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_54 $$ assertEquals(4L, merged.getLong(merged.position() + headerLength + 3 * stepLength + idLength + clockLength))[ FD ]
Line_2 $$ public void testMerge() -->Line_17 $$ assertEquals(12L, merged.getLong(merged.position() + hd + 4 * stepLength + idLength + clockLength))[ CD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_44 $$ assertEquals(1L, merged.getLong(merged.position() + headerLength + idLength))[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_44 $$ assertEquals(1L, merged.getLong(merged.position() + headerLength + idLength))[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_51 $$ assertEquals(6L, merged.getLong(merged.position() + headerLength + 2 * stepLength + idLength + clockLength))[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_62 $$ merged = cc.merge(left.context, right.context)[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_22 $$ assertEquals(5L, merged.getLong(merged.position() + hd + 3 * stepLength + idLength))[ FD ]
Line_2 $$ public void testMerge() -->Line_22 $$ assertEquals(5L, merged.getLong(merged.position() + hd + 3 * stepLength + idLength))[ CD ]
Line_30 $$ left = ContextState.allocate(3, 0, 0)-->Line_58 $$ left = ContextState.allocate(1, 0, 0)[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_68 $$ assertEquals(10L, merged.getLong(merged.position() + headerLength + idLength))[ FD ]
Line_63 $$ headerLength = headerSizeLength + headerEltLength-->Line_67 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(1), merged, headerLength))[ FD ]
Line_30 $$ left = ContextState.allocate(3, 0, 0)-->Line_71 $$ left.writeGlobal(CounterId.fromInt(1), 1L, 1L)[ FD ]
Line_2 $$ public void testMerge() -->Line_77 $$ headerLength = headerSizeLength + 2 * headerEltLength[ CD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_83 $$ assertEquals(1L, merged.getLong(merged.position() + headerLength + idLength + clockLength))[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_46 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(2), merged, headerLength + stepLength))[ FD ]
Line_2 $$ public void testMerge() -->Line_73 $$ right = ContextState.allocate(0, 1, 1)[ CD ]
Line_42 $$ int headerLength = headerSizeLength + 5 * headerEltLength-->Line_43 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(1), merged, headerLength))[ FD ]
Line_76 $$ merged = cc.merge(left.context, right.context)-->Line_78 $$ assertEquals(headerLength + 2 * stepLength, merged.remaining())[ FD ]
Line_58 $$ left = ContextState.allocate(1, 0, 0)-->Line_72 $$ left.writeGlobal(CounterId.fromInt(2), 1L, 1L)[ FD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_83 $$ assertEquals(1L, merged.getLong(merged.position() + headerLength + idLength + clockLength))[ FD ]
Line_76 $$ merged = cc.merge(left.context, right.context)-->Line_82 $$ assertEquals(1L, merged.getLong(merged.position() + headerLength + idLength))[ FD ]
Line_2 $$ public void testMerge() -->Line_65 $$ assertEquals(30L, cc.total(merged))[ CD ]
Line_2 $$ public void testMerge() -->Line_4 $$ left.writeRemote(CounterId.fromInt(1), 1L, 1L)[ CD ]
Line_62 $$ merged = cc.merge(left.context, right.context)-->Line_66 $$ assertEquals(1, merged.getShort(merged.position()))[ FD ]
Line_2 $$ public void testMerge() -->Line_18 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(4), merged, hd + 2 * stepLength))[ CD ]
Line_34 $$ right = ContextState.allocate(3, 0, 0)-->Line_74 $$ right.writeLocal(CounterId.fromInt(1), 100L, 100L)[ FD ]
Line_30 $$ left = ContextState.allocate(3, 0, 0)-->Line_72 $$ left.writeGlobal(CounterId.fromInt(2), 1L, 1L)[ FD ]
Line_60 $$ right = ContextState.allocate(1, 0, 0)-->Line_61 $$ right.writeGlobal(CounterId.fromInt(1), 10L, 30L)[ FD ]
Line_58 $$ left = ContextState.allocate(1, 0, 0)-->Line_70 $$ left = ContextState.allocate(2, 0, 0)[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_84 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(2), merged, headerLength + stepLength))[ FD ]
Line_42 $$ int headerLength = headerSizeLength + 5 * headerEltLength-->Line_63 $$ headerLength = headerSizeLength + headerEltLength[ FD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_68 $$ assertEquals(10L, merged.getLong(merged.position() + headerLength + idLength))[ FD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_78 $$ assertEquals(headerLength + 2 * stepLength, merged.remaining())[ FD ]
Line_77 $$ headerLength = headerSizeLength + 2 * headerEltLength-->Line_81 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(1), merged, headerLength))[ FD ]
Line_2 $$ public void testMerge() -->Line_46 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(2), merged, headerLength + stepLength))[ CD ]
Line_30 $$ left = ContextState.allocate(3, 0, 0)-->Line_32 $$ left.writeGlobal(CounterId.fromInt(2), 2L, 2L)[ FD ]
Line_2 $$ public void testMerge() -->Line_51 $$ assertEquals(6L, merged.getLong(merged.position() + headerLength + 2 * stepLength + idLength + clockLength))[ CD ]
Line_2 $$ public void testMerge() -->Line_54 $$ assertEquals(4L, merged.getLong(merged.position() + headerLength + 3 * stepLength + idLength + clockLength))[ CD ]
Line_42 $$ int headerLength = headerSizeLength + 5 * headerEltLength-->Line_77 $$ headerLength = headerSizeLength + 2 * headerEltLength[ FD ]
Line_2 $$ public void testMerge() -->Line_45 $$ assertEquals(1L, merged.getLong(merged.position() + headerLength + idLength + clockLength))[ CD ]
Line_70 $$ left = ContextState.allocate(2, 0, 0)-->Line_72 $$ left.writeGlobal(CounterId.fromInt(2), 1L, 1L)[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_19 $$ assertEquals(6L, merged.getLong(merged.position() + hd + 2 * stepLength + idLength))[ FD ]
Line_8 $$ ContextState right = ContextState.allocate(0, 1, 2)-->Line_36 $$ right.writeGlobal(CounterId.fromInt(4), 4L, 4L)[ FD ]
Line_34 $$ right = ContextState.allocate(3, 0, 0)-->Line_36 $$ right.writeGlobal(CounterId.fromInt(4), 4L, 4L)[ FD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_47 $$ assertEquals(2L, merged.getLong(merged.position() + headerLength + stepLength + idLength))[ FD ]
Line_62 $$ merged = cc.merge(left.context, right.context)-->Line_85 $$ assertEquals(1L, merged.getLong(merged.position() + headerLength + stepLength + idLength))[ FD ]
Line_2 $$ public void testMerge() -->Line_7 $$ left.writeLocal(CounterId.getLocalId(), 7L, 3L)[ CD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_86 $$ assertEquals(1L, merged.getLong(merged.position() + headerLength + stepLength + idLength + clockLength))[ FD ]
Line_2 $$ public void testMerge() -->Line_32 $$ left.writeGlobal(CounterId.fromInt(2), 2L, 2L)[ CD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_55 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(5), merged, headerLength + 4 * stepLength))[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_65 $$ assertEquals(30L, cc.total(merged))[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_21 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(5), merged, hd + 3 * stepLength))[ FD ]
Line_76 $$ merged = cc.merge(left.context, right.context)-->Line_80 $$ assertEquals(2, merged.getShort(merged.position()))[ FD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_81 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(1), merged, headerLength))[ FD ]
Line_60 $$ right = ContextState.allocate(1, 0, 0)-->Line_75 $$ right.writeRemote(CounterId.fromInt(2), 100L, 100L)[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_45 $$ assertEquals(1L, merged.getLong(merged.position() + headerLength + idLength + clockLength))[ FD ]
Line_2 $$ public void testMerge() -->Line_56 $$ assertEquals(5L, merged.getLong(merged.position() + headerLength + 4 * stepLength + idLength))[ CD ]
Line_13 $$ int hd = 4-->Line_27 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(1), merged, hd))[ FD ]
Line_3 $$ ContextState left = ContextState.allocate(0, 1, 3)-->Line_59 $$ left.writeGlobal(CounterId.fromInt(1), 10L, 20L)[ FD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_49 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(3), merged, headerLength + 2 * stepLength))[ FD ]
Line_2 $$ public void testMerge() -->Line_66 $$ assertEquals(1, merged.getShort(merged.position()))[ CD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_46 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(2), merged, headerLength + stepLength))[ FD ]
Line_2 $$ public void testMerge() -->Line_50 $$ assertEquals(6L, merged.getLong(merged.position() + headerLength + 2 * stepLength + idLength))[ CD ]
Line_2 $$ public void testMerge() -->Line_55 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(5), merged, headerLength + 4 * stepLength))[ CD ]
Line_2 $$ public void testMerge() -->Line_62 $$ merged = cc.merge(left.context, right.context)[ CD ]
Line_2 $$ public void testMerge() -->Line_63 $$ headerLength = headerSizeLength + headerEltLength[ CD ]
Line_3 $$ ContextState left = ContextState.allocate(0, 1, 3)-->Line_5 $$ left.writeRemote(CounterId.fromInt(2), 2L, 2L)[ FD ]
Line_8 $$ ContextState right = ContextState.allocate(0, 1, 2)-->Line_9 $$ right.writeRemote(CounterId.fromInt(4), 4L, 4L)[ FD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_51 $$ assertEquals(6L, merged.getLong(merged.position() + headerLength + 2 * stepLength + idLength + clockLength))[ FD ]
Line_3 $$ ContextState left = ContextState.allocate(0, 1, 3)-->Line_4 $$ left.writeRemote(CounterId.fromInt(1), 1L, 1L)[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_53 $$ assertEquals(4L, merged.getLong(merged.position() + headerLength + 3 * stepLength + idLength))[ FD ]
Line_8 $$ ContextState right = ContextState.allocate(0, 1, 2)-->Line_60 $$ right = ContextState.allocate(1, 0, 0)[ FD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_40 $$ assertEquals(18L, cc.total(merged))[ FD ]
Line_8 $$ ContextState right = ContextState.allocate(0, 1, 2)-->Line_73 $$ right = ContextState.allocate(0, 1, 1)[ FD ]
Line_2 $$ public void testMerge() -->Line_15 $$ assertTrue(Util.equalsCounterId(CounterId.getLocalId(), merged, hd + 4 * stepLength))[ CD ]
Line_2 $$ public void testMerge() -->Line_39 $$ assertEquals(headerSizeLength + 5 * headerEltLength + 5 * stepLength, merged.remaining())[ CD ]
Line_2 $$ public void testMerge() -->Line_41 $$ assertEquals(5, merged.getShort(merged.position()))[ CD ]
Line_34 $$ right = ContextState.allocate(3, 0, 0)-->Line_73 $$ right = ContextState.allocate(0, 1, 1)[ FD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_84 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(2), merged, headerLength + stepLength))[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_47 $$ assertEquals(2L, merged.getLong(merged.position() + headerLength + stepLength + idLength))[ FD ]
Line_2 $$ public void testMerge() -->Line_36 $$ right.writeGlobal(CounterId.fromInt(4), 4L, 4L)[ CD ]
Line_2 $$ public void testMerge() -->Line_44 $$ assertEquals(1L, merged.getLong(merged.position() + headerLength + idLength))[ CD ]
Line_3 $$ ContextState left = ContextState.allocate(0, 1, 3)-->Line_71 $$ left.writeGlobal(CounterId.fromInt(1), 1L, 1L)[ FD ]
Line_2 $$ public void testMerge() -->Line_78 $$ assertEquals(headerLength + 2 * stepLength, merged.remaining())[ CD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_85 $$ assertEquals(1L, merged.getLong(merged.position() + headerLength + stepLength + idLength))[ FD ]
Line_62 $$ merged = cc.merge(left.context, right.context)-->Line_76 $$ merged = cc.merge(left.context, right.context)[ FD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_85 $$ assertEquals(1L, merged.getLong(merged.position() + headerLength + stepLength + idLength))[ FD ]
Line_2 $$ public void testMerge() -->Line_86 $$ assertEquals(1L, merged.getLong(merged.position() + headerLength + stepLength + idLength + clockLength))[ CD ]
Line_2 $$ public void testMerge() -->Line_61 $$ right.writeGlobal(CounterId.fromInt(1), 10L, 30L)[ CD ]
Line_63 $$ headerLength = headerSizeLength + headerEltLength-->Line_81 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(1), merged, headerLength))[ FD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_48 $$ assertEquals(2L, merged.getLong(merged.position() + headerLength + stepLength + idLength + clockLength))[ FD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_50 $$ assertEquals(6L, merged.getLong(merged.position() + headerLength + 2 * stepLength + idLength))[ FD ]
Line_60 $$ right = ContextState.allocate(1, 0, 0)-->Line_74 $$ right.writeLocal(CounterId.fromInt(1), 100L, 100L)[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_23 $$ assertEquals(5L, merged.getLong(merged.position() + hd + 3 * stepLength + idLength + clockLength))[ FD ]
Line_2 $$ public void testMerge() -->Line_27 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(1), merged, hd))[ CD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_24 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(2), merged, hd + stepLength))[ FD ]
Line_2 $$ public void testMerge() -->Line_25 $$ assertEquals(2L, merged.getLong(merged.position() + hd + stepLength + idLength))[ CD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_43 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(1), merged, headerLength))[ FD ]
Line_2 $$ public void testMerge() -->Line_47 $$ assertEquals(2L, merged.getLong(merged.position() + headerLength + stepLength + idLength))[ CD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_82 $$ assertEquals(1L, merged.getLong(merged.position() + headerLength + idLength))[ FD ]
Line_58 $$ left = ContextState.allocate(1, 0, 0)-->Line_59 $$ left.writeGlobal(CounterId.fromInt(1), 10L, 20L)[ FD ]
Line_42 $$ int headerLength = headerSizeLength + 5 * headerEltLength-->Line_67 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(1), merged, headerLength))[ FD ]
Line_2 $$ public void testMerge() -->Line_52 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(4), merged, headerLength + 3 * stepLength))[ CD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_48 $$ assertEquals(2L, merged.getLong(merged.position() + headerLength + stepLength + idLength + clockLength))[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_52 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(4), merged, headerLength + 3 * stepLength))[ FD ]
Line_62 $$ merged = cc.merge(left.context, right.context)-->Line_69 $$ assertEquals(30L, merged.getLong(merged.position() + headerLength + idLength + clockLength))[ FD ]
Line_60 $$ right = ContextState.allocate(1, 0, 0)-->Line_73 $$ right = ContextState.allocate(0, 1, 1)[ FD ]
Line_62 $$ merged = cc.merge(left.context, right.context)-->Line_83 $$ assertEquals(1L, merged.getLong(merged.position() + headerLength + idLength + clockLength))[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_57 $$ assertEquals(5L, merged.getLong(merged.position() + headerLength + 4 * stepLength + idLength + clockLength))[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_66 $$ assertEquals(1, merged.getShort(merged.position()))[ FD ]
Line_2 $$ public void testMerge() -->Line_14 $$ assertEquals(hd + 5 * stepLength, merged.remaining())[ CD ]
Line_62 $$ merged = cc.merge(left.context, right.context)-->Line_81 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(1), merged, headerLength))[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_16 $$ assertEquals(9L, merged.getLong(merged.position() + hd + 4 * stepLength + idLength))[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_54 $$ assertEquals(4L, merged.getLong(merged.position() + headerLength + 3 * stepLength + idLength + clockLength))[ FD ]
Line_30 $$ left = ContextState.allocate(3, 0, 0)-->Line_70 $$ left = ContextState.allocate(2, 0, 0)[ FD ]
Line_2 $$ public void testMerge() -->Line_38 $$ merged = cc.merge(left.context, right.context)[ CD ]
Line_2 $$ public void testMerge() -->Line_19 $$ assertEquals(6L, merged.getLong(merged.position() + hd + 2 * stepLength + idLength))[ CD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_69 $$ assertEquals(30L, merged.getLong(merged.position() + headerLength + idLength + clockLength))[ FD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_69 $$ assertEquals(30L, merged.getLong(merged.position() + headerLength + idLength + clockLength))[ FD ]
Line_34 $$ right = ContextState.allocate(3, 0, 0)-->Line_35 $$ right.writeGlobal(CounterId.fromInt(3), 6L, 6L)[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_41 $$ assertEquals(5, merged.getShort(merged.position()))[ FD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_79 $$ assertEquals(2L, cc.total(merged))[ FD ]
Line_62 $$ merged = cc.merge(left.context, right.context)-->Line_82 $$ assertEquals(1L, merged.getLong(merged.position() + headerLength + idLength))[ FD ]
Line_2 $$ public void testMerge() -->Line_80 $$ assertEquals(2, merged.getShort(merged.position()))[ CD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_28 $$ assertEquals(1L, merged.getLong(merged.position() + hd + idLength))[ FD ]
Line_2 $$ public void testMerge() -->Line_34 $$ right = ContextState.allocate(3, 0, 0)[ CD ]
Line_76 $$ merged = cc.merge(left.context, right.context)-->Line_84 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(2), merged, headerLength + stepLength))[ FD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_57 $$ assertEquals(5L, merged.getLong(merged.position() + headerLength + 4 * stepLength + idLength + clockLength))[ FD ]
Line_34 $$ right = ContextState.allocate(3, 0, 0)-->Line_75 $$ right.writeRemote(CounterId.fromInt(2), 100L, 100L)[ FD ]
Line_62 $$ merged = cc.merge(left.context, right.context)-->Line_68 $$ assertEquals(10L, merged.getLong(merged.position() + headerLength + idLength))[ FD ]
Line_2 $$ public void testMerge() -->Line_6 $$ left.writeRemote(CounterId.fromInt(4), 6L, 3L)[ CD ]
Line_2 $$ public void testMerge() -->Line_28 $$ assertEquals(1L, merged.getLong(merged.position() + hd + idLength))[ CD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_49 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(3), merged, headerLength + 2 * stepLength))[ FD ]
Line_2 $$ public void testMerge() -->Line_37 $$ right.writeGlobal(CounterId.fromInt(5), 5L, 5L)[ CD ]
Line_2 $$ public void testMerge() -->Line_33 $$ left.writeGlobal(CounterId.fromInt(3), 3L, 3L)[ CD ]
Line_42 $$ int headerLength = headerSizeLength + 5 * headerEltLength-->Line_81 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(1), merged, headerLength))[ FD ]
Line_62 $$ merged = cc.merge(left.context, right.context)-->Line_64 $$ assertEquals(headerLength + stepLength, merged.remaining())[ FD ]
Line_62 $$ merged = cc.merge(left.context, right.context)-->Line_67 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(1), merged, headerLength))[ FD ]
Line_8 $$ ContextState right = ContextState.allocate(0, 1, 2)-->Line_35 $$ right.writeGlobal(CounterId.fromInt(3), 6L, 6L)[ FD ]
Line_2 $$ public void testMerge() -->Line_16 $$ assertEquals(9L, merged.getLong(merged.position() + hd + 4 * stepLength + idLength))[ CD ]
Line_2 $$ public void testMerge() -->Line_13 $$ int hd = 4[ CD ]
Line_3 $$ ContextState left = ContextState.allocate(0, 1, 3)-->Line_30 $$ left = ContextState.allocate(3, 0, 0)[ FD ]
Line_3 $$ ContextState left = ContextState.allocate(0, 1, 3)-->Line_7 $$ left.writeLocal(CounterId.getLocalId(), 7L, 3L)[ FD ]
Line_2 $$ public void testMerge() -->Line_74 $$ right.writeLocal(CounterId.fromInt(1), 100L, 100L)[ CD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_43 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(1), merged, headerLength))[ FD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_56 $$ assertEquals(5L, merged.getLong(merged.position() + headerLength + 4 * stepLength + idLength))[ FD ]
Line_62 $$ merged = cc.merge(left.context, right.context)-->Line_84 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(2), merged, headerLength + stepLength))[ FD ]
Line_73 $$ right = ContextState.allocate(0, 1, 1)-->Line_74 $$ right.writeLocal(CounterId.fromInt(1), 100L, 100L)[ FD ]
Line_62 $$ merged = cc.merge(left.context, right.context)-->Line_86 $$ assertEquals(1L, merged.getLong(merged.position() + headerLength + stepLength + idLength + clockLength))[ FD ]
Line_3 $$ ContextState left = ContextState.allocate(0, 1, 3)-->Line_58 $$ left = ContextState.allocate(1, 0, 0)[ FD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_65 $$ assertEquals(30L, cc.total(merged))[ FD ]
Line_2 $$ public void testMerge() -->Line_67 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(1), merged, headerLength))[ CD ]
Line_76 $$ merged = cc.merge(left.context, right.context)-->Line_83 $$ assertEquals(1L, merged.getLong(merged.position() + headerLength + idLength + clockLength))[ FD ]
Line_2 $$ public void testMerge() -->Line_76 $$ merged = cc.merge(left.context, right.context)[ CD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_56 $$ assertEquals(5L, merged.getLong(merged.position() + headerLength + 4 * stepLength + idLength))[ FD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_62 $$ merged = cc.merge(left.context, right.context)[ FD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_66 $$ assertEquals(1, merged.getShort(merged.position()))[ FD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_64 $$ assertEquals(headerLength + stepLength, merged.remaining())[ FD ]
Line_2 $$ public void testMerge() -->Line_71 $$ left.writeGlobal(CounterId.fromInt(1), 1L, 1L)[ CD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_80 $$ assertEquals(2, merged.getShort(merged.position()))[ FD ]
Line_2 $$ public void testMerge() -->Line_30 $$ left = ContextState.allocate(3, 0, 0)[ CD ]
Line_2 $$ public void testMerge() -->Line_53 $$ assertEquals(4L, merged.getLong(merged.position() + headerLength + 3 * stepLength + idLength))[ CD ]
Line_2 $$ public void testMerge() -->Line_68 $$ assertEquals(10L, merged.getLong(merged.position() + headerLength + idLength))[ CD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_76 $$ merged = cc.merge(left.context, right.context)[ FD ]
Line_2 $$ public void testMerge() -->Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)[ CD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_67 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(1), merged, headerLength))[ FD ]
Line_73 $$ right = ContextState.allocate(0, 1, 1)-->Line_75 $$ right.writeRemote(CounterId.fromInt(2), 100L, 100L)[ FD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_80 $$ assertEquals(2, merged.getShort(merged.position()))[ FD ]
Line_2 $$ public void testMerge() -->Line_60 $$ right = ContextState.allocate(1, 0, 0)[ CD ]
Line_3 $$ ContextState left = ContextState.allocate(0, 1, 3)-->Line_32 $$ left.writeGlobal(CounterId.fromInt(2), 2L, 2L)[ FD ]
Line_8 $$ ContextState right = ContextState.allocate(0, 1, 2)-->Line_10 $$ right.writeRemote(CounterId.fromInt(5), 5L, 5L)[ FD ]
Line_2 $$ public void testMerge() -->Line_5 $$ left.writeRemote(CounterId.fromInt(2), 2L, 2L)[ CD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_25 $$ assertEquals(2L, merged.getLong(merged.position() + hd + stepLength + idLength))[ FD ]
Line_2 $$ public void testMerge() -->Line_21 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(5), merged, hd + 3 * stepLength))[ CD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_82 $$ assertEquals(1L, merged.getLong(merged.position() + headerLength + idLength))[ FD ]
Line_3 $$ ContextState left = ContextState.allocate(0, 1, 3)-->Line_33 $$ left.writeGlobal(CounterId.fromInt(3), 3L, 3L)[ FD ]
Line_2 $$ public void testMerge() -->Line_29 $$ assertEquals(1L, merged.getLong(merged.position() + hd + idLength + clockLength))[ CD ]
Line_2 $$ public void testMerge() -->Line_8 $$ ContextState right = ContextState.allocate(0, 1, 2)[ CD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_39 $$ assertEquals(headerSizeLength + 5 * headerEltLength + 5 * stepLength, merged.remaining())[ FD ]
Line_76 $$ merged = cc.merge(left.context, right.context)-->Line_86 $$ assertEquals(1L, merged.getLong(merged.position() + headerLength + stepLength + idLength + clockLength))[ FD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_41 $$ assertEquals(5, merged.getShort(merged.position()))[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_14 $$ assertEquals(hd + 5 * stepLength, merged.remaining())[ FD ]
Line_2 $$ public void testMerge() -->Line_20 $$ assertEquals(3L, merged.getLong(merged.position() + hd + 2 * stepLength + idLength + clockLength))[ CD ]
Line_8 $$ ContextState right = ContextState.allocate(0, 1, 2)-->Line_61 $$ right.writeGlobal(CounterId.fromInt(1), 10L, 30L)[ FD ]
Line_2 $$ public void testMerge() -->Line_72 $$ left.writeGlobal(CounterId.fromInt(2), 1L, 1L)[ CD ]
Line_3 $$ ContextState left = ContextState.allocate(0, 1, 3)-->Line_72 $$ left.writeGlobal(CounterId.fromInt(2), 1L, 1L)[ FD ]
Line_62 $$ merged = cc.merge(left.context, right.context)-->Line_78 $$ assertEquals(headerLength + 2 * stepLength, merged.remaining())[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_50 $$ assertEquals(6L, merged.getLong(merged.position() + headerLength + 2 * stepLength + idLength))[ FD ]
Line_2 $$ public void testMerge() -->Line_70 $$ left = ContextState.allocate(2, 0, 0)[ CD ]
Line_58 $$ left = ContextState.allocate(1, 0, 0)-->Line_71 $$ left.writeGlobal(CounterId.fromInt(1), 1L, 1L)[ FD ]
Line_8 $$ ContextState right = ContextState.allocate(0, 1, 2)-->Line_34 $$ right = ContextState.allocate(3, 0, 0)[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_40 $$ assertEquals(18L, cc.total(merged))[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_55 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(5), merged, headerLength + 4 * stepLength))[ FD ]
Line_3 $$ ContextState left = ContextState.allocate(0, 1, 3)-->Line_70 $$ left = ContextState.allocate(2, 0, 0)[ FD ]
Line_70 $$ left = ContextState.allocate(2, 0, 0)-->Line_71 $$ left.writeGlobal(CounterId.fromInt(1), 1L, 1L)[ FD ]
Line_2 $$ public void testMerge() -->Line_35 $$ right.writeGlobal(CounterId.fromInt(3), 6L, 6L)[ CD ]
Line_2 $$ public void testMerge() -->Line_69 $$ assertEquals(30L, merged.getLong(merged.position() + headerLength + idLength + clockLength))[ CD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_39 $$ assertEquals(headerSizeLength + 5 * headerEltLength + 5 * stepLength, merged.remaining())[ FD ]
Line_2 $$ public void testMerge() -->Line_42 $$ int headerLength = headerSizeLength + 5 * headerEltLength[ CD ]
Line_2 $$ public void testMerge() -->Line_81 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(1), merged, headerLength))[ CD ]
Line_34 $$ right = ContextState.allocate(3, 0, 0)-->Line_60 $$ right = ContextState.allocate(1, 0, 0)[ FD ]
Line_76 $$ merged = cc.merge(left.context, right.context)-->Line_79 $$ assertEquals(2L, cc.total(merged))[ FD ]
Line_2 $$ public void testMerge() -->Line_83 $$ assertEquals(1L, merged.getLong(merged.position() + headerLength + idLength + clockLength))[ CD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_18 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(4), merged, hd + 2 * stepLength))[ FD ]
Line_2 $$ public void testMerge() -->Line_64 $$ assertEquals(headerLength + stepLength, merged.remaining())[ CD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_81 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(1), merged, headerLength))[ FD ]
Line_8 $$ ContextState right = ContextState.allocate(0, 1, 2)-->Line_37 $$ right.writeGlobal(CounterId.fromInt(5), 5L, 5L)[ FD ]
Line_62 $$ merged = cc.merge(left.context, right.context)-->Line_65 $$ assertEquals(30L, cc.total(merged))[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_15 $$ assertTrue(Util.equalsCounterId(CounterId.getLocalId(), merged, hd + 4 * stepLength))[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_76 $$ merged = cc.merge(left.context, right.context)[ FD ]
Line_2 $$ public void testMerge() -->Line_31 $$ left.writeGlobal(CounterId.fromInt(1), 1L, 1L)[ CD ]
Line_2 $$ public void testMerge() -->Line_57 $$ assertEquals(5L, merged.getLong(merged.position() + headerLength + 4 * stepLength + idLength + clockLength))[ CD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_67 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(1), merged, headerLength))[ FD ]
Line_2 $$ public void testMerge() -->Line_58 $$ left = ContextState.allocate(1, 0, 0)[ CD ]
Line_30 $$ left = ContextState.allocate(3, 0, 0)-->Line_59 $$ left.writeGlobal(CounterId.fromInt(1), 10L, 20L)[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_64 $$ assertEquals(headerLength + stepLength, merged.remaining())[ FD ]
Line_34 $$ right = ContextState.allocate(3, 0, 0)-->Line_37 $$ right.writeGlobal(CounterId.fromInt(5), 5L, 5L)[ FD ]
Line_2 $$ public void testMerge() -->Line_40 $$ assertEquals(18L, cc.total(merged))[ CD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_17 $$ assertEquals(12L, merged.getLong(merged.position() + hd + 4 * stepLength + idLength + clockLength))[ FD ]
Line_76 $$ merged = cc.merge(left.context, right.context)-->Line_85 $$ assertEquals(1L, merged.getLong(merged.position() + headerLength + stepLength + idLength))[ FD ]
Line_63 $$ headerLength = headerSizeLength + headerEltLength-->Line_77 $$ headerLength = headerSizeLength + 2 * headerEltLength[ FD ]
Line_2 $$ public void testMerge() -->Line_24 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(2), merged, hd + stepLength))[ CD ]
Line_2 $$ public void testMerge() -->Line_48 $$ assertEquals(2L, merged.getLong(merged.position() + headerLength + stepLength + idLength + clockLength))[ CD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_27 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(1), merged, hd))[ FD ]
Line_8 $$ ContextState right = ContextState.allocate(0, 1, 2)-->Line_11 $$ right.writeLocal(CounterId.getLocalId(), 2L, 9L)[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_29 $$ assertEquals(1L, merged.getLong(merged.position() + hd + idLength + clockLength))[ FD ]
Line_8 $$ ContextState right = ContextState.allocate(0, 1, 2)-->Line_75 $$ right.writeRemote(CounterId.fromInt(2), 100L, 100L)[ FD ]
Line_2 $$ public void testMerge() -->Line_11 $$ right.writeLocal(CounterId.getLocalId(), 2L, 9L)[ CD ]
Line_2 $$ public void testMerge() -->Line_9 $$ right.writeRemote(CounterId.fromInt(4), 4L, 4L)[ CD ]
Line_34 $$ right = ContextState.allocate(3, 0, 0)-->Line_61 $$ right.writeGlobal(CounterId.fromInt(1), 10L, 30L)[ FD ]
Line_2 $$ public void testMerge() -->Line_43 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(1), merged, headerLength))[ CD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_78 $$ assertEquals(headerLength + 2 * stepLength, merged.remaining())[ FD ]
Line_62 $$ merged = cc.merge(left.context, right.context)-->Line_79 $$ assertEquals(2L, cc.total(merged))[ FD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_86 $$ assertEquals(1L, merged.getLong(merged.position() + headerLength + stepLength + idLength + clockLength))[ FD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_52 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(4), merged, headerLength + 3 * stepLength))[ FD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_53 $$ assertEquals(4L, merged.getLong(merged.position() + headerLength + 3 * stepLength + idLength))[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_38 $$ merged = cc.merge(left.context, right.context)[ FD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_26 $$ assertEquals(2L, merged.getLong(merged.position() + hd + stepLength + idLength + clockLength))[ FD ]
Line_62 $$ merged = cc.merge(left.context, right.context)-->Line_80 $$ assertEquals(2, merged.getShort(merged.position()))[ FD ]
Line_30 $$ left = ContextState.allocate(3, 0, 0)-->Line_31 $$ left.writeGlobal(CounterId.fromInt(1), 1L, 1L)[ FD ]
Line_2 $$ public void testMerge() -->Line_84 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(2), merged, headerLength + stepLength))[ CD ]
Line_2 $$ public void testMerge() -->Line_26 $$ assertEquals(2L, merged.getLong(merged.position() + hd + stepLength + idLength + clockLength))[ CD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_79 $$ assertEquals(2L, cc.total(merged))[ FD ]
Line_30 $$ left = ContextState.allocate(3, 0, 0)-->Line_33 $$ left.writeGlobal(CounterId.fromInt(3), 3L, 3L)[ FD ]
Line_76 $$ merged = cc.merge(left.context, right.context)-->Line_81 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(1), merged, headerLength))[ FD ]
Line_2 $$ public void testMerge() -->Line_82 $$ assertEquals(1L, merged.getLong(merged.position() + headerLength + idLength))[ CD ]
Line_2 $$ public void testMerge() -->Line_10 $$ right.writeRemote(CounterId.fromInt(5), 5L, 5L)[ CD ]
Line_38 $$ merged = cc.merge(left.context, right.context)-->Line_45 $$ assertEquals(1L, merged.getLong(merged.position() + headerLength + idLength + clockLength))[ FD ]
Line_2 $$ public void testMerge() -->Line_85 $$ assertEquals(1L, merged.getLong(merged.position() + headerLength + stepLength + idLength))[ CD ]
Line_2 $$ public void testMerge() -->Line_75 $$ right.writeRemote(CounterId.fromInt(2), 100L, 100L)[ CD ]
Line_2 $$ public void testMerge() -->Line_49 $$ assertTrue(Util.equalsCounterId(CounterId.fromInt(3), merged, headerLength + 2 * stepLength))[ CD ]
Line_12 $$ ByteBuffer merged = cc.merge(left.context, right.context)-->Line_20 $$ assertEquals(3L, merged.getLong(merged.position() + hd + 2 * stepLength + idLength + clockLength))[ FD ]
Line_3 $$ ContextState left = ContextState.allocate(0, 1, 3)-->Line_6 $$ left.writeRemote(CounterId.fromInt(4), 6L, 3L)[ FD ]
Line_2 $$ public void testMerge() -->Line_79 $$ assertEquals(2L, cc.total(merged))[ CD ]
