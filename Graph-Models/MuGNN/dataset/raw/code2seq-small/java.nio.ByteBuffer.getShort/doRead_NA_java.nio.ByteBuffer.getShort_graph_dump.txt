Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_32 $$ curPacketBuf.get(headerBuf)[ CD ]
Line_31 $$ byte[] headerBuf = new byte[headerLen]-->Line_36 $$ curHeader.setFieldsFromData(dataPlusChecksumLen, headerBuf)[ FD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_27 $$ curPacketBuf.limit(PacketHeader.PKT_LENGTHS_LEN + dataPlusChecksumLen + headerLen)[ CD ]
Line_13 $$ int headerLen = curPacketBuf.getShort()-->Line_41 $$ reslicePacket(headerLen, checksumLen, curHeader.getDataLen())[ FD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_6 $$ doReadFully(ch, in, curPacketBuf)[ CD ]
Line_37 $$ int checksumLen = dataPlusChecksumLen - curHeader.getDataLen()-->Line_41 $$ reslicePacket(headerLen, checksumLen, curHeader.getDataLen())[ FD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_36 $$ curHeader.setFieldsFromData(dataPlusChecksumLen, headerBuf)[ CD ]
Line_8 $$ int payloadLen = curPacketBuf.getInt()-->Line_9 $$ if (payloadLen < Ints.BYTES) [ FD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_12 $$ int dataPlusChecksumLen = payloadLen - Ints.BYTES[ CD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_38 $$ if (checksumLen < 0) [ CD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_25 $$ curPacketBuf.clear()[ CD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_7 $$ curPacketBuf.flip()[ CD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_8 $$ int payloadLen = curPacketBuf.getInt()[ CD ]
Line_37 $$ int checksumLen = dataPlusChecksumLen - curHeader.getDataLen()-->Line_38 $$ if (checksumLen < 0) [ FD ]
Line_31 $$ byte[] headerBuf = new byte[headerLen]-->Line_32 $$ curPacketBuf.get(headerBuf)[ FD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_21 $$ if (totalLen < 0 || totalLen > MAX_PACKET_SIZE) [ CD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_13 $$ int headerLen = curPacketBuf.getShort()[ CD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_6 $$ doReadFully(ch, in, curPacketBuf)[ FD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_30 $$ curPacketBuf.position(PacketHeader.PKT_LENGTHS_LEN)[ CD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_33 $$ if (curHeader == null) [ CD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_37 $$ int checksumLen = dataPlusChecksumLen - curHeader.getDataLen()[ CD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_4 $$ curPacketBuf.clear()[ CD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_31 $$ byte[] headerBuf = new byte[headerLen][ CD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_20 $$ int totalLen = payloadLen + headerLen[ CD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_5 $$ curPacketBuf.limit(PacketHeader.PKT_LENGTHS_LEN)[ CD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_17 $$ if (LOG.isTraceEnabled()) [ CD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_14 $$ if (headerLen < 0) [ CD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_3 $$ Preconditions.checkState(curHeader == null || !curHeader.isLastPacketInBlock())[ CD ]
Line_17 $$ if (LOG.isTraceEnabled()) -->Line_18 $$ LOG.trace("readNextPacket: dataPlusChecksumLen = " + dataPlusChecksumLen + " headerLen = " + headerLen)[ CD ]
Line_13 $$ int headerLen = curPacketBuf.getShort()-->Line_14 $$ if (headerLen < 0) [ FD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_28 $$ doReadFully(ch, in, curPacketBuf)[ CD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_28 $$ doReadFully(ch, in, curPacketBuf)[ FD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_41 $$ reslicePacket(headerLen, checksumLen, curHeader.getDataLen())[ CD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_29 $$ curPacketBuf.flip()[ CD ]
Line_12 $$ int dataPlusChecksumLen = payloadLen - Ints.BYTES-->Line_36 $$ curHeader.setFieldsFromData(dataPlusChecksumLen, headerBuf)[ FD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_26 $$ curPacketBuf.position(PacketHeader.PKT_LENGTHS_LEN)[ CD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_9 $$ if (payloadLen < Ints.BYTES) [ CD ]
Line_2 $$ private void doRead(ReadableByteChannel ch, InputStream in) throws IOException -->Line_24 $$ reallocPacketBuf(PacketHeader.PKT_LENGTHS_LEN + dataPlusChecksumLen + headerLen)[ CD ]
