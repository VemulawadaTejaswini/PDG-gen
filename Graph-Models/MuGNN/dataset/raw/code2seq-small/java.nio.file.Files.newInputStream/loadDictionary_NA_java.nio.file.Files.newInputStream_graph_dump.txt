Line_6 $$ Path dicDir = hunspellDir.resolve(locale)-->Line_10 $$ nodeSettings = loadDictionarySettings(dicDir, nodeSettings.getByPrefix("indices.analysis.hunspell.dictionary." + locale + "."))[ FD ]
Line_2 $$ private Dictionary loadDictionary(String locale, Settings nodeSettings, Environment env) throws Exception -->Line_10 $$ nodeSettings = loadDictionarySettings(dicDir, nodeSettings.getByPrefix("indices.analysis.hunspell.dictionary." + locale + "."))[ FD ]
Line_2 $$ private Dictionary loadDictionary(String locale, Settings nodeSettings, Environment env) throws Exception -->Line_16 $$ if (affixFiles.length != 1) [ CD ]
Line_2 $$ private Dictionary loadDictionary(String locale, Settings nodeSettings, Environment env) throws Exception -->Line_10 $$ nodeSettings = loadDictionarySettings(dicDir, nodeSettings.getByPrefix("indices.analysis.hunspell.dictionary." + locale + "."))[ CD ]
Line_2 $$ private Dictionary loadDictionary(String locale, Settings nodeSettings, Environment env) throws Exception -->Line_21 $$ List<InputStream> dicStreams = new ArrayList(dicFiles.length)[ CD ]
Line_2 $$ private Dictionary loadDictionary(String locale, Settings nodeSettings, Environment env) throws Exception -->Line_13 $$ if (affixFiles.length == 0) [ CD ]
Line_2 $$ private Dictionary loadDictionary(String locale, Settings nodeSettings, Environment env) throws Exception -->Line_14 $$ throw new ElasticsearchException(String.format(Locale.ROOT, "Missing affix file for hunspell dictionary [%s]", locale))[ FD ]
Line_21 $$ List<InputStream> dicStreams = new ArrayList(dicFiles.length)-->Line_33 $$ IOUtils.close(dicStreams)[ FD ]
Line_2 $$ private Dictionary loadDictionary(String locale, Settings nodeSettings, Environment env) throws Exception -->Line_20 $$ Path[] dicFiles = FileSystemUtils.files(dicDir, "*.dic")[ CD ]
Line_21 $$ List<InputStream> dicStreams = new ArrayList(dicFiles.length)-->Line_24 $$ dicStreams.add(Files.newInputStream(dicFiles[i]))[ FD ]
Line_19 $$ InputStream affixStream = null-->Line_26 $$ affixStream = Files.newInputStream(affixFiles[0])[ FD ]
Line_6 $$ Path dicDir = hunspellDir.resolve(locale)-->Line_12 $$ Path[] affixFiles = FileSystemUtils.files(dicDir, "*.aff")[ FD ]
Line_2 $$ private Dictionary loadDictionary(String locale, Settings nodeSettings, Environment env) throws Exception -->Line_6 $$ Path dicDir = hunspellDir.resolve(locale)[ CD ]
Line_2 $$ private Dictionary loadDictionary(String locale, Settings nodeSettings, Environment env) throws Exception -->Line_11 $$ boolean ignoreCase = nodeSettings.getAsBoolean("ignore_case", defaultIgnoreCase)[ FD ]
Line_3 $$ if (logger.isDebugEnabled()) -->Line_4 $$ logger.debug("Loading hunspell dictionary [[ CD ]
Line_2 $$ private Dictionary loadDictionary(String locale, Settings nodeSettings, Environment env) throws Exception -->Line_19 $$ InputStream affixStream = null[ CD ]
Line_23 $$ for (int i = 0; i < dicFiles.length; i++) -->Line_24 $$ dicStreams.add(Files.newInputStream(dicFiles[i]))[ CD ]
Line_2 $$ private Dictionary loadDictionary(String locale, Settings nodeSettings, Environment env) throws Exception -->Line_7 $$ if (FileSystemUtils.isAccessibleDirectory(dicDir, logger) == false) [ CD ]
Line_2 $$ private Dictionary loadDictionary(String locale, Settings nodeSettings, Environment env) throws Exception -->Line_11 $$ boolean ignoreCase = nodeSettings.getAsBoolean("ignore_case", defaultIgnoreCase)[ CD ]
Line_19 $$ InputStream affixStream = null-->Line_32 $$ IOUtils.close(affixStream)[ FD ]
Line_2 $$ private Dictionary loadDictionary(String locale, Settings nodeSettings, Environment env) throws Exception -->Line_4 $$ logger.debug("Loading hunspell dictionary [[ FD ]
Line_6 $$ Path dicDir = hunspellDir.resolve(locale)-->Line_20 $$ Path[] dicFiles = FileSystemUtils.files(dicDir, "*.dic")[ FD ]
Line_2 $$ private Dictionary loadDictionary(String locale, Settings nodeSettings, Environment env) throws Exception -->Line_6 $$ Path dicDir = hunspellDir.resolve(locale)[ FD ]
Line_6 $$ Path dicDir = hunspellDir.resolve(locale)-->Line_7 $$ if (FileSystemUtils.isAccessibleDirectory(dicDir, logger) == false) [ FD ]
Line_2 $$ private Dictionary loadDictionary(String locale, Settings nodeSettings, Environment env) throws Exception -->Line_17 $$ throw new ElasticsearchException(String.format(Locale.ROOT, "Too many affix files exist for hunspell dictionary [%s]", locale))[ FD ]
Line_26 $$ affixStream = Files.newInputStream(affixFiles[0])-->Line_32 $$ IOUtils.close(affixStream)[ FD ]
Line_10 $$ nodeSettings = loadDictionarySettings(dicDir, nodeSettings.getByPrefix("indices.analysis.hunspell.dictionary." + locale + "."))-->Line_11 $$ boolean ignoreCase = nodeSettings.getAsBoolean("ignore_case", defaultIgnoreCase)[ FD ]
Line_2 $$ private Dictionary loadDictionary(String locale, Settings nodeSettings, Environment env) throws Exception -->Line_29 $$ logger.error("Could not load hunspell dictionary [[ FD ]
Line_2 $$ private Dictionary loadDictionary(String locale, Settings nodeSettings, Environment env) throws Exception -->Line_3 $$ if (logger.isDebugEnabled()) [ CD ]
Line_2 $$ private Dictionary loadDictionary(String locale, Settings nodeSettings, Environment env) throws Exception -->Line_8 $$ throw new ElasticsearchException(String.format(Locale.ROOT, "Could not find hunspell dictionary [%s]", locale))[ FD ]
Line_2 $$ private Dictionary loadDictionary(String locale, Settings nodeSettings, Environment env) throws Exception -->Line_12 $$ Path[] affixFiles = FileSystemUtils.files(dicDir, "*.aff")[ CD ]
