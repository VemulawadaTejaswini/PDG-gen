Line_2 $$ public void testUpgradeOldMapping() throws IOException, ExecutionException, InterruptedException -->Line_7 $$ Path backwardsIndex = getBwcIndicesPath().resolve(indexName + ".zip")[ CD ]
Line_3 $$ final String indexName = "index-mapper-size-2.0.0"-->Line_24 $$ final SearchResponse countResponse = client().prepareSearch(indexName).setSize(0).get()[ FD ]
Line_2 $$ public void testUpgradeOldMapping() throws IOException, ExecutionException, InterruptedException -->Line_16 $$ assertEquals(1, nodePaths.length)[ CD ]
Line_14 $$ final String node = internalCluster().startDataOnlyNode(settings)-->Line_15 $$ Path[] nodePaths = internalCluster().getInstance(NodeEnvironment.class, node).nodeDataPaths()[ FD ]
Line_2 $$ public void testUpgradeOldMapping() throws IOException, ExecutionException, InterruptedException -->Line_14 $$ final String node = internalCluster().startDataOnlyNode(settings)[ CD ]
Line_6 $$ Path unzipDataDir = unzipDir.resolve("data")-->Line_11 $$ assertTrue(Files.exists(unzipDataDir))[ FD ]
Line_2 $$ public void testUpgradeOldMapping() throws IOException, ExecutionException, InterruptedException -->Line_18 $$ assertFalse(Files.exists(dataPath))[ CD ]
Line_2 $$ public void testUpgradeOldMapping() throws IOException, ExecutionException, InterruptedException -->Line_11 $$ assertTrue(Files.exists(unzipDataDir))[ CD ]
Line_2 $$ public void testUpgradeOldMapping() throws IOException, ExecutionException, InterruptedException -->Line_21 $$ master.get()[ CD ]
Line_2 $$ public void testUpgradeOldMapping() throws IOException, ExecutionException, InterruptedException -->Line_12 $$ Path dataPath = createTempDir()[ CD ]
Line_8 $$ try (InputStream stream = Files.newInputStream(backwardsIndex)) -->Line_9 $$ TestUtil.unzip(stream, unzipDir)[ FD ]
Line_5 $$ Path unzipDir = createTempDir()-->Line_6 $$ Path unzipDataDir = unzipDir.resolve("data")[ FD ]
Line_3 $$ final String indexName = "index-mapper-size-2.0.0"-->Line_26 $$ final SearchResponse sizeResponse = client().prepareSearch(indexName).addField("_source").addField("_size").get()[ FD ]
Line_29 $$ String source = hit.getSourceAsString()-->Line_35 $$ assertEquals(source.length(), size.longValue())[ FD ]
Line_19 $$ Path src = unzipDataDir.resolve(indexName + "/nodes/0/indices")-->Line_20 $$ Files.move(src, dataPath)[ FD ]
Line_12 $$ Path dataPath = createTempDir()-->Line_18 $$ assertFalse(Files.exists(dataPath))[ FD ]
Line_2 $$ public void testUpgradeOldMapping() throws IOException, ExecutionException, InterruptedException -->Line_4 $$ InternalTestCluster.Async<String> master = internalCluster().startNodeAsync()[ CD ]
Line_28 $$ for (SearchHit hit : sizeResponse.getHits().getHits()) -->Line_31 $$ Map<String, SearchHitField> fields = hit.getFields()[ FD ]
Line_26 $$ final SearchResponse sizeResponse = client().prepareSearch(indexName).addField("_source").addField("_size").get()-->Line_27 $$ ElasticsearchAssertions.assertHitCount(sizeResponse, 3L)[ FD ]
Line_2 $$ public void testUpgradeOldMapping() throws IOException, ExecutionException, InterruptedException -->Line_6 $$ Path unzipDataDir = unzipDir.resolve("data")[ CD ]
Line_2 $$ public void testUpgradeOldMapping() throws IOException, ExecutionException, InterruptedException -->Line_5 $$ Path unzipDir = createTempDir()[ CD ]
Line_2 $$ public void testUpgradeOldMapping() throws IOException, ExecutionException, InterruptedException -->Line_19 $$ Path src = unzipDataDir.resolve(indexName + "/nodes/0/indices")[ CD ]
Line_2 $$ public void testUpgradeOldMapping() throws IOException, ExecutionException, InterruptedException -->Line_25 $$ ElasticsearchAssertions.assertHitCount(countResponse, 3L)[ CD ]
Line_2 $$ public void testUpgradeOldMapping() throws IOException, ExecutionException, InterruptedException -->Line_13 $$ Settings settings = Settings.builder().put("path.data", dataPath).build()[ CD ]
Line_2 $$ public void testUpgradeOldMapping() throws IOException, ExecutionException, InterruptedException -->Line_20 $$ Files.move(src, dataPath)[ CD ]
Line_6 $$ Path unzipDataDir = unzipDir.resolve("data")-->Line_19 $$ Path src = unzipDataDir.resolve(indexName + "/nodes/0/indices")[ FD ]
Line_24 $$ final SearchResponse countResponse = client().prepareSearch(indexName).setSize(0).get()-->Line_25 $$ ElasticsearchAssertions.assertHitCount(countResponse, 3L)[ FD ]
Line_3 $$ final String indexName = "index-mapper-size-2.0.0"-->Line_23 $$ ensureGreen(indexName)[ FD ]
Line_2 $$ public void testUpgradeOldMapping() throws IOException, ExecutionException, InterruptedException -->Line_15 $$ Path[] nodePaths = internalCluster().getInstance(NodeEnvironment.class, node).nodeDataPaths()[ CD ]
Line_2 $$ public void testUpgradeOldMapping() throws IOException, ExecutionException, InterruptedException -->Line_22 $$ client().admin().cluster().prepareReroute().get()[ CD ]
Line_31 $$ Map<String, SearchHitField> fields = hit.getFields()-->Line_32 $$ assertTrue(fields.containsKey("_size"))[ FD ]
Line_26 $$ final SearchResponse sizeResponse = client().prepareSearch(indexName).addField("_source").addField("_size").get()-->Line_28 $$ for (SearchHit hit : sizeResponse.getHits().getHits()) [ FD ]
Line_12 $$ Path dataPath = createTempDir()-->Line_20 $$ Files.move(src, dataPath)[ FD ]
Line_2 $$ public void testUpgradeOldMapping() throws IOException, ExecutionException, InterruptedException -->Line_24 $$ final SearchResponse countResponse = client().prepareSearch(indexName).setSize(0).get()[ CD ]
Line_2 $$ public void testUpgradeOldMapping() throws IOException, ExecutionException, InterruptedException -->Line_26 $$ final SearchResponse sizeResponse = client().prepareSearch(indexName).addField("_source").addField("_size").get()[ CD ]
Line_2 $$ public void testUpgradeOldMapping() throws IOException, ExecutionException, InterruptedException -->Line_23 $$ ensureGreen(indexName)[ CD ]
Line_33 $$ Number size = fields.get("_size").getValue()-->Line_34 $$ assertNotNull(size)[ FD ]
Line_7 $$ Path backwardsIndex = getBwcIndicesPath().resolve(indexName + ".zip")-->Line_8 $$ try (InputStream stream = Files.newInputStream(backwardsIndex)) [ FD ]
Line_33 $$ Number size = fields.get("_size").getValue()-->Line_35 $$ assertEquals(source.length(), size.longValue())[ FD ]
Line_12 $$ Path dataPath = createTempDir()-->Line_17 $$ dataPath = nodePaths[0].resolve(NodeEnvironment.INDICES_FOLDER)[ FD ]
Line_2 $$ public void testUpgradeOldMapping() throws IOException, ExecutionException, InterruptedException -->Line_3 $$ final String indexName = "index-mapper-size-2.0.0"[ CD ]
Line_2 $$ public void testUpgradeOldMapping() throws IOException, ExecutionException, InterruptedException -->Line_27 $$ ElasticsearchAssertions.assertHitCount(sizeResponse, 3L)[ CD ]
Line_17 $$ dataPath = nodePaths[0].resolve(NodeEnvironment.INDICES_FOLDER)-->Line_18 $$ assertFalse(Files.exists(dataPath))[ FD ]
Line_12 $$ Path dataPath = createTempDir()-->Line_13 $$ Settings settings = Settings.builder().put("path.data", dataPath).build()[ FD ]
Line_31 $$ Map<String, SearchHitField> fields = hit.getFields()-->Line_33 $$ Number size = fields.get("_size").getValue()[ FD ]
Line_29 $$ String source = hit.getSourceAsString()-->Line_30 $$ assertNotNull(source)[ FD ]
Line_2 $$ public void testUpgradeOldMapping() throws IOException, ExecutionException, InterruptedException -->Line_17 $$ dataPath = nodePaths[0].resolve(NodeEnvironment.INDICES_FOLDER)[ CD ]
Line_17 $$ dataPath = nodePaths[0].resolve(NodeEnvironment.INDICES_FOLDER)-->Line_20 $$ Files.move(src, dataPath)[ FD ]
Line_13 $$ Settings settings = Settings.builder().put("path.data", dataPath).build()-->Line_14 $$ final String node = internalCluster().startDataOnlyNode(settings)[ FD ]
Line_4 $$ InternalTestCluster.Async<String> master = internalCluster().startNodeAsync()-->Line_21 $$ master.get()[ FD ]
Line_28 $$ for (SearchHit hit : sizeResponse.getHits().getHits()) -->Line_29 $$ String source = hit.getSourceAsString()[ FD ]
Line_5 $$ Path unzipDir = createTempDir()-->Line_9 $$ TestUtil.unzip(stream, unzipDir)[ FD ]
