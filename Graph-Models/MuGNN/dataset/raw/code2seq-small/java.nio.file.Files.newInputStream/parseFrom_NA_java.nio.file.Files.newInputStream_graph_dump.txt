Line_5 $$ for (Path jsonFile : FileUtils.findJsonSpec(fileSystem, optionalPathPrefix, path)) -->Line_6 $$ try (InputStream stream = Files.newInputStream(jsonFile)) [ FD ]
Line_4 $$ for (String path : paths) -->Line_5 $$ for (Path jsonFile : FileUtils.findJsonSpec(fileSystem, optionalPathPrefix, path)) [ FD ]
Line_3 $$ RestSpec restSpec = new RestSpec()-->Line_9 $$ restSpec.addApi(restApi)[ FD ]
Line_7 $$ XContentParser parser = JsonXContent.jsonXContent.createParser(stream)-->Line_8 $$ RestApi restApi = new RestApiParser().parse(parser)[ FD ]
Line_6 $$ try (InputStream stream = Files.newInputStream(jsonFile)) -->Line_7 $$ XContentParser parser = JsonXContent.jsonXContent.createParser(stream)[ FD ]
Line_2 $$ public static RestSpec parseFrom(FileSystem fileSystem, String optionalPathPrefix, String... paths) throws IOException -->Line_5 $$ for (Path jsonFile : FileUtils.findJsonSpec(fileSystem, optionalPathPrefix, path)) [ FD ]
Line_2 $$ public static RestSpec parseFrom(FileSystem fileSystem, String optionalPathPrefix, String... paths) throws IOException -->Line_15 $$ return restSpec[ CD ]
Line_8 $$ RestApi restApi = new RestApiParser().parse(parser)-->Line_9 $$ restSpec.addApi(restApi)[ FD ]
Line_2 $$ public static RestSpec parseFrom(FileSystem fileSystem, String optionalPathPrefix, String... paths) throws IOException -->Line_3 $$ RestSpec restSpec = new RestSpec()[ CD ]
