Line_2 $$ public void onFileInit(Path file) -->Line_14 $$ logger.info("compiling script file [[ FD ]
Line_6 $$ Tuple<String, String> scriptNameExt = scriptNameExt(file)-->Line_17 $$ CacheKey cacheKey = new CacheKey(engineService, scriptNameExt.v1(), null, Collections.emptyMap())[ FD ]
Line_8 $$ ScriptEngineService engineService = getScriptEngineServiceForFileExt(scriptNameExt.v2())-->Line_9 $$ if (engineService == null) [ FD ]
Line_13 $$ if (isAnyScriptContextEnabled(engineService.types()[0], engineService, ScriptType.FILE)) -->Line_22 $$ logger.warn("skipping compile of script file [[ CD ]
Line_13 $$ if (isAnyScriptContextEnabled(engineService.types()[0], engineService, ScriptType.FILE)) -->Line_14 $$ logger.info("compiling script file [[ CD ]
Line_2 $$ public void onFileInit(Path file) -->Line_6 $$ Tuple<String, String> scriptNameExt = scriptNameExt(file)[ CD ]
Line_9 $$ if (engineService == null) -->Line_10 $$ logger.warn("no script engine found for [[ CD ]
Line_2 $$ public void onFileInit(Path file) -->Line_6 $$ Tuple<String, String> scriptNameExt = scriptNameExt(file)[ FD ]
Line_7 $$ if (scriptNameExt != null) -->Line_8 $$ ScriptEngineService engineService = getScriptEngineServiceForFileExt(scriptNameExt.v2())[ CD ]
Line_6 $$ Tuple<String, String> scriptNameExt = scriptNameExt(file)-->Line_8 $$ ScriptEngineService engineService = getScriptEngineServiceForFileExt(scriptNameExt.v2())[ FD ]
Line_6 $$ Tuple<String, String> scriptNameExt = scriptNameExt(file)-->Line_10 $$ logger.warn("no script engine found for [[ FD ]
Line_8 $$ ScriptEngineService engineService = getScriptEngineServiceForFileExt(scriptNameExt.v2())-->Line_18 $$ staticCache.put(cacheKey, new CompiledScript(ScriptType.FILE, scriptNameExt.v1(), engineService.types()[0], engineService.compile(script, Collections.emptyMap())))[ FD ]
Line_15 $$ try (InputStreamReader reader = new InputStreamReader(Files.newInputStream(file), StandardCharsets.UTF_8)) -->Line_16 $$ String script = Streams.copyToString(reader)[ FD ]
Line_2 $$ public void onFileInit(Path file) -->Line_4 $$ logger.trace("Loading script file : [[ FD ]
Line_6 $$ Tuple<String, String> scriptNameExt = scriptNameExt(file)-->Line_25 $$ logger.warn("failed to load/compile script [[ FD ]
Line_3 $$ if (logger.isTraceEnabled()) -->Line_4 $$ logger.trace("Loading script file : [[ CD ]
Line_2 $$ public void onFileInit(Path file) -->Line_7 $$ if (scriptNameExt != null) [ CD ]
Line_2 $$ public void onFileInit(Path file) -->Line_3 $$ if (logger.isTraceEnabled()) [ CD ]
Line_17 $$ CacheKey cacheKey = new CacheKey(engineService, scriptNameExt.v1(), null, Collections.emptyMap())-->Line_18 $$ staticCache.put(cacheKey, new CompiledScript(ScriptType.FILE, scriptNameExt.v1(), engineService.types()[0], engineService.compile(script, Collections.emptyMap())))[ FD ]
Line_2 $$ public void onFileInit(Path file) -->Line_22 $$ logger.warn("skipping compile of script file [[ FD ]
Line_6 $$ Tuple<String, String> scriptNameExt = scriptNameExt(file)-->Line_18 $$ staticCache.put(cacheKey, new CompiledScript(ScriptType.FILE, scriptNameExt.v1(), engineService.types()[0], engineService.compile(script, Collections.emptyMap())))[ FD ]
Line_16 $$ String script = Streams.copyToString(reader)-->Line_18 $$ staticCache.put(cacheKey, new CompiledScript(ScriptType.FILE, scriptNameExt.v1(), engineService.types()[0], engineService.compile(script, Collections.emptyMap())))[ FD ]
Line_7 $$ if (scriptNameExt != null) -->Line_9 $$ if (engineService == null) [ CD ]
Line_6 $$ Tuple<String, String> scriptNameExt = scriptNameExt(file)-->Line_7 $$ if (scriptNameExt != null) [ FD ]
Line_2 $$ public void onFileInit(Path file) -->Line_15 $$ try (InputStreamReader reader = new InputStreamReader(Files.newInputStream(file), StandardCharsets.UTF_8)) [ FD ]
Line_8 $$ ScriptEngineService engineService = getScriptEngineServiceForFileExt(scriptNameExt.v2())-->Line_13 $$ if (isAnyScriptContextEnabled(engineService.types()[0], engineService, ScriptType.FILE)) [ FD ]
