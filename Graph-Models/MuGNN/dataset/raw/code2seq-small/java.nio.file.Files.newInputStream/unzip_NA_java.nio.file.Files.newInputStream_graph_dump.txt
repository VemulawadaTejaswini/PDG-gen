Line_7 $$ if (_log.isDebugEnabled()) -->Line_8 $$ long zippedSize = Files.size(sourcePath)[ CD ]
Line_7 $$ if (_log.isDebugEnabled()) -->Line_25 $$ _log.debug(sb.toString())[ CD ]
Line_2 $$ public static Path unzip(Path sourcePath, Path destDirPath) throws IOException -->Line_8 $$ long zippedSize = Files.size(sourcePath)[ FD ]
Line_10 $$ double compressionRatio = rawSize / zippedSize-->Line_23 $$ sb.append(compressionRatio)[ FD ]
Line_7 $$ if (_log.isDebugEnabled()) -->Line_23 $$ sb.append(compressionRatio)[ CD ]
Line_11 $$ StringBundler sb = new StringBundler(13)-->Line_17 $$ sb.append(destPath)[ FD ]
Line_7 $$ if (_log.isDebugEnabled()) -->Line_12 $$ sb.append("Unzipped ")[ CD ]
Line_2 $$ public static Path unzip(Path sourcePath, Path destDirPath) throws IOException -->Line_4 $$ try (InputStream inputStream = Files.newInputStream(sourcePath)) [ FD ]
Line_7 $$ if (_log.isDebugEnabled()) -->Line_21 $$ sb.append(time)[ CD ]
Line_2 $$ public static Path unzip(Path sourcePath, Path destDirPath) throws IOException -->Line_31 $$ return destPath[ CD ]
Line_11 $$ StringBundler sb = new StringBundler(13)-->Line_13 $$ sb.append(sourcePath)[ FD ]
Line_7 $$ if (_log.isDebugEnabled()) -->Line_9 $$ long time = (System.currentTimeMillis() - startTime) / 1000[ CD ]
Line_7 $$ if (_log.isDebugEnabled()) -->Line_17 $$ sb.append(destPath)[ CD ]
Line_7 $$ if (_log.isDebugEnabled()) -->Line_18 $$ sb.append(" (")[ CD ]
Line_3 $$ Path destPath = Files.createTempDirectory(destDirPath, null)-->Line_28 $$ delete(destPath)[ FD ]
Line_9 $$ long time = (System.currentTimeMillis() - startTime) / 1000-->Line_21 $$ sb.append(time)[ FD ]
Line_7 $$ if (_log.isDebugEnabled()) -->Line_13 $$ sb.append(sourcePath)[ CD ]
Line_11 $$ StringBundler sb = new StringBundler(13)-->Line_22 $$ sb.append("s with a ")[ FD ]
Line_3 $$ Path destPath = Files.createTempDirectory(destDirPath, null)-->Line_6 $$ long rawSize = unzip(new ZipInputStream(inputStream), destPath)[ FD ]
Line_7 $$ if (_log.isDebugEnabled()) -->Line_10 $$ double compressionRatio = rawSize / zippedSize[ CD ]
Line_11 $$ StringBundler sb = new StringBundler(13)-->Line_19 $$ sb.append(rawSize)[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(13)-->Line_14 $$ sb.append(" (")[ FD ]
Line_7 $$ if (_log.isDebugEnabled()) -->Line_11 $$ StringBundler sb = new StringBundler(13)[ CD ]
Line_2 $$ public static Path unzip(Path sourcePath, Path destDirPath) throws IOException -->Line_3 $$ Path destPath = Files.createTempDirectory(destDirPath, null)[ FD ]
Line_2 $$ public static Path unzip(Path sourcePath, Path destDirPath) throws IOException -->Line_3 $$ Path destPath = Files.createTempDirectory(destDirPath, null)[ CD ]
Line_8 $$ long zippedSize = Files.size(sourcePath)-->Line_15 $$ sb.append(zippedSize)[ FD ]
Line_7 $$ if (_log.isDebugEnabled()) -->Line_20 $$ sb.append(" bytes)\" in ")[ CD ]
Line_7 $$ if (_log.isDebugEnabled()) -->Line_24 $$ sb.append("compression ratio")[ CD ]
Line_11 $$ StringBundler sb = new StringBundler(13)-->Line_20 $$ sb.append(" bytes)\" in ")[ FD ]
Line_6 $$ long rawSize = unzip(new ZipInputStream(inputStream), destPath)-->Line_19 $$ sb.append(rawSize)[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(13)-->Line_24 $$ sb.append("compression ratio")[ FD ]
Line_7 $$ if (_log.isDebugEnabled()) -->Line_22 $$ sb.append("s with a ")[ CD ]
Line_11 $$ StringBundler sb = new StringBundler(13)-->Line_12 $$ sb.append("Unzipped ")[ FD ]
Line_7 $$ if (_log.isDebugEnabled()) -->Line_16 $$ sb.append(" bytes) to ")[ CD ]
Line_3 $$ Path destPath = Files.createTempDirectory(destDirPath, null)-->Line_17 $$ sb.append(destPath)[ FD ]
Line_7 $$ if (_log.isDebugEnabled()) -->Line_15 $$ sb.append(zippedSize)[ CD ]
Line_11 $$ StringBundler sb = new StringBundler(13)-->Line_15 $$ sb.append(zippedSize)[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(13)-->Line_23 $$ sb.append(compressionRatio)[ FD ]
Line_7 $$ if (_log.isDebugEnabled()) -->Line_14 $$ sb.append(" (")[ CD ]
Line_11 $$ StringBundler sb = new StringBundler(13)-->Line_25 $$ _log.debug(sb.toString())[ FD ]
Line_7 $$ if (_log.isDebugEnabled()) -->Line_19 $$ sb.append(rawSize)[ CD ]
Line_2 $$ public static Path unzip(Path sourcePath, Path destDirPath) throws IOException -->Line_13 $$ sb.append(sourcePath)[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(13)-->Line_16 $$ sb.append(" bytes) to ")[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(13)-->Line_18 $$ sb.append(" (")[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(13)-->Line_21 $$ sb.append(time)[ FD ]
