Line_11 $$ PsiClass aClass = ((PsiJavaFile) file).getClasses()[0]-->Line_12 $$ assertTrue(aClass.isValid())[ FD ]
Line_6 $$ VirtualFile vFile = LocalFileSystem.getInstance().findFileByIoFile(testFile)-->Line_9 $$ PsiFile file = PsiManager.getInstance(getProject()).findFile(vFile)[ FD ]
Line_6 $$ VirtualFile vFile = LocalFileSystem.getInstance().findFileByIoFile(testFile)-->Line_7 $$ assertNotNull(testFile.getPath(), vFile)[ FD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_12 $$ assertTrue(aClass.isValid())[ CD ]
Line_11 $$ PsiClass aClass = ((PsiJavaFile) file).getClasses()[0]-->Line_14 $$ assertEquals("field11", aClass.getFields()[0].getName())[ FD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_19 $$ File file2 = new File(PathManagerEx.getTestDataPath() + TEST_DATA_PATH + "/2_TestClass.class")[ CD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_23 $$ aClass = ((PsiJavaFile) file).getClasses()[0][ CD ]
Line_11 $$ PsiClass aClass = ((PsiJavaFile) file).getClasses()[0]-->Line_26 $$ assertEquals(1, aClass.getFields().length)[ FD ]
Line_3 $$ File testFile = IoTestUtil.createTestFile("TestClass.class")-->Line_7 $$ assertNotNull(testFile.getPath(), vFile)[ FD ]
Line_4 $$ File file1 = new File(PathManagerEx.getTestDataPath() + TEST_DATA_PATH + "/1_TestClass.class")-->Line_5 $$ FileUtil.copy(file1, testFile)[ FD ]
Line_11 $$ PsiClass aClass = ((PsiJavaFile) file).getClasses()[0]-->Line_29 $$ assertEquals("TestClass", aClass.getMethods()[0].getName())[ FD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_5 $$ FileUtil.copy(file1, testFile)[ CD ]
Line_23 $$ aClass = ((PsiJavaFile) file).getClasses()[0]-->Line_30 $$ assertEquals("method2", aClass.getMethods()[1].getName())[ FD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_8 $$ FileBasedIndex.getInstance().requestReindex(vFile)[ CD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_6 $$ VirtualFile vFile = LocalFileSystem.getInstance().findFileByIoFile(testFile)[ CD ]
Line_11 $$ PsiClass aClass = ((PsiJavaFile) file).getClasses()[0]-->Line_28 $$ assertEquals(2, aClass.getMethods().length)[ FD ]
Line_23 $$ aClass = ((PsiJavaFile) file).getClasses()[0]-->Line_25 $$ assertTrue(aClass.isValid())[ FD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_14 $$ assertEquals("field11", aClass.getFields()[0].getName())[ CD ]
Line_23 $$ aClass = ((PsiJavaFile) file).getClasses()[0]-->Line_24 $$ assertTrue(aClass.isValid())[ FD ]
Line_3 $$ File testFile = IoTestUtil.createTestFile("TestClass.class")-->Line_20 $$ FileUtil.copy(file2, testFile)[ FD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_10 $$ assertNotNull(file)[ CD ]
Line_6 $$ VirtualFile vFile = LocalFileSystem.getInstance().findFileByIoFile(testFile)-->Line_8 $$ FileBasedIndex.getInstance().requestReindex(vFile)[ FD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_20 $$ FileUtil.copy(file2, testFile)[ CD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_24 $$ assertTrue(aClass.isValid())[ CD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_3 $$ File testFile = IoTestUtil.createTestFile("TestClass.class")[ CD ]
Line_11 $$ PsiClass aClass = ((PsiJavaFile) file).getClasses()[0]-->Line_16 $$ assertEquals(2, aClass.getMethods().length)[ FD ]
Line_3 $$ File testFile = IoTestUtil.createTestFile("TestClass.class")-->Line_6 $$ VirtualFile vFile = LocalFileSystem.getInstance().findFileByIoFile(testFile)[ FD ]
Line_11 $$ PsiClass aClass = ((PsiJavaFile) file).getClasses()[0]-->Line_18 $$ assertEquals("method1", aClass.getMethods()[1].getName())[ FD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_21 $$ assertTrue(testFile.setLastModified(System.currentTimeMillis() + 5000))[ CD ]
Line_6 $$ VirtualFile vFile = LocalFileSystem.getInstance().findFileByIoFile(testFile)-->Line_22 $$ vFile.refresh(false, false)[ FD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_9 $$ PsiFile file = PsiManager.getInstance(getProject()).findFile(vFile)[ CD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_15 $$ assertEquals("field12", aClass.getFields()[1].getName())[ CD ]
Line_23 $$ aClass = ((PsiJavaFile) file).getClasses()[0]-->Line_26 $$ assertEquals(1, aClass.getFields().length)[ FD ]
Line_3 $$ File testFile = IoTestUtil.createTestFile("TestClass.class")-->Line_5 $$ FileUtil.copy(file1, testFile)[ FD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_27 $$ assertEquals("field2", aClass.getFields()[0].getName())[ CD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_17 $$ assertEquals("TestClass", aClass.getMethods()[0].getName())[ CD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_4 $$ File file1 = new File(PathManagerEx.getTestDataPath() + TEST_DATA_PATH + "/1_TestClass.class")[ CD ]
Line_11 $$ PsiClass aClass = ((PsiJavaFile) file).getClasses()[0]-->Line_24 $$ assertTrue(aClass.isValid())[ FD ]
Line_11 $$ PsiClass aClass = ((PsiJavaFile) file).getClasses()[0]-->Line_17 $$ assertEquals("TestClass", aClass.getMethods()[0].getName())[ FD ]
Line_9 $$ PsiFile file = PsiManager.getInstance(getProject()).findFile(vFile)-->Line_10 $$ assertNotNull(file)[ FD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_25 $$ assertTrue(aClass.isValid())[ CD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_7 $$ assertNotNull(testFile.getPath(), vFile)[ CD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_30 $$ assertEquals("method2", aClass.getMethods()[1].getName())[ CD ]
Line_11 $$ PsiClass aClass = ((PsiJavaFile) file).getClasses()[0]-->Line_13 $$ assertEquals(2, aClass.getFields().length)[ FD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_13 $$ assertEquals(2, aClass.getFields().length)[ CD ]
Line_11 $$ PsiClass aClass = ((PsiJavaFile) file).getClasses()[0]-->Line_25 $$ assertTrue(aClass.isValid())[ FD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_18 $$ assertEquals("method1", aClass.getMethods()[1].getName())[ CD ]
Line_11 $$ PsiClass aClass = ((PsiJavaFile) file).getClasses()[0]-->Line_15 $$ assertEquals("field12", aClass.getFields()[1].getName())[ FD ]
Line_23 $$ aClass = ((PsiJavaFile) file).getClasses()[0]-->Line_27 $$ assertEquals("field2", aClass.getFields()[0].getName())[ FD ]
Line_11 $$ PsiClass aClass = ((PsiJavaFile) file).getClasses()[0]-->Line_27 $$ assertEquals("field2", aClass.getFields()[0].getName())[ FD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_28 $$ assertEquals(2, aClass.getMethods().length)[ CD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_29 $$ assertEquals("TestClass", aClass.getMethods()[0].getName())[ CD ]
Line_23 $$ aClass = ((PsiJavaFile) file).getClasses()[0]-->Line_29 $$ assertEquals("TestClass", aClass.getMethods()[0].getName())[ FD ]
Line_19 $$ File file2 = new File(PathManagerEx.getTestDataPath() + TEST_DATA_PATH + "/2_TestClass.class")-->Line_20 $$ FileUtil.copy(file2, testFile)[ FD ]
Line_23 $$ aClass = ((PsiJavaFile) file).getClasses()[0]-->Line_28 $$ assertEquals(2, aClass.getMethods().length)[ FD ]
Line_11 $$ PsiClass aClass = ((PsiJavaFile) file).getClasses()[0]-->Line_23 $$ aClass = ((PsiJavaFile) file).getClasses()[0][ FD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_16 $$ assertEquals(2, aClass.getMethods().length)[ CD ]
Line_3 $$ File testFile = IoTestUtil.createTestFile("TestClass.class")-->Line_21 $$ assertTrue(testFile.setLastModified(System.currentTimeMillis() + 5000))[ FD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_26 $$ assertEquals(1, aClass.getFields().length)[ CD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_22 $$ vFile.refresh(false, false)[ CD ]
Line_11 $$ PsiClass aClass = ((PsiJavaFile) file).getClasses()[0]-->Line_30 $$ assertEquals("method2", aClass.getMethods()[1].getName())[ FD ]
Line_2 $$ public void testClassFileUpdate() throws IOException -->Line_11 $$ PsiClass aClass = ((PsiJavaFile) file).getClasses()[0][ CD ]
