Line_8 $$ if (Validator.isNull(spriteRootDirName)) -->Line_9 $$ File tempDir = (File) servletContext.getAttribute(JavaConstants.JAVAX_SERVLET_CONTEXT_TEMPDIR)[ CD ]
Line_55 $$ renderedImage = convert(renderedImage)-->Line_56 $$ renderedImage = TranslateDescriptor.create(renderedImage, x, y, null, null)[ FD ]
Line_78 $$ if (renderedImages.size() <= 1) -->Line_79 $$ renderedImages.clear()[ CD ]
Line_58 $$ String key = ServletContextUtil.getResourcePath(imageURL)-->Line_61 $$ key = key.substring(rootPath.length())[ FD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_63 $$ String contextPath = servletContext.getContextPath()[ FD ]
Line_18 $$ boolean build = false-->Line_24 $$ build = true[ FD ]
Line_83 $$ File spriteFile = new File(spriteRootDir, spriteFileName)-->Line_84 $$ File spriteDir = spriteFile.getParentFile()[ FD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_6 $$ Collections.sort(imageURLs, new PropertyComparator("path"))[ FD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_59 $$ int pos = key.indexOf(rootPath)[ FD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_41 $$ float x = 0[ CD ]
Line_78 $$ if (renderedImages.size() <= 1) -->Line_80 $$ spriteProperties.clear()[ CD ]
Line_43 $$ URLConnection urlConnection = null-->Line_50 $$ ImageBag imageBag = ImageToolUtil.read(urlConnection.getInputStream())[ FD ]
Line_32 $$ String spritePropertiesString = FileUtil.read(spritePropertiesFile)-->Line_33 $$ if (Validator.isNull(spritePropertiesString)) [ FD ]
Line_51 $$ RenderedImage renderedImage = imageBag.getRenderedImage()-->Line_52 $$ int height = renderedImage.getHeight()[ FD ]
Line_18 $$ boolean build = false-->Line_31 $$ if (!build) [ FD ]
Line_29 $$ build = true-->Line_31 $$ if (!build) [ FD ]
Line_54 $$ if ((height <= maxHeight) && (width <= maxWidth)) -->Line_55 $$ renderedImage = convert(renderedImage)[ CD ]
Line_78 $$ if (renderedImages.size() <= 1) -->Line_83 $$ File spriteFile = new File(spriteRootDir, spriteFileName)[ CD ]
Line_56 $$ renderedImage = TranslateDescriptor.create(renderedImage, x, y, null, null)-->Line_57 $$ renderedImages.add(renderedImage)[ FD ]
Line_61 $$ key = key.substring(rootPath.length())-->Line_64 $$ key = contextPath.concat(key)[ FD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_61 $$ key = key.substring(rootPath.length())[ FD ]
Line_59 $$ int pos = key.indexOf(rootPath)-->Line_60 $$ if (pos == 0) [ FD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_78 $$ if (renderedImages.size() <= 1) [ CD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_39 $$ List<RenderedImage> renderedImages = new ArrayList()[ CD ]
Line_83 $$ File spriteFile = new File(spriteRootDir, spriteFileName)-->Line_88 $$ spriteFile.setLastModified(lastModified)[ FD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_6 $$ Collections.sort(imageURLs, new PropertyComparator("path"))[ CD ]
Line_15 $$ File spritePropertiesFile = new File(spriteRootDir, spritePropertiesFileName)-->Line_20 $$ if (spritePropertiesFile.exists()) [ FD ]
Line_54 $$ if ((height <= maxHeight) && (width <= maxWidth)) -->Line_63 $$ String contextPath = servletContext.getContextPath()[ CD ]
Line_21 $$ lastModified = spritePropertiesFile.lastModified()-->Line_88 $$ spriteFile.setLastModified(lastModified)[ FD ]
Line_7 $$ File spriteRootDir = null-->Line_14 $$ FileUtil.mkdirs(spriteRootDir)[ FD ]
Line_73 $$ if (_log.isDebugEnabled()) -->Line_74 $$ _log.debug(e, e)[ CD ]
Line_45 $$ urlConnection = imageURL.openConnection()-->Line_46 $$ if ((urlConnection != null) && (urlConnection.getContentLength() > maxSize)) [ FD ]
Line_51 $$ RenderedImage renderedImage = imageBag.getRenderedImage()-->Line_55 $$ renderedImage = convert(renderedImage)[ FD ]
Line_42 $$ float y = 0-->Line_67 $$ y += renderedImage.getHeight()[ FD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_92 $$ if (lastModified > 0) [ CD ]
Line_87 $$ if (lastModified > 0) -->Line_88 $$ spriteFile.setLastModified(lastModified)[ CD ]
Line_61 $$ key = key.substring(rootPath.length())-->Line_66 $$ spriteProperties.setProperty(key, value)[ FD ]
Line_54 $$ if ((height <= maxHeight) && (width <= maxWidth)) -->Line_65 $$ String value = (int) y + "," + height + "," + width[ CD ]
Line_51 $$ RenderedImage renderedImage = imageBag.getRenderedImage()-->Line_53 $$ int width = renderedImage.getWidth()[ FD ]
Line_15 $$ File spritePropertiesFile = new File(spriteRootDir, spritePropertiesFileName)-->Line_91 $$ FileUtil.write(spritePropertiesFile, PropertiesUtil.toString(spriteProperties))[ FD ]
Line_54 $$ if ((height <= maxHeight) && (width <= maxWidth)) -->Line_57 $$ renderedImages.add(renderedImage)[ CD ]
Line_58 $$ String key = ServletContextUtil.getResourcePath(imageURL)-->Line_59 $$ int pos = key.indexOf(rootPath)[ FD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_43 $$ URLConnection urlConnection = null[ CD ]
Line_55 $$ renderedImage = convert(renderedImage)-->Line_57 $$ renderedImages.add(renderedImage)[ FD ]
Line_51 $$ RenderedImage renderedImage = imageBag.getRenderedImage()-->Line_56 $$ renderedImage = TranslateDescriptor.create(renderedImage, x, y, null, null)[ FD ]
Line_54 $$ if ((height <= maxHeight) && (width <= maxWidth)) -->Line_60 $$ if (pos == 0) [ CD ]
Line_51 $$ RenderedImage renderedImage = imageBag.getRenderedImage()-->Line_57 $$ renderedImages.add(renderedImage)[ FD ]
Line_92 $$ if (lastModified > 0) -->Line_93 $$ spritePropertiesFile.setLastModified(lastModified)[ CD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_40 $$ Properties spriteProperties = new SortedProperties()[ CD ]
Line_54 $$ if ((height <= maxHeight) && (width <= maxWidth)) -->Line_56 $$ renderedImage = TranslateDescriptor.create(renderedImage, x, y, null, null)[ CD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_31 $$ if (!build) [ CD ]
Line_55 $$ renderedImage = convert(renderedImage)-->Line_86 $$ ImageIO.write(renderedImage, "png", spriteFile)[ FD ]
Line_24 $$ build = true-->Line_31 $$ if (!build) [ FD ]
Line_33 $$ if (Validator.isNull(spritePropertiesString)) -->Line_34 $$ return null[ CD ]
Line_51 $$ RenderedImage renderedImage = imageBag.getRenderedImage()-->Line_86 $$ ImageIO.write(renderedImage, "png", spriteFile)[ FD ]
Line_22 $$ for (URL imageURL : imageURLs) -->Line_45 $$ urlConnection = imageURL.openConnection()[ FD ]
Line_39 $$ List<RenderedImage> renderedImages = new ArrayList()-->Line_79 $$ renderedImages.clear()[ FD ]
Line_83 $$ File spriteFile = new File(spriteRootDir, spriteFileName)-->Line_86 $$ ImageIO.write(renderedImage, "png", spriteFile)[ FD ]
Line_10 $$ spriteRootDir = new File(tempDir, SpriteProcessor.PATH)-->Line_12 $$ spriteRootDir = new File(spriteRootDirName)[ FD ]
Line_24 $$ build = true-->Line_29 $$ build = true[ FD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_42 $$ float y = 0[ CD ]
Line_45 $$ urlConnection = imageURL.openConnection()-->Line_50 $$ ImageBag imageBag = ImageToolUtil.read(urlConnection.getInputStream())[ FD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_14 $$ FileUtil.mkdirs(spriteRootDir)[ CD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_18 $$ boolean build = false[ CD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_8 $$ if (Validator.isNull(spriteRootDirName)) [ CD ]
Line_54 $$ if ((height <= maxHeight) && (width <= maxWidth)) -->Line_59 $$ int pos = key.indexOf(rootPath)[ CD ]
Line_31 $$ if (!build) -->Line_32 $$ String spritePropertiesString = FileUtil.read(spritePropertiesFile)[ CD ]
Line_20 $$ if (spritePropertiesFile.exists()) -->Line_29 $$ build = true[ CD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_95 $$ return spriteProperties[ CD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_16 $$ File spritePropertiesParentFile = spritePropertiesFile.getParentFile()[ CD ]
Line_39 $$ List<RenderedImage> renderedImages = new ArrayList()-->Line_57 $$ renderedImages.add(renderedImage)[ FD ]
Line_19 $$ long lastModified = 0-->Line_21 $$ lastModified = spritePropertiesFile.lastModified()[ FD ]
Line_56 $$ renderedImage = TranslateDescriptor.create(renderedImage, x, y, null, null)-->Line_67 $$ y += renderedImage.getHeight()[ FD ]
Line_54 $$ if ((height <= maxHeight) && (width <= maxWidth)) -->Line_67 $$ y += renderedImage.getHeight()[ CD ]
Line_7 $$ File spriteRootDir = null-->Line_10 $$ spriteRootDir = new File(tempDir, SpriteProcessor.PATH)[ FD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_20 $$ if (spritePropertiesFile.exists()) [ CD ]
Line_15 $$ File spritePropertiesFile = new File(spriteRootDir, spritePropertiesFileName)-->Line_21 $$ lastModified = spritePropertiesFile.lastModified()[ FD ]
Line_31 $$ if (!build) -->Line_33 $$ if (Validator.isNull(spritePropertiesString)) [ CD ]
Line_18 $$ boolean build = false-->Line_29 $$ build = true[ FD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_9 $$ File tempDir = (File) servletContext.getAttribute(JavaConstants.JAVAX_SERVLET_CONTEXT_TEMPDIR)[ FD ]
Line_21 $$ lastModified = spritePropertiesFile.lastModified()-->Line_92 $$ if (lastModified > 0) [ FD ]
Line_22 $$ for (URL imageURL : imageURLs) -->Line_58 $$ String key = ServletContextUtil.getResourcePath(imageURL)[ FD ]
Line_20 $$ if (spritePropertiesFile.exists()) -->Line_21 $$ lastModified = spritePropertiesFile.lastModified()[ CD ]
Line_42 $$ float y = 0-->Line_56 $$ renderedImage = TranslateDescriptor.create(renderedImage, x, y, null, null)[ FD ]
Line_54 $$ if ((height <= maxHeight) && (width <= maxWidth)) -->Line_66 $$ spriteProperties.setProperty(key, value)[ CD ]
Line_22 $$ for (URL imageURL : imageURLs) -->Line_23 $$ if (URLUtil.getLastModifiedTime(imageURL) > lastModified) [ FD ]
Line_21 $$ lastModified = spritePropertiesFile.lastModified()-->Line_87 $$ if (lastModified > 0) [ FD ]
Line_55 $$ renderedImage = convert(renderedImage)-->Line_67 $$ y += renderedImage.getHeight()[ FD ]
Line_21 $$ lastModified = spritePropertiesFile.lastModified()-->Line_23 $$ if (URLUtil.getLastModifiedTime(imageURL) > lastModified) [ FD ]
Line_70 $$ if (_log.isWarnEnabled()) -->Line_71 $$ _log.warn("Unable to process " + imageURL)[ CD ]
Line_51 $$ RenderedImage renderedImage = imageBag.getRenderedImage()-->Line_67 $$ y += renderedImage.getHeight()[ FD ]
Line_40 $$ Properties spriteProperties = new SortedProperties()-->Line_80 $$ spriteProperties.clear()[ FD ]
Line_19 $$ long lastModified = 0-->Line_87 $$ if (lastModified > 0) [ FD ]
Line_54 $$ if ((height <= maxHeight) && (width <= maxWidth)) -->Line_64 $$ key = contextPath.concat(key)[ CD ]
Line_19 $$ long lastModified = 0-->Line_88 $$ spriteFile.setLastModified(lastModified)[ FD ]
Line_40 $$ Properties spriteProperties = new SortedProperties()-->Line_91 $$ FileUtil.write(spritePropertiesFile, PropertiesUtil.toString(spriteProperties))[ FD ]
Line_3 $$ if (imageURLs.size() < 1) -->Line_4 $$ return null[ CD ]
Line_58 $$ String key = ServletContextUtil.getResourcePath(imageURL)-->Line_66 $$ spriteProperties.setProperty(key, value)[ FD ]
Line_23 $$ if (URLUtil.getLastModifiedTime(imageURL) > lastModified) -->Line_24 $$ build = true[ CD ]
Line_41 $$ float x = 0-->Line_56 $$ renderedImage = TranslateDescriptor.create(renderedImage, x, y, null, null)[ FD ]
Line_64 $$ key = contextPath.concat(key)-->Line_66 $$ spriteProperties.setProperty(key, value)[ FD ]
Line_65 $$ String value = (int) y + "," + height + "," + width-->Line_66 $$ spriteProperties.setProperty(key, value)[ FD ]
Line_15 $$ File spritePropertiesFile = new File(spriteRootDir, spritePropertiesFileName)-->Line_16 $$ File spritePropertiesParentFile = spritePropertiesFile.getParentFile()[ FD ]
Line_19 $$ long lastModified = 0-->Line_23 $$ if (URLUtil.getLastModifiedTime(imageURL) > lastModified) [ FD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_3 $$ if (imageURLs.size() < 1) [ FD ]
Line_32 $$ String spritePropertiesString = FileUtil.read(spritePropertiesFile)-->Line_36 $$ return PropertiesUtil.load(spritePropertiesString)[ FD ]
Line_19 $$ long lastModified = 0-->Line_92 $$ if (lastModified > 0) [ FD ]
Line_40 $$ Properties spriteProperties = new SortedProperties()-->Line_66 $$ spriteProperties.setProperty(key, value)[ FD ]
Line_78 $$ if (renderedImages.size() <= 1) -->Line_82 $$ RenderedImage renderedImage = MosaicDescriptor.create(renderedImages.toArray(new RenderedImage[renderedImages.size()]), MosaicDescriptor.MOSAIC_TYPE_OVERLAY, null, null, null, null, null)[ CD ]
Line_19 $$ long lastModified = 0-->Line_93 $$ spritePropertiesFile.setLastModified(lastModified)[ FD ]
Line_33 $$ if (Validator.isNull(spritePropertiesString)) -->Line_36 $$ return PropertiesUtil.load(spritePropertiesString)[ CD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_91 $$ FileUtil.write(spritePropertiesFile, PropertiesUtil.toString(spriteProperties))[ CD ]
Line_8 $$ if (Validator.isNull(spriteRootDirName)) -->Line_12 $$ spriteRootDir = new File(spriteRootDirName)[ CD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_17 $$ FileUtil.mkdirs(spritePropertiesParentFile)[ CD ]
Line_12 $$ spriteRootDir = new File(spriteRootDirName)-->Line_14 $$ FileUtil.mkdirs(spriteRootDir)[ FD ]
Line_8 $$ if (Validator.isNull(spriteRootDirName)) -->Line_10 $$ spriteRootDir = new File(tempDir, SpriteProcessor.PATH)[ CD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_15 $$ File spritePropertiesFile = new File(spriteRootDir, spritePropertiesFileName)[ CD ]
Line_15 $$ File spritePropertiesFile = new File(spriteRootDir, spritePropertiesFileName)-->Line_32 $$ String spritePropertiesString = FileUtil.read(spritePropertiesFile)[ FD ]
Line_10 $$ spriteRootDir = new File(tempDir, SpriteProcessor.PATH)-->Line_14 $$ FileUtil.mkdirs(spriteRootDir)[ FD ]
Line_43 $$ URLConnection urlConnection = null-->Line_45 $$ urlConnection = imageURL.openConnection()[ FD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_8 $$ if (Validator.isNull(spriteRootDirName)) [ FD ]
Line_39 $$ List<RenderedImage> renderedImages = new ArrayList()-->Line_82 $$ RenderedImage renderedImage = MosaicDescriptor.create(renderedImages.toArray(new RenderedImage[renderedImages.size()]), MosaicDescriptor.MOSAIC_TYPE_OVERLAY, null, null, null, null, null)[ FD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_3 $$ if (imageURLs.size() < 1) [ CD ]
Line_16 $$ File spritePropertiesParentFile = spritePropertiesFile.getParentFile()-->Line_17 $$ FileUtil.mkdirs(spritePropertiesParentFile)[ FD ]
Line_39 $$ List<RenderedImage> renderedImages = new ArrayList()-->Line_78 $$ if (renderedImages.size() <= 1) [ FD ]
Line_7 $$ File spriteRootDir = null-->Line_12 $$ spriteRootDir = new File(spriteRootDirName)[ FD ]
Line_78 $$ if (renderedImages.size() <= 1) -->Line_85 $$ FileUtil.mkdirs(spriteDir)[ CD ]
Line_78 $$ if (renderedImages.size() <= 1) -->Line_84 $$ File spriteDir = spriteFile.getParentFile()[ CD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_19 $$ long lastModified = 0[ CD ]
Line_58 $$ String key = ServletContextUtil.getResourcePath(imageURL)-->Line_64 $$ key = contextPath.concat(key)[ FD ]
Line_15 $$ File spritePropertiesFile = new File(spriteRootDir, spritePropertiesFileName)-->Line_93 $$ spritePropertiesFile.setLastModified(lastModified)[ FD ]
Line_63 $$ String contextPath = servletContext.getContextPath()-->Line_64 $$ key = contextPath.concat(key)[ FD ]
Line_21 $$ lastModified = spritePropertiesFile.lastModified()-->Line_93 $$ spritePropertiesFile.setLastModified(lastModified)[ FD ]
Line_2 $$ public Properties generate(ServletContext servletContext, List<URL> imageURLs, String spriteRootDirName, String spriteFileName, String spritePropertiesFileName, String rootPath, int maxHeight, int maxWidth, int maxSize) throws IOException -->Line_7 $$ File spriteRootDir = null[ CD ]
Line_60 $$ if (pos == 0) -->Line_61 $$ key = key.substring(rootPath.length())[ CD ]
Line_43 $$ URLConnection urlConnection = null-->Line_46 $$ if ((urlConnection != null) && (urlConnection.getContentLength() > maxSize)) [ FD ]
Line_78 $$ if (renderedImages.size() <= 1) -->Line_86 $$ ImageIO.write(renderedImage, "png", spriteFile)[ CD ]
Line_78 $$ if (renderedImages.size() <= 1) -->Line_87 $$ if (lastModified > 0) [ CD ]
Line_54 $$ if ((height <= maxHeight) && (width <= maxWidth)) -->Line_58 $$ String key = ServletContextUtil.getResourcePath(imageURL)[ CD ]
Line_56 $$ renderedImage = TranslateDescriptor.create(renderedImage, x, y, null, null)-->Line_86 $$ ImageIO.write(renderedImage, "png", spriteFile)[ FD ]
Line_50 $$ ImageBag imageBag = ImageToolUtil.read(urlConnection.getInputStream())-->Line_51 $$ RenderedImage renderedImage = imageBag.getRenderedImage()[ FD ]
Line_84 $$ File spriteDir = spriteFile.getParentFile()-->Line_85 $$ FileUtil.mkdirs(spriteDir)[ FD ]
