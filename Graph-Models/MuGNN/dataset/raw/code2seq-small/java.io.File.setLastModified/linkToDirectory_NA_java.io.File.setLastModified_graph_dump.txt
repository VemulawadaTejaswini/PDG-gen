Line_2 $$ public void linkToDirectory() throws Exception -->Line_10 $$ assertEquals(FileAttributes.Type.DIRECTORY, attributes.type)[ CD ]
Line_2 $$ public void linkToDirectory() throws Exception -->Line_5 $$ if (SystemInfo.isUnix)[ CD ]
Line_2 $$ public void linkToDirectory() throws Exception -->Line_8 $$ final File link = IoTestUtil.createSymLink(file.getPath(), new File(myTempDirectory, "link").getPath())[ CD ]
Line_4 $$ final File file = FileUtil.createTempDirectory(myTempDirectory, "test.", ".tmp")-->Line_12 $$ assertEquals(file.length(), attributes.length)[ FD ]
Line_16 $$ final String target = FileSystemUtil.resolveSymLink(link)-->Line_17 $$ assertEquals(file.getPath(), target)[ FD ]
Line_2 $$ public void linkToDirectory() throws Exception -->Line_11 $$ assertEquals(SystemInfo.isUnix ? FileAttributes.SYM_LINK | FileAttributes.READ_ONLY : FileAttributes.SYM_LINK, attributes.flags)[ CD ]
Line_4 $$ final File file = FileUtil.createTempDirectory(myTempDirectory, "test.", ".tmp")-->Line_17 $$ assertEquals(file.getPath(), target)[ FD ]
Line_2 $$ public void linkToDirectory() throws Exception -->Line_16 $$ final String target = FileSystemUtil.resolveSymLink(link)[ CD ]
Line_2 $$ public void linkToDirectory() throws Exception -->Line_12 $$ assertEquals(file.length(), attributes.length)[ CD ]
Line_9 $$ final FileAttributes attributes = getAttributes(link)-->Line_15 $$ assertFalse(attributes.isWritable())[ FD ]
Line_5 $$ if (SystemInfo.isUnix)-->Line_6 $$ assertTrue(file.setWritable(false, false))[ CD ]
Line_8 $$ final File link = IoTestUtil.createSymLink(file.getPath(), new File(myTempDirectory, "link").getPath())-->Line_9 $$ final FileAttributes attributes = getAttributes(link)[ FD ]
Line_8 $$ final File link = IoTestUtil.createSymLink(file.getPath(), new File(myTempDirectory, "link").getPath())-->Line_16 $$ final String target = FileSystemUtil.resolveSymLink(link)[ FD ]
Line_2 $$ public void linkToDirectory() throws Exception -->Line_9 $$ final FileAttributes attributes = getAttributes(link)[ CD ]
Line_4 $$ final File file = FileUtil.createTempDirectory(myTempDirectory, "test.", ".tmp")-->Line_7 $$ assertTrue(file.setLastModified(file.lastModified() - 5000))[ FD ]
Line_2 $$ public void linkToDirectory() throws Exception -->Line_3 $$ assumeTrue(SystemInfo.areSymLinksSupported)[ CD ]
Line_4 $$ final File file = FileUtil.createTempDirectory(myTempDirectory, "test.", ".tmp")-->Line_8 $$ final File link = IoTestUtil.createSymLink(file.getPath(), new File(myTempDirectory, "link").getPath())[ FD ]
Line_2 $$ public void linkToDirectory() throws Exception -->Line_4 $$ final File file = FileUtil.createTempDirectory(myTempDirectory, "test.", ".tmp")[ CD ]
Line_2 $$ public void linkToDirectory() throws Exception -->Line_13 $$ assertTimestampsEqual(file.lastModified(), attributes.lastModified)[ CD ]
Line_2 $$ public void linkToDirectory() throws Exception -->Line_17 $$ assertEquals(file.getPath(), target)[ CD ]
Line_2 $$ public void linkToDirectory() throws Exception -->Line_14 $$ if (SystemInfo.isUnix)[ CD ]
Line_4 $$ final File file = FileUtil.createTempDirectory(myTempDirectory, "test.", ".tmp")-->Line_6 $$ assertTrue(file.setWritable(false, false))[ FD ]
Line_4 $$ final File file = FileUtil.createTempDirectory(myTempDirectory, "test.", ".tmp")-->Line_13 $$ assertTimestampsEqual(file.lastModified(), attributes.lastModified)[ FD ]
Line_2 $$ public void linkToDirectory() throws Exception -->Line_7 $$ assertTrue(file.setLastModified(file.lastModified() - 5000))[ CD ]
Line_14 $$ if (SystemInfo.isUnix)-->Line_15 $$ assertFalse(attributes.isWritable())[ CD ]
