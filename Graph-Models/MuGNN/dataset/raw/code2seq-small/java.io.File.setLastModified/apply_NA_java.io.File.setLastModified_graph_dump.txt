Line_33 $$ if (shouldRevert) -->Line_34 $$ revert(appliedActions, backupDir, rootDir, ui)[ CD ]
Line_2 $$ public ApplicationResult apply(final ZipFile patchFile, final File rootDir, final File backupDir, final Map<String, ValidationResult.Option> options, UpdaterUI ui) throws IOException, OperationCancelledException -->Line_18 $$ forEach(actionsToProcess, "Applying patch...", ui, true, new ActionsProcessor() [ FD ]
Line_2 $$ public ApplicationResult apply(final ZipFile patchFile, final File rootDir, final File backupDir, final Map<String, ValidationResult.Option> options, UpdaterUI ui) throws IOException, OperationCancelledException -->Line_11 $$ each.backup(toDir, backupDir)[ FD ]
Line_33 $$ if (shouldRevert) -->Line_36 $$ if (cancelled)[ CD ]
Line_2 $$ public ApplicationResult apply(final ZipFile patchFile, final File rootDir, final File backupDir, final Map<String, ValidationResult.Option> options, UpdaterUI ui) throws IOException, OperationCancelledException -->Line_39 $$ toDir.setLastModified(System.currentTimeMillis())[ CD ]
Line_4 $$ List<PatchAction> actionsToProcess = new ArrayList<PatchAction>()-->Line_9 $$ forEach(actionsToProcess, "Backing up files...", ui, true, new ActionsProcessor() [ FD ]
Line_2 $$ public ApplicationResult apply(final ZipFile patchFile, final File rootDir, final File backupDir, final Map<String, ValidationResult.Option> options, UpdaterUI ui) throws IOException, OperationCancelledException -->Line_3 $$ final File toDir = toBaseDir(rootDir)[ FD ]
Line_33 $$ if (shouldRevert) -->Line_35 $$ appliedActions.clear()[ CD ]
Line_5 $$ for (PatchAction each : myActions) -->Line_21 $$ each.apply(patchFile, backupDir, toDir)[ FD ]
Line_3 $$ final File toDir = toBaseDir(rootDir)-->Line_39 $$ toDir.setLastModified(System.currentTimeMillis())[ FD ]
Line_2 $$ public ApplicationResult apply(final ZipFile patchFile, final File rootDir, final File backupDir, final Map<String, ValidationResult.Option> options, UpdaterUI ui) throws IOException, OperationCancelledException -->Line_9 $$ forEach(actionsToProcess, "Backing up files...", ui, true, new ActionsProcessor() [ FD ]
Line_5 $$ for (PatchAction each : myActions) -->Line_7 $$ actionsToProcess.add(each)[ FD ]
Line_2 $$ public ApplicationResult apply(final ZipFile patchFile, final File rootDir, final File backupDir, final Map<String, ValidationResult.Option> options, UpdaterUI ui) throws IOException, OperationCancelledException -->Line_33 $$ if (shouldRevert) [ CD ]
Line_18 $$ forEach(actionsToProcess, "Applying patch...", ui, true, new ActionsProcessor() -->Line_21 $$ each.apply(patchFile, backupDir, toDir)[ FD ]
Line_2 $$ public ApplicationResult apply(final ZipFile patchFile, final File rootDir, final File backupDir, final Map<String, ValidationResult.Option> options, UpdaterUI ui) throws IOException, OperationCancelledException -->Line_40 $$ return new ApplicationResult(appliedActions)[ CD ]
Line_5 $$ for (PatchAction each : myActions) -->Line_11 $$ each.backup(toDir, backupDir)[ FD ]
Line_2 $$ public ApplicationResult apply(final ZipFile patchFile, final File rootDir, final File backupDir, final Map<String, ValidationResult.Option> options, UpdaterUI ui) throws IOException, OperationCancelledException -->Line_34 $$ revert(appliedActions, backupDir, rootDir, ui)[ FD ]
Line_4 $$ List<PatchAction> actionsToProcess = new ArrayList<PatchAction>()-->Line_18 $$ forEach(actionsToProcess, "Applying patch...", ui, true, new ActionsProcessor() [ FD ]
Line_9 $$ forEach(actionsToProcess, "Backing up files...", ui, true, new ActionsProcessor() -->Line_11 $$ each.backup(toDir, backupDir)[ FD ]
Line_9 $$ forEach(actionsToProcess, "Backing up files...", ui, true, new ActionsProcessor() -->Line_21 $$ each.apply(patchFile, backupDir, toDir)[ FD ]
Line_6 $$ if (each.shouldApply(toDir, options))-->Line_7 $$ actionsToProcess.add(each)[ CD ]
Line_2 $$ public ApplicationResult apply(final ZipFile patchFile, final File rootDir, final File backupDir, final Map<String, ValidationResult.Option> options, UpdaterUI ui) throws IOException, OperationCancelledException -->Line_4 $$ List<PatchAction> actionsToProcess = new ArrayList<PatchAction>()[ CD ]
Line_3 $$ final File toDir = toBaseDir(rootDir)-->Line_21 $$ each.apply(patchFile, backupDir, toDir)[ FD ]
Line_18 $$ forEach(actionsToProcess, "Applying patch...", ui, true, new ActionsProcessor() -->Line_21 $$ each.apply(patchFile, backupDir, toDir)[ CD ]
Line_2 $$ public ApplicationResult apply(final ZipFile patchFile, final File rootDir, final File backupDir, final Map<String, ValidationResult.Option> options, UpdaterUI ui) throws IOException, OperationCancelledException -->Line_6 $$ if (each.shouldApply(toDir, options))[ FD ]
Line_2 $$ public ApplicationResult apply(final ZipFile patchFile, final File rootDir, final File backupDir, final Map<String, ValidationResult.Option> options, UpdaterUI ui) throws IOException, OperationCancelledException -->Line_31 $$ ui.showError(e)[ FD ]
Line_18 $$ forEach(actionsToProcess, "Applying patch...", ui, true, new ActionsProcessor() -->Line_20 $$ appliedActions.add(each)[ CD ]
Line_2 $$ public ApplicationResult apply(final ZipFile patchFile, final File rootDir, final File backupDir, final Map<String, ValidationResult.Option> options, UpdaterUI ui) throws IOException, OperationCancelledException -->Line_3 $$ final File toDir = toBaseDir(rootDir)[ CD ]
Line_3 $$ final File toDir = toBaseDir(rootDir)-->Line_6 $$ if (each.shouldApply(toDir, options))[ FD ]
Line_5 $$ for (PatchAction each : myActions) -->Line_20 $$ appliedActions.add(each)[ FD ]
Line_2 $$ public ApplicationResult apply(final ZipFile patchFile, final File rootDir, final File backupDir, final Map<String, ValidationResult.Option> options, UpdaterUI ui) throws IOException, OperationCancelledException -->Line_21 $$ each.apply(patchFile, backupDir, toDir)[ FD ]
Line_5 $$ for (PatchAction each : myActions) -->Line_6 $$ if (each.shouldApply(toDir, options))[ FD ]
Line_18 $$ forEach(actionsToProcess, "Applying patch...", ui, true, new ActionsProcessor() -->Line_20 $$ appliedActions.add(each)[ FD ]
Line_9 $$ forEach(actionsToProcess, "Backing up files...", ui, true, new ActionsProcessor() -->Line_11 $$ each.backup(toDir, backupDir)[ CD ]
Line_3 $$ final File toDir = toBaseDir(rootDir)-->Line_11 $$ each.backup(toDir, backupDir)[ FD ]
Line_9 $$ forEach(actionsToProcess, "Backing up files...", ui, true, new ActionsProcessor() -->Line_20 $$ appliedActions.add(each)[ FD ]
Line_2 $$ public ApplicationResult apply(final ZipFile patchFile, final File rootDir, final File backupDir, final Map<String, ValidationResult.Option> options, UpdaterUI ui) throws IOException, OperationCancelledException -->Line_9 $$ forEach(actionsToProcess, "Backing up files...", ui, true, new ActionsProcessor() [ CD ]
Line_4 $$ List<PatchAction> actionsToProcess = new ArrayList<PatchAction>()-->Line_7 $$ actionsToProcess.add(each)[ FD ]
