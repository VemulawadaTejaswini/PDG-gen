Line_2 $$ public void doubleLink() throws Exception -->Line_17 $$ assertEquals(file.getPath(), target)[ CD ]
Line_2 $$ public void doubleLink() throws Exception -->Line_5 $$ FileUtil.writeToFile(file, myTestData)[ CD ]
Line_2 $$ public void doubleLink() throws Exception -->Line_11 $$ assertEquals(FileAttributes.Type.FILE, attributes.type)[ CD ]
Line_2 $$ public void doubleLink() throws Exception -->Line_12 $$ assertEquals(FileAttributes.SYM_LINK | FileAttributes.READ_ONLY, attributes.flags)[ CD ]
Line_2 $$ public void doubleLink() throws Exception -->Line_4 $$ final File file = FileUtil.createTempFile(myTempDirectory, "test.", ".txt")[ CD ]
Line_2 $$ public void doubleLink() throws Exception -->Line_8 $$ final File link1 = IoTestUtil.createSymLink(file.getPath(), new File(myTempDirectory, "link1").getPath())[ CD ]
Line_4 $$ final File file = FileUtil.createTempFile(myTempDirectory, "test.", ".txt")-->Line_8 $$ final File link1 = IoTestUtil.createSymLink(file.getPath(), new File(myTempDirectory, "link1").getPath())[ FD ]
Line_2 $$ public void doubleLink() throws Exception -->Line_10 $$ final FileAttributes attributes = getAttributes(link2)[ CD ]
Line_16 $$ final String target = FileSystemUtil.resolveSymLink(link2)-->Line_17 $$ assertEquals(file.getPath(), target)[ FD ]
Line_2 $$ public void doubleLink() throws Exception -->Line_13 $$ assertEquals(myTestData.length, attributes.length)[ CD ]
Line_2 $$ public void doubleLink() throws Exception -->Line_3 $$ assumeTrue(SystemInfo.areSymLinksSupported)[ CD ]
Line_8 $$ final File link1 = IoTestUtil.createSymLink(file.getPath(), new File(myTempDirectory, "link1").getPath())-->Line_9 $$ final File link2 = IoTestUtil.createSymLink(link1.getPath(), new File(myTempDirectory, "link2").getPath())[ FD ]
Line_9 $$ final File link2 = IoTestUtil.createSymLink(link1.getPath(), new File(myTempDirectory, "link2").getPath())-->Line_16 $$ final String target = FileSystemUtil.resolveSymLink(link2)[ FD ]
Line_4 $$ final File file = FileUtil.createTempFile(myTempDirectory, "test.", ".txt")-->Line_17 $$ assertEquals(file.getPath(), target)[ FD ]
Line_4 $$ final File file = FileUtil.createTempFile(myTempDirectory, "test.", ".txt")-->Line_7 $$ assertTrue(file.setWritable(false, false))[ FD ]
Line_10 $$ final FileAttributes attributes = getAttributes(link2)-->Line_15 $$ assertFalse(attributes.isWritable())[ FD ]
Line_2 $$ public void doubleLink() throws Exception -->Line_14 $$ assertTimestampsEqual(file.lastModified(), attributes.lastModified)[ CD ]
Line_2 $$ public void doubleLink() throws Exception -->Line_15 $$ assertFalse(attributes.isWritable())[ CD ]
Line_2 $$ public void doubleLink() throws Exception -->Line_16 $$ final String target = FileSystemUtil.resolveSymLink(link2)[ CD ]
Line_2 $$ public void doubleLink() throws Exception -->Line_6 $$ assertTrue(file.setLastModified(file.lastModified() - 5000))[ CD ]
Line_4 $$ final File file = FileUtil.createTempFile(myTempDirectory, "test.", ".txt")-->Line_6 $$ assertTrue(file.setLastModified(file.lastModified() - 5000))[ FD ]
Line_4 $$ final File file = FileUtil.createTempFile(myTempDirectory, "test.", ".txt")-->Line_5 $$ FileUtil.writeToFile(file, myTestData)[ FD ]
Line_2 $$ public void doubleLink() throws Exception -->Line_7 $$ assertTrue(file.setWritable(false, false))[ CD ]
Line_2 $$ public void doubleLink() throws Exception -->Line_9 $$ final File link2 = IoTestUtil.createSymLink(link1.getPath(), new File(myTempDirectory, "link2").getPath())[ CD ]
Line_4 $$ final File file = FileUtil.createTempFile(myTempDirectory, "test.", ".txt")-->Line_14 $$ assertTimestampsEqual(file.lastModified(), attributes.lastModified)[ FD ]
Line_9 $$ final File link2 = IoTestUtil.createSymLink(link1.getPath(), new File(myTempDirectory, "link2").getPath())-->Line_10 $$ final FileAttributes attributes = getAttributes(link2)[ FD ]
