Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, final boolean hasFocus, int row, int column) -->Line_20 $$ if (!table.isShowing()) [ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, final boolean hasFocus, int row, int column) -->Line_5 $$ Document document = null[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, final boolean hasFocus, int row, int column) -->Line_23 $$ editorTextField.putClientProperty("JComboBox.isTableCellEditor", Boolean.TRUE)[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, final boolean hasFocus, int row, int column) -->Line_32 $$ return editorTextField[ CD ]
Line_8 $$ editorTextField = new EditorTextField(document, myProject, myFileType) -->Line_10 $$ return false[ CD ]
Line_25 $$ if (isSelected && document != null) -->Line_27 $$ final Color fg = table.getSelectionForeground()[ CD ]
Line_25 $$ if (isSelected && document != null) -->Line_28 $$ editorTextField.setBackground(bg)[ CD ]
Line_4 $$ final EditorTextField editorTextField-->Line_21 $$ editorTextField.ensureWillComputePreferredSize()[ FD ]
Line_4 $$ final EditorTextField editorTextField-->Line_30 $$ editorTextField.setAsRendererWithSelection(bg, fg)[ FD ]
Line_8 $$ editorTextField = new EditorTextField(document, myProject, myFileType) -->Line_29 $$ editorTextField.setForeground(fg)[ FD ]
Line_25 $$ if (isSelected && document != null) -->Line_29 $$ editorTextField.setForeground(fg)[ CD ]
Line_5 $$ Document document = null-->Line_7 $$ document = PsiDocumentManager.getInstance(myProject).getDocument(codeFragment)[ FD ]
Line_8 $$ editorTextField = new EditorTextField(document, myProject, myFileType) -->Line_23 $$ editorTextField.putClientProperty("JComboBox.isTableCellEditor", Boolean.TRUE)[ FD ]
Line_4 $$ final EditorTextField editorTextField-->Line_24 $$ editorTextField.setBorder((hasFocus || isSelected) ? BorderFactory.createLineBorder(table.getSelectionBackground()) : IdeBorderFactory.createEmptyBorder(1))[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, final boolean hasFocus, int row, int column) -->Line_24 $$ editorTextField.setBorder((hasFocus || isSelected) ? BorderFactory.createLineBorder(table.getSelectionBackground()) : IdeBorderFactory.createEmptyBorder(1))[ FD ]
Line_8 $$ editorTextField = new EditorTextField(document, myProject, myFileType) -->Line_24 $$ editorTextField.setBorder((hasFocus || isSelected) ? BorderFactory.createLineBorder(table.getSelectionBackground()) : IdeBorderFactory.createEmptyBorder(1))[ FD ]
Line_3 $$ PsiCodeFragment codeFragment = (PsiCodeFragment) value-->Line_7 $$ document = PsiDocumentManager.getInstance(myProject).getDocument(codeFragment)[ FD ]
Line_6 $$ if (codeFragment != null) -->Line_8 $$ editorTextField = new EditorTextField(document, myProject, myFileType) [ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, final boolean hasFocus, int row, int column) -->Line_3 $$ PsiCodeFragment codeFragment = (PsiCodeFragment) value[ CD ]
Line_20 $$ if (!table.isShowing()) -->Line_21 $$ editorTextField.ensureWillComputePreferredSize()[ CD ]
Line_25 $$ if (isSelected && document != null) -->Line_30 $$ editorTextField.setAsRendererWithSelection(bg, fg)[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, final boolean hasFocus, int row, int column) -->Line_26 $$ final Color bg = table.getSelectionBackground()[ FD ]
Line_4 $$ final EditorTextField editorTextField-->Line_23 $$ editorTextField.putClientProperty("JComboBox.isTableCellEditor", Boolean.TRUE)[ FD ]
Line_4 $$ final EditorTextField editorTextField-->Line_8 $$ editorTextField = new EditorTextField(document, myProject, myFileType) [ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, final boolean hasFocus, int row, int column) -->Line_25 $$ if (isSelected && document != null) [ FD ]
Line_25 $$ if (isSelected && document != null) -->Line_26 $$ final Color bg = table.getSelectionBackground()[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, final boolean hasFocus, int row, int column) -->Line_4 $$ final EditorTextField editorTextField[ CD ]
Line_6 $$ if (codeFragment != null) -->Line_7 $$ document = PsiDocumentManager.getInstance(myProject).getDocument(codeFragment)[ CD ]
Line_4 $$ final EditorTextField editorTextField-->Line_28 $$ editorTextField.setBackground(bg)[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, final boolean hasFocus, int row, int column) -->Line_20 $$ if (!table.isShowing()) [ FD ]
Line_4 $$ final EditorTextField editorTextField-->Line_29 $$ editorTextField.setForeground(fg)[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, final boolean hasFocus, int row, int column) -->Line_6 $$ if (codeFragment != null) [ CD ]
Line_14 $$ editorTextField = new EditorTextField("", myProject, myFileType) -->Line_16 $$ return false[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, final boolean hasFocus, int row, int column) -->Line_25 $$ if (isSelected && document != null) [ CD ]
Line_3 $$ PsiCodeFragment codeFragment = (PsiCodeFragment) value-->Line_6 $$ if (codeFragment != null) [ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, final boolean hasFocus, int row, int column) -->Line_24 $$ editorTextField.setBorder((hasFocus || isSelected) ? BorderFactory.createLineBorder(table.getSelectionBackground()) : IdeBorderFactory.createEmptyBorder(1))[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, final boolean hasFocus, int row, int column) -->Line_27 $$ final Color fg = table.getSelectionForeground()[ FD ]
Line_8 $$ editorTextField = new EditorTextField(document, myProject, myFileType) -->Line_28 $$ editorTextField.setBackground(bg)[ FD ]
Line_8 $$ editorTextField = new EditorTextField(document, myProject, myFileType) -->Line_30 $$ editorTextField.setAsRendererWithSelection(bg, fg)[ FD ]
Line_8 $$ editorTextField = new EditorTextField(document, myProject, myFileType) -->Line_21 $$ editorTextField.ensureWillComputePreferredSize()[ FD ]
