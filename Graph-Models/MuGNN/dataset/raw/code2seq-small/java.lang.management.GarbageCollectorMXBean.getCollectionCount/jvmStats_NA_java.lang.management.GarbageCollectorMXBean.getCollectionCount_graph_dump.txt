Line_41 $$ for (int i = 0; i < stats.gc.collectors.length; i++) -->Line_42 $$ GarbageCollectorMXBean gcMxBean = gcMxBeans.get(i)[ CD ]
Line_2 $$ public static JvmStats jvmStats() -->Line_7 $$ stats.mem.heapCommitted = memUsage.getCommitted() < 0 ? 0 : memUsage.getCommitted()[ CD ]
Line_13 $$ List<MemoryPool> pools = new ArrayList()-->Line_24 $$ pools.add(new MemoryPool(name, usage.getUsed() < 0 ? 0 : usage.getUsed(), usage.getMax() < 0 ? 0 : usage.getMax(), peakUsage.getUsed() < 0 ? 0 : peakUsage.getUsed(), peakUsage.getMax() < 0 ? 0 : peakUsage.getMax()))[ FD ]
Line_2 $$ public static JvmStats jvmStats() -->Line_9 $$ memUsage = memoryMXBean.getNonHeapMemoryUsage()[ CD ]
Line_38 $$ List<GarbageCollectorMXBean> gcMxBeans = ManagementFactory.getGarbageCollectorMXBeans()-->Line_40 $$ stats.gc.collectors = new GarbageCollector[gcMxBeans.size()][ FD ]
Line_9 $$ memUsage = memoryMXBean.getNonHeapMemoryUsage()-->Line_11 $$ stats.mem.nonHeapCommitted = memUsage.getCommitted() < 0 ? 0 : memUsage.getCommitted()[ FD ]
Line_41 $$ for (int i = 0; i < stats.gc.collectors.length; i++) -->Line_46 $$ stats.gc.collectors[i].collectionTime = gcMxBean.getCollectionTime()[ CD ]
Line_5 $$ MemoryUsage memUsage = memoryMXBean.getHeapMemoryUsage()-->Line_10 $$ stats.mem.nonHeapUsed = memUsage.getUsed() < 0 ? 0 : memUsage.getUsed()[ FD ]
Line_2 $$ public static JvmStats jvmStats() -->Line_8 $$ stats.mem.heapMax = memUsage.getMax() < 0 ? 0 : memUsage.getMax()[ CD ]
Line_42 $$ GarbageCollectorMXBean gcMxBean = gcMxBeans.get(i)-->Line_46 $$ stats.gc.collectors[i].collectionTime = gcMxBean.getCollectionTime()[ FD ]
Line_2 $$ public static JvmStats jvmStats() -->Line_57 $$ stats.classes = new Classes()[ CD ]
Line_49 $$ List<BufferPoolMXBean> bufferPools = ManagementFactory.getPlatformMXBeans(BufferPoolMXBean.class)-->Line_50 $$ stats.bufferPools = new ArrayList(bufferPools.size())[ FD ]
Line_2 $$ public static JvmStats jvmStats() -->Line_61 $$ return stats[ CD ]
Line_42 $$ GarbageCollectorMXBean gcMxBean = gcMxBeans.get(i)-->Line_44 $$ stats.gc.collectors[i].name = GcNames.getByGcName(gcMxBean.getName(), gcMxBean.getName())[ FD ]
Line_2 $$ public static JvmStats jvmStats() -->Line_60 $$ stats.classes.unloadedClassCount = classLoadingMXBean.getUnloadedClassCount()[ CD ]
Line_14 $$ for (int i = 0; i < memoryPoolMXBeans.size(); i++) -->Line_16 $$ MemoryPoolMXBean memoryPoolMXBean = memoryPoolMXBeans.get(i)[ FD ]
Line_5 $$ MemoryUsage memUsage = memoryMXBean.getHeapMemoryUsage()-->Line_6 $$ stats.mem.heapUsed = memUsage.getUsed() < 0 ? 0 : memUsage.getUsed()[ FD ]
Line_2 $$ public static JvmStats jvmStats() -->Line_6 $$ stats.mem.heapUsed = memUsage.getUsed() < 0 ? 0 : memUsage.getUsed()[ CD ]
Line_2 $$ public static JvmStats jvmStats() -->Line_58 $$ stats.classes.loadedClassCount = classLoadingMXBean.getLoadedClassCount()[ CD ]
Line_2 $$ public static JvmStats jvmStats() -->Line_14 $$ for (int i = 0; i < memoryPoolMXBeans.size(); i++) [ CD ]
Line_2 $$ public static JvmStats jvmStats() -->Line_37 $$ stats.threads.peakCount = threadMXBean.getPeakThreadCount()[ CD ]
Line_16 $$ MemoryPoolMXBean memoryPoolMXBean = memoryPoolMXBeans.get(i)-->Line_17 $$ MemoryUsage usage = memoryPoolMXBean.getUsage()[ FD ]
Line_19 $$ String name = GcNames.getByMemoryPoolName(memoryPoolMXBean.getName(), null)-->Line_20 $$ if (name == null) [ FD ]
Line_2 $$ public static JvmStats jvmStats() -->Line_39 $$ stats.gc = new GarbageCollectors()[ CD ]
Line_16 $$ MemoryPoolMXBean memoryPoolMXBean = memoryPoolMXBeans.get(i)-->Line_18 $$ MemoryUsage peakUsage = memoryPoolMXBean.getPeakUsage()[ FD ]
Line_12 $$ List<MemoryPoolMXBean> memoryPoolMXBeans = ManagementFactory.getMemoryPoolMXBeans()-->Line_16 $$ MemoryPoolMXBean memoryPoolMXBean = memoryPoolMXBeans.get(i)[ FD ]
Line_2 $$ public static JvmStats jvmStats() -->Line_36 $$ stats.threads.count = threadMXBean.getThreadCount()[ CD ]
Line_5 $$ MemoryUsage memUsage = memoryMXBean.getHeapMemoryUsage()-->Line_11 $$ stats.mem.nonHeapCommitted = memUsage.getCommitted() < 0 ? 0 : memUsage.getCommitted()[ FD ]
Line_2 $$ public static JvmStats jvmStats() -->Line_35 $$ stats.threads = new Threads()[ CD ]
Line_18 $$ MemoryUsage peakUsage = memoryPoolMXBean.getPeakUsage()-->Line_24 $$ pools.add(new MemoryPool(name, usage.getUsed() < 0 ? 0 : usage.getUsed(), usage.getMax() < 0 ? 0 : usage.getMax(), peakUsage.getUsed() < 0 ? 0 : peakUsage.getUsed(), peakUsage.getMax() < 0 ? 0 : peakUsage.getMax()))[ FD ]
Line_2 $$ public static JvmStats jvmStats() -->Line_41 $$ for (int i = 0; i < stats.gc.collectors.length; i++) [ CD ]
Line_41 $$ for (int i = 0; i < stats.gc.collectors.length; i++) -->Line_42 $$ GarbageCollectorMXBean gcMxBean = gcMxBeans.get(i)[ FD ]
Line_2 $$ public static JvmStats jvmStats() -->Line_59 $$ stats.classes.totalLoadedClassCount = classLoadingMXBean.getTotalLoadedClassCount()[ CD ]
Line_51 $$ for (BufferPoolMXBean bufferPool : bufferPools) -->Line_52 $$ stats.bufferPools.add(new BufferPool(bufferPool.getName(), bufferPool.getCount(), bufferPool.getTotalCapacity(), bufferPool.getMemoryUsed()))[ FD ]
Line_14 $$ for (int i = 0; i < memoryPoolMXBeans.size(); i++) -->Line_41 $$ for (int i = 0; i < stats.gc.collectors.length; i++) [ FD ]
Line_38 $$ List<GarbageCollectorMXBean> gcMxBeans = ManagementFactory.getGarbageCollectorMXBeans()-->Line_42 $$ GarbageCollectorMXBean gcMxBean = gcMxBeans.get(i)[ FD ]
Line_2 $$ public static JvmStats jvmStats() -->Line_34 $$ stats.mem.pools = pools.toArray(new MemoryPool[pools.size()])[ CD ]
Line_2 $$ public static JvmStats jvmStats() -->Line_5 $$ MemoryUsage memUsage = memoryMXBean.getHeapMemoryUsage()[ CD ]
Line_2 $$ public static JvmStats jvmStats() -->Line_12 $$ List<MemoryPoolMXBean> memoryPoolMXBeans = ManagementFactory.getMemoryPoolMXBeans()[ CD ]
Line_13 $$ List<MemoryPool> pools = new ArrayList()-->Line_34 $$ stats.mem.pools = pools.toArray(new MemoryPool[pools.size()])[ FD ]
Line_12 $$ List<MemoryPoolMXBean> memoryPoolMXBeans = ManagementFactory.getMemoryPoolMXBeans()-->Line_14 $$ for (int i = 0; i < memoryPoolMXBeans.size(); i++) [ FD ]
Line_42 $$ GarbageCollectorMXBean gcMxBean = gcMxBeans.get(i)-->Line_45 $$ stats.gc.collectors[i].collectionCount = gcMxBean.getCollectionCount()[ FD ]
Line_9 $$ memUsage = memoryMXBean.getNonHeapMemoryUsage()-->Line_10 $$ stats.mem.nonHeapUsed = memUsage.getUsed() < 0 ? 0 : memUsage.getUsed()[ FD ]
Line_2 $$ public static JvmStats jvmStats() -->Line_4 $$ stats.mem = new Mem()[ CD ]
Line_5 $$ MemoryUsage memUsage = memoryMXBean.getHeapMemoryUsage()-->Line_9 $$ memUsage = memoryMXBean.getNonHeapMemoryUsage()[ FD ]
Line_5 $$ MemoryUsage memUsage = memoryMXBean.getHeapMemoryUsage()-->Line_8 $$ stats.mem.heapMax = memUsage.getMax() < 0 ? 0 : memUsage.getMax()[ FD ]
Line_41 $$ for (int i = 0; i < stats.gc.collectors.length; i++) -->Line_43 $$ stats.gc.collectors[i] = new GarbageCollector()[ CD ]
Line_2 $$ public static JvmStats jvmStats() -->Line_38 $$ List<GarbageCollectorMXBean> gcMxBeans = ManagementFactory.getGarbageCollectorMXBeans()[ CD ]
Line_14 $$ for (int i = 0; i < memoryPoolMXBeans.size(); i++) -->Line_42 $$ GarbageCollectorMXBean gcMxBean = gcMxBeans.get(i)[ FD ]
Line_41 $$ for (int i = 0; i < stats.gc.collectors.length; i++) -->Line_45 $$ stats.gc.collectors[i].collectionCount = gcMxBean.getCollectionCount()[ CD ]
Line_2 $$ public static JvmStats jvmStats() -->Line_40 $$ stats.gc.collectors = new GarbageCollector[gcMxBeans.size()][ CD ]
Line_2 $$ public static JvmStats jvmStats() -->Line_3 $$ JvmStats stats = new JvmStats(System.currentTimeMillis(), runtimeMXBean.getUptime())[ CD ]
Line_5 $$ MemoryUsage memUsage = memoryMXBean.getHeapMemoryUsage()-->Line_7 $$ stats.mem.heapCommitted = memUsage.getCommitted() < 0 ? 0 : memUsage.getCommitted()[ FD ]
Line_2 $$ public static JvmStats jvmStats() -->Line_10 $$ stats.mem.nonHeapUsed = memUsage.getUsed() < 0 ? 0 : memUsage.getUsed()[ CD ]
Line_2 $$ public static JvmStats jvmStats() -->Line_13 $$ List<MemoryPool> pools = new ArrayList()[ CD ]
Line_41 $$ for (int i = 0; i < stats.gc.collectors.length; i++) -->Line_44 $$ stats.gc.collectors[i].name = GcNames.getByGcName(gcMxBean.getName(), gcMxBean.getName())[ CD ]
Line_17 $$ MemoryUsage usage = memoryPoolMXBean.getUsage()-->Line_24 $$ pools.add(new MemoryPool(name, usage.getUsed() < 0 ? 0 : usage.getUsed(), usage.getMax() < 0 ? 0 : usage.getMax(), peakUsage.getUsed() < 0 ? 0 : peakUsage.getUsed(), peakUsage.getMax() < 0 ? 0 : peakUsage.getMax()))[ FD ]
Line_2 $$ public static JvmStats jvmStats() -->Line_11 $$ stats.mem.nonHeapCommitted = memUsage.getCommitted() < 0 ? 0 : memUsage.getCommitted()[ CD ]
Line_16 $$ MemoryPoolMXBean memoryPoolMXBean = memoryPoolMXBeans.get(i)-->Line_19 $$ String name = GcNames.getByMemoryPoolName(memoryPoolMXBean.getName(), null)[ FD ]
