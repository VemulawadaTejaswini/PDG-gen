Line_20 $$ ImmutableList.Builder<String> columnList = ImmutableList.builder()-->Line_30 $$ Joiner.on(", ").appendTo(sql, columnList.build())[ FD ]
Line_2 $$ public JdbcOutputTableHandle beginCreateTable(ConnectorTableMetadata tableMetadata) -->Line_5 $$ String table = schemaTableName.getTableName()[ CD ]
Line_17 $$ StringBuilder sql = new StringBuilder().append("CREATE TABLE ").append(quoted(catalog, schema, temporaryName)).append(" (")-->Line_31 $$ sql.append(")")[ FD ]
Line_9 $$ try (Connection connection = driver.connect(connectionUrl, connectionProperties)) -->Line_15 $$ String catalog = connection.getCatalog()[ FD ]
Line_15 $$ String catalog = connection.getCatalog()-->Line_17 $$ StringBuilder sql = new StringBuilder().append("CREATE TABLE ").append(quoted(catalog, schema, temporaryName)).append(" (")[ FD ]
Line_20 $$ ImmutableList.Builder<String> columnList = ImmutableList.builder()-->Line_28 $$ columnList.add(new StringBuilder().append(quoted(columnName)).append(" ").append(toSqlType(column.getType())).toString())[ FD ]
Line_4 $$ String schema = schemaTableName.getSchemaName()-->Line_17 $$ StringBuilder sql = new StringBuilder().append("CREATE TABLE ").append(quoted(catalog, schema, temporaryName)).append(" (")[ FD ]
Line_19 $$ ImmutableList.Builder<Type> columnTypes = ImmutableList.builder()-->Line_33 $$ return new JdbcOutputTableHandle(connectorId, catalog, schema, table, columnNames.build(), columnTypes.build(), tableMetadata.getOwner(), temporaryName, connectionUrl, fromProperties(connectionProperties))[ FD ]
Line_2 $$ public JdbcOutputTableHandle beginCreateTable(ConnectorTableMetadata tableMetadata) -->Line_21 $$ for (ColumnMetadata column : tableMetadata.getColumns()) [ FD ]
Line_18 $$ ImmutableList.Builder<String> columnNames = ImmutableList.builder()-->Line_33 $$ return new JdbcOutputTableHandle(connectorId, catalog, schema, table, columnNames.build(), columnTypes.build(), tableMetadata.getOwner(), temporaryName, connectionUrl, fromProperties(connectionProperties))[ FD ]
Line_11 $$ if (uppercase) -->Line_13 $$ table = table.toUpperCase(ENGLISH)[ CD ]
Line_22 $$ String columnName = column.getName()-->Line_26 $$ columnNames.add(columnName)[ FD ]
Line_24 $$ columnName = columnName.toUpperCase(ENGLISH)-->Line_26 $$ columnNames.add(columnName)[ FD ]
Line_22 $$ String columnName = column.getName()-->Line_24 $$ columnName = columnName.toUpperCase(ENGLISH)[ FD ]
Line_5 $$ String table = schemaTableName.getTableName()-->Line_13 $$ table = table.toUpperCase(ENGLISH)[ FD ]
Line_21 $$ for (ColumnMetadata column : tableMetadata.getColumns()) -->Line_27 $$ columnTypes.add(column.getType())[ FD ]
Line_3 $$ SchemaTableName schemaTableName = tableMetadata.getTable()-->Line_4 $$ String schema = schemaTableName.getSchemaName()[ FD ]
Line_9 $$ try (Connection connection = driver.connect(connectionUrl, connectionProperties)) -->Line_10 $$ boolean uppercase = connection.getMetaData().storesUpperCaseIdentifiers()[ FD ]
Line_19 $$ ImmutableList.Builder<Type> columnTypes = ImmutableList.builder()-->Line_27 $$ columnTypes.add(column.getType())[ FD ]
Line_9 $$ try (Connection connection = driver.connect(connectionUrl, connectionProperties)) -->Line_32 $$ execute(connection, sql.toString())[ FD ]
Line_3 $$ SchemaTableName schemaTableName = tableMetadata.getTable()-->Line_5 $$ String table = schemaTableName.getTableName()[ FD ]
Line_22 $$ String columnName = column.getName()-->Line_28 $$ columnList.add(new StringBuilder().append(quoted(columnName)).append(" ").append(toSqlType(column.getType())).toString())[ FD ]
Line_2 $$ public JdbcOutputTableHandle beginCreateTable(ConnectorTableMetadata tableMetadata) -->Line_6 $$ if (!getSchemaNames().contains(schema)) [ CD ]
Line_16 $$ String temporaryName = "tmp_presto_" + UUID.randomUUID().toString().replace("-", "")-->Line_17 $$ StringBuilder sql = new StringBuilder().append("CREATE TABLE ").append(quoted(catalog, schema, temporaryName)).append(" (")[ FD ]
Line_21 $$ for (ColumnMetadata column : tableMetadata.getColumns()) -->Line_28 $$ columnList.add(new StringBuilder().append(quoted(columnName)).append(" ").append(toSqlType(column.getType())).toString())[ FD ]
Line_4 $$ String schema = schemaTableName.getSchemaName()-->Line_6 $$ if (!getSchemaNames().contains(schema)) [ FD ]
Line_12 $$ schema = schema.toUpperCase(ENGLISH)-->Line_17 $$ StringBuilder sql = new StringBuilder().append("CREATE TABLE ").append(quoted(catalog, schema, temporaryName)).append(" (")[ FD ]
Line_23 $$ if (uppercase) -->Line_24 $$ columnName = columnName.toUpperCase(ENGLISH)[ CD ]
Line_17 $$ StringBuilder sql = new StringBuilder().append("CREATE TABLE ").append(quoted(catalog, schema, temporaryName)).append(" (")-->Line_32 $$ execute(connection, sql.toString())[ FD ]
Line_24 $$ columnName = columnName.toUpperCase(ENGLISH)-->Line_28 $$ columnList.add(new StringBuilder().append(quoted(columnName)).append(" ").append(toSqlType(column.getType())).toString())[ FD ]
Line_4 $$ String schema = schemaTableName.getSchemaName()-->Line_12 $$ schema = schema.toUpperCase(ENGLISH)[ FD ]
Line_11 $$ if (uppercase) -->Line_12 $$ schema = schema.toUpperCase(ENGLISH)[ CD ]
Line_2 $$ public JdbcOutputTableHandle beginCreateTable(ConnectorTableMetadata tableMetadata) -->Line_3 $$ SchemaTableName schemaTableName = tableMetadata.getTable()[ FD ]
Line_2 $$ public JdbcOutputTableHandle beginCreateTable(ConnectorTableMetadata tableMetadata) -->Line_3 $$ SchemaTableName schemaTableName = tableMetadata.getTable()[ CD ]
Line_21 $$ for (ColumnMetadata column : tableMetadata.getColumns()) -->Line_22 $$ String columnName = column.getName()[ FD ]
Line_17 $$ StringBuilder sql = new StringBuilder().append("CREATE TABLE ").append(quoted(catalog, schema, temporaryName)).append(" (")-->Line_30 $$ Joiner.on(", ").appendTo(sql, columnList.build())[ FD ]
Line_2 $$ public JdbcOutputTableHandle beginCreateTable(ConnectorTableMetadata tableMetadata) -->Line_33 $$ return new JdbcOutputTableHandle(connectorId, catalog, schema, table, columnNames.build(), columnTypes.build(), tableMetadata.getOwner(), temporaryName, connectionUrl, fromProperties(connectionProperties))[ FD ]
Line_18 $$ ImmutableList.Builder<String> columnNames = ImmutableList.builder()-->Line_26 $$ columnNames.add(columnName)[ FD ]
Line_2 $$ public JdbcOutputTableHandle beginCreateTable(ConnectorTableMetadata tableMetadata) -->Line_4 $$ String schema = schemaTableName.getSchemaName()[ CD ]
