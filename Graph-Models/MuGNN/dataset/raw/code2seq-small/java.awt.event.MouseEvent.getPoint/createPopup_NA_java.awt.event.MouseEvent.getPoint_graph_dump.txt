Line_8 $$ final ChooseByNamePopup popup = new ChooseByNamePopup(project, model, new GotoActionItemProvider(model), oldPopup, initialText, false, initialIndex) -->Line_40 $$ super.setDisposed(disposedFlag)[ CD ]
Line_11 $$ myList.addListSelectionListener(new ListSelectionListener() -->Line_76 $$ if (o instanceof GotoActionModel.MatchedValue) [ FD ]
Line_8 $$ final ChooseByNamePopup popup = new ChooseByNamePopup(project, model, new GotoActionItemProvider(model), oldPopup, initialText, false, initialIndex) -->Line_73 $$ new DumbAwareAction() [ FD ]
Line_50 $$ Disposer.register(pw, new Disposable() -->Line_52 $$ if (!popup.checkDisposed()) [ CD ]
Line_8 $$ final ChooseByNamePopup popup = new ChooseByNamePopup(project, model, new GotoActionItemProvider(model), oldPopup, initialText, false, initialIndex) -->Line_45 $$ UIUtil.dispose(myList)[ CD ]
Line_78 $$ if (value instanceof GotoActionModel.ActionWrapper) -->Line_80 $$ boolean available = aw.isAvailable()[ CD ]
Line_8 $$ final ChooseByNamePopup popup = new ChooseByNamePopup(project, model, new GotoActionItemProvider(model), oldPopup, initialText, false, initialIndex) -->Line_34 $$ if (!ok)[ CD ]
Line_78 $$ if (value instanceof GotoActionModel.ActionWrapper) -->Line_81 $$ if (available) [ CD ]
Line_2 $$ private static ChooseByNamePopup createPopup(@Nullable Project project, @NotNull final GotoActionModel model, String initialText, int initialIndex, final Component component, final AnActionEvent e) -->Line_60 $$ project.putUserData(ChooseByNamePopup.CHOOSE_BY_NAME_POPUP_IN_PROJECT_KEY, popup)[ FD ]
Line_76 $$ if (o instanceof GotoActionModel.MatchedValue) -->Line_77 $$ Comparable value = ((GotoActionModel.MatchedValue) o).value[ CD ]
Line_81 $$ if (available) -->Line_89 $$ popup.repaintListImmediate()[ CD ]
Line_62 $$ popup.addMouseClickListener(new MouseAdapter() -->Line_64 $$ Object element = popup.getSelectionByPoint(me.getPoint())[ FD ]
Line_81 $$ if (available) -->Line_85 $$ Keymap k = km.getActiveKeymap()[ CD ]
Line_81 $$ if (available) -->Line_86 $$ if (!k.canModify())[ CD ]
Line_8 $$ final ChooseByNamePopup popup = new ChooseByNamePopup(project, model, new GotoActionItemProvider(model), oldPopup, initialText, false, initialIndex) -->Line_40 $$ super.setDisposed(disposedFlag)[ FD ]
Line_75 $$ Object o = popup.getChosenElement()-->Line_76 $$ if (o instanceof GotoActionModel.MatchedValue) [ FD ]
Line_7 $$ final Disposable disposable = Disposer.newDisposable()-->Line_73 $$ new DumbAwareAction() [ FD ]
Line_2 $$ private static ChooseByNamePopup createPopup(@Nullable Project project, @NotNull final GotoActionModel model, String initialText, int initialIndex, final Component component, final AnActionEvent e) -->Line_48 $$ ApplicationManager.getApplication().getMessageBus().connect(disposable).subscribe(ProgressWindow.TOPIC, new ProgressWindow.Listener() [ CD ]
Line_2 $$ private static ChooseByNamePopup createPopup(@Nullable Project project, @NotNull final GotoActionModel model, String initialText, int initialIndex, final Component component, final AnActionEvent e) -->Line_95 $$ return popup[ CD ]
Line_84 $$ KeymapManagerImpl km = ((KeymapManagerImpl) KeymapManager.getInstance())-->Line_85 $$ Keymap k = km.getActiveKeymap()[ FD ]
Line_11 $$ myList.addListSelectionListener(new ListSelectionListener() -->Line_37 $$ return element instanceof GotoActionModel.MatchedValue && processOptionInplace(((GotoActionModel.MatchedValue) element).value, this, component, e) || super.closeForbidden(true)[ FD ]
Line_66 $$ if (processOptionInplace(((GotoActionModel.MatchedValue) element).value, popup, component, e)) -->Line_67 $$ me.consume()[ CD ]
Line_11 $$ myList.addListSelectionListener(new ListSelectionListener() -->Line_20 $$ if (o instanceof GotoActionModel.MatchedValue) [ FD ]
Line_2 $$ private static ChooseByNamePopup createPopup(@Nullable Project project, @NotNull final GotoActionModel model, String initialText, int initialIndex, final Component component, final AnActionEvent e) -->Line_3 $$ ChooseByNamePopup oldPopup = project == null ? null : project.getUserData(ChooseByNamePopup.CHOOSE_BY_NAME_POPUP_IN_PROJECT_KEY)[ CD ]
Line_48 $$ ApplicationManager.getApplication().getMessageBus().connect(disposable).subscribe(ProgressWindow.TOPIC, new ProgressWindow.Listener() -->Line_50 $$ Disposer.register(pw, new Disposable() [ CD ]
Line_15 $$ if (text != null && myDropdownPopup != null) -->Line_16 $$ myDropdownPopup.setAdText(text, SwingConstants.LEFT)[ CD ]
Line_2 $$ private static ChooseByNamePopup createPopup(@Nullable Project project, @NotNull final GotoActionModel model, String initialText, int initialIndex, final Component component, final AnActionEvent e) -->Line_88 $$ KeymapPanel.addKeyboardShortcut(id, ArrayUtil.getFirstElement(k.getShortcuts(id)), k, component, new QuickList[] [ FD ]
Line_8 $$ final ChooseByNamePopup popup = new ChooseByNamePopup(project, model, new GotoActionItemProvider(model), oldPopup, initialText, false, initialIndex) -->Line_31 $$ return super.filter(model.sort(elements))[ FD ]
Line_2 $$ private static ChooseByNamePopup createPopup(@Nullable Project project, @NotNull final GotoActionModel model, String initialText, int initialIndex, final Component component, final AnActionEvent e) -->Line_59 $$ if (project != null) [ FD ]
Line_8 $$ final ChooseByNamePopup popup = new ChooseByNamePopup(project, model, new GotoActionItemProvider(model), oldPopup, initialText, false, initialIndex) -->Line_66 $$ if (processOptionInplace(((GotoActionModel.MatchedValue) element).value, popup, component, e)) [ FD ]
Line_8 $$ final ChooseByNamePopup popup = new ChooseByNamePopup(project, model, new GotoActionItemProvider(model), oldPopup, initialText, false, initialIndex) -->Line_37 $$ return element instanceof GotoActionModel.MatchedValue && processOptionInplace(((GotoActionModel.MatchedValue) element).value, this, component, e) || super.closeForbidden(true)[ CD ]
Line_8 $$ final ChooseByNamePopup popup = new ChooseByNamePopup(project, model, new GotoActionItemProvider(model), oldPopup, initialText, false, initialIndex) -->Line_75 $$ Object o = popup.getChosenElement()[ FD ]
Line_79 $$ GotoActionModel.ActionWrapper aw = (GotoActionModel.ActionWrapper) value-->Line_80 $$ boolean available = aw.isAvailable()[ FD ]
Line_11 $$ myList.addListSelectionListener(new ListSelectionListener() -->Line_15 $$ if (text != null && myDropdownPopup != null) [ CD ]
Line_13 $$ Object value = myList.getSelectedValue()-->Line_78 $$ if (value instanceof GotoActionModel.ActionWrapper) [ FD ]
Line_8 $$ final ChooseByNamePopup popup = new ChooseByNamePopup(project, model, new GotoActionItemProvider(model), oldPopup, initialText, false, initialIndex) -->Line_10 $$ super.initUI(callback, modalityState, allowMultipleSelection)[ FD ]
Line_7 $$ final Disposable disposable = Disposer.newDisposable()-->Line_41 $$ Disposer.dispose(disposable)[ FD ]
Line_48 $$ ApplicationManager.getApplication().getMessageBus().connect(disposable).subscribe(ProgressWindow.TOPIC, new ProgressWindow.Listener() -->Line_50 $$ Disposer.register(pw, new Disposable() [ FD ]
Line_59 $$ if (project != null) -->Line_60 $$ project.putUserData(ChooseByNamePopup.CHOOSE_BY_NAME_POPUP_IN_PROJECT_KEY, popup)[ CD ]
Line_8 $$ final ChooseByNamePopup popup = new ChooseByNamePopup(project, model, new GotoActionItemProvider(model), oldPopup, initialText, false, initialIndex) -->Line_64 $$ Object element = popup.getSelectionByPoint(me.getPoint())[ FD ]
Line_81 $$ if (available) -->Line_88 $$ KeymapPanel.addKeyboardShortcut(id, ArrayUtil.getFirstElement(k.getShortcuts(id)), k, component, new QuickList[] [ CD ]
Line_85 $$ Keymap k = km.getActiveKeymap()-->Line_86 $$ if (!k.canModify())[ FD ]
Line_20 $$ if (o instanceof GotoActionModel.MatchedValue) -->Line_22 $$ if (mv.value instanceof BooleanOptionDescription || mv.value instanceof GotoActionModel.ActionWrapper && ((GotoActionModel.ActionWrapper) mv.value).getAction() instanceof ToggleAction) [ CD ]
Line_65 $$ if (element instanceof GotoActionModel.MatchedValue) -->Line_66 $$ if (processOptionInplace(((GotoActionModel.MatchedValue) element).value, popup, component, e)) [ CD ]
Line_52 $$ if (!popup.checkDisposed()) -->Line_53 $$ popup.repaintList()[ CD ]
Line_13 $$ Object value = myList.getSelectedValue()-->Line_14 $$ String text = getText(value)[ FD ]
Line_78 $$ if (value instanceof GotoActionModel.ActionWrapper) -->Line_79 $$ GotoActionModel.ActionWrapper aw = (GotoActionModel.ActionWrapper) value[ CD ]
Line_14 $$ String text = getText(value)-->Line_16 $$ myDropdownPopup.setAdText(text, SwingConstants.LEFT)[ FD ]
Line_34 $$ if (!ok)-->Line_35 $$ return false[ CD ]
Line_8 $$ final ChooseByNamePopup popup = new ChooseByNamePopup(project, model, new GotoActionItemProvider(model), oldPopup, initialText, false, initialIndex) -->Line_31 $$ return super.filter(model.sort(elements))[ CD ]
Line_83 $$ String id = ActionManager.getInstance().getId(action)-->Line_88 $$ KeymapPanel.addKeyboardShortcut(id, ArrayUtil.getFirstElement(k.getShortcuts(id)), k, component, new QuickList[] [ FD ]
Line_76 $$ if (o instanceof GotoActionModel.MatchedValue) -->Line_78 $$ if (value instanceof GotoActionModel.ActionWrapper) [ CD ]
Line_2 $$ private static ChooseByNamePopup createPopup(@Nullable Project project, @NotNull final GotoActionModel model, String initialText, int initialIndex, final Component component, final AnActionEvent e) -->Line_59 $$ if (project != null) [ CD ]
Line_64 $$ Object element = popup.getSelectionByPoint(me.getPoint())-->Line_65 $$ if (element instanceof GotoActionModel.MatchedValue) [ FD ]
Line_85 $$ Keymap k = km.getActiveKeymap()-->Line_88 $$ KeymapPanel.addKeyboardShortcut(id, ArrayUtil.getFirstElement(k.getShortcuts(id)), k, component, new QuickList[] [ FD ]
Line_8 $$ final ChooseByNamePopup popup = new ChooseByNamePopup(project, model, new GotoActionItemProvider(model), oldPopup, initialText, false, initialIndex) -->Line_89 $$ popup.repaintListImmediate()[ FD ]
Line_81 $$ if (available) -->Line_84 $$ KeymapManagerImpl km = ((KeymapManagerImpl) KeymapManager.getInstance())[ CD ]
Line_2 $$ private static ChooseByNamePopup createPopup(@Nullable Project project, @NotNull final GotoActionModel model, String initialText, int initialIndex, final Component component, final AnActionEvent e) -->Line_3 $$ ChooseByNamePopup oldPopup = project == null ? null : project.getUserData(ChooseByNamePopup.CHOOSE_BY_NAME_POPUP_IN_PROJECT_KEY)[ FD ]
Line_8 $$ final ChooseByNamePopup popup = new ChooseByNamePopup(project, model, new GotoActionItemProvider(model), oldPopup, initialText, false, initialIndex) -->Line_10 $$ super.initUI(callback, modalityState, allowMultipleSelection)[ CD ]
Line_42 $$ for (ListSelectionListener listener : myList.getListSelectionListeners()) -->Line_43 $$ myList.removeListSelectionListener(listener)[ FD ]
Line_2 $$ private static ChooseByNamePopup createPopup(@Nullable Project project, @NotNull final GotoActionModel model, String initialText, int initialIndex, final Component component, final AnActionEvent e) -->Line_66 $$ if (processOptionInplace(((GotoActionModel.MatchedValue) element).value, popup, component, e)) [ FD ]
Line_2 $$ private static ChooseByNamePopup createPopup(@Nullable Project project, @NotNull final GotoActionModel model, String initialText, int initialIndex, final Component component, final AnActionEvent e) -->Line_73 $$ new DumbAwareAction() [ CD ]
Line_2 $$ private static ChooseByNamePopup createPopup(@Nullable Project project, @NotNull final GotoActionModel model, String initialText, int initialIndex, final Component component, final AnActionEvent e) -->Line_62 $$ popup.addMouseClickListener(new MouseAdapter() [ CD ]
Line_7 $$ final Disposable disposable = Disposer.newDisposable()-->Line_48 $$ ApplicationManager.getApplication().getMessageBus().connect(disposable).subscribe(ProgressWindow.TOPIC, new ProgressWindow.Listener() [ FD ]
Line_8 $$ final ChooseByNamePopup popup = new ChooseByNamePopup(project, model, new GotoActionItemProvider(model), oldPopup, initialText, false, initialIndex) -->Line_41 $$ Disposer.dispose(disposable)[ CD ]
Line_62 $$ popup.addMouseClickListener(new MouseAdapter() -->Line_64 $$ Object element = popup.getSelectionByPoint(me.getPoint())[ CD ]
Line_82 $$ AnAction action = aw.getAction()-->Line_83 $$ String id = ActionManager.getInstance().getId(action)[ FD ]
Line_86 $$ if (!k.canModify())-->Line_87 $$ return[ CD ]
Line_73 $$ new DumbAwareAction() -->Line_76 $$ if (o instanceof GotoActionModel.MatchedValue) [ CD ]
Line_11 $$ myList.addListSelectionListener(new ListSelectionListener() -->Line_66 $$ if (processOptionInplace(((GotoActionModel.MatchedValue) element).value, popup, component, e)) [ FD ]
Line_2 $$ private static ChooseByNamePopup createPopup(@Nullable Project project, @NotNull final GotoActionModel model, String initialText, int initialIndex, final Component component, final AnActionEvent e) -->Line_37 $$ return element instanceof GotoActionModel.MatchedValue && processOptionInplace(((GotoActionModel.MatchedValue) element).value, this, component, e) || super.closeForbidden(true)[ FD ]
Line_20 $$ if (o instanceof GotoActionModel.MatchedValue) -->Line_21 $$ GotoActionModel.MatchedValue mv = (GotoActionModel.MatchedValue) o[ CD ]
Line_11 $$ myList.addListSelectionListener(new ListSelectionListener() -->Line_14 $$ String text = getText(value)[ CD ]
Line_2 $$ private static ChooseByNamePopup createPopup(@Nullable Project project, @NotNull final GotoActionModel model, String initialText, int initialIndex, final Component component, final AnActionEvent e) -->Line_7 $$ final Disposable disposable = Disposer.newDisposable()[ CD ]
Line_8 $$ final ChooseByNamePopup popup = new ChooseByNamePopup(project, model, new GotoActionItemProvider(model), oldPopup, initialText, false, initialIndex) -->Line_60 $$ project.putUserData(ChooseByNamePopup.CHOOSE_BY_NAME_POPUP_IN_PROJECT_KEY, popup)[ FD ]
Line_4 $$ if (oldPopup != null) -->Line_5 $$ oldPopup.close(false)[ CD ]
Line_81 $$ if (available) -->Line_82 $$ AnAction action = aw.getAction()[ CD ]
Line_8 $$ final ChooseByNamePopup popup = new ChooseByNamePopup(project, model, new GotoActionItemProvider(model), oldPopup, initialText, false, initialIndex) -->Line_34 $$ if (!ok)[ FD ]
Line_2 $$ private static ChooseByNamePopup createPopup(@Nullable Project project, @NotNull final GotoActionModel model, String initialText, int initialIndex, final Component component, final AnActionEvent e) -->Line_4 $$ if (oldPopup != null) [ CD ]
Line_62 $$ popup.addMouseClickListener(new MouseAdapter() -->Line_67 $$ me.consume()[ FD ]
Line_81 $$ if (available) -->Line_83 $$ String id = ActionManager.getInstance().getId(action)[ CD ]
Line_11 $$ myList.addListSelectionListener(new ListSelectionListener() -->Line_13 $$ Object value = myList.getSelectedValue()[ CD ]
Line_36 $$ Object element = getChosenElement()-->Line_65 $$ if (element instanceof GotoActionModel.MatchedValue) [ FD ]
Line_11 $$ myList.addListSelectionListener(new ListSelectionListener() -->Line_26 $$ return getAdText()[ CD ]
Line_2 $$ private static ChooseByNamePopup createPopup(@Nullable Project project, @NotNull final GotoActionModel model, String initialText, int initialIndex, final Component component, final AnActionEvent e) -->Line_8 $$ final ChooseByNamePopup popup = new ChooseByNamePopup(project, model, new GotoActionItemProvider(model), oldPopup, initialText, false, initialIndex) [ CD ]
Line_8 $$ final ChooseByNamePopup popup = new ChooseByNamePopup(project, model, new GotoActionItemProvider(model), oldPopup, initialText, false, initialIndex) -->Line_36 $$ Object element = getChosenElement()[ CD ]
Line_8 $$ final ChooseByNamePopup popup = new ChooseByNamePopup(project, model, new GotoActionItemProvider(model), oldPopup, initialText, false, initialIndex) -->Line_53 $$ popup.repaintList()[ FD ]
Line_79 $$ GotoActionModel.ActionWrapper aw = (GotoActionModel.ActionWrapper) value-->Line_82 $$ AnAction action = aw.getAction()[ FD ]
Line_73 $$ new DumbAwareAction() -->Line_75 $$ Object o = popup.getChosenElement()[ CD ]
Line_77 $$ Comparable value = ((GotoActionModel.MatchedValue) o).value-->Line_78 $$ if (value instanceof GotoActionModel.ActionWrapper) [ FD ]
Line_3 $$ ChooseByNamePopup oldPopup = project == null ? null : project.getUserData(ChooseByNamePopup.CHOOSE_BY_NAME_POPUP_IN_PROJECT_KEY)-->Line_4 $$ if (oldPopup != null) [ FD ]
Line_8 $$ final ChooseByNamePopup popup = new ChooseByNamePopup(project, model, new GotoActionItemProvider(model), oldPopup, initialText, false, initialIndex) -->Line_62 $$ popup.addMouseClickListener(new MouseAdapter() [ FD ]
Line_11 $$ myList.addListSelectionListener(new ListSelectionListener() -->Line_20 $$ if (o instanceof GotoActionModel.MatchedValue) [ CD ]
Line_22 $$ if (mv.value instanceof BooleanOptionDescription || mv.value instanceof GotoActionModel.ActionWrapper && ((GotoActionModel.ActionWrapper) mv.value).getAction() instanceof ToggleAction) -->Line_23 $$ return "Press " + KeymapUtil.getKeystrokeText(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0)) + " to toggle option"[ CD ]
Line_2 $$ private static ChooseByNamePopup createPopup(@Nullable Project project, @NotNull final GotoActionModel model, String initialText, int initialIndex, final Component component, final AnActionEvent e) -->Line_31 $$ return super.filter(model.sort(elements))[ FD ]
Line_62 $$ popup.addMouseClickListener(new MouseAdapter() -->Line_65 $$ if (element instanceof GotoActionModel.MatchedValue) [ CD ]
Line_8 $$ final ChooseByNamePopup popup = new ChooseByNamePopup(project, model, new GotoActionItemProvider(model), oldPopup, initialText, false, initialIndex) -->Line_11 $$ myList.addListSelectionListener(new ListSelectionListener() [ CD ]
Line_8 $$ final ChooseByNamePopup popup = new ChooseByNamePopup(project, model, new GotoActionItemProvider(model), oldPopup, initialText, false, initialIndex) -->Line_52 $$ if (!popup.checkDisposed()) [ FD ]
Line_3 $$ ChooseByNamePopup oldPopup = project == null ? null : project.getUserData(ChooseByNamePopup.CHOOSE_BY_NAME_POPUP_IN_PROJECT_KEY)-->Line_5 $$ oldPopup.close(false)[ FD ]
