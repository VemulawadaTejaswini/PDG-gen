Line_2 $$ public void update(final AnActionEvent event) -->Line_39 $$ super.update(event)[ FD ]
Line_10 $$ if (project == null) -->Line_12 $$ return[ CD ]
Line_6 $$ if (component != null) -->Line_10 $$ if (project == null) [ CD ]
Line_20 $$ if (EditorUtil.inVirtualSpace(editor, pos)) -->Line_22 $$ return[ CD ]
Line_2 $$ public void update(final AnActionEvent event) -->Line_3 $$ InputEvent inputEvent = event.getInputEvent()[ CD ]
Line_27 $$ for (GotoDeclarationHandler handler : Extensions.getExtensions(GotoDeclarationHandler.EP_NAME)) -->Line_36 $$ LOG.error(handler.toString(), e)[ FD ]
Line_14 $$ Editor editor = getBaseEditor(event.getDataContext(), project)-->Line_18 $$ if (editor != null && componentAt == editor.getContentComponent()) [ FD ]
Line_20 $$ if (EditorUtil.inVirtualSpace(editor, pos)) -->Line_21 $$ event.getPresentation().setEnabled(false)[ CD ]
Line_3 $$ InputEvent inputEvent = event.getInputEvent()-->Line_4 $$ if (inputEvent instanceof MouseEvent) [ FD ]
Line_29 $$ String text = handler.getActionText(event.getDataContext())-->Line_30 $$ if (text != null) [ FD ]
Line_9 $$ Project project = event.getProject()-->Line_10 $$ if (project == null) [ FD ]
Line_14 $$ Editor editor = getBaseEditor(event.getDataContext(), project)-->Line_20 $$ if (EditorUtil.inVirtualSpace(editor, pos)) [ FD ]
Line_2 $$ public void update(final AnActionEvent event) -->Line_31 $$ Presentation presentation = event.getPresentation()[ FD ]
Line_6 $$ if (component != null) -->Line_8 $$ Component componentAt = SwingUtilities.getDeepestComponentAt(component, point.x, point.y)[ CD ]
Line_8 $$ Component componentAt = SwingUtilities.getDeepestComponentAt(component, point.x, point.y)-->Line_15 $$ if (componentAt instanceof EditorGutterComponentEx) [ FD ]
Line_6 $$ if (component != null) -->Line_7 $$ Point point = ((MouseEvent) inputEvent).getPoint()[ CD ]
Line_15 $$ if (componentAt instanceof EditorGutterComponentEx) -->Line_17 $$ return[ CD ]
Line_8 $$ Component componentAt = SwingUtilities.getDeepestComponentAt(component, point.x, point.y)-->Line_19 $$ LogicalPosition pos = editor.xyToLogicalPosition(SwingUtilities.convertPoint(component, point, componentAt))[ FD ]
Line_4 $$ if (inputEvent instanceof MouseEvent) -->Line_5 $$ Component component = inputEvent.getComponent()[ CD ]
Line_18 $$ if (editor != null && componentAt == editor.getContentComponent()) -->Line_20 $$ if (EditorUtil.inVirtualSpace(editor, pos)) [ CD ]
Line_31 $$ Presentation presentation = event.getPresentation()-->Line_32 $$ presentation.setText(text)[ FD ]
Line_7 $$ Point point = ((MouseEvent) inputEvent).getPoint()-->Line_19 $$ LogicalPosition pos = editor.xyToLogicalPosition(SwingUtilities.convertPoint(component, point, componentAt))[ FD ]
Line_19 $$ LogicalPosition pos = editor.xyToLogicalPosition(SwingUtilities.convertPoint(component, point, componentAt))-->Line_20 $$ if (EditorUtil.inVirtualSpace(editor, pos)) [ FD ]
Line_4 $$ if (inputEvent instanceof MouseEvent) -->Line_6 $$ if (component != null) [ CD ]
Line_2 $$ public void update(final AnActionEvent event) -->Line_4 $$ if (inputEvent instanceof MouseEvent) [ CD ]
Line_15 $$ if (componentAt instanceof EditorGutterComponentEx) -->Line_18 $$ if (editor != null && componentAt == editor.getContentComponent()) [ CD ]
Line_2 $$ public void update(final AnActionEvent event) -->Line_16 $$ event.getPresentation().setEnabled(false)[ FD ]
Line_5 $$ Component component = inputEvent.getComponent()-->Line_8 $$ Component componentAt = SwingUtilities.getDeepestComponentAt(component, point.x, point.y)[ FD ]
Line_2 $$ public void update(final AnActionEvent event) -->Line_29 $$ String text = handler.getActionText(event.getDataContext())[ FD ]
Line_2 $$ public void update(final AnActionEvent event) -->Line_11 $$ event.getPresentation().setEnabled(false)[ FD ]
Line_29 $$ String text = handler.getActionText(event.getDataContext())-->Line_32 $$ presentation.setText(text)[ FD ]
Line_27 $$ for (GotoDeclarationHandler handler : Extensions.getExtensions(GotoDeclarationHandler.EP_NAME)) -->Line_29 $$ String text = handler.getActionText(event.getDataContext())[ FD ]
Line_5 $$ Component component = inputEvent.getComponent()-->Line_19 $$ LogicalPosition pos = editor.xyToLogicalPosition(SwingUtilities.convertPoint(component, point, componentAt))[ FD ]
Line_30 $$ if (text != null) -->Line_32 $$ presentation.setText(text)[ CD ]
Line_14 $$ Editor editor = getBaseEditor(event.getDataContext(), project)-->Line_19 $$ LogicalPosition pos = editor.xyToLogicalPosition(SwingUtilities.convertPoint(component, point, componentAt))[ FD ]
Line_9 $$ Project project = event.getProject()-->Line_14 $$ Editor editor = getBaseEditor(event.getDataContext(), project)[ FD ]
Line_2 $$ public void update(final AnActionEvent event) -->Line_14 $$ Editor editor = getBaseEditor(event.getDataContext(), project)[ FD ]
Line_6 $$ if (component != null) -->Line_9 $$ Project project = event.getProject()[ CD ]
Line_15 $$ if (componentAt instanceof EditorGutterComponentEx) -->Line_16 $$ event.getPresentation().setEnabled(false)[ CD ]
Line_2 $$ public void update(final AnActionEvent event) -->Line_9 $$ Project project = event.getProject()[ FD ]
Line_2 $$ public void update(final AnActionEvent event) -->Line_39 $$ super.update(event)[ CD ]
Line_30 $$ if (text != null) -->Line_31 $$ Presentation presentation = event.getPresentation()[ CD ]
Line_2 $$ public void update(final AnActionEvent event) -->Line_21 $$ event.getPresentation().setEnabled(false)[ FD ]
Line_6 $$ if (component != null) -->Line_15 $$ if (componentAt instanceof EditorGutterComponentEx) [ CD ]
Line_6 $$ if (component != null) -->Line_14 $$ Editor editor = getBaseEditor(event.getDataContext(), project)[ CD ]
Line_3 $$ InputEvent inputEvent = event.getInputEvent()-->Line_5 $$ Component component = inputEvent.getComponent()[ FD ]
Line_18 $$ if (editor != null && componentAt == editor.getContentComponent()) -->Line_19 $$ LogicalPosition pos = editor.xyToLogicalPosition(SwingUtilities.convertPoint(component, point, componentAt))[ CD ]
Line_2 $$ public void update(final AnActionEvent event) -->Line_3 $$ InputEvent inputEvent = event.getInputEvent()[ FD ]
Line_5 $$ Component component = inputEvent.getComponent()-->Line_6 $$ if (component != null) [ FD ]
Line_10 $$ if (project == null) -->Line_11 $$ event.getPresentation().setEnabled(false)[ CD ]
