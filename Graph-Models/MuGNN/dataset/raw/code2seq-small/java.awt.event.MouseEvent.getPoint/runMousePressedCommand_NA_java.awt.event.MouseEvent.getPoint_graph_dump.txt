Line_2 $$ private void runMousePressedCommand(@NotNull final MouseEvent e) -->Line_3 $$ myLastMousePressedLocation = xyToLogicalPosition(e.getPoint())[ FD ]
Line_2 $$ private void runMousePressedCommand(@NotNull final MouseEvent e) -->Line_9 $$ EditorMouseEvent event = new EditorMouseEvent(EditorImpl.this, e, getMouseEventArea(e))[ CD ]
Line_2 $$ private void runMousePressedCommand(@NotNull final MouseEvent e) -->Line_21 $$ if (event.isConsumed() && !(event.getMouseEvent().isPopupTrigger() || event.getArea() == EditorMouseEventArea.EDITING_AREA)) [ CD ]
Line_9 $$ EditorMouseEvent event = new EditorMouseEvent(EditorImpl.this, e, getMouseEventArea(e))-->Line_13 $$ mouseListener.mousePressed(event)[ FD ]
Line_24 $$ if (myCommandProcessor != null) -->Line_32 $$ myCommandProcessor.executeCommand(myProject, runnable, "", DocCommandGroupId.noneGroupId(getDocument()), UndoConfirmationPolicy.DEFAULT, getDocument())[ CD ]
Line_2 $$ private void runMousePressedCommand(@NotNull final MouseEvent e) -->Line_3 $$ myLastMousePressedLocation = xyToLogicalPosition(e.getPoint())[ CD ]
Line_21 $$ if (event.isConsumed() && !(event.getMouseEvent().isPopupTrigger() || event.getArea() == EditorMouseEventArea.EDITING_AREA)) -->Line_22 $$ return[ CD ]
Line_2 $$ private void runMousePressedCommand(@NotNull final MouseEvent e) -->Line_24 $$ if (myCommandProcessor != null) [ CD ]
Line_27 $$ if (processMousePressed(e) && myProject != null && !myProject.isDefault()) -->Line_28 $$ IdeDocumentHistory.getInstance(myProject).includeCurrentCommandAsNavigation()[ CD ]
Line_25 $$ Runnable runnable = new Runnable() -->Line_32 $$ myCommandProcessor.executeCommand(myProject, runnable, "", DocCommandGroupId.noneGroupId(getDocument()), UndoConfirmationPolicy.DEFAULT, getDocument())[ FD ]
Line_2 $$ private void runMousePressedCommand(@NotNull final MouseEvent e) -->Line_19 $$ myDragOnGutterSelectionStartLine = EditorUtil.yPositionToLogicalLine(EditorImpl.this, e)[ FD ]
Line_2 $$ private void runMousePressedCommand(@NotNull final MouseEvent e) -->Line_6 $$ clearDraggedRange()[ CD ]
Line_25 $$ Runnable runnable = new Runnable() -->Line_27 $$ if (processMousePressed(e) && myProject != null && !myProject.isDefault()) [ CD ]
Line_2 $$ private void runMousePressedCommand(@NotNull final MouseEvent e) -->Line_10 $$ myExpectedCaretOffset = logicalPositionToOffset(myLastMousePressedLocation)[ CD ]
Line_12 $$ for (EditorMouseListener mouseListener : myMouseListeners) -->Line_13 $$ mouseListener.mousePressed(event)[ FD ]
Line_9 $$ EditorMouseEvent event = new EditorMouseEvent(EditorImpl.this, e, getMouseEventArea(e))-->Line_36 $$ invokePopupIfNeeded(event)[ FD ]
Line_2 $$ private void runMousePressedCommand(@NotNull final MouseEvent e) -->Line_4 $$ myCaretStateBeforeLastPress = isToggleCaretEvent(e) ? myCaretModel.getCaretsAndSelections() : Collections.<CaretState>emptyList()[ FD ]
Line_2 $$ private void runMousePressedCommand(@NotNull final MouseEvent e) -->Line_18 $$ if (event.getArea() == EditorMouseEventArea.LINE_MARKERS_AREA) [ CD ]
Line_9 $$ EditorMouseEvent event = new EditorMouseEvent(EditorImpl.this, e, getMouseEventArea(e))-->Line_21 $$ if (event.isConsumed() && !(event.getMouseEvent().isPopupTrigger() || event.getArea() == EditorMouseEventArea.EDITING_AREA)) [ FD ]
Line_2 $$ private void runMousePressedCommand(@NotNull final MouseEvent e) -->Line_34 $$ processMousePressed(e)[ FD ]
Line_2 $$ private void runMousePressedCommand(@NotNull final MouseEvent e) -->Line_27 $$ if (processMousePressed(e) && myProject != null && !myProject.isDefault()) [ FD ]
Line_24 $$ if (myCommandProcessor != null) -->Line_25 $$ Runnable runnable = new Runnable() [ CD ]
Line_9 $$ EditorMouseEvent event = new EditorMouseEvent(EditorImpl.this, e, getMouseEventArea(e))-->Line_18 $$ if (event.getArea() == EditorMouseEventArea.LINE_MARKERS_AREA) [ FD ]
Line_2 $$ private void runMousePressedCommand(@NotNull final MouseEvent e) -->Line_36 $$ invokePopupIfNeeded(event)[ CD ]
Line_18 $$ if (event.getArea() == EditorMouseEventArea.LINE_MARKERS_AREA) -->Line_19 $$ myDragOnGutterSelectionStartLine = EditorUtil.yPositionToLogicalLine(EditorImpl.this, e)[ CD ]
Line_2 $$ private void runMousePressedCommand(@NotNull final MouseEvent e) -->Line_9 $$ EditorMouseEvent event = new EditorMouseEvent(EditorImpl.this, e, getMouseEventArea(e))[ FD ]
Line_24 $$ if (myCommandProcessor != null) -->Line_34 $$ processMousePressed(e)[ CD ]
