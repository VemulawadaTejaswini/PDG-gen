Line_2 $$ public static void installCheckboxRenderer(final SimpleTree tree, final CheckboxHandler handler) -->Line_6 $$ final TreeCellRenderer baseRenderer = tree.getCellRenderer()[ FD ]
Line_4 $$ final JPanel panel = new JPanel(new BorderLayout())-->Line_5 $$ panel.add(checkbox, BorderLayout.WEST)[ FD ]
Line_27 $$ tree.addMouseListener(new MouseAdapter() -->Line_52 $$ handler.toggle(treePath, e)[ FD ]
Line_7 $$ tree.setCellRenderer(new TreeCellRenderer() -->Line_20 $$ checkbox.setSelected(state != CheckBoxState.UNCHECKED)[ CD ]
Line_2 $$ public static void installCheckboxRenderer(final SimpleTree tree, final CheckboxHandler handler) -->Line_47 $$ TreePath[] treePaths = tree.getSelectionPaths()[ FD ]
Line_7 $$ tree.setCellRenderer(new TreeCellRenderer() -->Line_27 $$ tree.addMouseListener(new MouseAdapter() [ FD ]
Line_4 $$ final JPanel panel = new JPanel(new BorderLayout())-->Line_16 $$ panel.add(baseComponent, BorderLayout.CENTER)[ FD ]
Line_3 $$ final JCheckBox checkbox = new JCheckBox()-->Line_20 $$ checkbox.setSelected(state != CheckBoxState.UNCHECKED)[ FD ]
Line_31 $$ TreePath path = tree.getPathForRow(row)-->Line_32 $$ if (!isCheckboxEnabledFor(path, handler))[ FD ]
Line_7 $$ tree.setCellRenderer(new TreeCellRenderer() -->Line_23 $$ checkbox.setForeground(foreground)[ CD ]
Line_44 $$ tree.addKeyListener(new KeyAdapter() -->Line_54 $$ e.consume()[ FD ]
Line_46 $$ if (e.getKeyCode() == KeyEvent.VK_SPACE) -->Line_47 $$ TreePath[] treePaths = tree.getSelectionPaths()[ CD ]
Line_2 $$ public static void installCheckboxRenderer(final SimpleTree tree, final CheckboxHandler handler) -->Line_37 $$ handler.toggle(path, e)[ FD ]
Line_47 $$ TreePath[] treePaths = tree.getSelectionPaths()-->Line_48 $$ if (treePaths != null) [ FD ]
Line_32 $$ if (!isCheckboxEnabledFor(path, handler))-->Line_33 $$ return[ CD ]
Line_27 $$ tree.addMouseListener(new MouseAdapter() -->Line_30 $$ if (row >= 0) [ CD ]
Line_48 $$ if (treePaths != null) -->Line_54 $$ e.consume()[ CD ]
Line_4 $$ final JPanel panel = new JPanel(new BorderLayout())-->Line_17 $$ panel.setBackground(background)[ FD ]
Line_2 $$ public static void installCheckboxRenderer(final SimpleTree tree, final CheckboxHandler handler) -->Line_27 $$ tree.addMouseListener(new MouseAdapter() [ CD ]
Line_3 $$ final JCheckBox checkbox = new JCheckBox()-->Line_22 $$ checkbox.setBackground(background)[ FD ]
Line_7 $$ tree.setCellRenderer(new TreeCellRenderer() -->Line_9 $$ final Component baseComponent = baseRenderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus)[ FD ]
Line_2 $$ public static void installCheckboxRenderer(final SimpleTree tree, final CheckboxHandler handler) -->Line_50 $$ if (!isCheckboxEnabledFor(treePath, handler))[ FD ]
Line_7 $$ tree.setCellRenderer(new TreeCellRenderer() -->Line_18 $$ panel.setForeground(foreground)[ CD ]
Line_27 $$ tree.addMouseListener(new MouseAdapter() -->Line_29 $$ int row = tree.getRowForLocation(e.getX(), e.getY())[ CD ]
Line_7 $$ tree.setCellRenderer(new TreeCellRenderer() -->Line_16 $$ panel.add(baseComponent, BorderLayout.CENTER)[ CD ]
Line_10 $$ final Object userObject = ((DefaultMutableTreeNode) value).getUserObject()-->Line_11 $$ if (!handler.isVisible(userObject)) [ FD ]
Line_29 $$ int row = tree.getRowForLocation(e.getX(), e.getY())-->Line_35 $$ checkBounds.setLocation(tree.getRowBounds(row).getLocation())[ FD ]
Line_7 $$ tree.setCellRenderer(new TreeCellRenderer() -->Line_44 $$ tree.addKeyListener(new KeyAdapter() [ FD ]
Line_36 $$ if (checkBounds.contains(e.getPoint())) -->Line_38 $$ e.consume()[ CD ]
Line_7 $$ tree.setCellRenderer(new TreeCellRenderer() -->Line_11 $$ if (!handler.isVisible(userObject)) [ CD ]
Line_2 $$ public static void installCheckboxRenderer(final SimpleTree tree, final CheckboxHandler handler) -->Line_29 $$ int row = tree.getRowForLocation(e.getX(), e.getY())[ FD ]
Line_27 $$ tree.addMouseListener(new MouseAdapter() -->Line_37 $$ handler.toggle(path, e)[ FD ]
Line_9 $$ final Component baseComponent = baseRenderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus)-->Line_16 $$ panel.add(baseComponent, BorderLayout.CENTER)[ FD ]
Line_49 $$ for (TreePath treePath : treePaths) -->Line_52 $$ handler.toggle(treePath, e)[ FD ]
Line_7 $$ tree.setCellRenderer(new TreeCellRenderer() -->Line_31 $$ TreePath path = tree.getPathForRow(row)[ FD ]
Line_2 $$ public static void installCheckboxRenderer(final SimpleTree tree, final CheckboxHandler handler) -->Line_6 $$ final TreeCellRenderer baseRenderer = tree.getCellRenderer()[ CD ]
Line_31 $$ TreePath path = tree.getPathForRow(row)-->Line_37 $$ handler.toggle(path, e)[ FD ]
Line_27 $$ tree.addMouseListener(new MouseAdapter() -->Line_46 $$ if (e.getKeyCode() == KeyEvent.VK_SPACE) [ FD ]
Line_2 $$ public static void installCheckboxRenderer(final SimpleTree tree, final CheckboxHandler handler) -->Line_3 $$ final JCheckBox checkbox = new JCheckBox()[ CD ]
Line_7 $$ tree.setCellRenderer(new TreeCellRenderer() -->Line_29 $$ int row = tree.getRowForLocation(e.getX(), e.getY())[ FD ]
Line_44 $$ tree.addKeyListener(new KeyAdapter() -->Line_52 $$ handler.toggle(treePath, e)[ FD ]
Line_6 $$ final TreeCellRenderer baseRenderer = tree.getCellRenderer()-->Line_9 $$ final Component baseComponent = baseRenderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus)[ FD ]
Line_14 $$ final Color foreground = selected ? UIUtil.getTreeSelectionForeground() : UIUtil.getTreeTextForeground()-->Line_18 $$ panel.setForeground(foreground)[ FD ]
Line_2 $$ public static void installCheckboxRenderer(final SimpleTree tree, final CheckboxHandler handler) -->Line_44 $$ tree.addKeyListener(new KeyAdapter() [ CD ]
Line_3 $$ final JCheckBox checkbox = new JCheckBox()-->Line_23 $$ checkbox.setForeground(foreground)[ FD ]
Line_34 $$ Rectangle checkBounds = checkbox.getBounds()-->Line_35 $$ checkBounds.setLocation(tree.getRowBounds(row).getLocation())[ FD ]
Line_2 $$ public static void installCheckboxRenderer(final SimpleTree tree, final CheckboxHandler handler) -->Line_7 $$ tree.setCellRenderer(new TreeCellRenderer() [ FD ]
Line_2 $$ public static void installCheckboxRenderer(final SimpleTree tree, final CheckboxHandler handler) -->Line_35 $$ checkBounds.setLocation(tree.getRowBounds(row).getLocation())[ FD ]
Line_15 $$ Color background = selected ? UIUtil.getTreeSelectionBackground(hasFocus) : UIUtil.getTreeTextBackground()-->Line_22 $$ checkbox.setBackground(background)[ FD ]
Line_2 $$ public static void installCheckboxRenderer(final SimpleTree tree, final CheckboxHandler handler) -->Line_19 $$ CheckBoxState state = handler.getState(userObject)[ FD ]
Line_27 $$ tree.addMouseListener(new MouseAdapter() -->Line_54 $$ e.consume()[ FD ]
Line_2 $$ public static void installCheckboxRenderer(final SimpleTree tree, final CheckboxHandler handler) -->Line_32 $$ if (!isCheckboxEnabledFor(path, handler))[ FD ]
Line_30 $$ if (row >= 0) -->Line_35 $$ checkBounds.setLocation(tree.getRowBounds(row).getLocation())[ CD ]
Line_11 $$ if (!handler.isVisible(userObject)) -->Line_12 $$ return baseComponent[ CD ]
Line_3 $$ final JCheckBox checkbox = new JCheckBox()-->Line_21 $$ checkbox.setEnabled(state != CheckBoxState.PARTIAL)[ FD ]
Line_2 $$ public static void installCheckboxRenderer(final SimpleTree tree, final CheckboxHandler handler) -->Line_4 $$ final JPanel panel = new JPanel(new BorderLayout())[ CD ]
Line_3 $$ final JCheckBox checkbox = new JCheckBox()-->Line_34 $$ Rectangle checkBounds = checkbox.getBounds()[ FD ]
Line_27 $$ tree.addMouseListener(new MouseAdapter() -->Line_38 $$ e.consume()[ FD ]
Line_46 $$ if (e.getKeyCode() == KeyEvent.VK_SPACE) -->Line_48 $$ if (treePaths != null) [ CD ]
Line_30 $$ if (row >= 0) -->Line_36 $$ if (checkBounds.contains(e.getPoint())) [ CD ]
Line_2 $$ public static void installCheckboxRenderer(final SimpleTree tree, final CheckboxHandler handler) -->Line_52 $$ handler.toggle(treePath, e)[ FD ]
Line_36 $$ if (checkBounds.contains(e.getPoint())) -->Line_39 $$ tree.setSelectionRow(row)[ CD ]
Line_2 $$ public static void installCheckboxRenderer(final SimpleTree tree, final CheckboxHandler handler) -->Line_44 $$ tree.addKeyListener(new KeyAdapter() [ FD ]
Line_3 $$ final JCheckBox checkbox = new JCheckBox()-->Line_5 $$ panel.add(checkbox, BorderLayout.WEST)[ FD ]
Line_2 $$ public static void installCheckboxRenderer(final SimpleTree tree, final CheckboxHandler handler) -->Line_27 $$ tree.addMouseListener(new MouseAdapter() [ FD ]
Line_7 $$ tree.setCellRenderer(new TreeCellRenderer() -->Line_17 $$ panel.setBackground(background)[ CD ]
Line_7 $$ tree.setCellRenderer(new TreeCellRenderer() -->Line_24 $$ return panel[ CD ]
Line_29 $$ int row = tree.getRowForLocation(e.getX(), e.getY())-->Line_30 $$ if (row >= 0) [ FD ]
Line_7 $$ tree.setCellRenderer(new TreeCellRenderer() -->Line_15 $$ Color background = selected ? UIUtil.getTreeSelectionBackground(hasFocus) : UIUtil.getTreeTextBackground()[ FD ]
Line_2 $$ public static void installCheckboxRenderer(final SimpleTree tree, final CheckboxHandler handler) -->Line_5 $$ panel.add(checkbox, BorderLayout.WEST)[ CD ]
Line_7 $$ tree.setCellRenderer(new TreeCellRenderer() -->Line_19 $$ CheckBoxState state = handler.getState(userObject)[ CD ]
Line_29 $$ int row = tree.getRowForLocation(e.getX(), e.getY())-->Line_39 $$ tree.setSelectionRow(row)[ FD ]
Line_2 $$ public static void installCheckboxRenderer(final SimpleTree tree, final CheckboxHandler handler) -->Line_9 $$ final Component baseComponent = baseRenderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus)[ FD ]
Line_7 $$ tree.setCellRenderer(new TreeCellRenderer() -->Line_35 $$ checkBounds.setLocation(tree.getRowBounds(row).getLocation())[ FD ]
Line_34 $$ Rectangle checkBounds = checkbox.getBounds()-->Line_36 $$ if (checkBounds.contains(e.getPoint())) [ FD ]
Line_29 $$ int row = tree.getRowForLocation(e.getX(), e.getY())-->Line_31 $$ TreePath path = tree.getPathForRow(row)[ FD ]
Line_15 $$ Color background = selected ? UIUtil.getTreeSelectionBackground(hasFocus) : UIUtil.getTreeTextBackground()-->Line_17 $$ panel.setBackground(background)[ FD ]
Line_7 $$ tree.setCellRenderer(new TreeCellRenderer() -->Line_9 $$ final Component baseComponent = baseRenderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus)[ CD ]
Line_4 $$ final JPanel panel = new JPanel(new BorderLayout())-->Line_18 $$ panel.setForeground(foreground)[ FD ]
Line_7 $$ tree.setCellRenderer(new TreeCellRenderer() -->Line_21 $$ checkbox.setEnabled(state != CheckBoxState.PARTIAL)[ CD ]
Line_14 $$ final Color foreground = selected ? UIUtil.getTreeSelectionForeground() : UIUtil.getTreeTextForeground()-->Line_23 $$ checkbox.setForeground(foreground)[ FD ]
Line_2 $$ public static void installCheckboxRenderer(final SimpleTree tree, final CheckboxHandler handler) -->Line_7 $$ tree.setCellRenderer(new TreeCellRenderer() [ CD ]
Line_7 $$ tree.setCellRenderer(new TreeCellRenderer() -->Line_15 $$ Color background = selected ? UIUtil.getTreeSelectionBackground(hasFocus) : UIUtil.getTreeTextBackground()[ CD ]
Line_2 $$ public static void installCheckboxRenderer(final SimpleTree tree, final CheckboxHandler handler) -->Line_31 $$ TreePath path = tree.getPathForRow(row)[ FD ]
Line_7 $$ tree.setCellRenderer(new TreeCellRenderer() -->Line_47 $$ TreePath[] treePaths = tree.getSelectionPaths()[ FD ]
Line_2 $$ public static void installCheckboxRenderer(final SimpleTree tree, final CheckboxHandler handler) -->Line_39 $$ tree.setSelectionRow(row)[ FD ]
Line_49 $$ for (TreePath treePath : treePaths) -->Line_50 $$ if (!isCheckboxEnabledFor(treePath, handler))[ FD ]
Line_7 $$ tree.setCellRenderer(new TreeCellRenderer() -->Line_22 $$ checkbox.setBackground(background)[ CD ]
Line_36 $$ if (checkBounds.contains(e.getPoint())) -->Line_37 $$ handler.toggle(path, e)[ CD ]
Line_10 $$ final Object userObject = ((DefaultMutableTreeNode) value).getUserObject()-->Line_19 $$ CheckBoxState state = handler.getState(userObject)[ FD ]
Line_44 $$ tree.addKeyListener(new KeyAdapter() -->Line_46 $$ if (e.getKeyCode() == KeyEvent.VK_SPACE) [ CD ]
Line_2 $$ public static void installCheckboxRenderer(final SimpleTree tree, final CheckboxHandler handler) -->Line_11 $$ if (!handler.isVisible(userObject)) [ FD ]
Line_7 $$ tree.setCellRenderer(new TreeCellRenderer() -->Line_39 $$ tree.setSelectionRow(row)[ FD ]
Line_27 $$ tree.addMouseListener(new MouseAdapter() -->Line_29 $$ int row = tree.getRowForLocation(e.getX(), e.getY())[ FD ]
Line_30 $$ if (row >= 0) -->Line_32 $$ if (!isCheckboxEnabledFor(path, handler))[ CD ]
Line_27 $$ tree.addMouseListener(new MouseAdapter() -->Line_36 $$ if (checkBounds.contains(e.getPoint())) [ FD ]
Line_7 $$ tree.setCellRenderer(new TreeCellRenderer() -->Line_30 $$ if (row >= 0) [ FD ]
Line_30 $$ if (row >= 0) -->Line_34 $$ Rectangle checkBounds = checkbox.getBounds()[ CD ]
Line_7 $$ tree.setCellRenderer(new TreeCellRenderer() -->Line_14 $$ final Color foreground = selected ? UIUtil.getTreeSelectionForeground() : UIUtil.getTreeTextForeground()[ CD ]
Line_30 $$ if (row >= 0) -->Line_31 $$ TreePath path = tree.getPathForRow(row)[ CD ]
Line_44 $$ tree.addKeyListener(new KeyAdapter() -->Line_46 $$ if (e.getKeyCode() == KeyEvent.VK_SPACE) [ FD ]
Line_7 $$ tree.setCellRenderer(new TreeCellRenderer() -->Line_10 $$ final Object userObject = ((DefaultMutableTreeNode) value).getUserObject()[ CD ]
