Line_15 $$ if (nextNodeId.get() == sharedNodesSeeds.length && nodes.size() == sharedNodesSeeds.length) -->Line_17 $$ return[ CD ]
Line_23 $$ for (int i = 0; i < numSharedDataNodes; i++) -->Line_32 $$ sharedNodes.add(nodeAndClient)[ CD ]
Line_23 $$ for (int i = 0; i < numSharedDataNodes; i++) -->Line_24 $$ String buildNodeName = buildNodeName(i)[ CD ]
Line_2 $$ private synchronized void reset(boolean wipeData) throws IOException -->Line_20 $$ Set<NodeAndClient> sharedNodes = new HashSet()[ CD ]
Line_3 $$ for (NodeAndClient nodeAndClient : nodes.values()) -->Line_37 $$ if (nodeAndClient == null) [ FD ]
Line_28 $$ nodeAndClient = buildNode(i, sharedNodesSeeds[i], null, Version.CURRENT)-->Line_32 $$ sharedNodes.add(nodeAndClient)[ FD ]
Line_2 $$ private synchronized void reset(boolean wipeData) throws IOException -->Line_22 $$ boolean changed = false[ CD ]
Line_34 $$ for (int i = numSharedDataNodes; i < numSharedDataNodes + numSharedClientNodes; i++) -->Line_37 $$ if (nodeAndClient == null) [ CD ]
Line_6 $$ final MockTransportService mockTransportService = (MockTransportService) transportService-->Line_8 $$ mockTransportService.clearTracers()[ FD ]
Line_12 $$ if (wipeData) -->Line_13 $$ wipeDataDirectories()[ CD ]
Line_2 $$ private synchronized void reset(boolean wipeData) throws IOException -->Line_23 $$ for (int i = 0; i < numSharedDataNodes; i++) [ CD ]
Line_36 $$ NodeAndClient nodeAndClient = nodes.get(buildNodeName)-->Line_59 $$ nodeAndClient.close()[ FD ]
Line_23 $$ for (int i = 0; i < numSharedDataNodes; i++) -->Line_26 $$ if (nodeAndClient == null) [ CD ]
Line_37 $$ if (nodeAndClient == null) -->Line_41 $$ nodeAndClient.node.start()[ CD ]
Line_40 $$ nodeAndClient = buildNode(i, sharedNodesSeeds[i], clientSettingsBuilder.build(), Version.CURRENT)-->Line_59 $$ nodeAndClient.close()[ FD ]
Line_25 $$ NodeAndClient nodeAndClient = nodes.get(buildNodeName)-->Line_32 $$ sharedNodes.add(nodeAndClient)[ FD ]
Line_22 $$ boolean changed = false-->Line_27 $$ changed = true[ FD ]
Line_40 $$ nodeAndClient = buildNode(i, sharedNodesSeeds[i], clientSettingsBuilder.build(), Version.CURRENT)-->Line_44 $$ sharedNodes.add(nodeAndClient)[ FD ]
Line_28 $$ nodeAndClient = buildNode(i, sharedNodesSeeds[i], null, Version.CURRENT)-->Line_26 $$ if (nodeAndClient == null) [ FD ]
Line_23 $$ for (int i = 0; i < numSharedDataNodes; i++) -->Line_25 $$ NodeAndClient nodeAndClient = nodes.get(buildNodeName)[ CD ]
Line_2 $$ private synchronized void reset(boolean wipeData) throws IOException -->Line_46 $$ if (!changed && sharedNodes.size() == nodes.size()) [ CD ]
Line_27 $$ changed = true-->Line_46 $$ if (!changed && sharedNodes.size() == nodes.size()) [ FD ]
Line_67 $$ if (size() > 0) -->Line_68 $$ client().admin().cluster().prepareHealth().setWaitForNodes(Integer.toString(sharedNodesSeeds.length)).get()[ CD ]
Line_37 $$ if (nodeAndClient == null) -->Line_40 $$ nodeAndClient = buildNode(i, sharedNodesSeeds[i], clientSettingsBuilder.build(), Version.CURRENT)[ CD ]
Line_25 $$ NodeAndClient nodeAndClient = nodes.get(buildNodeName)-->Line_59 $$ nodeAndClient.close()[ FD ]
Line_2 $$ private synchronized void reset(boolean wipeData) throws IOException -->Line_67 $$ if (size() > 0) [ CD ]
Line_34 $$ for (int i = numSharedDataNodes; i < numSharedDataNodes + numSharedClientNodes; i++) -->Line_35 $$ String buildNodeName = buildNodeName(i)[ CD ]
Line_40 $$ nodeAndClient = buildNode(i, sharedNodesSeeds[i], clientSettingsBuilder.build(), Version.CURRENT)-->Line_37 $$ if (nodeAndClient == null) [ FD ]
Line_36 $$ NodeAndClient nodeAndClient = nodes.get(buildNodeName)-->Line_44 $$ sharedNodes.add(nodeAndClient)[ FD ]
Line_23 $$ for (int i = 0; i < numSharedDataNodes; i++) -->Line_40 $$ nodeAndClient = buildNode(i, sharedNodesSeeds[i], clientSettingsBuilder.build(), Version.CURRENT)[ FD ]
Line_28 $$ nodeAndClient = buildNode(i, sharedNodesSeeds[i], null, Version.CURRENT)-->Line_63 $$ publishNode(nodeAndClient)[ FD ]
Line_6 $$ final MockTransportService mockTransportService = (MockTransportService) transportService-->Line_7 $$ mockTransportService.clearAllRules()[ FD ]
Line_3 $$ for (NodeAndClient nodeAndClient : nodes.values()) -->Line_40 $$ nodeAndClient = buildNode(i, sharedNodesSeeds[i], clientSettingsBuilder.build(), Version.CURRENT)[ FD ]
Line_46 $$ if (!changed && sharedNodes.size() == nodes.size()) -->Line_51 $$ return[ CD ]
Line_28 $$ nodeAndClient = buildNode(i, sharedNodesSeeds[i], null, Version.CURRENT)-->Line_40 $$ nodeAndClient = buildNode(i, sharedNodesSeeds[i], clientSettingsBuilder.build(), Version.CURRENT)[ FD ]
Line_22 $$ boolean changed = false-->Line_46 $$ if (!changed && sharedNodes.size() == nodes.size()) [ FD ]
Line_26 $$ if (nodeAndClient == null) -->Line_28 $$ nodeAndClient = buildNode(i, sharedNodesSeeds[i], null, Version.CURRENT)[ CD ]
Line_3 $$ for (NodeAndClient nodeAndClient : nodes.values()) -->Line_59 $$ nodeAndClient.close()[ FD ]
Line_40 $$ nodeAndClient = buildNode(i, sharedNodesSeeds[i], clientSettingsBuilder.build(), Version.CURRENT)-->Line_63 $$ publishNode(nodeAndClient)[ FD ]
Line_34 $$ for (int i = numSharedDataNodes; i < numSharedDataNodes + numSharedClientNodes; i++) -->Line_36 $$ NodeAndClient nodeAndClient = nodes.get(buildNodeName)[ CD ]
Line_25 $$ NodeAndClient nodeAndClient = nodes.get(buildNodeName)-->Line_63 $$ publishNode(nodeAndClient)[ FD ]
Line_25 $$ NodeAndClient nodeAndClient = nodes.get(buildNodeName)-->Line_37 $$ if (nodeAndClient == null) [ FD ]
Line_2 $$ private synchronized void reset(boolean wipeData) throws IOException -->Line_61 $$ nodes.clear()[ CD ]
Line_15 $$ if (nextNodeId.get() == sharedNodesSeeds.length && nodes.size() == sharedNodesSeeds.length) -->Line_16 $$ logger.debug("Cluster hasn't changed - moving out - nodes: [[ CD ]
Line_34 $$ for (int i = numSharedDataNodes; i < numSharedDataNodes + numSharedClientNodes; i++) -->Line_44 $$ sharedNodes.add(nodeAndClient)[ CD ]
Line_25 $$ NodeAndClient nodeAndClient = nodes.get(buildNodeName)-->Line_26 $$ if (nodeAndClient == null) [ FD ]
Line_46 $$ if (!changed && sharedNodes.size() == nodes.size()) -->Line_47 $$ logger.debug("Cluster is consistent - moving out - nodes: [[ CD ]
Line_23 $$ for (int i = 0; i < numSharedDataNodes; i++) -->Line_24 $$ String buildNodeName = buildNodeName(i)[ FD ]
Line_2 $$ private synchronized void reset(boolean wipeData) throws IOException -->Line_34 $$ for (int i = numSharedDataNodes; i < numSharedDataNodes + numSharedClientNodes; i++) [ CD ]
Line_5 $$ if (transportService instanceof MockTransportService) -->Line_6 $$ final MockTransportService mockTransportService = (MockTransportService) transportService[ CD ]
Line_4 $$ TransportService transportService = nodeAndClient.node.injector().getInstance(TransportService.class)-->Line_5 $$ if (transportService instanceof MockTransportService) [ FD ]
Line_35 $$ String buildNodeName = buildNodeName(i)-->Line_36 $$ NodeAndClient nodeAndClient = nodes.get(buildNodeName)[ FD ]
Line_36 $$ NodeAndClient nodeAndClient = nodes.get(buildNodeName)-->Line_63 $$ publishNode(nodeAndClient)[ FD ]
Line_2 $$ private synchronized void reset(boolean wipeData) throws IOException -->Line_19 $$ logger.debug("Cluster is NOT consistent - restarting shared nodes - nodes: [[ CD ]
Line_27 $$ changed = true-->Line_38 $$ changed = true[ FD ]
Line_22 $$ boolean changed = false-->Line_38 $$ changed = true[ FD ]
Line_37 $$ if (nodeAndClient == null) -->Line_38 $$ changed = true[ CD ]
Line_38 $$ changed = true-->Line_46 $$ if (!changed && sharedNodes.size() == nodes.size()) [ FD ]
Line_3 $$ for (NodeAndClient nodeAndClient : nodes.values()) -->Line_26 $$ if (nodeAndClient == null) [ FD ]
Line_24 $$ String buildNodeName = buildNodeName(i)-->Line_25 $$ NodeAndClient nodeAndClient = nodes.get(buildNodeName)[ FD ]
Line_23 $$ for (int i = 0; i < numSharedDataNodes; i++) -->Line_35 $$ String buildNodeName = buildNodeName(i)[ FD ]
Line_24 $$ String buildNodeName = buildNodeName(i)-->Line_36 $$ NodeAndClient nodeAndClient = nodes.get(buildNodeName)[ FD ]
Line_25 $$ NodeAndClient nodeAndClient = nodes.get(buildNodeName)-->Line_28 $$ nodeAndClient = buildNode(i, sharedNodesSeeds[i], null, Version.CURRENT)[ FD ]
Line_37 $$ if (nodeAndClient == null) -->Line_39 $$ Builder clientSettingsBuilder = Settings.builder().put("node.client", true)[ CD ]
Line_23 $$ for (int i = 0; i < numSharedDataNodes; i++) -->Line_28 $$ nodeAndClient = buildNode(i, sharedNodesSeeds[i], null, Version.CURRENT)[ FD ]
Line_3 $$ for (NodeAndClient nodeAndClient : nodes.values()) -->Line_28 $$ nodeAndClient = buildNode(i, sharedNodesSeeds[i], null, Version.CURRENT)[ FD ]
Line_3 $$ for (NodeAndClient nodeAndClient : nodes.values()) -->Line_63 $$ publishNode(nodeAndClient)[ FD ]
Line_5 $$ if (transportService instanceof MockTransportService) -->Line_8 $$ mockTransportService.clearTracers()[ CD ]
Line_28 $$ nodeAndClient = buildNode(i, sharedNodesSeeds[i], null, Version.CURRENT)-->Line_44 $$ sharedNodes.add(nodeAndClient)[ FD ]
Line_46 $$ if (!changed && sharedNodes.size() == nodes.size()) -->Line_48 $$ if (size() > 0) [ CD ]
Line_25 $$ NodeAndClient nodeAndClient = nodes.get(buildNodeName)-->Line_44 $$ sharedNodes.add(nodeAndClient)[ FD ]
Line_48 $$ if (size() > 0) -->Line_49 $$ client().admin().cluster().prepareHealth().setWaitForNodes(Integer.toString(sharedNodesSeeds.length)).get()[ CD ]
Line_3 $$ for (NodeAndClient nodeAndClient : nodes.values()) -->Line_32 $$ sharedNodes.add(nodeAndClient)[ FD ]
Line_28 $$ nodeAndClient = buildNode(i, sharedNodesSeeds[i], null, Version.CURRENT)-->Line_37 $$ if (nodeAndClient == null) [ FD ]
Line_3 $$ for (NodeAndClient nodeAndClient : nodes.values()) -->Line_44 $$ sharedNodes.add(nodeAndClient)[ FD ]
Line_34 $$ for (int i = numSharedDataNodes; i < numSharedDataNodes + numSharedClientNodes; i++) -->Line_40 $$ nodeAndClient = buildNode(i, sharedNodesSeeds[i], clientSettingsBuilder.build(), Version.CURRENT)[ FD ]
Line_2 $$ private synchronized void reset(boolean wipeData) throws IOException -->Line_11 $$ randomlyResetClients()[ CD ]
Line_23 $$ for (int i = 0; i < numSharedDataNodes; i++) -->Line_34 $$ for (int i = numSharedDataNodes; i < numSharedDataNodes + numSharedClientNodes; i++) [ FD ]
Line_26 $$ if (nodeAndClient == null) -->Line_27 $$ changed = true[ CD ]
Line_26 $$ if (nodeAndClient == null) -->Line_29 $$ nodeAndClient.node.start()[ CD ]
Line_2 $$ private synchronized void reset(boolean wipeData) throws IOException -->Line_15 $$ if (nextNodeId.get() == sharedNodesSeeds.length && nodes.size() == sharedNodesSeeds.length) [ CD ]
Line_25 $$ NodeAndClient nodeAndClient = nodes.get(buildNodeName)-->Line_40 $$ nodeAndClient = buildNode(i, sharedNodesSeeds[i], clientSettingsBuilder.build(), Version.CURRENT)[ FD ]
Line_20 $$ Set<NodeAndClient> sharedNodes = new HashSet()-->Line_46 $$ if (!changed && sharedNodes.size() == nodes.size()) [ FD ]
Line_36 $$ NodeAndClient nodeAndClient = nodes.get(buildNodeName)-->Line_40 $$ nodeAndClient = buildNode(i, sharedNodesSeeds[i], clientSettingsBuilder.build(), Version.CURRENT)[ FD ]
Line_2 $$ private synchronized void reset(boolean wipeData) throws IOException -->Line_70 $$ logger.debug("Cluster is consistent again - nodes: [[ CD ]
Line_20 $$ Set<NodeAndClient> sharedNodes = new HashSet()-->Line_32 $$ sharedNodes.add(nodeAndClient)[ FD ]
Line_20 $$ Set<NodeAndClient> sharedNodes = new HashSet()-->Line_44 $$ sharedNodes.add(nodeAndClient)[ FD ]
Line_2 $$ private synchronized void reset(boolean wipeData) throws IOException -->Line_65 $$ nextNodeId.set(sharedNodesSeeds.length)[ CD ]
Line_36 $$ NodeAndClient nodeAndClient = nodes.get(buildNodeName)-->Line_37 $$ if (nodeAndClient == null) [ FD ]
Line_34 $$ for (int i = numSharedDataNodes; i < numSharedDataNodes + numSharedClientNodes; i++) -->Line_35 $$ String buildNodeName = buildNodeName(i)[ FD ]
Line_2 $$ private synchronized void reset(boolean wipeData) throws IOException -->Line_12 $$ if (wipeData) [ CD ]
Line_2 $$ private synchronized void reset(boolean wipeData) throws IOException -->Line_56 $$ final Collection<NodeAndClient> toShutDown = nodes.values()[ CD ]
Line_5 $$ if (transportService instanceof MockTransportService) -->Line_7 $$ mockTransportService.clearAllRules()[ CD ]
Line_28 $$ nodeAndClient = buildNode(i, sharedNodesSeeds[i], null, Version.CURRENT)-->Line_59 $$ nodeAndClient.close()[ FD ]
Line_26 $$ if (nodeAndClient == null) -->Line_30 $$ logger.info("Start Shared Node [[ CD ]
Line_39 $$ Builder clientSettingsBuilder = Settings.builder().put("node.client", true)-->Line_40 $$ nodeAndClient = buildNode(i, sharedNodesSeeds[i], clientSettingsBuilder.build(), Version.CURRENT)[ FD ]
Line_37 $$ if (nodeAndClient == null) -->Line_42 $$ logger.info("Start Shared Node [[ CD ]
