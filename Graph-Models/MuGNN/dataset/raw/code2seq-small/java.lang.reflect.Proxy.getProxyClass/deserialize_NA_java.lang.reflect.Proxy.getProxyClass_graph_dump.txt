Line_5 $$ final ClassLoader systemClassLoader = SYSTEM_CLASS_LOADER-->Line_28 $$ return Class.forName(className, false, systemClassLoader)[ FD ]
Line_26 $$ String className = readUTF()-->Line_31 $$ return map.resolveClass(classLoader, className)[ FD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_44 $$ return objectStream.readObject()[ FD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_31 $$ return map.resolveClass(classLoader, className)[ CD ]
Line_38 $$ for (int i = 0; i < count; i++) -->Line_39 $$ actualInterfaces[i] = readClass()[ CD ]
Line_26 $$ String className = readUTF()-->Line_28 $$ return Class.forName(className, false, systemClassLoader)[ FD ]
Line_37 $$ Class<?>[] actualInterfaces = new Class<?>[count]-->Line_41 $$ return Proxy.getProxyClass(actualInterfaces[0].getClassLoader(), actualInterfaces)[ FD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_37 $$ Class<?>[] actualInterfaces = new Class<?>[count][ CD ]
Line_6 $$ final Map<Short, ClassLoaderDetails> classLoaderDetails = (Map<Short, ClassLoaderDetails>) payload.getHeader()-->Line_30 $$ ClassLoaderDetails classLoader = classLoaderDetails.get(id)[ FD ]
Line_2 $$ public Object deserialize(SerializedPayload payload) -->Line_3 $$ final DeserializeMap map = classLoaderRegistry.newDeserializeSession()[ CD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_13 $$ if (descriptor == null) [ CD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_16 $$ return descriptor[ CD ]
Line_30 $$ ClassLoaderDetails classLoader = classLoaderDetails.get(id)-->Line_31 $$ return map.resolveClass(classLoader, className)[ FD ]
Line_12 $$ ObjectStreamClass descriptor = classLookup.transform(aClass)-->Line_13 $$ if (descriptor == null) [ FD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_11 $$ Class<?> aClass = readClass()[ CD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_12 $$ ObjectStreamClass descriptor = classLookup.transform(aClass)[ CD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_25 $$ short id = readShort()[ CD ]
Line_25 $$ short id = readShort()-->Line_30 $$ ClassLoaderDetails classLoader = classLoaderDetails.get(id)[ FD ]
Line_11 $$ Class<?> aClass = readClass()-->Line_12 $$ ObjectStreamClass descriptor = classLookup.transform(aClass)[ FD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_36 $$ int count = readInt()[ CD ]
Line_11 $$ Class<?> aClass = readClass()-->Line_14 $$ throw new ClassNotFoundException(aClass.getName())[ FD ]
Line_25 $$ short id = readShort()-->Line_27 $$ if (id == SYSTEM_CLASS_LOADER_ID) [ FD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_38 $$ for (int i = 0; i < count; i++) [ CD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_41 $$ return Proxy.getProxyClass(actualInterfaces[0].getClassLoader(), actualInterfaces)[ CD ]
Line_3 $$ final DeserializeMap map = classLoaderRegistry.newDeserializeSession()-->Line_31 $$ return map.resolveClass(classLoader, className)[ FD ]
Line_2 $$ public Object deserialize(SerializedPayload payload) -->Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) [ FD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_30 $$ ClassLoaderDetails classLoader = classLoaderDetails.get(id)[ CD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_27 $$ if (id == SYSTEM_CLASS_LOADER_ID) [ CD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_26 $$ String className = readUTF()[ CD ]
Line_27 $$ if (id == SYSTEM_CLASS_LOADER_ID) -->Line_28 $$ return Class.forName(className, false, systemClassLoader)[ CD ]
Line_36 $$ int count = readInt()-->Line_38 $$ for (int i = 0; i < count; i++) [ FD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_21 $$ return desc.forClass()[ CD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_21 $$ return desc.forClass()[ FD ]
Line_2 $$ public Object deserialize(SerializedPayload payload) -->Line_6 $$ final Map<Short, ClassLoaderDetails> classLoaderDetails = (Map<Short, ClassLoaderDetails>) payload.getHeader()[ FD ]
