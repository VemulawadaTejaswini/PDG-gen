Line_20 $$ short id = readShort()-->Line_22 $$ if (id == SYSTEM_CLASS_LOADER_ID) [ FD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_25 $$ ClassLoaderDetails classLoader = classLoaderDetails.get(id)[ CD ]
Line_2 $$ public Object deserialize(SerializedPayload payload) -->Line_6 $$ final Map<Short, ClassLoaderDetails> classLoaderDetails = (Map<Short, ClassLoaderDetails>) payload.getHeader()[ FD ]
Line_29 $$ int count = readInt()-->Line_31 $$ for (int i = 0; i < count; i++) [ FD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_21 $$ String className = readUTF()[ CD ]
Line_21 $$ String className = readUTF()-->Line_23 $$ return Class.forName(className, false, systemClassLoader)[ FD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_29 $$ int count = readInt()[ CD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_34 $$ return Proxy.getProxyClass(actualInterfaces[0].getClassLoader(), actualInterfaces)[ CD ]
Line_9 $$ Class<?> aClass = readClass()-->Line_10 $$ ObjectStreamClass descriptor = classLookup.transform(aClass)[ FD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_20 $$ short id = readShort()[ CD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_31 $$ for (int i = 0; i < count; i++) [ CD ]
Line_3 $$ final DeserializeMap map = classLoaderRegistry.newDeserializeSession()-->Line_26 $$ return map.resolveClass(classLoader, className)[ FD ]
Line_5 $$ final ClassLoader systemClassLoader = SYSTEM_CLASS_LOADER-->Line_23 $$ return Class.forName(className, false, systemClassLoader)[ FD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_37 $$ return objectStream.readObject()[ FD ]
Line_2 $$ public Object deserialize(SerializedPayload payload) -->Line_3 $$ final DeserializeMap map = classLoaderRegistry.newDeserializeSession()[ CD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_11 $$ if (descriptor == null) [ CD ]
Line_22 $$ if (id == SYSTEM_CLASS_LOADER_ID) -->Line_23 $$ return Class.forName(className, false, systemClassLoader)[ CD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_9 $$ Class<?> aClass = readClass()[ CD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_26 $$ return map.resolveClass(classLoader, className)[ CD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_17 $$ return desc.forClass()[ FD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_17 $$ return desc.forClass()[ CD ]
Line_30 $$ Class<?>[] actualInterfaces = new Class<?>[count]-->Line_34 $$ return Proxy.getProxyClass(actualInterfaces[0].getClassLoader(), actualInterfaces)[ FD ]
Line_20 $$ short id = readShort()-->Line_25 $$ ClassLoaderDetails classLoader = classLoaderDetails.get(id)[ FD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_10 $$ ObjectStreamClass descriptor = classLookup.transform(aClass)[ CD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_30 $$ Class<?>[] actualInterfaces = new Class<?>[count][ CD ]
Line_10 $$ ObjectStreamClass descriptor = classLookup.transform(aClass)-->Line_11 $$ if (descriptor == null) [ FD ]
Line_9 $$ Class<?> aClass = readClass()-->Line_12 $$ throw new ClassNotFoundException(aClass.getName())[ FD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_22 $$ if (id == SYSTEM_CLASS_LOADER_ID) [ CD ]
Line_6 $$ final Map<Short, ClassLoaderDetails> classLoaderDetails = (Map<Short, ClassLoaderDetails>) payload.getHeader()-->Line_25 $$ ClassLoaderDetails classLoader = classLoaderDetails.get(id)[ FD ]
Line_25 $$ ClassLoaderDetails classLoader = classLoaderDetails.get(id)-->Line_26 $$ return map.resolveClass(classLoader, className)[ FD ]
Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) -->Line_14 $$ return descriptor[ CD ]
Line_21 $$ String className = readUTF()-->Line_26 $$ return map.resolveClass(classLoader, className)[ FD ]
Line_2 $$ public Object deserialize(SerializedPayload payload) -->Line_7 $$ final ObjectInputStream objectStream = new ObjectInputStream(new ByteArrayInputStream(payload.getSerializedModel())) [ FD ]
Line_31 $$ for (int i = 0; i < count; i++) -->Line_32 $$ actualInterfaces[i] = readClass()[ CD ]
