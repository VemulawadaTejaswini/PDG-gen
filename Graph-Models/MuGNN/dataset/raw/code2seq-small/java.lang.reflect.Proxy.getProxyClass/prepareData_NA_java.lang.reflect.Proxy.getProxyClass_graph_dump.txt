Line_55 $$ if ((cl.getModifiers() & Modifier.PUBLIC) == 0) -->Line_56 $$ if (hasNonPublicInterface) [ CD ]
Line_21 $$ oIn = new ObjectInputStream(new ByteArrayInputStream(myRawData)) -->Line_74 $$ myData = (T) oIn.readObject()[ FD ]
Line_53 $$ for (int i = 0; i < interfaces.length; i++) -->Line_65 $$ classObjs[i] = cl[ CD ]
Line_49 $$ ClassLoader nonPublicLoader = null-->Line_57 $$ if (nonPublicLoader != cl.getClassLoader()) [ FD ]
Line_25 $$ String name = desc.getName()-->Line_28 $$ return Class.forName(name, false, loader)[ FD ]
Line_19 $$ ObjectInputStream oIn = null-->Line_82 $$ StreamUtil.closeStream(oIn)[ FD ]
Line_56 $$ if (hasNonPublicInterface) -->Line_62 $$ hasNonPublicInterface = true[ CD ]
Line_21 $$ oIn = new ObjectInputStream(new ByteArrayInputStream(myRawData)) -->Line_45 $$ return super.resolveProxyClass(interfaces)[ CD ]
Line_54 $$ Class cl = Class.forName(interfaces[i], false, loader)-->Line_61 $$ nonPublicLoader = cl.getClassLoader()[ FD ]
Line_26 $$ for (ClassLoader loader : loaders) -->Line_40 $$ return doResolveProxyClass(interfaces, loader)[ FD ]
Line_19 $$ ObjectInputStream oIn = null-->Line_21 $$ oIn = new ObjectInputStream(new ByteArrayInputStream(myRawData)) [ FD ]
Line_54 $$ Class cl = Class.forName(interfaces[i], false, loader)-->Line_65 $$ classObjs[i] = cl[ FD ]
Line_19 $$ ObjectInputStream oIn = null-->Line_74 $$ myData = (T) oIn.readObject()[ FD ]
Line_16 $$ if (myData != null) -->Line_17 $$ return[ CD ]
Line_50 $$ boolean hasNonPublicInterface = false-->Line_62 $$ hasNonPublicInterface = true[ FD ]
Line_21 $$ oIn = new ObjectInputStream(new ByteArrayInputStream(myRawData)) -->Line_49 $$ ClassLoader nonPublicLoader = null[ CD ]
Line_56 $$ if (hasNonPublicInterface) -->Line_57 $$ if (nonPublicLoader != cl.getClassLoader()) [ CD ]
Line_21 $$ oIn = new ObjectInputStream(new ByteArrayInputStream(myRawData)) -->Line_25 $$ String name = desc.getName()[ CD ]
Line_38 $$ for (ClassLoader loader : loaders) -->Line_54 $$ Class cl = Class.forName(interfaces[i], false, loader)[ FD ]
Line_21 $$ oIn = new ObjectInputStream(new ByteArrayInputStream(myRawData)) -->Line_54 $$ Class cl = Class.forName(interfaces[i], false, loader)[ FD ]
Line_21 $$ oIn = new ObjectInputStream(new ByteArrayInputStream(myRawData)) -->Line_50 $$ boolean hasNonPublicInterface = false[ CD ]
Line_54 $$ Class cl = Class.forName(interfaces[i], false, loader)-->Line_55 $$ if ((cl.getModifiers() & Modifier.PUBLIC) == 0) [ FD ]
Line_56 $$ if (hasNonPublicInterface) -->Line_61 $$ nonPublicLoader = cl.getClassLoader()[ CD ]
Line_61 $$ nonPublicLoader = cl.getClassLoader()-->Line_57 $$ if (nonPublicLoader != cl.getClassLoader()) [ FD ]
Line_21 $$ oIn = new ObjectInputStream(new ByteArrayInputStream(myRawData)) -->Line_33 $$ return super.resolveClass(desc)[ CD ]
Line_26 $$ for (ClassLoader loader : loaders) -->Line_54 $$ Class cl = Class.forName(interfaces[i], false, loader)[ FD ]
Line_53 $$ for (int i = 0; i < interfaces.length; i++) -->Line_55 $$ if ((cl.getModifiers() & Modifier.PUBLIC) == 0) [ CD ]
Line_21 $$ oIn = new ObjectInputStream(new ByteArrayInputStream(myRawData)) -->Line_40 $$ return doResolveProxyClass(interfaces, loader)[ FD ]
Line_49 $$ ClassLoader nonPublicLoader = null-->Line_61 $$ nonPublicLoader = cl.getClassLoader()[ FD ]
Line_21 $$ oIn = new ObjectInputStream(new ByteArrayInputStream(myRawData)) -->Line_33 $$ return super.resolveClass(desc)[ FD ]
Line_26 $$ for (ClassLoader loader : loaders) -->Line_28 $$ return Class.forName(name, false, loader)[ FD ]
Line_21 $$ oIn = new ObjectInputStream(new ByteArrayInputStream(myRawData)) -->Line_45 $$ return super.resolveProxyClass(interfaces)[ FD ]
Line_53 $$ for (int i = 0; i < interfaces.length; i++) -->Line_54 $$ Class cl = Class.forName(interfaces[i], false, loader)[ CD ]
Line_21 $$ oIn = new ObjectInputStream(new ByteArrayInputStream(myRawData)) -->Line_82 $$ StreamUtil.closeStream(oIn)[ FD ]
Line_21 $$ oIn = new ObjectInputStream(new ByteArrayInputStream(myRawData)) -->Line_25 $$ String name = desc.getName()[ FD ]
Line_21 $$ oIn = new ObjectInputStream(new ByteArrayInputStream(myRawData)) -->Line_53 $$ for (int i = 0; i < interfaces.length; i++) [ CD ]
Line_38 $$ for (ClassLoader loader : loaders) -->Line_40 $$ return doResolveProxyClass(interfaces, loader)[ FD ]
Line_54 $$ Class cl = Class.forName(interfaces[i], false, loader)-->Line_57 $$ if (nonPublicLoader != cl.getClassLoader()) [ FD ]
