Line_12 $$ Class<?> clazz = classReferences.get(lookupKey)-->Line_18 $$ classReferences.put(lookupKey, clazz)[ FD ]
Line_3 $$ ConcurrentMap<LookupKey, Class<?>> classReferences = _classReferences.get(classLoader)-->Line_8 $$ classReferences = oldClassReferences[ FD ]
Line_15 $$ clazz = classReferences.get(lookupKey)-->Line_18 $$ classReferences.put(lookupKey, clazz)[ FD ]
Line_5 $$ classReferences = new ConcurrentReferenceValueHashMap(FinalizeManager.WEAK_REFERENCE_FACTORY)-->Line_18 $$ classReferences.put(lookupKey, clazz)[ FD ]
Line_8 $$ classReferences = oldClassReferences-->Line_15 $$ clazz = classReferences.get(lookupKey)[ FD ]
Line_3 $$ ConcurrentMap<LookupKey, Class<?>> classReferences = _classReferences.get(classLoader)-->Line_6 $$ ConcurrentMap<LookupKey, Class<?>> oldClassReferences = _classReferences.putIfAbsent(classLoader, classReferences)[ FD ]
Line_11 $$ LookupKey lookupKey = new LookupKey(interfaceClasses)-->Line_12 $$ Class<?> clazz = classReferences.get(lookupKey)[ FD ]
Line_2 $$ public static Class<?> getProxyClass(ClassLoader classLoader, Class<?>... interfaceClasses) -->Line_3 $$ ConcurrentMap<LookupKey, Class<?>> classReferences = _classReferences.get(classLoader)[ CD ]
Line_2 $$ public static Class<?> getProxyClass(ClassLoader classLoader, Class<?>... interfaceClasses) -->Line_3 $$ ConcurrentMap<LookupKey, Class<?>> classReferences = _classReferences.get(classLoader)[ FD ]
Line_6 $$ ConcurrentMap<LookupKey, Class<?>> oldClassReferences = _classReferences.putIfAbsent(classLoader, classReferences)-->Line_8 $$ classReferences = oldClassReferences[ FD ]
Line_7 $$ if (oldClassReferences != null) -->Line_8 $$ classReferences = oldClassReferences[ CD ]
Line_12 $$ Class<?> clazz = classReferences.get(lookupKey)-->Line_29 $$ _constructors.putIfAbsent(clazz, constructor)[ FD ]
Line_24 $$ constructor = clazz.getConstructor(_argumentsClazz)-->Line_29 $$ _constructors.putIfAbsent(clazz, constructor)[ FD ]
Line_24 $$ constructor = clazz.getConstructor(_argumentsClazz)-->Line_25 $$ constructor.setAccessible(true)[ FD ]
Line_15 $$ clazz = classReferences.get(lookupKey)-->Line_29 $$ _constructors.putIfAbsent(clazz, constructor)[ FD ]
Line_17 $$ clazz = Proxy.getProxyClass(classLoader, interfaceClasses)-->Line_18 $$ classReferences.put(lookupKey, clazz)[ FD ]
Line_2 $$ public static Class<?> getProxyClass(ClassLoader classLoader, Class<?>... interfaceClasses) -->Line_4 $$ if (classReferences == null) [ CD ]
Line_8 $$ classReferences = oldClassReferences-->Line_18 $$ classReferences.put(lookupKey, clazz)[ FD ]
Line_12 $$ Class<?> clazz = classReferences.get(lookupKey)-->Line_24 $$ constructor = clazz.getConstructor(_argumentsClazz)[ FD ]
Line_3 $$ ConcurrentMap<LookupKey, Class<?>> classReferences = _classReferences.get(classLoader)-->Line_15 $$ clazz = classReferences.get(lookupKey)[ FD ]
Line_5 $$ classReferences = new ConcurrentReferenceValueHashMap(FinalizeManager.WEAK_REFERENCE_FACTORY)-->Line_12 $$ Class<?> clazz = classReferences.get(lookupKey)[ FD ]
Line_5 $$ classReferences = new ConcurrentReferenceValueHashMap(FinalizeManager.WEAK_REFERENCE_FACTORY)-->Line_15 $$ clazz = classReferences.get(lookupKey)[ FD ]
Line_5 $$ classReferences = new ConcurrentReferenceValueHashMap(FinalizeManager.WEAK_REFERENCE_FACTORY)-->Line_8 $$ classReferences = oldClassReferences[ FD ]
Line_15 $$ clazz = classReferences.get(lookupKey)-->Line_17 $$ clazz = Proxy.getProxyClass(classLoader, interfaceClasses)[ FD ]
Line_3 $$ ConcurrentMap<LookupKey, Class<?>> classReferences = _classReferences.get(classLoader)-->Line_12 $$ Class<?> clazz = classReferences.get(lookupKey)[ FD ]
Line_3 $$ ConcurrentMap<LookupKey, Class<?>> classReferences = _classReferences.get(classLoader)-->Line_4 $$ if (classReferences == null) [ FD ]
Line_5 $$ classReferences = new ConcurrentReferenceValueHashMap(FinalizeManager.WEAK_REFERENCE_FACTORY)-->Line_6 $$ ConcurrentMap<LookupKey, Class<?>> oldClassReferences = _classReferences.putIfAbsent(classLoader, classReferences)[ FD ]
Line_2 $$ public static Class<?> getProxyClass(ClassLoader classLoader, Class<?>... interfaceClasses) -->Line_6 $$ ConcurrentMap<LookupKey, Class<?>> oldClassReferences = _classReferences.putIfAbsent(classLoader, classReferences)[ FD ]
Line_17 $$ clazz = Proxy.getProxyClass(classLoader, interfaceClasses)-->Line_24 $$ constructor = clazz.getConstructor(_argumentsClazz)[ FD ]
Line_12 $$ Class<?> clazz = classReferences.get(lookupKey)-->Line_13 $$ if (clazz == null) [ FD ]
Line_15 $$ clazz = classReferences.get(lookupKey)-->Line_24 $$ constructor = clazz.getConstructor(_argumentsClazz)[ FD ]
Line_2 $$ public static Class<?> getProxyClass(ClassLoader classLoader, Class<?>... interfaceClasses) -->Line_29 $$ _constructors.putIfAbsent(clazz, constructor)[ CD ]
Line_8 $$ classReferences = oldClassReferences-->Line_12 $$ Class<?> clazz = classReferences.get(lookupKey)[ FD ]
Line_11 $$ LookupKey lookupKey = new LookupKey(interfaceClasses)-->Line_15 $$ clazz = classReferences.get(lookupKey)[ FD ]
Line_2 $$ public static Class<?> getProxyClass(ClassLoader classLoader, Class<?>... interfaceClasses) -->Line_30 $$ return clazz[ CD ]
Line_4 $$ if (classReferences == null) -->Line_7 $$ if (oldClassReferences != null) [ CD ]
Line_22 $$ Constructor<?> constructor = null-->Line_24 $$ constructor = clazz.getConstructor(_argumentsClazz)[ FD ]
Line_2 $$ public static Class<?> getProxyClass(ClassLoader classLoader, Class<?>... interfaceClasses) -->Line_22 $$ Constructor<?> constructor = null[ CD ]
Line_4 $$ if (classReferences == null) -->Line_5 $$ classReferences = new ConcurrentReferenceValueHashMap(FinalizeManager.WEAK_REFERENCE_FACTORY)[ CD ]
Line_17 $$ clazz = Proxy.getProxyClass(classLoader, interfaceClasses)-->Line_29 $$ _constructors.putIfAbsent(clazz, constructor)[ FD ]
Line_16 $$ if (clazz == null) -->Line_18 $$ classReferences.put(lookupKey, clazz)[ CD ]
Line_3 $$ ConcurrentMap<LookupKey, Class<?>> classReferences = _classReferences.get(classLoader)-->Line_5 $$ classReferences = new ConcurrentReferenceValueHashMap(FinalizeManager.WEAK_REFERENCE_FACTORY)[ FD ]
Line_15 $$ clazz = classReferences.get(lookupKey)-->Line_16 $$ if (clazz == null) [ FD ]
Line_2 $$ public static Class<?> getProxyClass(ClassLoader classLoader, Class<?>... interfaceClasses) -->Line_17 $$ clazz = Proxy.getProxyClass(classLoader, interfaceClasses)[ FD ]
Line_22 $$ Constructor<?> constructor = null-->Line_25 $$ constructor.setAccessible(true)[ FD ]
Line_4 $$ if (classReferences == null) -->Line_6 $$ ConcurrentMap<LookupKey, Class<?>> oldClassReferences = _classReferences.putIfAbsent(classLoader, classReferences)[ CD ]
Line_2 $$ public static Class<?> getProxyClass(ClassLoader classLoader, Class<?>... interfaceClasses) -->Line_12 $$ Class<?> clazz = classReferences.get(lookupKey)[ CD ]
Line_12 $$ Class<?> clazz = classReferences.get(lookupKey)-->Line_15 $$ clazz = classReferences.get(lookupKey)[ FD ]
Line_16 $$ if (clazz == null) -->Line_17 $$ clazz = Proxy.getProxyClass(classLoader, interfaceClasses)[ CD ]
Line_6 $$ ConcurrentMap<LookupKey, Class<?>> oldClassReferences = _classReferences.putIfAbsent(classLoader, classReferences)-->Line_7 $$ if (oldClassReferences != null) [ FD ]
Line_12 $$ Class<?> clazz = classReferences.get(lookupKey)-->Line_16 $$ if (clazz == null) [ FD ]
Line_12 $$ Class<?> clazz = classReferences.get(lookupKey)-->Line_17 $$ clazz = Proxy.getProxyClass(classLoader, interfaceClasses)[ FD ]
Line_22 $$ Constructor<?> constructor = null-->Line_29 $$ _constructors.putIfAbsent(clazz, constructor)[ FD ]
Line_3 $$ ConcurrentMap<LookupKey, Class<?>> classReferences = _classReferences.get(classLoader)-->Line_18 $$ classReferences.put(lookupKey, clazz)[ FD ]
Line_11 $$ LookupKey lookupKey = new LookupKey(interfaceClasses)-->Line_18 $$ classReferences.put(lookupKey, clazz)[ FD ]
Line_2 $$ public static Class<?> getProxyClass(ClassLoader classLoader, Class<?>... interfaceClasses) -->Line_11 $$ LookupKey lookupKey = new LookupKey(interfaceClasses)[ CD ]
Line_2 $$ public static Class<?> getProxyClass(ClassLoader classLoader, Class<?>... interfaceClasses) -->Line_13 $$ if (clazz == null) [ CD ]
