Line_2 $$ private void initializeAddInvoiceWithMetaData(boolean isFunction) throws SQLException -->Line_6 $$ given(databaseMetaData.getUserName()).willReturn("ME")[ CD ]
Line_4 $$ ResultSet procedureColumnsResultSet = mock(ResultSet.class)-->Line_12 $$ given(procedureColumnsResultSet.next()).willReturn(true, true, true, false)[ FD ]
Line_2 $$ private void initializeAddInvoiceWithMetaData(boolean isFunction) throws SQLException -->Line_12 $$ given(procedureColumnsResultSet.next()).willReturn(true, true, true, false)[ CD ]
Line_14 $$ if (isFunction) -->Line_21 $$ given(procedureColumnsResultSet.getInt("COLUMN_TYPE")).willReturn(1, 1, 4)[ CD ]
Line_3 $$ ResultSet proceduresResultSet = mock(ResultSet.class)-->Line_11 $$ given(proceduresResultSet.getString("PROCEDURE_NAME")).willReturn("add_invoice")[ FD ]
Line_2 $$ private void initializeAddInvoiceWithMetaData(boolean isFunction) throws SQLException -->Line_13 $$ given(procedureColumnsResultSet.getInt("DATA_TYPE")).willReturn(4)[ CD ]
Line_14 $$ if (isFunction) -->Line_15 $$ given(procedureColumnsResultSet.getString("COLUMN_NAME")).willReturn(null, "amount", "custid")[ CD ]
Line_2 $$ private void initializeAddInvoiceWithMetaData(boolean isFunction) throws SQLException -->Line_25 $$ given(callableStatement.getUpdateCount()).willReturn(-1)[ CD ]
Line_14 $$ if (isFunction) -->Line_23 $$ given(callableStatement.getObject(3)).willReturn(4L)[ CD ]
Line_4 $$ ResultSet procedureColumnsResultSet = mock(ResultSet.class)-->Line_13 $$ given(procedureColumnsResultSet.getInt("DATA_TYPE")).willReturn(4)[ FD ]
Line_14 $$ if (isFunction) -->Line_16 $$ given(procedureColumnsResultSet.getInt("COLUMN_TYPE")).willReturn(5, 1, 1)[ CD ]
Line_4 $$ ResultSet procedureColumnsResultSet = mock(ResultSet.class)-->Line_15 $$ given(procedureColumnsResultSet.getString("COLUMN_NAME")).willReturn(null, "amount", "custid")[ FD ]
Line_2 $$ private void initializeAddInvoiceWithMetaData(boolean isFunction) throws SQLException -->Line_5 $$ given(databaseMetaData.getDatabaseProductName()).willReturn("Oracle")[ CD ]
Line_4 $$ ResultSet procedureColumnsResultSet = mock(ResultSet.class)-->Line_16 $$ given(procedureColumnsResultSet.getInt("COLUMN_TYPE")).willReturn(5, 1, 1)[ FD ]
Line_2 $$ private void initializeAddInvoiceWithMetaData(boolean isFunction) throws SQLException -->Line_7 $$ given(databaseMetaData.storesUpperCaseIdentifiers()).willReturn(true)[ CD ]
Line_2 $$ private void initializeAddInvoiceWithMetaData(boolean isFunction) throws SQLException -->Line_11 $$ given(proceduresResultSet.getString("PROCEDURE_NAME")).willReturn("add_invoice")[ CD ]
Line_14 $$ if (isFunction) -->Line_22 $$ given(connection.prepareCall("[ CD ]
Line_3 $$ ResultSet proceduresResultSet = mock(ResultSet.class)-->Line_10 $$ given(proceduresResultSet.next()).willReturn(true, false)[ FD ]
Line_2 $$ private void initializeAddInvoiceWithMetaData(boolean isFunction) throws SQLException -->Line_8 $$ given(databaseMetaData.getProcedures("", "ME", "ADD_INVOICE")).willReturn(proceduresResultSet)[ CD ]
Line_2 $$ private void initializeAddInvoiceWithMetaData(boolean isFunction) throws SQLException -->Line_3 $$ ResultSet proceduresResultSet = mock(ResultSet.class)[ CD ]
Line_14 $$ if (isFunction) -->Line_20 $$ given(procedureColumnsResultSet.getString("COLUMN_NAME")).willReturn("amount", "custid", "newid")[ CD ]
Line_2 $$ private void initializeAddInvoiceWithMetaData(boolean isFunction) throws SQLException -->Line_10 $$ given(proceduresResultSet.next()).willReturn(true, false)[ CD ]
Line_14 $$ if (isFunction) -->Line_18 $$ given(callableStatement.getObject(1)).willReturn(4L)[ CD ]
Line_2 $$ private void initializeAddInvoiceWithMetaData(boolean isFunction) throws SQLException -->Line_9 $$ given(databaseMetaData.getProcedureColumns("", "ME", "ADD_INVOICE", null)).willReturn(procedureColumnsResultSet)[ CD ]
Line_3 $$ ResultSet proceduresResultSet = mock(ResultSet.class)-->Line_8 $$ given(databaseMetaData.getProcedures("", "ME", "ADD_INVOICE")).willReturn(proceduresResultSet)[ FD ]
Line_4 $$ ResultSet procedureColumnsResultSet = mock(ResultSet.class)-->Line_9 $$ given(databaseMetaData.getProcedureColumns("", "ME", "ADD_INVOICE", null)).willReturn(procedureColumnsResultSet)[ FD ]
Line_4 $$ ResultSet procedureColumnsResultSet = mock(ResultSet.class)-->Line_20 $$ given(procedureColumnsResultSet.getString("COLUMN_NAME")).willReturn("amount", "custid", "newid")[ FD ]
Line_14 $$ if (isFunction) -->Line_17 $$ given(connection.prepareCall("[ CD ]
Line_2 $$ private void initializeAddInvoiceWithMetaData(boolean isFunction) throws SQLException -->Line_4 $$ ResultSet procedureColumnsResultSet = mock(ResultSet.class)[ CD ]
Line_4 $$ ResultSet procedureColumnsResultSet = mock(ResultSet.class)-->Line_21 $$ given(procedureColumnsResultSet.getInt("COLUMN_TYPE")).willReturn(1, 1, 4)[ FD ]
Line_2 $$ private void initializeAddInvoiceWithMetaData(boolean isFunction) throws SQLException -->Line_14 $$ if (isFunction) [ CD ]
