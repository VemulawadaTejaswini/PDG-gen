Line_3 $$ if (type == null) -->Line_5 $$ if (type instanceof Class) [ CD ]
Line_13 $$ if (type instanceof TypeVariable) -->Line_15 $$ return new TypeVariableTypeWrapper<GenericDeclaration>(typeVariable.getName(), toWrappers(typeVariable.getBounds()), type.hashCode())[ CD ]
Line_2 $$ private static TypeWrapper wrap(Type type) -->Line_16 $$ if (type instanceof GenericArrayType) [ FD ]
Line_3 $$ if (type == null) -->Line_4 $$ return null[ CD ]
Line_13 $$ if (type instanceof TypeVariable) -->Line_16 $$ if (type instanceof GenericArrayType) [ CD ]
Line_2 $$ private static TypeWrapper wrap(Type type) -->Line_10 $$ if (type instanceof WildcardType) [ FD ]
Line_8 $$ ParameterizedType parameterizedType = (ParameterizedType) type-->Line_9 $$ return new ParameterizedTypeWrapper(toWrappers(parameterizedType.getActualTypeArguments()), (ClassTypeWrapper) wrap(parameterizedType.getRawType()), wrap(parameterizedType.getOwnerType()), type.hashCode())[ FD ]
Line_17 $$ GenericArrayType genericArrayType = (GenericArrayType) type-->Line_18 $$ return new GenericArrayTypeWrapper(wrap(genericArrayType.getGenericComponentType()), type.hashCode())[ FD ]
Line_2 $$ private static TypeWrapper wrap(Type type) -->Line_7 $$ if (type instanceof ParameterizedType) [ FD ]
Line_2 $$ private static TypeWrapper wrap(Type type) -->Line_20 $$ throw new IllegalArgumentException("cannot wrap type of type " + type.getClass())[ FD ]
Line_7 $$ if (type instanceof ParameterizedType) -->Line_8 $$ ParameterizedType parameterizedType = (ParameterizedType) type[ CD ]
Line_2 $$ private static TypeWrapper wrap(Type type) -->Line_12 $$ return new WildcardTypeWrapper(toWrappers(wildcardType.getUpperBounds()), toWrappers(wildcardType.getLowerBounds()), type.hashCode())[ FD ]
Line_11 $$ WildcardType wildcardType = (WildcardType) type-->Line_12 $$ return new WildcardTypeWrapper(toWrappers(wildcardType.getUpperBounds()), toWrappers(wildcardType.getLowerBounds()), type.hashCode())[ FD ]
Line_10 $$ if (type instanceof WildcardType) -->Line_13 $$ if (type instanceof TypeVariable) [ CD ]
Line_2 $$ private static TypeWrapper wrap(Type type) -->Line_3 $$ if (type == null) [ FD ]
Line_5 $$ if (type instanceof Class) -->Line_6 $$ return new ClassTypeWrapper((Class<?>) type)[ CD ]
Line_7 $$ if (type instanceof ParameterizedType) -->Line_10 $$ if (type instanceof WildcardType) [ CD ]
Line_13 $$ if (type instanceof TypeVariable) -->Line_14 $$ TypeVariable<?> typeVariable = (TypeVariable<?>) type[ CD ]
Line_2 $$ private static TypeWrapper wrap(Type type) -->Line_13 $$ if (type instanceof TypeVariable) [ FD ]
Line_5 $$ if (type instanceof Class) -->Line_7 $$ if (type instanceof ParameterizedType) [ CD ]
Line_16 $$ if (type instanceof GenericArrayType) -->Line_17 $$ GenericArrayType genericArrayType = (GenericArrayType) type[ CD ]
Line_16 $$ if (type instanceof GenericArrayType) -->Line_18 $$ return new GenericArrayTypeWrapper(wrap(genericArrayType.getGenericComponentType()), type.hashCode())[ CD ]
Line_14 $$ TypeVariable<?> typeVariable = (TypeVariable<?>) type-->Line_15 $$ return new TypeVariableTypeWrapper<GenericDeclaration>(typeVariable.getName(), toWrappers(typeVariable.getBounds()), type.hashCode())[ FD ]
Line_2 $$ private static TypeWrapper wrap(Type type) -->Line_3 $$ if (type == null) [ CD ]
Line_10 $$ if (type instanceof WildcardType) -->Line_11 $$ WildcardType wildcardType = (WildcardType) type[ CD ]
Line_2 $$ private static TypeWrapper wrap(Type type) -->Line_9 $$ return new ParameterizedTypeWrapper(toWrappers(parameterizedType.getActualTypeArguments()), (ClassTypeWrapper) wrap(parameterizedType.getRawType()), wrap(parameterizedType.getOwnerType()), type.hashCode())[ FD ]
Line_2 $$ private static TypeWrapper wrap(Type type) -->Line_18 $$ return new GenericArrayTypeWrapper(wrap(genericArrayType.getGenericComponentType()), type.hashCode())[ FD ]
Line_10 $$ if (type instanceof WildcardType) -->Line_12 $$ return new WildcardTypeWrapper(toWrappers(wildcardType.getUpperBounds()), toWrappers(wildcardType.getLowerBounds()), type.hashCode())[ CD ]
Line_2 $$ private static TypeWrapper wrap(Type type) -->Line_15 $$ return new TypeVariableTypeWrapper<GenericDeclaration>(typeVariable.getName(), toWrappers(typeVariable.getBounds()), type.hashCode())[ FD ]
Line_2 $$ private static TypeWrapper wrap(Type type) -->Line_5 $$ if (type instanceof Class) [ FD ]
Line_7 $$ if (type instanceof ParameterizedType) -->Line_9 $$ return new ParameterizedTypeWrapper(toWrappers(parameterizedType.getActualTypeArguments()), (ClassTypeWrapper) wrap(parameterizedType.getRawType()), wrap(parameterizedType.getOwnerType()), type.hashCode())[ CD ]
