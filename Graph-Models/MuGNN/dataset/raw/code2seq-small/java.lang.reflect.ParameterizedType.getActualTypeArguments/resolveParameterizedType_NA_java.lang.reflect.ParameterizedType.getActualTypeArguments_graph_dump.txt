Line_8 $$ return new ParameterizedType() -->Line_10 $$ return resolvedTypeArguments[ CD ]
Line_2 $$ private static ParameterizedType resolveParameterizedType(final ParameterizedType parameterizedType, Type context) -->Line_16 $$ return parameterizedType.getOwnerType()[ FD ]
Line_2 $$ private static ParameterizedType resolveParameterizedType(final ParameterizedType parameterizedType, Type context) -->Line_4 $$ final Type[] resolvedTypeArguments = new Type[actualTypeArguments.length][ CD ]
Line_2 $$ private static ParameterizedType resolveParameterizedType(final ParameterizedType parameterizedType, Type context) -->Line_8 $$ return new ParameterizedType() [ CD ]
Line_2 $$ private static ParameterizedType resolveParameterizedType(final ParameterizedType parameterizedType, Type context) -->Line_3 $$ Type[] actualTypeArguments = parameterizedType.getActualTypeArguments()[ FD ]
Line_2 $$ private static ParameterizedType resolveParameterizedType(final ParameterizedType parameterizedType, Type context) -->Line_6 $$ resolvedTypeArguments[idx] = resolveType(actualTypeArguments[idx], context)[ FD ]
Line_5 $$ for (int idx = 0; idx < actualTypeArguments.length; idx++) -->Line_6 $$ resolvedTypeArguments[idx] = resolveType(actualTypeArguments[idx], context)[ CD ]
Line_8 $$ return new ParameterizedType() -->Line_13 $$ return parameterizedType.getRawType()[ CD ]
Line_2 $$ private static ParameterizedType resolveParameterizedType(final ParameterizedType parameterizedType, Type context) -->Line_13 $$ return parameterizedType.getRawType()[ FD ]
Line_2 $$ private static ParameterizedType resolveParameterizedType(final ParameterizedType parameterizedType, Type context) -->Line_3 $$ Type[] actualTypeArguments = parameterizedType.getActualTypeArguments()[ CD ]
Line_8 $$ return new ParameterizedType() -->Line_16 $$ return parameterizedType.getOwnerType()[ CD ]
Line_2 $$ private static ParameterizedType resolveParameterizedType(final ParameterizedType parameterizedType, Type context) -->Line_5 $$ for (int idx = 0; idx < actualTypeArguments.length; idx++) [ CD ]
