Line_2 $$ private Object createCollection(Class<?> aClass, ParameterizedType genericType, FList<Type> processedTypes, List<Type> elementTypes) throws Exception -->Line_14 $$ final Object item = createValue(type, processedTypes)[ FD ]
Line_13 $$ Type type = elementTypes.isEmpty() ? elementClass : elementTypes.get(i % elementTypes.size())-->Line_14 $$ final Object item = createValue(type, processedTypes)[ FD ]
Line_6 $$ if (Set.class.isAssignableFrom(aClass)) -->Line_7 $$ o = new HashSet<Object>()[ CD ]
Line_2 $$ private Object createCollection(Class<?> aClass, ParameterizedType genericType, FList<Type> processedTypes, List<Type> elementTypes) throws Exception -->Line_4 $$ if (List.class.isAssignableFrom(aClass)) [ CD ]
Line_3 $$ Collection<Object> o-->Line_7 $$ o = new HashSet<Object>()[ FD ]
Line_5 $$ o = new ArrayList<Object>()-->Line_16 $$ o.add(item)[ FD ]
Line_12 $$ for (int i = 0; i < Math.max(elementTypes.size(), 2); i++) -->Line_15 $$ if (item != null) [ CD ]
Line_12 $$ for (int i = 0; i < Math.max(elementTypes.size(), 2); i++) -->Line_13 $$ Type type = elementTypes.isEmpty() ? elementClass : elementTypes.get(i % elementTypes.size())[ CD ]
Line_2 $$ private Object createCollection(Class<?> aClass, ParameterizedType genericType, FList<Type> processedTypes, List<Type> elementTypes) throws Exception -->Line_11 $$ final Type elementClass = genericType.getActualTypeArguments()[0][ CD ]
Line_12 $$ for (int i = 0; i < Math.max(elementTypes.size(), 2); i++) -->Line_14 $$ final Object item = createValue(type, processedTypes)[ CD ]
Line_7 $$ o = new HashSet<Object>()-->Line_16 $$ o.add(item)[ FD ]
Line_14 $$ final Object item = createValue(type, processedTypes)-->Line_16 $$ o.add(item)[ FD ]
Line_4 $$ if (List.class.isAssignableFrom(aClass)) -->Line_6 $$ if (Set.class.isAssignableFrom(aClass)) [ CD ]
Line_2 $$ private Object createCollection(Class<?> aClass, ParameterizedType genericType, FList<Type> processedTypes, List<Type> elementTypes) throws Exception -->Line_12 $$ for (int i = 0; i < Math.max(elementTypes.size(), 2); i++) [ CD ]
Line_5 $$ o = new ArrayList<Object>()-->Line_7 $$ o = new HashSet<Object>()[ FD ]
Line_2 $$ private Object createCollection(Class<?> aClass, ParameterizedType genericType, FList<Type> processedTypes, List<Type> elementTypes) throws Exception -->Line_13 $$ Type type = elementTypes.isEmpty() ? elementClass : elementTypes.get(i % elementTypes.size())[ FD ]
Line_2 $$ private Object createCollection(Class<?> aClass, ParameterizedType genericType, FList<Type> processedTypes, List<Type> elementTypes) throws Exception -->Line_12 $$ for (int i = 0; i < Math.max(elementTypes.size(), 2); i++) [ FD ]
Line_14 $$ final Object item = createValue(type, processedTypes)-->Line_15 $$ if (item != null) [ FD ]
Line_2 $$ private Object createCollection(Class<?> aClass, ParameterizedType genericType, FList<Type> processedTypes, List<Type> elementTypes) throws Exception -->Line_3 $$ Collection<Object> o[ CD ]
Line_2 $$ private Object createCollection(Class<?> aClass, ParameterizedType genericType, FList<Type> processedTypes, List<Type> elementTypes) throws Exception -->Line_6 $$ if (Set.class.isAssignableFrom(aClass)) [ FD ]
Line_6 $$ if (Set.class.isAssignableFrom(aClass)) -->Line_9 $$ return null[ CD ]
Line_2 $$ private Object createCollection(Class<?> aClass, ParameterizedType genericType, FList<Type> processedTypes, List<Type> elementTypes) throws Exception -->Line_19 $$ return o[ CD ]
Line_2 $$ private Object createCollection(Class<?> aClass, ParameterizedType genericType, FList<Type> processedTypes, List<Type> elementTypes) throws Exception -->Line_4 $$ if (List.class.isAssignableFrom(aClass)) [ FD ]
Line_4 $$ if (List.class.isAssignableFrom(aClass)) -->Line_5 $$ o = new ArrayList<Object>()[ CD ]
Line_3 $$ Collection<Object> o-->Line_16 $$ o.add(item)[ FD ]
Line_3 $$ Collection<Object> o-->Line_5 $$ o = new ArrayList<Object>()[ FD ]
Line_15 $$ if (item != null) -->Line_16 $$ o.add(item)[ CD ]
Line_2 $$ private Object createCollection(Class<?> aClass, ParameterizedType genericType, FList<Type> processedTypes, List<Type> elementTypes) throws Exception -->Line_11 $$ final Type elementClass = genericType.getActualTypeArguments()[0][ FD ]
