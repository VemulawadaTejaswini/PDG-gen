Line_2 $$ public void wildcardType() throws Exception -->Line_5 $$ assertThat(type.toString(), equalTo("? extends java.lang.CharSequence"))[ CD ]
Line_2 $$ public void wildcardType() throws Exception -->Line_3 $$ ParameterizedType typeSource = (ParameterizedType) SerializableTypeWrapper.forField(Fields.class.getField("wildcardType"))[ CD ]
Line_2 $$ public void wildcardType() throws Exception -->Line_6 $$ assertSerialzable(type)[ CD ]
Line_4 $$ WildcardType type = (WildcardType) typeSource.getActualTypeArguments()[0]-->Line_8 $$ assertSerialzable(type.getUpperBounds())[ FD ]
Line_2 $$ public void wildcardType() throws Exception -->Line_4 $$ WildcardType type = (WildcardType) typeSource.getActualTypeArguments()[0][ CD ]
Line_3 $$ ParameterizedType typeSource = (ParameterizedType) SerializableTypeWrapper.forField(Fields.class.getField("wildcardType"))-->Line_4 $$ WildcardType type = (WildcardType) typeSource.getActualTypeArguments()[0][ FD ]
Line_2 $$ public void wildcardType() throws Exception -->Line_7 $$ assertSerialzable(type.getLowerBounds())[ CD ]
Line_4 $$ WildcardType type = (WildcardType) typeSource.getActualTypeArguments()[0]-->Line_6 $$ assertSerialzable(type)[ FD ]
Line_2 $$ public void wildcardType() throws Exception -->Line_8 $$ assertSerialzable(type.getUpperBounds())[ CD ]
Line_4 $$ WildcardType type = (WildcardType) typeSource.getActualTypeArguments()[0]-->Line_5 $$ assertThat(type.toString(), equalTo("? extends java.lang.CharSequence"))[ FD ]
Line_4 $$ WildcardType type = (WildcardType) typeSource.getActualTypeArguments()[0]-->Line_7 $$ assertSerialzable(type.getLowerBounds())[ FD ]
