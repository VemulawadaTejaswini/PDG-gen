Line_23 $$ if (clazz.isArray()) -->Line_25 $$ if (compClass != null) [ CD ]
Line_2 $$ private static Object genTypeValue(Type type) -->Line_3 $$ Object ret = typeValueCache.get(type)[ CD ]
Line_40 $$ Type rawType = pt.getRawType()-->Line_48 $$ if (rawType.equals(List.class)) [ FD ]
Line_25 $$ if (compClass != null) -->Line_28 $$ Array.set(ret, 1, genTypeValue(compClass))[ CD ]
Line_49 $$ ret = Lists.newArrayList(genTypeValue(params[0]))-->Line_55 $$ ret = map[ FD ]
Line_3 $$ Object ret = typeValueCache.get(type)-->Line_32 $$ ret = values[rand.nextInt(values.length)][ FD ]
Line_38 $$ if (type instanceof ParameterizedType) -->Line_48 $$ if (rawType.equals(List.class)) [ CD ]
Line_21 $$ if (type instanceof Class) -->Line_22 $$ Class clazz = (Class) type[ CD ]
Line_34 $$ ByteBuffer buff = ByteBuffer.allocate(4)-->Line_35 $$ rand.nextBytes(buff.array())[ FD ]
Line_2 $$ private static Object genTypeValue(Type type) -->Line_15 $$ if (type.equals(float.class)) [ FD ]
Line_3 $$ Object ret = typeValueCache.get(type)-->Line_49 $$ ret = Lists.newArrayList(genTypeValue(params[0]))[ FD ]
Line_24 $$ Class compClass = clazz.getComponentType()-->Line_26 $$ ret = Array.newInstance(compClass, 2)[ FD ]
Line_42 $$ if (rawType.equals(EnumSet.class)) -->Line_43 $$ if (params[0] instanceof Class) [ CD ]
Line_32 $$ ret = values[rand.nextInt(values.length)]-->Line_55 $$ ret = map[ FD ]
Line_22 $$ Class clazz = (Class) type-->Line_23 $$ if (clazz.isArray()) [ FD ]
Line_43 $$ if (params[0] instanceof Class) -->Line_45 $$ return EnumSet.allOf(c)[ CD ]
Line_48 $$ if (rawType.equals(List.class)) -->Line_49 $$ ret = Lists.newArrayList(genTypeValue(params[0]))[ CD ]
Line_48 $$ if (rawType.equals(List.class)) -->Line_50 $$ if (rawType.equals(Set.class)) [ CD ]
Line_17 $$ if (type.equals(double.class)) -->Line_19 $$ if (type.equals(String.class)) [ CD ]
Line_2 $$ private static Object genTypeValue(Type type) -->Line_21 $$ if (type instanceof Class) [ FD ]
Line_22 $$ Class clazz = (Class) type-->Line_24 $$ Class compClass = clazz.getComponentType()[ FD ]
Line_9 $$ if (type.equals(byte.class)) -->Line_10 $$ return bytes[rand.nextInt(4)][ CD ]
Line_19 $$ if (type.equals(String.class)) -->Line_21 $$ if (type instanceof Class) [ CD ]
Line_55 $$ ret = map-->Line_58 $$ if (ret == null) [ FD ]
Line_26 $$ ret = Array.newInstance(compClass, 2)-->Line_61 $$ typeValueCache.put(type, ret)[ FD ]
Line_49 $$ ret = Lists.newArrayList(genTypeValue(params[0]))-->Line_61 $$ typeValueCache.put(type, ret)[ FD ]
Line_2 $$ private static Object genTypeValue(Type type) -->Line_13 $$ if (type.equals(long.class)) [ FD ]
Line_26 $$ ret = Array.newInstance(compClass, 2)-->Line_32 $$ ret = values[rand.nextInt(values.length)][ FD ]
Line_52 $$ if (rawType.equals(Map.class)) -->Line_55 $$ ret = map[ CD ]
Line_2 $$ private static Object genTypeValue(Type type) -->Line_3 $$ Object ret = typeValueCache.get(type)[ FD ]
Line_2 $$ private static Object genTypeValue(Type type) -->Line_7 $$ if (type.equals(boolean.class)) [ CD ]
Line_13 $$ if (type.equals(long.class)) -->Line_15 $$ if (type.equals(float.class)) [ CD ]
Line_32 $$ ret = values[rand.nextInt(values.length)]-->Line_58 $$ if (ret == null) [ FD ]
Line_25 $$ if (compClass != null) -->Line_26 $$ ret = Array.newInstance(compClass, 2)[ CD ]
Line_24 $$ Class compClass = clazz.getComponentType()-->Line_27 $$ Array.set(ret, 0, genTypeValue(compClass))[ FD ]
Line_44 $$ Class c = (Class) (params[0])-->Line_45 $$ return EnumSet.allOf(c)[ FD ]
Line_38 $$ if (type instanceof ParameterizedType) -->Line_40 $$ Type rawType = pt.getRawType()[ CD ]
Line_24 $$ Class compClass = clazz.getComponentType()-->Line_28 $$ Array.set(ret, 1, genTypeValue(compClass))[ FD ]
Line_43 $$ if (params[0] instanceof Class) -->Line_44 $$ Class c = (Class) (params[0])[ CD ]
Line_13 $$ if (type.equals(long.class)) -->Line_14 $$ return Long.valueOf(rand.nextInt(1000000))[ CD ]
Line_25 $$ if (compClass != null) -->Line_27 $$ Array.set(ret, 0, genTypeValue(compClass))[ CD ]
Line_40 $$ Type rawType = pt.getRawType()-->Line_52 $$ if (rawType.equals(Map.class)) [ FD ]
Line_15 $$ if (type.equals(float.class)) -->Line_17 $$ if (type.equals(double.class)) [ CD ]
Line_50 $$ if (rawType.equals(Set.class)) -->Line_52 $$ if (rawType.equals(Map.class)) [ CD ]
Line_24 $$ Class compClass = clazz.getComponentType()-->Line_25 $$ if (compClass != null) [ FD ]
Line_2 $$ private static Object genTypeValue(Type type) -->Line_9 $$ if (type.equals(byte.class)) [ FD ]
Line_3 $$ Object ret = typeValueCache.get(type)-->Line_26 $$ ret = Array.newInstance(compClass, 2)[ FD ]
Line_19 $$ if (type.equals(String.class)) -->Line_20 $$ return String.format("%c%c%c", 'a' + rand.nextInt(26), 'a' + rand.nextInt(26), 'a' + rand.nextInt(26))[ CD ]
Line_26 $$ ret = Array.newInstance(compClass, 2)-->Line_49 $$ ret = Lists.newArrayList(genTypeValue(params[0]))[ FD ]
Line_2 $$ private static Object genTypeValue(Type type) -->Line_4 $$ if (ret != null) [ CD ]
Line_38 $$ if (type instanceof ParameterizedType) -->Line_42 $$ if (rawType.equals(EnumSet.class)) [ CD ]
Line_3 $$ Object ret = typeValueCache.get(type)-->Line_4 $$ if (ret != null) [ FD ]
Line_11 $$ if (type.equals(int.class)) -->Line_13 $$ if (type.equals(long.class)) [ CD ]
Line_7 $$ if (type.equals(boolean.class)) -->Line_8 $$ return rand.nextBoolean()[ CD ]
Line_2 $$ private static Object genTypeValue(Type type) -->Line_19 $$ if (type.equals(String.class)) [ FD ]
Line_51 $$ ret = Sets.newHashSet(genTypeValue(params[0]))-->Line_61 $$ typeValueCache.put(type, ret)[ FD ]
Line_32 $$ ret = values[rand.nextInt(values.length)]-->Line_49 $$ ret = Lists.newArrayList(genTypeValue(params[0]))[ FD ]
Line_50 $$ if (rawType.equals(Set.class)) -->Line_51 $$ ret = Sets.newHashSet(genTypeValue(params[0]))[ CD ]
Line_17 $$ if (type.equals(double.class)) -->Line_18 $$ return rand.nextDouble()[ CD ]
Line_23 $$ if (clazz.isArray()) -->Line_30 $$ if (clazz.isEnum()) [ CD ]
Line_32 $$ ret = values[rand.nextInt(values.length)]-->Line_51 $$ ret = Sets.newHashSet(genTypeValue(params[0]))[ FD ]
Line_2 $$ private static Object genTypeValue(Type type) -->Line_7 $$ if (type.equals(boolean.class)) [ FD ]
Line_30 $$ if (clazz.isEnum()) -->Line_33 $$ if (clazz.equals(ByteBuffer.class)) [ CD ]
Line_7 $$ if (type.equals(boolean.class)) -->Line_9 $$ if (type.equals(byte.class)) [ CD ]
Line_26 $$ ret = Array.newInstance(compClass, 2)-->Line_58 $$ if (ret == null) [ FD ]
Line_3 $$ Object ret = typeValueCache.get(type)-->Line_58 $$ if (ret == null) [ FD ]
Line_49 $$ ret = Lists.newArrayList(genTypeValue(params[0]))-->Line_58 $$ if (ret == null) [ FD ]
Line_3 $$ Object ret = typeValueCache.get(type)-->Line_27 $$ Array.set(ret, 0, genTypeValue(compClass))[ FD ]
Line_2 $$ private static Object genTypeValue(Type type) -->Line_58 $$ if (ret == null) [ CD ]
Line_11 $$ if (type.equals(int.class)) -->Line_12 $$ return rand.nextInt(1000000)[ CD ]
Line_55 $$ ret = map-->Line_61 $$ typeValueCache.put(type, ret)[ FD ]
Line_15 $$ if (type.equals(float.class)) -->Line_16 $$ return rand.nextFloat()[ CD ]
Line_21 $$ if (type instanceof Class) -->Line_38 $$ if (type instanceof ParameterizedType) [ CD ]
Line_26 $$ ret = Array.newInstance(compClass, 2)-->Line_51 $$ ret = Sets.newHashSet(genTypeValue(params[0]))[ FD ]
Line_4 $$ if (ret != null) -->Line_5 $$ return ret[ CD ]
Line_30 $$ if (clazz.isEnum()) -->Line_32 $$ ret = values[rand.nextInt(values.length)][ CD ]
Line_22 $$ Class clazz = (Class) type-->Line_33 $$ if (clazz.equals(ByteBuffer.class)) [ FD ]
Line_39 $$ ParameterizedType pt = (ParameterizedType) type-->Line_41 $$ Type[] params = pt.getActualTypeArguments()[ FD ]
Line_3 $$ Object ret = typeValueCache.get(type)-->Line_51 $$ ret = Sets.newHashSet(genTypeValue(params[0]))[ FD ]
Line_40 $$ Type rawType = pt.getRawType()-->Line_42 $$ if (rawType.equals(EnumSet.class)) [ FD ]
Line_40 $$ Type rawType = pt.getRawType()-->Line_50 $$ if (rawType.equals(Set.class)) [ FD ]
Line_39 $$ ParameterizedType pt = (ParameterizedType) type-->Line_40 $$ Type rawType = pt.getRawType()[ FD ]
Line_53 $$ Map<Object, Object> map = Maps.newHashMap()-->Line_55 $$ ret = map[ FD ]
Line_26 $$ ret = Array.newInstance(compClass, 2)-->Line_28 $$ Array.set(ret, 1, genTypeValue(compClass))[ FD ]
Line_53 $$ Map<Object, Object> map = Maps.newHashMap()-->Line_54 $$ map.put(genTypeValue(params[0]), genTypeValue(params[1]))[ FD ]
Line_2 $$ private static Object genTypeValue(Type type) -->Line_61 $$ typeValueCache.put(type, ret)[ FD ]
Line_3 $$ Object ret = typeValueCache.get(type)-->Line_55 $$ ret = map[ FD ]
Line_30 $$ if (clazz.isEnum()) -->Line_31 $$ Object[] values = clazz.getEnumConstants()[ CD ]
Line_33 $$ if (clazz.equals(ByteBuffer.class)) -->Line_35 $$ rand.nextBytes(buff.array())[ CD ]
Line_9 $$ if (type.equals(byte.class)) -->Line_11 $$ if (type.equals(int.class)) [ CD ]
Line_23 $$ if (clazz.isArray()) -->Line_24 $$ Class compClass = clazz.getComponentType()[ CD ]
Line_22 $$ Class clazz = (Class) type-->Line_30 $$ if (clazz.isEnum()) [ FD ]
Line_52 $$ if (rawType.equals(Map.class)) -->Line_54 $$ map.put(genTypeValue(params[0]), genTypeValue(params[1]))[ CD ]
Line_51 $$ ret = Sets.newHashSet(genTypeValue(params[0]))-->Line_55 $$ ret = map[ FD ]
Line_33 $$ if (clazz.equals(ByteBuffer.class)) -->Line_36 $$ return buff[ CD ]
Line_38 $$ if (type instanceof ParameterizedType) -->Line_39 $$ ParameterizedType pt = (ParameterizedType) type[ CD ]
Line_49 $$ ret = Lists.newArrayList(genTypeValue(params[0]))-->Line_51 $$ ret = Sets.newHashSet(genTypeValue(params[0]))[ FD ]
Line_2 $$ private static Object genTypeValue(Type type) -->Line_38 $$ if (type instanceof ParameterizedType) [ FD ]
Line_33 $$ if (clazz.equals(ByteBuffer.class)) -->Line_34 $$ ByteBuffer buff = ByteBuffer.allocate(4)[ CD ]
Line_22 $$ Class clazz = (Class) type-->Line_31 $$ Object[] values = clazz.getEnumConstants()[ FD ]
Line_3 $$ Object ret = typeValueCache.get(type)-->Line_28 $$ Array.set(ret, 1, genTypeValue(compClass))[ FD ]
Line_2 $$ private static Object genTypeValue(Type type) -->Line_11 $$ if (type.equals(int.class)) [ FD ]
Line_21 $$ if (type instanceof Class) -->Line_23 $$ if (clazz.isArray()) [ CD ]
Line_38 $$ if (type instanceof ParameterizedType) -->Line_41 $$ Type[] params = pt.getActualTypeArguments()[ CD ]
Line_32 $$ ret = values[rand.nextInt(values.length)]-->Line_61 $$ typeValueCache.put(type, ret)[ FD ]
Line_2 $$ private static Object genTypeValue(Type type) -->Line_17 $$ if (type.equals(double.class)) [ FD ]
Line_52 $$ if (rawType.equals(Map.class)) -->Line_53 $$ Map<Object, Object> map = Maps.newHashMap()[ CD ]
Line_26 $$ ret = Array.newInstance(compClass, 2)-->Line_55 $$ ret = map[ FD ]
Line_26 $$ ret = Array.newInstance(compClass, 2)-->Line_27 $$ Array.set(ret, 0, genTypeValue(compClass))[ FD ]
Line_2 $$ private static Object genTypeValue(Type type) -->Line_62 $$ return ret[ CD ]
Line_3 $$ Object ret = typeValueCache.get(type)-->Line_61 $$ typeValueCache.put(type, ret)[ FD ]
Line_51 $$ ret = Sets.newHashSet(genTypeValue(params[0]))-->Line_58 $$ if (ret == null) [ FD ]
Line_2 $$ private static Object genTypeValue(Type type) -->Line_61 $$ typeValueCache.put(type, ret)[ CD ]
