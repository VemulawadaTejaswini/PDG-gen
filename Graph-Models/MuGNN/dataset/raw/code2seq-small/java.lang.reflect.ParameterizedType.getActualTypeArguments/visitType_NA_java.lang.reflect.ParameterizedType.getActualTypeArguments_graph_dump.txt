Line_24 $$ if (type instanceof WildcardType) -->Line_26 $$ if (wildcardType.getUpperBounds().length == 1 && wildcardType.getUpperBounds()[0].equals(Object.class)) [ CD ]
Line_2 $$ private static void visitType(java.lang.reflect.Type type, StringBuilder builder) -->Line_46 $$ if (type instanceof GenericArrayType) [ FD ]
Line_8 $$ if (cl.isArray()) -->Line_11 $$ builder.append('L')[ CD ]
Line_2 $$ private static void visitType(java.lang.reflect.Type type, StringBuilder builder) -->Line_41 $$ if (type instanceof TypeVariable) [ FD ]
Line_2 $$ private static void visitType(java.lang.reflect.Type type, StringBuilder builder) -->Line_21 $$ visitType(param, builder)[ FD ]
Line_2 $$ private static void visitType(java.lang.reflect.Type type, StringBuilder builder) -->Line_11 $$ builder.append('L')[ FD ]
Line_42 $$ TypeVariable<?> typeVar = (TypeVariable) type-->Line_44 $$ builder.append(typeVar.getName())[ FD ]
Line_2 $$ private static void visitType(java.lang.reflect.Type type, StringBuilder builder) -->Line_33 $$ builder.append('+')[ FD ]
Line_2 $$ private static void visitType(java.lang.reflect.Type type, StringBuilder builder) -->Line_45 $$ builder.append(';')[ FD ]
Line_27 $$ if (wildcardType.getLowerBounds().length == 0) -->Line_29 $$ return[ CD ]
Line_4 $$ Class<?> cl = (Class<?>) type-->Line_12 $$ builder.append(cl.getName().replace('.', '/'))[ FD ]
Line_2 $$ private static void visitType(java.lang.reflect.Type type, StringBuilder builder) -->Line_19 $$ builder.append('<')[ FD ]
Line_4 $$ Class<?> cl = (Class<?>) type-->Line_6 $$ builder.append(Type.getType(cl).getDescriptor())[ FD ]
Line_3 $$ if (type instanceof Class) -->Line_5 $$ if (cl.isPrimitive()) [ CD ]
Line_2 $$ private static void visitType(java.lang.reflect.Type type, StringBuilder builder) -->Line_24 $$ if (type instanceof WildcardType) [ FD ]
Line_37 $$ for (java.lang.reflect.Type lowerType : wildcardType.getLowerBounds()) -->Line_39 $$ visitType(lowerType, builder)[ FD ]
Line_8 $$ if (cl.isArray()) -->Line_13 $$ builder.append(';')[ CD ]
Line_3 $$ if (type instanceof Class) -->Line_4 $$ Class<?> cl = (Class<?>) type[ CD ]
Line_4 $$ Class<?> cl = (Class<?>) type-->Line_5 $$ if (cl.isPrimitive()) [ FD ]
Line_4 $$ Class<?> cl = (Class<?>) type-->Line_8 $$ if (cl.isArray()) [ FD ]
Line_17 $$ ParameterizedType parameterizedType = (ParameterizedType) type-->Line_18 $$ visitNested(parameterizedType.getRawType(), builder)[ FD ]
Line_32 $$ for (java.lang.reflect.Type upperType : wildcardType.getUpperBounds()) -->Line_34 $$ visitType(upperType, builder)[ FD ]
Line_2 $$ private static void visitType(java.lang.reflect.Type type, StringBuilder builder) -->Line_39 $$ visitType(lowerType, builder)[ FD ]
Line_2 $$ private static void visitType(java.lang.reflect.Type type, StringBuilder builder) -->Line_12 $$ builder.append(cl.getName().replace('.', '/'))[ FD ]
Line_41 $$ if (type instanceof TypeVariable) -->Line_44 $$ builder.append(typeVar.getName())[ CD ]
Line_5 $$ if (cl.isPrimitive()) -->Line_8 $$ if (cl.isArray()) [ CD ]
Line_25 $$ WildcardType wildcardType = (WildcardType) type-->Line_26 $$ if (wildcardType.getUpperBounds().length == 1 && wildcardType.getUpperBounds()[0].equals(Object.class)) [ FD ]
Line_41 $$ if (type instanceof TypeVariable) -->Line_45 $$ builder.append(';')[ CD ]
Line_2 $$ private static void visitType(java.lang.reflect.Type type, StringBuilder builder) -->Line_48 $$ builder.append('[')[ FD ]
Line_2 $$ private static void visitType(java.lang.reflect.Type type, StringBuilder builder) -->Line_6 $$ builder.append(Type.getType(cl).getDescriptor())[ FD ]
Line_8 $$ if (cl.isArray()) -->Line_9 $$ builder.append(cl.getName().replace('.', '/'))[ CD ]
Line_2 $$ private static void visitType(java.lang.reflect.Type type, StringBuilder builder) -->Line_13 $$ builder.append(';')[ FD ]
Line_24 $$ if (type instanceof WildcardType) -->Line_41 $$ if (type instanceof TypeVariable) [ CD ]
Line_16 $$ if (type instanceof ParameterizedType) -->Line_17 $$ ParameterizedType parameterizedType = (ParameterizedType) type[ CD ]
Line_16 $$ if (type instanceof ParameterizedType) -->Line_23 $$ builder.append(">;")[ CD ]
Line_2 $$ private static void visitType(java.lang.reflect.Type type, StringBuilder builder) -->Line_23 $$ builder.append(">;")[ FD ]
Line_41 $$ if (type instanceof TypeVariable) -->Line_42 $$ TypeVariable<?> typeVar = (TypeVariable) type[ CD ]
Line_2 $$ private static void visitType(java.lang.reflect.Type type, StringBuilder builder) -->Line_43 $$ builder.append('T')[ FD ]
Line_2 $$ private static void visitType(java.lang.reflect.Type type, StringBuilder builder) -->Line_3 $$ if (type instanceof Class) [ CD ]
Line_5 $$ if (cl.isPrimitive()) -->Line_6 $$ builder.append(Type.getType(cl).getDescriptor())[ CD ]
Line_16 $$ if (type instanceof ParameterizedType) -->Line_19 $$ builder.append('<')[ CD ]
Line_16 $$ if (type instanceof ParameterizedType) -->Line_24 $$ if (type instanceof WildcardType) [ CD ]
Line_25 $$ WildcardType wildcardType = (WildcardType) type-->Line_32 $$ for (java.lang.reflect.Type upperType : wildcardType.getUpperBounds()) [ FD ]
Line_2 $$ private static void visitType(java.lang.reflect.Type type, StringBuilder builder) -->Line_18 $$ visitNested(parameterizedType.getRawType(), builder)[ FD ]
Line_17 $$ ParameterizedType parameterizedType = (ParameterizedType) type-->Line_20 $$ for (java.lang.reflect.Type param : parameterizedType.getActualTypeArguments()) [ FD ]
Line_26 $$ if (wildcardType.getUpperBounds().length == 1 && wildcardType.getUpperBounds()[0].equals(Object.class)) -->Line_27 $$ if (wildcardType.getLowerBounds().length == 0) [ CD ]
Line_25 $$ WildcardType wildcardType = (WildcardType) type-->Line_27 $$ if (wildcardType.getLowerBounds().length == 0) [ FD ]
Line_2 $$ private static void visitType(java.lang.reflect.Type type, StringBuilder builder) -->Line_34 $$ visitType(upperType, builder)[ FD ]
Line_41 $$ if (type instanceof TypeVariable) -->Line_43 $$ builder.append('T')[ CD ]
Line_24 $$ if (type instanceof WildcardType) -->Line_25 $$ WildcardType wildcardType = (WildcardType) type[ CD ]
Line_25 $$ WildcardType wildcardType = (WildcardType) type-->Line_37 $$ for (java.lang.reflect.Type lowerType : wildcardType.getLowerBounds()) [ FD ]
Line_46 $$ if (type instanceof GenericArrayType) -->Line_47 $$ GenericArrayType arrayType = (GenericArrayType) type[ CD ]
Line_2 $$ private static void visitType(java.lang.reflect.Type type, StringBuilder builder) -->Line_3 $$ if (type instanceof Class) [ FD ]
Line_8 $$ if (cl.isArray()) -->Line_12 $$ builder.append(cl.getName().replace('.', '/'))[ CD ]
Line_2 $$ private static void visitType(java.lang.reflect.Type type, StringBuilder builder) -->Line_28 $$ builder.append('*')[ FD ]
Line_2 $$ private static void visitType(java.lang.reflect.Type type, StringBuilder builder) -->Line_44 $$ builder.append(typeVar.getName())[ FD ]
Line_2 $$ private static void visitType(java.lang.reflect.Type type, StringBuilder builder) -->Line_51 $$ throw new IllegalArgumentException(String.format("Cannot generate signature for %s.", type))[ FD ]
Line_16 $$ if (type instanceof ParameterizedType) -->Line_18 $$ visitNested(parameterizedType.getRawType(), builder)[ CD ]
Line_2 $$ private static void visitType(java.lang.reflect.Type type, StringBuilder builder) -->Line_16 $$ if (type instanceof ParameterizedType) [ FD ]
Line_4 $$ Class<?> cl = (Class<?>) type-->Line_9 $$ builder.append(cl.getName().replace('.', '/'))[ FD ]
Line_47 $$ GenericArrayType arrayType = (GenericArrayType) type-->Line_49 $$ visitType(arrayType.getGenericComponentType(), builder)[ FD ]
Line_46 $$ if (type instanceof GenericArrayType) -->Line_49 $$ visitType(arrayType.getGenericComponentType(), builder)[ CD ]
Line_2 $$ private static void visitType(java.lang.reflect.Type type, StringBuilder builder) -->Line_49 $$ visitType(arrayType.getGenericComponentType(), builder)[ FD ]
Line_3 $$ if (type instanceof Class) -->Line_16 $$ if (type instanceof ParameterizedType) [ CD ]
Line_2 $$ private static void visitType(java.lang.reflect.Type type, StringBuilder builder) -->Line_9 $$ builder.append(cl.getName().replace('.', '/'))[ FD ]
Line_27 $$ if (wildcardType.getLowerBounds().length == 0) -->Line_28 $$ builder.append('*')[ CD ]
Line_41 $$ if (type instanceof TypeVariable) -->Line_46 $$ if (type instanceof GenericArrayType) [ CD ]
Line_46 $$ if (type instanceof GenericArrayType) -->Line_48 $$ builder.append('[')[ CD ]
Line_2 $$ private static void visitType(java.lang.reflect.Type type, StringBuilder builder) -->Line_38 $$ builder.append('-')[ FD ]
Line_20 $$ for (java.lang.reflect.Type param : parameterizedType.getActualTypeArguments()) -->Line_21 $$ visitType(param, builder)[ FD ]
