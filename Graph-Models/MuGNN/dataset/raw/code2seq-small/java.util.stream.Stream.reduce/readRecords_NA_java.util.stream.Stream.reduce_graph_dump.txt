Line_2 $$ boolean readRecords(Set<LogRecord> records) -->Line_5 $$ for (int i = 0; i < maxNumLines; i++) [ CD ]
Line_14 $$ firstLine = currentLine-->Line_17 $$ if (!isPrefixMatch(firstLine, currentLine)) [ FD ]
Line_14 $$ firstLine = currentLine-->Line_22 $$ if (!firstLine.equals(currentLine)) [ FD ]
Line_23 $$ if (i == currentLines.size() - 1) -->Line_28 $$ partial = true[ CD ]
Line_3 $$ Map<File, List<String>> linesByReplica = replicas().stream().map(LogReplica::<>file).collect(Collectors.toMap(Function.<File>identity(), FileUtils::<>readLines))-->Line_8 $$ for (Map.Entry<File, List<String>> entry : linesByReplica.entrySet()) [ FD ]
Line_7 $$ boolean partial = false-->Line_28 $$ partial = true[ FD ]
Line_45 $$ if (record.isFinal() && i != (maxNumLines - 1)) -->Line_48 $$ return false[ CD ]
Line_5 $$ for (int i = 0; i < maxNumLines; i++) -->Line_37 $$ if (records.contains(record)) [ CD ]
Line_36 $$ LogRecord record = LogRecord.make(firstLine)-->Line_37 $$ if (records.contains(record)) [ FD ]
Line_23 $$ if (i == currentLines.size() - 1) -->Line_26 $$ if (currentLine.length() > firstLine.length())[ CD ]
Line_26 $$ if (currentLine.length() > firstLine.length())-->Line_27 $$ firstLine = currentLine[ CD ]
Line_5 $$ for (int i = 0; i < maxNumLines; i++) -->Line_36 $$ LogRecord record = LogRecord.make(firstLine)[ CD ]
Line_36 $$ LogRecord record = LogRecord.make(firstLine)-->Line_43 $$ record.setPartial()[ FD ]
Line_5 $$ for (int i = 0; i < maxNumLines; i++) -->Line_6 $$ String firstLine = null[ CD ]
Line_12 $$ String currentLine = currentLines.get(i)-->Line_14 $$ firstLine = currentLine[ FD ]
Line_5 $$ for (int i = 0; i < maxNumLines; i++) -->Line_45 $$ if (record.isFinal() && i != (maxNumLines - 1)) [ CD ]
Line_9 $$ List<String> currentLines = entry.getValue()-->Line_10 $$ if (i >= currentLines.size())[ FD ]
Line_2 $$ boolean readRecords(Set<LogRecord> records) -->Line_37 $$ if (records.contains(record)) [ FD ]
Line_3 $$ Map<File, List<String>> linesByReplica = replicas().stream().map(LogReplica::<>file).collect(Collectors.toMap(Function.<File>identity(), FileUtils::<>readLines))-->Line_4 $$ int maxNumLines = linesByReplica.values().stream().map(List::<>size).reduce(0, Integer::<>max)[ FD ]
Line_6 $$ String firstLine = null-->Line_22 $$ if (!firstLine.equals(currentLine)) [ FD ]
Line_5 $$ for (int i = 0; i < maxNumLines; i++) -->Line_12 $$ String currentLine = currentLines.get(i)[ FD ]
Line_27 $$ firstLine = currentLine-->Line_17 $$ if (!isPrefixMatch(firstLine, currentLine)) [ FD ]
Line_36 $$ LogRecord record = LogRecord.make(firstLine)-->Line_45 $$ if (record.isFinal() && i != (maxNumLines - 1)) [ FD ]
Line_42 $$ if (partial)-->Line_43 $$ record.setPartial()[ CD ]
Line_6 $$ String firstLine = null-->Line_13 $$ if (firstLine == null) [ FD ]
Line_2 $$ boolean readRecords(Set<LogRecord> records) -->Line_3 $$ Map<File, List<String>> linesByReplica = replicas().stream().map(LogReplica::<>file).collect(Collectors.toMap(Function.<File>identity(), FileUtils::<>readLines))[ CD ]
Line_2 $$ boolean readRecords(Set<LogRecord> records) -->Line_51 $$ return true[ CD ]
Line_14 $$ firstLine = currentLine-->Line_26 $$ if (currentLine.length() > firstLine.length())[ FD ]
Line_27 $$ firstLine = currentLine-->Line_13 $$ if (firstLine == null) [ FD ]
Line_5 $$ for (int i = 0; i < maxNumLines; i++) -->Line_7 $$ boolean partial = false[ CD ]
Line_22 $$ if (!firstLine.equals(currentLine)) -->Line_23 $$ if (i == currentLines.size() - 1) [ CD ]
Line_12 $$ String currentLine = currentLines.get(i)-->Line_27 $$ firstLine = currentLine[ FD ]
Line_13 $$ if (firstLine == null) -->Line_14 $$ firstLine = currentLine[ CD ]
Line_27 $$ firstLine = currentLine-->Line_26 $$ if (currentLine.length() > firstLine.length())[ FD ]
Line_12 $$ String currentLine = currentLines.get(i)-->Line_26 $$ if (currentLine.length() > firstLine.length())[ FD ]
Line_14 $$ firstLine = currentLine-->Line_36 $$ LogRecord record = LogRecord.make(firstLine)[ FD ]
Line_14 $$ firstLine = currentLine-->Line_27 $$ firstLine = currentLine[ FD ]
Line_27 $$ firstLine = currentLine-->Line_22 $$ if (!firstLine.equals(currentLine)) [ FD ]
Line_5 $$ for (int i = 0; i < maxNumLines; i++) -->Line_10 $$ if (i >= currentLines.size())[ FD ]
Line_9 $$ List<String> currentLines = entry.getValue()-->Line_23 $$ if (i == currentLines.size() - 1) [ FD ]
Line_6 $$ String firstLine = null-->Line_26 $$ if (currentLine.length() > firstLine.length())[ FD ]
Line_6 $$ String firstLine = null-->Line_36 $$ LogRecord record = LogRecord.make(firstLine)[ FD ]
Line_6 $$ String firstLine = null-->Line_14 $$ firstLine = currentLine[ FD ]
Line_4 $$ int maxNumLines = linesByReplica.values().stream().map(List::<>size).reduce(0, Integer::<>max)-->Line_5 $$ for (int i = 0; i < maxNumLines; i++) [ FD ]
Line_5 $$ for (int i = 0; i < maxNumLines; i++) -->Line_44 $$ records.add(record)[ CD ]
Line_8 $$ for (Map.Entry<File, List<String>> entry : linesByReplica.entrySet()) -->Line_9 $$ List<String> currentLines = entry.getValue()[ FD ]
Line_5 $$ for (int i = 0; i < maxNumLines; i++) -->Line_42 $$ if (partial)[ CD ]
Line_9 $$ List<String> currentLines = entry.getValue()-->Line_12 $$ String currentLine = currentLines.get(i)[ FD ]
Line_12 $$ String currentLine = currentLines.get(i)-->Line_17 $$ if (!isPrefixMatch(firstLine, currentLine)) [ FD ]
Line_5 $$ for (int i = 0; i < maxNumLines; i++) -->Line_23 $$ if (i == currentLines.size() - 1) [ FD ]
Line_27 $$ firstLine = currentLine-->Line_36 $$ LogRecord record = LogRecord.make(firstLine)[ FD ]
Line_14 $$ firstLine = currentLine-->Line_13 $$ if (firstLine == null) [ FD ]
Line_37 $$ if (records.contains(record)) -->Line_40 $$ return false[ CD ]
Line_2 $$ boolean readRecords(Set<LogRecord> records) -->Line_4 $$ int maxNumLines = linesByReplica.values().stream().map(List::<>size).reduce(0, Integer::<>max)[ CD ]
Line_23 $$ if (i == currentLines.size() - 1) -->Line_32 $$ return false[ CD ]
Line_6 $$ String firstLine = null-->Line_17 $$ if (!isPrefixMatch(firstLine, currentLine)) [ FD ]
Line_6 $$ String firstLine = null-->Line_27 $$ firstLine = currentLine[ FD ]
Line_12 $$ String currentLine = currentLines.get(i)-->Line_22 $$ if (!firstLine.equals(currentLine)) [ FD ]
Line_2 $$ boolean readRecords(Set<LogRecord> records) -->Line_44 $$ records.add(record)[ FD ]
Line_36 $$ LogRecord record = LogRecord.make(firstLine)-->Line_44 $$ records.add(record)[ FD ]
Line_17 $$ if (!isPrefixMatch(firstLine, currentLine)) -->Line_20 $$ return false[ CD ]
