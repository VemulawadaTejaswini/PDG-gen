Line_5 $$ ProviderInfo pList = providerList-->Line_7 $$ pList = pList.next[ FD ]
Line_5 $$ ProviderInfo pList = providerList-->Line_9 $$ if (pList == null) [ FD ]
Line_2 $$ private synchronized SelectorInfo get(SelectableChannel channel) throws IOException -->Line_4 $$ SelectorProvider provider = channel.provider()[ FD ]
Line_2 $$ private synchronized SelectorInfo get(SelectableChannel channel) throws IOException -->Line_9 $$ if (pList == null) [ CD ]
Line_16 $$ LinkedList<SelectorInfo> queue = pList.queue-->Line_21 $$ selInfo.queue = queue[ FD ]
Line_2 $$ private synchronized SelectorInfo get(SelectableChannel channel) throws IOException -->Line_26 $$ return selInfo[ CD ]
Line_17 $$ if (queue.isEmpty()) -->Line_23 $$ selInfo = queue.removeLast()[ CD ]
Line_17 $$ if (queue.isEmpty()) -->Line_19 $$ selInfo = new SelectorInfo()[ CD ]
Line_19 $$ selInfo = new SelectorInfo()-->Line_23 $$ selInfo = queue.removeLast()[ FD ]
Line_2 $$ private synchronized SelectorInfo get(SelectableChannel channel) throws IOException -->Line_5 $$ ProviderInfo pList = providerList[ CD ]
Line_2 $$ private synchronized SelectorInfo get(SelectableChannel channel) throws IOException -->Line_25 $$ trimIdleSelectors(Time.now())[ CD ]
Line_3 $$ SelectorInfo selInfo = null-->Line_19 $$ selInfo = new SelectorInfo()[ FD ]
Line_2 $$ private synchronized SelectorInfo get(SelectableChannel channel) throws IOException -->Line_17 $$ if (queue.isEmpty()) [ CD ]
Line_9 $$ if (pList == null) -->Line_12 $$ pList.queue = new LinkedList<SelectorInfo>()[ CD ]
Line_4 $$ SelectorProvider provider = channel.provider()-->Line_11 $$ pList.provider = provider[ FD ]
Line_18 $$ Selector selector = provider.openSelector()-->Line_20 $$ selInfo.selector = selector[ FD ]
Line_2 $$ private synchronized SelectorInfo get(SelectableChannel channel) throws IOException -->Line_3 $$ SelectorInfo selInfo = null[ CD ]
Line_6 $$ while (pList != null && pList.provider != provider) -->Line_7 $$ pList = pList.next[ CD ]
Line_3 $$ SelectorInfo selInfo = null-->Line_23 $$ selInfo = queue.removeLast()[ FD ]
Line_2 $$ private synchronized SelectorInfo get(SelectableChannel channel) throws IOException -->Line_16 $$ LinkedList<SelectorInfo> queue = pList.queue[ CD ]
Line_7 $$ pList = pList.next-->Line_9 $$ if (pList == null) [ FD ]
Line_5 $$ ProviderInfo pList = providerList-->Line_10 $$ pList = new ProviderInfo()[ FD ]
Line_9 $$ if (pList == null) -->Line_11 $$ pList.provider = provider[ CD ]
Line_9 $$ if (pList == null) -->Line_10 $$ pList = new ProviderInfo()[ CD ]
Line_4 $$ SelectorProvider provider = channel.provider()-->Line_18 $$ Selector selector = provider.openSelector()[ FD ]
Line_17 $$ if (queue.isEmpty()) -->Line_18 $$ Selector selector = provider.openSelector()[ CD ]
Line_16 $$ LinkedList<SelectorInfo> queue = pList.queue-->Line_23 $$ selInfo = queue.removeLast()[ FD ]
Line_7 $$ pList = pList.next-->Line_10 $$ pList = new ProviderInfo()[ FD ]
Line_2 $$ private synchronized SelectorInfo get(SelectableChannel channel) throws IOException -->Line_6 $$ while (pList != null && pList.provider != provider) [ CD ]
Line_16 $$ LinkedList<SelectorInfo> queue = pList.queue-->Line_17 $$ if (queue.isEmpty()) [ FD ]
Line_17 $$ if (queue.isEmpty()) -->Line_21 $$ selInfo.queue = queue[ CD ]
Line_17 $$ if (queue.isEmpty()) -->Line_20 $$ selInfo.selector = selector[ CD ]
Line_2 $$ private synchronized SelectorInfo get(SelectableChannel channel) throws IOException -->Line_4 $$ SelectorProvider provider = channel.provider()[ CD ]
