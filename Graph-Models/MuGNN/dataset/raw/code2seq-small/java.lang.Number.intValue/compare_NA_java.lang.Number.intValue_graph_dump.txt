Line_29 $$ if (leftNumber instanceof Byte || rightNumber instanceof Byte) -->Line_30 $$ return compare(leftNumber.byteValue(), rightNumber.byteValue())[ CD ]
Line_29 $$ if (leftNumber instanceof Byte || rightNumber instanceof Byte) -->Line_32 $$ return Double.compare(leftNumber.doubleValue(), rightNumber.doubleValue())[ CD ]
Line_10 $$ Number rightNumber = (Number) right-->Line_32 $$ return Double.compare(leftNumber.doubleValue(), rightNumber.doubleValue())[ FD ]
Line_21 $$ BigInteger rightBigInteger = NumberUtils.convertNumberToTargetClass(rightNumber, BigInteger.class)-->Line_22 $$ return leftBigInteger.compareTo(rightBigInteger)[ FD ]
Line_25 $$ if (leftNumber instanceof Integer || rightNumber instanceof Integer) -->Line_27 $$ if (leftNumber instanceof Short || rightNumber instanceof Short) [ CD ]
Line_17 $$ if (leftNumber instanceof Float || rightNumber instanceof Float) -->Line_18 $$ return Float.compare(leftNumber.floatValue(), rightNumber.floatValue())[ CD ]
Line_19 $$ if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) -->Line_22 $$ return leftBigInteger.compareTo(rightBigInteger)[ CD ]
Line_2 $$ public int compare(Object left, Object right) throws SpelEvaluationException -->Line_5 $$ if (right == null) [ FD ]
Line_2 $$ public int compare(Object left, Object right) throws SpelEvaluationException -->Line_3 $$ if (left == null) [ CD ]
Line_11 $$ if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) -->Line_15 $$ if (leftNumber instanceof Double || rightNumber instanceof Double) [ CD ]
Line_20 $$ BigInteger leftBigInteger = NumberUtils.convertNumberToTargetClass(leftNumber, BigInteger.class)-->Line_22 $$ return leftBigInteger.compareTo(rightBigInteger)[ FD ]
Line_3 $$ if (left == null) -->Line_4 $$ return (right == null ? 0 : -1)[ CD ]
Line_5 $$ if (right == null) -->Line_6 $$ return 1[ CD ]
Line_2 $$ public int compare(Object left, Object right) throws SpelEvaluationException -->Line_36 $$ if (left instanceof Comparable) [ FD ]
Line_23 $$ if (leftNumber instanceof Long || rightNumber instanceof Long) -->Line_25 $$ if (leftNumber instanceof Integer || rightNumber instanceof Integer) [ CD ]
Line_9 $$ Number leftNumber = (Number) left-->Line_24 $$ return compare(leftNumber.longValue(), rightNumber.longValue())[ FD ]
Line_9 $$ Number leftNumber = (Number) left-->Line_18 $$ return Float.compare(leftNumber.floatValue(), rightNumber.floatValue())[ FD ]
Line_10 $$ Number rightNumber = (Number) right-->Line_21 $$ BigInteger rightBigInteger = NumberUtils.convertNumberToTargetClass(rightNumber, BigInteger.class)[ FD ]
Line_9 $$ Number leftNumber = (Number) left-->Line_32 $$ return Double.compare(leftNumber.doubleValue(), rightNumber.doubleValue())[ FD ]
Line_11 $$ if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) -->Line_14 $$ return leftBigDecimal.compareTo(rightBigDecimal)[ CD ]
Line_27 $$ if (leftNumber instanceof Short || rightNumber instanceof Short) -->Line_28 $$ return compare(leftNumber.shortValue(), rightNumber.shortValue())[ CD ]
Line_3 $$ if (left == null) -->Line_5 $$ if (right == null) [ CD ]
Line_2 $$ public int compare(Object left, Object right) throws SpelEvaluationException -->Line_40 $$ throw new SpelEvaluationException(ex, SpelMessage.NOT_COMPARABLE, left.getClass(), right.getClass())[ FD ]
Line_9 $$ Number leftNumber = (Number) left-->Line_16 $$ return Double.compare(leftNumber.doubleValue(), rightNumber.doubleValue())[ FD ]
Line_10 $$ Number rightNumber = (Number) right-->Line_28 $$ return compare(leftNumber.shortValue(), rightNumber.shortValue())[ FD ]
Line_2 $$ public int compare(Object left, Object right) throws SpelEvaluationException -->Line_42 $$ throw new SpelEvaluationException(SpelMessage.NOT_COMPARABLE, left.getClass(), right.getClass())[ FD ]
Line_8 $$ if (left instanceof Number && right instanceof Number) -->Line_9 $$ Number leftNumber = (Number) left[ CD ]
Line_17 $$ if (leftNumber instanceof Float || rightNumber instanceof Float) -->Line_19 $$ if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) [ CD ]
Line_8 $$ if (left instanceof Number && right instanceof Number) -->Line_11 $$ if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) [ CD ]
Line_11 $$ if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) -->Line_13 $$ BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class)[ CD ]
Line_13 $$ BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class)-->Line_14 $$ return leftBigDecimal.compareTo(rightBigDecimal)[ FD ]
Line_9 $$ Number leftNumber = (Number) left-->Line_26 $$ return compare(leftNumber.intValue(), rightNumber.intValue())[ FD ]
Line_9 $$ Number leftNumber = (Number) left-->Line_28 $$ return compare(leftNumber.shortValue(), rightNumber.shortValue())[ FD ]
Line_10 $$ Number rightNumber = (Number) right-->Line_18 $$ return Float.compare(leftNumber.floatValue(), rightNumber.floatValue())[ FD ]
Line_19 $$ if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) -->Line_20 $$ BigInteger leftBigInteger = NumberUtils.convertNumberToTargetClass(leftNumber, BigInteger.class)[ CD ]
Line_19 $$ if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) -->Line_21 $$ BigInteger rightBigInteger = NumberUtils.convertNumberToTargetClass(rightNumber, BigInteger.class)[ CD ]
Line_8 $$ if (left instanceof Number && right instanceof Number) -->Line_10 $$ Number rightNumber = (Number) right[ CD ]
Line_9 $$ Number leftNumber = (Number) left-->Line_30 $$ return compare(leftNumber.byteValue(), rightNumber.byteValue())[ FD ]
Line_9 $$ Number leftNumber = (Number) left-->Line_20 $$ BigInteger leftBigInteger = NumberUtils.convertNumberToTargetClass(leftNumber, BigInteger.class)[ FD ]
Line_10 $$ Number rightNumber = (Number) right-->Line_24 $$ return compare(leftNumber.longValue(), rightNumber.longValue())[ FD ]
Line_10 $$ Number rightNumber = (Number) right-->Line_16 $$ return Double.compare(leftNumber.doubleValue(), rightNumber.doubleValue())[ FD ]
Line_19 $$ if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) -->Line_23 $$ if (leftNumber instanceof Long || rightNumber instanceof Long) [ CD ]
Line_15 $$ if (leftNumber instanceof Double || rightNumber instanceof Double) -->Line_16 $$ return Double.compare(leftNumber.doubleValue(), rightNumber.doubleValue())[ CD ]
Line_36 $$ if (left instanceof Comparable) -->Line_37 $$ return ((Comparable<Object>) left).compareTo(right)[ CD ]
Line_2 $$ public int compare(Object left, Object right) throws SpelEvaluationException -->Line_37 $$ return ((Comparable<Object>) left).compareTo(right)[ FD ]
Line_11 $$ if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) -->Line_12 $$ BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)[ CD ]
Line_10 $$ Number rightNumber = (Number) right-->Line_26 $$ return compare(leftNumber.intValue(), rightNumber.intValue())[ FD ]
Line_10 $$ Number rightNumber = (Number) right-->Line_30 $$ return compare(leftNumber.byteValue(), rightNumber.byteValue())[ FD ]
Line_2 $$ public int compare(Object left, Object right) throws SpelEvaluationException -->Line_3 $$ if (left == null) [ FD ]
Line_25 $$ if (leftNumber instanceof Integer || rightNumber instanceof Integer) -->Line_26 $$ return compare(leftNumber.intValue(), rightNumber.intValue())[ CD ]
Line_12 $$ BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)-->Line_14 $$ return leftBigDecimal.compareTo(rightBigDecimal)[ FD ]
Line_15 $$ if (leftNumber instanceof Double || rightNumber instanceof Double) -->Line_17 $$ if (leftNumber instanceof Float || rightNumber instanceof Float) [ CD ]
Line_10 $$ Number rightNumber = (Number) right-->Line_13 $$ BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class)[ FD ]
Line_23 $$ if (leftNumber instanceof Long || rightNumber instanceof Long) -->Line_24 $$ return compare(leftNumber.longValue(), rightNumber.longValue())[ CD ]
Line_9 $$ Number leftNumber = (Number) left-->Line_12 $$ BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)[ FD ]
Line_2 $$ public int compare(Object left, Object right) throws SpelEvaluationException -->Line_8 $$ if (left instanceof Number && right instanceof Number) [ CD ]
Line_27 $$ if (leftNumber instanceof Short || rightNumber instanceof Short) -->Line_29 $$ if (leftNumber instanceof Byte || rightNumber instanceof Byte) [ CD ]
