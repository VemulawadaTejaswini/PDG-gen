Line_7 $$ for (int i = 0; i < builders.length; i++) -->Line_8 $$ String name = "name_" + randomIntBetween(1, 10)[ CD ]
Line_2 $$ public void testMultipleAggsOnSameField_WithDifferentRequiredValueSourceType() throws Exception -->Line_7 $$ for (int i = 0; i < builders.length; i++) [ CD ]
Line_23 $$ Aggregations aggs = response.getAggregations()-->Line_24 $$ Missing missing = aggs.get("missing_values")[ FD ]
Line_8 $$ String name = "name_" + randomIntBetween(1, 10)-->Line_11 $$ builders[i] = client().prepareIndex("idx", "type").setSource(jsonBuilder().startObject().field("name", name).endObject())[ FD ]
Line_5 $$ IntIntMap values = new IntIntHashMap()-->Line_32 $$ values.remove(((Number) bucket.getKey()).intValue())[ FD ]
Line_2 $$ public void testMultipleAggsOnSameField_WithDifferentRequiredValueSourceType() throws Exception -->Line_25 $$ assertNotNull(missing)[ CD ]
Line_6 $$ long missingValues = 0-->Line_10 $$ missingValues++[ FD ]
Line_2 $$ public void testMultipleAggsOnSameField_WithDifferentRequiredValueSourceType() throws Exception -->Line_22 $$ assertSearchResponse(response)[ CD ]
Line_21 $$ SearchResponse response = client().prepareSearch("idx").addAggregation(missing("missing_values").field("value")).addAggregation(terms("values").field("value").collectMode(aggCollectionMode)).execute().actionGet()-->Line_23 $$ Aggregations aggs = response.getAggregations()[ FD ]
Line_2 $$ public void testMultipleAggsOnSameField_WithDifferentRequiredValueSourceType() throws Exception -->Line_19 $$ ensureSearchable()[ CD ]
Line_24 $$ Missing missing = aggs.get("missing_values")-->Line_25 $$ assertNotNull(missing)[ FD ]
Line_9 $$ if (rarely()) -->Line_11 $$ builders[i] = client().prepareIndex("idx", "type").setSource(jsonBuilder().startObject().field("name", name).endObject())[ CD ]
Line_2 $$ public void testMultipleAggsOnSameField_WithDifferentRequiredValueSourceType() throws Exception -->Line_26 $$ assertThat(missing.getDocCount(), equalTo(missingValues))[ CD ]
Line_2 $$ public void testMultipleAggsOnSameField_WithDifferentRequiredValueSourceType() throws Exception -->Line_34 $$ assertTrue(values.isEmpty())[ CD ]
Line_5 $$ IntIntMap values = new IntIntHashMap()-->Line_14 $$ values.put(value, values.getOrDefault(value, 0) + 1)[ FD ]
Line_9 $$ if (rarely()) -->Line_15 $$ builders[i] = client().prepareIndex("idx", "type").setSource(jsonBuilder().startObject().field("name", name).field("value", value).endObject())[ CD ]
Line_2 $$ public void testMultipleAggsOnSameField_WithDifferentRequiredValueSourceType() throws Exception -->Line_5 $$ IntIntMap values = new IntIntHashMap()[ CD ]
Line_2 $$ public void testMultipleAggsOnSameField_WithDifferentRequiredValueSourceType() throws Exception -->Line_3 $$ createIndex("idx")[ CD ]
Line_2 $$ public void testMultipleAggsOnSameField_WithDifferentRequiredValueSourceType() throws Exception -->Line_6 $$ long missingValues = 0[ CD ]
Line_23 $$ Aggregations aggs = response.getAggregations()-->Line_27 $$ Terms terms = aggs.get("values")[ FD ]
Line_13 $$ int value = randomIntBetween(1, 10)-->Line_14 $$ values.put(value, values.getOrDefault(value, 0) + 1)[ FD ]
Line_2 $$ public void testMultipleAggsOnSameField_WithDifferentRequiredValueSourceType() throws Exception -->Line_18 $$ indexRandom(true, builders)[ CD ]
Line_2 $$ public void testMultipleAggsOnSameField_WithDifferentRequiredValueSourceType() throws Exception -->Line_30 $$ assertThat(buckets.size(), equalTo(values.size()))[ CD ]
Line_27 $$ Terms terms = aggs.get("values")-->Line_29 $$ Collection<Terms.Bucket> buckets = terms.getBuckets()[ FD ]
Line_2 $$ public void testMultipleAggsOnSameField_WithDifferentRequiredValueSourceType() throws Exception -->Line_20 $$ SubAggCollectionMode aggCollectionMode = randomFrom(SubAggCollectionMode.values())[ CD ]
Line_7 $$ for (int i = 0; i < builders.length; i++) -->Line_9 $$ if (rarely()) [ CD ]
Line_9 $$ if (rarely()) -->Line_14 $$ values.put(value, values.getOrDefault(value, 0) + 1)[ CD ]
Line_2 $$ public void testMultipleAggsOnSameField_WithDifferentRequiredValueSourceType() throws Exception -->Line_27 $$ Terms terms = aggs.get("values")[ CD ]
Line_2 $$ public void testMultipleAggsOnSameField_WithDifferentRequiredValueSourceType() throws Exception -->Line_29 $$ Collection<Terms.Bucket> buckets = terms.getBuckets()[ CD ]
Line_4 $$ IndexRequestBuilder[] builders = new IndexRequestBuilder[randomInt(30)]-->Line_18 $$ indexRandom(true, builders)[ FD ]
Line_8 $$ String name = "name_" + randomIntBetween(1, 10)-->Line_15 $$ builders[i] = client().prepareIndex("idx", "type").setSource(jsonBuilder().startObject().field("name", name).field("value", value).endObject())[ FD ]
Line_20 $$ SubAggCollectionMode aggCollectionMode = randomFrom(SubAggCollectionMode.values())-->Line_21 $$ SearchResponse response = client().prepareSearch("idx").addAggregation(missing("missing_values").field("value")).addAggregation(terms("values").field("value").collectMode(aggCollectionMode)).execute().actionGet()[ FD ]
Line_9 $$ if (rarely()) -->Line_13 $$ int value = randomIntBetween(1, 10)[ CD ]
Line_9 $$ if (rarely()) -->Line_10 $$ missingValues++[ CD ]
Line_21 $$ SearchResponse response = client().prepareSearch("idx").addAggregation(missing("missing_values").field("value")).addAggregation(terms("values").field("value").collectMode(aggCollectionMode)).execute().actionGet()-->Line_22 $$ assertSearchResponse(response)[ FD ]
Line_2 $$ public void testMultipleAggsOnSameField_WithDifferentRequiredValueSourceType() throws Exception -->Line_28 $$ assertNotNull(terms)[ CD ]
Line_24 $$ Missing missing = aggs.get("missing_values")-->Line_26 $$ assertThat(missing.getDocCount(), equalTo(missingValues))[ FD ]
Line_2 $$ public void testMultipleAggsOnSameField_WithDifferentRequiredValueSourceType() throws Exception -->Line_23 $$ Aggregations aggs = response.getAggregations()[ CD ]
Line_2 $$ public void testMultipleAggsOnSameField_WithDifferentRequiredValueSourceType() throws Exception -->Line_4 $$ IndexRequestBuilder[] builders = new IndexRequestBuilder[randomInt(30)][ CD ]
Line_6 $$ long missingValues = 0-->Line_26 $$ assertThat(missing.getDocCount(), equalTo(missingValues))[ FD ]
Line_5 $$ IntIntMap values = new IntIntHashMap()-->Line_30 $$ assertThat(buckets.size(), equalTo(values.size()))[ FD ]
Line_5 $$ IntIntMap values = new IntIntHashMap()-->Line_34 $$ assertTrue(values.isEmpty())[ FD ]
Line_13 $$ int value = randomIntBetween(1, 10)-->Line_15 $$ builders[i] = client().prepareIndex("idx", "type").setSource(jsonBuilder().startObject().field("name", name).field("value", value).endObject())[ FD ]
Line_2 $$ public void testMultipleAggsOnSameField_WithDifferentRequiredValueSourceType() throws Exception -->Line_24 $$ Missing missing = aggs.get("missing_values")[ CD ]
Line_2 $$ public void testMultipleAggsOnSameField_WithDifferentRequiredValueSourceType() throws Exception -->Line_21 $$ SearchResponse response = client().prepareSearch("idx").addAggregation(missing("missing_values").field("value")).addAggregation(terms("values").field("value").collectMode(aggCollectionMode)).execute().actionGet()[ CD ]
Line_29 $$ Collection<Terms.Bucket> buckets = terms.getBuckets()-->Line_30 $$ assertThat(buckets.size(), equalTo(values.size()))[ FD ]
Line_27 $$ Terms terms = aggs.get("values")-->Line_28 $$ assertNotNull(terms)[ FD ]
Line_31 $$ for (Terms.Bucket bucket : buckets) -->Line_32 $$ values.remove(((Number) bucket.getKey()).intValue())[ FD ]
