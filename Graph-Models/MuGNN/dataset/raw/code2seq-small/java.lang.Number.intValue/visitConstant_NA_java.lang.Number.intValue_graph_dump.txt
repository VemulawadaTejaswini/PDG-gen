Line_13 $$ if (javaType == byte.class || javaType == short.class || javaType == int.class) -->Line_14 $$ return block.append(loadInt(((Number) value).intValue()))[ CD ]
Line_2 $$ public ByteCodeNode visitConstant(ConstantExpression constant, Scope scope) -->Line_3 $$ Object value = constant.getValue()[ FD ]
Line_4 $$ Class<?> javaType = constant.getType().getJavaType()-->Line_25 $$ if (javaType == String.class) [ FD ]
Line_3 $$ Object value = constant.getValue()-->Line_6 $$ if (value == null) [ FD ]
Line_5 $$ ByteCodeBlock block = new ByteCodeBlock()-->Line_11 $$ return block.append(loadBoolean((Boolean) value))[ FD ]
Line_2 $$ public ByteCodeNode visitConstant(ConstantExpression constant, Scope scope) -->Line_32 $$ return new ByteCodeBlock().setDescription("constant " + constant.getType()).comment(constant.toString()).append(loadConstant(binding))[ CD ]
Line_5 $$ ByteCodeBlock block = new ByteCodeBlock()-->Line_14 $$ return block.append(loadInt(((Number) value).intValue()))[ FD ]
Line_4 $$ Class<?> javaType = constant.getType().getJavaType()-->Line_7 $$ return block.comment("constant null").append(scope.getVariable("wasNull").set(constantTrue())).pushJavaDefault(javaType)[ FD ]
Line_2 $$ public ByteCodeNode visitConstant(ConstantExpression constant, Scope scope) -->Line_10 $$ if (javaType == boolean.class) [ CD ]
Line_2 $$ public ByteCodeNode visitConstant(ConstantExpression constant, Scope scope) -->Line_16 $$ if (javaType == long.class) [ CD ]
Line_2 $$ public ByteCodeNode visitConstant(ConstantExpression constant, Scope scope) -->Line_9 $$ block.comment("constant " + constant.getType().getTypeSignature())[ FD ]
Line_4 $$ Class<?> javaType = constant.getType().getJavaType()-->Line_16 $$ if (javaType == long.class) [ FD ]
Line_2 $$ public ByteCodeNode visitConstant(ConstantExpression constant, Scope scope) -->Line_31 $$ Binding binding = callSiteBinder.bind(value, constant.getType().getJavaType())[ FD ]
Line_2 $$ public ByteCodeNode visitConstant(ConstantExpression constant, Scope scope) -->Line_19 $$ if (javaType == float.class) [ CD ]
Line_2 $$ public ByteCodeNode visitConstant(ConstantExpression constant, Scope scope) -->Line_9 $$ block.comment("constant " + constant.getType().getTypeSignature())[ CD ]
Line_31 $$ Binding binding = callSiteBinder.bind(value, constant.getType().getJavaType())-->Line_32 $$ return new ByteCodeBlock().setDescription("constant " + constant.getType()).comment(constant.toString()).append(loadConstant(binding))[ FD ]
Line_28 $$ if (javaType == void.class) -->Line_29 $$ return block[ CD ]
Line_2 $$ public ByteCodeNode visitConstant(ConstantExpression constant, Scope scope) -->Line_4 $$ Class<?> javaType = constant.getType().getJavaType()[ CD ]
Line_2 $$ public ByteCodeNode visitConstant(ConstantExpression constant, Scope scope) -->Line_7 $$ return block.comment("constant null").append(scope.getVariable("wasNull").set(constantTrue())).pushJavaDefault(javaType)[ FD ]
Line_2 $$ public ByteCodeNode visitConstant(ConstantExpression constant, Scope scope) -->Line_13 $$ if (javaType == byte.class || javaType == short.class || javaType == int.class) [ CD ]
Line_5 $$ ByteCodeBlock block = new ByteCodeBlock()-->Line_9 $$ block.comment("constant " + constant.getType().getTypeSignature())[ FD ]
Line_4 $$ Class<?> javaType = constant.getType().getJavaType()-->Line_22 $$ if (javaType == double.class) [ FD ]
Line_2 $$ public ByteCodeNode visitConstant(ConstantExpression constant, Scope scope) -->Line_28 $$ if (javaType == void.class) [ CD ]
Line_3 $$ Object value = constant.getValue()-->Line_31 $$ Binding binding = callSiteBinder.bind(value, constant.getType().getJavaType())[ FD ]
Line_19 $$ if (javaType == float.class) -->Line_20 $$ return block.append(loadFloat((Float) value))[ CD ]
Line_4 $$ Class<?> javaType = constant.getType().getJavaType()-->Line_28 $$ if (javaType == void.class) [ FD ]
Line_2 $$ public ByteCodeNode visitConstant(ConstantExpression constant, Scope scope) -->Line_31 $$ Binding binding = callSiteBinder.bind(value, constant.getType().getJavaType())[ CD ]
Line_4 $$ Class<?> javaType = constant.getType().getJavaType()-->Line_19 $$ if (javaType == float.class) [ FD ]
Line_5 $$ ByteCodeBlock block = new ByteCodeBlock()-->Line_17 $$ return block.append(loadLong((Long) value))[ FD ]
Line_2 $$ public ByteCodeNode visitConstant(ConstantExpression constant, Scope scope) -->Line_5 $$ ByteCodeBlock block = new ByteCodeBlock()[ CD ]
Line_5 $$ ByteCodeBlock block = new ByteCodeBlock()-->Line_26 $$ return block.append(loadString((String) value))[ FD ]
Line_2 $$ public ByteCodeNode visitConstant(ConstantExpression constant, Scope scope) -->Line_3 $$ Object value = constant.getValue()[ CD ]
Line_5 $$ ByteCodeBlock block = new ByteCodeBlock()-->Line_20 $$ return block.append(loadFloat((Float) value))[ FD ]
Line_5 $$ ByteCodeBlock block = new ByteCodeBlock()-->Line_7 $$ return block.comment("constant null").append(scope.getVariable("wasNull").set(constantTrue())).pushJavaDefault(javaType)[ FD ]
Line_2 $$ public ByteCodeNode visitConstant(ConstantExpression constant, Scope scope) -->Line_32 $$ return new ByteCodeBlock().setDescription("constant " + constant.getType()).comment(constant.toString()).append(loadConstant(binding))[ FD ]
Line_5 $$ ByteCodeBlock block = new ByteCodeBlock()-->Line_23 $$ return block.append(loadDouble((Double) value))[ FD ]
Line_2 $$ public ByteCodeNode visitConstant(ConstantExpression constant, Scope scope) -->Line_22 $$ if (javaType == double.class) [ CD ]
Line_4 $$ Class<?> javaType = constant.getType().getJavaType()-->Line_10 $$ if (javaType == boolean.class) [ FD ]
Line_25 $$ if (javaType == String.class) -->Line_26 $$ return block.append(loadString((String) value))[ CD ]
Line_2 $$ public ByteCodeNode visitConstant(ConstantExpression constant, Scope scope) -->Line_6 $$ if (value == null) [ CD ]
Line_16 $$ if (javaType == long.class) -->Line_17 $$ return block.append(loadLong((Long) value))[ CD ]
Line_2 $$ public ByteCodeNode visitConstant(ConstantExpression constant, Scope scope) -->Line_4 $$ Class<?> javaType = constant.getType().getJavaType()[ FD ]
Line_10 $$ if (javaType == boolean.class) -->Line_11 $$ return block.append(loadBoolean((Boolean) value))[ CD ]
Line_6 $$ if (value == null) -->Line_7 $$ return block.comment("constant null").append(scope.getVariable("wasNull").set(constantTrue())).pushJavaDefault(javaType)[ CD ]
Line_2 $$ public ByteCodeNode visitConstant(ConstantExpression constant, Scope scope) -->Line_25 $$ if (javaType == String.class) [ CD ]
Line_22 $$ if (javaType == double.class) -->Line_23 $$ return block.append(loadDouble((Double) value))[ CD ]
