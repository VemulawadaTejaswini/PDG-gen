Line_35 $$ final Holder collectionHolder = getCollectionFromSizeComparison(condition, indexVariable, secondDeclaredElement)-->Line_36 $$ if (collectionHolder == null) [ FD ]
Line_22 $$ final PsiExpression initialValue = indexVariable.getInitializer()-->Line_26 $$ final Object constant = ExpressionUtils.computeConstantExpression(initialValue)[ FD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_18 $$ if (!(declaredElement instanceof PsiVariable)) [ CD ]
Line_31 $$ if (number.intValue() != 0) -->Line_32 $$ return false[ CD ]
Line_47 $$ if (collectionHolder != Holder.DUMMY) -->Line_51 $$ if (ignoreUntypedCollections && parameters.length == 0) [ CD ]
Line_9 $$ final PsiElement secondDeclaredElement-->Line_35 $$ final Holder collectionHolder = getCollectionFromSizeComparison(condition, indexVariable, secondDeclaredElement)[ FD ]
Line_4 $$ if (!(initialization instanceof PsiDeclarationStatement)) -->Line_5 $$ return false[ CD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_3 $$ final PsiStatement initialization = forStatement.getInitialization()[ FD ]
Line_21 $$ final PsiVariable indexVariable = (PsiVariable) declaredElement-->Line_22 $$ final PsiExpression initialValue = indexVariable.getInitializer()[ FD ]
Line_30 $$ final Number number = (Number) constant-->Line_31 $$ if (number.intValue() != 0) [ FD ]
Line_49 $$ final PsiClassType collectionType = (PsiClassType) collection.getType()-->Line_50 $$ final PsiType[] parameters = collectionType.getParameters()[ FD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_7 $$ final PsiDeclarationStatement declaration = (PsiDeclarationStatement) initialization[ CD ]
Line_47 $$ if (collectionHolder != Holder.DUMMY) -->Line_49 $$ final PsiClassType collectionType = (PsiClassType) collection.getType()[ CD ]
Line_48 $$ final PsiVariable collection = collectionHolder.getVariable()-->Line_54 $$ return !VariableAccessUtils.variableIsAssigned(collection, body)[ FD ]
Line_9 $$ final PsiElement secondDeclaredElement-->Line_11 $$ secondDeclaredElement = null[ FD ]
Line_35 $$ final Holder collectionHolder = getCollectionFromSizeComparison(condition, indexVariable, secondDeclaredElement)-->Line_47 $$ if (collectionHolder != Holder.DUMMY) [ FD ]
Line_7 $$ final PsiDeclarationStatement declaration = (PsiDeclarationStatement) initialization-->Line_8 $$ final PsiElement[] declaredElements = declaration.getDeclaredElements()[ FD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_8 $$ final PsiElement[] declaredElements = declaration.getDeclaredElements()[ CD ]
Line_22 $$ final PsiExpression initialValue = indexVariable.getInitializer()-->Line_23 $$ if (initialValue == null) [ FD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_34 $$ final PsiExpression condition = forStatement.getCondition()[ CD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_17 $$ final PsiElement declaredElement = declaredElements[0][ CD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_43 $$ final PsiStatement body = forStatement.getBody()[ FD ]
Line_12 $$ if (declaredElements.length == 2) -->Line_15 $$ return false[ CD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_10 $$ if (declaredElements.length == 1) [ CD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_3 $$ final PsiStatement initialization = forStatement.getInitialization()[ CD ]
Line_21 $$ final PsiVariable indexVariable = (PsiVariable) declaredElement-->Line_40 $$ if (!VariableAccessUtils.variableIsIncremented(indexVariable, update)) [ FD ]
Line_48 $$ final PsiVariable collection = collectionHolder.getVariable()-->Line_49 $$ final PsiClassType collectionType = (PsiClassType) collection.getType()[ FD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_35 $$ final Holder collectionHolder = getCollectionFromSizeComparison(condition, indexVariable, secondDeclaredElement)[ CD ]
Line_23 $$ if (initialValue == null) -->Line_24 $$ return false[ CD ]
Line_35 $$ final Holder collectionHolder = getCollectionFromSizeComparison(condition, indexVariable, secondDeclaredElement)-->Line_44 $$ if (!isIndexVariableOnlyUsedAsListIndex(collectionHolder, indexVariable, body)) [ FD ]
Line_18 $$ if (!(declaredElement instanceof PsiVariable)) -->Line_19 $$ return false[ CD ]
Line_44 $$ if (!isIndexVariableOnlyUsedAsListIndex(collectionHolder, indexVariable, body)) -->Line_45 $$ return false[ CD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_21 $$ final PsiVariable indexVariable = (PsiVariable) declaredElement[ CD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_39 $$ final PsiStatement update = forStatement.getUpdate()[ FD ]
Line_47 $$ if (collectionHolder != Holder.DUMMY) -->Line_50 $$ final PsiType[] parameters = collectionType.getParameters()[ CD ]
Line_47 $$ if (collectionHolder != Holder.DUMMY) -->Line_54 $$ return !VariableAccessUtils.variableIsAssigned(collection, body)[ CD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_39 $$ final PsiStatement update = forStatement.getUpdate()[ CD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_30 $$ final Number number = (Number) constant[ CD ]
Line_21 $$ final PsiVariable indexVariable = (PsiVariable) declaredElement-->Line_35 $$ final Holder collectionHolder = getCollectionFromSizeComparison(condition, indexVariable, secondDeclaredElement)[ FD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_4 $$ if (!(initialization instanceof PsiDeclarationStatement)) [ CD ]
Line_21 $$ final PsiVariable indexVariable = (PsiVariable) declaredElement-->Line_44 $$ if (!isIndexVariableOnlyUsedAsListIndex(collectionHolder, indexVariable, body)) [ FD ]
Line_35 $$ final Holder collectionHolder = getCollectionFromSizeComparison(condition, indexVariable, secondDeclaredElement)-->Line_48 $$ final PsiVariable collection = collectionHolder.getVariable()[ FD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_40 $$ if (!VariableAccessUtils.variableIsIncremented(indexVariable, update)) [ CD ]
Line_40 $$ if (!VariableAccessUtils.variableIsIncremented(indexVariable, update)) -->Line_41 $$ return false[ CD ]
Line_10 $$ if (declaredElements.length == 1) -->Line_11 $$ secondDeclaredElement = null[ CD ]
Line_10 $$ if (declaredElements.length == 1) -->Line_12 $$ if (declaredElements.length == 2) [ CD ]
Line_13 $$ secondDeclaredElement = declaredElements[1]-->Line_35 $$ final Holder collectionHolder = getCollectionFromSizeComparison(condition, indexVariable, secondDeclaredElement)[ FD ]
Line_47 $$ if (collectionHolder != Holder.DUMMY) -->Line_48 $$ final PsiVariable collection = collectionHolder.getVariable()[ CD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_56 $$ return true[ CD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_26 $$ final Object constant = ExpressionUtils.computeConstantExpression(initialValue)[ CD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_23 $$ if (initialValue == null) [ CD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_31 $$ if (number.intValue() != 0) [ CD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_22 $$ final PsiExpression initialValue = indexVariable.getInitializer()[ CD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_27 $$ if (!(constant instanceof Number)) [ CD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_43 $$ final PsiStatement body = forStatement.getBody()[ CD ]
Line_9 $$ final PsiElement secondDeclaredElement-->Line_13 $$ secondDeclaredElement = declaredElements[1][ FD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_34 $$ final PsiExpression condition = forStatement.getCondition()[ FD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_44 $$ if (!isIndexVariableOnlyUsedAsListIndex(collectionHolder, indexVariable, body)) [ CD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_47 $$ if (collectionHolder != Holder.DUMMY) [ CD ]
Line_34 $$ final PsiExpression condition = forStatement.getCondition()-->Line_35 $$ final Holder collectionHolder = getCollectionFromSizeComparison(condition, indexVariable, secondDeclaredElement)[ FD ]
Line_36 $$ if (collectionHolder == null) -->Line_37 $$ return false[ CD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_36 $$ if (collectionHolder == null) [ CD ]
Line_43 $$ final PsiStatement body = forStatement.getBody()-->Line_44 $$ if (!isIndexVariableOnlyUsedAsListIndex(collectionHolder, indexVariable, body)) [ FD ]
Line_43 $$ final PsiStatement body = forStatement.getBody()-->Line_54 $$ return !VariableAccessUtils.variableIsAssigned(collection, body)[ FD ]
Line_11 $$ secondDeclaredElement = null-->Line_13 $$ secondDeclaredElement = declaredElements[1][ FD ]
Line_51 $$ if (ignoreUntypedCollections && parameters.length == 0) -->Line_52 $$ return false[ CD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_9 $$ final PsiElement secondDeclaredElement[ CD ]
Line_27 $$ if (!(constant instanceof Number)) -->Line_28 $$ return false[ CD ]
Line_39 $$ final PsiStatement update = forStatement.getUpdate()-->Line_40 $$ if (!VariableAccessUtils.variableIsIncremented(indexVariable, update)) [ FD ]
Line_2 $$ static boolean isIndexedListLoopStatement(PsiForStatement forStatement, boolean ignoreUntypedCollections) -->Line_51 $$ if (ignoreUntypedCollections && parameters.length == 0) [ FD ]
Line_11 $$ secondDeclaredElement = null-->Line_35 $$ final Holder collectionHolder = getCollectionFromSizeComparison(condition, indexVariable, secondDeclaredElement)[ FD ]
Line_12 $$ if (declaredElements.length == 2) -->Line_13 $$ secondDeclaredElement = declaredElements[1][ CD ]
