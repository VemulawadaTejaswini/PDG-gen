Line_2 $$ protected void testSQLWithLimitWithOuterOrder(String order, int start, int end, int expectedFirstValue, int expectedLastValue) throws Exception -->Line_3 $$ Session session = null[ CD ]
Line_5 $$ session = _sessionFactory.openSession()-->Line_15 $$ _sessionFactory.closeSession(session)[ FD ]
Line_8 $$ List<Integer> result = (List<Integer>) QueryUtil.list(sqlQuery, _sessionFactory.getDialect(), start, end, true)-->Line_9 $$ Assert.assertEquals(end - start, result.size())[ FD ]
Line_2 $$ protected void testSQLWithLimitWithOuterOrder(String order, int start, int end, int expectedFirstValue, int expectedLastValue) throws Exception -->Line_12 $$ Assert.assertEquals(expectedFirstValue, firstId.intValue())[ FD ]
Line_6 $$ SQLQuery sqlQuery = session.createSynchronizedSQLQuery("SELECT id FROM QueryUtilTest ORDER BY value ".concat(order))-->Line_8 $$ List<Integer> result = (List<Integer>) QueryUtil.list(sqlQuery, _sessionFactory.getDialect(), start, end, true)[ FD ]
Line_3 $$ Session session = null-->Line_6 $$ SQLQuery sqlQuery = session.createSynchronizedSQLQuery("SELECT id FROM QueryUtilTest ORDER BY value ".concat(order))[ FD ]
Line_2 $$ protected void testSQLWithLimitWithOuterOrder(String order, int start, int end, int expectedFirstValue, int expectedLastValue) throws Exception -->Line_6 $$ SQLQuery sqlQuery = session.createSynchronizedSQLQuery("SELECT id FROM QueryUtilTest ORDER BY value ".concat(order))[ FD ]
Line_6 $$ SQLQuery sqlQuery = session.createSynchronizedSQLQuery("SELECT id FROM QueryUtilTest ORDER BY value ".concat(order))-->Line_7 $$ sqlQuery.addScalar("id", Type.INTEGER)[ FD ]
Line_8 $$ List<Integer> result = (List<Integer>) QueryUtil.list(sqlQuery, _sessionFactory.getDialect(), start, end, true)-->Line_11 $$ Number lastId = result.get(result.size() - 1)[ FD ]
Line_10 $$ Number firstId = result.get(0)-->Line_12 $$ Assert.assertEquals(expectedFirstValue, firstId.intValue())[ FD ]
Line_2 $$ protected void testSQLWithLimitWithOuterOrder(String order, int start, int end, int expectedFirstValue, int expectedLastValue) throws Exception -->Line_13 $$ Assert.assertEquals(expectedLastValue, lastId.intValue())[ FD ]
Line_3 $$ Session session = null-->Line_5 $$ session = _sessionFactory.openSession()[ FD ]
Line_2 $$ protected void testSQLWithLimitWithOuterOrder(String order, int start, int end, int expectedFirstValue, int expectedLastValue) throws Exception -->Line_8 $$ List<Integer> result = (List<Integer>) QueryUtil.list(sqlQuery, _sessionFactory.getDialect(), start, end, true)[ FD ]
Line_5 $$ session = _sessionFactory.openSession()-->Line_6 $$ SQLQuery sqlQuery = session.createSynchronizedSQLQuery("SELECT id FROM QueryUtilTest ORDER BY value ".concat(order))[ FD ]
Line_3 $$ Session session = null-->Line_15 $$ _sessionFactory.closeSession(session)[ FD ]
Line_11 $$ Number lastId = result.get(result.size() - 1)-->Line_13 $$ Assert.assertEquals(expectedLastValue, lastId.intValue())[ FD ]
Line_8 $$ List<Integer> result = (List<Integer>) QueryUtil.list(sqlQuery, _sessionFactory.getDialect(), start, end, true)-->Line_10 $$ Number firstId = result.get(0)[ FD ]
