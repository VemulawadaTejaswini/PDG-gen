Line_3 $$ ResultSet resultSet1 = mock(ResultSet.class)-->Line_5 $$ given(resultSet1.getString(2)).willReturn("Foo", "Bar")[ FD ]
Line_24 $$ List<String> rs1 = (List<String>) res.get("rs")-->Line_25 $$ assertEquals(2, rs1.size())[ FD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_24 $$ List<String> rs1 = (List<String>) res.get("rs")[ CD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_13 $$ given(resultSet2.getObject(1)).willReturn("Spam")[ CD ]
Line_22 $$ Map<String, Object> res = sproc.execute()-->Line_23 $$ assertEquals("incorrect number of returns", 3, res.size())[ FD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_12 $$ given(resultSet2.next()).willReturn(true, false)[ CD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_10 $$ ResultSet resultSet2 = mock(ResultSet.class)[ CD ]
Line_10 $$ ResultSet resultSet2 = mock(ResultSet.class)-->Line_11 $$ given(resultSet2.getMetaData()).willReturn(resultSetMetaData)[ FD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_21 $$ StoredProcedureWithResultSetMapped sproc = new StoredProcedureWithResultSetMapped(dataSource)[ CD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_17 $$ given(callableStatement.getResultSet()).willReturn(resultSet1, resultSet2)[ CD ]
Line_10 $$ ResultSet resultSet2 = mock(ResultSet.class)-->Line_14 $$ given(resultSet2.getObject(2)).willReturn("Eggs")[ FD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_22 $$ Map<String, Object> res = sproc.execute()[ CD ]
Line_24 $$ List<String> rs1 = (List<String>) res.get("rs")-->Line_27 $$ assertEquals("Bar", rs1.get(1))[ FD ]
Line_10 $$ ResultSet resultSet2 = mock(ResultSet.class)-->Line_17 $$ given(callableStatement.getResultSet()).willReturn(resultSet1, resultSet2)[ FD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_25 $$ assertEquals(2, rs1.size())[ CD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_37 $$ verify(resultSet1).close()[ CD ]
Line_24 $$ List<String> rs1 = (List<String>) res.get("rs")-->Line_26 $$ assertEquals("Foo", rs1.get(0))[ FD ]
Line_10 $$ ResultSet resultSet2 = mock(ResultSet.class)-->Line_13 $$ given(resultSet2.getObject(1)).willReturn("Spam")[ FD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_14 $$ given(resultSet2.getObject(2)).willReturn("Eggs")[ CD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_9 $$ given(resultSetMetaData.getColumnLabel(2)).willReturn("eggs")[ CD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_36 $$ assertEquals("wrong update count", 0, n.intValue())[ CD ]
Line_3 $$ ResultSet resultSet1 = mock(ResultSet.class)-->Line_37 $$ verify(resultSet1).close()[ FD ]
Line_22 $$ Map<String, Object> res = sproc.execute()-->Line_35 $$ Number n = (Number) res.get("#update-count-1")[ FD ]
Line_6 $$ ResultSetMetaData resultSetMetaData = mock(ResultSetMetaData.class)-->Line_8 $$ given(resultSetMetaData.getColumnLabel(1)).willReturn("spam")[ FD ]
Line_3 $$ ResultSet resultSet1 = mock(ResultSet.class)-->Line_4 $$ given(resultSet1.next()).willReturn(true, true, false)[ FD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_8 $$ given(resultSetMetaData.getColumnLabel(1)).willReturn("spam")[ CD ]
Line_6 $$ ResultSetMetaData resultSetMetaData = mock(ResultSetMetaData.class)-->Line_11 $$ given(resultSet2.getMetaData()).willReturn(resultSetMetaData)[ FD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_26 $$ assertEquals("Foo", rs1.get(0))[ CD ]
Line_35 $$ Number n = (Number) res.get("#update-count-1")-->Line_36 $$ assertEquals("wrong update count", 0, n.intValue())[ FD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_20 $$ given(connection.prepareCall("[ CD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_6 $$ ResultSetMetaData resultSetMetaData = mock(ResultSetMetaData.class)[ CD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_5 $$ given(resultSet1.getString(2)).willReturn("Foo", "Bar")[ CD ]
Line_10 $$ ResultSet resultSet2 = mock(ResultSet.class)-->Line_38 $$ verify(resultSet2).close()[ FD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_30 $$ Object o2 = rs2.get(0)[ CD ]
Line_22 $$ Map<String, Object> res = sproc.execute()-->Line_24 $$ List<String> rs1 = (List<String>) res.get("rs")[ FD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_3 $$ ResultSet resultSet1 = mock(ResultSet.class)[ CD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_29 $$ assertEquals(1, rs2.size())[ CD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_27 $$ assertEquals("Bar", rs1.get(1))[ CD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_16 $$ given(callableStatement.getUpdateCount()).willReturn(-1)[ CD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_15 $$ given(callableStatement.execute()).willReturn(true)[ CD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_23 $$ assertEquals("incorrect number of returns", 3, res.size())[ CD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_35 $$ Number n = (Number) res.get("#update-count-1")[ CD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_18 $$ given(callableStatement.getMoreResults()).willReturn(true, false, false)[ CD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_31 $$ assertTrue("wron type returned for result set 2", o2 instanceof Map)[ CD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_4 $$ given(resultSet1.next()).willReturn(true, true, false)[ CD ]
Line_22 $$ Map<String, Object> res = sproc.execute()-->Line_28 $$ List<Object> rs2 = (List<Object>) res.get("#result-set-2")[ FD ]
Line_28 $$ List<Object> rs2 = (List<Object>) res.get("#result-set-2")-->Line_29 $$ assertEquals(1, rs2.size())[ FD ]
Line_3 $$ ResultSet resultSet1 = mock(ResultSet.class)-->Line_17 $$ given(callableStatement.getResultSet()).willReturn(resultSet1, resultSet2)[ FD ]
Line_28 $$ List<Object> rs2 = (List<Object>) res.get("#result-set-2")-->Line_30 $$ Object o2 = rs2.get(0)[ FD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_32 $$ Map<String, String> m2 = (Map<String, String>) o2[ CD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_33 $$ assertEquals("Spam", m2.get("spam"))[ CD ]
Line_32 $$ Map<String, String> m2 = (Map<String, String>) o2-->Line_33 $$ assertEquals("Spam", m2.get("spam"))[ FD ]
Line_10 $$ ResultSet resultSet2 = mock(ResultSet.class)-->Line_12 $$ given(resultSet2.next()).willReturn(true, false)[ FD ]
Line_32 $$ Map<String, String> m2 = (Map<String, String>) o2-->Line_34 $$ assertEquals("Eggs", m2.get("eggs"))[ FD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_7 $$ given(resultSetMetaData.getColumnCount()).willReturn(2)[ CD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_38 $$ verify(resultSet2).close()[ CD ]
Line_6 $$ ResultSetMetaData resultSetMetaData = mock(ResultSetMetaData.class)-->Line_7 $$ given(resultSetMetaData.getColumnCount()).willReturn(2)[ FD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_19 $$ given(callableStatement.getUpdateCount()).willReturn(-1, -1, 0, -1)[ CD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_28 $$ List<Object> rs2 = (List<Object>) res.get("#result-set-2")[ CD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_34 $$ assertEquals("Eggs", m2.get("eggs"))[ CD ]
Line_21 $$ StoredProcedureWithResultSetMapped sproc = new StoredProcedureWithResultSetMapped(dataSource)-->Line_22 $$ Map<String, Object> res = sproc.execute()[ FD ]
Line_6 $$ ResultSetMetaData resultSetMetaData = mock(ResultSetMetaData.class)-->Line_9 $$ given(resultSetMetaData.getColumnLabel(2)).willReturn("eggs")[ FD ]
Line_2 $$ public void testStoredProcedureWithUndeclaredResults() throws Exception -->Line_11 $$ given(resultSet2.getMetaData()).willReturn(resultSetMetaData)[ CD ]
