Line_2 $$ protected void assertAvgScoreMode(Query parentFilter, IndexSearcher searcher, IndexFieldData.XFieldComparatorSource innerFieldComparator) throws IOException -->Line_12 $$ assertThat(((Number) ((FieldDoc) topDocs.scoreDocs[0]).fields[0]).intValue(), equalTo(2))[ CD ]
Line_2 $$ protected void assertAvgScoreMode(Query parentFilter, IndexSearcher searcher, IndexFieldData.XFieldComparatorSource innerFieldComparator) throws IOException -->Line_5 $$ XFieldComparatorSource nestedComparatorSource = createFieldComparator("field2", sortMode, -127, createNested(searcher, parentFilter, childFilter))[ FD ]
Line_2 $$ protected void assertAvgScoreMode(Query parentFilter, IndexSearcher searcher, IndexFieldData.XFieldComparatorSource innerFieldComparator) throws IOException -->Line_15 $$ assertThat(topDocs.scoreDocs[2].doc, equalTo(3))[ CD ]
Line_2 $$ protected void assertAvgScoreMode(Query parentFilter, IndexSearcher searcher, IndexFieldData.XFieldComparatorSource innerFieldComparator) throws IOException -->Line_13 $$ assertThat(topDocs.scoreDocs[1].doc, equalTo(7))[ CD ]
Line_6 $$ Query query = new ToParentBlockJoinQuery(new ConstantScoreQuery(childFilter), new QueryBitSetProducer(parentFilter), ScoreMode.None)-->Line_8 $$ TopDocs topDocs = searcher.search(query, 5, sort)[ FD ]
Line_2 $$ protected void assertAvgScoreMode(Query parentFilter, IndexSearcher searcher, IndexFieldData.XFieldComparatorSource innerFieldComparator) throws IOException -->Line_14 $$ assertThat(((Number) ((FieldDoc) topDocs.scoreDocs[1]).fields[0]).intValue(), equalTo(2))[ CD ]
Line_2 $$ protected void assertAvgScoreMode(Query parentFilter, IndexSearcher searcher, IndexFieldData.XFieldComparatorSource innerFieldComparator) throws IOException -->Line_6 $$ Query query = new ToParentBlockJoinQuery(new ConstantScoreQuery(childFilter), new QueryBitSetProducer(parentFilter), ScoreMode.None)[ CD ]
Line_2 $$ protected void assertAvgScoreMode(Query parentFilter, IndexSearcher searcher, IndexFieldData.XFieldComparatorSource innerFieldComparator) throws IOException -->Line_4 $$ Query childFilter = Queries.not(parentFilter)[ CD ]
Line_2 $$ protected void assertAvgScoreMode(Query parentFilter, IndexSearcher searcher, IndexFieldData.XFieldComparatorSource innerFieldComparator) throws IOException -->Line_11 $$ assertThat(topDocs.scoreDocs[0].doc, equalTo(11))[ CD ]
Line_2 $$ protected void assertAvgScoreMode(Query parentFilter, IndexSearcher searcher, IndexFieldData.XFieldComparatorSource innerFieldComparator) throws IOException -->Line_5 $$ XFieldComparatorSource nestedComparatorSource = createFieldComparator("field2", sortMode, -127, createNested(searcher, parentFilter, childFilter))[ CD ]
Line_2 $$ protected void assertAvgScoreMode(Query parentFilter, IndexSearcher searcher, IndexFieldData.XFieldComparatorSource innerFieldComparator) throws IOException -->Line_3 $$ MultiValueMode sortMode = MultiValueMode.AVG[ CD ]
Line_2 $$ protected void assertAvgScoreMode(Query parentFilter, IndexSearcher searcher, IndexFieldData.XFieldComparatorSource innerFieldComparator) throws IOException -->Line_20 $$ assertThat(((Number) ((FieldDoc) topDocs.scoreDocs[4]).fields[0]).intValue(), equalTo(3))[ CD ]
Line_2 $$ protected void assertAvgScoreMode(Query parentFilter, IndexSearcher searcher, IndexFieldData.XFieldComparatorSource innerFieldComparator) throws IOException -->Line_19 $$ assertThat(topDocs.scoreDocs[4].doc, equalTo(19))[ CD ]
Line_3 $$ MultiValueMode sortMode = MultiValueMode.AVG-->Line_5 $$ XFieldComparatorSource nestedComparatorSource = createFieldComparator("field2", sortMode, -127, createNested(searcher, parentFilter, childFilter))[ FD ]
Line_7 $$ Sort sort = new Sort(new SortField("field2", nestedComparatorSource))-->Line_8 $$ TopDocs topDocs = searcher.search(query, 5, sort)[ FD ]
Line_2 $$ protected void assertAvgScoreMode(Query parentFilter, IndexSearcher searcher, IndexFieldData.XFieldComparatorSource innerFieldComparator) throws IOException -->Line_8 $$ TopDocs topDocs = searcher.search(query, 5, sort)[ FD ]
Line_2 $$ protected void assertAvgScoreMode(Query parentFilter, IndexSearcher searcher, IndexFieldData.XFieldComparatorSource innerFieldComparator) throws IOException -->Line_8 $$ TopDocs topDocs = searcher.search(query, 5, sort)[ CD ]
Line_2 $$ protected void assertAvgScoreMode(Query parentFilter, IndexSearcher searcher, IndexFieldData.XFieldComparatorSource innerFieldComparator) throws IOException -->Line_7 $$ Sort sort = new Sort(new SortField("field2", nestedComparatorSource))[ CD ]
Line_2 $$ protected void assertAvgScoreMode(Query parentFilter, IndexSearcher searcher, IndexFieldData.XFieldComparatorSource innerFieldComparator) throws IOException -->Line_17 $$ assertThat(topDocs.scoreDocs[3].doc, equalTo(15))[ CD ]
Line_2 $$ protected void assertAvgScoreMode(Query parentFilter, IndexSearcher searcher, IndexFieldData.XFieldComparatorSource innerFieldComparator) throws IOException -->Line_18 $$ assertThat(((Number) ((FieldDoc) topDocs.scoreDocs[3]).fields[0]).intValue(), equalTo(3))[ CD ]
Line_2 $$ protected void assertAvgScoreMode(Query parentFilter, IndexSearcher searcher, IndexFieldData.XFieldComparatorSource innerFieldComparator) throws IOException -->Line_16 $$ assertThat(((Number) ((FieldDoc) topDocs.scoreDocs[2]).fields[0]).intValue(), equalTo(3))[ CD ]
Line_2 $$ protected void assertAvgScoreMode(Query parentFilter, IndexSearcher searcher, IndexFieldData.XFieldComparatorSource innerFieldComparator) throws IOException -->Line_10 $$ assertThat(topDocs.scoreDocs.length, equalTo(5))[ CD ]
Line_2 $$ protected void assertAvgScoreMode(Query parentFilter, IndexSearcher searcher, IndexFieldData.XFieldComparatorSource innerFieldComparator) throws IOException -->Line_9 $$ assertThat(topDocs.totalHits, equalTo(7))[ CD ]
Line_4 $$ Query childFilter = Queries.not(parentFilter)-->Line_5 $$ XFieldComparatorSource nestedComparatorSource = createFieldComparator("field2", sortMode, -127, createNested(searcher, parentFilter, childFilter))[ FD ]
Line_2 $$ protected void assertAvgScoreMode(Query parentFilter, IndexSearcher searcher, IndexFieldData.XFieldComparatorSource innerFieldComparator) throws IOException -->Line_4 $$ Query childFilter = Queries.not(parentFilter)[ FD ]
