Line_2 $$ public void testAggregationsBinarySameContentType() throws Exception -->Line_8 $$ subTermContentBuilder.endObject()[ CD ]
Line_12 $$ Terms terms = response.getAggregations().get("terms")-->Line_14 $$ assertThat(terms.getName(), equalTo("terms"))[ FD ]
Line_5 $$ XContentBuilder subTermContentBuilder = XContentFactory.contentBuilder(Requests.CONTENT_TYPE)-->Line_7 $$ subTerm.toXContent(subTermContentBuilder, ToXContent.EMPTY_PARAMS)[ FD ]
Line_16 $$ for (int i = 0; i < 5; i++) -->Line_26 $$ List<Bucket> subTermsBuckets = subTerms.getBuckets()[ CD ]
Line_26 $$ List<Bucket> subTermsBuckets = subTerms.getBuckets()-->Line_28 $$ assertThat(subTermsBuckets.size(), equalTo(1))[ FD ]
Line_16 $$ for (int i = 0; i < 5; i++) -->Line_24 $$ Terms subTerms = subAggs.get("subterms")[ CD ]
Line_16 $$ for (int i = 0; i < 5; i++) -->Line_30 $$ assertThat(subTermsBuckets.get(0).getDocCount(), equalTo(1l))[ CD ]
Line_21 $$ Aggregations subAggs = bucket.getAggregations()-->Line_22 $$ assertThat(subAggs, notNullValue())[ FD ]
Line_4 $$ TermsBuilder subTerm = AggregationBuilders.terms("subterms").field(INT_FIELD_NAME)-->Line_7 $$ subTerm.toXContent(subTermContentBuilder, ToXContent.EMPTY_PARAMS)[ FD ]
Line_2 $$ public void testAggregationsBinarySameContentType() throws Exception -->Line_6 $$ subTermContentBuilder.startObject()[ CD ]
Line_10 $$ SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(termsBuilder).execute().actionGet()-->Line_11 $$ assertSearchResponse(response)[ FD ]
Line_2 $$ public void testAggregationsBinarySameContentType() throws Exception -->Line_9 $$ termsBuilder.subAggregation(subTermContentBuilder)[ CD ]
Line_12 $$ Terms terms = response.getAggregations().get("terms")-->Line_17 $$ Terms.Bucket bucket = terms.getBucketByKey("val" + i)[ FD ]
Line_16 $$ for (int i = 0; i < 5; i++) -->Line_22 $$ assertThat(subAggs, notNullValue())[ CD ]
Line_24 $$ Terms subTerms = subAggs.get("subterms")-->Line_25 $$ assertThat(subTerms, notNullValue())[ FD ]
Line_2 $$ public void testAggregationsBinarySameContentType() throws Exception -->Line_5 $$ XContentBuilder subTermContentBuilder = XContentFactory.contentBuilder(Requests.CONTENT_TYPE)[ CD ]
Line_2 $$ public void testAggregationsBinarySameContentType() throws Exception -->Line_10 $$ SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(termsBuilder).execute().actionGet()[ CD ]
Line_2 $$ public void testAggregationsBinarySameContentType() throws Exception -->Line_11 $$ assertSearchResponse(response)[ CD ]
Line_12 $$ Terms terms = response.getAggregations().get("terms")-->Line_13 $$ assertThat(terms, notNullValue())[ FD ]
Line_2 $$ public void testAggregationsBinarySameContentType() throws Exception -->Line_14 $$ assertThat(terms.getName(), equalTo("terms"))[ CD ]
Line_2 $$ public void testAggregationsBinarySameContentType() throws Exception -->Line_15 $$ assertThat(terms.getBuckets().size(), equalTo(5))[ CD ]
Line_17 $$ Terms.Bucket bucket = terms.getBucketByKey("val" + i)-->Line_19 $$ assertThat(bucket.getKeyAsString(), equalTo("val" + i))[ FD ]
Line_2 $$ public void testAggregationsBinarySameContentType() throws Exception -->Line_13 $$ assertThat(terms, notNullValue())[ CD ]
Line_16 $$ for (int i = 0; i < 5; i++) -->Line_23 $$ assertThat(subAggs.asList().size(), equalTo(1))[ CD ]
Line_21 $$ Aggregations subAggs = bucket.getAggregations()-->Line_24 $$ Terms subTerms = subAggs.get("subterms")[ FD ]
Line_24 $$ Terms subTerms = subAggs.get("subterms")-->Line_26 $$ List<Bucket> subTermsBuckets = subTerms.getBuckets()[ FD ]
Line_2 $$ public void testAggregationsBinarySameContentType() throws Exception -->Line_4 $$ TermsBuilder subTerm = AggregationBuilders.terms("subterms").field(INT_FIELD_NAME)[ CD ]
Line_16 $$ for (int i = 0; i < 5; i++) -->Line_19 $$ assertThat(bucket.getKeyAsString(), equalTo("val" + i))[ CD ]
Line_26 $$ List<Bucket> subTermsBuckets = subTerms.getBuckets()-->Line_29 $$ assertThat(((Number) subTermsBuckets.get(0).getKey()).intValue(), equalTo(i))[ FD ]
Line_16 $$ for (int i = 0; i < 5; i++) -->Line_29 $$ assertThat(((Number) subTermsBuckets.get(0).getKey()).intValue(), equalTo(i))[ CD ]
Line_5 $$ XContentBuilder subTermContentBuilder = XContentFactory.contentBuilder(Requests.CONTENT_TYPE)-->Line_6 $$ subTermContentBuilder.startObject()[ FD ]
Line_21 $$ Aggregations subAggs = bucket.getAggregations()-->Line_23 $$ assertThat(subAggs.asList().size(), equalTo(1))[ FD ]
Line_17 $$ Terms.Bucket bucket = terms.getBucketByKey("val" + i)-->Line_18 $$ assertThat(bucket, notNullValue())[ FD ]
Line_16 $$ for (int i = 0; i < 5; i++) -->Line_17 $$ Terms.Bucket bucket = terms.getBucketByKey("val" + i)[ CD ]
Line_2 $$ public void testAggregationsBinarySameContentType() throws Exception -->Line_3 $$ TermsBuilder termsBuilder = AggregationBuilders.terms("terms").field(STRING_FIELD_NAME)[ CD ]
Line_16 $$ for (int i = 0; i < 5; i++) -->Line_18 $$ assertThat(bucket, notNullValue())[ CD ]
Line_12 $$ Terms terms = response.getAggregations().get("terms")-->Line_15 $$ assertThat(terms.getBuckets().size(), equalTo(5))[ FD ]
Line_3 $$ TermsBuilder termsBuilder = AggregationBuilders.terms("terms").field(STRING_FIELD_NAME)-->Line_10 $$ SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(termsBuilder).execute().actionGet()[ FD ]
Line_2 $$ public void testAggregationsBinarySameContentType() throws Exception -->Line_12 $$ Terms terms = response.getAggregations().get("terms")[ CD ]
Line_5 $$ XContentBuilder subTermContentBuilder = XContentFactory.contentBuilder(Requests.CONTENT_TYPE)-->Line_8 $$ subTermContentBuilder.endObject()[ FD ]
Line_2 $$ public void testAggregationsBinarySameContentType() throws Exception -->Line_7 $$ subTerm.toXContent(subTermContentBuilder, ToXContent.EMPTY_PARAMS)[ CD ]
Line_5 $$ XContentBuilder subTermContentBuilder = XContentFactory.contentBuilder(Requests.CONTENT_TYPE)-->Line_9 $$ termsBuilder.subAggregation(subTermContentBuilder)[ FD ]
Line_2 $$ public void testAggregationsBinarySameContentType() throws Exception -->Line_16 $$ for (int i = 0; i < 5; i++) [ CD ]
Line_16 $$ for (int i = 0; i < 5; i++) -->Line_21 $$ Aggregations subAggs = bucket.getAggregations()[ CD ]
Line_26 $$ List<Bucket> subTermsBuckets = subTerms.getBuckets()-->Line_30 $$ assertThat(subTermsBuckets.get(0).getDocCount(), equalTo(1l))[ FD ]
Line_16 $$ for (int i = 0; i < 5; i++) -->Line_27 $$ assertThat(subTermsBuckets, notNullValue())[ CD ]
Line_16 $$ for (int i = 0; i < 5; i++) -->Line_20 $$ assertThat(bucket.getDocCount(), equalTo(1l))[ CD ]
Line_17 $$ Terms.Bucket bucket = terms.getBucketByKey("val" + i)-->Line_21 $$ Aggregations subAggs = bucket.getAggregations()[ FD ]
Line_16 $$ for (int i = 0; i < 5; i++) -->Line_29 $$ assertThat(((Number) subTermsBuckets.get(0).getKey()).intValue(), equalTo(i))[ FD ]
Line_16 $$ for (int i = 0; i < 5; i++) -->Line_25 $$ assertThat(subTerms, notNullValue())[ CD ]
Line_3 $$ TermsBuilder termsBuilder = AggregationBuilders.terms("terms").field(STRING_FIELD_NAME)-->Line_9 $$ termsBuilder.subAggregation(subTermContentBuilder)[ FD ]
Line_16 $$ for (int i = 0; i < 5; i++) -->Line_28 $$ assertThat(subTermsBuckets.size(), equalTo(1))[ CD ]
Line_10 $$ SearchResponse response = client().prepareSearch("idx").setTypes("type").addAggregation(termsBuilder).execute().actionGet()-->Line_12 $$ Terms terms = response.getAggregations().get("terms")[ FD ]
Line_26 $$ List<Bucket> subTermsBuckets = subTerms.getBuckets()-->Line_27 $$ assertThat(subTermsBuckets, notNullValue())[ FD ]
Line_17 $$ Terms.Bucket bucket = terms.getBucketByKey("val" + i)-->Line_20 $$ assertThat(bucket.getDocCount(), equalTo(1l))[ FD ]
