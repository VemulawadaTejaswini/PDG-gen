Line_8 $$ if (actualValue instanceof List) -->Line_9 $$ assertThat(errorMessage(), ((List) actualValue).size(), equalTo(length))[ CD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_4 $$ assertThat("expected value of [" + getField() + "] is not numeric (got [" + expectedValue.getClass() + "]", expectedValue, instanceOf(Number.class))[ CD ]
Line_6 $$ if (actualValue instanceof String) -->Line_7 $$ assertThat(errorMessage(), ((String) actualValue).length(), equalTo(length))[ CD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_8 $$ if (actualValue instanceof List) [ FD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_3 $$ logger.trace("assert that [[ FD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_5 $$ int length = ((Number) expectedValue).intValue()[ CD ]
Line_5 $$ int length = ((Number) expectedValue).intValue()-->Line_11 $$ assertThat(errorMessage(), ((Map) actualValue).keySet().size(), equalTo(length))[ FD ]
Line_6 $$ if (actualValue instanceof String) -->Line_8 $$ if (actualValue instanceof List) [ CD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_3 $$ logger.trace("assert that [[ CD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_13 $$ throw new UnsupportedOperationException("value is of unsupported type [" + safeClass(actualValue) + "]")[ FD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_4 $$ assertThat("expected value of [" + getField() + "] is not numeric (got [" + expectedValue.getClass() + "]", expectedValue, instanceOf(Number.class))[ FD ]
Line_10 $$ if (actualValue instanceof Map) -->Line_11 $$ assertThat(errorMessage(), ((Map) actualValue).keySet().size(), equalTo(length))[ CD ]
Line_8 $$ if (actualValue instanceof List) -->Line_10 $$ if (actualValue instanceof Map) [ CD ]
Line_5 $$ int length = ((Number) expectedValue).intValue()-->Line_7 $$ assertThat(errorMessage(), ((String) actualValue).length(), equalTo(length))[ FD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_6 $$ if (actualValue instanceof String) [ CD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_10 $$ if (actualValue instanceof Map) [ FD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_6 $$ if (actualValue instanceof String) [ FD ]
Line_5 $$ int length = ((Number) expectedValue).intValue()-->Line_9 $$ assertThat(errorMessage(), ((List) actualValue).size(), equalTo(length))[ FD ]
