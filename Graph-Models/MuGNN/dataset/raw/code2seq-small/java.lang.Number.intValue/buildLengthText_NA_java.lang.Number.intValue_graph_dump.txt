Line_3 $$ max = ParenthesesUtils.stripParentheses(max)-->Line_4 $$ if (max == null) [ FD ]
Line_13 $$ final Number minNumber = (Number) minConstant-->Line_18 $$ minValue = minNumber.intValue()[ FD ]
Line_3 $$ max = ParenthesesUtils.stripParentheses(max)-->Line_24 $$ final Object maxConstant = ExpressionUtils.computeConstantExpression(max)[ FD ]
Line_14 $$ final int minValue-->Line_18 $$ minValue = minNumber.intValue()[ FD ]
Line_2 $$ private static String buildLengthText(PsiExpression max, PsiExpression min, boolean plusOne) -->Line_4 $$ if (max == null) [ CD ]
Line_16 $$ minValue = minNumber.intValue() - 1-->Line_18 $$ minValue = minNumber.intValue()[ FD ]
Line_3 $$ max = ParenthesesUtils.stripParentheses(max)-->Line_9 $$ return buildExpressionText(max, plusOne, false)[ FD ]
Line_15 $$ if (plusOne) -->Line_16 $$ minValue = minNumber.intValue() - 1[ CD ]
Line_2 $$ private static String buildLengthText(PsiExpression max, PsiExpression min, boolean plusOne) -->Line_23 $$ if (max instanceof PsiLiteralExpression) [ FD ]
Line_12 $$ if (minConstant instanceof Number) -->Line_31 $$ if (minValue > 0) [ CD ]
Line_4 $$ if (max == null) -->Line_5 $$ return null[ CD ]
Line_31 $$ if (minValue > 0) -->Line_32 $$ return maxText + '-' + minValue[ CD ]
Line_38 $$ final String minText-->Line_42 $$ minText = min.getText()[ FD ]
Line_12 $$ if (minConstant instanceof Number) -->Line_15 $$ if (plusOne) [ CD ]
Line_2 $$ private static String buildLengthText(PsiExpression max, PsiExpression min, boolean plusOne) -->Line_3 $$ max = ParenthesesUtils.stripParentheses(max)[ CD ]
Line_31 $$ if (minValue > 0) -->Line_34 $$ return maxText + '+' + -minValue[ CD ]
Line_39 $$ if (precedence >= ParenthesesUtils.ADDITIVE_PRECEDENCE) -->Line_40 $$ minText = '(' + min.getText() + ')'[ CD ]
Line_2 $$ private static String buildLengthText(PsiExpression max, PsiExpression min, boolean plusOne) -->Line_9 $$ return buildExpressionText(max, plusOne, false)[ FD ]
Line_2 $$ private static String buildLengthText(PsiExpression max, PsiExpression min, boolean plusOne) -->Line_24 $$ final Object maxConstant = ExpressionUtils.computeConstantExpression(max)[ FD ]
Line_25 $$ if (maxConstant instanceof Number) -->Line_26 $$ final Number number = (Number) maxConstant[ CD ]
Line_2 $$ private static String buildLengthText(PsiExpression max, PsiExpression min, boolean plusOne) -->Line_45 $$ return maxText + '-' + minText[ CD ]
Line_2 $$ private static String buildLengthText(PsiExpression max, PsiExpression min, boolean plusOne) -->Line_39 $$ if (precedence >= ParenthesesUtils.ADDITIVE_PRECEDENCE) [ CD ]
Line_8 $$ if (min == null) -->Line_9 $$ return buildExpressionText(max, plusOne, false)[ CD ]
Line_3 $$ max = ParenthesesUtils.stripParentheses(max)-->Line_30 $$ final String maxText = buildExpressionText(max, false, false)[ FD ]
Line_2 $$ private static String buildLengthText(PsiExpression max, PsiExpression min, boolean plusOne) -->Line_8 $$ if (min == null) [ FD ]
Line_23 $$ if (max instanceof PsiLiteralExpression) -->Line_25 $$ if (maxConstant instanceof Number) [ CD ]
Line_2 $$ private static String buildLengthText(PsiExpression max, PsiExpression min, boolean plusOne) -->Line_8 $$ if (min == null) [ CD ]
Line_2 $$ private static String buildLengthText(PsiExpression max, PsiExpression min, boolean plusOne) -->Line_38 $$ final String minText[ CD ]
Line_25 $$ if (maxConstant instanceof Number) -->Line_27 $$ return String.valueOf(number.intValue() - minValue)[ CD ]
Line_2 $$ private static String buildLengthText(PsiExpression max, PsiExpression min, boolean plusOne) -->Line_30 $$ final String maxText = buildExpressionText(max, false, false)[ FD ]
Line_16 $$ minValue = minNumber.intValue() - 1-->Line_34 $$ return maxText + '+' + -minValue[ FD ]
Line_38 $$ final String minText-->Line_40 $$ minText = '(' + min.getText() + ')'[ FD ]
Line_16 $$ minValue = minNumber.intValue() - 1-->Line_20 $$ if (minValue == 0) [ FD ]
Line_12 $$ if (minConstant instanceof Number) -->Line_30 $$ final String maxText = buildExpressionText(max, false, false)[ CD ]
Line_2 $$ private static String buildLengthText(PsiExpression max, PsiExpression min, boolean plusOne) -->Line_40 $$ minText = '(' + min.getText() + ')'[ FD ]
Line_16 $$ minValue = minNumber.intValue() - 1-->Line_31 $$ if (minValue > 0) [ FD ]
Line_2 $$ private static String buildLengthText(PsiExpression max, PsiExpression min, boolean plusOne) -->Line_44 $$ final String maxText = buildExpressionText(max, plusOne, false)[ FD ]
Line_39 $$ if (precedence >= ParenthesesUtils.ADDITIVE_PRECEDENCE) -->Line_42 $$ minText = min.getText()[ CD ]
Line_26 $$ final Number number = (Number) maxConstant-->Line_27 $$ return String.valueOf(number.intValue() - minValue)[ FD ]
Line_2 $$ private static String buildLengthText(PsiExpression max, PsiExpression min, boolean plusOne) -->Line_37 $$ final int precedence = ParenthesesUtils.getPrecedence(min)[ CD ]
Line_7 $$ min = ParenthesesUtils.stripParentheses(min)-->Line_42 $$ minText = min.getText()[ FD ]
Line_23 $$ if (max instanceof PsiLiteralExpression) -->Line_24 $$ final Object maxConstant = ExpressionUtils.computeConstantExpression(max)[ CD ]
Line_7 $$ min = ParenthesesUtils.stripParentheses(min)-->Line_40 $$ minText = '(' + min.getText() + ')'[ FD ]
Line_3 $$ max = ParenthesesUtils.stripParentheses(max)-->Line_21 $$ return buildExpressionText(max, false, false)[ FD ]
Line_37 $$ final int precedence = ParenthesesUtils.getPrecedence(min)-->Line_39 $$ if (precedence >= ParenthesesUtils.ADDITIVE_PRECEDENCE) [ FD ]
Line_7 $$ min = ParenthesesUtils.stripParentheses(min)-->Line_11 $$ final Object minConstant = ExpressionUtils.computeConstantExpression(min)[ FD ]
Line_14 $$ final int minValue-->Line_31 $$ if (minValue > 0) [ FD ]
Line_12 $$ if (minConstant instanceof Number) -->Line_20 $$ if (minValue == 0) [ CD ]
Line_3 $$ max = ParenthesesUtils.stripParentheses(max)-->Line_44 $$ final String maxText = buildExpressionText(max, plusOne, false)[ FD ]
Line_11 $$ final Object minConstant = ExpressionUtils.computeConstantExpression(min)-->Line_12 $$ if (minConstant instanceof Number) [ FD ]
Line_12 $$ if (minConstant instanceof Number) -->Line_14 $$ final int minValue[ CD ]
Line_2 $$ private static String buildLengthText(PsiExpression max, PsiExpression min, boolean plusOne) -->Line_21 $$ return buildExpressionText(max, false, false)[ FD ]
Line_15 $$ if (plusOne) -->Line_18 $$ minValue = minNumber.intValue()[ CD ]
Line_14 $$ final int minValue-->Line_20 $$ if (minValue == 0) [ FD ]
Line_3 $$ max = ParenthesesUtils.stripParentheses(max)-->Line_23 $$ if (max instanceof PsiLiteralExpression) [ FD ]
Line_24 $$ final Object maxConstant = ExpressionUtils.computeConstantExpression(max)-->Line_25 $$ if (maxConstant instanceof Number) [ FD ]
Line_18 $$ minValue = minNumber.intValue()-->Line_34 $$ return maxText + '+' + -minValue[ FD ]
Line_2 $$ private static String buildLengthText(PsiExpression max, PsiExpression min, boolean plusOne) -->Line_7 $$ min = ParenthesesUtils.stripParentheses(min)[ FD ]
Line_2 $$ private static String buildLengthText(PsiExpression max, PsiExpression min, boolean plusOne) -->Line_42 $$ minText = min.getText()[ FD ]
Line_14 $$ final int minValue-->Line_16 $$ minValue = minNumber.intValue() - 1[ FD ]
Line_14 $$ final int minValue-->Line_34 $$ return maxText + '+' + -minValue[ FD ]
Line_7 $$ min = ParenthesesUtils.stripParentheses(min)-->Line_8 $$ if (min == null) [ FD ]
Line_2 $$ private static String buildLengthText(PsiExpression max, PsiExpression min, boolean plusOne) -->Line_37 $$ final int precedence = ParenthesesUtils.getPrecedence(min)[ FD ]
Line_2 $$ private static String buildLengthText(PsiExpression max, PsiExpression min, boolean plusOne) -->Line_3 $$ max = ParenthesesUtils.stripParentheses(max)[ FD ]
Line_2 $$ private static String buildLengthText(PsiExpression max, PsiExpression min, boolean plusOne) -->Line_11 $$ final Object minConstant = ExpressionUtils.computeConstantExpression(min)[ CD ]
Line_2 $$ private static String buildLengthText(PsiExpression max, PsiExpression min, boolean plusOne) -->Line_11 $$ final Object minConstant = ExpressionUtils.computeConstantExpression(min)[ FD ]
Line_40 $$ minText = '(' + min.getText() + ')'-->Line_42 $$ minText = min.getText()[ FD ]
Line_2 $$ private static String buildLengthText(PsiExpression max, PsiExpression min, boolean plusOne) -->Line_4 $$ if (max == null) [ FD ]
Line_2 $$ private static String buildLengthText(PsiExpression max, PsiExpression min, boolean plusOne) -->Line_44 $$ final String maxText = buildExpressionText(max, plusOne, false)[ CD ]
Line_18 $$ minValue = minNumber.intValue()-->Line_20 $$ if (minValue == 0) [ FD ]
Line_18 $$ minValue = minNumber.intValue()-->Line_31 $$ if (minValue > 0) [ FD ]
Line_20 $$ if (minValue == 0) -->Line_21 $$ return buildExpressionText(max, false, false)[ CD ]
Line_12 $$ if (minConstant instanceof Number) -->Line_13 $$ final Number minNumber = (Number) minConstant[ CD ]
Line_12 $$ if (minConstant instanceof Number) -->Line_23 $$ if (max instanceof PsiLiteralExpression) [ CD ]
Line_13 $$ final Number minNumber = (Number) minConstant-->Line_16 $$ minValue = minNumber.intValue() - 1[ FD ]
Line_2 $$ private static String buildLengthText(PsiExpression max, PsiExpression min, boolean plusOne) -->Line_12 $$ if (minConstant instanceof Number) [ CD ]
Line_2 $$ private static String buildLengthText(PsiExpression max, PsiExpression min, boolean plusOne) -->Line_7 $$ min = ParenthesesUtils.stripParentheses(min)[ CD ]
Line_7 $$ min = ParenthesesUtils.stripParentheses(min)-->Line_37 $$ final int precedence = ParenthesesUtils.getPrecedence(min)[ FD ]
