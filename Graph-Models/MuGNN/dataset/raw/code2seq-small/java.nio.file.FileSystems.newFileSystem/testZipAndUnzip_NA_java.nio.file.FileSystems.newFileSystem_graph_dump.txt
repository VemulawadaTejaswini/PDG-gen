Line_12 $$ try (FileSystem fileSystem = FileSystems.newFileSystem(zipFilePath, null)) -->Line_13 $$ Files.createDirectory(fileSystem.getPath("EmptyFolder"))[ FD ]
Line_10 $$ String message = logRecord.getMessage()-->Line_20 $$ Assert.assertTrue(message.startsWith("Unzipped"))[ FD ]
Line_9 $$ LogRecord logRecord = logRecords.remove(0)-->Line_18 $$ logRecord = logRecords.remove(0)[ FD ]
Line_3 $$ String folderName = "TestFolder"-->Line_24 $$ Path folderPath = FileServerTestUtil.createFolderWithFiles(Paths.get(folderName))[ FD ]
Line_6 $$ Path zipFilePath = FileServerTestUtil.registerForCleanUp(FileHelperUtil.zip(folderPath, FileHelperUtil.TEMP_DIR_PATH, CompressionLevel.BEST_COMPRESSION))-->Line_12 $$ try (FileSystem fileSystem = FileSystems.newFileSystem(zipFilePath, null)) [ FD ]
Line_12 $$ try (FileSystem fileSystem = FileSystems.newFileSystem(zipFilePath, null)) -->Line_30 $$ FileServerTestUtil.assertFileEquals(folderPath, fileSystem.getPath("/"))[ FD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_18 $$ logRecord = logRecords.remove(0)[ FD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_17 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_2 $$ public void testZipAndUnzip() throws IOException -->Line_3 $$ String folderName = "TestFolder"[ CD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_8 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_5 $$ Path folderPath = FileServerTestUtil.createFolderWithFiles(Paths.get(folderName))-->Line_21 $$ FileServerTestUtil.assertFileEquals(folderPath, unzipFolderPath)[ FD ]
Line_5 $$ Path folderPath = FileServerTestUtil.createFolderWithFiles(Paths.get(folderName))-->Line_6 $$ Path zipFilePath = FileServerTestUtil.registerForCleanUp(FileHelperUtil.zip(folderPath, FileHelperUtil.TEMP_DIR_PATH, CompressionLevel.BEST_COMPRESSION))[ FD ]
Line_9 $$ LogRecord logRecord = logRecords.remove(0)-->Line_19 $$ message = logRecord.getMessage()[ FD ]
Line_16 $$ Path unzipFolderPath = FileServerTestUtil.registerForCleanUp(FileHelperUtil.unzip(zipFilePath, FileHelperUtil.TEMP_DIR_PATH))-->Line_21 $$ FileServerTestUtil.assertFileEquals(folderPath, unzipFolderPath)[ FD ]
Line_12 $$ try (FileSystem fileSystem = FileSystems.newFileSystem(zipFilePath, null)) -->Line_14 $$ FileServerTestUtil.assertFileEquals(folderPath, fileSystem.getPath("/"))[ FD ]
Line_3 $$ String folderName = "TestFolder"-->Line_5 $$ Path folderPath = FileServerTestUtil.createFolderWithFiles(Paths.get(folderName))[ FD ]
Line_9 $$ LogRecord logRecord = logRecords.remove(0)-->Line_10 $$ String message = logRecord.getMessage()[ FD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_27 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_4 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(FileHelperUtil.class.getName(), Level.FINEST)) -->Line_26 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_5 $$ Path folderPath = FileServerTestUtil.createFolderWithFiles(Paths.get(folderName))-->Line_34 $$ FileServerTestUtil.assertFileEquals(folderPath, unzipFolderPath)[ FD ]
Line_10 $$ String message = logRecord.getMessage()-->Line_19 $$ message = logRecord.getMessage()[ FD ]
Line_5 $$ Path folderPath = FileServerTestUtil.createFolderWithFiles(Paths.get(folderName))-->Line_25 $$ Path zipFilePath = FileServerTestUtil.registerForCleanUp(FileHelperUtil.zip(folderPath, FileHelperUtil.TEMP_DIR_PATH, CompressionLevel.BEST_COMPRESSION))[ FD ]
Line_12 $$ try (FileSystem fileSystem = FileSystems.newFileSystem(zipFilePath, null)) -->Line_29 $$ Files.createDirectory(fileSystem.getPath("EmptyFolder"))[ FD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_9 $$ LogRecord logRecord = logRecords.remove(0)[ FD ]
Line_5 $$ Path folderPath = FileServerTestUtil.createFolderWithFiles(Paths.get(folderName))-->Line_14 $$ FileServerTestUtil.assertFileEquals(folderPath, fileSystem.getPath("/"))[ FD ]
Line_6 $$ Path zipFilePath = FileServerTestUtil.registerForCleanUp(FileHelperUtil.zip(folderPath, FileHelperUtil.TEMP_DIR_PATH, CompressionLevel.BEST_COMPRESSION))-->Line_28 $$ try (FileSystem fileSystem = FileSystems.newFileSystem(zipFilePath, null)) [ FD ]
Line_10 $$ String message = logRecord.getMessage()-->Line_11 $$ Assert.assertTrue(message.startsWith("Zipped"))[ FD ]
Line_6 $$ Path zipFilePath = FileServerTestUtil.registerForCleanUp(FileHelperUtil.zip(folderPath, FileHelperUtil.TEMP_DIR_PATH, CompressionLevel.BEST_COMPRESSION))-->Line_32 $$ Path unzipFolderPath = FileServerTestUtil.registerForCleanUp(FileHelperUtil.unzip(zipFilePath, FileHelperUtil.TEMP_DIR_PATH))[ FD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_33 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_16 $$ Path unzipFolderPath = FileServerTestUtil.registerForCleanUp(FileHelperUtil.unzip(zipFilePath, FileHelperUtil.TEMP_DIR_PATH))-->Line_34 $$ FileServerTestUtil.assertFileEquals(folderPath, unzipFolderPath)[ FD ]
Line_19 $$ message = logRecord.getMessage()-->Line_20 $$ Assert.assertTrue(message.startsWith("Unzipped"))[ FD ]
Line_18 $$ logRecord = logRecords.remove(0)-->Line_19 $$ message = logRecord.getMessage()[ FD ]
Line_5 $$ Path folderPath = FileServerTestUtil.createFolderWithFiles(Paths.get(folderName))-->Line_30 $$ FileServerTestUtil.assertFileEquals(folderPath, fileSystem.getPath("/"))[ FD ]
Line_6 $$ Path zipFilePath = FileServerTestUtil.registerForCleanUp(FileHelperUtil.zip(folderPath, FileHelperUtil.TEMP_DIR_PATH, CompressionLevel.BEST_COMPRESSION))-->Line_16 $$ Path unzipFolderPath = FileServerTestUtil.registerForCleanUp(FileHelperUtil.unzip(zipFilePath, FileHelperUtil.TEMP_DIR_PATH))[ FD ]
Line_4 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(FileHelperUtil.class.getName(), Level.FINEST)) -->Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
