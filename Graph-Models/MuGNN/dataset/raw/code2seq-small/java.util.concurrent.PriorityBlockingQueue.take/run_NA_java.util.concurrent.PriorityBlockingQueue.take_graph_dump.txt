Line_5 $$ final PrioritizedSplitRunner split-->Line_38 $$ pendingSplits.put(split)[ FD ]
Line_34 $$ blocked.addListener(new Runnable() -->Line_38 $$ pendingSplits.put(split)[ CD ]
Line_4 $$ while (!closed && !Thread.currentThread().isInterrupted()) -->Line_5 $$ final PrioritizedSplitRunner split[ CD ]
Line_19 $$ ListenableFuture<?> blocked-->Line_33 $$ blockedSplits.put(split, blocked)[ FD ]
Line_7 $$ split = pendingSplits.take()-->Line_31 $$ pendingSplits.put(split)[ FD ]
Line_7 $$ split = pendingSplits.take()-->Line_9 $$ pendingSplits.put(split)[ FD ]
Line_7 $$ split = pendingSplits.take()-->Line_27 $$ log.debug("%s is finished", split.getInfo())[ FD ]
Line_21 $$ blocked = split.process()-->Line_30 $$ if (blocked.isDone()) [ FD ]
Line_5 $$ final PrioritizedSplitRunner split-->Line_36 $$ blockedSplits.remove(split)[ FD ]
Line_5 $$ final PrioritizedSplitRunner split-->Line_21 $$ blocked = split.process()[ FD ]
Line_21 $$ blocked = split.process()-->Line_33 $$ blockedSplits.put(split, blocked)[ FD ]
Line_44 $$ if (t instanceof PrestoException) -->Line_45 $$ PrestoException e = (PrestoException) t[ CD ]
Line_7 $$ split = pendingSplits.take()-->Line_48 $$ log.error(t, "Error processing %s", split.getInfo())[ FD ]
Line_7 $$ split = pendingSplits.take()-->Line_16 $$ try (SetThreadName splitName = new SetThreadName(split.getTaskHandle().getTaskId() + "-" + split.getSplitId())) [ FD ]
Line_44 $$ if (t instanceof PrestoException) -->Line_46 $$ log.error("Error processing %s: %s: %s", split.getInfo(), e.getErrorCode().getName(), e.getMessage())[ CD ]
Line_30 $$ if (blocked.isDone()) -->Line_31 $$ pendingSplits.put(split)[ CD ]
Line_7 $$ split = pendingSplits.take()-->Line_28 $$ splitFinished(split)[ FD ]
Line_26 $$ if (finished) -->Line_28 $$ splitFinished(split)[ CD ]
Line_5 $$ final PrioritizedSplitRunner split-->Line_9 $$ pendingSplits.put(split)[ FD ]
Line_5 $$ final PrioritizedSplitRunner split-->Line_37 $$ split.updatePriorityLevel()[ FD ]
Line_5 $$ final PrioritizedSplitRunner split-->Line_46 $$ log.error("Error processing %s: %s: %s", split.getInfo(), e.getErrorCode().getName(), e.getMessage())[ FD ]
Line_30 $$ if (blocked.isDone()) -->Line_34 $$ blocked.addListener(new Runnable() [ CD ]
Line_5 $$ final PrioritizedSplitRunner split-->Line_24 $$ runningSplits.remove(split)[ FD ]
Line_7 $$ split = pendingSplits.take()-->Line_38 $$ pendingSplits.put(split)[ FD ]
Line_44 $$ if (t instanceof PrestoException) -->Line_48 $$ log.error(t, "Error processing %s", split.getInfo())[ CD ]
Line_7 $$ split = pendingSplits.take()-->Line_50 $$ splitFinished(split)[ FD ]
Line_5 $$ final PrioritizedSplitRunner split-->Line_27 $$ log.debug("%s is finished", split.getInfo())[ FD ]
Line_19 $$ ListenableFuture<?> blocked-->Line_30 $$ if (blocked.isDone()) [ FD ]
Line_5 $$ final PrioritizedSplitRunner split-->Line_8 $$ if (split.updatePriorityLevel()) [ FD ]
Line_5 $$ final PrioritizedSplitRunner split-->Line_17 $$ runningSplits.add(split)[ FD ]
Line_5 $$ final PrioritizedSplitRunner split-->Line_16 $$ try (SetThreadName splitName = new SetThreadName(split.getTaskHandle().getTaskId() + "-" + split.getSplitId())) [ FD ]
Line_5 $$ final PrioritizedSplitRunner split-->Line_31 $$ pendingSplits.put(split)[ FD ]
Line_26 $$ if (finished) -->Line_30 $$ if (blocked.isDone()) [ CD ]
Line_7 $$ split = pendingSplits.take()-->Line_46 $$ log.error("Error processing %s: %s: %s", split.getInfo(), e.getErrorCode().getName(), e.getMessage())[ FD ]
Line_45 $$ PrestoException e = (PrestoException) t-->Line_46 $$ log.error("Error processing %s: %s: %s", split.getInfo(), e.getErrorCode().getName(), e.getMessage())[ FD ]
Line_7 $$ split = pendingSplits.take()-->Line_22 $$ finished = split.isFinished()[ FD ]
Line_21 $$ blocked = split.process()-->Line_34 $$ blocked.addListener(new Runnable() [ FD ]
Line_7 $$ split = pendingSplits.take()-->Line_8 $$ if (split.updatePriorityLevel()) [ FD ]
Line_7 $$ split = pendingSplits.take()-->Line_33 $$ blockedSplits.put(split, blocked)[ FD ]
Line_19 $$ ListenableFuture<?> blocked-->Line_21 $$ blocked = split.process()[ FD ]
Line_34 $$ blocked.addListener(new Runnable() -->Line_37 $$ split.updatePriorityLevel()[ CD ]
Line_26 $$ if (finished) -->Line_27 $$ log.debug("%s is finished", split.getInfo())[ CD ]
Line_18 $$ boolean finished-->Line_22 $$ finished = split.isFinished()[ FD ]
Line_8 $$ if (split.updatePriorityLevel()) -->Line_9 $$ pendingSplits.put(split)[ CD ]
Line_5 $$ final PrioritizedSplitRunner split-->Line_28 $$ splitFinished(split)[ FD ]
Line_34 $$ blocked.addListener(new Runnable() -->Line_36 $$ blockedSplits.remove(split)[ CD ]
Line_19 $$ ListenableFuture<?> blocked-->Line_34 $$ blocked.addListener(new Runnable() [ FD ]
Line_54 $$ if (!closed) -->Line_55 $$ addRunnerThread()[ CD ]
Line_5 $$ final PrioritizedSplitRunner split-->Line_50 $$ splitFinished(split)[ FD ]
Line_7 $$ split = pendingSplits.take()-->Line_36 $$ blockedSplits.remove(split)[ FD ]
Line_5 $$ final PrioritizedSplitRunner split-->Line_7 $$ split = pendingSplits.take()[ FD ]
Line_7 $$ split = pendingSplits.take()-->Line_17 $$ runningSplits.add(split)[ FD ]
Line_7 $$ split = pendingSplits.take()-->Line_21 $$ blocked = split.process()[ FD ]
Line_5 $$ final PrioritizedSplitRunner split-->Line_22 $$ finished = split.isFinished()[ FD ]
Line_30 $$ if (blocked.isDone()) -->Line_33 $$ blockedSplits.put(split, blocked)[ CD ]
Line_7 $$ split = pendingSplits.take()-->Line_24 $$ runningSplits.remove(split)[ FD ]
Line_7 $$ split = pendingSplits.take()-->Line_37 $$ split.updatePriorityLevel()[ FD ]
Line_5 $$ final PrioritizedSplitRunner split-->Line_33 $$ blockedSplits.put(split, blocked)[ FD ]
Line_5 $$ final PrioritizedSplitRunner split-->Line_48 $$ log.error(t, "Error processing %s", split.getInfo())[ FD ]
