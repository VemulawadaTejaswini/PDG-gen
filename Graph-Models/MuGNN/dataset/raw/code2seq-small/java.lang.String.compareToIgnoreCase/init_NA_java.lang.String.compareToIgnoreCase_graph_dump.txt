Line_2 $$ protected void init() -->Line_4 $$ java.util.List<Macro> macros = new ArrayList<Macro>(MacroManager.getInstance().getMacros())[ CD ]
Line_5 $$ Collections.sort(macros, new Comparator<Macro>() -->Line_12 $$ if (!StringUtil.startsWithChar(name2, '/')) [ CD ]
Line_8 $$ String name2 = macro2.getName()-->Line_13 $$ name2 = ZERO + name2[ FD ]
Line_23 $$ if (myMacrosModel.size() > 0) -->Line_24 $$ myMacrosList.setSelectedIndex(0)[ CD ]
Line_2 $$ protected void init() -->Line_5 $$ Collections.sort(macros, new Comparator<Macro>() [ CD ]
Line_7 $$ String name1 = macro1.getName()-->Line_9 $$ if (!StringUtil.startsWithChar(name1, '/')) [ FD ]
Line_5 $$ Collections.sort(macros, new Comparator<Macro>() -->Line_9 $$ if (!StringUtil.startsWithChar(name1, '/')) [ CD ]
Line_2 $$ protected void init() -->Line_3 $$ super.init()[ CD ]
Line_2 $$ protected void init() -->Line_23 $$ if (myMacrosModel.size() > 0) [ CD ]
Line_5 $$ Collections.sort(macros, new Comparator<Macro>() -->Line_7 $$ String name1 = macro1.getName()[ FD ]
Line_5 $$ Collections.sort(macros, new Comparator<Macro>() -->Line_15 $$ return name1.compareToIgnoreCase(name2)[ CD ]
Line_5 $$ Collections.sort(macros, new Comparator<Macro>() -->Line_8 $$ String name2 = macro2.getName()[ CD ]
Line_4 $$ java.util.List<Macro> macros = new ArrayList<Macro>(MacroManager.getInstance().getMacros())-->Line_5 $$ Collections.sort(macros, new Comparator<Macro>() [ FD ]
Line_8 $$ String name2 = macro2.getName()-->Line_15 $$ return name1.compareToIgnoreCase(name2)[ FD ]
Line_9 $$ if (!StringUtil.startsWithChar(name1, '/')) -->Line_10 $$ name1 = ZERO + name1[ CD ]
Line_5 $$ Collections.sort(macros, new Comparator<Macro>() -->Line_7 $$ String name1 = macro1.getName()[ CD ]
Line_2 $$ protected void init() -->Line_22 $$ addListeners()[ CD ]
Line_8 $$ String name2 = macro2.getName()-->Line_12 $$ if (!StringUtil.startsWithChar(name2, '/')) [ FD ]
Line_23 $$ if (myMacrosModel.size() > 0) -->Line_26 $$ setOKActionEnabled(false)[ CD ]
Line_13 $$ name2 = ZERO + name2-->Line_15 $$ return name1.compareToIgnoreCase(name2)[ FD ]
Line_7 $$ String name1 = macro1.getName()-->Line_10 $$ name1 = ZERO + name1[ FD ]
Line_10 $$ name1 = ZERO + name1-->Line_15 $$ return name1.compareToIgnoreCase(name2)[ FD ]
Line_12 $$ if (!StringUtil.startsWithChar(name2, '/')) -->Line_13 $$ name2 = ZERO + name2[ CD ]
Line_5 $$ Collections.sort(macros, new Comparator<Macro>() -->Line_8 $$ String name2 = macro2.getName()[ FD ]
Line_7 $$ String name1 = macro1.getName()-->Line_15 $$ return name1.compareToIgnoreCase(name2)[ FD ]
