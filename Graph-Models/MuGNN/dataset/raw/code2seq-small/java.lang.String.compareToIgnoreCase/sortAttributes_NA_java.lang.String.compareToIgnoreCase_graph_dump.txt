Line_10 $$ s = s.substring(y + 1)-->Line_15 $$ x = s.indexOf(CharPool.EQUAL)[ FD ]
Line_3 $$ String s = line-->Line_19 $$ String attribute = s.substring(0, x)[ FD ]
Line_57 $$ if (delimeter == CharPool.APOSTROPHE) -->Line_58 $$ if (!value.contains(StringPool.QUOTE)) [ CD ]
Line_35 $$ String value = null-->Line_74 $$ String newLine = sortHTMLAttributes(line, value, currentAttributeAndValue)[ FD ]
Line_14 $$ for (x = 0; ; ) -->Line_79 $$ if (!newLine.equals(line)) [ CD ]
Line_4 $$ int x = s.indexOf(CharPool.LESS_THAN)-->Line_93 $$ if (x == -1) [ FD ]
Line_100 $$ s = StringUtil.trimLeading(s)-->Line_15 $$ x = s.indexOf(CharPool.EQUAL)[ FD ]
Line_27 $$ char delimeter = s.charAt(0)-->Line_70 $$ sb.append(delimeter)[ FD ]
Line_85 $$ line = StringUtil.replaceLast(line, currentAttributeAndValue, previousAttributeAndValue)-->Line_59 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + value + StringPool.QUOTE)[ FD ]
Line_35 $$ String value = null-->Line_51 $$ int lessThanCount = StringUtil.count(value, StringPool.LESS_THAN)[ FD ]
Line_2 $$ protected String sortAttributes(String fileName, String line, int lineCount, boolean allowApostropheDelimeter) throws Exception -->Line_75 $$ if (!newLine.equals(line)) [ FD ]
Line_42 $$ value = s.substring(0, y)-->Line_51 $$ int lessThanCount = StringUtil.count(value, StringPool.LESS_THAN)[ FD ]
Line_12 $$ String previousAttributeAndValue = null-->Line_85 $$ line = StringUtil.replaceLast(line, currentAttributeAndValue, previousAttributeAndValue)[ FD ]
Line_84 $$ line = StringUtil.replaceFirst(line, previousAttributeAndValue, currentAttributeAndValue)-->Line_74 $$ String newLine = sortHTMLAttributes(line, value, currentAttributeAndValue)[ FD ]
Line_14 $$ for (x = 0; ; ) -->Line_75 $$ if (!newLine.equals(line)) [ CD ]
Line_26 $$ s = s.substring(x + 1)-->Line_42 $$ value = s.substring(0, y)[ FD ]
Line_14 $$ for (x = 0; ; ) -->Line_27 $$ char delimeter = s.charAt(0)[ CD ]
Line_37 $$ while (true) -->Line_38 $$ y = s.indexOf(delimeter, y + 1)[ CD ]
Line_35 $$ String value = null-->Line_45 $$ int startJavaCodeSignCount = StringUtil.count(value, "<%")[ FD ]
Line_3 $$ String s = line-->Line_91 $$ if (s.startsWith(StringPool.GREATER_THAN)) [ FD ]
Line_6 $$ if ((x == -1) || (x >= y)) -->Line_7 $$ return line[ CD ]
Line_26 $$ s = s.substring(x + 1)-->Line_34 $$ s = s.substring(1)[ FD ]
Line_2 $$ protected String sortAttributes(String fileName, String line, int lineCount, boolean allowApostropheDelimeter) throws Exception -->Line_76 $$ return sortAttributes(fileName, newLine, lineCount, allowApostropheDelimeter)[ FD ]
Line_26 $$ s = s.substring(x + 1)-->Line_91 $$ if (s.startsWith(StringPool.GREATER_THAN)) [ FD ]
Line_85 $$ line = StringUtil.replaceLast(line, currentAttributeAndValue, previousAttributeAndValue)-->Line_86 $$ return sortAttributes(fileName, line, lineCount, allowApostropheDelimeter)[ FD ]
Line_84 $$ line = StringUtil.replaceFirst(line, previousAttributeAndValue, currentAttributeAndValue)-->Line_83 $$ if ((StringUtil.count(line, currentAttributeAndValue) == 1) && (StringUtil.count(line, previousAttributeAndValue) == 1)) [ FD ]
Line_14 $$ for (x = 0; ; ) -->Line_28 $$ if ((delimeter != CharPool.APOSTROPHE) && (delimeter != CharPool.QUOTE)) [ CD ]
Line_2 $$ protected String sortAttributes(String fileName, String line, int lineCount, boolean allowApostropheDelimeter) throws Exception -->Line_10 $$ s = s.substring(y + 1)[ CD ]
Line_90 $$ s = s.substring(y + 1)-->Line_100 $$ s = StringUtil.trimLeading(s)[ FD ]
Line_26 $$ s = s.substring(x + 1)-->Line_19 $$ String attribute = s.substring(0, x)[ FD ]
Line_23 $$ if (Validator.isNotNull(previousAttribute) && (previousAttribute.compareToIgnoreCase(attribute) > 0)) -->Line_24 $$ wrongOrder = true[ CD ]
Line_14 $$ for (x = 0; ; ) -->Line_90 $$ s = s.substring(y + 1)[ CD ]
Line_96 $$ s = s.substring(x + 1)-->Line_27 $$ char delimeter = s.charAt(0)[ FD ]
Line_35 $$ String value = null-->Line_58 $$ if (!value.contains(StringPool.QUOTE)) [ FD ]
Line_96 $$ s = s.substring(x + 1)-->Line_91 $$ if (s.startsWith(StringPool.GREATER_THAN)) [ FD ]
Line_85 $$ line = StringUtil.replaceLast(line, currentAttributeAndValue, previousAttributeAndValue)-->Line_60 $$ return sortAttributes(fileName, line, lineCount, allowApostropheDelimeter)[ FD ]
Line_14 $$ for (x = 0; ; ) -->Line_73 $$ String currentAttributeAndValue = sb.toString()[ CD ]
Line_12 $$ String previousAttributeAndValue = null-->Line_98 $$ previousAttributeAndValue = null[ FD ]
Line_14 $$ for (x = 0; ; ) -->Line_71 $$ sb.append(value)[ CD ]
Line_96 $$ s = s.substring(x + 1)-->Line_100 $$ s = StringUtil.trimLeading(s)[ FD ]
Line_2 $$ protected String sortAttributes(String fileName, String line, int lineCount, boolean allowApostropheDelimeter) throws Exception -->Line_30 $$ processErrorMessage(fileName, "delimeter: " + fileName + " " + lineCount)[ FD ]
Line_96 $$ s = s.substring(x + 1)-->Line_19 $$ String attribute = s.substring(0, x)[ FD ]
Line_10 $$ s = s.substring(y + 1)-->Line_26 $$ s = s.substring(x + 1)[ FD ]
Line_90 $$ s = s.substring(y + 1)-->Line_91 $$ if (s.startsWith(StringPool.GREATER_THAN)) [ FD ]
Line_2 $$ protected String sortAttributes(String fileName, String line, int lineCount, boolean allowApostropheDelimeter) throws Exception -->Line_13 $$ boolean wrongOrder = false[ CD ]
Line_3 $$ String s = line-->Line_38 $$ y = s.indexOf(delimeter, y + 1)[ FD ]
Line_37 $$ while (true) -->Line_43 $$ if (value.startsWith("<%")) [ CD ]
Line_43 $$ if (value.startsWith("<%")) -->Line_51 $$ int lessThanCount = StringUtil.count(value, StringPool.LESS_THAN)[ CD ]
Line_59 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + value + StringPool.QUOTE)-->Line_85 $$ line = StringUtil.replaceLast(line, currentAttributeAndValue, previousAttributeAndValue)[ FD ]
Line_14 $$ for (x = 0; ; ) -->Line_74 $$ String newLine = sortHTMLAttributes(line, value, currentAttributeAndValue)[ CD ]
Line_26 $$ s = s.substring(x + 1)-->Line_38 $$ y = s.indexOf(delimeter, y + 1)[ FD ]
Line_91 $$ if (s.startsWith(StringPool.GREATER_THAN)) -->Line_102 $$ previousAttributeAndValue = currentAttributeAndValue[ CD ]
Line_83 $$ if ((StringUtil.count(line, currentAttributeAndValue) == 1) && (StringUtil.count(line, previousAttributeAndValue) == 1)) -->Line_84 $$ line = StringUtil.replaceFirst(line, previousAttributeAndValue, currentAttributeAndValue)[ CD ]
Line_2 $$ protected String sortAttributes(String fileName, String line, int lineCount, boolean allowApostropheDelimeter) throws Exception -->Line_9 $$ String tag = s.substring(x + 1, y)[ CD ]
Line_84 $$ line = StringUtil.replaceFirst(line, previousAttributeAndValue, currentAttributeAndValue)-->Line_86 $$ return sortAttributes(fileName, line, lineCount, allowApostropheDelimeter)[ FD ]
Line_100 $$ s = StringUtil.trimLeading(s)-->Line_16 $$ if ((x == -1) || (s.length() <= (x + 1))) [ FD ]
Line_90 $$ s = s.substring(y + 1)-->Line_27 $$ char delimeter = s.charAt(0)[ FD ]
Line_3 $$ String s = line-->Line_9 $$ String tag = s.substring(x + 1, y)[ FD ]
Line_63 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + newValue + StringPool.QUOTE)-->Line_86 $$ return sortAttributes(fileName, line, lineCount, allowApostropheDelimeter)[ FD ]
Line_2 $$ protected String sortAttributes(String fileName, String line, int lineCount, boolean allowApostropheDelimeter) throws Exception -->Line_84 $$ line = StringUtil.replaceFirst(line, previousAttributeAndValue, currentAttributeAndValue)[ FD ]
Line_97 $$ previousAttribute = null-->Line_23 $$ if (Validator.isNotNull(previousAttribute) && (previousAttribute.compareToIgnoreCase(attribute) > 0)) [ FD ]
Line_84 $$ line = StringUtil.replaceFirst(line, previousAttributeAndValue, currentAttributeAndValue)-->Line_60 $$ return sortAttributes(fileName, line, lineCount, allowApostropheDelimeter)[ FD ]
Line_11 $$ String previousAttribute = null-->Line_23 $$ if (Validator.isNotNull(previousAttribute) && (previousAttribute.compareToIgnoreCase(attribute) > 0)) [ FD ]
Line_3 $$ String s = line-->Line_4 $$ int x = s.indexOf(CharPool.LESS_THAN)[ FD ]
Line_44 $$ int endJavaCodeSignCount = StringUtil.count(value, "%>")-->Line_46 $$ if (endJavaCodeSignCount == startJavaCodeSignCount) [ FD ]
Line_2 $$ protected String sortAttributes(String fileName, String line, int lineCount, boolean allowApostropheDelimeter) throws Exception -->Line_60 $$ return sortAttributes(fileName, line, lineCount, allowApostropheDelimeter)[ FD ]
Line_27 $$ char delimeter = s.charAt(0)-->Line_72 $$ sb.append(delimeter)[ FD ]
Line_96 $$ s = s.substring(x + 1)-->Line_90 $$ s = s.substring(y + 1)[ FD ]
Line_34 $$ s = s.substring(1)-->Line_39 $$ if ((y == -1) || (s.length() <= (y + 1))) [ FD ]
Line_34 $$ s = s.substring(1)-->Line_90 $$ s = s.substring(y + 1)[ FD ]
Line_43 $$ if (value.startsWith("<%")) -->Line_50 $$ int greaterThanCount = StringUtil.count(value, StringPool.GREATER_THAN)[ CD ]
Line_3 $$ String s = line-->Line_90 $$ s = s.substring(y + 1)[ FD ]
Line_92 $$ x = s.indexOf(CharPool.SPACE)-->Line_93 $$ if (x == -1) [ FD ]
Line_82 $$ if (wrongOrder) -->Line_83 $$ if ((StringUtil.count(line, currentAttributeAndValue) == 1) && (StringUtil.count(line, previousAttributeAndValue) == 1)) [ CD ]
Line_85 $$ line = StringUtil.replaceLast(line, currentAttributeAndValue, previousAttributeAndValue)-->Line_78 $$ newLine = formatTagAttributeType(line, tag, currentAttributeAndValue)[ FD ]
Line_59 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + value + StringPool.QUOTE)-->Line_64 $$ return sortAttributes(fileName, line, lineCount, allowApostropheDelimeter)[ FD ]
Line_63 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + newValue + StringPool.QUOTE)-->Line_79 $$ if (!newLine.equals(line)) [ FD ]
Line_10 $$ s = s.substring(y + 1)-->Line_34 $$ s = s.substring(1)[ FD ]
Line_61 $$ if (!allowApostropheDelimeter) -->Line_64 $$ return sortAttributes(fileName, line, lineCount, allowApostropheDelimeter)[ CD ]
Line_14 $$ for (x = 0; ; ) -->Line_19 $$ String attribute = s.substring(0, x)[ FD ]
Line_51 $$ int lessThanCount = StringUtil.count(value, StringPool.LESS_THAN)-->Line_52 $$ if (greaterThanCount == lessThanCount) [ FD ]
Line_28 $$ if ((delimeter != CharPool.APOSTROPHE) && (delimeter != CharPool.QUOTE)) -->Line_29 $$ if (delimeter != CharPool.AMPERSAND) [ CD ]
Line_2 $$ protected String sortAttributes(String fileName, String line, int lineCount, boolean allowApostropheDelimeter) throws Exception -->Line_85 $$ line = StringUtil.replaceLast(line, currentAttributeAndValue, previousAttributeAndValue)[ FD ]
Line_2 $$ protected String sortAttributes(String fileName, String line, int lineCount, boolean allowApostropheDelimeter) throws Exception -->Line_63 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + newValue + StringPool.QUOTE)[ FD ]
Line_42 $$ value = s.substring(0, y)-->Line_44 $$ int endJavaCodeSignCount = StringUtil.count(value, "%>")[ FD ]
Line_10 $$ s = s.substring(y + 1)-->Line_90 $$ s = s.substring(y + 1)[ FD ]
Line_9 $$ String tag = s.substring(x + 1, y)-->Line_78 $$ newLine = formatTagAttributeType(line, tag, currentAttributeAndValue)[ FD ]
Line_34 $$ s = s.substring(1)-->Line_91 $$ if (s.startsWith(StringPool.GREATER_THAN)) [ FD ]
Line_84 $$ line = StringUtil.replaceFirst(line, previousAttributeAndValue, currentAttributeAndValue)-->Line_78 $$ newLine = formatTagAttributeType(line, tag, currentAttributeAndValue)[ FD ]
Line_14 $$ for (x = 0; ; ) -->Line_78 $$ newLine = formatTagAttributeType(line, tag, currentAttributeAndValue)[ CD ]
Line_90 $$ s = s.substring(y + 1)-->Line_15 $$ x = s.indexOf(CharPool.EQUAL)[ FD ]
Line_27 $$ char delimeter = s.charAt(0)-->Line_29 $$ if (delimeter != CharPool.AMPERSAND) [ FD ]
Line_34 $$ s = s.substring(1)-->Line_16 $$ if ((x == -1) || (s.length() <= (x + 1))) [ FD ]
Line_84 $$ line = StringUtil.replaceFirst(line, previousAttributeAndValue, currentAttributeAndValue)-->Line_63 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + newValue + StringPool.QUOTE)[ FD ]
Line_100 $$ s = StringUtil.trimLeading(s)-->Line_91 $$ if (s.startsWith(StringPool.GREATER_THAN)) [ FD ]
Line_83 $$ if ((StringUtil.count(line, currentAttributeAndValue) == 1) && (StringUtil.count(line, previousAttributeAndValue) == 1)) -->Line_86 $$ return sortAttributes(fileName, line, lineCount, allowApostropheDelimeter)[ CD ]
Line_90 $$ s = s.substring(y + 1)-->Line_19 $$ String attribute = s.substring(0, x)[ FD ]
Line_98 $$ previousAttributeAndValue = null-->Line_102 $$ previousAttributeAndValue = currentAttributeAndValue[ FD ]
Line_58 $$ if (!value.contains(StringPool.QUOTE)) -->Line_60 $$ return sortAttributes(fileName, line, lineCount, allowApostropheDelimeter)[ CD ]
Line_14 $$ for (x = 0; ; ) -->Line_37 $$ while (true) [ CD ]
Line_34 $$ s = s.substring(1)-->Line_92 $$ x = s.indexOf(CharPool.SPACE)[ FD ]
Line_90 $$ s = s.substring(y + 1)-->Line_16 $$ if ((x == -1) || (s.length() <= (x + 1))) [ FD ]
Line_14 $$ for (x = 0; ; ) -->Line_69 $$ sb.append(StringPool.EQUAL)[ CD ]
Line_43 $$ if (value.startsWith("<%")) -->Line_46 $$ if (endJavaCodeSignCount == startJavaCodeSignCount) [ CD ]
Line_26 $$ s = s.substring(x + 1)-->Line_15 $$ x = s.indexOf(CharPool.EQUAL)[ FD ]
Line_100 $$ s = StringUtil.trimLeading(s)-->Line_19 $$ String attribute = s.substring(0, x)[ FD ]
Line_59 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + value + StringPool.QUOTE)-->Line_60 $$ return sortAttributes(fileName, line, lineCount, allowApostropheDelimeter)[ FD ]
Line_59 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + value + StringPool.QUOTE)-->Line_63 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + newValue + StringPool.QUOTE)[ FD ]
Line_26 $$ s = s.substring(x + 1)-->Line_27 $$ char delimeter = s.charAt(0)[ FD ]
Line_2 $$ protected String sortAttributes(String fileName, String line, int lineCount, boolean allowApostropheDelimeter) throws Exception -->Line_6 $$ if ((x == -1) || (x >= y)) [ CD ]
Line_96 $$ s = s.substring(x + 1)-->Line_34 $$ s = s.substring(1)[ FD ]
Line_37 $$ while (true) -->Line_42 $$ value = s.substring(0, y)[ CD ]
Line_10 $$ s = s.substring(y + 1)-->Line_92 $$ x = s.indexOf(CharPool.SPACE)[ FD ]
Line_90 $$ s = s.substring(y + 1)-->Line_92 $$ x = s.indexOf(CharPool.SPACE)[ FD ]
Line_96 $$ s = s.substring(x + 1)-->Line_15 $$ x = s.indexOf(CharPool.EQUAL)[ FD ]
Line_63 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + newValue + StringPool.QUOTE)-->Line_85 $$ line = StringUtil.replaceLast(line, currentAttributeAndValue, previousAttributeAndValue)[ FD ]
Line_63 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + newValue + StringPool.QUOTE)-->Line_59 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + value + StringPool.QUOTE)[ FD ]
Line_85 $$ line = StringUtil.replaceLast(line, currentAttributeAndValue, previousAttributeAndValue)-->Line_75 $$ if (!newLine.equals(line)) [ FD ]
Line_61 $$ if (!allowApostropheDelimeter) -->Line_62 $$ String newValue = StringUtil.replace(value, StringPool.QUOTE, "&quot;")[ CD ]
Line_14 $$ for (x = 0; ; ) -->Line_82 $$ if (wrongOrder) [ CD ]
Line_10 $$ s = s.substring(y + 1)-->Line_96 $$ s = s.substring(x + 1)[ FD ]
Line_82 $$ if (wrongOrder) -->Line_88 $$ return line[ CD ]
Line_20 $$ if (!isAttributName(attribute)) -->Line_21 $$ return line[ CD ]
Line_16 $$ if ((x == -1) || (s.length() <= (x + 1))) -->Line_17 $$ return line[ CD ]
Line_11 $$ String previousAttribute = null-->Line_101 $$ previousAttribute = attribute[ FD ]
Line_59 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + value + StringPool.QUOTE)-->Line_84 $$ line = StringUtil.replaceFirst(line, previousAttributeAndValue, currentAttributeAndValue)[ FD ]
Line_90 $$ s = s.substring(y + 1)-->Line_34 $$ s = s.substring(1)[ FD ]
Line_84 $$ line = StringUtil.replaceFirst(line, previousAttributeAndValue, currentAttributeAndValue)-->Line_59 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + value + StringPool.QUOTE)[ FD ]
Line_14 $$ for (x = 0; ; ) -->Line_34 $$ s = s.substring(1)[ CD ]
Line_63 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + newValue + StringPool.QUOTE)-->Line_64 $$ return sortAttributes(fileName, line, lineCount, allowApostropheDelimeter)[ FD ]
Line_15 $$ x = s.indexOf(CharPool.EQUAL)-->Line_93 $$ if (x == -1) [ FD ]
Line_100 $$ s = StringUtil.trimLeading(s)-->Line_96 $$ s = s.substring(x + 1)[ FD ]
Line_14 $$ for (x = 0; ; ) -->Line_26 $$ s = s.substring(x + 1)[ CD ]
Line_42 $$ value = s.substring(0, y)-->Line_43 $$ if (value.startsWith("<%")) [ FD ]
Line_38 $$ y = s.indexOf(delimeter, y + 1)-->Line_42 $$ value = s.substring(0, y)[ FD ]
Line_2 $$ protected String sortAttributes(String fileName, String line, int lineCount, boolean allowApostropheDelimeter) throws Exception -->Line_80 $$ return sortAttributes(fileName, newLine, lineCount, allowApostropheDelimeter)[ FD ]
Line_3 $$ String s = line-->Line_96 $$ s = s.substring(x + 1)[ FD ]
Line_42 $$ value = s.substring(0, y)-->Line_71 $$ sb.append(value)[ FD ]
Line_35 $$ String value = null-->Line_44 $$ int endJavaCodeSignCount = StringUtil.count(value, "%>")[ FD ]
Line_34 $$ s = s.substring(1)-->Line_19 $$ String attribute = s.substring(0, x)[ FD ]
Line_59 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + value + StringPool.QUOTE)-->Line_86 $$ return sortAttributes(fileName, line, lineCount, allowApostropheDelimeter)[ FD ]
Line_59 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + value + StringPool.QUOTE)-->Line_74 $$ String newLine = sortHTMLAttributes(line, value, currentAttributeAndValue)[ FD ]
Line_34 $$ s = s.substring(1)-->Line_26 $$ s = s.substring(x + 1)[ FD ]
Line_2 $$ protected String sortAttributes(String fileName, String line, int lineCount, boolean allowApostropheDelimeter) throws Exception -->Line_64 $$ return sortAttributes(fileName, line, lineCount, allowApostropheDelimeter)[ FD ]
Line_14 $$ for (x = 0; ; ) -->Line_36 $$ y = -1[ CD ]
Line_85 $$ line = StringUtil.replaceLast(line, currentAttributeAndValue, previousAttributeAndValue)-->Line_79 $$ if (!newLine.equals(line)) [ FD ]
Line_10 $$ s = s.substring(y + 1)-->Line_100 $$ s = StringUtil.trimLeading(s)[ FD ]
Line_34 $$ s = s.substring(1)-->Line_27 $$ char delimeter = s.charAt(0)[ FD ]
Line_100 $$ s = StringUtil.trimLeading(s)-->Line_26 $$ s = s.substring(x + 1)[ FD ]
Line_19 $$ String attribute = s.substring(0, x)-->Line_23 $$ if (Validator.isNotNull(previousAttribute) && (previousAttribute.compareToIgnoreCase(attribute) > 0)) [ FD ]
Line_3 $$ String s = line-->Line_10 $$ s = s.substring(y + 1)[ FD ]
Line_59 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + value + StringPool.QUOTE)-->Line_83 $$ if ((StringUtil.count(line, currentAttributeAndValue) == 1) && (StringUtil.count(line, previousAttributeAndValue) == 1)) [ FD ]
Line_35 $$ String value = null-->Line_62 $$ String newValue = StringUtil.replace(value, StringPool.QUOTE, "&quot;")[ FD ]
Line_59 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + value + StringPool.QUOTE)-->Line_79 $$ if (!newLine.equals(line)) [ FD ]
Line_19 $$ String attribute = s.substring(0, x)-->Line_20 $$ if (!isAttributName(attribute)) [ FD ]
Line_19 $$ String attribute = s.substring(0, x)-->Line_68 $$ sb.append(attribute)[ FD ]
Line_42 $$ value = s.substring(0, y)-->Line_45 $$ int startJavaCodeSignCount = StringUtil.count(value, "<%")[ FD ]
Line_90 $$ s = s.substring(y + 1)-->Line_96 $$ s = s.substring(x + 1)[ FD ]
Line_91 $$ if (s.startsWith(StringPool.GREATER_THAN)) -->Line_98 $$ previousAttributeAndValue = null[ CD ]
Line_91 $$ if (s.startsWith(StringPool.GREATER_THAN)) -->Line_100 $$ s = StringUtil.trimLeading(s)[ CD ]
Line_2 $$ protected String sortAttributes(String fileName, String line, int lineCount, boolean allowApostropheDelimeter) throws Exception -->Line_12 $$ String previousAttributeAndValue = null[ CD ]
Line_4 $$ int x = s.indexOf(CharPool.LESS_THAN)-->Line_15 $$ x = s.indexOf(CharPool.EQUAL)[ FD ]
Line_27 $$ char delimeter = s.charAt(0)-->Line_38 $$ y = s.indexOf(delimeter, y + 1)[ FD ]
Line_26 $$ s = s.substring(x + 1)-->Line_90 $$ s = s.substring(y + 1)[ FD ]
Line_84 $$ line = StringUtil.replaceFirst(line, previousAttributeAndValue, currentAttributeAndValue)-->Line_79 $$ if (!newLine.equals(line)) [ FD ]
Line_59 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + value + StringPool.QUOTE)-->Line_75 $$ if (!newLine.equals(line)) [ FD ]
Line_102 $$ previousAttributeAndValue = currentAttributeAndValue-->Line_85 $$ line = StringUtil.replaceLast(line, currentAttributeAndValue, previousAttributeAndValue)[ FD ]
Line_10 $$ s = s.substring(y + 1)-->Line_91 $$ if (s.startsWith(StringPool.GREATER_THAN)) [ FD ]
Line_14 $$ for (x = 0; ; ) -->Line_20 $$ if (!isAttributName(attribute)) [ CD ]
Line_61 $$ if (!allowApostropheDelimeter) -->Line_63 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + newValue + StringPool.QUOTE)[ CD ]
Line_85 $$ line = StringUtil.replaceLast(line, currentAttributeAndValue, previousAttributeAndValue)-->Line_84 $$ line = StringUtil.replaceFirst(line, previousAttributeAndValue, currentAttributeAndValue)[ FD ]
Line_2 $$ protected String sortAttributes(String fileName, String line, int lineCount, boolean allowApostropheDelimeter) throws Exception -->Line_86 $$ return sortAttributes(fileName, line, lineCount, allowApostropheDelimeter)[ FD ]
Line_63 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + newValue + StringPool.QUOTE)-->Line_75 $$ if (!newLine.equals(line)) [ FD ]
Line_3 $$ String s = line-->Line_92 $$ x = s.indexOf(CharPool.SPACE)[ FD ]
Line_91 $$ if (s.startsWith(StringPool.GREATER_THAN)) -->Line_101 $$ previousAttribute = attribute[ CD ]
Line_37 $$ while (true) -->Line_39 $$ if ((y == -1) || (s.length() <= (y + 1))) [ CD ]
Line_34 $$ s = s.substring(1)-->Line_38 $$ y = s.indexOf(delimeter, y + 1)[ FD ]
Line_43 $$ if (value.startsWith("<%")) -->Line_52 $$ if (greaterThanCount == lessThanCount) [ CD ]
Line_14 $$ for (x = 0; ; ) -->Line_16 $$ if ((x == -1) || (s.length() <= (x + 1))) [ CD ]
Line_3 $$ String s = line-->Line_26 $$ s = s.substring(x + 1)[ FD ]
Line_2 $$ protected String sortAttributes(String fileName, String line, int lineCount, boolean allowApostropheDelimeter) throws Exception -->Line_74 $$ String newLine = sortHTMLAttributes(line, value, currentAttributeAndValue)[ FD ]
Line_2 $$ protected String sortAttributes(String fileName, String line, int lineCount, boolean allowApostropheDelimeter) throws Exception -->Line_3 $$ String s = line[ CD ]
Line_2 $$ protected String sortAttributes(String fileName, String line, int lineCount, boolean allowApostropheDelimeter) throws Exception -->Line_14 $$ for (x = 0; ; ) [ CD ]
Line_34 $$ s = s.substring(1)-->Line_15 $$ x = s.indexOf(CharPool.EQUAL)[ FD ]
Line_10 $$ s = s.substring(y + 1)-->Line_39 $$ if ((y == -1) || (s.length() <= (y + 1))) [ FD ]
Line_50 $$ int greaterThanCount = StringUtil.count(value, StringPool.GREATER_THAN)-->Line_52 $$ if (greaterThanCount == lessThanCount) [ FD ]
Line_58 $$ if (!value.contains(StringPool.QUOTE)) -->Line_59 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + value + StringPool.QUOTE)[ CD ]
Line_85 $$ line = StringUtil.replaceLast(line, currentAttributeAndValue, previousAttributeAndValue)-->Line_83 $$ if ((StringUtil.count(line, currentAttributeAndValue) == 1) && (StringUtil.count(line, previousAttributeAndValue) == 1)) [ FD ]
Line_5 $$ int y = s.indexOf(CharPool.SPACE)-->Line_38 $$ y = s.indexOf(delimeter, y + 1)[ FD ]
Line_26 $$ s = s.substring(x + 1)-->Line_39 $$ if ((y == -1) || (s.length() <= (y + 1))) [ FD ]
Line_14 $$ for (x = 0; ; ) -->Line_93 $$ if (x == -1) [ FD ]
Line_100 $$ s = StringUtil.trimLeading(s)-->Line_34 $$ s = s.substring(1)[ FD ]
Line_63 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + newValue + StringPool.QUOTE)-->Line_74 $$ String newLine = sortHTMLAttributes(line, value, currentAttributeAndValue)[ FD ]
Line_102 $$ previousAttributeAndValue = currentAttributeAndValue-->Line_83 $$ if ((StringUtil.count(line, currentAttributeAndValue) == 1) && (StringUtil.count(line, previousAttributeAndValue) == 1)) [ FD ]
Line_34 $$ s = s.substring(1)-->Line_42 $$ value = s.substring(0, y)[ FD ]
Line_91 $$ if (s.startsWith(StringPool.GREATER_THAN)) -->Line_93 $$ if (x == -1) [ CD ]
Line_4 $$ int x = s.indexOf(CharPool.LESS_THAN)-->Line_14 $$ for (x = 0; ; ) [ FD ]
Line_26 $$ s = s.substring(x + 1)-->Line_16 $$ if ((x == -1) || (s.length() <= (x + 1))) [ FD ]
Line_5 $$ int y = s.indexOf(CharPool.SPACE)-->Line_9 $$ String tag = s.substring(x + 1, y)[ FD ]
Line_13 $$ boolean wrongOrder = false-->Line_24 $$ wrongOrder = true[ FD ]
Line_5 $$ int y = s.indexOf(CharPool.SPACE)-->Line_42 $$ value = s.substring(0, y)[ FD ]
Line_14 $$ for (x = 0; ; ) -->Line_70 $$ sb.append(delimeter)[ CD ]
Line_3 $$ String s = line-->Line_39 $$ if ((y == -1) || (s.length() <= (y + 1))) [ FD ]
Line_36 $$ y = -1-->Line_42 $$ value = s.substring(0, y)[ FD ]
Line_85 $$ line = StringUtil.replaceLast(line, currentAttributeAndValue, previousAttributeAndValue)-->Line_63 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + newValue + StringPool.QUOTE)[ FD ]
Line_42 $$ value = s.substring(0, y)-->Line_50 $$ int greaterThanCount = StringUtil.count(value, StringPool.GREATER_THAN)[ FD ]
Line_14 $$ for (x = 0; ; ) -->Line_23 $$ if (Validator.isNotNull(previousAttribute) && (previousAttribute.compareToIgnoreCase(attribute) > 0)) [ CD ]
Line_43 $$ if (value.startsWith("<%")) -->Line_44 $$ int endJavaCodeSignCount = StringUtil.count(value, "%>")[ CD ]
Line_42 $$ value = s.substring(0, y)-->Line_62 $$ String newValue = StringUtil.replace(value, StringPool.QUOTE, "&quot;")[ FD ]
Line_98 $$ previousAttributeAndValue = null-->Line_84 $$ line = StringUtil.replaceFirst(line, previousAttributeAndValue, currentAttributeAndValue)[ FD ]
Line_2 $$ protected String sortAttributes(String fileName, String line, int lineCount, boolean allowApostropheDelimeter) throws Exception -->Line_4 $$ int x = s.indexOf(CharPool.LESS_THAN)[ CD ]
Line_35 $$ String value = null-->Line_43 $$ if (value.startsWith("<%")) [ FD ]
Line_100 $$ s = StringUtil.trimLeading(s)-->Line_27 $$ char delimeter = s.charAt(0)[ FD ]
Line_2 $$ protected String sortAttributes(String fileName, String line, int lineCount, boolean allowApostropheDelimeter) throws Exception -->Line_11 $$ String previousAttribute = null[ CD ]
Line_3 $$ String s = line-->Line_5 $$ int y = s.indexOf(CharPool.SPACE)[ FD ]
Line_14 $$ for (x = 0; ; ) -->Line_68 $$ sb.append(attribute)[ CD ]
Line_2 $$ protected String sortAttributes(String fileName, String line, int lineCount, boolean allowApostropheDelimeter) throws Exception -->Line_78 $$ newLine = formatTagAttributeType(line, tag, currentAttributeAndValue)[ FD ]
Line_63 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + newValue + StringPool.QUOTE)-->Line_83 $$ if ((StringUtil.count(line, currentAttributeAndValue) == 1) && (StringUtil.count(line, previousAttributeAndValue) == 1)) [ FD ]
Line_15 $$ x = s.indexOf(CharPool.EQUAL)-->Line_92 $$ x = s.indexOf(CharPool.SPACE)[ FD ]
Line_96 $$ s = s.substring(x + 1)-->Line_26 $$ s = s.substring(x + 1)[ FD ]
Line_2 $$ protected String sortAttributes(String fileName, String line, int lineCount, boolean allowApostropheDelimeter) throws Exception -->Line_79 $$ if (!newLine.equals(line)) [ FD ]
Line_12 $$ String previousAttributeAndValue = null-->Line_83 $$ if ((StringUtil.count(line, currentAttributeAndValue) == 1) && (StringUtil.count(line, previousAttributeAndValue) == 1)) [ FD ]
Line_100 $$ s = StringUtil.trimLeading(s)-->Line_92 $$ x = s.indexOf(CharPool.SPACE)[ FD ]
Line_26 $$ s = s.substring(x + 1)-->Line_100 $$ s = StringUtil.trimLeading(s)[ FD ]
Line_84 $$ line = StringUtil.replaceFirst(line, previousAttributeAndValue, currentAttributeAndValue)-->Line_75 $$ if (!newLine.equals(line)) [ FD ]
Line_42 $$ value = s.substring(0, y)-->Line_74 $$ String newLine = sortHTMLAttributes(line, value, currentAttributeAndValue)[ FD ]
Line_35 $$ String value = null-->Line_42 $$ value = s.substring(0, y)[ FD ]
Line_10 $$ s = s.substring(y + 1)-->Line_16 $$ if ((x == -1) || (s.length() <= (x + 1))) [ FD ]
Line_36 $$ y = -1-->Line_38 $$ y = s.indexOf(delimeter, y + 1)[ FD ]
Line_2 $$ protected String sortAttributes(String fileName, String line, int lineCount, boolean allowApostropheDelimeter) throws Exception -->Line_59 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + value + StringPool.QUOTE)[ FD ]
Line_102 $$ previousAttributeAndValue = currentAttributeAndValue-->Line_84 $$ line = StringUtil.replaceFirst(line, previousAttributeAndValue, currentAttributeAndValue)[ FD ]
Line_2 $$ protected String sortAttributes(String fileName, String line, int lineCount, boolean allowApostropheDelimeter) throws Exception -->Line_5 $$ int y = s.indexOf(CharPool.SPACE)[ CD ]
Line_59 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + value + StringPool.QUOTE)-->Line_78 $$ newLine = formatTagAttributeType(line, tag, currentAttributeAndValue)[ FD ]
Line_2 $$ protected String sortAttributes(String fileName, String line, int lineCount, boolean allowApostropheDelimeter) throws Exception -->Line_83 $$ if ((StringUtil.count(line, currentAttributeAndValue) == 1) && (StringUtil.count(line, previousAttributeAndValue) == 1)) [ FD ]
Line_98 $$ previousAttributeAndValue = null-->Line_85 $$ line = StringUtil.replaceLast(line, currentAttributeAndValue, previousAttributeAndValue)[ FD ]
Line_3 $$ String s = line-->Line_27 $$ char delimeter = s.charAt(0)[ FD ]
Line_4 $$ int x = s.indexOf(CharPool.LESS_THAN)-->Line_92 $$ x = s.indexOf(CharPool.SPACE)[ FD ]
Line_58 $$ if (!value.contains(StringPool.QUOTE)) -->Line_61 $$ if (!allowApostropheDelimeter) [ CD ]
Line_29 $$ if (delimeter != CharPool.AMPERSAND) -->Line_30 $$ processErrorMessage(fileName, "delimeter: " + fileName + " " + lineCount)[ CD ]
Line_26 $$ s = s.substring(x + 1)-->Line_96 $$ s = s.substring(x + 1)[ FD ]
Line_14 $$ for (x = 0; ; ) -->Line_35 $$ String value = null[ CD ]
Line_42 $$ value = s.substring(0, y)-->Line_58 $$ if (!value.contains(StringPool.QUOTE)) [ FD ]
Line_63 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + newValue + StringPool.QUOTE)-->Line_84 $$ line = StringUtil.replaceFirst(line, previousAttributeAndValue, currentAttributeAndValue)[ FD ]
Line_75 $$ if (!newLine.equals(line)) -->Line_76 $$ return sortAttributes(fileName, newLine, lineCount, allowApostropheDelimeter)[ CD ]
Line_14 $$ for (x = 0; ; ) -->Line_91 $$ if (s.startsWith(StringPool.GREATER_THAN)) [ CD ]
Line_35 $$ String value = null-->Line_50 $$ int greaterThanCount = StringUtil.count(value, StringPool.GREATER_THAN)[ FD ]
Line_91 $$ if (s.startsWith(StringPool.GREATER_THAN)) -->Line_96 $$ s = s.substring(x + 1)[ CD ]
Line_91 $$ if (s.startsWith(StringPool.GREATER_THAN)) -->Line_97 $$ previousAttribute = null[ CD ]
Line_14 $$ for (x = 0; ; ) -->Line_15 $$ x = s.indexOf(CharPool.EQUAL)[ FD ]
Line_98 $$ previousAttributeAndValue = null-->Line_83 $$ if ((StringUtil.count(line, currentAttributeAndValue) == 1) && (StringUtil.count(line, previousAttributeAndValue) == 1)) [ FD ]
Line_2 $$ protected String sortAttributes(String fileName, String line, int lineCount, boolean allowApostropheDelimeter) throws Exception -->Line_61 $$ if (!allowApostropheDelimeter) [ FD ]
Line_100 $$ s = StringUtil.trimLeading(s)-->Line_90 $$ s = s.substring(y + 1)[ FD ]
Line_12 $$ String previousAttributeAndValue = null-->Line_102 $$ previousAttributeAndValue = currentAttributeAndValue[ FD ]
Line_4 $$ int x = s.indexOf(CharPool.LESS_THAN)-->Line_19 $$ String attribute = s.substring(0, x)[ FD ]
Line_39 $$ if ((y == -1) || (s.length() <= (y + 1))) -->Line_40 $$ return line[ CD ]
Line_14 $$ for (x = 0; ; ) -->Line_19 $$ String attribute = s.substring(0, x)[ CD ]
Line_43 $$ if (value.startsWith("<%")) -->Line_45 $$ int startJavaCodeSignCount = StringUtil.count(value, "<%")[ CD ]
Line_35 $$ String value = null-->Line_71 $$ sb.append(value)[ FD ]
Line_3 $$ String s = line-->Line_15 $$ x = s.indexOf(CharPool.EQUAL)[ FD ]
Line_90 $$ s = s.substring(y + 1)-->Line_26 $$ s = s.substring(x + 1)[ FD ]
Line_12 $$ String previousAttributeAndValue = null-->Line_84 $$ line = StringUtil.replaceFirst(line, previousAttributeAndValue, currentAttributeAndValue)[ FD ]
Line_93 $$ if (x == -1) -->Line_94 $$ return line[ CD ]
Line_14 $$ for (x = 0; ; ) -->Line_57 $$ if (delimeter == CharPool.APOSTROPHE) [ CD ]
Line_27 $$ char delimeter = s.charAt(0)-->Line_57 $$ if (delimeter == CharPool.APOSTROPHE) [ FD ]
Line_10 $$ s = s.substring(y + 1)-->Line_19 $$ String attribute = s.substring(0, x)[ FD ]
Line_85 $$ line = StringUtil.replaceLast(line, currentAttributeAndValue, previousAttributeAndValue)-->Line_74 $$ String newLine = sortHTMLAttributes(line, value, currentAttributeAndValue)[ FD ]
Line_10 $$ s = s.substring(y + 1)-->Line_38 $$ y = s.indexOf(delimeter, y + 1)[ FD ]
Line_45 $$ int startJavaCodeSignCount = StringUtil.count(value, "<%")-->Line_46 $$ if (endJavaCodeSignCount == startJavaCodeSignCount) [ FD ]
Line_34 $$ s = s.substring(1)-->Line_100 $$ s = StringUtil.trimLeading(s)[ FD ]
Line_28 $$ if ((delimeter != CharPool.APOSTROPHE) && (delimeter != CharPool.QUOTE)) -->Line_32 $$ return line[ CD ]
Line_96 $$ s = s.substring(x + 1)-->Line_16 $$ if ((x == -1) || (s.length() <= (x + 1))) [ FD ]
Line_19 $$ String attribute = s.substring(0, x)-->Line_101 $$ previousAttribute = attribute[ FD ]
Line_14 $$ for (x = 0; ; ) -->Line_92 $$ x = s.indexOf(CharPool.SPACE)[ FD ]
Line_84 $$ line = StringUtil.replaceFirst(line, previousAttributeAndValue, currentAttributeAndValue)-->Line_64 $$ return sortAttributes(fileName, line, lineCount, allowApostropheDelimeter)[ FD ]
Line_97 $$ previousAttribute = null-->Line_101 $$ previousAttribute = attribute[ FD ]
Line_63 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + newValue + StringPool.QUOTE)-->Line_78 $$ newLine = formatTagAttributeType(line, tag, currentAttributeAndValue)[ FD ]
Line_10 $$ s = s.substring(y + 1)-->Line_42 $$ value = s.substring(0, y)[ FD ]
Line_26 $$ s = s.substring(x + 1)-->Line_92 $$ x = s.indexOf(CharPool.SPACE)[ FD ]
Line_34 $$ s = s.substring(1)-->Line_96 $$ s = s.substring(x + 1)[ FD ]
Line_10 $$ s = s.substring(y + 1)-->Line_27 $$ char delimeter = s.charAt(0)[ FD ]
Line_83 $$ if ((StringUtil.count(line, currentAttributeAndValue) == 1) && (StringUtil.count(line, previousAttributeAndValue) == 1)) -->Line_85 $$ line = StringUtil.replaceLast(line, currentAttributeAndValue, previousAttributeAndValue)[ CD ]
Line_15 $$ x = s.indexOf(CharPool.EQUAL)-->Line_19 $$ String attribute = s.substring(0, x)[ FD ]
Line_3 $$ String s = line-->Line_34 $$ s = s.substring(1)[ FD ]
Line_3 $$ String s = line-->Line_100 $$ s = StringUtil.trimLeading(s)[ FD ]
Line_63 $$ line = StringUtil.replace(line, StringPool.APOSTROPHE + value + StringPool.APOSTROPHE, StringPool.QUOTE + newValue + StringPool.QUOTE)-->Line_60 $$ return sortAttributes(fileName, line, lineCount, allowApostropheDelimeter)[ FD ]
Line_101 $$ previousAttribute = attribute-->Line_23 $$ if (Validator.isNotNull(previousAttribute) && (previousAttribute.compareToIgnoreCase(attribute) > 0)) [ FD ]
Line_5 $$ int y = s.indexOf(CharPool.SPACE)-->Line_36 $$ y = -1[ FD ]
Line_96 $$ s = s.substring(x + 1)-->Line_92 $$ x = s.indexOf(CharPool.SPACE)[ FD ]
Line_85 $$ line = StringUtil.replaceLast(line, currentAttributeAndValue, previousAttributeAndValue)-->Line_64 $$ return sortAttributes(fileName, line, lineCount, allowApostropheDelimeter)[ FD ]
Line_3 $$ String s = line-->Line_16 $$ if ((x == -1) || (s.length() <= (x + 1))) [ FD ]
Line_92 $$ x = s.indexOf(CharPool.SPACE)-->Line_19 $$ String attribute = s.substring(0, x)[ FD ]
Line_14 $$ for (x = 0; ; ) -->Line_15 $$ x = s.indexOf(CharPool.EQUAL)[ CD ]
Line_79 $$ if (!newLine.equals(line)) -->Line_80 $$ return sortAttributes(fileName, newLine, lineCount, allowApostropheDelimeter)[ CD ]
Line_84 $$ line = StringUtil.replaceFirst(line, previousAttributeAndValue, currentAttributeAndValue)-->Line_85 $$ line = StringUtil.replaceLast(line, currentAttributeAndValue, previousAttributeAndValue)[ FD ]
Line_91 $$ if (s.startsWith(StringPool.GREATER_THAN)) -->Line_92 $$ x = s.indexOf(CharPool.SPACE)[ CD ]
Line_11 $$ String previousAttribute = null-->Line_97 $$ previousAttribute = null[ FD ]
Line_14 $$ for (x = 0; ; ) -->Line_72 $$ sb.append(delimeter)[ CD ]
Line_3 $$ String s = line-->Line_42 $$ value = s.substring(0, y)[ FD ]
