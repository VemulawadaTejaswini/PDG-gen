Line_2 $$ public String[] getSchemeNames() -->Line_4 $$ Collections.sort(schemes, new Comparator<MyColorScheme>() [ CD ]
Line_3 $$ List<MyColorScheme> schemes = new ArrayList<MyColorScheme>(mySchemes.values())-->Line_13 $$ List<String> names = new ArrayList<String>(schemes.size())[ FD ]
Line_4 $$ Collections.sort(schemes, new Comparator<MyColorScheme>() -->Line_8 $$ if (!isReadOnly(o1) && isReadOnly(o2))[ CD ]
Line_8 $$ if (!isReadOnly(o1) && isReadOnly(o2))-->Line_9 $$ return 1[ CD ]
Line_2 $$ public String[] getSchemeNames() -->Line_3 $$ List<MyColorScheme> schemes = new ArrayList<MyColorScheme>(mySchemes.values())[ CD ]
Line_4 $$ Collections.sort(schemes, new Comparator<MyColorScheme>() -->Line_6 $$ if (isReadOnly(o1) && !isReadOnly(o2))[ FD ]
Line_4 $$ Collections.sort(schemes, new Comparator<MyColorScheme>() -->Line_6 $$ if (isReadOnly(o1) && !isReadOnly(o2))[ CD ]
Line_6 $$ if (isReadOnly(o1) && !isReadOnly(o2))-->Line_7 $$ return -1[ CD ]
Line_2 $$ public String[] getSchemeNames() -->Line_17 $$ return ArrayUtil.toStringArray(names)[ CD ]
Line_4 $$ Collections.sort(schemes, new Comparator<MyColorScheme>() -->Line_10 $$ return o1.getName().compareToIgnoreCase(o2.getName())[ CD ]
Line_4 $$ Collections.sort(schemes, new Comparator<MyColorScheme>() -->Line_8 $$ if (!isReadOnly(o1) && isReadOnly(o2))[ FD ]
Line_3 $$ List<MyColorScheme> schemes = new ArrayList<MyColorScheme>(mySchemes.values())-->Line_4 $$ Collections.sort(schemes, new Comparator<MyColorScheme>() [ FD ]
Line_4 $$ Collections.sort(schemes, new Comparator<MyColorScheme>() -->Line_10 $$ return o1.getName().compareToIgnoreCase(o2.getName())[ FD ]
