Line_2 $$ private void buildFiles(@Nullable Pair<PackageSetBase, NamedScopesHolder> filter, boolean showOnlyFilteredItems) -->Line_3 $$ Collections.sort(myFilePaths, new Comparator<String>() [ CD ]
Line_11 $$ if (filter != null) -->Line_12 $$ if (child.acceptFilter(filter, showOnlyFilteredItems)) [ CD ]
Line_14 $$ if (showOnlyFilteredItems) -->Line_15 $$ Disposer.dispose(child)[ CD ]
Line_2 $$ private void buildFiles(@Nullable Pair<PackageSetBase, NamedScopesHolder> filter, boolean showOnlyFilteredItems) -->Line_12 $$ if (child.acceptFilter(filter, showOnlyFilteredItems)) [ FD ]
Line_20 $$ if (error != null) -->Line_21 $$ child.setErrorText(error)[ CD ]
Line_2 $$ private void buildFiles(@Nullable Pair<PackageSetBase, NamedScopesHolder> filter, boolean showOnlyFilteredItems) -->Line_11 $$ if (filter != null) [ FD ]
Line_3 $$ Collections.sort(myFilePaths, new Comparator<String>() -->Line_5 $$ return path1.compareToIgnoreCase(path2)[ CD ]
Line_2 $$ private void buildFiles(@Nullable Pair<PackageSetBase, NamedScopesHolder> filter, boolean showOnlyFilteredItems) -->Line_26 $$ applyFilter(apply)[ CD ]
Line_12 $$ if (child.acceptFilter(filter, showOnlyFilteredItems)) -->Line_14 $$ if (showOnlyFilteredItems) [ CD ]
Line_3 $$ Collections.sort(myFilePaths, new Comparator<String>() -->Line_5 $$ return path1.compareToIgnoreCase(path2)[ FD ]
