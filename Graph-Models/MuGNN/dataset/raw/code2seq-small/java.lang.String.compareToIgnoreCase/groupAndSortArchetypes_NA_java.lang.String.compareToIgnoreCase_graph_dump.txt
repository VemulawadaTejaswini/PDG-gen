Line_2 $$ private static TreeNode groupAndSortArchetypes(Set<MavenArchetype> archetypes) -->Line_34 $$ return result[ CD ]
Line_4 $$ Collections.sort(list, new Comparator<MavenArchetype>() -->Line_7 $$ String key2 = o2.groupId + ":" + o2.artifactId[ CD ]
Line_2 $$ private static TreeNode groupAndSortArchetypes(Set<MavenArchetype> archetypes) -->Line_3 $$ List<MavenArchetype> list = new ArrayList<MavenArchetype>(archetypes)[ CD ]
Line_7 $$ String key2 = o2.groupId + ":" + o2.artifactId-->Line_8 $$ int result = key1.compareToIgnoreCase(key2)[ FD ]
Line_3 $$ List<MavenArchetype> list = new ArrayList<MavenArchetype>(archetypes)-->Line_4 $$ Collections.sort(list, new Comparator<MavenArchetype>() [ FD ]
Line_9 $$ if (result != 0)-->Line_10 $$ return result[ CD ]
Line_6 $$ String key1 = o1.groupId + ":" + o1.artifactId-->Line_8 $$ int result = key1.compareToIgnoreCase(key2)[ FD ]
Line_8 $$ int result = key1.compareToIgnoreCase(key2)-->Line_32 $$ result.add(node)[ FD ]
Line_2 $$ private static TreeNode groupAndSortArchetypes(Set<MavenArchetype> archetypes) -->Line_4 $$ Collections.sort(list, new Comparator<MavenArchetype>() [ CD ]
Line_18 $$ if (versions == null) -->Line_20 $$ map.put(key, versions)[ CD ]
Line_4 $$ Collections.sort(list, new Comparator<MavenArchetype>() -->Line_6 $$ String key1 = o1.groupId + ":" + o1.artifactId[ CD ]
Line_4 $$ Collections.sort(list, new Comparator<MavenArchetype>() -->Line_9 $$ if (result != 0)[ CD ]
Line_4 $$ Collections.sort(list, new Comparator<MavenArchetype>() -->Line_11 $$ return o2.version.compareToIgnoreCase(o1.version)[ CD ]
Line_8 $$ int result = key1.compareToIgnoreCase(key2)-->Line_9 $$ if (result != 0)[ FD ]
Line_4 $$ Collections.sort(list, new Comparator<MavenArchetype>() -->Line_8 $$ int result = key1.compareToIgnoreCase(key2)[ CD ]
