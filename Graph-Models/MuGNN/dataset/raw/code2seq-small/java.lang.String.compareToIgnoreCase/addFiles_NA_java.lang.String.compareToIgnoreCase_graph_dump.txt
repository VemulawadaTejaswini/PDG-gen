Line_7 $$ if (containsFile1 == containsFile2) -->Line_8 $$ return file1.getAbsolutePath().compareToIgnoreCase(file2.getAbsolutePath())[ CD ]
Line_6 $$ boolean containsFile2 = files.contains(file2)-->Line_7 $$ if (containsFile1 == containsFile2) [ FD ]
Line_3 $$ Collections.sort(roots, new Comparator<File>() -->Line_10 $$ return containsFile1 ? 1 : -1[ CD ]
Line_2 $$ private void addFiles(@NotNull AbstractTreeNode parentNode, @NotNull List<File> roots, @NotNull final Collection<File> files, @NotNull GroupByPackages groupByPackages, String parentPath) -->Line_6 $$ boolean containsFile2 = files.contains(file2)[ FD ]
Line_2 $$ private void addFiles(@NotNull AbstractTreeNode parentNode, @NotNull List<File> roots, @NotNull final Collection<File> files, @NotNull GroupByPackages groupByPackages, String parentPath) -->Line_14 $$ FileOrDirectoryTreeNode child = files.contains(root) ? new FileTreeNode(root.getAbsolutePath(), myInvalidAttributes, myProject, parentPath) : new DirectoryTreeNode(root.getAbsolutePath(), myProject, parentPath)[ FD ]
Line_3 $$ Collections.sort(roots, new Comparator<File>() -->Line_5 $$ boolean containsFile1 = files.contains(file1)[ CD ]
Line_2 $$ private void addFiles(@NotNull AbstractTreeNode parentNode, @NotNull List<File> roots, @NotNull final Collection<File> files, @NotNull GroupByPackages groupByPackages, String parentPath) -->Line_3 $$ Collections.sort(roots, new Comparator<File>() [ FD ]
Line_3 $$ Collections.sort(roots, new Comparator<File>() -->Line_8 $$ return file1.getAbsolutePath().compareToIgnoreCase(file2.getAbsolutePath())[ FD ]
Line_3 $$ Collections.sort(roots, new Comparator<File>() -->Line_5 $$ boolean containsFile1 = files.contains(file1)[ FD ]
Line_2 $$ private void addFiles(@NotNull AbstractTreeNode parentNode, @NotNull List<File> roots, @NotNull final Collection<File> files, @NotNull GroupByPackages groupByPackages, String parentPath) -->Line_17 $$ addFiles(child, groupByPackages.getChildren(root), files, groupByPackages, child.getFilePath())[ FD ]
Line_2 $$ private void addFiles(@NotNull AbstractTreeNode parentNode, @NotNull List<File> roots, @NotNull final Collection<File> files, @NotNull GroupByPackages groupByPackages, String parentPath) -->Line_3 $$ Collections.sort(roots, new Comparator<File>() [ CD ]
Line_3 $$ Collections.sort(roots, new Comparator<File>() -->Line_7 $$ if (containsFile1 == containsFile2) [ CD ]
Line_5 $$ boolean containsFile1 = files.contains(file1)-->Line_7 $$ if (containsFile1 == containsFile2) [ FD ]
Line_3 $$ Collections.sort(roots, new Comparator<File>() -->Line_6 $$ boolean containsFile2 = files.contains(file2)[ FD ]
Line_2 $$ private void addFiles(@NotNull AbstractTreeNode parentNode, @NotNull List<File> roots, @NotNull final Collection<File> files, @NotNull GroupByPackages groupByPackages, String parentPath) -->Line_16 $$ parentNode.add(child)[ FD ]
Line_3 $$ Collections.sort(roots, new Comparator<File>() -->Line_6 $$ boolean containsFile2 = files.contains(file2)[ CD ]
Line_2 $$ private void addFiles(@NotNull AbstractTreeNode parentNode, @NotNull List<File> roots, @NotNull final Collection<File> files, @NotNull GroupByPackages groupByPackages, String parentPath) -->Line_5 $$ boolean containsFile1 = files.contains(file1)[ FD ]
