Line_17 $$ if (o1 instanceof DirectoryChooser.ItemWrapper && o2 instanceof DirectoryChooser.ItemWrapper) -->Line_18 $$ final VirtualFile virtualFile1 = ((DirectoryChooser.ItemWrapper) o1).getDirectory().getVirtualFile()[ CD ]
Line_5 $$ final int index = Collections.binarySearch(children, nodeToInsert, new Comparator<DefaultMutableTreeNode>() -->Line_8 $$ final Object o2 = node2.getUserObject()[ CD ]
Line_2 $$ private void insertNode(final DefaultMutableTreeNode nodeToInsert, DefaultMutableTreeNode rootNode) -->Line_4 $$ ArrayList children = Collections.list(enumeration)[ CD ]
Line_8 $$ final Object o2 = node2.getUserObject()-->Line_13 $$ return o1.toString().compareToIgnoreCase(o2.toString())[ FD ]
Line_2 $$ private void insertNode(final DefaultMutableTreeNode nodeToInsert, DefaultMutableTreeNode rootNode) -->Line_26 $$ if (insertionPoint < 0 || insertionPoint > rootNode.getChildCount()) [ FD ]
Line_17 $$ if (o1 instanceof DirectoryChooser.ItemWrapper && o2 instanceof DirectoryChooser.ItemWrapper) -->Line_20 $$ return Comparing.compare(virtualFile1.getPath(), virtualFile2.getPath())[ CD ]
Line_5 $$ final int index = Collections.binarySearch(children, nodeToInsert, new Comparator<DefaultMutableTreeNode>() -->Line_15 $$ if (o1 instanceof ModuleGroup)[ CD ]
Line_15 $$ if (o1 instanceof ModuleGroup)-->Line_16 $$ return -1[ CD ]
Line_7 $$ final Object o1 = node1.getUserObject()-->Line_15 $$ if (o1 instanceof ModuleGroup)[ FD ]
Line_18 $$ final VirtualFile virtualFile1 = ((DirectoryChooser.ItemWrapper) o1).getDirectory().getVirtualFile()-->Line_20 $$ return Comparing.compare(virtualFile1.getPath(), virtualFile2.getPath())[ FD ]
Line_2 $$ private void insertNode(final DefaultMutableTreeNode nodeToInsert, DefaultMutableTreeNode rootNode) -->Line_26 $$ if (insertionPoint < 0 || insertionPoint > rootNode.getChildCount()) [ CD ]
Line_5 $$ final int index = Collections.binarySearch(children, nodeToInsert, new Comparator<DefaultMutableTreeNode>() -->Line_8 $$ final Object o2 = node2.getUserObject()[ FD ]
Line_17 $$ if (o1 instanceof DirectoryChooser.ItemWrapper && o2 instanceof DirectoryChooser.ItemWrapper) -->Line_19 $$ final VirtualFile virtualFile2 = ((DirectoryChooser.ItemWrapper) o2).getDirectory().getVirtualFile()[ CD ]
Line_5 $$ final int index = Collections.binarySearch(children, nodeToInsert, new Comparator<DefaultMutableTreeNode>() -->Line_17 $$ if (o1 instanceof DirectoryChooser.ItemWrapper && o2 instanceof DirectoryChooser.ItemWrapper) [ CD ]
Line_7 $$ final Object o1 = node1.getUserObject()-->Line_13 $$ return o1.toString().compareToIgnoreCase(o2.toString())[ FD ]
Line_26 $$ if (insertionPoint < 0 || insertionPoint > rootNode.getChildCount()) -->Line_28 $$ return[ CD ]
Line_2 $$ private void insertNode(final DefaultMutableTreeNode nodeToInsert, DefaultMutableTreeNode rootNode) -->Line_30 $$ rootNode.insert(nodeToInsert, insertionPoint)[ CD ]
Line_2 $$ private void insertNode(final DefaultMutableTreeNode nodeToInsert, DefaultMutableTreeNode rootNode) -->Line_30 $$ rootNode.insert(nodeToInsert, insertionPoint)[ FD ]
Line_2 $$ private void insertNode(final DefaultMutableTreeNode nodeToInsert, DefaultMutableTreeNode rootNode) -->Line_25 $$ final int insertionPoint = -(index + 1)[ CD ]
Line_2 $$ private void insertNode(final DefaultMutableTreeNode nodeToInsert, DefaultMutableTreeNode rootNode) -->Line_5 $$ final int index = Collections.binarySearch(children, nodeToInsert, new Comparator<DefaultMutableTreeNode>() [ FD ]
Line_2 $$ private void insertNode(final DefaultMutableTreeNode nodeToInsert, DefaultMutableTreeNode rootNode) -->Line_31 $$ ((DefaultTreeModel) myTree.getModel()).nodeStructureChanged(rootNode)[ FD ]
Line_5 $$ final int index = Collections.binarySearch(children, nodeToInsert, new Comparator<DefaultMutableTreeNode>() -->Line_12 $$ if (o1 instanceof ModuleGroup && o2 instanceof ModuleGroup) [ CD ]
Line_5 $$ final int index = Collections.binarySearch(children, nodeToInsert, new Comparator<DefaultMutableTreeNode>() -->Line_7 $$ final Object o1 = node1.getUserObject()[ CD ]
Line_4 $$ ArrayList children = Collections.list(enumeration)-->Line_5 $$ final int index = Collections.binarySearch(children, nodeToInsert, new Comparator<DefaultMutableTreeNode>() [ FD ]
Line_3 $$ final Enumeration enumeration = rootNode.children()-->Line_4 $$ ArrayList children = Collections.list(enumeration)[ FD ]
Line_2 $$ private void insertNode(final DefaultMutableTreeNode nodeToInsert, DefaultMutableTreeNode rootNode) -->Line_3 $$ final Enumeration enumeration = rootNode.children()[ FD ]
Line_5 $$ final int index = Collections.binarySearch(children, nodeToInsert, new Comparator<DefaultMutableTreeNode>() -->Line_9 $$ if (o1 instanceof Module && o2 instanceof Module) [ CD ]
Line_2 $$ private void insertNode(final DefaultMutableTreeNode nodeToInsert, DefaultMutableTreeNode rootNode) -->Line_3 $$ final Enumeration enumeration = rootNode.children()[ CD ]
Line_9 $$ if (o1 instanceof Module && o2 instanceof Module) -->Line_10 $$ return ((Module) o1).getName().compareToIgnoreCase(((Module) o2).getName())[ CD ]
Line_19 $$ final VirtualFile virtualFile2 = ((DirectoryChooser.ItemWrapper) o2).getDirectory().getVirtualFile()-->Line_20 $$ return Comparing.compare(virtualFile1.getPath(), virtualFile2.getPath())[ FD ]
Line_5 $$ final int index = Collections.binarySearch(children, nodeToInsert, new Comparator<DefaultMutableTreeNode>() -->Line_22 $$ return 1[ CD ]
Line_26 $$ if (insertionPoint < 0 || insertionPoint > rootNode.getChildCount()) -->Line_27 $$ LOG.error("insertionPoint = " + insertionPoint + "; children=" + children + "; node=" + nodeToInsert)[ CD ]
Line_2 $$ private void insertNode(final DefaultMutableTreeNode nodeToInsert, DefaultMutableTreeNode rootNode) -->Line_5 $$ final int index = Collections.binarySearch(children, nodeToInsert, new Comparator<DefaultMutableTreeNode>() [ CD ]
Line_12 $$ if (o1 instanceof ModuleGroup && o2 instanceof ModuleGroup) -->Line_13 $$ return o1.toString().compareToIgnoreCase(o2.toString())[ CD ]
Line_2 $$ private void insertNode(final DefaultMutableTreeNode nodeToInsert, DefaultMutableTreeNode rootNode) -->Line_31 $$ ((DefaultTreeModel) myTree.getModel()).nodeStructureChanged(rootNode)[ CD ]
Line_5 $$ final int index = Collections.binarySearch(children, nodeToInsert, new Comparator<DefaultMutableTreeNode>() -->Line_7 $$ final Object o1 = node1.getUserObject()[ FD ]
