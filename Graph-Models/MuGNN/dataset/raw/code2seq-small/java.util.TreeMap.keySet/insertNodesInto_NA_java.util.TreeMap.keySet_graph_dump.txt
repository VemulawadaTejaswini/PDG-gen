Line_2 $$ private void insertNodesInto(@NotNull final List<TreeNode> toInsert, @NotNull final DefaultMutableTreeNode parentNode) -->Line_5 $$ all.addAll(toInsert)[ FD ]
Line_2 $$ private void insertNodesInto(@NotNull final List<TreeNode> toInsert, @NotNull final DefaultMutableTreeNode parentNode) -->Line_8 $$ sortChildren(parentNode, all, true, true)[ FD ]
Line_2 $$ private void insertNodesInto(@NotNull final List<TreeNode> toInsert, @NotNull final DefaultMutableTreeNode parentNode) -->Line_34 $$ parentNode.removeAllChildren()[ FD ]
Line_30 $$ processInnerChange(new TreeRunnable("AbstractTreeUi.insertNodesInto") -->Line_34 $$ parentNode.removeAllChildren()[ CD ]
Line_2 $$ private void insertNodesInto(@NotNull final List<TreeNode> toInsert, @NotNull final DefaultMutableTreeNode parentNode) -->Line_12 $$ for (int i = 0; i < toInsert.size(); i++) [ FD ]
Line_7 $$ if (!toInsert.isEmpty()) -->Line_28 $$ sortChildren(parentNode, all, true, false)[ CD ]
Line_35 $$ for (TreeNode each : all) -->Line_46 $$ if (!getTree().getSelectionModel().isPathSelected(each)) [ FD ]
Line_7 $$ if (!toInsert.isEmpty()) -->Line_10 $$ int eachNewNodeIndex = 0[ CD ]
Line_2 $$ private void insertNodesInto(@NotNull final List<TreeNode> toInsert, @NotNull final DefaultMutableTreeNode parentNode) -->Line_4 $$ final List<TreeNode> all = new ArrayList<TreeNode>(toInsert.size() + parentNode.getChildCount())[ CD ]
Line_13 $$ TreeNode eachNewNode = toInsert.get(i)-->Line_14 $$ while (all.get(eachNewNodeIndex) != eachNewNode) [ FD ]
Line_29 $$ if (!before.equals(all)) -->Line_30 $$ processInnerChange(new TreeRunnable("AbstractTreeUi.insertNodesInto") [ CD ]
Line_2 $$ private void insertNodesInto(@NotNull final List<TreeNode> toInsert, @NotNull final DefaultMutableTreeNode parentNode) -->Line_24 $$ myTreeModel.nodesWereInserted(parentNode, newNodeIndices)[ FD ]
Line_30 $$ processInnerChange(new TreeRunnable("AbstractTreeUi.insertNodesInto") -->Line_44 $$ if (selected != null) [ CD ]
Line_26 $$ List<TreeNode> before = new ArrayList<TreeNode>()-->Line_27 $$ before.addAll(all)[ FD ]
Line_10 $$ int eachNewNodeIndex = 0-->Line_18 $$ insertSet.put(eachNewNodeIndex, eachNewNode)[ FD ]
Line_2 $$ private void insertNodesInto(@NotNull final List<TreeNode> toInsert, @NotNull final DefaultMutableTreeNode parentNode) -->Line_3 $$ sortChildren(parentNode, toInsert, false, true)[ CD ]
Line_7 $$ if (!toInsert.isEmpty()) -->Line_8 $$ sortChildren(parentNode, all, true, true)[ CD ]
Line_4 $$ final List<TreeNode> all = new ArrayList<TreeNode>(toInsert.size() + parentNode.getChildCount())-->Line_5 $$ all.addAll(toInsert)[ FD ]
Line_11 $$ TreeMap<Integer, TreeNode> insertSet = new TreeMap<Integer, TreeNode>()-->Line_18 $$ insertSet.put(eachNewNodeIndex, eachNewNode)[ FD ]
Line_11 $$ TreeMap<Integer, TreeNode> insertSet = new TreeMap<Integer, TreeNode>()-->Line_21 $$ TreeNode eachNode = insertSet.get(eachIndex)[ FD ]
Line_4 $$ final List<TreeNode> all = new ArrayList<TreeNode>(toInsert.size() + parentNode.getChildCount())-->Line_28 $$ sortChildren(parentNode, all, true, false)[ FD ]
Line_35 $$ for (TreeNode each : all) -->Line_47 $$ addSelectionSilently(each)[ FD ]
Line_13 $$ TreeNode eachNewNode = toInsert.get(i)-->Line_18 $$ insertSet.put(eachNewNodeIndex, eachNewNode)[ FD ]
Line_11 $$ TreeMap<Integer, TreeNode> insertSet = new TreeMap<Integer, TreeNode>()-->Line_20 $$ for (Integer eachIndex : insertSet.keySet()) [ FD ]
Line_32 $$ Enumeration<TreePath> expanded = getTree().getExpandedDescendants(getPathFor(parentNode))-->Line_41 $$ expandSilently(expanded.nextElement())[ FD ]
Line_30 $$ processInnerChange(new TreeRunnable("AbstractTreeUi.insertNodesInto") -->Line_39 $$ if (expanded != null) [ CD ]
Line_30 $$ processInnerChange(new TreeRunnable("AbstractTreeUi.insertNodesInto") -->Line_33 $$ TreePath[] selected = getTree().getSelectionModel().getSelectionPaths()[ CD ]
Line_7 $$ if (!toInsert.isEmpty()) -->Line_29 $$ if (!before.equals(all)) [ CD ]
Line_2 $$ private void insertNodesInto(@NotNull final List<TreeNode> toInsert, @NotNull final DefaultMutableTreeNode parentNode) -->Line_13 $$ TreeNode eachNewNode = toInsert.get(i)[ FD ]
Line_4 $$ final List<TreeNode> all = new ArrayList<TreeNode>(toInsert.size() + parentNode.getChildCount())-->Line_27 $$ before.addAll(all)[ FD ]
Line_4 $$ final List<TreeNode> all = new ArrayList<TreeNode>(toInsert.size() + parentNode.getChildCount())-->Line_14 $$ while (all.get(eachNewNodeIndex) != eachNewNode) [ FD ]
Line_2 $$ private void insertNodesInto(@NotNull final List<TreeNode> toInsert, @NotNull final DefaultMutableTreeNode parentNode) -->Line_4 $$ final List<TreeNode> all = new ArrayList<TreeNode>(toInsert.size() + parentNode.getChildCount())[ FD ]
Line_30 $$ processInnerChange(new TreeRunnable("AbstractTreeUi.insertNodesInto") -->Line_32 $$ Enumeration<TreePath> expanded = getTree().getExpandedDescendants(getPathFor(parentNode))[ CD ]
Line_7 $$ if (!toInsert.isEmpty()) -->Line_12 $$ for (int i = 0; i < toInsert.size(); i++) [ CD ]
Line_20 $$ for (Integer eachIndex : insertSet.keySet()) -->Line_22 $$ parentNode.insert((MutableTreeNode) eachNode, eachIndex)[ FD ]
Line_12 $$ for (int i = 0; i < toInsert.size(); i++) -->Line_17 $$ newNodeIndices[i] = eachNewNodeIndex[ CD ]
Line_26 $$ List<TreeNode> before = new ArrayList<TreeNode>()-->Line_29 $$ if (!before.equals(all)) [ FD ]
Line_2 $$ private void insertNodesInto(@NotNull final List<TreeNode> toInsert, @NotNull final DefaultMutableTreeNode parentNode) -->Line_7 $$ if (!toInsert.isEmpty()) [ CD ]
Line_12 $$ for (int i = 0; i < toInsert.size(); i++) -->Line_13 $$ TreeNode eachNewNode = toInsert.get(i)[ CD ]
Line_2 $$ private void insertNodesInto(@NotNull final List<TreeNode> toInsert, @NotNull final DefaultMutableTreeNode parentNode) -->Line_9 $$ int[] newNodeIndices = new int[toInsert.size()][ FD ]
Line_2 $$ private void insertNodesInto(@NotNull final List<TreeNode> toInsert, @NotNull final DefaultMutableTreeNode parentNode) -->Line_36 $$ parentNode.add((MutableTreeNode) each)[ FD ]
Line_2 $$ private void insertNodesInto(@NotNull final List<TreeNode> toInsert, @NotNull final DefaultMutableTreeNode parentNode) -->Line_38 $$ myTreeModel.nodeStructureChanged(parentNode)[ FD ]
Line_32 $$ Enumeration<TreePath> expanded = getTree().getExpandedDescendants(getPathFor(parentNode))-->Line_39 $$ if (expanded != null) [ FD ]
Line_32 $$ Enumeration<TreePath> expanded = getTree().getExpandedDescendants(getPathFor(parentNode))-->Line_40 $$ while (expanded.hasMoreElements()) [ FD ]
Line_7 $$ if (!toInsert.isEmpty()) -->Line_26 $$ List<TreeNode> before = new ArrayList<TreeNode>()[ CD ]
Line_9 $$ int[] newNodeIndices = new int[toInsert.size()]-->Line_24 $$ myTreeModel.nodesWereInserted(parentNode, newNodeIndices)[ FD ]
Line_10 $$ int eachNewNodeIndex = 0-->Line_14 $$ while (all.get(eachNewNodeIndex) != eachNewNode) [ FD ]
Line_12 $$ for (int i = 0; i < toInsert.size(); i++) -->Line_13 $$ TreeNode eachNewNode = toInsert.get(i)[ FD ]
Line_12 $$ for (int i = 0; i < toInsert.size(); i++) -->Line_14 $$ while (all.get(eachNewNodeIndex) != eachNewNode) [ CD ]
Line_7 $$ if (!toInsert.isEmpty()) -->Line_27 $$ before.addAll(all)[ CD ]
Line_4 $$ final List<TreeNode> all = new ArrayList<TreeNode>(toInsert.size() + parentNode.getChildCount())-->Line_6 $$ all.addAll(TreeUtil.childrenToArray(parentNode))[ FD ]
Line_14 $$ while (all.get(eachNewNodeIndex) != eachNewNode) -->Line_15 $$ eachNewNodeIndex++[ CD ]
Line_7 $$ if (!toInsert.isEmpty()) -->Line_24 $$ myTreeModel.nodesWereInserted(parentNode, newNodeIndices)[ CD ]
Line_2 $$ private void insertNodesInto(@NotNull final List<TreeNode> toInsert, @NotNull final DefaultMutableTreeNode parentNode) -->Line_32 $$ Enumeration<TreePath> expanded = getTree().getExpandedDescendants(getPathFor(parentNode))[ FD ]
Line_46 $$ if (!getTree().getSelectionModel().isPathSelected(each)) -->Line_47 $$ addSelectionSilently(each)[ CD ]
Line_2 $$ private void insertNodesInto(@NotNull final List<TreeNode> toInsert, @NotNull final DefaultMutableTreeNode parentNode) -->Line_7 $$ if (!toInsert.isEmpty()) [ FD ]
Line_20 $$ for (Integer eachIndex : insertSet.keySet()) -->Line_21 $$ TreeNode eachNode = insertSet.get(eachIndex)[ FD ]
Line_2 $$ private void insertNodesInto(@NotNull final List<TreeNode> toInsert, @NotNull final DefaultMutableTreeNode parentNode) -->Line_6 $$ all.addAll(TreeUtil.childrenToArray(parentNode))[ CD ]
Line_4 $$ final List<TreeNode> all = new ArrayList<TreeNode>(toInsert.size() + parentNode.getChildCount())-->Line_29 $$ if (!before.equals(all)) [ FD ]
Line_4 $$ final List<TreeNode> all = new ArrayList<TreeNode>(toInsert.size() + parentNode.getChildCount())-->Line_8 $$ sortChildren(parentNode, all, true, true)[ FD ]
Line_7 $$ if (!toInsert.isEmpty()) -->Line_11 $$ TreeMap<Integer, TreeNode> insertSet = new TreeMap<Integer, TreeNode>()[ CD ]
Line_2 $$ private void insertNodesInto(@NotNull final List<TreeNode> toInsert, @NotNull final DefaultMutableTreeNode parentNode) -->Line_28 $$ sortChildren(parentNode, all, true, false)[ FD ]
Line_33 $$ TreePath[] selected = getTree().getSelectionModel().getSelectionPaths()-->Line_44 $$ if (selected != null) [ FD ]
Line_2 $$ private void insertNodesInto(@NotNull final List<TreeNode> toInsert, @NotNull final DefaultMutableTreeNode parentNode) -->Line_3 $$ sortChildren(parentNode, toInsert, false, true)[ FD ]
Line_2 $$ private void insertNodesInto(@NotNull final List<TreeNode> toInsert, @NotNull final DefaultMutableTreeNode parentNode) -->Line_5 $$ all.addAll(toInsert)[ CD ]
Line_10 $$ int eachNewNodeIndex = 0-->Line_17 $$ newNodeIndices[i] = eachNewNodeIndex[ FD ]
Line_10 $$ int eachNewNodeIndex = 0-->Line_15 $$ eachNewNodeIndex++[ FD ]
Line_2 $$ private void insertNodesInto(@NotNull final List<TreeNode> toInsert, @NotNull final DefaultMutableTreeNode parentNode) -->Line_6 $$ all.addAll(TreeUtil.childrenToArray(parentNode))[ FD ]
Line_12 $$ for (int i = 0; i < toInsert.size(); i++) -->Line_18 $$ insertSet.put(eachNewNodeIndex, eachNewNode)[ CD ]
Line_2 $$ private void insertNodesInto(@NotNull final List<TreeNode> toInsert, @NotNull final DefaultMutableTreeNode parentNode) -->Line_22 $$ parentNode.insert((MutableTreeNode) eachNode, eachIndex)[ FD ]
Line_39 $$ if (expanded != null) -->Line_40 $$ while (expanded.hasMoreElements()) [ CD ]
Line_7 $$ if (!toInsert.isEmpty()) -->Line_9 $$ int[] newNodeIndices = new int[toInsert.size()][ CD ]
Line_40 $$ while (expanded.hasMoreElements()) -->Line_41 $$ expandSilently(expanded.nextElement())[ CD ]
Line_30 $$ processInnerChange(new TreeRunnable("AbstractTreeUi.insertNodesInto") -->Line_38 $$ myTreeModel.nodeStructureChanged(parentNode)[ CD ]
