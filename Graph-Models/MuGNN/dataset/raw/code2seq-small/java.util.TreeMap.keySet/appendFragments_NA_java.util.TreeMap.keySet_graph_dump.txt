Line_46 $$ final String after = text.substring(idx, text.length())-->Line_47 $$ if (after.length() > 0)[ FD ]
Line_13 $$ int idx-->Line_15 $$ indx.put(idx, text.substring(idx, idx + stripped.length()))[ FD ]
Line_2 $$ public static void appendFragments(String filter, @NonNls String text, @SimpleTextAttributes.StyleAttributeConstant int style, final Color foreground, final Color background, final SimpleColoredComponent textRenderer) -->Line_3 $$ if (text == null)[ CD ]
Line_20 $$ int pos = 0-->Line_32 $$ appendSelectedWords(text, selectedWords, pos, start, filter)[ FD ]
Line_21 $$ for (Integer index : indx.keySet()) -->Line_22 $$ final String stripped = indx.get(index)[ FD ]
Line_19 $$ final List<String> selectedWords = new ArrayList<String>()-->Line_32 $$ appendSelectedWords(text, selectedWords, pos, start, filter)[ FD ]
Line_9 $$ filter = processFilter(quoteStrictOccurrences(text, filter), quoted)-->Line_32 $$ appendSelectedWords(text, selectedWords, pos, start, filter)[ FD ]
Line_2 $$ public static void appendFragments(String filter, @NonNls String text, @SimpleTextAttributes.StyleAttributeConstant int style, final Color foreground, final Color background, final SimpleColoredComponent textRenderer) -->Line_43 $$ idx = text.indexOf(word) + word.length()[ FD ]
Line_20 $$ int pos = 0-->Line_34 $$ pos = start + stripped.length()[ FD ]
Line_2 $$ public static void appendFragments(String filter, @NonNls String text, @SimpleTextAttributes.StyleAttributeConstant int style, final Color foreground, final Color background, final SimpleColoredComponent textRenderer) -->Line_42 $$ textRenderer.append(before, new SimpleTextAttributes(background, foreground, null, style))[ FD ]
Line_8 $$ final HashSet<String> quoted = new HashSet<String>()-->Line_9 $$ filter = processFilter(quoteStrictOccurrences(text, filter), quoted)[ FD ]
Line_10 $$ final TreeMap<Integer, String> indx = new TreeMap<Integer, String>()-->Line_21 $$ for (Integer index : indx.keySet()) [ FD ]
Line_20 $$ int pos = 0-->Line_24 $$ if (pos > start) [ FD ]
Line_41 $$ if (before.length() > 0)-->Line_42 $$ textRenderer.append(before, new SimpleTextAttributes(background, foreground, null, style))[ CD ]
Line_5 $$ if (filter == null || filter.length() == 0) -->Line_8 $$ final HashSet<String> quoted = new HashSet<String>()[ CD ]
Line_2 $$ public static void appendFragments(String filter, @NonNls String text, @SimpleTextAttributes.StyleAttributeConstant int style, final Color foreground, final Color background, final SimpleColoredComponent textRenderer) -->Line_46 $$ final String after = text.substring(idx, text.length())[ FD ]
Line_11 $$ for (String stripped : quoted) -->Line_16 $$ beg = idx + stripped.length()[ FD ]
Line_14 $$ while ((idx = StringUtil.indexOfIgnoreCase(text, stripped, beg)) != -1) -->Line_39 $$ text = text.substring(idx)[ FD ]
Line_10 $$ final TreeMap<Integer, String> indx = new TreeMap<Integer, String>()-->Line_15 $$ indx.put(idx, text.substring(idx, idx + stripped.length()))[ FD ]
Line_47 $$ if (after.length() > 0)-->Line_48 $$ textRenderer.append(after, new SimpleTextAttributes(background, foreground, null, style))[ CD ]
Line_11 $$ for (String stripped : quoted) -->Line_26 $$ if (highlighted.length() < stripped.length()) [ FD ]
Line_46 $$ final String after = text.substring(idx, text.length())-->Line_48 $$ textRenderer.append(after, new SimpleTextAttributes(background, foreground, null, style))[ FD ]
Line_5 $$ if (filter == null || filter.length() == 0) -->Line_19 $$ final List<String> selectedWords = new ArrayList<String>()[ CD ]
Line_2 $$ public static void appendFragments(String filter, @NonNls String text, @SimpleTextAttributes.StyleAttributeConstant int style, final Color foreground, final Color background, final SimpleColoredComponent textRenderer) -->Line_14 $$ while ((idx = StringUtil.indexOfIgnoreCase(text, stripped, beg)) != -1) [ FD ]
Line_2 $$ public static void appendFragments(String filter, @NonNls String text, @SimpleTextAttributes.StyleAttributeConstant int style, final Color foreground, final Color background, final SimpleColoredComponent textRenderer) -->Line_40 $$ final String before = text.substring(0, text.indexOf(word))[ FD ]
Line_13 $$ int idx-->Line_16 $$ beg = idx + stripped.length()[ FD ]
Line_25 $$ final String highlighted = selectedWords.get(selectedWords.size() - 1)-->Line_27 $$ selectedWords.remove(highlighted)[ FD ]
Line_14 $$ while ((idx = StringUtil.indexOfIgnoreCase(text, stripped, beg)) != -1) -->Line_44 $$ textRenderer.append(text.substring(idx - word.length(), idx), new SimpleTextAttributes(background, foreground, null, style | SimpleTextAttributes.STYLE_SEARCH_MATCH))[ FD ]
Line_2 $$ public static void appendFragments(String filter, @NonNls String text, @SimpleTextAttributes.StyleAttributeConstant int style, final Color foreground, final Color background, final SimpleColoredComponent textRenderer) -->Line_5 $$ if (filter == null || filter.length() == 0) [ CD ]
Line_21 $$ for (Integer index : indx.keySet()) -->Line_23 $$ final int start = index.intValue()[ FD ]
Line_14 $$ while ((idx = StringUtil.indexOfIgnoreCase(text, stripped, beg)) != -1) -->Line_46 $$ final String after = text.substring(idx, text.length())[ FD ]
Line_2 $$ public static void appendFragments(String filter, @NonNls String text, @SimpleTextAttributes.StyleAttributeConstant int style, final Color foreground, final Color background, final SimpleColoredComponent textRenderer) -->Line_9 $$ filter = processFilter(quoteStrictOccurrences(text, filter), quoted)[ FD ]
Line_23 $$ final int start = index.intValue()-->Line_34 $$ pos = start + stripped.length()[ FD ]
Line_5 $$ if (filter == null || filter.length() == 0) -->Line_20 $$ int pos = 0[ CD ]
Line_43 $$ idx = text.indexOf(word) + word.length()-->Line_46 $$ final String after = text.substring(idx, text.length())[ FD ]
Line_16 $$ beg = idx + stripped.length()-->Line_14 $$ while ((idx = StringUtil.indexOfIgnoreCase(text, stripped, beg)) != -1) [ FD ]
Line_2 $$ public static void appendFragments(String filter, @NonNls String text, @SimpleTextAttributes.StyleAttributeConstant int style, final Color foreground, final Color background, final SimpleColoredComponent textRenderer) -->Line_15 $$ indx.put(idx, text.substring(idx, idx + stripped.length()))[ FD ]
Line_26 $$ if (highlighted.length() < stripped.length()) -->Line_27 $$ selectedWords.remove(highlighted)[ CD ]
Line_2 $$ public static void appendFragments(String filter, @NonNls String text, @SimpleTextAttributes.StyleAttributeConstant int style, final Color foreground, final Color background, final SimpleColoredComponent textRenderer) -->Line_5 $$ if (filter == null || filter.length() == 0) [ FD ]
Line_2 $$ public static void appendFragments(String filter, @NonNls String text, @SimpleTextAttributes.StyleAttributeConstant int style, final Color foreground, final Color background, final SimpleColoredComponent textRenderer) -->Line_6 $$ textRenderer.append(text, new SimpleTextAttributes(background, foreground, JBColor.RED, style))[ FD ]
Line_25 $$ final String highlighted = selectedWords.get(selectedWords.size() - 1)-->Line_26 $$ if (highlighted.length() < stripped.length()) [ FD ]
Line_23 $$ final int start = index.intValue()-->Line_32 $$ appendSelectedWords(text, selectedWords, pos, start, filter)[ FD ]
Line_11 $$ for (String stripped : quoted) -->Line_15 $$ indx.put(idx, text.substring(idx, idx + stripped.length()))[ FD ]
Line_38 $$ for (String word : selectedWords) -->Line_44 $$ textRenderer.append(text.substring(idx - word.length(), idx), new SimpleTextAttributes(background, foreground, null, style | SimpleTextAttributes.STYLE_SEARCH_MATCH))[ FD ]
Line_24 $$ if (pos > start) -->Line_26 $$ if (highlighted.length() < stripped.length()) [ CD ]
Line_2 $$ public static void appendFragments(String filter, @NonNls String text, @SimpleTextAttributes.StyleAttributeConstant int style, final Color foreground, final Color background, final SimpleColoredComponent textRenderer) -->Line_36 $$ appendSelectedWords(text, selectedWords, pos, text.length(), filter)[ FD ]
Line_5 $$ if (filter == null || filter.length() == 0) -->Line_9 $$ filter = processFilter(quoteStrictOccurrences(text, filter), quoted)[ CD ]
Line_24 $$ if (pos > start) -->Line_25 $$ final String highlighted = selectedWords.get(selectedWords.size() - 1)[ CD ]
Line_3 $$ if (text == null)-->Line_4 $$ return[ CD ]
Line_13 $$ int idx-->Line_39 $$ text = text.substring(idx)[ FD ]
Line_14 $$ while ((idx = StringUtil.indexOfIgnoreCase(text, stripped, beg)) != -1) -->Line_15 $$ indx.put(idx, text.substring(idx, idx + stripped.length()))[ CD ]
Line_2 $$ public static void appendFragments(String filter, @NonNls String text, @SimpleTextAttributes.StyleAttributeConstant int style, final Color foreground, final Color background, final SimpleColoredComponent textRenderer) -->Line_3 $$ if (text == null)[ FD ]
Line_19 $$ final List<String> selectedWords = new ArrayList<String>()-->Line_36 $$ appendSelectedWords(text, selectedWords, pos, text.length(), filter)[ FD ]
Line_11 $$ for (String stripped : quoted) -->Line_34 $$ pos = start + stripped.length()[ FD ]
Line_34 $$ pos = start + stripped.length()-->Line_36 $$ appendSelectedWords(text, selectedWords, pos, text.length(), filter)[ FD ]
Line_13 $$ int idx-->Line_43 $$ idx = text.indexOf(word) + word.length()[ FD ]
Line_2 $$ public static void appendFragments(String filter, @NonNls String text, @SimpleTextAttributes.StyleAttributeConstant int style, final Color foreground, final Color background, final SimpleColoredComponent textRenderer) -->Line_39 $$ text = text.substring(idx)[ FD ]
Line_5 $$ if (filter == null || filter.length() == 0) -->Line_6 $$ textRenderer.append(text, new SimpleTextAttributes(background, foreground, JBColor.RED, style))[ CD ]
Line_2 $$ public static void appendFragments(String filter, @NonNls String text, @SimpleTextAttributes.StyleAttributeConstant int style, final Color foreground, final Color background, final SimpleColoredComponent textRenderer) -->Line_32 $$ appendSelectedWords(text, selectedWords, pos, start, filter)[ FD ]
Line_43 $$ idx = text.indexOf(word) + word.length()-->Line_44 $$ textRenderer.append(text.substring(idx - word.length(), idx), new SimpleTextAttributes(background, foreground, null, style | SimpleTextAttributes.STYLE_SEARCH_MATCH))[ FD ]
Line_13 $$ int idx-->Line_14 $$ while ((idx = StringUtil.indexOfIgnoreCase(text, stripped, beg)) != -1) [ FD ]
Line_14 $$ while ((idx = StringUtil.indexOfIgnoreCase(text, stripped, beg)) != -1) -->Line_43 $$ idx = text.indexOf(word) + word.length()[ FD ]
Line_19 $$ final List<String> selectedWords = new ArrayList<String>()-->Line_33 $$ selectedWords.add(stripped)[ FD ]
Line_19 $$ final List<String> selectedWords = new ArrayList<String>()-->Line_27 $$ selectedWords.remove(highlighted)[ FD ]
Line_11 $$ for (String stripped : quoted) -->Line_33 $$ selectedWords.add(stripped)[ FD ]
Line_11 $$ for (String stripped : quoted) -->Line_14 $$ while ((idx = StringUtil.indexOfIgnoreCase(text, stripped, beg)) != -1) [ FD ]
Line_40 $$ final String before = text.substring(0, text.indexOf(word))-->Line_42 $$ textRenderer.append(before, new SimpleTextAttributes(background, foreground, null, style))[ FD ]
Line_5 $$ if (filter == null || filter.length() == 0) -->Line_47 $$ if (after.length() > 0)[ CD ]
Line_12 $$ int beg = 0-->Line_14 $$ while ((idx = StringUtil.indexOfIgnoreCase(text, stripped, beg)) != -1) [ FD ]
Line_14 $$ while ((idx = StringUtil.indexOfIgnoreCase(text, stripped, beg)) != -1) -->Line_16 $$ beg = idx + stripped.length()[ CD ]
Line_19 $$ final List<String> selectedWords = new ArrayList<String>()-->Line_25 $$ final String highlighted = selectedWords.get(selectedWords.size() - 1)[ FD ]
Line_14 $$ while ((idx = StringUtil.indexOfIgnoreCase(text, stripped, beg)) != -1) -->Line_16 $$ beg = idx + stripped.length()[ FD ]
Line_12 $$ int beg = 0-->Line_16 $$ beg = idx + stripped.length()[ FD ]
Line_13 $$ int idx-->Line_44 $$ textRenderer.append(text.substring(idx - word.length(), idx), new SimpleTextAttributes(background, foreground, null, style | SimpleTextAttributes.STYLE_SEARCH_MATCH))[ FD ]
Line_14 $$ while ((idx = StringUtil.indexOfIgnoreCase(text, stripped, beg)) != -1) -->Line_15 $$ indx.put(idx, text.substring(idx, idx + stripped.length()))[ FD ]
Line_5 $$ if (filter == null || filter.length() == 0) -->Line_10 $$ final TreeMap<Integer, String> indx = new TreeMap<Integer, String>()[ CD ]
Line_38 $$ for (String word : selectedWords) -->Line_43 $$ idx = text.indexOf(word) + word.length()[ FD ]
Line_5 $$ if (filter == null || filter.length() == 0) -->Line_36 $$ appendSelectedWords(text, selectedWords, pos, text.length(), filter)[ CD ]
Line_13 $$ int idx-->Line_46 $$ final String after = text.substring(idx, text.length())[ FD ]
Line_40 $$ final String before = text.substring(0, text.indexOf(word))-->Line_41 $$ if (before.length() > 0)[ FD ]
Line_9 $$ filter = processFilter(quoteStrictOccurrences(text, filter), quoted)-->Line_36 $$ appendSelectedWords(text, selectedWords, pos, text.length(), filter)[ FD ]
Line_20 $$ int pos = 0-->Line_36 $$ appendSelectedWords(text, selectedWords, pos, text.length(), filter)[ FD ]
Line_10 $$ final TreeMap<Integer, String> indx = new TreeMap<Integer, String>()-->Line_22 $$ final String stripped = indx.get(index)[ FD ]
Line_2 $$ public static void appendFragments(String filter, @NonNls String text, @SimpleTextAttributes.StyleAttributeConstant int style, final Color foreground, final Color background, final SimpleColoredComponent textRenderer) -->Line_44 $$ textRenderer.append(text.substring(idx - word.length(), idx), new SimpleTextAttributes(background, foreground, null, style | SimpleTextAttributes.STYLE_SEARCH_MATCH))[ FD ]
Line_5 $$ if (filter == null || filter.length() == 0) -->Line_46 $$ final String after = text.substring(idx, text.length())[ CD ]
Line_23 $$ final int start = index.intValue()-->Line_24 $$ if (pos > start) [ FD ]
Line_38 $$ for (String word : selectedWords) -->Line_40 $$ final String before = text.substring(0, text.indexOf(word))[ FD ]
Line_2 $$ public static void appendFragments(String filter, @NonNls String text, @SimpleTextAttributes.StyleAttributeConstant int style, final Color foreground, final Color background, final SimpleColoredComponent textRenderer) -->Line_48 $$ textRenderer.append(after, new SimpleTextAttributes(background, foreground, null, style))[ FD ]
