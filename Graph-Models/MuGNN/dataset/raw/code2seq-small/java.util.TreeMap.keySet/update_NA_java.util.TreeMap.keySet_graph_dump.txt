Line_8 $$ while (bin.size() > maxBinSize) -->Line_25 $$ long k2 = bin.remove(q2)[ CD ]
Line_4 $$ if (mi != null) -->Line_5 $$ bin.put(p, mi + m)[ CD ]
Line_14 $$ while (keys.hasNext()) -->Line_18 $$ if (diff < smallestDiff) [ CD ]
Line_12 $$ double smallestDiff = p2 - p1-->Line_19 $$ smallestDiff = diff[ FD ]
Line_14 $$ while (keys.hasNext()) -->Line_17 $$ double diff = p2 - p1[ CD ]
Line_17 $$ double diff = p2 - p1-->Line_19 $$ smallestDiff = diff[ FD ]
Line_18 $$ if (diff < smallestDiff) -->Line_20 $$ q1 = p1[ CD ]
Line_15 $$ p1 = p2-->Line_20 $$ q1 = p1[ FD ]
Line_10 $$ double p1 = keys.next()-->Line_20 $$ q1 = p1[ FD ]
Line_19 $$ smallestDiff = diff-->Line_18 $$ if (diff < smallestDiff) [ FD ]
Line_14 $$ while (keys.hasNext()) -->Line_15 $$ p1 = p2[ CD ]
Line_8 $$ while (bin.size() > maxBinSize) -->Line_9 $$ Iterator<Double> keys = bin.keySet().iterator()[ CD ]
Line_11 $$ double p2 = keys.next()-->Line_16 $$ p2 = keys.next()[ FD ]
Line_4 $$ if (mi != null) -->Line_8 $$ while (bin.size() > maxBinSize) [ CD ]
Line_9 $$ Iterator<Double> keys = bin.keySet().iterator()-->Line_10 $$ double p1 = keys.next()[ FD ]
Line_12 $$ double smallestDiff = p2 - p1-->Line_18 $$ if (diff < smallestDiff) [ FD ]
Line_2 $$ public void update(double p, long m) -->Line_7 $$ bin.put(p, m)[ FD ]
Line_8 $$ while (bin.size() > maxBinSize) -->Line_14 $$ while (keys.hasNext()) [ CD ]
Line_17 $$ double diff = p2 - p1-->Line_18 $$ if (diff < smallestDiff) [ FD ]
Line_20 $$ q1 = p1-->Line_24 $$ long k1 = bin.remove(q1)[ FD ]
Line_16 $$ p2 = keys.next()-->Line_21 $$ q2 = p2[ FD ]
Line_10 $$ double p1 = keys.next()-->Line_15 $$ p1 = p2[ FD ]
Line_4 $$ if (mi != null) -->Line_7 $$ bin.put(p, m)[ CD ]
Line_18 $$ if (diff < smallestDiff) -->Line_19 $$ smallestDiff = diff[ CD ]
Line_2 $$ public void update(double p, long m) -->Line_3 $$ Long mi = bin.get(p)[ CD ]
Line_2 $$ public void update(double p, long m) -->Line_5 $$ bin.put(p, mi + m)[ FD ]
Line_9 $$ Iterator<Double> keys = bin.keySet().iterator()-->Line_16 $$ p2 = keys.next()[ FD ]
Line_9 $$ Iterator<Double> keys = bin.keySet().iterator()-->Line_11 $$ double p2 = keys.next()[ FD ]
Line_8 $$ while (bin.size() > maxBinSize) -->Line_10 $$ double p1 = keys.next()[ CD ]
Line_2 $$ public void update(double p, long m) -->Line_3 $$ Long mi = bin.get(p)[ FD ]
Line_2 $$ public void update(double p, long m) -->Line_4 $$ if (mi != null) [ CD ]
Line_18 $$ if (diff < smallestDiff) -->Line_21 $$ q2 = p2[ CD ]
Line_13 $$ double q1 = p1, q2 = p2-->Line_25 $$ long k2 = bin.remove(q2)[ FD ]
Line_3 $$ Long mi = bin.get(p)-->Line_4 $$ if (mi != null) [ FD ]
Line_8 $$ while (bin.size() > maxBinSize) -->Line_26 $$ bin.put((q1 * k1 + q2 * k2) / (k1 + k2), k1 + k2)[ CD ]
Line_13 $$ double q1 = p1, q2 = p2-->Line_21 $$ q2 = p2[ FD ]
Line_16 $$ p2 = keys.next()-->Line_15 $$ p1 = p2[ FD ]
Line_13 $$ double q1 = p1, q2 = p2-->Line_20 $$ q1 = p1[ FD ]
Line_21 $$ q2 = p2-->Line_25 $$ long k2 = bin.remove(q2)[ FD ]
Line_8 $$ while (bin.size() > maxBinSize) -->Line_24 $$ long k1 = bin.remove(q1)[ CD ]
Line_14 $$ while (keys.hasNext()) -->Line_16 $$ p2 = keys.next()[ CD ]
Line_13 $$ double q1 = p1, q2 = p2-->Line_24 $$ long k1 = bin.remove(q1)[ FD ]
Line_9 $$ Iterator<Double> keys = bin.keySet().iterator()-->Line_14 $$ while (keys.hasNext()) [ FD ]
Line_8 $$ while (bin.size() > maxBinSize) -->Line_11 $$ double p2 = keys.next()[ CD ]
Line_11 $$ double p2 = keys.next()-->Line_21 $$ q2 = p2[ FD ]
Line_8 $$ while (bin.size() > maxBinSize) -->Line_12 $$ double smallestDiff = p2 - p1[ CD ]
Line_11 $$ double p2 = keys.next()-->Line_15 $$ p1 = p2[ FD ]
Line_8 $$ while (bin.size() > maxBinSize) -->Line_13 $$ double q1 = p1, q2 = p2[ CD ]
