Line_2 $$ private void addConfigurationConsoles(@NotNull LogFileOptions logFile, @NotNull Condition<String> shouldInclude, @NotNull Set<String> paths, @NotNull RunConfigurationBase runConfiguration) -->Line_7 $$ if (paths.size() == 1) [ CD ]
Line_14 $$ if (shouldInclude.value(path)) -->Line_15 $$ String title = new File(path).getName()[ CD ]
Line_2 $$ private void addConfigurationConsoles(@NotNull LogFileOptions logFile, @NotNull Condition<String> shouldInclude, @NotNull Set<String> paths, @NotNull RunConfigurationBase runConfiguration) -->Line_6 $$ TreeMap<String, String> titleToPath = new TreeMap<String, String>()[ CD ]
Line_7 $$ if (paths.size() == 1) -->Line_8 $$ String path = paths.iterator().next()[ CD ]
Line_8 $$ String path = paths.iterator().next()-->Line_19 $$ titleToPath.put(title, path)[ FD ]
Line_15 $$ String title = new File(path).getName()-->Line_19 $$ titleToPath.put(title, path)[ FD ]
Line_6 $$ TreeMap<String, String> titleToPath = new TreeMap<String, String>()-->Line_23 $$ for (String title : titleToPath.keySet()) [ FD ]
Line_6 $$ TreeMap<String, String> titleToPath = new TreeMap<String, String>()-->Line_16 $$ if (titleToPath.containsKey(title)) [ FD ]
Line_2 $$ private void addConfigurationConsoles(@NotNull LogFileOptions logFile, @NotNull Condition<String> shouldInclude, @NotNull Set<String> paths, @NotNull RunConfigurationBase runConfiguration) -->Line_8 $$ String path = paths.iterator().next()[ FD ]
Line_15 $$ String title = new File(path).getName()-->Line_16 $$ if (titleToPath.containsKey(title)) [ FD ]
Line_7 $$ if (paths.size() == 1) -->Line_9 $$ if (shouldInclude.value(path)) [ CD ]
Line_2 $$ private void addConfigurationConsoles(@NotNull LogFileOptions logFile, @NotNull Condition<String> shouldInclude, @NotNull Set<String> paths, @NotNull RunConfigurationBase runConfiguration) -->Line_7 $$ if (paths.size() == 1) [ FD ]
Line_14 $$ if (shouldInclude.value(path)) -->Line_16 $$ if (titleToPath.containsKey(title)) [ CD ]
Line_17 $$ title = path-->Line_19 $$ titleToPath.put(title, path)[ FD ]
Line_6 $$ TreeMap<String, String> titleToPath = new TreeMap<String, String>()-->Line_24 $$ String path = titleToPath.get(title)[ FD ]
Line_6 $$ TreeMap<String, String> titleToPath = new TreeMap<String, String>()-->Line_10 $$ titleToPath.put(logFile.getName(), path)[ FD ]
Line_17 $$ title = path-->Line_26 $$ myManager.addLogConsole(title, path, logFile.getCharset(), logFile.isSkipContent() ? new File(path).length() : 0, runConfiguration)[ FD ]
Line_14 $$ if (shouldInclude.value(path)) -->Line_19 $$ titleToPath.put(title, path)[ CD ]
Line_2 $$ private void addConfigurationConsoles(@NotNull LogFileOptions logFile, @NotNull Condition<String> shouldInclude, @NotNull Set<String> paths, @NotNull RunConfigurationBase runConfiguration) -->Line_3 $$ if (paths.isEmpty()) [ CD ]
Line_8 $$ String path = paths.iterator().next()-->Line_10 $$ titleToPath.put(logFile.getName(), path)[ FD ]
Line_15 $$ String title = new File(path).getName()-->Line_26 $$ myManager.addLogConsole(title, path, logFile.getCharset(), logFile.isSkipContent() ? new File(path).length() : 0, runConfiguration)[ FD ]
Line_2 $$ private void addConfigurationConsoles(@NotNull LogFileOptions logFile, @NotNull Condition<String> shouldInclude, @NotNull Set<String> paths, @NotNull RunConfigurationBase runConfiguration) -->Line_10 $$ titleToPath.put(logFile.getName(), path)[ FD ]
Line_8 $$ String path = paths.iterator().next()-->Line_9 $$ if (shouldInclude.value(path)) [ FD ]
Line_15 $$ String title = new File(path).getName()-->Line_17 $$ title = path[ FD ]
Line_3 $$ if (paths.isEmpty()) -->Line_4 $$ return[ CD ]
Line_6 $$ TreeMap<String, String> titleToPath = new TreeMap<String, String>()-->Line_19 $$ titleToPath.put(title, path)[ FD ]
Line_2 $$ private void addConfigurationConsoles(@NotNull LogFileOptions logFile, @NotNull Condition<String> shouldInclude, @NotNull Set<String> paths, @NotNull RunConfigurationBase runConfiguration) -->Line_14 $$ if (shouldInclude.value(path)) [ FD ]
Line_8 $$ String path = paths.iterator().next()-->Line_26 $$ myManager.addLogConsole(title, path, logFile.getCharset(), logFile.isSkipContent() ? new File(path).length() : 0, runConfiguration)[ FD ]
Line_9 $$ if (shouldInclude.value(path)) -->Line_10 $$ titleToPath.put(logFile.getName(), path)[ CD ]
Line_15 $$ String title = new File(path).getName()-->Line_24 $$ String path = titleToPath.get(title)[ FD ]
Line_8 $$ String path = paths.iterator().next()-->Line_17 $$ title = path[ FD ]
Line_8 $$ String path = paths.iterator().next()-->Line_14 $$ if (shouldInclude.value(path)) [ FD ]
Line_2 $$ private void addConfigurationConsoles(@NotNull LogFileOptions logFile, @NotNull Condition<String> shouldInclude, @NotNull Set<String> paths, @NotNull RunConfigurationBase runConfiguration) -->Line_3 $$ if (paths.isEmpty()) [ FD ]
Line_16 $$ if (titleToPath.containsKey(title)) -->Line_17 $$ title = path[ CD ]
Line_17 $$ title = path-->Line_24 $$ String path = titleToPath.get(title)[ FD ]
Line_2 $$ private void addConfigurationConsoles(@NotNull LogFileOptions logFile, @NotNull Condition<String> shouldInclude, @NotNull Set<String> paths, @NotNull RunConfigurationBase runConfiguration) -->Line_9 $$ if (shouldInclude.value(path)) [ FD ]
Line_2 $$ private void addConfigurationConsoles(@NotNull LogFileOptions logFile, @NotNull Condition<String> shouldInclude, @NotNull Set<String> paths, @NotNull RunConfigurationBase runConfiguration) -->Line_26 $$ myManager.addLogConsole(title, path, logFile.getCharset(), logFile.isSkipContent() ? new File(path).length() : 0, runConfiguration)[ FD ]
