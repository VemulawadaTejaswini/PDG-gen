Line_2 $$ private boolean showToolTipByMouseMove(@NotNull final MouseEvent e) -->Line_10 $$ TooltipRenderer bigRenderer[ CD ]
Line_35 $$ me = new MouseEvent(me.getComponent(), me.getID(), me.getWhen(), me.getModifiers(), me.getX(), y, me.getClickCount(), me.isPopupTrigger())-->Line_39 $$ myEditorFragmentRenderer.update(visualLine, highlighters, me.isAltDown())[ FD ]
Line_11 $$ if (IJSwingUtilities.findParentByInterface(myEditor.getComponent(), EditorWindowHolder.class) == null || isVisible || !UISettings.getInstance().SHOW_EDITOR_TOOLTIP) -->Line_12 $$ final Set<RangeHighlighter> highlighters = new THashSet<RangeHighlighter>()[ CD ]
Line_25 $$ me = new MouseEvent(e.getComponent(), e.getID(), e.getWhen(), e.getModifiers(), me.getX(), y + 1, e.getClickCount(), e.isPopupTrigger())-->Line_39 $$ myEditorFragmentRenderer.update(visualLine, highlighters, me.isAltDown())[ FD ]
Line_11 $$ if (IJSwingUtilities.findParentByInterface(myEditor.getComponent(), EditorWindowHolder.class) == null || isVisible || !UISettings.getInstance().SHOW_EDITOR_TOOLTIP) -->Line_41 $$ return true[ CD ]
Line_10 $$ TooltipRenderer bigRenderer-->Line_26 $$ bigRenderer = myTooltipRendererProvider.calcTooltipRenderer(highlighters)[ FD ]
Line_12 $$ final Set<RangeHighlighter> highlighters = new THashSet<RangeHighlighter>()-->Line_39 $$ myEditorFragmentRenderer.update(visualLine, highlighters, me.isAltDown())[ FD ]
Line_11 $$ if (IJSwingUtilities.findParentByInterface(myEditor.getComponent(), EditorWindowHolder.class) == null || isVisible || !UISettings.getInstance().SHOW_EDITOR_TOOLTIP) -->Line_40 $$ myEditorFragmentRenderer.show(myEditor, me.getPoint(), true, ERROR_STRIPE_TOOLTIP_GROUP, createHint(me))[ CD ]
Line_5 $$ MouseEvent me = new MouseEvent(e.getComponent(), e.getID(), e.getWhen(), e.getModifiers(), 0, e.getY() + 1, e.getClickCount(), e.isPopupTrigger())-->Line_13 $$ getNearestHighlighters(this, me.getY(), highlighters)[ FD ]
Line_11 $$ if (IJSwingUtilities.findParentByInterface(myEditor.getComponent(), EditorWindowHolder.class) == null || isVisible || !UISettings.getInstance().SHOW_EDITOR_TOOLTIP) -->Line_27 $$ if (bigRenderer != null) [ CD ]
Line_5 $$ MouseEvent me = new MouseEvent(e.getComponent(), e.getID(), e.getWhen(), e.getModifiers(), 0, e.getY() + 1, e.getClickCount(), e.isPopupTrigger())-->Line_14 $$ getNearestHighlighters((MarkupModelEx) DocumentMarkupModel.forDocument(myEditor.getDocument(), getEditor().getProject(), true), me.getY(), highlighters)[ FD ]
Line_11 $$ if (IJSwingUtilities.findParentByInterface(myEditor.getComponent(), EditorWindowHolder.class) == null || isVisible || !UISettings.getInstance().SHOW_EDITOR_TOOLTIP) -->Line_38 $$ collectRangeHighlighters((MarkupModelEx) DocumentMarkupModel.forDocument(myEditor.getDocument(), getEditor().getProject(), true), visualLine, highlighters)[ CD ]
Line_19 $$ if (nearest != null) -->Line_23 $$ y = eachStartY + (eachEndY - eachStartY) / 2[ CD ]
Line_5 $$ MouseEvent me = new MouseEvent(e.getComponent(), e.getID(), e.getWhen(), e.getModifiers(), 0, e.getY() + 1, e.getClickCount(), e.isPopupTrigger())-->Line_25 $$ me = new MouseEvent(e.getComponent(), e.getID(), e.getWhen(), e.getModifiers(), me.getX(), y + 1, e.getClickCount(), e.isPopupTrigger())[ FD ]
Line_2 $$ private boolean showToolTipByMouseMove(@NotNull final MouseEvent e) -->Line_11 $$ if (IJSwingUtilities.findParentByInterface(myEditor.getComponent(), EditorWindowHolder.class) == null || isVisible || !UISettings.getInstance().SHOW_EDITOR_TOOLTIP) [ CD ]
Line_5 $$ MouseEvent me = new MouseEvent(e.getComponent(), e.getID(), e.getWhen(), e.getModifiers(), 0, e.getY() + 1, e.getClickCount(), e.isPopupTrigger())-->Line_28 $$ showTooltip(me, bigRenderer, createHint(me))[ FD ]
Line_20 $$ ProperTextRange range = offsetsToYPositions(nearest.getStartOffset(), nearest.getEndOffset())-->Line_21 $$ int eachStartY = range.getStartOffset()[ FD ]
Line_11 $$ if (IJSwingUtilities.findParentByInterface(myEditor.getComponent(), EditorWindowHolder.class) == null || isVisible || !UISettings.getInstance().SHOW_EDITOR_TOOLTIP) -->Line_15 $$ if (highlighters.isEmpty())[ CD ]
Line_18 $$ RangeHighlighter nearest = getNearestRangeHighlighter(e)-->Line_20 $$ ProperTextRange range = offsetsToYPositions(nearest.getStartOffset(), nearest.getEndOffset())[ FD ]
Line_12 $$ final Set<RangeHighlighter> highlighters = new THashSet<RangeHighlighter>()-->Line_37 $$ collectRangeHighlighters(this, visualLine, highlighters)[ FD ]
Line_12 $$ final Set<RangeHighlighter> highlighters = new THashSet<RangeHighlighter>()-->Line_26 $$ bigRenderer = myTooltipRendererProvider.calcTooltipRenderer(highlighters)[ FD ]
Line_2 $$ private boolean showToolTipByMouseMove(@NotNull final MouseEvent e) -->Line_25 $$ me = new MouseEvent(e.getComponent(), e.getID(), e.getWhen(), e.getModifiers(), me.getX(), y + 1, e.getClickCount(), e.isPopupTrigger())[ FD ]
Line_6 $$ final int visualLine = getVisualLineByEvent(e)-->Line_37 $$ collectRangeHighlighters(this, visualLine, highlighters)[ FD ]
Line_25 $$ me = new MouseEvent(e.getComponent(), e.getID(), e.getWhen(), e.getModifiers(), me.getX(), y + 1, e.getClickCount(), e.isPopupTrigger())-->Line_40 $$ myEditorFragmentRenderer.show(myEditor, me.getPoint(), true, ERROR_STRIPE_TOOLTIP_GROUP, createHint(me))[ FD ]
Line_2 $$ private boolean showToolTipByMouseMove(@NotNull final MouseEvent e) -->Line_6 $$ final int visualLine = getVisualLineByEvent(e)[ FD ]
Line_25 $$ me = new MouseEvent(e.getComponent(), e.getID(), e.getWhen(), e.getModifiers(), me.getX(), y + 1, e.getClickCount(), e.isPopupTrigger())-->Line_34 $$ int y = myRowAdjuster != 0 ? (int) (rowRatio * myEditor.getVerticalScrollBar().getHeight()) : me.getY()[ FD ]
Line_11 $$ if (IJSwingUtilities.findParentByInterface(myEditor.getComponent(), EditorWindowHolder.class) == null || isVisible || !UISettings.getInstance().SHOW_EDITOR_TOOLTIP) -->Line_39 $$ myEditorFragmentRenderer.update(visualLine, highlighters, me.isAltDown())[ CD ]
Line_2 $$ private boolean showToolTipByMouseMove(@NotNull final MouseEvent e) -->Line_9 $$ boolean isVisible = area.contains(area.x, visualY) && myWheelAccumulator == 0[ CD ]
Line_35 $$ me = new MouseEvent(me.getComponent(), me.getID(), me.getWhen(), me.getModifiers(), me.getX(), y, me.getClickCount(), me.isPopupTrigger())-->Line_40 $$ myEditorFragmentRenderer.show(myEditor, me.getPoint(), true, ERROR_STRIPE_TOOLTIP_GROUP, createHint(me))[ FD ]
Line_2 $$ private boolean showToolTipByMouseMove(@NotNull final MouseEvent e) -->Line_17 $$ int y = e.getY()[ FD ]
Line_11 $$ if (IJSwingUtilities.findParentByInterface(myEditor.getComponent(), EditorWindowHolder.class) == null || isVisible || !UISettings.getInstance().SHOW_EDITOR_TOOLTIP) -->Line_13 $$ getNearestHighlighters(this, me.getY(), highlighters)[ CD ]
Line_7 $$ Rectangle area = myEditor.getScrollingModel().getVisibleArea()-->Line_9 $$ boolean isVisible = area.contains(area.x, visualY) && myWheelAccumulator == 0[ FD ]
Line_11 $$ if (IJSwingUtilities.findParentByInterface(myEditor.getComponent(), EditorWindowHolder.class) == null || isVisible || !UISettings.getInstance().SHOW_EDITOR_TOOLTIP) -->Line_19 $$ if (nearest != null) [ CD ]
Line_2 $$ private boolean showToolTipByMouseMove(@NotNull final MouseEvent e) -->Line_7 $$ Rectangle area = myEditor.getScrollingModel().getVisibleArea()[ CD ]
Line_12 $$ final Set<RangeHighlighter> highlighters = new THashSet<RangeHighlighter>()-->Line_38 $$ collectRangeHighlighters((MarkupModelEx) DocumentMarkupModel.forDocument(myEditor.getDocument(), getEditor().getProject(), true), visualLine, highlighters)[ FD ]
Line_26 $$ bigRenderer = myTooltipRendererProvider.calcTooltipRenderer(highlighters)-->Line_28 $$ showTooltip(me, bigRenderer, createHint(me))[ FD ]
Line_5 $$ MouseEvent me = new MouseEvent(e.getComponent(), e.getID(), e.getWhen(), e.getModifiers(), 0, e.getY() + 1, e.getClickCount(), e.isPopupTrigger())-->Line_34 $$ int y = myRowAdjuster != 0 ? (int) (rowRatio * myEditor.getVerticalScrollBar().getHeight()) : me.getY()[ FD ]
Line_2 $$ private boolean showToolTipByMouseMove(@NotNull final MouseEvent e) -->Line_3 $$ if (myEditor.getVisibleLineCount() == 0)[ CD ]
Line_2 $$ private boolean showToolTipByMouseMove(@NotNull final MouseEvent e) -->Line_8 $$ int visualY = myEditor.getLineHeight() * visualLine[ CD ]
Line_2 $$ private boolean showToolTipByMouseMove(@NotNull final MouseEvent e) -->Line_5 $$ MouseEvent me = new MouseEvent(e.getComponent(), e.getID(), e.getWhen(), e.getModifiers(), 0, e.getY() + 1, e.getClickCount(), e.isPopupTrigger())[ CD ]
Line_2 $$ private boolean showToolTipByMouseMove(@NotNull final MouseEvent e) -->Line_18 $$ RangeHighlighter nearest = getNearestRangeHighlighter(e)[ FD ]
Line_26 $$ bigRenderer = myTooltipRendererProvider.calcTooltipRenderer(highlighters)-->Line_27 $$ if (bigRenderer != null) [ FD ]
Line_5 $$ MouseEvent me = new MouseEvent(e.getComponent(), e.getID(), e.getWhen(), e.getModifiers(), 0, e.getY() + 1, e.getClickCount(), e.isPopupTrigger())-->Line_35 $$ me = new MouseEvent(me.getComponent(), me.getID(), me.getWhen(), me.getModifiers(), me.getX(), y, me.getClickCount(), me.isPopupTrigger())[ FD ]
Line_15 $$ if (highlighters.isEmpty())-->Line_16 $$ return false[ CD ]
Line_17 $$ int y = e.getY()-->Line_23 $$ y = eachStartY + (eachEndY - eachStartY) / 2[ FD ]
Line_18 $$ RangeHighlighter nearest = getNearestRangeHighlighter(e)-->Line_19 $$ if (nearest != null) [ FD ]
Line_11 $$ if (IJSwingUtilities.findParentByInterface(myEditor.getComponent(), EditorWindowHolder.class) == null || isVisible || !UISettings.getInstance().SHOW_EDITOR_TOOLTIP) -->Line_37 $$ collectRangeHighlighters(this, visualLine, highlighters)[ CD ]
Line_12 $$ final Set<RangeHighlighter> highlighters = new THashSet<RangeHighlighter>()-->Line_13 $$ getNearestHighlighters(this, me.getY(), highlighters)[ FD ]
Line_21 $$ int eachStartY = range.getStartOffset()-->Line_23 $$ y = eachStartY + (eachEndY - eachStartY) / 2[ FD ]
Line_6 $$ final int visualLine = getVisualLineByEvent(e)-->Line_38 $$ collectRangeHighlighters((MarkupModelEx) DocumentMarkupModel.forDocument(myEditor.getDocument(), getEditor().getProject(), true), visualLine, highlighters)[ FD ]
Line_8 $$ int visualY = myEditor.getLineHeight() * visualLine-->Line_9 $$ boolean isVisible = area.contains(area.x, visualY) && myWheelAccumulator == 0[ FD ]
Line_20 $$ ProperTextRange range = offsetsToYPositions(nearest.getStartOffset(), nearest.getEndOffset())-->Line_22 $$ int eachEndY = range.getEndOffset()[ FD ]
Line_12 $$ final Set<RangeHighlighter> highlighters = new THashSet<RangeHighlighter>()-->Line_14 $$ getNearestHighlighters((MarkupModelEx) DocumentMarkupModel.forDocument(myEditor.getDocument(), getEditor().getProject(), true), me.getY(), highlighters)[ FD ]
Line_5 $$ MouseEvent me = new MouseEvent(e.getComponent(), e.getID(), e.getWhen(), e.getModifiers(), 0, e.getY() + 1, e.getClickCount(), e.isPopupTrigger())-->Line_39 $$ myEditorFragmentRenderer.update(visualLine, highlighters, me.isAltDown())[ FD ]
Line_11 $$ if (IJSwingUtilities.findParentByInterface(myEditor.getComponent(), EditorWindowHolder.class) == null || isVisible || !UISettings.getInstance().SHOW_EDITOR_TOOLTIP) -->Line_31 $$ return false[ CD ]
Line_27 $$ if (bigRenderer != null) -->Line_28 $$ showTooltip(me, bigRenderer, createHint(me))[ CD ]
Line_11 $$ if (IJSwingUtilities.findParentByInterface(myEditor.getComponent(), EditorWindowHolder.class) == null || isVisible || !UISettings.getInstance().SHOW_EDITOR_TOOLTIP) -->Line_35 $$ me = new MouseEvent(me.getComponent(), me.getID(), me.getWhen(), me.getModifiers(), me.getX(), y, me.getClickCount(), me.isPopupTrigger())[ CD ]
Line_27 $$ if (bigRenderer != null) -->Line_29 $$ return true[ CD ]
Line_10 $$ TooltipRenderer bigRenderer-->Line_27 $$ if (bigRenderer != null) [ FD ]
Line_11 $$ if (IJSwingUtilities.findParentByInterface(myEditor.getComponent(), EditorWindowHolder.class) == null || isVisible || !UISettings.getInstance().SHOW_EDITOR_TOOLTIP) -->Line_33 $$ float rowRatio = (float) visualLine / (myEditor.getVisibleLineCount() - 1)[ CD ]
Line_25 $$ me = new MouseEvent(e.getComponent(), e.getID(), e.getWhen(), e.getModifiers(), me.getX(), y + 1, e.getClickCount(), e.isPopupTrigger())-->Line_35 $$ me = new MouseEvent(me.getComponent(), me.getID(), me.getWhen(), me.getModifiers(), me.getX(), y, me.getClickCount(), me.isPopupTrigger())[ FD ]
Line_25 $$ me = new MouseEvent(e.getComponent(), e.getID(), e.getWhen(), e.getModifiers(), me.getX(), y + 1, e.getClickCount(), e.isPopupTrigger())-->Line_28 $$ showTooltip(me, bigRenderer, createHint(me))[ FD ]
Line_19 $$ if (nearest != null) -->Line_21 $$ int eachStartY = range.getStartOffset()[ CD ]
Line_2 $$ private boolean showToolTipByMouseMove(@NotNull final MouseEvent e) -->Line_5 $$ MouseEvent me = new MouseEvent(e.getComponent(), e.getID(), e.getWhen(), e.getModifiers(), 0, e.getY() + 1, e.getClickCount(), e.isPopupTrigger())[ FD ]
Line_6 $$ final int visualLine = getVisualLineByEvent(e)-->Line_39 $$ myEditorFragmentRenderer.update(visualLine, highlighters, me.isAltDown())[ FD ]
Line_11 $$ if (IJSwingUtilities.findParentByInterface(myEditor.getComponent(), EditorWindowHolder.class) == null || isVisible || !UISettings.getInstance().SHOW_EDITOR_TOOLTIP) -->Line_14 $$ getNearestHighlighters((MarkupModelEx) DocumentMarkupModel.forDocument(myEditor.getDocument(), getEditor().getProject(), true), me.getY(), highlighters)[ CD ]
Line_3 $$ if (myEditor.getVisibleLineCount() == 0)-->Line_4 $$ return false[ CD ]
Line_19 $$ if (nearest != null) -->Line_20 $$ ProperTextRange range = offsetsToYPositions(nearest.getStartOffset(), nearest.getEndOffset())[ CD ]
Line_11 $$ if (IJSwingUtilities.findParentByInterface(myEditor.getComponent(), EditorWindowHolder.class) == null || isVisible || !UISettings.getInstance().SHOW_EDITOR_TOOLTIP) -->Line_25 $$ me = new MouseEvent(e.getComponent(), e.getID(), e.getWhen(), e.getModifiers(), me.getX(), y + 1, e.getClickCount(), e.isPopupTrigger())[ CD ]
Line_10 $$ TooltipRenderer bigRenderer-->Line_28 $$ showTooltip(me, bigRenderer, createHint(me))[ FD ]
Line_11 $$ if (IJSwingUtilities.findParentByInterface(myEditor.getComponent(), EditorWindowHolder.class) == null || isVisible || !UISettings.getInstance().SHOW_EDITOR_TOOLTIP) -->Line_26 $$ bigRenderer = myTooltipRendererProvider.calcTooltipRenderer(highlighters)[ CD ]
Line_11 $$ if (IJSwingUtilities.findParentByInterface(myEditor.getComponent(), EditorWindowHolder.class) == null || isVisible || !UISettings.getInstance().SHOW_EDITOR_TOOLTIP) -->Line_17 $$ int y = e.getY()[ CD ]
Line_19 $$ if (nearest != null) -->Line_22 $$ int eachEndY = range.getEndOffset()[ CD ]
Line_12 $$ final Set<RangeHighlighter> highlighters = new THashSet<RangeHighlighter>()-->Line_15 $$ if (highlighters.isEmpty())[ FD ]
Line_2 $$ private boolean showToolTipByMouseMove(@NotNull final MouseEvent e) -->Line_6 $$ final int visualLine = getVisualLineByEvent(e)[ CD ]
Line_11 $$ if (IJSwingUtilities.findParentByInterface(myEditor.getComponent(), EditorWindowHolder.class) == null || isVisible || !UISettings.getInstance().SHOW_EDITOR_TOOLTIP) -->Line_18 $$ RangeHighlighter nearest = getNearestRangeHighlighter(e)[ CD ]
Line_5 $$ MouseEvent me = new MouseEvent(e.getComponent(), e.getID(), e.getWhen(), e.getModifiers(), 0, e.getY() + 1, e.getClickCount(), e.isPopupTrigger())-->Line_40 $$ myEditorFragmentRenderer.show(myEditor, me.getPoint(), true, ERROR_STRIPE_TOOLTIP_GROUP, createHint(me))[ FD ]
