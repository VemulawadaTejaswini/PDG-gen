Line_16 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_35 $$ assertEquals(NANOSECONDS.toSeconds(backoffDelay), 8)[ FD ]
Line_2 $$ public void testDelay() -->Line_41 $$ assertEquals(NANOSECONDS.toSeconds(backoffDelay), 8)[ CD ]
Line_2 $$ public void testDelay() -->Line_8 $$ assertEquals(backoff.getFailureCount(), 1)[ CD ]
Line_4 $$ Backoff backoff = new Backoff(new Duration(15, SECONDS), ticker, new Duration(0, SECONDS), new Duration(1, SECONDS), new Duration(2, SECONDS), new Duration(4, SECONDS), new Duration(8, SECONDS))-->Line_13 $$ assertFalse(backoff.failure())[ FD ]
Line_16 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_29 $$ assertEquals(NANOSECONDS.toSeconds(backoffDelay), 4)[ FD ]
Line_4 $$ Backoff backoff = new Backoff(new Duration(15, SECONDS), ticker, new Duration(0, SECONDS), new Duration(1, SECONDS), new Duration(2, SECONDS), new Duration(4, SECONDS), new Duration(8, SECONDS))-->Line_15 $$ assertEquals(backoff.getTimeSinceLastSuccess().roundTo(SECONDS), 0)[ FD ]
Line_4 $$ Backoff backoff = new Backoff(new Duration(15, SECONDS), ticker, new Duration(0, SECONDS), new Duration(1, SECONDS), new Duration(2, SECONDS), new Duration(4, SECONDS), new Duration(8, SECONDS))-->Line_16 $$ backoffDelay = backoff.getBackoffDelayNanos()[ FD ]
Line_34 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_41 $$ assertEquals(NANOSECONDS.toSeconds(backoffDelay), 8)[ FD ]
Line_10 $$ long backoffDelay = backoff.getBackoffDelayNanos()-->Line_24 $$ ticker.increment(backoffDelay, NANOSECONDS)[ FD ]
Line_4 $$ Backoff backoff = new Backoff(new Duration(15, SECONDS), ticker, new Duration(0, SECONDS), new Duration(1, SECONDS), new Duration(2, SECONDS), new Duration(4, SECONDS), new Duration(8, SECONDS))-->Line_39 $$ assertEquals(backoff.getTimeSinceLastSuccess().roundTo(SECONDS), 15)[ FD ]
Line_28 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_29 $$ assertEquals(NANOSECONDS.toSeconds(backoffDelay), 4)[ FD ]
Line_2 $$ public void testDelay() -->Line_25 $$ assertFalse(backoff.failure())[ CD ]
Line_2 $$ public void testDelay() -->Line_9 $$ assertEquals(backoff.getTimeSinceLastSuccess().roundTo(SECONDS), 0)[ CD ]
Line_4 $$ Backoff backoff = new Backoff(new Duration(15, SECONDS), ticker, new Duration(0, SECONDS), new Duration(1, SECONDS), new Duration(2, SECONDS), new Duration(4, SECONDS), new Duration(8, SECONDS))-->Line_40 $$ backoffDelay = backoff.getBackoffDelayNanos()[ FD ]
Line_22 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_24 $$ ticker.increment(backoffDelay, NANOSECONDS)[ FD ]
Line_4 $$ Backoff backoff = new Backoff(new Duration(15, SECONDS), ticker, new Duration(0, SECONDS), new Duration(1, SECONDS), new Duration(2, SECONDS), new Duration(4, SECONDS), new Duration(8, SECONDS))-->Line_5 $$ assertEquals(backoff.getFailureCount(), 0)[ FD ]
Line_2 $$ public void testDelay() -->Line_20 $$ assertEquals(backoff.getFailureCount(), 3)[ CD ]
Line_4 $$ Backoff backoff = new Backoff(new Duration(15, SECONDS), ticker, new Duration(0, SECONDS), new Duration(1, SECONDS), new Duration(2, SECONDS), new Duration(4, SECONDS), new Duration(8, SECONDS))-->Line_25 $$ assertFalse(backoff.failure())[ FD ]
Line_22 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_34 $$ backoffDelay = backoff.getBackoffDelayNanos()[ FD ]
Line_16 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_18 $$ ticker.increment(backoffDelay, NANOSECONDS)[ FD ]
Line_2 $$ public void testDelay() -->Line_24 $$ ticker.increment(backoffDelay, NANOSECONDS)[ CD ]
Line_10 $$ long backoffDelay = backoff.getBackoffDelayNanos()-->Line_40 $$ backoffDelay = backoff.getBackoffDelayNanos()[ FD ]
Line_2 $$ public void testDelay() -->Line_22 $$ backoffDelay = backoff.getBackoffDelayNanos()[ CD ]
Line_2 $$ public void testDelay() -->Line_19 $$ assertFalse(backoff.failure())[ CD ]
Line_4 $$ Backoff backoff = new Backoff(new Duration(15, SECONDS), ticker, new Duration(0, SECONDS), new Duration(1, SECONDS), new Duration(2, SECONDS), new Duration(4, SECONDS), new Duration(8, SECONDS))-->Line_10 $$ long backoffDelay = backoff.getBackoffDelayNanos()[ FD ]
Line_10 $$ long backoffDelay = backoff.getBackoffDelayNanos()-->Line_36 $$ ticker.increment(backoffDelay, NANOSECONDS)[ FD ]
Line_2 $$ public void testDelay() -->Line_37 $$ assertTrue(backoff.failure())[ CD ]
Line_4 $$ Backoff backoff = new Backoff(new Duration(15, SECONDS), ticker, new Duration(0, SECONDS), new Duration(1, SECONDS), new Duration(2, SECONDS), new Duration(4, SECONDS), new Duration(8, SECONDS))-->Line_8 $$ assertEquals(backoff.getFailureCount(), 1)[ FD ]
Line_28 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_41 $$ assertEquals(NANOSECONDS.toSeconds(backoffDelay), 8)[ FD ]
Line_4 $$ Backoff backoff = new Backoff(new Duration(15, SECONDS), ticker, new Duration(0, SECONDS), new Duration(1, SECONDS), new Duration(2, SECONDS), new Duration(4, SECONDS), new Duration(8, SECONDS))-->Line_28 $$ backoffDelay = backoff.getBackoffDelayNanos()[ FD ]
Line_4 $$ Backoff backoff = new Backoff(new Duration(15, SECONDS), ticker, new Duration(0, SECONDS), new Duration(1, SECONDS), new Duration(2, SECONDS), new Duration(4, SECONDS), new Duration(8, SECONDS))-->Line_6 $$ assertEquals(backoff.getTimeSinceLastSuccess().roundTo(SECONDS), 0)[ FD ]
Line_10 $$ long backoffDelay = backoff.getBackoffDelayNanos()-->Line_23 $$ assertEquals(NANOSECONDS.toSeconds(backoffDelay), 2)[ FD ]
Line_22 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_23 $$ assertEquals(NANOSECONDS.toSeconds(backoffDelay), 2)[ FD ]
Line_2 $$ public void testDelay() -->Line_30 $$ ticker.increment(backoffDelay, NANOSECONDS)[ CD ]
Line_3 $$ TestingTicker ticker = new TestingTicker()-->Line_36 $$ ticker.increment(backoffDelay, NANOSECONDS)[ FD ]
Line_2 $$ public void testDelay() -->Line_31 $$ assertFalse(backoff.failure())[ CD ]
Line_2 $$ public void testDelay() -->Line_34 $$ backoffDelay = backoff.getBackoffDelayNanos()[ CD ]
Line_4 $$ Backoff backoff = new Backoff(new Duration(15, SECONDS), ticker, new Duration(0, SECONDS), new Duration(1, SECONDS), new Duration(2, SECONDS), new Duration(4, SECONDS), new Duration(8, SECONDS))-->Line_31 $$ assertFalse(backoff.failure())[ FD ]
Line_10 $$ long backoffDelay = backoff.getBackoffDelayNanos()-->Line_35 $$ assertEquals(NANOSECONDS.toSeconds(backoffDelay), 8)[ FD ]
Line_10 $$ long backoffDelay = backoff.getBackoffDelayNanos()-->Line_34 $$ backoffDelay = backoff.getBackoffDelayNanos()[ FD ]
Line_4 $$ Backoff backoff = new Backoff(new Duration(15, SECONDS), ticker, new Duration(0, SECONDS), new Duration(1, SECONDS), new Duration(2, SECONDS), new Duration(4, SECONDS), new Duration(8, SECONDS))-->Line_26 $$ assertEquals(backoff.getFailureCount(), 4)[ FD ]
Line_22 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_28 $$ backoffDelay = backoff.getBackoffDelayNanos()[ FD ]
Line_16 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_36 $$ ticker.increment(backoffDelay, NANOSECONDS)[ FD ]
Line_22 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_40 $$ backoffDelay = backoff.getBackoffDelayNanos()[ FD ]
Line_2 $$ public void testDelay() -->Line_32 $$ assertEquals(backoff.getFailureCount(), 5)[ CD ]
Line_28 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_35 $$ assertEquals(NANOSECONDS.toSeconds(backoffDelay), 8)[ FD ]
Line_2 $$ public void testDelay() -->Line_35 $$ assertEquals(NANOSECONDS.toSeconds(backoffDelay), 8)[ CD ]
Line_22 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_35 $$ assertEquals(NANOSECONDS.toSeconds(backoffDelay), 8)[ FD ]
Line_34 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_40 $$ backoffDelay = backoff.getBackoffDelayNanos()[ FD ]
Line_10 $$ long backoffDelay = backoff.getBackoffDelayNanos()-->Line_28 $$ backoffDelay = backoff.getBackoffDelayNanos()[ FD ]
Line_3 $$ TestingTicker ticker = new TestingTicker()-->Line_30 $$ ticker.increment(backoffDelay, NANOSECONDS)[ FD ]
Line_22 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_29 $$ assertEquals(NANOSECONDS.toSeconds(backoffDelay), 4)[ FD ]
Line_16 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_40 $$ backoffDelay = backoff.getBackoffDelayNanos()[ FD ]
Line_4 $$ Backoff backoff = new Backoff(new Duration(15, SECONDS), ticker, new Duration(0, SECONDS), new Duration(1, SECONDS), new Duration(2, SECONDS), new Duration(4, SECONDS), new Duration(8, SECONDS))-->Line_20 $$ assertEquals(backoff.getFailureCount(), 3)[ FD ]
Line_2 $$ public void testDelay() -->Line_3 $$ TestingTicker ticker = new TestingTicker()[ CD ]
Line_3 $$ TestingTicker ticker = new TestingTicker()-->Line_12 $$ ticker.increment(backoffDelay, NANOSECONDS)[ FD ]
Line_4 $$ Backoff backoff = new Backoff(new Duration(15, SECONDS), ticker, new Duration(0, SECONDS), new Duration(1, SECONDS), new Duration(2, SECONDS), new Duration(4, SECONDS), new Duration(8, SECONDS))-->Line_21 $$ assertEquals(backoff.getTimeSinceLastSuccess().roundTo(SECONDS), 1)[ FD ]
Line_2 $$ public void testDelay() -->Line_33 $$ assertEquals(backoff.getTimeSinceLastSuccess().roundTo(SECONDS), 7)[ CD ]
Line_16 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_17 $$ assertEquals(NANOSECONDS.toSeconds(backoffDelay), 1)[ FD ]
Line_16 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_24 $$ ticker.increment(backoffDelay, NANOSECONDS)[ FD ]
Line_16 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_30 $$ ticker.increment(backoffDelay, NANOSECONDS)[ FD ]
Line_2 $$ public void testDelay() -->Line_29 $$ assertEquals(NANOSECONDS.toSeconds(backoffDelay), 4)[ CD ]
Line_4 $$ Backoff backoff = new Backoff(new Duration(15, SECONDS), ticker, new Duration(0, SECONDS), new Duration(1, SECONDS), new Duration(2, SECONDS), new Duration(4, SECONDS), new Duration(8, SECONDS))-->Line_34 $$ backoffDelay = backoff.getBackoffDelayNanos()[ FD ]
Line_40 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_41 $$ assertEquals(NANOSECONDS.toSeconds(backoffDelay), 8)[ FD ]
Line_10 $$ long backoffDelay = backoff.getBackoffDelayNanos()-->Line_22 $$ backoffDelay = backoff.getBackoffDelayNanos()[ FD ]
Line_2 $$ public void testDelay() -->Line_39 $$ assertEquals(backoff.getTimeSinceLastSuccess().roundTo(SECONDS), 15)[ CD ]
Line_22 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_41 $$ assertEquals(NANOSECONDS.toSeconds(backoffDelay), 8)[ FD ]
Line_10 $$ long backoffDelay = backoff.getBackoffDelayNanos()-->Line_41 $$ assertEquals(NANOSECONDS.toSeconds(backoffDelay), 8)[ FD ]
Line_28 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_40 $$ backoffDelay = backoff.getBackoffDelayNanos()[ FD ]
Line_10 $$ long backoffDelay = backoff.getBackoffDelayNanos()-->Line_30 $$ ticker.increment(backoffDelay, NANOSECONDS)[ FD ]
Line_2 $$ public void testDelay() -->Line_23 $$ assertEquals(NANOSECONDS.toSeconds(backoffDelay), 2)[ CD ]
Line_2 $$ public void testDelay() -->Line_14 $$ assertEquals(backoff.getFailureCount(), 2)[ CD ]
Line_4 $$ Backoff backoff = new Backoff(new Duration(15, SECONDS), ticker, new Duration(0, SECONDS), new Duration(1, SECONDS), new Duration(2, SECONDS), new Duration(4, SECONDS), new Duration(8, SECONDS))-->Line_7 $$ assertFalse(backoff.failure())[ FD ]
Line_10 $$ long backoffDelay = backoff.getBackoffDelayNanos()-->Line_29 $$ assertEquals(NANOSECONDS.toSeconds(backoffDelay), 4)[ FD ]
Line_2 $$ public void testDelay() -->Line_7 $$ assertFalse(backoff.failure())[ CD ]
Line_10 $$ long backoffDelay = backoff.getBackoffDelayNanos()-->Line_18 $$ ticker.increment(backoffDelay, NANOSECONDS)[ FD ]
Line_4 $$ Backoff backoff = new Backoff(new Duration(15, SECONDS), ticker, new Duration(0, SECONDS), new Duration(1, SECONDS), new Duration(2, SECONDS), new Duration(4, SECONDS), new Duration(8, SECONDS))-->Line_14 $$ assertEquals(backoff.getFailureCount(), 2)[ FD ]
Line_28 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_36 $$ ticker.increment(backoffDelay, NANOSECONDS)[ FD ]
Line_16 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_34 $$ backoffDelay = backoff.getBackoffDelayNanos()[ FD ]
Line_4 $$ Backoff backoff = new Backoff(new Duration(15, SECONDS), ticker, new Duration(0, SECONDS), new Duration(1, SECONDS), new Duration(2, SECONDS), new Duration(4, SECONDS), new Duration(8, SECONDS))-->Line_27 $$ assertEquals(backoff.getTimeSinceLastSuccess().roundTo(SECONDS), 3)[ FD ]
Line_2 $$ public void testDelay() -->Line_11 $$ assertEquals(NANOSECONDS.toSeconds(backoffDelay), 0)[ CD ]
Line_2 $$ public void testDelay() -->Line_16 $$ backoffDelay = backoff.getBackoffDelayNanos()[ CD ]
Line_2 $$ public void testDelay() -->Line_36 $$ ticker.increment(backoffDelay, NANOSECONDS)[ CD ]
Line_10 $$ long backoffDelay = backoff.getBackoffDelayNanos()-->Line_11 $$ assertEquals(NANOSECONDS.toSeconds(backoffDelay), 0)[ FD ]
Line_22 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_36 $$ ticker.increment(backoffDelay, NANOSECONDS)[ FD ]
Line_4 $$ Backoff backoff = new Backoff(new Duration(15, SECONDS), ticker, new Duration(0, SECONDS), new Duration(1, SECONDS), new Duration(2, SECONDS), new Duration(4, SECONDS), new Duration(8, SECONDS))-->Line_32 $$ assertEquals(backoff.getFailureCount(), 5)[ FD ]
Line_2 $$ public void testDelay() -->Line_18 $$ ticker.increment(backoffDelay, NANOSECONDS)[ CD ]
Line_2 $$ public void testDelay() -->Line_38 $$ assertEquals(backoff.getFailureCount(), 6)[ CD ]
Line_28 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_34 $$ backoffDelay = backoff.getBackoffDelayNanos()[ FD ]
Line_3 $$ TestingTicker ticker = new TestingTicker()-->Line_24 $$ ticker.increment(backoffDelay, NANOSECONDS)[ FD ]
Line_3 $$ TestingTicker ticker = new TestingTicker()-->Line_18 $$ ticker.increment(backoffDelay, NANOSECONDS)[ FD ]
Line_2 $$ public void testDelay() -->Line_4 $$ Backoff backoff = new Backoff(new Duration(15, SECONDS), ticker, new Duration(0, SECONDS), new Duration(1, SECONDS), new Duration(2, SECONDS), new Duration(4, SECONDS), new Duration(8, SECONDS))[ CD ]
Line_4 $$ Backoff backoff = new Backoff(new Duration(15, SECONDS), ticker, new Duration(0, SECONDS), new Duration(1, SECONDS), new Duration(2, SECONDS), new Duration(4, SECONDS), new Duration(8, SECONDS))-->Line_22 $$ backoffDelay = backoff.getBackoffDelayNanos()[ FD ]
Line_2 $$ public void testDelay() -->Line_26 $$ assertEquals(backoff.getFailureCount(), 4)[ CD ]
Line_16 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_23 $$ assertEquals(NANOSECONDS.toSeconds(backoffDelay), 2)[ FD ]
Line_10 $$ long backoffDelay = backoff.getBackoffDelayNanos()-->Line_12 $$ ticker.increment(backoffDelay, NANOSECONDS)[ FD ]
Line_28 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_30 $$ ticker.increment(backoffDelay, NANOSECONDS)[ FD ]
Line_34 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_36 $$ ticker.increment(backoffDelay, NANOSECONDS)[ FD ]
Line_2 $$ public void testDelay() -->Line_5 $$ assertEquals(backoff.getFailureCount(), 0)[ CD ]
Line_2 $$ public void testDelay() -->Line_17 $$ assertEquals(NANOSECONDS.toSeconds(backoffDelay), 1)[ CD ]
Line_16 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_41 $$ assertEquals(NANOSECONDS.toSeconds(backoffDelay), 8)[ FD ]
Line_22 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_30 $$ ticker.increment(backoffDelay, NANOSECONDS)[ FD ]
Line_10 $$ long backoffDelay = backoff.getBackoffDelayNanos()-->Line_17 $$ assertEquals(NANOSECONDS.toSeconds(backoffDelay), 1)[ FD ]
Line_4 $$ Backoff backoff = new Backoff(new Duration(15, SECONDS), ticker, new Duration(0, SECONDS), new Duration(1, SECONDS), new Duration(2, SECONDS), new Duration(4, SECONDS), new Duration(8, SECONDS))-->Line_37 $$ assertTrue(backoff.failure())[ FD ]
Line_10 $$ long backoffDelay = backoff.getBackoffDelayNanos()-->Line_16 $$ backoffDelay = backoff.getBackoffDelayNanos()[ FD ]
Line_2 $$ public void testDelay() -->Line_15 $$ assertEquals(backoff.getTimeSinceLastSuccess().roundTo(SECONDS), 0)[ CD ]
Line_2 $$ public void testDelay() -->Line_28 $$ backoffDelay = backoff.getBackoffDelayNanos()[ CD ]
Line_34 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_35 $$ assertEquals(NANOSECONDS.toSeconds(backoffDelay), 8)[ FD ]
Line_2 $$ public void testDelay() -->Line_13 $$ assertFalse(backoff.failure())[ CD ]
Line_2 $$ public void testDelay() -->Line_21 $$ assertEquals(backoff.getTimeSinceLastSuccess().roundTo(SECONDS), 1)[ CD ]
Line_4 $$ Backoff backoff = new Backoff(new Duration(15, SECONDS), ticker, new Duration(0, SECONDS), new Duration(1, SECONDS), new Duration(2, SECONDS), new Duration(4, SECONDS), new Duration(8, SECONDS))-->Line_19 $$ assertFalse(backoff.failure())[ FD ]
Line_4 $$ Backoff backoff = new Backoff(new Duration(15, SECONDS), ticker, new Duration(0, SECONDS), new Duration(1, SECONDS), new Duration(2, SECONDS), new Duration(4, SECONDS), new Duration(8, SECONDS))-->Line_9 $$ assertEquals(backoff.getTimeSinceLastSuccess().roundTo(SECONDS), 0)[ FD ]
Line_4 $$ Backoff backoff = new Backoff(new Duration(15, SECONDS), ticker, new Duration(0, SECONDS), new Duration(1, SECONDS), new Duration(2, SECONDS), new Duration(4, SECONDS), new Duration(8, SECONDS))-->Line_38 $$ assertEquals(backoff.getFailureCount(), 6)[ FD ]
Line_2 $$ public void testDelay() -->Line_40 $$ backoffDelay = backoff.getBackoffDelayNanos()[ CD ]
Line_16 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_22 $$ backoffDelay = backoff.getBackoffDelayNanos()[ FD ]
Line_2 $$ public void testDelay() -->Line_10 $$ long backoffDelay = backoff.getBackoffDelayNanos()[ CD ]
Line_2 $$ public void testDelay() -->Line_27 $$ assertEquals(backoff.getTimeSinceLastSuccess().roundTo(SECONDS), 3)[ CD ]
Line_4 $$ Backoff backoff = new Backoff(new Duration(15, SECONDS), ticker, new Duration(0, SECONDS), new Duration(1, SECONDS), new Duration(2, SECONDS), new Duration(4, SECONDS), new Duration(8, SECONDS))-->Line_33 $$ assertEquals(backoff.getTimeSinceLastSuccess().roundTo(SECONDS), 7)[ FD ]
Line_16 $$ backoffDelay = backoff.getBackoffDelayNanos()-->Line_28 $$ backoffDelay = backoff.getBackoffDelayNanos()[ FD ]
Line_2 $$ public void testDelay() -->Line_12 $$ ticker.increment(backoffDelay, NANOSECONDS)[ CD ]
Line_2 $$ public void testDelay() -->Line_6 $$ assertEquals(backoff.getTimeSinceLastSuccess().roundTo(SECONDS), 0)[ CD ]
