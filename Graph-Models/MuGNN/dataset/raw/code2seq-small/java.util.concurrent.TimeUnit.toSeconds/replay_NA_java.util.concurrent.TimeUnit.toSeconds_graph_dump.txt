Line_2 $$ public int replay(RateLimiter rateLimiter, Set<InetAddress> hintedNodes) throws IOException -->Line_9 $$ replayHandlers = sendReplays(mutations, writtenAt, hintedNodes)[ CD ]
Line_4 $$ if (mutations.isEmpty())-->Line_5 $$ return 0[ CD ]
Line_2 $$ public int replay(RateLimiter rateLimiter, Set<InetAddress> hintedNodes) throws IOException -->Line_10 $$ rateLimiter.acquire(replayedBytes)[ FD ]
Line_2 $$ public int replay(RateLimiter rateLimiter, Set<InetAddress> hintedNodes) throws IOException -->Line_11 $$ return replayHandlers.size()[ CD ]
Line_2 $$ public int replay(RateLimiter rateLimiter, Set<InetAddress> hintedNodes) throws IOException -->Line_4 $$ if (mutations.isEmpty())[ CD ]
Line_2 $$ public int replay(RateLimiter rateLimiter, Set<InetAddress> hintedNodes) throws IOException -->Line_9 $$ replayHandlers = sendReplays(mutations, writtenAt, hintedNodes)[ FD ]
Line_2 $$ public int replay(RateLimiter rateLimiter, Set<InetAddress> hintedNodes) throws IOException -->Line_10 $$ rateLimiter.acquire(replayedBytes)[ CD ]
Line_2 $$ public int replay(RateLimiter rateLimiter, Set<InetAddress> hintedNodes) throws IOException -->Line_6 $$ int gcgs = gcgs(mutations)[ CD ]
Line_7 $$ if (TimeUnit.MILLISECONDS.toSeconds(writtenAt) + gcgs <= FBUtilities.nowInSeconds())-->Line_8 $$ return 0[ CD ]
Line_2 $$ public int replay(RateLimiter rateLimiter, Set<InetAddress> hintedNodes) throws IOException -->Line_3 $$ logger.trace("Replaying batch [ CD ]
Line_2 $$ public int replay(RateLimiter rateLimiter, Set<InetAddress> hintedNodes) throws IOException -->Line_7 $$ if (TimeUnit.MILLISECONDS.toSeconds(writtenAt) + gcgs <= FBUtilities.nowInSeconds())[ CD ]
