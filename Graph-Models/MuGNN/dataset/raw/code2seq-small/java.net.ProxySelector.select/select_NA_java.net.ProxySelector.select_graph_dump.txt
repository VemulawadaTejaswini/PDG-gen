Line_9 $$ if (myHttpConfigurable.USE_HTTP_PROXY) -->Line_10 $$ if (isProxyException(uri)) [ CD ]
Line_10 $$ if (isProxyException(uri)) -->Line_11 $$ LOG.debug("No proxy: URI '", uri, "' matches proxy exceptions [", myHttpConfigurable.PROXY_EXCEPTIONS, "]")[ CD ]
Line_2 $$ public List<Proxy> select(@NotNull URI uri) -->Line_4 $$ String scheme = uri.getScheme()[ CD ]
Line_39 $$ pair = Pair.create(newProxySelector, pacUrlForUse)-->Line_40 $$ myPacProxySelector.lazySet(pair)[ FD ]
Line_30 $$ if (pair == null) -->Line_32 $$ if (pacUrlForUse != null) [ CD ]
Line_2 $$ public List<Proxy> select(@NotNull URI uri) -->Line_24 $$ if (myHttpConfigurable.USE_PROXY_PAC) [ CD ]
Line_19 $$ Proxy proxy = new Proxy(type, new InetSocketAddress(myHttpConfigurable.PROXY_HOST, myHttpConfigurable.PROXY_PORT))-->Line_20 $$ LOG.debug("Defined proxy: ", proxy)[ FD ]
Line_37 $$ newProxySelector = proxySearch.getProxySelector()-->Line_39 $$ pair = Pair.create(newProxySelector, pacUrlForUse)[ FD ]
Line_25 $$ String pacUrlForUse = myHttpConfigurable.USE_PAC_URL && !StringUtil.isEmpty(myHttpConfigurable.PAC_URL) ? myHttpConfigurable.PAC_URL : null-->Line_27 $$ if (pair != null && !Comparing.equal(pair.second, pacUrlForUse)) [ FD ]
Line_2 $$ public List<Proxy> select(@NotNull URI uri) -->Line_3 $$ LOG.debug("IDEA-wide proxy selector asked for " + uri.toString())[ FD ]
Line_24 $$ if (myHttpConfigurable.USE_PROXY_PAC) -->Line_30 $$ if (pair == null) [ CD ]
Line_35 $$ ProxySearch proxySearch = ProxySearch.getDefaultProxySearch()-->Line_36 $$ proxySearch.setPacCacheSettings(32, 10 * 60 * 1000)[ FD ]
Line_19 $$ Proxy proxy = new Proxy(type, new InetSocketAddress(myHttpConfigurable.PROXY_HOST, myHttpConfigurable.PROXY_PORT))-->Line_22 $$ return Collections.singletonList(proxy)[ FD ]
Line_27 $$ if (pair != null && !Comparing.equal(pair.second, pacUrlForUse)) -->Line_28 $$ pair = null[ CD ]
Line_30 $$ if (pair == null) -->Line_31 $$ ProxySelector newProxySelector[ CD ]
Line_33 $$ newProxySelector = new PacProxySelector(new UrlPacScriptSource(pacUrlForUse))-->Line_39 $$ pair = Pair.create(newProxySelector, pacUrlForUse)[ FD ]
Line_25 $$ String pacUrlForUse = myHttpConfigurable.USE_PAC_URL && !StringUtil.isEmpty(myHttpConfigurable.PAC_URL) ? myHttpConfigurable.PAC_URL : null-->Line_39 $$ pair = Pair.create(newProxySelector, pacUrlForUse)[ FD ]
Line_2 $$ public List<Proxy> select(@NotNull URI uri) -->Line_4 $$ String scheme = uri.getScheme()[ FD ]
Line_9 $$ if (myHttpConfigurable.USE_HTTP_PROXY) -->Line_19 $$ Proxy proxy = new Proxy(type, new InetSocketAddress(myHttpConfigurable.PROXY_HOST, myHttpConfigurable.PROXY_PORT))[ CD ]
Line_26 $$ Pair<ProxySelector, String> pair = myPacProxySelector.get()-->Line_28 $$ pair = null[ FD ]
Line_32 $$ if (pacUrlForUse != null) -->Line_33 $$ newProxySelector = new PacProxySelector(new UrlPacScriptSource(pacUrlForUse))[ CD ]
Line_9 $$ if (myHttpConfigurable.USE_HTTP_PROXY) -->Line_21 $$ myHttpConfigurable.LAST_ERROR = null[ CD ]
Line_31 $$ ProxySelector newProxySelector-->Line_39 $$ pair = Pair.create(newProxySelector, pacUrlForUse)[ FD ]
Line_5 $$ if (!("http".equals(scheme) || "https".equals(scheme))) -->Line_7 $$ return CommonProxy.NO_PROXY_LIST[ CD ]
Line_9 $$ if (myHttpConfigurable.USE_HTTP_PROXY) -->Line_22 $$ return Collections.singletonList(proxy)[ CD ]
Line_43 $$ if (pacProxySelector != null) -->Line_48 $$ LOG.debug("No proxies detected")[ CD ]
Line_2 $$ public List<Proxy> select(@NotNull URI uri) -->Line_11 $$ LOG.debug("No proxy: URI '", uri, "' matches proxy exceptions [", myHttpConfigurable.PROXY_EXCEPTIONS, "]")[ FD ]
Line_28 $$ pair = null-->Line_39 $$ pair = Pair.create(newProxySelector, pacUrlForUse)[ FD ]
Line_2 $$ public List<Proxy> select(@NotNull URI uri) -->Line_51 $$ return CommonProxy.NO_PROXY_LIST[ CD ]
Line_24 $$ if (myHttpConfigurable.USE_PROXY_PAC) -->Line_25 $$ String pacUrlForUse = myHttpConfigurable.USE_PAC_URL && !StringUtil.isEmpty(myHttpConfigurable.PAC_URL) ? myHttpConfigurable.PAC_URL : null[ CD ]
Line_10 $$ if (isProxyException(uri)) -->Line_12 $$ return CommonProxy.NO_PROXY_LIST[ CD ]
Line_25 $$ String pacUrlForUse = myHttpConfigurable.USE_PAC_URL && !StringUtil.isEmpty(myHttpConfigurable.PAC_URL) ? myHttpConfigurable.PAC_URL : null-->Line_32 $$ if (pacUrlForUse != null) [ FD ]
Line_32 $$ if (pacUrlForUse != null) -->Line_35 $$ ProxySearch proxySearch = ProxySearch.getDefaultProxySearch()[ CD ]
Line_2 $$ public List<Proxy> select(@NotNull URI uri) -->Line_9 $$ if (myHttpConfigurable.USE_HTTP_PROXY) [ CD ]
Line_14 $$ if (myHttpConfigurable.PROXY_PORT < 0 || myHttpConfigurable.PROXY_PORT > 65535) -->Line_15 $$ LOG.debug("No proxy: invalid port: " + myHttpConfigurable.PROXY_PORT)[ CD ]
Line_2 $$ public List<Proxy> select(@NotNull URI uri) -->Line_44 $$ List<Proxy> select = pacProxySelector.select(uri)[ FD ]
Line_9 $$ if (myHttpConfigurable.USE_HTTP_PROXY) -->Line_18 $$ Proxy.Type type = myHttpConfigurable.PROXY_TYPE_IS_SOCKS ? Proxy.Type.SOCKS : Proxy.Type.HTTP[ CD ]
Line_32 $$ if (pacUrlForUse != null) -->Line_37 $$ newProxySelector = proxySearch.getProxySelector()[ CD ]
Line_5 $$ if (!("http".equals(scheme) || "https".equals(scheme))) -->Line_6 $$ LOG.debug("No proxy: not http/https scheme: " + scheme)[ CD ]
Line_24 $$ if (myHttpConfigurable.USE_PROXY_PAC) -->Line_42 $$ ProxySelector pacProxySelector = pair.first[ CD ]
Line_9 $$ if (myHttpConfigurable.USE_HTTP_PROXY) -->Line_20 $$ LOG.debug("Defined proxy: ", proxy)[ CD ]
Line_43 $$ if (pacProxySelector != null) -->Line_44 $$ List<Proxy> select = pacProxySelector.select(uri)[ CD ]
Line_33 $$ newProxySelector = new PacProxySelector(new UrlPacScriptSource(pacUrlForUse))-->Line_37 $$ newProxySelector = proxySearch.getProxySelector()[ FD ]
Line_4 $$ String scheme = uri.getScheme()-->Line_5 $$ if (!("http".equals(scheme) || "https".equals(scheme))) [ FD ]
Line_2 $$ public List<Proxy> select(@NotNull URI uri) -->Line_10 $$ if (isProxyException(uri)) [ FD ]
Line_43 $$ if (pacProxySelector != null) -->Line_45 $$ LOG.debug("Autodetected proxies: ", select)[ CD ]
Line_30 $$ if (pair == null) -->Line_39 $$ pair = Pair.create(newProxySelector, pacUrlForUse)[ CD ]
Line_24 $$ if (myHttpConfigurable.USE_PROXY_PAC) -->Line_26 $$ Pair<ProxySelector, String> pair = myPacProxySelector.get()[ CD ]
Line_31 $$ ProxySelector newProxySelector-->Line_37 $$ newProxySelector = proxySearch.getProxySelector()[ FD ]
Line_30 $$ if (pair == null) -->Line_40 $$ myPacProxySelector.lazySet(pair)[ CD ]
Line_26 $$ Pair<ProxySelector, String> pair = myPacProxySelector.get()-->Line_40 $$ myPacProxySelector.lazySet(pair)[ FD ]
Line_42 $$ ProxySelector pacProxySelector = pair.first-->Line_43 $$ if (pacProxySelector != null) [ FD ]
Line_31 $$ ProxySelector newProxySelector-->Line_33 $$ newProxySelector = new PacProxySelector(new UrlPacScriptSource(pacUrlForUse))[ FD ]
Line_2 $$ public List<Proxy> select(@NotNull URI uri) -->Line_5 $$ if (!("http".equals(scheme) || "https".equals(scheme))) [ CD ]
Line_44 $$ List<Proxy> select = pacProxySelector.select(uri)-->Line_45 $$ LOG.debug("Autodetected proxies: ", select)[ FD ]
Line_14 $$ if (myHttpConfigurable.PROXY_PORT < 0 || myHttpConfigurable.PROXY_PORT > 65535) -->Line_16 $$ return CommonProxy.NO_PROXY_LIST[ CD ]
Line_24 $$ if (myHttpConfigurable.USE_PROXY_PAC) -->Line_27 $$ if (pair != null && !Comparing.equal(pair.second, pacUrlForUse)) [ CD ]
Line_35 $$ ProxySearch proxySearch = ProxySearch.getDefaultProxySearch()-->Line_37 $$ newProxySelector = proxySearch.getProxySelector()[ FD ]
Line_42 $$ ProxySelector pacProxySelector = pair.first-->Line_44 $$ List<Proxy> select = pacProxySelector.select(uri)[ FD ]
Line_24 $$ if (myHttpConfigurable.USE_PROXY_PAC) -->Line_43 $$ if (pacProxySelector != null) [ CD ]
Line_9 $$ if (myHttpConfigurable.USE_HTTP_PROXY) -->Line_14 $$ if (myHttpConfigurable.PROXY_PORT < 0 || myHttpConfigurable.PROXY_PORT > 65535) [ CD ]
Line_26 $$ Pair<ProxySelector, String> pair = myPacProxySelector.get()-->Line_39 $$ pair = Pair.create(newProxySelector, pacUrlForUse)[ FD ]
Line_32 $$ if (pacUrlForUse != null) -->Line_36 $$ proxySearch.setPacCacheSettings(32, 10 * 60 * 1000)[ CD ]
Line_26 $$ Pair<ProxySelector, String> pair = myPacProxySelector.get()-->Line_30 $$ if (pair == null) [ FD ]
Line_28 $$ pair = null-->Line_40 $$ myPacProxySelector.lazySet(pair)[ FD ]
Line_43 $$ if (pacProxySelector != null) -->Line_46 $$ return select[ CD ]
Line_2 $$ public List<Proxy> select(@NotNull URI uri) -->Line_3 $$ LOG.debug("IDEA-wide proxy selector asked for " + uri.toString())[ CD ]
Line_28 $$ pair = null-->Line_30 $$ if (pair == null) [ FD ]
