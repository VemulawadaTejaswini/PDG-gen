Line_2 $$ public void testSystemClassLoaderNotOverriding() throws IOException, ClassNotFoundException -->Line_4 $$ ClassLoader.getSystemClassLoader().loadClass(testClass.getName())[ CD ]
Line_7 $$ Class<?> anotherClass = anotherLoader.loadClass(testClass.getName())-->Line_8 $$ Assert.assertNotSame(testClass, anotherClass)[ FD ]
Line_3 $$ Class<?> testClass = Entity.class-->Line_4 $$ ClassLoader.getSystemClassLoader().loadClass(testClass.getName())[ FD ]
Line_10 $$ Class<Object> objectClass = loaderService.classForName(testClass.getName())-->Line_11 $$ Assert.assertSame("Should not return class loaded from the parent classloader of ClassLoaderServiceImpl", objectClass, anotherClass)[ FD ]
Line_5 $$ TestClassLoader anotherLoader = new TestClassLoader()-->Line_6 $$ anotherLoader.overrideClass(testClass)[ FD ]
Line_2 $$ public void testSystemClassLoaderNotOverriding() throws IOException, ClassNotFoundException -->Line_7 $$ Class<?> anotherClass = anotherLoader.loadClass(testClass.getName())[ CD ]
Line_2 $$ public void testSystemClassLoaderNotOverriding() throws IOException, ClassNotFoundException -->Line_10 $$ Class<Object> objectClass = loaderService.classForName(testClass.getName())[ CD ]
Line_2 $$ public void testSystemClassLoaderNotOverriding() throws IOException, ClassNotFoundException -->Line_3 $$ Class<?> testClass = Entity.class[ CD ]
Line_2 $$ public void testSystemClassLoaderNotOverriding() throws IOException, ClassNotFoundException -->Line_9 $$ ClassLoaderServiceImpl loaderService = new ClassLoaderServiceImpl(anotherLoader)[ CD ]
Line_7 $$ Class<?> anotherClass = anotherLoader.loadClass(testClass.getName())-->Line_11 $$ Assert.assertSame("Should not return class loaded from the parent classloader of ClassLoaderServiceImpl", objectClass, anotherClass)[ FD ]
Line_3 $$ Class<?> testClass = Entity.class-->Line_6 $$ anotherLoader.overrideClass(testClass)[ FD ]
Line_5 $$ TestClassLoader anotherLoader = new TestClassLoader()-->Line_7 $$ Class<?> anotherClass = anotherLoader.loadClass(testClass.getName())[ FD ]
Line_3 $$ Class<?> testClass = Entity.class-->Line_10 $$ Class<Object> objectClass = loaderService.classForName(testClass.getName())[ FD ]
Line_2 $$ public void testSystemClassLoaderNotOverriding() throws IOException, ClassNotFoundException -->Line_11 $$ Assert.assertSame("Should not return class loaded from the parent classloader of ClassLoaderServiceImpl", objectClass, anotherClass)[ CD ]
Line_2 $$ public void testSystemClassLoaderNotOverriding() throws IOException, ClassNotFoundException -->Line_5 $$ TestClassLoader anotherLoader = new TestClassLoader()[ CD ]
Line_3 $$ Class<?> testClass = Entity.class-->Line_7 $$ Class<?> anotherClass = anotherLoader.loadClass(testClass.getName())[ FD ]
Line_2 $$ public void testSystemClassLoaderNotOverriding() throws IOException, ClassNotFoundException -->Line_6 $$ anotherLoader.overrideClass(testClass)[ CD ]
Line_9 $$ ClassLoaderServiceImpl loaderService = new ClassLoaderServiceImpl(anotherLoader)-->Line_10 $$ Class<Object> objectClass = loaderService.classForName(testClass.getName())[ FD ]
Line_3 $$ Class<?> testClass = Entity.class-->Line_8 $$ Assert.assertNotSame(testClass, anotherClass)[ FD ]
Line_2 $$ public void testSystemClassLoaderNotOverriding() throws IOException, ClassNotFoundException -->Line_8 $$ Assert.assertNotSame(testClass, anotherClass)[ CD ]
