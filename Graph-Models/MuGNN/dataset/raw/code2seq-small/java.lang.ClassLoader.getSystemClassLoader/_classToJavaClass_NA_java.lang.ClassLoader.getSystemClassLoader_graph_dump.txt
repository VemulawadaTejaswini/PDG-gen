Line_7 $$ String resourcePath = aspectClass.getName()-->Line_8 $$ resourcePath = resourcePath.replace('.', '/') + ".class"[ FD ]
Line_3 $$ ClassLoader aspectClassLoader = aspectClass.getClassLoader()-->Line_5 $$ aspectClassLoader = ClassLoader.getSystemClassLoader()[ FD ]
Line_2 $$ private JavaClass _classToJavaClass(Class<?> aspectClass) -->Line_7 $$ String resourcePath = aspectClass.getName()[ FD ]
Line_8 $$ resourcePath = resourcePath.replace('.', '/') + ".class"-->Line_10 $$ InputStream inputStream = aspectClassLoader.getResourceAsStream(resourcePath)[ FD ]
Line_10 $$ InputStream inputStream = aspectClassLoader.getResourceAsStream(resourcePath)-->Line_11 $$ if (inputStream instanceof ByteArrayInputStream) [ FD ]
Line_15 $$ UnsyncByteArrayOutputStream unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()-->Line_18 $$ byteArrayInputStream = new ByteArrayInputStream(classData, 0, unsyncByteArrayOutputStream.size())[ FD ]
Line_10 $$ InputStream inputStream = aspectClassLoader.getResourceAsStream(resourcePath)-->Line_16 $$ StreamUtil.transfer(inputStream, unsyncByteArrayOutputStream)[ FD ]
Line_12 $$ byteArrayInputStream = (ByteArrayInputStream) inputStream-->Line_18 $$ byteArrayInputStream = new ByteArrayInputStream(classData, 0, unsyncByteArrayOutputStream.size())[ FD ]
Line_23 $$ ClassParser classParser = new ClassParser(byteArrayInputStream, aspectClass.getSimpleName() + ".class")-->Line_25 $$ return classParser.parse()[ FD ]
Line_2 $$ private JavaClass _classToJavaClass(Class<?> aspectClass) -->Line_10 $$ InputStream inputStream = aspectClassLoader.getResourceAsStream(resourcePath)[ CD ]
Line_2 $$ private JavaClass _classToJavaClass(Class<?> aspectClass) -->Line_3 $$ ClassLoader aspectClassLoader = aspectClass.getClassLoader()[ FD ]
Line_11 $$ if (inputStream instanceof ByteArrayInputStream) -->Line_12 $$ byteArrayInputStream = (ByteArrayInputStream) inputStream[ CD ]
Line_2 $$ private JavaClass _classToJavaClass(Class<?> aspectClass) -->Line_7 $$ String resourcePath = aspectClass.getName()[ CD ]
Line_4 $$ if (aspectClassLoader == null) -->Line_5 $$ aspectClassLoader = ClassLoader.getSystemClassLoader()[ CD ]
Line_2 $$ private JavaClass _classToJavaClass(Class<?> aspectClass) -->Line_23 $$ ClassParser classParser = new ClassParser(byteArrayInputStream, aspectClass.getSimpleName() + ".class")[ CD ]
Line_2 $$ private JavaClass _classToJavaClass(Class<?> aspectClass) -->Line_4 $$ if (aspectClassLoader == null) [ CD ]
Line_15 $$ UnsyncByteArrayOutputStream unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()-->Line_17 $$ byte[] classData = unsyncByteArrayOutputStream.unsafeGetByteArray()[ FD ]
Line_2 $$ private JavaClass _classToJavaClass(Class<?> aspectClass) -->Line_3 $$ ClassLoader aspectClassLoader = aspectClass.getClassLoader()[ CD ]
Line_9 $$ ByteArrayInputStream byteArrayInputStream = null-->Line_18 $$ byteArrayInputStream = new ByteArrayInputStream(classData, 0, unsyncByteArrayOutputStream.size())[ FD ]
Line_2 $$ private JavaClass _classToJavaClass(Class<?> aspectClass) -->Line_23 $$ ClassParser classParser = new ClassParser(byteArrayInputStream, aspectClass.getSimpleName() + ".class")[ FD ]
Line_2 $$ private JavaClass _classToJavaClass(Class<?> aspectClass) -->Line_11 $$ if (inputStream instanceof ByteArrayInputStream) [ CD ]
Line_9 $$ ByteArrayInputStream byteArrayInputStream = null-->Line_12 $$ byteArrayInputStream = (ByteArrayInputStream) inputStream[ FD ]
Line_2 $$ private JavaClass _classToJavaClass(Class<?> aspectClass) -->Line_8 $$ resourcePath = resourcePath.replace('.', '/') + ".class"[ CD ]
Line_3 $$ ClassLoader aspectClassLoader = aspectClass.getClassLoader()-->Line_4 $$ if (aspectClassLoader == null) [ FD ]
Line_5 $$ aspectClassLoader = ClassLoader.getSystemClassLoader()-->Line_10 $$ InputStream inputStream = aspectClassLoader.getResourceAsStream(resourcePath)[ FD ]
Line_3 $$ ClassLoader aspectClassLoader = aspectClass.getClassLoader()-->Line_10 $$ InputStream inputStream = aspectClassLoader.getResourceAsStream(resourcePath)[ FD ]
Line_7 $$ String resourcePath = aspectClass.getName()-->Line_10 $$ InputStream inputStream = aspectClassLoader.getResourceAsStream(resourcePath)[ FD ]
Line_15 $$ UnsyncByteArrayOutputStream unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()-->Line_16 $$ StreamUtil.transfer(inputStream, unsyncByteArrayOutputStream)[ FD ]
Line_2 $$ private JavaClass _classToJavaClass(Class<?> aspectClass) -->Line_9 $$ ByteArrayInputStream byteArrayInputStream = null[ CD ]
