Line_2 $$ private static List<File> findAvailableClasspathFiles(ClassLoader classLoader) -->Line_3 $$ List<URL> rawClasspath = ClasspathUtil.getClasspath(classLoader)[ FD ]
Line_2 $$ private static List<File> findAvailableClasspathFiles(ClassLoader classLoader) -->Line_3 $$ List<URL> rawClasspath = ClasspathUtil.getClasspath(classLoader)[ CD ]
Line_4 $$ List<File> classpathFiles = new ArrayList<File>()-->Line_20 $$ addClasspathFile(new File(value), classpathFiles)[ FD ]
Line_8 $$ File classpathFile = new File(url.toURI())-->Line_9 $$ addClasspathFile(classpathFile, classpathFiles)[ FD ]
Line_2 $$ private static List<File> findAvailableClasspathFiles(ClassLoader classLoader) -->Line_4 $$ List<File> classpathFiles = new ArrayList<File>()[ CD ]
Line_2 $$ private static List<File> findAvailableClasspathFiles(ClassLoader classLoader) -->Line_23 $$ return classpathFiles[ CD ]
Line_5 $$ for (URL url : rawClasspath) -->Line_8 $$ File classpathFile = new File(url.toURI())[ FD ]
Line_5 $$ for (URL url : rawClasspath) -->Line_6 $$ if (url.getProtocol().equals("file")) [ FD ]
Line_4 $$ List<File> classpathFiles = new ArrayList<File>()-->Line_9 $$ addClasspathFile(classpathFile, classpathFiles)[ FD ]
