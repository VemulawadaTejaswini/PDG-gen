Line_2 $$ public Object createProxy(Errors errors, Class<?> expectedType) throws ErrorsException -->Line_12 $$ return expectedType.cast(Proxy.newProxyInstance(classLoader, new Class[] [ CD ]
Line_2 $$ public Object createProxy(Errors errors, Class<?> expectedType) throws ErrorsException -->Line_12 $$ return expectedType.cast(Proxy.newProxyInstance(classLoader, new Class[] [ FD ]
Line_9 $$ DelegatingInvocationHandler<T> invocationHandler = new DelegatingInvocationHandler()-->Line_12 $$ return expectedType.cast(Proxy.newProxyInstance(classLoader, new Class[] [ FD ]
Line_2 $$ public Object createProxy(Errors errors, Class<?> expectedType) throws ErrorsException -->Line_11 $$ ClassLoader classLoader = expectedType.getClassLoader() == null ? ClassLoader.getSystemClassLoader() : expectedType.getClassLoader()[ CD ]
Line_2 $$ public Object createProxy(Errors errors, Class<?> expectedType) throws ErrorsException -->Line_6 $$ if (invocationHandlers == null) [ CD ]
Line_11 $$ ClassLoader classLoader = expectedType.getClassLoader() == null ? ClassLoader.getSystemClassLoader() : expectedType.getClassLoader()-->Line_12 $$ return expectedType.cast(Proxy.newProxyInstance(classLoader, new Class[] [ FD ]
Line_2 $$ public Object createProxy(Errors errors, Class<?> expectedType) throws ErrorsException -->Line_4 $$ throw errors.cannotSatisfyCircularDependency(expectedType).toException()[ FD ]
Line_2 $$ public Object createProxy(Errors errors, Class<?> expectedType) throws ErrorsException -->Line_3 $$ if (!expectedType.isInterface()) [ CD ]
Line_2 $$ public Object createProxy(Errors errors, Class<?> expectedType) throws ErrorsException -->Line_11 $$ ClassLoader classLoader = expectedType.getClassLoader() == null ? ClassLoader.getSystemClassLoader() : expectedType.getClassLoader()[ FD ]
Line_2 $$ public Object createProxy(Errors errors, Class<?> expectedType) throws ErrorsException -->Line_9 $$ DelegatingInvocationHandler<T> invocationHandler = new DelegatingInvocationHandler()[ CD ]
Line_9 $$ DelegatingInvocationHandler<T> invocationHandler = new DelegatingInvocationHandler()-->Line_10 $$ invocationHandlers.add(invocationHandler)[ FD ]
Line_2 $$ public Object createProxy(Errors errors, Class<?> expectedType) throws ErrorsException -->Line_10 $$ invocationHandlers.add(invocationHandler)[ CD ]
Line_2 $$ public Object createProxy(Errors errors, Class<?> expectedType) throws ErrorsException -->Line_3 $$ if (!expectedType.isInterface()) [ FD ]
