Line_8 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()-->Line_26 $$ Assert.assertEquals(methods.toString(), 2, methods.size())[ FD ]
Line_10 $$ int hibernateJDBCBatchSize = PropsValues.HIBERNATE_JDBC_BATCH_SIZE-->Line_47 $$ ReflectionTestUtil.setFieldValue(PropsValues.class, "HIBERNATE_JDBC_BATCH_SIZE", hibernateJDBCBatchSize)[ FD ]
Line_8 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()-->Line_21 $$ Assert.assertEquals(PreparedStatement.class.getMethod("addBatch"), methods.remove(0))[ FD ]
Line_8 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()-->Line_43 $$ Assert.assertEquals(methods.toString(), 1, methods.size())[ FD ]
Line_6 $$ InvocationHandler invocationHandler = ProxyUtil.getInvocationHandler(preparedStatement)-->Line_16 $$ Assert.assertEquals(0, ReflectionTestUtil.getFieldValue(invocationHandler, "_count"))[ FD ]
Line_8 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()-->Line_28 $$ Assert.assertEquals(PreparedStatement.class.getMethod("executeBatch"), methods.remove(0))[ FD ]
Line_8 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()-->Line_34 $$ Assert.assertEquals(PreparedStatement.class.getMethod("addBatch"), methods.remove(0))[ FD ]
Line_6 $$ InvocationHandler invocationHandler = ProxyUtil.getInvocationHandler(preparedStatement)-->Line_40 $$ Assert.assertEquals(0, ReflectionTestUtil.getFieldValue(invocationHandler, "_count"))[ FD ]
Line_6 $$ InvocationHandler invocationHandler = ProxyUtil.getInvocationHandler(preparedStatement)-->Line_22 $$ Assert.assertEquals(1, ReflectionTestUtil.getFieldValue(invocationHandler, "_count"))[ FD ]
Line_8 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()-->Line_39 $$ Assert.assertEquals(PreparedStatement.class.getMethod("executeBatch"), methods.remove(0))[ FD ]
Line_6 $$ InvocationHandler invocationHandler = ProxyUtil.getInvocationHandler(preparedStatement)-->Line_45 $$ Assert.assertEquals(0, ReflectionTestUtil.getFieldValue(invocationHandler, "_count"))[ FD ]
Line_8 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()-->Line_27 $$ Assert.assertEquals(PreparedStatement.class.getMethod("addBatch"), methods.remove(0))[ FD ]
Line_8 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()-->Line_20 $$ Assert.assertEquals(methods.toString(), 1, methods.size())[ FD ]
Line_4 $$ PreparedStatementInvocationHandler preparedStatementInvocationHandler = new PreparedStatementInvocationHandler(true)-->Line_8 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()[ FD ]
Line_8 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()-->Line_38 $$ Assert.assertEquals(methods.toString(), 1, methods.size())[ FD ]
Line_8 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()-->Line_15 $$ Assert.assertTrue(methods.toString(), methods.isEmpty())[ FD ]
Line_8 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()-->Line_44 $$ Assert.assertEquals(PreparedStatement.class.getMethod("execute"), methods.remove(0))[ FD ]
Line_5 $$ PreparedStatement preparedStatement = AutoBatchPreparedStatementUtil.autoBatch((PreparedStatement) ProxyUtil.newProxyInstance(ClassLoader.getSystemClassLoader(), new Class<?>[] -->Line_6 $$ InvocationHandler invocationHandler = ProxyUtil.getInvocationHandler(preparedStatement)[ FD ]
Line_6 $$ InvocationHandler invocationHandler = ProxyUtil.getInvocationHandler(preparedStatement)-->Line_29 $$ Assert.assertEquals(0, ReflectionTestUtil.getFieldValue(invocationHandler, "_count"))[ FD ]
Line_6 $$ InvocationHandler invocationHandler = ProxyUtil.getInvocationHandler(preparedStatement)-->Line_35 $$ Assert.assertEquals(1, ReflectionTestUtil.getFieldValue(invocationHandler, "_count"))[ FD ]
Line_8 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()-->Line_33 $$ Assert.assertEquals(methods.toString(), 1, methods.size())[ FD ]
Line_4 $$ PreparedStatementInvocationHandler preparedStatementInvocationHandler = new PreparedStatementInvocationHandler(true)-->Line_5 $$ PreparedStatement preparedStatement = AutoBatchPreparedStatementUtil.autoBatch((PreparedStatement) ProxyUtil.newProxyInstance(ClassLoader.getSystemClassLoader(), new Class<?>[] [ FD ]
Line_8 $$ List<Method> methods = preparedStatementInvocationHandler.getMethods()-->Line_9 $$ Assert.assertTrue(methods.toString(), methods.isEmpty())[ FD ]
Line_6 $$ InvocationHandler invocationHandler = ProxyUtil.getInvocationHandler(preparedStatement)-->Line_7 $$ Assert.assertEquals(0, ReflectionTestUtil.getFieldValue(invocationHandler, "_count"))[ FD ]
