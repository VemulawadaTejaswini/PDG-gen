Line_32 $$ try (DirectoryStream<Path> directoryStream = fileSystemProvider.newDirectoryStream(fileSystem.getPath(path), new Filter<Path>() -->Line_37 $$ String fileName = fileNamePath.toString()[ CD ]
Line_15 $$ Enumeration<URL> enumeration = classLoader.getResources(path)-->Line_17 $$ urls = Collections.list(enumeration)[ FD ]
Line_2 $$ protected Collection<JavaFileObject> handleSystemBundle(BundleWiring bundleWiring, String path) -->Line_9 $$ if (extraPackageMap != null) [ CD ]
Line_2 $$ protected Collection<JavaFileObject> handleSystemBundle(BundleWiring bundleWiring, String path) -->Line_55 $$ if (javaFileObjects == null) [ CD ]
Line_2 $$ protected Collection<JavaFileObject> handleSystemBundle(BundleWiring bundleWiring, String path) -->Line_24 $$ _javaFileObjects.put(path, Collections.<JavaFileObject>emptyList())[ FD ]
Line_8 $$ Map<String, List<URL>> extraPackageMap = _serviceTracker.getService()-->Line_9 $$ if (extraPackageMap != null) [ FD ]
Line_2 $$ protected Collection<JavaFileObject> handleSystemBundle(BundleWiring bundleWiring, String path) -->Line_32 $$ try (DirectoryStream<Path> directoryStream = fileSystemProvider.newDirectoryStream(fileSystem.getPath(path), new Filter<Path>() [ FD ]
Line_3 $$ Collection<JavaFileObject> javaFileObjects = _javaFileObjects.get(path)-->Line_47 $$ javaFileObjects.add(new JarJavaFileObject(getClassName(entryPathString), file, entryPathString))[ FD ]
Line_30 $$ try (FileSystem fileSystem = FileSystems.newFileSystem(file.toPath(), null)) -->Line_32 $$ try (DirectoryStream<Path> directoryStream = fileSystemProvider.newDirectoryStream(fileSystem.getPath(path), new Filter<Path>() [ FD ]
Line_2 $$ protected Collection<JavaFileObject> handleSystemBundle(BundleWiring bundleWiring, String path) -->Line_23 $$ if ((urls == null) || urls.isEmpty()) [ CD ]
Line_16 $$ if ((enumeration != null) && enumeration.hasMoreElements()) -->Line_17 $$ urls = Collections.list(enumeration)[ CD ]
Line_13 $$ ClassLoader classLoader = bundleWiring.getClassLoader()-->Line_15 $$ Enumeration<URL> enumeration = classLoader.getResources(path)[ FD ]
Line_12 $$ if ((urls == null) || urls.isEmpty()) -->Line_13 $$ ClassLoader classLoader = bundleWiring.getClassLoader()[ CD ]
Line_4 $$ if (javaFileObjects != null) -->Line_5 $$ return javaFileObjects[ CD ]
Line_32 $$ try (DirectoryStream<Path> directoryStream = fileSystemProvider.newDirectoryStream(fileSystem.getPath(path), new Filter<Path>() -->Line_45 $$ String entryPathString = entryPath.toString()[ FD ]
Line_2 $$ protected Collection<JavaFileObject> handleSystemBundle(BundleWiring bundleWiring, String path) -->Line_7 $$ List<URL> urls = null[ CD ]
Line_23 $$ if ((urls == null) || urls.isEmpty()) -->Line_24 $$ _javaFileObjects.put(path, Collections.<JavaFileObject>emptyList())[ CD ]
Line_29 $$ File file = getFile(url)-->Line_30 $$ try (FileSystem fileSystem = FileSystems.newFileSystem(file.toPath(), null)) [ FD ]
Line_9 $$ if (extraPackageMap != null) -->Line_10 $$ urls = extraPackageMap.get(path.replace('/', '.'))[ CD ]
Line_37 $$ String fileName = fileNamePath.toString()-->Line_38 $$ return fileName.endsWith(".class")[ FD ]
Line_27 $$ for (URL url : urls) -->Line_29 $$ File file = getFile(url)[ FD ]
Line_15 $$ Enumeration<URL> enumeration = classLoader.getResources(path)-->Line_16 $$ if ((enumeration != null) && enumeration.hasMoreElements()) [ FD ]
Line_3 $$ Collection<JavaFileObject> javaFileObjects = _javaFileObjects.get(path)-->Line_58 $$ _javaFileObjects.put(path, javaFileObjects)[ FD ]
Line_8 $$ Map<String, List<URL>> extraPackageMap = _serviceTracker.getService()-->Line_10 $$ urls = extraPackageMap.get(path.replace('/', '.'))[ FD ]
Line_3 $$ Collection<JavaFileObject> javaFileObjects = _javaFileObjects.get(path)-->Line_42 $$ if (javaFileObjects == null) [ FD ]
Line_2 $$ protected Collection<JavaFileObject> handleSystemBundle(BundleWiring bundleWiring, String path) -->Line_12 $$ if ((urls == null) || urls.isEmpty()) [ CD ]
Line_32 $$ try (DirectoryStream<Path> directoryStream = fileSystemProvider.newDirectoryStream(fileSystem.getPath(path), new Filter<Path>() -->Line_36 $$ Path fileNamePath = entryPath.getFileName()[ CD ]
Line_31 $$ FileSystemProvider fileSystemProvider = fileSystem.provider()-->Line_32 $$ try (DirectoryStream<Path> directoryStream = fileSystemProvider.newDirectoryStream(fileSystem.getPath(path), new Filter<Path>() [ FD ]
Line_36 $$ Path fileNamePath = entryPath.getFileName()-->Line_37 $$ String fileName = fileNamePath.toString()[ FD ]
Line_2 $$ protected Collection<JavaFileObject> handleSystemBundle(BundleWiring bundleWiring, String path) -->Line_3 $$ Collection<JavaFileObject> javaFileObjects = _javaFileObjects.get(path)[ FD ]
Line_2 $$ protected Collection<JavaFileObject> handleSystemBundle(BundleWiring bundleWiring, String path) -->Line_3 $$ Collection<JavaFileObject> javaFileObjects = _javaFileObjects.get(path)[ CD ]
Line_3 $$ Collection<JavaFileObject> javaFileObjects = _javaFileObjects.get(path)-->Line_4 $$ if (javaFileObjects != null) [ FD ]
Line_2 $$ protected Collection<JavaFileObject> handleSystemBundle(BundleWiring bundleWiring, String path) -->Line_13 $$ ClassLoader classLoader = bundleWiring.getClassLoader()[ FD ]
Line_2 $$ protected Collection<JavaFileObject> handleSystemBundle(BundleWiring bundleWiring, String path) -->Line_59 $$ return javaFileObjects[ CD ]
Line_55 $$ if (javaFileObjects == null) -->Line_56 $$ javaFileObjects = Collections.<JavaFileObject>emptyList()[ CD ]
Line_32 $$ try (DirectoryStream<Path> directoryStream = fileSystemProvider.newDirectoryStream(fileSystem.getPath(path), new Filter<Path>() -->Line_38 $$ return fileName.endsWith(".class")[ CD ]
Line_32 $$ try (DirectoryStream<Path> directoryStream = fileSystemProvider.newDirectoryStream(fileSystem.getPath(path), new Filter<Path>() -->Line_36 $$ Path fileNamePath = entryPath.getFileName()[ FD ]
Line_2 $$ protected Collection<JavaFileObject> handleSystemBundle(BundleWiring bundleWiring, String path) -->Line_58 $$ _javaFileObjects.put(path, javaFileObjects)[ FD ]
Line_7 $$ List<URL> urls = null-->Line_17 $$ urls = Collections.list(enumeration)[ FD ]
Line_2 $$ protected Collection<JavaFileObject> handleSystemBundle(BundleWiring bundleWiring, String path) -->Line_58 $$ _javaFileObjects.put(path, javaFileObjects)[ CD ]
Line_23 $$ if ((urls == null) || urls.isEmpty()) -->Line_25 $$ return Collections.emptyList()[ CD ]
Line_2 $$ protected Collection<JavaFileObject> handleSystemBundle(BundleWiring bundleWiring, String path) -->Line_10 $$ urls = extraPackageMap.get(path.replace('/', '.'))[ FD ]
Line_10 $$ urls = extraPackageMap.get(path.replace('/', '.'))-->Line_23 $$ if ((urls == null) || urls.isEmpty()) [ FD ]
Line_7 $$ List<URL> urls = null-->Line_10 $$ urls = extraPackageMap.get(path.replace('/', '.'))[ FD ]
Line_2 $$ protected Collection<JavaFileObject> handleSystemBundle(BundleWiring bundleWiring, String path) -->Line_8 $$ Map<String, List<URL>> extraPackageMap = _serviceTracker.getService()[ CD ]
Line_7 $$ List<URL> urls = null-->Line_12 $$ if ((urls == null) || urls.isEmpty()) [ FD ]
Line_10 $$ urls = extraPackageMap.get(path.replace('/', '.'))-->Line_12 $$ if ((urls == null) || urls.isEmpty()) [ FD ]
Line_2 $$ protected Collection<JavaFileObject> handleSystemBundle(BundleWiring bundleWiring, String path) -->Line_15 $$ Enumeration<URL> enumeration = classLoader.getResources(path)[ FD ]
Line_17 $$ urls = Collections.list(enumeration)-->Line_23 $$ if ((urls == null) || urls.isEmpty()) [ FD ]
Line_30 $$ try (FileSystem fileSystem = FileSystems.newFileSystem(file.toPath(), null)) -->Line_31 $$ FileSystemProvider fileSystemProvider = fileSystem.provider()[ FD ]
Line_10 $$ urls = extraPackageMap.get(path.replace('/', '.'))-->Line_17 $$ urls = Collections.list(enumeration)[ FD ]
Line_3 $$ Collection<JavaFileObject> javaFileObjects = _javaFileObjects.get(path)-->Line_55 $$ if (javaFileObjects == null) [ FD ]
Line_7 $$ List<URL> urls = null-->Line_23 $$ if ((urls == null) || urls.isEmpty()) [ FD ]
Line_2 $$ protected Collection<JavaFileObject> handleSystemBundle(BundleWiring bundleWiring, String path) -->Line_4 $$ if (javaFileObjects != null) [ CD ]
