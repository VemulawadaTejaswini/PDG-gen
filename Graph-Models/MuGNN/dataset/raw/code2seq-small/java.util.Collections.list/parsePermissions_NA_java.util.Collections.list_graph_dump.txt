Line_21 $$ PermissionCollection actualPermissions = new Permissions()-->Line_24 $$ actualPermissions.add(permission)[ FD ]
Line_2 $$ static PermissionCollection parsePermissions(Terminal terminal, Path file, Path tmpDir) throws IOException -->Line_27 $$ actualPermissions.setReadOnly()[ CD ]
Line_17 $$ PermissionCollection permissions = policy.getPermissions(PluginSecurity.class.getProtectionDomain())-->Line_18 $$ if (permissions == Policy.UNSUPPORTED_EMPTY_COLLECTION) [ FD ]
Line_2 $$ static PermissionCollection parsePermissions(Terminal terminal, Path file, Path tmpDir) throws IOException -->Line_10 $$ PluginManager.tryToDeletePath(terminal, emptyPolicyFile)[ CD ]
Line_11 $$ final Policy policy-->Line_17 $$ PermissionCollection permissions = policy.getPermissions(PluginSecurity.class.getProtectionDomain())[ FD ]
Line_23 $$ if (!emptyPolicy.implies(PluginSecurity.class.getProtectionDomain(), permission)) -->Line_24 $$ actualPermissions.add(permission)[ CD ]
Line_6 $$ emptyPolicy = Policy.getInstance("JavaPolicy", new URIParameter(emptyPolicyFile.toUri()))-->Line_23 $$ if (!emptyPolicy.implies(PluginSecurity.class.getProtectionDomain(), permission)) [ FD ]
Line_2 $$ static PermissionCollection parsePermissions(Terminal terminal, Path file, Path tmpDir) throws IOException -->Line_3 $$ Path emptyPolicyFile = Files.createTempFile(tmpDir, "empty", "tmp")[ CD ]
Line_4 $$ final Policy emptyPolicy-->Line_6 $$ emptyPolicy = Policy.getInstance("JavaPolicy", new URIParameter(emptyPolicyFile.toUri()))[ FD ]
Line_2 $$ static PermissionCollection parsePermissions(Terminal terminal, Path file, Path tmpDir) throws IOException -->Line_17 $$ PermissionCollection permissions = policy.getPermissions(PluginSecurity.class.getProtectionDomain())[ CD ]
Line_3 $$ Path emptyPolicyFile = Files.createTempFile(tmpDir, "empty", "tmp")-->Line_6 $$ emptyPolicy = Policy.getInstance("JavaPolicy", new URIParameter(emptyPolicyFile.toUri()))[ FD ]
Line_2 $$ static PermissionCollection parsePermissions(Terminal terminal, Path file, Path tmpDir) throws IOException -->Line_28 $$ return actualPermissions[ CD ]
Line_2 $$ static PermissionCollection parsePermissions(Terminal terminal, Path file, Path tmpDir) throws IOException -->Line_18 $$ if (permissions == Policy.UNSUPPORTED_EMPTY_COLLECTION) [ CD ]
Line_11 $$ final Policy policy-->Line_13 $$ policy = Policy.getInstance("JavaPolicy", new URIParameter(file.toUri()))[ FD ]
Line_2 $$ static PermissionCollection parsePermissions(Terminal terminal, Path file, Path tmpDir) throws IOException -->Line_3 $$ Path emptyPolicyFile = Files.createTempFile(tmpDir, "empty", "tmp")[ FD ]
Line_13 $$ policy = Policy.getInstance("JavaPolicy", new URIParameter(file.toUri()))-->Line_17 $$ PermissionCollection permissions = policy.getPermissions(PluginSecurity.class.getProtectionDomain())[ FD ]
Line_4 $$ final Policy emptyPolicy-->Line_23 $$ if (!emptyPolicy.implies(PluginSecurity.class.getProtectionDomain(), permission)) [ FD ]
Line_2 $$ static PermissionCollection parsePermissions(Terminal terminal, Path file, Path tmpDir) throws IOException -->Line_11 $$ final Policy policy[ CD ]
Line_2 $$ static PermissionCollection parsePermissions(Terminal terminal, Path file, Path tmpDir) throws IOException -->Line_10 $$ PluginManager.tryToDeletePath(terminal, emptyPolicyFile)[ FD ]
Line_17 $$ PermissionCollection permissions = policy.getPermissions(PluginSecurity.class.getProtectionDomain())-->Line_22 $$ for (Permission permission : Collections.list(permissions.elements())) [ FD ]
Line_2 $$ static PermissionCollection parsePermissions(Terminal terminal, Path file, Path tmpDir) throws IOException -->Line_13 $$ policy = Policy.getInstance("JavaPolicy", new URIParameter(file.toUri()))[ FD ]
Line_22 $$ for (Permission permission : Collections.list(permissions.elements())) -->Line_23 $$ if (!emptyPolicy.implies(PluginSecurity.class.getProtectionDomain(), permission)) [ FD ]
Line_2 $$ static PermissionCollection parsePermissions(Terminal terminal, Path file, Path tmpDir) throws IOException -->Line_4 $$ final Policy emptyPolicy[ CD ]
Line_21 $$ PermissionCollection actualPermissions = new Permissions()-->Line_27 $$ actualPermissions.setReadOnly()[ FD ]
Line_3 $$ Path emptyPolicyFile = Files.createTempFile(tmpDir, "empty", "tmp")-->Line_10 $$ PluginManager.tryToDeletePath(terminal, emptyPolicyFile)[ FD ]
Line_2 $$ static PermissionCollection parsePermissions(Terminal terminal, Path file, Path tmpDir) throws IOException -->Line_21 $$ PermissionCollection actualPermissions = new Permissions()[ CD ]
Line_22 $$ for (Permission permission : Collections.list(permissions.elements())) -->Line_24 $$ actualPermissions.add(permission)[ FD ]
