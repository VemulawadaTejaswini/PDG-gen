Line_10 $$ if (buffer.remaining() > 0) -->Line_15 $$ payload = readPayload(buffer, headerAccessor)[ CD ]
Line_8 $$ StompHeaderAccessor headerAccessor = null-->Line_19 $$ throw new StompConversionException(headerAccessor.getCommand() + " shouldn't have a payload: length=" + payload.length + ", headers=" + headers)[ FD ]
Line_12 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)-->Line_18 $$ if (payload.length > 0 && !headerAccessor.getCommand().isBodyAllowed()) [ FD ]
Line_12 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)-->Line_44 $$ decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())[ FD ]
Line_2 $$ private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) -->Line_49 $$ return decodedMessage[ CD ]
Line_8 $$ StompHeaderAccessor headerAccessor = null-->Line_21 $$ headerAccessor.updateSimpMessageHeadersFromStompHeaders()[ FD ]
Line_2 $$ private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) -->Line_7 $$ if (command.length() > 0) [ CD ]
Line_2 $$ private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) -->Line_6 $$ String command = readCommand(buffer)[ FD ]
Line_17 $$ if (payload != null) -->Line_21 $$ headerAccessor.updateSimpMessageHeadersFromStompHeaders()[ CD ]
Line_7 $$ if (command.length() > 0) -->Line_8 $$ StompHeaderAccessor headerAccessor = null[ CD ]
Line_6 $$ String command = readCommand(buffer)-->Line_11 $$ StompCommand stompCommand = StompCommand.valueOf(command)[ FD ]
Line_32 $$ String name = NativeMessageHeaderAccessor.NATIVE_HEADERS-->Line_33 $$ MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)[ FD ]
Line_3 $$ Message<byte[]> decodedMessage = null-->Line_44 $$ decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())[ FD ]
Line_8 $$ StompHeaderAccessor headerAccessor = null-->Line_44 $$ decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())[ FD ]
Line_8 $$ StompHeaderAccessor headerAccessor = null-->Line_13 $$ initHeaders(headerAccessor)[ FD ]
Line_8 $$ StompHeaderAccessor headerAccessor = null-->Line_42 $$ initHeaders(headerAccessor)[ FD ]
Line_7 $$ if (command.length() > 0) -->Line_17 $$ if (payload != null) [ CD ]
Line_8 $$ StompHeaderAccessor headerAccessor = null-->Line_15 $$ payload = readPayload(buffer, headerAccessor)[ FD ]
Line_15 $$ payload = readPayload(buffer, headerAccessor)-->Line_23 $$ decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())[ FD ]
Line_17 $$ if (payload != null) -->Line_31 $$ if (headers != null && headerAccessor != null) [ CD ]
Line_33 $$ MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)-->Line_34 $$ if (map != null) [ FD ]
Line_9 $$ byte[] payload = null-->Line_17 $$ if (payload != null) [ FD ]
Line_7 $$ if (command.length() > 0) -->Line_9 $$ byte[] payload = null[ CD ]
Line_2 $$ private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) -->Line_6 $$ String command = readCommand(buffer)[ CD ]
Line_8 $$ StompHeaderAccessor headerAccessor = null-->Line_46 $$ logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))[ FD ]
Line_8 $$ StompHeaderAccessor headerAccessor = null-->Line_18 $$ if (payload.length > 0 && !headerAccessor.getCommand().isBodyAllowed()) [ FD ]
Line_2 $$ private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) -->Line_4 $$ skipLeadingEol(buffer)[ CD ]
Line_8 $$ StompHeaderAccessor headerAccessor = null-->Line_33 $$ MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)[ FD ]
Line_12 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)-->Line_46 $$ logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))[ FD ]
Line_10 $$ if (buffer.remaining() > 0) -->Line_14 $$ readHeaders(buffer, headerAccessor)[ CD ]
Line_10 $$ if (buffer.remaining() > 0) -->Line_12 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)[ CD ]
Line_17 $$ if (payload != null) -->Line_22 $$ headerAccessor.setLeaveMutable(true)[ CD ]
Line_2 $$ private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) -->Line_38 $$ buffer.reset()[ FD ]
Line_31 $$ if (headers != null && headerAccessor != null) -->Line_34 $$ if (map != null) [ CD ]
Line_2 $$ private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) -->Line_35 $$ headers.putAll(map)[ FD ]
Line_9 $$ byte[] payload = null-->Line_15 $$ payload = readPayload(buffer, headerAccessor)[ FD ]
Line_7 $$ if (command.length() > 0) -->Line_44 $$ decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())[ CD ]
Line_17 $$ if (payload != null) -->Line_24 $$ if (logger.isTraceEnabled()) [ CD ]
Line_2 $$ private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) -->Line_4 $$ skipLeadingEol(buffer)[ FD ]
Line_34 $$ if (map != null) -->Line_35 $$ headers.putAll(map)[ CD ]
Line_12 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)-->Line_22 $$ headerAccessor.setLeaveMutable(true)[ FD ]
Line_7 $$ if (command.length() > 0) -->Line_43 $$ headerAccessor.setLeaveMutable(true)[ CD ]
Line_12 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)-->Line_33 $$ MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)[ FD ]
Line_8 $$ StompHeaderAccessor headerAccessor = null-->Line_25 $$ logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))[ FD ]
Line_11 $$ StompCommand stompCommand = StompCommand.valueOf(command)-->Line_12 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)[ FD ]
Line_12 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)-->Line_25 $$ logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))[ FD ]
Line_33 $$ MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)-->Line_35 $$ headers.putAll(map)[ FD ]
Line_23 $$ decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())-->Line_44 $$ decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())[ FD ]
Line_12 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)-->Line_19 $$ throw new StompConversionException(headerAccessor.getCommand() + " shouldn't have a payload: length=" + payload.length + ", headers=" + headers)[ FD ]
Line_9 $$ byte[] payload = null-->Line_25 $$ logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))[ FD ]
Line_7 $$ if (command.length() > 0) -->Line_45 $$ if (logger.isTraceEnabled()) [ CD ]
Line_8 $$ StompHeaderAccessor headerAccessor = null-->Line_14 $$ readHeaders(buffer, headerAccessor)[ FD ]
Line_12 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)-->Line_21 $$ headerAccessor.updateSimpMessageHeadersFromStompHeaders()[ FD ]
Line_12 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)-->Line_43 $$ headerAccessor.setLeaveMutable(true)[ FD ]
Line_2 $$ private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) -->Line_5 $$ buffer.mark()[ FD ]
Line_45 $$ if (logger.isTraceEnabled()) -->Line_46 $$ logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))[ CD ]
Line_12 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)-->Line_13 $$ initHeaders(headerAccessor)[ FD ]
Line_12 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)-->Line_15 $$ payload = readPayload(buffer, headerAccessor)[ FD ]
Line_17 $$ if (payload != null) -->Line_28 $$ if (logger.isTraceEnabled()) [ CD ]
Line_31 $$ if (headers != null && headerAccessor != null) -->Line_33 $$ MultiValueMap<String, String> map = (MultiValueMap<String, String>) headerAccessor.getHeader(name)[ CD ]
Line_7 $$ if (command.length() > 0) -->Line_41 $$ StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()[ CD ]
Line_28 $$ if (logger.isTraceEnabled()) -->Line_29 $$ logger.trace("Incomplete frame, resetting input buffer...")[ CD ]
Line_3 $$ Message<byte[]> decodedMessage = null-->Line_23 $$ decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())[ FD ]
Line_8 $$ StompHeaderAccessor headerAccessor = null-->Line_23 $$ decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())[ FD ]
Line_24 $$ if (logger.isTraceEnabled()) -->Line_25 $$ logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))[ CD ]
Line_2 $$ private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) -->Line_5 $$ buffer.mark()[ CD ]
Line_6 $$ String command = readCommand(buffer)-->Line_7 $$ if (command.length() > 0) [ FD ]
Line_15 $$ payload = readPayload(buffer, headerAccessor)-->Line_17 $$ if (payload != null) [ FD ]
Line_8 $$ StompHeaderAccessor headerAccessor = null-->Line_12 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)[ FD ]
Line_7 $$ if (command.length() > 0) -->Line_42 $$ initHeaders(headerAccessor)[ CD ]
Line_2 $$ private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) -->Line_10 $$ if (buffer.remaining() > 0) [ FD ]
Line_12 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)-->Line_14 $$ readHeaders(buffer, headerAccessor)[ FD ]
Line_31 $$ if (headers != null && headerAccessor != null) -->Line_32 $$ String name = NativeMessageHeaderAccessor.NATIVE_HEADERS[ CD ]
Line_8 $$ StompHeaderAccessor headerAccessor = null-->Line_43 $$ headerAccessor.setLeaveMutable(true)[ FD ]
Line_8 $$ StompHeaderAccessor headerAccessor = null-->Line_22 $$ headerAccessor.setLeaveMutable(true)[ FD ]
Line_12 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)-->Line_42 $$ initHeaders(headerAccessor)[ FD ]
Line_9 $$ byte[] payload = null-->Line_23 $$ decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())[ FD ]
Line_10 $$ if (buffer.remaining() > 0) -->Line_11 $$ StompCommand stompCommand = StompCommand.valueOf(command)[ CD ]
Line_10 $$ if (buffer.remaining() > 0) -->Line_13 $$ initHeaders(headerAccessor)[ CD ]
Line_17 $$ if (payload != null) -->Line_18 $$ if (payload.length > 0 && !headerAccessor.getCommand().isBodyAllowed()) [ CD ]
Line_12 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)-->Line_23 $$ decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())[ FD ]
Line_15 $$ payload = readPayload(buffer, headerAccessor)-->Line_25 $$ logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))[ FD ]
Line_2 $$ private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) -->Line_15 $$ payload = readPayload(buffer, headerAccessor)[ FD ]
Line_2 $$ private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) -->Line_14 $$ readHeaders(buffer, headerAccessor)[ FD ]
Line_2 $$ private Message<byte[]> decodeMessage(ByteBuffer buffer, MultiValueMap<String, String> headers) -->Line_3 $$ Message<byte[]> decodedMessage = null[ CD ]
Line_17 $$ if (payload != null) -->Line_23 $$ decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())[ CD ]
Line_7 $$ if (command.length() > 0) -->Line_10 $$ if (buffer.remaining() > 0) [ CD ]
Line_17 $$ if (payload != null) -->Line_38 $$ buffer.reset()[ CD ]
