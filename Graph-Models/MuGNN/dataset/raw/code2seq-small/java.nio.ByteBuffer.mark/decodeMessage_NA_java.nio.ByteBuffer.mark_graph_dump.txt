Line_6 $$ Message<byte[]> decodedMessage = null-->Line_48 $$ decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())[ FD ]
Line_11 $$ StompHeaderAccessor headerAccessor = null-->Line_15 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)[ FD ]
Line_12 $$ byte[] payload = null-->Line_18 $$ payload = readPayload(buffer, headerAccessor)[ FD ]
Line_20 $$ if (payload != null) -->Line_25 $$ headerAccessor.setLeaveMutable(true)[ CD ]
Line_20 $$ if (payload != null) -->Line_26 $$ decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())[ CD ]
Line_11 $$ StompHeaderAccessor headerAccessor = null-->Line_21 $$ if (payload.length > 0 && !headerAccessor.getCommand().isBodyAllowed()) [ FD ]
Line_15 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)-->Line_16 $$ initHeaders(headerAccessor)[ FD ]
Line_20 $$ if (payload != null) -->Line_34 $$ if (headers != null && headerAccessor != null) [ CD ]
Line_34 $$ if (headers != null && headerAccessor != null) -->Line_35 $$ String name = NativeMessageHeaderAccessor.NATIVE_HEADERS[ CD ]
Line_15 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)-->Line_47 $$ headerAccessor.setLeaveMutable(true)[ FD ]
Line_15 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)-->Line_22 $$ throw new StompConversionException(headerAccessor.getCommand() + " shouldn't have a payload: length=" + payload.length + ", headers=" + headers)[ FD ]
Line_11 $$ StompHeaderAccessor headerAccessor = null-->Line_16 $$ initHeaders(headerAccessor)[ FD ]
Line_15 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)-->Line_24 $$ headerAccessor.updateSimpMessageHeadersFromStompHeaders()[ FD ]
Line_18 $$ payload = readPayload(buffer, headerAccessor)-->Line_26 $$ decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())[ FD ]
Line_11 $$ StompHeaderAccessor headerAccessor = null-->Line_24 $$ headerAccessor.updateSimpMessageHeadersFromStompHeaders()[ FD ]
Line_34 $$ if (headers != null && headerAccessor != null) -->Line_38 $$ if (map != null) [ CD ]
Line_13 $$ if (buffer.remaining() > 0) -->Line_16 $$ initHeaders(headerAccessor)[ CD ]
Line_10 $$ if (command.length() > 0) -->Line_45 $$ StompHeaderAccessor headerAccessor = StompHeaderAccessor.createForHeartbeat()[ CD ]
Line_11 $$ StompHeaderAccessor headerAccessor = null-->Line_46 $$ initHeaders(headerAccessor)[ FD ]
Line_15 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)-->Line_46 $$ initHeaders(headerAccessor)[ FD ]
Line_10 $$ if (command.length() > 0) -->Line_12 $$ byte[] payload = null[ CD ]
Line_14 $$ StompCommand stompCommand = StompCommand.valueOf(command)-->Line_15 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)[ FD ]
Line_15 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)-->Line_26 $$ decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())[ FD ]
Line_11 $$ StompHeaderAccessor headerAccessor = null-->Line_47 $$ headerAccessor.setLeaveMutable(true)[ FD ]
Line_26 $$ decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())-->Line_48 $$ decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())[ FD ]
Line_12 $$ byte[] payload = null-->Line_20 $$ if (payload != null) [ FD ]
Line_11 $$ StompHeaderAccessor headerAccessor = null-->Line_25 $$ headerAccessor.setLeaveMutable(true)[ FD ]
Line_27 $$ if (logger.isTraceEnabled()) -->Line_28 $$ logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))[ CD ]
Line_15 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)-->Line_28 $$ logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))[ FD ]
Line_11 $$ StompHeaderAccessor headerAccessor = null-->Line_22 $$ throw new StompConversionException(headerAccessor.getCommand() + " shouldn't have a payload: length=" + payload.length + ", headers=" + headers)[ FD ]
Line_10 $$ if (command.length() > 0) -->Line_11 $$ StompHeaderAccessor headerAccessor = null[ CD ]
Line_20 $$ if (payload != null) -->Line_24 $$ headerAccessor.updateSimpMessageHeadersFromStompHeaders()[ CD ]
Line_38 $$ if (map != null) -->Line_39 $$ headers.putAll(map)[ CD ]
Line_13 $$ if (buffer.remaining() > 0) -->Line_15 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)[ CD ]
Line_15 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)-->Line_18 $$ payload = readPayload(buffer, headerAccessor)[ FD ]
Line_10 $$ if (command.length() > 0) -->Line_48 $$ decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())[ CD ]
Line_13 $$ if (buffer.remaining() > 0) -->Line_18 $$ payload = readPayload(buffer, headerAccessor)[ CD ]
Line_15 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)-->Line_48 $$ decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())[ FD ]
Line_12 $$ byte[] payload = null-->Line_26 $$ decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())[ FD ]
Line_10 $$ if (command.length() > 0) -->Line_20 $$ if (payload != null) [ CD ]
Line_11 $$ StompHeaderAccessor headerAccessor = null-->Line_50 $$ logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))[ FD ]
Line_15 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)-->Line_50 $$ logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))[ FD ]
Line_11 $$ StompHeaderAccessor headerAccessor = null-->Line_28 $$ logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))[ FD ]
Line_12 $$ byte[] payload = null-->Line_28 $$ logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))[ FD ]
Line_20 $$ if (payload != null) -->Line_21 $$ if (payload.length > 0 && !headerAccessor.getCommand().isBodyAllowed()) [ CD ]
Line_18 $$ payload = readPayload(buffer, headerAccessor)-->Line_20 $$ if (payload != null) [ FD ]
Line_10 $$ if (command.length() > 0) -->Line_47 $$ headerAccessor.setLeaveMutable(true)[ CD ]
Line_11 $$ StompHeaderAccessor headerAccessor = null-->Line_48 $$ decodedMessage = MessageBuilder.createMessage(HEARTBEAT_PAYLOAD, headerAccessor.getMessageHeaders())[ FD ]
Line_6 $$ Message<byte[]> decodedMessage = null-->Line_26 $$ decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())[ FD ]
Line_13 $$ if (buffer.remaining() > 0) -->Line_17 $$ readHeaders(buffer, headerAccessor)[ CD ]
Line_15 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)-->Line_17 $$ readHeaders(buffer, headerAccessor)[ FD ]
Line_13 $$ if (buffer.remaining() > 0) -->Line_14 $$ StompCommand stompCommand = StompCommand.valueOf(command)[ CD ]
Line_11 $$ StompHeaderAccessor headerAccessor = null-->Line_26 $$ decodedMessage = MessageBuilder.createMessage(payload, headerAccessor.getMessageHeaders())[ FD ]
Line_20 $$ if (payload != null) -->Line_31 $$ if (logger.isTraceEnabled()) [ CD ]
Line_11 $$ StompHeaderAccessor headerAccessor = null-->Line_17 $$ readHeaders(buffer, headerAccessor)[ FD ]
Line_9 $$ String command = readCommand(buffer)-->Line_14 $$ StompCommand stompCommand = StompCommand.valueOf(command)[ FD ]
Line_20 $$ if (payload != null) -->Line_27 $$ if (logger.isTraceEnabled()) [ CD ]
Line_18 $$ payload = readPayload(buffer, headerAccessor)-->Line_28 $$ logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload))[ FD ]
Line_20 $$ if (payload != null) -->Line_42 $$ buffer.reset()[ CD ]
Line_15 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)-->Line_21 $$ if (payload.length > 0 && !headerAccessor.getCommand().isBodyAllowed()) [ FD ]
Line_10 $$ if (command.length() > 0) -->Line_49 $$ if (logger.isTraceEnabled()) [ CD ]
Line_49 $$ if (logger.isTraceEnabled()) -->Line_50 $$ logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null))[ CD ]
Line_9 $$ String command = readCommand(buffer)-->Line_10 $$ if (command.length() > 0) [ FD ]
Line_10 $$ if (command.length() > 0) -->Line_13 $$ if (buffer.remaining() > 0) [ CD ]
Line_15 $$ headerAccessor = StompHeaderAccessor.create(stompCommand)-->Line_25 $$ headerAccessor.setLeaveMutable(true)[ FD ]
Line_10 $$ if (command.length() > 0) -->Line_46 $$ initHeaders(headerAccessor)[ CD ]
Line_31 $$ if (logger.isTraceEnabled()) -->Line_32 $$ logger.trace("Incomplete frame, resetting input buffer...")[ CD ]
Line_11 $$ StompHeaderAccessor headerAccessor = null-->Line_18 $$ payload = readPayload(buffer, headerAccessor)[ FD ]
