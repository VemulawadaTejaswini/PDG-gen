Line_40 $$ if (calculated != stored) -->Line_41 $$ long errPos = basePos + data.position() - startDataPos - n[ CD ]
Line_30 $$ byte[] buf = new byte[bytesPerChecksum]-->Line_37 $$ summer.update(buf, 0, n)[ FD ]
Line_18 $$ if (data.hasArray() && checksums.hasArray()) -->Line_20 $$ return[ CD ]
Line_18 $$ if (data.hasArray() && checksums.hasArray()) -->Line_19 $$ verifyChunkedSums(data.array(), data.arrayOffset() + data.position(), data.remaining(), checksums.array(), checksums.arrayOffset() + checksums.position(), fileName, basePos)[ CD ]
Line_39 $$ int stored = (sum[0] << 24 & 0xff000000) | (sum[1] << 16 & 0xff0000) | (sum[2] << 8 & 0xff00) | sum[3] & 0xff-->Line_40 $$ if (calculated != stored) [ FD ]
Line_33 $$ int n = Math.min(data.remaining(), bytesPerChecksum)-->Line_35 $$ data.get(buf, 0, n)[ FD ]
Line_32 $$ while (data.remaining() > 0) -->Line_33 $$ int n = Math.min(data.remaining(), bytesPerChecksum)[ CD ]
Line_32 $$ while (data.remaining() > 0) -->Line_35 $$ data.get(buf, 0, n)[ CD ]
Line_32 $$ while (data.remaining() > 0) -->Line_34 $$ checksums.get(sum)[ CD ]
Line_22 $$ if (NativeCrc32.isAvailable()) -->Line_23 $$ NativeCrc32.verifyChunkedSums(bytesPerChecksum, type.id, checksums, data, fileName, basePos)[ CD ]
Line_30 $$ byte[] buf = new byte[bytesPerChecksum]-->Line_35 $$ data.get(buf, 0, n)[ FD ]
Line_16 $$ if (type.size == 0)-->Line_17 $$ return[ CD ]
Line_32 $$ while (data.remaining() > 0) -->Line_37 $$ summer.update(buf, 0, n)[ CD ]
Line_22 $$ if (NativeCrc32.isAvailable()) -->Line_24 $$ return[ CD ]
Line_32 $$ while (data.remaining() > 0) -->Line_40 $$ if (calculated != stored) [ CD ]
Line_38 $$ int calculated = (int) summer.getValue()-->Line_40 $$ if (calculated != stored) [ FD ]
Line_32 $$ while (data.remaining() > 0) -->Line_39 $$ int stored = (sum[0] << 24 & 0xff000000) | (sum[1] << 16 & 0xff0000) | (sum[2] << 8 & 0xff00) | sum[3] & 0xff[ CD ]
Line_33 $$ int n = Math.min(data.remaining(), bytesPerChecksum)-->Line_37 $$ summer.update(buf, 0, n)[ FD ]
Line_31 $$ byte[] sum = new byte[type.size]-->Line_34 $$ checksums.get(sum)[ FD ]
Line_32 $$ while (data.remaining() > 0) -->Line_38 $$ int calculated = (int) summer.getValue()[ CD ]
Line_32 $$ while (data.remaining() > 0) -->Line_36 $$ summer.reset()[ CD ]
