Line_20 $$ for (int i = 0; i < count; i++) -->Line_25 $$ final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i))[ FD ]
Line_31 $$ version = Version.JPA_1_0-->Line_37 $$ version = Version.JPA_2_1[ FD ]
Line_39 $$ version = Version.JPA_2_0-->Line_41 $$ version = Version.JPA_2_1[ FD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_3 $$ reader.require(START_DOCUMENT, null, null)[ FD ]
Line_4 $$ Version version = null-->Line_35 $$ version = Version.JPA_2_0[ FD ]
Line_4 $$ Version version = null-->Line_37 $$ version = Version.JPA_2_1[ FD ]
Line_39 $$ version = Version.JPA_2_0-->Line_63 $$ PersistenceUnitMetadata pu = parsePU(reader, version, propertyReplacer)[ FD ]
Line_21 $$ final String attributeNamespace = reader.getAttributeNamespace(i)-->Line_47 $$ if (attributeNamespace != null && !attributeNamespace.isEmpty()) [ FD ]
Line_32 $$ if ("1".equals(versionString)) -->Line_33 $$ version = Version.JPA_1_0[ CD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_27 $$ versionString = reader.getAttributeValue(i)[ FD ]
Line_63 $$ PersistenceUnitMetadata pu = parsePU(reader, version, propertyReplacer)-->Line_64 $$ PUs.add(pu)[ FD ]
Line_14 $$ if (schemaLocation != null) -->Line_15 $$ version = Version.forLocation(schemaLocation)[ CD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_13 $$ final String schemaLocation = readSchemaLocation(reader)[ CD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_46 $$ final String attributeNamespace = reader.getAttributeNamespace(i)[ FD ]
Line_15 $$ version = Version.forLocation(schemaLocation)-->Line_63 $$ PersistenceUnitMetadata pu = parsePU(reader, version, propertyReplacer)[ FD ]
Line_27 $$ versionString = reader.getAttributeValue(i)-->Line_34 $$ if ("2.0".equals(versionString)) [ FD ]
Line_4 $$ Version version = null-->Line_33 $$ version = Version.JPA_1_0[ FD ]
Line_13 $$ final String schemaLocation = readSchemaLocation(reader)-->Line_15 $$ version = Version.forLocation(schemaLocation)[ FD ]
Line_33 $$ version = Version.JPA_1_0-->Line_37 $$ version = Version.JPA_2_1[ FD ]
Line_27 $$ versionString = reader.getAttributeValue(i)-->Line_30 $$ if ("1.0".equals(versionString)) [ FD ]
Line_35 $$ version = Version.JPA_2_0-->Line_39 $$ version = Version.JPA_2_0[ FD ]
Line_45 $$ for (int i = 0; i < count; i++) -->Line_50 $$ final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i))[ CD ]
Line_31 $$ version = Version.JPA_1_0-->Line_35 $$ version = Version.JPA_2_0[ FD ]
Line_18 $$ String versionString = null-->Line_36 $$ if ("2.1".equals(versionString)) [ FD ]
Line_9 $$ version = Version.forLocation(dtdLocation)-->Line_15 $$ version = Version.forLocation(schemaLocation)[ FD ]
Line_9 $$ version = Version.forLocation(dtdLocation)-->Line_33 $$ version = Version.JPA_1_0[ FD ]
Line_27 $$ versionString = reader.getAttributeValue(i)-->Line_38 $$ if ("2".equals(versionString)) [ FD ]
Line_20 $$ for (int i = 0; i < count; i++) -->Line_26 $$ if (attribute == Attribute.VERSION) [ CD ]
Line_45 $$ for (int i = 0; i < count; i++) -->Line_50 $$ final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i))[ FD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_6 $$ if (reader.getEventType() == DTD) [ FD ]
Line_46 $$ final String attributeNamespace = reader.getAttributeNamespace(i)-->Line_47 $$ if (attributeNamespace != null && !attributeNamespace.isEmpty()) [ FD ]
Line_20 $$ for (int i = 0; i < count; i++) -->Line_21 $$ final String attributeNamespace = reader.getAttributeNamespace(i)[ FD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_59 $$ while (reader.hasNext() && reader.nextTag() != END_ELEMENT) [ CD ]
Line_18 $$ String versionString = null-->Line_30 $$ if ("1.0".equals(versionString)) [ FD ]
Line_45 $$ for (int i = 0; i < count; i++) -->Line_46 $$ final String attributeNamespace = reader.getAttributeNamespace(i)[ FD ]
Line_25 $$ final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i))-->Line_26 $$ if (attribute == Attribute.VERSION) [ FD ]
Line_58 $$ final List<PersistenceUnitMetadata> PUs = new ArrayList<PersistenceUnitMetadata>()-->Line_64 $$ PUs.add(pu)[ FD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_19 $$ final int count = reader.getAttributeCount()[ FD ]
Line_32 $$ if ("1".equals(versionString)) -->Line_34 $$ if ("2.0".equals(versionString)) [ CD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_17 $$ if (version == null || Version.UNKNOWN.equals(version)) [ CD ]
Line_9 $$ version = Version.forLocation(dtdLocation)-->Line_31 $$ version = Version.JPA_1_0[ FD ]
Line_27 $$ versionString = reader.getAttributeValue(i)-->Line_32 $$ if ("1".equals(versionString)) [ FD ]
Line_20 $$ for (int i = 0; i < count; i++) -->Line_25 $$ final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i))[ CD ]
Line_33 $$ version = Version.JPA_1_0-->Line_41 $$ version = Version.JPA_2_1[ FD ]
Line_20 $$ for (int i = 0; i < count; i++) -->Line_45 $$ for (int i = 0; i < count; i++) [ FD ]
Line_15 $$ version = Version.forLocation(schemaLocation)-->Line_39 $$ version = Version.JPA_2_0[ FD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_44 $$ final int count = reader.getAttributeCount()[ FD ]
Line_59 $$ while (reader.hasNext() && reader.nextTag() != END_ELEMENT) -->Line_60 $$ final Element element = Element.forName(reader.getLocalName())[ CD ]
Line_18 $$ String versionString = null-->Line_34 $$ if ("2.0".equals(versionString)) [ FD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_4 $$ Version version = null[ CD ]
Line_18 $$ String versionString = null-->Line_27 $$ versionString = reader.getAttributeValue(i)[ FD ]
Line_45 $$ for (int i = 0; i < count; i++) -->Line_55 $$ throw unexpectedAttribute(reader, i)[ FD ]
Line_20 $$ for (int i = 0; i < count; i++) -->Line_55 $$ throw unexpectedAttribute(reader, i)[ FD ]
Line_5 $$ while (reader.hasNext() && reader.next() != START_ELEMENT) -->Line_6 $$ if (reader.getEventType() == DTD) [ CD ]
Line_15 $$ version = Version.forLocation(schemaLocation)-->Line_17 $$ if (version == null || Version.UNKNOWN.equals(version)) [ FD ]
Line_34 $$ if ("2.0".equals(versionString)) -->Line_36 $$ if ("2.1".equals(versionString)) [ CD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_50 $$ final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i))[ FD ]
Line_37 $$ version = Version.JPA_2_1-->Line_39 $$ version = Version.JPA_2_0[ FD ]
Line_4 $$ Version version = null-->Line_31 $$ version = Version.JPA_1_0[ FD ]
Line_9 $$ version = Version.forLocation(dtdLocation)-->Line_63 $$ PersistenceUnitMetadata pu = parsePU(reader, version, propertyReplacer)[ FD ]
Line_38 $$ if ("2".equals(versionString)) -->Line_41 $$ version = Version.JPA_2_1[ CD ]
Line_30 $$ if ("1.0".equals(versionString)) -->Line_32 $$ if ("1".equals(versionString)) [ CD ]
Line_7 $$ final String dtdLocation = readDTDLocation(reader)-->Line_8 $$ if (dtdLocation != null) [ FD ]
Line_4 $$ Version version = null-->Line_63 $$ PersistenceUnitMetadata pu = parsePU(reader, version, propertyReplacer)[ FD ]
Line_35 $$ version = Version.JPA_2_0-->Line_63 $$ PersistenceUnitMetadata pu = parsePU(reader, version, propertyReplacer)[ FD ]
Line_41 $$ version = Version.JPA_2_1-->Line_63 $$ PersistenceUnitMetadata pu = parsePU(reader, version, propertyReplacer)[ FD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_58 $$ final List<PersistenceUnitMetadata> PUs = new ArrayList<PersistenceUnitMetadata>()[ CD ]
Line_9 $$ version = Version.forLocation(dtdLocation)-->Line_35 $$ version = Version.JPA_2_0[ FD ]
Line_4 $$ Version version = null-->Line_17 $$ if (version == null || Version.UNKNOWN.equals(version)) [ FD ]
Line_17 $$ if (version == null || Version.UNKNOWN.equals(version)) -->Line_18 $$ String versionString = null[ CD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_13 $$ final String schemaLocation = readSchemaLocation(reader)[ FD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_71 $$ PersistenceUnitMetadataHolder result = new PersistenceUnitMetadataHolder(PUs)[ CD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_7 $$ final String dtdLocation = readDTDLocation(reader)[ FD ]
Line_20 $$ for (int i = 0; i < count; i++) -->Line_22 $$ if (attributeNamespace != null && !attributeNamespace.isEmpty()) [ CD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_14 $$ if (schemaLocation != null) [ CD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_59 $$ while (reader.hasNext() && reader.nextTag() != END_ELEMENT) [ FD ]
Line_45 $$ for (int i = 0; i < count; i++) -->Line_47 $$ if (attributeNamespace != null && !attributeNamespace.isEmpty()) [ CD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_45 $$ for (int i = 0; i < count; i++) [ CD ]
Line_36 $$ if ("2.1".equals(versionString)) -->Line_37 $$ version = Version.JPA_2_1[ CD ]
Line_9 $$ version = Version.forLocation(dtdLocation)-->Line_37 $$ version = Version.JPA_2_1[ FD ]
Line_38 $$ if ("2".equals(versionString)) -->Line_39 $$ version = Version.JPA_2_0[ CD ]
Line_13 $$ final String schemaLocation = readSchemaLocation(reader)-->Line_14 $$ if (schemaLocation != null) [ FD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_44 $$ final int count = reader.getAttributeCount()[ CD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_68 $$ throw unexpectedElement(reader)[ FD ]
Line_7 $$ final String dtdLocation = readDTDLocation(reader)-->Line_9 $$ version = Version.forLocation(dtdLocation)[ FD ]
Line_9 $$ version = Version.forLocation(dtdLocation)-->Line_41 $$ version = Version.JPA_2_1[ FD ]
Line_20 $$ for (int i = 0; i < count; i++) -->Line_21 $$ final String attributeNamespace = reader.getAttributeNamespace(i)[ CD ]
Line_4 $$ Version version = null-->Line_9 $$ version = Version.forLocation(dtdLocation)[ FD ]
Line_20 $$ for (int i = 0; i < count; i++) -->Line_46 $$ final String attributeNamespace = reader.getAttributeNamespace(i)[ FD ]
Line_35 $$ version = Version.JPA_2_0-->Line_37 $$ version = Version.JPA_2_1[ FD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_60 $$ final Element element = Element.forName(reader.getLocalName())[ FD ]
Line_34 $$ if ("2.0".equals(versionString)) -->Line_35 $$ version = Version.JPA_2_0[ CD ]
Line_26 $$ if (attribute == Attribute.VERSION) -->Line_27 $$ versionString = reader.getAttributeValue(i)[ CD ]
Line_72 $$ if (ROOT_LOGGER.isTraceEnabled())-->Line_73 $$ ROOT_LOGGER.trace(result.toString())[ CD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_3 $$ reader.require(START_DOCUMENT, null, null)[ CD ]
Line_9 $$ version = Version.forLocation(dtdLocation)-->Line_39 $$ version = Version.JPA_2_0[ FD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_55 $$ throw unexpectedAttribute(reader, i)[ FD ]
Line_31 $$ version = Version.JPA_1_0-->Line_33 $$ version = Version.JPA_1_0[ FD ]
Line_17 $$ if (version == null || Version.UNKNOWN.equals(version)) -->Line_30 $$ if ("1.0".equals(versionString)) [ CD ]
Line_9 $$ version = Version.forLocation(dtdLocation)-->Line_17 $$ if (version == null || Version.UNKNOWN.equals(version)) [ FD ]
Line_30 $$ if ("1.0".equals(versionString)) -->Line_31 $$ version = Version.JPA_1_0[ CD ]
Line_33 $$ version = Version.JPA_1_0-->Line_35 $$ version = Version.JPA_2_0[ FD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_63 $$ PersistenceUnitMetadata pu = parsePU(reader, version, propertyReplacer)[ FD ]
Line_31 $$ version = Version.JPA_1_0-->Line_39 $$ version = Version.JPA_2_0[ FD ]
Line_8 $$ if (dtdLocation != null) -->Line_9 $$ version = Version.forLocation(dtdLocation)[ CD ]
Line_36 $$ if ("2.1".equals(versionString)) -->Line_38 $$ if ("2".equals(versionString)) [ CD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_21 $$ final String attributeNamespace = reader.getAttributeNamespace(i)[ FD ]
Line_4 $$ Version version = null-->Line_15 $$ version = Version.forLocation(schemaLocation)[ FD ]
Line_17 $$ if (version == null || Version.UNKNOWN.equals(version)) -->Line_19 $$ final int count = reader.getAttributeCount()[ CD ]
Line_45 $$ for (int i = 0; i < count; i++) -->Line_46 $$ final String attributeNamespace = reader.getAttributeNamespace(i)[ CD ]
Line_6 $$ if (reader.getEventType() == DTD) -->Line_8 $$ if (dtdLocation != null) [ CD ]
Line_31 $$ version = Version.JPA_1_0-->Line_41 $$ version = Version.JPA_2_1[ FD ]
Line_63 $$ PersistenceUnitMetadata pu = parsePU(reader, version, propertyReplacer)-->Line_65 $$ ROOT_LOGGER.readingPersistenceXml(pu.getPersistenceUnitName())[ FD ]
Line_18 $$ String versionString = null-->Line_38 $$ if ("2".equals(versionString)) [ FD ]
Line_37 $$ version = Version.JPA_2_1-->Line_63 $$ PersistenceUnitMetadata pu = parsePU(reader, version, propertyReplacer)[ FD ]
Line_37 $$ version = Version.JPA_2_1-->Line_41 $$ version = Version.JPA_2_1[ FD ]
Line_35 $$ version = Version.JPA_2_0-->Line_41 $$ version = Version.JPA_2_1[ FD ]
Line_31 $$ version = Version.JPA_1_0-->Line_63 $$ PersistenceUnitMetadata pu = parsePU(reader, version, propertyReplacer)[ FD ]
Line_20 $$ for (int i = 0; i < count; i++) -->Line_27 $$ versionString = reader.getAttributeValue(i)[ FD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_72 $$ if (ROOT_LOGGER.isTraceEnabled())[ CD ]
Line_33 $$ version = Version.JPA_1_0-->Line_39 $$ version = Version.JPA_2_0[ FD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_5 $$ while (reader.hasNext() && reader.next() != START_ELEMENT) [ CD ]
Line_18 $$ String versionString = null-->Line_32 $$ if ("1".equals(versionString)) [ FD ]
Line_15 $$ version = Version.forLocation(schemaLocation)-->Line_37 $$ version = Version.JPA_2_1[ FD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_74 $$ return result[ CD ]
Line_4 $$ Version version = null-->Line_41 $$ version = Version.JPA_2_1[ FD ]
Line_15 $$ version = Version.forLocation(schemaLocation)-->Line_33 $$ version = Version.JPA_1_0[ FD ]
Line_27 $$ versionString = reader.getAttributeValue(i)-->Line_36 $$ if ("2.1".equals(versionString)) [ FD ]
Line_4 $$ Version version = null-->Line_39 $$ version = Version.JPA_2_0[ FD ]
Line_19 $$ final int count = reader.getAttributeCount()-->Line_20 $$ for (int i = 0; i < count; i++) [ FD ]
Line_71 $$ PersistenceUnitMetadataHolder result = new PersistenceUnitMetadataHolder(PUs)-->Line_73 $$ ROOT_LOGGER.trace(result.toString())[ FD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_25 $$ final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i))[ FD ]
Line_17 $$ if (version == null || Version.UNKNOWN.equals(version)) -->Line_20 $$ for (int i = 0; i < count; i++) [ CD ]
Line_6 $$ if (reader.getEventType() == DTD) -->Line_7 $$ final String dtdLocation = readDTDLocation(reader)[ CD ]
Line_15 $$ version = Version.forLocation(schemaLocation)-->Line_31 $$ version = Version.JPA_1_0[ FD ]
Line_2 $$ public static PersistenceUnitMetadataHolder parse(final XMLStreamReader reader, final PropertyReplacer propertyReplacer) throws XMLStreamException -->Line_5 $$ while (reader.hasNext() && reader.next() != START_ELEMENT) [ FD ]
Line_33 $$ version = Version.JPA_1_0-->Line_63 $$ PersistenceUnitMetadata pu = parsePU(reader, version, propertyReplacer)[ FD ]
Line_21 $$ final String attributeNamespace = reader.getAttributeNamespace(i)-->Line_22 $$ if (attributeNamespace != null && !attributeNamespace.isEmpty()) [ FD ]
Line_15 $$ version = Version.forLocation(schemaLocation)-->Line_41 $$ version = Version.JPA_2_1[ FD ]
Line_15 $$ version = Version.forLocation(schemaLocation)-->Line_35 $$ version = Version.JPA_2_0[ FD ]
Line_19 $$ final int count = reader.getAttributeCount()-->Line_45 $$ for (int i = 0; i < count; i++) [ FD ]
Line_20 $$ for (int i = 0; i < count; i++) -->Line_50 $$ final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i))[ FD ]
