Line_2 $$ private static List<PermissionFactory> parsePermissions(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_28 $$ while (reader.hasNext()) [ CD ]
Line_2 $$ private static List<PermissionFactory> parsePermissions(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_40 $$ PermissionFactory factory = parsePermission(reader, loader, identifier)[ FD ]
Line_2 $$ private static List<PermissionFactory> parsePermissions(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_46 $$ throw MetaDataElementParser.unexpectedElement(reader)[ FD ]
Line_2 $$ private static List<PermissionFactory> parsePermissions(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_4 $$ EnumSet<Attribute> requiredAttributes = EnumSet.of(Attribute.VERSION)[ CD ]
Line_2 $$ private static List<PermissionFactory> parsePermissions(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_36 $$ Element element = Element.forName(reader.getLocalName())[ FD ]
Line_4 $$ EnumSet<Attribute> requiredAttributes = EnumSet.of(Attribute.VERSION)-->Line_27 $$ throw MetaDataElementParser.missingRequired(reader, requiredAttributes)[ FD ]
Line_5 $$ for (int i = 0; i < reader.getAttributeCount(); i++) -->Line_6 $$ final String attributeNamespace = reader.getAttributeNamespace(i)[ FD ]
Line_6 $$ final String attributeNamespace = reader.getAttributeNamespace(i)-->Line_7 $$ if (attributeNamespace != null && !attributeNamespace.isEmpty()) [ FD ]
Line_2 $$ private static List<PermissionFactory> parsePermissions(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_10 $$ Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i))[ FD ]
Line_2 $$ private static List<PermissionFactory> parsePermissions(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_5 $$ for (int i = 0; i < reader.getAttributeCount(); i++) [ FD ]
Line_3 $$ List<PermissionFactory> factories = new ArrayList<PermissionFactory>()-->Line_41 $$ factories.add(factory)[ FD ]
Line_2 $$ private static List<PermissionFactory> parsePermissions(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_29 $$ switch(reader.nextTag()) [ FD ]
Line_2 $$ private static List<PermissionFactory> parsePermissions(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_5 $$ for (int i = 0; i < reader.getAttributeCount(); i++) [ CD ]
Line_5 $$ for (int i = 0; i < reader.getAttributeCount(); i++) -->Line_10 $$ Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i))[ CD ]
Line_14 $$ String version = reader.getAttributeValue(i)-->Line_15 $$ if (!"7".equals(version))[ FD ]
Line_4 $$ EnumSet<Attribute> requiredAttributes = EnumSet.of(Attribute.VERSION)-->Line_24 $$ requiredAttributes.remove(attribute)[ FD ]
Line_5 $$ for (int i = 0; i < reader.getAttributeCount(); i++) -->Line_6 $$ final String attributeNamespace = reader.getAttributeNamespace(i)[ CD ]
Line_5 $$ for (int i = 0; i < reader.getAttributeCount(); i++) -->Line_10 $$ Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i))[ FD ]
Line_2 $$ private static List<PermissionFactory> parsePermissions(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_28 $$ while (reader.hasNext()) [ FD ]
Line_4 $$ EnumSet<Attribute> requiredAttributes = EnumSet.of(Attribute.VERSION)-->Line_26 $$ if (!requiredAttributes.isEmpty())[ FD ]
Line_2 $$ private static List<PermissionFactory> parsePermissions(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_26 $$ if (!requiredAttributes.isEmpty())[ CD ]
Line_2 $$ private static List<PermissionFactory> parsePermissions(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_53 $$ throw unexpectedContent(reader)[ FD ]
Line_5 $$ for (int i = 0; i < reader.getAttributeCount(); i++) -->Line_24 $$ requiredAttributes.remove(attribute)[ CD ]
Line_14 $$ String version = reader.getAttributeValue(i)-->Line_16 $$ throw SecurityManagerLogger.ROOT_LOGGER.invalidPermissionsXMLVersion(version, "7")[ FD ]
Line_2 $$ private static List<PermissionFactory> parsePermissions(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_6 $$ final String attributeNamespace = reader.getAttributeNamespace(i)[ FD ]
Line_5 $$ for (int i = 0; i < reader.getAttributeCount(); i++) -->Line_21 $$ throw MetaDataElementParser.unexpectedAttribute(reader, i)[ FD ]
Line_2 $$ private static List<PermissionFactory> parsePermissions(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_21 $$ throw MetaDataElementParser.unexpectedAttribute(reader, i)[ FD ]
Line_40 $$ PermissionFactory factory = parsePermission(reader, loader, identifier)-->Line_41 $$ factories.add(factory)[ FD ]
Line_2 $$ private static List<PermissionFactory> parsePermissions(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_57 $$ throw endOfDocument(reader.getLocation())[ FD ]
Line_2 $$ private static List<PermissionFactory> parsePermissions(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_14 $$ String version = reader.getAttributeValue(i)[ FD ]
Line_5 $$ for (int i = 0; i < reader.getAttributeCount(); i++) -->Line_14 $$ String version = reader.getAttributeValue(i)[ FD ]
Line_2 $$ private static List<PermissionFactory> parsePermissions(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_3 $$ List<PermissionFactory> factories = new ArrayList<PermissionFactory>()[ CD ]
Line_2 $$ private static List<PermissionFactory> parsePermissions(final XMLStreamReader reader, final ModuleLoader loader, final ModuleIdentifier identifier) throws XMLStreamException -->Line_27 $$ throw MetaDataElementParser.missingRequired(reader, requiredAttributes)[ FD ]
Line_5 $$ for (int i = 0; i < reader.getAttributeCount(); i++) -->Line_7 $$ if (attributeNamespace != null && !attributeNamespace.isEmpty()) [ CD ]
Line_10 $$ Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i))-->Line_24 $$ requiredAttributes.remove(attribute)[ FD ]
