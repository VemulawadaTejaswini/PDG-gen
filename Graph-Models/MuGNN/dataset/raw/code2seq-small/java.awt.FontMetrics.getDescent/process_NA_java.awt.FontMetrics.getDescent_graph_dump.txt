Line_30 $$ new ClickListener() -->Line_32 $$ final AsyncResult<DataContext> callback = DataManager.getInstance().getDataContextFromFocus()[ CD ]
Line_12 $$ ActionButtonLook look = getButtonLook()-->Line_13 $$ look.paintBackground(g, this)[ FD ]
Line_30 $$ new ClickListener() -->Line_33 $$ final DataContext context = callback.getResult()[ CD ]
Line_10 $$ return new ActionButton(action, presentation.clone(), GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE, JBUI.emptySize()) -->Line_24 $$ g.drawLine(0, y, width, y)[ FD ]
Line_32 $$ final AsyncResult<DataContext> callback = DataManager.getInstance().getDataContextFromFocus()-->Line_33 $$ final DataContext context = callback.getResult()[ FD ]
Line_33 $$ final DataContext context = callback.getResult()-->Line_34 $$ if (context == null) [ FD ]
Line_10 $$ return new ActionButton(action, presentation.clone(), GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE, JBUI.emptySize()) -->Line_14 $$ look.paintIcon(g, this, getIcon())[ FD ]
Line_19 $$ JLabel result = new JLabel(text) -->Line_23 $$ final int width = getFontMetrics(getFont()).stringWidth(getText())[ CD ]
Line_2 $$ public JComponent process(@NotNull String s) -->Line_42 $$ return result[ CD ]
Line_2 $$ public JComponent process(@NotNull String s) -->Line_30 $$ new ClickListener() [ CD ]
Line_10 $$ return new ActionButton(action, presentation.clone(), GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE, JBUI.emptySize()) -->Line_22 $$ final int y = g.getClipBounds().height - getFontMetrics(getFont()).getDescent() + 2[ FD ]
Line_10 $$ return new ActionButton(action, presentation.clone(), GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE, JBUI.emptySize()) -->Line_13 $$ look.paintBackground(g, this)[ CD ]
Line_4 $$ final AnAction action = actionManager.getAction(s)-->Line_38 $$ action.actionPerformed(new AnActionEvent(e, context, GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE, presentation, ActionManager.getInstance(), e.getModifiers()))[ FD ]
Line_30 $$ new ClickListener() -->Line_38 $$ action.actionPerformed(new AnActionEvent(e, context, GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE, presentation, ActionManager.getInstance(), e.getModifiers()))[ FD ]
Line_2 $$ public JComponent process(@NotNull String s) -->Line_3 $$ final ActionManager actionManager = ActionManager.getInstance()[ CD ]
Line_19 $$ JLabel result = new JLabel(text) -->Line_22 $$ final int y = g.getClipBounds().height - getFontMetrics(getFont()).getDescent() + 2[ CD ]
Line_2 $$ public JComponent process(@NotNull String s) -->Line_8 $$ final Presentation presentation = action.getTemplatePresentation()[ CD ]
Line_30 $$ new ClickListener() -->Line_34 $$ if (context == null) [ CD ]
Line_30 $$ new ClickListener() -->Line_39 $$ return true[ CD ]
Line_4 $$ final AnAction action = actionManager.getAction(s)-->Line_8 $$ final Presentation presentation = action.getTemplatePresentation()[ FD ]
Line_2 $$ public JComponent process(@NotNull String s) -->Line_28 $$ result.setForeground(color)[ CD ]
Line_2 $$ public JComponent process(@NotNull String s) -->Line_29 $$ result.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR))[ CD ]
Line_2 $$ public JComponent process(@NotNull String s) -->Line_4 $$ final AnAction action = actionManager.getAction(s)[ FD ]
Line_2 $$ public JComponent process(@NotNull String s) -->Line_18 $$ final String text = action.getTemplatePresentation().getText()[ CD ]
Line_4 $$ final AnAction action = actionManager.getAction(s)-->Line_18 $$ final String text = action.getTemplatePresentation().getText()[ FD ]
Line_10 $$ return new ActionButton(action, presentation.clone(), GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE, JBUI.emptySize()) -->Line_12 $$ ActionButtonLook look = getButtonLook()[ CD ]
Line_9 $$ if (presentation.getIcon() != null) -->Line_10 $$ return new ActionButton(action, presentation.clone(), GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE, JBUI.emptySize()) [ CD ]
Line_19 $$ JLabel result = new JLabel(text) -->Line_22 $$ final int y = g.getClipBounds().height - getFontMetrics(getFont()).getDescent() + 2[ FD ]
Line_23 $$ final int width = getFontMetrics(getFont()).stringWidth(getText())-->Line_24 $$ g.drawLine(0, y, width, y)[ FD ]
Line_12 $$ ActionButtonLook look = getButtonLook()-->Line_14 $$ look.paintIcon(g, this, getIcon())[ FD ]
Line_10 $$ return new ActionButton(action, presentation.clone(), GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE, JBUI.emptySize()) -->Line_21 $$ super.paint(g)[ FD ]
Line_19 $$ JLabel result = new JLabel(text) -->Line_24 $$ g.drawLine(0, y, width, y)[ CD ]
Line_5 $$ if (action == null) -->Line_6 $$ return null[ CD ]
Line_8 $$ final Presentation presentation = action.getTemplatePresentation()-->Line_10 $$ return new ActionButton(action, presentation.clone(), GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE, JBUI.emptySize()) [ FD ]
Line_30 $$ new ClickListener() -->Line_38 $$ action.actionPerformed(new AnActionEvent(e, context, GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE, presentation, ActionManager.getInstance(), e.getModifiers()))[ CD ]
Line_10 $$ return new ActionButton(action, presentation.clone(), GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE, JBUI.emptySize()) -->Line_14 $$ look.paintIcon(g, this, getIcon())[ CD ]
Line_4 $$ final AnAction action = actionManager.getAction(s)-->Line_5 $$ if (action == null) [ FD ]
Line_30 $$ new ClickListener() -->Line_37 $$ final Presentation presentation = new PresentationFactory().getPresentation(action)[ CD ]
Line_22 $$ final int y = g.getClipBounds().height - getFontMetrics(getFont()).getDescent() + 2-->Line_24 $$ g.drawLine(0, y, width, y)[ FD ]
Line_2 $$ public JComponent process(@NotNull String s) -->Line_9 $$ if (presentation.getIcon() != null) [ CD ]
Line_8 $$ final Presentation presentation = action.getTemplatePresentation()-->Line_9 $$ if (presentation.getIcon() != null) [ FD ]
Line_34 $$ if (context == null) -->Line_35 $$ return false[ CD ]
Line_4 $$ final AnAction action = actionManager.getAction(s)-->Line_37 $$ final Presentation presentation = new PresentationFactory().getPresentation(action)[ FD ]
Line_19 $$ JLabel result = new JLabel(text) -->Line_21 $$ super.paint(g)[ FD ]
Line_19 $$ JLabel result = new JLabel(text) -->Line_21 $$ super.paint(g)[ CD ]
Line_10 $$ return new ActionButton(action, presentation.clone(), GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE, JBUI.emptySize()) -->Line_13 $$ look.paintBackground(g, this)[ FD ]
Line_2 $$ public JComponent process(@NotNull String s) -->Line_4 $$ final AnAction action = actionManager.getAction(s)[ CD ]
Line_19 $$ JLabel result = new JLabel(text) -->Line_24 $$ g.drawLine(0, y, width, y)[ FD ]
Line_3 $$ final ActionManager actionManager = ActionManager.getInstance()-->Line_4 $$ final AnAction action = actionManager.getAction(s)[ FD ]
Line_2 $$ public JComponent process(@NotNull String s) -->Line_5 $$ if (action == null) [ CD ]
