Line_2 $$ public int paint(@NotNull Graphics g, @NotNull SoftWrapDrawingType drawingType, int x, int y, int lineHeight) -->Line_3 $$ myHeightProvider.myHeight = lineHeight / 2[ FD ]
Line_2 $$ public int paint(@NotNull Graphics g, @NotNull SoftWrapDrawingType drawingType, int x, int y, int lineHeight) -->Line_6 $$ int result[ CD ]
Line_2 $$ public int paint(@NotNull Graphics g, @NotNull SoftWrapDrawingType drawingType, int x, int y, int lineHeight) -->Line_21 $$ myArrowPainter.paint(g, y + lineHeight - g.getFontMetrics().getDescent(), start, end)[ FD ]
Line_10 $$ end = myEditor.getScrollingModel().getVisibleArea().width-->Line_15 $$ end = x[ FD ]
Line_2 $$ public int paint(@NotNull Graphics g, @NotNull SoftWrapDrawingType drawingType, int x, int y, int lineHeight) -->Line_5 $$ int end[ CD ]
Line_2 $$ public int paint(@NotNull Graphics g, @NotNull SoftWrapDrawingType drawingType, int x, int y, int lineHeight) -->Line_22 $$ return result[ CD ]
Line_4 $$ int start-->Line_11 $$ result = end - start[ FD ]
Line_2 $$ public int paint(@NotNull Graphics g, @NotNull SoftWrapDrawingType drawingType, int x, int y, int lineHeight) -->Line_21 $$ myArrowPainter.paint(g, y + lineHeight - g.getFontMetrics().getDescent(), start, end)[ CD ]
Line_2 $$ public int paint(@NotNull Graphics g, @NotNull SoftWrapDrawingType drawingType, int x, int y, int lineHeight) -->Line_4 $$ int start[ CD ]
Line_5 $$ int end-->Line_10 $$ end = myEditor.getScrollingModel().getVisibleArea().width[ FD ]
Line_6 $$ int result-->Line_16 $$ result = 0[ FD ]
Line_2 $$ public int paint(@NotNull Graphics g, @NotNull SoftWrapDrawingType drawingType, int x, int y, int lineHeight) -->Line_3 $$ myHeightProvider.myHeight = lineHeight / 2[ CD ]
Line_4 $$ int start-->Line_9 $$ start = x[ FD ]
Line_6 $$ int result-->Line_11 $$ result = end - start[ FD ]
Line_15 $$ end = x-->Line_21 $$ myArrowPainter.paint(g, y + lineHeight - g.getFontMetrics().getDescent(), start, end)[ FD ]
Line_11 $$ result = end - start-->Line_16 $$ result = 0[ FD ]
Line_4 $$ int start-->Line_21 $$ myArrowPainter.paint(g, y + lineHeight - g.getFontMetrics().getDescent(), start, end)[ FD ]
Line_9 $$ start = x-->Line_21 $$ myArrowPainter.paint(g, y + lineHeight - g.getFontMetrics().getDescent(), start, end)[ FD ]
Line_5 $$ int end-->Line_11 $$ result = end - start[ FD ]
Line_5 $$ int end-->Line_21 $$ myArrowPainter.paint(g, y + lineHeight - g.getFontMetrics().getDescent(), start, end)[ FD ]
Line_9 $$ start = x-->Line_14 $$ start = 0[ FD ]
Line_10 $$ end = myEditor.getScrollingModel().getVisibleArea().width-->Line_11 $$ result = end - start[ FD ]
Line_2 $$ public int paint(@NotNull Graphics g, @NotNull SoftWrapDrawingType drawingType, int x, int y, int lineHeight) -->Line_9 $$ start = x[ FD ]
Line_10 $$ end = myEditor.getScrollingModel().getVisibleArea().width-->Line_21 $$ myArrowPainter.paint(g, y + lineHeight - g.getFontMetrics().getDescent(), start, end)[ FD ]
Line_4 $$ int start-->Line_14 $$ start = 0[ FD ]
Line_9 $$ start = x-->Line_11 $$ result = end - start[ FD ]
Line_14 $$ start = 0-->Line_21 $$ myArrowPainter.paint(g, y + lineHeight - g.getFontMetrics().getDescent(), start, end)[ FD ]
Line_5 $$ int end-->Line_15 $$ end = x[ FD ]
Line_2 $$ public int paint(@NotNull Graphics g, @NotNull SoftWrapDrawingType drawingType, int x, int y, int lineHeight) -->Line_15 $$ end = x[ FD ]
