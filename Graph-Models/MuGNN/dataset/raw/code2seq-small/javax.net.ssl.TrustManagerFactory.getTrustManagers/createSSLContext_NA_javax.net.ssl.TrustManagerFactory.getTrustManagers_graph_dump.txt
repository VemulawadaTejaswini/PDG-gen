Line_5 $$ SSLContext ctx-->Line_7 $$ ctx = SSLContext.getInstance(options.protocol)[ FD ]
Line_26 $$ if (expires.before(new Date()))-->Line_27 $$ logger.warn("Certificate for [ CD ]
Line_9 $$ if (buildTruststore) -->Line_14 $$ tmf.init(ts)[ CD ]
Line_12 $$ KeyStore ts = KeyStore.getInstance(options.store_type)-->Line_14 $$ tmf.init(ts)[ FD ]
Line_10 $$ tsf = new FileInputStream(options.truststore)-->Line_37 $$ FileUtils.closeQuietly(tsf)[ FD ]
Line_3 $$ FileInputStream tsf = null-->Line_13 $$ ts.load(tsf, options.truststore_password.toCharArray())[ FD ]
Line_9 $$ if (buildTruststore) -->Line_15 $$ trustManagers = tmf.getTrustManagers()[ CD ]
Line_11 $$ TrustManagerFactory tmf = TrustManagerFactory.getInstance(options.algorithm)-->Line_14 $$ tmf.init(ts)[ FD ]
Line_3 $$ FileInputStream tsf = null-->Line_37 $$ FileUtils.closeQuietly(tsf)[ FD ]
Line_21 $$ if (!checkedExpiry) -->Line_22 $$ for (Enumeration<String> aliases = ks.aliases(); aliases.hasMoreElements(); ) [ CD ]
Line_4 $$ FileInputStream ksf = null-->Line_17 $$ ksf = new FileInputStream(options.keystore)[ FD ]
Line_9 $$ if (buildTruststore) -->Line_13 $$ ts.load(tsf, options.truststore_password.toCharArray())[ CD ]
Line_23 $$ String alias = aliases.nextElement()-->Line_25 $$ Date expires = ((X509Certificate) ks.getCertificate(alias)).getNotAfter()[ FD ]
Line_23 $$ String alias = aliases.nextElement()-->Line_24 $$ if (ks.getCertificate(alias).getType().equals("X.509")) [ FD ]
Line_19 $$ KeyStore ks = KeyStore.getInstance(options.store_type)-->Line_24 $$ if (ks.getCertificate(alias).getType().equals("X.509")) [ FD ]
Line_5 $$ SSLContext ctx-->Line_33 $$ ctx.init(kmf.getKeyManagers(), trustManagers, null)[ FD ]
Line_25 $$ Date expires = ((X509Certificate) ks.getCertificate(alias)).getNotAfter()-->Line_26 $$ if (expires.before(new Date()))[ FD ]
Line_19 $$ KeyStore ks = KeyStore.getInstance(options.store_type)-->Line_32 $$ kmf.init(ks, options.keystore_password.toCharArray())[ FD ]
Line_3 $$ FileInputStream tsf = null-->Line_10 $$ tsf = new FileInputStream(options.truststore)[ FD ]
Line_12 $$ KeyStore ts = KeyStore.getInstance(options.store_type)-->Line_13 $$ ts.load(tsf, options.truststore_password.toCharArray())[ FD ]
Line_2 $$ public static SSLContext createSSLContext(EncryptionOptions options, boolean buildTruststore) throws IOException -->Line_40 $$ return ctx[ CD ]
Line_15 $$ trustManagers = tmf.getTrustManagers()-->Line_33 $$ ctx.init(kmf.getKeyManagers(), trustManagers, null)[ FD ]
Line_8 $$ TrustManager[] trustManagers = null-->Line_15 $$ trustManagers = tmf.getTrustManagers()[ FD ]
Line_4 $$ FileInputStream ksf = null-->Line_20 $$ ks.load(ksf, options.keystore_password.toCharArray())[ FD ]
Line_22 $$ for (Enumeration<String> aliases = ks.aliases(); aliases.hasMoreElements(); ) -->Line_24 $$ if (ks.getCertificate(alias).getType().equals("X.509")) [ CD ]
Line_10 $$ tsf = new FileInputStream(options.truststore)-->Line_13 $$ ts.load(tsf, options.truststore_password.toCharArray())[ FD ]
Line_7 $$ ctx = SSLContext.getInstance(options.protocol)-->Line_33 $$ ctx.init(kmf.getKeyManagers(), trustManagers, null)[ FD ]
Line_25 $$ Date expires = ((X509Certificate) ks.getCertificate(alias)).getNotAfter()-->Line_27 $$ logger.warn("Certificate for [ FD ]
Line_19 $$ KeyStore ks = KeyStore.getInstance(options.store_type)-->Line_20 $$ ks.load(ksf, options.keystore_password.toCharArray())[ FD ]
Line_24 $$ if (ks.getCertificate(alias).getType().equals("X.509")) -->Line_25 $$ Date expires = ((X509Certificate) ks.getCertificate(alias)).getNotAfter()[ CD ]
Line_8 $$ TrustManager[] trustManagers = null-->Line_33 $$ ctx.init(kmf.getKeyManagers(), trustManagers, null)[ FD ]
Line_22 $$ for (Enumeration<String> aliases = ks.aliases(); aliases.hasMoreElements(); ) -->Line_23 $$ String alias = aliases.nextElement()[ CD ]
Line_9 $$ if (buildTruststore) -->Line_11 $$ TrustManagerFactory tmf = TrustManagerFactory.getInstance(options.algorithm)[ CD ]
Line_11 $$ TrustManagerFactory tmf = TrustManagerFactory.getInstance(options.algorithm)-->Line_15 $$ trustManagers = tmf.getTrustManagers()[ FD ]
Line_24 $$ if (ks.getCertificate(alias).getType().equals("X.509")) -->Line_26 $$ if (expires.before(new Date()))[ CD ]
Line_17 $$ ksf = new FileInputStream(options.keystore)-->Line_20 $$ ks.load(ksf, options.keystore_password.toCharArray())[ FD ]
Line_18 $$ KeyManagerFactory kmf = KeyManagerFactory.getInstance(options.algorithm)-->Line_33 $$ ctx.init(kmf.getKeyManagers(), trustManagers, null)[ FD ]
Line_4 $$ FileInputStream ksf = null-->Line_38 $$ FileUtils.closeQuietly(ksf)[ FD ]
Line_22 $$ for (Enumeration<String> aliases = ks.aliases(); aliases.hasMoreElements(); ) -->Line_23 $$ String alias = aliases.nextElement()[ FD ]
Line_23 $$ String alias = aliases.nextElement()-->Line_27 $$ logger.warn("Certificate for [ FD ]
Line_2 $$ public static SSLContext createSSLContext(EncryptionOptions options, boolean buildTruststore) throws IOException -->Line_4 $$ FileInputStream ksf = null[ CD ]
Line_2 $$ public static SSLContext createSSLContext(EncryptionOptions options, boolean buildTruststore) throws IOException -->Line_3 $$ FileInputStream tsf = null[ CD ]
Line_19 $$ KeyStore ks = KeyStore.getInstance(options.store_type)-->Line_22 $$ for (Enumeration<String> aliases = ks.aliases(); aliases.hasMoreElements(); ) [ FD ]
Line_19 $$ KeyStore ks = KeyStore.getInstance(options.store_type)-->Line_25 $$ Date expires = ((X509Certificate) ks.getCertificate(alias)).getNotAfter()[ FD ]
Line_18 $$ KeyManagerFactory kmf = KeyManagerFactory.getInstance(options.algorithm)-->Line_32 $$ kmf.init(ks, options.keystore_password.toCharArray())[ FD ]
Line_9 $$ if (buildTruststore) -->Line_12 $$ KeyStore ts = KeyStore.getInstance(options.store_type)[ CD ]
Line_17 $$ ksf = new FileInputStream(options.keystore)-->Line_38 $$ FileUtils.closeQuietly(ksf)[ FD ]
Line_9 $$ if (buildTruststore) -->Line_10 $$ tsf = new FileInputStream(options.truststore)[ CD ]
Line_2 $$ public static SSLContext createSSLContext(EncryptionOptions options, boolean buildTruststore) throws IOException -->Line_5 $$ SSLContext ctx[ CD ]
