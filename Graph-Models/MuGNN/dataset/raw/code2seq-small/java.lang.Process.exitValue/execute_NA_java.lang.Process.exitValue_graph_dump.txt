Line_15 $$ if (process != null) -->Line_16 $$ int exitValue = process.exitValue()[ CD ]
Line_2 $$ public Object execute(String command, Object[] args) throws XmlRpcException -->Line_12 $$ long started = System.currentTimeMillis()[ CD ]
Line_2 $$ public Object execute(String command, Object[] args) throws XmlRpcException -->Line_3 $$ final Object[] result = new Object[] [ CD ]
Line_2 $$ public Object execute(String command, Object[] args) throws XmlRpcException -->Line_30 $$ if (result[0] == null) [ CD ]
Line_2 $$ public Object execute(String command, Object[] args) throws XmlRpcException -->Line_33 $$ return result[0][ CD ]
Line_4 $$ impl.executeAsync(command, new Vector(Arrays.asList(args)), new AsyncCallback() -->Line_9 $$ result[0] = recievedResult[ FD ]
Line_4 $$ impl.executeAsync(command, new Vector(Arrays.asList(args)), new AsyncCallback() -->Line_6 $$ result[0] = new Object[] [ CD ]
Line_4 $$ impl.executeAsync(command, new Vector(Arrays.asList(args)), new AsyncCallback() -->Line_6 $$ result[0] = new Object[] [ FD ]
Line_15 $$ if (process != null) -->Line_17 $$ result[0] = new Object[] [ CD ]
Line_16 $$ int exitValue = process.exitValue()-->Line_17 $$ result[0] = new Object[] [ FD ]
Line_2 $$ public Object execute(String command, Object[] args) throws XmlRpcException -->Line_13 $$ while (result[0] == null && System.currentTimeMillis() - started < TIME_LIMIT) [ CD ]
Line_2 $$ public Object execute(String command, Object[] args) throws XmlRpcException -->Line_4 $$ impl.executeAsync(command, new Vector(Arrays.asList(args)), new AsyncCallback() [ FD ]
Line_2 $$ public Object execute(String command, Object[] args) throws XmlRpcException -->Line_4 $$ impl.executeAsync(command, new Vector(Arrays.asList(args)), new AsyncCallback() [ CD ]
Line_4 $$ impl.executeAsync(command, new Vector(Arrays.asList(args)), new AsyncCallback() -->Line_9 $$ result[0] = recievedResult[ CD ]
