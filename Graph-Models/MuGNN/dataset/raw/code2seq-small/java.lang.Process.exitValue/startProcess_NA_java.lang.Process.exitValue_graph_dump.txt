Line_4 $$ final Process process = new ProcessBuilder(commands).redirectErrorStream(true).directory(directory).start()-->Line_22 $$ process.waitFor()[ FD ]
Line_5 $$ Thread t = new Thread(new Runnable() -->Line_21 $$ t.start()[ FD ]
Line_2 $$ private static boolean startProcess(String[] commands, File directory, final CharCallback callback) -->Line_4 $$ final Process process = new ProcessBuilder(commands).redirectErrorStream(true).directory(directory).start()[ FD ]
Line_12 $$ while ((c = reader.read()) != -1) -->Line_13 $$ callback.character((char) c)[ CD ]
Line_4 $$ final Process process = new ProcessBuilder(commands).redirectErrorStream(true).directory(directory).start()-->Line_9 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()), 1)[ FD ]
Line_5 $$ Thread t = new Thread(new Runnable() -->Line_9 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()), 1)[ CD ]
Line_9 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()), 1)-->Line_12 $$ while ((c = reader.read()) != -1) [ FD ]
Line_5 $$ Thread t = new Thread(new Runnable() -->Line_23 $$ t.interrupt()[ FD ]
Line_11 $$ int c = 0-->Line_12 $$ while ((c = reader.read()) != -1) [ FD ]
Line_4 $$ final Process process = new ProcessBuilder(commands).redirectErrorStream(true).directory(directory).start()-->Line_24 $$ return process.exitValue() == 0[ FD ]
Line_2 $$ private static boolean startProcess(String[] commands, File directory, final CharCallback callback) -->Line_13 $$ callback.character((char) c)[ FD ]
Line_5 $$ Thread t = new Thread(new Runnable() -->Line_20 $$ t.setDaemon(true)[ FD ]
