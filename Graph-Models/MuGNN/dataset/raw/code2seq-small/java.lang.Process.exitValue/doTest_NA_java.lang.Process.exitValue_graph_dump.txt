Line_2 $$ private void doTest(BaseDataReader.SleepingPolicy policy) throws IOException, URISyntaxException, InterruptedException -->Line_8 $$ for (int i = 0; i < StringUtil.countChars(className, '.') + 1; i++) dir = dir.getParentFile()[ CD ]
Line_2 $$ private void doTest(BaseDataReader.SleepingPolicy policy) throws IOException, URISyntaxException, InterruptedException -->Line_16 $$ assertEquals(Arrays.asList(TEST_DATA), reader.myLines)[ CD ]
Line_5 $$ URL url = getClass().getClassLoader().getResource(className.replace(".", "/") + ".class")-->Line_6 $$ assertNotNull(url)[ FD ]
Line_9 $$ String[] cmd = -->Line_11 $$ TestOutputReader reader = new TestOutputReader(process.getInputStream(), policy, StringUtil.join(cmd, " "))[ FD ]
Line_2 $$ private void doTest(BaseDataReader.SleepingPolicy policy) throws IOException, URISyntaxException, InterruptedException -->Line_10 $$ Process process = new ProcessBuilder(cmd).redirectErrorStream(true).start()[ CD ]
Line_2 $$ private void doTest(BaseDataReader.SleepingPolicy policy) throws IOException, URISyntaxException, InterruptedException -->Line_7 $$ File dir = new File(url.toURI())[ CD ]
Line_4 $$ String className = BaseOutputReaderTest.class.getName()-->Line_5 $$ URL url = getClass().getClassLoader().getResource(className.replace(".", "/") + ".class")[ FD ]
Line_11 $$ TestOutputReader reader = new TestOutputReader(process.getInputStream(), policy, StringUtil.join(cmd, " "))-->Line_14 $$ reader.waitFor()[ FD ]
Line_4 $$ String className = BaseOutputReaderTest.class.getName()-->Line_8 $$ for (int i = 0; i < StringUtil.countChars(className, '.') + 1; i++) dir = dir.getParentFile()[ FD ]
Line_2 $$ private void doTest(BaseDataReader.SleepingPolicy policy) throws IOException, URISyntaxException, InterruptedException -->Line_15 $$ assertEquals(0, process.exitValue())[ CD ]
Line_2 $$ private void doTest(BaseDataReader.SleepingPolicy policy) throws IOException, URISyntaxException, InterruptedException -->Line_13 $$ reader.stop()[ CD ]
Line_5 $$ URL url = getClass().getClassLoader().getResource(className.replace(".", "/") + ".class")-->Line_7 $$ File dir = new File(url.toURI())[ FD ]
Line_2 $$ private void doTest(BaseDataReader.SleepingPolicy policy) throws IOException, URISyntaxException, InterruptedException -->Line_9 $$ String[] cmd = [ CD ]
Line_2 $$ private void doTest(BaseDataReader.SleepingPolicy policy) throws IOException, URISyntaxException, InterruptedException -->Line_11 $$ TestOutputReader reader = new TestOutputReader(process.getInputStream(), policy, StringUtil.join(cmd, " "))[ CD ]
Line_2 $$ private void doTest(BaseDataReader.SleepingPolicy policy) throws IOException, URISyntaxException, InterruptedException -->Line_6 $$ assertNotNull(url)[ CD ]
Line_8 $$ dir = dir.getParentFile()-->Line_9 $$ String[] cmd = [ FD ]
Line_10 $$ Process process = new ProcessBuilder(cmd).redirectErrorStream(true).start()-->Line_15 $$ assertEquals(0, process.exitValue())[ FD ]
Line_7 $$ File dir = new File(url.toURI())-->Line_9 $$ String[] cmd = [ FD ]
Line_10 $$ Process process = new ProcessBuilder(cmd).redirectErrorStream(true).start()-->Line_12 $$ process.waitFor()[ FD ]
Line_2 $$ private void doTest(BaseDataReader.SleepingPolicy policy) throws IOException, URISyntaxException, InterruptedException -->Line_4 $$ String className = BaseOutputReaderTest.class.getName()[ CD ]
Line_10 $$ Process process = new ProcessBuilder(cmd).redirectErrorStream(true).start()-->Line_11 $$ TestOutputReader reader = new TestOutputReader(process.getInputStream(), policy, StringUtil.join(cmd, " "))[ FD ]
Line_2 $$ private void doTest(BaseDataReader.SleepingPolicy policy) throws IOException, URISyntaxException, InterruptedException -->Line_12 $$ process.waitFor()[ CD ]
Line_2 $$ private void doTest(BaseDataReader.SleepingPolicy policy) throws IOException, URISyntaxException, InterruptedException -->Line_14 $$ reader.waitFor()[ CD ]
Line_2 $$ private void doTest(BaseDataReader.SleepingPolicy policy) throws IOException, URISyntaxException, InterruptedException -->Line_5 $$ URL url = getClass().getClassLoader().getResource(className.replace(".", "/") + ".class")[ CD ]
Line_11 $$ TestOutputReader reader = new TestOutputReader(process.getInputStream(), policy, StringUtil.join(cmd, " "))-->Line_13 $$ reader.stop()[ FD ]
Line_7 $$ File dir = new File(url.toURI())-->Line_8 $$ dir = dir.getParentFile()[ FD ]
Line_2 $$ private void doTest(BaseDataReader.SleepingPolicy policy) throws IOException, URISyntaxException, InterruptedException -->Line_3 $$ String java = System.getProperty("java.home") + (SystemInfo.isWindows ? "\\bin\\java.exe" : "/bin/java")[ CD ]
