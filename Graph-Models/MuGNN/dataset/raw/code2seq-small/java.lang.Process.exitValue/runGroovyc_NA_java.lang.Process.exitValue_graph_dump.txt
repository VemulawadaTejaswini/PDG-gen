Line_30 $$ ProcessHandler handler = new BaseOSProcessHandler(process, StringUtil.join(cmd, " "), null) -->Line_35 $$ return SharedThreadPool.getInstance().executeOnPooledThread(task)[ CD ]
Line_5 $$ if (myOptimizeClassLoading) -->Line_6 $$ classpath.addAll(GroovyBuilder.getGroovyRtRoots())[ CD ]
Line_5 $$ if (myOptimizeClassLoading) -->Line_7 $$ classpath.add(ClasspathBootstrap.getResourcePath(Function.class))[ CD ]
Line_13 $$ List<String> vmParams = ContainerUtilRt.newArrayList()-->Line_18 $$ vmParams.add("-D" + GroovyRtConstants.GROOVYC_ASM_RESOLVING_ONLY + "=false")[ FD ]
Line_21 $$ if (StringUtil.isNotEmpty(configScript)) -->Line_22 $$ vmParams.add("-D" + GroovyRtConstants.GROOVYC_CONFIG_SCRIPT + "=" + configScript)[ CD ]
Line_25 $$ if (grapeRoot != null) -->Line_26 $$ vmParams.add("-D" + GroovycOutputParser.GRAPE_ROOT + "=" + grapeRoot)[ CD ]
Line_4 $$ List<String> classpath = new ArrayList<String>()-->Line_9 $$ classpath.add(ClasspathBootstrap.getResourceFile(THashMap.class).getPath())[ FD ]
Line_30 $$ ProcessHandler handler = new BaseOSProcessHandler(process, StringUtil.join(cmd, " "), null) -->Line_35 $$ return SharedThreadPool.getInstance().executeOnPooledThread(task)[ FD ]
Line_13 $$ List<String> vmParams = ContainerUtilRt.newArrayList()-->Line_15 $$ vmParams.add("-Dfile.encoding=" + System.getProperty("file.encoding"))[ FD ]
Line_29 $$ final Process process = Runtime.getRuntime().exec(ArrayUtil.toStringArray(cmd))-->Line_45 $$ parser.notifyFinished(process.exitValue())[ FD ]
Line_20 $$ String configScript = settings.configScript-->Line_21 $$ if (StringUtil.isNotEmpty(configScript)) [ FD ]
Line_13 $$ List<String> vmParams = ContainerUtilRt.newArrayList()-->Line_28 $$ final List<String> cmd = ExternalProcessUtil.buildJavaCommandLine(getJavaExecutable(myChunk), "org.jetbrains.groovy.compiler.rt.GroovycRunner", Collections.<String>emptyList(), classpath, vmParams, getProgramParams(tempFile, settings, forStubs))[ FD ]
Line_30 $$ ProcessHandler handler = new BaseOSProcessHandler(process, StringUtil.join(cmd, " "), null) -->Line_40 $$ parser.notifyTextAvailable(text, outputType)[ CD ]
Line_4 $$ List<String> classpath = new ArrayList<String>()-->Line_8 $$ classpath.add(ClasspathBootstrap.getResourcePath(UrlClassLoader.class))[ FD ]
Line_13 $$ List<String> vmParams = ContainerUtilRt.newArrayList()-->Line_14 $$ vmParams.add("-Xmx" + System.getProperty("groovyc.heap.size", settings.heapSize) + "m")[ FD ]
Line_13 $$ List<String> vmParams = ContainerUtilRt.newArrayList()-->Line_22 $$ vmParams.add("-D" + GroovyRtConstants.GROOVYC_CONFIG_SCRIPT + "=" + configScript)[ FD ]
Line_4 $$ List<String> classpath = new ArrayList<String>()-->Line_11 $$ classpath.addAll(compilationClassPath)[ FD ]
Line_24 $$ String grapeRoot = System.getProperty(GroovycOutputParser.GRAPE_ROOT)-->Line_25 $$ if (grapeRoot != null) [ FD ]
Line_5 $$ if (myOptimizeClassLoading) -->Line_9 $$ classpath.add(ClasspathBootstrap.getResourceFile(THashMap.class).getPath())[ CD ]
Line_30 $$ ProcessHandler handler = new BaseOSProcessHandler(process, StringUtil.join(cmd, " "), null) -->Line_40 $$ parser.notifyTextAvailable(text, outputType)[ FD ]
Line_30 $$ ProcessHandler handler = new BaseOSProcessHandler(process, StringUtil.join(cmd, " "), null) -->Line_43 $$ handler.startNotify()[ FD ]
Line_28 $$ final List<String> cmd = ExternalProcessUtil.buildJavaCommandLine(getJavaExecutable(myChunk), "org.jetbrains.groovy.compiler.rt.GroovycRunner", Collections.<String>emptyList(), classpath, vmParams, getProgramParams(tempFile, settings, forStubs))-->Line_30 $$ ProcessHandler handler = new BaseOSProcessHandler(process, StringUtil.join(cmd, " "), null) [ FD ]
Line_4 $$ List<String> classpath = new ArrayList<String>()-->Line_7 $$ classpath.add(ClasspathBootstrap.getResourcePath(Function.class))[ FD ]
Line_5 $$ if (myOptimizeClassLoading) -->Line_11 $$ classpath.addAll(compilationClassPath)[ CD ]
Line_30 $$ ProcessHandler handler = new BaseOSProcessHandler(process, StringUtil.join(cmd, " "), null) -->Line_44 $$ handler.waitFor()[ FD ]
Line_5 $$ if (myOptimizeClassLoading) -->Line_8 $$ classpath.add(ClasspathBootstrap.getResourcePath(UrlClassLoader.class))[ CD ]
Line_4 $$ List<String> classpath = new ArrayList<String>()-->Line_28 $$ final List<String> cmd = ExternalProcessUtil.buildJavaCommandLine(getJavaExecutable(myChunk), "org.jetbrains.groovy.compiler.rt.GroovycRunner", Collections.<String>emptyList(), classpath, vmParams, getProgramParams(tempFile, settings, forStubs))[ FD ]
Line_4 $$ List<String> classpath = new ArrayList<String>()-->Line_6 $$ classpath.addAll(GroovyBuilder.getGroovyRtRoots())[ FD ]
Line_28 $$ final List<String> cmd = ExternalProcessUtil.buildJavaCommandLine(getJavaExecutable(myChunk), "org.jetbrains.groovy.compiler.rt.GroovycRunner", Collections.<String>emptyList(), classpath, vmParams, getProgramParams(tempFile, settings, forStubs))-->Line_29 $$ final Process process = Runtime.getRuntime().exec(ArrayUtil.toStringArray(cmd))[ FD ]
Line_13 $$ List<String> vmParams = ContainerUtilRt.newArrayList()-->Line_26 $$ vmParams.add("-D" + GroovycOutputParser.GRAPE_ROOT + "=" + grapeRoot)[ FD ]
