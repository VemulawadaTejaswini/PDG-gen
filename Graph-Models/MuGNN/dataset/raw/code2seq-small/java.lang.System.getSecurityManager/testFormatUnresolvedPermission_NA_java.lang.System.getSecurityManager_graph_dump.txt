Line_2 $$ public void testFormatUnresolvedPermission() throws Exception -->Line_5 $$ Path testFile = this.getDataPath("security/unresolved-plugin-security.policy")[ CD ]
Line_6 $$ PermissionCollection actual = PluginSecurity.parsePermissions(Terminal.DEFAULT, testFile, scratch)-->Line_7 $$ List<Permission> permissions = Collections.list(actual.elements())[ FD ]
Line_7 $$ List<Permission> permissions = Collections.list(actual.elements())-->Line_8 $$ assertEquals(1, permissions.size())[ FD ]
Line_5 $$ Path testFile = this.getDataPath("security/unresolved-plugin-security.policy")-->Line_6 $$ PermissionCollection actual = PluginSecurity.parsePermissions(Terminal.DEFAULT, testFile, scratch)[ FD ]
Line_2 $$ public void testFormatUnresolvedPermission() throws Exception -->Line_6 $$ PermissionCollection actual = PluginSecurity.parsePermissions(Terminal.DEFAULT, testFile, scratch)[ CD ]
Line_7 $$ List<Permission> permissions = Collections.list(actual.elements())-->Line_9 $$ assertEquals("org.fake.FakePermission fakeName", PluginSecurity.formatPermission(permissions.get(0)))[ FD ]
Line_2 $$ public void testFormatUnresolvedPermission() throws Exception -->Line_8 $$ assertEquals(1, permissions.size())[ CD ]
Line_4 $$ Path scratch = createTempDir()-->Line_6 $$ PermissionCollection actual = PluginSecurity.parsePermissions(Terminal.DEFAULT, testFile, scratch)[ FD ]
Line_2 $$ public void testFormatUnresolvedPermission() throws Exception -->Line_4 $$ Path scratch = createTempDir()[ CD ]
Line_2 $$ public void testFormatUnresolvedPermission() throws Exception -->Line_3 $$ assumeTrue("test cannot run with security manager enabled", System.getSecurityManager() == null)[ CD ]
Line_2 $$ public void testFormatUnresolvedPermission() throws Exception -->Line_9 $$ assertEquals("org.fake.FakePermission fakeName", PluginSecurity.formatPermission(permissions.get(0)))[ CD ]
Line_2 $$ public void testFormatUnresolvedPermission() throws Exception -->Line_7 $$ List<Permission> permissions = Collections.list(actual.elements())[ CD ]
