Line_49 $$ for (int i = 0; i < candidates.length; i++) -->Line_59 $$ if (resolvedValues != null) [ CD ]
Line_14 $$ if (constructorToUse != null && mbd.constructorArgumentsResolved) -->Line_16 $$ if (argsToUse == null) [ CD ]
Line_50 $$ Constructor<?> candidate = candidates[i]-->Line_61 $$ String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)[ FD ]
Line_17 $$ argsToResolve = mbd.preparedConstructorArguments-->Line_21 $$ if (argsToResolve != null) [ FD ]
Line_70 $$ if (this.beanFactory.logger.isTraceEnabled()) -->Line_71 $$ this.beanFactory.logger.trace("Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)[ CD ]
Line_28 $$ int minNrOfArgs-->Line_34 $$ minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)[ FD ]
Line_33 $$ resolvedValues = new ConstructorArgumentValues()-->Line_59 $$ if (resolvedValues != null) [ FD ]
Line_91 $$ ambiguousConstructors = null-->Line_93 $$ if (ambiguousConstructors == null) [ FD ]
Line_2 $$ public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) -->Line_110 $$ throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Ambiguous constructor matches found in bean '" + beanName + "' " + "(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " + ambiguousConstructors)[ FD ]
Line_2 $$ public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) -->Line_5 $$ Constructor<?> constructorToUse = null[ CD ]
Line_65 $$ paramNames = pnd.getParameterNames(candidate)-->Line_68 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_27 $$ ConstructorArgumentValues resolvedValues = null-->Line_68 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_15 $$ argsToUse = mbd.resolvedConstructorArguments-->Line_22 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)[ FD ]
Line_74 $$ causes = new LinkedList<UnsatisfiedDependencyException>()-->Line_102 $$ UnsatisfiedDependencyException ex = causes.removeLast()[ FD ]
Line_48 $$ LinkedList<UnsatisfiedDependencyException> causes = null-->Line_102 $$ UnsatisfiedDependencyException ex = causes.removeLast()[ FD ]
Line_13 $$ constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod-->Line_127 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, constructorToUse, argsToUse)[ FD ]
Line_74 $$ causes = new LinkedList<UnsatisfiedDependencyException>()-->Line_76 $$ causes.add(ex)[ FD ]
Line_3 $$ BeanWrapperImpl bw = new BeanWrapperImpl()-->Line_129 $$ bw.setWrappedInstance(beanInstance)[ FD ]
Line_49 $$ for (int i = 0; i < candidates.length; i++) -->Line_51 $$ Class<?>[] paramTypes = candidate.getParameterTypes()[ CD ]
Line_36 $$ Constructor<?>[] candidates = chosenCtors-->Line_37 $$ if (candidates == null) [ FD ]
Line_58 $$ ArgumentsHolder argsHolder-->Line_88 $$ argsHolderToUse = argsHolder[ FD ]
Line_7 $$ Object[] argsToUse = null-->Line_9 $$ argsToUse = explicitArgs[ FD ]
Line_2 $$ public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) -->Line_25 $$ if (constructorToUse == null) [ CD ]
Line_7 $$ Object[] argsToUse = null-->Line_89 $$ argsToUse = argsHolder.arguments[ FD ]
Line_61 $$ String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)-->Line_68 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_2 $$ public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) -->Line_109 $$ if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) [ FD ]
Line_112 $$ if (explicitArgs == null) -->Line_113 $$ argsHolderToUse.storeCache(mbd, constructorToUse)[ CD ]
Line_2 $$ public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) -->Line_123 $$ return beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, beanFactory, ctorToUse, argumentsToUse)[ FD ]
Line_25 $$ if (constructorToUse == null) -->Line_37 $$ if (candidates == null) [ CD ]
Line_16 $$ if (argsToUse == null) -->Line_17 $$ argsToResolve = mbd.preparedConstructorArguments[ CD ]
Line_11 $$ Object[] argsToResolve = null-->Line_21 $$ if (argsToResolve != null) [ FD ]
Line_25 $$ if (constructorToUse == null) -->Line_46 $$ int minTypeDiffWeight = Integer.MAX_VALUE[ CD ]
Line_92 $$ if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) -->Line_93 $$ if (ambiguousConstructors == null) [ CD ]
Line_7 $$ Object[] argsToUse = null-->Line_15 $$ argsToUse = mbd.resolvedConstructorArguments[ FD ]
Line_117 $$ Object beanInstance-->Line_121 $$ beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() [ FD ]
Line_73 $$ if (causes == null) -->Line_74 $$ causes = new LinkedList<UnsatisfiedDependencyException>()[ CD ]
Line_13 $$ constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod-->Line_95 $$ ambiguousConstructors.add(constructorToUse)[ FD ]
Line_25 $$ if (constructorToUse == null) -->Line_112 $$ if (explicitArgs == null) [ CD ]
Line_83 $$ argsHolder = new ArgumentsHolder(explicitArgs)-->Line_85 $$ int typeDiffWeight = (mbd.isLenientConstructorResolution() ? argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))[ FD ]
Line_25 $$ if (constructorToUse == null) -->Line_48 $$ LinkedList<UnsatisfiedDependencyException> causes = null[ CD ]
Line_2 $$ public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) -->Line_42 $$ throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Resolution of declared constructors on bean Class [" + beanClass.getName() + "] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)[ FD ]
Line_25 $$ if (constructorToUse == null) -->Line_36 $$ Constructor<?>[] candidates = chosenCtors[ CD ]
Line_2 $$ public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) -->Line_22 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)[ FD ]
Line_85 $$ int typeDiffWeight = (mbd.isLenientConstructorResolution() ? argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))-->Line_86 $$ if (typeDiffWeight < minTypeDiffWeight) [ FD ]
Line_5 $$ Constructor<?> constructorToUse = null-->Line_87 $$ constructorToUse = candidate[ FD ]
Line_9 $$ argsToUse = explicitArgs-->Line_22 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)[ FD ]
Line_2 $$ public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) -->Line_127 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, constructorToUse, argsToUse)[ FD ]
Line_48 $$ LinkedList<UnsatisfiedDependencyException> causes = null-->Line_101 $$ if (causes != null) [ FD ]
Line_65 $$ paramNames = pnd.getParameterNames(candidate)-->Line_62 $$ if (paramNames == null) [ FD ]
Line_2 $$ public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) -->Line_108 $$ throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Could not resolve matching constructor " + "(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")[ FD ]
Line_6 $$ ArgumentsHolder argsHolderToUse = null-->Line_88 $$ argsHolderToUse = argsHolder[ FD ]
Line_121 $$ beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() -->Line_129 $$ bw.setWrappedInstance(beanInstance)[ FD ]
Line_91 $$ ambiguousConstructors = null-->Line_95 $$ ambiguousConstructors.add(constructorToUse)[ FD ]
Line_3 $$ BeanWrapperImpl bw = new BeanWrapperImpl()-->Line_22 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)[ FD ]
Line_50 $$ Constructor<?> candidate = candidates[i]-->Line_97 $$ ambiguousConstructors.add(candidate)[ FD ]
Line_93 $$ if (ambiguousConstructors == null) -->Line_94 $$ ambiguousConstructors = new LinkedHashSet<Constructor<?>>()[ CD ]
Line_93 $$ if (ambiguousConstructors == null) -->Line_95 $$ ambiguousConstructors.add(constructorToUse)[ CD ]
Line_2 $$ public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) -->Line_29 $$ if (explicitArgs != null) [ FD ]
Line_29 $$ if (explicitArgs != null) -->Line_30 $$ minNrOfArgs = explicitArgs.length[ CD ]
Line_51 $$ Class<?>[] paramTypes = candidate.getParameterTypes()-->Line_85 $$ int typeDiffWeight = (mbd.isLenientConstructorResolution() ? argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))[ FD ]
Line_36 $$ Constructor<?>[] candidates = chosenCtors-->Line_40 $$ candidates = (mbd.isNonPublicAccessAllowed() ? beanClass.getDeclaredConstructors() : beanClass.getConstructors())[ FD ]
Line_68 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)-->Line_88 $$ argsHolderToUse = argsHolder[ FD ]
Line_91 $$ ambiguousConstructors = null-->Line_97 $$ ambiguousConstructors.add(candidate)[ FD ]
Line_7 $$ Object[] argsToUse = null-->Line_127 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, constructorToUse, argsToUse)[ FD ]
Line_2 $$ public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) -->Line_40 $$ candidates = (mbd.isNonPublicAccessAllowed() ? beanClass.getDeclaredConstructors() : beanClass.getConstructors())[ FD ]
Line_61 $$ String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)-->Line_65 $$ paramNames = pnd.getParameterNames(candidate)[ FD ]
Line_46 $$ int minTypeDiffWeight = Integer.MAX_VALUE-->Line_86 $$ if (typeDiffWeight < minTypeDiffWeight) [ FD ]
Line_13 $$ constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod-->Line_100 $$ if (constructorToUse == null) [ FD ]
Line_103 $$ for (Exception cause : causes) -->Line_104 $$ this.beanFactory.onSuppressedException(cause)[ FD ]
Line_86 $$ if (typeDiffWeight < minTypeDiffWeight) -->Line_87 $$ constructorToUse = candidate[ CD ]
Line_9 $$ argsToUse = explicitArgs-->Line_15 $$ argsToUse = mbd.resolvedConstructorArguments[ FD ]
Line_88 $$ argsHolderToUse = argsHolder-->Line_113 $$ argsHolderToUse.storeCache(mbd, constructorToUse)[ FD ]
Line_37 $$ if (candidates == null) -->Line_38 $$ Class<?> beanClass = mbd.getBeanClass()[ CD ]
Line_117 $$ Object beanInstance-->Line_129 $$ bw.setWrappedInstance(beanInstance)[ FD ]
Line_30 $$ minNrOfArgs = explicitArgs.length-->Line_55 $$ if (paramTypes.length < minNrOfArgs) [ FD ]
Line_27 $$ ConstructorArgumentValues resolvedValues = null-->Line_59 $$ if (resolvedValues != null) [ FD ]
Line_74 $$ causes = new LinkedList<UnsatisfiedDependencyException>()-->Line_73 $$ if (causes == null) [ FD ]
Line_89 $$ argsToUse = argsHolder.arguments-->Line_127 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, constructorToUse, argsToUse)[ FD ]
Line_49 $$ for (int i = 0; i < candidates.length; i++) -->Line_50 $$ Constructor<?> candidate = candidates[i][ CD ]
Line_118 $$ if (System.getSecurityManager() != null) -->Line_121 $$ beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() [ CD ]
Line_50 $$ Constructor<?> candidate = candidates[i]-->Line_87 $$ constructorToUse = candidate[ FD ]
Line_86 $$ if (typeDiffWeight < minTypeDiffWeight) -->Line_90 $$ minTypeDiffWeight = typeDiffWeight[ CD ]
Line_9 $$ argsToUse = explicitArgs-->Line_127 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, constructorToUse, argsToUse)[ FD ]
Line_25 $$ if (constructorToUse == null) -->Line_47 $$ Set<Constructor<?>> ambiguousConstructors = null[ CD ]
Line_46 $$ int minTypeDiffWeight = Integer.MAX_VALUE-->Line_90 $$ minTypeDiffWeight = typeDiffWeight[ FD ]
Line_61 $$ String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)-->Line_62 $$ if (paramNames == null) [ FD ]
Line_2 $$ public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) -->Line_34 $$ minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)[ FD ]
Line_68 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)-->Line_83 $$ argsHolder = new ArgumentsHolder(explicitArgs)[ FD ]
Line_48 $$ LinkedList<UnsatisfiedDependencyException> causes = null-->Line_73 $$ if (causes == null) [ FD ]
Line_49 $$ for (int i = 0; i < candidates.length; i++) -->Line_52 $$ if (constructorToUse != null && argsToUse.length > paramTypes.length) [ CD ]
Line_50 $$ Constructor<?> candidate = candidates[i]-->Line_51 $$ Class<?>[] paramTypes = candidate.getParameterTypes()[ FD ]
Line_86 $$ if (typeDiffWeight < minTypeDiffWeight) -->Line_92 $$ if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) [ CD ]
Line_8 $$ if (explicitArgs != null) -->Line_21 $$ if (argsToResolve != null) [ CD ]
Line_86 $$ if (typeDiffWeight < minTypeDiffWeight) -->Line_91 $$ ambiguousConstructors = null[ CD ]
Line_51 $$ Class<?>[] paramTypes = candidate.getParameterTypes()-->Line_68 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_47 $$ Set<Constructor<?>> ambiguousConstructors = null-->Line_93 $$ if (ambiguousConstructors == null) [ FD ]
Line_87 $$ constructorToUse = candidate-->Line_113 $$ argsHolderToUse.storeCache(mbd, constructorToUse)[ FD ]
Line_2 $$ public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) -->Line_132 $$ throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Bean instantiation via constructor failed", ex)[ FD ]
Line_118 $$ if (System.getSecurityManager() != null) -->Line_127 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, constructorToUse, argsToUse)[ CD ]
Line_47 $$ Set<Constructor<?>> ambiguousConstructors = null-->Line_91 $$ ambiguousConstructors = null[ FD ]
Line_91 $$ ambiguousConstructors = null-->Line_94 $$ ambiguousConstructors = new LinkedHashSet<Constructor<?>>()[ FD ]
Line_21 $$ if (argsToResolve != null) -->Line_22 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)[ CD ]
Line_2 $$ public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) -->Line_68 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_29 $$ if (explicitArgs != null) -->Line_32 $$ ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()[ CD ]
Line_50 $$ Constructor<?> candidate = candidates[i]-->Line_68 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_8 $$ if (explicitArgs != null) -->Line_11 $$ Object[] argsToResolve = null[ CD ]
Line_13 $$ constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod-->Line_113 $$ argsHolderToUse.storeCache(mbd, constructorToUse)[ FD ]
Line_49 $$ for (int i = 0; i < candidates.length; i++) -->Line_58 $$ ArgumentsHolder argsHolder[ CD ]
Line_2 $$ public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) -->Line_38 $$ Class<?> beanClass = mbd.getBeanClass()[ FD ]
Line_62 $$ if (paramNames == null) -->Line_64 $$ if (pnd != null) [ CD ]
Line_13 $$ constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod-->Line_25 $$ if (constructorToUse == null) [ FD ]
Line_2 $$ public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) -->Line_3 $$ BeanWrapperImpl bw = new BeanWrapperImpl()[ CD ]
Line_2 $$ public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) -->Line_8 $$ if (explicitArgs != null) [ CD ]
Line_36 $$ Constructor<?>[] candidates = chosenCtors-->Line_45 $$ AutowireUtils.sortConstructors(candidates)[ FD ]
Line_15 $$ argsToUse = mbd.resolvedConstructorArguments-->Line_89 $$ argsToUse = argsHolder.arguments[ FD ]
Line_28 $$ int minNrOfArgs-->Line_30 $$ minNrOfArgs = explicitArgs.length[ FD ]
Line_33 $$ resolvedValues = new ConstructorArgumentValues()-->Line_68 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_27 $$ ConstructorArgumentValues resolvedValues = null-->Line_34 $$ minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)[ FD ]
Line_2 $$ public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) -->Line_113 $$ argsHolderToUse.storeCache(mbd, constructorToUse)[ FD ]
Line_63 $$ ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()-->Line_64 $$ if (pnd != null) [ FD ]
Line_38 $$ Class<?> beanClass = mbd.getBeanClass()-->Line_42 $$ throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Resolution of declared constructors on bean Class [" + beanClass.getName() + "] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)[ FD ]
Line_8 $$ if (explicitArgs != null) -->Line_9 $$ argsToUse = explicitArgs[ CD ]
Line_25 $$ if (constructorToUse == null) -->Line_28 $$ int minNrOfArgs[ CD ]
Line_101 $$ if (causes != null) -->Line_102 $$ UnsatisfiedDependencyException ex = causes.removeLast()[ CD ]
Line_94 $$ ambiguousConstructors = new LinkedHashSet<Constructor<?>>()-->Line_93 $$ if (ambiguousConstructors == null) [ FD ]
Line_2 $$ public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) -->Line_85 $$ int typeDiffWeight = (mbd.isLenientConstructorResolution() ? argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))[ FD ]
Line_2 $$ public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) -->Line_9 $$ argsToUse = explicitArgs[ FD ]
Line_5 $$ Constructor<?> constructorToUse = null-->Line_13 $$ constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod[ FD ]
Line_118 $$ if (System.getSecurityManager() != null) -->Line_120 $$ final Object[] argumentsToUse = argsToUse[ CD ]
Line_9 $$ argsToUse = explicitArgs-->Line_16 $$ if (argsToUse == null) [ FD ]
Line_2 $$ public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) -->Line_4 $$ this.beanFactory.initBeanWrapper(bw)[ CD ]
Line_5 $$ Constructor<?> constructorToUse = null-->Line_22 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)[ FD ]
Line_3 $$ BeanWrapperImpl bw = new BeanWrapperImpl()-->Line_68 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_11 $$ Object[] argsToResolve = null-->Line_17 $$ argsToResolve = mbd.preparedConstructorArguments[ FD ]
Line_74 $$ causes = new LinkedList<UnsatisfiedDependencyException>()-->Line_101 $$ if (causes != null) [ FD ]
Line_14 $$ if (constructorToUse != null && mbd.constructorArgumentsResolved) -->Line_15 $$ argsToUse = mbd.resolvedConstructorArguments[ CD ]
Line_9 $$ argsToUse = explicitArgs-->Line_89 $$ argsToUse = argsHolder.arguments[ FD ]
Line_6 $$ ArgumentsHolder argsHolderToUse = null-->Line_113 $$ argsHolderToUse.storeCache(mbd, constructorToUse)[ FD ]
Line_29 $$ if (explicitArgs != null) -->Line_33 $$ resolvedValues = new ConstructorArgumentValues()[ CD ]
Line_28 $$ int minNrOfArgs-->Line_55 $$ if (paramTypes.length < minNrOfArgs) [ FD ]
Line_40 $$ candidates = (mbd.isNonPublicAccessAllowed() ? beanClass.getDeclaredConstructors() : beanClass.getConstructors())-->Line_45 $$ AutowireUtils.sortConstructors(candidates)[ FD ]
Line_22 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)-->Line_127 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, constructorToUse, argsToUse)[ FD ]
Line_13 $$ constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod-->Line_87 $$ constructorToUse = candidate[ FD ]
Line_86 $$ if (typeDiffWeight < minTypeDiffWeight) -->Line_88 $$ argsHolderToUse = argsHolder[ CD ]
Line_49 $$ for (int i = 0; i < candidates.length; i++) -->Line_85 $$ int typeDiffWeight = (mbd.isLenientConstructorResolution() ? argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))[ CD ]
Line_64 $$ if (pnd != null) -->Line_65 $$ paramNames = pnd.getParameterNames(candidate)[ CD ]
Line_83 $$ argsHolder = new ArgumentsHolder(explicitArgs)-->Line_88 $$ argsHolderToUse = argsHolder[ FD ]
Line_15 $$ argsToUse = mbd.resolvedConstructorArguments-->Line_16 $$ if (argsToUse == null) [ FD ]
Line_17 $$ argsToResolve = mbd.preparedConstructorArguments-->Line_22 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)[ FD ]
Line_94 $$ ambiguousConstructors = new LinkedHashSet<Constructor<?>>()-->Line_97 $$ ambiguousConstructors.add(candidate)[ FD ]
Line_25 $$ if (constructorToUse == null) -->Line_26 $$ boolean autowiring = (chosenCtors != null || mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)[ CD ]
Line_25 $$ if (constructorToUse == null) -->Line_27 $$ ConstructorArgumentValues resolvedValues = null[ CD ]
Line_5 $$ Constructor<?> constructorToUse = null-->Line_95 $$ ambiguousConstructors.add(constructorToUse)[ FD ]
Line_5 $$ Constructor<?> constructorToUse = null-->Line_25 $$ if (constructorToUse == null) [ FD ]
Line_27 $$ ConstructorArgumentValues resolvedValues = null-->Line_33 $$ resolvedValues = new ConstructorArgumentValues()[ FD ]
Line_15 $$ argsToUse = mbd.resolvedConstructorArguments-->Line_127 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, constructorToUse, argsToUse)[ FD ]
Line_47 $$ Set<Constructor<?>> ambiguousConstructors = null-->Line_97 $$ ambiguousConstructors.add(candidate)[ FD ]
Line_48 $$ LinkedList<UnsatisfiedDependencyException> causes = null-->Line_74 $$ causes = new LinkedList<UnsatisfiedDependencyException>()[ FD ]
Line_30 $$ minNrOfArgs = explicitArgs.length-->Line_34 $$ minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)[ FD ]
Line_2 $$ public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) -->Line_32 $$ ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()[ FD ]
Line_5 $$ Constructor<?> constructorToUse = null-->Line_100 $$ if (constructorToUse == null) [ FD ]
Line_25 $$ if (constructorToUse == null) -->Line_29 $$ if (explicitArgs != null) [ CD ]
Line_38 $$ Class<?> beanClass = mbd.getBeanClass()-->Line_40 $$ candidates = (mbd.isNonPublicAccessAllowed() ? beanClass.getDeclaredConstructors() : beanClass.getConstructors())[ FD ]
Line_90 $$ minTypeDiffWeight = typeDiffWeight-->Line_86 $$ if (typeDiffWeight < minTypeDiffWeight) [ FD ]
Line_62 $$ if (paramNames == null) -->Line_63 $$ ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()[ CD ]
Line_94 $$ ambiguousConstructors = new LinkedHashSet<Constructor<?>>()-->Line_95 $$ ambiguousConstructors.add(constructorToUse)[ FD ]
Line_92 $$ if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) -->Line_97 $$ ambiguousConstructors.add(candidate)[ CD ]
Line_2 $$ public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) -->Line_26 $$ boolean autowiring = (chosenCtors != null || mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)[ FD ]
Line_58 $$ ArgumentsHolder argsHolder-->Line_85 $$ int typeDiffWeight = (mbd.isLenientConstructorResolution() ? argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))[ FD ]
Line_87 $$ constructorToUse = candidate-->Line_127 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, constructorToUse, argsToUse)[ FD ]
Line_59 $$ if (resolvedValues != null) -->Line_83 $$ argsHolder = new ArgumentsHolder(explicitArgs)[ CD ]
Line_86 $$ if (typeDiffWeight < minTypeDiffWeight) -->Line_89 $$ argsToUse = argsHolder.arguments[ CD ]
Line_49 $$ for (int i = 0; i < candidates.length; i++) -->Line_86 $$ if (typeDiffWeight < minTypeDiffWeight) [ CD ]
Line_47 $$ Set<Constructor<?>> ambiguousConstructors = null-->Line_95 $$ ambiguousConstructors.add(constructorToUse)[ FD ]
Line_13 $$ constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod-->Line_22 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)[ FD ]
Line_25 $$ if (constructorToUse == null) -->Line_100 $$ if (constructorToUse == null) [ CD ]
Line_26 $$ boolean autowiring = (chosenCtors != null || mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)-->Line_68 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_48 $$ LinkedList<UnsatisfiedDependencyException> causes = null-->Line_76 $$ causes.add(ex)[ FD ]
Line_5 $$ Constructor<?> constructorToUse = null-->Line_127 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, constructorToUse, argsToUse)[ FD ]
Line_25 $$ if (constructorToUse == null) -->Line_49 $$ for (int i = 0; i < candidates.length; i++) [ CD ]
Line_5 $$ Constructor<?> constructorToUse = null-->Line_113 $$ argsHolderToUse.storeCache(mbd, constructorToUse)[ FD ]
Line_34 $$ minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)-->Line_55 $$ if (paramTypes.length < minNrOfArgs) [ FD ]
Line_63 $$ ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()-->Line_65 $$ paramNames = pnd.getParameterNames(candidate)[ FD ]
Line_121 $$ beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() -->Line_123 $$ return beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, beanFactory, ctorToUse, argumentsToUse)[ CD ]
Line_49 $$ for (int i = 0; i < candidates.length; i++) -->Line_55 $$ if (paramTypes.length < minNrOfArgs) [ CD ]
Line_29 $$ if (explicitArgs != null) -->Line_34 $$ minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)[ CD ]
Line_68 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)-->Line_85 $$ int typeDiffWeight = (mbd.isLenientConstructorResolution() ? argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))[ FD ]
Line_85 $$ int typeDiffWeight = (mbd.isLenientConstructorResolution() ? argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))-->Line_90 $$ minTypeDiffWeight = typeDiffWeight[ FD ]
Line_22 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)-->Line_89 $$ argsToUse = argsHolder.arguments[ FD ]
Line_118 $$ if (System.getSecurityManager() != null) -->Line_119 $$ final Constructor<?> ctorToUse = constructorToUse[ CD ]
Line_120 $$ final Object[] argumentsToUse = argsToUse-->Line_123 $$ return beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, beanFactory, ctorToUse, argumentsToUse)[ FD ]
Line_2 $$ public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) -->Line_112 $$ if (explicitArgs == null) [ FD ]
Line_2 $$ public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) -->Line_8 $$ if (explicitArgs != null) [ FD ]
Line_59 $$ if (resolvedValues != null) -->Line_80 $$ if (paramTypes.length != explicitArgs.length) [ CD ]
Line_47 $$ Set<Constructor<?>> ambiguousConstructors = null-->Line_94 $$ ambiguousConstructors = new LinkedHashSet<Constructor<?>>()[ FD ]
Line_50 $$ Constructor<?> candidate = candidates[i]-->Line_65 $$ paramNames = pnd.getParameterNames(candidate)[ FD ]
Line_2 $$ public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) -->Line_7 $$ Object[] argsToUse = null[ CD ]
Line_7 $$ Object[] argsToUse = null-->Line_16 $$ if (argsToUse == null) [ FD ]
Line_58 $$ ArgumentsHolder argsHolder-->Line_68 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_3 $$ BeanWrapperImpl bw = new BeanWrapperImpl()-->Line_4 $$ this.beanFactory.initBeanWrapper(bw)[ FD ]
Line_33 $$ resolvedValues = new ConstructorArgumentValues()-->Line_34 $$ minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)[ FD ]
Line_11 $$ Object[] argsToResolve = null-->Line_22 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)[ FD ]
Line_3 $$ BeanWrapperImpl bw = new BeanWrapperImpl()-->Line_34 $$ minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)[ FD ]
Line_2 $$ public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) -->Line_6 $$ ArgumentsHolder argsHolderToUse = null[ CD ]
Line_87 $$ constructorToUse = candidate-->Line_100 $$ if (constructorToUse == null) [ FD ]
Line_25 $$ if (constructorToUse == null) -->Line_45 $$ AutowireUtils.sortConstructors(candidates)[ CD ]
Line_32 $$ ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()-->Line_34 $$ minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)[ FD ]
Line_7 $$ Object[] argsToUse = null-->Line_22 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)[ FD ]
Line_58 $$ ArgumentsHolder argsHolder-->Line_83 $$ argsHolder = new ArgumentsHolder(explicitArgs)[ FD ]
Line_100 $$ if (constructorToUse == null) -->Line_109 $$ if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) [ CD ]
Line_100 $$ if (constructorToUse == null) -->Line_101 $$ if (causes != null) [ CD ]
Line_119 $$ final Constructor<?> ctorToUse = constructorToUse-->Line_123 $$ return beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, beanFactory, ctorToUse, argumentsToUse)[ FD ]
Line_87 $$ constructorToUse = candidate-->Line_95 $$ ambiguousConstructors.add(constructorToUse)[ FD ]
