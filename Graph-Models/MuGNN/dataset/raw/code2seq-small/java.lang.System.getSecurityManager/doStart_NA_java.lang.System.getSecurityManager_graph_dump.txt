Line_6 $$ List<InetAddress> addresses = Arrays.asList(networkService.resolveBindHostAddresses(address == null ? null : new String[] -->Line_7 $$ NetworkUtils.sortAddresses(addresses)[ FD ]
Line_13 $$ multicastChannel = AccessController.doPrivileged(new PrivilegedExceptionAction<MulticastChannel>() -->Line_15 $$ return MulticastChannel.getChannel(nodeName(), shared, config, new Receiver())[ CD ]
Line_10 $$ if (sm != null) -->Line_11 $$ sm.checkPermission(new SpecialPermission())[ CD ]
Line_9 $$ SecurityManager sm = System.getSecurityManager()-->Line_10 $$ if (sm != null) [ FD ]
Line_4 $$ boolean shared = settings.getAsBoolean("discovery.zen.ping.multicast.shared", Constants.MAC_OS_X)-->Line_15 $$ return MulticastChannel.getChannel(nodeName(), shared, config, new Receiver())[ FD ]
Line_8 $$ final MulticastChannel.Config config = new MulticastChannel.Config(port, group, bufferSize, ttl, addresses.get(0), deferToInterface)-->Line_15 $$ return MulticastChannel.getChannel(nodeName(), shared, config, new Receiver())[ FD ]
Line_9 $$ SecurityManager sm = System.getSecurityManager()-->Line_11 $$ sm.checkPermission(new SpecialPermission())[ FD ]
Line_6 $$ List<InetAddress> addresses = Arrays.asList(networkService.resolveBindHostAddresses(address == null ? null : new String[] -->Line_8 $$ final MulticastChannel.Config config = new MulticastChannel.Config(port, group, bufferSize, ttl, addresses.get(0), deferToInterface)[ FD ]
