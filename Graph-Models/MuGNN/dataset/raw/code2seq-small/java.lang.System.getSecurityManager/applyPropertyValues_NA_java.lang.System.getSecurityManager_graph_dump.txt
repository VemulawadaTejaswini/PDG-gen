Line_35 $$ if (pv.isConverted()) -->Line_39 $$ Object originalValue = pv.getValue()[ CD ]
Line_27 $$ TypeConverter converter = getCustomTypeConverter()-->Line_28 $$ if (converter == null) [ FD ]
Line_2 $$ protected void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) -->Line_33 $$ boolean resolveNecessary = false[ CD ]
Line_2 $$ protected void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) -->Line_25 $$ original = Arrays.asList(pvs.getPropertyValues())[ FD ]
Line_41 $$ Object convertedValue = resolvedValue-->Line_51 $$ if (convertible && originalValue instanceof TypedStringValue && !((TypedStringValue) originalValue).isDynamic() && !(convertedValue instanceof Collection || ObjectUtils.isArray(convertedValue))) [ FD ]
Line_46 $$ if (resolvedValue == originalValue) -->Line_51 $$ if (convertible && originalValue instanceof TypedStringValue && !((TypedStringValue) originalValue).isDynamic() && !(convertedValue instanceof Collection || ObjectUtils.isArray(convertedValue))) [ CD ]
Line_32 $$ List<PropertyValue> deepCopy = new ArrayList<PropertyValue>(original.size())-->Line_50 $$ deepCopy.add(pv)[ FD ]
Line_40 $$ Object resolvedValue = valueResolver.resolveValueIfNecessary(pv, originalValue)-->Line_46 $$ if (resolvedValue == originalValue) [ FD ]
Line_27 $$ TypeConverter converter = getCustomTypeConverter()-->Line_29 $$ converter = bw[ FD ]
Line_51 $$ if (convertible && originalValue instanceof TypedStringValue && !((TypedStringValue) originalValue).isDynamic() && !(convertedValue instanceof Collection || ObjectUtils.isArray(convertedValue))) -->Line_52 $$ pv.setConvertedValue(convertedValue)[ CD ]
Line_39 $$ Object originalValue = pv.getValue()-->Line_40 $$ Object resolvedValue = valueResolver.resolveValueIfNecessary(pv, originalValue)[ FD ]
Line_32 $$ List<PropertyValue> deepCopy = new ArrayList<PropertyValue>(original.size())-->Line_36 $$ deepCopy.add(pv)[ FD ]
Line_2 $$ protected void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) -->Line_20 $$ throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Error setting property values", ex)[ FD ]
Line_2 $$ protected void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) -->Line_3 $$ if (pvs == null || pvs.isEmpty()) [ FD ]
Line_34 $$ for (PropertyValue pv : original) -->Line_52 $$ pv.setConvertedValue(convertedValue)[ FD ]
Line_2 $$ protected void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) -->Line_42 $$ boolean convertible = bw.isWritableProperty(propertyName) && !PropertyAccessorUtils.isNestedOrIndexedProperty(propertyName)[ FD ]
Line_13 $$ if (pvs instanceof MutablePropertyValues) -->Line_14 $$ mpvs = (MutablePropertyValues) pvs[ CD ]
Line_2 $$ protected void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) -->Line_64 $$ bw.setPropertyValues(new MutablePropertyValues(deepCopy))[ FD ]
Line_2 $$ protected void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) -->Line_28 $$ if (converter == null) [ CD ]
Line_46 $$ if (resolvedValue == originalValue) -->Line_47 $$ if (convertible) [ CD ]
Line_7 $$ List<PropertyValue> original-->Line_23 $$ original = mpvs.getPropertyValueList()[ FD ]
Line_35 $$ if (pv.isConverted()) -->Line_42 $$ boolean convertible = bw.isWritableProperty(propertyName) && !PropertyAccessorUtils.isNestedOrIndexedProperty(propertyName)[ CD ]
Line_2 $$ protected void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) -->Line_13 $$ if (pvs instanceof MutablePropertyValues) [ FD ]
Line_14 $$ mpvs = (MutablePropertyValues) pvs-->Line_23 $$ original = mpvs.getPropertyValueList()[ FD ]
Line_35 $$ if (pv.isConverted()) -->Line_38 $$ String propertyName = pv.getName()[ CD ]
Line_40 $$ Object resolvedValue = valueResolver.resolveValueIfNecessary(pv, originalValue)-->Line_44 $$ convertedValue = convertForProperty(resolvedValue, propertyName, bw, converter)[ FD ]
Line_51 $$ if (convertible && originalValue instanceof TypedStringValue && !((TypedStringValue) originalValue).isDynamic() && !(convertedValue instanceof Collection || ObjectUtils.isArray(convertedValue))) -->Line_56 $$ deepCopy.add(new PropertyValue(pv, convertedValue))[ CD ]
Line_38 $$ String propertyName = pv.getName()-->Line_44 $$ convertedValue = convertForProperty(resolvedValue, propertyName, bw, converter)[ FD ]
Line_2 $$ protected void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) -->Line_7 $$ List<PropertyValue> original[ CD ]
Line_35 $$ if (pv.isConverted()) -->Line_43 $$ if (convertible) [ CD ]
Line_2 $$ protected void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) -->Line_17 $$ bw.setPropertyValues(mpvs)[ FD ]
Line_2 $$ protected void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) -->Line_29 $$ converter = bw[ FD ]
Line_27 $$ TypeConverter converter = getCustomTypeConverter()-->Line_44 $$ convertedValue = convertForProperty(resolvedValue, propertyName, bw, converter)[ FD ]
Line_2 $$ protected void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) -->Line_6 $$ MutablePropertyValues mpvs = null[ CD ]
Line_2 $$ protected void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) -->Line_13 $$ if (pvs instanceof MutablePropertyValues) [ CD ]
Line_44 $$ convertedValue = convertForProperty(resolvedValue, propertyName, bw, converter)-->Line_48 $$ pv.setConvertedValue(convertedValue)[ FD ]
Line_29 $$ converter = bw-->Line_44 $$ convertedValue = convertForProperty(resolvedValue, propertyName, bw, converter)[ FD ]
Line_41 $$ Object convertedValue = resolvedValue-->Line_44 $$ convertedValue = convertForProperty(resolvedValue, propertyName, bw, converter)[ FD ]
Line_6 $$ MutablePropertyValues mpvs = null-->Line_14 $$ mpvs = (MutablePropertyValues) pvs[ FD ]
Line_6 $$ MutablePropertyValues mpvs = null-->Line_17 $$ bw.setPropertyValues(mpvs)[ FD ]
Line_8 $$ if (System.getSecurityManager() != null) -->Line_9 $$ if (bw instanceof BeanWrapperImpl) [ CD ]
Line_34 $$ for (PropertyValue pv : original) -->Line_38 $$ String propertyName = pv.getName()[ FD ]
Line_47 $$ if (convertible) -->Line_48 $$ pv.setConvertedValue(convertedValue)[ CD ]
Line_46 $$ if (resolvedValue == originalValue) -->Line_50 $$ deepCopy.add(pv)[ CD ]
Line_32 $$ List<PropertyValue> deepCopy = new ArrayList<PropertyValue>(original.size())-->Line_56 $$ deepCopy.add(new PropertyValue(pv, convertedValue))[ FD ]
Line_13 $$ if (pvs instanceof MutablePropertyValues) -->Line_23 $$ original = mpvs.getPropertyValueList()[ CD ]
Line_35 $$ if (pv.isConverted()) -->Line_46 $$ if (resolvedValue == originalValue) [ CD ]
Line_55 $$ resolveNecessary = true-->Line_60 $$ if (mpvs != null && !resolveNecessary) [ FD ]
Line_2 $$ protected void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) -->Line_9 $$ if (bw instanceof BeanWrapperImpl) [ FD ]
Line_41 $$ Object convertedValue = resolvedValue-->Line_52 $$ pv.setConvertedValue(convertedValue)[ FD ]
Line_2 $$ protected void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) -->Line_44 $$ convertedValue = convertForProperty(resolvedValue, propertyName, bw, converter)[ FD ]
Line_25 $$ original = Arrays.asList(pvs.getPropertyValues())-->Line_32 $$ List<PropertyValue> deepCopy = new ArrayList<PropertyValue>(original.size())[ FD ]
Line_32 $$ List<PropertyValue> deepCopy = new ArrayList<PropertyValue>(original.size())-->Line_53 $$ deepCopy.add(pv)[ FD ]
Line_23 $$ original = mpvs.getPropertyValueList()-->Line_32 $$ List<PropertyValue> deepCopy = new ArrayList<PropertyValue>(original.size())[ FD ]
Line_34 $$ for (PropertyValue pv : original) -->Line_40 $$ Object resolvedValue = valueResolver.resolveValueIfNecessary(pv, originalValue)[ FD ]
Line_9 $$ if (bw instanceof BeanWrapperImpl) -->Line_10 $$ ((BeanWrapperImpl) bw).setSecurityContext(getAccessControlContext())[ CD ]
Line_6 $$ MutablePropertyValues mpvs = null-->Line_23 $$ original = mpvs.getPropertyValueList()[ FD ]
Line_33 $$ boolean resolveNecessary = false-->Line_60 $$ if (mpvs != null && !resolveNecessary) [ FD ]
Line_2 $$ protected void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) -->Line_8 $$ if (System.getSecurityManager() != null) [ CD ]
Line_60 $$ if (mpvs != null && !resolveNecessary) -->Line_61 $$ mpvs.setConverted()[ CD ]
Line_3 $$ if (pvs == null || pvs.isEmpty()) -->Line_4 $$ return[ CD ]
Line_39 $$ Object originalValue = pv.getValue()-->Line_46 $$ if (resolvedValue == originalValue) [ FD ]
Line_34 $$ for (PropertyValue pv : original) -->Line_36 $$ deepCopy.add(pv)[ FD ]
Line_2 $$ protected void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) -->Line_27 $$ TypeConverter converter = getCustomTypeConverter()[ CD ]
Line_35 $$ if (pv.isConverted()) -->Line_36 $$ deepCopy.add(pv)[ CD ]
Line_34 $$ for (PropertyValue pv : original) -->Line_53 $$ deepCopy.add(pv)[ FD ]
Line_14 $$ mpvs = (MutablePropertyValues) pvs-->Line_61 $$ mpvs.setConverted()[ FD ]
Line_2 $$ protected void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) -->Line_3 $$ if (pvs == null || pvs.isEmpty()) [ CD ]
Line_2 $$ protected void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) -->Line_66 $$ throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Error setting property values", ex)[ FD ]
Line_28 $$ if (converter == null) -->Line_29 $$ converter = bw[ CD ]
Line_41 $$ Object convertedValue = resolvedValue-->Line_48 $$ pv.setConvertedValue(convertedValue)[ FD ]
Line_34 $$ for (PropertyValue pv : original) -->Line_50 $$ deepCopy.add(pv)[ FD ]
Line_44 $$ convertedValue = convertForProperty(resolvedValue, propertyName, bw, converter)-->Line_51 $$ if (convertible && originalValue instanceof TypedStringValue && !((TypedStringValue) originalValue).isDynamic() && !(convertedValue instanceof Collection || ObjectUtils.isArray(convertedValue))) [ FD ]
Line_7 $$ List<PropertyValue> original-->Line_32 $$ List<PropertyValue> deepCopy = new ArrayList<PropertyValue>(original.size())[ FD ]
Line_34 $$ for (PropertyValue pv : original) -->Line_48 $$ pv.setConvertedValue(convertedValue)[ FD ]
Line_34 $$ for (PropertyValue pv : original) -->Line_35 $$ if (pv.isConverted()) [ FD ]
Line_35 $$ if (pv.isConverted()) -->Line_41 $$ Object convertedValue = resolvedValue[ CD ]
Line_34 $$ for (PropertyValue pv : original) -->Line_39 $$ Object originalValue = pv.getValue()[ FD ]
Line_14 $$ mpvs = (MutablePropertyValues) pvs-->Line_15 $$ if (mpvs.isConverted()) [ FD ]
Line_23 $$ original = mpvs.getPropertyValueList()-->Line_25 $$ original = Arrays.asList(pvs.getPropertyValues())[ FD ]
Line_2 $$ protected void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) -->Line_32 $$ List<PropertyValue> deepCopy = new ArrayList<PropertyValue>(original.size())[ CD ]
Line_6 $$ MutablePropertyValues mpvs = null-->Line_61 $$ mpvs.setConverted()[ FD ]
Line_51 $$ if (convertible && originalValue instanceof TypedStringValue && !((TypedStringValue) originalValue).isDynamic() && !(convertedValue instanceof Collection || ObjectUtils.isArray(convertedValue))) -->Line_55 $$ resolveNecessary = true[ CD ]
Line_7 $$ List<PropertyValue> original-->Line_25 $$ original = Arrays.asList(pvs.getPropertyValues())[ FD ]
Line_2 $$ protected void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) -->Line_31 $$ BeanDefinitionValueResolver valueResolver = new BeanDefinitionValueResolver(this, beanName, mbd, converter)[ CD ]
Line_6 $$ MutablePropertyValues mpvs = null-->Line_15 $$ if (mpvs.isConverted()) [ FD ]
Line_44 $$ convertedValue = convertForProperty(resolvedValue, propertyName, bw, converter)-->Line_52 $$ pv.setConvertedValue(convertedValue)[ FD ]
Line_35 $$ if (pv.isConverted()) -->Line_40 $$ Object resolvedValue = valueResolver.resolveValueIfNecessary(pv, originalValue)[ CD ]
Line_38 $$ String propertyName = pv.getName()-->Line_42 $$ boolean convertible = bw.isWritableProperty(propertyName) && !PropertyAccessorUtils.isNestedOrIndexedProperty(propertyName)[ FD ]
Line_13 $$ if (pvs instanceof MutablePropertyValues) -->Line_25 $$ original = Arrays.asList(pvs.getPropertyValues())[ CD ]
Line_2 $$ protected void applyPropertyValues(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs) -->Line_60 $$ if (mpvs != null && !resolveNecessary) [ CD ]
Line_14 $$ mpvs = (MutablePropertyValues) pvs-->Line_17 $$ bw.setPropertyValues(mpvs)[ FD ]
Line_43 $$ if (convertible) -->Line_44 $$ convertedValue = convertForProperty(resolvedValue, propertyName, bw, converter)[ CD ]
Line_33 $$ boolean resolveNecessary = false-->Line_55 $$ resolveNecessary = true[ FD ]
Line_13 $$ if (pvs instanceof MutablePropertyValues) -->Line_15 $$ if (mpvs.isConverted()) [ CD ]
Line_51 $$ if (convertible && originalValue instanceof TypedStringValue && !((TypedStringValue) originalValue).isDynamic() && !(convertedValue instanceof Collection || ObjectUtils.isArray(convertedValue))) -->Line_53 $$ deepCopy.add(pv)[ CD ]
Line_31 $$ BeanDefinitionValueResolver valueResolver = new BeanDefinitionValueResolver(this, beanName, mbd, converter)-->Line_40 $$ Object resolvedValue = valueResolver.resolveValueIfNecessary(pv, originalValue)[ FD ]
