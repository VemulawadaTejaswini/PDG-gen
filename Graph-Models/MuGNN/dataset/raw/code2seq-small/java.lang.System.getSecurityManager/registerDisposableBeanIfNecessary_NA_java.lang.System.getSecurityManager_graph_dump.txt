Line_2 $$ protected void registerDisposableBeanIfNecessary(String beanName, Object bean, RootBeanDefinition mbd) -->Line_4 $$ if (!mbd.isPrototype() && requiresDestruction(bean, mbd)) [ CD ]
Line_2 $$ protected void registerDisposableBeanIfNecessary(String beanName, Object bean, RootBeanDefinition mbd) -->Line_5 $$ if (mbd.isSingleton()) [ FD ]
Line_5 $$ if (mbd.isSingleton()) -->Line_12 $$ scope.registerDestructionCallback(beanName, new DisposableBeanAdapter(bean, beanName, mbd, getBeanPostProcessors(), acc))[ CD ]
Line_8 $$ Scope scope = this.scopes.get(mbd.getScope())-->Line_12 $$ scope.registerDestructionCallback(beanName, new DisposableBeanAdapter(bean, beanName, mbd, getBeanPostProcessors(), acc))[ FD ]
Line_4 $$ if (!mbd.isPrototype() && requiresDestruction(bean, mbd)) -->Line_5 $$ if (mbd.isSingleton()) [ CD ]
Line_2 $$ protected void registerDisposableBeanIfNecessary(String beanName, Object bean, RootBeanDefinition mbd) -->Line_10 $$ throw new IllegalStateException("No Scope registered for scope name '" + mbd.getScope() + "'")[ FD ]
Line_8 $$ Scope scope = this.scopes.get(mbd.getScope())-->Line_9 $$ if (scope == null) [ FD ]
Line_5 $$ if (mbd.isSingleton()) -->Line_8 $$ Scope scope = this.scopes.get(mbd.getScope())[ CD ]
Line_2 $$ protected void registerDisposableBeanIfNecessary(String beanName, Object bean, RootBeanDefinition mbd) -->Line_6 $$ registerDisposableBean(beanName, new DisposableBeanAdapter(bean, beanName, mbd, getBeanPostProcessors(), acc))[ FD ]
Line_2 $$ protected void registerDisposableBeanIfNecessary(String beanName, Object bean, RootBeanDefinition mbd) -->Line_8 $$ Scope scope = this.scopes.get(mbd.getScope())[ FD ]
Line_5 $$ if (mbd.isSingleton()) -->Line_9 $$ if (scope == null) [ CD ]
Line_2 $$ protected void registerDisposableBeanIfNecessary(String beanName, Object bean, RootBeanDefinition mbd) -->Line_12 $$ scope.registerDestructionCallback(beanName, new DisposableBeanAdapter(bean, beanName, mbd, getBeanPostProcessors(), acc))[ FD ]
Line_2 $$ protected void registerDisposableBeanIfNecessary(String beanName, Object bean, RootBeanDefinition mbd) -->Line_4 $$ if (!mbd.isPrototype() && requiresDestruction(bean, mbd)) [ FD ]
Line_2 $$ protected void registerDisposableBeanIfNecessary(String beanName, Object bean, RootBeanDefinition mbd) -->Line_3 $$ AccessControlContext acc = (System.getSecurityManager() != null ? getAccessControlContext() : null)[ CD ]
Line_5 $$ if (mbd.isSingleton()) -->Line_6 $$ registerDisposableBean(beanName, new DisposableBeanAdapter(bean, beanName, mbd, getBeanPostProcessors(), acc))[ CD ]
