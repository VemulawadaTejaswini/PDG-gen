Line_28 $$ rateType = "MB/sec"-->Line_48 $$ rateType = "MB/sec"[ FD ]
Line_25 $$ if (measurementType.equals(BYTES_WRITTEN)) -->Line_29 $$ if (measurementType.equals(SUCCESSES)) [ CD ]
Line_32 $$ rateType = "successes/sec"-->Line_40 $$ rateType = "directory entries/sec"[ FD ]
Line_20 $$ if (mTaken > 0) -->Line_21 $$ NumberFormat formatter = Formatter.getDecimalFormatter()[ CD ]
Line_22 $$ for (String measurementType : combined.keySet()) -->Line_30 $$ Long succ = Long.parseLong(combined.get(measurementType).getValue().toString())[ FD ]
Line_29 $$ if (measurementType.equals(SUCCESSES)) -->Line_33 $$ if (measurementType.equals(FILES_CREATED)) [ CD ]
Line_8 $$ Map<String, OperationOutput> combined = new TreeMap<String, OperationOutput>()-->Line_10 $$ if (combined.containsKey(data.getMeasurementType())) [ FD ]
Line_27 $$ rate = (double) mbWritten / (double) (mTaken / 1000.0d)-->Line_47 $$ rate = (double) mbRead / (double) (mTaken / 1000.0d)[ FD ]
Line_36 $$ rateType = "files created/sec"-->Line_48 $$ rateType = "MB/sec"[ FD ]
Line_41 $$ if (measurementType.equals(OP_COUNT)) -->Line_42 $$ Long opCount = Long.parseLong(combined.get(measurementType).getValue().toString())[ CD ]
Line_22 $$ for (String measurementType : combined.keySet()) -->Line_26 $$ Long mbWritten = Long.parseLong(combined.get(measurementType).getValue().toString()) / (Constants.MEGABYTES)[ FD ]
Line_22 $$ for (String measurementType : combined.keySet()) -->Line_46 $$ Long mbRead = Long.parseLong(combined.get(measurementType).getValue().toString()) / (Constants.MEGABYTES)[ FD ]
Line_45 $$ if (measurementType.equals(BYTES_READ)) -->Line_47 $$ rate = (double) mbRead / (double) (mTaken / 1000.0d)[ CD ]
Line_45 $$ if (measurementType.equals(BYTES_READ)) -->Line_46 $$ Long mbRead = Long.parseLong(combined.get(measurementType).getValue().toString()) / (Constants.MEGABYTES)[ CD ]
Line_43 $$ rate = (double) opCount / (double) (mTaken / 1000.0d)-->Line_50 $$ if (rate != null) [ FD ]
Line_5 $$ for (OperationOutput data : input) -->Line_14 $$ combined.put(data.getMeasurementType(), data)[ FD ]
Line_29 $$ if (measurementType.equals(SUCCESSES)) -->Line_31 $$ rate = (double) succ / (double) (mTaken / 1000.0d)[ CD ]
Line_23 $$ Double rate = null-->Line_43 $$ rate = (double) opCount / (double) (mTaken / 1000.0d)[ FD ]
Line_27 $$ rate = (double) mbWritten / (double) (mTaken / 1000.0d)-->Line_50 $$ if (rate != null) [ FD ]
Line_23 $$ Double rate = null-->Line_35 $$ rate = (double) filesCreated / (double) (mTaken / 1000.0d)[ FD ]
Line_33 $$ if (measurementType.equals(FILES_CREATED)) -->Line_34 $$ Long filesCreated = Long.parseLong(combined.get(measurementType).getValue().toString())[ CD ]
Line_2 $$ void opReport(String operation, List<OperationOutput> input, PrintWriter os) -->Line_18 $$ if (timeTaken != null) [ CD ]
Line_41 $$ if (measurementType.equals(OP_COUNT)) -->Line_43 $$ rate = (double) opCount / (double) (mTaken / 1000.0d)[ CD ]
Line_22 $$ for (String measurementType : combined.keySet()) -->Line_33 $$ if (measurementType.equals(FILES_CREATED)) [ FD ]
Line_8 $$ Map<String, OperationOutput> combined = new TreeMap<String, OperationOutput>()-->Line_26 $$ Long mbWritten = Long.parseLong(combined.get(measurementType).getValue().toString()) / (Constants.MEGABYTES)[ FD ]
Line_36 $$ rateType = "files created/sec"-->Line_40 $$ rateType = "directory entries/sec"[ FD ]
Line_18 $$ if (timeTaken != null) -->Line_19 $$ Long mTaken = Long.parseLong(timeTaken.getValue().toString())[ CD ]
Line_32 $$ rateType = "successes/sec"-->Line_44 $$ rateType = "operations/sec"[ FD ]
Line_10 $$ if (combined.containsKey(data.getMeasurementType())) -->Line_12 $$ combined.put(data.getMeasurementType(), OperationOutput.merge(curr, data))[ CD ]
Line_39 $$ rate = (double) entries / (double) (mTaken / 1000.0d)-->Line_43 $$ rate = (double) opCount / (double) (mTaken / 1000.0d)[ FD ]
Line_10 $$ if (combined.containsKey(data.getMeasurementType())) -->Line_14 $$ combined.put(data.getMeasurementType(), data)[ CD ]
Line_23 $$ Double rate = null-->Line_50 $$ if (rate != null) [ FD ]
Line_27 $$ rate = (double) mbWritten / (double) (mTaken / 1000.0d)-->Line_31 $$ rate = (double) succ / (double) (mTaken / 1000.0d)[ FD ]
Line_10 $$ if (combined.containsKey(data.getMeasurementType())) -->Line_11 $$ OperationOutput curr = combined.get(data.getMeasurementType())[ CD ]
Line_8 $$ Map<String, OperationOutput> combined = new TreeMap<String, OperationOutput>()-->Line_14 $$ combined.put(data.getMeasurementType(), data)[ FD ]
Line_23 $$ Double rate = null-->Line_39 $$ rate = (double) entries / (double) (mTaken / 1000.0d)[ FD ]
Line_31 $$ rate = (double) succ / (double) (mTaken / 1000.0d)-->Line_39 $$ rate = (double) entries / (double) (mTaken / 1000.0d)[ FD ]
Line_28 $$ rateType = "MB/sec"-->Line_40 $$ rateType = "directory entries/sec"[ FD ]
Line_35 $$ rate = (double) filesCreated / (double) (mTaken / 1000.0d)-->Line_39 $$ rate = (double) entries / (double) (mTaken / 1000.0d)[ FD ]
Line_2 $$ void opReport(String operation, List<OperationOutput> input, PrintWriter os) -->Line_3 $$ writeMessage("Basic report for operation type " + operation, os)[ FD ]
Line_45 $$ if (measurementType.equals(BYTES_READ)) -->Line_48 $$ rateType = "MB/sec"[ CD ]
Line_41 $$ if (measurementType.equals(OP_COUNT)) -->Line_45 $$ if (measurementType.equals(BYTES_READ)) [ CD ]
Line_33 $$ if (measurementType.equals(FILES_CREATED)) -->Line_35 $$ rate = (double) filesCreated / (double) (mTaken / 1000.0d)[ CD ]
Line_37 $$ if (measurementType.equals(DIR_ENTRIES)) -->Line_40 $$ rateType = "directory entries/sec"[ CD ]
Line_35 $$ rate = (double) filesCreated / (double) (mTaken / 1000.0d)-->Line_51 $$ writeMessage("Rate for measurement \"" + measurementType + "\" = " + formatter.format(rate) + " " + rateType, os)[ FD ]
Line_33 $$ if (measurementType.equals(FILES_CREATED)) -->Line_36 $$ rateType = "files created/sec"[ CD ]
Line_8 $$ Map<String, OperationOutput> combined = new TreeMap<String, OperationOutput>()-->Line_12 $$ combined.put(data.getMeasurementType(), OperationOutput.merge(curr, data))[ FD ]
Line_22 $$ for (String measurementType : combined.keySet()) -->Line_34 $$ Long filesCreated = Long.parseLong(combined.get(measurementType).getValue().toString())[ FD ]
Line_24 $$ String rateType = ""-->Line_48 $$ rateType = "MB/sec"[ FD ]
Line_35 $$ rate = (double) filesCreated / (double) (mTaken / 1000.0d)-->Line_47 $$ rate = (double) mbRead / (double) (mTaken / 1000.0d)[ FD ]
Line_18 $$ if (timeTaken != null) -->Line_20 $$ if (mTaken > 0) [ CD ]
Line_2 $$ void opReport(String operation, List<OperationOutput> input, PrintWriter os) -->Line_6 $$ writeMessage("Measurement \"" + data.getMeasurementType() + "\" = " + data.getValue(), os)[ FD ]
Line_35 $$ rate = (double) filesCreated / (double) (mTaken / 1000.0d)-->Line_43 $$ rate = (double) opCount / (double) (mTaken / 1000.0d)[ FD ]
Line_8 $$ Map<String, OperationOutput> combined = new TreeMap<String, OperationOutput>()-->Line_42 $$ Long opCount = Long.parseLong(combined.get(measurementType).getValue().toString())[ FD ]
Line_22 $$ for (String measurementType : combined.keySet()) -->Line_45 $$ if (measurementType.equals(BYTES_READ)) [ FD ]
Line_50 $$ if (rate != null) -->Line_51 $$ writeMessage("Rate for measurement \"" + measurementType + "\" = " + formatter.format(rate) + " " + rateType, os)[ CD ]
Line_27 $$ rate = (double) mbWritten / (double) (mTaken / 1000.0d)-->Line_35 $$ rate = (double) filesCreated / (double) (mTaken / 1000.0d)[ FD ]
Line_23 $$ Double rate = null-->Line_47 $$ rate = (double) mbRead / (double) (mTaken / 1000.0d)[ FD ]
Line_44 $$ rateType = "operations/sec"-->Line_48 $$ rateType = "MB/sec"[ FD ]
Line_2 $$ void opReport(String operation, List<OperationOutput> input, PrintWriter os) -->Line_51 $$ writeMessage("Rate for measurement \"" + measurementType + "\" = " + formatter.format(rate) + " " + rateType, os)[ FD ]
Line_32 $$ rateType = "successes/sec"-->Line_48 $$ rateType = "MB/sec"[ FD ]
Line_8 $$ Map<String, OperationOutput> combined = new TreeMap<String, OperationOutput>()-->Line_38 $$ Long entries = Long.parseLong(combined.get(measurementType).getValue().toString())[ FD ]
Line_40 $$ rateType = "directory entries/sec"-->Line_48 $$ rateType = "MB/sec"[ FD ]
Line_24 $$ String rateType = ""-->Line_28 $$ rateType = "MB/sec"[ FD ]
Line_8 $$ Map<String, OperationOutput> combined = new TreeMap<String, OperationOutput>()-->Line_17 $$ OperationOutput timeTaken = combined.get(OK_TIME_TAKEN)[ FD ]
Line_5 $$ for (OperationOutput data : input) -->Line_11 $$ OperationOutput curr = combined.get(data.getMeasurementType())[ FD ]
Line_22 $$ for (String measurementType : combined.keySet()) -->Line_42 $$ Long opCount = Long.parseLong(combined.get(measurementType).getValue().toString())[ FD ]
Line_47 $$ rate = (double) mbRead / (double) (mTaken / 1000.0d)-->Line_51 $$ writeMessage("Rate for measurement \"" + measurementType + "\" = " + formatter.format(rate) + " " + rateType, os)[ FD ]
Line_29 $$ if (measurementType.equals(SUCCESSES)) -->Line_30 $$ Long succ = Long.parseLong(combined.get(measurementType).getValue().toString())[ CD ]
Line_39 $$ rate = (double) entries / (double) (mTaken / 1000.0d)-->Line_47 $$ rate = (double) mbRead / (double) (mTaken / 1000.0d)[ FD ]
Line_28 $$ rateType = "MB/sec"-->Line_36 $$ rateType = "files created/sec"[ FD ]
Line_29 $$ if (measurementType.equals(SUCCESSES)) -->Line_32 $$ rateType = "successes/sec"[ CD ]
Line_40 $$ rateType = "directory entries/sec"-->Line_44 $$ rateType = "operations/sec"[ FD ]
Line_24 $$ String rateType = ""-->Line_44 $$ rateType = "operations/sec"[ FD ]
Line_23 $$ Double rate = null-->Line_31 $$ rate = (double) succ / (double) (mTaken / 1000.0d)[ FD ]
Line_37 $$ if (measurementType.equals(DIR_ENTRIES)) -->Line_38 $$ Long entries = Long.parseLong(combined.get(measurementType).getValue().toString())[ CD ]
Line_2 $$ void opReport(String operation, List<OperationOutput> input, PrintWriter os) -->Line_17 $$ OperationOutput timeTaken = combined.get(OK_TIME_TAKEN)[ CD ]
Line_37 $$ if (measurementType.equals(DIR_ENTRIES)) -->Line_39 $$ rate = (double) entries / (double) (mTaken / 1000.0d)[ CD ]
Line_8 $$ Map<String, OperationOutput> combined = new TreeMap<String, OperationOutput>()-->Line_46 $$ Long mbRead = Long.parseLong(combined.get(measurementType).getValue().toString()) / (Constants.MEGABYTES)[ FD ]
Line_31 $$ rate = (double) succ / (double) (mTaken / 1000.0d)-->Line_35 $$ rate = (double) filesCreated / (double) (mTaken / 1000.0d)[ FD ]
Line_31 $$ rate = (double) succ / (double) (mTaken / 1000.0d)-->Line_47 $$ rate = (double) mbRead / (double) (mTaken / 1000.0d)[ FD ]
Line_43 $$ rate = (double) opCount / (double) (mTaken / 1000.0d)-->Line_51 $$ writeMessage("Rate for measurement \"" + measurementType + "\" = " + formatter.format(rate) + " " + rateType, os)[ FD ]
Line_25 $$ if (measurementType.equals(BYTES_WRITTEN)) -->Line_27 $$ rate = (double) mbWritten / (double) (mTaken / 1000.0d)[ CD ]
Line_19 $$ Long mTaken = Long.parseLong(timeTaken.getValue().toString())-->Line_20 $$ if (mTaken > 0) [ FD ]
Line_24 $$ String rateType = ""-->Line_40 $$ rateType = "directory entries/sec"[ FD ]
Line_39 $$ rate = (double) entries / (double) (mTaken / 1000.0d)-->Line_51 $$ writeMessage("Rate for measurement \"" + measurementType + "\" = " + formatter.format(rate) + " " + rateType, os)[ FD ]
Line_17 $$ OperationOutput timeTaken = combined.get(OK_TIME_TAKEN)-->Line_18 $$ if (timeTaken != null) [ FD ]
Line_2 $$ void opReport(String operation, List<OperationOutput> input, PrintWriter os) -->Line_3 $$ writeMessage("Basic report for operation type " + operation, os)[ CD ]
Line_2 $$ void opReport(String operation, List<OperationOutput> input, PrintWriter os) -->Line_4 $$ writeMessage(getSectionDelimiter(), os)[ CD ]
Line_5 $$ for (OperationOutput data : input) -->Line_10 $$ if (combined.containsKey(data.getMeasurementType())) [ FD ]
Line_31 $$ rate = (double) succ / (double) (mTaken / 1000.0d)-->Line_50 $$ if (rate != null) [ FD ]
Line_32 $$ rateType = "successes/sec"-->Line_36 $$ rateType = "files created/sec"[ FD ]
Line_2 $$ void opReport(String operation, List<OperationOutput> input, PrintWriter os) -->Line_56 $$ writeMessage(getSectionDelimiter(), os)[ FD ]
Line_8 $$ Map<String, OperationOutput> combined = new TreeMap<String, OperationOutput>()-->Line_34 $$ Long filesCreated = Long.parseLong(combined.get(measurementType).getValue().toString())[ FD ]
Line_11 $$ OperationOutput curr = combined.get(data.getMeasurementType())-->Line_12 $$ combined.put(data.getMeasurementType(), OperationOutput.merge(curr, data))[ FD ]
Line_27 $$ rate = (double) mbWritten / (double) (mTaken / 1000.0d)-->Line_43 $$ rate = (double) opCount / (double) (mTaken / 1000.0d)[ FD ]
Line_31 $$ rate = (double) succ / (double) (mTaken / 1000.0d)-->Line_51 $$ writeMessage("Rate for measurement \"" + measurementType + "\" = " + formatter.format(rate) + " " + rateType, os)[ FD ]
Line_41 $$ if (measurementType.equals(OP_COUNT)) -->Line_44 $$ rateType = "operations/sec"[ CD ]
Line_28 $$ rateType = "MB/sec"-->Line_44 $$ rateType = "operations/sec"[ FD ]
Line_36 $$ rateType = "files created/sec"-->Line_44 $$ rateType = "operations/sec"[ FD ]
Line_22 $$ for (String measurementType : combined.keySet()) -->Line_29 $$ if (measurementType.equals(SUCCESSES)) [ FD ]
Line_2 $$ void opReport(String operation, List<OperationOutput> input, PrintWriter os) -->Line_56 $$ writeMessage(getSectionDelimiter(), os)[ CD ]
Line_22 $$ for (String measurementType : combined.keySet()) -->Line_41 $$ if (measurementType.equals(OP_COUNT)) [ FD ]
Line_5 $$ for (OperationOutput data : input) -->Line_12 $$ combined.put(data.getMeasurementType(), OperationOutput.merge(curr, data))[ FD ]
Line_22 $$ for (String measurementType : combined.keySet()) -->Line_25 $$ if (measurementType.equals(BYTES_WRITTEN)) [ FD ]
Line_2 $$ void opReport(String operation, List<OperationOutput> input, PrintWriter os) -->Line_4 $$ writeMessage(getSectionDelimiter(), os)[ FD ]
Line_8 $$ Map<String, OperationOutput> combined = new TreeMap<String, OperationOutput>()-->Line_11 $$ OperationOutput curr = combined.get(data.getMeasurementType())[ FD ]
Line_22 $$ for (String measurementType : combined.keySet()) -->Line_38 $$ Long entries = Long.parseLong(combined.get(measurementType).getValue().toString())[ FD ]
Line_28 $$ rateType = "MB/sec"-->Line_32 $$ rateType = "successes/sec"[ FD ]
Line_37 $$ if (measurementType.equals(DIR_ENTRIES)) -->Line_41 $$ if (measurementType.equals(OP_COUNT)) [ CD ]
Line_25 $$ if (measurementType.equals(BYTES_WRITTEN)) -->Line_26 $$ Long mbWritten = Long.parseLong(combined.get(measurementType).getValue().toString()) / (Constants.MEGABYTES)[ CD ]
Line_43 $$ rate = (double) opCount / (double) (mTaken / 1000.0d)-->Line_47 $$ rate = (double) mbRead / (double) (mTaken / 1000.0d)[ FD ]
Line_31 $$ rate = (double) succ / (double) (mTaken / 1000.0d)-->Line_43 $$ rate = (double) opCount / (double) (mTaken / 1000.0d)[ FD ]
Line_35 $$ rate = (double) filesCreated / (double) (mTaken / 1000.0d)-->Line_50 $$ if (rate != null) [ FD ]
Line_23 $$ Double rate = null-->Line_27 $$ rate = (double) mbWritten / (double) (mTaken / 1000.0d)[ FD ]
Line_27 $$ rate = (double) mbWritten / (double) (mTaken / 1000.0d)-->Line_39 $$ rate = (double) entries / (double) (mTaken / 1000.0d)[ FD ]
Line_39 $$ rate = (double) entries / (double) (mTaken / 1000.0d)-->Line_50 $$ if (rate != null) [ FD ]
Line_23 $$ Double rate = null-->Line_51 $$ writeMessage("Rate for measurement \"" + measurementType + "\" = " + formatter.format(rate) + " " + rateType, os)[ FD ]
Line_22 $$ for (String measurementType : combined.keySet()) -->Line_37 $$ if (measurementType.equals(DIR_ENTRIES)) [ FD ]
Line_47 $$ rate = (double) mbRead / (double) (mTaken / 1000.0d)-->Line_50 $$ if (rate != null) [ FD ]
Line_24 $$ String rateType = ""-->Line_36 $$ rateType = "files created/sec"[ FD ]
Line_33 $$ if (measurementType.equals(FILES_CREATED)) -->Line_37 $$ if (measurementType.equals(DIR_ENTRIES)) [ CD ]
Line_21 $$ NumberFormat formatter = Formatter.getDecimalFormatter()-->Line_51 $$ writeMessage("Rate for measurement \"" + measurementType + "\" = " + formatter.format(rate) + " " + rateType, os)[ FD ]
Line_2 $$ void opReport(String operation, List<OperationOutput> input, PrintWriter os) -->Line_8 $$ Map<String, OperationOutput> combined = new TreeMap<String, OperationOutput>()[ CD ]
Line_24 $$ String rateType = ""-->Line_32 $$ rateType = "successes/sec"[ FD ]
Line_17 $$ OperationOutput timeTaken = combined.get(OK_TIME_TAKEN)-->Line_19 $$ Long mTaken = Long.parseLong(timeTaken.getValue().toString())[ FD ]
Line_8 $$ Map<String, OperationOutput> combined = new TreeMap<String, OperationOutput>()-->Line_30 $$ Long succ = Long.parseLong(combined.get(measurementType).getValue().toString())[ FD ]
Line_27 $$ rate = (double) mbWritten / (double) (mTaken / 1000.0d)-->Line_51 $$ writeMessage("Rate for measurement \"" + measurementType + "\" = " + formatter.format(rate) + " " + rateType, os)[ FD ]
Line_8 $$ Map<String, OperationOutput> combined = new TreeMap<String, OperationOutput>()-->Line_22 $$ for (String measurementType : combined.keySet()) [ FD ]
Line_5 $$ for (OperationOutput data : input) -->Line_6 $$ writeMessage("Measurement \"" + data.getMeasurementType() + "\" = " + data.getValue(), os)[ FD ]
Line_25 $$ if (measurementType.equals(BYTES_WRITTEN)) -->Line_28 $$ rateType = "MB/sec"[ CD ]
