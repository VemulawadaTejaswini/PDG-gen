Line_7 $$ if (unreachableNodes.contains(endpoint))-->Line_8 $$ status = "D"[ CD ]
Line_12 $$ state = "J"-->Line_29 $$ System.out.printf(fmt, status, state, endpointDns, load, strOwns, hostID, tokens.get(0).token, rack)[ FD ]
Line_4 $$ fmt = getFormat(hasEffectiveOwns, isTokenPerNode)-->Line_31 $$ System.out.printf(fmt, status, state, endpointDns, load, tokens.size(), strOwns, hostID, rack)[ FD ]
Line_3 $$ String status, state, load, strOwns, hostID, rack, fmt-->Line_20 $$ strOwns = owns != null && hasEffectiveOwns ? new DecimalFormat("##0.0%").format(owns) : "?"[ FD ]
Line_3 $$ String status, state, load, strOwns, hostID, rack, fmt-->Line_8 $$ status = "D"[ FD ]
Line_6 $$ status = "U"-->Line_8 $$ status = "D"[ FD ]
Line_10 $$ status = "?"-->Line_29 $$ System.out.printf(fmt, status, state, endpointDns, load, strOwns, hostID, tokens.get(0).token, rack)[ FD ]
Line_2 $$ private void printNode(String endpoint, Float owns, List<HostStat> tokens, boolean hasEffectiveOwns, boolean isTokenPerNode) -->Line_19 $$ load = loadMap.containsKey(endpoint) ? loadMap.get(endpoint) : "?"[ FD ]
Line_11 $$ if (joiningNodes.contains(endpoint))-->Line_12 $$ state = "J"[ CD ]
Line_3 $$ String status, state, load, strOwns, hostID, rack, fmt-->Line_31 $$ System.out.printf(fmt, status, state, endpointDns, load, tokens.size(), strOwns, hostID, rack)[ FD ]
Line_2 $$ private void printNode(String endpoint, Float owns, List<HostStat> tokens, boolean hasEffectiveOwns, boolean isTokenPerNode) -->Line_29 $$ System.out.printf(fmt, status, state, endpointDns, load, strOwns, hostID, tokens.get(0).token, rack)[ FD ]
Line_12 $$ state = "J"-->Line_14 $$ state = "L"[ FD ]
Line_19 $$ load = loadMap.containsKey(endpoint) ? loadMap.get(endpoint) : "?"-->Line_31 $$ System.out.printf(fmt, status, state, endpointDns, load, tokens.size(), strOwns, hostID, rack)[ FD ]
Line_28 $$ if (isTokenPerNode)-->Line_29 $$ System.out.printf(fmt, status, state, endpointDns, load, strOwns, hostID, tokens.get(0).token, rack)[ CD ]
Line_14 $$ state = "L"-->Line_18 $$ state = "N"[ FD ]
Line_19 $$ load = loadMap.containsKey(endpoint) ? loadMap.get(endpoint) : "?"-->Line_29 $$ System.out.printf(fmt, status, state, endpointDns, load, strOwns, hostID, tokens.get(0).token, rack)[ FD ]
Line_3 $$ String status, state, load, strOwns, hostID, rack, fmt-->Line_23 $$ rack = epSnitchInfo.getRack(endpoint)[ FD ]
Line_3 $$ String status, state, load, strOwns, hostID, rack, fmt-->Line_10 $$ status = "?"[ FD ]
Line_2 $$ private void printNode(String endpoint, Float owns, List<HostStat> tokens, boolean hasEffectiveOwns, boolean isTokenPerNode) -->Line_20 $$ strOwns = owns != null && hasEffectiveOwns ? new DecimalFormat("##0.0%").format(owns) : "?"[ CD ]
Line_6 $$ status = "U"-->Line_10 $$ status = "?"[ FD ]
Line_2 $$ private void printNode(String endpoint, Float owns, List<HostStat> tokens, boolean hasEffectiveOwns, boolean isTokenPerNode) -->Line_23 $$ rack = epSnitchInfo.getRack(endpoint)[ FD ]
Line_2 $$ private void printNode(String endpoint, Float owns, List<HostStat> tokens, boolean hasEffectiveOwns, boolean isTokenPerNode) -->Line_31 $$ System.out.printf(fmt, status, state, endpointDns, load, tokens.size(), strOwns, hostID, rack)[ FD ]
Line_27 $$ String endpointDns = tokens.get(0).ipOrDns()-->Line_29 $$ System.out.printf(fmt, status, state, endpointDns, load, strOwns, hostID, tokens.get(0).token, rack)[ FD ]
Line_8 $$ status = "D"-->Line_10 $$ status = "?"[ FD ]
Line_2 $$ private void printNode(String endpoint, Float owns, List<HostStat> tokens, boolean hasEffectiveOwns, boolean isTokenPerNode) -->Line_4 $$ fmt = getFormat(hasEffectiveOwns, isTokenPerNode)[ FD ]
Line_2 $$ private void printNode(String endpoint, Float owns, List<HostStat> tokens, boolean hasEffectiveOwns, boolean isTokenPerNode) -->Line_4 $$ fmt = getFormat(hasEffectiveOwns, isTokenPerNode)[ CD ]
Line_3 $$ String status, state, load, strOwns, hostID, rack, fmt-->Line_6 $$ status = "U"[ FD ]
Line_10 $$ status = "?"-->Line_31 $$ System.out.printf(fmt, status, state, endpointDns, load, tokens.size(), strOwns, hostID, rack)[ FD ]
Line_2 $$ private void printNode(String endpoint, Float owns, List<HostStat> tokens, boolean hasEffectiveOwns, boolean isTokenPerNode) -->Line_5 $$ if (liveNodes.contains(endpoint))[ FD ]
Line_5 $$ if (liveNodes.contains(endpoint))-->Line_7 $$ if (unreachableNodes.contains(endpoint))[ CD ]
Line_2 $$ private void printNode(String endpoint, Float owns, List<HostStat> tokens, boolean hasEffectiveOwns, boolean isTokenPerNode) -->Line_27 $$ String endpointDns = tokens.get(0).ipOrDns()[ FD ]
Line_14 $$ state = "L"-->Line_29 $$ System.out.printf(fmt, status, state, endpointDns, load, strOwns, hostID, tokens.get(0).token, rack)[ FD ]
Line_28 $$ if (isTokenPerNode)-->Line_31 $$ System.out.printf(fmt, status, state, endpointDns, load, tokens.size(), strOwns, hostID, rack)[ CD ]
Line_13 $$ if (leavingNodes.contains(endpoint))-->Line_14 $$ state = "L"[ CD ]
Line_23 $$ rack = epSnitchInfo.getRack(endpoint)-->Line_31 $$ System.out.printf(fmt, status, state, endpointDns, load, tokens.size(), strOwns, hostID, rack)[ FD ]
Line_2 $$ private void printNode(String endpoint, Float owns, List<HostStat> tokens, boolean hasEffectiveOwns, boolean isTokenPerNode) -->Line_7 $$ if (unreachableNodes.contains(endpoint))[ FD ]
Line_8 $$ status = "D"-->Line_29 $$ System.out.printf(fmt, status, state, endpointDns, load, strOwns, hostID, tokens.get(0).token, rack)[ FD ]
Line_12 $$ state = "J"-->Line_31 $$ System.out.printf(fmt, status, state, endpointDns, load, tokens.size(), strOwns, hostID, rack)[ FD ]
Line_18 $$ state = "N"-->Line_29 $$ System.out.printf(fmt, status, state, endpointDns, load, strOwns, hostID, tokens.get(0).token, rack)[ FD ]
Line_2 $$ private void printNode(String endpoint, Float owns, List<HostStat> tokens, boolean hasEffectiveOwns, boolean isTokenPerNode) -->Line_3 $$ String status, state, load, strOwns, hostID, rack, fmt[ CD ]
Line_21 $$ hostID = hostIDMap.get(endpoint)-->Line_31 $$ System.out.printf(fmt, status, state, endpointDns, load, tokens.size(), strOwns, hostID, rack)[ FD ]
Line_12 $$ state = "J"-->Line_18 $$ state = "N"[ FD ]
Line_2 $$ private void printNode(String endpoint, Float owns, List<HostStat> tokens, boolean hasEffectiveOwns, boolean isTokenPerNode) -->Line_20 $$ strOwns = owns != null && hasEffectiveOwns ? new DecimalFormat("##0.0%").format(owns) : "?"[ FD ]
Line_14 $$ state = "L"-->Line_16 $$ state = "M"[ FD ]
Line_3 $$ String status, state, load, strOwns, hostID, rack, fmt-->Line_16 $$ state = "M"[ FD ]
Line_2 $$ private void printNode(String endpoint, Float owns, List<HostStat> tokens, boolean hasEffectiveOwns, boolean isTokenPerNode) -->Line_11 $$ if (joiningNodes.contains(endpoint))[ FD ]
Line_7 $$ if (unreachableNodes.contains(endpoint))-->Line_10 $$ status = "?"[ CD ]
Line_6 $$ status = "U"-->Line_31 $$ System.out.printf(fmt, status, state, endpointDns, load, tokens.size(), strOwns, hostID, rack)[ FD ]
Line_2 $$ private void printNode(String endpoint, Float owns, List<HostStat> tokens, boolean hasEffectiveOwns, boolean isTokenPerNode) -->Line_5 $$ if (liveNodes.contains(endpoint))[ CD ]
Line_27 $$ String endpointDns = tokens.get(0).ipOrDns()-->Line_31 $$ System.out.printf(fmt, status, state, endpointDns, load, tokens.size(), strOwns, hostID, rack)[ FD ]
Line_6 $$ status = "U"-->Line_29 $$ System.out.printf(fmt, status, state, endpointDns, load, strOwns, hostID, tokens.get(0).token, rack)[ FD ]
Line_20 $$ strOwns = owns != null && hasEffectiveOwns ? new DecimalFormat("##0.0%").format(owns) : "?"-->Line_29 $$ System.out.printf(fmt, status, state, endpointDns, load, strOwns, hostID, tokens.get(0).token, rack)[ FD ]
Line_2 $$ private void printNode(String endpoint, Float owns, List<HostStat> tokens, boolean hasEffectiveOwns, boolean isTokenPerNode) -->Line_21 $$ hostID = hostIDMap.get(endpoint)[ FD ]
Line_4 $$ fmt = getFormat(hasEffectiveOwns, isTokenPerNode)-->Line_29 $$ System.out.printf(fmt, status, state, endpointDns, load, strOwns, hostID, tokens.get(0).token, rack)[ FD ]
Line_3 $$ String status, state, load, strOwns, hostID, rack, fmt-->Line_29 $$ System.out.printf(fmt, status, state, endpointDns, load, strOwns, hostID, tokens.get(0).token, rack)[ FD ]
Line_21 $$ hostID = hostIDMap.get(endpoint)-->Line_29 $$ System.out.printf(fmt, status, state, endpointDns, load, strOwns, hostID, tokens.get(0).token, rack)[ FD ]
Line_18 $$ state = "N"-->Line_31 $$ System.out.printf(fmt, status, state, endpointDns, load, tokens.size(), strOwns, hostID, rack)[ FD ]
Line_5 $$ if (liveNodes.contains(endpoint))-->Line_6 $$ status = "U"[ CD ]
Line_3 $$ String status, state, load, strOwns, hostID, rack, fmt-->Line_14 $$ state = "L"[ FD ]
Line_2 $$ private void printNode(String endpoint, Float owns, List<HostStat> tokens, boolean hasEffectiveOwns, boolean isTokenPerNode) -->Line_28 $$ if (isTokenPerNode)[ CD ]
Line_11 $$ if (joiningNodes.contains(endpoint))-->Line_13 $$ if (leavingNodes.contains(endpoint))[ CD ]
Line_14 $$ state = "L"-->Line_31 $$ System.out.printf(fmt, status, state, endpointDns, load, tokens.size(), strOwns, hostID, rack)[ FD ]
Line_16 $$ state = "M"-->Line_29 $$ System.out.printf(fmt, status, state, endpointDns, load, strOwns, hostID, tokens.get(0).token, rack)[ FD ]
Line_2 $$ private void printNode(String endpoint, Float owns, List<HostStat> tokens, boolean hasEffectiveOwns, boolean isTokenPerNode) -->Line_27 $$ String endpointDns = tokens.get(0).ipOrDns()[ CD ]
Line_2 $$ private void printNode(String endpoint, Float owns, List<HostStat> tokens, boolean hasEffectiveOwns, boolean isTokenPerNode) -->Line_21 $$ hostID = hostIDMap.get(endpoint)[ CD ]
Line_16 $$ state = "M"-->Line_31 $$ System.out.printf(fmt, status, state, endpointDns, load, tokens.size(), strOwns, hostID, rack)[ FD ]
Line_3 $$ String status, state, load, strOwns, hostID, rack, fmt-->Line_4 $$ fmt = getFormat(hasEffectiveOwns, isTokenPerNode)[ FD ]
Line_16 $$ state = "M"-->Line_18 $$ state = "N"[ FD ]
Line_13 $$ if (leavingNodes.contains(endpoint))-->Line_15 $$ if (movingNodes.contains(endpoint))[ CD ]
Line_8 $$ status = "D"-->Line_31 $$ System.out.printf(fmt, status, state, endpointDns, load, tokens.size(), strOwns, hostID, rack)[ FD ]
Line_3 $$ String status, state, load, strOwns, hostID, rack, fmt-->Line_18 $$ state = "N"[ FD ]
Line_2 $$ private void printNode(String endpoint, Float owns, List<HostStat> tokens, boolean hasEffectiveOwns, boolean isTokenPerNode) -->Line_15 $$ if (movingNodes.contains(endpoint))[ FD ]
Line_12 $$ state = "J"-->Line_16 $$ state = "M"[ FD ]
Line_15 $$ if (movingNodes.contains(endpoint))-->Line_18 $$ state = "N"[ CD ]
Line_23 $$ rack = epSnitchInfo.getRack(endpoint)-->Line_29 $$ System.out.printf(fmt, status, state, endpointDns, load, strOwns, hostID, tokens.get(0).token, rack)[ FD ]
Line_3 $$ String status, state, load, strOwns, hostID, rack, fmt-->Line_21 $$ hostID = hostIDMap.get(endpoint)[ FD ]
Line_20 $$ strOwns = owns != null && hasEffectiveOwns ? new DecimalFormat("##0.0%").format(owns) : "?"-->Line_31 $$ System.out.printf(fmt, status, state, endpointDns, load, tokens.size(), strOwns, hostID, rack)[ FD ]
Line_15 $$ if (movingNodes.contains(endpoint))-->Line_16 $$ state = "M"[ CD ]
Line_2 $$ private void printNode(String endpoint, Float owns, List<HostStat> tokens, boolean hasEffectiveOwns, boolean isTokenPerNode) -->Line_11 $$ if (joiningNodes.contains(endpoint))[ CD ]
Line_3 $$ String status, state, load, strOwns, hostID, rack, fmt-->Line_19 $$ load = loadMap.containsKey(endpoint) ? loadMap.get(endpoint) : "?"[ FD ]
Line_2 $$ private void printNode(String endpoint, Float owns, List<HostStat> tokens, boolean hasEffectiveOwns, boolean isTokenPerNode) -->Line_13 $$ if (leavingNodes.contains(endpoint))[ FD ]
Line_2 $$ private void printNode(String endpoint, Float owns, List<HostStat> tokens, boolean hasEffectiveOwns, boolean isTokenPerNode) -->Line_19 $$ load = loadMap.containsKey(endpoint) ? loadMap.get(endpoint) : "?"[ CD ]
Line_3 $$ String status, state, load, strOwns, hostID, rack, fmt-->Line_12 $$ state = "J"[ FD ]
