Line_8 $$ done = callback-->Line_16 $$ done.setDone()[ FD ]
Line_2 $$ public void typeAheadUntil(@NotNull ActionCallback callback) -->Line_7 $$ if (!Registry.is("type.ahead.logging.enabled")) [ CD ]
Line_6 $$ final ActionCallback done-->Line_35 $$ if (myTypeAheadRequestors.remove(done)) [ FD ]
Line_2 $$ public void typeAheadUntil(@NotNull ActionCallback callback) -->Line_27 $$ assertDispatchThread()[ CD ]
Line_7 $$ if (!Registry.is("type.ahead.logging.enabled")) -->Line_11 $$ final SimpleDateFormat dateFormat = new SimpleDateFormat("dd MMM yyyy HH:ss:SSS", Locale.US)[ CD ]
Line_7 $$ if (!Registry.is("type.ahead.logging.enabled")) -->Line_20 $$ callback.doWhenRejected(new Runnable() [ CD ]
Line_6 $$ final ActionCallback done-->Line_8 $$ done = callback[ FD ]
Line_13 $$ done = new ActionCallback()-->Line_35 $$ if (myTypeAheadRequestors.remove(done)) [ FD ]
Line_35 $$ if (myTypeAheadRequestors.remove(done)) -->Line_36 $$ restartIdleAlarm()[ CD ]
Line_13 $$ done = new ActionCallback()-->Line_29 $$ done.notify(new TimedOutCallback(Registry.intValue("actionSystem.commandProcessingTimeout"), "Typeahead request blocked", new Exception() [ FD ]
Line_2 $$ public void typeAheadUntil(@NotNull ActionCallback callback) -->Line_8 $$ done = callback[ FD ]
Line_8 $$ done = callback-->Line_35 $$ if (myTypeAheadRequestors.remove(done)) [ FD ]
Line_3 $$ if (!isTypeaheadEnabled())-->Line_4 $$ return[ CD ]
Line_14 $$ callback.doWhenDone(new Runnable() -->Line_17 $$ LOG.info(dateFormat.format(System.currentTimeMillis()) + "\tDone:     " + id)[ CD ]
Line_7 $$ if (!Registry.is("type.ahead.logging.enabled")) -->Line_10 $$ final String id = new Exception().getStackTrace()[2].getClassName()[ CD ]
Line_20 $$ callback.doWhenRejected(new Runnable() -->Line_23 $$ LOG.info(dateFormat.format(System.currentTimeMillis()) + "\tRejected: " + id)[ CD ]
Line_2 $$ public void typeAheadUntil(@NotNull ActionCallback callback) -->Line_29 $$ done.notify(new TimedOutCallback(Registry.intValue("actionSystem.commandProcessingTimeout"), "Typeahead request blocked", new Exception() [ CD ]
Line_7 $$ if (!Registry.is("type.ahead.logging.enabled")) -->Line_13 $$ done = new ActionCallback()[ CD ]
Line_6 $$ final ActionCallback done-->Line_16 $$ done.setDone()[ FD ]
Line_11 $$ final SimpleDateFormat dateFormat = new SimpleDateFormat("dd MMM yyyy HH:ss:SSS", Locale.US)-->Line_23 $$ LOG.info(dateFormat.format(System.currentTimeMillis()) + "\tRejected: " + id)[ FD ]
Line_13 $$ done = new ActionCallback()-->Line_22 $$ done.setRejected()[ FD ]
Line_2 $$ public void typeAheadUntil(@NotNull ActionCallback callback) -->Line_5 $$ final long currentTime = System.currentTimeMillis()[ CD ]
Line_6 $$ final ActionCallback done-->Line_22 $$ done.setRejected()[ FD ]
Line_8 $$ done = callback-->Line_28 $$ myTypeAheadRequestors.add(done)[ FD ]
Line_6 $$ final ActionCallback done-->Line_29 $$ done.notify(new TimedOutCallback(Registry.intValue("actionSystem.commandProcessingTimeout"), "Typeahead request blocked", new Exception() [ FD ]
Line_29 $$ done.notify(new TimedOutCallback(Registry.intValue("actionSystem.commandProcessingTimeout"), "Typeahead request blocked", new Exception() -->Line_35 $$ if (myTypeAheadRequestors.remove(done)) [ CD ]
Line_7 $$ if (!Registry.is("type.ahead.logging.enabled")) -->Line_14 $$ callback.doWhenDone(new Runnable() [ CD ]
Line_11 $$ final SimpleDateFormat dateFormat = new SimpleDateFormat("dd MMM yyyy HH:ss:SSS", Locale.US)-->Line_17 $$ LOG.info(dateFormat.format(System.currentTimeMillis()) + "\tDone:     " + id)[ FD ]
Line_2 $$ public void typeAheadUntil(@NotNull ActionCallback callback) -->Line_3 $$ if (!isTypeaheadEnabled())[ CD ]
Line_8 $$ done = callback-->Line_22 $$ done.setRejected()[ FD ]
Line_7 $$ if (!Registry.is("type.ahead.logging.enabled")) -->Line_12 $$ LOG.info(dateFormat.format(System.currentTimeMillis()) + "\tStarted:  " + id)[ CD ]
Line_8 $$ done = callback-->Line_13 $$ done = new ActionCallback()[ FD ]
Line_2 $$ public void typeAheadUntil(@NotNull ActionCallback callback) -->Line_28 $$ myTypeAheadRequestors.add(done)[ CD ]
Line_13 $$ done = new ActionCallback()-->Line_16 $$ done.setDone()[ FD ]
Line_11 $$ final SimpleDateFormat dateFormat = new SimpleDateFormat("dd MMM yyyy HH:ss:SSS", Locale.US)-->Line_12 $$ LOG.info(dateFormat.format(System.currentTimeMillis()) + "\tStarted:  " + id)[ FD ]
Line_20 $$ callback.doWhenRejected(new Runnable() -->Line_22 $$ done.setRejected()[ CD ]
Line_13 $$ done = new ActionCallback()-->Line_28 $$ myTypeAheadRequestors.add(done)[ FD ]
Line_29 $$ done.notify(new TimedOutCallback(Registry.intValue("actionSystem.commandProcessingTimeout"), "Typeahead request blocked", new Exception() -->Line_31 $$ return "Time: " + (System.currentTimeMillis() - currentTime)[ CD ]
Line_2 $$ public void typeAheadUntil(@NotNull ActionCallback callback) -->Line_6 $$ final ActionCallback done[ CD ]
Line_2 $$ public void typeAheadUntil(@NotNull ActionCallback callback) -->Line_14 $$ callback.doWhenDone(new Runnable() [ FD ]
Line_2 $$ public void typeAheadUntil(@NotNull ActionCallback callback) -->Line_20 $$ callback.doWhenRejected(new Runnable() [ FD ]
Line_7 $$ if (!Registry.is("type.ahead.logging.enabled")) -->Line_8 $$ done = callback[ CD ]
Line_6 $$ final ActionCallback done-->Line_28 $$ myTypeAheadRequestors.add(done)[ FD ]
Line_14 $$ callback.doWhenDone(new Runnable() -->Line_16 $$ done.setDone()[ CD ]
Line_6 $$ final ActionCallback done-->Line_13 $$ done = new ActionCallback()[ FD ]
Line_8 $$ done = callback-->Line_29 $$ done.notify(new TimedOutCallback(Registry.intValue("actionSystem.commandProcessingTimeout"), "Typeahead request blocked", new Exception() [ FD ]
