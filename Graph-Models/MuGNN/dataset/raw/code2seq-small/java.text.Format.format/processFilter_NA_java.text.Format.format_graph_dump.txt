Line_23 $$ String contextPath = request.getContextPath()-->Line_26 $$ if (PropsValues.WEB_SERVER_PROXY_LEGACY_MODE && newSession && contextPath.equals(PortalUtil.getPathContext())) [ FD ]
Line_34 $$ long lastModified = getLastModified(request)-->Line_36 $$ if (lastModified > 0) [ FD ]
Line_30 $$ if (addHeader) -->Line_31 $$ response.addHeader(name, value)[ CD ]
Line_18 $$ boolean newSession = false-->Line_24 $$ if (StringUtil.equalsIgnoreCase(name, HttpHeaders.EXPIRES) && newSession) [ FD ]
Line_4 $$ while (enu.hasMoreElements()) -->Line_5 $$ String name = enu.nextElement()[ CD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_31 $$ response.addHeader(name, value)[ FD ]
Line_34 $$ long lastModified = getLastModified(request)-->Line_37 $$ response.setDateHeader(HttpHeaders.LAST_MODIFIED, lastModified)[ FD ]
Line_5 $$ String name = enu.nextElement()-->Line_10 $$ if (name.equals(_EXPIRES) && Validator.isNumber(value)) [ FD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_19 $$ HttpSession session = request.getSession(false)[ FD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_3 $$ Enumeration<String> enu = _filterConfig.getInitParameterNames()[ CD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_35 $$ long ifModifiedSince = request.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE)[ CD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_36 $$ if (lastModified > 0) [ CD ]
Line_34 $$ long lastModified = getLastModified(request)-->Line_38 $$ if (lastModified <= ifModifiedSince) [ FD ]
Line_12 $$ Calendar cal = new GregorianCalendar()-->Line_13 $$ cal.add(Calendar.SECOND, seconds)[ FD ]
Line_4 $$ while (enu.hasMoreElements()) -->Line_6 $$ if (_requestHeaderIgnoreInitParams.contains(name)) [ CD ]
Line_11 $$ int seconds = GetterUtil.getInteger(value)-->Line_13 $$ cal.add(Calendar.SECOND, seconds)[ FD ]
Line_4 $$ while (enu.hasMoreElements()) -->Line_9 $$ String value = _filterConfig.getInitParameter(name)[ CD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_35 $$ long ifModifiedSince = request.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE)[ FD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_37 $$ response.setDateHeader(HttpHeaders.LAST_MODIFIED, lastModified)[ FD ]
Line_17 $$ if (StringUtil.equalsIgnoreCase(name, HttpHeaders.CACHE_CONTROL) || StringUtil.equalsIgnoreCase(name, HttpHeaders.EXPIRES)) -->Line_20 $$ if ((session == null) || session.isNew()) [ CD ]
Line_17 $$ if (StringUtil.equalsIgnoreCase(name, HttpHeaders.CACHE_CONTROL) || StringUtil.equalsIgnoreCase(name, HttpHeaders.EXPIRES)) -->Line_18 $$ boolean newSession = false[ CD ]
Line_26 $$ if (PropsValues.WEB_SERVER_PROXY_LEGACY_MODE && newSession && contextPath.equals(PortalUtil.getPathContext())) -->Line_27 $$ addHeader = false[ CD ]
Line_3 $$ Enumeration<String> enu = _filterConfig.getInitParameterNames()-->Line_4 $$ while (enu.hasMoreElements()) [ FD ]
Line_17 $$ if (StringUtil.equalsIgnoreCase(name, HttpHeaders.CACHE_CONTROL) || StringUtil.equalsIgnoreCase(name, HttpHeaders.EXPIRES)) -->Line_23 $$ String contextPath = request.getContextPath()[ CD ]
Line_16 $$ boolean addHeader = true-->Line_25 $$ addHeader = false[ FD ]
Line_4 $$ while (enu.hasMoreElements()) -->Line_30 $$ if (addHeader) [ CD ]
Line_4 $$ while (enu.hasMoreElements()) -->Line_16 $$ boolean addHeader = true[ CD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_44 $$ processFilter(HeaderFilter.class.getName(), request, response, filterChain)[ CD ]
Line_10 $$ if (name.equals(_EXPIRES) && Validator.isNumber(value)) -->Line_13 $$ cal.add(Calendar.SECOND, seconds)[ CD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_34 $$ long lastModified = getLastModified(request)[ CD ]
Line_24 $$ if (StringUtil.equalsIgnoreCase(name, HttpHeaders.EXPIRES) && newSession) -->Line_26 $$ if (PropsValues.WEB_SERVER_PROXY_LEGACY_MODE && newSession && contextPath.equals(PortalUtil.getPathContext())) [ CD ]
Line_21 $$ newSession = true-->Line_24 $$ if (StringUtil.equalsIgnoreCase(name, HttpHeaders.EXPIRES) && newSession) [ FD ]
Line_5 $$ String name = enu.nextElement()-->Line_17 $$ if (StringUtil.equalsIgnoreCase(name, HttpHeaders.CACHE_CONTROL) || StringUtil.equalsIgnoreCase(name, HttpHeaders.EXPIRES)) [ FD ]
Line_25 $$ addHeader = false-->Line_27 $$ addHeader = false[ FD ]
Line_10 $$ if (name.equals(_EXPIRES) && Validator.isNumber(value)) -->Line_14 $$ value = _dateFormat.format(cal.getTime())[ CD ]
Line_16 $$ boolean addHeader = true-->Line_27 $$ addHeader = false[ FD ]
Line_35 $$ long ifModifiedSince = request.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE)-->Line_38 $$ if (lastModified <= ifModifiedSince) [ FD ]
Line_24 $$ if (StringUtil.equalsIgnoreCase(name, HttpHeaders.EXPIRES) && newSession) -->Line_25 $$ addHeader = false[ CD ]
Line_38 $$ if (lastModified <= ifModifiedSince) -->Line_39 $$ response.setDateHeader(HttpHeaders.LAST_MODIFIED, ifModifiedSince)[ CD ]
Line_14 $$ value = _dateFormat.format(cal.getTime())-->Line_10 $$ if (name.equals(_EXPIRES) && Validator.isNumber(value)) [ FD ]
Line_14 $$ value = _dateFormat.format(cal.getTime())-->Line_11 $$ int seconds = GetterUtil.getInteger(value)[ FD ]
Line_4 $$ while (enu.hasMoreElements()) -->Line_17 $$ if (StringUtil.equalsIgnoreCase(name, HttpHeaders.CACHE_CONTROL) || StringUtil.equalsIgnoreCase(name, HttpHeaders.EXPIRES)) [ CD ]
Line_38 $$ if (lastModified <= ifModifiedSince) -->Line_41 $$ return[ CD ]
Line_9 $$ String value = _filterConfig.getInitParameter(name)-->Line_10 $$ if (name.equals(_EXPIRES) && Validator.isNumber(value)) [ FD ]
Line_9 $$ String value = _filterConfig.getInitParameter(name)-->Line_31 $$ response.addHeader(name, value)[ FD ]
Line_36 $$ if (lastModified > 0) -->Line_37 $$ response.setDateHeader(HttpHeaders.LAST_MODIFIED, lastModified)[ CD ]
Line_9 $$ String value = _filterConfig.getInitParameter(name)-->Line_11 $$ int seconds = GetterUtil.getInteger(value)[ FD ]
Line_17 $$ if (StringUtil.equalsIgnoreCase(name, HttpHeaders.CACHE_CONTROL) || StringUtil.equalsIgnoreCase(name, HttpHeaders.EXPIRES)) -->Line_19 $$ HttpSession session = request.getSession(false)[ CD ]
Line_10 $$ if (name.equals(_EXPIRES) && Validator.isNumber(value)) -->Line_12 $$ Calendar cal = new GregorianCalendar()[ CD ]
Line_17 $$ if (StringUtil.equalsIgnoreCase(name, HttpHeaders.CACHE_CONTROL) || StringUtil.equalsIgnoreCase(name, HttpHeaders.EXPIRES)) -->Line_24 $$ if (StringUtil.equalsIgnoreCase(name, HttpHeaders.EXPIRES) && newSession) [ CD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_39 $$ response.setDateHeader(HttpHeaders.LAST_MODIFIED, ifModifiedSince)[ FD ]
Line_38 $$ if (lastModified <= ifModifiedSince) -->Line_40 $$ response.setStatus(HttpServletResponse.SC_NOT_MODIFIED)[ CD ]
Line_19 $$ HttpSession session = request.getSession(false)-->Line_20 $$ if ((session == null) || session.isNew()) [ FD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_40 $$ response.setStatus(HttpServletResponse.SC_NOT_MODIFIED)[ FD ]
Line_12 $$ Calendar cal = new GregorianCalendar()-->Line_14 $$ value = _dateFormat.format(cal.getTime())[ FD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_23 $$ String contextPath = request.getContextPath()[ FD ]
Line_5 $$ String name = enu.nextElement()-->Line_6 $$ if (_requestHeaderIgnoreInitParams.contains(name)) [ FD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_44 $$ processFilter(HeaderFilter.class.getName(), request, response, filterChain)[ FD ]
Line_10 $$ if (name.equals(_EXPIRES) && Validator.isNumber(value)) -->Line_11 $$ int seconds = GetterUtil.getInteger(value)[ CD ]
Line_18 $$ boolean newSession = false-->Line_21 $$ newSession = true[ FD ]
Line_9 $$ String value = _filterConfig.getInitParameter(name)-->Line_14 $$ value = _dateFormat.format(cal.getTime())[ FD ]
Line_4 $$ while (enu.hasMoreElements()) -->Line_10 $$ if (name.equals(_EXPIRES) && Validator.isNumber(value)) [ CD ]
Line_14 $$ value = _dateFormat.format(cal.getTime())-->Line_31 $$ response.addHeader(name, value)[ FD ]
Line_3 $$ Enumeration<String> enu = _filterConfig.getInitParameterNames()-->Line_5 $$ String name = enu.nextElement()[ FD ]
Line_36 $$ if (lastModified > 0) -->Line_38 $$ if (lastModified <= ifModifiedSince) [ CD ]
Line_5 $$ String name = enu.nextElement()-->Line_24 $$ if (StringUtil.equalsIgnoreCase(name, HttpHeaders.EXPIRES) && newSession) [ FD ]
Line_5 $$ String name = enu.nextElement()-->Line_31 $$ response.addHeader(name, value)[ FD ]
Line_20 $$ if ((session == null) || session.isNew()) -->Line_21 $$ newSession = true[ CD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_4 $$ while (enu.hasMoreElements()) [ CD ]
Line_5 $$ String name = enu.nextElement()-->Line_9 $$ String value = _filterConfig.getInitParameter(name)[ FD ]
Line_35 $$ long ifModifiedSince = request.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE)-->Line_39 $$ response.setDateHeader(HttpHeaders.LAST_MODIFIED, ifModifiedSince)[ FD ]
Line_2 $$ protected void processFilter(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception -->Line_34 $$ long lastModified = getLastModified(request)[ FD ]
