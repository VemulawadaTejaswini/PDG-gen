Line_6 $$ if (millisAgo < Time.HOUR) -->Line_11 $$ return LanguageUtil.format(locale, "x-minutes-ago", minutes, false)[ CD ]
Line_7 $$ long minutes = millisAgo / Time.MINUTE-->Line_11 $$ return LanguageUtil.format(locale, "x-minutes-ago", minutes, false)[ FD ]
Line_12 $$ if ((millisAgo / Time.HOUR) == 1) -->Line_13 $$ return LanguageUtil.get(locale, "about-an-hour-ago")[ CD ]
Line_3 $$ Format timeFormat = FastDateFormatFactoryUtil.getTime(locale, timeZone)-->Line_17 $$ return LanguageUtil.format(locale, "yesterday-at-x", timeFormat.format(milliseconds), false)[ FD ]
Line_5 $$ long millisAgo = System.currentTimeMillis() - milliseconds-->Line_6 $$ if (millisAgo < Time.HOUR) [ FD ]
Line_6 $$ if (millisAgo < Time.HOUR) -->Line_12 $$ if ((millisAgo / Time.HOUR) == 1) [ CD ]
Line_6 $$ if (millisAgo < Time.HOUR) -->Line_7 $$ long minutes = millisAgo / Time.MINUTE[ CD ]
Line_2 $$ public static String getRelativeTimeDescription(long milliseconds, Locale locale, TimeZone timeZone, Format dateTimeFormat) -->Line_4 $$ int daysBetween = DateUtil.getDaysBetween(new Date(milliseconds), new Date(), timeZone)[ CD ]
Line_4 $$ int daysBetween = DateUtil.getDaysBetween(new Date(milliseconds), new Date(), timeZone)-->Line_16 $$ if (daysBetween == 1) [ FD ]
Line_6 $$ if (millisAgo < Time.HOUR) -->Line_8 $$ if (minutes <= 1) [ CD ]
Line_2 $$ public static String getRelativeTimeDescription(long milliseconds, Locale locale, TimeZone timeZone, Format dateTimeFormat) -->Line_20 $$ dateTimeFormat = FastDateFormatFactoryUtil.getSimpleDateFormat("EEEE, MMMMM dd, yyyy", locale, timeZone)[ FD ]
Line_12 $$ if ((millisAgo / Time.HOUR) == 1) -->Line_14 $$ if ((millisAgo < Time.DAY) || (daysBetween == 0)) [ CD ]
Line_16 $$ if (daysBetween == 1) -->Line_17 $$ return LanguageUtil.format(locale, "yesterday-at-x", timeFormat.format(milliseconds), false)[ CD ]
Line_7 $$ long minutes = millisAgo / Time.MINUTE-->Line_8 $$ if (minutes <= 1) [ FD ]
Line_2 $$ public static String getRelativeTimeDescription(long milliseconds, Locale locale, TimeZone timeZone, Format dateTimeFormat) -->Line_15 $$ return LanguageUtil.format(locale, "x-hours-ago", (millisAgo / Time.HOUR), false)[ FD ]
Line_20 $$ dateTimeFormat = FastDateFormatFactoryUtil.getSimpleDateFormat("EEEE, MMMMM dd, yyyy", locale, timeZone)-->Line_22 $$ return dateTimeFormat.format(milliseconds)[ FD ]
Line_2 $$ public static String getRelativeTimeDescription(long milliseconds, Locale locale, TimeZone timeZone, Format dateTimeFormat) -->Line_3 $$ Format timeFormat = FastDateFormatFactoryUtil.getTime(locale, timeZone)[ CD ]
Line_2 $$ public static String getRelativeTimeDescription(long milliseconds, Locale locale, TimeZone timeZone, Format dateTimeFormat) -->Line_22 $$ return dateTimeFormat.format(milliseconds)[ FD ]
Line_2 $$ public static String getRelativeTimeDescription(long milliseconds, Locale locale, TimeZone timeZone, Format dateTimeFormat) -->Line_3 $$ Format timeFormat = FastDateFormatFactoryUtil.getTime(locale, timeZone)[ FD ]
Line_2 $$ public static String getRelativeTimeDescription(long milliseconds, Locale locale, TimeZone timeZone, Format dateTimeFormat) -->Line_19 $$ if (dateTimeFormat == null) [ FD ]
Line_19 $$ if (dateTimeFormat == null) -->Line_20 $$ dateTimeFormat = FastDateFormatFactoryUtil.getSimpleDateFormat("EEEE, MMMMM dd, yyyy", locale, timeZone)[ CD ]
Line_2 $$ public static String getRelativeTimeDescription(long milliseconds, Locale locale, TimeZone timeZone, Format dateTimeFormat) -->Line_5 $$ long millisAgo = System.currentTimeMillis() - milliseconds[ CD ]
Line_2 $$ public static String getRelativeTimeDescription(long milliseconds, Locale locale, TimeZone timeZone, Format dateTimeFormat) -->Line_13 $$ return LanguageUtil.get(locale, "about-an-hour-ago")[ FD ]
Line_2 $$ public static String getRelativeTimeDescription(long milliseconds, Locale locale, TimeZone timeZone, Format dateTimeFormat) -->Line_11 $$ return LanguageUtil.format(locale, "x-minutes-ago", minutes, false)[ FD ]
Line_2 $$ public static String getRelativeTimeDescription(long milliseconds, Locale locale, TimeZone timeZone, Format dateTimeFormat) -->Line_6 $$ if (millisAgo < Time.HOUR) [ CD ]
Line_2 $$ public static String getRelativeTimeDescription(long milliseconds, Locale locale, TimeZone timeZone, Format dateTimeFormat) -->Line_9 $$ return LanguageUtil.get(locale, "about-a-minute-ago")[ FD ]
Line_14 $$ if ((millisAgo < Time.DAY) || (daysBetween == 0)) -->Line_16 $$ if (daysBetween == 1) [ CD ]
Line_2 $$ public static String getRelativeTimeDescription(long milliseconds, Locale locale, TimeZone timeZone, Format dateTimeFormat) -->Line_19 $$ if (dateTimeFormat == null) [ CD ]
Line_14 $$ if ((millisAgo < Time.DAY) || (daysBetween == 0)) -->Line_15 $$ return LanguageUtil.format(locale, "x-hours-ago", (millisAgo / Time.HOUR), false)[ CD ]
Line_8 $$ if (minutes <= 1) -->Line_9 $$ return LanguageUtil.get(locale, "about-a-minute-ago")[ CD ]
Line_2 $$ public static String getRelativeTimeDescription(long milliseconds, Locale locale, TimeZone timeZone, Format dateTimeFormat) -->Line_17 $$ return LanguageUtil.format(locale, "yesterday-at-x", timeFormat.format(milliseconds), false)[ FD ]
Line_2 $$ public static String getRelativeTimeDescription(long milliseconds, Locale locale, TimeZone timeZone, Format dateTimeFormat) -->Line_4 $$ int daysBetween = DateUtil.getDaysBetween(new Date(milliseconds), new Date(), timeZone)[ FD ]
Line_2 $$ public static String getRelativeTimeDescription(long milliseconds, Locale locale, TimeZone timeZone, Format dateTimeFormat) -->Line_22 $$ return dateTimeFormat.format(milliseconds)[ CD ]
