Line_4 $$ JavaCompiler javaCompiler = ToolProvider.getSystemJavaCompiler()-->Line_10 $$ StandardJavaFileManager standardJavaFileManager = javaCompiler.getStandardFileManager(diagnosticCollector, null, null)[ FD ]
Line_27 $$ List<JavacErrorDetail> javacErrorDetails = new ArrayList()-->Line_31 $$ return javacErrorDetails.toArray(new JavacErrorDetail[javacErrorDetails.size()])[ FD ]
Line_2 $$ public JavacErrorDetail[] compile(String className, Nodes pageNodes) throws JasperException -->Line_10 $$ StandardJavaFileManager standardJavaFileManager = javaCompiler.getStandardFileManager(diagnosticCollector, null, null)[ CD ]
Line_2 $$ public JavacErrorDetail[] compile(String className, Nodes pageNodes) throws JasperException -->Line_27 $$ List<JavacErrorDetail> javacErrorDetails = new ArrayList()[ CD ]
Line_4 $$ JavaCompiler javaCompiler = ToolProvider.getSystemJavaCompiler()-->Line_5 $$ if (javaCompiler == null) [ FD ]
Line_9 $$ DiagnosticCollector<JavaFileObject> diagnosticCollector = new DiagnosticCollector()-->Line_17 $$ CompilationTask compilationTask = javaCompiler.getTask(null, javaFileManager, diagnosticCollector, options, null, Arrays.asList(new StringJavaFileObject(className.substring(className.lastIndexOf('.') + 1), charArrayWriter.toString())))[ FD ]
Line_16 $$ try (JavaFileManager javaFileManager = getJavaFileManager(standardJavaFileManager)) -->Line_17 $$ CompilationTask compilationTask = javaCompiler.getTask(null, javaFileManager, diagnosticCollector, options, null, Arrays.asList(new StringJavaFileObject(className.substring(className.lastIndexOf('.') + 1), charArrayWriter.toString())))[ FD ]
Line_4 $$ JavaCompiler javaCompiler = ToolProvider.getSystemJavaCompiler()-->Line_17 $$ CompilationTask compilationTask = javaCompiler.getTask(null, javaFileManager, diagnosticCollector, options, null, Arrays.asList(new StringJavaFileObject(className.substring(className.lastIndexOf('.') + 1), charArrayWriter.toString())))[ FD ]
Line_2 $$ public JavacErrorDetail[] compile(String className, Nodes pageNodes) throws JasperException -->Line_5 $$ if (javaCompiler == null) [ CD ]
Line_10 $$ StandardJavaFileManager standardJavaFileManager = javaCompiler.getStandardFileManager(diagnosticCollector, null, null)-->Line_16 $$ try (JavaFileManager javaFileManager = getJavaFileManager(standardJavaFileManager)) [ FD ]
Line_9 $$ DiagnosticCollector<JavaFileObject> diagnosticCollector = new DiagnosticCollector()-->Line_10 $$ StandardJavaFileManager standardJavaFileManager = javaCompiler.getStandardFileManager(diagnosticCollector, null, null)[ FD ]
Line_2 $$ public JavacErrorDetail[] compile(String className, Nodes pageNodes) throws JasperException -->Line_17 $$ CompilationTask compilationTask = javaCompiler.getTask(null, javaFileManager, diagnosticCollector, options, null, Arrays.asList(new StringJavaFileObject(className.substring(className.lastIndexOf('.') + 1), charArrayWriter.toString())))[ FD ]
Line_9 $$ DiagnosticCollector<JavaFileObject> diagnosticCollector = new DiagnosticCollector()-->Line_28 $$ for (Diagnostic<? extends JavaFileObject> diagnostic : diagnosticCollector.getDiagnostics()) [ FD ]
Line_10 $$ StandardJavaFileManager standardJavaFileManager = javaCompiler.getStandardFileManager(diagnosticCollector, null, null)-->Line_12 $$ standardJavaFileManager.setLocation(StandardLocation.CLASS_PATH, cpath)[ FD ]
Line_19 $$ for (BytecodeFile bytecodeFile : classFiles) -->Line_20 $$ rtctxt.setBytecode(bytecodeFile.getClassName(), bytecodeFile.getBytecode())[ FD ]
Line_18 $$ if (compilationTask.call()) -->Line_22 $$ return null[ CD ]
Line_27 $$ List<JavacErrorDetail> javacErrorDetails = new ArrayList()-->Line_29 $$ javacErrorDetails.add(ErrorDispatcher.createJavacError(javaFileName, pageNodes, new StringBuilder(diagnostic.getMessage(null)), (int) diagnostic.getLineNumber()))[ FD ]
Line_2 $$ public JavacErrorDetail[] compile(String className, Nodes pageNodes) throws JasperException -->Line_31 $$ return javacErrorDetails.toArray(new JavacErrorDetail[javacErrorDetails.size()])[ CD ]
Line_28 $$ for (Diagnostic<? extends JavaFileObject> diagnostic : diagnosticCollector.getDiagnostics()) -->Line_29 $$ javacErrorDetails.add(ErrorDispatcher.createJavacError(javaFileName, pageNodes, new StringBuilder(diagnostic.getMessage(null)), (int) diagnostic.getLineNumber()))[ FD ]
Line_2 $$ public JavacErrorDetail[] compile(String className, Nodes pageNodes) throws JasperException -->Line_29 $$ javacErrorDetails.add(ErrorDispatcher.createJavacError(javaFileName, pageNodes, new StringBuilder(diagnostic.getMessage(null)), (int) diagnostic.getLineNumber()))[ FD ]
Line_2 $$ public JavacErrorDetail[] compile(String className, Nodes pageNodes) throws JasperException -->Line_9 $$ DiagnosticCollector<JavaFileObject> diagnosticCollector = new DiagnosticCollector()[ CD ]
Line_17 $$ CompilationTask compilationTask = javaCompiler.getTask(null, javaFileManager, diagnosticCollector, options, null, Arrays.asList(new StringJavaFileObject(className.substring(className.lastIndexOf('.') + 1), charArrayWriter.toString())))-->Line_18 $$ if (compilationTask.call()) [ FD ]
Line_2 $$ public JavacErrorDetail[] compile(String className, Nodes pageNodes) throws JasperException -->Line_4 $$ JavaCompiler javaCompiler = ToolProvider.getSystemJavaCompiler()[ CD ]
Line_5 $$ if (javaCompiler == null) -->Line_6 $$ errDispatcher.jspError("jsp.error.nojdk")[ CD ]
