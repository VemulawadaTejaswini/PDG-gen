Line_3 $$ JavaCompiler.CompilationTask task = compiler.getTask(null, fileManager, diagnostics, options, null, compilationUnits)-->Line_4 $$ task.call()[ FD ]
Line_5 $$ for (Diagnostic<?> diagnostic : diagnostics.getDiagnostics()) -->Line_6 $$ log.debug(diagnostic.getMessage(null))[ FD ]
Line_2 $$ private void compileSources(List<String> options, JavaCompiler compiler, DiagnosticCollector<JavaFileObject> diagnostics, StandardJavaFileManager fileManager, Iterable<? extends JavaFileObject> compilationUnits) -->Line_5 $$ for (Diagnostic<?> diagnostic : diagnostics.getDiagnostics()) [ FD ]
Line_2 $$ private void compileSources(List<String> options, JavaCompiler compiler, DiagnosticCollector<JavaFileObject> diagnostics, StandardJavaFileManager fileManager, Iterable<? extends JavaFileObject> compilationUnits) -->Line_3 $$ JavaCompiler.CompilationTask task = compiler.getTask(null, fileManager, diagnostics, options, null, compilationUnits)[ CD ]
Line_2 $$ private void compileSources(List<String> options, JavaCompiler compiler, DiagnosticCollector<JavaFileObject> diagnostics, StandardJavaFileManager fileManager, Iterable<? extends JavaFileObject> compilationUnits) -->Line_3 $$ JavaCompiler.CompilationTask task = compiler.getTask(null, fileManager, diagnostics, options, null, compilationUnits)[ FD ]
Line_2 $$ private void compileSources(List<String> options, JavaCompiler compiler, DiagnosticCollector<JavaFileObject> diagnostics, StandardJavaFileManager fileManager, Iterable<? extends JavaFileObject> compilationUnits) -->Line_4 $$ task.call()[ CD ]
