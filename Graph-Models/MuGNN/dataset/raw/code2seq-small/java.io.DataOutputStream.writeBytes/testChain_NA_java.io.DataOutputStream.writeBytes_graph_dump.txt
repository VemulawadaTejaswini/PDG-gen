Line_10 $$ JobConf conf = createJobConf()-->Line_40 $$ RunningJob job = jc.submitJob(conf)[ FD ]
Line_2 $$ public void testChain() throws Exception -->Line_62 $$ assertTrue(getFlag(conf, "close.D"))[ CD ]
Line_4 $$ Path outDir = new Path("testing/chain/output")-->Line_8 $$ outDir = new Path(localPathRoot, outDir)[ FD ]
Line_2 $$ public void testChain() throws Exception -->Line_60 $$ assertTrue(getFlag(conf, "close.B"))[ CD ]
Line_34 $$ JobConf mapEConf = new JobConf(false)-->Line_35 $$ mapEConf.set("a", "E")[ FD ]
Line_5 $$ if (isLocalFS()) -->Line_8 $$ outDir = new Path(localPathRoot, outDir)[ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_39 $$ JobClient jc = new JobClient(conf)[ CD ]
Line_19 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))-->Line_21 $$ file.close()[ FD ]
Line_2 $$ public void testChain() throws Exception -->Line_58 $$ assertTrue(getFlag(conf, "map.E.value.2"))[ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_49 $$ assertTrue(getFlag(conf, "map.A.value.1"))[ CD ]
Line_7 $$ inDir = new Path(localPathRoot, inDir)-->Line_16 $$ if (!fs.mkdirs(inDir)) [ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_46 $$ assertTrue(getFlag(conf, "configure.C"))[ FD ]
Line_4 $$ Path outDir = new Path("testing/chain/output")-->Line_38 $$ FileOutputFormat.setOutputPath(conf, outDir)[ FD ]
Line_2 $$ public void testChain() throws Exception -->Line_14 $$ FileSystem fs = FileSystem.get(conf)[ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_15 $$ fs.delete(outDir, true)[ CD ]
Line_14 $$ FileSystem fs = FileSystem.get(conf)-->Line_19 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))[ FD ]
Line_2 $$ public void testChain() throws Exception -->Line_29 $$ ChainMapper.addMapper(conf, BMap.class, LongWritable.class, Text.class, LongWritable.class, Text.class, false, null)[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_38 $$ FileOutputFormat.setOutputPath(conf, outDir)[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_48 $$ assertTrue(getFlag(conf, "configure.E"))[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_57 $$ assertTrue(getFlag(conf, "map.E.value.1"))[ FD ]
Line_2 $$ public void testChain() throws Exception -->Line_22 $$ conf.setJobName("chain")[ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_57 $$ assertTrue(getFlag(conf, "map.E.value.1"))[ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_52 $$ assertTrue(getFlag(conf, "map.B.value.2"))[ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_56 $$ assertTrue(getFlag(conf, "map.D.value.2"))[ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_32 $$ ChainReducer.setReducer(conf, CReduce.class, LongWritable.class, Text.class, LongWritable.class, Text.class, true, reduceConf)[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_59 $$ assertTrue(getFlag(conf, "close.A"))[ FD ]
Line_8 $$ outDir = new Path(localPathRoot, outDir)-->Line_38 $$ FileOutputFormat.setOutputPath(conf, outDir)[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_45 $$ assertTrue(getFlag(conf, "configure.B"))[ FD ]
Line_3 $$ Path inDir = new Path("testing/chain/input")-->Line_7 $$ inDir = new Path(localPathRoot, inDir)[ FD ]
Line_2 $$ public void testChain() throws Exception -->Line_40 $$ RunningJob job = jc.submitJob(conf)[ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_10 $$ JobConf conf = createJobConf()[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_28 $$ ChainMapper.addMapper(conf, AMap.class, LongWritable.class, Text.class, LongWritable.class, Text.class, true, mapAConf)[ FD ]
Line_26 $$ JobConf mapAConf = new JobConf(false)-->Line_27 $$ mapAConf.set("a", "A")[ FD ]
Line_2 $$ public void testChain() throws Exception -->Line_11 $$ conf.setBoolean("localFS", isLocalFS())[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_23 $$ conf.setInputFormat(TextInputFormat.class)[ FD ]
Line_2 $$ public void testChain() throws Exception -->Line_53 $$ assertTrue(getFlag(conf, "reduce.C.value.2"))[ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_26 $$ JobConf mapAConf = new JobConf(false)[ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_13 $$ cleanFlags(conf)[ CD ]
Line_3 $$ Path inDir = new Path("testing/chain/input")-->Line_16 $$ if (!fs.mkdirs(inDir)) [ FD ]
Line_30 $$ JobConf reduceConf = new JobConf(false)-->Line_31 $$ reduceConf.set("a", "C")[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_55 $$ assertTrue(getFlag(conf, "map.D.value.1"))[ FD ]
Line_26 $$ JobConf mapAConf = new JobConf(false)-->Line_28 $$ ChainMapper.addMapper(conf, AMap.class, LongWritable.class, Text.class, LongWritable.class, Text.class, true, mapAConf)[ FD ]
Line_2 $$ public void testChain() throws Exception -->Line_59 $$ assertTrue(getFlag(conf, "close.A"))[ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_50 $$ assertTrue(getFlag(conf, "map.A.value.2"))[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_56 $$ assertTrue(getFlag(conf, "map.D.value.2"))[ FD ]
Line_2 $$ public void testChain() throws Exception -->Line_23 $$ conf.setInputFormat(TextInputFormat.class)[ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_44 $$ assertTrue(getFlag(conf, "configure.A"))[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_29 $$ ChainMapper.addMapper(conf, BMap.class, LongWritable.class, Text.class, LongWritable.class, Text.class, false, null)[ FD ]
Line_2 $$ public void testChain() throws Exception -->Line_41 $$ while (!job.isComplete()) [ CD ]
Line_40 $$ RunningJob job = jc.submitJob(conf)-->Line_41 $$ while (!job.isComplete()) [ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_24 $$ conf.setOutputFormat(TextOutputFormat.class)[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_25 $$ conf.set("a", "X")[ FD ]
Line_2 $$ public void testChain() throws Exception -->Line_24 $$ conf.setOutputFormat(TextOutputFormat.class)[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_11 $$ conf.setBoolean("localFS", isLocalFS())[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_51 $$ assertTrue(getFlag(conf, "map.B.value.1"))[ FD ]
Line_2 $$ public void testChain() throws Exception -->Line_34 $$ JobConf mapEConf = new JobConf(false)[ CD ]
Line_5 $$ if (isLocalFS()) -->Line_7 $$ inDir = new Path(localPathRoot, inDir)[ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_48 $$ assertTrue(getFlag(conf, "configure.E"))[ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_4 $$ Path outDir = new Path("testing/chain/output")[ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_20 $$ file.writeBytes("1\n2\n")[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_62 $$ assertTrue(getFlag(conf, "close.D"))[ FD ]
Line_4 $$ Path outDir = new Path("testing/chain/output")-->Line_15 $$ fs.delete(outDir, true)[ FD ]
Line_2 $$ public void testChain() throws Exception -->Line_55 $$ assertTrue(getFlag(conf, "map.D.value.1"))[ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_61 $$ assertTrue(getFlag(conf, "close.C"))[ CD ]
Line_5 $$ if (isLocalFS()) -->Line_6 $$ String localPathRoot = System.getProperty("test.build.data", "/tmp").replace(' ', '+')[ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_46 $$ assertTrue(getFlag(conf, "configure.C"))[ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_21 $$ file.close()[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_13 $$ cleanFlags(conf)[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_58 $$ assertTrue(getFlag(conf, "map.E.value.2"))[ FD ]
Line_14 $$ FileSystem fs = FileSystem.get(conf)-->Line_16 $$ if (!fs.mkdirs(inDir)) [ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_49 $$ assertTrue(getFlag(conf, "map.A.value.1"))[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_37 $$ FileInputFormat.setInputPaths(conf, inDir)[ FD ]
Line_3 $$ Path inDir = new Path("testing/chain/input")-->Line_17 $$ throw new IOException("Mkdirs failed to create " + inDir.toString())[ FD ]
Line_41 $$ while (!job.isComplete()) -->Line_42 $$ Thread.sleep(100)[ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_35 $$ mapEConf.set("a", "E")[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_22 $$ conf.setJobName("chain")[ FD ]
Line_2 $$ public void testChain() throws Exception -->Line_63 $$ assertTrue(getFlag(conf, "close.E"))[ CD ]
Line_30 $$ JobConf reduceConf = new JobConf(false)-->Line_32 $$ ChainReducer.setReducer(conf, CReduce.class, LongWritable.class, Text.class, LongWritable.class, Text.class, true, reduceConf)[ FD ]
Line_2 $$ public void testChain() throws Exception -->Line_19 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_61 $$ assertTrue(getFlag(conf, "close.C"))[ FD ]
Line_2 $$ public void testChain() throws Exception -->Line_27 $$ mapAConf.set("a", "A")[ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_5 $$ if (isLocalFS()) [ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_31 $$ reduceConf.set("a", "C")[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_14 $$ FileSystem fs = FileSystem.get(conf)[ FD ]
Line_2 $$ public void testChain() throws Exception -->Line_25 $$ conf.set("a", "X")[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_36 $$ ChainReducer.addMapper(conf, EMap.class, LongWritable.class, Text.class, LongWritable.class, Text.class, true, mapEConf)[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_32 $$ ChainReducer.setReducer(conf, CReduce.class, LongWritable.class, Text.class, LongWritable.class, Text.class, true, reduceConf)[ FD ]
Line_2 $$ public void testChain() throws Exception -->Line_16 $$ if (!fs.mkdirs(inDir)) [ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_28 $$ ChainMapper.addMapper(conf, AMap.class, LongWritable.class, Text.class, LongWritable.class, Text.class, true, mapAConf)[ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_33 $$ ChainReducer.addMapper(conf, DMap.class, LongWritable.class, Text.class, LongWritable.class, Text.class, false, null)[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_12 $$ conf.setInt("mapreduce.job.maps", 1)[ FD ]
Line_2 $$ public void testChain() throws Exception -->Line_3 $$ Path inDir = new Path("testing/chain/input")[ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_54 $$ assertTrue(getFlag(conf, "reduce.C.value.1"))[ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_47 $$ assertTrue(getFlag(conf, "configure.D"))[ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_30 $$ JobConf reduceConf = new JobConf(false)[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_50 $$ assertTrue(getFlag(conf, "map.A.value.2"))[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_53 $$ assertTrue(getFlag(conf, "reduce.C.value.2"))[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_33 $$ ChainReducer.addMapper(conf, DMap.class, LongWritable.class, Text.class, LongWritable.class, Text.class, false, null)[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_54 $$ assertTrue(getFlag(conf, "reduce.C.value.1"))[ FD ]
Line_14 $$ FileSystem fs = FileSystem.get(conf)-->Line_15 $$ fs.delete(outDir, true)[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_60 $$ assertTrue(getFlag(conf, "close.B"))[ FD ]
Line_39 $$ JobClient jc = new JobClient(conf)-->Line_40 $$ RunningJob job = jc.submitJob(conf)[ FD ]
Line_2 $$ public void testChain() throws Exception -->Line_51 $$ assertTrue(getFlag(conf, "map.B.value.1"))[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_63 $$ assertTrue(getFlag(conf, "close.E"))[ FD ]
Line_19 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))-->Line_20 $$ file.writeBytes("1\n2\n")[ FD ]
Line_2 $$ public void testChain() throws Exception -->Line_12 $$ conf.setInt("mapreduce.job.maps", 1)[ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_37 $$ FileInputFormat.setInputPaths(conf, inDir)[ CD ]
Line_34 $$ JobConf mapEConf = new JobConf(false)-->Line_36 $$ ChainReducer.addMapper(conf, EMap.class, LongWritable.class, Text.class, LongWritable.class, Text.class, true, mapEConf)[ FD ]
Line_2 $$ public void testChain() throws Exception -->Line_38 $$ FileOutputFormat.setOutputPath(conf, outDir)[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_44 $$ assertTrue(getFlag(conf, "configure.A"))[ FD ]
Line_8 $$ outDir = new Path(localPathRoot, outDir)-->Line_15 $$ fs.delete(outDir, true)[ FD ]
Line_3 $$ Path inDir = new Path("testing/chain/input")-->Line_37 $$ FileInputFormat.setInputPaths(conf, inDir)[ FD ]
Line_7 $$ inDir = new Path(localPathRoot, inDir)-->Line_37 $$ FileInputFormat.setInputPaths(conf, inDir)[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_52 $$ assertTrue(getFlag(conf, "map.B.value.2"))[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_47 $$ assertTrue(getFlag(conf, "configure.D"))[ FD ]
Line_7 $$ inDir = new Path(localPathRoot, inDir)-->Line_17 $$ throw new IOException("Mkdirs failed to create " + inDir.toString())[ FD ]
Line_2 $$ public void testChain() throws Exception -->Line_36 $$ ChainReducer.addMapper(conf, EMap.class, LongWritable.class, Text.class, LongWritable.class, Text.class, true, mapEConf)[ CD ]
Line_2 $$ public void testChain() throws Exception -->Line_45 $$ assertTrue(getFlag(conf, "configure.B"))[ CD ]
