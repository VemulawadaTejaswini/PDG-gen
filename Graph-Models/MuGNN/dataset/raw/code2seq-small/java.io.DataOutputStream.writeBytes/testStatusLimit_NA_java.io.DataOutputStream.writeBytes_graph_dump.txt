Line_12 $$ DataOutputStream file = fs.create(new Path(inDir, "part-" + 0))-->Line_14 $$ file.close()[ FD ]
Line_2 $$ public void testStatusLimit() throws IOException, InterruptedException, ClassNotFoundException -->Line_18 $$ Job job = Job.getInstance(conf, "testStatusLimit")[ CD ]
Line_18 $$ Job job = Job.getInstance(conf, "testStatusLimit")-->Line_23 $$ job.waitForCompletion(true)[ FD ]
Line_18 $$ Job job = Job.getInstance(conf, "testStatusLimit")-->Line_20 $$ job.setNumReduceTasks(0)[ FD ]
Line_2 $$ public void testStatusLimit() throws IOException, InterruptedException, ClassNotFoundException -->Line_22 $$ FileOutputFormat.setOutputPath(job, outDir)[ CD ]
Line_8 $$ if (fs.exists(inDir)) -->Line_9 $$ fs.delete(inDir, true)[ CD ]
Line_7 $$ FileSystem fs = FileSystem.get(conf)-->Line_11 $$ fs.mkdirs(inDir)[ FD ]
Line_2 $$ public void testStatusLimit() throws IOException, InterruptedException, ClassNotFoundException -->Line_6 $$ Path outDir = new Path(test, "out")[ CD ]
Line_2 $$ public void testStatusLimit() throws IOException, InterruptedException, ClassNotFoundException -->Line_4 $$ Configuration conf = new Configuration()[ CD ]
Line_6 $$ Path outDir = new Path(test, "out")-->Line_22 $$ FileOutputFormat.setOutputPath(job, outDir)[ FD ]
Line_2 $$ public void testStatusLimit() throws IOException, InterruptedException, ClassNotFoundException -->Line_7 $$ FileSystem fs = FileSystem.get(conf)[ CD ]
Line_2 $$ public void testStatusLimit() throws IOException, InterruptedException, ClassNotFoundException -->Line_13 $$ file.writeBytes("testStatusLimit")[ CD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_18 $$ Job job = Job.getInstance(conf, "testStatusLimit")[ FD ]
Line_15 $$ if (fs.exists(outDir)) -->Line_16 $$ fs.delete(outDir, true)[ CD ]
Line_5 $$ Path inDir = new Path(test, "in")-->Line_9 $$ fs.delete(inDir, true)[ FD ]
Line_2 $$ public void testStatusLimit() throws IOException, InterruptedException, ClassNotFoundException -->Line_11 $$ fs.mkdirs(inDir)[ CD ]
Line_2 $$ public void testStatusLimit() throws IOException, InterruptedException, ClassNotFoundException -->Line_23 $$ job.waitForCompletion(true)[ CD ]
Line_2 $$ public void testStatusLimit() throws IOException, InterruptedException, ClassNotFoundException -->Line_21 $$ FileInputFormat.addInputPath(job, inDir)[ CD ]
Line_7 $$ FileSystem fs = FileSystem.get(conf)-->Line_16 $$ fs.delete(outDir, true)[ FD ]
Line_18 $$ Job job = Job.getInstance(conf, "testStatusLimit")-->Line_24 $$ assertTrue("Job failed", job.isSuccessful())[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_7 $$ FileSystem fs = FileSystem.get(conf)[ FD ]
Line_2 $$ public void testStatusLimit() throws IOException, InterruptedException, ClassNotFoundException -->Line_3 $$ Path test = new Path(testRootTempDir, "testStatusLimit")[ CD ]
Line_2 $$ public void testStatusLimit() throws IOException, InterruptedException, ClassNotFoundException -->Line_20 $$ job.setNumReduceTasks(0)[ CD ]
Line_2 $$ public void testStatusLimit() throws IOException, InterruptedException, ClassNotFoundException -->Line_24 $$ assertTrue("Job failed", job.isSuccessful())[ CD ]
Line_18 $$ Job job = Job.getInstance(conf, "testStatusLimit")-->Line_21 $$ FileInputFormat.addInputPath(job, inDir)[ FD ]
Line_2 $$ public void testStatusLimit() throws IOException, InterruptedException, ClassNotFoundException -->Line_8 $$ if (fs.exists(inDir)) [ CD ]
Line_5 $$ Path inDir = new Path(test, "in")-->Line_21 $$ FileInputFormat.addInputPath(job, inDir)[ FD ]
Line_12 $$ DataOutputStream file = fs.create(new Path(inDir, "part-" + 0))-->Line_13 $$ file.writeBytes("testStatusLimit")[ FD ]
Line_5 $$ Path inDir = new Path(test, "in")-->Line_11 $$ fs.mkdirs(inDir)[ FD ]
Line_7 $$ FileSystem fs = FileSystem.get(conf)-->Line_12 $$ DataOutputStream file = fs.create(new Path(inDir, "part-" + 0))[ FD ]
Line_18 $$ Job job = Job.getInstance(conf, "testStatusLimit")-->Line_22 $$ FileOutputFormat.setOutputPath(job, outDir)[ FD ]
Line_7 $$ FileSystem fs = FileSystem.get(conf)-->Line_8 $$ if (fs.exists(inDir)) [ FD ]
Line_2 $$ public void testStatusLimit() throws IOException, InterruptedException, ClassNotFoundException -->Line_5 $$ Path inDir = new Path(test, "in")[ CD ]
Line_2 $$ public void testStatusLimit() throws IOException, InterruptedException, ClassNotFoundException -->Line_12 $$ DataOutputStream file = fs.create(new Path(inDir, "part-" + 0))[ CD ]
Line_5 $$ Path inDir = new Path(test, "in")-->Line_8 $$ if (fs.exists(inDir)) [ FD ]
Line_7 $$ FileSystem fs = FileSystem.get(conf)-->Line_15 $$ if (fs.exists(outDir)) [ FD ]
Line_6 $$ Path outDir = new Path(test, "out")-->Line_15 $$ if (fs.exists(outDir)) [ FD ]
Line_18 $$ Job job = Job.getInstance(conf, "testStatusLimit")-->Line_19 $$ job.setMapperClass(StatusLimitMapper.class)[ FD ]
Line_6 $$ Path outDir = new Path(test, "out")-->Line_16 $$ fs.delete(outDir, true)[ FD ]
Line_2 $$ public void testStatusLimit() throws IOException, InterruptedException, ClassNotFoundException -->Line_14 $$ file.close()[ CD ]
Line_2 $$ public void testStatusLimit() throws IOException, InterruptedException, ClassNotFoundException -->Line_19 $$ job.setMapperClass(StatusLimitMapper.class)[ CD ]
Line_7 $$ FileSystem fs = FileSystem.get(conf)-->Line_9 $$ fs.delete(inDir, true)[ FD ]
Line_2 $$ public void testStatusLimit() throws IOException, InterruptedException, ClassNotFoundException -->Line_15 $$ if (fs.exists(outDir)) [ CD ]
