Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_4 $$ conf.set("test.build.data", TEST_ROOT_DIR)[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_3 $$ String TEST_ROOT_DIR = new Path(System.getProperty("test.build.data", "/tmp")).toString().replace(' ', '+')[ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_44 $$ RunningJob job = JobClient.runJob(conf)[ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_50 $$ while (line != null) [ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_23 $$ FileInputFormat.setInputPaths(conf, inDir)[ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_18 $$ conf.setJobName("cachetest")[ FD ]
Line_46 $$ Path result = new Path(TEST_ROOT_DIR + "/test.txt")-->Line_48 $$ BufferedReader file = new BufferedReader(new InputStreamReader(FileSystem.getLocal(conf).open(result)))[ FD ]
Line_14 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))-->Line_15 $$ file.writeBytes(input)[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_15 $$ file.writeBytes(input)[ CD ]
Line_5 $$ final Path inDir = new Path(indir)-->Line_23 $$ FileInputFormat.setInputPaths(conf, inDir)[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_9 $$ if (!fs.mkdirs(inDir)) [ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_5 $$ final Path inDir = new Path(indir)[ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_24 $$ FileOutputFormat.setOutputPath(conf, outDir)[ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_13 $$ System.out.println("HERE:" + inDir)[ CD ]
Line_3 $$ String TEST_ROOT_DIR = new Path(System.getProperty("test.build.data", "/tmp")).toString().replace(' ', '+')-->Line_4 $$ conf.set("test.build.data", TEST_ROOT_DIR)[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_8 $$ fs.delete(outDir, true)[ CD ]
Line_45 $$ int count = 0-->Line_58 $$ if (count != 6)[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_36 $$ DistributedCache.addCacheFile(uris[0], conf)[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_30 $$ uris[0] = fs.getUri().resolve(cacheDir + "/test.txt")[ CD ]
Line_44 $$ RunningJob job = JobClient.runJob(conf)-->Line_61 $$ validateCacheFileSizes(job.getConfiguration(), archiveSizes, MRJobConfig.CACHE_ARCHIVES_SIZES)[ FD ]
Line_58 $$ if (count != 6)-->Line_59 $$ return new TestResult(job, false)[ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_31 $$ uris[1] = fs.getUri().resolve(cacheDir + "/test.jar")[ CD ]
Line_7 $$ FileSystem fs = FileSystem.get(conf)-->Line_30 $$ uris[0] = fs.getUri().resolve(cacheDir + "/test.txt")[ FD ]
Line_7 $$ FileSystem fs = FileSystem.get(conf)-->Line_35 $$ uris[5] = fs.getUri().resolve(cacheDir + "/test.tar")[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_61 $$ validateCacheFileSizes(job.getConfiguration(), archiveSizes, MRJobConfig.CACHE_ARCHIVES_SIZES)[ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_41 $$ DistributedCache.addCacheArchive(uris[i], conf)[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_15 $$ file.writeBytes(input)[ FD ]
Line_7 $$ FileSystem fs = FileSystem.get(conf)-->Line_14 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_35 $$ uris[5] = fs.getUri().resolve(cacheDir + "/test.tar")[ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_36 $$ DistributedCache.addCacheFile(uris[0], conf)[ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_26 $$ conf.setNumReduceTasks(1)[ FD ]
Line_14 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))-->Line_54 $$ line = file.readLine()[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_38 $$ fileSizes[0] = fs.getFileStatus(new Path(uris[0].getPath())).getLen()[ CD ]
Line_37 $$ long[] fileSizes = new long[1]-->Line_60 $$ validateCacheFileSizes(job.getConfiguration(), fileSizes, MRJobConfig.CACHE_FILES_SIZES)[ FD ]
Line_40 $$ for (int i = 1; i < 6; i++) -->Line_42 $$ archiveSizes[i - 1] = fs.getFileStatus(new Path(uris[i].getPath())).getLen()[ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_58 $$ if (count != 6)[ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_7 $$ FileSystem fs = FileSystem.get(conf)[ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_19 $$ conf.setOutputKeyClass(Text.class)[ CD ]
Line_49 $$ String line = file.readLine()-->Line_50 $$ while (line != null) [ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_25 $$ conf.setNumMapTasks(1)[ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_56 $$ file.close()[ CD ]
Line_50 $$ while (line != null) -->Line_51 $$ if (!testStr.equals(line))[ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_18 $$ conf.setJobName("cachetest")[ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_21 $$ conf.setCombinerClass(MRCaching.ReduceClass.class)[ CD ]
Line_40 $$ for (int i = 1; i < 6; i++) -->Line_41 $$ DistributedCache.addCacheArchive(uris[i], conf)[ CD ]
Line_7 $$ FileSystem fs = FileSystem.get(conf)-->Line_8 $$ fs.delete(outDir, true)[ FD ]
Line_39 $$ long[] archiveSizes = new long[5]-->Line_61 $$ validateCacheFileSizes(job.getConfiguration(), archiveSizes, MRJobConfig.CACHE_ARCHIVES_SIZES)[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_49 $$ String line = file.readLine()[ CD ]
Line_7 $$ FileSystem fs = FileSystem.get(conf)-->Line_38 $$ fileSizes[0] = fs.getFileStatus(new Path(uris[0].getPath())).getLen()[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_32 $$ uris[2] = fs.getUri().resolve(cacheDir + "/test.zip")[ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_6 $$ final Path outDir = new Path(outdir)[ CD ]
Line_14 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))-->Line_49 $$ String line = file.readLine()[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_22 $$ conf.setReducerClass(MRCaching.ReduceClass.class)[ FD ]
Line_5 $$ final Path inDir = new Path(indir)-->Line_10 $$ throw new IOException("Mkdirs failed to create " + inDir.toString())[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_27 $$ conf.setSpeculativeExecution(false)[ CD ]
Line_44 $$ RunningJob job = JobClient.runJob(conf)-->Line_60 $$ validateCacheFileSizes(job.getConfiguration(), fileSizes, MRJobConfig.CACHE_FILES_SIZES)[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_48 $$ BufferedReader file = new BufferedReader(new InputStreamReader(FileSystem.getLocal(conf).open(result)))[ FD ]
Line_49 $$ String line = file.readLine()-->Line_54 $$ line = file.readLine()[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_25 $$ conf.setNumMapTasks(1)[ FD ]
Line_5 $$ final Path inDir = new Path(indir)-->Line_9 $$ if (!fs.mkdirs(inDir)) [ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_24 $$ FileOutputFormat.setOutputPath(conf, outDir)[ FD ]
Line_49 $$ String line = file.readLine()-->Line_51 $$ if (!testStr.equals(line))[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_62 $$ return new TestResult(job, true)[ CD ]
Line_50 $$ while (line != null) -->Line_53 $$ count++[ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_60 $$ validateCacheFileSizes(job.getConfiguration(), fileSizes, MRJobConfig.CACHE_FILES_SIZES)[ CD ]
Line_50 $$ while (line != null) -->Line_54 $$ line = file.readLine()[ CD ]
Line_7 $$ FileSystem fs = FileSystem.get(conf)-->Line_9 $$ if (!fs.mkdirs(inDir)) [ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_28 $$ URI[] uris = new URI[6][ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_29 $$ conf.setMapperClass(MRCaching.MapClass2.class)[ CD ]
Line_51 $$ if (!testStr.equals(line))-->Line_52 $$ return new TestResult(job, false)[ CD ]
Line_54 $$ line = file.readLine()-->Line_51 $$ if (!testStr.equals(line))[ FD ]
Line_7 $$ FileSystem fs = FileSystem.get(conf)-->Line_42 $$ archiveSizes[i - 1] = fs.getFileStatus(new Path(uris[i].getPath())).getLen()[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_40 $$ for (int i = 1; i < 6; i++) [ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_20 $$ conf.setOutputValueClass(IntWritable.class)[ CD ]
Line_54 $$ line = file.readLine()-->Line_50 $$ while (line != null) [ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_26 $$ conf.setNumReduceTasks(1)[ CD ]
Line_14 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))-->Line_16 $$ file.close()[ FD ]
Line_7 $$ FileSystem fs = FileSystem.get(conf)-->Line_31 $$ uris[1] = fs.getUri().resolve(cacheDir + "/test.jar")[ FD ]
Line_45 $$ int count = 0-->Line_53 $$ count++[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_20 $$ conf.setOutputValueClass(IntWritable.class)[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_22 $$ conf.setReducerClass(MRCaching.ReduceClass.class)[ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_45 $$ int count = 0[ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_21 $$ conf.setCombinerClass(MRCaching.ReduceClass.class)[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_46 $$ Path result = new Path(TEST_ROOT_DIR + "/test.txt")[ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_4 $$ conf.set("test.build.data", TEST_ROOT_DIR)[ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_27 $$ conf.setSpeculativeExecution(false)[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_44 $$ RunningJob job = JobClient.runJob(conf)[ FD ]
Line_7 $$ FileSystem fs = FileSystem.get(conf)-->Line_34 $$ uris[4] = fs.getUri().resolve(cacheDir + "/test.tar.gz")[ FD ]
Line_14 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))-->Line_56 $$ file.close()[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_23 $$ FileInputFormat.setInputPaths(conf, inDir)[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_34 $$ uris[4] = fs.getUri().resolve(cacheDir + "/test.tar.gz")[ CD ]
Line_6 $$ final Path outDir = new Path(outdir)-->Line_8 $$ fs.delete(outDir, true)[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_7 $$ FileSystem fs = FileSystem.get(conf)[ FD ]
Line_7 $$ FileSystem fs = FileSystem.get(conf)-->Line_33 $$ uris[3] = fs.getUri().resolve(cacheDir + "/test.tgz")[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_16 $$ file.close()[ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_19 $$ conf.setOutputKeyClass(Text.class)[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_37 $$ long[] fileSizes = new long[1][ CD ]
Line_6 $$ final Path outDir = new Path(outdir)-->Line_24 $$ FileOutputFormat.setOutputPath(conf, outDir)[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_39 $$ long[] archiveSizes = new long[5][ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_33 $$ uris[3] = fs.getUri().resolve(cacheDir + "/test.tgz")[ CD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_29 $$ conf.setMapperClass(MRCaching.MapClass2.class)[ FD ]
Line_2 $$ public static TestResult launchMRCache(String indir, String outdir, String cacheDir, JobConf conf, String input) throws IOException -->Line_14 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))[ CD ]
Line_7 $$ FileSystem fs = FileSystem.get(conf)-->Line_32 $$ uris[2] = fs.getUri().resolve(cacheDir + "/test.zip")[ FD ]
