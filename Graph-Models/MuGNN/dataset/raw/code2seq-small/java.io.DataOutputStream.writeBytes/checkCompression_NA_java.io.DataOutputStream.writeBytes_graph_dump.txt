Line_3 $$ JobConf conf = new JobConf(TestMapRed.class)-->Line_10 $$ FileOutputFormat.setOutputPath(conf, outDir)[ FD ]
Line_38 $$ Path output = new Path(outDir, Task.getOutputName(0))-->Line_39 $$ assertTrue("reduce output exists " + output, fs.exists(output))[ FD ]
Line_3 $$ JobConf conf = new JobConf(TestMapRed.class)-->Line_20 $$ conf.setCompressMapOutput(compressMapOutputs)[ FD ]
Line_2 $$ private void checkCompression(boolean compressMapOutputs, CompressionType redCompression, boolean includeCombine) throws Exception -->Line_21 $$ SequenceFileOutputFormat.setOutputCompressionType(conf, redCompression)[ FD ]
Line_2 $$ private void checkCompression(boolean compressMapOutputs, CompressionType redCompression, boolean includeCombine) throws Exception -->Line_3 $$ JobConf conf = new JobConf(TestMapRed.class)[ CD ]
Line_2 $$ private void checkCompression(boolean compressMapOutputs, CompressionType redCompression, boolean includeCombine) throws Exception -->Line_17 $$ if (includeCombine) [ CD ]
Line_2 $$ private void checkCompression(boolean compressMapOutputs, CompressionType redCompression, boolean includeCombine) throws Exception -->Line_7 $$ FileSystem fs = FileSystem.get(conf)[ CD ]
Line_7 $$ FileSystem fs = FileSystem.get(conf)-->Line_39 $$ assertTrue("reduce output exists " + output, fs.exists(output))[ FD ]
Line_3 $$ JobConf conf = new JobConf(TestMapRed.class)-->Line_18 $$ conf.setCombinerClass(IdentityReducer.class)[ FD ]
Line_2 $$ private void checkCompression(boolean compressMapOutputs, CompressionType redCompression, boolean includeCombine) throws Exception -->Line_16 $$ conf.set(MRConfig.FRAMEWORK_NAME, MRConfig.LOCAL_FRAMEWORK_NAME)[ CD ]
Line_2 $$ private void checkCompression(boolean compressMapOutputs, CompressionType redCompression, boolean includeCombine) throws Exception -->Line_6 $$ Path outDir = new Path(testdir, "out")[ CD ]
Line_2 $$ private void checkCompression(boolean compressMapOutputs, CompressionType redCompression, boolean includeCombine) throws Exception -->Line_15 $$ conf.setOutputFormat(SequenceFileOutputFormat.class)[ CD ]
Line_5 $$ Path inDir = new Path(testdir, "in")-->Line_26 $$ if (!fs.mkdirs(inDir)) [ FD ]
Line_2 $$ private void checkCompression(boolean compressMapOutputs, CompressionType redCompression, boolean includeCombine) throws Exception -->Line_10 $$ FileOutputFormat.setOutputPath(conf, outDir)[ CD ]
Line_6 $$ Path outDir = new Path(testdir, "out")-->Line_10 $$ FileOutputFormat.setOutputPath(conf, outDir)[ FD ]
Line_5 $$ Path inDir = new Path(testdir, "in")-->Line_27 $$ throw new IOException("Mkdirs failed to create " + inDir.toString())[ FD ]
Line_29 $$ Path inFile = new Path(inDir, "part0")-->Line_30 $$ DataOutputStream f = fs.create(inFile)[ FD ]
Line_7 $$ FileSystem fs = FileSystem.get(conf)-->Line_8 $$ fs.delete(testdir, true)[ FD ]
Line_40 $$ SequenceFile.Reader rdr = new SequenceFile.Reader(fs, output, conf)-->Line_41 $$ assertEquals("is reduce output compressed " + output, redCompression != CompressionType.NONE, rdr.isCompressed())[ FD ]
Line_7 $$ FileSystem fs = FileSystem.get(conf)-->Line_23 $$ if (!fs.mkdirs(testdir)) [ FD ]
Line_3 $$ JobConf conf = new JobConf(TestMapRed.class)-->Line_35 $$ RunningJob rj = JobClient.runJob(conf)[ FD ]
Line_17 $$ if (includeCombine) -->Line_18 $$ conf.setCombinerClass(IdentityReducer.class)[ CD ]
Line_3 $$ JobConf conf = new JobConf(TestMapRed.class)-->Line_11 $$ conf.setMapperClass(MyMap.class)[ FD ]
Line_3 $$ JobConf conf = new JobConf(TestMapRed.class)-->Line_21 $$ SequenceFileOutputFormat.setOutputCompressionType(conf, redCompression)[ FD ]
Line_4 $$ Path testdir = new Path("build/test/test.mapred.compress")-->Line_44 $$ fs.delete(testdir, true)[ FD ]
Line_4 $$ Path testdir = new Path("build/test/test.mapred.compress")-->Line_24 $$ throw new IOException("Mkdirs failed to create " + testdir.toString())[ FD ]
Line_3 $$ JobConf conf = new JobConf(TestMapRed.class)-->Line_13 $$ conf.setOutputKeyClass(Text.class)[ FD ]
Line_30 $$ DataOutputStream f = fs.create(inFile)-->Line_33 $$ f.writeBytes("Is this done, yet?\n")[ FD ]
Line_30 $$ DataOutputStream f = fs.create(inFile)-->Line_31 $$ f.writeBytes("Owen was here\n")[ FD ]
Line_2 $$ private void checkCompression(boolean compressMapOutputs, CompressionType redCompression, boolean includeCombine) throws Exception -->Line_20 $$ conf.setCompressMapOutput(compressMapOutputs)[ FD ]
Line_2 $$ private void checkCompression(boolean compressMapOutputs, CompressionType redCompression, boolean includeCombine) throws Exception -->Line_21 $$ SequenceFileOutputFormat.setOutputCompressionType(conf, redCompression)[ CD ]
Line_30 $$ DataOutputStream f = fs.create(inFile)-->Line_32 $$ f.writeBytes("Hadoop is fun\n")[ FD ]
Line_30 $$ DataOutputStream f = fs.create(inFile)-->Line_34 $$ f.close()[ FD ]
Line_3 $$ JobConf conf = new JobConf(TestMapRed.class)-->Line_12 $$ conf.setReducerClass(MyReduce.class)[ FD ]
Line_7 $$ FileSystem fs = FileSystem.get(conf)-->Line_30 $$ DataOutputStream f = fs.create(inFile)[ FD ]
Line_4 $$ Path testdir = new Path("build/test/test.mapred.compress")-->Line_8 $$ fs.delete(testdir, true)[ FD ]
Line_3 $$ JobConf conf = new JobConf(TestMapRed.class)-->Line_14 $$ conf.setOutputValueClass(Text.class)[ FD ]
Line_2 $$ private void checkCompression(boolean compressMapOutputs, CompressionType redCompression, boolean includeCombine) throws Exception -->Line_9 $$ FileInputFormat.setInputPaths(conf, inDir)[ CD ]
Line_2 $$ private void checkCompression(boolean compressMapOutputs, CompressionType redCompression, boolean includeCombine) throws Exception -->Line_11 $$ conf.setMapperClass(MyMap.class)[ CD ]
Line_5 $$ Path inDir = new Path(testdir, "in")-->Line_9 $$ FileInputFormat.setInputPaths(conf, inDir)[ FD ]
Line_2 $$ private void checkCompression(boolean compressMapOutputs, CompressionType redCompression, boolean includeCombine) throws Exception -->Line_5 $$ Path inDir = new Path(testdir, "in")[ CD ]
Line_2 $$ private void checkCompression(boolean compressMapOutputs, CompressionType redCompression, boolean includeCombine) throws Exception -->Line_8 $$ fs.delete(testdir, true)[ CD ]
Line_3 $$ JobConf conf = new JobConf(TestMapRed.class)-->Line_7 $$ FileSystem fs = FileSystem.get(conf)[ FD ]
Line_2 $$ private void checkCompression(boolean compressMapOutputs, CompressionType redCompression, boolean includeCombine) throws Exception -->Line_12 $$ conf.setReducerClass(MyReduce.class)[ CD ]
Line_2 $$ private void checkCompression(boolean compressMapOutputs, CompressionType redCompression, boolean includeCombine) throws Exception -->Line_13 $$ conf.setOutputKeyClass(Text.class)[ CD ]
Line_3 $$ JobConf conf = new JobConf(TestMapRed.class)-->Line_16 $$ conf.set(MRConfig.FRAMEWORK_NAME, MRConfig.LOCAL_FRAMEWORK_NAME)[ FD ]
Line_2 $$ private void checkCompression(boolean compressMapOutputs, CompressionType redCompression, boolean includeCombine) throws Exception -->Line_4 $$ Path testdir = new Path("build/test/test.mapred.compress")[ CD ]
Line_2 $$ private void checkCompression(boolean compressMapOutputs, CompressionType redCompression, boolean includeCombine) throws Exception -->Line_14 $$ conf.setOutputValueClass(Text.class)[ CD ]
Line_2 $$ private void checkCompression(boolean compressMapOutputs, CompressionType redCompression, boolean includeCombine) throws Exception -->Line_20 $$ conf.setCompressMapOutput(compressMapOutputs)[ CD ]
Line_35 $$ RunningJob rj = JobClient.runJob(conf)-->Line_36 $$ assertTrue("job was complete", rj.isComplete())[ FD ]
Line_3 $$ JobConf conf = new JobConf(TestMapRed.class)-->Line_15 $$ conf.setOutputFormat(SequenceFileOutputFormat.class)[ FD ]
Line_4 $$ Path testdir = new Path("build/test/test.mapred.compress")-->Line_23 $$ if (!fs.mkdirs(testdir)) [ FD ]
Line_7 $$ FileSystem fs = FileSystem.get(conf)-->Line_26 $$ if (!fs.mkdirs(inDir)) [ FD ]
Line_40 $$ SequenceFile.Reader rdr = new SequenceFile.Reader(fs, output, conf)-->Line_42 $$ rdr.close()[ FD ]
Line_3 $$ JobConf conf = new JobConf(TestMapRed.class)-->Line_9 $$ FileInputFormat.setInputPaths(conf, inDir)[ FD ]
Line_7 $$ FileSystem fs = FileSystem.get(conf)-->Line_44 $$ fs.delete(testdir, true)[ FD ]
Line_35 $$ RunningJob rj = JobClient.runJob(conf)-->Line_37 $$ assertTrue("job was successful", rj.isSuccessful())[ FD ]
