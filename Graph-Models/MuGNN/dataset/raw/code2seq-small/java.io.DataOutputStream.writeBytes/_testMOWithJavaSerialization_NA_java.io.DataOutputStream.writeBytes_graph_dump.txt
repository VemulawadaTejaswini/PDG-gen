Line_5 $$ JobConf conf = createJobConf()-->Line_22 $$ conf.setOutputValueClass(String.class)[ FD ]
Line_43 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(fs.open(new Path(FileOutputFormat.getOutputPath(conf), "text-r-00000"))))-->Line_48 $$ line = reader.readLine()[ FD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_25 $$ MultipleOutputs.setCountersEnabled(conf, withCounters)[ CD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_19 $$ conf.setMapOutputValueClass(String.class)[ FD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_20 $$ conf.setOutputKeyComparatorClass(JavaSerializationComparator.class)[ FD ]
Line_35 $$ int namedOutputCount = 0-->Line_39 $$ namedOutputCount++[ FD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_26 $$ conf.setMapperClass(MOJavaSerDeMap.class)[ FD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_30 $$ JobClient jc = new JobClient(conf)[ CD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_52 $$ assertFalse(count == 0)[ CD ]
Line_3 $$ Path inDir = getDir(IN_DIR)-->Line_28 $$ FileInputFormat.setInputPaths(conf, inDir)[ FD ]
Line_12 $$ file = fs.create(new Path(inDir, "part-1"))-->Line_14 $$ file.close()[ FD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_24 $$ MultipleOutputs.addNamedOutput(conf, "text", TextOutputFormat.class, Long.class, String.class)[ FD ]
Line_45 $$ String line = reader.readLine()-->Line_46 $$ while (line != null) [ FD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_53 $$ Counters.Group counters = job.getCounters().getGroup(MultipleOutputs.class.getName())[ CD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_18 $$ conf.setMapOutputKeyClass(Long.class)[ CD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_22 $$ conf.setOutputValueClass(String.class)[ CD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_21 $$ conf.setOutputKeyClass(Long.class)[ CD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_27 $$ conf.setReducerClass(MOJavaSerDeReduce.class)[ CD ]
Line_3 $$ Path inDir = getDir(IN_DIR)-->Line_10 $$ fs.delete(inDir, true)[ FD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_28 $$ FileInputFormat.setInputPaths(conf, inDir)[ FD ]
Line_6 $$ FileSystem fs = FileSystem.get(conf)-->Line_12 $$ file = fs.create(new Path(inDir, "part-1"))[ FD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_45 $$ String line = reader.readLine()[ CD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_13 $$ file.writeBytes("a\nb\n\nc\nd\ne")[ CD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_3 $$ Path inDir = getDir(IN_DIR)[ CD ]
Line_54 $$ if (!withCounters) -->Line_57 $$ assertEquals(1, counters.size())[ CD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_23 $$ conf.setOutputFormat(TextOutputFormat.class)[ FD ]
Line_46 $$ while (line != null) -->Line_49 $$ count++[ CD ]
Line_7 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))-->Line_8 $$ file.writeBytes("a\nb\n\nc\nd\ne")[ FD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_19 $$ conf.setMapOutputValueClass(String.class)[ CD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_43 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(fs.open(new Path(FileOutputFormat.getOutputPath(conf), "text-r-00000"))))[ FD ]
Line_31 $$ RunningJob job = jc.submitJob(conf)-->Line_53 $$ Counters.Group counters = job.getCounters().getGroup(MultipleOutputs.class.getName())[ FD ]
Line_38 $$ if (status.getPath().getName().equals("text-m-00000") || status.getPath().getName().equals("text-r-00000")) -->Line_39 $$ namedOutputCount++[ CD ]
Line_44 $$ int count = 0-->Line_49 $$ count++[ FD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_24 $$ MultipleOutputs.addNamedOutput(conf, "text", TextOutputFormat.class, Long.class, String.class)[ CD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_20 $$ conf.setOutputKeyComparatorClass(JavaSerializationComparator.class)[ CD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_43 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(fs.open(new Path(FileOutputFormat.getOutputPath(conf), "text-r-00000"))))[ CD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_42 $$ assertEquals(2, namedOutputCount)[ CD ]
Line_7 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))-->Line_14 $$ file.close()[ FD ]
Line_6 $$ FileSystem fs = FileSystem.get(conf)-->Line_43 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(fs.open(new Path(FileOutputFormat.getOutputPath(conf), "text-r-00000"))))[ FD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_9 $$ file.close()[ CD ]
Line_6 $$ FileSystem fs = FileSystem.get(conf)-->Line_11 $$ fs.delete(outDir, true)[ FD ]
Line_12 $$ file = fs.create(new Path(inDir, "part-1"))-->Line_13 $$ file.writeBytes("a\nb\n\nc\nd\ne")[ FD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_21 $$ conf.setOutputKeyClass(Long.class)[ FD ]
Line_54 $$ if (!withCounters) -->Line_55 $$ assertEquals(0, counters.size())[ CD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_44 $$ int count = 0[ CD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_27 $$ conf.setReducerClass(MOJavaSerDeReduce.class)[ FD ]
Line_7 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))-->Line_12 $$ file = fs.create(new Path(inDir, "part-1"))[ FD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_17 $$ conf.setInputFormat(TextInputFormat.class)[ CD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_16 $$ conf.set("io.serializations", "org.apache.hadoop.io.serializer.JavaSerialization," + "org.apache.hadoop.io.serializer.WritableSerialization")[ CD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_12 $$ file = fs.create(new Path(inDir, "part-1"))[ CD ]
Line_53 $$ Counters.Group counters = job.getCounters().getGroup(MultipleOutputs.class.getName())-->Line_58 $$ assertEquals(2, counters.getCounter("text"))[ FD ]
Line_45 $$ String line = reader.readLine()-->Line_48 $$ line = reader.readLine()[ FD ]
Line_48 $$ line = reader.readLine()-->Line_46 $$ while (line != null) [ FD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_35 $$ int namedOutputCount = 0[ CD ]
Line_7 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))-->Line_13 $$ file.writeBytes("a\nb\n\nc\nd\ne")[ FD ]
Line_30 $$ JobClient jc = new JobClient(conf)-->Line_31 $$ RunningJob job = jc.submitJob(conf)[ FD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_18 $$ conf.setMapOutputKeyClass(Long.class)[ FD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_17 $$ conf.setInputFormat(TextInputFormat.class)[ FD ]
Line_54 $$ if (!withCounters) -->Line_58 $$ assertEquals(2, counters.getCounter("text"))[ CD ]
Line_4 $$ Path outDir = getDir(OUT_DIR)-->Line_29 $$ FileOutputFormat.setOutputPath(conf, outDir)[ FD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_16 $$ conf.set("io.serializations", "org.apache.hadoop.io.serializer.JavaSerialization," + "org.apache.hadoop.io.serializer.WritableSerialization")[ FD ]
Line_43 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(fs.open(new Path(FileOutputFormat.getOutputPath(conf), "text-r-00000"))))-->Line_51 $$ reader.close()[ FD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_10 $$ fs.delete(inDir, true)[ CD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_28 $$ FileInputFormat.setInputPaths(conf, inDir)[ CD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_36 $$ FileStatus[] statuses = fs.listStatus(outDir)[ CD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_4 $$ Path outDir = getDir(OUT_DIR)[ CD ]
Line_46 $$ while (line != null) -->Line_47 $$ assertTrue(line.endsWith("text"))[ CD ]
Line_4 $$ Path outDir = getDir(OUT_DIR)-->Line_11 $$ fs.delete(outDir, true)[ FD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_26 $$ conf.setMapperClass(MOJavaSerDeMap.class)[ CD ]
Line_53 $$ Counters.Group counters = job.getCounters().getGroup(MultipleOutputs.class.getName())-->Line_55 $$ assertEquals(0, counters.size())[ FD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_6 $$ FileSystem fs = FileSystem.get(conf)[ CD ]
Line_35 $$ int namedOutputCount = 0-->Line_42 $$ assertEquals(2, namedOutputCount)[ FD ]
Line_32 $$ while (!job.isComplete()) -->Line_33 $$ Thread.sleep(100)[ CD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_29 $$ FileOutputFormat.setOutputPath(conf, outDir)[ FD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_25 $$ MultipleOutputs.setCountersEnabled(conf, withCounters)[ FD ]
Line_53 $$ Counters.Group counters = job.getCounters().getGroup(MultipleOutputs.class.getName())-->Line_57 $$ assertEquals(1, counters.size())[ FD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_46 $$ while (line != null) [ CD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_31 $$ RunningJob job = jc.submitJob(conf)[ CD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_54 $$ if (!withCounters) [ CD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_8 $$ file.writeBytes("a\nb\n\nc\nd\ne")[ CD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_54 $$ if (!withCounters) [ FD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_32 $$ while (!job.isComplete()) [ CD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_15 $$ conf.setJobName("mo")[ CD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_11 $$ fs.delete(outDir, true)[ CD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_5 $$ JobConf conf = createJobConf()[ CD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_14 $$ file.close()[ CD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_23 $$ conf.setOutputFormat(TextOutputFormat.class)[ CD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_29 $$ FileOutputFormat.setOutputPath(conf, outDir)[ CD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_25 $$ MultipleOutputs.setCountersEnabled(conf, withCounters)[ FD ]
Line_6 $$ FileSystem fs = FileSystem.get(conf)-->Line_7 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))[ FD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_51 $$ reader.close()[ CD ]
Line_4 $$ Path outDir = getDir(OUT_DIR)-->Line_36 $$ FileStatus[] statuses = fs.listStatus(outDir)[ FD ]
Line_7 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))-->Line_9 $$ file.close()[ FD ]
Line_6 $$ FileSystem fs = FileSystem.get(conf)-->Line_10 $$ fs.delete(inDir, true)[ FD ]
Line_6 $$ FileSystem fs = FileSystem.get(conf)-->Line_36 $$ FileStatus[] statuses = fs.listStatus(outDir)[ FD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_31 $$ RunningJob job = jc.submitJob(conf)[ FD ]
Line_48 $$ line = reader.readLine()-->Line_47 $$ assertTrue(line.endsWith("text"))[ FD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_6 $$ FileSystem fs = FileSystem.get(conf)[ FD ]
Line_5 $$ JobConf conf = createJobConf()-->Line_15 $$ conf.setJobName("mo")[ FD ]
Line_2 $$ protected void _testMOWithJavaSerialization(boolean withCounters) throws Exception -->Line_7 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))[ CD ]
Line_31 $$ RunningJob job = jc.submitJob(conf)-->Line_32 $$ while (!job.isComplete()) [ FD ]
Line_43 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(fs.open(new Path(FileOutputFormat.getOutputPath(conf), "text-r-00000"))))-->Line_45 $$ String line = reader.readLine()[ FD ]
Line_37 $$ for (FileStatus status : statuses) -->Line_38 $$ if (status.getPath().getName().equals("text-m-00000") || status.getPath().getName().equals("text-r-00000")) [ FD ]
Line_45 $$ String line = reader.readLine()-->Line_47 $$ assertTrue(line.endsWith("text"))[ FD ]
Line_46 $$ while (line != null) -->Line_48 $$ line = reader.readLine()[ CD ]
