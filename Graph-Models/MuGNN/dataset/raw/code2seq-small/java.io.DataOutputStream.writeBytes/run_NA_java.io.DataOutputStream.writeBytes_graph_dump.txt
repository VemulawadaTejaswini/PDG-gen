Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_43 $$ RunningJob job = jc.submitJob(conf)[ CD ]
Line_5 $$ if (isLocalFS()) -->Line_8 $$ outDir = new Path(localPathRoot, outDir)[ CD ]
Line_36 $$ if (ioEx) -->Line_37 $$ conf.setBoolean("multithreaded.ioException", true)[ CD ]
Line_43 $$ RunningJob job = jc.submitJob(conf)-->Line_44 $$ while (!job.isComplete()) [ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_35 $$ conf.setInt(MultithreadedMapper.NUM_THREADS, 2)[ FD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_12 $$ fs.delete(outDir, true)[ CD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_42 $$ JobClient jc = new JobClient(conf)[ CD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_22 $$ conf.setInputFormat(TextInputFormat.class)[ CD ]
Line_17 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))-->Line_19 $$ file.close()[ FD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_17 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))[ CD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_29 $$ conf.setOutputValueClass(Text.class)[ CD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_30 $$ conf.setMapperClass(IDMap.class)[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_30 $$ conf.setMapperClass(IDMap.class)[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_43 $$ RunningJob job = jc.submitJob(conf)[ FD ]
Line_39 $$ if (rtEx) -->Line_40 $$ conf.setBoolean("multithreaded.runtimeException", true)[ CD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_23 $$ conf.setOutputKeyClass(LongWritable.class)[ CD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_3 $$ Path inDir = new Path("testing/mt/input")[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_33 $$ FileOutputFormat.setOutputPath(conf, outDir)[ FD ]
Line_3 $$ Path inDir = new Path("testing/mt/input")-->Line_7 $$ inDir = new Path(localPathRoot, inDir)[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_25 $$ conf.setMapOutputKeyClass(LongWritable.class)[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_21 $$ conf.setJobName("mt")[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_29 $$ conf.setOutputValueClass(Text.class)[ FD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_26 $$ conf.setMapOutputValueClass(Text.class)[ CD ]
Line_44 $$ while (!job.isComplete()) -->Line_45 $$ Thread.sleep(100)[ CD ]
Line_11 $$ FileSystem fs = FileSystem.get(conf)-->Line_17 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))[ FD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_31 $$ conf.setReducerClass(IDReduce.class)[ CD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_39 $$ if (rtEx) [ CD ]
Line_42 $$ JobClient jc = new JobClient(conf)-->Line_43 $$ RunningJob job = jc.submitJob(conf)[ FD ]
Line_8 $$ outDir = new Path(localPathRoot, outDir)-->Line_33 $$ FileOutputFormat.setOutputPath(conf, outDir)[ FD ]
Line_17 $$ DataOutputStream file = fs.create(new Path(inDir, "part-0"))-->Line_18 $$ file.writeBytes("a\nb\n\nc\nd\ne")[ FD ]
Line_11 $$ FileSystem fs = FileSystem.get(conf)-->Line_12 $$ fs.delete(outDir, true)[ FD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_32 $$ FileInputFormat.setInputPaths(conf, inDir)[ CD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_24 $$ conf.setOutputValueClass(Text.class)[ CD ]
Line_5 $$ if (isLocalFS()) -->Line_7 $$ inDir = new Path(localPathRoot, inDir)[ CD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_11 $$ FileSystem fs = FileSystem.get(conf)[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_26 $$ conf.setMapOutputValueClass(Text.class)[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_34 $$ conf.setMapRunnerClass(MultithreadedMapRunner.class)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.get(conf)-->Line_13 $$ if (!fs.mkdirs(inDir)) [ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_40 $$ conf.setBoolean("multithreaded.runtimeException", true)[ FD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_13 $$ if (!fs.mkdirs(inDir)) [ CD ]
Line_4 $$ Path outDir = new Path("testing/mt/output")-->Line_33 $$ FileOutputFormat.setOutputPath(conf, outDir)[ FD ]
Line_5 $$ if (isLocalFS()) -->Line_6 $$ String localPathRoot = System.getProperty("test.build.data", "/tmp").replace(' ', '+')[ CD ]
Line_8 $$ outDir = new Path(localPathRoot, outDir)-->Line_12 $$ fs.delete(outDir, true)[ FD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_18 $$ file.writeBytes("a\nb\n\nc\nd\ne")[ CD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_21 $$ conf.setJobName("mt")[ CD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_27 $$ conf.setOutputFormat(TextOutputFormat.class)[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_31 $$ conf.setReducerClass(IDReduce.class)[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_27 $$ conf.setOutputFormat(TextOutputFormat.class)[ FD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_19 $$ file.close()[ CD ]
Line_47 $$ if (job.isSuccessful()) -->Line_48 $$ assertFalse(ioEx || rtEx)[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_24 $$ conf.setOutputValueClass(Text.class)[ FD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_36 $$ if (ioEx) [ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_28 $$ conf.setOutputKeyClass(LongWritable.class)[ FD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_47 $$ if (job.isSuccessful()) [ CD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_33 $$ FileOutputFormat.setOutputPath(conf, outDir)[ CD ]
Line_43 $$ RunningJob job = jc.submitJob(conf)-->Line_47 $$ if (job.isSuccessful()) [ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_11 $$ FileSystem fs = FileSystem.get(conf)[ FD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_34 $$ conf.setMapRunnerClass(MultithreadedMapRunner.class)[ CD ]
Line_7 $$ inDir = new Path(localPathRoot, inDir)-->Line_32 $$ FileInputFormat.setInputPaths(conf, inDir)[ FD ]
Line_4 $$ Path outDir = new Path("testing/mt/output")-->Line_8 $$ outDir = new Path(localPathRoot, outDir)[ FD ]
Line_3 $$ Path inDir = new Path("testing/mt/input")-->Line_14 $$ throw new IOException("Mkdirs failed to create " + inDir.toString())[ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_22 $$ conf.setInputFormat(TextInputFormat.class)[ FD ]
Line_7 $$ inDir = new Path(localPathRoot, inDir)-->Line_14 $$ throw new IOException("Mkdirs failed to create " + inDir.toString())[ FD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_5 $$ if (isLocalFS()) [ CD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_35 $$ conf.setInt(MultithreadedMapper.NUM_THREADS, 2)[ CD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_44 $$ while (!job.isComplete()) [ CD ]
Line_47 $$ if (job.isSuccessful()) -->Line_50 $$ assertTrue(ioEx || rtEx)[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_37 $$ conf.setBoolean("multithreaded.ioException", true)[ FD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_4 $$ Path outDir = new Path("testing/mt/output")[ CD ]
Line_3 $$ Path inDir = new Path("testing/mt/input")-->Line_32 $$ FileInputFormat.setInputPaths(conf, inDir)[ FD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_25 $$ conf.setMapOutputKeyClass(LongWritable.class)[ CD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_23 $$ conf.setOutputKeyClass(LongWritable.class)[ FD ]
Line_7 $$ inDir = new Path(localPathRoot, inDir)-->Line_13 $$ if (!fs.mkdirs(inDir)) [ FD ]
Line_10 $$ JobConf conf = createJobConf()-->Line_32 $$ FileInputFormat.setInputPaths(conf, inDir)[ FD ]
Line_4 $$ Path outDir = new Path("testing/mt/output")-->Line_12 $$ fs.delete(outDir, true)[ FD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_28 $$ conf.setOutputKeyClass(LongWritable.class)[ CD ]
Line_2 $$ private void run(boolean ioEx, boolean rtEx) throws Exception -->Line_10 $$ JobConf conf = createJobConf()[ CD ]
Line_3 $$ Path inDir = new Path("testing/mt/input")-->Line_13 $$ if (!fs.mkdirs(inDir)) [ FD ]
