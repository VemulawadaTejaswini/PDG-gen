Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_7 $$ if (!fs.exists(inDir)) [ FD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_7 $$ if (!fs.exists(inDir)) [ CD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_3 $$ FileSystem fs = FileSystem.get(conf)[ CD ]
Line_11 $$ DataOutputStream file = fs.create(new Path(inDir, "part-" + i))-->Line_12 $$ file.writeBytes(input)[ FD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_19 $$ FileOutputFormat.setOutputPath(conf, outDir)[ CD ]
Line_10 $$ for (int i = 0; i < numMaps; ++i) -->Line_11 $$ DataOutputStream file = fs.create(new Path(inDir, "part-" + i))[ CD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_18 $$ FileInputFormat.setInputPaths(conf, inDir)[ CD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_18 $$ FileInputFormat.setInputPaths(conf, inDir)[ FD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_19 $$ FileOutputFormat.setOutputPath(conf, outDir)[ FD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_8 $$ fs.mkdirs(inDir)[ FD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_20 $$ conf.setNumMapTasks(numMaps)[ CD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_4 $$ if (fs.exists(outDir)) [ CD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_10 $$ for (int i = 0; i < numMaps; ++i) [ CD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_21 $$ conf.setNumReduceTasks(numReds)[ CD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_10 $$ for (int i = 0; i < numMaps; ++i) [ FD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_5 $$ fs.delete(outDir, true)[ FD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_3 $$ FileSystem fs = FileSystem.get(conf)[ FD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_15 $$ conf.setInputFormat(TextInputFormat.class)[ CD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_7 $$ if (!fs.exists(inDir)) [ FD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_11 $$ DataOutputStream file = fs.create(new Path(inDir, "part-" + i))[ FD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_4 $$ if (fs.exists(outDir)) [ FD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_22 $$ JobClient jobClient = new JobClient(conf)[ CD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_8 $$ fs.mkdirs(inDir)[ FD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_23 $$ RunningJob job = jobClient.submitJob(conf)[ FD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_16 $$ conf.setOutputKeyClass(LongWritable.class)[ FD ]
Line_7 $$ if (!fs.exists(inDir)) -->Line_8 $$ fs.mkdirs(inDir)[ CD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_20 $$ conf.setNumMapTasks(numMaps)[ FD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_15 $$ conf.setInputFormat(TextInputFormat.class)[ FD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_4 $$ if (fs.exists(outDir)) [ FD ]
Line_11 $$ DataOutputStream file = fs.create(new Path(inDir, "part-" + i))-->Line_13 $$ file.close()[ FD ]
Line_10 $$ for (int i = 0; i < numMaps; ++i) -->Line_12 $$ file.writeBytes(input)[ CD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_17 $$ conf.setOutputValueClass(Text.class)[ FD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_23 $$ RunningJob job = jobClient.submitJob(conf)[ CD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_16 $$ conf.setOutputKeyClass(LongWritable.class)[ CD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_24 $$ return job[ CD ]
Line_4 $$ if (fs.exists(outDir)) -->Line_5 $$ fs.delete(outDir, true)[ CD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_17 $$ conf.setOutputValueClass(Text.class)[ CD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_21 $$ conf.setNumReduceTasks(numReds)[ FD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_12 $$ file.writeBytes(input)[ FD ]
Line_10 $$ for (int i = 0; i < numMaps; ++i) -->Line_13 $$ file.close()[ CD ]
Line_2 $$ static RunningJob runJob(JobConf conf, Path inDir, Path outDir, int numMaps, int numReds, String input) throws IOException -->Line_5 $$ fs.delete(outDir, true)[ FD ]
Line_22 $$ JobClient jobClient = new JobClient(conf)-->Line_23 $$ RunningJob job = jobClient.submitJob(conf)[ FD ]
