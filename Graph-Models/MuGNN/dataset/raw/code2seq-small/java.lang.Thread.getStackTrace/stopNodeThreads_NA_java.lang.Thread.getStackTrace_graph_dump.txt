Line_16 $$ String name = thread.getName()-->Line_17 $$ if (name.contains(nodeThreadNamePart)) [ FD ]
Line_12 $$ for (Thread thread : allThreads) -->Line_22 $$ for (StackTraceElement stackElement : thread.getStackTrace()) [ FD ]
Line_11 $$ final String nodeThreadNamePart = "[" + node + "]"-->Line_17 $$ if (name.contains(nodeThreadNamePart)) [ FD ]
Line_5 $$ allThreads = new Thread[Thread.activeCount()]-->Line_4 $$ while (allThreads == null) [ FD ]
Line_7 $$ allThreads = null-->Line_4 $$ while (allThreads == null) [ FD ]
Line_23 $$ String className = stackElement.getClassName()-->Line_25 $$ if (unsafePattern.matcher(className).find()) [ FD ]
Line_22 $$ for (StackTraceElement stackElement : thread.getStackTrace()) -->Line_23 $$ String className = stackElement.getClassName()[ FD ]
Line_5 $$ allThreads = new Thread[Thread.activeCount()]-->Line_6 $$ if (Thread.enumerate(allThreads) > allThreads.length) [ FD ]
Line_3 $$ Thread[] allThreads = null-->Line_4 $$ while (allThreads == null) [ FD ]
Line_24 $$ for (Pattern unsafePattern : unsafeClasses) -->Line_25 $$ if (unsafePattern.matcher(className).find()) [ FD ]
Line_2 $$ protected boolean stopNodeThreads(String node, Set<Thread> nodeThreads) -->Line_18 $$ if (thread.isAlive() && nodeThreads.add(thread)) [ FD ]
Line_12 $$ for (Thread thread : allThreads) -->Line_33 $$ nodeThreads.remove(thread)[ FD ]
Line_3 $$ Thread[] allThreads = null-->Line_7 $$ allThreads = null[ FD ]
Line_3 $$ Thread[] allThreads = null-->Line_5 $$ allThreads = new Thread[Thread.activeCount()][ FD ]
Line_21 $$ boolean safe = true-->Line_31 $$ if (!safe) [ FD ]
Line_17 $$ if (name.contains(nodeThreadNamePart)) -->Line_18 $$ if (thread.isAlive() && nodeThreads.add(thread)) [ CD ]
Line_10 $$ boolean stopped = false-->Line_19 $$ stopped = true[ FD ]
Line_18 $$ if (thread.isAlive() && nodeThreads.add(thread)) -->Line_21 $$ boolean safe = true[ CD ]
Line_3 $$ Thread[] allThreads = null-->Line_6 $$ if (Thread.enumerate(allThreads) > allThreads.length) [ FD ]
Line_2 $$ protected boolean stopNodeThreads(String node, Set<Thread> nodeThreads) -->Line_38 $$ return stopped[ CD ]
Line_26 $$ safe = false-->Line_31 $$ if (!safe) [ FD ]
Line_12 $$ for (Thread thread : allThreads) -->Line_16 $$ String name = thread.getName()[ FD ]
Line_18 $$ if (thread.isAlive() && nodeThreads.add(thread)) -->Line_19 $$ stopped = true[ CD ]
Line_4 $$ while (allThreads == null) -->Line_5 $$ allThreads = new Thread[Thread.activeCount()][ CD ]
Line_2 $$ protected boolean stopNodeThreads(String node, Set<Thread> nodeThreads) -->Line_11 $$ final String nodeThreadNamePart = "[" + node + "]"[ CD ]
Line_5 $$ allThreads = new Thread[Thread.activeCount()]-->Line_7 $$ allThreads = null[ FD ]
Line_6 $$ if (Thread.enumerate(allThreads) > allThreads.length) -->Line_7 $$ allThreads = null[ CD ]
Line_31 $$ if (!safe) -->Line_32 $$ thread.resume()[ CD ]
Line_12 $$ for (Thread thread : allThreads) -->Line_18 $$ if (thread.isAlive() && nodeThreads.add(thread)) [ FD ]
Line_31 $$ if (!safe) -->Line_33 $$ nodeThreads.remove(thread)[ CD ]
Line_18 $$ if (thread.isAlive() && nodeThreads.add(thread)) -->Line_20 $$ thread.suspend()[ CD ]
Line_4 $$ while (allThreads == null) -->Line_6 $$ if (Thread.enumerate(allThreads) > allThreads.length) [ CD ]
Line_21 $$ boolean safe = true-->Line_26 $$ safe = false[ FD ]
Line_2 $$ protected boolean stopNodeThreads(String node, Set<Thread> nodeThreads) -->Line_10 $$ boolean stopped = false[ CD ]
Line_2 $$ protected boolean stopNodeThreads(String node, Set<Thread> nodeThreads) -->Line_3 $$ Thread[] allThreads = null[ CD ]
Line_12 $$ for (Thread thread : allThreads) -->Line_13 $$ if (thread == null) [ FD ]
Line_2 $$ protected boolean stopNodeThreads(String node, Set<Thread> nodeThreads) -->Line_33 $$ nodeThreads.remove(thread)[ FD ]
Line_2 $$ protected boolean stopNodeThreads(String node, Set<Thread> nodeThreads) -->Line_4 $$ while (allThreads == null) [ CD ]
Line_18 $$ if (thread.isAlive() && nodeThreads.add(thread)) -->Line_31 $$ if (!safe) [ CD ]
Line_7 $$ allThreads = null-->Line_6 $$ if (Thread.enumerate(allThreads) > allThreads.length) [ FD ]
Line_12 $$ for (Thread thread : allThreads) -->Line_20 $$ thread.suspend()[ FD ]
Line_12 $$ for (Thread thread : allThreads) -->Line_32 $$ thread.resume()[ FD ]
Line_25 $$ if (unsafePattern.matcher(className).find()) -->Line_26 $$ safe = false[ CD ]
