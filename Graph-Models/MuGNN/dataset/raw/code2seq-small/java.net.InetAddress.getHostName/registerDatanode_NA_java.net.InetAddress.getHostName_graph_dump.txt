Line_2 $$ public void registerDatanode(DatanodeRegistration nodeReg) throws DisallowedDatanodeException, UnresolvedTopologyException -->Line_20 $$ NameNode.stateChangeLog.info("BLOCK* registerDatanode: from " + nodeReg + " storage " + nodeReg.getDatanodeUuid())[ FD ]
Line_37 $$ boolean success = false-->Line_82 $$ success = true[ FD ]
Line_21 $$ DatanodeDescriptor nodeS = getDatanode(nodeReg.getDatanodeUuid())-->Line_48 $$ nodeS.setDependentHostNames(getNetworkDependencies(nodeS))[ FD ]
Line_2 $$ public void registerDatanode(DatanodeRegistration nodeReg) throws DisallowedDatanodeException, UnresolvedTopologyException -->Line_22 $$ DatanodeDescriptor nodeN = host2DatanodeMap.getDatanodeByXferAddr(nodeReg.getIpAddr(), nodeReg.getXferPort())[ FD ]
Line_3 $$ InetAddress dnAddress = Server.getRemoteIp()-->Line_4 $$ if (dnAddress != null) [ FD ]
Line_2 $$ public void registerDatanode(DatanodeRegistration nodeReg) throws DisallowedDatanodeException, UnresolvedTopologyException -->Line_78 $$ nodeDescr.setSoftwareVersion(nodeReg.getSoftwareVersion())[ FD ]
Line_23 $$ if (nodeN != null && nodeN != nodeS) -->Line_26 $$ wipeDatanode(nodeN)[ CD ]
Line_4 $$ if (dnAddress != null) -->Line_13 $$ nodeReg.setPeerHostName(hostname)[ CD ]
Line_57 $$ success = true-->Line_59 $$ if (!success) [ FD ]
Line_21 $$ DatanodeDescriptor nodeS = getDatanode(nodeReg.getDatanodeUuid())-->Line_45 $$ nodeS.setDisallowed(false)[ FD ]
Line_67 $$ DatanodeDescriptor nodeDescr = new DatanodeDescriptor(nodeReg, NetworkTopology.DEFAULT_RACK)-->Line_78 $$ nodeDescr.setSoftwareVersion(nodeReg.getSoftwareVersion())[ FD ]
Line_22 $$ DatanodeDescriptor nodeN = host2DatanodeMap.getDatanodeByXferAddr(nodeReg.getIpAddr(), nodeReg.getXferPort())-->Line_25 $$ removeDatanode(nodeN)[ FD ]
Line_4 $$ if (dnAddress != null) -->Line_5 $$ String hostname = dnAddress.getHostName()[ CD ]
Line_3 $$ InetAddress dnAddress = Server.getRemoteIp()-->Line_5 $$ String hostname = dnAddress.getHostName()[ FD ]
Line_21 $$ DatanodeDescriptor nodeS = getDatanode(nodeReg.getDatanodeUuid())-->Line_55 $$ incrementVersionCount(nodeS.getSoftwareVersion())[ FD ]
Line_37 $$ boolean success = false-->Line_57 $$ success = true[ FD ]
Line_23 $$ if (nodeN != null && nodeN != nodeS) -->Line_24 $$ NameNode.LOG.info("BLOCK* registerDatanode: " + nodeN)[ CD ]
Line_23 $$ if (nodeN != null && nodeN != nodeS) -->Line_27 $$ nodeN = null[ CD ]
Line_37 $$ boolean success = false-->Line_85 $$ if (!success) [ FD ]
Line_2 $$ public void registerDatanode(DatanodeRegistration nodeReg) throws DisallowedDatanodeException, UnresolvedTopologyException -->Line_83 $$ incrementVersionCount(nodeReg.getSoftwareVersion())[ FD ]
Line_67 $$ DatanodeDescriptor nodeDescr = new DatanodeDescriptor(nodeReg, NetworkTopology.DEFAULT_RACK)-->Line_77 $$ networktopology.add(nodeDescr)[ FD ]
Line_7 $$ if (checkIpHostnameInRegistration && !isNameResolved(dnAddress)) -->Line_9 $$ LOG.warn("Unresolved datanode registration: " + message)[ CD ]
Line_22 $$ DatanodeDescriptor nodeN = host2DatanodeMap.getDatanodeByXferAddr(nodeReg.getIpAddr(), nodeReg.getXferPort())-->Line_27 $$ nodeN = null[ FD ]
Line_92 $$ List<String> invalidNodeNames = new ArrayList<String>(3)-->Line_93 $$ invalidNodeNames.add(nodeReg.getIpAddr())[ FD ]
Line_21 $$ DatanodeDescriptor nodeS = getDatanode(nodeReg.getDatanodeUuid())-->Line_56 $$ checkDecommissioning(nodeS)[ FD ]
Line_46 $$ if (this.rejectUnresolvedTopologyDN) -->Line_47 $$ nodeS.setNetworkLocation(resolveNetworkLocation(nodeS))[ CD ]
Line_27 $$ nodeN = null-->Line_30 $$ if (nodeN == nodeS) [ FD ]
Line_59 $$ if (!success) -->Line_62 $$ countSoftwareVersions()[ CD ]
Line_21 $$ DatanodeDescriptor nodeS = getDatanode(nodeReg.getDatanodeUuid())-->Line_41 $$ decrementVersionCount(nodeS.getSoftwareVersion())[ FD ]
Line_21 $$ DatanodeDescriptor nodeS = getDatanode(nodeReg.getDatanodeUuid())-->Line_29 $$ if (nodeS != null) [ FD ]
Line_21 $$ DatanodeDescriptor nodeS = getDatanode(nodeReg.getDatanodeUuid())-->Line_30 $$ if (nodeN == nodeS) [ FD ]
Line_21 $$ DatanodeDescriptor nodeS = getDatanode(nodeReg.getDatanodeUuid())-->Line_54 $$ heartbeatManager.register(nodeS)[ FD ]
Line_70 $$ if (this.rejectUnresolvedTopologyDN) -->Line_71 $$ nodeDescr.setNetworkLocation(resolveNetworkLocation(nodeDescr))[ CD ]
Line_70 $$ if (this.rejectUnresolvedTopologyDN) -->Line_74 $$ nodeDescr.setNetworkLocation(resolveNetworkLocationWithFallBackToDefaultLocation(nodeDescr))[ CD ]
Line_85 $$ if (!success) -->Line_87 $$ wipeDatanode(nodeDescr)[ CD ]
Line_6 $$ String ip = dnAddress.getHostAddress()-->Line_12 $$ nodeReg.setIpAddr(ip)[ FD ]
Line_70 $$ if (this.rejectUnresolvedTopologyDN) -->Line_72 $$ nodeDescr.setDependentHostNames(getNetworkDependencies(nodeDescr))[ CD ]
Line_7 $$ if (checkIpHostnameInRegistration && !isNameResolved(dnAddress)) -->Line_8 $$ final String message = "hostname cannot be resolved (ip=" + ip + ", hostname=" + hostname + ")"[ CD ]
Line_21 $$ DatanodeDescriptor nodeS = getDatanode(nodeReg.getDatanodeUuid())-->Line_53 $$ getNetworkTopology().add(nodeS)[ FD ]
Line_2 $$ public void registerDatanode(DatanodeRegistration nodeReg) throws DisallowedDatanodeException, UnresolvedTopologyException -->Line_12 $$ nodeReg.setIpAddr(ip)[ FD ]
Line_2 $$ public void registerDatanode(DatanodeRegistration nodeReg) throws DisallowedDatanodeException, UnresolvedTopologyException -->Line_3 $$ InetAddress dnAddress = Server.getRemoteIp()[ CD ]
Line_4 $$ if (dnAddress != null) -->Line_6 $$ String ip = dnAddress.getHostAddress()[ CD ]
Line_67 $$ DatanodeDescriptor nodeDescr = new DatanodeDescriptor(nodeReg, NetworkTopology.DEFAULT_RACK)-->Line_81 $$ heartbeatManager.addDatanode(nodeDescr)[ FD ]
Line_21 $$ DatanodeDescriptor nodeS = getDatanode(nodeReg.getDatanodeUuid())-->Line_40 $$ if (shouldCountVersion(nodeS)) [ FD ]
Line_92 $$ List<String> invalidNodeNames = new ArrayList<String>(3)-->Line_96 $$ dnsToSwitchMapping.reloadCachedMappings(invalidNodeNames)[ FD ]
Line_85 $$ if (!success) -->Line_88 $$ countSoftwareVersions()[ CD ]
Line_92 $$ List<String> invalidNodeNames = new ArrayList<String>(3)-->Line_94 $$ invalidNodeNames.add(nodeReg.getHostName())[ FD ]
Line_92 $$ List<String> invalidNodeNames = new ArrayList<String>(3)-->Line_95 $$ invalidNodeNames.add(nodeReg.getPeerHostName())[ FD ]
Line_5 $$ String hostname = dnAddress.getHostName()-->Line_13 $$ nodeReg.setPeerHostName(hostname)[ FD ]
Line_67 $$ DatanodeDescriptor nodeDescr = new DatanodeDescriptor(nodeReg, NetworkTopology.DEFAULT_RACK)-->Line_87 $$ wipeDatanode(nodeDescr)[ FD ]
Line_2 $$ public void registerDatanode(DatanodeRegistration nodeReg) throws DisallowedDatanodeException, UnresolvedTopologyException -->Line_21 $$ DatanodeDescriptor nodeS = getDatanode(nodeReg.getDatanodeUuid())[ FD ]
Line_2 $$ public void registerDatanode(DatanodeRegistration nodeReg) throws DisallowedDatanodeException, UnresolvedTopologyException -->Line_95 $$ invalidNodeNames.add(nodeReg.getPeerHostName())[ FD ]
Line_21 $$ DatanodeDescriptor nodeS = getDatanode(nodeReg.getDatanodeUuid())-->Line_44 $$ nodeS.setSoftwareVersion(nodeReg.getSoftwareVersion())[ FD ]
Line_2 $$ public void registerDatanode(DatanodeRegistration nodeReg) throws DisallowedDatanodeException, UnresolvedTopologyException -->Line_16 $$ nodeReg.setExportedKeys(blockManager.getBlockKeys())[ FD ]
Line_2 $$ public void registerDatanode(DatanodeRegistration nodeReg) throws DisallowedDatanodeException, UnresolvedTopologyException -->Line_13 $$ nodeReg.setPeerHostName(hostname)[ FD ]
Line_2 $$ public void registerDatanode(DatanodeRegistration nodeReg) throws DisallowedDatanodeException, UnresolvedTopologyException -->Line_17 $$ if (!hostFileManager.isIncluded(nodeReg)) [ FD ]
Line_67 $$ DatanodeDescriptor nodeDescr = new DatanodeDescriptor(nodeReg, NetworkTopology.DEFAULT_RACK)-->Line_79 $$ addDatanode(nodeDescr)[ FD ]
Line_57 $$ success = true-->Line_82 $$ success = true[ FD ]
Line_37 $$ boolean success = false-->Line_59 $$ if (!success) [ FD ]
Line_30 $$ if (nodeN == nodeS) -->Line_35 $$ NameNode.stateChangeLog.info("BLOCK* registerDatanode: " + nodeS + " is replaced by " + nodeReg + " with the same storageID " + nodeReg.getDatanodeUuid())[ CD ]
Line_67 $$ DatanodeDescriptor nodeDescr = new DatanodeDescriptor(nodeReg, NetworkTopology.DEFAULT_RACK)-->Line_74 $$ nodeDescr.setNetworkLocation(resolveNetworkLocationWithFallBackToDefaultLocation(nodeDescr))[ FD ]
Line_21 $$ DatanodeDescriptor nodeS = getDatanode(nodeReg.getDatanodeUuid())-->Line_47 $$ nodeS.setNetworkLocation(resolveNetworkLocation(nodeS))[ FD ]
Line_4 $$ if (dnAddress != null) -->Line_7 $$ if (checkIpHostnameInRegistration && !isNameResolved(dnAddress)) [ CD ]
Line_2 $$ public void registerDatanode(DatanodeRegistration nodeReg) throws DisallowedDatanodeException, UnresolvedTopologyException -->Line_4 $$ if (dnAddress != null) [ CD ]
Line_29 $$ if (nodeS != null) -->Line_37 $$ boolean success = false[ CD ]
Line_70 $$ if (this.rejectUnresolvedTopologyDN) -->Line_75 $$ nodeDescr.setDependentHostNames(getNetworkDependenciesWithDefault(nodeDescr))[ CD ]
Line_29 $$ if (nodeS != null) -->Line_30 $$ if (nodeN == nodeS) [ CD ]
Line_85 $$ if (!success) -->Line_86 $$ removeDatanode(nodeDescr)[ CD ]
Line_59 $$ if (!success) -->Line_60 $$ removeDatanode(nodeS)[ CD ]
Line_21 $$ DatanodeDescriptor nodeS = getDatanode(nodeReg.getDatanodeUuid())-->Line_50 $$ nodeS.setNetworkLocation(resolveNetworkLocationWithFallBackToDefaultLocation(nodeS))[ FD ]
Line_67 $$ DatanodeDescriptor nodeDescr = new DatanodeDescriptor(nodeReg, NetworkTopology.DEFAULT_RACK)-->Line_80 $$ checkDecommissioning(nodeDescr)[ FD ]
Line_82 $$ success = true-->Line_85 $$ if (!success) [ FD ]
Line_22 $$ DatanodeDescriptor nodeN = host2DatanodeMap.getDatanodeByXferAddr(nodeReg.getIpAddr(), nodeReg.getXferPort())-->Line_26 $$ wipeDatanode(nodeN)[ FD ]
Line_2 $$ public void registerDatanode(DatanodeRegistration nodeReg) throws DisallowedDatanodeException, UnresolvedTopologyException -->Line_43 $$ nodeS.updateRegInfo(nodeReg)[ FD ]
Line_21 $$ DatanodeDescriptor nodeS = getDatanode(nodeReg.getDatanodeUuid())-->Line_60 $$ removeDatanode(nodeS)[ FD ]
Line_2 $$ public void registerDatanode(DatanodeRegistration nodeReg) throws DisallowedDatanodeException, UnresolvedTopologyException -->Line_44 $$ nodeS.setSoftwareVersion(nodeReg.getSoftwareVersion())[ FD ]
Line_21 $$ DatanodeDescriptor nodeS = getDatanode(nodeReg.getDatanodeUuid())-->Line_39 $$ getNetworkTopology().remove(nodeS)[ FD ]
Line_46 $$ if (this.rejectUnresolvedTopologyDN) -->Line_48 $$ nodeS.setDependentHostNames(getNetworkDependencies(nodeS))[ CD ]
Line_46 $$ if (this.rejectUnresolvedTopologyDN) -->Line_50 $$ nodeS.setNetworkLocation(resolveNetworkLocationWithFallBackToDefaultLocation(nodeS))[ CD ]
Line_57 $$ success = true-->Line_85 $$ if (!success) [ FD ]
Line_21 $$ DatanodeDescriptor nodeS = getDatanode(nodeReg.getDatanodeUuid())-->Line_51 $$ nodeS.setDependentHostNames(getNetworkDependenciesWithDefault(nodeS))[ FD ]
Line_29 $$ if (nodeS != null) -->Line_65 $$ return[ CD ]
Line_3 $$ InetAddress dnAddress = Server.getRemoteIp()-->Line_7 $$ if (checkIpHostnameInRegistration && !isNameResolved(dnAddress)) [ FD ]
Line_2 $$ public void registerDatanode(DatanodeRegistration nodeReg) throws DisallowedDatanodeException, UnresolvedTopologyException -->Line_94 $$ invalidNodeNames.add(nodeReg.getHostName())[ FD ]
Line_4 $$ if (dnAddress != null) -->Line_12 $$ nodeReg.setIpAddr(ip)[ CD ]
Line_59 $$ if (!success) -->Line_61 $$ wipeDatanode(nodeS)[ CD ]
Line_30 $$ if (nodeN == nodeS) -->Line_31 $$ if (NameNode.stateChangeLog.isDebugEnabled()) [ CD ]
Line_3 $$ InetAddress dnAddress = Server.getRemoteIp()-->Line_6 $$ String ip = dnAddress.getHostAddress()[ FD ]
Line_2 $$ public void registerDatanode(DatanodeRegistration nodeReg) throws DisallowedDatanodeException, UnresolvedTopologyException -->Line_93 $$ invalidNodeNames.add(nodeReg.getIpAddr())[ FD ]
Line_40 $$ if (shouldCountVersion(nodeS)) -->Line_41 $$ decrementVersionCount(nodeS.getSoftwareVersion())[ CD ]
Line_21 $$ DatanodeDescriptor nodeS = getDatanode(nodeReg.getDatanodeUuid())-->Line_61 $$ wipeDatanode(nodeS)[ FD ]
Line_21 $$ DatanodeDescriptor nodeS = getDatanode(nodeReg.getDatanodeUuid())-->Line_43 $$ nodeS.updateRegInfo(nodeReg)[ FD ]
Line_67 $$ DatanodeDescriptor nodeDescr = new DatanodeDescriptor(nodeReg, NetworkTopology.DEFAULT_RACK)-->Line_72 $$ nodeDescr.setDependentHostNames(getNetworkDependencies(nodeDescr))[ FD ]
Line_67 $$ DatanodeDescriptor nodeDescr = new DatanodeDescriptor(nodeReg, NetworkTopology.DEFAULT_RACK)-->Line_86 $$ removeDatanode(nodeDescr)[ FD ]
Line_67 $$ DatanodeDescriptor nodeDescr = new DatanodeDescriptor(nodeReg, NetworkTopology.DEFAULT_RACK)-->Line_75 $$ nodeDescr.setDependentHostNames(getNetworkDependenciesWithDefault(nodeDescr))[ FD ]
Line_67 $$ DatanodeDescriptor nodeDescr = new DatanodeDescriptor(nodeReg, NetworkTopology.DEFAULT_RACK)-->Line_71 $$ nodeDescr.setNetworkLocation(resolveNetworkLocation(nodeDescr))[ FD ]
Line_23 $$ if (nodeN != null && nodeN != nodeS) -->Line_25 $$ removeDatanode(nodeN)[ CD ]
Line_31 $$ if (NameNode.stateChangeLog.isDebugEnabled()) -->Line_32 $$ NameNode.stateChangeLog.debug("BLOCK* registerDatanode: " + "node restarted.")[ CD ]
Line_46 $$ if (this.rejectUnresolvedTopologyDN) -->Line_51 $$ nodeS.setDependentHostNames(getNetworkDependenciesWithDefault(nodeS))[ CD ]
Line_22 $$ DatanodeDescriptor nodeN = host2DatanodeMap.getDatanodeByXferAddr(nodeReg.getIpAddr(), nodeReg.getXferPort())-->Line_30 $$ if (nodeN == nodeS) [ FD ]
Line_2 $$ public void registerDatanode(DatanodeRegistration nodeReg) throws DisallowedDatanodeException, UnresolvedTopologyException -->Line_35 $$ NameNode.stateChangeLog.info("BLOCK* registerDatanode: " + nodeS + " is replaced by " + nodeReg + " with the same storageID " + nodeReg.getDatanodeUuid())[ FD ]
