Line_11 $$ StringBuilder sb = new StringBuilder()-->Line_14 $$ sb.append(",").append(i.getCanonicalHostName())[ FD ]
Line_27 $$ FileSystem fileSystem = dfsCluster.getFileSystem()-->Line_34 $$ String nnURI = fileSystem.getUri().toString()[ FD ]
Line_13 $$ for (InetAddress i : InetAddress.getAllByName(InetAddress.getLocalHost().getHostName())) -->Line_14 $$ sb.append(",").append(i.getCanonicalHostName())[ FD ]
Line_22 $$ String[] userGroups = new String[] -->Line_24 $$ UserGroupInformation.createUserForTesting("u1", userGroups)[ FD ]
Line_2 $$ protected void setUp() throws Exception -->Line_17 $$ conf.set("dfs.block.access.token.enable", "false")[ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_34 $$ String nnURI = fileSystem.getUri().toString()[ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_33 $$ fileSystem.setPermission(new Path("/hadoop/mapred/system"), FsPermission.valueOf("-rwx------"))[ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_23 $$ UserGroupInformation.createUserForTesting(proxyUser, userGroups)[ CD ]
Line_9 $$ String proxyUser = System.getProperty("user.name")-->Line_23 $$ UserGroupInformation.createUserForTesting(proxyUser, userGroups)[ FD ]
Line_16 $$ JobConf conf = new JobConf()-->Line_17 $$ conf.set("dfs.block.access.token.enable", "false")[ FD ]
Line_4 $$ if (System.getProperty("hadoop.log.dir") == null) -->Line_5 $$ System.setProperty("hadoop.log.dir", "/tmp")[ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_8 $$ int dataNodes = 2[ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_35 $$ int numDirs = 1[ CD ]
Line_22 $$ String[] userGroups = new String[] -->Line_23 $$ UserGroupInformation.createUserForTesting(proxyUser, userGroups)[ FD ]
Line_2 $$ protected void setUp() throws Exception -->Line_28 $$ fileSystem.mkdirs(new Path("/tmp"))[ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_37 $$ String[] hosts = null[ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_39 $$ ProxyUsers.refreshSuperUserGroupsConfiguration(conf)[ CD ]
Line_16 $$ JobConf conf = new JobConf()-->Line_18 $$ conf.set("dfs.permissions", "true")[ FD ]
Line_2 $$ protected void setUp() throws Exception -->Line_29 $$ fileSystem.mkdirs(new Path("/user"))[ CD ]
Line_10 $$ String proxyGroup = "g"-->Line_21 $$ conf.set("hadoop.proxyuser." + proxyUser + ".groups", proxyGroup)[ FD ]
Line_2 $$ protected void setUp() throws Exception -->Line_32 $$ fileSystem.setPermission(new Path("/user"), FsPermission.valueOf("-rwxrwxrwx"))[ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_12 $$ sb.append("127.0.0.1,localhost")[ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_11 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_31 $$ fileSystem.setPermission(new Path("/tmp"), FsPermission.valueOf("-rwxrwxrwx"))[ CD ]
Line_11 $$ StringBuilder sb = new StringBuilder()-->Line_12 $$ sb.append("127.0.0.1,localhost")[ FD ]
Line_2 $$ protected void setUp() throws Exception -->Line_36 $$ String[] racks = null[ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_24 $$ UserGroupInformation.createUserForTesting("u1", userGroups)[ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_3 $$ super.setUp()[ CD ]
Line_16 $$ JobConf conf = new JobConf()-->Line_39 $$ ProxyUsers.refreshSuperUserGroupsConfiguration(conf)[ FD ]
Line_27 $$ FileSystem fileSystem = dfsCluster.getFileSystem()-->Line_33 $$ fileSystem.setPermission(new Path("/hadoop/mapred/system"), FsPermission.valueOf("-rwx------"))[ FD ]
Line_16 $$ JobConf conf = new JobConf()-->Line_21 $$ conf.set("hadoop.proxyuser." + proxyUser + ".groups", proxyGroup)[ FD ]
Line_2 $$ protected void setUp() throws Exception -->Line_22 $$ String[] userGroups = new String[] [ CD ]
Line_27 $$ FileSystem fileSystem = dfsCluster.getFileSystem()-->Line_30 $$ fileSystem.mkdirs(new Path("/hadoop/mapred/system"))[ FD ]
Line_11 $$ StringBuilder sb = new StringBuilder()-->Line_20 $$ conf.set("hadoop.proxyuser." + proxyUser + ".hosts", sb.toString())[ FD ]
Line_2 $$ protected void setUp() throws Exception -->Line_9 $$ String proxyUser = System.getProperty("user.name")[ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_4 $$ if (System.getProperty("hadoop.log.dir") == null) [ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_30 $$ fileSystem.mkdirs(new Path("/hadoop/mapred/system"))[ CD ]
Line_27 $$ FileSystem fileSystem = dfsCluster.getFileSystem()-->Line_31 $$ fileSystem.setPermission(new Path("/tmp"), FsPermission.valueOf("-rwxrwxrwx"))[ FD ]
Line_27 $$ FileSystem fileSystem = dfsCluster.getFileSystem()-->Line_32 $$ fileSystem.setPermission(new Path("/user"), FsPermission.valueOf("-rwxrwxrwx"))[ FD ]
Line_2 $$ protected void setUp() throws Exception -->Line_20 $$ conf.set("hadoop.proxyuser." + proxyUser + ".hosts", sb.toString())[ CD ]
Line_8 $$ int dataNodes = 2-->Line_26 $$ dfsCluster = new MiniDFSCluster.Builder(conf).numDataNodes(dataNodes).build()[ FD ]
Line_2 $$ protected void setUp() throws Exception -->Line_26 $$ dfsCluster = new MiniDFSCluster.Builder(conf).numDataNodes(dataNodes).build()[ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_27 $$ FileSystem fileSystem = dfsCluster.getFileSystem()[ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_18 $$ conf.set("dfs.permissions", "true")[ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_25 $$ UserGroupInformation.createUserForTesting("u2", new String[] [ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_10 $$ String proxyGroup = "g"[ CD ]
Line_27 $$ FileSystem fileSystem = dfsCluster.getFileSystem()-->Line_29 $$ fileSystem.mkdirs(new Path("/user"))[ FD ]
Line_16 $$ JobConf conf = new JobConf()-->Line_19 $$ conf.set("hadoop.security.authentication", "simple")[ FD ]
Line_2 $$ protected void setUp() throws Exception -->Line_16 $$ JobConf conf = new JobConf()[ CD ]
Line_16 $$ JobConf conf = new JobConf()-->Line_20 $$ conf.set("hadoop.proxyuser." + proxyUser + ".hosts", sb.toString())[ FD ]
Line_27 $$ FileSystem fileSystem = dfsCluster.getFileSystem()-->Line_28 $$ fileSystem.mkdirs(new Path("/tmp"))[ FD ]
Line_2 $$ protected void setUp() throws Exception -->Line_21 $$ conf.set("hadoop.proxyuser." + proxyUser + ".groups", proxyGroup)[ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_7 $$ int taskTrackers = 2[ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_19 $$ conf.set("hadoop.security.authentication", "simple")[ CD ]
