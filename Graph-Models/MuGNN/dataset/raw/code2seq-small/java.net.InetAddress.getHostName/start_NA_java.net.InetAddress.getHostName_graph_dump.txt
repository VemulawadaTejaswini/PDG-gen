Line_3 $$ ClassLoader origTCCL = org.wildfly.security.manager.WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()-->Line_141 $$ org.wildfly.security.manager.WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(origTCCL)[ FD ]
Line_107 $$ if (jgroupFactories.containsKey(key)) -->Line_109 $$ String channelName = jgroupsChannels.get(key)[ CD ]
Line_7 $$ if (supportsAIO == false) -->Line_14 $$ configuration.setJournalType(JournalType.NIO)[ CD ]
Line_34 $$ OutboundSocketBinding binding = outboundSocketBindings.get(name)-->Line_48 $$ port = binding.getDestinationPort()[ FD ]
Line_32 $$ String host-->Line_57 $$ tc.getParams().put(HOST, host)[ FD ]
Line_82 $$ final String key = "broadcast" + name-->Line_83 $$ if (jgroupFactories.containsKey(key)) [ FD ]
Line_34 $$ OutboundSocketBinding binding = outboundSocketBindings.get(name)-->Line_94 $$ binding.getSocketBindings().getNamedRegistry().registerBinding(ManagedBinding.Factory.createSimpleManagedBinding(binding))[ FD ]
Line_65 $$ if (socketRef != null) -->Line_66 $$ String name = socketRef.toString()[ CD ]
Line_86 $$ JChannel channel = (JChannel) channelFactory.createChannel(channelName)-->Line_113 $$ channels.put(channelName, channel)[ FD ]
Line_86 $$ JChannel channel = (JChannel) channelFactory.createChannel(channelName)-->Line_115 $$ config = DiscoveryGroupAdd.createDiscoveryGroupConfiguration(name, entry.getValue(), channel, channelName)[ FD ]
Line_33 $$ int port-->Line_41 $$ port = sa.getPort()[ FD ]
Line_132 $$ for (Interceptor incomingInterceptor : incomingInterceptors) -->Line_133 $$ server.getServiceRegistry().addIncomingInterceptor(incomingInterceptor)[ FD ]
Line_79 $$ final List<BroadcastGroupConfiguration> newConfigs = new ArrayList<BroadcastGroupConfiguration>()-->Line_88 $$ newConfigs.add(BroadcastGroupAdd.createBroadcastGroupConfiguration(name, config, channel, channelName))[ FD ]
Line_85 $$ String channelName = jgroupsChannels.get(key)-->Line_86 $$ JChannel channel = (JChannel) channelFactory.createChannel(channelName)[ FD ]
Line_83 $$ if (jgroupFactories.containsKey(key)) -->Line_90 $$ final SocketBinding binding = groupBindings.get(key)[ CD ]
Line_32 $$ String host-->Line_45 $$ host = NetworkUtils.canonize(sa.getAddress().getHostAddress())[ FD ]
Line_34 $$ OutboundSocketBinding binding = outboundSocketBindings.get(name)-->Line_53 $$ if (binding.getSourcePort() != null) [ FD ]
Line_35 $$ if (binding == null) -->Line_53 $$ if (binding.getSourcePort() != null) [ CD ]
Line_83 $$ if (jgroupFactories.containsKey(key)) -->Line_91 $$ if (binding == null) [ CD ]
Line_72 $$ InetSocketAddress socketAddress = binding.getSocketAddress()-->Line_73 $$ tc.getParams().put(HOST, socketAddress.getAddress().getHostAddress())[ FD ]
Line_31 $$ String name = socketRef.toString()-->Line_88 $$ newConfigs.add(BroadcastGroupAdd.createBroadcastGroupConfiguration(name, config, channel, channelName))[ FD ]
Line_2 $$ public synchronized void start(final StartContext context) throws StartException -->Line_4 $$ JournalType jtype = configuration.getJournalType()[ CD ]
Line_115 $$ config = DiscoveryGroupAdd.createDiscoveryGroupConfiguration(name, entry.getValue(), channel, channelName)-->Line_121 $$ config = DiscoveryGroupAdd.createDiscoveryGroupConfiguration(name, entry.getValue(), binding)[ FD ]
Line_5 $$ if (jtype == JournalType.ASYNCIO) -->Line_7 $$ if (supportsAIO == false) [ CD ]
Line_82 $$ final String key = "broadcast" + name-->Line_85 $$ String channelName = jgroupsChannels.get(key)[ FD ]
Line_80 $$ for (final BroadcastGroupConfiguration config : broadcastGroups) -->Line_88 $$ newConfigs.add(BroadcastGroupAdd.createBroadcastGroupConfiguration(name, config, channel, channelName))[ FD ]
Line_80 $$ for (final BroadcastGroupConfiguration config : broadcastGroups) -->Line_95 $$ newConfigs.add(BroadcastGroupAdd.createBroadcastGroupConfiguration(name, config, binding))[ FD ]
Line_82 $$ final String key = "broadcast" + name-->Line_107 $$ if (jgroupFactories.containsKey(key)) [ FD ]
Line_34 $$ OutboundSocketBinding binding = outboundSocketBindings.get(name)-->Line_49 $$ host = NetworkUtils.canonize(binding.getUnresolvedDestinationAddress())[ FD ]
Line_31 $$ String name = socketRef.toString()-->Line_121 $$ config = DiscoveryGroupAdd.createDiscoveryGroupConfiguration(name, entry.getValue(), binding)[ FD ]
Line_80 $$ for (final BroadcastGroupConfiguration config : broadcastGroups) -->Line_121 $$ config = DiscoveryGroupAdd.createDiscoveryGroupConfiguration(name, entry.getValue(), binding)[ FD ]
Line_28 $$ for (TransportConfiguration tc : connectors) -->Line_64 $$ Object socketRef = tc.getParams().remove(SOCKET_REF)[ FD ]
Line_2 $$ public synchronized void start(final StartContext context) throws StartException -->Line_5 $$ if (jtype == JournalType.ASYNCIO) [ CD ]
Line_41 $$ port = sa.getPort()-->Line_58 $$ tc.getParams().put(PORT, port)[ FD ]
Line_85 $$ String channelName = jgroupsChannels.get(key)-->Line_115 $$ config = DiscoveryGroupAdd.createDiscoveryGroupConfiguration(name, entry.getValue(), channel, channelName)[ FD ]
Line_34 $$ OutboundSocketBinding binding = outboundSocketBindings.get(name)-->Line_122 $$ binding.getSocketBindings().getNamedRegistry().registerBinding(ManagedBinding.Factory.createSimpleManagedBinding(binding))[ FD ]
Line_8 $$ String osName = System.getProperty("os.name").toLowerCase(Locale.ENGLISH)-->Line_9 $$ if (osName.contains("nux")) [ FD ]
Line_28 $$ for (TransportConfiguration tc : connectors) -->Line_69 $$ throw MessagingLogger.ROOT_LOGGER.failedToFindConnectorSocketBinding(tc.getName())[ FD ]
Line_107 $$ if (jgroupFactories.containsKey(key)) -->Line_111 $$ if (channel == null) [ CD ]
Line_84 $$ ChannelFactory channelFactory = jgroupFactories.get(key)-->Line_86 $$ JChannel channel = (JChannel) channelFactory.createChannel(channelName)[ FD ]
Line_101 $$ if (discoveryGroups != null) -->Line_102 $$ configuration.setDiscoveryGroupConfigurations(new HashMap<String, DiscoveryGroupConfiguration>())[ CD ]
Line_107 $$ if (jgroupFactories.containsKey(key)) -->Line_115 $$ config = DiscoveryGroupAdd.createDiscoveryGroupConfiguration(name, entry.getValue(), channel, channelName)[ CD ]
Line_86 $$ JChannel channel = (JChannel) channelFactory.createChannel(channelName)-->Line_112 $$ channel = (JChannel) channelFactory.createChannel(key)[ FD ]
Line_34 $$ OutboundSocketBinding binding = outboundSocketBindings.get(name)-->Line_71 $$ binding.getSocketBindings().getNamedRegistry().registerBinding(ManagedBinding.Factory.createSimpleManagedBinding(binding))[ FD ]
Line_82 $$ final String key = "broadcast" + name-->Line_108 $$ ChannelFactory channelFactory = jgroupFactories.get(key)[ FD ]
Line_32 $$ String host-->Line_43 $$ host = NetworkUtils.canonize(sa.getAddress().getHostName())[ FD ]
Line_49 $$ host = NetworkUtils.canonize(binding.getUnresolvedDestinationAddress())-->Line_57 $$ tc.getParams().put(HOST, host)[ FD ]
Line_83 $$ if (jgroupFactories.containsKey(key)) -->Line_84 $$ ChannelFactory channelFactory = jgroupFactories.get(key)[ CD ]
Line_85 $$ String channelName = jgroupsChannels.get(key)-->Line_110 $$ JChannel channel = channels.get(channelName)[ FD ]
Line_5 $$ if (jtype == JournalType.ASYNCIO) -->Line_6 $$ boolean supportsAIO = AIOSequentialFileFactory.isSupported()[ CD ]
Line_35 $$ if (binding == null) -->Line_48 $$ port = binding.getDestinationPort()[ CD ]
Line_43 $$ host = NetworkUtils.canonize(sa.getAddress().getHostName())-->Line_45 $$ host = NetworkUtils.canonize(sa.getAddress().getHostAddress())[ FD ]
Line_31 $$ String name = socketRef.toString()-->Line_92 $$ throw MessagingLogger.ROOT_LOGGER.failedToFindBroadcastSocketBinding(name)[ FD ]
Line_85 $$ String channelName = jgroupsChannels.get(key)-->Line_88 $$ newConfigs.add(BroadcastGroupAdd.createBroadcastGroupConfiguration(name, config, channel, channelName))[ FD ]
Line_45 $$ host = NetworkUtils.canonize(sa.getAddress().getHostAddress())-->Line_57 $$ tc.getParams().put(HOST, host)[ FD ]
Line_34 $$ OutboundSocketBinding binding = outboundSocketBindings.get(name)-->Line_51 $$ tc.getParams().put(TransportConstants.LOCAL_ADDRESS_PROP_NAME, NetworkUtils.canonize(binding.getSourceAddress().getHostAddress()))[ FD ]
Line_24 $$ Collection<TransportConfiguration> connectors = configuration.getConnectorConfigurations().values()-->Line_27 $$ if (connectors != null) [ FD ]
Line_35 $$ if (binding == null) -->Line_40 $$ InetSocketAddress sa = socketBinding.getSocketAddress()[ CD ]
Line_103 $$ for (final Map.Entry<String, DiscoveryGroupConfiguration> entry : discoveryGroups.entrySet()) -->Line_104 $$ final String name = entry.getKey()[ FD ]
Line_50 $$ if (binding.getSourceAddress() != null) -->Line_51 $$ tc.getParams().put(TransportConstants.LOCAL_ADDRESS_PROP_NAME, NetworkUtils.canonize(binding.getSourceAddress().getHostAddress()))[ CD ]
Line_42 $$ if (sa.getAddress().isLoopbackAddress()) -->Line_43 $$ host = NetworkUtils.canonize(sa.getAddress().getHostName())[ CD ]
Line_9 $$ if (osName.contains("nux")) -->Line_12 $$ ROOT_LOGGER.aioInfo()[ CD ]
Line_40 $$ InetSocketAddress sa = socketBinding.getSocketAddress()-->Line_42 $$ if (sa.getAddress().isLoopbackAddress()) [ FD ]
Line_43 $$ host = NetworkUtils.canonize(sa.getAddress().getHostName())-->Line_49 $$ host = NetworkUtils.canonize(binding.getUnresolvedDestinationAddress())[ FD ]
Line_43 $$ host = NetworkUtils.canonize(sa.getAddress().getHostName())-->Line_57 $$ tc.getParams().put(HOST, host)[ FD ]
Line_107 $$ if (jgroupFactories.containsKey(key)) -->Line_122 $$ binding.getSocketBindings().getNamedRegistry().registerBinding(ManagedBinding.Factory.createSimpleManagedBinding(binding))[ CD ]
Line_30 $$ if (socketRef != null) -->Line_34 $$ OutboundSocketBinding binding = outboundSocketBindings.get(name)[ CD ]
Line_30 $$ if (socketRef != null) -->Line_58 $$ tc.getParams().put(PORT, port)[ CD ]
Line_84 $$ ChannelFactory channelFactory = jgroupFactories.get(key)-->Line_112 $$ channel = (JChannel) channelFactory.createChannel(key)[ FD ]
Line_34 $$ OutboundSocketBinding binding = outboundSocketBindings.get(name)-->Line_72 $$ InetSocketAddress socketAddress = binding.getSocketAddress()[ FD ]
Line_36 $$ final SocketBinding socketBinding = socketBindings.get(name)-->Line_37 $$ if (socketBinding == null) [ FD ]
Line_34 $$ OutboundSocketBinding binding = outboundSocketBindings.get(name)-->Line_54 $$ tc.getParams().put(TransportConstants.LOCAL_PORT_PROP_NAME, binding.getAbsoluteSourcePort())[ FD ]
Line_135 $$ for (Interceptor outgoingInterceptor : outgoingInterceptors) -->Line_136 $$ server.getServiceRegistry().addOutgoingInterceptor(outgoingInterceptor)[ FD ]
Line_23 $$ Collection<TransportConfiguration> acceptors = configuration.getAcceptorConfigurations()-->Line_62 $$ if (acceptors != null) [ FD ]
Line_80 $$ for (final BroadcastGroupConfiguration config : broadcastGroups) -->Line_81 $$ final String name = config.getName()[ FD ]
Line_107 $$ if (jgroupFactories.containsKey(key)) -->Line_110 $$ JChannel channel = channels.get(channelName)[ CD ]
Line_35 $$ if (binding == null) -->Line_49 $$ host = NetworkUtils.canonize(binding.getUnresolvedDestinationAddress())[ CD ]
Line_35 $$ if (binding == null) -->Line_42 $$ if (sa.getAddress().isLoopbackAddress()) [ CD ]
Line_78 $$ if (broadcastGroups != null) -->Line_79 $$ final List<BroadcastGroupConfiguration> newConfigs = new ArrayList<BroadcastGroupConfiguration>()[ CD ]
Line_34 $$ OutboundSocketBinding binding = outboundSocketBindings.get(name)-->Line_91 $$ if (binding == null) [ FD ]
Line_111 $$ if (channel == null) -->Line_113 $$ channels.put(channelName, channel)[ CD ]
Line_107 $$ if (jgroupFactories.containsKey(key)) -->Line_117 $$ final SocketBinding binding = groupBindings.get(key)[ CD ]
Line_83 $$ if (jgroupFactories.containsKey(key)) -->Line_87 $$ channels.put(channelName, channel)[ CD ]
Line_111 $$ if (channel == null) -->Line_112 $$ channel = (JChannel) channelFactory.createChannel(key)[ CD ]
Line_29 $$ Object socketRef = tc.getParams().remove(SOCKET_REF)-->Line_65 $$ if (socketRef != null) [ FD ]
Line_40 $$ InetSocketAddress sa = socketBinding.getSocketAddress()-->Line_45 $$ host = NetworkUtils.canonize(sa.getAddress().getHostAddress())[ FD ]
Line_82 $$ final String key = "broadcast" + name-->Line_84 $$ ChannelFactory channelFactory = jgroupFactories.get(key)[ FD ]
Line_86 $$ JChannel channel = (JChannel) channelFactory.createChannel(channelName)-->Line_88 $$ newConfigs.add(BroadcastGroupAdd.createBroadcastGroupConfiguration(name, config, channel, channelName))[ FD ]
Line_31 $$ String name = socketRef.toString()-->Line_124 $$ configuration.getDiscoveryGroupConfigurations().put(name, config)[ FD ]
Line_30 $$ if (socketRef != null) -->Line_33 $$ int port[ CD ]
Line_40 $$ InetSocketAddress sa = socketBinding.getSocketAddress()-->Line_43 $$ host = NetworkUtils.canonize(sa.getAddress().getHostName())[ FD ]
Line_79 $$ final List<BroadcastGroupConfiguration> newConfigs = new ArrayList<BroadcastGroupConfiguration>()-->Line_99 $$ configuration.getBroadcastGroupConfigurations().addAll(newConfigs)[ FD ]
Line_4 $$ JournalType jtype = configuration.getJournalType()-->Line_5 $$ if (jtype == JournalType.ASYNCIO) [ FD ]
Line_40 $$ InetSocketAddress sa = socketBinding.getSocketAddress()-->Line_41 $$ port = sa.getPort()[ FD ]
Line_83 $$ if (jgroupFactories.containsKey(key)) -->Line_85 $$ String channelName = jgroupsChannels.get(key)[ CD ]
Line_30 $$ if (socketRef != null) -->Line_32 $$ String host[ CD ]
Line_2 $$ public synchronized void start(final StartContext context) throws StartException -->Line_20 $$ configuration.setJournalDirectory(pathConfig.resolveJournalPath(pathManager))[ CD ]
Line_7 $$ if (supportsAIO == false) -->Line_8 $$ String osName = System.getProperty("os.name").toLowerCase(Locale.ENGLISH)[ CD ]
Line_2 $$ public synchronized void start(final StartContext context) throws StartException -->Line_3 $$ ClassLoader origTCCL = org.wildfly.security.manager.WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()[ CD ]
Line_107 $$ if (jgroupFactories.containsKey(key)) -->Line_108 $$ ChannelFactory channelFactory = jgroupFactories.get(key)[ CD ]
Line_65 $$ if (socketRef != null) -->Line_68 $$ if (binding == null) [ CD ]
Line_28 $$ for (TransportConfiguration tc : connectors) -->Line_51 $$ tc.getParams().put(TransportConstants.LOCAL_ADDRESS_PROP_NAME, NetworkUtils.canonize(binding.getSourceAddress().getHostAddress()))[ FD ]
Line_65 $$ if (socketRef != null) -->Line_71 $$ binding.getSocketBindings().getNamedRegistry().registerBinding(ManagedBinding.Factory.createSimpleManagedBinding(binding))[ CD ]
Line_82 $$ final String key = "broadcast" + name-->Line_117 $$ final SocketBinding binding = groupBindings.get(key)[ FD ]
Line_85 $$ String channelName = jgroupsChannels.get(key)-->Line_87 $$ channels.put(channelName, channel)[ FD ]
Line_2 $$ public synchronized void start(final StartContext context) throws StartException -->Line_17 $$ PathManager pathManager = this.pathManager.getValue()[ CD ]
Line_17 $$ PathManager pathManager = this.pathManager.getValue()-->Line_21 $$ configuration.setPagingDirectory(pathConfig.resolvePagingPath(pathManager))[ FD ]
Line_83 $$ if (jgroupFactories.containsKey(key)) -->Line_88 $$ newConfigs.add(BroadcastGroupAdd.createBroadcastGroupConfiguration(name, config, channel, channelName))[ CD ]
Line_79 $$ final List<BroadcastGroupConfiguration> newConfigs = new ArrayList<BroadcastGroupConfiguration>()-->Line_95 $$ newConfigs.add(BroadcastGroupAdd.createBroadcastGroupConfiguration(name, config, binding))[ FD ]
Line_129 $$ if (ActiveMQDefaultConfiguration.getDefaultClusterPassword().equals(server.getConfiguration().getClusterPassword())) -->Line_130 $$ server.getConfiguration().setClusterPassword(java.util.UUID.randomUUID().toString())[ CD ]
Line_115 $$ config = DiscoveryGroupAdd.createDiscoveryGroupConfiguration(name, entry.getValue(), channel, channelName)-->Line_124 $$ configuration.getDiscoveryGroupConfigurations().put(name, config)[ FD ]
Line_17 $$ PathManager pathManager = this.pathManager.getValue()-->Line_19 $$ configuration.setLargeMessagesDirectory(pathConfig.resolveLargeMessagePath(pathManager))[ FD ]
Line_34 $$ OutboundSocketBinding binding = outboundSocketBindings.get(name)-->Line_95 $$ newConfigs.add(BroadcastGroupAdd.createBroadcastGroupConfiguration(name, config, binding))[ FD ]
Line_35 $$ if (binding == null) -->Line_41 $$ port = sa.getPort()[ CD ]
Line_25 $$ Collection<BroadcastGroupConfiguration> broadcastGroups = configuration.getBroadcastGroupConfigurations()-->Line_78 $$ if (broadcastGroups != null) [ FD ]
Line_28 $$ for (TransportConfiguration tc : connectors) -->Line_74 $$ tc.getParams().put(PORT, socketAddress.getPort())[ FD ]
Line_28 $$ for (TransportConfiguration tc : connectors) -->Line_54 $$ tc.getParams().put(TransportConstants.LOCAL_PORT_PROP_NAME, binding.getAbsoluteSourcePort())[ FD ]
Line_9 $$ if (osName.contains("nux")) -->Line_10 $$ ROOT_LOGGER.aioInfoLinux()[ CD ]
Line_28 $$ for (TransportConfiguration tc : connectors) -->Line_57 $$ tc.getParams().put(HOST, host)[ FD ]
Line_78 $$ if (broadcastGroups != null) -->Line_98 $$ configuration.getBroadcastGroupConfigurations().clear()[ CD ]
Line_35 $$ if (binding == null) -->Line_50 $$ if (binding.getSourceAddress() != null) [ CD ]
Line_31 $$ String name = socketRef.toString()-->Line_95 $$ newConfigs.add(BroadcastGroupAdd.createBroadcastGroupConfiguration(name, config, binding))[ FD ]
Line_65 $$ if (socketRef != null) -->Line_73 $$ tc.getParams().put(HOST, socketAddress.getAddress().getHostAddress())[ CD ]
Line_26 $$ Map<String, DiscoveryGroupConfiguration> discoveryGroups = configuration.getDiscoveryGroupConfigurations()-->Line_101 $$ if (discoveryGroups != null) [ FD ]
Line_42 $$ if (sa.getAddress().isLoopbackAddress()) -->Line_45 $$ host = NetworkUtils.canonize(sa.getAddress().getHostAddress())[ CD ]
Line_65 $$ if (socketRef != null) -->Line_67 $$ SocketBinding binding = socketBindings.get(name)[ CD ]
Line_82 $$ final String key = "broadcast" + name-->Line_112 $$ channel = (JChannel) channelFactory.createChannel(key)[ FD ]
Line_7 $$ if (supportsAIO == false) -->Line_9 $$ if (osName.contains("nux")) [ CD ]
Line_112 $$ channel = (JChannel) channelFactory.createChannel(key)-->Line_115 $$ config = DiscoveryGroupAdd.createDiscoveryGroupConfiguration(name, entry.getValue(), channel, channelName)[ FD ]
Line_103 $$ for (final Map.Entry<String, DiscoveryGroupConfiguration> entry : discoveryGroups.entrySet()) -->Line_121 $$ config = DiscoveryGroupAdd.createDiscoveryGroupConfiguration(name, entry.getValue(), binding)[ FD ]
Line_121 $$ config = DiscoveryGroupAdd.createDiscoveryGroupConfiguration(name, entry.getValue(), binding)-->Line_124 $$ configuration.getDiscoveryGroupConfigurations().put(name, config)[ FD ]
Line_78 $$ if (broadcastGroups != null) -->Line_99 $$ configuration.getBroadcastGroupConfigurations().addAll(newConfigs)[ CD ]
Line_33 $$ int port-->Line_48 $$ port = binding.getDestinationPort()[ FD ]
Line_30 $$ if (socketRef != null) -->Line_31 $$ String name = socketRef.toString()[ CD ]
Line_83 $$ if (jgroupFactories.containsKey(key)) -->Line_95 $$ newConfigs.add(BroadcastGroupAdd.createBroadcastGroupConfiguration(name, config, binding))[ CD ]
Line_29 $$ Object socketRef = tc.getParams().remove(SOCKET_REF)-->Line_30 $$ if (socketRef != null) [ FD ]
Line_85 $$ String channelName = jgroupsChannels.get(key)-->Line_113 $$ channels.put(channelName, channel)[ FD ]
Line_83 $$ if (jgroupFactories.containsKey(key)) -->Line_94 $$ binding.getSocketBindings().getNamedRegistry().registerBinding(ManagedBinding.Factory.createSimpleManagedBinding(binding))[ CD ]
Line_80 $$ for (final BroadcastGroupConfiguration config : broadcastGroups) -->Line_115 $$ config = DiscoveryGroupAdd.createDiscoveryGroupConfiguration(name, entry.getValue(), channel, channelName)[ FD ]
Line_82 $$ final String key = "broadcast" + name-->Line_90 $$ final SocketBinding binding = groupBindings.get(key)[ FD ]
Line_17 $$ PathManager pathManager = this.pathManager.getValue()-->Line_20 $$ configuration.setJournalDirectory(pathConfig.resolveJournalPath(pathManager))[ FD ]
Line_65 $$ if (socketRef != null) -->Line_72 $$ InetSocketAddress socketAddress = binding.getSocketAddress()[ CD ]
Line_103 $$ for (final Map.Entry<String, DiscoveryGroupConfiguration> entry : discoveryGroups.entrySet()) -->Line_115 $$ config = DiscoveryGroupAdd.createDiscoveryGroupConfiguration(name, entry.getValue(), channel, channelName)[ FD ]
Line_83 $$ if (jgroupFactories.containsKey(key)) -->Line_86 $$ JChannel channel = (JChannel) channelFactory.createChannel(channelName)[ CD ]
Line_29 $$ Object socketRef = tc.getParams().remove(SOCKET_REF)-->Line_66 $$ String name = socketRef.toString()[ FD ]
Line_2 $$ public synchronized void start(final StartContext context) throws StartException -->Line_18 $$ configuration.setBindingsDirectory(pathConfig.resolveBindingsPath(pathManager))[ CD ]
Line_35 $$ if (binding == null) -->Line_36 $$ final SocketBinding socketBinding = socketBindings.get(name)[ CD ]
Line_34 $$ OutboundSocketBinding binding = outboundSocketBindings.get(name)-->Line_118 $$ if (binding == null) [ FD ]
Line_65 $$ if (socketRef != null) -->Line_74 $$ tc.getParams().put(PORT, socketAddress.getPort())[ CD ]
Line_35 $$ if (binding == null) -->Line_37 $$ if (socketBinding == null) [ CD ]
Line_34 $$ OutboundSocketBinding binding = outboundSocketBindings.get(name)-->Line_50 $$ if (binding.getSourceAddress() != null) [ FD ]
Line_82 $$ final String key = "broadcast" + name-->Line_109 $$ String channelName = jgroupsChannels.get(key)[ FD ]
Line_28 $$ for (TransportConfiguration tc : connectors) -->Line_29 $$ Object socketRef = tc.getParams().remove(SOCKET_REF)[ FD ]
Line_28 $$ for (TransportConfiguration tc : connectors) -->Line_38 $$ throw MessagingLogger.ROOT_LOGGER.failedToFindConnectorSocketBinding(tc.getName())[ FD ]
Line_28 $$ for (TransportConfiguration tc : connectors) -->Line_58 $$ tc.getParams().put(PORT, port)[ FD ]
Line_41 $$ port = sa.getPort()-->Line_48 $$ port = binding.getDestinationPort()[ FD ]
Line_33 $$ int port-->Line_58 $$ tc.getParams().put(PORT, port)[ FD ]
Line_31 $$ String name = socketRef.toString()-->Line_67 $$ SocketBinding binding = socketBindings.get(name)[ FD ]
Line_34 $$ OutboundSocketBinding binding = outboundSocketBindings.get(name)-->Line_121 $$ config = DiscoveryGroupAdd.createDiscoveryGroupConfiguration(name, entry.getValue(), binding)[ FD ]
Line_86 $$ JChannel channel = (JChannel) channelFactory.createChannel(channelName)-->Line_111 $$ if (channel == null) [ FD ]
Line_36 $$ final SocketBinding socketBinding = socketBindings.get(name)-->Line_40 $$ InetSocketAddress sa = socketBinding.getSocketAddress()[ FD ]
Line_80 $$ for (final BroadcastGroupConfiguration config : broadcastGroups) -->Line_124 $$ configuration.getDiscoveryGroupConfigurations().put(name, config)[ FD ]
Line_34 $$ OutboundSocketBinding binding = outboundSocketBindings.get(name)-->Line_68 $$ if (binding == null) [ FD ]
Line_72 $$ InetSocketAddress socketAddress = binding.getSocketAddress()-->Line_74 $$ tc.getParams().put(PORT, socketAddress.getPort())[ FD ]
Line_17 $$ PathManager pathManager = this.pathManager.getValue()-->Line_18 $$ configuration.setBindingsDirectory(pathConfig.resolveBindingsPath(pathManager))[ FD ]
Line_48 $$ port = binding.getDestinationPort()-->Line_58 $$ tc.getParams().put(PORT, port)[ FD ]
Line_28 $$ for (TransportConfiguration tc : connectors) -->Line_73 $$ tc.getParams().put(HOST, socketAddress.getAddress().getHostAddress())[ FD ]
Line_29 $$ Object socketRef = tc.getParams().remove(SOCKET_REF)-->Line_31 $$ String name = socketRef.toString()[ FD ]
Line_2 $$ public synchronized void start(final StartContext context) throws StartException -->Line_21 $$ configuration.setPagingDirectory(pathConfig.resolvePagingPath(pathManager))[ CD ]
Line_107 $$ if (jgroupFactories.containsKey(key)) -->Line_118 $$ if (binding == null) [ CD ]
Line_53 $$ if (binding.getSourcePort() != null) -->Line_54 $$ tc.getParams().put(TransportConstants.LOCAL_PORT_PROP_NAME, binding.getAbsoluteSourcePort())[ CD ]
Line_31 $$ String name = socketRef.toString()-->Line_36 $$ final SocketBinding socketBinding = socketBindings.get(name)[ FD ]
Line_31 $$ String name = socketRef.toString()-->Line_119 $$ throw MessagingLogger.ROOT_LOGGER.failedToFindDiscoverySocketBinding(name)[ FD ]
Line_30 $$ if (socketRef != null) -->Line_57 $$ tc.getParams().put(HOST, host)[ CD ]
Line_30 $$ if (socketRef != null) -->Line_35 $$ if (binding == null) [ CD ]
Line_107 $$ if (jgroupFactories.containsKey(key)) -->Line_121 $$ config = DiscoveryGroupAdd.createDiscoveryGroupConfiguration(name, entry.getValue(), binding)[ CD ]
Line_6 $$ boolean supportsAIO = AIOSequentialFileFactory.isSupported()-->Line_7 $$ if (supportsAIO == false) [ FD ]
Line_112 $$ channel = (JChannel) channelFactory.createChannel(key)-->Line_113 $$ channels.put(channelName, channel)[ FD ]
Line_86 $$ JChannel channel = (JChannel) channelFactory.createChannel(channelName)-->Line_87 $$ channels.put(channelName, channel)[ FD ]
Line_26 $$ Map<String, DiscoveryGroupConfiguration> discoveryGroups = configuration.getDiscoveryGroupConfigurations()-->Line_103 $$ for (final Map.Entry<String, DiscoveryGroupConfiguration> entry : discoveryGroups.entrySet()) [ FD ]
Line_31 $$ String name = socketRef.toString()-->Line_115 $$ config = DiscoveryGroupAdd.createDiscoveryGroupConfiguration(name, entry.getValue(), channel, channelName)[ FD ]
Line_32 $$ String host-->Line_49 $$ host = NetworkUtils.canonize(binding.getUnresolvedDestinationAddress())[ FD ]
Line_34 $$ OutboundSocketBinding binding = outboundSocketBindings.get(name)-->Line_35 $$ if (binding == null) [ FD ]
Line_45 $$ host = NetworkUtils.canonize(sa.getAddress().getHostAddress())-->Line_49 $$ host = NetworkUtils.canonize(binding.getUnresolvedDestinationAddress())[ FD ]
Line_31 $$ String name = socketRef.toString()-->Line_34 $$ OutboundSocketBinding binding = outboundSocketBindings.get(name)[ FD ]
Line_2 $$ public synchronized void start(final StartContext context) throws StartException -->Line_19 $$ configuration.setLargeMessagesDirectory(pathConfig.resolveLargeMessagePath(pathManager))[ CD ]
