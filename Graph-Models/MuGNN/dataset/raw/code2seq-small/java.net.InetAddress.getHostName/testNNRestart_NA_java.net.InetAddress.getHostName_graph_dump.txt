Line_4 $$ FileSystem localFileSys-->Line_9 $$ Path workingDir = localFileSys.getWorkingDirectory()[ FD ]
Line_26 $$ NamenodeProtocols nn = cluster.getNameNodeRpc()-->Line_29 $$ DatanodeInfo[] info = nn.getDatanodeReport(DatanodeReportType.LIVE)[ FD ]
Line_30 $$ for (int i = 0; i < 5 && info.length != numDatanodes; i++) -->Line_31 $$ Thread.sleep(HEARTBEAT_INTERVAL * 1000)[ CD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_40 $$ if (cluster != null) [ FD ]
Line_2 $$ public void testNNRestart() throws IOException, InterruptedException -->Line_17 $$ byte[] b = [ CD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_25 $$ cluster.restartNameNode()[ FD ]
Line_11 $$ hostsFile = new Path(dir, "hosts")-->Line_20 $$ writeConfigFile(localFileSys, hostsFile, list)[ FD ]
Line_17 $$ byte[] b = -->Line_18 $$ InetAddress inetAddress = InetAddress.getByAddress(b)[ FD ]
Line_2 $$ public void testNNRestart() throws IOException, InterruptedException -->Line_6 $$ Path excludeFile[ CD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_24 $$ cluster.waitActive()[ FD ]
Line_26 $$ NamenodeProtocols nn = cluster.getNameNodeRpc()-->Line_27 $$ assertNotNull(nn)[ FD ]
Line_21 $$ int numDatanodes = 1-->Line_34 $$ assertEquals("Number of live nodes should be " + numDatanodes, numDatanodes, info.length)[ FD ]
Line_2 $$ public void testNNRestart() throws IOException, InterruptedException -->Line_21 $$ int numDatanodes = 1[ CD ]
Line_2 $$ public void testNNRestart() throws IOException, InterruptedException -->Line_9 $$ Path workingDir = localFileSys.getWorkingDirectory()[ CD ]
Line_4 $$ FileSystem localFileSys-->Line_8 $$ localFileSys = FileSystem.getLocal(config)[ FD ]
Line_5 $$ Path hostsFile-->Line_11 $$ hostsFile = new Path(dir, "hosts")[ FD ]
Line_2 $$ public void testNNRestart() throws IOException, InterruptedException -->Line_15 $$ config.set(DFSConfigKeys.DFS_HOSTS, hostsFile.toUri().getPath())[ CD ]
Line_2 $$ public void testNNRestart() throws IOException, InterruptedException -->Line_20 $$ writeConfigFile(localFileSys, hostsFile, list)[ CD ]
Line_23 $$ cluster = new MiniDFSCluster.Builder(config).numDataNodes(numDatanodes).setupHostsFile(true).build()-->Line_26 $$ NamenodeProtocols nn = cluster.getNameNodeRpc()[ FD ]
Line_2 $$ public void testNNRestart() throws IOException, InterruptedException -->Line_8 $$ localFileSys = FileSystem.getLocal(config)[ CD ]
Line_12 $$ excludeFile = new Path(dir, "exclude")-->Line_14 $$ writeConfigFile(localFileSys, excludeFile, null)[ FD ]
Line_30 $$ for (int i = 0; i < 5 && info.length != numDatanodes; i++) -->Line_32 $$ info = nn.getDatanodeReport(DatanodeReportType.LIVE)[ CD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_23 $$ cluster = new MiniDFSCluster.Builder(config).numDataNodes(numDatanodes).setupHostsFile(true).build()[ FD ]
Line_2 $$ public void testNNRestart() throws IOException, InterruptedException -->Line_12 $$ excludeFile = new Path(dir, "exclude")[ CD ]
Line_23 $$ cluster = new MiniDFSCluster.Builder(config).numDataNodes(numDatanodes).setupHostsFile(true).build()-->Line_40 $$ if (cluster != null) [ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_28 $$ assertTrue(cluster.isDataNodeUp())[ FD ]
Line_2 $$ public void testNNRestart() throws IOException, InterruptedException -->Line_3 $$ MiniDFSCluster cluster = null[ CD ]
Line_16 $$ ArrayList<String> list = new ArrayList<String>()-->Line_19 $$ list.add(inetAddress.getHostName())[ FD ]
Line_21 $$ int numDatanodes = 1-->Line_23 $$ cluster = new MiniDFSCluster.Builder(config).numDataNodes(numDatanodes).setupHostsFile(true).build()[ FD ]
Line_5 $$ Path hostsFile-->Line_15 $$ config.set(DFSConfigKeys.DFS_HOSTS, hostsFile.toUri().getPath())[ FD ]
Line_4 $$ FileSystem localFileSys-->Line_20 $$ writeConfigFile(localFileSys, hostsFile, list)[ FD ]
Line_26 $$ NamenodeProtocols nn = cluster.getNameNodeRpc()-->Line_32 $$ info = nn.getDatanodeReport(DatanodeReportType.LIVE)[ FD ]
Line_2 $$ public void testNNRestart() throws IOException, InterruptedException -->Line_5 $$ Path hostsFile[ CD ]
Line_12 $$ excludeFile = new Path(dir, "exclude")-->Line_13 $$ config.set(DFSConfigKeys.DFS_HOSTS_EXCLUDE, excludeFile.toUri().getPath())[ FD ]
Line_2 $$ public void testNNRestart() throws IOException, InterruptedException -->Line_10 $$ Path dir = new Path(workingDir, "build/test/data/work-dir/restartnn")[ CD ]
Line_23 $$ cluster = new MiniDFSCluster.Builder(config).numDataNodes(numDatanodes).setupHostsFile(true).build()-->Line_24 $$ cluster.waitActive()[ FD ]
Line_23 $$ cluster = new MiniDFSCluster.Builder(config).numDataNodes(numDatanodes).setupHostsFile(true).build()-->Line_28 $$ assertTrue(cluster.isDataNodeUp())[ FD ]
Line_6 $$ Path excludeFile-->Line_39 $$ cleanupFile(localFileSys, excludeFile.getParent())[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_41 $$ cluster.shutdown()[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_26 $$ NamenodeProtocols nn = cluster.getNameNodeRpc()[ FD ]
Line_2 $$ public void testNNRestart() throws IOException, InterruptedException -->Line_4 $$ FileSystem localFileSys[ CD ]
Line_2 $$ public void testNNRestart() throws IOException, InterruptedException -->Line_14 $$ writeConfigFile(localFileSys, excludeFile, null)[ CD ]
Line_2 $$ public void testNNRestart() throws IOException, InterruptedException -->Line_16 $$ ArrayList<String> list = new ArrayList<String>()[ CD ]
Line_2 $$ public void testNNRestart() throws IOException, InterruptedException -->Line_19 $$ list.add(inetAddress.getHostName())[ CD ]
Line_2 $$ public void testNNRestart() throws IOException, InterruptedException -->Line_18 $$ InetAddress inetAddress = InetAddress.getByAddress(b)[ CD ]
Line_23 $$ cluster = new MiniDFSCluster.Builder(config).numDataNodes(numDatanodes).setupHostsFile(true).build()-->Line_41 $$ cluster.shutdown()[ FD ]
Line_40 $$ if (cluster != null) -->Line_41 $$ cluster.shutdown()[ CD ]
Line_8 $$ localFileSys = FileSystem.getLocal(config)-->Line_9 $$ Path workingDir = localFileSys.getWorkingDirectory()[ FD ]
Line_11 $$ hostsFile = new Path(dir, "hosts")-->Line_15 $$ config.set(DFSConfigKeys.DFS_HOSTS, hostsFile.toUri().getPath())[ FD ]
Line_5 $$ Path hostsFile-->Line_20 $$ writeConfigFile(localFileSys, hostsFile, list)[ FD ]
Line_2 $$ public void testNNRestart() throws IOException, InterruptedException -->Line_7 $$ int HEARTBEAT_INTERVAL = 1[ CD ]
Line_2 $$ public void testNNRestart() throws IOException, InterruptedException -->Line_11 $$ hostsFile = new Path(dir, "hosts")[ CD ]
Line_8 $$ localFileSys = FileSystem.getLocal(config)-->Line_20 $$ writeConfigFile(localFileSys, hostsFile, list)[ FD ]
Line_18 $$ InetAddress inetAddress = InetAddress.getByAddress(b)-->Line_19 $$ list.add(inetAddress.getHostName())[ FD ]
Line_4 $$ FileSystem localFileSys-->Line_14 $$ writeConfigFile(localFileSys, excludeFile, null)[ FD ]
Line_8 $$ localFileSys = FileSystem.getLocal(config)-->Line_39 $$ cleanupFile(localFileSys, excludeFile.getParent())[ FD ]
Line_8 $$ localFileSys = FileSystem.getLocal(config)-->Line_14 $$ writeConfigFile(localFileSys, excludeFile, null)[ FD ]
Line_6 $$ Path excludeFile-->Line_13 $$ config.set(DFSConfigKeys.DFS_HOSTS_EXCLUDE, excludeFile.toUri().getPath())[ FD ]
Line_23 $$ cluster = new MiniDFSCluster.Builder(config).numDataNodes(numDatanodes).setupHostsFile(true).build()-->Line_25 $$ cluster.restartNameNode()[ FD ]
Line_4 $$ FileSystem localFileSys-->Line_39 $$ cleanupFile(localFileSys, excludeFile.getParent())[ FD ]
Line_6 $$ Path excludeFile-->Line_14 $$ writeConfigFile(localFileSys, excludeFile, null)[ FD ]
Line_12 $$ excludeFile = new Path(dir, "exclude")-->Line_39 $$ cleanupFile(localFileSys, excludeFile.getParent())[ FD ]
Line_16 $$ ArrayList<String> list = new ArrayList<String>()-->Line_20 $$ writeConfigFile(localFileSys, hostsFile, list)[ FD ]
Line_29 $$ DatanodeInfo[] info = nn.getDatanodeReport(DatanodeReportType.LIVE)-->Line_32 $$ info = nn.getDatanodeReport(DatanodeReportType.LIVE)[ FD ]
Line_6 $$ Path excludeFile-->Line_12 $$ excludeFile = new Path(dir, "exclude")[ FD ]
Line_2 $$ public void testNNRestart() throws IOException, InterruptedException -->Line_13 $$ config.set(DFSConfigKeys.DFS_HOSTS_EXCLUDE, excludeFile.toUri().getPath())[ CD ]
