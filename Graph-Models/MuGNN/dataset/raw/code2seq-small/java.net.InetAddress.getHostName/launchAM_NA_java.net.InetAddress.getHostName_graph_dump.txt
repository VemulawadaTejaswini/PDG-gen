Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_30 $$ if (!setClasspath && classpath != null) [ CD ]
Line_18 $$ boolean setClasspath = false-->Line_23 $$ setClasspath = true[ FD ]
Line_22 $$ if (key.equals("CLASSPATH")) -->Line_24 $$ if (classpath != null) [ CD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_41 $$ envAMList.add(ApplicationConstants.CONTAINER_TOKEN_FILE_ENV_NAME + "=" + tokenFile.getAbsolutePath())[ CD ]
Line_19 $$ for (Map.Entry<String, String> entry : env.entrySet()) -->Line_21 $$ String value = entry.getValue()[ FD ]
Line_46 $$ Thread errThread = new Thread() -->Line_86 $$ errThread.join()[ FD ]
Line_6 $$ File tokenFile = File.createTempFile("unmanagedAMRMToken", "", new File(System.getProperty("user.dir")))-->Line_41 $$ envAMList.add(ApplicationConstants.CONTAINER_TOKEN_FILE_ENV_NAME + "=" + tokenFile.getAbsolutePath())[ FD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_4 $$ Token<AMRMTokenIdentifier> token = rmClient.getAMRMToken(attemptId.getApplicationId())[ CD ]
Line_49 $$ String line = errReader.readLine()-->Line_64 $$ System.out.println(line)[ FD ]
Line_13 $$ DataOutputStream os = new DataOutputStream(new FileOutputStream(tokenFile, true))-->Line_15 $$ os.close()[ FD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_33 $$ ContainerId containerId = ContainerId.newInstance(attemptId, 0)[ CD ]
Line_22 $$ if (key.equals("CLASSPATH")) -->Line_23 $$ setClasspath = true[ CD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_34 $$ String hostname = InetAddress.getLocalHost().getHostName()[ CD ]
Line_43 $$ Process amProc = Runtime.getRuntime().exec(amCmd, envAMList.toArray(envAM))-->Line_44 $$ final BufferedReader errReader = new BufferedReader(new InputStreamReader(amProc.getErrorStream()))[ FD ]
Line_16 $$ Map<String, String> env = System.getenv()-->Line_19 $$ for (Map.Entry<String, String> entry : env.entrySet()) [ FD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_39 $$ envAMList.add(Environment.LOCAL_DIRS.name() + "= /tmp")[ CD ]
Line_4 $$ Token<AMRMTokenIdentifier> token = rmClient.getAMRMToken(attemptId.getApplicationId())-->Line_5 $$ credentials.addToken(token.getService(), token)[ FD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_4 $$ Token<AMRMTokenIdentifier> token = rmClient.getAMRMToken(attemptId.getApplicationId())[ FD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_15 $$ os.close()[ CD ]
Line_45 $$ final BufferedReader inReader = new BufferedReader(new InputStreamReader(amProc.getInputStream()))-->Line_65 $$ line = inReader.readLine()[ FD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_6 $$ File tokenFile = File.createTempFile("unmanagedAMRMToken", "", new File(System.getProperty("user.dir")))[ CD ]
Line_17 $$ ArrayList<String> envAMList = new ArrayList<String>()-->Line_35 $$ envAMList.add(Environment.CONTAINER_ID.name() + "=" + containerId)[ FD ]
Line_45 $$ final BufferedReader inReader = new BufferedReader(new InputStreamReader(amProc.getInputStream()))-->Line_89 $$ inReader.close()[ FD ]
Line_52 $$ line = errReader.readLine()-->Line_65 $$ line = inReader.readLine()[ FD ]
Line_62 $$ String line = inReader.readLine()-->Line_65 $$ line = inReader.readLine()[ FD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_38 $$ envAMList.add(Environment.NM_PORT.name() + "=0")[ CD ]
Line_50 $$ while ((line != null) && !isInterrupted()) -->Line_51 $$ System.err.println(line)[ CD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_3 $$ Credentials credentials = new Credentials()[ CD ]
Line_50 $$ while ((line != null) && !isInterrupted()) -->Line_52 $$ line = errReader.readLine()[ CD ]
Line_17 $$ ArrayList<String> envAMList = new ArrayList<String>()-->Line_42 $$ String[] envAM = new String[envAMList.size()][ FD ]
Line_44 $$ final BufferedReader errReader = new BufferedReader(new InputStreamReader(amProc.getErrorStream()))-->Line_88 $$ errReader.close()[ FD ]
Line_24 $$ if (classpath != null) -->Line_25 $$ value = value + File.pathSeparator + classpath[ CD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_40 $$ envAMList.add(ApplicationConstants.APP_SUBMIT_TIME_ENV + "=" + System.currentTimeMillis())[ CD ]
Line_46 $$ Thread errThread = new Thread() -->Line_73 $$ errThread.start()[ FD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_16 $$ Map<String, String> env = System.getenv()[ CD ]
Line_52 $$ line = errReader.readLine()-->Line_64 $$ System.out.println(line)[ FD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_33 $$ ContainerId containerId = ContainerId.newInstance(attemptId, 0)[ FD ]
Line_49 $$ String line = errReader.readLine()-->Line_51 $$ System.err.println(line)[ FD ]
Line_18 $$ boolean setClasspath = false-->Line_30 $$ if (!setClasspath && classpath != null) [ FD ]
Line_3 $$ Credentials credentials = new Credentials()-->Line_5 $$ credentials.addToken(token.getService(), token)[ FD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_18 $$ boolean setClasspath = false[ CD ]
Line_17 $$ ArrayList<String> envAMList = new ArrayList<String>()-->Line_36 $$ envAMList.add(Environment.NM_HOST.name() + "=" + hostname)[ FD ]
Line_23 $$ setClasspath = true-->Line_30 $$ if (!setClasspath && classpath != null) [ FD ]
Line_19 $$ for (Map.Entry<String, String> entry : env.entrySet()) -->Line_20 $$ String key = entry.getKey()[ FD ]
Line_63 $$ while ((line != null) && !isInterrupted()) -->Line_64 $$ System.out.println(line)[ CD ]
Line_13 $$ DataOutputStream os = new DataOutputStream(new FileOutputStream(tokenFile, true))-->Line_14 $$ credentials.writeTokenStorageToStream(os)[ FD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_37 $$ envAMList.add(Environment.NM_HTTP_PORT.name() + "=0")[ CD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_46 $$ Thread errThread = new Thread() [ CD ]
Line_63 $$ while ((line != null) && !isInterrupted()) -->Line_65 $$ line = inReader.readLine()[ CD ]
Line_62 $$ String line = inReader.readLine()-->Line_64 $$ System.out.println(line)[ FD ]
Line_44 $$ final BufferedReader errReader = new BufferedReader(new InputStreamReader(amProc.getErrorStream()))-->Line_52 $$ line = errReader.readLine()[ FD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_14 $$ credentials.writeTokenStorageToStream(os)[ CD ]
Line_17 $$ ArrayList<String> envAMList = new ArrayList<String>()-->Line_38 $$ envAMList.add(Environment.NM_PORT.name() + "=0")[ FD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_44 $$ final BufferedReader errReader = new BufferedReader(new InputStreamReader(amProc.getErrorStream()))[ CD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_35 $$ envAMList.add(Environment.CONTAINER_ID.name() + "=" + containerId)[ CD ]
Line_65 $$ line = inReader.readLine()-->Line_64 $$ System.out.println(line)[ FD ]
Line_17 $$ ArrayList<String> envAMList = new ArrayList<String>()-->Line_43 $$ Process amProc = Runtime.getRuntime().exec(amCmd, envAMList.toArray(envAM))[ FD ]
Line_49 $$ String line = errReader.readLine()-->Line_65 $$ line = inReader.readLine()[ FD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_17 $$ ArrayList<String> envAMList = new ArrayList<String>()[ CD ]
Line_17 $$ ArrayList<String> envAMList = new ArrayList<String>()-->Line_37 $$ envAMList.add(Environment.NM_HTTP_PORT.name() + "=0")[ FD ]
Line_49 $$ String line = errReader.readLine()-->Line_52 $$ line = errReader.readLine()[ FD ]
Line_17 $$ ArrayList<String> envAMList = new ArrayList<String>()-->Line_41 $$ envAMList.add(ApplicationConstants.CONTAINER_TOKEN_FILE_ENV_NAME + "=" + tokenFile.getAbsolutePath())[ FD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_5 $$ credentials.addToken(token.getService(), token)[ CD ]
Line_43 $$ Process amProc = Runtime.getRuntime().exec(amCmd, envAMList.toArray(envAM))-->Line_45 $$ final BufferedReader inReader = new BufferedReader(new InputStreamReader(amProc.getInputStream()))[ FD ]
Line_21 $$ String value = entry.getValue()-->Line_25 $$ value = value + File.pathSeparator + classpath[ FD ]
Line_20 $$ String key = entry.getKey()-->Line_22 $$ if (key.equals("CLASSPATH")) [ FD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_42 $$ String[] envAM = new String[envAMList.size()][ CD ]
Line_6 $$ File tokenFile = File.createTempFile("unmanagedAMRMToken", "", new File(System.getProperty("user.dir")))-->Line_12 $$ tokenFile.deleteOnExit()[ FD ]
Line_45 $$ final BufferedReader inReader = new BufferedReader(new InputStreamReader(amProc.getInputStream()))-->Line_62 $$ String line = inReader.readLine()[ FD ]
Line_42 $$ String[] envAM = new String[envAMList.size()]-->Line_43 $$ Process amProc = Runtime.getRuntime().exec(amCmd, envAMList.toArray(envAM))[ FD ]
Line_52 $$ line = errReader.readLine()-->Line_51 $$ System.err.println(line)[ FD ]
Line_43 $$ Process amProc = Runtime.getRuntime().exec(amCmd, envAMList.toArray(envAM))-->Line_78 $$ int exitCode = amProc.waitFor()[ FD ]
Line_17 $$ ArrayList<String> envAMList = new ArrayList<String>()-->Line_39 $$ envAMList.add(Environment.LOCAL_DIRS.name() + "= /tmp")[ FD ]
Line_3 $$ Credentials credentials = new Credentials()-->Line_14 $$ credentials.writeTokenStorageToStream(os)[ FD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_43 $$ Process amProc = Runtime.getRuntime().exec(amCmd, envAMList.toArray(envAM))[ CD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_45 $$ final BufferedReader inReader = new BufferedReader(new InputStreamReader(amProc.getInputStream()))[ CD ]
Line_17 $$ ArrayList<String> envAMList = new ArrayList<String>()-->Line_40 $$ envAMList.add(ApplicationConstants.APP_SUBMIT_TIME_ENV + "=" + System.currentTimeMillis())[ FD ]
Line_43 $$ Process amProc = Runtime.getRuntime().exec(amCmd, envAMList.toArray(envAM))-->Line_95 $$ amProc.destroy()[ FD ]
Line_44 $$ final BufferedReader errReader = new BufferedReader(new InputStreamReader(amProc.getErrorStream()))-->Line_49 $$ String line = errReader.readLine()[ FD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_12 $$ tokenFile.deleteOnExit()[ CD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_13 $$ DataOutputStream os = new DataOutputStream(new FileOutputStream(tokenFile, true))[ CD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_36 $$ envAMList.add(Environment.NM_HOST.name() + "=" + hostname)[ CD ]
Line_30 $$ if (!setClasspath && classpath != null) -->Line_31 $$ envAMList.add("CLASSPATH=" + classpath)[ CD ]
Line_2 $$ public void launchAM(ApplicationAttemptId attemptId) throws IOException, YarnException -->Line_95 $$ amProc.destroy()[ CD ]
Line_17 $$ ArrayList<String> envAMList = new ArrayList<String>()-->Line_31 $$ envAMList.add("CLASSPATH=" + classpath)[ FD ]
Line_17 $$ ArrayList<String> envAMList = new ArrayList<String>()-->Line_28 $$ envAMList.add(key + "=" + value)[ FD ]
Line_6 $$ File tokenFile = File.createTempFile("unmanagedAMRMToken", "", new File(System.getProperty("user.dir")))-->Line_8 $$ FileUtil.chmod(tokenFile.getAbsolutePath(), "600")[ FD ]
