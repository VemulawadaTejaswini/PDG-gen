Line_2 $$ private void verifyValues(InetSocketAddress addr, String host, String ip, int port) -->Line_3 $$ assertTrue(!addr.isUnresolved())[ CD ]
Line_2 $$ private void verifyValues(InetSocketAddress addr, String host, String ip, int port) -->Line_6 $$ assertEquals(host, addr.getAddress().getHostName())[ FD ]
Line_2 $$ private void verifyValues(InetSocketAddress addr, String host, String ip, int port) -->Line_9 $$ assertEquals(port, addr.getPort())[ FD ]
Line_2 $$ private void verifyValues(InetSocketAddress addr, String host, String ip, int port) -->Line_4 $$ if (!SecurityUtil.useIpForTokenService) [ CD ]
Line_4 $$ if (!SecurityUtil.useIpForTokenService) -->Line_6 $$ assertEquals(host, addr.getAddress().getHostName())[ CD ]
Line_2 $$ private void verifyValues(InetSocketAddress addr, String host, String ip, int port) -->Line_8 $$ assertEquals(ip, addr.getAddress().getHostAddress())[ FD ]
Line_2 $$ private void verifyValues(InetSocketAddress addr, String host, String ip, int port) -->Line_8 $$ assertEquals(ip, addr.getAddress().getHostAddress())[ CD ]
Line_2 $$ private void verifyValues(InetSocketAddress addr, String host, String ip, int port) -->Line_9 $$ assertEquals(port, addr.getPort())[ CD ]
Line_4 $$ if (!SecurityUtil.useIpForTokenService) -->Line_5 $$ assertEquals(host, addr.getHostName())[ CD ]
Line_2 $$ private void verifyValues(InetSocketAddress addr, String host, String ip, int port) -->Line_5 $$ assertEquals(host, addr.getHostName())[ FD ]
Line_2 $$ private void verifyValues(InetSocketAddress addr, String host, String ip, int port) -->Line_3 $$ assertTrue(!addr.isUnresolved())[ FD ]
