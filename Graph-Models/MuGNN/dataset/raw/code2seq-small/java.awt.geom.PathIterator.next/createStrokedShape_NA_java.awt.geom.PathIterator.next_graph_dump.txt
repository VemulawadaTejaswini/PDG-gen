Line_7 $$ float lastX = 0, lastY = 0-->Line_44 $$ lastX = thisX[ FD ]
Line_3 $$ GeneralPath result = new GeneralPath()-->Line_36 $$ result.lineTo(x + amplitude * dy * r, y - amplitude * dx * r)[ FD ]
Line_16 $$ moveX = lastX = points[0]-->Line_18 $$ result.moveTo(moveX, moveY)[ FD ]
Line_4 $$ PathIterator it = new FlatteningPathIterator(shape.getPathIterator(null), FLATNESS)-->Line_50 $$ it.next()[ FD ]
Line_39 $$ next += wavelength-->Line_32 $$ while (distance >= next) [ FD ]
Line_9 $$ int type = 0-->Line_46 $$ if (type == PathIterator.SEG_CLOSE)[ FD ]
Line_39 $$ next += wavelength-->Line_43 $$ next -= distance[ FD ]
Line_6 $$ float moveX = 0, moveY = 0-->Line_16 $$ moveX = lastX = points[0][ FD ]
Line_2 $$ public Shape createStrokedShape(Shape shape) -->Line_8 $$ float thisX = 0, thisY = 0[ CD ]
Line_2 $$ public Shape createStrokedShape(Shape shape) -->Line_5 $$ float[] points = new float[6][ CD ]
Line_2 $$ public Shape createStrokedShape(Shape shape) -->Line_4 $$ PathIterator it = new FlatteningPathIterator(shape.getPathIterator(null), FLATNESS)[ FD ]
Line_8 $$ float thisX = 0, thisY = 0-->Line_25 $$ thisX = points[0][ FD ]
Line_8 $$ float thisX = 0, thisY = 0-->Line_45 $$ lastY = thisY[ FD ]
Line_43 $$ next -= distance-->Line_30 $$ if (distance >= next) [ FD ]
Line_32 $$ while (distance >= next) -->Line_35 $$ if ((phase & 1) == 0)[ CD ]
Line_29 $$ float distance = (float) Math.sqrt(dx * dx + dy * dy)-->Line_43 $$ next -= distance[ FD ]
Line_19 $$ next = wavelength / 2-->Line_32 $$ while (distance >= next) [ FD ]
Line_7 $$ float lastX = 0, lastY = 0-->Line_45 $$ lastY = thisY[ FD ]
Line_32 $$ while (distance >= next) -->Line_34 $$ float y = lastY + next * dy * r[ CD ]
Line_2 $$ public Shape createStrokedShape(Shape shape) -->Line_11 $$ int phase = 0[ CD ]
Line_3 $$ GeneralPath result = new GeneralPath()-->Line_38 $$ result.lineTo(x - amplitude * dy * r, y + amplitude * dx * r)[ FD ]
Line_17 $$ moveY = lastY = points[1]-->Line_23 $$ points[1] = moveY[ FD ]
Line_6 $$ float moveX = 0, moveY = 0-->Line_22 $$ points[0] = moveX[ FD ]
Line_29 $$ float distance = (float) Math.sqrt(dx * dx + dy * dy)-->Line_30 $$ if (distance >= next) [ FD ]
Line_10 $$ float next = 0-->Line_39 $$ next += wavelength[ FD ]
Line_32 $$ while (distance >= next) -->Line_40 $$ phase++[ CD ]
Line_2 $$ public Shape createStrokedShape(Shape shape) -->Line_52 $$ return new BasicStroke(getWidth(), BasicStroke.CAP_SQUARE, getJoin()).createStrokedShape(result)[ CD ]
Line_32 $$ while (distance >= next) -->Line_39 $$ next += wavelength[ CD ]
Line_35 $$ if ((phase & 1) == 0)-->Line_36 $$ result.lineTo(x + amplitude * dy * r, y - amplitude * dx * r)[ CD ]
Line_6 $$ float moveX = 0, moveY = 0-->Line_23 $$ points[1] = moveY[ FD ]
Line_10 $$ float next = 0-->Line_32 $$ while (distance >= next) [ FD ]
Line_35 $$ if ((phase & 1) == 0)-->Line_38 $$ result.lineTo(x - amplitude * dy * r, y + amplitude * dx * r)[ CD ]
Line_2 $$ public Shape createStrokedShape(Shape shape) -->Line_12 $$ while (!it.isDone()) [ CD ]
Line_9 $$ int type = 0-->Line_13 $$ type = it.currentSegment(points)[ FD ]
Line_2 $$ public Shape createStrokedShape(Shape shape) -->Line_4 $$ PathIterator it = new FlatteningPathIterator(shape.getPathIterator(null), FLATNESS)[ CD ]
Line_10 $$ float next = 0-->Line_19 $$ next = wavelength / 2[ FD ]
Line_5 $$ float[] points = new float[6]-->Line_13 $$ type = it.currentSegment(points)[ FD ]
Line_19 $$ next = wavelength / 2-->Line_30 $$ if (distance >= next) [ FD ]
Line_2 $$ public Shape createStrokedShape(Shape shape) -->Line_3 $$ GeneralPath result = new GeneralPath()[ CD ]
Line_12 $$ while (!it.isDone()) -->Line_50 $$ it.next()[ CD ]
Line_7 $$ float lastX = 0, lastY = 0-->Line_17 $$ moveY = lastY = points[1][ FD ]
Line_10 $$ float next = 0-->Line_43 $$ next -= distance[ FD ]
Line_13 $$ type = it.currentSegment(points)-->Line_46 $$ if (type == PathIterator.SEG_CLOSE)[ FD ]
Line_29 $$ float distance = (float) Math.sqrt(dx * dx + dy * dy)-->Line_32 $$ while (distance >= next) [ FD ]
Line_6 $$ float moveX = 0, moveY = 0-->Line_17 $$ moveY = lastY = points[1][ FD ]
Line_26 $$ thisY = points[1]-->Line_45 $$ lastY = thisY[ FD ]
Line_19 $$ next = wavelength / 2-->Line_43 $$ next -= distance[ FD ]
Line_2 $$ public Shape createStrokedShape(Shape shape) -->Line_9 $$ int type = 0[ CD ]
Line_8 $$ float thisX = 0, thisY = 0-->Line_26 $$ thisY = points[1][ FD ]
Line_2 $$ public Shape createStrokedShape(Shape shape) -->Line_6 $$ float moveX = 0, moveY = 0[ CD ]
Line_2 $$ public Shape createStrokedShape(Shape shape) -->Line_7 $$ float lastX = 0, lastY = 0[ CD ]
Line_32 $$ while (distance >= next) -->Line_33 $$ float x = lastX + next * dx * r[ CD ]
Line_10 $$ float next = 0-->Line_30 $$ if (distance >= next) [ FD ]
Line_19 $$ next = wavelength / 2-->Line_39 $$ next += wavelength[ FD ]
Line_12 $$ while (!it.isDone()) -->Line_13 $$ type = it.currentSegment(points)[ CD ]
Line_30 $$ if (distance >= next) -->Line_32 $$ while (distance >= next) [ CD ]
Line_3 $$ GeneralPath result = new GeneralPath()-->Line_52 $$ return new BasicStroke(getWidth(), BasicStroke.CAP_SQUARE, getJoin()).createStrokedShape(result)[ FD ]
Line_25 $$ thisX = points[0]-->Line_44 $$ lastX = thisX[ FD ]
Line_16 $$ moveX = lastX = points[0]-->Line_22 $$ points[0] = moveX[ FD ]
Line_17 $$ moveY = lastY = points[1]-->Line_18 $$ result.moveTo(moveX, moveY)[ FD ]
Line_8 $$ float thisX = 0, thisY = 0-->Line_44 $$ lastX = thisX[ FD ]
Line_7 $$ float lastX = 0, lastY = 0-->Line_16 $$ moveX = lastX = points[0][ FD ]
Line_30 $$ if (distance >= next) -->Line_31 $$ float r = 1.0f / distance[ CD ]
Line_16 $$ moveX = lastX = points[0]-->Line_44 $$ lastX = thisX[ FD ]
Line_17 $$ moveY = lastY = points[1]-->Line_45 $$ lastY = thisY[ FD ]
Line_46 $$ if (type == PathIterator.SEG_CLOSE)-->Line_47 $$ result.closePath()[ CD ]
Line_3 $$ GeneralPath result = new GeneralPath()-->Line_47 $$ result.closePath()[ FD ]
Line_4 $$ PathIterator it = new FlatteningPathIterator(shape.getPathIterator(null), FLATNESS)-->Line_13 $$ type = it.currentSegment(points)[ FD ]
Line_11 $$ int phase = 0-->Line_40 $$ phase++[ FD ]
Line_2 $$ public Shape createStrokedShape(Shape shape) -->Line_10 $$ float next = 0[ CD ]
Line_6 $$ float moveX = 0, moveY = 0-->Line_18 $$ result.moveTo(moveX, moveY)[ FD ]
Line_3 $$ GeneralPath result = new GeneralPath()-->Line_18 $$ result.moveTo(moveX, moveY)[ FD ]
Line_4 $$ PathIterator it = new FlatteningPathIterator(shape.getPathIterator(null), FLATNESS)-->Line_12 $$ while (!it.isDone()) [ FD ]
