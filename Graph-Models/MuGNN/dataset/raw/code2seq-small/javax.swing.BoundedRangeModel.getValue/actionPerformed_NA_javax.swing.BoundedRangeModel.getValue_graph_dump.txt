Line_6 $$ JPanel wrapper = new JPanel(new BorderLayout())-->Line_8 $$ result.add(wrapper, BorderLayout.WEST)[ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_3 $$ JPanel result = new JPanel(new BorderLayout())[ CD ]
Line_9 $$ final JSlider slider = new JSlider(SwingConstants.HORIZONTAL, 1, 5, 1)-->Line_22 $$ slider.setValue(i + 1)[ FD ]
Line_26 $$ popup.setFinalRunnable(new Runnable() -->Line_29 $$ if (configuration.SHORT_DIFF_EXTRA_LINES != ourMarks[value - 1]) [ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_39 $$ if (inputEvent instanceof MouseEvent) [ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_5 $$ label.setBorder(BorderFactory.createEmptyBorder(4, 4, 0, 0))[ CD ]
Line_3 $$ JPanel result = new JPanel(new BorderLayout())-->Line_8 $$ result.add(wrapper, BorderLayout.WEST)[ FD ]
Line_9 $$ final JSlider slider = new JSlider(SwingConstants.HORIZONTAL, 1, 5, 1)-->Line_14 $$ UIUtil.setSliderIsFilled(slider, true)[ FD ]
Line_3 $$ JPanel result = new JPanel(new BorderLayout())-->Line_17 $$ result.add(slider, BorderLayout.CENTER)[ FD ]
Line_9 $$ final JSlider slider = new JSlider(SwingConstants.HORIZONTAL, 1, 5, 1)-->Line_25 $$ JBPopup popup = JBPopupFactory.getInstance().createComponentPopupBuilder(result, slider).createPopup()[ FD ]
Line_25 $$ JBPopup popup = JBPopupFactory.getInstance().createComponentPopupBuilder(result, slider).createPopup()-->Line_44 $$ popup.show(point)[ FD ]
Line_9 $$ final JSlider slider = new JSlider(SwingConstants.HORIZONTAL, 1, 5, 1)-->Line_17 $$ result.add(slider, BorderLayout.CENTER)[ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_13 $$ slider.setSnapToTicks(true)[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_11 $$ slider.setPaintTicks(true)[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_12 $$ slider.setPaintTrack(true)[ CD ]
Line_6 $$ JPanel wrapper = new JPanel(new BorderLayout())-->Line_7 $$ wrapper.add(label, BorderLayout.NORTH)[ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_15 $$ slider.setPaintLabels(true)[ CD ]
Line_9 $$ final JSlider slider = new JSlider(SwingConstants.HORIZONTAL, 1, 5, 1)-->Line_15 $$ slider.setPaintLabels(true)[ FD ]
Line_3 $$ JPanel result = new JPanel(new BorderLayout())-->Line_40 $$ int width = result.getPreferredSize().width[ FD ]
Line_39 $$ if (inputEvent instanceof MouseEvent) -->Line_44 $$ popup.show(point)[ CD ]
Line_29 $$ if (configuration.SHORT_DIFF_EXTRA_LINES != ourMarks[value - 1]) -->Line_30 $$ configuration.SHORT_DIFF_EXTRA_LINES = ourMarks[value - 1][ CD ]
Line_19 $$ for (int i = 0; i < ourMarks.length; i++) -->Line_20 $$ int mark = ourMarks[i][ CD ]
Line_26 $$ popup.setFinalRunnable(new Runnable() -->Line_28 $$ int value = slider.getModel().getValue()[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_7 $$ wrapper.add(label, BorderLayout.NORTH)[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_8 $$ result.add(wrapper, BorderLayout.WEST)[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_10 $$ slider.setMinorTickSpacing(1)[ CD ]
Line_9 $$ final JSlider slider = new JSlider(SwingConstants.HORIZONTAL, 1, 5, 1)-->Line_12 $$ slider.setPaintTrack(true)[ FD ]
Line_39 $$ if (inputEvent instanceof MouseEvent) -->Line_46 $$ popup.showInBestPositionFor(e.getDataContext())[ CD ]
Line_4 $$ JLabel label = new JLabel("Lines around:")-->Line_7 $$ wrapper.add(label, BorderLayout.NORTH)[ FD ]
Line_9 $$ final JSlider slider = new JSlider(SwingConstants.HORIZONTAL, 1, 5, 1)-->Line_16 $$ slider.setLabelTable(LABELS)[ FD ]
Line_19 $$ for (int i = 0; i < ourMarks.length; i++) -->Line_21 $$ if (mark == configuration.SHORT_DIFF_EXTRA_LINES) [ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_6 $$ JPanel wrapper = new JPanel(new BorderLayout())[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_9 $$ final JSlider slider = new JSlider(SwingConstants.HORIZONTAL, 1, 5, 1)[ CD ]
Line_9 $$ final JSlider slider = new JSlider(SwingConstants.HORIZONTAL, 1, 5, 1)-->Line_28 $$ int value = slider.getModel().getValue()[ FD ]
Line_9 $$ final JSlider slider = new JSlider(SwingConstants.HORIZONTAL, 1, 5, 1)-->Line_13 $$ slider.setSnapToTicks(true)[ FD ]
Line_25 $$ JBPopup popup = JBPopupFactory.getInstance().createComponentPopupBuilder(result, slider).createPopup()-->Line_26 $$ popup.setFinalRunnable(new Runnable() [ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_4 $$ JLabel label = new JLabel("Lines around:")[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_25 $$ JBPopup popup = JBPopupFactory.getInstance().createComponentPopupBuilder(result, slider).createPopup()[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_46 $$ popup.showInBestPositionFor(e.getDataContext())[ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_26 $$ popup.setFinalRunnable(new Runnable() [ CD ]
Line_9 $$ final JSlider slider = new JSlider(SwingConstants.HORIZONTAL, 1, 5, 1)-->Line_11 $$ slider.setPaintTicks(true)[ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_19 $$ for (int i = 0; i < ourMarks.length; i++) [ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_17 $$ result.add(slider, BorderLayout.CENTER)[ CD ]
Line_3 $$ JPanel result = new JPanel(new BorderLayout())-->Line_25 $$ JBPopup popup = JBPopupFactory.getInstance().createComponentPopupBuilder(result, slider).createPopup()[ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_14 $$ UIUtil.setSliderIsFilled(slider, true)[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_18 $$ final VcsConfiguration configuration = VcsConfiguration.getInstance(myProject)[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_38 $$ InputEvent inputEvent = e.getInputEvent()[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_16 $$ slider.setLabelTable(LABELS)[ CD ]
Line_4 $$ JLabel label = new JLabel("Lines around:")-->Line_5 $$ label.setBorder(BorderFactory.createEmptyBorder(4, 4, 0, 0))[ FD ]
Line_25 $$ JBPopup popup = JBPopupFactory.getInstance().createComponentPopupBuilder(result, slider).createPopup()-->Line_46 $$ popup.showInBestPositionFor(e.getDataContext())[ FD ]
Line_20 $$ int mark = ourMarks[i]-->Line_21 $$ if (mark == configuration.SHORT_DIFF_EXTRA_LINES) [ FD ]
Line_9 $$ final JSlider slider = new JSlider(SwingConstants.HORIZONTAL, 1, 5, 1)-->Line_10 $$ slider.setMinorTickSpacing(1)[ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_38 $$ InputEvent inputEvent = e.getInputEvent()[ FD ]
Line_21 $$ if (mark == configuration.SHORT_DIFF_EXTRA_LINES) -->Line_22 $$ slider.setValue(i + 1)[ CD ]
