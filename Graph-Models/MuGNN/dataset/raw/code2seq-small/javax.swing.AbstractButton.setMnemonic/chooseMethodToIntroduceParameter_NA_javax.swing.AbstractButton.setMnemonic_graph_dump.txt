Line_41 $$ final PsiMethod methodToSearchFor = superMethod.isEnabled() && superMethod.isSelected() ? methodToSearchIn.findDeepestSuperMethod() : methodToSearchIn-->Line_44 $$ consumer.consume(methodToSearchIn, methodToSearchFor)[ FD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_16 $$ list.setVisibleRowCount(5)[ CD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_5 $$ final PsiMethod methodToIntroduceParameterTo = validEnclosingMethods.get(0)[ FD ]
Line_15 $$ final JBList list = new JBList(validEnclosingMethods.toArray())-->Line_22 $$ list.addListSelectionListener(new ListSelectionListener() [ FD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_11 $$ final JPanel panel = new JPanel(new BorderLayout())[ CD ]
Line_20 $$ final List<RangeHighlighter> highlighters = new ArrayList<RangeHighlighter>()-->Line_28 $$ updateView(selectedMethod, editor, attributes, highlighters, superMethod)[ FD ]
Line_15 $$ final JBList list = new JBList(validEnclosingMethods.toArray())-->Line_50 $$ myEnclosingMethodsPopup = JBPopupFactory.getInstance().createComponentPopupBuilder(panel, list).setTitle("Introduce parameter to method").setMovable(false).setResizable(false).setRequestFocus(true).setKeyboardActions(keyboardActions).addListener(new JBPopupAdapter() [ FD ]
Line_22 $$ list.addListSelectionListener(new ListSelectionListener() -->Line_27 $$ dropHighlighters(highlighters)[ CD ]
Line_37 $$ final PsiMethod methodToSearchIn = (PsiMethod) list.getSelectedValue()-->Line_41 $$ final PsiMethod methodToSearchFor = superMethod.isEnabled() && superMethod.isSelected() ? methodToSearchIn.findDeepestSuperMethod() : methodToSearchIn[ FD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_20 $$ final List<RangeHighlighter> highlighters = new ArrayList<RangeHighlighter>()[ CD ]
Line_15 $$ final JBList list = new JBList(validEnclosingMethods.toArray())-->Line_17 $$ list.setCellRenderer(new MethodCellRenderer())[ FD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_7 $$ consumer.consume(methodToIntroduceParameterTo, methodToIntroduceParameterTo)[ FD ]
Line_12 $$ final JCheckBox superMethod = new JCheckBox("Refactor super method", true)-->Line_41 $$ final PsiMethod methodToSearchFor = superMethod.isEnabled() && superMethod.isSelected() ? methodToSearchIn.findDeepestSuperMethod() : methodToSearchIn[ FD ]
Line_12 $$ final JCheckBox superMethod = new JCheckBox("Refactor super method", true)-->Line_28 $$ updateView(selectedMethod, editor, attributes, highlighters, superMethod)[ FD ]
Line_15 $$ final JBList list = new JBList(validEnclosingMethods.toArray())-->Line_18 $$ list.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION)[ FD ]
Line_35 $$ final List<Pair<ActionListener, KeyStroke>> keyboardActions = Collections.singletonList(Pair.<ActionListener, KeyStroke>create(new ActionListener() -->Line_42 $$ Runnable runnable = new Runnable() [ CD ]
Line_22 $$ list.addListSelectionListener(new ListSelectionListener() -->Line_24 $$ final PsiMethod selectedMethod = (PsiMethod) list.getSelectedValue()[ CD ]
Line_42 $$ Runnable runnable = new Runnable() -->Line_44 $$ consumer.consume(methodToSearchIn, methodToSearchFor)[ CD ]
Line_3 $$ final boolean unitTestMode = ApplicationManager.getApplication().isUnitTestMode()-->Line_6 $$ if (methodToIntroduceParameterTo.findDeepestSuperMethod() == null || unitTestMode) [ FD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_15 $$ final JBList list = new JBList(validEnclosingMethods.toArray())[ CD ]
Line_22 $$ list.addListSelectionListener(new ListSelectionListener() -->Line_28 $$ updateView(selectedMethod, editor, attributes, highlighters, superMethod)[ CD ]
Line_12 $$ final JCheckBox superMethod = new JCheckBox("Refactor super method", true)-->Line_14 $$ panel.add(superMethod, BorderLayout.SOUTH)[ FD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_55 $$ myEnclosingMethodsPopup.showInBestPositionFor(editor)[ CD ]
Line_5 $$ final PsiMethod methodToIntroduceParameterTo = validEnclosingMethods.get(0)-->Line_7 $$ consumer.consume(methodToIntroduceParameterTo, methodToIntroduceParameterTo)[ FD ]
Line_4 $$ if (validEnclosingMethods.size() == 1 || unitTestMode) -->Line_6 $$ if (methodToIntroduceParameterTo.findDeepestSuperMethod() == null || unitTestMode) [ CD ]
Line_24 $$ final PsiMethod selectedMethod = (PsiMethod) list.getSelectedValue()-->Line_28 $$ updateView(selectedMethod, editor, attributes, highlighters, superMethod)[ FD ]
Line_20 $$ final List<RangeHighlighter> highlighters = new ArrayList<RangeHighlighter>()-->Line_31 $$ updateView(validEnclosingMethods.get(0), editor, attributes, highlighters, superMethod)[ FD ]
Line_24 $$ final PsiMethod selectedMethod = (PsiMethod) list.getSelectedValue()-->Line_25 $$ if (selectedMethod == null)[ FD ]
Line_15 $$ final JBList list = new JBList(validEnclosingMethods.toArray())-->Line_32 $$ final JScrollPane scrollPane = ScrollPaneFactory.createScrollPane(list)[ FD ]
Line_15 $$ final JBList list = new JBList(validEnclosingMethods.toArray())-->Line_16 $$ list.setVisibleRowCount(5)[ FD ]
Line_12 $$ final JCheckBox superMethod = new JCheckBox("Refactor super method", true)-->Line_13 $$ superMethod.setMnemonic('U')[ FD ]
Line_35 $$ final List<Pair<ActionListener, KeyStroke>> keyboardActions = Collections.singletonList(Pair.<ActionListener, KeyStroke>create(new ActionListener() -->Line_38 $$ if (myEnclosingMethodsPopup != null && myEnclosingMethodsPopup.isVisible()) [ CD ]
Line_15 $$ final JBList list = new JBList(validEnclosingMethods.toArray())-->Line_24 $$ final PsiMethod selectedMethod = (PsiMethod) list.getSelectedValue()[ FD ]
Line_3 $$ final boolean unitTestMode = ApplicationManager.getApplication().isUnitTestMode()-->Line_4 $$ if (validEnclosingMethods.size() == 1 || unitTestMode) [ FD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_31 $$ updateView(validEnclosingMethods.get(0), editor, attributes, highlighters, superMethod)[ CD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_3 $$ final boolean unitTestMode = ApplicationManager.getApplication().isUnitTestMode()[ CD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_50 $$ myEnclosingMethodsPopup = JBPopupFactory.getInstance().createComponentPopupBuilder(panel, list).setTitle("Introduce parameter to method").setMovable(false).setResizable(false).setRequestFocus(true).setKeyboardActions(keyboardActions).addListener(new JBPopupAdapter() [ CD ]
Line_21 $$ final TextAttributes attributes = EditorColorsManager.getInstance().getGlobalScheme().getAttributes(EditorColors.SEARCH_RESULT_ATTRIBUTES)-->Line_28 $$ updateView(selectedMethod, editor, attributes, highlighters, superMethod)[ FD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_21 $$ final TextAttributes attributes = EditorColorsManager.getInstance().getGlobalScheme().getAttributes(EditorColors.SEARCH_RESULT_ATTRIBUTES)[ CD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_12 $$ final JCheckBox superMethod = new JCheckBox("Refactor super method", true)[ CD ]
Line_12 $$ final JCheckBox superMethod = new JCheckBox("Refactor super method", true)-->Line_31 $$ updateView(validEnclosingMethods.get(0), editor, attributes, highlighters, superMethod)[ FD ]
Line_50 $$ myEnclosingMethodsPopup = JBPopupFactory.getInstance().createComponentPopupBuilder(panel, list).setTitle("Introduce parameter to method").setMovable(false).setResizable(false).setRequestFocus(true).setKeyboardActions(keyboardActions).addListener(new JBPopupAdapter() -->Line_52 $$ dropHighlighters(highlighters)[ CD ]
Line_11 $$ final JPanel panel = new JPanel(new BorderLayout())-->Line_34 $$ panel.add(scrollPane, BorderLayout.CENTER)[ FD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_44 $$ consumer.consume(methodToSearchIn, methodToSearchFor)[ FD ]
Line_11 $$ final JPanel panel = new JPanel(new BorderLayout())-->Line_14 $$ panel.add(superMethod, BorderLayout.SOUTH)[ FD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_22 $$ list.addListSelectionListener(new ListSelectionListener() [ CD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_32 $$ final JScrollPane scrollPane = ScrollPaneFactory.createScrollPane(list)[ CD ]
Line_6 $$ if (methodToIntroduceParameterTo.findDeepestSuperMethod() == null || unitTestMode) -->Line_7 $$ consumer.consume(methodToIntroduceParameterTo, methodToIntroduceParameterTo)[ CD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_33 $$ scrollPane.setBorder(null)[ CD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_17 $$ list.setCellRenderer(new MethodCellRenderer())[ CD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_4 $$ if (validEnclosingMethods.size() == 1 || unitTestMode) [ FD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_55 $$ myEnclosingMethodsPopup.showInBestPositionFor(editor)[ FD ]
Line_35 $$ final List<Pair<ActionListener, KeyStroke>> keyboardActions = Collections.singletonList(Pair.<ActionListener, KeyStroke>create(new ActionListener() -->Line_41 $$ final PsiMethod methodToSearchFor = superMethod.isEnabled() && superMethod.isSelected() ? methodToSearchIn.findDeepestSuperMethod() : methodToSearchIn[ CD ]
Line_5 $$ final PsiMethod methodToIntroduceParameterTo = validEnclosingMethods.get(0)-->Line_6 $$ if (methodToIntroduceParameterTo.findDeepestSuperMethod() == null || unitTestMode) [ FD ]
Line_42 $$ Runnable runnable = new Runnable() -->Line_47 $$ IdeFocusManager.findInstance().doWhenFocusSettlesDown(runnable)[ FD ]
Line_25 $$ if (selectedMethod == null)-->Line_26 $$ return[ CD ]
Line_11 $$ final JPanel panel = new JPanel(new BorderLayout())-->Line_50 $$ myEnclosingMethodsPopup = JBPopupFactory.getInstance().createComponentPopupBuilder(panel, list).setTitle("Introduce parameter to method").setMovable(false).setResizable(false).setRequestFocus(true).setKeyboardActions(keyboardActions).addListener(new JBPopupAdapter() [ FD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_34 $$ panel.add(scrollPane, BorderLayout.CENTER)[ CD ]
Line_22 $$ list.addListSelectionListener(new ListSelectionListener() -->Line_25 $$ if (selectedMethod == null)[ CD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_15 $$ final JBList list = new JBList(validEnclosingMethods.toArray())[ FD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_28 $$ updateView(selectedMethod, editor, attributes, highlighters, superMethod)[ FD ]
Line_37 $$ final PsiMethod methodToSearchIn = (PsiMethod) list.getSelectedValue()-->Line_44 $$ consumer.consume(methodToSearchIn, methodToSearchFor)[ FD ]
Line_21 $$ final TextAttributes attributes = EditorColorsManager.getInstance().getGlobalScheme().getAttributes(EditorColors.SEARCH_RESULT_ATTRIBUTES)-->Line_31 $$ updateView(validEnclosingMethods.get(0), editor, attributes, highlighters, superMethod)[ FD ]
Line_35 $$ final List<Pair<ActionListener, KeyStroke>> keyboardActions = Collections.singletonList(Pair.<ActionListener, KeyStroke>create(new ActionListener() -->Line_47 $$ IdeFocusManager.findInstance().doWhenFocusSettlesDown(runnable)[ CD ]
Line_20 $$ final List<RangeHighlighter> highlighters = new ArrayList<RangeHighlighter>()-->Line_52 $$ dropHighlighters(highlighters)[ FD ]
Line_15 $$ final JBList list = new JBList(validEnclosingMethods.toArray())-->Line_19 $$ list.setSelectedIndex(0)[ FD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_31 $$ updateView(validEnclosingMethods.get(0), editor, attributes, highlighters, superMethod)[ FD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_14 $$ panel.add(superMethod, BorderLayout.SOUTH)[ CD ]
Line_4 $$ if (validEnclosingMethods.size() == 1 || unitTestMode) -->Line_5 $$ final PsiMethod methodToIntroduceParameterTo = validEnclosingMethods.get(0)[ CD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_19 $$ list.setSelectedIndex(0)[ CD ]
Line_35 $$ final List<Pair<ActionListener, KeyStroke>> keyboardActions = Collections.singletonList(Pair.<ActionListener, KeyStroke>create(new ActionListener() -->Line_37 $$ final PsiMethod methodToSearchIn = (PsiMethod) list.getSelectedValue()[ CD ]
Line_6 $$ if (methodToIntroduceParameterTo.findDeepestSuperMethod() == null || unitTestMode) -->Line_8 $$ return[ CD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_4 $$ if (validEnclosingMethods.size() == 1 || unitTestMode) [ CD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_18 $$ list.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION)[ CD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_35 $$ final List<Pair<ActionListener, KeyStroke>> keyboardActions = Collections.singletonList(Pair.<ActionListener, KeyStroke>create(new ActionListener() [ CD ]
Line_20 $$ final List<RangeHighlighter> highlighters = new ArrayList<RangeHighlighter>()-->Line_27 $$ dropHighlighters(highlighters)[ FD ]
Line_15 $$ final JBList list = new JBList(validEnclosingMethods.toArray())-->Line_37 $$ final PsiMethod methodToSearchIn = (PsiMethod) list.getSelectedValue()[ FD ]
Line_2 $$ private void chooseMethodToIntroduceParameter(final Editor editor, final List<PsiMethod> validEnclosingMethods, final PairConsumer<PsiMethod, PsiMethod> consumer) -->Line_13 $$ superMethod.setMnemonic('U')[ CD ]
Line_38 $$ if (myEnclosingMethodsPopup != null && myEnclosingMethodsPopup.isVisible()) -->Line_39 $$ myEnclosingMethodsPopup.cancel()[ CD ]
