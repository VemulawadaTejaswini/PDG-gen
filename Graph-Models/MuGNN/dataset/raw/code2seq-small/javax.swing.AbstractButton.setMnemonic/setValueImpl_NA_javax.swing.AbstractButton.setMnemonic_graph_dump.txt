Line_21 $$ final SupportCode.TextWithMnemonic textWithMnemonic = SupportCode.parseText(resolvedValue)-->Line_43 $$ checkUpdateBindingFromText(component, value, textWithMnemonic)[ FD ]
Line_16 $$ final String resolvedValue = (value != null && value.getValue() != null) ? value.getValue() : StringDescriptorManager.getInstance(component.getModule()).resolve(value, locale)-->Line_18 $$ value.setResolvedValue(resolvedValue)[ FD ]
Line_8 $$ final JComponent delegee = component.getDelegee()-->Line_22 $$ if (delegee instanceof JLabel) [ FD ]
Line_25 $$ if (textWithMnemonic.myMnemonicIndex != -1) -->Line_26 $$ label.setDisplayedMnemonic(textWithMnemonic.getMnemonicChar())[ CD ]
Line_17 $$ if (value != null) -->Line_18 $$ value.setResolvedValue(resolvedValue)[ CD ]
Line_32 $$ final AbstractButton button = (AbstractButton) delegee-->Line_35 $$ button.setMnemonic(textWithMnemonic.getMnemonicChar())[ FD ]
Line_10 $$ if (locale == null) -->Line_12 $$ if (root != null) [ CD ]
Line_31 $$ if (delegee instanceof AbstractButton) -->Line_34 $$ if (textWithMnemonic.myMnemonicIndex != -1) [ CD ]
Line_9 $$ Locale locale = (Locale) component.getClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE)-->Line_16 $$ final String resolvedValue = (value != null && value.getValue() != null) ? value.getValue() : StringDescriptorManager.getInstance(component.getModule()).resolve(value, locale)[ FD ]
Line_34 $$ if (textWithMnemonic.myMnemonicIndex != -1) -->Line_38 $$ button.setMnemonic(0)[ CD ]
Line_2 $$ protected void setValueImpl(final RadComponent component, final StringDescriptor value) throws Exception -->Line_6 $$ getName2Descriptor(component).put(getName(), value)[ FD ]
Line_2 $$ protected void setValueImpl(final RadComponent component, final StringDescriptor value) throws Exception -->Line_8 $$ final JComponent delegee = component.getDelegee()[ CD ]
Line_22 $$ if (delegee instanceof JLabel) -->Line_25 $$ if (textWithMnemonic.myMnemonicIndex != -1) [ CD ]
Line_2 $$ protected void setValueImpl(final RadComponent component, final StringDescriptor value) throws Exception -->Line_41 $$ invokeSetter(component, resolvedValue)[ FD ]
Line_2 $$ protected void setValueImpl(final RadComponent component, final StringDescriptor value) throws Exception -->Line_4 $$ getName2Descriptor(component).remove(getName())[ FD ]
Line_32 $$ final AbstractButton button = (AbstractButton) delegee-->Line_36 $$ button.setDisplayedMnemonicIndex(textWithMnemonic.myMnemonicIndex)[ FD ]
Line_2 $$ protected void setValueImpl(final RadComponent component, final StringDescriptor value) throws Exception -->Line_43 $$ checkUpdateBindingFromText(component, value, textWithMnemonic)[ FD ]
Line_22 $$ if (delegee instanceof JLabel) -->Line_31 $$ if (delegee instanceof AbstractButton) [ CD ]
Line_25 $$ if (textWithMnemonic.myMnemonicIndex != -1) -->Line_27 $$ label.setDisplayedMnemonicIndex(textWithMnemonic.myMnemonicIndex)[ CD ]
Line_31 $$ if (delegee instanceof AbstractButton) -->Line_33 $$ button.setText(textWithMnemonic.myText)[ CD ]
Line_2 $$ protected void setValueImpl(final RadComponent component, final StringDescriptor value) throws Exception -->Line_9 $$ Locale locale = (Locale) component.getClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE)[ FD ]
Line_31 $$ if (delegee instanceof AbstractButton) -->Line_32 $$ final AbstractButton button = (AbstractButton) delegee[ CD ]
Line_31 $$ if (delegee instanceof AbstractButton) -->Line_41 $$ invokeSetter(component, resolvedValue)[ CD ]
Line_20 $$ if (SwingProperties.TEXT.equals(getName())) -->Line_22 $$ if (delegee instanceof JLabel) [ CD ]
Line_2 $$ protected void setValueImpl(final RadComponent component, final StringDescriptor value) throws Exception -->Line_10 $$ if (locale == null) [ CD ]
Line_21 $$ final SupportCode.TextWithMnemonic textWithMnemonic = SupportCode.parseText(resolvedValue)-->Line_26 $$ label.setDisplayedMnemonic(textWithMnemonic.getMnemonicChar())[ FD ]
Line_11 $$ RadRootContainer root = (RadRootContainer) FormEditingUtil.getRoot(component)-->Line_12 $$ if (root != null) [ FD ]
Line_10 $$ if (locale == null) -->Line_11 $$ RadRootContainer root = (RadRootContainer) FormEditingUtil.getRoot(component)[ CD ]
Line_23 $$ final JLabel label = (JLabel) delegee-->Line_29 $$ label.setDisplayedMnemonic(0)[ FD ]
Line_13 $$ locale = root.getStringDescriptorLocale()-->Line_16 $$ final String resolvedValue = (value != null && value.getValue() != null) ? value.getValue() : StringDescriptorManager.getInstance(component.getModule()).resolve(value, locale)[ FD ]
Line_3 $$ if (value == null || (value.getBundleName() == null && !value.isNoI18n())) -->Line_6 $$ getName2Descriptor(component).put(getName(), value)[ CD ]
Line_2 $$ protected void setValueImpl(final RadComponent component, final StringDescriptor value) throws Exception -->Line_8 $$ final JComponent delegee = component.getDelegee()[ FD ]
Line_2 $$ protected void setValueImpl(final RadComponent component, final StringDescriptor value) throws Exception -->Line_17 $$ if (value != null) [ CD ]
Line_22 $$ if (delegee instanceof JLabel) -->Line_24 $$ label.setText(textWithMnemonic.myText)[ CD ]
Line_32 $$ final AbstractButton button = (AbstractButton) delegee-->Line_38 $$ button.setMnemonic(0)[ FD ]
Line_12 $$ if (root != null) -->Line_13 $$ locale = root.getStringDescriptorLocale()[ CD ]
Line_9 $$ Locale locale = (Locale) component.getClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE)-->Line_13 $$ locale = root.getStringDescriptorLocale()[ FD ]
Line_20 $$ if (SwingProperties.TEXT.equals(getName())) -->Line_21 $$ final SupportCode.TextWithMnemonic textWithMnemonic = SupportCode.parseText(resolvedValue)[ CD ]
Line_2 $$ protected void setValueImpl(final RadComponent component, final StringDescriptor value) throws Exception -->Line_16 $$ final String resolvedValue = (value != null && value.getValue() != null) ? value.getValue() : StringDescriptorManager.getInstance(component.getModule()).resolve(value, locale)[ CD ]
Line_2 $$ protected void setValueImpl(final RadComponent component, final StringDescriptor value) throws Exception -->Line_17 $$ if (value != null) [ FD ]
Line_2 $$ protected void setValueImpl(final RadComponent component, final StringDescriptor value) throws Exception -->Line_45 $$ invokeSetter(component, resolvedValue)[ FD ]
Line_16 $$ final String resolvedValue = (value != null && value.getValue() != null) ? value.getValue() : StringDescriptorManager.getInstance(component.getModule()).resolve(value, locale)-->Line_45 $$ invokeSetter(component, resolvedValue)[ FD ]
Line_2 $$ protected void setValueImpl(final RadComponent component, final StringDescriptor value) throws Exception -->Line_20 $$ if (SwingProperties.TEXT.equals(getName())) [ CD ]
Line_23 $$ final JLabel label = (JLabel) delegee-->Line_27 $$ label.setDisplayedMnemonicIndex(textWithMnemonic.myMnemonicIndex)[ FD ]
Line_34 $$ if (textWithMnemonic.myMnemonicIndex != -1) -->Line_35 $$ button.setMnemonic(textWithMnemonic.getMnemonicChar())[ CD ]
Line_34 $$ if (textWithMnemonic.myMnemonicIndex != -1) -->Line_36 $$ button.setDisplayedMnemonicIndex(textWithMnemonic.myMnemonicIndex)[ CD ]
Line_20 $$ if (SwingProperties.TEXT.equals(getName())) -->Line_45 $$ invokeSetter(component, resolvedValue)[ CD ]
Line_23 $$ final JLabel label = (JLabel) delegee-->Line_26 $$ label.setDisplayedMnemonic(textWithMnemonic.getMnemonicChar())[ FD ]
Line_2 $$ protected void setValueImpl(final RadComponent component, final StringDescriptor value) throws Exception -->Line_3 $$ if (value == null || (value.getBundleName() == null && !value.isNoI18n())) [ FD ]
Line_20 $$ if (SwingProperties.TEXT.equals(getName())) -->Line_43 $$ checkUpdateBindingFromText(component, value, textWithMnemonic)[ CD ]
Line_9 $$ Locale locale = (Locale) component.getClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE)-->Line_10 $$ if (locale == null) [ FD ]
Line_2 $$ protected void setValueImpl(final RadComponent component, final StringDescriptor value) throws Exception -->Line_3 $$ if (value == null || (value.getBundleName() == null && !value.isNoI18n())) [ CD ]
Line_16 $$ final String resolvedValue = (value != null && value.getValue() != null) ? value.getValue() : StringDescriptorManager.getInstance(component.getModule()).resolve(value, locale)-->Line_21 $$ final SupportCode.TextWithMnemonic textWithMnemonic = SupportCode.parseText(resolvedValue)[ FD ]
Line_22 $$ if (delegee instanceof JLabel) -->Line_23 $$ final JLabel label = (JLabel) delegee[ CD ]
Line_8 $$ final JComponent delegee = component.getDelegee()-->Line_31 $$ if (delegee instanceof AbstractButton) [ FD ]
Line_11 $$ RadRootContainer root = (RadRootContainer) FormEditingUtil.getRoot(component)-->Line_13 $$ locale = root.getStringDescriptorLocale()[ FD ]
Line_21 $$ final SupportCode.TextWithMnemonic textWithMnemonic = SupportCode.parseText(resolvedValue)-->Line_35 $$ button.setMnemonic(textWithMnemonic.getMnemonicChar())[ FD ]
Line_2 $$ protected void setValueImpl(final RadComponent component, final StringDescriptor value) throws Exception -->Line_16 $$ final String resolvedValue = (value != null && value.getValue() != null) ? value.getValue() : StringDescriptorManager.getInstance(component.getModule()).resolve(value, locale)[ FD ]
Line_3 $$ if (value == null || (value.getBundleName() == null && !value.isNoI18n())) -->Line_4 $$ getName2Descriptor(component).remove(getName())[ CD ]
Line_23 $$ final JLabel label = (JLabel) delegee-->Line_24 $$ label.setText(textWithMnemonic.myText)[ FD ]
Line_2 $$ protected void setValueImpl(final RadComponent component, final StringDescriptor value) throws Exception -->Line_18 $$ value.setResolvedValue(resolvedValue)[ FD ]
Line_32 $$ final AbstractButton button = (AbstractButton) delegee-->Line_33 $$ button.setText(textWithMnemonic.myText)[ FD ]
Line_16 $$ final String resolvedValue = (value != null && value.getValue() != null) ? value.getValue() : StringDescriptorManager.getInstance(component.getModule()).resolve(value, locale)-->Line_41 $$ invokeSetter(component, resolvedValue)[ FD ]
Line_25 $$ if (textWithMnemonic.myMnemonicIndex != -1) -->Line_29 $$ label.setDisplayedMnemonic(0)[ CD ]
Line_2 $$ protected void setValueImpl(final RadComponent component, final StringDescriptor value) throws Exception -->Line_9 $$ Locale locale = (Locale) component.getClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE)[ CD ]
Line_2 $$ protected void setValueImpl(final RadComponent component, final StringDescriptor value) throws Exception -->Line_11 $$ RadRootContainer root = (RadRootContainer) FormEditingUtil.getRoot(component)[ FD ]
