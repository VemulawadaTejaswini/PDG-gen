Line_27 $$ String entry = elements.nextElement().getName()-->Line_41 $$ if (entry.endsWith(".class")) [ FD ]
Line_10 $$ if (path.startsWith(javaHome)) -->Line_11 $$ logger.debug("excluding system resource: [ CD ]
Line_3 $$ ESLogger logger = Loggers.getLogger(JarHell.class)-->Line_16 $$ logger.debug("excluding duplicate classpath element: [ FD ]
Line_41 $$ if (entry.endsWith(".class")) -->Line_42 $$ entry = entry.replace(sep, ".").substring(0, entry.length() - 6)[ CD ]
Line_37 $$ final String sep = root.getFileSystem().getSeparator()-->Line_42 $$ entry = entry.replace(sep, ".").substring(0, entry.length() - 6)[ FD ]
Line_36 $$ final Path root = PathUtils.get(url.toURI())-->Line_38 $$ Files.walkFileTree(root, new SimpleFileVisitor<Path>() [ FD ]
Line_27 $$ String entry = elements.nextElement().getName()-->Line_43 $$ checkClass(clazzes, entry, path)[ FD ]
Line_9 $$ final Path path = PathUtils.get(url.toURI())-->Line_20 $$ try (JarFile file = new JarFile(path.toString())) [ FD ]
Line_9 $$ final Path path = PathUtils.get(url.toURI())-->Line_16 $$ logger.debug("excluding duplicate classpath element: [ FD ]
Line_28 $$ if (entry.endsWith(".class")) -->Line_29 $$ entry = entry.replace('/', '.').substring(0, entry.length() - 6)[ CD ]
Line_2 $$ public static void checkJarHell(URL[] urls) throws Exception -->Line_5 $$ logger.debug("java.home: [ CD ]
Line_3 $$ ESLogger logger = Loggers.getLogger(JarHell.class)-->Line_35 $$ logger.debug("examining directory: [ FD ]
Line_9 $$ final Path path = PathUtils.get(url.toURI())-->Line_19 $$ logger.debug("examining jar: [ FD ]
Line_3 $$ ESLogger logger = Loggers.getLogger(JarHell.class)-->Line_5 $$ logger.debug("java.home: [ FD ]
Line_9 $$ final Path path = PathUtils.get(url.toURI())-->Line_10 $$ if (path.startsWith(javaHome)) [ FD ]
Line_20 $$ try (JarFile file = new JarFile(path.toString())) -->Line_21 $$ Manifest manifest = file.getManifest()[ FD ]
Line_14 $$ if (path.toString().endsWith(".jar")) -->Line_15 $$ if (!seenJars.add(path)) [ CD ]
Line_38 $$ Files.walkFileTree(root, new SimpleFileVisitor<Path>() -->Line_45 $$ return super.visitFile(file, attrs)[ CD ]
Line_25 $$ Enumeration<JarEntry> elements = file.entries()-->Line_26 $$ while (elements.hasMoreElements()) [ FD ]
Line_9 $$ final Path path = PathUtils.get(url.toURI())-->Line_35 $$ logger.debug("examining directory: [ FD ]
Line_29 $$ entry = entry.replace('/', '.').substring(0, entry.length() - 6)-->Line_28 $$ if (entry.endsWith(".class")) [ FD ]
Line_14 $$ if (path.toString().endsWith(".jar")) -->Line_19 $$ logger.debug("examining jar: [ CD ]
Line_2 $$ public static void checkJarHell(URL[] urls) throws Exception -->Line_6 $$ final Map<String, Path> clazzes = new HashMap(32768)[ CD ]
Line_27 $$ String entry = elements.nextElement().getName()-->Line_29 $$ entry = entry.replace('/', '.').substring(0, entry.length() - 6)[ FD ]
Line_9 $$ final Path path = PathUtils.get(url.toURI())-->Line_30 $$ checkClass(clazzes, entry, path)[ FD ]
Line_14 $$ if (path.toString().endsWith(".jar")) -->Line_35 $$ logger.debug("examining directory: [ CD ]
Line_38 $$ Files.walkFileTree(root, new SimpleFileVisitor<Path>() -->Line_41 $$ if (entry.endsWith(".class")) [ CD ]
Line_40 $$ String entry = root.relativize(file).toString()-->Line_42 $$ entry = entry.replace(sep, ".").substring(0, entry.length() - 6)[ FD ]
Line_40 $$ String entry = root.relativize(file).toString()-->Line_43 $$ checkClass(clazzes, entry, path)[ FD ]
Line_9 $$ final Path path = PathUtils.get(url.toURI())-->Line_14 $$ if (path.toString().endsWith(".jar")) [ FD ]
Line_6 $$ final Map<String, Path> clazzes = new HashMap(32768)-->Line_30 $$ checkClass(clazzes, entry, path)[ FD ]
Line_38 $$ Files.walkFileTree(root, new SimpleFileVisitor<Path>() -->Line_40 $$ String entry = root.relativize(file).toString()[ CD ]
Line_36 $$ final Path root = PathUtils.get(url.toURI())-->Line_40 $$ String entry = root.relativize(file).toString()[ FD ]
Line_9 $$ final Path path = PathUtils.get(url.toURI())-->Line_43 $$ checkClass(clazzes, entry, path)[ FD ]
Line_38 $$ Files.walkFileTree(root, new SimpleFileVisitor<Path>() -->Line_40 $$ String entry = root.relativize(file).toString()[ FD ]
Line_15 $$ if (!seenJars.add(path)) -->Line_16 $$ logger.debug("excluding duplicate classpath element: [ CD ]
Line_8 $$ for (final URL url : urls) -->Line_36 $$ final Path root = PathUtils.get(url.toURI())[ FD ]
Line_38 $$ Files.walkFileTree(root, new SimpleFileVisitor<Path>() -->Line_45 $$ return super.visitFile(file, attrs)[ FD ]
Line_2 $$ public static void checkJarHell(URL[] urls) throws Exception -->Line_7 $$ Set<Path> seenJars = new HashSet()[ CD ]
Line_42 $$ entry = entry.replace(sep, ".").substring(0, entry.length() - 6)-->Line_43 $$ checkClass(clazzes, entry, path)[ FD ]
Line_28 $$ if (entry.endsWith(".class")) -->Line_30 $$ checkClass(clazzes, entry, path)[ CD ]
Line_7 $$ Set<Path> seenJars = new HashSet()-->Line_15 $$ if (!seenJars.add(path)) [ FD ]
Line_14 $$ if (path.toString().endsWith(".jar")) -->Line_36 $$ final Path root = PathUtils.get(url.toURI())[ CD ]
Line_22 $$ if (manifest != null) -->Line_23 $$ checkManifest(manifest, path)[ CD ]
Line_4 $$ String javaHome = System.getProperty("java.home")-->Line_5 $$ logger.debug("java.home: [ FD ]
Line_26 $$ while (elements.hasMoreElements()) -->Line_27 $$ String entry = elements.nextElement().getName()[ CD ]
Line_29 $$ entry = entry.replace('/', '.').substring(0, entry.length() - 6)-->Line_42 $$ entry = entry.replace(sep, ".").substring(0, entry.length() - 6)[ FD ]
Line_9 $$ final Path path = PathUtils.get(url.toURI())-->Line_11 $$ logger.debug("excluding system resource: [ FD ]
Line_20 $$ try (JarFile file = new JarFile(path.toString())) -->Line_25 $$ Enumeration<JarEntry> elements = file.entries()[ FD ]
Line_3 $$ ESLogger logger = Loggers.getLogger(JarHell.class)-->Line_19 $$ logger.debug("examining jar: [ FD ]
Line_29 $$ entry = entry.replace('/', '.').substring(0, entry.length() - 6)-->Line_43 $$ checkClass(clazzes, entry, path)[ FD ]
Line_6 $$ final Map<String, Path> clazzes = new HashMap(32768)-->Line_43 $$ checkClass(clazzes, entry, path)[ FD ]
Line_14 $$ if (path.toString().endsWith(".jar")) -->Line_38 $$ Files.walkFileTree(root, new SimpleFileVisitor<Path>() [ CD ]
Line_40 $$ String entry = root.relativize(file).toString()-->Line_41 $$ if (entry.endsWith(".class")) [ FD ]
Line_20 $$ try (JarFile file = new JarFile(path.toString())) -->Line_45 $$ return super.visitFile(file, attrs)[ FD ]
Line_4 $$ String javaHome = System.getProperty("java.home")-->Line_10 $$ if (path.startsWith(javaHome)) [ FD ]
Line_9 $$ final Path path = PathUtils.get(url.toURI())-->Line_15 $$ if (!seenJars.add(path)) [ FD ]
Line_36 $$ final Path root = PathUtils.get(url.toURI())-->Line_37 $$ final String sep = root.getFileSystem().getSeparator()[ FD ]
Line_9 $$ final Path path = PathUtils.get(url.toURI())-->Line_23 $$ checkManifest(manifest, path)[ FD ]
Line_2 $$ public static void checkJarHell(URL[] urls) throws Exception -->Line_4 $$ String javaHome = System.getProperty("java.home")[ CD ]
Line_27 $$ String entry = elements.nextElement().getName()-->Line_42 $$ entry = entry.replace(sep, ".").substring(0, entry.length() - 6)[ FD ]
Line_21 $$ Manifest manifest = file.getManifest()-->Line_23 $$ checkManifest(manifest, path)[ FD ]
Line_41 $$ if (entry.endsWith(".class")) -->Line_43 $$ checkClass(clazzes, entry, path)[ CD ]
Line_27 $$ String entry = elements.nextElement().getName()-->Line_30 $$ checkClass(clazzes, entry, path)[ FD ]
Line_21 $$ Manifest manifest = file.getManifest()-->Line_22 $$ if (manifest != null) [ FD ]
Line_29 $$ entry = entry.replace('/', '.').substring(0, entry.length() - 6)-->Line_30 $$ checkClass(clazzes, entry, path)[ FD ]
Line_27 $$ String entry = elements.nextElement().getName()-->Line_28 $$ if (entry.endsWith(".class")) [ FD ]
Line_29 $$ entry = entry.replace('/', '.').substring(0, entry.length() - 6)-->Line_41 $$ if (entry.endsWith(".class")) [ FD ]
Line_3 $$ ESLogger logger = Loggers.getLogger(JarHell.class)-->Line_11 $$ logger.debug("excluding system resource: [ FD ]
Line_14 $$ if (path.toString().endsWith(".jar")) -->Line_37 $$ final String sep = root.getFileSystem().getSeparator()[ CD ]
Line_25 $$ Enumeration<JarEntry> elements = file.entries()-->Line_27 $$ String entry = elements.nextElement().getName()[ FD ]
Line_20 $$ try (JarFile file = new JarFile(path.toString())) -->Line_40 $$ String entry = root.relativize(file).toString()[ FD ]
Line_26 $$ while (elements.hasMoreElements()) -->Line_28 $$ if (entry.endsWith(".class")) [ CD ]
Line_8 $$ for (final URL url : urls) -->Line_9 $$ final Path path = PathUtils.get(url.toURI())[ FD ]
Line_2 $$ public static void checkJarHell(URL[] urls) throws Exception -->Line_3 $$ ESLogger logger = Loggers.getLogger(JarHell.class)[ CD ]
