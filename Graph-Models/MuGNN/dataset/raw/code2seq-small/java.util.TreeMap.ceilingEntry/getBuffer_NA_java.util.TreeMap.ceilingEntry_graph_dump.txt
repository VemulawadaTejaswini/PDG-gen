Line_2 $$ public synchronized ByteBuffer getBuffer(boolean direct, int length) -->Line_8 $$ tree.remove(entry.getKey())[ CD ]
Line_4 $$ Map.Entry<Key, ByteBuffer> entry = tree.ceilingEntry(new Key(length, 0))-->Line_5 $$ if (entry == null) [ FD ]
Line_2 $$ public synchronized ByteBuffer getBuffer(boolean direct, int length) -->Line_9 $$ return entry.getValue()[ CD ]
Line_2 $$ public synchronized ByteBuffer getBuffer(boolean direct, int length) -->Line_4 $$ Map.Entry<Key, ByteBuffer> entry = tree.ceilingEntry(new Key(length, 0))[ CD ]
Line_3 $$ TreeMap<Key, ByteBuffer> tree = getBufferTree(direct)-->Line_4 $$ Map.Entry<Key, ByteBuffer> entry = tree.ceilingEntry(new Key(length, 0))[ FD ]
Line_2 $$ public synchronized ByteBuffer getBuffer(boolean direct, int length) -->Line_5 $$ if (entry == null) [ CD ]
Line_2 $$ public synchronized ByteBuffer getBuffer(boolean direct, int length) -->Line_3 $$ TreeMap<Key, ByteBuffer> tree = getBufferTree(direct)[ FD ]
Line_2 $$ public synchronized ByteBuffer getBuffer(boolean direct, int length) -->Line_6 $$ return direct ? ByteBuffer.allocateDirect(length) : ByteBuffer.allocate(length)[ FD ]
Line_5 $$ if (entry == null) -->Line_6 $$ return direct ? ByteBuffer.allocateDirect(length) : ByteBuffer.allocate(length)[ CD ]
Line_3 $$ TreeMap<Key, ByteBuffer> tree = getBufferTree(direct)-->Line_8 $$ tree.remove(entry.getKey())[ FD ]
Line_4 $$ Map.Entry<Key, ByteBuffer> entry = tree.ceilingEntry(new Key(length, 0))-->Line_9 $$ return entry.getValue()[ FD ]
Line_2 $$ public synchronized ByteBuffer getBuffer(boolean direct, int length) -->Line_3 $$ TreeMap<Key, ByteBuffer> tree = getBufferTree(direct)[ CD ]
Line_4 $$ Map.Entry<Key, ByteBuffer> entry = tree.ceilingEntry(new Key(length, 0))-->Line_8 $$ tree.remove(entry.getKey())[ FD ]
