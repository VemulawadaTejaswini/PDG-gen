Line_16 $$ final PresentationData presentation = node.getPresentation()-->Line_31 $$ if (each.getAttributes().getFgColor() == null && presentation.getForcedTextForeground() != null) [ FD ]
Line_2 $$ public void customizeCellRenderer(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_65 $$ if (!AbstractTreeUi.isLoadingNode(value)) [ FD ]
Line_20 $$ SimpleTextAttributes simpleTextAttributes = getSimpleTextAttributes(node, presentation.getForcedTextForeground() != null ? presentation.getForcedTextForeground() : color)-->Line_39 $$ simpleTextAttributes = SimpleTextAttributes.merge(simpleTextAttributes, SimpleTextAttributes.fromTextAttributes(forcedAttributes))[ FD ]
Line_53 $$ if (value != null) -->Line_63 $$ setToolTipText(null)[ CD ]
Line_16 $$ final PresentationData presentation = node.getPresentation()-->Line_32 $$ simpleTextAttributes = addColorToSimpleTextAttributes(each.getAttributes(), presentation.getForcedTextForeground() != null ? presentation.getForcedTextForeground() : color)[ FD ]
Line_44 $$ boolean isMain = simpleTextAttributes != SimpleTextAttributes.GRAYED_ATTRIBUTES-->Line_45 $$ append(each.getText(), simpleTextAttributes, isMain)[ FD ]
Line_23 $$ if (!StringUtil.isEmpty(location)) -->Line_25 $$ append(presentation.getLocationPrefix() + location + presentation.getLocationSuffix(), attributes, false)[ CD ]
Line_2 $$ public void customizeCellRenderer(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_5 $$ if (value instanceof DefaultMutableTreeNode) [ FD ]
Line_6 $$ DefaultMutableTreeNode node = (DefaultMutableTreeNode) value-->Line_20 $$ SimpleTextAttributes simpleTextAttributes = getSimpleTextAttributes(node, presentation.getForcedTextForeground() != null ? presentation.getForcedTextForeground() : color)[ FD ]
Line_7 $$ Object userObject = node.getUserObject()-->Line_8 $$ if (userObject instanceof NodeDescriptor) [ FD ]
Line_4 $$ NodeDescriptor descriptor = null-->Line_14 $$ if (descriptor instanceof PresentableNodeDescriptor) [ FD ]
Line_56 $$ text = descriptor.myName-->Line_60 $$ text = ""[ FD ]
Line_37 $$ final TextAttributes forcedAttributes = getColorsScheme().getAttributes(textAttributesKey)-->Line_38 $$ if (forcedAttributes != null) [ FD ]
Line_23 $$ if (!StringUtil.isEmpty(location)) -->Line_24 $$ SimpleTextAttributes attributes = SimpleTextAttributes.merge(simpleTextAttributes, SimpleTextAttributes.GRAYED_ATTRIBUTES)[ CD ]
Line_55 $$ if (descriptor != null) -->Line_56 $$ text = descriptor.myName[ CD ]
Line_9 $$ descriptor = (NodeDescriptor) userObject-->Line_11 $$ setIcon(descriptor.getIcon())[ FD ]
Line_20 $$ SimpleTextAttributes simpleTextAttributes = getSimpleTextAttributes(node, presentation.getForcedTextForeground() != null ? presentation.getForcedTextForeground() : color)-->Line_24 $$ SimpleTextAttributes attributes = SimpleTextAttributes.merge(simpleTextAttributes, SimpleTextAttributes.GRAYED_ATTRIBUTES)[ FD ]
Line_36 $$ if (textAttributesKey != null) -->Line_37 $$ final TextAttributes forcedAttributes = getColorsScheme().getAttributes(textAttributesKey)[ CD ]
Line_53 $$ if (value != null) -->Line_62 $$ append(text)[ CD ]
Line_56 $$ text = descriptor.myName-->Line_58 $$ text = tree.convertValueToText(text, selected, expanded, leaf, row, hasFocus)[ FD ]
Line_16 $$ final PresentationData presentation = node.getPresentation()-->Line_47 $$ String location = presentation.getLocationString()[ FD ]
Line_22 $$ String location = presentation.getLocationString()-->Line_23 $$ if (!StringUtil.isEmpty(location)) [ FD ]
Line_18 $$ if (coloredText.isEmpty()) -->Line_47 $$ String location = presentation.getLocationString()[ CD ]
Line_35 $$ final TextAttributesKey textAttributesKey = presentation.getTextAttributesKey()-->Line_37 $$ final TextAttributes forcedAttributes = getColorsScheme().getAttributes(textAttributesKey)[ FD ]
Line_24 $$ SimpleTextAttributes attributes = SimpleTextAttributes.merge(simpleTextAttributes, SimpleTextAttributes.GRAYED_ATTRIBUTES)-->Line_25 $$ append(presentation.getLocationPrefix() + location + presentation.getLocationSuffix(), attributes, false)[ FD ]
Line_16 $$ final PresentationData presentation = node.getPresentation()-->Line_35 $$ final TextAttributesKey textAttributesKey = presentation.getTextAttributesKey()[ FD ]
Line_9 $$ descriptor = (NodeDescriptor) userObject-->Line_55 $$ if (descriptor != null) [ FD ]
Line_9 $$ descriptor = (NodeDescriptor) userObject-->Line_14 $$ if (descriptor instanceof PresentableNodeDescriptor) [ FD ]
Line_20 $$ SimpleTextAttributes simpleTextAttributes = getSimpleTextAttributes(node, presentation.getForcedTextForeground() != null ? presentation.getForcedTextForeground() : color)-->Line_32 $$ simpleTextAttributes = addColorToSimpleTextAttributes(each.getAttributes(), presentation.getForcedTextForeground() != null ? presentation.getForcedTextForeground() : color)[ FD ]
Line_20 $$ SimpleTextAttributes simpleTextAttributes = getSimpleTextAttributes(node, presentation.getForcedTextForeground() != null ? presentation.getForcedTextForeground() : color)-->Line_45 $$ append(each.getText(), simpleTextAttributes, isMain)[ FD ]
Line_9 $$ descriptor = (NodeDescriptor) userObject-->Line_10 $$ color = descriptor.getColor()[ FD ]
Line_56 $$ text = descriptor.myName-->Line_62 $$ append(text)[ FD ]
Line_19 $$ String text = tree.convertValueToText(value.toString(), selected, expanded, leaf, row, hasFocus)-->Line_62 $$ append(text)[ FD ]
Line_18 $$ if (coloredText.isEmpty()) -->Line_48 $$ if (!StringUtil.isEmpty(location)) [ CD ]
Line_48 $$ if (!StringUtil.isEmpty(location)) -->Line_49 $$ append(presentation.getLocationPrefix() + location + presentation.getLocationSuffix(), SimpleTextAttributes.GRAY_ATTRIBUTES, false)[ CD ]
Line_4 $$ NodeDescriptor descriptor = null-->Line_55 $$ if (descriptor != null) [ FD ]
Line_58 $$ text = tree.convertValueToText(text, selected, expanded, leaf, row, hasFocus)-->Line_60 $$ text = ""[ FD ]
Line_20 $$ SimpleTextAttributes simpleTextAttributes = getSimpleTextAttributes(node, presentation.getForcedTextForeground() != null ? presentation.getForcedTextForeground() : color)-->Line_21 $$ append(text, simpleTextAttributes)[ FD ]
Line_2 $$ public void customizeCellRenderer(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_3 $$ Color color = null[ CD ]
Line_2 $$ public void customizeCellRenderer(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_65 $$ if (!AbstractTreeUi.isLoadingNode(value)) [ CD ]
Line_14 $$ if (descriptor instanceof PresentableNodeDescriptor) -->Line_52 $$ setToolTipText(presentation.getTooltip())[ CD ]
Line_4 $$ NodeDescriptor descriptor = null-->Line_11 $$ setIcon(descriptor.getIcon())[ FD ]
Line_35 $$ final TextAttributesKey textAttributesKey = presentation.getTextAttributesKey()-->Line_36 $$ if (textAttributesKey != null) [ FD ]
Line_36 $$ if (textAttributesKey != null) -->Line_38 $$ if (forcedAttributes != null) [ CD ]
Line_32 $$ simpleTextAttributes = addColorToSimpleTextAttributes(each.getAttributes(), presentation.getForcedTextForeground() != null ? presentation.getForcedTextForeground() : color)-->Line_45 $$ append(each.getText(), simpleTextAttributes, isMain)[ FD ]
Line_2 $$ public void customizeCellRenderer(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_58 $$ text = tree.convertValueToText(text, selected, expanded, leaf, row, hasFocus)[ FD ]
Line_14 $$ if (descriptor instanceof PresentableNodeDescriptor) -->Line_18 $$ if (coloredText.isEmpty()) [ CD ]
Line_53 $$ if (value != null) -->Line_54 $$ String text = value.toString()[ CD ]
Line_31 $$ if (each.getAttributes().getFgColor() == null && presentation.getForcedTextForeground() != null) -->Line_32 $$ simpleTextAttributes = addColorToSimpleTextAttributes(each.getAttributes(), presentation.getForcedTextForeground() != null ? presentation.getForcedTextForeground() : color)[ CD ]
Line_2 $$ public void customizeCellRenderer(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_5 $$ if (value instanceof DefaultMutableTreeNode) [ CD ]
Line_16 $$ final PresentationData presentation = node.getPresentation()-->Line_20 $$ SimpleTextAttributes simpleTextAttributes = getSimpleTextAttributes(node, presentation.getForcedTextForeground() != null ? presentation.getForcedTextForeground() : color)[ FD ]
Line_5 $$ if (value instanceof DefaultMutableTreeNode) -->Line_8 $$ if (userObject instanceof NodeDescriptor) [ CD ]
Line_60 $$ text = ""-->Line_62 $$ append(text)[ FD ]
Line_16 $$ final PresentationData presentation = node.getPresentation()-->Line_25 $$ append(presentation.getLocationPrefix() + location + presentation.getLocationSuffix(), attributes, false)[ FD ]
Line_2 $$ public void customizeCellRenderer(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_19 $$ String text = tree.convertValueToText(value.toString(), selected, expanded, leaf, row, hasFocus)[ FD ]
Line_16 $$ final PresentationData presentation = node.getPresentation()-->Line_52 $$ setToolTipText(presentation.getTooltip())[ FD ]
Line_4 $$ NodeDescriptor descriptor = null-->Line_10 $$ color = descriptor.getColor()[ FD ]
Line_3 $$ Color color = null-->Line_10 $$ color = descriptor.getColor()[ FD ]
Line_34 $$ if (first) -->Line_42 $$ first = false[ CD ]
Line_39 $$ simpleTextAttributes = SimpleTextAttributes.merge(simpleTextAttributes, SimpleTextAttributes.fromTextAttributes(forcedAttributes))-->Line_45 $$ append(each.getText(), simpleTextAttributes, isMain)[ FD ]
Line_19 $$ String text = tree.convertValueToText(value.toString(), selected, expanded, leaf, row, hasFocus)-->Line_56 $$ text = descriptor.myName[ FD ]
Line_18 $$ if (coloredText.isEmpty()) -->Line_23 $$ if (!StringUtil.isEmpty(location)) [ CD ]
Line_16 $$ final PresentationData presentation = node.getPresentation()-->Line_17 $$ final List<PresentableNodeDescriptor.ColoredFragment> coloredText = presentation.getColoredText()[ FD ]
Line_18 $$ if (coloredText.isEmpty()) -->Line_28 $$ boolean first = true[ CD ]
Line_6 $$ DefaultMutableTreeNode node = (DefaultMutableTreeNode) value-->Line_16 $$ final PresentationData presentation = node.getPresentation()[ FD ]
Line_2 $$ public void customizeCellRenderer(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_54 $$ String text = value.toString()[ FD ]
Line_16 $$ final PresentationData presentation = node.getPresentation()-->Line_49 $$ append(presentation.getLocationPrefix() + location + presentation.getLocationSuffix(), SimpleTextAttributes.GRAY_ATTRIBUTES, false)[ FD ]
Line_58 $$ text = tree.convertValueToText(text, selected, expanded, leaf, row, hasFocus)-->Line_59 $$ if (text == null) [ FD ]
Line_34 $$ if (first) -->Line_35 $$ final TextAttributesKey textAttributesKey = presentation.getTextAttributesKey()[ CD ]
Line_14 $$ if (descriptor instanceof PresentableNodeDescriptor) -->Line_16 $$ final PresentationData presentation = node.getPresentation()[ CD ]
Line_58 $$ text = tree.convertValueToText(text, selected, expanded, leaf, row, hasFocus)-->Line_62 $$ append(text)[ FD ]
Line_28 $$ boolean first = true-->Line_42 $$ first = false[ FD ]
Line_6 $$ DefaultMutableTreeNode node = (DefaultMutableTreeNode) value-->Line_7 $$ Object userObject = node.getUserObject()[ FD ]
Line_5 $$ if (value instanceof DefaultMutableTreeNode) -->Line_7 $$ Object userObject = node.getUserObject()[ CD ]
Line_5 $$ if (value instanceof DefaultMutableTreeNode) -->Line_6 $$ DefaultMutableTreeNode node = (DefaultMutableTreeNode) value[ CD ]
Line_38 $$ if (forcedAttributes != null) -->Line_39 $$ simpleTextAttributes = SimpleTextAttributes.merge(simpleTextAttributes, SimpleTextAttributes.fromTextAttributes(forcedAttributes))[ CD ]
Line_56 $$ text = descriptor.myName-->Line_59 $$ if (text == null) [ FD ]
Line_17 $$ final List<PresentableNodeDescriptor.ColoredFragment> coloredText = presentation.getColoredText()-->Line_18 $$ if (coloredText.isEmpty()) [ FD ]
Line_29 $$ for (PresentableNodeDescriptor.ColoredFragment each : coloredText) -->Line_32 $$ simpleTextAttributes = addColorToSimpleTextAttributes(each.getAttributes(), presentation.getForcedTextForeground() != null ? presentation.getForcedTextForeground() : color)[ FD ]
Line_8 $$ if (userObject instanceof NodeDescriptor) -->Line_9 $$ descriptor = (NodeDescriptor) userObject[ CD ]
Line_2 $$ public void customizeCellRenderer(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_66 $$ SpeedSearchUtil.applySpeedSearchHighlighting(tree, this, true, selected)[ FD ]
Line_14 $$ if (descriptor instanceof PresentableNodeDescriptor) -->Line_53 $$ if (value != null) [ CD ]
Line_22 $$ String location = presentation.getLocationString()-->Line_48 $$ if (!StringUtil.isEmpty(location)) [ FD ]
Line_29 $$ for (PresentableNodeDescriptor.ColoredFragment each : coloredText) -->Line_45 $$ append(each.getText(), simpleTextAttributes, isMain)[ FD ]
Line_29 $$ for (PresentableNodeDescriptor.ColoredFragment each : coloredText) -->Line_31 $$ if (each.getAttributes().getFgColor() == null && presentation.getForcedTextForeground() != null) [ FD ]
Line_18 $$ if (coloredText.isEmpty()) -->Line_19 $$ String text = tree.convertValueToText(value.toString(), selected, expanded, leaf, row, hasFocus)[ CD ]
Line_4 $$ NodeDescriptor descriptor = null-->Line_9 $$ descriptor = (NodeDescriptor) userObject[ FD ]
Line_14 $$ if (descriptor instanceof PresentableNodeDescriptor) -->Line_17 $$ final List<PresentableNodeDescriptor.ColoredFragment> coloredText = presentation.getColoredText()[ CD ]
Line_32 $$ simpleTextAttributes = addColorToSimpleTextAttributes(each.getAttributes(), presentation.getForcedTextForeground() != null ? presentation.getForcedTextForeground() : color)-->Line_39 $$ simpleTextAttributes = SimpleTextAttributes.merge(simpleTextAttributes, SimpleTextAttributes.fromTextAttributes(forcedAttributes))[ FD ]
Line_8 $$ if (userObject instanceof NodeDescriptor) -->Line_11 $$ setIcon(descriptor.getIcon())[ CD ]
Line_59 $$ if (text == null) -->Line_60 $$ text = ""[ CD ]
Line_19 $$ String text = tree.convertValueToText(value.toString(), selected, expanded, leaf, row, hasFocus)-->Line_59 $$ if (text == null) [ FD ]
Line_18 $$ if (coloredText.isEmpty()) -->Line_21 $$ append(text, simpleTextAttributes)[ CD ]
Line_19 $$ String text = tree.convertValueToText(value.toString(), selected, expanded, leaf, row, hasFocus)-->Line_21 $$ append(text, simpleTextAttributes)[ FD ]
Line_18 $$ if (coloredText.isEmpty()) -->Line_20 $$ SimpleTextAttributes simpleTextAttributes = getSimpleTextAttributes(node, presentation.getForcedTextForeground() != null ? presentation.getForcedTextForeground() : color)[ CD ]
Line_18 $$ if (coloredText.isEmpty()) -->Line_22 $$ String location = presentation.getLocationString()[ CD ]
Line_53 $$ if (value != null) -->Line_58 $$ text = tree.convertValueToText(text, selected, expanded, leaf, row, hasFocus)[ CD ]
Line_53 $$ if (value != null) -->Line_55 $$ if (descriptor != null) [ CD ]
Line_19 $$ String text = tree.convertValueToText(value.toString(), selected, expanded, leaf, row, hasFocus)-->Line_60 $$ text = ""[ FD ]
Line_2 $$ public void customizeCellRenderer(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_14 $$ if (descriptor instanceof PresentableNodeDescriptor) [ CD ]
Line_8 $$ if (userObject instanceof NodeDescriptor) -->Line_10 $$ color = descriptor.getColor()[ CD ]
Line_19 $$ String text = tree.convertValueToText(value.toString(), selected, expanded, leaf, row, hasFocus)-->Line_58 $$ text = tree.convertValueToText(text, selected, expanded, leaf, row, hasFocus)[ FD ]
Line_37 $$ final TextAttributes forcedAttributes = getColorsScheme().getAttributes(textAttributesKey)-->Line_39 $$ simpleTextAttributes = SimpleTextAttributes.merge(simpleTextAttributes, SimpleTextAttributes.fromTextAttributes(forcedAttributes))[ FD ]
Line_53 $$ if (value != null) -->Line_59 $$ if (text == null) [ CD ]
Line_34 $$ if (first) -->Line_36 $$ if (textAttributesKey != null) [ CD ]
Line_65 $$ if (!AbstractTreeUi.isLoadingNode(value)) -->Line_66 $$ SpeedSearchUtil.applySpeedSearchHighlighting(tree, this, true, selected)[ CD ]
Line_2 $$ public void customizeCellRenderer(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_4 $$ NodeDescriptor descriptor = null[ CD ]
Line_2 $$ public void customizeCellRenderer(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_53 $$ if (value != null) [ FD ]
Line_16 $$ final PresentationData presentation = node.getPresentation()-->Line_22 $$ String location = presentation.getLocationString()[ FD ]
Line_29 $$ for (PresentableNodeDescriptor.ColoredFragment each : coloredText) -->Line_30 $$ SimpleTextAttributes simpleTextAttributes = each.getAttributes()[ FD ]
