Line_23 $$ VersionedEntry ve = (VersionedEntry) newValue-->Line_25 $$ newTimestamp = ve.getTimestamp()[ FD ]
Line_12 $$ oldTimestamp = ((VersionedEntry) oldValue).getTimestamp()-->Line_42 $$ if (newTimestamp <= oldTimestamp) [ FD ]
Line_14 $$ if (oldValue instanceof org.hibernate.cache.spi.entry.CacheEntry) -->Line_15 $$ oldVersion = ((org.hibernate.cache.spi.entry.CacheEntry) oldValue).getVersion()[ CD ]
Line_13 $$ oldValue = ((VersionedEntry) oldValue).getValue()-->Line_14 $$ if (oldValue instanceof org.hibernate.cache.spi.entry.CacheEntry) [ FD ]
Line_8 $$ Object oldVersion = null-->Line_15 $$ oldVersion = ((org.hibernate.cache.spi.entry.CacheEntry) oldValue).getVersion()[ FD ]
Line_10 $$ if (oldValue instanceof VersionedEntry) -->Line_14 $$ if (oldValue instanceof org.hibernate.cache.spi.entry.CacheEntry) [ CD ]
Line_18 $$ Object newVersion = null-->Line_34 $$ if (newVersion == null) [ FD ]
Line_10 $$ if (oldValue instanceof VersionedEntry) -->Line_13 $$ oldValue = ((VersionedEntry) oldValue).getValue()[ CD ]
Line_3 $$ MVCCEntry e = (MVCCEntry) ctx.lookupEntry(command.getKey())-->Line_35 $$ setValue(e, newValue)[ FD ]
Line_20 $$ Object actualNewValue = newValue-->Line_53 $$ setValue(e, actualNewValue)[ FD ]
Line_11 $$ oldVersion = ((VersionedEntry) oldValue).getVersion()-->Line_15 $$ oldVersion = ((org.hibernate.cache.spi.entry.CacheEntry) oldValue).getVersion()[ FD ]
Line_19 $$ long newTimestamp = Long.MIN_VALUE-->Line_40 $$ if (newTimestamp == Long.MIN_VALUE) [ FD ]
Line_8 $$ Object oldVersion = null-->Line_38 $$ if (oldVersion == null) [ FD ]
Line_18 $$ Object newVersion = null-->Line_24 $$ newVersion = ve.getVersion()[ FD ]
Line_23 $$ VersionedEntry ve = (VersionedEntry) newValue-->Line_26 $$ if (ve.getValue() == null) [ FD ]
Line_2 $$ public Object visitPutKeyValueCommand(InvocationContext ctx, PutKeyValueCommand command) throws Throwable -->Line_8 $$ Object oldVersion = null[ CD ]
Line_31 $$ if (newValue instanceof org.hibernate.cache.spi.entry.CacheEntry) -->Line_32 $$ newVersion = ((org.hibernate.cache.spi.entry.CacheEntry) newValue).getVersion()[ CD ]
Line_17 $$ Object newValue = command.getValue()-->Line_51 $$ setValue(e, newValue)[ FD ]
Line_24 $$ newVersion = ve.getVersion()-->Line_32 $$ newVersion = ((org.hibernate.cache.spi.entry.CacheEntry) newValue).getVersion()[ FD ]
Line_26 $$ if (ve.getValue() == null) -->Line_27 $$ isRemoval = true[ CD ]
Line_20 $$ Object actualNewValue = newValue-->Line_29 $$ actualNewValue = ve.getValue()[ FD ]
Line_34 $$ if (newVersion == null) -->Line_36 $$ return null[ CD ]
Line_2 $$ public Object visitPutKeyValueCommand(InvocationContext ctx, PutKeyValueCommand command) throws Throwable -->Line_38 $$ if (oldVersion == null) [ CD ]
Line_2 $$ public Object visitPutKeyValueCommand(InvocationContext ctx, PutKeyValueCommand command) throws Throwable -->Line_7 $$ Object oldValue = e.getValue()[ CD ]
Line_2 $$ public Object visitPutKeyValueCommand(InvocationContext ctx, PutKeyValueCommand command) throws Throwable -->Line_21 $$ boolean isRemoval = false[ CD ]
Line_7 $$ Object oldValue = e.getValue()-->Line_10 $$ if (oldValue instanceof VersionedEntry) [ FD ]
Line_2 $$ public Object visitPutKeyValueCommand(InvocationContext ctx, PutKeyValueCommand command) throws Throwable -->Line_55 $$ return null[ CD ]
Line_24 $$ newVersion = ve.getVersion()-->Line_34 $$ if (newVersion == null) [ FD ]
Line_23 $$ VersionedEntry ve = (VersionedEntry) newValue-->Line_28 $$ if (ve.getValue() instanceof org.hibernate.cache.spi.entry.CacheEntry) [ FD ]
Line_32 $$ newVersion = ((org.hibernate.cache.spi.entry.CacheEntry) newValue).getVersion()-->Line_34 $$ if (newVersion == null) [ FD ]
Line_3 $$ MVCCEntry e = (MVCCEntry) ctx.lookupEntry(command.getKey())-->Line_53 $$ setValue(e, actualNewValue)[ FD ]
Line_15 $$ oldVersion = ((org.hibernate.cache.spi.entry.CacheEntry) oldValue).getVersion()-->Line_49 $$ int compareResult = versionComparator.compare(newVersion, oldVersion)[ FD ]
Line_2 $$ public Object visitPutKeyValueCommand(InvocationContext ctx, PutKeyValueCommand command) throws Throwable -->Line_49 $$ int compareResult = versionComparator.compare(newVersion, oldVersion)[ CD ]
Line_22 $$ if (newValue instanceof VersionedEntry) -->Line_31 $$ if (newValue instanceof org.hibernate.cache.spi.entry.CacheEntry) [ CD ]
Line_17 $$ Object newValue = command.getValue()-->Line_31 $$ if (newValue instanceof org.hibernate.cache.spi.entry.CacheEntry) [ FD ]
Line_3 $$ MVCCEntry e = (MVCCEntry) ctx.lookupEntry(command.getKey())-->Line_41 $$ setValue(e, newValue)[ FD ]
Line_17 $$ Object newValue = command.getValue()-->Line_45 $$ setValue(e, newValue)[ FD ]
Line_3 $$ MVCCEntry e = (MVCCEntry) ctx.lookupEntry(command.getKey())-->Line_4 $$ if (e == null) [ FD ]
Line_21 $$ boolean isRemoval = false-->Line_50 $$ if (isRemoval && compareResult >= 0) [ FD ]
Line_32 $$ newVersion = ((org.hibernate.cache.spi.entry.CacheEntry) newValue).getVersion()-->Line_49 $$ int compareResult = versionComparator.compare(newVersion, oldVersion)[ FD ]
Line_2 $$ public Object visitPutKeyValueCommand(InvocationContext ctx, PutKeyValueCommand command) throws Throwable -->Line_22 $$ if (newValue instanceof VersionedEntry) [ CD ]
Line_25 $$ newTimestamp = ve.getTimestamp()-->Line_40 $$ if (newTimestamp == Long.MIN_VALUE) [ FD ]
Line_24 $$ newVersion = ve.getVersion()-->Line_49 $$ int compareResult = versionComparator.compare(newVersion, oldVersion)[ FD ]
Line_27 $$ isRemoval = true-->Line_50 $$ if (isRemoval && compareResult >= 0) [ FD ]
Line_23 $$ VersionedEntry ve = (VersionedEntry) newValue-->Line_24 $$ newVersion = ve.getVersion()[ FD ]
Line_19 $$ long newTimestamp = Long.MIN_VALUE-->Line_25 $$ newTimestamp = ve.getTimestamp()[ FD ]
Line_2 $$ public Object visitPutKeyValueCommand(InvocationContext ctx, PutKeyValueCommand command) throws Throwable -->Line_3 $$ MVCCEntry e = (MVCCEntry) ctx.lookupEntry(command.getKey())[ FD ]
Line_10 $$ if (oldValue instanceof VersionedEntry) -->Line_12 $$ oldTimestamp = ((VersionedEntry) oldValue).getTimestamp()[ CD ]
Line_10 $$ if (oldValue instanceof VersionedEntry) -->Line_11 $$ oldVersion = ((VersionedEntry) oldValue).getVersion()[ CD ]
Line_52 $$ if (compareResult > 0) -->Line_53 $$ setValue(e, actualNewValue)[ CD ]
Line_8 $$ Object oldVersion = null-->Line_49 $$ int compareResult = versionComparator.compare(newVersion, oldVersion)[ FD ]
Line_22 $$ if (newValue instanceof VersionedEntry) -->Line_26 $$ if (ve.getValue() == null) [ CD ]
Line_50 $$ if (isRemoval && compareResult >= 0) -->Line_51 $$ setValue(e, newValue)[ CD ]
Line_2 $$ public Object visitPutKeyValueCommand(InvocationContext ctx, PutKeyValueCommand command) throws Throwable -->Line_18 $$ Object newVersion = null[ CD ]
Line_17 $$ Object newValue = command.getValue()-->Line_22 $$ if (newValue instanceof VersionedEntry) [ FD ]
Line_11 $$ oldVersion = ((VersionedEntry) oldValue).getVersion()-->Line_38 $$ if (oldVersion == null) [ FD ]
Line_25 $$ newTimestamp = ve.getTimestamp()-->Line_42 $$ if (newTimestamp <= oldTimestamp) [ FD ]
Line_8 $$ Object oldVersion = null-->Line_11 $$ oldVersion = ((VersionedEntry) oldValue).getVersion()[ FD ]
Line_9 $$ long oldTimestamp = Long.MIN_VALUE-->Line_12 $$ oldTimestamp = ((VersionedEntry) oldValue).getTimestamp()[ FD ]
Line_2 $$ public Object visitPutKeyValueCommand(InvocationContext ctx, PutKeyValueCommand command) throws Throwable -->Line_9 $$ long oldTimestamp = Long.MIN_VALUE[ CD ]
Line_2 $$ public Object visitPutKeyValueCommand(InvocationContext ctx, PutKeyValueCommand command) throws Throwable -->Line_10 $$ if (oldValue instanceof VersionedEntry) [ CD ]
Line_2 $$ public Object visitPutKeyValueCommand(InvocationContext ctx, PutKeyValueCommand command) throws Throwable -->Line_17 $$ Object newValue = command.getValue()[ CD ]
Line_49 $$ int compareResult = versionComparator.compare(newVersion, oldVersion)-->Line_52 $$ if (compareResult > 0) [ FD ]
Line_26 $$ if (ve.getValue() == null) -->Line_28 $$ if (ve.getValue() instanceof org.hibernate.cache.spi.entry.CacheEntry) [ CD ]
Line_22 $$ if (newValue instanceof VersionedEntry) -->Line_25 $$ newTimestamp = ve.getTimestamp()[ CD ]
Line_22 $$ if (newValue instanceof VersionedEntry) -->Line_24 $$ newVersion = ve.getVersion()[ CD ]
Line_21 $$ boolean isRemoval = false-->Line_27 $$ isRemoval = true[ FD ]
Line_11 $$ oldVersion = ((VersionedEntry) oldValue).getVersion()-->Line_49 $$ int compareResult = versionComparator.compare(newVersion, oldVersion)[ FD ]
Line_29 $$ actualNewValue = ve.getValue()-->Line_53 $$ setValue(e, actualNewValue)[ FD ]
Line_17 $$ Object newValue = command.getValue()-->Line_35 $$ setValue(e, newValue)[ FD ]
Line_18 $$ Object newVersion = null-->Line_49 $$ int compareResult = versionComparator.compare(newVersion, oldVersion)[ FD ]
Line_50 $$ if (isRemoval && compareResult >= 0) -->Line_52 $$ if (compareResult > 0) [ CD ]
Line_34 $$ if (newVersion == null) -->Line_35 $$ setValue(e, newValue)[ CD ]
Line_7 $$ Object oldValue = e.getValue()-->Line_14 $$ if (oldValue instanceof org.hibernate.cache.spi.entry.CacheEntry) [ FD ]
Line_2 $$ public Object visitPutKeyValueCommand(InvocationContext ctx, PutKeyValueCommand command) throws Throwable -->Line_34 $$ if (newVersion == null) [ CD ]
Line_2 $$ public Object visitPutKeyValueCommand(InvocationContext ctx, PutKeyValueCommand command) throws Throwable -->Line_4 $$ if (e == null) [ CD ]
Line_3 $$ MVCCEntry e = (MVCCEntry) ctx.lookupEntry(command.getKey())-->Line_45 $$ setValue(e, newValue)[ FD ]
Line_18 $$ Object newVersion = null-->Line_32 $$ newVersion = ((org.hibernate.cache.spi.entry.CacheEntry) newValue).getVersion()[ FD ]
Line_42 $$ if (newTimestamp <= oldTimestamp) -->Line_45 $$ setValue(e, newValue)[ CD ]
Line_38 $$ if (oldVersion == null) -->Line_40 $$ if (newTimestamp == Long.MIN_VALUE) [ CD ]
Line_2 $$ public Object visitPutKeyValueCommand(InvocationContext ctx, PutKeyValueCommand command) throws Throwable -->Line_20 $$ Object actualNewValue = newValue[ CD ]
Line_2 $$ public Object visitPutKeyValueCommand(InvocationContext ctx, PutKeyValueCommand command) throws Throwable -->Line_50 $$ if (isRemoval && compareResult >= 0) [ CD ]
Line_2 $$ public Object visitPutKeyValueCommand(InvocationContext ctx, PutKeyValueCommand command) throws Throwable -->Line_17 $$ Object newValue = command.getValue()[ FD ]
Line_40 $$ if (newTimestamp == Long.MIN_VALUE) -->Line_41 $$ setValue(e, newValue)[ CD ]
Line_17 $$ Object newValue = command.getValue()-->Line_41 $$ setValue(e, newValue)[ FD ]
Line_7 $$ Object oldValue = e.getValue()-->Line_13 $$ oldValue = ((VersionedEntry) oldValue).getValue()[ FD ]
Line_2 $$ public Object visitPutKeyValueCommand(InvocationContext ctx, PutKeyValueCommand command) throws Throwable -->Line_19 $$ long newTimestamp = Long.MIN_VALUE[ CD ]
Line_2 $$ public Object visitPutKeyValueCommand(InvocationContext ctx, PutKeyValueCommand command) throws Throwable -->Line_3 $$ MVCCEntry e = (MVCCEntry) ctx.lookupEntry(command.getKey())[ CD ]
Line_4 $$ if (e == null) -->Line_5 $$ return null[ CD ]
Line_38 $$ if (oldVersion == null) -->Line_47 $$ return null[ CD ]
Line_3 $$ MVCCEntry e = (MVCCEntry) ctx.lookupEntry(command.getKey())-->Line_7 $$ Object oldValue = e.getValue()[ FD ]
Line_23 $$ VersionedEntry ve = (VersionedEntry) newValue-->Line_29 $$ actualNewValue = ve.getValue()[ FD ]
Line_19 $$ long newTimestamp = Long.MIN_VALUE-->Line_42 $$ if (newTimestamp <= oldTimestamp) [ FD ]
Line_22 $$ if (newValue instanceof VersionedEntry) -->Line_23 $$ VersionedEntry ve = (VersionedEntry) newValue[ CD ]
Line_28 $$ if (ve.getValue() instanceof org.hibernate.cache.spi.entry.CacheEntry) -->Line_29 $$ actualNewValue = ve.getValue()[ CD ]
Line_40 $$ if (newTimestamp == Long.MIN_VALUE) -->Line_42 $$ if (newTimestamp <= oldTimestamp) [ CD ]
Line_3 $$ MVCCEntry e = (MVCCEntry) ctx.lookupEntry(command.getKey())-->Line_51 $$ setValue(e, newValue)[ FD ]
Line_9 $$ long oldTimestamp = Long.MIN_VALUE-->Line_42 $$ if (newTimestamp <= oldTimestamp) [ FD ]
Line_15 $$ oldVersion = ((org.hibernate.cache.spi.entry.CacheEntry) oldValue).getVersion()-->Line_38 $$ if (oldVersion == null) [ FD ]
