Line_2 $$ public static <T> List<T> mergeSortedArrays(@NotNull T[] list1, @NotNull T[] list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems, @Nullable Processor<? super T> filter) -->Line_9 $$ if (filter != null && !filter.process(t))[ FD ]
Line_2 $$ public static <T> List<T> mergeSortedArrays(@NotNull T[] list1, @NotNull T[] list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems, @Nullable Processor<? super T> filter) -->Line_14 $$ if (filter != null && !filter.process(t))[ FD ]
Line_18 $$ T element1 = list1[index1]-->Line_19 $$ if (filter != null && !filter.process(element1)) [ FD ]
Line_12 $$ if (index2 >= list2.length) -->Line_24 $$ if (filter != null && !filter.process(element2)) [ CD ]
Line_32 $$ if (c > 0) -->Line_40 $$ index1++[ CD ]
Line_2 $$ public static <T> List<T> mergeSortedArrays(@NotNull T[] list1, @NotNull T[] list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems, @Nullable Processor<? super T> filter) -->Line_5 $$ List<T> result = new ArrayList<T>(list1.length + list2.length)[ CD ]
Line_4 $$ int index2 = 0-->Line_25 $$ index2++[ FD ]
Line_7 $$ if (index1 >= list1.length) -->Line_12 $$ if (index2 >= list2.length) [ CD ]
Line_7 $$ if (index1 >= list1.length) -->Line_9 $$ if (filter != null && !filter.process(t))[ CD ]
Line_12 $$ if (index2 >= list2.length) -->Line_16 $$ result.add(t)[ CD ]
Line_23 $$ T element2 = list2[index2]-->Line_28 $$ int c = comparator.compare(element1, element2)[ FD ]
Line_7 $$ if (index1 >= list1.length) -->Line_11 $$ result.add(t)[ CD ]
Line_32 $$ if (c > 0) -->Line_33 $$ result.add(element2)[ CD ]
Line_32 $$ if (c > 0) -->Line_36 $$ result.add(element1)[ CD ]
Line_2 $$ public static <T> List<T> mergeSortedArrays(@NotNull T[] list1, @NotNull T[] list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems, @Nullable Processor<? super T> filter) -->Line_37 $$ if (!mergeEqualItems) [ FD ]
Line_2 $$ public static <T> List<T> mergeSortedArrays(@NotNull T[] list1, @NotNull T[] list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems, @Nullable Processor<? super T> filter) -->Line_4 $$ int index2 = 0[ CD ]
Line_2 $$ public static <T> List<T> mergeSortedArrays(@NotNull T[] list1, @NotNull T[] list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems, @Nullable Processor<? super T> filter) -->Line_24 $$ if (filter != null && !filter.process(element2)) [ FD ]
Line_23 $$ T element2 = list2[index2]-->Line_33 $$ result.add(element2)[ FD ]
Line_32 $$ if (c > 0) -->Line_41 $$ index2++[ CD ]
Line_12 $$ if (index2 >= list2.length) -->Line_14 $$ if (filter != null && !filter.process(t))[ CD ]
Line_3 $$ int index1 = 0-->Line_13 $$ T t = list1[index1++][ FD ]
Line_6 $$ while (index1 < list1.length || index2 < list2.length) -->Line_7 $$ if (index1 >= list1.length) [ CD ]
Line_12 $$ if (index2 >= list2.length) -->Line_19 $$ if (filter != null && !filter.process(element1)) [ CD ]
Line_12 $$ if (index2 >= list2.length) -->Line_28 $$ int c = comparator.compare(element1, element2)[ CD ]
Line_8 $$ T t = list2[index2++]-->Line_11 $$ result.add(t)[ FD ]
Line_29 $$ if (c < 0) -->Line_32 $$ if (c > 0) [ CD ]
Line_19 $$ if (filter != null && !filter.process(element1)) -->Line_20 $$ index1++[ CD ]
Line_4 $$ int index2 = 0-->Line_34 $$ index2++[ FD ]
Line_2 $$ public static <T> List<T> mergeSortedArrays(@NotNull T[] list1, @NotNull T[] list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems, @Nullable Processor<? super T> filter) -->Line_28 $$ int c = comparator.compare(element1, element2)[ FD ]
Line_5 $$ List<T> result = new ArrayList<T>(list1.length + list2.length)-->Line_30 $$ result.add(element1)[ FD ]
Line_32 $$ if (c > 0) -->Line_34 $$ index2++[ CD ]
Line_28 $$ int c = comparator.compare(element1, element2)-->Line_29 $$ if (c < 0) [ FD ]
Line_18 $$ T element1 = list1[index1]-->Line_36 $$ result.add(element1)[ FD ]
Line_8 $$ T t = list2[index2++]-->Line_14 $$ if (filter != null && !filter.process(t))[ FD ]
Line_32 $$ if (c > 0) -->Line_37 $$ if (!mergeEqualItems) [ CD ]
Line_2 $$ public static <T> List<T> mergeSortedArrays(@NotNull T[] list1, @NotNull T[] list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems, @Nullable Processor<? super T> filter) -->Line_45 $$ return result[ CD ]
Line_4 $$ int index2 = 0-->Line_8 $$ T t = list2[index2++][ FD ]
Line_7 $$ if (index1 >= list1.length) -->Line_8 $$ T t = list2[index2++][ CD ]
Line_18 $$ T element1 = list1[index1]-->Line_28 $$ int c = comparator.compare(element1, element2)[ FD ]
Line_4 $$ int index2 = 0-->Line_12 $$ if (index2 >= list2.length) [ FD ]
Line_37 $$ if (!mergeEqualItems) -->Line_38 $$ result.add(element2)[ CD ]
Line_18 $$ T element1 = list1[index1]-->Line_30 $$ result.add(element1)[ FD ]
Line_23 $$ T element2 = list2[index2]-->Line_24 $$ if (filter != null && !filter.process(element2)) [ FD ]
Line_5 $$ List<T> result = new ArrayList<T>(list1.length + list2.length)-->Line_33 $$ result.add(element2)[ FD ]
Line_23 $$ T element2 = list2[index2]-->Line_38 $$ result.add(element2)[ FD ]
Line_24 $$ if (filter != null && !filter.process(element2)) -->Line_25 $$ index2++[ CD ]
Line_8 $$ T t = list2[index2++]-->Line_9 $$ if (filter != null && !filter.process(t))[ FD ]
Line_5 $$ List<T> result = new ArrayList<T>(list1.length + list2.length)-->Line_36 $$ result.add(element1)[ FD ]
Line_3 $$ int index1 = 0-->Line_7 $$ if (index1 >= list1.length) [ FD ]
Line_29 $$ if (c < 0) -->Line_31 $$ index1++[ CD ]
Line_29 $$ if (c < 0) -->Line_30 $$ result.add(element1)[ CD ]
Line_2 $$ public static <T> List<T> mergeSortedArrays(@NotNull T[] list1, @NotNull T[] list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems, @Nullable Processor<? super T> filter) -->Line_3 $$ int index1 = 0[ CD ]
Line_12 $$ if (index2 >= list2.length) -->Line_23 $$ T element2 = list2[index2][ CD ]
Line_12 $$ if (index2 >= list2.length) -->Line_29 $$ if (c < 0) [ CD ]
Line_3 $$ int index1 = 0-->Line_40 $$ index1++[ FD ]
Line_8 $$ T t = list2[index2++]-->Line_16 $$ result.add(t)[ FD ]
Line_2 $$ public static <T> List<T> mergeSortedArrays(@NotNull T[] list1, @NotNull T[] list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems, @Nullable Processor<? super T> filter) -->Line_19 $$ if (filter != null && !filter.process(element1)) [ FD ]
Line_3 $$ int index1 = 0-->Line_20 $$ index1++[ FD ]
Line_4 $$ int index2 = 0-->Line_41 $$ index2++[ FD ]
Line_2 $$ public static <T> List<T> mergeSortedArrays(@NotNull T[] list1, @NotNull T[] list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems, @Nullable Processor<? super T> filter) -->Line_6 $$ while (index1 < list1.length || index2 < list2.length) [ CD ]
Line_28 $$ int c = comparator.compare(element1, element2)-->Line_32 $$ if (c > 0) [ FD ]
Line_5 $$ List<T> result = new ArrayList<T>(list1.length + list2.length)-->Line_11 $$ result.add(t)[ FD ]
Line_5 $$ List<T> result = new ArrayList<T>(list1.length + list2.length)-->Line_38 $$ result.add(element2)[ FD ]
Line_12 $$ if (index2 >= list2.length) -->Line_18 $$ T element1 = list1[index1][ CD ]
Line_3 $$ int index1 = 0-->Line_31 $$ index1++[ FD ]
Line_5 $$ List<T> result = new ArrayList<T>(list1.length + list2.length)-->Line_16 $$ result.add(t)[ FD ]
