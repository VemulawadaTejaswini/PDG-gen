Line_47 $$ if (count1 != 0) -->Line_49 $$ dest += count1[ CD ]
Line_74 $$ minGallop = 0-->Line_75 $$ minGallop += 2[ FD ]
Line_59 $$ count2 = gallopLeft(tmp[cursor1], a, cursor2, len2, 0, c)-->Line_62 $$ dest += count2[ FD ]
Line_49 $$ dest += count1-->Line_62 $$ dest += count2[ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_8 $$ int cursor1 = 0[ CD ]
Line_10 $$ int dest = base1-->Line_36 $$ a[dest++] = tmp[cursor1++][ FD ]
Line_25 $$ int count2 = 0-->Line_61 $$ System.arraycopy(a, cursor2, a, dest, count2)[ FD ]
Line_6 $$ T[] tmp = ensureCapacity(len1)-->Line_7 $$ System.arraycopy(a, base1, tmp, 0, len1)[ FD ]
Line_6 $$ T[] tmp = ensureCapacity(len1)-->Line_48 $$ System.arraycopy(tmp, cursor1, a, dest, count1)[ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_21 $$ Comparator<? super T> c = this.c[ CD ]
Line_29 $$ if (c.compare(a[cursor2], tmp[cursor1]) < 0) -->Line_39 $$ if (--len1 == 1)[ CD ]
Line_25 $$ int count2 = 0-->Line_59 $$ count2 = gallopLeft(tmp[cursor1], a, cursor2, len2, 0, c)[ FD ]
Line_83 $$ if (len1 == 0) -->Line_90 $$ System.arraycopy(tmp, cursor1, a, dest, len1)[ CD ]
Line_10 $$ int dest = base1-->Line_13 $$ System.arraycopy(tmp, cursor1, a, dest, len1)[ FD ]
Line_5 $$ T[] a = this.a-->Line_17 $$ System.arraycopy(a, cursor2, a, dest, len2)[ FD ]
Line_10 $$ int dest = base1-->Line_17 $$ System.arraycopy(a, cursor2, a, dest, len2)[ FD ]
Line_60 $$ if (count2 != 0) -->Line_64 $$ len2 -= count2[ CD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_69 $$ if (--len1 == 1)[ FD ]
Line_10 $$ int dest = base1-->Line_90 $$ System.arraycopy(tmp, cursor1, a, dest, len1)[ FD ]
Line_5 $$ T[] a = this.a-->Line_81 $$ System.arraycopy(a, cursor2, a, dest, len2)[ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_16 $$ if (len1 == 1) [ FD ]
Line_5 $$ T[] a = this.a-->Line_48 $$ System.arraycopy(tmp, cursor1, a, dest, count1)[ FD ]
Line_29 $$ if (c.compare(a[cursor2], tmp[cursor1]) < 0) -->Line_37 $$ count1++[ CD ]
Line_22 $$ int minGallop = this.minGallop-->Line_26 $$ do [ FD ]
Line_24 $$ int count1 = 0-->Line_50 $$ cursor1 += count1[ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_57 $$ if (--len2 == 0)[ FD ]
Line_38 $$ count2 = 0-->Line_59 $$ count2 = gallopLeft(tmp[cursor1], a, cursor2, len2, 0, c)[ FD ]
Line_38 $$ count2 = 0-->Line_63 $$ cursor2 += count2[ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_77 $$ this.minGallop = minGallop < 1 ? 1 : minGallop[ CD ]
Line_24 $$ int count1 = 0-->Line_49 $$ dest += count1[ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_78 $$ if (len1 == 1) [ CD ]
Line_22 $$ int minGallop = this.minGallop-->Line_75 $$ minGallop += 2[ FD ]
Line_5 $$ T[] a = this.a-->Line_13 $$ System.arraycopy(tmp, cursor1, a, dest, len1)[ FD ]
Line_63 $$ cursor2 += count2-->Line_56 $$ a[dest++] = a[cursor2++][ FD ]
Line_51 $$ len1 -= count1-->Line_69 $$ if (--len1 == 1)[ FD ]
Line_43 $$ do -->Line_71 $$ minGallop--[ CD ]
Line_21 $$ Comparator<? super T> c = this.c-->Line_29 $$ if (c.compare(a[cursor2], tmp[cursor1]) < 0) [ FD ]
Line_26 $$ do -->Line_29 $$ if (c.compare(a[cursor2], tmp[cursor1]) < 0) [ CD ]
Line_10 $$ int dest = base1-->Line_56 $$ a[dest++] = a[cursor2++][ FD ]
Line_38 $$ count2 = 0-->Line_60 $$ if (count2 != 0) [ FD ]
Line_25 $$ int count2 = 0-->Line_60 $$ if (count2 != 0) [ FD ]
Line_64 $$ len2 -= count2-->Line_65 $$ if (len2 == 0)[ FD ]
Line_24 $$ int count1 = 0-->Line_37 $$ count1++[ FD ]
Line_29 $$ if (c.compare(a[cursor2], tmp[cursor1]) < 0) -->Line_30 $$ a[dest++] = a[cursor2++][ CD ]
Line_10 $$ int dest = base1-->Line_61 $$ System.arraycopy(a, cursor2, a, dest, count2)[ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_90 $$ System.arraycopy(tmp, cursor1, a, dest, len1)[ FD ]
Line_47 $$ if (count1 != 0) -->Line_50 $$ cursor1 += count1[ CD ]
Line_25 $$ int count2 = 0-->Line_62 $$ dest += count2[ FD ]
Line_78 $$ if (len1 == 1) -->Line_79 $$ if (DEBUG)[ CD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_39 $$ if (--len1 == 1)[ FD ]
Line_64 $$ len2 -= count2-->Line_81 $$ System.arraycopy(a, cursor2, a, dest, len2)[ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_81 $$ System.arraycopy(a, cursor2, a, dest, len2)[ FD ]
Line_51 $$ len1 -= count1-->Line_83 $$ if (len1 == 0) [ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_52 $$ if (len1 <= 1)[ FD ]
Line_46 $$ count1 = gallopRight(a[cursor2], tmp, cursor1, len1, 0, c)-->Line_49 $$ dest += count1[ FD ]
Line_46 $$ count1 = gallopRight(a[cursor2], tmp, cursor1, len1, 0, c)-->Line_48 $$ System.arraycopy(tmp, cursor1, a, dest, count1)[ FD ]
Line_43 $$ do -->Line_59 $$ count2 = gallopLeft(tmp[cursor1], a, cursor2, len2, 0, c)[ CD ]
Line_5 $$ T[] a = this.a-->Line_59 $$ count2 = gallopLeft(tmp[cursor1], a, cursor2, len2, 0, c)[ FD ]
Line_73 $$ if (minGallop < 0)-->Line_74 $$ minGallop = 0[ CD ]
Line_50 $$ cursor1 += count1-->Line_90 $$ System.arraycopy(tmp, cursor1, a, dest, len1)[ FD ]
Line_6 $$ T[] tmp = ensureCapacity(len1)-->Line_13 $$ System.arraycopy(tmp, cursor1, a, dest, len1)[ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_78 $$ if (len1 == 1) [ FD ]
Line_5 $$ T[] a = this.a-->Line_90 $$ System.arraycopy(tmp, cursor1, a, dest, len1)[ FD ]
Line_38 $$ count2 = 0-->Line_62 $$ dest += count2[ FD ]
Line_59 $$ count2 = gallopLeft(tmp[cursor1], a, cursor2, len2, 0, c)-->Line_64 $$ len2 -= count2[ FD ]
Line_22 $$ int minGallop = this.minGallop-->Line_74 $$ minGallop = 0[ FD ]
Line_24 $$ int count1 = 0-->Line_32 $$ count1 = 0[ FD ]
Line_32 $$ count1 = 0-->Line_47 $$ if (count1 != 0) [ FD ]
Line_29 $$ if (c.compare(a[cursor2], tmp[cursor1]) < 0) -->Line_36 $$ a[dest++] = tmp[cursor1++][ CD ]
Line_26 $$ do -->Line_27 $$ if (DEBUG)[ CD ]
Line_46 $$ count1 = gallopRight(a[cursor2], tmp, cursor1, len1, 0, c)-->Line_47 $$ if (count1 != 0) [ FD ]
Line_51 $$ len1 -= count1-->Line_46 $$ count1 = gallopRight(a[cursor2], tmp, cursor1, len1, 0, c)[ FD ]
Line_60 $$ if (count2 != 0) -->Line_65 $$ if (len2 == 0)[ CD ]
Line_59 $$ count2 = gallopLeft(tmp[cursor1], a, cursor2, len2, 0, c)-->Line_60 $$ if (count2 != 0) [ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_22 $$ int minGallop = this.minGallop[ CD ]
Line_24 $$ int count1 = 0-->Line_46 $$ count1 = gallopRight(a[cursor2], tmp, cursor1, len1, 0, c)[ FD ]
Line_8 $$ int cursor1 = 0-->Line_36 $$ a[dest++] = tmp[cursor1++][ FD ]
Line_8 $$ int cursor1 = 0-->Line_48 $$ System.arraycopy(tmp, cursor1, a, dest, count1)[ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_51 $$ len1 -= count1[ FD ]
Line_43 $$ do -->Line_44 $$ if (DEBUG)[ CD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_11 $$ a[dest++] = a[cursor2++][ CD ]
Line_47 $$ if (count1 != 0) -->Line_52 $$ if (len1 <= 1)[ CD ]
Line_10 $$ int dest = base1-->Line_11 $$ a[dest++] = a[cursor2++][ FD ]
Line_23 $$ while (true) -->Line_26 $$ do [ CD ]
Line_51 $$ len1 -= count1-->Line_78 $$ if (len1 == 1) [ FD ]
Line_23 $$ while (true) -->Line_43 $$ do [ CD ]
Line_16 $$ if (len1 == 1) -->Line_17 $$ System.arraycopy(a, cursor2, a, dest, len2)[ CD ]
Line_60 $$ if (count2 != 0) -->Line_63 $$ cursor2 += count2[ CD ]
Line_78 $$ if (len1 == 1) -->Line_82 $$ a[dest + len2] = tmp[cursor1][ CD ]
Line_29 $$ if (c.compare(a[cursor2], tmp[cursor1]) < 0) -->Line_33 $$ if (--len2 == 0)[ CD ]
Line_51 $$ len1 -= count1-->Line_90 $$ System.arraycopy(tmp, cursor1, a, dest, len1)[ FD ]
Line_22 $$ int minGallop = this.minGallop-->Line_73 $$ if (minGallop < 0)[ FD ]
Line_8 $$ int cursor1 = 0-->Line_13 $$ System.arraycopy(tmp, cursor1, a, dest, len1)[ FD ]
Line_24 $$ int count1 = 0-->Line_47 $$ if (count1 != 0) [ FD ]
Line_62 $$ dest += count2-->Line_61 $$ System.arraycopy(a, cursor2, a, dest, count2)[ FD ]
Line_10 $$ int dest = base1-->Line_48 $$ System.arraycopy(tmp, cursor1, a, dest, count1)[ FD ]
Line_24 $$ int count1 = 0-->Line_48 $$ System.arraycopy(tmp, cursor1, a, dest, count1)[ FD ]
Line_9 $$ int cursor2 = base2-->Line_63 $$ cursor2 += count2[ FD ]
Line_9 $$ int cursor2 = base2-->Line_17 $$ System.arraycopy(a, cursor2, a, dest, len2)[ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_7 $$ System.arraycopy(a, base1, tmp, 0, len1)[ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_12 $$ if (--len2 == 0) [ CD ]
Line_23 $$ while (true) -->Line_25 $$ int count2 = 0[ CD ]
Line_12 $$ if (--len2 == 0) -->Line_13 $$ System.arraycopy(tmp, cursor1, a, dest, len1)[ CD ]
Line_25 $$ int count2 = 0-->Line_63 $$ cursor2 += count2[ FD ]
Line_32 $$ count1 = 0-->Line_46 $$ count1 = gallopRight(a[cursor2], tmp, cursor1, len1, 0, c)[ FD ]
Line_43 $$ do -->Line_60 $$ if (count2 != 0) [ CD ]
Line_8 $$ int cursor1 = 0-->Line_68 $$ a[dest++] = tmp[cursor1++][ FD ]
Line_9 $$ int cursor2 = base2-->Line_30 $$ a[dest++] = a[cursor2++][ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_64 $$ len2 -= count2[ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_65 $$ if (len2 == 0)[ FD ]
Line_50 $$ cursor1 += count1-->Line_68 $$ a[dest++] = tmp[cursor1++][ FD ]
Line_59 $$ count2 = gallopLeft(tmp[cursor1], a, cursor2, len2, 0, c)-->Line_63 $$ cursor2 += count2[ FD ]
Line_75 $$ minGallop += 2-->Line_73 $$ if (minGallop < 0)[ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_5 $$ T[] a = this.a[ CD ]
Line_22 $$ int minGallop = this.minGallop-->Line_71 $$ minGallop--[ FD ]
Line_32 $$ count1 = 0-->Line_51 $$ len1 -= count1[ FD ]
Line_25 $$ int count2 = 0-->Line_38 $$ count2 = 0[ FD ]
Line_23 $$ while (true) -->Line_73 $$ if (minGallop < 0)[ CD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_9 $$ int cursor2 = base2[ CD ]
Line_63 $$ cursor2 += count2-->Line_81 $$ System.arraycopy(a, cursor2, a, dest, len2)[ FD ]
Line_38 $$ count2 = 0-->Line_61 $$ System.arraycopy(a, cursor2, a, dest, count2)[ FD ]
Line_6 $$ T[] tmp = ensureCapacity(len1)-->Line_46 $$ count1 = gallopRight(a[cursor2], tmp, cursor1, len1, 0, c)[ FD ]
Line_12 $$ if (--len2 == 0) -->Line_14 $$ return[ CD ]
Line_43 $$ do -->Line_56 $$ a[dest++] = a[cursor2++][ CD ]
Line_43 $$ do -->Line_69 $$ if (--len1 == 1)[ CD ]
Line_10 $$ int dest = base1-->Line_62 $$ dest += count2[ FD ]
Line_16 $$ if (len1 == 1) -->Line_19 $$ return[ CD ]
Line_9 $$ int cursor2 = base2-->Line_81 $$ System.arraycopy(a, cursor2, a, dest, len2)[ FD ]
Line_46 $$ count1 = gallopRight(a[cursor2], tmp, cursor1, len1, 0, c)-->Line_51 $$ len1 -= count1[ FD ]
Line_83 $$ if (len1 == 0) -->Line_86 $$ if (DEBUG)[ CD ]
Line_49 $$ dest += count1-->Line_48 $$ System.arraycopy(tmp, cursor1, a, dest, count1)[ FD ]
Line_74 $$ minGallop = 0-->Line_73 $$ if (minGallop < 0)[ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_13 $$ System.arraycopy(tmp, cursor1, a, dest, len1)[ FD ]
Line_47 $$ if (count1 != 0) -->Line_48 $$ System.arraycopy(tmp, cursor1, a, dest, count1)[ CD ]
Line_49 $$ dest += count1-->Line_68 $$ a[dest++] = tmp[cursor1++][ FD ]
Line_62 $$ dest += count2-->Line_68 $$ a[dest++] = tmp[cursor1++][ FD ]
Line_29 $$ if (c.compare(a[cursor2], tmp[cursor1]) < 0) -->Line_32 $$ count1 = 0[ CD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_33 $$ if (--len2 == 0)[ FD ]
Line_60 $$ if (count2 != 0) -->Line_62 $$ dest += count2[ CD ]
Line_62 $$ dest += count2-->Line_48 $$ System.arraycopy(tmp, cursor1, a, dest, count1)[ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_59 $$ count2 = gallopLeft(tmp[cursor1], a, cursor2, len2, 0, c)[ FD ]
Line_62 $$ dest += count2-->Line_90 $$ System.arraycopy(tmp, cursor1, a, dest, len1)[ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_7 $$ System.arraycopy(a, base1, tmp, 0, len1)[ CD ]
Line_9 $$ int cursor2 = base2-->Line_59 $$ count2 = gallopLeft(tmp[cursor1], a, cursor2, len2, 0, c)[ FD ]
Line_43 $$ do -->Line_68 $$ a[dest++] = tmp[cursor1++][ CD ]
Line_63 $$ cursor2 += count2-->Line_61 $$ System.arraycopy(a, cursor2, a, dest, count2)[ FD ]
Line_49 $$ dest += count1-->Line_56 $$ a[dest++] = a[cursor2++][ FD ]
Line_21 $$ Comparator<? super T> c = this.c-->Line_59 $$ count2 = gallopLeft(tmp[cursor1], a, cursor2, len2, 0, c)[ FD ]
Line_29 $$ if (c.compare(a[cursor2], tmp[cursor1]) < 0) -->Line_38 $$ count2 = 0[ CD ]
Line_38 $$ count2 = 0-->Line_64 $$ len2 -= count2[ FD ]
Line_38 $$ count2 = 0-->Line_31 $$ count2++[ FD ]
Line_9 $$ int cursor2 = base2-->Line_11 $$ a[dest++] = a[cursor2++][ FD ]
Line_49 $$ dest += count1-->Line_81 $$ System.arraycopy(a, cursor2, a, dest, len2)[ FD ]
Line_62 $$ dest += count2-->Line_56 $$ a[dest++] = a[cursor2++][ FD ]
Line_60 $$ if (count2 != 0) -->Line_61 $$ System.arraycopy(a, cursor2, a, dest, count2)[ CD ]
Line_59 $$ count2 = gallopLeft(tmp[cursor1], a, cursor2, len2, 0, c)-->Line_61 $$ System.arraycopy(a, cursor2, a, dest, count2)[ FD ]
Line_8 $$ int cursor1 = 0-->Line_46 $$ count1 = gallopRight(a[cursor2], tmp, cursor1, len1, 0, c)[ FD ]
Line_24 $$ int count1 = 0-->Line_51 $$ len1 -= count1[ FD ]
Line_9 $$ int cursor2 = base2-->Line_61 $$ System.arraycopy(a, cursor2, a, dest, count2)[ FD ]
Line_49 $$ dest += count1-->Line_90 $$ System.arraycopy(tmp, cursor1, a, dest, len1)[ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_16 $$ if (len1 == 1) [ CD ]
Line_8 $$ int cursor1 = 0-->Line_90 $$ System.arraycopy(tmp, cursor1, a, dest, len1)[ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_3 $$ if (DEBUG)[ CD ]
Line_62 $$ dest += count2-->Line_81 $$ System.arraycopy(a, cursor2, a, dest, len2)[ FD ]
Line_64 $$ len2 -= count2-->Line_59 $$ count2 = gallopLeft(tmp[cursor1], a, cursor2, len2, 0, c)[ FD ]
Line_47 $$ if (count1 != 0) -->Line_51 $$ len1 -= count1[ CD ]
Line_78 $$ if (len1 == 1) -->Line_81 $$ System.arraycopy(a, cursor2, a, dest, len2)[ CD ]
Line_23 $$ while (true) -->Line_24 $$ int count1 = 0[ CD ]
Line_32 $$ count1 = 0-->Line_49 $$ dest += count1[ FD ]
Line_64 $$ len2 -= count2-->Line_57 $$ if (--len2 == 0)[ FD ]
Line_43 $$ do -->Line_46 $$ count1 = gallopRight(a[cursor2], tmp, cursor1, len1, 0, c)[ CD ]
Line_51 $$ len1 -= count1-->Line_52 $$ if (len1 <= 1)[ FD ]
Line_10 $$ int dest = base1-->Line_30 $$ a[dest++] = a[cursor2++][ FD ]
Line_21 $$ Comparator<? super T> c = this.c-->Line_46 $$ count1 = gallopRight(a[cursor2], tmp, cursor1, len1, 0, c)[ FD ]
Line_50 $$ cursor1 += count1-->Line_46 $$ count1 = gallopRight(a[cursor2], tmp, cursor1, len1, 0, c)[ FD ]
Line_5 $$ T[] a = this.a-->Line_7 $$ System.arraycopy(a, base1, tmp, 0, len1)[ FD ]
Line_49 $$ dest += count1-->Line_61 $$ System.arraycopy(a, cursor2, a, dest, count2)[ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_10 $$ int dest = base1[ CD ]
Line_10 $$ int dest = base1-->Line_68 $$ a[dest++] = tmp[cursor1++][ FD ]
Line_32 $$ count1 = 0-->Line_50 $$ cursor1 += count1[ FD ]
Line_32 $$ count1 = 0-->Line_37 $$ count1++[ FD ]
Line_29 $$ if (c.compare(a[cursor2], tmp[cursor1]) < 0) -->Line_31 $$ count2++[ CD ]
Line_25 $$ int count2 = 0-->Line_64 $$ len2 -= count2[ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_83 $$ if (len1 == 0) [ FD ]
Line_63 $$ cursor2 += count2-->Line_59 $$ count2 = gallopLeft(tmp[cursor1], a, cursor2, len2, 0, c)[ FD ]
Line_25 $$ int count2 = 0-->Line_31 $$ count2++[ FD ]
Line_8 $$ int cursor1 = 0-->Line_50 $$ cursor1 += count1[ FD ]
Line_46 $$ count1 = gallopRight(a[cursor2], tmp, cursor1, len1, 0, c)-->Line_50 $$ cursor1 += count1[ FD ]
Line_83 $$ if (len1 == 0) -->Line_88 $$ if (DEBUG)[ CD ]
Line_78 $$ if (len1 == 1) -->Line_83 $$ if (len1 == 0) [ CD ]
Line_50 $$ cursor1 += count1-->Line_48 $$ System.arraycopy(tmp, cursor1, a, dest, count1)[ FD ]
Line_32 $$ count1 = 0-->Line_48 $$ System.arraycopy(tmp, cursor1, a, dest, count1)[ FD ]
Line_9 $$ int cursor2 = base2-->Line_56 $$ a[dest++] = a[cursor2++][ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_17 $$ System.arraycopy(a, cursor2, a, dest, len2)[ FD ]
Line_43 $$ do -->Line_47 $$ if (count1 != 0) [ CD ]
Line_10 $$ int dest = base1-->Line_81 $$ System.arraycopy(a, cursor2, a, dest, len2)[ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_6 $$ T[] tmp = ensureCapacity(len1)[ CD ]
Line_5 $$ T[] a = this.a-->Line_61 $$ System.arraycopy(a, cursor2, a, dest, count2)[ FD ]
Line_10 $$ int dest = base1-->Line_49 $$ dest += count1[ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_6 $$ T[] tmp = ensureCapacity(len1)[ FD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_46 $$ count1 = gallopRight(a[cursor2], tmp, cursor1, len1, 0, c)[ FD ]
Line_6 $$ T[] tmp = ensureCapacity(len1)-->Line_90 $$ System.arraycopy(tmp, cursor1, a, dest, len1)[ FD ]
Line_43 $$ do -->Line_57 $$ if (--len2 == 0)[ CD ]
Line_2 $$ private void mergeLo(int base1, int len1, int base2, int len2) -->Line_12 $$ if (--len2 == 0) [ FD ]
Line_16 $$ if (len1 == 1) -->Line_18 $$ a[dest + len2] = tmp[cursor1][ CD ]
Line_23 $$ while (true) -->Line_75 $$ minGallop += 2[ CD ]
