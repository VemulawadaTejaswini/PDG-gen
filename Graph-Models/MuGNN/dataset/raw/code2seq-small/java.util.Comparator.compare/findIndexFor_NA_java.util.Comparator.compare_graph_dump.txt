Line_2 $$ private static int findIndexFor(MutableTreeNode child, MutableTreeNode parent, int i1, int i2) -->Line_10 $$ return findIndexFor(child, parent, half + 1, i2)[ FD ]
Line_2 $$ private static int findIndexFor(MutableTreeNode child, MutableTreeNode parent, int i1, int i2) -->Line_6 $$ int half = (i1 + i2) / 2[ CD ]
Line_3 $$ if (i1 == i2) -->Line_4 $$ return NODE_COMPARATOR.compare(child, parent.getChildAt(i1)) <= 0 ? i1 : i1 + 1[ CD ]
Line_6 $$ int half = (i1 + i2) / 2-->Line_8 $$ return findIndexFor(child, parent, i1, half)[ FD ]
Line_2 $$ private static int findIndexFor(MutableTreeNode child, MutableTreeNode parent, int i1, int i2) -->Line_10 $$ return findIndexFor(child, parent, half + 1, i2)[ CD ]
Line_7 $$ if (NODE_COMPARATOR.compare(child, parent.getChildAt(half)) <= 0) -->Line_8 $$ return findIndexFor(child, parent, i1, half)[ CD ]
Line_6 $$ int half = (i1 + i2) / 2-->Line_7 $$ if (NODE_COMPARATOR.compare(child, parent.getChildAt(half)) <= 0) [ FD ]
Line_2 $$ private static int findIndexFor(MutableTreeNode child, MutableTreeNode parent, int i1, int i2) -->Line_7 $$ if (NODE_COMPARATOR.compare(child, parent.getChildAt(half)) <= 0) [ FD ]
Line_2 $$ private static int findIndexFor(MutableTreeNode child, MutableTreeNode parent, int i1, int i2) -->Line_8 $$ return findIndexFor(child, parent, i1, half)[ FD ]
Line_2 $$ private static int findIndexFor(MutableTreeNode child, MutableTreeNode parent, int i1, int i2) -->Line_3 $$ if (i1 == i2) [ CD ]
Line_2 $$ private static int findIndexFor(MutableTreeNode child, MutableTreeNode parent, int i1, int i2) -->Line_3 $$ if (i1 == i2) [ FD ]
Line_2 $$ private static int findIndexFor(MutableTreeNode child, MutableTreeNode parent, int i1, int i2) -->Line_7 $$ if (NODE_COMPARATOR.compare(child, parent.getChildAt(half)) <= 0) [ CD ]
Line_2 $$ private static int findIndexFor(MutableTreeNode child, MutableTreeNode parent, int i1, int i2) -->Line_4 $$ return NODE_COMPARATOR.compare(child, parent.getChildAt(i1)) <= 0 ? i1 : i1 + 1[ FD ]
