Line_3 $$ int low = 0-->Line_5 $$ while (low < high) [ FD ]
Line_2 $$ public static <T> int upperBound(List<? extends T> list, T key, Comparator<? super T> cmp) -->Line_3 $$ int low = 0[ CD ]
Line_9 $$ if (ret <= 0)-->Line_10 $$ low = mid + 1[ CD ]
Line_5 $$ while (low < high) -->Line_6 $$ int mid = (low + high) >>> 1[ CD ]
Line_6 $$ int mid = (low + high) >>> 1-->Line_10 $$ low = mid + 1[ FD ]
Line_2 $$ public static <T> int upperBound(List<? extends T> list, T key, Comparator<? super T> cmp) -->Line_4 $$ int high = list.size()[ FD ]
Line_9 $$ if (ret <= 0)-->Line_12 $$ high = mid[ CD ]
Line_10 $$ low = mid + 1-->Line_5 $$ while (low < high) [ FD ]
Line_3 $$ int low = 0-->Line_10 $$ low = mid + 1[ FD ]
Line_2 $$ public static <T> int upperBound(List<? extends T> list, T key, Comparator<? super T> cmp) -->Line_8 $$ int ret = cmp.compare(midVal, key)[ FD ]
Line_7 $$ T midVal = list.get(mid)-->Line_8 $$ int ret = cmp.compare(midVal, key)[ FD ]
Line_4 $$ int high = list.size()-->Line_5 $$ while (low < high) [ FD ]
Line_12 $$ high = mid-->Line_5 $$ while (low < high) [ FD ]
Line_2 $$ public static <T> int upperBound(List<? extends T> list, T key, Comparator<? super T> cmp) -->Line_7 $$ T midVal = list.get(mid)[ FD ]
Line_2 $$ public static <T> int upperBound(List<? extends T> list, T key, Comparator<? super T> cmp) -->Line_4 $$ int high = list.size()[ CD ]
Line_4 $$ int high = list.size()-->Line_12 $$ high = mid[ FD ]
Line_6 $$ int mid = (low + high) >>> 1-->Line_12 $$ high = mid[ FD ]
Line_2 $$ public static <T> int upperBound(List<? extends T> list, T key, Comparator<? super T> cmp) -->Line_14 $$ return low[ CD ]
Line_2 $$ public static <T> int upperBound(List<? extends T> list, T key, Comparator<? super T> cmp) -->Line_5 $$ while (low < high) [ CD ]
Line_5 $$ while (low < high) -->Line_7 $$ T midVal = list.get(mid)[ CD ]
Line_6 $$ int mid = (low + high) >>> 1-->Line_7 $$ T midVal = list.get(mid)[ FD ]
Line_5 $$ while (low < high) -->Line_8 $$ int ret = cmp.compare(midVal, key)[ CD ]
Line_5 $$ while (low < high) -->Line_9 $$ if (ret <= 0)[ CD ]
Line_8 $$ int ret = cmp.compare(midVal, key)-->Line_9 $$ if (ret <= 0)[ FD ]
