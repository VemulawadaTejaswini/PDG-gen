Line_15 $$ if (model instanceof ChooseByNameModelEx) -->Line_19 $$ ((ChooseByNameModelEx) model).processNames(new Processor<String>() [ CD ]
Line_15 $$ if (model instanceof ChooseByNameModelEx) -->Line_32 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_53 $$ Comparator<Object> weightComparator = new Comparator<Object>() -->Line_59 $$ int result = modelComparator.compare(o1, o2)[ CD ]
Line_24 $$ MatchResult result = matches(base, pattern, matcher, sequence)-->Line_25 $$ if (result != null) [ FD ]
Line_104 $$ if (needSeparator && !startMiddleMatchVariants(qualifierMiddleMatched, consumer))-->Line_105 $$ return false[ CD ]
Line_25 $$ if (result != null) -->Line_26 $$ collect.consume(result)[ CD ]
Line_85 $$ if (qualifierResult != null) -->Line_86 $$ sameNameElements.add(element)[ CD ]
Line_85 $$ if (qualifierResult != null) -->Line_87 $$ qualifierMatchResults.put(element, qualifierResult)[ CD ]
Line_10 $$ if (matchingPattern == null)-->Line_11 $$ return true[ CD ]
Line_6 $$ if (removeModelSpecificMarkup(base.getModel(), namePattern).isEmpty() && !base.canShowListForEmptyPattern())-->Line_7 $$ return true[ CD ]
Line_98 $$ if (!consumer.process(element))-->Line_99 $$ return false[ CD ]
Line_106 $$ if (!consumer.process(elements[0]))-->Line_107 $$ return false[ CD ]
Line_25 $$ if (result != null) -->Line_27 $$ return true[ CD ]
Line_79 $$ if (elements.length > 1) -->Line_80 $$ sameNameElements.clear()[ CD ]
Line_92 $$ if (!qualifierMatchResults.get(element).startMatch) -->Line_93 $$ qualifierMiddleMatched.add(element)[ CD ]
Line_9 $$ String matchingPattern = convertToMatchingPattern(base, namePattern)-->Line_18 $$ final MinusculeMatcher matcher = buildPatternMatcher(matchingPattern, NameUtil.MatchingCaseSensitivity.NONE)[ FD ]
Line_18 $$ final MinusculeMatcher matcher = buildPatternMatcher(matchingPattern, NameUtil.MatchingCaseSensitivity.NONE)-->Line_24 $$ MatchResult result = matches(base, pattern, matcher, sequence)[ FD ]
Line_53 $$ Comparator<Object> weightComparator = new Comparator<Object>() -->Line_60 $$ return result != 0 ? result : qualifierMatchResults.get(o1).compareTo(qualifierMatchResults.get(o2))[ FD ]
Line_19 $$ ((ChooseByNameModelEx) model).processNames(new Processor<String>() -->Line_24 $$ MatchResult result = matches(base, pattern, matcher, sequence)[ FD ]
Line_15 $$ if (model instanceof ChooseByNameModelEx) -->Line_39 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_79 $$ if (elements.length > 1) -->Line_81 $$ qualifierMatchResults.clear()[ CD ]
Line_14 $$ long started-->Line_17 $$ started = System.currentTimeMillis()[ FD ]
Line_15 $$ if (model instanceof ChooseByNameModelEx) -->Line_16 $$ indicator.checkCanceled()[ CD ]
Line_13 $$ final CollectConsumer<MatchResult> collect = new SynchronizedCollectConsumer<MatchResult>(namesList)-->Line_45 $$ List<MatchResult> results = (List<MatchResult>) collect.getResult()[ FD ]
Line_19 $$ ((ChooseByNameModelEx) model).processNames(new Processor<String>() -->Line_23 $$ indicator.checkCanceled()[ CD ]
Line_15 $$ if (model instanceof ChooseByNameModelEx) -->Line_37 $$ started = System.currentTimeMillis()[ CD ]
Line_9 $$ String matchingPattern = convertToMatchingPattern(base, namePattern)-->Line_38 $$ processNamesByPattern(base, names, matchingPattern, indicator, collect)[ FD ]
Line_39 $$ if (LOG.isDebugEnabled()) -->Line_40 $$ LOG.debug("matched:" + (System.currentTimeMillis() - started) + "," + names.length)[ CD ]
Line_53 $$ Comparator<Object> weightComparator = new Comparator<Object>() -->Line_60 $$ return result != 0 ? result : qualifierMatchResults.get(o1).compareTo(qualifierMatchResults.get(o2))[ CD ]
Line_4 $$ String namePattern = getNamePattern(base, pattern)-->Line_6 $$ if (removeModelSpecificMarkup(base.getModel(), namePattern).isEmpty() && !base.canShowListForEmptyPattern())[ FD ]
Line_47 $$ if (LOG.isDebugEnabled()) -->Line_48 $$ LOG.debug("sorted:" + (System.currentTimeMillis() - started) + ",results:" + results.size())[ CD ]
Line_103 $$ if (elements.length == 1 && matchQualifier(elements[0], base, patternsAndMatchers) != null) -->Line_104 $$ if (needSeparator && !startMiddleMatchVariants(qualifierMiddleMatched, consumer))[ CD ]
Line_4 $$ String namePattern = getNamePattern(base, pattern)-->Line_9 $$ String matchingPattern = convertToMatchingPattern(base, namePattern)[ FD ]
Line_19 $$ ((ChooseByNameModelEx) model).processNames(new Processor<String>() -->Line_29 $$ return false[ CD ]
Line_103 $$ if (elements.length == 1 && matchQualifier(elements[0], base, patternsAndMatchers) != null) -->Line_106 $$ if (!consumer.process(elements[0]))[ CD ]
Line_19 $$ ((ChooseByNameModelEx) model).processNames(new Processor<String>() -->Line_25 $$ if (result != null) [ CD ]
Line_15 $$ if (model instanceof ChooseByNameModelEx) -->Line_38 $$ processNamesByPattern(base, names, matchingPattern, indicator, collect)[ CD ]
Line_15 $$ if (model instanceof ChooseByNameModelEx) -->Line_36 $$ String[] names = base.getNames(everywhere)[ CD ]
Line_19 $$ ((ChooseByNameModelEx) model).processNames(new Processor<String>() -->Line_24 $$ MatchResult result = matches(base, pattern, matcher, sequence)[ CD ]
Line_9 $$ String matchingPattern = convertToMatchingPattern(base, namePattern)-->Line_46 $$ sortNamesList(matchingPattern, results)[ FD ]
Line_79 $$ if (elements.length > 1) -->Line_103 $$ if (elements.length == 1 && matchQualifier(elements[0], base, patternsAndMatchers) != null) [ CD ]
Line_53 $$ Comparator<Object> weightComparator = new Comparator<Object>() -->Line_59 $$ int result = modelComparator.compare(o1, o2)[ FD ]
Line_24 $$ MatchResult result = matches(base, pattern, matcher, sequence)-->Line_26 $$ collect.consume(result)[ FD ]
Line_15 $$ if (model instanceof ChooseByNameModelEx) -->Line_18 $$ final MinusculeMatcher matcher = buildPatternMatcher(matchingPattern, NameUtil.MatchingCaseSensitivity.NONE)[ CD ]
Line_79 $$ if (elements.length > 1) -->Line_90 $$ Collections.sort(sameNameElements, weightComparator)[ CD ]
Line_9 $$ String matchingPattern = convertToMatchingPattern(base, namePattern)-->Line_10 $$ if (matchingPattern == null)[ FD ]
Line_15 $$ if (model instanceof ChooseByNameModelEx) -->Line_17 $$ started = System.currentTimeMillis()[ CD ]
Line_13 $$ final CollectConsumer<MatchResult> collect = new SynchronizedCollectConsumer<MatchResult>(namesList)-->Line_38 $$ processNamesByPattern(base, names, matchingPattern, indicator, collect)[ FD ]
Line_67 $$ if (model instanceof ContributorsBasedGotoByModel) -->Line_68 $$ idFilter = ((ContributorsBasedGotoByModel) model).getIdFilter(everywhere)[ CD ]
Line_5 $$ String qualifierPattern = getQualifierPattern(base, pattern)-->Line_64 $$ List<Pair<String, MinusculeMatcher>> patternsAndMatchers = getPatternsAndMatchers(qualifierPattern, base)[ FD ]
Line_8 $$ final ChooseByNameModel model = base.getModel()-->Line_67 $$ if (model instanceof ContributorsBasedGotoByModel) [ FD ]
Line_96 $$ if (needSeparator && !startMiddleMatchVariants(qualifierMiddleMatched, consumer))-->Line_97 $$ return false[ CD ]
Line_13 $$ final CollectConsumer<MatchResult> collect = new SynchronizedCollectConsumer<MatchResult>(namesList)-->Line_33 $$ LOG.debug("loaded + matched:" + (System.currentTimeMillis() - started) + "," + collect.getResult().size())[ FD ]
Line_32 $$ if (LOG.isDebugEnabled()) -->Line_33 $$ LOG.debug("loaded + matched:" + (System.currentTimeMillis() - started) + "," + collect.getResult().size())[ CD ]
Line_13 $$ final CollectConsumer<MatchResult> collect = new SynchronizedCollectConsumer<MatchResult>(namesList)-->Line_26 $$ collect.consume(result)[ FD ]
Line_8 $$ final ChooseByNameModel model = base.getModel()-->Line_15 $$ if (model instanceof ChooseByNameModelEx) [ FD ]
