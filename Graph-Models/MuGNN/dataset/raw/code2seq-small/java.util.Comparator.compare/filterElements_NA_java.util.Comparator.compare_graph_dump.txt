Line_12 $$ final CollectConsumer<MatchResult> collect = new SynchronizedCollectConsumer<MatchResult>(namesList)-->Line_35 $$ processNamesByPattern(base, names, matchingPattern, indicator, collect)[ FD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_71 $$ Object[] elements = model instanceof ContributorsBasedGotoByModel ? ((ContributorsBasedGotoByModel) model).getElementsByName(name, parameters, indicator) : model.getElementsByName(name, everywhere, namePattern)[ FD ]
Line_97 $$ if (needSeparator && !startMiddleMatchVariants(qualifierMiddleMatched, consumer))-->Line_98 $$ return false[ CD ]
Line_18 $$ ((ChooseByNameModelEx) model).processNames(new Processor<String>() -->Line_22 $$ if (result != null) [ CD ]
Line_8 $$ String matchingPattern = convertToMatchingPattern(base, namePattern)-->Line_17 $$ final MinusculeMatcher matcher = buildPatternMatcher(matchingPattern, NameUtil.MatchingCaseSensitivity.NONE)[ FD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_8 $$ String matchingPattern = convertToMatchingPattern(base, namePattern)[ CD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_64 $$ GlobalSearchScope searchScope = FindSymbolParameters.searchScopeFor(base.myProject, everywhere)[ CD ]
Line_50 $$ Comparator<Object> weightComparator = new Comparator<Object>() -->Line_53 $$ int result = modelComparator.compare(o1, o2)[ CD ]
Line_14 $$ if (model instanceof ChooseByNameModelEx) -->Line_17 $$ final MinusculeMatcher matcher = buildPatternMatcher(matchingPattern, NameUtil.MatchingCaseSensitivity.NONE)[ CD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_15 $$ indicator.checkCanceled()[ FD ]
Line_3 $$ String namePattern = getNamePattern(base, pattern)-->Line_5 $$ if (removeModelSpecificMarkup(base.getModel(), namePattern).isEmpty() && !base.canShowListForEmptyPattern())[ FD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_33 $$ String[] names = base.getNames(everywhere)[ FD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_104 $$ return ContainerUtil.process(qualifierMiddleMatched, consumer)[ CD ]
Line_18 $$ ((ChooseByNameModelEx) model).processNames(new Processor<String>() -->Line_26 $$ return false[ CD ]
Line_9 $$ if (matchingPattern == null)-->Line_10 $$ return true[ CD ]
Line_36 $$ if (LOG.isDebugEnabled()) -->Line_37 $$ LOG.debug("matched:" + (System.currentTimeMillis() - started) + "," + names.length)[ CD ]
Line_14 $$ if (model instanceof ChooseByNameModelEx) -->Line_15 $$ indicator.checkCanceled()[ CD ]
Line_14 $$ if (model instanceof ChooseByNameModelEx) -->Line_33 $$ String[] names = base.getNames(everywhere)[ CD ]
Line_8 $$ String matchingPattern = convertToMatchingPattern(base, namePattern)-->Line_35 $$ processNamesByPattern(base, names, matchingPattern, indicator, collect)[ FD ]
Line_4 $$ String qualifierPattern = getQualifierPattern(base, pattern)-->Line_58 $$ List<Pair<String, MinusculeMatcher>> patternsAndMatchers = getPatternsAndMatchers(qualifierPattern, base)[ FD ]
Line_13 $$ long started-->Line_16 $$ started = System.currentTimeMillis()[ FD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_8 $$ String matchingPattern = convertToMatchingPattern(base, namePattern)[ FD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_12 $$ final CollectConsumer<MatchResult> collect = new SynchronizedCollectConsumer<MatchResult>(namesList)[ CD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_18 $$ ((ChooseByNameModelEx) model).processNames(new Processor<String>() [ FD ]
Line_29 $$ if (LOG.isDebugEnabled()) -->Line_30 $$ LOG.debug("loaded + matched:" + (System.currentTimeMillis() - started) + "," + collect.getResult().size())[ CD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_97 $$ if (needSeparator && !startMiddleMatchVariants(qualifierMiddleMatched, consumer))[ FD ]
Line_12 $$ final CollectConsumer<MatchResult> collect = new SynchronizedCollectConsumer<MatchResult>(namesList)-->Line_30 $$ LOG.debug("loaded + matched:" + (System.currentTimeMillis() - started) + "," + collect.getResult().size())[ FD ]
Line_72 $$ if (elements.length > 1) -->Line_74 $$ qualifierMatchResults.clear()[ CD ]
Line_14 $$ if (model instanceof ChooseByNameModelEx) -->Line_16 $$ started = System.currentTimeMillis()[ CD ]
Line_5 $$ if (removeModelSpecificMarkup(base.getModel(), namePattern).isEmpty() && !base.canShowListForEmptyPattern())-->Line_6 $$ return true[ CD ]
Line_12 $$ final CollectConsumer<MatchResult> collect = new SynchronizedCollectConsumer<MatchResult>(namesList)-->Line_42 $$ List<MatchResult> results = (List<MatchResult>) collect.getResult()[ FD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_3 $$ String namePattern = getNamePattern(base, pattern)[ FD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_5 $$ if (removeModelSpecificMarkup(base.getModel(), namePattern).isEmpty() && !base.canShowListForEmptyPattern())[ CD ]
Line_3 $$ String namePattern = getNamePattern(base, pattern)-->Line_71 $$ Object[] elements = model instanceof ContributorsBasedGotoByModel ? ((ContributorsBasedGotoByModel) model).getElementsByName(name, parameters, indicator) : model.getElementsByName(name, everywhere, namePattern)[ FD ]
Line_18 $$ ((ChooseByNameModelEx) model).processNames(new Processor<String>() -->Line_20 $$ indicator.checkCanceled()[ CD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_11 $$ List<MatchResult> namesList = new ArrayList<MatchResult>()[ CD ]
Line_14 $$ if (model instanceof ChooseByNameModelEx) -->Line_29 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_72 $$ if (elements.length > 1) -->Line_96 $$ if (elements.length == 1 && matchQualifier(elements[0], base, patternsAndMatchers) != null) [ CD ]
Line_22 $$ if (result != null) -->Line_24 $$ return true[ CD ]
Line_7 $$ final ChooseByNameModel model = base.getModel()-->Line_61 $$ if (model instanceof ContributorsBasedGotoByModel) [ FD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_41 $$ started = System.currentTimeMillis()[ CD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_14 $$ if (model instanceof ChooseByNameModelEx) [ CD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_44 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_58 $$ List<Pair<String, MinusculeMatcher>> patternsAndMatchers = getPatternsAndMatchers(qualifierPattern, base)[ FD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_61 $$ if (model instanceof ContributorsBasedGotoByModel) [ CD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_3 $$ String namePattern = getNamePattern(base, pattern)[ CD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_68 $$ indicator.checkCanceled()[ FD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_47 $$ indicator.checkCanceled()[ CD ]
Line_78 $$ if (qualifierResult != null) -->Line_79 $$ sameNameElements.add(element)[ CD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_104 $$ return ContainerUtil.process(qualifierMiddleMatched, consumer)[ FD ]
Line_14 $$ if (model instanceof ChooseByNameModelEx) -->Line_18 $$ ((ChooseByNameModelEx) model).processNames(new Processor<String>() [ CD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_35 $$ processNamesByPattern(base, names, matchingPattern, indicator, collect)[ FD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_7 $$ final ChooseByNameModel model = base.getModel()[ FD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_76 $$ indicator.checkCanceled()[ FD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_4 $$ String qualifierPattern = getQualifierPattern(base, pattern)[ FD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_96 $$ if (elements.length == 1 && matchQualifier(elements[0], base, patternsAndMatchers) != null) [ FD ]
Line_8 $$ String matchingPattern = convertToMatchingPattern(base, namePattern)-->Line_43 $$ sortNamesList(matchingPattern, results)[ FD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_77 $$ MatchResult qualifierResult = matchQualifier(element, base, patternsAndMatchers)[ FD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_64 $$ GlobalSearchScope searchScope = FindSymbolParameters.searchScopeFor(base.myProject, everywhere)[ FD ]
Line_3 $$ String namePattern = getNamePattern(base, pattern)-->Line_8 $$ String matchingPattern = convertToMatchingPattern(base, namePattern)[ FD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_59 $$ boolean sortedByMatchingDegree = !(base.getModel() instanceof CustomMatcherModel)[ CD ]
Line_50 $$ Comparator<Object> weightComparator = new Comparator<Object>() -->Line_54 $$ return result != 0 ? result : qualifierMatchResults.get(o1).compareTo(qualifierMatchResults.get(o2))[ FD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_89 $$ if (needSeparator && !startMiddleMatchVariants(qualifierMiddleMatched, consumer))[ FD ]
Line_18 $$ ((ChooseByNameModelEx) model).processNames(new Processor<String>() -->Line_21 $$ MatchResult result = matches(base, pattern, matcher, sequence)[ CD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_7 $$ final ChooseByNameModel model = base.getModel()[ CD ]
Line_21 $$ MatchResult result = matches(base, pattern, matcher, sequence)-->Line_23 $$ collect.consume(result)[ FD ]
Line_14 $$ if (model instanceof ChooseByNameModelEx) -->Line_36 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_44 $$ if (LOG.isDebugEnabled()) -->Line_45 $$ LOG.debug("sorted:" + (System.currentTimeMillis() - started) + ",results:" + results.size())[ CD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_59 $$ boolean sortedByMatchingDegree = !(base.getModel() instanceof CustomMatcherModel)[ FD ]
Line_12 $$ final CollectConsumer<MatchResult> collect = new SynchronizedCollectConsumer<MatchResult>(namesList)-->Line_23 $$ collect.consume(result)[ FD ]
Line_21 $$ MatchResult result = matches(base, pattern, matcher, sequence)-->Line_22 $$ if (result != null) [ FD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_49 $$ final Map<Object, MatchResult> qualifierMatchResults = ContainerUtil.newIdentityTroveMap()[ CD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_91 $$ if (!consumer.process(element))[ FD ]
Line_7 $$ final ChooseByNameModel model = base.getModel()-->Line_14 $$ if (model instanceof ChooseByNameModelEx) [ FD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_62 $$ idFilter = ((ContributorsBasedGotoByModel) model).getIdFilter(everywhere)[ FD ]
Line_14 $$ if (model instanceof ChooseByNameModelEx) -->Line_34 $$ started = System.currentTimeMillis()[ CD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_43 $$ sortNamesList(matchingPattern, results)[ CD ]
Line_8 $$ String matchingPattern = convertToMatchingPattern(base, namePattern)-->Line_9 $$ if (matchingPattern == null)[ FD ]
Line_72 $$ if (elements.length > 1) -->Line_83 $$ Collections.sort(sameNameElements, weightComparator)[ CD ]
Line_7 $$ final ChooseByNameModel model = base.getModel()-->Line_71 $$ Object[] elements = model instanceof ContributorsBasedGotoByModel ? ((ContributorsBasedGotoByModel) model).getElementsByName(name, parameters, indicator) : model.getElementsByName(name, everywhere, namePattern)[ FD ]
Line_91 $$ if (!consumer.process(element))-->Line_92 $$ return false[ CD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_4 $$ String qualifierPattern = getQualifierPattern(base, pattern)[ CD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_47 $$ indicator.checkCanceled()[ FD ]
Line_85 $$ if (!qualifierMatchResults.get(element).startMatch) -->Line_86 $$ qualifierMiddleMatched.add(element)[ CD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_21 $$ MatchResult result = matches(base, pattern, matcher, sequence)[ FD ]
Line_96 $$ if (elements.length == 1 && matchQualifier(elements[0], base, patternsAndMatchers) != null) -->Line_99 $$ if (!consumer.process(elements[0]))[ CD ]
Line_18 $$ ((ChooseByNameModelEx) model).processNames(new Processor<String>() -->Line_21 $$ MatchResult result = matches(base, pattern, matcher, sequence)[ FD ]
Line_22 $$ if (result != null) -->Line_23 $$ collect.consume(result)[ CD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_13 $$ long started[ CD ]
Line_78 $$ if (qualifierResult != null) -->Line_80 $$ qualifierMatchResults.put(element, qualifierResult)[ CD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_58 $$ List<Pair<String, MinusculeMatcher>> patternsAndMatchers = getPatternsAndMatchers(qualifierPattern, base)[ CD ]
Line_50 $$ Comparator<Object> weightComparator = new Comparator<Object>() -->Line_53 $$ int result = modelComparator.compare(o1, o2)[ FD ]
Line_61 $$ if (model instanceof ContributorsBasedGotoByModel) -->Line_62 $$ idFilter = ((ContributorsBasedGotoByModel) model).getIdFilter(everywhere)[ CD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_9 $$ if (matchingPattern == null)[ CD ]
Line_89 $$ if (needSeparator && !startMiddleMatchVariants(qualifierMiddleMatched, consumer))-->Line_90 $$ return false[ CD ]
Line_14 $$ if (model instanceof ChooseByNameModelEx) -->Line_35 $$ processNamesByPattern(base, names, matchingPattern, indicator, collect)[ CD ]
Line_72 $$ if (elements.length > 1) -->Line_73 $$ sameNameElements.clear()[ CD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_5 $$ if (removeModelSpecificMarkup(base.getModel(), namePattern).isEmpty() && !base.canShowListForEmptyPattern())[ FD ]
Line_99 $$ if (!consumer.process(elements[0]))-->Line_100 $$ return false[ CD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_40 $$ indicator.checkCanceled()[ CD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_99 $$ if (!consumer.process(elements[0]))[ FD ]
Line_17 $$ final MinusculeMatcher matcher = buildPatternMatcher(matchingPattern, NameUtil.MatchingCaseSensitivity.NONE)-->Line_21 $$ MatchResult result = matches(base, pattern, matcher, sequence)[ FD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_40 $$ indicator.checkCanceled()[ FD ]
Line_96 $$ if (elements.length == 1 && matchQualifier(elements[0], base, patternsAndMatchers) != null) -->Line_97 $$ if (needSeparator && !startMiddleMatchVariants(qualifierMiddleMatched, consumer))[ CD ]
Line_2 $$ public boolean filterElements(@NotNull final ChooseByNameBase base, @NotNull final String pattern, boolean everywhere, @NotNull final ProgressIndicator indicator, @NotNull final Processor<Object> consumer) -->Line_20 $$ indicator.checkCanceled()[ FD ]
Line_50 $$ Comparator<Object> weightComparator = new Comparator<Object>() -->Line_54 $$ return result != 0 ? result : qualifierMatchResults.get(o1).compareTo(qualifierMatchResults.get(o2))[ CD ]
