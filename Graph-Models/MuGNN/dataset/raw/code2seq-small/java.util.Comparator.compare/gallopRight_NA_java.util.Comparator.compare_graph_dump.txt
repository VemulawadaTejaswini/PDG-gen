Line_19 $$ lastOfs = hint - ofs-->Line_43 $$ lastOfs = m + 1[ FD ]
Line_2 $$ private static <T> int gallopRight(T key, T[] a, int base, int len, int hint, Comparator<? super T> c) -->Line_7 $$ if (c.compare(key, a[base + hint]) < 0) [ FD ]
Line_40 $$ if (c.compare(key, a[base + m]) < 0)-->Line_43 $$ lastOfs = m + 1[ CD ]
Line_5 $$ int ofs = 1-->Line_10 $$ lastOfs = ofs[ FD ]
Line_25 $$ ofs = (ofs << 1) + 1-->Line_30 $$ if (ofs > maxOfs)[ FD ]
Line_20 $$ ofs = hint - tmp-->Line_41 $$ ofs = m[ FD ]
Line_32 $$ lastOfs += hint-->Line_38 $$ while (lastOfs < ofs) [ FD ]
Line_25 $$ ofs = (ofs << 1) + 1-->Line_41 $$ ofs = m[ FD ]
Line_8 $$ int maxOfs = hint + 1-->Line_14 $$ ofs = maxOfs[ FD ]
Line_7 $$ if (c.compare(key, a[base + hint]) < 0) -->Line_32 $$ lastOfs += hint[ CD ]
Line_31 $$ ofs = maxOfs-->Line_38 $$ while (lastOfs < ofs) [ FD ]
Line_11 $$ ofs = (ofs << 1) + 1-->Line_12 $$ if (ofs <= 0)[ FD ]
Line_20 $$ ofs = hint - tmp-->Line_28 $$ ofs = maxOfs[ FD ]
Line_2 $$ private static <T> int gallopRight(T key, T[] a, int base, int len, int hint, Comparator<? super T> c) -->Line_6 $$ int lastOfs = 0[ CD ]
Line_17 $$ ofs = maxOfs-->Line_33 $$ ofs += hint[ FD ]
Line_25 $$ ofs = (ofs << 1) + 1-->Line_33 $$ ofs += hint[ FD ]
Line_7 $$ if (c.compare(key, a[base + hint]) < 0) -->Line_9 $$ while (ofs < maxOfs && c.compare(key, a[base + hint - ofs]) < 0) [ CD ]
Line_11 $$ ofs = (ofs << 1) + 1-->Line_31 $$ ofs = maxOfs[ FD ]
Line_12 $$ if (ofs <= 0)-->Line_14 $$ ofs = maxOfs[ CD ]
Line_11 $$ ofs = (ofs << 1) + 1-->Line_30 $$ if (ofs > maxOfs)[ FD ]
Line_2 $$ private static <T> int gallopRight(T key, T[] a, int base, int len, int hint, Comparator<? super T> c) -->Line_35 $$ if (DEBUG)[ CD ]
Line_20 $$ ofs = hint - tmp-->Line_30 $$ if (ofs > maxOfs)[ FD ]
Line_11 $$ ofs = (ofs << 1) + 1-->Line_26 $$ if (ofs <= 0)[ FD ]
Line_6 $$ int lastOfs = 0-->Line_43 $$ lastOfs = m + 1[ FD ]
Line_11 $$ ofs = (ofs << 1) + 1-->Line_10 $$ lastOfs = ofs[ FD ]
Line_5 $$ int ofs = 1-->Line_20 $$ ofs = hint - tmp[ FD ]
Line_5 $$ int ofs = 1-->Line_41 $$ ofs = m[ FD ]
Line_8 $$ int maxOfs = hint + 1-->Line_17 $$ ofs = maxOfs[ FD ]
Line_25 $$ ofs = (ofs << 1) + 1-->Line_31 $$ ofs = maxOfs[ FD ]
Line_2 $$ private static <T> int gallopRight(T key, T[] a, int base, int len, int hint, Comparator<? super T> c) -->Line_47 $$ return ofs[ CD ]
Line_31 $$ ofs = maxOfs-->Line_41 $$ ofs = m[ FD ]
Line_11 $$ ofs = (ofs << 1) + 1-->Line_33 $$ ofs += hint[ FD ]
Line_20 $$ ofs = hint - tmp-->Line_24 $$ lastOfs = ofs[ FD ]
Line_2 $$ private static <T> int gallopRight(T key, T[] a, int base, int len, int hint, Comparator<? super T> c) -->Line_3 $$ if (DEBUG)[ CD ]
Line_6 $$ int lastOfs = 0-->Line_32 $$ lastOfs += hint[ FD ]
Line_9 $$ while (ofs < maxOfs && c.compare(key, a[base + hint - ofs]) < 0) -->Line_11 $$ ofs = (ofs << 1) + 1[ CD ]
Line_7 $$ if (c.compare(key, a[base + hint]) < 0) -->Line_20 $$ ofs = hint - tmp[ CD ]
Line_5 $$ int ofs = 1-->Line_33 $$ ofs += hint[ FD ]
Line_14 $$ ofs = maxOfs-->Line_10 $$ lastOfs = ofs[ FD ]
Line_17 $$ ofs = maxOfs-->Line_20 $$ ofs = hint - tmp[ FD ]
Line_11 $$ ofs = (ofs << 1) + 1-->Line_14 $$ ofs = maxOfs[ FD ]
Line_23 $$ while (ofs < maxOfs && c.compare(key, a[base + hint + ofs]) >= 0) -->Line_25 $$ ofs = (ofs << 1) + 1[ CD ]
Line_8 $$ int maxOfs = hint + 1-->Line_16 $$ if (ofs > maxOfs)[ FD ]
Line_17 $$ ofs = maxOfs-->Line_28 $$ ofs = maxOfs[ FD ]
Line_16 $$ if (ofs > maxOfs)-->Line_17 $$ ofs = maxOfs[ CD ]
Line_5 $$ int ofs = 1-->Line_28 $$ ofs = maxOfs[ FD ]
Line_2 $$ private static <T> int gallopRight(T key, T[] a, int base, int len, int hint, Comparator<? super T> c) -->Line_9 $$ while (ofs < maxOfs && c.compare(key, a[base + hint - ofs]) < 0) [ FD ]
Line_24 $$ lastOfs = ofs-->Line_43 $$ lastOfs = m + 1[ FD ]
Line_10 $$ lastOfs = ofs-->Line_19 $$ lastOfs = hint - ofs[ FD ]
Line_7 $$ if (c.compare(key, a[base + hint]) < 0) -->Line_30 $$ if (ofs > maxOfs)[ CD ]
Line_17 $$ ofs = maxOfs-->Line_38 $$ while (lastOfs < ofs) [ FD ]
Line_8 $$ int maxOfs = hint + 1-->Line_31 $$ ofs = maxOfs[ FD ]
Line_17 $$ ofs = maxOfs-->Line_26 $$ if (ofs <= 0)[ FD ]
Line_14 $$ ofs = maxOfs-->Line_12 $$ if (ofs <= 0)[ FD ]
Line_31 $$ ofs = maxOfs-->Line_33 $$ ofs += hint[ FD ]
Line_2 $$ private static <T> int gallopRight(T key, T[] a, int base, int len, int hint, Comparator<? super T> c) -->Line_45 $$ if (DEBUG)[ CD ]
Line_5 $$ int ofs = 1-->Line_11 $$ ofs = (ofs << 1) + 1[ FD ]
Line_25 $$ ofs = (ofs << 1) + 1-->Line_28 $$ ofs = maxOfs[ FD ]
Line_7 $$ if (c.compare(key, a[base + hint]) < 0) -->Line_18 $$ int tmp = lastOfs[ CD ]
Line_7 $$ if (c.compare(key, a[base + hint]) < 0) -->Line_23 $$ while (ofs < maxOfs && c.compare(key, a[base + hint + ofs]) >= 0) [ CD ]
Line_18 $$ int tmp = lastOfs-->Line_20 $$ ofs = hint - tmp[ FD ]
Line_23 $$ while (ofs < maxOfs && c.compare(key, a[base + hint + ofs]) >= 0) -->Line_24 $$ lastOfs = ofs[ CD ]
Line_11 $$ ofs = (ofs << 1) + 1-->Line_17 $$ ofs = maxOfs[ FD ]
Line_28 $$ ofs = maxOfs-->Line_38 $$ while (lastOfs < ofs) [ FD ]
Line_25 $$ ofs = (ofs << 1) + 1-->Line_24 $$ lastOfs = ofs[ FD ]
Line_2 $$ private static <T> int gallopRight(T key, T[] a, int base, int len, int hint, Comparator<? super T> c) -->Line_20 $$ ofs = hint - tmp[ FD ]
Line_28 $$ ofs = maxOfs-->Line_33 $$ ofs += hint[ FD ]
Line_32 $$ lastOfs += hint-->Line_37 $$ lastOfs++[ FD ]
Line_6 $$ int lastOfs = 0-->Line_10 $$ lastOfs = ofs[ FD ]
Line_2 $$ private static <T> int gallopRight(T key, T[] a, int base, int len, int hint, Comparator<? super T> c) -->Line_32 $$ lastOfs += hint[ FD ]
Line_28 $$ ofs = maxOfs-->Line_41 $$ ofs = m[ FD ]
Line_14 $$ ofs = maxOfs-->Line_17 $$ ofs = maxOfs[ FD ]
Line_25 $$ ofs = (ofs << 1) + 1-->Line_38 $$ while (lastOfs < ofs) [ FD ]
Line_28 $$ ofs = maxOfs-->Line_24 $$ lastOfs = ofs[ FD ]
Line_14 $$ ofs = maxOfs-->Line_20 $$ ofs = hint - tmp[ FD ]
Line_20 $$ ofs = hint - tmp-->Line_31 $$ ofs = maxOfs[ FD ]
Line_17 $$ ofs = maxOfs-->Line_31 $$ ofs = maxOfs[ FD ]
Line_5 $$ int ofs = 1-->Line_31 $$ ofs = maxOfs[ FD ]
Line_30 $$ if (ofs > maxOfs)-->Line_31 $$ ofs = maxOfs[ CD ]
Line_11 $$ ofs = (ofs << 1) + 1-->Line_38 $$ while (lastOfs < ofs) [ FD ]
Line_5 $$ int ofs = 1-->Line_17 $$ ofs = maxOfs[ FD ]
Line_14 $$ ofs = maxOfs-->Line_28 $$ ofs = maxOfs[ FD ]
Line_14 $$ ofs = maxOfs-->Line_16 $$ if (ofs > maxOfs)[ FD ]
Line_32 $$ lastOfs += hint-->Line_43 $$ lastOfs = m + 1[ FD ]
Line_10 $$ lastOfs = ofs-->Line_37 $$ lastOfs++[ FD ]
Line_19 $$ lastOfs = hint - ofs-->Line_24 $$ lastOfs = ofs[ FD ]
Line_5 $$ int ofs = 1-->Line_12 $$ if (ofs <= 0)[ FD ]
Line_5 $$ int ofs = 1-->Line_25 $$ ofs = (ofs << 1) + 1[ FD ]
Line_11 $$ ofs = (ofs << 1) + 1-->Line_25 $$ ofs = (ofs << 1) + 1[ FD ]
Line_6 $$ int lastOfs = 0-->Line_38 $$ while (lastOfs < ofs) [ FD ]
Line_28 $$ ofs = maxOfs-->Line_26 $$ if (ofs <= 0)[ FD ]
Line_14 $$ ofs = maxOfs-->Line_19 $$ lastOfs = hint - ofs[ FD ]
Line_2 $$ private static <T> int gallopRight(T key, T[] a, int base, int len, int hint, Comparator<? super T> c) -->Line_5 $$ int ofs = 1[ CD ]
Line_24 $$ lastOfs = ofs-->Line_38 $$ while (lastOfs < ofs) [ FD ]
Line_19 $$ lastOfs = hint - ofs-->Line_32 $$ lastOfs += hint[ FD ]
Line_9 $$ while (ofs < maxOfs && c.compare(key, a[base + hint - ofs]) < 0) -->Line_12 $$ if (ofs <= 0)[ CD ]
Line_39 $$ int m = lastOfs + ((ofs - lastOfs) >>> 1)-->Line_41 $$ ofs = m[ FD ]
Line_38 $$ while (lastOfs < ofs) -->Line_40 $$ if (c.compare(key, a[base + m]) < 0)[ CD ]
Line_10 $$ lastOfs = ofs-->Line_43 $$ lastOfs = m + 1[ FD ]
Line_5 $$ int ofs = 1-->Line_24 $$ lastOfs = ofs[ FD ]
Line_6 $$ int lastOfs = 0-->Line_19 $$ lastOfs = hint - ofs[ FD ]
Line_10 $$ lastOfs = ofs-->Line_24 $$ lastOfs = ofs[ FD ]
Line_14 $$ ofs = maxOfs-->Line_24 $$ lastOfs = ofs[ FD ]
Line_20 $$ ofs = hint - tmp-->Line_33 $$ ofs += hint[ FD ]
Line_17 $$ ofs = maxOfs-->Line_19 $$ lastOfs = hint - ofs[ FD ]
Line_11 $$ ofs = (ofs << 1) + 1-->Line_41 $$ ofs = m[ FD ]
Line_20 $$ ofs = hint - tmp-->Line_25 $$ ofs = (ofs << 1) + 1[ FD ]
Line_10 $$ lastOfs = ofs-->Line_32 $$ lastOfs += hint[ FD ]
Line_8 $$ int maxOfs = hint + 1-->Line_30 $$ if (ofs > maxOfs)[ FD ]
Line_14 $$ ofs = maxOfs-->Line_25 $$ ofs = (ofs << 1) + 1[ FD ]
Line_14 $$ ofs = maxOfs-->Line_31 $$ ofs = maxOfs[ FD ]
Line_7 $$ if (c.compare(key, a[base + hint]) < 0) -->Line_8 $$ int maxOfs = hint + 1[ CD ]
Line_7 $$ if (c.compare(key, a[base + hint]) < 0) -->Line_16 $$ if (ofs > maxOfs)[ CD ]
Line_11 $$ ofs = (ofs << 1) + 1-->Line_20 $$ ofs = hint - tmp[ FD ]
Line_33 $$ ofs += hint-->Line_41 $$ ofs = m[ FD ]
Line_7 $$ if (c.compare(key, a[base + hint]) < 0) -->Line_19 $$ lastOfs = hint - ofs[ CD ]
Line_2 $$ private static <T> int gallopRight(T key, T[] a, int base, int len, int hint, Comparator<? super T> c) -->Line_19 $$ lastOfs = hint - ofs[ FD ]
Line_14 $$ ofs = maxOfs-->Line_26 $$ if (ofs <= 0)[ FD ]
Line_14 $$ ofs = maxOfs-->Line_41 $$ ofs = m[ FD ]
Line_2 $$ private static <T> int gallopRight(T key, T[] a, int base, int len, int hint, Comparator<? super T> c) -->Line_33 $$ ofs += hint[ FD ]
Line_26 $$ if (ofs <= 0)-->Line_28 $$ ofs = maxOfs[ CD ]
Line_24 $$ lastOfs = ofs-->Line_32 $$ lastOfs += hint[ FD ]
Line_11 $$ ofs = (ofs << 1) + 1-->Line_28 $$ ofs = maxOfs[ FD ]
Line_19 $$ lastOfs = hint - ofs-->Line_37 $$ lastOfs++[ FD ]
Line_5 $$ int ofs = 1-->Line_19 $$ lastOfs = hint - ofs[ FD ]
Line_2 $$ private static <T> int gallopRight(T key, T[] a, int base, int len, int hint, Comparator<? super T> c) -->Line_23 $$ while (ofs < maxOfs && c.compare(key, a[base + hint + ofs]) >= 0) [ FD ]
Line_11 $$ ofs = (ofs << 1) + 1-->Line_24 $$ lastOfs = ofs[ FD ]
Line_5 $$ int ofs = 1-->Line_30 $$ if (ofs > maxOfs)[ FD ]
Line_6 $$ int lastOfs = 0-->Line_24 $$ lastOfs = ofs[ FD ]
Line_5 $$ int ofs = 1-->Line_26 $$ if (ofs <= 0)[ FD ]
Line_20 $$ ofs = hint - tmp-->Line_26 $$ if (ofs <= 0)[ FD ]
Line_40 $$ if (c.compare(key, a[base + m]) < 0)-->Line_41 $$ ofs = m[ CD ]
Line_33 $$ ofs += hint-->Line_38 $$ while (lastOfs < ofs) [ FD ]
Line_5 $$ int ofs = 1-->Line_38 $$ while (lastOfs < ofs) [ FD ]
Line_41 $$ ofs = m-->Line_38 $$ while (lastOfs < ofs) [ FD ]
Line_2 $$ private static <T> int gallopRight(T key, T[] a, int base, int len, int hint, Comparator<? super T> c) -->Line_38 $$ while (lastOfs < ofs) [ CD ]
Line_2 $$ private static <T> int gallopRight(T key, T[] a, int base, int len, int hint, Comparator<? super T> c) -->Line_40 $$ if (c.compare(key, a[base + m]) < 0)[ FD ]
Line_8 $$ int maxOfs = hint + 1-->Line_28 $$ ofs = maxOfs[ FD ]
Line_28 $$ ofs = maxOfs-->Line_30 $$ if (ofs > maxOfs)[ FD ]
Line_14 $$ ofs = maxOfs-->Line_33 $$ ofs += hint[ FD ]
Line_14 $$ ofs = maxOfs-->Line_30 $$ if (ofs > maxOfs)[ FD ]
Line_9 $$ while (ofs < maxOfs && c.compare(key, a[base + hint - ofs]) < 0) -->Line_10 $$ lastOfs = ofs[ CD ]
Line_28 $$ ofs = maxOfs-->Line_31 $$ ofs = maxOfs[ FD ]
Line_24 $$ lastOfs = ofs-->Line_37 $$ lastOfs++[ FD ]
Line_17 $$ ofs = maxOfs-->Line_30 $$ if (ofs > maxOfs)[ FD ]
Line_2 $$ private static <T> int gallopRight(T key, T[] a, int base, int len, int hint, Comparator<? super T> c) -->Line_37 $$ lastOfs++[ CD ]
Line_11 $$ ofs = (ofs << 1) + 1-->Line_19 $$ lastOfs = hint - ofs[ FD ]
Line_6 $$ int lastOfs = 0-->Line_37 $$ lastOfs++[ FD ]
Line_7 $$ if (c.compare(key, a[base + hint]) < 0) -->Line_33 $$ ofs += hint[ CD ]
Line_39 $$ int m = lastOfs + ((ofs - lastOfs) >>> 1)-->Line_43 $$ lastOfs = m + 1[ FD ]
Line_38 $$ while (lastOfs < ofs) -->Line_39 $$ int m = lastOfs + ((ofs - lastOfs) >>> 1)[ CD ]
Line_23 $$ while (ofs < maxOfs && c.compare(key, a[base + hint + ofs]) >= 0) -->Line_26 $$ if (ofs <= 0)[ CD ]
Line_25 $$ ofs = (ofs << 1) + 1-->Line_26 $$ if (ofs <= 0)[ FD ]
Line_5 $$ int ofs = 1-->Line_14 $$ ofs = maxOfs[ FD ]
Line_17 $$ ofs = maxOfs-->Line_41 $$ ofs = m[ FD ]
Line_19 $$ lastOfs = hint - ofs-->Line_38 $$ while (lastOfs < ofs) [ FD ]
Line_43 $$ lastOfs = m + 1-->Line_38 $$ while (lastOfs < ofs) [ FD ]
Line_2 $$ private static <T> int gallopRight(T key, T[] a, int base, int len, int hint, Comparator<? super T> c) -->Line_7 $$ if (c.compare(key, a[base + hint]) < 0) [ CD ]
Line_10 $$ lastOfs = ofs-->Line_38 $$ while (lastOfs < ofs) [ FD ]
Line_14 $$ ofs = maxOfs-->Line_38 $$ while (lastOfs < ofs) [ FD ]
Line_20 $$ ofs = hint - tmp-->Line_38 $$ while (lastOfs < ofs) [ FD ]
Line_17 $$ ofs = maxOfs-->Line_24 $$ lastOfs = ofs[ FD ]
Line_5 $$ int ofs = 1-->Line_16 $$ if (ofs > maxOfs)[ FD ]
Line_11 $$ ofs = (ofs << 1) + 1-->Line_16 $$ if (ofs > maxOfs)[ FD ]
Line_17 $$ ofs = maxOfs-->Line_25 $$ ofs = (ofs << 1) + 1[ FD ]
