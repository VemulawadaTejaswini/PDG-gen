Line_2 $$ public void shouldCompareInterfaces() throws Exception -->Line_7 $$ assertThat(comparator.compare(c1, c3), is(-1))[ CD ]
Line_2 $$ public void shouldCompareInterfaces() throws Exception -->Line_4 $$ assertThat(comparator.compare(c1, c1), is(0))[ CD ]
Line_2 $$ public void shouldCompareInterfaces() throws Exception -->Line_6 $$ assertThat(comparator.compare(c2, c1), is(0))[ CD ]
Line_3 $$ Comparator<Object> comparator = new InstanceComparator<Object>(I1.class, I2.class)-->Line_9 $$ assertThat(comparator.compare(c3, c4), is(0))[ FD ]
Line_3 $$ Comparator<Object> comparator = new InstanceComparator<Object>(I1.class, I2.class)-->Line_6 $$ assertThat(comparator.compare(c2, c1), is(0))[ FD ]
Line_3 $$ Comparator<Object> comparator = new InstanceComparator<Object>(I1.class, I2.class)-->Line_7 $$ assertThat(comparator.compare(c1, c3), is(-1))[ FD ]
Line_3 $$ Comparator<Object> comparator = new InstanceComparator<Object>(I1.class, I2.class)-->Line_5 $$ assertThat(comparator.compare(c1, c2), is(0))[ FD ]
Line_3 $$ Comparator<Object> comparator = new InstanceComparator<Object>(I1.class, I2.class)-->Line_4 $$ assertThat(comparator.compare(c1, c1), is(0))[ FD ]
Line_3 $$ Comparator<Object> comparator = new InstanceComparator<Object>(I1.class, I2.class)-->Line_8 $$ assertThat(comparator.compare(c3, c1), is(1))[ FD ]
Line_2 $$ public void shouldCompareInterfaces() throws Exception -->Line_5 $$ assertThat(comparator.compare(c1, c2), is(0))[ CD ]
Line_2 $$ public void shouldCompareInterfaces() throws Exception -->Line_3 $$ Comparator<Object> comparator = new InstanceComparator<Object>(I1.class, I2.class)[ CD ]
Line_2 $$ public void shouldCompareInterfaces() throws Exception -->Line_8 $$ assertThat(comparator.compare(c3, c1), is(1))[ CD ]
Line_2 $$ public void shouldCompareInterfaces() throws Exception -->Line_9 $$ assertThat(comparator.compare(c3, c4), is(0))[ CD ]
