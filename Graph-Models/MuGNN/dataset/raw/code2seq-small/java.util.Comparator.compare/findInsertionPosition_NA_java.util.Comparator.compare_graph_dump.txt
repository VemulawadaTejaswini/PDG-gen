Line_9 $$ final int insertIndex = Collections.binarySearch(myProperties, property, new Comparator<IProperty>() -->Line_11 $$ final String k1 = p1.getKey()[ FD ]
Line_11 $$ final String k1 = p1.getKey()-->Line_14 $$ return String.CASE_INSENSITIVE_ORDER.compare(k1, k2)[ FD ]
Line_9 $$ final int insertIndex = Collections.binarySearch(myProperties, property, new Comparator<IProperty>() -->Line_12 $$ final String k2 = p2.getKey()[ CD ]
Line_9 $$ final int insertIndex = Collections.binarySearch(myProperties, property, new Comparator<IProperty>() -->Line_12 $$ final String k2 = p2.getKey()[ FD ]
Line_8 $$ if (myAlphaSorted) -->Line_17 $$ return insertIndex == -1 ? null : myProperties.get(insertIndex < 0 ? -insertIndex - 2 : insertIndex)[ CD ]
Line_8 $$ if (myAlphaSorted) -->Line_9 $$ final int insertIndex = Collections.binarySearch(myProperties, property, new Comparator<IProperty>() [ CD ]
Line_2 $$ private IProperty findInsertionPosition(@NotNull IProperty property) -->Line_9 $$ final int insertIndex = Collections.binarySearch(myProperties, property, new Comparator<IProperty>() [ FD ]
Line_5 $$ if (myProperties.isEmpty()) -->Line_6 $$ return null[ CD ]
Line_9 $$ final int insertIndex = Collections.binarySearch(myProperties, property, new Comparator<IProperty>() -->Line_13 $$ LOG.assertTrue(k1 != null && k2 != null)[ CD ]
Line_9 $$ final int insertIndex = Collections.binarySearch(myProperties, property, new Comparator<IProperty>() -->Line_14 $$ return String.CASE_INSENSITIVE_ORDER.compare(k1, k2)[ CD ]
Line_9 $$ final int insertIndex = Collections.binarySearch(myProperties, property, new Comparator<IProperty>() -->Line_11 $$ final String k1 = p1.getKey()[ CD ]
Line_12 $$ final String k2 = p2.getKey()-->Line_14 $$ return String.CASE_INSENSITIVE_ORDER.compare(k1, k2)[ FD ]
