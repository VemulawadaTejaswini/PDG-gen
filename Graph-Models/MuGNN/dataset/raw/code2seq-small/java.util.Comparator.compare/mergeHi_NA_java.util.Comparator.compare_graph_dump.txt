Line_5 $$ T[] a = this.a-->Line_13 $$ System.arraycopy(tmp, 0, a, dest - (len2 - 1), len2)[ FD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_18 $$ cursor1 -= len1[ FD ]
Line_60 $$ count2 = len2 - gallopLeft(a[cursor1], tmp, 0, len2, len2 - 1, c)-->Line_62 $$ dest -= count2[ FD ]
Line_64 $$ len2 -= count2-->Line_60 $$ count2 = len2 - gallopLeft(a[cursor1], tmp, 0, len2, len2 - 1, c)[ FD ]
Line_24 $$ int minGallop = this.minGallop-->Line_73 $$ minGallop--[ FD ]
Line_25 $$ while (true) -->Line_28 $$ do [ CD ]
Line_40 $$ count1 = 0-->Line_48 $$ count1 = len1 - gallopRight(tmp[cursor2], a, base1, len1, len1 - 1, c)[ FD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_3 $$ if (DEBUG)[ CD ]
Line_8 $$ int cursor1 = base1 + len1 - 1-->Line_11 $$ a[dest--] = a[cursor1--][ FD ]
Line_31 $$ if (c.compare(tmp[cursor2], a[cursor1]) < 0) -->Line_41 $$ if (--len2 == 1)[ CD ]
Line_34 $$ count2 = 0-->Line_60 $$ count2 = len2 - gallopLeft(a[cursor1], tmp, 0, len2, len2 - 1, c)[ FD ]
Line_17 $$ dest -= len1-->Line_62 $$ dest -= count2[ FD ]
Line_40 $$ count1 = 0-->Line_53 $$ System.arraycopy(a, cursor1 + 1, a, dest + 1, count1)[ FD ]
Line_80 $$ if (len2 == 1) -->Line_85 $$ System.arraycopy(a, cursor1 + 1, a, dest + 1, len1)[ CD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_41 $$ if (--len2 == 1)[ FD ]
Line_16 $$ if (len2 == 1) -->Line_19 $$ System.arraycopy(a, cursor1 + 1, a, dest + 1, len1)[ CD ]
Line_24 $$ int minGallop = this.minGallop-->Line_76 $$ minGallop = 0[ FD ]
Line_76 $$ minGallop = 0-->Line_77 $$ minGallop += 2[ FD ]
Line_34 $$ count2 = 0-->Line_39 $$ count2++[ FD ]
Line_62 $$ dest -= count2-->Line_70 $$ a[dest--] = a[cursor1--][ FD ]
Line_34 $$ count2 = 0-->Line_65 $$ System.arraycopy(tmp, cursor2 + 1, a, dest + 1, count2)[ FD ]
Line_8 $$ int cursor1 = base1 + len1 - 1-->Line_51 $$ cursor1 -= count1[ FD ]
Line_5 $$ T[] a = this.a-->Line_94 $$ System.arraycopy(tmp, 0, a, dest - (len2 - 1), len2)[ FD ]
Line_34 $$ count2 = 0-->Line_61 $$ if (count2 != 0) [ FD ]
Line_24 $$ int minGallop = this.minGallop-->Line_28 $$ do [ FD ]
Line_87 $$ if (len2 == 0) -->Line_90 $$ if (DEBUG)[ CD ]
Line_48 $$ count1 = len1 - gallopRight(tmp[cursor2], a, base1, len1, len1 - 1, c)-->Line_49 $$ if (count1 != 0) [ FD ]
Line_48 $$ count1 = len1 - gallopRight(tmp[cursor2], a, base1, len1, len1 - 1, c)-->Line_52 $$ len1 -= count1[ FD ]
Line_60 $$ count2 = len2 - gallopLeft(a[cursor1], tmp, 0, len2, len2 - 1, c)-->Line_65 $$ System.arraycopy(tmp, cursor2 + 1, a, dest + 1, count2)[ FD ]
Line_10 $$ int dest = base2 + len2 - 1-->Line_32 $$ a[dest--] = a[cursor1--][ FD ]
Line_48 $$ count1 = len1 - gallopRight(tmp[cursor2], a, base1, len1, len1 - 1, c)-->Line_51 $$ cursor1 -= count1[ FD ]
Line_31 $$ if (c.compare(tmp[cursor2], a[cursor1]) < 0) -->Line_34 $$ count2 = 0[ CD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_48 $$ count1 = len1 - gallopRight(tmp[cursor2], a, base1, len1, len1 - 1, c)[ FD ]
Line_75 $$ if (minGallop < 0)-->Line_76 $$ minGallop = 0[ CD ]
Line_40 $$ count1 = 0-->Line_33 $$ count1++[ FD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_6 $$ T[] tmp = ensureCapacity(len2)[ CD ]
Line_12 $$ if (--len1 == 0) -->Line_14 $$ return[ CD ]
Line_26 $$ int count1 = 0-->Line_33 $$ count1++[ FD ]
Line_87 $$ if (len2 == 0) -->Line_94 $$ System.arraycopy(tmp, 0, a, dest - (len2 - 1), len2)[ CD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_23 $$ Comparator<? super T> c = this.c[ CD ]
Line_6 $$ T[] tmp = ensureCapacity(len2)-->Line_60 $$ count2 = len2 - gallopLeft(a[cursor1], tmp, 0, len2, len2 - 1, c)[ FD ]
Line_31 $$ if (c.compare(tmp[cursor2], a[cursor1]) < 0) -->Line_35 $$ if (--len1 == 0)[ CD ]
Line_45 $$ do -->Line_71 $$ if (--len1 == 0)[ CD ]
Line_50 $$ dest -= count1-->Line_62 $$ dest -= count2[ FD ]
Line_28 $$ do -->Line_29 $$ if (DEBUG)[ CD ]
Line_50 $$ dest -= count1-->Line_83 $$ dest -= len1[ FD ]
Line_10 $$ int dest = base2 + len2 - 1-->Line_11 $$ a[dest--] = a[cursor1--][ FD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_12 $$ if (--len1 == 0) [ CD ]
Line_31 $$ if (c.compare(tmp[cursor2], a[cursor1]) < 0) -->Line_39 $$ count2++[ CD ]
Line_8 $$ int cursor1 = base1 + len1 - 1-->Line_84 $$ cursor1 -= len1[ FD ]
Line_64 $$ len2 -= count2-->Line_58 $$ if (--len2 == 1)[ FD ]
Line_45 $$ do -->Line_46 $$ if (DEBUG)[ CD ]
Line_31 $$ if (c.compare(tmp[cursor2], a[cursor1]) < 0) -->Line_38 $$ a[dest--] = tmp[cursor2--][ CD ]
Line_26 $$ int count1 = 0-->Line_40 $$ count1 = 0[ FD ]
Line_45 $$ do -->Line_60 $$ count2 = len2 - gallopLeft(a[cursor1], tmp, 0, len2, len2 - 1, c)[ CD ]
Line_10 $$ int dest = base2 + len2 - 1-->Line_38 $$ a[dest--] = tmp[cursor2--][ FD ]
Line_40 $$ count1 = 0-->Line_51 $$ cursor1 -= count1[ FD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_12 $$ if (--len1 == 0) [ FD ]
Line_64 $$ len2 -= count2-->Line_66 $$ if (len2 <= 1)[ FD ]
Line_40 $$ count1 = 0-->Line_50 $$ dest -= count1[ FD ]
Line_80 $$ if (len2 == 1) -->Line_86 $$ a[dest] = tmp[cursor2][ CD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_58 $$ if (--len2 == 1)[ FD ]
Line_27 $$ int count2 = 0-->Line_63 $$ cursor2 -= count2[ FD ]
Line_23 $$ Comparator<? super T> c = this.c-->Line_60 $$ count2 = len2 - gallopLeft(a[cursor1], tmp, 0, len2, len2 - 1, c)[ FD ]
Line_45 $$ do -->Line_57 $$ a[dest--] = tmp[cursor2--][ CD ]
Line_26 $$ int count1 = 0-->Line_50 $$ dest -= count1[ FD ]
Line_5 $$ T[] a = this.a-->Line_7 $$ System.arraycopy(a, base2, tmp, 0, len2)[ FD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_7 $$ System.arraycopy(a, base2, tmp, 0, len2)[ CD ]
Line_25 $$ while (true) -->Line_77 $$ minGallop += 2[ CD ]
Line_52 $$ len1 -= count1-->Line_48 $$ count1 = len1 - gallopRight(tmp[cursor2], a, base1, len1, len1 - 1, c)[ FD ]
Line_10 $$ int dest = base2 + len2 - 1-->Line_50 $$ dest -= count1[ FD ]
Line_17 $$ dest -= len1-->Line_83 $$ dest -= len1[ FD ]
Line_23 $$ Comparator<? super T> c = this.c-->Line_48 $$ count1 = len1 - gallopRight(tmp[cursor2], a, base1, len1, len1 - 1, c)[ FD ]
Line_52 $$ len1 -= count1-->Line_85 $$ System.arraycopy(a, cursor1 + 1, a, dest + 1, len1)[ FD ]
Line_61 $$ if (count2 != 0) -->Line_64 $$ len2 -= count2[ CD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_9 $$ int cursor2 = len2 - 1[ CD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_11 $$ a[dest--] = a[cursor1--][ CD ]
Line_18 $$ cursor1 -= len1-->Line_84 $$ cursor1 -= len1[ FD ]
Line_6 $$ T[] tmp = ensureCapacity(len2)-->Line_65 $$ System.arraycopy(tmp, cursor2 + 1, a, dest + 1, count2)[ FD ]
Line_27 $$ int count2 = 0-->Line_62 $$ dest -= count2[ FD ]
Line_26 $$ int count1 = 0-->Line_52 $$ len1 -= count1[ FD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_84 $$ cursor1 -= len1[ FD ]
Line_52 $$ len1 -= count1-->Line_84 $$ cursor1 -= len1[ FD ]
Line_25 $$ while (true) -->Line_45 $$ do [ CD ]
Line_5 $$ T[] a = this.a-->Line_48 $$ count1 = len1 - gallopRight(tmp[cursor2], a, base1, len1, len1 - 1, c)[ FD ]
Line_60 $$ count2 = len2 - gallopLeft(a[cursor1], tmp, 0, len2, len2 - 1, c)-->Line_63 $$ cursor2 -= count2[ FD ]
Line_34 $$ count2 = 0-->Line_64 $$ len2 -= count2[ FD ]
Line_8 $$ int cursor1 = base1 + len1 - 1-->Line_70 $$ a[dest--] = a[cursor1--][ FD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_79 $$ this.minGallop = minGallop < 1 ? 1 : minGallop[ CD ]
Line_48 $$ count1 = len1 - gallopRight(tmp[cursor2], a, base1, len1, len1 - 1, c)-->Line_53 $$ System.arraycopy(a, cursor1 + 1, a, dest + 1, count1)[ FD ]
Line_6 $$ T[] tmp = ensureCapacity(len2)-->Line_7 $$ System.arraycopy(a, base2, tmp, 0, len2)[ FD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_54 $$ if (len1 == 0)[ FD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_13 $$ System.arraycopy(tmp, 0, a, dest - (len2 - 1), len2)[ FD ]
Line_48 $$ count1 = len1 - gallopRight(tmp[cursor2], a, base1, len1, len1 - 1, c)-->Line_50 $$ dest -= count1[ FD ]
Line_25 $$ while (true) -->Line_26 $$ int count1 = 0[ CD ]
Line_61 $$ if (count2 != 0) -->Line_63 $$ cursor2 -= count2[ CD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_35 $$ if (--len1 == 0)[ FD ]
Line_45 $$ do -->Line_61 $$ if (count2 != 0) [ CD ]
Line_26 $$ int count1 = 0-->Line_49 $$ if (count1 != 0) [ FD ]
Line_5 $$ T[] a = this.a-->Line_65 $$ System.arraycopy(tmp, cursor2 + 1, a, dest + 1, count2)[ FD ]
Line_23 $$ Comparator<? super T> c = this.c-->Line_31 $$ if (c.compare(tmp[cursor2], a[cursor1]) < 0) [ FD ]
Line_10 $$ int dest = base2 + len2 - 1-->Line_57 $$ a[dest--] = tmp[cursor2--][ FD ]
Line_8 $$ int cursor1 = base1 + len1 - 1-->Line_18 $$ cursor1 -= len1[ FD ]
Line_27 $$ int count2 = 0-->Line_64 $$ len2 -= count2[ FD ]
Line_27 $$ int count2 = 0-->Line_65 $$ System.arraycopy(tmp, cursor2 + 1, a, dest + 1, count2)[ FD ]
Line_63 $$ cursor2 -= count2-->Line_57 $$ a[dest--] = tmp[cursor2--][ FD ]
Line_26 $$ int count1 = 0-->Line_53 $$ System.arraycopy(a, cursor1 + 1, a, dest + 1, count1)[ FD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_7 $$ System.arraycopy(a, base2, tmp, 0, len2)[ FD ]
Line_31 $$ if (c.compare(tmp[cursor2], a[cursor1]) < 0) -->Line_33 $$ count1++[ CD ]
Line_17 $$ dest -= len1-->Line_70 $$ a[dest--] = a[cursor1--][ FD ]
Line_12 $$ if (--len1 == 0) -->Line_13 $$ System.arraycopy(tmp, 0, a, dest - (len2 - 1), len2)[ CD ]
Line_40 $$ count1 = 0-->Line_49 $$ if (count1 != 0) [ FD ]
Line_49 $$ if (count1 != 0) -->Line_54 $$ if (len1 == 0)[ CD ]
Line_5 $$ T[] a = this.a-->Line_19 $$ System.arraycopy(a, cursor1 + 1, a, dest + 1, len1)[ FD ]
Line_27 $$ int count2 = 0-->Line_61 $$ if (count2 != 0) [ FD ]
Line_26 $$ int count1 = 0-->Line_51 $$ cursor1 -= count1[ FD ]
Line_10 $$ int dest = base2 + len2 - 1-->Line_83 $$ dest -= len1[ FD ]
Line_62 $$ dest -= count2-->Line_57 $$ a[dest--] = tmp[cursor2--][ FD ]
Line_51 $$ cursor1 -= count1-->Line_70 $$ a[dest--] = a[cursor1--][ FD ]
Line_16 $$ if (len2 == 1) -->Line_17 $$ dest -= len1[ CD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_16 $$ if (len2 == 1) [ FD ]
Line_52 $$ len1 -= count1-->Line_71 $$ if (--len1 == 0)[ FD ]
Line_27 $$ int count2 = 0-->Line_60 $$ count2 = len2 - gallopLeft(a[cursor1], tmp, 0, len2, len2 - 1, c)[ FD ]
Line_18 $$ cursor1 -= len1-->Line_51 $$ cursor1 -= count1[ FD ]
Line_45 $$ do -->Line_49 $$ if (count1 != 0) [ CD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_80 $$ if (len2 == 1) [ CD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_10 $$ int dest = base2 + len2 - 1[ CD ]
Line_49 $$ if (count1 != 0) -->Line_53 $$ System.arraycopy(a, cursor1 + 1, a, dest + 1, count1)[ CD ]
Line_64 $$ len2 -= count2-->Line_80 $$ if (len2 == 1) [ FD ]
Line_17 $$ dest -= len1-->Line_50 $$ dest -= count1[ FD ]
Line_18 $$ cursor1 -= len1-->Line_70 $$ a[dest--] = a[cursor1--][ FD ]
Line_80 $$ if (len2 == 1) -->Line_81 $$ if (DEBUG)[ CD ]
Line_5 $$ T[] a = this.a-->Line_85 $$ System.arraycopy(a, cursor1 + 1, a, dest + 1, len1)[ FD ]
Line_5 $$ T[] a = this.a-->Line_53 $$ System.arraycopy(a, cursor1 + 1, a, dest + 1, count1)[ FD ]
Line_60 $$ count2 = len2 - gallopLeft(a[cursor1], tmp, 0, len2, len2 - 1, c)-->Line_61 $$ if (count2 != 0) [ FD ]
Line_17 $$ dest -= len1-->Line_57 $$ a[dest--] = tmp[cursor2--][ FD ]
Line_25 $$ while (true) -->Line_75 $$ if (minGallop < 0)[ CD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_17 $$ dest -= len1[ FD ]
Line_64 $$ len2 -= count2-->Line_87 $$ if (len2 == 0) [ FD ]
Line_52 $$ len1 -= count1-->Line_54 $$ if (len1 == 0)[ FD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_83 $$ dest -= len1[ FD ]
Line_80 $$ if (len2 == 1) -->Line_83 $$ dest -= len1[ CD ]
Line_76 $$ minGallop = 0-->Line_75 $$ if (minGallop < 0)[ FD ]
Line_60 $$ count2 = len2 - gallopLeft(a[cursor1], tmp, 0, len2, len2 - 1, c)-->Line_64 $$ len2 -= count2[ FD ]
Line_27 $$ int count2 = 0-->Line_34 $$ count2 = 0[ FD ]
Line_45 $$ do -->Line_48 $$ count1 = len1 - gallopRight(tmp[cursor2], a, base1, len1, len1 - 1, c)[ CD ]
Line_49 $$ if (count1 != 0) -->Line_52 $$ len1 -= count1[ CD ]
Line_61 $$ if (count2 != 0) -->Line_62 $$ dest -= count2[ CD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_80 $$ if (len2 == 1) [ FD ]
Line_45 $$ do -->Line_70 $$ a[dest--] = a[cursor1--][ CD ]
Line_51 $$ cursor1 -= count1-->Line_84 $$ cursor1 -= len1[ FD ]
Line_34 $$ count2 = 0-->Line_62 $$ dest -= count2[ FD ]
Line_9 $$ int cursor2 = len2 - 1-->Line_38 $$ a[dest--] = tmp[cursor2--][ FD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_71 $$ if (--len1 == 0)[ FD ]
Line_17 $$ dest -= len1-->Line_38 $$ a[dest--] = tmp[cursor2--][ FD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_94 $$ System.arraycopy(tmp, 0, a, dest - (len2 - 1), len2)[ FD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_5 $$ T[] a = this.a[ CD ]
Line_24 $$ int minGallop = this.minGallop-->Line_75 $$ if (minGallop < 0)[ FD ]
Line_9 $$ int cursor2 = len2 - 1-->Line_57 $$ a[dest--] = tmp[cursor2--][ FD ]
Line_64 $$ len2 -= count2-->Line_94 $$ System.arraycopy(tmp, 0, a, dest - (len2 - 1), len2)[ FD ]
Line_26 $$ int count1 = 0-->Line_48 $$ count1 = len1 - gallopRight(tmp[cursor2], a, base1, len1, len1 - 1, c)[ FD ]
Line_6 $$ T[] tmp = ensureCapacity(len2)-->Line_13 $$ System.arraycopy(tmp, 0, a, dest - (len2 - 1), len2)[ FD ]
Line_31 $$ if (c.compare(tmp[cursor2], a[cursor1]) < 0) -->Line_40 $$ count1 = 0[ CD ]
Line_6 $$ T[] tmp = ensureCapacity(len2)-->Line_94 $$ System.arraycopy(tmp, 0, a, dest - (len2 - 1), len2)[ FD ]
Line_87 $$ if (len2 == 0) -->Line_92 $$ if (DEBUG)[ CD ]
Line_18 $$ cursor1 -= len1-->Line_32 $$ a[dest--] = a[cursor1--][ FD ]
Line_31 $$ if (c.compare(tmp[cursor2], a[cursor1]) < 0) -->Line_32 $$ a[dest--] = a[cursor1--][ CD ]
Line_25 $$ while (true) -->Line_27 $$ int count2 = 0[ CD ]
Line_28 $$ do -->Line_31 $$ if (c.compare(tmp[cursor2], a[cursor1]) < 0) [ CD ]
Line_8 $$ int cursor1 = base1 + len1 - 1-->Line_32 $$ a[dest--] = a[cursor1--][ FD ]
Line_80 $$ if (len2 == 1) -->Line_87 $$ if (len2 == 0) [ CD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_24 $$ int minGallop = this.minGallop[ CD ]
Line_17 $$ dest -= len1-->Line_32 $$ a[dest--] = a[cursor1--][ FD ]
Line_52 $$ len1 -= count1-->Line_83 $$ dest -= len1[ FD ]
Line_40 $$ count1 = 0-->Line_52 $$ len1 -= count1[ FD ]
Line_10 $$ int dest = base2 + len2 - 1-->Line_17 $$ dest -= len1[ FD ]
Line_49 $$ if (count1 != 0) -->Line_50 $$ dest -= count1[ CD ]
Line_16 $$ if (len2 == 1) -->Line_20 $$ a[dest] = tmp[cursor2][ CD ]
Line_77 $$ minGallop += 2-->Line_75 $$ if (minGallop < 0)[ FD ]
Line_9 $$ int cursor2 = len2 - 1-->Line_63 $$ cursor2 -= count2[ FD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_66 $$ if (len2 <= 1)[ FD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_6 $$ T[] tmp = ensureCapacity(len2)[ FD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_52 $$ len1 -= count1[ FD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_87 $$ if (len2 == 0) [ FD ]
Line_16 $$ if (len2 == 1) -->Line_21 $$ return[ CD ]
Line_10 $$ int dest = base2 + len2 - 1-->Line_62 $$ dest -= count2[ FD ]
Line_50 $$ dest -= count1-->Line_57 $$ a[dest--] = tmp[cursor2--][ FD ]
Line_24 $$ int minGallop = this.minGallop-->Line_77 $$ minGallop += 2[ FD ]
Line_45 $$ do -->Line_58 $$ if (--len2 == 1)[ CD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_8 $$ int cursor1 = base1 + len1 - 1[ CD ]
Line_27 $$ int count2 = 0-->Line_39 $$ count2++[ FD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_64 $$ len2 -= count2[ FD ]
Line_80 $$ if (len2 == 1) -->Line_84 $$ cursor1 -= len1[ CD ]
Line_61 $$ if (count2 != 0) -->Line_66 $$ if (len2 <= 1)[ CD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_85 $$ System.arraycopy(a, cursor1 + 1, a, dest + 1, len1)[ FD ]
Line_62 $$ dest -= count2-->Line_83 $$ dest -= len1[ FD ]
Line_16 $$ if (len2 == 1) -->Line_18 $$ cursor1 -= len1[ CD ]
Line_50 $$ dest -= count1-->Line_70 $$ a[dest--] = a[cursor1--][ FD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_16 $$ if (len2 == 1) [ CD ]
Line_45 $$ do -->Line_73 $$ minGallop--[ CD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_60 $$ count2 = len2 - gallopLeft(a[cursor1], tmp, 0, len2, len2 - 1, c)[ FD ]
Line_10 $$ int dest = base2 + len2 - 1-->Line_70 $$ a[dest--] = a[cursor1--][ FD ]
Line_61 $$ if (count2 != 0) -->Line_65 $$ System.arraycopy(tmp, cursor2 + 1, a, dest + 1, count2)[ CD ]
Line_2 $$ private void mergeHi(int base1, int len1, int base2, int len2) -->Line_19 $$ System.arraycopy(a, cursor1 + 1, a, dest + 1, len1)[ FD ]
Line_49 $$ if (count1 != 0) -->Line_51 $$ cursor1 -= count1[ CD ]
Line_34 $$ count2 = 0-->Line_63 $$ cursor2 -= count2[ FD ]
