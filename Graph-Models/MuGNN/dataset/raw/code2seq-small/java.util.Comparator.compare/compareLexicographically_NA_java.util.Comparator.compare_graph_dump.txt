Line_3 $$ for (int i = 0; i < Math.min(o1.size(), o2.size()); i++) -->Line_4 $$ int result = comparator.compare(o1.get(i), o2.get(i))[ CD ]
Line_2 $$ public static <T> int compareLexicographically(@NotNull List<T> o1, @NotNull List<T> o2, @NotNull Comparator<T> comparator) -->Line_4 $$ int result = comparator.compare(o1.get(i), o2.get(i))[ FD ]
Line_3 $$ for (int i = 0; i < Math.min(o1.size(), o2.size()); i++) -->Line_4 $$ int result = comparator.compare(o1.get(i), o2.get(i))[ FD ]
Line_3 $$ for (int i = 0; i < Math.min(o1.size(), o2.size()); i++) -->Line_5 $$ if (result != 0) [ CD ]
Line_5 $$ if (result != 0) -->Line_6 $$ return result[ CD ]
Line_2 $$ public static <T> int compareLexicographically(@NotNull List<T> o1, @NotNull List<T> o2, @NotNull Comparator<T> comparator) -->Line_3 $$ for (int i = 0; i < Math.min(o1.size(), o2.size()); i++) [ CD ]
Line_4 $$ int result = comparator.compare(o1.get(i), o2.get(i))-->Line_5 $$ if (result != 0) [ FD ]
Line_2 $$ public static <T> int compareLexicographically(@NotNull List<T> o1, @NotNull List<T> o2, @NotNull Comparator<T> comparator) -->Line_9 $$ return o1.size() < o2.size() ? -1 : o1.size() == o2.size() ? 0 : 1[ FD ]
Line_2 $$ public static <T> int compareLexicographically(@NotNull List<T> o1, @NotNull List<T> o2, @NotNull Comparator<T> comparator) -->Line_3 $$ for (int i = 0; i < Math.min(o1.size(), o2.size()); i++) [ FD ]
Line_2 $$ public static <T> int compareLexicographically(@NotNull List<T> o1, @NotNull List<T> o2, @NotNull Comparator<T> comparator) -->Line_9 $$ return o1.size() < o2.size() ? -1 : o1.size() == o2.size() ? 0 : 1[ CD ]
