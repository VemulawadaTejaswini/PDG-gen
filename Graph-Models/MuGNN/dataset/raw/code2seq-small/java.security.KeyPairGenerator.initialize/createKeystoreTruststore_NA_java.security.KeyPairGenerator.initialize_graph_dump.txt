Line_5 $$ final KeyPair keyPair = keyPairGenerator.generateKeyPair()-->Line_20 $$ keystore.setKeyEntry(name, keyPair.getPrivate(), KEYSTORE_PASSWORD.toCharArray(), new java.security.cert.Certificate[] [ FD ]
Line_18 $$ final KeyStore keystore = KeyStore.getInstance("JKS")-->Line_20 $$ keystore.setKeyEntry(name, keyPair.getPrivate(), KEYSTORE_PASSWORD.toCharArray(), new java.security.cert.Certificate[] [ FD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_4 $$ keyPairGenerator.initialize(1024)[ CD ]
Line_6 $$ final X509V3CertificateGenerator v3CertGen = new X509V3CertificateGenerator()-->Line_13 $$ v3CertGen.setPublicKey(keyPair.getPublic())[ FD ]
Line_5 $$ final KeyPair keyPair = keyPairGenerator.generateKeyPair()-->Line_17 $$ X509Certificate certificate = v3CertGen.generate(keyPair.getPrivate(), sr)[ FD ]
Line_28 $$ final KeyStore truststore-->Line_30 $$ truststore = KeyStoreUtil.getKeyStore(truststoreFile, KEYSTORE_PASSWORD.toCharArray())[ FD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_14 $$ v3CertGen.setSignatureAlgorithm("MD5withRSA")[ CD ]
Line_6 $$ final X509V3CertificateGenerator v3CertGen = new X509V3CertificateGenerator()-->Line_11 $$ v3CertGen.setIssuerDN(dn)[ FD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_21 $$ if (keystoreFile == null) [ CD ]
Line_3 $$ final KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA")-->Line_4 $$ keyPairGenerator.initialize(1024)[ FD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_15 $$ final SecureRandom sr = new SecureRandom()[ CD ]
Line_32 $$ truststore = KeyStore.getInstance("JKS")-->Line_33 $$ truststore.load(null, null)[ FD ]
Line_28 $$ final KeyStore truststore-->Line_37 $$ truststore.store(tsOut, KEYSTORE_PASSWORD.toCharArray())[ FD ]
Line_6 $$ final X509V3CertificateGenerator v3CertGen = new X509V3CertificateGenerator()-->Line_14 $$ v3CertGen.setSignatureAlgorithm("MD5withRSA")[ FD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_11 $$ v3CertGen.setIssuerDN(dn)[ CD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_5 $$ final KeyPair keyPair = keyPairGenerator.generateKeyPair()[ CD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_29 $$ if (truststoreFile.exists()) [ FD ]
Line_36 $$ final OutputStream tsOut = new FileOutputStream(truststoreFile)-->Line_38 $$ tsOut.close()[ FD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_12 $$ v3CertGen.setSubjectDN(dn)[ CD ]
Line_6 $$ final X509V3CertificateGenerator v3CertGen = new X509V3CertificateGenerator()-->Line_17 $$ X509Certificate certificate = v3CertGen.generate(keyPair.getPrivate(), sr)[ FD ]
Line_28 $$ final KeyStore truststore-->Line_35 $$ truststore.setCertificateEntry(name, certificate)[ FD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_35 $$ truststore.setCertificateEntry(name, certificate)[ FD ]
Line_6 $$ final X509V3CertificateGenerator v3CertGen = new X509V3CertificateGenerator()-->Line_16 $$ v3CertGen.setSerialNumber(BigInteger.ONE)[ FD ]
Line_30 $$ truststore = KeyStoreUtil.getKeyStore(truststoreFile, KEYSTORE_PASSWORD.toCharArray())-->Line_35 $$ truststore.setCertificateEntry(name, certificate)[ FD ]
Line_27 $$ if (truststoreFile != null) -->Line_35 $$ truststore.setCertificateEntry(name, certificate)[ CD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_7 $$ final long now = System.currentTimeMillis()[ CD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_9 $$ v3CertGen.setNotAfter(new Date(now + 1000L * 60 * 60 * 24 * 365))[ CD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_19 $$ keystore.load(null, null)[ CD ]
Line_27 $$ if (truststoreFile != null) -->Line_36 $$ final OutputStream tsOut = new FileOutputStream(truststoreFile)[ CD ]
Line_32 $$ truststore = KeyStore.getInstance("JKS")-->Line_37 $$ truststore.store(tsOut, KEYSTORE_PASSWORD.toCharArray())[ FD ]
Line_24 $$ final OutputStream ksOut = new FileOutputStream(keystoreFile)-->Line_26 $$ ksOut.close()[ FD ]
Line_6 $$ final X509V3CertificateGenerator v3CertGen = new X509V3CertificateGenerator()-->Line_12 $$ v3CertGen.setSubjectDN(dn)[ FD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_17 $$ X509Certificate certificate = v3CertGen.generate(keyPair.getPrivate(), sr)[ CD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_25 $$ keystore.store(ksOut, KEYSTORE_PASSWORD.toCharArray())[ CD ]
Line_24 $$ final OutputStream ksOut = new FileOutputStream(keystoreFile)-->Line_25 $$ keystore.store(ksOut, KEYSTORE_PASSWORD.toCharArray())[ FD ]
Line_28 $$ final KeyStore truststore-->Line_32 $$ truststore = KeyStore.getInstance("JKS")[ FD ]
Line_32 $$ truststore = KeyStore.getInstance("JKS")-->Line_35 $$ truststore.setCertificateEntry(name, certificate)[ FD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_21 $$ if (keystoreFile == null) [ FD ]
Line_18 $$ final KeyStore keystore = KeyStore.getInstance("JKS")-->Line_25 $$ keystore.store(ksOut, KEYSTORE_PASSWORD.toCharArray())[ FD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_13 $$ v3CertGen.setPublicKey(keyPair.getPublic())[ CD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_3 $$ final KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA")[ CD ]
Line_27 $$ if (truststoreFile != null) -->Line_37 $$ truststore.store(tsOut, KEYSTORE_PASSWORD.toCharArray())[ CD ]
Line_15 $$ final SecureRandom sr = new SecureRandom()-->Line_17 $$ X509Certificate certificate = v3CertGen.generate(keyPair.getPrivate(), sr)[ FD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_16 $$ v3CertGen.setSerialNumber(BigInteger.ONE)[ CD ]
Line_27 $$ if (truststoreFile != null) -->Line_28 $$ final KeyStore truststore[ CD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_26 $$ ksOut.close()[ CD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_20 $$ keystore.setKeyEntry(name, keyPair.getPrivate(), KEYSTORE_PASSWORD.toCharArray(), new java.security.cert.Certificate[] [ FD ]
Line_28 $$ final KeyStore truststore-->Line_33 $$ truststore.load(null, null)[ FD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_27 $$ if (truststoreFile != null) [ FD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_24 $$ final OutputStream ksOut = new FileOutputStream(keystoreFile)[ CD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_18 $$ final KeyStore keystore = KeyStore.getInstance("JKS")[ CD ]
Line_18 $$ final KeyStore keystore = KeyStore.getInstance("JKS")-->Line_19 $$ keystore.load(null, null)[ FD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_30 $$ truststore = KeyStoreUtil.getKeyStore(truststoreFile, KEYSTORE_PASSWORD.toCharArray())[ FD ]
Line_30 $$ truststore = KeyStoreUtil.getKeyStore(truststoreFile, KEYSTORE_PASSWORD.toCharArray())-->Line_33 $$ truststore.load(null, null)[ FD ]
Line_36 $$ final OutputStream tsOut = new FileOutputStream(truststoreFile)-->Line_37 $$ truststore.store(tsOut, KEYSTORE_PASSWORD.toCharArray())[ FD ]
Line_29 $$ if (truststoreFile.exists()) -->Line_33 $$ truststore.load(null, null)[ CD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_22 $$ keystoreFile = getClientKeystoreFile(name)[ FD ]
Line_3 $$ final KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA")-->Line_5 $$ final KeyPair keyPair = keyPairGenerator.generateKeyPair()[ FD ]
Line_6 $$ final X509V3CertificateGenerator v3CertGen = new X509V3CertificateGenerator()-->Line_8 $$ v3CertGen.setNotBefore(new Date(now - 1000L * 60 * 60 * 24 * 30))[ FD ]
Line_10 $$ final X509Principal dn = new X509Principal("CN=" + name)-->Line_12 $$ v3CertGen.setSubjectDN(dn)[ FD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_20 $$ keystore.setKeyEntry(name, keyPair.getPrivate(), KEYSTORE_PASSWORD.toCharArray(), new java.security.cert.Certificate[] [ CD ]
Line_30 $$ truststore = KeyStoreUtil.getKeyStore(truststoreFile, KEYSTORE_PASSWORD.toCharArray())-->Line_32 $$ truststore = KeyStore.getInstance("JKS")[ FD ]
Line_30 $$ truststore = KeyStoreUtil.getKeyStore(truststoreFile, KEYSTORE_PASSWORD.toCharArray())-->Line_37 $$ truststore.store(tsOut, KEYSTORE_PASSWORD.toCharArray())[ FD ]
Line_27 $$ if (truststoreFile != null) -->Line_29 $$ if (truststoreFile.exists()) [ CD ]
Line_5 $$ final KeyPair keyPair = keyPairGenerator.generateKeyPair()-->Line_13 $$ v3CertGen.setPublicKey(keyPair.getPublic())[ FD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_10 $$ final X509Principal dn = new X509Principal("CN=" + name)[ CD ]
Line_17 $$ X509Certificate certificate = v3CertGen.generate(keyPair.getPrivate(), sr)-->Line_35 $$ truststore.setCertificateEntry(name, certificate)[ FD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_6 $$ final X509V3CertificateGenerator v3CertGen = new X509V3CertificateGenerator()[ CD ]
Line_29 $$ if (truststoreFile.exists()) -->Line_32 $$ truststore = KeyStore.getInstance("JKS")[ CD ]
Line_27 $$ if (truststoreFile != null) -->Line_38 $$ tsOut.close()[ CD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_8 $$ v3CertGen.setNotBefore(new Date(now - 1000L * 60 * 60 * 24 * 30))[ CD ]
Line_6 $$ final X509V3CertificateGenerator v3CertGen = new X509V3CertificateGenerator()-->Line_9 $$ v3CertGen.setNotAfter(new Date(now + 1000L * 60 * 60 * 24 * 365))[ FD ]
Line_29 $$ if (truststoreFile.exists()) -->Line_30 $$ truststore = KeyStoreUtil.getKeyStore(truststoreFile, KEYSTORE_PASSWORD.toCharArray())[ CD ]
Line_2 $$ private void createKeystoreTruststore(String name, File keystoreFile, File truststoreFile) throws IllegalStateException, IOException, GeneralSecurityException -->Line_27 $$ if (truststoreFile != null) [ CD ]
Line_10 $$ final X509Principal dn = new X509Principal("CN=" + name)-->Line_11 $$ v3CertGen.setIssuerDN(dn)[ FD ]
Line_21 $$ if (keystoreFile == null) -->Line_22 $$ keystoreFile = getClientKeystoreFile(name)[ CD ]
