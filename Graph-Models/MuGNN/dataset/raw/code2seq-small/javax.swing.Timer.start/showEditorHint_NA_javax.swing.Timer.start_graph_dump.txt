Line_2 $$ public void showEditorHint(@NotNull final LightweightHint hint, @NotNull Editor editor, @NotNull Point p, @HideFlags int flags, int timeout, boolean reviveOnEditorChange, HintHint hintInfo) -->Line_16 $$ doShowInGivenLocation(hint, editor, p, hintInfo, true)[ CD ]
Line_2 $$ public void showEditorHint(@NotNull final LightweightHint hint, @NotNull Editor editor, @NotNull Point p, @HideFlags int flags, int timeout, boolean reviveOnEditorChange, HintHint hintInfo) -->Line_16 $$ doShowInGivenLocation(hint, editor, p, hintInfo, true)[ FD ]
Line_2 $$ public void showEditorHint(@NotNull final LightweightHint hint, @NotNull Editor editor, @NotNull Point p, @HideFlags int flags, int timeout, boolean reviveOnEditorChange, HintHint hintInfo) -->Line_3 $$ LOG.assertTrue(SwingUtilities.isEventDispatchThread())[ CD ]
Line_2 $$ public void showEditorHint(@NotNull final LightweightHint hint, @NotNull Editor editor, @NotNull Point p, @HideFlags int flags, int timeout, boolean reviveOnEditorChange, HintHint hintInfo) -->Line_6 $$ if (editor != myLastEditor) [ FD ]
Line_2 $$ public void showEditorHint(@NotNull final LightweightHint hint, @NotNull Editor editor, @NotNull Point p, @HideFlags int flags, int timeout, boolean reviveOnEditorChange, HintHint hintInfo) -->Line_17 $$ ListenerUtil.addMouseListener(component, new MouseAdapter() [ CD ]
Line_2 $$ public void showEditorHint(@NotNull final LightweightHint hint, @NotNull Editor editor, @NotNull Point p, @HideFlags int flags, int timeout, boolean reviveOnEditorChange, HintHint hintInfo) -->Line_11 $$ if (!ApplicationManager.getApplication().isActive())[ CD ]
Line_2 $$ public void showEditorHint(@NotNull final LightweightHint hint, @NotNull Editor editor, @NotNull Point p, @HideFlags int flags, int timeout, boolean reviveOnEditorChange, HintHint hintInfo) -->Line_15 $$ Component component = hint.getComponent()[ CD ]
Line_2 $$ public void showEditorHint(@NotNull final LightweightHint hint, @NotNull Editor editor, @NotNull Point p, @HideFlags int flags, int timeout, boolean reviveOnEditorChange, HintHint hintInfo) -->Line_5 $$ hideHints(HIDE_BY_OTHER_HINT, false, false)[ CD ]
Line_2 $$ public void showEditorHint(@NotNull final LightweightHint hint, @NotNull Editor editor, @NotNull Point p, @HideFlags int flags, int timeout, boolean reviveOnEditorChange, HintHint hintInfo) -->Line_14 $$ getPublisher().hintShown(editor.getProject(), hint, flags)[ CD ]
Line_35 $$ if (timeout > 0) -->Line_36 $$ Timer timer = UIUtil.createNamedTimer("Hint timeout", timeout, new ActionListener() [ CD ]
Line_2 $$ public void showEditorHint(@NotNull final LightweightHint hint, @NotNull Editor editor, @NotNull Point p, @HideFlags int flags, int timeout, boolean reviveOnEditorChange, HintHint hintInfo) -->Line_22 $$ ListenerUtil.addFocusListener(component, new FocusAdapter() [ CD ]
Line_2 $$ public void showEditorHint(@NotNull final LightweightHint hint, @NotNull Editor editor, @NotNull Point p, @HideFlags int flags, int timeout, boolean reviveOnEditorChange, HintHint hintInfo) -->Line_15 $$ Component component = hint.getComponent()[ FD ]
Line_2 $$ public void showEditorHint(@NotNull final LightweightHint hint, @NotNull Editor editor, @NotNull Point p, @HideFlags int flags, int timeout, boolean reviveOnEditorChange, HintHint hintInfo) -->Line_13 $$ updateLastEditor(editor)[ FD ]
Line_11 $$ if (!ApplicationManager.getApplication().isActive())-->Line_12 $$ return[ CD ]
Line_15 $$ Component component = hint.getComponent()-->Line_22 $$ ListenerUtil.addFocusListener(component, new FocusAdapter() [ FD ]
Line_2 $$ public void showEditorHint(@NotNull final LightweightHint hint, @NotNull Editor editor, @NotNull Point p, @HideFlags int flags, int timeout, boolean reviveOnEditorChange, HintHint hintInfo) -->Line_34 $$ myHintsStack.add(new HintInfo(hint, flags, reviveOnEditorChange))[ CD ]
Line_6 $$ if (editor != myLastEditor) -->Line_7 $$ hideAllHints()[ CD ]
Line_22 $$ ListenerUtil.addFocusListener(component, new FocusAdapter() -->Line_24 $$ myHideAlarm.cancelAllRequests()[ CD ]
Line_2 $$ public void showEditorHint(@NotNull final LightweightHint hint, @NotNull Editor editor, @NotNull Point p, @HideFlags int flags, int timeout, boolean reviveOnEditorChange, HintHint hintInfo) -->Line_27 $$ if ((flags & HIDE_BY_MOUSEOVER) != 0) [ CD ]
Line_15 $$ Component component = hint.getComponent()-->Line_28 $$ ListenerUtil.addMouseMotionListener(component, new MouseMotionAdapter() [ FD ]
Line_2 $$ public void showEditorHint(@NotNull final LightweightHint hint, @NotNull Editor editor, @NotNull Point p, @HideFlags int flags, int timeout, boolean reviveOnEditorChange, HintHint hintInfo) -->Line_9 $$ if (!ApplicationManager.getApplication().isUnitTestMode() && !editor.getContentComponent().isShowing())[ CD ]
Line_35 $$ if (timeout > 0) -->Line_41 $$ timer.setRepeats(false)[ CD ]
Line_15 $$ Component component = hint.getComponent()-->Line_17 $$ ListenerUtil.addMouseListener(component, new MouseAdapter() [ FD ]
Line_27 $$ if ((flags & HIDE_BY_MOUSEOVER) != 0) -->Line_28 $$ ListenerUtil.addMouseMotionListener(component, new MouseMotionAdapter() [ CD ]
Line_2 $$ public void showEditorHint(@NotNull final LightweightHint hint, @NotNull Editor editor, @NotNull Point p, @HideFlags int flags, int timeout, boolean reviveOnEditorChange, HintHint hintInfo) -->Line_14 $$ getPublisher().hintShown(editor.getProject(), hint, flags)[ FD ]
Line_28 $$ ListenerUtil.addMouseMotionListener(component, new MouseMotionAdapter() -->Line_30 $$ hideHints(HIDE_BY_MOUSEOVER, true, false)[ CD ]
Line_35 $$ if (timeout > 0) -->Line_42 $$ timer.start()[ CD ]
Line_9 $$ if (!ApplicationManager.getApplication().isUnitTestMode() && !editor.getContentComponent().isShowing())-->Line_10 $$ return[ CD ]
Line_17 $$ ListenerUtil.addMouseListener(component, new MouseAdapter() -->Line_19 $$ myHideAlarm.cancelAllRequests()[ CD ]
Line_2 $$ public void showEditorHint(@NotNull final LightweightHint hint, @NotNull Editor editor, @NotNull Point p, @HideFlags int flags, int timeout, boolean reviveOnEditorChange, HintHint hintInfo) -->Line_4 $$ myHideAlarm.cancelAllRequests()[ CD ]
Line_2 $$ public void showEditorHint(@NotNull final LightweightHint hint, @NotNull Editor editor, @NotNull Point p, @HideFlags int flags, int timeout, boolean reviveOnEditorChange, HintHint hintInfo) -->Line_9 $$ if (!ApplicationManager.getApplication().isUnitTestMode() && !editor.getContentComponent().isShowing())[ FD ]
Line_2 $$ public void showEditorHint(@NotNull final LightweightHint hint, @NotNull Editor editor, @NotNull Point p, @HideFlags int flags, int timeout, boolean reviveOnEditorChange, HintHint hintInfo) -->Line_36 $$ Timer timer = UIUtil.createNamedTimer("Hint timeout", timeout, new ActionListener() [ FD ]
Line_2 $$ public void showEditorHint(@NotNull final LightweightHint hint, @NotNull Editor editor, @NotNull Point p, @HideFlags int flags, int timeout, boolean reviveOnEditorChange, HintHint hintInfo) -->Line_35 $$ if (timeout > 0) [ CD ]
Line_2 $$ public void showEditorHint(@NotNull final LightweightHint hint, @NotNull Editor editor, @NotNull Point p, @HideFlags int flags, int timeout, boolean reviveOnEditorChange, HintHint hintInfo) -->Line_13 $$ updateLastEditor(editor)[ CD ]
Line_2 $$ public void showEditorHint(@NotNull final LightweightHint hint, @NotNull Editor editor, @NotNull Point p, @HideFlags int flags, int timeout, boolean reviveOnEditorChange, HintHint hintInfo) -->Line_6 $$ if (editor != myLastEditor) [ CD ]
Line_2 $$ public void showEditorHint(@NotNull final LightweightHint hint, @NotNull Editor editor, @NotNull Point p, @HideFlags int flags, int timeout, boolean reviveOnEditorChange, HintHint hintInfo) -->Line_35 $$ if (timeout > 0) [ FD ]
Line_36 $$ Timer timer = UIUtil.createNamedTimer("Hint timeout", timeout, new ActionListener() -->Line_38 $$ hint.hide()[ CD ]
Line_2 $$ public void showEditorHint(@NotNull final LightweightHint hint, @NotNull Editor editor, @NotNull Point p, @HideFlags int flags, int timeout, boolean reviveOnEditorChange, HintHint hintInfo) -->Line_38 $$ hint.hide()[ FD ]
