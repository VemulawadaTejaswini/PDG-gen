Line_2 $$ private void notifyMessage(@NotNull AnActionEvent e, boolean next) -->Line_6 $$ Point point = new Point(myContentPanel.getWidth() / 2, next ? myContentPanel.getHeight() - JBUI.scale(40) : JBUI.scale(40))[ CD ]
Line_5 $$ final LightweightHint hint = new LightweightHint(HintUtil.createInformationLabel(message))-->Line_25 $$ HintManagerImpl.getInstanceImpl().showEditorHint(hint, editor, editorPoint, HintManager.HIDE_BY_ANY_KEY | HintManager.HIDE_BY_TEXT_CHANGE | HintManager.HIDE_BY_SCROLLING, 0, false, hintHint)[ FD ]
Line_2 $$ private void notifyMessage(@NotNull AnActionEvent e, boolean next) -->Line_9 $$ final HintHint hintHint = createNotifyHint(myContentPanel, point, next)[ FD ]
Line_2 $$ private void notifyMessage(@NotNull AnActionEvent e, boolean next) -->Line_16 $$ LineRange changeRange = e.getData(DiffDataKeys.CURRENT_CHANGE_RANGE)[ FD ]
Line_3 $$ Editor editor = e.getData(DiffDataKeys.CURRENT_EDITOR)-->Line_13 $$ JComponent header = editor.getHeaderComponent()[ FD ]
Line_3 $$ Editor editor = e.getData(DiffDataKeys.CURRENT_EDITOR)-->Line_25 $$ HintManagerImpl.getInstanceImpl().showEditorHint(hint, editor, editorPoint, HintManager.HIDE_BY_ANY_KEY | HintManager.HIDE_BY_TEXT_CHANGE | HintManager.HIDE_BY_SCROLLING, 0, false, hintHint)[ FD ]
Line_2 $$ private void notifyMessage(@NotNull AnActionEvent e, boolean next) -->Line_4 $$ String message = DiffUtil.createNotificationText(next ? "Press again to go to the next file" : "Press again to go to the previous file", "You can disable this feature in " + DiffUtil.getSettingsConfigurablePath())[ CD ]
Line_3 $$ Editor editor = e.getData(DiffDataKeys.CURRENT_EDITOR)-->Line_12 $$ int x = SwingUtilities.convertPoint(myContentPanel, point, editor.getComponent()).x[ FD ]
Line_13 $$ JComponent header = editor.getHeaderComponent()-->Line_14 $$ int shift = editor.getScrollingModel().getVerticalScrollOffset() - (header != null ? header.getHeight() : 0)[ FD ]
Line_15 $$ LogicalPosition position-->Line_20 $$ position = new LogicalPosition(next ? changeRange.end : changeRange.start, 0)[ FD ]
Line_7 $$ if (editor == null) -->Line_22 $$ int y = editor.logicalPositionToXY(position).y - shift[ CD ]
Line_15 $$ LogicalPosition position-->Line_22 $$ int y = editor.logicalPositionToXY(position).y - shift[ FD ]
Line_7 $$ if (editor == null) -->Line_25 $$ HintManagerImpl.getInstanceImpl().showEditorHint(hint, editor, editorPoint, HintManager.HIDE_BY_ANY_KEY | HintManager.HIDE_BY_TEXT_CHANGE | HintManager.HIDE_BY_SCROLLING, 0, false, hintHint)[ CD ]
Line_7 $$ if (editor == null) -->Line_14 $$ int shift = editor.getScrollingModel().getVerticalScrollOffset() - (header != null ? header.getHeight() : 0)[ CD ]
Line_2 $$ private void notifyMessage(@NotNull AnActionEvent e, boolean next) -->Line_24 $$ final HintHint hintHint = createNotifyHint(editor.getComponent(), editorPoint, !next)[ FD ]
Line_7 $$ if (editor == null) -->Line_17 $$ if (changeRange == null) [ CD ]
Line_7 $$ if (editor == null) -->Line_10 $$ hint.show(myContentPanel, point.x, point.y, owner instanceof JComponent ? (JComponent) owner : null, hintHint)[ CD ]
Line_7 $$ if (editor == null) -->Line_12 $$ int x = SwingUtilities.convertPoint(myContentPanel, point, editor.getComponent()).x[ CD ]
Line_3 $$ Editor editor = e.getData(DiffDataKeys.CURRENT_EDITOR)-->Line_18 $$ position = new LogicalPosition(editor.getCaretModel().getLogicalPosition().line + (next ? 1 : 0), 0)[ FD ]
Line_4 $$ String message = DiffUtil.createNotificationText(next ? "Press again to go to the next file" : "Press again to go to the previous file", "You can disable this feature in " + DiffUtil.getSettingsConfigurablePath())-->Line_5 $$ final LightweightHint hint = new LightweightHint(HintUtil.createInformationLabel(message))[ FD ]
Line_3 $$ Editor editor = e.getData(DiffDataKeys.CURRENT_EDITOR)-->Line_7 $$ if (editor == null) [ FD ]
Line_3 $$ Editor editor = e.getData(DiffDataKeys.CURRENT_EDITOR)-->Line_22 $$ int y = editor.logicalPositionToXY(position).y - shift[ FD ]
Line_3 $$ Editor editor = e.getData(DiffDataKeys.CURRENT_EDITOR)-->Line_24 $$ final HintHint hintHint = createNotifyHint(editor.getComponent(), editorPoint, !next)[ FD ]
Line_5 $$ final LightweightHint hint = new LightweightHint(HintUtil.createInformationLabel(message))-->Line_10 $$ hint.show(myContentPanel, point.x, point.y, owner instanceof JComponent ? (JComponent) owner : null, hintHint)[ FD ]
Line_3 $$ Editor editor = e.getData(DiffDataKeys.CURRENT_EDITOR)-->Line_14 $$ int shift = editor.getScrollingModel().getVerticalScrollOffset() - (header != null ? header.getHeight() : 0)[ FD ]
Line_7 $$ if (editor == null) -->Line_24 $$ final HintHint hintHint = createNotifyHint(editor.getComponent(), editorPoint, !next)[ CD ]
Line_7 $$ if (editor == null) -->Line_23 $$ Point editorPoint = new Point(x, y)[ CD ]
Line_16 $$ LineRange changeRange = e.getData(DiffDataKeys.CURRENT_CHANGE_RANGE)-->Line_17 $$ if (changeRange == null) [ FD ]
Line_17 $$ if (changeRange == null) -->Line_20 $$ position = new LogicalPosition(next ? changeRange.end : changeRange.start, 0)[ CD ]
Line_18 $$ position = new LogicalPosition(editor.getCaretModel().getLogicalPosition().line + (next ? 1 : 0), 0)-->Line_20 $$ position = new LogicalPosition(next ? changeRange.end : changeRange.start, 0)[ FD ]
Line_2 $$ private void notifyMessage(@NotNull AnActionEvent e, boolean next) -->Line_3 $$ Editor editor = e.getData(DiffDataKeys.CURRENT_EDITOR)[ CD ]
Line_2 $$ private void notifyMessage(@NotNull AnActionEvent e, boolean next) -->Line_5 $$ final LightweightHint hint = new LightweightHint(HintUtil.createInformationLabel(message))[ CD ]
Line_15 $$ LogicalPosition position-->Line_18 $$ position = new LogicalPosition(editor.getCaretModel().getLogicalPosition().line + (next ? 1 : 0), 0)[ FD ]
Line_23 $$ Point editorPoint = new Point(x, y)-->Line_25 $$ HintManagerImpl.getInstanceImpl().showEditorHint(hint, editor, editorPoint, HintManager.HIDE_BY_ANY_KEY | HintManager.HIDE_BY_TEXT_CHANGE | HintManager.HIDE_BY_SCROLLING, 0, false, hintHint)[ FD ]
Line_7 $$ if (editor == null) -->Line_9 $$ final HintHint hintHint = createNotifyHint(myContentPanel, point, next)[ CD ]
Line_7 $$ if (editor == null) -->Line_13 $$ JComponent header = editor.getHeaderComponent()[ CD ]
Line_20 $$ position = new LogicalPosition(next ? changeRange.end : changeRange.start, 0)-->Line_22 $$ int y = editor.logicalPositionToXY(position).y - shift[ FD ]
Line_23 $$ Point editorPoint = new Point(x, y)-->Line_24 $$ final HintHint hintHint = createNotifyHint(editor.getComponent(), editorPoint, !next)[ FD ]
Line_6 $$ Point point = new Point(myContentPanel.getWidth() / 2, next ? myContentPanel.getHeight() - JBUI.scale(40) : JBUI.scale(40))-->Line_9 $$ final HintHint hintHint = createNotifyHint(myContentPanel, point, next)[ FD ]
Line_2 $$ private void notifyMessage(@NotNull AnActionEvent e, boolean next) -->Line_3 $$ Editor editor = e.getData(DiffDataKeys.CURRENT_EDITOR)[ FD ]
Line_2 $$ private void notifyMessage(@NotNull AnActionEvent e, boolean next) -->Line_7 $$ if (editor == null) [ CD ]
Line_17 $$ if (changeRange == null) -->Line_18 $$ position = new LogicalPosition(editor.getCaretModel().getLogicalPosition().line + (next ? 1 : 0), 0)[ CD ]
Line_7 $$ if (editor == null) -->Line_8 $$ final Component owner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()[ CD ]
Line_9 $$ final HintHint hintHint = createNotifyHint(myContentPanel, point, next)-->Line_25 $$ HintManagerImpl.getInstanceImpl().showEditorHint(hint, editor, editorPoint, HintManager.HIDE_BY_ANY_KEY | HintManager.HIDE_BY_TEXT_CHANGE | HintManager.HIDE_BY_SCROLLING, 0, false, hintHint)[ FD ]
Line_7 $$ if (editor == null) -->Line_16 $$ LineRange changeRange = e.getData(DiffDataKeys.CURRENT_CHANGE_RANGE)[ CD ]
Line_9 $$ final HintHint hintHint = createNotifyHint(myContentPanel, point, next)-->Line_10 $$ hint.show(myContentPanel, point.x, point.y, owner instanceof JComponent ? (JComponent) owner : null, hintHint)[ FD ]
Line_6 $$ Point point = new Point(myContentPanel.getWidth() / 2, next ? myContentPanel.getHeight() - JBUI.scale(40) : JBUI.scale(40))-->Line_12 $$ int x = SwingUtilities.convertPoint(myContentPanel, point, editor.getComponent()).x[ FD ]
Line_18 $$ position = new LogicalPosition(editor.getCaretModel().getLogicalPosition().line + (next ? 1 : 0), 0)-->Line_22 $$ int y = editor.logicalPositionToXY(position).y - shift[ FD ]
Line_7 $$ if (editor == null) -->Line_15 $$ LogicalPosition position[ CD ]
