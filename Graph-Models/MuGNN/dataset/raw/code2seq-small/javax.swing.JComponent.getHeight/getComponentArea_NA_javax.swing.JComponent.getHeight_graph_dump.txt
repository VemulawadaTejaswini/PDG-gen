Line_2 $$ private Area getComponentArea(final JComponent surfaceComponent, final JComponent lightComponent, int offset) -->Line_17 $$ vInset += offset[ CD ]
Line_2 $$ private Area getComponentArea(final JComponent surfaceComponent, final JComponent lightComponent, int offset) -->Line_20 $$ int width = lightComponent.getWidth() + hInset * 2 - insetsToIgnore.right - insetsToIgnore.left[ FD ]
Line_3 $$ if (!lightComponent.isShowing())-->Line_4 $$ return null[ CD ]
Line_2 $$ private Area getComponentArea(final JComponent surfaceComponent, final JComponent lightComponent, int offset) -->Line_20 $$ int width = lightComponent.getWidth() + hInset * 2 - insetsToIgnore.right - insetsToIgnore.left[ CD ]
Line_2 $$ private Area getComponentArea(final JComponent surfaceComponent, final JComponent lightComponent, int offset) -->Line_11 $$ if ((insetsToIgnore == null || (UIUtil.isUnderAquaLookAndFeel() && lightComponent instanceof JButton)) || isWithBorder) [ CD ]
Line_2 $$ private Area getComponentArea(final JComponent surfaceComponent, final JComponent lightComponent, int offset) -->Line_22 $$ return new Area(new RoundRectangle2D.Double(xCoord, yCoord, width, height, Math.min(height, 30), Math.min(height, 30)))[ CD ]
Line_2 $$ private Area getComponentArea(final JComponent surfaceComponent, final JComponent lightComponent, int offset) -->Line_5 $$ final Point panelPoint = SwingUtilities.convertPoint(lightComponent, new Point(0, 0), surfaceComponent)[ CD ]
Line_10 $$ final boolean isLabelFromTabbedPane = Boolean.TRUE.equals(lightComponent.getClientProperty(JBTabbedPane.LABEL_FROM_TABBED_PANE))-->Line_14 $$ int hInset = getComponentHInset(isWithBorder, isLabelFromTabbedPane)[ FD ]
Line_2 $$ private Area getComponentArea(final JComponent surfaceComponent, final JComponent lightComponent, int offset) -->Line_9 $$ final boolean isWithBorder = Boolean.TRUE.equals(lightComponent.getClientProperty(SearchUtil.HIGHLIGHT_WITH_BORDER))[ FD ]
Line_2 $$ private Area getComponentArea(final JComponent surfaceComponent, final JComponent lightComponent, int offset) -->Line_16 $$ hInset += offset[ CD ]
Line_2 $$ private Area getComponentArea(final JComponent surfaceComponent, final JComponent lightComponent, int offset) -->Line_8 $$ Insets insetsToIgnore = lightComponent.getInsets()[ FD ]
Line_9 $$ final boolean isWithBorder = Boolean.TRUE.equals(lightComponent.getClientProperty(SearchUtil.HIGHLIGHT_WITH_BORDER))-->Line_15 $$ int vInset = getComponentVInset(isWithBorder, isLabelFromTabbedPane)[ FD ]
Line_2 $$ private Area getComponentArea(final JComponent surfaceComponent, final JComponent lightComponent, int offset) -->Line_8 $$ Insets insetsToIgnore = lightComponent.getInsets()[ CD ]
Line_11 $$ if ((insetsToIgnore == null || (UIUtil.isUnderAquaLookAndFeel() && lightComponent instanceof JButton)) || isWithBorder) -->Line_12 $$ insetsToIgnore = EMPTY_INSETS[ CD ]
Line_14 $$ int hInset = getComponentHInset(isWithBorder, isLabelFromTabbedPane)-->Line_16 $$ hInset += offset[ FD ]
Line_2 $$ private Area getComponentArea(final JComponent surfaceComponent, final JComponent lightComponent, int offset) -->Line_18 $$ int xCoord = x - hInset + insetsToIgnore.left[ CD ]
Line_2 $$ private Area getComponentArea(final JComponent surfaceComponent, final JComponent lightComponent, int offset) -->Line_16 $$ hInset += offset[ FD ]
Line_2 $$ private Area getComponentArea(final JComponent surfaceComponent, final JComponent lightComponent, int offset) -->Line_10 $$ final boolean isLabelFromTabbedPane = Boolean.TRUE.equals(lightComponent.getClientProperty(JBTabbedPane.LABEL_FROM_TABBED_PANE))[ FD ]
Line_15 $$ int vInset = getComponentVInset(isWithBorder, isLabelFromTabbedPane)-->Line_17 $$ vInset += offset[ FD ]
Line_2 $$ private Area getComponentArea(final JComponent surfaceComponent, final JComponent lightComponent, int offset) -->Line_19 $$ int yCoord = y - vInset + insetsToIgnore.top[ CD ]
Line_2 $$ private Area getComponentArea(final JComponent surfaceComponent, final JComponent lightComponent, int offset) -->Line_17 $$ vInset += offset[ FD ]
Line_9 $$ final boolean isWithBorder = Boolean.TRUE.equals(lightComponent.getClientProperty(SearchUtil.HIGHLIGHT_WITH_BORDER))-->Line_14 $$ int hInset = getComponentHInset(isWithBorder, isLabelFromTabbedPane)[ FD ]
Line_2 $$ private Area getComponentArea(final JComponent surfaceComponent, final JComponent lightComponent, int offset) -->Line_3 $$ if (!lightComponent.isShowing())[ CD ]
Line_2 $$ private Area getComponentArea(final JComponent surfaceComponent, final JComponent lightComponent, int offset) -->Line_6 $$ final int x = panelPoint.x[ CD ]
Line_8 $$ Insets insetsToIgnore = lightComponent.getInsets()-->Line_12 $$ insetsToIgnore = EMPTY_INSETS[ FD ]
Line_2 $$ private Area getComponentArea(final JComponent surfaceComponent, final JComponent lightComponent, int offset) -->Line_14 $$ int hInset = getComponentHInset(isWithBorder, isLabelFromTabbedPane)[ CD ]
Line_21 $$ int height = lightComponent.getHeight() + vInset * 2 - insetsToIgnore.top - insetsToIgnore.bottom-->Line_22 $$ return new Area(new RoundRectangle2D.Double(xCoord, yCoord, width, height, Math.min(height, 30), Math.min(height, 30)))[ FD ]
Line_2 $$ private Area getComponentArea(final JComponent surfaceComponent, final JComponent lightComponent, int offset) -->Line_7 $$ final int y = panelPoint.y[ CD ]
Line_2 $$ private Area getComponentArea(final JComponent surfaceComponent, final JComponent lightComponent, int offset) -->Line_9 $$ final boolean isWithBorder = Boolean.TRUE.equals(lightComponent.getClientProperty(SearchUtil.HIGHLIGHT_WITH_BORDER))[ CD ]
Line_2 $$ private Area getComponentArea(final JComponent surfaceComponent, final JComponent lightComponent, int offset) -->Line_5 $$ final Point panelPoint = SwingUtilities.convertPoint(lightComponent, new Point(0, 0), surfaceComponent)[ FD ]
Line_2 $$ private Area getComponentArea(final JComponent surfaceComponent, final JComponent lightComponent, int offset) -->Line_3 $$ if (!lightComponent.isShowing())[ FD ]
Line_2 $$ private Area getComponentArea(final JComponent surfaceComponent, final JComponent lightComponent, int offset) -->Line_21 $$ int height = lightComponent.getHeight() + vInset * 2 - insetsToIgnore.top - insetsToIgnore.bottom[ CD ]
Line_2 $$ private Area getComponentArea(final JComponent surfaceComponent, final JComponent lightComponent, int offset) -->Line_21 $$ int height = lightComponent.getHeight() + vInset * 2 - insetsToIgnore.top - insetsToIgnore.bottom[ FD ]
Line_10 $$ final boolean isLabelFromTabbedPane = Boolean.TRUE.equals(lightComponent.getClientProperty(JBTabbedPane.LABEL_FROM_TABBED_PANE))-->Line_15 $$ int vInset = getComponentVInset(isWithBorder, isLabelFromTabbedPane)[ FD ]
Line_9 $$ final boolean isWithBorder = Boolean.TRUE.equals(lightComponent.getClientProperty(SearchUtil.HIGHLIGHT_WITH_BORDER))-->Line_11 $$ if ((insetsToIgnore == null || (UIUtil.isUnderAquaLookAndFeel() && lightComponent instanceof JButton)) || isWithBorder) [ FD ]
Line_2 $$ private Area getComponentArea(final JComponent surfaceComponent, final JComponent lightComponent, int offset) -->Line_10 $$ final boolean isLabelFromTabbedPane = Boolean.TRUE.equals(lightComponent.getClientProperty(JBTabbedPane.LABEL_FROM_TABBED_PANE))[ CD ]
Line_2 $$ private Area getComponentArea(final JComponent surfaceComponent, final JComponent lightComponent, int offset) -->Line_15 $$ int vInset = getComponentVInset(isWithBorder, isLabelFromTabbedPane)[ CD ]
