Line_4 $$ final JTextField field1 = new JTextField()-->Line_6 $$ field1.setPreferredSize(new Dimension(20, 10))[ FD ]
Line_7 $$ final JTextField field2 = new JTextField()-->Line_15 $$ converter.addComponent(field2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_WANT_GROW | GridConstraints.SIZEPOLICY_CAN_SHRINK, null, null, null, 0))[ FD ]
Line_10 $$ final JTextField field3 = new JTextField()-->Line_11 $$ field3.setMinimumSize(new Dimension(20, 70))[ FD ]
Line_3 $$ final JPanel panel = new JPanel(new GridBagLayout())-->Line_20 $$ final Dimension preferredSize = panel.getPreferredSize()[ FD ]
Line_2 $$ public void testEqualSizeCells2() -->Line_13 $$ GridBagConverter converter = new GridBagConverter(new Insets(0, 0, 0, 0), 0, 7, false, true)[ CD ]
Line_3 $$ final JPanel panel = new JPanel(new GridBagLayout())-->Line_17 $$ applyConversionResults(panel, converter)[ FD ]
Line_2 $$ public void testEqualSizeCells2() -->Line_9 $$ field2.setPreferredSize(new Dimension(20, 50))[ CD ]
Line_2 $$ public void testEqualSizeCells2() -->Line_11 $$ field3.setMinimumSize(new Dimension(20, 70))[ CD ]
Line_3 $$ final JPanel panel = new JPanel(new GridBagLayout())-->Line_22 $$ panel.setSize(panel.getPreferredSize())[ FD ]
Line_2 $$ public void testEqualSizeCells2() -->Line_22 $$ panel.setSize(panel.getPreferredSize())[ CD ]
Line_2 $$ public void testEqualSizeCells2() -->Line_19 $$ assertEquals(70 + 7 + 70 + 7 + 70, minimumSize.height)[ CD ]
Line_10 $$ final JTextField field3 = new JTextField()-->Line_12 $$ field3.setPreferredSize(new Dimension(20, 100))[ FD ]
Line_2 $$ public void testEqualSizeCells2() -->Line_10 $$ final JTextField field3 = new JTextField()[ CD ]
Line_2 $$ public void testEqualSizeCells2() -->Line_17 $$ applyConversionResults(panel, converter)[ CD ]
Line_2 $$ public void testEqualSizeCells2() -->Line_20 $$ final Dimension preferredSize = panel.getPreferredSize()[ CD ]
Line_13 $$ GridBagConverter converter = new GridBagConverter(new Insets(0, 0, 0, 0), 0, 7, false, true)-->Line_17 $$ applyConversionResults(panel, converter)[ FD ]
Line_4 $$ final JTextField field1 = new JTextField()-->Line_24 $$ assertEquals(100, field1.getHeight())[ FD ]
Line_2 $$ public void testEqualSizeCells2() -->Line_23 $$ panel.doLayout()[ CD ]
Line_13 $$ GridBagConverter converter = new GridBagConverter(new Insets(0, 0, 0, 0), 0, 7, false, true)-->Line_15 $$ converter.addComponent(field2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_WANT_GROW | GridConstraints.SIZEPOLICY_CAN_SHRINK, null, null, null, 0))[ FD ]
Line_2 $$ public void testEqualSizeCells2() -->Line_3 $$ final JPanel panel = new JPanel(new GridBagLayout())[ CD ]
Line_2 $$ public void testEqualSizeCells2() -->Line_7 $$ final JTextField field2 = new JTextField()[ CD ]
Line_2 $$ public void testEqualSizeCells2() -->Line_14 $$ converter.addComponent(field1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_WANT_GROW | GridConstraints.SIZEPOLICY_CAN_SHRINK, null, null, null, 0))[ CD ]
Line_2 $$ public void testEqualSizeCells2() -->Line_4 $$ final JTextField field1 = new JTextField()[ CD ]
Line_2 $$ public void testEqualSizeCells2() -->Line_6 $$ field1.setPreferredSize(new Dimension(20, 10))[ CD ]
Line_7 $$ final JTextField field2 = new JTextField()-->Line_9 $$ field2.setPreferredSize(new Dimension(20, 50))[ FD ]
Line_2 $$ public void testEqualSizeCells2() -->Line_15 $$ converter.addComponent(field2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_WANT_GROW | GridConstraints.SIZEPOLICY_CAN_SHRINK, null, null, null, 0))[ CD ]
Line_3 $$ final JPanel panel = new JPanel(new GridBagLayout())-->Line_23 $$ panel.doLayout()[ FD ]
Line_2 $$ public void testEqualSizeCells2() -->Line_8 $$ field2.setMinimumSize(new Dimension(20, 25))[ CD ]
Line_13 $$ GridBagConverter converter = new GridBagConverter(new Insets(0, 0, 0, 0), 0, 7, false, true)-->Line_14 $$ converter.addComponent(field1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_WANT_GROW | GridConstraints.SIZEPOLICY_CAN_SHRINK, null, null, null, 0))[ FD ]
Line_2 $$ public void testEqualSizeCells2() -->Line_18 $$ final Dimension minimumSize = panel.getMinimumSize()[ CD ]
Line_3 $$ final JPanel panel = new JPanel(new GridBagLayout())-->Line_18 $$ final Dimension minimumSize = panel.getMinimumSize()[ FD ]
Line_10 $$ final JTextField field3 = new JTextField()-->Line_16 $$ converter.addComponent(field3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_WANT_GROW | GridConstraints.SIZEPOLICY_CAN_SHRINK, null, null, null, 0))[ FD ]
Line_4 $$ final JTextField field1 = new JTextField()-->Line_5 $$ field1.setMinimumSize(new Dimension(20, 5))[ FD ]
Line_2 $$ public void testEqualSizeCells2() -->Line_16 $$ converter.addComponent(field3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_WANT_GROW | GridConstraints.SIZEPOLICY_CAN_SHRINK, null, null, null, 0))[ CD ]
Line_2 $$ public void testEqualSizeCells2() -->Line_26 $$ assertEquals(100, field3.getHeight())[ CD ]
Line_2 $$ public void testEqualSizeCells2() -->Line_25 $$ assertEquals(100, field2.getHeight())[ CD ]
Line_2 $$ public void testEqualSizeCells2() -->Line_24 $$ assertEquals(100, field1.getHeight())[ CD ]
Line_7 $$ final JTextField field2 = new JTextField()-->Line_8 $$ field2.setMinimumSize(new Dimension(20, 25))[ FD ]
Line_13 $$ GridBagConverter converter = new GridBagConverter(new Insets(0, 0, 0, 0), 0, 7, false, true)-->Line_16 $$ converter.addComponent(field3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_WANT_GROW | GridConstraints.SIZEPOLICY_CAN_SHRINK, null, null, null, 0))[ FD ]
Line_10 $$ final JTextField field3 = new JTextField()-->Line_26 $$ assertEquals(100, field3.getHeight())[ FD ]
Line_2 $$ public void testEqualSizeCells2() -->Line_21 $$ assertEquals(100 + 7 + 100 + 7 + 100, preferredSize.height)[ CD ]
Line_7 $$ final JTextField field2 = new JTextField()-->Line_25 $$ assertEquals(100, field2.getHeight())[ FD ]
Line_2 $$ public void testEqualSizeCells2() -->Line_12 $$ field3.setPreferredSize(new Dimension(20, 100))[ CD ]
Line_2 $$ public void testEqualSizeCells2() -->Line_5 $$ field1.setMinimumSize(new Dimension(20, 5))[ CD ]
Line_4 $$ final JTextField field1 = new JTextField()-->Line_14 $$ converter.addComponent(field1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_WANT_GROW | GridConstraints.SIZEPOLICY_CAN_SHRINK, null, null, null, 0))[ FD ]
