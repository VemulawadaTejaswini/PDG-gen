Line_14 $$ Graphics2D g2 = (Graphics2D) image.getGraphics()-->Line_16 $$ label.paint(g2)[ FD ]
Line_2 $$ public Pair<Image, Point> createDraggedImage(DnDAction action, Point dragOrigin) -->Line_9 $$ label.setForeground(myTree.getForeground())[ CD ]
Line_13 $$ final BufferedImage image = UIUtil.createImage(label.getWidth(), label.getHeight(), BufferedImage.TYPE_INT_ARGB)-->Line_14 $$ Graphics2D g2 = (Graphics2D) image.getGraphics()[ FD ]
Line_7 $$ final JLabel label = new JLabel(String.format("%s item%s", count, count == 1 ? "" : "s"))-->Line_10 $$ label.setBackground(myTree.getBackground())[ FD ]
Line_2 $$ public Pair<Image, Point> createDraggedImage(DnDAction action, Point dragOrigin) -->Line_13 $$ final BufferedImage image = UIUtil.createImage(label.getWidth(), label.getHeight(), BufferedImage.TYPE_INT_ARGB)[ CD ]
Line_2 $$ public Pair<Image, Point> createDraggedImage(DnDAction action, Point dragOrigin) -->Line_18 $$ return new Pair<Image, Point>(image, new Point(-image.getWidth(null), -image.getHeight(null)))[ CD ]
Line_14 $$ Graphics2D g2 = (Graphics2D) image.getGraphics()-->Line_15 $$ g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.7f))[ FD ]
Line_4 $$ if (paths == null)-->Line_5 $$ return null[ CD ]
Line_3 $$ final TreePath[] paths = getSelectionPaths()-->Line_4 $$ if (paths == null)[ FD ]
Line_7 $$ final JLabel label = new JLabel(String.format("%s item%s", count, count == 1 ? "" : "s"))-->Line_12 $$ label.setSize(label.getPreferredSize())[ FD ]
Line_2 $$ public Pair<Image, Point> createDraggedImage(DnDAction action, Point dragOrigin) -->Line_4 $$ if (paths == null)[ CD ]
Line_2 $$ public Pair<Image, Point> createDraggedImage(DnDAction action, Point dragOrigin) -->Line_15 $$ g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.7f))[ CD ]
Line_2 $$ public Pair<Image, Point> createDraggedImage(DnDAction action, Point dragOrigin) -->Line_8 $$ label.setOpaque(true)[ CD ]
Line_2 $$ public Pair<Image, Point> createDraggedImage(DnDAction action, Point dragOrigin) -->Line_17 $$ g2.dispose()[ CD ]
Line_7 $$ final JLabel label = new JLabel(String.format("%s item%s", count, count == 1 ? "" : "s"))-->Line_8 $$ label.setOpaque(true)[ FD ]
Line_2 $$ public Pair<Image, Point> createDraggedImage(DnDAction action, Point dragOrigin) -->Line_11 $$ label.setFont(myTree.getFont())[ CD ]
Line_7 $$ final JLabel label = new JLabel(String.format("%s item%s", count, count == 1 ? "" : "s"))-->Line_16 $$ label.paint(g2)[ FD ]
Line_2 $$ public Pair<Image, Point> createDraggedImage(DnDAction action, Point dragOrigin) -->Line_10 $$ label.setBackground(myTree.getBackground())[ CD ]
Line_7 $$ final JLabel label = new JLabel(String.format("%s item%s", count, count == 1 ? "" : "s"))-->Line_11 $$ label.setFont(myTree.getFont())[ FD ]
Line_2 $$ public Pair<Image, Point> createDraggedImage(DnDAction action, Point dragOrigin) -->Line_3 $$ final TreePath[] paths = getSelectionPaths()[ CD ]
Line_2 $$ public Pair<Image, Point> createDraggedImage(DnDAction action, Point dragOrigin) -->Line_16 $$ label.paint(g2)[ CD ]
Line_13 $$ final BufferedImage image = UIUtil.createImage(label.getWidth(), label.getHeight(), BufferedImage.TYPE_INT_ARGB)-->Line_18 $$ return new Pair<Image, Point>(image, new Point(-image.getWidth(null), -image.getHeight(null)))[ FD ]
Line_2 $$ public Pair<Image, Point> createDraggedImage(DnDAction action, Point dragOrigin) -->Line_12 $$ label.setSize(label.getPreferredSize())[ CD ]
Line_7 $$ final JLabel label = new JLabel(String.format("%s item%s", count, count == 1 ? "" : "s"))-->Line_9 $$ label.setForeground(myTree.getForeground())[ FD ]
Line_6 $$ final int count = paths.length-->Line_7 $$ final JLabel label = new JLabel(String.format("%s item%s", count, count == 1 ? "" : "s"))[ FD ]
Line_2 $$ public Pair<Image, Point> createDraggedImage(DnDAction action, Point dragOrigin) -->Line_6 $$ final int count = paths.length[ CD ]
Line_7 $$ final JLabel label = new JLabel(String.format("%s item%s", count, count == 1 ? "" : "s"))-->Line_13 $$ final BufferedImage image = UIUtil.createImage(label.getWidth(), label.getHeight(), BufferedImage.TYPE_INT_ARGB)[ FD ]
Line_2 $$ public Pair<Image, Point> createDraggedImage(DnDAction action, Point dragOrigin) -->Line_7 $$ final JLabel label = new JLabel(String.format("%s item%s", count, count == 1 ? "" : "s"))[ CD ]
Line_14 $$ Graphics2D g2 = (Graphics2D) image.getGraphics()-->Line_17 $$ g2.dispose()[ FD ]
Line_2 $$ public Pair<Image, Point> createDraggedImage(DnDAction action, Point dragOrigin) -->Line_14 $$ Graphics2D g2 = (Graphics2D) image.getGraphics()[ CD ]
