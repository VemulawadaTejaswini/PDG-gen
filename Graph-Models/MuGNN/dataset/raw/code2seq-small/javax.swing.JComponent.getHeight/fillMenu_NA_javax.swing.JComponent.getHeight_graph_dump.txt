Line_43 $$ if (action instanceof ActionGroup && !(((ActionGroup) action).canBePerformed(context) && !hasVisibleChildren((ActionGroup) action, presentationFactory, context, place))) -->Line_45 $$ component.add(menu)[ CD ]
Line_48 $$ final ActionMenuItem each = new ActionMenuItem(action, presentationFactory.getPresentation(action), place, context, enableMnemonics, !fixMacScreenMenu, checked)-->Line_50 $$ children.add(each)[ FD ]
Line_44 $$ ActionMenu menu = new ActionMenu(context, place, (ActionGroup) action, presentationFactory, enableMnemonics, false)-->Line_45 $$ component.add(menu)[ FD ]
Line_3 $$ final ActionCallback menuBuilt = new ActionCallback()-->Line_72 $$ menuBuilt.doWhenDone(new Runnable() [ FD ]
Line_14 $$ component.add(new JPopupMenu.Separator() -->Line_28 $$ if (UIUtil.isUnderWindowsClassicLookAndFeel() || UIUtil.isUnderDarcula() || UIUtil.isUnderWindowsLookAndFeel()) [ CD ]
Line_14 $$ component.add(new JPopupMenu.Separator() -->Line_39 $$ return myMenu != null ? myMenu.getPreferredSize() : super.getPreferredSize()[ CD ]
Line_23 $$ if (myMenu != null) -->Line_24 $$ myMenu.setBounds(getBounds())[ CD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_14 $$ component.add(new JPopupMenu.Separator() [ FD ]
Line_14 $$ component.add(new JPopupMenu.Separator() -->Line_19 $$ return fix ? new Insets(2, insets.left, 3, insets.right) : insets[ CD ]
Line_77 $$ IdeFocusManager.getInstance(null).doWhenFocusSettlesDown(new Runnable() -->Line_81 $$ DataContext context = DataManager.getInstance().getDataContext()[ CD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_5 $$ final ArrayList<AnAction> list = new ArrayList<AnAction>()[ CD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_49 $$ component.add(each)[ FD ]
Line_84 $$ if (each instanceof ActionMenuItem) -->Line_86 $$ if (each instanceof ActionMenu) [ CD ]
Line_86 $$ if (each instanceof ActionMenu) -->Line_87 $$ ((ActionMenu) each).updateContext(context)[ CD ]
Line_12 $$ final String text = ((Separator) action).getText()-->Line_14 $$ component.add(new JPopupMenu.Separator() [ FD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_87 $$ ((ActionMenu) each).updateContext(context)[ FD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_48 $$ final ActionMenuItem each = new ActionMenuItem(action, presentationFactory.getPresentation(action), place, context, enableMnemonics, !fixMacScreenMenu, checked)[ FD ]
Line_3 $$ final ActionCallback menuBuilt = new ActionCallback()-->Line_66 $$ menuBuilt.setDone()[ FD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_43 $$ if (action instanceof ActionGroup && !(((ActionGroup) action).canBePerformed(context) && !hasVisibleChildren((ActionGroup) action, presentationFactory, context, place))) [ FD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_6 $$ expandActionGroup(group, list, presentationFactory, context, place, ActionManager.getInstance())[ CD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_55 $$ component.add(each)[ FD ]
Line_9 $$ for (int i = 0, size = list.size(); i < size; i++) -->Line_11 $$ if (action instanceof Separator) [ CD ]
Line_81 $$ DataContext context = DataManager.getInstance().getDataContext()-->Line_82 $$ expandActionGroup(group, new ArrayList<AnAction>(), presentationFactory, context, place, ActionManager.getInstance())[ FD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_58 $$ if (fixMacScreenMenu) [ CD ]
Line_83 $$ for (Component each : children) -->Line_84 $$ if (each instanceof ActionMenuItem) [ FD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_4 $$ final boolean checked = group instanceof CheckedActionGroup[ CD ]
Line_84 $$ if (each instanceof ActionMenuItem) -->Line_85 $$ ((ActionMenuItem) each).updateContext(context)[ CD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_72 $$ menuBuilt.doWhenDone(new Runnable() [ CD ]
Line_48 $$ final ActionMenuItem each = new ActionMenuItem(action, presentationFactory.getPresentation(action), place, context, enableMnemonics, !fixMacScreenMenu, checked)-->Line_62 $$ if (each.getParent() != null && each instanceof ActionMenuItem) [ FD ]
Line_14 $$ component.add(new JPopupMenu.Separator() -->Line_30 $$ g.fillRect(0, 0, getWidth(), getHeight())[ FD ]
Line_58 $$ if (fixMacScreenMenu) -->Line_59 $$ SwingUtilities.invokeLater(new Runnable() [ CD ]
Line_58 $$ if (fixMacScreenMenu) -->Line_70 $$ menuBuilt.setDone()[ CD ]
Line_79 $$ if (!component.isShowing())-->Line_80 $$ return[ CD ]
Line_81 $$ DataContext context = DataManager.getInstance().getDataContext()-->Line_87 $$ ((ActionMenu) each).updateContext(context)[ FD ]
Line_61 $$ for (Component each : children) -->Line_86 $$ if (each instanceof ActionMenu) [ FD ]
Line_74 $$ if (!mayDataContextBeInvalid)-->Line_75 $$ return[ CD ]
Line_76 $$ if (IdeFocusManager.getInstance(null).isFocusBeingTransferred()) -->Line_77 $$ IdeFocusManager.getInstance(null).doWhenFocusSettlesDown(new Runnable() [ CD ]
Line_9 $$ for (int i = 0, size = list.size(); i < size; i++) -->Line_10 $$ final AnAction action = list.get(i)[ FD ]
Line_10 $$ final AnAction action = list.get(i)-->Line_48 $$ final ActionMenuItem each = new ActionMenuItem(action, presentationFactory.getPresentation(action), place, context, enableMnemonics, !fixMacScreenMenu, checked)[ FD ]
Line_12 $$ final String text = ((Separator) action).getText()-->Line_13 $$ if (!StringUtil.isEmpty(text) || (i > 0 && i < size - 1)) [ FD ]
Line_44 $$ ActionMenu menu = new ActionMenu(context, place, (ActionGroup) action, presentationFactory, enableMnemonics, false)-->Line_46 $$ children.add(menu)[ FD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_29 $$ g.setColor(component.getBackground())[ FD ]
Line_61 $$ for (Component each : children) -->Line_62 $$ if (each.getParent() != null && each instanceof ActionMenuItem) [ FD ]
Line_11 $$ if (action instanceof Separator) -->Line_13 $$ if (!StringUtil.isEmpty(text) || (i > 0 && i < size - 1)) [ CD ]
Line_77 $$ IdeFocusManager.getInstance(null).doWhenFocusSettlesDown(new Runnable() -->Line_82 $$ expandActionGroup(group, new ArrayList<AnAction>(), presentationFactory, context, place, ActionManager.getInstance())[ CD ]
Line_8 $$ final ArrayList<Component> children = new ArrayList<Component>()-->Line_56 $$ children.add(each)[ FD ]
Line_43 $$ if (action instanceof ActionGroup && !(((ActionGroup) action).canBePerformed(context) && !hasVisibleChildren((ActionGroup) action, presentationFactory, context, place))) -->Line_48 $$ final ActionMenuItem each = new ActionMenuItem(action, presentationFactory.getPresentation(action), place, context, enableMnemonics, !fixMacScreenMenu, checked)[ CD ]
Line_9 $$ for (int i = 0, size = list.size(); i < size; i++) -->Line_10 $$ final AnAction action = list.get(i)[ CD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_3 $$ final ActionCallback menuBuilt = new ActionCallback()[ CD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_9 $$ for (int i = 0, size = list.size(); i < size; i++) [ CD ]
Line_28 $$ if (UIUtil.isUnderWindowsClassicLookAndFeel() || UIUtil.isUnderDarcula() || UIUtil.isUnderWindowsLookAndFeel()) -->Line_29 $$ g.setColor(component.getBackground())[ CD ]
Line_48 $$ final ActionMenuItem each = new ActionMenuItem(action, presentationFactory.getPresentation(action), place, context, enableMnemonics, !fixMacScreenMenu, checked)-->Line_56 $$ children.add(each)[ FD ]
Line_48 $$ final ActionMenuItem each = new ActionMenuItem(action, presentationFactory.getPresentation(action), place, context, enableMnemonics, !fixMacScreenMenu, checked)-->Line_86 $$ if (each instanceof ActionMenu) [ FD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_45 $$ component.add(menu)[ FD ]
Line_72 $$ menuBuilt.doWhenDone(new Runnable() -->Line_74 $$ if (!mayDataContextBeInvalid)[ CD ]
Line_5 $$ final ArrayList<AnAction> list = new ArrayList<AnAction>()-->Line_6 $$ expandActionGroup(group, list, presentationFactory, context, place, ActionManager.getInstance())[ FD ]
Line_8 $$ final ArrayList<Component> children = new ArrayList<Component>()-->Line_50 $$ children.add(each)[ FD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_54 $$ final ActionMenuItem each = new ActionMenuItem(EMPTY_MENU_FILLER, presentationFactory.getPresentation(EMPTY_MENU_FILLER), place, context, enableMnemonics, !fixMacScreenMenu, checked)[ FD ]
Line_48 $$ final ActionMenuItem each = new ActionMenuItem(action, presentationFactory.getPresentation(action), place, context, enableMnemonics, !fixMacScreenMenu, checked)-->Line_84 $$ if (each instanceof ActionMenuItem) [ FD ]
Line_14 $$ component.add(new JPopupMenu.Separator() -->Line_17 $$ final Insets insets = super.getInsets()[ CD ]
Line_77 $$ IdeFocusManager.getInstance(null).doWhenFocusSettlesDown(new Runnable() -->Line_79 $$ if (!component.isShowing())[ CD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_7 $$ final boolean fixMacScreenMenu = SystemInfo.isMacSystemMenu && isWindowMenu && Registry.is("actionSystem.mac.screenMenuNotUpdatedFix")[ CD ]
Line_32 $$ if (myMenu != null) -->Line_35 $$ super.paintComponent(g)[ CD ]
Line_43 $$ if (action instanceof ActionGroup && !(((ActionGroup) action).canBePerformed(context) && !hasVisibleChildren((ActionGroup) action, presentationFactory, context, place))) -->Line_49 $$ component.add(each)[ CD ]
Line_62 $$ if (each.getParent() != null && each instanceof ActionMenuItem) -->Line_63 $$ ((ActionMenuItem) each).prepare()[ CD ]
Line_5 $$ final ArrayList<AnAction> list = new ArrayList<AnAction>()-->Line_9 $$ for (int i = 0, size = list.size(); i < size; i++) [ FD ]
Line_14 $$ component.add(new JPopupMenu.Separator() -->Line_29 $$ g.setColor(component.getBackground())[ FD ]
Line_8 $$ final ArrayList<Component> children = new ArrayList<Component>()-->Line_46 $$ children.add(menu)[ FD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_74 $$ if (!mayDataContextBeInvalid)[ FD ]
Line_48 $$ final ActionMenuItem each = new ActionMenuItem(action, presentationFactory.getPresentation(action), place, context, enableMnemonics, !fixMacScreenMenu, checked)-->Line_55 $$ component.add(each)[ FD ]
Line_11 $$ if (action instanceof Separator) -->Line_43 $$ if (action instanceof ActionGroup && !(((ActionGroup) action).canBePerformed(context) && !hasVisibleChildren((ActionGroup) action, presentationFactory, context, place))) [ CD ]
Line_5 $$ final ArrayList<AnAction> list = new ArrayList<AnAction>()-->Line_10 $$ final AnAction action = list.get(i)[ FD ]
Line_14 $$ component.add(new JPopupMenu.Separator() -->Line_33 $$ myMenu.paint(g)[ FD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_53 $$ if (list.isEmpty()) [ CD ]
Line_53 $$ if (list.isEmpty()) -->Line_55 $$ component.add(each)[ CD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_85 $$ ((ActionMenuItem) each).updateContext(context)[ FD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_82 $$ expandActionGroup(group, new ArrayList<AnAction>(), presentationFactory, context, place, ActionManager.getInstance())[ FD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_6 $$ expandActionGroup(group, list, presentationFactory, context, place, ActionManager.getInstance())[ FD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_79 $$ if (!component.isShowing())[ FD ]
Line_14 $$ component.add(new JPopupMenu.Separator() -->Line_35 $$ super.paintComponent(g)[ FD ]
Line_14 $$ component.add(new JPopupMenu.Separator() -->Line_32 $$ if (myMenu != null) [ CD ]
Line_43 $$ if (action instanceof ActionGroup && !(((ActionGroup) action).canBePerformed(context) && !hasVisibleChildren((ActionGroup) action, presentationFactory, context, place))) -->Line_50 $$ children.add(each)[ CD ]
Line_43 $$ if (action instanceof ActionGroup && !(((ActionGroup) action).canBePerformed(context) && !hasVisibleChildren((ActionGroup) action, presentationFactory, context, place))) -->Line_46 $$ children.add(menu)[ CD ]
Line_81 $$ DataContext context = DataManager.getInstance().getDataContext()-->Line_85 $$ ((ActionMenuItem) each).updateContext(context)[ FD ]
Line_61 $$ for (Component each : children) -->Line_84 $$ if (each instanceof ActionMenuItem) [ FD ]
Line_5 $$ final ArrayList<AnAction> list = new ArrayList<AnAction>()-->Line_53 $$ if (list.isEmpty()) [ FD ]
Line_43 $$ if (action instanceof ActionGroup && !(((ActionGroup) action).canBePerformed(context) && !hasVisibleChildren((ActionGroup) action, presentationFactory, context, place))) -->Line_44 $$ ActionMenu menu = new ActionMenu(context, place, (ActionGroup) action, presentationFactory, enableMnemonics, false)[ CD ]
Line_53 $$ if (list.isEmpty()) -->Line_56 $$ children.add(each)[ CD ]
Line_3 $$ final ActionCallback menuBuilt = new ActionCallback()-->Line_70 $$ menuBuilt.setDone()[ FD ]
Line_2 $$ public static void fillMenu(@NotNull final ActionGroup group, final JComponent component, final boolean enableMnemonics, final PresentationFactory presentationFactory, @NotNull DataContext context, final String place, final boolean isWindowMenu, final boolean mayDataContextBeInvalid) -->Line_8 $$ final ArrayList<Component> children = new ArrayList<Component>()[ CD ]
Line_48 $$ final ActionMenuItem each = new ActionMenuItem(action, presentationFactory.getPresentation(action), place, context, enableMnemonics, !fixMacScreenMenu, checked)-->Line_49 $$ component.add(each)[ FD ]
Line_83 $$ for (Component each : children) -->Line_86 $$ if (each instanceof ActionMenu) [ FD ]
Line_72 $$ menuBuilt.doWhenDone(new Runnable() -->Line_76 $$ if (IdeFocusManager.getInstance(null).isFocusBeingTransferred()) [ CD ]
Line_14 $$ component.add(new JPopupMenu.Separator() -->Line_22 $$ super.doLayout()[ CD ]
Line_28 $$ if (UIUtil.isUnderWindowsClassicLookAndFeel() || UIUtil.isUnderDarcula() || UIUtil.isUnderWindowsLookAndFeel()) -->Line_30 $$ g.fillRect(0, 0, getWidth(), getHeight())[ CD ]
Line_32 $$ if (myMenu != null) -->Line_33 $$ myMenu.paint(g)[ CD ]
Line_59 $$ SwingUtilities.invokeLater(new Runnable() -->Line_66 $$ menuBuilt.setDone()[ CD ]
Line_10 $$ final AnAction action = list.get(i)-->Line_11 $$ if (action instanceof Separator) [ FD ]
Line_14 $$ component.add(new JPopupMenu.Separator() -->Line_23 $$ if (myMenu != null) [ CD ]
Line_13 $$ if (!StringUtil.isEmpty(text) || (i > 0 && i < size - 1)) -->Line_14 $$ component.add(new JPopupMenu.Separator() [ CD ]
Line_11 $$ if (action instanceof Separator) -->Line_12 $$ final String text = ((Separator) action).getText()[ CD ]
Line_14 $$ component.add(new JPopupMenu.Separator() -->Line_18 $$ final boolean fix = UIUtil.isUnderGTKLookAndFeel() && getBorder() != null && insets.top + insets.bottom == 0[ CD ]
