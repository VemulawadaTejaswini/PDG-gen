Line_47 $$ builder.addListener(new JBPopupAdapter() -->Line_49 $$ processClosed()[ CD ]
Line_2 $$ private void showAutoPopup() -->Line_70 $$ if (window != null) [ CD ]
Line_15 $$ PopupToolbar popupToolbar = new PopupToolbar(myPlace, group, true, myDataManager, myActionManager, myUpdater.getKeymapManager(), this) -->Line_30 $$ location.y = location.y + getHeight() - popupToolbar.getPreferredSize().height[ FD ]
Line_26 $$ if (myOrientation == SwingConstants.HORIZONTAL) -->Line_27 $$ location = getLocationOnScreen()[ CD ]
Line_26 $$ if (myOrientation == SwingConstants.HORIZONTAL) -->Line_29 $$ location = getLocationOnScreen()[ CD ]
Line_2 $$ private void showAutoPopup() -->Line_47 $$ builder.addListener(new JBPopupAdapter() [ CD ]
Line_10 $$ for (int i = myFirstOutsideIndex; i < myVisibleActions.size(); i++) -->Line_11 $$ outside.add(myVisibleActions.get(i))[ CD ]
Line_53 $$ final AnActionListener.Adapter listener = new AnActionListener.Adapter() -->Line_55 $$ final JBPopup popup = myPopup[ CD ]
Line_15 $$ PopupToolbar popupToolbar = new PopupToolbar(myPlace, group, true, myDataManager, myActionManager, myUpdater.getKeymapManager(), this) -->Line_17 $$ hidePopup()[ CD ]
Line_5 $$ final ActionGroup group-->Line_7 $$ group = myActionGroup[ FD ]
Line_15 $$ PopupToolbar popupToolbar = new PopupToolbar(myPlace, group, true, myDataManager, myActionManager, myUpdater.getKeymapManager(), this) -->Line_62 $$ Disposer.register(myPopup, popupToolbar)[ FD ]
Line_86 $$ Disposer.register(popupToolbar, new Disposable() -->Line_88 $$ window.removeComponentListener(componentAdapter)[ CD ]
Line_33 $$ builder.setResizable(false).setMovable(true).setRequestFocus(false).setTitle(null).setCancelOnClickOutside(true).setCancelOnOtherWindowOpen(true).setCancelCallback(new Computable<Boolean>() -->Line_36 $$ final boolean toClose = myActionManager.isActionPopupStackEmpty()[ CD ]
Line_6 $$ if (myOrientation == SwingConstants.HORIZONTAL) -->Line_9 $$ final DefaultActionGroup outside = new DefaultActionGroup()[ CD ]
Line_56 $$ if (popup != null && !popup.isDisposed() && popup.isVisible()) -->Line_57 $$ popup.cancel()[ CD ]
Line_71 $$ final ComponentAdapter componentAdapter = new ComponentAdapter() -->Line_79 $$ hidePopup()[ CD ]
Line_7 $$ group = myActionGroup-->Line_13 $$ group = outside[ FD ]
Line_63 $$ Disposer.register(popupToolbar, new Disposable() -->Line_65 $$ ActionManager.getInstance().removeAnActionListener(listener)[ CD ]
Line_6 $$ if (myOrientation == SwingConstants.HORIZONTAL) -->Line_7 $$ group = myActionGroup[ CD ]
Line_2 $$ private void showAutoPopup() -->Line_69 $$ final Window window = SwingUtilities.getWindowAncestor(this)[ CD ]
Line_3 $$ if (isPopupShowing())-->Line_4 $$ return[ CD ]
Line_15 $$ PopupToolbar popupToolbar = new PopupToolbar(myPlace, group, true, myDataManager, myActionManager, myUpdater.getKeymapManager(), this) -->Line_32 $$ final ComponentPopupBuilder builder = JBPopupFactory.getInstance().createComponentPopupBuilder(popupToolbar, null)[ FD ]
Line_2 $$ private void showAutoPopup() -->Line_5 $$ final ActionGroup group[ CD ]
Line_2 $$ private void showAutoPopup() -->Line_24 $$ popupToolbar.updateActionsImmediately()[ CD ]
Line_55 $$ final JBPopup popup = myPopup-->Line_57 $$ popup.cancel()[ FD ]
Line_2 $$ private void showAutoPopup() -->Line_68 $$ myPopup.showInScreenCoordinates(this, location)[ CD ]
Line_70 $$ if (window != null) -->Line_86 $$ Disposer.register(popupToolbar, new Disposable() [ CD ]
Line_37 $$ if (toClose) -->Line_38 $$ myUpdater.updateActions(false, true)[ CD ]
Line_2 $$ private void showAutoPopup() -->Line_6 $$ if (myOrientation == SwingConstants.HORIZONTAL) [ CD ]
Line_71 $$ final ComponentAdapter componentAdapter = new ComponentAdapter() -->Line_76 $$ hidePopup()[ CD ]
Line_6 $$ if (myOrientation == SwingConstants.HORIZONTAL) -->Line_10 $$ for (int i = myFirstOutsideIndex; i < myVisibleActions.size(); i++) [ CD ]
Line_15 $$ PopupToolbar popupToolbar = new PopupToolbar(myPlace, group, true, myDataManager, myActionManager, myUpdater.getKeymapManager(), this) -->Line_20 $$ return ActionToolbarImpl.this.getDataContext()[ CD ]
Line_71 $$ final ComponentAdapter componentAdapter = new ComponentAdapter() -->Line_73 $$ hidePopup()[ CD ]
Line_10 $$ for (int i = myFirstOutsideIndex; i < myVisibleActions.size(); i++) -->Line_11 $$ outside.add(myVisibleActions.get(i))[ FD ]
Line_2 $$ private void showAutoPopup() -->Line_23 $$ popupToolbar.setLayoutPolicy(NOWRAP_LAYOUT_POLICY)[ CD ]
Line_15 $$ PopupToolbar popupToolbar = new PopupToolbar(myPlace, group, true, myDataManager, myActionManager, myUpdater.getKeymapManager(), this) -->Line_23 $$ popupToolbar.setLayoutPolicy(NOWRAP_LAYOUT_POLICY)[ FD ]
Line_2 $$ private void showAutoPopup() -->Line_26 $$ if (myOrientation == SwingConstants.HORIZONTAL) [ CD ]
Line_2 $$ private void showAutoPopup() -->Line_62 $$ Disposer.register(myPopup, popupToolbar)[ CD ]
Line_55 $$ final JBPopup popup = myPopup-->Line_56 $$ if (popup != null && !popup.isDisposed() && popup.isVisible()) [ FD ]
Line_2 $$ private void showAutoPopup() -->Line_3 $$ if (isPopupShowing())[ CD ]
Line_9 $$ final DefaultActionGroup outside = new DefaultActionGroup()-->Line_13 $$ group = outside[ FD ]
Line_2 $$ private void showAutoPopup() -->Line_33 $$ builder.setResizable(false).setMovable(true).setRequestFocus(false).setTitle(null).setCancelOnClickOutside(true).setCancelOnOtherWindowOpen(true).setCancelCallback(new Computable<Boolean>() [ CD ]
Line_53 $$ final AnActionListener.Adapter listener = new AnActionListener.Adapter() -->Line_56 $$ if (popup != null && !popup.isDisposed() && popup.isVisible()) [ CD ]
Line_15 $$ PopupToolbar popupToolbar = new PopupToolbar(myPlace, group, true, myDataManager, myActionManager, myUpdater.getKeymapManager(), this) -->Line_86 $$ Disposer.register(popupToolbar, new Disposable() [ FD ]
Line_5 $$ final ActionGroup group-->Line_13 $$ group = outside[ FD ]
Line_2 $$ private void showAutoPopup() -->Line_52 $$ myPopup = builder.createPopup()[ CD ]
Line_26 $$ if (myOrientation == SwingConstants.HORIZONTAL) -->Line_30 $$ location.y = location.y + getHeight() - popupToolbar.getPreferredSize().height[ CD ]
Line_15 $$ PopupToolbar popupToolbar = new PopupToolbar(myPlace, group, true, myDataManager, myActionManager, myUpdater.getKeymapManager(), this) -->Line_63 $$ Disposer.register(popupToolbar, new Disposable() [ FD ]
Line_2 $$ private void showAutoPopup() -->Line_63 $$ Disposer.register(popupToolbar, new Disposable() [ CD ]
Line_33 $$ builder.setResizable(false).setMovable(true).setRequestFocus(false).setTitle(null).setCancelOnClickOutside(true).setCancelOnOtherWindowOpen(true).setCancelCallback(new Computable<Boolean>() -->Line_40 $$ return toClose[ CD ]
Line_71 $$ final ComponentAdapter componentAdapter = new ComponentAdapter() -->Line_82 $$ hidePopup()[ CD ]
Line_9 $$ final DefaultActionGroup outside = new DefaultActionGroup()-->Line_11 $$ outside.add(myVisibleActions.get(i))[ FD ]
Line_33 $$ builder.setResizable(false).setMovable(true).setRequestFocus(false).setTitle(null).setCancelOnClickOutside(true).setCancelOnOtherWindowOpen(true).setCancelCallback(new Computable<Boolean>() -->Line_44 $$ return myAutoPopupRec != null && myActionManager.isActionPopupStackEmpty() && !new RelativeRectangle(ActionToolbarImpl.this, myAutoPopupRec).contains(new RelativePoint(event))[ CD ]
Line_6 $$ if (myOrientation == SwingConstants.HORIZONTAL) -->Line_13 $$ group = outside[ CD ]
Line_33 $$ builder.setResizable(false).setMovable(true).setRequestFocus(false).setTitle(null).setCancelOnClickOutside(true).setCancelOnOtherWindowOpen(true).setCancelCallback(new Computable<Boolean>() -->Line_37 $$ if (toClose) [ CD ]
Line_70 $$ if (window != null) -->Line_85 $$ window.addComponentListener(componentAdapter)[ CD ]
Line_2 $$ private void showAutoPopup() -->Line_15 $$ PopupToolbar popupToolbar = new PopupToolbar(myPlace, group, true, myDataManager, myActionManager, myUpdater.getKeymapManager(), this) [ CD ]
Line_2 $$ private void showAutoPopup() -->Line_32 $$ final ComponentPopupBuilder builder = JBPopupFactory.getInstance().createComponentPopupBuilder(popupToolbar, null)[ CD ]
Line_2 $$ private void showAutoPopup() -->Line_61 $$ ActionManager.getInstance().addAnActionListener(listener)[ CD ]
Line_15 $$ PopupToolbar popupToolbar = new PopupToolbar(myPlace, group, true, myDataManager, myActionManager, myUpdater.getKeymapManager(), this) -->Line_24 $$ popupToolbar.updateActionsImmediately()[ FD ]
