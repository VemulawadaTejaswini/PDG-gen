Line_12 $$ if (ownerBySwingWindow != null && ownerBySwingWindow == SwingUtilities.getWindowAncestor(toFocus)) -->Line_13 $$ if (!UIUtil.isMeaninglessFocusOwner(ownerBySwing)) [ CD ]
Line_14 $$ toFocus = ownerBySwing-->Line_21 $$ requestFocus(toFocus)[ FD ]
Line_10 $$ if (ownerBySwing != null) -->Line_11 $$ final Window ownerBySwingWindow = SwingUtilities.getWindowAncestor(ownerBySwing)[ CD ]
Line_2 $$ private ActionCallback _restoreFocus() -->Line_6 $$ Component toFocus = queryToFocus(stack, this, true)[ CD ]
Line_6 $$ Component toFocus = queryToFocus(stack, this, true)-->Line_25 $$ requestFocus(toFocus)[ FD ]
Line_18 $$ if (myParentWindow != null) -->Line_19 $$ final Window to = UIUtil.getWindow(toFocus)[ CD ]
Line_14 $$ toFocus = ownerBySwing-->Line_25 $$ requestFocus(toFocus)[ FD ]
Line_6 $$ Component toFocus = queryToFocus(stack, this, true)-->Line_8 $$ if (toFocus != null) [ FD ]
Line_2 $$ private ActionCallback _restoreFocus() -->Line_33 $$ dispose()[ CD ]
Line_2 $$ private ActionCallback _restoreFocus() -->Line_32 $$ stack.remove(this)[ CD ]
Line_9 $$ final Component ownerBySwing = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()-->Line_14 $$ toFocus = ownerBySwing[ FD ]
Line_18 $$ if (myParentWindow != null) -->Line_26 $$ result.setDone()[ CD ]
Line_6 $$ Component toFocus = queryToFocus(stack, this, true)-->Line_19 $$ final Window to = UIUtil.getWindow(toFocus)[ FD ]
Line_9 $$ final Component ownerBySwing = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()-->Line_11 $$ final Window ownerBySwingWindow = SwingUtilities.getWindowAncestor(ownerBySwing)[ FD ]
Line_10 $$ if (ownerBySwing != null) -->Line_12 $$ if (ownerBySwingWindow != null && ownerBySwingWindow == SwingUtilities.getWindowAncestor(toFocus)) [ CD ]
Line_29 $$ if (!result.isDone()) -->Line_30 $$ result.setRejected()[ CD ]
Line_2 $$ private ActionCallback _restoreFocus() -->Line_29 $$ if (!result.isDone()) [ CD ]
Line_6 $$ Component toFocus = queryToFocus(stack, this, true)-->Line_21 $$ requestFocus(toFocus)[ FD ]
Line_9 $$ final Component ownerBySwing = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()-->Line_10 $$ if (ownerBySwing != null) [ FD ]
Line_18 $$ if (myParentWindow != null) -->Line_25 $$ requestFocus(toFocus)[ CD ]
Line_7 $$ final ActionCallback result = new ActionCallback()-->Line_22 $$ result.setDone()[ FD ]
Line_20 $$ if (to != null && UIUtil.findUltimateParent(to) == UIUtil.findUltimateParent(myParentWindow)) -->Line_22 $$ result.setDone()[ CD ]
Line_7 $$ final ActionCallback result = new ActionCallback()-->Line_29 $$ if (!result.isDone()) [ FD ]
Line_2 $$ private ActionCallback _restoreFocus() -->Line_7 $$ final ActionCallback result = new ActionCallback()[ CD ]
Line_7 $$ final ActionCallback result = new ActionCallback()-->Line_26 $$ result.setDone()[ FD ]
Line_3 $$ final List<FocusTrackback> stack = getCleanStack()-->Line_32 $$ stack.remove(this)[ FD ]
Line_3 $$ final List<FocusTrackback> stack = getCleanStack()-->Line_6 $$ Component toFocus = queryToFocus(stack, this, true)[ FD ]
Line_8 $$ if (toFocus != null) -->Line_18 $$ if (myParentWindow != null) [ CD ]
Line_7 $$ final ActionCallback result = new ActionCallback()-->Line_30 $$ result.setRejected()[ FD ]
Line_2 $$ private ActionCallback _restoreFocus() -->Line_8 $$ if (toFocus != null) [ CD ]
Line_18 $$ if (myParentWindow != null) -->Line_20 $$ if (to != null && UIUtil.findUltimateParent(to) == UIUtil.findUltimateParent(myParentWindow)) [ CD ]
Line_14 $$ toFocus = ownerBySwing-->Line_19 $$ final Window to = UIUtil.getWindow(toFocus)[ FD ]
Line_6 $$ Component toFocus = queryToFocus(stack, this, true)-->Line_14 $$ toFocus = ownerBySwing[ FD ]
Line_9 $$ final Component ownerBySwing = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()-->Line_13 $$ if (!UIUtil.isMeaninglessFocusOwner(ownerBySwing)) [ FD ]
Line_4 $$ if (!stack.contains(this))-->Line_5 $$ return ActionCallback.REJECTED[ CD ]
Line_19 $$ final Window to = UIUtil.getWindow(toFocus)-->Line_20 $$ if (to != null && UIUtil.findUltimateParent(to) == UIUtil.findUltimateParent(myParentWindow)) [ FD ]
Line_8 $$ if (toFocus != null) -->Line_9 $$ final Component ownerBySwing = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()[ CD ]
Line_2 $$ private ActionCallback _restoreFocus() -->Line_34 $$ return result[ CD ]
Line_3 $$ final List<FocusTrackback> stack = getCleanStack()-->Line_4 $$ if (!stack.contains(this))[ FD ]
Line_13 $$ if (!UIUtil.isMeaninglessFocusOwner(ownerBySwing)) -->Line_14 $$ toFocus = ownerBySwing[ CD ]
Line_6 $$ Component toFocus = queryToFocus(stack, this, true)-->Line_12 $$ if (ownerBySwingWindow != null && ownerBySwingWindow == SwingUtilities.getWindowAncestor(toFocus)) [ FD ]
Line_8 $$ if (toFocus != null) -->Line_10 $$ if (ownerBySwing != null) [ CD ]
Line_20 $$ if (to != null && UIUtil.findUltimateParent(to) == UIUtil.findUltimateParent(myParentWindow)) -->Line_21 $$ requestFocus(toFocus)[ CD ]
Line_2 $$ private ActionCallback _restoreFocus() -->Line_4 $$ if (!stack.contains(this))[ CD ]
Line_2 $$ private ActionCallback _restoreFocus() -->Line_3 $$ final List<FocusTrackback> stack = getCleanStack()[ CD ]
