Line_16 $$ if (perms == null) -->Line_19 $$ pathOps = MessageFormat.format("/webhdfs/v1/[ CD ]
Line_13 $$ filename = filename.substring(1)-->Line_17 $$ pathOps = MessageFormat.format("/webhdfs/v1/[ FD ]
Line_22 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_23 $$ conn.addRequestProperty("Content-Type", "application/octet-stream")[ FD ]
Line_21 $$ URL url = new URL(TestJettyHelper.getJettyURL(), pathOps)-->Line_22 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_15 $$ String pathOps-->Line_17 $$ pathOps = MessageFormat.format("/webhdfs/v1/[ FD ]
Line_10 $$ String user = HadoopUsersConfTestHelper.getHadoopUsers()[0]-->Line_17 $$ pathOps = MessageFormat.format("/webhdfs/v1/[ FD ]
Line_22 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_25 $$ conn.connect()[ FD ]
Line_22 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_26 $$ Assert.assertEquals(HttpURLConnection.HTTP_CREATED, conn.getResponseCode())[ FD ]
Line_13 $$ filename = filename.substring(1)-->Line_19 $$ pathOps = MessageFormat.format("/webhdfs/v1/[ FD ]
Line_10 $$ String user = HadoopUsersConfTestHelper.getHadoopUsers()[0]-->Line_19 $$ pathOps = MessageFormat.format("/webhdfs/v1/[ FD ]
Line_16 $$ if (perms == null) -->Line_17 $$ pathOps = MessageFormat.format("/webhdfs/v1/[ CD ]
Line_17 $$ pathOps = MessageFormat.format("/webhdfs/v1/-->Line_19 $$ pathOps = MessageFormat.format("/webhdfs/v1/[ FD ]
Line_15 $$ String pathOps-->Line_19 $$ pathOps = MessageFormat.format("/webhdfs/v1/[ FD ]
Line_22 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_24 $$ conn.setRequestMethod("PUT")[ FD ]
