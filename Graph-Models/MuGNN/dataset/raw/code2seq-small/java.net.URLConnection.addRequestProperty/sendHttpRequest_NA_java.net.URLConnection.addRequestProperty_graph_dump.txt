Line_32 $$ if (doingOutPut) -->Line_33 $$ String contentAsString = httpRequest.getContent()[ CD ]
Line_2 $$ public void sendHttpRequest(final HttpRequest httpRequest, final HttpResponseListener httpResponseListener) -->Line_25 $$ putIntoConnectionsAndListeners(httpRequest, httpResponseListener, connection)[ FD ]
Line_44 $$ OutputStream os = connection.getOutputStream()-->Line_46 $$ StreamUtils.copyStream(contentAsStream, os)[ FD ]
Line_42 $$ InputStream contentAsStream = httpRequest.getContentStream()-->Line_43 $$ if (contentAsStream != null) [ FD ]
Line_2 $$ public void sendHttpRequest(final HttpRequest httpRequest, final HttpResponseListener httpResponseListener) -->Line_77 $$ httpResponseListener.failed(e)[ FD ]
Line_8 $$ final String method = httpRequest.getMethod()-->Line_23 $$ connection.setRequestMethod(method)[ FD ]
Line_33 $$ String contentAsString = httpRequest.getContent()-->Line_34 $$ if (contentAsString != null) [ FD ]
Line_44 $$ OutputStream os = connection.getOutputStream()-->Line_48 $$ StreamUtils.closeQuietly(os)[ FD ]
Line_54 $$ final HttpClientResponse clientResponse = new HttpClientResponse(connection)-->Line_58 $$ listener.handleHttpResponse(clientResponse)[ FD ]
Line_10 $$ if (method.equalsIgnoreCase(HttpMethods.GET)) -->Line_13 $$ if (value != null && !"".equals(value))[ CD ]
Line_2 $$ public void sendHttpRequest(final HttpRequest httpRequest, final HttpResponseListener httpResponseListener) -->Line_15 $$ url = new URL(httpRequest.getUrl() + queryString)[ FD ]
Line_29 $$ asyncExecutor.submit(new AsyncTask<Void>() -->Line_72 $$ return null[ CD ]
Line_2 $$ public void sendHttpRequest(final HttpRequest httpRequest, final HttpResponseListener httpResponseListener) -->Line_33 $$ String contentAsString = httpRequest.getContent()[ FD ]
Line_2 $$ public void sendHttpRequest(final HttpRequest httpRequest, final HttpResponseListener httpResponseListener) -->Line_24 $$ HttpURLConnection.setFollowRedirects(httpRequest.getFollowRedirects())[ FD ]
Line_2 $$ public void sendHttpRequest(final HttpRequest httpRequest, final HttpResponseListener httpResponseListener) -->Line_3 $$ if (httpRequest.getUrl() == null) [ FD ]
Line_15 $$ url = new URL(httpRequest.getUrl() + queryString)-->Line_17 $$ url = new URL(httpRequest.getUrl())[ FD ]
Line_8 $$ final String method = httpRequest.getMethod()-->Line_20 $$ final boolean doingOutPut = method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT)[ FD ]
Line_19 $$ final HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_23 $$ connection.setRequestMethod(method)[ FD ]
Line_32 $$ if (doingOutPut) -->Line_34 $$ if (contentAsString != null) [ CD ]
Line_10 $$ if (method.equalsIgnoreCase(HttpMethods.GET)) -->Line_15 $$ url = new URL(httpRequest.getUrl() + queryString)[ CD ]
Line_19 $$ final HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_27 $$ connection.setConnectTimeout(httpRequest.getTimeOut())[ FD ]
Line_9 $$ URL url-->Line_19 $$ final HttpURLConnection connection = (HttpURLConnection) url.openConnection()[ FD ]
Line_12 $$ String value = httpRequest.getContent()-->Line_13 $$ if (value != null && !"".equals(value))[ FD ]
Line_35 $$ OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream())-->Line_39 $$ StreamUtils.closeQuietly(writer)[ FD ]
Line_2 $$ public void sendHttpRequest(final HttpRequest httpRequest, final HttpResponseListener httpResponseListener) -->Line_3 $$ if (httpRequest.getUrl() == null) [ CD ]
Line_2 $$ public void sendHttpRequest(final HttpRequest httpRequest, final HttpResponseListener httpResponseListener) -->Line_56 $$ HttpResponseListener listener = getFromListeners(httpRequest)[ FD ]
Line_56 $$ HttpResponseListener listener = getFromListeners(httpRequest)-->Line_58 $$ listener.handleHttpResponse(clientResponse)[ FD ]
Line_19 $$ final HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_65 $$ connection.disconnect()[ FD ]
Line_17 $$ url = new URL(httpRequest.getUrl())-->Line_19 $$ final HttpURLConnection connection = (HttpURLConnection) url.openConnection()[ FD ]
Line_10 $$ if (method.equalsIgnoreCase(HttpMethods.GET)) -->Line_11 $$ String queryString = ""[ CD ]
Line_9 $$ URL url-->Line_15 $$ url = new URL(httpRequest.getUrl() + queryString)[ FD ]
Line_3 $$ if (httpRequest.getUrl() == null) -->Line_5 $$ return[ CD ]
Line_2 $$ public void sendHttpRequest(final HttpRequest httpRequest, final HttpResponseListener httpResponseListener) -->Line_4 $$ httpResponseListener.failed(new GdxRuntimeException("can't process a HTTP request without URL set"))[ FD ]
Line_2 $$ public void sendHttpRequest(final HttpRequest httpRequest, final HttpResponseListener httpResponseListener) -->Line_17 $$ url = new URL(httpRequest.getUrl())[ FD ]
Line_2 $$ public void sendHttpRequest(final HttpRequest httpRequest, final HttpResponseListener httpResponseListener) -->Line_12 $$ String value = httpRequest.getContent()[ FD ]
Line_33 $$ String contentAsString = httpRequest.getContent()-->Line_37 $$ writer.write(contentAsString)[ FD ]
Line_34 $$ if (contentAsString != null) -->Line_43 $$ if (contentAsStream != null) [ CD ]
Line_43 $$ if (contentAsStream != null) -->Line_44 $$ OutputStream os = connection.getOutputStream()[ CD ]
Line_56 $$ HttpResponseListener listener = getFromListeners(httpRequest)-->Line_57 $$ if (listener != null) [ FD ]
Line_57 $$ if (listener != null) -->Line_58 $$ listener.handleHttpResponse(clientResponse)[ CD ]
Line_2 $$ public void sendHttpRequest(final HttpRequest httpRequest, final HttpResponseListener httpResponseListener) -->Line_27 $$ connection.setConnectTimeout(httpRequest.getTimeOut())[ FD ]
Line_2 $$ public void sendHttpRequest(final HttpRequest httpRequest, final HttpResponseListener httpResponseListener) -->Line_67 $$ httpResponseListener.failed(e)[ FD ]
Line_8 $$ final String method = httpRequest.getMethod()-->Line_10 $$ if (method.equalsIgnoreCase(HttpMethods.GET)) [ FD ]
Line_19 $$ final HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_22 $$ connection.setDoInput(true)[ FD ]
Line_34 $$ if (contentAsString != null) -->Line_42 $$ InputStream contentAsStream = httpRequest.getContentStream()[ CD ]
Line_2 $$ public void sendHttpRequest(final HttpRequest httpRequest, final HttpResponseListener httpResponseListener) -->Line_69 $$ removeFromConnectionsAndListeners(httpRequest)[ FD ]
Line_19 $$ final HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_28 $$ connection.setReadTimeout(httpRequest.getTimeOut())[ FD ]
Line_2 $$ public void sendHttpRequest(final HttpRequest httpRequest, final HttpResponseListener httpResponseListener) -->Line_79 $$ removeFromConnectionsAndListeners(httpRequest)[ FD ]
Line_3 $$ if (httpRequest.getUrl() == null) -->Line_4 $$ httpResponseListener.failed(new GdxRuntimeException("can't process a HTTP request without URL set"))[ CD ]
Line_9 $$ URL url-->Line_17 $$ url = new URL(httpRequest.getUrl())[ FD ]
Line_19 $$ final HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_21 $$ connection.setDoOutput(doingOutPut)[ FD ]
Line_19 $$ final HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_26 $$ connection.addRequestProperty(header.getKey(), header.getValue())[ FD ]
Line_10 $$ if (method.equalsIgnoreCase(HttpMethods.GET)) -->Line_17 $$ url = new URL(httpRequest.getUrl())[ CD ]
Line_42 $$ InputStream contentAsStream = httpRequest.getContentStream()-->Line_46 $$ StreamUtils.copyStream(contentAsStream, os)[ FD ]
Line_2 $$ public void sendHttpRequest(final HttpRequest httpRequest, final HttpResponseListener httpResponseListener) -->Line_60 $$ removeFromConnectionsAndListeners(httpRequest)[ FD ]
Line_2 $$ public void sendHttpRequest(final HttpRequest httpRequest, final HttpResponseListener httpResponseListener) -->Line_8 $$ final String method = httpRequest.getMethod()[ FD ]
Line_2 $$ public void sendHttpRequest(final HttpRequest httpRequest, final HttpResponseListener httpResponseListener) -->Line_28 $$ connection.setReadTimeout(httpRequest.getTimeOut())[ FD ]
Line_11 $$ String queryString = ""-->Line_14 $$ queryString = "?" + value[ FD ]
Line_10 $$ if (method.equalsIgnoreCase(HttpMethods.GET)) -->Line_12 $$ String value = httpRequest.getContent()[ CD ]
Line_19 $$ final HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_35 $$ OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream())[ FD ]
Line_35 $$ OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream())-->Line_37 $$ writer.write(contentAsString)[ FD ]
Line_19 $$ final HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_62 $$ connection.disconnect()[ FD ]
Line_13 $$ if (value != null && !"".equals(value))-->Line_14 $$ queryString = "?" + value[ CD ]
Line_34 $$ if (contentAsString != null) -->Line_35 $$ OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream())[ CD ]
Line_2 $$ public void sendHttpRequest(final HttpRequest httpRequest, final HttpResponseListener httpResponseListener) -->Line_42 $$ InputStream contentAsStream = httpRequest.getContentStream()[ FD ]
Line_2 $$ public void sendHttpRequest(final HttpRequest httpRequest, final HttpResponseListener httpResponseListener) -->Line_26 $$ for (Map.Entry<String, String> header : httpRequest.getHeaders().entrySet()) connection.addRequestProperty(header.getKey(), header.getValue())[ FD ]
Line_19 $$ final HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_44 $$ OutputStream os = connection.getOutputStream()[ FD ]
Line_19 $$ final HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_53 $$ connection.connect()[ FD ]
Line_12 $$ String value = httpRequest.getContent()-->Line_14 $$ queryString = "?" + value[ FD ]
Line_15 $$ url = new URL(httpRequest.getUrl() + queryString)-->Line_19 $$ final HttpURLConnection connection = (HttpURLConnection) url.openConnection()[ FD ]
Line_19 $$ final HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_25 $$ putIntoConnectionsAndListeners(httpRequest, httpResponseListener, connection)[ FD ]
Line_20 $$ final boolean doingOutPut = method.equalsIgnoreCase(HttpMethods.POST) || method.equalsIgnoreCase(HttpMethods.PUT)-->Line_21 $$ connection.setDoOutput(doingOutPut)[ FD ]
