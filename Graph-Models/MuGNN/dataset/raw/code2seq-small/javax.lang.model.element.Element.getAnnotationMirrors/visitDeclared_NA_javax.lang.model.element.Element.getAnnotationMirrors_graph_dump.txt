Line_2 $$ public AnnotationMetaAttribute visitDeclared(DeclaredType declaredType, Element element) -->Line_14 $$ return metaAttribute[ CD ]
Line_5 $$ String fqNameOfReturnType = returnedElement.getQualifiedName().toString()-->Line_9 $$ return createMetaCollectionAttribute(declaredType, element, fqNameOfReturnType, collection, targetEntity)[ FD ]
Line_10 $$ if (isBasicAttribute(element, returnedElement)) -->Line_12 $$ return new AnnotationMetaSingleAttribute(entity, element, type)[ CD ]
Line_10 $$ if (isBasicAttribute(element, returnedElement)) -->Line_11 $$ String type = targetEntity != null ? targetEntity : returnedElement.getQualifiedName().toString()[ CD ]
Line_2 $$ public AnnotationMetaAttribute visitDeclared(DeclaredType declaredType, Element element) -->Line_4 $$ TypeElement returnedElement = (TypeElement) context.getTypeUtils().asElement(declaredType)[ FD ]
Line_2 $$ public AnnotationMetaAttribute visitDeclared(DeclaredType declaredType, Element element) -->Line_9 $$ return createMetaCollectionAttribute(declaredType, element, fqNameOfReturnType, collection, targetEntity)[ FD ]
Line_5 $$ String fqNameOfReturnType = returnedElement.getQualifiedName().toString()-->Line_6 $$ String collection = Constants.COLLECTIONS.get(fqNameOfReturnType)[ FD ]
Line_2 $$ public AnnotationMetaAttribute visitDeclared(DeclaredType declaredType, Element element) -->Line_8 $$ if (collection != null) [ CD ]
Line_7 $$ String targetEntity = getTargetEntity(element.getAnnotationMirrors())-->Line_9 $$ return createMetaCollectionAttribute(declaredType, element, fqNameOfReturnType, collection, targetEntity)[ FD ]
Line_2 $$ public AnnotationMetaAttribute visitDeclared(DeclaredType declaredType, Element element) -->Line_6 $$ String collection = Constants.COLLECTIONS.get(fqNameOfReturnType)[ CD ]
Line_2 $$ public AnnotationMetaAttribute visitDeclared(DeclaredType declaredType, Element element) -->Line_10 $$ if (isBasicAttribute(element, returnedElement)) [ FD ]
Line_2 $$ public AnnotationMetaAttribute visitDeclared(DeclaredType declaredType, Element element) -->Line_7 $$ String targetEntity = getTargetEntity(element.getAnnotationMirrors())[ CD ]
Line_4 $$ TypeElement returnedElement = (TypeElement) context.getTypeUtils().asElement(declaredType)-->Line_11 $$ String type = targetEntity != null ? targetEntity : returnedElement.getQualifiedName().toString()[ FD ]
Line_6 $$ String collection = Constants.COLLECTIONS.get(fqNameOfReturnType)-->Line_8 $$ if (collection != null) [ FD ]
Line_4 $$ TypeElement returnedElement = (TypeElement) context.getTypeUtils().asElement(declaredType)-->Line_5 $$ String fqNameOfReturnType = returnedElement.getQualifiedName().toString()[ FD ]
Line_2 $$ public AnnotationMetaAttribute visitDeclared(DeclaredType declaredType, Element element) -->Line_7 $$ String targetEntity = getTargetEntity(element.getAnnotationMirrors())[ FD ]
Line_8 $$ if (collection != null) -->Line_10 $$ if (isBasicAttribute(element, returnedElement)) [ CD ]
Line_2 $$ public AnnotationMetaAttribute visitDeclared(DeclaredType declaredType, Element element) -->Line_3 $$ AnnotationMetaAttribute metaAttribute = null[ CD ]
Line_2 $$ public AnnotationMetaAttribute visitDeclared(DeclaredType declaredType, Element element) -->Line_5 $$ String fqNameOfReturnType = returnedElement.getQualifiedName().toString()[ CD ]
Line_2 $$ public AnnotationMetaAttribute visitDeclared(DeclaredType declaredType, Element element) -->Line_4 $$ TypeElement returnedElement = (TypeElement) context.getTypeUtils().asElement(declaredType)[ CD ]
Line_8 $$ if (collection != null) -->Line_9 $$ return createMetaCollectionAttribute(declaredType, element, fqNameOfReturnType, collection, targetEntity)[ CD ]
Line_6 $$ String collection = Constants.COLLECTIONS.get(fqNameOfReturnType)-->Line_9 $$ return createMetaCollectionAttribute(declaredType, element, fqNameOfReturnType, collection, targetEntity)[ FD ]
Line_4 $$ TypeElement returnedElement = (TypeElement) context.getTypeUtils().asElement(declaredType)-->Line_10 $$ if (isBasicAttribute(element, returnedElement)) [ FD ]
