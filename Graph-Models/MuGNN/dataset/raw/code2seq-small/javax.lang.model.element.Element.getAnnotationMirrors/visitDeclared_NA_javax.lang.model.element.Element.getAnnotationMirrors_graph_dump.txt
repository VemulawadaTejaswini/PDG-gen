Line_10 $$ if (collection != null) -->Line_11 $$ return createMetaCollectionAttribute(declaredType, element, fqNameOfReturnType, collection, targetEntity)[ CD ]
Line_8 $$ String collection = Constants.COLLECTIONS.get(fqNameOfReturnType)-->Line_10 $$ if (collection != null) [ FD ]
Line_5 $$ TypeElement returnedElement = (TypeElement) context.getTypeUtils().asElement(declaredType)-->Line_12 $$ if (isBasicAttribute(element, returnedElement)) [ FD ]
Line_10 $$ if (collection != null) -->Line_12 $$ if (isBasicAttribute(element, returnedElement)) [ CD ]
Line_12 $$ if (isBasicAttribute(element, returnedElement)) -->Line_14 $$ return new AnnotationMetaSingleAttribute(entity, element, type)[ CD ]
Line_5 $$ TypeElement returnedElement = (TypeElement) context.getTypeUtils().asElement(declaredType)-->Line_13 $$ String type = targetEntity != null ? targetEntity : returnedElement.getQualifiedName().toString()[ FD ]
Line_12 $$ if (isBasicAttribute(element, returnedElement)) -->Line_13 $$ String type = targetEntity != null ? targetEntity : returnedElement.getQualifiedName().toString()[ CD ]
Line_9 $$ String targetEntity = getTargetEntity(element.getAnnotationMirrors())-->Line_11 $$ return createMetaCollectionAttribute(declaredType, element, fqNameOfReturnType, collection, targetEntity)[ FD ]
Line_8 $$ String collection = Constants.COLLECTIONS.get(fqNameOfReturnType)-->Line_11 $$ return createMetaCollectionAttribute(declaredType, element, fqNameOfReturnType, collection, targetEntity)[ FD ]
