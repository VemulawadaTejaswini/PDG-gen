Line_2 $$ protected InputStream createBundle(Class<?> clazz) throws Exception -->Line_9 $$ Package pkg = clazz.getPackage()[ FD ]
Line_13 $$ File baseDir = new File(basePath)-->Line_17 $$ builder.setBase(baseDir)[ FD ]
Line_3 $$ URL url = clazz.getResource("")-->Line_8 $$ String basePath = url.getPath()[ FD ]
Line_20 $$ Properties properties = builder.getProperties()-->Line_21 $$ properties.load(inputStream)[ FD ]
Line_14 $$ try (Builder builder = new Builder();-->Line_22 $$ try (Jar jar = builder.build()) [ FD ]
Line_2 $$ protected InputStream createBundle(Class<?> clazz) throws Exception -->Line_10 $$ String packageName = pkg.getName()[ CD ]
Line_10 $$ String packageName = pkg.getName()-->Line_11 $$ int index = basePath.indexOf(packageName.replace('.', '/') + '/')[ FD ]
Line_14 $$ try (Builder builder = new Builder();-->Line_20 $$ Properties properties = builder.getProperties()[ FD ]
Line_23 $$ UnsyncByteArrayOutputStream outputStream = new UnsyncByteArrayOutputStream()-->Line_24 $$ jar.write(outputStream)[ FD ]
Line_22 $$ try (Jar jar = builder.build()) -->Line_24 $$ jar.write(outputStream)[ FD ]
Line_2 $$ protected InputStream createBundle(Class<?> clazz) throws Exception -->Line_9 $$ Package pkg = clazz.getPackage()[ CD ]
Line_14 $$ try (Builder builder = new Builder();-->Line_19 $$ builder.setProperty("bundle.package", packageName + "." + _bundlePackageName)[ FD ]
Line_2 $$ protected InputStream createBundle(Class<?> clazz) throws Exception -->Line_5 $$ if (!protocol.equals("file")) [ CD ]
Line_8 $$ String basePath = url.getPath()-->Line_11 $$ int index = basePath.indexOf(packageName.replace('.', '/') + '/')[ FD ]
Line_3 $$ URL url = clazz.getResource("")-->Line_4 $$ String protocol = url.getProtocol()[ FD ]
Line_2 $$ protected InputStream createBundle(Class<?> clazz) throws Exception -->Line_11 $$ int index = basePath.indexOf(packageName.replace('.', '/') + '/')[ CD ]
Line_2 $$ protected InputStream createBundle(Class<?> clazz) throws Exception -->Line_14 $$ try (Builder builder = new Builder();[ FD ]
Line_2 $$ protected InputStream createBundle(Class<?> clazz) throws Exception -->Line_4 $$ String protocol = url.getProtocol()[ CD ]
Line_14 $$ try (Builder builder = new Builder();-->Line_16 $$ builder.setBundleSymbolicName(clazz.getName())[ FD ]
Line_14 $$ try (Builder builder = new Builder();-->Line_17 $$ builder.setBase(baseDir)[ FD ]
Line_4 $$ String protocol = url.getProtocol()-->Line_5 $$ if (!protocol.equals("file")) [ FD ]
Line_2 $$ protected InputStream createBundle(Class<?> clazz) throws Exception -->Line_8 $$ String basePath = url.getPath()[ CD ]
Line_2 $$ protected InputStream createBundle(Class<?> clazz) throws Exception -->Line_13 $$ File baseDir = new File(basePath)[ CD ]
Line_2 $$ protected InputStream createBundle(Class<?> clazz) throws Exception -->Line_12 $$ basePath = basePath.substring(0, index)[ CD ]
Line_11 $$ int index = basePath.indexOf(packageName.replace('.', '/') + '/')-->Line_12 $$ basePath = basePath.substring(0, index)[ FD ]
Line_14 $$ try (Builder builder = new Builder();-->Line_21 $$ properties.load(inputStream)[ FD ]
Line_2 $$ protected InputStream createBundle(Class<?> clazz) throws Exception -->Line_16 $$ builder.setBundleSymbolicName(clazz.getName())[ FD ]
Line_8 $$ String basePath = url.getPath()-->Line_12 $$ basePath = basePath.substring(0, index)[ FD ]
Line_23 $$ UnsyncByteArrayOutputStream outputStream = new UnsyncByteArrayOutputStream()-->Line_25 $$ return new UnsyncByteArrayInputStream(outputStream.unsafeGetByteArray(), 0, outputStream.size())[ FD ]
Line_14 $$ try (Builder builder = new Builder();-->Line_18 $$ builder.setClasspath(new File[] [ FD ]
Line_9 $$ Package pkg = clazz.getPackage()-->Line_10 $$ String packageName = pkg.getName()[ FD ]
Line_2 $$ protected InputStream createBundle(Class<?> clazz) throws Exception -->Line_3 $$ URL url = clazz.getResource("")[ FD ]
Line_2 $$ protected InputStream createBundle(Class<?> clazz) throws Exception -->Line_3 $$ URL url = clazz.getResource("")[ CD ]
