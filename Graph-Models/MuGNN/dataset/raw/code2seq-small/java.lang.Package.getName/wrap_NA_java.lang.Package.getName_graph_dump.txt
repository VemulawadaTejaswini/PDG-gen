Line_2 $$ public static <T> T wrap(T bean) -->Line_4 $$ if (clazz.isPrimitive()) [ CD ]
Line_4 $$ if (clazz.isPrimitive()) -->Line_5 $$ return bean[ CD ]
Line_2 $$ public static <T> T wrap(T bean) -->Line_3 $$ Class<?> clazz = bean.getClass()[ FD ]
Line_3 $$ Class<?> clazz = bean.getClass()-->Line_4 $$ if (clazz.isPrimitive()) [ FD ]
Line_9 $$ String packageName = pkg.getName()-->Line_10 $$ if (packageName.startsWith("java.")) [ FD ]
Line_3 $$ Class<?> clazz = bean.getClass()-->Line_7 $$ Package pkg = clazz.getPackage()[ FD ]
Line_2 $$ public static <T> T wrap(T bean) -->Line_18 $$ return AccessController.doPrivileged(new BeanPrivilegedAction<T>(bean, interfaces))[ CD ]
Line_2 $$ public static <T> T wrap(T bean) -->Line_3 $$ Class<?> clazz = bean.getClass()[ CD ]
Line_8 $$ if (pkg != null) -->Line_9 $$ String packageName = pkg.getName()[ CD ]
Line_10 $$ if (packageName.startsWith("java.")) -->Line_11 $$ return bean[ CD ]
Line_7 $$ Package pkg = clazz.getPackage()-->Line_9 $$ String packageName = pkg.getName()[ FD ]
Line_7 $$ Package pkg = clazz.getPackage()-->Line_8 $$ if (pkg != null) [ FD ]
Line_2 $$ public static <T> T wrap(T bean) -->Line_7 $$ Package pkg = clazz.getPackage()[ CD ]
Line_2 $$ public static <T> T wrap(T bean) -->Line_8 $$ if (pkg != null) [ CD ]
Line_8 $$ if (pkg != null) -->Line_10 $$ if (packageName.startsWith("java.")) [ CD ]
Line_2 $$ public static <T> T wrap(T bean) -->Line_14 $$ Class<?>[] interfaces = ReflectionUtil.getInterfaces(bean)[ CD ]
Line_2 $$ public static <T> T wrap(T bean) -->Line_14 $$ Class<?>[] interfaces = ReflectionUtil.getInterfaces(bean)[ FD ]
Line_15 $$ if (interfaces.length <= 0) -->Line_16 $$ return bean[ CD ]
Line_2 $$ public static <T> T wrap(T bean) -->Line_15 $$ if (interfaces.length <= 0) [ CD ]
