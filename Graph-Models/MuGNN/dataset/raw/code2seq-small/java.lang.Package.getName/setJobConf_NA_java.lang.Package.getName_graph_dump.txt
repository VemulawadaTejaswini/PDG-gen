Line_147 $$ c = StreamUtil.goodClassOrNull(jobConf_, outputFormatSpec_, defaultPackage)-->Line_165 $$ jobConf_.setPartitionerClass(c)[ FD ]
Line_74 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)-->Line_132 $$ if (c != null) [ FD ]
Line_61 $$ boolean isMapperACommand = false-->Line_109 $$ if (isMapperACommand || jobConf_.get("stream.map.output") != null) [ FD ]
Line_24 $$ fmt = TextInputFormat.class-->Line_158 $$ LazyOutputFormat.setOutputFormatClass(jobConf_, fmt)[ FD ]
Line_63 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_76 $$ jobConf_.setCombinerClass(c)[ FD ]
Line_25 $$ if (inputFormatSpec_.equals(KeyValueTextInputFormat.class.getName()) || inputFormatSpec_.equals(KeyValueTextInputFormat.class.getCanonicalName()) || inputFormatSpec_.equals(KeyValueTextInputFormat.class.getSimpleName())) -->Line_26 $$ if (inReaderSpec_ == null) [ CD ]
Line_38 $$ fmt = c-->Line_154 $$ if (fmt == null) [ FD ]
Line_21 $$ fmt = TextInputFormat.class-->Line_45 $$ fmt = StreamInputFormat.class[ FD ]
Line_145 $$ fmt = null-->Line_158 $$ LazyOutputFormat.setOutputFormatClass(jobConf_, fmt)[ FD ]
Line_63 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_133 $$ jobConf_.set("stream.recordreader.class", c.getName())[ FD ]
Line_36 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_38 $$ fmt = c[ FD ]
Line_24 $$ fmt = TextInputFormat.class-->Line_145 $$ fmt = null[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_196 $$ msg("submitting to jobconf: " + getJobTrackerHostPort())[ CD ]
Line_63 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_147 $$ c = StreamUtil.goodClassOrNull(jobConf_, outputFormatSpec_, defaultPackage)[ FD ]
Line_75 $$ if (c != null) -->Line_78 $$ jobConf_.setCombinerClass(PipeCombiner.class)[ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_3 $$ if (additionalConfSpec_ != null) [ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_59 $$ jobConf_.setClass("stream.reduce.input.writer.class", idResolver.getInputWriterClass(), InputWriter.class)[ CD ]
Line_21 $$ fmt = TextInputFormat.class-->Line_160 $$ jobConf_.setOutputFormat(fmt)[ FD ]
Line_27 $$ fmt = KeyValueTextInputFormat.class-->Line_45 $$ fmt = StreamInputFormat.class[ FD ]
Line_148 $$ if (c != null) -->Line_151 $$ fail("-outputformat : class not found : " + outputFormatSpec_)[ CD ]
Line_86 $$ boolean isReducerACommand = false-->Line_100 $$ isReducerACommand = true[ FD ]
Line_114 $$ if (jobConf_.getNumReduceTasks() == 0) -->Line_116 $$ jobConf_.setOutputValueClass(idResolver.getOutputValueClass())[ CD ]
Line_24 $$ fmt = TextInputFormat.class-->Line_27 $$ fmt = KeyValueTextInputFormat.class[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_108 $$ jobConf_.setClass("stream.map.output.reader.class", idResolver.getOutputReaderClass(), OutputReader.class)[ CD ]
Line_18 $$ Class c-->Line_96 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)[ FD ]
Line_36 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_37 $$ if (c != null) [ FD ]
Line_18 $$ Class c-->Line_63 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)[ FD ]
Line_86 $$ boolean isReducerACommand = false-->Line_121 $$ if (isReducerACommand || jobConf_.get("stream.reduce.output") != null) [ FD ]
Line_96 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)-->Line_165 $$ jobConf_.setPartitionerClass(c)[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_55 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)[ CD ]
Line_45 $$ fmt = StreamInputFormat.class-->Line_149 $$ fmt = c[ FD ]
Line_21 $$ fmt = TextInputFormat.class-->Line_34 $$ fmt = SequenceFileAsTextInputFormat.class[ FD ]
Line_96 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)-->Line_163 $$ c = StreamUtil.goodClassOrNull(jobConf_, partitionerSpec_, defaultPackage)[ FD ]
Line_137 $$ for (int i = 1; i < args.length; i++) -->Line_139 $$ String k = "stream.recordreader." + nv[0][ CD ]
Line_18 $$ Class c-->Line_98 $$ jobConf_.setReducerClass(c)[ FD ]
Line_31 $$ fmt = SequenceFileInputFormat.class-->Line_34 $$ fmt = SequenceFileAsTextInputFormat.class[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_170 $$ if (mapDebugSpec_ != null) [ CD ]
Line_63 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_97 $$ if (c != null) [ FD ]
Line_18 $$ Class c-->Line_148 $$ if (c != null) [ FD ]
Line_140 $$ String v = (nv.length > 1) ? nv[1] : ""-->Line_141 $$ jobConf_.set(k, v)[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_182 $$ if ((cacheArchives != null) || (cacheFiles != null)) [ CD ]
Line_17 $$ String defaultPackage = this.getClass().getPackage().getName()-->Line_63 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)[ FD ]
Line_61 $$ boolean isMapperACommand = false-->Line_67 $$ isMapperACommand = true[ FD ]
Line_74 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)-->Line_133 $$ jobConf_.set("stream.recordreader.class", c.getName())[ FD ]
Line_97 $$ if (c != null) -->Line_100 $$ isReducerACommand = true[ CD ]
Line_18 $$ Class c-->Line_149 $$ fmt = c[ FD ]
Line_157 $$ if (lazyOutput_) -->Line_160 $$ jobConf_.setOutputFormat(fmt)[ CD ]
Line_132 $$ if (c != null) -->Line_135 $$ fail("-inputreader: class not found: " + readerClass)[ CD ]
Line_63 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_148 $$ if (c != null) [ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_58 $$ idResolver.resolve(jobConf_.get("stream.reduce.input", IdentifierResolver.TEXT_ID))[ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_179 $$ if (jar_ != null) [ CD ]
Line_26 $$ if (inReaderSpec_ == null) -->Line_27 $$ fmt = KeyValueTextInputFormat.class[ CD ]
Line_36 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_133 $$ jobConf_.set("stream.recordreader.class", c.getName())[ FD ]
Line_34 $$ fmt = SequenceFileAsTextInputFormat.class-->Line_45 $$ fmt = StreamInputFormat.class[ FD ]
Line_21 $$ fmt = TextInputFormat.class-->Line_24 $$ fmt = TextInputFormat.class[ FD ]
Line_121 $$ if (isReducerACommand || jobConf_.get("stream.reduce.output") != null) -->Line_125 $$ jobConf_.setOutputValueClass(idResolver.getOutputValueClass())[ CD ]
Line_27 $$ fmt = KeyValueTextInputFormat.class-->Line_38 $$ fmt = c[ FD ]
Line_38 $$ fmt = c-->Line_155 $$ fmt = TextOutputFormat.class[ FD ]
Line_127 $$ if (inReaderSpec_ != null) -->Line_129 $$ String readerClass = args[0][ CD ]
Line_18 $$ Class c-->Line_133 $$ jobConf_.set("stream.recordreader.class", c.getName())[ FD ]
Line_55 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)-->Line_107 $$ idResolver.resolve(jobConf_.get("stream.map.output", IdentifierResolver.TEXT_ID))[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_20 $$ if (inReaderSpec_ == null && inputFormatSpec_ == null) [ CD ]
Line_82 $$ if (numReduceTasksSpec_ != null) -->Line_84 $$ jobConf_.setNumReduceTasks(numReduceTasks)[ CD ]
Line_38 $$ fmt = c-->Line_158 $$ LazyOutputFormat.setOutputFormatClass(jobConf_, fmt)[ FD ]
Line_18 $$ Class c-->Line_36 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_17 $$ String defaultPackage = this.getClass().getPackage().getName()[ CD ]
Line_179 $$ if (jar_ != null) -->Line_180 $$ jobConf_.setJar(jar_)[ CD ]
Line_92 $$ if (redCmd_.compareToIgnoreCase("aggregate") == 0) -->Line_93 $$ jobConf_.setReducerClass(ValueAggregatorReducer.class)[ CD ]
Line_92 $$ if (redCmd_.compareToIgnoreCase("aggregate") == 0) -->Line_96 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)[ CD ]
Line_24 $$ fmt = TextInputFormat.class-->Line_34 $$ fmt = SequenceFileAsTextInputFormat.class[ FD ]
Line_20 $$ if (inReaderSpec_ == null && inputFormatSpec_ == null) -->Line_22 $$ if (inputFormatSpec_ != null) [ CD ]
Line_164 $$ if (c != null) -->Line_167 $$ fail("-partitioner : class not found : " + partitionerSpec_)[ CD ]
Line_44 $$ if (fmt == null) -->Line_45 $$ fmt = StreamInputFormat.class[ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_73 $$ if (comCmd_ != null) [ CD ]
Line_148 $$ if (c != null) -->Line_149 $$ fmt = c[ CD ]
Line_127 $$ if (inReaderSpec_ != null) -->Line_128 $$ String[] args = inReaderSpec_.split(",")[ CD ]
Line_45 $$ fmt = StreamInputFormat.class-->Line_155 $$ fmt = TextOutputFormat.class[ FD ]
Line_48 $$ if (ioSpec_ != null) -->Line_52 $$ jobConf_.set("stream.reduce.output", ioSpec_)[ CD ]
Line_75 $$ if (c != null) -->Line_76 $$ jobConf_.setCombinerClass(c)[ CD ]
Line_37 $$ if (c != null) -->Line_40 $$ fail("-inputformat : class not found : " + inputFormatSpec_)[ CD ]
Line_18 $$ Class c-->Line_38 $$ fmt = c[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_56 $$ idResolver.resolve(jobConf_.get("stream.map.input", IdentifierResolver.TEXT_ID))[ CD ]
Line_145 $$ fmt = null-->Line_149 $$ fmt = c[ FD ]
Line_109 $$ if (isMapperACommand || jobConf_.get("stream.map.output") != null) -->Line_114 $$ if (jobConf_.getNumReduceTasks() == 0) [ CD ]
Line_18 $$ Class c-->Line_37 $$ if (c != null) [ FD ]
Line_19 $$ Class fmt = null-->Line_160 $$ jobConf_.setOutputFormat(fmt)[ FD ]
Line_149 $$ fmt = c-->Line_154 $$ if (fmt == null) [ FD ]
Line_96 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)-->Line_149 $$ fmt = c[ FD ]
Line_18 $$ Class c-->Line_75 $$ if (c != null) [ FD ]
Line_147 $$ c = StreamUtil.goodClassOrNull(jobConf_, outputFormatSpec_, defaultPackage)-->Line_148 $$ if (c != null) [ FD ]
Line_27 $$ fmt = KeyValueTextInputFormat.class-->Line_154 $$ if (fmt == null) [ FD ]
Line_36 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_164 $$ if (c != null) [ FD ]
Line_145 $$ fmt = null-->Line_154 $$ if (fmt == null) [ FD ]
Line_97 $$ if (c != null) -->Line_102 $$ jobConf_.set("stream.reduce.streamprocessor", URLEncoder.encode(redCmd_, "UTF-8"))[ CD ]
Line_137 $$ for (int i = 1; i < args.length; i++) -->Line_141 $$ jobConf_.set(k, v)[ CD ]
Line_139 $$ String k = "stream.recordreader." + nv[0]-->Line_141 $$ jobConf_.set(k, v)[ FD ]
Line_55 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)-->Line_59 $$ jobConf_.setClass("stream.reduce.input.writer.class", idResolver.getInputWriterClass(), InputWriter.class)[ FD ]
Line_17 $$ String defaultPackage = this.getClass().getPackage().getName()-->Line_74 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)[ FD ]
Line_31 $$ fmt = SequenceFileInputFormat.class-->Line_149 $$ fmt = c[ FD ]
Line_83 $$ int numReduceTasks = Integer.parseInt(numReduceTasksSpec_)-->Line_84 $$ jobConf_.setNumReduceTasks(numReduceTasks)[ FD ]
Line_27 $$ fmt = KeyValueTextInputFormat.class-->Line_160 $$ jobConf_.setOutputFormat(fmt)[ FD ]
Line_21 $$ fmt = TextInputFormat.class-->Line_31 $$ fmt = SequenceFileInputFormat.class[ FD ]
Line_36 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_63 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_173 $$ if (reduceDebugSpec_ != null) [ CD ]
Line_24 $$ fmt = TextInputFormat.class-->Line_31 $$ fmt = SequenceFileInputFormat.class[ FD ]
Line_96 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)-->Line_147 $$ c = StreamUtil.goodClassOrNull(jobConf_, outputFormatSpec_, defaultPackage)[ FD ]
Line_21 $$ fmt = TextInputFormat.class-->Line_47 $$ jobConf_.setInputFormat(fmt)[ FD ]
Line_19 $$ Class fmt = null-->Line_47 $$ jobConf_.setInputFormat(fmt)[ FD ]
Line_96 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)-->Line_98 $$ jobConf_.setReducerClass(c)[ FD ]
Line_17 $$ String defaultPackage = this.getClass().getPackage().getName()-->Line_36 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)[ FD ]
Line_20 $$ if (inReaderSpec_ == null && inputFormatSpec_ == null) -->Line_21 $$ fmt = TextInputFormat.class[ CD ]
Line_74 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)-->Line_147 $$ c = StreamUtil.goodClassOrNull(jobConf_, outputFormatSpec_, defaultPackage)[ FD ]
Line_36 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_163 $$ c = StreamUtil.goodClassOrNull(jobConf_, partitionerSpec_, defaultPackage)[ FD ]
Line_74 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)-->Line_98 $$ jobConf_.setReducerClass(c)[ FD ]
Line_147 $$ c = StreamUtil.goodClassOrNull(jobConf_, outputFormatSpec_, defaultPackage)-->Line_149 $$ fmt = c[ FD ]
Line_25 $$ if (inputFormatSpec_.equals(KeyValueTextInputFormat.class.getName()) || inputFormatSpec_.equals(KeyValueTextInputFormat.class.getCanonicalName()) || inputFormatSpec_.equals(KeyValueTextInputFormat.class.getSimpleName())) -->Line_29 $$ if (inputFormatSpec_.equals(SequenceFileInputFormat.class.getName()) || inputFormatSpec_.equals(org.apache.hadoop.mapred.SequenceFileInputFormat.class.getCanonicalName()) || inputFormatSpec_.equals(org.apache.hadoop.mapred.SequenceFileInputFormat.class.getSimpleName())) [ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_145 $$ fmt = null[ CD ]
Line_21 $$ fmt = TextInputFormat.class-->Line_27 $$ fmt = KeyValueTextInputFormat.class[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_57 $$ jobConf_.setClass("stream.map.input.writer.class", idResolver.getInputWriterClass(), InputWriter.class)[ CD ]
Line_163 $$ c = StreamUtil.goodClassOrNull(jobConf_, partitionerSpec_, defaultPackage)-->Line_164 $$ if (c != null) [ FD ]
Line_185 $$ if (!b)-->Line_186 $$ fail(LINK_URI)[ CD ]
Line_36 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_64 $$ if (c != null) [ FD ]
Line_24 $$ fmt = TextInputFormat.class-->Line_38 $$ fmt = c[ FD ]
Line_33 $$ if (inputFormatSpec_.equals(SequenceFileAsTextInputFormat.class.getName()) || inputFormatSpec_.equals(SequenceFileAsTextInputFormat.class.getCanonicalName()) || inputFormatSpec_.equals(SequenceFileAsTextInputFormat.class.getSimpleName())) -->Line_36 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)[ CD ]
Line_184 $$ boolean b = DistributedCache.checkURIs(fileURIs, archiveURIs)-->Line_185 $$ if (!b)[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_154 $$ if (fmt == null) [ CD ]
Line_23 $$ if (inputFormatSpec_.equals(TextInputFormat.class.getName()) || inputFormatSpec_.equals(TextInputFormat.class.getCanonicalName()) || inputFormatSpec_.equals(TextInputFormat.class.getSimpleName())) -->Line_25 $$ if (inputFormatSpec_.equals(KeyValueTextInputFormat.class.getName()) || inputFormatSpec_.equals(KeyValueTextInputFormat.class.getCanonicalName()) || inputFormatSpec_.equals(KeyValueTextInputFormat.class.getSimpleName())) [ CD ]
Line_55 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)-->Line_119 $$ idResolver.resolve(jobConf_.get("stream.reduce.output", IdentifierResolver.TEXT_ID))[ FD ]
Line_27 $$ fmt = KeyValueTextInputFormat.class-->Line_31 $$ fmt = SequenceFileInputFormat.class[ FD ]
Line_48 $$ if (ioSpec_ != null) -->Line_50 $$ jobConf_.set("stream.map.output", ioSpec_)[ CD ]
Line_97 $$ if (c != null) -->Line_98 $$ jobConf_.setReducerClass(c)[ CD ]
Line_19 $$ Class fmt = null-->Line_149 $$ fmt = c[ FD ]
Line_23 $$ if (inputFormatSpec_.equals(TextInputFormat.class.getName()) || inputFormatSpec_.equals(TextInputFormat.class.getCanonicalName()) || inputFormatSpec_.equals(TextInputFormat.class.getSimpleName())) -->Line_24 $$ fmt = TextInputFormat.class[ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_19 $$ Class fmt = null[ CD ]
Line_55 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)-->Line_108 $$ jobConf_.setClass("stream.map.output.reader.class", idResolver.getOutputReaderClass(), OutputReader.class)[ FD ]
Line_34 $$ fmt = SequenceFileAsTextInputFormat.class-->Line_47 $$ jobConf_.setInputFormat(fmt)[ FD ]
Line_19 $$ Class fmt = null-->Line_44 $$ if (fmt == null) [ FD ]
Line_21 $$ fmt = TextInputFormat.class-->Line_154 $$ if (fmt == null) [ FD ]
Line_191 $$ if (cacheFiles != null)-->Line_192 $$ DistributedCache.setCacheFiles(fileURIs, jobConf_)[ CD ]
Line_147 $$ c = StreamUtil.goodClassOrNull(jobConf_, outputFormatSpec_, defaultPackage)-->Line_163 $$ c = StreamUtil.goodClassOrNull(jobConf_, partitionerSpec_, defaultPackage)[ FD ]
Line_62 $$ if (mapCmd_ != null) -->Line_64 $$ if (c != null) [ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_127 $$ if (inReaderSpec_ != null) [ CD ]
Line_163 $$ c = StreamUtil.goodClassOrNull(jobConf_, partitionerSpec_, defaultPackage)-->Line_165 $$ jobConf_.setPartitionerClass(c)[ FD ]
Line_18 $$ Class c-->Line_163 $$ c = StreamUtil.goodClassOrNull(jobConf_, partitionerSpec_, defaultPackage)[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_162 $$ if (partitionerSpec_ != null) [ CD ]
Line_149 $$ fmt = c-->Line_155 $$ fmt = TextOutputFormat.class[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_48 $$ if (ioSpec_ != null) [ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_86 $$ boolean isReducerACommand = false[ CD ]
Line_18 $$ Class c-->Line_132 $$ if (c != null) [ FD ]
Line_27 $$ fmt = KeyValueTextInputFormat.class-->Line_47 $$ jobConf_.setInputFormat(fmt)[ FD ]
Line_109 $$ if (isMapperACommand || jobConf_.get("stream.map.output") != null) -->Line_113 $$ jobConf_.setMapOutputValueClass(idResolver.getOutputValueClass())[ CD ]
Line_75 $$ if (c != null) -->Line_79 $$ jobConf_.set("stream.combine.streamprocessor", URLEncoder.encode(comCmd_, "UTF-8"))[ CD ]
Line_45 $$ fmt = StreamInputFormat.class-->Line_145 $$ fmt = null[ FD ]
Line_63 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_165 $$ jobConf_.setPartitionerClass(c)[ FD ]
Line_30 $$ if (inReaderSpec_ == null) -->Line_31 $$ fmt = SequenceFileInputFormat.class[ CD ]
Line_64 $$ if (c != null) -->Line_69 $$ jobConf_.setMapRunnerClass(PipeMapRunner.class)[ CD ]
Line_64 $$ if (c != null) -->Line_70 $$ jobConf_.set("stream.map.streamprocessor", URLEncoder.encode(mapCmd_, "UTF-8"))[ CD ]
Line_193 $$ if (verbose_) -->Line_194 $$ listJobConfProperties()[ CD ]
Line_147 $$ c = StreamUtil.goodClassOrNull(jobConf_, outputFormatSpec_, defaultPackage)-->Line_164 $$ if (c != null) [ FD ]
Line_21 $$ fmt = TextInputFormat.class-->Line_149 $$ fmt = c[ FD ]
Line_63 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_65 $$ jobConf_.setMapperClass(c)[ FD ]
Line_149 $$ fmt = c-->Line_160 $$ jobConf_.setOutputFormat(fmt)[ FD ]
Line_45 $$ fmt = StreamInputFormat.class-->Line_158 $$ LazyOutputFormat.setOutputFormatClass(jobConf_, fmt)[ FD ]
Line_132 $$ if (c != null) -->Line_133 $$ jobConf_.set("stream.recordreader.class", c.getName())[ CD ]
Line_170 $$ if (mapDebugSpec_ != null) -->Line_171 $$ jobConf_.setMapDebugScript(mapDebugSpec_)[ CD ]
Line_97 $$ if (c != null) -->Line_101 $$ jobConf_.setReducerClass(PipeReducer.class)[ CD ]
Line_18 $$ Class c-->Line_165 $$ jobConf_.setPartitionerClass(c)[ FD ]
Line_74 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)-->Line_96 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)[ FD ]
Line_74 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)-->Line_97 $$ if (c != null) [ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_44 $$ if (fmt == null) [ CD ]
Line_55 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)-->Line_116 $$ jobConf_.setOutputValueClass(idResolver.getOutputValueClass())[ FD ]
Line_155 $$ fmt = TextOutputFormat.class-->Line_160 $$ jobConf_.setOutputFormat(fmt)[ FD ]
Line_146 $$ if (outputFormatSpec_ != null) -->Line_147 $$ c = StreamUtil.goodClassOrNull(jobConf_, outputFormatSpec_, defaultPackage)[ CD ]
Line_21 $$ fmt = TextInputFormat.class-->Line_155 $$ fmt = TextOutputFormat.class[ FD ]
Line_36 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_75 $$ if (c != null) [ FD ]
Line_87 $$ if (redCmd_ != null) -->Line_91 $$ if (jobConf_.getNumReduceTasks() != 0) [ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_107 $$ idResolver.resolve(jobConf_.get("stream.map.output", IdentifierResolver.TEXT_ID))[ CD ]
Line_182 $$ if ((cacheArchives != null) || (cacheFiles != null)) -->Line_184 $$ boolean b = DistributedCache.checkURIs(fileURIs, archiveURIs)[ CD ]
Line_34 $$ fmt = SequenceFileAsTextInputFormat.class-->Line_158 $$ LazyOutputFormat.setOutputFormatClass(jobConf_, fmt)[ FD ]
Line_63 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_74 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)[ FD ]
Line_24 $$ fmt = TextInputFormat.class-->Line_160 $$ jobConf_.setOutputFormat(fmt)[ FD ]
Line_164 $$ if (c != null) -->Line_165 $$ jobConf_.setPartitionerClass(c)[ CD ]
Line_96 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)-->Line_164 $$ if (c != null) [ FD ]
Line_19 $$ Class fmt = null-->Line_27 $$ fmt = KeyValueTextInputFormat.class[ FD ]
Line_157 $$ if (lazyOutput_) -->Line_158 $$ LazyOutputFormat.setOutputFormatClass(jobConf_, fmt)[ CD ]
Line_27 $$ fmt = KeyValueTextInputFormat.class-->Line_145 $$ fmt = null[ FD ]
Line_91 $$ if (jobConf_.getNumReduceTasks() != 0) -->Line_92 $$ if (redCmd_.compareToIgnoreCase("aggregate") == 0) [ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_47 $$ jobConf_.setInputFormat(fmt)[ CD ]
Line_74 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)-->Line_75 $$ if (c != null) [ FD ]
Line_182 $$ if ((cacheArchives != null) || (cacheFiles != null)) -->Line_183 $$ getURIs(cacheArchives, cacheFiles)[ CD ]
Line_63 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_132 $$ if (c != null) [ FD ]
Line_31 $$ fmt = SequenceFileInputFormat.class-->Line_47 $$ jobConf_.setInputFormat(fmt)[ FD ]
Line_74 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)-->Line_163 $$ c = StreamUtil.goodClassOrNull(jobConf_, partitionerSpec_, defaultPackage)[ FD ]
Line_18 $$ Class c-->Line_74 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)[ FD ]
Line_149 $$ fmt = c-->Line_158 $$ LazyOutputFormat.setOutputFormatClass(jobConf_, fmt)[ FD ]
Line_31 $$ fmt = SequenceFileInputFormat.class-->Line_155 $$ fmt = TextOutputFormat.class[ FD ]
Line_92 $$ if (redCmd_.compareToIgnoreCase("aggregate") == 0) -->Line_97 $$ if (c != null) [ CD ]
Line_19 $$ Class fmt = null-->Line_21 $$ fmt = TextInputFormat.class[ FD ]
Line_24 $$ fmt = TextInputFormat.class-->Line_47 $$ jobConf_.setInputFormat(fmt)[ FD ]
Line_36 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_96 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_60 $$ jobConf_.set("stream.addenvironment", addTaskEnvironment_)[ CD ]
Line_74 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)-->Line_149 $$ fmt = c[ FD ]
Line_18 $$ Class c-->Line_147 $$ c = StreamUtil.goodClassOrNull(jobConf_, outputFormatSpec_, defaultPackage)[ FD ]
Line_55 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)-->Line_120 $$ jobConf_.setClass("stream.reduce.output.reader.class", idResolver.getOutputReaderClass(), OutputReader.class)[ FD ]
Line_31 $$ fmt = SequenceFileInputFormat.class-->Line_158 $$ LazyOutputFormat.setOutputFormatClass(jobConf_, fmt)[ FD ]
Line_82 $$ if (numReduceTasksSpec_ != null) -->Line_83 $$ int numReduceTasks = Integer.parseInt(numReduceTasksSpec_)[ CD ]
Line_3 $$ if (additionalConfSpec_ != null) -->Line_4 $$ LOG.warn("-additionalconfspec option is deprecated, please use -conf instead.")[ CD ]
Line_29 $$ if (inputFormatSpec_.equals(SequenceFileInputFormat.class.getName()) || inputFormatSpec_.equals(org.apache.hadoop.mapred.SequenceFileInputFormat.class.getCanonicalName()) || inputFormatSpec_.equals(org.apache.hadoop.mapred.SequenceFileInputFormat.class.getSimpleName())) -->Line_33 $$ if (inputFormatSpec_.equals(SequenceFileAsTextInputFormat.class.getName()) || inputFormatSpec_.equals(SequenceFileAsTextInputFormat.class.getCanonicalName()) || inputFormatSpec_.equals(SequenceFileAsTextInputFormat.class.getSimpleName())) [ CD ]
Line_27 $$ fmt = KeyValueTextInputFormat.class-->Line_44 $$ if (fmt == null) [ FD ]
Line_88 $$ if (redCmd_.equals(REDUCE_NONE)) -->Line_89 $$ jobConf_.setNumReduceTasks(0)[ CD ]
Line_31 $$ fmt = SequenceFileInputFormat.class-->Line_38 $$ fmt = c[ FD ]
Line_18 $$ Class c-->Line_97 $$ if (c != null) [ FD ]
Line_31 $$ fmt = SequenceFileInputFormat.class-->Line_154 $$ if (fmt == null) [ FD ]
Line_96 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)-->Line_133 $$ jobConf_.set("stream.recordreader.class", c.getName())[ FD ]
Line_55 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)-->Line_125 $$ jobConf_.setOutputValueClass(idResolver.getOutputValueClass())[ FD ]
Line_67 $$ isMapperACommand = true-->Line_109 $$ if (isMapperACommand || jobConf_.get("stream.map.output") != null) [ FD ]
Line_36 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_98 $$ jobConf_.setReducerClass(c)[ FD ]
Line_31 $$ fmt = SequenceFileInputFormat.class-->Line_45 $$ fmt = StreamInputFormat.class[ FD ]
Line_27 $$ fmt = KeyValueTextInputFormat.class-->Line_34 $$ fmt = SequenceFileAsTextInputFormat.class[ FD ]
Line_63 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_164 $$ if (c != null) [ FD ]
Line_19 $$ Class fmt = null-->Line_38 $$ fmt = c[ FD ]
Line_38 $$ fmt = c-->Line_149 $$ fmt = c[ FD ]
Line_33 $$ if (inputFormatSpec_.equals(SequenceFileAsTextInputFormat.class.getName()) || inputFormatSpec_.equals(SequenceFileAsTextInputFormat.class.getCanonicalName()) || inputFormatSpec_.equals(SequenceFileAsTextInputFormat.class.getSimpleName())) -->Line_37 $$ if (c != null) [ CD ]
Line_34 $$ fmt = SequenceFileAsTextInputFormat.class-->Line_160 $$ jobConf_.setOutputFormat(fmt)[ FD ]
Line_162 $$ if (partitionerSpec_ != null) -->Line_163 $$ c = StreamUtil.goodClassOrNull(jobConf_, partitionerSpec_, defaultPackage)[ CD ]
Line_137 $$ for (int i = 1; i < args.length; i++) -->Line_138 $$ String[] nv = args[i].split("=", 2)[ CD ]
Line_45 $$ fmt = StreamInputFormat.class-->Line_154 $$ if (fmt == null) [ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_120 $$ jobConf_.setClass("stream.reduce.output.reader.class", idResolver.getOutputReaderClass(), OutputReader.class)[ CD ]
Line_37 $$ if (c != null) -->Line_38 $$ fmt = c[ CD ]
Line_36 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_149 $$ fmt = c[ FD ]
Line_63 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_75 $$ if (c != null) [ FD ]
Line_45 $$ fmt = StreamInputFormat.class-->Line_160 $$ jobConf_.setOutputFormat(fmt)[ FD ]
Line_21 $$ fmt = TextInputFormat.class-->Line_145 $$ fmt = null[ FD ]
Line_17 $$ String defaultPackage = this.getClass().getPackage().getName()-->Line_147 $$ c = StreamUtil.goodClassOrNull(jobConf_, outputFormatSpec_, defaultPackage)[ FD ]
Line_63 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_149 $$ fmt = c[ FD ]
Line_36 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_65 $$ jobConf_.setMapperClass(c)[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_54 $$ Class<? extends IdentifierResolver> idResolverClass = jobConf_.getClass("stream.io.identifier.resolver.class", IdentifierResolver.class, IdentifierResolver.class)[ CD ]
Line_137 $$ for (int i = 1; i < args.length; i++) -->Line_140 $$ String v = (nv.length > 1) ? nv[1] : ""[ CD ]
Line_34 $$ fmt = SequenceFileAsTextInputFormat.class-->Line_154 $$ if (fmt == null) [ FD ]
Line_74 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)-->Line_148 $$ if (c != null) [ FD ]
Line_55 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)-->Line_115 $$ jobConf_.setOutputKeyClass(idResolver.getOutputKeyClass())[ FD ]
Line_29 $$ if (inputFormatSpec_.equals(SequenceFileInputFormat.class.getName()) || inputFormatSpec_.equals(org.apache.hadoop.mapred.SequenceFileInputFormat.class.getCanonicalName()) || inputFormatSpec_.equals(org.apache.hadoop.mapred.SequenceFileInputFormat.class.getSimpleName())) -->Line_30 $$ if (inReaderSpec_ == null) [ CD ]
Line_45 $$ fmt = StreamInputFormat.class-->Line_47 $$ jobConf_.setInputFormat(fmt)[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_157 $$ if (lazyOutput_) [ CD ]
Line_18 $$ Class c-->Line_64 $$ if (c != null) [ FD ]
Line_34 $$ fmt = SequenceFileAsTextInputFormat.class-->Line_44 $$ if (fmt == null) [ FD ]
Line_21 $$ fmt = TextInputFormat.class-->Line_38 $$ fmt = c[ FD ]
Line_19 $$ Class fmt = null-->Line_24 $$ fmt = TextInputFormat.class[ FD ]
Line_74 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)-->Line_164 $$ if (c != null) [ FD ]
Line_54 $$ Class<? extends IdentifierResolver> idResolverClass = jobConf_.getClass("stream.io.identifier.resolver.class", IdentifierResolver.class, IdentifierResolver.class)-->Line_55 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)[ FD ]
Line_74 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)-->Line_165 $$ jobConf_.setPartitionerClass(c)[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_82 $$ if (numReduceTasksSpec_ != null) [ CD ]
Line_27 $$ fmt = KeyValueTextInputFormat.class-->Line_155 $$ fmt = TextOutputFormat.class[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_119 $$ idResolver.resolve(jobConf_.get("stream.reduce.output", IdentifierResolver.TEXT_ID))[ CD ]
Line_36 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_147 $$ c = StreamUtil.goodClassOrNull(jobConf_, outputFormatSpec_, defaultPackage)[ FD ]
Line_55 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)-->Line_113 $$ jobConf_.setMapOutputValueClass(idResolver.getOutputValueClass())[ FD ]
Line_96 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)-->Line_97 $$ if (c != null) [ FD ]
Line_100 $$ isReducerACommand = true-->Line_121 $$ if (isReducerACommand || jobConf_.get("stream.reduce.output") != null) [ FD ]
Line_55 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)-->Line_56 $$ idResolver.resolve(jobConf_.get("stream.map.input", IdentifierResolver.TEXT_ID))[ FD ]
Line_27 $$ fmt = KeyValueTextInputFormat.class-->Line_158 $$ LazyOutputFormat.setOutputFormatClass(jobConf_, fmt)[ FD ]
Line_31 $$ fmt = SequenceFileInputFormat.class-->Line_44 $$ if (fmt == null) [ FD ]
Line_96 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)-->Line_148 $$ if (c != null) [ FD ]
Line_38 $$ fmt = c-->Line_47 $$ jobConf_.setInputFormat(fmt)[ FD ]
Line_63 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_98 $$ jobConf_.setReducerClass(c)[ FD ]
Line_18 $$ Class c-->Line_65 $$ jobConf_.setMapperClass(c)[ FD ]
Line_34 $$ fmt = SequenceFileAsTextInputFormat.class-->Line_145 $$ fmt = null[ FD ]
Line_173 $$ if (reduceDebugSpec_ != null) -->Line_174 $$ jobConf_.setReduceDebugScript(reduceDebugSpec_)[ CD ]
Line_55 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)-->Line_58 $$ idResolver.resolve(jobConf_.get("stream.reduce.input", IdentifierResolver.TEXT_ID))[ FD ]
Line_64 $$ if (c != null) -->Line_65 $$ jobConf_.setMapperClass(c)[ CD ]
Line_21 $$ fmt = TextInputFormat.class-->Line_158 $$ LazyOutputFormat.setOutputFormatClass(jobConf_, fmt)[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_18 $$ Class c[ CD ]
Line_146 $$ if (outputFormatSpec_ != null) -->Line_148 $$ if (c != null) [ CD ]
Line_145 $$ fmt = null-->Line_160 $$ jobConf_.setOutputFormat(fmt)[ FD ]
Line_64 $$ if (c != null) -->Line_68 $$ jobConf_.setMapperClass(PipeMapper.class)[ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_109 $$ if (isMapperACommand || jobConf_.get("stream.map.output") != null) [ CD ]
Line_55 $$ IdentifierResolver idResolver = ReflectionUtils.newInstance(idResolverClass, jobConf_)-->Line_57 $$ jobConf_.setClass("stream.map.input.writer.class", idResolver.getInputWriterClass(), InputWriter.class)[ FD ]
Line_64 $$ if (c != null) -->Line_67 $$ isMapperACommand = true[ CD ]
Line_73 $$ if (comCmd_ != null) -->Line_75 $$ if (c != null) [ CD ]
Line_19 $$ Class fmt = null-->Line_145 $$ fmt = null[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_121 $$ if (isReducerACommand || jobConf_.get("stream.reduce.output") != null) [ CD ]
Line_34 $$ fmt = SequenceFileAsTextInputFormat.class-->Line_155 $$ fmt = TextOutputFormat.class[ FD ]
Line_17 $$ String defaultPackage = this.getClass().getPackage().getName()-->Line_96 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)[ FD ]
Line_24 $$ fmt = TextInputFormat.class-->Line_154 $$ if (fmt == null) [ FD ]
Line_33 $$ if (inputFormatSpec_.equals(SequenceFileAsTextInputFormat.class.getName()) || inputFormatSpec_.equals(SequenceFileAsTextInputFormat.class.getCanonicalName()) || inputFormatSpec_.equals(SequenceFileAsTextInputFormat.class.getSimpleName())) -->Line_34 $$ fmt = SequenceFileAsTextInputFormat.class[ CD ]
Line_19 $$ Class fmt = null-->Line_45 $$ fmt = StreamInputFormat.class[ FD ]
Line_63 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_163 $$ c = StreamUtil.goodClassOrNull(jobConf_, partitionerSpec_, defaultPackage)[ FD ]
Line_36 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_74 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)[ FD ]
Line_114 $$ if (jobConf_.getNumReduceTasks() == 0) -->Line_115 $$ jobConf_.setOutputKeyClass(idResolver.getOutputKeyClass())[ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_62 $$ if (mapCmd_ != null) [ CD ]
Line_38 $$ fmt = c-->Line_44 $$ if (fmt == null) [ FD ]
Line_34 $$ fmt = SequenceFileAsTextInputFormat.class-->Line_38 $$ fmt = c[ FD ]
Line_31 $$ fmt = SequenceFileInputFormat.class-->Line_145 $$ fmt = null[ FD ]
Line_87 $$ if (redCmd_ != null) -->Line_88 $$ if (redCmd_.equals(REDUCE_NONE)) [ CD ]
Line_63 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_96 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)[ FD ]
Line_36 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_97 $$ if (c != null) [ FD ]
Line_22 $$ if (inputFormatSpec_ != null) -->Line_23 $$ if (inputFormatSpec_.equals(TextInputFormat.class.getName()) || inputFormatSpec_.equals(TextInputFormat.class.getCanonicalName()) || inputFormatSpec_.equals(TextInputFormat.class.getSimpleName())) [ CD ]
Line_38 $$ fmt = c-->Line_145 $$ fmt = null[ FD ]
Line_19 $$ Class fmt = null-->Line_155 $$ fmt = TextOutputFormat.class[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_61 $$ boolean isMapperACommand = false[ CD ]
Line_19 $$ Class fmt = null-->Line_158 $$ LazyOutputFormat.setOutputFormatClass(jobConf_, fmt)[ FD ]
Line_3 $$ if (additionalConfSpec_ != null) -->Line_5 $$ config_.addResource(new Path(additionalConfSpec_))[ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_191 $$ if (cacheFiles != null)[ CD ]
Line_62 $$ if (mapCmd_ != null) -->Line_63 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)[ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_193 $$ if (verbose_) [ CD ]
Line_63 $$ c = StreamUtil.goodClassOrNull(jobConf_, mapCmd_, defaultPackage)-->Line_64 $$ if (c != null) [ FD ]
Line_36 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_132 $$ if (c != null) [ FD ]
Line_73 $$ if (comCmd_ != null) -->Line_74 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)[ CD ]
Line_19 $$ Class fmt = null-->Line_154 $$ if (fmt == null) [ FD ]
Line_31 $$ fmt = SequenceFileInputFormat.class-->Line_160 $$ jobConf_.setOutputFormat(fmt)[ FD ]
Line_24 $$ fmt = TextInputFormat.class-->Line_149 $$ fmt = c[ FD ]
Line_36 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_148 $$ if (c != null) [ FD ]
Line_74 $$ c = StreamUtil.goodClassOrNull(jobConf_, comCmd_, defaultPackage)-->Line_76 $$ jobConf_.setCombinerClass(c)[ FD ]
Line_127 $$ if (inReaderSpec_ != null) -->Line_137 $$ for (int i = 1; i < args.length; i++) [ CD ]
Line_19 $$ Class fmt = null-->Line_31 $$ fmt = SequenceFileInputFormat.class[ FD ]
Line_24 $$ fmt = TextInputFormat.class-->Line_44 $$ if (fmt == null) [ FD ]
Line_145 $$ fmt = null-->Line_155 $$ fmt = TextOutputFormat.class[ FD ]
Line_92 $$ if (redCmd_.compareToIgnoreCase("aggregate") == 0) -->Line_94 $$ jobConf_.setCombinerClass(ValueAggregatorCombiner.class)[ CD ]
Line_17 $$ String defaultPackage = this.getClass().getPackage().getName()-->Line_163 $$ c = StreamUtil.goodClassOrNull(jobConf_, partitionerSpec_, defaultPackage)[ FD ]
Line_182 $$ if ((cacheArchives != null) || (cacheFiles != null)) -->Line_185 $$ if (!b)[ CD ]
Line_127 $$ if (inReaderSpec_ != null) -->Line_132 $$ if (c != null) [ CD ]
Line_154 $$ if (fmt == null) -->Line_155 $$ fmt = TextOutputFormat.class[ CD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_87 $$ if (redCmd_ != null) [ CD ]
Line_27 $$ fmt = KeyValueTextInputFormat.class-->Line_149 $$ fmt = c[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_144 $$ FileOutputFormat.setOutputPath(jobConf_, new Path(output_))[ CD ]
Line_18 $$ Class c-->Line_164 $$ if (c != null) [ FD ]
Line_24 $$ fmt = TextInputFormat.class-->Line_45 $$ fmt = StreamInputFormat.class[ FD ]
Line_36 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_165 $$ jobConf_.setPartitionerClass(c)[ FD ]
Line_21 $$ fmt = TextInputFormat.class-->Line_44 $$ if (fmt == null) [ FD ]
Line_96 $$ c = StreamUtil.goodClassOrNull(jobConf_, redCmd_, defaultPackage)-->Line_132 $$ if (c != null) [ FD ]
Line_38 $$ fmt = c-->Line_160 $$ jobConf_.setOutputFormat(fmt)[ FD ]
Line_34 $$ fmt = SequenceFileAsTextInputFormat.class-->Line_149 $$ fmt = c[ FD ]
Line_18 $$ Class c-->Line_76 $$ jobConf_.setCombinerClass(c)[ FD ]
Line_36 $$ c = StreamUtil.goodClassOrNull(jobConf_, inputFormatSpec_, defaultPackage)-->Line_76 $$ jobConf_.setCombinerClass(c)[ FD ]
Line_48 $$ if (ioSpec_ != null) -->Line_49 $$ jobConf_.set("stream.map.input", ioSpec_)[ CD ]
Line_38 $$ fmt = c-->Line_45 $$ fmt = StreamInputFormat.class[ FD ]
Line_2 $$ protected void setJobConf() throws IOException -->Line_146 $$ if (outputFormatSpec_ != null) [ CD ]
Line_24 $$ fmt = TextInputFormat.class-->Line_155 $$ fmt = TextOutputFormat.class[ FD ]
Line_162 $$ if (partitionerSpec_ != null) -->Line_164 $$ if (c != null) [ CD ]
Line_48 $$ if (ioSpec_ != null) -->Line_51 $$ jobConf_.set("stream.reduce.input", ioSpec_)[ CD ]
Line_19 $$ Class fmt = null-->Line_34 $$ fmt = SequenceFileAsTextInputFormat.class[ FD ]
Line_155 $$ fmt = TextOutputFormat.class-->Line_158 $$ LazyOutputFormat.setOutputFormatClass(jobConf_, fmt)[ FD ]
