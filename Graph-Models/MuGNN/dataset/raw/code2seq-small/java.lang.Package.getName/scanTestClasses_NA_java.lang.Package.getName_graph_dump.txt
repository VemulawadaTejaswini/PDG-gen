Line_2 $$ protected List<Class<?>> scanTestClasses() throws ClassNotFoundException -->Line_3 $$ URL url = PACLAggregateTest.class.getResource("test")[ CD ]
Line_5 $$ File[] files = folder.listFiles(new FileFilter() -->Line_13 $$ if (fileName.indexOf('$') != -1) [ CD ]
Line_2 $$ protected List<Class<?>> scanTestClasses() throws ClassNotFoundException -->Line_5 $$ File[] files = folder.listFiles(new FileFilter() [ CD ]
Line_13 $$ if (fileName.indexOf('$') != -1) -->Line_14 $$ return false[ CD ]
Line_2 $$ protected List<Class<?>> scanTestClasses() throws ClassNotFoundException -->Line_23 $$ Package pkg = PACLAggregateTest.class.getPackage()[ CD ]
Line_5 $$ File[] files = folder.listFiles(new FileFilter() -->Line_29 $$ String fileName = file.getName()[ FD ]
Line_2 $$ protected List<Class<?>> scanTestClasses() throws ClassNotFoundException -->Line_20 $$ if (isCIMode()) [ CD ]
Line_5 $$ File[] files = folder.listFiles(new FileFilter() -->Line_21 $$ files = slice(files)[ FD ]
Line_3 $$ URL url = PACLAggregateTest.class.getResource("test")-->Line_4 $$ File folder = new File(url.getFile())[ FD ]
Line_5 $$ File[] files = folder.listFiles(new FileFilter() -->Line_12 $$ String fileName = file.getName()[ CD ]
Line_5 $$ File[] files = folder.listFiles(new FileFilter() -->Line_9 $$ if (!file.isFile()) [ FD ]
Line_5 $$ File[] files = folder.listFiles(new FileFilter() -->Line_9 $$ if (!file.isFile()) [ CD ]
Line_5 $$ File[] files = folder.listFiles(new FileFilter() -->Line_16 $$ return fileName.endsWith(".class")[ CD ]
Line_12 $$ String fileName = file.getName()-->Line_16 $$ return fileName.endsWith(".class")[ FD ]
Line_9 $$ if (!file.isFile()) -->Line_10 $$ return false[ CD ]
Line_5 $$ File[] files = folder.listFiles(new FileFilter() -->Line_12 $$ String fileName = file.getName()[ FD ]
Line_2 $$ protected List<Class<?>> scanTestClasses() throws ClassNotFoundException -->Line_24 $$ String packageName = pkg.getName()[ CD ]
Line_2 $$ protected List<Class<?>> scanTestClasses() throws ClassNotFoundException -->Line_32 $$ return classes[ CD ]
Line_12 $$ String fileName = file.getName()-->Line_30 $$ classes.add(classLoader.loadClass(packageName.concat(fileName.substring(0, fileName.lastIndexOf('.')))))[ FD ]
Line_5 $$ File[] files = folder.listFiles(new FileFilter() -->Line_19 $$ Arrays.sort(files)[ FD ]
Line_2 $$ protected List<Class<?>> scanTestClasses() throws ClassNotFoundException -->Line_26 $$ ClassLoader classLoader = PACLAggregateTest.class.getClassLoader()[ CD ]
Line_12 $$ String fileName = file.getName()-->Line_13 $$ if (fileName.indexOf('$') != -1) [ FD ]
Line_2 $$ protected List<Class<?>> scanTestClasses() throws ClassNotFoundException -->Line_4 $$ File folder = new File(url.getFile())[ CD ]
Line_4 $$ File folder = new File(url.getFile())-->Line_5 $$ File[] files = folder.listFiles(new FileFilter() [ FD ]
Line_2 $$ protected List<Class<?>> scanTestClasses() throws ClassNotFoundException -->Line_19 $$ Arrays.sort(files)[ CD ]
Line_2 $$ protected List<Class<?>> scanTestClasses() throws ClassNotFoundException -->Line_25 $$ packageName = packageName.concat(".test.")[ CD ]
Line_20 $$ if (isCIMode()) -->Line_21 $$ files = slice(files)[ CD ]
