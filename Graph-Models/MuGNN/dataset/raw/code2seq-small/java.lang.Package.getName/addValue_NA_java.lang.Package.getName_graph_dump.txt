Line_33 $$ Class vmCls = vmas[i].getCls()-->Line_34 $$ TypeCode typeCode = getTypeCode(vmCls)[ FD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_40 $$ return vDef[ CD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_12 $$ ValueAnalysis superAnalysis = va.getSuperAnalysis()[ FD ]
Line_23 $$ vDef = new ValueDefImpl(va.getRepositoryId(), base, "1.0", m, va.isAbstractValue(), va.isCustom(), supported_interfaces, abstract_base_valuetypes, baseTypeCode, impl)-->Line_24 $$ addTypeCode(cls, vDef.type())[ FD ]
Line_5 $$ vDef = (ValueDefImpl) valueMap.get(cls)-->Line_6 $$ if (vDef != null)[ FD ]
Line_29 $$ for (int i = 0; i < vmas.length; ++i) -->Line_33 $$ Class vmCls = vmas[i].getCls()[ CD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_19 $$ if (superValue == null)[ CD ]
Line_4 $$ Class cls = va.getCls()-->Line_15 $$ String base = cls.getName()[ FD ]
Line_3 $$ ValueDefImpl vDef-->Line_26 $$ valueMap.put(cls, vDef)[ FD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_9 $$ String[] supported_interfaces = addInterfaces(va)[ FD ]
Line_8 $$ ModuleDefImpl m = ensurePackageExists(cls.getPackage().getName())-->Line_25 $$ m.add(base, vDef)[ FD ]
Line_3 $$ ValueDefImpl vDef-->Line_24 $$ addTypeCode(cls, vDef.type())[ FD ]
Line_15 $$ String base = cls.getName()-->Line_25 $$ m.add(base, vDef)[ FD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_39 $$ addAttributes(vDef, va)[ FD ]
Line_29 $$ for (int i = 0; i < vmas.length; ++i) -->Line_36 $$ vmDef = new ValueMemberDefImpl(vmid, vmName, "1.0", typeCode, vmPublic, vDef, impl)[ CD ]
Line_12 $$ ValueAnalysis superAnalysis = va.getSuperAnalysis()-->Line_13 $$ if (superAnalysis != null)[ FD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_10 $$ String[] abstract_base_valuetypes = addAbstractBaseValuetypes(va)[ FD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_6 $$ if (vDef != null)[ CD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_28 $$ ValueMemberAnalysis[] vmas = va.getMembers()[ CD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_15 $$ String base = cls.getName()[ CD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_31 $$ String vmid = va.getMemberRepositoryId(vmas[i].getJavaName())[ FD ]
Line_14 $$ superValue = addValue(superAnalysis)-->Line_22 $$ baseTypeCode = superValue.type()[ FD ]
Line_11 $$ ValueDefImpl superValue = null-->Line_19 $$ if (superValue == null)[ FD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_27 $$ addConstants(vDef, va)[ CD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_11 $$ ValueDefImpl superValue = null[ CD ]
Line_29 $$ for (int i = 0; i < vmas.length; ++i) -->Line_32 $$ String vmName = vmas[i].getIDLName()[ CD ]
Line_23 $$ vDef = new ValueDefImpl(va.getRepositoryId(), base, "1.0", m, va.isAbstractValue(), va.isCustom(), supported_interfaces, abstract_base_valuetypes, baseTypeCode, impl)-->Line_39 $$ addAttributes(vDef, va)[ FD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_23 $$ vDef = new ValueDefImpl(va.getRepositoryId(), base, "1.0", m, va.isAbstractValue(), va.isCustom(), supported_interfaces, abstract_base_valuetypes, baseTypeCode, impl)[ CD ]
Line_13 $$ if (superAnalysis != null)-->Line_14 $$ superValue = addValue(superAnalysis)[ CD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_8 $$ ModuleDefImpl m = ensurePackageExists(cls.getPackage().getName())[ CD ]
Line_11 $$ ValueDefImpl superValue = null-->Line_22 $$ baseTypeCode = superValue.type()[ FD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_25 $$ m.add(base, vDef)[ CD ]
Line_18 $$ TypeCode baseTypeCode-->Line_20 $$ baseTypeCode = orb.get_primitive_tc(TCKind.tk_null)[ FD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_29 $$ for (int i = 0; i < vmas.length; ++i) [ CD ]
Line_5 $$ vDef = (ValueDefImpl) valueMap.get(cls)-->Line_37 $$ vDef.add(vmName, vmDef)[ FD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_39 $$ addAttributes(vDef, va)[ CD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_12 $$ ValueAnalysis superAnalysis = va.getSuperAnalysis()[ CD ]
Line_14 $$ superValue = addValue(superAnalysis)-->Line_19 $$ if (superValue == null)[ FD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_4 $$ Class cls = va.getCls()[ CD ]
Line_3 $$ ValueDefImpl vDef-->Line_23 $$ vDef = new ValueDefImpl(va.getRepositoryId(), base, "1.0", m, va.isAbstractValue(), va.isCustom(), supported_interfaces, abstract_base_valuetypes, baseTypeCode, impl)[ FD ]
Line_29 $$ for (int i = 0; i < vmas.length; ++i) -->Line_34 $$ TypeCode typeCode = getTypeCode(vmCls)[ CD ]
Line_4 $$ Class cls = va.getCls()-->Line_26 $$ valueMap.put(cls, vDef)[ FD ]
Line_29 $$ for (int i = 0; i < vmas.length; ++i) -->Line_31 $$ String vmid = va.getMemberRepositoryId(vmas[i].getJavaName())[ CD ]
Line_20 $$ baseTypeCode = orb.get_primitive_tc(TCKind.tk_null)-->Line_22 $$ baseTypeCode = superValue.type()[ FD ]
Line_29 $$ for (int i = 0; i < vmas.length; ++i) -->Line_35 $$ boolean vmPublic = vmas[i].isPublic()[ CD ]
Line_5 $$ vDef = (ValueDefImpl) valueMap.get(cls)-->Line_23 $$ vDef = new ValueDefImpl(va.getRepositoryId(), base, "1.0", m, va.isAbstractValue(), va.isCustom(), supported_interfaces, abstract_base_valuetypes, baseTypeCode, impl)[ FD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_5 $$ vDef = (ValueDefImpl) valueMap.get(cls)[ CD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_4 $$ Class cls = va.getCls()[ FD ]
Line_19 $$ if (superValue == null)-->Line_20 $$ baseTypeCode = orb.get_primitive_tc(TCKind.tk_null)[ CD ]
Line_23 $$ vDef = new ValueDefImpl(va.getRepositoryId(), base, "1.0", m, va.isAbstractValue(), va.isCustom(), supported_interfaces, abstract_base_valuetypes, baseTypeCode, impl)-->Line_27 $$ addConstants(vDef, va)[ FD ]
Line_3 $$ ValueDefImpl vDef-->Line_27 $$ addConstants(vDef, va)[ FD ]
Line_23 $$ vDef = new ValueDefImpl(va.getRepositoryId(), base, "1.0", m, va.isAbstractValue(), va.isCustom(), supported_interfaces, abstract_base_valuetypes, baseTypeCode, impl)-->Line_37 $$ vDef.add(vmName, vmDef)[ FD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_24 $$ addTypeCode(cls, vDef.type())[ CD ]
Line_3 $$ ValueDefImpl vDef-->Line_25 $$ m.add(base, vDef)[ FD ]
Line_3 $$ ValueDefImpl vDef-->Line_37 $$ vDef.add(vmName, vmDef)[ FD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_3 $$ ValueDefImpl vDef[ CD ]
Line_29 $$ for (int i = 0; i < vmas.length; ++i) -->Line_37 $$ vDef.add(vmName, vmDef)[ CD ]
Line_15 $$ String base = cls.getName()-->Line_17 $$ base = Util.javaToIDLName(base)[ FD ]
Line_6 $$ if (vDef != null)-->Line_7 $$ return vDef[ CD ]
Line_5 $$ vDef = (ValueDefImpl) valueMap.get(cls)-->Line_39 $$ addAttributes(vDef, va)[ FD ]
Line_3 $$ ValueDefImpl vDef-->Line_6 $$ if (vDef != null)[ FD ]
Line_15 $$ String base = cls.getName()-->Line_16 $$ base = base.substring(base.lastIndexOf('.') + 1)[ FD ]
Line_12 $$ ValueAnalysis superAnalysis = va.getSuperAnalysis()-->Line_14 $$ superValue = addValue(superAnalysis)[ FD ]
Line_32 $$ String vmName = vmas[i].getIDLName()-->Line_37 $$ vDef.add(vmName, vmDef)[ FD ]
Line_19 $$ if (superValue == null)-->Line_22 $$ baseTypeCode = superValue.type()[ CD ]
Line_23 $$ vDef = new ValueDefImpl(va.getRepositoryId(), base, "1.0", m, va.isAbstractValue(), va.isCustom(), supported_interfaces, abstract_base_valuetypes, baseTypeCode, impl)-->Line_26 $$ valueMap.put(cls, vDef)[ FD ]
Line_16 $$ base = base.substring(base.lastIndexOf('.') + 1)-->Line_25 $$ m.add(base, vDef)[ FD ]
Line_18 $$ TypeCode baseTypeCode-->Line_22 $$ baseTypeCode = superValue.type()[ FD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_28 $$ ValueMemberAnalysis[] vmas = va.getMembers()[ FD ]
Line_5 $$ vDef = (ValueDefImpl) valueMap.get(cls)-->Line_24 $$ addTypeCode(cls, vDef.type())[ FD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_18 $$ TypeCode baseTypeCode[ CD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_10 $$ String[] abstract_base_valuetypes = addAbstractBaseValuetypes(va)[ CD ]
Line_30 $$ ValueMemberDefImpl vmDef-->Line_37 $$ vDef.add(vmName, vmDef)[ FD ]
Line_30 $$ ValueMemberDefImpl vmDef-->Line_36 $$ vmDef = new ValueMemberDefImpl(vmid, vmName, "1.0", typeCode, vmPublic, vDef, impl)[ FD ]
Line_3 $$ ValueDefImpl vDef-->Line_39 $$ addAttributes(vDef, va)[ FD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_17 $$ base = Util.javaToIDLName(base)[ CD ]
Line_29 $$ for (int i = 0; i < vmas.length; ++i) -->Line_30 $$ ValueMemberDefImpl vmDef[ CD ]
Line_23 $$ vDef = new ValueDefImpl(va.getRepositoryId(), base, "1.0", m, va.isAbstractValue(), va.isCustom(), supported_interfaces, abstract_base_valuetypes, baseTypeCode, impl)-->Line_25 $$ m.add(base, vDef)[ FD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_9 $$ String[] supported_interfaces = addInterfaces(va)[ CD ]
Line_36 $$ vmDef = new ValueMemberDefImpl(vmid, vmName, "1.0", typeCode, vmPublic, vDef, impl)-->Line_37 $$ vDef.add(vmName, vmDef)[ FD ]
Line_3 $$ ValueDefImpl vDef-->Line_5 $$ vDef = (ValueDefImpl) valueMap.get(cls)[ FD ]
Line_11 $$ ValueDefImpl superValue = null-->Line_14 $$ superValue = addValue(superAnalysis)[ FD ]
Line_4 $$ Class cls = va.getCls()-->Line_8 $$ ModuleDefImpl m = ensurePackageExists(cls.getPackage().getName())[ FD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_23 $$ vDef = new ValueDefImpl(va.getRepositoryId(), base, "1.0", m, va.isAbstractValue(), va.isCustom(), supported_interfaces, abstract_base_valuetypes, baseTypeCode, impl)[ FD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_16 $$ base = base.substring(base.lastIndexOf('.') + 1)[ CD ]
Line_4 $$ Class cls = va.getCls()-->Line_24 $$ addTypeCode(cls, vDef.type())[ FD ]
Line_16 $$ base = base.substring(base.lastIndexOf('.') + 1)-->Line_17 $$ base = Util.javaToIDLName(base)[ FD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_27 $$ addConstants(vDef, va)[ FD ]
Line_5 $$ vDef = (ValueDefImpl) valueMap.get(cls)-->Line_27 $$ addConstants(vDef, va)[ FD ]
Line_17 $$ base = Util.javaToIDLName(base)-->Line_25 $$ m.add(base, vDef)[ FD ]
Line_4 $$ Class cls = va.getCls()-->Line_5 $$ vDef = (ValueDefImpl) valueMap.get(cls)[ FD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_13 $$ if (superAnalysis != null)[ CD ]
Line_5 $$ vDef = (ValueDefImpl) valueMap.get(cls)-->Line_26 $$ valueMap.put(cls, vDef)[ FD ]
Line_2 $$ private ValueDefImpl addValue(ValueAnalysis va) throws RMIIIOPViolationException, IRConstructionException -->Line_26 $$ valueMap.put(cls, vDef)[ CD ]
Line_5 $$ vDef = (ValueDefImpl) valueMap.get(cls)-->Line_25 $$ m.add(base, vDef)[ FD ]
