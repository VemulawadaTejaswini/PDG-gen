Line_42 $$ for (int i = 0; i < vmas.length; ++i) -->Line_49 $$ vmDef = new ValueMemberDefImpl(vmid, vmName, "1.0", typeCode, vmPublic, vDef, impl)[ CD ]
Line_6 $$ ValueDefImpl vDef-->Line_33 $$ vDef = new ValueDefImpl(va.getRepositoryId(), base, "1.0", m, va.isAbstractValue(), va.isCustom(), supported_interfaces, abstract_base_valuetypes, baseTypeCode, impl)[ FD ]
Line_43 $$ ValueMemberDefImpl vmDef-->Line_49 $$ vmDef = new ValueMemberDefImpl(vmid, vmName, "1.0", typeCode, vmPublic, vDef, impl)[ FD ]
Line_6 $$ ValueDefImpl vDef-->Line_35 $$ m.add(base, vDef)[ FD ]
Line_22 $$ if (superAnalysis != null)-->Line_23 $$ superValue = addValue(superAnalysis)[ CD ]
Line_29 $$ if (superValue == null)-->Line_32 $$ baseTypeCode = superValue.type()[ CD ]
Line_42 $$ for (int i = 0; i < vmas.length; ++i) -->Line_48 $$ boolean vmPublic = vmas[i].isPublic()[ CD ]
Line_42 $$ for (int i = 0; i < vmas.length; ++i) -->Line_50 $$ vDef.add(vmName, vmDef)[ CD ]
Line_26 $$ base = base.substring(base.lastIndexOf('.') + 1)-->Line_27 $$ base = Util.javaToIDLName(base)[ FD ]
Line_33 $$ vDef = new ValueDefImpl(va.getRepositoryId(), base, "1.0", m, va.isAbstractValue(), va.isCustom(), supported_interfaces, abstract_base_valuetypes, baseTypeCode, impl)-->Line_50 $$ vDef.add(vmName, vmDef)[ FD ]
Line_46 $$ Class vmCls = vmas[i].getCls()-->Line_47 $$ TypeCode typeCode = getTypeCode(vmCls)[ FD ]
Line_30 $$ baseTypeCode = orb.get_primitive_tc(TCKind.tk_null)-->Line_32 $$ baseTypeCode = superValue.type()[ FD ]
Line_23 $$ superValue = addValue(superAnalysis)-->Line_29 $$ if (superValue == null)[ FD ]
Line_28 $$ TypeCode baseTypeCode-->Line_30 $$ baseTypeCode = orb.get_primitive_tc(TCKind.tk_null)[ FD ]
Line_7 $$ Class cls = va.getCls()-->Line_34 $$ addTypeCode(cls, vDef.type())[ FD ]
Line_6 $$ ValueDefImpl vDef-->Line_34 $$ addTypeCode(cls, vDef.type())[ FD ]
Line_42 $$ for (int i = 0; i < vmas.length; ++i) -->Line_45 $$ String vmName = vmas[i].getIDLName()[ CD ]
Line_43 $$ ValueMemberDefImpl vmDef-->Line_50 $$ vDef.add(vmName, vmDef)[ FD ]
Line_21 $$ ValueAnalysis superAnalysis = va.getSuperAnalysis()-->Line_23 $$ superValue = addValue(superAnalysis)[ FD ]
Line_49 $$ vmDef = new ValueMemberDefImpl(vmid, vmName, "1.0", typeCode, vmPublic, vDef, impl)-->Line_50 $$ vDef.add(vmName, vmDef)[ FD ]
Line_23 $$ superValue = addValue(superAnalysis)-->Line_32 $$ baseTypeCode = superValue.type()[ FD ]
Line_45 $$ String vmName = vmas[i].getIDLName()-->Line_50 $$ vDef.add(vmName, vmDef)[ FD ]
Line_27 $$ base = Util.javaToIDLName(base)-->Line_35 $$ m.add(base, vDef)[ FD ]
Line_42 $$ for (int i = 0; i < vmas.length; ++i) -->Line_47 $$ TypeCode typeCode = getTypeCode(vmCls)[ CD ]
Line_33 $$ vDef = new ValueDefImpl(va.getRepositoryId(), base, "1.0", m, va.isAbstractValue(), va.isCustom(), supported_interfaces, abstract_base_valuetypes, baseTypeCode, impl)-->Line_35 $$ m.add(base, vDef)[ FD ]
Line_21 $$ ValueAnalysis superAnalysis = va.getSuperAnalysis()-->Line_22 $$ if (superAnalysis != null)[ FD ]
Line_6 $$ ValueDefImpl vDef-->Line_50 $$ vDef.add(vmName, vmDef)[ FD ]
Line_42 $$ for (int i = 0; i < vmas.length; ++i) -->Line_43 $$ ValueMemberDefImpl vmDef[ CD ]
Line_6 $$ ValueDefImpl vDef-->Line_10 $$ if (vDef != null)[ FD ]
Line_42 $$ for (int i = 0; i < vmas.length; ++i) -->Line_46 $$ Class vmCls = vmas[i].getCls()[ CD ]
Line_26 $$ base = base.substring(base.lastIndexOf('.') + 1)-->Line_35 $$ m.add(base, vDef)[ FD ]
Line_28 $$ TypeCode baseTypeCode-->Line_32 $$ baseTypeCode = superValue.type()[ FD ]
Line_29 $$ if (superValue == null)-->Line_30 $$ baseTypeCode = orb.get_primitive_tc(TCKind.tk_null)[ CD ]
Line_33 $$ vDef = new ValueDefImpl(va.getRepositoryId(), base, "1.0", m, va.isAbstractValue(), va.isCustom(), supported_interfaces, abstract_base_valuetypes, baseTypeCode, impl)-->Line_34 $$ addTypeCode(cls, vDef.type())[ FD ]
Line_42 $$ for (int i = 0; i < vmas.length; ++i) -->Line_44 $$ String vmid = va.getMemberRepositoryId(vmas[i].getJavaName())[ CD ]
