Line_2 $$ private ExceptionDefImpl addException(ExceptionAnalysis ea) throws RMIIIOPViolationException, IRConstructionException -->Line_16 $$ members[0] = new StructMember("value", vDef.type(), null)[ CD ]
Line_11 $$ base = base.substring(base.lastIndexOf('.') + 1)-->Line_14 $$ base = Util.javaToIDLName(base + "Ex")[ FD ]
Line_10 $$ String base = cls.getName()-->Line_11 $$ base = base.substring(base.lastIndexOf('.') + 1)[ FD ]
Line_2 $$ private ExceptionDefImpl addException(ExceptionAnalysis ea) throws RMIIIOPViolationException, IRConstructionException -->Line_4 $$ Class cls = ea.getCls()[ FD ]
Line_2 $$ private ExceptionDefImpl addException(ExceptionAnalysis ea) throws RMIIIOPViolationException, IRConstructionException -->Line_9 $$ ModuleDefImpl m = ensurePackageExists(cls.getPackage().getName())[ CD ]
Line_3 $$ ExceptionDefImpl eDef-->Line_19 $$ m.add(base, eDef)[ FD ]
Line_2 $$ private ExceptionDefImpl addException(ExceptionAnalysis ea) throws RMIIIOPViolationException, IRConstructionException -->Line_8 $$ ValueDefImpl vDef = addValue(ea)[ FD ]
Line_2 $$ private ExceptionDefImpl addException(ExceptionAnalysis ea) throws RMIIIOPViolationException, IRConstructionException -->Line_11 $$ base = base.substring(base.lastIndexOf('.') + 1)[ CD ]
Line_2 $$ private ExceptionDefImpl addException(ExceptionAnalysis ea) throws RMIIIOPViolationException, IRConstructionException -->Line_10 $$ String base = cls.getName()[ CD ]
Line_2 $$ private ExceptionDefImpl addException(ExceptionAnalysis ea) throws RMIIIOPViolationException, IRConstructionException -->Line_21 $$ return eDef[ CD ]
Line_3 $$ ExceptionDefImpl eDef-->Line_6 $$ if (eDef != null)[ FD ]
Line_14 $$ base = Util.javaToIDLName(base + "Ex")-->Line_17 $$ TypeCode typeCode = orb.create_exception_tc(ea.getExceptionRepositoryId(), base, members)[ FD ]
Line_11 $$ base = base.substring(base.lastIndexOf('.') + 1)-->Line_17 $$ TypeCode typeCode = orb.create_exception_tc(ea.getExceptionRepositoryId(), base, members)[ FD ]
Line_11 $$ base = base.substring(base.lastIndexOf('.') + 1)-->Line_19 $$ m.add(base, eDef)[ FD ]
Line_10 $$ String base = cls.getName()-->Line_14 $$ base = Util.javaToIDLName(base + "Ex")[ FD ]
Line_3 $$ ExceptionDefImpl eDef-->Line_18 $$ eDef = new ExceptionDefImpl(ea.getExceptionRepositoryId(), base, "1.0", typeCode, vDef, m, impl)[ FD ]
Line_2 $$ private ExceptionDefImpl addException(ExceptionAnalysis ea) throws RMIIIOPViolationException, IRConstructionException -->Line_19 $$ m.add(base, eDef)[ CD ]
Line_6 $$ if (eDef != null)-->Line_7 $$ return eDef[ CD ]
Line_5 $$ eDef = (ExceptionDefImpl) exceptionMap.get(cls)-->Line_20 $$ exceptionMap.put(cls, eDef)[ FD ]
Line_18 $$ eDef = new ExceptionDefImpl(ea.getExceptionRepositoryId(), base, "1.0", typeCode, vDef, m, impl)-->Line_20 $$ exceptionMap.put(cls, eDef)[ FD ]
Line_10 $$ String base = cls.getName()-->Line_13 $$ base = base.substring(0, base.length() - 9)[ FD ]
Line_2 $$ private ExceptionDefImpl addException(ExceptionAnalysis ea) throws RMIIIOPViolationException, IRConstructionException -->Line_12 $$ if (base.endsWith("Exception"))[ CD ]
Line_4 $$ Class cls = ea.getCls()-->Line_5 $$ eDef = (ExceptionDefImpl) exceptionMap.get(cls)[ FD ]
Line_5 $$ eDef = (ExceptionDefImpl) exceptionMap.get(cls)-->Line_19 $$ m.add(base, eDef)[ FD ]
Line_5 $$ eDef = (ExceptionDefImpl) exceptionMap.get(cls)-->Line_18 $$ eDef = new ExceptionDefImpl(ea.getExceptionRepositoryId(), base, "1.0", typeCode, vDef, m, impl)[ FD ]
Line_2 $$ private ExceptionDefImpl addException(ExceptionAnalysis ea) throws RMIIIOPViolationException, IRConstructionException -->Line_17 $$ TypeCode typeCode = orb.create_exception_tc(ea.getExceptionRepositoryId(), base, members)[ FD ]
Line_13 $$ base = base.substring(0, base.length() - 9)-->Line_14 $$ base = Util.javaToIDLName(base + "Ex")[ FD ]
Line_13 $$ base = base.substring(0, base.length() - 9)-->Line_19 $$ m.add(base, eDef)[ FD ]
Line_4 $$ Class cls = ea.getCls()-->Line_9 $$ ModuleDefImpl m = ensurePackageExists(cls.getPackage().getName())[ FD ]
Line_2 $$ private ExceptionDefImpl addException(ExceptionAnalysis ea) throws RMIIIOPViolationException, IRConstructionException -->Line_6 $$ if (eDef != null)[ CD ]
Line_2 $$ private ExceptionDefImpl addException(ExceptionAnalysis ea) throws RMIIIOPViolationException, IRConstructionException -->Line_3 $$ ExceptionDefImpl eDef[ CD ]
Line_4 $$ Class cls = ea.getCls()-->Line_10 $$ String base = cls.getName()[ FD ]
Line_2 $$ private ExceptionDefImpl addException(ExceptionAnalysis ea) throws RMIIIOPViolationException, IRConstructionException -->Line_8 $$ ValueDefImpl vDef = addValue(ea)[ CD ]
Line_4 $$ Class cls = ea.getCls()-->Line_20 $$ exceptionMap.put(cls, eDef)[ FD ]
Line_2 $$ private ExceptionDefImpl addException(ExceptionAnalysis ea) throws RMIIIOPViolationException, IRConstructionException -->Line_15 $$ StructMember[] members = new StructMember[1][ CD ]
Line_2 $$ private ExceptionDefImpl addException(ExceptionAnalysis ea) throws RMIIIOPViolationException, IRConstructionException -->Line_14 $$ base = Util.javaToIDLName(base + "Ex")[ CD ]
Line_10 $$ String base = cls.getName()-->Line_17 $$ TypeCode typeCode = orb.create_exception_tc(ea.getExceptionRepositoryId(), base, members)[ FD ]
Line_2 $$ private ExceptionDefImpl addException(ExceptionAnalysis ea) throws RMIIIOPViolationException, IRConstructionException -->Line_18 $$ eDef = new ExceptionDefImpl(ea.getExceptionRepositoryId(), base, "1.0", typeCode, vDef, m, impl)[ CD ]
Line_2 $$ private ExceptionDefImpl addException(ExceptionAnalysis ea) throws RMIIIOPViolationException, IRConstructionException -->Line_5 $$ eDef = (ExceptionDefImpl) exceptionMap.get(cls)[ CD ]
Line_11 $$ base = base.substring(base.lastIndexOf('.') + 1)-->Line_13 $$ base = base.substring(0, base.length() - 9)[ FD ]
Line_15 $$ StructMember[] members = new StructMember[1]-->Line_17 $$ TypeCode typeCode = orb.create_exception_tc(ea.getExceptionRepositoryId(), base, members)[ FD ]
Line_3 $$ ExceptionDefImpl eDef-->Line_20 $$ exceptionMap.put(cls, eDef)[ FD ]
Line_11 $$ base = base.substring(base.lastIndexOf('.') + 1)-->Line_12 $$ if (base.endsWith("Exception"))[ FD ]
Line_10 $$ String base = cls.getName()-->Line_19 $$ m.add(base, eDef)[ FD ]
Line_3 $$ ExceptionDefImpl eDef-->Line_5 $$ eDef = (ExceptionDefImpl) exceptionMap.get(cls)[ FD ]
Line_2 $$ private ExceptionDefImpl addException(ExceptionAnalysis ea) throws RMIIIOPViolationException, IRConstructionException -->Line_20 $$ exceptionMap.put(cls, eDef)[ CD ]
Line_18 $$ eDef = new ExceptionDefImpl(ea.getExceptionRepositoryId(), base, "1.0", typeCode, vDef, m, impl)-->Line_19 $$ m.add(base, eDef)[ FD ]
Line_14 $$ base = Util.javaToIDLName(base + "Ex")-->Line_19 $$ m.add(base, eDef)[ FD ]
Line_12 $$ if (base.endsWith("Exception"))-->Line_13 $$ base = base.substring(0, base.length() - 9)[ CD ]
Line_10 $$ String base = cls.getName()-->Line_12 $$ if (base.endsWith("Exception"))[ FD ]
Line_8 $$ ValueDefImpl vDef = addValue(ea)-->Line_16 $$ members[0] = new StructMember("value", vDef.type(), null)[ FD ]
Line_2 $$ private ExceptionDefImpl addException(ExceptionAnalysis ea) throws RMIIIOPViolationException, IRConstructionException -->Line_18 $$ eDef = new ExceptionDefImpl(ea.getExceptionRepositoryId(), base, "1.0", typeCode, vDef, m, impl)[ FD ]
Line_2 $$ private ExceptionDefImpl addException(ExceptionAnalysis ea) throws RMIIIOPViolationException, IRConstructionException -->Line_4 $$ Class cls = ea.getCls()[ CD ]
Line_2 $$ private ExceptionDefImpl addException(ExceptionAnalysis ea) throws RMIIIOPViolationException, IRConstructionException -->Line_17 $$ TypeCode typeCode = orb.create_exception_tc(ea.getExceptionRepositoryId(), base, members)[ CD ]
Line_5 $$ eDef = (ExceptionDefImpl) exceptionMap.get(cls)-->Line_6 $$ if (eDef != null)[ FD ]
Line_13 $$ base = base.substring(0, base.length() - 9)-->Line_17 $$ TypeCode typeCode = orb.create_exception_tc(ea.getExceptionRepositoryId(), base, members)[ FD ]
Line_9 $$ ModuleDefImpl m = ensurePackageExists(cls.getPackage().getName())-->Line_19 $$ m.add(base, eDef)[ FD ]
