Line_5 $$ JMSOperations jmsOperations = JMSOperationsProvider.getInstance(managementClient)-->Line_6 $$ String xmlFile = (jmsOperations.getProviderName().equals("hornetq")) ? TEST_HORNETQ_JMS_XML : TEST_ACTIVEMQ_JMS_XML[ FD ]
Line_3 $$ final ServerDeploymentManager manager = ServerDeploymentManager.Factory.create(managementClient.getControllerClient())-->Line_8 $$ final Future<ServerDeploymentPlanResult> future = manager.execute(plan)[ FD ]
Line_7 $$ final DeploymentPlan plan = manager.newDeploymentPlan().add(DeployedXmlJMSManagementTestCase.class.getResource("/" + packageName + "/" + xmlFile)).andDeploy().build()-->Line_10 $$ final ServerDeploymentActionResult actionResult = result.getDeploymentActionResult(plan.getId())[ FD ]
Line_10 $$ final ServerDeploymentActionResult actionResult = result.getDeploymentActionResult(plan.getId())-->Line_12 $$ if (actionResult.getDeploymentException() != null) [ FD ]
Line_2 $$ protected void doSetup(final ManagementClient managementClient) throws Exception -->Line_8 $$ final Future<ServerDeploymentPlanResult> future = manager.execute(plan)[ CD ]
Line_2 $$ protected void doSetup(final ManagementClient managementClient) throws Exception -->Line_4 $$ final String packageName = DeployedXmlJMSManagementTestCase.class.getPackage().getName().replace(".", "/")[ CD ]
Line_2 $$ protected void doSetup(final ManagementClient managementClient) throws Exception -->Line_9 $$ final ServerDeploymentPlanResult result = future.get(20, TimeUnit.SECONDS)[ CD ]
Line_2 $$ protected void doSetup(final ManagementClient managementClient) throws Exception -->Line_7 $$ final DeploymentPlan plan = manager.newDeploymentPlan().add(DeployedXmlJMSManagementTestCase.class.getResource("/" + packageName + "/" + xmlFile)).andDeploy().build()[ CD ]
Line_2 $$ protected void doSetup(final ManagementClient managementClient) throws Exception -->Line_10 $$ final ServerDeploymentActionResult actionResult = result.getDeploymentActionResult(plan.getId())[ CD ]
Line_2 $$ protected void doSetup(final ManagementClient managementClient) throws Exception -->Line_5 $$ JMSOperations jmsOperations = JMSOperationsProvider.getInstance(managementClient)[ FD ]
Line_2 $$ protected void doSetup(final ManagementClient managementClient) throws Exception -->Line_6 $$ String xmlFile = (jmsOperations.getProviderName().equals("hornetq")) ? TEST_HORNETQ_JMS_XML : TEST_ACTIVEMQ_JMS_XML[ CD ]
Line_11 $$ if (actionResult != null) -->Line_12 $$ if (actionResult.getDeploymentException() != null) [ CD ]
Line_9 $$ final ServerDeploymentPlanResult result = future.get(20, TimeUnit.SECONDS)-->Line_10 $$ final ServerDeploymentActionResult actionResult = result.getDeploymentActionResult(plan.getId())[ FD ]
Line_2 $$ protected void doSetup(final ManagementClient managementClient) throws Exception -->Line_3 $$ final ServerDeploymentManager manager = ServerDeploymentManager.Factory.create(managementClient.getControllerClient())[ CD ]
Line_7 $$ final DeploymentPlan plan = manager.newDeploymentPlan().add(DeployedXmlJMSManagementTestCase.class.getResource("/" + packageName + "/" + xmlFile)).andDeploy().build()-->Line_8 $$ final Future<ServerDeploymentPlanResult> future = manager.execute(plan)[ FD ]
Line_10 $$ final ServerDeploymentActionResult actionResult = result.getDeploymentActionResult(plan.getId())-->Line_13 $$ throw new RuntimeException(actionResult.getDeploymentException())[ FD ]
Line_8 $$ final Future<ServerDeploymentPlanResult> future = manager.execute(plan)-->Line_9 $$ final ServerDeploymentPlanResult result = future.get(20, TimeUnit.SECONDS)[ FD ]
Line_10 $$ final ServerDeploymentActionResult actionResult = result.getDeploymentActionResult(plan.getId())-->Line_11 $$ if (actionResult != null) [ FD ]
Line_2 $$ protected void doSetup(final ManagementClient managementClient) throws Exception -->Line_3 $$ final ServerDeploymentManager manager = ServerDeploymentManager.Factory.create(managementClient.getControllerClient())[ FD ]
Line_2 $$ protected void doSetup(final ManagementClient managementClient) throws Exception -->Line_11 $$ if (actionResult != null) [ CD ]
Line_2 $$ protected void doSetup(final ManagementClient managementClient) throws Exception -->Line_5 $$ JMSOperations jmsOperations = JMSOperationsProvider.getInstance(managementClient)[ CD ]
Line_3 $$ final ServerDeploymentManager manager = ServerDeploymentManager.Factory.create(managementClient.getControllerClient())-->Line_7 $$ final DeploymentPlan plan = manager.newDeploymentPlan().add(DeployedXmlJMSManagementTestCase.class.getResource("/" + packageName + "/" + xmlFile)).andDeploy().build()[ FD ]
