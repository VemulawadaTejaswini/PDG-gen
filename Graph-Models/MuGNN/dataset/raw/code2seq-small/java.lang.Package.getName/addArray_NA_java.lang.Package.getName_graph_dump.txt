Line_15 $$ Class compType = cls-->Line_30 $$ if (compType == Byte.TYPE) [ FD ]
Line_34 $$ typeName = "short"-->Line_66 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_28 $$ typeName = "wchar"-->Line_43 $$ typeName = "float"[ FD ]
Line_20 $$ String typeName-->Line_66 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_35 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)-->Line_96 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_84 $$ typeCode = orb.create_sequence_tc(0, typeCode)-->Line_99 $$ typeCode = boxTypeCode[ FD ]
Line_20 $$ String typeName-->Line_25 $$ typeName = "boolean"[ FD ]
Line_31 $$ typeName = "octet"-->Line_46 $$ typeName = "double"[ FD ]
Line_65 $$ if (compType.isInterface() && !RmiIdlUtil.isAbstractValueType(compType))-->Line_66 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ CD ]
Line_43 $$ typeName = "float"-->Line_69 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_30 $$ if (compType == Byte.TYPE) -->Line_33 $$ if (compType == Short.TYPE) [ CD ]
Line_31 $$ typeName = "octet"-->Line_37 $$ typeName = "long"[ FD ]
Line_25 $$ typeName = "boolean"-->Line_28 $$ typeName = "wchar"[ FD ]
Line_44 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)-->Line_96 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_36 $$ if (compType == Integer.TYPE) -->Line_38 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)[ CD ]
Line_60 $$ typeName = getJavaxRmiCORBAClassDesc().name()-->Line_64 $$ typeName = getJavaIoExternalizable().name()[ FD ]
Line_15 $$ Class compType = cls-->Line_17 $$ compType = compType.getComponentType()[ FD ]
Line_62 $$ typeName = getJavaIoSerializable().name()-->Line_66 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_34 $$ typeName = "short"-->Line_60 $$ typeName = getJavaxRmiCORBAClassDesc().name()[ FD ]
Line_29 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)-->Line_38 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)[ FD ]
Line_15 $$ Class compType = cls-->Line_59 $$ if (compType == java.lang.Class.class)[ FD ]
Line_17 $$ compType = compType.getComponentType()-->Line_55 $$ if (compType == java.lang.String.class)[ FD ]
Line_15 $$ Class compType = cls-->Line_63 $$ if (compType == java.io.Externalizable.class)[ FD ]
Line_17 $$ compType = compType.getComponentType()-->Line_42 $$ if (compType == Float.TYPE) [ FD ]
Line_58 $$ typeName = getJavaLang_Object().name()-->Line_62 $$ typeName = getJavaIoSerializable().name()[ FD ]
Line_32 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)-->Line_99 $$ typeCode = boxTypeCode[ FD ]
Line_25 $$ typeName = "boolean"-->Line_56 $$ typeName = getJavaLangString().name()[ FD ]
Line_22 $$ TypeCode typeCode-->Line_47 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)[ FD ]
Line_31 $$ typeName = "octet"-->Line_60 $$ typeName = getJavaxRmiCORBAClassDesc().name()[ FD ]
Line_17 $$ compType = compType.getComponentType()-->Line_61 $$ if (compType == java.io.Serializable.class)[ FD ]
Line_46 $$ typeName = "double"-->Line_58 $$ typeName = getJavaLang_Object().name()[ FD ]
Line_99 $$ typeCode = boxTypeCode-->Line_101 $$ typeCode = vbDef.type()[ FD ]
Line_56 $$ typeName = getJavaLangString().name()-->Line_58 $$ typeName = getJavaLang_Object().name()[ FD ]
Line_38 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)-->Line_47 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)[ FD ]
Line_29 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)-->Line_35 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)[ FD ]
Line_34 $$ typeName = "short"-->Line_40 $$ typeName = "long_long"[ FD ]
Line_86 $$ if (vbDef == null) -->Line_95 $$ m.add(name, vbDef)[ CD ]
Line_25 $$ typeName = "boolean"-->Line_66 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_37 $$ typeName = "long"-->Line_62 $$ typeName = getJavaIoSerializable().name()[ FD ]
Line_17 $$ compType = compType.getComponentType()-->Line_27 $$ if (compType == Character.TYPE) [ FD ]
Line_55 $$ if (compType == java.lang.String.class)-->Line_57 $$ if (compType == java.lang.Object.class)[ CD ]
Line_83 $$ Class type = types[i]-->Line_85 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(type)[ FD ]
Line_34 $$ typeName = "short"-->Line_62 $$ typeName = getJavaIoSerializable().name()[ FD ]
Line_93 $$ vbDef = new ValueBoxDefImpl(id, name, "1.0", m, boxTypeCode, impl)-->Line_96 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_38 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)-->Line_96 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_37 $$ typeName = "long"-->Line_58 $$ typeName = getJavaLang_Object().name()[ FD ]
Line_86 $$ if (vbDef == null) -->Line_101 $$ typeCode = vbDef.type()[ CD ]
Line_15 $$ Class compType = cls-->Line_61 $$ if (compType == java.io.Serializable.class)[ FD ]
Line_28 $$ typeName = "wchar"-->Line_69 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_93 $$ vbDef = new ValueBoxDefImpl(id, name, "1.0", m, boxTypeCode, impl)-->Line_95 $$ m.add(name, vbDef)[ FD ]
Line_86 $$ if (vbDef == null) -->Line_88 $$ SequenceDefImpl sdi = new SequenceDefImpl(typeCode, impl)[ CD ]
Line_58 $$ typeName = getJavaLang_Object().name()-->Line_69 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_37 $$ typeName = "long"-->Line_69 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_15 $$ Class compType = cls-->Line_36 $$ if (compType == Integer.TYPE) [ FD ]
Line_15 $$ Class compType = cls-->Line_67 $$ if (// exception type[ FD ]
Line_28 $$ typeName = "wchar"-->Line_37 $$ typeName = "long"[ FD ]
Line_40 $$ typeName = "long_long"-->Line_62 $$ typeName = getJavaIoSerializable().name()[ FD ]
Line_41 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)-->Line_47 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)[ FD ]
Line_41 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)-->Line_44 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)[ FD ]
Line_28 $$ typeName = "wchar"-->Line_62 $$ typeName = getJavaIoSerializable().name()[ FD ]
Line_17 $$ compType = compType.getComponentType()-->Line_65 $$ if (compType.isInterface() && !RmiIdlUtil.isAbstractValueType(compType))[ FD ]
Line_25 $$ typeName = "boolean"-->Line_37 $$ typeName = "long"[ FD ]
Line_34 $$ typeName = "short"-->Line_37 $$ typeName = "long"[ FD ]
Line_8 $$ ValueBoxDefImpl vbDef-->Line_93 $$ vbDef = new ValueBoxDefImpl(id, name, "1.0", m, boxTypeCode, impl)[ FD ]
Line_35 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)-->Line_101 $$ typeCode = vbDef.type()[ FD ]
Line_64 $$ typeName = getJavaIoExternalizable().name()-->Line_66 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_46 $$ typeName = "double"-->Line_56 $$ typeName = getJavaLangString().name()[ FD ]
Line_32 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)-->Line_35 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)[ FD ]
Line_25 $$ typeName = "boolean"-->Line_31 $$ typeName = "octet"[ FD ]
Line_22 $$ TypeCode typeCode-->Line_29 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)[ FD ]
Line_41 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)-->Line_99 $$ typeCode = boxTypeCode[ FD ]
Line_99 $$ typeCode = boxTypeCode-->Line_84 $$ typeCode = orb.create_sequence_tc(0, typeCode)[ FD ]
Line_23 $$ if (compType.isPrimitive()) -->Line_24 $$ if (compType == Boolean.TYPE) [ CD ]
Line_38 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)-->Line_44 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)[ FD ]
Line_15 $$ Class compType = cls-->Line_39 $$ if (compType == Long.TYPE) [ FD ]
Line_39 $$ if (compType == Long.TYPE) -->Line_41 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)[ CD ]
Line_58 $$ typeName = getJavaLang_Object().name()-->Line_64 $$ typeName = getJavaIoExternalizable().name()[ FD ]
Line_23 $$ if (compType.isPrimitive()) -->Line_55 $$ if (compType == java.lang.String.class)[ CD ]
Line_61 $$ if (compType == java.io.Serializable.class)-->Line_63 $$ if (compType == java.io.Externalizable.class)[ CD ]
Line_36 $$ if (compType == Integer.TYPE) -->Line_39 $$ if (compType == Long.TYPE) [ CD ]
Line_30 $$ if (compType == Byte.TYPE) -->Line_31 $$ typeName = "octet"[ CD ]
Line_22 $$ TypeCode typeCode-->Line_32 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)[ FD ]
Line_32 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)-->Line_96 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_34 $$ typeName = "short"-->Line_58 $$ typeName = getJavaLang_Object().name()[ FD ]
Line_64 $$ typeName = getJavaIoExternalizable().name()-->Line_69 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_33 $$ if (compType == Short.TYPE) -->Line_34 $$ typeName = "short"[ CD ]
Line_20 $$ String typeName-->Line_62 $$ typeName = getJavaIoSerializable().name()[ FD ]
Line_20 $$ String typeName-->Line_58 $$ typeName = getJavaLang_Object().name()[ FD ]
Line_34 $$ typeName = "short"-->Line_69 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_83 $$ Class type = types[i]-->Line_87 $$ String id = Util.getIRIdentifierOfClass(type)[ FD ]
Line_43 $$ typeName = "float"-->Line_60 $$ typeName = getJavaxRmiCORBAClassDesc().name()[ FD ]
Line_26 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)-->Line_47 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)[ FD ]
Line_17 $$ compType = compType.getComponentType()-->Line_39 $$ if (compType == Long.TYPE) [ FD ]
Line_43 $$ typeName = "float"-->Line_46 $$ typeName = "double"[ FD ]
Line_40 $$ typeName = "long_long"-->Line_43 $$ typeName = "float"[ FD ]
Line_24 $$ if (compType == Boolean.TYPE) -->Line_25 $$ typeName = "boolean"[ CD ]
Line_28 $$ typeName = "wchar"-->Line_66 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_93 $$ vbDef = new ValueBoxDefImpl(id, name, "1.0", m, boxTypeCode, impl)-->Line_86 $$ if (vbDef == null) [ FD ]
Line_20 $$ String typeName-->Line_40 $$ typeName = "long_long"[ FD ]
Line_34 $$ typeName = "short"-->Line_64 $$ typeName = getJavaIoExternalizable().name()[ FD ]
Line_37 $$ typeName = "long"-->Line_66 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_29 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)-->Line_96 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_15 $$ Class compType = cls-->Line_23 $$ if (compType.isPrimitive()) [ FD ]
Line_20 $$ String typeName-->Line_28 $$ typeName = "wchar"[ FD ]
Line_26 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)-->Line_84 $$ typeCode = orb.create_sequence_tc(0, typeCode)[ FD ]
Line_84 $$ typeCode = orb.create_sequence_tc(0, typeCode)-->Line_101 $$ typeCode = vbDef.type()[ FD ]
Line_24 $$ if (compType == Boolean.TYPE) -->Line_26 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)[ CD ]
Line_32 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)-->Line_44 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)[ FD ]
Line_34 $$ typeName = "short"-->Line_46 $$ typeName = "double"[ FD ]
Line_15 $$ Class compType = cls-->Line_42 $$ if (compType == Float.TYPE) [ FD ]
Line_17 $$ compType = compType.getComponentType()-->Line_33 $$ if (compType == Short.TYPE) [ FD ]
Line_25 $$ typeName = "boolean"-->Line_34 $$ typeName = "short"[ FD ]
Line_40 $$ typeName = "long_long"-->Line_69 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_44 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)-->Line_101 $$ typeCode = vbDef.type()[ FD ]
Line_40 $$ typeName = "long_long"-->Line_46 $$ typeName = "double"[ FD ]
Line_89 $$ String name = "seq" + (i + 1) + "_" + typeName-->Line_95 $$ m.add(name, vbDef)[ FD ]
Line_25 $$ typeName = "boolean"-->Line_40 $$ typeName = "long_long"[ FD ]
Line_32 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)-->Line_47 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)[ FD ]
Line_26 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)-->Line_38 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)[ FD ]
Line_43 $$ typeName = "float"-->Line_56 $$ typeName = getJavaLangString().name()[ FD ]
Line_17 $$ compType = compType.getComponentType()-->Line_36 $$ if (compType == Integer.TYPE) [ FD ]
Line_46 $$ typeName = "double"-->Line_64 $$ typeName = getJavaIoExternalizable().name()[ FD ]
Line_25 $$ typeName = "boolean"-->Line_43 $$ typeName = "float"[ FD ]
Line_22 $$ TypeCode typeCode-->Line_26 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)[ FD ]
Line_33 $$ if (compType == Short.TYPE) -->Line_36 $$ if (compType == Integer.TYPE) [ CD ]
Line_60 $$ typeName = getJavaxRmiCORBAClassDesc().name()-->Line_62 $$ typeName = getJavaIoSerializable().name()[ FD ]
Line_40 $$ typeName = "long_long"-->Line_60 $$ typeName = getJavaxRmiCORBAClassDesc().name()[ FD ]
Line_24 $$ if (compType == Boolean.TYPE) -->Line_27 $$ if (compType == Character.TYPE) [ CD ]
Line_29 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)-->Line_44 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)[ FD ]
Line_22 $$ TypeCode typeCode-->Line_96 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_17 $$ compType = compType.getComponentType()-->Line_30 $$ if (compType == Byte.TYPE) [ FD ]
Line_45 $$ if (compType == Double.TYPE) -->Line_47 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)[ CD ]
Line_38 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)-->Line_41 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)[ FD ]
Line_17 $$ compType = compType.getComponentType()-->Line_63 $$ if (compType == java.io.Externalizable.class)[ FD ]
Line_58 $$ typeName = getJavaLang_Object().name()-->Line_66 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_85 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(type)-->Line_95 $$ m.add(name, vbDef)[ FD ]
Line_17 $$ compType = compType.getComponentType()-->Line_16 $$ do [ FD ]
Line_61 $$ if (compType == java.io.Serializable.class)-->Line_62 $$ typeName = getJavaIoSerializable().name()[ CD ]
Line_26 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)-->Line_99 $$ typeCode = boxTypeCode[ FD ]
Line_8 $$ ValueBoxDefImpl vbDef-->Line_86 $$ if (vbDef == null) [ FD ]
Line_17 $$ compType = compType.getComponentType()-->Line_49 $$ throw IIOPLogger.ROOT_LOGGER.unknownPrimitiveType(compType.getName())[ FD ]
Line_67 $$ if (// exception type-->Line_69 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ CD ]
Line_21 $$ String moduleName-->Line_73 $$ moduleName = "org.omg.boxedRMI." + compType.getPackage().getName()[ FD ]
Line_8 $$ ValueBoxDefImpl vbDef-->Line_101 $$ typeCode = vbDef.type()[ FD ]
Line_37 $$ typeName = "long"-->Line_60 $$ typeName = getJavaxRmiCORBAClassDesc().name()[ FD ]
Line_17 $$ compType = compType.getComponentType()-->Line_67 $$ if (// exception type[ FD ]
Line_99 $$ typeCode = boxTypeCode-->Line_96 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_8 $$ ValueBoxDefImpl vbDef-->Line_11 $$ if (vbDef != null)[ FD ]
Line_28 $$ typeName = "wchar"-->Line_31 $$ typeName = "octet"[ FD ]
Line_85 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(type)-->Line_96 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_22 $$ TypeCode typeCode-->Line_84 $$ typeCode = orb.create_sequence_tc(0, typeCode)[ FD ]
Line_30 $$ if (compType == Byte.TYPE) -->Line_32 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)[ CD ]
Line_8 $$ ValueBoxDefImpl vbDef-->Line_85 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(type)[ FD ]
Line_15 $$ Class compType = cls-->Line_45 $$ if (compType == Double.TYPE) [ FD ]
Line_31 $$ typeName = "octet"-->Line_64 $$ typeName = getJavaIoExternalizable().name()[ FD ]
Line_93 $$ vbDef = new ValueBoxDefImpl(id, name, "1.0", m, boxTypeCode, impl)-->Line_94 $$ addTypeCode(type, vbDef.type())[ FD ]
Line_27 $$ if (compType == Character.TYPE) -->Line_29 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)[ CD ]
Line_88 $$ SequenceDefImpl sdi = new SequenceDefImpl(typeCode, impl)-->Line_96 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_26 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)-->Line_101 $$ typeCode = vbDef.type()[ FD ]
Line_85 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(type)-->Line_93 $$ vbDef = new ValueBoxDefImpl(id, name, "1.0", m, boxTypeCode, impl)[ FD ]
Line_20 $$ String typeName-->Line_56 $$ typeName = getJavaLangString().name()[ FD ]
Line_33 $$ if (compType == Short.TYPE) -->Line_35 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)[ CD ]
Line_8 $$ ValueBoxDefImpl vbDef-->Line_95 $$ m.add(name, vbDef)[ FD ]
Line_26 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)-->Line_96 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_44 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)-->Line_47 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)[ FD ]
Line_43 $$ typeName = "float"-->Line_64 $$ typeName = getJavaIoExternalizable().name()[ FD ]
Line_28 $$ typeName = "wchar"-->Line_40 $$ typeName = "long_long"[ FD ]
Line_44 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)-->Line_84 $$ typeCode = orb.create_sequence_tc(0, typeCode)[ FD ]
Line_15 $$ Class compType = cls-->Line_16 $$ do [ FD ]
Line_17 $$ compType = compType.getComponentType()-->Line_59 $$ if (compType == java.lang.Class.class)[ FD ]
Line_16 $$ do -->Line_17 $$ compType = compType.getComponentType()[ CD ]
Line_14 $$ int dimensions = 0-->Line_18 $$ ++dimensions[ FD ]
Line_37 $$ typeName = "long"-->Line_43 $$ typeName = "float"[ FD ]
Line_22 $$ TypeCode typeCode-->Line_35 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)[ FD ]
Line_47 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)-->Line_96 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_34 $$ typeName = "short"-->Line_56 $$ typeName = getJavaLangString().name()[ FD ]
Line_29 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)-->Line_41 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)[ FD ]
Line_40 $$ typeName = "long_long"-->Line_56 $$ typeName = getJavaLangString().name()[ FD ]
Line_32 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)-->Line_84 $$ typeCode = orb.create_sequence_tc(0, typeCode)[ FD ]
Line_38 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)-->Line_84 $$ typeCode = orb.create_sequence_tc(0, typeCode)[ FD ]
Line_86 $$ if (vbDef == null) -->Line_94 $$ addTypeCode(type, vbDef.type())[ CD ]
Line_55 $$ if (compType == java.lang.String.class)-->Line_56 $$ typeName = getJavaLangString().name()[ CD ]
Line_47 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)-->Line_101 $$ typeCode = vbDef.type()[ FD ]
Line_15 $$ Class compType = cls-->Line_33 $$ if (compType == Short.TYPE) [ FD ]
Line_25 $$ typeName = "boolean"-->Line_58 $$ typeName = getJavaLang_Object().name()[ FD ]
Line_43 $$ typeName = "float"-->Line_66 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_15 $$ Class compType = cls-->Line_24 $$ if (compType == Boolean.TYPE) [ FD ]
Line_31 $$ typeName = "octet"-->Line_69 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_8 $$ ValueBoxDefImpl vbDef-->Line_94 $$ addTypeCode(type, vbDef.type())[ FD ]
Line_31 $$ typeName = "octet"-->Line_58 $$ typeName = getJavaLang_Object().name()[ FD ]
Line_15 $$ Class compType = cls-->Line_27 $$ if (compType == Character.TYPE) [ FD ]
Line_20 $$ String typeName-->Line_46 $$ typeName = "double"[ FD ]
Line_28 $$ typeName = "wchar"-->Line_60 $$ typeName = getJavaxRmiCORBAClassDesc().name()[ FD ]
Line_15 $$ Class compType = cls-->Line_57 $$ if (compType == java.lang.Object.class)[ FD ]
Line_56 $$ typeName = getJavaLangString().name()-->Line_64 $$ typeName = getJavaIoExternalizable().name()[ FD ]
Line_60 $$ typeName = getJavaxRmiCORBAClassDesc().name()-->Line_69 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_15 $$ Class compType = cls-->Line_65 $$ if (compType.isInterface() && !RmiIdlUtil.isAbstractValueType(compType))[ FD ]
Line_31 $$ typeName = "octet"-->Line_56 $$ typeName = getJavaLangString().name()[ FD ]
Line_28 $$ typeName = "wchar"-->Line_64 $$ typeName = getJavaIoExternalizable().name()[ FD ]
Line_43 $$ typeName = "float"-->Line_58 $$ typeName = getJavaLang_Object().name()[ FD ]
Line_35 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)-->Line_44 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)[ FD ]
Line_59 $$ if (compType == java.lang.Class.class)-->Line_61 $$ if (compType == java.io.Serializable.class)[ CD ]
Line_15 $$ Class compType = cls-->Line_49 $$ throw IIOPLogger.ROOT_LOGGER.unknownPrimitiveType(compType.getName())[ FD ]
Line_15 $$ Class compType = cls-->Line_73 $$ moduleName = "org.omg.boxedRMI." + compType.getPackage().getName()[ FD ]
Line_35 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)-->Line_47 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)[ FD ]
Line_23 $$ if (compType.isPrimitive()) -->Line_51 $$ moduleName = "org.omg.boxedRMI"[ CD ]
Line_17 $$ compType = compType.getComponentType()-->Line_24 $$ if (compType == Boolean.TYPE) [ FD ]
Line_56 $$ typeName = getJavaLangString().name()-->Line_69 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_29 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)-->Line_101 $$ typeCode = vbDef.type()[ FD ]
Line_63 $$ if (compType == java.io.Externalizable.class)-->Line_64 $$ typeName = getJavaIoExternalizable().name()[ CD ]
Line_22 $$ TypeCode typeCode-->Line_101 $$ typeCode = vbDef.type()[ FD ]
Line_101 $$ typeCode = vbDef.type()-->Line_84 $$ typeCode = orb.create_sequence_tc(0, typeCode)[ FD ]
Line_32 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)-->Line_38 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)[ FD ]
Line_27 $$ if (compType == Character.TYPE) -->Line_30 $$ if (compType == Byte.TYPE) [ CD ]
Line_22 $$ TypeCode typeCode-->Line_41 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)[ FD ]
Line_38 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)-->Line_101 $$ typeCode = vbDef.type()[ FD ]
Line_15 $$ Class compType = cls-->Line_69 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_28 $$ typeName = "wchar"-->Line_58 $$ typeName = getJavaLang_Object().name()[ FD ]
Line_25 $$ typeName = "boolean"-->Line_69 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_23 $$ if (compType.isPrimitive()) -->Line_73 $$ moduleName = "org.omg.boxedRMI." + compType.getPackage().getName()[ CD ]
Line_45 $$ if (compType == Double.TYPE) -->Line_46 $$ typeName = "double"[ CD ]
Line_85 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(type)-->Line_86 $$ if (vbDef == null) [ FD ]
Line_31 $$ typeName = "octet"-->Line_66 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_37 $$ typeName = "long"-->Line_64 $$ typeName = getJavaIoExternalizable().name()[ FD ]
Line_56 $$ typeName = getJavaLangString().name()-->Line_60 $$ typeName = getJavaxRmiCORBAClassDesc().name()[ FD ]
Line_62 $$ typeName = getJavaIoSerializable().name()-->Line_64 $$ typeName = getJavaIoExternalizable().name()[ FD ]
Line_31 $$ typeName = "octet"-->Line_34 $$ typeName = "short"[ FD ]
Line_40 $$ typeName = "long_long"-->Line_58 $$ typeName = getJavaLang_Object().name()[ FD ]
Line_57 $$ if (compType == java.lang.Object.class)-->Line_58 $$ typeName = getJavaLang_Object().name()[ CD ]
Line_32 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)-->Line_41 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)[ FD ]
Line_32 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)-->Line_101 $$ typeCode = vbDef.type()[ FD ]
Line_59 $$ if (compType == java.lang.Class.class)-->Line_60 $$ typeName = getJavaxRmiCORBAClassDesc().name()[ CD ]
Line_20 $$ String typeName-->Line_37 $$ typeName = "long"[ FD ]
Line_25 $$ typeName = "boolean"-->Line_46 $$ typeName = "double"[ FD ]
Line_42 $$ if (compType == Float.TYPE) -->Line_44 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)[ CD ]
Line_25 $$ typeName = "boolean"-->Line_62 $$ typeName = getJavaIoSerializable().name()[ FD ]
Line_8 $$ ValueBoxDefImpl vbDef-->Line_96 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_20 $$ String typeName-->Line_64 $$ typeName = getJavaIoExternalizable().name()[ FD ]
Line_17 $$ compType = compType.getComponentType()-->Line_45 $$ if (compType == Double.TYPE) [ FD ]
Line_20 $$ String typeName-->Line_34 $$ typeName = "short"[ FD ]
Line_85 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(type)-->Line_101 $$ typeCode = vbDef.type()[ FD ]
Line_66 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()-->Line_69 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_17 $$ compType = compType.getComponentType()-->Line_73 $$ moduleName = "org.omg.boxedRMI." + compType.getPackage().getName()[ FD ]
Line_57 $$ if (compType == java.lang.Object.class)-->Line_59 $$ if (compType == java.lang.Class.class)[ CD ]
Line_41 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)-->Line_101 $$ typeCode = vbDef.type()[ FD ]
Line_35 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)-->Line_84 $$ typeCode = orb.create_sequence_tc(0, typeCode)[ FD ]
Line_39 $$ if (compType == Long.TYPE) -->Line_40 $$ typeName = "long_long"[ CD ]
Line_22 $$ TypeCode typeCode-->Line_99 $$ typeCode = boxTypeCode[ FD ]
Line_101 $$ typeCode = vbDef.type()-->Line_96 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_25 $$ typeName = "boolean"-->Line_60 $$ typeName = getJavaxRmiCORBAClassDesc().name()[ FD ]
Line_22 $$ TypeCode typeCode-->Line_44 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)[ FD ]
Line_31 $$ typeName = "octet"-->Line_40 $$ typeName = "long_long"[ FD ]
Line_86 $$ if (vbDef == null) -->Line_93 $$ vbDef = new ValueBoxDefImpl(id, name, "1.0", m, boxTypeCode, impl)[ CD ]
Line_17 $$ compType = compType.getComponentType()-->Line_57 $$ if (compType == java.lang.Object.class)[ FD ]
Line_65 $$ if (compType.isInterface() && !RmiIdlUtil.isAbstractValueType(compType))-->Line_67 $$ if (// exception type[ CD ]
Line_86 $$ if (vbDef == null) -->Line_96 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ CD ]
Line_27 $$ if (compType == Character.TYPE) -->Line_28 $$ typeName = "wchar"[ CD ]
Line_84 $$ typeCode = orb.create_sequence_tc(0, typeCode)-->Line_96 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_29 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)-->Line_99 $$ typeCode = boxTypeCode[ FD ]
Line_43 $$ typeName = "float"-->Line_62 $$ typeName = getJavaIoSerializable().name()[ FD ]
Line_31 $$ typeName = "octet"-->Line_62 $$ typeName = getJavaIoSerializable().name()[ FD ]
Line_60 $$ typeName = getJavaxRmiCORBAClassDesc().name()-->Line_66 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_41 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)-->Line_96 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_28 $$ typeName = "wchar"-->Line_56 $$ typeName = getJavaLangString().name()[ FD ]
Line_36 $$ if (compType == Integer.TYPE) -->Line_37 $$ typeName = "long"[ CD ]
Line_86 $$ if (vbDef == null) -->Line_87 $$ String id = Util.getIRIdentifierOfClass(type)[ CD ]
Line_25 $$ typeName = "boolean"-->Line_64 $$ typeName = getJavaIoExternalizable().name()[ FD ]
Line_51 $$ moduleName = "org.omg.boxedRMI"-->Line_73 $$ moduleName = "org.omg.boxedRMI." + compType.getPackage().getName()[ FD ]
Line_26 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)-->Line_41 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)[ FD ]
Line_38 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)-->Line_99 $$ typeCode = boxTypeCode[ FD ]
Line_21 $$ String moduleName-->Line_51 $$ moduleName = "org.omg.boxedRMI"[ FD ]
Line_28 $$ typeName = "wchar"-->Line_46 $$ typeName = "double"[ FD ]
Line_29 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)-->Line_32 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)[ FD ]
Line_29 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)-->Line_84 $$ typeCode = orb.create_sequence_tc(0, typeCode)[ FD ]
Line_16 $$ do -->Line_18 $$ ++dimensions[ CD ]
Line_37 $$ typeName = "long"-->Line_40 $$ typeName = "long_long"[ FD ]
Line_20 $$ String typeName-->Line_69 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_37 $$ typeName = "long"-->Line_46 $$ typeName = "double"[ FD ]
Line_22 $$ TypeCode typeCode-->Line_38 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)[ FD ]
Line_47 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)-->Line_99 $$ typeCode = boxTypeCode[ FD ]
Line_56 $$ typeName = getJavaLangString().name()-->Line_62 $$ typeName = getJavaIoSerializable().name()[ FD ]
Line_42 $$ if (compType == Float.TYPE) -->Line_45 $$ if (compType == Double.TYPE) [ CD ]
Line_17 $$ compType = compType.getComponentType()-->Line_69 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_35 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)-->Line_38 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)[ FD ]
Line_17 $$ compType = compType.getComponentType()-->Line_66 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_35 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)-->Line_41 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)[ FD ]
Line_93 $$ vbDef = new ValueBoxDefImpl(id, name, "1.0", m, boxTypeCode, impl)-->Line_101 $$ typeCode = vbDef.type()[ FD ]
Line_58 $$ typeName = getJavaLang_Object().name()-->Line_60 $$ typeName = getJavaxRmiCORBAClassDesc().name()[ FD ]
Line_46 $$ typeName = "double"-->Line_69 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_41 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)-->Line_84 $$ typeCode = orb.create_sequence_tc(0, typeCode)[ FD ]
Line_47 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)-->Line_84 $$ typeCode = orb.create_sequence_tc(0, typeCode)[ FD ]
Line_26 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)-->Line_32 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)[ FD ]
Line_87 $$ String id = Util.getIRIdentifierOfClass(type)-->Line_96 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_44 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)-->Line_99 $$ typeCode = boxTypeCode[ FD ]
Line_15 $$ Class compType = cls-->Line_55 $$ if (compType == java.lang.String.class)[ FD ]
Line_62 $$ typeName = getJavaIoSerializable().name()-->Line_69 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_29 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)-->Line_47 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)[ FD ]
Line_26 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)-->Line_44 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)[ FD ]
Line_20 $$ String typeName-->Line_31 $$ typeName = "octet"[ FD ]
Line_46 $$ typeName = "double"-->Line_62 $$ typeName = getJavaIoSerializable().name()[ FD ]
Line_42 $$ if (compType == Float.TYPE) -->Line_43 $$ typeName = "float"[ CD ]
Line_20 $$ String typeName-->Line_43 $$ typeName = "float"[ FD ]
Line_83 $$ Class type = types[i]-->Line_94 $$ addTypeCode(type, vbDef.type())[ FD ]
Line_86 $$ if (vbDef == null) -->Line_99 $$ typeCode = boxTypeCode[ CD ]
Line_35 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)-->Line_99 $$ typeCode = boxTypeCode[ FD ]
Line_40 $$ typeName = "long_long"-->Line_66 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_63 $$ if (compType == java.io.Externalizable.class)-->Line_65 $$ if (compType.isInterface() && !RmiIdlUtil.isAbstractValueType(compType))[ CD ]
Line_26 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)-->Line_29 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)[ FD ]
Line_31 $$ typeName = "octet"-->Line_43 $$ typeName = "float"[ FD ]
Line_40 $$ typeName = "long_long"-->Line_64 $$ typeName = getJavaIoExternalizable().name()[ FD ]
Line_46 $$ typeName = "double"-->Line_60 $$ typeName = getJavaxRmiCORBAClassDesc().name()[ FD ]
Line_34 $$ typeName = "short"-->Line_43 $$ typeName = "float"[ FD ]
Line_17 $$ compType = compType.getComponentType()-->Line_23 $$ if (compType.isPrimitive()) [ FD ]
Line_15 $$ Class compType = cls-->Line_66 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_28 $$ typeName = "wchar"-->Line_34 $$ typeName = "short"[ FD ]
Line_56 $$ typeName = getJavaLangString().name()-->Line_66 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_46 $$ typeName = "double"-->Line_66 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_37 $$ typeName = "long"-->Line_56 $$ typeName = getJavaLangString().name()[ FD ]
Line_85 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(type)-->Line_94 $$ addTypeCode(type, vbDef.type())[ FD ]
Line_86 $$ if (vbDef == null) -->Line_89 $$ String name = "seq" + (i + 1) + "_" + typeName[ CD ]
Line_26 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)-->Line_35 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)[ FD ]
Line_20 $$ String typeName-->Line_60 $$ typeName = getJavaxRmiCORBAClassDesc().name()[ FD ]
Line_39 $$ if (compType == Long.TYPE) -->Line_42 $$ if (compType == Float.TYPE) [ CD ]
