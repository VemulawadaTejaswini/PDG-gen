Line_3 $$ KeyProviderCryptoExtension.EncryptedKeyVersion eek = kpExt.generateEncryptedKey(encryptionKey.getName())-->Line_5 $$ final byte[] encryptedKeyMaterial = eek.getEncryptedKeyVersion().getMaterial()[ FD ]
Line_2 $$ public void testEncryptDecrypt() throws Exception -->Line_8 $$ final byte[] manualMaterial = cipher.doFinal(encryptedKeyMaterial)[ CD ]
Line_6 $$ Cipher cipher = Cipher.getInstance("AES/CTR/NoPadding")-->Line_7 $$ cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(encryptionKey.getMaterial(), "AES"), new IvParameterSpec(KeyProviderCryptoExtension.EncryptedKeyVersion.deriveIV(encryptedKeyIv)))[ FD ]
Line_2 $$ public void testEncryptDecrypt() throws Exception -->Line_10 $$ KeyVersion decryptedKey = kpExt.decryptEncryptedKey(eek2)[ CD ]
Line_2 $$ public void testEncryptDecrypt() throws Exception -->Line_5 $$ final byte[] encryptedKeyMaterial = eek.getEncryptedKeyVersion().getMaterial()[ CD ]
Line_8 $$ final byte[] manualMaterial = cipher.doFinal(encryptedKeyMaterial)-->Line_12 $$ assertArrayEquals("Wrong key material from decryptEncryptedKey", manualMaterial, apiMaterial)[ FD ]
Line_5 $$ final byte[] encryptedKeyMaterial = eek.getEncryptedKeyVersion().getMaterial()-->Line_8 $$ final byte[] manualMaterial = cipher.doFinal(encryptedKeyMaterial)[ FD ]
Line_2 $$ public void testEncryptDecrypt() throws Exception -->Line_4 $$ final byte[] encryptedKeyIv = eek.getEncryptedKeyIv()[ CD ]
Line_3 $$ KeyProviderCryptoExtension.EncryptedKeyVersion eek = kpExt.generateEncryptedKey(encryptionKey.getName())-->Line_9 $$ EncryptedKeyVersion eek2 = EncryptedKeyVersion.createForDecryption(eek.getEncryptionKeyVersionName(), eek.getEncryptedKeyIv(), eek.getEncryptedKeyVersion().getMaterial())[ FD ]
Line_2 $$ public void testEncryptDecrypt() throws Exception -->Line_7 $$ cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(encryptionKey.getMaterial(), "AES"), new IvParameterSpec(KeyProviderCryptoExtension.EncryptedKeyVersion.deriveIV(encryptedKeyIv)))[ CD ]
Line_10 $$ KeyVersion decryptedKey = kpExt.decryptEncryptedKey(eek2)-->Line_11 $$ final byte[] apiMaterial = decryptedKey.getMaterial()[ FD ]
Line_6 $$ Cipher cipher = Cipher.getInstance("AES/CTR/NoPadding")-->Line_8 $$ final byte[] manualMaterial = cipher.doFinal(encryptedKeyMaterial)[ FD ]
Line_2 $$ public void testEncryptDecrypt() throws Exception -->Line_3 $$ KeyProviderCryptoExtension.EncryptedKeyVersion eek = kpExt.generateEncryptedKey(encryptionKey.getName())[ CD ]
Line_2 $$ public void testEncryptDecrypt() throws Exception -->Line_11 $$ final byte[] apiMaterial = decryptedKey.getMaterial()[ CD ]
Line_2 $$ public void testEncryptDecrypt() throws Exception -->Line_6 $$ Cipher cipher = Cipher.getInstance("AES/CTR/NoPadding")[ CD ]
Line_9 $$ EncryptedKeyVersion eek2 = EncryptedKeyVersion.createForDecryption(eek.getEncryptionKeyVersionName(), eek.getEncryptedKeyIv(), eek.getEncryptedKeyVersion().getMaterial())-->Line_10 $$ KeyVersion decryptedKey = kpExt.decryptEncryptedKey(eek2)[ FD ]
Line_11 $$ final byte[] apiMaterial = decryptedKey.getMaterial()-->Line_12 $$ assertArrayEquals("Wrong key material from decryptEncryptedKey", manualMaterial, apiMaterial)[ FD ]
Line_3 $$ KeyProviderCryptoExtension.EncryptedKeyVersion eek = kpExt.generateEncryptedKey(encryptionKey.getName())-->Line_4 $$ final byte[] encryptedKeyIv = eek.getEncryptedKeyIv()[ FD ]
Line_2 $$ public void testEncryptDecrypt() throws Exception -->Line_9 $$ EncryptedKeyVersion eek2 = EncryptedKeyVersion.createForDecryption(eek.getEncryptionKeyVersionName(), eek.getEncryptedKeyIv(), eek.getEncryptedKeyVersion().getMaterial())[ CD ]
Line_4 $$ final byte[] encryptedKeyIv = eek.getEncryptedKeyIv()-->Line_7 $$ cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(encryptionKey.getMaterial(), "AES"), new IvParameterSpec(KeyProviderCryptoExtension.EncryptedKeyVersion.deriveIV(encryptedKeyIv)))[ FD ]
Line_2 $$ public void testEncryptDecrypt() throws Exception -->Line_12 $$ assertArrayEquals("Wrong key material from decryptEncryptedKey", manualMaterial, apiMaterial)[ CD ]
