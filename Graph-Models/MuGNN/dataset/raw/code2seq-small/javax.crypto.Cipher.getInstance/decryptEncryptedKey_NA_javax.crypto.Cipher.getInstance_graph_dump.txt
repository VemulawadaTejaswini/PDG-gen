Line_2 $$ public KeyVersion decryptEncryptedKey(EncryptedKeyVersion encryptedKeyVersion) throws IOException, GeneralSecurityException -->Line_3 $$ final String encryptionKeyVersionName = encryptedKeyVersion.getEncryptionKeyVersionName()[ FD ]
Line_2 $$ public KeyVersion decryptEncryptedKey(EncryptedKeyVersion encryptedKeyVersion) throws IOException, GeneralSecurityException -->Line_4 $$ final KeyVersion encryptionKey = keyProvider.getKeyVersion(encryptionKeyVersionName)[ CD ]
Line_2 $$ public KeyVersion decryptEncryptedKey(EncryptedKeyVersion encryptedKeyVersion) throws IOException, GeneralSecurityException -->Line_7 $$ final byte[] encryptionKeyMaterial = encryptionKey.getMaterial()[ CD ]
Line_2 $$ public KeyVersion decryptEncryptedKey(EncryptedKeyVersion encryptedKeyVersion) throws IOException, GeneralSecurityException -->Line_11 $$ final KeyVersion encryptedKV = encryptedKeyVersion.getEncryptedKeyVersion()[ FD ]
Line_3 $$ final String encryptionKeyVersionName = encryptedKeyVersion.getEncryptionKeyVersionName()-->Line_5 $$ Preconditions.checkNotNull(encryptionKey, "KeyVersion name '%s' does not exist", encryptionKeyVersionName)[ FD ]
Line_2 $$ public KeyVersion decryptEncryptedKey(EncryptedKeyVersion encryptedKeyVersion) throws IOException, GeneralSecurityException -->Line_8 $$ final byte[] encryptionIV = EncryptedKeyVersion.deriveIV(encryptedKeyVersion.getEncryptedKeyIv())[ FD ]
Line_2 $$ public KeyVersion decryptEncryptedKey(EncryptedKeyVersion encryptedKeyVersion) throws IOException, GeneralSecurityException -->Line_6 $$ Preconditions.checkArgument(encryptedKeyVersion.getEncryptedKeyVersion().getVersionName().equals(KeyProviderCryptoExtension.EEK), "encryptedKey version name must be '%s', is '%s'", KeyProviderCryptoExtension.EEK, encryptedKeyVersion.getEncryptedKeyVersion().getVersionName())[ FD ]
Line_2 $$ public KeyVersion decryptEncryptedKey(EncryptedKeyVersion encryptedKeyVersion) throws IOException, GeneralSecurityException -->Line_9 $$ Cipher cipher = Cipher.getInstance("AES/CTR/NoPadding")[ CD ]
Line_2 $$ public KeyVersion decryptEncryptedKey(EncryptedKeyVersion encryptedKeyVersion) throws IOException, GeneralSecurityException -->Line_10 $$ cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(encryptionKeyMaterial, "AES"), new IvParameterSpec(encryptionIV))[ CD ]
Line_2 $$ public KeyVersion decryptEncryptedKey(EncryptedKeyVersion encryptedKeyVersion) throws IOException, GeneralSecurityException -->Line_3 $$ final String encryptionKeyVersionName = encryptedKeyVersion.getEncryptionKeyVersionName()[ CD ]
Line_2 $$ public KeyVersion decryptEncryptedKey(EncryptedKeyVersion encryptedKeyVersion) throws IOException, GeneralSecurityException -->Line_11 $$ final KeyVersion encryptedKV = encryptedKeyVersion.getEncryptedKeyVersion()[ CD ]
Line_9 $$ Cipher cipher = Cipher.getInstance("AES/CTR/NoPadding")-->Line_10 $$ cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(encryptionKeyMaterial, "AES"), new IvParameterSpec(encryptionIV))[ FD ]
Line_4 $$ final KeyVersion encryptionKey = keyProvider.getKeyVersion(encryptionKeyVersionName)-->Line_7 $$ final byte[] encryptionKeyMaterial = encryptionKey.getMaterial()[ FD ]
Line_4 $$ final KeyVersion encryptionKey = keyProvider.getKeyVersion(encryptionKeyVersionName)-->Line_13 $$ return new KeyVersion(encryptionKey.getName(), EK, decryptedKey)[ FD ]
Line_2 $$ public KeyVersion decryptEncryptedKey(EncryptedKeyVersion encryptedKeyVersion) throws IOException, GeneralSecurityException -->Line_12 $$ final byte[] decryptedKey = cipher.doFinal(encryptedKV.getMaterial())[ CD ]
Line_11 $$ final KeyVersion encryptedKV = encryptedKeyVersion.getEncryptedKeyVersion()-->Line_12 $$ final byte[] decryptedKey = cipher.doFinal(encryptedKV.getMaterial())[ FD ]
Line_2 $$ public KeyVersion decryptEncryptedKey(EncryptedKeyVersion encryptedKeyVersion) throws IOException, GeneralSecurityException -->Line_6 $$ Preconditions.checkArgument(encryptedKeyVersion.getEncryptedKeyVersion().getVersionName().equals(KeyProviderCryptoExtension.EEK), "encryptedKey version name must be '%s', is '%s'", KeyProviderCryptoExtension.EEK, encryptedKeyVersion.getEncryptedKeyVersion().getVersionName())[ CD ]
Line_4 $$ final KeyVersion encryptionKey = keyProvider.getKeyVersion(encryptionKeyVersionName)-->Line_5 $$ Preconditions.checkNotNull(encryptionKey, "KeyVersion name '%s' does not exist", encryptionKeyVersionName)[ FD ]
Line_9 $$ Cipher cipher = Cipher.getInstance("AES/CTR/NoPadding")-->Line_12 $$ final byte[] decryptedKey = cipher.doFinal(encryptedKV.getMaterial())[ FD ]
Line_2 $$ public KeyVersion decryptEncryptedKey(EncryptedKeyVersion encryptedKeyVersion) throws IOException, GeneralSecurityException -->Line_5 $$ Preconditions.checkNotNull(encryptionKey, "KeyVersion name '%s' does not exist", encryptionKeyVersionName)[ CD ]
Line_2 $$ public KeyVersion decryptEncryptedKey(EncryptedKeyVersion encryptedKeyVersion) throws IOException, GeneralSecurityException -->Line_8 $$ final byte[] encryptionIV = EncryptedKeyVersion.deriveIV(encryptedKeyVersion.getEncryptedKeyIv())[ CD ]
Line_2 $$ public KeyVersion decryptEncryptedKey(EncryptedKeyVersion encryptedKeyVersion) throws IOException, GeneralSecurityException -->Line_13 $$ return new KeyVersion(encryptionKey.getName(), EK, decryptedKey)[ CD ]
Line_3 $$ final String encryptionKeyVersionName = encryptedKeyVersion.getEncryptionKeyVersionName()-->Line_4 $$ final KeyVersion encryptionKey = keyProvider.getKeyVersion(encryptionKeyVersionName)[ FD ]
