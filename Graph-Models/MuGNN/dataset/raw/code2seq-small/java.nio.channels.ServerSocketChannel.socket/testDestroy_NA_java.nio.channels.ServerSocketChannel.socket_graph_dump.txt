Line_18 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(new MockIntraband()))-->Line_31 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(new MockIntraband()))[ FD ]
Line_18 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(new MockIntraband()))-->Line_35 $$ httpClientSPIAgent.destroy()[ FD ]
Line_8 $$ Socket socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_21 $$ socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_20 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_24 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_20 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_33 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())[ FD ]
Line_32 $$ socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_34 $$ socketBlockingQueue.add(socket)[ FD ]
Line_5 $$ ServerSocketChannel serverSocketChannel = SocketUtil.createServerSocketChannel(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort(), null)-->Line_7 $$ try (ServerSocket serverSocket = serverSocketChannel.socket()) [ FD ]
Line_10 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(new MockIntraband()))-->Line_18 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(new MockIntraband()))[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_26 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_8 $$ Socket socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_33 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())[ FD ]
Line_33 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_34 $$ socketBlockingQueue.add(socket)[ FD ]
Line_5 $$ ServerSocketChannel serverSocketChannel = SocketUtil.createServerSocketChannel(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort(), null)-->Line_6 $$ serverSocketChannel.configureBlocking(true)[ FD ]
Line_9 $$ SocketImpl socketImpl = swapSocketImpl(socket, null)-->Line_21 $$ socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_27 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_8 $$ Socket socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_20 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())[ FD ]
Line_20 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_36 $$ closePeers(socket, serverSocket)[ FD ]
Line_10 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(new MockIntraband()))-->Line_13 $$ httpClientSPIAgent.destroy()[ FD ]
Line_31 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(new MockIntraband()))-->Line_35 $$ httpClientSPIAgent.destroy()[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_16 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_10 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(new MockIntraband()))-->Line_31 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(new MockIntraband()))[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_30 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_8 $$ Socket socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_9 $$ SocketImpl socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_20 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_34 $$ socketBlockingQueue.add(socket)[ FD ]
Line_8 $$ Socket socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_36 $$ closePeers(socket, serverSocket)[ FD ]
Line_8 $$ Socket socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_15 $$ closePeers(socket, serverSocket)[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_27 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_26 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_28 $$ Throwable throwable = logRecord.getThrown()-->Line_29 $$ Assert.assertSame(IOException.class, throwable.getClass())[ FD ]
Line_19 $$ socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_22 $$ socketBlockingQueue.add(socket)[ FD ]
Line_11 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_32 $$ socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue[ FD ]
Line_8 $$ Socket socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_22 $$ socketBlockingQueue.add(socket)[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(HttpClientSPIAgent.class.getName(), Level.OFF)) -->Line_30 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_18 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(new MockIntraband()))-->Line_23 $$ httpClientSPIAgent.destroy()[ FD ]
Line_7 $$ try (ServerSocket serverSocket = serverSocketChannel.socket()) -->Line_25 $$ closePeers(socket, serverSocket)[ FD ]
Line_8 $$ Socket socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_14 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_11 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_12 $$ socketBlockingQueue.add(socket)[ FD ]
Line_10 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(new MockIntraband()))-->Line_23 $$ httpClientSPIAgent.destroy()[ FD ]
Line_19 $$ socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_34 $$ socketBlockingQueue.add(socket)[ FD ]
Line_33 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_36 $$ closePeers(socket, serverSocket)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_19 $$ socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_32 $$ socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(HttpClientSPIAgent.class.getName(), Level.OFF)) -->Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_7 $$ try (ServerSocket serverSocket = serverSocketChannel.socket()) -->Line_15 $$ closePeers(socket, serverSocket)[ FD ]
Line_8 $$ Socket socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_25 $$ closePeers(socket, serverSocket)[ FD ]
Line_20 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_25 $$ closePeers(socket, serverSocket)[ FD ]
Line_7 $$ try (ServerSocket serverSocket = serverSocketChannel.socket()) -->Line_36 $$ closePeers(socket, serverSocket)[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_37 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_30 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_37 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_30 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_20 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_21 $$ socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_11 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_22 $$ socketBlockingQueue.add(socket)[ FD ]
Line_8 $$ Socket socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_34 $$ socketBlockingQueue.add(socket)[ FD ]
Line_20 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_22 $$ socketBlockingQueue.add(socket)[ FD ]
Line_27 $$ LogRecord logRecord = logRecords.get(0)-->Line_28 $$ Throwable throwable = logRecord.getThrown()[ FD ]
Line_10 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(new MockIntraband()))-->Line_35 $$ httpClientSPIAgent.destroy()[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_37 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_8 $$ Socket socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_24 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_8 $$ Socket socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_12 $$ socketBlockingQueue.add(socket)[ FD ]
Line_9 $$ SocketImpl socketImpl = swapSocketImpl(socket, null)-->Line_14 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_11 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_34 $$ socketBlockingQueue.add(socket)[ FD ]
Line_21 $$ socketImpl = swapSocketImpl(socket, null)-->Line_24 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_11 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_19 $$ socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(HttpClientSPIAgent.class.getName(), Level.OFF)) -->Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_9 $$ SocketImpl socketImpl = swapSocketImpl(socket, null)-->Line_24 $$ swapSocketImpl(socket, socketImpl)[ FD ]
