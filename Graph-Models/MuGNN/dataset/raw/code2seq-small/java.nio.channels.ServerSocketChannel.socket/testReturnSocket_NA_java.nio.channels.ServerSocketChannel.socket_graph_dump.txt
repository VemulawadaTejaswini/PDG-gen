Line_7 $$ SocketChannel socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_37 $$ socket = socketChannel.socket()[ FD ]
Line_23 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_45 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_23 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_53 $$ closePeers(socket, serverSocket)[ FD ]
Line_5 $$ try (ServerSocket serverSocket = serverSocketChannel.socket()) -->Line_41 $$ closePeers(socket, serverSocket)[ FD ]
Line_8 $$ Socket socket = socketChannel.socket()-->Line_15 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())[ FD ]
Line_37 $$ socket = socketChannel.socket()-->Line_38 $$ socket.shutdownInput()[ FD ]
Line_3 $$ ServerSocketChannel serverSocketChannel = SocketUtil.createServerSocketChannel(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort(), null)-->Line_5 $$ try (ServerSocket serverSocket = serverSocketChannel.socket()) [ FD ]
Line_6 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(new SPIConfiguration(null, null, serverSocket.getLocalPort(), _spiConfiguration.getBaseDir(), null, null, null), new MockRegistrationReference(new MockIntraband()))-->Line_9 $$ httpClientSPIAgent.returnSocket(socket, true)[ FD ]
Line_23 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_38 $$ socket.shutdownInput()[ FD ]
Line_8 $$ Socket socket = socketChannel.socket()-->Line_49 $$ socket = socketChannel.socket()[ FD ]
Line_37 $$ socket = socketChannel.socket()-->Line_43 $$ socket = socketChannel.socket()[ FD ]
Line_8 $$ Socket socket = socketChannel.socket()-->Line_50 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_16 $$ SocketImpl socketImpl = swapSocketImpl(socket, null)-->Line_27 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_8 $$ Socket socket = socketChannel.socket()-->Line_44 $$ socket.shutdownOutput()[ FD ]
Line_23 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_52 $$ Assert.assertSame(socket, socketBlockingQueue.poll())[ FD ]
Line_15 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_16 $$ SocketImpl socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_15 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_23 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())[ FD ]
Line_37 $$ socket = socketChannel.socket()-->Line_47 $$ closePeers(socket, serverSocket)[ FD ]
Line_23 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_47 $$ closePeers(socket, serverSocket)[ FD ]
Line_37 $$ socket = socketChannel.socket()-->Line_49 $$ socket = socketChannel.socket()[ FD ]
Line_49 $$ socket = socketChannel.socket()-->Line_50 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_42 $$ socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_49 $$ socket = socketChannel.socket()[ FD ]
Line_6 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(new SPIConfiguration(null, null, serverSocket.getLocalPort(), _spiConfiguration.getBaseDir(), null, null, null), new MockRegistrationReference(new MockIntraband()))-->Line_45 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_10 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_40 $$ Assert.assertTrue(socketBlockingQueue.isEmpty())[ FD ]
Line_37 $$ socket = socketChannel.socket()-->Line_44 $$ socket.shutdownOutput()[ FD ]
Line_15 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_17 $$ httpClientSPIAgent.returnSocket(socket, true)[ FD ]
Line_10 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_52 $$ Assert.assertSame(socket, socketBlockingQueue.poll())[ FD ]
Line_5 $$ try (ServerSocket serverSocket = serverSocketChannel.socket()) -->Line_12 $$ closePeers(socket, serverSocket)[ FD ]
Line_36 $$ socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_43 $$ socket = socketChannel.socket()[ FD ]
Line_15 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_52 $$ Assert.assertSame(socket, socketBlockingQueue.poll())[ FD ]
Line_15 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_49 $$ socket = socketChannel.socket()[ FD ]
Line_14 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_29 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_43 $$ socket = socketChannel.socket()-->Line_44 $$ socket.shutdownOutput()[ FD ]
Line_49 $$ socket = socketChannel.socket()-->Line_53 $$ closePeers(socket, serverSocket)[ FD ]
Line_6 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(new SPIConfiguration(null, null, serverSocket.getLocalPort(), _spiConfiguration.getBaseDir(), null, null, null), new MockRegistrationReference(new MockIntraband()))-->Line_39 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_2 $$ public void testReturnSocket() throws Exception -->Line_4 $$ serverSocketChannel.configureBlocking(true)[ CD ]
Line_8 $$ Socket socket = socketChannel.socket()-->Line_19 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_23 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_27 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_36 $$ socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_42 $$ socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)[ FD ]
Line_49 $$ socket = socketChannel.socket()-->Line_52 $$ Assert.assertSame(socket, socketBlockingQueue.poll())[ FD ]
Line_23 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_44 $$ socket.shutdownOutput()[ FD ]
Line_15 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_45 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_5 $$ try (ServerSocket serverSocket = serverSocketChannel.socket()) -->Line_53 $$ closePeers(socket, serverSocket)[ FD ]
Line_8 $$ Socket socket = socketChannel.socket()-->Line_39 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_7 $$ SocketChannel socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_48 $$ socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)[ FD ]
Line_8 $$ Socket socket = socketChannel.socket()-->Line_41 $$ closePeers(socket, serverSocket)[ FD ]
Line_37 $$ socket = socketChannel.socket()-->Line_39 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_37 $$ socket = socketChannel.socket()-->Line_52 $$ Assert.assertSame(socket, socketBlockingQueue.poll())[ FD ]
Line_23 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_41 $$ closePeers(socket, serverSocket)[ FD ]
Line_8 $$ Socket socket = socketChannel.socket()-->Line_43 $$ socket = socketChannel.socket()[ FD ]
Line_15 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_53 $$ closePeers(socket, serverSocket)[ FD ]
Line_14 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_30 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_13 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(HttpClientSPIAgent.class.getName(), Level.OFF)) -->Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_43 $$ socket = socketChannel.socket()-->Line_45 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_16 $$ SocketImpl socketImpl = swapSocketImpl(socket, null)-->Line_24 $$ socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_23 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_43 $$ socket = socketChannel.socket()[ FD ]
Line_6 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(new SPIConfiguration(null, null, serverSocket.getLocalPort(), _spiConfiguration.getBaseDir(), null, null, null), new MockRegistrationReference(new MockIntraband()))-->Line_17 $$ httpClientSPIAgent.returnSocket(socket, true)[ FD ]
Line_43 $$ socket = socketChannel.socket()-->Line_52 $$ Assert.assertSame(socket, socketBlockingQueue.poll())[ FD ]
Line_23 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_28 $$ closePeers(socket, serverSocket)[ FD ]
Line_5 $$ try (ServerSocket serverSocket = serverSocketChannel.socket()) -->Line_47 $$ closePeers(socket, serverSocket)[ FD ]
Line_36 $$ socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_49 $$ socket = socketChannel.socket()[ FD ]
Line_6 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(new SPIConfiguration(null, null, serverSocket.getLocalPort(), _spiConfiguration.getBaseDir(), null, null, null), new MockRegistrationReference(new MockIntraband()))-->Line_34 $$ httpClientSPIAgent.returnSocket(new Socket(), false)[ FD ]
Line_13 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(HttpClientSPIAgent.class.getName(), Level.OFF)) -->Line_14 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_31 $$ Throwable throwable = logRecord.getThrown()-->Line_32 $$ Assert.assertSame(IOException.class, throwable.getClass())[ FD ]
Line_8 $$ Socket socket = socketChannel.socket()-->Line_12 $$ closePeers(socket, serverSocket)[ FD ]
Line_8 $$ Socket socket = socketChannel.socket()-->Line_37 $$ socket = socketChannel.socket()[ FD ]
Line_15 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_37 $$ socket = socketChannel.socket()[ FD ]
Line_23 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_24 $$ socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_15 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_27 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_37 $$ socket = socketChannel.socket()-->Line_41 $$ closePeers(socket, serverSocket)[ FD ]
Line_8 $$ Socket socket = socketChannel.socket()-->Line_25 $$ httpClientSPIAgent.returnSocket(socket, true)[ FD ]
Line_8 $$ Socket socket = socketChannel.socket()-->Line_47 $$ closePeers(socket, serverSocket)[ FD ]
Line_15 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_43 $$ socket = socketChannel.socket()[ FD ]
Line_43 $$ socket = socketChannel.socket()-->Line_53 $$ closePeers(socket, serverSocket)[ FD ]
Line_8 $$ Socket socket = socketChannel.socket()-->Line_9 $$ httpClientSPIAgent.returnSocket(socket, true)[ FD ]
Line_23 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_50 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_23 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_49 $$ socket = socketChannel.socket()[ FD ]
Line_42 $$ socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_48 $$ socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)[ FD ]
Line_8 $$ Socket socket = socketChannel.socket()-->Line_17 $$ httpClientSPIAgent.returnSocket(socket, true)[ FD ]
Line_42 $$ socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_43 $$ socket = socketChannel.socket()[ FD ]
Line_8 $$ Socket socket = socketChannel.socket()-->Line_20 $$ closePeers(socket, serverSocket)[ FD ]
Line_30 $$ LogRecord logRecord = logRecords.get(0)-->Line_31 $$ Throwable throwable = logRecord.getThrown()[ FD ]
Line_8 $$ Socket socket = socketChannel.socket()-->Line_24 $$ socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_7 $$ SocketChannel socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_8 $$ Socket socket = socketChannel.socket()[ FD ]
Line_6 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(new SPIConfiguration(null, null, serverSocket.getLocalPort(), _spiConfiguration.getBaseDir(), null, null, null), new MockRegistrationReference(new MockIntraband()))-->Line_50 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_43 $$ socket = socketChannel.socket()-->Line_47 $$ closePeers(socket, serverSocket)[ FD ]
Line_5 $$ try (ServerSocket serverSocket = serverSocketChannel.socket()) -->Line_6 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(new SPIConfiguration(null, null, serverSocket.getLocalPort(), _spiConfiguration.getBaseDir(), null, null, null), new MockRegistrationReference(new MockIntraband()))[ FD ]
Line_8 $$ Socket socket = socketChannel.socket()-->Line_27 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_10 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_26 $$ Assert.assertTrue(socketBlockingQueue.isEmpty())[ FD ]
Line_10 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_46 $$ Assert.assertTrue(socketBlockingQueue.isEmpty())[ FD ]
Line_8 $$ Socket socket = socketChannel.socket()-->Line_53 $$ closePeers(socket, serverSocket)[ FD ]
Line_5 $$ try (ServerSocket serverSocket = serverSocketChannel.socket()) -->Line_20 $$ closePeers(socket, serverSocket)[ FD ]
Line_15 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_25 $$ httpClientSPIAgent.returnSocket(socket, true)[ FD ]
Line_7 $$ SocketChannel socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_42 $$ socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)[ FD ]
Line_23 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_25 $$ httpClientSPIAgent.returnSocket(socket, true)[ FD ]
Line_10 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_11 $$ Assert.assertTrue(socketBlockingQueue.isEmpty())[ FD ]
Line_8 $$ Socket socket = socketChannel.socket()-->Line_52 $$ Assert.assertSame(socket, socketBlockingQueue.poll())[ FD ]
Line_8 $$ Socket socket = socketChannel.socket()-->Line_16 $$ SocketImpl socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_14 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_15 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_19 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_15 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_20 $$ closePeers(socket, serverSocket)[ FD ]
Line_2 $$ public void testReturnSocket() throws Exception -->Line_3 $$ ServerSocketChannel serverSocketChannel = SocketUtil.createServerSocketChannel(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort(), null)[ CD ]
Line_10 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_18 $$ Assert.assertTrue(socketBlockingQueue.isEmpty())[ FD ]
Line_48 $$ socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_49 $$ socket = socketChannel.socket()[ FD ]
Line_5 $$ try (ServerSocket serverSocket = serverSocketChannel.socket()) -->Line_28 $$ closePeers(socket, serverSocket)[ FD ]
Line_15 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_39 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_24 $$ socketImpl = swapSocketImpl(socket, null)-->Line_27 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_15 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_47 $$ closePeers(socket, serverSocket)[ FD ]
Line_15 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_50 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_7 $$ SocketChannel socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_49 $$ socket = socketChannel.socket()[ FD ]
Line_16 $$ SocketImpl socketImpl = swapSocketImpl(socket, null)-->Line_19 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_37 $$ socket = socketChannel.socket()-->Line_50 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_23 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_39 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_29 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_10 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_35 $$ Assert.assertTrue(socketBlockingQueue.isEmpty())[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_30 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_36 $$ socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_37 $$ socket = socketChannel.socket()[ FD ]
Line_15 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_44 $$ socket.shutdownOutput()[ FD ]
Line_15 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_41 $$ closePeers(socket, serverSocket)[ FD ]
Line_37 $$ socket = socketChannel.socket()-->Line_45 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_36 $$ socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_48 $$ socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)[ FD ]
Line_43 $$ socket = socketChannel.socket()-->Line_50 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_14 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_21 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_37 $$ socket = socketChannel.socket()-->Line_53 $$ closePeers(socket, serverSocket)[ FD ]
Line_6 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(new SPIConfiguration(null, null, serverSocket.getLocalPort(), _spiConfiguration.getBaseDir(), null, null, null), new MockRegistrationReference(new MockIntraband()))-->Line_25 $$ httpClientSPIAgent.returnSocket(socket, true)[ FD ]
Line_43 $$ socket = socketChannel.socket()-->Line_49 $$ socket = socketChannel.socket()[ FD ]
Line_15 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_28 $$ closePeers(socket, serverSocket)[ FD ]
Line_15 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_24 $$ socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_3 $$ ServerSocketChannel serverSocketChannel = SocketUtil.createServerSocketChannel(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort(), null)-->Line_4 $$ serverSocketChannel.configureBlocking(true)[ FD ]
Line_8 $$ Socket socket = socketChannel.socket()-->Line_28 $$ closePeers(socket, serverSocket)[ FD ]
Line_23 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_37 $$ socket = socketChannel.socket()[ FD ]
Line_8 $$ Socket socket = socketChannel.socket()-->Line_38 $$ socket.shutdownInput()[ FD ]
Line_8 $$ Socket socket = socketChannel.socket()-->Line_45 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_15 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_38 $$ socket.shutdownInput()[ FD ]
Line_10 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_51 $$ Assert.assertEquals(1, socketBlockingQueue.size())[ FD ]
Line_7 $$ SocketChannel socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_43 $$ socket = socketChannel.socket()[ FD ]
Line_8 $$ Socket socket = socketChannel.socket()-->Line_23 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())[ FD ]
Line_7 $$ SocketChannel socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_36 $$ socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)[ FD ]
