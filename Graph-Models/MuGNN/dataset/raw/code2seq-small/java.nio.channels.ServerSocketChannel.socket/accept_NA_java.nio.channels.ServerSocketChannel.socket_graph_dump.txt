Line_2 $$ public ConnectionAcceptor accept(Action<ConnectCompletion> action, boolean allowRemote) -->Line_13 $$ List<InetAddress> addresses = allowRemote ? addressFactory.findRemoteAddresses() : addressFactory.findLocalAddresses()[ CD ]
Line_2 $$ public ConnectionAcceptor accept(Action<ConnectCompletion> action, boolean allowRemote) -->Line_14 $$ final Address address = new MultiChoiceAddress(id, localPort, addresses)[ CD ]
Line_18 $$ return new ConnectionAcceptor() -->Line_26 $$ requestStop()[ CD ]
Line_4 $$ int localPort-->Line_16 $$ final StoppableExecutor executor = executorFactory.create(String.format("Incoming %s TCP Connector on port %s", allowRemote ? "remote" : "local", localPort))[ FD ]
Line_18 $$ return new ConnectionAcceptor() -->Line_27 $$ executor.stop()[ CD ]
Line_2 $$ public ConnectionAcceptor accept(Action<ConnectCompletion> action, boolean allowRemote) -->Line_12 $$ Object id = idGenerator.generateId()[ CD ]
Line_2 $$ public ConnectionAcceptor accept(Action<ConnectCompletion> action, boolean allowRemote) -->Line_15 $$ LOGGER.debug("Listening on [ CD ]
Line_2 $$ public ConnectionAcceptor accept(Action<ConnectCompletion> action, boolean allowRemote) -->Line_3 $$ final ServerSocketChannel serverSocket[ CD ]
Line_2 $$ public ConnectionAcceptor accept(Action<ConnectCompletion> action, boolean allowRemote) -->Line_16 $$ final StoppableExecutor executor = executorFactory.create(String.format("Incoming %s TCP Connector on port %s", allowRemote ? "remote" : "local", localPort))[ CD ]
Line_16 $$ final StoppableExecutor executor = executorFactory.create(String.format("Incoming %s TCP Connector on port %s", allowRemote ? "remote" : "local", localPort))-->Line_17 $$ executor.execute(new Receiver(serverSocket, action, allowRemote))[ FD ]
Line_18 $$ return new ConnectionAcceptor() -->Line_23 $$ CompositeStoppable.stoppable(serverSocket).stop()[ CD ]
Line_16 $$ final StoppableExecutor executor = executorFactory.create(String.format("Incoming %s TCP Connector on port %s", allowRemote ? "remote" : "local", localPort))-->Line_27 $$ executor.stop()[ FD ]
Line_2 $$ public ConnectionAcceptor accept(Action<ConnectCompletion> action, boolean allowRemote) -->Line_18 $$ return new ConnectionAcceptor() [ CD ]
Line_8 $$ localPort = serverSocket.socket().getLocalPort()-->Line_16 $$ final StoppableExecutor executor = executorFactory.create(String.format("Incoming %s TCP Connector on port %s", allowRemote ? "remote" : "local", localPort))[ FD ]
Line_14 $$ final Address address = new MultiChoiceAddress(id, localPort, addresses)-->Line_15 $$ LOGGER.debug("Listening on [ FD ]
Line_3 $$ final ServerSocketChannel serverSocket-->Line_23 $$ CompositeStoppable.stoppable(serverSocket).stop()[ FD ]
Line_2 $$ public ConnectionAcceptor accept(Action<ConnectCompletion> action, boolean allowRemote) -->Line_17 $$ executor.execute(new Receiver(serverSocket, action, allowRemote))[ CD ]
Line_2 $$ public ConnectionAcceptor accept(Action<ConnectCompletion> action, boolean allowRemote) -->Line_4 $$ int localPort[ CD ]
Line_3 $$ final ServerSocketChannel serverSocket-->Line_6 $$ serverSocket = ServerSocketChannel.open()[ FD ]
Line_6 $$ serverSocket = ServerSocketChannel.open()-->Line_8 $$ localPort = serverSocket.socket().getLocalPort()[ FD ]
Line_3 $$ final ServerSocketChannel serverSocket-->Line_7 $$ serverSocket.socket().bind(new InetSocketAddress(addressFactory.findLocalBindingAddress(), 0))[ FD ]
Line_6 $$ serverSocket = ServerSocketChannel.open()-->Line_23 $$ CompositeStoppable.stoppable(serverSocket).stop()[ FD ]
Line_6 $$ serverSocket = ServerSocketChannel.open()-->Line_7 $$ serverSocket.socket().bind(new InetSocketAddress(addressFactory.findLocalBindingAddress(), 0))[ FD ]
Line_4 $$ int localPort-->Line_8 $$ localPort = serverSocket.socket().getLocalPort()[ FD ]
Line_3 $$ final ServerSocketChannel serverSocket-->Line_8 $$ localPort = serverSocket.socket().getLocalPort()[ FD ]
Line_18 $$ return new ConnectionAcceptor() -->Line_20 $$ return address[ CD ]
