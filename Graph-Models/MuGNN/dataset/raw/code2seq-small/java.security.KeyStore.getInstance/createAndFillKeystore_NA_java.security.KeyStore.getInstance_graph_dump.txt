Line_3 $$ KeyStore ks = KeyStore.getInstance("JCEKS")-->Line_4 $$ ks.load(null, KEYSTORE_PASSWORD.toCharArray())[ FD ]
Line_2 $$ private static void createAndFillKeystore(String fileName) throws Exception -->Line_5 $$ KeyGenerator keyGenerator = KeyGenerator.getInstance("AES")[ CD ]
Line_2 $$ private static void createAndFillKeystore(String fileName) throws Exception -->Line_7 $$ SecretKey secretKey = keyGenerator.generateKey()[ CD ]
Line_3 $$ KeyStore ks = KeyStore.getInstance("JCEKS")-->Line_11 $$ ks.store(new FileOutputStream(fileName), KEYSTORE_PASSWORD.toCharArray())[ FD ]
Line_2 $$ private static void createAndFillKeystore(String fileName) throws Exception -->Line_11 $$ ks.store(new FileOutputStream(fileName), KEYSTORE_PASSWORD.toCharArray())[ CD ]
Line_2 $$ private static void createAndFillKeystore(String fileName) throws Exception -->Line_10 $$ ks.setEntry(KEYSTORE_ALIAS_VALUE, skEntry, p)[ CD ]
Line_8 $$ KeyStore.SecretKeyEntry skEntry = new KeyStore.SecretKeyEntry(secretKey)-->Line_10 $$ ks.setEntry(KEYSTORE_ALIAS_VALUE, skEntry, p)[ FD ]
Line_2 $$ private static void createAndFillKeystore(String fileName) throws Exception -->Line_9 $$ KeyStore.PasswordProtection p = new KeyStore.PasswordProtection(KEYSTORE_PASSWORD.toCharArray())[ CD ]
Line_2 $$ private static void createAndFillKeystore(String fileName) throws Exception -->Line_4 $$ ks.load(null, KEYSTORE_PASSWORD.toCharArray())[ CD ]
Line_5 $$ KeyGenerator keyGenerator = KeyGenerator.getInstance("AES")-->Line_7 $$ SecretKey secretKey = keyGenerator.generateKey()[ FD ]
Line_5 $$ KeyGenerator keyGenerator = KeyGenerator.getInstance("AES")-->Line_6 $$ keyGenerator.init(128)[ FD ]
Line_2 $$ private static void createAndFillKeystore(String fileName) throws Exception -->Line_3 $$ KeyStore ks = KeyStore.getInstance("JCEKS")[ CD ]
Line_9 $$ KeyStore.PasswordProtection p = new KeyStore.PasswordProtection(KEYSTORE_PASSWORD.toCharArray())-->Line_10 $$ ks.setEntry(KEYSTORE_ALIAS_VALUE, skEntry, p)[ FD ]
Line_2 $$ private static void createAndFillKeystore(String fileName) throws Exception -->Line_6 $$ keyGenerator.init(128)[ CD ]
Line_2 $$ private static void createAndFillKeystore(String fileName) throws Exception -->Line_8 $$ KeyStore.SecretKeyEntry skEntry = new KeyStore.SecretKeyEntry(secretKey)[ CD ]
Line_3 $$ KeyStore ks = KeyStore.getInstance("JCEKS")-->Line_10 $$ ks.setEntry(KEYSTORE_ALIAS_VALUE, skEntry, p)[ FD ]
