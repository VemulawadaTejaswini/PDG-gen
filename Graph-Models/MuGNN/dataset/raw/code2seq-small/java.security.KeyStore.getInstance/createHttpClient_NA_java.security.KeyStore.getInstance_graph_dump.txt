Line_10 $$ Path path = PathUtils.get(keystorePath)-->Line_11 $$ if (!Files.exists(path)) [ FD ]
Line_5 $$ if (keystorePath != null) -->Line_25 $$ sslsf = SSLConnectionSocketFactory.getSocketFactory()[ CD ]
Line_5 $$ if (keystorePath != null) -->Line_11 $$ if (!Files.exists(path)) [ CD ]
Line_4 $$ String keystorePath = settings.get(TRUSTSTORE_PATH)-->Line_5 $$ if (keystorePath != null) [ FD ]
Line_5 $$ if (keystorePath != null) -->Line_7 $$ if (keystorePass == null) [ CD ]
Line_20 $$ sslsf = new SSLConnectionSocketFactory(sslcontext)-->Line_25 $$ sslsf = SSLConnectionSocketFactory.getSocketFactory()[ FD ]
Line_4 $$ String keystorePath = settings.get(TRUSTSTORE_PATH)-->Line_10 $$ Path path = PathUtils.get(keystorePath)[ FD ]
Line_3 $$ SSLConnectionSocketFactory sslsf-->Line_25 $$ sslsf = SSLConnectionSocketFactory.getSocketFactory()[ FD ]
Line_2 $$ protected CloseableHttpClient createHttpClient(Settings settings) throws IOException -->Line_27 $$ Registry<ConnectionSocketFactory> socketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory>create().register("http", PlainConnectionSocketFactory.getSocketFactory()).register("https", sslsf).build()[ CD ]
Line_16 $$ try (InputStream is = Files.newInputStream(path)) -->Line_17 $$ keyStore.load(is, keystorePass.toCharArray())[ FD ]
Line_25 $$ sslsf = SSLConnectionSocketFactory.getSocketFactory()-->Line_27 $$ Registry<ConnectionSocketFactory> socketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory>create().register("http", PlainConnectionSocketFactory.getSocketFactory()).register("https", sslsf).build()[ FD ]
Line_2 $$ protected CloseableHttpClient createHttpClient(Settings settings) throws IOException -->Line_4 $$ String keystorePath = settings.get(TRUSTSTORE_PATH)[ CD ]
Line_3 $$ SSLConnectionSocketFactory sslsf-->Line_20 $$ sslsf = new SSLConnectionSocketFactory(sslcontext)[ FD ]
Line_15 $$ KeyStore keyStore = KeyStore.getInstance("jks")-->Line_17 $$ keyStore.load(is, keystorePass.toCharArray())[ FD ]
Line_3 $$ SSLConnectionSocketFactory sslsf-->Line_27 $$ Registry<ConnectionSocketFactory> socketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory>create().register("http", PlainConnectionSocketFactory.getSocketFactory()).register("https", sslsf).build()[ FD ]
Line_10 $$ Path path = PathUtils.get(keystorePath)-->Line_16 $$ try (InputStream is = Files.newInputStream(path)) [ FD ]
Line_15 $$ KeyStore keyStore = KeyStore.getInstance("jks")-->Line_19 $$ SSLContext sslcontext = SSLContexts.custom().loadTrustMaterial(keyStore, null).build()[ FD ]
Line_2 $$ protected CloseableHttpClient createHttpClient(Settings settings) throws IOException -->Line_3 $$ SSLConnectionSocketFactory sslsf[ CD ]
Line_5 $$ if (keystorePath != null) -->Line_6 $$ final String keystorePass = settings.get(TRUSTSTORE_PASSWORD)[ CD ]
Line_2 $$ protected CloseableHttpClient createHttpClient(Settings settings) throws IOException -->Line_6 $$ final String keystorePass = settings.get(TRUSTSTORE_PASSWORD)[ FD ]
Line_20 $$ sslsf = new SSLConnectionSocketFactory(sslcontext)-->Line_27 $$ Registry<ConnectionSocketFactory> socketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory>create().register("http", PlainConnectionSocketFactory.getSocketFactory()).register("https", sslsf).build()[ FD ]
Line_5 $$ if (keystorePath != null) -->Line_10 $$ Path path = PathUtils.get(keystorePath)[ CD ]
Line_6 $$ final String keystorePass = settings.get(TRUSTSTORE_PASSWORD)-->Line_17 $$ keyStore.load(is, keystorePass.toCharArray())[ FD ]
Line_6 $$ final String keystorePass = settings.get(TRUSTSTORE_PASSWORD)-->Line_7 $$ if (keystorePass == null) [ FD ]
Line_2 $$ protected CloseableHttpClient createHttpClient(Settings settings) throws IOException -->Line_28 $$ return HttpClients.createMinimal(new PoolingHttpClientConnectionManager(socketFactoryRegistry, null, null, null, 15, TimeUnit.SECONDS))[ CD ]
Line_2 $$ protected CloseableHttpClient createHttpClient(Settings settings) throws IOException -->Line_5 $$ if (keystorePath != null) [ CD ]
Line_2 $$ protected CloseableHttpClient createHttpClient(Settings settings) throws IOException -->Line_4 $$ String keystorePath = settings.get(TRUSTSTORE_PATH)[ FD ]
