Line_17 $$ File trustStoreFile-->Line_42 $$ trustStoreFile = file[ FD ]
Line_25 $$ trustStore = KeyStore.getInstance(trustStoreType, trustStoreProvider)-->Line_36 $$ tmFactory.init(trustStore)[ FD ]
Line_78 $$ KeyStore keyStore-->Line_80 $$ keyStore = KeyStore.getInstance(keyStoreType, keyStoreProvider)[ FD ]
Line_75 $$ if (keyStoreFile != null) -->Line_76 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)[ CD ]
Line_25 $$ trustStore = KeyStore.getInstance(trustStoreType, trustStoreProvider)-->Line_27 $$ trustStore = KeyStore.getInstance(trustStoreType)[ FD ]
Line_19 $$ if (s != null) -->Line_48 $$ String trustStorePassword = System.getProperty("javax.net.ssl.trustStorePassword")[ CD ]
Line_6 $$ String trustAlgorithm = System.getProperty("ssl.TrustManagerFactory.algorithm")-->Line_8 $$ trustAlgorithm = TrustManagerFactory.getDefaultAlgorithm()[ FD ]
Line_42 $$ trustStoreFile = file-->Line_44 $$ trustStoreFile = file[ FD ]
Line_15 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)-->Line_21 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)[ FD ]
Line_59 $$ String keyAlgorithm = System.getProperty("ssl.KeyManagerFactory.algorithm")-->Line_60 $$ if (keyAlgorithm == null) [ FD ]
Line_27 $$ trustStore = KeyStore.getInstance(trustStoreType)-->Line_32 $$ trustStore.load(instream, trustStorePassword != null ? trustStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_5 $$ TrustManagerFactory tmFactory-->Line_21 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)[ FD ]
Line_30 $$ FileInputStream instream = new FileInputStream(trustStoreFile)-->Line_32 $$ trustStore.load(instream, trustStorePassword != null ? trustStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_18 $$ String s = System.getProperty("javax.net.ssl.trustStore")-->Line_72 $$ if (s != null) [ FD ]
Line_68 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)-->Line_91 $$ kmFactory.init(keyStore, keyStorePassword != null ? keyStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_80 $$ keyStore = KeyStore.getInstance(keyStoreType, keyStoreProvider)-->Line_87 $$ keyStore.load(instream, keyStorePassword != null ? keyStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_30 $$ FileInputStream instream = new FileInputStream(trustStoreFile)-->Line_34 $$ instream.close()[ FD ]
Line_67 $$ if ("none".equalsIgnoreCase(keyStoreType)) -->Line_70 $$ File keyStoreFile = null[ CD ]
Line_65 $$ keyStoreType = KeyStore.getDefaultType()-->Line_82 $$ keyStore = KeyStore.getInstance(keyStoreType)[ FD ]
Line_10 $$ String trustStoreType = System.getProperty("javax.net.ssl.trustStoreType")-->Line_11 $$ if (trustStoreType == null) [ FD ]
Line_22 $$ String trustStoreProvider = System.getProperty("javax.net.ssl.trustStoreProvider")-->Line_24 $$ if (trustStoreProvider != null) [ FD ]
Line_82 $$ keyStore = KeyStore.getInstance(keyStoreType)-->Line_87 $$ keyStore.load(instream, keyStorePassword != null ? keyStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_21 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)-->Line_46 $$ tmFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm())[ FD ]
Line_19 $$ if (s != null) -->Line_39 $$ File file = new File(javaHome, "lib/security/jssecacerts")[ CD ]
Line_7 $$ if (trustAlgorithm == null) -->Line_8 $$ trustAlgorithm = TrustManagerFactory.getDefaultAlgorithm()[ CD ]
Line_39 $$ File file = new File(javaHome, "lib/security/jssecacerts")-->Line_40 $$ if (!file.exists()) [ FD ]
Line_19 $$ if (s != null) -->Line_55 $$ tmFactory.init(trustStore)[ CD ]
Line_39 $$ File file = new File(javaHome, "lib/security/jssecacerts")-->Line_42 $$ trustStoreFile = file[ FD ]
Line_59 $$ String keyAlgorithm = System.getProperty("ssl.KeyManagerFactory.algorithm")-->Line_61 $$ keyAlgorithm = KeyManagerFactory.getDefaultAlgorithm()[ FD ]
Line_19 $$ if (s != null) -->Line_21 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)[ CD ]
Line_73 $$ keyStoreFile = new File(s)-->Line_75 $$ if (keyStoreFile != null) [ FD ]
Line_61 $$ keyAlgorithm = KeyManagerFactory.getDefaultAlgorithm()-->Line_68 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)[ FD ]
Line_21 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)-->Line_95 $$ sslcontext.init(kmFactory != null ? kmFactory.getKeyManagers() : null, tmFactory != null ? tmFactory.getTrustManagers() : null, null)[ FD ]
Line_30 $$ FileInputStream instream = new FileInputStream(trustStoreFile)-->Line_51 $$ trustStore.load(instream, trustStorePassword != null ? trustStorePassword.toCharArray() : null)[ FD ]
Line_11 $$ if (trustStoreType == null) -->Line_12 $$ trustStoreType = KeyStore.getDefaultType()[ CD ]
Line_67 $$ if ("none".equalsIgnoreCase(keyStoreType)) -->Line_68 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)[ CD ]
Line_79 $$ if (keyStoreProvider != null) -->Line_82 $$ keyStore = KeyStore.getInstance(keyStoreType)[ CD ]
Line_82 $$ keyStore = KeyStore.getInstance(keyStoreType)-->Line_91 $$ kmFactory.init(keyStore, keyStorePassword != null ? keyStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_6 $$ String trustAlgorithm = System.getProperty("ssl.TrustManagerFactory.algorithm")-->Line_15 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)[ FD ]
Line_60 $$ if (keyAlgorithm == null) -->Line_61 $$ keyAlgorithm = KeyManagerFactory.getDefaultAlgorithm()[ CD ]
Line_15 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)-->Line_55 $$ tmFactory.init(trustStore)[ FD ]
Line_18 $$ String s = System.getProperty("javax.net.ssl.trustStore")-->Line_19 $$ if (s != null) [ FD ]
Line_6 $$ String trustAlgorithm = System.getProperty("ssl.TrustManagerFactory.algorithm")-->Line_7 $$ if (trustAlgorithm == null) [ FD ]
Line_15 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)-->Line_46 $$ tmFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm())[ FD ]
Line_10 $$ String trustStoreType = System.getProperty("javax.net.ssl.trustStoreType")-->Line_25 $$ trustStore = KeyStore.getInstance(trustStoreType, trustStoreProvider)[ FD ]
Line_24 $$ if (trustStoreProvider != null) -->Line_25 $$ trustStore = KeyStore.getInstance(trustStoreType, trustStoreProvider)[ CD ]
Line_10 $$ String trustStoreType = System.getProperty("javax.net.ssl.trustStoreType")-->Line_14 $$ if ("none".equalsIgnoreCase(trustStoreType)) [ FD ]
Line_65 $$ keyStoreType = KeyStore.getDefaultType()-->Line_67 $$ if ("none".equalsIgnoreCase(keyStoreType)) [ FD ]
Line_75 $$ if (keyStoreFile != null) -->Line_91 $$ kmFactory.init(keyStore, keyStorePassword != null ? keyStorePassword.toCharArray() : EMPTY_PASSWORD)[ CD ]
Line_14 $$ if ("none".equalsIgnoreCase(trustStoreType)) -->Line_19 $$ if (s != null) [ CD ]
Line_17 $$ File trustStoreFile-->Line_20 $$ trustStoreFile = new File(s)[ FD ]
Line_68 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)-->Line_76 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)[ FD ]
Line_12 $$ trustStoreType = KeyStore.getDefaultType()-->Line_27 $$ trustStore = KeyStore.getInstance(trustStoreType)[ FD ]
Line_5 $$ TrustManagerFactory tmFactory-->Line_46 $$ tmFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm())[ FD ]
Line_63 $$ String keyStoreType = System.getProperty("javax.net.ssl.keyStoreType")-->Line_67 $$ if ("none".equalsIgnoreCase(keyStoreType)) [ FD ]
Line_68 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)-->Line_95 $$ sslcontext.init(kmFactory != null ? kmFactory.getKeyManagers() : null, tmFactory != null ? tmFactory.getTrustManagers() : null, null)[ FD ]
Line_94 $$ SSLContext sslcontext = SSLContext.getInstance("TLS")-->Line_95 $$ sslcontext.init(kmFactory != null ? kmFactory.getKeyManagers() : null, tmFactory != null ? tmFactory.getTrustManagers() : null, null)[ FD ]
Line_70 $$ File keyStoreFile = null-->Line_75 $$ if (keyStoreFile != null) [ FD ]
Line_59 $$ String keyAlgorithm = System.getProperty("ssl.KeyManagerFactory.algorithm")-->Line_76 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)[ FD ]
Line_67 $$ if ("none".equalsIgnoreCase(keyStoreType)) -->Line_75 $$ if (keyStoreFile != null) [ CD ]
Line_84 $$ String keyStorePassword = System.getProperty("javax.net.ssl.keyStorePassword")-->Line_87 $$ keyStore.load(instream, keyStorePassword != null ? keyStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_27 $$ trustStore = KeyStore.getInstance(trustStoreType)-->Line_55 $$ tmFactory.init(trustStore)[ FD ]
Line_61 $$ keyAlgorithm = KeyManagerFactory.getDefaultAlgorithm()-->Line_76 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)[ FD ]
Line_40 $$ if (!file.exists()) -->Line_44 $$ trustStoreFile = file[ CD ]
Line_78 $$ KeyStore keyStore-->Line_91 $$ kmFactory.init(keyStore, keyStorePassword != null ? keyStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_63 $$ String keyStoreType = System.getProperty("javax.net.ssl.keyStoreType")-->Line_82 $$ keyStore = KeyStore.getInstance(keyStoreType)[ FD ]
Line_14 $$ if ("none".equalsIgnoreCase(trustStoreType)) -->Line_17 $$ File trustStoreFile[ CD ]
Line_75 $$ if (keyStoreFile != null) -->Line_77 $$ String keyStoreProvider = System.getProperty("javax.net.ssl.keyStoreProvider")[ CD ]
Line_19 $$ if (s != null) -->Line_24 $$ if (trustStoreProvider != null) [ CD ]
Line_5 $$ TrustManagerFactory tmFactory-->Line_95 $$ sslcontext.init(kmFactory != null ? kmFactory.getKeyManagers() : null, tmFactory != null ? tmFactory.getTrustManagers() : null, null)[ FD ]
Line_19 $$ if (s != null) -->Line_30 $$ FileInputStream instream = new FileInputStream(trustStoreFile)[ CD ]
Line_22 $$ String trustStoreProvider = System.getProperty("javax.net.ssl.trustStoreProvider")-->Line_25 $$ trustStore = KeyStore.getInstance(trustStoreType, trustStoreProvider)[ FD ]
Line_78 $$ KeyStore keyStore-->Line_82 $$ keyStore = KeyStore.getInstance(keyStoreType)[ FD ]
Line_46 $$ tmFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm())-->Line_95 $$ sslcontext.init(kmFactory != null ? kmFactory.getKeyManagers() : null, tmFactory != null ? tmFactory.getTrustManagers() : null, null)[ FD ]
Line_30 $$ FileInputStream instream = new FileInputStream(trustStoreFile)-->Line_53 $$ instream.close()[ FD ]
Line_24 $$ if (trustStoreProvider != null) -->Line_27 $$ trustStore = KeyStore.getInstance(trustStoreType)[ CD ]
Line_8 $$ trustAlgorithm = TrustManagerFactory.getDefaultAlgorithm()-->Line_21 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)[ FD ]
Line_12 $$ trustStoreType = KeyStore.getDefaultType()-->Line_14 $$ if ("none".equalsIgnoreCase(trustStoreType)) [ FD ]
Line_20 $$ trustStoreFile = new File(s)-->Line_42 $$ trustStoreFile = file[ FD ]
Line_19 $$ if (s != null) -->Line_22 $$ String trustStoreProvider = System.getProperty("javax.net.ssl.trustStoreProvider")[ CD ]
Line_63 $$ String keyStoreType = System.getProperty("javax.net.ssl.keyStoreType")-->Line_80 $$ keyStore = KeyStore.getInstance(keyStoreType, keyStoreProvider)[ FD ]
Line_39 $$ File file = new File(javaHome, "lib/security/jssecacerts")-->Line_41 $$ file = new File(javaHome, "lib/security/cacerts")[ FD ]
Line_10 $$ String trustStoreType = System.getProperty("javax.net.ssl.trustStoreType")-->Line_27 $$ trustStore = KeyStore.getInstance(trustStoreType)[ FD ]
Line_19 $$ if (s != null) -->Line_29 $$ String trustStorePassword = System.getProperty("javax.net.ssl.trustStorePassword")[ CD ]
Line_23 $$ KeyStore trustStore-->Line_51 $$ trustStore.load(instream, trustStorePassword != null ? trustStorePassword.toCharArray() : null)[ FD ]
Line_29 $$ String trustStorePassword = System.getProperty("javax.net.ssl.trustStorePassword")-->Line_32 $$ trustStore.load(instream, trustStorePassword != null ? trustStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_30 $$ FileInputStream instream = new FileInputStream(trustStoreFile)-->Line_87 $$ keyStore.load(instream, keyStorePassword != null ? keyStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_29 $$ String trustStorePassword = System.getProperty("javax.net.ssl.trustStorePassword")-->Line_51 $$ trustStore.load(instream, trustStorePassword != null ? trustStorePassword.toCharArray() : null)[ FD ]
Line_63 $$ String keyStoreType = System.getProperty("javax.net.ssl.keyStoreType")-->Line_65 $$ keyStoreType = KeyStore.getDefaultType()[ FD ]
Line_67 $$ if ("none".equalsIgnoreCase(keyStoreType)) -->Line_72 $$ if (s != null) [ CD ]
Line_5 $$ TrustManagerFactory tmFactory-->Line_36 $$ tmFactory.init(trustStore)[ FD ]
Line_25 $$ trustStore = KeyStore.getInstance(trustStoreType, trustStoreProvider)-->Line_32 $$ trustStore.load(instream, trustStorePassword != null ? trustStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_41 $$ file = new File(javaHome, "lib/security/cacerts")-->Line_44 $$ trustStoreFile = file[ FD ]
Line_23 $$ KeyStore trustStore-->Line_27 $$ trustStore = KeyStore.getInstance(trustStoreType)[ FD ]
Line_58 $$ KeyManagerFactory kmFactory = null-->Line_95 $$ sslcontext.init(kmFactory != null ? kmFactory.getKeyManagers() : null, tmFactory != null ? tmFactory.getTrustManagers() : null, null)[ FD ]
Line_21 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)-->Line_55 $$ tmFactory.init(trustStore)[ FD ]
Line_80 $$ keyStore = KeyStore.getInstance(keyStoreType, keyStoreProvider)-->Line_91 $$ kmFactory.init(keyStore, keyStorePassword != null ? keyStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_23 $$ KeyStore trustStore-->Line_25 $$ trustStore = KeyStore.getInstance(trustStoreType, trustStoreProvider)[ FD ]
Line_27 $$ trustStore = KeyStore.getInstance(trustStoreType)-->Line_51 $$ trustStore.load(instream, trustStorePassword != null ? trustStorePassword.toCharArray() : null)[ FD ]
Line_77 $$ String keyStoreProvider = System.getProperty("javax.net.ssl.keyStoreProvider")-->Line_80 $$ keyStore = KeyStore.getInstance(keyStoreType, keyStoreProvider)[ FD ]
Line_15 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)-->Line_36 $$ tmFactory.init(trustStore)[ FD ]
Line_75 $$ if (keyStoreFile != null) -->Line_84 $$ String keyStorePassword = System.getProperty("javax.net.ssl.keyStorePassword")[ CD ]
Line_14 $$ if ("none".equalsIgnoreCase(trustStoreType)) -->Line_18 $$ String s = System.getProperty("javax.net.ssl.trustStore")[ CD ]
Line_75 $$ if (keyStoreFile != null) -->Line_79 $$ if (keyStoreProvider != null) [ CD ]
Line_19 $$ if (s != null) -->Line_40 $$ if (!file.exists()) [ CD ]
Line_39 $$ File file = new File(javaHome, "lib/security/jssecacerts")-->Line_44 $$ trustStoreFile = file[ FD ]
Line_80 $$ keyStore = KeyStore.getInstance(keyStoreType, keyStoreProvider)-->Line_82 $$ keyStore = KeyStore.getInstance(keyStoreType)[ FD ]
Line_72 $$ if (s != null) -->Line_73 $$ keyStoreFile = new File(s)[ CD ]
Line_10 $$ String trustStoreType = System.getProperty("javax.net.ssl.trustStoreType")-->Line_12 $$ trustStoreType = KeyStore.getDefaultType()[ FD ]
Line_17 $$ File trustStoreFile-->Line_44 $$ trustStoreFile = file[ FD ]
Line_15 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)-->Line_95 $$ sslcontext.init(kmFactory != null ? kmFactory.getKeyManagers() : null, tmFactory != null ? tmFactory.getTrustManagers() : null, null)[ FD ]
Line_6 $$ String trustAlgorithm = System.getProperty("ssl.TrustManagerFactory.algorithm")-->Line_21 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)[ FD ]
Line_46 $$ tmFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm())-->Line_55 $$ tmFactory.init(trustStore)[ FD ]
Line_19 $$ if (s != null) -->Line_36 $$ tmFactory.init(trustStore)[ CD ]
Line_19 $$ if (s != null) -->Line_23 $$ KeyStore trustStore[ CD ]
Line_40 $$ if (!file.exists()) -->Line_42 $$ trustStoreFile = file[ CD ]
Line_79 $$ if (keyStoreProvider != null) -->Line_80 $$ keyStore = KeyStore.getInstance(keyStoreType, keyStoreProvider)[ CD ]
Line_70 $$ File keyStoreFile = null-->Line_73 $$ keyStoreFile = new File(s)[ FD ]
Line_25 $$ trustStore = KeyStore.getInstance(trustStoreType, trustStoreProvider)-->Line_51 $$ trustStore.load(instream, trustStorePassword != null ? trustStorePassword.toCharArray() : null)[ FD ]
Line_23 $$ KeyStore trustStore-->Line_55 $$ tmFactory.init(trustStore)[ FD ]
Line_77 $$ String keyStoreProvider = System.getProperty("javax.net.ssl.keyStoreProvider")-->Line_79 $$ if (keyStoreProvider != null) [ FD ]
Line_75 $$ if (keyStoreFile != null) -->Line_78 $$ KeyStore keyStore[ CD ]
Line_58 $$ KeyManagerFactory kmFactory = null-->Line_68 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)[ FD ]
Line_12 $$ trustStoreType = KeyStore.getDefaultType()-->Line_25 $$ trustStore = KeyStore.getInstance(trustStoreType, trustStoreProvider)[ FD ]
Line_5 $$ TrustManagerFactory tmFactory-->Line_15 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)[ FD ]
Line_41 $$ file = new File(javaHome, "lib/security/cacerts")-->Line_42 $$ trustStoreFile = file[ FD ]
Line_21 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)-->Line_36 $$ tmFactory.init(trustStore)[ FD ]
Line_20 $$ trustStoreFile = new File(s)-->Line_44 $$ trustStoreFile = file[ FD ]
Line_19 $$ if (s != null) -->Line_47 $$ KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType())[ CD ]
Line_84 $$ String keyStorePassword = System.getProperty("javax.net.ssl.keyStorePassword")-->Line_91 $$ kmFactory.init(keyStore, keyStorePassword != null ? keyStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_23 $$ KeyStore trustStore-->Line_36 $$ tmFactory.init(trustStore)[ FD ]
Line_40 $$ if (!file.exists()) -->Line_41 $$ file = new File(javaHome, "lib/security/cacerts")[ CD ]
Line_19 $$ if (s != null) -->Line_20 $$ trustStoreFile = new File(s)[ CD ]
Line_78 $$ KeyStore keyStore-->Line_87 $$ keyStore.load(instream, keyStorePassword != null ? keyStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_8 $$ trustAlgorithm = TrustManagerFactory.getDefaultAlgorithm()-->Line_15 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)[ FD ]
Line_23 $$ KeyStore trustStore-->Line_32 $$ trustStore.load(instream, trustStorePassword != null ? trustStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_76 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)-->Line_95 $$ sslcontext.init(kmFactory != null ? kmFactory.getKeyManagers() : null, tmFactory != null ? tmFactory.getTrustManagers() : null, null)[ FD ]
Line_65 $$ keyStoreType = KeyStore.getDefaultType()-->Line_80 $$ keyStore = KeyStore.getInstance(keyStoreType, keyStoreProvider)[ FD ]
Line_14 $$ if ("none".equalsIgnoreCase(trustStoreType)) -->Line_15 $$ tmFactory = TrustManagerFactory.getInstance(trustAlgorithm)[ CD ]
Line_27 $$ trustStore = KeyStore.getInstance(trustStoreType)-->Line_36 $$ tmFactory.init(trustStore)[ FD ]
Line_25 $$ trustStore = KeyStore.getInstance(trustStoreType, trustStoreProvider)-->Line_55 $$ tmFactory.init(trustStore)[ FD ]
Line_59 $$ String keyAlgorithm = System.getProperty("ssl.KeyManagerFactory.algorithm")-->Line_68 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)[ FD ]
Line_58 $$ KeyManagerFactory kmFactory = null-->Line_91 $$ kmFactory.init(keyStore, keyStorePassword != null ? keyStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_19 $$ if (s != null) -->Line_46 $$ tmFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm())[ CD ]
Line_67 $$ if ("none".equalsIgnoreCase(keyStoreType)) -->Line_71 $$ String s = System.getProperty("javax.net.ssl.keyStore")[ CD ]
Line_58 $$ KeyManagerFactory kmFactory = null-->Line_76 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)[ FD ]
Line_76 $$ kmFactory = KeyManagerFactory.getInstance(keyAlgorithm)-->Line_91 $$ kmFactory.init(keyStore, keyStorePassword != null ? keyStorePassword.toCharArray() : EMPTY_PASSWORD)[ FD ]
Line_19 $$ if (s != null) -->Line_38 $$ File javaHome = SystemProperties.getInstance().getJavaHomeDir()[ CD ]
Line_30 $$ FileInputStream instream = new FileInputStream(trustStoreFile)-->Line_89 $$ instream.close()[ FD ]
Line_64 $$ if (keyStoreType == null) -->Line_65 $$ keyStoreType = KeyStore.getDefaultType()[ CD ]
Line_5 $$ TrustManagerFactory tmFactory-->Line_55 $$ tmFactory.init(trustStore)[ FD ]
Line_63 $$ String keyStoreType = System.getProperty("javax.net.ssl.keyStoreType")-->Line_64 $$ if (keyStoreType == null) [ FD ]
