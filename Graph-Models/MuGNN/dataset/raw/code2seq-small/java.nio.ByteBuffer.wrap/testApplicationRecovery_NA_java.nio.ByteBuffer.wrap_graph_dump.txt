Line_55 $$ app = context.getApplications().get(appId)-->Line_79 $$ app.handle(new ApplicationEvent(app.getAppId(), ApplicationEventType.APPLICATION_RESOURCES_CLEANEDUP))[ FD ]
Line_51 $$ cm = createContainerManager(context)-->Line_85 $$ cm.init(conf)[ FD ]
Line_12 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_53 $$ cm.start()[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_68 $$ cm = createContainerManager(context)[ CD ]
Line_67 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_75 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_22 $$ String viewUser = "view_user1"-->Line_77 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_55 $$ app = context.getApplications().get(appId)-->Line_80 $$ assertEquals(app.getApplicationState(), ApplicationState.FINISHED)[ FD ]
Line_24 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_77 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_34 $$ ByteBuffer containerTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength())[ CD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_52 $$ cm.init(conf)[ CD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_59 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_22 $$ String viewUser = "view_user1"-->Line_59 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_12 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_70 $$ cm.start()[ FD ]
Line_72 $$ app = context.getApplications().get(appId)-->Line_80 $$ assertEquals(app.getApplicationState(), ApplicationState.FINISHED)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_53 $$ cm.start()[ CD ]
Line_32 $$ DataOutputBuffer dob = new DataOutputBuffer()-->Line_34 $$ ByteBuffer containerTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength())[ FD ]
Line_12 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_85 $$ cm.init(conf)[ FD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_61 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_67 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_84 $$ cm = createContainerManager(context)[ CD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_3 $$ YarnConfiguration conf = new YarnConfiguration()[ CD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_7 $$ conf.set(YarnConfiguration.YARN_ADMIN_ACL, "yarn_admin_user")[ CD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_64 $$ cm.handle(new CMgrCompletedAppsEvent(finishedApps, CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER))[ CD ]
Line_84 $$ cm = createContainerManager(context)-->Line_85 $$ cm.init(conf)[ FD ]
Line_42 $$ Application app = context.getApplications().get(appId)-->Line_81 $$ app.handle(new ApplicationEvent(app.getAppId(), ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED))[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_24 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)[ CD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_47 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_59 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ CD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_40 $$ assertTrue(startResponse.getFailedRequests().isEmpty())[ CD ]
Line_24 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_60 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_23 $$ String enemyUser = "enemy_user"-->Line_61 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_50 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_71 $$ assertEquals(1, context.getApplications().size())[ FD ]
Line_83 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_87 $$ assertTrue(context.getApplications().isEmpty())[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_21 $$ String modUser = "modify_user1"[ CD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_54 $$ assertEquals(1, context.getApplications().size())[ CD ]
Line_68 $$ cm = createContainerManager(context)-->Line_82 $$ cm.stop()[ FD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_68 $$ cm = createContainerManager(context)[ FD ]
Line_21 $$ String modUser = "modify_user1"-->Line_36 $$ acls.put(ApplicationAccessType.MODIFY_APP, modUser)[ FD ]
Line_24 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_55 $$ app = context.getApplications().get(appId)[ FD ]
Line_21 $$ String modUser = "modify_user1"-->Line_45 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_83 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_84 $$ cm = createContainerManager(context)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_87 $$ assertTrue(context.getApplications().isEmpty())[ CD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_15 $$ MasterKey masterKey = new MasterKeyPBImpl()[ CD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_76 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_50 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_58 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_67 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_78 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_3 $$ YarnConfiguration conf = new YarnConfiguration()-->Line_85 $$ cm.init(conf)[ FD ]
Line_24 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_25 $$ ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_86 $$ cm.start()[ CD ]
Line_3 $$ YarnConfiguration conf = new YarnConfiguration()-->Line_69 $$ cm.init(conf)[ FD ]
Line_51 $$ cm = createContainerManager(context)-->Line_53 $$ cm.start()[ FD ]
Line_50 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_77 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_12 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_66 $$ cm.stop()[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_17 $$ masterKey.setBytes(ByteBuffer.wrap(new byte[] [ CD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_10 $$ stateStore.start()[ CD ]
Line_24 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_47 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_44 $$ waitForAppState(app, ApplicationState.INITING)[ CD ]
Line_12 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_64 $$ cm.handle(new CMgrCompletedAppsEvent(finishedApps, CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER))[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_37 $$ acls.put(ApplicationAccessType.VIEW_APP, viewUser)[ CD ]
Line_51 $$ cm = createContainerManager(context)-->Line_68 $$ cm = createContainerManager(context)[ FD ]
Line_30 $$ Map<String, ByteBuffer> serviceData = Collections.emptyMap()-->Line_38 $$ ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, containerEnv, containerCmds, serviceData, containerTokens, acls)[ FD ]
Line_51 $$ cm = createContainerManager(context)-->Line_88 $$ cm.stop()[ FD ]
Line_67 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_87 $$ assertTrue(context.getApplications().isEmpty())[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_42 $$ Application app = context.getApplications().get(appId)[ CD ]
Line_24 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_75 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_83 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)[ FD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_39 $$ StartContainersResponse startResponse = startContainer(context, cm, cid, clc)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_75 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ CD ]
Line_42 $$ Application app = context.getApplications().get(appId)-->Line_80 $$ assertEquals(app.getApplicationState(), ApplicationState.FINISHED)[ FD ]
Line_42 $$ Application app = context.getApplications().get(appId)-->Line_57 $$ waitForAppState(app, ApplicationState.INITING)[ FD ]
Line_3 $$ YarnConfiguration conf = new YarnConfiguration()-->Line_13 $$ cm.init(conf)[ FD ]
Line_28 $$ Map<String, String> containerEnv = Collections.emptyMap()-->Line_38 $$ ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, containerEnv, containerCmds, serviceData, containerTokens, acls)[ FD ]
Line_24 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_46 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_6 $$ conf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE, true)[ CD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_63 $$ finishedApps.add(appId)[ CD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_67 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)[ CD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_82 $$ cm.stop()[ CD ]
Line_68 $$ cm = createContainerManager(context)-->Line_86 $$ cm.start()[ FD ]
Line_51 $$ cm = createContainerManager(context)-->Line_86 $$ cm.start()[ FD ]
Line_3 $$ YarnConfiguration conf = new YarnConfiguration()-->Line_52 $$ cm.init(conf)[ FD ]
Line_67 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_83 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)[ FD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_58 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_24 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_45 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_45 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ CD ]
Line_55 $$ app = context.getApplications().get(appId)-->Line_56 $$ assertNotNull(app)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_47 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ CD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_14 $$ cm.start()[ CD ]
Line_50 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_75 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_67 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_68 $$ cm = createContainerManager(context)[ FD ]
Line_12 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_84 $$ cm = createContainerManager(context)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_5 $$ conf.set(YarnConfiguration.NM_ADDRESS, "localhost:1234")[ CD ]
Line_50 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_76 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_19 $$ context.getNMTokenSecretManager().setMasterKey(masterKey)[ FD ]
Line_50 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_51 $$ cm = createContainerManager(context)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_33 $$ containerCreds.writeTokenStorageToStream(dob)[ CD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)[ CD ]
Line_42 $$ Application app = context.getApplications().get(appId)-->Line_79 $$ app.handle(new ApplicationEvent(app.getAppId(), ApplicationEventType.APPLICATION_RESOURCES_CLEANEDUP))[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_20 $$ String appUser = "app_user1"[ CD ]
Line_27 $$ Map<String, LocalResource> localResources = Collections.emptyMap()-->Line_38 $$ ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, containerEnv, containerCmds, serviceData, containerTokens, acls)[ FD ]
Line_68 $$ cm = createContainerManager(context)-->Line_84 $$ cm = createContainerManager(context)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_62 $$ List<ApplicationId> finishedApps = new ArrayList<ApplicationId>()[ CD ]
Line_72 $$ app = context.getApplications().get(appId)-->Line_81 $$ app.handle(new ApplicationEvent(app.getAppId(), ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED))[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_51 $$ cm = createContainerManager(context)[ CD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_41 $$ assertEquals(1, context.getApplications().size())[ FD ]
Line_50 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_60 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_50 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)[ FD ]
Line_23 $$ String enemyUser = "enemy_user"-->Line_78 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_35 $$ Map<ApplicationAccessType, String> acls = new HashMap<ApplicationAccessType, String>()-->Line_36 $$ acls.put(ApplicationAccessType.MODIFY_APP, modUser)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_77 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ CD ]
Line_50 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_83 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)[ FD ]
Line_67 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_72 $$ app = context.getApplications().get(appId)[ FD ]
Line_8 $$ NMStateStoreService stateStore = new NMMemoryStateStoreService()-->Line_10 $$ stateStore.start()[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_43 $$ assertNotNull(app)[ CD ]
Line_68 $$ cm = createContainerManager(context)-->Line_88 $$ cm.stop()[ FD ]
Line_22 $$ String viewUser = "view_user1"-->Line_60 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_12 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_88 $$ cm.stop()[ FD ]
Line_25 $$ ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1)-->Line_26 $$ ContainerId cid = ContainerId.newInstance(attemptId, 1)[ FD ]
Line_35 $$ Map<ApplicationAccessType, String> acls = new HashMap<ApplicationAccessType, String>()-->Line_37 $$ acls.put(ApplicationAccessType.VIEW_APP, viewUser)[ FD ]
Line_8 $$ NMStateStoreService stateStore = new NMMemoryStateStoreService()-->Line_9 $$ stateStore.init(conf)[ FD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_84 $$ cm = createContainerManager(context)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_55 $$ app = context.getApplications().get(appId)[ CD ]
Line_23 $$ String enemyUser = "enemy_user"-->Line_48 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_32 $$ DataOutputBuffer dob = new DataOutputBuffer()-->Line_33 $$ containerCreds.writeTokenStorageToStream(dob)[ FD ]
Line_38 $$ ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, containerEnv, containerCmds, serviceData, containerTokens, acls)-->Line_39 $$ StartContainersResponse startResponse = startContainer(context, cm, cid, clc)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_46 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ CD ]
Line_3 $$ YarnConfiguration conf = new YarnConfiguration()-->Line_6 $$ conf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE, true)[ FD ]
Line_12 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_49 $$ cm.stop()[ FD ]
Line_15 $$ MasterKey masterKey = new MasterKeyPBImpl()-->Line_18 $$ context.getContainerTokenSecretManager().setMasterKey(masterKey)[ FD ]
Line_51 $$ cm = createContainerManager(context)-->Line_52 $$ cm.init(conf)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_49 $$ cm.stop()[ CD ]
Line_50 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_54 $$ assertEquals(1, context.getApplications().size())[ FD ]
Line_20 $$ String appUser = "app_user1"-->Line_58 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_24 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_63 $$ finishedApps.add(appId)[ FD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_71 $$ assertEquals(1, context.getApplications().size())[ FD ]
Line_12 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_68 $$ cm = createContainerManager(context)[ FD ]
Line_12 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_82 $$ cm.stop()[ FD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_46 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_48 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_51 $$ cm = createContainerManager(context)-->Line_82 $$ cm.stop()[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_29 $$ List<String> containerCmds = Collections.emptyList()[ CD ]
Line_24 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_58 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_12 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_13 $$ cm.init(conf)[ FD ]
Line_42 $$ Application app = context.getApplications().get(appId)-->Line_73 $$ assertNotNull(app)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_57 $$ waitForAppState(app, ApplicationState.INITING)[ CD ]
Line_22 $$ String viewUser = "view_user1"-->Line_37 $$ acls.put(ApplicationAccessType.VIEW_APP, viewUser)[ FD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_45 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_12 $$ ContainerManagerImpl cm = createContainerManager(context)[ CD ]
Line_35 $$ Map<ApplicationAccessType, String> acls = new HashMap<ApplicationAccessType, String>()-->Line_38 $$ ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, containerEnv, containerCmds, serviceData, containerTokens, acls)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_30 $$ Map<String, ByteBuffer> serviceData = Collections.emptyMap()[ CD ]
Line_20 $$ String appUser = "app_user1"-->Line_46 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_22 $$ String viewUser = "view_user1"-->Line_76 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_84 $$ cm = createContainerManager(context)-->Line_86 $$ cm.start()[ FD ]
Line_67 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_76 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_73 $$ assertNotNull(app)[ CD ]
Line_50 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_55 $$ app = context.getApplications().get(appId)[ FD ]
Line_72 $$ app = context.getApplications().get(appId)-->Line_73 $$ assertNotNull(app)[ FD ]
Line_20 $$ String appUser = "app_user1"-->Line_61 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_20 $$ String appUser = "app_user1"-->Line_45 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_12 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_51 $$ cm = createContainerManager(context)[ FD ]
Line_34 $$ ByteBuffer containerTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength())-->Line_38 $$ ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, containerEnv, containerCmds, serviceData, containerTokens, acls)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_66 $$ cm.stop()[ CD ]
Line_42 $$ Application app = context.getApplications().get(appId)-->Line_55 $$ app = context.getApplications().get(appId)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_39 $$ StartContainersResponse startResponse = startContainer(context, cm, cid, clc)[ CD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_69 $$ cm.init(conf)[ CD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_41 $$ assertEquals(1, context.getApplications().size())[ CD ]
Line_20 $$ String appUser = "app_user1"-->Line_77 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_78 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_87 $$ assertTrue(context.getApplications().isEmpty())[ FD ]
Line_50 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_87 $$ assertTrue(context.getApplications().isEmpty())[ FD ]
Line_20 $$ String appUser = "app_user1"-->Line_76 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_51 $$ cm = createContainerManager(context)-->Line_66 $$ cm.stop()[ FD ]
Line_55 $$ app = context.getApplications().get(appId)-->Line_72 $$ app = context.getApplications().get(appId)[ FD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_12 $$ ContainerManagerImpl cm = createContainerManager(context)[ FD ]
Line_12 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_69 $$ cm.init(conf)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_78 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ CD ]
Line_24 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_76 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_15 $$ MasterKey masterKey = new MasterKeyPBImpl()-->Line_17 $$ masterKey.setBytes(ByteBuffer.wrap(new byte[] [ FD ]
Line_12 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_39 $$ StartContainersResponse startResponse = startContainer(context, cm, cid, clc)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_60 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ CD ]
Line_20 $$ String appUser = "app_user1"-->Line_60 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_51 $$ cm = createContainerManager(context)-->Line_64 $$ cm.handle(new CMgrCompletedAppsEvent(finishedApps, CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER))[ FD ]
Line_68 $$ cm = createContainerManager(context)-->Line_69 $$ cm.init(conf)[ FD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_18 $$ context.getContainerTokenSecretManager().setMasterKey(masterKey)[ FD ]
Line_42 $$ Application app = context.getApplications().get(appId)-->Line_72 $$ app = context.getApplications().get(appId)[ FD ]
Line_21 $$ String modUser = "modify_user1"-->Line_75 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_42 $$ Application app = context.getApplications().get(appId)-->Line_65 $$ waitForAppState(app, ApplicationState.APPLICATION_RESOURCES_CLEANINGUP)[ FD ]
Line_50 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_84 $$ cm = createContainerManager(context)[ FD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_55 $$ app = context.getApplications().get(appId)[ FD ]
Line_29 $$ List<String> containerCmds = Collections.emptyList()-->Line_38 $$ ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, containerEnv, containerCmds, serviceData, containerTokens, acls)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_32 $$ DataOutputBuffer dob = new DataOutputBuffer()[ CD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_85 $$ cm.init(conf)[ CD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_61 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ CD ]
Line_68 $$ cm = createContainerManager(context)-->Line_85 $$ cm.init(conf)[ FD ]
Line_3 $$ YarnConfiguration conf = new YarnConfiguration()-->Line_7 $$ conf.set(YarnConfiguration.YARN_ADMIN_ACL, "yarn_admin_user")[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_27 $$ Map<String, LocalResource> localResources = Collections.emptyMap()[ CD ]
Line_24 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_61 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_18 $$ context.getContainerTokenSecretManager().setMasterKey(masterKey)[ CD ]
Line_55 $$ app = context.getApplications().get(appId)-->Line_74 $$ waitForAppState(app, ApplicationState.APPLICATION_RESOURCES_CLEANINGUP)[ FD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_42 $$ Application app = context.getApplications().get(appId)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_16 $$ masterKey.setKeyId(123)[ CD ]
Line_67 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_71 $$ assertEquals(1, context.getApplications().size())[ FD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_60 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_50 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_59 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_51 $$ cm = createContainerManager(context)-->Line_70 $$ cm.start()[ FD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_54 $$ assertEquals(1, context.getApplications().size())[ FD ]
Line_22 $$ String viewUser = "view_user1"-->Line_46 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_50 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_78 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_25 $$ ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1)[ CD ]
Line_12 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_14 $$ cm.start()[ FD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_75 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_38 $$ ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, containerEnv, containerCmds, serviceData, containerTokens, acls)[ CD ]
Line_68 $$ cm = createContainerManager(context)-->Line_70 $$ cm.start()[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_26 $$ ContainerId cid = ContainerId.newInstance(attemptId, 1)[ CD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_36 $$ acls.put(ApplicationAccessType.MODIFY_APP, modUser)[ CD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_4 $$ conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, true)[ CD ]
Line_22 $$ String viewUser = "view_user1"-->Line_47 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_12 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_86 $$ cm.start()[ FD ]
Line_55 $$ app = context.getApplications().get(appId)-->Line_65 $$ waitForAppState(app, ApplicationState.APPLICATION_RESOURCES_CLEANINGUP)[ FD ]
Line_51 $$ cm = createContainerManager(context)-->Line_84 $$ cm = createContainerManager(context)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_71 $$ assertEquals(1, context.getApplications().size())[ CD ]
Line_3 $$ YarnConfiguration conf = new YarnConfiguration()-->Line_9 $$ stateStore.init(conf)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_65 $$ waitForAppState(app, ApplicationState.APPLICATION_RESOURCES_CLEANINGUP)[ CD ]
Line_15 $$ MasterKey masterKey = new MasterKeyPBImpl()-->Line_19 $$ context.getNMTokenSecretManager().setMasterKey(masterKey)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_23 $$ String enemyUser = "enemy_user"[ CD ]
Line_50 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_61 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_55 $$ app = context.getApplications().get(appId)-->Line_81 $$ app.handle(new ApplicationEvent(app.getAppId(), ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED))[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_22 $$ String viewUser = "view_user1"[ CD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_83 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)[ CD ]
Line_55 $$ app = context.getApplications().get(appId)-->Line_57 $$ waitForAppState(app, ApplicationState.INITING)[ FD ]
Line_31 $$ Credentials containerCreds = new Credentials()-->Line_33 $$ containerCreds.writeTokenStorageToStream(dob)[ FD ]
Line_62 $$ List<ApplicationId> finishedApps = new ArrayList<ApplicationId>()-->Line_63 $$ finishedApps.add(appId)[ FD ]
Line_51 $$ cm = createContainerManager(context)-->Line_69 $$ cm.init(conf)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_9 $$ stateStore.init(conf)[ CD ]
Line_20 $$ String appUser = "app_user1"-->Line_75 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_72 $$ app = context.getApplications().get(appId)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_31 $$ Credentials containerCreds = new Credentials()[ CD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_35 $$ Map<ApplicationAccessType, String> acls = new HashMap<ApplicationAccessType, String>()[ CD ]
Line_55 $$ app = context.getApplications().get(appId)-->Line_73 $$ assertNotNull(app)[ FD ]
Line_12 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_52 $$ cm.init(conf)[ FD ]
Line_24 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_78 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_81 $$ app.handle(new ApplicationEvent(app.getAppId(), ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED))[ CD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_77 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_20 $$ String appUser = "app_user1"-->Line_78 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_74 $$ waitForAppState(app, ApplicationState.APPLICATION_RESOURCES_CLEANINGUP)[ CD ]
Line_26 $$ ContainerId cid = ContainerId.newInstance(attemptId, 1)-->Line_39 $$ StartContainersResponse startResponse = startContainer(context, cm, cid, clc)[ FD ]
Line_20 $$ String appUser = "app_user1"-->Line_48 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_80 $$ assertEquals(app.getApplicationState(), ApplicationState.FINISHED)[ CD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_56 $$ assertNotNull(app)[ CD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_28 $$ Map<String, String> containerEnv = Collections.emptyMap()[ CD ]
Line_50 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_67 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)[ FD ]
Line_42 $$ Application app = context.getApplications().get(appId)-->Line_43 $$ assertNotNull(app)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_48 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ CD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_13 $$ cm.init(conf)[ CD ]
Line_15 $$ MasterKey masterKey = new MasterKeyPBImpl()-->Line_16 $$ masterKey.setKeyId(123)[ FD ]
Line_24 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_48 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_50 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_72 $$ app = context.getApplications().get(appId)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_19 $$ context.getNMTokenSecretManager().setMasterKey(masterKey)[ CD ]
Line_84 $$ cm = createContainerManager(context)-->Line_88 $$ cm.stop()[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_72 $$ app = context.getApplications().get(appId)[ CD ]
Line_67 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_77 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_20 $$ String appUser = "app_user1"-->Line_59 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_24 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_42 $$ Application app = context.getApplications().get(appId)[ FD ]
Line_24 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_59 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_76 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ CD ]
Line_39 $$ StartContainersResponse startResponse = startContainer(context, cm, cid, clc)-->Line_40 $$ assertTrue(startResponse.getFailedRequests().isEmpty())[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_58 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ CD ]
Line_72 $$ app = context.getApplications().get(appId)-->Line_79 $$ app.handle(new ApplicationEvent(app.getAppId(), ApplicationEventType.APPLICATION_RESOURCES_CLEANEDUP))[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_70 $$ cm.start()[ CD ]
Line_11 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_51 $$ cm = createContainerManager(context)[ FD ]
Line_67 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_84 $$ cm = createContainerManager(context)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_8 $$ NMStateStoreService stateStore = new NMMemoryStateStoreService()[ CD ]
Line_20 $$ String appUser = "app_user1"-->Line_47 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_24 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_72 $$ app = context.getApplications().get(appId)[ FD ]
Line_42 $$ Application app = context.getApplications().get(appId)-->Line_74 $$ waitForAppState(app, ApplicationState.APPLICATION_RESOURCES_CLEANINGUP)[ FD ]
Line_42 $$ Application app = context.getApplications().get(appId)-->Line_44 $$ waitForAppState(app, ApplicationState.INITING)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_50 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)[ CD ]
Line_3 $$ YarnConfiguration conf = new YarnConfiguration()-->Line_5 $$ conf.set(YarnConfiguration.NM_ADDRESS, "localhost:1234")[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_88 $$ cm.stop()[ CD ]
Line_42 $$ Application app = context.getApplications().get(appId)-->Line_56 $$ assertNotNull(app)[ FD ]
Line_50 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_68 $$ cm = createContainerManager(context)[ FD ]
Line_2 $$ public void testApplicationRecovery() throws Exception -->Line_79 $$ app.handle(new ApplicationEvent(app.getAppId(), ApplicationEventType.APPLICATION_RESOURCES_CLEANEDUP))[ CD ]
Line_21 $$ String modUser = "modify_user1"-->Line_58 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_72 $$ app = context.getApplications().get(appId)-->Line_74 $$ waitForAppState(app, ApplicationState.APPLICATION_RESOURCES_CLEANINGUP)[ FD ]
Line_3 $$ YarnConfiguration conf = new YarnConfiguration()-->Line_4 $$ conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, true)[ FD ]
