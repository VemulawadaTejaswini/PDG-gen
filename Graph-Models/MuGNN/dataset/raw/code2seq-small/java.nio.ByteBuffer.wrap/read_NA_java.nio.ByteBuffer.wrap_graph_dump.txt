Line_15 $$ length -= blockSize-->Line_17 $$ if (length == 0) [ FD ]
Line_36 $$ length = outputRemaining-->Line_35 $$ offset += length - outputRemaining[ FD ]
Line_2 $$ public int read(byte[] bytes, int offset, int length) throws IOException -->Line_11 $$ while (length > 0) [ FD ]
Line_2 $$ public int read(byte[] bytes, int offset, int length) throws IOException -->Line_7 $$ if (length == 0) [ FD ]
Line_11 $$ while (length > 0) -->Line_12 $$ int blockSize = Math.min(_outputBuffer.remaining(), length)[ CD ]
Line_31 $$ if ((inputRemaining * _maxBytesPerChar) < length) -->Line_40 $$ _outputBuffer.flip()[ CD ]
Line_2 $$ public int read(byte[] bytes, int offset, int length) throws IOException -->Line_17 $$ if (length == 0) [ FD ]
Line_13 $$ if (blockSize > 0) -->Line_17 $$ if (length == 0) [ CD ]
Line_2 $$ public int read(byte[] bytes, int offset, int length) throws IOException -->Line_15 $$ length -= blockSize[ FD ]
Line_22 $$ int result = _reader.read(_inputBuffer.array(), inputPosition, _inputBuffer.remaining())-->Line_23 $$ if (result != -1) [ FD ]
Line_2 $$ public int read(byte[] bytes, int offset, int length) throws IOException -->Line_32 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(bytes, offset, length)[ FD ]
Line_2 $$ public int read(byte[] bytes, int offset, int length) throws IOException -->Line_36 $$ length = outputRemaining[ FD ]
Line_32 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(bytes, offset, length)-->Line_34 $$ int outputRemaining = byteBuffer.remaining()[ FD ]
Line_12 $$ int blockSize = Math.min(_outputBuffer.remaining(), length)-->Line_16 $$ offset += blockSize[ FD ]
Line_11 $$ while (length > 0) -->Line_31 $$ if ((inputRemaining * _maxBytesPerChar) < length) [ CD ]
Line_11 $$ while (length > 0) -->Line_13 $$ if (blockSize > 0) [ CD ]
Line_31 $$ if ((inputRemaining * _maxBytesPerChar) < length) -->Line_34 $$ int outputRemaining = byteBuffer.remaining()[ CD ]
Line_31 $$ if ((inputRemaining * _maxBytesPerChar) < length) -->Line_35 $$ offset += length - outputRemaining[ CD ]
Line_45 $$ if (result == 0) -->Line_46 $$ return -1[ CD ]
Line_2 $$ public int read(byte[] bytes, int offset, int length) throws IOException -->Line_11 $$ while (length > 0) [ CD ]
Line_34 $$ int outputRemaining = byteBuffer.remaining()-->Line_35 $$ offset += length - outputRemaining[ FD ]
Line_2 $$ public int read(byte[] bytes, int offset, int length) throws IOException -->Line_12 $$ int blockSize = Math.min(_outputBuffer.remaining(), length)[ FD ]
Line_2 $$ public int read(byte[] bytes, int offset, int length) throws IOException -->Line_31 $$ if ((inputRemaining * _maxBytesPerChar) < length) [ FD ]
Line_2 $$ public int read(byte[] bytes, int offset, int length) throws IOException -->Line_45 $$ if (result == 0) [ CD ]
Line_2 $$ public int read(byte[] bytes, int offset, int length) throws IOException -->Line_10 $$ int originalLength = length[ CD ]
Line_2 $$ public int read(byte[] bytes, int offset, int length) throws IOException -->Line_35 $$ offset += length - outputRemaining[ FD ]
Line_15 $$ length -= blockSize-->Line_32 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(bytes, offset, length)[ FD ]
Line_5 $$ if ((offset < 0) || (length < 0) || (length > (bytes.length - offset))) -->Line_7 $$ if (length == 0) [ CD ]
Line_12 $$ int blockSize = Math.min(_outputBuffer.remaining(), length)-->Line_13 $$ if (blockSize > 0) [ FD ]
Line_31 $$ if ((inputRemaining * _maxBytesPerChar) < length) -->Line_33 $$ _charsetEncoder.encode(_inputBuffer, byteBuffer, true)[ CD ]
Line_31 $$ if ((inputRemaining * _maxBytesPerChar) < length) -->Line_39 $$ _charsetEncoder.encode(_inputBuffer, _outputBuffer, true)[ CD ]
Line_15 $$ length -= blockSize-->Line_11 $$ while (length > 0) [ FD ]
Line_15 $$ length -= blockSize-->Line_12 $$ int blockSize = Math.min(_outputBuffer.remaining(), length)[ FD ]
Line_2 $$ public int read(byte[] bytes, int offset, int length) throws IOException -->Line_3 $$ if (bytes == null) [ CD ]
Line_11 $$ while (length > 0) -->Line_22 $$ int result = _reader.read(_inputBuffer.array(), inputPosition, _inputBuffer.remaining())[ CD ]
Line_16 $$ offset += blockSize-->Line_35 $$ offset += length - outputRemaining[ FD ]
Line_12 $$ int blockSize = Math.min(_outputBuffer.remaining(), length)-->Line_14 $$ _outputBuffer.get(bytes, offset, blockSize)[ FD ]
Line_36 $$ length = outputRemaining-->Line_11 $$ while (length > 0) [ FD ]
Line_11 $$ while (length > 0) -->Line_21 $$ int inputPosition = _inputBuffer.position()[ CD ]
Line_15 $$ length -= blockSize-->Line_35 $$ offset += length - outputRemaining[ FD ]
Line_36 $$ length = outputRemaining-->Line_12 $$ int blockSize = Math.min(_outputBuffer.remaining(), length)[ FD ]
Line_13 $$ if (blockSize > 0) -->Line_16 $$ offset += blockSize[ CD ]
Line_32 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(bytes, offset, length)-->Line_33 $$ _charsetEncoder.encode(_inputBuffer, byteBuffer, true)[ FD ]
Line_15 $$ length -= blockSize-->Line_36 $$ length = outputRemaining[ FD ]
Line_2 $$ public int read(byte[] bytes, int offset, int length) throws IOException -->Line_16 $$ offset += blockSize[ FD ]
Line_23 $$ if (result != -1) -->Line_24 $$ _inputBuffer.position(inputPosition + result)[ CD ]
Line_36 $$ length = outputRemaining-->Line_32 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(bytes, offset, length)[ FD ]
Line_7 $$ if (length == 0) -->Line_8 $$ return 0[ CD ]
Line_12 $$ int blockSize = Math.min(_outputBuffer.remaining(), length)-->Line_15 $$ length -= blockSize[ FD ]
Line_22 $$ int result = _reader.read(_inputBuffer.array(), inputPosition, _inputBuffer.remaining())-->Line_45 $$ if (result == 0) [ FD ]
Line_35 $$ offset += length - outputRemaining-->Line_32 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(bytes, offset, length)[ FD ]
Line_15 $$ length -= blockSize-->Line_31 $$ if ((inputRemaining * _maxBytesPerChar) < length) [ FD ]
Line_27 $$ int inputRemaining = _inputBuffer.remaining()-->Line_28 $$ if (inputRemaining <= 0) [ FD ]
Line_11 $$ while (length > 0) -->Line_28 $$ if (inputRemaining <= 0) [ CD ]
Line_11 $$ while (length > 0) -->Line_26 $$ _inputBuffer.flip()[ CD ]
Line_31 $$ if ((inputRemaining * _maxBytesPerChar) < length) -->Line_32 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(bytes, offset, length)[ CD ]
Line_34 $$ int outputRemaining = byteBuffer.remaining()-->Line_36 $$ length = outputRemaining[ FD ]
Line_31 $$ if ((inputRemaining * _maxBytesPerChar) < length) -->Line_38 $$ _outputBuffer.clear()[ CD ]
Line_21 $$ int inputPosition = _inputBuffer.position()-->Line_22 $$ int result = _reader.read(_inputBuffer.array(), inputPosition, _inputBuffer.remaining())[ FD ]
Line_11 $$ while (length > 0) -->Line_42 $$ _inputBuffer.compact()[ CD ]
Line_2 $$ public int read(byte[] bytes, int offset, int length) throws IOException -->Line_44 $$ int result = originalLength - length[ CD ]
Line_44 $$ int result = originalLength - length-->Line_45 $$ if (result == 0) [ FD ]
Line_36 $$ length = outputRemaining-->Line_17 $$ if (length == 0) [ FD ]
Line_13 $$ if (blockSize > 0) -->Line_14 $$ _outputBuffer.get(bytes, offset, blockSize)[ CD ]
Line_36 $$ length = outputRemaining-->Line_31 $$ if ((inputRemaining * _maxBytesPerChar) < length) [ FD ]
Line_16 $$ offset += blockSize-->Line_14 $$ _outputBuffer.get(bytes, offset, blockSize)[ FD ]
Line_31 $$ if ((inputRemaining * _maxBytesPerChar) < length) -->Line_36 $$ length = outputRemaining[ CD ]
Line_3 $$ if (bytes == null) -->Line_5 $$ if ((offset < 0) || (length < 0) || (length > (bytes.length - offset))) [ CD ]
Line_11 $$ while (length > 0) -->Line_23 $$ if (result != -1) [ CD ]
Line_2 $$ public int read(byte[] bytes, int offset, int length) throws IOException -->Line_48 $$ return result[ CD ]
Line_35 $$ offset += length - outputRemaining-->Line_14 $$ _outputBuffer.get(bytes, offset, blockSize)[ FD ]
Line_2 $$ public int read(byte[] bytes, int offset, int length) throws IOException -->Line_3 $$ if (bytes == null) [ FD ]
Line_2 $$ public int read(byte[] bytes, int offset, int length) throws IOException -->Line_14 $$ _outputBuffer.get(bytes, offset, blockSize)[ FD ]
Line_16 $$ offset += blockSize-->Line_32 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(bytes, offset, length)[ FD ]
Line_13 $$ if (blockSize > 0) -->Line_15 $$ length -= blockSize[ CD ]
Line_11 $$ while (length > 0) -->Line_27 $$ int inputRemaining = _inputBuffer.remaining()[ CD ]
