Line_11 $$ rs = execute("SELECT writeTime(name) AS name_writetime FROM %s WHERE id = 0")-->Line_13 $$ assertEquals(0, rs.one().getInt(rs.metadata().get(0).name.toString()))[ FD ]
Line_2 $$ public void testSelectWithAlias() throws Throwable -->Line_7 $$ assertEquals(5L, rs.one().getLong(rs.metadata().get(0).name.toString()))[ CD ]
Line_18 $$ rs = execute("SELECT intAsBlob(id) AS id_blob FROM %s WHERE id = 0")-->Line_20 $$ assertEquals(ByteBuffer.wrap(new byte[4]), rs.one().getBlob(rs.metadata().get(0).name.toString()))[ FD ]
Line_5 $$ UntypedResultSet rs = execute("SELECT count(*) AS user_count FROM %s")-->Line_16 $$ int ttl = rs.one().getInt(rs.metadata().get(0).name.toString())[ FD ]
Line_14 $$ rs = execute("SELECT ttl(name) AS name_ttl FROM %s WHERE id = 0")-->Line_16 $$ int ttl = rs.one().getInt(rs.metadata().get(0).name.toString())[ FD ]
Line_2 $$ public void testSelectWithAlias() throws Throwable -->Line_16 $$ int ttl = rs.one().getInt(rs.metadata().get(0).name.toString())[ CD ]
Line_5 $$ UntypedResultSet rs = execute("SELECT count(*) AS user_count FROM %s")-->Line_6 $$ assertEquals("user_count", rs.metadata().get(0).name.toString())[ FD ]
Line_2 $$ public void testSelectWithAlias() throws Throwable -->Line_3 $$ createTable("CREATE TABLE %s (id int PRIMARY KEY, name text)")[ CD ]
Line_8 $$ rs = execute("SELECT name AS user_name FROM %s WHERE id = 0")-->Line_10 $$ assertEquals("name0", rs.one().getString(rs.metadata().get(0).name.toString()))[ FD ]
Line_5 $$ UntypedResultSet rs = execute("SELECT count(*) AS user_count FROM %s")-->Line_13 $$ assertEquals(0, rs.one().getInt(rs.metadata().get(0).name.toString()))[ FD ]
Line_5 $$ UntypedResultSet rs = execute("SELECT count(*) AS user_count FROM %s")-->Line_19 $$ assertEquals("id_blob", rs.metadata().get(0).name.toString())[ FD ]
Line_2 $$ public void testSelectWithAlias() throws Throwable -->Line_10 $$ assertEquals("name0", rs.one().getString(rs.metadata().get(0).name.toString()))[ CD ]
Line_8 $$ rs = execute("SELECT name AS user_name FROM %s WHERE id = 0")-->Line_14 $$ rs = execute("SELECT ttl(name) AS name_ttl FROM %s WHERE id = 0")[ FD ]
Line_5 $$ UntypedResultSet rs = execute("SELECT count(*) AS user_count FROM %s")-->Line_14 $$ rs = execute("SELECT ttl(name) AS name_ttl FROM %s WHERE id = 0")[ FD ]
Line_5 $$ UntypedResultSet rs = execute("SELECT count(*) AS user_count FROM %s")-->Line_10 $$ assertEquals("name0", rs.one().getString(rs.metadata().get(0).name.toString()))[ FD ]
Line_11 $$ rs = execute("SELECT writeTime(name) AS name_writetime FROM %s WHERE id = 0")-->Line_16 $$ int ttl = rs.one().getInt(rs.metadata().get(0).name.toString())[ FD ]
Line_11 $$ rs = execute("SELECT writeTime(name) AS name_writetime FROM %s WHERE id = 0")-->Line_14 $$ rs = execute("SELECT ttl(name) AS name_ttl FROM %s WHERE id = 0")[ FD ]
Line_5 $$ UntypedResultSet rs = execute("SELECT count(*) AS user_count FROM %s")-->Line_18 $$ rs = execute("SELECT intAsBlob(id) AS id_blob FROM %s WHERE id = 0")[ FD ]
Line_2 $$ public void testSelectWithAlias() throws Throwable -->Line_20 $$ assertEquals(ByteBuffer.wrap(new byte[4]), rs.one().getBlob(rs.metadata().get(0).name.toString()))[ CD ]
Line_5 $$ UntypedResultSet rs = execute("SELECT count(*) AS user_count FROM %s")-->Line_8 $$ rs = execute("SELECT name AS user_name FROM %s WHERE id = 0")[ FD ]
Line_18 $$ rs = execute("SELECT intAsBlob(id) AS id_blob FROM %s WHERE id = 0")-->Line_19 $$ assertEquals("id_blob", rs.metadata().get(0).name.toString())[ FD ]
Line_14 $$ rs = execute("SELECT ttl(name) AS name_ttl FROM %s WHERE id = 0")-->Line_15 $$ assertEquals("name_ttl", rs.metadata().get(0).name.toString())[ FD ]
Line_2 $$ public void testSelectWithAlias() throws Throwable -->Line_18 $$ rs = execute("SELECT intAsBlob(id) AS id_blob FROM %s WHERE id = 0")[ CD ]
Line_2 $$ public void testSelectWithAlias() throws Throwable -->Line_4 $$ for (int id = 0; id < 5; id++) execute("INSERT INTO %s (id, name) VALUES (?, ?) USING TTL 10 AND TIMESTAMP 0", id, "name" + id)[ CD ]
Line_2 $$ public void testSelectWithAlias() throws Throwable -->Line_11 $$ rs = execute("SELECT writeTime(name) AS name_writetime FROM %s WHERE id = 0")[ CD ]
Line_11 $$ rs = execute("SELECT writeTime(name) AS name_writetime FROM %s WHERE id = 0")-->Line_18 $$ rs = execute("SELECT intAsBlob(id) AS id_blob FROM %s WHERE id = 0")[ FD ]
Line_8 $$ rs = execute("SELECT name AS user_name FROM %s WHERE id = 0")-->Line_9 $$ assertEquals("user_name", rs.metadata().get(0).name.toString())[ FD ]
Line_14 $$ rs = execute("SELECT ttl(name) AS name_ttl FROM %s WHERE id = 0")-->Line_19 $$ assertEquals("id_blob", rs.metadata().get(0).name.toString())[ FD ]
Line_5 $$ UntypedResultSet rs = execute("SELECT count(*) AS user_count FROM %s")-->Line_7 $$ assertEquals(5L, rs.one().getLong(rs.metadata().get(0).name.toString()))[ FD ]
Line_2 $$ public void testSelectWithAlias() throws Throwable -->Line_22 $$ assertInvalidMessage("Aliases are not allowed in order by clause", "SELECT id AS user_id, name AS user_name FROM %s WHERE id IN (0) ORDER BY user_name")[ CD ]
Line_5 $$ UntypedResultSet rs = execute("SELECT count(*) AS user_count FROM %s")-->Line_12 $$ assertEquals("name_writetime", rs.metadata().get(0).name.toString())[ FD ]
Line_2 $$ public void testSelectWithAlias() throws Throwable -->Line_14 $$ rs = execute("SELECT ttl(name) AS name_ttl FROM %s WHERE id = 0")[ CD ]
Line_14 $$ rs = execute("SELECT ttl(name) AS name_ttl FROM %s WHERE id = 0")-->Line_18 $$ rs = execute("SELECT intAsBlob(id) AS id_blob FROM %s WHERE id = 0")[ FD ]
Line_8 $$ rs = execute("SELECT name AS user_name FROM %s WHERE id = 0")-->Line_11 $$ rs = execute("SELECT writeTime(name) AS name_writetime FROM %s WHERE id = 0")[ FD ]
Line_8 $$ rs = execute("SELECT name AS user_name FROM %s WHERE id = 0")-->Line_12 $$ assertEquals("name_writetime", rs.metadata().get(0).name.toString())[ FD ]
Line_11 $$ rs = execute("SELECT writeTime(name) AS name_writetime FROM %s WHERE id = 0")-->Line_15 $$ assertEquals("name_ttl", rs.metadata().get(0).name.toString())[ FD ]
Line_2 $$ public void testSelectWithAlias() throws Throwable -->Line_15 $$ assertEquals("name_ttl", rs.metadata().get(0).name.toString())[ CD ]
Line_2 $$ public void testSelectWithAlias() throws Throwable -->Line_21 $$ assertInvalidMessage("Aliases aren't allowed in the where clause", "SELECT id AS user_id, name AS user_name FROM %s WHERE user_id = 0")[ CD ]
Line_2 $$ public void testSelectWithAlias() throws Throwable -->Line_9 $$ assertEquals("user_name", rs.metadata().get(0).name.toString())[ CD ]
Line_8 $$ rs = execute("SELECT name AS user_name FROM %s WHERE id = 0")-->Line_16 $$ int ttl = rs.one().getInt(rs.metadata().get(0).name.toString())[ FD ]
Line_2 $$ public void testSelectWithAlias() throws Throwable -->Line_13 $$ assertEquals(0, rs.one().getInt(rs.metadata().get(0).name.toString()))[ CD ]
Line_8 $$ rs = execute("SELECT name AS user_name FROM %s WHERE id = 0")-->Line_15 $$ assertEquals("name_ttl", rs.metadata().get(0).name.toString())[ FD ]
Line_14 $$ rs = execute("SELECT ttl(name) AS name_ttl FROM %s WHERE id = 0")-->Line_20 $$ assertEquals(ByteBuffer.wrap(new byte[4]), rs.one().getBlob(rs.metadata().get(0).name.toString()))[ FD ]
Line_2 $$ public void testSelectWithAlias() throws Throwable -->Line_19 $$ assertEquals("id_blob", rs.metadata().get(0).name.toString())[ CD ]
Line_8 $$ rs = execute("SELECT name AS user_name FROM %s WHERE id = 0")-->Line_19 $$ assertEquals("id_blob", rs.metadata().get(0).name.toString())[ FD ]
Line_11 $$ rs = execute("SELECT writeTime(name) AS name_writetime FROM %s WHERE id = 0")-->Line_19 $$ assertEquals("id_blob", rs.metadata().get(0).name.toString())[ FD ]
Line_5 $$ UntypedResultSet rs = execute("SELECT count(*) AS user_count FROM %s")-->Line_15 $$ assertEquals("name_ttl", rs.metadata().get(0).name.toString())[ FD ]
Line_2 $$ public void testSelectWithAlias() throws Throwable -->Line_8 $$ rs = execute("SELECT name AS user_name FROM %s WHERE id = 0")[ CD ]
Line_11 $$ rs = execute("SELECT writeTime(name) AS name_writetime FROM %s WHERE id = 0")-->Line_12 $$ assertEquals("name_writetime", rs.metadata().get(0).name.toString())[ FD ]
Line_2 $$ public void testSelectWithAlias() throws Throwable -->Line_6 $$ assertEquals("user_count", rs.metadata().get(0).name.toString())[ CD ]
Line_5 $$ UntypedResultSet rs = execute("SELECT count(*) AS user_count FROM %s")-->Line_20 $$ assertEquals(ByteBuffer.wrap(new byte[4]), rs.one().getBlob(rs.metadata().get(0).name.toString()))[ FD ]
Line_2 $$ public void testSelectWithAlias() throws Throwable -->Line_12 $$ assertEquals("name_writetime", rs.metadata().get(0).name.toString())[ CD ]
Line_8 $$ rs = execute("SELECT name AS user_name FROM %s WHERE id = 0")-->Line_13 $$ assertEquals(0, rs.one().getInt(rs.metadata().get(0).name.toString()))[ FD ]
Line_8 $$ rs = execute("SELECT name AS user_name FROM %s WHERE id = 0")-->Line_18 $$ rs = execute("SELECT intAsBlob(id) AS id_blob FROM %s WHERE id = 0")[ FD ]
Line_8 $$ rs = execute("SELECT name AS user_name FROM %s WHERE id = 0")-->Line_20 $$ assertEquals(ByteBuffer.wrap(new byte[4]), rs.one().getBlob(rs.metadata().get(0).name.toString()))[ FD ]
Line_2 $$ public void testSelectWithAlias() throws Throwable -->Line_5 $$ UntypedResultSet rs = execute("SELECT count(*) AS user_count FROM %s")[ CD ]
Line_11 $$ rs = execute("SELECT writeTime(name) AS name_writetime FROM %s WHERE id = 0")-->Line_20 $$ assertEquals(ByteBuffer.wrap(new byte[4]), rs.one().getBlob(rs.metadata().get(0).name.toString()))[ FD ]
Line_5 $$ UntypedResultSet rs = execute("SELECT count(*) AS user_count FROM %s")-->Line_11 $$ rs = execute("SELECT writeTime(name) AS name_writetime FROM %s WHERE id = 0")[ FD ]
Line_2 $$ public void testSelectWithAlias() throws Throwable -->Line_17 $$ assertTrue(ttl == 9 || ttl == 10)[ CD ]
Line_5 $$ UntypedResultSet rs = execute("SELECT count(*) AS user_count FROM %s")-->Line_9 $$ assertEquals("user_name", rs.metadata().get(0).name.toString())[ FD ]
