Line_7 $$ source = ByteBuffer.wrap(randomBytes, offset, length)-->Line_10 $$ source.put(randomBytes, offset, length)[ FD ]
Line_14 $$ int lengthToRead = randomIntBetween(1, length)-->Line_23 $$ assertThat(read, Matchers.equalTo(lengthToRead))[ FD ]
Line_16 $$ ByteBuffer copy-->Line_20 $$ copy = ByteBuffer.allocateDirect(lengthToRead)[ FD ]
Line_2 $$ public void testPartialReadWriteThroughBuffers() throws IOException -->Line_23 $$ assertThat(read, Matchers.equalTo(lengthToRead))[ CD ]
Line_17 $$ if (randomBoolean()) -->Line_18 $$ copy = ByteBuffer.allocate(lengthToRead)[ CD ]
Line_2 $$ public void testPartialReadWriteThroughBuffers() throws IOException -->Line_22 $$ int read = Channels.readFromFileChannel(fileChannel, offsetToRead, copy)[ CD ]
Line_16 $$ ByteBuffer copy-->Line_18 $$ copy = ByteBuffer.allocate(lengthToRead)[ FD ]
Line_17 $$ if (randomBoolean()) -->Line_20 $$ copy = ByteBuffer.allocateDirect(lengthToRead)[ CD ]
Line_22 $$ int read = Channels.readFromFileChannel(fileChannel, offsetToRead, copy)-->Line_23 $$ assertThat(read, Matchers.equalTo(lengthToRead))[ FD ]
Line_20 $$ copy = ByteBuffer.allocateDirect(lengthToRead)-->Line_22 $$ int read = Channels.readFromFileChannel(fileChannel, offsetToRead, copy)[ FD ]
Line_5 $$ ByteBuffer source-->Line_9 $$ source = ByteBuffer.allocateDirect(length)[ FD ]
Line_2 $$ public void testPartialReadWriteThroughBuffers() throws IOException -->Line_14 $$ int lengthToRead = randomIntBetween(1, length)[ CD ]
Line_18 $$ copy = ByteBuffer.allocate(lengthToRead)-->Line_20 $$ copy = ByteBuffer.allocateDirect(lengthToRead)[ FD ]
Line_6 $$ if (randomBoolean()) -->Line_9 $$ source = ByteBuffer.allocateDirect(length)[ CD ]
Line_7 $$ source = ByteBuffer.wrap(randomBytes, offset, length)-->Line_13 $$ Channels.writeToChannel(source, fileChannel)[ FD ]
Line_4 $$ int offset = randomIntBetween(0, randomBytes.length - length)-->Line_7 $$ source = ByteBuffer.wrap(randomBytes, offset, length)[ FD ]
Line_2 $$ public void testPartialReadWriteThroughBuffers() throws IOException -->Line_4 $$ int offset = randomIntBetween(0, randomBytes.length - length)[ CD ]
Line_3 $$ int length = randomIntBetween(1, randomBytes.length / 2)-->Line_10 $$ source.put(randomBytes, offset, length)[ FD ]
Line_7 $$ source = ByteBuffer.wrap(randomBytes, offset, length)-->Line_11 $$ source.flip()[ FD ]
Line_2 $$ public void testPartialReadWriteThroughBuffers() throws IOException -->Line_5 $$ ByteBuffer source[ CD ]
Line_2 $$ public void testPartialReadWriteThroughBuffers() throws IOException -->Line_24 $$ copy.flip()[ CD ]
Line_9 $$ source = ByteBuffer.allocateDirect(length)-->Line_10 $$ source.put(randomBytes, offset, length)[ FD ]
Line_2 $$ public void testPartialReadWriteThroughBuffers() throws IOException -->Line_17 $$ if (randomBoolean()) [ CD ]
Line_3 $$ int length = randomIntBetween(1, randomBytes.length / 2)-->Line_7 $$ source = ByteBuffer.wrap(randomBytes, offset, length)[ FD ]
Line_4 $$ int offset = randomIntBetween(0, randomBytes.length - length)-->Line_10 $$ source.put(randomBytes, offset, length)[ FD ]
Line_2 $$ public void testPartialReadWriteThroughBuffers() throws IOException -->Line_13 $$ Channels.writeToChannel(source, fileChannel)[ CD ]
Line_5 $$ ByteBuffer source-->Line_13 $$ Channels.writeToChannel(source, fileChannel)[ FD ]
Line_14 $$ int lengthToRead = randomIntBetween(1, length)-->Line_18 $$ copy = ByteBuffer.allocate(lengthToRead)[ FD ]
Line_16 $$ ByteBuffer copy-->Line_24 $$ copy.flip()[ FD ]
Line_14 $$ int lengthToRead = randomIntBetween(1, length)-->Line_20 $$ copy = ByteBuffer.allocateDirect(lengthToRead)[ FD ]
Line_2 $$ public void testPartialReadWriteThroughBuffers() throws IOException -->Line_25 $$ BytesReference sourceRef = new BytesArray(randomBytes, offset + offsetToRead, lengthToRead)[ CD ]
Line_2 $$ public void testPartialReadWriteThroughBuffers() throws IOException -->Line_27 $$ assertTrue("read bytes didn't match written bytes", sourceRef.equals(copyRef))[ CD ]
Line_5 $$ ByteBuffer source-->Line_10 $$ source.put(randomBytes, offset, length)[ FD ]
Line_18 $$ copy = ByteBuffer.allocate(lengthToRead)-->Line_22 $$ int read = Channels.readFromFileChannel(fileChannel, offsetToRead, copy)[ FD ]
Line_15 $$ int offsetToRead = randomIntBetween(0, length - lengthToRead)-->Line_22 $$ int read = Channels.readFromFileChannel(fileChannel, offsetToRead, copy)[ FD ]
Line_2 $$ public void testPartialReadWriteThroughBuffers() throws IOException -->Line_15 $$ int offsetToRead = randomIntBetween(0, length - lengthToRead)[ CD ]
Line_5 $$ ByteBuffer source-->Line_7 $$ source = ByteBuffer.wrap(randomBytes, offset, length)[ FD ]
Line_2 $$ public void testPartialReadWriteThroughBuffers() throws IOException -->Line_6 $$ if (randomBoolean()) [ CD ]
Line_3 $$ int length = randomIntBetween(1, randomBytes.length / 2)-->Line_14 $$ int lengthToRead = randomIntBetween(1, length)[ FD ]
Line_26 $$ BytesReference copyRef = new ByteBufferBytesReference(copy)-->Line_27 $$ assertTrue("read bytes didn't match written bytes", sourceRef.equals(copyRef))[ FD ]
Line_20 $$ copy = ByteBuffer.allocateDirect(lengthToRead)-->Line_24 $$ copy.flip()[ FD ]
Line_5 $$ ByteBuffer source-->Line_11 $$ source.flip()[ FD ]
Line_9 $$ source = ByteBuffer.allocateDirect(length)-->Line_13 $$ Channels.writeToChannel(source, fileChannel)[ FD ]
Line_2 $$ public void testPartialReadWriteThroughBuffers() throws IOException -->Line_26 $$ BytesReference copyRef = new ByteBufferBytesReference(copy)[ CD ]
Line_16 $$ ByteBuffer copy-->Line_22 $$ int read = Channels.readFromFileChannel(fileChannel, offsetToRead, copy)[ FD ]
Line_25 $$ BytesReference sourceRef = new BytesArray(randomBytes, offset + offsetToRead, lengthToRead)-->Line_27 $$ assertTrue("read bytes didn't match written bytes", sourceRef.equals(copyRef))[ FD ]
Line_6 $$ if (randomBoolean()) -->Line_11 $$ source.flip()[ CD ]
Line_6 $$ if (randomBoolean()) -->Line_10 $$ source.put(randomBytes, offset, length)[ CD ]
Line_6 $$ if (randomBoolean()) -->Line_7 $$ source = ByteBuffer.wrap(randomBytes, offset, length)[ CD ]
Line_7 $$ source = ByteBuffer.wrap(randomBytes, offset, length)-->Line_9 $$ source = ByteBuffer.allocateDirect(length)[ FD ]
Line_9 $$ source = ByteBuffer.allocateDirect(length)-->Line_11 $$ source.flip()[ FD ]
Line_2 $$ public void testPartialReadWriteThroughBuffers() throws IOException -->Line_3 $$ int length = randomIntBetween(1, randomBytes.length / 2)[ CD ]
Line_3 $$ int length = randomIntBetween(1, randomBytes.length / 2)-->Line_9 $$ source = ByteBuffer.allocateDirect(length)[ FD ]
Line_18 $$ copy = ByteBuffer.allocate(lengthToRead)-->Line_24 $$ copy.flip()[ FD ]
Line_2 $$ public void testPartialReadWriteThroughBuffers() throws IOException -->Line_16 $$ ByteBuffer copy[ CD ]
