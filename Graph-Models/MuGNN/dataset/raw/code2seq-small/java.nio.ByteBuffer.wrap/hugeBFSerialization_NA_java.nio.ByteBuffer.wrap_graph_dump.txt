Line_5 $$ BloomFilter filter = (BloomFilter) FilterFactory.getFilter(((long) Integer.MAX_VALUE / 8) + 1, 0.01d, true, oldBfHashOrder)-->Line_6 $$ filter.add(FilterTestHelper.wrap(test))[ FD ]
Line_2 $$ static void hugeBFSerialization(boolean oldBfHashOrder) throws IOException -->Line_8 $$ FilterFactory.serialize(filter, out)[ CD ]
Line_7 $$ DataOutputStreamPlus out = new BufferedDataOutputStreamPlus(new FileOutputStream(file))-->Line_9 $$ filter.bitset.serialize(out)[ FD ]
Line_3 $$ ByteBuffer test = ByteBuffer.wrap(new byte[] -->Line_14 $$ Assert.assertTrue(filter2.isPresent(FilterTestHelper.wrap(test)))[ FD ]
Line_12 $$ DataInputStream in = new DataInputStream(new FileInputStream(file))-->Line_15 $$ FileUtils.closeQuietly(in)[ FD ]
Line_13 $$ BloomFilter filter2 = (BloomFilter) FilterFactory.deserialize(in, true, oldBfHashOrder)-->Line_16 $$ filter2.close()[ FD ]
Line_2 $$ static void hugeBFSerialization(boolean oldBfHashOrder) throws IOException -->Line_11 $$ filter.close()[ CD ]
Line_2 $$ static void hugeBFSerialization(boolean oldBfHashOrder) throws IOException -->Line_10 $$ out.close()[ CD ]
Line_2 $$ static void hugeBFSerialization(boolean oldBfHashOrder) throws IOException -->Line_6 $$ filter.add(FilterTestHelper.wrap(test))[ CD ]
Line_7 $$ DataOutputStreamPlus out = new BufferedDataOutputStreamPlus(new FileOutputStream(file))-->Line_10 $$ out.close()[ FD ]
Line_5 $$ BloomFilter filter = (BloomFilter) FilterFactory.getFilter(((long) Integer.MAX_VALUE / 8) + 1, 0.01d, true, oldBfHashOrder)-->Line_11 $$ filter.close()[ FD ]
Line_2 $$ static void hugeBFSerialization(boolean oldBfHashOrder) throws IOException -->Line_14 $$ Assert.assertTrue(filter2.isPresent(FilterTestHelper.wrap(test)))[ CD ]
Line_2 $$ static void hugeBFSerialization(boolean oldBfHashOrder) throws IOException -->Line_13 $$ BloomFilter filter2 = (BloomFilter) FilterFactory.deserialize(in, true, oldBfHashOrder)[ FD ]
Line_2 $$ static void hugeBFSerialization(boolean oldBfHashOrder) throws IOException -->Line_5 $$ BloomFilter filter = (BloomFilter) FilterFactory.getFilter(((long) Integer.MAX_VALUE / 8) + 1, 0.01d, true, oldBfHashOrder)[ CD ]
Line_2 $$ static void hugeBFSerialization(boolean oldBfHashOrder) throws IOException -->Line_16 $$ filter2.close()[ CD ]
Line_5 $$ BloomFilter filter = (BloomFilter) FilterFactory.getFilter(((long) Integer.MAX_VALUE / 8) + 1, 0.01d, true, oldBfHashOrder)-->Line_8 $$ FilterFactory.serialize(filter, out)[ FD ]
Line_2 $$ static void hugeBFSerialization(boolean oldBfHashOrder) throws IOException -->Line_3 $$ ByteBuffer test = ByteBuffer.wrap(new byte[] [ CD ]
Line_2 $$ static void hugeBFSerialization(boolean oldBfHashOrder) throws IOException -->Line_4 $$ File file = FileUtils.createTempFile("bloomFilterTest-", ".dat")[ CD ]
Line_7 $$ DataOutputStreamPlus out = new BufferedDataOutputStreamPlus(new FileOutputStream(file))-->Line_8 $$ FilterFactory.serialize(filter, out)[ FD ]
Line_2 $$ static void hugeBFSerialization(boolean oldBfHashOrder) throws IOException -->Line_15 $$ FileUtils.closeQuietly(in)[ CD ]
Line_2 $$ static void hugeBFSerialization(boolean oldBfHashOrder) throws IOException -->Line_5 $$ BloomFilter filter = (BloomFilter) FilterFactory.getFilter(((long) Integer.MAX_VALUE / 8) + 1, 0.01d, true, oldBfHashOrder)[ FD ]
Line_2 $$ static void hugeBFSerialization(boolean oldBfHashOrder) throws IOException -->Line_7 $$ DataOutputStreamPlus out = new BufferedDataOutputStreamPlus(new FileOutputStream(file))[ CD ]
Line_2 $$ static void hugeBFSerialization(boolean oldBfHashOrder) throws IOException -->Line_9 $$ filter.bitset.serialize(out)[ CD ]
Line_13 $$ BloomFilter filter2 = (BloomFilter) FilterFactory.deserialize(in, true, oldBfHashOrder)-->Line_14 $$ Assert.assertTrue(filter2.isPresent(FilterTestHelper.wrap(test)))[ FD ]
Line_2 $$ static void hugeBFSerialization(boolean oldBfHashOrder) throws IOException -->Line_12 $$ DataInputStream in = new DataInputStream(new FileInputStream(file))[ CD ]
Line_12 $$ DataInputStream in = new DataInputStream(new FileInputStream(file))-->Line_13 $$ BloomFilter filter2 = (BloomFilter) FilterFactory.deserialize(in, true, oldBfHashOrder)[ FD ]
Line_2 $$ static void hugeBFSerialization(boolean oldBfHashOrder) throws IOException -->Line_13 $$ BloomFilter filter2 = (BloomFilter) FilterFactory.deserialize(in, true, oldBfHashOrder)[ CD ]
Line_3 $$ ByteBuffer test = ByteBuffer.wrap(new byte[] -->Line_6 $$ filter.add(FilterTestHelper.wrap(test))[ FD ]
