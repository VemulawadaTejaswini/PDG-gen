Line_4 $$ final CharBuffer charBuffer = charset.decode(ByteBuffer.wrap(bytes, bomLength, bytes.length - bomLength))-->Line_5 $$ return charBuffer.toString()[ FD ]
Line_2 $$ public static String decodeString(@NotNull byte[] bytes, @NotNull final Charset charset) -->Line_5 $$ return charBuffer.toString()[ CD ]
Line_2 $$ public static String decodeString(@NotNull byte[] bytes, @NotNull final Charset charset) -->Line_3 $$ int bomLength = getBOMLength(bytes, charset)[ CD ]
Line_2 $$ public static String decodeString(@NotNull byte[] bytes, @NotNull final Charset charset) -->Line_4 $$ final CharBuffer charBuffer = charset.decode(ByteBuffer.wrap(bytes, bomLength, bytes.length - bomLength))[ FD ]
Line_2 $$ public static String decodeString(@NotNull byte[] bytes, @NotNull final Charset charset) -->Line_4 $$ final CharBuffer charBuffer = charset.decode(ByteBuffer.wrap(bytes, bomLength, bytes.length - bomLength))[ CD ]
Line_2 $$ public static String decodeString(@NotNull byte[] bytes, @NotNull final Charset charset) -->Line_3 $$ int bomLength = getBOMLength(bytes, charset)[ FD ]
Line_3 $$ int bomLength = getBOMLength(bytes, charset)-->Line_4 $$ final CharBuffer charBuffer = charset.decode(ByteBuffer.wrap(bytes, bomLength, bytes.length - bomLength))[ FD ]
