Line_2 $$ public void testTrimming() -->Line_12 $$ assertEquals(0, comparator.compare(n1, n2))[ CD ]
Line_4 $$ n1 = ByteBuffer.wrap(new byte[] -->Line_15 $$ assertSignum("", -1, comparator.compare(n1, n2))[ FD ]
Line_10 $$ n1 = ByteBuffer.wrap(new byte[] -->Line_12 $$ assertEquals(0, comparator.compare(n1, n2))[ FD ]
Line_4 $$ n1 = ByteBuffer.wrap(new byte[] -->Line_12 $$ assertEquals(0, comparator.compare(n1, n2))[ FD ]
Line_4 $$ n1 = ByteBuffer.wrap(new byte[] -->Line_18 $$ assertSignum("", -1, comparator.compare(n1, n2))[ FD ]
Line_8 $$ n2 = ByteBuffer.wrap(new byte[] -->Line_15 $$ assertSignum("", -1, comparator.compare(n1, n2))[ FD ]
Line_13 $$ n1 = ByteBuffer.wrap(new byte[] -->Line_18 $$ assertSignum("", -1, comparator.compare(n1, n2))[ FD ]
Line_8 $$ n2 = ByteBuffer.wrap(new byte[] -->Line_12 $$ assertEquals(0, comparator.compare(n1, n2))[ FD ]
Line_2 $$ public void testTrimming() -->Line_6 $$ assertEquals(0, comparator.compare(n1, n2))[ CD ]
Line_7 $$ n1 = ByteBuffer.wrap(new byte[] -->Line_18 $$ assertSignum("", -1, comparator.compare(n1, n2))[ FD ]
Line_3 $$ ByteBuffer n1, n2-->Line_6 $$ assertEquals(0, comparator.compare(n1, n2))[ FD ]
Line_3 $$ ByteBuffer n1, n2-->Line_17 $$ n2 = ByteBuffer.wrap(new byte[] [ FD ]
Line_5 $$ n2 = ByteBuffer.wrap(new byte[] -->Line_9 $$ assertEquals(0, comparator.compare(n1, n2))[ FD ]
Line_3 $$ ByteBuffer n1, n2-->Line_12 $$ assertEquals(0, comparator.compare(n1, n2))[ FD ]
Line_2 $$ public void testTrimming() -->Line_15 $$ assertSignum("", -1, comparator.compare(n1, n2))[ CD ]
Line_2 $$ public void testTrimming() -->Line_3 $$ ByteBuffer n1, n2[ CD ]
Line_2 $$ public void testTrimming() -->Line_5 $$ n2 = ByteBuffer.wrap(new byte[] [ CD ]
Line_3 $$ ByteBuffer n1, n2-->Line_5 $$ n2 = ByteBuffer.wrap(new byte[] [ FD ]
Line_8 $$ n2 = ByteBuffer.wrap(new byte[] -->Line_17 $$ n2 = ByteBuffer.wrap(new byte[] [ FD ]
Line_8 $$ n2 = ByteBuffer.wrap(new byte[] -->Line_11 $$ n2 = ByteBuffer.wrap(new byte[] [ FD ]
Line_14 $$ n2 = ByteBuffer.wrap(new byte[] -->Line_18 $$ assertSignum("", -1, comparator.compare(n1, n2))[ FD ]
Line_13 $$ n1 = ByteBuffer.wrap(new byte[] -->Line_15 $$ assertSignum("", -1, comparator.compare(n1, n2))[ FD ]
Line_4 $$ n1 = ByteBuffer.wrap(new byte[] -->Line_16 $$ n1 = ByteBuffer.wrap(new byte[] [ FD ]
Line_2 $$ public void testTrimming() -->Line_11 $$ n2 = ByteBuffer.wrap(new byte[] [ CD ]
Line_2 $$ public void testTrimming() -->Line_4 $$ n1 = ByteBuffer.wrap(new byte[] [ CD ]
Line_2 $$ public void testTrimming() -->Line_16 $$ n1 = ByteBuffer.wrap(new byte[] [ CD ]
Line_2 $$ public void testTrimming() -->Line_13 $$ n1 = ByteBuffer.wrap(new byte[] [ CD ]
Line_7 $$ n1 = ByteBuffer.wrap(new byte[] -->Line_13 $$ n1 = ByteBuffer.wrap(new byte[] [ FD ]
Line_2 $$ public void testTrimming() -->Line_8 $$ n2 = ByteBuffer.wrap(new byte[] [ CD ]
Line_3 $$ ByteBuffer n1, n2-->Line_8 $$ n2 = ByteBuffer.wrap(new byte[] [ FD ]
Line_5 $$ n2 = ByteBuffer.wrap(new byte[] -->Line_11 $$ n2 = ByteBuffer.wrap(new byte[] [ FD ]
Line_3 $$ ByteBuffer n1, n2-->Line_15 $$ assertSignum("", -1, comparator.compare(n1, n2))[ FD ]
Line_7 $$ n1 = ByteBuffer.wrap(new byte[] -->Line_9 $$ assertEquals(0, comparator.compare(n1, n2))[ FD ]
Line_11 $$ n2 = ByteBuffer.wrap(new byte[] -->Line_14 $$ n2 = ByteBuffer.wrap(new byte[] [ FD ]
Line_11 $$ n2 = ByteBuffer.wrap(new byte[] -->Line_17 $$ n2 = ByteBuffer.wrap(new byte[] [ FD ]
Line_10 $$ n1 = ByteBuffer.wrap(new byte[] -->Line_16 $$ n1 = ByteBuffer.wrap(new byte[] [ FD ]
Line_17 $$ n2 = ByteBuffer.wrap(new byte[] -->Line_18 $$ assertSignum("", -1, comparator.compare(n1, n2))[ FD ]
Line_5 $$ n2 = ByteBuffer.wrap(new byte[] -->Line_12 $$ assertEquals(0, comparator.compare(n1, n2))[ FD ]
Line_10 $$ n1 = ByteBuffer.wrap(new byte[] -->Line_13 $$ n1 = ByteBuffer.wrap(new byte[] [ FD ]
Line_3 $$ ByteBuffer n1, n2-->Line_4 $$ n1 = ByteBuffer.wrap(new byte[] [ FD ]
Line_4 $$ n1 = ByteBuffer.wrap(new byte[] -->Line_6 $$ assertEquals(0, comparator.compare(n1, n2))[ FD ]
Line_7 $$ n1 = ByteBuffer.wrap(new byte[] -->Line_16 $$ n1 = ByteBuffer.wrap(new byte[] [ FD ]
Line_2 $$ public void testTrimming() -->Line_10 $$ n1 = ByteBuffer.wrap(new byte[] [ CD ]
Line_2 $$ public void testTrimming() -->Line_7 $$ n1 = ByteBuffer.wrap(new byte[] [ CD ]
Line_5 $$ n2 = ByteBuffer.wrap(new byte[] -->Line_8 $$ n2 = ByteBuffer.wrap(new byte[] [ FD ]
Line_13 $$ n1 = ByteBuffer.wrap(new byte[] -->Line_16 $$ n1 = ByteBuffer.wrap(new byte[] [ FD ]
Line_4 $$ n1 = ByteBuffer.wrap(new byte[] -->Line_13 $$ n1 = ByteBuffer.wrap(new byte[] [ FD ]
Line_8 $$ n2 = ByteBuffer.wrap(new byte[] -->Line_14 $$ n2 = ByteBuffer.wrap(new byte[] [ FD ]
Line_5 $$ n2 = ByteBuffer.wrap(new byte[] -->Line_18 $$ assertSignum("", -1, comparator.compare(n1, n2))[ FD ]
Line_3 $$ ByteBuffer n1, n2-->Line_10 $$ n1 = ByteBuffer.wrap(new byte[] [ FD ]
Line_5 $$ n2 = ByteBuffer.wrap(new byte[] -->Line_14 $$ n2 = ByteBuffer.wrap(new byte[] [ FD ]
Line_11 $$ n2 = ByteBuffer.wrap(new byte[] -->Line_15 $$ assertSignum("", -1, comparator.compare(n1, n2))[ FD ]
Line_10 $$ n1 = ByteBuffer.wrap(new byte[] -->Line_18 $$ assertSignum("", -1, comparator.compare(n1, n2))[ FD ]
Line_14 $$ n2 = ByteBuffer.wrap(new byte[] -->Line_15 $$ assertSignum("", -1, comparator.compare(n1, n2))[ FD ]
Line_2 $$ public void testTrimming() -->Line_17 $$ n2 = ByteBuffer.wrap(new byte[] [ CD ]
Line_4 $$ n1 = ByteBuffer.wrap(new byte[] -->Line_10 $$ n1 = ByteBuffer.wrap(new byte[] [ FD ]
Line_2 $$ public void testTrimming() -->Line_14 $$ n2 = ByteBuffer.wrap(new byte[] [ CD ]
Line_8 $$ n2 = ByteBuffer.wrap(new byte[] -->Line_18 $$ assertSignum("", -1, comparator.compare(n1, n2))[ FD ]
Line_5 $$ n2 = ByteBuffer.wrap(new byte[] -->Line_6 $$ assertEquals(0, comparator.compare(n1, n2))[ FD ]
Line_7 $$ n1 = ByteBuffer.wrap(new byte[] -->Line_15 $$ assertSignum("", -1, comparator.compare(n1, n2))[ FD ]
Line_10 $$ n1 = ByteBuffer.wrap(new byte[] -->Line_15 $$ assertSignum("", -1, comparator.compare(n1, n2))[ FD ]
Line_3 $$ ByteBuffer n1, n2-->Line_18 $$ assertSignum("", -1, comparator.compare(n1, n2))[ FD ]
Line_11 $$ n2 = ByteBuffer.wrap(new byte[] -->Line_18 $$ assertSignum("", -1, comparator.compare(n1, n2))[ FD ]
Line_11 $$ n2 = ByteBuffer.wrap(new byte[] -->Line_12 $$ assertEquals(0, comparator.compare(n1, n2))[ FD ]
Line_2 $$ public void testTrimming() -->Line_18 $$ assertSignum("", -1, comparator.compare(n1, n2))[ CD ]
Line_16 $$ n1 = ByteBuffer.wrap(new byte[] -->Line_18 $$ assertSignum("", -1, comparator.compare(n1, n2))[ FD ]
Line_8 $$ n2 = ByteBuffer.wrap(new byte[] -->Line_9 $$ assertEquals(0, comparator.compare(n1, n2))[ FD ]
Line_3 $$ ByteBuffer n1, n2-->Line_16 $$ n1 = ByteBuffer.wrap(new byte[] [ FD ]
Line_4 $$ n1 = ByteBuffer.wrap(new byte[] -->Line_7 $$ n1 = ByteBuffer.wrap(new byte[] [ FD ]
Line_14 $$ n2 = ByteBuffer.wrap(new byte[] -->Line_17 $$ n2 = ByteBuffer.wrap(new byte[] [ FD ]
Line_7 $$ n1 = ByteBuffer.wrap(new byte[] -->Line_12 $$ assertEquals(0, comparator.compare(n1, n2))[ FD ]
Line_3 $$ ByteBuffer n1, n2-->Line_14 $$ n2 = ByteBuffer.wrap(new byte[] [ FD ]
Line_5 $$ n2 = ByteBuffer.wrap(new byte[] -->Line_17 $$ n2 = ByteBuffer.wrap(new byte[] [ FD ]
Line_3 $$ ByteBuffer n1, n2-->Line_9 $$ assertEquals(0, comparator.compare(n1, n2))[ FD ]
Line_5 $$ n2 = ByteBuffer.wrap(new byte[] -->Line_15 $$ assertSignum("", -1, comparator.compare(n1, n2))[ FD ]
Line_2 $$ public void testTrimming() -->Line_9 $$ assertEquals(0, comparator.compare(n1, n2))[ CD ]
Line_4 $$ n1 = ByteBuffer.wrap(new byte[] -->Line_9 $$ assertEquals(0, comparator.compare(n1, n2))[ FD ]
Line_7 $$ n1 = ByteBuffer.wrap(new byte[] -->Line_10 $$ n1 = ByteBuffer.wrap(new byte[] [ FD ]
Line_3 $$ ByteBuffer n1, n2-->Line_13 $$ n1 = ByteBuffer.wrap(new byte[] [ FD ]
Line_3 $$ ByteBuffer n1, n2-->Line_7 $$ n1 = ByteBuffer.wrap(new byte[] [ FD ]
Line_3 $$ ByteBuffer n1, n2-->Line_11 $$ n2 = ByteBuffer.wrap(new byte[] [ FD ]
