Line_7 $$ for (int i = 0; i < 10; i++) -->Line_8 $$ buffer[i] = (byte) i[ CD ]
Line_2 $$ public void testWrite() throws Exception -->Line_16 $$ assertEquals("Incorrect response:", null, response2)[ CD ]
Line_6 $$ byte[] buffer = new byte[10]-->Line_10 $$ WRITE3Request writeReq = new WRITE3Request(handle, 0, 10, WriteStableHow.DATA_SYNC, ByteBuffer.wrap(buffer))[ FD ]
Line_11 $$ XDR xdr_req = new XDR()-->Line_13 $$ WRITE3Response response1 = nfsd.write(xdr_req.asReadOnlyWrap(), null, 1, securityHandlerUnpriviledged, new InetSocketAddress("localhost", 1234))[ FD ]
Line_2 $$ public void testWrite() throws Exception -->Line_6 $$ byte[] buffer = new byte[10][ CD ]
Line_11 $$ XDR xdr_req = new XDR()-->Line_15 $$ WRITE3Response response2 = nfsd.write(xdr_req.asReadOnlyWrap(), null, 1, securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_13 $$ WRITE3Response response1 = nfsd.write(xdr_req.asReadOnlyWrap(), null, 1, securityHandlerUnpriviledged, new InetSocketAddress("localhost", 1234))-->Line_14 $$ assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus())[ FD ]
Line_2 $$ public void testWrite() throws Exception -->Line_15 $$ WRITE3Response response2 = nfsd.write(xdr_req.asReadOnlyWrap(), null, 1, securityHandler, new InetSocketAddress("localhost", 1234))[ CD ]
Line_2 $$ public void testWrite() throws Exception -->Line_14 $$ assertEquals("Incorrect return code:", Nfs3Status.NFS3ERR_ACCES, response1.getStatus())[ CD ]
Line_2 $$ public void testWrite() throws Exception -->Line_3 $$ HdfsFileStatus status = nn.getRpcServer().getFileInfo("/tmp/bar")[ CD ]
Line_2 $$ public void testWrite() throws Exception -->Line_10 $$ WRITE3Request writeReq = new WRITE3Request(handle, 0, 10, WriteStableHow.DATA_SYNC, ByteBuffer.wrap(buffer))[ CD ]
Line_10 $$ WRITE3Request writeReq = new WRITE3Request(handle, 0, 10, WriteStableHow.DATA_SYNC, ByteBuffer.wrap(buffer))-->Line_12 $$ writeReq.serialize(xdr_req)[ FD ]
Line_2 $$ public void testWrite() throws Exception -->Line_12 $$ writeReq.serialize(xdr_req)[ CD ]
Line_3 $$ HdfsFileStatus status = nn.getRpcServer().getFileInfo("/tmp/bar")-->Line_4 $$ long dirId = status.getFileId()[ FD ]
Line_2 $$ public void testWrite() throws Exception -->Line_5 $$ FileHandle handle = new FileHandle(dirId)[ CD ]
Line_2 $$ public void testWrite() throws Exception -->Line_7 $$ for (int i = 0; i < 10; i++) [ CD ]
Line_2 $$ public void testWrite() throws Exception -->Line_13 $$ WRITE3Response response1 = nfsd.write(xdr_req.asReadOnlyWrap(), null, 1, securityHandlerUnpriviledged, new InetSocketAddress("localhost", 1234))[ CD ]
Line_2 $$ public void testWrite() throws Exception -->Line_4 $$ long dirId = status.getFileId()[ CD ]
Line_2 $$ public void testWrite() throws Exception -->Line_11 $$ XDR xdr_req = new XDR()[ CD ]
Line_11 $$ XDR xdr_req = new XDR()-->Line_12 $$ writeReq.serialize(xdr_req)[ FD ]
Line_15 $$ WRITE3Response response2 = nfsd.write(xdr_req.asReadOnlyWrap(), null, 1, securityHandler, new InetSocketAddress("localhost", 1234))-->Line_16 $$ assertEquals("Incorrect response:", null, response2)[ FD ]
