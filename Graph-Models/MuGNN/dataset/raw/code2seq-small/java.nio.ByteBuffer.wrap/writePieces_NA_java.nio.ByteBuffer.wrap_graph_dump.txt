Line_30 $$ ByteBuffer leftOverBuf = ByteBuffer.wrap(new byte[leftOver])-->Line_36 $$ leftOverBuf.put(genData.getBuffer())[ FD ]
Line_29 $$ if (leftOver > 0) -->Line_46 $$ long startTime = Timer.now()[ CD ]
Line_14 $$ for (long i = 0; i < fullPieces; ++i) -->Line_19 $$ byte[] buf = gBuf.array()[ CD ]
Line_14 $$ for (long i = 0; i < fullPieces; ++i) -->Line_26 $$ bytesWritten += buf.length[ CD ]
Line_30 $$ ByteBuffer leftOverBuf = ByteBuffer.wrap(new byte[leftOver])-->Line_45 $$ byte[] buf = leftOverBuf.array()[ FD ]
Line_33 $$ if (leftOver > 0) -->Line_36 $$ leftOverBuf.put(genData.getBuffer())[ CD ]
Line_14 $$ for (long i = 0; i < fullPieces; ++i) -->Line_16 $$ offset = genData.getOffset()[ CD ]
Line_34 $$ GenerateResult genData = generateFullSegment(leftOver, offset, hasher)-->Line_40 $$ offset = genData.getOffset()[ FD ]
Line_31 $$ int bytesLeft = leftOver % BYTES_PER_LONG-->Line_32 $$ leftOver = leftOver - bytesLeft[ FD ]
Line_15 $$ GenerateResult genData = generateFullSegment(bufferSize, offset, hasher)-->Line_16 $$ offset = genData.getOffset()[ FD ]
Line_2 $$ private GenerateOutput writePieces(long byteAm, long startPos, DataHasher hasher, OutputStream out) throws IOException -->Line_7 $$ startPos = 0[ FD ]
Line_11 $$ long offset = startPos-->Line_34 $$ GenerateResult genData = generateFullSegment(leftOver, offset, hasher)[ FD ]
Line_16 $$ offset = genData.getOffset()-->Line_15 $$ GenerateResult genData = generateFullSegment(bufferSize, offset, hasher)[ FD ]
Line_16 $$ offset = genData.getOffset()-->Line_39 $$ GenerateResult genData = generatePartialSegment(bytesLeft, offset, hasher)[ FD ]
Line_45 $$ byte[] buf = leftOverBuf.array()-->Line_47 $$ out.write(buf)[ FD ]
Line_16 $$ offset = genData.getOffset()-->Line_34 $$ GenerateResult genData = generateFullSegment(leftOver, offset, hasher)[ FD ]
Line_29 $$ if (leftOver > 0) -->Line_51 $$ timeTaken += Timer.elapsed(startTime)[ CD ]
Line_13 $$ long timeTaken = 0-->Line_25 $$ timeTaken += Timer.elapsed(startTime)[ FD ]
Line_14 $$ for (long i = 0; i < fullPieces; ++i) -->Line_22 $$ if (Constants.FLUSH_WRITES) [ CD ]
Line_29 $$ if (leftOver > 0) -->Line_43 $$ leftOverBuf.rewind()[ CD ]
Line_16 $$ offset = genData.getOffset()-->Line_35 $$ offset = genData.getOffset()[ FD ]
Line_20 $$ long startTime = Timer.now()-->Line_51 $$ timeTaken += Timer.elapsed(startTime)[ FD ]
Line_2 $$ private GenerateOutput writePieces(long byteAm, long startPos, DataHasher hasher, OutputStream out) throws IOException -->Line_29 $$ if (leftOver > 0) [ CD ]
Line_14 $$ for (long i = 0; i < fullPieces; ++i) -->Line_17 $$ ByteBuffer gBuf = genData.getBuffer()[ CD ]
Line_29 $$ if (leftOver > 0) -->Line_48 $$ if (Constants.FLUSH_WRITES) [ CD ]
Line_15 $$ GenerateResult genData = generateFullSegment(bufferSize, offset, hasher)-->Line_17 $$ ByteBuffer gBuf = genData.getBuffer()[ FD ]
Line_19 $$ byte[] buf = gBuf.array()-->Line_21 $$ out.write(buf)[ FD ]
Line_29 $$ if (leftOver > 0) -->Line_33 $$ if (leftOver > 0) [ CD ]
Line_2 $$ private GenerateOutput writePieces(long byteAm, long startPos, DataHasher hasher, OutputStream out) throws IOException -->Line_12 $$ long bytesWritten = 0[ CD ]
Line_2 $$ private GenerateOutput writePieces(long byteAm, long startPos, DataHasher hasher, OutputStream out) throws IOException -->Line_3 $$ if (byteAm <= 0) [ FD ]
Line_2 $$ private GenerateOutput writePieces(long byteAm, long startPos, DataHasher hasher, OutputStream out) throws IOException -->Line_6 $$ if (startPos < 0) [ FD ]
Line_33 $$ if (leftOver > 0) -->Line_34 $$ GenerateResult genData = generateFullSegment(leftOver, offset, hasher)[ CD ]
Line_11 $$ long offset = startPos-->Line_39 $$ GenerateResult genData = generatePartialSegment(bytesLeft, offset, hasher)[ FD ]
Line_35 $$ offset = genData.getOffset()-->Line_39 $$ GenerateResult genData = generatePartialSegment(bytesLeft, offset, hasher)[ FD ]
Line_2 $$ private GenerateOutput writePieces(long byteAm, long startPos, DataHasher hasher, OutputStream out) throws IOException -->Line_34 $$ GenerateResult genData = generateFullSegment(leftOver, offset, hasher)[ FD ]
Line_32 $$ leftOver = leftOver - bytesLeft-->Line_34 $$ GenerateResult genData = generateFullSegment(leftOver, offset, hasher)[ FD ]
Line_46 $$ long startTime = Timer.now()-->Line_51 $$ timeTaken += Timer.elapsed(startTime)[ FD ]
Line_38 $$ if (bytesLeft > 0) -->Line_41 $$ leftOverBuf.put(genData.getBuffer())[ CD ]
Line_2 $$ private GenerateOutput writePieces(long byteAm, long startPos, DataHasher hasher, OutputStream out) throws IOException -->Line_11 $$ long offset = startPos[ CD ]
Line_29 $$ if (leftOver > 0) -->Line_30 $$ ByteBuffer leftOverBuf = ByteBuffer.wrap(new byte[leftOver])[ CD ]
Line_35 $$ offset = genData.getOffset()-->Line_40 $$ offset = genData.getOffset()[ FD ]
Line_11 $$ long offset = startPos-->Line_15 $$ GenerateResult genData = generateFullSegment(bufferSize, offset, hasher)[ FD ]
Line_14 $$ for (long i = 0; i < fullPieces; ++i) -->Line_20 $$ long startTime = Timer.now()[ CD ]
Line_11 $$ long offset = startPos-->Line_16 $$ offset = genData.getOffset()[ FD ]
Line_12 $$ long bytesWritten = 0-->Line_52 $$ bytesWritten += buf.length[ FD ]
Line_2 $$ private GenerateOutput writePieces(long byteAm, long startPos, DataHasher hasher, OutputStream out) throws IOException -->Line_39 $$ GenerateResult genData = generatePartialSegment(bytesLeft, offset, hasher)[ FD ]
Line_2 $$ private GenerateOutput writePieces(long byteAm, long startPos, DataHasher hasher, OutputStream out) throws IOException -->Line_9 $$ int leftOver = (int) (byteAm % bufferSize)[ CD ]
Line_2 $$ private GenerateOutput writePieces(long byteAm, long startPos, DataHasher hasher, OutputStream out) throws IOException -->Line_6 $$ if (startPos < 0) [ CD ]
Line_2 $$ private GenerateOutput writePieces(long byteAm, long startPos, DataHasher hasher, OutputStream out) throws IOException -->Line_47 $$ out.write(buf)[ FD ]
Line_29 $$ if (leftOver > 0) -->Line_47 $$ out.write(buf)[ CD ]
Line_2 $$ private GenerateOutput writePieces(long byteAm, long startPos, DataHasher hasher, OutputStream out) throws IOException -->Line_55 $$ return new GenerateOutput(bytesWritten, timeTaken)[ CD ]
Line_22 $$ if (Constants.FLUSH_WRITES) -->Line_23 $$ out.flush()[ CD ]
Line_12 $$ long bytesWritten = 0-->Line_26 $$ bytesWritten += buf.length[ FD ]
Line_34 $$ GenerateResult genData = generateFullSegment(leftOver, offset, hasher)-->Line_35 $$ offset = genData.getOffset()[ FD ]
Line_2 $$ private GenerateOutput writePieces(long byteAm, long startPos, DataHasher hasher, OutputStream out) throws IOException -->Line_23 $$ out.flush()[ FD ]
Line_29 $$ if (leftOver > 0) -->Line_38 $$ if (bytesLeft > 0) [ CD ]
Line_26 $$ bytesWritten += buf.length-->Line_52 $$ bytesWritten += buf.length[ FD ]
Line_19 $$ byte[] buf = gBuf.array()-->Line_47 $$ out.write(buf)[ FD ]
Line_34 $$ GenerateResult genData = generateFullSegment(leftOver, offset, hasher)-->Line_36 $$ leftOverBuf.put(genData.getBuffer())[ FD ]
Line_9 $$ int leftOver = (int) (byteAm % bufferSize)-->Line_29 $$ if (leftOver > 0) [ FD ]
Line_29 $$ if (leftOver > 0) -->Line_52 $$ bytesWritten += buf.length[ CD ]
Line_29 $$ if (leftOver > 0) -->Line_45 $$ byte[] buf = leftOverBuf.array()[ CD ]
Line_30 $$ ByteBuffer leftOverBuf = ByteBuffer.wrap(new byte[leftOver])-->Line_41 $$ leftOverBuf.put(genData.getBuffer())[ FD ]
Line_29 $$ if (leftOver > 0) -->Line_32 $$ leftOver = leftOver - bytesLeft[ CD ]
Line_10 $$ long fullPieces = byteAm / bufferSize-->Line_14 $$ for (long i = 0; i < fullPieces; ++i) [ FD ]
Line_20 $$ long startTime = Timer.now()-->Line_25 $$ timeTaken += Timer.elapsed(startTime)[ FD ]
Line_6 $$ if (startPos < 0) -->Line_7 $$ startPos = 0[ CD ]
Line_2 $$ private GenerateOutput writePieces(long byteAm, long startPos, DataHasher hasher, OutputStream out) throws IOException -->Line_3 $$ if (byteAm <= 0) [ CD ]
Line_48 $$ if (Constants.FLUSH_WRITES) -->Line_49 $$ out.flush()[ CD ]
Line_15 $$ GenerateResult genData = generateFullSegment(bufferSize, offset, hasher)-->Line_36 $$ leftOverBuf.put(genData.getBuffer())[ FD ]
Line_29 $$ if (leftOver > 0) -->Line_31 $$ int bytesLeft = leftOver % BYTES_PER_LONG[ CD ]
Line_38 $$ if (bytesLeft > 0) -->Line_40 $$ offset = genData.getOffset()[ CD ]
Line_25 $$ timeTaken += Timer.elapsed(startTime)-->Line_51 $$ timeTaken += Timer.elapsed(startTime)[ FD ]
Line_38 $$ if (bytesLeft > 0) -->Line_39 $$ GenerateResult genData = generatePartialSegment(bytesLeft, offset, hasher)[ CD ]
Line_32 $$ leftOver = leftOver - bytesLeft-->Line_33 $$ if (leftOver > 0) [ FD ]
Line_34 $$ GenerateResult genData = generateFullSegment(leftOver, offset, hasher)-->Line_41 $$ leftOverBuf.put(genData.getBuffer())[ FD ]
Line_11 $$ long offset = startPos-->Line_35 $$ offset = genData.getOffset()[ FD ]
Line_3 $$ if (byteAm <= 0) -->Line_4 $$ return new GenerateOutput(0, 0)[ CD ]
Line_2 $$ private GenerateOutput writePieces(long byteAm, long startPos, DataHasher hasher, OutputStream out) throws IOException -->Line_15 $$ GenerateResult genData = generateFullSegment(bufferSize, offset, hasher)[ FD ]
Line_14 $$ for (long i = 0; i < fullPieces; ++i) -->Line_21 $$ out.write(buf)[ CD ]
Line_2 $$ private GenerateOutput writePieces(long byteAm, long startPos, DataHasher hasher, OutputStream out) throws IOException -->Line_14 $$ for (long i = 0; i < fullPieces; ++i) [ CD ]
Line_2 $$ private GenerateOutput writePieces(long byteAm, long startPos, DataHasher hasher, OutputStream out) throws IOException -->Line_21 $$ out.write(buf)[ FD ]
Line_13 $$ long timeTaken = 0-->Line_51 $$ timeTaken += Timer.elapsed(startTime)[ FD ]
Line_16 $$ offset = genData.getOffset()-->Line_40 $$ offset = genData.getOffset()[ FD ]
Line_17 $$ ByteBuffer gBuf = genData.getBuffer()-->Line_19 $$ byte[] buf = gBuf.array()[ FD ]
Line_9 $$ int leftOver = (int) (byteAm % bufferSize)-->Line_33 $$ if (leftOver > 0) [ FD ]
Line_31 $$ int bytesLeft = leftOver % BYTES_PER_LONG-->Line_38 $$ if (bytesLeft > 0) [ FD ]
Line_15 $$ GenerateResult genData = generateFullSegment(bufferSize, offset, hasher)-->Line_41 $$ leftOverBuf.put(genData.getBuffer())[ FD ]
Line_33 $$ if (leftOver > 0) -->Line_35 $$ offset = genData.getOffset()[ CD ]
Line_2 $$ private GenerateOutput writePieces(long byteAm, long startPos, DataHasher hasher, OutputStream out) throws IOException -->Line_10 $$ long fullPieces = byteAm / bufferSize[ CD ]
Line_9 $$ int leftOver = (int) (byteAm % bufferSize)-->Line_34 $$ GenerateResult genData = generateFullSegment(leftOver, offset, hasher)[ FD ]
Line_15 $$ GenerateResult genData = generateFullSegment(bufferSize, offset, hasher)-->Line_40 $$ offset = genData.getOffset()[ FD ]
Line_11 $$ long offset = startPos-->Line_40 $$ offset = genData.getOffset()[ FD ]
Line_30 $$ ByteBuffer leftOverBuf = ByteBuffer.wrap(new byte[leftOver])-->Line_43 $$ leftOverBuf.rewind()[ FD ]
Line_14 $$ for (long i = 0; i < fullPieces; ++i) -->Line_25 $$ timeTaken += Timer.elapsed(startTime)[ CD ]
Line_2 $$ private GenerateOutput writePieces(long byteAm, long startPos, DataHasher hasher, OutputStream out) throws IOException -->Line_49 $$ out.flush()[ FD ]
Line_31 $$ int bytesLeft = leftOver % BYTES_PER_LONG-->Line_39 $$ GenerateResult genData = generatePartialSegment(bytesLeft, offset, hasher)[ FD ]
Line_9 $$ int leftOver = (int) (byteAm % bufferSize)-->Line_32 $$ leftOver = leftOver - bytesLeft[ FD ]
Line_14 $$ for (long i = 0; i < fullPieces; ++i) -->Line_15 $$ GenerateResult genData = generateFullSegment(bufferSize, offset, hasher)[ CD ]
Line_15 $$ GenerateResult genData = generateFullSegment(bufferSize, offset, hasher)-->Line_35 $$ offset = genData.getOffset()[ FD ]
Line_2 $$ private GenerateOutput writePieces(long byteAm, long startPos, DataHasher hasher, OutputStream out) throws IOException -->Line_13 $$ long timeTaken = 0[ CD ]
