Line_3 $$ if (CharsetToolkit.hasUTF8Bom(content)) -->Line_4 $$ return CharsetToolkit.UTF8[ CD ]
Line_6 $$ ByteBuffer bytes = ByteBuffer.wrap(content, 0, Math.min(256, content.length))-->Line_7 $$ String decoded = CharsetToolkit.UTF8_CHARSET.decode(bytes).toString()[ FD ]
Line_2 $$ public String getCharset(@NotNull VirtualFile file, @NotNull byte[] content) -->Line_3 $$ if (CharsetToolkit.hasUTF8Bom(content)) [ FD ]
Line_2 $$ public String getCharset(@NotNull VirtualFile file, @NotNull byte[] content) -->Line_3 $$ if (CharsetToolkit.hasUTF8Bom(content)) [ CD ]
Line_2 $$ public String getCharset(@NotNull VirtualFile file, @NotNull byte[] content) -->Line_6 $$ ByteBuffer bytes = ByteBuffer.wrap(content, 0, Math.min(256, content.length))[ FD ]
Line_2 $$ public String getCharset(@NotNull VirtualFile file, @NotNull byte[] content) -->Line_7 $$ String decoded = CharsetToolkit.UTF8_CHARSET.decode(bytes).toString()[ CD ]
Line_2 $$ public String getCharset(@NotNull VirtualFile file, @NotNull byte[] content) -->Line_8 $$ return getCharsetFromEncodingDeclaration(StringUtil.convertLineSeparators(decoded))[ CD ]
Line_7 $$ String decoded = CharsetToolkit.UTF8_CHARSET.decode(bytes).toString()-->Line_8 $$ return getCharsetFromEncodingDeclaration(StringUtil.convertLineSeparators(decoded))[ FD ]
Line_2 $$ public String getCharset(@NotNull VirtualFile file, @NotNull byte[] content) -->Line_6 $$ ByteBuffer bytes = ByteBuffer.wrap(content, 0, Math.min(256, content.length))[ CD ]
