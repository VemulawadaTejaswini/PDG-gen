Line_8 $$ cluster = new Cluster(conf)-->Line_26 $$ Token t = cluster.getDelegationToken(new Text(" "))[ FD ]
Line_8 $$ cluster = new Cluster(conf)-->Line_9 $$ YARNRunner yrunner = (YARNRunner) cluster.getClient()[ FD ]
Line_11 $$ org.apache.hadoop.yarn.api.records.Token rmDTToken = recordFactory.newRecordInstance(org.apache.hadoop.yarn.api.records.Token.class)-->Line_16 $$ getDTResponse.setRMDelegationToken(rmDTToken)[ FD ]
Line_9 $$ YARNRunner yrunner = (YARNRunner) cluster.getClient()-->Line_25 $$ yrunner.setResourceMgrDelegate(rmgrDelegate)[ FD ]
Line_11 $$ org.apache.hadoop.yarn.api.records.Token rmDTToken = recordFactory.newRecordInstance(org.apache.hadoop.yarn.api.records.Token.class)-->Line_12 $$ rmDTToken.setIdentifier(ByteBuffer.wrap(new byte[2]))[ FD ]
Line_17 $$ final ApplicationClientProtocol cRMProtocol = mock(ApplicationClientProtocol.class)-->Line_22 $$ ((YarnClientImpl) this.client).setRMClient(cRMProtocol)[ FD ]
Line_3 $$ Configuration conf = new Configuration(false)-->Line_6 $$ conf = new Configuration()[ FD ]
Line_4 $$ Cluster cluster = null-->Line_26 $$ Token t = cluster.getDelegationToken(new Text(" "))[ FD ]
Line_4 $$ Cluster cluster = null-->Line_9 $$ YARNRunner yrunner = (YARNRunner) cluster.getClient()[ FD ]
Line_19 $$ ResourceMgrDelegate rmgrDelegate = new ResourceMgrDelegate(new YarnConfiguration(conf)) -->Line_21 $$ assertTrue(this.client instanceof YarnClientImpl)[ CD ]
Line_2 $$ public void testClusterGetDelegationToken() throws Exception -->Line_4 $$ Cluster cluster = null[ CD ]
Line_4 $$ Cluster cluster = null-->Line_8 $$ cluster = new Cluster(conf)[ FD ]
Line_8 $$ cluster = new Cluster(conf)-->Line_29 $$ if (cluster != null) [ FD ]
Line_6 $$ conf = new Configuration()-->Line_7 $$ conf.set(MRConfig.FRAMEWORK_NAME, MRConfig.YARN_FRAMEWORK_NAME)[ FD ]
Line_17 $$ final ApplicationClientProtocol cRMProtocol = mock(ApplicationClientProtocol.class)-->Line_18 $$ when(cRMProtocol.getDelegationToken(any(GetDelegationTokenRequest.class))).thenReturn(getDTResponse)[ FD ]
Line_29 $$ if (cluster != null) -->Line_30 $$ cluster.close()[ CD ]
Line_10 $$ GetDelegationTokenResponse getDTResponse = recordFactory.newRecordInstance(GetDelegationTokenResponse.class)-->Line_18 $$ when(cRMProtocol.getDelegationToken(any(GetDelegationTokenRequest.class))).thenReturn(getDTResponse)[ FD ]
Line_4 $$ Cluster cluster = null-->Line_30 $$ cluster.close()[ FD ]
Line_11 $$ org.apache.hadoop.yarn.api.records.Token rmDTToken = recordFactory.newRecordInstance(org.apache.hadoop.yarn.api.records.Token.class)-->Line_15 $$ rmDTToken.setService("0.0.0.0:8032")[ FD ]
Line_11 $$ org.apache.hadoop.yarn.api.records.Token rmDTToken = recordFactory.newRecordInstance(org.apache.hadoop.yarn.api.records.Token.class)-->Line_14 $$ rmDTToken.setPassword(ByteBuffer.wrap("testcluster".getBytes()))[ FD ]
Line_10 $$ GetDelegationTokenResponse getDTResponse = recordFactory.newRecordInstance(GetDelegationTokenResponse.class)-->Line_16 $$ getDTResponse.setRMDelegationToken(rmDTToken)[ FD ]
Line_2 $$ public void testClusterGetDelegationToken() throws Exception -->Line_3 $$ Configuration conf = new Configuration(false)[ CD ]
Line_19 $$ ResourceMgrDelegate rmgrDelegate = new ResourceMgrDelegate(new YarnConfiguration(conf)) -->Line_25 $$ yrunner.setResourceMgrDelegate(rmgrDelegate)[ FD ]
Line_19 $$ ResourceMgrDelegate rmgrDelegate = new ResourceMgrDelegate(new YarnConfiguration(conf)) -->Line_22 $$ ((YarnClientImpl) this.client).setRMClient(cRMProtocol)[ CD ]
Line_8 $$ cluster = new Cluster(conf)-->Line_30 $$ cluster.close()[ FD ]
Line_3 $$ Configuration conf = new Configuration(false)-->Line_7 $$ conf.set(MRConfig.FRAMEWORK_NAME, MRConfig.YARN_FRAMEWORK_NAME)[ FD ]
Line_4 $$ Cluster cluster = null-->Line_29 $$ if (cluster != null) [ FD ]
Line_11 $$ org.apache.hadoop.yarn.api.records.Token rmDTToken = recordFactory.newRecordInstance(org.apache.hadoop.yarn.api.records.Token.class)-->Line_13 $$ rmDTToken.setKind("Testclusterkind")[ FD ]
