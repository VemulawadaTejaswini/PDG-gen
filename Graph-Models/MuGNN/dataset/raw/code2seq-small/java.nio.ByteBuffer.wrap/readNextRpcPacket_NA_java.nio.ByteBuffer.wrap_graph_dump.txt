Line_12 $$ if (headerBuilder.getCallId() == AuthProtocol.SASL.callId) -->Line_14 $$ saslMessage.mergeDelimitedFrom(bis)[ CD ]
Line_21 $$ token = saslClient.unwrap(token, 0, token.length)-->Line_22 $$ unwrappedRpcBuffer = ByteBuffer.wrap(token)[ FD ]
Line_9 $$ RpcResponseHeaderProto.Builder headerBuilder = RpcResponseHeaderProto.newBuilder()-->Line_10 $$ headerBuilder.mergeDelimitedFrom(bis)[ FD ]
Line_2 $$ private void readNextRpcPacket() throws IOException -->Line_7 $$ dis.readFully(rpcBuf)[ CD ]
Line_15 $$ if (saslMessage.getState() == SaslState.WRAP) -->Line_22 $$ unwrappedRpcBuffer = ByteBuffer.wrap(token)[ CD ]
Line_4 $$ DataInputStream dis = new DataInputStream(in)-->Line_7 $$ dis.readFully(rpcBuf)[ FD ]
Line_15 $$ if (saslMessage.getState() == SaslState.WRAP) -->Line_21 $$ token = saslClient.unwrap(token, 0, token.length)[ CD ]
Line_13 $$ RpcSaslProto.Builder saslMessage = RpcSaslProto.newBuilder()-->Line_15 $$ if (saslMessage.getState() == SaslState.WRAP) [ FD ]
Line_18 $$ if (LOG.isDebugEnabled()) -->Line_19 $$ LOG.debug("unwrapping token of length:" + token.length)[ CD ]
Line_13 $$ RpcSaslProto.Builder saslMessage = RpcSaslProto.newBuilder()-->Line_17 $$ byte[] token = saslMessage.getToken().toByteArray()[ FD ]
Line_2 $$ private void readNextRpcPacket() throws IOException -->Line_11 $$ boolean isWrapped = false[ CD ]
Line_4 $$ DataInputStream dis = new DataInputStream(in)-->Line_5 $$ int rpcLen = dis.readInt()[ FD ]
Line_2 $$ private void readNextRpcPacket() throws IOException -->Line_3 $$ LOG.debug("reading next wrapped RPC packet")[ CD ]
Line_8 $$ ByteArrayInputStream bis = new ByteArrayInputStream(rpcBuf)-->Line_10 $$ headerBuilder.mergeDelimitedFrom(bis)[ FD ]
Line_12 $$ if (headerBuilder.getCallId() == AuthProtocol.SASL.callId) -->Line_15 $$ if (saslMessage.getState() == SaslState.WRAP) [ CD ]
Line_15 $$ if (saslMessage.getState() == SaslState.WRAP) -->Line_17 $$ byte[] token = saslMessage.getToken().toByteArray()[ CD ]
Line_11 $$ boolean isWrapped = false-->Line_25 $$ if (!isWrapped) [ FD ]
Line_12 $$ if (headerBuilder.getCallId() == AuthProtocol.SASL.callId) -->Line_13 $$ RpcSaslProto.Builder saslMessage = RpcSaslProto.newBuilder()[ CD ]
Line_2 $$ private void readNextRpcPacket() throws IOException -->Line_10 $$ headerBuilder.mergeDelimitedFrom(bis)[ CD ]
Line_6 $$ byte[] rpcBuf = new byte[rpcLen]-->Line_7 $$ dis.readFully(rpcBuf)[ FD ]
Line_2 $$ private void readNextRpcPacket() throws IOException -->Line_5 $$ int rpcLen = dis.readInt()[ CD ]
Line_2 $$ private void readNextRpcPacket() throws IOException -->Line_6 $$ byte[] rpcBuf = new byte[rpcLen][ CD ]
Line_15 $$ if (saslMessage.getState() == SaslState.WRAP) -->Line_18 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_15 $$ if (saslMessage.getState() == SaslState.WRAP) -->Line_16 $$ isWrapped = true[ CD ]
Line_2 $$ private void readNextRpcPacket() throws IOException -->Line_25 $$ if (!isWrapped) [ CD ]
Line_17 $$ byte[] token = saslMessage.getToken().toByteArray()-->Line_22 $$ unwrappedRpcBuffer = ByteBuffer.wrap(token)[ FD ]
Line_2 $$ private void readNextRpcPacket() throws IOException -->Line_4 $$ DataInputStream dis = new DataInputStream(in)[ CD ]
Line_2 $$ private void readNextRpcPacket() throws IOException -->Line_8 $$ ByteArrayInputStream bis = new ByteArrayInputStream(rpcBuf)[ CD ]
Line_11 $$ boolean isWrapped = false-->Line_16 $$ isWrapped = true[ FD ]
Line_9 $$ RpcResponseHeaderProto.Builder headerBuilder = RpcResponseHeaderProto.newBuilder()-->Line_12 $$ if (headerBuilder.getCallId() == AuthProtocol.SASL.callId) [ FD ]
Line_17 $$ byte[] token = saslMessage.getToken().toByteArray()-->Line_21 $$ token = saslClient.unwrap(token, 0, token.length)[ FD ]
Line_13 $$ RpcSaslProto.Builder saslMessage = RpcSaslProto.newBuilder()-->Line_14 $$ saslMessage.mergeDelimitedFrom(bis)[ FD ]
Line_16 $$ isWrapped = true-->Line_25 $$ if (!isWrapped) [ FD ]
Line_8 $$ ByteArrayInputStream bis = new ByteArrayInputStream(rpcBuf)-->Line_14 $$ saslMessage.mergeDelimitedFrom(bis)[ FD ]
Line_2 $$ private void readNextRpcPacket() throws IOException -->Line_9 $$ RpcResponseHeaderProto.Builder headerBuilder = RpcResponseHeaderProto.newBuilder()[ CD ]
Line_2 $$ private void readNextRpcPacket() throws IOException -->Line_12 $$ if (headerBuilder.getCallId() == AuthProtocol.SASL.callId) [ CD ]
