Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_6 $$ int rows = 40[ CD ]
Line_30 $$ SSTableReader sstable2 = unrepaired.manifest.generations[1].get(0)-->Line_40 $$ unrepaired.removeSSTable(sstable2)[ FD ]
Line_9 $$ UpdateBuilder update = UpdateBuilder.create(cfs.metadata, String.valueOf(r))-->Line_10 $$ update.newRow("column" + c).add("val", value)[ FD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_22 $$ assertEquals(2, unrepaired.manifest.getLevelCount())[ CD ]
Line_20 $$ LeveledCompactionStrategy unrepaired = (LeveledCompactionStrategy) strategies.get(1)-->Line_40 $$ unrepaired.removeSSTable(sstable2)[ FD ]
Line_6 $$ int rows = 40-->Line_8 $$ for (int r = 0; r < rows; r++) [ FD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_3 $$ byte[] b = new byte[100 * 1024][ CD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_17 $$ CompactionStrategyManager strategy = cfs.getCompactionStrategyManager()[ CD ]
Line_17 $$ CompactionStrategyManager strategy = cfs.getCompactionStrategyManager()-->Line_23 $$ assertTrue(strategy.getSSTableCountPerLevel()[1] > 0)[ FD ]
Line_26 $$ int sstableCount = 0-->Line_28 $$ assertEquals(sstableCount, cfs.getLiveSSTables().size())[ FD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_21 $$ assertEquals(0, repaired.manifest.getLevelCount())[ CD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_28 $$ assertEquals(sstableCount, cfs.getLiveSSTables().size())[ CD ]
Line_27 $$ sstableCount += level.size()-->Line_28 $$ assertEquals(sstableCount, cfs.getLiveSSTables().size())[ FD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_33 $$ assertTrue(sstable1.isRepaired())[ CD ]
Line_35 $$ int repairedSSTableCount = 0-->Line_36 $$ repairedSSTableCount += level.size()[ FD ]
Line_27 $$ for (List<SSTableReader> level : unrepaired.manifest.generations) sstableCount += level.size()-->Line_36 $$ repairedSSTableCount += level.size()[ FD ]
Line_17 $$ CompactionStrategyManager strategy = cfs.getCompactionStrategyManager()-->Line_41 $$ strategy.handleNotification(new SSTableAddedNotification(Collections.singleton(sstable2)), this)[ FD ]
Line_30 $$ SSTableReader sstable2 = unrepaired.manifest.generations[1].get(0)-->Line_42 $$ assertTrue(unrepaired.manifest.getLevel(1).contains(sstable2))[ FD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_19 $$ LeveledCompactionStrategy repaired = (LeveledCompactionStrategy) strategies.get(0)[ CD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_20 $$ LeveledCompactionStrategy unrepaired = (LeveledCompactionStrategy) strategies.get(1)[ CD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_35 $$ int repairedSSTableCount = 0[ CD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_7 $$ int columns = 20[ CD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_4 $$ new Random().nextBytes(b)[ CD ]
Line_9 $$ UpdateBuilder update = UpdateBuilder.create(cfs.metadata, String.valueOf(r))-->Line_11 $$ update.applyUnsafe()[ FD ]
Line_5 $$ ByteBuffer value = ByteBuffer.wrap(b)-->Line_10 $$ update.newRow("column" + c).add("val", value)[ FD ]
Line_17 $$ CompactionStrategyManager strategy = cfs.getCompactionStrategyManager()-->Line_18 $$ List<AbstractCompactionStrategy> strategies = strategy.getStrategies()[ FD ]
Line_18 $$ List<AbstractCompactionStrategy> strategies = strategy.getStrategies()-->Line_20 $$ LeveledCompactionStrategy unrepaired = (LeveledCompactionStrategy) strategies.get(1)[ FD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_31 $$ sstable1.descriptor.getMetadataSerializer().mutateRepairedAt(sstable1.descriptor, System.currentTimeMillis())[ CD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_26 $$ int sstableCount = 0[ CD ]
Line_36 $$ repairedSSTableCount += level.size()-->Line_37 $$ assertEquals(1, repairedSSTableCount)[ FD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_38 $$ assertTrue(repaired.manifest.generations[2].contains(sstable1))[ CD ]
Line_29 $$ SSTableReader sstable1 = unrepaired.manifest.generations[2].get(0)-->Line_39 $$ assertFalse(unrepaired.manifest.generations[2].contains(sstable1))[ FD ]
Line_7 $$ int columns = 20-->Line_10 $$ for (int c = 0; c < columns; c++) update.newRow("column" + c).add("val", value)[ FD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_16 $$ while (CompactionManager.instance.isCompacting(Arrays.asList(cfs))) Thread.sleep(100)[ CD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_15 $$ cfs.disableAutoCompaction()[ CD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_41 $$ strategy.handleNotification(new SSTableAddedNotification(Collections.singleton(sstable2)), this)[ CD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_30 $$ SSTableReader sstable2 = unrepaired.manifest.generations[1].get(0)[ CD ]
Line_3 $$ byte[] b = new byte[100 * 1024]-->Line_5 $$ ByteBuffer value = ByteBuffer.wrap(b)[ FD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_34 $$ strategy.handleNotification(new SSTableRepairStatusChanged(Arrays.asList(sstable1)), this)[ CD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_5 $$ ByteBuffer value = ByteBuffer.wrap(b)[ CD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_14 $$ waitForLeveling(cfs)[ CD ]
Line_8 $$ for (int r = 0; r < rows; r++) -->Line_11 $$ update.applyUnsafe()[ CD ]
Line_18 $$ List<AbstractCompactionStrategy> strategies = strategy.getStrategies()-->Line_19 $$ LeveledCompactionStrategy repaired = (LeveledCompactionStrategy) strategies.get(0)[ FD ]
Line_8 $$ for (int r = 0; r < rows; r++) -->Line_12 $$ cfs.forceBlockingFlush()[ CD ]
Line_17 $$ CompactionStrategyManager strategy = cfs.getCompactionStrategyManager()-->Line_24 $$ assertTrue(strategy.getSSTableCountPerLevel()[2] > 0)[ FD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_29 $$ SSTableReader sstable1 = unrepaired.manifest.generations[2].get(0)[ CD ]
Line_29 $$ SSTableReader sstable1 = unrepaired.manifest.generations[2].get(0)-->Line_38 $$ assertTrue(repaired.manifest.generations[2].contains(sstable1))[ FD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_23 $$ assertTrue(strategy.getSSTableCountPerLevel()[1] > 0)[ CD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_8 $$ for (int r = 0; r < rows; r++) [ CD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_43 $$ assertFalse(repaired.manifest.getLevel(1).contains(sstable2))[ CD ]
Line_30 $$ SSTableReader sstable2 = unrepaired.manifest.generations[1].get(0)-->Line_41 $$ strategy.handleNotification(new SSTableAddedNotification(Collections.singleton(sstable2)), this)[ FD ]
Line_17 $$ CompactionStrategyManager strategy = cfs.getCompactionStrategyManager()-->Line_34 $$ strategy.handleNotification(new SSTableRepairStatusChanged(Arrays.asList(sstable1)), this)[ FD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_40 $$ unrepaired.removeSSTable(sstable2)[ CD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_32 $$ sstable1.reloadSSTableMetadata()[ CD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_24 $$ assertTrue(strategy.getSSTableCountPerLevel()[2] > 0)[ CD ]
Line_30 $$ SSTableReader sstable2 = unrepaired.manifest.generations[1].get(0)-->Line_43 $$ assertFalse(repaired.manifest.getLevel(1).contains(sstable2))[ FD ]
Line_8 $$ for (int r = 0; r < rows; r++) -->Line_9 $$ UpdateBuilder update = UpdateBuilder.create(cfs.metadata, String.valueOf(r))[ CD ]
Line_29 $$ SSTableReader sstable1 = unrepaired.manifest.generations[2].get(0)-->Line_33 $$ assertTrue(sstable1.isRepaired())[ FD ]
Line_3 $$ byte[] b = new byte[100 * 1024]-->Line_4 $$ new Random().nextBytes(b)[ FD ]
Line_29 $$ SSTableReader sstable1 = unrepaired.manifest.generations[2].get(0)-->Line_32 $$ sstable1.reloadSSTableMetadata()[ FD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_39 $$ assertFalse(unrepaired.manifest.generations[2].contains(sstable1))[ CD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_18 $$ List<AbstractCompactionStrategy> strategies = strategy.getStrategies()[ CD ]
Line_35 $$ int repairedSSTableCount = 0-->Line_37 $$ assertEquals(1, repairedSSTableCount)[ FD ]
Line_8 $$ for (int r = 0; r < rows; r++) -->Line_9 $$ UpdateBuilder update = UpdateBuilder.create(cfs.metadata, String.valueOf(r))[ FD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_37 $$ assertEquals(1, repairedSSTableCount)[ CD ]
Line_8 $$ for (int r = 0; r < rows; r++) -->Line_10 $$ for (int c = 0; c < columns; c++) update.newRow("column" + c).add("val", value)[ CD ]
Line_2 $$ public void testNewRepairedSSTable() throws Exception -->Line_42 $$ assertTrue(unrepaired.manifest.getLevel(1).contains(sstable2))[ CD ]
Line_26 $$ int sstableCount = 0-->Line_27 $$ sstableCount += level.size()[ FD ]
Line_29 $$ SSTableReader sstable1 = unrepaired.manifest.generations[2].get(0)-->Line_34 $$ strategy.handleNotification(new SSTableRepairStatusChanged(Arrays.asList(sstable1)), this)[ FD ]
