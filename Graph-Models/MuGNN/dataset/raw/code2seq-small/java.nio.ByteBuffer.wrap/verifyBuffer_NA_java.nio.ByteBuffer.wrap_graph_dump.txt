Line_14 $$ hashOffset += BYTES_PER_LONG-->Line_27 $$ long expected = hasher.generate(hashOffset)[ FD ]
Line_22 $$ if (cmpBuf.hasRemaining() && cmpBuf.position() != 0) -->Line_31 $$ while (tempBuf.hasRemaining()) [ CD ]
Line_28 $$ ByteBuffer tempBuf = ByteBuffer.wrap(new byte[BYTES_PER_LONG])-->Line_31 $$ while (tempBuf.hasRemaining()) [ FD ]
Line_6 $$ long chunksDifferent = 0-->Line_39 $$ ++chunksDifferent[ FD ]
Line_3 $$ ByteBuffer cmpBuf = ByteBuffer.wrap(new byte[BYTES_PER_LONG])-->Line_11 $$ long receivedData = cmpBuf.getLong()[ FD ]
Line_13 $$ long expected = hasher.generate(hashOffset)-->Line_15 $$ if (receivedData == expected) [ FD ]
Line_6 $$ long chunksDifferent = 0-->Line_18 $$ ++chunksDifferent[ FD ]
Line_3 $$ ByteBuffer cmpBuf = ByteBuffer.wrap(new byte[BYTES_PER_LONG])-->Line_23 $$ int curSize = cmpBuf.position()[ FD ]
Line_3 $$ ByteBuffer cmpBuf = ByteBuffer.wrap(new byte[BYTES_PER_LONG])-->Line_24 $$ while (cmpBuf.hasRemaining()) [ FD ]
Line_2 $$ private VerifyInfo verifyBuffer(ByteBuffer buf, int size, long startOffset, DataHasher hasher) -->Line_7 $$ for (long i = 0; i < size; ++i) [ CD ]
Line_22 $$ if (cmpBuf.hasRemaining() && cmpBuf.position() != 0) -->Line_29 $$ tempBuf.putLong(expected)[ CD ]
Line_9 $$ if (!cmpBuf.hasRemaining()) -->Line_15 $$ if (receivedData == expected) [ CD ]
Line_36 $$ if (cmpBuf.equals(tempBuf)) -->Line_37 $$ ++chunksSame[ CD ]
Line_22 $$ if (cmpBuf.hasRemaining() && cmpBuf.position() != 0) -->Line_36 $$ if (cmpBuf.equals(tempBuf)) [ CD ]
Line_15 $$ if (receivedData == expected) -->Line_16 $$ ++chunksSame[ CD ]
Line_22 $$ if (cmpBuf.hasRemaining() && cmpBuf.position() != 0) -->Line_23 $$ int curSize = cmpBuf.position()[ CD ]
Line_24 $$ while (cmpBuf.hasRemaining()) -->Line_25 $$ cmpBuf.put((byte) 0)[ CD ]
Line_31 $$ while (tempBuf.hasRemaining()) -->Line_32 $$ tempBuf.put((byte) 0)[ CD ]
Line_28 $$ ByteBuffer tempBuf = ByteBuffer.wrap(new byte[BYTES_PER_LONG])-->Line_35 $$ tempBuf.rewind()[ FD ]
Line_28 $$ ByteBuffer tempBuf = ByteBuffer.wrap(new byte[BYTES_PER_LONG])-->Line_32 $$ tempBuf.put((byte) 0)[ FD ]
Line_2 $$ private VerifyInfo verifyBuffer(ByteBuffer buf, int size, long startOffset, DataHasher hasher) -->Line_13 $$ long expected = hasher.generate(hashOffset)[ FD ]
Line_22 $$ if (cmpBuf.hasRemaining() && cmpBuf.position() != 0) -->Line_24 $$ while (cmpBuf.hasRemaining()) [ CD ]
Line_3 $$ ByteBuffer cmpBuf = ByteBuffer.wrap(new byte[BYTES_PER_LONG])-->Line_22 $$ if (cmpBuf.hasRemaining() && cmpBuf.position() != 0) [ FD ]
Line_28 $$ ByteBuffer tempBuf = ByteBuffer.wrap(new byte[BYTES_PER_LONG])-->Line_30 $$ tempBuf.position(curSize)[ FD ]
Line_4 $$ long hashOffset = startOffset-->Line_13 $$ long expected = hasher.generate(hashOffset)[ FD ]
Line_4 $$ long hashOffset = startOffset-->Line_14 $$ hashOffset += BYTES_PER_LONG[ FD ]
Line_9 $$ if (!cmpBuf.hasRemaining()) -->Line_12 $$ cmpBuf.rewind()[ CD ]
Line_13 $$ long expected = hasher.generate(hashOffset)-->Line_29 $$ tempBuf.putLong(expected)[ FD ]
Line_9 $$ if (!cmpBuf.hasRemaining()) -->Line_13 $$ long expected = hasher.generate(hashOffset)[ CD ]
Line_14 $$ hashOffset += BYTES_PER_LONG-->Line_13 $$ long expected = hasher.generate(hashOffset)[ FD ]
Line_2 $$ private VerifyInfo verifyBuffer(ByteBuffer buf, int size, long startOffset, DataHasher hasher) -->Line_6 $$ long chunksDifferent = 0[ CD ]
Line_3 $$ ByteBuffer cmpBuf = ByteBuffer.wrap(new byte[BYTES_PER_LONG])-->Line_36 $$ if (cmpBuf.equals(tempBuf)) [ FD ]
Line_22 $$ if (cmpBuf.hasRemaining() && cmpBuf.position() != 0) -->Line_28 $$ ByteBuffer tempBuf = ByteBuffer.wrap(new byte[BYTES_PER_LONG])[ CD ]
Line_3 $$ ByteBuffer cmpBuf = ByteBuffer.wrap(new byte[BYTES_PER_LONG])-->Line_25 $$ cmpBuf.put((byte) 0)[ FD ]
Line_2 $$ private VerifyInfo verifyBuffer(ByteBuffer buf, int size, long startOffset, DataHasher hasher) -->Line_3 $$ ByteBuffer cmpBuf = ByteBuffer.wrap(new byte[BYTES_PER_LONG])[ CD ]
Line_27 $$ long expected = hasher.generate(hashOffset)-->Line_29 $$ tempBuf.putLong(expected)[ FD ]
Line_22 $$ if (cmpBuf.hasRemaining() && cmpBuf.position() != 0) -->Line_34 $$ cmpBuf.rewind()[ CD ]
Line_15 $$ if (receivedData == expected) -->Line_18 $$ ++chunksDifferent[ CD ]
Line_2 $$ private VerifyInfo verifyBuffer(ByteBuffer buf, int size, long startOffset, DataHasher hasher) -->Line_27 $$ long expected = hasher.generate(hashOffset)[ FD ]
Line_22 $$ if (cmpBuf.hasRemaining() && cmpBuf.position() != 0) -->Line_30 $$ tempBuf.position(curSize)[ CD ]
Line_5 $$ long chunksSame = 0-->Line_37 $$ ++chunksSame[ FD ]
Line_2 $$ private VerifyInfo verifyBuffer(ByteBuffer buf, int size, long startOffset, DataHasher hasher) -->Line_7 $$ for (long i = 0; i < size; ++i) [ FD ]
Line_5 $$ long chunksSame = 0-->Line_16 $$ ++chunksSame[ FD ]
Line_2 $$ private VerifyInfo verifyBuffer(ByteBuffer buf, int size, long startOffset, DataHasher hasher) -->Line_22 $$ if (cmpBuf.hasRemaining() && cmpBuf.position() != 0) [ CD ]
Line_23 $$ int curSize = cmpBuf.position()-->Line_30 $$ tempBuf.position(curSize)[ FD ]
Line_7 $$ for (long i = 0; i < size; ++i) -->Line_8 $$ cmpBuf.put(buf.get())[ CD ]
Line_3 $$ ByteBuffer cmpBuf = ByteBuffer.wrap(new byte[BYTES_PER_LONG])-->Line_8 $$ cmpBuf.put(buf.get())[ FD ]
Line_3 $$ ByteBuffer cmpBuf = ByteBuffer.wrap(new byte[BYTES_PER_LONG])-->Line_9 $$ if (!cmpBuf.hasRemaining()) [ FD ]
Line_28 $$ ByteBuffer tempBuf = ByteBuffer.wrap(new byte[BYTES_PER_LONG])-->Line_36 $$ if (cmpBuf.equals(tempBuf)) [ FD ]
Line_4 $$ long hashOffset = startOffset-->Line_27 $$ long expected = hasher.generate(hashOffset)[ FD ]
Line_36 $$ if (cmpBuf.equals(tempBuf)) -->Line_39 $$ ++chunksDifferent[ CD ]
Line_22 $$ if (cmpBuf.hasRemaining() && cmpBuf.position() != 0) -->Line_27 $$ long expected = hasher.generate(hashOffset)[ CD ]
Line_7 $$ for (long i = 0; i < size; ++i) -->Line_9 $$ if (!cmpBuf.hasRemaining()) [ CD ]
Line_3 $$ ByteBuffer cmpBuf = ByteBuffer.wrap(new byte[BYTES_PER_LONG])-->Line_12 $$ cmpBuf.rewind()[ FD ]
Line_9 $$ if (!cmpBuf.hasRemaining()) -->Line_11 $$ long receivedData = cmpBuf.getLong()[ CD ]
Line_11 $$ long receivedData = cmpBuf.getLong()-->Line_15 $$ if (receivedData == expected) [ FD ]
Line_2 $$ private VerifyInfo verifyBuffer(ByteBuffer buf, int size, long startOffset, DataHasher hasher) -->Line_4 $$ long hashOffset = startOffset[ CD ]
Line_28 $$ ByteBuffer tempBuf = ByteBuffer.wrap(new byte[BYTES_PER_LONG])-->Line_29 $$ tempBuf.putLong(expected)[ FD ]
Line_9 $$ if (!cmpBuf.hasRemaining()) -->Line_10 $$ cmpBuf.rewind()[ CD ]
Line_2 $$ private VerifyInfo verifyBuffer(ByteBuffer buf, int size, long startOffset, DataHasher hasher) -->Line_42 $$ return new VerifyInfo(chunksSame, chunksDifferent)[ CD ]
Line_3 $$ ByteBuffer cmpBuf = ByteBuffer.wrap(new byte[BYTES_PER_LONG])-->Line_34 $$ cmpBuf.rewind()[ FD ]
Line_2 $$ private VerifyInfo verifyBuffer(ByteBuffer buf, int size, long startOffset, DataHasher hasher) -->Line_8 $$ cmpBuf.put(buf.get())[ FD ]
Line_22 $$ if (cmpBuf.hasRemaining() && cmpBuf.position() != 0) -->Line_35 $$ tempBuf.rewind()[ CD ]
Line_2 $$ private VerifyInfo verifyBuffer(ByteBuffer buf, int size, long startOffset, DataHasher hasher) -->Line_5 $$ long chunksSame = 0[ CD ]
Line_3 $$ ByteBuffer cmpBuf = ByteBuffer.wrap(new byte[BYTES_PER_LONG])-->Line_10 $$ cmpBuf.rewind()[ FD ]
Line_9 $$ if (!cmpBuf.hasRemaining()) -->Line_14 $$ hashOffset += BYTES_PER_LONG[ CD ]
