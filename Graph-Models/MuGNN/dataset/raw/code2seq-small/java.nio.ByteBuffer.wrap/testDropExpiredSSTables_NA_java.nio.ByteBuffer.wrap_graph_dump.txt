Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_9 $$ cfs.forceBlockingFlush()[ CD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_7 $$ DecoratedKey key = Util.dk(String.valueOf("expired"))[ CD ]
Line_7 $$ DecoratedKey key = Util.dk(String.valueOf("expired"))-->Line_8 $$ new RowUpdateBuilder(cfs.metadata, System.currentTimeMillis(), 1, key.getKey()).clustering("column").add("val", value).build().applyUnsafe()[ FD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_5 $$ cfs.disableAutoCompaction()[ CD ]
Line_4 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1)-->Line_15 $$ assertEquals(cfs.getLiveSSTables().size(), 2)[ FD ]
Line_3 $$ Keyspace keyspace = Keyspace.open(KEYSPACE1)-->Line_4 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1)[ FD ]
Line_16 $$ Map<String, String> options = new HashMap()-->Line_20 $$ options.put(DateTieredCompactionStrategyOptions.EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY, "0")[ FD ]
Line_16 $$ Map<String, String> options = new HashMap()-->Line_17 $$ options.put(DateTieredCompactionStrategyOptions.BASE_TIME_KEY, "30")[ FD ]
Line_10 $$ SSTableReader expiredSSTable = cfs.getLiveSSTables().iterator().next()-->Line_30 $$ assertEquals(sstable, expiredSSTable)[ FD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_20 $$ options.put(DateTieredCompactionStrategyOptions.EXPIRED_SSTABLE_CHECK_FREQUENCY_SECONDS_KEY, "0")[ CD ]
Line_4 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1)-->Line_32 $$ cfs.truncateBlocking()[ FD ]
Line_4 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1)-->Line_14 $$ cfs.forceBlockingFlush()[ FD ]
Line_7 $$ DecoratedKey key = Util.dk(String.valueOf("expired"))-->Line_13 $$ new RowUpdateBuilder(cfs.metadata, System.currentTimeMillis(), key.getKey()).clustering("column").add("val", value).build().applyUnsafe()[ FD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_18 $$ options.put(DateTieredCompactionStrategyOptions.TIMESTAMP_RESOLUTION_KEY, "MILLISECONDS")[ CD ]
Line_22 $$ for (SSTableReader sstable : cfs.getLiveSSTables()) dtcs.addSSTable(sstable)-->Line_30 $$ assertEquals(sstable, expiredSSTable)[ FD ]
Line_12 $$ key = Util.dk(String.valueOf("nonexpired"))-->Line_13 $$ new RowUpdateBuilder(cfs.metadata, System.currentTimeMillis(), key.getKey()).clustering("column").add("val", value).build().applyUnsafe()[ FD ]
Line_7 $$ DecoratedKey key = Util.dk(String.valueOf("expired"))-->Line_12 $$ key = Util.dk(String.valueOf("nonexpired"))[ FD ]
Line_4 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1)-->Line_22 $$ for (SSTableReader sstable : cfs.getLiveSSTables()) dtcs.addSSTable(sstable)[ FD ]
Line_4 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1)-->Line_9 $$ cfs.forceBlockingFlush()[ FD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_27 $$ assertNotNull(t)[ CD ]
Line_16 $$ Map<String, String> options = new HashMap()-->Line_19 $$ options.put(DateTieredCompactionStrategyOptions.MAX_SSTABLE_AGE_KEY, Double.toString((1d / (24 * 60 * 60))))[ FD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_29 $$ SSTableReader sstable = t.transaction.originals().iterator().next()[ CD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_21 $$ DateTieredCompactionStrategy dtcs = new DateTieredCompactionStrategy(cfs, options)[ CD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_25 $$ Thread.sleep(2000)[ CD ]
Line_21 $$ DateTieredCompactionStrategy dtcs = new DateTieredCompactionStrategy(cfs, options)-->Line_26 $$ AbstractCompactionTask t = dtcs.getNextBackgroundTask((int) (System.currentTimeMillis() / 1000))[ FD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_19 $$ options.put(DateTieredCompactionStrategyOptions.MAX_SSTABLE_AGE_KEY, Double.toString((1d / (24 * 60 * 60))))[ CD ]
Line_21 $$ DateTieredCompactionStrategy dtcs = new DateTieredCompactionStrategy(cfs, options)-->Line_24 $$ assertNull(dtcs.getNextBackgroundTask((int) (System.currentTimeMillis() / 1000)))[ FD ]
Line_21 $$ DateTieredCompactionStrategy dtcs = new DateTieredCompactionStrategy(cfs, options)-->Line_22 $$ dtcs.addSSTable(sstable)[ FD ]
Line_21 $$ DateTieredCompactionStrategy dtcs = new DateTieredCompactionStrategy(cfs, options)-->Line_23 $$ dtcs.startup()[ FD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_3 $$ Keyspace keyspace = Keyspace.open(KEYSPACE1)[ CD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_13 $$ new RowUpdateBuilder(cfs.metadata, System.currentTimeMillis(), key.getKey()).clustering("column").add("val", value).build().applyUnsafe()[ CD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_24 $$ assertNull(dtcs.getNextBackgroundTask((int) (System.currentTimeMillis() / 1000)))[ CD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_4 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1)[ CD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_14 $$ cfs.forceBlockingFlush()[ CD ]
Line_4 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1)-->Line_5 $$ cfs.disableAutoCompaction()[ FD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_11 $$ Thread.sleep(10)[ CD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_12 $$ key = Util.dk(String.valueOf("nonexpired"))[ CD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_16 $$ Map<String, String> options = new HashMap()[ CD ]
Line_26 $$ AbstractCompactionTask t = dtcs.getNextBackgroundTask((int) (System.currentTimeMillis() / 1000))-->Line_27 $$ assertNotNull(t)[ FD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_8 $$ new RowUpdateBuilder(cfs.metadata, System.currentTimeMillis(), 1, key.getKey()).clustering("column").add("val", value).build().applyUnsafe()[ CD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_17 $$ options.put(DateTieredCompactionStrategyOptions.BASE_TIME_KEY, "30")[ CD ]
Line_16 $$ Map<String, String> options = new HashMap()-->Line_18 $$ options.put(DateTieredCompactionStrategyOptions.TIMESTAMP_RESOLUTION_KEY, "MILLISECONDS")[ FD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_30 $$ assertEquals(sstable, expiredSSTable)[ CD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_15 $$ assertEquals(cfs.getLiveSSTables().size(), 2)[ CD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_31 $$ t.transaction.abort()[ CD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_23 $$ dtcs.startup()[ CD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_26 $$ AbstractCompactionTask t = dtcs.getNextBackgroundTask((int) (System.currentTimeMillis() / 1000))[ CD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_28 $$ assertEquals(1, Iterables.size(t.transaction.originals()))[ CD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_6 $$ ByteBuffer value = ByteBuffer.wrap(new byte[100])[ CD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_32 $$ cfs.truncateBlocking()[ CD ]
Line_6 $$ ByteBuffer value = ByteBuffer.wrap(new byte[100])-->Line_8 $$ new RowUpdateBuilder(cfs.metadata, System.currentTimeMillis(), 1, key.getKey()).clustering("column").add("val", value).build().applyUnsafe()[ FD ]
Line_4 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1)-->Line_10 $$ SSTableReader expiredSSTable = cfs.getLiveSSTables().iterator().next()[ FD ]
Line_2 $$ public void testDropExpiredSSTables() throws InterruptedException -->Line_10 $$ SSTableReader expiredSSTable = cfs.getLiveSSTables().iterator().next()[ CD ]
Line_6 $$ ByteBuffer value = ByteBuffer.wrap(new byte[100])-->Line_13 $$ new RowUpdateBuilder(cfs.metadata, System.currentTimeMillis(), key.getKey()).clustering("column").add("val", value).build().applyUnsafe()[ FD ]
