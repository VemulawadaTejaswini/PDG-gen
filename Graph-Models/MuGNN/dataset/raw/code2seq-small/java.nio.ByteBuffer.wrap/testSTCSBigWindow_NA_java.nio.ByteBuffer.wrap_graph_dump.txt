Line_2 $$ public void testSTCSBigWindow() -->Line_17 $$ for (int r = 0; r < numSSTables / 2; r++) [ CD ]
Line_3 $$ Keyspace keyspace = Keyspace.open(KEYSPACE1)-->Line_4 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1)[ FD ]
Line_4 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1)-->Line_25 $$ for (SSTableReader sstable : cfs.getSSTables(SSTableSet.CANONICAL)) dtcs.addSSTable(sstable)[ FD ]
Line_2 $$ public void testSTCSBigWindow() -->Line_8 $$ int numSSTables = 40[ CD ]
Line_7 $$ ByteBuffer value = ByteBuffer.wrap(new byte[100])-->Line_19 $$ new RowUpdateBuilder(cfs.metadata, timestamp, key.getKey()).clustering("column").add("val", value).build().applyUnsafe()[ FD ]
Line_12 $$ DecoratedKey key = Util.dk(String.valueOf(r))-->Line_13 $$ new RowUpdateBuilder(cfs.metadata, timestamp, key.getKey()).clustering("column").add("val", bigValue).build().applyUnsafe()[ FD ]
Line_2 $$ public void testSTCSBigWindow() -->Line_5 $$ cfs.disableAutoCompaction()[ CD ]
Line_4 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1)-->Line_20 $$ cfs.forceBlockingFlush()[ FD ]
Line_2 $$ public void testSTCSBigWindow() -->Line_22 $$ Map<String, String> options = new HashMap()[ CD ]
Line_10 $$ for (int r = 0; r < numSSTables / 2; r++) -->Line_18 $$ DecoratedKey key = Util.dk(String.valueOf(r))[ FD ]
Line_24 $$ DateTieredCompactionStrategy dtcs = new DateTieredCompactionStrategy(cfs, options)-->Line_26 $$ AbstractCompactionTask task = dtcs.getNextBackgroundTask(0)[ FD ]
Line_12 $$ DecoratedKey key = Util.dk(String.valueOf(r))-->Line_19 $$ new RowUpdateBuilder(cfs.metadata, timestamp, key.getKey()).clustering("column").add("val", value).build().applyUnsafe()[ FD ]
Line_17 $$ for (int r = 0; r < numSSTables / 2; r++) -->Line_18 $$ DecoratedKey key = Util.dk(String.valueOf(r))[ FD ]
Line_10 $$ for (int r = 0; r < numSSTables / 2; r++) -->Line_15 $$ cfs.forceBlockingFlush()[ CD ]
Line_2 $$ public void testSTCSBigWindow() -->Line_4 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1)[ CD ]
Line_2 $$ public void testSTCSBigWindow() -->Line_23 $$ options.put(SizeTieredCompactionStrategyOptions.MIN_SSTABLE_SIZE_KEY, "1")[ CD ]
Line_11 $$ for (int i = 0; i < 10; i++) -->Line_12 $$ DecoratedKey key = Util.dk(String.valueOf(r))[ CD ]
Line_17 $$ for (int r = 0; r < numSSTables / 2; r++) -->Line_18 $$ DecoratedKey key = Util.dk(String.valueOf(r))[ CD ]
Line_18 $$ DecoratedKey key = Util.dk(String.valueOf(r))-->Line_19 $$ new RowUpdateBuilder(cfs.metadata, timestamp, key.getKey()).clustering("column").add("val", value).build().applyUnsafe()[ FD ]
Line_17 $$ for (int r = 0; r < numSSTables / 2; r++) -->Line_20 $$ cfs.forceBlockingFlush()[ CD ]
Line_24 $$ DateTieredCompactionStrategy dtcs = new DateTieredCompactionStrategy(cfs, options)-->Line_25 $$ dtcs.addSSTable(sstable)[ FD ]
Line_10 $$ for (int r = 0; r < numSSTables / 2; r++) -->Line_11 $$ for (int i = 0; i < 10; i++) [ CD ]
Line_10 $$ for (int r = 0; r < numSSTables / 2; r++) -->Line_17 $$ for (int r = 0; r < numSSTables / 2; r++) [ FD ]
Line_2 $$ public void testSTCSBigWindow() -->Line_24 $$ DateTieredCompactionStrategy dtcs = new DateTieredCompactionStrategy(cfs, options)[ CD ]
Line_10 $$ for (int r = 0; r < numSSTables / 2; r++) -->Line_12 $$ DecoratedKey key = Util.dk(String.valueOf(r))[ FD ]
Line_4 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1)-->Line_5 $$ cfs.disableAutoCompaction()[ FD ]
Line_2 $$ public void testSTCSBigWindow() -->Line_28 $$ task.transaction.abort()[ CD ]
Line_2 $$ public void testSTCSBigWindow() -->Line_3 $$ Keyspace keyspace = Keyspace.open(KEYSPACE1)[ CD ]
Line_22 $$ Map<String, String> options = new HashMap()-->Line_23 $$ options.put(SizeTieredCompactionStrategyOptions.MIN_SSTABLE_SIZE_KEY, "1")[ FD ]
Line_2 $$ public void testSTCSBigWindow() -->Line_26 $$ AbstractCompactionTask task = dtcs.getNextBackgroundTask(0)[ CD ]
Line_2 $$ public void testSTCSBigWindow() -->Line_27 $$ assertEquals(20, task.transaction.originals().size())[ CD ]
Line_6 $$ ByteBuffer bigValue = ByteBuffer.wrap(new byte[10000])-->Line_13 $$ new RowUpdateBuilder(cfs.metadata, timestamp, key.getKey()).clustering("column").add("val", bigValue).build().applyUnsafe()[ FD ]
Line_4 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(CF_STANDARD1)-->Line_15 $$ cfs.forceBlockingFlush()[ FD ]
Line_2 $$ public void testSTCSBigWindow() -->Line_9 $$ long timestamp = System.currentTimeMillis()[ CD ]
Line_11 $$ for (int i = 0; i < 10; i++) -->Line_13 $$ new RowUpdateBuilder(cfs.metadata, timestamp, key.getKey()).clustering("column").add("val", bigValue).build().applyUnsafe()[ CD ]
Line_2 $$ public void testSTCSBigWindow() -->Line_6 $$ ByteBuffer bigValue = ByteBuffer.wrap(new byte[10000])[ CD ]
Line_2 $$ public void testSTCSBigWindow() -->Line_10 $$ for (int r = 0; r < numSSTables / 2; r++) [ CD ]
Line_17 $$ for (int r = 0; r < numSSTables / 2; r++) -->Line_19 $$ new RowUpdateBuilder(cfs.metadata, timestamp, key.getKey()).clustering("column").add("val", value).build().applyUnsafe()[ CD ]
Line_2 $$ public void testSTCSBigWindow() -->Line_7 $$ ByteBuffer value = ByteBuffer.wrap(new byte[100])[ CD ]
