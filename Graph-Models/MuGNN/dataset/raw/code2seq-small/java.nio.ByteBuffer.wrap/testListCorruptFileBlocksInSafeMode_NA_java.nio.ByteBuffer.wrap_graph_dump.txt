Line_6 $$ Configuration conf = new HdfsConfiguration()-->Line_8 $$ conf.setInt(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY, 3 * 1000)[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_13 $$ cluster.getNameNodeRpc().setSafeMode(HdfsConstants.SafeModeAction.SAFEMODE_LEAVE, false)[ FD ]
Line_22 $$ List<File> metaFiles = MiniDFSCluster.getAllBlockMetadataFiles(data_dir)-->Line_24 $$ File metaFile = metaFiles.get(0)[ FD ]
Line_17 $$ Collection<FSNamesystem.CorruptFileBlockInfo> badFiles = cluster.getNameNode().getNamesystem().listCorruptFileBlocks("/", null)-->Line_41 $$ badFiles = cluster.getNameNode().getNamesystem().listCorruptFileBlocks("/", null)[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).waitSafeMode(false).build()-->Line_41 $$ badFiles = cluster.getNameNode().getNamesystem().listCorruptFileBlocks("/", null)[ FD ]
Line_29 $$ byte[] buffer = new byte[length]-->Line_31 $$ channel.write(ByteBuffer.wrap(buffer), position)[ FD ]
Line_15 $$ DFSTestUtil util = new DFSTestUtil.Builder().setName("testListCorruptFileBlocksInSafeMode").setNumFiles(2).setMaxLevels(1).setMaxSize(512).build()-->Line_65 $$ util.cleanup(fs, "/srcdat10")[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).waitSafeMode(false).build()-->Line_63 $$ assertTrue("Namenode is not in safe mode", cluster.getNameNode().isInSafeMode())[ FD ]
Line_17 $$ Collection<FSNamesystem.CorruptFileBlockInfo> badFiles = cluster.getNameNode().getNamesystem().listCorruptFileBlocks("/", null)-->Line_18 $$ assertTrue("Namenode has " + badFiles.size() + " corrupt files. Expecting None.", badFiles.size() == 0)[ FD ]
Line_14 $$ FileSystem fs = cluster.getFileSystem()-->Line_45 $$ fs = cluster.getFileSystem()[ FD ]
Line_2 $$ public void testListCorruptFileBlocksInSafeMode() throws Exception -->Line_3 $$ MiniDFSCluster cluster = null[ CD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).waitSafeMode(false).build()-->Line_44 $$ cluster.restartNameNode(0)[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).waitSafeMode(false).build()-->Line_20 $$ File data_dir = MiniDFSCluster.getFinalizedDir(storageDir, cluster.getNamesystem().getBlockPoolId())[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_60 $$ badFiles = cluster.getNameNode().getNamesystem().listCorruptFileBlocks("/", null)[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_64 $$ cluster.getNameNodeRpc().setSafeMode(HdfsConstants.SafeModeAction.SAFEMODE_LEAVE, false)[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_14 $$ FileSystem fs = cluster.getFileSystem()[ FD ]
Line_41 $$ badFiles = cluster.getNameNode().getNamesystem().listCorruptFileBlocks("/", null)-->Line_61 $$ LOG.info("Namenode has bad files. " + badFiles.size())[ FD ]
Line_14 $$ FileSystem fs = cluster.getFileSystem()-->Line_35 $$ util.checkFiles(fs, "/srcdat10")[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).waitSafeMode(false).build()-->Line_70 $$ if (cluster != null) [ FD ]
Line_2 $$ public void testListCorruptFileBlocksInSafeMode() throws Exception -->Line_4 $$ Random random = new Random()[ CD ]
Line_41 $$ badFiles = cluster.getNameNode().getNamesystem().listCorruptFileBlocks("/", null)-->Line_60 $$ badFiles = cluster.getNameNode().getNamesystem().listCorruptFileBlocks("/", null)[ FD ]
Line_22 $$ List<File> metaFiles = MiniDFSCluster.getAllBlockMetadataFiles(data_dir)-->Line_23 $$ assertTrue("Data directory does not contain any blocks or there was an " + "IO error", metaFiles != null && !metaFiles.isEmpty())[ FD ]
Line_26 $$ FileChannel channel = file.getChannel()-->Line_27 $$ long position = channel.size() - 2[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).waitSafeMode(false).build()-->Line_60 $$ badFiles = cluster.getNameNode().getNamesystem().listCorruptFileBlocks("/", null)[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_70 $$ if (cluster != null) [ FD ]
Line_6 $$ Configuration conf = new HdfsConfiguration()-->Line_11 $$ conf.setInt(DFSConfigKeys.DFS_CLIENT_RETRY_WINDOW_BASE, 10)[ FD ]
Line_70 $$ if (cluster != null) -->Line_71 $$ cluster.shutdown()[ CD ]
Line_41 $$ badFiles = cluster.getNameNode().getNamesystem().listCorruptFileBlocks("/", null)-->Line_43 $$ assertTrue("Namenode has " + badFiles.size() + " bad files. Expecting 1.", badFiles.size() == 1)[ FD ]
Line_17 $$ Collection<FSNamesystem.CorruptFileBlockInfo> badFiles = cluster.getNameNode().getNamesystem().listCorruptFileBlocks("/", null)-->Line_61 $$ LOG.info("Namenode has bad files. " + badFiles.size())[ FD ]
Line_14 $$ FileSystem fs = cluster.getFileSystem()-->Line_65 $$ util.cleanup(fs, "/srcdat10")[ FD ]
Line_15 $$ DFSTestUtil util = new DFSTestUtil.Builder().setName("testListCorruptFileBlocksInSafeMode").setNumFiles(2).setMaxLevels(1).setMaxSize(512).build()-->Line_16 $$ util.createFiles(fs, "/srcdat10")[ FD ]
Line_25 $$ RandomAccessFile file = new RandomAccessFile(metaFile, "rw")-->Line_32 $$ file.close()[ FD ]
Line_20 $$ File data_dir = MiniDFSCluster.getFinalizedDir(storageDir, cluster.getNamesystem().getBlockPoolId())-->Line_22 $$ List<File> metaFiles = MiniDFSCluster.getAllBlockMetadataFiles(data_dir)[ FD ]
Line_15 $$ DFSTestUtil util = new DFSTestUtil.Builder().setName("testListCorruptFileBlocksInSafeMode").setNumFiles(2).setMaxLevels(1).setMaxSize(512).build()-->Line_54 $$ util.checkFiles(fs, "/srcdat10")[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).waitSafeMode(false).build()-->Line_14 $$ FileSystem fs = cluster.getFileSystem()[ FD ]
Line_17 $$ Collection<FSNamesystem.CorruptFileBlockInfo> badFiles = cluster.getNameNode().getNamesystem().listCorruptFileBlocks("/", null)-->Line_43 $$ assertTrue("Namenode has " + badFiles.size() + " bad files. Expecting 1.", badFiles.size() == 1)[ FD ]
Line_14 $$ FileSystem fs = cluster.getFileSystem()-->Line_16 $$ util.createFiles(fs, "/srcdat10")[ FD ]
Line_19 $$ File storageDir = cluster.getInstanceStorageDir(0, 0)-->Line_20 $$ File data_dir = MiniDFSCluster.getFinalizedDir(storageDir, cluster.getNamesystem().getBlockPoolId())[ FD ]
Line_25 $$ RandomAccessFile file = new RandomAccessFile(metaFile, "rw")-->Line_26 $$ FileChannel channel = file.getChannel()[ FD ]
Line_60 $$ badFiles = cluster.getNameNode().getNamesystem().listCorruptFileBlocks("/", null)-->Line_61 $$ LOG.info("Namenode has bad files. " + badFiles.size())[ FD ]
Line_45 $$ fs = cluster.getFileSystem()-->Line_54 $$ util.checkFiles(fs, "/srcdat10")[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).waitSafeMode(false).build()-->Line_64 $$ cluster.getNameNodeRpc().setSafeMode(HdfsConstants.SafeModeAction.SAFEMODE_LEAVE, false)[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_44 $$ cluster.restartNameNode(0)[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).waitSafeMode(false).build()-->Line_19 $$ File storageDir = cluster.getInstanceStorageDir(0, 0)[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).waitSafeMode(false).build()-->Line_17 $$ Collection<FSNamesystem.CorruptFileBlockInfo> badFiles = cluster.getNameNode().getNamesystem().listCorruptFileBlocks("/", null)[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).waitSafeMode(false).build()[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_17 $$ Collection<FSNamesystem.CorruptFileBlockInfo> badFiles = cluster.getNameNode().getNamesystem().listCorruptFileBlocks("/", null)[ FD ]
Line_45 $$ fs = cluster.getFileSystem()-->Line_65 $$ util.cleanup(fs, "/srcdat10")[ FD ]
Line_17 $$ Collection<FSNamesystem.CorruptFileBlockInfo> badFiles = cluster.getNameNode().getNamesystem().listCorruptFileBlocks("/", null)-->Line_60 $$ badFiles = cluster.getNameNode().getNamesystem().listCorruptFileBlocks("/", null)[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_45 $$ fs = cluster.getFileSystem()[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).waitSafeMode(false).build()-->Line_45 $$ fs = cluster.getFileSystem()[ FD ]
Line_6 $$ Configuration conf = new HdfsConfiguration()-->Line_9 $$ conf.setFloat(DFSConfigKeys.DFS_NAMENODE_SAFEMODE_THRESHOLD_PCT_KEY, 1.5f)[ FD ]
Line_41 $$ badFiles = cluster.getNameNode().getNamesystem().listCorruptFileBlocks("/", null)-->Line_62 $$ assertTrue("Namenode has " + badFiles.size() + " bad files. Expecting 1.", badFiles.size() == 1)[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).waitSafeMode(false).build()-->Line_13 $$ cluster.getNameNodeRpc().setSafeMode(HdfsConstants.SafeModeAction.SAFEMODE_LEAVE, false)[ FD ]
Line_41 $$ badFiles = cluster.getNameNode().getNamesystem().listCorruptFileBlocks("/", null)-->Line_42 $$ LOG.info("Namenode has bad files. " + badFiles.size())[ FD ]
Line_60 $$ badFiles = cluster.getNameNode().getNamesystem().listCorruptFileBlocks("/", null)-->Line_62 $$ assertTrue("Namenode has " + badFiles.size() + " bad files. Expecting 1.", badFiles.size() == 1)[ FD ]
Line_27 $$ long position = channel.size() - 2-->Line_31 $$ channel.write(ByteBuffer.wrap(buffer), position)[ FD ]
Line_6 $$ Configuration conf = new HdfsConfiguration()-->Line_7 $$ conf.setInt(DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY, 1)[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_41 $$ badFiles = cluster.getNameNode().getNamesystem().listCorruptFileBlocks("/", null)[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_20 $$ File data_dir = MiniDFSCluster.getFinalizedDir(storageDir, cluster.getNamesystem().getBlockPoolId())[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_19 $$ File storageDir = cluster.getInstanceStorageDir(0, 0)[ FD ]
Line_6 $$ Configuration conf = new HdfsConfiguration()-->Line_10 $$ conf.setFloat(DFSConfigKeys.DFS_NAMENODE_REPL_QUEUE_THRESHOLD_PCT_KEY, 0f)[ FD ]
Line_29 $$ byte[] buffer = new byte[length]-->Line_30 $$ random.nextBytes(buffer)[ FD ]
Line_4 $$ Random random = new Random()-->Line_30 $$ random.nextBytes(buffer)[ FD ]
Line_15 $$ DFSTestUtil util = new DFSTestUtil.Builder().setName("testListCorruptFileBlocksInSafeMode").setNumFiles(2).setMaxLevels(1).setMaxSize(512).build()-->Line_35 $$ util.checkFiles(fs, "/srcdat10")[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).waitSafeMode(false).build()-->Line_46 $$ while (!cluster.getNameNode().namesystem.isPopulatingReplQueues()) [ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_71 $$ cluster.shutdown()[ FD ]
Line_26 $$ FileChannel channel = file.getChannel()-->Line_31 $$ channel.write(ByteBuffer.wrap(buffer), position)[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_63 $$ assertTrue("Namenode is not in safe mode", cluster.getNameNode().isInSafeMode())[ FD ]
Line_17 $$ Collection<FSNamesystem.CorruptFileBlockInfo> badFiles = cluster.getNameNode().getNamesystem().listCorruptFileBlocks("/", null)-->Line_62 $$ assertTrue("Namenode has " + badFiles.size() + " bad files. Expecting 1.", badFiles.size() == 1)[ FD ]
Line_20 $$ File data_dir = MiniDFSCluster.getFinalizedDir(storageDir, cluster.getNamesystem().getBlockPoolId())-->Line_21 $$ assertTrue("data directory does not exist", data_dir.exists())[ FD ]
Line_24 $$ File metaFile = metaFiles.get(0)-->Line_33 $$ LOG.info("Deliberately corrupting file " + metaFile.getName() + " at offset " + position + " length " + length)[ FD ]
Line_17 $$ Collection<FSNamesystem.CorruptFileBlockInfo> badFiles = cluster.getNameNode().getNamesystem().listCorruptFileBlocks("/", null)-->Line_42 $$ LOG.info("Namenode has bad files. " + badFiles.size())[ FD ]
Line_14 $$ FileSystem fs = cluster.getFileSystem()-->Line_54 $$ util.checkFiles(fs, "/srcdat10")[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).waitSafeMode(false).build()-->Line_71 $$ cluster.shutdown()[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_46 $$ while (!cluster.getNameNode().namesystem.isPopulatingReplQueues()) [ FD ]
