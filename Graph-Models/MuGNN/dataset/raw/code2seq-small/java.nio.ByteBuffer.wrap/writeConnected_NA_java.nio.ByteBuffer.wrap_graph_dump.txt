Line_9 $$ if (state == null) -->Line_12 $$ TraceState.mutateWithTracing(ByteBuffer.wrap(sessionBytes), message, -1, traceType.getTTL())[ CD ]
Line_5 $$ if (sessionBytes != null) -->Line_8 $$ String message = String.format("Sending %s message to %s", qm.message.verb, poolReference.endPoint())[ CD ]
Line_4 $$ byte[] sessionBytes = qm.message.parameters.get(Tracing.TRACE_HEADER)-->Line_5 $$ if (sessionBytes != null) [ FD ]
Line_6 $$ UUID sessionId = UUIDGen.getUUID(ByteBuffer.wrap(sessionBytes))-->Line_7 $$ TraceState state = Tracing.instance.get(sessionId)[ FD ]
Line_15 $$ if (qm.message.verb == MessagingService.Verb.REQUEST_RESPONSE)-->Line_16 $$ Tracing.instance.doneWithNonLocalSession(state)[ CD ]
Line_26 $$ if (e instanceof IOException || e.getCause() instanceof IOException) -->Line_37 $$ logger.error("error writing to [ CD ]
Line_5 $$ if (sessionBytes != null) -->Line_7 $$ TraceState state = Tracing.instance.get(sessionId)[ CD ]
Line_19 $$ long timestampMillis = NanoTimeToCurrentTimeMillis.convert(qm.timestampNanos)-->Line_20 $$ writeInternal(qm.message, qm.id, timestampMillis)[ FD ]
Line_5 $$ if (sessionBytes != null) -->Line_9 $$ if (state == null) [ CD ]
Line_11 $$ Tracing.TraceType traceType = traceTypeBytes == null ? Tracing.TraceType.QUERY : Tracing.TraceType.deserialize(traceTypeBytes[0])-->Line_12 $$ TraceState.mutateWithTracing(ByteBuffer.wrap(sessionBytes), message, -1, traceType.getTTL())[ FD ]
Line_22 $$ if (flush)-->Line_23 $$ out.flush()[ CD ]
Line_8 $$ String message = String.format("Sending %s message to %s", qm.message.verb, poolReference.endPoint())-->Line_12 $$ TraceState.mutateWithTracing(ByteBuffer.wrap(sessionBytes), message, -1, traceType.getTTL())[ FD ]
Line_27 $$ if (logger.isTraceEnabled())-->Line_28 $$ logger.trace("error writing to [ CD ]
Line_4 $$ byte[] sessionBytes = qm.message.parameters.get(Tracing.TRACE_HEADER)-->Line_12 $$ TraceState.mutateWithTracing(ByteBuffer.wrap(sessionBytes), message, -1, traceType.getTTL())[ FD ]
Line_5 $$ if (sessionBytes != null) -->Line_6 $$ UUID sessionId = UUIDGen.getUUID(ByteBuffer.wrap(sessionBytes))[ CD ]
Line_9 $$ if (state == null) -->Line_14 $$ state.trace(message)[ CD ]
Line_2 $$ private void writeConnected(QueuedMessage qm, boolean flush) -->Line_29 $$ if (qm.shouldRetry()) [ FD ]
Line_9 $$ if (state == null) -->Line_15 $$ if (qm.message.verb == MessagingService.Verb.REQUEST_RESPONSE)[ CD ]
Line_9 $$ if (state == null) -->Line_10 $$ byte[] traceTypeBytes = qm.message.parameters.get(Tracing.TRACE_TYPE)[ CD ]
Line_26 $$ if (e instanceof IOException || e.getCause() instanceof IOException) -->Line_27 $$ if (logger.isTraceEnabled())[ CD ]
Line_7 $$ TraceState state = Tracing.instance.get(sessionId)-->Line_14 $$ state.trace(message)[ FD ]
Line_26 $$ if (e instanceof IOException || e.getCause() instanceof IOException) -->Line_29 $$ if (qm.shouldRetry()) [ CD ]
Line_4 $$ byte[] sessionBytes = qm.message.parameters.get(Tracing.TRACE_HEADER)-->Line_6 $$ UUID sessionId = UUIDGen.getUUID(ByteBuffer.wrap(sessionBytes))[ FD ]
Line_7 $$ TraceState state = Tracing.instance.get(sessionId)-->Line_9 $$ if (state == null) [ FD ]
Line_9 $$ if (state == null) -->Line_11 $$ Tracing.TraceType traceType = traceTypeBytes == null ? Tracing.TraceType.QUERY : Tracing.TraceType.deserialize(traceTypeBytes[0])[ CD ]
Line_8 $$ String message = String.format("Sending %s message to %s", qm.message.verb, poolReference.endPoint())-->Line_14 $$ state.trace(message)[ FD ]
Line_7 $$ TraceState state = Tracing.instance.get(sessionId)-->Line_16 $$ Tracing.instance.doneWithNonLocalSession(state)[ FD ]
