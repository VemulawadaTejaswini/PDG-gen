Line_16 $$ client = new DFSClient(NameNode.getAddress(config), config)-->Line_58 $$ status = client.getFileInfo("/file2")[ FD ]
Line_41 $$ READ3Response readRsp = nfsd.read(readXdr.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", 1234))-->Line_42 $$ assertTrue(Arrays.equals(buffer, readRsp.getData().array()))[ FD ]
Line_24 $$ CREATE3Request createReq = new CREATE3Request(rootHandle, "file1", Nfs3Constant.CREATE_UNCHECKED, new SetAttr3(), 0)-->Line_26 $$ createReq.serialize(createXdr)[ FD ]
Line_49 $$ XDR writeXdr2 = new XDR()-->Line_51 $$ nfsd.write(writeXdr2.asReadOnlyWrap(), null, 1, securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_5 $$ MiniDFSCluster cluster = null-->Line_62 $$ cluster.shutdown()[ FD ]
Line_19 $$ Nfs3 nfs3 = new Nfs3(config)-->Line_20 $$ nfs3.startServiceInternal(false)[ FD ]
Line_53 $$ READ3Request readReq2 = new READ3Request(handle2, 0, 10)-->Line_55 $$ readReq2.serialize(readXdr2)[ FD ]
Line_22 $$ HdfsFileStatus status = client.getFileInfo("/")-->Line_59 $$ assertTrue(status.getLen() == 10)[ FD ]
Line_49 $$ XDR writeXdr2 = new XDR()-->Line_50 $$ writeReq2.serialize(writeXdr2)[ FD ]
Line_16 $$ client = new DFSClient(NameNode.getAddress(config), config)-->Line_22 $$ HdfsFileStatus status = client.getFileInfo("/")[ FD ]
Line_7 $$ SecurityHandler securityHandler = Mockito.mock(SecurityHandler.class)-->Line_27 $$ CREATE3Response createRsp = nfsd.create(createXdr.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_5 $$ MiniDFSCluster cluster = null-->Line_14 $$ cluster = new MiniDFSCluster.Builder(config).numDataNodes(1).build()[ FD ]
Line_2 $$ public void testWriteStableHow() throws IOException, InterruptedException -->Line_5 $$ MiniDFSCluster cluster = null[ CD ]
Line_3 $$ NfsConfiguration config = new NfsConfiguration()-->Line_18 $$ config.setInt("nfs3.server.port", 0)[ FD ]
Line_2 $$ public void testWriteStableHow() throws IOException, InterruptedException -->Line_4 $$ DFSClient client = null[ CD ]
Line_4 $$ DFSClient client = null-->Line_16 $$ client = new DFSClient(NameNode.getAddress(config), config)[ FD ]
Line_22 $$ HdfsFileStatus status = client.getFileInfo("/")-->Line_23 $$ FileHandle rootHandle = new FileHandle(status.getFileId())[ FD ]
Line_14 $$ cluster = new MiniDFSCluster.Builder(config).numDataNodes(1).build()-->Line_61 $$ if (cluster != null) [ FD ]
Line_21 $$ nfsd = (RpcProgramNfs3) nfs3.getRpcProgram()-->Line_36 $$ nfsd.write(writeXdr.asReadOnlyWrap(), null, 1, securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_43 $$ CREATE3Request createReq2 = new CREATE3Request(rootHandle, "file2", Nfs3Constant.CREATE_UNCHECKED, new SetAttr3(), 0)-->Line_45 $$ createReq2.serialize(createXdr2)[ FD ]
Line_2 $$ public void testWriteStableHow() throws IOException, InterruptedException -->Line_12 $$ ProxyUsers.refreshSuperUserGroupsConfiguration(config)[ CD ]
Line_38 $$ READ3Request readReq = new READ3Request(handle, 0, 10)-->Line_40 $$ readReq.serialize(readXdr)[ FD ]
Line_19 $$ Nfs3 nfs3 = new Nfs3(config)-->Line_21 $$ nfsd = (RpcProgramNfs3) nfs3.getRpcProgram()[ FD ]
Line_6 $$ RpcProgramNfs3 nfsd-->Line_36 $$ nfsd.write(writeXdr.asReadOnlyWrap(), null, 1, securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_54 $$ XDR readXdr2 = new XDR()-->Line_56 $$ READ3Response readRsp2 = nfsd.read(readXdr2.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_6 $$ RpcProgramNfs3 nfsd-->Line_21 $$ nfsd = (RpcProgramNfs3) nfs3.getRpcProgram()[ FD ]
Line_6 $$ RpcProgramNfs3 nfsd-->Line_52 $$ waitWrite(nfsd, handle2, 60000)[ FD ]
Line_2 $$ public void testWriteStableHow() throws IOException, InterruptedException -->Line_3 $$ NfsConfiguration config = new NfsConfiguration()[ CD ]
Line_22 $$ HdfsFileStatus status = client.getFileInfo("/")-->Line_58 $$ status = client.getFileInfo("/file2")[ FD ]
Line_9 $$ String currentUser = System.getProperty("user.name")-->Line_10 $$ config.set(DefaultImpersonationProvider.getTestProvider().getProxySuperuserGroupConfKey(currentUser), "*")[ FD ]
Line_5 $$ MiniDFSCluster cluster = null-->Line_15 $$ cluster.waitActive()[ FD ]
Line_54 $$ XDR readXdr2 = new XDR()-->Line_55 $$ readReq2.serialize(readXdr2)[ FD ]
Line_30 $$ for (int i = 0; i < 10; i++) -->Line_31 $$ buffer[i] = (byte) i[ CD ]
Line_9 $$ String currentUser = System.getProperty("user.name")-->Line_11 $$ config.set(DefaultImpersonationProvider.getTestProvider().getProxySuperuserIpConfKey(currentUser), "*")[ FD ]
Line_21 $$ nfsd = (RpcProgramNfs3) nfs3.getRpcProgram()-->Line_56 $$ READ3Response readRsp2 = nfsd.read(readXdr2.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_44 $$ XDR createXdr2 = new XDR()-->Line_45 $$ createReq2.serialize(createXdr2)[ FD ]
Line_3 $$ NfsConfiguration config = new NfsConfiguration()-->Line_11 $$ config.set(DefaultImpersonationProvider.getTestProvider().getProxySuperuserIpConfKey(currentUser), "*")[ FD ]
Line_33 $$ WRITE3Request writeReq = new WRITE3Request(handle, 0, 10, WriteStableHow.DATA_SYNC, ByteBuffer.wrap(buffer))-->Line_35 $$ writeReq.serialize(writeXdr)[ FD ]
Line_29 $$ byte[] buffer = new byte[10]-->Line_57 $$ assertTrue(Arrays.equals(buffer, readRsp2.getData().array()))[ FD ]
Line_3 $$ NfsConfiguration config = new NfsConfiguration()-->Line_12 $$ ProxyUsers.refreshSuperUserGroupsConfiguration(config)[ FD ]
Line_7 $$ SecurityHandler securityHandler = Mockito.mock(SecurityHandler.class)-->Line_51 $$ nfsd.write(writeXdr2.asReadOnlyWrap(), null, 1, securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_7 $$ SecurityHandler securityHandler = Mockito.mock(SecurityHandler.class)-->Line_41 $$ READ3Response readRsp = nfsd.read(readXdr.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_56 $$ READ3Response readRsp2 = nfsd.read(readXdr2.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", 1234))-->Line_57 $$ assertTrue(Arrays.equals(buffer, readRsp2.getData().array()))[ FD ]
Line_25 $$ XDR createXdr = new XDR()-->Line_27 $$ CREATE3Response createRsp = nfsd.create(createXdr.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_7 $$ SecurityHandler securityHandler = Mockito.mock(SecurityHandler.class)-->Line_36 $$ nfsd.write(writeXdr.asReadOnlyWrap(), null, 1, securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_58 $$ status = client.getFileInfo("/file2")-->Line_59 $$ assertTrue(status.getLen() == 10)[ FD ]
Line_29 $$ byte[] buffer = new byte[10]-->Line_42 $$ assertTrue(Arrays.equals(buffer, readRsp.getData().array()))[ FD ]
Line_46 $$ CREATE3Response createRsp2 = nfsd.create(createXdr2.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", 1234))-->Line_47 $$ FileHandle handle2 = createRsp2.getObjHandle()[ FD ]
Line_6 $$ RpcProgramNfs3 nfsd-->Line_56 $$ READ3Response readRsp2 = nfsd.read(readXdr2.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_7 $$ SecurityHandler securityHandler = Mockito.mock(SecurityHandler.class)-->Line_46 $$ CREATE3Response createRsp2 = nfsd.create(createXdr2.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_21 $$ nfsd = (RpcProgramNfs3) nfs3.getRpcProgram()-->Line_46 $$ CREATE3Response createRsp2 = nfsd.create(createXdr2.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_2 $$ public void testWriteStableHow() throws IOException, InterruptedException -->Line_6 $$ RpcProgramNfs3 nfsd[ CD ]
Line_21 $$ nfsd = (RpcProgramNfs3) nfs3.getRpcProgram()-->Line_51 $$ nfsd.write(writeXdr2.asReadOnlyWrap(), null, 1, securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_2 $$ public void testWriteStableHow() throws IOException, InterruptedException -->Line_11 $$ config.set(DefaultImpersonationProvider.getTestProvider().getProxySuperuserIpConfKey(currentUser), "*")[ CD ]
Line_48 $$ WRITE3Request writeReq2 = new WRITE3Request(handle2, 0, 10, WriteStableHow.FILE_SYNC, ByteBuffer.wrap(buffer))-->Line_50 $$ writeReq2.serialize(writeXdr2)[ FD ]
Line_29 $$ byte[] buffer = new byte[10]-->Line_33 $$ WRITE3Request writeReq = new WRITE3Request(handle, 0, 10, WriteStableHow.DATA_SYNC, ByteBuffer.wrap(buffer))[ FD ]
Line_44 $$ XDR createXdr2 = new XDR()-->Line_46 $$ CREATE3Response createRsp2 = nfsd.create(createXdr2.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_5 $$ MiniDFSCluster cluster = null-->Line_61 $$ if (cluster != null) [ FD ]
Line_2 $$ public void testWriteStableHow() throws IOException, InterruptedException -->Line_9 $$ String currentUser = System.getProperty("user.name")[ CD ]
Line_3 $$ NfsConfiguration config = new NfsConfiguration()-->Line_10 $$ config.set(DefaultImpersonationProvider.getTestProvider().getProxySuperuserGroupConfKey(currentUser), "*")[ FD ]
Line_28 $$ FileHandle handle = createRsp.getObjHandle()-->Line_37 $$ waitWrite(nfsd, handle, 60000)[ FD ]
Line_7 $$ SecurityHandler securityHandler = Mockito.mock(SecurityHandler.class)-->Line_56 $$ READ3Response readRsp2 = nfsd.read(readXdr2.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_25 $$ XDR createXdr = new XDR()-->Line_26 $$ createReq.serialize(createXdr)[ FD ]
Line_6 $$ RpcProgramNfs3 nfsd-->Line_41 $$ READ3Response readRsp = nfsd.read(readXdr.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_34 $$ XDR writeXdr = new XDR()-->Line_35 $$ writeReq.serialize(writeXdr)[ FD ]
Line_61 $$ if (cluster != null) -->Line_62 $$ cluster.shutdown()[ CD ]
Line_3 $$ NfsConfiguration config = new NfsConfiguration()-->Line_17 $$ config.setInt("nfs3.mountd.port", 0)[ FD ]
Line_34 $$ XDR writeXdr = new XDR()-->Line_36 $$ nfsd.write(writeXdr.asReadOnlyWrap(), null, 1, securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_2 $$ public void testWriteStableHow() throws IOException, InterruptedException -->Line_10 $$ config.set(DefaultImpersonationProvider.getTestProvider().getProxySuperuserGroupConfKey(currentUser), "*")[ CD ]
Line_7 $$ SecurityHandler securityHandler = Mockito.mock(SecurityHandler.class)-->Line_8 $$ Mockito.when(securityHandler.getUser()).thenReturn(System.getProperty("user.name"))[ FD ]
Line_2 $$ public void testWriteStableHow() throws IOException, InterruptedException -->Line_7 $$ SecurityHandler securityHandler = Mockito.mock(SecurityHandler.class)[ CD ]
Line_6 $$ RpcProgramNfs3 nfsd-->Line_37 $$ waitWrite(nfsd, handle, 60000)[ FD ]
Line_6 $$ RpcProgramNfs3 nfsd-->Line_46 $$ CREATE3Response createRsp2 = nfsd.create(createXdr2.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_14 $$ cluster = new MiniDFSCluster.Builder(config).numDataNodes(1).build()-->Line_15 $$ cluster.waitActive()[ FD ]
Line_39 $$ XDR readXdr = new XDR()-->Line_40 $$ readReq.serialize(readXdr)[ FD ]
Line_21 $$ nfsd = (RpcProgramNfs3) nfs3.getRpcProgram()-->Line_37 $$ waitWrite(nfsd, handle, 60000)[ FD ]
Line_21 $$ nfsd = (RpcProgramNfs3) nfs3.getRpcProgram()-->Line_27 $$ CREATE3Response createRsp = nfsd.create(createXdr.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_6 $$ RpcProgramNfs3 nfsd-->Line_27 $$ CREATE3Response createRsp = nfsd.create(createXdr.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_2 $$ public void testWriteStableHow() throws IOException, InterruptedException -->Line_8 $$ Mockito.when(securityHandler.getUser()).thenReturn(System.getProperty("user.name"))[ CD ]
Line_6 $$ RpcProgramNfs3 nfsd-->Line_51 $$ nfsd.write(writeXdr2.asReadOnlyWrap(), null, 1, securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_21 $$ nfsd = (RpcProgramNfs3) nfs3.getRpcProgram()-->Line_52 $$ waitWrite(nfsd, handle2, 60000)[ FD ]
Line_14 $$ cluster = new MiniDFSCluster.Builder(config).numDataNodes(1).build()-->Line_62 $$ cluster.shutdown()[ FD ]
Line_21 $$ nfsd = (RpcProgramNfs3) nfs3.getRpcProgram()-->Line_41 $$ READ3Response readRsp = nfsd.read(readXdr.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_4 $$ DFSClient client = null-->Line_58 $$ status = client.getFileInfo("/file2")[ FD ]
Line_47 $$ FileHandle handle2 = createRsp2.getObjHandle()-->Line_52 $$ waitWrite(nfsd, handle2, 60000)[ FD ]
Line_3 $$ NfsConfiguration config = new NfsConfiguration()-->Line_16 $$ client = new DFSClient(NameNode.getAddress(config), config)[ FD ]
Line_29 $$ byte[] buffer = new byte[10]-->Line_48 $$ WRITE3Request writeReq2 = new WRITE3Request(handle2, 0, 10, WriteStableHow.FILE_SYNC, ByteBuffer.wrap(buffer))[ FD ]
Line_39 $$ XDR readXdr = new XDR()-->Line_41 $$ READ3Response readRsp = nfsd.read(readXdr.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_4 $$ DFSClient client = null-->Line_22 $$ HdfsFileStatus status = client.getFileInfo("/")[ FD ]
Line_27 $$ CREATE3Response createRsp = nfsd.create(createXdr.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", 1234))-->Line_28 $$ FileHandle handle = createRsp.getObjHandle()[ FD ]
