Line_2 $$ public void testSameLength() -->Line_7 $$ assertSignum("n1n2", -1, comparator.compare(n1, n2))[ CD ]
Line_2 $$ public void testSameLength() -->Line_11 $$ assertSignum("p1n1", 1, comparator.compare(p1, n1))[ CD ]
Line_3 $$ ByteBuffer n1 = ByteBuffer.wrap(new byte[] -->Line_8 $$ assertSignum("n2n1", 1, comparator.compare(n2, n1))[ FD ]
Line_2 $$ public void testSameLength() -->Line_12 $$ assertSignum("p1n2", 1, comparator.compare(p1, n2))[ CD ]
Line_5 $$ ByteBuffer p1 = ByteBuffer.wrap(new byte[] -->Line_13 $$ assertSignum("n1p1", -1, comparator.compare(n1, p1))[ FD ]
Line_3 $$ ByteBuffer n1 = ByteBuffer.wrap(new byte[] -->Line_11 $$ assertSignum("p1n1", 1, comparator.compare(p1, n1))[ FD ]
Line_3 $$ ByteBuffer n1 = ByteBuffer.wrap(new byte[] -->Line_13 $$ assertSignum("n1p1", -1, comparator.compare(n1, p1))[ FD ]
Line_3 $$ ByteBuffer n1 = ByteBuffer.wrap(new byte[] -->Line_7 $$ assertSignum("n1n2", -1, comparator.compare(n1, n2))[ FD ]
Line_2 $$ public void testSameLength() -->Line_4 $$ ByteBuffer n2 = ByteBuffer.wrap(new byte[] [ CD ]
Line_2 $$ public void testSameLength() -->Line_14 $$ assertSignum("n2p1", -1, comparator.compare(n2, p1))[ CD ]
Line_5 $$ ByteBuffer p1 = ByteBuffer.wrap(new byte[] -->Line_9 $$ assertSignum("p1p2", -1, comparator.compare(p1, p2))[ FD ]
Line_5 $$ ByteBuffer p1 = ByteBuffer.wrap(new byte[] -->Line_10 $$ assertSignum("p2p1", 1, comparator.compare(p2, p1))[ FD ]
Line_4 $$ ByteBuffer n2 = ByteBuffer.wrap(new byte[] -->Line_7 $$ assertSignum("n1n2", -1, comparator.compare(n1, n2))[ FD ]
Line_4 $$ ByteBuffer n2 = ByteBuffer.wrap(new byte[] -->Line_14 $$ assertSignum("n2p1", -1, comparator.compare(n2, p1))[ FD ]
Line_4 $$ ByteBuffer n2 = ByteBuffer.wrap(new byte[] -->Line_12 $$ assertSignum("p1n2", 1, comparator.compare(p1, n2))[ FD ]
Line_5 $$ ByteBuffer p1 = ByteBuffer.wrap(new byte[] -->Line_12 $$ assertSignum("p1n2", 1, comparator.compare(p1, n2))[ FD ]
Line_2 $$ public void testSameLength() -->Line_13 $$ assertSignum("n1p1", -1, comparator.compare(n1, p1))[ CD ]
Line_2 $$ public void testSameLength() -->Line_5 $$ ByteBuffer p1 = ByteBuffer.wrap(new byte[] [ CD ]
Line_2 $$ public void testSameLength() -->Line_6 $$ ByteBuffer p2 = ByteBuffer.wrap(new byte[] [ CD ]
Line_2 $$ public void testSameLength() -->Line_8 $$ assertSignum("n2n1", 1, comparator.compare(n2, n1))[ CD ]
Line_6 $$ ByteBuffer p2 = ByteBuffer.wrap(new byte[] -->Line_10 $$ assertSignum("p2p1", 1, comparator.compare(p2, p1))[ FD ]
Line_4 $$ ByteBuffer n2 = ByteBuffer.wrap(new byte[] -->Line_8 $$ assertSignum("n2n1", 1, comparator.compare(n2, n1))[ FD ]
Line_2 $$ public void testSameLength() -->Line_3 $$ ByteBuffer n1 = ByteBuffer.wrap(new byte[] [ CD ]
Line_2 $$ public void testSameLength() -->Line_9 $$ assertSignum("p1p2", -1, comparator.compare(p1, p2))[ CD ]
Line_2 $$ public void testSameLength() -->Line_10 $$ assertSignum("p2p1", 1, comparator.compare(p2, p1))[ CD ]
Line_5 $$ ByteBuffer p1 = ByteBuffer.wrap(new byte[] -->Line_11 $$ assertSignum("p1n1", 1, comparator.compare(p1, n1))[ FD ]
Line_5 $$ ByteBuffer p1 = ByteBuffer.wrap(new byte[] -->Line_14 $$ assertSignum("n2p1", -1, comparator.compare(n2, p1))[ FD ]
Line_6 $$ ByteBuffer p2 = ByteBuffer.wrap(new byte[] -->Line_9 $$ assertSignum("p1p2", -1, comparator.compare(p1, p2))[ FD ]
