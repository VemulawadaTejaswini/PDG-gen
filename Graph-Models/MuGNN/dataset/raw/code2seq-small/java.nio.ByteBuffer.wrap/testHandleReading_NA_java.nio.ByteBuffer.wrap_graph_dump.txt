Line_24 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_121 $$ logRecord = logRecords.get(0)[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_252 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_69 $$ requestDatagram.writeTo(sinkChannel)[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_252 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_28 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_31 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_225 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.FINE)) -->Line_67 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_133 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_158 $$ _mockIntraband.addResponseWaitingDatagram(requestDatagram)[ FD ]
Line_44 $$ SyncThrowableThread<Void> syncThrowableThread = new SyncThrowableThread(new Callable<Void>() -->Line_60 $$ syncThrowableThread.sync()[ FD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_170 $$ assertMessageStartWith(logRecord, "Dropped unconcerned response ")[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_169 $$ logRecord = logRecords.get(0)[ FD ]
Line_14 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_24 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_24 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_87 $$ logRecord = logRecords.get(0)[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.FINE)) -->Line_14 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_26 $$ channelContext.setReadingDatagram(Datagram.createReceiveDatagram())[ FD ]
Line_14 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_205 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_21 $$ logRecord = logRecords.get(0)-->Line_22 $$ assertMessageStartWith(logRecord, "Broken read channel, unregister ")[ FD ]
Line_24 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_206 $$ logRecord = logRecords.get(0)[ FD ]
Line_14 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_236 $$ logRecord = logRecords.get(0)[ FD ]
Line_24 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_64 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_198 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_17 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_199 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_6 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_9 $$ Assert.assertFalse(mockRegistrationReference.isValid())[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.FINE)) -->Line_24 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_16 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_17 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_83 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_25 $$ channelContext = new ChannelContext(null)[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.FINE)) -->Line_89 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_153 $$ requestDatagram.setSequenceId(sequenceId)[ FD ]
Line_16 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_198 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_224 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_224 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_225 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_16 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_208 $$ Assert.assertSame(mockRegistrationReference, _mockIntraband.getRegistrationReference())[ FD ]
Line_6 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_27 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)[ FD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_140 $$ _mockIntraband.addResponseWaitingDatagram(requestDatagram)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_21 $$ logRecord = logRecords.get(0)[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_28 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_58 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_145 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_182 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_127 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_38 $$ final ByteBuffer byteBuffer = ByteBuffer.allocate(_data.length + 14)-->Line_40 $$ sourceChannel.read(byteBuffer)[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.FINE)) -->Line_189 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_243 $$ requestDatagram.setAckRequest(true)[ FD ]
Line_24 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_236 $$ logRecord = logRecords.get(0)[ FD ]
Line_32 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_262 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_252 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_71 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_32 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_77 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_193 $$ requestDatagram.writeTo(sinkChannel)[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_196 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_14 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_188 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_27 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_198 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_24 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_235 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_249 $$ requestDatagram.writeTo(sinkChannel)[ FD ]
Line_32 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_169 $$ logRecord = logRecords.get(0)[ FD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_238 $$ Assert.assertTrue(logRecord.getThrown() instanceof RuntimeException)[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_145 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_6 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_208 $$ Assert.assertSame(mockRegistrationReference, _mockIntraband.getRegistrationReference())[ FD ]
Line_14 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_87 $$ logRecord = logRecords.get(0)[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_163 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_207 $$ assertMessageStartWith(logRecord, "Dropped ownerless request ")[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_86 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_71 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_14 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_21 $$ logRecord = logRecords.get(0)[ FD ]
Line_24 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_31 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_6 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_16 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_65 $$ logRecord = logRecords.get(0)[ FD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_102 $$ _mockIntraband.addResponseWaitingDatagram(requestDatagram)[ FD ]
Line_32 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_120 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_6 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_17 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_16 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_28 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_6 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_19 $$ Assert.assertFalse(mockRegistrationReference.isValid())[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_144 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.FINE)) -->Line_123 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_222 $$ requestDatagram.writeTo(sinkChannel)[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_106 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_114 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_21 $$ logRecord = logRecords.get(0)-->Line_238 $$ Assert.assertTrue(logRecord.getThrown() instanceof RuntimeException)[ FD ]
Line_24 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_32 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_77 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.FINE)) -->Line_212 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_206 $$ logRecord = logRecords.get(0)[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_15 $$ channelContext = new ChannelContext(null)[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_57 $$ while (receiveDatagram == channelContext.getReadingDatagram()) [ FD ]
Line_21 $$ logRecord = logRecords.get(0)-->Line_237 $$ assertMessageStartWith(logRecord, "Unable to dispatch")[ FD ]
Line_14 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_31 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_13 $$ Assert.assertTrue(logRecord.getThrown() instanceof IOException)[ FD ]
Line_14 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_64 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_14 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_65 $$ logRecord = logRecords.get(0)[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_84 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_128 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_128 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_84 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_64 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_83 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_88 $$ assertMessageStartWith(logRecord, "Dropped ownerless ACK response ")[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_8 $$ _mockIntraband.handleReading(new MockScatteringByteChannel(false), channelContext)[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.FINE)) -->Line_151 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_106 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_58 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_24 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_77 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_106 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_20 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_107 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_32 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_168 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_57 $$ while (receiveDatagram == channelContext.getReadingDatagram()) [ FD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_23 $$ Assert.assertNull(logRecord.getThrown())[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_84 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_173 $$ requestDatagram.setSequenceId(sequenceId)[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_183 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_12 $$ assertMessageStartWith(logRecord, "Broken read channel, unregister ")[ FD ]
Line_24 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_133 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_32 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_235 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_14 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_96 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_16 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_30 $$ Assert.assertFalse(mockRegistrationReference.isValid())[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_94 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_32 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_205 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_224 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_21 $$ logRecord = logRecords.get(0)-->Line_66 $$ assertMessageStartWith(logRecord, "Dropped ownerless request ")[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.FINE)) -->Line_78 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_14 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_32 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_39 $$ while (byteBuffer.hasRemaining()) -->Line_40 $$ sourceChannel.read(byteBuffer)[ CD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_193 $$ requestDatagram.writeTo(sinkChannel)[ FD ]
Line_32 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_86 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_237 $$ assertMessageStartWith(logRecord, "Unable to dispatch")[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_251 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_87 $$ logRecord = logRecords.get(0)[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_7 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_28 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_21 $$ logRecord = logRecords.get(0)-->Line_170 $$ assertMessageStartWith(logRecord, "Dropped unconcerned response ")[ FD ]
Line_6 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_198 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_24 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_262 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_145 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_24 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_120 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_196 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_222 $$ requestDatagram.writeTo(sinkChannel)[ FD ]
Line_38 $$ final ByteBuffer byteBuffer = ByteBuffer.allocate(_data.length + 14)-->Line_46 $$ for (byte b : byteBuffer.array()) [ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_120 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_198 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_27 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_30 $$ Assert.assertFalse(mockRegistrationReference.isValid())[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_56 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_114 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_6 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_28 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_14 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_206 $$ logRecord = logRecords.get(0)[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_115 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_196 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_121 $$ logRecord = logRecords.get(0)[ FD ]
Line_44 $$ SyncThrowableThread<Void> syncThrowableThread = new SyncThrowableThread(new Callable<Void>() -->Line_53 $$ syncThrowableThread.start()[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_107 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_37 $$ requestDatagram.writeTo(sinkChannel)[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_56 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_81 $$ ackResponseDatagram.writeTo(sinkChannel)[ FD ]
Line_14 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_86 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.FINE)) -->Line_239 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)[ FD ]
Line_16 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_27 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_93 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_26 $$ channelContext.setReadingDatagram(Datagram.createReceiveDatagram())[ FD ]
Line_21 $$ logRecord = logRecords.get(0)-->Line_88 $$ assertMessageStartWith(logRecord, "Dropped ownerless ACK response ")[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_127 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_93 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_217 $$ requestDatagram.setSequenceId(sequenceId)[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_182 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_107 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_178 $$ _mockIntraband.addResponseWaitingDatagram(requestDatagram)[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_145 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_47 $$ sinkChannel.write(ByteBuffer.wrap(new byte[] [ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_225 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_198 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_42 $$ sourceChannel.configureBlocking(false)[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_58 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_179 $$ responseDatagram = Datagram.createResponseDatagram(requestDatagram, _data)[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.FINE)) -->Line_171 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_32 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_133 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_32 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_188 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_115 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_159 $$ responseDatagram = Datagram.createResponseDatagram(requestDatagram, _data)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_188 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_94 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_32 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_65 $$ logRecord = logRecords.get(0)[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.FINE)) -->Line_110 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_17 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_125 $$ responseDatagram.writeTo(sinkChannel)[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_251 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_18 $$ _mockIntraband.handleReading(new MockScatteringByteChannel(true), channelContext)[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_72 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_182 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_163 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_163 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_112 $$ responseDatagram.writeTo(sinkChannel)[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_142 $$ responseDatagram.writeTo(sinkChannel)[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_29 $$ _mockIntraband.handleReading(new MockScatteringByteChannel(false), channelContext)[ FD ]
Line_24 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_205 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_144 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_180 $$ responseDatagram.writeTo(sinkChannel)[ FD ]
Line_38 $$ final ByteBuffer byteBuffer = ByteBuffer.allocate(_data.length + 14)-->Line_39 $$ while (byteBuffer.hasRemaining()) [ FD ]
Line_21 $$ logRecord = logRecords.get(0)-->Line_23 $$ Assert.assertNull(logRecord.getThrown())[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_168 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_221 $$ _mockIntraband.addResponseWaitingDatagram(requestDatagram)[ FD ]
Line_57 $$ while (receiveDatagram == channelContext.getReadingDatagram()) -->Line_58 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ CD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_122 $$ assertMessageStartWith(logRecord, "Dropped ownerless response ")[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_104 $$ ackResponseDatagram.writeTo(sinkChannel)[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_58 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_32 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_121 $$ logRecord = logRecords.get(0)[ FD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_135 $$ requestDatagram.setSequenceId(sequenceId)[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_29 $$ _mockIntraband.handleReading(new MockScatteringByteChannel(false), channelContext)[ FD ]
Line_27 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_208 $$ Assert.assertSame(mockRegistrationReference, _mockIntraband.getRegistrationReference())[ FD ]
Line_14 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_262 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_24 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_86 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_216 $$ requestDatagram.setAckRequest(true)[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_72 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_115 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_22 $$ assertMessageStartWith(logRecord, "Broken read channel, unregister ")[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_24 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.FINE)) -->Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_33 $$ Pipe pipe = Pipe.open()-->Line_34 $$ try (SourceChannel sourceChannel = pipe.source();[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_43 $$ sinkChannel.configureBlocking(false)[ FD ]
Line_14 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_235 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_18 $$ _mockIntraband.handleReading(new MockScatteringByteChannel(true), channelContext)[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_94 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_225 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_72 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_27 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_28 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_93 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_32 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_96 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_107 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_236 $$ logRecord = logRecords.get(0)[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_162 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_37 $$ requestDatagram.writeTo(sinkChannel)[ FD ]
Line_24 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_96 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_14 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_168 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_162 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_24 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_168 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_183 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_14 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_169 $$ logRecord = logRecords.get(0)[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_29 $$ _mockIntraband.handleReading(new MockScatteringByteChannel(false), channelContext)[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_160 $$ responseDatagram.writeTo(sinkChannel)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_235 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_141 $$ responseDatagram = Datagram.createResponseDatagram(requestDatagram, _data)[ FD ]
Line_6 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_30 $$ Assert.assertFalse(mockRegistrationReference.isValid())[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_252 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_111 $$ Datagram responseDatagram = Datagram.createResponseDatagram(requestDatagram, _data)[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_83 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_11 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_25 $$ channelContext = new ChannelContext(null)[ FD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_191 $$ requestDatagram.setAckRequest(true)[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_71 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_183 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_251 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_16 $$ mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_19 $$ Assert.assertFalse(mockRegistrationReference.isValid())[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_114 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_192 $$ requestDatagram.setSequenceId(sequenceId)[ FD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_66 $$ assertMessageStartWith(logRecord, "Dropped ownerless request ")[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_40 $$ sourceChannel.read(byteBuffer)[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_94 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_24 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_65 $$ logRecord = logRecords.get(0)[ FD ]
Line_14 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_77 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_128 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_244 $$ requestDatagram.setSequenceId(sequenceId)[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_249 $$ requestDatagram.writeTo(sinkChannel)[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_91 $$ ackResponseDatagram.writeTo(sinkChannel)[ FD ]
Line_24 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_169 $$ logRecord = logRecords.get(0)[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_162 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_205 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_144 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_127 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_32 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_206 $$ logRecord = logRecords.get(0)[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_72 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_128 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_32 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_87 $$ logRecord = logRecords.get(0)[ FD ]
Line_32 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_236 $$ logRecord = logRecords.get(0)[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_115 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_32 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_64 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_14 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_121 $$ logRecord = logRecords.get(0)[ FD ]
Line_15 $$ channelContext = new ChannelContext(null)-->Line_56 $$ channelContext.setReadingDatagram(receiveDatagram)[ FD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_124 $$ responseDatagram = Datagram.createResponseDatagram(requestDatagram, _data)[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_183 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_21 $$ logRecord = logRecords.get(0)-->Line_207 $$ assertMessageStartWith(logRecord, "Dropped ownerless request ")[ FD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_21 $$ logRecord = logRecords.get(0)[ FD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_69 $$ requestDatagram.writeTo(sinkChannel)[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_199 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_98 $$ requestDatagram.setSequenceId(sequenceId)[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_199 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_36 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_248 $$ _mockIntraband.addResponseWaitingDatagram(requestDatagram)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_32 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_44 $$ SyncThrowableThread<Void> syncThrowableThread = new SyncThrowableThread(new Callable<Void>() -->Line_50 $$ return null[ CD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_96 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_262 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_24 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_188 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_163 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_21 $$ logRecord = logRecords.get(0)-->Line_122 $$ assertMessageStartWith(logRecord, "Dropped ownerless response ")[ FD ]
Line_25 $$ channelContext = new ChannelContext(null)-->Line_84 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_14 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_133 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_14 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_20 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_34 $$ try (SourceChannel sourceChannel = pipe.source();-->Line_199 $$ _mockIntraband.handleReading(sourceChannel, channelContext)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_10 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_6 $$ MockRegistrationReference mockRegistrationReference = new MockRegistrationReference(_mockIntraband)-->Line_7 $$ channelContext.setRegistrationReference(mockRegistrationReference)[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_26 $$ channelContext.setReadingDatagram(Datagram.createReceiveDatagram())[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.FINE)) -->Line_32 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_14 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_5 $$ ChannelContext channelContext = new ChannelContext(null)-->Line_57 $$ while (receiveDatagram == channelContext.getReadingDatagram()) [ FD ]
Line_14 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_120 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
