Line_15 $$ while (bytesLeft > 0) -->Line_61 $$ VerifyInfo verifyRes = verifyBuffer(readBuf, bufSize, vOffset, hasher)[ CD ]
Line_40 $$ int bufSize = bufferSize-->Line_44 $$ if (bufLeft < bufSize) [ FD ]
Line_11 $$ long bufRead = 0-->Line_32 $$ bufRead = 0[ FD ]
Line_2 $$ private VerifyOutput verifyBytes(long byteAm, long bytesRead, DataInputStream in) throws IOException, BadFileException -->Line_50 $$ in.readFully(readBuf.array(), 0, bufSize)[ FD ]
Line_40 $$ int bufSize = bufferSize-->Line_55 $$ bytesRead += bufSize[ FD ]
Line_16 $$ if (bufLeft <= 0) -->Line_33 $$ if (bufLeft > bytesLeft) [ CD ]
Line_45 $$ bufSize = (int) bufLeft-->Line_44 $$ if (bufLeft < bufSize) [ FD ]
Line_40 $$ int bufSize = bufferSize-->Line_50 $$ in.readFully(readBuf.array(), 0, bufSize)[ FD ]
Line_40 $$ int bufSize = bufferSize-->Line_42 $$ bufSize = (int) bytesLeft[ FD ]
Line_57 $$ bufLeft -= bufSize-->Line_16 $$ if (bufLeft <= 0) [ FD ]
Line_10 $$ long bufLeft = 0-->Line_33 $$ if (bufLeft > bytesLeft) [ FD ]
Line_9 $$ long bytesLeft = byteAm-->Line_15 $$ while (bytesLeft > 0) [ FD ]
Line_40 $$ int bufSize = bufferSize-->Line_61 $$ VerifyInfo verifyRes = verifyBuffer(readBuf, bufSize, vOffset, hasher)[ FD ]
Line_40 $$ int bufSize = bufferSize-->Line_41 $$ if (bytesLeft < bufSize) [ FD ]
Line_31 $$ bytesLeft -= header.getBytesRead()-->Line_15 $$ while (bytesLeft > 0) [ FD ]
Line_29 $$ readTime += header.getTimeTaken()-->Line_51 $$ readTime += Timer.elapsed(startTime)[ FD ]
Line_28 $$ bufLeft = header.getByteAm()-->Line_57 $$ bufLeft -= bufSize[ FD ]
Line_16 $$ if (bufLeft <= 0) -->Line_32 $$ bufRead = 0[ CD ]
Line_16 $$ if (bufLeft <= 0) -->Line_29 $$ readTime += header.getTimeTaken()[ CD ]
Line_16 $$ if (bufLeft <= 0) -->Line_27 $$ hasher = new DataHasher(header.getHashValue())[ CD ]
Line_10 $$ long bufLeft = 0-->Line_57 $$ bufLeft -= bufSize[ FD ]
Line_56 $$ bytesLeft -= bufSize-->Line_17 $$ if (bytesLeft < DataWriter.getHeaderLength()) [ FD ]
Line_2 $$ private VerifyOutput verifyBytes(long byteAm, long bytesRead, DataInputStream in) throws IOException, BadFileException -->Line_22 $$ header = readHeader(in)[ FD ]
Line_16 $$ if (bufLeft <= 0) -->Line_26 $$ ++seqNum[ CD ]
Line_42 $$ bufSize = (int) bytesLeft-->Line_45 $$ bufSize = (int) bufLeft[ FD ]
Line_56 $$ bytesLeft -= bufSize-->Line_41 $$ if (bytesLeft < bufSize) [ FD ]
Line_20 $$ ReadInfo header = null-->Line_27 $$ hasher = new DataHasher(header.getHashValue())[ FD ]
Line_10 $$ long bufLeft = 0-->Line_28 $$ bufLeft = header.getByteAm()[ FD ]
Line_13 $$ DataHasher hasher = null-->Line_61 $$ VerifyInfo verifyRes = verifyBuffer(readBuf, bufSize, vOffset, hasher)[ FD ]
Line_40 $$ int bufSize = bufferSize-->Line_45 $$ bufSize = (int) bufLeft[ FD ]
Line_45 $$ bufSize = (int) bufLeft-->Line_50 $$ in.readFully(readBuf.array(), 0, bufSize)[ FD ]
Line_14 $$ ByteBuffer readBuf = ByteBuffer.wrap(new byte[bufferSize])-->Line_61 $$ VerifyInfo verifyRes = verifyBuffer(readBuf, bufSize, vOffset, hasher)[ FD ]
Line_2 $$ private VerifyOutput verifyBytes(long byteAm, long bytesRead, DataInputStream in) throws IOException, BadFileException -->Line_9 $$ long bytesLeft = byteAm[ CD ]
Line_57 $$ bufLeft -= bufSize-->Line_36 $$ if (bufLeft <= 0) [ FD ]
Line_27 $$ hasher = new DataHasher(header.getHashValue())-->Line_61 $$ VerifyInfo verifyRes = verifyBuffer(readBuf, bufSize, vOffset, hasher)[ FD ]
Line_42 $$ bufSize = (int) bytesLeft-->Line_60 $$ bufRead += bufSize[ FD ]
Line_34 $$ bufLeft = bytesLeft-->Line_57 $$ bufLeft -= bufSize[ FD ]
Line_16 $$ if (bufLeft <= 0) -->Line_30 $$ bytesRead += header.getBytesRead()[ CD ]
Line_2 $$ private VerifyOutput verifyBytes(long byteAm, long bytesRead, DataInputStream in) throws IOException, BadFileException -->Line_3 $$ if (byteAm <= 0) [ FD ]
Line_56 $$ bytesLeft -= bufSize-->Line_34 $$ bufLeft = bytesLeft[ FD ]
Line_15 $$ while (bytesLeft > 0) -->Line_16 $$ if (bufLeft <= 0) [ CD ]
Line_9 $$ long bytesLeft = byteAm-->Line_31 $$ bytesLeft -= header.getBytesRead()[ FD ]
Line_10 $$ long bufLeft = 0-->Line_16 $$ if (bufLeft <= 0) [ FD ]
Line_42 $$ bufSize = (int) bytesLeft-->Line_50 $$ in.readFully(readBuf.array(), 0, bufSize)[ FD ]
Line_45 $$ bufSize = (int) bufLeft-->Line_61 $$ VerifyInfo verifyRes = verifyBuffer(readBuf, bufSize, vOffset, hasher)[ FD ]
Line_16 $$ if (bufLeft <= 0) -->Line_28 $$ bufLeft = header.getByteAm()[ CD ]
Line_20 $$ ReadInfo header = null-->Line_30 $$ bytesRead += header.getBytesRead()[ FD ]
Line_2 $$ private VerifyOutput verifyBytes(long byteAm, long bytesRead, DataInputStream in) throws IOException, BadFileException -->Line_12 $$ long seqNum = 0[ CD ]
Line_10 $$ long bufLeft = 0-->Line_36 $$ if (bufLeft <= 0) [ FD ]
Line_42 $$ bufSize = (int) bytesLeft-->Line_56 $$ bytesLeft -= bufSize[ FD ]
Line_15 $$ while (bytesLeft > 0) -->Line_58 $$ readBuf.rewind()[ CD ]
Line_22 $$ header = readHeader(in)-->Line_30 $$ bytesRead += header.getBytesRead()[ FD ]
Line_61 $$ VerifyInfo verifyRes = verifyBuffer(readBuf, bufSize, vOffset, hasher)-->Line_63 $$ chunksDifferent += verifyRes.getDifferent()[ FD ]
Line_10 $$ long bufLeft = 0-->Line_44 $$ if (bufLeft < bufSize) [ FD ]
Line_49 $$ long startTime = Timer.now()-->Line_51 $$ readTime += Timer.elapsed(startTime)[ FD ]
Line_15 $$ while (bytesLeft > 0) -->Line_60 $$ bufRead += bufSize[ CD ]
Line_16 $$ if (bufLeft <= 0) -->Line_20 $$ ReadInfo header = null[ CD ]
Line_57 $$ bufLeft -= bufSize-->Line_44 $$ if (bufLeft < bufSize) [ FD ]
Line_9 $$ long bytesLeft = byteAm-->Line_41 $$ if (bytesLeft < bufSize) [ FD ]
Line_57 $$ bufLeft -= bufSize-->Line_33 $$ if (bufLeft > bytesLeft) [ FD ]
Line_15 $$ while (bytesLeft > 0) -->Line_56 $$ bytesLeft -= bufSize[ CD ]
Line_40 $$ int bufSize = bufferSize-->Line_56 $$ bytesLeft -= bufSize[ FD ]
Line_40 $$ int bufSize = bufferSize-->Line_57 $$ bufLeft -= bufSize[ FD ]
Line_59 $$ long vOffset = determineOffset(bufRead)-->Line_61 $$ VerifyInfo verifyRes = verifyBuffer(readBuf, bufSize, vOffset, hasher)[ FD ]
Line_42 $$ bufSize = (int) bytesLeft-->Line_55 $$ bytesRead += bufSize[ FD ]
Line_2 $$ private VerifyOutput verifyBytes(long byteAm, long bytesRead, DataInputStream in) throws IOException, BadFileException -->Line_11 $$ long bufRead = 0[ CD ]
Line_16 $$ if (bufLeft <= 0) -->Line_36 $$ if (bufLeft <= 0) [ CD ]
Line_15 $$ while (bytesLeft > 0) -->Line_55 $$ bytesRead += bufSize[ CD ]
Line_56 $$ bytesLeft -= bufSize-->Line_15 $$ while (bytesLeft > 0) [ FD ]
Line_2 $$ private VerifyOutput verifyBytes(long byteAm, long bytesRead, DataInputStream in) throws IOException, BadFileException -->Line_65 $$ return new VerifyOutput(chunksSame, chunksDifferent, bytesRead, readTime)[ CD ]
Line_34 $$ bufLeft = bytesLeft-->Line_36 $$ if (bufLeft <= 0) [ FD ]
Line_31 $$ bytesLeft -= header.getBytesRead()-->Line_34 $$ bufLeft = bytesLeft[ FD ]
Line_33 $$ if (bufLeft > bytesLeft) -->Line_34 $$ bufLeft = bytesLeft[ CD ]
Line_31 $$ bytesLeft -= header.getBytesRead()-->Line_41 $$ if (bytesLeft < bufSize) [ FD ]
Line_8 $$ long readTime = 0-->Line_29 $$ readTime += header.getTimeTaken()[ FD ]
Line_28 $$ bufLeft = header.getByteAm()-->Line_36 $$ if (bufLeft <= 0) [ FD ]
Line_40 $$ int bufSize = bufferSize-->Line_60 $$ bufRead += bufSize[ FD ]
Line_45 $$ bufSize = (int) bufLeft-->Line_55 $$ bytesRead += bufSize[ FD ]
Line_42 $$ bufSize = (int) bytesLeft-->Line_57 $$ bufLeft -= bufSize[ FD ]
Line_15 $$ while (bytesLeft > 0) -->Line_57 $$ bufLeft -= bufSize[ CD ]
Line_61 $$ VerifyInfo verifyRes = verifyBuffer(readBuf, bufSize, vOffset, hasher)-->Line_62 $$ chunksSame += verifyRes.getSame()[ FD ]
Line_31 $$ bytesLeft -= header.getBytesRead()-->Line_33 $$ if (bufLeft > bytesLeft) [ FD ]
Line_9 $$ long bytesLeft = byteAm-->Line_17 $$ if (bytesLeft < DataWriter.getHeaderLength()) [ FD ]
Line_11 $$ long bufRead = 0-->Line_60 $$ bufRead += bufSize[ FD ]
Line_56 $$ bytesLeft -= bufSize-->Line_33 $$ if (bufLeft > bytesLeft) [ FD ]
Line_34 $$ bufLeft = bytesLeft-->Line_33 $$ if (bufLeft > bytesLeft) [ FD ]
Line_22 $$ header = readHeader(in)-->Line_28 $$ bufLeft = header.getByteAm()[ FD ]
Line_7 $$ long chunksDifferent = 0-->Line_63 $$ chunksDifferent += verifyRes.getDifferent()[ FD ]
Line_45 $$ bufSize = (int) bufLeft-->Line_60 $$ bufRead += bufSize[ FD ]
Line_15 $$ while (bytesLeft > 0) -->Line_63 $$ chunksDifferent += verifyRes.getDifferent()[ CD ]
Line_11 $$ long bufRead = 0-->Line_59 $$ long vOffset = determineOffset(bufRead)[ FD ]
Line_22 $$ header = readHeader(in)-->Line_27 $$ hasher = new DataHasher(header.getHashValue())[ FD ]
Line_45 $$ bufSize = (int) bufLeft-->Line_57 $$ bufLeft -= bufSize[ FD ]
Line_2 $$ private VerifyOutput verifyBytes(long byteAm, long bytesRead, DataInputStream in) throws IOException, BadFileException -->Line_7 $$ long chunksDifferent = 0[ CD ]
Line_10 $$ long bufLeft = 0-->Line_34 $$ bufLeft = bytesLeft[ FD ]
Line_20 $$ ReadInfo header = null-->Line_31 $$ bytesLeft -= header.getBytesRead()[ FD ]
Line_28 $$ bufLeft = header.getByteAm()-->Line_34 $$ bufLeft = bytesLeft[ FD ]
Line_22 $$ header = readHeader(in)-->Line_31 $$ bytesLeft -= header.getBytesRead()[ FD ]
Line_16 $$ if (bufLeft <= 0) -->Line_17 $$ if (bytesLeft < DataWriter.getHeaderLength()) [ CD ]
Line_2 $$ private VerifyOutput verifyBytes(long byteAm, long bytesRead, DataInputStream in) throws IOException, BadFileException -->Line_8 $$ long readTime = 0[ CD ]
Line_15 $$ while (bytesLeft > 0) -->Line_41 $$ if (bytesLeft < bufSize) [ CD ]
Line_2 $$ private VerifyOutput verifyBytes(long byteAm, long bytesRead, DataInputStream in) throws IOException, BadFileException -->Line_14 $$ ByteBuffer readBuf = ByteBuffer.wrap(new byte[bufferSize])[ CD ]
Line_20 $$ ReadInfo header = null-->Line_29 $$ readTime += header.getTimeTaken()[ FD ]
Line_15 $$ while (bytesLeft > 0) -->Line_44 $$ if (bufLeft < bufSize) [ CD ]
Line_14 $$ ByteBuffer readBuf = ByteBuffer.wrap(new byte[bufferSize])-->Line_58 $$ readBuf.rewind()[ FD ]
Line_8 $$ long readTime = 0-->Line_51 $$ readTime += Timer.elapsed(startTime)[ FD ]
Line_2 $$ private VerifyOutput verifyBytes(long byteAm, long bytesRead, DataInputStream in) throws IOException, BadFileException -->Line_6 $$ long chunksSame = 0[ CD ]
Line_13 $$ DataHasher hasher = null-->Line_27 $$ hasher = new DataHasher(header.getHashValue())[ FD ]
Line_44 $$ if (bufLeft < bufSize) -->Line_45 $$ bufSize = (int) bufLeft[ CD ]
Line_3 $$ if (byteAm <= 0) -->Line_4 $$ return new VerifyOutput(0, 0, 0, 0)[ CD ]
Line_31 $$ bytesLeft -= header.getBytesRead()-->Line_56 $$ bytesLeft -= bufSize[ FD ]
Line_15 $$ while (bytesLeft > 0) -->Line_62 $$ chunksSame += verifyRes.getSame()[ CD ]
Line_12 $$ long seqNum = 0-->Line_26 $$ ++seqNum[ FD ]
Line_2 $$ private VerifyOutput verifyBytes(long byteAm, long bytesRead, DataInputStream in) throws IOException, BadFileException -->Line_55 $$ bytesRead += bufSize[ FD ]
Line_14 $$ ByteBuffer readBuf = ByteBuffer.wrap(new byte[bufferSize])-->Line_50 $$ in.readFully(readBuf.array(), 0, bufSize)[ FD ]
Line_2 $$ private VerifyOutput verifyBytes(long byteAm, long bytesRead, DataInputStream in) throws IOException, BadFileException -->Line_15 $$ while (bytesLeft > 0) [ CD ]
Line_28 $$ bufLeft = header.getByteAm()-->Line_44 $$ if (bufLeft < bufSize) [ FD ]
Line_15 $$ while (bytesLeft > 0) -->Line_40 $$ int bufSize = bufferSize[ CD ]
Line_42 $$ bufSize = (int) bytesLeft-->Line_61 $$ VerifyInfo verifyRes = verifyBuffer(readBuf, bufSize, vOffset, hasher)[ FD ]
Line_45 $$ bufSize = (int) bufLeft-->Line_41 $$ if (bytesLeft < bufSize) [ FD ]
Line_20 $$ ReadInfo header = null-->Line_28 $$ bufLeft = header.getByteAm()[ FD ]
Line_2 $$ private VerifyOutput verifyBytes(long byteAm, long bytesRead, DataInputStream in) throws IOException, BadFileException -->Line_30 $$ bytesRead += header.getBytesRead()[ FD ]
Line_28 $$ bufLeft = header.getByteAm()-->Line_33 $$ if (bufLeft > bytesLeft) [ FD ]
Line_34 $$ bufLeft = bytesLeft-->Line_44 $$ if (bufLeft < bufSize) [ FD ]
Line_34 $$ bufLeft = bytesLeft-->Line_16 $$ if (bufLeft <= 0) [ FD ]
Line_2 $$ private VerifyOutput verifyBytes(long byteAm, long bytesRead, DataInputStream in) throws IOException, BadFileException -->Line_13 $$ DataHasher hasher = null[ CD ]
Line_2 $$ private VerifyOutput verifyBytes(long byteAm, long bytesRead, DataInputStream in) throws IOException, BadFileException -->Line_10 $$ long bufLeft = 0[ CD ]
Line_6 $$ long chunksSame = 0-->Line_62 $$ chunksSame += verifyRes.getSame()[ FD ]
Line_14 $$ ByteBuffer readBuf = ByteBuffer.wrap(new byte[bufferSize])-->Line_48 $$ readBuf.rewind()[ FD ]
Line_32 $$ bufRead = 0-->Line_59 $$ long vOffset = determineOffset(bufRead)[ FD ]
Line_41 $$ if (bytesLeft < bufSize) -->Line_42 $$ bufSize = (int) bytesLeft[ CD ]
Line_15 $$ while (bytesLeft > 0) -->Line_59 $$ long vOffset = determineOffset(bufRead)[ CD ]
Line_22 $$ header = readHeader(in)-->Line_29 $$ readTime += header.getTimeTaken()[ FD ]
Line_20 $$ ReadInfo header = null-->Line_22 $$ header = readHeader(in)[ FD ]
Line_31 $$ bytesLeft -= header.getBytesRead()-->Line_17 $$ if (bytesLeft < DataWriter.getHeaderLength()) [ FD ]
Line_16 $$ if (bufLeft <= 0) -->Line_31 $$ bytesLeft -= header.getBytesRead()[ CD ]
Line_9 $$ long bytesLeft = byteAm-->Line_33 $$ if (bufLeft > bytesLeft) [ FD ]
Line_9 $$ long bytesLeft = byteAm-->Line_34 $$ bufLeft = bytesLeft[ FD ]
Line_9 $$ long bytesLeft = byteAm-->Line_56 $$ bytesLeft -= bufSize[ FD ]
Line_45 $$ bufSize = (int) bufLeft-->Line_56 $$ bytesLeft -= bufSize[ FD ]
Line_28 $$ bufLeft = header.getByteAm()-->Line_16 $$ if (bufLeft <= 0) [ FD ]
Line_42 $$ bufSize = (int) bytesLeft-->Line_44 $$ if (bufLeft < bufSize) [ FD ]
Line_30 $$ bytesRead += header.getBytesRead()-->Line_55 $$ bytesRead += bufSize[ FD ]
Line_60 $$ bufRead += bufSize-->Line_59 $$ long vOffset = determineOffset(bufRead)[ FD ]
Line_2 $$ private VerifyOutput verifyBytes(long byteAm, long bytesRead, DataInputStream in) throws IOException, BadFileException -->Line_3 $$ if (byteAm <= 0) [ CD ]
Line_32 $$ bufRead = 0-->Line_60 $$ bufRead += bufSize[ FD ]
Line_42 $$ bufSize = (int) bytesLeft-->Line_41 $$ if (bytesLeft < bufSize) [ FD ]
