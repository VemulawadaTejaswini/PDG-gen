Line_3 $$ final ByteBuffer buf = ByteBuffer.wrap(bytes)-->Line_11 $$ int read = Math.min(dst.remaining(), buf.remaining())[ FD ]
Line_4 $$ return new ReadableByteChannel() -->Line_11 $$ int read = Math.min(dst.remaining(), buf.remaining())[ FD ]
Line_4 $$ return new ReadableByteChannel() -->Line_13 $$ dst.put(buf)[ FD ]
Line_3 $$ final ByteBuffer buf = ByteBuffer.wrap(bytes)-->Line_13 $$ dst.put(buf)[ FD ]
Line_4 $$ return new ReadableByteChannel() -->Line_11 $$ int read = Math.min(dst.remaining(), buf.remaining())[ CD ]
Line_4 $$ return new ReadableByteChannel() -->Line_6 $$ return false[ CD ]
Line_3 $$ final ByteBuffer buf = ByteBuffer.wrap(bytes)-->Line_12 $$ buf.limit(buf.position() + read)[ FD ]
Line_4 $$ return new ReadableByteChannel() -->Line_13 $$ dst.put(buf)[ CD ]
Line_3 $$ final ByteBuffer buf = ByteBuffer.wrap(bytes)-->Line_14 $$ buf.limit(buf.capacity())[ FD ]
Line_2 $$ private static ReadableByteChannel wrap(final byte[] bytes) -->Line_3 $$ final ByteBuffer buf = ByteBuffer.wrap(bytes)[ CD ]
Line_2 $$ private static ReadableByteChannel wrap(final byte[] bytes) -->Line_4 $$ return new ReadableByteChannel() [ CD ]
Line_4 $$ return new ReadableByteChannel() -->Line_15 $$ return read == 0 ? -1 : read[ CD ]
Line_4 $$ return new ReadableByteChannel() -->Line_12 $$ buf.limit(buf.position() + read)[ CD ]
Line_2 $$ private static ReadableByteChannel wrap(final byte[] bytes) -->Line_3 $$ final ByteBuffer buf = ByteBuffer.wrap(bytes)[ FD ]
Line_4 $$ return new ReadableByteChannel() -->Line_14 $$ buf.limit(buf.capacity())[ CD ]
