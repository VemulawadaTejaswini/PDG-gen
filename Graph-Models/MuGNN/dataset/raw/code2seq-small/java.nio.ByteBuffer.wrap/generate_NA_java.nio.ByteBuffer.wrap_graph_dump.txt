Line_5 $$ int size = (int) sizeDistribution.next()-->Line_14 $$ return ByteBuffer.wrap(Arrays.copyOf(bytes, size))[ FD ]
Line_6 $$ for (int i = 0; i < size; i += 16) -->Line_7 $$ long value = identityDistribution.next()[ CD ]
Line_2 $$ public ByteBuffer generate() -->Line_3 $$ long seed = identityDistribution.next()[ CD ]
Line_8 $$ for (int j = 0; j < 16 && i + j < size; j++) -->Line_10 $$ bytes[i + j] = (byte) ((v < 10 ? '0' : 'A') + v)[ CD ]
Line_8 $$ for (int j = 0; j < 16 && i + j < size; j++) -->Line_9 $$ int v = (int) (value & 15)[ CD ]
Line_5 $$ int size = (int) sizeDistribution.next()-->Line_6 $$ for (int i = 0; i < size; i += 16) [ FD ]
Line_8 $$ for (int j = 0; j < 16 && i + j < size; j++) -->Line_11 $$ value >>>= 4[ CD ]
Line_2 $$ public ByteBuffer generate() -->Line_4 $$ sizeDistribution.setSeed(seed)[ CD ]
Line_2 $$ public ByteBuffer generate() -->Line_14 $$ return ByteBuffer.wrap(Arrays.copyOf(bytes, size))[ CD ]
Line_6 $$ for (int i = 0; i < size; i += 16) -->Line_8 $$ for (int j = 0; j < 16 && i + j < size; j++) [ CD ]
Line_7 $$ long value = identityDistribution.next()-->Line_11 $$ value >>>= 4[ FD ]
Line_2 $$ public ByteBuffer generate() -->Line_6 $$ for (int i = 0; i < size; i += 16) [ CD ]
Line_2 $$ public ByteBuffer generate() -->Line_5 $$ int size = (int) sizeDistribution.next()[ CD ]
Line_3 $$ long seed = identityDistribution.next()-->Line_4 $$ sizeDistribution.setSeed(seed)[ FD ]
