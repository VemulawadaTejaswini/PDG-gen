Line_2 $$ public void testOOOWrites() throws IOException, InterruptedException -->Line_14 $$ config.setInt("nfs3.mountd.port", 0)[ CD ]
Line_29 $$ FileHandle handle = createRsp.getObjHandle()-->Line_41 $$ waitWrite(nfsd, handle, 60000)[ FD ]
Line_37 $$ XDR writeXdr = new XDR()-->Line_38 $$ writeReq.serialize(writeXdr)[ FD ]
Line_2 $$ public void testOOOWrites() throws IOException, InterruptedException -->Line_13 $$ ProxyUsers.refreshSuperUserGroupsConfiguration(config)[ CD ]
Line_10 $$ String currentUser = System.getProperty("user.name")-->Line_11 $$ config.set(DefaultImpersonationProvider.getTestProvider().getProxySuperuserGroupConfKey(currentUser), "*")[ FD ]
Line_3 $$ NfsConfiguration config = new NfsConfiguration()-->Line_15 $$ config.setInt("nfs3.server.port", 0)[ FD ]
Line_2 $$ public void testOOOWrites() throws IOException, InterruptedException -->Line_10 $$ String currentUser = System.getProperty("user.name")[ CD ]
Line_22 $$ DFSClient dfsClient = new DFSClient(NameNode.getAddress(config), config)-->Line_23 $$ HdfsFileStatus status = dfsClient.getFileInfo("/")[ FD ]
Line_8 $$ SecurityHandler securityHandler = Mockito.mock(SecurityHandler.class)-->Line_39 $$ nfsd.write(writeXdr.asReadOnlyWrap(), null, 1, securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_10 $$ String currentUser = System.getProperty("user.name")-->Line_12 $$ config.set(DefaultImpersonationProvider.getTestProvider().getProxySuperuserIpConfKey(currentUser), "*")[ FD ]
Line_19 $$ Nfs3 nfs3 = new Nfs3(config)-->Line_21 $$ nfsd = (RpcProgramNfs3) nfs3.getRpcProgram()[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_17 $$ cluster = new MiniDFSCluster.Builder(config).numDataNodes(1).build()[ FD ]
Line_42 $$ READ3Request readReq = new READ3Request(handle, bufSize, bufSize)-->Line_44 $$ readReq.serialize(readXdr)[ FD ]
Line_2 $$ public void testOOOWrites() throws IOException, InterruptedException -->Line_6 $$ final int bufSize = 32[ CD ]
Line_36 $$ WRITE3Request writeReq = new WRITE3Request(handle, offset, bufSize, WriteStableHow.UNSTABLE, ByteBuffer.wrap(oooBuf[i]))-->Line_38 $$ writeReq.serialize(writeXdr)[ FD ]
Line_2 $$ public void testOOOWrites() throws IOException, InterruptedException -->Line_8 $$ SecurityHandler securityHandler = Mockito.mock(SecurityHandler.class)[ CD ]
Line_2 $$ public void testOOOWrites() throws IOException, InterruptedException -->Line_3 $$ NfsConfiguration config = new NfsConfiguration()[ CD ]
Line_3 $$ NfsConfiguration config = new NfsConfiguration()-->Line_12 $$ config.set(DefaultImpersonationProvider.getTestProvider().getProxySuperuserIpConfKey(currentUser), "*")[ FD ]
Line_2 $$ public void testOOOWrites() throws IOException, InterruptedException -->Line_4 $$ MiniDFSCluster cluster = null[ CD ]
Line_26 $$ XDR createXdr = new XDR()-->Line_28 $$ CREATE3Response createRsp = nfsd.create(createXdr.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_34 $$ for (int i = 0; i < numOOO; i++) -->Line_39 $$ nfsd.write(writeXdr.asReadOnlyWrap(), null, 1, securityHandler, new InetSocketAddress("localhost", 1234))[ CD ]
Line_37 $$ XDR writeXdr = new XDR()-->Line_39 $$ nfsd.write(writeXdr.asReadOnlyWrap(), null, 1, securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_17 $$ cluster = new MiniDFSCluster.Builder(config).numDataNodes(1).build()-->Line_48 $$ if (cluster != null) [ FD ]
Line_28 $$ CREATE3Response createRsp = nfsd.create(createXdr.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", 1234))-->Line_29 $$ FileHandle handle = createRsp.getObjHandle()[ FD ]
Line_7 $$ final int numOOO = 3-->Line_34 $$ for (int i = 0; i < numOOO; i++) [ FD ]
Line_3 $$ NfsConfiguration config = new NfsConfiguration()-->Line_14 $$ config.setInt("nfs3.mountd.port", 0)[ FD ]
Line_21 $$ nfsd = (RpcProgramNfs3) nfs3.getRpcProgram()-->Line_41 $$ waitWrite(nfsd, handle, 60000)[ FD ]
Line_2 $$ public void testOOOWrites() throws IOException, InterruptedException -->Line_7 $$ final int numOOO = 3[ CD ]
Line_17 $$ cluster = new MiniDFSCluster.Builder(config).numDataNodes(1).build()-->Line_18 $$ cluster.waitActive()[ FD ]
Line_2 $$ public void testOOOWrites() throws IOException, InterruptedException -->Line_15 $$ config.setInt("nfs3.server.port", 0)[ CD ]
Line_19 $$ Nfs3 nfs3 = new Nfs3(config)-->Line_20 $$ nfs3.startServiceInternal(false)[ FD ]
Line_21 $$ nfsd = (RpcProgramNfs3) nfs3.getRpcProgram()-->Line_39 $$ nfsd.write(writeXdr.asReadOnlyWrap(), null, 1, securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_5 $$ RpcProgramNfs3 nfsd-->Line_45 $$ READ3Response readRsp = nfsd.read(readXdr.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", config.getInt(NfsConfigKeys.DFS_NFS_SERVER_PORT_KEY, NfsConfigKeys.DFS_NFS_SERVER_PORT_DEFAULT)))[ FD ]
Line_3 $$ NfsConfiguration config = new NfsConfiguration()-->Line_13 $$ ProxyUsers.refreshSuperUserGroupsConfiguration(config)[ FD ]
Line_5 $$ RpcProgramNfs3 nfsd-->Line_39 $$ nfsd.write(writeXdr.asReadOnlyWrap(), null, 1, securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_2 $$ public void testOOOWrites() throws IOException, InterruptedException -->Line_11 $$ config.set(DefaultImpersonationProvider.getTestProvider().getProxySuperuserGroupConfKey(currentUser), "*")[ CD ]
Line_2 $$ public void testOOOWrites() throws IOException, InterruptedException -->Line_12 $$ config.set(DefaultImpersonationProvider.getTestProvider().getProxySuperuserIpConfKey(currentUser), "*")[ CD ]
Line_25 $$ CREATE3Request createReq = new CREATE3Request(rootHandle, "out-of-order-write" + System.currentTimeMillis(), Nfs3Constant.CREATE_UNCHECKED, new SetAttr3(), 0)-->Line_27 $$ createReq.serialize(createXdr)[ FD ]
Line_7 $$ final int numOOO = 3-->Line_31 $$ for (int i = 0; i < numOOO; i++) [ FD ]
Line_31 $$ for (int i = 0; i < numOOO; i++) -->Line_34 $$ for (int i = 0; i < numOOO; i++) [ FD ]
Line_5 $$ RpcProgramNfs3 nfsd-->Line_41 $$ waitWrite(nfsd, handle, 60000)[ FD ]
Line_8 $$ SecurityHandler securityHandler = Mockito.mock(SecurityHandler.class)-->Line_28 $$ CREATE3Response createRsp = nfsd.create(createXdr.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_5 $$ RpcProgramNfs3 nfsd-->Line_28 $$ CREATE3Response createRsp = nfsd.create(createXdr.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_31 $$ for (int i = 0; i < numOOO; i++) -->Line_32 $$ Arrays.fill(oooBuf[i], (byte) i)[ CD ]
Line_34 $$ for (int i = 0; i < numOOO; i++) -->Line_38 $$ writeReq.serialize(writeXdr)[ CD ]
Line_2 $$ public void testOOOWrites() throws IOException, InterruptedException -->Line_9 $$ Mockito.when(securityHandler.getUser()).thenReturn(System.getProperty("user.name"))[ CD ]
Line_43 $$ XDR readXdr = new XDR()-->Line_45 $$ READ3Response readRsp = nfsd.read(readXdr.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", config.getInt(NfsConfigKeys.DFS_NFS_SERVER_PORT_KEY, NfsConfigKeys.DFS_NFS_SERVER_PORT_DEFAULT)))[ FD ]
Line_43 $$ XDR readXdr = new XDR()-->Line_44 $$ readReq.serialize(readXdr)[ FD ]
Line_26 $$ XDR createXdr = new XDR()-->Line_27 $$ createReq.serialize(createXdr)[ FD ]
Line_3 $$ NfsConfiguration config = new NfsConfiguration()-->Line_11 $$ config.set(DefaultImpersonationProvider.getTestProvider().getProxySuperuserGroupConfKey(currentUser), "*")[ FD ]
Line_2 $$ public void testOOOWrites() throws IOException, InterruptedException -->Line_5 $$ RpcProgramNfs3 nfsd[ CD ]
Line_8 $$ SecurityHandler securityHandler = Mockito.mock(SecurityHandler.class)-->Line_45 $$ READ3Response readRsp = nfsd.read(readXdr.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", config.getInt(NfsConfigKeys.DFS_NFS_SERVER_PORT_KEY, NfsConfigKeys.DFS_NFS_SERVER_PORT_DEFAULT)))[ FD ]
Line_48 $$ if (cluster != null) -->Line_49 $$ cluster.shutdown()[ CD ]
Line_5 $$ RpcProgramNfs3 nfsd-->Line_21 $$ nfsd = (RpcProgramNfs3) nfs3.getRpcProgram()[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_49 $$ cluster.shutdown()[ FD ]
Line_34 $$ for (int i = 0; i < numOOO; i++) -->Line_35 $$ final long offset = (numOOO - 1 - i) * bufSize[ CD ]
Line_34 $$ for (int i = 0; i < numOOO; i++) -->Line_36 $$ WRITE3Request writeReq = new WRITE3Request(handle, offset, bufSize, WriteStableHow.UNSTABLE, ByteBuffer.wrap(oooBuf[i]))[ CD ]
Line_3 $$ NfsConfiguration config = new NfsConfiguration()-->Line_45 $$ READ3Response readRsp = nfsd.read(readXdr.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", config.getInt(NfsConfigKeys.DFS_NFS_SERVER_PORT_KEY, NfsConfigKeys.DFS_NFS_SERVER_PORT_DEFAULT)))[ FD ]
Line_8 $$ SecurityHandler securityHandler = Mockito.mock(SecurityHandler.class)-->Line_9 $$ Mockito.when(securityHandler.getUser()).thenReturn(System.getProperty("user.name"))[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_48 $$ if (cluster != null) [ FD ]
Line_45 $$ READ3Response readRsp = nfsd.read(readXdr.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", config.getInt(NfsConfigKeys.DFS_NFS_SERVER_PORT_KEY, NfsConfigKeys.DFS_NFS_SERVER_PORT_DEFAULT)))-->Line_46 $$ assertTrue(Arrays.equals(oooBuf[1], readRsp.getData().array()))[ FD ]
Line_17 $$ cluster = new MiniDFSCluster.Builder(config).numDataNodes(1).build()-->Line_49 $$ cluster.shutdown()[ FD ]
Line_3 $$ NfsConfiguration config = new NfsConfiguration()-->Line_22 $$ DFSClient dfsClient = new DFSClient(NameNode.getAddress(config), config)[ FD ]
Line_21 $$ nfsd = (RpcProgramNfs3) nfs3.getRpcProgram()-->Line_45 $$ READ3Response readRsp = nfsd.read(readXdr.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", config.getInt(NfsConfigKeys.DFS_NFS_SERVER_PORT_KEY, NfsConfigKeys.DFS_NFS_SERVER_PORT_DEFAULT)))[ FD ]
Line_34 $$ for (int i = 0; i < numOOO; i++) -->Line_37 $$ XDR writeXdr = new XDR()[ CD ]
Line_21 $$ nfsd = (RpcProgramNfs3) nfs3.getRpcProgram()-->Line_28 $$ CREATE3Response createRsp = nfsd.create(createXdr.asReadOnlyWrap(), securityHandler, new InetSocketAddress("localhost", 1234))[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_18 $$ cluster.waitActive()[ FD ]
Line_23 $$ HdfsFileStatus status = dfsClient.getFileInfo("/")-->Line_24 $$ FileHandle rootHandle = new FileHandle(status.getFileId())[ FD ]
