Line_2 $$ public void testByteBuffers() -->Line_4 $$ ThreadLocalRandom.current().nextBytes(bytes)[ CD ]
Line_7 $$ ByteBuffer canon = ByteBuffer.wrap(bytes).order(ByteOrder.nativeOrder())-->Line_11 $$ test(canon, memory)[ FD ]
Line_2 $$ public void testByteBuffers() -->Line_5 $$ final Memory memory = Memory.allocate(bytes.length)[ CD ]
Line_2 $$ public void testByteBuffers() -->Line_11 $$ test(canon, memory)[ CD ]
Line_2 $$ public void testByteBuffers() -->Line_10 $$ memory.setBytes(0, canon.duplicate())[ CD ]
Line_2 $$ public void testByteBuffers() -->Line_9 $$ memory.setBytes(0, new byte[1000], 0, 1000)[ CD ]
Line_5 $$ final Memory memory = Memory.allocate(bytes.length)-->Line_11 $$ test(canon, memory)[ FD ]
Line_7 $$ ByteBuffer canon = ByteBuffer.wrap(bytes).order(ByteOrder.nativeOrder())-->Line_10 $$ memory.setBytes(0, canon.duplicate())[ FD ]
Line_5 $$ final Memory memory = Memory.allocate(bytes.length)-->Line_10 $$ memory.setBytes(0, canon.duplicate())[ FD ]
Line_2 $$ public void testByteBuffers() -->Line_12 $$ memory.close()[ CD ]
Line_2 $$ public void testByteBuffers() -->Line_7 $$ ByteBuffer canon = ByteBuffer.wrap(bytes).order(ByteOrder.nativeOrder())[ CD ]
Line_3 $$ byte[] bytes = new byte[1000]-->Line_6 $$ memory.setBytes(0, bytes, 0, bytes.length)[ FD ]
Line_5 $$ final Memory memory = Memory.allocate(bytes.length)-->Line_8 $$ test(canon, memory)[ FD ]
Line_2 $$ public void testByteBuffers() -->Line_8 $$ test(canon, memory)[ CD ]
Line_5 $$ final Memory memory = Memory.allocate(bytes.length)-->Line_9 $$ memory.setBytes(0, new byte[1000], 0, 1000)[ FD ]
Line_3 $$ byte[] bytes = new byte[1000]-->Line_7 $$ ByteBuffer canon = ByteBuffer.wrap(bytes).order(ByteOrder.nativeOrder())[ FD ]
Line_3 $$ byte[] bytes = new byte[1000]-->Line_4 $$ ThreadLocalRandom.current().nextBytes(bytes)[ FD ]
Line_2 $$ public void testByteBuffers() -->Line_3 $$ byte[] bytes = new byte[1000][ CD ]
Line_2 $$ public void testByteBuffers() -->Line_6 $$ memory.setBytes(0, bytes, 0, bytes.length)[ CD ]
Line_7 $$ ByteBuffer canon = ByteBuffer.wrap(bytes).order(ByteOrder.nativeOrder())-->Line_8 $$ test(canon, memory)[ FD ]
Line_5 $$ final Memory memory = Memory.allocate(bytes.length)-->Line_6 $$ memory.setBytes(0, bytes, 0, bytes.length)[ FD ]
Line_5 $$ final Memory memory = Memory.allocate(bytes.length)-->Line_12 $$ memory.close()[ FD ]
