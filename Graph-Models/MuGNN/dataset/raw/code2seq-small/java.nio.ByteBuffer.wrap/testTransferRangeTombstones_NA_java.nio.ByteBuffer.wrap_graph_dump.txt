Line_9 $$ RowUpdateBuilder updates = new RowUpdateBuilder(cfs.metadata, FBUtilities.timestampMicros(), key)-->Line_13 $$ updates = new RowUpdateBuilder(cfs.metadata, FBUtilities.timestampMicros() + 1, key)[ FD ]
Line_6 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)-->Line_7 $$ ClusteringComparator comparator = cfs.getComparator()[ FD ]
Line_2 $$ public void testTransferRangeTombstones() throws Exception -->Line_11 $$ updates = new RowUpdateBuilder(cfs.metadata, FBUtilities.timestampMicros(), key)[ CD ]
Line_2 $$ public void testTransferRangeTombstones() throws Exception -->Line_14 $$ updates.addRangeTombstone(Slice.make(comparator.make(5), comparator.make(7))).build().apply()[ CD ]
Line_2 $$ public void testTransferRangeTombstones() throws Exception -->Line_22 $$ Assert.assertTrue(1 == Int32Type.instance.compose(r.clustering().get(0)))[ CD ]
Line_2 $$ public void testTransferRangeTombstones() throws Exception -->Line_12 $$ updates.clustering(6).add("val", ByteBuffer.wrap(new byte[DatabaseDescriptor.getColumnIndexSize()])).build().apply()[ CD ]
Line_2 $$ public void testTransferRangeTombstones() throws Exception -->Line_21 $$ Assert.assertFalse(r.isEmpty())[ CD ]
Line_6 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)-->Line_17 $$ cfs.clearUnsafe()[ FD ]
Line_2 $$ public void testTransferRangeTombstones() throws Exception -->Line_18 $$ transferSSTables(sstable)[ CD ]
Line_16 $$ SSTableReader sstable = cfs.getLiveSSTables().iterator().next()-->Line_18 $$ transferSSTables(sstable)[ FD ]
Line_2 $$ public void testTransferRangeTombstones() throws Exception -->Line_13 $$ updates = new RowUpdateBuilder(cfs.metadata, FBUtilities.timestampMicros() + 1, key)[ CD ]
Line_20 $$ Row r = Util.getOnlyRow(Util.cmd(cfs).build())-->Line_22 $$ Assert.assertTrue(1 == Int32Type.instance.compose(r.clustering().get(0)))[ FD ]
Line_7 $$ ClusteringComparator comparator = cfs.getComparator()-->Line_14 $$ updates.addRangeTombstone(Slice.make(comparator.make(5), comparator.make(7))).build().apply()[ FD ]
Line_9 $$ RowUpdateBuilder updates = new RowUpdateBuilder(cfs.metadata, FBUtilities.timestampMicros(), key)-->Line_12 $$ updates.clustering(6).add("val", ByteBuffer.wrap(new byte[DatabaseDescriptor.getColumnIndexSize()])).build().apply()[ FD ]
Line_9 $$ RowUpdateBuilder updates = new RowUpdateBuilder(cfs.metadata, FBUtilities.timestampMicros(), key)-->Line_11 $$ updates = new RowUpdateBuilder(cfs.metadata, FBUtilities.timestampMicros(), key)[ FD ]
Line_2 $$ public void testTransferRangeTombstones() throws Exception -->Line_19 $$ assertEquals(1, cfs.getLiveSSTables().size())[ CD ]
Line_2 $$ public void testTransferRangeTombstones() throws Exception -->Line_6 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)[ CD ]
Line_11 $$ updates = new RowUpdateBuilder(cfs.metadata, FBUtilities.timestampMicros(), key)-->Line_14 $$ updates.addRangeTombstone(Slice.make(comparator.make(5), comparator.make(7))).build().apply()[ FD ]
Line_2 $$ public void testTransferRangeTombstones() throws Exception -->Line_15 $$ cfs.forceBlockingFlush()[ CD ]
Line_5 $$ Keyspace keyspace = Keyspace.open(ks)-->Line_6 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)[ FD ]
Line_6 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)-->Line_19 $$ assertEquals(1, cfs.getLiveSSTables().size())[ FD ]
Line_20 $$ Row r = Util.getOnlyRow(Util.cmd(cfs).build())-->Line_21 $$ Assert.assertFalse(r.isEmpty())[ FD ]
Line_13 $$ updates = new RowUpdateBuilder(cfs.metadata, FBUtilities.timestampMicros() + 1, key)-->Line_14 $$ updates.addRangeTombstone(Slice.make(comparator.make(5), comparator.make(7))).build().apply()[ FD ]
Line_2 $$ public void testTransferRangeTombstones() throws Exception -->Line_7 $$ ClusteringComparator comparator = cfs.getComparator()[ CD ]
Line_2 $$ public void testTransferRangeTombstones() throws Exception -->Line_16 $$ SSTableReader sstable = cfs.getLiveSSTables().iterator().next()[ CD ]
Line_3 $$ String ks = KEYSPACE1-->Line_5 $$ Keyspace keyspace = Keyspace.open(ks)[ FD ]
Line_2 $$ public void testTransferRangeTombstones() throws Exception -->Line_20 $$ Row r = Util.getOnlyRow(Util.cmd(cfs).build())[ CD ]
Line_2 $$ public void testTransferRangeTombstones() throws Exception -->Line_3 $$ String ks = KEYSPACE1[ CD ]
Line_9 $$ RowUpdateBuilder updates = new RowUpdateBuilder(cfs.metadata, FBUtilities.timestampMicros(), key)-->Line_14 $$ updates.addRangeTombstone(Slice.make(comparator.make(5), comparator.make(7))).build().apply()[ FD ]
Line_2 $$ public void testTransferRangeTombstones() throws Exception -->Line_10 $$ updates.clustering(1).add("val", ByteBuffer.wrap(new byte[DatabaseDescriptor.getColumnIndexSize() - 64])).build().apply()[ CD ]
Line_2 $$ public void testTransferRangeTombstones() throws Exception -->Line_5 $$ Keyspace keyspace = Keyspace.open(ks)[ CD ]
Line_2 $$ public void testTransferRangeTombstones() throws Exception -->Line_4 $$ String cfname = "StandardInteger1"[ CD ]
Line_4 $$ String cfname = "StandardInteger1"-->Line_6 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)[ FD ]
Line_9 $$ RowUpdateBuilder updates = new RowUpdateBuilder(cfs.metadata, FBUtilities.timestampMicros(), key)-->Line_10 $$ updates.clustering(1).add("val", ByteBuffer.wrap(new byte[DatabaseDescriptor.getColumnIndexSize() - 64])).build().apply()[ FD ]
Line_2 $$ public void testTransferRangeTombstones() throws Exception -->Line_17 $$ cfs.clearUnsafe()[ CD ]
Line_11 $$ updates = new RowUpdateBuilder(cfs.metadata, FBUtilities.timestampMicros(), key)-->Line_13 $$ updates = new RowUpdateBuilder(cfs.metadata, FBUtilities.timestampMicros() + 1, key)[ FD ]
Line_2 $$ public void testTransferRangeTombstones() throws Exception -->Line_9 $$ RowUpdateBuilder updates = new RowUpdateBuilder(cfs.metadata, FBUtilities.timestampMicros(), key)[ CD ]
Line_11 $$ updates = new RowUpdateBuilder(cfs.metadata, FBUtilities.timestampMicros(), key)-->Line_12 $$ updates.clustering(6).add("val", ByteBuffer.wrap(new byte[DatabaseDescriptor.getColumnIndexSize()])).build().apply()[ FD ]
Line_6 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)-->Line_16 $$ SSTableReader sstable = cfs.getLiveSSTables().iterator().next()[ FD ]
Line_6 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)-->Line_15 $$ cfs.forceBlockingFlush()[ FD ]
Line_6 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)-->Line_20 $$ Row r = Util.getOnlyRow(Util.cmd(cfs).build())[ FD ]
Line_2 $$ public void testTransferRangeTombstones() throws Exception -->Line_8 $$ String key = "key1"[ CD ]
