Line_21 $$ for (int samplingLevel = 1; samplingLevel < BASE_SAMPLING_LEVEL; samplingLevel++) -->Line_22 $$ sstable = sstable.cloneWithNewSummarySamplingLevel(cfs, samplingLevel)[ CD ]
Line_2 $$ public void testRebuildAtSamplingLevel() throws IOException -->Line_16 $$ List<SSTableReader> sstables = new ArrayList(cfs.getLiveSSTables())[ CD ]
Line_16 $$ List<SSTableReader> sstables = new ArrayList(cfs.getLiveSSTables())-->Line_17 $$ assertEquals(1, sstables.size())[ FD ]
Line_9 $$ ByteBuffer value = ByteBuffer.wrap(new byte[100])-->Line_13 $$ new RowUpdateBuilder(cfs.metadata, 0, key).clustering("column").add("val", value).build().applyUnsafe()[ FD ]
Line_20 $$ try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN)) -->Line_26 $$ txn.update(sstable, true)[ FD ]
Line_5 $$ Keyspace keyspace = Keyspace.open(ksname)-->Line_6 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)[ FD ]
Line_22 $$ sstable = sstable.cloneWithNewSummarySamplingLevel(cfs, samplingLevel)-->Line_23 $$ assertEquals(samplingLevel, sstable.getIndexSummarySamplingLevel())[ FD ]
Line_6 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)-->Line_8 $$ cfs.disableAutoCompaction()[ FD ]
Line_2 $$ public void testRebuildAtSamplingLevel() throws IOException -->Line_6 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)[ CD ]
Line_19 $$ SSTableReader sstable = original-->Line_22 $$ sstable = sstable.cloneWithNewSummarySamplingLevel(cfs, samplingLevel)[ FD ]
Line_21 $$ for (int samplingLevel = 1; samplingLevel < BASE_SAMPLING_LEVEL; samplingLevel++) -->Line_22 $$ sstable = sstable.cloneWithNewSummarySamplingLevel(cfs, samplingLevel)[ FD ]
Line_21 $$ for (int samplingLevel = 1; samplingLevel < BASE_SAMPLING_LEVEL; samplingLevel++) -->Line_23 $$ assertEquals(samplingLevel, sstable.getIndexSummarySamplingLevel())[ FD ]
Line_20 $$ try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN)) -->Line_27 $$ txn.checkpoint()[ FD ]
Line_21 $$ for (int samplingLevel = 1; samplingLevel < BASE_SAMPLING_LEVEL; samplingLevel++) -->Line_26 $$ txn.update(sstable, true)[ CD ]
Line_20 $$ try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN)) -->Line_29 $$ txn.finish()[ FD ]
Line_6 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)-->Line_20 $$ try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN)) [ FD ]
Line_3 $$ String ksname = KEYSPACE1-->Line_5 $$ Keyspace keyspace = Keyspace.open(ksname)[ FD ]
Line_19 $$ SSTableReader sstable = original-->Line_23 $$ assertEquals(samplingLevel, sstable.getIndexSummarySamplingLevel())[ FD ]
Line_16 $$ List<SSTableReader> sstables = new ArrayList(cfs.getLiveSSTables())-->Line_18 $$ SSTableReader original = sstables.get(0)[ FD ]
Line_21 $$ for (int samplingLevel = 1; samplingLevel < BASE_SAMPLING_LEVEL; samplingLevel++) -->Line_23 $$ assertEquals(samplingLevel, sstable.getIndexSummarySamplingLevel())[ CD ]
Line_2 $$ public void testRebuildAtSamplingLevel() throws IOException -->Line_4 $$ String cfname = CF_STANDARDLOWiINTERVAL[ CD ]
Line_2 $$ public void testRebuildAtSamplingLevel() throws IOException -->Line_3 $$ String ksname = KEYSPACE1[ CD ]
Line_21 $$ for (int samplingLevel = 1; samplingLevel < BASE_SAMPLING_LEVEL; samplingLevel++) -->Line_27 $$ txn.checkpoint()[ CD ]
Line_24 $$ int expectedSize = (numRows * samplingLevel) / (sstable.metadata.params.minIndexInterval * BASE_SAMPLING_LEVEL)-->Line_25 $$ assertEquals(expectedSize, sstable.getIndexSummarySize(), 1)[ FD ]
Line_2 $$ public void testRebuildAtSamplingLevel() throws IOException -->Line_8 $$ cfs.disableAutoCompaction()[ CD ]
Line_2 $$ public void testRebuildAtSamplingLevel() throws IOException -->Line_9 $$ ByteBuffer value = ByteBuffer.wrap(new byte[100])[ CD ]
Line_21 $$ for (int samplingLevel = 1; samplingLevel < BASE_SAMPLING_LEVEL; samplingLevel++) -->Line_24 $$ int expectedSize = (numRows * samplingLevel) / (sstable.metadata.params.minIndexInterval * BASE_SAMPLING_LEVEL)[ CD ]
Line_2 $$ public void testRebuildAtSamplingLevel() throws IOException -->Line_7 $$ cfs.truncateBlocking()[ CD ]
Line_11 $$ for (int row = 0; row < numRows; row++) -->Line_12 $$ String key = String.format("%3d", row)[ CD ]
Line_2 $$ public void testRebuildAtSamplingLevel() throws IOException -->Line_10 $$ int numRows = 256[ CD ]
Line_11 $$ for (int row = 0; row < numRows; row++) -->Line_12 $$ String key = String.format("%3d", row)[ FD ]
Line_6 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)-->Line_16 $$ List<SSTableReader> sstables = new ArrayList(cfs.getLiveSSTables())[ FD ]
Line_2 $$ public void testRebuildAtSamplingLevel() throws IOException -->Line_11 $$ for (int row = 0; row < numRows; row++) [ CD ]
Line_2 $$ public void testRebuildAtSamplingLevel() throws IOException -->Line_17 $$ assertEquals(1, sstables.size())[ CD ]
Line_6 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)-->Line_7 $$ cfs.truncateBlocking()[ FD ]
Line_2 $$ public void testRebuildAtSamplingLevel() throws IOException -->Line_15 $$ cfs.forceBlockingFlush()[ CD ]
Line_22 $$ sstable = sstable.cloneWithNewSummarySamplingLevel(cfs, samplingLevel)-->Line_25 $$ assertEquals(expectedSize, sstable.getIndexSummarySize(), 1)[ FD ]
Line_2 $$ public void testRebuildAtSamplingLevel() throws IOException -->Line_18 $$ SSTableReader original = sstables.get(0)[ CD ]
Line_11 $$ for (int row = 0; row < numRows; row++) -->Line_13 $$ new RowUpdateBuilder(cfs.metadata, 0, key).clustering("column").add("val", value).build().applyUnsafe()[ CD ]
Line_4 $$ String cfname = CF_STANDARDLOWiINTERVAL-->Line_6 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)[ FD ]
Line_19 $$ SSTableReader sstable = original-->Line_20 $$ try (LifecycleTransaction txn = cfs.getTracker().tryModify(asList(sstable), OperationType.UNKNOWN)) [ FD ]
Line_2 $$ public void testRebuildAtSamplingLevel() throws IOException -->Line_19 $$ SSTableReader sstable = original[ CD ]
Line_21 $$ for (int samplingLevel = 1; samplingLevel < BASE_SAMPLING_LEVEL; samplingLevel++) -->Line_25 $$ assertEquals(expectedSize, sstable.getIndexSummarySize(), 1)[ CD ]
Line_19 $$ SSTableReader sstable = original-->Line_26 $$ txn.update(sstable, true)[ FD ]
Line_10 $$ int numRows = 256-->Line_11 $$ for (int row = 0; row < numRows; row++) [ FD ]
Line_2 $$ public void testRebuildAtSamplingLevel() throws IOException -->Line_5 $$ Keyspace keyspace = Keyspace.open(ksname)[ CD ]
Line_6 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)-->Line_15 $$ cfs.forceBlockingFlush()[ FD ]
Line_19 $$ SSTableReader sstable = original-->Line_25 $$ assertEquals(expectedSize, sstable.getIndexSummarySize(), 1)[ FD ]
Line_22 $$ sstable = sstable.cloneWithNewSummarySamplingLevel(cfs, samplingLevel)-->Line_26 $$ txn.update(sstable, true)[ FD ]
Line_6 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)-->Line_22 $$ sstable = sstable.cloneWithNewSummarySamplingLevel(cfs, samplingLevel)[ FD ]
