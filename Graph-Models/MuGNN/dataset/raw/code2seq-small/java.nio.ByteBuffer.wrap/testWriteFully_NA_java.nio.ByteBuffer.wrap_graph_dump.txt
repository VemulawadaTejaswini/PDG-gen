Line_4 $$ final int HALFWAY = 1 + (INPUT_BUFFER_LEN / 2)-->Line_21 $$ IOUtils.writeFully(fc, buf, HALFWAY)[ FD ]
Line_13 $$ ByteBuffer buf = ByteBuffer.wrap(input)-->Line_20 $$ buf.rewind()[ FD ]
Line_32 $$ File f = new File(TEST_FILE_NAME)-->Line_34 $$ f.delete()[ FD ]
Line_17 $$ for (int i = 0; i < input.length; i++) -->Line_27 $$ for (int i = HALFWAY; i < input.length; i++) [ FD ]
Line_11 $$ RandomAccessFile raf = new RandomAccessFile(TEST_FILE_NAME, "rw")-->Line_30 $$ raf.close()[ FD ]
Line_11 $$ RandomAccessFile raf = new RandomAccessFile(TEST_FILE_NAME, "rw")-->Line_25 $$ raf.seek(0)[ FD ]
Line_6 $$ for (int i = 0; i < input.length; i++) -->Line_7 $$ input[i] = (byte) (i & 0xff)[ CD ]
Line_6 $$ for (int i = 0; i < input.length; i++) -->Line_22 $$ for (int i = 0; i < HALFWAY; i++) [ FD ]
Line_2 $$ public void testWriteFully() throws IOException -->Line_6 $$ for (int i = 0; i < input.length; i++) [ CD ]
Line_12 $$ FileChannel fc = raf.getChannel()-->Line_14 $$ IOUtils.writeFully(fc, buf)[ FD ]
Line_11 $$ RandomAccessFile raf = new RandomAccessFile(TEST_FILE_NAME, "rw")-->Line_15 $$ raf.seek(0)[ FD ]
Line_13 $$ ByteBuffer buf = ByteBuffer.wrap(input)-->Line_14 $$ IOUtils.writeFully(fc, buf)[ FD ]
Line_6 $$ for (int i = 0; i < input.length; i++) -->Line_27 $$ for (int i = HALFWAY; i < input.length; i++) [ FD ]
Line_32 $$ File f = new File(TEST_FILE_NAME)-->Line_33 $$ if (f.exists()) [ FD ]
Line_2 $$ public void testWriteFully() throws IOException -->Line_5 $$ byte[] input = new byte[INPUT_BUFFER_LEN][ CD ]
Line_11 $$ RandomAccessFile raf = new RandomAccessFile(TEST_FILE_NAME, "rw")-->Line_26 $$ raf.read(output)[ FD ]
Line_17 $$ for (int i = 0; i < input.length; i++) -->Line_22 $$ for (int i = 0; i < HALFWAY; i++) [ FD ]
Line_22 $$ for (int i = 0; i < HALFWAY; i++) -->Line_27 $$ for (int i = HALFWAY; i < input.length; i++) [ FD ]
Line_12 $$ FileChannel fc = raf.getChannel()-->Line_21 $$ IOUtils.writeFully(fc, buf, HALFWAY)[ FD ]
Line_2 $$ public void testWriteFully() throws IOException -->Line_4 $$ final int HALFWAY = 1 + (INPUT_BUFFER_LEN / 2)[ CD ]
Line_17 $$ for (int i = 0; i < input.length; i++) -->Line_18 $$ assertEquals(input[i], output[i])[ CD ]
Line_11 $$ RandomAccessFile raf = new RandomAccessFile(TEST_FILE_NAME, "rw")-->Line_12 $$ FileChannel fc = raf.getChannel()[ FD ]
Line_27 $$ for (int i = HALFWAY; i < input.length; i++) -->Line_28 $$ assertEquals(input[i - HALFWAY], output[i])[ CD ]
Line_2 $$ public void testWriteFully() throws IOException -->Line_3 $$ final int INPUT_BUFFER_LEN = 10000[ CD ]
Line_4 $$ final int HALFWAY = 1 + (INPUT_BUFFER_LEN / 2)-->Line_22 $$ for (int i = 0; i < HALFWAY; i++) [ FD ]
Line_6 $$ for (int i = 0; i < input.length; i++) -->Line_17 $$ for (int i = 0; i < input.length; i++) [ FD ]
Line_2 $$ public void testWriteFully() throws IOException -->Line_9 $$ byte[] output = new byte[input.length][ CD ]
Line_22 $$ for (int i = 0; i < HALFWAY; i++) -->Line_23 $$ assertEquals(input[i], output[i])[ CD ]
Line_9 $$ byte[] output = new byte[input.length]-->Line_16 $$ raf.read(output)[ FD ]
Line_9 $$ byte[] output = new byte[input.length]-->Line_26 $$ raf.read(output)[ FD ]
Line_13 $$ ByteBuffer buf = ByteBuffer.wrap(input)-->Line_21 $$ IOUtils.writeFully(fc, buf, HALFWAY)[ FD ]
Line_5 $$ byte[] input = new byte[INPUT_BUFFER_LEN]-->Line_13 $$ ByteBuffer buf = ByteBuffer.wrap(input)[ FD ]
Line_11 $$ RandomAccessFile raf = new RandomAccessFile(TEST_FILE_NAME, "rw")-->Line_16 $$ raf.read(output)[ FD ]
Line_33 $$ if (f.exists()) -->Line_34 $$ f.delete()[ CD ]
