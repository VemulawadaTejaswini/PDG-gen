Line_10 $$ for (int p = 0; p < numPartition; p++) -->Line_12 $$ new RowUpdateBuilder(cfs.metadata, 0, key).clustering("column").add("val", value).build().applyUnsafe()[ CD ]
Line_2 $$ private void createSSTables(String ksname, String cfname, int numSSTables, int numPartition) -->Line_4 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)[ FD ]
Line_2 $$ private void createSSTables(String ksname, String cfname, int numSSTables, int numPartition) -->Line_24 $$ validateData(cfs, numPartition)[ CD ]
Line_2 $$ private void createSSTables(String ksname, String cfname, int numSSTables, int numPartition) -->Line_8 $$ ByteBuffer value = ByteBuffer.wrap(new byte[100])[ CD ]
Line_2 $$ private void createSSTables(String ksname, String cfname, int numSSTables, int numPartition) -->Line_23 $$ assertEquals(numSSTables, cfs.getLiveSSTables().size())[ CD ]
Line_2 $$ private void createSSTables(String ksname, String cfname, int numSSTables, int numPartition) -->Line_7 $$ ArrayList<Future> futures = new ArrayList(numSSTables)[ CD ]
Line_2 $$ private void createSSTables(String ksname, String cfname, int numSSTables, int numPartition) -->Line_23 $$ assertEquals(numSSTables, cfs.getLiveSSTables().size())[ FD ]
Line_2 $$ private void createSSTables(String ksname, String cfname, int numSSTables, int numPartition) -->Line_24 $$ validateData(cfs, numPartition)[ FD ]
Line_16 $$ for (Future future : futures) -->Line_18 $$ future.get()[ FD ]
Line_2 $$ private void createSSTables(String ksname, String cfname, int numSSTables, int numPartition) -->Line_5 $$ cfs.truncateBlocking()[ CD ]
Line_2 $$ private void createSSTables(String ksname, String cfname, int numSSTables, int numPartition) -->Line_10 $$ for (int p = 0; p < numPartition; p++) [ FD ]
Line_9 $$ for (int sstable = 0; sstable < numSSTables; sstable++) -->Line_10 $$ for (int p = 0; p < numPartition; p++) [ CD ]
Line_2 $$ private void createSSTables(String ksname, String cfname, int numSSTables, int numPartition) -->Line_9 $$ for (int sstable = 0; sstable < numSSTables; sstable++) [ CD ]
Line_2 $$ private void createSSTables(String ksname, String cfname, int numSSTables, int numPartition) -->Line_3 $$ Keyspace keyspace = Keyspace.open(ksname)[ FD ]
Line_2 $$ private void createSSTables(String ksname, String cfname, int numSSTables, int numPartition) -->Line_6 $$ cfs.disableAutoCompaction()[ CD ]
Line_4 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)-->Line_6 $$ cfs.disableAutoCompaction()[ FD ]
Line_4 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)-->Line_5 $$ cfs.truncateBlocking()[ FD ]
Line_4 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)-->Line_23 $$ assertEquals(numSSTables, cfs.getLiveSSTables().size())[ FD ]
Line_10 $$ for (int p = 0; p < numPartition; p++) -->Line_11 $$ String key = String.format("%3d", p)[ CD ]
Line_2 $$ private void createSSTables(String ksname, String cfname, int numSSTables, int numPartition) -->Line_4 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)[ CD ]
Line_4 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)-->Line_24 $$ validateData(cfs, numPartition)[ FD ]
Line_4 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)-->Line_14 $$ futures.add(cfs.forceFlush())[ FD ]
Line_2 $$ private void createSSTables(String ksname, String cfname, int numSSTables, int numPartition) -->Line_9 $$ for (int sstable = 0; sstable < numSSTables; sstable++) [ FD ]
Line_8 $$ ByteBuffer value = ByteBuffer.wrap(new byte[100])-->Line_12 $$ new RowUpdateBuilder(cfs.metadata, 0, key).clustering("column").add("val", value).build().applyUnsafe()[ FD ]
Line_3 $$ Keyspace keyspace = Keyspace.open(ksname)-->Line_4 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)[ FD ]
Line_10 $$ for (int p = 0; p < numPartition; p++) -->Line_11 $$ String key = String.format("%3d", p)[ FD ]
Line_9 $$ for (int sstable = 0; sstable < numSSTables; sstable++) -->Line_14 $$ futures.add(cfs.forceFlush())[ CD ]
Line_7 $$ ArrayList<Future> futures = new ArrayList(numSSTables)-->Line_14 $$ futures.add(cfs.forceFlush())[ FD ]
Line_2 $$ private void createSSTables(String ksname, String cfname, int numSSTables, int numPartition) -->Line_3 $$ Keyspace keyspace = Keyspace.open(ksname)[ CD ]
