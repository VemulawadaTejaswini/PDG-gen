Line_7 $$ for (int i = 0; i < _COUNT; i++) -->Line_17 $$ for (int i = 0; i < size1; i++) [ FD ]
Line_2 $$ public void testBufferInputStream() -->Line_6 $$ Deserializer.BufferInputStream bufferInputStream = deserializer.new BufferInputStream()[ CD ]
Line_23 $$ for (int i = 0; i < size2; i++) -->Line_24 $$ Assert.assertEquals(data[i + size1], newBytes[i])[ CD ]
Line_2 $$ public void testBufferInputStream() -->Line_7 $$ for (int i = 0; i < _COUNT; i++) [ CD ]
Line_2 $$ public void testBufferInputStream() -->Line_10 $$ deserializer = new Deserializer(ByteBuffer.wrap(data))[ CD ]
Line_2 $$ public void testBufferInputStream() -->Line_3 $$ byte[] data = new byte[_COUNT][ CD ]
Line_2 $$ public void testBufferInputStream() -->Line_23 $$ for (int i = 0; i < size2; i++) [ CD ]
Line_2 $$ public void testBufferInputStream() -->Line_15 $$ int count = bufferInputStream.read(newBytes)[ CD ]
Line_2 $$ public void testBufferInputStream() -->Line_14 $$ byte[] newBytes = new byte[size1][ CD ]
Line_2 $$ public void testBufferInputStream() -->Line_4 $$ _random.nextBytes(data)[ CD ]
Line_14 $$ byte[] newBytes = new byte[size1]-->Line_15 $$ int count = bufferInputStream.read(newBytes)[ FD ]
Line_12 $$ int size1 = _COUNT * 2 / 3-->Line_16 $$ Assert.assertEquals(size1, count)[ FD ]
Line_3 $$ byte[] data = new byte[_COUNT]-->Line_10 $$ deserializer = new Deserializer(ByteBuffer.wrap(data))[ FD ]
Line_15 $$ int count = bufferInputStream.read(newBytes)-->Line_16 $$ Assert.assertEquals(size1, count)[ FD ]
Line_21 $$ count = bufferInputStream.read(newBytes)-->Line_22 $$ Assert.assertEquals(size2, count)[ FD ]
Line_11 $$ bufferInputStream = deserializer.new BufferInputStream()-->Line_21 $$ count = bufferInputStream.read(newBytes)[ FD ]
Line_2 $$ public void testBufferInputStream() -->Line_20 $$ newBytes = new byte[size1][ CD ]
Line_2 $$ public void testBufferInputStream() -->Line_12 $$ int size1 = _COUNT * 2 / 3[ CD ]
Line_6 $$ Deserializer.BufferInputStream bufferInputStream = deserializer.new BufferInputStream()-->Line_21 $$ count = bufferInputStream.read(newBytes)[ FD ]
Line_6 $$ Deserializer.BufferInputStream bufferInputStream = deserializer.new BufferInputStream()-->Line_15 $$ int count = bufferInputStream.read(newBytes)[ FD ]
Line_2 $$ public void testBufferInputStream() -->Line_5 $$ Deserializer deserializer = new Deserializer(ByteBuffer.wrap(data))[ CD ]
Line_20 $$ newBytes = new byte[size1]-->Line_21 $$ count = bufferInputStream.read(newBytes)[ FD ]
Line_6 $$ Deserializer.BufferInputStream bufferInputStream = deserializer.new BufferInputStream()-->Line_8 $$ Assert.assertEquals(data[i], bufferInputStream.read())[ FD ]
Line_14 $$ byte[] newBytes = new byte[size1]-->Line_21 $$ count = bufferInputStream.read(newBytes)[ FD ]
Line_15 $$ int count = bufferInputStream.read(newBytes)-->Line_21 $$ count = bufferInputStream.read(newBytes)[ FD ]
Line_2 $$ public void testBufferInputStream() -->Line_22 $$ Assert.assertEquals(size2, count)[ CD ]
Line_17 $$ for (int i = 0; i < size1; i++) -->Line_18 $$ Assert.assertEquals(data[i], newBytes[i])[ CD ]
Line_3 $$ byte[] data = new byte[_COUNT]-->Line_5 $$ Deserializer deserializer = new Deserializer(ByteBuffer.wrap(data))[ FD ]
Line_2 $$ public void testBufferInputStream() -->Line_11 $$ bufferInputStream = deserializer.new BufferInputStream()[ CD ]
Line_2 $$ public void testBufferInputStream() -->Line_21 $$ count = bufferInputStream.read(newBytes)[ CD ]
Line_5 $$ Deserializer deserializer = new Deserializer(ByteBuffer.wrap(data))-->Line_10 $$ deserializer = new Deserializer(ByteBuffer.wrap(data))[ FD ]
Line_13 $$ int size2 = _COUNT - size1-->Line_22 $$ Assert.assertEquals(size2, count)[ FD ]
Line_7 $$ for (int i = 0; i < _COUNT; i++) -->Line_8 $$ Assert.assertEquals(data[i], bufferInputStream.read())[ CD ]
Line_7 $$ for (int i = 0; i < _COUNT; i++) -->Line_23 $$ for (int i = 0; i < size2; i++) [ FD ]
Line_6 $$ Deserializer.BufferInputStream bufferInputStream = deserializer.new BufferInputStream()-->Line_11 $$ bufferInputStream = deserializer.new BufferInputStream()[ FD ]
Line_2 $$ public void testBufferInputStream() -->Line_17 $$ for (int i = 0; i < size1; i++) [ CD ]
Line_15 $$ int count = bufferInputStream.read(newBytes)-->Line_22 $$ Assert.assertEquals(size2, count)[ FD ]
Line_13 $$ int size2 = _COUNT - size1-->Line_23 $$ for (int i = 0; i < size2; i++) [ FD ]
Line_2 $$ public void testBufferInputStream() -->Line_13 $$ int size2 = _COUNT - size1[ CD ]
Line_14 $$ byte[] newBytes = new byte[size1]-->Line_20 $$ newBytes = new byte[size1][ FD ]
Line_2 $$ public void testBufferInputStream() -->Line_16 $$ Assert.assertEquals(size1, count)[ CD ]
Line_12 $$ int size1 = _COUNT * 2 / 3-->Line_17 $$ for (int i = 0; i < size1; i++) [ FD ]
Line_11 $$ bufferInputStream = deserializer.new BufferInputStream()-->Line_15 $$ int count = bufferInputStream.read(newBytes)[ FD ]
Line_17 $$ for (int i = 0; i < size1; i++) -->Line_23 $$ for (int i = 0; i < size2; i++) [ FD ]
Line_3 $$ byte[] data = new byte[_COUNT]-->Line_4 $$ _random.nextBytes(data)[ FD ]
