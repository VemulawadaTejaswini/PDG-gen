Line_2 $$ public void testSlowNM() throws Exception -->Line_11 $$ InetSocketAddress addr = NetUtils.createSocketAddr(bindAddr)[ CD ]
Line_12 $$ NMTokenSecretManagerInNM tokenSecretManager = new NMTokenSecretManagerInNM()-->Line_15 $$ tokenSecretManager.setMasterKey(masterKey)[ FD ]
Line_2 $$ public void testSlowNM() throws Exception -->Line_17 $$ server = rpc.getServer(ContainerManagementProtocol.class, new DummyContainerManager(), addr, conf, tokenSecretManager, 1)[ CD ]
Line_2 $$ public void testSlowNM() throws Exception -->Line_7 $$ conf.setInt("yarn.rpc.nm-command-timeout", 3000)[ CD ]
Line_23 $$ Map<TaskId, Task> tasks = job.getTasks()-->Line_25 $$ Task task = tasks.values().iterator().next()[ FD ]
Line_19 $$ MRApp app = new MRAppWithSlowNM(tokenSecretManager)-->Line_21 $$ Job job = app.submit(conf)[ FD ]
Line_21 $$ Job job = app.submit(conf)-->Line_23 $$ Map<TaskId, Task> tasks = job.getTasks()[ FD ]
Line_2 $$ public void testSlowNM() throws Exception -->Line_16 $$ conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, "token")[ CD ]
Line_10 $$ String bindAddr = "localhost:0"-->Line_11 $$ InetSocketAddress addr = NetUtils.createSocketAddr(bindAddr)[ FD ]
Line_2 $$ public void testSlowNM() throws Exception -->Line_10 $$ String bindAddr = "localhost:0"[ CD ]
Line_4 $$ int maxAttempts = 1-->Line_5 $$ conf.setInt(MRJobConfig.MAP_MAX_ATTEMPTS, maxAttempts)[ FD ]
Line_21 $$ Job job = app.submit(conf)-->Line_22 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_19 $$ MRApp app = new MRAppWithSlowNM(tokenSecretManager)-->Line_26 $$ app.waitForState(task, TaskState.SCHEDULED)[ FD ]
Line_4 $$ int maxAttempts = 1-->Line_28 $$ Assert.assertEquals("Num attempts is not correct", maxAttempts, attempts.size())[ FD ]
Line_27 $$ Map<TaskAttemptId, TaskAttempt> attempts = tasks.values().iterator().next().getAttempts()-->Line_28 $$ Assert.assertEquals("Num attempts is not correct", maxAttempts, attempts.size())[ FD ]
Line_27 $$ Map<TaskAttemptId, TaskAttempt> attempts = tasks.values().iterator().next().getAttempts()-->Line_29 $$ TaskAttempt attempt = attempts.values().iterator().next()[ FD ]
Line_19 $$ MRApp app = new MRAppWithSlowNM(tokenSecretManager)-->Line_30 $$ app.waitForInternalState((TaskAttemptImpl) attempt, TaskAttemptStateInternal.ASSIGNED)[ FD ]
Line_21 $$ Job job = app.submit(conf)-->Line_31 $$ app.waitForState(job, JobState.FAILED)[ FD ]
Line_23 $$ Map<TaskId, Task> tasks = job.getTasks()-->Line_27 $$ Map<TaskAttemptId, TaskAttempt> attempts = tasks.values().iterator().next().getAttempts()[ FD ]
Line_19 $$ MRApp app = new MRAppWithSlowNM(tokenSecretManager)-->Line_22 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_32 $$ String diagnostics = attempt.getDiagnostics().toString()-->Line_34 $$ Assert.assertTrue(diagnostics.contains("Container launch failed for " + "container_0_0000_01_000000 : "))[ FD ]
Line_2 $$ public void testSlowNM() throws Exception -->Line_9 $$ YarnRPC rpc = YarnRPC.create(conf)[ CD ]
Line_29 $$ TaskAttempt attempt = attempts.values().iterator().next()-->Line_32 $$ String diagnostics = attempt.getDiagnostics().toString()[ FD ]
Line_2 $$ public void testSlowNM() throws Exception -->Line_5 $$ conf.setInt(MRJobConfig.MAP_MAX_ATTEMPTS, maxAttempts)[ CD ]
Line_2 $$ public void testSlowNM() throws Exception -->Line_19 $$ MRApp app = new MRAppWithSlowNM(tokenSecretManager)[ CD ]
Line_2 $$ public void testSlowNM() throws Exception -->Line_13 $$ MasterKey masterKey = Records.newRecord(MasterKey.class)[ CD ]
Line_9 $$ YarnRPC rpc = YarnRPC.create(conf)-->Line_17 $$ server = rpc.getServer(ContainerManagementProtocol.class, new DummyContainerManager(), addr, conf, tokenSecretManager, 1)[ FD ]
Line_32 $$ String diagnostics = attempt.getDiagnostics().toString()-->Line_35 $$ Assert.assertTrue(diagnostics.contains("java.net.SocketTimeoutException: 3000 millis timeout while waiting for channel"))[ FD ]
Line_2 $$ public void testSlowNM() throws Exception -->Line_15 $$ tokenSecretManager.setMasterKey(masterKey)[ CD ]
Line_19 $$ MRApp app = new MRAppWithSlowNM(tokenSecretManager)-->Line_38 $$ app.stop()[ FD ]
Line_2 $$ public void testSlowNM() throws Exception -->Line_4 $$ int maxAttempts = 1[ CD ]
Line_2 $$ public void testSlowNM() throws Exception -->Line_6 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ CD ]
Line_23 $$ Map<TaskId, Task> tasks = job.getTasks()-->Line_24 $$ Assert.assertEquals("Num tasks is not correct", 1, tasks.size())[ FD ]
Line_13 $$ MasterKey masterKey = Records.newRecord(MasterKey.class)-->Line_15 $$ tokenSecretManager.setMasterKey(masterKey)[ FD ]
Line_11 $$ InetSocketAddress addr = NetUtils.createSocketAddr(bindAddr)-->Line_17 $$ server = rpc.getServer(ContainerManagementProtocol.class, new DummyContainerManager(), addr, conf, tokenSecretManager, 1)[ FD ]
Line_2 $$ public void testSlowNM() throws Exception -->Line_12 $$ NMTokenSecretManagerInNM tokenSecretManager = new NMTokenSecretManagerInNM()[ CD ]
Line_2 $$ public void testSlowNM() throws Exception -->Line_18 $$ server.start()[ CD ]
Line_25 $$ Task task = tasks.values().iterator().next()-->Line_26 $$ app.waitForState(task, TaskState.SCHEDULED)[ FD ]
Line_19 $$ MRApp app = new MRAppWithSlowNM(tokenSecretManager)-->Line_31 $$ app.waitForState(job, JobState.FAILED)[ FD ]
Line_2 $$ public void testSlowNM() throws Exception -->Line_8 $$ conf.set(YarnConfiguration.IPC_RPC_IMPL, HadoopYarnProtoRPC.class.getName())[ CD ]
Line_2 $$ public void testSlowNM() throws Exception -->Line_14 $$ masterKey.setBytes(ByteBuffer.wrap("key".getBytes()))[ CD ]
Line_12 $$ NMTokenSecretManagerInNM tokenSecretManager = new NMTokenSecretManagerInNM()-->Line_17 $$ server = rpc.getServer(ContainerManagementProtocol.class, new DummyContainerManager(), addr, conf, tokenSecretManager, 1)[ FD ]
Line_13 $$ MasterKey masterKey = Records.newRecord(MasterKey.class)-->Line_14 $$ masterKey.setBytes(ByteBuffer.wrap("key".getBytes()))[ FD ]
