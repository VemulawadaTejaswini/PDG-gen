Line_2 $$ public static void writeToChannel(byte[] source, int offset, int length, WritableByteChannel channel) throws IOException -->Line_6 $$ length -= written[ FD ]
Line_2 $$ public static void writeToChannel(byte[] source, int offset, int length, WritableByteChannel channel) throws IOException -->Line_5 $$ int written = channel.write(buffer)[ CD ]
Line_3 $$ int toWrite = Math.min(length, WRITE_CHUNK_SIZE)-->Line_8 $$ toWrite = Math.min(length, WRITE_CHUNK_SIZE)[ FD ]
Line_5 $$ int written = channel.write(buffer)-->Line_10 $$ written = channel.write(buffer)[ FD ]
Line_5 $$ int written = channel.write(buffer)-->Line_11 $$ length -= written[ FD ]
Line_11 $$ length -= written-->Line_7 $$ while (length > 0) [ FD ]
Line_2 $$ public static void writeToChannel(byte[] source, int offset, int length, WritableByteChannel channel) throws IOException -->Line_7 $$ while (length > 0) [ CD ]
Line_2 $$ public static void writeToChannel(byte[] source, int offset, int length, WritableByteChannel channel) throws IOException -->Line_7 $$ while (length > 0) [ FD ]
Line_5 $$ int written = channel.write(buffer)-->Line_6 $$ length -= written[ FD ]
Line_7 $$ while (length > 0) -->Line_8 $$ toWrite = Math.min(length, WRITE_CHUNK_SIZE)[ CD ]
Line_2 $$ public static void writeToChannel(byte[] source, int offset, int length, WritableByteChannel channel) throws IOException -->Line_4 $$ ByteBuffer buffer = ByteBuffer.wrap(source, offset, toWrite)[ FD ]
Line_2 $$ public static void writeToChannel(byte[] source, int offset, int length, WritableByteChannel channel) throws IOException -->Line_10 $$ written = channel.write(buffer)[ FD ]
Line_6 $$ length -= written-->Line_11 $$ length -= written[ FD ]
Line_11 $$ length -= written-->Line_8 $$ toWrite = Math.min(length, WRITE_CHUNK_SIZE)[ FD ]
Line_2 $$ public static void writeToChannel(byte[] source, int offset, int length, WritableByteChannel channel) throws IOException -->Line_6 $$ length -= written[ CD ]
Line_7 $$ while (length > 0) -->Line_11 $$ length -= written[ CD ]
Line_2 $$ public static void writeToChannel(byte[] source, int offset, int length, WritableByteChannel channel) throws IOException -->Line_4 $$ ByteBuffer buffer = ByteBuffer.wrap(source, offset, toWrite)[ CD ]
Line_3 $$ int toWrite = Math.min(length, WRITE_CHUNK_SIZE)-->Line_4 $$ ByteBuffer buffer = ByteBuffer.wrap(source, offset, toWrite)[ FD ]
Line_7 $$ while (length > 0) -->Line_10 $$ written = channel.write(buffer)[ CD ]
Line_6 $$ length -= written-->Line_7 $$ while (length > 0) [ FD ]
Line_4 $$ ByteBuffer buffer = ByteBuffer.wrap(source, offset, toWrite)-->Line_5 $$ int written = channel.write(buffer)[ FD ]
Line_6 $$ length -= written-->Line_8 $$ toWrite = Math.min(length, WRITE_CHUNK_SIZE)[ FD ]
Line_7 $$ while (length > 0) -->Line_9 $$ buffer.limit(buffer.position() + toWrite)[ CD ]
Line_2 $$ public static void writeToChannel(byte[] source, int offset, int length, WritableByteChannel channel) throws IOException -->Line_8 $$ toWrite = Math.min(length, WRITE_CHUNK_SIZE)[ FD ]
Line_2 $$ public static void writeToChannel(byte[] source, int offset, int length, WritableByteChannel channel) throws IOException -->Line_5 $$ int written = channel.write(buffer)[ FD ]
Line_2 $$ public static void writeToChannel(byte[] source, int offset, int length, WritableByteChannel channel) throws IOException -->Line_3 $$ int toWrite = Math.min(length, WRITE_CHUNK_SIZE)[ FD ]
Line_4 $$ ByteBuffer buffer = ByteBuffer.wrap(source, offset, toWrite)-->Line_10 $$ written = channel.write(buffer)[ FD ]
Line_10 $$ written = channel.write(buffer)-->Line_11 $$ length -= written[ FD ]
Line_2 $$ public static void writeToChannel(byte[] source, int offset, int length, WritableByteChannel channel) throws IOException -->Line_11 $$ length -= written[ FD ]
Line_2 $$ public static void writeToChannel(byte[] source, int offset, int length, WritableByteChannel channel) throws IOException -->Line_3 $$ int toWrite = Math.min(length, WRITE_CHUNK_SIZE)[ CD ]
Line_4 $$ ByteBuffer buffer = ByteBuffer.wrap(source, offset, toWrite)-->Line_9 $$ buffer.limit(buffer.position() + toWrite)[ FD ]
