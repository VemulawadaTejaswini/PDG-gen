Line_2 $$ public void testValidationMultipleSSTablePerLevel() throws Exception -->Line_24 $$ CompactionManager.instance.submitValidation(cfs, validator).get()[ CD ]
Line_2 $$ public void testValidationMultipleSSTablePerLevel() throws Exception -->Line_14 $$ waitForLeveling(cfs)[ CD ]
Line_2 $$ public void testValidationMultipleSSTablePerLevel() throws Exception -->Line_22 $$ RepairJobDesc desc = new RepairJobDesc(parentRepSession, UUID.randomUUID(), KEYSPACE1, CF_STANDARDDLEVELED, Arrays.asList(range))[ CD ]
Line_18 $$ Range<Token> range = new Range(Util.token(""), Util.token(""))-->Line_22 $$ RepairJobDesc desc = new RepairJobDesc(parentRepSession, UUID.randomUUID(), KEYSPACE1, CF_STANDARDDLEVELED, Arrays.asList(range))[ FD ]
Line_2 $$ public void testValidationMultipleSSTablePerLevel() throws Exception -->Line_8 $$ for (int r = 0; r < rows; r++) [ CD ]
Line_23 $$ Validator validator = new Validator(desc, FBUtilities.getBroadcastAddress(), gcBefore)-->Line_24 $$ CompactionManager.instance.submitValidation(cfs, validator).get()[ FD ]
Line_9 $$ UpdateBuilder update = UpdateBuilder.create(cfs.metadata, String.valueOf(r))-->Line_10 $$ update.newRow("column" + c).add("val", value)[ FD ]
Line_2 $$ public void testValidationMultipleSSTablePerLevel() throws Exception -->Line_21 $$ ActiveRepairService.instance.registerParentRepairSession(parentRepSession, Arrays.asList(cfs), Arrays.asList(range), false, System.currentTimeMillis(), true)[ CD ]
Line_6 $$ int rows = 40-->Line_8 $$ for (int r = 0; r < rows; r++) [ FD ]
Line_9 $$ UpdateBuilder update = UpdateBuilder.create(cfs.metadata, String.valueOf(r))-->Line_11 $$ update.applyUnsafe()[ FD ]
Line_5 $$ ByteBuffer value = ByteBuffer.wrap(b)-->Line_10 $$ update.newRow("column" + c).add("val", value)[ FD ]
Line_2 $$ public void testValidationMultipleSSTablePerLevel() throws Exception -->Line_17 $$ assertTrue(strategy.getSSTableCountPerLevel()[2] > 0)[ CD ]
Line_18 $$ Range<Token> range = new Range(Util.token(""), Util.token(""))-->Line_21 $$ ActiveRepairService.instance.registerParentRepairSession(parentRepSession, Arrays.asList(cfs), Arrays.asList(range), false, System.currentTimeMillis(), true)[ FD ]
Line_7 $$ int columns = 20-->Line_10 $$ for (int c = 0; c < columns; c++) update.newRow("column" + c).add("val", value)[ FD ]
Line_2 $$ public void testValidationMultipleSSTablePerLevel() throws Exception -->Line_18 $$ Range<Token> range = new Range(Util.token(""), Util.token(""))[ CD ]
Line_20 $$ UUID parentRepSession = UUID.randomUUID()-->Line_21 $$ ActiveRepairService.instance.registerParentRepairSession(parentRepSession, Arrays.asList(cfs), Arrays.asList(range), false, System.currentTimeMillis(), true)[ FD ]
Line_2 $$ public void testValidationMultipleSSTablePerLevel() throws Exception -->Line_4 $$ new Random().nextBytes(b)[ CD ]
Line_3 $$ byte[] b = new byte[100 * 1024]-->Line_5 $$ ByteBuffer value = ByteBuffer.wrap(b)[ FD ]
Line_8 $$ for (int r = 0; r < rows; r++) -->Line_11 $$ update.applyUnsafe()[ CD ]
Line_8 $$ for (int r = 0; r < rows; r++) -->Line_12 $$ cfs.forceBlockingFlush()[ CD ]
Line_2 $$ public void testValidationMultipleSSTablePerLevel() throws Exception -->Line_19 $$ int gcBefore = keyspace.getColumnFamilyStore(CF_STANDARDDLEVELED).gcBefore(FBUtilities.nowInSeconds())[ CD ]
Line_2 $$ public void testValidationMultipleSSTablePerLevel() throws Exception -->Line_5 $$ ByteBuffer value = ByteBuffer.wrap(b)[ CD ]
Line_2 $$ public void testValidationMultipleSSTablePerLevel() throws Exception -->Line_6 $$ int rows = 40[ CD ]
Line_2 $$ public void testValidationMultipleSSTablePerLevel() throws Exception -->Line_16 $$ assertTrue(strategy.getSSTableCountPerLevel()[1] > 0)[ CD ]
Line_15 $$ CompactionStrategyManager strategy = cfs.getCompactionStrategyManager()-->Line_16 $$ assertTrue(strategy.getSSTableCountPerLevel()[1] > 0)[ FD ]
Line_2 $$ public void testValidationMultipleSSTablePerLevel() throws Exception -->Line_3 $$ byte[] b = new byte[100 * 1024][ CD ]
Line_15 $$ CompactionStrategyManager strategy = cfs.getCompactionStrategyManager()-->Line_17 $$ assertTrue(strategy.getSSTableCountPerLevel()[2] > 0)[ FD ]
Line_2 $$ public void testValidationMultipleSSTablePerLevel() throws Exception -->Line_20 $$ UUID parentRepSession = UUID.randomUUID()[ CD ]
Line_2 $$ public void testValidationMultipleSSTablePerLevel() throws Exception -->Line_23 $$ Validator validator = new Validator(desc, FBUtilities.getBroadcastAddress(), gcBefore)[ CD ]
Line_8 $$ for (int r = 0; r < rows; r++) -->Line_9 $$ UpdateBuilder update = UpdateBuilder.create(cfs.metadata, String.valueOf(r))[ CD ]
Line_3 $$ byte[] b = new byte[100 * 1024]-->Line_4 $$ new Random().nextBytes(b)[ FD ]
Line_8 $$ for (int r = 0; r < rows; r++) -->Line_9 $$ UpdateBuilder update = UpdateBuilder.create(cfs.metadata, String.valueOf(r))[ FD ]
Line_8 $$ for (int r = 0; r < rows; r++) -->Line_10 $$ for (int c = 0; c < columns; c++) update.newRow("column" + c).add("val", value)[ CD ]
Line_2 $$ public void testValidationMultipleSSTablePerLevel() throws Exception -->Line_7 $$ int columns = 20[ CD ]
Line_2 $$ public void testValidationMultipleSSTablePerLevel() throws Exception -->Line_15 $$ CompactionStrategyManager strategy = cfs.getCompactionStrategyManager()[ CD ]
