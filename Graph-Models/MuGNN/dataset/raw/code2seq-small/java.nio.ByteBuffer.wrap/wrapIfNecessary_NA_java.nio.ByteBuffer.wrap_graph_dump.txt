Line_3 $$ if (isShuffleEncrypted(conf)) -->Line_8 $$ byte[] offsetArray = new byte[8][ CD ]
Line_3 $$ if (isShuffleEncrypted(conf)) -->Line_17 $$ return new CryptoInputStream(in, cryptoCodec, bufferSize, getEncryptionKey(), iv, offset + cryptoPadding(conf))[ CD ]
Line_3 $$ if (isShuffleEncrypted(conf)) -->Line_4 $$ int bufferSize = getBufferSize(conf)[ CD ]
Line_8 $$ byte[] offsetArray = new byte[8]-->Line_10 $$ long offset = ByteBuffer.wrap(offsetArray).getLong()[ FD ]
Line_6 $$ in = new LimitInputStream(in, length)-->Line_9 $$ IOUtils.readFully(in, offsetArray, 0, 8)[ FD ]
Line_5 $$ if (length > -1) -->Line_6 $$ in = new LimitInputStream(in, length)[ CD ]
Line_3 $$ if (isShuffleEncrypted(conf)) -->Line_5 $$ if (length > -1) [ CD ]
Line_2 $$ public static InputStream wrapIfNecessary(Configuration conf, InputStream in, long length) throws IOException -->Line_3 $$ if (isShuffleEncrypted(conf)) [ CD ]
Line_6 $$ in = new LimitInputStream(in, length)-->Line_13 $$ IOUtils.readFully(in, iv, 0, cryptoCodec.getCipherSuite().getAlgorithmBlockSize())[ FD ]
Line_3 $$ if (isShuffleEncrypted(conf)) -->Line_13 $$ IOUtils.readFully(in, iv, 0, cryptoCodec.getCipherSuite().getAlgorithmBlockSize())[ CD ]
Line_3 $$ if (isShuffleEncrypted(conf)) -->Line_9 $$ IOUtils.readFully(in, offsetArray, 0, 8)[ CD ]
Line_8 $$ byte[] offsetArray = new byte[8]-->Line_9 $$ IOUtils.readFully(in, offsetArray, 0, 8)[ FD ]
Line_3 $$ if (isShuffleEncrypted(conf)) -->Line_10 $$ long offset = ByteBuffer.wrap(offsetArray).getLong()[ CD ]
Line_2 $$ public static InputStream wrapIfNecessary(Configuration conf, InputStream in, long length) throws IOException -->Line_11 $$ CryptoCodec cryptoCodec = CryptoCodec.getInstance(conf)[ FD ]
Line_2 $$ public static InputStream wrapIfNecessary(Configuration conf, InputStream in, long length) throws IOException -->Line_13 $$ IOUtils.readFully(in, iv, 0, cryptoCodec.getCipherSuite().getAlgorithmBlockSize())[ FD ]
Line_3 $$ if (isShuffleEncrypted(conf)) -->Line_19 $$ return in[ CD ]
Line_2 $$ public static InputStream wrapIfNecessary(Configuration conf, InputStream in, long length) throws IOException -->Line_4 $$ int bufferSize = getBufferSize(conf)[ FD ]
Line_11 $$ CryptoCodec cryptoCodec = CryptoCodec.getInstance(conf)-->Line_12 $$ byte[] iv = new byte[cryptoCodec.getCipherSuite().getAlgorithmBlockSize()][ FD ]
Line_2 $$ public static InputStream wrapIfNecessary(Configuration conf, InputStream in, long length) throws IOException -->Line_3 $$ if (isShuffleEncrypted(conf)) [ FD ]
Line_3 $$ if (isShuffleEncrypted(conf)) -->Line_14 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_11 $$ CryptoCodec cryptoCodec = CryptoCodec.getInstance(conf)-->Line_13 $$ IOUtils.readFully(in, iv, 0, cryptoCodec.getCipherSuite().getAlgorithmBlockSize())[ FD ]
Line_14 $$ if (LOG.isDebugEnabled()) -->Line_15 $$ LOG.debug("IV read from [" + Base64.encodeBase64URLSafeString(iv) + "]")[ CD ]
Line_3 $$ if (isShuffleEncrypted(conf)) -->Line_12 $$ byte[] iv = new byte[cryptoCodec.getCipherSuite().getAlgorithmBlockSize()][ CD ]
Line_2 $$ public static InputStream wrapIfNecessary(Configuration conf, InputStream in, long length) throws IOException -->Line_6 $$ in = new LimitInputStream(in, length)[ FD ]
Line_3 $$ if (isShuffleEncrypted(conf)) -->Line_11 $$ CryptoCodec cryptoCodec = CryptoCodec.getInstance(conf)[ CD ]
Line_2 $$ public static InputStream wrapIfNecessary(Configuration conf, InputStream in, long length) throws IOException -->Line_17 $$ return new CryptoInputStream(in, cryptoCodec, bufferSize, getEncryptionKey(), iv, offset + cryptoPadding(conf))[ FD ]
Line_12 $$ byte[] iv = new byte[cryptoCodec.getCipherSuite().getAlgorithmBlockSize()]-->Line_15 $$ LOG.debug("IV read from [" + Base64.encodeBase64URLSafeString(iv) + "]")[ FD ]
Line_2 $$ public static InputStream wrapIfNecessary(Configuration conf, InputStream in, long length) throws IOException -->Line_9 $$ IOUtils.readFully(in, offsetArray, 0, 8)[ FD ]
Line_2 $$ public static InputStream wrapIfNecessary(Configuration conf, InputStream in, long length) throws IOException -->Line_5 $$ if (length > -1) [ FD ]
Line_12 $$ byte[] iv = new byte[cryptoCodec.getCipherSuite().getAlgorithmBlockSize()]-->Line_13 $$ IOUtils.readFully(in, iv, 0, cryptoCodec.getCipherSuite().getAlgorithmBlockSize())[ FD ]
