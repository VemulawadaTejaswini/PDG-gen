Line_56 $$ rcs = recoveredContainers.get(0)-->Line_60 $$ assertEquals(containerReq, rcs.getStartRequest())[ FD ]
Line_29 $$ recoveredContainers = stateStore.loadContainersState()-->Line_67 $$ assertEquals(1, recoveredContainers.size())[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_60 $$ assertEquals(containerReq, rcs.getStartRequest())[ CD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_16 $$ Map<String, ByteBuffer> serviceData = new HashMap<String, ByteBuffer>()[ CD ]
Line_26 $$ StartContainerRequest containerReq = StartContainerRequest.newInstance(clc, containerToken)-->Line_48 $$ assertEquals(containerReq, rcs.getStartRequest())[ FD ]
Line_68 $$ rcs = recoveredContainers.get(0)-->Line_72 $$ assertEquals(containerReq, rcs.getStartRequest())[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_15 $$ containerCmds.add("somearg")[ CD ]
Line_44 $$ rcs = recoveredContainers.get(0)-->Line_73 $$ assertEquals(diags.toString(), rcs.getDiagnostics())[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_33 $$ assertEquals(ContainerExitStatus.INVALID, rcs.getExitCode())[ CD ]
Line_42 $$ recoveredContainers = stateStore.loadContainersState()-->Line_76 $$ recoveredContainers = stateStore.loadContainersState()[ FD ]
Line_31 $$ RecoveredContainerState rcs = recoveredContainers.get(0)-->Line_32 $$ assertEquals(RecoveredContainerStatus.REQUESTED, rcs.getStatus())[ FD ]
Line_44 $$ rcs = recoveredContainers.get(0)-->Line_45 $$ assertEquals(RecoveredContainerStatus.LAUNCHED, rcs.getStatus())[ FD ]
Line_37 $$ StringBuilder diags = new StringBuilder()-->Line_49 $$ assertEquals(diags.toString(), rcs.getDiagnostics())[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_11 $$ Map<String, String> env = new HashMap<String, String>()[ CD ]
Line_56 $$ rcs = recoveredContainers.get(0)-->Line_69 $$ assertEquals(RecoveredContainerStatus.COMPLETED, rcs.getStatus())[ FD ]
Line_54 $$ recoveredContainers = stateStore.loadContainersState()-->Line_77 $$ assertTrue(recoveredContainers.isEmpty())[ FD ]
Line_44 $$ rcs = recoveredContainers.get(0)-->Line_61 $$ assertEquals(diags.toString(), rcs.getDiagnostics())[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_25 $$ Token containerToken = Token.newInstance(containerTokenId.getBytes(), ContainerTokenIdentifier.KIND.toString(), "password".getBytes(), "tokenservice")[ CD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_35 $$ assertEquals(containerReq, rcs.getStartRequest())[ CD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_51 $$ stateStore.storeContainerDiagnostics(containerId, diags)[ CD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_71 $$ assertTrue(rcs.getKilled())[ CD ]
Line_13 $$ List<String> containerCmds = new ArrayList<String>()-->Line_22 $$ ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, env, containerCmds, serviceData, containerTokens, acls)[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_73 $$ assertEquals(diags.toString(), rcs.getDiagnostics())[ CD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_76 $$ recoveredContainers = stateStore.loadContainersState()[ CD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_36 $$ assertTrue(rcs.getDiagnostics().isEmpty())[ CD ]
Line_56 $$ rcs = recoveredContainers.get(0)-->Line_68 $$ rcs = recoveredContainers.get(0)[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_53 $$ restartStateStore()[ CD ]
Line_3 $$ List<RecoveredContainerState> recoveredContainers = stateStore.loadContainersState()-->Line_77 $$ assertTrue(recoveredContainers.isEmpty())[ FD ]
Line_44 $$ rcs = recoveredContainers.get(0)-->Line_68 $$ rcs = recoveredContainers.get(0)[ FD ]
Line_44 $$ rcs = recoveredContainers.get(0)-->Line_47 $$ assertEquals(false, rcs.getKilled())[ FD ]
Line_29 $$ recoveredContainers = stateStore.loadContainersState()-->Line_31 $$ RecoveredContainerState rcs = recoveredContainers.get(0)[ FD ]
Line_66 $$ recoveredContainers = stateStore.loadContainersState()-->Line_67 $$ assertEquals(1, recoveredContainers.size())[ FD ]
Line_31 $$ RecoveredContainerState rcs = recoveredContainers.get(0)-->Line_71 $$ assertTrue(rcs.getKilled())[ FD ]
Line_3 $$ List<RecoveredContainerState> recoveredContainers = stateStore.loadContainersState()-->Line_76 $$ recoveredContainers = stateStore.loadContainersState()[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_18 $$ ByteBuffer containerTokens = ByteBuffer.wrap(new byte[] [ CD ]
Line_19 $$ Map<ApplicationAccessType, String> acls = new HashMap<ApplicationAccessType, String>()-->Line_22 $$ ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, env, containerCmds, serviceData, containerTokens, acls)[ FD ]
Line_76 $$ recoveredContainers = stateStore.loadContainersState()-->Line_77 $$ assertTrue(recoveredContainers.isEmpty())[ FD ]
Line_42 $$ recoveredContainers = stateStore.loadContainersState()-->Line_44 $$ rcs = recoveredContainers.get(0)[ FD ]
Line_29 $$ recoveredContainers = stateStore.loadContainersState()-->Line_44 $$ rcs = recoveredContainers.get(0)[ FD ]
Line_54 $$ recoveredContainers = stateStore.loadContainersState()-->Line_66 $$ recoveredContainers = stateStore.loadContainersState()[ FD ]
Line_9 $$ Map<String, LocalResource> localResources = new HashMap<String, LocalResource>()-->Line_10 $$ localResources.put("rsrc", lrsrc)[ FD ]
Line_44 $$ rcs = recoveredContainers.get(0)-->Line_70 $$ assertEquals(21, rcs.getExitCode())[ FD ]
Line_37 $$ StringBuilder diags = new StringBuilder()-->Line_61 $$ assertEquals(diags.toString(), rcs.getDiagnostics())[ FD ]
Line_3 $$ List<RecoveredContainerState> recoveredContainers = stateStore.loadContainersState()-->Line_44 $$ rcs = recoveredContainers.get(0)[ FD ]
Line_31 $$ RecoveredContainerState rcs = recoveredContainers.get(0)-->Line_58 $$ assertEquals(ContainerExitStatus.INVALID, rcs.getExitCode())[ FD ]
Line_31 $$ RecoveredContainerState rcs = recoveredContainers.get(0)-->Line_61 $$ assertEquals(diags.toString(), rcs.getDiagnostics())[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_8 $$ LocalResource lrsrc = LocalResource.newInstance(URL.newInstance("hdfs", "somehost", 12345, "/some/path/to/rsrc"), LocalResourceType.FILE, LocalResourceVisibility.APPLICATION, 123L, 1234567890L)[ CD ]
Line_42 $$ recoveredContainers = stateStore.loadContainersState()-->Line_55 $$ assertEquals(1, recoveredContainers.size())[ FD ]
Line_31 $$ RecoveredContainerState rcs = recoveredContainers.get(0)-->Line_72 $$ assertEquals(containerReq, rcs.getStartRequest())[ FD ]
Line_3 $$ List<RecoveredContainerState> recoveredContainers = stateStore.loadContainersState()-->Line_67 $$ assertEquals(1, recoveredContainers.size())[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_77 $$ assertTrue(recoveredContainers.isEmpty())[ CD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_37 $$ StringBuilder diags = new StringBuilder()[ CD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_49 $$ assertEquals(diags.toString(), rcs.getDiagnostics())[ CD ]
Line_44 $$ rcs = recoveredContainers.get(0)-->Line_49 $$ assertEquals(diags.toString(), rcs.getDiagnostics())[ FD ]
Line_31 $$ RecoveredContainerState rcs = recoveredContainers.get(0)-->Line_73 $$ assertEquals(diags.toString(), rcs.getDiagnostics())[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_7 $$ ContainerId containerId = ContainerId.newInstance(appAttemptId, 5)[ CD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_68 $$ rcs = recoveredContainers.get(0)[ CD ]
Line_3 $$ List<RecoveredContainerState> recoveredContainers = stateStore.loadContainersState()-->Line_66 $$ recoveredContainers = stateStore.loadContainersState()[ FD ]
Line_16 $$ Map<String, ByteBuffer> serviceData = new HashMap<String, ByteBuffer>()-->Line_17 $$ serviceData.put("someservice", ByteBuffer.wrap(new byte[] [ FD ]
Line_66 $$ recoveredContainers = stateStore.loadContainersState()-->Line_68 $$ rcs = recoveredContainers.get(0)[ FD ]
Line_26 $$ StartContainerRequest containerReq = StartContainerRequest.newInstance(clc, containerToken)-->Line_27 $$ stateStore.storeContainer(containerId, containerReq)[ FD ]
Line_31 $$ RecoveredContainerState rcs = recoveredContainers.get(0)-->Line_33 $$ assertEquals(ContainerExitStatus.INVALID, rcs.getExitCode())[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_56 $$ rcs = recoveredContainers.get(0)[ CD ]
Line_42 $$ recoveredContainers = stateStore.loadContainersState()-->Line_54 $$ recoveredContainers = stateStore.loadContainersState()[ FD ]
Line_68 $$ rcs = recoveredContainers.get(0)-->Line_70 $$ assertEquals(21, rcs.getExitCode())[ FD ]
Line_7 $$ ContainerId containerId = ContainerId.newInstance(appAttemptId, 5)-->Line_74 $$ stateStore.removeContainer(containerId)[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_30 $$ assertEquals(1, recoveredContainers.size())[ CD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_28 $$ restartStateStore()[ CD ]
Line_26 $$ StartContainerRequest containerReq = StartContainerRequest.newInstance(clc, containerToken)-->Line_60 $$ assertEquals(containerReq, rcs.getStartRequest())[ FD ]
Line_3 $$ List<RecoveredContainerState> recoveredContainers = stateStore.loadContainersState()-->Line_30 $$ assertEquals(1, recoveredContainers.size())[ FD ]
Line_37 $$ StringBuilder diags = new StringBuilder()-->Line_39 $$ diags.append("some diags for container")[ FD ]
Line_6 $$ ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 4)-->Line_7 $$ ContainerId containerId = ContainerId.newInstance(appAttemptId, 5)[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_5 $$ ApplicationId appId = ApplicationId.newInstance(1234, 3)[ CD ]
Line_29 $$ recoveredContainers = stateStore.loadContainersState()-->Line_77 $$ assertTrue(recoveredContainers.isEmpty())[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_24 $$ ContainerTokenIdentifier containerTokenId = new ContainerTokenIdentifier(containerId, "host", "user", containerRsrc, 9876543210L, 42, 2468, Priority.newInstance(7), 13579)[ CD ]
Line_11 $$ Map<String, String> env = new HashMap<String, String>()-->Line_22 $$ ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, env, containerCmds, serviceData, containerTokens, acls)[ FD ]
Line_25 $$ Token containerToken = Token.newInstance(containerTokenId.getBytes(), ContainerTokenIdentifier.KIND.toString(), "password".getBytes(), "tokenservice")-->Line_26 $$ StartContainerRequest containerReq = StartContainerRequest.newInstance(clc, containerToken)[ FD ]
Line_29 $$ recoveredContainers = stateStore.loadContainersState()-->Line_43 $$ assertEquals(1, recoveredContainers.size())[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_62 $$ diags.append("some final diags")[ CD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_52 $$ stateStore.storeContainerKilled(containerId)[ CD ]
Line_9 $$ Map<String, LocalResource> localResources = new HashMap<String, LocalResource>()-->Line_22 $$ ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, env, containerCmds, serviceData, containerTokens, acls)[ FD ]
Line_56 $$ rcs = recoveredContainers.get(0)-->Line_59 $$ assertTrue(rcs.getKilled())[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_59 $$ assertTrue(rcs.getKilled())[ CD ]
Line_31 $$ RecoveredContainerState rcs = recoveredContainers.get(0)-->Line_57 $$ assertEquals(RecoveredContainerStatus.LAUNCHED, rcs.getStatus())[ FD ]
Line_31 $$ RecoveredContainerState rcs = recoveredContainers.get(0)-->Line_59 $$ assertTrue(rcs.getKilled())[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_9 $$ Map<String, LocalResource> localResources = new HashMap<String, LocalResource>()[ CD ]
Line_66 $$ recoveredContainers = stateStore.loadContainersState()-->Line_77 $$ assertTrue(recoveredContainers.isEmpty())[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_41 $$ restartStateStore()[ CD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_44 $$ rcs = recoveredContainers.get(0)[ CD ]
Line_37 $$ StringBuilder diags = new StringBuilder()-->Line_51 $$ stateStore.storeContainerDiagnostics(containerId, diags)[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_3 $$ List<RecoveredContainerState> recoveredContainers = stateStore.loadContainersState()[ CD ]
Line_31 $$ RecoveredContainerState rcs = recoveredContainers.get(0)-->Line_48 $$ assertEquals(containerReq, rcs.getStartRequest())[ FD ]
Line_31 $$ RecoveredContainerState rcs = recoveredContainers.get(0)-->Line_69 $$ assertEquals(RecoveredContainerStatus.COMPLETED, rcs.getStatus())[ FD ]
Line_56 $$ rcs = recoveredContainers.get(0)-->Line_71 $$ assertTrue(rcs.getKilled())[ FD ]
Line_13 $$ List<String> containerCmds = new ArrayList<String>()-->Line_14 $$ containerCmds.add("somecmd")[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_19 $$ Map<ApplicationAccessType, String> acls = new HashMap<ApplicationAccessType, String>()[ CD ]
Line_42 $$ recoveredContainers = stateStore.loadContainersState()-->Line_66 $$ recoveredContainers = stateStore.loadContainersState()[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_66 $$ recoveredContainers = stateStore.loadContainersState()[ CD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_10 $$ localResources.put("rsrc", lrsrc)[ CD ]
Line_31 $$ RecoveredContainerState rcs = recoveredContainers.get(0)-->Line_34 $$ assertEquals(false, rcs.getKilled())[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_4 $$ assertTrue(recoveredContainers.isEmpty())[ CD ]
Line_42 $$ recoveredContainers = stateStore.loadContainersState()-->Line_67 $$ assertEquals(1, recoveredContainers.size())[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_14 $$ containerCmds.add("somecmd")[ CD ]
Line_44 $$ rcs = recoveredContainers.get(0)-->Line_72 $$ assertEquals(containerReq, rcs.getStartRequest())[ FD ]
Line_54 $$ recoveredContainers = stateStore.loadContainersState()-->Line_56 $$ rcs = recoveredContainers.get(0)[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_40 $$ stateStore.storeContainerDiagnostics(containerId, diags)[ CD ]
Line_3 $$ List<RecoveredContainerState> recoveredContainers = stateStore.loadContainersState()-->Line_31 $$ RecoveredContainerState rcs = recoveredContainers.get(0)[ FD ]
Line_18 $$ ByteBuffer containerTokens = ByteBuffer.wrap(new byte[] -->Line_22 $$ ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, env, containerCmds, serviceData, containerTokens, acls)[ FD ]
Line_26 $$ StartContainerRequest containerReq = StartContainerRequest.newInstance(clc, containerToken)-->Line_35 $$ assertEquals(containerReq, rcs.getStartRequest())[ FD ]
Line_31 $$ RecoveredContainerState rcs = recoveredContainers.get(0)-->Line_36 $$ assertTrue(rcs.getDiagnostics().isEmpty())[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_50 $$ diags.append("some more diags for container")[ CD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_57 $$ assertEquals(RecoveredContainerStatus.LAUNCHED, rcs.getStatus())[ CD ]
Line_37 $$ StringBuilder diags = new StringBuilder()-->Line_62 $$ diags.append("some final diags")[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_34 $$ assertEquals(false, rcs.getKilled())[ CD ]
Line_42 $$ recoveredContainers = stateStore.loadContainersState()-->Line_68 $$ rcs = recoveredContainers.get(0)[ FD ]
Line_68 $$ rcs = recoveredContainers.get(0)-->Line_71 $$ assertTrue(rcs.getKilled())[ FD ]
Line_31 $$ RecoveredContainerState rcs = recoveredContainers.get(0)-->Line_46 $$ assertEquals(ContainerExitStatus.INVALID, rcs.getExitCode())[ FD ]
Line_3 $$ List<RecoveredContainerState> recoveredContainers = stateStore.loadContainersState()-->Line_43 $$ assertEquals(1, recoveredContainers.size())[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_65 $$ restartStateStore()[ CD ]
Line_11 $$ Map<String, String> env = new HashMap<String, String>()-->Line_12 $$ env.put("somevar", "someval")[ FD ]
Line_5 $$ ApplicationId appId = ApplicationId.newInstance(1234, 3)-->Line_6 $$ ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 4)[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_75 $$ restartStateStore()[ CD ]
Line_29 $$ recoveredContainers = stateStore.loadContainersState()-->Line_68 $$ rcs = recoveredContainers.get(0)[ FD ]
Line_31 $$ RecoveredContainerState rcs = recoveredContainers.get(0)-->Line_47 $$ assertEquals(false, rcs.getKilled())[ FD ]
Line_56 $$ rcs = recoveredContainers.get(0)-->Line_58 $$ assertEquals(ContainerExitStatus.INVALID, rcs.getExitCode())[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_64 $$ stateStore.storeContainerCompleted(containerId, 21)[ CD ]
Line_44 $$ rcs = recoveredContainers.get(0)-->Line_56 $$ rcs = recoveredContainers.get(0)[ FD ]
Line_56 $$ rcs = recoveredContainers.get(0)-->Line_70 $$ assertEquals(21, rcs.getExitCode())[ FD ]
Line_37 $$ StringBuilder diags = new StringBuilder()-->Line_73 $$ assertEquals(diags.toString(), rcs.getDiagnostics())[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_70 $$ assertEquals(21, rcs.getExitCode())[ CD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_45 $$ assertEquals(RecoveredContainerStatus.LAUNCHED, rcs.getStatus())[ CD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_61 $$ assertEquals(diags.toString(), rcs.getDiagnostics())[ CD ]
Line_44 $$ rcs = recoveredContainers.get(0)-->Line_46 $$ assertEquals(ContainerExitStatus.INVALID, rcs.getExitCode())[ FD ]
Line_22 $$ ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, env, containerCmds, serviceData, containerTokens, acls)-->Line_26 $$ StartContainerRequest containerReq = StartContainerRequest.newInstance(clc, containerToken)[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_27 $$ stateStore.storeContainer(containerId, containerReq)[ CD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_69 $$ assertEquals(RecoveredContainerStatus.COMPLETED, rcs.getStatus())[ CD ]
Line_7 $$ ContainerId containerId = ContainerId.newInstance(appAttemptId, 5)-->Line_38 $$ stateStore.storeContainerLaunched(containerId)[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_47 $$ assertEquals(false, rcs.getKilled())[ CD ]
Line_31 $$ RecoveredContainerState rcs = recoveredContainers.get(0)-->Line_49 $$ assertEquals(diags.toString(), rcs.getDiagnostics())[ FD ]
Line_44 $$ rcs = recoveredContainers.get(0)-->Line_69 $$ assertEquals(RecoveredContainerStatus.COMPLETED, rcs.getStatus())[ FD ]
Line_19 $$ Map<ApplicationAccessType, String> acls = new HashMap<ApplicationAccessType, String>()-->Line_21 $$ acls.put(ApplicationAccessType.MODIFY_APP, "moduser")[ FD ]
Line_3 $$ List<RecoveredContainerState> recoveredContainers = stateStore.loadContainersState()-->Line_4 $$ assertTrue(recoveredContainers.isEmpty())[ FD ]
Line_31 $$ RecoveredContainerState rcs = recoveredContainers.get(0)-->Line_56 $$ rcs = recoveredContainers.get(0)[ FD ]
Line_54 $$ recoveredContainers = stateStore.loadContainersState()-->Line_76 $$ recoveredContainers = stateStore.loadContainersState()[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_29 $$ recoveredContainers = stateStore.loadContainersState()[ CD ]
Line_31 $$ RecoveredContainerState rcs = recoveredContainers.get(0)-->Line_68 $$ rcs = recoveredContainers.get(0)[ FD ]
Line_31 $$ RecoveredContainerState rcs = recoveredContainers.get(0)-->Line_35 $$ assertEquals(containerReq, rcs.getStartRequest())[ FD ]
Line_44 $$ rcs = recoveredContainers.get(0)-->Line_60 $$ assertEquals(containerReq, rcs.getStartRequest())[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_31 $$ RecoveredContainerState rcs = recoveredContainers.get(0)[ CD ]
Line_7 $$ ContainerId containerId = ContainerId.newInstance(appAttemptId, 5)-->Line_40 $$ stateStore.storeContainerDiagnostics(containerId, diags)[ FD ]
Line_3 $$ List<RecoveredContainerState> recoveredContainers = stateStore.loadContainersState()-->Line_68 $$ rcs = recoveredContainers.get(0)[ FD ]
Line_31 $$ RecoveredContainerState rcs = recoveredContainers.get(0)-->Line_45 $$ assertEquals(RecoveredContainerStatus.LAUNCHED, rcs.getStatus())[ FD ]
Line_42 $$ recoveredContainers = stateStore.loadContainersState()-->Line_56 $$ rcs = recoveredContainers.get(0)[ FD ]
Line_29 $$ recoveredContainers = stateStore.loadContainersState()-->Line_66 $$ recoveredContainers = stateStore.loadContainersState()[ FD ]
Line_16 $$ Map<String, ByteBuffer> serviceData = new HashMap<String, ByteBuffer>()-->Line_22 $$ ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, env, containerCmds, serviceData, containerTokens, acls)[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_43 $$ assertEquals(1, recoveredContainers.size())[ CD ]
Line_31 $$ RecoveredContainerState rcs = recoveredContainers.get(0)-->Line_44 $$ rcs = recoveredContainers.get(0)[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_38 $$ stateStore.storeContainerLaunched(containerId)[ CD ]
Line_7 $$ ContainerId containerId = ContainerId.newInstance(appAttemptId, 5)-->Line_52 $$ stateStore.storeContainerKilled(containerId)[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_58 $$ assertEquals(ContainerExitStatus.INVALID, rcs.getExitCode())[ CD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_20 $$ acls.put(ApplicationAccessType.VIEW_APP, "viewuser")[ CD ]
Line_54 $$ recoveredContainers = stateStore.loadContainersState()-->Line_67 $$ assertEquals(1, recoveredContainers.size())[ FD ]
Line_26 $$ StartContainerRequest containerReq = StartContainerRequest.newInstance(clc, containerToken)-->Line_72 $$ assertEquals(containerReq, rcs.getStartRequest())[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_48 $$ assertEquals(containerReq, rcs.getStartRequest())[ CD ]
Line_66 $$ recoveredContainers = stateStore.loadContainersState()-->Line_76 $$ recoveredContainers = stateStore.loadContainersState()[ FD ]
Line_29 $$ recoveredContainers = stateStore.loadContainersState()-->Line_54 $$ recoveredContainers = stateStore.loadContainersState()[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_6 $$ ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 4)[ CD ]
Line_29 $$ recoveredContainers = stateStore.loadContainersState()-->Line_76 $$ recoveredContainers = stateStore.loadContainersState()[ FD ]
Line_29 $$ recoveredContainers = stateStore.loadContainersState()-->Line_56 $$ rcs = recoveredContainers.get(0)[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_12 $$ env.put("somevar", "someval")[ CD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_67 $$ assertEquals(1, recoveredContainers.size())[ CD ]
Line_42 $$ recoveredContainers = stateStore.loadContainersState()-->Line_77 $$ assertTrue(recoveredContainers.isEmpty())[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_26 $$ StartContainerRequest containerReq = StartContainerRequest.newInstance(clc, containerToken)[ CD ]
Line_19 $$ Map<ApplicationAccessType, String> acls = new HashMap<ApplicationAccessType, String>()-->Line_20 $$ acls.put(ApplicationAccessType.VIEW_APP, "viewuser")[ FD ]
Line_8 $$ LocalResource lrsrc = LocalResource.newInstance(URL.newInstance("hdfs", "somehost", 12345, "/some/path/to/rsrc"), LocalResourceType.FILE, LocalResourceVisibility.APPLICATION, 123L, 1234567890L)-->Line_10 $$ localResources.put("rsrc", lrsrc)[ FD ]
Line_3 $$ List<RecoveredContainerState> recoveredContainers = stateStore.loadContainersState()-->Line_29 $$ recoveredContainers = stateStore.loadContainersState()[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_42 $$ recoveredContainers = stateStore.loadContainersState()[ CD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_23 $$ Resource containerRsrc = Resource.newInstance(1357, 3)[ CD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_46 $$ assertEquals(ContainerExitStatus.INVALID, rcs.getExitCode())[ CD ]
Line_56 $$ rcs = recoveredContainers.get(0)-->Line_61 $$ assertEquals(diags.toString(), rcs.getDiagnostics())[ FD ]
Line_54 $$ recoveredContainers = stateStore.loadContainersState()-->Line_68 $$ rcs = recoveredContainers.get(0)[ FD ]
Line_44 $$ rcs = recoveredContainers.get(0)-->Line_71 $$ assertTrue(rcs.getKilled())[ FD ]
Line_29 $$ recoveredContainers = stateStore.loadContainersState()-->Line_42 $$ recoveredContainers = stateStore.loadContainersState()[ FD ]
Line_42 $$ recoveredContainers = stateStore.loadContainersState()-->Line_43 $$ assertEquals(1, recoveredContainers.size())[ FD ]
Line_7 $$ ContainerId containerId = ContainerId.newInstance(appAttemptId, 5)-->Line_63 $$ stateStore.storeContainerDiagnostics(containerId, diags)[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_72 $$ assertEquals(containerReq, rcs.getStartRequest())[ CD ]
Line_31 $$ RecoveredContainerState rcs = recoveredContainers.get(0)-->Line_70 $$ assertEquals(21, rcs.getExitCode())[ FD ]
Line_37 $$ StringBuilder diags = new StringBuilder()-->Line_40 $$ stateStore.storeContainerDiagnostics(containerId, diags)[ FD ]
Line_44 $$ rcs = recoveredContainers.get(0)-->Line_59 $$ assertTrue(rcs.getKilled())[ FD ]
Line_68 $$ rcs = recoveredContainers.get(0)-->Line_73 $$ assertEquals(diags.toString(), rcs.getDiagnostics())[ FD ]
Line_7 $$ ContainerId containerId = ContainerId.newInstance(appAttemptId, 5)-->Line_64 $$ stateStore.storeContainerCompleted(containerId, 21)[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_63 $$ stateStore.storeContainerDiagnostics(containerId, diags)[ CD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_13 $$ List<String> containerCmds = new ArrayList<String>()[ CD ]
Line_24 $$ ContainerTokenIdentifier containerTokenId = new ContainerTokenIdentifier(containerId, "host", "user", containerRsrc, 9876543210L, 42, 2468, Priority.newInstance(7), 13579)-->Line_25 $$ Token containerToken = Token.newInstance(containerTokenId.getBytes(), ContainerTokenIdentifier.KIND.toString(), "password".getBytes(), "tokenservice")[ FD ]
Line_37 $$ StringBuilder diags = new StringBuilder()-->Line_50 $$ diags.append("some more diags for container")[ FD ]
Line_7 $$ ContainerId containerId = ContainerId.newInstance(appAttemptId, 5)-->Line_27 $$ stateStore.storeContainer(containerId, containerReq)[ FD ]
Line_44 $$ rcs = recoveredContainers.get(0)-->Line_57 $$ assertEquals(RecoveredContainerStatus.LAUNCHED, rcs.getStatus())[ FD ]
Line_29 $$ recoveredContainers = stateStore.loadContainersState()-->Line_55 $$ assertEquals(1, recoveredContainers.size())[ FD ]
Line_44 $$ rcs = recoveredContainers.get(0)-->Line_58 $$ assertEquals(ContainerExitStatus.INVALID, rcs.getExitCode())[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_39 $$ diags.append("some diags for container")[ CD ]
Line_29 $$ recoveredContainers = stateStore.loadContainersState()-->Line_30 $$ assertEquals(1, recoveredContainers.size())[ FD ]
Line_54 $$ recoveredContainers = stateStore.loadContainersState()-->Line_55 $$ assertEquals(1, recoveredContainers.size())[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_17 $$ serviceData.put("someservice", ByteBuffer.wrap(new byte[] [ CD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_21 $$ acls.put(ApplicationAccessType.MODIFY_APP, "moduser")[ CD ]
Line_68 $$ rcs = recoveredContainers.get(0)-->Line_69 $$ assertEquals(RecoveredContainerStatus.COMPLETED, rcs.getStatus())[ FD ]
Line_56 $$ rcs = recoveredContainers.get(0)-->Line_72 $$ assertEquals(containerReq, rcs.getStartRequest())[ FD ]
Line_3 $$ List<RecoveredContainerState> recoveredContainers = stateStore.loadContainersState()-->Line_55 $$ assertEquals(1, recoveredContainers.size())[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_32 $$ assertEquals(RecoveredContainerStatus.REQUESTED, rcs.getStatus())[ CD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_22 $$ ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, env, containerCmds, serviceData, containerTokens, acls)[ CD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_55 $$ assertEquals(1, recoveredContainers.size())[ CD ]
Line_3 $$ List<RecoveredContainerState> recoveredContainers = stateStore.loadContainersState()-->Line_54 $$ recoveredContainers = stateStore.loadContainersState()[ FD ]
Line_44 $$ rcs = recoveredContainers.get(0)-->Line_48 $$ assertEquals(containerReq, rcs.getStartRequest())[ FD ]
Line_3 $$ List<RecoveredContainerState> recoveredContainers = stateStore.loadContainersState()-->Line_42 $$ recoveredContainers = stateStore.loadContainersState()[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_54 $$ recoveredContainers = stateStore.loadContainersState()[ CD ]
Line_31 $$ RecoveredContainerState rcs = recoveredContainers.get(0)-->Line_60 $$ assertEquals(containerReq, rcs.getStartRequest())[ FD ]
Line_56 $$ rcs = recoveredContainers.get(0)-->Line_57 $$ assertEquals(RecoveredContainerStatus.LAUNCHED, rcs.getStatus())[ FD ]
Line_56 $$ rcs = recoveredContainers.get(0)-->Line_73 $$ assertEquals(diags.toString(), rcs.getDiagnostics())[ FD ]
Line_7 $$ ContainerId containerId = ContainerId.newInstance(appAttemptId, 5)-->Line_51 $$ stateStore.storeContainerDiagnostics(containerId, diags)[ FD ]
Line_3 $$ List<RecoveredContainerState> recoveredContainers = stateStore.loadContainersState()-->Line_56 $$ rcs = recoveredContainers.get(0)[ FD ]
Line_37 $$ StringBuilder diags = new StringBuilder()-->Line_63 $$ stateStore.storeContainerDiagnostics(containerId, diags)[ FD ]
Line_2 $$ public void testContainerStorage() throws IOException -->Line_74 $$ stateStore.removeContainer(containerId)[ CD ]
Line_13 $$ List<String> containerCmds = new ArrayList<String>()-->Line_15 $$ containerCmds.add("somearg")[ FD ]
