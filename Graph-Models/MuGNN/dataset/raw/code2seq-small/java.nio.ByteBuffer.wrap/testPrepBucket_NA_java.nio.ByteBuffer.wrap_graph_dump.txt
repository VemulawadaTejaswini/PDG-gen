Line_11 $$ for (int r = 0; r < numSSTables; r++) -->Line_12 $$ String key = String.valueOf(r)[ FD ]
Line_18 $$ Pair<List<SSTableReader>, Double> bucket-->Line_25 $$ bucket = trimToThresholdWithHotness(sstrs, 2)[ FD ]
Line_11 $$ for (int r = 0; r < numSSTables; r++) -->Line_13 $$ new RowUpdateBuilder(cfs.metadata, 0, key).clustering("column").add("val", value).build().applyUnsafe()[ CD ]
Line_11 $$ for (int r = 0; r < numSSTables; r++) -->Line_12 $$ String key = String.valueOf(r)[ CD ]
Line_19 $$ List<SSTableReader> interestingBucket = mostInterestingBucket(Collections.singletonList(sstrs.subList(0, 2)), 4, 32)-->Line_20 $$ assertTrue("nothing should be returned when all buckets are below the min threshold", interestingBucket.isEmpty())[ FD ]
Line_2 $$ public void testPrepBucket() throws Exception -->Line_5 $$ Keyspace keyspace = Keyspace.open(ksname)[ CD ]
Line_9 $$ ByteBuffer value = ByteBuffer.wrap(new byte[100])-->Line_13 $$ new RowUpdateBuilder(cfs.metadata, 0, key).clustering("column").add("val", value).build().applyUnsafe()[ FD ]
Line_5 $$ Keyspace keyspace = Keyspace.open(ksname)-->Line_6 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)[ FD ]
Line_17 $$ List<SSTableReader> sstrs = new ArrayList(cfs.getLiveSSTables())-->Line_24 $$ long estimatedKeys = sstrs.get(0).estimatedKeys()[ FD ]
Line_17 $$ List<SSTableReader> sstrs = new ArrayList(cfs.getLiveSSTables())-->Line_19 $$ List<SSTableReader> interestingBucket = mostInterestingBucket(Collections.singletonList(sstrs.subList(0, 2)), 4, 32)[ FD ]
Line_6 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)-->Line_8 $$ cfs.disableAutoCompaction()[ FD ]
Line_2 $$ public void testPrepBucket() throws Exception -->Line_27 $$ double expectedBucketHotness = (200.0 + 300.0) / estimatedKeys[ CD ]
Line_3 $$ String ksname = KEYSPACE1-->Line_5 $$ Keyspace keyspace = Keyspace.open(ksname)[ FD ]
Line_2 $$ public void testPrepBucket() throws Exception -->Line_3 $$ String ksname = KEYSPACE1[ CD ]
Line_2 $$ public void testPrepBucket() throws Exception -->Line_6 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)[ CD ]
Line_2 $$ public void testPrepBucket() throws Exception -->Line_19 $$ List<SSTableReader> interestingBucket = mostInterestingBucket(Collections.singletonList(sstrs.subList(0, 2)), 4, 32)[ CD ]
Line_2 $$ public void testPrepBucket() throws Exception -->Line_21 $$ sstrs.get(0).overrideReadMeter(new RestorableMeter(100.0, 100.0))[ CD ]
Line_6 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)-->Line_17 $$ List<SSTableReader> sstrs = new ArrayList(cfs.getLiveSSTables())[ FD ]
Line_2 $$ public void testPrepBucket() throws Exception -->Line_28 $$ assertEquals(String.format("bucket hotness (%f) should be close to %f", bucket.right, expectedBucketHotness), expectedBucketHotness, bucket.right, 1.0)[ CD ]
Line_17 $$ List<SSTableReader> sstrs = new ArrayList(cfs.getLiveSSTables())-->Line_25 $$ bucket = trimToThresholdWithHotness(sstrs, 2)[ FD ]
Line_2 $$ public void testPrepBucket() throws Exception -->Line_10 $$ int numSSTables = 3[ CD ]
Line_6 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)-->Line_16 $$ cfs.forceBlockingFlush()[ FD ]
Line_2 $$ public void testPrepBucket() throws Exception -->Line_26 $$ assertEquals("one bucket should have been dropped", 2, bucket.left.size())[ CD ]
Line_2 $$ public void testPrepBucket() throws Exception -->Line_7 $$ cfs.truncateBlocking()[ CD ]
Line_27 $$ double expectedBucketHotness = (200.0 + 300.0) / estimatedKeys-->Line_28 $$ assertEquals(String.format("bucket hotness (%f) should be close to %f", bucket.right, expectedBucketHotness), expectedBucketHotness, bucket.right, 1.0)[ FD ]
Line_2 $$ public void testPrepBucket() throws Exception -->Line_20 $$ assertTrue("nothing should be returned when all buckets are below the min threshold", interestingBucket.isEmpty())[ CD ]
Line_11 $$ for (int r = 0; r < numSSTables; r++) -->Line_14 $$ cfs.forceBlockingFlush()[ CD ]
Line_6 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)-->Line_14 $$ cfs.forceBlockingFlush()[ FD ]
Line_2 $$ public void testPrepBucket() throws Exception -->Line_24 $$ long estimatedKeys = sstrs.get(0).estimatedKeys()[ CD ]
Line_2 $$ public void testPrepBucket() throws Exception -->Line_11 $$ for (int r = 0; r < numSSTables; r++) [ CD ]
Line_2 $$ public void testPrepBucket() throws Exception -->Line_16 $$ cfs.forceBlockingFlush()[ CD ]
Line_2 $$ public void testPrepBucket() throws Exception -->Line_17 $$ List<SSTableReader> sstrs = new ArrayList(cfs.getLiveSSTables())[ CD ]
Line_6 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)-->Line_7 $$ cfs.truncateBlocking()[ FD ]
Line_2 $$ public void testPrepBucket() throws Exception -->Line_18 $$ Pair<List<SSTableReader>, Double> bucket[ CD ]
Line_2 $$ public void testPrepBucket() throws Exception -->Line_22 $$ sstrs.get(1).overrideReadMeter(new RestorableMeter(200.0, 200.0))[ CD ]
Line_10 $$ int numSSTables = 3-->Line_11 $$ for (int r = 0; r < numSSTables; r++) [ FD ]
Line_17 $$ List<SSTableReader> sstrs = new ArrayList(cfs.getLiveSSTables())-->Line_21 $$ sstrs.get(0).overrideReadMeter(new RestorableMeter(100.0, 100.0))[ FD ]
Line_2 $$ public void testPrepBucket() throws Exception -->Line_8 $$ cfs.disableAutoCompaction()[ CD ]
Line_4 $$ String cfname = "Standard1"-->Line_6 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(cfname)[ FD ]
Line_2 $$ public void testPrepBucket() throws Exception -->Line_25 $$ bucket = trimToThresholdWithHotness(sstrs, 2)[ CD ]
Line_2 $$ public void testPrepBucket() throws Exception -->Line_4 $$ String cfname = "Standard1"[ CD ]
Line_17 $$ List<SSTableReader> sstrs = new ArrayList(cfs.getLiveSSTables())-->Line_22 $$ sstrs.get(1).overrideReadMeter(new RestorableMeter(200.0, 200.0))[ FD ]
Line_17 $$ List<SSTableReader> sstrs = new ArrayList(cfs.getLiveSSTables())-->Line_23 $$ sstrs.get(2).overrideReadMeter(new RestorableMeter(300.0, 300.0))[ FD ]
Line_2 $$ public void testPrepBucket() throws Exception -->Line_9 $$ ByteBuffer value = ByteBuffer.wrap(new byte[100])[ CD ]
Line_2 $$ public void testPrepBucket() throws Exception -->Line_23 $$ sstrs.get(2).overrideReadMeter(new RestorableMeter(300.0, 300.0))[ CD ]
