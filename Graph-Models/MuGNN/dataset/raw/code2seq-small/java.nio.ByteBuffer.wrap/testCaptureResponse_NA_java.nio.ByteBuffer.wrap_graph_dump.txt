Line_2 $$ public void testCaptureResponse() throws IOException -->Line_61 $$ content = "<div>content</div>"[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_37 $$ Assert.assertNotNull(spiAgentResponse.metaData)[ CD ]
Line_9 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_67 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_19 $$ ByteBuffer byteBuffer = ByteBuffer.allocateDirect(byteArray.length)-->Line_20 $$ byteBuffer.put(byteArray)[ FD ]
Line_11 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_13 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_58 $$ Assert.assertNotNull(spiAgentResponse.metaData)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_65 $$ PortalUtil.setPortalInetSocketAddresses(mockHttpServletRequest)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_6 $$ Assert.assertNull(spiAgentResponse.metaData)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_40 $$ bufferCacheServletResponse.setString(StringPool.BLANK)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_28 $$ bufferCacheServletResponse.setByteBuffer(ByteBuffer.wrap(byteArray))[ CD ]
Line_46 $$ String content = "content"-->Line_47 $$ bufferCacheServletResponse.setString(content)[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_11 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_46 $$ String content = "content"[ CD ]
Line_18 $$ byte[] byteArray = new byte[] -->Line_28 $$ bufferCacheServletResponse.setByteBuffer(ByteBuffer.wrap(byteArray))[ FD ]
Line_11 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_34 $$ bufferCacheServletResponse.setByteBuffer(ByteBuffer.wrap(byteArray, 2, 2))[ FD ]
Line_11 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_28 $$ bufferCacheServletResponse.setByteBuffer(ByteBuffer.wrap(byteArray))[ FD ]
Line_9 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_23 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_31 $$ Assert.assertNotNull(spiAgentResponse.metaData)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_17 $$ Assert.assertNull(spiAgentResponse.stringData)[ CD ]
Line_18 $$ byte[] byteArray = new byte[] -->Line_26 $$ Assert.assertArrayEquals(byteArray, spiAgentResponse.byteData)[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_10 $$ mockHttpServletRequest.setAttribute(WebKeys.PORTAL_RESILIENCY_ACTION, true)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_47 $$ bufferCacheServletResponse.setString(content)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_48 $$ mockHttpServletRequest.setParameter("portalResiliencyPortletShowFooter", StringPool.FALSE)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_15 $$ Assert.assertNotNull(spiAgentResponse.metaData)[ CD ]
Line_46 $$ String content = "content"-->Line_53 $$ Assert.assertSame(content, spiAgentResponse.stringData)[ FD ]
Line_3 $$ SPIAgentResponse spiAgentResponse = new SPIAgentResponse(_SERVLET_CONTEXT_NAME)-->Line_67 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_11 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_12 $$ bufferCacheServletResponse.setByteBuffer(ByteBuffer.allocate(0))[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_60 $$ Assert.assertSame(content, spiAgentResponse.stringData)[ CD ]
Line_19 $$ ByteBuffer byteBuffer = ByteBuffer.allocateDirect(byteArray.length)-->Line_21 $$ byteBuffer.clear()[ FD ]
Line_9 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_41 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_24 $$ Assert.assertTrue(spiAgentResponse.portalResiliencyResponse)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_20 $$ byteBuffer.put(byteArray)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_59 $$ Assert.assertNull(spiAgentResponse.byteData)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_39 $$ Assert.assertNull(spiAgentResponse.stringData)[ CD ]
Line_46 $$ String content = "content"-->Line_54 $$ bufferCacheServletResponse.setString(content)[ FD ]
Line_9 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_56 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_3 $$ SPIAgentResponse spiAgentResponse = new SPIAgentResponse(_SERVLET_CONTEXT_NAME)-->Line_35 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_36 $$ Assert.assertTrue(spiAgentResponse.portalResiliencyResponse)[ CD ]
Line_9 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_48 $$ mockHttpServletRequest.setParameter("portalResiliencyPortletShowFooter", StringPool.FALSE)[ FD ]
Line_9 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_49 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_18 $$ byte[] byteArray = new byte[] -->Line_20 $$ byteBuffer.put(byteArray)[ FD ]
Line_46 $$ String content = "content"-->Line_61 $$ content = "<div>content</div>"[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_56 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_54 $$ bufferCacheServletResponse.setString(content)[ CD ]
Line_18 $$ byte[] byteArray = new byte[] -->Line_34 $$ bufferCacheServletResponse.setByteBuffer(ByteBuffer.wrap(byteArray, 2, 2))[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_43 $$ Assert.assertNotNull(spiAgentResponse.metaData)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_26 $$ Assert.assertArrayEquals(byteArray, spiAgentResponse.byteData)[ CD ]
Line_9 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_63 $$ mockHttpServletRequest.setLocalAddr("127.0.0.1")[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_33 $$ Assert.assertNull(spiAgentResponse.stringData)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_25 $$ Assert.assertNotNull(spiAgentResponse.metaData)[ CD ]
Line_11 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_67 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_51 $$ Assert.assertNotNull(spiAgentResponse.metaData)[ CD ]
Line_11 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_23 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_46 $$ String content = "content"-->Line_60 $$ Assert.assertSame(content, spiAgentResponse.stringData)[ FD ]
Line_9 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_13 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_11 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_29 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_27 $$ Assert.assertNull(spiAgentResponse.stringData)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_71 $$ Assert.assertEquals("<div>content<div class=\"alert alert-info\"><strong>This " + "portlet is from SPI 1234</strong></div></div>", spiAgentResponse.stringData)[ CD ]
Line_3 $$ SPIAgentResponse spiAgentResponse = new SPIAgentResponse(_SERVLET_CONTEXT_NAME)-->Line_13 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_22 $$ bufferCacheServletResponse.setByteBuffer(byteBuffer)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_57 $$ Assert.assertTrue(spiAgentResponse.portalResiliencyResponse)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_66 $$ mockHttpServletRequest.setParameter("portalResiliencyPortletShowFooter", StringPool.TRUE)[ CD ]
Line_9 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_66 $$ mockHttpServletRequest.setParameter("portalResiliencyPortletShowFooter", StringPool.TRUE)[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_4 $$ spiAgentResponse.captureResponse(new MockHttpServletRequest(), new BufferCacheServletResponse(new MockHttpServletResponse()))[ CD ]
Line_3 $$ SPIAgentResponse spiAgentResponse = new SPIAgentResponse(_SERVLET_CONTEXT_NAME)-->Line_23 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_45 $$ Assert.assertNull(spiAgentResponse.stringData)[ CD ]
Line_11 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_54 $$ bufferCacheServletResponse.setString(content)[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_30 $$ Assert.assertTrue(spiAgentResponse.portalResiliencyResponse)[ CD ]
Line_11 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_41 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_29 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ CD ]
Line_11 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_62 $$ bufferCacheServletResponse.setString(content)[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_3 $$ SPIAgentResponse spiAgentResponse = new SPIAgentResponse(_SERVLET_CONTEXT_NAME)[ CD ]
Line_9 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_29 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_12 $$ bufferCacheServletResponse.setByteBuffer(ByteBuffer.allocate(0))[ CD ]
Line_11 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_35 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_44 $$ Assert.assertNull(spiAgentResponse.byteData)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_64 $$ mockHttpServletRequest.setLocalPort(1234)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_70 $$ Assert.assertNull(spiAgentResponse.byteData)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_34 $$ bufferCacheServletResponse.setByteBuffer(ByteBuffer.wrap(byteArray, 2, 2))[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_35 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_38 $$ Assert.assertArrayEquals(new byte[] [ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_9 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()[ CD ]
Line_46 $$ String content = "content"-->Line_62 $$ bufferCacheServletResponse.setString(content)[ FD ]
Line_9 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_35 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_3 $$ SPIAgentResponse spiAgentResponse = new SPIAgentResponse(_SERVLET_CONTEXT_NAME)-->Line_49 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_61 $$ content = "<div>content</div>"-->Line_62 $$ bufferCacheServletResponse.setString(content)[ FD ]
Line_9 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_55 $$ mockHttpServletRequest.setParameter("portalResiliencyPortletShowFooter", StringPool.TRUE)[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_42 $$ Assert.assertTrue(spiAgentResponse.portalResiliencyResponse)[ CD ]
Line_3 $$ SPIAgentResponse spiAgentResponse = new SPIAgentResponse(_SERVLET_CONTEXT_NAME)-->Line_29 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_68 $$ Assert.assertTrue(spiAgentResponse.portalResiliencyResponse)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_63 $$ mockHttpServletRequest.setLocalAddr("127.0.0.1")[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_23 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_8 $$ Assert.assertNull(spiAgentResponse.stringData)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_21 $$ byteBuffer.clear()[ CD ]
Line_9 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_64 $$ mockHttpServletRequest.setLocalPort(1234)[ FD ]
Line_9 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_10 $$ mockHttpServletRequest.setAttribute(WebKeys.PORTAL_RESILIENCY_ACTION, true)[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_50 $$ Assert.assertTrue(spiAgentResponse.portalResiliencyResponse)[ CD ]
Line_19 $$ ByteBuffer byteBuffer = ByteBuffer.allocateDirect(byteArray.length)-->Line_22 $$ bufferCacheServletResponse.setByteBuffer(byteBuffer)[ FD ]
Line_3 $$ SPIAgentResponse spiAgentResponse = new SPIAgentResponse(_SERVLET_CONTEXT_NAME)-->Line_41 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_11 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_22 $$ bufferCacheServletResponse.setByteBuffer(byteBuffer)[ FD ]
Line_18 $$ byte[] byteArray = new byte[] -->Line_32 $$ Assert.assertSame(byteArray, spiAgentResponse.byteData)[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_13 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ CD ]
Line_3 $$ SPIAgentResponse spiAgentResponse = new SPIAgentResponse(_SERVLET_CONTEXT_NAME)-->Line_56 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_14 $$ Assert.assertTrue(spiAgentResponse.portalResiliencyResponse)[ CD ]
Line_9 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_65 $$ PortalUtil.setPortalInetSocketAddresses(mockHttpServletRequest)[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_32 $$ Assert.assertSame(byteArray, spiAgentResponse.byteData)[ CD ]
Line_11 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_49 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_11 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_47 $$ bufferCacheServletResponse.setString(content)[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_55 $$ mockHttpServletRequest.setParameter("portalResiliencyPortletShowFooter", StringPool.TRUE)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_53 $$ Assert.assertSame(content, spiAgentResponse.stringData)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_69 $$ Assert.assertNotNull(spiAgentResponse.metaData)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_19 $$ ByteBuffer byteBuffer = ByteBuffer.allocateDirect(byteArray.length)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_5 $$ Assert.assertFalse(spiAgentResponse.portalResiliencyResponse)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_62 $$ bufferCacheServletResponse.setString(content)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_18 $$ byte[] byteArray = new byte[] [ CD ]
Line_3 $$ SPIAgentResponse spiAgentResponse = new SPIAgentResponse(_SERVLET_CONTEXT_NAME)-->Line_4 $$ spiAgentResponse.captureResponse(new MockHttpServletRequest(), new BufferCacheServletResponse(new MockHttpServletResponse()))[ FD ]
Line_11 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_56 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_16 $$ Assert.assertNull(spiAgentResponse.byteData)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_49 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_7 $$ Assert.assertNull(spiAgentResponse.byteData)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_67 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ CD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_41 $$ spiAgentResponse.captureResponse(mockHttpServletRequest, bufferCacheServletResponse)[ CD ]
Line_11 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_40 $$ bufferCacheServletResponse.setString(StringPool.BLANK)[ FD ]
Line_2 $$ public void testCaptureResponse() throws IOException -->Line_52 $$ Assert.assertNull(spiAgentResponse.byteData)[ CD ]
