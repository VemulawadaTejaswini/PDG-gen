Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_5 $$ byte[] sha_message = new byte[md.getDigestLength()][ CD ]
Line_15 $$ if (rsa_block_len < 1) -->Line_16 $$ log.log(20, "ssh-rsa signature: rsa_block_len < 1")[ CD ]
Line_32 $$ while (true) -->Line_33 $$ if (pos >= v.length) [ CD ]
Line_79 $$ if (digest.length != sha_message.length) -->Line_81 $$ return false[ CD ]
Line_51 $$ if (pos >= v.length) -->Line_53 $$ return false[ CD ]
Line_83 $$ for (int i = 0; i < sha_message.length; i++) -->Line_84 $$ if (sha_message[i] != digest[i]) [ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_55 $$ SimpleDERReader dr = new SimpleDERReader(v, pos, v.length - pos)[ CD ]
Line_23 $$ if ((v.length - startpos) != (rsa_block_len - 1)) -->Line_25 $$ return false[ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_67 $$ byte[] digestAlgorithm_sha1 = new byte[] [ CD ]
Line_33 $$ if (pos >= v.length) -->Line_34 $$ log.log(20, "ssh-rsa signature: pos >= v.length")[ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_51 $$ if (pos >= v.length) [ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_4 $$ md.update(message)[ FD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_15 $$ if (rsa_block_len < 1) [ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_50 $$ pos++[ CD ]
Line_55 $$ SimpleDERReader dr = new SimpleDERReader(v, pos, v.length - pos)-->Line_56 $$ byte[] seq = dr.readSequenceAsByteArray()[ FD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_83 $$ for (int i = 0; i < sha_message.length; i++) [ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_74 $$ byte[] digest = dr.readOctetString()[ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_32 $$ while (true) [ CD ]
Line_68 $$ for (int i = 0; i < digestAlgorithm.length; i++) -->Line_83 $$ for (int i = 0; i < sha_message.length; i++) [ FD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_9 $$ BigInteger s = ds.getS()[ FD ]
Line_31 $$ int pos = startpos + 1-->Line_51 $$ if (pos >= v.length) [ FD ]
Line_33 $$ if (pos >= v.length) -->Line_35 $$ return false[ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_20 $$ int startpos = 0[ CD ]
Line_7 $$ BigInteger n = dpk.getN()-->Line_14 $$ int rsa_block_len = (n.bitLength() + 7) / 8[ FD ]
Line_45 $$ int num_pad = pos - (startpos + 1)-->Line_46 $$ if (num_pad < 8) [ FD ]
Line_3 $$ SHA1 md = new SHA1()-->Line_6 $$ md.digest(sha_message)[ FD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_14 $$ int rsa_block_len = (n.bitLength() + 7) / 8[ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_7 $$ BigInteger n = dpk.getN()[ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_9 $$ BigInteger s = ds.getS()[ CD ]
Line_32 $$ while (true) -->Line_37 $$ if (v[pos] == 0x00)[ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_23 $$ if ((v.length - startpos) != (rsa_block_len - 1)) [ CD ]
Line_75 $$ if (dr.available() != 0) -->Line_76 $$ log.log(20, "ssh-rsa signature: dr.available() != 0 (II)")[ CD ]
Line_15 $$ if (rsa_block_len < 1) -->Line_17 $$ return false[ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_7 $$ BigInteger n = dpk.getN()[ FD ]
Line_46 $$ if (num_pad < 8) -->Line_48 $$ return false[ CD ]
Line_68 $$ for (int i = 0; i < digestAlgorithm.length; i++) -->Line_69 $$ if (digestAlgorithm[i] != digestAlgorithm_sha1[i]) [ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_8 $$ BigInteger e = dpk.getE()[ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_8 $$ BigInteger e = dpk.getE()[ FD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_56 $$ byte[] seq = dr.readSequenceAsByteArray()[ CD ]
Line_56 $$ byte[] seq = dr.readSequenceAsByteArray()-->Line_61 $$ dr.resetInput(seq)[ FD ]
Line_55 $$ SimpleDERReader dr = new SimpleDERReader(v, pos, v.length - pos)-->Line_62 $$ byte[] digestAlgorithm = dr.readSequenceAsByteArray()[ FD ]
Line_23 $$ if ((v.length - startpos) != (rsa_block_len - 1)) -->Line_24 $$ log.log(20, "ssh-rsa signature: (v.length - startpos) != (rsa_block_len - 1)")[ CD ]
Line_3 $$ SHA1 md = new SHA1()-->Line_5 $$ byte[] sha_message = new byte[md.getDigestLength()][ FD ]
Line_55 $$ SimpleDERReader dr = new SimpleDERReader(v, pos, v.length - pos)-->Line_74 $$ byte[] digest = dr.readOctetString()[ FD ]
Line_3 $$ SHA1 md = new SHA1()-->Line_4 $$ md.update(message)[ FD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_57 $$ if (dr.available() != 0) [ CD ]
Line_57 $$ if (dr.available() != 0) -->Line_58 $$ log.log(20, "ssh-rsa signature: dr.available() != 0")[ CD ]
Line_69 $$ if (digestAlgorithm[i] != digestAlgorithm_sha1[i]) -->Line_70 $$ log.log(20, "ssh-rsa signature: digestAlgorithm[i] != digestAlgorithm_sha1[i]")[ CD ]
Line_9 $$ BigInteger s = ds.getS()-->Line_10 $$ if (n.compareTo(s) <= 0) [ FD ]
Line_9 $$ BigInteger s = ds.getS()-->Line_19 $$ byte[] v = s.modPow(e, n).toByteArray()[ FD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_3 $$ SHA1 md = new SHA1()[ CD ]
Line_14 $$ int rsa_block_len = (n.bitLength() + 7) / 8-->Line_15 $$ if (rsa_block_len < 1) [ FD ]
Line_32 $$ while (true) -->Line_43 $$ pos++[ CD ]
Line_57 $$ if (dr.available() != 0) -->Line_59 $$ return false[ CD ]
Line_10 $$ if (n.compareTo(s) <= 0) -->Line_12 $$ return false[ CD ]
Line_75 $$ if (dr.available() != 0) -->Line_77 $$ return false[ CD ]
Line_79 $$ if (digest.length != sha_message.length) -->Line_80 $$ log.log(20, "ssh-rsa signature: digest.length != sha_message.length")[ CD ]
Line_39 $$ if (v[pos] != (byte) 0xff) -->Line_40 $$ log.log(20, "ssh-rsa signature: v[pos] != (byte) 0xff")[ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_61 $$ dr.resetInput(seq)[ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_62 $$ byte[] digestAlgorithm = dr.readSequenceAsByteArray()[ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_75 $$ if (dr.available() != 0) [ CD ]
Line_31 $$ int pos = startpos + 1-->Line_43 $$ pos++[ FD ]
Line_31 $$ int pos = startpos + 1-->Line_33 $$ if (pos >= v.length) [ FD ]
Line_39 $$ if (v[pos] != (byte) 0xff) -->Line_41 $$ return false[ CD ]
Line_63 $$ if ((digestAlgorithm.length < 8) || (digestAlgorithm.length > 9)) -->Line_64 $$ log.log(20, "ssh-rsa signature: (digestAlgorithm.length < 8) || (digestAlgorithm.length > 9)")[ CD ]
Line_55 $$ SimpleDERReader dr = new SimpleDERReader(v, pos, v.length - pos)-->Line_57 $$ if (dr.available() != 0) [ FD ]
Line_8 $$ BigInteger e = dpk.getE()-->Line_19 $$ byte[] v = s.modPow(e, n).toByteArray()[ FD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_46 $$ if (num_pad < 8) [ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_89 $$ return true[ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_31 $$ int pos = startpos + 1[ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_45 $$ int num_pad = pos - (startpos + 1)[ CD ]
Line_7 $$ BigInteger n = dpk.getN()-->Line_19 $$ byte[] v = s.modPow(e, n).toByteArray()[ FD ]
Line_21 $$ if ((v.length > 0) && (v[0] == 0x00))-->Line_22 $$ startpos++[ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_10 $$ if (n.compareTo(s) <= 0) [ CD ]
Line_10 $$ if (n.compareTo(s) <= 0) -->Line_11 $$ log.log(20, "ssh-rsa signature: n.compareTo(s) <= 0")[ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_68 $$ for (int i = 0; i < digestAlgorithm.length; i++) [ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_79 $$ if (digest.length != sha_message.length) [ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_6 $$ md.digest(sha_message)[ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_19 $$ byte[] v = s.modPow(e, n).toByteArray()[ CD ]
Line_63 $$ if ((digestAlgorithm.length < 8) || (digestAlgorithm.length > 9)) -->Line_65 $$ return false[ CD ]
Line_7 $$ BigInteger n = dpk.getN()-->Line_10 $$ if (n.compareTo(s) <= 0) [ FD ]
Line_5 $$ byte[] sha_message = new byte[md.getDigestLength()]-->Line_6 $$ md.digest(sha_message)[ FD ]
Line_27 $$ if (v[startpos] != 0x01) -->Line_29 $$ return false[ CD ]
Line_55 $$ SimpleDERReader dr = new SimpleDERReader(v, pos, v.length - pos)-->Line_61 $$ dr.resetInput(seq)[ FD ]
Line_84 $$ if (sha_message[i] != digest[i]) -->Line_85 $$ log.log(20, "ssh-rsa signature: sha_message[i] != digest[i]")[ CD ]
Line_84 $$ if (sha_message[i] != digest[i]) -->Line_86 $$ return false[ CD ]
Line_55 $$ SimpleDERReader dr = new SimpleDERReader(v, pos, v.length - pos)-->Line_75 $$ if (dr.available() != 0) [ FD ]
Line_27 $$ if (v[startpos] != 0x01) -->Line_28 $$ log.log(20, "ssh-rsa signature: v[startpos] != 0x01")[ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_4 $$ md.update(message)[ CD ]
Line_69 $$ if (digestAlgorithm[i] != digestAlgorithm_sha1[i]) -->Line_71 $$ return false[ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_63 $$ if ((digestAlgorithm.length < 8) || (digestAlgorithm.length > 9)) [ CD ]
Line_32 $$ while (true) -->Line_39 $$ if (v[pos] != (byte) 0xff) [ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_27 $$ if (v[startpos] != 0x01) [ CD ]
Line_51 $$ if (pos >= v.length) -->Line_52 $$ log.log(20, "ssh-rsa signature: pos >= v.length")[ CD ]
Line_2 $$ public static boolean verifySignature(byte[] message, RSASignature ds, RSAPublicKey dpk) throws IOException -->Line_21 $$ if ((v.length > 0) && (v[0] == 0x00))[ CD ]
Line_31 $$ int pos = startpos + 1-->Line_50 $$ pos++[ FD ]
Line_20 $$ int startpos = 0-->Line_22 $$ startpos++[ FD ]
Line_46 $$ if (num_pad < 8) -->Line_47 $$ log.log(20, "ssh-rsa signature: num_pad < 8")[ CD ]
