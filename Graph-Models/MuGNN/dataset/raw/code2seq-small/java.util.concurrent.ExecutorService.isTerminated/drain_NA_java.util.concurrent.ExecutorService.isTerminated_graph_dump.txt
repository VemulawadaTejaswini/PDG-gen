Line_7 $$ ExecutorService viewMutationStage = StageManager.getStage(Stage.VIEW_MUTATION)-->Line_23 $$ viewMutationStage.awaitTermination(3600, TimeUnit.SECONDS)[ FD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_5 $$ HintsService.instance.pauseDispatch()[ CD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_22 $$ mutationStage.shutdown()[ CD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_14 $$ shutdownClientServers()[ CD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_31 $$ List<Future<?>> flushes = new ArrayList()[ CD ]
Line_31 $$ List<Future<?>> flushes = new ArrayList()-->Line_43 $$ FBUtilities.waitOnFutures(flushes)[ FD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_47 $$ CommitLog.instance.forceRecycleAllSegments()[ CD ]
Line_31 $$ List<Future<?>> flushes = new ArrayList()-->Line_39 $$ flushes.clear()[ FD ]
Line_7 $$ ExecutorService viewMutationStage = StageManager.getStage(Stage.VIEW_MUTATION)-->Line_9 $$ if (mutationStage.isTerminated() && counterMutationStage.isTerminated() && viewMutationStage.isTerminated()) [ FD ]
Line_35 $$ for (Future f : flushes) -->Line_36 $$ FBUtilities.waitOnFuture(f)[ FD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_53 $$ setMode(Mode.DRAINED, true)[ CD ]
Line_9 $$ if (mutationStage.isTerminated() && counterMutationStage.isTerminated() && viewMutationStage.isTerminated()) -->Line_10 $$ logger.warn("Cannot drain node (did it already happen?)")[ CD ]
Line_51 $$ if (!ScheduledExecutors.nonPeriodicTasks.awaitTermination(1, TimeUnit.MINUTES))-->Line_52 $$ logger.warn("Miscellaneous task executor still busy after one minute; proceeding with shutdown")[ CD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_39 $$ flushes.clear()[ CD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_25 $$ mutationStage.awaitTermination(3600, TimeUnit.SECONDS)[ CD ]
Line_31 $$ List<Future<?>> flushes = new ArrayList()-->Line_33 $$ flushes.add(cfs.forceFlush())[ FD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_44 $$ BatchlogManager.instance.shutdown()[ CD ]
Line_7 $$ ExecutorService viewMutationStage = StageManager.getStage(Stage.VIEW_MUTATION)-->Line_20 $$ viewMutationStage.shutdown()[ FD ]
Line_33 $$ for (ColumnFamilyStore cfs : keyspace.getColumnFamilyStores()) flushes.add(cfs.forceFlush())-->Line_41 $$ flushes.add(cfs.forceFlush())[ FD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_13 $$ setMode(Mode.DRAINING, "starting drain process", true)[ CD ]
Line_8 $$ ExecutorService mutationStage = StageManager.getStage(Stage.MUTATION)-->Line_9 $$ if (mutationStage.isTerminated() && counterMutationStage.isTerminated() && viewMutationStage.isTerminated()) [ FD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_48 $$ ColumnFamilyStore.shutdownPostFlushExecutor()[ CD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_8 $$ ExecutorService mutationStage = StageManager.getStage(Stage.MUTATION)[ CD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_43 $$ FBUtilities.waitOnFutures(flushes)[ CD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_49 $$ CommitLog.instance.shutdownBlocking()[ CD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_15 $$ ScheduledExecutors.optionalTasks.shutdown()[ CD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_46 $$ CompactionManager.instance.forceShutdown()[ CD ]
Line_29 $$ for (Keyspace keyspace : Keyspace.nonSystem()) totalCFs += keyspace.getColumnFamilyStores().size()-->Line_33 $$ for (ColumnFamilyStore cfs : keyspace.getColumnFamilyStores()) flushes.add(cfs.forceFlush())[ FD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_45 $$ HintsService.instance.shutdownBlocking()[ CD ]
Line_31 $$ List<Future<?>> flushes = new ArrayList()-->Line_41 $$ flushes.add(cfs.forceFlush())[ FD ]
Line_6 $$ ExecutorService counterMutationStage = StageManager.getStage(Stage.COUNTER_MUTATION)-->Line_21 $$ counterMutationStage.shutdown()[ FD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_6 $$ ExecutorService counterMutationStage = StageManager.getStage(Stage.COUNTER_MUTATION)[ CD ]
Line_6 $$ ExecutorService counterMutationStage = StageManager.getStage(Stage.COUNTER_MUTATION)-->Line_9 $$ if (mutationStage.isTerminated() && counterMutationStage.isTerminated() && viewMutationStage.isTerminated()) [ FD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_16 $$ Gossiper.instance.stop()[ CD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_51 $$ if (!ScheduledExecutors.nonPeriodicTasks.awaitTermination(1, TimeUnit.MINUTES))[ CD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_17 $$ setMode(Mode.DRAINING, "shutting down MessageService", false)[ CD ]
Line_29 $$ for (Keyspace keyspace : Keyspace.nonSystem()) totalCFs += keyspace.getColumnFamilyStores().size()-->Line_41 $$ for (ColumnFamilyStore cfs : keyspace.getColumnFamilyStores()) flushes.add(cfs.forceFlush())[ FD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_9 $$ if (mutationStage.isTerminated() && counterMutationStage.isTerminated() && viewMutationStage.isTerminated()) [ CD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_24 $$ counterMutationStage.awaitTermination(3600, TimeUnit.SECONDS)[ CD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_23 $$ viewMutationStage.awaitTermination(3600, TimeUnit.SECONDS)[ CD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_26 $$ StorageProxy.instance.verifyNoHintsInProgress()[ CD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_7 $$ ExecutorService viewMutationStage = StageManager.getStage(Stage.VIEW_MUTATION)[ CD ]
Line_8 $$ ExecutorService mutationStage = StageManager.getStage(Stage.MUTATION)-->Line_22 $$ mutationStage.shutdown()[ FD ]
Line_6 $$ ExecutorService counterMutationStage = StageManager.getStage(Stage.COUNTER_MUTATION)-->Line_24 $$ counterMutationStage.awaitTermination(3600, TimeUnit.SECONDS)[ FD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_20 $$ viewMutationStage.shutdown()[ CD ]
Line_8 $$ ExecutorService mutationStage = StageManager.getStage(Stage.MUTATION)-->Line_25 $$ mutationStage.awaitTermination(3600, TimeUnit.SECONDS)[ FD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_4 $$ BatchlogManager.instance.shutdown()[ CD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_19 $$ setMode(Mode.DRAINING, "clearing mutation stage", false)[ CD ]
Line_9 $$ if (mutationStage.isTerminated() && counterMutationStage.isTerminated() && viewMutationStage.isTerminated()) -->Line_11 $$ return[ CD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_21 $$ counterMutationStage.shutdown()[ CD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_50 $$ ScheduledExecutors.nonPeriodicTasks.shutdown()[ CD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_18 $$ MessagingService.instance().shutdown()[ CD ]
Line_2 $$ public synchronized void drain() throws IOException, InterruptedException, ExecutionException -->Line_27 $$ setMode(Mode.DRAINING, "flushing column families", false)[ CD ]
