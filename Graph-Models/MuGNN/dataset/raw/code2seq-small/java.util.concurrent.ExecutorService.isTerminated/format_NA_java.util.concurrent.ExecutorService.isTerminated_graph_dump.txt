Line_3 $$ List<SourceProcessor> sourceProcessors = new ArrayList()-->Line_14 $$ sourceProcessors.add(new XMLSourceProcessor())[ FD ]
Line_2 $$ public void format() throws Exception -->Line_13 $$ sourceProcessors.add(new TLDSourceProcessor())[ CD ]
Line_3 $$ List<SourceProcessor> sourceProcessors = new ArrayList()-->Line_6 $$ sourceProcessors.add(new GradleSourceProcessor())[ FD ]
Line_2 $$ public void format() throws Exception -->Line_6 $$ sourceProcessors.add(new GradleSourceProcessor())[ CD ]
Line_2 $$ public void format() throws Exception -->Line_11 $$ sourceProcessors.add(new SHSourceProcessor())[ CD ]
Line_31 $$ if (ee1 == null) -->Line_34 $$ ee1.addSuppressed(ee2)[ CD ]
Line_2 $$ public void format() throws Exception -->Line_5 $$ sourceProcessors.add(new FTLSourceProcessor())[ CD ]
Line_3 $$ List<SourceProcessor> sourceProcessors = new ArrayList()-->Line_8 $$ sourceProcessors.add(new JSPSourceProcessor())[ FD ]
Line_2 $$ public void format() throws Exception -->Line_12 $$ sourceProcessors.add(new SQLSourceProcessor())[ CD ]
Line_18 $$ Future<Void> future = executorService.submit(new Callable<Void>() -->Line_20 $$ _runSourceProcessor(sourceProcessor)[ CD ]
Line_3 $$ List<SourceProcessor> sourceProcessors = new ArrayList()-->Line_15 $$ ExecutorService executorService = Executors.newFixedThreadPool(sourceProcessors.size())[ FD ]
Line_2 $$ public void format() throws Exception -->Line_38 $$ executorService.shutdown()[ CD ]
Line_15 $$ ExecutorService executorService = Executors.newFixedThreadPool(sourceProcessors.size())-->Line_38 $$ executorService.shutdown()[ FD ]
Line_2 $$ public void format() throws Exception -->Line_3 $$ List<SourceProcessor> sourceProcessors = new ArrayList()[ CD ]
Line_3 $$ List<SourceProcessor> sourceProcessors = new ArrayList()-->Line_16 $$ List<Future<Void>> futures = new ArrayList(sourceProcessors.size())[ FD ]
Line_2 $$ public void format() throws Exception -->Line_16 $$ List<Future<Void>> futures = new ArrayList(sourceProcessors.size())[ CD ]
Line_17 $$ for (final SourceProcessor sourceProcessor : sourceProcessors) -->Line_20 $$ _runSourceProcessor(sourceProcessor)[ FD ]
Line_3 $$ List<SourceProcessor> sourceProcessors = new ArrayList()-->Line_5 $$ sourceProcessors.add(new FTLSourceProcessor())[ FD ]
Line_3 $$ List<SourceProcessor> sourceProcessors = new ArrayList()-->Line_9 $$ sourceProcessors.add(new JSSourceProcessor())[ FD ]
Line_2 $$ public void format() throws Exception -->Line_7 $$ sourceProcessors.add(new JavaSourceProcessor())[ CD ]
Line_2 $$ public void format() throws Exception -->Line_4 $$ sourceProcessors.add(new CSSSourceProcessor())[ CD ]
Line_3 $$ List<SourceProcessor> sourceProcessors = new ArrayList()-->Line_10 $$ sourceProcessors.add(new PropertiesSourceProcessor())[ FD ]
Line_18 $$ Future<Void> future = executorService.submit(new Callable<Void>() -->Line_24 $$ futures.add(future)[ FD ]
Line_2 $$ public void format() throws Exception -->Line_42 $$ if (ee1 != null) [ CD ]
Line_18 $$ Future<Void> future = executorService.submit(new Callable<Void>() -->Line_29 $$ future.get()[ FD ]
Line_15 $$ ExecutorService executorService = Executors.newFixedThreadPool(sourceProcessors.size())-->Line_39 $$ while (!executorService.isTerminated()) [ FD ]
Line_16 $$ List<Future<Void>> futures = new ArrayList(sourceProcessors.size())-->Line_24 $$ futures.add(future)[ FD ]
Line_45 $$ if (_sourceFormatterArgs.isThrowException()) -->Line_46 $$ if (!_errorMessages.isEmpty()) [ CD ]
Line_3 $$ List<SourceProcessor> sourceProcessors = new ArrayList()-->Line_13 $$ sourceProcessors.add(new TLDSourceProcessor())[ FD ]
Line_15 $$ ExecutorService executorService = Executors.newFixedThreadPool(sourceProcessors.size())-->Line_18 $$ Future<Void> future = executorService.submit(new Callable<Void>() [ FD ]
Line_3 $$ List<SourceProcessor> sourceProcessors = new ArrayList()-->Line_7 $$ sourceProcessors.add(new JavaSourceProcessor())[ FD ]
Line_2 $$ public void format() throws Exception -->Line_39 $$ while (!executorService.isTerminated()) [ CD ]
Line_2 $$ public void format() throws Exception -->Line_9 $$ sourceProcessors.add(new JSSourceProcessor())[ CD ]
Line_2 $$ public void format() throws Exception -->Line_8 $$ sourceProcessors.add(new JSPSourceProcessor())[ CD ]
Line_45 $$ if (_sourceFormatterArgs.isThrowException()) -->Line_49 $$ if (_firstSourceMismatchException != null) [ CD ]
Line_3 $$ List<SourceProcessor> sourceProcessors = new ArrayList()-->Line_12 $$ sourceProcessors.add(new SQLSourceProcessor())[ FD ]
Line_3 $$ List<SourceProcessor> sourceProcessors = new ArrayList()-->Line_11 $$ sourceProcessors.add(new SHSourceProcessor())[ FD ]
Line_2 $$ public void format() throws Exception -->Line_15 $$ ExecutorService executorService = Executors.newFixedThreadPool(sourceProcessors.size())[ CD ]
Line_39 $$ while (!executorService.isTerminated()) -->Line_40 $$ Thread.sleep(20)[ CD ]
Line_2 $$ public void format() throws Exception -->Line_14 $$ sourceProcessors.add(new XMLSourceProcessor())[ CD ]
Line_2 $$ public void format() throws Exception -->Line_45 $$ if (_sourceFormatterArgs.isThrowException()) [ CD ]
Line_2 $$ public void format() throws Exception -->Line_10 $$ sourceProcessors.add(new PropertiesSourceProcessor())[ CD ]
Line_18 $$ Future<Void> future = executorService.submit(new Callable<Void>() -->Line_21 $$ return null[ CD ]
Line_3 $$ List<SourceProcessor> sourceProcessors = new ArrayList()-->Line_4 $$ sourceProcessors.add(new CSSSourceProcessor())[ FD ]
