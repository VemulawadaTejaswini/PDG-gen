Line_2 $$ private void initMetrics() throws Exception -->Line_6 $$ String schedulerMetricsType = conf.get(CapacityScheduler.class.getName())[ CD ]
Line_2 $$ private void initMetrics() throws Exception -->Line_16 $$ web.start()[ CD ]
Line_2 $$ private void initMetrics() throws Exception -->Line_14 $$ initMetricsCSVOutput()[ CD ]
Line_2 $$ private void initMetrics() throws Exception -->Line_9 $$ schedulerMetrics.init(this, metrics)[ CD ]
Line_2 $$ private void initMetrics() throws Exception -->Line_22 $$ jobRuntimeLogBW.flush()[ CD ]
Line_2 $$ private void initMetrics() throws Exception -->Line_7 $$ Class schedulerMetricsClass = schedulerMetricsType == null ? defaultSchedulerMetricsMap.get(CapacityScheduler.class) : Class.forName(schedulerMetricsType)[ CD ]
Line_2 $$ private void initMetrics() throws Exception -->Line_10 $$ registerJvmMetrics()[ CD ]
Line_2 $$ private void initMetrics() throws Exception -->Line_12 $$ registerContainerAppNumMetrics()[ CD ]
Line_2 $$ private void initMetrics() throws Exception -->Line_21 $$ jobRuntimeLogBW.write("JobID,real_start_time,real_end_time," + "simulate_start_time,simulate_end_time" + EOL)[ CD ]
Line_2 $$ private void initMetrics() throws Exception -->Line_19 $$ pool.scheduleAtFixedRate(new MetricsLogRunnable(), 0, 1000, TimeUnit.MILLISECONDS)[ CD ]
Line_2 $$ private void initMetrics() throws Exception -->Line_13 $$ registerSchedulerMetrics()[ CD ]
Line_2 $$ private void initMetrics() throws Exception -->Line_5 $$ int metricsWebAddressPort = conf.getInt(SLSConfiguration.METRICS_WEB_ADDRESS_PORT, SLSConfiguration.METRICS_WEB_ADDRESS_PORT_DEFAULT)[ CD ]
Line_6 $$ String schedulerMetricsType = conf.get(CapacityScheduler.class.getName())-->Line_7 $$ Class schedulerMetricsClass = schedulerMetricsType == null ? defaultSchedulerMetricsMap.get(CapacityScheduler.class) : Class.forName(schedulerMetricsType)[ FD ]
Line_7 $$ Class schedulerMetricsClass = schedulerMetricsType == null ? defaultSchedulerMetricsMap.get(CapacityScheduler.class) : Class.forName(schedulerMetricsType)-->Line_8 $$ schedulerMetrics = (SchedulerMetrics) ReflectionUtils.newInstance(schedulerMetricsClass, new Configuration())[ FD ]
Line_2 $$ private void initMetrics() throws Exception -->Line_4 $$ metricsOutputDir = conf.get(SLSConfiguration.METRICS_OUTPUT_DIR)[ CD ]
Line_2 $$ private void initMetrics() throws Exception -->Line_11 $$ registerClusterResourceMetrics()[ CD ]
Line_2 $$ private void initMetrics() throws Exception -->Line_18 $$ pool.scheduleAtFixedRate(new HistogramsRunnable(), 0, 1000, TimeUnit.MILLISECONDS)[ CD ]
