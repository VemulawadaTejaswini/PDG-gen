Line_15 $$ long allocatedMemory = runtime.totalMemory()-->Line_25 $$ System.out.println(String.format("second %d mem max %.0fmb allocated %.0fmb free %.0fmb mutations %d since start %d avg %.3f content %.1fmb ondisk %.1fmb transfer %.3fmb", ((System.currentTimeMillis() - start) / 1000), mb(maxMemory), mb(allocatedMemory), mb(freeMemory), (temp - lastUpdate), lastUpdate, avg, mb(commitLog.getActiveContentSize()), mb(commitLog.getActiveOnDiskSize()), mb(sz / time)))[ FD ]
Line_5 $$ final CommitlogExecutor t = new CommitlogExecutor(commitLog, new Random(ii))-->Line_6 $$ threads.add(t)[ FD ]
Line_10 $$ Runnable printRunnable = new Runnable() -->Line_13 $$ Runtime runtime = Runtime.getRuntime()[ CD ]
Line_2 $$ public ScheduledExecutorService startThreads(final CommitLog commitLog, final List<CommitlogExecutor> threads) -->Line_30 $$ scheduled.scheduleAtFixedRate(printRunnable, 1, 1, TimeUnit.SECONDS)[ CD ]
Line_20 $$ temp += cle.counter.get()-->Line_26 $$ lastUpdate = temp[ FD ]
Line_18 $$ long sz = 0-->Line_21 $$ sz += cle.dataSize[ FD ]
Line_17 $$ long temp = 0-->Line_26 $$ lastUpdate = temp[ FD ]
Line_2 $$ public ScheduledExecutorService startThreads(final CommitLog commitLog, final List<CommitlogExecutor> threads) -->Line_29 $$ ScheduledExecutorService scheduled = Executors.newScheduledThreadPool(1)[ CD ]
Line_10 $$ Runnable printRunnable = new Runnable() -->Line_14 $$ long maxMemory = runtime.maxMemory()[ CD ]
Line_10 $$ Runnable printRunnable = new Runnable() -->Line_25 $$ System.out.println(String.format("second %d mem max %.0fmb allocated %.0fmb free %.0fmb mutations %d since start %d avg %.3f content %.1fmb ondisk %.1fmb transfer %.3fmb", ((System.currentTimeMillis() - start) / 1000), mb(maxMemory), mb(allocatedMemory), mb(freeMemory), (temp - lastUpdate), lastUpdate, avg, mb(commitLog.getActiveContentSize()), mb(commitLog.getActiveOnDiskSize()), mb(sz / time)))[ CD ]
Line_13 $$ Runtime runtime = Runtime.getRuntime()-->Line_15 $$ long allocatedMemory = runtime.totalMemory()[ FD ]
Line_4 $$ for (int ii = 0; ii < NUM_THREADS; ii++) -->Line_6 $$ threads.add(t)[ CD ]
Line_2 $$ public ScheduledExecutorService startThreads(final CommitLog commitLog, final List<CommitlogExecutor> threads) -->Line_4 $$ for (int ii = 0; ii < NUM_THREADS; ii++) [ CD ]
Line_4 $$ for (int ii = 0; ii < NUM_THREADS; ii++) -->Line_7 $$ t.start()[ CD ]
Line_10 $$ Runnable printRunnable = new Runnable() -->Line_18 $$ long sz = 0[ CD ]
Line_16 $$ long freeMemory = runtime.freeMemory()-->Line_25 $$ System.out.println(String.format("second %d mem max %.0fmb allocated %.0fmb free %.0fmb mutations %d since start %d avg %.3f content %.1fmb ondisk %.1fmb transfer %.3fmb", ((System.currentTimeMillis() - start) / 1000), mb(maxMemory), mb(allocatedMemory), mb(freeMemory), (temp - lastUpdate), lastUpdate, avg, mb(commitLog.getActiveContentSize()), mb(commitLog.getActiveOnDiskSize()), mb(sz / time)))[ FD ]
Line_13 $$ Runtime runtime = Runtime.getRuntime()-->Line_16 $$ long freeMemory = runtime.freeMemory()[ FD ]
Line_10 $$ Runnable printRunnable = new Runnable() -->Line_16 $$ long freeMemory = runtime.freeMemory()[ CD ]
Line_4 $$ for (int ii = 0; ii < NUM_THREADS; ii++) -->Line_5 $$ final CommitlogExecutor t = new CommitlogExecutor(commitLog, new Random(ii))[ CD ]
Line_13 $$ Runtime runtime = Runtime.getRuntime()-->Line_14 $$ long maxMemory = runtime.maxMemory()[ FD ]
Line_10 $$ Runnable printRunnable = new Runnable() -->Line_30 $$ scheduled.scheduleAtFixedRate(printRunnable, 1, 1, TimeUnit.SECONDS)[ FD ]
Line_2 $$ public ScheduledExecutorService startThreads(final CommitLog commitLog, final List<CommitlogExecutor> threads) -->Line_25 $$ System.out.println(String.format("second %d mem max %.0fmb allocated %.0fmb free %.0fmb mutations %d since start %d avg %.3f content %.1fmb ondisk %.1fmb transfer %.3fmb", ((System.currentTimeMillis() - start) / 1000), mb(maxMemory), mb(allocatedMemory), mb(freeMemory), (temp - lastUpdate), lastUpdate, avg, mb(commitLog.getActiveContentSize()), mb(commitLog.getActiveOnDiskSize()), mb(sz / time)))[ FD ]
Line_10 $$ Runnable printRunnable = new Runnable() -->Line_17 $$ long temp = 0[ CD ]
Line_17 $$ long temp = 0-->Line_20 $$ temp += cle.counter.get()[ FD ]
Line_2 $$ public ScheduledExecutorService startThreads(final CommitLog commitLog, final List<CommitlogExecutor> threads) -->Line_9 $$ final long start = System.currentTimeMillis()[ CD ]
Line_5 $$ final CommitlogExecutor t = new CommitlogExecutor(commitLog, new Random(ii))-->Line_7 $$ t.start()[ FD ]
Line_14 $$ long maxMemory = runtime.maxMemory()-->Line_25 $$ System.out.println(String.format("second %d mem max %.0fmb allocated %.0fmb free %.0fmb mutations %d since start %d avg %.3f content %.1fmb ondisk %.1fmb transfer %.3fmb", ((System.currentTimeMillis() - start) / 1000), mb(maxMemory), mb(allocatedMemory), mb(freeMemory), (temp - lastUpdate), lastUpdate, avg, mb(commitLog.getActiveContentSize()), mb(commitLog.getActiveOnDiskSize()), mb(sz / time)))[ FD ]
Line_10 $$ Runnable printRunnable = new Runnable() -->Line_23 $$ double time = (System.currentTimeMillis() - start) / 1000.0[ CD ]
Line_2 $$ public ScheduledExecutorService startThreads(final CommitLog commitLog, final List<CommitlogExecutor> threads) -->Line_6 $$ threads.add(t)[ FD ]
Line_10 $$ Runnable printRunnable = new Runnable() -->Line_15 $$ long allocatedMemory = runtime.totalMemory()[ CD ]
Line_10 $$ Runnable printRunnable = new Runnable() -->Line_24 $$ double avg = (temp / time)[ CD ]
Line_2 $$ public ScheduledExecutorService startThreads(final CommitLog commitLog, final List<CommitlogExecutor> threads) -->Line_10 $$ Runnable printRunnable = new Runnable() [ CD ]
Line_24 $$ double avg = (temp / time)-->Line_25 $$ System.out.println(String.format("second %d mem max %.0fmb allocated %.0fmb free %.0fmb mutations %d since start %d avg %.3f content %.1fmb ondisk %.1fmb transfer %.3fmb", ((System.currentTimeMillis() - start) / 1000), mb(maxMemory), mb(allocatedMemory), mb(freeMemory), (temp - lastUpdate), lastUpdate, avg, mb(commitLog.getActiveContentSize()), mb(commitLog.getActiveOnDiskSize()), mb(sz / time)))[ FD ]
Line_10 $$ Runnable printRunnable = new Runnable() -->Line_26 $$ lastUpdate = temp[ CD ]
Line_2 $$ public ScheduledExecutorService startThreads(final CommitLog commitLog, final List<CommitlogExecutor> threads) -->Line_31 $$ return scheduled[ CD ]
