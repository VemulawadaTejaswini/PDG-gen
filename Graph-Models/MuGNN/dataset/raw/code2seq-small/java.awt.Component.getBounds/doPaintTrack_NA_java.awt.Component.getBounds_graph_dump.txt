Line_12 $$ if (myCachedTrack == null || myCachedHeight != componentBounds.height) -->Line_16 $$ paintTrackBasement(myCachedTrack.getGraphics(), new Rectangle(0, 0, componentBounds.width, componentBounds.height))[ CD ]
Line_22 $$ final Graphics2D imageGraphics = myCachedTrack.createGraphics()-->Line_28 $$ repaint(imageGraphics, componentBounds.width, myDirtyYPositions)[ FD ]
Line_3 $$ if (isMacScrollbarHiddenAndXcodeLikeScrollbar()) -->Line_4 $$ paintTrackBasement(g, bounds)[ CD ]
Line_2 $$ protected void doPaintTrack(@NotNull Graphics g, @NotNull JComponent c, @NotNull Rectangle bounds) -->Line_12 $$ if (myCachedTrack == null || myCachedHeight != componentBounds.height) [ CD ]
Line_2 $$ protected void doPaintTrack(@NotNull Graphics g, @NotNull JComponent c, @NotNull Rectangle bounds) -->Line_8 $$ if (clip.height == 0)[ CD ]
Line_21 $$ if (myDirtyYPositions != null) -->Line_22 $$ final Graphics2D imageGraphics = myCachedTrack.createGraphics()[ CD ]
Line_2 $$ protected void doPaintTrack(@NotNull Graphics g, @NotNull JComponent c, @NotNull Rectangle bounds) -->Line_34 $$ UIUtil.drawImage(g, myCachedTrack, null, 0, 0)[ FD ]
Line_3 $$ if (isMacScrollbarHiddenAndXcodeLikeScrollbar()) -->Line_5 $$ return[ CD ]
Line_2 $$ protected void doPaintTrack(@NotNull Graphics g, @NotNull JComponent c, @NotNull Rectangle bounds) -->Line_7 $$ Rectangle clip = g.getClipBounds().intersection(bounds)[ CD ]
Line_2 $$ protected void doPaintTrack(@NotNull Graphics g, @NotNull JComponent c, @NotNull Rectangle bounds) -->Line_3 $$ if (isMacScrollbarHiddenAndXcodeLikeScrollbar()) [ CD ]
Line_2 $$ protected void doPaintTrack(@NotNull Graphics g, @NotNull JComponent c, @NotNull Rectangle bounds) -->Line_10 $$ Rectangle componentBounds = c.getBounds()[ CD ]
Line_2 $$ protected void doPaintTrack(@NotNull Graphics g, @NotNull JComponent c, @NotNull Rectangle bounds) -->Line_4 $$ paintTrackBasement(g, bounds)[ FD ]
Line_21 $$ if (myDirtyYPositions != null) -->Line_23 $$ ((ApplicationImpl) ApplicationManager.getApplication()).editorPaintStart()[ CD ]
Line_2 $$ protected void doPaintTrack(@NotNull Graphics g, @NotNull JComponent c, @NotNull Rectangle bounds) -->Line_18 $$ if (myDirtyYPositions == WHOLE_DOCUMENT) [ CD ]
Line_8 $$ if (clip.height == 0)-->Line_9 $$ return[ CD ]
Line_11 $$ ProperTextRange docRange = ProperTextRange.create(0, componentBounds.height)-->Line_25 $$ myDirtyYPositions = myDirtyYPositions.intersection(docRange)[ FD ]
Line_2 $$ protected void doPaintTrack(@NotNull Graphics g, @NotNull JComponent c, @NotNull Rectangle bounds) -->Line_7 $$ Rectangle clip = g.getClipBounds().intersection(bounds)[ FD ]
Line_2 $$ protected void doPaintTrack(@NotNull Graphics g, @NotNull JComponent c, @NotNull Rectangle bounds) -->Line_34 $$ UIUtil.drawImage(g, myCachedTrack, null, 0, 0)[ CD ]
Line_2 $$ protected void doPaintTrack(@NotNull Graphics g, @NotNull JComponent c, @NotNull Rectangle bounds) -->Line_21 $$ if (myDirtyYPositions != null) [ CD ]
Line_12 $$ if (myCachedTrack == null || myCachedHeight != componentBounds.height) -->Line_13 $$ myCachedTrack = UIUtil.createImage(componentBounds.width, componentBounds.height, BufferedImage.TYPE_INT_ARGB)[ CD ]
Line_2 $$ protected void doPaintTrack(@NotNull Graphics g, @NotNull JComponent c, @NotNull Rectangle bounds) -->Line_11 $$ ProperTextRange docRange = ProperTextRange.create(0, componentBounds.height)[ CD ]
Line_2 $$ protected void doPaintTrack(@NotNull Graphics g, @NotNull JComponent c, @NotNull Rectangle bounds) -->Line_10 $$ Rectangle componentBounds = c.getBounds()[ FD ]
