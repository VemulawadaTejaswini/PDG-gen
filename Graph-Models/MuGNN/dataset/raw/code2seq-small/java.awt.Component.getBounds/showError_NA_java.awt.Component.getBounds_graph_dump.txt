Line_2 $$ private static void showError(final JTextField field, final String message) -->Line_9 $$ balloon.show(point, Balloon.Position.below)[ CD ]
Line_2 $$ private static void showError(final JTextField field, final String message) -->Line_10 $$ Disposer.register(ProjectManager.getInstance().getDefaultProject(), balloon)[ CD ]
Line_2 $$ private static void showError(final JTextField field, final String message) -->Line_4 $$ balloonBuilder.setFadeoutTime(1500)[ CD ]
Line_5 $$ final Balloon balloon = balloonBuilder.createBalloon()-->Line_9 $$ balloon.show(point, Balloon.Position.below)[ FD ]
Line_2 $$ private static void showError(final JTextField field, final String message) -->Line_6 $$ final Rectangle rect = field.getBounds()[ CD ]
Line_2 $$ private static void showError(final JTextField field, final String message) -->Line_8 $$ final RelativePoint point = new RelativePoint(field, p)[ CD ]
Line_2 $$ private static void showError(final JTextField field, final String message) -->Line_3 $$ BalloonBuilder balloonBuilder = JBPopupFactory.getInstance().createHtmlTextBalloonBuilder(message, MessageType.ERROR.getDefaultIcon(), MessageType.ERROR.getPopupBackground(), null)[ CD ]
Line_2 $$ private static void showError(final JTextField field, final String message) -->Line_7 $$ final Point p = new Point(0, rect.height)[ CD ]
Line_5 $$ final Balloon balloon = balloonBuilder.createBalloon()-->Line_10 $$ Disposer.register(ProjectManager.getInstance().getDefaultProject(), balloon)[ FD ]
Line_8 $$ final RelativePoint point = new RelativePoint(field, p)-->Line_9 $$ balloon.show(point, Balloon.Position.below)[ FD ]
Line_2 $$ private static void showError(final JTextField field, final String message) -->Line_3 $$ BalloonBuilder balloonBuilder = JBPopupFactory.getInstance().createHtmlTextBalloonBuilder(message, MessageType.ERROR.getDefaultIcon(), MessageType.ERROR.getPopupBackground(), null)[ FD ]
Line_3 $$ BalloonBuilder balloonBuilder = JBPopupFactory.getInstance().createHtmlTextBalloonBuilder(message, MessageType.ERROR.getDefaultIcon(), MessageType.ERROR.getPopupBackground(), null)-->Line_5 $$ final Balloon balloon = balloonBuilder.createBalloon()[ FD ]
Line_3 $$ BalloonBuilder balloonBuilder = JBPopupFactory.getInstance().createHtmlTextBalloonBuilder(message, MessageType.ERROR.getDefaultIcon(), MessageType.ERROR.getPopupBackground(), null)-->Line_4 $$ balloonBuilder.setFadeoutTime(1500)[ FD ]
Line_2 $$ private static void showError(final JTextField field, final String message) -->Line_6 $$ final Rectangle rect = field.getBounds()[ FD ]
Line_2 $$ private static void showError(final JTextField field, final String message) -->Line_5 $$ final Balloon balloon = balloonBuilder.createBalloon()[ CD ]
