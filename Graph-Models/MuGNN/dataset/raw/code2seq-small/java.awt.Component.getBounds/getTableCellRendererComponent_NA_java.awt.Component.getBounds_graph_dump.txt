Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_4 $$ Usage usage = usageNode == null ? null : usageNode.getUsage()[ CD ]
Line_11 $$ if (usageNode == null || usageNode instanceof ShowUsagesAction.StringNode) -->Line_13 $$ return textComponentSpanningWholeRow(textChunks, panelBackground, panelForeground, column, list)[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_6 $$ Color bg = UIUtil.getListSelectionBackground()[ CD ]
Line_9 $$ Color panelForeground = isSelected ? fg : list.getForeground()-->Line_39 $$ panel.setForeground(panelForeground)[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_57 $$ textChunks.append(chunk.getText(), getAttributes(isSelected, fileBgColor, bg, fg, chunk))[ FD ]
Line_11 $$ if (usageNode == null || usageNode instanceof ShowUsagesAction.StringNode) -->Line_12 $$ textChunks.append(ObjectUtils.notNull(value, "").toString(), SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES)[ CD ]
Line_55 $$ for (int i = 1; i < text.length; i++) -->Line_56 $$ TextChunk chunk = text[i][ CD ]
Line_47 $$ if (text.length != 0) -->Line_49 $$ textChunks.append(chunk.getText(), getAttributes(isSelected, fileBgColor, bg, fg, chunk))[ CD ]
Line_51 $$ if (column == 2) -->Line_52 $$ Icon icon = presentation.getIcon()[ CD ]
Line_5 $$ Color fileBgColor = getBackgroundColor(isSelected, usage)-->Line_57 $$ textChunks.append(chunk.getText(), getAttributes(isSelected, fileBgColor, bg, fg, chunk))[ FD ]
Line_4 $$ Usage usage = usageNode == null ? null : usageNode.getUsage()-->Line_44 $$ UsagePresentation presentation = usage.getPresentation()[ FD ]
Line_20 $$ if (usage == ShowUsagesAction.USAGES_OUTSIDE_SCOPE_SEPARATOR) -->Line_22 $$ textChunks.append(UsageViewManagerImpl.outOfScopeMessage(myOutOfScopeUsages.get(), mySearchScope), SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES)[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_7 $$ Color fg = UIUtil.getListSelectionForeground()[ CD ]
Line_20 $$ if (usage == ShowUsagesAction.USAGES_OUTSIDE_SCOPE_SEPARATOR) -->Line_24 $$ return textComponentSpanningWholeRow(textChunks, panelBackground, panelForeground, column, list)[ CD ]
Line_5 $$ Color fileBgColor = getBackgroundColor(isSelected, usage)-->Line_49 $$ textChunks.append(chunk.getText(), getAttributes(isSelected, fileBgColor, bg, fg, chunk))[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_64 $$ return panel[ CD ]
Line_10 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_23 $$ textChunks.append(">...")[ FD ]
Line_30 $$ for (Component component : container.getComponents()) -->Line_31 $$ Rectangle b = component.getBounds()[ FD ]
Line_40 $$ if (column == 0) -->Line_42 $$ return panel[ CD ]
Line_4 $$ Usage usage = usageNode == null ? null : usageNode.getUsage()-->Line_15 $$ if (usage == ShowUsagesAction.MORE_USAGES_SEPARATOR) [ FD ]
Line_9 $$ Color panelForeground = isSelected ? fg : list.getForeground()-->Line_13 $$ return textComponentSpanningWholeRow(textChunks, panelBackground, panelForeground, column, list)[ FD ]
Line_8 $$ Color panelBackground = isSelected ? bg : fileBgColor == null ? list.getBackground() : fileBgColor-->Line_38 $$ panel.setBackground(panelBackground)[ FD ]
Line_8 $$ Color panelBackground = isSelected ? bg : fileBgColor == null ? list.getBackground() : fileBgColor-->Line_13 $$ return textComponentSpanningWholeRow(textChunks, panelBackground, panelForeground, column, list)[ FD ]
Line_20 $$ if (usage == ShowUsagesAction.USAGES_OUTSIDE_SCOPE_SEPARATOR) -->Line_23 $$ textChunks.append(">...")[ CD ]
Line_8 $$ Color panelBackground = isSelected ? bg : fileBgColor == null ? list.getBackground() : fileBgColor-->Line_19 $$ return textComponentSpanningWholeRow(textChunks, panelBackground, panelForeground, column, list)[ FD ]
Line_5 $$ Color fileBgColor = getBackgroundColor(isSelected, usage)-->Line_41 $$ appendGroupText((GroupNode) usageNode.getParent(), panel, fileBgColor)[ FD ]
Line_9 $$ Color panelForeground = isSelected ? fg : list.getForeground()-->Line_24 $$ return textComponentSpanningWholeRow(textChunks, panelBackground, panelForeground, column, list)[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_8 $$ Color panelBackground = isSelected ? bg : fileBgColor == null ? list.getBackground() : fileBgColor[ CD ]
Line_7 $$ Color fg = UIUtil.getListSelectionForeground()-->Line_49 $$ textChunks.append(chunk.getText(), getAttributes(isSelected, fileBgColor, bg, fg, chunk))[ FD ]
Line_10 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_53 $$ textChunks.setIcon(icon == null ? EmptyIcon.ICON_16 : icon)[ FD ]
Line_27 $$ JPanel panel = new JPanel(new FlowLayout(lineNumberColumn ? FlowLayout.RIGHT : FlowLayout.LEFT, 0, 0) -->Line_38 $$ panel.setBackground(panelBackground)[ FD ]
Line_51 $$ if (column == 2) -->Line_53 $$ textChunks.setIcon(icon == null ? EmptyIcon.ICON_16 : icon)[ CD ]
Line_55 $$ for (int i = 1; i < text.length; i++) -->Line_57 $$ textChunks.append(chunk.getText(), getAttributes(isSelected, fileBgColor, bg, fg, chunk))[ CD ]
Line_56 $$ TextChunk chunk = text[i]-->Line_57 $$ textChunks.append(chunk.getText(), getAttributes(isSelected, fileBgColor, bg, fg, chunk))[ FD ]
Line_10 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_12 $$ textChunks.append(ObjectUtils.notNull(value, "").toString(), SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES)[ FD ]
Line_10 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_57 $$ textChunks.append(chunk.getText(), getAttributes(isSelected, fileBgColor, bg, fg, chunk))[ FD ]
Line_15 $$ if (usage == ShowUsagesAction.MORE_USAGES_SEPARATOR) -->Line_18 $$ textChunks.append(">...")[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_5 $$ Color fileBgColor = getBackgroundColor(isSelected, usage)[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_8 $$ Color panelBackground = isSelected ? bg : fileBgColor == null ? list.getBackground() : fileBgColor[ FD ]
Line_6 $$ Color bg = UIUtil.getListSelectionBackground()-->Line_49 $$ textChunks.append(chunk.getText(), getAttributes(isSelected, fileBgColor, bg, fg, chunk))[ FD ]
Line_3 $$ UsageNode usageNode = value instanceof UsageNode ? (UsageNode) value : null-->Line_4 $$ Usage usage = usageNode == null ? null : usageNode.getUsage()[ FD ]
Line_8 $$ Color panelBackground = isSelected ? bg : fileBgColor == null ? list.getBackground() : fileBgColor-->Line_24 $$ return textComponentSpanningWholeRow(textChunks, panelBackground, panelForeground, column, list)[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_15 $$ if (usage == ShowUsagesAction.MORE_USAGES_SEPARATOR) [ CD ]
Line_10 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_63 $$ panel.add(textChunks)[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_11 $$ if (usageNode == null || usageNode instanceof ShowUsagesAction.StringNode) [ CD ]
Line_3 $$ UsageNode usageNode = value instanceof UsageNode ? (UsageNode) value : null-->Line_41 $$ appendGroupText((GroupNode) usageNode.getParent(), panel, fileBgColor)[ FD ]
Line_46 $$ if (lineNumberColumn) -->Line_47 $$ if (text.length != 0) [ CD ]
Line_10 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_17 $$ textChunks.append("more usages", SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES)[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_37 $$ panel.setFont(null)[ CD ]
Line_27 $$ JPanel panel = new JPanel(new FlowLayout(lineNumberColumn ? FlowLayout.RIGHT : FlowLayout.LEFT, 0, 0) -->Line_29 $$ super.layoutContainer(container)[ FD ]
Line_43 $$ if (usage != ShowUsagesAction.MORE_USAGES_SEPARATOR && usage != ShowUsagesAction.USAGES_OUTSIDE_SCOPE_SEPARATOR) -->Line_45 $$ TextChunk[] text = presentation.getText()[ CD ]
Line_27 $$ JPanel panel = new JPanel(new FlowLayout(lineNumberColumn ? FlowLayout.RIGHT : FlowLayout.LEFT, 0, 0) -->Line_29 $$ super.layoutContainer(container)[ CD ]
Line_15 $$ if (usage == ShowUsagesAction.MORE_USAGES_SEPARATOR) -->Line_19 $$ return textComponentSpanningWholeRow(textChunks, panelBackground, panelForeground, column, list)[ CD ]
Line_40 $$ if (column == 0) -->Line_41 $$ appendGroupText((GroupNode) usageNode.getParent(), panel, fileBgColor)[ CD ]
Line_40 $$ if (column == 0) -->Line_43 $$ if (usage != ShowUsagesAction.MORE_USAGES_SEPARATOR && usage != ShowUsagesAction.USAGES_OUTSIDE_SCOPE_SEPARATOR) [ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_10 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()[ CD ]
Line_10 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_16 $$ textChunks.append("...<")[ FD ]
Line_43 $$ if (usage != ShowUsagesAction.MORE_USAGES_SEPARATOR && usage != ShowUsagesAction.USAGES_OUTSIDE_SCOPE_SEPARATOR) -->Line_44 $$ UsagePresentation presentation = usage.getPresentation()[ CD ]
Line_15 $$ if (usage == ShowUsagesAction.MORE_USAGES_SEPARATOR) -->Line_20 $$ if (usage == ShowUsagesAction.USAGES_OUTSIDE_SCOPE_SEPARATOR) [ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_49 $$ textChunks.append(chunk.getText(), getAttributes(isSelected, fileBgColor, bg, fg, chunk))[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_38 $$ panel.setBackground(panelBackground)[ CD ]
Line_27 $$ JPanel panel = new JPanel(new FlowLayout(lineNumberColumn ? FlowLayout.RIGHT : FlowLayout.LEFT, 0, 0) -->Line_37 $$ panel.setFont(null)[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_9 $$ Color panelForeground = isSelected ? fg : list.getForeground()[ CD ]
Line_51 $$ if (column == 2) -->Line_55 $$ for (int i = 1; i < text.length; i++) [ CD ]
Line_30 $$ for (Component component : container.getComponents()) -->Line_33 $$ component.setBounds(b.x, b.y, b.width, container.getSize().height - insets.top - insets.bottom)[ FD ]
Line_15 $$ if (usage == ShowUsagesAction.MORE_USAGES_SEPARATOR) -->Line_16 $$ textChunks.append("...<")[ CD ]
Line_10 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_49 $$ textChunks.append(chunk.getText(), getAttributes(isSelected, fileBgColor, bg, fg, chunk))[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_12 $$ textChunks.append(ObjectUtils.notNull(value, "").toString(), SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES)[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_27 $$ JPanel panel = new JPanel(new FlowLayout(lineNumberColumn ? FlowLayout.RIGHT : FlowLayout.LEFT, 0, 0) [ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_5 $$ Color fileBgColor = getBackgroundColor(isSelected, usage)[ CD ]
Line_10 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_21 $$ textChunks.append("...<")[ FD ]
Line_43 $$ if (usage != ShowUsagesAction.MORE_USAGES_SEPARATOR && usage != ShowUsagesAction.USAGES_OUTSIDE_SCOPE_SEPARATOR) -->Line_46 $$ if (lineNumberColumn) [ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_39 $$ panel.setForeground(panelForeground)[ CD ]
Line_27 $$ JPanel panel = new JPanel(new FlowLayout(lineNumberColumn ? FlowLayout.RIGHT : FlowLayout.LEFT, 0, 0) -->Line_33 $$ component.setBounds(b.x, b.y, b.width, container.getSize().height - insets.top - insets.bottom)[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_40 $$ if (column == 0) [ FD ]
Line_51 $$ if (column == 2) -->Line_54 $$ textChunks.append("").appendTextPadding(16 + 5)[ CD ]
Line_10 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_19 $$ return textComponentSpanningWholeRow(textChunks, panelBackground, panelForeground, column, list)[ FD ]
Line_10 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_13 $$ return textComponentSpanningWholeRow(textChunks, panelBackground, panelForeground, column, list)[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_26 $$ boolean lineNumberColumn = column == 1[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_63 $$ panel.add(textChunks)[ CD ]
Line_20 $$ if (usage == ShowUsagesAction.USAGES_OUTSIDE_SCOPE_SEPARATOR) -->Line_21 $$ textChunks.append("...<")[ CD ]
Line_27 $$ JPanel panel = new JPanel(new FlowLayout(lineNumberColumn ? FlowLayout.RIGHT : FlowLayout.LEFT, 0, 0) -->Line_30 $$ for (Component component : container.getComponents()) [ FD ]
Line_27 $$ JPanel panel = new JPanel(new FlowLayout(lineNumberColumn ? FlowLayout.RIGHT : FlowLayout.LEFT, 0, 0) -->Line_63 $$ panel.add(textChunks)[ FD ]
Line_6 $$ Color bg = UIUtil.getListSelectionBackground()-->Line_57 $$ textChunks.append(chunk.getText(), getAttributes(isSelected, fileBgColor, bg, fg, chunk))[ FD ]
Line_9 $$ Color panelForeground = isSelected ? fg : list.getForeground()-->Line_19 $$ return textComponentSpanningWholeRow(textChunks, panelBackground, panelForeground, column, list)[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_13 $$ return textComponentSpanningWholeRow(textChunks, panelBackground, panelForeground, column, list)[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_51 $$ if (column == 2) [ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_24 $$ return textComponentSpanningWholeRow(textChunks, panelBackground, panelForeground, column, list)[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_40 $$ if (column == 0) [ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_9 $$ Color panelForeground = isSelected ? fg : list.getForeground()[ FD ]
Line_10 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_22 $$ textChunks.append(UsageViewManagerImpl.outOfScopeMessage(myOutOfScopeUsages.get(), mySearchScope), SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES)[ FD ]
Line_10 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_54 $$ textChunks.append("").appendTextPadding(16 + 5)[ FD ]
Line_15 $$ if (usage == ShowUsagesAction.MORE_USAGES_SEPARATOR) -->Line_17 $$ textChunks.append("more usages", SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES)[ CD ]
Line_4 $$ Usage usage = usageNode == null ? null : usageNode.getUsage()-->Line_20 $$ if (usage == ShowUsagesAction.USAGES_OUTSIDE_SCOPE_SEPARATOR) [ FD ]
Line_27 $$ JPanel panel = new JPanel(new FlowLayout(lineNumberColumn ? FlowLayout.RIGHT : FlowLayout.LEFT, 0, 0) -->Line_32 $$ Insets insets = container.getInsets()[ FD ]
Line_4 $$ Usage usage = usageNode == null ? null : usageNode.getUsage()-->Line_5 $$ Color fileBgColor = getBackgroundColor(isSelected, usage)[ FD ]
Line_27 $$ JPanel panel = new JPanel(new FlowLayout(lineNumberColumn ? FlowLayout.RIGHT : FlowLayout.LEFT, 0, 0) -->Line_41 $$ appendGroupText((GroupNode) usageNode.getParent(), panel, fileBgColor)[ FD ]
Line_27 $$ JPanel panel = new JPanel(new FlowLayout(lineNumberColumn ? FlowLayout.RIGHT : FlowLayout.LEFT, 0, 0) -->Line_39 $$ panel.setForeground(panelForeground)[ FD ]
Line_7 $$ Color fg = UIUtil.getListSelectionForeground()-->Line_57 $$ textChunks.append(chunk.getText(), getAttributes(isSelected, fileBgColor, bg, fg, chunk))[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_3 $$ UsageNode usageNode = value instanceof UsageNode ? (UsageNode) value : null[ CD ]
Line_10 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_18 $$ textChunks.append(">...")[ FD ]
Line_46 $$ if (lineNumberColumn) -->Line_51 $$ if (column == 2) [ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable list, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_19 $$ return textComponentSpanningWholeRow(textChunks, panelBackground, panelForeground, column, list)[ FD ]
Line_10 $$ SimpleColoredComponent textChunks = new SimpleColoredComponent()-->Line_24 $$ return textComponentSpanningWholeRow(textChunks, panelBackground, panelForeground, column, list)[ FD ]
