Line_4 $$ myDocAlarm.addRequest(new Runnable() -->Line_26 $$ final String updatedText = DocPreviewUtil.buildPreview(header, qualifiedNameRef.get(), fullText)[ CD ]
Line_48 $$ if (hint.isRealPopup()) -->Line_50 $$ if (tooltipProvider != null) [ CD ]
Line_10 $$ if (anchorElement.isValid() && originalElement.isValid()) -->Line_16 $$ if (anchorElement instanceof PsiQualifiedNamedElement) [ CD ]
Line_28 $$ UIUtil.invokeLaterIfNeeded(new Runnable() -->Line_33 $$ final int widthIncrease[ CD ]
Line_28 $$ UIUtil.invokeLaterIfNeeded(new Runnable() -->Line_61 $$ for (Container current = component.getParent(); current != null; current = current.getParent()) [ CD ]
Line_63 $$ adjustBounds = true-->Line_69 $$ if (adjustBounds && topLevelLayeredPaneChild != null) [ FD ]
Line_50 $$ if (tooltipProvider != null) -->Line_55 $$ hint.pack()[ CD ]
Line_34 $$ if (component instanceof QuickDocInfoPane) -->Line_36 $$ widthIncrease = calculateWidthIncrease(buttonWidth, updatedText)[ CD ]
Line_6 $$ final Ref<String> fullTextRef = new Ref<String>()-->Line_12 $$ fullTextRef.set(provider.generateDoc(anchorElement, originalElement))[ FD ]
Line_28 $$ UIUtil.invokeLaterIfNeeded(new Runnable() -->Line_44 $$ if (newSize.width + widthIncrease == oldSize.width) [ CD ]
Line_48 $$ if (hint.isRealPopup()) -->Line_57 $$ return[ CD ]
Line_50 $$ if (tooltipProvider != null) -->Line_52 $$ tooltipProvider.showHint(new LightweightHint(component))[ CD ]
Line_4 $$ myDocAlarm.addRequest(new Runnable() -->Line_23 $$ if (fullText == null) [ CD ]
Line_49 $$ TooltipProvider tooltipProvider = myTooltipProvider-->Line_52 $$ tooltipProvider.showHint(new LightweightHint(component))[ FD ]
Line_33 $$ final int widthIncrease-->Line_38 $$ widthIncrease = 0[ FD ]
Line_30 $$ JComponent component = hint.getComponent()-->Line_47 $$ component.setPreferredSize(new Dimension(newSize.width + widthIncrease, newSize.height))[ FD ]
Line_2 $$ private void fulfillDocInfo(@NotNull final String header, @NotNull final DocumentationProvider provider, @NotNull final PsiElement originalElement, @NotNull final PsiElement anchorElement, @NotNull final Consumer<String> newTextConsumer, @NotNull final LightweightHint hint) -->Line_51 $$ hint.hide()[ FD ]
Line_30 $$ JComponent component = hint.getComponent()-->Line_61 $$ for (Container current = component.getParent(); current != null; current = current.getParent()) [ FD ]
Line_2 $$ private void fulfillDocInfo(@NotNull final String header, @NotNull final DocumentationProvider provider, @NotNull final PsiElement originalElement, @NotNull final PsiElement anchorElement, @NotNull final Consumer<String> newTextConsumer, @NotNull final LightweightHint hint) -->Line_4 $$ myDocAlarm.addRequest(new Runnable() [ CD ]
Line_40 $$ if (oldSize == null) -->Line_41 $$ return[ CD ]
Line_28 $$ UIUtil.invokeLaterIfNeeded(new Runnable() -->Line_34 $$ if (component instanceof QuickDocInfoPane) [ CD ]
Line_16 $$ if (anchorElement instanceof PsiQualifiedNamedElement) -->Line_17 $$ qualifiedNameRef.set(((PsiQualifiedNamedElement) anchorElement).getQualifiedName())[ CD ]
Line_28 $$ UIUtil.invokeLaterIfNeeded(new Runnable() -->Line_30 $$ JComponent component = hint.getComponent()[ CD ]
Line_69 $$ if (adjustBounds && topLevelLayeredPaneChild != null) -->Line_70 $$ Rectangle bounds = topLevelLayeredPaneChild.getBounds()[ CD ]
Line_23 $$ if (fullText == null) -->Line_24 $$ return[ CD ]
Line_44 $$ if (newSize.width + widthIncrease == oldSize.width) -->Line_45 $$ return[ CD ]
Line_66 $$ topLevelLayeredPaneChild = current-->Line_71 $$ topLevelLayeredPaneChild.setBounds(bounds.x, bounds.y, bounds.width + newSize.width + widthIncrease - oldSize.width, bounds.height)[ FD ]
Line_50 $$ if (tooltipProvider != null) -->Line_54 $$ component.setPreferredSize(new Dimension(newSize.width + widthIncrease, oldSize.height))[ CD ]
Line_2 $$ private void fulfillDocInfo(@NotNull final String header, @NotNull final DocumentationProvider provider, @NotNull final PsiElement originalElement, @NotNull final PsiElement anchorElement, @NotNull final Consumer<String> newTextConsumer, @NotNull final LightweightHint hint) -->Line_16 $$ if (anchorElement instanceof PsiQualifiedNamedElement) [ FD ]
Line_62 $$ if (current instanceof JLayeredPane) -->Line_63 $$ adjustBounds = true[ CD ]
Line_69 $$ if (adjustBounds && topLevelLayeredPaneChild != null) -->Line_71 $$ topLevelLayeredPaneChild.setBounds(bounds.x, bounds.y, bounds.width + newSize.width + widthIncrease - oldSize.width, bounds.height)[ CD ]
Line_36 $$ widthIncrease = calculateWidthIncrease(buttonWidth, updatedText)-->Line_38 $$ widthIncrease = 0[ FD ]
Line_2 $$ private void fulfillDocInfo(@NotNull final String header, @NotNull final DocumentationProvider provider, @NotNull final PsiElement originalElement, @NotNull final PsiElement anchorElement, @NotNull final Consumer<String> newTextConsumer, @NotNull final LightweightHint hint) -->Line_26 $$ final String updatedText = DocPreviewUtil.buildPreview(header, qualifiedNameRef.get(), fullText)[ FD ]
Line_33 $$ final int widthIncrease-->Line_36 $$ widthIncrease = calculateWidthIncrease(buttonWidth, updatedText)[ FD ]
Line_66 $$ topLevelLayeredPaneChild = current-->Line_70 $$ Rectangle bounds = topLevelLayeredPaneChild.getBounds()[ FD ]
Line_28 $$ UIUtil.invokeLaterIfNeeded(new Runnable() -->Line_32 $$ newTextConsumer.consume(newHtml)[ CD ]
Line_30 $$ JComponent component = hint.getComponent()-->Line_54 $$ component.setPreferredSize(new Dimension(newSize.width + widthIncrease, oldSize.height))[ FD ]
Line_28 $$ UIUtil.invokeLaterIfNeeded(new Runnable() -->Line_69 $$ if (adjustBounds && topLevelLayeredPaneChild != null) [ CD ]
Line_60 $$ boolean adjustBounds = false-->Line_69 $$ if (adjustBounds && topLevelLayeredPaneChild != null) [ FD ]
Line_8 $$ ApplicationManager.getApplication().runReadAction(new Runnable() -->Line_10 $$ if (anchorElement.isValid() && originalElement.isValid()) [ CD ]
Line_28 $$ UIUtil.invokeLaterIfNeeded(new Runnable() -->Line_60 $$ boolean adjustBounds = false[ CD ]
Line_34 $$ if (component instanceof QuickDocInfoPane) -->Line_38 $$ widthIncrease = 0[ CD ]
Line_2 $$ private void fulfillDocInfo(@NotNull final String header, @NotNull final DocumentationProvider provider, @NotNull final PsiElement originalElement, @NotNull final PsiElement anchorElement, @NotNull final Consumer<String> newTextConsumer, @NotNull final LightweightHint hint) -->Line_48 $$ if (hint.isRealPopup()) [ FD ]
Line_6 $$ final Ref<String> fullTextRef = new Ref<String>()-->Line_22 $$ String fullText = fullTextRef.get()[ FD ]
Line_31 $$ Dimension oldSize = component.getPreferredSize()-->Line_40 $$ if (oldSize == null) [ FD ]
Line_50 $$ if (tooltipProvider != null) -->Line_51 $$ hint.hide()[ CD ]
Line_28 $$ UIUtil.invokeLaterIfNeeded(new Runnable() -->Line_31 $$ Dimension oldSize = component.getPreferredSize()[ CD ]
Line_7 $$ final Ref<String> qualifiedNameRef = new Ref<String>()-->Line_17 $$ qualifiedNameRef.set(((PsiQualifiedNamedElement) anchorElement).getQualifiedName())[ FD ]
Line_59 $$ Container topLevelLayeredPaneChild = null-->Line_71 $$ topLevelLayeredPaneChild.setBounds(bounds.x, bounds.y, bounds.width + newSize.width + widthIncrease - oldSize.width, bounds.height)[ FD ]
Line_62 $$ if (current instanceof JLayeredPane) -->Line_66 $$ topLevelLayeredPaneChild = current[ CD ]
Line_30 $$ JComponent component = hint.getComponent()-->Line_43 $$ Dimension newSize = component.getPreferredSize()[ FD ]
Line_61 $$ for (Container current = component.getParent(); current != null; current = current.getParent()) -->Line_66 $$ topLevelLayeredPaneChild = current[ FD ]
Line_34 $$ if (component instanceof QuickDocInfoPane) -->Line_35 $$ int buttonWidth = ((QuickDocInfoPane) component).getButtonWidth()[ CD ]
Line_61 $$ for (Container current = component.getParent(); current != null; current = current.getParent()) -->Line_62 $$ if (current instanceof JLayeredPane) [ CD ]
Line_6 $$ final Ref<String> fullTextRef = new Ref<String>()-->Line_14 $$ fullTextRef.set("Documentation is not available while indexing is in progress")[ FD ]
Line_7 $$ final Ref<String> qualifiedNameRef = new Ref<String>()-->Line_26 $$ final String updatedText = DocPreviewUtil.buildPreview(header, qualifiedNameRef.get(), fullText)[ FD ]
Line_59 $$ Container topLevelLayeredPaneChild = null-->Line_66 $$ topLevelLayeredPaneChild = current[ FD ]
Line_4 $$ myDocAlarm.addRequest(new Runnable() -->Line_28 $$ UIUtil.invokeLaterIfNeeded(new Runnable() [ CD ]
Line_28 $$ UIUtil.invokeLaterIfNeeded(new Runnable() -->Line_43 $$ Dimension newSize = component.getPreferredSize()[ CD ]
Line_2 $$ private void fulfillDocInfo(@NotNull final String header, @NotNull final DocumentationProvider provider, @NotNull final PsiElement originalElement, @NotNull final PsiElement anchorElement, @NotNull final Consumer<String> newTextConsumer, @NotNull final LightweightHint hint) -->Line_10 $$ if (anchorElement.isValid() && originalElement.isValid()) [ FD ]
Line_59 $$ Container topLevelLayeredPaneChild = null-->Line_70 $$ Rectangle bounds = topLevelLayeredPaneChild.getBounds()[ FD ]
Line_4 $$ myDocAlarm.addRequest(new Runnable() -->Line_22 $$ String fullText = fullTextRef.get()[ CD ]
Line_35 $$ int buttonWidth = ((QuickDocInfoPane) component).getButtonWidth()-->Line_36 $$ widthIncrease = calculateWidthIncrease(buttonWidth, updatedText)[ FD ]
Line_60 $$ boolean adjustBounds = false-->Line_63 $$ adjustBounds = true[ FD ]
Line_2 $$ private void fulfillDocInfo(@NotNull final String header, @NotNull final DocumentationProvider provider, @NotNull final PsiElement originalElement, @NotNull final PsiElement anchorElement, @NotNull final Consumer<String> newTextConsumer, @NotNull final LightweightHint hint) -->Line_12 $$ fullTextRef.set(provider.generateDoc(anchorElement, originalElement))[ FD ]
Line_28 $$ UIUtil.invokeLaterIfNeeded(new Runnable() -->Line_47 $$ component.setPreferredSize(new Dimension(newSize.width + widthIncrease, newSize.height))[ CD ]
Line_4 $$ myDocAlarm.addRequest(new Runnable() -->Line_8 $$ ApplicationManager.getApplication().runReadAction(new Runnable() [ CD ]
Line_28 $$ UIUtil.invokeLaterIfNeeded(new Runnable() -->Line_40 $$ if (oldSize == null) [ CD ]
Line_30 $$ JComponent component = hint.getComponent()-->Line_31 $$ Dimension oldSize = component.getPreferredSize()[ FD ]
Line_4 $$ myDocAlarm.addRequest(new Runnable() -->Line_27 $$ final String newHtml = HintUtil.prepareHintText(updatedText, HintUtil.getInformationHint())[ CD ]
Line_48 $$ if (hint.isRealPopup()) -->Line_49 $$ TooltipProvider tooltipProvider = myTooltipProvider[ CD ]
Line_30 $$ JComponent component = hint.getComponent()-->Line_34 $$ if (component instanceof QuickDocInfoPane) [ FD ]
Line_4 $$ myDocAlarm.addRequest(new Runnable() -->Line_7 $$ final Ref<String> qualifiedNameRef = new Ref<String>()[ CD ]
Line_28 $$ UIUtil.invokeLaterIfNeeded(new Runnable() -->Line_59 $$ Container topLevelLayeredPaneChild = null[ CD ]
Line_2 $$ private void fulfillDocInfo(@NotNull final String header, @NotNull final DocumentationProvider provider, @NotNull final PsiElement originalElement, @NotNull final PsiElement anchorElement, @NotNull final Consumer<String> newTextConsumer, @NotNull final LightweightHint hint) -->Line_32 $$ newTextConsumer.consume(newHtml)[ FD ]
Line_2 $$ private void fulfillDocInfo(@NotNull final String header, @NotNull final DocumentationProvider provider, @NotNull final PsiElement originalElement, @NotNull final PsiElement anchorElement, @NotNull final Consumer<String> newTextConsumer, @NotNull final LightweightHint hint) -->Line_55 $$ hint.pack()[ FD ]
Line_2 $$ private void fulfillDocInfo(@NotNull final String header, @NotNull final DocumentationProvider provider, @NotNull final PsiElement originalElement, @NotNull final PsiElement anchorElement, @NotNull final Consumer<String> newTextConsumer, @NotNull final LightweightHint hint) -->Line_3 $$ myDocAlarm.cancelAllRequests()[ CD ]
Line_49 $$ TooltipProvider tooltipProvider = myTooltipProvider-->Line_50 $$ if (tooltipProvider != null) [ FD ]
Line_2 $$ private void fulfillDocInfo(@NotNull final String header, @NotNull final DocumentationProvider provider, @NotNull final PsiElement originalElement, @NotNull final PsiElement anchorElement, @NotNull final Consumer<String> newTextConsumer, @NotNull final LightweightHint hint) -->Line_30 $$ JComponent component = hint.getComponent()[ FD ]
Line_28 $$ UIUtil.invokeLaterIfNeeded(new Runnable() -->Line_48 $$ if (hint.isRealPopup()) [ CD ]
Line_4 $$ myDocAlarm.addRequest(new Runnable() -->Line_6 $$ final Ref<String> fullTextRef = new Ref<String>()[ CD ]
Line_61 $$ for (Container current = component.getParent(); current != null; current = current.getParent()) -->Line_62 $$ if (current instanceof JLayeredPane) [ FD ]
