Line_7 $$ int end = text.length()-->Line_29 $$ if (currentIndex < end) [ FD ]
Line_7 $$ int end = text.length()-->Line_8 $$ AttributedCharacterIterator it = string.getIterator(new AttributedCharacterIterator.Attribute[0], start, end)[ FD ]
Line_10 $$ int currentIndex = start-->Line_26 $$ currentIndex = i[ FD ]
Line_29 $$ if (currentIndex < end) -->Line_30 $$ string.addAttribute(TextAttribute.FONT, currentFont, currentIndex, end)[ CD ]
Line_2 $$ private static TextLayout createTextLayout(String text, Font basefont, FontRenderContext fontRenderContext) -->Line_9 $$ Font currentFont = basefont[ CD ]
Line_2 $$ private static TextLayout createTextLayout(String text, Font basefont, FontRenderContext fontRenderContext) -->Line_6 $$ int start = 0[ CD ]
Line_12 $$ Font font = basefont-->Line_16 $$ if (font != null)[ FD ]
Line_8 $$ AttributedCharacterIterator it = string.getIterator(new AttributedCharacterIterator.Attribute[0], start, end)-->Line_20 $$ int i = it.getIndex()[ FD ]
Line_21 $$ if (!Comparing.equal(currentFont, font)) -->Line_26 $$ currentIndex = i[ CD ]
Line_25 $$ currentFont = font-->Line_30 $$ string.addAttribute(TextAttribute.FONT, currentFont, currentIndex, end)[ FD ]
Line_11 $$ for (char c = it.first(); c != CharacterIterator.DONE; c = it.next()) -->Line_13 $$ if (!font.canDisplay(c)) [ FD ]
Line_11 $$ for (char c = it.first(); c != CharacterIterator.DONE; c = it.next()) -->Line_20 $$ int i = it.getIndex()[ CD ]
Line_21 $$ if (!Comparing.equal(currentFont, font)) -->Line_22 $$ if (i > currentIndex) [ CD ]
Line_11 $$ for (char c = it.first(); c != CharacterIterator.DONE; c = it.next()) -->Line_15 $$ font = provider.getFontAbleToDisplay(c, basefont.getSize(), basefont.getStyle(), basefont.getFamily())[ FD ]
Line_5 $$ AttributedString string = new AttributedString(text)-->Line_8 $$ AttributedCharacterIterator it = string.getIterator(new AttributedCharacterIterator.Attribute[0], start, end)[ FD ]
Line_2 $$ private static TextLayout createTextLayout(String text, Font basefont, FontRenderContext fontRenderContext) -->Line_15 $$ font = provider.getFontAbleToDisplay(c, basefont.getSize(), basefont.getStyle(), basefont.getFamily())[ FD ]
Line_9 $$ Font currentFont = basefont-->Line_30 $$ string.addAttribute(TextAttribute.FONT, currentFont, currentIndex, end)[ FD ]
Line_8 $$ AttributedCharacterIterator it = string.getIterator(new AttributedCharacterIterator.Attribute[0], start, end)-->Line_11 $$ for (char c = it.first(); c != CharacterIterator.DONE; c = it.next()) [ FD ]
Line_2 $$ private static TextLayout createTextLayout(String text, Font basefont, FontRenderContext fontRenderContext) -->Line_29 $$ if (currentIndex < end) [ CD ]
Line_20 $$ int i = it.getIndex()-->Line_23 $$ string.addAttribute(TextAttribute.FONT, currentFont, currentIndex, i)[ FD ]
Line_26 $$ currentIndex = i-->Line_30 $$ string.addAttribute(TextAttribute.FONT, currentFont, currentIndex, end)[ FD ]
Line_15 $$ font = provider.getFontAbleToDisplay(c, basefont.getSize(), basefont.getStyle(), basefont.getFamily())-->Line_13 $$ if (!font.canDisplay(c)) [ FD ]
Line_15 $$ font = provider.getFontAbleToDisplay(c, basefont.getSize(), basefont.getStyle(), basefont.getFamily())-->Line_21 $$ if (!Comparing.equal(currentFont, font)) [ FD ]
Line_12 $$ Font font = basefont-->Line_15 $$ font = provider.getFontAbleToDisplay(c, basefont.getSize(), basefont.getStyle(), basefont.getFamily())[ FD ]
Line_15 $$ font = provider.getFontAbleToDisplay(c, basefont.getSize(), basefont.getStyle(), basefont.getFamily())-->Line_16 $$ if (font != null)[ FD ]
Line_6 $$ int start = 0-->Line_8 $$ AttributedCharacterIterator it = string.getIterator(new AttributedCharacterIterator.Attribute[0], start, end)[ FD ]
Line_10 $$ int currentIndex = start-->Line_22 $$ if (i > currentIndex) [ FD ]
Line_2 $$ private static TextLayout createTextLayout(String text, Font basefont, FontRenderContext fontRenderContext) -->Line_32 $$ return new TextLayout(string.getIterator(), fontRenderContext)[ CD ]
Line_9 $$ Font currentFont = basefont-->Line_23 $$ string.addAttribute(TextAttribute.FONT, currentFont, currentIndex, i)[ FD ]
Line_21 $$ if (!Comparing.equal(currentFont, font)) -->Line_25 $$ currentFont = font[ CD ]
Line_2 $$ private static TextLayout createTextLayout(String text, Font basefont, FontRenderContext fontRenderContext) -->Line_8 $$ AttributedCharacterIterator it = string.getIterator(new AttributedCharacterIterator.Attribute[0], start, end)[ CD ]
Line_25 $$ currentFont = font-->Line_21 $$ if (!Comparing.equal(currentFont, font)) [ FD ]
Line_20 $$ int i = it.getIndex()-->Line_22 $$ if (i > currentIndex) [ FD ]
Line_12 $$ Font font = basefont-->Line_21 $$ if (!Comparing.equal(currentFont, font)) [ FD ]
Line_20 $$ int i = it.getIndex()-->Line_26 $$ currentIndex = i[ FD ]
Line_2 $$ private static TextLayout createTextLayout(String text, Font basefont, FontRenderContext fontRenderContext) -->Line_7 $$ int end = text.length()[ CD ]
Line_5 $$ AttributedString string = new AttributedString(text)-->Line_30 $$ string.addAttribute(TextAttribute.FONT, currentFont, currentIndex, end)[ FD ]
Line_5 $$ AttributedString string = new AttributedString(text)-->Line_23 $$ string.addAttribute(TextAttribute.FONT, currentFont, currentIndex, i)[ FD ]
Line_5 $$ AttributedString string = new AttributedString(text)-->Line_32 $$ return new TextLayout(string.getIterator(), fontRenderContext)[ FD ]
Line_26 $$ currentIndex = i-->Line_22 $$ if (i > currentIndex) [ FD ]
Line_2 $$ private static TextLayout createTextLayout(String text, Font basefont, FontRenderContext fontRenderContext) -->Line_7 $$ int end = text.length()[ FD ]
Line_3 $$ if (StringUtil.isEmpty(text))-->Line_4 $$ return null[ CD ]
Line_14 $$ for (SuitableFontProvider provider : SuitableFontProvider.EP_NAME.getExtensions()) -->Line_15 $$ font = provider.getFontAbleToDisplay(c, basefont.getSize(), basefont.getStyle(), basefont.getFamily())[ FD ]
Line_12 $$ Font font = basefont-->Line_25 $$ currentFont = font[ FD ]
Line_2 $$ private static TextLayout createTextLayout(String text, Font basefont, FontRenderContext fontRenderContext) -->Line_3 $$ if (StringUtil.isEmpty(text))[ FD ]
Line_9 $$ Font currentFont = basefont-->Line_25 $$ currentFont = font[ FD ]
Line_10 $$ int currentIndex = start-->Line_23 $$ string.addAttribute(TextAttribute.FONT, currentFont, currentIndex, i)[ FD ]
Line_15 $$ font = provider.getFontAbleToDisplay(c, basefont.getSize(), basefont.getStyle(), basefont.getFamily())-->Line_25 $$ currentFont = font[ FD ]
Line_11 $$ for (char c = it.first(); c != CharacterIterator.DONE; c = it.next()) -->Line_21 $$ if (!Comparing.equal(currentFont, font)) [ CD ]
Line_26 $$ currentIndex = i-->Line_23 $$ string.addAttribute(TextAttribute.FONT, currentFont, currentIndex, i)[ FD ]
Line_11 $$ for (char c = it.first(); c != CharacterIterator.DONE; c = it.next()) -->Line_12 $$ Font font = basefont[ CD ]
Line_11 $$ for (char c = it.first(); c != CharacterIterator.DONE; c = it.next()) -->Line_13 $$ if (!font.canDisplay(c)) [ CD ]
Line_9 $$ Font currentFont = basefont-->Line_21 $$ if (!Comparing.equal(currentFont, font)) [ FD ]
Line_7 $$ int end = text.length()-->Line_30 $$ string.addAttribute(TextAttribute.FONT, currentFont, currentIndex, end)[ FD ]
Line_2 $$ private static TextLayout createTextLayout(String text, Font basefont, FontRenderContext fontRenderContext) -->Line_5 $$ AttributedString string = new AttributedString(text)[ CD ]
Line_22 $$ if (i > currentIndex) -->Line_23 $$ string.addAttribute(TextAttribute.FONT, currentFont, currentIndex, i)[ CD ]
Line_2 $$ private static TextLayout createTextLayout(String text, Font basefont, FontRenderContext fontRenderContext) -->Line_10 $$ int currentIndex = start[ CD ]
Line_10 $$ int currentIndex = start-->Line_29 $$ if (currentIndex < end) [ FD ]
Line_12 $$ Font font = basefont-->Line_13 $$ if (!font.canDisplay(c)) [ FD ]
Line_25 $$ currentFont = font-->Line_23 $$ string.addAttribute(TextAttribute.FONT, currentFont, currentIndex, i)[ FD ]
Line_10 $$ int currentIndex = start-->Line_30 $$ string.addAttribute(TextAttribute.FONT, currentFont, currentIndex, end)[ FD ]
Line_26 $$ currentIndex = i-->Line_29 $$ if (currentIndex < end) [ FD ]
Line_2 $$ private static TextLayout createTextLayout(String text, Font basefont, FontRenderContext fontRenderContext) -->Line_11 $$ for (char c = it.first(); c != CharacterIterator.DONE; c = it.next()) [ CD ]
Line_2 $$ private static TextLayout createTextLayout(String text, Font basefont, FontRenderContext fontRenderContext) -->Line_3 $$ if (StringUtil.isEmpty(text))[ CD ]
