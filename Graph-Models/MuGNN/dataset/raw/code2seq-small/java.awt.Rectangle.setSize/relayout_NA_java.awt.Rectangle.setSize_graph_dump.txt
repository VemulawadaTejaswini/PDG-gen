Line_19 $$ for (int i = 0; i < columns.size(); i++) -->Line_20 $$ final ArrayList<Balloon> eachColumn = columns.get(i)[ FD ]
Line_2 $$ private void relayout() -->Line_14 $$ int paneOnScreen = component.isShowing() ? component.getLocationOnScreen().y : 0[ CD ]
Line_19 $$ for (int i = 0; i < columns.size(); i++) -->Line_21 $$ final Integer eachWidth = columnWidths.get(i)[ CD ]
Line_28 $$ if (((BalloonImpl) eachBalloon).hasShadow()) -->Line_29 $$ final int shadowSize = ((BalloonImpl) eachBalloon).getShadowBorderSize()[ CD ]
Line_13 $$ JComponent component = pane != null ? pane : myParent-->Line_14 $$ int paneOnScreen = component.isShowing() ? component.getLocationOnScreen().y : 0[ FD ]
Line_2 $$ private void relayout() -->Line_13 $$ JComponent component = pane != null ? pane : myParent[ CD ]
Line_19 $$ for (int i = 0; i < columns.size(); i++) -->Line_23 $$ int eachY = toolbarsOffset + 2[ CD ]
Line_19 $$ for (int i = 0; i < columns.size(); i++) -->Line_22 $$ eachColumnX -= eachWidth.intValue()[ CD ]
Line_3 $$ final Dimension size = myLayeredPane.getSize()-->Line_4 $$ JBInsets.removeFrom(size, myInsets)[ FD ]
Line_5 $$ final Rectangle layoutRec = new Rectangle(new Point(myInsets.left, myInsets.top), size)-->Line_9 $$ columns = createColumns(layoutRec)[ FD ]
Line_9 $$ columns = createColumns(layoutRec)-->Line_20 $$ final ArrayList<Balloon> eachColumn = columns.get(i)[ FD ]
Line_19 $$ for (int i = 0; i < columns.size(); i++) -->Line_21 $$ final Integer eachWidth = columnWidths.get(i)[ FD ]
Line_6 $$ List<ArrayList<Balloon>> columns = createColumns(layoutRec)-->Line_11 $$ List<Integer> columnWidths = computeWidths(columns)[ FD ]
Line_25 $$ final Rectangle eachRec = new Rectangle()-->Line_35 $$ eachBalloon.setBounds(eachRec)[ FD ]
Line_9 $$ columns = createColumns(layoutRec)-->Line_7 $$ while (columns.size() > 1) [ FD ]
Line_2 $$ private void relayout() -->Line_11 $$ List<Integer> columnWidths = computeWidths(columns)[ CD ]
Line_2 $$ private void relayout() -->Line_6 $$ List<ArrayList<Balloon>> columns = createColumns(layoutRec)[ CD ]
Line_33 $$ eachY += 2-->Line_34 $$ eachRec.setLocation(eachColumnX + eachWidth.intValue() - eachRec.width, eachY)[ FD ]
Line_6 $$ List<ArrayList<Balloon>> columns = createColumns(layoutRec)-->Line_7 $$ while (columns.size() > 1) [ FD ]
Line_24 $$ for (Balloon eachBalloon : eachColumn) -->Line_35 $$ eachBalloon.setBounds(eachRec)[ FD ]
Line_9 $$ columns = createColumns(layoutRec)-->Line_11 $$ List<Integer> columnWidths = computeWidths(columns)[ FD ]
Line_7 $$ while (columns.size() > 1) -->Line_9 $$ columns = createColumns(layoutRec)[ CD ]
Line_2 $$ private void relayout() -->Line_5 $$ final Rectangle layoutRec = new Rectangle(new Point(myInsets.left, myInsets.top), size)[ CD ]
Line_18 $$ int eachColumnX = (layeredPane == null ? myLayeredPane.getWidth() : layeredPane.getX() + layeredPane.getWidth()) - 4-->Line_22 $$ eachColumnX -= eachWidth.intValue()[ FD ]
Line_2 $$ private void relayout() -->Line_4 $$ JBInsets.removeFrom(size, myInsets)[ CD ]
Line_2 $$ private void relayout() -->Line_7 $$ while (columns.size() > 1) [ CD ]
Line_28 $$ if (((BalloonImpl) eachBalloon).hasShadow()) -->Line_30 $$ eachRec.width += 2 * shadowSize[ CD ]
Line_6 $$ List<ArrayList<Balloon>> columns = createColumns(layoutRec)-->Line_9 $$ columns = createColumns(layoutRec)[ FD ]
Line_33 $$ eachY += 2-->Line_36 $$ eachY += eachRec.height[ FD ]
Line_2 $$ private void relayout() -->Line_18 $$ int eachColumnX = (layeredPane == null ? myLayeredPane.getWidth() : layeredPane.getX() + layeredPane.getWidth()) - 4[ CD ]
Line_29 $$ final int shadowSize = ((BalloonImpl) eachBalloon).getShadowBorderSize()-->Line_30 $$ eachRec.width += 2 * shadowSize[ FD ]
Line_28 $$ if (((BalloonImpl) eachBalloon).hasShadow()) -->Line_31 $$ eachRec.height += 2 * shadowSize[ CD ]
Line_23 $$ int eachY = toolbarsOffset + 2-->Line_34 $$ eachRec.setLocation(eachColumnX + eachWidth.intValue() - eachRec.width, eachY)[ FD ]
Line_23 $$ int eachY = toolbarsOffset + 2-->Line_36 $$ eachY += eachRec.height[ FD ]
Line_36 $$ eachY += eachRec.height-->Line_34 $$ eachRec.setLocation(eachColumnX + eachWidth.intValue() - eachRec.width, eachY)[ FD ]
Line_7 $$ while (columns.size() > 1) -->Line_8 $$ myBalloons.remove(0)[ CD ]
Line_5 $$ final Rectangle layoutRec = new Rectangle(new Point(myInsets.left, myInsets.top), size)-->Line_6 $$ List<ArrayList<Balloon>> columns = createColumns(layoutRec)[ FD ]
Line_2 $$ private void relayout() -->Line_3 $$ final Dimension size = myLayeredPane.getSize()[ CD ]
Line_23 $$ int eachY = toolbarsOffset + 2-->Line_33 $$ eachY += 2[ FD ]
Line_24 $$ for (Balloon eachBalloon : eachColumn) -->Line_26 $$ final Dimension eachPrefSize = eachBalloon.getPreferredSize()[ FD ]
Line_25 $$ final Rectangle eachRec = new Rectangle()-->Line_34 $$ eachRec.setLocation(eachColumnX + eachWidth.intValue() - eachRec.width, eachY)[ FD ]
Line_17 $$ JComponent layeredPane = pane != null ? pane.getMyLayeredPane() : null-->Line_18 $$ int eachColumnX = (layeredPane == null ? myLayeredPane.getWidth() : layeredPane.getX() + layeredPane.getWidth()) - 4[ FD ]
Line_2 $$ private void relayout() -->Line_12 $$ ToolWindowsPane pane = UIUtil.findComponentOfType(myParent, ToolWindowsPane.class)[ CD ]
Line_29 $$ final int shadowSize = ((BalloonImpl) eachBalloon).getShadowBorderSize()-->Line_31 $$ eachRec.height += 2 * shadowSize[ FD ]
Line_2 $$ private void relayout() -->Line_16 $$ int toolbarsOffset = paneOnScreen - layerOnScreen[ CD ]
Line_9 $$ columns = createColumns(layoutRec)-->Line_19 $$ for (int i = 0; i < columns.size(); i++) [ FD ]
Line_11 $$ List<Integer> columnWidths = computeWidths(columns)-->Line_21 $$ final Integer eachWidth = columnWidths.get(i)[ FD ]
Line_2 $$ private void relayout() -->Line_15 $$ int layerOnScreen = myLayeredPane.isShowing() ? myLayeredPane.getLocationOnScreen().y : 0[ CD ]
Line_25 $$ final Rectangle eachRec = new Rectangle()-->Line_27 $$ eachRec.setSize(eachPrefSize)[ FD ]
Line_19 $$ for (int i = 0; i < columns.size(); i++) -->Line_20 $$ final ArrayList<Balloon> eachColumn = columns.get(i)[ CD ]
Line_12 $$ ToolWindowsPane pane = UIUtil.findComponentOfType(myParent, ToolWindowsPane.class)-->Line_17 $$ JComponent layeredPane = pane != null ? pane.getMyLayeredPane() : null[ FD ]
Line_2 $$ private void relayout() -->Line_19 $$ for (int i = 0; i < columns.size(); i++) [ CD ]
Line_21 $$ final Integer eachWidth = columnWidths.get(i)-->Line_22 $$ eachColumnX -= eachWidth.intValue()[ FD ]
Line_6 $$ List<ArrayList<Balloon>> columns = createColumns(layoutRec)-->Line_20 $$ final ArrayList<Balloon> eachColumn = columns.get(i)[ FD ]
Line_6 $$ List<ArrayList<Balloon>> columns = createColumns(layoutRec)-->Line_19 $$ for (int i = 0; i < columns.size(); i++) [ FD ]
Line_2 $$ private void relayout() -->Line_17 $$ JComponent layeredPane = pane != null ? pane.getMyLayeredPane() : null[ CD ]
Line_26 $$ final Dimension eachPrefSize = eachBalloon.getPreferredSize()-->Line_27 $$ eachRec.setSize(eachPrefSize)[ FD ]
Line_21 $$ final Integer eachWidth = columnWidths.get(i)-->Line_34 $$ eachRec.setLocation(eachColumnX + eachWidth.intValue() - eachRec.width, eachY)[ FD ]
