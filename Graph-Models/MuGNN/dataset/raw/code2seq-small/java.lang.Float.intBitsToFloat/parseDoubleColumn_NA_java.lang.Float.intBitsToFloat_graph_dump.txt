Line_3 $$ if (length == 0) -->Line_6 $$ nulls[column] = false[ CD ]
Line_7 $$ if (hiveTypes[column].equals(HIVE_FLOAT)) -->Line_10 $$ doubles[column] = Float.intBitsToFloat(Integer.reverseBytes(intBits))[ CD ]
Line_9 $$ int intBits = ByteArrays.getInt(bytes, start)-->Line_10 $$ doubles[column] = Float.intBitsToFloat(Integer.reverseBytes(intBits))[ FD ]
Line_3 $$ if (length == 0) -->Line_7 $$ if (hiveTypes[column].equals(HIVE_FLOAT)) [ CD ]
Line_11 $$ if (hiveTypes[column].equals(HIVE_DOUBLE)) -->Line_14 $$ doubles[column] = Double.longBitsToDouble(Long.reverseBytes(longBits))[ CD ]
Line_2 $$ private void parseDoubleColumn(int column, byte[] bytes, int start, int length) -->Line_3 $$ if (length == 0) [ FD ]
Line_2 $$ private void parseDoubleColumn(int column, byte[] bytes, int start, int length) -->Line_3 $$ if (length == 0) [ CD ]
Line_11 $$ if (hiveTypes[column].equals(HIVE_DOUBLE)) -->Line_12 $$ checkState(length == SIZE_OF_LONG, "Double should be 8 bytes")[ CD ]
Line_11 $$ if (hiveTypes[column].equals(HIVE_DOUBLE)) -->Line_13 $$ long longBits = ByteArrays.getLong(bytes, start)[ CD ]
Line_7 $$ if (hiveTypes[column].equals(HIVE_FLOAT)) -->Line_8 $$ checkState(length == SIZE_OF_INT, "Float should be 4 bytes")[ CD ]
Line_2 $$ private void parseDoubleColumn(int column, byte[] bytes, int start, int length) -->Line_9 $$ int intBits = ByteArrays.getInt(bytes, start)[ FD ]
Line_3 $$ if (length == 0) -->Line_4 $$ nulls[column] = true[ CD ]
Line_2 $$ private void parseDoubleColumn(int column, byte[] bytes, int start, int length) -->Line_13 $$ long longBits = ByteArrays.getLong(bytes, start)[ FD ]
Line_7 $$ if (hiveTypes[column].equals(HIVE_FLOAT)) -->Line_11 $$ if (hiveTypes[column].equals(HIVE_DOUBLE)) [ CD ]
Line_13 $$ long longBits = ByteArrays.getLong(bytes, start)-->Line_14 $$ doubles[column] = Double.longBitsToDouble(Long.reverseBytes(longBits))[ FD ]
Line_7 $$ if (hiveTypes[column].equals(HIVE_FLOAT)) -->Line_9 $$ int intBits = ByteArrays.getInt(bytes, start)[ CD ]
