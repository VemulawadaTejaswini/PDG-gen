Line_22 $$ while (existingNames.contains(name)) -->Line_23 $$ final String newName = name + (idx++)[ CD ]
Line_7 $$ String templateText-->Line_13 $$ templateText = fileTemplate.getText(properties)[ FD ]
Line_6 $$ Template template = TemplateManager.getInstance(targetClass.getProject()).createTemplate("", "")-->Line_44 $$ template.addVariable("name", nameExpr, nameExpr, !automatic)[ FD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_22 $$ while (existingNames.contains(name)) [ FD ]
Line_37 $$ if (index > 0 && !Character.isWhitespace(templateText.charAt(index - 1))) -->Line_40 $$ name = StringUtil.decapitalize(name)[ CD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_18 $$ if (name == null)[ CD ]
Line_42 $$ if (from == 0) -->Line_46 $$ template.addVariableSegment("name")[ CD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_11 $$ properties.setProperty(FileTemplate.ATTRIBUTE_CLASS_NAME, sourceClass.getQualifiedName())[ FD ]
Line_31 $$ int from = 0-->Line_33 $$ int index = templateText.indexOf("$[ FD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_44 $$ template.addVariable("name", nameExpr, nameExpr, !automatic)[ FD ]
Line_33 $$ int index = templateText.indexOf("$-->Line_48 $$ from = index + "$[ FD ]
Line_43 $$ Expression nameExpr = new ConstantNode(name)-->Line_44 $$ template.addVariable("name", nameExpr, nameExpr, !automatic)[ FD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_6 $$ Template template = TemplateManager.getInstance(targetClass.getProject()).createTemplate("", "")[ CD ]
Line_6 $$ Template template = TemplateManager.getInstance(targetClass.getProject()).createTemplate("", "")-->Line_46 $$ template.addVariableSegment("name")[ FD ]
Line_16 $$ templateText = fileTemplate.getText()-->Line_37 $$ if (index > 0 && !Character.isWhitespace(templateText.charAt(index - 1))) [ FD ]
Line_37 $$ if (index > 0 && !Character.isWhitespace(templateText.charAt(index - 1))) -->Line_38 $$ name = StringUtil.capitalize(name)[ CD ]
Line_13 $$ templateText = fileTemplate.getText(properties)-->Line_37 $$ if (index > 0 && !Character.isWhitespace(templateText.charAt(index - 1))) [ FD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_50 $$ template.addTextSegment(templateText.substring(from, templateText.length()))[ CD ]
Line_5 $$ FileTemplate fileTemplate = FileTemplateManager.getInstance(targetClass.getProject()).getCodeTemplate(templateName)-->Line_13 $$ templateText = fileTemplate.getText(properties)[ FD ]
Line_42 $$ if (from == 0) -->Line_43 $$ Expression nameExpr = new ConstantNode(name)[ CD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_18 $$ if (name == null)[ FD ]
Line_32 $$ while (true) -->Line_37 $$ if (index > 0 && !Character.isWhitespace(templateText.charAt(index - 1))) [ CD ]
Line_3 $$ FileTemplateDescriptor templateDesc = methodKind.getFileTemplateDescriptor(descriptor)-->Line_4 $$ String templateName = templateDesc.getFileName()[ FD ]
Line_30 $$ templateText = StringUtil.replace(templateText, "$-->Line_37 $$ if (index > 0 && !Character.isWhitespace(templateText.charAt(index - 1))) [ FD ]
Line_7 $$ String templateText-->Line_30 $$ templateText = StringUtil.replace(templateText, "$[ FD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_6 $$ Template template = TemplateManager.getInstance(targetClass.getProject()).createTemplate("", "")[ FD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_30 $$ templateText = StringUtil.replace(templateText, "$[ CD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_54 $$ return template[ CD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_3 $$ FileTemplateDescriptor templateDesc = methodKind.getFileTemplateDescriptor(descriptor)[ FD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_19 $$ name = methodKind.getDefaultName()[ FD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_24 $$ if (existingNames.add(newName)) [ FD ]
Line_13 $$ templateText = fileTemplate.getText(properties)-->Line_50 $$ template.addTextSegment(templateText.substring(from, templateText.length()))[ FD ]
Line_23 $$ final String newName = name + (idx++)-->Line_24 $$ if (existingNames.add(newName)) [ FD ]
Line_32 $$ while (true) -->Line_36 $$ template.addTextSegment(templateText.substring(from, index))[ CD ]
Line_13 $$ templateText = fileTemplate.getText(properties)-->Line_33 $$ int index = templateText.indexOf("$[ FD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_40 $$ name = StringUtil.decapitalize(name)[ FD ]
Line_6 $$ Template template = TemplateManager.getInstance(targetClass.getProject()).createTemplate("", "")-->Line_50 $$ template.addTextSegment(templateText.substring(from, templateText.length()))[ FD ]
Line_7 $$ String templateText-->Line_36 $$ template.addTextSegment(templateText.substring(from, index))[ FD ]
Line_13 $$ templateText = fileTemplate.getText(properties)-->Line_16 $$ templateText = fileTemplate.getText()[ FD ]
Line_48 $$ from = index + "$-->Line_42 $$ if (from == 0) [ FD ]
Line_31 $$ int from = 0-->Line_36 $$ template.addTextSegment(templateText.substring(from, index))[ FD ]
Line_33 $$ int index = templateText.indexOf("$-->Line_36 $$ template.addTextSegment(templateText.substring(from, index))[ FD ]
Line_6 $$ Template template = TemplateManager.getInstance(targetClass.getProject()).createTemplate("", "")-->Line_51 $$ template.setToIndent(true)[ FD ]
Line_7 $$ String templateText-->Line_33 $$ int index = templateText.indexOf("$[ FD ]
Line_7 $$ String templateText-->Line_50 $$ template.addTextSegment(templateText.substring(from, templateText.length()))[ FD ]
Line_16 $$ templateText = fileTemplate.getText()-->Line_30 $$ templateText = StringUtil.replace(templateText, "$[ FD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_31 $$ int from = 0[ CD ]
Line_22 $$ while (existingNames.contains(name)) -->Line_24 $$ if (existingNames.add(newName)) [ CD ]
Line_9 $$ Properties properties = new Properties()-->Line_13 $$ templateText = fileTemplate.getText(properties)[ FD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_20 $$ if (existingNames != null && !existingNames.add(name)) [ FD ]
Line_42 $$ if (from == 0) -->Line_44 $$ template.addVariable("name", nameExpr, nameExpr, !automatic)[ CD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_53 $$ template.setToShortenLongNames(true)[ CD ]
Line_6 $$ Template template = TemplateManager.getInstance(targetClass.getProject()).createTemplate("", "")-->Line_36 $$ template.addTextSegment(templateText.substring(from, index))[ FD ]
Line_30 $$ templateText = StringUtil.replace(templateText, "$-->Line_33 $$ int index = templateText.indexOf("$[ FD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_52 $$ template.setToReformat(true)[ CD ]
Line_10 $$ if (sourceClass != null && sourceClass.isValid()) -->Line_11 $$ properties.setProperty(FileTemplate.ATTRIBUTE_CLASS_NAME, sourceClass.getQualifiedName())[ CD ]
Line_33 $$ int index = templateText.indexOf("$-->Line_34 $$ if (index == -1)[ FD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_3 $$ FileTemplateDescriptor templateDesc = methodKind.getFileTemplateDescriptor(descriptor)[ CD ]
Line_7 $$ String templateText-->Line_37 $$ if (index > 0 && !Character.isWhitespace(templateText.charAt(index - 1))) [ FD ]
Line_4 $$ String templateName = templateDesc.getFileName()-->Line_5 $$ FileTemplate fileTemplate = FileTemplateManager.getInstance(targetClass.getProject()).getCodeTemplate(templateName)[ FD ]
Line_32 $$ while (true) -->Line_42 $$ if (from == 0) [ CD ]
Line_48 $$ from = index + "$-->Line_33 $$ int index = templateText.indexOf("$[ FD ]
Line_30 $$ templateText = StringUtil.replace(templateText, "$-->Line_36 $$ template.addTextSegment(templateText.substring(from, index))[ FD ]
Line_32 $$ while (true) -->Line_34 $$ if (index == -1)[ CD ]
Line_31 $$ int from = 0-->Line_42 $$ if (from == 0) [ FD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_7 $$ String templateText[ CD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_38 $$ name = StringUtil.capitalize(name)[ FD ]
Line_18 $$ if (name == null)-->Line_19 $$ name = methodKind.getDefaultName()[ CD ]
Line_30 $$ templateText = StringUtil.replace(templateText, "$-->Line_50 $$ template.addTextSegment(templateText.substring(from, templateText.length()))[ FD ]
Line_20 $$ if (existingNames != null && !existingNames.add(name)) -->Line_21 $$ int idx = 1[ CD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_4 $$ String templateName = templateDesc.getFileName()[ CD ]
Line_5 $$ FileTemplate fileTemplate = FileTemplateManager.getInstance(targetClass.getProject()).getCodeTemplate(templateName)-->Line_16 $$ templateText = fileTemplate.getText()[ FD ]
Line_6 $$ Template template = TemplateManager.getInstance(targetClass.getProject()).createTemplate("", "")-->Line_52 $$ template.setToReformat(true)[ FD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_51 $$ template.setToIndent(true)[ CD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_20 $$ if (existingNames != null && !existingNames.add(name)) [ CD ]
Line_32 $$ while (true) -->Line_33 $$ int index = templateText.indexOf("$[ CD ]
Line_7 $$ String templateText-->Line_16 $$ templateText = fileTemplate.getText()[ FD ]
Line_16 $$ templateText = fileTemplate.getText()-->Line_33 $$ int index = templateText.indexOf("$[ FD ]
Line_16 $$ templateText = fileTemplate.getText()-->Line_36 $$ template.addTextSegment(templateText.substring(from, index))[ FD ]
Line_9 $$ Properties properties = new Properties()-->Line_11 $$ properties.setProperty(FileTemplate.ATTRIBUTE_CLASS_NAME, sourceClass.getQualifiedName())[ FD ]
Line_48 $$ from = index + "$-->Line_50 $$ template.addTextSegment(templateText.substring(from, templateText.length()))[ FD ]
Line_32 $$ while (true) -->Line_48 $$ from = index + "$[ CD ]
Line_16 $$ templateText = fileTemplate.getText()-->Line_50 $$ template.addTextSegment(templateText.substring(from, templateText.length()))[ FD ]
Line_21 $$ int idx = 1-->Line_23 $$ final String newName = name + (idx++)[ FD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_5 $$ FileTemplate fileTemplate = FileTemplateManager.getInstance(targetClass.getProject()).getCodeTemplate(templateName)[ FD ]
Line_13 $$ templateText = fileTemplate.getText(properties)-->Line_30 $$ templateText = StringUtil.replace(templateText, "$[ FD ]
Line_31 $$ int from = 0-->Line_50 $$ template.addTextSegment(templateText.substring(from, templateText.length()))[ FD ]
Line_6 $$ Template template = TemplateManager.getInstance(targetClass.getProject()).createTemplate("", "")-->Line_53 $$ template.setToShortenLongNames(true)[ FD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_32 $$ while (true) [ CD ]
Line_48 $$ from = index + "$-->Line_36 $$ template.addTextSegment(templateText.substring(from, index))[ FD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_10 $$ if (sourceClass != null && sourceClass.isValid()) [ FD ]
Line_31 $$ int from = 0-->Line_48 $$ from = index + "$[ FD ]
Line_2 $$ public static Template createTestMethodTemplate(MethodKind methodKind, TestFramework descriptor, @NotNull PsiClass targetClass, @Nullable PsiClass sourceClass, @Nullable String name, boolean automatic, Set<String> existingNames) -->Line_5 $$ FileTemplate fileTemplate = FileTemplateManager.getInstance(targetClass.getProject()).getCodeTemplate(templateName)[ CD ]
Line_20 $$ if (existingNames != null && !existingNames.add(name)) -->Line_22 $$ while (existingNames.contains(name)) [ CD ]
Line_13 $$ templateText = fileTemplate.getText(properties)-->Line_36 $$ template.addTextSegment(templateText.substring(from, index))[ FD ]
