Line_2 $$ private static int handleRegExp(int index, String pattern, StringBuilder miscBuffer, MatchVariableConstraint constraint) -->Line_6 $$ miscBuffer.append(ch)[ FD ]
Line_14 $$ if (constraint.getRegExp() != null && constraint.getRegExp().length() > 0 && !constraint.getRegExp().equals(regexp)) -->Line_18 $$ constraint.setRegExp(regexp)[ CD ]
Line_2 $$ private static int handleRegExp(int index, String pattern, StringBuilder miscBuffer, MatchVariableConstraint constraint) -->Line_20 $$ return index[ CD ]
Line_2 $$ private static int handleRegExp(int index, String pattern, StringBuilder miscBuffer, MatchVariableConstraint constraint) -->Line_4 $$ final int length = pattern.length()[ FD ]
Line_2 $$ private static int handleRegExp(int index, String pattern, StringBuilder miscBuffer, MatchVariableConstraint constraint) -->Line_3 $$ char c = pattern.charAt(index - 1)[ CD ]
Line_13 $$ String regexp = miscBuffer.toString()-->Line_14 $$ if (constraint.getRegExp() != null && constraint.getRegExp().length() > 0 && !constraint.getRegExp().equals(regexp)) [ FD ]
Line_5 $$ for (char ch; index < length && !Character.isWhitespace(ch = pattern.charAt(index)); ++index) -->Line_6 $$ miscBuffer.append(ch)[ CD ]
Line_2 $$ private static int handleRegExp(int index, String pattern, StringBuilder miscBuffer, MatchVariableConstraint constraint) -->Line_18 $$ constraint.setRegExp(regexp)[ FD ]
Line_2 $$ private static int handleRegExp(int index, String pattern, StringBuilder miscBuffer, MatchVariableConstraint constraint) -->Line_4 $$ final int length = pattern.length()[ CD ]
Line_2 $$ private static int handleRegExp(int index, String pattern, StringBuilder miscBuffer, MatchVariableConstraint constraint) -->Line_5 $$ for (char ch; index < length && !Character.isWhitespace(ch = pattern.charAt(index)); ++index) [ CD ]
Line_2 $$ private static int handleRegExp(int index, String pattern, StringBuilder miscBuffer, MatchVariableConstraint constraint) -->Line_5 $$ for (char ch; index < length && !Character.isWhitespace(ch = pattern.charAt(index)); ++index) [ FD ]
Line_2 $$ private static int handleRegExp(int index, String pattern, StringBuilder miscBuffer, MatchVariableConstraint constraint) -->Line_3 $$ char c = pattern.charAt(index - 1)[ FD ]
Line_9 $$ if (c == ':')-->Line_12 $$ return index[ CD ]
Line_5 $$ for (char ch; index < length && !Character.isWhitespace(ch = pattern.charAt(index)); ++index) -->Line_6 $$ miscBuffer.append(ch)[ FD ]
Line_2 $$ private static int handleRegExp(int index, String pattern, StringBuilder miscBuffer, MatchVariableConstraint constraint) -->Line_8 $$ if (miscBuffer.length() == 0)[ CD ]
Line_8 $$ if (miscBuffer.length() == 0)-->Line_9 $$ if (c == ':')[ CD ]
Line_2 $$ private static int handleRegExp(int index, String pattern, StringBuilder miscBuffer, MatchVariableConstraint constraint) -->Line_13 $$ String regexp = miscBuffer.toString()[ CD ]
Line_3 $$ char c = pattern.charAt(index - 1)-->Line_9 $$ if (c == ':')[ FD ]
Line_2 $$ private static int handleRegExp(int index, String pattern, StringBuilder miscBuffer, MatchVariableConstraint constraint) -->Line_14 $$ if (constraint.getRegExp() != null && constraint.getRegExp().length() > 0 && !constraint.getRegExp().equals(regexp)) [ CD ]
Line_2 $$ private static int handleRegExp(int index, String pattern, StringBuilder miscBuffer, MatchVariableConstraint constraint) -->Line_13 $$ String regexp = miscBuffer.toString()[ FD ]
Line_13 $$ String regexp = miscBuffer.toString()-->Line_17 $$ checkRegex(regexp)[ FD ]
Line_2 $$ private static int handleRegExp(int index, String pattern, StringBuilder miscBuffer, MatchVariableConstraint constraint) -->Line_8 $$ if (miscBuffer.length() == 0)[ FD ]
Line_3 $$ char c = pattern.charAt(index - 1)-->Line_10 $$ throw new MalformedPatternException(SSRBundle.message("error.expected.condition", c))[ FD ]
Line_2 $$ private static int handleRegExp(int index, String pattern, StringBuilder miscBuffer, MatchVariableConstraint constraint) -->Line_14 $$ if (constraint.getRegExp() != null && constraint.getRegExp().length() > 0 && !constraint.getRegExp().equals(regexp)) [ FD ]
Line_2 $$ private static int handleRegExp(int index, String pattern, StringBuilder miscBuffer, MatchVariableConstraint constraint) -->Line_9 $$ if (c == ':')[ FD ]
Line_14 $$ if (constraint.getRegExp() != null && constraint.getRegExp().length() > 0 && !constraint.getRegExp().equals(regexp)) -->Line_17 $$ checkRegex(regexp)[ CD ]
Line_13 $$ String regexp = miscBuffer.toString()-->Line_18 $$ constraint.setRegExp(regexp)[ FD ]
