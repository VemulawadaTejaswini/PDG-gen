Line_40 $$ position = prefixPos + prefix.length()-->Line_34 $$ for (int position = 0; position < text.length(); ) [ FD ]
Line_27 $$ prefix = commenter.getBlockCommentPrefix()-->Line_40 $$ position = prefixPos + prefix.length()[ FD ]
Line_34 $$ for (int position = 0; position < text.length(); ) -->Line_46 $$ position = suffixPos + suffix.length()[ CD ]
Line_2 $$ private static boolean doUncommentLine(int line, Document document, Commenter commenter, int startOffset, int endOffset) -->Line_52 $$ return false[ CD ]
Line_5 $$ CharSequence chars = document.getCharsSequence()-->Line_10 $$ while (theEnd > startOffset && Character.isWhitespace(chars.charAt(theEnd - 1))) [ FD ]
Line_42 $$ if (suffixPos == -1) -->Line_43 $$ suffixPos = text.length() - suffix.length()[ CD ]
Line_6 $$ if (commenter instanceof CommenterWithLineSuffix) -->Line_7 $$ CommenterWithLineSuffix commenterWithLineSuffix = (CommenterWithLineSuffix) commenter[ CD ]
Line_46 $$ position = suffixPos + suffix.length()-->Line_34 $$ for (int position = 0; position < text.length(); ) [ FD ]
Line_34 $$ for (int position = 0; position < text.length(); ) -->Line_41 $$ int suffixPos = text.indexOf(suffix, position)[ FD ]
Line_33 $$ IntArrayList suffixes = new IntArrayList()-->Line_50 $$ uncommentRange(document, startOffset + prefixes.get(i), Math.min(startOffset + suffixes.get(i) + suffix.length(), endOffset), commenter)[ FD ]
Line_6 $$ if (commenter instanceof CommenterWithLineSuffix) -->Line_9 $$ int theEnd = endOffset > 0 ? endOffset : document.getLineEndOffset(line)[ CD ]
Line_6 $$ if (commenter instanceof CommenterWithLineSuffix) -->Line_14 $$ if (lineText.indexOf(suffix) != -1) [ CD ]
Line_14 $$ if (lineText.indexOf(suffix) != -1) -->Line_16 $$ document.deleteString(start, start + suffix.length())[ CD ]
Line_34 $$ for (int position = 0; position < text.length(); ) -->Line_35 $$ int prefixPos = text.indexOf(prefix, position)[ FD ]
Line_35 $$ int prefixPos = text.indexOf(prefix, position)-->Line_40 $$ position = prefixPos + prefix.length()[ FD ]
Line_34 $$ for (int position = 0; position < text.length(); ) -->Line_45 $$ suffixes.add(suffixPos)[ CD ]
Line_14 $$ if (lineText.indexOf(suffix) != -1) -->Line_15 $$ int start = startOffset + lineText.indexOf(suffix)[ CD ]
Line_34 $$ for (int position = 0; position < text.length(); ) -->Line_39 $$ prefixes.add(prefixPos)[ CD ]
Line_7 $$ CommenterWithLineSuffix commenterWithLineSuffix = (CommenterWithLineSuffix) commenter-->Line_8 $$ String suffix = commenterWithLineSuffix.getLineCommentSuffix()[ FD ]
Line_19 $$ boolean matchesTrimmed = false-->Line_20 $$ boolean commented = CharArrayUtil.regionMatches(chars, startOffset, prefix) || (matchesTrimmed = prefix.endsWith(" ") && CharArrayUtil.regionMatches(chars, startOffset, prefix.trim()))[ FD ]
Line_32 $$ IntArrayList prefixes = new IntArrayList()-->Line_49 $$ for (int i = prefixes.size() - 1; i >= 0; i--) [ FD ]
Line_32 $$ IntArrayList prefixes = new IntArrayList()-->Line_39 $$ prefixes.add(prefixPos)[ FD ]
Line_40 $$ position = prefixPos + prefix.length()-->Line_35 $$ int prefixPos = text.indexOf(prefix, position)[ FD ]
Line_6 $$ if (commenter instanceof CommenterWithLineSuffix) -->Line_10 $$ while (theEnd > startOffset && Character.isWhitespace(chars.charAt(theEnd - 1))) [ CD ]
Line_2 $$ private static boolean doUncommentLine(int line, Document document, Commenter commenter, int startOffset, int endOffset) -->Line_34 $$ for (int position = 0; position < text.length(); ) [ CD ]
Line_26 $$ String text = document.getCharsSequence().subSequence(startOffset, endOffset).toString()-->Line_34 $$ for (int position = 0; position < text.length(); ) [ FD ]
Line_4 $$ if (prefix != null) -->Line_5 $$ CharSequence chars = document.getCharsSequence()[ CD ]
Line_29 $$ if (prefix == null || suffix == null) -->Line_30 $$ return true[ CD ]
Line_2 $$ private static boolean doUncommentLine(int line, Document document, Commenter commenter, int startOffset, int endOffset) -->Line_3 $$ String prefix = commenter.getLineCommentPrefix()[ FD ]
Line_6 $$ if (commenter instanceof CommenterWithLineSuffix) -->Line_13 $$ String lineText = document.getText(new TextRange(startOffset, theEnd))[ CD ]
Line_13 $$ String lineText = document.getText(new TextRange(startOffset, theEnd))-->Line_15 $$ int start = startOffset + lineText.indexOf(suffix)[ FD ]
Line_41 $$ int suffixPos = text.indexOf(suffix, position)-->Line_46 $$ position = suffixPos + suffix.length()[ FD ]
Line_2 $$ private static boolean doUncommentLine(int line, Document document, Commenter commenter, int startOffset, int endOffset) -->Line_33 $$ IntArrayList suffixes = new IntArrayList()[ CD ]
Line_8 $$ String suffix = commenterWithLineSuffix.getLineCommentSuffix()-->Line_41 $$ int suffixPos = text.indexOf(suffix, position)[ FD ]
Line_2 $$ private static boolean doUncommentLine(int line, Document document, Commenter commenter, int startOffset, int endOffset) -->Line_6 $$ if (commenter instanceof CommenterWithLineSuffix) [ FD ]
Line_46 $$ position = suffixPos + suffix.length()-->Line_35 $$ int prefixPos = text.indexOf(prefix, position)[ FD ]
Line_2 $$ private static boolean doUncommentLine(int line, Document document, Commenter commenter, int startOffset, int endOffset) -->Line_23 $$ document.deleteString(startOffset, startOffset + charsToDelete)[ FD ]
Line_4 $$ if (prefix != null) -->Line_19 $$ boolean matchesTrimmed = false[ CD ]
Line_32 $$ IntArrayList prefixes = new IntArrayList()-->Line_50 $$ uncommentRange(document, startOffset + prefixes.get(i), Math.min(startOffset + suffixes.get(i) + suffix.length(), endOffset), commenter)[ FD ]
Line_2 $$ private static boolean doUncommentLine(int line, Document document, Commenter commenter, int startOffset, int endOffset) -->Line_13 $$ String lineText = document.getText(new TextRange(startOffset, theEnd))[ FD ]
Line_49 $$ for (int i = prefixes.size() - 1; i >= 0; i--) -->Line_50 $$ uncommentRange(document, startOffset + prefixes.get(i), Math.min(startOffset + suffixes.get(i) + suffix.length(), endOffset), commenter)[ CD ]
Line_2 $$ private static boolean doUncommentLine(int line, Document document, Commenter commenter, int startOffset, int endOffset) -->Line_50 $$ uncommentRange(document, startOffset + prefixes.get(i), Math.min(startOffset + suffixes.get(i) + suffix.length(), endOffset), commenter)[ FD ]
Line_41 $$ int suffixPos = text.indexOf(suffix, position)-->Line_42 $$ if (suffixPos == -1) [ FD ]
Line_4 $$ if (prefix != null) -->Line_23 $$ document.deleteString(startOffset, startOffset + charsToDelete)[ CD ]
Line_43 $$ suffixPos = text.length() - suffix.length()-->Line_42 $$ if (suffixPos == -1) [ FD ]
Line_3 $$ String prefix = commenter.getLineCommentPrefix()-->Line_35 $$ int prefixPos = text.indexOf(prefix, position)[ FD ]
Line_49 $$ for (int i = prefixes.size() - 1; i >= 0; i--) -->Line_50 $$ uncommentRange(document, startOffset + prefixes.get(i), Math.min(startOffset + suffixes.get(i) + suffix.length(), endOffset), commenter)[ FD ]
Line_40 $$ position = prefixPos + prefix.length()-->Line_46 $$ position = suffixPos + suffix.length()[ FD ]
Line_6 $$ if (commenter instanceof CommenterWithLineSuffix) -->Line_8 $$ String suffix = commenterWithLineSuffix.getLineCommentSuffix()[ CD ]
Line_2 $$ private static boolean doUncommentLine(int line, Document document, Commenter commenter, int startOffset, int endOffset) -->Line_3 $$ String prefix = commenter.getLineCommentPrefix()[ CD ]
Line_40 $$ position = prefixPos + prefix.length()-->Line_41 $$ int suffixPos = text.indexOf(suffix, position)[ FD ]
Line_2 $$ private static boolean doUncommentLine(int line, Document document, Commenter commenter, int startOffset, int endOffset) -->Line_27 $$ prefix = commenter.getBlockCommentPrefix()[ FD ]
Line_34 $$ for (int position = 0; position < text.length(); ) -->Line_35 $$ int prefixPos = text.indexOf(prefix, position)[ CD ]
Line_32 $$ IntArrayList prefixes = new IntArrayList()-->Line_48 $$ assert prefixes.size() == suffixes.size()[ FD ]
Line_8 $$ String suffix = commenterWithLineSuffix.getLineCommentSuffix()-->Line_14 $$ if (lineText.indexOf(suffix) != -1) [ FD ]
Line_3 $$ String prefix = commenter.getLineCommentPrefix()-->Line_22 $$ int charsToDelete = matchesTrimmed ? prefix.trim().length() : prefix.length()[ FD ]
Line_2 $$ private static boolean doUncommentLine(int line, Document document, Commenter commenter, int startOffset, int endOffset) -->Line_28 $$ final String suffix = commenter.getBlockCommentSuffix()[ FD ]
Line_26 $$ String text = document.getCharsSequence().subSequence(startOffset, endOffset).toString()-->Line_35 $$ int prefixPos = text.indexOf(prefix, position)[ FD ]
Line_15 $$ int start = startOffset + lineText.indexOf(suffix)-->Line_16 $$ document.deleteString(start, start + suffix.length())[ FD ]
Line_3 $$ String prefix = commenter.getLineCommentPrefix()-->Line_20 $$ boolean commented = CharArrayUtil.regionMatches(chars, startOffset, prefix) || (matchesTrimmed = prefix.endsWith(" ") && CharArrayUtil.regionMatches(chars, startOffset, prefix.trim()))[ FD ]
Line_2 $$ private static boolean doUncommentLine(int line, Document document, Commenter commenter, int startOffset, int endOffset) -->Line_49 $$ for (int i = prefixes.size() - 1; i >= 0; i--) [ CD ]
Line_10 $$ while (theEnd > startOffset && Character.isWhitespace(chars.charAt(theEnd - 1))) -->Line_11 $$ theEnd--[ CD ]
Line_3 $$ String prefix = commenter.getLineCommentPrefix()-->Line_4 $$ if (prefix != null) [ FD ]
Line_34 $$ for (int position = 0; position < text.length(); ) -->Line_40 $$ position = prefixPos + prefix.length()[ CD ]
Line_34 $$ for (int position = 0; position < text.length(); ) -->Line_46 $$ position = suffixPos + suffix.length()[ FD ]
Line_27 $$ prefix = commenter.getBlockCommentPrefix()-->Line_35 $$ int prefixPos = text.indexOf(prefix, position)[ FD ]
Line_9 $$ int theEnd = endOffset > 0 ? endOffset : document.getLineEndOffset(line)-->Line_11 $$ theEnd--[ FD ]
Line_2 $$ private static boolean doUncommentLine(int line, Document document, Commenter commenter, int startOffset, int endOffset) -->Line_26 $$ String text = document.getCharsSequence().subSequence(startOffset, endOffset).toString()[ FD ]
Line_2 $$ private static boolean doUncommentLine(int line, Document document, Commenter commenter, int startOffset, int endOffset) -->Line_29 $$ if (prefix == null || suffix == null) [ CD ]
Line_8 $$ String suffix = commenterWithLineSuffix.getLineCommentSuffix()-->Line_43 $$ suffixPos = text.length() - suffix.length()[ FD ]
Line_41 $$ int suffixPos = text.indexOf(suffix, position)-->Line_43 $$ suffixPos = text.length() - suffix.length()[ FD ]
Line_4 $$ if (prefix != null) -->Line_20 $$ boolean commented = CharArrayUtil.regionMatches(chars, startOffset, prefix) || (matchesTrimmed = prefix.endsWith(" ") && CharArrayUtil.regionMatches(chars, startOffset, prefix.trim()))[ CD ]
Line_2 $$ private static boolean doUncommentLine(int line, Document document, Commenter commenter, int startOffset, int endOffset) -->Line_27 $$ prefix = commenter.getBlockCommentPrefix()[ CD ]
Line_8 $$ String suffix = commenterWithLineSuffix.getLineCommentSuffix()-->Line_46 $$ position = suffixPos + suffix.length()[ FD ]
Line_33 $$ IntArrayList suffixes = new IntArrayList()-->Line_48 $$ assert prefixes.size() == suffixes.size()[ FD ]
Line_34 $$ for (int position = 0; position < text.length(); ) -->Line_40 $$ position = prefixPos + prefix.length()[ FD ]
Line_33 $$ IntArrayList suffixes = new IntArrayList()-->Line_45 $$ suffixes.add(suffixPos)[ FD ]
Line_4 $$ if (prefix != null) -->Line_22 $$ int charsToDelete = matchesTrimmed ? prefix.trim().length() : prefix.length()[ CD ]
Line_4 $$ if (prefix != null) -->Line_6 $$ if (commenter instanceof CommenterWithLineSuffix) [ CD ]
Line_26 $$ String text = document.getCharsSequence().subSequence(startOffset, endOffset).toString()-->Line_41 $$ int suffixPos = text.indexOf(suffix, position)[ FD ]
Line_43 $$ suffixPos = text.length() - suffix.length()-->Line_46 $$ position = suffixPos + suffix.length()[ FD ]
Line_2 $$ private static boolean doUncommentLine(int line, Document document, Commenter commenter, int startOffset, int endOffset) -->Line_4 $$ if (prefix != null) [ CD ]
Line_3 $$ String prefix = commenter.getLineCommentPrefix()-->Line_27 $$ prefix = commenter.getBlockCommentPrefix()[ FD ]
Line_34 $$ for (int position = 0; position < text.length(); ) -->Line_41 $$ int suffixPos = text.indexOf(suffix, position)[ CD ]
Line_8 $$ String suffix = commenterWithLineSuffix.getLineCommentSuffix()-->Line_50 $$ uncommentRange(document, startOffset + prefixes.get(i), Math.min(startOffset + suffixes.get(i) + suffix.length(), endOffset), commenter)[ FD ]
Line_2 $$ private static boolean doUncommentLine(int line, Document document, Commenter commenter, int startOffset, int endOffset) -->Line_28 $$ final String suffix = commenter.getBlockCommentSuffix()[ CD ]
Line_2 $$ private static boolean doUncommentLine(int line, Document document, Commenter commenter, int startOffset, int endOffset) -->Line_5 $$ CharSequence chars = document.getCharsSequence()[ FD ]
Line_41 $$ int suffixPos = text.indexOf(suffix, position)-->Line_45 $$ suffixes.add(suffixPos)[ FD ]
Line_35 $$ int prefixPos = text.indexOf(prefix, position)-->Line_39 $$ prefixes.add(prefixPos)[ FD ]
Line_13 $$ String lineText = document.getText(new TextRange(startOffset, theEnd))-->Line_14 $$ if (lineText.indexOf(suffix) != -1) [ FD ]
Line_46 $$ position = suffixPos + suffix.length()-->Line_41 $$ int suffixPos = text.indexOf(suffix, position)[ FD ]
Line_2 $$ private static boolean doUncommentLine(int line, Document document, Commenter commenter, int startOffset, int endOffset) -->Line_16 $$ document.deleteString(start, start + suffix.length())[ FD ]
Line_4 $$ if (prefix != null) -->Line_24 $$ return true[ CD ]
Line_8 $$ String suffix = commenterWithLineSuffix.getLineCommentSuffix()-->Line_15 $$ int start = startOffset + lineText.indexOf(suffix)[ FD ]
Line_34 $$ for (int position = 0; position < text.length(); ) -->Line_36 $$ if (prefixPos == -1) [ CD ]
Line_26 $$ String text = document.getCharsSequence().subSequence(startOffset, endOffset).toString()-->Line_43 $$ suffixPos = text.length() - suffix.length()[ FD ]
Line_2 $$ private static boolean doUncommentLine(int line, Document document, Commenter commenter, int startOffset, int endOffset) -->Line_26 $$ String text = document.getCharsSequence().subSequence(startOffset, endOffset).toString()[ CD ]
Line_35 $$ int prefixPos = text.indexOf(prefix, position)-->Line_36 $$ if (prefixPos == -1) [ FD ]
Line_5 $$ CharSequence chars = document.getCharsSequence()-->Line_20 $$ boolean commented = CharArrayUtil.regionMatches(chars, startOffset, prefix) || (matchesTrimmed = prefix.endsWith(" ") && CharArrayUtil.regionMatches(chars, startOffset, prefix.trim()))[ FD ]
Line_8 $$ String suffix = commenterWithLineSuffix.getLineCommentSuffix()-->Line_16 $$ document.deleteString(start, start + suffix.length())[ FD ]
Line_43 $$ suffixPos = text.length() - suffix.length()-->Line_45 $$ suffixes.add(suffixPos)[ FD ]
Line_2 $$ private static boolean doUncommentLine(int line, Document document, Commenter commenter, int startOffset, int endOffset) -->Line_20 $$ boolean commented = CharArrayUtil.regionMatches(chars, startOffset, prefix) || (matchesTrimmed = prefix.endsWith(" ") && CharArrayUtil.regionMatches(chars, startOffset, prefix.trim()))[ FD ]
Line_2 $$ private static boolean doUncommentLine(int line, Document document, Commenter commenter, int startOffset, int endOffset) -->Line_9 $$ int theEnd = endOffset > 0 ? endOffset : document.getLineEndOffset(line)[ FD ]
Line_2 $$ private static boolean doUncommentLine(int line, Document document, Commenter commenter, int startOffset, int endOffset) -->Line_32 $$ IntArrayList prefixes = new IntArrayList()[ CD ]
Line_34 $$ for (int position = 0; position < text.length(); ) -->Line_42 $$ if (suffixPos == -1) [ CD ]
Line_3 $$ String prefix = commenter.getLineCommentPrefix()-->Line_40 $$ position = prefixPos + prefix.length()[ FD ]
