Line_5 $$ if (offset <= 0)-->Line_6 $$ return[ CD ]
Line_2 $$ private static void autoImport(@NotNull final PsiFile file, int offset, @NotNull final Editor editor) -->Line_12 $$ if (offset <= 0)[ CD ]
Line_2 $$ private static void autoImport(@NotNull final PsiFile file, int offset, @NotNull final Editor editor) -->Line_7 $$ while (offset > 0 && Character.isWhitespace(text.charAt(offset))) offset--[ FD ]
Line_2 $$ private static void autoImport(@NotNull final PsiFile file, int offset, @NotNull final Editor editor) -->Line_11 $$ while (offset > 0 && Character.isWhitespace(text.charAt(offset))) offset--[ CD ]
Line_2 $$ private static void autoImport(@NotNull final PsiFile file, int offset, @NotNull final Editor editor) -->Line_14 $$ autoImportReference(file, editor, extractReference(PsiTreeUtil.findElementOfClassAtOffset(file, offset, PsiExpression.class, false)))[ CD ]
Line_2 $$ private static void autoImport(@NotNull final PsiFile file, int offset, @NotNull final Editor editor) -->Line_5 $$ if (offset <= 0)[ CD ]
Line_8 $$ if (offset <= 0 || text.charAt(offset) != '.')-->Line_9 $$ return[ CD ]
Line_2 $$ private static void autoImport(@NotNull final PsiFile file, int offset, @NotNull final Editor editor) -->Line_11 $$ offset--[ FD ]
Line_12 $$ if (offset <= 0)-->Line_13 $$ return[ CD ]
Line_3 $$ final CharSequence text = editor.getDocument().getCharsSequence()-->Line_11 $$ while (offset > 0 && Character.isWhitespace(text.charAt(offset))) offset--[ FD ]
Line_2 $$ private static void autoImport(@NotNull final PsiFile file, int offset, @NotNull final Editor editor) -->Line_4 $$ while (offset > 0 && Character.isJavaIdentifierPart(text.charAt(offset))) offset--[ CD ]
Line_2 $$ private static void autoImport(@NotNull final PsiFile file, int offset, @NotNull final Editor editor) -->Line_3 $$ final CharSequence text = editor.getDocument().getCharsSequence()[ CD ]
Line_2 $$ private static void autoImport(@NotNull final PsiFile file, int offset, @NotNull final Editor editor) -->Line_7 $$ offset--[ FD ]
Line_3 $$ final CharSequence text = editor.getDocument().getCharsSequence()-->Line_7 $$ while (offset > 0 && Character.isWhitespace(text.charAt(offset))) offset--[ FD ]
Line_2 $$ private static void autoImport(@NotNull final PsiFile file, int offset, @NotNull final Editor editor) -->Line_3 $$ final CharSequence text = editor.getDocument().getCharsSequence()[ FD ]
Line_2 $$ private static void autoImport(@NotNull final PsiFile file, int offset, @NotNull final Editor editor) -->Line_4 $$ offset--[ FD ]
Line_2 $$ private static void autoImport(@NotNull final PsiFile file, int offset, @NotNull final Editor editor) -->Line_14 $$ autoImportReference(file, editor, extractReference(PsiTreeUtil.findElementOfClassAtOffset(file, offset, PsiExpression.class, false)))[ FD ]
Line_3 $$ final CharSequence text = editor.getDocument().getCharsSequence()-->Line_4 $$ while (offset > 0 && Character.isJavaIdentifierPart(text.charAt(offset))) offset--[ FD ]
Line_3 $$ final CharSequence text = editor.getDocument().getCharsSequence()-->Line_8 $$ if (offset <= 0 || text.charAt(offset) != '.')[ FD ]
Line_2 $$ private static void autoImport(@NotNull final PsiFile file, int offset, @NotNull final Editor editor) -->Line_12 $$ if (offset <= 0)[ FD ]
Line_2 $$ private static void autoImport(@NotNull final PsiFile file, int offset, @NotNull final Editor editor) -->Line_5 $$ if (offset <= 0)[ FD ]
Line_2 $$ private static void autoImport(@NotNull final PsiFile file, int offset, @NotNull final Editor editor) -->Line_7 $$ while (offset > 0 && Character.isWhitespace(text.charAt(offset))) offset--[ CD ]
Line_2 $$ private static void autoImport(@NotNull final PsiFile file, int offset, @NotNull final Editor editor) -->Line_10 $$ offset--[ CD ]
Line_2 $$ private static void autoImport(@NotNull final PsiFile file, int offset, @NotNull final Editor editor) -->Line_11 $$ while (offset > 0 && Character.isWhitespace(text.charAt(offset))) offset--[ FD ]
Line_2 $$ private static void autoImport(@NotNull final PsiFile file, int offset, @NotNull final Editor editor) -->Line_4 $$ while (offset > 0 && Character.isJavaIdentifierPart(text.charAt(offset))) offset--[ FD ]
Line_2 $$ private static void autoImport(@NotNull final PsiFile file, int offset, @NotNull final Editor editor) -->Line_10 $$ offset--[ FD ]
Line_2 $$ private static void autoImport(@NotNull final PsiFile file, int offset, @NotNull final Editor editor) -->Line_8 $$ if (offset <= 0 || text.charAt(offset) != '.')[ CD ]
Line_2 $$ private static void autoImport(@NotNull final PsiFile file, int offset, @NotNull final Editor editor) -->Line_8 $$ if (offset <= 0 || text.charAt(offset) != '.')[ FD ]
