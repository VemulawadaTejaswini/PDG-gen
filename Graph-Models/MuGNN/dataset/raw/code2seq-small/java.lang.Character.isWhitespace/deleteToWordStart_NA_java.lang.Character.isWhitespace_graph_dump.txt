Line_2 $$ private void deleteToWordStart(Editor editor) -->Line_11 $$ myQuotesNumber.clear()[ CD ]
Line_19 $$ char current = text.charAt(offset)-->Line_20 $$ if (QUOTE_SYMBOLS.contains(current)) [ FD ]
Line_5 $$ camel = !camel-->Line_28 $$ EditorActionUtil.moveCaretToPreviousWord(editor, false, camel)[ FD ]
Line_18 $$ char previous = text.charAt(offset - 1)-->Line_33 $$ if (QUOTE_SYMBOLS.contains(previous)) [ FD ]
Line_5 $$ camel = !camel-->Line_16 $$ EditorActionUtil.moveCaretToPreviousWord(editor, false, camel)[ FD ]
Line_2 $$ private void deleteToWordStart(Editor editor) -->Line_16 $$ EditorActionUtil.moveCaretToPreviousWord(editor, false, camel)[ FD ]
Line_3 $$ boolean camel = editor.getSettings().isCamelWords()-->Line_28 $$ EditorActionUtil.moveCaretToPreviousWord(editor, false, camel)[ FD ]
Line_33 $$ if (QUOTE_SYMBOLS.contains(previous)) -->Line_34 $$ if (myQuotesNumber.get(previous) % 2 == 0) [ CD ]
Line_7 $$ CharSequence text = editor.getDocument().getCharsSequence()-->Line_15 $$ countQuotes(myQuotesNumber, text, minOffset, endOffset)[ FD ]
Line_3 $$ boolean camel = editor.getSettings().isCamelWords()-->Line_5 $$ camel = !camel[ FD ]
Line_2 $$ private void deleteToWordStart(Editor editor) -->Line_4 $$ if (myNegateCamelMode) [ CD ]
Line_2 $$ private void deleteToWordStart(Editor editor) -->Line_16 $$ EditorActionUtil.moveCaretToPreviousWord(editor, false, camel)[ CD ]
Line_2 $$ private void deleteToWordStart(Editor editor) -->Line_3 $$ boolean camel = editor.getSettings().isCamelWords()[ FD ]
Line_7 $$ CharSequence text = editor.getDocument().getCharsSequence()-->Line_19 $$ char current = text.charAt(offset)[ FD ]
Line_2 $$ private void deleteToWordStart(Editor editor) -->Line_28 $$ EditorActionUtil.moveCaretToPreviousWord(editor, false, camel)[ FD ]
Line_7 $$ CharSequence text = editor.getDocument().getCharsSequence()-->Line_18 $$ char previous = text.charAt(offset - 1)[ FD ]
Line_2 $$ private void deleteToWordStart(Editor editor) -->Line_3 $$ boolean camel = editor.getSettings().isCamelWords()[ CD ]
Line_2 $$ private void deleteToWordStart(Editor editor) -->Line_41 $$ Document document = editor.getDocument()[ FD ]
Line_7 $$ CharSequence text = editor.getDocument().getCharsSequence()-->Line_23 $$ if (offset < endOffset - 1 && !Character.isJavaIdentifierPart(text.charAt(offset + 1))) [ FD ]
Line_23 $$ if (offset < endOffset - 1 && !Character.isJavaIdentifierPart(text.charAt(offset + 1))) -->Line_24 $$ editor.getCaretModel().moveToOffset(offset + 1)[ CD ]
Line_2 $$ private void deleteToWordStart(Editor editor) -->Line_24 $$ editor.getCaretModel().moveToOffset(offset + 1)[ FD ]
Line_2 $$ private void deleteToWordStart(Editor editor) -->Line_40 $$ int startOffset = caretModel.getOffset()[ CD ]
Line_8 $$ CaretModel caretModel = editor.getCaretModel()-->Line_17 $$ for (int offset = caretModel.getOffset(); offset > minOffset; offset = caretModel.getOffset()) [ FD ]
Line_2 $$ private void deleteToWordStart(Editor editor) -->Line_8 $$ CaretModel caretModel = editor.getCaretModel()[ FD ]
Line_9 $$ int endOffset = caretModel.getOffset()-->Line_42 $$ document.deleteString(startOffset, endOffset)[ FD ]
Line_18 $$ char previous = text.charAt(offset - 1)-->Line_21 $$ if (Character.isWhitespace(previous)) [ FD ]
Line_2 $$ private void deleteToWordStart(Editor editor) -->Line_10 $$ int minOffset = editor.getDocument().getLineStartOffset(caretModel.getLogicalPosition().line)[ FD ]
Line_2 $$ private void deleteToWordStart(Editor editor) -->Line_9 $$ int endOffset = caretModel.getOffset()[ CD ]
Line_4 $$ if (myNegateCamelMode) -->Line_5 $$ camel = !camel[ CD ]
Line_2 $$ private void deleteToWordStart(Editor editor) -->Line_15 $$ countQuotes(myQuotesNumber, text, minOffset, endOffset)[ CD ]
Line_40 $$ int startOffset = caretModel.getOffset()-->Line_42 $$ document.deleteString(startOffset, endOffset)[ FD ]
Line_10 $$ int minOffset = editor.getDocument().getLineStartOffset(caretModel.getLogicalPosition().line)-->Line_15 $$ countQuotes(myQuotesNumber, text, minOffset, endOffset)[ FD ]
Line_2 $$ private void deleteToWordStart(Editor editor) -->Line_10 $$ int minOffset = editor.getDocument().getLineStartOffset(caretModel.getLogicalPosition().line)[ CD ]
Line_8 $$ CaretModel caretModel = editor.getCaretModel()-->Line_40 $$ int startOffset = caretModel.getOffset()[ FD ]
Line_2 $$ private void deleteToWordStart(Editor editor) -->Line_8 $$ CaretModel caretModel = editor.getCaretModel()[ CD ]
Line_17 $$ for (int offset = caretModel.getOffset(); offset > minOffset; offset = caretModel.getOffset()) -->Line_19 $$ char current = text.charAt(offset)[ FD ]
Line_9 $$ int endOffset = caretModel.getOffset()-->Line_15 $$ countQuotes(myQuotesNumber, text, minOffset, endOffset)[ FD ]
Line_27 $$ if (myQuotesNumber.get(current) % 2 == 0) -->Line_28 $$ EditorActionUtil.moveCaretToPreviousWord(editor, false, camel)[ CD ]
Line_2 $$ private void deleteToWordStart(Editor editor) -->Line_35 $$ editor.getCaretModel().moveToOffset(offset - 1)[ FD ]
Line_19 $$ char current = text.charAt(offset)-->Line_27 $$ if (myQuotesNumber.get(current) % 2 == 0) [ FD ]
Line_17 $$ for (int offset = caretModel.getOffset(); offset > minOffset; offset = caretModel.getOffset()) -->Line_19 $$ char current = text.charAt(offset)[ CD ]
Line_34 $$ if (myQuotesNumber.get(previous) % 2 == 0) -->Line_35 $$ editor.getCaretModel().moveToOffset(offset - 1)[ CD ]
Line_2 $$ private void deleteToWordStart(Editor editor) -->Line_17 $$ for (int offset = caretModel.getOffset(); offset > minOffset; offset = caretModel.getOffset()) [ CD ]
Line_3 $$ boolean camel = editor.getSettings().isCamelWords()-->Line_16 $$ EditorActionUtil.moveCaretToPreviousWord(editor, false, camel)[ FD ]
Line_18 $$ char previous = text.charAt(offset - 1)-->Line_34 $$ if (myQuotesNumber.get(previous) % 2 == 0) [ FD ]
Line_8 $$ CaretModel caretModel = editor.getCaretModel()-->Line_10 $$ int minOffset = editor.getDocument().getLineStartOffset(caretModel.getLogicalPosition().line)[ FD ]
Line_10 $$ int minOffset = editor.getDocument().getLineStartOffset(caretModel.getLogicalPosition().line)-->Line_17 $$ for (int offset = caretModel.getOffset(); offset > minOffset; offset = caretModel.getOffset()) [ FD ]
Line_20 $$ if (QUOTE_SYMBOLS.contains(current)) -->Line_21 $$ if (Character.isWhitespace(previous)) [ CD ]
Line_17 $$ for (int offset = caretModel.getOffset(); offset > minOffset; offset = caretModel.getOffset()) -->Line_18 $$ char previous = text.charAt(offset - 1)[ CD ]
Line_8 $$ CaretModel caretModel = editor.getCaretModel()-->Line_9 $$ int endOffset = caretModel.getOffset()[ FD ]
Line_2 $$ private void deleteToWordStart(Editor editor) -->Line_42 $$ document.deleteString(startOffset, endOffset)[ CD ]
Line_17 $$ for (int offset = caretModel.getOffset(); offset > minOffset; offset = caretModel.getOffset()) -->Line_33 $$ if (QUOTE_SYMBOLS.contains(previous)) [ CD ]
Line_2 $$ private void deleteToWordStart(Editor editor) -->Line_7 $$ CharSequence text = editor.getDocument().getCharsSequence()[ FD ]
Line_2 $$ private void deleteToWordStart(Editor editor) -->Line_41 $$ Document document = editor.getDocument()[ CD ]
Line_12 $$ for (int i : QUOTE_SYMBOLS_ARRAY) -->Line_13 $$ myQuotesNumber.put(i, 0)[ FD ]
Line_2 $$ private void deleteToWordStart(Editor editor) -->Line_7 $$ CharSequence text = editor.getDocument().getCharsSequence()[ CD ]
Line_21 $$ if (Character.isWhitespace(previous)) -->Line_23 $$ if (offset < endOffset - 1 && !Character.isJavaIdentifierPart(text.charAt(offset + 1))) [ CD ]
Line_20 $$ if (QUOTE_SYMBOLS.contains(current)) -->Line_27 $$ if (myQuotesNumber.get(current) % 2 == 0) [ CD ]
Line_17 $$ for (int offset = caretModel.getOffset(); offset > minOffset; offset = caretModel.getOffset()) -->Line_20 $$ if (QUOTE_SYMBOLS.contains(current)) [ CD ]
Line_41 $$ Document document = editor.getDocument()-->Line_42 $$ document.deleteString(startOffset, endOffset)[ FD ]
