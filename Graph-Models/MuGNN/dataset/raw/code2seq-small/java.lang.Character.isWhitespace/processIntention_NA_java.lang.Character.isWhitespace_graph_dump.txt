Line_20 $$ StringBuilder builder = new StringBuilder()-->Line_21 $$ builder.append("for (").append(var).append(" in ").append(qualifier.getText()).append(") [ FD ]
Line_4 $$ final GrClosableBlock block = expression.getClosureArguments()[0]-->Line_22 $$ String text = block.getText()[ FD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_6 $$ final GrParameter[] parameters = parameterList.getParameters()[ CD ]
Line_22 $$ String text = block.getText()-->Line_30 $$ while (index < text.length() && Character.isWhitespace(text.charAt(index))) index++[ FD ]
Line_9 $$ var = parameters[0].getText()-->Line_10 $$ var = StringUtil.replace(var, GrModifier.DEF, "")[ FD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_5 $$ final GrParameterList parameterList = block.getParameterList()[ CD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_48 $$ editor.getCaretModel().moveToOffset(variable.getTextOffset())[ CD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_15 $$ GrExpression qualifier = ((GrReferenceExpression) invokedExpression).getQualifierExpression()[ CD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_36 $$ final GrForClause clause = forStatement.getClause()[ CD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_31 $$ text = text.substring(index, text.length() - 1)[ CD ]
Line_9 $$ var = parameters[0].getText()-->Line_21 $$ builder.append("for (").append(var).append(" in ").append(qualifier.getText()).append(") [ FD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_22 $$ String text = block.getText()[ CD ]
Line_35 $$ GrForStatement forStatement = (GrForStatement) expression.replaceWithStatement(statement)-->Line_38 $$ forStatement = updateReturnStatements(forStatement)[ FD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_43 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)[ FD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_21 $$ builder.append("for (").append(var).append(" in ").append(qualifier.getText()).append(") [ CD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_45 $$ if (doc == null)[ CD ]
Line_26 $$ index = blockArrow.getStartOffsetInParent() + blockArrow.getTextLength()-->Line_31 $$ text = text.substring(index, text.length() - 1)[ FD ]
Line_37 $$ GrVariable variable = clause.getDeclaredVariable()-->Line_39 $$ if (variable == null)[ FD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_33 $$ builder.append("}")[ CD ]
Line_24 $$ int index-->Line_31 $$ text = text.substring(index, text.length() - 1)[ FD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_14 $$ final GrExpression invokedExpression = expression.getInvokedExpression()[ CD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_3 $$ final GrMethodCallExpression expression = (GrMethodCallExpression) element[ CD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_24 $$ int index[ CD ]
Line_7 $$ String var-->Line_9 $$ var = parameters[0].getText()[ FD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_25 $$ if (blockArrow != null) [ CD ]
Line_43 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)-->Line_44 $$ final Document doc = documentManager.getDocument(element.getContainingFile())[ FD ]
Line_28 $$ index = 1-->Line_31 $$ text = text.substring(index, text.length() - 1)[ FD ]
Line_7 $$ String var-->Line_21 $$ builder.append("for (").append(var).append(" in ").append(qualifier.getText()).append(") [ FD ]
Line_26 $$ index = blockArrow.getStartOffsetInParent() + blockArrow.getTextLength()-->Line_30 $$ index++[ FD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_38 $$ forStatement = updateReturnStatements(forStatement)[ CD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_48 $$ editor.getCaretModel().moveToOffset(variable.getTextOffset())[ FD ]
Line_37 $$ GrVariable variable = clause.getDeclaredVariable()-->Line_48 $$ editor.getCaretModel().moveToOffset(variable.getTextOffset())[ FD ]
Line_5 $$ final GrParameterList parameterList = block.getParameterList()-->Line_6 $$ final GrParameter[] parameters = parameterList.getParameters()[ FD ]
Line_9 $$ var = parameters[0].getText()-->Line_12 $$ var = "it"[ FD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_32 $$ builder.append(text)[ CD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_16 $$ final GroovyPsiElementFactory elementFactory = GroovyPsiElementFactory.getInstance(element.getProject())[ FD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_16 $$ final GroovyPsiElementFactory elementFactory = GroovyPsiElementFactory.getInstance(element.getProject())[ CD ]
Line_15 $$ GrExpression qualifier = ((GrReferenceExpression) invokedExpression).getQualifierExpression()-->Line_18 $$ qualifier = elementFactory.createExpressionFromText("this")[ FD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_43 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)[ CD ]
Line_7 $$ String var-->Line_12 $$ var = "it"[ FD ]
Line_15 $$ GrExpression qualifier = ((GrReferenceExpression) invokedExpression).getQualifierExpression()-->Line_17 $$ if (qualifier == null) [ FD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_47 $$ documentManager.doPostponedOperationsAndUnblockDocument(doc)[ CD ]
Line_12 $$ var = "it"-->Line_21 $$ builder.append("for (").append(var).append(" in ").append(qualifier.getText()).append(") [ FD ]
Line_23 $$ final PsiElement blockArrow = block.getArrow()-->Line_25 $$ if (blockArrow != null) [ FD ]
Line_3 $$ final GrMethodCallExpression expression = (GrMethodCallExpression) element-->Line_14 $$ final GrExpression invokedExpression = expression.getInvokedExpression()[ FD ]
Line_25 $$ if (blockArrow != null) -->Line_26 $$ index = blockArrow.getStartOffsetInParent() + blockArrow.getTextLength()[ CD ]
Line_28 $$ index = 1-->Line_30 $$ while (index < text.length() && Character.isWhitespace(text.charAt(index))) index++[ FD ]
Line_3 $$ final GrMethodCallExpression expression = (GrMethodCallExpression) element-->Line_35 $$ GrForStatement forStatement = (GrForStatement) expression.replaceWithStatement(statement)[ FD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_8 $$ if (parameters.length == 1) [ CD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_34 $$ final GrStatement statement = elementFactory.createStatementFromText(builder.toString())[ CD ]
Line_18 $$ qualifier = elementFactory.createExpressionFromText("this")-->Line_21 $$ builder.append("for (").append(var).append(" in ").append(qualifier.getText()).append(") [ FD ]
Line_4 $$ final GrClosableBlock block = expression.getClosureArguments()[0]-->Line_5 $$ final GrParameterList parameterList = block.getParameterList()[ FD ]
Line_10 $$ var = StringUtil.replace(var, GrModifier.DEF, "")-->Line_12 $$ var = "it"[ FD ]
Line_28 $$ index = 1-->Line_30 $$ index++[ FD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_44 $$ final Document doc = documentManager.getDocument(element.getContainingFile())[ CD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_41 $$ if (ApplicationManager.getApplication().isUnitTestMode())[ CD ]
Line_10 $$ var = StringUtil.replace(var, GrModifier.DEF, "")-->Line_21 $$ builder.append("for (").append(var).append(" in ").append(qualifier.getText()).append(") [ FD ]
Line_35 $$ GrForStatement forStatement = (GrForStatement) expression.replaceWithStatement(statement)-->Line_36 $$ final GrForClause clause = forStatement.getClause()[ FD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_39 $$ if (variable == null)[ CD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_49 $$ new VariableInplaceRenamer(variable, editor).performInplaceRename()[ CD ]
Line_8 $$ if (parameters.length == 1) -->Line_9 $$ var = parameters[0].getText()[ CD ]
Line_24 $$ int index-->Line_28 $$ index = 1[ FD ]
Line_7 $$ String var-->Line_10 $$ var = StringUtil.replace(var, GrModifier.DEF, "")[ FD ]
Line_8 $$ if (parameters.length == 1) -->Line_12 $$ var = "it"[ CD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_23 $$ final PsiElement blockArrow = block.getArrow()[ CD ]
Line_23 $$ final PsiElement blockArrow = block.getArrow()-->Line_26 $$ index = blockArrow.getStartOffsetInParent() + blockArrow.getTextLength()[ FD ]
Line_36 $$ final GrForClause clause = forStatement.getClause()-->Line_37 $$ GrVariable variable = clause.getDeclaredVariable()[ FD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_4 $$ final GrClosableBlock block = expression.getClosureArguments()[0][ CD ]
Line_8 $$ if (parameters.length == 1) -->Line_10 $$ var = StringUtil.replace(var, GrModifier.DEF, "")[ CD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_20 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_4 $$ final GrClosableBlock block = expression.getClosureArguments()[0]-->Line_23 $$ final PsiElement blockArrow = block.getArrow()[ FD ]
Line_17 $$ if (qualifier == null) -->Line_18 $$ qualifier = elementFactory.createExpressionFromText("this")[ CD ]
Line_34 $$ final GrStatement statement = elementFactory.createStatementFromText(builder.toString())-->Line_35 $$ GrForStatement forStatement = (GrForStatement) expression.replaceWithStatement(statement)[ FD ]
Line_44 $$ final Document doc = documentManager.getDocument(element.getContainingFile())-->Line_45 $$ if (doc == null)[ FD ]
Line_45 $$ if (doc == null)-->Line_46 $$ return[ CD ]
Line_25 $$ if (blockArrow != null) -->Line_28 $$ index = 1[ CD ]
Line_24 $$ int index-->Line_26 $$ index = blockArrow.getStartOffsetInParent() + blockArrow.getTextLength()[ FD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_30 $$ while (index < text.length() && Character.isWhitespace(text.charAt(index))) index++[ CD ]
Line_24 $$ int index-->Line_30 $$ index++[ FD ]
Line_41 $$ if (ApplicationManager.getApplication().isUnitTestMode())-->Line_42 $$ return[ CD ]
Line_44 $$ final Document doc = documentManager.getDocument(element.getContainingFile())-->Line_47 $$ documentManager.doPostponedOperationsAndUnblockDocument(doc)[ FD ]
Line_15 $$ GrExpression qualifier = ((GrReferenceExpression) invokedExpression).getQualifierExpression()-->Line_21 $$ builder.append("for (").append(var).append(" in ").append(qualifier.getText()).append(") [ FD ]
Line_20 $$ StringBuilder builder = new StringBuilder()-->Line_32 $$ builder.append(text)[ FD ]
Line_22 $$ String text = block.getText()-->Line_32 $$ builder.append(text)[ FD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_17 $$ if (qualifier == null) [ CD ]
Line_31 $$ text = text.substring(index, text.length() - 1)-->Line_32 $$ builder.append(text)[ FD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_37 $$ GrVariable variable = clause.getDeclaredVariable()[ CD ]
Line_24 $$ int index-->Line_30 $$ while (index < text.length() && Character.isWhitespace(text.charAt(index))) index++[ FD ]
Line_26 $$ index = blockArrow.getStartOffsetInParent() + blockArrow.getTextLength()-->Line_30 $$ while (index < text.length() && Character.isWhitespace(text.charAt(index))) index++[ FD ]
Line_22 $$ String text = block.getText()-->Line_31 $$ text = text.substring(index, text.length() - 1)[ FD ]
Line_20 $$ StringBuilder builder = new StringBuilder()-->Line_33 $$ builder.append("}")[ FD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_35 $$ GrForStatement forStatement = (GrForStatement) expression.replaceWithStatement(statement)[ CD ]
Line_43 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)-->Line_47 $$ documentManager.doPostponedOperationsAndUnblockDocument(doc)[ FD ]
Line_20 $$ StringBuilder builder = new StringBuilder()-->Line_34 $$ final GrStatement statement = elementFactory.createStatementFromText(builder.toString())[ FD ]
Line_26 $$ index = blockArrow.getStartOffsetInParent() + blockArrow.getTextLength()-->Line_28 $$ index = 1[ FD ]
Line_16 $$ final GroovyPsiElementFactory elementFactory = GroovyPsiElementFactory.getInstance(element.getProject())-->Line_34 $$ final GrStatement statement = elementFactory.createStatementFromText(builder.toString())[ FD ]
Line_39 $$ if (variable == null)-->Line_40 $$ return[ CD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_7 $$ String var[ CD ]
Line_16 $$ final GroovyPsiElementFactory elementFactory = GroovyPsiElementFactory.getInstance(element.getProject())-->Line_18 $$ qualifier = elementFactory.createExpressionFromText("this")[ FD ]
Line_2 $$ protected void processIntention(@NotNull PsiElement element, Project project, Editor editor) throws IncorrectOperationException -->Line_44 $$ final Document doc = documentManager.getDocument(element.getContainingFile())[ FD ]
Line_3 $$ final GrMethodCallExpression expression = (GrMethodCallExpression) element-->Line_4 $$ final GrClosableBlock block = expression.getClosureArguments()[0][ FD ]
