Line_10 $$ boolean afterFromTable = false-->Line_107 $$ afterFromTable = true[ FD ]
Line_32 $$ quotedIdentifier = true-->Line_26 $$ isOpenQuote = !quotedIdentifier[ FD ]
Line_2 $$ public static String renderWhereStringTemplate(String sqlWhereString, String placeholder, Dialect dialect, SQLFunctionRegistry functionRegistry) -->Line_87 $$ result.append(renderWhereStringTemplate(trimOperands.trimSpec, placeholder, dialect, functionRegistry))[ FD ]
Line_55 $$ StringBuilder builder = new StringBuilder()-->Line_65 $$ builder.setLength(0)[ FD ]
Line_34 $$ if (quotedIdentifier && (dialect.closeQuote() == token.charAt(0))) -->Line_36 $$ isQuoteCharacter = true[ CD ]
Line_98 $$ nextToken = hasMore ? tokens.nextToken() : null-->Line_115 $$ if (isIdentifier(token) && !isFunctionOrKeyword(lcToken, nextToken, dialect, functionRegistry)) [ FD ]
Line_61 $$ if (isQuote) -->Line_69 $$ if (quotedOperand) [ CD ]
Line_113 $$ if (isNamedParameter(token)) -->Line_115 $$ if (isIdentifier(token) && !isFunctionOrKeyword(lcToken, nextToken, dialect, functionRegistry)) [ CD ]
Line_31 $$ isOpenQuote = true-->Line_28 $$ quotedIdentifier = isOpenQuote[ FD ]
Line_20 $$ quoted = !quoted-->Line_23 $$ if (!quoted) [ FD ]
Line_13 $$ while (hasMore) -->Line_14 $$ String token = nextToken[ CD ]
Line_13 $$ while (hasMore) -->Line_129 $$ if (inFromClause && KEYWORDS.contains(lcToken) && !BEFORE_TABLE_KEYWORDS.contains(lcToken)) [ CD ]
Line_4 $$ StringTokenizer tokens = new StringTokenizer(sqlWhereString, symbols, true)-->Line_49 $$ hasMore = tokens.hasMoreTokens()[ FD ]
Line_7 $$ boolean quotedIdentifier = false-->Line_34 $$ if (quotedIdentifier && (dialect.closeQuote() == token.charAt(0))) [ FD ]
Line_30 $$ if (!quotedIdentifier && (dialect.openQuote() == token.charAt(0))) -->Line_34 $$ if (quotedIdentifier && (dialect.closeQuote() == token.charAt(0))) [ CD ]
Line_13 $$ while (hasMore) -->Line_53 $$ if ("trim".equals(lcToken) && "(".equals(nextToken)) [ CD ]
Line_53 $$ if ("trim".equals(lcToken) && "(".equals(nextToken)) -->Line_79 $$ result.append("trim(")[ CD ]
Line_8 $$ boolean beforeTable = false-->Line_119 $$ beforeTable = true[ FD ]
Line_7 $$ boolean quotedIdentifier = false-->Line_35 $$ quotedIdentifier = false[ FD ]
Line_34 $$ if (quotedIdentifier && (dialect.closeQuote() == token.charAt(0))) -->Line_35 $$ quotedIdentifier = false[ CD ]
Line_8 $$ boolean beforeTable = false-->Line_106 $$ beforeTable = false[ FD ]
Line_21 $$ isQuoteCharacter = true-->Line_33 $$ isQuoteCharacter = true[ FD ]
Line_2 $$ public static String renderWhereStringTemplate(String sqlWhereString, String placeholder, Dialect dialect, SQLFunctionRegistry functionRegistry) -->Line_134 $$ return result.toString()[ CD ]
Line_59 $$ while (hasMoreOperands) -->Line_76 $$ hasMoreOperands = tokens.hasMoreTokens() && !")".equals(operandToken)[ CD ]
Line_28 $$ quotedIdentifier = isOpenQuote-->Line_34 $$ if (quotedIdentifier && (dialect.closeQuote() == token.charAt(0))) [ FD ]
Line_27 $$ token = lcToken = isOpenQuote ? Character.toString(dialect.openQuote()) : Character.toString(dialect.closeQuote())-->Line_34 $$ if (quotedIdentifier && (dialect.closeQuote() == token.charAt(0))) [ FD ]
Line_4 $$ StringTokenizer tokens = new StringTokenizer(sqlWhereString, symbols, true)-->Line_16 $$ hasMore = tokens.hasMoreTokens()[ FD ]
Line_53 $$ if ("trim".equals(lcToken) && "(".equals(nextToken)) -->Line_55 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_27 $$ token = lcToken = isOpenQuote ? Character.toString(dialect.openQuote()) : Character.toString(dialect.closeQuote())-->Line_112 $$ result.append(token)[ FD ]
Line_35 $$ quotedIdentifier = false-->Line_26 $$ isOpenQuote = !quotedIdentifier[ FD ]
Line_57 $$ String operandToken = tokens.nextToken()-->Line_73 $$ operands.add(operandToken)[ FD ]
Line_9 $$ boolean inFromClause = false-->Line_120 $$ inFromClause = true[ FD ]
Line_84 $$ if (trimOperands.trimChar.startsWith("'") && trimOperands.trimChar.endsWith("'")) -->Line_87 $$ result.append(renderWhereStringTemplate(trimOperands.trimSpec, placeholder, dialect, functionRegistry))[ CD ]
Line_49 $$ hasMore = tokens.hasMoreTokens()-->Line_97 $$ hasMore = tokens.hasMoreTokens()[ FD ]
Line_106 $$ beforeTable = false-->Line_122 $$ beforeTable = true[ FD ]
Line_31 $$ isOpenQuote = true-->Line_39 $$ isOpenQuote = false[ FD ]
Line_2 $$ public static String renderWhereStringTemplate(String sqlWhereString, String placeholder, Dialect dialect, SQLFunctionRegistry functionRegistry) -->Line_3 $$ String symbols = new StringBuilder().append("=><!+-*/()',|&`").append(StringHelper.WHITESPACE).append(dialect.openQuote()).append(dialect.closeQuote()).toString()[ CD ]
Line_13 $$ while (hasMore) -->Line_17 $$ nextToken = hasMore ? tokens.nextToken() : null[ CD ]
Line_14 $$ String token = nextToken-->Line_103 $$ result.append(token)[ FD ]
Line_110 $$ afterFromTable = false-->Line_104 $$ if (beforeTable) [ FD ]
Line_26 $$ isOpenQuote = !quotedIdentifier-->Line_39 $$ isOpenQuote = false[ FD ]
Line_2 $$ public static String renderWhereStringTemplate(String sqlWhereString, String placeholder, Dialect dialect, SQLFunctionRegistry functionRegistry) -->Line_116 $$ result.append(placeholder).append('.').append(dialect.quote(token))[ FD ]
Line_28 $$ quotedIdentifier = isOpenQuote-->Line_30 $$ if (!quotedIdentifier && (dialect.openQuote() == token.charAt(0))) [ FD ]
Line_69 $$ if (quotedOperand) -->Line_70 $$ builder.append(operandToken)[ CD ]
Line_30 $$ if (!quotedIdentifier && (dialect.openQuote() == token.charAt(0))) -->Line_33 $$ isQuoteCharacter = true[ CD ]
Line_122 $$ beforeTable = true-->Line_102 $$ if (quotedOrWhitespace) [ FD ]
Line_50 $$ nextToken = hasMore ? tokens.nextToken() : null-->Line_53 $$ if ("trim".equals(lcToken) && "(".equals(nextToken)) [ FD ]
Line_23 $$ if (!quoted) -->Line_41 $$ if (isOpenQuote) [ CD ]
Line_9 $$ boolean inFromClause = false-->Line_121 $$ if (inFromClause && ",".equals(lcToken)) [ FD ]
Line_12 $$ String nextToken = hasMore ? tokens.nextToken() : null-->Line_53 $$ if ("trim".equals(lcToken) && "(".equals(nextToken)) [ FD ]
Line_24 $$ boolean isOpenQuote-->Line_39 $$ isOpenQuote = false[ FD ]
Line_71 $$ if (operandToken.length() == 1 && Character.isWhitespace(operandToken.charAt(0))) -->Line_73 $$ operands.add(operandToken)[ CD ]
Line_8 $$ boolean beforeTable = false-->Line_102 $$ if (quotedOrWhitespace) [ FD ]
Line_28 $$ quotedIdentifier = isOpenQuote-->Line_35 $$ quotedIdentifier = false[ FD ]
Line_102 $$ if (quotedOrWhitespace) -->Line_104 $$ if (beforeTable) [ CD ]
Line_47 $$ final String source = renderWhereStringTemplate(extractUntil(tokens, ")"), placeholder, dialect, functionRegistry)-->Line_48 $$ result.append("extract(").append(field).append(" from ").append(source).append(')')[ FD ]
Line_27 $$ token = lcToken = isOpenQuote ? Character.toString(dialect.openQuote()) : Character.toString(dialect.closeQuote())-->Line_45 $$ if ("extract".equals(lcToken) && "(".equals(nextToken)) [ FD ]
Line_53 $$ if ("trim".equals(lcToken) && "(".equals(nextToken)) -->Line_96 $$ result.append(renderWhereStringTemplate(trimOperands.trimSource, placeholder, dialect, functionRegistry)).append(')')[ CD ]
Line_5 $$ StringBuilder result = new StringBuilder()-->Line_48 $$ result.append("extract(").append(field).append(" from ").append(source).append(')')[ FD ]
Line_63 $$ if (!quotedOperand) -->Line_64 $$ operands.add(builder.append('\'').toString())[ CD ]
Line_5 $$ StringBuilder result = new StringBuilder()-->Line_81 $$ result.append(trimOperands.trimSpec).append(' ')[ FD ]
Line_2 $$ public static String renderWhereStringTemplate(String sqlWhereString, String placeholder, Dialect dialect, SQLFunctionRegistry functionRegistry) -->Line_12 $$ String nextToken = hasMore ? tokens.nextToken() : null[ CD ]
Line_4 $$ StringTokenizer tokens = new StringTokenizer(sqlWhereString, symbols, true)-->Line_76 $$ hasMoreOperands = tokens.hasMoreTokens() && !")".equals(operandToken)[ FD ]
Line_25 $$ if ("`".equals(token)) -->Line_29 $$ isQuoteCharacter = true[ CD ]
Line_7 $$ boolean quotedIdentifier = false-->Line_30 $$ if (!quotedIdentifier && (dialect.openQuote() == token.charAt(0))) [ FD ]
Line_27 $$ token = lcToken = isOpenQuote ? Character.toString(dialect.openQuote()) : Character.toString(dialect.closeQuote())-->Line_116 $$ result.append(placeholder).append('.').append(dialect.quote(token))[ FD ]
Line_119 $$ beforeTable = true-->Line_122 $$ beforeTable = true[ FD ]
Line_55 $$ StringBuilder builder = new StringBuilder()-->Line_70 $$ builder.append(operandToken)[ FD ]
Line_125 $$ token = dialect.toBooleanValueString(Boolean.parseBoolean(token))-->Line_112 $$ result.append(token)[ FD ]
Line_102 $$ if (quotedOrWhitespace) -->Line_103 $$ result.append(token)[ CD ]
Line_14 $$ String token = nextToken-->Line_125 $$ token = dialect.toBooleanValueString(Boolean.parseBoolean(token))[ FD ]
Line_14 $$ String token = nextToken-->Line_124 $$ if (isBoolean(token)) [ FD ]
Line_15 $$ String lcToken = token.toLowerCase(Locale.ROOT)-->Line_118 $$ if (BEFORE_TABLE_KEYWORDS.contains(lcToken)) [ FD ]
Line_75 $$ operandToken = tokens.nextToken()-->Line_76 $$ hasMoreOperands = tokens.hasMoreTokens() && !")".equals(operandToken)[ FD ]
Line_69 $$ if (quotedOperand) -->Line_71 $$ if (operandToken.length() == 1 && Character.isWhitespace(operandToken.charAt(0))) [ CD ]
Line_2 $$ public static String renderWhereStringTemplate(String sqlWhereString, String placeholder, Dialect dialect, SQLFunctionRegistry functionRegistry) -->Line_10 $$ boolean afterFromTable = false[ CD ]
Line_106 $$ beforeTable = false-->Line_119 $$ beforeTable = true[ FD ]
Line_27 $$ token = lcToken = isOpenQuote ? Character.toString(dialect.openQuote()) : Character.toString(dialect.closeQuote())-->Line_115 $$ if (isIdentifier(token) && !isFunctionOrKeyword(lcToken, nextToken, dialect, functionRegistry)) [ FD ]
Line_125 $$ token = dialect.toBooleanValueString(Boolean.parseBoolean(token))-->Line_114 $$ result.append(token)[ FD ]
Line_13 $$ while (hasMore) -->Line_18 $$ boolean isQuoteCharacter = false[ CD ]
Line_18 $$ boolean isQuoteCharacter = false-->Line_36 $$ isQuoteCharacter = true[ FD ]
Line_54 $$ List<String> operands = new ArrayList<String>()-->Line_64 $$ operands.add(builder.append('\'').toString())[ FD ]
Line_14 $$ String token = nextToken-->Line_30 $$ if (!quotedIdentifier && (dialect.openQuote() == token.charAt(0))) [ FD ]
Line_12 $$ String nextToken = hasMore ? tokens.nextToken() : null-->Line_45 $$ if ("extract".equals(lcToken) && "(".equals(nextToken)) [ FD ]
Line_106 $$ beforeTable = false-->Line_102 $$ if (quotedOrWhitespace) [ FD ]
Line_18 $$ boolean isQuoteCharacter = false-->Line_33 $$ isQuoteCharacter = true[ FD ]
Line_93 $$ if (trimOperands.trimSpec != null || trimOperands.trimChar != null) -->Line_94 $$ result.append("from ")[ CD ]
Line_104 $$ if (beforeTable) -->Line_105 $$ result.append(token)[ CD ]
Line_21 $$ isQuoteCharacter = true-->Line_36 $$ isQuoteCharacter = true[ FD ]
Line_15 $$ String lcToken = token.toLowerCase(Locale.ROOT)-->Line_53 $$ if ("trim".equals(lcToken) && "(".equals(nextToken)) [ FD ]
Line_17 $$ nextToken = hasMore ? tokens.nextToken() : null-->Line_98 $$ nextToken = hasMore ? tokens.nextToken() : null[ FD ]
Line_33 $$ isQuoteCharacter = true-->Line_36 $$ isQuoteCharacter = true[ FD ]
Line_26 $$ isOpenQuote = !quotedIdentifier-->Line_28 $$ quotedIdentifier = isOpenQuote[ FD ]
Line_53 $$ if ("trim".equals(lcToken) && "(".equals(nextToken)) -->Line_57 $$ String operandToken = tokens.nextToken()[ CD ]
Line_2 $$ public static String renderWhereStringTemplate(String sqlWhereString, String placeholder, Dialect dialect, SQLFunctionRegistry functionRegistry) -->Line_42 $$ result.append(placeholder).append('.')[ FD ]
Line_32 $$ quotedIdentifier = true-->Line_34 $$ if (quotedIdentifier && (dialect.closeQuote() == token.charAt(0))) [ FD ]
Line_27 $$ token = lcToken = isOpenQuote ? Character.toString(dialect.openQuote()) : Character.toString(dialect.closeQuote())-->Line_19 $$ if (!quotedIdentifier && "'".equals(token)) [ FD ]
Line_50 $$ nextToken = hasMore ? tokens.nextToken() : null-->Line_45 $$ if ("extract".equals(lcToken) && "(".equals(nextToken)) [ FD ]
Line_59 $$ while (hasMoreOperands) -->Line_61 $$ if (isQuote) [ CD ]
Line_7 $$ boolean quotedIdentifier = false-->Line_19 $$ if (!quotedIdentifier && "'".equals(token)) [ FD ]
Line_125 $$ token = dialect.toBooleanValueString(Boolean.parseBoolean(token))-->Line_34 $$ if (quotedIdentifier && (dialect.closeQuote() == token.charAt(0))) [ FD ]
Line_21 $$ isQuoteCharacter = true-->Line_29 $$ isQuoteCharacter = true[ FD ]
Line_25 $$ if ("`".equals(token)) -->Line_28 $$ quotedIdentifier = isOpenQuote[ CD ]
Line_5 $$ StringBuilder result = new StringBuilder()-->Line_116 $$ result.append(placeholder).append('.').append(dialect.quote(token))[ FD ]
Line_50 $$ nextToken = hasMore ? tokens.nextToken() : null-->Line_115 $$ if (isIdentifier(token) && !isFunctionOrKeyword(lcToken, nextToken, dialect, functionRegistry)) [ FD ]
Line_27 $$ token = lcToken = isOpenQuote ? Character.toString(dialect.openQuote()) : Character.toString(dialect.closeQuote())-->Line_101 $$ boolean quotedOrWhitespace = quoted || quotedIdentifier || isQuoteCharacter || Character.isWhitespace(token.charAt(0))[ FD ]
Line_25 $$ if ("`".equals(token)) -->Line_26 $$ isOpenQuote = !quotedIdentifier[ CD ]
Line_34 $$ if (quotedIdentifier && (dialect.closeQuote() == token.charAt(0))) -->Line_37 $$ isOpenQuote = false[ CD ]
Line_108 $$ if (afterFromTable) -->Line_112 $$ result.append(token)[ CD ]
Line_108 $$ if (afterFromTable) -->Line_109 $$ if (!"as".equals(lcToken)) [ CD ]
Line_53 $$ if ("trim".equals(lcToken) && "(".equals(nextToken)) -->Line_80 $$ if (trimOperands.trimSpec != null) [ CD ]
Line_75 $$ operandToken = tokens.nextToken()-->Line_60 $$ final boolean isQuote = "'".equals(operandToken)[ FD ]
Line_14 $$ String token = nextToken-->Line_101 $$ boolean quotedOrWhitespace = quoted || quotedIdentifier || isQuoteCharacter || Character.isWhitespace(token.charAt(0))[ FD ]
Line_14 $$ String token = nextToken-->Line_27 $$ token = lcToken = isOpenQuote ? Character.toString(dialect.openQuote()) : Character.toString(dialect.closeQuote())[ FD ]
Line_12 $$ String nextToken = hasMore ? tokens.nextToken() : null-->Line_50 $$ nextToken = hasMore ? tokens.nextToken() : null[ FD ]
Line_12 $$ String nextToken = hasMore ? tokens.nextToken() : null-->Line_98 $$ nextToken = hasMore ? tokens.nextToken() : null[ FD ]
Line_28 $$ quotedIdentifier = isOpenQuote-->Line_19 $$ if (!quotedIdentifier && "'".equals(token)) [ FD ]
Line_115 $$ if (isIdentifier(token) && !isFunctionOrKeyword(lcToken, nextToken, dialect, functionRegistry)) -->Line_116 $$ result.append(placeholder).append('.').append(dialect.quote(token))[ CD ]
Line_32 $$ quotedIdentifier = true-->Line_19 $$ if (!quotedIdentifier && "'".equals(token)) [ FD ]
Line_109 $$ if (!"as".equals(lcToken)) -->Line_110 $$ afterFromTable = false[ CD ]
Line_35 $$ quotedIdentifier = false-->Line_19 $$ if (!quotedIdentifier && "'".equals(token)) [ FD ]
Line_27 $$ token = lcToken = isOpenQuote ? Character.toString(dialect.openQuote()) : Character.toString(dialect.closeQuote())-->Line_25 $$ if ("`".equals(token)) [ FD ]
Line_15 $$ String lcToken = token.toLowerCase(Locale.ROOT)-->Line_27 $$ token = lcToken = isOpenQuote ? Character.toString(dialect.openQuote()) : Character.toString(dialect.closeQuote())[ FD ]
Line_18 $$ boolean isQuoteCharacter = false-->Line_29 $$ isQuoteCharacter = true[ FD ]
Line_59 $$ while (hasMoreOperands) -->Line_75 $$ operandToken = tokens.nextToken()[ CD ]
Line_125 $$ token = dialect.toBooleanValueString(Boolean.parseBoolean(token))-->Line_116 $$ result.append(placeholder).append('.').append(dialect.quote(token))[ FD ]
Line_53 $$ if ("trim".equals(lcToken) && "(".equals(nextToken)) -->Line_59 $$ while (hasMoreOperands) [ CD ]
Line_35 $$ quotedIdentifier = false-->Line_30 $$ if (!quotedIdentifier && (dialect.openQuote() == token.charAt(0))) [ FD ]
Line_56 $$ boolean hasMoreOperands = true-->Line_76 $$ hasMoreOperands = tokens.hasMoreTokens() && !")".equals(operandToken)[ FD ]
Line_57 $$ String operandToken = tokens.nextToken()-->Line_70 $$ builder.append(operandToken)[ FD ]
Line_11 $$ boolean hasMore = tokens.hasMoreTokens()-->Line_97 $$ hasMore = tokens.hasMoreTokens()[ FD ]
Line_19 $$ if (!quotedIdentifier && "'".equals(token)) -->Line_21 $$ isQuoteCharacter = true[ CD ]
Line_124 $$ if (isBoolean(token)) -->Line_125 $$ token = dialect.toBooleanValueString(Boolean.parseBoolean(token))[ CD ]
Line_27 $$ token = lcToken = isOpenQuote ? Character.toString(dialect.openQuote()) : Character.toString(dialect.closeQuote())-->Line_124 $$ if (isBoolean(token)) [ FD ]
Line_17 $$ nextToken = hasMore ? tokens.nextToken() : null-->Line_45 $$ if ("extract".equals(lcToken) && "(".equals(nextToken)) [ FD ]
Line_4 $$ StringTokenizer tokens = new StringTokenizer(sqlWhereString, symbols, true)-->Line_11 $$ boolean hasMore = tokens.hasMoreTokens()[ FD ]
Line_13 $$ while (hasMore) -->Line_19 $$ if (!quotedIdentifier && "'".equals(token)) [ CD ]
Line_5 $$ StringBuilder result = new StringBuilder()-->Line_103 $$ result.append(token)[ FD ]
Line_4 $$ StringTokenizer tokens = new StringTokenizer(sqlWhereString, symbols, true)-->Line_17 $$ nextToken = hasMore ? tokens.nextToken() : null[ FD ]
Line_2 $$ public static String renderWhereStringTemplate(String sqlWhereString, String placeholder, Dialect dialect, SQLFunctionRegistry functionRegistry) -->Line_7 $$ boolean quotedIdentifier = false[ CD ]
Line_125 $$ token = dialect.toBooleanValueString(Boolean.parseBoolean(token))-->Line_103 $$ result.append(token)[ FD ]
Line_75 $$ operandToken = tokens.nextToken()-->Line_70 $$ builder.append(operandToken)[ FD ]
Line_13 $$ while (hasMore) -->Line_23 $$ if (!quoted) [ CD ]
Line_11 $$ boolean hasMore = tokens.hasMoreTokens()-->Line_49 $$ hasMore = tokens.hasMoreTokens()[ FD ]
Line_27 $$ token = lcToken = isOpenQuote ? Character.toString(dialect.openQuote()) : Character.toString(dialect.closeQuote())-->Line_121 $$ if (inFromClause && ",".equals(lcToken)) [ FD ]
Line_125 $$ token = dialect.toBooleanValueString(Boolean.parseBoolean(token))-->Line_105 $$ result.append(token)[ FD ]
Line_27 $$ token = lcToken = isOpenQuote ? Character.toString(dialect.openQuote()) : Character.toString(dialect.closeQuote())-->Line_118 $$ if (BEFORE_TABLE_KEYWORDS.contains(lcToken)) [ FD ]
Line_83 $$ if (trimOperands.trimChar != null) -->Line_89 $$ result.append(' ')[ CD ]
Line_15 $$ String lcToken = token.toLowerCase(Locale.ROOT)-->Line_109 $$ if (!"as".equals(lcToken)) [ FD ]
Line_7 $$ boolean quotedIdentifier = false-->Line_32 $$ quotedIdentifier = true[ FD ]
Line_41 $$ if (isOpenQuote) -->Line_42 $$ result.append(placeholder).append('.')[ CD ]
Line_4 $$ StringTokenizer tokens = new StringTokenizer(sqlWhereString, symbols, true)-->Line_12 $$ String nextToken = hasMore ? tokens.nextToken() : null[ FD ]
Line_27 $$ token = lcToken = isOpenQuote ? Character.toString(dialect.openQuote()) : Character.toString(dialect.closeQuote())-->Line_30 $$ if (!quotedIdentifier && (dialect.openQuote() == token.charAt(0))) [ FD ]
Line_120 $$ inFromClause = true-->Line_131 $$ inFromClause = false[ FD ]
Line_5 $$ StringBuilder result = new StringBuilder()-->Line_42 $$ result.append(placeholder).append('.')[ FD ]
Line_27 $$ token = lcToken = isOpenQuote ? Character.toString(dialect.openQuote()) : Character.toString(dialect.closeQuote())-->Line_127 $$ result.append(token)[ FD ]
Line_2 $$ public static String renderWhereStringTemplate(String sqlWhereString, String placeholder, Dialect dialect, SQLFunctionRegistry functionRegistry) -->Line_96 $$ result.append(renderWhereStringTemplate(trimOperands.trimSource, placeholder, dialect, functionRegistry)).append(')')[ FD ]
Line_4 $$ StringTokenizer tokens = new StringTokenizer(sqlWhereString, symbols, true)-->Line_97 $$ hasMore = tokens.hasMoreTokens()[ FD ]
Line_125 $$ token = dialect.toBooleanValueString(Boolean.parseBoolean(token))-->Line_115 $$ if (isIdentifier(token) && !isFunctionOrKeyword(lcToken, nextToken, dialect, functionRegistry)) [ FD ]
Line_2 $$ public static String renderWhereStringTemplate(String sqlWhereString, String placeholder, Dialect dialect, SQLFunctionRegistry functionRegistry) -->Line_34 $$ if (quotedIdentifier && (dialect.closeQuote() == token.charAt(0))) [ FD ]
Line_7 $$ boolean quotedIdentifier = false-->Line_26 $$ isOpenQuote = !quotedIdentifier[ FD ]
Line_24 $$ boolean isOpenQuote-->Line_28 $$ quotedIdentifier = isOpenQuote[ FD ]
Line_10 $$ boolean afterFromTable = false-->Line_104 $$ if (beforeTable) [ FD ]
Line_15 $$ String lcToken = token.toLowerCase(Locale.ROOT)-->Line_45 $$ if ("extract".equals(lcToken) && "(".equals(nextToken)) [ FD ]
Line_98 $$ nextToken = hasMore ? tokens.nextToken() : null-->Line_45 $$ if ("extract".equals(lcToken) && "(".equals(nextToken)) [ FD ]
Line_17 $$ nextToken = hasMore ? tokens.nextToken() : null-->Line_53 $$ if ("trim".equals(lcToken) && "(".equals(nextToken)) [ FD ]
Line_27 $$ token = lcToken = isOpenQuote ? Character.toString(dialect.openQuote()) : Character.toString(dialect.closeQuote())-->Line_105 $$ result.append(token)[ FD ]
Line_32 $$ quotedIdentifier = true-->Line_35 $$ quotedIdentifier = false[ FD ]
Line_83 $$ if (trimOperands.trimChar != null) -->Line_84 $$ if (trimOperands.trimChar.startsWith("'") && trimOperands.trimChar.endsWith("'")) [ CD ]
Line_2 $$ public static String renderWhereStringTemplate(String sqlWhereString, String placeholder, Dialect dialect, SQLFunctionRegistry functionRegistry) -->Line_125 $$ token = dialect.toBooleanValueString(Boolean.parseBoolean(token))[ FD ]
Line_25 $$ if ("`".equals(token)) -->Line_27 $$ token = lcToken = isOpenQuote ? Character.toString(dialect.openQuote()) : Character.toString(dialect.closeQuote())[ CD ]
Line_5 $$ StringBuilder result = new StringBuilder()-->Line_105 $$ result.append(token)[ FD ]
Line_58 $$ boolean quotedOperand = false-->Line_62 $$ quotedOperand = !quotedOperand[ FD ]
Line_9 $$ boolean inFromClause = false-->Line_131 $$ inFromClause = false[ FD ]
Line_27 $$ token = lcToken = isOpenQuote ? Character.toString(dialect.openQuote()) : Character.toString(dialect.closeQuote())-->Line_114 $$ result.append(token)[ FD ]
Line_4 $$ StringTokenizer tokens = new StringTokenizer(sqlWhereString, symbols, true)-->Line_47 $$ final String source = renderWhereStringTemplate(extractUntil(tokens, ")"), placeholder, dialect, functionRegistry)[ FD ]
Line_125 $$ token = dialect.toBooleanValueString(Boolean.parseBoolean(token))-->Line_19 $$ if (!quotedIdentifier && "'".equals(token)) [ FD ]
Line_5 $$ StringBuilder result = new StringBuilder()-->Line_96 $$ result.append(renderWhereStringTemplate(trimOperands.trimSource, placeholder, dialect, functionRegistry)).append(')')[ FD ]
Line_75 $$ operandToken = tokens.nextToken()-->Line_71 $$ if (operandToken.length() == 1 && Character.isWhitespace(operandToken.charAt(0))) [ FD ]
Line_5 $$ StringBuilder result = new StringBuilder()-->Line_85 $$ result.append(trimOperands.trimChar)[ FD ]
Line_10 $$ boolean afterFromTable = false-->Line_110 $$ afterFromTable = false[ FD ]
Line_45 $$ if ("extract".equals(lcToken) && "(".equals(nextToken)) -->Line_47 $$ final String source = renderWhereStringTemplate(extractUntil(tokens, ")"), placeholder, dialect, functionRegistry)[ CD ]
Line_5 $$ StringBuilder result = new StringBuilder()-->Line_127 $$ result.append(token)[ FD ]
Line_12 $$ String nextToken = hasMore ? tokens.nextToken() : null-->Line_17 $$ nextToken = hasMore ? tokens.nextToken() : null[ FD ]
Line_15 $$ String lcToken = token.toLowerCase(Locale.ROOT)-->Line_115 $$ if (isIdentifier(token) && !isFunctionOrKeyword(lcToken, nextToken, dialect, functionRegistry)) [ FD ]
Line_14 $$ String token = nextToken-->Line_25 $$ if ("`".equals(token)) [ FD ]
Line_53 $$ if ("trim".equals(lcToken) && "(".equals(nextToken)) -->Line_58 $$ boolean quotedOperand = false[ CD ]
Line_31 $$ isOpenQuote = true-->Line_37 $$ isOpenQuote = false[ FD ]
Line_63 $$ if (!quotedOperand) -->Line_67 $$ builder.append('\'')[ CD ]
Line_4 $$ StringTokenizer tokens = new StringTokenizer(sqlWhereString, symbols, true)-->Line_50 $$ nextToken = hasMore ? tokens.nextToken() : null[ FD ]
Line_4 $$ StringTokenizer tokens = new StringTokenizer(sqlWhereString, symbols, true)-->Line_57 $$ String operandToken = tokens.nextToken()[ FD ]
Line_37 $$ isOpenQuote = false-->Line_39 $$ isOpenQuote = false[ FD ]
Line_120 $$ inFromClause = true-->Line_121 $$ if (inFromClause && ",".equals(lcToken)) [ FD ]
Line_53 $$ if ("trim".equals(lcToken) && "(".equals(nextToken)) -->Line_98 $$ nextToken = hasMore ? tokens.nextToken() : null[ CD ]
Line_14 $$ String token = nextToken-->Line_127 $$ result.append(token)[ FD ]
Line_63 $$ if (!quotedOperand) -->Line_65 $$ builder.setLength(0)[ CD ]
Line_2 $$ public static String renderWhereStringTemplate(String sqlWhereString, String placeholder, Dialect dialect, SQLFunctionRegistry functionRegistry) -->Line_4 $$ StringTokenizer tokens = new StringTokenizer(sqlWhereString, symbols, true)[ CD ]
Line_23 $$ if (!quoted) -->Line_25 $$ if ("`".equals(token)) [ CD ]
Line_14 $$ String token = nextToken-->Line_113 $$ if (isNamedParameter(token)) [ FD ]
Line_5 $$ StringBuilder result = new StringBuilder()-->Line_114 $$ result.append(token)[ FD ]
Line_107 $$ afterFromTable = true-->Line_104 $$ if (beforeTable) [ FD ]
Line_108 $$ if (afterFromTable) -->Line_113 $$ if (isNamedParameter(token)) [ CD ]
Line_16 $$ hasMore = tokens.hasMoreTokens()-->Line_49 $$ hasMore = tokens.hasMoreTokens()[ FD ]
Line_53 $$ if ("trim".equals(lcToken) && "(".equals(nextToken)) -->Line_56 $$ boolean hasMoreOperands = true[ CD ]
Line_125 $$ token = dialect.toBooleanValueString(Boolean.parseBoolean(token))-->Line_30 $$ if (!quotedIdentifier && (dialect.openQuote() == token.charAt(0))) [ FD ]
Line_84 $$ if (trimOperands.trimChar.startsWith("'") && trimOperands.trimChar.endsWith("'")) -->Line_85 $$ result.append(trimOperands.trimChar)[ CD ]
Line_14 $$ String token = nextToken-->Line_114 $$ result.append(token)[ FD ]
Line_53 $$ if ("trim".equals(lcToken) && "(".equals(nextToken)) -->Line_97 $$ hasMore = tokens.hasMoreTokens()[ CD ]
Line_91 $$ if (trimOperands.from != null) -->Line_92 $$ result.append(trimOperands.from).append(' ')[ CD ]
Line_14 $$ String token = nextToken-->Line_116 $$ result.append(placeholder).append('.').append(dialect.quote(token))[ FD ]
Line_23 $$ if (!quoted) -->Line_24 $$ boolean isOpenQuote[ CD ]
Line_19 $$ if (!quotedIdentifier && "'".equals(token)) -->Line_20 $$ quoted = !quoted[ CD ]
Line_28 $$ quotedIdentifier = isOpenQuote-->Line_26 $$ isOpenQuote = !quotedIdentifier[ FD ]
Line_55 $$ StringBuilder builder = new StringBuilder()-->Line_64 $$ operands.add(builder.append('\'').toString())[ FD ]
Line_34 $$ if (quotedIdentifier && (dialect.closeQuote() == token.charAt(0))) -->Line_39 $$ isOpenQuote = false[ CD ]
Line_57 $$ String operandToken = tokens.nextToken()-->Line_71 $$ if (operandToken.length() == 1 && Character.isWhitespace(operandToken.charAt(0))) [ FD ]
Line_2 $$ public static String renderWhereStringTemplate(String sqlWhereString, String placeholder, Dialect dialect, SQLFunctionRegistry functionRegistry) -->Line_9 $$ boolean inFromClause = false[ CD ]
Line_91 $$ if (trimOperands.from != null) -->Line_93 $$ if (trimOperands.trimSpec != null || trimOperands.trimChar != null) [ CD ]
Line_37 $$ isOpenQuote = false-->Line_28 $$ quotedIdentifier = isOpenQuote[ FD ]
Line_118 $$ if (BEFORE_TABLE_KEYWORDS.contains(lcToken)) -->Line_119 $$ beforeTable = true[ CD ]
Line_5 $$ StringBuilder result = new StringBuilder()-->Line_87 $$ result.append(renderWhereStringTemplate(trimOperands.trimSpec, placeholder, dialect, functionRegistry))[ FD ]
Line_26 $$ isOpenQuote = !quotedIdentifier-->Line_31 $$ isOpenQuote = true[ FD ]
Line_35 $$ quotedIdentifier = false-->Line_34 $$ if (quotedIdentifier && (dialect.closeQuote() == token.charAt(0))) [ FD ]
Line_15 $$ String lcToken = token.toLowerCase(Locale.ROOT)-->Line_121 $$ if (inFromClause && ",".equals(lcToken)) [ FD ]
Line_125 $$ token = dialect.toBooleanValueString(Boolean.parseBoolean(token))-->Line_124 $$ if (isBoolean(token)) [ FD ]
Line_131 $$ inFromClause = false-->Line_121 $$ if (inFromClause && ",".equals(lcToken)) [ FD ]
Line_5 $$ StringBuilder result = new StringBuilder()-->Line_112 $$ result.append(token)[ FD ]
Line_125 $$ token = dialect.toBooleanValueString(Boolean.parseBoolean(token))-->Line_15 $$ String lcToken = token.toLowerCase(Locale.ROOT)[ FD ]
Line_118 $$ if (BEFORE_TABLE_KEYWORDS.contains(lcToken)) -->Line_120 $$ inFromClause = true[ CD ]
Line_32 $$ quotedIdentifier = true-->Line_30 $$ if (!quotedIdentifier && (dialect.openQuote() == token.charAt(0))) [ FD ]
Line_53 $$ if ("trim".equals(lcToken) && "(".equals(nextToken)) -->Line_83 $$ if (trimOperands.trimChar != null) [ CD ]
Line_2 $$ public static String renderWhereStringTemplate(String sqlWhereString, String placeholder, Dialect dialect, SQLFunctionRegistry functionRegistry) -->Line_30 $$ if (!quotedIdentifier && (dialect.openQuote() == token.charAt(0))) [ FD ]
Line_55 $$ StringBuilder builder = new StringBuilder()-->Line_67 $$ builder.append('\'')[ FD ]
Line_58 $$ boolean quotedOperand = false-->Line_61 $$ if (isQuote) [ FD ]
Line_13 $$ while (hasMore) -->Line_15 $$ String lcToken = token.toLowerCase(Locale.ROOT)[ CD ]
Line_119 $$ beforeTable = true-->Line_102 $$ if (quotedOrWhitespace) [ FD ]
Line_5 $$ StringBuilder result = new StringBuilder()-->Line_94 $$ result.append("from ")[ FD ]
Line_53 $$ if ("trim".equals(lcToken) && "(".equals(nextToken)) -->Line_54 $$ List<String> operands = new ArrayList<String>()[ CD ]
Line_27 $$ token = lcToken = isOpenQuote ? Character.toString(dialect.openQuote()) : Character.toString(dialect.closeQuote())-->Line_129 $$ if (inFromClause && KEYWORDS.contains(lcToken) && !BEFORE_TABLE_KEYWORDS.contains(lcToken)) [ FD ]
Line_12 $$ String nextToken = hasMore ? tokens.nextToken() : null-->Line_115 $$ if (isIdentifier(token) && !isFunctionOrKeyword(lcToken, nextToken, dialect, functionRegistry)) [ FD ]
Line_125 $$ token = dialect.toBooleanValueString(Boolean.parseBoolean(token))-->Line_101 $$ boolean quotedOrWhitespace = quoted || quotedIdentifier || isQuoteCharacter || Character.isWhitespace(token.charAt(0))[ FD ]
Line_27 $$ token = lcToken = isOpenQuote ? Character.toString(dialect.openQuote()) : Character.toString(dialect.closeQuote())-->Line_103 $$ result.append(token)[ FD ]
Line_27 $$ token = lcToken = isOpenQuote ? Character.toString(dialect.openQuote()) : Character.toString(dialect.closeQuote())-->Line_109 $$ if (!"as".equals(lcToken)) [ FD ]
Line_54 $$ List<String> operands = new ArrayList<String>()-->Line_73 $$ operands.add(operandToken)[ FD ]
Line_57 $$ String operandToken = tokens.nextToken()-->Line_60 $$ final boolean isQuote = "'".equals(operandToken)[ FD ]
Line_80 $$ if (trimOperands.trimSpec != null) -->Line_81 $$ result.append(trimOperands.trimSpec).append(' ')[ CD ]
Line_27 $$ token = lcToken = isOpenQuote ? Character.toString(dialect.openQuote()) : Character.toString(dialect.closeQuote())-->Line_15 $$ String lcToken = token.toLowerCase(Locale.ROOT)[ FD ]
Line_8 $$ boolean beforeTable = false-->Line_122 $$ beforeTable = true[ FD ]
Line_61 $$ if (isQuote) -->Line_62 $$ quotedOperand = !quotedOperand[ CD ]
Line_104 $$ if (beforeTable) -->Line_106 $$ beforeTable = false[ CD ]
Line_13 $$ while (hasMore) -->Line_16 $$ hasMore = tokens.hasMoreTokens()[ CD ]
Line_58 $$ boolean quotedOperand = false-->Line_63 $$ if (!quotedOperand) [ FD ]
Line_113 $$ if (isNamedParameter(token)) -->Line_114 $$ result.append(token)[ CD ]
Line_104 $$ if (beforeTable) -->Line_108 $$ if (afterFromTable) [ CD ]
Line_50 $$ nextToken = hasMore ? tokens.nextToken() : null-->Line_98 $$ nextToken = hasMore ? tokens.nextToken() : null[ FD ]
Line_46 $$ final String field = extractUntil(tokens, "from")-->Line_48 $$ result.append("extract(").append(field).append(" from ").append(source).append(')')[ FD ]
Line_27 $$ token = lcToken = isOpenQuote ? Character.toString(dialect.openQuote()) : Character.toString(dialect.closeQuote())-->Line_53 $$ if ("trim".equals(lcToken) && "(".equals(nextToken)) [ FD ]
Line_11 $$ boolean hasMore = tokens.hasMoreTokens()-->Line_16 $$ hasMore = tokens.hasMoreTokens()[ FD ]
Line_2 $$ public static String renderWhereStringTemplate(String sqlWhereString, String placeholder, Dialect dialect, SQLFunctionRegistry functionRegistry) -->Line_3 $$ String symbols = new StringBuilder().append("=><!+-*/()',|&`").append(StringHelper.WHITESPACE).append(dialect.openQuote()).append(dialect.closeQuote()).toString()[ FD ]
Line_125 $$ token = dialect.toBooleanValueString(Boolean.parseBoolean(token))-->Line_113 $$ if (isNamedParameter(token)) [ FD ]
Line_14 $$ String token = nextToken-->Line_115 $$ if (isIdentifier(token) && !isFunctionOrKeyword(lcToken, nextToken, dialect, functionRegistry)) [ FD ]
Line_2 $$ public static String renderWhereStringTemplate(String sqlWhereString, String placeholder, Dialect dialect, SQLFunctionRegistry functionRegistry) -->Line_11 $$ boolean hasMore = tokens.hasMoreTokens()[ CD ]
Line_57 $$ String operandToken = tokens.nextToken()-->Line_76 $$ hasMoreOperands = tokens.hasMoreTokens() && !")".equals(operandToken)[ FD ]
Line_26 $$ isOpenQuote = !quotedIdentifier-->Line_37 $$ isOpenQuote = false[ FD ]
Line_6 $$ boolean quoted = false-->Line_23 $$ if (!quoted) [ FD ]
Line_18 $$ boolean isQuoteCharacter = false-->Line_21 $$ isQuoteCharacter = true[ FD ]
Line_14 $$ String token = nextToken-->Line_112 $$ result.append(token)[ FD ]
Line_39 $$ isOpenQuote = false-->Line_28 $$ quotedIdentifier = isOpenQuote[ FD ]
Line_57 $$ String operandToken = tokens.nextToken()-->Line_75 $$ operandToken = tokens.nextToken()[ FD ]
Line_13 $$ while (hasMore) -->Line_102 $$ if (quotedOrWhitespace) [ CD ]
Line_45 $$ if ("extract".equals(lcToken) && "(".equals(nextToken)) -->Line_50 $$ nextToken = hasMore ? tokens.nextToken() : null[ CD ]
Line_5 $$ StringBuilder result = new StringBuilder()-->Line_89 $$ result.append(' ')[ FD ]
Line_62 $$ quotedOperand = !quotedOperand-->Line_61 $$ if (isQuote) [ FD ]
Line_5 $$ StringBuilder result = new StringBuilder()-->Line_79 $$ result.append("trim(")[ FD ]
Line_30 $$ if (!quotedIdentifier && (dialect.openQuote() == token.charAt(0))) -->Line_32 $$ quotedIdentifier = true[ CD ]
Line_2 $$ public static String renderWhereStringTemplate(String sqlWhereString, String placeholder, Dialect dialect, SQLFunctionRegistry functionRegistry) -->Line_115 $$ if (isIdentifier(token) && !isFunctionOrKeyword(lcToken, nextToken, dialect, functionRegistry)) [ FD ]
Line_7 $$ boolean quotedIdentifier = false-->Line_28 $$ quotedIdentifier = isOpenQuote[ FD ]
Line_75 $$ operandToken = tokens.nextToken()-->Line_73 $$ operands.add(operandToken)[ FD ]
Line_5 $$ StringBuilder result = new StringBuilder()-->Line_134 $$ return result.toString()[ FD ]
Line_4 $$ StringTokenizer tokens = new StringTokenizer(sqlWhereString, symbols, true)-->Line_46 $$ final String field = extractUntil(tokens, "from")[ FD ]
Line_29 $$ isQuoteCharacter = true-->Line_36 $$ isQuoteCharacter = true[ FD ]
Line_17 $$ nextToken = hasMore ? tokens.nextToken() : null-->Line_50 $$ nextToken = hasMore ? tokens.nextToken() : null[ FD ]
Line_27 $$ token = lcToken = isOpenQuote ? Character.toString(dialect.openQuote()) : Character.toString(dialect.closeQuote())-->Line_125 $$ token = dialect.toBooleanValueString(Boolean.parseBoolean(token))[ FD ]
Line_125 $$ token = dialect.toBooleanValueString(Boolean.parseBoolean(token))-->Line_127 $$ result.append(token)[ FD ]
Line_62 $$ quotedOperand = !quotedOperand-->Line_63 $$ if (!quotedOperand) [ FD ]
Line_45 $$ if ("extract".equals(lcToken) && "(".equals(nextToken)) -->Line_46 $$ final String field = extractUntil(tokens, "from")[ CD ]
Line_14 $$ String token = nextToken-->Line_105 $$ result.append(token)[ FD ]
Line_14 $$ String token = nextToken-->Line_34 $$ if (quotedIdentifier && (dialect.closeQuote() == token.charAt(0))) [ FD ]
Line_107 $$ afterFromTable = true-->Line_110 $$ afterFromTable = false[ FD ]
Line_6 $$ boolean quoted = false-->Line_20 $$ quoted = !quoted[ FD ]
Line_2 $$ public static String renderWhereStringTemplate(String sqlWhereString, String placeholder, Dialect dialect, SQLFunctionRegistry functionRegistry) -->Line_47 $$ final String source = renderWhereStringTemplate(extractUntil(tokens, ")"), placeholder, dialect, functionRegistry)[ FD ]
Line_59 $$ while (hasMoreOperands) -->Line_60 $$ final boolean isQuote = "'".equals(operandToken)[ CD ]
Line_2 $$ public static String renderWhereStringTemplate(String sqlWhereString, String placeholder, Dialect dialect, SQLFunctionRegistry functionRegistry) -->Line_5 $$ StringBuilder result = new StringBuilder()[ CD ]
Line_13 $$ while (hasMore) -->Line_45 $$ if ("extract".equals(lcToken) && "(".equals(nextToken)) [ CD ]
Line_53 $$ if ("trim".equals(lcToken) && "(".equals(nextToken)) -->Line_91 $$ if (trimOperands.from != null) [ CD ]
Line_2 $$ public static String renderWhereStringTemplate(String sqlWhereString, String placeholder, Dialect dialect, SQLFunctionRegistry functionRegistry) -->Line_6 $$ boolean quoted = false[ CD ]
Line_24 $$ boolean isOpenQuote-->Line_26 $$ isOpenQuote = !quotedIdentifier[ FD ]
Line_15 $$ String lcToken = token.toLowerCase(Locale.ROOT)-->Line_129 $$ if (inFromClause && KEYWORDS.contains(lcToken) && !BEFORE_TABLE_KEYWORDS.contains(lcToken)) [ FD ]
Line_4 $$ StringTokenizer tokens = new StringTokenizer(sqlWhereString, symbols, true)-->Line_75 $$ operandToken = tokens.nextToken()[ FD ]
Line_121 $$ if (inFromClause && ",".equals(lcToken)) -->Line_122 $$ beforeTable = true[ CD ]
Line_104 $$ if (beforeTable) -->Line_107 $$ afterFromTable = true[ CD ]
Line_118 $$ if (BEFORE_TABLE_KEYWORDS.contains(lcToken)) -->Line_121 $$ if (inFromClause && ",".equals(lcToken)) [ CD ]
Line_98 $$ nextToken = hasMore ? tokens.nextToken() : null-->Line_53 $$ if ("trim".equals(lcToken) && "(".equals(nextToken)) [ FD ]
Line_16 $$ hasMore = tokens.hasMoreTokens()-->Line_97 $$ hasMore = tokens.hasMoreTokens()[ FD ]
Line_17 $$ nextToken = hasMore ? tokens.nextToken() : null-->Line_115 $$ if (isIdentifier(token) && !isFunctionOrKeyword(lcToken, nextToken, dialect, functionRegistry)) [ FD ]
Line_129 $$ if (inFromClause && KEYWORDS.contains(lcToken) && !BEFORE_TABLE_KEYWORDS.contains(lcToken)) -->Line_131 $$ inFromClause = false[ CD ]
Line_24 $$ boolean isOpenQuote-->Line_37 $$ isOpenQuote = false[ FD ]
Line_45 $$ if ("extract".equals(lcToken) && "(".equals(nextToken)) -->Line_49 $$ hasMore = tokens.hasMoreTokens()[ CD ]
Line_5 $$ StringBuilder result = new StringBuilder()-->Line_92 $$ result.append(trimOperands.from).append(' ')[ FD ]
Line_29 $$ isQuoteCharacter = true-->Line_33 $$ isQuoteCharacter = true[ FD ]
Line_2 $$ public static String renderWhereStringTemplate(String sqlWhereString, String placeholder, Dialect dialect, SQLFunctionRegistry functionRegistry) -->Line_27 $$ token = lcToken = isOpenQuote ? Character.toString(dialect.openQuote()) : Character.toString(dialect.closeQuote())[ FD ]
Line_30 $$ if (!quotedIdentifier && (dialect.openQuote() == token.charAt(0))) -->Line_31 $$ isOpenQuote = true[ CD ]
Line_115 $$ if (isIdentifier(token) && !isFunctionOrKeyword(lcToken, nextToken, dialect, functionRegistry)) -->Line_118 $$ if (BEFORE_TABLE_KEYWORDS.contains(lcToken)) [ CD ]
Line_115 $$ if (isIdentifier(token) && !isFunctionOrKeyword(lcToken, nextToken, dialect, functionRegistry)) -->Line_124 $$ if (isBoolean(token)) [ CD ]
Line_61 $$ if (isQuote) -->Line_63 $$ if (!quotedOperand) [ CD ]
Line_24 $$ boolean isOpenQuote-->Line_31 $$ isOpenQuote = true[ FD ]
Line_27 $$ token = lcToken = isOpenQuote ? Character.toString(dialect.openQuote()) : Character.toString(dialect.closeQuote())-->Line_113 $$ if (isNamedParameter(token)) [ FD ]
Line_14 $$ String token = nextToken-->Line_19 $$ if (!quotedIdentifier && "'".equals(token)) [ FD ]
Line_2 $$ public static String renderWhereStringTemplate(String sqlWhereString, String placeholder, Dialect dialect, SQLFunctionRegistry functionRegistry) -->Line_13 $$ while (hasMore) [ CD ]
Line_125 $$ token = dialect.toBooleanValueString(Boolean.parseBoolean(token))-->Line_25 $$ if ("`".equals(token)) [ FD ]
Line_14 $$ String token = nextToken-->Line_15 $$ String lcToken = token.toLowerCase(Locale.ROOT)[ FD ]
Line_25 $$ if ("`".equals(token)) -->Line_30 $$ if (!quotedIdentifier && (dialect.openQuote() == token.charAt(0))) [ CD ]
Line_45 $$ if ("extract".equals(lcToken) && "(".equals(nextToken)) -->Line_48 $$ result.append("extract(").append(field).append(" from ").append(source).append(')')[ CD ]
Line_115 $$ if (isIdentifier(token) && !isFunctionOrKeyword(lcToken, nextToken, dialect, functionRegistry)) -->Line_127 $$ result.append(token)[ CD ]
Line_4 $$ StringTokenizer tokens = new StringTokenizer(sqlWhereString, symbols, true)-->Line_98 $$ nextToken = hasMore ? tokens.nextToken() : null[ FD ]
Line_28 $$ quotedIdentifier = isOpenQuote-->Line_32 $$ quotedIdentifier = true[ FD ]
Line_2 $$ public static String renderWhereStringTemplate(String sqlWhereString, String placeholder, Dialect dialect, SQLFunctionRegistry functionRegistry) -->Line_8 $$ boolean beforeTable = false[ CD ]
