Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_21 $$ SerDeInfo serdeInfo = new SerDeInfo()[ CD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_43 $$ table.setSd(sd)[ CD ]
Line_32 $$ Table table = new Table()-->Line_34 $$ table.setTableName(tableName)[ FD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_27 $$ sd.setCols(columns.build())[ CD ]
Line_11 $$ if (name.equals(SAMPLE_WEIGHT_COLUMN_NAME)) -->Line_14 $$ if (!partitionColumnNames.contains(name)) [ CD ]
Line_7 $$ ImmutableList.Builder<FieldSchema> columns = ImmutableList.builder()-->Line_27 $$ sd.setCols(columns.build())[ FD ]
Line_6 $$ boolean sampled = false-->Line_13 $$ sampled = true[ FD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_25 $$ StorageDescriptor sd = new StorageDescriptor()[ CD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_34 $$ table.setTableName(tableName)[ FD ]
Line_4 $$ List<FieldSchema> partitionColumns = partitionedBy.stream().map(columnHandlesByName::<>get).map( column -> new FieldSchema(column.getName(), column.getHiveType().getHiveTypeName(), null)).collect(toList())-->Line_42 $$ table.setPartitionKeys(partitionColumns)[ FD ]
Line_9 $$ String name = columnHandle.getName()-->Line_14 $$ if (!partitionColumnNames.contains(name)) [ FD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_44 $$ if (retentionDays.isPresent()) [ CD ]
Line_25 $$ StorageDescriptor sd = new StorageDescriptor()-->Line_30 $$ sd.setOutputFormat(hiveStorageFormat.getOutputFormat())[ FD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_28 $$ sd.setSerdeInfo(serdeInfo)[ CD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_30 $$ sd.setOutputFormat(hiveStorageFormat.getOutputFormat())[ FD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_48 $$ table.setPrivileges(new PrincipalPrivilegeSet(ImmutableMap.of(tableOwner, ImmutableList.of(allPrivileges)), ImmutableMap.of(), ImmutableMap.of()))[ CD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_3 $$ Map<String, HiveColumnHandle> columnHandlesByName = Maps.uniqueIndex(columnHandles, HiveColumnHandle::<>getName)[ CD ]
Line_47 $$ PrivilegeGrantInfo allPrivileges = new PrivilegeGrantInfo("all", 0, tableOwner, PrincipalType.USER, true)-->Line_48 $$ table.setPrivileges(new PrincipalPrivilegeSet(ImmutableMap.of(tableOwner, ImmutableList.of(allPrivileges)), ImmutableMap.of(), ImmutableMap.of()))[ FD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_32 $$ Table table = new Table()[ CD ]
Line_21 $$ SerDeInfo serdeInfo = new SerDeInfo()-->Line_23 $$ serdeInfo.setSerializationLib(hiveStorageFormat.getSerDe())[ FD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_26 $$ sd.setLocation(targetPath.toString())[ FD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_29 $$ sd.setInputFormat(hiveStorageFormat.getInputFormat())[ CD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_37 $$ String tableComment = "Created by Presto"[ CD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_22 $$ serdeInfo.setName(tableName)[ FD ]
Line_14 $$ if (!partitionColumnNames.contains(name)) -->Line_16 $$ columns.add(new FieldSchema(name, type, null))[ CD ]
Line_32 $$ Table table = new Table()-->Line_48 $$ table.setPrivileges(new PrincipalPrivilegeSet(ImmutableMap.of(tableOwner, ImmutableList.of(allPrivileges)), ImmutableMap.of(), ImmutableMap.of()))[ FD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_49 $$ metastore.createTable(table)[ CD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_4 $$ List<FieldSchema> partitionColumns = partitionedBy.stream().map(columnHandlesByName::<>get).map( column -> new FieldSchema(column.getName(), column.getHiveType().getHiveTypeName(), null)).collect(toList())[ FD ]
Line_25 $$ StorageDescriptor sd = new StorageDescriptor()-->Line_31 $$ sd.setParameters(ImmutableMap.of())[ FD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_50 $$ return table[ CD ]
Line_21 $$ SerDeInfo serdeInfo = new SerDeInfo()-->Line_22 $$ serdeInfo.setName(tableName)[ FD ]
Line_32 $$ Table table = new Table()-->Line_36 $$ table.setTableType(TableType.MANAGED_TABLE.toString())[ FD ]
Line_14 $$ if (!partitionColumnNames.contains(name)) -->Line_15 $$ verify(!columnHandle.isPartitionKey(), "Column handles are not consistent with partitioned by property")[ CD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_5 $$ Set<String> partitionColumnNames = ImmutableSet.copyOf(partitionedBy)[ CD ]
Line_39 $$ tableComment = "Sampled table created by Presto. Only query this table from Hive if you understand how Presto implements sampling."-->Line_41 $$ table.setParameters(ImmutableMap.of("comment", tableComment))[ FD ]
Line_9 $$ String name = columnHandle.getName()-->Line_11 $$ if (name.equals(SAMPLE_WEIGHT_COLUMN_NAME)) [ FD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_33 $$ table.setDbName(schemaName)[ FD ]
Line_11 $$ if (name.equals(SAMPLE_WEIGHT_COLUMN_NAME)) -->Line_12 $$ columns.add(new FieldSchema(name, type, "Presto sample weight column"))[ CD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_30 $$ sd.setOutputFormat(hiveStorageFormat.getOutputFormat())[ CD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_47 $$ PrivilegeGrantInfo allPrivileges = new PrivilegeGrantInfo("all", 0, tableOwner, PrincipalType.USER, true)[ CD ]
Line_32 $$ Table table = new Table()-->Line_49 $$ metastore.createTable(table)[ FD ]
Line_11 $$ if (name.equals(SAMPLE_WEIGHT_COLUMN_NAME)) -->Line_13 $$ sampled = true[ CD ]
Line_25 $$ StorageDescriptor sd = new StorageDescriptor()-->Line_29 $$ sd.setInputFormat(hiveStorageFormat.getInputFormat())[ FD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_29 $$ sd.setInputFormat(hiveStorageFormat.getInputFormat())[ FD ]
Line_38 $$ if (sampled) -->Line_39 $$ tableComment = "Sampled table created by Presto. Only query this table from Hive if you understand how Presto implements sampling."[ CD ]
Line_32 $$ Table table = new Table()-->Line_35 $$ table.setOwner(tableOwner)[ FD ]
Line_32 $$ Table table = new Table()-->Line_41 $$ table.setParameters(ImmutableMap.of("comment", tableComment))[ FD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_24 $$ serdeInfo.setParameters(ImmutableMap.of())[ CD ]
Line_32 $$ Table table = new Table()-->Line_45 $$ table.setRetention(retentionDays.getAsInt())[ FD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_48 $$ table.setPrivileges(new PrincipalPrivilegeSet(ImmutableMap.of(tableOwner, ImmutableList.of(allPrivileges)), ImmutableMap.of(), ImmutableMap.of()))[ FD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_33 $$ table.setDbName(schemaName)[ CD ]
Line_7 $$ ImmutableList.Builder<FieldSchema> columns = ImmutableList.builder()-->Line_12 $$ columns.add(new FieldSchema(name, type, "Presto sample weight column"))[ FD ]
Line_25 $$ StorageDescriptor sd = new StorageDescriptor()-->Line_27 $$ sd.setCols(columns.build())[ FD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_23 $$ serdeInfo.setSerializationLib(hiveStorageFormat.getSerDe())[ CD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_41 $$ table.setParameters(ImmutableMap.of("comment", tableComment))[ CD ]
Line_21 $$ SerDeInfo serdeInfo = new SerDeInfo()-->Line_24 $$ serdeInfo.setParameters(ImmutableMap.of())[ FD ]
Line_32 $$ Table table = new Table()-->Line_42 $$ table.setPartitionKeys(partitionColumns)[ FD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_35 $$ table.setOwner(tableOwner)[ CD ]
Line_5 $$ Set<String> partitionColumnNames = ImmutableSet.copyOf(partitionedBy)-->Line_14 $$ if (!partitionColumnNames.contains(name)) [ FD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_23 $$ serdeInfo.setSerializationLib(hiveStorageFormat.getSerDe())[ FD ]
Line_25 $$ StorageDescriptor sd = new StorageDescriptor()-->Line_26 $$ sd.setLocation(targetPath.toString())[ FD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_36 $$ table.setTableType(TableType.MANAGED_TABLE.toString())[ CD ]
Line_8 $$ for (HiveColumnHandle columnHandle : columnHandles) -->Line_18 $$ verify(columnHandle.isPartitionKey(), "Column handles are not consistent with partitioned by property")[ FD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_5 $$ Set<String> partitionColumnNames = ImmutableSet.copyOf(partitionedBy)[ FD ]
Line_37 $$ String tableComment = "Created by Presto"-->Line_41 $$ table.setParameters(ImmutableMap.of("comment", tableComment))[ FD ]
Line_25 $$ StorageDescriptor sd = new StorageDescriptor()-->Line_43 $$ table.setSd(sd)[ FD ]
Line_32 $$ Table table = new Table()-->Line_43 $$ table.setSd(sd)[ FD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_44 $$ if (retentionDays.isPresent()) [ FD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_38 $$ if (sampled) [ CD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_3 $$ Map<String, HiveColumnHandle> columnHandlesByName = Maps.uniqueIndex(columnHandles, HiveColumnHandle::<>getName)[ FD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_31 $$ sd.setParameters(ImmutableMap.of())[ CD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_4 $$ List<FieldSchema> partitionColumns = partitionedBy.stream().map(columnHandlesByName::<>get).map( column -> new FieldSchema(column.getName(), column.getHiveType().getHiveTypeName(), null)).collect(toList())[ CD ]
Line_37 $$ String tableComment = "Created by Presto"-->Line_39 $$ tableComment = "Sampled table created by Presto. Only query this table from Hive if you understand how Presto implements sampling."[ FD ]
Line_8 $$ for (HiveColumnHandle columnHandle : columnHandles) -->Line_9 $$ String name = columnHandle.getName()[ FD ]
Line_25 $$ StorageDescriptor sd = new StorageDescriptor()-->Line_28 $$ sd.setSerdeInfo(serdeInfo)[ FD ]
Line_44 $$ if (retentionDays.isPresent()) -->Line_45 $$ table.setRetention(retentionDays.getAsInt())[ CD ]
Line_21 $$ SerDeInfo serdeInfo = new SerDeInfo()-->Line_28 $$ sd.setSerdeInfo(serdeInfo)[ FD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_45 $$ table.setRetention(retentionDays.getAsInt())[ FD ]
Line_8 $$ for (HiveColumnHandle columnHandle : columnHandles) -->Line_10 $$ String type = columnHandle.getHiveType().getHiveTypeName()[ FD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_42 $$ table.setPartitionKeys(partitionColumns)[ CD ]
Line_7 $$ ImmutableList.Builder<FieldSchema> columns = ImmutableList.builder()-->Line_16 $$ columns.add(new FieldSchema(name, type, null))[ FD ]
Line_32 $$ Table table = new Table()-->Line_33 $$ table.setDbName(schemaName)[ FD ]
Line_14 $$ if (!partitionColumnNames.contains(name)) -->Line_18 $$ verify(columnHandle.isPartitionKey(), "Column handles are not consistent with partitioned by property")[ CD ]
Line_8 $$ for (HiveColumnHandle columnHandle : columnHandles) -->Line_15 $$ verify(!columnHandle.isPartitionKey(), "Column handles are not consistent with partitioned by property")[ FD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_35 $$ table.setOwner(tableOwner)[ FD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_22 $$ serdeInfo.setName(tableName)[ CD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_6 $$ boolean sampled = false[ CD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_34 $$ table.setTableName(tableName)[ CD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_7 $$ ImmutableList.Builder<FieldSchema> columns = ImmutableList.builder()[ CD ]
Line_2 $$ private Table createTable(String schemaName, String tableName, String tableOwner, List<HiveColumnHandle> columnHandles, HiveStorageFormat hiveStorageFormat, List<String> partitionedBy, OptionalInt retentionDays, Path targetPath) -->Line_26 $$ sd.setLocation(targetPath.toString())[ CD ]
