Line_7 $$ Path testFileWithExt = scriptsFilePath.resolve("test_script.tst")-->Line_16 $$ Files.delete(testFileWithExt)[ FD ]
Line_2 $$ public void testScriptsWithoutExtensions() throws IOException -->Line_13 $$ assertThat(compiledScript.compiled(), equalTo((Object) "compiled_test_file"))[ CD ]
Line_2 $$ public void testScriptsWithoutExtensions() throws IOException -->Line_8 $$ Streams.copy("test_file_no_ext".getBytes("UTF-8"), Files.newOutputStream(testFileNoExt))[ CD ]
Line_2 $$ public void testScriptsWithoutExtensions() throws IOException -->Line_7 $$ Path testFileWithExt = scriptsFilePath.resolve("test_script.tst")[ CD ]
Line_2 $$ public void testScriptsWithoutExtensions() throws IOException -->Line_10 $$ resourceWatcherService.notifyNow()[ CD ]
Line_3 $$ ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder()-->Line_20 $$ scriptService.compile(new Script("test_script", ScriptType.FILE, "test", null), ScriptContext.Standard.SEARCH, contextAndHeaders, Collections.emptyMap())[ FD ]
Line_2 $$ public void testScriptsWithoutExtensions() throws IOException -->Line_3 $$ ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder()[ CD ]
Line_2 $$ public void testScriptsWithoutExtensions() throws IOException -->Line_9 $$ Streams.copy("test_file".getBytes("UTF-8"), Files.newOutputStream(testFileWithExt))[ CD ]
Line_2 $$ public void testScriptsWithoutExtensions() throws IOException -->Line_4 $$ buildScriptService(Settings.EMPTY)[ CD ]
Line_2 $$ public void testScriptsWithoutExtensions() throws IOException -->Line_17 $$ resourceWatcherService.notifyNow()[ CD ]
Line_6 $$ Path testFileNoExt = scriptsFilePath.resolve("test_no_ext")-->Line_15 $$ Files.delete(testFileNoExt)[ FD ]
Line_3 $$ ContextAndHeaderHolder contextAndHeaders = new ContextAndHeaderHolder()-->Line_12 $$ CompiledScript compiledScript = scriptService.compile(new Script("test_script", ScriptType.FILE, "test", null), ScriptContext.Standard.SEARCH, contextAndHeaders, Collections.emptyMap())[ FD ]
Line_2 $$ public void testScriptsWithoutExtensions() throws IOException -->Line_15 $$ Files.delete(testFileNoExt)[ CD ]
Line_6 $$ Path testFileNoExt = scriptsFilePath.resolve("test_no_ext")-->Line_8 $$ Streams.copy("test_file_no_ext".getBytes("UTF-8"), Files.newOutputStream(testFileNoExt))[ FD ]
Line_7 $$ Path testFileWithExt = scriptsFilePath.resolve("test_script.tst")-->Line_9 $$ Streams.copy("test_file".getBytes("UTF-8"), Files.newOutputStream(testFileWithExt))[ FD ]
Line_12 $$ CompiledScript compiledScript = scriptService.compile(new Script("test_script", ScriptType.FILE, "test", null), ScriptContext.Standard.SEARCH, contextAndHeaders, Collections.emptyMap())-->Line_13 $$ assertThat(compiledScript.compiled(), equalTo((Object) "compiled_test_file"))[ FD ]
Line_2 $$ public void testScriptsWithoutExtensions() throws IOException -->Line_16 $$ Files.delete(testFileWithExt)[ CD ]
Line_2 $$ public void testScriptsWithoutExtensions() throws IOException -->Line_6 $$ Path testFileNoExt = scriptsFilePath.resolve("test_no_ext")[ CD ]
Line_2 $$ public void testScriptsWithoutExtensions() throws IOException -->Line_12 $$ CompiledScript compiledScript = scriptService.compile(new Script("test_script", ScriptType.FILE, "test", null), ScriptContext.Standard.SEARCH, contextAndHeaders, Collections.emptyMap())[ CD ]
