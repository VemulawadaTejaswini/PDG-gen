Line_2 $$ static PidFile create(Path path, boolean deleteOnExit, long pid) throws IOException -->Line_3 $$ Path parent = path.getParent()[ CD ]
Line_3 $$ Path parent = path.getParent()-->Line_5 $$ if (Files.exists(parent) && Files.isDirectory(parent) == false) [ FD ]
Line_8 $$ if (Files.exists(parent) == false) -->Line_9 $$ Files.createDirectories(parent)[ CD ]
Line_2 $$ static PidFile create(Path path, boolean deleteOnExit, long pid) throws IOException -->Line_12 $$ if (Files.exists(path) && Files.isRegularFile(path) == false) [ CD ]
Line_3 $$ Path parent = path.getParent()-->Line_8 $$ if (Files.exists(parent) == false) [ FD ]
Line_2 $$ static PidFile create(Path path, boolean deleteOnExit, long pid) throws IOException -->Line_15 $$ try (OutputStream stream = Files.newOutputStream(path, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING)) [ FD ]
Line_3 $$ Path parent = path.getParent()-->Line_4 $$ if (parent != null) [ FD ]
Line_4 $$ if (parent != null) -->Line_5 $$ if (Files.exists(parent) && Files.isDirectory(parent) == false) [ CD ]
Line_2 $$ static PidFile create(Path path, boolean deleteOnExit, long pid) throws IOException -->Line_19 $$ addShutdownHook(path)[ FD ]
Line_2 $$ static PidFile create(Path path, boolean deleteOnExit, long pid) throws IOException -->Line_18 $$ if (deleteOnExit) [ CD ]
Line_2 $$ static PidFile create(Path path, boolean deleteOnExit, long pid) throws IOException -->Line_4 $$ if (parent != null) [ CD ]
Line_18 $$ if (deleteOnExit) -->Line_19 $$ addShutdownHook(path)[ CD ]
Line_2 $$ static PidFile create(Path path, boolean deleteOnExit, long pid) throws IOException -->Line_16 $$ stream.write(Long.toString(pid).getBytes(StandardCharsets.UTF_8))[ FD ]
Line_3 $$ Path parent = path.getParent()-->Line_9 $$ Files.createDirectories(parent)[ FD ]
Line_2 $$ static PidFile create(Path path, boolean deleteOnExit, long pid) throws IOException -->Line_12 $$ if (Files.exists(path) && Files.isRegularFile(path) == false) [ FD ]
Line_2 $$ static PidFile create(Path path, boolean deleteOnExit, long pid) throws IOException -->Line_3 $$ Path parent = path.getParent()[ FD ]
Line_15 $$ try (OutputStream stream = Files.newOutputStream(path, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING)) -->Line_16 $$ stream.write(Long.toString(pid).getBytes(StandardCharsets.UTF_8))[ FD ]
Line_4 $$ if (parent != null) -->Line_8 $$ if (Files.exists(parent) == false) [ CD ]
Line_2 $$ static PidFile create(Path path, boolean deleteOnExit, long pid) throws IOException -->Line_21 $$ return new PidFile(path, deleteOnExit, pid)[ CD ]
