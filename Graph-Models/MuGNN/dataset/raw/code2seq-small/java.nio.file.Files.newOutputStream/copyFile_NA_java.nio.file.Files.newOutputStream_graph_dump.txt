Line_2 $$ protected void copyFile(SyncFile syncFile, Path filePath, InputStream inputStream, boolean append) throws Exception -->Line_17 $$ Files.copy(inputStream, tempFilePath, StandardCopyOption.REPLACE_EXISTING)[ FD ]
Line_2 $$ protected void copyFile(SyncFile syncFile, Path filePath, InputStream inputStream, boolean append) throws Exception -->Line_20 $$ downloadedFilePathNames.add(filePath.toString())[ FD ]
Line_2 $$ protected void copyFile(SyncFile syncFile, Path filePath, InputStream inputStream, boolean append) throws Exception -->Line_15 $$ IODeltaUtil.patch(tempFilePath, inputStream)[ FD ]
Line_7 $$ Path tempFilePath = FileUtil.getTempFilePath(syncFile)-->Line_15 $$ IODeltaUtil.patch(tempFilePath, inputStream)[ FD ]
Line_9 $$ if (append) -->Line_10 $$ outputStream = Files.newOutputStream(tempFilePath, StandardOpenOption.APPEND)[ CD ]
Line_8 $$ boolean exists = Files.exists(filePath)-->Line_21 $$ if (GetterUtil.getBoolean(syncFile.getLocalExtraSettingValue("restoreEvent"))) [ FD ]
Line_2 $$ protected void copyFile(SyncFile syncFile, Path filePath, InputStream inputStream, boolean append) throws Exception -->Line_35 $$ syncFile.setState(SyncFile.STATE_SYNCED)[ FD ]
Line_2 $$ protected void copyFile(SyncFile syncFile, Path filePath, InputStream inputStream, boolean append) throws Exception -->Line_39 $$ downloadedFilePathNames.remove(filePath.toString())[ FD ]
Line_2 $$ protected void copyFile(SyncFile syncFile, Path filePath, InputStream inputStream, boolean append) throws Exception -->Line_8 $$ boolean exists = Files.exists(filePath)[ FD ]
Line_31 $$ if (MSOfficeFileUtil.isLegacyExcelFile(filePath)) -->Line_32 $$ syncFile.setLocalExtraSetting("lastSavedDate", MSOfficeFileUtil.getLastSavedDate(tempFilePath))[ CD ]
Line_2 $$ protected void copyFile(SyncFile syncFile, Path filePath, InputStream inputStream, boolean append) throws Exception -->Line_11 $$ IOUtils.copyLarge(inputStream, outputStream)[ FD ]
Line_42 $$ if (message.contains("File name too long")) -->Line_43 $$ syncFile.setState(SyncFile.STATE_ERROR)[ CD ]
Line_9 $$ if (append) -->Line_11 $$ IOUtils.copyLarge(inputStream, outputStream)[ CD ]
Line_2 $$ protected void copyFile(SyncFile syncFile, Path filePath, InputStream inputStream, boolean append) throws Exception -->Line_37 $$ IODeltaUtil.checksums(syncFile)[ FD ]
Line_10 $$ outputStream = Files.newOutputStream(tempFilePath, StandardOpenOption.APPEND)-->Line_11 $$ IOUtils.copyLarge(inputStream, outputStream)[ FD ]
Line_2 $$ protected void copyFile(SyncFile syncFile, Path filePath, InputStream inputStream, boolean append) throws Exception -->Line_23 $$ syncFile.setUiEvent(SyncFile.UI_EVENT_RESTORED_REMOTE)[ FD ]
Line_2 $$ protected void copyFile(SyncFile syncFile, Path filePath, InputStream inputStream, boolean append) throws Exception -->Line_32 $$ syncFile.setLocalExtraSetting("lastSavedDate", MSOfficeFileUtil.getLastSavedDate(tempFilePath))[ FD ]
Line_2 $$ protected void copyFile(SyncFile syncFile, Path filePath, InputStream inputStream, boolean append) throws Exception -->Line_29 $$ FileKeyUtil.writeFileKey(tempFilePath, String.valueOf(syncFile.getSyncFileId()), false)[ FD ]
Line_2 $$ protected void copyFile(SyncFile syncFile, Path filePath, InputStream inputStream, boolean append) throws Exception -->Line_22 $$ syncFile.unsetLocalExtraSetting("restoreEvent")[ FD ]
Line_7 $$ Path tempFilePath = FileUtil.getTempFilePath(syncFile)-->Line_17 $$ Files.copy(inputStream, tempFilePath, StandardCopyOption.REPLACE_EXISTING)[ FD ]
Line_5 $$ List<String> downloadedFilePathNames = watcher.getDownloadedFilePathNames()-->Line_39 $$ downloadedFilePathNames.remove(filePath.toString())[ FD ]
Line_13 $$ if (exists && (boolean) getParameterValue("patch")) -->Line_14 $$ Files.copy(filePath, tempFilePath, StandardCopyOption.REPLACE_EXISTING)[ CD ]
Line_2 $$ protected void copyFile(SyncFile syncFile, Path filePath, InputStream inputStream, boolean append) throws Exception -->Line_25 $$ syncFile.setUiEvent(SyncFile.UI_EVENT_DOWNLOADED_UPDATE)[ FD ]
Line_7 $$ Path tempFilePath = FileUtil.getTempFilePath(syncFile)-->Line_29 $$ FileKeyUtil.writeFileKey(tempFilePath, String.valueOf(syncFile.getSyncFileId()), false)[ FD ]
Line_2 $$ protected void copyFile(SyncFile syncFile, Path filePath, InputStream inputStream, boolean append) throws Exception -->Line_3 $$ OutputStream outputStream = null[ CD ]
Line_9 $$ if (append) -->Line_13 $$ if (exists && (boolean) getParameterValue("patch")) [ CD ]
Line_7 $$ Path tempFilePath = FileUtil.getTempFilePath(syncFile)-->Line_34 $$ Files.move(tempFilePath, filePath, StandardCopyOption.ATOMIC_MOVE, StandardCopyOption.REPLACE_EXISTING)[ FD ]
Line_40 $$ String message = fse.getMessage()-->Line_42 $$ if (message.contains("File name too long")) [ FD ]
Line_2 $$ protected void copyFile(SyncFile syncFile, Path filePath, InputStream inputStream, boolean append) throws Exception -->Line_27 $$ syncFile.setUiEvent(SyncFile.UI_EVENT_DOWNLOADED_NEW)[ FD ]
Line_8 $$ boolean exists = Files.exists(filePath)-->Line_13 $$ if (exists && (boolean) getParameterValue("patch")) [ FD ]
Line_3 $$ OutputStream outputStream = null-->Line_11 $$ IOUtils.copyLarge(inputStream, outputStream)[ FD ]
Line_3 $$ OutputStream outputStream = null-->Line_10 $$ outputStream = Files.newOutputStream(tempFilePath, StandardOpenOption.APPEND)[ FD ]
Line_2 $$ protected void copyFile(SyncFile syncFile, Path filePath, InputStream inputStream, boolean append) throws Exception -->Line_43 $$ syncFile.setState(SyncFile.STATE_ERROR)[ FD ]
Line_2 $$ protected void copyFile(SyncFile syncFile, Path filePath, InputStream inputStream, boolean append) throws Exception -->Line_30 $$ FileUtil.setModifiedTime(tempFilePath, syncFile.getModifiedTime())[ FD ]
Line_2 $$ protected void copyFile(SyncFile syncFile, Path filePath, InputStream inputStream, boolean append) throws Exception -->Line_44 $$ syncFile.setUiEvent(SyncFile.UI_EVENT_FILE_NAME_TOO_LONG)[ FD ]
Line_24 $$ if (exists) -->Line_27 $$ syncFile.setUiEvent(SyncFile.UI_EVENT_DOWNLOADED_NEW)[ CD ]
Line_2 $$ protected void copyFile(SyncFile syncFile, Path filePath, InputStream inputStream, boolean append) throws Exception -->Line_4 $$ Watcher watcher = WatcherRegistry.getWatcher(getSyncAccountId())[ CD ]
Line_2 $$ protected void copyFile(SyncFile syncFile, Path filePath, InputStream inputStream, boolean append) throws Exception -->Line_31 $$ if (MSOfficeFileUtil.isLegacyExcelFile(filePath)) [ FD ]
Line_2 $$ protected void copyFile(SyncFile syncFile, Path filePath, InputStream inputStream, boolean append) throws Exception -->Line_7 $$ Path tempFilePath = FileUtil.getTempFilePath(syncFile)[ FD ]
Line_3 $$ OutputStream outputStream = null-->Line_48 $$ StreamUtil.cleanUp(outputStream)[ FD ]
Line_7 $$ Path tempFilePath = FileUtil.getTempFilePath(syncFile)-->Line_32 $$ syncFile.setLocalExtraSetting("lastSavedDate", MSOfficeFileUtil.getLastSavedDate(tempFilePath))[ FD ]
Line_4 $$ Watcher watcher = WatcherRegistry.getWatcher(getSyncAccountId())-->Line_5 $$ List<String> downloadedFilePathNames = watcher.getDownloadedFilePathNames()[ FD ]
Line_2 $$ protected void copyFile(SyncFile syncFile, Path filePath, InputStream inputStream, boolean append) throws Exception -->Line_21 $$ if (GetterUtil.getBoolean(syncFile.getLocalExtraSettingValue("restoreEvent"))) [ FD ]
Line_40 $$ String message = fse.getMessage()-->Line_41 $$ _logger.error(message, fse)[ FD ]
Line_42 $$ if (message.contains("File name too long")) -->Line_45 $$ SyncFileService.update(syncFile)[ CD ]
Line_10 $$ outputStream = Files.newOutputStream(tempFilePath, StandardOpenOption.APPEND)-->Line_48 $$ StreamUtil.cleanUp(outputStream)[ FD ]
Line_7 $$ Path tempFilePath = FileUtil.getTempFilePath(syncFile)-->Line_30 $$ FileUtil.setModifiedTime(tempFilePath, syncFile.getModifiedTime())[ FD ]
Line_2 $$ protected void copyFile(SyncFile syncFile, Path filePath, InputStream inputStream, boolean append) throws Exception -->Line_36 $$ SyncFileService.update(syncFile)[ FD ]
Line_21 $$ if (GetterUtil.getBoolean(syncFile.getLocalExtraSettingValue("restoreEvent"))) -->Line_22 $$ syncFile.unsetLocalExtraSetting("restoreEvent")[ CD ]
Line_42 $$ if (message.contains("File name too long")) -->Line_44 $$ syncFile.setUiEvent(SyncFile.UI_EVENT_FILE_NAME_TOO_LONG)[ CD ]
Line_5 $$ List<String> downloadedFilePathNames = watcher.getDownloadedFilePathNames()-->Line_20 $$ downloadedFilePathNames.add(filePath.toString())[ FD ]
Line_2 $$ protected void copyFile(SyncFile syncFile, Path filePath, InputStream inputStream, boolean append) throws Exception -->Line_34 $$ Files.move(tempFilePath, filePath, StandardCopyOption.ATOMIC_MOVE, StandardCopyOption.REPLACE_EXISTING)[ FD ]
Line_24 $$ if (exists) -->Line_25 $$ syncFile.setUiEvent(SyncFile.UI_EVENT_DOWNLOADED_UPDATE)[ CD ]
Line_2 $$ protected void copyFile(SyncFile syncFile, Path filePath, InputStream inputStream, boolean append) throws Exception -->Line_5 $$ List<String> downloadedFilePathNames = watcher.getDownloadedFilePathNames()[ CD ]
Line_2 $$ protected void copyFile(SyncFile syncFile, Path filePath, InputStream inputStream, boolean append) throws Exception -->Line_45 $$ SyncFileService.update(syncFile)[ FD ]
Line_7 $$ Path tempFilePath = FileUtil.getTempFilePath(syncFile)-->Line_10 $$ outputStream = Files.newOutputStream(tempFilePath, StandardOpenOption.APPEND)[ FD ]
Line_13 $$ if (exists && (boolean) getParameterValue("patch")) -->Line_15 $$ IODeltaUtil.patch(tempFilePath, inputStream)[ CD ]
Line_13 $$ if (exists && (boolean) getParameterValue("patch")) -->Line_17 $$ Files.copy(inputStream, tempFilePath, StandardCopyOption.REPLACE_EXISTING)[ CD ]
Line_2 $$ protected void copyFile(SyncFile syncFile, Path filePath, InputStream inputStream, boolean append) throws Exception -->Line_14 $$ Files.copy(filePath, tempFilePath, StandardCopyOption.REPLACE_EXISTING)[ FD ]
Line_7 $$ Path tempFilePath = FileUtil.getTempFilePath(syncFile)-->Line_14 $$ Files.copy(filePath, tempFilePath, StandardCopyOption.REPLACE_EXISTING)[ FD ]
Line_21 $$ if (GetterUtil.getBoolean(syncFile.getLocalExtraSettingValue("restoreEvent"))) -->Line_23 $$ syncFile.setUiEvent(SyncFile.UI_EVENT_RESTORED_REMOTE)[ CD ]
Line_21 $$ if (GetterUtil.getBoolean(syncFile.getLocalExtraSettingValue("restoreEvent"))) -->Line_24 $$ if (exists) [ CD ]
