Line_12 $$ EditorMouseEvent event = new EditorMouseEvent(EditorImpl.this, e, getMouseEventArea(e))-->Line_13 $$ invokePopupIfNeeded(event)[ FD ]
Line_2 $$ private void runMouseReleasedCommand(@NotNull final MouseEvent e) -->Line_14 $$ if (event.isConsumed()) [ CD ]
Line_24 $$ if (myCommandProcessor != null) -->Line_30 $$ myCommandProcessor.executeCommand(myProject, runnable, "", DocCommandGroupId.noneGroupId(getDocument()), UndoConfirmationPolicy.DEFAULT, getDocument())[ CD ]
Line_17 $$ for (EditorMouseListener listener : myMouseListeners) -->Line_18 $$ listener.mouseReleased(event)[ FD ]
Line_24 $$ if (myCommandProcessor != null) -->Line_32 $$ processMouseReleased(e)[ CD ]
Line_2 $$ private void runMouseReleasedCommand(@NotNull final MouseEvent e) -->Line_5 $$ if (!mySelectionTweaked) [ CD ]
Line_2 $$ private void runMouseReleasedCommand(@NotNull final MouseEvent e) -->Line_13 $$ invokePopupIfNeeded(event)[ CD ]
Line_8 $$ if (e.isConsumed()) -->Line_9 $$ return[ CD ]
Line_12 $$ EditorMouseEvent event = new EditorMouseEvent(EditorImpl.this, e, getMouseEventArea(e))-->Line_18 $$ listener.mouseReleased(event)[ FD ]
Line_12 $$ EditorMouseEvent event = new EditorMouseEvent(EditorImpl.this, e, getMouseEventArea(e))-->Line_19 $$ if (event.isConsumed()) [ FD ]
Line_5 $$ if (!mySelectionTweaked) -->Line_6 $$ tweakSelectionIfNecessary(e)[ CD ]
Line_2 $$ private void runMouseReleasedCommand(@NotNull final MouseEvent e) -->Line_12 $$ EditorMouseEvent event = new EditorMouseEvent(EditorImpl.this, e, getMouseEventArea(e))[ FD ]
Line_2 $$ private void runMouseReleasedCommand(@NotNull final MouseEvent e) -->Line_11 $$ myScrollingTimer.stop()[ CD ]
Line_25 $$ Runnable runnable = new Runnable() -->Line_30 $$ myCommandProcessor.executeCommand(myProject, runnable, "", DocCommandGroupId.noneGroupId(getDocument()), UndoConfirmationPolicy.DEFAULT, getDocument())[ FD ]
Line_2 $$ private void runMouseReleasedCommand(@NotNull final MouseEvent e) -->Line_24 $$ if (myCommandProcessor != null) [ CD ]
Line_2 $$ private void runMouseReleasedCommand(@NotNull final MouseEvent e) -->Line_27 $$ processMouseReleased(e)[ FD ]
Line_25 $$ Runnable runnable = new Runnable() -->Line_27 $$ processMouseReleased(e)[ CD ]
Line_12 $$ EditorMouseEvent event = new EditorMouseEvent(EditorImpl.this, e, getMouseEventArea(e))-->Line_14 $$ if (event.isConsumed()) [ FD ]
Line_2 $$ private void runMouseReleasedCommand(@NotNull final MouseEvent e) -->Line_8 $$ if (e.isConsumed()) [ CD ]
Line_2 $$ private void runMouseReleasedCommand(@NotNull final MouseEvent e) -->Line_6 $$ tweakSelectionIfNecessary(e)[ FD ]
Line_2 $$ private void runMouseReleasedCommand(@NotNull final MouseEvent e) -->Line_8 $$ if (e.isConsumed()) [ FD ]
Line_2 $$ private void runMouseReleasedCommand(@NotNull final MouseEvent e) -->Line_12 $$ EditorMouseEvent event = new EditorMouseEvent(EditorImpl.this, e, getMouseEventArea(e))[ CD ]
Line_24 $$ if (myCommandProcessor != null) -->Line_25 $$ Runnable runnable = new Runnable() [ CD ]
Line_2 $$ private void runMouseReleasedCommand(@NotNull final MouseEvent e) -->Line_20 $$ e.consume()[ FD ]
Line_2 $$ private void runMouseReleasedCommand(@NotNull final MouseEvent e) -->Line_4 $$ myDragOnGutterSelectionStartLine = -1[ CD ]
Line_19 $$ if (event.isConsumed()) -->Line_20 $$ e.consume()[ CD ]
Line_19 $$ if (event.isConsumed()) -->Line_21 $$ return[ CD ]
Line_14 $$ if (event.isConsumed()) -->Line_15 $$ return[ CD ]
Line_2 $$ private void runMouseReleasedCommand(@NotNull final MouseEvent e) -->Line_32 $$ processMouseReleased(e)[ FD ]
