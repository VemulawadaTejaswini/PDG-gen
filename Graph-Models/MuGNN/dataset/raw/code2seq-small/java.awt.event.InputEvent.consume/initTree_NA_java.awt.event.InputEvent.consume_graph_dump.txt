Line_45 $$ boolean[] isCopied = new boolean[1]-->Line_46 $$ if (copyPasteManager.getElements(isCopied) != null && !isCopied[0]) [ FD ]
Line_34 $$ if (KeyEvent.VK_ENTER == e.getKeyCode()) -->Line_41 $$ if (KeyEvent.VK_ESCAPE == e.getKeyCode()) [ CD ]
Line_2 $$ private void initTree() -->Line_9 $$ EditSourceOnDoubleClickHandler.install(myTree)[ CD ]
Line_2 $$ private void initTree() -->Line_4 $$ UIUtil.setLineStyleAngled(myTree)[ CD ]
Line_35 $$ final DefaultMutableTreeNode selectedNode = ((ProjectViewTree) myTree).getSelectedNode()-->Line_36 $$ if (selectedNode != null && !selectedNode.isLeaf()) [ FD ]
Line_32 $$ myTree.addKeyListener(new KeyAdapter() -->Line_41 $$ if (KeyEvent.VK_ESCAPE == e.getKeyCode()) [ FD ]
Line_41 $$ if (KeyEvent.VK_ESCAPE == e.getKeyCode()) -->Line_45 $$ boolean[] isCopied = new boolean[1][ CD ]
Line_12 $$ myTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener() -->Line_14 $$ fireTreeChangeListener()[ CD ]
Line_12 $$ myTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener() -->Line_42 $$ if (e.isConsumed())[ FD ]
Line_41 $$ if (KeyEvent.VK_ESCAPE == e.getKeyCode()) -->Line_44 $$ PsiCopyPasteManager copyPasteManager = PsiCopyPasteManager.getInstance()[ CD ]
Line_44 $$ PsiCopyPasteManager copyPasteManager = PsiCopyPasteManager.getInstance()-->Line_47 $$ copyPasteManager.clear()[ FD ]
Line_17 $$ myTree.getModel().addTreeModelListener(new TreeModelListener() -->Line_34 $$ if (KeyEvent.VK_ENTER == e.getKeyCode()) [ FD ]
Line_32 $$ myTree.addKeyListener(new KeyAdapter() -->Line_48 $$ e.consume()[ FD ]
Line_32 $$ myTree.addKeyListener(new KeyAdapter() -->Line_42 $$ if (e.isConsumed())[ FD ]
Line_44 $$ PsiCopyPasteManager copyPasteManager = PsiCopyPasteManager.getInstance()-->Line_46 $$ if (copyPasteManager.getElements(isCopied) != null && !isCopied[0]) [ FD ]
Line_12 $$ myTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener() -->Line_41 $$ if (KeyEvent.VK_ESCAPE == e.getKeyCode()) [ FD ]
Line_46 $$ if (copyPasteManager.getElements(isCopied) != null && !isCopied[0]) -->Line_47 $$ copyPasteManager.clear()[ CD ]
Line_17 $$ myTree.getModel().addTreeModelListener(new TreeModelListener() -->Line_48 $$ e.consume()[ FD ]
Line_32 $$ myTree.addKeyListener(new KeyAdapter() -->Line_34 $$ if (KeyEvent.VK_ENTER == e.getKeyCode()) [ CD ]
Line_41 $$ if (KeyEvent.VK_ESCAPE == e.getKeyCode()) -->Line_46 $$ if (copyPasteManager.getElements(isCopied) != null && !isCopied[0]) [ CD ]
Line_2 $$ private void initTree() -->Line_53 $$ CustomizationUtil.installPopupHandler(myTree, IdeActions.GROUP_PROJECT_VIEW_POPUP, ActionPlaces.PROJECT_VIEW_POPUP)[ CD ]
Line_2 $$ private void initTree() -->Line_7 $$ myTree.expandPath(new TreePath(myTree.getModel().getRoot()))[ CD ]
Line_17 $$ myTree.getModel().addTreeModelListener(new TreeModelListener() -->Line_42 $$ if (e.isConsumed())[ FD ]
Line_2 $$ private void initTree() -->Line_17 $$ myTree.getModel().addTreeModelListener(new TreeModelListener() [ CD ]
Line_2 $$ private void initTree() -->Line_32 $$ myTree.addKeyListener(new KeyAdapter() [ CD ]
Line_34 $$ if (KeyEvent.VK_ENTER == e.getKeyCode()) -->Line_36 $$ if (selectedNode != null && !selectedNode.isLeaf()) [ CD ]
Line_12 $$ myTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener() -->Line_48 $$ e.consume()[ FD ]
Line_42 $$ if (e.isConsumed())-->Line_43 $$ return[ CD ]
Line_17 $$ myTree.getModel().addTreeModelListener(new TreeModelListener() -->Line_22 $$ fireTreeChangeListener()[ CD ]
Line_17 $$ myTree.getModel().addTreeModelListener(new TreeModelListener() -->Line_25 $$ fireTreeChangeListener()[ CD ]
Line_2 $$ private void initTree() -->Line_11 $$ TreeUtil.installActions(myTree)[ CD ]
Line_17 $$ myTree.getModel().addTreeModelListener(new TreeModelListener() -->Line_28 $$ fireTreeChangeListener()[ CD ]
Line_2 $$ private void initTree() -->Line_6 $$ myTree.setShowsRootHandles(true)[ CD ]
Line_46 $$ if (copyPasteManager.getElements(isCopied) != null && !isCopied[0]) -->Line_48 $$ e.consume()[ CD ]
Line_12 $$ myTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener() -->Line_34 $$ if (KeyEvent.VK_ENTER == e.getKeyCode()) [ FD ]
Line_2 $$ private void initTree() -->Line_5 $$ myTree.setRootVisible(false)[ CD ]
Line_34 $$ if (KeyEvent.VK_ENTER == e.getKeyCode()) -->Line_40 $$ OpenSourceUtil.openSourcesFrom(dataContext, false)[ CD ]
Line_36 $$ if (selectedNode != null && !selectedNode.isLeaf()) -->Line_37 $$ return[ CD ]
Line_2 $$ private void initTree() -->Line_10 $$ ToolTipManager.sharedInstance().registerComponent(myTree)[ CD ]
Line_32 $$ myTree.addKeyListener(new KeyAdapter() -->Line_34 $$ if (KeyEvent.VK_ENTER == e.getKeyCode()) [ FD ]
Line_2 $$ private void initTree() -->Line_12 $$ myTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener() [ CD ]
Line_41 $$ if (KeyEvent.VK_ESCAPE == e.getKeyCode()) -->Line_42 $$ if (e.isConsumed())[ CD ]
Line_34 $$ if (KeyEvent.VK_ENTER == e.getKeyCode()) -->Line_39 $$ DataContext dataContext = DataManager.getInstance().getDataContext(myTree)[ CD ]
Line_17 $$ myTree.getModel().addTreeModelListener(new TreeModelListener() -->Line_41 $$ if (KeyEvent.VK_ESCAPE == e.getKeyCode()) [ FD ]
Line_2 $$ private void initTree() -->Line_3 $$ myTree.getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION)[ CD ]
Line_39 $$ DataContext dataContext = DataManager.getInstance().getDataContext(myTree)-->Line_40 $$ OpenSourceUtil.openSourcesFrom(dataContext, false)[ FD ]
Line_2 $$ private void initTree() -->Line_8 $$ myTree.setSelectionPath(new TreePath(myTree.getModel().getRoot()))[ CD ]
Line_34 $$ if (KeyEvent.VK_ENTER == e.getKeyCode()) -->Line_35 $$ final DefaultMutableTreeNode selectedNode = ((ProjectViewTree) myTree).getSelectedNode()[ CD ]
Line_17 $$ myTree.getModel().addTreeModelListener(new TreeModelListener() -->Line_19 $$ fireTreeChangeListener()[ CD ]
