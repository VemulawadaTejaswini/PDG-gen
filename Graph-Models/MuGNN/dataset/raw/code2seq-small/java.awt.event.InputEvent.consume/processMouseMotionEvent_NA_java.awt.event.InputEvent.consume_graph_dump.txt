Line_2 $$ protected void processMouseMotionEvent(MouseEvent e) -->Line_41 $$ e.consume()[ FD ]
Line_14 $$ if (myIsFirst) -->Line_15 $$ setFirstSize(Math.min(size - myLastSize - getMinSize(myInnerComponent) - getDividerWidth() * visibleDividersCount(), Math.max(getMinSize(myFirstComponent), myPoint.y)))[ CD ]
Line_2 $$ protected void processMouseMotionEvent(MouseEvent e) -->Line_3 $$ super.processMouseMotionEvent(e)[ CD ]
Line_6 $$ if (MouseEvent.MOUSE_DRAGGED == e.getID() && myWasPressedOnMe) -->Line_30 $$ if (MouseEvent.MOUSE_MOVED == e.getID()) [ CD ]
Line_2 $$ protected void processMouseMotionEvent(MouseEvent e) -->Line_32 $$ if (isInside(e.getPoint())) [ FD ]
Line_12 $$ if (getOrientation()) -->Line_21 $$ if (size > 0 || myDividerZone > 0) [ CD ]
Line_31 $$ if (myGlassPane != null) -->Line_32 $$ if (isInside(e.getPoint())) [ CD ]
Line_32 $$ if (isInside(e.getPoint())) -->Line_33 $$ myGlassPane.setCursor(getResizeCursor(), myListener)[ CD ]
Line_2 $$ protected void processMouseMotionEvent(MouseEvent e) -->Line_30 $$ if (MouseEvent.MOUSE_MOVED == e.getID()) [ FD ]
Line_13 $$ if (size > 0 || myDividerZone > 0) -->Line_14 $$ if (myIsFirst) [ CD ]
Line_2 $$ protected void processMouseMotionEvent(MouseEvent e) -->Line_4 $$ if (!isShowing())[ CD ]
Line_6 $$ if (MouseEvent.MOUSE_DRAGGED == e.getID() && myWasPressedOnMe) -->Line_29 $$ ThreeComponentsSplitter.this.doLayout()[ CD ]
Line_30 $$ if (MouseEvent.MOUSE_MOVED == e.getID()) -->Line_31 $$ if (myGlassPane != null) [ CD ]
Line_4 $$ if (!isShowing())-->Line_5 $$ return[ CD ]
Line_2 $$ protected void processMouseMotionEvent(MouseEvent e) -->Line_40 $$ if (myWasPressedOnMe) [ CD ]
Line_40 $$ if (myWasPressedOnMe) -->Line_41 $$ e.consume()[ CD ]
Line_32 $$ if (isInside(e.getPoint())) -->Line_36 $$ myGlassPane.setCursor(null, myListener)[ CD ]
Line_6 $$ if (MouseEvent.MOUSE_DRAGGED == e.getID() && myWasPressedOnMe) -->Line_11 $$ final int size = getOrientation() ? ThreeComponentsSplitter.this.getHeight() : ThreeComponentsSplitter.this.getWidth()[ CD ]
Line_22 $$ if (myIsFirst) -->Line_25 $$ setLastSize(Math.min(size - myFirstSize - getMinSize(myInnerComponent) - getDividerWidth() * visibleDividersCount(), Math.max(getMinSize(myLastComponent), size - myPoint.x - getDividerWidth())))[ CD ]
Line_6 $$ if (MouseEvent.MOUSE_DRAGGED == e.getID() && myWasPressedOnMe) -->Line_9 $$ myGlassPane.setCursor(getResizeCursor(), myListener)[ CD ]
Line_12 $$ if (getOrientation()) -->Line_13 $$ if (size > 0 || myDividerZone > 0) [ CD ]
Line_6 $$ if (MouseEvent.MOUSE_DRAGGED == e.getID() && myWasPressedOnMe) -->Line_10 $$ myPoint = SwingUtilities.convertPoint(this, e.getPoint(), ThreeComponentsSplitter.this)[ CD ]
Line_6 $$ if (MouseEvent.MOUSE_DRAGGED == e.getID() && myWasPressedOnMe) -->Line_12 $$ if (getOrientation()) [ CD ]
Line_2 $$ protected void processMouseMotionEvent(MouseEvent e) -->Line_6 $$ if (MouseEvent.MOUSE_DRAGGED == e.getID() && myWasPressedOnMe) [ CD ]
Line_14 $$ if (myIsFirst) -->Line_17 $$ setLastSize(Math.min(size - myFirstSize - getMinSize(myInnerComponent) - getDividerWidth() * visibleDividersCount(), Math.max(getMinSize(myLastComponent), size - myPoint.y - getDividerWidth())))[ CD ]
Line_2 $$ protected void processMouseMotionEvent(MouseEvent e) -->Line_6 $$ if (MouseEvent.MOUSE_DRAGGED == e.getID() && myWasPressedOnMe) [ FD ]
Line_21 $$ if (size > 0 || myDividerZone > 0) -->Line_22 $$ if (myIsFirst) [ CD ]
Line_22 $$ if (myIsFirst) -->Line_23 $$ setFirstSize(Math.min(size - myLastSize - getMinSize(myInnerComponent) - getDividerWidth() * visibleDividersCount(), Math.max(getMinSize(myFirstComponent), myPoint.x)))[ CD ]
Line_6 $$ if (MouseEvent.MOUSE_DRAGGED == e.getID() && myWasPressedOnMe) -->Line_8 $$ setCursor(getResizeCursor())[ CD ]
Line_2 $$ protected void processMouseMotionEvent(MouseEvent e) -->Line_34 $$ e.consume()[ FD ]
Line_2 $$ protected void processMouseMotionEvent(MouseEvent e) -->Line_10 $$ myPoint = SwingUtilities.convertPoint(this, e.getPoint(), ThreeComponentsSplitter.this)[ FD ]
Line_32 $$ if (isInside(e.getPoint())) -->Line_34 $$ e.consume()[ CD ]
Line_2 $$ protected void processMouseMotionEvent(MouseEvent e) -->Line_3 $$ super.processMouseMotionEvent(e)[ FD ]
