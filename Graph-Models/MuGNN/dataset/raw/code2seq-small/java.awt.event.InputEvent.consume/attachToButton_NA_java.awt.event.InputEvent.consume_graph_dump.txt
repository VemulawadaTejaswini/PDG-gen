Line_70 $$ DefaultMutableTreeNode parent-->Line_75 $$ parent = root[ FD ]
Line_14 $$ projectTree.setCellRenderer(new NodeRenderer() -->Line_16 $$ if (value instanceof DefaultMutableTreeNode) [ FD ]
Line_17 $$ MavenProject mavenProject = (MavenProject) ((DefaultMutableTreeNode) value).getUserObject()-->Line_18 $$ value = projectsNameMap.get(mavenProject)[ FD ]
Line_49 $$ projectTree.addKeyListener(new KeyAdapter() -->Line_51 $$ if (e.getKeyCode() == KeyEvent.VK_ENTER) [ FD ]
Line_12 $$ final Tree projectTree = new Tree(root)-->Line_14 $$ projectTree.setCellRenderer(new NodeRenderer() [ FD ]
Line_70 $$ DefaultMutableTreeNode parent-->Line_73 $$ parent = projectsToNode.get(aggregator)[ FD ]
Line_3 $$ button.addActionListener(new ActionListener() -->Line_64 $$ Map<MavenProject, DefaultMutableTreeNode> projectsToNode = new HashMap<MavenProject, DefaultMutableTreeNode>()[ CD ]
Line_62 $$ MavenProject[] projects = projectList.toArray(new MavenProject[projectList.size()])-->Line_63 $$ Arrays.sort(projects, new MavenProjectNamer.MavenProjectComparator())[ FD ]
Line_3 $$ button.addActionListener(new ActionListener() -->Line_63 $$ Arrays.sort(projects, new MavenProjectNamer.MavenProjectComparator())[ CD ]
Line_3 $$ button.addActionListener(new ActionListener() -->Line_58 $$ popupRef.set(popup)[ CD ]
Line_18 $$ value = projectsNameMap.get(mavenProject)-->Line_21 $$ super.customizeCellRenderer(tree, value, selected, expanded, leaf, row, hasFocus)[ FD ]
Line_14 $$ projectTree.setCellRenderer(new NodeRenderer() -->Line_16 $$ if (value instanceof DefaultMutableTreeNode) [ CD ]
Line_51 $$ if (e.getKeyCode() == KeyEvent.VK_ENTER) -->Line_52 $$ clickCallBack.run()[ CD ]
Line_64 $$ Map<MavenProject, DefaultMutableTreeNode> projectsToNode = new HashMap<MavenProject, DefaultMutableTreeNode>()-->Line_73 $$ parent = projectsToNode.get(aggregator)[ FD ]
Line_17 $$ MavenProject mavenProject = (MavenProject) ((DefaultMutableTreeNode) value).getUserObject()-->Line_71 $$ MavenProject aggregator = projectsManager.findAggregator(mavenProject)[ FD ]
Line_6 $$ if (projectList.isEmpty()) -->Line_7 $$ JBPopupFactory.getInstance().createMessage("Maven projects not found").showUnderneathOf(button)[ CD ]
Line_3 $$ button.addActionListener(new ActionListener() -->Line_13 $$ projectTree.setRootVisible(false)[ CD ]
Line_29 $$ Object userObject = ((DefaultMutableTreeNode) lastPathComponent).getUserObject()-->Line_30 $$ return projectsNameMap.get(userObject)[ FD ]
Line_2 $$ public static void attachToButton(@NotNull final MavenProjectsManager projectsManager, @NotNull final JButton button, @NotNull final Consumer<MavenProject> callback) -->Line_71 $$ MavenProject aggregator = projectsManager.findAggregator(mavenProject)[ FD ]
Line_11 $$ final Map<MavenProject, String> projectsNameMap = MavenProjectNamer.generateNameMap(projectList)-->Line_18 $$ value = projectsNameMap.get(mavenProject)[ FD ]
Line_24 $$ new TreeSpeedSearch(projectTree, new Convertor<TreePath, String>() -->Line_26 $$ Object lastPathComponent = o.getLastPathComponent()[ CD ]
Line_6 $$ if (projectList.isEmpty()) -->Line_8 $$ return[ CD ]
Line_3 $$ button.addActionListener(new ActionListener() -->Line_79 $$ return root[ CD ]
Line_42 $$ Object object = ((DefaultMutableTreeNode) lastPathComponent).getUserObject()-->Line_43 $$ if (object == null)[ FD ]
Line_34 $$ final Runnable clickCallBack = new Runnable() -->Line_36 $$ TreePath path = projectTree.getSelectionPath()[ CD ]
Line_34 $$ final Runnable clickCallBack = new Runnable() -->Line_43 $$ if (object == null)[ CD ]
Line_65 $$ for (MavenProject mavenProject : projects) -->Line_66 $$ projectsToNode.put(mavenProject, new DefaultMutableTreeNode(mavenProject))[ FD ]
Line_73 $$ parent = projectsToNode.get(aggregator)-->Line_77 $$ parent.add(projectsToNode.get(mavenProject))[ FD ]
Line_10 $$ DefaultMutableTreeNode root = buildTree(projectList)-->Line_75 $$ parent = root[ FD ]
Line_36 $$ TreePath path = projectTree.getSelectionPath()-->Line_39 $$ Object lastPathComponent = path.getLastPathComponent()[ FD ]
Line_64 $$ Map<MavenProject, DefaultMutableTreeNode> projectsToNode = new HashMap<MavenProject, DefaultMutableTreeNode>()-->Line_77 $$ parent.add(projectsToNode.get(mavenProject))[ FD ]
Line_5 $$ List<MavenProject> projectList = projectsManager.getProjects()-->Line_11 $$ final Map<MavenProject, String> projectsNameMap = MavenProjectNamer.generateNameMap(projectList)[ FD ]
Line_24 $$ new TreeSpeedSearch(projectTree, new Convertor<TreePath, String>() -->Line_29 $$ Object userObject = ((DefaultMutableTreeNode) lastPathComponent).getUserObject()[ CD ]
Line_3 $$ button.addActionListener(new ActionListener() -->Line_59 $$ popup.showUnderneathOf(button)[ CD ]
Line_3 $$ button.addActionListener(new ActionListener() -->Line_62 $$ MavenProject[] projects = projectList.toArray(new MavenProject[projectList.size()])[ CD ]
Line_24 $$ new TreeSpeedSearch(projectTree, new Convertor<TreePath, String>() -->Line_30 $$ return projectsNameMap.get(userObject)[ CD ]
Line_37 $$ if (path == null)-->Line_38 $$ return[ CD ]
Line_75 $$ parent = root-->Line_77 $$ parent.add(projectsToNode.get(mavenProject))[ FD ]
Line_17 $$ MavenProject mavenProject = (MavenProject) ((DefaultMutableTreeNode) value).getUserObject()-->Line_77 $$ parent.add(projectsToNode.get(mavenProject))[ FD ]
Line_14 $$ projectTree.setCellRenderer(new NodeRenderer() -->Line_21 $$ super.customizeCellRenderer(tree, value, selected, expanded, leaf, row, hasFocus)[ FD ]
Line_3 $$ button.addActionListener(new ActionListener() -->Line_57 $$ JBPopup popup = new PopupChooserBuilder(projectTree).setTitle("Select maven project").setResizable(true).setItemChoosenCallback(clickCallBack).setAutoselectOnMouseMove(true).setCloseOnEnter(false).createPopup()[ CD ]
Line_17 $$ MavenProject mavenProject = (MavenProject) ((DefaultMutableTreeNode) value).getUserObject()-->Line_66 $$ projectsToNode.put(mavenProject, new DefaultMutableTreeNode(mavenProject))[ FD ]
Line_3 $$ button.addActionListener(new ActionListener() -->Line_53 $$ e.consume()[ FD ]
Line_36 $$ TreePath path = projectTree.getSelectionPath()-->Line_37 $$ if (path == null)[ FD ]
Line_43 $$ if (object == null)-->Line_44 $$ return[ CD ]
Line_3 $$ button.addActionListener(new ActionListener() -->Line_12 $$ final Tree projectTree = new Tree(root)[ CD ]
Line_3 $$ button.addActionListener(new ActionListener() -->Line_49 $$ projectTree.addKeyListener(new KeyAdapter() [ CD ]
Line_49 $$ projectTree.addKeyListener(new KeyAdapter() -->Line_53 $$ e.consume()[ FD ]
Line_65 $$ for (MavenProject mavenProject : projects) -->Line_71 $$ MavenProject aggregator = projectsManager.findAggregator(mavenProject)[ FD ]
Line_12 $$ final Tree projectTree = new Tree(root)-->Line_36 $$ TreePath path = projectTree.getSelectionPath()[ FD ]
Line_72 $$ if (aggregator != null) -->Line_73 $$ parent = projectsToNode.get(aggregator)[ CD ]
Line_2 $$ public static void attachToButton(@NotNull final MavenProjectsManager projectsManager, @NotNull final JButton button, @NotNull final Consumer<MavenProject> callback) -->Line_5 $$ List<MavenProject> projectList = projectsManager.getProjects()[ FD ]
Line_14 $$ projectTree.setCellRenderer(new NodeRenderer() -->Line_18 $$ value = projectsNameMap.get(mavenProject)[ FD ]
Line_12 $$ final Tree projectTree = new Tree(root)-->Line_13 $$ projectTree.setRootVisible(false)[ FD ]
Line_34 $$ final Runnable clickCallBack = new Runnable() -->Line_45 $$ callback.consume((MavenProject) object)[ CD ]
Line_3 $$ button.addActionListener(new ActionListener() -->Line_62 $$ MavenProject[] projects = projectList.toArray(new MavenProject[projectList.size()])[ FD ]
Line_16 $$ if (value instanceof DefaultMutableTreeNode) -->Line_18 $$ value = projectsNameMap.get(mavenProject)[ CD ]
Line_12 $$ final Tree projectTree = new Tree(root)-->Line_49 $$ projectTree.addKeyListener(new KeyAdapter() [ FD ]
Line_40 $$ if (!(lastPathComponent instanceof DefaultMutableTreeNode))-->Line_41 $$ return[ CD ]
Line_3 $$ button.addActionListener(new ActionListener() -->Line_10 $$ DefaultMutableTreeNode root = buildTree(projectList)[ CD ]
Line_3 $$ button.addActionListener(new ActionListener() -->Line_68 $$ DefaultMutableTreeNode root = new DefaultMutableTreeNode()[ CD ]
Line_34 $$ final Runnable clickCallBack = new Runnable() -->Line_39 $$ Object lastPathComponent = path.getLastPathComponent()[ CD ]
Line_70 $$ DefaultMutableTreeNode parent-->Line_77 $$ parent.add(projectsToNode.get(mavenProject))[ FD ]
Line_49 $$ projectTree.addKeyListener(new KeyAdapter() -->Line_51 $$ if (e.getKeyCode() == KeyEvent.VK_ENTER) [ CD ]
Line_2 $$ public static void attachToButton(@NotNull final MavenProjectsManager projectsManager, @NotNull final JButton button, @NotNull final Consumer<MavenProject> callback) -->Line_59 $$ popup.showUnderneathOf(button)[ FD ]
Line_16 $$ if (value instanceof DefaultMutableTreeNode) -->Line_19 $$ setIcon(MavenIcons.MavenProject)[ CD ]
Line_14 $$ projectTree.setCellRenderer(new NodeRenderer() -->Line_21 $$ super.customizeCellRenderer(tree, value, selected, expanded, leaf, row, hasFocus)[ CD ]
Line_27 $$ if (!(lastPathComponent instanceof DefaultMutableTreeNode))-->Line_28 $$ return null[ CD ]
Line_3 $$ button.addActionListener(new ActionListener() -->Line_5 $$ List<MavenProject> projectList = projectsManager.getProjects()[ CD ]
Line_51 $$ if (e.getKeyCode() == KeyEvent.VK_ENTER) -->Line_53 $$ e.consume()[ CD ]
Line_2 $$ public static void attachToButton(@NotNull final MavenProjectsManager projectsManager, @NotNull final JButton button, @NotNull final Consumer<MavenProject> callback) -->Line_7 $$ JBPopupFactory.getInstance().createMessage("Maven projects not found").showUnderneathOf(button)[ FD ]
Line_34 $$ final Runnable clickCallBack = new Runnable() -->Line_46 $$ popupRef.get().closeOk(null)[ CD ]
Line_2 $$ public static void attachToButton(@NotNull final MavenProjectsManager projectsManager, @NotNull final JButton button, @NotNull final Consumer<MavenProject> callback) -->Line_3 $$ button.addActionListener(new ActionListener() [ FD ]
Line_24 $$ new TreeSpeedSearch(projectTree, new Convertor<TreePath, String>() -->Line_26 $$ Object lastPathComponent = o.getLastPathComponent()[ FD ]
Line_73 $$ parent = projectsToNode.get(aggregator)-->Line_75 $$ parent = root[ FD ]
Line_65 $$ for (MavenProject mavenProject : projects) -->Line_77 $$ parent.add(projectsToNode.get(mavenProject))[ FD ]
Line_3 $$ button.addActionListener(new ActionListener() -->Line_6 $$ if (projectList.isEmpty()) [ CD ]
Line_5 $$ List<MavenProject> projectList = projectsManager.getProjects()-->Line_6 $$ if (projectList.isEmpty()) [ FD ]
Line_34 $$ final Runnable clickCallBack = new Runnable() -->Line_40 $$ if (!(lastPathComponent instanceof DefaultMutableTreeNode))[ CD ]
Line_2 $$ public static void attachToButton(@NotNull final MavenProjectsManager projectsManager, @NotNull final JButton button, @NotNull final Consumer<MavenProject> callback) -->Line_45 $$ callback.consume((MavenProject) object)[ FD ]
Line_72 $$ if (aggregator != null) -->Line_75 $$ parent = root[ CD ]
Line_71 $$ MavenProject aggregator = projectsManager.findAggregator(mavenProject)-->Line_72 $$ if (aggregator != null) [ FD ]
Line_3 $$ button.addActionListener(new ActionListener() -->Line_51 $$ if (e.getKeyCode() == KeyEvent.VK_ENTER) [ FD ]
Line_5 $$ List<MavenProject> projectList = projectsManager.getProjects()-->Line_62 $$ MavenProject[] projects = projectList.toArray(new MavenProject[projectList.size()])[ FD ]
Line_5 $$ List<MavenProject> projectList = projectsManager.getProjects()-->Line_10 $$ DefaultMutableTreeNode root = buildTree(projectList)[ FD ]
Line_24 $$ new TreeSpeedSearch(projectTree, new Convertor<TreePath, String>() -->Line_27 $$ if (!(lastPathComponent instanceof DefaultMutableTreeNode))[ CD ]
Line_68 $$ DefaultMutableTreeNode root = new DefaultMutableTreeNode()-->Line_75 $$ parent = root[ FD ]
Line_64 $$ Map<MavenProject, DefaultMutableTreeNode> projectsToNode = new HashMap<MavenProject, DefaultMutableTreeNode>()-->Line_66 $$ projectsToNode.put(mavenProject, new DefaultMutableTreeNode(mavenProject))[ FD ]
Line_16 $$ if (value instanceof DefaultMutableTreeNode) -->Line_17 $$ MavenProject mavenProject = (MavenProject) ((DefaultMutableTreeNode) value).getUserObject()[ CD ]
Line_3 $$ button.addActionListener(new ActionListener() -->Line_14 $$ projectTree.setCellRenderer(new NodeRenderer() [ CD ]
Line_11 $$ final Map<MavenProject, String> projectsNameMap = MavenProjectNamer.generateNameMap(projectList)-->Line_30 $$ return projectsNameMap.get(userObject)[ FD ]
Line_2 $$ public static void attachToButton(@NotNull final MavenProjectsManager projectsManager, @NotNull final JButton button, @NotNull final Consumer<MavenProject> callback) -->Line_3 $$ button.addActionListener(new ActionListener() [ CD ]
Line_3 $$ button.addActionListener(new ActionListener() -->Line_11 $$ final Map<MavenProject, String> projectsNameMap = MavenProjectNamer.generateNameMap(projectList)[ CD ]
Line_34 $$ final Runnable clickCallBack = new Runnable() -->Line_37 $$ if (path == null)[ CD ]
Line_34 $$ final Runnable clickCallBack = new Runnable() -->Line_42 $$ Object object = ((DefaultMutableTreeNode) lastPathComponent).getUserObject()[ CD ]
Line_71 $$ MavenProject aggregator = projectsManager.findAggregator(mavenProject)-->Line_73 $$ parent = projectsToNode.get(aggregator)[ FD ]
