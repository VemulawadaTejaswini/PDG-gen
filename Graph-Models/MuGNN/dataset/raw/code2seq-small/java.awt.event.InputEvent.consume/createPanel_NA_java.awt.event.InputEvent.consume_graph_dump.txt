Line_3 $$ final CommanderPanel panel = new CommanderPanel(myProject, true, false)-->Line_23 $$ updateToolWindowTitle(panel)[ FD ]
Line_2 $$ private CommanderPanel createPanel() -->Line_3 $$ final CommanderPanel panel = new CommanderPanel(myProject, true, false)[ CD ]
Line_6 $$ if (KeyEvent.VK_ESCAPE == e.getKeyCode()) -->Line_11 $$ if (copyPasteManager.getElements(isCopied) != null && !isCopied[0]) [ CD ]
Line_9 $$ final PsiCopyPasteManager copyPasteManager = PsiCopyPasteManager.getInstance()-->Line_12 $$ copyPasteManager.clear()[ FD ]
Line_2 $$ private CommanderPanel createPanel() -->Line_28 $$ list.getSelectionModel().addListSelectionListener(mySelectionListener)[ CD ]
Line_2 $$ private CommanderPanel createPanel() -->Line_4 $$ panel.getList().addKeyListener(new KeyAdapter() [ CD ]
Line_7 $$ if (e.isConsumed())-->Line_8 $$ return[ CD ]
Line_2 $$ private CommanderPanel createPanel() -->Line_18 $$ final ProjectAbstractTreeStructureBase treeStructure = createProjectTreeStructure()[ CD ]
Line_9 $$ final PsiCopyPasteManager copyPasteManager = PsiCopyPasteManager.getInstance()-->Line_11 $$ if (copyPasteManager.getElements(isCopied) != null && !isCopied[0]) [ FD ]
Line_3 $$ final CommanderPanel panel = new CommanderPanel(myProject, true, false)-->Line_20 $$ panel.setProjectTreeStructure(treeStructure)[ FD ]
Line_2 $$ private CommanderPanel createPanel() -->Line_29 $$ list.getModel().addListDataListener(myListDataListener)[ CD ]
Line_6 $$ if (KeyEvent.VK_ESCAPE == e.getKeyCode()) -->Line_10 $$ final boolean[] isCopied = new boolean[1][ CD ]
Line_2 $$ private CommanderPanel createPanel() -->Line_20 $$ panel.setProjectTreeStructure(treeStructure)[ CD ]
Line_2 $$ private CommanderPanel createPanel() -->Line_37 $$ return panel[ CD ]
Line_3 $$ final CommanderPanel panel = new CommanderPanel(myProject, true, false)-->Line_4 $$ panel.getList().addKeyListener(new KeyAdapter() [ FD ]
Line_4 $$ panel.getList().addKeyListener(new KeyAdapter() -->Line_6 $$ if (KeyEvent.VK_ESCAPE == e.getKeyCode()) [ FD ]
Line_30 $$ Disposer.register(this, new Disposable() -->Line_33 $$ list.getSelectionModel().removeListSelectionListener(mySelectionListener)[ CD ]
Line_11 $$ if (copyPasteManager.getElements(isCopied) != null && !isCopied[0]) -->Line_12 $$ copyPasteManager.clear()[ CD ]
Line_4 $$ panel.getList().addKeyListener(new KeyAdapter() -->Line_13 $$ e.consume()[ FD ]
Line_4 $$ panel.getList().addKeyListener(new KeyAdapter() -->Line_6 $$ if (KeyEvent.VK_ESCAPE == e.getKeyCode()) [ CD ]
Line_11 $$ if (copyPasteManager.getElements(isCopied) != null && !isCopied[0]) -->Line_13 $$ e.consume()[ CD ]
Line_30 $$ Disposer.register(this, new Disposable() -->Line_34 $$ list.getModel().removeListDataListener(myListDataListener)[ CD ]
Line_6 $$ if (KeyEvent.VK_ESCAPE == e.getKeyCode()) -->Line_7 $$ if (e.isConsumed())[ CD ]
Line_2 $$ private CommanderPanel createPanel() -->Line_27 $$ list.addFocusListener(focusListener)[ CD ]
Line_2 $$ private CommanderPanel createPanel() -->Line_19 $$ panel.setBuilder(new ProjectListBuilder(myProject, panel, treeStructure, AlphaComparator.INSTANCE, true))[ CD ]
Line_21 $$ final FocusAdapter focusListener = new FocusAdapter() -->Line_23 $$ updateToolWindowTitle(panel)[ CD ]
Line_6 $$ if (KeyEvent.VK_ESCAPE == e.getKeyCode()) -->Line_9 $$ final PsiCopyPasteManager copyPasteManager = PsiCopyPasteManager.getInstance()[ CD ]
Line_10 $$ final boolean[] isCopied = new boolean[1]-->Line_11 $$ if (copyPasteManager.getElements(isCopied) != null && !isCopied[0]) [ FD ]
Line_4 $$ panel.getList().addKeyListener(new KeyAdapter() -->Line_7 $$ if (e.isConsumed())[ FD ]
Line_3 $$ final CommanderPanel panel = new CommanderPanel(myProject, true, false)-->Line_26 $$ final JList list = panel.getList()[ FD ]
Line_30 $$ Disposer.register(this, new Disposable() -->Line_32 $$ list.removeFocusListener(focusListener)[ CD ]
Line_3 $$ final CommanderPanel panel = new CommanderPanel(myProject, true, false)-->Line_19 $$ panel.setBuilder(new ProjectListBuilder(myProject, panel, treeStructure, AlphaComparator.INSTANCE, true))[ FD ]
Line_2 $$ private CommanderPanel createPanel() -->Line_26 $$ final JList list = panel.getList()[ CD ]
Line_2 $$ private CommanderPanel createPanel() -->Line_30 $$ Disposer.register(this, new Disposable() [ CD ]
