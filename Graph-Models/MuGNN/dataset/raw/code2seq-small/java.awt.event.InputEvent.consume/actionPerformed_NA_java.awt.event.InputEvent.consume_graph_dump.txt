Line_9 $$ final Map<MavenProject, String> projectsNameMap = MavenProjectNamer.generateNameMap(projectList)-->Line_16 $$ value = projectsNameMap.get(mavenProject)[ FD ]
Line_32 $$ final Runnable clickCallBack = new Runnable() -->Line_44 $$ popupRef.get().closeOk(null)[ CD ]
Line_22 $$ new TreeSpeedSearch(projectTree, new Convertor<TreePath, String>() -->Line_24 $$ Object lastPathComponent = o.getLastPathComponent()[ CD ]
Line_22 $$ new TreeSpeedSearch(projectTree, new Convertor<TreePath, String>() -->Line_28 $$ return projectsNameMap.get(userObject)[ CD ]
Line_2 $$ public void actionPerformed(ActionEvent e) -->Line_56 $$ popupRef.set(popup)[ CD ]
Line_2 $$ public void actionPerformed(ActionEvent e) -->Line_4 $$ if (projectList.isEmpty()) [ CD ]
Line_34 $$ TreePath path = projectTree.getSelectionPath()-->Line_35 $$ if (path == null)[ FD ]
Line_2 $$ public void actionPerformed(ActionEvent e) -->Line_55 $$ JBPopup popup = new PopupChooserBuilder(projectTree).setTitle("Select maven project").setResizable(true).setItemChoosenCallback(clickCallBack).setAutoselectOnMouseMove(true).setCloseOnEnter(false).createPopup()[ CD ]
Line_32 $$ final Runnable clickCallBack = new Runnable() -->Line_43 $$ callback.consume((MavenProject) object)[ CD ]
Line_47 $$ projectTree.addKeyListener(new KeyAdapter() -->Line_51 $$ e.consume()[ FD ]
Line_35 $$ if (path == null)-->Line_36 $$ return[ CD ]
Line_2 $$ public void actionPerformed(ActionEvent e) -->Line_12 $$ projectTree.setCellRenderer(new NodeRenderer() [ CD ]
Line_49 $$ if (e.getKeyCode() == KeyEvent.VK_ENTER) -->Line_50 $$ clickCallBack.run()[ CD ]
Line_14 $$ if (value instanceof DefaultMutableTreeNode) -->Line_15 $$ MavenProject mavenProject = (MavenProject) ((DefaultMutableTreeNode) value).getUserObject()[ CD ]
Line_3 $$ List<MavenProject> projectList = projectsManager.getProjects()-->Line_4 $$ if (projectList.isEmpty()) [ FD ]
Line_16 $$ value = projectsNameMap.get(mavenProject)-->Line_19 $$ super.customizeCellRenderer(tree, value, selected, expanded, leaf, row, hasFocus)[ FD ]
Line_2 $$ public void actionPerformed(ActionEvent e) -->Line_8 $$ DefaultMutableTreeNode root = buildTree(projectList)[ CD ]
Line_14 $$ if (value instanceof DefaultMutableTreeNode) -->Line_16 $$ value = projectsNameMap.get(mavenProject)[ CD ]
Line_9 $$ final Map<MavenProject, String> projectsNameMap = MavenProjectNamer.generateNameMap(projectList)-->Line_28 $$ return projectsNameMap.get(userObject)[ FD ]
Line_4 $$ if (projectList.isEmpty()) -->Line_5 $$ JBPopupFactory.getInstance().createMessage("Maven projects not found").showUnderneathOf(button)[ CD ]
Line_25 $$ if (!(lastPathComponent instanceof DefaultMutableTreeNode))-->Line_26 $$ return null[ CD ]
Line_10 $$ final Tree projectTree = new Tree(root)-->Line_11 $$ projectTree.setRootVisible(false)[ FD ]
Line_4 $$ if (projectList.isEmpty()) -->Line_6 $$ return[ CD ]
Line_14 $$ if (value instanceof DefaultMutableTreeNode) -->Line_17 $$ setIcon(MavenIcons.MavenProject)[ CD ]
Line_2 $$ public void actionPerformed(ActionEvent e) -->Line_11 $$ projectTree.setRootVisible(false)[ CD ]
Line_12 $$ projectTree.setCellRenderer(new NodeRenderer() -->Line_14 $$ if (value instanceof DefaultMutableTreeNode) [ FD ]
Line_3 $$ List<MavenProject> projectList = projectsManager.getProjects()-->Line_8 $$ DefaultMutableTreeNode root = buildTree(projectList)[ FD ]
Line_34 $$ TreePath path = projectTree.getSelectionPath()-->Line_37 $$ Object lastPathComponent = path.getLastPathComponent()[ FD ]
Line_2 $$ public void actionPerformed(ActionEvent e) -->Line_57 $$ popup.showUnderneathOf(button)[ CD ]
Line_47 $$ projectTree.addKeyListener(new KeyAdapter() -->Line_49 $$ if (e.getKeyCode() == KeyEvent.VK_ENTER) [ CD ]
Line_41 $$ if (object == null)-->Line_42 $$ return[ CD ]
Line_22 $$ new TreeSpeedSearch(projectTree, new Convertor<TreePath, String>() -->Line_24 $$ Object lastPathComponent = o.getLastPathComponent()[ FD ]
Line_22 $$ new TreeSpeedSearch(projectTree, new Convertor<TreePath, String>() -->Line_25 $$ if (!(lastPathComponent instanceof DefaultMutableTreeNode))[ CD ]
Line_2 $$ public void actionPerformed(ActionEvent e) -->Line_10 $$ final Tree projectTree = new Tree(root)[ CD ]
Line_32 $$ final Runnable clickCallBack = new Runnable() -->Line_38 $$ if (!(lastPathComponent instanceof DefaultMutableTreeNode))[ CD ]
Line_22 $$ new TreeSpeedSearch(projectTree, new Convertor<TreePath, String>() -->Line_27 $$ Object userObject = ((DefaultMutableTreeNode) lastPathComponent).getUserObject()[ CD ]
Line_32 $$ final Runnable clickCallBack = new Runnable() -->Line_41 $$ if (object == null)[ CD ]
Line_10 $$ final Tree projectTree = new Tree(root)-->Line_12 $$ projectTree.setCellRenderer(new NodeRenderer() [ FD ]
Line_10 $$ final Tree projectTree = new Tree(root)-->Line_34 $$ TreePath path = projectTree.getSelectionPath()[ FD ]
Line_49 $$ if (e.getKeyCode() == KeyEvent.VK_ENTER) -->Line_51 $$ e.consume()[ CD ]
Line_12 $$ projectTree.setCellRenderer(new NodeRenderer() -->Line_19 $$ super.customizeCellRenderer(tree, value, selected, expanded, leaf, row, hasFocus)[ FD ]
Line_2 $$ public void actionPerformed(ActionEvent e) -->Line_49 $$ if (e.getKeyCode() == KeyEvent.VK_ENTER) [ FD ]
Line_12 $$ projectTree.setCellRenderer(new NodeRenderer() -->Line_16 $$ value = projectsNameMap.get(mavenProject)[ FD ]
Line_32 $$ final Runnable clickCallBack = new Runnable() -->Line_34 $$ TreePath path = projectTree.getSelectionPath()[ CD ]
Line_32 $$ final Runnable clickCallBack = new Runnable() -->Line_35 $$ if (path == null)[ CD ]
Line_12 $$ projectTree.setCellRenderer(new NodeRenderer() -->Line_19 $$ super.customizeCellRenderer(tree, value, selected, expanded, leaf, row, hasFocus)[ CD ]
Line_2 $$ public void actionPerformed(ActionEvent e) -->Line_3 $$ List<MavenProject> projectList = projectsManager.getProjects()[ CD ]
Line_27 $$ Object userObject = ((DefaultMutableTreeNode) lastPathComponent).getUserObject()-->Line_28 $$ return projectsNameMap.get(userObject)[ FD ]
Line_32 $$ final Runnable clickCallBack = new Runnable() -->Line_37 $$ Object lastPathComponent = path.getLastPathComponent()[ CD ]
Line_38 $$ if (!(lastPathComponent instanceof DefaultMutableTreeNode))-->Line_39 $$ return[ CD ]
Line_40 $$ Object object = ((DefaultMutableTreeNode) lastPathComponent).getUserObject()-->Line_41 $$ if (object == null)[ FD ]
Line_47 $$ projectTree.addKeyListener(new KeyAdapter() -->Line_49 $$ if (e.getKeyCode() == KeyEvent.VK_ENTER) [ FD ]
Line_32 $$ final Runnable clickCallBack = new Runnable() -->Line_40 $$ Object object = ((DefaultMutableTreeNode) lastPathComponent).getUserObject()[ CD ]
Line_12 $$ projectTree.setCellRenderer(new NodeRenderer() -->Line_14 $$ if (value instanceof DefaultMutableTreeNode) [ CD ]
Line_2 $$ public void actionPerformed(ActionEvent e) -->Line_9 $$ final Map<MavenProject, String> projectsNameMap = MavenProjectNamer.generateNameMap(projectList)[ CD ]
Line_15 $$ MavenProject mavenProject = (MavenProject) ((DefaultMutableTreeNode) value).getUserObject()-->Line_16 $$ value = projectsNameMap.get(mavenProject)[ FD ]
Line_2 $$ public void actionPerformed(ActionEvent e) -->Line_47 $$ projectTree.addKeyListener(new KeyAdapter() [ CD ]
Line_2 $$ public void actionPerformed(ActionEvent e) -->Line_51 $$ e.consume()[ FD ]
Line_3 $$ List<MavenProject> projectList = projectsManager.getProjects()-->Line_9 $$ final Map<MavenProject, String> projectsNameMap = MavenProjectNamer.generateNameMap(projectList)[ FD ]
Line_10 $$ final Tree projectTree = new Tree(root)-->Line_47 $$ projectTree.addKeyListener(new KeyAdapter() [ FD ]
