Line_16 $$ if (upperBound.isPresent()) -->Line_17 $$ source = convertToTopNRowNumber(windowNode, upperBound.getAsInt())[ CD ]
Line_6 $$ Symbol rowNumberSymbol = ((RowNumberNode) source).getRowNumberSymbol()-->Line_18 $$ return rewriteFilterSource(node, source, rowNumberSymbol, upperBound.getAsInt())[ FD ]
Line_6 $$ Symbol rowNumberSymbol = ((RowNumberNode) source).getRowNumberSymbol()-->Line_15 $$ OptionalInt upperBound = extractUpperBound(tupleDomain, rowNumberSymbol)[ FD ]
Line_8 $$ if (upperBound.isPresent()) -->Line_9 $$ source = mergeLimit(((RowNumberNode) source), upperBound.getAsInt())[ CD ]
Line_8 $$ if (upperBound.isPresent()) -->Line_10 $$ return rewriteFilterSource(node, source, rowNumberSymbol, upperBound.getAsInt())[ CD ]
Line_4 $$ TupleDomain<Symbol> tupleDomain = fromPredicate(metadata, session, node.getPredicate(), types).getTupleDomain()-->Line_7 $$ OptionalInt upperBound = extractUpperBound(tupleDomain, rowNumberSymbol)[ FD ]
Line_6 $$ Symbol rowNumberSymbol = ((RowNumberNode) source).getRowNumberSymbol()-->Line_10 $$ return rewriteFilterSource(node, source, rowNumberSymbol, upperBound.getAsInt())[ FD ]
Line_12 $$ if (source instanceof WindowNode && canOptimizeWindowFunction((WindowNode) source)) -->Line_16 $$ if (upperBound.isPresent()) [ CD ]
Line_4 $$ TupleDomain<Symbol> tupleDomain = fromPredicate(metadata, session, node.getPredicate(), types).getTupleDomain()-->Line_15 $$ OptionalInt upperBound = extractUpperBound(tupleDomain, rowNumberSymbol)[ FD ]
Line_9 $$ source = mergeLimit(((RowNumberNode) source), upperBound.getAsInt())-->Line_21 $$ return replaceChildren(node, ImmutableList.of(source))[ FD ]
Line_7 $$ OptionalInt upperBound = extractUpperBound(tupleDomain, rowNumberSymbol)-->Line_18 $$ return rewriteFilterSource(node, source, rowNumberSymbol, upperBound.getAsInt())[ FD ]
Line_17 $$ source = convertToTopNRowNumber(windowNode, upperBound.getAsInt())-->Line_21 $$ return replaceChildren(node, ImmutableList.of(source))[ FD ]
Line_3 $$ PlanNode source = context.rewrite(node.getSource())-->Line_21 $$ return replaceChildren(node, ImmutableList.of(source))[ FD ]
Line_2 $$ public PlanNode visitFilter(FilterNode node, RewriteContext<Void> context) -->Line_4 $$ TupleDomain<Symbol> tupleDomain = fromPredicate(metadata, session, node.getPredicate(), types).getTupleDomain()[ CD ]
Line_7 $$ OptionalInt upperBound = extractUpperBound(tupleDomain, rowNumberSymbol)-->Line_17 $$ source = convertToTopNRowNumber(windowNode, upperBound.getAsInt())[ FD ]
Line_5 $$ if (source instanceof RowNumberNode) -->Line_12 $$ if (source instanceof WindowNode && canOptimizeWindowFunction((WindowNode) source)) [ CD ]
Line_5 $$ if (source instanceof RowNumberNode) -->Line_6 $$ Symbol rowNumberSymbol = ((RowNumberNode) source).getRowNumberSymbol()[ CD ]
Line_16 $$ if (upperBound.isPresent()) -->Line_18 $$ return rewriteFilterSource(node, source, rowNumberSymbol, upperBound.getAsInt())[ CD ]
Line_2 $$ public PlanNode visitFilter(FilterNode node, RewriteContext<Void> context) -->Line_18 $$ return rewriteFilterSource(node, source, rowNumberSymbol, upperBound.getAsInt())[ FD ]
Line_12 $$ if (source instanceof WindowNode && canOptimizeWindowFunction((WindowNode) source)) -->Line_14 $$ Symbol rowNumberSymbol = getOnlyElement(windowNode.getWindowFunctions().entrySet()).getKey()[ CD ]
Line_3 $$ PlanNode source = context.rewrite(node.getSource())-->Line_18 $$ return rewriteFilterSource(node, source, rowNumberSymbol, upperBound.getAsInt())[ FD ]
Line_3 $$ PlanNode source = context.rewrite(node.getSource())-->Line_5 $$ if (source instanceof RowNumberNode) [ FD ]
Line_7 $$ OptionalInt upperBound = extractUpperBound(tupleDomain, rowNumberSymbol)-->Line_10 $$ return rewriteFilterSource(node, source, rowNumberSymbol, upperBound.getAsInt())[ FD ]
Line_2 $$ public PlanNode visitFilter(FilterNode node, RewriteContext<Void> context) -->Line_10 $$ return rewriteFilterSource(node, source, rowNumberSymbol, upperBound.getAsInt())[ FD ]
Line_3 $$ PlanNode source = context.rewrite(node.getSource())-->Line_9 $$ source = mergeLimit(((RowNumberNode) source), upperBound.getAsInt())[ FD ]
Line_9 $$ source = mergeLimit(((RowNumberNode) source), upperBound.getAsInt())-->Line_10 $$ return rewriteFilterSource(node, source, rowNumberSymbol, upperBound.getAsInt())[ FD ]
Line_2 $$ public PlanNode visitFilter(FilterNode node, RewriteContext<Void> context) -->Line_4 $$ TupleDomain<Symbol> tupleDomain = fromPredicate(metadata, session, node.getPredicate(), types).getTupleDomain()[ FD ]
Line_2 $$ public PlanNode visitFilter(FilterNode node, RewriteContext<Void> context) -->Line_3 $$ PlanNode source = context.rewrite(node.getSource())[ FD ]
Line_7 $$ OptionalInt upperBound = extractUpperBound(tupleDomain, rowNumberSymbol)-->Line_16 $$ if (upperBound.isPresent()) [ FD ]
Line_13 $$ WindowNode windowNode = (WindowNode) source-->Line_14 $$ Symbol rowNumberSymbol = getOnlyElement(windowNode.getWindowFunctions().entrySet()).getKey()[ FD ]
Line_2 $$ public PlanNode visitFilter(FilterNode node, RewriteContext<Void> context) -->Line_3 $$ PlanNode source = context.rewrite(node.getSource())[ CD ]
Line_13 $$ WindowNode windowNode = (WindowNode) source-->Line_17 $$ source = convertToTopNRowNumber(windowNode, upperBound.getAsInt())[ FD ]
Line_17 $$ source = convertToTopNRowNumber(windowNode, upperBound.getAsInt())-->Line_18 $$ return rewriteFilterSource(node, source, rowNumberSymbol, upperBound.getAsInt())[ FD ]
Line_12 $$ if (source instanceof WindowNode && canOptimizeWindowFunction((WindowNode) source)) -->Line_15 $$ OptionalInt upperBound = extractUpperBound(tupleDomain, rowNumberSymbol)[ CD ]
Line_2 $$ public PlanNode visitFilter(FilterNode node, RewriteContext<Void> context) -->Line_5 $$ if (source instanceof RowNumberNode) [ CD ]
Line_9 $$ source = mergeLimit(((RowNumberNode) source), upperBound.getAsInt())-->Line_18 $$ return rewriteFilterSource(node, source, rowNumberSymbol, upperBound.getAsInt())[ FD ]
Line_5 $$ if (source instanceof RowNumberNode) -->Line_8 $$ if (upperBound.isPresent()) [ CD ]
Line_7 $$ OptionalInt upperBound = extractUpperBound(tupleDomain, rowNumberSymbol)-->Line_9 $$ source = mergeLimit(((RowNumberNode) source), upperBound.getAsInt())[ FD ]
Line_12 $$ if (source instanceof WindowNode && canOptimizeWindowFunction((WindowNode) source)) -->Line_13 $$ WindowNode windowNode = (WindowNode) source[ CD ]
Line_3 $$ PlanNode source = context.rewrite(node.getSource())-->Line_10 $$ return rewriteFilterSource(node, source, rowNumberSymbol, upperBound.getAsInt())[ FD ]
Line_5 $$ if (source instanceof RowNumberNode) -->Line_7 $$ OptionalInt upperBound = extractUpperBound(tupleDomain, rowNumberSymbol)[ CD ]
Line_2 $$ public PlanNode visitFilter(FilterNode node, RewriteContext<Void> context) -->Line_21 $$ return replaceChildren(node, ImmutableList.of(source))[ CD ]
Line_6 $$ Symbol rowNumberSymbol = ((RowNumberNode) source).getRowNumberSymbol()-->Line_7 $$ OptionalInt upperBound = extractUpperBound(tupleDomain, rowNumberSymbol)[ FD ]
Line_7 $$ OptionalInt upperBound = extractUpperBound(tupleDomain, rowNumberSymbol)-->Line_8 $$ if (upperBound.isPresent()) [ FD ]
Line_3 $$ PlanNode source = context.rewrite(node.getSource())-->Line_17 $$ source = convertToTopNRowNumber(windowNode, upperBound.getAsInt())[ FD ]
Line_9 $$ source = mergeLimit(((RowNumberNode) source), upperBound.getAsInt())-->Line_17 $$ source = convertToTopNRowNumber(windowNode, upperBound.getAsInt())[ FD ]
Line_2 $$ public PlanNode visitFilter(FilterNode node, RewriteContext<Void> context) -->Line_21 $$ return replaceChildren(node, ImmutableList.of(source))[ FD ]
