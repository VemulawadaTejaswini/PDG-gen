Line_18 $$ for (int channel = 0; channel < sourceTypes.size(); channel++) -->Line_19 $$ Type type = sourceTypes.get(channel)[ CD ]
Line_9 $$ for (int channel = 0; channel < sourceTypes.size(); channel++) -->Line_11 $$ type.appendTo(page.getBlock(channel), position, pageBuilder.getBlockBuilder(channel))[ FD ]
Line_18 $$ for (int channel = 0; channel < sourceTypes.size(); channel++) -->Line_20 $$ type.appendTo(page.getBlock(channel), position, pageBuilder.getBlockBuilder(channel))[ FD ]
Line_9 $$ for (int channel = 0; channel < sourceTypes.size(); channel++) -->Line_11 $$ type.appendTo(page.getBlock(channel), position, pageBuilder.getBlockBuilder(channel))[ CD ]
Line_6 $$ if (nullChannel.isPresent() && page.getBlock(nullChannel.getAsInt()).isNull(position)) -->Line_16 $$ PageBuilder pageBuilder = pageBuilders.get(partition)[ CD ]
Line_19 $$ Type type = sourceTypes.get(channel)-->Line_20 $$ type.appendTo(page.getBlock(channel), position, pageBuilder.getBlockBuilder(channel))[ FD ]
Line_9 $$ for (int channel = 0; channel < sourceTypes.size(); channel++) -->Line_19 $$ Type type = sourceTypes.get(channel)[ FD ]
Line_4 $$ Page partitionFunctionArgs = getPartitionFunctionArguments(page)-->Line_15 $$ int partition = partitionFunction.getPartition(partitionFunctionArgs, position)[ FD ]
Line_7 $$ for (PageBuilder pageBuilder : pageBuilders) -->Line_20 $$ type.appendTo(page.getBlock(channel), position, pageBuilder.getBlockBuilder(channel))[ FD ]
Line_6 $$ if (nullChannel.isPresent() && page.getBlock(nullChannel.getAsInt()).isNull(position)) -->Line_15 $$ int partition = partitionFunction.getPartition(partitionFunctionArgs, position)[ CD ]
Line_7 $$ for (PageBuilder pageBuilder : pageBuilders) -->Line_17 $$ pageBuilder.declarePosition()[ FD ]
Line_18 $$ for (int channel = 0; channel < sourceTypes.size(); channel++) -->Line_19 $$ Type type = sourceTypes.get(channel)[ FD ]
Line_2 $$ public ListenableFuture<?> partitionPage(Page page) -->Line_20 $$ type.appendTo(page.getBlock(channel), position, pageBuilder.getBlockBuilder(channel))[ FD ]
Line_2 $$ public ListenableFuture<?> partitionPage(Page page) -->Line_4 $$ Page partitionFunctionArgs = getPartitionFunctionArguments(page)[ CD ]
Line_2 $$ public ListenableFuture<?> partitionPage(Page page) -->Line_3 $$ requireNonNull(page, "page is null")[ FD ]
Line_6 $$ if (nullChannel.isPresent() && page.getBlock(nullChannel.getAsInt()).isNull(position)) -->Line_17 $$ pageBuilder.declarePosition()[ CD ]
Line_10 $$ Type type = sourceTypes.get(channel)-->Line_20 $$ type.appendTo(page.getBlock(channel), position, pageBuilder.getBlockBuilder(channel))[ FD ]
Line_2 $$ public ListenableFuture<?> partitionPage(Page page) -->Line_5 $$ for (int position = 0; position < page.getPositionCount(); position++) [ FD ]
Line_9 $$ for (int channel = 0; channel < sourceTypes.size(); channel++) -->Line_10 $$ Type type = sourceTypes.get(channel)[ CD ]
Line_9 $$ for (int channel = 0; channel < sourceTypes.size(); channel++) -->Line_10 $$ Type type = sourceTypes.get(channel)[ FD ]
Line_5 $$ for (int position = 0; position < page.getPositionCount(); position++) -->Line_11 $$ type.appendTo(page.getBlock(channel), position, pageBuilder.getBlockBuilder(channel))[ FD ]
Line_9 $$ for (int channel = 0; channel < sourceTypes.size(); channel++) -->Line_18 $$ for (int channel = 0; channel < sourceTypes.size(); channel++) [ FD ]
Line_10 $$ Type type = sourceTypes.get(channel)-->Line_11 $$ type.appendTo(page.getBlock(channel), position, pageBuilder.getBlockBuilder(channel))[ FD ]
Line_18 $$ for (int channel = 0; channel < sourceTypes.size(); channel++) -->Line_20 $$ type.appendTo(page.getBlock(channel), position, pageBuilder.getBlockBuilder(channel))[ CD ]
Line_2 $$ public ListenableFuture<?> partitionPage(Page page) -->Line_4 $$ Page partitionFunctionArgs = getPartitionFunctionArguments(page)[ FD ]
Line_2 $$ public ListenableFuture<?> partitionPage(Page page) -->Line_24 $$ return flush(false)[ CD ]
Line_2 $$ public ListenableFuture<?> partitionPage(Page page) -->Line_6 $$ if (nullChannel.isPresent() && page.getBlock(nullChannel.getAsInt()).isNull(position)) [ FD ]
Line_5 $$ for (int position = 0; position < page.getPositionCount(); position++) -->Line_6 $$ if (nullChannel.isPresent() && page.getBlock(nullChannel.getAsInt()).isNull(position)) [ CD ]
Line_2 $$ public ListenableFuture<?> partitionPage(Page page) -->Line_3 $$ requireNonNull(page, "page is null")[ CD ]
Line_2 $$ public ListenableFuture<?> partitionPage(Page page) -->Line_11 $$ type.appendTo(page.getBlock(channel), position, pageBuilder.getBlockBuilder(channel))[ FD ]
Line_5 $$ for (int position = 0; position < page.getPositionCount(); position++) -->Line_20 $$ type.appendTo(page.getBlock(channel), position, pageBuilder.getBlockBuilder(channel))[ FD ]
Line_7 $$ for (PageBuilder pageBuilder : pageBuilders) -->Line_8 $$ pageBuilder.declarePosition()[ FD ]
Line_9 $$ for (int channel = 0; channel < sourceTypes.size(); channel++) -->Line_20 $$ type.appendTo(page.getBlock(channel), position, pageBuilder.getBlockBuilder(channel))[ FD ]
Line_7 $$ for (PageBuilder pageBuilder : pageBuilders) -->Line_11 $$ type.appendTo(page.getBlock(channel), position, pageBuilder.getBlockBuilder(channel))[ FD ]
Line_5 $$ for (int position = 0; position < page.getPositionCount(); position++) -->Line_6 $$ if (nullChannel.isPresent() && page.getBlock(nullChannel.getAsInt()).isNull(position)) [ FD ]
Line_6 $$ if (nullChannel.isPresent() && page.getBlock(nullChannel.getAsInt()).isNull(position)) -->Line_18 $$ for (int channel = 0; channel < sourceTypes.size(); channel++) [ CD ]
Line_2 $$ public ListenableFuture<?> partitionPage(Page page) -->Line_5 $$ for (int position = 0; position < page.getPositionCount(); position++) [ CD ]
Line_5 $$ for (int position = 0; position < page.getPositionCount(); position++) -->Line_15 $$ int partition = partitionFunction.getPartition(partitionFunctionArgs, position)[ FD ]
