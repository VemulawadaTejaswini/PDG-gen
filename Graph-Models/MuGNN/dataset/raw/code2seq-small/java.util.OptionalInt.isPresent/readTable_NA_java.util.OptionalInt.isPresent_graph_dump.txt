Line_2 $$ private MaterializedResult readTable(ConnectorTableHandle tableHandle, List<ColumnHandle> columnHandles, ConnectorSession session, TupleDomain<ColumnHandle> tupleDomain, OptionalInt expectedSplitCount, Optional<HiveStorageFormat> expectedStorageFormat) throws Exception -->Line_6 $$ if (expectedSplitCount.isPresent()) [ FD ]
Line_2 $$ private MaterializedResult readTable(ConnectorTableHandle tableHandle, List<ColumnHandle> columnHandles, ConnectorSession session, TupleDomain<ColumnHandle> tupleDomain, OptionalInt expectedSplitCount, Optional<HiveStorageFormat> expectedStorageFormat) throws Exception -->Line_13 $$ assertPageSourceType(pageSource, expectedStorageFormat.get())[ FD ]
Line_2 $$ private MaterializedResult readTable(ConnectorTableHandle tableHandle, List<ColumnHandle> columnHandles, ConnectorSession session, TupleDomain<ColumnHandle> tupleDomain, OptionalInt expectedSplitCount, Optional<HiveStorageFormat> expectedStorageFormat) throws Exception -->Line_3 $$ List<ConnectorTableLayoutResult> tableLayoutResults = metadata.getTableLayouts(session, tableHandle, new Constraint(tupleDomain,  bindings -> true), Optional.empty())[ CD ]
Line_9 $$ ImmutableList.Builder<MaterializedRow> allRows = ImmutableList.builder()-->Line_16 $$ allRows.addAll(result.getMaterializedRows())[ FD ]
Line_11 $$ try (ConnectorPageSource pageSource = pageSourceProvider.createPageSource(session, split, columnHandles)) -->Line_13 $$ assertPageSourceType(pageSource, expectedStorageFormat.get())[ FD ]
Line_5 $$ List<ConnectorSplit> splits = getAllSplits(splitManager.getSplits(session, layoutHandle))-->Line_7 $$ assertEquals(splits.size(), expectedSplitCount.getAsInt())[ FD ]
Line_2 $$ private MaterializedResult readTable(ConnectorTableHandle tableHandle, List<ColumnHandle> columnHandles, ConnectorSession session, TupleDomain<ColumnHandle> tupleDomain, OptionalInt expectedSplitCount, Optional<HiveStorageFormat> expectedStorageFormat) throws Exception -->Line_4 $$ ConnectorTableLayoutHandle layoutHandle = getOnlyElement(tableLayoutResults).getTableLayout().getHandle()[ CD ]
Line_2 $$ private MaterializedResult readTable(ConnectorTableHandle tableHandle, List<ColumnHandle> columnHandles, ConnectorSession session, TupleDomain<ColumnHandle> tupleDomain, OptionalInt expectedSplitCount, Optional<HiveStorageFormat> expectedStorageFormat) throws Exception -->Line_7 $$ assertEquals(splits.size(), expectedSplitCount.getAsInt())[ FD ]
Line_11 $$ try (ConnectorPageSource pageSource = pageSourceProvider.createPageSource(session, split, columnHandles)) -->Line_15 $$ MaterializedResult result = materializeSourceDataStream(session, pageSource, getTypes(columnHandles))[ FD ]
Line_15 $$ MaterializedResult result = materializeSourceDataStream(session, pageSource, getTypes(columnHandles))-->Line_16 $$ allRows.addAll(result.getMaterializedRows())[ FD ]
Line_2 $$ private MaterializedResult readTable(ConnectorTableHandle tableHandle, List<ColumnHandle> columnHandles, ConnectorSession session, TupleDomain<ColumnHandle> tupleDomain, OptionalInt expectedSplitCount, Optional<HiveStorageFormat> expectedStorageFormat) throws Exception -->Line_5 $$ List<ConnectorSplit> splits = getAllSplits(splitManager.getSplits(session, layoutHandle))[ FD ]
Line_2 $$ private MaterializedResult readTable(ConnectorTableHandle tableHandle, List<ColumnHandle> columnHandles, ConnectorSession session, TupleDomain<ColumnHandle> tupleDomain, OptionalInt expectedSplitCount, Optional<HiveStorageFormat> expectedStorageFormat) throws Exception -->Line_6 $$ if (expectedSplitCount.isPresent()) [ CD ]
Line_10 $$ for (ConnectorSplit split : splits) -->Line_11 $$ try (ConnectorPageSource pageSource = pageSourceProvider.createPageSource(session, split, columnHandles)) [ FD ]
Line_6 $$ if (expectedSplitCount.isPresent()) -->Line_7 $$ assertEquals(splits.size(), expectedSplitCount.getAsInt())[ CD ]
Line_2 $$ private MaterializedResult readTable(ConnectorTableHandle tableHandle, List<ColumnHandle> columnHandles, ConnectorSession session, TupleDomain<ColumnHandle> tupleDomain, OptionalInt expectedSplitCount, Optional<HiveStorageFormat> expectedStorageFormat) throws Exception -->Line_19 $$ return new MaterializedResult(allRows.build(), getTypes(columnHandles))[ FD ]
Line_2 $$ private MaterializedResult readTable(ConnectorTableHandle tableHandle, List<ColumnHandle> columnHandles, ConnectorSession session, TupleDomain<ColumnHandle> tupleDomain, OptionalInt expectedSplitCount, Optional<HiveStorageFormat> expectedStorageFormat) throws Exception -->Line_12 $$ if (expectedStorageFormat.isPresent()) [ FD ]
Line_2 $$ private MaterializedResult readTable(ConnectorTableHandle tableHandle, List<ColumnHandle> columnHandles, ConnectorSession session, TupleDomain<ColumnHandle> tupleDomain, OptionalInt expectedSplitCount, Optional<HiveStorageFormat> expectedStorageFormat) throws Exception -->Line_3 $$ List<ConnectorTableLayoutResult> tableLayoutResults = metadata.getTableLayouts(session, tableHandle, new Constraint(tupleDomain,  bindings -> true), Optional.empty())[ FD ]
Line_2 $$ private MaterializedResult readTable(ConnectorTableHandle tableHandle, List<ColumnHandle> columnHandles, ConnectorSession session, TupleDomain<ColumnHandle> tupleDomain, OptionalInt expectedSplitCount, Optional<HiveStorageFormat> expectedStorageFormat) throws Exception -->Line_19 $$ return new MaterializedResult(allRows.build(), getTypes(columnHandles))[ CD ]
Line_2 $$ private MaterializedResult readTable(ConnectorTableHandle tableHandle, List<ColumnHandle> columnHandles, ConnectorSession session, TupleDomain<ColumnHandle> tupleDomain, OptionalInt expectedSplitCount, Optional<HiveStorageFormat> expectedStorageFormat) throws Exception -->Line_9 $$ ImmutableList.Builder<MaterializedRow> allRows = ImmutableList.builder()[ CD ]
Line_9 $$ ImmutableList.Builder<MaterializedRow> allRows = ImmutableList.builder()-->Line_19 $$ return new MaterializedResult(allRows.build(), getTypes(columnHandles))[ FD ]
Line_12 $$ if (expectedStorageFormat.isPresent()) -->Line_13 $$ assertPageSourceType(pageSource, expectedStorageFormat.get())[ CD ]
Line_2 $$ private MaterializedResult readTable(ConnectorTableHandle tableHandle, List<ColumnHandle> columnHandles, ConnectorSession session, TupleDomain<ColumnHandle> tupleDomain, OptionalInt expectedSplitCount, Optional<HiveStorageFormat> expectedStorageFormat) throws Exception -->Line_5 $$ List<ConnectorSplit> splits = getAllSplits(splitManager.getSplits(session, layoutHandle))[ CD ]
Line_4 $$ ConnectorTableLayoutHandle layoutHandle = getOnlyElement(tableLayoutResults).getTableLayout().getHandle()-->Line_5 $$ List<ConnectorSplit> splits = getAllSplits(splitManager.getSplits(session, layoutHandle))[ FD ]
Line_3 $$ List<ConnectorTableLayoutResult> tableLayoutResults = metadata.getTableLayouts(session, tableHandle, new Constraint(tupleDomain,  bindings -> true), Optional.empty())-->Line_4 $$ ConnectorTableLayoutHandle layoutHandle = getOnlyElement(tableLayoutResults).getTableLayout().getHandle()[ FD ]
Line_2 $$ private MaterializedResult readTable(ConnectorTableHandle tableHandle, List<ColumnHandle> columnHandles, ConnectorSession session, TupleDomain<ColumnHandle> tupleDomain, OptionalInt expectedSplitCount, Optional<HiveStorageFormat> expectedStorageFormat) throws Exception -->Line_15 $$ MaterializedResult result = materializeSourceDataStream(session, pageSource, getTypes(columnHandles))[ FD ]
Line_2 $$ private MaterializedResult readTable(ConnectorTableHandle tableHandle, List<ColumnHandle> columnHandles, ConnectorSession session, TupleDomain<ColumnHandle> tupleDomain, OptionalInt expectedSplitCount, Optional<HiveStorageFormat> expectedStorageFormat) throws Exception -->Line_11 $$ try (ConnectorPageSource pageSource = pageSourceProvider.createPageSource(session, split, columnHandles)) [ FD ]
