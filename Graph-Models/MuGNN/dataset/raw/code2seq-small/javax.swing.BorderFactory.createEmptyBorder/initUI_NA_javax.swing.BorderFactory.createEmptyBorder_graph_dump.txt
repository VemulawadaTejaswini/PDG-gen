Line_74 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_170 $$ ScrollingUtil.moveDown(myList, e.getModifiersEx())[ FD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_69 $$ hBox.add(myToolArea)[ CD ]
Line_74 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_105 $$ JBPopup popup = JBPopupFactory.getInstance().getChildFocusedPopup(e.getComponent())[ FD ]
Line_45 $$ final List<PsiElement> nonPrefixMatchElements = new ArrayList<PsiElement>(objects.length)-->Line_56 $$ curElements = nonPrefixMatchElements[ FD ]
Line_150 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_159 $$ final int keyCode[ CD ]
Line_142 $$ myTextField.getDocument().addDocumentListener(new DocumentAdapter() -->Line_144 $$ clearPostponedOkAction(false)[ CD ]
Line_9 $$ if (myModel.getPromptText() != null) -->Line_15 $$ caption2Tools.add(label, BorderLayout.WEST)[ CD ]
Line_106 $$ if (popup != null) -->Line_115 $$ Component oppositeComponent = e.getOppositeComponent()[ CD ]
Line_32 $$ JPanel searching = new JPanel(new BorderLayout(5, 0))-->Line_34 $$ searching.add(new HintLabel(IdeBundle.message("label.choosebyname.searching")), BorderLayout.CENTER)[ FD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_74 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() [ CD ]
Line_193 $$ if (keyCode == KeyEvent.VK_UP || keyCode == KeyEvent.VK_PAGE_UP) -->Line_194 $$ ScrollingUtil.moveUp(myList, e.getModifiersEx())[ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_86 $$ myTextField.setActionMap(actionMap)[ CD ]
Line_217 $$ if (myList.getSelectedValue() == EXTRA_ELEM) -->Line_221 $$ doClose(true)[ CD ]
Line_142 $$ myTextField.getDocument().addDocumentListener(new DocumentAdapter() -->Line_152 $$ if (e.getKeyCode() == KeyEvent.VK_ENTER && (e.getModifiers() & InputEvent.SHIFT_MASK) != 0) [ FD ]
Line_124 $$ if (isDescendingFromTemporarilyFocusableToolWindow(oppositeComponent)) -->Line_125 $$ return[ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_87 $$ myTextFieldPanel.add(myTextField)[ CD ]
Line_74 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_160 $$ KeyStroke stroke = KeyStroke.getKeyStrokeForEvent(e)[ FD ]
Line_92 $$ new DumbAwareAction("change goto check box", null, null) -->Line_216 $$ if (selectedCellBounds != null && selectedCellBounds.contains(e.getPoint())) [ FD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_35 $$ addCard(searching, SEARCHING_CARD)[ CD ]
Line_106 $$ if (popup != null) -->Line_107 $$ popup.addListener(new JBPopupListener.Adapter() [ CD ]
Line_142 $$ myTextField.getDocument().addDocumentListener(new DocumentAdapter() -->Line_145 $$ rebuildList(false)[ CD ]
Line_185 $$ if (myList.getSelectedValue() == EXTRA_ELEM) -->Line_187 $$ rebuildList(myList.getSelectedIndex(), myRebuildDelay, ModalityState.current(), null)[ CD ]
Line_150 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_196 $$ ScrollingUtil.moveDown(myList, e.getModifiersEx())[ FD ]
Line_74 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_196 $$ ScrollingUtil.moveDown(myList, e.getModifiersEx())[ FD ]
Line_9 $$ if (myModel.getPromptText() != null) -->Line_14 $$ label.setFont(UIUtil.getLabelFont().deriveFont(Font.BOLD))[ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_18 $$ myCardContainer.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 4))[ CD ]
Line_51 $$ final PsiElement psi = CommonDataKeys.PSI_ELEMENT.getData((DataProvider) object)-->Line_52 $$ if (psi != null) [ FD ]
Line_74 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_216 $$ if (selectedCellBounds != null && selectedCellBounds.contains(e.getPoint())) [ FD ]
Line_164 $$ keyCode = KeyEvent.VK_DOWN-->Line_166 $$ keyCode = e.getKeyCode()[ FD ]
Line_90 $$ if (checkBoxName != null) -->Line_91 $$ if (myCheckBox != null && myCheckBoxShortcut != null) [ CD ]
Line_81 $$ if (chosenElement instanceof PsiElement) -->Line_82 $$ CopyReferenceAction.doCopy((PsiElement) chosenElement, myProject)[ CD ]
Line_11 $$ if (UIUtil.isUnderAquaLookAndFeel()) -->Line_12 $$ label.setBorder(new CompoundBorder(new EmptyBorder(0, 9, 0, 0), label.getBorder()))[ CD ]
Line_92 $$ new DumbAwareAction("change goto check box", null, null) -->Line_196 $$ ScrollingUtil.moveDown(myList, e.getModifiersEx())[ FD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_229 $$ myList.setCellRenderer(myModel.getListCellRenderer())[ CD ]
Line_74 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_115 $$ Component oppositeComponent = e.getOppositeComponent()[ FD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_201 $$ myTextField.addActionListener(new ActionListener() [ CD ]
Line_116 $$ if (oppositeComponent == myCheckBox) -->Line_117 $$ IdeFocusManager.getInstance(myProject).requestFocus(myTextField, true)[ CD ]
Line_92 $$ new DumbAwareAction("change goto check box", null, null) -->Line_105 $$ JBPopup popup = JBPopupFactory.getInstance().getChildFocusedPopup(e.getComponent())[ FD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_88 $$ Font editorFont = EditorUtil.getEditorFont()[ CD ]
Line_106 $$ if (popup != null) -->Line_120 $$ if (oppositeComponent != null && !(oppositeComponent instanceof JFrame) && myList.isShowing() && (oppositeComponent == myList || SwingUtilities.isDescendingFrom(myList, oppositeComponent))) [ CD ]
Line_100 $$ myTextField.addFocusListener(new FocusAdapter() -->Line_166 $$ keyCode = e.getKeyCode()[ FD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_31 $$ addCard(new HintLabel(IdeBundle.message("label.choosebyname.no.matches.found")), NOT_FOUND_CARD)[ CD ]
Line_208 $$ new ClickListener() -->Line_213 $$ if (clickCount == 2) [ CD ]
Line_234 $$ if (myList.getSelectedValue() != NON_PREFIX_SEPARATOR) -->Line_236 $$ chosenElementMightChange()[ CD ]
Line_192 $$ if (myList.getSelectedValue() == NON_PREFIX_SEPARATOR) -->Line_193 $$ if (keyCode == KeyEvent.VK_UP || keyCode == KeyEvent.VK_PAGE_UP) [ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_150 $$ myTextField.addKeyListener(new KeyAdapter() [ CD ]
Line_142 $$ myTextField.getDocument().addDocumentListener(new DocumentAdapter() -->Line_196 $$ ScrollingUtil.moveDown(myList, e.getModifiersEx())[ FD ]
Line_44 $$ final List<PsiElement> prefixMatchElements = new ArrayList<PsiElement>(objects.length)-->Line_59 $$ return new PsiElement[][] [ FD ]
Line_162 $$ keyCode = KeyEvent.VK_UP-->Line_166 $$ keyCode = e.getKeyCode()[ FD ]
Line_74 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_166 $$ keyCode = e.getKeyCode()[ FD ]
Line_135 $$ myCheckBox.addItemListener(new ItemListener() -->Line_166 $$ keyCode = e.getKeyCode()[ FD ]
Line_248 $$ if (modalityState != null) -->Line_249 $$ rebuildList(myInitialIndex, 0, modalityState, null)[ CD ]
Line_160 $$ KeyStroke stroke = KeyStroke.getKeyStrokeForEvent(e)-->Line_163 $$ if (downShortcuts.contains(stroke)) [ FD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_230 $$ myList.setFont(editorFont)[ CD ]
Line_234 $$ if (myList.getSelectedValue() != NON_PREFIX_SEPARATOR) -->Line_235 $$ myPreviousSelectionIndex = myList.getSelectedIndex()[ CD ]
Line_26 $$ if (checkBoxName == null) -->Line_27 $$ myCheckBox.setVisible(false)[ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_148 $$ final Set<KeyStroke> upShortcuts = getShortcuts(IdeActions.ACTION_EDITOR_MOVE_CARET_UP)[ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_70 $$ hBox.add(toolbarComponent)[ CD ]
Line_135 $$ myCheckBox.addItemListener(new ItemListener() -->Line_173 $$ ScrollingUtil.moveUp(myList, e.getModifiersEx())[ FD ]
Line_217 $$ if (myList.getSelectedValue() == EXTRA_ELEM) -->Line_219 $$ rebuildList(selectedIndex, myRebuildDelay, ModalityState.current(), null)[ CD ]
Line_19 $$ final String checkBoxName = myModel.getCheckBoxName()-->Line_90 $$ if (checkBoxName != null) [ FD ]
Line_150 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_188 $$ e.consume()[ FD ]
Line_161 $$ if (upShortcuts.contains(stroke)) -->Line_163 $$ if (downShortcuts.contains(stroke)) [ CD ]
Line_92 $$ new DumbAwareAction("change goto check box", null, null) -->Line_94 $$ myCheckBox.setSelected(!myCheckBox.isSelected())[ CD ]
Line_135 $$ myCheckBox.addItemListener(new ItemListener() -->Line_160 $$ KeyStroke stroke = KeyStroke.getKeyStrokeForEvent(e)[ FD ]
Line_231 $$ myList.addListSelectionListener(new ListSelectionListener() -->Line_234 $$ if (myList.getSelectedValue() != NON_PREFIX_SEPARATOR) [ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_206 $$ myList.setFocusable(false)[ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_33 $$ searching.add(new AsyncProcessIcon("searching"), BorderLayout.WEST)[ CD ]
Line_193 $$ if (keyCode == KeyEvent.VK_UP || keyCode == KeyEvent.VK_PAGE_UP) -->Line_196 $$ ScrollingUtil.moveDown(myList, e.getModifiersEx())[ CD ]
Line_103 $$ myHideAlarm.addRequest(new Runnable() -->Line_105 $$ JBPopup popup = JBPopupFactory.getInstance().getChildFocusedPopup(e.getComponent())[ CD ]
Line_76 $$ if (myTextField.getSelectedText() != null) -->Line_78 $$ return[ CD ]
Line_142 $$ myTextField.getDocument().addDocumentListener(new DocumentAdapter() -->Line_173 $$ ScrollingUtil.moveUp(myList, e.getModifiersEx())[ FD ]
Line_208 $$ new ClickListener() -->Line_213 $$ if (clickCount == 2) [ FD ]
Line_234 $$ if (myList.getSelectedValue() != NON_PREFIX_SEPARATOR) -->Line_237 $$ updateDocumentation()[ CD ]
Line_22 $$ if (!SystemInfo.isMac) -->Line_23 $$ myCheckBox.setBorder(null)[ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_22 $$ if (!SystemInfo.isMac) [ CD ]
Line_10 $$ JLabel label = new JLabel(myModel.getPromptText())-->Line_15 $$ caption2Tools.add(label, BorderLayout.WEST)[ FD ]
Line_135 $$ myCheckBox.addItemListener(new ItemListener() -->Line_194 $$ ScrollingUtil.moveUp(myList, e.getModifiersEx())[ FD ]
Line_40 $$ final DefaultActionGroup group = new DefaultActionGroup()-->Line_62 $$ final ActionToolbar actionToolbar = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, group, true)[ FD ]
Line_74 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_173 $$ ScrollingUtil.moveUp(myList, e.getModifiersEx())[ FD ]
Line_74 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_81 $$ if (chosenElement instanceof PsiElement) [ CD ]
Line_100 $$ myTextField.addFocusListener(new FocusAdapter() -->Line_152 $$ if (e.getKeyCode() == KeyEvent.VK_ENTER && (e.getModifiers() & InputEvent.SHIFT_MASK) != 0) [ FD ]
Line_159 $$ final int keyCode-->Line_166 $$ keyCode = e.getKeyCode()[ FD ]
Line_10 $$ JLabel label = new JLabel(myModel.getPromptText())-->Line_12 $$ label.setBorder(new CompoundBorder(new EmptyBorder(0, 9, 0, 0), label.getBorder()))[ FD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_249 $$ rebuildList(myInitialIndex, 0, modalityState, null)[ FD ]
Line_40 $$ final DefaultActionGroup group = new DefaultActionGroup()-->Line_41 $$ group.add(new ShowFindUsagesAction() [ FD ]
Line_142 $$ myTextField.getDocument().addDocumentListener(new DocumentAdapter() -->Line_188 $$ e.consume()[ FD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_64 $$ final JComponent toolbarComponent = actionToolbar.getComponent()[ CD ]
Line_50 $$ if (object instanceof DataProvider) -->Line_52 $$ if (psi != null) [ CD ]
Line_100 $$ myTextField.addFocusListener(new FocusAdapter() -->Line_115 $$ Component oppositeComponent = e.getOppositeComponent()[ FD ]
Line_92 $$ new DumbAwareAction("change goto check box", null, null) -->Line_160 $$ KeyStroke stroke = KeyStroke.getKeyStrokeForEvent(e)[ FD ]
Line_74 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_194 $$ ScrollingUtil.moveUp(myList, e.getModifiersEx())[ FD ]
Line_135 $$ myCheckBox.addItemListener(new ItemListener() -->Line_188 $$ e.consume()[ FD ]
Line_109 $$ if (event.isOk()) -->Line_110 $$ hideHint()[ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_71 $$ myTextFieldPanel.add(caption2Tools)[ CD ]
Line_150 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_194 $$ ScrollingUtil.moveUp(myList, e.getModifiersEx())[ FD ]
Line_100 $$ myTextField.addFocusListener(new FocusAdapter() -->Line_196 $$ ScrollingUtil.moveDown(myList, e.getModifiersEx())[ FD ]
Line_215 $$ Rectangle selectedCellBounds = myList.getCellBounds(selectedIndex, selectedIndex)-->Line_216 $$ if (selectedCellBounds != null && selectedCellBounds.contains(e.getPoint())) [ FD ]
Line_19 $$ final String checkBoxName = myModel.getCheckBoxName()-->Line_26 $$ if (checkBoxName == null) [ FD ]
Line_142 $$ myTextField.getDocument().addDocumentListener(new DocumentAdapter() -->Line_194 $$ ScrollingUtil.moveUp(myList, e.getModifiersEx())[ FD ]
Line_9 $$ if (myModel.getPromptText() != null) -->Line_11 $$ if (UIUtil.isUnderAquaLookAndFeel()) [ CD ]
Line_160 $$ KeyStroke stroke = KeyStroke.getKeyStrokeForEvent(e)-->Line_161 $$ if (upShortcuts.contains(stroke)) [ FD ]
Line_37 $$ if (isCheckboxVisible()) -->Line_38 $$ hBox.add(myCardContainer)[ CD ]
Line_91 $$ if (myCheckBox != null && myCheckBoxShortcut != null) -->Line_92 $$ new DumbAwareAction("change goto check box", null, null) [ CD ]
Line_48 $$ if (object instanceof PsiElement) -->Line_49 $$ curElements.add((PsiElement) object)[ CD ]
Line_92 $$ new DumbAwareAction("change goto check box", null, null) -->Line_115 $$ Component oppositeComponent = e.getOppositeComponent()[ FD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_65 $$ toolbarComponent.setBorder(null)[ CD ]
Line_8 $$ JPanel caption2Tools = new JPanel(new BorderLayout())-->Line_15 $$ caption2Tools.add(label, BorderLayout.WEST)[ FD ]
Line_74 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_76 $$ if (myTextField.getSelectedText() != null) [ CD ]
Line_156 $$ if (!myListScrollPane.isVisible()) -->Line_157 $$ return[ CD ]
Line_106 $$ if (popup != null) -->Line_124 $$ if (isDescendingFromTemporarilyFocusableToolWindow(oppositeComponent)) [ CD ]
Line_135 $$ myCheckBox.addItemListener(new ItemListener() -->Line_196 $$ ScrollingUtil.moveDown(myList, e.getModifiersEx())[ FD ]
Line_134 $$ if (myCheckBox != null) -->Line_140 $$ myCheckBox.setFocusable(false)[ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_40 $$ final DefaultActionGroup group = new DefaultActionGroup()[ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_234 $$ if (myList.getSelectedValue() != NON_PREFIX_SEPARATOR) [ FD ]
Line_51 $$ final PsiElement psi = CommonDataKeys.PSI_ELEMENT.getData((DataProvider) object)-->Line_53 $$ curElements.add(psi)[ FD ]
Line_214 $$ int selectedIndex = myList.getSelectedIndex()-->Line_219 $$ rebuildList(selectedIndex, myRebuildDelay, ModalityState.current(), null)[ FD ]
Line_150 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_161 $$ if (upShortcuts.contains(stroke)) [ CD ]
Line_50 $$ if (object instanceof DataProvider) -->Line_51 $$ final PsiElement psi = CommonDataKeys.PSI_ELEMENT.getData((DataProvider) object)[ CD ]
Line_185 $$ if (myList.getSelectedValue() == EXTRA_ELEM) -->Line_188 $$ e.consume()[ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_89 $$ myTextField.setFont(editorFont)[ CD ]
Line_159 $$ final int keyCode-->Line_162 $$ keyCode = KeyEvent.VK_UP[ FD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_207 $$ myList.setSelectionMode(allowMultipleSelection ? ListSelectionModel.MULTIPLE_INTERVAL_SELECTION : ListSelectionModel.SINGLE_SELECTION)[ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_9 $$ if (myModel.getPromptText() != null) [ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_29 $$ addCard(myCheckBox, CHECK_BOX_CARD)[ CD ]
Line_163 $$ if (downShortcuts.contains(stroke)) -->Line_166 $$ keyCode = e.getKeyCode()[ CD ]
Line_100 $$ myTextField.addFocusListener(new FocusAdapter() -->Line_216 $$ if (selectedCellBounds != null && selectedCellBounds.contains(e.getPoint())) [ FD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_66 $$ if (myToolArea == null) [ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_36 $$ myCard.show(myCardContainer, CHECK_BOX_CARD)[ CD ]
Line_47 $$ for (Object object : objects) -->Line_50 $$ if (object instanceof DataProvider) [ FD ]
Line_150 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_170 $$ ScrollingUtil.moveDown(myList, e.getModifiersEx())[ FD ]
Line_150 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_173 $$ ScrollingUtil.moveUp(myList, e.getModifiersEx())[ FD ]
Line_6 $$ final JPanel hBox = new JPanel()-->Line_38 $$ hBox.add(myCardContainer)[ FD ]
Line_74 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_80 $$ final Object chosenElement = getChosenElement()[ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_243 $$ myListScrollPane = ScrollPaneFactory.createScrollPane(myList)[ CD ]
Line_234 $$ if (myList.getSelectedValue() != NON_PREFIX_SEPARATOR) -->Line_238 $$ if (allowMultipleSelection) [ CD ]
Line_32 $$ JPanel searching = new JPanel(new BorderLayout(5, 0))-->Line_33 $$ searching.add(new AsyncProcessIcon("searching"), BorderLayout.WEST)[ FD ]
Line_107 $$ popup.addListener(new JBPopupListener.Adapter() -->Line_109 $$ if (event.isOk()) [ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_26 $$ if (checkBoxName == null) [ CD ]
Line_150 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_152 $$ if (e.getKeyCode() == KeyEvent.VK_ENTER && (e.getModifiers() & InputEvent.SHIFT_MASK) != 0) [ FD ]
Line_208 $$ new ClickListener() -->Line_216 $$ if (selectedCellBounds != null && selectedCellBounds.contains(e.getPoint())) [ FD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_37 $$ if (isCheckboxVisible()) [ CD ]
Line_8 $$ JPanel caption2Tools = new JPanel(new BorderLayout())-->Line_71 $$ myTextFieldPanel.add(caption2Tools)[ FD ]
Line_100 $$ myTextField.addFocusListener(new FocusAdapter() -->Line_173 $$ ScrollingUtil.moveUp(myList, e.getModifiersEx())[ FD ]
Line_208 $$ new ClickListener() -->Line_226 $$ return false[ CD ]
Line_9 $$ if (myModel.getPromptText() != null) -->Line_10 $$ JLabel label = new JLabel(myModel.getPromptText())[ CD ]
Line_106 $$ if (popup != null) -->Line_116 $$ if (oppositeComponent == myCheckBox) [ CD ]
Line_46 $$ List<PsiElement> curElements = prefixMatchElements-->Line_53 $$ curElements.add(psi)[ FD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_90 $$ if (checkBoxName != null) [ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_134 $$ if (myCheckBox != null) [ CD ]
Line_103 $$ myHideAlarm.addRequest(new Runnable() -->Line_106 $$ if (popup != null) [ CD ]
Line_238 $$ if (allowMultipleSelection) -->Line_239 $$ myList.setSelectedIndex(myPreviousSelectionIndex)[ CD ]
Line_50 $$ if (object instanceof DataProvider) -->Line_55 $$ if (object == NON_PREFIX_SEPARATOR) [ CD ]
Line_116 $$ if (oppositeComponent == myCheckBox) -->Line_118 $$ return[ CD ]
Line_92 $$ new DumbAwareAction("change goto check box", null, null) -->Line_188 $$ e.consume()[ FD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_5 $$ myTextFieldPanel.setLayout(new BoxLayout(myTextFieldPanel, BoxLayout.Y_AXIS))[ CD ]
Line_92 $$ new DumbAwareAction("change goto check box", null, null) -->Line_194 $$ ScrollingUtil.moveUp(myList, e.getModifiersEx())[ FD ]
Line_6 $$ final JPanel hBox = new JPanel()-->Line_70 $$ hBox.add(toolbarComponent)[ FD ]
Line_142 $$ myTextField.getDocument().addDocumentListener(new DocumentAdapter() -->Line_216 $$ if (selectedCellBounds != null && selectedCellBounds.contains(e.getPoint())) [ FD ]
Line_45 $$ final List<PsiElement> nonPrefixMatchElements = new ArrayList<PsiElement>(objects.length)-->Line_59 $$ return new PsiElement[][] [ FD ]
Line_100 $$ myTextField.addFocusListener(new FocusAdapter() -->Line_102 $$ cancelListUpdater()[ CD ]
Line_235 $$ myPreviousSelectionIndex = myList.getSelectedIndex()-->Line_239 $$ myList.setSelectedIndex(myPreviousSelectionIndex)[ FD ]
Line_99 $$ if (isCloseByFocusLost()) -->Line_100 $$ myTextField.addFocusListener(new FocusAdapter() [ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_231 $$ myList.addListSelectionListener(new ListSelectionListener() [ CD ]
Line_92 $$ new DumbAwareAction("change goto check box", null, null) -->Line_173 $$ ScrollingUtil.moveUp(myList, e.getModifiersEx())[ FD ]
Line_100 $$ myTextField.addFocusListener(new FocusAdapter() -->Line_194 $$ ScrollingUtil.moveUp(myList, e.getModifiersEx())[ FD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_32 $$ JPanel searching = new JPanel(new BorderLayout(5, 0))[ CD ]
Line_216 $$ if (selectedCellBounds != null && selectedCellBounds.contains(e.getPoint())) -->Line_217 $$ if (myList.getSelectedValue() == EXTRA_ELEM) [ CD ]
Line_210 $$ if (!myTextField.hasFocus()) -->Line_211 $$ IdeFocusManager.getInstance(myProject).requestFocus(myTextField, true)[ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_17 $$ caption2Tools.add(hBox, BorderLayout.EAST)[ CD ]
Line_120 $$ if (oppositeComponent != null && !(oppositeComponent instanceof JFrame) && myList.isShowing() && (oppositeComponent == myList || SwingUtilities.isDescendingFrom(myList, oppositeComponent))) -->Line_122 $$ return[ CD ]
Line_46 $$ List<PsiElement> curElements = prefixMatchElements-->Line_49 $$ curElements.add((PsiElement) object)[ FD ]
Line_107 $$ popup.addListener(new JBPopupListener.Adapter() -->Line_109 $$ if (event.isOk()) [ FD ]
Line_105 $$ JBPopup popup = JBPopupFactory.getInstance().getChildFocusedPopup(e.getComponent())-->Line_107 $$ popup.addListener(new JBPopupListener.Adapter() [ FD ]
Line_150 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_192 $$ if (myList.getSelectedValue() == NON_PREFIX_SEPARATOR) [ CD ]
Line_80 $$ final Object chosenElement = getChosenElement()-->Line_81 $$ if (chosenElement instanceof PsiElement) [ FD ]
Line_92 $$ new DumbAwareAction("change goto check box", null, null) -->Line_166 $$ keyCode = e.getKeyCode()[ FD ]
Line_74 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_152 $$ if (e.getKeyCode() == KeyEvent.VK_ENTER && (e.getModifiers() & InputEvent.SHIFT_MASK) != 0) [ FD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_30 $$ addCard(new HintLabel(myModel.getNotInMessage()), NOT_FOUND_IN_PROJECT_CARD)[ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_245 $$ myTextFieldPanel.setBorder(JBUI.Borders.empty(5))[ CD ]
Line_47 $$ for (Object object : objects) -->Line_48 $$ if (object instanceof PsiElement) [ FD ]
Line_6 $$ final JPanel hBox = new JPanel()-->Line_7 $$ hBox.setLayout(new BoxLayout(hBox, BoxLayout.X_AXIS))[ FD ]
Line_41 $$ group.add(new ShowFindUsagesAction() -->Line_43 $$ final Object[] objects = myListModel.toArray()[ CD ]
Line_46 $$ List<PsiElement> curElements = prefixMatchElements-->Line_56 $$ curElements = nonPrefixMatchElements[ FD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_7 $$ hBox.setLayout(new BoxLayout(hBox, BoxLayout.X_AXIS))[ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_99 $$ if (isCloseByFocusLost()) [ CD ]
Line_150 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_152 $$ if (e.getKeyCode() == KeyEvent.VK_ENTER && (e.getModifiers() & InputEvent.SHIFT_MASK) != 0) [ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_149 $$ final Set<KeyStroke> downShortcuts = getShortcuts(IdeActions.ACTION_EDITOR_MOVE_CARET_DOWN)[ CD ]
Line_92 $$ new DumbAwareAction("change goto check box", null, null) -->Line_152 $$ if (e.getKeyCode() == KeyEvent.VK_ENTER && (e.getModifiers() & InputEvent.SHIFT_MASK) != 0) [ FD ]
Line_55 $$ if (object == NON_PREFIX_SEPARATOR) -->Line_56 $$ curElements = nonPrefixMatchElements[ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_246 $$ showTextFieldPanel()[ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_248 $$ if (modalityState != null) [ CD ]
Line_214 $$ int selectedIndex = myList.getSelectedIndex()-->Line_215 $$ Rectangle selectedCellBounds = myList.getCellBounds(selectedIndex, selectedIndex)[ FD ]
Line_150 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_160 $$ KeyStroke stroke = KeyStroke.getKeyStrokeForEvent(e)[ FD ]
Line_161 $$ if (upShortcuts.contains(stroke)) -->Line_162 $$ keyCode = KeyEvent.VK_UP[ CD ]
Line_150 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_166 $$ keyCode = e.getKeyCode()[ FD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_21 $$ myCheckBox.setAlignmentX(SwingConstants.RIGHT)[ CD ]
Line_8 $$ JPanel caption2Tools = new JPanel(new BorderLayout())-->Line_17 $$ caption2Tools.add(hBox, BorderLayout.EAST)[ FD ]
Line_106 $$ if (popup != null) -->Line_127 $$ hideHint()[ CD ]
Line_100 $$ myTextField.addFocusListener(new FocusAdapter() -->Line_188 $$ e.consume()[ FD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_34 $$ searching.add(new HintLabel(IdeBundle.message("label.choosebyname.searching")), BorderLayout.CENTER)[ CD ]
Line_162 $$ keyCode = KeyEvent.VK_UP-->Line_164 $$ keyCode = KeyEvent.VK_DOWN[ FD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_41 $$ group.add(new ShowFindUsagesAction() [ CD ]
Line_150 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_216 $$ if (selectedCellBounds != null && selectedCellBounds.contains(e.getPoint())) [ FD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_63 $$ actionToolbar.setLayoutPolicy(ActionToolbar.NOWRAP_LAYOUT_POLICY)[ CD ]
Line_41 $$ group.add(new ShowFindUsagesAction() -->Line_59 $$ return new PsiElement[][] [ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_62 $$ final ActionToolbar actionToolbar = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, group, true)[ CD ]
Line_213 $$ if (clickCount == 2) -->Line_216 $$ if (selectedCellBounds != null && selectedCellBounds.contains(e.getPoint())) [ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_142 $$ myTextField.getDocument().addDocumentListener(new DocumentAdapter() [ CD ]
Line_152 $$ if (e.getKeyCode() == KeyEvent.VK_ENTER && (e.getModifiers() & InputEvent.SHIFT_MASK) != 0) -->Line_154 $$ close(true)[ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_248 $$ if (modalityState != null) [ FD ]
Line_47 $$ for (Object object : objects) -->Line_55 $$ if (object == NON_PREFIX_SEPARATOR) [ FD ]
Line_52 $$ if (psi != null) -->Line_53 $$ curElements.add(psi)[ CD ]
Line_120 $$ if (oppositeComponent != null && !(oppositeComponent instanceof JFrame) && myList.isShowing() && (oppositeComponent == myList || SwingUtilities.isDescendingFrom(myList, oppositeComponent))) -->Line_121 $$ IdeFocusManager.getInstance(myProject).requestFocus(myTextField, true)[ CD ]
Line_159 $$ final int keyCode-->Line_164 $$ keyCode = KeyEvent.VK_DOWN[ FD ]
Line_142 $$ myTextField.getDocument().addDocumentListener(new DocumentAdapter() -->Line_160 $$ KeyStroke stroke = KeyStroke.getKeyStrokeForEvent(e)[ FD ]
Line_213 $$ if (clickCount == 2) -->Line_224 $$ return true[ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_19 $$ final String checkBoxName = myModel.getCheckBoxName()[ CD ]
Line_48 $$ if (object instanceof PsiElement) -->Line_50 $$ if (object instanceof DataProvider) [ CD ]
Line_6 $$ final JPanel hBox = new JPanel()-->Line_69 $$ hBox.add(myToolArea)[ FD ]
Line_105 $$ JBPopup popup = JBPopupFactory.getInstance().getChildFocusedPopup(e.getComponent())-->Line_106 $$ if (popup != null) [ FD ]
Line_135 $$ myCheckBox.addItemListener(new ItemListener() -->Line_170 $$ ScrollingUtil.moveDown(myList, e.getModifiersEx())[ FD ]
Line_41 $$ group.add(new ShowFindUsagesAction() -->Line_44 $$ final List<PsiElement> prefixMatchElements = new ArrayList<PsiElement>(objects.length)[ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_244 $$ myListScrollPane.setViewportBorder(JBUI.Borders.empty())[ CD ]
Line_163 $$ if (downShortcuts.contains(stroke)) -->Line_164 $$ keyCode = KeyEvent.VK_DOWN[ CD ]
Line_41 $$ group.add(new ShowFindUsagesAction() -->Line_46 $$ List<PsiElement> curElements = prefixMatchElements[ CD ]
Line_150 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_156 $$ if (!myListScrollPane.isVisible()) [ CD ]
Line_74 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_188 $$ e.consume()[ FD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_25 $$ myCheckBox.setSelected(myModel.loadInitialCheckBoxState())[ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_8 $$ JPanel caption2Tools = new JPanel(new BorderLayout())[ CD ]
Line_76 $$ if (myTextField.getSelectedText() != null) -->Line_77 $$ actionMap.getParent().get(DefaultEditorKit.copyAction).actionPerformed(e)[ CD ]
Line_10 $$ JLabel label = new JLabel(myModel.getPromptText())-->Line_14 $$ label.setFont(UIUtil.getLabelFont().deriveFont(Font.BOLD))[ FD ]
Line_213 $$ if (clickCount == 2) -->Line_214 $$ int selectedIndex = myList.getSelectedIndex()[ CD ]
Line_74 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_77 $$ actionMap.getParent().get(DefaultEditorKit.copyAction).actionPerformed(e)[ FD ]
Line_100 $$ myTextField.addFocusListener(new FocusAdapter() -->Line_160 $$ KeyStroke stroke = KeyStroke.getKeyStrokeForEvent(e)[ FD ]
Line_6 $$ final JPanel hBox = new JPanel()-->Line_17 $$ caption2Tools.add(hBox, BorderLayout.EAST)[ FD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_208 $$ new ClickListener() [ CD ]
Line_135 $$ myCheckBox.addItemListener(new ItemListener() -->Line_137 $$ rebuildList(false)[ CD ]
Line_201 $$ myTextField.addActionListener(new ActionListener() -->Line_203 $$ doClose(true)[ CD ]
Line_134 $$ if (myCheckBox != null) -->Line_135 $$ myCheckBox.addItemListener(new ItemListener() [ CD ]
Line_150 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_160 $$ KeyStroke stroke = KeyStroke.getKeyStrokeForEvent(e)[ CD ]
Line_135 $$ myCheckBox.addItemListener(new ItemListener() -->Line_152 $$ if (e.getKeyCode() == KeyEvent.VK_ENTER && (e.getModifiers() & InputEvent.SHIFT_MASK) != 0) [ FD ]
Line_213 $$ if (clickCount == 2) -->Line_215 $$ Rectangle selectedCellBounds = myList.getCellBounds(selectedIndex, selectedIndex)[ CD ]
Line_142 $$ myTextField.getDocument().addDocumentListener(new DocumentAdapter() -->Line_170 $$ ScrollingUtil.moveDown(myList, e.getModifiersEx())[ FD ]
Line_100 $$ myTextField.addFocusListener(new FocusAdapter() -->Line_170 $$ ScrollingUtil.moveDown(myList, e.getModifiersEx())[ FD ]
Line_135 $$ myCheckBox.addItemListener(new ItemListener() -->Line_216 $$ if (selectedCellBounds != null && selectedCellBounds.contains(e.getPoint())) [ FD ]
Line_142 $$ myTextField.getDocument().addDocumentListener(new DocumentAdapter() -->Line_166 $$ keyCode = e.getKeyCode()[ FD ]
Line_92 $$ new DumbAwareAction("change goto check box", null, null) -->Line_170 $$ ScrollingUtil.moveDown(myList, e.getModifiersEx())[ FD ]
Line_32 $$ JPanel searching = new JPanel(new BorderLayout(5, 0))-->Line_35 $$ addCard(searching, SEARCHING_CARD)[ FD ]
Line_41 $$ group.add(new ShowFindUsagesAction() -->Line_45 $$ final List<PsiElement> nonPrefixMatchElements = new ArrayList<PsiElement>(objects.length)[ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_73 $$ actionMap.setParent(myTextField.getActionMap())[ CD ]
Line_100 $$ myTextField.addFocusListener(new FocusAdapter() -->Line_103 $$ myHideAlarm.addRequest(new Runnable() [ CD ]
Line_100 $$ myTextField.addFocusListener(new FocusAdapter() -->Line_105 $$ JBPopup popup = JBPopupFactory.getInstance().getChildFocusedPopup(e.getComponent())[ FD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_6 $$ final JPanel hBox = new JPanel()[ CD ]
Line_2 $$ protected void initUI(final ChooseByNamePopupComponent.Callback callback, final ModalityState modalityState, final boolean allowMultipleSelection) -->Line_3 $$ myPreviouslyFocusedComponent = WindowManagerEx.getInstanceEx().getFocusedComponent(myProject)[ CD ]
Line_208 $$ new ClickListener() -->Line_210 $$ if (!myTextField.hasFocus()) [ CD ]
