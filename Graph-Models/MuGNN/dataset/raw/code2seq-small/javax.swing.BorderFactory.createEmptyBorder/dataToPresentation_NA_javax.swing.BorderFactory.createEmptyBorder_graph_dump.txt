Line_23 $$ final JPanel wholeWrapper = new JPanel(new BorderLayout())-->Line_32 $$ wholeWrapper.add(topPanel, BorderLayout.NORTH)[ FD ]
Line_2 $$ protected JPanel dataToPresentation(ValueWithVcsException<List<BeforeAfter<DiffContent>>> value) -->Line_3 $$ if (value == null)[ FD ]
Line_2 $$ protected JPanel dataToPresentation(ValueWithVcsException<List<BeforeAfter<DiffContent>>> value) -->Line_7 $$ contents = value.get()[ FD ]
Line_2 $$ protected JPanel dataToPresentation(ValueWithVcsException<List<BeforeAfter<DiffContent>>> value) -->Line_25 $$ final JPanel wrapper = new JPanel()[ CD ]
Line_2 $$ protected JPanel dataToPresentation(ValueWithVcsException<List<BeforeAfter<DiffContent>>> value) -->Line_21 $$ myPanel.setContents(contents.get(0).getBefore(), contents.get(0).getAfter())[ CD ]
Line_2 $$ protected JPanel dataToPresentation(ValueWithVcsException<List<BeforeAfter<DiffContent>>> value) -->Line_24 $$ final JPanel topPanel = new JPanel(new BorderLayout())[ CD ]
Line_5 $$ final List<BeforeAfter<DiffContent>> contents-->Line_8 $$ if (contents == null)[ FD ]
Line_24 $$ final JPanel topPanel = new JPanel(new BorderLayout())-->Line_31 $$ topPanel.add(wrapper, BorderLayout.CENTER)[ FD ]
Line_2 $$ protected JPanel dataToPresentation(ValueWithVcsException<List<BeforeAfter<DiffContent>>> value) -->Line_27 $$ wrapper.setLayout(boxLayout)[ CD ]
Line_2 $$ protected JPanel dataToPresentation(ValueWithVcsException<List<BeforeAfter<DiffContent>>> value) -->Line_32 $$ wholeWrapper.add(topPanel, BorderLayout.NORTH)[ CD ]
Line_10 $$ if (isUnknownType(contents)) -->Line_11 $$ return UIVcsUtil.errorPanel(DiffBundle.message("diff.can.not.show.unknown"), false)[ CD ]
Line_2 $$ protected JPanel dataToPresentation(ValueWithVcsException<List<BeforeAfter<DiffContent>>> value) -->Line_33 $$ wholeWrapper.add(myPanel.getComponent(), BorderLayout.CENTER)[ CD ]
Line_2 $$ protected JPanel dataToPresentation(ValueWithVcsException<List<BeforeAfter<DiffContent>>> value) -->Line_30 $$ wrapper.add(label)[ CD ]
Line_2 $$ protected JPanel dataToPresentation(ValueWithVcsException<List<BeforeAfter<DiffContent>>> value) -->Line_5 $$ final List<BeforeAfter<DiffContent>> contents[ CD ]
Line_7 $$ contents = value.get()-->Line_8 $$ if (contents == null)[ FD ]
Line_7 $$ contents = value.get()-->Line_20 $$ assert contents.size() == 1[ FD ]
Line_25 $$ final JPanel wrapper = new JPanel()-->Line_30 $$ wrapper.add(label)[ FD ]
Line_26 $$ final BoxLayout boxLayout = new BoxLayout(wrapper, BoxLayout.X_AXIS)-->Line_27 $$ wrapper.setLayout(boxLayout)[ FD ]
Line_28 $$ final JLabel label = new JLabel(changeDescription(myChange))-->Line_30 $$ wrapper.add(label)[ FD ]
Line_5 $$ final List<BeforeAfter<DiffContent>> contents-->Line_13 $$ if (isEmpty(contents))[ FD ]
Line_7 $$ contents = value.get()-->Line_10 $$ if (isUnknownType(contents)) [ FD ]
Line_5 $$ final List<BeforeAfter<DiffContent>> contents-->Line_18 $$ if (contents.isEmpty())[ FD ]
Line_5 $$ final List<BeforeAfter<DiffContent>> contents-->Line_10 $$ if (isUnknownType(contents)) [ FD ]
Line_2 $$ protected JPanel dataToPresentation(ValueWithVcsException<List<BeforeAfter<DiffContent>>> value) -->Line_28 $$ final JLabel label = new JLabel(changeDescription(myChange))[ CD ]
Line_2 $$ protected JPanel dataToPresentation(ValueWithVcsException<List<BeforeAfter<DiffContent>>> value) -->Line_29 $$ label.setBorder(BorderFactory.createEmptyBorder(1, 2, 0, 0))[ CD ]
Line_25 $$ final JPanel wrapper = new JPanel()-->Line_31 $$ topPanel.add(wrapper, BorderLayout.CENTER)[ FD ]
Line_7 $$ contents = value.get()-->Line_21 $$ myPanel.setContents(contents.get(0).getBefore(), contents.get(0).getAfter())[ FD ]
Line_2 $$ protected JPanel dataToPresentation(ValueWithVcsException<List<BeforeAfter<DiffContent>>> value) -->Line_22 $$ ((DiffPanelImpl) myPanel).getOptions().setRequestFocusOnNewContent(false)[ CD ]
Line_2 $$ protected JPanel dataToPresentation(ValueWithVcsException<List<BeforeAfter<DiffContent>>> value) -->Line_3 $$ if (value == null)[ CD ]
Line_3 $$ if (value == null)-->Line_4 $$ return noDifferences()[ CD ]
Line_18 $$ if (contents.isEmpty())-->Line_19 $$ return noDifferences()[ CD ]
Line_5 $$ final List<BeforeAfter<DiffContent>> contents-->Line_20 $$ assert contents.size() == 1[ FD ]
Line_2 $$ protected JPanel dataToPresentation(ValueWithVcsException<List<BeforeAfter<DiffContent>>> value) -->Line_26 $$ final BoxLayout boxLayout = new BoxLayout(wrapper, BoxLayout.X_AXIS)[ CD ]
Line_7 $$ contents = value.get()-->Line_13 $$ if (isEmpty(contents))[ FD ]
Line_2 $$ protected JPanel dataToPresentation(ValueWithVcsException<List<BeforeAfter<DiffContent>>> value) -->Line_18 $$ if (contents.isEmpty())[ CD ]
Line_2 $$ protected JPanel dataToPresentation(ValueWithVcsException<List<BeforeAfter<DiffContent>>> value) -->Line_23 $$ final JPanel wholeWrapper = new JPanel(new BorderLayout())[ CD ]
Line_28 $$ final JLabel label = new JLabel(changeDescription(myChange))-->Line_29 $$ label.setBorder(BorderFactory.createEmptyBorder(1, 2, 0, 0))[ FD ]
Line_2 $$ protected JPanel dataToPresentation(ValueWithVcsException<List<BeforeAfter<DiffContent>>> value) -->Line_31 $$ topPanel.add(wrapper, BorderLayout.CENTER)[ CD ]
Line_5 $$ final List<BeforeAfter<DiffContent>> contents-->Line_21 $$ myPanel.setContents(contents.get(0).getBefore(), contents.get(0).getAfter())[ FD ]
Line_5 $$ final List<BeforeAfter<DiffContent>> contents-->Line_7 $$ contents = value.get()[ FD ]
Line_24 $$ final JPanel topPanel = new JPanel(new BorderLayout())-->Line_32 $$ wholeWrapper.add(topPanel, BorderLayout.NORTH)[ FD ]
Line_7 $$ contents = value.get()-->Line_18 $$ if (contents.isEmpty())[ FD ]
Line_2 $$ protected JPanel dataToPresentation(ValueWithVcsException<List<BeforeAfter<DiffContent>>> value) -->Line_34 $$ return wholeWrapper[ CD ]
Line_23 $$ final JPanel wholeWrapper = new JPanel(new BorderLayout())-->Line_33 $$ wholeWrapper.add(myPanel.getComponent(), BorderLayout.CENTER)[ FD ]
Line_25 $$ final JPanel wrapper = new JPanel()-->Line_27 $$ wrapper.setLayout(boxLayout)[ FD ]
