Line_3 $$ final ContentEntryEditor contentEntryEditor = createContentEntryEditor(contentEntry)-->Line_11 $$ myEntryToEditorMap.put(contentEntry, contentEntryEditor)[ FD ]
Line_2 $$ protected void addContentEntryPanel(final String contentEntry) -->Line_3 $$ final ContentEntryEditor contentEntryEditor = createContentEntryEditor(contentEntry)[ CD ]
Line_15 $$ if (componentBorder != null) -->Line_16 $$ border = BorderFactory.createCompoundBorder(border, componentBorder)[ CD ]
Line_2 $$ protected void addContentEntryPanel(final String contentEntry) -->Line_14 $$ final Border componentBorder = component.getBorder()[ CD ]
Line_3 $$ final ContentEntryEditor contentEntryEditor = createContentEntryEditor(contentEntry)-->Line_8 $$ contentEntryEditor.removeContentEntryEditorListener(myContentEntryEditorListener)[ FD ]
Line_6 $$ registerDisposable(new Disposable() -->Line_8 $$ contentEntryEditor.removeContentEntryEditorListener(myContentEntryEditorListener)[ CD ]
Line_2 $$ protected void addContentEntryPanel(final String contentEntry) -->Line_4 $$ contentEntryEditor.initUI()[ CD ]
Line_2 $$ protected void addContentEntryPanel(final String contentEntry) -->Line_13 $$ final JComponent component = contentEntryEditor.getComponent()[ CD ]
Line_18 $$ if (Registry.is("ide.new.project.settings")) -->Line_19 $$ component.setBorder(new EmptyBorder(0, 0, 0, 0))[ CD ]
Line_2 $$ protected void addContentEntryPanel(final String contentEntry) -->Line_15 $$ if (componentBorder != null) [ CD ]
Line_2 $$ protected void addContentEntryPanel(final String contentEntry) -->Line_11 $$ myEntryToEditorMap.put(contentEntry, contentEntryEditor)[ CD ]
Line_3 $$ final ContentEntryEditor contentEntryEditor = createContentEntryEditor(contentEntry)-->Line_13 $$ final JComponent component = contentEntryEditor.getComponent()[ FD ]
Line_3 $$ final ContentEntryEditor contentEntryEditor = createContentEntryEditor(contentEntry)-->Line_5 $$ contentEntryEditor.addContentEntryEditorListener(myContentEntryEditorListener)[ FD ]
Line_2 $$ protected void addContentEntryPanel(final String contentEntry) -->Line_3 $$ final ContentEntryEditor contentEntryEditor = createContentEntryEditor(contentEntry)[ FD ]
Line_2 $$ protected void addContentEntryPanel(final String contentEntry) -->Line_6 $$ registerDisposable(new Disposable() [ CD ]
Line_2 $$ protected void addContentEntryPanel(final String contentEntry) -->Line_11 $$ myEntryToEditorMap.put(contentEntry, contentEntryEditor)[ FD ]
Line_2 $$ protected void addContentEntryPanel(final String contentEntry) -->Line_5 $$ contentEntryEditor.addContentEntryEditorListener(myContentEntryEditorListener)[ CD ]
Line_3 $$ final ContentEntryEditor contentEntryEditor = createContentEntryEditor(contentEntry)-->Line_4 $$ contentEntryEditor.initUI()[ FD ]
Line_2 $$ protected void addContentEntryPanel(final String contentEntry) -->Line_23 $$ myEditorsPanel.add(component)[ CD ]
Line_18 $$ if (Registry.is("ide.new.project.settings")) -->Line_21 $$ component.setBorder(border)[ CD ]
Line_2 $$ protected void addContentEntryPanel(final String contentEntry) -->Line_18 $$ if (Registry.is("ide.new.project.settings")) [ CD ]
Line_2 $$ protected void addContentEntryPanel(final String contentEntry) -->Line_12 $$ Border border = BorderFactory.createEmptyBorder(2, 2, 0, 2)[ CD ]
