Line_3 $$ final JLabel label = new JLabel(info)-->Line_8 $$ label.setFont(label.getFont().deriveFont(Font.BOLD))[ FD ]
Line_2 $$ public static void showEditorHint(final String info, final Editor editor) -->Line_3 $$ final JLabel label = new JLabel(info)[ CD ]
Line_2 $$ public static void showEditorHint(final String info, final Editor editor) -->Line_11 $$ SwingUtilities.convertPointToScreen(point, editor.getContentComponent())[ FD ]
Line_2 $$ public static void showEditorHint(final String info, final Editor editor) -->Line_11 $$ SwingUtilities.convertPointToScreen(point, editor.getContentComponent())[ CD ]
Line_2 $$ public static void showEditorHint(final String info, final Editor editor) -->Line_4 $$ label.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED, Color.WHITE, Gray._128), BorderFactory.createEmptyBorder(3, 5, 3, 5)))[ CD ]
Line_2 $$ public static void showEditorHint(final String info, final Editor editor) -->Line_9 $$ final LightweightHint h = new LightweightHint(label)[ CD ]
Line_3 $$ final JLabel label = new JLabel(info)-->Line_5 $$ label.setForeground(JBColor.foreground())[ FD ]
Line_3 $$ final JLabel label = new JLabel(info)-->Line_6 $$ label.setBackground(HintUtil.INFORMATION_COLOR)[ FD ]
Line_2 $$ public static void showEditorHint(final String info, final Editor editor) -->Line_10 $$ final Point point = editor.visualPositionToXY(editor.getCaretModel().getVisualPosition())[ FD ]
Line_2 $$ public static void showEditorHint(final String info, final Editor editor) -->Line_6 $$ label.setBackground(HintUtil.INFORMATION_COLOR)[ CD ]
Line_9 $$ final LightweightHint h = new LightweightHint(label)-->Line_13 $$ HintManagerImpl.getInstanceImpl().showEditorHint(h, editor, point, flags, 0, false)[ FD ]
Line_2 $$ public static void showEditorHint(final String info, final Editor editor) -->Line_5 $$ label.setForeground(JBColor.foreground())[ CD ]
Line_3 $$ final JLabel label = new JLabel(info)-->Line_4 $$ label.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED, Color.WHITE, Gray._128), BorderFactory.createEmptyBorder(3, 5, 3, 5)))[ FD ]
Line_3 $$ final JLabel label = new JLabel(info)-->Line_7 $$ label.setOpaque(true)[ FD ]
Line_2 $$ public static void showEditorHint(final String info, final Editor editor) -->Line_10 $$ final Point point = editor.visualPositionToXY(editor.getCaretModel().getVisualPosition())[ CD ]
Line_10 $$ final Point point = editor.visualPositionToXY(editor.getCaretModel().getVisualPosition())-->Line_13 $$ HintManagerImpl.getInstanceImpl().showEditorHint(h, editor, point, flags, 0, false)[ FD ]
Line_2 $$ public static void showEditorHint(final String info, final Editor editor) -->Line_7 $$ label.setOpaque(true)[ CD ]
Line_2 $$ public static void showEditorHint(final String info, final Editor editor) -->Line_8 $$ label.setFont(label.getFont().deriveFont(Font.BOLD))[ CD ]
Line_12 $$ final int flags = HintManager.HIDE_BY_ANY_KEY | HintManager.HIDE_BY_SCROLLING-->Line_13 $$ HintManagerImpl.getInstanceImpl().showEditorHint(h, editor, point, flags, 0, false)[ FD ]
Line_2 $$ public static void showEditorHint(final String info, final Editor editor) -->Line_13 $$ HintManagerImpl.getInstanceImpl().showEditorHint(h, editor, point, flags, 0, false)[ FD ]
Line_2 $$ public static void showEditorHint(final String info, final Editor editor) -->Line_12 $$ final int flags = HintManager.HIDE_BY_ANY_KEY | HintManager.HIDE_BY_SCROLLING[ CD ]
Line_10 $$ final Point point = editor.visualPositionToXY(editor.getCaretModel().getVisualPosition())-->Line_11 $$ SwingUtilities.convertPointToScreen(point, editor.getContentComponent())[ FD ]
Line_2 $$ public static void showEditorHint(final String info, final Editor editor) -->Line_13 $$ HintManagerImpl.getInstanceImpl().showEditorHint(h, editor, point, flags, 0, false)[ CD ]
