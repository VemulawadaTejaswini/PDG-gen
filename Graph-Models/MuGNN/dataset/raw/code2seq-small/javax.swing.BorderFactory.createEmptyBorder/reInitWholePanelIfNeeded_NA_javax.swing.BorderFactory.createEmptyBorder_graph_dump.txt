Line_13 $$ TreePath eachPath = myTree.getPathForRow(eachRow)-->Line_14 $$ Object component = eachPath.getLastPathComponent()[ FD ]
Line_3 $$ if (!myToReInitWholePanel)-->Line_4 $$ return[ CD ]
Line_2 $$ protected void reInitWholePanelIfNeeded() -->Line_3 $$ if (!myToReInitWholePanel)[ CD ]
Line_30 $$ if (isNewProjectSettings()) -->Line_33 $$ if (group != null) [ CD ]
Line_2 $$ protected void reInitWholePanelIfNeeded() -->Line_49 $$ mySplitter.setSecondComponent(right)[ CD ]
Line_9 $$ TreeModel m = myTree.getModel()-->Line_10 $$ if (m instanceof DefaultTreeModel) [ FD ]
Line_12 $$ for (int eachRow = 0; eachRow < myTree.getRowCount(); eachRow++) -->Line_14 $$ Object component = eachPath.getLastPathComponent()[ CD ]
Line_24 $$ JPanel left = new JPanel(new BorderLayout()) -->Line_26 $$ final Dimension original = super.getMinimumSize()[ CD ]
Line_5 $$ myWholePanel = new JPanel(new BorderLayout()) -->Line_9 $$ TreeModel m = myTree.getModel()[ CD ]
Line_2 $$ protected void reInitWholePanelIfNeeded() -->Line_45 $$ right.add(myDetails.getComponent(), BorderLayout.CENTER)[ CD ]
Line_30 $$ if (isNewProjectSettings()) -->Line_37 $$ myNorthPanel.setVisible(false)[ CD ]
Line_46 $$ if (!isNewProjectSettings()) -->Line_47 $$ myWholePanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10))[ CD ]
Line_5 $$ myWholePanel = new JPanel(new BorderLayout()) -->Line_7 $$ super.addNotify()[ CD ]
Line_30 $$ if (isNewProjectSettings()) -->Line_39 $$ left.add(myNorthPanel, BorderLayout.NORTH)[ CD ]
Line_2 $$ protected void reInitWholePanelIfNeeded() -->Line_46 $$ if (!isNewProjectSettings()) [ CD ]
Line_30 $$ if (isNewProjectSettings()) -->Line_40 $$ myMaster = ScrollPaneFactory.createScrollPane(myTree)[ CD ]
Line_14 $$ Object component = eachPath.getLastPathComponent()-->Line_15 $$ if (component instanceof TreeNode) [ FD ]
Line_30 $$ if (isNewProjectSettings()) -->Line_32 $$ DefaultActionGroup group = createToolbarActionGroup()[ CD ]
Line_12 $$ for (int eachRow = 0; eachRow < myTree.getRowCount(); eachRow++) -->Line_15 $$ if (component instanceof TreeNode) [ CD ]
Line_2 $$ protected void reInitWholePanelIfNeeded() -->Line_42 $$ left.add(myMaster, BorderLayout.CENTER)[ CD ]
Line_2 $$ protected void reInitWholePanelIfNeeded() -->Line_43 $$ mySplitter.setFirstComponent(left)[ CD ]
Line_2 $$ protected void reInitWholePanelIfNeeded() -->Line_50 $$ GuiUtils.replaceJSplitPaneWithIDEASplitter(myWholePanel)[ CD ]
Line_11 $$ DefaultTreeModel model = (DefaultTreeModel) m-->Line_16 $$ model.nodeChanged((TreeNode) component)[ FD ]
Line_2 $$ protected void reInitWholePanelIfNeeded() -->Line_23 $$ myWholePanel.add(mySplitter, BorderLayout.CENTER)[ CD ]
Line_5 $$ myWholePanel = new JPanel(new BorderLayout()) -->Line_10 $$ if (m instanceof DefaultTreeModel) [ CD ]
Line_10 $$ if (m instanceof DefaultTreeModel) -->Line_11 $$ DefaultTreeModel model = (DefaultTreeModel) m[ CD ]
Line_2 $$ protected void reInitWholePanelIfNeeded() -->Line_22 $$ mySplitter.setHonorComponentsMinimumSize(true)[ CD ]
Line_10 $$ if (m instanceof DefaultTreeModel) -->Line_12 $$ for (int eachRow = 0; eachRow < myTree.getRowCount(); eachRow++) [ CD ]
Line_24 $$ JPanel left = new JPanel(new BorderLayout()) -->Line_27 $$ return new Dimension(Math.max(original.width, 100), original.height)[ CD ]
Line_2 $$ protected void reInitWholePanelIfNeeded() -->Line_30 $$ if (isNewProjectSettings()) [ CD ]
Line_30 $$ if (isNewProjectSettings()) -->Line_36 $$ myMaster = decorator.setAsUsualTopToolbar().setPanelBorder(JBUI.Borders.empty()).createPanel()[ CD ]
Line_12 $$ for (int eachRow = 0; eachRow < myTree.getRowCount(); eachRow++) -->Line_13 $$ TreePath eachPath = myTree.getPathForRow(eachRow)[ CD ]
Line_5 $$ myWholePanel = new JPanel(new BorderLayout()) -->Line_8 $$ MasterDetailsComponent.this.addNotify()[ CD ]
Line_12 $$ for (int eachRow = 0; eachRow < myTree.getRowCount(); eachRow++) -->Line_13 $$ TreePath eachPath = myTree.getPathForRow(eachRow)[ FD ]
Line_30 $$ if (isNewProjectSettings()) -->Line_31 $$ ToolbarDecorator decorator = ToolbarDecorator.createDecorator(myTree)[ CD ]
Line_33 $$ if (group != null) -->Line_34 $$ decorator.setActionGroup(group)[ CD ]
Line_15 $$ if (component instanceof TreeNode) -->Line_16 $$ model.nodeChanged((TreeNode) component)[ CD ]
