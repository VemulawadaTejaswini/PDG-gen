Line_41 $$ final JComponent jComponent = (JComponent) component-->Line_44 $$ jComponent.setToolTipText(TooltipUtils.getTooltipText(errorDescriptors))[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_32 $$ if (table.getModel().getColumnCount() - 1 == column) [ CD ]
Line_3 $$ final Component component = myRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)-->Line_36 $$ wrapper.setBackground(component.getBackground())[ FD ]
Line_34 $$ final JPanel wrapper = new JPanel(new BorderLayout())-->Line_36 $$ wrapper.setBackground(component.getBackground())[ FD ]
Line_41 $$ final JComponent jComponent = (JComponent) component-->Line_42 $$ wrapper.setBorder(jComponent.getBorder())[ FD ]
Line_13 $$ if (hasErrors) -->Line_15 $$ if (component instanceof JComponent) [ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_32 $$ if (table.getModel().getColumnCount() - 1 == column) [ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_53 $$ return component[ CD ]
Line_8 $$ final DomElementsProblemsHolder holder = annotationsManager.getCachedProblemHolder(myRoot)-->Line_9 $$ final List<DomElementProblemDescriptor> errorProblems = holder.getProblems(myCellValueDomElement)[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_8 $$ final DomElementsProblemsHolder holder = annotationsManager.getCachedProblemHolder(myRoot)[ CD ]
Line_9 $$ final List<DomElementProblemDescriptor> errorProblems = holder.getProblems(myCellValueDomElement)-->Line_16 $$ ((JComponent) component).setToolTipText(TooltipUtils.getTooltipText(errorProblems))[ FD ]
Line_31 $$ final List<DomElementProblemDescriptor> errorDescriptors = annotationsManager.getCachedProblemHolder(myRowDomElement).getProblems(myRowDomElement, true, true)-->Line_38 $$ wrapper.setToolTipText(TooltipUtils.getTooltipText(errorDescriptors))[ FD ]
Line_24 $$ if (hasErrors && (value == null || value.toString().trim().length() == 0)) -->Line_25 $$ component.setBackground(BaseControl.ERROR_BACKGROUND)[ CD ]
Line_3 $$ final Component component = myRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)-->Line_20 $$ if (component instanceof JComponent) [ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_11 $$ warningProblems.removeAll(errorProblems)[ CD ]
Line_34 $$ final JPanel wrapper = new JPanel(new BorderLayout())-->Line_42 $$ wrapper.setBorder(jComponent.getBorder())[ FD ]
Line_3 $$ final Component component = myRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)-->Line_15 $$ if (component instanceof JComponent) [ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_13 $$ if (hasErrors) [ CD ]
Line_13 $$ if (hasErrors) -->Line_14 $$ component.setForeground(JBColor.RED)[ CD ]
Line_3 $$ final Component component = myRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)-->Line_19 $$ component.setForeground(isSelected ? table.getSelectionForeground() : table.getForeground())[ FD ]
Line_20 $$ if (component instanceof JComponent) -->Line_21 $$ ((JComponent) component).setToolTipText(null)[ CD ]
Line_33 $$ if (errorDescriptors.size() > 0) -->Line_34 $$ final JPanel wrapper = new JPanel(new BorderLayout())[ CD ]
Line_10 $$ final List<DomElementProblemDescriptor> warningProblems = new ArrayList<DomElementProblemDescriptor>(holder.getProblems(myCellValueDomElement, true, HighlightSeverity.WARNING))-->Line_26 $$ if (warningProblems.size() > 0) [ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_24 $$ if (hasErrors && (value == null || value.toString().trim().length() == 0)) [ CD ]
Line_26 $$ if (warningProblems.size() > 0) -->Line_28 $$ if (isSelected)[ CD ]
Line_40 $$ if (component instanceof JComponent) -->Line_42 $$ wrapper.setBorder(jComponent.getBorder())[ CD ]
Line_13 $$ if (hasErrors) -->Line_19 $$ component.setForeground(isSelected ? table.getSelectionForeground() : table.getForeground())[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_12 $$ final boolean hasErrors = errorProblems.size() > 0[ CD ]
Line_31 $$ final List<DomElementProblemDescriptor> errorDescriptors = annotationsManager.getCachedProblemHolder(myRowDomElement).getProblems(myRowDomElement, true, true)-->Line_33 $$ if (errorDescriptors.size() > 0) [ FD ]
Line_13 $$ if (hasErrors) -->Line_20 $$ if (component instanceof JComponent) [ CD ]
Line_7 $$ final DomElementAnnotationsManager annotationsManager = DomElementAnnotationsManager.getInstance(myRowDomElement.getManager().getProject())-->Line_31 $$ final List<DomElementProblemDescriptor> errorDescriptors = annotationsManager.getCachedProblemHolder(myRowDomElement).getProblems(myRowDomElement, true, true)[ FD ]
Line_32 $$ if (table.getModel().getColumnCount() - 1 == column) -->Line_33 $$ if (errorDescriptors.size() > 0) [ CD ]
Line_33 $$ if (errorDescriptors.size() > 0) -->Line_36 $$ wrapper.setBackground(component.getBackground())[ CD ]
Line_40 $$ if (component instanceof JComponent) -->Line_43 $$ jComponent.setBorder(BorderFactory.createEmptyBorder())[ CD ]
Line_48 $$ if (component instanceof JComponent) -->Line_49 $$ ((JComponent) component).setToolTipText(null)[ CD ]
Line_3 $$ final Component component = myRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)-->Line_40 $$ if (component instanceof JComponent) [ FD ]
Line_7 $$ final DomElementAnnotationsManager annotationsManager = DomElementAnnotationsManager.getInstance(myRowDomElement.getManager().getProject())-->Line_8 $$ final DomElementsProblemsHolder holder = annotationsManager.getCachedProblemHolder(myRoot)[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_19 $$ component.setForeground(isSelected ? table.getSelectionForeground() : table.getForeground())[ FD ]
Line_3 $$ final Component component = myRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)-->Line_29 $$ component.setForeground(JBColor.foreground())[ FD ]
Line_15 $$ if (component instanceof JComponent) -->Line_16 $$ ((JComponent) component).setToolTipText(TooltipUtils.getTooltipText(errorProblems))[ CD ]
Line_33 $$ if (errorDescriptors.size() > 0) -->Line_40 $$ if (component instanceof JComponent) [ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_9 $$ final List<DomElementProblemDescriptor> errorProblems = holder.getProblems(myCellValueDomElement)[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_7 $$ final DomElementAnnotationsManager annotationsManager = DomElementAnnotationsManager.getInstance(myRowDomElement.getManager().getProject())[ CD ]
Line_40 $$ if (component instanceof JComponent) -->Line_44 $$ jComponent.setToolTipText(TooltipUtils.getTooltipText(errorDescriptors))[ CD ]
Line_34 $$ final JPanel wrapper = new JPanel(new BorderLayout())-->Line_39 $$ wrapper.add(errorLabel, BorderLayout.EAST)[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_24 $$ if (hasErrors && (value == null || value.toString().trim().length() == 0)) [ FD ]
Line_33 $$ if (errorDescriptors.size() > 0) -->Line_38 $$ wrapper.setToolTipText(TooltipUtils.getTooltipText(errorDescriptors))[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_4 $$ if (!myRoot.isValid()) [ CD ]
Line_3 $$ final Component component = myRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)-->Line_48 $$ if (component instanceof JComponent) [ FD ]
Line_3 $$ final Component component = myRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)-->Line_27 $$ component.setBackground(BaseControl.WARNING_BACKGROUND)[ FD ]
Line_3 $$ final Component component = myRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)-->Line_25 $$ component.setBackground(BaseControl.ERROR_BACKGROUND)[ FD ]
Line_33 $$ if (errorDescriptors.size() > 0) -->Line_35 $$ wrapper.add(component, BorderLayout.CENTER)[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_10 $$ final List<DomElementProblemDescriptor> warningProblems = new ArrayList<DomElementProblemDescriptor>(holder.getProblems(myCellValueDomElement, true, HighlightSeverity.WARNING))[ CD ]
Line_34 $$ final JPanel wrapper = new JPanel(new BorderLayout())-->Line_38 $$ wrapper.setToolTipText(TooltipUtils.getTooltipText(errorDescriptors))[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_3 $$ final Component component = myRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)[ CD ]
Line_12 $$ final boolean hasErrors = errorProblems.size() > 0-->Line_24 $$ if (hasErrors && (value == null || value.toString().trim().length() == 0)) [ FD ]
Line_28 $$ if (isSelected)-->Line_29 $$ component.setForeground(JBColor.foreground())[ CD ]
Line_33 $$ if (errorDescriptors.size() > 0) -->Line_46 $$ return wrapper[ CD ]
Line_9 $$ final List<DomElementProblemDescriptor> errorProblems = holder.getProblems(myCellValueDomElement)-->Line_11 $$ warningProblems.removeAll(errorProblems)[ FD ]
Line_9 $$ final List<DomElementProblemDescriptor> errorProblems = holder.getProblems(myCellValueDomElement)-->Line_12 $$ final boolean hasErrors = errorProblems.size() > 0[ FD ]
Line_33 $$ if (errorDescriptors.size() > 0) -->Line_39 $$ wrapper.add(errorLabel, BorderLayout.EAST)[ CD ]
Line_10 $$ final List<DomElementProblemDescriptor> warningProblems = new ArrayList<DomElementProblemDescriptor>(holder.getProblems(myCellValueDomElement, true, HighlightSeverity.WARNING))-->Line_11 $$ warningProblems.removeAll(errorProblems)[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_3 $$ final Component component = myRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)[ FD ]
Line_24 $$ if (hasErrors && (value == null || value.toString().trim().length() == 0)) -->Line_26 $$ if (warningProblems.size() > 0) [ CD ]
Line_40 $$ if (component instanceof JComponent) -->Line_41 $$ final JComponent jComponent = (JComponent) component[ CD ]
Line_3 $$ final Component component = myRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)-->Line_14 $$ component.setForeground(JBColor.RED)[ FD ]
Line_37 $$ final JLabel errorLabel = new JLabel(getErrorIcon())-->Line_39 $$ wrapper.add(errorLabel, BorderLayout.EAST)[ FD ]
Line_33 $$ if (errorDescriptors.size() > 0) -->Line_37 $$ final JLabel errorLabel = new JLabel(getErrorIcon())[ CD ]
Line_31 $$ final List<DomElementProblemDescriptor> errorDescriptors = annotationsManager.getCachedProblemHolder(myRowDomElement).getProblems(myRowDomElement, true, true)-->Line_44 $$ jComponent.setToolTipText(TooltipUtils.getTooltipText(errorDescriptors))[ FD ]
Line_26 $$ if (warningProblems.size() > 0) -->Line_27 $$ component.setBackground(BaseControl.WARNING_BACKGROUND)[ CD ]
Line_34 $$ final JPanel wrapper = new JPanel(new BorderLayout())-->Line_35 $$ wrapper.add(component, BorderLayout.CENTER)[ FD ]
Line_4 $$ if (!myRoot.isValid()) -->Line_5 $$ return component[ CD ]
Line_41 $$ final JComponent jComponent = (JComponent) component-->Line_43 $$ jComponent.setBorder(BorderFactory.createEmptyBorder())[ FD ]
Line_33 $$ if (errorDescriptors.size() > 0) -->Line_48 $$ if (component instanceof JComponent) [ CD ]
Line_8 $$ final DomElementsProblemsHolder holder = annotationsManager.getCachedProblemHolder(myRoot)-->Line_10 $$ final List<DomElementProblemDescriptor> warningProblems = new ArrayList<DomElementProblemDescriptor>(holder.getProblems(myCellValueDomElement, true, HighlightSeverity.WARNING))[ FD ]
Line_3 $$ final Component component = myRenderer.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column)-->Line_35 $$ wrapper.add(component, BorderLayout.CENTER)[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_31 $$ final List<DomElementProblemDescriptor> errorDescriptors = annotationsManager.getCachedProblemHolder(myRowDomElement).getProblems(myRowDomElement, true, true)[ CD ]
