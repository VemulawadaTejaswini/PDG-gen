Line_12 $$ while (scanner.findInLine(pattern) != null) -->Line_16 $$ int endOffset = Integer.parseInt(match.group(3))[ CD ]
Line_13 $$ final MatchResult match = scanner.match()-->Line_14 $$ boolean expanded = "-".equals(match.group(1))[ FD ]
Line_11 $$ final List<Trinity<Boolean, Integer, Integer>> infos = new ArrayList()-->Line_17 $$ infos.add(new Trinity(expanded, startOffset, endOffset))[ FD ]
Line_19 $$ final FoldingModel foldingModel = myEditor.getFoldingModel()-->Line_20 $$ foldingModel.runBatchFoldingOperation(() -> [ FD ]
Line_22 $$ final FoldRegion region = foldingModel.addFoldRegion(info.second, info.third, "...")-->Line_24 $$ region.setExpanded(info.first)[ FD ]
Line_9 $$ Scanner scanner = new Scanner(data)-->Line_13 $$ final MatchResult match = scanner.match()[ FD ]
Line_13 $$ final MatchResult match = scanner.match()-->Line_15 $$ int startOffset = Integer.parseInt(match.group(2))[ FD ]
Line_12 $$ while (scanner.findInLine(pattern) != null) -->Line_14 $$ boolean expanded = "-".equals(match.group(1))[ CD ]
Line_12 $$ while (scanner.findInLine(pattern) != null) -->Line_13 $$ final MatchResult match = scanner.match()[ CD ]
Line_12 $$ while (scanner.findInLine(pattern) != null) -->Line_15 $$ int startOffset = Integer.parseInt(match.group(2))[ CD ]
Line_12 $$ while (scanner.findInLine(pattern) != null) -->Line_17 $$ infos.add(new Trinity(expanded, startOffset, endOffset))[ CD ]
Line_9 $$ Scanner scanner = new Scanner(data)-->Line_12 $$ while (scanner.findInLine(pattern) != null) [ FD ]
Line_13 $$ final MatchResult match = scanner.match()-->Line_16 $$ int endOffset = Integer.parseInt(match.group(3))[ FD ]
Line_19 $$ final FoldingModel foldingModel = myEditor.getFoldingModel()-->Line_22 $$ final FoldRegion region = foldingModel.addFoldRegion(info.second, info.third, "...")[ FD ]
Line_10 $$ Pattern pattern = Pattern.compile("FoldRegion ([+-])\\((\\d+):(\\d+)")-->Line_12 $$ while (scanner.findInLine(pattern) != null) [ FD ]
