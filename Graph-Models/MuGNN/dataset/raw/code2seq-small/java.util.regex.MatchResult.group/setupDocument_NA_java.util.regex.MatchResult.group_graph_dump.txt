Line_14 $$ final MatchResult match = scanner.match()-->Line_16 $$ int endOffset = Integer.parseInt(match.group(3))[ FD ]
Line_10 $$ Scanner scanner = new Scanner(data)-->Line_13 $$ while (scanner.findInLine(pattern) != null) [ FD ]
Line_12 $$ StringBuilder buffer = new StringBuilder()-->Line_22 $$ myEditor.getDocument().setText(buffer.toString())[ FD ]
Line_12 $$ StringBuilder buffer = new StringBuilder()-->Line_20 $$ buffer.setLength(buffer.length() - 1)[ FD ]
Line_11 $$ Pattern pattern = Pattern.compile("(\\d+)\\s*:\\s*(\\d+)\\s*-\\s*(\\d+)")-->Line_13 $$ while (scanner.findInLine(pattern) != null) [ FD ]
Line_13 $$ while (scanner.findInLine(pattern) != null) -->Line_17 $$ buffer.append(StringUtil.repeatSymbol('a', endOffset - startOffset)).append('\n')[ CD ]
Line_12 $$ StringBuilder buffer = new StringBuilder()-->Line_19 $$ if (buffer.length() > 0) [ FD ]
Line_13 $$ while (scanner.findInLine(pattern) != null) -->Line_15 $$ int startOffset = Integer.parseInt(match.group(2))[ CD ]
Line_13 $$ while (scanner.findInLine(pattern) != null) -->Line_14 $$ final MatchResult match = scanner.match()[ CD ]
Line_12 $$ StringBuilder buffer = new StringBuilder()-->Line_17 $$ buffer.append(StringUtil.repeatSymbol('a', endOffset - startOffset)).append('\n')[ FD ]
Line_19 $$ if (buffer.length() > 0) -->Line_20 $$ buffer.setLength(buffer.length() - 1)[ CD ]
Line_13 $$ while (scanner.findInLine(pattern) != null) -->Line_16 $$ int endOffset = Integer.parseInt(match.group(3))[ CD ]
Line_10 $$ Scanner scanner = new Scanner(data)-->Line_14 $$ final MatchResult match = scanner.match()[ FD ]
Line_14 $$ final MatchResult match = scanner.match()-->Line_15 $$ int startOffset = Integer.parseInt(match.group(2))[ FD ]
