Line_4 $$ if (entry.state == State.EXISTING) -->Line_5 $$ final Entry<K, V> before = entry.before[ CD ]
Line_4 $$ if (entry.state == State.EXISTING) -->Line_6 $$ final Entry<K, V> after = entry.after[ CD ]
Line_4 $$ if (entry.state == State.EXISTING) -->Line_32 $$ return false[ CD ]
Line_5 $$ final Entry<K, V> before = entry.before-->Line_24 $$ after.before = before[ FD ]
Line_6 $$ final Entry<K, V> after = entry.after-->Line_14 $$ before.after = after[ FD ]
Line_17 $$ if (after == null) -->Line_20 $$ if (tail != null) [ CD ]
Line_4 $$ if (entry.state == State.EXISTING) -->Line_17 $$ if (after == null) [ CD ]
Line_7 $$ if (before == null) -->Line_14 $$ before.after = after[ CD ]
Line_2 $$ private boolean unlink(Entry<K, V> entry) -->Line_4 $$ if (entry.state == State.EXISTING) [ CD ]
Line_7 $$ if (before == null) -->Line_10 $$ if (head != null) [ CD ]
Line_5 $$ final Entry<K, V> before = entry.before-->Line_7 $$ if (before == null) [ FD ]
Line_20 $$ if (tail != null) -->Line_21 $$ tail.after = null[ CD ]
Line_4 $$ if (entry.state == State.EXISTING) -->Line_30 $$ return true[ CD ]
Line_10 $$ if (head != null) -->Line_11 $$ head.before = null[ CD ]
Line_17 $$ if (after == null) -->Line_24 $$ after.before = before[ CD ]
Line_7 $$ if (before == null) -->Line_15 $$ entry.before = null[ CD ]
Line_6 $$ final Entry<K, V> after = entry.after-->Line_17 $$ if (after == null) [ FD ]
Line_4 $$ if (entry.state == State.EXISTING) -->Line_28 $$ weight -= weigher.applyAsLong(entry.key, entry.value)[ CD ]
Line_17 $$ if (after == null) -->Line_25 $$ entry.after = null[ CD ]
Line_4 $$ if (entry.state == State.EXISTING) -->Line_29 $$ entry.state = State.DELETED[ CD ]
Line_4 $$ if (entry.state == State.EXISTING) -->Line_7 $$ if (before == null) [ CD ]
