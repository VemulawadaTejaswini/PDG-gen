Line_2 $$ private static Collection<URI> getStorageDirs(Configuration conf, String propertyName) -->Line_3 $$ Collection<String> dirNames = conf.getTrimmedStringCollection(propertyName)[ CD ]
Line_6 $$ Configuration cE = new HdfsConfiguration(false)-->Line_8 $$ cE.addResource("core-site.xml")[ FD ]
Line_5 $$ if (startOpt == StartupOption.IMPORT) -->Line_8 $$ cE.addResource("core-site.xml")[ CD ]
Line_6 $$ Configuration cE = new HdfsConfiguration(false)-->Line_7 $$ cE.addResource("core-default.xml")[ FD ]
Line_5 $$ if (startOpt == StartupOption.IMPORT) -->Line_9 $$ cE.addResource("hdfs-default.xml")[ CD ]
Line_5 $$ if (startOpt == StartupOption.IMPORT) -->Line_14 $$ if (dirNames.isEmpty()) [ CD ]
Line_6 $$ Configuration cE = new HdfsConfiguration(false)-->Line_9 $$ cE.addResource("hdfs-default.xml")[ FD ]
Line_4 $$ StartupOption startOpt = NameNode.getStartupOption(conf)-->Line_5 $$ if (startOpt == StartupOption.IMPORT) [ FD ]
Line_10 $$ Collection<String> dirNames2 = cE.getTrimmedStringCollection(propertyName)-->Line_11 $$ dirNames.removeAll(dirNames2)[ FD ]
Line_3 $$ Collection<String> dirNames = conf.getTrimmedStringCollection(propertyName)-->Line_14 $$ if (dirNames.isEmpty()) [ FD ]
Line_2 $$ private static Collection<URI> getStorageDirs(Configuration conf, String propertyName) -->Line_4 $$ StartupOption startOpt = NameNode.getStartupOption(conf)[ FD ]
Line_5 $$ if (startOpt == StartupOption.IMPORT) -->Line_6 $$ Configuration cE = new HdfsConfiguration(false)[ CD ]
Line_14 $$ if (dirNames.isEmpty()) -->Line_15 $$ dirNames = Collections.singletonList(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_DEFAULT)[ CD ]
Line_2 $$ private static Collection<URI> getStorageDirs(Configuration conf, String propertyName) -->Line_5 $$ if (startOpt == StartupOption.IMPORT) [ CD ]
Line_5 $$ if (startOpt == StartupOption.IMPORT) -->Line_11 $$ dirNames.removeAll(dirNames2)[ CD ]
Line_15 $$ dirNames = Collections.singletonList(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_DEFAULT)-->Line_17 $$ return Util.stringCollectionAsURIs(dirNames)[ FD ]
Line_2 $$ private static Collection<URI> getStorageDirs(Configuration conf, String propertyName) -->Line_17 $$ return Util.stringCollectionAsURIs(dirNames)[ CD ]
Line_5 $$ if (startOpt == StartupOption.IMPORT) -->Line_7 $$ cE.addResource("core-default.xml")[ CD ]
Line_12 $$ if (dirNames.isEmpty())-->Line_13 $$ LOG.warn("!!! WARNING !!!" + "\n\tThe NameNode currently runs without persistent storage." + "\n\tAny changes to the file system meta-data may be lost." + "\n\tRecommended actions:" + "\n\t\t- shutdown and restart NameNode with configured \"" + propertyName + "\" in hdfs-site.xml;" + "\n\t\t- use Backup Node as a persistent and up-to-date storage " + "of the file system meta-data.")[ CD ]
Line_2 $$ private static Collection<URI> getStorageDirs(Configuration conf, String propertyName) -->Line_10 $$ Collection<String> dirNames2 = cE.getTrimmedStringCollection(propertyName)[ FD ]
Line_2 $$ private static Collection<URI> getStorageDirs(Configuration conf, String propertyName) -->Line_4 $$ StartupOption startOpt = NameNode.getStartupOption(conf)[ CD ]
Line_5 $$ if (startOpt == StartupOption.IMPORT) -->Line_12 $$ if (dirNames.isEmpty())[ CD ]
Line_2 $$ private static Collection<URI> getStorageDirs(Configuration conf, String propertyName) -->Line_3 $$ Collection<String> dirNames = conf.getTrimmedStringCollection(propertyName)[ FD ]
Line_3 $$ Collection<String> dirNames = conf.getTrimmedStringCollection(propertyName)-->Line_17 $$ return Util.stringCollectionAsURIs(dirNames)[ FD ]
Line_6 $$ Configuration cE = new HdfsConfiguration(false)-->Line_10 $$ Collection<String> dirNames2 = cE.getTrimmedStringCollection(propertyName)[ FD ]
Line_3 $$ Collection<String> dirNames = conf.getTrimmedStringCollection(propertyName)-->Line_15 $$ dirNames = Collections.singletonList(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_DEFAULT)[ FD ]
Line_5 $$ if (startOpt == StartupOption.IMPORT) -->Line_10 $$ Collection<String> dirNames2 = cE.getTrimmedStringCollection(propertyName)[ CD ]
Line_3 $$ Collection<String> dirNames = conf.getTrimmedStringCollection(propertyName)-->Line_12 $$ if (dirNames.isEmpty())[ FD ]
Line_3 $$ Collection<String> dirNames = conf.getTrimmedStringCollection(propertyName)-->Line_11 $$ dirNames.removeAll(dirNames2)[ FD ]
