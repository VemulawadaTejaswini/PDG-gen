Line_4 $$ FileSystem fileSystem = FileSystems.getDefault()-->Line_5 $$ final PathMatcher pathMatcher = fileSystem.getPathMatcher("glob:" + pattern)[ FD ]
Line_2 $$ private List<Path> _findFiles(String baseDirName, String pattern, final int limit) throws IOException -->Line_12 $$ if (paths.size() == limit) [ FD ]
Line_6 $$ Files.walkFileTree(Paths.get(baseDirName), new SimpleFileVisitor<Path>() -->Line_16 $$ return FileVisitResult.CONTINUE[ CD ]
Line_10 $$ if (pathMatcher.matches(filePath)) -->Line_11 $$ paths.add(filePath)[ CD ]
Line_2 $$ private List<Path> _findFiles(String baseDirName, String pattern, final int limit) throws IOException -->Line_6 $$ Files.walkFileTree(Paths.get(baseDirName), new SimpleFileVisitor<Path>() [ CD ]
Line_2 $$ private List<Path> _findFiles(String baseDirName, String pattern, final int limit) throws IOException -->Line_4 $$ FileSystem fileSystem = FileSystems.getDefault()[ CD ]
Line_6 $$ Files.walkFileTree(Paths.get(baseDirName), new SimpleFileVisitor<Path>() -->Line_11 $$ paths.add(filePath)[ FD ]
Line_2 $$ private List<Path> _findFiles(String baseDirName, String pattern, final int limit) throws IOException -->Line_6 $$ Files.walkFileTree(Paths.get(baseDirName), new SimpleFileVisitor<Path>() [ FD ]
Line_5 $$ final PathMatcher pathMatcher = fileSystem.getPathMatcher("glob:" + pattern)-->Line_10 $$ if (pathMatcher.matches(filePath)) [ FD ]
Line_10 $$ if (pathMatcher.matches(filePath)) -->Line_12 $$ if (paths.size() == limit) [ CD ]
Line_12 $$ if (paths.size() == limit) -->Line_13 $$ return FileVisitResult.TERMINATE[ CD ]
Line_2 $$ private List<Path> _findFiles(String baseDirName, String pattern, final int limit) throws IOException -->Line_19 $$ return paths[ CD ]
Line_6 $$ Files.walkFileTree(Paths.get(baseDirName), new SimpleFileVisitor<Path>() -->Line_10 $$ if (pathMatcher.matches(filePath)) [ CD ]
Line_2 $$ private List<Path> _findFiles(String baseDirName, String pattern, final int limit) throws IOException -->Line_5 $$ final PathMatcher pathMatcher = fileSystem.getPathMatcher("glob:" + pattern)[ CD ]
Line_3 $$ final List<Path> paths = new ArrayList()-->Line_11 $$ paths.add(filePath)[ FD ]
Line_3 $$ final List<Path> paths = new ArrayList()-->Line_12 $$ if (paths.size() == limit) [ FD ]
Line_2 $$ private List<Path> _findFiles(String baseDirName, String pattern, final int limit) throws IOException -->Line_3 $$ final List<Path> paths = new ArrayList()[ CD ]
Line_6 $$ Files.walkFileTree(Paths.get(baseDirName), new SimpleFileVisitor<Path>() -->Line_10 $$ if (pathMatcher.matches(filePath)) [ FD ]
