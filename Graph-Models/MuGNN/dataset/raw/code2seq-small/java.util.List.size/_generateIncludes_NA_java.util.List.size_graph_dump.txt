Line_16 $$ Constructor<?> constructor = reloadedClass.getDeclaredConstructor()-->Line_17 $$ constructor.setAccessible(true)[ FD ]
Line_12 $$ if (getClass() != CodeCoverageAssertor.class) -->Line_15 $$ appendAssertClassesMethod.setAccessible(true)[ CD ]
Line_16 $$ Constructor<?> constructor = reloadedClass.getDeclaredConstructor()-->Line_18 $$ Object reloadedObject = constructor.newInstance()[ FD ]
Line_2 $$ private String[] _generateIncludes(String mainClassName) throws Exception -->Line_22 $$ for (int i = 0; i < assertClasses.size(); i++) [ CD ]
Line_7 $$ Class<?> mainClass = classLoader.loadClass(mainClassName)-->Line_8 $$ assertClasses.add(mainClass)[ FD ]
Line_3 $$ List<Class<?>> assertClasses = new ArrayList()-->Line_19 $$ appendAssertClassesMethod.invoke(reloadedObject, assertClasses)[ FD ]
Line_18 $$ Object reloadedObject = constructor.newInstance()-->Line_19 $$ appendAssertClassesMethod.invoke(reloadedObject, assertClasses)[ FD ]
Line_14 $$ Method appendAssertClassesMethod = reloadedClass.getMethod("appendAssertClasses", List.class)-->Line_19 $$ appendAssertClassesMethod.invoke(reloadedObject, assertClasses)[ FD ]
Line_12 $$ if (getClass() != CodeCoverageAssertor.class) -->Line_13 $$ Class<?> reloadedClass = classLoader.loadClass(getClass().getName())[ CD ]
Line_2 $$ private String[] _generateIncludes(String mainClassName) throws Exception -->Line_9 $$ if (_includeInnerClasses) [ CD ]
Line_2 $$ private String[] _generateIncludes(String mainClassName) throws Exception -->Line_12 $$ if (getClass() != CodeCoverageAssertor.class) [ CD ]
Line_6 $$ ClassLoader classLoader = new URLClassLoader(urls, null)-->Line_7 $$ Class<?> mainClass = classLoader.loadClass(mainClassName)[ FD ]
Line_3 $$ List<Class<?>> assertClasses = new ArrayList()-->Line_23 $$ Class<?> assertClass = assertClasses.get(i)[ FD ]
Line_2 $$ private String[] _generateIncludes(String mainClassName) throws Exception -->Line_26 $$ return includes[ CD ]
Line_2 $$ private String[] _generateIncludes(String mainClassName) throws Exception -->Line_3 $$ List<Class<?>> assertClasses = new ArrayList()[ CD ]
Line_12 $$ if (getClass() != CodeCoverageAssertor.class) -->Line_18 $$ Object reloadedObject = constructor.newInstance()[ CD ]
Line_2 $$ private String[] _generateIncludes(String mainClassName) throws Exception -->Line_7 $$ Class<?> mainClass = classLoader.loadClass(mainClassName)[ CD ]
Line_13 $$ Class<?> reloadedClass = classLoader.loadClass(getClass().getName())-->Line_16 $$ Constructor<?> constructor = reloadedClass.getDeclaredConstructor()[ FD ]
Line_9 $$ if (_includeInnerClasses) -->Line_10 $$ assertClasses.addAll(Arrays.asList(mainClass.getDeclaredClasses()))[ CD ]
Line_6 $$ ClassLoader classLoader = new URLClassLoader(urls, null)-->Line_13 $$ Class<?> reloadedClass = classLoader.loadClass(getClass().getName())[ FD ]
Line_23 $$ Class<?> assertClass = assertClasses.get(i)-->Line_24 $$ includes[i] = StringUtil.replace(assertClass.getName(), new String[] [ FD ]
Line_14 $$ Method appendAssertClassesMethod = reloadedClass.getMethod("appendAssertClasses", List.class)-->Line_15 $$ appendAssertClassesMethod.setAccessible(true)[ FD ]
Line_2 $$ private String[] _generateIncludes(String mainClassName) throws Exception -->Line_5 $$ URL[] urls = ClassPathUtil.getClassPathURLs(jvmClassPath)[ CD ]
Line_12 $$ if (getClass() != CodeCoverageAssertor.class) -->Line_17 $$ constructor.setAccessible(true)[ CD ]
Line_2 $$ private String[] _generateIncludes(String mainClassName) throws Exception -->Line_4 $$ String jvmClassPath = ClassPathUtil.getJVMClassPath(false)[ CD ]
Line_13 $$ Class<?> reloadedClass = classLoader.loadClass(getClass().getName())-->Line_14 $$ Method appendAssertClassesMethod = reloadedClass.getMethod("appendAssertClasses", List.class)[ FD ]
Line_2 $$ private String[] _generateIncludes(String mainClassName) throws Exception -->Line_21 $$ String[] includes = new String[assertClasses.size()][ CD ]
Line_2 $$ private String[] _generateIncludes(String mainClassName) throws Exception -->Line_8 $$ assertClasses.add(mainClass)[ CD ]
Line_2 $$ private String[] _generateIncludes(String mainClassName) throws Exception -->Line_6 $$ ClassLoader classLoader = new URLClassLoader(urls, null)[ CD ]
Line_12 $$ if (getClass() != CodeCoverageAssertor.class) -->Line_14 $$ Method appendAssertClassesMethod = reloadedClass.getMethod("appendAssertClasses", List.class)[ CD ]
Line_3 $$ List<Class<?>> assertClasses = new ArrayList()-->Line_8 $$ assertClasses.add(mainClass)[ FD ]
Line_22 $$ for (int i = 0; i < assertClasses.size(); i++) -->Line_23 $$ Class<?> assertClass = assertClasses.get(i)[ CD ]
Line_4 $$ String jvmClassPath = ClassPathUtil.getJVMClassPath(false)-->Line_5 $$ URL[] urls = ClassPathUtil.getClassPathURLs(jvmClassPath)[ FD ]
Line_12 $$ if (getClass() != CodeCoverageAssertor.class) -->Line_16 $$ Constructor<?> constructor = reloadedClass.getDeclaredConstructor()[ CD ]
Line_3 $$ List<Class<?>> assertClasses = new ArrayList()-->Line_22 $$ for (int i = 0; i < assertClasses.size(); i++) [ FD ]
Line_7 $$ Class<?> mainClass = classLoader.loadClass(mainClassName)-->Line_10 $$ assertClasses.addAll(Arrays.asList(mainClass.getDeclaredClasses()))[ FD ]
Line_3 $$ List<Class<?>> assertClasses = new ArrayList()-->Line_21 $$ String[] includes = new String[assertClasses.size()][ FD ]
Line_3 $$ List<Class<?>> assertClasses = new ArrayList()-->Line_10 $$ assertClasses.addAll(Arrays.asList(mainClass.getDeclaredClasses()))[ FD ]
Line_2 $$ private String[] _generateIncludes(String mainClassName) throws Exception -->Line_7 $$ Class<?> mainClass = classLoader.loadClass(mainClassName)[ FD ]
Line_22 $$ for (int i = 0; i < assertClasses.size(); i++) -->Line_23 $$ Class<?> assertClass = assertClasses.get(i)[ FD ]
Line_12 $$ if (getClass() != CodeCoverageAssertor.class) -->Line_19 $$ appendAssertClassesMethod.invoke(reloadedObject, assertClasses)[ CD ]
Line_22 $$ for (int i = 0; i < assertClasses.size(); i++) -->Line_24 $$ includes[i] = StringUtil.replace(assertClass.getName(), new String[] [ CD ]
