Line_3 $$ TestNG testNg = new TestNG()-->Line_21 $$ testNg.setGroups(CollectionUtils.join(",", options.getIncludeGroups()))[ FD ]
Line_3 $$ TestNG testNg = new TestNG()-->Line_9 $$ invokeVerifiedMethod(testNg, "setConfigFailurePolicy", String.class, options.getConfigFailurePolicy(), TestNGOptions.DEFAULT_CONFIG_FAILURE_POLICY)[ FD ]
Line_3 $$ TestNG testNg = new TestNG()-->Line_25 $$ testNg.addListener(applicationClassLoader.loadClass(listenerClass).newInstance())[ FD ]
Line_2 $$ private void runTests() -->Line_33 $$ if (!suiteFiles.isEmpty()) [ CD ]
Line_2 $$ private void runTests() -->Line_21 $$ testNg.setGroups(CollectionUtils.join(",", options.getIncludeGroups()))[ CD ]
Line_2 $$ private void runTests() -->Line_10 $$ invokeVerifiedMethod(testNg, "setPreserveOrder", boolean.class, options.getPreserveOrder(), false)[ CD ]
Line_16 $$ if (options.getJavadocAnnotations()) -->Line_17 $$ testNg.setSourcePath(CollectionUtils.join(File.pathSeparator, options.getTestResources()))[ CD ]
Line_3 $$ TestNG testNg = new TestNG()-->Line_10 $$ invokeVerifiedMethod(testNg, "setPreserveOrder", boolean.class, options.getPreserveOrder(), false)[ FD ]
Line_3 $$ TestNG testNg = new TestNG()-->Line_36 $$ testNg.setTestClasses(testClasses.toArray(new Class[testClasses.size()]))[ FD ]
Line_2 $$ private void runTests() -->Line_19 $$ testNg.setUseDefaultListeners(options.getUseDefaultListeners())[ CD ]
Line_2 $$ private void runTests() -->Line_16 $$ if (options.getJavadocAnnotations()) [ CD ]
Line_2 $$ private void runTests() -->Line_4 $$ testNg.setOutputDirectory(testReportDir.getAbsolutePath())[ CD ]
Line_3 $$ TestNG testNg = new TestNG()-->Line_11 $$ invokeVerifiedMethod(testNg, "setGroupByInstances", boolean.class, options.getGroupByInstances(), false)[ FD ]
Line_2 $$ private void runTests() -->Line_5 $$ testNg.setDefaultSuiteName(options.getDefaultSuiteName())[ CD ]
Line_2 $$ private void runTests() -->Line_7 $$ testNg.setParallel(options.getParallel())[ CD ]
Line_2 $$ private void runTests() -->Line_8 $$ testNg.setThreadCount(options.getThreadCount())[ CD ]
Line_2 $$ private void runTests() -->Line_22 $$ testNg.setExcludedGroups(CollectionUtils.join(",", options.getExcludeGroups()))[ CD ]
Line_3 $$ TestNG testNg = new TestNG()-->Line_8 $$ testNg.setThreadCount(options.getThreadCount())[ FD ]
Line_2 $$ private void runTests() -->Line_20 $$ testNg.setVerbose(0)[ CD ]
Line_3 $$ TestNG testNg = new TestNG()-->Line_20 $$ testNg.setVerbose(0)[ FD ]
Line_33 $$ if (!suiteFiles.isEmpty()) -->Line_36 $$ testNg.setTestClasses(testClasses.toArray(new Class[testClasses.size()]))[ CD ]
Line_3 $$ TestNG testNg = new TestNG()-->Line_19 $$ testNg.setUseDefaultListeners(options.getUseDefaultListeners())[ FD ]
Line_3 $$ TestNG testNg = new TestNG()-->Line_34 $$ testNg.setTestSuites(GFileUtils.toPaths(suiteFiles))[ FD ]
Line_3 $$ TestNG testNg = new TestNG()-->Line_17 $$ testNg.setSourcePath(CollectionUtils.join(File.pathSeparator, options.getTestResources()))[ FD ]
Line_2 $$ private void runTests() -->Line_30 $$ if (!options.getIncludedTests().isEmpty()) [ CD ]
Line_23 $$ for (String listenerClass : options.getListeners()) -->Line_27 $$ throw new GradleException(String.format("Could not add a test listener with class '%s'.", listenerClass), e)[ FD ]
Line_3 $$ TestNG testNg = new TestNG()-->Line_7 $$ testNg.setParallel(options.getParallel())[ FD ]
Line_3 $$ TestNG testNg = new TestNG()-->Line_38 $$ testNg.addListener((Object) adaptListener(new TestNGTestResultProcessorAdapter(resultProcessor, idGenerator, timeProvider)))[ FD ]
Line_30 $$ if (!options.getIncludedTests().isEmpty()) -->Line_31 $$ testNg.addListener(new SelectedTestsFilter(options.getIncludedTests()))[ CD ]
Line_3 $$ TestNG testNg = new TestNG()-->Line_4 $$ testNg.setOutputDirectory(testReportDir.getAbsolutePath())[ FD ]
Line_2 $$ private void runTests() -->Line_3 $$ TestNG testNg = new TestNG()[ CD ]
Line_2 $$ private void runTests() -->Line_38 $$ testNg.addListener((Object) adaptListener(new TestNGTestResultProcessorAdapter(resultProcessor, idGenerator, timeProvider)))[ CD ]
Line_3 $$ TestNG testNg = new TestNG()-->Line_6 $$ testNg.setDefaultTestName(options.getDefaultTestName())[ FD ]
Line_2 $$ private void runTests() -->Line_11 $$ invokeVerifiedMethod(testNg, "setGroupByInstances", boolean.class, options.getGroupByInstances(), false)[ CD ]
Line_2 $$ private void runTests() -->Line_6 $$ testNg.setDefaultTestName(options.getDefaultTestName())[ CD ]
Line_23 $$ for (String listenerClass : options.getListeners()) -->Line_25 $$ testNg.addListener(applicationClassLoader.loadClass(listenerClass).newInstance())[ FD ]
Line_2 $$ private void runTests() -->Line_39 $$ testNg.run()[ CD ]
Line_3 $$ TestNG testNg = new TestNG()-->Line_5 $$ testNg.setDefaultSuiteName(options.getDefaultSuiteName())[ FD ]
Line_2 $$ private void runTests() -->Line_9 $$ invokeVerifiedMethod(testNg, "setConfigFailurePolicy", String.class, options.getConfigFailurePolicy(), TestNGOptions.DEFAULT_CONFIG_FAILURE_POLICY)[ CD ]
Line_3 $$ TestNG testNg = new TestNG()-->Line_31 $$ testNg.addListener(new SelectedTestsFilter(options.getIncludedTests()))[ FD ]
Line_33 $$ if (!suiteFiles.isEmpty()) -->Line_34 $$ testNg.setTestSuites(GFileUtils.toPaths(suiteFiles))[ CD ]
Line_3 $$ TestNG testNg = new TestNG()-->Line_39 $$ testNg.run()[ FD ]
Line_3 $$ TestNG testNg = new TestNG()-->Line_13 $$ JavaReflectionUtil.method(TestNG.class, Object.class, "setAnnotations").invoke(testNg, options.getAnnotations())[ FD ]
Line_3 $$ TestNG testNg = new TestNG()-->Line_22 $$ testNg.setExcludedGroups(CollectionUtils.join(",", options.getExcludeGroups()))[ FD ]
