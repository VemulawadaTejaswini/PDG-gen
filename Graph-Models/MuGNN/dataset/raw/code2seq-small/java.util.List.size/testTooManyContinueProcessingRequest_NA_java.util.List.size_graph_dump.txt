Line_2 $$ public void testTooManyContinueProcessingRequest() throws ExecutionException, InterruptedException -->Line_3 $$ final int additionalContinueCount = randomInt(10)[ CD ]
Line_27 $$ transportAction.execute(new TestRequest(), new ActionListener<TestResponse>() -->Line_32 $$ latch.countDown()[ CD ]
Line_2 $$ public void testTooManyContinueProcessingRequest() throws ExecutionException, InterruptedException -->Line_14 $$ filters.add(testFilter)[ CD ]
Line_2 $$ public void testTooManyContinueProcessingRequest() throws ExecutionException, InterruptedException -->Line_27 $$ transportAction.execute(new TestRequest(), new ActionListener<TestResponse>() [ CD ]
Line_17 $$ TransportAction<TestRequest, TestResponse> transportAction = new TransportAction<TestRequest, TestResponse>(Settings.EMPTY, actionName, null, actionFilters, null) -->Line_21 $$ listener.onResponse(new TestResponse())[ FD ]
Line_4 $$ RequestTestFilter testFilter = new RequestTestFilter(randomInt(), new RequestCallback() -->Line_9 $$ actionFilterChain.proceed(action, actionRequest, actionListener)[ FD ]
Line_2 $$ public void testTooManyContinueProcessingRequest() throws ExecutionException, InterruptedException -->Line_44 $$ assertThat(testFilter.runs.get(), equalTo(1))[ CD ]
Line_4 $$ RequestTestFilter testFilter = new RequestTestFilter(randomInt(), new RequestCallback() -->Line_14 $$ filters.add(testFilter)[ FD ]
Line_3 $$ final int additionalContinueCount = randomInt(10)-->Line_47 $$ assertThat(failures.size(), equalTo(additionalContinueCount))[ FD ]
Line_2 $$ public void testTooManyContinueProcessingRequest() throws ExecutionException, InterruptedException -->Line_41 $$ if (!latch.await(10, TimeUnit.SECONDS)) [ CD ]
Line_27 $$ transportAction.execute(new TestRequest(), new ActionListener<TestResponse>() -->Line_31 $$ responses.incrementAndGet()[ CD ]
Line_41 $$ if (!latch.await(10, TimeUnit.SECONDS)) -->Line_42 $$ fail("timeout waiting for the filter to notify the listener as many times as expected")[ CD ]
Line_8 $$ for (int i = 0; i <= additionalContinueCount; i++) -->Line_9 $$ actionFilterChain.proceed(action, actionRequest, actionListener)[ CD ]
Line_2 $$ public void testTooManyContinueProcessingRequest() throws ExecutionException, InterruptedException -->Line_45 $$ assertThat(testFilter.lastActionName, equalTo(actionName))[ CD ]
Line_27 $$ transportAction.execute(new TestRequest(), new ActionListener<TestResponse>() -->Line_38 $$ latch.countDown()[ CD ]
Line_2 $$ public void testTooManyContinueProcessingRequest() throws ExecutionException, InterruptedException -->Line_15 $$ String actionName = randomAsciiOfLength(randomInt(30))[ CD ]
Line_3 $$ final int additionalContinueCount = randomInt(10)-->Line_8 $$ for (int i = 0; i <= additionalContinueCount; i++) [ FD ]
Line_4 $$ RequestTestFilter testFilter = new RequestTestFilter(randomInt(), new RequestCallback() -->Line_8 $$ for (int i = 0; i <= additionalContinueCount; i++) [ CD ]
Line_27 $$ transportAction.execute(new TestRequest(), new ActionListener<TestResponse>() -->Line_37 $$ failures.add(e)[ CD ]
Line_27 $$ transportAction.execute(new TestRequest(), new ActionListener<TestResponse>() -->Line_37 $$ failures.add(e)[ FD ]
Line_2 $$ public void testTooManyContinueProcessingRequest() throws ExecutionException, InterruptedException -->Line_46 $$ assertThat(responses.get(), equalTo(1))[ CD ]
Line_2 $$ public void testTooManyContinueProcessingRequest() throws ExecutionException, InterruptedException -->Line_47 $$ assertThat(failures.size(), equalTo(additionalContinueCount))[ CD ]
Line_17 $$ TransportAction<TestRequest, TestResponse> transportAction = new TransportAction<TestRequest, TestResponse>(Settings.EMPTY, actionName, null, actionFilters, null) -->Line_21 $$ listener.onResponse(new TestResponse())[ CD ]
Line_2 $$ public void testTooManyContinueProcessingRequest() throws ExecutionException, InterruptedException -->Line_4 $$ RequestTestFilter testFilter = new RequestTestFilter(randomInt(), new RequestCallback() [ CD ]
