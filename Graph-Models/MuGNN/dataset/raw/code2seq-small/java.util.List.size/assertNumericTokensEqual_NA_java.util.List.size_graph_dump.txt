Line_2 $$ private void assertNumericTokensEqual(ParsedDocument doc, DocumentMapper defaultMapper, String fieldA, String fieldB) throws IOException -->Line_7 $$ NumericTermAttribute nta = tokenStream.addAttribute(NumericTermAttribute.class)[ CD ]
Line_7 $$ NumericTermAttribute nta = tokenStream.addAttribute(NumericTermAttribute.class)-->Line_10 $$ values.add(nta.getRawValue())[ FD ]
Line_5 $$ TokenStream tokenStream = doc.rootDoc().getField(fieldA).tokenStream(defaultMapper.mappers().indexAnalyzer(), null)-->Line_16 $$ while (tokenStream.incrementToken()) [ FD ]
Line_8 $$ List<Long> values = new ArrayList()-->Line_19 $$ assertThat(pos, equalTo(values.size()))[ FD ]
Line_5 $$ TokenStream tokenStream = doc.rootDoc().getField(fieldA).tokenStream(defaultMapper.mappers().indexAnalyzer(), null)-->Line_14 $$ nta = tokenStream.addAttribute(NumericTermAttribute.class)[ FD ]
Line_12 $$ tokenStream = doc.rootDoc().getField(fieldB).tokenStream(defaultMapper.mappers().indexAnalyzer(), null)-->Line_13 $$ tokenStream.reset()[ FD ]
Line_8 $$ List<Long> values = new ArrayList()-->Line_10 $$ values.add(nta.getRawValue())[ FD ]
Line_2 $$ private void assertNumericTokensEqual(ParsedDocument doc, DocumentMapper defaultMapper, String fieldA, String fieldB) throws IOException -->Line_12 $$ tokenStream = doc.rootDoc().getField(fieldB).tokenStream(defaultMapper.mappers().indexAnalyzer(), null)[ FD ]
Line_2 $$ private void assertNumericTokensEqual(ParsedDocument doc, DocumentMapper defaultMapper, String fieldA, String fieldB) throws IOException -->Line_4 $$ assertThat(doc.rootDoc().getField(fieldB).tokenStream(defaultMapper.mappers().indexAnalyzer(), null), notNullValue())[ FD ]
Line_2 $$ private void assertNumericTokensEqual(ParsedDocument doc, DocumentMapper defaultMapper, String fieldA, String fieldB) throws IOException -->Line_13 $$ tokenStream.reset()[ CD ]
Line_15 $$ int pos = 0-->Line_19 $$ assertThat(pos, equalTo(values.size()))[ FD ]
Line_2 $$ private void assertNumericTokensEqual(ParsedDocument doc, DocumentMapper defaultMapper, String fieldA, String fieldB) throws IOException -->Line_15 $$ int pos = 0[ CD ]
Line_7 $$ NumericTermAttribute nta = tokenStream.addAttribute(NumericTermAttribute.class)-->Line_14 $$ nta = tokenStream.addAttribute(NumericTermAttribute.class)[ FD ]
Line_2 $$ private void assertNumericTokensEqual(ParsedDocument doc, DocumentMapper defaultMapper, String fieldA, String fieldB) throws IOException -->Line_9 $$ while (tokenStream.incrementToken()) [ CD ]
Line_5 $$ TokenStream tokenStream = doc.rootDoc().getField(fieldA).tokenStream(defaultMapper.mappers().indexAnalyzer(), null)-->Line_13 $$ tokenStream.reset()[ FD ]
Line_8 $$ List<Long> values = new ArrayList()-->Line_17 $$ assertThat(values.get(pos++), equalTo(nta.getRawValue()))[ FD ]
Line_5 $$ TokenStream tokenStream = doc.rootDoc().getField(fieldA).tokenStream(defaultMapper.mappers().indexAnalyzer(), null)-->Line_12 $$ tokenStream = doc.rootDoc().getField(fieldB).tokenStream(defaultMapper.mappers().indexAnalyzer(), null)[ FD ]
Line_5 $$ TokenStream tokenStream = doc.rootDoc().getField(fieldA).tokenStream(defaultMapper.mappers().indexAnalyzer(), null)-->Line_7 $$ NumericTermAttribute nta = tokenStream.addAttribute(NumericTermAttribute.class)[ FD ]
Line_2 $$ private void assertNumericTokensEqual(ParsedDocument doc, DocumentMapper defaultMapper, String fieldA, String fieldB) throws IOException -->Line_4 $$ assertThat(doc.rootDoc().getField(fieldB).tokenStream(defaultMapper.mappers().indexAnalyzer(), null), notNullValue())[ CD ]
Line_2 $$ private void assertNumericTokensEqual(ParsedDocument doc, DocumentMapper defaultMapper, String fieldA, String fieldB) throws IOException -->Line_14 $$ nta = tokenStream.addAttribute(NumericTermAttribute.class)[ CD ]
Line_5 $$ TokenStream tokenStream = doc.rootDoc().getField(fieldA).tokenStream(defaultMapper.mappers().indexAnalyzer(), null)-->Line_6 $$ tokenStream.reset()[ FD ]
Line_2 $$ private void assertNumericTokensEqual(ParsedDocument doc, DocumentMapper defaultMapper, String fieldA, String fieldB) throws IOException -->Line_5 $$ TokenStream tokenStream = doc.rootDoc().getField(fieldA).tokenStream(defaultMapper.mappers().indexAnalyzer(), null)[ CD ]
Line_12 $$ tokenStream = doc.rootDoc().getField(fieldB).tokenStream(defaultMapper.mappers().indexAnalyzer(), null)-->Line_16 $$ while (tokenStream.incrementToken()) [ FD ]
Line_16 $$ while (tokenStream.incrementToken()) -->Line_17 $$ assertThat(values.get(pos++), equalTo(nta.getRawValue()))[ CD ]
Line_2 $$ private void assertNumericTokensEqual(ParsedDocument doc, DocumentMapper defaultMapper, String fieldA, String fieldB) throws IOException -->Line_19 $$ assertThat(pos, equalTo(values.size()))[ CD ]
Line_9 $$ while (tokenStream.incrementToken()) -->Line_10 $$ values.add(nta.getRawValue())[ CD ]
Line_5 $$ TokenStream tokenStream = doc.rootDoc().getField(fieldA).tokenStream(defaultMapper.mappers().indexAnalyzer(), null)-->Line_9 $$ while (tokenStream.incrementToken()) [ FD ]
Line_7 $$ NumericTermAttribute nta = tokenStream.addAttribute(NumericTermAttribute.class)-->Line_17 $$ assertThat(values.get(pos++), equalTo(nta.getRawValue()))[ FD ]
Line_2 $$ private void assertNumericTokensEqual(ParsedDocument doc, DocumentMapper defaultMapper, String fieldA, String fieldB) throws IOException -->Line_16 $$ while (tokenStream.incrementToken()) [ CD ]
Line_2 $$ private void assertNumericTokensEqual(ParsedDocument doc, DocumentMapper defaultMapper, String fieldA, String fieldB) throws IOException -->Line_3 $$ assertThat(doc.rootDoc().getField(fieldA).tokenStream(defaultMapper.mappers().indexAnalyzer(), null), notNullValue())[ CD ]
Line_12 $$ tokenStream = doc.rootDoc().getField(fieldB).tokenStream(defaultMapper.mappers().indexAnalyzer(), null)-->Line_14 $$ nta = tokenStream.addAttribute(NumericTermAttribute.class)[ FD ]
Line_2 $$ private void assertNumericTokensEqual(ParsedDocument doc, DocumentMapper defaultMapper, String fieldA, String fieldB) throws IOException -->Line_3 $$ assertThat(doc.rootDoc().getField(fieldA).tokenStream(defaultMapper.mappers().indexAnalyzer(), null), notNullValue())[ FD ]
Line_2 $$ private void assertNumericTokensEqual(ParsedDocument doc, DocumentMapper defaultMapper, String fieldA, String fieldB) throws IOException -->Line_6 $$ tokenStream.reset()[ CD ]
Line_15 $$ int pos = 0-->Line_17 $$ assertThat(values.get(pos++), equalTo(nta.getRawValue()))[ FD ]
Line_2 $$ private void assertNumericTokensEqual(ParsedDocument doc, DocumentMapper defaultMapper, String fieldA, String fieldB) throws IOException -->Line_5 $$ TokenStream tokenStream = doc.rootDoc().getField(fieldA).tokenStream(defaultMapper.mappers().indexAnalyzer(), null)[ FD ]
Line_14 $$ nta = tokenStream.addAttribute(NumericTermAttribute.class)-->Line_17 $$ assertThat(values.get(pos++), equalTo(nta.getRawValue()))[ FD ]
Line_2 $$ private void assertNumericTokensEqual(ParsedDocument doc, DocumentMapper defaultMapper, String fieldA, String fieldB) throws IOException -->Line_8 $$ List<Long> values = new ArrayList()[ CD ]
Line_2 $$ private void assertNumericTokensEqual(ParsedDocument doc, DocumentMapper defaultMapper, String fieldA, String fieldB) throws IOException -->Line_12 $$ tokenStream = doc.rootDoc().getField(fieldB).tokenStream(defaultMapper.mappers().indexAnalyzer(), null)[ CD ]
