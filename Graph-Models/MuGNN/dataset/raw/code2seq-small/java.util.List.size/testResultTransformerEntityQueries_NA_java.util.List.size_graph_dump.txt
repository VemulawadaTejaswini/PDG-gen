Line_6 $$ Session session = openSession()-->Line_23 $$ t = session.beginTransaction()[ FD ]
Line_8 $$ List results = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list()-->Line_14 $$ map = ((Map) results.get(1))[ FD ]
Line_11 $$ Map map = ((Map) results.get(0))-->Line_15 $$ Animal secondAnimal = (Animal) map.get("an")[ FD ]
Line_11 $$ Map map = ((Map) results.get(0))-->Line_13 $$ Animal firstAnimal = (Animal) map.get("an")[ FD ]
Line_13 $$ Animal firstAnimal = (Animal) map.get("an")-->Line_16 $$ assertEquals("Mammal #1", firstAnimal.getDescription())[ FD ]
Line_32 $$ session = openSession()-->Line_34 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).scroll()[ FD ]
Line_8 $$ List results = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list()-->Line_9 $$ assertEquals("Incorrect result size", results.size(), 2)[ FD ]
Line_7 $$ Transaction t = session.beginTransaction()-->Line_20 $$ t.commit()[ FD ]
Line_22 $$ session = openSession()-->Line_24 $$ Iterator iter = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).iterate()[ FD ]
Line_5 $$ String query = "select an as an from Animal an order by bodyWeight desc"-->Line_24 $$ Iterator iter = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).iterate()[ FD ]
Line_24 $$ Iterator iter = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).iterate()-->Line_26 $$ map = (Map) iter.next()[ FD ]
Line_7 $$ Transaction t = session.beginTransaction()-->Line_30 $$ t.commit()[ FD ]
Line_23 $$ t = session.beginTransaction()-->Line_30 $$ t.commit()[ FD ]
Line_6 $$ Session session = openSession()-->Line_8 $$ List results = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list()[ FD ]
Line_8 $$ List results = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list()-->Line_11 $$ Map map = ((Map) results.get(0))[ FD ]
Line_6 $$ Session session = openSession()-->Line_22 $$ session = openSession()[ FD ]
Line_13 $$ Animal firstAnimal = (Animal) map.get("an")-->Line_18 $$ assertTrue(session.contains(firstAnimal))[ FD ]
Line_32 $$ session = openSession()-->Line_37 $$ assertFalse(session.contains(sr.get(0)))[ FD ]
Line_34 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).scroll()-->Line_37 $$ assertFalse(session.contains(sr.get(0)))[ FD ]
Line_22 $$ session = openSession()-->Line_33 $$ t = session.beginTransaction()[ FD ]
Line_34 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).scroll()-->Line_36 $$ assertTrue("Incorrect return type", sr.get(0) instanceof Map)[ FD ]
Line_5 $$ String query = "select an as an from Animal an order by bodyWeight desc"-->Line_34 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).scroll()[ FD ]
Line_22 $$ session = openSession()-->Line_37 $$ assertFalse(session.contains(sr.get(0)))[ FD ]
Line_6 $$ Session session = openSession()-->Line_40 $$ session.close()[ FD ]
Line_14 $$ map = ((Map) results.get(1))-->Line_26 $$ map = (Map) iter.next()[ FD ]
Line_11 $$ Map map = ((Map) results.get(0))-->Line_14 $$ map = ((Map) results.get(1))[ FD ]
Line_22 $$ session = openSession()-->Line_40 $$ session.close()[ FD ]
Line_11 $$ Map map = ((Map) results.get(0))-->Line_27 $$ firstAnimal = (Animal) map.get("an")[ FD ]
Line_7 $$ Transaction t = session.beginTransaction()-->Line_33 $$ t = session.beginTransaction()[ FD ]
Line_14 $$ map = ((Map) results.get(1))-->Line_27 $$ firstAnimal = (Animal) map.get("an")[ FD ]
Line_23 $$ t = session.beginTransaction()-->Line_33 $$ t = session.beginTransaction()[ FD ]
Line_26 $$ map = (Map) iter.next()-->Line_27 $$ firstAnimal = (Animal) map.get("an")[ FD ]
Line_6 $$ Session session = openSession()-->Line_33 $$ t = session.beginTransaction()[ FD ]
Line_7 $$ Transaction t = session.beginTransaction()-->Line_23 $$ t = session.beginTransaction()[ FD ]
Line_23 $$ t = session.beginTransaction()-->Line_39 $$ t.commit()[ FD ]
Line_34 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).scroll()-->Line_38 $$ sr.close()[ FD ]
Line_6 $$ Session session = openSession()-->Line_24 $$ Iterator iter = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).iterate()[ FD ]
Line_22 $$ session = openSession()-->Line_34 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).scroll()[ FD ]
Line_6 $$ Session session = openSession()-->Line_21 $$ session.close()[ FD ]
Line_27 $$ firstAnimal = (Animal) map.get("an")-->Line_28 $$ assertEquals("Mammal #1", firstAnimal.getDescription())[ FD ]
Line_32 $$ session = openSession()-->Line_40 $$ session.close()[ FD ]
Line_11 $$ Map map = ((Map) results.get(0))-->Line_12 $$ assertEquals(1, map.size())[ FD ]
Line_24 $$ Iterator iter = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).iterate()-->Line_29 $$ assertTrue("Incorrect result size", iter.hasNext())[ FD ]
Line_6 $$ Session session = openSession()-->Line_7 $$ Transaction t = session.beginTransaction()[ FD ]
Line_22 $$ session = openSession()-->Line_32 $$ session = openSession()[ FD ]
Line_6 $$ Session session = openSession()-->Line_19 $$ assertSame(firstAnimal, session.get(Animal.class, firstAnimal.getId()))[ FD ]
Line_7 $$ Transaction t = session.beginTransaction()-->Line_39 $$ t.commit()[ FD ]
Line_33 $$ t = session.beginTransaction()-->Line_39 $$ t.commit()[ FD ]
Line_13 $$ Animal firstAnimal = (Animal) map.get("an")-->Line_27 $$ firstAnimal = (Animal) map.get("an")[ FD ]
Line_8 $$ List results = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list()-->Line_10 $$ assertTrue("Incorrect return type", results.get(0) instanceof Map)[ FD ]
Line_22 $$ session = openSession()-->Line_31 $$ session.close()[ FD ]
Line_15 $$ Animal secondAnimal = (Animal) map.get("an")-->Line_17 $$ assertEquals("Mammal #2", secondAnimal.getDescription())[ FD ]
Line_22 $$ session = openSession()-->Line_23 $$ t = session.beginTransaction()[ FD ]
Line_6 $$ Session session = openSession()-->Line_34 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).scroll()[ FD ]
Line_6 $$ Session session = openSession()-->Line_31 $$ session.close()[ FD ]
Line_13 $$ Animal firstAnimal = (Animal) map.get("an")-->Line_28 $$ assertEquals("Mammal #1", firstAnimal.getDescription())[ FD ]
Line_14 $$ map = ((Map) results.get(1))-->Line_15 $$ Animal secondAnimal = (Animal) map.get("an")[ FD ]
Line_13 $$ Animal firstAnimal = (Animal) map.get("an")-->Line_19 $$ assertSame(firstAnimal, session.get(Animal.class, firstAnimal.getId()))[ FD ]
Line_6 $$ Session session = openSession()-->Line_32 $$ session = openSession()[ FD ]
Line_11 $$ Map map = ((Map) results.get(0))-->Line_26 $$ map = (Map) iter.next()[ FD ]
Line_6 $$ Session session = openSession()-->Line_37 $$ assertFalse(session.contains(sr.get(0)))[ FD ]
Line_24 $$ Iterator iter = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).iterate()-->Line_25 $$ assertTrue("Incorrect result size", iter.hasNext())[ FD ]
Line_6 $$ Session session = openSession()-->Line_18 $$ assertTrue(session.contains(firstAnimal))[ FD ]
Line_34 $$ ScrollableResults sr = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).scroll()-->Line_35 $$ assertTrue("Incorrect result size", sr.next())[ FD ]
Line_32 $$ session = openSession()-->Line_33 $$ t = session.beginTransaction()[ FD ]
Line_5 $$ String query = "select an as an from Animal an order by bodyWeight desc"-->Line_8 $$ List results = session.createQuery(query).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP).list()[ FD ]
