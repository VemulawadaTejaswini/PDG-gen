Line_9 $$ String testId = "testId"-->Line_15 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)[ FD ]
Line_11 $$ RegistrationReference registrationReference = new MockRegistrationReference(autoReplyMockIntraband)-->Line_15 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)[ FD ]
Line_12 $$ Object stubObject = null-->Line_22 $$ Assert.assertSame(registrationReference, ReflectionTestUtil.getFieldValue(stubObject, "_registrationReference"))[ FD ]
Line_15 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)-->Line_42 $$ Object object = ReflectionTestUtil.invoke(stubObject, proxyMethod.getName(), proxyMethod.getParameterTypes(), args)[ FD ]
Line_38 $$ for (int j = 0; j < args.length; j++) -->Line_39 $$ args[j] = _sampleValueMap.get(parameterTypes[j])[ CD ]
Line_17 $$ LogRecord logRecord = logRecords.get(0)-->Line_19 $$ logRecord = logRecords.get(1)[ FD ]
Line_13 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(stubClass.getName(), Level.INFO)) -->Line_14 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_7 $$ Class<?> stubClass = IntrabandProxyUtil.generateStubClass(_classLoader, TestGenerateStubFunction1.class, skeletonId)-->Line_18 $$ Assert.assertEquals(stubClass.getName() + " in <clinit>", logRecord.getMessage())[ FD ]
Line_12 $$ Object stubObject = null-->Line_15 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)[ FD ]
Line_19 $$ logRecord = logRecords.get(1)-->Line_20 $$ Assert.assertEquals(stubClass.getName() + " in <init>", logRecord.getMessage())[ FD ]
Line_12 $$ Object stubObject = null-->Line_23 $$ Assert.assertSame(WarnLogExceptionHandler.INSTANCE, ReflectionTestUtil.getFieldValue(stubObject, "_exceptionHandler"))[ FD ]
Line_8 $$ Constructor<?> constructor = stubClass.getConstructor(String.class, RegistrationReference.class, ExceptionHandler.class)-->Line_28 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)[ FD ]
Line_12 $$ Object stubObject = null-->Line_42 $$ Object object = ReflectionTestUtil.invoke(stubObject, proxyMethod.getName(), proxyMethod.getParameterTypes(), args)[ FD ]
Line_37 $$ Object[] args = new Object[parameterTypes.length]-->Line_42 $$ Object object = ReflectionTestUtil.invoke(stubObject, proxyMethod.getName(), proxyMethod.getParameterTypes(), args)[ FD ]
Line_19 $$ logRecord = logRecords.get(1)-->Line_65 $$ Assert.assertEquals(copiedMethod.getName(), logRecord.getMessage())[ FD ]
Line_12 $$ Object stubObject = null-->Line_30 $$ Assert.assertEquals(testId, ReflectionTestUtil.invoke(stubObject, idMethod.getName(), new Class<?>[0]))[ FD ]
Line_51 $$ Collections.sort(copiedMethods, new Comparator<Method>() -->Line_56 $$ String name2 = method2.getName()[ CD ]
Line_15 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)-->Line_22 $$ Assert.assertSame(registrationReference, ReflectionTestUtil.getFieldValue(stubObject, "_registrationReference"))[ FD ]
Line_7 $$ Class<?> stubClass = IntrabandProxyUtil.generateStubClass(_classLoader, TestGenerateStubFunction1.class, skeletonId)-->Line_27 $$ constructor = stubClass.getConstructor(String.class, RegistrationReference.class, ExceptionHandler.class)[ FD ]
Line_12 $$ Object stubObject = null-->Line_47 $$ Assert.assertEquals(_defaultValueMap.get(emptyMethod.getReturnType()), ReflectionTestUtil.invoke(stubObject, emptyMethod.getName(), new Class<?>[0]))[ FD ]
Line_34 $$ for (int i = 0; i < proxyMethods.size(); i++) -->Line_38 $$ for (int j = 0; j < args.length; j++) [ CD ]
Line_10 $$ AutoReplyMockIntraband autoReplyMockIntraband = new AutoReplyMockIntraband(skeletonId, testId)-->Line_41 $$ autoReplyMockIntraband.setInvocation(proxyMethod, i)[ FD ]
Line_15 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)-->Line_24 $$ Assert.assertSame(autoReplyMockIntraband, ReflectionTestUtil.getFieldValue(stubObject, "_intraband"))[ FD ]
Line_7 $$ Class<?> stubClass = IntrabandProxyUtil.generateStubClass(_classLoader, TestGenerateStubFunction1.class, skeletonId)-->Line_8 $$ Constructor<?> constructor = stubClass.getConstructor(String.class, RegistrationReference.class, ExceptionHandler.class)[ FD ]
Line_34 $$ for (int i = 0; i < proxyMethods.size(); i++) -->Line_41 $$ autoReplyMockIntraband.setInvocation(proxyMethod, i)[ FD ]
Line_28 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)-->Line_47 $$ Assert.assertEquals(_defaultValueMap.get(emptyMethod.getReturnType()), ReflectionTestUtil.invoke(stubObject, emptyMethod.getName(), new Class<?>[0]))[ FD ]
Line_51 $$ Collections.sort(copiedMethods, new Comparator<Method>() -->Line_56 $$ String name2 = method2.getName()[ FD ]
Line_7 $$ Class<?> stubClass = IntrabandProxyUtil.generateStubClass(_classLoader, TestGenerateStubFunction1.class, skeletonId)-->Line_60 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(stubClass.getName(), Level.INFO)) [ FD ]
Line_15 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)-->Line_30 $$ Assert.assertEquals(testId, ReflectionTestUtil.invoke(stubObject, idMethod.getName(), new Class<?>[0]))[ FD ]
Line_27 $$ constructor = stubClass.getConstructor(String.class, RegistrationReference.class, ExceptionHandler.class)-->Line_28 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)[ FD ]
Line_15 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)-->Line_63 $$ ReflectionTestUtil.invoke(stubObject, copiedMethod.getName(), new Class<?>[0])[ FD ]
Line_28 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)-->Line_30 $$ Assert.assertEquals(testId, ReflectionTestUtil.invoke(stubObject, idMethod.getName(), new Class<?>[0]))[ FD ]
Line_17 $$ LogRecord logRecord = logRecords.get(0)-->Line_20 $$ Assert.assertEquals(stubClass.getName() + " in <init>", logRecord.getMessage())[ FD ]
Line_7 $$ Class<?> stubClass = IntrabandProxyUtil.generateStubClass(_classLoader, TestGenerateStubFunction1.class, skeletonId)-->Line_13 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(stubClass.getName(), Level.INFO)) [ FD ]
Line_17 $$ LogRecord logRecord = logRecords.get(0)-->Line_18 $$ Assert.assertEquals(stubClass.getName() + " in <clinit>", logRecord.getMessage())[ FD ]
Line_34 $$ for (int i = 0; i < proxyMethods.size(); i++) -->Line_35 $$ Method proxyMethod = proxyMethods.get(i)[ CD ]
Line_15 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)-->Line_28 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)[ FD ]
Line_7 $$ Class<?> stubClass = IntrabandProxyUtil.generateStubClass(_classLoader, TestGenerateStubFunction1.class, skeletonId)-->Line_20 $$ Assert.assertEquals(stubClass.getName() + " in <init>", logRecord.getMessage())[ FD ]
Line_9 $$ String testId = "testId"-->Line_28 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)[ FD ]
Line_28 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)-->Line_63 $$ ReflectionTestUtil.invoke(stubObject, copiedMethod.getName(), new Class<?>[0])[ FD ]
Line_35 $$ Method proxyMethod = proxyMethods.get(i)-->Line_36 $$ Class<?>[] parameterTypes = proxyMethod.getParameterTypes()[ FD ]
Line_17 $$ LogRecord logRecord = logRecords.get(0)-->Line_65 $$ Assert.assertEquals(copiedMethod.getName(), logRecord.getMessage())[ FD ]
Line_11 $$ RegistrationReference registrationReference = new MockRegistrationReference(autoReplyMockIntraband)-->Line_28 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)[ FD ]
Line_34 $$ for (int i = 0; i < proxyMethods.size(); i++) -->Line_42 $$ Object object = ReflectionTestUtil.invoke(stubObject, proxyMethod.getName(), proxyMethod.getParameterTypes(), args)[ CD ]
Line_14 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_64 $$ LogRecord logRecord = logRecords.get(logRecords.size() - 1)[ FD ]
Line_14 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_17 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_10 $$ AutoReplyMockIntraband autoReplyMockIntraband = new AutoReplyMockIntraband(skeletonId, testId)-->Line_24 $$ Assert.assertSame(autoReplyMockIntraband, ReflectionTestUtil.getFieldValue(stubObject, "_intraband"))[ FD ]
Line_34 $$ for (int i = 0; i < proxyMethods.size(); i++) -->Line_43 $$ Assert.assertEquals(_sampleValueMap.get(proxyMethod.getReturnType()), object)[ CD ]
Line_15 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)-->Line_47 $$ Assert.assertEquals(_defaultValueMap.get(emptyMethod.getReturnType()), ReflectionTestUtil.invoke(stubObject, emptyMethod.getName(), new Class<?>[0]))[ FD ]
Line_12 $$ Object stubObject = null-->Line_63 $$ ReflectionTestUtil.invoke(stubObject, copiedMethod.getName(), new Class<?>[0])[ FD ]
Line_55 $$ String name1 = method1.getName()-->Line_57 $$ return name1.compareTo(name2)[ FD ]
Line_28 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)-->Line_42 $$ Object object = ReflectionTestUtil.invoke(stubObject, proxyMethod.getName(), proxyMethod.getParameterTypes(), args)[ FD ]
Line_9 $$ String testId = "testId"-->Line_30 $$ Assert.assertEquals(testId, ReflectionTestUtil.invoke(stubObject, idMethod.getName(), new Class<?>[0]))[ FD ]
Line_14 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_19 $$ logRecord = logRecords.get(1)[ FD ]
Line_14 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_16 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_35 $$ Method proxyMethod = proxyMethods.get(i)-->Line_42 $$ Object object = ReflectionTestUtil.invoke(stubObject, proxyMethod.getName(), proxyMethod.getParameterTypes(), args)[ FD ]
Line_34 $$ for (int i = 0; i < proxyMethods.size(); i++) -->Line_36 $$ Class<?>[] parameterTypes = proxyMethod.getParameterTypes()[ CD ]
Line_35 $$ Method proxyMethod = proxyMethods.get(i)-->Line_43 $$ Assert.assertEquals(_sampleValueMap.get(proxyMethod.getReturnType()), object)[ FD ]
Line_12 $$ Object stubObject = null-->Line_28 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)[ FD ]
Line_29 $$ for (Method idMethod : _getIdMethods(TestGenerateStubFunction2.class)) -->Line_30 $$ Assert.assertEquals(testId, ReflectionTestUtil.invoke(stubObject, idMethod.getName(), new Class<?>[0]))[ FD ]
Line_51 $$ Collections.sort(copiedMethods, new Comparator<Method>() -->Line_55 $$ String name1 = method1.getName()[ FD ]
Line_34 $$ for (int i = 0; i < proxyMethods.size(); i++) -->Line_41 $$ autoReplyMockIntraband.setInvocation(proxyMethod, i)[ CD ]
Line_34 $$ for (int i = 0; i < proxyMethods.size(); i++) -->Line_37 $$ Object[] args = new Object[parameterTypes.length][ CD ]
Line_56 $$ String name2 = method2.getName()-->Line_57 $$ return name1.compareTo(name2)[ FD ]
Line_12 $$ Object stubObject = null-->Line_24 $$ Assert.assertSame(autoReplyMockIntraband, ReflectionTestUtil.getFieldValue(stubObject, "_intraband"))[ FD ]
Line_15 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)-->Line_23 $$ Assert.assertSame(WarnLogExceptionHandler.INSTANCE, ReflectionTestUtil.getFieldValue(stubObject, "_exceptionHandler"))[ FD ]
Line_11 $$ RegistrationReference registrationReference = new MockRegistrationReference(autoReplyMockIntraband)-->Line_22 $$ Assert.assertSame(registrationReference, ReflectionTestUtil.getFieldValue(stubObject, "_registrationReference"))[ FD ]
Line_34 $$ for (int i = 0; i < proxyMethods.size(); i++) -->Line_35 $$ Method proxyMethod = proxyMethods.get(i)[ FD ]
Line_51 $$ Collections.sort(copiedMethods, new Comparator<Method>() -->Line_57 $$ return name1.compareTo(name2)[ CD ]
Line_8 $$ Constructor<?> constructor = stubClass.getConstructor(String.class, RegistrationReference.class, ExceptionHandler.class)-->Line_15 $$ stubObject = constructor.newInstance(testId, registrationReference, WarnLogExceptionHandler.INSTANCE)[ FD ]
Line_8 $$ Constructor<?> constructor = stubClass.getConstructor(String.class, RegistrationReference.class, ExceptionHandler.class)-->Line_27 $$ constructor = stubClass.getConstructor(String.class, RegistrationReference.class, ExceptionHandler.class)[ FD ]
Line_51 $$ Collections.sort(copiedMethods, new Comparator<Method>() -->Line_55 $$ String name1 = method1.getName()[ CD ]
Line_13 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(stubClass.getName(), Level.INFO)) -->Line_61 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_35 $$ Method proxyMethod = proxyMethods.get(i)-->Line_41 $$ autoReplyMockIntraband.setInvocation(proxyMethod, i)[ FD ]
