Line_2 $$ private static boolean proposePaxos(Commit proposal, List<InetAddress> endpoints, int requiredParticipants, boolean timeoutIfPartial, ConsistencyLevel consistencyLevel) throws WriteTimeoutException -->Line_4 $$ MessageOut<Commit> message = new MessageOut<Commit>(MessagingService.Verb.PAXOS_PROPOSE, proposal, Commit.serializer)[ CD ]
Line_2 $$ private static boolean proposePaxos(Commit proposal, List<InetAddress> endpoints, int requiredParticipants, boolean timeoutIfPartial, ConsistencyLevel consistencyLevel) throws WriteTimeoutException -->Line_9 $$ if (timeoutIfPartial && !callback.isFullyRefused())[ FD ]
Line_3 $$ ProposeCallback callback = new ProposeCallback(endpoints.size(), requiredParticipants, !timeoutIfPartial, consistencyLevel)-->Line_10 $$ throw new WriteTimeoutException(WriteType.CAS, consistencyLevel, callback.getAcceptCount(), requiredParticipants)[ FD ]
Line_3 $$ ProposeCallback callback = new ProposeCallback(endpoints.size(), requiredParticipants, !timeoutIfPartial, consistencyLevel)-->Line_9 $$ if (timeoutIfPartial && !callback.isFullyRefused())[ FD ]
Line_2 $$ private static boolean proposePaxos(Commit proposal, List<InetAddress> endpoints, int requiredParticipants, boolean timeoutIfPartial, ConsistencyLevel consistencyLevel) throws WriteTimeoutException -->Line_6 $$ callback.await()[ CD ]
Line_3 $$ ProposeCallback callback = new ProposeCallback(endpoints.size(), requiredParticipants, !timeoutIfPartial, consistencyLevel)-->Line_5 $$ MessagingService.instance().sendRR(message, target, callback)[ FD ]
Line_3 $$ ProposeCallback callback = new ProposeCallback(endpoints.size(), requiredParticipants, !timeoutIfPartial, consistencyLevel)-->Line_7 $$ if (callback.isSuccessful())[ FD ]
Line_2 $$ private static boolean proposePaxos(Commit proposal, List<InetAddress> endpoints, int requiredParticipants, boolean timeoutIfPartial, ConsistencyLevel consistencyLevel) throws WriteTimeoutException -->Line_3 $$ ProposeCallback callback = new ProposeCallback(endpoints.size(), requiredParticipants, !timeoutIfPartial, consistencyLevel)[ FD ]
Line_3 $$ ProposeCallback callback = new ProposeCallback(endpoints.size(), requiredParticipants, !timeoutIfPartial, consistencyLevel)-->Line_6 $$ callback.await()[ FD ]
Line_2 $$ private static boolean proposePaxos(Commit proposal, List<InetAddress> endpoints, int requiredParticipants, boolean timeoutIfPartial, ConsistencyLevel consistencyLevel) throws WriteTimeoutException -->Line_3 $$ ProposeCallback callback = new ProposeCallback(endpoints.size(), requiredParticipants, !timeoutIfPartial, consistencyLevel)[ CD ]
Line_7 $$ if (callback.isSuccessful())-->Line_8 $$ return true[ CD ]
Line_2 $$ private static boolean proposePaxos(Commit proposal, List<InetAddress> endpoints, int requiredParticipants, boolean timeoutIfPartial, ConsistencyLevel consistencyLevel) throws WriteTimeoutException -->Line_9 $$ if (timeoutIfPartial && !callback.isFullyRefused())[ CD ]
Line_2 $$ private static boolean proposePaxos(Commit proposal, List<InetAddress> endpoints, int requiredParticipants, boolean timeoutIfPartial, ConsistencyLevel consistencyLevel) throws WriteTimeoutException -->Line_7 $$ if (callback.isSuccessful())[ CD ]
Line_2 $$ private static boolean proposePaxos(Commit proposal, List<InetAddress> endpoints, int requiredParticipants, boolean timeoutIfPartial, ConsistencyLevel consistencyLevel) throws WriteTimeoutException -->Line_11 $$ return false[ CD ]
Line_4 $$ MessageOut<Commit> message = new MessageOut<Commit>(MessagingService.Verb.PAXOS_PROPOSE, proposal, Commit.serializer)-->Line_5 $$ MessagingService.instance().sendRR(message, target, callback)[ FD ]
