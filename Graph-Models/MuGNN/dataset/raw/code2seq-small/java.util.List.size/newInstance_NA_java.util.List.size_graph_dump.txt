Line_2 $$ public static <CommitId> PermanentLinearGraphBuilder<CommitId> newInstance(@NotNull List<? extends GraphCommit<CommitId>> graphCommits) -->Line_4 $$ Flags simpleNodes = new BitSetFlags(graphCommits.size())[ CD ]
Line_2 $$ public static <CommitId> PermanentLinearGraphBuilder<CommitId> newInstance(@NotNull List<? extends GraphCommit<CommitId>> graphCommits) -->Line_16 $$ return new PermanentLinearGraphBuilder<CommitId>(graphCommits, simpleNodes, longEdgesCount)[ CD ]
Line_2 $$ public static <CommitId> PermanentLinearGraphBuilder<CommitId> newInstance(@NotNull List<? extends GraphCommit<CommitId>> graphCommits) -->Line_3 $$ graphCommits = fixDuplicateParentCommits(graphCommits)[ FD ]
Line_2 $$ public static <CommitId> PermanentLinearGraphBuilder<CommitId> newInstance(@NotNull List<? extends GraphCommit<CommitId>> graphCommits) -->Line_4 $$ Flags simpleNodes = new BitSetFlags(graphCommits.size())[ FD ]
Line_4 $$ Flags simpleNodes = new BitSetFlags(graphCommits.size())-->Line_11 $$ simpleNodes.set(nodeIndex, true)[ FD ]
Line_10 $$ if (parents.size() == 1 && parents.get(0).equals(nextCommitHashIndex)) -->Line_11 $$ simpleNodes.set(nodeIndex, true)[ CD ]
Line_9 $$ List parents = commit.getParents()-->Line_13 $$ longEdgesCount += parents.size()[ FD ]
Line_10 $$ if (parents.size() == 1 && parents.get(0).equals(nextCommitHashIndex)) -->Line_13 $$ longEdgesCount += parents.size()[ CD ]
Line_7 $$ GraphCommit<CommitId> commit = graphCommits.get(nodeIndex)-->Line_9 $$ List parents = commit.getParents()[ FD ]
Line_8 $$ CommitId nextCommitHashIndex = nextCommitHashIndex(graphCommits, nodeIndex)-->Line_10 $$ if (parents.size() == 1 && parents.get(0).equals(nextCommitHashIndex)) [ FD ]
Line_6 $$ for (int nodeIndex = 0; nodeIndex < graphCommits.size(); nodeIndex++) -->Line_9 $$ List parents = commit.getParents()[ CD ]
Line_9 $$ List parents = commit.getParents()-->Line_10 $$ if (parents.size() == 1 && parents.get(0).equals(nextCommitHashIndex)) [ FD ]
Line_2 $$ public static <CommitId> PermanentLinearGraphBuilder<CommitId> newInstance(@NotNull List<? extends GraphCommit<CommitId>> graphCommits) -->Line_6 $$ for (int nodeIndex = 0; nodeIndex < graphCommits.size(); nodeIndex++) [ CD ]
Line_2 $$ public static <CommitId> PermanentLinearGraphBuilder<CommitId> newInstance(@NotNull List<? extends GraphCommit<CommitId>> graphCommits) -->Line_7 $$ GraphCommit<CommitId> commit = graphCommits.get(nodeIndex)[ FD ]
Line_6 $$ for (int nodeIndex = 0; nodeIndex < graphCommits.size(); nodeIndex++) -->Line_10 $$ if (parents.size() == 1 && parents.get(0).equals(nextCommitHashIndex)) [ CD ]
Line_2 $$ public static <CommitId> PermanentLinearGraphBuilder<CommitId> newInstance(@NotNull List<? extends GraphCommit<CommitId>> graphCommits) -->Line_6 $$ for (int nodeIndex = 0; nodeIndex < graphCommits.size(); nodeIndex++) [ FD ]
Line_6 $$ for (int nodeIndex = 0; nodeIndex < graphCommits.size(); nodeIndex++) -->Line_7 $$ GraphCommit<CommitId> commit = graphCommits.get(nodeIndex)[ FD ]
Line_6 $$ for (int nodeIndex = 0; nodeIndex < graphCommits.size(); nodeIndex++) -->Line_8 $$ CommitId nextCommitHashIndex = nextCommitHashIndex(graphCommits, nodeIndex)[ FD ]
Line_2 $$ public static <CommitId> PermanentLinearGraphBuilder<CommitId> newInstance(@NotNull List<? extends GraphCommit<CommitId>> graphCommits) -->Line_8 $$ CommitId nextCommitHashIndex = nextCommitHashIndex(graphCommits, nodeIndex)[ FD ]
Line_5 $$ int longEdgesCount = 0-->Line_13 $$ longEdgesCount += parents.size()[ FD ]
Line_6 $$ for (int nodeIndex = 0; nodeIndex < graphCommits.size(); nodeIndex++) -->Line_11 $$ simpleNodes.set(nodeIndex, true)[ FD ]
Line_6 $$ for (int nodeIndex = 0; nodeIndex < graphCommits.size(); nodeIndex++) -->Line_8 $$ CommitId nextCommitHashIndex = nextCommitHashIndex(graphCommits, nodeIndex)[ CD ]
Line_6 $$ for (int nodeIndex = 0; nodeIndex < graphCommits.size(); nodeIndex++) -->Line_7 $$ GraphCommit<CommitId> commit = graphCommits.get(nodeIndex)[ CD ]
Line_2 $$ public static <CommitId> PermanentLinearGraphBuilder<CommitId> newInstance(@NotNull List<? extends GraphCommit<CommitId>> graphCommits) -->Line_3 $$ graphCommits = fixDuplicateParentCommits(graphCommits)[ CD ]
Line_2 $$ public static <CommitId> PermanentLinearGraphBuilder<CommitId> newInstance(@NotNull List<? extends GraphCommit<CommitId>> graphCommits) -->Line_5 $$ int longEdgesCount = 0[ CD ]
