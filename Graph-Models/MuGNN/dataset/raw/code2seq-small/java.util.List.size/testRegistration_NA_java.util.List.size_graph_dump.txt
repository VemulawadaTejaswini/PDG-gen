Line_2 $$ public void testRegistration() -->Line_28 $$ ReflectionTestUtil.setFieldValue(SPIUtil.class, "_spi", new MockSPI())[ CD ]
Line_9 $$ List<SPIProvider> spiProviders = MPIHelperUtil.getSPIProviders()-->Line_37 $$ Assert.assertEquals(1, spiProviders.size())[ FD ]
Line_7 $$ AtomicReference<SPIProvider> spiProviderReference = SPIClassPathContextListener.spiProviderReference-->Line_34 $$ spiProviderReference = SPIClassPathContextListener.spiProviderReference[ FD ]
Line_2 $$ public void testRegistration() -->Line_21 $$ spiProviders = MPIHelperUtil.getSPIProviders()[ CD ]
Line_7 $$ AtomicReference<SPIProvider> spiProviderReference = SPIClassPathContextListener.spiProviderReference-->Line_38 $$ Assert.assertSame(spiProviderReference.get(), spiProviders.get(0))[ FD ]
Line_3 $$ File embeddedLibDir = new File(_CONTEXT_PATH, _EMBEDDED_LIB_DIR_NAME)-->Line_39 $$ embeddedLibDir.delete()[ FD ]
Line_2 $$ public void testRegistration() -->Line_3 $$ File embeddedLibDir = new File(_CONTEXT_PATH, _EMBEDDED_LIB_DIR_NAME)[ CD ]
Line_9 $$ List<SPIProvider> spiProviders = MPIHelperUtil.getSPIProviders()-->Line_26 $$ Assert.assertTrue(spiProviders.isEmpty())[ FD ]
Line_21 $$ spiProviders = MPIHelperUtil.getSPIProviders()-->Line_36 $$ spiProviders = MPIHelperUtil.getSPIProviders()[ FD ]
Line_2 $$ public void testRegistration() -->Line_37 $$ Assert.assertEquals(1, spiProviders.size())[ CD ]
Line_9 $$ List<SPIProvider> spiProviders = MPIHelperUtil.getSPIProviders()-->Line_25 $$ spiProviders = MPIHelperUtil.getSPIProviders()[ FD ]
Line_2 $$ public void testRegistration() -->Line_11 $$ Assert.assertSame(spiProviderReference.get(), spiProviders.get(0))[ CD ]
Line_12 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(SPIClassPathContextListener.class.getName(), Level.SEVERE)) -->Line_13 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_7 $$ AtomicReference<SPIProvider> spiProviderReference = SPIClassPathContextListener.spiProviderReference-->Line_11 $$ Assert.assertSame(spiProviderReference.get(), spiProviders.get(0))[ FD ]
Line_2 $$ public void testRegistration() -->Line_35 $$ Assert.assertNotNull(spiProviderReference.get())[ CD ]
Line_2 $$ public void testRegistration() -->Line_8 $$ Assert.assertNotNull(spiProviderReference.get())[ CD ]
Line_2 $$ public void testRegistration() -->Line_9 $$ List<SPIProvider> spiProviders = MPIHelperUtil.getSPIProviders()[ CD ]
Line_4 $$ SPIClassPathContextListener spiClassPathContextListener = new SPIClassPathContextListener()-->Line_23 $$ spiClassPathContextListener.contextDestroyed(new ServletContextEvent(_mockServletContext))[ FD ]
Line_13 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_15 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_2 $$ public void testRegistration() -->Line_26 $$ Assert.assertTrue(spiProviders.isEmpty())[ CD ]
Line_16 $$ LogRecord logRecord = logRecords.get(0)-->Line_17 $$ Assert.assertEquals("Duplicate SPI provider " + spiProviderReference.get() + " is already registered in servlet context " + _mockServletContext.getContextPath(), logRecord.getMessage())[ FD ]
Line_2 $$ public void testRegistration() -->Line_7 $$ AtomicReference<SPIProvider> spiProviderReference = SPIClassPathContextListener.spiProviderReference[ CD ]
Line_34 $$ spiProviderReference = SPIClassPathContextListener.spiProviderReference-->Line_35 $$ Assert.assertNotNull(spiProviderReference.get())[ FD ]
Line_25 $$ spiProviders = MPIHelperUtil.getSPIProviders()-->Line_26 $$ Assert.assertTrue(spiProviders.isEmpty())[ FD ]
Line_9 $$ List<SPIProvider> spiProviders = MPIHelperUtil.getSPIProviders()-->Line_38 $$ Assert.assertSame(spiProviderReference.get(), spiProviders.get(0))[ FD ]
Line_21 $$ spiProviders = MPIHelperUtil.getSPIProviders()-->Line_38 $$ Assert.assertSame(spiProviderReference.get(), spiProviders.get(0))[ FD ]
Line_21 $$ spiProviders = MPIHelperUtil.getSPIProviders()-->Line_22 $$ Assert.assertTrue(spiProviders.isEmpty())[ FD ]
Line_34 $$ spiProviderReference = SPIClassPathContextListener.spiProviderReference-->Line_38 $$ Assert.assertSame(spiProviderReference.get(), spiProviders.get(0))[ FD ]
Line_36 $$ spiProviders = MPIHelperUtil.getSPIProviders()-->Line_37 $$ Assert.assertEquals(1, spiProviders.size())[ FD ]
Line_2 $$ public void testRegistration() -->Line_22 $$ Assert.assertTrue(spiProviders.isEmpty())[ CD ]
Line_9 $$ List<SPIProvider> spiProviders = MPIHelperUtil.getSPIProviders()-->Line_11 $$ Assert.assertSame(spiProviderReference.get(), spiProviders.get(0))[ FD ]
Line_9 $$ List<SPIProvider> spiProviders = MPIHelperUtil.getSPIProviders()-->Line_22 $$ Assert.assertTrue(spiProviders.isEmpty())[ FD ]
Line_2 $$ public void testRegistration() -->Line_27 $$ _mockServletContext.addInitParameter("spiProviderClassName", MockSPIProvider.class.getName())[ CD ]
Line_25 $$ spiProviders = MPIHelperUtil.getSPIProviders()-->Line_38 $$ Assert.assertSame(spiProviderReference.get(), spiProviders.get(0))[ FD ]
Line_2 $$ public void testRegistration() -->Line_19 $$ spiClassPathContextListener.contextDestroyed(new ServletContextEvent(_mockServletContext))[ CD ]
Line_13 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_16 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_21 $$ spiProviders = MPIHelperUtil.getSPIProviders()-->Line_37 $$ Assert.assertEquals(1, spiProviders.size())[ FD ]
Line_2 $$ public void testRegistration() -->Line_25 $$ spiProviders = MPIHelperUtil.getSPIProviders()[ CD ]
Line_2 $$ public void testRegistration() -->Line_10 $$ Assert.assertEquals(1, spiProviders.size())[ CD ]
Line_7 $$ AtomicReference<SPIProvider> spiProviderReference = SPIClassPathContextListener.spiProviderReference-->Line_35 $$ Assert.assertNotNull(spiProviderReference.get())[ FD ]
Line_2 $$ public void testRegistration() -->Line_38 $$ Assert.assertSame(spiProviderReference.get(), spiProviders.get(0))[ CD ]
Line_36 $$ spiProviders = MPIHelperUtil.getSPIProviders()-->Line_38 $$ Assert.assertSame(spiProviderReference.get(), spiProviders.get(0))[ FD ]
Line_2 $$ public void testRegistration() -->Line_34 $$ spiProviderReference = SPIClassPathContextListener.spiProviderReference[ CD ]
Line_2 $$ public void testRegistration() -->Line_5 $$ _mockServletContext.addInitParameter("spiProviderClassName", MockSPIProvider.class.getName())[ CD ]
Line_2 $$ public void testRegistration() -->Line_39 $$ embeddedLibDir.delete()[ CD ]
Line_2 $$ public void testRegistration() -->Line_23 $$ spiClassPathContextListener.contextDestroyed(new ServletContextEvent(_mockServletContext))[ CD ]
Line_21 $$ spiProviders = MPIHelperUtil.getSPIProviders()-->Line_25 $$ spiProviders = MPIHelperUtil.getSPIProviders()[ FD ]
Line_21 $$ spiProviders = MPIHelperUtil.getSPIProviders()-->Line_26 $$ Assert.assertTrue(spiProviders.isEmpty())[ FD ]
Line_2 $$ public void testRegistration() -->Line_4 $$ SPIClassPathContextListener spiClassPathContextListener = new SPIClassPathContextListener()[ CD ]
Line_4 $$ SPIClassPathContextListener spiClassPathContextListener = new SPIClassPathContextListener()-->Line_19 $$ spiClassPathContextListener.contextDestroyed(new ServletContextEvent(_mockServletContext))[ FD ]
Line_9 $$ List<SPIProvider> spiProviders = MPIHelperUtil.getSPIProviders()-->Line_21 $$ spiProviders = MPIHelperUtil.getSPIProviders()[ FD ]
Line_2 $$ public void testRegistration() -->Line_24 $$ Assert.assertNull(spiProviderReference.get())[ CD ]
Line_2 $$ public void testRegistration() -->Line_36 $$ spiProviders = MPIHelperUtil.getSPIProviders()[ CD ]
Line_4 $$ SPIClassPathContextListener spiClassPathContextListener = new SPIClassPathContextListener()-->Line_30 $$ spiClassPathContextListener.contextInitialized(new ServletContextEvent(_mockServletContext))[ FD ]
Line_25 $$ spiProviders = MPIHelperUtil.getSPIProviders()-->Line_36 $$ spiProviders = MPIHelperUtil.getSPIProviders()[ FD ]
Line_7 $$ AtomicReference<SPIProvider> spiProviderReference = SPIClassPathContextListener.spiProviderReference-->Line_20 $$ Assert.assertNull(spiProviderReference.get())[ FD ]
Line_25 $$ spiProviders = MPIHelperUtil.getSPIProviders()-->Line_37 $$ Assert.assertEquals(1, spiProviders.size())[ FD ]
Line_7 $$ AtomicReference<SPIProvider> spiProviderReference = SPIClassPathContextListener.spiProviderReference-->Line_8 $$ Assert.assertNotNull(spiProviderReference.get())[ FD ]
Line_2 $$ public void testRegistration() -->Line_6 $$ spiClassPathContextListener.contextInitialized(new ServletContextEvent(_mockServletContext))[ CD ]
Line_4 $$ SPIClassPathContextListener spiClassPathContextListener = new SPIClassPathContextListener()-->Line_6 $$ spiClassPathContextListener.contextInitialized(new ServletContextEvent(_mockServletContext))[ FD ]
Line_4 $$ SPIClassPathContextListener spiClassPathContextListener = new SPIClassPathContextListener()-->Line_14 $$ spiClassPathContextListener.contextInitialized(new ServletContextEvent(_mockServletContext))[ FD ]
Line_9 $$ List<SPIProvider> spiProviders = MPIHelperUtil.getSPIProviders()-->Line_10 $$ Assert.assertEquals(1, spiProviders.size())[ FD ]
Line_9 $$ List<SPIProvider> spiProviders = MPIHelperUtil.getSPIProviders()-->Line_36 $$ spiProviders = MPIHelperUtil.getSPIProviders()[ FD ]
Line_7 $$ AtomicReference<SPIProvider> spiProviderReference = SPIClassPathContextListener.spiProviderReference-->Line_24 $$ Assert.assertNull(spiProviderReference.get())[ FD ]
Line_7 $$ AtomicReference<SPIProvider> spiProviderReference = SPIClassPathContextListener.spiProviderReference-->Line_17 $$ Assert.assertEquals("Duplicate SPI provider " + spiProviderReference.get() + " is already registered in servlet context " + _mockServletContext.getContextPath(), logRecord.getMessage())[ FD ]
Line_2 $$ public void testRegistration() -->Line_20 $$ Assert.assertNull(spiProviderReference.get())[ CD ]
