Line_9 $$ AtomicReference<SPIProvider> spiProviderReference = SPIClassPathContextListener.spiProviderReference-->Line_24 $$ Assert.assertNull(spiProviderReference.get())[ FD ]
Line_25 $$ spiProviders = MPIHelperUtil.getSPIProviders()-->Line_30 $$ spiProviders = MPIHelperUtil.getSPIProviders()[ FD ]
Line_16 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_19 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_11 $$ List<SPIProvider> spiProviders = MPIHelperUtil.getSPIProviders()-->Line_30 $$ spiProviders = MPIHelperUtil.getSPIProviders()[ FD ]
Line_11 $$ List<SPIProvider> spiProviders = MPIHelperUtil.getSPIProviders()-->Line_42 $$ spiProviders = MPIHelperUtil.getSPIProviders()[ FD ]
Line_42 $$ spiProviders = MPIHelperUtil.getSPIProviders()-->Line_44 $$ Assert.assertSame(spiProviderReference.get(), spiProviders.get(0))[ FD ]
Line_11 $$ List<SPIProvider> spiProviders = MPIHelperUtil.getSPIProviders()-->Line_25 $$ spiProviders = MPIHelperUtil.getSPIProviders()[ FD ]
Line_25 $$ spiProviders = MPIHelperUtil.getSPIProviders()-->Line_26 $$ Assert.assertTrue(spiProviders.isEmpty())[ FD ]
Line_11 $$ List<SPIProvider> spiProviders = MPIHelperUtil.getSPIProviders()-->Line_43 $$ Assert.assertEquals(1, spiProviders.size())[ FD ]
Line_9 $$ AtomicReference<SPIProvider> spiProviderReference = SPIClassPathContextListener.spiProviderReference-->Line_10 $$ Assert.assertNotNull(spiProviderReference.get())[ FD ]
Line_6 $$ SPIClassPathContextListener spiClassPathContextListener = new SPIClassPathContextListener()-->Line_17 $$ spiClassPathContextListener.contextInitialized(new ServletContextEvent(_mockServletContext))[ FD ]
Line_40 $$ spiProviderReference = SPIClassPathContextListener.spiProviderReference-->Line_41 $$ Assert.assertNotNull(spiProviderReference.get())[ FD ]
Line_25 $$ spiProviders = MPIHelperUtil.getSPIProviders()-->Line_43 $$ Assert.assertEquals(1, spiProviders.size())[ FD ]
Line_16 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_18 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_9 $$ AtomicReference<SPIProvider> spiProviderReference = SPIClassPathContextListener.spiProviderReference-->Line_29 $$ Assert.assertNull(spiProviderReference.get())[ FD ]
Line_9 $$ AtomicReference<SPIProvider> spiProviderReference = SPIClassPathContextListener.spiProviderReference-->Line_20 $$ Assert.assertEquals("Duplicate SPI provider " + spiProviderReference.get() + " is already registered in servlet context " + _mockServletContext.getContextPath(), logRecord.getMessage())[ FD ]
Line_30 $$ spiProviders = MPIHelperUtil.getSPIProviders()-->Line_42 $$ spiProviders = MPIHelperUtil.getSPIProviders()[ FD ]
Line_19 $$ LogRecord logRecord = logRecords.get(0)-->Line_20 $$ Assert.assertEquals("Duplicate SPI provider " + spiProviderReference.get() + " is already registered in servlet context " + _mockServletContext.getContextPath(), logRecord.getMessage())[ FD ]
Line_25 $$ spiProviders = MPIHelperUtil.getSPIProviders()-->Line_44 $$ Assert.assertSame(spiProviderReference.get(), spiProviders.get(0))[ FD ]
Line_11 $$ List<SPIProvider> spiProviders = MPIHelperUtil.getSPIProviders()-->Line_44 $$ Assert.assertSame(spiProviderReference.get(), spiProviders.get(0))[ FD ]
Line_6 $$ SPIClassPathContextListener spiClassPathContextListener = new SPIClassPathContextListener()-->Line_8 $$ spiClassPathContextListener.contextInitialized(new ServletContextEvent(_mockServletContext))[ FD ]
Line_30 $$ spiProviders = MPIHelperUtil.getSPIProviders()-->Line_44 $$ Assert.assertSame(spiProviderReference.get(), spiProviders.get(0))[ FD ]
Line_6 $$ SPIClassPathContextListener spiClassPathContextListener = new SPIClassPathContextListener()-->Line_36 $$ spiClassPathContextListener.contextInitialized(new ServletContextEvent(_mockServletContext))[ FD ]
Line_9 $$ AtomicReference<SPIProvider> spiProviderReference = SPIClassPathContextListener.spiProviderReference-->Line_13 $$ Assert.assertSame(spiProviderReference.get(), spiProviders.get(0))[ FD ]
Line_9 $$ AtomicReference<SPIProvider> spiProviderReference = SPIClassPathContextListener.spiProviderReference-->Line_44 $$ Assert.assertSame(spiProviderReference.get(), spiProviders.get(0))[ FD ]
Line_42 $$ spiProviders = MPIHelperUtil.getSPIProviders()-->Line_43 $$ Assert.assertEquals(1, spiProviders.size())[ FD ]
Line_9 $$ AtomicReference<SPIProvider> spiProviderReference = SPIClassPathContextListener.spiProviderReference-->Line_40 $$ spiProviderReference = SPIClassPathContextListener.spiProviderReference[ FD ]
Line_11 $$ List<SPIProvider> spiProviders = MPIHelperUtil.getSPIProviders()-->Line_12 $$ Assert.assertEquals(1, spiProviders.size())[ FD ]
Line_30 $$ spiProviders = MPIHelperUtil.getSPIProviders()-->Line_31 $$ Assert.assertTrue(spiProviders.isEmpty())[ FD ]
Line_25 $$ spiProviders = MPIHelperUtil.getSPIProviders()-->Line_31 $$ Assert.assertTrue(spiProviders.isEmpty())[ FD ]
Line_30 $$ spiProviders = MPIHelperUtil.getSPIProviders()-->Line_43 $$ Assert.assertEquals(1, spiProviders.size())[ FD ]
Line_9 $$ AtomicReference<SPIProvider> spiProviderReference = SPIClassPathContextListener.spiProviderReference-->Line_41 $$ Assert.assertNotNull(spiProviderReference.get())[ FD ]
Line_11 $$ List<SPIProvider> spiProviders = MPIHelperUtil.getSPIProviders()-->Line_31 $$ Assert.assertTrue(spiProviders.isEmpty())[ FD ]
Line_11 $$ List<SPIProvider> spiProviders = MPIHelperUtil.getSPIProviders()-->Line_26 $$ Assert.assertTrue(spiProviders.isEmpty())[ FD ]
Line_11 $$ List<SPIProvider> spiProviders = MPIHelperUtil.getSPIProviders()-->Line_13 $$ Assert.assertSame(spiProviderReference.get(), spiProviders.get(0))[ FD ]
Line_40 $$ spiProviderReference = SPIClassPathContextListener.spiProviderReference-->Line_44 $$ Assert.assertSame(spiProviderReference.get(), spiProviders.get(0))[ FD ]
Line_25 $$ spiProviders = MPIHelperUtil.getSPIProviders()-->Line_42 $$ spiProviders = MPIHelperUtil.getSPIProviders()[ FD ]
