Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_39 $$ session.getTransaction().commit()[ CD ]
Line_11 $$ Investment investment1 = new Investment()-->Line_24 $$ customer.investments.add(investment1)[ FD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_20 $$ investment2.date = new Date()[ CD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_32 $$ Object result = results.get(0)[ CD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_36 $$ session.beginTransaction()[ CD ]
Line_35 $$ session = openSession()-->Line_39 $$ session.getTransaction().commit()[ FD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_33 $$ assertNotNull(result)[ CD ]
Line_29 $$ List results = getResults(sessionFactory().getEntityPersister(Customer.class.getName()))-->Line_31 $$ assertSame(results.get(0), results.get(1))[ FD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_13 $$ investment1.date = new Date()[ CD ]
Line_3 $$ Session session = openSession()-->Line_35 $$ session = openSession()[ FD ]
Line_35 $$ session = openSession()-->Line_37 $$ session.delete(customerWork.investments.get(0).performedBy)[ FD ]
Line_3 $$ Session session = openSession()-->Line_8 $$ session.save(person)[ FD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_34 $$ Customer customerWork = ExtraAssertions.assertTyping(Customer.class, result)[ CD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_28 $$ session.close()[ CD ]
Line_3 $$ Session session = openSession()-->Line_40 $$ session.close()[ FD ]
Line_9 $$ Customer customer = new Customer()-->Line_26 $$ session.save(customer)[ FD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_19 $$ investment2.description = "bond"[ CD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_8 $$ session.save(person)[ CD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_16 $$ investment1.monetaryAmount.amount = BigDecimal.valueOf(1234, 2)[ CD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_25 $$ customer.investments.add(investment2)[ CD ]
Line_29 $$ List results = getResults(sessionFactory().getEntityPersister(Customer.class.getName()))-->Line_32 $$ Object result = results.get(0)[ FD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_37 $$ session.delete(customerWork.investments.get(0).performedBy)[ CD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_14 $$ investment1.monetaryAmount = new MonetaryAmount()[ CD ]
Line_3 $$ Session session = openSession()-->Line_28 $$ session.close()[ FD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_40 $$ session.close()[ CD ]
Line_3 $$ Session session = openSession()-->Line_4 $$ session.beginTransaction()[ FD ]
Line_35 $$ session = openSession()-->Line_38 $$ session.delete(customerWork)[ FD ]
Line_5 $$ Person person = new Person()-->Line_8 $$ session.save(person)[ FD ]
Line_3 $$ Session session = openSession()-->Line_37 $$ session.delete(customerWork.investments.get(0).performedBy)[ FD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_35 $$ session = openSession()[ CD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_21 $$ investment2.monetaryAmount = new MonetaryAmount()[ CD ]
Line_32 $$ Object result = results.get(0)-->Line_34 $$ Customer customerWork = ExtraAssertions.assertTyping(Customer.class, result)[ FD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_11 $$ Investment investment1 = new Investment()[ CD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_31 $$ assertSame(results.get(0), results.get(1))[ CD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_38 $$ session.delete(customerWork)[ CD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_29 $$ List results = getResults(sessionFactory().getEntityPersister(Customer.class.getName()))[ CD ]
Line_3 $$ Session session = openSession()-->Line_36 $$ session.beginTransaction()[ FD ]
Line_35 $$ session = openSession()-->Line_36 $$ session.beginTransaction()[ FD ]
Line_34 $$ Customer customerWork = ExtraAssertions.assertTyping(Customer.class, result)-->Line_38 $$ session.delete(customerWork)[ FD ]
Line_3 $$ Session session = openSession()-->Line_39 $$ session.getTransaction().commit()[ FD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_7 $$ person.name = "Joe Blow"[ CD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_23 $$ investment2.monetaryAmount.amount = BigDecimal.valueOf(98176, 1)[ CD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_6 $$ person.id = 1[ CD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_12 $$ investment1.description = "stock"[ CD ]
Line_5 $$ Person person = new Person()-->Line_17 $$ investment1.performedBy = person[ FD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_18 $$ Investment investment2 = new Investment()[ CD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_10 $$ customer.id = 1L[ CD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_3 $$ Session session = openSession()[ CD ]
Line_3 $$ Session session = openSession()-->Line_26 $$ session.save(customer)[ FD ]
Line_35 $$ session = openSession()-->Line_40 $$ session.close()[ FD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_5 $$ Person person = new Person()[ CD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_15 $$ investment1.monetaryAmount.currency = MonetaryAmount.CurrencyCode.USD[ CD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_30 $$ assertEquals(2, results.size())[ CD ]
Line_32 $$ Object result = results.get(0)-->Line_33 $$ assertNotNull(result)[ FD ]
Line_18 $$ Investment investment2 = new Investment()-->Line_25 $$ customer.investments.add(investment2)[ FD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_4 $$ session.beginTransaction()[ CD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_26 $$ session.save(customer)[ CD ]
Line_29 $$ List results = getResults(sessionFactory().getEntityPersister(Customer.class.getName()))-->Line_30 $$ assertEquals(2, results.size())[ FD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_22 $$ investment2.monetaryAmount.currency = MonetaryAmount.CurrencyCode.EUR[ CD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_27 $$ session.getTransaction().commit()[ CD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_24 $$ customer.investments.add(investment1)[ CD ]
Line_3 $$ Session session = openSession()-->Line_38 $$ session.delete(customerWork)[ FD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_17 $$ investment1.performedBy = person[ CD ]
Line_3 $$ Session session = openSession()-->Line_27 $$ session.getTransaction().commit()[ FD ]
Line_2 $$ public void testNestedCompositeElementCollectionProcessing() throws Exception -->Line_9 $$ Customer customer = new Customer()[ CD ]
