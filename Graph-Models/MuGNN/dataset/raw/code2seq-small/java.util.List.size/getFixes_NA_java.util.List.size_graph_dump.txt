Line_3 $$ final List<LocalQuickFix> fixes = new ArrayList<LocalQuickFix>(hints == null ? 1 : hints.size())-->Line_5 $$ addFix(descriptor, fixes, null)[ FD ]
Line_2 $$ private LocalQuickFix[] getFixes(@NotNull CommonProblemDescriptor descriptor, List<String> hints) -->Line_4 $$ if (hints == null) [ CD ]
Line_4 $$ if (hints == null) -->Line_5 $$ addFix(descriptor, fixes, null)[ CD ]
Line_7 $$ for (String hint : hints) -->Line_8 $$ addFix(descriptor, fixes, hint)[ FD ]
Line_2 $$ private LocalQuickFix[] getFixes(@NotNull CommonProblemDescriptor descriptor, List<String> hints) -->Line_5 $$ addFix(descriptor, fixes, null)[ FD ]
Line_3 $$ final List<LocalQuickFix> fixes = new ArrayList<LocalQuickFix>(hints == null ? 1 : hints.size())-->Line_11 $$ return fixes.isEmpty() ? null : fixes.toArray(new LocalQuickFix[fixes.size()])[ FD ]
Line_2 $$ private LocalQuickFix[] getFixes(@NotNull CommonProblemDescriptor descriptor, List<String> hints) -->Line_3 $$ final List<LocalQuickFix> fixes = new ArrayList<LocalQuickFix>(hints == null ? 1 : hints.size())[ FD ]
Line_2 $$ private LocalQuickFix[] getFixes(@NotNull CommonProblemDescriptor descriptor, List<String> hints) -->Line_4 $$ if (hints == null) [ FD ]
Line_2 $$ private LocalQuickFix[] getFixes(@NotNull CommonProblemDescriptor descriptor, List<String> hints) -->Line_8 $$ addFix(descriptor, fixes, hint)[ FD ]
Line_2 $$ private LocalQuickFix[] getFixes(@NotNull CommonProblemDescriptor descriptor, List<String> hints) -->Line_11 $$ return fixes.isEmpty() ? null : fixes.toArray(new LocalQuickFix[fixes.size()])[ CD ]
Line_3 $$ final List<LocalQuickFix> fixes = new ArrayList<LocalQuickFix>(hints == null ? 1 : hints.size())-->Line_8 $$ addFix(descriptor, fixes, hint)[ FD ]
Line_2 $$ private LocalQuickFix[] getFixes(@NotNull CommonProblemDescriptor descriptor, List<String> hints) -->Line_3 $$ final List<LocalQuickFix> fixes = new ArrayList<LocalQuickFix>(hints == null ? 1 : hints.size())[ CD ]
