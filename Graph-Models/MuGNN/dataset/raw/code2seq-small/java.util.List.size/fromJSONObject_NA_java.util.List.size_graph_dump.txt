Line_2 $$ public Term fromJSONObject(Object parsed) throws MarshalException -->Line_4 $$ parsed = Json.decodeJson((String) parsed)[ FD ]
Line_7 $$ List list = (List) parsed-->Line_8 $$ Set<Term> terms = new HashSet(list.size())[ FD ]
Line_3 $$ if (parsed instanceof String)-->Line_4 $$ parsed = Json.decodeJson((String) parsed)[ CD ]
Line_2 $$ public Term fromJSONObject(Object parsed) throws MarshalException -->Line_3 $$ if (parsed instanceof String)[ FD ]
Line_9 $$ for (Object element : list) -->Line_12 $$ terms.add(elements.fromJSONObject(element))[ FD ]
Line_9 $$ for (Object element : list) -->Line_10 $$ if (element == null)[ FD ]
Line_8 $$ Set<Term> terms = new HashSet(list.size())-->Line_12 $$ terms.add(elements.fromJSONObject(element))[ FD ]
Line_2 $$ public Term fromJSONObject(Object parsed) throws MarshalException -->Line_14 $$ return new Sets.DelayedValue(elements, terms)[ CD ]
Line_4 $$ parsed = Json.decodeJson((String) parsed)-->Line_6 $$ throw new MarshalException(String.format("Expected a list (representing a set), but got a %s: %s", parsed.getClass().getSimpleName(), parsed))[ FD ]
Line_2 $$ public Term fromJSONObject(Object parsed) throws MarshalException -->Line_3 $$ if (parsed instanceof String)[ CD ]
Line_2 $$ public Term fromJSONObject(Object parsed) throws MarshalException -->Line_7 $$ List list = (List) parsed[ CD ]
Line_2 $$ public Term fromJSONObject(Object parsed) throws MarshalException -->Line_8 $$ Set<Term> terms = new HashSet(list.size())[ CD ]
Line_2 $$ public Term fromJSONObject(Object parsed) throws MarshalException -->Line_6 $$ throw new MarshalException(String.format("Expected a list (representing a set), but got a %s: %s", parsed.getClass().getSimpleName(), parsed))[ FD ]
Line_2 $$ public Term fromJSONObject(Object parsed) throws MarshalException -->Line_5 $$ if (!(parsed instanceof List))[ CD ]
