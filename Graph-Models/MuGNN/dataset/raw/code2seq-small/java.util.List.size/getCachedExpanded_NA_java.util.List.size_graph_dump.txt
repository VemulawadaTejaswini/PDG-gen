Line_2 $$ private Boolean getCachedExpanded(int start, int end, int index) -->Line_21 $$ return null[ CD ]
Line_3 $$ if (start == end)-->Line_4 $$ return null[ CD ]
Line_2 $$ private Boolean getCachedExpanded(int start, int end, int index) -->Line_9 $$ if (lineRange.end <= start)[ FD ]
Line_5 $$ List<FoldedRangeState> ranges = myCache.ranges[index]-->Line_7 $$ FoldedRangeState range = ranges.get(myIndex[index])[ FD ]
Line_12 $$ if (range.collapsed != null && range.collapsed.contains(start, end))-->Line_13 $$ return false[ CD ]
Line_6 $$ for (; myIndex[index] < ranges.size(); myIndex[index]++) -->Line_8 $$ LineRange lineRange = range.getLineRange()[ CD ]
Line_2 $$ private Boolean getCachedExpanded(int start, int end, int index) -->Line_3 $$ if (start == end)[ CD ]
Line_2 $$ private Boolean getCachedExpanded(int start, int end, int index) -->Line_11 $$ if (lineRange.contains(start, end)) [ FD ]
Line_8 $$ LineRange lineRange = range.getLineRange()-->Line_11 $$ if (lineRange.contains(start, end)) [ FD ]
Line_18 $$ if (lineRange.start >= start)-->Line_19 $$ return null[ CD ]
Line_2 $$ private Boolean getCachedExpanded(int start, int end, int index) -->Line_5 $$ List<FoldedRangeState> ranges = myCache.ranges[index][ CD ]
Line_11 $$ if (lineRange.contains(start, end)) -->Line_14 $$ if (range.expanded != null && range.expanded.contains(start, end))[ CD ]
Line_5 $$ List<FoldedRangeState> ranges = myCache.ranges[index]-->Line_6 $$ for (; myIndex[index] < ranges.size(); myIndex[index]++) [ FD ]
Line_2 $$ private Boolean getCachedExpanded(int start, int end, int index) -->Line_14 $$ if (range.expanded != null && range.expanded.contains(start, end))[ FD ]
Line_11 $$ if (lineRange.contains(start, end)) -->Line_12 $$ if (range.collapsed != null && range.collapsed.contains(start, end))[ CD ]
Line_2 $$ private Boolean getCachedExpanded(int start, int end, int index) -->Line_18 $$ if (lineRange.start >= start)[ FD ]
Line_7 $$ FoldedRangeState range = ranges.get(myIndex[index])-->Line_8 $$ LineRange lineRange = range.getLineRange()[ FD ]
Line_2 $$ private Boolean getCachedExpanded(int start, int end, int index) -->Line_6 $$ for (; myIndex[index] < ranges.size(); myIndex[index]++) [ CD ]
Line_6 $$ for (; myIndex[index] < ranges.size(); myIndex[index]++) -->Line_9 $$ if (lineRange.end <= start)[ CD ]
Line_2 $$ private Boolean getCachedExpanded(int start, int end, int index) -->Line_3 $$ if (start == end)[ FD ]
Line_2 $$ private Boolean getCachedExpanded(int start, int end, int index) -->Line_12 $$ if (range.collapsed != null && range.collapsed.contains(start, end))[ FD ]
Line_14 $$ if (range.expanded != null && range.expanded.contains(start, end))-->Line_15 $$ return true[ CD ]
Line_6 $$ for (; myIndex[index] < ranges.size(); myIndex[index]++) -->Line_7 $$ FoldedRangeState range = ranges.get(myIndex[index])[ CD ]
Line_6 $$ for (; myIndex[index] < ranges.size(); myIndex[index]++) -->Line_18 $$ if (lineRange.start >= start)[ CD ]
Line_6 $$ for (; myIndex[index] < ranges.size(); myIndex[index]++) -->Line_11 $$ if (lineRange.contains(start, end)) [ CD ]
