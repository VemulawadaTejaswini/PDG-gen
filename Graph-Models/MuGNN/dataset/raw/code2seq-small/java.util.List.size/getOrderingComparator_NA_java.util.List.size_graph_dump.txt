Line_2 $$ private Comparator<List<ByteBuffer>> getOrderingComparator(CFMetaData cfm, Selection selection, StatementRestrictions restrictions) throws InvalidRequestException -->Line_5 $$ Map<ColumnIdentifier, Integer> orderingIndexes = getOrderingIndex(cfm, selection)[ CD ]
Line_2 $$ private Comparator<List<ByteBuffer>> getOrderingComparator(CFMetaData cfm, Selection selection, StatementRestrictions restrictions) throws InvalidRequestException -->Line_3 $$ if (!restrictions.keyIsInRelation())[ FD ]
Line_8 $$ for (ColumnIdentifier.Raw raw : parameters.orderings.keySet()) -->Line_9 $$ ColumnIdentifier identifier = raw.prepare(cfm)[ FD ]
Line_2 $$ private Comparator<List<ByteBuffer>> getOrderingComparator(CFMetaData cfm, Selection selection, StatementRestrictions restrictions) throws InvalidRequestException -->Line_5 $$ Map<ColumnIdentifier, Integer> orderingIndexes = getOrderingIndex(cfm, selection)[ FD ]
Line_9 $$ ColumnIdentifier identifier = raw.prepare(cfm)-->Line_10 $$ ColumnDefinition orderingColumn = cfm.getColumnDefinition(identifier)[ FD ]
Line_2 $$ private Comparator<List<ByteBuffer>> getOrderingComparator(CFMetaData cfm, Selection selection, StatementRestrictions restrictions) throws InvalidRequestException -->Line_3 $$ if (!restrictions.keyIsInRelation())[ CD ]
Line_2 $$ private Comparator<List<ByteBuffer>> getOrderingComparator(CFMetaData cfm, Selection selection, StatementRestrictions restrictions) throws InvalidRequestException -->Line_9 $$ ColumnIdentifier identifier = raw.prepare(cfm)[ FD ]
Line_6 $$ List<Integer> idToSort = new ArrayList<Integer>()-->Line_11 $$ idToSort.add(orderingIndexes.get(orderingColumn.name))[ FD ]
Line_7 $$ List<Comparator<ByteBuffer>> sorters = new ArrayList<Comparator<ByteBuffer>>()-->Line_12 $$ sorters.add(orderingColumn.type)[ FD ]
Line_6 $$ List<Integer> idToSort = new ArrayList<Integer>()-->Line_14 $$ return idToSort.size() == 1 ? new SingleColumnComparator(idToSort.get(0), sorters.get(0)) : new CompositeComparator(sorters, idToSort)[ FD ]
Line_2 $$ private Comparator<List<ByteBuffer>> getOrderingComparator(CFMetaData cfm, Selection selection, StatementRestrictions restrictions) throws InvalidRequestException -->Line_10 $$ ColumnDefinition orderingColumn = cfm.getColumnDefinition(identifier)[ FD ]
Line_2 $$ private Comparator<List<ByteBuffer>> getOrderingComparator(CFMetaData cfm, Selection selection, StatementRestrictions restrictions) throws InvalidRequestException -->Line_7 $$ List<Comparator<ByteBuffer>> sorters = new ArrayList<Comparator<ByteBuffer>>()[ CD ]
Line_2 $$ private Comparator<List<ByteBuffer>> getOrderingComparator(CFMetaData cfm, Selection selection, StatementRestrictions restrictions) throws InvalidRequestException -->Line_6 $$ List<Integer> idToSort = new ArrayList<Integer>()[ CD ]
Line_2 $$ private Comparator<List<ByteBuffer>> getOrderingComparator(CFMetaData cfm, Selection selection, StatementRestrictions restrictions) throws InvalidRequestException -->Line_14 $$ return idToSort.size() == 1 ? new SingleColumnComparator(idToSort.get(0), sorters.get(0)) : new CompositeComparator(sorters, idToSort)[ CD ]
Line_3 $$ if (!restrictions.keyIsInRelation())-->Line_4 $$ return null[ CD ]
Line_5 $$ Map<ColumnIdentifier, Integer> orderingIndexes = getOrderingIndex(cfm, selection)-->Line_11 $$ idToSort.add(orderingIndexes.get(orderingColumn.name))[ FD ]
Line_7 $$ List<Comparator<ByteBuffer>> sorters = new ArrayList<Comparator<ByteBuffer>>()-->Line_14 $$ return idToSort.size() == 1 ? new SingleColumnComparator(idToSort.get(0), sorters.get(0)) : new CompositeComparator(sorters, idToSort)[ FD ]
