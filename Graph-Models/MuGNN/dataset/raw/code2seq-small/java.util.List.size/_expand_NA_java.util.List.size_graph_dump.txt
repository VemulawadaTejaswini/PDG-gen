Line_2 $$ private void _expand(final Object element, @NotNull final Runnable onDone, final boolean parentsOnly, boolean checkIfInStructure, boolean canSmartExpand) -->Line_37 $$ runDone(onDone)[ FD ]
Line_16 $$ firstVisible = (DefaultMutableTreeNode) getTree().getPathForRow(preselected).getLastPathComponent()-->Line_23 $$ if (firstVisible != null)[ FD ]
Line_30 $$ int i = kidsToExpand.indexOf(eachElement)-->Line_33 $$ Object existing = kidsToExpand.get(i)[ FD ]
Line_11 $$ while (true) -->Line_20 $$ if (eachElement != element || !parentsOnly) [ CD ]
Line_30 $$ int i = kidsToExpand.indexOf(eachElement)-->Line_31 $$ if (i != -1) [ FD ]
Line_16 $$ firstVisible = (DefaultMutableTreeNode) getTree().getPathForRow(preselected).getLastPathComponent()-->Line_41 $$ if (firstVisible == null) [ FD ]
Line_9 $$ Object eachElement = element-->Line_21 $$ kidsToExpand.add(eachElement)[ FD ]
Line_16 $$ firstVisible = (DefaultMutableTreeNode) getTree().getPathForRow(preselected).getLastPathComponent()-->Line_53 $$ processExpand(firstVisible, kidsToExpand, kidsToExpand.size() - 1, onDone, canSmartExpand)[ FD ]
Line_25 $$ eachElement = getTreeStructure().getParentElement(eachElement)-->Line_30 $$ int i = kidsToExpand.indexOf(eachElement)[ FD ]
Line_7 $$ if (wasRootNodeInitialized()) -->Line_8 $$ List<Object> kidsToExpand = new ArrayList<Object>()[ CD ]
Line_47 $$ if (!myTree.isExpanded(parentPath)) -->Line_48 $$ expand(parentPath, canSmartExpand)[ CD ]
Line_31 $$ if (i != -1) -->Line_37 $$ runDone(onDone)[ CD ]
Line_7 $$ if (wasRootNodeInitialized()) -->Line_9 $$ Object eachElement = element[ CD ]
Line_10 $$ DefaultMutableTreeNode firstVisible = null-->Line_41 $$ if (firstVisible == null) [ FD ]
Line_15 $$ if (preselected >= 0) -->Line_16 $$ firstVisible = (DefaultMutableTreeNode) getTree().getPathForRow(preselected).getLastPathComponent()[ CD ]
Line_18 $$ firstVisible = getNodeForElement(eachElement, true)-->Line_41 $$ if (firstVisible == null) [ FD ]
Line_7 $$ if (wasRootNodeInitialized()) -->Line_10 $$ DefaultMutableTreeNode firstVisible = null[ CD ]
Line_10 $$ DefaultMutableTreeNode firstVisible = null-->Line_23 $$ if (firstVisible != null)[ FD ]
Line_44 $$ final DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) firstVisible.getParent()-->Line_46 $$ final TreePath parentPath = new TreePath(parentNode.getPath())[ FD ]
Line_8 $$ List<Object> kidsToExpand = new ArrayList<Object>()-->Line_21 $$ kidsToExpand.add(eachElement)[ FD ]
Line_11 $$ while (true) -->Line_12 $$ if (eachElement == null || !isValid(eachElement))[ CD ]
Line_43 $$ if (kidsToExpand.isEmpty()) -->Line_53 $$ processExpand(firstVisible, kidsToExpand, kidsToExpand.size() - 1, onDone, canSmartExpand)[ CD ]
Line_16 $$ firstVisible = (DefaultMutableTreeNode) getTree().getPathForRow(preselected).getLastPathComponent()-->Line_27 $$ firstVisible = null[ FD ]
Line_14 $$ final int preselected = getRowIfUnderSelection(eachElement)-->Line_15 $$ if (preselected >= 0) [ FD ]
Line_2 $$ private void _expand(final Object element, @NotNull final Runnable onDone, final boolean parentsOnly, boolean checkIfInStructure, boolean canSmartExpand) -->Line_3 $$ if (checkIfInStructure && !isInStructure(element)) [ CD ]
Line_14 $$ final int preselected = getRowIfUnderSelection(eachElement)-->Line_16 $$ firstVisible = (DefaultMutableTreeNode) getTree().getPathForRow(preselected).getLastPathComponent()[ FD ]
Line_45 $$ if (parentNode != null) -->Line_46 $$ final TreePath parentPath = new TreePath(parentNode.getPath())[ CD ]
Line_10 $$ DefaultMutableTreeNode firstVisible = null-->Line_27 $$ firstVisible = null[ FD ]
Line_18 $$ firstVisible = getNodeForElement(eachElement, true)-->Line_53 $$ processExpand(firstVisible, kidsToExpand, kidsToExpand.size() - 1, onDone, canSmartExpand)[ FD ]
Line_11 $$ while (true) -->Line_25 $$ eachElement = getTreeStructure().getParentElement(eachElement)[ CD ]
Line_2 $$ private void _expand(final Object element, @NotNull final Runnable onDone, final boolean parentsOnly, boolean checkIfInStructure, boolean canSmartExpand) -->Line_4 $$ runDone(onDone)[ FD ]
Line_44 $$ final DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) firstVisible.getParent()-->Line_45 $$ if (parentNode != null) [ FD ]
Line_25 $$ eachElement = getTreeStructure().getParentElement(eachElement)-->Line_26 $$ if (eachElement == null) [ FD ]
Line_7 $$ if (wasRootNodeInitialized()) -->Line_41 $$ if (firstVisible == null) [ CD ]
Line_46 $$ final TreePath parentPath = new TreePath(parentNode.getPath())-->Line_48 $$ expand(parentPath, canSmartExpand)[ FD ]
Line_2 $$ private void _expand(final Object element, @NotNull final Runnable onDone, final boolean parentsOnly, boolean checkIfInStructure, boolean canSmartExpand) -->Line_53 $$ processExpand(firstVisible, kidsToExpand, kidsToExpand.size() - 1, onDone, canSmartExpand)[ FD ]
Line_9 $$ Object eachElement = element-->Line_30 $$ int i = kidsToExpand.indexOf(eachElement)[ FD ]
Line_16 $$ firstVisible = (DefaultMutableTreeNode) getTree().getPathForRow(preselected).getLastPathComponent()-->Line_18 $$ firstVisible = getNodeForElement(eachElement, true)[ FD ]
Line_25 $$ eachElement = getTreeStructure().getParentElement(eachElement)-->Line_12 $$ if (eachElement == null || !isValid(eachElement))[ FD ]
Line_11 $$ while (true) -->Line_30 $$ int i = kidsToExpand.indexOf(eachElement)[ CD ]
Line_2 $$ private void _expand(final Object element, @NotNull final Runnable onDone, final boolean parentsOnly, boolean checkIfInStructure, boolean canSmartExpand) -->Line_20 $$ if (eachElement != element || !parentsOnly) [ FD ]
Line_8 $$ List<Object> kidsToExpand = new ArrayList<Object>()-->Line_30 $$ int i = kidsToExpand.indexOf(eachElement)[ FD ]
Line_10 $$ DefaultMutableTreeNode firstVisible = null-->Line_16 $$ firstVisible = (DefaultMutableTreeNode) getTree().getPathForRow(preselected).getLastPathComponent()[ FD ]
Line_2 $$ private void _expand(final Object element, @NotNull final Runnable onDone, final boolean parentsOnly, boolean checkIfInStructure, boolean canSmartExpand) -->Line_51 $$ runDone(onDone)[ FD ]
Line_9 $$ Object eachElement = element-->Line_18 $$ firstVisible = getNodeForElement(eachElement, true)[ FD ]
Line_27 $$ firstVisible = null-->Line_23 $$ if (firstVisible != null)[ FD ]
Line_45 $$ if (parentNode != null) -->Line_47 $$ if (!myTree.isExpanded(parentPath)) [ CD ]
Line_2 $$ private void _expand(final Object element, @NotNull final Runnable onDone, final boolean parentsOnly, boolean checkIfInStructure, boolean canSmartExpand) -->Line_56 $$ deferExpansion(element, onDone, parentsOnly, canSmartExpand)[ FD ]
Line_43 $$ if (kidsToExpand.isEmpty()) -->Line_44 $$ final DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) firstVisible.getParent()[ CD ]
Line_10 $$ DefaultMutableTreeNode firstVisible = null-->Line_53 $$ processExpand(firstVisible, kidsToExpand, kidsToExpand.size() - 1, onDone, canSmartExpand)[ FD ]
Line_7 $$ if (wasRootNodeInitialized()) -->Line_56 $$ deferExpansion(element, onDone, parentsOnly, canSmartExpand)[ CD ]
Line_27 $$ firstVisible = null-->Line_44 $$ final DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) firstVisible.getParent()[ FD ]
Line_2 $$ private void _expand(final Object element, @NotNull final Runnable onDone, final boolean parentsOnly, boolean checkIfInStructure, boolean canSmartExpand) -->Line_3 $$ if (checkIfInStructure && !isInStructure(element)) [ FD ]
Line_10 $$ DefaultMutableTreeNode firstVisible = null-->Line_18 $$ firstVisible = getNodeForElement(eachElement, true)[ FD ]
Line_3 $$ if (checkIfInStructure && !isInStructure(element)) -->Line_4 $$ runDone(onDone)[ CD ]
Line_25 $$ eachElement = getTreeStructure().getParentElement(eachElement)-->Line_34 $$ LOG.error("Tree path contains equal elements at different levels:\n" + " element: '" + eachElement + "'; " + eachElement.getClass() + " (" + System.identityHashCode(eachElement) + ");\n" + "existing: '" + existing + "'; " + existing.getClass() + " (" + System.identityHashCode(existing) + "); " + "path='" + kidsToExpand + "'; tree structure=" + myTreeStructure)[ FD ]
Line_20 $$ if (eachElement != element || !parentsOnly) -->Line_21 $$ kidsToExpand.add(eachElement)[ CD ]
Line_8 $$ List<Object> kidsToExpand = new ArrayList<Object>()-->Line_33 $$ Object existing = kidsToExpand.get(i)[ FD ]
Line_25 $$ eachElement = getTreeStructure().getParentElement(eachElement)-->Line_18 $$ firstVisible = getNodeForElement(eachElement, true)[ FD ]
Line_46 $$ final TreePath parentPath = new TreePath(parentNode.getPath())-->Line_47 $$ if (!myTree.isExpanded(parentPath)) [ FD ]
Line_2 $$ private void _expand(final Object element, @NotNull final Runnable onDone, final boolean parentsOnly, boolean checkIfInStructure, boolean canSmartExpand) -->Line_42 $$ runDone(onDone)[ FD ]
Line_18 $$ firstVisible = getNodeForElement(eachElement, true)-->Line_27 $$ firstVisible = null[ FD ]
Line_9 $$ Object eachElement = element-->Line_14 $$ final int preselected = getRowIfUnderSelection(eachElement)[ FD ]
Line_9 $$ Object eachElement = element-->Line_12 $$ if (eachElement == null || !isValid(eachElement))[ FD ]
Line_41 $$ if (firstVisible == null) -->Line_43 $$ if (kidsToExpand.isEmpty()) [ CD ]
Line_25 $$ eachElement = getTreeStructure().getParentElement(eachElement)-->Line_14 $$ final int preselected = getRowIfUnderSelection(eachElement)[ FD ]
Line_2 $$ private void _expand(final Object element, @NotNull final Runnable onDone, final boolean parentsOnly, boolean checkIfInStructure, boolean canSmartExpand) -->Line_7 $$ if (wasRootNodeInitialized()) [ CD ]
Line_11 $$ while (true) -->Line_31 $$ if (i != -1) [ CD ]
Line_9 $$ Object eachElement = element-->Line_26 $$ if (eachElement == null) [ FD ]
Line_9 $$ Object eachElement = element-->Line_25 $$ eachElement = getTreeStructure().getParentElement(eachElement)[ FD ]
Line_7 $$ if (wasRootNodeInitialized()) -->Line_11 $$ while (true) [ CD ]
Line_11 $$ while (true) -->Line_15 $$ if (preselected >= 0) [ CD ]
Line_11 $$ while (true) -->Line_23 $$ if (firstVisible != null)[ CD ]
Line_18 $$ firstVisible = getNodeForElement(eachElement, true)-->Line_44 $$ final DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) firstVisible.getParent()[ FD ]
Line_10 $$ DefaultMutableTreeNode firstVisible = null-->Line_44 $$ final DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) firstVisible.getParent()[ FD ]
Line_41 $$ if (firstVisible == null) -->Line_42 $$ runDone(onDone)[ CD ]
Line_43 $$ if (kidsToExpand.isEmpty()) -->Line_51 $$ runDone(onDone)[ CD ]
Line_16 $$ firstVisible = (DefaultMutableTreeNode) getTree().getPathForRow(preselected).getLastPathComponent()-->Line_44 $$ final DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) firstVisible.getParent()[ FD ]
Line_25 $$ eachElement = getTreeStructure().getParentElement(eachElement)-->Line_21 $$ kidsToExpand.add(eachElement)[ FD ]
Line_43 $$ if (kidsToExpand.isEmpty()) -->Line_45 $$ if (parentNode != null) [ CD ]
Line_26 $$ if (eachElement == null) -->Line_27 $$ firstVisible = null[ CD ]
Line_11 $$ while (true) -->Line_14 $$ final int preselected = getRowIfUnderSelection(eachElement)[ CD ]
Line_8 $$ List<Object> kidsToExpand = new ArrayList<Object>()-->Line_43 $$ if (kidsToExpand.isEmpty()) [ FD ]
Line_27 $$ firstVisible = null-->Line_53 $$ processExpand(firstVisible, kidsToExpand, kidsToExpand.size() - 1, onDone, canSmartExpand)[ FD ]
Line_8 $$ List<Object> kidsToExpand = new ArrayList<Object>()-->Line_53 $$ processExpand(firstVisible, kidsToExpand, kidsToExpand.size() - 1, onDone, canSmartExpand)[ FD ]
Line_15 $$ if (preselected >= 0) -->Line_18 $$ firstVisible = getNodeForElement(eachElement, true)[ CD ]
Line_3 $$ if (checkIfInStructure && !isInStructure(element)) -->Line_5 $$ return[ CD ]
Line_18 $$ firstVisible = getNodeForElement(eachElement, true)-->Line_23 $$ if (firstVisible != null)[ FD ]
Line_11 $$ while (true) -->Line_26 $$ if (eachElement == null) [ CD ]
Line_27 $$ firstVisible = null-->Line_41 $$ if (firstVisible == null) [ FD ]
Line_9 $$ Object eachElement = element-->Line_34 $$ LOG.error("Tree path contains equal elements at different levels:\n" + " element: '" + eachElement + "'; " + eachElement.getClass() + " (" + System.identityHashCode(eachElement) + ");\n" + "existing: '" + existing + "'; " + existing.getClass() + " (" + System.identityHashCode(existing) + "); " + "path='" + kidsToExpand + "'; tree structure=" + myTreeStructure)[ FD ]
Line_2 $$ private void _expand(final Object element, @NotNull final Runnable onDone, final boolean parentsOnly, boolean checkIfInStructure, boolean canSmartExpand) -->Line_48 $$ expand(parentPath, canSmartExpand)[ FD ]
Line_33 $$ Object existing = kidsToExpand.get(i)-->Line_34 $$ LOG.error("Tree path contains equal elements at different levels:\n" + " element: '" + eachElement + "'; " + eachElement.getClass() + " (" + System.identityHashCode(eachElement) + ");\n" + "existing: '" + existing + "'; " + existing.getClass() + " (" + System.identityHashCode(existing) + "); " + "path='" + kidsToExpand + "'; tree structure=" + myTreeStructure)[ FD ]
