Line_2 $$ public void withElementFormatter() throws Exception -->Line_4 $$ BeanPropertyBindingResult errors = new BeanPropertyBindingResult(this.bean, COMMAND_NAME)[ CD ]
Line_2 $$ public void withElementFormatter() throws Exception -->Line_27 $$ Element selectElement = rootElement.element("select")[ CD ]
Line_2 $$ public void withElementFormatter() throws Exception -->Line_5 $$ FormattingConversionService cs = new FormattingConversionService()[ CD ]
Line_4 $$ BeanPropertyBindingResult errors = new BeanPropertyBindingResult(this.bean, COMMAND_NAME)-->Line_14 $$ errors.initConversion(cs)[ FD ]
Line_6 $$ cs.addFormatterForFieldType(Country.class, new Formatter<Country>() -->Line_11 $$ return new Country(text, text)[ CD ]
Line_2 $$ public void withElementFormatter() throws Exception -->Line_20 $$ assertEquals(Tag.SKIP_BODY, result)[ CD ]
Line_2 $$ public void withElementFormatter() throws Exception -->Line_31 $$ assertEquals("Incorrect number of children", 4, children.size())[ CD ]
Line_2 $$ public void withElementFormatter() throws Exception -->Line_3 $$ this.bean.setRealCountry(Country.COUNTRY_UK)[ CD ]
Line_2 $$ public void withElementFormatter() throws Exception -->Line_15 $$ exposeBindingResult(errors)[ CD ]
Line_2 $$ public void withElementFormatter() throws Exception -->Line_34 $$ assertEquals("United Kingdom", e.getText())[ CD ]
Line_2 $$ public void withElementFormatter() throws Exception -->Line_19 $$ int result = this.tag.doStartTag()[ CD ]
Line_2 $$ public void withElementFormatter() throws Exception -->Line_21 $$ String output = getOutput()[ CD ]
Line_5 $$ FormattingConversionService cs = new FormattingConversionService()-->Line_6 $$ cs.addFormatterForFieldType(Country.class, new Formatter<Country>() [ FD ]
Line_2 $$ public void withElementFormatter() throws Exception -->Line_26 $$ assertEquals(1, rootElement.elements().size())[ CD ]
Line_2 $$ public void withElementFormatter() throws Exception -->Line_6 $$ cs.addFormatterForFieldType(Country.class, new Formatter<Country>() [ CD ]
Line_2 $$ public void withElementFormatter() throws Exception -->Line_33 $$ assertEquals("UK node not selected", "selected", e.attribute("selected").getValue())[ CD ]
Line_2 $$ public void withElementFormatter() throws Exception -->Line_30 $$ List children = selectElement.elements()[ CD ]
Line_2 $$ public void withElementFormatter() throws Exception -->Line_14 $$ errors.initConversion(cs)[ CD ]
Line_5 $$ FormattingConversionService cs = new FormattingConversionService()-->Line_14 $$ errors.initConversion(cs)[ FD ]
Line_2 $$ public void withElementFormatter() throws Exception -->Line_28 $$ assertEquals("select", selectElement.getName())[ CD ]
Line_6 $$ cs.addFormatterForFieldType(Country.class, new Formatter<Country>() -->Line_8 $$ return object.getName()[ FD ]
Line_2 $$ public void withElementFormatter() throws Exception -->Line_16 $$ this.tag.setPath("realCountry")[ CD ]
Line_4 $$ BeanPropertyBindingResult errors = new BeanPropertyBindingResult(this.bean, COMMAND_NAME)-->Line_15 $$ exposeBindingResult(errors)[ FD ]
Line_2 $$ public void withElementFormatter() throws Exception -->Line_24 $$ Document document = reader.read(new StringReader(output))[ CD ]
Line_6 $$ cs.addFormatterForFieldType(Country.class, new Formatter<Country>() -->Line_8 $$ return object.getName()[ CD ]
Line_2 $$ public void withElementFormatter() throws Exception -->Line_17 $$ this.tag.setItems(Country.getCountries())[ CD ]
Line_2 $$ public void withElementFormatter() throws Exception -->Line_18 $$ this.tag.setItemValue("isoCode")[ CD ]
Line_2 $$ public void withElementFormatter() throws Exception -->Line_29 $$ assertEquals("realCountry", selectElement.attribute("name").getValue())[ CD ]
Line_2 $$ public void withElementFormatter() throws Exception -->Line_25 $$ Element rootElement = document.getRootElement()[ CD ]
