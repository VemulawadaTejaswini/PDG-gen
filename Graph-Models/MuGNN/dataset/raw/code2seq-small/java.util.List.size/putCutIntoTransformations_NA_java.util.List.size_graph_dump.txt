Line_14 $$ endSize = cnt + 1-->Line_45 $$ final MyAppliedData newData = new MyAppliedData(new ArrayList<String>(list.subList(cntStart, endSize)), value.isHaveAlreadyApplied(), value.isPlaceCoinside(), value.isChangedCoinside(), value.myChangeType)[ FD ]
Line_41 $$ final TextRange newRange = new TextRange(i, i)-->Line_42 $$ myTransformations.put(newRange, newData)[ FD ]
Line_12 $$ int endSize = list.size()-->Line_14 $$ endSize = cnt + 1[ FD ]
Line_26 $$ if (cntStart >= endSize) -->Line_47 $$ myTransformations.put(newRange, newData)[ CD ]
Line_13 $$ if (cnt + 1 <= list.size() - 1) -->Line_14 $$ endSize = cnt + 1[ CD ]
Line_17 $$ int j = range.getStartOffset()-->Line_19 $$ for (; j < range.getEndOffset() && cntStart < list.size(); j++, cntStart++) [ FD ]
Line_16 $$ int cntStart = 0-->Line_20 $$ if (!list.get(cntStart).equals(myLines.get(j))) [ FD ]
Line_2 $$ public void putCutIntoTransformations(TextRange range, final MyAppliedData value) -->Line_7 $$ for (; i > range.getStartOffset() && cnt >= 0; i--, cnt--) [ FD ]
Line_2 $$ public void putCutIntoTransformations(TextRange range, final MyAppliedData value) -->Line_13 $$ if (cnt + 1 <= list.size() - 1) [ CD ]
Line_36 $$ if (i < j) -->Line_42 $$ myTransformations.put(newRange, newData)[ CD ]
Line_2 $$ public void putCutIntoTransformations(TextRange range, final MyAppliedData value) -->Line_19 $$ for (; j < range.getEndOffset() && cntStart < list.size(); j++, cntStart++) [ FD ]
Line_2 $$ public void putCutIntoTransformations(TextRange range, final MyAppliedData value) -->Line_17 $$ int j = range.getStartOffset()[ FD ]
Line_2 $$ public void putCutIntoTransformations(TextRange range, final MyAppliedData value) -->Line_25 $$ if (j != range.getStartOffset() || i != range.getEndOffset()) [ FD ]
Line_7 $$ for (; i > range.getStartOffset() && cnt >= 0; i--, cnt--) -->Line_8 $$ if (!list.get(cnt).equals(myLines.get(i))) [ CD ]
Line_6 $$ int i = range.getEndOffset()-->Line_8 $$ if (!list.get(cnt).equals(myLines.get(i))) [ FD ]
Line_2 $$ public void putCutIntoTransformations(TextRange range, final MyAppliedData value) -->Line_5 $$ int cnt = list.size() - 1[ CD ]
Line_5 $$ int cnt = list.size() - 1-->Line_7 $$ for (; i > range.getStartOffset() && cnt >= 0; i--, cnt--) [ FD ]
Line_2 $$ public void putCutIntoTransformations(TextRange range, final MyAppliedData value) -->Line_6 $$ int i = range.getEndOffset()[ FD ]
Line_2 $$ public void putCutIntoTransformations(TextRange range, final MyAppliedData value) -->Line_17 $$ int j = range.getStartOffset()[ CD ]
Line_12 $$ int endSize = list.size()-->Line_40 $$ final MyAppliedData newData = new MyAppliedData(new ArrayList<String>(list.subList(cntStart - (j - i), endSize)), value.isHaveAlreadyApplied(), value.isPlaceCoinside(), value.isChangedCoinside(), value.myChangeType)[ FD ]
Line_2 $$ public void putCutIntoTransformations(TextRange range, final MyAppliedData value) -->Line_6 $$ int i = range.getEndOffset()[ CD ]
Line_12 $$ int endSize = list.size()-->Line_45 $$ final MyAppliedData newData = new MyAppliedData(new ArrayList<String>(list.subList(cntStart, endSize)), value.isHaveAlreadyApplied(), value.isPlaceCoinside(), value.isChangedCoinside(), value.myChangeType)[ FD ]
Line_40 $$ final MyAppliedData newData = new MyAppliedData(new ArrayList<String>(list.subList(cntStart - (j - i), endSize)), value.isHaveAlreadyApplied(), value.isPlaceCoinside(), value.isChangedCoinside(), value.myChangeType)-->Line_47 $$ myTransformations.put(newRange, newData)[ FD ]
Line_2 $$ public void putCutIntoTransformations(TextRange range, final MyAppliedData value) -->Line_18 $$ if (endSize > 0) [ CD ]
Line_17 $$ int j = range.getStartOffset()-->Line_36 $$ if (i < j) [ FD ]
Line_25 $$ if (j != range.getStartOffset() || i != range.getEndOffset()) -->Line_50 $$ myTransformations.put(range, value)[ CD ]
Line_16 $$ int cntStart = 0-->Line_19 $$ for (; j < range.getEndOffset() && cntStart < list.size(); j++, cntStart++) [ FD ]
Line_14 $$ endSize = cnt + 1-->Line_40 $$ final MyAppliedData newData = new MyAppliedData(new ArrayList<String>(list.subList(cntStart - (j - i), endSize)), value.isHaveAlreadyApplied(), value.isPlaceCoinside(), value.isChangedCoinside(), value.myChangeType)[ FD ]
Line_2 $$ public void putCutIntoTransformations(TextRange range, final MyAppliedData value) -->Line_12 $$ int endSize = list.size()[ CD ]
Line_25 $$ if (j != range.getStartOffset() || i != range.getEndOffset()) -->Line_26 $$ if (cntStart >= endSize) [ CD ]
Line_6 $$ int i = range.getEndOffset()-->Line_7 $$ for (; i > range.getStartOffset() && cnt >= 0; i--, cnt--) [ FD ]
Line_36 $$ if (i < j) -->Line_41 $$ final TextRange newRange = new TextRange(i, i)[ CD ]
Line_41 $$ final TextRange newRange = new TextRange(i, i)-->Line_47 $$ myTransformations.put(newRange, newData)[ FD ]
Line_14 $$ endSize = cnt + 1-->Line_18 $$ if (endSize > 0) [ FD ]
Line_16 $$ int cntStart = 0-->Line_26 $$ if (cntStart >= endSize) [ FD ]
Line_2 $$ public void putCutIntoTransformations(TextRange range, final MyAppliedData value) -->Line_16 $$ int cntStart = 0[ CD ]
Line_18 $$ if (endSize > 0) -->Line_19 $$ for (; j < range.getEndOffset() && cntStart < list.size(); j++, cntStart++) [ CD ]
Line_36 $$ if (i < j) -->Line_40 $$ final MyAppliedData newData = new MyAppliedData(new ArrayList<String>(list.subList(cntStart - (j - i), endSize)), value.isHaveAlreadyApplied(), value.isPlaceCoinside(), value.isChangedCoinside(), value.myChangeType)[ CD ]
Line_2 $$ public void putCutIntoTransformations(TextRange range, final MyAppliedData value) -->Line_45 $$ final MyAppliedData newData = new MyAppliedData(new ArrayList<String>(list.subList(cntStart, endSize)), value.isHaveAlreadyApplied(), value.isPlaceCoinside(), value.isChangedCoinside(), value.myChangeType)[ FD ]
Line_12 $$ int endSize = list.size()-->Line_18 $$ if (endSize > 0) [ FD ]
Line_17 $$ int j = range.getStartOffset()-->Line_20 $$ if (!list.get(cntStart).equals(myLines.get(j))) [ FD ]
Line_6 $$ int i = range.getEndOffset()-->Line_36 $$ if (i < j) [ FD ]
Line_36 $$ if (i < j) -->Line_43 $$ return[ CD ]
Line_12 $$ int endSize = list.size()-->Line_26 $$ if (cntStart >= endSize) [ FD ]
Line_2 $$ public void putCutIntoTransformations(TextRange range, final MyAppliedData value) -->Line_7 $$ for (; i > range.getStartOffset() && cnt >= 0; i--, cnt--) [ CD ]
Line_5 $$ int cnt = list.size() - 1-->Line_14 $$ endSize = cnt + 1[ FD ]
Line_14 $$ endSize = cnt + 1-->Line_26 $$ if (cntStart >= endSize) [ FD ]
Line_16 $$ int cntStart = 0-->Line_45 $$ final MyAppliedData newData = new MyAppliedData(new ArrayList<String>(list.subList(cntStart, endSize)), value.isHaveAlreadyApplied(), value.isPlaceCoinside(), value.isChangedCoinside(), value.myChangeType)[ FD ]
Line_5 $$ int cnt = list.size() - 1-->Line_8 $$ if (!list.get(cnt).equals(myLines.get(i))) [ FD ]
Line_26 $$ if (cntStart >= endSize) -->Line_36 $$ if (i < j) [ CD ]
Line_40 $$ final MyAppliedData newData = new MyAppliedData(new ArrayList<String>(list.subList(cntStart - (j - i), endSize)), value.isHaveAlreadyApplied(), value.isPlaceCoinside(), value.isChangedCoinside(), value.myChangeType)-->Line_42 $$ myTransformations.put(newRange, newData)[ FD ]
Line_2 $$ public void putCutIntoTransformations(TextRange range, final MyAppliedData value) -->Line_40 $$ final MyAppliedData newData = new MyAppliedData(new ArrayList<String>(list.subList(cntStart - (j - i), endSize)), value.isHaveAlreadyApplied(), value.isPlaceCoinside(), value.isChangedCoinside(), value.myChangeType)[ FD ]
Line_2 $$ public void putCutIntoTransformations(TextRange range, final MyAppliedData value) -->Line_50 $$ myTransformations.put(range, value)[ FD ]
Line_2 $$ public void putCutIntoTransformations(TextRange range, final MyAppliedData value) -->Line_25 $$ if (j != range.getStartOffset() || i != range.getEndOffset()) [ CD ]
Line_19 $$ for (; j < range.getEndOffset() && cntStart < list.size(); j++, cntStart++) -->Line_20 $$ if (!list.get(cntStart).equals(myLines.get(j))) [ CD ]
