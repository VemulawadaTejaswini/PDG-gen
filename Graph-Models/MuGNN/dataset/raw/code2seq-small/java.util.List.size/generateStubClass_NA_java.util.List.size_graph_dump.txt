Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_8 $$ if (clazz.isInterface()) [ CD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_18 $$ ASMUtil.removeMethodNodes(methodNodes, _annotationDescriptors)[ CD ]
Line_3 $$ String internalName = Type.getInternalName(clazz)-->Line_4 $$ ClassNode classNode = ASMUtil.loadAndRename(clazz, internalName.concat(STUB_POSTFIX))[ FD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_63 $$ rewriteGetProxyMethodSignaturesMethodNode(classNode, methodsBag.proxyMethodSignatures)[ CD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_21 $$ List<FieldNode> templateFieldNodes = templateClassNode.fields[ CD ]
Line_44 $$ MethodNodeGenerator methodNodeGenerator = new MethodNodeGenerator(idMethod)-->Line_61 $$ methodNodes.add(methodNodeGenerator.getMethodNode())[ FD ]
Line_40 $$ Type stubType = Type.getType(classNode.name)-->Line_46 $$ methodNodeGenerator.getField(stubType, "_id", _STRING_TYPE)[ FD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_17 $$ ASMUtil.removeMethodNodes(methodNodes, Opcodes.ACC_ABSTRACT)[ CD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_16 $$ ASMUtil.removeMethodNodes(methodNodes, "<init>")[ CD ]
Line_34 $$ MethodNode defaultClinitMethodNode = ASMUtil.removeMethodNode(methodNodes, "<clinit>", Type.VOID_TYPE)-->Line_35 $$ if (defaultClinitMethodNode != null) [ FD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_31 $$ if (defaultInitMethodNode != null) [ CD ]
Line_21 $$ List<FieldNode> templateFieldNodes = templateClassNode.fields-->Line_26 $$ FieldNode registrationReferenceFieldNode = ASMUtil.findFieldNode(templateFieldNodes, "_registrationReference")[ FD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_30 $$ MethodNode templateInitMethodNode = ASMUtil.findMethodNode(templateMethodNodes, "<init>", Type.VOID_TYPE, _STRING_TYPE, _REGISTRATION_REFERENCE_TYPE, _EXCEPTION_HANDLER_TYPE)[ CD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_3 $$ String internalName = Type.getInternalName(clazz)[ CD ]
Line_21 $$ List<FieldNode> templateFieldNodes = templateClassNode.fields-->Line_22 $$ FieldNode idFieldNode = ASMUtil.findFieldNode(templateFieldNodes, "_id")[ FD ]
Line_35 $$ if (defaultClinitMethodNode != null) -->Line_36 $$ MethodNode templateClinitMethodNode = ASMUtil.findMethodNode(templateMethodNodes, "<clinit>", Type.VOID_TYPE)[ CD ]
Line_36 $$ MethodNode templateClinitMethodNode = ASMUtil.findMethodNode(templateMethodNodes, "<clinit>", Type.VOID_TYPE)-->Line_37 $$ ASMUtil.mergeMethods(templateClinitMethodNode, defaultClinitMethodNode, templateClinitMethodNode)[ FD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_27 $$ registrationReferenceFieldNode.access |= Opcodes.ACC_FINAL[ CD ]
Line_29 $$ List<MethodNode> templateMethodNodes = templateClassNode.methods-->Line_39 $$ methodNodes.addAll(templateMethodNodes)[ FD ]
Line_15 $$ MethodNode defaultInitMethodNode = ASMUtil.removeMethodNode(methodNodes, "<init>", Type.VOID_TYPE)-->Line_31 $$ if (defaultInitMethodNode != null) [ FD ]
Line_44 $$ MethodNodeGenerator methodNodeGenerator = new MethodNodeGenerator(idMethod)-->Line_59 $$ ASMUtil.addDefaultReturnInsns(methodNodeGenerator, Type.getType(emptyMethod.getReturnType()))[ FD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_7 $$ classNode.access |= Opcodes.ACC_PUBLIC[ CD ]
Line_44 $$ MethodNodeGenerator methodNodeGenerator = new MethodNodeGenerator(idMethod)-->Line_49 $$ methodNodes.add(methodNodeGenerator.getMethodNode())[ FD ]
Line_31 $$ if (defaultInitMethodNode != null) -->Line_32 $$ ASMUtil.mergeMethods(templateInitMethodNode, defaultInitMethodNode, templateInitMethodNode)[ CD ]
Line_40 $$ Type stubType = Type.getType(classNode.name)-->Line_54 $$ methodNodes.add(createProxyMethodNode(proxyMethods.get(i), i, skeletonId, stubType))[ FD ]
Line_44 $$ MethodNodeGenerator methodNodeGenerator = new MethodNodeGenerator(idMethod)-->Line_46 $$ methodNodeGenerator.getField(stubType, "_id", _STRING_TYPE)[ FD ]
Line_44 $$ MethodNodeGenerator methodNodeGenerator = new MethodNodeGenerator(idMethod)-->Line_48 $$ methodNodeGenerator.endMethod()[ FD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_64 $$ return toClass(classNode, classLoader)[ CD ]
Line_30 $$ MethodNode templateInitMethodNode = ASMUtil.findMethodNode(templateMethodNodes, "<init>", Type.VOID_TYPE, _STRING_TYPE, _REGISTRATION_REFERENCE_TYPE, _EXCEPTION_HANDLER_TYPE)-->Line_32 $$ ASMUtil.mergeMethods(templateInitMethodNode, defaultInitMethodNode, templateInitMethodNode)[ FD ]
Line_9 $$ List<String> interfaces = classNode.interfaces-->Line_11 $$ interfaces.add(internalName)[ FD ]
Line_35 $$ if (defaultClinitMethodNode != null) -->Line_37 $$ ASMUtil.mergeMethods(templateClinitMethodNode, defaultClinitMethodNode, templateClinitMethodNode)[ CD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_8 $$ if (clazz.isInterface()) [ FD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_34 $$ MethodNode defaultClinitMethodNode = ASMUtil.removeMethodNode(methodNodes, "<clinit>", Type.VOID_TYPE)[ CD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_35 $$ if (defaultClinitMethodNode != null) [ CD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_3 $$ String internalName = Type.getInternalName(clazz)[ FD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_22 $$ FieldNode idFieldNode = ASMUtil.findFieldNode(templateFieldNodes, "_id")[ CD ]
Line_34 $$ MethodNode defaultClinitMethodNode = ASMUtil.removeMethodNode(methodNodes, "<clinit>", Type.VOID_TYPE)-->Line_37 $$ ASMUtil.mergeMethods(templateClinitMethodNode, defaultClinitMethodNode, templateClinitMethodNode)[ FD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_40 $$ Type stubType = Type.getType(classNode.name)[ CD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_4 $$ ClassNode classNode = ASMUtil.loadAndRename(clazz, internalName.concat(STUB_POSTFIX))[ FD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_28 $$ ASMUtil.addFieldNodes(classNode.fields, templateFieldNodes)[ CD ]
Line_4 $$ ClassNode classNode = ASMUtil.loadAndRename(clazz, internalName.concat(STUB_POSTFIX))-->Line_64 $$ return toClass(classNode, classLoader)[ FD ]
Line_8 $$ if (clazz.isInterface()) -->Line_11 $$ interfaces.add(internalName)[ CD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_53 $$ for (int i = 0; i < proxyMethods.size(); i++) [ CD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_23 $$ idFieldNode.access |= Opcodes.ACC_FINAL[ CD ]
Line_21 $$ List<FieldNode> templateFieldNodes = templateClassNode.fields-->Line_24 $$ FieldNode intrabandFieldNode = ASMUtil.findFieldNode(templateFieldNodes, "_intraband")[ FD ]
Line_8 $$ if (clazz.isInterface()) -->Line_10 $$ interfaces.clear()[ CD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_29 $$ List<MethodNode> templateMethodNodes = templateClassNode.methods[ CD ]
Line_53 $$ for (int i = 0; i < proxyMethods.size(); i++) -->Line_54 $$ methodNodes.add(createProxyMethodNode(proxyMethods.get(i), i, skeletonId, stubType))[ CD ]
Line_8 $$ if (clazz.isInterface()) -->Line_9 $$ List<String> interfaces = classNode.interfaces[ CD ]
Line_44 $$ MethodNodeGenerator methodNodeGenerator = new MethodNodeGenerator(idMethod)-->Line_47 $$ methodNodeGenerator.returnValue()[ FD ]
Line_21 $$ List<FieldNode> templateFieldNodes = templateClassNode.fields-->Line_28 $$ ASMUtil.addFieldNodes(classNode.fields, templateFieldNodes)[ FD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_15 $$ MethodNode defaultInitMethodNode = ASMUtil.removeMethodNode(methodNodes, "<init>", Type.VOID_TYPE)[ CD ]
Line_9 $$ List<String> interfaces = classNode.interfaces-->Line_10 $$ interfaces.clear()[ FD ]
Line_3 $$ String internalName = Type.getInternalName(clazz)-->Line_11 $$ interfaces.add(internalName)[ FD ]
Line_15 $$ MethodNode defaultInitMethodNode = ASMUtil.removeMethodNode(methodNodes, "<init>", Type.VOID_TYPE)-->Line_32 $$ ASMUtil.mergeMethods(templateInitMethodNode, defaultInitMethodNode, templateInitMethodNode)[ FD ]
Line_53 $$ for (int i = 0; i < proxyMethods.size(); i++) -->Line_54 $$ methodNodes.add(createProxyMethodNode(proxyMethods.get(i), i, skeletonId, stubType))[ FD ]
Line_29 $$ List<MethodNode> templateMethodNodes = templateClassNode.methods-->Line_36 $$ MethodNode templateClinitMethodNode = ASMUtil.findMethodNode(templateMethodNodes, "<clinit>", Type.VOID_TYPE)[ FD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_54 $$ methodNodes.add(createProxyMethodNode(proxyMethods.get(i), i, skeletonId, stubType))[ FD ]
Line_44 $$ MethodNodeGenerator methodNodeGenerator = new MethodNodeGenerator(idMethod)-->Line_60 $$ methodNodeGenerator.endMethod()[ FD ]
Line_4 $$ ClassNode classNode = ASMUtil.loadAndRename(clazz, internalName.concat(STUB_POSTFIX))-->Line_63 $$ rewriteGetProxyMethodSignaturesMethodNode(classNode, methodsBag.proxyMethodSignatures)[ FD ]
Line_29 $$ List<MethodNode> templateMethodNodes = templateClassNode.methods-->Line_30 $$ MethodNode templateInitMethodNode = ASMUtil.findMethodNode(templateMethodNodes, "<init>", Type.VOID_TYPE, _STRING_TYPE, _REGISTRATION_REFERENCE_TYPE, _EXCEPTION_HANDLER_TYPE)[ FD ]
Line_44 $$ MethodNodeGenerator methodNodeGenerator = new MethodNodeGenerator(idMethod)-->Line_45 $$ methodNodeGenerator.loadThis()[ FD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_25 $$ intrabandFieldNode.access |= Opcodes.ACC_FINAL[ CD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_64 $$ return toClass(classNode, classLoader)[ FD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_4 $$ ClassNode classNode = ASMUtil.loadAndRename(clazz, internalName.concat(STUB_POSTFIX))[ CD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_24 $$ FieldNode intrabandFieldNode = ASMUtil.findFieldNode(templateFieldNodes, "_intraband")[ CD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_26 $$ FieldNode registrationReferenceFieldNode = ASMUtil.findFieldNode(templateFieldNodes, "_registrationReference")[ CD ]
Line_2 $$ protected static Class<?> generateStubClass(ClassLoader classLoader, Class<?> clazz, String skeletonId) -->Line_39 $$ methodNodes.addAll(templateMethodNodes)[ CD ]
