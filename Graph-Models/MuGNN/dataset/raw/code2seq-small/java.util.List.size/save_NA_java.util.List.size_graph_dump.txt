Line_18 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_26 $$ glyphCount += page.getGlyphs().size()[ CD ]
Line_20 $$ String fileName-->Line_103 $$ fileName = outputName + (pageIndex + 1) + ".png"[ FD ]
Line_4 $$ String outputName = outputBMFontFile.getName()-->Line_22 $$ fileName = outputName + ".png"[ FD ]
Line_11 $$ PrintStream out = new PrintStream(new FileOutputStream(new File(outputDir, outputName + ".fnt")))-->Line_84 $$ out.println("kernings count=" + kernings.size())[ FD ]
Line_11 $$ PrintStream out = new PrintStream(new FileOutputStream(new File(outputDir, outputName + ".fnt")))-->Line_29 $$ out.println("chars count=" + glyphCount)[ FD ]
Line_11 $$ PrintStream out = new PrintStream(new FileOutputStream(new File(outputDir, outputName + ".fnt")))-->Line_16 $$ out.println("common lineHeight=" + unicodeFont.getLineHeight() + " base=" + unicodeFont.getAscent() + " scaleW=" + pageWidth + " scaleH=" + pageHeight + " pages=" + unicodeFont.getGlyphPages().size() + " packed=0")[ FD ]
Line_97 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_98 $$ GlyphPage page = (GlyphPage) pageIter.next()[ FD ]
Line_98 $$ GlyphPage page = (GlyphPage) pageIter.next()-->Line_104 $$ page.getTexture().bind()[ FD ]
Line_32 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_34 $$ page.getGlyphs().sort(new Comparator<Glyph>() [ CD ]
Line_18 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_27 $$ pageIndex++[ CD ]
Line_108 $$ for (int y = 0; y < height; y++) -->Line_109 $$ buffer.get(row)[ CD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_11 $$ PrintStream out = new PrintStream(new FileOutputStream(new File(outputDir, outputName + ".fnt")))[ CD ]
Line_59 $$ for (Iterator iter = allGlyphs.iterator(); iter.hasNext(); ) -->Line_60 $$ Glyph glyph = (Glyph) iter.next()[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_4 $$ String outputName = outputBMFontFile.getName()[ CD ]
Line_32 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_44 $$ allGlyphs.addAll(page.getGlyphs())[ CD ]
Line_4 $$ String outputName = outputBMFontFile.getName()-->Line_6 $$ outputName = outputName.substring(0, outputName.length() - 4)[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_14 $$ int pageHeight = unicodeFont.getGlyphPageHeight()[ CD ]
Line_18 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_25 $$ out.println("page id=" + pageIndex + " file=\"" + fileName + "\"")[ CD ]
Line_18 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_21 $$ if (pageIndex == 0 && !pageIter.hasNext())[ CD ]
Line_18 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_19 $$ GlyphPage page = (GlyphPage) pageIter.next()[ CD ]
Line_11 $$ PrintStream out = new PrintStream(new FileOutputStream(new File(outputDir, outputName + ".fnt")))-->Line_25 $$ out.println("page id=" + pageIndex + " file=\"" + fileName + "\"")[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_90 $$ out.close()[ CD ]
Line_18 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_21 $$ if (pageIndex == 0 && !pageIter.hasNext())[ FD ]
Line_33 $$ GlyphPage page = (GlyphPage) pageIter.next()-->Line_44 $$ allGlyphs.addAll(page.getGlyphs())[ FD ]
Line_13 $$ int pageWidth = unicodeFont.getGlyphPageWidth()-->Line_42 $$ writeGlyph(out, pageWidth, pageHeight, pageIndex, glyph)[ FD ]
Line_21 $$ if (pageIndex == 0 && !pageIter.hasNext())-->Line_22 $$ fileName = outputName + ".png"[ CD ]
Line_40 $$ for (Iterator glyphIter = page.getGlyphs().iterator(); glyphIter.hasNext(); ) -->Line_41 $$ Glyph glyph = (Glyph) glyphIter.next()[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_29 $$ out.println("chars count=" + glyphCount)[ CD ]
Line_97 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_100 $$ if (pageIndex == 0 && !pageIter.hasNext())[ CD ]
Line_18 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_100 $$ if (pageIndex == 0 && !pageIter.hasNext())[ FD ]
Line_6 $$ outputName = outputName.substring(0, outputName.length() - 4)-->Line_101 $$ fileName = outputName + ".png"[ FD ]
Line_18 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_20 $$ String fileName[ CD ]
Line_6 $$ outputName = outputName.substring(0, outputName.length() - 4)-->Line_22 $$ fileName = outputName + ".png"[ FD ]
Line_19 $$ GlyphPage page = (GlyphPage) pageIter.next()-->Line_26 $$ glyphCount += page.getGlyphs().size()[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_3 $$ File outputDir = outputBMFontFile.getParentFile()[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_3 $$ File outputDir = outputBMFontFile.getParentFile()[ CD ]
Line_97 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_104 $$ page.getTexture().bind()[ CD ]
Line_19 $$ GlyphPage page = (GlyphPage) pageIter.next()-->Line_104 $$ page.getTexture().bind()[ FD ]
Line_60 $$ Glyph glyph = (Glyph) iter.next()-->Line_61 $$ glyphCodeToCodePoint.put(new Integer(getGlyphCode(font, glyph.getCodePoint())), new Integer(glyph.getCodePoint()))[ FD ]
Line_33 $$ GlyphPage page = (GlyphPage) pageIter.next()-->Line_34 $$ page.getGlyphs().sort(new Comparator<Glyph>() [ FD ]
Line_48 $$ if (ttfFileRef == null)-->Line_49 $$ System.out.println("Kerning information could not be output because a TTF font file was not specified.")[ CD ]
Line_59 $$ for (Iterator iter = allGlyphs.iterator(); iter.hasNext(); ) -->Line_60 $$ Glyph glyph = (Glyph) iter.next()[ CD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_10 $$ unicodeFont.loadGlyphs()[ CD ]
Line_97 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_113 $$ ImageIO.write(pageImage, "png", imageOutputFile)[ CD ]
Line_12 $$ Font font = unicodeFont.getFont()-->Line_61 $$ glyphCodeToCodePoint.put(new Integer(getGlyphCode(font, glyph.getCodePoint())), new Integer(glyph.getCodePoint()))[ FD ]
Line_17 $$ int pageIndex = 0, glyphCount = 0-->Line_26 $$ glyphCount += page.getGlyphs().size()[ FD ]
Line_85 $$ for (Iterator iter = kernings.iterator(); iter.hasNext(); ) -->Line_87 $$ out.println("kerning first=" + pair.firstCodePoint + " second=" + pair.secondCodePoint + " amount=" + pair.offset)[ CD ]
Line_99 $$ String fileName-->Line_103 $$ fileName = outputName + (pageIndex + 1) + ".png"[ FD ]
Line_40 $$ for (Iterator glyphIter = page.getGlyphs().iterator(); glyphIter.hasNext(); ) -->Line_41 $$ Glyph glyph = (Glyph) glyphIter.next()[ CD ]
Line_12 $$ Font font = unicodeFont.getFont()-->Line_15 $$ out.println("info face=\"" + font.getFontName() + "\" size=" + font.getSize() + " bold=" + (font.isBold() ? 1 : 0) + " italic=" + (font.isItalic() ? 1 : 0) + " charset=\"\" unicode=0 stretchH=100 smooth=1 aa=1 padding=" + unicodeFont.getPaddingTop() + "," + unicodeFont.getPaddingLeft() + "," + unicodeFont.getPaddingBottom() + "," + unicodeFont.getPaddingRight() + " spacing=" + unicodeFont.getPaddingAdvanceX() + "," + unicodeFont.getPaddingAdvanceY())[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_91 $$ int width = unicodeFont.getGlyphPageWidth()[ CD ]
Line_33 $$ GlyphPage page = (GlyphPage) pageIter.next()-->Line_40 $$ for (Iterator glyphIter = page.getGlyphs().iterator(); glyphIter.hasNext(); ) [ FD ]
Line_107 $$ WritableRaster raster = pageImage.getRaster()-->Line_110 $$ raster.setDataElements(0, y, width, 1, row)[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_48 $$ if (ttfFileRef == null)[ CD ]
Line_17 $$ int pageIndex = 0, glyphCount = 0-->Line_30 $$ pageIndex = 0[ FD ]
Line_11 $$ PrintStream out = new PrintStream(new FileOutputStream(new File(outputDir, outputName + ".fnt")))-->Line_15 $$ out.println("info face=\"" + font.getFontName() + "\" size=" + font.getSize() + " bold=" + (font.isBold() ? 1 : 0) + " italic=" + (font.isItalic() ? 1 : 0) + " charset=\"\" unicode=0 stretchH=100 smooth=1 aa=1 padding=" + unicodeFont.getPaddingTop() + "," + unicodeFont.getPaddingLeft() + "," + unicodeFont.getPaddingBottom() + "," + unicodeFont.getPaddingRight() + " spacing=" + unicodeFont.getPaddingAdvanceX() + "," + unicodeFont.getPaddingAdvanceY())[ FD ]
Line_22 $$ fileName = outputName + ".png"-->Line_24 $$ fileName = outputName + (pageIndex + 1) + ".png"[ FD ]
Line_32 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_98 $$ GlyphPage page = (GlyphPage) pageIter.next()[ FD ]
Line_48 $$ if (ttfFileRef == null)-->Line_85 $$ for (Iterator iter = kernings.iterator(); iter.hasNext(); ) [ CD ]
Line_22 $$ fileName = outputName + ".png"-->Line_101 $$ fileName = outputName + ".png"[ FD ]
Line_31 $$ List allGlyphs = new ArrayList(512)-->Line_59 $$ for (Iterator iter = allGlyphs.iterator(); iter.hasNext(); ) [ FD ]
Line_97 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_100 $$ if (pageIndex == 0 && !pageIter.hasNext())[ FD ]
Line_99 $$ String fileName-->Line_101 $$ fileName = outputName + ".png"[ FD ]
Line_33 $$ GlyphPage page = (GlyphPage) pageIter.next()-->Line_104 $$ page.getTexture().bind()[ FD ]
Line_32 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_100 $$ if (pageIndex == 0 && !pageIter.hasNext())[ FD ]
Line_24 $$ fileName = outputName + (pageIndex + 1) + ".png"-->Line_101 $$ fileName = outputName + ".png"[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_4 $$ String outputName = outputBMFontFile.getName()[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_93 $$ IntBuffer buffer = BufferUtils.createIntBuffer(width * height)[ CD ]
Line_18 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_98 $$ GlyphPage page = (GlyphPage) pageIter.next()[ FD ]
Line_18 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_32 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) [ FD ]
Line_18 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_19 $$ GlyphPage page = (GlyphPage) pageIter.next()[ FD ]
Line_5 $$ if (outputName.endsWith(".fnt"))-->Line_6 $$ outputName = outputName.substring(0, outputName.length() - 4)[ CD ]
Line_101 $$ fileName = outputName + ".png"-->Line_103 $$ fileName = outputName + (pageIndex + 1) + ".png"[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_9 $$ getGlyph(' ')[ CD ]
Line_41 $$ Glyph glyph = (Glyph) glyphIter.next()-->Line_42 $$ writeGlyph(out, pageWidth, pageHeight, pageIndex, glyph)[ FD ]
Line_59 $$ for (Iterator iter = allGlyphs.iterator(); iter.hasNext(); ) -->Line_61 $$ glyphCodeToCodePoint.put(new Integer(getGlyphCode(font, glyph.getCodePoint())), new Integer(glyph.getCodePoint()))[ CD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_12 $$ Font font = unicodeFont.getFont()[ CD ]
Line_21 $$ if (pageIndex == 0 && !pageIter.hasNext())-->Line_24 $$ fileName = outputName + (pageIndex + 1) + ".png"[ CD ]
Line_20 $$ String fileName-->Line_24 $$ fileName = outputName + (pageIndex + 1) + ".png"[ FD ]
Line_32 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_40 $$ for (Iterator glyphIter = page.getGlyphs().iterator(); glyphIter.hasNext(); ) [ CD ]
Line_22 $$ fileName = outputName + ".png"-->Line_103 $$ fileName = outputName + (pageIndex + 1) + ".png"[ FD ]
Line_97 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_108 $$ for (int y = 0; y < height; y++) [ CD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_16 $$ out.println("common lineHeight=" + unicodeFont.getLineHeight() + " base=" + unicodeFont.getAscent() + " scaleW=" + pageWidth + " scaleH=" + pageHeight + " pages=" + unicodeFont.getGlyphPages().size() + " packed=0")[ CD ]
Line_59 $$ for (Iterator iter = allGlyphs.iterator(); iter.hasNext(); ) -->Line_85 $$ for (Iterator iter = kernings.iterator(); iter.hasNext(); ) [ FD ]
Line_14 $$ int pageHeight = unicodeFont.getGlyphPageHeight()-->Line_42 $$ writeGlyph(out, pageWidth, pageHeight, pageIndex, glyph)[ FD ]
Line_11 $$ PrintStream out = new PrintStream(new FileOutputStream(new File(outputDir, outputName + ".fnt")))-->Line_90 $$ out.close()[ FD ]
Line_18 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_33 $$ GlyphPage page = (GlyphPage) pageIter.next()[ FD ]
Line_34 $$ page.getGlyphs().sort(new Comparator<Glyph>() -->Line_37 $$ return o1.getCodePoint() - o2.getCodePoint()[ CD ]
Line_100 $$ if (pageIndex == 0 && !pageIter.hasNext())-->Line_103 $$ fileName = outputName + (pageIndex + 1) + ".png"[ CD ]
Line_48 $$ if (ttfFileRef == null)-->Line_84 $$ out.println("kernings count=" + kernings.size())[ CD ]
Line_41 $$ Glyph glyph = (Glyph) glyphIter.next()-->Line_61 $$ glyphCodeToCodePoint.put(new Integer(getGlyphCode(font, glyph.getCodePoint())), new Integer(glyph.getCodePoint()))[ FD ]
Line_11 $$ PrintStream out = new PrintStream(new FileOutputStream(new File(outputDir, outputName + ".fnt")))-->Line_87 $$ out.println("kerning first=" + pair.firstCodePoint + " second=" + pair.secondCodePoint + " amount=" + pair.offset)[ FD ]
Line_85 $$ for (Iterator iter = kernings.iterator(); iter.hasNext(); ) -->Line_86 $$ KerningPair pair = (KerningPair) iter.next()[ CD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_97 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) [ CD ]
Line_12 $$ Font font = unicodeFont.getFont()-->Line_53 $$ kerning.load(Gdx.files.internal(ttfFileRef).read(), font.getSize())[ FD ]
Line_4 $$ String outputName = outputBMFontFile.getName()-->Line_101 $$ fileName = outputName + ".png"[ FD ]
Line_19 $$ GlyphPage page = (GlyphPage) pageIter.next()-->Line_34 $$ page.getGlyphs().sort(new Comparator<Glyph>() [ FD ]
Line_48 $$ if (ttfFileRef == null)-->Line_59 $$ for (Iterator iter = allGlyphs.iterator(); iter.hasNext(); ) [ CD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_92 $$ int height = unicodeFont.getGlyphPageHeight()[ CD ]
Line_24 $$ fileName = outputName + (pageIndex + 1) + ".png"-->Line_103 $$ fileName = outputName + (pageIndex + 1) + ".png"[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_15 $$ out.println("info face=\"" + font.getFontName() + "\" size=" + font.getSize() + " bold=" + (font.isBold() ? 1 : 0) + " italic=" + (font.isItalic() ? 1 : 0) + " charset=\"\" unicode=0 stretchH=100 smooth=1 aa=1 padding=" + unicodeFont.getPaddingTop() + "," + unicodeFont.getPaddingLeft() + "," + unicodeFont.getPaddingBottom() + "," + unicodeFont.getPaddingRight() + " spacing=" + unicodeFont.getPaddingAdvanceX() + "," + unicodeFont.getPaddingAdvanceY())[ CD ]
Line_97 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_98 $$ GlyphPage page = (GlyphPage) pageIter.next()[ CD ]
Line_40 $$ for (Iterator glyphIter = page.getGlyphs().iterator(); glyphIter.hasNext(); ) -->Line_42 $$ writeGlyph(out, pageWidth, pageHeight, pageIndex, glyph)[ CD ]
Line_20 $$ String fileName-->Line_22 $$ fileName = outputName + ".png"[ FD ]
Line_108 $$ for (int y = 0; y < height; y++) -->Line_110 $$ raster.setDataElements(0, y, width, 1, row)[ CD ]
Line_32 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_33 $$ GlyphPage page = (GlyphPage) pageIter.next()[ CD ]
Line_108 $$ for (int y = 0; y < height; y++) -->Line_110 $$ raster.setDataElements(0, y, width, 1, row)[ FD ]
Line_59 $$ for (Iterator iter = allGlyphs.iterator(); iter.hasNext(); ) -->Line_86 $$ KerningPair pair = (KerningPair) iter.next()[ FD ]
Line_32 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_33 $$ GlyphPage page = (GlyphPage) pageIter.next()[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_5 $$ if (outputName.endsWith(".fnt"))[ CD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_13 $$ int pageWidth = unicodeFont.getGlyphPageWidth()[ CD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_17 $$ int pageIndex = 0, glyphCount = 0[ CD ]
Line_30 $$ pageIndex = 0-->Line_42 $$ writeGlyph(out, pageWidth, pageHeight, pageIndex, glyph)[ FD ]
Line_18 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_97 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) [ FD ]
Line_100 $$ if (pageIndex == 0 && !pageIter.hasNext())-->Line_101 $$ fileName = outputName + ".png"[ CD ]
Line_97 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_105 $$ buffer.clear()[ CD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_47 $$ String ttfFileRef = unicodeFont.getFontFile()[ CD ]
Line_97 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_107 $$ WritableRaster raster = pageImage.getRaster()[ CD ]
Line_34 $$ page.getGlyphs().sort(new Comparator<Glyph>() -->Line_37 $$ return o1.getCodePoint() - o2.getCodePoint()[ FD ]
Line_85 $$ for (Iterator iter = kernings.iterator(); iter.hasNext(); ) -->Line_86 $$ KerningPair pair = (KerningPair) iter.next()[ FD ]
Line_19 $$ GlyphPage page = (GlyphPage) pageIter.next()-->Line_44 $$ allGlyphs.addAll(page.getGlyphs())[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_32 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) [ CD ]
Line_4 $$ String outputName = outputBMFontFile.getName()-->Line_5 $$ if (outputName.endsWith(".fnt"))[ FD ]
Line_17 $$ int pageIndex = 0, glyphCount = 0-->Line_42 $$ writeGlyph(out, pageWidth, pageHeight, pageIndex, glyph)[ FD ]
Line_31 $$ List allGlyphs = new ArrayList(512)-->Line_44 $$ allGlyphs.addAll(page.getGlyphs())[ FD ]
Line_32 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_97 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) [ FD ]
Line_17 $$ int pageIndex = 0, glyphCount = 0-->Line_27 $$ pageIndex++[ FD ]
Line_11 $$ PrintStream out = new PrintStream(new FileOutputStream(new File(outputDir, outputName + ".fnt")))-->Line_42 $$ writeGlyph(out, pageWidth, pageHeight, pageIndex, glyph)[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_18 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) [ CD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_31 $$ List allGlyphs = new ArrayList(512)[ CD ]
Line_19 $$ GlyphPage page = (GlyphPage) pageIter.next()-->Line_40 $$ for (Iterator glyphIter = page.getGlyphs().iterator(); glyphIter.hasNext(); ) [ FD ]
Line_97 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_99 $$ String fileName[ CD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_30 $$ pageIndex = 0[ CD ]
Line_20 $$ String fileName-->Line_101 $$ fileName = outputName + ".png"[ FD ]
Line_97 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_106 $$ GL11.glGetTexImage(GL11.GL_TEXTURE_2D, 0, GL12.GL_BGRA, GL11.GL_UNSIGNED_BYTE, buffer)[ CD ]
