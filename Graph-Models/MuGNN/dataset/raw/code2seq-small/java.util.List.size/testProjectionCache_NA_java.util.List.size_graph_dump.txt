Line_2 $$ public void testProjectionCache() -->Line_3 $$ Session s = openSession()[ CD ]
Line_3 $$ Session s = openSession()-->Line_35 $$ List list = s.createCriteria(Enrolment.class).createAlias("student", "s").createAlias("course", "c").add(Restrictions.isNotEmpty("s.enrolments")).setProjection(Projections.projectionList().add(Projections.property("s.name")).add(Projections.property("c.description"))).setCacheable(true).list()[ FD ]
Line_35 $$ List list = s.createCriteria(Enrolment.class).createAlias("student", "s").createAlias("course", "c").add(Restrictions.isNotEmpty("s.enrolments")).setProjection(Projections.projectionList().add(Projections.property("s.name")).add(Projections.property("c.description"))).setCacheable(true).list()-->Line_37 $$ assertEquals(((Object[]) list.get(0)).length, 2)[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_14 $$ xam.setName("Max Rydahl Andersen")[ CD ]
Line_2 $$ public void testProjectionCache() -->Line_56 $$ s.delete(enrolment2)[ CD ]
Line_2 $$ public void testProjectionCache() -->Line_8 $$ s.save(course)[ CD ]
Line_26 $$ Enrolment enrolment2 = new Enrolment()-->Line_32 $$ enrolment2.setStudentNumber(gavin.getStudentNumber())[ FD ]
Line_13 $$ Student xam = new Student()-->Line_59 $$ s.delete(xam)[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_20 $$ enrolment1.setSemester((short) 1)[ CD ]
Line_41 $$ s = openSession()-->Line_50 $$ t = s.beginTransaction()[ FD ]
Line_49 $$ s = openSession()-->Line_56 $$ s.delete(enrolment2)[ FD ]
Line_26 $$ Enrolment enrolment2 = new Enrolment()-->Line_27 $$ enrolment2.setCourse(course)[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_32 $$ enrolment2.setStudentNumber(gavin.getStudentNumber())[ CD ]
Line_3 $$ Session s = openSession()-->Line_59 $$ s.delete(xam)[ FD ]
Line_3 $$ Session s = openSession()-->Line_25 $$ s.save(enrolment1)[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_37 $$ assertEquals(((Object[]) list.get(0)).length, 2)[ CD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_47 $$ t.commit()[ FD ]
Line_9 $$ Student gavin = new Student()-->Line_11 $$ gavin.setStudentNumber(666)[ FD ]
Line_13 $$ Student xam = new Student()-->Line_16 $$ s.save(xam)[ FD ]
Line_41 $$ s = openSession()-->Line_58 $$ s.delete(gavin)[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_4 $$ Transaction t = s.beginTransaction()[ CD ]
Line_5 $$ Course course = new Course()-->Line_27 $$ enrolment2.setCourse(course)[ FD ]
Line_41 $$ s = openSession()-->Line_57 $$ s.delete(course)[ FD ]
Line_17 $$ Enrolment enrolment1 = new Enrolment()-->Line_55 $$ s.delete(enrolment1)[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_15 $$ xam.setStudentNumber(101)[ CD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ Transaction t = s.beginTransaction()[ FD ]
Line_26 $$ Enrolment enrolment2 = new Enrolment()-->Line_34 $$ s.save(enrolment2)[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_21 $$ enrolment1.setYear((short) 1999)[ CD ]
Line_17 $$ Enrolment enrolment1 = new Enrolment()-->Line_22 $$ enrolment1.setStudent(xam)[ FD ]
Line_49 $$ s = openSession()-->Line_57 $$ s.delete(course)[ FD ]
Line_5 $$ Course course = new Course()-->Line_18 $$ enrolment1.setCourse(course)[ FD ]
Line_5 $$ Course course = new Course()-->Line_19 $$ enrolment1.setCourseCode(course.getCourseCode())[ FD ]
Line_3 $$ Session s = openSession()-->Line_41 $$ s = openSession()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_42 $$ t = s.beginTransaction()[ FD ]
Line_41 $$ s = openSession()-->Line_42 $$ t = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_57 $$ s.delete(course)[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_36 $$ assertEquals(list.size(), 2)[ CD ]
Line_2 $$ public void testProjectionCache() -->Line_10 $$ gavin.setName("Gavin King")[ CD ]
Line_5 $$ Course course = new Course()-->Line_7 $$ course.setDescription("Hibernate Training")[ FD ]
Line_17 $$ Enrolment enrolment1 = new Enrolment()-->Line_21 $$ enrolment1.setYear((short) 1999)[ FD ]
Line_17 $$ Enrolment enrolment1 = new Enrolment()-->Line_20 $$ enrolment1.setSemester((short) 1)[ FD ]
Line_17 $$ Enrolment enrolment1 = new Enrolment()-->Line_18 $$ enrolment1.setCourse(course)[ FD ]
Line_3 $$ Session s = openSession()-->Line_58 $$ s.delete(gavin)[ FD ]
Line_3 $$ Session s = openSession()-->Line_8 $$ s.save(course)[ FD ]
Line_49 $$ s = openSession()-->Line_61 $$ s.close()[ FD ]
Line_9 $$ Student gavin = new Student()-->Line_31 $$ enrolment2.setStudent(gavin)[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_35 $$ List list = s.createCriteria(Enrolment.class).createAlias("student", "s").createAlias("course", "c").add(Restrictions.isNotEmpty("s.enrolments")).setProjection(Projections.projectionList().add(Projections.property("s.name")).add(Projections.property("c.description"))).setCacheable(true).list()[ CD ]
Line_41 $$ s = openSession()-->Line_48 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_56 $$ s.delete(enrolment2)[ FD ]
Line_49 $$ s = openSession()-->Line_58 $$ s.delete(gavin)[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_17 $$ Enrolment enrolment1 = new Enrolment()[ CD ]
Line_2 $$ public void testProjectionCache() -->Line_24 $$ xam.getEnrolments().add(enrolment1)[ CD ]
Line_35 $$ List list = s.createCriteria(Enrolment.class).createAlias("student", "s").createAlias("course", "c").add(Restrictions.isNotEmpty("s.enrolments")).setProjection(Projections.projectionList().add(Projections.property("s.name")).add(Projections.property("c.description"))).setCacheable(true).list()-->Line_52 $$ assertEquals(list.size(), 2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_34 $$ s.save(enrolment2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_12 $$ s.save(gavin)[ FD ]
Line_49 $$ s = openSession()-->Line_59 $$ s.delete(xam)[ FD ]
Line_49 $$ s = openSession()-->Line_50 $$ t = s.beginTransaction()[ FD ]
Line_35 $$ List list = s.createCriteria(Enrolment.class).createAlias("student", "s").createAlias("course", "c").add(Restrictions.isNotEmpty("s.enrolments")).setProjection(Projections.projectionList().add(Projections.property("s.name")).add(Projections.property("c.description"))).setCacheable(true).list()-->Line_44 $$ assertEquals(list.size(), 2)[ FD ]
Line_35 $$ List list = s.createCriteria(Enrolment.class).createAlias("student", "s").createAlias("course", "c").add(Restrictions.isNotEmpty("s.enrolments")).setProjection(Projections.projectionList().add(Projections.property("s.name")).add(Projections.property("c.description"))).setCacheable(true).list()-->Line_36 $$ assertEquals(list.size(), 2)[ FD ]
Line_41 $$ s = openSession()-->Line_56 $$ s.delete(enrolment2)[ FD ]
Line_41 $$ s = openSession()-->Line_59 $$ s.delete(xam)[ FD ]
Line_3 $$ Session s = openSession()-->Line_55 $$ s.delete(enrolment1)[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_33 $$ gavin.getEnrolments().add(enrolment2)[ CD ]
Line_2 $$ public void testProjectionCache() -->Line_34 $$ s.save(enrolment2)[ CD ]
Line_41 $$ s = openSession()-->Line_55 $$ s.delete(enrolment1)[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_52 $$ assertEquals(list.size(), 2)[ CD ]
Line_3 $$ Session s = openSession()-->Line_61 $$ s.close()[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_12 $$ s.save(gavin)[ CD ]
Line_3 $$ Session s = openSession()-->Line_51 $$ s.createCriteria(Enrolment.class).createAlias("student", "s").createAlias("course", "c").add(Restrictions.isNotEmpty("s.enrolments")).setProjection(Projections.projectionList().add(Projections.property("s.name")).add(Projections.property("c.description"))).setCacheable(true).list()[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_11 $$ gavin.setStudentNumber(666)[ CD ]
Line_13 $$ Student xam = new Student()-->Line_22 $$ enrolment1.setStudent(xam)[ FD ]
Line_3 $$ Session s = openSession()-->Line_43 $$ s.createCriteria(Enrolment.class).createAlias("student", "s").createAlias("course", "c").add(Restrictions.isNotEmpty("s.enrolments")).setProjection(Projections.projectionList().add(Projections.property("s.name")).add(Projections.property("c.description"))).setCacheable(true).list()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_50 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_53 $$ assertEquals(((Object[]) list.get(0)).length, 2)[ CD ]
Line_2 $$ public void testProjectionCache() -->Line_27 $$ enrolment2.setCourse(course)[ CD ]
Line_26 $$ Enrolment enrolment2 = new Enrolment()-->Line_56 $$ s.delete(enrolment2)[ FD ]
Line_41 $$ s = openSession()-->Line_51 $$ s.createCriteria(Enrolment.class).createAlias("student", "s").createAlias("course", "c").add(Restrictions.isNotEmpty("s.enrolments")).setProjection(Projections.projectionList().add(Projections.property("s.name")).add(Projections.property("c.description"))).setCacheable(true).list()[ FD ]
Line_35 $$ List list = s.createCriteria(Enrolment.class).createAlias("student", "s").createAlias("course", "c").add(Restrictions.isNotEmpty("s.enrolments")).setProjection(Projections.projectionList().add(Projections.property("s.name")).add(Projections.property("c.description"))).setCacheable(true).list()-->Line_53 $$ assertEquals(((Object[]) list.get(0)).length, 2)[ FD ]
Line_26 $$ Enrolment enrolment2 = new Enrolment()-->Line_28 $$ enrolment2.setCourseCode(course.getCourseCode())[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_26 $$ Enrolment enrolment2 = new Enrolment()[ CD ]
Line_41 $$ s = openSession()-->Line_43 $$ s.createCriteria(Enrolment.class).createAlias("student", "s").createAlias("course", "c").add(Restrictions.isNotEmpty("s.enrolments")).setProjection(Projections.projectionList().add(Projections.property("s.name")).add(Projections.property("c.description"))).setCacheable(true).list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_48 $$ s.close()[ FD ]
Line_17 $$ Enrolment enrolment1 = new Enrolment()-->Line_19 $$ enrolment1.setCourseCode(course.getCourseCode())[ FD ]
Line_35 $$ List list = s.createCriteria(Enrolment.class).createAlias("student", "s").createAlias("course", "c").add(Restrictions.isNotEmpty("s.enrolments")).setProjection(Projections.projectionList().add(Projections.property("s.name")).add(Projections.property("c.description"))).setCacheable(true).list()-->Line_46 $$ assertEquals(((Object[]) list.get(1)).length, 2)[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_55 $$ s.delete(enrolment1)[ CD ]
Line_13 $$ Student xam = new Student()-->Line_14 $$ xam.setName("Max Rydahl Andersen")[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_29 $$ enrolment2.setSemester((short) 3)[ CD ]
Line_9 $$ Student gavin = new Student()-->Line_10 $$ gavin.setName("Gavin King")[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_5 $$ Course course = new Course()[ CD ]
Line_17 $$ Enrolment enrolment1 = new Enrolment()-->Line_24 $$ xam.getEnrolments().add(enrolment1)[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_45 $$ assertEquals(((Object[]) list.get(0)).length, 2)[ CD ]
Line_9 $$ Student gavin = new Student()-->Line_58 $$ s.delete(gavin)[ FD ]
Line_5 $$ Course course = new Course()-->Line_8 $$ s.save(course)[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_38 $$ assertEquals(((Object[]) list.get(1)).length, 2)[ CD ]
Line_50 $$ t = s.beginTransaction()-->Line_60 $$ t.commit()[ FD ]
Line_5 $$ Course course = new Course()-->Line_28 $$ enrolment2.setCourseCode(course.getCourseCode())[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_25 $$ s.save(enrolment1)[ CD ]
Line_26 $$ Enrolment enrolment2 = new Enrolment()-->Line_29 $$ enrolment2.setSemester((short) 3)[ FD ]
Line_3 $$ Session s = openSession()-->Line_40 $$ s.close()[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_58 $$ s.delete(gavin)[ CD ]
Line_26 $$ Enrolment enrolment2 = new Enrolment()-->Line_31 $$ enrolment2.setStudent(gavin)[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_23 $$ enrolment1.setStudentNumber(xam.getStudentNumber())[ CD ]
Line_9 $$ Student gavin = new Student()-->Line_12 $$ s.save(gavin)[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_57 $$ s.delete(course)[ CD ]
Line_17 $$ Enrolment enrolment1 = new Enrolment()-->Line_25 $$ s.save(enrolment1)[ FD ]
Line_42 $$ t = s.beginTransaction()-->Line_60 $$ t.commit()[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_41 $$ s = openSession()[ CD ]
Line_3 $$ Session s = openSession()-->Line_50 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_39 $$ t.commit()[ FD ]
Line_13 $$ Student xam = new Student()-->Line_15 $$ xam.setStudentNumber(101)[ FD ]
Line_35 $$ List list = s.createCriteria(Enrolment.class).createAlias("student", "s").createAlias("course", "c").add(Restrictions.isNotEmpty("s.enrolments")).setProjection(Projections.projectionList().add(Projections.property("s.name")).add(Projections.property("c.description"))).setCacheable(true).list()-->Line_38 $$ assertEquals(((Object[]) list.get(1)).length, 2)[ FD ]
Line_5 $$ Course course = new Course()-->Line_6 $$ course.setCourseCode("HIB")[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_19 $$ enrolment1.setCourseCode(course.getCourseCode())[ CD ]
Line_2 $$ public void testProjectionCache() -->Line_18 $$ enrolment1.setCourse(course)[ CD ]
Line_2 $$ public void testProjectionCache() -->Line_28 $$ enrolment2.setCourseCode(course.getCourseCode())[ CD ]
Line_2 $$ public void testProjectionCache() -->Line_51 $$ s.createCriteria(Enrolment.class).createAlias("student", "s").createAlias("course", "c").add(Restrictions.isNotEmpty("s.enrolments")).setProjection(Projections.projectionList().add(Projections.property("s.name")).add(Projections.property("c.description"))).setCacheable(true).list()[ CD ]
Line_2 $$ public void testProjectionCache() -->Line_44 $$ assertEquals(list.size(), 2)[ CD ]
Line_2 $$ public void testProjectionCache() -->Line_43 $$ s.createCriteria(Enrolment.class).createAlias("student", "s").createAlias("course", "c").add(Restrictions.isNotEmpty("s.enrolments")).setProjection(Projections.projectionList().add(Projections.property("s.name")).add(Projections.property("c.description"))).setCacheable(true).list()[ CD ]
Line_42 $$ t = s.beginTransaction()-->Line_47 $$ t.commit()[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_46 $$ assertEquals(((Object[]) list.get(1)).length, 2)[ CD ]
Line_2 $$ public void testProjectionCache() -->Line_48 $$ s.close()[ CD ]
Line_35 $$ List list = s.createCriteria(Enrolment.class).createAlias("student", "s").createAlias("course", "c").add(Restrictions.isNotEmpty("s.enrolments")).setProjection(Projections.projectionList().add(Projections.property("s.name")).add(Projections.property("c.description"))).setCacheable(true).list()-->Line_54 $$ assertEquals(((Object[]) list.get(1)).length, 2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_42 $$ t = s.beginTransaction()[ FD ]
Line_35 $$ List list = s.createCriteria(Enrolment.class).createAlias("student", "s").createAlias("course", "c").add(Restrictions.isNotEmpty("s.enrolments")).setProjection(Projections.projectionList().add(Projections.property("s.name")).add(Projections.property("c.description"))).setCacheable(true).list()-->Line_45 $$ assertEquals(((Object[]) list.get(0)).length, 2)[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_59 $$ s.delete(xam)[ CD ]
Line_42 $$ t = s.beginTransaction()-->Line_50 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_22 $$ enrolment1.setStudent(xam)[ CD ]
Line_2 $$ public void testProjectionCache() -->Line_31 $$ enrolment2.setStudent(gavin)[ CD ]
Line_26 $$ Enrolment enrolment2 = new Enrolment()-->Line_33 $$ gavin.getEnrolments().add(enrolment2)[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_7 $$ course.setDescription("Hibernate Training")[ CD ]
Line_5 $$ Course course = new Course()-->Line_57 $$ s.delete(course)[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_50 $$ t = s.beginTransaction()[ CD ]
Line_41 $$ s = openSession()-->Line_61 $$ s.close()[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_9 $$ Student gavin = new Student()[ CD ]
Line_2 $$ public void testProjectionCache() -->Line_49 $$ s = openSession()[ CD ]
Line_17 $$ Enrolment enrolment1 = new Enrolment()-->Line_23 $$ enrolment1.setStudentNumber(xam.getStudentNumber())[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_40 $$ s.close()[ CD ]
Line_41 $$ s = openSession()-->Line_49 $$ s = openSession()[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_39 $$ t.commit()[ CD ]
Line_2 $$ public void testProjectionCache() -->Line_30 $$ enrolment2.setYear((short) 1998)[ CD ]
Line_49 $$ s = openSession()-->Line_55 $$ s.delete(enrolment1)[ FD ]
Line_49 $$ s = openSession()-->Line_51 $$ s.createCriteria(Enrolment.class).createAlias("student", "s").createAlias("course", "c").add(Restrictions.isNotEmpty("s.enrolments")).setProjection(Projections.projectionList().add(Projections.property("s.name")).add(Projections.property("c.description"))).setCacheable(true).list()[ FD ]
Line_9 $$ Student gavin = new Student()-->Line_32 $$ enrolment2.setStudentNumber(gavin.getStudentNumber())[ FD ]
Line_3 $$ Session s = openSession()-->Line_16 $$ s.save(xam)[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_47 $$ t.commit()[ CD ]
Line_3 $$ Session s = openSession()-->Line_49 $$ s = openSession()[ FD ]
Line_26 $$ Enrolment enrolment2 = new Enrolment()-->Line_30 $$ enrolment2.setYear((short) 1998)[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_60 $$ t.commit()[ CD ]
Line_2 $$ public void testProjectionCache() -->Line_61 $$ s.close()[ CD ]
Line_2 $$ public void testProjectionCache() -->Line_13 $$ Student xam = new Student()[ CD ]
Line_2 $$ public void testProjectionCache() -->Line_42 $$ t = s.beginTransaction()[ CD ]
Line_13 $$ Student xam = new Student()-->Line_23 $$ enrolment1.setStudentNumber(xam.getStudentNumber())[ FD ]
Line_9 $$ Student gavin = new Student()-->Line_33 $$ gavin.getEnrolments().add(enrolment2)[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_60 $$ t.commit()[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_16 $$ s.save(xam)[ CD ]
Line_13 $$ Student xam = new Student()-->Line_24 $$ xam.getEnrolments().add(enrolment1)[ FD ]
Line_2 $$ public void testProjectionCache() -->Line_54 $$ assertEquals(((Object[]) list.get(1)).length, 2)[ CD ]
Line_2 $$ public void testProjectionCache() -->Line_6 $$ course.setCourseCode("HIB")[ CD ]
