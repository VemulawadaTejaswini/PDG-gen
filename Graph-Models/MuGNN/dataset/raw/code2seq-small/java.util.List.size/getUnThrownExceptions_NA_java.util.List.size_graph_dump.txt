Line_12 $$ if (element != null)-->Line_13 $$ result.add(element)[ CD ]
Line_11 $$ PsiClass element = facade.findClass(exception, GlobalSearchScope.allScope(myManager.getProject()))-->Line_12 $$ if (element != null)[ FD ]
Line_9 $$ List<PsiClass> result = new ArrayList<PsiClass>(myUnThrownExceptions.size())-->Line_15 $$ return result.toArray(new PsiClass[result.size()])[ FD ]
Line_2 $$ public PsiClass[] getUnThrownExceptions() -->Line_9 $$ List<PsiClass> result = new ArrayList<PsiClass>(myUnThrownExceptions.size())[ CD ]
Line_2 $$ public PsiClass[] getUnThrownExceptions() -->Line_3 $$ if (getRefManager().isOfflineView()) [ CD ]
Line_9 $$ List<PsiClass> result = new ArrayList<PsiClass>(myUnThrownExceptions.size())-->Line_13 $$ result.add(element)[ FD ]
Line_2 $$ public PsiClass[] getUnThrownExceptions() -->Line_8 $$ JavaPsiFacade facade = JavaPsiFacade.getInstance(myManager.getProject())[ CD ]
Line_3 $$ if (getRefManager().isOfflineView()) -->Line_4 $$ LOG.debug("Should not traverse graph offline")[ CD ]
Line_6 $$ if (myUnThrownExceptions == null)-->Line_7 $$ return null[ CD ]
Line_10 $$ for (String exception : myUnThrownExceptions) -->Line_11 $$ PsiClass element = facade.findClass(exception, GlobalSearchScope.allScope(myManager.getProject()))[ FD ]
Line_2 $$ public PsiClass[] getUnThrownExceptions() -->Line_6 $$ if (myUnThrownExceptions == null)[ CD ]
Line_11 $$ PsiClass element = facade.findClass(exception, GlobalSearchScope.allScope(myManager.getProject()))-->Line_13 $$ result.add(element)[ FD ]
Line_2 $$ public PsiClass[] getUnThrownExceptions() -->Line_15 $$ return result.toArray(new PsiClass[result.size()])[ CD ]
Line_8 $$ JavaPsiFacade facade = JavaPsiFacade.getInstance(myManager.getProject())-->Line_11 $$ PsiClass element = facade.findClass(exception, GlobalSearchScope.allScope(myManager.getProject()))[ FD ]
