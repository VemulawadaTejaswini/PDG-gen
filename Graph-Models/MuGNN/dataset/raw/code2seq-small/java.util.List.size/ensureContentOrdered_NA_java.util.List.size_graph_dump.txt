Line_43 $$ for (int i = current.size() - 1; i >= 0; i--) -->Line_51 $$ changed = true[ CD ]
Line_43 $$ for (int i = current.size() - 1; i >= 0; i--) -->Line_50 $$ document.replaceString(range.getStartOffset(), range.getEndOffset(), tagInfoByName.get(newTag).second)[ CD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_6 $$ for (PsiDocTag tag : comment.getTags()) [ FD ]
Line_14 $$ String paramName = valueElement.getText()-->Line_16 $$ current.add(paramName)[ FD ]
Line_26 $$ for (PsiParameter parameter : parameters) -->Line_27 $$ ordered.add(parameter.getName())[ FD ]
Line_54 $$ PsiDocumentManager manager = PsiDocumentManager.getInstance(comment.getProject())-->Line_55 $$ manager.commitDocument(document)[ FD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_42 $$ boolean changed = false[ CD ]
Line_6 $$ for (PsiDocTag tag : comment.getTags()) -->Line_17 $$ tagInfoByName.put(paramName, parseTagValue(tag, document))[ FD ]
Line_53 $$ if (changed) -->Line_55 $$ manager.commitDocument(document)[ CD ]
Line_43 $$ for (int i = current.size() - 1; i >= 0; i--) -->Line_44 $$ String newTag = ordered.get(i)[ CD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_53 $$ if (changed) [ CD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_24 $$ if ((owner instanceof PsiMethod)) [ CD ]
Line_10 $$ PsiDocTagValue valueElement = tag.getValueElement()-->Line_11 $$ if (valueElement == null) [ FD ]
Line_49 $$ TextRange range = tagInfoByName.get(oldTag).first-->Line_50 $$ document.replaceString(range.getStartOffset(), range.getEndOffset(), tagInfoByName.get(newTag).second)[ FD ]
Line_53 $$ if (changed) -->Line_54 $$ PsiDocumentManager manager = PsiDocumentManager.getInstance(comment.getProject())[ CD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_23 $$ PsiDocCommentOwner owner = comment.getOwner()[ FD ]
Line_43 $$ for (int i = current.size() - 1; i >= 0; i--) -->Line_49 $$ TextRange range = tagInfoByName.get(oldTag).first[ CD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_55 $$ manager.commitDocument(document)[ FD ]
Line_14 $$ String paramName = valueElement.getText()-->Line_17 $$ tagInfoByName.put(paramName, parseTagValue(tag, document))[ FD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_43 $$ for (int i = current.size() - 1; i >= 0; i--) [ CD ]
Line_15 $$ if (paramName != null) -->Line_16 $$ current.add(paramName)[ CD ]
Line_15 $$ if (paramName != null) -->Line_17 $$ tagInfoByName.put(paramName, parseTagValue(tag, document))[ CD ]
Line_23 $$ PsiDocCommentOwner owner = comment.getOwner()-->Line_30 $$ if (owner instanceof PsiTypeParameterListOwner) [ FD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_23 $$ PsiDocCommentOwner owner = comment.getOwner()[ CD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_17 $$ tagInfoByName.put(paramName, parseTagValue(tag, document))[ FD ]
Line_43 $$ for (int i = current.size() - 1; i >= 0; i--) -->Line_45 $$ String oldTag = current.get(i)[ CD ]
Line_44 $$ String newTag = ordered.get(i)-->Line_50 $$ document.replaceString(range.getStartOffset(), range.getEndOffset(), tagInfoByName.get(newTag).second)[ FD ]
Line_42 $$ boolean changed = false-->Line_51 $$ changed = true[ FD ]
Line_43 $$ for (int i = current.size() - 1; i >= 0; i--) -->Line_44 $$ String newTag = ordered.get(i)[ FD ]
Line_24 $$ if ((owner instanceof PsiMethod)) -->Line_25 $$ PsiParameter[] parameters = ((PsiMethod) owner).getParameterList().getParameters()[ CD ]
Line_44 $$ String newTag = ordered.get(i)-->Line_46 $$ if (newTag.equals(oldTag)) [ FD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_50 $$ document.replaceString(range.getStartOffset(), range.getEndOffset(), tagInfoByName.get(newTag).second)[ FD ]
Line_45 $$ String oldTag = current.get(i)-->Line_46 $$ if (newTag.equals(oldTag)) [ FD ]
Line_5 $$ Map<String, Pair<TextRange, String>> tagInfoByName = new HashMap<String, Pair<TextRange, String>>()-->Line_49 $$ TextRange range = tagInfoByName.get(oldTag).first[ FD ]
Line_30 $$ if (owner instanceof PsiTypeParameterListOwner) -->Line_31 $$ PsiTypeParameter[] typeParameters = ((PsiTypeParameterListOwner) owner).getTypeParameters()[ CD ]
Line_43 $$ for (int i = current.size() - 1; i >= 0; i--) -->Line_46 $$ if (newTag.equals(oldTag)) [ CD ]
Line_5 $$ Map<String, Pair<TextRange, String>> tagInfoByName = new HashMap<String, Pair<TextRange, String>>()-->Line_17 $$ tagInfoByName.put(paramName, parseTagValue(tag, document))[ FD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_54 $$ PsiDocumentManager manager = PsiDocumentManager.getInstance(comment.getProject())[ FD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_5 $$ Map<String, Pair<TextRange, String>> tagInfoByName = new HashMap<String, Pair<TextRange, String>>()[ CD ]
Line_6 $$ for (PsiDocTag tag : comment.getTags()) -->Line_7 $$ if (!PARAM_TAG_NAME.equals(tag.getName())) [ FD ]
Line_14 $$ String paramName = valueElement.getText()-->Line_15 $$ if (paramName != null) [ FD ]
Line_43 $$ for (int i = current.size() - 1; i >= 0; i--) -->Line_45 $$ String oldTag = current.get(i)[ FD ]
Line_26 $$ for (PsiParameter parameter : parameters) -->Line_33 $$ ordered.add(String.format("<%s>", parameter.getName()))[ FD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_30 $$ if (owner instanceof PsiTypeParameterListOwner) [ CD ]
Line_10 $$ PsiDocTagValue valueElement = tag.getValueElement()-->Line_14 $$ String paramName = valueElement.getText()[ FD ]
Line_6 $$ for (PsiDocTag tag : comment.getTags()) -->Line_10 $$ PsiDocTagValue valueElement = tag.getValueElement()[ FD ]
Line_45 $$ String oldTag = current.get(i)-->Line_49 $$ TextRange range = tagInfoByName.get(oldTag).first[ FD ]
Line_5 $$ Map<String, Pair<TextRange, String>> tagInfoByName = new HashMap<String, Pair<TextRange, String>>()-->Line_50 $$ document.replaceString(range.getStartOffset(), range.getEndOffset(), tagInfoByName.get(newTag).second)[ FD ]
