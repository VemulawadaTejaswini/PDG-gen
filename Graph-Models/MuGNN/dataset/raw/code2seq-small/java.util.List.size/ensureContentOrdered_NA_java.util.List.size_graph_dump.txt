Line_5 $$ for (PsiDocTag tag : comment.getTags()) -->Line_6 $$ if (!PARAM_TAG_NAME.equals(tag.getName())) [ FD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_16 $$ tagInfoByName.put(paramName, parseTagValue(tag, document))[ FD ]
Line_13 $$ String paramName = valueElement.getText()-->Line_15 $$ current.add(paramName)[ FD ]
Line_3 $$ List<String> current = new ArrayList<String>()-->Line_39 $$ String oldTag = current.get(i)[ FD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_33 $$ if (current.size() != ordered.size()) [ CD ]
Line_48 $$ PsiDocumentManager manager = PsiDocumentManager.getInstance(comment.getProject())-->Line_49 $$ manager.commitDocument(document)[ FD ]
Line_43 $$ TextRange range = tagInfoByName.get(oldTag).first-->Line_44 $$ document.replaceString(range.getStartOffset(), range.getEndOffset(), tagInfoByName.get(newTag).second)[ FD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_36 $$ boolean changed = false[ CD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_48 $$ PsiDocumentManager manager = PsiDocumentManager.getInstance(comment.getProject())[ FD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_47 $$ if (changed) [ CD ]
Line_14 $$ if (paramName != null) -->Line_15 $$ current.add(paramName)[ CD ]
Line_9 $$ PsiDocTagValue valueElement = tag.getValueElement()-->Line_13 $$ String paramName = valueElement.getText()[ FD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_21 $$ if ((owner instanceof PsiMethod)) [ CD ]
Line_3 $$ List<String> current = new ArrayList<String>()-->Line_15 $$ current.add(paramName)[ FD ]
Line_37 $$ for (int i = current.size() - 1; i >= 0; i--) -->Line_39 $$ String oldTag = current.get(i)[ FD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_44 $$ document.replaceString(range.getStartOffset(), range.getEndOffset(), tagInfoByName.get(newTag).second)[ FD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_20 $$ PsiDocCommentOwner owner = comment.getOwner()[ CD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_5 $$ for (PsiDocTag tag : comment.getTags()) [ FD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_4 $$ Map<String, Pair<TextRange, String>> tagInfoByName = new HashMap<String, Pair<TextRange, String>>()[ CD ]
Line_37 $$ for (int i = current.size() - 1; i >= 0; i--) -->Line_38 $$ String newTag = ordered.get(i)[ CD ]
Line_37 $$ for (int i = current.size() - 1; i >= 0; i--) -->Line_40 $$ if (newTag.equals(oldTag)) [ CD ]
Line_3 $$ List<String> current = new ArrayList<String>()-->Line_37 $$ for (int i = current.size() - 1; i >= 0; i--) [ FD ]
Line_19 $$ List<String> ordered = new ArrayList<String>()-->Line_24 $$ ordered.add(parameter.getName())[ FD ]
Line_19 $$ List<String> ordered = new ArrayList<String>()-->Line_33 $$ if (current.size() != ordered.size()) [ FD ]
Line_19 $$ List<String> ordered = new ArrayList<String>()-->Line_30 $$ ordered.add(String.format("<%s>", parameter.getName()))[ FD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_20 $$ PsiDocCommentOwner owner = comment.getOwner()[ FD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_37 $$ for (int i = current.size() - 1; i >= 0; i--) [ CD ]
Line_13 $$ String paramName = valueElement.getText()-->Line_16 $$ tagInfoByName.put(paramName, parseTagValue(tag, document))[ FD ]
Line_5 $$ for (PsiDocTag tag : comment.getTags()) -->Line_9 $$ PsiDocTagValue valueElement = tag.getValueElement()[ FD ]
Line_19 $$ List<String> ordered = new ArrayList<String>()-->Line_38 $$ String newTag = ordered.get(i)[ FD ]
Line_37 $$ for (int i = current.size() - 1; i >= 0; i--) -->Line_45 $$ changed = true[ CD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_27 $$ if (owner instanceof PsiTypeParameterListOwner) [ CD ]
Line_23 $$ for (PsiParameter parameter : parameters) -->Line_24 $$ ordered.add(parameter.getName())[ FD ]
Line_37 $$ for (int i = current.size() - 1; i >= 0; i--) -->Line_44 $$ document.replaceString(range.getStartOffset(), range.getEndOffset(), tagInfoByName.get(newTag).second)[ CD ]
Line_5 $$ for (PsiDocTag tag : comment.getTags()) -->Line_16 $$ tagInfoByName.put(paramName, parseTagValue(tag, document))[ FD ]
Line_37 $$ for (int i = current.size() - 1; i >= 0; i--) -->Line_39 $$ String oldTag = current.get(i)[ CD ]
Line_13 $$ String paramName = valueElement.getText()-->Line_14 $$ if (paramName != null) [ FD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_19 $$ List<String> ordered = new ArrayList<String>()[ CD ]
Line_14 $$ if (paramName != null) -->Line_16 $$ tagInfoByName.put(paramName, parseTagValue(tag, document))[ CD ]
Line_27 $$ if (owner instanceof PsiTypeParameterListOwner) -->Line_28 $$ PsiTypeParameter[] typeParameters = ((PsiTypeParameterListOwner) owner).getTypeParameters()[ CD ]
Line_20 $$ PsiDocCommentOwner owner = comment.getOwner()-->Line_27 $$ if (owner instanceof PsiTypeParameterListOwner) [ FD ]
Line_38 $$ String newTag = ordered.get(i)-->Line_44 $$ document.replaceString(range.getStartOffset(), range.getEndOffset(), tagInfoByName.get(newTag).second)[ FD ]
Line_23 $$ for (PsiParameter parameter : parameters) -->Line_30 $$ ordered.add(String.format("<%s>", parameter.getName()))[ FD ]
Line_39 $$ String oldTag = current.get(i)-->Line_43 $$ TextRange range = tagInfoByName.get(oldTag).first[ FD ]
Line_4 $$ Map<String, Pair<TextRange, String>> tagInfoByName = new HashMap<String, Pair<TextRange, String>>()-->Line_44 $$ document.replaceString(range.getStartOffset(), range.getEndOffset(), tagInfoByName.get(newTag).second)[ FD ]
Line_37 $$ for (int i = current.size() - 1; i >= 0; i--) -->Line_38 $$ String newTag = ordered.get(i)[ FD ]
Line_9 $$ PsiDocTagValue valueElement = tag.getValueElement()-->Line_10 $$ if (valueElement == null) [ FD ]
Line_37 $$ for (int i = current.size() - 1; i >= 0; i--) -->Line_43 $$ TextRange range = tagInfoByName.get(oldTag).first[ CD ]
Line_21 $$ if ((owner instanceof PsiMethod)) -->Line_22 $$ PsiParameter[] parameters = ((PsiMethod) owner).getParameterList().getParameters()[ CD ]
Line_4 $$ Map<String, Pair<TextRange, String>> tagInfoByName = new HashMap<String, Pair<TextRange, String>>()-->Line_43 $$ TextRange range = tagInfoByName.get(oldTag).first[ FD ]
Line_38 $$ String newTag = ordered.get(i)-->Line_40 $$ if (newTag.equals(oldTag)) [ FD ]
Line_39 $$ String oldTag = current.get(i)-->Line_40 $$ if (newTag.equals(oldTag)) [ FD ]
Line_36 $$ boolean changed = false-->Line_45 $$ changed = true[ FD ]
Line_33 $$ if (current.size() != ordered.size()) -->Line_34 $$ return[ CD ]
Line_4 $$ Map<String, Pair<TextRange, String>> tagInfoByName = new HashMap<String, Pair<TextRange, String>>()-->Line_16 $$ tagInfoByName.put(paramName, parseTagValue(tag, document))[ FD ]
Line_47 $$ if (changed) -->Line_48 $$ PsiDocumentManager manager = PsiDocumentManager.getInstance(comment.getProject())[ CD ]
Line_47 $$ if (changed) -->Line_49 $$ manager.commitDocument(document)[ CD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_3 $$ List<String> current = new ArrayList<String>()[ CD ]
Line_3 $$ List<String> current = new ArrayList<String>()-->Line_33 $$ if (current.size() != ordered.size()) [ FD ]
Line_2 $$ private static void ensureContentOrdered(@NotNull PsiDocComment comment, @NotNull Document document) -->Line_49 $$ manager.commitDocument(document)[ FD ]
