Line_71 $$ for (Element filterMappingElement : rootElement.elements("filter-mapping")) -->Line_78 $$ for (Element portletNameElement : filterMappingElement.elements("portlet-name")) [ FD ]
Line_89 $$ for (Element listenerElement : rootElement.elements("listener")) -->Line_90 $$ String listenerClass = listenerElement.elementText("listener-class")[ FD ]
Line_14 $$ String name = userAttributeElement.elementText("name")-->Line_15 $$ userAttributes.add(name)[ FD ]
Line_42 $$ for (Element containerRuntimeOptionElement : rootElement.elements("container-runtime-option")) -->Line_45 $$ for (Element valueElement : containerRuntimeOptionElement.elements("value")) [ FD ]
Line_2 $$ private Map<String, Portlet> _readPortletXML(String servletContextName, ServletContext servletContext, String xml, Set<String> servletURLPatterns, PluginPackage pluginPackage) throws Exception -->Line_80 $$ List<Portlet> portletModels = _getPortletsByPortletName(portletName, servletContextName, portletsMap)[ FD ]
Line_65 $$ for (Element initParamElement : filterElement.elements("init-param")) -->Line_66 $$ initParams.put(initParamElement.elementText("name"), initParamElement.elementText("value"))[ FD ]
Line_68 $$ PortletFilter portletFilter = new PortletFilterImpl(filterName, filterClass, lifecycles, initParams, portletApp)-->Line_69 $$ portletApp.addPortletFilter(portletFilter)[ FD ]
Line_8 $$ Element rootElement = document.getRootElement()-->Line_71 $$ for (Element filterMappingElement : rootElement.elements("filter-mapping")) [ FD ]
Line_9 $$ PortletApp portletApp = getPortletApp(servletContextName)-->Line_25 $$ QName qName = PortletQNameUtil.getQName(qNameElement, nameElement, portletApp.getDefaultNamespace())[ FD ]
Line_91 $$ PortletURLListener portletURLListener = new PortletURLListenerImpl(listenerClass, portletApp)-->Line_92 $$ portletApp.addPortletURLListener(portletURLListener)[ FD ]
Line_2 $$ private Map<String, Portlet> _readPortletXML(String servletContextName, ServletContext servletContext, String xml, Set<String> servletURLPatterns, PluginPackage pluginPackage) throws Exception -->Line_11 $$ portletApp.setServletContext(servletContext)[ FD ]
Line_44 $$ List<String> values = new ArrayList()-->Line_49 $$ containerRuntimeOptions.put(name, values.toArray(new String[values.size()]))[ FD ]
Line_9 $$ PortletApp portletApp = getPortletApp(servletContextName)-->Line_38 $$ QName qName = PortletQNameUtil.getQName(qNameElement, nameElement, portletApp.getDefaultNamespace())[ FD ]
Line_9 $$ PortletApp portletApp = getPortletApp(servletContextName)-->Line_19 $$ portletApp.setDefaultNamespace(defaultNamespace)[ FD ]
Line_78 $$ for (Element portletNameElement : filterMappingElement.elements("portlet-name")) -->Line_79 $$ String portletName = portletNameElement.getTextTrim()[ FD ]
Line_22 $$ Element qNameElement = eventDefinitionElement.element("qname")-->Line_38 $$ QName qName = PortletQNameUtil.getQName(qNameElement, nameElement, portletApp.getDefaultNamespace())[ FD ]
Line_8 $$ Element rootElement = document.getRootElement()-->Line_57 $$ for (Element filterElement : rootElement.elements("filter")) [ FD ]
Line_58 $$ String filterName = filterElement.elementText("filter-name")-->Line_85 $$ portletModel.getPortletFilters().put(filterName, portletFilter)[ FD ]
Line_2 $$ private Map<String, Portlet> _readPortletXML(String servletContextName, ServletContext servletContext, String xml, Set<String> servletURLPatterns, PluginPackage pluginPackage) throws Exception -->Line_3 $$ Map<String, Portlet> portletsMap = new HashMap()[ CD ]
Line_29 $$ qName = PortletQNameUtil.getQName(alias, null, portletApp.getDefaultNamespace())-->Line_30 $$ eventDefinition.addAliasQName(qName)[ FD ]
Line_57 $$ for (Element filterElement : rootElement.elements("filter")) -->Line_61 $$ for (Element lifecycleElement : filterElement.elements("lifecycle")) [ FD ]
Line_81 $$ if (portletModels.isEmpty()) -->Line_82 $$ _log.error("Filter mapping with filter name " + filterName + " references unknown portlet name " + portletName)[ CD ]
Line_2 $$ private Map<String, Portlet> _readPortletXML(String servletContextName, ServletContext servletContext, String xml, Set<String> servletURLPatterns, PluginPackage pluginPackage) throws Exception -->Line_55 $$ _readPortletXML(servletContextName, pluginPackage, portletApp, portletElement, portletsMap)[ FD ]
Line_13 $$ for (Element userAttributeElement : rootElement.elements("user-attribute")) -->Line_14 $$ String name = userAttributeElement.elementText("name")[ FD ]
Line_9 $$ PortletApp portletApp = getPortletApp(servletContextName)-->Line_40 $$ portletApp.addPublicRenderParameter(publicRenderParameter)[ FD ]
Line_8 $$ Element rootElement = document.getRootElement()-->Line_21 $$ for (Element eventDefinitionElement : rootElement.elements("event-definition")) [ FD ]
Line_2 $$ private Map<String, Portlet> _readPortletXML(String servletContextName, ServletContext servletContext, String xml, Set<String> servletURLPatterns, PluginPackage pluginPackage) throws Exception -->Line_8 $$ Element rootElement = document.getRootElement()[ CD ]
Line_34 $$ for (Element publicRenderParameterElement : rootElement.elements("public-render-parameter")) -->Line_35 $$ String identifier = publicRenderParameterElement.elementText("identifier")[ FD ]
Line_8 $$ Element rootElement = document.getRootElement()-->Line_54 $$ for (Element portletElement : rootElement.elements("portlet")) [ FD ]
Line_68 $$ PortletFilter portletFilter = new PortletFilterImpl(filterName, filterClass, lifecycles, initParams, portletApp)-->Line_85 $$ portletModel.getPortletFilters().put(filterName, portletFilter)[ FD ]
Line_74 $$ if (portletFilter == null) -->Line_75 $$ _log.error("Filter mapping references unknown filter name " + filterName)[ CD ]
Line_14 $$ String name = userAttributeElement.elementText("name")-->Line_50 $$ if (name.equals(LiferayPortletConfig.RUNTIME_OPTION_PORTAL_CONTEXT) && !values.isEmpty() && GetterUtil.getBoolean(values.get(0))) [ FD ]
Line_84 $$ for (Portlet portletModel : portletModels) -->Line_85 $$ portletModel.getPortletFilters().put(filterName, portletFilter)[ FD ]
Line_9 $$ PortletApp portletApp = getPortletApp(servletContextName)-->Line_73 $$ PortletFilter portletFilter = portletApp.getPortletFilter(filterName)[ FD ]
Line_8 $$ Element rootElement = document.getRootElement()-->Line_17 $$ String defaultNamespace = rootElement.elementText("default-namespace")[ FD ]
Line_9 $$ PortletApp portletApp = getPortletApp(servletContextName)-->Line_12 $$ Set<String> userAttributes = portletApp.getUserAttributes()[ FD ]
Line_2 $$ private Map<String, Portlet> _readPortletXML(String servletContextName, ServletContext servletContext, String xml, Set<String> servletURLPatterns, PluginPackage pluginPackage) throws Exception -->Line_18 $$ if (Validator.isNotNull(defaultNamespace)) [ CD ]
Line_3 $$ Map<String, Portlet> portletsMap = new HashMap()-->Line_80 $$ List<Portlet> portletModels = _getPortletsByPortletName(portletName, servletContextName, portletsMap)[ FD ]
Line_61 $$ for (Element lifecycleElement : filterElement.elements("lifecycle")) -->Line_62 $$ lifecycles.add(lifecycleElement.getText())[ FD ]
Line_23 $$ Element nameElement = eventDefinitionElement.element("name")-->Line_25 $$ QName qName = PortletQNameUtil.getQName(qNameElement, nameElement, portletApp.getDefaultNamespace())[ FD ]
Line_50 $$ if (name.equals(LiferayPortletConfig.RUNTIME_OPTION_PORTAL_CONTEXT) && !values.isEmpty() && GetterUtil.getBoolean(values.get(0))) -->Line_51 $$ portletApp.setWARFile(false)[ CD ]
Line_54 $$ for (Element portletElement : rootElement.elements("portlet")) -->Line_55 $$ _readPortletXML(servletContextName, pluginPackage, portletApp, portletElement, portletsMap)[ FD ]
Line_9 $$ PortletApp portletApp = getPortletApp(servletContextName)-->Line_10 $$ portletApp.addServletURLPatterns(servletURLPatterns)[ FD ]
Line_14 $$ String name = userAttributeElement.elementText("name")-->Line_49 $$ containerRuntimeOptions.put(name, values.toArray(new String[values.size()]))[ FD ]
Line_7 $$ Document document = UnsecureSAXReaderUtil.read(xml, PropsValues.PORTLET_XML_VALIDATE)-->Line_8 $$ Element rootElement = document.getRootElement()[ FD ]
Line_9 $$ PortletApp portletApp = getPortletApp(servletContextName)-->Line_29 $$ qName = PortletQNameUtil.getQName(alias, null, portletApp.getDefaultNamespace())[ FD ]
Line_2 $$ private Map<String, Portlet> _readPortletXML(String servletContextName, ServletContext servletContext, String xml, Set<String> servletURLPatterns, PluginPackage pluginPackage) throws Exception -->Line_9 $$ PortletApp portletApp = getPortletApp(servletContextName)[ FD ]
Line_2 $$ private Map<String, Portlet> _readPortletXML(String servletContextName, ServletContext servletContext, String xml, Set<String> servletURLPatterns, PluginPackage pluginPackage) throws Exception -->Line_94 $$ return portletsMap[ CD ]
Line_48 $$ Map<String, String[]> containerRuntimeOptions = portletApp.getContainerRuntimeOptions()-->Line_49 $$ containerRuntimeOptions.put(name, values.toArray(new String[values.size()]))[ FD ]
Line_71 $$ for (Element filterMappingElement : rootElement.elements("filter-mapping")) -->Line_72 $$ String filterName = filterMappingElement.elementText("filter-name")[ FD ]
Line_28 $$ for (Element alias : aliases) -->Line_29 $$ qName = PortletQNameUtil.getQName(alias, null, portletApp.getDefaultNamespace())[ FD ]
Line_2 $$ private Map<String, Portlet> _readPortletXML(String servletContextName, ServletContext servletContext, String xml, Set<String> servletURLPatterns, PluginPackage pluginPackage) throws Exception -->Line_11 $$ portletApp.setServletContext(servletContext)[ CD ]
Line_2 $$ private Map<String, Portlet> _readPortletXML(String servletContextName, ServletContext servletContext, String xml, Set<String> servletURLPatterns, PluginPackage pluginPackage) throws Exception -->Line_9 $$ PortletApp portletApp = getPortletApp(servletContextName)[ CD ]
Line_68 $$ PortletFilter portletFilter = new PortletFilterImpl(filterName, filterClass, lifecycles, initParams, portletApp)-->Line_74 $$ if (portletFilter == null) [ FD ]
Line_3 $$ Map<String, Portlet> portletsMap = new HashMap()-->Line_55 $$ _readPortletXML(servletContextName, pluginPackage, portletApp, portletElement, portletsMap)[ FD ]
Line_23 $$ Element nameElement = eventDefinitionElement.element("name")-->Line_38 $$ QName qName = PortletQNameUtil.getQName(qNameElement, nameElement, portletApp.getDefaultNamespace())[ FD ]
Line_57 $$ for (Element filterElement : rootElement.elements("filter")) -->Line_65 $$ for (Element initParamElement : filterElement.elements("init-param")) [ FD ]
Line_8 $$ Element rootElement = document.getRootElement()-->Line_42 $$ for (Element containerRuntimeOptionElement : rootElement.elements("container-runtime-option")) [ FD ]
Line_2 $$ private Map<String, Portlet> _readPortletXML(String servletContextName, ServletContext servletContext, String xml, Set<String> servletURLPatterns, PluginPackage pluginPackage) throws Exception -->Line_10 $$ portletApp.addServletURLPatterns(servletURLPatterns)[ FD ]
Line_2 $$ private Map<String, Portlet> _readPortletXML(String servletContextName, ServletContext servletContext, String xml, Set<String> servletURLPatterns, PluginPackage pluginPackage) throws Exception -->Line_7 $$ Document document = UnsecureSAXReaderUtil.read(xml, PropsValues.PORTLET_XML_VALIDATE)[ CD ]
Line_9 $$ PortletApp portletApp = getPortletApp(servletContextName)-->Line_55 $$ _readPortletXML(servletContextName, pluginPackage, portletApp, portletElement, portletsMap)[ FD ]
Line_21 $$ for (Element eventDefinitionElement : rootElement.elements("event-definition")) -->Line_23 $$ Element nameElement = eventDefinitionElement.element("name")[ FD ]
Line_80 $$ List<Portlet> portletModels = _getPortletsByPortletName(portletName, servletContextName, portletsMap)-->Line_81 $$ if (portletModels.isEmpty()) [ FD ]
Line_2 $$ private Map<String, Portlet> _readPortletXML(String servletContextName, ServletContext servletContext, String xml, Set<String> servletURLPatterns, PluginPackage pluginPackage) throws Exception -->Line_4 $$ if (xml == null) [ FD ]
Line_45 $$ for (Element valueElement : containerRuntimeOptionElement.elements("value")) -->Line_46 $$ values.add(valueElement.getTextTrim())[ FD ]
Line_34 $$ for (Element publicRenderParameterElement : rootElement.elements("public-render-parameter")) -->Line_37 $$ Element nameElement = publicRenderParameterElement.element("name")[ FD ]
Line_25 $$ QName qName = PortletQNameUtil.getQName(qNameElement, nameElement, portletApp.getDefaultNamespace())-->Line_29 $$ qName = PortletQNameUtil.getQName(alias, null, portletApp.getDefaultNamespace())[ FD ]
Line_44 $$ List<String> values = new ArrayList()-->Line_50 $$ if (name.equals(LiferayPortletConfig.RUNTIME_OPTION_PORTAL_CONTEXT) && !values.isEmpty() && GetterUtil.getBoolean(values.get(0))) [ FD ]
Line_17 $$ String defaultNamespace = rootElement.elementText("default-namespace")-->Line_18 $$ if (Validator.isNotNull(defaultNamespace)) [ FD ]
Line_26 $$ EventDefinition eventDefinition = new EventDefinitionImpl(qName, valueType, portletApp)-->Line_32 $$ portletApp.addEventDefinition(eventDefinition)[ FD ]
Line_9 $$ PortletApp portletApp = getPortletApp(servletContextName)-->Line_92 $$ portletApp.addPortletURLListener(portletURLListener)[ FD ]
Line_21 $$ for (Element eventDefinitionElement : rootElement.elements("event-definition")) -->Line_24 $$ String valueType = eventDefinitionElement.elementText("value-type")[ FD ]
Line_2 $$ private Map<String, Portlet> _readPortletXML(String servletContextName, ServletContext servletContext, String xml, Set<String> servletURLPatterns, PluginPackage pluginPackage) throws Exception -->Line_4 $$ if (xml == null) [ CD ]
Line_4 $$ if (xml == null) -->Line_5 $$ return portletsMap[ CD ]
Line_60 $$ Set<String> lifecycles = new LinkedHashSet()-->Line_62 $$ lifecycles.add(lifecycleElement.getText())[ FD ]
Line_8 $$ Element rootElement = document.getRootElement()-->Line_13 $$ for (Element userAttributeElement : rootElement.elements("user-attribute")) [ FD ]
Line_9 $$ PortletApp portletApp = getPortletApp(servletContextName)-->Line_48 $$ Map<String, String[]> containerRuntimeOptions = portletApp.getContainerRuntimeOptions()[ FD ]
Line_9 $$ PortletApp portletApp = getPortletApp(servletContextName)-->Line_32 $$ portletApp.addEventDefinition(eventDefinition)[ FD ]
Line_57 $$ for (Element filterElement : rootElement.elements("filter")) -->Line_58 $$ String filterName = filterElement.elementText("filter-name")[ FD ]
Line_39 $$ PublicRenderParameter publicRenderParameter = new PublicRenderParameterImpl(identifier, qName, portletApp)-->Line_40 $$ portletApp.addPublicRenderParameter(publicRenderParameter)[ FD ]
Line_42 $$ for (Element containerRuntimeOptionElement : rootElement.elements("container-runtime-option")) -->Line_43 $$ String name = GetterUtil.getString(containerRuntimeOptionElement.elementText("name"))[ FD ]
Line_2 $$ private Map<String, Portlet> _readPortletXML(String servletContextName, ServletContext servletContext, String xml, Set<String> servletURLPatterns, PluginPackage pluginPackage) throws Exception -->Line_17 $$ String defaultNamespace = rootElement.elementText("default-namespace")[ CD ]
Line_8 $$ Element rootElement = document.getRootElement()-->Line_89 $$ for (Element listenerElement : rootElement.elements("listener")) [ FD ]
Line_2 $$ private Map<String, Portlet> _readPortletXML(String servletContextName, ServletContext servletContext, String xml, Set<String> servletURLPatterns, PluginPackage pluginPackage) throws Exception -->Line_12 $$ Set<String> userAttributes = portletApp.getUserAttributes()[ CD ]
Line_18 $$ if (Validator.isNotNull(defaultNamespace)) -->Line_19 $$ portletApp.setDefaultNamespace(defaultNamespace)[ CD ]
Line_34 $$ for (Element publicRenderParameterElement : rootElement.elements("public-render-parameter")) -->Line_36 $$ Element qNameElement = publicRenderParameterElement.element("qname")[ FD ]
Line_21 $$ for (Element eventDefinitionElement : rootElement.elements("event-definition")) -->Line_27 $$ List<Element> aliases = eventDefinitionElement.elements("alias")[ FD ]
Line_17 $$ String defaultNamespace = rootElement.elementText("default-namespace")-->Line_19 $$ portletApp.setDefaultNamespace(defaultNamespace)[ FD ]
Line_25 $$ QName qName = PortletQNameUtil.getQName(qNameElement, nameElement, portletApp.getDefaultNamespace())-->Line_30 $$ eventDefinition.addAliasQName(qName)[ FD ]
Line_79 $$ String portletName = portletNameElement.getTextTrim()-->Line_80 $$ List<Portlet> portletModels = _getPortletsByPortletName(portletName, servletContextName, portletsMap)[ FD ]
Line_9 $$ PortletApp portletApp = getPortletApp(servletContextName)-->Line_69 $$ portletApp.addPortletFilter(portletFilter)[ FD ]
Line_9 $$ PortletApp portletApp = getPortletApp(servletContextName)-->Line_11 $$ portletApp.setServletContext(servletContext)[ FD ]
Line_58 $$ String filterName = filterElement.elementText("filter-name")-->Line_73 $$ PortletFilter portletFilter = portletApp.getPortletFilter(filterName)[ FD ]
Line_2 $$ private Map<String, Portlet> _readPortletXML(String servletContextName, ServletContext servletContext, String xml, Set<String> servletURLPatterns, PluginPackage pluginPackage) throws Exception -->Line_7 $$ Document document = UnsecureSAXReaderUtil.read(xml, PropsValues.PORTLET_XML_VALIDATE)[ FD ]
Line_2 $$ private Map<String, Portlet> _readPortletXML(String servletContextName, ServletContext servletContext, String xml, Set<String> servletURLPatterns, PluginPackage pluginPackage) throws Exception -->Line_10 $$ portletApp.addServletURLPatterns(servletURLPatterns)[ CD ]
Line_57 $$ for (Element filterElement : rootElement.elements("filter")) -->Line_59 $$ String filterClass = filterElement.elementText("filter-class")[ FD ]
Line_8 $$ Element rootElement = document.getRootElement()-->Line_34 $$ for (Element publicRenderParameterElement : rootElement.elements("public-render-parameter")) [ FD ]
Line_44 $$ List<String> values = new ArrayList()-->Line_46 $$ values.add(valueElement.getTextTrim())[ FD ]
Line_21 $$ for (Element eventDefinitionElement : rootElement.elements("event-definition")) -->Line_22 $$ Element qNameElement = eventDefinitionElement.element("qname")[ FD ]
Line_64 $$ Map<String, String> initParams = new HashMap()-->Line_66 $$ initParams.put(initParamElement.elementText("name"), initParamElement.elementText("value"))[ FD ]
Line_22 $$ Element qNameElement = eventDefinitionElement.element("qname")-->Line_25 $$ QName qName = PortletQNameUtil.getQName(qNameElement, nameElement, portletApp.getDefaultNamespace())[ FD ]
Line_9 $$ PortletApp portletApp = getPortletApp(servletContextName)-->Line_51 $$ portletApp.setWARFile(false)[ FD ]
Line_12 $$ Set<String> userAttributes = portletApp.getUserAttributes()-->Line_15 $$ userAttributes.add(name)[ FD ]
Line_26 $$ EventDefinition eventDefinition = new EventDefinitionImpl(qName, valueType, portletApp)-->Line_30 $$ eventDefinition.addAliasQName(qName)[ FD ]
