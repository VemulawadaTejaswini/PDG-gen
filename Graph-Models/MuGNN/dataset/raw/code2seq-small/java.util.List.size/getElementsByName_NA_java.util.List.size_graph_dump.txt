Line_11 $$ List<T> list = new ArrayList<T>(classes.size())-->Line_14 $$ list.add(aClass)[ FD ]
Line_4 $$ List<T> classes = myTreeClassChooserDialog.getClassesByName(name, parameters.isSearchInLibraries(), patternName, myTreeClassChooserDialog.getScope())-->Line_5 $$ if (classes.size() == 0)[ FD ]
Line_2 $$ public Object[] getElementsByName(String name, FindSymbolParameters parameters, @NotNull ProgressIndicator canceled) -->Line_4 $$ List<T> classes = myTreeClassChooserDialog.getClassesByName(name, parameters.isSearchInLibraries(), patternName, myTreeClassChooserDialog.getScope())[ CD ]
Line_2 $$ public Object[] getElementsByName(String name, FindSymbolParameters parameters, @NotNull ProgressIndicator canceled) -->Line_3 $$ String patternName = parameters.getLocalPatternName()[ FD ]
Line_4 $$ List<T> classes = myTreeClassChooserDialog.getClassesByName(name, parameters.isSearchInLibraries(), patternName, myTreeClassChooserDialog.getScope())-->Line_11 $$ List<T> list = new ArrayList<T>(classes.size())[ FD ]
Line_2 $$ public Object[] getElementsByName(String name, FindSymbolParameters parameters, @NotNull ProgressIndicator canceled) -->Line_5 $$ if (classes.size() == 0)[ CD ]
Line_11 $$ List<T> list = new ArrayList<T>(classes.size())-->Line_17 $$ return ArrayUtil.toObjectArray(list)[ FD ]
Line_12 $$ for (T aClass : classes) -->Line_14 $$ list.add(aClass)[ FD ]
Line_4 $$ List<T> classes = myTreeClassChooserDialog.getClassesByName(name, parameters.isSearchInLibraries(), patternName, myTreeClassChooserDialog.getScope())-->Line_8 $$ return isAccepted(classes.get(0)) ? ArrayUtil.toObjectArray(classes) : ArrayUtil.EMPTY_OBJECT_ARRAY[ FD ]
Line_2 $$ public Object[] getElementsByName(String name, FindSymbolParameters parameters, @NotNull ProgressIndicator canceled) -->Line_11 $$ List<T> list = new ArrayList<T>(classes.size())[ CD ]
Line_2 $$ public Object[] getElementsByName(String name, FindSymbolParameters parameters, @NotNull ProgressIndicator canceled) -->Line_7 $$ if (classes.size() == 1) [ CD ]
Line_2 $$ public Object[] getElementsByName(String name, FindSymbolParameters parameters, @NotNull ProgressIndicator canceled) -->Line_4 $$ List<T> classes = myTreeClassChooserDialog.getClassesByName(name, parameters.isSearchInLibraries(), patternName, myTreeClassChooserDialog.getScope())[ FD ]
Line_10 $$ Set<String> qNames = ContainerUtil.newHashSet()-->Line_13 $$ if (qNames.add(getFullName(aClass)) && isAccepted(aClass)) [ FD ]
Line_2 $$ public Object[] getElementsByName(String name, FindSymbolParameters parameters, @NotNull ProgressIndicator canceled) -->Line_10 $$ Set<String> qNames = ContainerUtil.newHashSet()[ CD ]
Line_2 $$ public Object[] getElementsByName(String name, FindSymbolParameters parameters, @NotNull ProgressIndicator canceled) -->Line_3 $$ String patternName = parameters.getLocalPatternName()[ CD ]
Line_13 $$ if (qNames.add(getFullName(aClass)) && isAccepted(aClass)) -->Line_14 $$ list.add(aClass)[ CD ]
Line_5 $$ if (classes.size() == 0)-->Line_6 $$ return ArrayUtil.EMPTY_OBJECT_ARRAY[ CD ]
Line_7 $$ if (classes.size() == 1) -->Line_8 $$ return isAccepted(classes.get(0)) ? ArrayUtil.toObjectArray(classes) : ArrayUtil.EMPTY_OBJECT_ARRAY[ CD ]
Line_2 $$ public Object[] getElementsByName(String name, FindSymbolParameters parameters, @NotNull ProgressIndicator canceled) -->Line_17 $$ return ArrayUtil.toObjectArray(list)[ CD ]
Line_12 $$ for (T aClass : classes) -->Line_13 $$ if (qNames.add(getFullName(aClass)) && isAccepted(aClass)) [ FD ]
Line_4 $$ List<T> classes = myTreeClassChooserDialog.getClassesByName(name, parameters.isSearchInLibraries(), patternName, myTreeClassChooserDialog.getScope())-->Line_7 $$ if (classes.size() == 1) [ FD ]
Line_3 $$ String patternName = parameters.getLocalPatternName()-->Line_4 $$ List<T> classes = myTreeClassChooserDialog.getClassesByName(name, parameters.isSearchInLibraries(), patternName, myTreeClassChooserDialog.getScope())[ FD ]
