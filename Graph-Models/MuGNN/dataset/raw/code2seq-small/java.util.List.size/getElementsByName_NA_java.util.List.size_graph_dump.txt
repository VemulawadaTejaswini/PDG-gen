Line_5 $$ String patternName = parameters.getLocalPatternName()-->Line_6 $$ List<T> classes = myTreeClassChooserDialog.getClassesByName(name, parameters.isSearchInLibraries(), patternName, myTreeClassChooserDialog.getScope())[ FD ]
Line_6 $$ List<T> classes = myTreeClassChooserDialog.getClassesByName(name, parameters.isSearchInLibraries(), patternName, myTreeClassChooserDialog.getScope())-->Line_10 $$ return isAccepted(classes.get(0)) ? ArrayUtil.toObjectArray(classes) : ArrayUtil.EMPTY_OBJECT_ARRAY[ FD ]
Line_14 $$ for (T aClass : classes) -->Line_15 $$ if (qNames.add(getFullName(aClass)) && isAccepted(aClass)) [ FD ]
Line_6 $$ List<T> classes = myTreeClassChooserDialog.getClassesByName(name, parameters.isSearchInLibraries(), patternName, myTreeClassChooserDialog.getScope())-->Line_13 $$ List<T> list = new ArrayList<T>(classes.size())[ FD ]
Line_13 $$ List<T> list = new ArrayList<T>(classes.size())-->Line_16 $$ list.add(aClass)[ FD ]
Line_12 $$ Set<String> qNames = ContainerUtil.newHashSet()-->Line_15 $$ if (qNames.add(getFullName(aClass)) && isAccepted(aClass)) [ FD ]
Line_15 $$ if (qNames.add(getFullName(aClass)) && isAccepted(aClass)) -->Line_16 $$ list.add(aClass)[ CD ]
Line_14 $$ for (T aClass : classes) -->Line_16 $$ list.add(aClass)[ FD ]
Line_6 $$ List<T> classes = myTreeClassChooserDialog.getClassesByName(name, parameters.isSearchInLibraries(), patternName, myTreeClassChooserDialog.getScope())-->Line_7 $$ if (classes.size() == 0)[ FD ]
Line_6 $$ List<T> classes = myTreeClassChooserDialog.getClassesByName(name, parameters.isSearchInLibraries(), patternName, myTreeClassChooserDialog.getScope())-->Line_9 $$ if (classes.size() == 1) [ FD ]
Line_9 $$ if (classes.size() == 1) -->Line_10 $$ return isAccepted(classes.get(0)) ? ArrayUtil.toObjectArray(classes) : ArrayUtil.EMPTY_OBJECT_ARRAY[ CD ]
Line_13 $$ List<T> list = new ArrayList<T>(classes.size())-->Line_19 $$ return ArrayUtil.toObjectArray(list)[ FD ]
Line_7 $$ if (classes.size() == 0)-->Line_8 $$ return ArrayUtil.EMPTY_OBJECT_ARRAY[ CD ]
