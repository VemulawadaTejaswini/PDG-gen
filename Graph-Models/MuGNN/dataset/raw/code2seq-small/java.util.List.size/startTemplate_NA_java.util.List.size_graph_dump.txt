Line_16 $$ final Substring substring-->Line_26 $$ builder.replaceRange(substring.getTextRange(), getDefaultType(getParamToEdit()))[ FD ]
Line_6 $$ final TemplateBuilder builder = TemplateBuilderFactory.getInstance().createTemplateBuilder(docStringExpression)-->Line_26 $$ builder.replaceRange(substring.getTextRange(), getDefaultType(getParamToEdit()))[ FD ]
Line_31 $$ final Project project = myDocStringOwner.getProject()-->Line_35 $$ TemplateManager.getInstance(project).startTemplate(targetEditor, template)[ FD ]
Line_4 $$ final PyStringLiteralExpression docStringExpression = getDocStringExpression()-->Line_32 $$ OpenFileDescriptor descriptor = new OpenFileDescriptor(project, virtualFile, docStringExpression.getTextOffset())[ FD ]
Line_2 $$ public void startTemplate() -->Line_32 $$ OpenFileDescriptor descriptor = new OpenFileDescriptor(project, virtualFile, docStringExpression.getTextOffset())[ CD ]
Line_2 $$ public void startTemplate() -->Line_23 $$ if (substring == null) [ CD ]
Line_15 $$ final StructuredDocString parsed = DocStringUtil.parseDocString(format, docStringExpression)-->Line_21 $$ substring = parsed.getParamTypeSubstring(paramName)[ FD ]
Line_4 $$ final PyStringLiteralExpression docStringExpression = getDocStringExpression()-->Line_6 $$ final TemplateBuilder builder = TemplateBuilderFactory.getInstance().createTemplateBuilder(docStringExpression)[ FD ]
Line_2 $$ public void startTemplate() -->Line_34 $$ if (targetEditor != null) [ CD ]
Line_33 $$ Editor targetEditor = FileEditorManager.getInstance(project).openTextEditor(descriptor, true)-->Line_34 $$ if (targetEditor != null) [ FD ]
Line_12 $$ if (format == DocStringFormat.PLAIN) -->Line_13 $$ return[ CD ]
Line_21 $$ substring = parsed.getParamTypeSubstring(paramName)-->Line_23 $$ if (substring == null) [ FD ]
Line_2 $$ public void startTemplate() -->Line_26 $$ builder.replaceRange(substring.getTextRange(), getDefaultType(getParamToEdit()))[ CD ]
Line_28 $$ final VirtualFile virtualFile = myDocStringOwner.getContainingFile().getVirtualFile()-->Line_29 $$ if (virtualFile == null)[ FD ]
Line_2 $$ public void startTemplate() -->Line_17 $$ if (paramToEdit.isReturnValue()) [ CD ]
Line_2 $$ public void startTemplate() -->Line_29 $$ if (virtualFile == null)[ CD ]
Line_17 $$ if (paramToEdit.isReturnValue()) -->Line_18 $$ substring = parsed.getReturnTypeSubstring()[ CD ]
Line_15 $$ final StructuredDocString parsed = DocStringUtil.parseDocString(format, docStringExpression)-->Line_18 $$ substring = parsed.getReturnTypeSubstring()[ FD ]
Line_11 $$ final DocStringFormat format = myDocStringFormat-->Line_15 $$ final StructuredDocString parsed = DocStringUtil.parseDocString(format, docStringExpression)[ FD ]
Line_2 $$ public void startTemplate() -->Line_33 $$ Editor targetEditor = FileEditorManager.getInstance(project).openTextEditor(descriptor, true)[ CD ]
Line_2 $$ public void startTemplate() -->Line_31 $$ final Project project = myDocStringOwner.getProject()[ CD ]
Line_11 $$ final DocStringFormat format = myDocStringFormat-->Line_12 $$ if (format == DocStringFormat.PLAIN) [ FD ]
Line_18 $$ substring = parsed.getReturnTypeSubstring()-->Line_23 $$ if (substring == null) [ FD ]
Line_2 $$ public void startTemplate() -->Line_28 $$ final VirtualFile virtualFile = myDocStringOwner.getContainingFile().getVirtualFile()[ CD ]
Line_21 $$ substring = parsed.getParamTypeSubstring(paramName)-->Line_26 $$ builder.replaceRange(substring.getTextRange(), getDefaultType(getParamToEdit()))[ FD ]
Line_2 $$ public void startTemplate() -->Line_11 $$ final DocStringFormat format = myDocStringFormat[ CD ]
Line_2 $$ public void startTemplate() -->Line_3 $$ Preconditions.checkNotNull(myDocStringOwner, "For this action docstring owner must be supplied")[ CD ]
Line_18 $$ substring = parsed.getReturnTypeSubstring()-->Line_21 $$ substring = parsed.getParamTypeSubstring(paramName)[ FD ]
Line_2 $$ public void startTemplate() -->Line_15 $$ final StructuredDocString parsed = DocStringUtil.parseDocString(format, docStringExpression)[ CD ]
Line_17 $$ if (paramToEdit.isReturnValue()) -->Line_21 $$ substring = parsed.getParamTypeSubstring(paramName)[ CD ]
Line_23 $$ if (substring == null) -->Line_24 $$ return[ CD ]
Line_2 $$ public void startTemplate() -->Line_7 $$ if (myAddedParams.size() > 1) [ CD ]
Line_10 $$ final DocstringParam paramToEdit = getParamToEdit()-->Line_17 $$ if (paramToEdit.isReturnValue()) [ FD ]
Line_32 $$ OpenFileDescriptor descriptor = new OpenFileDescriptor(project, virtualFile, docStringExpression.getTextOffset())-->Line_33 $$ Editor targetEditor = FileEditorManager.getInstance(project).openTextEditor(descriptor, true)[ FD ]
Line_4 $$ final PyStringLiteralExpression docStringExpression = getDocStringExpression()-->Line_15 $$ final StructuredDocString parsed = DocStringUtil.parseDocString(format, docStringExpression)[ FD ]
Line_2 $$ public void startTemplate() -->Line_12 $$ if (format == DocStringFormat.PLAIN) [ CD ]
Line_16 $$ final Substring substring-->Line_21 $$ substring = parsed.getParamTypeSubstring(paramName)[ FD ]
Line_2 $$ public void startTemplate() -->Line_6 $$ final TemplateBuilder builder = TemplateBuilderFactory.getInstance().createTemplateBuilder(docStringExpression)[ CD ]
Line_2 $$ public void startTemplate() -->Line_4 $$ final PyStringLiteralExpression docStringExpression = getDocStringExpression()[ CD ]
Line_17 $$ if (paramToEdit.isReturnValue()) -->Line_20 $$ final String paramName = paramToEdit.getName()[ CD ]
Line_34 $$ if (targetEditor != null) -->Line_35 $$ TemplateManager.getInstance(project).startTemplate(targetEditor, template)[ CD ]
Line_16 $$ final Substring substring-->Line_18 $$ substring = parsed.getReturnTypeSubstring()[ FD ]
Line_2 $$ public void startTemplate() -->Line_10 $$ final DocstringParam paramToEdit = getParamToEdit()[ CD ]
Line_10 $$ final DocstringParam paramToEdit = getParamToEdit()-->Line_20 $$ final String paramName = paramToEdit.getName()[ FD ]
Line_18 $$ substring = parsed.getReturnTypeSubstring()-->Line_26 $$ builder.replaceRange(substring.getTextRange(), getDefaultType(getParamToEdit()))[ FD ]
Line_33 $$ Editor targetEditor = FileEditorManager.getInstance(project).openTextEditor(descriptor, true)-->Line_35 $$ TemplateManager.getInstance(project).startTemplate(targetEditor, template)[ FD ]
Line_2 $$ public void startTemplate() -->Line_27 $$ Template template = ((TemplateBuilderImpl) builder).buildInlineTemplate()[ CD ]
Line_27 $$ Template template = ((TemplateBuilderImpl) builder).buildInlineTemplate()-->Line_35 $$ TemplateManager.getInstance(project).startTemplate(targetEditor, template)[ FD ]
Line_31 $$ final Project project = myDocStringOwner.getProject()-->Line_33 $$ Editor targetEditor = FileEditorManager.getInstance(project).openTextEditor(descriptor, true)[ FD ]
Line_29 $$ if (virtualFile == null)-->Line_30 $$ return[ CD ]
Line_20 $$ final String paramName = paramToEdit.getName()-->Line_21 $$ substring = parsed.getParamTypeSubstring(paramName)[ FD ]
Line_16 $$ final Substring substring-->Line_23 $$ if (substring == null) [ FD ]
Line_2 $$ public void startTemplate() -->Line_16 $$ final Substring substring[ CD ]
