Line_4 $$ Session session = openSession()-->Line_11 $$ session.save(person)[ FD ]
Line_6 $$ Person person = new Person()-->Line_11 $$ session.save(person)[ FD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_11 $$ session.save(person)[ CD ]
Line_19 $$ final List results = new ArrayList()-->Line_36 $$ assertEquals(2, results.size())[ FD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_43 $$ assertTrue(Hibernate.isInitialized(workPerson.nickNames))[ CD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_16 $$ final LoadQueryDetails queryDetails = Helper.INSTANCE.buildLoadQueryDetails(plan, sessionFactory())[ CD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_45 $$ assertEquals(person.nickNames, workPerson.nickNames)[ CD ]
Line_18 $$ final ResultSetProcessor resultSetProcessor = queryDetails.getResultSetProcessor()-->Line_27 $$ results.addAll(resultSetProcessor.extractResults(resultSet, (SessionImplementor) workSession, new QueryParameters(), new NamedParameterContext() [ FD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_20 $$ final Session workSession = openSession()[ CD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_51 $$ session.delete(person)[ CD ]
Line_24 $$ PreparedStatement ps = connection.prepareStatement(sql)-->Line_25 $$ ps.setInt(1, 1)[ FD ]
Line_4 $$ Session session = openSession()-->Line_52 $$ session.getTransaction().commit()[ FD ]
Line_15 $$ final LoadPlan plan = Helper.INSTANCE.buildLoadPlan(sessionFactory(), entityPersister)-->Line_16 $$ final LoadQueryDetails queryDetails = Helper.INSTANCE.buildLoadQueryDetails(plan, sessionFactory())[ FD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_39 $$ assertNotNull(result1)[ CD ]
Line_22 $$ workSession.doWork(new Work() -->Line_27 $$ results.addAll(resultSetProcessor.extractResults(resultSet, (SessionImplementor) workSession, new QueryParameters(), new NamedParameterContext() [ CD ]
Line_22 $$ workSession.doWork(new Work() -->Line_32 $$ resultSet.close()[ CD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_5 $$ session.beginTransaction()[ CD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_15 $$ final LoadPlan plan = Helper.INSTANCE.buildLoadPlan(sessionFactory(), entityPersister)[ CD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_9 $$ person.nickNames.add("Jack")[ CD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_44 $$ assertEquals(2, workPerson.nickNames.size())[ CD ]
Line_20 $$ final Session workSession = openSession()-->Line_22 $$ workSession.doWork(new Work() [ FD ]
Line_22 $$ workSession.doWork(new Work() -->Line_33 $$ ps.close()[ CD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_12 $$ session.getTransaction().commit()[ CD ]
Line_4 $$ Session session = openSession()-->Line_51 $$ session.delete(person)[ FD ]
Line_20 $$ final Session workSession = openSession()-->Line_21 $$ workSession.beginTransaction()[ FD ]
Line_27 $$ results.addAll(resultSetProcessor.extractResults(resultSet, (SessionImplementor) workSession, new QueryParameters(), new NamedParameterContext() -->Line_29 $$ return new int[0][ CD ]
Line_22 $$ workSession.doWork(new Work() -->Line_24 $$ PreparedStatement ps = connection.prepareStatement(sql)[ CD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_13 $$ session.close()[ CD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_50 $$ session.beginTransaction()[ CD ]
Line_19 $$ final List results = new ArrayList()-->Line_27 $$ results.addAll(resultSetProcessor.extractResults(resultSet, (SessionImplementor) workSession, new QueryParameters(), new NamedParameterContext() [ FD ]
Line_6 $$ Person person = new Person()-->Line_51 $$ session.delete(person)[ FD ]
Line_16 $$ final LoadQueryDetails queryDetails = Helper.INSTANCE.buildLoadQueryDetails(plan, sessionFactory())-->Line_18 $$ final ResultSetProcessor resultSetProcessor = queryDetails.getResultSetProcessor()[ FD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_53 $$ session.close()[ CD ]
Line_20 $$ final Session workSession = openSession()-->Line_46 $$ workSession.getTransaction().commit()[ FD ]
Line_26 $$ ResultSet resultSet = ps.executeQuery()-->Line_32 $$ resultSet.close()[ FD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_40 $$ Person workPerson = ExtraAssertions.assertTyping(Person.class, result1)[ CD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_18 $$ final ResultSetProcessor resultSetProcessor = queryDetails.getResultSetProcessor()[ CD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_4 $$ Session session = openSession()[ CD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_3 $$ final EntityPersister entityPersister = sessionFactory().getEntityPersister(Person.class.getName())[ CD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_17 $$ final String sql = queryDetails.getSqlStatement()[ CD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_10 $$ person.nickNames.add("Johnny")[ CD ]
Line_22 $$ workSession.doWork(new Work() -->Line_26 $$ ResultSet resultSet = ps.executeQuery()[ CD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_42 $$ assertEquals(person.name, workPerson.name)[ CD ]
Line_4 $$ Session session = openSession()-->Line_13 $$ session.close()[ FD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_47 $$ workSession.close()[ CD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_37 $$ Object result1 = results.get(0)[ CD ]
Line_20 $$ final Session workSession = openSession()-->Line_47 $$ workSession.close()[ FD ]
Line_4 $$ Session session = openSession()-->Line_50 $$ session.beginTransaction()[ FD ]
Line_3 $$ final EntityPersister entityPersister = sessionFactory().getEntityPersister(Person.class.getName())-->Line_15 $$ final LoadPlan plan = Helper.INSTANCE.buildLoadPlan(sessionFactory(), entityPersister)[ FD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_19 $$ final List results = new ArrayList()[ CD ]
Line_24 $$ PreparedStatement ps = connection.prepareStatement(sql)-->Line_26 $$ ResultSet resultSet = ps.executeQuery()[ FD ]
Line_4 $$ Session session = openSession()-->Line_5 $$ session.beginTransaction()[ FD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_49 $$ session = openSession()[ CD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_22 $$ workSession.doWork(new Work() [ CD ]
Line_17 $$ final String sql = queryDetails.getSqlStatement()-->Line_24 $$ PreparedStatement ps = connection.prepareStatement(sql)[ FD ]
Line_19 $$ final List results = new ArrayList()-->Line_38 $$ assertSame(result1, results.get(1))[ FD ]
Line_26 $$ ResultSet resultSet = ps.executeQuery()-->Line_27 $$ results.addAll(resultSetProcessor.extractResults(resultSet, (SessionImplementor) workSession, new QueryParameters(), new NamedParameterContext() [ FD ]
Line_19 $$ final List results = new ArrayList()-->Line_37 $$ Object result1 = results.get(0)[ FD ]
Line_4 $$ Session session = openSession()-->Line_53 $$ session.close()[ FD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_7 $$ person.id = 1[ CD ]
Line_4 $$ Session session = openSession()-->Line_12 $$ session.getTransaction().commit()[ FD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_8 $$ person.name = "John Doe"[ CD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_21 $$ workSession.beginTransaction()[ CD ]
Line_16 $$ final LoadQueryDetails queryDetails = Helper.INSTANCE.buildLoadQueryDetails(plan, sessionFactory())-->Line_17 $$ final String sql = queryDetails.getSqlStatement()[ FD ]
Line_22 $$ workSession.doWork(new Work() -->Line_24 $$ PreparedStatement ps = connection.prepareStatement(sql)[ FD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_6 $$ Person person = new Person()[ CD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_36 $$ assertEquals(2, results.size())[ CD ]
Line_24 $$ PreparedStatement ps = connection.prepareStatement(sql)-->Line_33 $$ ps.close()[ FD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_46 $$ workSession.getTransaction().commit()[ CD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_41 $$ assertEquals(1, workPerson.id.intValue())[ CD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_52 $$ session.getTransaction().commit()[ CD ]
Line_2 $$ public void testEntityWithSet() throws Exception -->Line_38 $$ assertSame(result1, results.get(1))[ CD ]
Line_22 $$ workSession.doWork(new Work() -->Line_25 $$ ps.setInt(1, 1)[ CD ]
