Line_8 $$ Map<Path, Path> pathMap = _nettyRepository.pathMap-->Line_9 $$ pathMap.put(remoteFilePath, cachedLocalFilePath)[ FD ]
Line_7 $$ Path cachedLocalFilePath = Paths.get("cacheLocalFile")-->Line_25 $$ Assert.assertSame(cachedLocalFilePath, noticeableFuture.get())[ FD ]
Line_14 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_16 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_16 $$ LogRecord logRecord = logRecords.get(0)-->Line_18 $$ logRecord = logRecords.get(1)[ FD ]
Line_16 $$ LogRecord logRecord = logRecords.get(0)-->Line_17 $$ Assert.assertEquals("Fetching remote file " + remoteFilePath, logRecord.getMessage())[ FD ]
Line_10 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyRepository.class.getName(), Level.FINEST)) -->Line_26 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_16 $$ LogRecord logRecord = logRecords.get(0)-->Line_19 $$ Assert.assertEquals("Remote file " + remoteFilePath + " is not modified, use cached local file " + cachedLocalFilePath, logRecord.getMessage())[ FD ]
Line_18 $$ logRecord = logRecords.get(1)-->Line_19 $$ Assert.assertEquals("Remote file " + remoteFilePath + " is not modified, use cached local file " + cachedLocalFilePath, logRecord.getMessage())[ FD ]
Line_14 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_27 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_11 $$ NoticeableFuture<Path> noticeableFuture = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, Paths.get("localFile"), false, false)-->Line_25 $$ Assert.assertSame(cachedLocalFilePath, noticeableFuture.get())[ FD ]
Line_14 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_15 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_7 $$ Path cachedLocalFilePath = Paths.get("cacheLocalFile")-->Line_9 $$ pathMap.put(remoteFilePath, cachedLocalFilePath)[ FD ]
Line_10 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyRepository.class.getName(), Level.FINEST)) -->Line_14 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_7 $$ Path cachedLocalFilePath = Paths.get("cacheLocalFile")-->Line_13 $$ Assert.assertSame(cachedLocalFilePath, noticeableFuture.get())[ FD ]
Line_14 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_18 $$ logRecord = logRecords.get(1)[ FD ]
Line_11 $$ NoticeableFuture<Path> noticeableFuture = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, Paths.get("localFile"), false, false)-->Line_13 $$ Assert.assertSame(cachedLocalFilePath, noticeableFuture.get())[ FD ]
