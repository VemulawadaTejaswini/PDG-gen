Line_14 $$ BaseListPopupStep<Module> step = new BaseListPopupStep<Module>("Which module to use classpath of?", modules, PlatformIcons.CONTENT_ROOT_ICON_CLOSED) -->Line_34 $$ PropertiesComponent.getInstance(selectedValue.getProject()).setValue(GROOVY_LAST_MODULE, selectedValue.getName())[ FD ]
Line_2 $$ public static void selectModule(@NotNull Project project, final Collection<Module> suitableModules, final Function<Module, String> versionProvider, final Consumer<Module> callback, @Nullable DataContext context) -->Line_3 $$ final List<Module> modules = new ArrayList<Module>()[ CD ]
Line_2 $$ public static void selectModule(@NotNull Project project, final Collection<Module> suitableModules, final Function<Module, String> versionProvider, final Consumer<Module> callback, @Nullable DataContext context) -->Line_39 $$ final String lastModuleName = PropertiesComponent.getInstance(project).getValue(GROOVY_LAST_MODULE)[ CD ]
Line_4 $$ final Map<Module, String> versions = new HashMap<Module, String>()-->Line_7 $$ versions.put(module, versionProvider.fun(module))[ FD ]
Line_2 $$ public static void selectModule(@NotNull Project project, final Collection<Module> suitableModules, final Function<Module, String> versionProvider, final Consumer<Module> callback, @Nullable DataContext context) -->Line_10 $$ callback.consume(modules.get(0))[ FD ]
Line_14 $$ BaseListPopupStep<Module> step = new BaseListPopupStep<Module>("Which module to use classpath of?", modules, PlatformIcons.CONTENT_ROOT_ICON_CLOSED) -->Line_29 $$ return true[ CD ]
Line_14 $$ BaseListPopupStep<Module> step = new BaseListPopupStep<Module>("Which module to use classpath of?", modules, PlatformIcons.CONTENT_ROOT_ICON_CLOSED) -->Line_24 $$ return value.getName()[ CD ]
Line_14 $$ BaseListPopupStep<Module> step = new BaseListPopupStep<Module>("Which module to use classpath of?", modules, PlatformIcons.CONTENT_ROOT_ICON_CLOSED) -->Line_35 $$ callback.consume(selectedValue)[ FD ]
Line_53 $$ if (context == null) -->Line_56 $$ listPopup.showInBestPositionFor(context)[ CD ]
Line_14 $$ BaseListPopupStep<Module> step = new BaseListPopupStep<Module>("Which module to use classpath of?", modules, PlatformIcons.CONTENT_ROOT_ICON_CLOSED) -->Line_52 $$ final ListPopup listPopup = JBPopupFactory.getInstance().createListPopup(step)[ FD ]
Line_3 $$ final List<Module> modules = new ArrayList<Module>()-->Line_6 $$ modules.add(module)[ FD ]
Line_2 $$ public static void selectModule(@NotNull Project project, final Collection<Module> suitableModules, final Function<Module, String> versionProvider, final Consumer<Module> callback, @Nullable DataContext context) -->Line_14 $$ BaseListPopupStep<Module> step = new BaseListPopupStep<Module>("Which module to use classpath of?", modules, PlatformIcons.CONTENT_ROOT_ICON_CLOSED) [ CD ]
Line_3 $$ final List<Module> modules = new ArrayList<Module>()-->Line_9 $$ if (modules.size() == 1) [ FD ]
Line_2 $$ public static void selectModule(@NotNull Project project, final Collection<Module> suitableModules, final Function<Module, String> versionProvider, final Consumer<Module> callback, @Nullable DataContext context) -->Line_35 $$ callback.consume(selectedValue)[ FD ]
Line_2 $$ public static void selectModule(@NotNull Project project, final Collection<Module> suitableModules, final Function<Module, String> versionProvider, final Consumer<Module> callback, @Nullable DataContext context) -->Line_40 $$ if (lastModuleName != null) [ CD ]
Line_14 $$ BaseListPopupStep<Module> step = new BaseListPopupStep<Module>("Which module to use classpath of?", modules, PlatformIcons.CONTENT_ROOT_ICON_CLOSED) -->Line_49 $$ step.setDefaultOptionIndex(defaultOption)[ FD ]
Line_9 $$ if (modules.size() == 1) -->Line_10 $$ callback.consume(modules.get(0))[ CD ]
Line_3 $$ final List<Module> modules = new ArrayList<Module>()-->Line_41 $$ int defaultOption = ContainerUtil.indexOf(modules, new Condition<Module>() [ FD ]
Line_3 $$ final List<Module> modules = new ArrayList<Module>()-->Line_13 $$ Collections.sort(modules, ModulesAlphaComparator.INSTANCE)[ FD ]
Line_2 $$ public static void selectModule(@NotNull Project project, final Collection<Module> suitableModules, final Function<Module, String> versionProvider, final Consumer<Module> callback, @Nullable DataContext context) -->Line_39 $$ final String lastModuleName = PropertiesComponent.getInstance(project).getValue(GROOVY_LAST_MODULE)[ FD ]
Line_2 $$ public static void selectModule(@NotNull Project project, final Collection<Module> suitableModules, final Function<Module, String> versionProvider, final Consumer<Module> callback, @Nullable DataContext context) -->Line_53 $$ if (context == null) [ CD ]
Line_48 $$ if (defaultOption >= 0) -->Line_49 $$ step.setDefaultOptionIndex(defaultOption)[ CD ]
Line_4 $$ final Map<Module, String> versions = new HashMap<Module, String>()-->Line_19 $$ return String.format("%s (%s)", value.getName(), versions.get(value))[ FD ]
Line_2 $$ public static void selectModule(@NotNull Project project, final Collection<Module> suitableModules, final Function<Module, String> versionProvider, final Consumer<Module> callback, @Nullable DataContext context) -->Line_13 $$ Collections.sort(modules, ModulesAlphaComparator.INSTANCE)[ CD ]
Line_2 $$ public static void selectModule(@NotNull Project project, final Collection<Module> suitableModules, final Function<Module, String> versionProvider, final Consumer<Module> callback, @Nullable DataContext context) -->Line_52 $$ final ListPopup listPopup = JBPopupFactory.getInstance().createListPopup(step)[ CD ]
Line_5 $$ for (Module module : suitableModules) -->Line_45 $$ return module.getName().equals(lastModuleName)[ FD ]
Line_2 $$ public static void selectModule(@NotNull Project project, final Collection<Module> suitableModules, final Function<Module, String> versionProvider, final Consumer<Module> callback, @Nullable DataContext context) -->Line_9 $$ if (modules.size() == 1) [ CD ]
Line_3 $$ final List<Module> modules = new ArrayList<Module>()-->Line_10 $$ callback.consume(modules.get(0))[ FD ]
Line_41 $$ int defaultOption = ContainerUtil.indexOf(modules, new Condition<Module>() -->Line_45 $$ return module.getName().equals(lastModuleName)[ FD ]
Line_14 $$ BaseListPopupStep<Module> step = new BaseListPopupStep<Module>("Which module to use classpath of?", modules, PlatformIcons.CONTENT_ROOT_ICON_CLOSED) -->Line_19 $$ return String.format("%s (%s)", value.getName(), versions.get(value))[ FD ]
Line_2 $$ public static void selectModule(@NotNull Project project, final Collection<Module> suitableModules, final Function<Module, String> versionProvider, final Consumer<Module> callback, @Nullable DataContext context) -->Line_56 $$ listPopup.showInBestPositionFor(context)[ FD ]
Line_14 $$ BaseListPopupStep<Module> step = new BaseListPopupStep<Module>("Which module to use classpath of?", modules, PlatformIcons.CONTENT_ROOT_ICON_CLOSED) -->Line_34 $$ PropertiesComponent.getInstance(selectedValue.getProject()).setValue(GROOVY_LAST_MODULE, selectedValue.getName())[ CD ]
Line_40 $$ if (lastModuleName != null) -->Line_48 $$ if (defaultOption >= 0) [ CD ]
Line_53 $$ if (context == null) -->Line_54 $$ listPopup.showCenteredInCurrentWindow(project)[ CD ]
Line_14 $$ BaseListPopupStep<Module> step = new BaseListPopupStep<Module>("Which module to use classpath of?", modules, PlatformIcons.CONTENT_ROOT_ICON_CLOSED) -->Line_35 $$ callback.consume(selectedValue)[ CD ]
Line_5 $$ for (Module module : suitableModules) -->Line_7 $$ versions.put(module, versionProvider.fun(module))[ FD ]
Line_14 $$ BaseListPopupStep<Module> step = new BaseListPopupStep<Module>("Which module to use classpath of?", modules, PlatformIcons.CONTENT_ROOT_ICON_CLOSED) -->Line_19 $$ return String.format("%s (%s)", value.getName(), versions.get(value))[ CD ]
Line_9 $$ if (modules.size() == 1) -->Line_11 $$ return[ CD ]
Line_5 $$ for (Module module : suitableModules) -->Line_6 $$ modules.add(module)[ FD ]
Line_14 $$ BaseListPopupStep<Module> step = new BaseListPopupStep<Module>("Which module to use classpath of?", modules, PlatformIcons.CONTENT_ROOT_ICON_CLOSED) -->Line_36 $$ return null[ CD ]
Line_2 $$ public static void selectModule(@NotNull Project project, final Collection<Module> suitableModules, final Function<Module, String> versionProvider, final Consumer<Module> callback, @Nullable DataContext context) -->Line_7 $$ versions.put(module, versionProvider.fun(module))[ FD ]
Line_41 $$ int defaultOption = ContainerUtil.indexOf(modules, new Condition<Module>() -->Line_45 $$ return module.getName().equals(lastModuleName)[ CD ]
Line_2 $$ public static void selectModule(@NotNull Project project, final Collection<Module> suitableModules, final Function<Module, String> versionProvider, final Consumer<Module> callback, @Nullable DataContext context) -->Line_4 $$ final Map<Module, String> versions = new HashMap<Module, String>()[ CD ]
Line_14 $$ BaseListPopupStep<Module> step = new BaseListPopupStep<Module>("Which module to use classpath of?", modules, PlatformIcons.CONTENT_ROOT_ICON_CLOSED) -->Line_24 $$ return value.getName()[ FD ]
Line_2 $$ public static void selectModule(@NotNull Project project, final Collection<Module> suitableModules, final Function<Module, String> versionProvider, final Consumer<Module> callback, @Nullable DataContext context) -->Line_53 $$ if (context == null) [ FD ]
Line_40 $$ if (lastModuleName != null) -->Line_41 $$ int defaultOption = ContainerUtil.indexOf(modules, new Condition<Module>() [ CD ]
Line_2 $$ public static void selectModule(@NotNull Project project, final Collection<Module> suitableModules, final Function<Module, String> versionProvider, final Consumer<Module> callback, @Nullable DataContext context) -->Line_54 $$ listPopup.showCenteredInCurrentWindow(project)[ FD ]
