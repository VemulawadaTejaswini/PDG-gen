Line_2 $$ protected List<Object> selectTasksList(@NotNull String response, int max) throws Exception -->Line_3 $$ Document document = new SAXBuilder(false).build(new StringReader(response))[ CD ]
Line_2 $$ protected List<Object> selectTasksList(@NotNull String response, int max) throws Exception -->Line_4 $$ Element root = document.getRootElement()[ CD ]
Line_3 $$ Document document = new SAXBuilder(false).build(new StringReader(response))-->Line_4 $$ Element root = document.getRootElement()[ FD ]
Line_5 $$ XPath xPath = lazyCompile(getSelector(TASKS).getPath())-->Line_6 $$ List<Object> rawTaskElements = xPath.selectNodes(root)[ FD ]
Line_5 $$ XPath xPath = lazyCompile(getSelector(TASKS).getPath())-->Line_8 $$ throw new Exception(String.format("Expression '%s' should match list of XML elements. Got '%s' instead.", xPath.getXPath(), rawTaskElements.toString()))[ FD ]
Line_2 $$ protected List<Object> selectTasksList(@NotNull String response, int max) throws Exception -->Line_10 $$ return rawTaskElements.subList(0, Math.min(rawTaskElements.size(), max))[ FD ]
Line_4 $$ Element root = document.getRootElement()-->Line_6 $$ List<Object> rawTaskElements = xPath.selectNodes(root)[ FD ]
Line_2 $$ protected List<Object> selectTasksList(@NotNull String response, int max) throws Exception -->Line_6 $$ List<Object> rawTaskElements = xPath.selectNodes(root)[ CD ]
Line_2 $$ protected List<Object> selectTasksList(@NotNull String response, int max) throws Exception -->Line_5 $$ XPath xPath = lazyCompile(getSelector(TASKS).getPath())[ CD ]
Line_6 $$ List<Object> rawTaskElements = xPath.selectNodes(root)-->Line_7 $$ if (!rawTaskElements.isEmpty() && !(rawTaskElements.get(0) instanceof Element)) [ FD ]
Line_6 $$ List<Object> rawTaskElements = xPath.selectNodes(root)-->Line_8 $$ throw new Exception(String.format("Expression '%s' should match list of XML elements. Got '%s' instead.", xPath.getXPath(), rawTaskElements.toString()))[ FD ]
Line_2 $$ protected List<Object> selectTasksList(@NotNull String response, int max) throws Exception -->Line_10 $$ return rawTaskElements.subList(0, Math.min(rawTaskElements.size(), max))[ CD ]
Line_6 $$ List<Object> rawTaskElements = xPath.selectNodes(root)-->Line_10 $$ return rawTaskElements.subList(0, Math.min(rawTaskElements.size(), max))[ FD ]
Line_2 $$ protected List<Object> selectTasksList(@NotNull String response, int max) throws Exception -->Line_7 $$ if (!rawTaskElements.isEmpty() && !(rawTaskElements.get(0) instanceof Element)) [ CD ]
