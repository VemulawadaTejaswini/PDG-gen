Line_27 $$ String wsadminFileName = FileUtil.createTempFileName("py")-->Line_41 $$ commands.add(wsadminFileName)[ FD ]
Line_53 $$ Process process = processBuilder.start()-->Line_61 $$ int exitValue = process.exitValue()[ FD ]
Line_4 $$ if (Validator.isNull(PropsValues.AUTO_DEPLOY_WEBSPHERE_WSADMIN_APP_MANAGER_QUERY)) -->Line_5 $$ if (_log.isInfoEnabled()) [ CD ]
Line_30 $$ List<String> commands = new ArrayList()-->Line_34 $$ commands.add(webSphereHome + "/bin/wsadmin.sh")[ FD ]
Line_42 $$ if (_log.isInfoEnabled()) -->Line_49 $$ _log.info(sb.toString())[ CD ]
Line_62 $$ if (exitValue == 0) -->Line_63 $$ _log.info("Successfully executed command with an exit value of " + exitValue)[ CD ]
Line_30 $$ List<String> commands = new ArrayList()-->Line_43 $$ StringBundler sb = new StringBundler(commands.size() + 1)[ FD ]
Line_23 $$ if (Validator.isNotNull(PropsValues.AUTO_DEPLOY_WEBSPHERE_WSADMIN_APP_NAME_SUFFIX)) -->Line_24 $$ pluginApplicationName += PropsValues.AUTO_DEPLOY_WEBSPHERE_WSADMIN_APP_NAME_SUFFIX[ CD ]
Line_30 $$ List<String> commands = new ArrayList()-->Line_38 $$ commands.add(PropsValues.AUTO_DEPLOY_WEBSPHERE_WSADMIN_PROPERTIES_FILE)[ FD ]
Line_31 $$ if (OSDetector.isWindows()) -->Line_32 $$ commands.add(webSphereHome + "\\bin\\wsadmin.bat")[ CD ]
Line_51 $$ ProcessBuilder processBuilder = new ProcessBuilder(commands)-->Line_52 $$ processBuilder.redirectErrorStream(true)[ FD ]
Line_54 $$ if (_log.isInfoEnabled()) -->Line_55 $$ InputStream inputStream = process.getInputStream()[ CD ]
Line_26 $$ wsadminContent = StringUtil.replace(wsadminContent, new String[] -->Line_28 $$ FileUtil.write(wsadminFileName, wsadminContent)[ FD ]
Line_16 $$ String adminAppListOptions = PropsValues.AUTO_DEPLOY_WEBSPHERE_WSADMIN_APP_MANAGER_LIST_OPTIONS-->Line_17 $$ if (Validator.isNotNull(adminAppListOptions)) [ FD ]
Line_6 $$ StringBundler sb = new StringBundler()-->Line_9 $$ sb.append(PropsKeys.AUTO_DEPLOY_WEBSPHERE_WSADMIN_APP_MANAGER_QUERY)[ FD ]
Line_31 $$ if (OSDetector.isWindows()) -->Line_34 $$ commands.add(webSphereHome + "/bin/wsadmin.sh")[ CD ]
Line_54 $$ if (_log.isInfoEnabled()) -->Line_56 $$ String output = StringUtil.read(inputStream)[ CD ]
Line_5 $$ if (_log.isInfoEnabled()) -->Line_7 $$ sb.append("Do not install the plugin with wsadmin since the ")[ CD ]
Line_6 $$ StringBundler sb = new StringBundler()-->Line_44 $$ sb.append("Installing plugin by executing")[ FD ]
Line_5 $$ if (_log.isInfoEnabled()) -->Line_11 $$ _log.info(sb.toString())[ CD ]
Line_20 $$ wsadminContent = StringUtil.replace(wsadminContent, new String[] -->Line_26 $$ wsadminContent = StringUtil.replace(wsadminContent, new String[] [ FD ]
Line_15 $$ String wsadminContent = FileUtil.read(DeployUtil.getResourcePath("wsadmin.py"))-->Line_26 $$ wsadminContent = StringUtil.replace(wsadminContent, new String[] [ FD ]
Line_20 $$ wsadminContent = StringUtil.replace(wsadminContent, new String[] -->Line_28 $$ FileUtil.write(wsadminFileName, wsadminContent)[ FD ]
Line_27 $$ String wsadminFileName = FileUtil.createTempFileName("py")-->Line_71 $$ FileUtil.delete(wsadminFileName)[ FD ]
Line_5 $$ if (_log.isInfoEnabled()) -->Line_9 $$ sb.append(PropsKeys.AUTO_DEPLOY_WEBSPHERE_WSADMIN_APP_MANAGER_QUERY)[ CD ]
Line_53 $$ Process process = processBuilder.start()-->Line_55 $$ InputStream inputStream = process.getInputStream()[ FD ]
Line_5 $$ if (_log.isInfoEnabled()) -->Line_6 $$ StringBundler sb = new StringBundler()[ CD ]
Line_30 $$ List<String> commands = new ArrayList()-->Line_40 $$ commands.add("-f")[ FD ]
Line_22 $$ String pluginApplicationName = pluginServletContextName-->Line_24 $$ pluginApplicationName += PropsValues.AUTO_DEPLOY_WEBSPHERE_WSADMIN_APP_NAME_SUFFIX[ FD ]
Line_36 $$ if (Validator.isNotNull(PropsValues.AUTO_DEPLOY_WEBSPHERE_WSADMIN_PROPERTIES_FILE)) -->Line_37 $$ commands.add("-p")[ CD ]
Line_30 $$ List<String> commands = new ArrayList()-->Line_32 $$ commands.add(webSphereHome + "\\bin\\wsadmin.bat")[ FD ]
Line_15 $$ String wsadminContent = FileUtil.read(DeployUtil.getResourcePath("wsadmin.py"))-->Line_28 $$ FileUtil.write(wsadminFileName, wsadminContent)[ FD ]
Line_30 $$ List<String> commands = new ArrayList()-->Line_41 $$ commands.add(wsadminFileName)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler()-->Line_49 $$ _log.info(sb.toString())[ FD ]
Line_6 $$ StringBundler sb = new StringBundler()-->Line_10 $$ sb.append("\"is not configured")[ FD ]
Line_5 $$ if (_log.isInfoEnabled()) -->Line_10 $$ sb.append("\"is not configured")[ CD ]
Line_42 $$ if (_log.isInfoEnabled()) -->Line_44 $$ sb.append("Installing plugin by executing")[ CD ]
Line_45 $$ for (String command : commands) -->Line_47 $$ sb.append(command)[ FD ]
Line_15 $$ String wsadminContent = FileUtil.read(DeployUtil.getResourcePath("wsadmin.py"))-->Line_20 $$ wsadminContent = StringUtil.replace(wsadminContent, new String[] [ FD ]
Line_30 $$ List<String> commands = new ArrayList()-->Line_37 $$ commands.add("-p")[ FD ]
Line_6 $$ StringBundler sb = new StringBundler()-->Line_46 $$ sb.append(StringPool.SPACE)[ FD ]
Line_4 $$ if (Validator.isNull(PropsValues.AUTO_DEPLOY_WEBSPHERE_WSADMIN_APP_MANAGER_QUERY)) -->Line_13 $$ return[ CD ]
Line_62 $$ if (exitValue == 0) -->Line_65 $$ _log.info("Unsuccessfully executed command with an exit value " + "of " + exitValue)[ CD ]
Line_6 $$ StringBundler sb = new StringBundler()-->Line_11 $$ _log.info(sb.toString())[ FD ]
Line_51 $$ ProcessBuilder processBuilder = new ProcessBuilder(commands)-->Line_53 $$ Process process = processBuilder.start()[ FD ]
Line_16 $$ String adminAppListOptions = PropsValues.AUTO_DEPLOY_WEBSPHERE_WSADMIN_APP_MANAGER_LIST_OPTIONS-->Line_18 $$ adminAppListOptions = StringPool.APOSTROPHE + adminAppListOptions + StringPool.APOSTROPHE[ FD ]
Line_56 $$ String output = StringUtil.read(inputStream)-->Line_57 $$ for (String line : StringUtil.split(output, CharPool.NEW_LINE)) [ FD ]
Line_36 $$ if (Validator.isNotNull(PropsValues.AUTO_DEPLOY_WEBSPHERE_WSADMIN_PROPERTIES_FILE)) -->Line_38 $$ commands.add(PropsValues.AUTO_DEPLOY_WEBSPHERE_WSADMIN_PROPERTIES_FILE)[ CD ]
Line_17 $$ if (Validator.isNotNull(adminAppListOptions)) -->Line_18 $$ adminAppListOptions = StringPool.APOSTROPHE + adminAppListOptions + StringPool.APOSTROPHE[ CD ]
Line_6 $$ StringBundler sb = new StringBundler()-->Line_7 $$ sb.append("Do not install the plugin with wsadmin since the ")[ FD ]
Line_5 $$ if (_log.isInfoEnabled()) -->Line_8 $$ sb.append("property \"")[ CD ]
Line_6 $$ StringBundler sb = new StringBundler()-->Line_47 $$ sb.append(command)[ FD ]
Line_61 $$ int exitValue = process.exitValue()-->Line_62 $$ if (exitValue == 0) [ FD ]
Line_27 $$ String wsadminFileName = FileUtil.createTempFileName("py")-->Line_28 $$ FileUtil.write(wsadminFileName, wsadminContent)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler()-->Line_8 $$ sb.append("property \"")[ FD ]
Line_55 $$ InputStream inputStream = process.getInputStream()-->Line_56 $$ String output = StringUtil.read(inputStream)[ FD ]
