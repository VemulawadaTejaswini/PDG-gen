Line_4 $$ if (_log.isInfoEnabled()) -->Line_10 $$ _log.info(sb.toString())[ CD ]
Line_29 $$ List<String> commands = new ArrayList()-->Line_36 $$ commands.add("-p")[ FD ]
Line_19 $$ wsadminContent = StringUtil.replace(wsadminContent, new String[] -->Line_27 $$ FileUtil.write(wsadminFileName, wsadminContent)[ FD ]
Line_2 $$ public void postDeploy(String destDir, String deployDir) throws Exception -->Line_27 $$ FileUtil.write(wsadminFileName, wsadminContent)[ CD ]
Line_2 $$ public void postDeploy(String destDir, String deployDir) throws Exception -->Line_50 $$ ProcessBuilder processBuilder = new ProcessBuilder(commands)[ CD ]
Line_50 $$ ProcessBuilder processBuilder = new ProcessBuilder(commands)-->Line_51 $$ processBuilder.redirectErrorStream(true)[ FD ]
Line_5 $$ StringBundler sb = new StringBundler()-->Line_8 $$ sb.append(PropsKeys.AUTO_DEPLOY_WEBSPHERE_WSADMIN_APP_MANAGER_QUERY)[ FD ]
Line_5 $$ StringBundler sb = new StringBundler()-->Line_10 $$ _log.info(sb.toString())[ FD ]
Line_35 $$ if (Validator.isNotNull(PropsValues.AUTO_DEPLOY_WEBSPHERE_WSADMIN_PROPERTIES_FILE)) -->Line_37 $$ commands.add(PropsValues.AUTO_DEPLOY_WEBSPHERE_WSADMIN_PROPERTIES_FILE)[ CD ]
Line_2 $$ public void postDeploy(String destDir, String deployDir) throws Exception -->Line_26 $$ String wsadminFileName = FileUtil.createTempFileName("py")[ CD ]
Line_52 $$ Process process = processBuilder.start()-->Line_54 $$ InputStream inputStream = process.getInputStream()[ FD ]
Line_2 $$ public void postDeploy(String destDir, String deployDir) throws Exception -->Line_29 $$ List<String> commands = new ArrayList()[ CD ]
Line_26 $$ String wsadminFileName = FileUtil.createTempFileName("py")-->Line_70 $$ FileUtil.delete(wsadminFileName)[ FD ]
Line_2 $$ public void postDeploy(String destDir, String deployDir) throws Exception -->Line_22 $$ if (Validator.isNotNull(PropsValues.AUTO_DEPLOY_WEBSPHERE_WSADMIN_APP_NAME_SUFFIX)) [ CD ]
Line_14 $$ String wsadminContent = FileUtil.read(DeployUtil.getResourcePath("wsadmin.py"))-->Line_25 $$ wsadminContent = StringUtil.replace(wsadminContent, new String[] [ FD ]
Line_14 $$ String wsadminContent = FileUtil.read(DeployUtil.getResourcePath("wsadmin.py"))-->Line_19 $$ wsadminContent = StringUtil.replace(wsadminContent, new String[] [ FD ]
Line_54 $$ InputStream inputStream = process.getInputStream()-->Line_55 $$ String output = StringUtil.read(inputStream)[ FD ]
Line_5 $$ StringBundler sb = new StringBundler()-->Line_9 $$ sb.append("\"is not configured")[ FD ]
Line_2 $$ public void postDeploy(String destDir, String deployDir) throws Exception -->Line_52 $$ Process process = processBuilder.start()[ CD ]
Line_2 $$ public void postDeploy(String destDir, String deployDir) throws Exception -->Line_51 $$ processBuilder.redirectErrorStream(true)[ CD ]
Line_41 $$ if (_log.isInfoEnabled()) -->Line_48 $$ _log.info(sb.toString())[ CD ]
Line_4 $$ if (_log.isInfoEnabled()) -->Line_5 $$ StringBundler sb = new StringBundler()[ CD ]
Line_41 $$ if (_log.isInfoEnabled()) -->Line_43 $$ sb.append("Installing plugin by executing")[ CD ]
Line_2 $$ public void postDeploy(String destDir, String deployDir) throws Exception -->Line_28 $$ String webSphereHome = System.getenv("WAS_HOME")[ CD ]
Line_53 $$ if (_log.isInfoEnabled()) -->Line_54 $$ InputStream inputStream = process.getInputStream()[ CD ]
Line_2 $$ public void postDeploy(String destDir, String deployDir) throws Exception -->Line_20 $$ String pluginServletContextName = deployDir.substring(0, deployDir.length() - 4)[ FD ]
Line_2 $$ public void postDeploy(String destDir, String deployDir) throws Exception -->Line_21 $$ String pluginApplicationName = pluginServletContextName[ CD ]
Line_3 $$ if (Validator.isNull(PropsValues.AUTO_DEPLOY_WEBSPHERE_WSADMIN_APP_MANAGER_QUERY)) -->Line_12 $$ return[ CD ]
Line_53 $$ if (_log.isInfoEnabled()) -->Line_55 $$ String output = StringUtil.read(inputStream)[ CD ]
Line_29 $$ List<String> commands = new ArrayList()-->Line_39 $$ commands.add("-f")[ FD ]
Line_19 $$ wsadminContent = StringUtil.replace(wsadminContent, new String[] -->Line_25 $$ wsadminContent = StringUtil.replace(wsadminContent, new String[] [ FD ]
Line_14 $$ String wsadminContent = FileUtil.read(DeployUtil.getResourcePath("wsadmin.py"))-->Line_27 $$ FileUtil.write(wsadminFileName, wsadminContent)[ FD ]
Line_5 $$ StringBundler sb = new StringBundler()-->Line_7 $$ sb.append("property \"")[ FD ]
Line_5 $$ StringBundler sb = new StringBundler()-->Line_46 $$ sb.append(command)[ FD ]
Line_2 $$ public void postDeploy(String destDir, String deployDir) throws Exception -->Line_41 $$ if (_log.isInfoEnabled()) [ CD ]
Line_15 $$ String adminAppListOptions = PropsValues.AUTO_DEPLOY_WEBSPHERE_WSADMIN_APP_MANAGER_LIST_OPTIONS-->Line_16 $$ if (Validator.isNotNull(adminAppListOptions)) [ FD ]
Line_29 $$ List<String> commands = new ArrayList()-->Line_31 $$ commands.add(webSphereHome + "\\bin\\wsadmin.bat")[ FD ]
Line_22 $$ if (Validator.isNotNull(PropsValues.AUTO_DEPLOY_WEBSPHERE_WSADMIN_APP_NAME_SUFFIX)) -->Line_23 $$ pluginApplicationName += PropsValues.AUTO_DEPLOY_WEBSPHERE_WSADMIN_APP_NAME_SUFFIX[ CD ]
Line_4 $$ if (_log.isInfoEnabled()) -->Line_7 $$ sb.append("property \"")[ CD ]
Line_2 $$ public void postDeploy(String destDir, String deployDir) throws Exception -->Line_15 $$ String adminAppListOptions = PropsValues.AUTO_DEPLOY_WEBSPHERE_WSADMIN_APP_MANAGER_LIST_OPTIONS[ CD ]
Line_4 $$ if (_log.isInfoEnabled()) -->Line_8 $$ sb.append(PropsKeys.AUTO_DEPLOY_WEBSPHERE_WSADMIN_APP_MANAGER_QUERY)[ CD ]
Line_30 $$ if (OSDetector.isWindows()) -->Line_33 $$ commands.add(webSphereHome + "/bin/wsadmin.sh")[ CD ]
Line_52 $$ Process process = processBuilder.start()-->Line_60 $$ int exitValue = process.exitValue()[ FD ]
Line_26 $$ String wsadminFileName = FileUtil.createTempFileName("py")-->Line_27 $$ FileUtil.write(wsadminFileName, wsadminContent)[ FD ]
Line_29 $$ List<String> commands = new ArrayList()-->Line_42 $$ StringBundler sb = new StringBundler(commands.size() + 1)[ FD ]
Line_2 $$ public void postDeploy(String destDir, String deployDir) throws Exception -->Line_30 $$ if (OSDetector.isWindows()) [ CD ]
Line_2 $$ public void postDeploy(String destDir, String deployDir) throws Exception -->Line_35 $$ if (Validator.isNotNull(PropsValues.AUTO_DEPLOY_WEBSPHERE_WSADMIN_PROPERTIES_FILE)) [ CD ]
Line_29 $$ List<String> commands = new ArrayList()-->Line_33 $$ commands.add(webSphereHome + "/bin/wsadmin.sh")[ FD ]
Line_2 $$ public void postDeploy(String destDir, String deployDir) throws Exception -->Line_19 $$ wsadminContent = StringUtil.replace(wsadminContent, new String[] [ CD ]
Line_29 $$ List<String> commands = new ArrayList()-->Line_40 $$ commands.add(wsadminFileName)[ FD ]
Line_5 $$ StringBundler sb = new StringBundler()-->Line_43 $$ sb.append("Installing plugin by executing")[ FD ]
Line_5 $$ StringBundler sb = new StringBundler()-->Line_45 $$ sb.append(StringPool.SPACE)[ FD ]
Line_2 $$ public void postDeploy(String destDir, String deployDir) throws Exception -->Line_53 $$ if (_log.isInfoEnabled()) [ CD ]
Line_2 $$ public void postDeploy(String destDir, String deployDir) throws Exception -->Line_40 $$ commands.add(wsadminFileName)[ CD ]
Line_4 $$ if (_log.isInfoEnabled()) -->Line_9 $$ sb.append("\"is not configured")[ CD ]
Line_25 $$ wsadminContent = StringUtil.replace(wsadminContent, new String[] -->Line_27 $$ FileUtil.write(wsadminFileName, wsadminContent)[ FD ]
Line_2 $$ public void postDeploy(String destDir, String deployDir) throws Exception -->Line_3 $$ if (Validator.isNull(PropsValues.AUTO_DEPLOY_WEBSPHERE_WSADMIN_APP_MANAGER_QUERY)) [ CD ]
Line_5 $$ StringBundler sb = new StringBundler()-->Line_48 $$ _log.info(sb.toString())[ FD ]
Line_21 $$ String pluginApplicationName = pluginServletContextName-->Line_23 $$ pluginApplicationName += PropsValues.AUTO_DEPLOY_WEBSPHERE_WSADMIN_APP_NAME_SUFFIX[ FD ]
Line_2 $$ public void postDeploy(String destDir, String deployDir) throws Exception -->Line_16 $$ if (Validator.isNotNull(adminAppListOptions)) [ CD ]
Line_2 $$ public void postDeploy(String destDir, String deployDir) throws Exception -->Line_14 $$ String wsadminContent = FileUtil.read(DeployUtil.getResourcePath("wsadmin.py"))[ CD ]
Line_26 $$ String wsadminFileName = FileUtil.createTempFileName("py")-->Line_40 $$ commands.add(wsadminFileName)[ FD ]
Line_44 $$ for (String command : commands) -->Line_46 $$ sb.append(command)[ FD ]
Line_2 $$ public void postDeploy(String destDir, String deployDir) throws Exception -->Line_39 $$ commands.add("-f")[ CD ]
Line_61 $$ if (exitValue == 0) -->Line_62 $$ _log.info("Successfully executed command with an exit value of " + exitValue)[ CD ]
Line_2 $$ public void postDeploy(String destDir, String deployDir) throws Exception -->Line_70 $$ FileUtil.delete(wsadminFileName)[ CD ]
Line_50 $$ ProcessBuilder processBuilder = new ProcessBuilder(commands)-->Line_52 $$ Process process = processBuilder.start()[ FD ]
Line_60 $$ int exitValue = process.exitValue()-->Line_61 $$ if (exitValue == 0) [ FD ]
Line_55 $$ String output = StringUtil.read(inputStream)-->Line_56 $$ for (String line : StringUtil.split(output, CharPool.NEW_LINE)) [ FD ]
Line_15 $$ String adminAppListOptions = PropsValues.AUTO_DEPLOY_WEBSPHERE_WSADMIN_APP_MANAGER_LIST_OPTIONS-->Line_17 $$ adminAppListOptions = StringPool.APOSTROPHE + adminAppListOptions + StringPool.APOSTROPHE[ FD ]
Line_2 $$ public void postDeploy(String destDir, String deployDir) throws Exception -->Line_20 $$ String pluginServletContextName = deployDir.substring(0, deployDir.length() - 4)[ CD ]
Line_30 $$ if (OSDetector.isWindows()) -->Line_31 $$ commands.add(webSphereHome + "\\bin\\wsadmin.bat")[ CD ]
Line_4 $$ if (_log.isInfoEnabled()) -->Line_6 $$ sb.append("Do not install the plugin with wsadmin since the ")[ CD ]
Line_29 $$ List<String> commands = new ArrayList()-->Line_37 $$ commands.add(PropsValues.AUTO_DEPLOY_WEBSPHERE_WSADMIN_PROPERTIES_FILE)[ FD ]
Line_5 $$ StringBundler sb = new StringBundler()-->Line_6 $$ sb.append("Do not install the plugin with wsadmin since the ")[ FD ]
Line_35 $$ if (Validator.isNotNull(PropsValues.AUTO_DEPLOY_WEBSPHERE_WSADMIN_PROPERTIES_FILE)) -->Line_36 $$ commands.add("-p")[ CD ]
Line_3 $$ if (Validator.isNull(PropsValues.AUTO_DEPLOY_WEBSPHERE_WSADMIN_APP_MANAGER_QUERY)) -->Line_4 $$ if (_log.isInfoEnabled()) [ CD ]
Line_2 $$ public void postDeploy(String destDir, String deployDir) throws Exception -->Line_25 $$ wsadminContent = StringUtil.replace(wsadminContent, new String[] [ CD ]
Line_16 $$ if (Validator.isNotNull(adminAppListOptions)) -->Line_17 $$ adminAppListOptions = StringPool.APOSTROPHE + adminAppListOptions + StringPool.APOSTROPHE[ CD ]
Line_61 $$ if (exitValue == 0) -->Line_64 $$ _log.info("Unsuccessfully executed command with an exit value " + "of " + exitValue)[ CD ]
