Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_51 $$ session.beginTransaction()[ CD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_3 $$ final EntityPersister entityPersister = sessionFactory().getEntityPersister(Message.class.getName())[ CD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_9 $$ session.save(poster)[ CD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_44 $$ assertEquals(2, workPoster.pid.intValue())[ CD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_5 $$ session.beginTransaction()[ CD ]
Line_19 $$ final List results = new ArrayList()-->Line_36 $$ assertEquals(1, results.size())[ FD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_7 $$ Poster poster = new Poster(2, "the poster")[ CD ]
Line_27 $$ results.addAll(resultSetProcessor.extractResults(resultSet, (SessionImplementor) workSession, new QueryParameters(), new NamedParameterContext() -->Line_29 $$ return new int[0][ CD ]
Line_22 $$ workSession.doWork(new Work() -->Line_26 $$ ResultSet resultSet = ps.executeQuery()[ CD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_20 $$ final Session workSession = openSession()[ CD ]
Line_4 $$ Session session = openSession()-->Line_54 $$ session.getTransaction().commit()[ FD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_6 $$ Message message = new Message(1, "the message")[ CD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_16 $$ final LoadQueryDetails queryDetails = Helper.INSTANCE.buildLoadQueryDetails(plan, sessionFactory())[ CD ]
Line_4 $$ Session session = openSession()-->Line_12 $$ session.getTransaction().commit()[ FD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_15 $$ final LoadPlan plan = Helper.INSTANCE.buildLoadPlan(sessionFactory(), entityPersister)[ CD ]
Line_16 $$ final LoadQueryDetails queryDetails = Helper.INSTANCE.buildLoadQueryDetails(plan, sessionFactory())-->Line_17 $$ final String sql = queryDetails.getSqlStatement()[ FD ]
Line_20 $$ final Session workSession = openSession()-->Line_48 $$ workSession.close()[ FD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_41 $$ assertEquals("the message", workMessage.msgTxt)[ CD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_38 $$ assertNotNull(result)[ CD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_37 $$ Object result = results.get(0)[ CD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_52 $$ session.createQuery("delete Message").executeUpdate()[ CD ]
Line_4 $$ Session session = openSession()-->Line_8 $$ session.save(message)[ FD ]
Line_4 $$ Session session = openSession()-->Line_55 $$ session.close()[ FD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_8 $$ session.save(message)[ CD ]
Line_22 $$ workSession.doWork(new Work() -->Line_27 $$ results.addAll(resultSetProcessor.extractResults(resultSet, (SessionImplementor) workSession, new QueryParameters(), new NamedParameterContext() [ CD ]
Line_22 $$ workSession.doWork(new Work() -->Line_32 $$ resultSet.close()[ CD ]
Line_20 $$ final Session workSession = openSession()-->Line_22 $$ workSession.doWork(new Work() [ FD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_22 $$ workSession.doWork(new Work() [ CD ]
Line_19 $$ final List results = new ArrayList()-->Line_37 $$ Object result = results.get(0)[ FD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_11 $$ poster.messages.add(message)[ CD ]
Line_4 $$ Session session = openSession()-->Line_13 $$ session.close()[ FD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_47 $$ workSession.getTransaction().commit()[ CD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_13 $$ session.close()[ CD ]
Line_7 $$ Poster poster = new Poster(2, "the poster")-->Line_9 $$ session.save(poster)[ FD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_4 $$ Session session = openSession()[ CD ]
Line_6 $$ Message message = new Message(1, "the message")-->Line_11 $$ poster.messages.add(message)[ FD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_55 $$ session.close()[ CD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_48 $$ workSession.close()[ CD ]
Line_4 $$ Session session = openSession()-->Line_51 $$ session.beginTransaction()[ FD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_18 $$ final ResultSetProcessor resultSetProcessor = queryDetails.getResultSetProcessor()[ CD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_42 $$ assertTrue(Hibernate.isInitialized(workMessage.poster))[ CD ]
Line_22 $$ workSession.doWork(new Work() -->Line_25 $$ ps.setInt(1, 1)[ CD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_19 $$ final List results = new ArrayList()[ CD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_50 $$ session = openSession()[ CD ]
Line_6 $$ Message message = new Message(1, "the message")-->Line_8 $$ session.save(message)[ FD ]
Line_15 $$ final LoadPlan plan = Helper.INSTANCE.buildLoadPlan(sessionFactory(), entityPersister)-->Line_16 $$ final LoadQueryDetails queryDetails = Helper.INSTANCE.buildLoadQueryDetails(plan, sessionFactory())[ FD ]
Line_3 $$ final EntityPersister entityPersister = sessionFactory().getEntityPersister(Message.class.getName())-->Line_15 $$ final LoadPlan plan = Helper.INSTANCE.buildLoadPlan(sessionFactory(), entityPersister)[ FD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_39 $$ Message workMessage = ExtraAssertions.assertTyping(Message.class, result)[ CD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_46 $$ assertFalse(Hibernate.isInitialized(workPoster.messages))[ CD ]
Line_4 $$ Session session = openSession()-->Line_52 $$ session.createQuery("delete Message").executeUpdate()[ FD ]
Line_19 $$ final List results = new ArrayList()-->Line_27 $$ results.addAll(resultSetProcessor.extractResults(resultSet, (SessionImplementor) workSession, new QueryParameters(), new NamedParameterContext() [ FD ]
Line_26 $$ ResultSet resultSet = ps.executeQuery()-->Line_32 $$ resultSet.close()[ FD ]
Line_24 $$ PreparedStatement ps = connection.prepareStatement(sql)-->Line_26 $$ ResultSet resultSet = ps.executeQuery()[ FD ]
Line_4 $$ Session session = openSession()-->Line_5 $$ session.beginTransaction()[ FD ]
Line_26 $$ ResultSet resultSet = ps.executeQuery()-->Line_27 $$ results.addAll(resultSetProcessor.extractResults(resultSet, (SessionImplementor) workSession, new QueryParameters(), new NamedParameterContext() [ FD ]
Line_22 $$ workSession.doWork(new Work() -->Line_24 $$ PreparedStatement ps = connection.prepareStatement(sql)[ FD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_54 $$ session.getTransaction().commit()[ CD ]
Line_24 $$ PreparedStatement ps = connection.prepareStatement(sql)-->Line_33 $$ ps.close()[ FD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_10 $$ message.poster = poster[ CD ]
Line_4 $$ Session session = openSession()-->Line_53 $$ session.createQuery("delete Poster").executeUpdate()[ FD ]
Line_18 $$ final ResultSetProcessor resultSetProcessor = queryDetails.getResultSetProcessor()-->Line_27 $$ results.addAll(resultSetProcessor.extractResults(resultSet, (SessionImplementor) workSession, new QueryParameters(), new NamedParameterContext() [ FD ]
Line_24 $$ PreparedStatement ps = connection.prepareStatement(sql)-->Line_25 $$ ps.setInt(1, 1)[ FD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_12 $$ session.getTransaction().commit()[ CD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_36 $$ assertEquals(1, results.size())[ CD ]
Line_22 $$ workSession.doWork(new Work() -->Line_33 $$ ps.close()[ CD ]
Line_20 $$ final Session workSession = openSession()-->Line_21 $$ workSession.beginTransaction()[ FD ]
Line_22 $$ workSession.doWork(new Work() -->Line_24 $$ PreparedStatement ps = connection.prepareStatement(sql)[ CD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_40 $$ assertEquals(1, workMessage.mid.intValue())[ CD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_21 $$ workSession.beginTransaction()[ CD ]
Line_16 $$ final LoadQueryDetails queryDetails = Helper.INSTANCE.buildLoadQueryDetails(plan, sessionFactory())-->Line_18 $$ final ResultSetProcessor resultSetProcessor = queryDetails.getResultSetProcessor()[ FD ]
Line_4 $$ Session session = openSession()-->Line_9 $$ session.save(poster)[ FD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_45 $$ assertEquals("the poster", workPoster.name)[ CD ]
Line_20 $$ final Session workSession = openSession()-->Line_47 $$ workSession.getTransaction().commit()[ FD ]
Line_17 $$ final String sql = queryDetails.getSqlStatement()-->Line_24 $$ PreparedStatement ps = connection.prepareStatement(sql)[ FD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_53 $$ session.createQuery("delete Poster").executeUpdate()[ CD ]
Line_7 $$ Poster poster = new Poster(2, "the poster")-->Line_10 $$ message.poster = poster[ FD ]
Line_2 $$ public void testManyToOneEntityProcessing() throws Exception -->Line_17 $$ final String sql = queryDetails.getSqlStatement()[ CD ]
