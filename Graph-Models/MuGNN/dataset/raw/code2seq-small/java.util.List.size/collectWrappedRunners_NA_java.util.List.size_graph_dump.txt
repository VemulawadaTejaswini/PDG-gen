Line_3 $$ final List runners = new ArrayList()-->Line_18 $$ runners.addAll(new AllDefaultPossibilitiesBuilder(false).runners(null, (Class[]) nonSuiteClasses.toArray(new Class[nonSuiteClasses.size()])))[ FD ]
Line_8 $$ if (suiteMethodBuilder.hasSuiteMethod(aClass)) -->Line_15 $$ nonSuiteClasses.add(aClass)[ CD ]
Line_6 $$ for (int i = 0, length = classes.length; i < length; i++) -->Line_8 $$ if (suiteMethodBuilder.hasSuiteMethod(aClass)) [ CD ]
Line_3 $$ final List runners = new ArrayList()-->Line_10 $$ runners.add(new ClassAwareSuiteMethod(aClass))[ FD ]
Line_2 $$ private static List collectWrappedRunners(Class[] classes) throws InitializationError -->Line_5 $$ final SuiteMethodBuilder suiteMethodBuilder = new SuiteMethodBuilder()[ CD ]
Line_2 $$ private static List collectWrappedRunners(Class[] classes) throws InitializationError -->Line_4 $$ final List nonSuiteClasses = new ArrayList()[ CD ]
Line_7 $$ Class aClass = classes[i]-->Line_8 $$ if (suiteMethodBuilder.hasSuiteMethod(aClass)) [ FD ]
Line_3 $$ final List runners = new ArrayList()-->Line_12 $$ runners.add(new ErrorReportingRunner(aClass, throwable))[ FD ]
Line_4 $$ final List nonSuiteClasses = new ArrayList()-->Line_15 $$ nonSuiteClasses.add(aClass)[ FD ]
Line_2 $$ private static List collectWrappedRunners(Class[] classes) throws InitializationError -->Line_18 $$ runners.addAll(new AllDefaultPossibilitiesBuilder(false).runners(null, (Class[]) nonSuiteClasses.toArray(new Class[nonSuiteClasses.size()])))[ CD ]
Line_4 $$ final List nonSuiteClasses = new ArrayList()-->Line_18 $$ runners.addAll(new AllDefaultPossibilitiesBuilder(false).runners(null, (Class[]) nonSuiteClasses.toArray(new Class[nonSuiteClasses.size()])))[ FD ]
Line_2 $$ private static List collectWrappedRunners(Class[] classes) throws InitializationError -->Line_6 $$ for (int i = 0, length = classes.length; i < length; i++) [ CD ]
Line_7 $$ Class aClass = classes[i]-->Line_15 $$ nonSuiteClasses.add(aClass)[ FD ]
Line_6 $$ for (int i = 0, length = classes.length; i < length; i++) -->Line_7 $$ Class aClass = classes[i][ CD ]
Line_2 $$ private static List collectWrappedRunners(Class[] classes) throws InitializationError -->Line_3 $$ final List runners = new ArrayList()[ CD ]
Line_2 $$ private static List collectWrappedRunners(Class[] classes) throws InitializationError -->Line_19 $$ return runners[ CD ]
Line_5 $$ final SuiteMethodBuilder suiteMethodBuilder = new SuiteMethodBuilder()-->Line_8 $$ if (suiteMethodBuilder.hasSuiteMethod(aClass)) [ FD ]
