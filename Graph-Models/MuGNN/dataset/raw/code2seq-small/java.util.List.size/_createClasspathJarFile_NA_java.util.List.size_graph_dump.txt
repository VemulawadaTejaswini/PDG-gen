Line_11 $$ File jarFile = new File(jarDir, createTempFileName("classpath", "jar"))-->Line_13 $$ String manifestClasspathProperty = "manifest.classpath." + jarFile.getName()[ FD ]
Line_11 $$ File jarFile = new File(jarDir, createTempFileName("classpath", "jar"))-->Line_12 $$ jarFile.deleteOnExit()[ FD ]
Line_2 $$ private static File _createClasspathJarFile(Project project, List<File> files, File jarDir) -->Line_3 $$ if (files.isEmpty()) [ CD ]
Line_13 $$ String manifestClasspathProperty = "manifest.classpath." + jarFile.getName()-->Line_15 $$ String manifestClasspath = String.valueOf(antBuilder.getProperty(manifestClasspathProperty))[ FD ]
Line_2 $$ private static File _createClasspathJarFile(Project project, List<File> files, File jarDir) -->Line_10 $$ jarDir.mkdirs()[ CD ]
Line_9 $$ AntBuilder antBuilder = project.createAntBuilder()-->Line_14 $$ _invokeAntMethodManifestClasspath(antBuilder, files, jarFile, manifestClasspathProperty)[ FD ]
Line_11 $$ File jarFile = new File(jarDir, createTempFileName("classpath", "jar"))-->Line_16 $$ File manifestFile = new File(jarFile.getParentFile(), jarFile.getName() + ".manifest")[ FD ]
Line_2 $$ private static File _createClasspathJarFile(Project project, List<File> files, File jarDir) -->Line_9 $$ AntBuilder antBuilder = project.createAntBuilder()[ CD ]
Line_11 $$ File jarFile = new File(jarDir, createTempFileName("classpath", "jar"))-->Line_19 $$ _invokeAntMethodJar(antBuilder, jarFile, null, false, new String[0][0], manifestFile)[ FD ]
Line_2 $$ private static File _createClasspathJarFile(Project project, List<File> files, File jarDir) -->Line_16 $$ File manifestFile = new File(jarFile.getParentFile(), jarFile.getName() + ".manifest")[ CD ]
Line_2 $$ private static File _createClasspathJarFile(Project project, List<File> files, File jarDir) -->Line_3 $$ if (files.isEmpty()) [ FD ]
Line_9 $$ AntBuilder antBuilder = project.createAntBuilder()-->Line_18 $$ _invokeAntMethodManifest(antBuilder, manifestFile, Collections.singletonMap("Class-Path", manifestClasspath))[ FD ]
Line_13 $$ String manifestClasspathProperty = "manifest.classpath." + jarFile.getName()-->Line_14 $$ _invokeAntMethodManifestClasspath(antBuilder, files, jarFile, manifestClasspathProperty)[ FD ]
Line_9 $$ AntBuilder antBuilder = project.createAntBuilder()-->Line_15 $$ String manifestClasspath = String.valueOf(antBuilder.getProperty(manifestClasspathProperty))[ FD ]
Line_2 $$ private static File _createClasspathJarFile(Project project, List<File> files, File jarDir) -->Line_7 $$ return files.get(0)[ FD ]
Line_2 $$ private static File _createClasspathJarFile(Project project, List<File> files, File jarDir) -->Line_23 $$ return jarFile[ CD ]
Line_2 $$ private static File _createClasspathJarFile(Project project, List<File> files, File jarDir) -->Line_9 $$ AntBuilder antBuilder = project.createAntBuilder()[ FD ]
Line_15 $$ String manifestClasspath = String.valueOf(antBuilder.getProperty(manifestClasspathProperty))-->Line_18 $$ _invokeAntMethodManifest(antBuilder, manifestFile, Collections.singletonMap("Class-Path", manifestClasspath))[ FD ]
Line_16 $$ File manifestFile = new File(jarFile.getParentFile(), jarFile.getName() + ".manifest")-->Line_18 $$ _invokeAntMethodManifest(antBuilder, manifestFile, Collections.singletonMap("Class-Path", manifestClasspath))[ FD ]
Line_16 $$ File manifestFile = new File(jarFile.getParentFile(), jarFile.getName() + ".manifest")-->Line_19 $$ _invokeAntMethodJar(antBuilder, jarFile, null, false, new String[0][0], manifestFile)[ FD ]
Line_2 $$ private static File _createClasspathJarFile(Project project, List<File> files, File jarDir) -->Line_15 $$ String manifestClasspath = String.valueOf(antBuilder.getProperty(manifestClasspathProperty))[ CD ]
Line_2 $$ private static File _createClasspathJarFile(Project project, List<File> files, File jarDir) -->Line_13 $$ String manifestClasspathProperty = "manifest.classpath." + jarFile.getName()[ CD ]
Line_11 $$ File jarFile = new File(jarDir, createTempFileName("classpath", "jar"))-->Line_14 $$ _invokeAntMethodManifestClasspath(antBuilder, files, jarFile, manifestClasspathProperty)[ FD ]
Line_9 $$ AntBuilder antBuilder = project.createAntBuilder()-->Line_19 $$ _invokeAntMethodJar(antBuilder, jarFile, null, false, new String[0][0], manifestFile)[ FD ]
Line_3 $$ if (files.isEmpty()) -->Line_4 $$ return null[ CD ]
Line_2 $$ private static File _createClasspathJarFile(Project project, List<File> files, File jarDir) -->Line_10 $$ jarDir.mkdirs()[ FD ]
Line_2 $$ private static File _createClasspathJarFile(Project project, List<File> files, File jarDir) -->Line_6 $$ if (files.size() == 1) [ CD ]
Line_6 $$ if (files.size() == 1) -->Line_7 $$ return files.get(0)[ CD ]
Line_2 $$ private static File _createClasspathJarFile(Project project, List<File> files, File jarDir) -->Line_12 $$ jarFile.deleteOnExit()[ CD ]
Line_2 $$ private static File _createClasspathJarFile(Project project, List<File> files, File jarDir) -->Line_14 $$ _invokeAntMethodManifestClasspath(antBuilder, files, jarFile, manifestClasspathProperty)[ FD ]
Line_2 $$ private static File _createClasspathJarFile(Project project, List<File> files, File jarDir) -->Line_21 $$ project.delete(manifestFile)[ FD ]
Line_2 $$ private static File _createClasspathJarFile(Project project, List<File> files, File jarDir) -->Line_6 $$ if (files.size() == 1) [ FD ]
Line_2 $$ private static File _createClasspathJarFile(Project project, List<File> files, File jarDir) -->Line_11 $$ File jarFile = new File(jarDir, createTempFileName("classpath", "jar"))[ CD ]
Line_16 $$ File manifestFile = new File(jarFile.getParentFile(), jarFile.getName() + ".manifest")-->Line_21 $$ project.delete(manifestFile)[ FD ]
Line_2 $$ private static File _createClasspathJarFile(Project project, List<File> files, File jarDir) -->Line_14 $$ _invokeAntMethodManifestClasspath(antBuilder, files, jarFile, manifestClasspathProperty)[ CD ]
