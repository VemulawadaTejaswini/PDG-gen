Line_2 $$ public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable -->Line_31 $$ assertEquals(name1, it.getName())[ CD ]
Line_9 $$ String oldName = ((ITestBean) mi.getThis()).getName()-->Line_10 $$ clone.getArguments()[0] = oldName[ FD ]
Line_4 $$ ProxyFactory pc = new ProxyFactory(tb)-->Line_5 $$ pc.addInterface(ITestBean.class)[ FD ]
Line_6 $$ MethodInterceptor nameReverter = new MethodInterceptor() -->Line_9 $$ String oldName = ((ITestBean) mi.getThis()).getName()[ FD ]
Line_6 $$ MethodInterceptor nameReverter = new MethodInterceptor() -->Line_11 $$ mi.proceed()[ CD ]
Line_2 $$ public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable -->Line_29 $$ assertEquals(name1, tb.getName())[ CD ]
Line_2 $$ public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable -->Line_3 $$ TestBean tb = new TestBean()[ CD ]
Line_2 $$ public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable -->Line_4 $$ ProxyFactory pc = new ProxyFactory(tb)[ CD ]
Line_2 $$ public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable -->Line_23 $$ pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, nameReverter))[ CD ]
Line_2 $$ public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable -->Line_30 $$ it.setName(name2)[ CD ]
Line_6 $$ MethodInterceptor nameReverter = new MethodInterceptor() -->Line_19 $$ return mi.proceed()[ FD ]
Line_6 $$ MethodInterceptor nameReverter = new MethodInterceptor() -->Line_12 $$ return clone.proceed()[ CD ]
Line_15 $$ class NameSaver implements MethodInterceptor -->Line_18 $$ names.add(mi.getArguments()[0])[ FD ]
Line_2 $$ public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable -->Line_34 $$ assertEquals(name1, saver.names.get(1))[ CD ]
Line_6 $$ MethodInterceptor nameReverter = new MethodInterceptor() -->Line_8 $$ MethodInvocation clone = ((ReflectiveMethodInvocation) mi).invocableClone()[ CD ]
Line_8 $$ MethodInvocation clone = ((ReflectiveMethodInvocation) mi).invocableClone()-->Line_10 $$ clone.getArguments()[0] = oldName[ FD ]
Line_8 $$ MethodInvocation clone = ((ReflectiveMethodInvocation) mi).invocableClone()-->Line_12 $$ return clone.proceed()[ FD ]
Line_3 $$ TestBean tb = new TestBean()-->Line_28 $$ tb.setName(name1)[ FD ]
Line_6 $$ MethodInterceptor nameReverter = new MethodInterceptor() -->Line_18 $$ names.add(mi.getArguments()[0])[ FD ]
Line_15 $$ class NameSaver implements MethodInterceptor -->Line_19 $$ return mi.proceed()[ CD ]
Line_4 $$ ProxyFactory pc = new ProxyFactory(tb)-->Line_25 $$ ITestBean it = (ITestBean) createProxy(pc)[ FD ]
Line_15 $$ class NameSaver implements MethodInterceptor -->Line_19 $$ return mi.proceed()[ FD ]
Line_3 $$ TestBean tb = new TestBean()-->Line_29 $$ assertEquals(name1, tb.getName())[ FD ]
Line_2 $$ public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable -->Line_24 $$ pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, saver))[ CD ]
Line_2 $$ public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable -->Line_6 $$ MethodInterceptor nameReverter = new MethodInterceptor() [ CD ]
Line_2 $$ public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable -->Line_33 $$ assertEquals(name2, saver.names.get(0))[ CD ]
Line_6 $$ MethodInterceptor nameReverter = new MethodInterceptor() -->Line_9 $$ String oldName = ((ITestBean) mi.getThis()).getName()[ CD ]
Line_6 $$ MethodInterceptor nameReverter = new MethodInterceptor() -->Line_11 $$ mi.proceed()[ FD ]
Line_4 $$ ProxyFactory pc = new ProxyFactory(tb)-->Line_24 $$ pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, saver))[ FD ]
Line_2 $$ public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable -->Line_32 $$ assertEquals(2, saver.names.size())[ CD ]
Line_4 $$ ProxyFactory pc = new ProxyFactory(tb)-->Line_23 $$ pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, nameReverter))[ FD ]
Line_2 $$ public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable -->Line_5 $$ pc.addInterface(ITestBean.class)[ CD ]
Line_2 $$ public void testCanChangeArgumentsIndependentlyOnClonedInvocation() throws Throwable -->Line_28 $$ tb.setName(name1)[ CD ]
Line_15 $$ class NameSaver implements MethodInterceptor -->Line_18 $$ names.add(mi.getArguments()[0])[ CD ]
Line_6 $$ MethodInterceptor nameReverter = new MethodInterceptor() -->Line_10 $$ clone.getArguments()[0] = oldName[ CD ]
