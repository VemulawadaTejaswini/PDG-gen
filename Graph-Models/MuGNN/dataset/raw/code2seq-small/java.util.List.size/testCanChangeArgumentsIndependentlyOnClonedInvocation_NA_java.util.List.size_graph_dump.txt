Line_25 $$ class NameSaver implements MethodInterceptor -->Line_31 $$ names.add(mi.getArguments()[0])[ CD ]
Line_25 $$ class NameSaver implements MethodInterceptor -->Line_31 $$ names.add(mi.getArguments()[0])[ FD ]
Line_18 $$ String oldName = ((ITestBean) mi.getThis()).getName()-->Line_19 $$ clone.getArguments()[0] = oldName[ FD ]
Line_25 $$ class NameSaver implements MethodInterceptor -->Line_32 $$ return mi.proceed()[ CD ]
Line_25 $$ class NameSaver implements MethodInterceptor -->Line_32 $$ return mi.proceed()[ FD ]
Line_7 $$ TestBean tb = new TestBean()-->Line_41 $$ tb.setName(name1)[ FD ]
Line_17 $$ MethodInvocation clone = ((ReflectiveMethodInvocation) mi).invocableClone()-->Line_19 $$ clone.getArguments()[0] = oldName[ FD ]
Line_8 $$ ProxyFactory pc = new ProxyFactory(tb)-->Line_38 $$ ITestBean it = (ITestBean) createProxy(pc)[ FD ]
Line_8 $$ ProxyFactory pc = new ProxyFactory(tb)-->Line_36 $$ pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, nameReverter))[ FD ]
Line_7 $$ TestBean tb = new TestBean()-->Line_42 $$ assertEquals(name1, tb.getName())[ FD ]
Line_8 $$ ProxyFactory pc = new ProxyFactory(tb)-->Line_37 $$ pc.addAdvisor(new DefaultPointcutAdvisor(Pointcuts.SETTERS, saver))[ FD ]
Line_8 $$ ProxyFactory pc = new ProxyFactory(tb)-->Line_9 $$ pc.addInterface(ITestBean.class)[ FD ]
Line_17 $$ MethodInvocation clone = ((ReflectiveMethodInvocation) mi).invocableClone()-->Line_22 $$ return clone.proceed()[ FD ]
