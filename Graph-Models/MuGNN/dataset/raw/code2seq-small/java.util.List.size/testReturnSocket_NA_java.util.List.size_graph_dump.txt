Line_12 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_21 $$ Assert.assertTrue(socketBlockingQueue.isEmpty())[ FD ]
Line_12 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_13 $$ Assert.assertTrue(socketBlockingQueue.isEmpty())[ FD ]
Line_50 $$ socket = socketChannel.socket()-->Line_54 $$ closePeers(socket, serverSocket)[ FD ]
Line_18 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_51 $$ socket.shutdownOutput()[ FD ]
Line_50 $$ socket = socketChannel.socket()-->Line_52 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_43 $$ socket = socketChannel.socket()-->Line_57 $$ socket = socketChannel.socket()[ FD ]
Line_8 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(new SPIConfiguration(null, null, serverSocket.getLocalPort(), _spiConfiguration.getBaseDir(), null, null, null), new MockRegistrationReference(new MockIntraband()))-->Line_52 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_8 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(new SPIConfiguration(null, null, serverSocket.getLocalPort(), _spiConfiguration.getBaseDir(), null, null, null), new MockRegistrationReference(new MockIntraband()))-->Line_58 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_10 $$ Socket socket = socketChannel.socket()-->Line_43 $$ socket = socketChannel.socket()[ FD ]
Line_7 $$ try (ServerSocket serverSocket = serverSocketChannel.socket()) -->Line_8 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(new SPIConfiguration(null, null, serverSocket.getLocalPort(), _spiConfiguration.getBaseDir(), null, null, null), new MockRegistrationReference(new MockIntraband()))[ FD ]
Line_10 $$ Socket socket = socketChannel.socket()-->Line_57 $$ socket = socketChannel.socket()[ FD ]
Line_19 $$ SocketImpl socketImpl = swapSocketImpl(socket, null)-->Line_28 $$ socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_18 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_60 $$ Assert.assertSame(socket, socketBlockingQueue.poll())[ FD ]
Line_8 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(new SPIConfiguration(null, null, serverSocket.getLocalPort(), _spiConfiguration.getBaseDir(), null, null, null), new MockRegistrationReference(new MockIntraband()))-->Line_11 $$ httpClientSPIAgent.returnSocket(socket, true)[ FD ]
Line_7 $$ try (ServerSocket serverSocket = serverSocketChannel.socket()) -->Line_54 $$ closePeers(socket, serverSocket)[ FD ]
Line_12 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_60 $$ Assert.assertSame(socket, socketBlockingQueue.poll())[ FD ]
Line_27 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_32 $$ closePeers(socket, serverSocket)[ FD ]
Line_27 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_51 $$ socket.shutdownOutput()[ FD ]
Line_12 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_30 $$ Assert.assertTrue(socketBlockingQueue.isEmpty())[ FD ]
Line_27 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_54 $$ closePeers(socket, serverSocket)[ FD ]
Line_18 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_43 $$ socket = socketChannel.socket()[ FD ]
Line_43 $$ socket = socketChannel.socket()-->Line_44 $$ socket.shutdownInput()[ FD ]
Line_27 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_58 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_9 $$ SocketChannel socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_43 $$ socket = socketChannel.socket()[ FD ]
Line_10 $$ Socket socket = socketChannel.socket()-->Line_32 $$ closePeers(socket, serverSocket)[ FD ]
Line_27 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_44 $$ socket.shutdownInput()[ FD ]
Line_43 $$ socket = socketChannel.socket()-->Line_58 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_10 $$ Socket socket = socketChannel.socket()-->Line_28 $$ socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_10 $$ Socket socket = socketChannel.socket()-->Line_44 $$ socket.shutdownInput()[ FD ]
Line_18 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_57 $$ socket = socketChannel.socket()[ FD ]
Line_10 $$ Socket socket = socketChannel.socket()-->Line_52 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_27 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_57 $$ socket = socketChannel.socket()[ FD ]
Line_18 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_28 $$ socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_27 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_43 $$ socket = socketChannel.socket()[ FD ]
Line_57 $$ socket = socketChannel.socket()-->Line_58 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_10 $$ Socket socket = socketChannel.socket()-->Line_61 $$ closePeers(socket, serverSocket)[ FD ]
Line_43 $$ socket = socketChannel.socket()-->Line_61 $$ closePeers(socket, serverSocket)[ FD ]
Line_12 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_46 $$ Assert.assertTrue(socketBlockingQueue.isEmpty())[ FD ]
Line_34 $$ LogRecord logRecord = logRecords.get(0)-->Line_35 $$ Throwable throwable = logRecord.getThrown()[ FD ]
Line_18 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_22 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_43 $$ socket = socketChannel.socket()-->Line_51 $$ socket.shutdownOutput()[ FD ]
Line_12 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_59 $$ Assert.assertEquals(1, socketBlockingQueue.size())[ FD ]
Line_10 $$ Socket socket = socketChannel.socket()-->Line_54 $$ closePeers(socket, serverSocket)[ FD ]
Line_57 $$ socket = socketChannel.socket()-->Line_61 $$ closePeers(socket, serverSocket)[ FD ]
Line_18 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_32 $$ closePeers(socket, serverSocket)[ FD ]
Line_12 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_53 $$ Assert.assertTrue(socketBlockingQueue.isEmpty())[ FD ]
Line_10 $$ Socket socket = socketChannel.socket()-->Line_27 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())[ FD ]
Line_18 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_29 $$ httpClientSPIAgent.returnSocket(socket, true)[ FD ]
Line_43 $$ socket = socketChannel.socket()-->Line_52 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_18 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_58 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_18 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_61 $$ closePeers(socket, serverSocket)[ FD ]
Line_18 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_54 $$ closePeers(socket, serverSocket)[ FD ]
Line_50 $$ socket = socketChannel.socket()-->Line_51 $$ socket.shutdownOutput()[ FD ]
Line_7 $$ try (ServerSocket serverSocket = serverSocketChannel.socket()) -->Line_14 $$ closePeers(socket, serverSocket)[ FD ]
Line_43 $$ socket = socketChannel.socket()-->Line_47 $$ closePeers(socket, serverSocket)[ FD ]
Line_8 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(new SPIConfiguration(null, null, serverSocket.getLocalPort(), _spiConfiguration.getBaseDir(), null, null, null), new MockRegistrationReference(new MockIntraband()))-->Line_29 $$ httpClientSPIAgent.returnSocket(socket, true)[ FD ]
Line_10 $$ Socket socket = socketChannel.socket()-->Line_31 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_10 $$ Socket socket = socketChannel.socket()-->Line_45 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_27 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_47 $$ closePeers(socket, serverSocket)[ FD ]
Line_18 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_52 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_10 $$ Socket socket = socketChannel.socket()-->Line_51 $$ socket.shutdownOutput()[ FD ]
Line_10 $$ Socket socket = socketChannel.socket()-->Line_19 $$ SocketImpl socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_57 $$ socket = socketChannel.socket()-->Line_60 $$ Assert.assertSame(socket, socketBlockingQueue.poll())[ FD ]
Line_8 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(new SPIConfiguration(null, null, serverSocket.getLocalPort(), _spiConfiguration.getBaseDir(), null, null, null), new MockRegistrationReference(new MockIntraband()))-->Line_45 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_10 $$ Socket socket = socketChannel.socket()-->Line_47 $$ closePeers(socket, serverSocket)[ FD ]
Line_10 $$ Socket socket = socketChannel.socket()-->Line_29 $$ httpClientSPIAgent.returnSocket(socket, true)[ FD ]
Line_7 $$ try (ServerSocket serverSocket = serverSocketChannel.socket()) -->Line_32 $$ closePeers(socket, serverSocket)[ FD ]
Line_50 $$ socket = socketChannel.socket()-->Line_61 $$ closePeers(socket, serverSocket)[ FD ]
Line_18 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_47 $$ closePeers(socket, serverSocket)[ FD ]
Line_35 $$ Throwable throwable = logRecord.getThrown()-->Line_36 $$ Assert.assertSame(IOException.class, throwable.getClass())[ FD ]
Line_10 $$ Socket socket = socketChannel.socket()-->Line_14 $$ closePeers(socket, serverSocket)[ FD ]
Line_12 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_40 $$ Assert.assertTrue(socketBlockingQueue.isEmpty())[ FD ]
Line_18 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_50 $$ socket = socketChannel.socket()[ FD ]
Line_10 $$ Socket socket = socketChannel.socket()-->Line_60 $$ Assert.assertSame(socket, socketBlockingQueue.poll())[ FD ]
Line_7 $$ try (ServerSocket serverSocket = serverSocketChannel.socket()) -->Line_23 $$ closePeers(socket, serverSocket)[ FD ]
Line_28 $$ socketImpl = swapSocketImpl(socket, null)-->Line_31 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_9 $$ SocketChannel socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_10 $$ Socket socket = socketChannel.socket()[ FD ]
Line_10 $$ Socket socket = socketChannel.socket()-->Line_23 $$ closePeers(socket, serverSocket)[ FD ]
Line_43 $$ socket = socketChannel.socket()-->Line_60 $$ Assert.assertSame(socket, socketBlockingQueue.poll())[ FD ]
Line_18 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_27 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())[ FD ]
Line_27 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_61 $$ closePeers(socket, serverSocket)[ FD ]
Line_10 $$ Socket socket = socketChannel.socket()-->Line_20 $$ httpClientSPIAgent.returnSocket(socket, true)[ FD ]
Line_8 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(new SPIConfiguration(null, null, serverSocket.getLocalPort(), _spiConfiguration.getBaseDir(), null, null, null), new MockRegistrationReference(new MockIntraband()))-->Line_20 $$ httpClientSPIAgent.returnSocket(socket, true)[ FD ]
Line_9 $$ SocketChannel socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_50 $$ socket = socketChannel.socket()[ FD ]
Line_43 $$ socket = socketChannel.socket()-->Line_45 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_10 $$ Socket socket = socketChannel.socket()-->Line_18 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())[ FD ]
Line_10 $$ Socket socket = socketChannel.socket()-->Line_11 $$ httpClientSPIAgent.returnSocket(socket, true)[ FD ]
Line_9 $$ SocketChannel socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_57 $$ socket = socketChannel.socket()[ FD ]
Line_18 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_23 $$ closePeers(socket, serverSocket)[ FD ]
Line_7 $$ try (ServerSocket serverSocket = serverSocketChannel.socket()) -->Line_47 $$ closePeers(socket, serverSocket)[ FD ]
Line_10 $$ Socket socket = socketChannel.socket()-->Line_58 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_18 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_19 $$ SocketImpl socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_10 $$ Socket socket = socketChannel.socket()-->Line_50 $$ socket = socketChannel.socket()[ FD ]
Line_27 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_60 $$ Assert.assertSame(socket, socketBlockingQueue.poll())[ FD ]
Line_19 $$ SocketImpl socketImpl = swapSocketImpl(socket, null)-->Line_31 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_50 $$ socket = socketChannel.socket()-->Line_60 $$ Assert.assertSame(socket, socketBlockingQueue.poll())[ FD ]
Line_50 $$ socket = socketChannel.socket()-->Line_57 $$ socket = socketChannel.socket()[ FD ]
Line_43 $$ socket = socketChannel.socket()-->Line_54 $$ closePeers(socket, serverSocket)[ FD ]
Line_18 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_44 $$ socket.shutdownInput()[ FD ]
Line_27 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_50 $$ socket = socketChannel.socket()[ FD ]
Line_18 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_45 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_27 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_31 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_27 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_52 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_7 $$ try (ServerSocket serverSocket = serverSocketChannel.socket()) -->Line_61 $$ closePeers(socket, serverSocket)[ FD ]
Line_18 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_20 $$ httpClientSPIAgent.returnSocket(socket, true)[ FD ]
Line_43 $$ socket = socketChannel.socket()-->Line_50 $$ socket = socketChannel.socket()[ FD ]
Line_18 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_31 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_27 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_28 $$ socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_27 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_29 $$ httpClientSPIAgent.returnSocket(socket, true)[ FD ]
Line_50 $$ socket = socketChannel.socket()-->Line_58 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_27 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_45 $$ httpClientSPIAgent.returnSocket(socket, false)[ FD ]
Line_10 $$ Socket socket = socketChannel.socket()-->Line_22 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_19 $$ SocketImpl socketImpl = swapSocketImpl(socket, null)-->Line_22 $$ swapSocketImpl(socket, socketImpl)[ FD ]
