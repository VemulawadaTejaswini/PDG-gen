Line_53 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_89 $$ socketBlockingQueue.add(socket)[ FD ]
Line_56 $$ socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_89 $$ socketBlockingQueue.add(socket)[ FD ]
Line_36 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_2 $$ public void testService() throws Exception -->Line_33 $$ ServerSocket serverSocket = serverSocketChannel.socket()[ CD ]
Line_21 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_24 $$ httpClientSPIAgent.service(mockHttpServletRequest, null)[ FD ]
Line_35 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(HttpClientSPIAgent.class.getName(), Level.OFF)) -->Line_36 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_78 $$ byte[] receiptData = new byte[8]-->Line_79 $$ BigEndianCodec.putLong(receiptData, 0, receipt)[ FD ]
Line_53 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_57 $$ socketBlockingQueue.add(socket)[ FD ]
Line_18 $$ Socket socket = socketChannel.socket()-->Line_51 $$ closePeers(socket, serverSocket)[ FD ]
Line_15 $$ ServerSocketChannel serverSocketChannel = SocketUtil.createServerSocketChannel(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort(), null)-->Line_16 $$ serverSocketChannel.configureBlocking(true)[ FD ]
Line_2 $$ public void testService() throws Exception -->Line_88 $$ socket = socketChannel.socket()[ CD ]
Line_33 $$ ServerSocket serverSocket = serverSocketChannel.socket()-->Line_51 $$ closePeers(socket, serverSocket)[ FD ]
Line_29 $$ throwable = throwable.getCause()-->Line_68 $$ Assert.assertSame(IOException.class, throwable.getClass())[ FD ]
Line_2 $$ public void testService() throws Exception -->Line_99 $$ outputStream.write(receiptData)[ CD ]
Line_78 $$ byte[] receiptData = new byte[8]-->Line_80 $$ return Datagram.createResponseDatagram(datagram, ByteBuffer.wrap(receiptData))[ FD ]
Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_66 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_14 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))-->Line_59 $$ httpClientSPIAgent.service(mockHttpServletRequest, null)[ FD ]
Line_37 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_54 $$ socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_2 $$ public void testService() throws Exception -->Line_91 $$ serializer.writeString(_SERVLET_CONTEXT_NAME)[ CD ]
Line_18 $$ Socket socket = socketChannel.socket()-->Line_37 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())[ FD ]
Line_54 $$ socketImpl = swapSocketImpl(socket, null)-->Line_69 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_29 $$ throwable = throwable.getCause()-->Line_30 $$ Assert.assertSame(MailboxException.class, throwable.getClass())[ FD ]
Line_55 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))-->Line_59 $$ httpClientSPIAgent.service(mockHttpServletRequest, null)[ FD ]
Line_2 $$ public void testService() throws Exception -->Line_11 $$ MockIntraband mockIntraband = new MockIntraband()[ CD ]
Line_78 $$ byte[] receiptData = new byte[8]-->Line_98 $$ BigEndianCodec.putLong(receiptData, 0, receipt)[ FD ]
Line_8 $$ Throwable throwable = pre.getCause()-->Line_30 $$ Assert.assertSame(MailboxException.class, throwable.getClass())[ FD ]
Line_72 $$ socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_73 $$ socketChannel.configureBlocking(true)[ FD ]
Line_3 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(new MockIntraband()))-->Line_101 $$ httpClientSPIAgent.service(mockHttpServletRequest, new MockHttpServletResponse())[ FD ]
Line_11 $$ MockIntraband mockIntraband = new MockIntraband()-->Line_13 $$ mockIntraband.setIOException(ioException)[ FD ]
Line_2 $$ public void testService() throws Exception -->Line_104 $$ serverSocket.close()[ CD ]
Line_33 $$ ServerSocket serverSocket = serverSocketChannel.socket()-->Line_71 $$ closePeers(socket, serverSocket)[ FD ]
Line_2 $$ public void testService() throws Exception -->Line_100 $$ outputStream.flush()[ CD ]
Line_37 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_57 $$ socketBlockingQueue.add(socket)[ FD ]
Line_18 $$ Socket socket = socketChannel.socket()-->Line_38 $$ SocketImpl socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_2 $$ public void testService() throws Exception -->Line_13 $$ mockIntraband.setIOException(ioException)[ CD ]
Line_39 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))-->Line_55 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))[ FD ]
Line_36 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_65 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_77 $$ long receipt = ReflectionTestUtil.invoke(MailboxUtil.class, "depositMail", new Class<?>[] -->Line_79 $$ BigEndianCodec.putLong(receiptData, 0, receipt)[ FD ]
Line_19 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_40 $$ socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue[ FD ]
Line_8 $$ Throwable throwable = pre.getCause()-->Line_68 $$ Assert.assertSame(IOException.class, throwable.getClass())[ FD ]
Line_29 $$ throwable = throwable.getCause()-->Line_31 $$ Assert.assertSame(ioException, throwable.getCause())[ FD ]
Line_18 $$ Socket socket = socketChannel.socket()-->Line_57 $$ socketBlockingQueue.add(socket)[ FD ]
Line_37 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_53 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())[ FD ]
Line_53 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_102 $$ socket.close()[ FD ]
Line_18 $$ Socket socket = socketChannel.socket()-->Line_34 $$ closePeers(socket, serverSocket)[ FD ]
Line_2 $$ public void testService() throws Exception -->Line_103 $$ remoteSocket.close()[ CD ]
Line_3 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(new MockIntraband()))-->Line_14 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))[ FD ]
Line_21 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_22 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_PORTLET, _portlet)[ FD ]
Line_14 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))-->Line_55 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))[ FD ]
Line_33 $$ ServerSocket serverSocket = serverSocketChannel.socket()-->Line_104 $$ serverSocket.close()[ FD ]
Line_17 $$ SocketChannel socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_72 $$ socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)[ FD ]
Line_39 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))-->Line_43 $$ httpClientSPIAgent.service(mockHttpServletRequest, null)[ FD ]
Line_37 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_50 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_12 $$ IOException ioException = new IOException()-->Line_13 $$ mockIntraband.setIOException(ioException)[ FD ]
Line_8 $$ Throwable throwable = pre.getCause()-->Line_63 $$ Assert.assertSame(IOException.class, throwable.getClass())[ FD ]
Line_8 $$ Throwable throwable = pre.getCause()-->Line_29 $$ throwable = throwable.getCause()[ FD ]
Line_29 $$ throwable = throwable.getCause()-->Line_47 $$ Assert.assertSame(IOException.class, throwable.getClass())[ FD ]
Line_38 $$ SocketImpl socketImpl = swapSocketImpl(socket, null)-->Line_50 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_8 $$ Throwable throwable = pre.getCause()-->Line_47 $$ Assert.assertSame(IOException.class, throwable.getClass())[ FD ]
Line_2 $$ public void testService() throws Exception -->Line_95 $$ OutputStream outputStream = remoteSocket.getOutputStream()[ CD ]
Line_2 $$ public void testService() throws Exception -->Line_72 $$ socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)[ CD ]
Line_72 $$ socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_88 $$ socket = socketChannel.socket()[ FD ]
Line_2 $$ public void testService() throws Exception -->Line_17 $$ SocketChannel socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)[ CD ]
Line_2 $$ public void testService() throws Exception -->Line_22 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_PORTLET, _portlet)[ CD ]
Line_37 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_71 $$ closePeers(socket, serverSocket)[ FD ]
Line_3 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(new MockIntraband()))-->Line_55 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))[ FD ]
Line_18 $$ Socket socket = socketChannel.socket()-->Line_50 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_2 $$ public void testService() throws Exception -->Line_73 $$ socketChannel.configureBlocking(true)[ CD ]
Line_2 $$ public void testService() throws Exception -->Line_34 $$ closePeers(socket, serverSocket)[ CD ]
Line_2 $$ public void testService() throws Exception -->Line_96 $$ outputStream.write("HTTP/1.1 200 OK\n\n".getBytes("US-ASCII"))[ CD ]
Line_37 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_69 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_33 $$ ServerSocket serverSocket = serverSocketChannel.socket()-->Line_94 $$ Socket remoteSocket = serverSocket.accept()[ FD ]
Line_19 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_20 $$ socketBlockingQueue.add(socket)[ FD ]
Line_53 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_69 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_3 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(new MockIntraband()))-->Line_39 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))[ FD ]
Line_35 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(HttpClientSPIAgent.class.getName(), Level.OFF)) -->Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_2 $$ public void testService() throws Exception -->Line_71 $$ closePeers(socket, serverSocket)[ CD ]
Line_17 $$ SocketChannel socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_88 $$ socket = socketChannel.socket()[ FD ]
Line_17 $$ SocketChannel socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_18 $$ Socket socket = socketChannel.socket()[ FD ]
Line_21 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_101 $$ httpClientSPIAgent.service(mockHttpServletRequest, new MockHttpServletResponse())[ FD ]
Line_18 $$ Socket socket = socketChannel.socket()-->Line_20 $$ socketBlockingQueue.add(socket)[ FD ]
Line_2 $$ public void testService() throws Exception -->Line_102 $$ socket.close()[ CD ]
Line_2 $$ public void testService() throws Exception -->Line_12 $$ IOException ioException = new IOException()[ CD ]
Line_2 $$ public void testService() throws Exception -->Line_89 $$ socketBlockingQueue.add(socket)[ CD ]
Line_14 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))-->Line_24 $$ httpClientSPIAgent.service(mockHttpServletRequest, null)[ FD ]
Line_21 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_43 $$ httpClientSPIAgent.service(mockHttpServletRequest, null)[ FD ]
Line_38 $$ SocketImpl socketImpl = swapSocketImpl(socket, null)-->Line_54 $$ socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_2 $$ public void testService() throws Exception -->Line_19 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue[ CD ]
Line_14 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))-->Line_43 $$ httpClientSPIAgent.service(mockHttpServletRequest, null)[ FD ]
Line_8 $$ Throwable throwable = pre.getCause()-->Line_9 $$ Assert.assertSame(ConnectException.class, throwable.getClass())[ FD ]
Line_11 $$ MockIntraband mockIntraband = new MockIntraband()-->Line_74 $$ mockIntraband = new MockIntraband() [ FD ]
Line_39 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))-->Line_59 $$ httpClientSPIAgent.service(mockHttpServletRequest, null)[ FD ]
Line_40 $$ socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_89 $$ socketBlockingQueue.add(socket)[ FD ]
Line_18 $$ Socket socket = socketChannel.socket()-->Line_41 $$ socketBlockingQueue.add(socket)[ FD ]
Line_18 $$ Socket socket = socketChannel.socket()-->Line_71 $$ closePeers(socket, serverSocket)[ FD ]
Line_15 $$ ServerSocketChannel serverSocketChannel = SocketUtil.createServerSocketChannel(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort(), null)-->Line_33 $$ ServerSocket serverSocket = serverSocketChannel.socket()[ FD ]
Line_2 $$ public void testService() throws Exception -->Line_16 $$ serverSocketChannel.configureBlocking(true)[ CD ]
Line_8 $$ Throwable throwable = pre.getCause()-->Line_28 $$ Assert.assertSame(IOException.class, throwable.getClass())[ FD ]
Line_37 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_38 $$ SocketImpl socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_37 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_41 $$ socketBlockingQueue.add(socket)[ FD ]
Line_74 $$ mockIntraband = new MockIntraband() -->Line_77 $$ long receipt = ReflectionTestUtil.invoke(MailboxUtil.class, "depositMail", new Class<?>[] [ FD ]
Line_18 $$ Socket socket = socketChannel.socket()-->Line_54 $$ socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_2 $$ public void testService() throws Exception -->Line_98 $$ BigEndianCodec.putLong(receiptData, 0, receipt)[ CD ]
Line_2 $$ public void testService() throws Exception -->Line_3 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(new MockIntraband()))[ CD ]
Line_19 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_57 $$ socketBlockingQueue.add(socket)[ FD ]
Line_2 $$ public void testService() throws Exception -->Line_94 $$ Socket remoteSocket = serverSocket.accept()[ CD ]
Line_3 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(new MockIntraband()))-->Line_43 $$ httpClientSPIAgent.service(mockHttpServletRequest, null)[ FD ]
Line_37 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_89 $$ socketBlockingQueue.add(socket)[ FD ]
Line_37 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_102 $$ socket.close()[ FD ]
Line_2 $$ public void testService() throws Exception -->Line_21 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()[ CD ]
Line_18 $$ Socket socket = socketChannel.socket()-->Line_53 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())[ FD ]
Line_18 $$ Socket socket = socketChannel.socket()-->Line_89 $$ socketBlockingQueue.add(socket)[ FD ]
Line_19 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_41 $$ socketBlockingQueue.add(socket)[ FD ]
Line_2 $$ public void testService() throws Exception -->Line_14 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))[ CD ]
Line_33 $$ ServerSocket serverSocket = serverSocketChannel.socket()-->Line_34 $$ closePeers(socket, serverSocket)[ FD ]
Line_40 $$ socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_41 $$ socketBlockingQueue.add(socket)[ FD ]
Line_37 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_51 $$ closePeers(socket, serverSocket)[ FD ]
Line_36 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_66 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_14 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))-->Line_39 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))[ FD ]
Line_2 $$ public void testService() throws Exception -->Line_74 $$ mockIntraband = new MockIntraband() [ CD ]
Line_2 $$ public void testService() throws Exception -->Line_93 $$ long receipt = ReflectionTestUtil.invoke(MailboxUtil.class, "depositMail", new Class<?>[] [ CD ]
Line_2 $$ public void testService() throws Exception -->Line_20 $$ socketBlockingQueue.add(socket)[ CD ]
Line_3 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(new MockIntraband()))-->Line_24 $$ httpClientSPIAgent.service(mockHttpServletRequest, null)[ FD ]
Line_53 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_54 $$ socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_53 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_71 $$ closePeers(socket, serverSocket)[ FD ]
Line_78 $$ byte[] receiptData = new byte[8]-->Line_99 $$ outputStream.write(receiptData)[ FD ]
Line_17 $$ SocketChannel socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_73 $$ socketChannel.configureBlocking(true)[ FD ]
Line_2 $$ public void testService() throws Exception -->Line_101 $$ httpClientSPIAgent.service(mockHttpServletRequest, new MockHttpServletResponse())[ CD ]
Line_36 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_49 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_40 $$ socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_56 $$ socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue[ FD ]
Line_74 $$ mockIntraband = new MockIntraband() -->Line_80 $$ return Datagram.createResponseDatagram(datagram, ByteBuffer.wrap(receiptData))[ FD ]
Line_18 $$ Socket socket = socketChannel.socket()-->Line_69 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_19 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_89 $$ socketBlockingQueue.add(socket)[ FD ]
Line_8 $$ Throwable throwable = pre.getCause()-->Line_31 $$ Assert.assertSame(ioException, throwable.getCause())[ FD ]
Line_56 $$ socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_57 $$ socketBlockingQueue.add(socket)[ FD ]
Line_3 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(new MockIntraband()))-->Line_5 $$ httpClientSPIAgent.service(null, null)[ FD ]
Line_14 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))-->Line_101 $$ httpClientSPIAgent.service(mockHttpServletRequest, new MockHttpServletResponse())[ FD ]
Line_55 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))-->Line_101 $$ httpClientSPIAgent.service(mockHttpServletRequest, new MockHttpServletResponse())[ FD ]
Line_19 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_56 $$ socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue[ FD ]
Line_29 $$ throwable = throwable.getCause()-->Line_63 $$ Assert.assertSame(IOException.class, throwable.getClass())[ FD ]
Line_39 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))-->Line_101 $$ httpClientSPIAgent.service(mockHttpServletRequest, new MockHttpServletResponse())[ FD ]
Line_2 $$ public void testService() throws Exception -->Line_18 $$ Socket socket = socketChannel.socket()[ CD ]
Line_3 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(new MockIntraband()))-->Line_59 $$ httpClientSPIAgent.service(mockHttpServletRequest, null)[ FD ]
Line_40 $$ socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_57 $$ socketBlockingQueue.add(socket)[ FD ]
Line_18 $$ Socket socket = socketChannel.socket()-->Line_102 $$ socket.close()[ FD ]
Line_2 $$ public void testService() throws Exception -->Line_15 $$ ServerSocketChannel serverSocketChannel = SocketUtil.createServerSocketChannel(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort(), null)[ CD ]
Line_21 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_59 $$ httpClientSPIAgent.service(mockHttpServletRequest, null)[ FD ]
Line_77 $$ long receipt = ReflectionTestUtil.invoke(MailboxUtil.class, "depositMail", new Class<?>[] -->Line_98 $$ BigEndianCodec.putLong(receiptData, 0, receipt)[ FD ]
Line_38 $$ SocketImpl socketImpl = swapSocketImpl(socket, null)-->Line_69 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_12 $$ IOException ioException = new IOException()-->Line_31 $$ Assert.assertSame(ioException, throwable.getCause())[ FD ]
Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_65 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_66 $$ LogRecord logRecord = logRecords.get(0)-->Line_67 $$ Throwable throwable = logRecord.getThrown()[ FD ]
Line_2 $$ public void testService() throws Exception -->Line_92 $$ serializer.writeObject(new SPIAgentResponse(_SERVLET_CONTEXT_NAME))[ CD ]
