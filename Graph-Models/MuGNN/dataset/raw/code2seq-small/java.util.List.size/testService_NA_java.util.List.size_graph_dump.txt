Line_58 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_59 $$ socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_32 $$ throwable = throwable.getCause()-->Line_51 $$ Assert.assertSame(IOException.class, throwable.getClass())[ FD ]
Line_20 $$ SocketChannel socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_79 $$ socketChannel.configureBlocking(true)[ FD ]
Line_21 $$ Socket socket = socketChannel.socket()-->Line_45 $$ socketBlockingQueue.add(socket)[ FD ]
Line_24 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_27 $$ httpClientSPIAgent.service(mockHttpServletRequest, null)[ FD ]
Line_41 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_42 $$ SocketImpl socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_22 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_23 $$ socketBlockingQueue.add(socket)[ FD ]
Line_41 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_58 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())[ FD ]
Line_85 $$ long receipt = ReflectionTestUtil.invoke(MailboxUtil.class, "depositMail", new Class<?>[] -->Line_106 $$ BigEndianCodec.putLong(receiptData, 0, receipt)[ FD ]
Line_80 $$ mockIntraband = new MockIntraband() -->Line_85 $$ long receipt = ReflectionTestUtil.invoke(MailboxUtil.class, "depositMail", new Class<?>[] [ FD ]
Line_10 $$ Throwable throwable = pre.getCause()-->Line_68 $$ Assert.assertSame(IOException.class, throwable.getClass())[ FD ]
Line_85 $$ long receipt = ReflectionTestUtil.invoke(MailboxUtil.class, "depositMail", new Class<?>[] -->Line_87 $$ BigEndianCodec.putLong(receiptData, 0, receipt)[ FD ]
Line_21 $$ Socket socket = socketChannel.socket()-->Line_97 $$ socketBlockingQueue.add(socket)[ FD ]
Line_43 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))-->Line_60 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))[ FD ]
Line_58 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_74 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_22 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_61 $$ socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue[ FD ]
Line_24 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_64 $$ httpClientSPIAgent.service(mockHttpServletRequest, null)[ FD ]
Line_43 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))-->Line_109 $$ httpClientSPIAgent.service(mockHttpServletRequest, new MockHttpServletResponse())[ FD ]
Line_36 $$ ServerSocket serverSocket = serverSocketChannel.socket()-->Line_37 $$ closePeers(socket, serverSocket)[ FD ]
Line_10 $$ Throwable throwable = pre.getCause()-->Line_11 $$ Assert.assertSame(ConnectException.class, throwable.getClass())[ FD ]
Line_41 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_54 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_10 $$ Throwable throwable = pre.getCause()-->Line_34 $$ Assert.assertSame(ioException, throwable.getCause())[ FD ]
Line_21 $$ Socket socket = socketChannel.socket()-->Line_55 $$ closePeers(socket, serverSocket)[ FD ]
Line_21 $$ Socket socket = socketChannel.socket()-->Line_42 $$ SocketImpl socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_22 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_62 $$ socketBlockingQueue.add(socket)[ FD ]
Line_32 $$ throwable = throwable.getCause()-->Line_68 $$ Assert.assertSame(IOException.class, throwable.getClass())[ FD ]
Line_18 $$ ServerSocketChannel serverSocketChannel = SocketUtil.createServerSocketChannel(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort(), null)-->Line_19 $$ serverSocketChannel.configureBlocking(true)[ FD ]
Line_43 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))-->Line_47 $$ httpClientSPIAgent.service(mockHttpServletRequest, null)[ FD ]
Line_20 $$ SocketChannel socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_96 $$ socket = socketChannel.socket()[ FD ]
Line_60 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))-->Line_109 $$ httpClientSPIAgent.service(mockHttpServletRequest, new MockHttpServletResponse())[ FD ]
Line_10 $$ Throwable throwable = pre.getCause()-->Line_33 $$ Assert.assertSame(MailboxException.class, throwable.getClass())[ FD ]
Line_71 $$ LogRecord logRecord = logRecords.get(0)-->Line_72 $$ Throwable throwable = logRecord.getThrown()[ FD ]
Line_32 $$ throwable = throwable.getCause()-->Line_33 $$ Assert.assertSame(MailboxException.class, throwable.getClass())[ FD ]
Line_44 $$ socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_97 $$ socketBlockingQueue.add(socket)[ FD ]
Line_10 $$ Throwable throwable = pre.getCause()-->Line_31 $$ Assert.assertSame(IOException.class, throwable.getClass())[ FD ]
Line_21 $$ Socket socket = socketChannel.socket()-->Line_74 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_20 $$ SocketChannel socketChannel = SocketChannel.open(httpClientSPIAgent.socketAddress)-->Line_21 $$ Socket socket = socketChannel.socket()[ FD ]
Line_58 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_110 $$ socket.close()[ FD ]
Line_22 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_45 $$ socketBlockingQueue.add(socket)[ FD ]
Line_41 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_62 $$ socketBlockingQueue.add(socket)[ FD ]
Line_17 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))-->Line_27 $$ httpClientSPIAgent.service(mockHttpServletRequest, null)[ FD ]
Line_21 $$ Socket socket = socketChannel.socket()-->Line_76 $$ closePeers(socket, serverSocket)[ FD ]
Line_41 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_45 $$ socketBlockingQueue.add(socket)[ FD ]
Line_61 $$ socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_62 $$ socketBlockingQueue.add(socket)[ FD ]
Line_17 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))-->Line_60 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))[ FD ]
Line_15 $$ IOException ioException = new IOException()-->Line_16 $$ mockIntraband.setIOException(ioException)[ FD ]
Line_10 $$ Throwable throwable = pre.getCause()-->Line_51 $$ Assert.assertSame(IOException.class, throwable.getClass())[ FD ]
Line_86 $$ byte[] receiptData = new byte[8]-->Line_106 $$ BigEndianCodec.putLong(receiptData, 0, receipt)[ FD ]
Line_15 $$ IOException ioException = new IOException()-->Line_34 $$ Assert.assertSame(ioException, throwable.getCause())[ FD ]
Line_22 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_97 $$ socketBlockingQueue.add(socket)[ FD ]
Line_21 $$ Socket socket = socketChannel.socket()-->Line_62 $$ socketBlockingQueue.add(socket)[ FD ]
Line_60 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))-->Line_64 $$ httpClientSPIAgent.service(mockHttpServletRequest, null)[ FD ]
Line_58 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_76 $$ closePeers(socket, serverSocket)[ FD ]
Line_42 $$ SocketImpl socketImpl = swapSocketImpl(socket, null)-->Line_54 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_42 $$ SocketImpl socketImpl = swapSocketImpl(socket, null)-->Line_59 $$ socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_18 $$ ServerSocketChannel serverSocketChannel = SocketUtil.createServerSocketChannel(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort(), null)-->Line_36 $$ ServerSocket serverSocket = serverSocketChannel.socket()[ FD ]
Line_21 $$ Socket socket = socketChannel.socket()-->Line_58 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())[ FD ]
Line_22 $$ Queue<Socket> socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_44 $$ socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue[ FD ]
Line_41 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_76 $$ closePeers(socket, serverSocket)[ FD ]
Line_58 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_62 $$ socketBlockingQueue.add(socket)[ FD ]
Line_17 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))-->Line_47 $$ httpClientSPIAgent.service(mockHttpServletRequest, null)[ FD ]
Line_86 $$ byte[] receiptData = new byte[8]-->Line_107 $$ outputStream.write(receiptData)[ FD ]
Line_36 $$ ServerSocket serverSocket = serverSocketChannel.socket()-->Line_55 $$ closePeers(socket, serverSocket)[ FD ]
Line_21 $$ Socket socket = socketChannel.socket()-->Line_41 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())[ FD ]
Line_21 $$ Socket socket = socketChannel.socket()-->Line_110 $$ socket.close()[ FD ]
Line_21 $$ Socket socket = socketChannel.socket()-->Line_23 $$ socketBlockingQueue.add(socket)[ FD ]
Line_17 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))-->Line_43 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))[ FD ]
Line_44 $$ socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_45 $$ socketBlockingQueue.add(socket)[ FD ]
Line_58 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_97 $$ socketBlockingQueue.add(socket)[ FD ]
Line_44 $$ socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_62 $$ socketBlockingQueue.add(socket)[ FD ]
Line_24 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_109 $$ httpClientSPIAgent.service(mockHttpServletRequest, new MockHttpServletResponse())[ FD ]
Line_41 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_59 $$ socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_17 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))-->Line_109 $$ httpClientSPIAgent.service(mockHttpServletRequest, new MockHttpServletResponse())[ FD ]
Line_10 $$ Throwable throwable = pre.getCause()-->Line_73 $$ Assert.assertSame(IOException.class, throwable.getClass())[ FD ]
Line_36 $$ ServerSocket serverSocket = serverSocketChannel.socket()-->Line_76 $$ closePeers(socket, serverSocket)[ FD ]
Line_80 $$ mockIntraband = new MockIntraband() -->Line_88 $$ return Datagram.createResponseDatagram(datagram, ByteBuffer.wrap(receiptData))[ FD ]
Line_21 $$ Socket socket = socketChannel.socket()-->Line_54 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_41 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_110 $$ socket.close()[ FD ]
Line_41 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_74 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_86 $$ byte[] receiptData = new byte[8]-->Line_88 $$ return Datagram.createResponseDatagram(datagram, ByteBuffer.wrap(receiptData))[ FD ]
Line_36 $$ ServerSocket serverSocket = serverSocketChannel.socket()-->Line_112 $$ serverSocket.close()[ FD ]
Line_41 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_55 $$ closePeers(socket, serverSocket)[ FD ]
Line_41 $$ socket = new Socket(InetAddressUtil.getLoopbackInetAddress(), _spiConfiguration.getConnectorPort())-->Line_97 $$ socketBlockingQueue.add(socket)[ FD ]
Line_86 $$ byte[] receiptData = new byte[8]-->Line_87 $$ BigEndianCodec.putLong(receiptData, 0, receipt)[ FD ]
Line_24 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_47 $$ httpClientSPIAgent.service(mockHttpServletRequest, null)[ FD ]
Line_17 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))-->Line_64 $$ httpClientSPIAgent.service(mockHttpServletRequest, null)[ FD ]
Line_21 $$ Socket socket = socketChannel.socket()-->Line_59 $$ socketImpl = swapSocketImpl(socket, null)[ FD ]
Line_44 $$ socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_61 $$ socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue[ FD ]
Line_61 $$ socketBlockingQueue = httpClientSPIAgent.socketBlockingQueue-->Line_97 $$ socketBlockingQueue.add(socket)[ FD ]
Line_43 $$ httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(mockIntraband))-->Line_64 $$ httpClientSPIAgent.service(mockHttpServletRequest, null)[ FD ]
Line_32 $$ throwable = throwable.getCause()-->Line_73 $$ Assert.assertSame(IOException.class, throwable.getClass())[ FD ]
Line_59 $$ socketImpl = swapSocketImpl(socket, null)-->Line_74 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_36 $$ ServerSocket serverSocket = serverSocketChannel.socket()-->Line_102 $$ Socket remoteSocket = serverSocket.accept()[ FD ]
Line_42 $$ SocketImpl socketImpl = swapSocketImpl(socket, null)-->Line_74 $$ swapSocketImpl(socket, socketImpl)[ FD ]
Line_10 $$ Throwable throwable = pre.getCause()-->Line_32 $$ throwable = throwable.getCause()[ FD ]
Line_21 $$ Socket socket = socketChannel.socket()-->Line_37 $$ closePeers(socket, serverSocket)[ FD ]
Line_32 $$ throwable = throwable.getCause()-->Line_34 $$ Assert.assertSame(ioException, throwable.getCause())[ FD ]
Line_24 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_25 $$ mockHttpServletRequest.setAttribute(WebKeys.SPI_AGENT_PORTLET, _portlet)[ FD ]
