Line_22 $$ found = true-->Line_26 $$ if (found == false) [ FD ]
Line_15 $$ String reason = path + ": no matches found"-->Line_19 $$ reason = differenceBetweenObjectsIgnoringArrayOrder(path + "/*", firstObj, secondObj)[ FD ]
Line_19 $$ reason = differenceBetweenObjectsIgnoringArrayOrder(path + "/*", firstObj, secondObj)-->Line_20 $$ if (reason == null) [ FD ]
Line_10 $$ if (first instanceof List) -->Line_11 $$ if (second instanceof List) [ CD ]
Line_30 $$ if (secondList.isEmpty()) -->Line_31 $$ return null[ CD ]
Line_20 $$ if (reason == null) -->Line_22 $$ found = true[ CD ]
Line_12 $$ List<Object> secondList = new ArrayList((List<Object>) second)-->Line_14 $$ if (firstList.size() == secondList.size()) [ FD ]
Line_17 $$ boolean found = false-->Line_26 $$ if (found == false) [ FD ]
Line_4 $$ if (first == null) -->Line_5 $$ if (second == null) [ CD ]
Line_16 $$ for (Object firstObj : firstList) -->Line_19 $$ reason = differenceBetweenObjectsIgnoringArrayOrder(path + "/*", firstObj, secondObj)[ FD ]
Line_20 $$ if (reason == null) -->Line_21 $$ secondList.remove(secondObj)[ CD ]
Line_10 $$ if (first instanceof List) -->Line_41 $$ if (first instanceof Map) [ CD ]
Line_42 $$ if (second instanceof Map) -->Line_43 $$ return differenceBetweenMapsIgnoringArrayOrder(path, (Map<String, Object>) first, (Map<String, Object>) second)[ CD ]
Line_5 $$ if (second == null) -->Line_8 $$ return path + ": first element is null, the second element is not null"[ CD ]
Line_14 $$ if (firstList.size() == secondList.size()) -->Line_36 $$ return path + ": sizes of the arrays don't match: " + firstList.size() + " != " + secondList.size()[ CD ]
Line_42 $$ if (second instanceof Map) -->Line_45 $$ return path + ": the second element is not a map"[ CD ]
Line_17 $$ boolean found = false-->Line_22 $$ found = true[ FD ]
Line_11 $$ if (second instanceof List) -->Line_14 $$ if (firstList.size() == secondList.size()) [ CD ]
Line_4 $$ if (first == null) -->Line_10 $$ if (first instanceof List) [ CD ]
Line_12 $$ List<Object> secondList = new ArrayList((List<Object>) second)-->Line_30 $$ if (secondList.isEmpty()) [ FD ]
Line_13 $$ List<Object> firstList = (List<Object>) first-->Line_36 $$ return path + ": sizes of the arrays don't match: " + firstList.size() + " != " + secondList.size()[ FD ]
Line_41 $$ if (first instanceof Map) -->Line_48 $$ if (first.equals(second)) [ CD ]
Line_11 $$ if (second instanceof List) -->Line_39 $$ return path + ": the second element is not an array"[ CD ]
Line_18 $$ for (Object secondObj : secondList) -->Line_19 $$ reason = differenceBetweenObjectsIgnoringArrayOrder(path + "/*", firstObj, secondObj)[ FD ]
Line_11 $$ if (second instanceof List) -->Line_12 $$ List<Object> secondList = new ArrayList((List<Object>) second)[ CD ]
Line_12 $$ List<Object> secondList = new ArrayList((List<Object>) second)-->Line_36 $$ return path + ": sizes of the arrays don't match: " + firstList.size() + " != " + secondList.size()[ FD ]
Line_11 $$ if (second instanceof List) -->Line_13 $$ List<Object> firstList = (List<Object>) first[ CD ]
Line_5 $$ if (second == null) -->Line_6 $$ return null[ CD ]
Line_41 $$ if (first instanceof Map) -->Line_42 $$ if (second instanceof Map) [ CD ]
Line_15 $$ String reason = path + ": no matches found"-->Line_20 $$ if (reason == null) [ FD ]
Line_13 $$ List<Object> firstList = (List<Object>) first-->Line_14 $$ if (firstList.size() == secondList.size()) [ FD ]
Line_48 $$ if (first.equals(second)) -->Line_49 $$ return null[ CD ]
Line_18 $$ for (Object secondObj : secondList) -->Line_21 $$ secondList.remove(secondObj)[ FD ]
Line_14 $$ if (firstList.size() == secondList.size()) -->Line_15 $$ String reason = path + ": no matches found"[ CD ]
Line_48 $$ if (first.equals(second)) -->Line_51 $$ return path + ": the elements don't match: [" + first + "] != [" + second + "]"[ CD ]
Line_14 $$ if (firstList.size() == secondList.size()) -->Line_30 $$ if (secondList.isEmpty()) [ CD ]
Line_12 $$ List<Object> secondList = new ArrayList((List<Object>) second)-->Line_21 $$ secondList.remove(secondObj)[ FD ]
Line_26 $$ if (found == false) -->Line_27 $$ return reason[ CD ]
Line_30 $$ if (secondList.isEmpty()) -->Line_33 $$ return path + ": the second list is not empty"[ CD ]
