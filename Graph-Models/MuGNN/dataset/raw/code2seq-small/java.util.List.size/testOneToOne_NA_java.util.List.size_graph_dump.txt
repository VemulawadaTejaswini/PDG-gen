Line_6 $$ E d1 = new E()-->Line_10 $$ d1.setReverse(a)[ FD ]
Line_25 $$ s = openSession()-->Line_38 $$ d2 = (E) s.load(E.class, d2id)[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_3 $$ Session s = openSession()[ CD ]
Line_35 $$ s = openSession()-->Line_43 $$ s.delete(d2)[ FD ]
Line_25 $$ s = openSession()-->Line_42 $$ s.delete(a.getForward())[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_45 $$ t.commit()[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_8 $$ E d2 = new E()[ CD ]
Line_17 $$ s = openSession()-->Line_43 $$ s.delete(d2)[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_17 $$ s = openSession()[ CD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_24 $$ s.close()[ CD ]
Line_26 $$ t = s.beginTransaction()-->Line_36 $$ t = s.beginTransaction()[ FD ]
Line_17 $$ s = openSession()-->Line_46 $$ s = openSession()[ FD ]
Line_21 $$ l = s.createQuery("from E e join fetch e.reverse").list()-->Line_22 $$ assertTrue(l.size() == 2)[ FD ]
Line_17 $$ s = openSession()-->Line_27 $$ l = s.createQuery("from E e").list()[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_6 $$ E d1 = new E()[ CD ]
Line_25 $$ s = openSession()-->Line_34 $$ s.close()[ FD ]
Line_25 $$ s = openSession()-->Line_36 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_15 $$ t.commit()[ CD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_20 $$ assertTrue(l.size() == 1)[ CD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_19 $$ List l = s.createQuery("from E e, A a where e.reverse = a.forward and a = ?").setEntity(0, a).list()[ CD ]
Line_3 $$ Session s = openSession()-->Line_36 $$ t = s.beginTransaction()[ FD ]
Line_5 $$ A a = new A()-->Line_39 $$ assertTrue(a == a.getForward().getReverse())[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_41 $$ s.delete(a)[ CD ]
Line_18 $$ t = s.beginTransaction()-->Line_50 $$ t.commit()[ FD ]
Line_25 $$ s = openSession()-->Line_48 $$ l = s.createQuery("from E e").list()[ FD ]
Line_21 $$ l = s.createQuery("from E e join fetch e.reverse").list()-->Line_28 $$ assertTrue(l.size() == 2)[ FD ]
Line_5 $$ A a = new A()-->Line_13 $$ Serializable aid = s.save(a)[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_15 $$ t.commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_51 $$ s.close()[ FD ]
Line_17 $$ s = openSession()-->Line_37 $$ a = (A) s.load(A.class, aid)[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_32 $$ assertTrue(e == e.getReverse().getForward())[ CD ]
Line_17 $$ s = openSession()-->Line_19 $$ List l = s.createQuery("from E e, A a where e.reverse = a.forward and a = ?").setEntity(0, a).list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ Transaction t = s.beginTransaction()[ FD ]
Line_17 $$ s = openSession()-->Line_25 $$ s = openSession()[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_36 $$ t = s.beginTransaction()[ CD ]
Line_35 $$ s = openSession()-->Line_38 $$ d2 = (E) s.load(E.class, d2id)[ FD ]
Line_29 $$ E e = (E) l.get(0)-->Line_32 $$ assertTrue(e == e.getReverse().getForward())[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_47 $$ t = s.beginTransaction()[ FD ]
Line_26 $$ t = s.beginTransaction()-->Line_47 $$ t = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_26 $$ t = s.beginTransaction()[ FD ]
Line_19 $$ List l = s.createQuery("from E e, A a where e.reverse = a.forward and a = ?").setEntity(0, a).list()-->Line_48 $$ l = s.createQuery("from E e").list()[ FD ]
Line_7 $$ C1 c = new C1()-->Line_12 $$ d2.setReverse(c)[ FD ]
Line_18 $$ t = s.beginTransaction()-->Line_47 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_18 $$ t = s.beginTransaction()[ FD ]
Line_21 $$ l = s.createQuery("from E e join fetch e.reverse").list()-->Line_48 $$ l = s.createQuery("from E e").list()[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_4 $$ Transaction t = s.beginTransaction()[ CD ]
Line_19 $$ List l = s.createQuery("from E e, A a where e.reverse = a.forward and a = ?").setEntity(0, a).list()-->Line_22 $$ assertTrue(l.size() == 2)[ FD ]
Line_18 $$ t = s.beginTransaction()-->Line_23 $$ t.commit()[ FD ]
Line_35 $$ s = openSession()-->Line_42 $$ s.delete(a.getForward())[ FD ]
Line_17 $$ s = openSession()-->Line_26 $$ t = s.beginTransaction()[ FD ]
Line_25 $$ s = openSession()-->Line_35 $$ s = openSession()[ FD ]
Line_19 $$ List l = s.createQuery("from E e, A a where e.reverse = a.forward and a = ?").setEntity(0, a).list()-->Line_29 $$ E e = (E) l.get(0)[ FD ]
Line_17 $$ s = openSession()-->Line_42 $$ s.delete(a.getForward())[ FD ]
Line_35 $$ s = openSession()-->Line_44 $$ s.delete(d2.getReverse())[ FD ]
Line_46 $$ s = openSession()-->Line_51 $$ s.close()[ FD ]
Line_19 $$ List l = s.createQuery("from E e, A a where e.reverse = a.forward and a = ?").setEntity(0, a).list()-->Line_31 $$ e = (E) l.get(1)[ FD ]
Line_21 $$ l = s.createQuery("from E e join fetch e.reverse").list()-->Line_29 $$ E e = (E) l.get(0)[ FD ]
Line_21 $$ l = s.createQuery("from E e join fetch e.reverse").list()-->Line_49 $$ assertTrue(l.size() == 0)[ FD ]
Line_3 $$ Session s = openSession()-->Line_38 $$ d2 = (E) s.load(E.class, d2id)[ FD ]
Line_8 $$ E d2 = new E()-->Line_11 $$ c.setForward(d2)[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_28 $$ assertTrue(l.size() == 2)[ CD ]
Line_25 $$ s = openSession()-->Line_43 $$ s.delete(d2)[ FD ]
Line_19 $$ List l = s.createQuery("from E e, A a where e.reverse = a.forward and a = ?").setEntity(0, a).list()-->Line_20 $$ assertTrue(l.size() == 1)[ FD ]
Line_5 $$ A a = new A()-->Line_37 $$ a = (A) s.load(A.class, aid)[ FD ]
Line_3 $$ Session s = openSession()-->Line_16 $$ s.close()[ FD ]
Line_25 $$ s = openSession()-->Line_27 $$ l = s.createQuery("from E e").list()[ FD ]
Line_21 $$ l = s.createQuery("from E e join fetch e.reverse").list()-->Line_31 $$ e = (E) l.get(1)[ FD ]
Line_17 $$ s = openSession()-->Line_34 $$ s.close()[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_43 $$ s.delete(d2)[ CD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_47 $$ t = s.beginTransaction()[ CD ]
Line_5 $$ A a = new A()-->Line_10 $$ d1.setReverse(a)[ FD ]
Line_35 $$ s = openSession()-->Line_41 $$ s.delete(a)[ FD ]
Line_21 $$ l = s.createQuery("from E e join fetch e.reverse").list()-->Line_27 $$ l = s.createQuery("from E e").list()[ FD ]
Line_26 $$ t = s.beginTransaction()-->Line_50 $$ t.commit()[ FD ]
Line_19 $$ List l = s.createQuery("from E e, A a where e.reverse = a.forward and a = ?").setEntity(0, a).list()-->Line_27 $$ l = s.createQuery("from E e").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_35 $$ s = openSession()[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_51 $$ s.close()[ CD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_48 $$ l = s.createQuery("from E e").list()[ CD ]
Line_35 $$ s = openSession()-->Line_36 $$ t = s.beginTransaction()[ FD ]
Line_36 $$ t = s.beginTransaction()-->Line_50 $$ t.commit()[ FD ]
Line_36 $$ t = s.beginTransaction()-->Line_47 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_50 $$ t.commit()[ CD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_35 $$ s = openSession()[ CD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_9 $$ a.setForward(d1)[ CD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_16 $$ s.close()[ CD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_11 $$ c.setForward(d2)[ CD ]
Line_17 $$ s = openSession()-->Line_44 $$ s.delete(d2.getReverse())[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_33 $$ t.commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_48 $$ l = s.createQuery("from E e").list()[ FD ]
Line_25 $$ s = openSession()-->Line_46 $$ s = openSession()[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_26 $$ t = s.beginTransaction()[ CD ]
Line_5 $$ A a = new A()-->Line_9 $$ a.setForward(d1)[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_42 $$ s.delete(a.getForward())[ CD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_14 $$ Serializable d2id = s.save(d2)[ CD ]
Line_5 $$ A a = new A()-->Line_19 $$ List l = s.createQuery("from E e, A a where e.reverse = a.forward and a = ?").setEntity(0, a).list()[ FD ]
Line_8 $$ E d2 = new E()-->Line_12 $$ d2.setReverse(c)[ FD ]
Line_17 $$ s = openSession()-->Line_35 $$ s = openSession()[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_38 $$ d2 = (E) s.load(E.class, d2id)[ CD ]
Line_3 $$ Session s = openSession()-->Line_46 $$ s = openSession()[ FD ]
Line_17 $$ s = openSession()-->Line_18 $$ t = s.beginTransaction()[ FD ]
Line_17 $$ s = openSession()-->Line_47 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_27 $$ l = s.createQuery("from E e").list()[ CD ]
Line_37 $$ a = (A) s.load(A.class, aid)-->Line_41 $$ s.delete(a)[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_34 $$ s.close()[ CD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_44 $$ s.delete(d2.getReverse())[ CD ]
Line_17 $$ s = openSession()-->Line_24 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_24 $$ s.close()[ FD ]
Line_38 $$ d2 = (E) s.load(E.class, d2id)-->Line_44 $$ s.delete(d2.getReverse())[ FD ]
Line_46 $$ s = openSession()-->Line_48 $$ l = s.createQuery("from E e").list()[ FD ]
Line_25 $$ s = openSession()-->Line_26 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_10 $$ d1.setReverse(a)[ CD ]
Line_27 $$ l = s.createQuery("from E e").list()-->Line_29 $$ E e = (E) l.get(0)[ FD ]
Line_7 $$ C1 c = new C1()-->Line_11 $$ c.setForward(d2)[ FD ]
Line_37 $$ a = (A) s.load(A.class, aid)-->Line_39 $$ assertTrue(a == a.getForward().getReverse())[ FD ]
Line_27 $$ l = s.createQuery("from E e").list()-->Line_48 $$ l = s.createQuery("from E e").list()[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_39 $$ assertTrue(a == a.getForward().getReverse())[ CD ]
Line_3 $$ Session s = openSession()-->Line_21 $$ l = s.createQuery("from E e join fetch e.reverse").list()[ FD ]
Line_35 $$ s = openSession()-->Line_48 $$ l = s.createQuery("from E e").list()[ FD ]
Line_29 $$ E e = (E) l.get(0)-->Line_31 $$ e = (E) l.get(1)[ FD ]
Line_37 $$ a = (A) s.load(A.class, aid)-->Line_42 $$ s.delete(a.getForward())[ FD ]
Line_38 $$ d2 = (E) s.load(E.class, d2id)-->Line_43 $$ s.delete(d2)[ FD ]
Line_18 $$ t = s.beginTransaction()-->Line_26 $$ t = s.beginTransaction()[ FD ]
Line_5 $$ A a = new A()-->Line_42 $$ s.delete(a.getForward())[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_40 $$ assertTrue(d2 == d2.getReverse().getForward())[ CD ]
Line_3 $$ Session s = openSession()-->Line_34 $$ s.close()[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_49 $$ assertTrue(l.size() == 0)[ CD ]
Line_27 $$ l = s.createQuery("from E e").list()-->Line_28 $$ assertTrue(l.size() == 2)[ FD ]
Line_26 $$ t = s.beginTransaction()-->Line_45 $$ t.commit()[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_18 $$ t = s.beginTransaction()[ CD ]
Line_3 $$ Session s = openSession()-->Line_41 $$ s.delete(a)[ FD ]
Line_36 $$ t = s.beginTransaction()-->Line_45 $$ t.commit()[ FD ]
Line_25 $$ s = openSession()-->Line_37 $$ a = (A) s.load(A.class, aid)[ FD ]
Line_3 $$ Session s = openSession()-->Line_44 $$ s.delete(d2.getReverse())[ FD ]
Line_47 $$ t = s.beginTransaction()-->Line_50 $$ t.commit()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_50 $$ t.commit()[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_46 $$ s = openSession()[ CD ]
Line_25 $$ s = openSession()-->Line_47 $$ t = s.beginTransaction()[ FD ]
Line_35 $$ s = openSession()-->Line_51 $$ s.close()[ FD ]
Line_19 $$ List l = s.createQuery("from E e, A a where e.reverse = a.forward and a = ?").setEntity(0, a).list()-->Line_28 $$ assertTrue(l.size() == 2)[ FD ]
Line_8 $$ E d2 = new E()-->Line_40 $$ assertTrue(d2 == d2.getReverse().getForward())[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_30 $$ assertTrue(e == e.getReverse().getForward())[ CD ]
Line_25 $$ s = openSession()-->Line_44 $$ s.delete(d2.getReverse())[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_25 $$ s = openSession()[ CD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_29 $$ E e = (E) l.get(0)[ CD ]
Line_3 $$ Session s = openSession()-->Line_17 $$ s = openSession()[ FD ]
Line_13 $$ Serializable aid = s.save(a)-->Line_37 $$ a = (A) s.load(A.class, aid)[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_36 $$ t = s.beginTransaction()[ FD ]
Line_14 $$ Serializable d2id = s.save(d2)-->Line_38 $$ d2 = (E) s.load(E.class, d2id)[ FD ]
Line_35 $$ s = openSession()-->Line_47 $$ t = s.beginTransaction()[ FD ]
Line_27 $$ l = s.createQuery("from E e").list()-->Line_49 $$ assertTrue(l.size() == 0)[ FD ]
Line_48 $$ l = s.createQuery("from E e").list()-->Line_49 $$ assertTrue(l.size() == 0)[ FD ]
Line_25 $$ s = openSession()-->Line_41 $$ s.delete(a)[ FD ]
Line_46 $$ s = openSession()-->Line_47 $$ t = s.beginTransaction()[ FD ]
Line_17 $$ s = openSession()-->Line_21 $$ l = s.createQuery("from E e join fetch e.reverse").list()[ FD ]
Line_17 $$ s = openSession()-->Line_38 $$ d2 = (E) s.load(E.class, d2id)[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_22 $$ assertTrue(l.size() == 2)[ CD ]
Line_35 $$ s = openSession()-->Line_37 $$ a = (A) s.load(A.class, aid)[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_23 $$ t.commit()[ FD ]
Line_18 $$ t = s.beginTransaction()-->Line_36 $$ t = s.beginTransaction()[ FD ]
Line_38 $$ d2 = (E) s.load(E.class, d2id)-->Line_40 $$ assertTrue(d2 == d2.getReverse().getForward())[ FD ]
Line_8 $$ E d2 = new E()-->Line_38 $$ d2 = (E) s.load(E.class, d2id)[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_23 $$ t.commit()[ CD ]
Line_3 $$ Session s = openSession()-->Line_27 $$ l = s.createQuery("from E e").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_42 $$ s.delete(a.getForward())[ FD ]
Line_31 $$ e = (E) l.get(1)-->Line_32 $$ assertTrue(e == e.getReverse().getForward())[ FD ]
Line_17 $$ s = openSession()-->Line_48 $$ l = s.createQuery("from E e").list()[ FD ]
Line_17 $$ s = openSession()-->Line_51 $$ s.close()[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_13 $$ Serializable aid = s.save(a)[ CD ]
Line_19 $$ List l = s.createQuery("from E e, A a where e.reverse = a.forward and a = ?").setEntity(0, a).list()-->Line_49 $$ assertTrue(l.size() == 0)[ FD ]
Line_35 $$ s = openSession()-->Line_46 $$ s = openSession()[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_5 $$ A a = new A()[ CD ]
Line_29 $$ E e = (E) l.get(0)-->Line_30 $$ assertTrue(e == e.getReverse().getForward())[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_7 $$ C1 c = new C1()[ CD ]
Line_5 $$ A a = new A()-->Line_41 $$ s.delete(a)[ FD ]
Line_25 $$ s = openSession()-->Line_51 $$ s.close()[ FD ]
Line_17 $$ s = openSession()-->Line_41 $$ s.delete(a)[ FD ]
Line_8 $$ E d2 = new E()-->Line_43 $$ s.delete(d2)[ FD ]
Line_26 $$ t = s.beginTransaction()-->Line_33 $$ t.commit()[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_45 $$ t.commit()[ CD ]
Line_18 $$ t = s.beginTransaction()-->Line_45 $$ t.commit()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_26 $$ t = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_14 $$ Serializable d2id = s.save(d2)[ FD ]
Line_8 $$ E d2 = new E()-->Line_14 $$ Serializable d2id = s.save(d2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_13 $$ Serializable aid = s.save(a)[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_21 $$ l = s.createQuery("from E e join fetch e.reverse").list()[ CD ]
Line_6 $$ E d1 = new E()-->Line_9 $$ a.setForward(d1)[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_12 $$ d2.setReverse(c)[ CD ]
Line_8 $$ E d2 = new E()-->Line_44 $$ s.delete(d2.getReverse())[ FD ]
Line_18 $$ t = s.beginTransaction()-->Line_33 $$ t.commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_47 $$ t = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_19 $$ List l = s.createQuery("from E e, A a where e.reverse = a.forward and a = ?").setEntity(0, a).list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_25 $$ s = openSession()[ FD ]
Line_17 $$ s = openSession()-->Line_36 $$ t = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_37 $$ a = (A) s.load(A.class, aid)[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_37 $$ a = (A) s.load(A.class, aid)[ CD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_33 $$ t.commit()[ CD ]
Line_3 $$ Session s = openSession()-->Line_43 $$ s.delete(d2)[ FD ]
Line_2 $$ public void testOneToOne() throws Exception -->Line_31 $$ e = (E) l.get(1)[ CD ]
Line_3 $$ Session s = openSession()-->Line_18 $$ t = s.beginTransaction()[ FD ]
Line_27 $$ l = s.createQuery("from E e").list()-->Line_31 $$ e = (E) l.get(1)[ FD ]
Line_19 $$ List l = s.createQuery("from E e, A a where e.reverse = a.forward and a = ?").setEntity(0, a).list()-->Line_21 $$ l = s.createQuery("from E e join fetch e.reverse").list()[ FD ]
