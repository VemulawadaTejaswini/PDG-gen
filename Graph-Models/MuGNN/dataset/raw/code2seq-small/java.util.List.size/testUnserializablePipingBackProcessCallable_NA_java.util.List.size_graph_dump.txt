Line_22 $$ cause = cause.getCause()-->Line_34 $$ Assert.assertSame(ProcessException.class, cause.getClass())[ FD ]
Line_5 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(LocalProcessExecutor.class.getName(), Level.WARNING)) -->Line_37 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_20 $$ cause = logRecord.getThrown()-->Line_36 $$ Assert.assertSame(NotSerializableException.class, cause.getClass())[ FD ]
Line_12 $$ Throwable cause = ee.getCause()-->Line_20 $$ cause = logRecord.getThrown()[ FD ]
Line_12 $$ Throwable cause = ee.getCause()-->Line_34 $$ Assert.assertSame(ProcessException.class, cause.getClass())[ FD ]
Line_14 $$ cause = cause.getCause()-->Line_34 $$ Assert.assertSame(ProcessException.class, cause.getClass())[ FD ]
Line_12 $$ Throwable cause = ee.getCause()-->Line_14 $$ cause = cause.getCause()[ FD ]
Line_20 $$ cause = logRecord.getThrown()-->Line_21 $$ Assert.assertSame(WriteAbortedException.class, cause.getClass())[ FD ]
Line_6 $$ ProcessChannel<Serializable> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), unserializablePipingBackProcessCallable)-->Line_28 $$ NoticeableFuture<Serializable> noticeableFuture = processChannel.getProcessNoticeableFuture()[ FD ]
Line_22 $$ cause = cause.getCause()-->Line_35 $$ cause = cause.getCause()[ FD ]
Line_5 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(LocalProcessExecutor.class.getName(), Level.WARNING)) -->Line_16 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_35 $$ cause = cause.getCause()-->Line_36 $$ Assert.assertSame(NotSerializableException.class, cause.getClass())[ FD ]
Line_12 $$ Throwable cause = ee.getCause()-->Line_22 $$ cause = cause.getCause()[ FD ]
Line_18 $$ LogRecord logRecord = logRecords.get(0)-->Line_20 $$ cause = logRecord.getThrown()[ FD ]
Line_18 $$ LogRecord logRecord = logRecords.get(0)-->Line_19 $$ Assert.assertEquals("Caught a write aborted exception", logRecord.getMessage())[ FD ]
Line_4 $$ UnserializablePipingBackProcessCallable unserializablePipingBackProcessCallable = new UnserializablePipingBackProcessCallable()-->Line_27 $$ ProcessChannel<Serializable> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), unserializablePipingBackProcessCallable)[ FD ]
Line_12 $$ Throwable cause = ee.getCause()-->Line_36 $$ Assert.assertSame(NotSerializableException.class, cause.getClass())[ FD ]
Line_14 $$ cause = cause.getCause()-->Line_22 $$ cause = cause.getCause()[ FD ]
Line_20 $$ cause = logRecord.getThrown()-->Line_23 $$ Assert.assertSame(NotSerializableException.class, cause.getClass())[ FD ]
Line_12 $$ Throwable cause = ee.getCause()-->Line_23 $$ Assert.assertSame(NotSerializableException.class, cause.getClass())[ FD ]
Line_20 $$ cause = logRecord.getThrown()-->Line_34 $$ Assert.assertSame(ProcessException.class, cause.getClass())[ FD ]
Line_12 $$ Throwable cause = ee.getCause()-->Line_13 $$ Assert.assertSame(ProcessException.class, cause.getClass())[ FD ]
Line_4 $$ UnserializablePipingBackProcessCallable unserializablePipingBackProcessCallable = new UnserializablePipingBackProcessCallable()-->Line_6 $$ ProcessChannel<Serializable> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), unserializablePipingBackProcessCallable)[ FD ]
Line_16 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_17 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_14 $$ cause = cause.getCause()-->Line_21 $$ Assert.assertSame(WriteAbortedException.class, cause.getClass())[ FD ]
Line_12 $$ Throwable cause = ee.getCause()-->Line_15 $$ Assert.assertSame(NotSerializableException.class, cause.getClass())[ FD ]
Line_14 $$ cause = cause.getCause()-->Line_35 $$ cause = cause.getCause()[ FD ]
Line_20 $$ cause = logRecord.getThrown()-->Line_35 $$ cause = cause.getCause()[ FD ]
Line_7 $$ NoticeableFuture<Serializable> noticeableFuture = processChannel.getProcessNoticeableFuture()-->Line_30 $$ noticeableFuture.get()[ FD ]
Line_14 $$ cause = cause.getCause()-->Line_36 $$ Assert.assertSame(NotSerializableException.class, cause.getClass())[ FD ]
Line_7 $$ NoticeableFuture<Serializable> noticeableFuture = processChannel.getProcessNoticeableFuture()-->Line_9 $$ noticeableFuture.get()[ FD ]
Line_22 $$ cause = cause.getCause()-->Line_23 $$ Assert.assertSame(NotSerializableException.class, cause.getClass())[ FD ]
Line_16 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_38 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_12 $$ Throwable cause = ee.getCause()-->Line_35 $$ cause = cause.getCause()[ FD ]
Line_22 $$ cause = cause.getCause()-->Line_36 $$ Assert.assertSame(NotSerializableException.class, cause.getClass())[ FD ]
Line_16 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_18 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_12 $$ Throwable cause = ee.getCause()-->Line_21 $$ Assert.assertSame(WriteAbortedException.class, cause.getClass())[ FD ]
Line_20 $$ cause = logRecord.getThrown()-->Line_22 $$ cause = cause.getCause()[ FD ]
Line_14 $$ cause = cause.getCause()-->Line_23 $$ Assert.assertSame(NotSerializableException.class, cause.getClass())[ FD ]
Line_14 $$ cause = cause.getCause()-->Line_20 $$ cause = logRecord.getThrown()[ FD ]
Line_6 $$ ProcessChannel<Serializable> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), unserializablePipingBackProcessCallable)-->Line_7 $$ NoticeableFuture<Serializable> noticeableFuture = processChannel.getProcessNoticeableFuture()[ FD ]
Line_14 $$ cause = cause.getCause()-->Line_15 $$ Assert.assertSame(NotSerializableException.class, cause.getClass())[ FD ]
