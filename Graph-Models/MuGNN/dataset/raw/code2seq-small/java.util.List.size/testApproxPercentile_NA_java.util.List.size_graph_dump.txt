Line_2 $$ public void testApproxPercentile() throws Exception -->Line_4 $$ Multimap<String, Long> orderKeyByStatus = ArrayListMultimap.create()[ CD ]
Line_6 $$ for (MaterializedRow row : raw.getMaterializedRows()) -->Line_7 $$ orderKeyByStatus.put((String) row.getField(0), (Long) row.getField(1))[ FD ]
Line_6 $$ for (MaterializedRow row : raw.getMaterializedRows()) -->Line_14 $$ Double totalPrice = (Double) row.getField(2)[ FD ]
Line_6 $$ for (MaterializedRow row : raw.getMaterializedRows()) -->Line_15 $$ Long orderKeyWeighted = (Long) row.getField(3)[ FD ]
Line_6 $$ for (MaterializedRow row : raw.getMaterializedRows()) -->Line_13 $$ Long orderKey = (Long) row.getField(1)[ FD ]
Line_2 $$ public void testApproxPercentile() throws Exception -->Line_5 $$ Multimap<String, Double> totalPriceByStatus = ArrayListMultimap.create()[ CD ]
Line_6 $$ for (MaterializedRow row : raw.getMaterializedRows()) -->Line_12 $$ String status = (String) row.getField(0)[ FD ]
Line_6 $$ for (MaterializedRow row : raw.getMaterializedRows()) -->Line_16 $$ Double totalPriceWeighted = (Double) row.getField(4)[ FD ]
Line_12 $$ String status = (String) row.getField(0)-->Line_17 $$ List<Long> orderKeys = Ordering.natural().sortedCopy(orderKeyByStatus.get(status))[ FD ]
Line_17 $$ List<Long> orderKeys = Ordering.natural().sortedCopy(orderKeyByStatus.get(status))-->Line_19 $$ assertTrue(orderKey >= orderKeys.get((int) (0.49 * orderKeys.size())))[ FD ]
Line_17 $$ List<Long> orderKeys = Ordering.natural().sortedCopy(orderKeyByStatus.get(status))-->Line_20 $$ assertTrue(orderKey <= orderKeys.get((int) (0.51 * orderKeys.size())))[ FD ]
Line_4 $$ Multimap<String, Long> orderKeyByStatus = ArrayListMultimap.create()-->Line_7 $$ orderKeyByStatus.put((String) row.getField(0), (Long) row.getField(1))[ FD ]
Line_18 $$ List<Double> totalPrices = Ordering.natural().sortedCopy(totalPriceByStatus.get(status))-->Line_23 $$ assertTrue(totalPrice >= totalPrices.get((int) (0.49 * totalPrices.size())))[ FD ]
Line_12 $$ String status = (String) row.getField(0)-->Line_18 $$ List<Double> totalPrices = Ordering.natural().sortedCopy(totalPriceByStatus.get(status))[ FD ]
Line_18 $$ List<Double> totalPrices = Ordering.natural().sortedCopy(totalPriceByStatus.get(status))-->Line_25 $$ assertTrue(totalPriceWeighted >= totalPrices.get((int) (0.49 * totalPrices.size())))[ FD ]
Line_4 $$ Multimap<String, Long> orderKeyByStatus = ArrayListMultimap.create()-->Line_17 $$ List<Long> orderKeys = Ordering.natural().sortedCopy(orderKeyByStatus.get(status))[ FD ]
Line_2 $$ public void testApproxPercentile() throws Exception -->Line_10 $$ MaterializedResult actual = computeActual("" + "SELECT orderstatus, " + "   approx_percentile(orderkey, 0.5), " + "   approx_percentile(totalprice, 0.5)," + "   approx_percentile(orderkey, 2, 0.5)," + "   approx_percentile(totalprice, 2, 0.5)\n" + "FROM ORDERS\n" + "GROUP BY orderstatus")[ CD ]
Line_17 $$ List<Long> orderKeys = Ordering.natural().sortedCopy(orderKeyByStatus.get(status))-->Line_21 $$ assertTrue(orderKeyWeighted >= orderKeys.get((int) (0.49 * orderKeys.size())))[ FD ]
Line_3 $$ MaterializedResult raw = computeActual("SELECT orderstatus, orderkey, totalprice FROM ORDERS")-->Line_6 $$ for (MaterializedRow row : raw.getMaterializedRows()) [ FD ]
Line_6 $$ for (MaterializedRow row : raw.getMaterializedRows()) -->Line_8 $$ totalPriceByStatus.put((String) row.getField(0), (Double) row.getField(2))[ FD ]
Line_10 $$ MaterializedResult actual = computeActual("" + "SELECT orderstatus, " + "   approx_percentile(orderkey, 0.5), " + "   approx_percentile(totalprice, 0.5)," + "   approx_percentile(orderkey, 2, 0.5)," + "   approx_percentile(totalprice, 2, 0.5)\n" + "FROM ORDERS\n" + "GROUP BY orderstatus")-->Line_11 $$ for (MaterializedRow row : actual.getMaterializedRows()) [ FD ]
Line_5 $$ Multimap<String, Double> totalPriceByStatus = ArrayListMultimap.create()-->Line_18 $$ List<Double> totalPrices = Ordering.natural().sortedCopy(totalPriceByStatus.get(status))[ FD ]
Line_2 $$ public void testApproxPercentile() throws Exception -->Line_3 $$ MaterializedResult raw = computeActual("SELECT orderstatus, orderkey, totalprice FROM ORDERS")[ CD ]
Line_5 $$ Multimap<String, Double> totalPriceByStatus = ArrayListMultimap.create()-->Line_8 $$ totalPriceByStatus.put((String) row.getField(0), (Double) row.getField(2))[ FD ]
Line_18 $$ List<Double> totalPrices = Ordering.natural().sortedCopy(totalPriceByStatus.get(status))-->Line_24 $$ assertTrue(totalPrice <= totalPrices.get((int) (0.51 * totalPrices.size())))[ FD ]
Line_17 $$ List<Long> orderKeys = Ordering.natural().sortedCopy(orderKeyByStatus.get(status))-->Line_22 $$ assertTrue(orderKeyWeighted <= orderKeys.get((int) (0.51 * orderKeys.size())))[ FD ]
Line_18 $$ List<Double> totalPrices = Ordering.natural().sortedCopy(totalPriceByStatus.get(status))-->Line_26 $$ assertTrue(totalPriceWeighted <= totalPrices.get((int) (0.51 * totalPrices.size())))[ FD ]
