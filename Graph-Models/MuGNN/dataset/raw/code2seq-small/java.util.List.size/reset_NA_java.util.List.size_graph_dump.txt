Line_7 $$ final List<String> order = getScopesState().myOrder-->Line_10 $$ final int idx1 = order.indexOf(((MyNode) o1).getDisplayName())[ FD ]
Line_2 $$ public void reset() -->Line_4 $$ loadScopes(mySharedScopesManager)[ CD ]
Line_2 $$ public void reset() -->Line_6 $$ loadComponentState()[ CD ]
Line_2 $$ public void reset() -->Line_3 $$ myRoot.removeAllChildren()[ CD ]
Line_2 $$ public void reset() -->Line_15 $$ if (getScopesState().myOrder.size() != myRoot.getChildCount()) [ CD ]
Line_2 $$ public void reset() -->Line_5 $$ loadScopes(myLocalScopesManager)[ CD ]
Line_8 $$ TreeUtil.sort(myRoot, new Comparator<DefaultMutableTreeNode>() -->Line_12 $$ return idx1 - idx2[ CD ]
Line_2 $$ public void reset() -->Line_8 $$ TreeUtil.sort(myRoot, new Comparator<DefaultMutableTreeNode>() [ CD ]
Line_2 $$ public void reset() -->Line_18 $$ super.reset()[ CD ]
Line_8 $$ TreeUtil.sort(myRoot, new Comparator<DefaultMutableTreeNode>() -->Line_10 $$ final int idx1 = order.indexOf(((MyNode) o1).getDisplayName())[ CD ]
Line_15 $$ if (getScopesState().myOrder.size() != myRoot.getChildCount()) -->Line_16 $$ loadStateOrder()[ CD ]
Line_2 $$ public void reset() -->Line_7 $$ final List<String> order = getScopesState().myOrder[ CD ]
Line_7 $$ final List<String> order = getScopesState().myOrder-->Line_11 $$ final int idx2 = order.indexOf(((MyNode) o2).getDisplayName())[ FD ]
Line_8 $$ TreeUtil.sort(myRoot, new Comparator<DefaultMutableTreeNode>() -->Line_11 $$ final int idx2 = order.indexOf(((MyNode) o2).getDisplayName())[ CD ]
