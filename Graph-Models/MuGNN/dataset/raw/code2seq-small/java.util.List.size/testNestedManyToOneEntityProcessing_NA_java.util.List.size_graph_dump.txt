Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_43 $$ assertEquals("inappropriate", workReportedMessage.reason)[ CD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_22 $$ final Session workSession = openSession()[ CD ]
Line_19 $$ final String sql = queryDetails.getSqlStatement()-->Line_26 $$ PreparedStatement ps = connection.prepareStatement(sql)[ FD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_9 $$ session.save(poster)[ CD ]
Line_4 $$ Session session = openSession()-->Line_15 $$ session.close()[ FD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_40 $$ assertNotNull(result)[ CD ]
Line_26 $$ PreparedStatement ps = connection.prepareStatement(sql)-->Line_27 $$ ps.setInt(1, 0)[ FD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_20 $$ final ResultSetProcessor resultSetProcessor = queryDetails.getResultSetProcessor()[ CD ]
Line_18 $$ final LoadQueryDetails queryDetails = Helper.INSTANCE.buildLoadQueryDetails(plan, sessionFactory())-->Line_19 $$ final String sql = queryDetails.getSqlStatement()[ FD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_3 $$ final EntityPersister entityPersister = sessionFactory().getEntityPersister(ReportedMessage.class.getName())[ CD ]
Line_24 $$ workSession.doWork(new Work() -->Line_26 $$ PreparedStatement ps = connection.prepareStatement(sql)[ CD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_38 $$ assertEquals(1, results.size())[ CD ]
Line_28 $$ ResultSet resultSet = ps.executeQuery()-->Line_34 $$ resultSet.close()[ FD ]
Line_22 $$ final Session workSession = openSession()-->Line_24 $$ workSession.doWork(new Work() [ FD ]
Line_3 $$ final EntityPersister entityPersister = sessionFactory().getEntityPersister(ReportedMessage.class.getName())-->Line_17 $$ final LoadPlan plan = Helper.INSTANCE.buildLoadPlan(sessionFactory(), entityPersister)[ FD ]
Line_24 $$ workSession.doWork(new Work() -->Line_35 $$ ps.close()[ CD ]
Line_24 $$ workSession.doWork(new Work() -->Line_29 $$ results.addAll(resultSetProcessor.extractResults(resultSet, (SessionImplementor) workSession, new QueryParameters(), new NamedParameterContext() [ CD ]
Line_21 $$ final List results = new ArrayList()-->Line_39 $$ Object result = results.get(0)[ FD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_4 $$ Session session = openSession()[ CD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_17 $$ final LoadPlan plan = Helper.INSTANCE.buildLoadPlan(sessionFactory(), entityPersister)[ CD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_47 $$ assertEquals(1, workMessage.mid.intValue())[ CD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_11 $$ poster.messages.add(message)[ CD ]
Line_4 $$ Session session = openSession()-->Line_14 $$ session.getTransaction().commit()[ FD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_39 $$ Object result = results.get(0)[ CD ]
Line_4 $$ Session session = openSession()-->Line_8 $$ session.save(message)[ FD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_6 $$ Message message = new Message(1, "the message")[ CD ]
Line_12 $$ ReportedMessage reportedMessage = new ReportedMessage(0, "inappropriate", message)-->Line_13 $$ session.save(reportedMessage)[ FD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_45 $$ assertNotNull(workMessage)[ CD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_10 $$ message.poster = poster[ CD ]
Line_17 $$ final LoadPlan plan = Helper.INSTANCE.buildLoadPlan(sessionFactory(), entityPersister)-->Line_18 $$ final LoadQueryDetails queryDetails = Helper.INSTANCE.buildLoadQueryDetails(plan, sessionFactory())[ FD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_19 $$ final String sql = queryDetails.getSqlStatement()[ CD ]
Line_28 $$ ResultSet resultSet = ps.executeQuery()-->Line_29 $$ results.addAll(resultSetProcessor.extractResults(resultSet, (SessionImplementor) workSession, new QueryParameters(), new NamedParameterContext() [ FD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_57 $$ session = openSession()[ CD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_60 $$ session.createQuery("delete Message").executeUpdate()[ CD ]
Line_22 $$ final Session workSession = openSession()-->Line_54 $$ workSession.getTransaction().commit()[ FD ]
Line_24 $$ workSession.doWork(new Work() -->Line_26 $$ PreparedStatement ps = connection.prepareStatement(sql)[ FD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_51 $$ assertEquals(2, workPoster.pid.intValue())[ CD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_53 $$ assertFalse(Hibernate.isInitialized(workPoster.messages))[ CD ]
Line_7 $$ Poster poster = new Poster(2, "the poster")-->Line_9 $$ session.save(poster)[ FD ]
Line_24 $$ workSession.doWork(new Work() -->Line_27 $$ ps.setInt(1, 0)[ CD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_18 $$ final LoadQueryDetails queryDetails = Helper.INSTANCE.buildLoadQueryDetails(plan, sessionFactory())[ CD ]
Line_6 $$ Message message = new Message(1, "the message")-->Line_11 $$ poster.messages.add(message)[ FD ]
Line_29 $$ results.addAll(resultSetProcessor.extractResults(resultSet, (SessionImplementor) workSession, new QueryParameters(), new NamedParameterContext() -->Line_31 $$ return new int[0][ CD ]
Line_18 $$ final LoadQueryDetails queryDetails = Helper.INSTANCE.buildLoadQueryDetails(plan, sessionFactory())-->Line_20 $$ final ResultSetProcessor resultSetProcessor = queryDetails.getResultSetProcessor()[ FD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_12 $$ ReportedMessage reportedMessage = new ReportedMessage(0, "inappropriate", message)[ CD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_48 $$ assertEquals("the message", workMessage.msgTxt)[ CD ]
Line_4 $$ Session session = openSession()-->Line_59 $$ session.createQuery("delete ReportedMessage").executeUpdate()[ FD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_23 $$ workSession.beginTransaction()[ CD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_49 $$ assertTrue(Hibernate.isInitialized(workMessage.poster))[ CD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_5 $$ session.beginTransaction()[ CD ]
Line_21 $$ final List results = new ArrayList()-->Line_29 $$ results.addAll(resultSetProcessor.extractResults(resultSet, (SessionImplementor) workSession, new QueryParameters(), new NamedParameterContext() [ FD ]
Line_6 $$ Message message = new Message(1, "the message")-->Line_8 $$ session.save(message)[ FD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_61 $$ session.createQuery("delete Poster").executeUpdate()[ CD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_41 $$ ReportedMessage workReportedMessage = ExtraAssertions.assertTyping(ReportedMessage.class, result)[ CD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_13 $$ session.save(reportedMessage)[ CD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_54 $$ workSession.getTransaction().commit()[ CD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_14 $$ session.getTransaction().commit()[ CD ]
Line_26 $$ PreparedStatement ps = connection.prepareStatement(sql)-->Line_35 $$ ps.close()[ FD ]
Line_20 $$ final ResultSetProcessor resultSetProcessor = queryDetails.getResultSetProcessor()-->Line_29 $$ results.addAll(resultSetProcessor.extractResults(resultSet, (SessionImplementor) workSession, new QueryParameters(), new NamedParameterContext() [ FD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_58 $$ session.beginTransaction()[ CD ]
Line_4 $$ Session session = openSession()-->Line_61 $$ session.createQuery("delete Poster").executeUpdate()[ FD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_46 $$ assertTrue(Hibernate.isInitialized(workMessage))[ CD ]
Line_4 $$ Session session = openSession()-->Line_5 $$ session.beginTransaction()[ FD ]
Line_22 $$ final Session workSession = openSession()-->Line_23 $$ workSession.beginTransaction()[ FD ]
Line_21 $$ final List results = new ArrayList()-->Line_38 $$ assertEquals(1, results.size())[ FD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_55 $$ workSession.close()[ CD ]
Line_4 $$ Session session = openSession()-->Line_63 $$ session.close()[ FD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_24 $$ workSession.doWork(new Work() [ CD ]
Line_4 $$ Session session = openSession()-->Line_13 $$ session.save(reportedMessage)[ FD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_8 $$ session.save(message)[ CD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_62 $$ session.getTransaction().commit()[ CD ]
Line_4 $$ Session session = openSession()-->Line_60 $$ session.createQuery("delete Message").executeUpdate()[ FD ]
Line_4 $$ Session session = openSession()-->Line_62 $$ session.getTransaction().commit()[ FD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_42 $$ assertEquals(0, workReportedMessage.id.intValue())[ CD ]
Line_24 $$ workSession.doWork(new Work() -->Line_34 $$ resultSet.close()[ CD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_52 $$ assertEquals("the poster", workPoster.name)[ CD ]
Line_4 $$ Session session = openSession()-->Line_58 $$ session.beginTransaction()[ FD ]
Line_26 $$ PreparedStatement ps = connection.prepareStatement(sql)-->Line_28 $$ ResultSet resultSet = ps.executeQuery()[ FD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_59 $$ session.createQuery("delete ReportedMessage").executeUpdate()[ CD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_21 $$ final List results = new ArrayList()[ CD ]
Line_22 $$ final Session workSession = openSession()-->Line_55 $$ workSession.close()[ FD ]
Line_4 $$ Session session = openSession()-->Line_9 $$ session.save(poster)[ FD ]
Line_24 $$ workSession.doWork(new Work() -->Line_28 $$ ResultSet resultSet = ps.executeQuery()[ CD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_7 $$ Poster poster = new Poster(2, "the poster")[ CD ]
Line_7 $$ Poster poster = new Poster(2, "the poster")-->Line_10 $$ message.poster = poster[ FD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_15 $$ session.close()[ CD ]
Line_2 $$ public void testNestedManyToOneEntityProcessing() throws Exception -->Line_63 $$ session.close()[ CD ]
