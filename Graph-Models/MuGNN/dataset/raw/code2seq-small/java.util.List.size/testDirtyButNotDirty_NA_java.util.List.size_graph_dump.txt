Line_3 $$ EntityManager manager = getOrCreateEntityManager()-->Line_55 $$ manager.remove(joe)[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_38 $$ assertEquals(customers.size(), 1)[ CD ]
Line_12 $$ Customer joe = new Customer()-->Line_15 $$ joe.setAddress("San Francisco")[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_41 $$ customers = manager.createQuery("select c from Customer c").getResultList()[ CD ]
Line_41 $$ customers = manager.createQuery("select c from Customer c").getResultList()-->Line_42 $$ for (Iterator iter = customers.iterator(); iter.hasNext(); ) [ FD ]
Line_12 $$ Customer joe = new Customer()-->Line_26 $$ long[] ids = [ FD ]
Line_34 $$ for (Iterator iter = customers.iterator(); iter.hasNext(); ) -->Line_35 $$ Customer c = (Customer) iter.next()[ CD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_57 $$ assertTrue(manager.createQuery("select p from Person p").getResultList().isEmpty())[ CD ]
Line_33 $$ List customers = manager.createQuery("select c from Customer c left join fetch c.salesperson").getResultList()-->Line_46 $$ assertEquals(customers.size(), 1)[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_15 $$ joe.setAddress("San Francisco")[ CD ]
Line_3 $$ EntityManager manager = getOrCreateEntityManager()-->Line_30 $$ assertEquals(manager.createQuery("select p from Person p where p.class = Customer").getResultList().size(), 1)[ FD ]
Line_35 $$ Customer c = (Customer) iter.next()-->Line_36 $$ assertEquals(c.getSalesperson().getName(), "Mark")[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_20 $$ Person yomomma = new Person()[ CD ]
Line_3 $$ EntityManager manager = getOrCreateEntityManager()-->Line_51 $$ yomomma = manager.find(Person.class, Long.valueOf(ids[2]))[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_13 $$ joe.setName("Joe")[ CD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_4 $$ manager.getTransaction().begin()[ CD ]
Line_5 $$ Employee mark = new Employee()-->Line_7 $$ mark.setTitle("internal sales")[ FD ]
Line_41 $$ customers = manager.createQuery("select c from Customer c").getResultList()-->Line_46 $$ assertEquals(customers.size(), 1)[ FD ]
Line_51 $$ yomomma = manager.find(Person.class, Long.valueOf(ids[2]))-->Line_56 $$ manager.remove(yomomma)[ FD ]
Line_33 $$ List customers = manager.createQuery("select c from Customer c left join fetch c.salesperson").getResultList()-->Line_41 $$ customers = manager.createQuery("select c from Customer c").getResultList()[ FD ]
Line_3 $$ EntityManager manager = getOrCreateEntityManager()-->Line_32 $$ manager.getTransaction().begin()[ FD ]
Line_3 $$ EntityManager manager = getOrCreateEntityManager()-->Line_49 $$ mark = manager.find(Employee.class, Long.valueOf(ids[0]))[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_10 $$ mark.setZip("30305")[ CD ]
Line_3 $$ EntityManager manager = getOrCreateEntityManager()-->Line_29 $$ assertEquals(manager.createQuery("select p.address, p.name from Person p order by p.name").getResultList().size(), 3)[ FD ]
Line_34 $$ for (Iterator iter = customers.iterator(); iter.hasNext(); ) -->Line_35 $$ Customer c = (Customer) iter.next()[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_58 $$ manager.getTransaction().commit()[ CD ]
Line_49 $$ mark = manager.find(Employee.class, Long.valueOf(ids[0]))-->Line_52 $$ mark.setZip("30306")[ FD ]
Line_20 $$ Person yomomma = new Person()-->Line_26 $$ long[] ids = [ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_34 $$ for (Iterator iter = customers.iterator(); iter.hasNext(); ) [ CD ]
Line_12 $$ Customer joe = new Customer()-->Line_18 $$ joe.setComments("Very demanding")[ FD ]
Line_3 $$ EntityManager manager = getOrCreateEntityManager()-->Line_50 $$ joe = manager.find(Customer.class, Long.valueOf(ids[1]))[ FD ]
Line_3 $$ EntityManager manager = getOrCreateEntityManager()-->Line_40 $$ manager.getTransaction().begin()[ FD ]
Line_12 $$ Customer joe = new Customer()-->Line_13 $$ joe.setName("Joe")[ FD ]
Line_12 $$ Customer joe = new Customer()-->Line_14 $$ joe.setSex('M')[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_27 $$ manager.getTransaction().commit()[ CD ]
Line_34 $$ for (Iterator iter = customers.iterator(); iter.hasNext(); ) -->Line_36 $$ assertEquals(c.getSalesperson().getName(), "Mark")[ CD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_3 $$ EntityManager manager = getOrCreateEntityManager()[ CD ]
Line_5 $$ Employee mark = new Employee()-->Line_19 $$ joe.setSalesperson(mark)[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_51 $$ yomomma = manager.find(Person.class, Long.valueOf(ids[2]))[ CD ]
Line_43 $$ Customer c = (Customer) iter.next()-->Line_44 $$ assertEquals(c.getSalesperson().getName(), "Mark")[ FD ]
Line_3 $$ EntityManager manager = getOrCreateEntityManager()-->Line_59 $$ manager.close()[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_17 $$ joe.setCountry("USA")[ CD ]
Line_3 $$ EntityManager manager = getOrCreateEntityManager()-->Line_47 $$ manager.getTransaction().commit()[ FD ]
Line_12 $$ Customer joe = new Customer()-->Line_17 $$ joe.setCountry("USA")[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_26 $$ long[] ids = [ CD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_53 $$ assertEquals(1, manager.createQuery("select p from Person p where p.zip = '30306'").getResultList().size())[ CD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_59 $$ manager.close()[ CD ]
Line_5 $$ Employee mark = new Employee()-->Line_49 $$ mark = manager.find(Employee.class, Long.valueOf(ids[0]))[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_32 $$ manager.getTransaction().begin()[ CD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_47 $$ manager.getTransaction().commit()[ CD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_28 $$ manager.getTransaction().begin()[ CD ]
Line_33 $$ List customers = manager.createQuery("select c from Customer c left join fetch c.salesperson").getResultList()-->Line_34 $$ for (Iterator iter = customers.iterator(); iter.hasNext(); ) [ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_23 $$ manager.persist(mark)[ CD ]
Line_33 $$ List customers = manager.createQuery("select c from Customer c left join fetch c.salesperson").getResultList()-->Line_42 $$ for (Iterator iter = customers.iterator(); iter.hasNext(); ) [ FD ]
Line_3 $$ EntityManager manager = getOrCreateEntityManager()-->Line_57 $$ assertTrue(manager.createQuery("select p from Person p").getResultList().isEmpty())[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_22 $$ yomomma.setSex('F')[ CD ]
Line_12 $$ Customer joe = new Customer()-->Line_19 $$ joe.setSalesperson(mark)[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_8 $$ mark.setSex('M')[ CD ]
Line_5 $$ Employee mark = new Employee()-->Line_26 $$ long[] ids = [ FD ]
Line_42 $$ for (Iterator iter = customers.iterator(); iter.hasNext(); ) -->Line_43 $$ Customer c = (Customer) iter.next()[ CD ]
Line_3 $$ EntityManager manager = getOrCreateEntityManager()-->Line_58 $$ manager.getTransaction().commit()[ FD ]
Line_3 $$ EntityManager manager = getOrCreateEntityManager()-->Line_31 $$ manager.getTransaction().commit()[ FD ]
Line_12 $$ Customer joe = new Customer()-->Line_55 $$ manager.remove(joe)[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_5 $$ Employee mark = new Employee()[ CD ]
Line_34 $$ for (Iterator iter = customers.iterator(); iter.hasNext(); ) -->Line_43 $$ Customer c = (Customer) iter.next()[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_49 $$ mark = manager.find(Employee.class, Long.valueOf(ids[0]))[ CD ]
Line_3 $$ EntityManager manager = getOrCreateEntityManager()-->Line_27 $$ manager.getTransaction().commit()[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_42 $$ for (Iterator iter = customers.iterator(); iter.hasNext(); ) [ CD ]
Line_42 $$ for (Iterator iter = customers.iterator(); iter.hasNext(); ) -->Line_44 $$ assertEquals(c.getSalesperson().getName(), "Mark")[ CD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_30 $$ assertEquals(manager.createQuery("select p from Person p where p.class = Customer").getResultList().size(), 1)[ CD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_33 $$ List customers = manager.createQuery("select c from Customer c left join fetch c.salesperson").getResultList()[ CD ]
Line_42 $$ for (Iterator iter = customers.iterator(); iter.hasNext(); ) -->Line_43 $$ Customer c = (Customer) iter.next()[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_25 $$ manager.persist(yomomma)[ CD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_24 $$ manager.persist(joe)[ CD ]
Line_5 $$ Employee mark = new Employee()-->Line_8 $$ mark.setSex('M')[ FD ]
Line_3 $$ EntityManager manager = getOrCreateEntityManager()-->Line_4 $$ manager.getTransaction().begin()[ FD ]
Line_5 $$ Employee mark = new Employee()-->Line_11 $$ mark.setCountry("USA")[ FD ]
Line_20 $$ Person yomomma = new Person()-->Line_56 $$ manager.remove(yomomma)[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_31 $$ manager.getTransaction().commit()[ CD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_19 $$ joe.setSalesperson(mark)[ CD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_50 $$ joe = manager.find(Customer.class, Long.valueOf(ids[1]))[ CD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_48 $$ manager.getTransaction().begin()[ CD ]
Line_50 $$ joe = manager.find(Customer.class, Long.valueOf(ids[1]))-->Line_55 $$ manager.remove(joe)[ FD ]
Line_3 $$ EntityManager manager = getOrCreateEntityManager()-->Line_48 $$ manager.getTransaction().begin()[ FD ]
Line_35 $$ Customer c = (Customer) iter.next()-->Line_44 $$ assertEquals(c.getSalesperson().getName(), "Mark")[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_55 $$ manager.remove(joe)[ CD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_14 $$ joe.setSex('M')[ CD ]
Line_20 $$ Person yomomma = new Person()-->Line_21 $$ yomomma.setName("mum")[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_16 $$ joe.setZip("XXXXX")[ CD ]
Line_3 $$ EntityManager manager = getOrCreateEntityManager()-->Line_53 $$ assertEquals(1, manager.createQuery("select p from Person p where p.zip = '30306'").getResultList().size())[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_39 $$ manager.getTransaction().commit()[ CD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_21 $$ yomomma.setName("mum")[ CD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_7 $$ mark.setTitle("internal sales")[ CD ]
Line_3 $$ EntityManager manager = getOrCreateEntityManager()-->Line_56 $$ manager.remove(yomomma)[ FD ]
Line_49 $$ mark = manager.find(Employee.class, Long.valueOf(ids[0]))-->Line_54 $$ manager.remove(mark)[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_6 $$ mark.setName("Mark")[ CD ]
Line_3 $$ EntityManager manager = getOrCreateEntityManager()-->Line_41 $$ customers = manager.createQuery("select c from Customer c").getResultList()[ FD ]
Line_34 $$ for (Iterator iter = customers.iterator(); iter.hasNext(); ) -->Line_42 $$ for (Iterator iter = customers.iterator(); iter.hasNext(); ) [ FD ]
Line_3 $$ EntityManager manager = getOrCreateEntityManager()-->Line_23 $$ manager.persist(mark)[ FD ]
Line_3 $$ EntityManager manager = getOrCreateEntityManager()-->Line_28 $$ manager.getTransaction().begin()[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_40 $$ manager.getTransaction().begin()[ CD ]
Line_5 $$ Employee mark = new Employee()-->Line_54 $$ manager.remove(mark)[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_12 $$ Customer joe = new Customer()[ CD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_11 $$ mark.setCountry("USA")[ CD ]
Line_12 $$ Customer joe = new Customer()-->Line_24 $$ manager.persist(joe)[ FD ]
Line_3 $$ EntityManager manager = getOrCreateEntityManager()-->Line_25 $$ manager.persist(yomomma)[ FD ]
Line_3 $$ EntityManager manager = getOrCreateEntityManager()-->Line_54 $$ manager.remove(mark)[ FD ]
Line_5 $$ Employee mark = new Employee()-->Line_23 $$ manager.persist(mark)[ FD ]
Line_5 $$ Employee mark = new Employee()-->Line_9 $$ mark.setAddress("buckhead")[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_52 $$ mark.setZip("30306")[ CD ]
Line_3 $$ EntityManager manager = getOrCreateEntityManager()-->Line_39 $$ manager.getTransaction().commit()[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_9 $$ mark.setAddress("buckhead")[ CD ]
Line_5 $$ Employee mark = new Employee()-->Line_6 $$ mark.setName("Mark")[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_54 $$ manager.remove(mark)[ CD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_46 $$ assertEquals(customers.size(), 1)[ CD ]
Line_33 $$ List customers = manager.createQuery("select c from Customer c left join fetch c.salesperson").getResultList()-->Line_38 $$ assertEquals(customers.size(), 1)[ FD ]
Line_3 $$ EntityManager manager = getOrCreateEntityManager()-->Line_24 $$ manager.persist(joe)[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_56 $$ manager.remove(yomomma)[ CD ]
Line_3 $$ EntityManager manager = getOrCreateEntityManager()-->Line_33 $$ List customers = manager.createQuery("select c from Customer c left join fetch c.salesperson").getResultList()[ FD ]
Line_12 $$ Customer joe = new Customer()-->Line_16 $$ joe.setZip("XXXXX")[ FD ]
Line_20 $$ Person yomomma = new Person()-->Line_22 $$ yomomma.setSex('F')[ FD ]
Line_12 $$ Customer joe = new Customer()-->Line_50 $$ joe = manager.find(Customer.class, Long.valueOf(ids[1]))[ FD ]
Line_20 $$ Person yomomma = new Person()-->Line_25 $$ manager.persist(yomomma)[ FD ]
Line_5 $$ Employee mark = new Employee()-->Line_10 $$ mark.setZip("30305")[ FD ]
Line_5 $$ Employee mark = new Employee()-->Line_52 $$ mark.setZip("30306")[ FD ]
Line_20 $$ Person yomomma = new Person()-->Line_51 $$ yomomma = manager.find(Person.class, Long.valueOf(ids[2]))[ FD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_29 $$ assertEquals(manager.createQuery("select p.address, p.name from Person p order by p.name").getResultList().size(), 3)[ CD ]
Line_2 $$ public void testDirtyButNotDirty() throws Exception -->Line_18 $$ joe.setComments("Very demanding")[ CD ]
