Line_3 $$ for (int i = myMergingStrategies.size() - 1; i >= 0; i--) -->Line_4 $$ if (ReflectionUtil.isAssignable(myMergingStrategyClasses.get(i), returnType)) [ FD ]
Line_4 $$ if (ReflectionUtil.isAssignable(myMergingStrategyClasses.get(i), returnType)) -->Line_6 $$ if (o != null) [ CD ]
Line_5 $$ final Object o = myMergingStrategies.get(i).mergeChildren(returnType, implementations)-->Line_6 $$ if (o != null) [ FD ]
Line_6 $$ if (o != null) -->Line_7 $$ return o[ CD ]
Line_11 $$ if (implementations.size() == 1) -->Line_12 $$ return implementations.get(0)[ CD ]
Line_2 $$ protected final Object mergeImplementations(final Class returnType, final List<Object> implementations) -->Line_3 $$ for (int i = myMergingStrategies.size() - 1; i >= 0; i--) [ CD ]
Line_2 $$ protected final Object mergeImplementations(final Class returnType, final List<Object> implementations) -->Line_14 $$ return mergeModels(returnType, implementations)[ FD ]
Line_4 $$ if (ReflectionUtil.isAssignable(myMergingStrategyClasses.get(i), returnType)) -->Line_5 $$ final Object o = myMergingStrategies.get(i).mergeChildren(returnType, implementations)[ CD ]
Line_2 $$ protected final Object mergeImplementations(final Class returnType, final List<Object> implementations) -->Line_12 $$ return implementations.get(0)[ FD ]
Line_2 $$ protected final Object mergeImplementations(final Class returnType, final List<Object> implementations) -->Line_11 $$ if (implementations.size() == 1) [ CD ]
Line_3 $$ for (int i = myMergingStrategies.size() - 1; i >= 0; i--) -->Line_5 $$ final Object o = myMergingStrategies.get(i).mergeChildren(returnType, implementations)[ FD ]
Line_2 $$ protected final Object mergeImplementations(final Class returnType, final List<Object> implementations) -->Line_4 $$ if (ReflectionUtil.isAssignable(myMergingStrategyClasses.get(i), returnType)) [ FD ]
Line_2 $$ protected final Object mergeImplementations(final Class returnType, final List<Object> implementations) -->Line_11 $$ if (implementations.size() == 1) [ FD ]
Line_2 $$ protected final Object mergeImplementations(final Class returnType, final List<Object> implementations) -->Line_14 $$ return mergeModels(returnType, implementations)[ CD ]
Line_3 $$ for (int i = myMergingStrategies.size() - 1; i >= 0; i--) -->Line_4 $$ if (ReflectionUtil.isAssignable(myMergingStrategyClasses.get(i), returnType)) [ CD ]
Line_2 $$ protected final Object mergeImplementations(final Class returnType, final List<Object> implementations) -->Line_5 $$ final Object o = myMergingStrategies.get(i).mergeChildren(returnType, implementations)[ FD ]
