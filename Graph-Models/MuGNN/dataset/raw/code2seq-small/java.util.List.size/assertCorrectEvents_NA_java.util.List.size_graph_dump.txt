Line_4 $$ for (int chunkIndex = 0; chunkIndex < expected.length; chunkIndex++) -->Line_10 $$ Collections.sort(expectedChunkList)[ CD ]
Line_6 $$ final List<String> expectedChunkList = new ArrayList(Arrays.asList(chunk))-->Line_12 $$ assertEquals("Chunk " + chunkIndex, expectedChunkList.toString(), actualChunkList.toString())[ FD ]
Line_4 $$ for (int chunkIndex = 0; chunkIndex < expected.length; chunkIndex++) -->Line_12 $$ assertEquals("Chunk " + chunkIndex, expectedChunkList.toString(), actualChunkList.toString())[ CD ]
Line_9 $$ final List<String> actualChunkList = new ArrayList(myLog.subList(runningIndex, nextIndex))-->Line_12 $$ assertEquals("Chunk " + chunkIndex, expectedChunkList.toString(), actualChunkList.toString())[ FD ]
Line_4 $$ for (int chunkIndex = 0; chunkIndex < expected.length; chunkIndex++) -->Line_7 $$ int nextIndex = runningIndex + chunk.length[ CD ]
Line_4 $$ for (int chunkIndex = 0; chunkIndex < expected.length; chunkIndex++) -->Line_6 $$ final List<String> expectedChunkList = new ArrayList(Arrays.asList(chunk))[ CD ]
Line_4 $$ for (int chunkIndex = 0; chunkIndex < expected.length; chunkIndex++) -->Line_13 $$ runningIndex = nextIndex[ CD ]
Line_9 $$ final List<String> actualChunkList = new ArrayList(myLog.subList(runningIndex, nextIndex))-->Line_11 $$ Collections.sort(actualChunkList)[ FD ]
Line_2 $$ public void assertCorrectEvents(String[][] expected) -->Line_15 $$ assertEquals("More events than needed", runningIndex, myLog.size())[ CD ]
Line_2 $$ public void assertCorrectEvents(String[][] expected) -->Line_4 $$ for (int chunkIndex = 0; chunkIndex < expected.length; chunkIndex++) [ CD ]
Line_7 $$ int nextIndex = runningIndex + chunk.length-->Line_13 $$ runningIndex = nextIndex[ FD ]
Line_2 $$ public void assertCorrectEvents(String[][] expected) -->Line_3 $$ int runningIndex = 0[ CD ]
Line_3 $$ int runningIndex = 0-->Line_13 $$ runningIndex = nextIndex[ FD ]
Line_4 $$ for (int chunkIndex = 0; chunkIndex < expected.length; chunkIndex++) -->Line_9 $$ final List<String> actualChunkList = new ArrayList(myLog.subList(runningIndex, nextIndex))[ CD ]
Line_6 $$ final List<String> expectedChunkList = new ArrayList(Arrays.asList(chunk))-->Line_8 $$ assertTrue("Expected chunk " + expectedChunkList.toString(), nextIndex <= myLog.size())[ FD ]
Line_13 $$ runningIndex = nextIndex-->Line_15 $$ assertEquals("More events than needed", runningIndex, myLog.size())[ FD ]
Line_5 $$ String[] chunk = expected[chunkIndex]-->Line_6 $$ final List<String> expectedChunkList = new ArrayList(Arrays.asList(chunk))[ FD ]
Line_7 $$ int nextIndex = runningIndex + chunk.length-->Line_9 $$ final List<String> actualChunkList = new ArrayList(myLog.subList(runningIndex, nextIndex))[ FD ]
Line_3 $$ int runningIndex = 0-->Line_15 $$ assertEquals("More events than needed", runningIndex, myLog.size())[ FD ]
Line_4 $$ for (int chunkIndex = 0; chunkIndex < expected.length; chunkIndex++) -->Line_5 $$ String[] chunk = expected[chunkIndex][ CD ]
Line_4 $$ for (int chunkIndex = 0; chunkIndex < expected.length; chunkIndex++) -->Line_8 $$ assertTrue("Expected chunk " + expectedChunkList.toString(), nextIndex <= myLog.size())[ CD ]
Line_4 $$ for (int chunkIndex = 0; chunkIndex < expected.length; chunkIndex++) -->Line_11 $$ Collections.sort(actualChunkList)[ CD ]
Line_13 $$ runningIndex = nextIndex-->Line_9 $$ final List<String> actualChunkList = new ArrayList(myLog.subList(runningIndex, nextIndex))[ FD ]
Line_6 $$ final List<String> expectedChunkList = new ArrayList(Arrays.asList(chunk))-->Line_10 $$ Collections.sort(expectedChunkList)[ FD ]
Line_3 $$ int runningIndex = 0-->Line_9 $$ final List<String> actualChunkList = new ArrayList(myLog.subList(runningIndex, nextIndex))[ FD ]
