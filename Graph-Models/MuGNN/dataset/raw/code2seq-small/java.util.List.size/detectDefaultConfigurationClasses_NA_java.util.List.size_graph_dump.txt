Line_5 $$ for (Class<?> candidate : declaringClass.getDeclaredClasses()) -->Line_10 $$ logger.debug(String.format("Ignoring class [%s]; it must be static, non-private, non-final, and annotated " + "with @Configuration to be considered a default configuration class.", candidate.getName()))[ FD ]
Line_2 $$ public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) -->Line_5 $$ for (Class<?> candidate : declaringClass.getDeclaredClasses()) [ FD ]
Line_2 $$ public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) -->Line_16 $$ logger.info(String.format("Could not detect default configuration classes for test class [%s]: " + "%s does not declare any static, non-private, non-final, nested classes " + "annotated with @Configuration.", declaringClass.getName(), declaringClass.getSimpleName()))[ FD ]
Line_6 $$ if (isDefaultConfigurationClassCandidate(candidate)) -->Line_7 $$ configClasses.add(candidate)[ CD ]
Line_2 $$ public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) -->Line_19 $$ return configClasses.toArray(new Class<?>[configClasses.size()])[ CD ]
Line_14 $$ if (configClasses.isEmpty()) -->Line_15 $$ if (logger.isInfoEnabled()) [ CD ]
Line_15 $$ if (logger.isInfoEnabled()) -->Line_16 $$ logger.info(String.format("Could not detect default configuration classes for test class [%s]: " + "%s does not declare any static, non-private, non-final, nested classes " + "annotated with @Configuration.", declaringClass.getName(), declaringClass.getSimpleName()))[ CD ]
Line_6 $$ if (isDefaultConfigurationClassCandidate(candidate)) -->Line_9 $$ if (logger.isDebugEnabled()) [ CD ]
Line_5 $$ for (Class<?> candidate : declaringClass.getDeclaredClasses()) -->Line_6 $$ if (isDefaultConfigurationClassCandidate(candidate)) [ FD ]
Line_2 $$ public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) -->Line_3 $$ Assert.notNull(declaringClass, "Declaring class must not be null")[ FD ]
Line_9 $$ if (logger.isDebugEnabled()) -->Line_10 $$ logger.debug(String.format("Ignoring class [%s]; it must be static, non-private, non-final, and annotated " + "with @Configuration to be considered a default configuration class.", candidate.getName()))[ CD ]
Line_2 $$ public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) -->Line_4 $$ List<Class<?>> configClasses = new ArrayList<Class<?>>()[ CD ]
Line_2 $$ public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) -->Line_14 $$ if (configClasses.isEmpty()) [ CD ]
Line_4 $$ List<Class<?>> configClasses = new ArrayList<Class<?>>()-->Line_14 $$ if (configClasses.isEmpty()) [ FD ]
Line_4 $$ List<Class<?>> configClasses = new ArrayList<Class<?>>()-->Line_7 $$ configClasses.add(candidate)[ FD ]
Line_4 $$ List<Class<?>> configClasses = new ArrayList<Class<?>>()-->Line_19 $$ return configClasses.toArray(new Class<?>[configClasses.size()])[ FD ]
Line_2 $$ public static Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) -->Line_3 $$ Assert.notNull(declaringClass, "Declaring class must not be null")[ CD ]
Line_5 $$ for (Class<?> candidate : declaringClass.getDeclaredClasses()) -->Line_7 $$ configClasses.add(candidate)[ FD ]
