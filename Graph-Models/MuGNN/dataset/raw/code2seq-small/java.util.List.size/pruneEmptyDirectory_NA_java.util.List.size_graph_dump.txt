Line_2 $$ private boolean pruneEmptyDirectory(DirectoryObject directoryObject) throws IOException -->Line_13 $$ localFileReader.listFilesAndDirectories(directoryObject, fileNames, directoryNames, cvsFileSystem)[ FD ]
Line_8 $$ if (!localFileReader.exists(directoryObject, cvsFileSystem)) -->Line_9 $$ return true[ CD ]
Line_12 $$ final List directoryNames = new ArrayList()-->Line_20 $$ for (Iterator it = directoryNames.iterator(); it.hasNext(); ) [ FD ]
Line_2 $$ private boolean pruneEmptyDirectory(DirectoryObject directoryObject) throws IOException -->Line_32 $$ adminWriter.pruneDirectory(directoryObject, cvsFileSystem)[ FD ]
Line_2 $$ private boolean pruneEmptyDirectory(DirectoryObject directoryObject) throws IOException -->Line_7 $$ directoriesToScan.remove(directoryObject)[ FD ]
Line_2 $$ private boolean pruneEmptyDirectory(DirectoryObject directoryObject) throws IOException -->Line_20 $$ for (Iterator it = directoryNames.iterator(); it.hasNext(); ) [ CD ]
Line_5 $$ final IAdminWriter adminWriter = clientEnvironment.getAdminWriter()-->Line_32 $$ adminWriter.pruneDirectory(directoryObject, cvsFileSystem)[ FD ]
Line_2 $$ private boolean pruneEmptyDirectory(DirectoryObject directoryObject) throws IOException -->Line_26 $$ if (adminReader.hasCvsDirectory(directoryObject, cvsFileSystem)) [ CD ]
Line_2 $$ private boolean pruneEmptyDirectory(DirectoryObject directoryObject) throws IOException -->Line_4 $$ final ICvsFileSystem cvsFileSystem = clientEnvironment.getCvsFileSystem()[ CD ]
Line_2 $$ private boolean pruneEmptyDirectory(DirectoryObject directoryObject) throws IOException -->Line_17 $$ if (hasFileEntry(directoryObject, cvsFileSystem, adminReader)) [ FD ]
Line_4 $$ final ICvsFileSystem cvsFileSystem = clientEnvironment.getCvsFileSystem()-->Line_8 $$ if (!localFileReader.exists(directoryObject, cvsFileSystem)) [ FD ]
Line_20 $$ for (Iterator it = directoryNames.iterator(); it.hasNext(); ) -->Line_22 $$ if (!pruneEmptyDirectory(DirectoryObject.createInstance(directoryObject, directoryName))) [ CD ]
Line_4 $$ final ICvsFileSystem cvsFileSystem = clientEnvironment.getCvsFileSystem()-->Line_13 $$ localFileReader.listFilesAndDirectories(directoryObject, fileNames, directoryNames, cvsFileSystem)[ FD ]
Line_2 $$ private boolean pruneEmptyDirectory(DirectoryObject directoryObject) throws IOException -->Line_17 $$ if (hasFileEntry(directoryObject, cvsFileSystem, adminReader)) [ CD ]
Line_4 $$ final ICvsFileSystem cvsFileSystem = clientEnvironment.getCvsFileSystem()-->Line_32 $$ adminWriter.pruneDirectory(directoryObject, cvsFileSystem)[ FD ]
Line_4 $$ final ICvsFileSystem cvsFileSystem = clientEnvironment.getCvsFileSystem()-->Line_28 $$ adminWriter.removeEntryForFile(directoryObject, cvsFileSystem)[ FD ]
Line_2 $$ private boolean pruneEmptyDirectory(DirectoryObject directoryObject) throws IOException -->Line_5 $$ final IAdminWriter adminWriter = clientEnvironment.getAdminWriter()[ CD ]
Line_2 $$ private boolean pruneEmptyDirectory(DirectoryObject directoryObject) throws IOException -->Line_6 $$ final IAdminReader adminReader = clientEnvironment.getAdminReader()[ CD ]
Line_12 $$ final List directoryNames = new ArrayList()-->Line_13 $$ localFileReader.listFilesAndDirectories(directoryObject, fileNames, directoryNames, cvsFileSystem)[ FD ]
Line_3 $$ final ILocalFileReader localFileReader = clientEnvironment.getLocalFileReader()-->Line_13 $$ localFileReader.listFilesAndDirectories(directoryObject, fileNames, directoryNames, cvsFileSystem)[ FD ]
Line_4 $$ final ICvsFileSystem cvsFileSystem = clientEnvironment.getCvsFileSystem()-->Line_26 $$ if (adminReader.hasCvsDirectory(directoryObject, cvsFileSystem)) [ FD ]
Line_2 $$ private boolean pruneEmptyDirectory(DirectoryObject directoryObject) throws IOException -->Line_14 $$ if (fileNames.size() > 0) [ CD ]
Line_2 $$ private boolean pruneEmptyDirectory(DirectoryObject directoryObject) throws IOException -->Line_7 $$ directoriesToScan.remove(directoryObject)[ CD ]
Line_5 $$ final IAdminWriter adminWriter = clientEnvironment.getAdminWriter()-->Line_28 $$ adminWriter.removeEntryForFile(directoryObject, cvsFileSystem)[ FD ]
Line_2 $$ private boolean pruneEmptyDirectory(DirectoryObject directoryObject) throws IOException -->Line_28 $$ adminWriter.removeEntryForFile(directoryObject, cvsFileSystem)[ FD ]
Line_2 $$ private boolean pruneEmptyDirectory(DirectoryObject directoryObject) throws IOException -->Line_11 $$ final List fileNames = new ArrayList()[ CD ]
Line_2 $$ private boolean pruneEmptyDirectory(DirectoryObject directoryObject) throws IOException -->Line_26 $$ if (adminReader.hasCvsDirectory(directoryObject, cvsFileSystem)) [ FD ]
Line_26 $$ if (adminReader.hasCvsDirectory(directoryObject, cvsFileSystem)) -->Line_33 $$ return true[ CD ]
Line_2 $$ private boolean pruneEmptyDirectory(DirectoryObject directoryObject) throws IOException -->Line_3 $$ final ILocalFileReader localFileReader = clientEnvironment.getLocalFileReader()[ CD ]
Line_3 $$ final ILocalFileReader localFileReader = clientEnvironment.getLocalFileReader()-->Line_8 $$ if (!localFileReader.exists(directoryObject, cvsFileSystem)) [ FD ]
Line_21 $$ final String directoryName = (String) it.next()-->Line_22 $$ if (!pruneEmptyDirectory(DirectoryObject.createInstance(directoryObject, directoryName))) [ FD ]
Line_20 $$ for (Iterator it = directoryNames.iterator(); it.hasNext(); ) -->Line_21 $$ final String directoryName = (String) it.next()[ CD ]
Line_11 $$ final List fileNames = new ArrayList()-->Line_14 $$ if (fileNames.size() > 0) [ FD ]
Line_2 $$ private boolean pruneEmptyDirectory(DirectoryObject directoryObject) throws IOException -->Line_8 $$ if (!localFileReader.exists(directoryObject, cvsFileSystem)) [ FD ]
Line_6 $$ final IAdminReader adminReader = clientEnvironment.getAdminReader()-->Line_17 $$ if (hasFileEntry(directoryObject, cvsFileSystem, adminReader)) [ FD ]
Line_2 $$ private boolean pruneEmptyDirectory(DirectoryObject directoryObject) throws IOException -->Line_13 $$ localFileReader.listFilesAndDirectories(directoryObject, fileNames, directoryNames, cvsFileSystem)[ CD ]
Line_22 $$ if (!pruneEmptyDirectory(DirectoryObject.createInstance(directoryObject, directoryName))) -->Line_23 $$ return false[ CD ]
Line_2 $$ private boolean pruneEmptyDirectory(DirectoryObject directoryObject) throws IOException -->Line_8 $$ if (!localFileReader.exists(directoryObject, cvsFileSystem)) [ CD ]
Line_11 $$ final List fileNames = new ArrayList()-->Line_13 $$ localFileReader.listFilesAndDirectories(directoryObject, fileNames, directoryNames, cvsFileSystem)[ FD ]
Line_4 $$ final ICvsFileSystem cvsFileSystem = clientEnvironment.getCvsFileSystem()-->Line_17 $$ if (hasFileEntry(directoryObject, cvsFileSystem, adminReader)) [ FD ]
Line_17 $$ if (hasFileEntry(directoryObject, cvsFileSystem, adminReader)) -->Line_18 $$ return false[ CD ]
Line_20 $$ for (Iterator it = directoryNames.iterator(); it.hasNext(); ) -->Line_21 $$ final String directoryName = (String) it.next()[ FD ]
Line_26 $$ if (adminReader.hasCvsDirectory(directoryObject, cvsFileSystem)) -->Line_32 $$ adminWriter.pruneDirectory(directoryObject, cvsFileSystem)[ CD ]
Line_6 $$ final IAdminReader adminReader = clientEnvironment.getAdminReader()-->Line_26 $$ if (adminReader.hasCvsDirectory(directoryObject, cvsFileSystem)) [ FD ]
Line_2 $$ private boolean pruneEmptyDirectory(DirectoryObject directoryObject) throws IOException -->Line_35 $$ return false[ CD ]
Line_2 $$ private boolean pruneEmptyDirectory(DirectoryObject directoryObject) throws IOException -->Line_12 $$ final List directoryNames = new ArrayList()[ CD ]
Line_2 $$ private boolean pruneEmptyDirectory(DirectoryObject directoryObject) throws IOException -->Line_22 $$ if (!pruneEmptyDirectory(DirectoryObject.createInstance(directoryObject, directoryName))) [ FD ]
Line_14 $$ if (fileNames.size() > 0) -->Line_15 $$ return false[ CD ]
