Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_9 $$ SkipBadRecords.setReducerMaxSkipGroups(conf, Long.MAX_VALUE)[ FD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_17 $$ conf.setMapOutputValueClass(Text.class)[ FD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_9 $$ SkipBadRecords.setReducerMaxSkipGroups(conf, Long.MAX_VALUE)[ CD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_15 $$ conf.setInputFormat(TextInputFormat.class)[ FD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_8 $$ SkipBadRecords.setMapperMaxSkipRecords(conf, Long.MAX_VALUE)[ FD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_14 $$ FileOutputFormat.setOutputPath(conf, getOutputDir())[ FD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_6 $$ conf.setNumReduceTasks(1)[ FD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_11 $$ conf.setMaxMapAttempts(SkipBadRecords.getAttemptsToStartSkipping(conf) + 1 + mapperBadRecords.size())[ FD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_16 $$ conf.setMapOutputKeyClass(LongWritable.class)[ CD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_14 $$ FileOutputFormat.setOutputPath(conf, getOutputDir())[ CD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_11 $$ conf.setMaxMapAttempts(SkipBadRecords.getAttemptsToStartSkipping(conf) + 1 + mapperBadRecords.size())[ CD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_4 $$ conf.setJobName("mr")[ CD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_15 $$ conf.setInputFormat(TextInputFormat.class)[ CD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_19 $$ conf.setOutputKeyClass(LongWritable.class)[ FD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_20 $$ conf.setOutputValueClass(Text.class)[ FD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_16 $$ conf.setMapOutputKeyClass(LongWritable.class)[ FD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_18 $$ conf.setOutputFormat(TextOutputFormat.class)[ CD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_4 $$ conf.setJobName("mr")[ FD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_22 $$ validateOutput(conf, runningJob, mapperBadRecords, redBadRecords)[ FD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_17 $$ conf.setMapOutputValueClass(Text.class)[ CD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_19 $$ conf.setOutputKeyClass(LongWritable.class)[ CD ]
Line_21 $$ RunningJob runningJob = JobClient.runJob(conf)-->Line_22 $$ validateOutput(conf, runningJob, mapperBadRecords, redBadRecords)[ FD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_5 $$ conf.setNumMapTasks(1)[ CD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_8 $$ SkipBadRecords.setMapperMaxSkipRecords(conf, Long.MAX_VALUE)[ CD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_10 $$ SkipBadRecords.setAttemptsToStartSkipping(conf, 0)[ CD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_20 $$ conf.setOutputValueClass(Text.class)[ CD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_13 $$ FileInputFormat.setInputPaths(conf, getInputDir())[ FD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_7 $$ conf.setInt(JobContext.TASK_TIMEOUT, 30 * 1000)[ FD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_21 $$ RunningJob runningJob = JobClient.runJob(conf)[ CD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_5 $$ conf.setNumMapTasks(1)[ FD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_3 $$ createInput()[ CD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_7 $$ conf.setInt(JobContext.TASK_TIMEOUT, 30 * 1000)[ CD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_22 $$ validateOutput(conf, runningJob, mapperBadRecords, redBadRecords)[ CD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_12 $$ conf.setMaxReduceAttempts(SkipBadRecords.getAttemptsToStartSkipping(conf) + 1 + redBadRecords.size())[ CD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_12 $$ conf.setMaxReduceAttempts(SkipBadRecords.getAttemptsToStartSkipping(conf) + 1 + redBadRecords.size())[ FD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_13 $$ FileInputFormat.setInputPaths(conf, getInputDir())[ CD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_21 $$ RunningJob runningJob = JobClient.runJob(conf)[ FD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_18 $$ conf.setOutputFormat(TextOutputFormat.class)[ FD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_10 $$ SkipBadRecords.setAttemptsToStartSkipping(conf, 0)[ FD ]
Line_2 $$ private void runMapReduce(JobConf conf, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_6 $$ conf.setNumReduceTasks(1)[ CD ]
