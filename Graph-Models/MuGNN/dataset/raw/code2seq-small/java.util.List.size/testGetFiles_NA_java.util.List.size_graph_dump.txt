Line_23 $$ Map<Path, Path> resultPathMap = noticeableFuture.get()-->Line_25 $$ Assert.assertEquals(localFilePath, resultPathMap.get(remoteFilePath1))[ FD ]
Line_5 $$ Map<Path, Path> pathMap = new HashMap()-->Line_9 $$ pathMap.put(remoteFilePath1, localFilePath)[ FD ]
Line_5 $$ Map<Path, Path> pathMap = new HashMap()-->Line_11 $$ NoticeableFuture<Map<Path, Path>> noticeableFuture = _nettyRepository.getFiles(_embeddedChannel, pathMap, true)[ FD ]
Line_18 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_20 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_11 $$ NoticeableFuture<Map<Path, Path>> noticeableFuture = _nettyRepository.getFiles(_embeddedChannel, pathMap, true)-->Line_23 $$ Map<Path, Path> resultPathMap = noticeableFuture.get()[ FD ]
Line_20 $$ LogRecord logRecord = logRecords.get(0)-->Line_21 $$ Assert.assertEquals("Remote file remoteFile2 is not found", logRecord.getMessage())[ FD ]
Line_13 $$ FileResponse fileResponse1 = new FileResponse(remoteFilePath1, Files.size(tempFilePath), -1, false)-->Line_15 $$ Assert.assertTrue(_asyncBroker.takeWithResult(remoteFilePath1, fileResponse1))[ FD ]
Line_8 $$ Path localFilePath = FileServerTestUtil.registerForCleanUp(Paths.get("localFile1"))-->Line_9 $$ pathMap.put(remoteFilePath1, localFilePath)[ FD ]
Line_7 $$ Path remoteFilePath2 = Paths.get("remoteFile2")-->Line_17 $$ Assert.assertTrue(_asyncBroker.takeWithResult(remoteFilePath2, new FileResponse(remoteFilePath2, FileResponse.FILE_NOT_FOUND, -1, false)))[ FD ]
Line_12 $$ Path tempFilePath = FileServerTestUtil.createFileWithData(Paths.get("tempFile"))-->Line_14 $$ fileResponse1.setLocalFile(tempFilePath)[ FD ]
Line_12 $$ Path tempFilePath = FileServerTestUtil.createFileWithData(Paths.get("tempFile"))-->Line_13 $$ FileResponse fileResponse1 = new FileResponse(remoteFilePath1, Files.size(tempFilePath), -1, false)[ FD ]
Line_23 $$ Map<Path, Path> resultPathMap = noticeableFuture.get()-->Line_24 $$ Assert.assertEquals(1, resultPathMap.size())[ FD ]
Line_8 $$ Path localFilePath = FileServerTestUtil.registerForCleanUp(Paths.get("localFile1"))-->Line_25 $$ Assert.assertEquals(localFilePath, resultPathMap.get(remoteFilePath1))[ FD ]
Line_6 $$ Path remoteFilePath1 = Paths.get("remoteFile1")-->Line_9 $$ pathMap.put(remoteFilePath1, localFilePath)[ FD ]
Line_7 $$ Path remoteFilePath2 = Paths.get("remoteFile2")-->Line_10 $$ pathMap.put(remoteFilePath2, Paths.get("localFile2"))[ FD ]
Line_6 $$ Path remoteFilePath1 = Paths.get("remoteFile1")-->Line_15 $$ Assert.assertTrue(_asyncBroker.takeWithResult(remoteFilePath1, fileResponse1))[ FD ]
Line_16 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyRepository.class.getName(), Level.WARNING)) -->Line_18 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_13 $$ FileResponse fileResponse1 = new FileResponse(remoteFilePath1, Files.size(tempFilePath), -1, false)-->Line_14 $$ fileResponse1.setLocalFile(tempFilePath)[ FD ]
Line_18 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_19 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_5 $$ Map<Path, Path> pathMap = new HashMap()-->Line_10 $$ pathMap.put(remoteFilePath2, Paths.get("localFile2"))[ FD ]
Line_6 $$ Path remoteFilePath1 = Paths.get("remoteFile1")-->Line_25 $$ Assert.assertEquals(localFilePath, resultPathMap.get(remoteFilePath1))[ FD ]
