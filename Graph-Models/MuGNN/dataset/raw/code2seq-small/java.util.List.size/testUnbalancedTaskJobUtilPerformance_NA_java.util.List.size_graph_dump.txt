Line_2 $$ public void testUnbalancedTaskJobUtilPerformance() -->Line_18 $$ assertTrue(b)[ CD ]
Line_12 $$ boolean b = JobLauncher.getInstance().invokeConcurrentlyUnderProgress(things, new ProgressIndicatorBase(), false, false, new Processor<Integer>() -->Line_15 $$ return true[ CD ]
Line_2 $$ public void testUnbalancedTaskJobUtilPerformance() -->Line_11 $$ long start = System.currentTimeMillis()[ CD ]
Line_2 $$ public void testUnbalancedTaskJobUtilPerformance() -->Line_5 $$ for (int i = 0; i < things.size(); i++) [ CD ]
Line_8 $$ sum += things.get(i)-->Line_10 $$ assertEquals(59950, sum)[ FD ]
Line_5 $$ for (int i = 0; i < things.size(); i++) -->Line_6 $$ int v = i < 9950 ? 1 : 1000[ CD ]
Line_5 $$ for (int i = 0; i < things.size(); i++) -->Line_8 $$ sum += things.get(i)[ FD ]
Line_12 $$ boolean b = JobLauncher.getInstance().invokeConcurrentlyUnderProgress(things, new ProgressIndicatorBase(), false, false, new Processor<Integer>() -->Line_14 $$ busySleep(o)[ CD ]
Line_5 $$ for (int i = 0; i < things.size(); i++) -->Line_8 $$ sum += things.get(i)[ CD ]
Line_2 $$ public void testUnbalancedTaskJobUtilPerformance() -->Line_12 $$ boolean b = JobLauncher.getInstance().invokeConcurrentlyUnderProgress(things, new ProgressIndicatorBase(), false, false, new Processor<Integer>() [ CD ]
Line_3 $$ List<Integer> things = new ArrayList<Integer>(Collections.<Integer>nCopies(10000, null))-->Line_5 $$ for (int i = 0; i < things.size(); i++) [ FD ]
Line_2 $$ public void testUnbalancedTaskJobUtilPerformance() -->Line_3 $$ List<Integer> things = new ArrayList<Integer>(Collections.<Integer>nCopies(10000, null))[ CD ]
Line_3 $$ List<Integer> things = new ArrayList<Integer>(Collections.<Integer>nCopies(10000, null))-->Line_12 $$ boolean b = JobLauncher.getInstance().invokeConcurrentlyUnderProgress(things, new ProgressIndicatorBase(), false, false, new Processor<Integer>() [ FD ]
Line_5 $$ for (int i = 0; i < things.size(); i++) -->Line_7 $$ things.set(i, v)[ FD ]
Line_2 $$ public void testUnbalancedTaskJobUtilPerformance() -->Line_4 $$ int sum = 0[ CD ]
Line_2 $$ public void testUnbalancedTaskJobUtilPerformance() -->Line_23 $$ assertTrue(message, elapsed < expected)[ CD ]
Line_4 $$ int sum = 0-->Line_8 $$ sum += things.get(i)[ FD ]
Line_3 $$ List<Integer> things = new ArrayList<Integer>(Collections.<Integer>nCopies(10000, null))-->Line_8 $$ sum += things.get(i)[ FD ]
Line_2 $$ public void testUnbalancedTaskJobUtilPerformance() -->Line_22 $$ System.out.println(message)[ CD ]
Line_6 $$ int v = i < 9950 ? 1 : 1000-->Line_7 $$ things.set(i, v)[ FD ]
Line_5 $$ for (int i = 0; i < things.size(); i++) -->Line_7 $$ things.set(i, v)[ CD ]
Line_12 $$ boolean b = JobLauncher.getInstance().invokeConcurrentlyUnderProgress(things, new ProgressIndicatorBase(), false, false, new Processor<Integer>() -->Line_14 $$ busySleep(o)[ FD ]
Line_2 $$ public void testUnbalancedTaskJobUtilPerformance() -->Line_10 $$ assertEquals(59950, sum)[ CD ]
Line_2 $$ public void testUnbalancedTaskJobUtilPerformance() -->Line_19 $$ long elapsed = System.currentTimeMillis() - start[ CD ]
Line_12 $$ boolean b = JobLauncher.getInstance().invokeConcurrentlyUnderProgress(things, new ProgressIndicatorBase(), false, false, new Processor<Integer>() -->Line_18 $$ assertTrue(b)[ FD ]
Line_3 $$ List<Integer> things = new ArrayList<Integer>(Collections.<Integer>nCopies(10000, null))-->Line_7 $$ things.set(i, v)[ FD ]
Line_4 $$ int sum = 0-->Line_10 $$ assertEquals(59950, sum)[ FD ]
