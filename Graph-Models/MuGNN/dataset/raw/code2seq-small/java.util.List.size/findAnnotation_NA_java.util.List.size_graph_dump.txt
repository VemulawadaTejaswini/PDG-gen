Line_2 $$ protected T findAnnotation(MethodInvocation methodInvocation) -->Line_11 $$ Iterator<Annotation> iterator = annotations.iterator()[ CD ]
Line_13 $$ Annotation curAnnotation = iterator.next()-->Line_14 $$ if (!serviceBeanAopCacheManager.isRegisteredAnnotationClass(curAnnotation.annotationType())) [ FD ]
Line_12 $$ while (iterator.hasNext()) -->Line_14 $$ if (!serviceBeanAopCacheManager.isRegisteredAnnotationClass(curAnnotation.annotationType())) [ CD ]
Line_2 $$ protected T findAnnotation(MethodInvocation methodInvocation) -->Line_18 $$ ServiceBeanAopCacheManager.putAnnotations(methodInvocation, annotations.toArray(new Annotation[annotations.size()]))[ CD ]
Line_22 $$ Class<? extends Annotation> annotationClass = curAnnotation.annotationType()-->Line_23 $$ if (annotationClass == _annotationClass) [ FD ]
Line_11 $$ Iterator<Annotation> iterator = annotations.iterator()-->Line_12 $$ while (iterator.hasNext()) [ FD ]
Line_35 $$ for (AnnotationChainableMethodAdvice<?> annotationChainableMethodAdvice : annotationChainableMethodAdvicesArray) -->Line_36 $$ serviceBeanAopCacheManager.removeMethodInterceptor(methodInvocation, annotationChainableMethodAdvice)[ FD ]
Line_10 $$ List<Annotation> annotations = AnnotationLocator.locate(method, targetClass)-->Line_11 $$ Iterator<Annotation> iterator = annotations.iterator()[ FD ]
Line_9 $$ Class<?> targetClass = serviceBeanMethodInvocation.getTargetClass()-->Line_10 $$ List<Annotation> annotations = AnnotationLocator.locate(method, targetClass)[ FD ]
Line_2 $$ protected T findAnnotation(MethodInvocation methodInvocation) -->Line_12 $$ while (iterator.hasNext()) [ CD ]
Line_2 $$ protected T findAnnotation(MethodInvocation methodInvocation) -->Line_4 $$ if (annotation != null) [ CD ]
Line_2 $$ protected T findAnnotation(MethodInvocation methodInvocation) -->Line_9 $$ Class<?> targetClass = serviceBeanMethodInvocation.getTargetClass()[ CD ]
Line_2 $$ protected T findAnnotation(MethodInvocation methodInvocation) -->Line_18 $$ ServiceBeanAopCacheManager.putAnnotations(methodInvocation, annotations.toArray(new Annotation[annotations.size()]))[ FD ]
Line_2 $$ protected T findAnnotation(MethodInvocation methodInvocation) -->Line_8 $$ ServiceBeanMethodInvocation serviceBeanMethodInvocation = (ServiceBeanMethodInvocation) methodInvocation[ CD ]
Line_3 $$ Annotation annotation = ServiceBeanAopCacheManager.getAnnotation(methodInvocation, _annotationClass, _nullAnnotation)-->Line_20 $$ annotation = _nullAnnotation[ FD ]
Line_22 $$ Class<? extends Annotation> annotationClass = curAnnotation.annotationType()-->Line_26 $$ annotationClasses.add(annotationClass)[ FD ]
Line_29 $$ for (Map.Entry<Class<? extends Annotation>, AnnotationChainableMethodAdvice<?>[]> entry : annotationChainableMethodAdvices.entrySet()) -->Line_31 $$ AnnotationChainableMethodAdvice<?>[] annotationChainableMethodAdvicesArray = entry.getValue()[ FD ]
Line_2 $$ protected T findAnnotation(MethodInvocation methodInvocation) -->Line_7 $$ Method method = methodInvocation.getMethod()[ FD ]
Line_10 $$ List<Annotation> annotations = AnnotationLocator.locate(method, targetClass)-->Line_18 $$ ServiceBeanAopCacheManager.putAnnotations(methodInvocation, annotations.toArray(new Annotation[annotations.size()]))[ FD ]
Line_13 $$ Annotation curAnnotation = iterator.next()-->Line_24 $$ annotation = curAnnotation[ FD ]
Line_22 $$ Class<? extends Annotation> annotationClass = curAnnotation.annotationType()-->Line_32 $$ if (annotationClasses.contains(annotationClass) || (annotationChainableMethodAdvicesArray == null)) [ FD ]
Line_2 $$ protected T findAnnotation(MethodInvocation methodInvocation) -->Line_19 $$ Set<Class<? extends Annotation>> annotationClasses = new HashSet()[ CD ]
Line_2 $$ protected T findAnnotation(MethodInvocation methodInvocation) -->Line_20 $$ annotation = _nullAnnotation[ CD ]
Line_21 $$ for (Annotation curAnnotation : annotations) -->Line_24 $$ annotation = curAnnotation[ FD ]
Line_3 $$ Annotation annotation = ServiceBeanAopCacheManager.getAnnotation(methodInvocation, _annotationClass, _nullAnnotation)-->Line_4 $$ if (annotation != null) [ FD ]
Line_2 $$ protected T findAnnotation(MethodInvocation methodInvocation) -->Line_3 $$ Annotation annotation = ServiceBeanAopCacheManager.getAnnotation(methodInvocation, _annotationClass, _nullAnnotation)[ CD ]
Line_2 $$ protected T findAnnotation(MethodInvocation methodInvocation) -->Line_39 $$ return (T) annotation[ CD ]
Line_12 $$ while (iterator.hasNext()) -->Line_13 $$ Annotation curAnnotation = iterator.next()[ CD ]
Line_28 $$ Map<Class<? extends Annotation>, AnnotationChainableMethodAdvice<?>[]> annotationChainableMethodAdvices = serviceBeanAopCacheManager.getRegisteredAnnotationChainableMethodAdvices()-->Line_29 $$ for (Map.Entry<Class<? extends Annotation>, AnnotationChainableMethodAdvice<?>[]> entry : annotationChainableMethodAdvices.entrySet()) [ FD ]
Line_2 $$ protected T findAnnotation(MethodInvocation methodInvocation) -->Line_10 $$ List<Annotation> annotations = AnnotationLocator.locate(method, targetClass)[ CD ]
Line_7 $$ Method method = methodInvocation.getMethod()-->Line_10 $$ List<Annotation> annotations = AnnotationLocator.locate(method, targetClass)[ FD ]
Line_13 $$ Annotation curAnnotation = iterator.next()-->Line_22 $$ Class<? extends Annotation> annotationClass = curAnnotation.annotationType()[ FD ]
Line_8 $$ ServiceBeanMethodInvocation serviceBeanMethodInvocation = (ServiceBeanMethodInvocation) methodInvocation-->Line_9 $$ Class<?> targetClass = serviceBeanMethodInvocation.getTargetClass()[ FD ]
Line_2 $$ protected T findAnnotation(MethodInvocation methodInvocation) -->Line_3 $$ Annotation annotation = ServiceBeanAopCacheManager.getAnnotation(methodInvocation, _annotationClass, _nullAnnotation)[ FD ]
Line_11 $$ Iterator<Annotation> iterator = annotations.iterator()-->Line_13 $$ Annotation curAnnotation = iterator.next()[ FD ]
Line_2 $$ protected T findAnnotation(MethodInvocation methodInvocation) -->Line_28 $$ Map<Class<? extends Annotation>, AnnotationChainableMethodAdvice<?>[]> annotationChainableMethodAdvices = serviceBeanAopCacheManager.getRegisteredAnnotationChainableMethodAdvices()[ CD ]
Line_14 $$ if (!serviceBeanAopCacheManager.isRegisteredAnnotationClass(curAnnotation.annotationType())) -->Line_15 $$ iterator.remove()[ CD ]
Line_2 $$ protected T findAnnotation(MethodInvocation methodInvocation) -->Line_36 $$ serviceBeanAopCacheManager.removeMethodInterceptor(methodInvocation, annotationChainableMethodAdvice)[ FD ]
Line_19 $$ Set<Class<? extends Annotation>> annotationClasses = new HashSet()-->Line_32 $$ if (annotationClasses.contains(annotationClass) || (annotationChainableMethodAdvicesArray == null)) [ FD ]
Line_4 $$ if (annotation != null) -->Line_5 $$ return (T) annotation[ CD ]
Line_2 $$ protected T findAnnotation(MethodInvocation methodInvocation) -->Line_7 $$ Method method = methodInvocation.getMethod()[ CD ]
Line_21 $$ for (Annotation curAnnotation : annotations) -->Line_22 $$ Class<? extends Annotation> annotationClass = curAnnotation.annotationType()[ FD ]
Line_20 $$ annotation = _nullAnnotation-->Line_24 $$ annotation = curAnnotation[ FD ]
Line_19 $$ Set<Class<? extends Annotation>> annotationClasses = new HashSet()-->Line_26 $$ annotationClasses.add(annotationClass)[ FD ]
Line_3 $$ Annotation annotation = ServiceBeanAopCacheManager.getAnnotation(methodInvocation, _annotationClass, _nullAnnotation)-->Line_24 $$ annotation = curAnnotation[ FD ]
Line_23 $$ if (annotationClass == _annotationClass) -->Line_24 $$ annotation = curAnnotation[ CD ]
Line_11 $$ Iterator<Annotation> iterator = annotations.iterator()-->Line_15 $$ iterator.remove()[ FD ]
Line_29 $$ for (Map.Entry<Class<? extends Annotation>, AnnotationChainableMethodAdvice<?>[]> entry : annotationChainableMethodAdvices.entrySet()) -->Line_30 $$ Class<? extends Annotation> annotationClass = entry.getKey()[ FD ]
