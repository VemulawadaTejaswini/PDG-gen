Line_2 $$ public void testCipherSuiteNegotiation() throws Exception -->Line_30 $$ fs.getClient().cipherSuites = Lists.newArrayListWithCapacity(3)[ CD ]
Line_2 $$ public void testCipherSuiteNegotiation() throws Exception -->Line_31 $$ fs.getClient().cipherSuites.add(CipherSuite.UNKNOWN)[ CD ]
Line_2 $$ public void testCipherSuiteNegotiation() throws Exception -->Line_26 $$ fs.getClient().cipherSuites.add(CipherSuite.AES_CTR_NOPADDING)[ CD ]
Line_40 $$ for (String key : keys) -->Line_41 $$ List<KeyProvider.KeyVersion> versions = provider.getKeyVersions(key)[ FD ]
Line_45 $$ for (int i = 2; i <= 3; i++) -->Line_47 $$ assertEquals(feInfo.getCipherSuite(), CipherSuite.AES_CTR_NOPADDING)[ CD ]
Line_41 $$ List<KeyProvider.KeyVersion> versions = provider.getKeyVersions(key)-->Line_42 $$ assertEquals("Should only have one key version per key", 1, versions.size())[ FD ]
Line_2 $$ public void testCipherSuiteNegotiation() throws Exception -->Line_34 $$ DFSTestUtil.createFile(fs, new Path(zone, "success3"), 4096, (short) 1, 0xFEED)[ CD ]
Line_2 $$ public void testCipherSuiteNegotiation() throws Exception -->Line_28 $$ fs.getClient().cipherSuites.add(CipherSuite.UNKNOWN)[ CD ]
Line_2 $$ public void testCipherSuiteNegotiation() throws Exception -->Line_6 $$ dfsAdmin.createEncryptionZone(zone, TEST_KEY)[ CD ]
Line_3 $$ final HdfsAdmin dfsAdmin = new HdfsAdmin(FileSystem.getDefaultUri(conf), conf)-->Line_6 $$ dfsAdmin.createEncryptionZone(zone, TEST_KEY)[ FD ]
Line_37 $$ List<String> keys = provider.getKeys()-->Line_38 $$ assertEquals("Expected NN to have created one key per zone", 1, keys.size())[ FD ]
Line_2 $$ public void testCipherSuiteNegotiation() throws Exception -->Line_5 $$ fs.mkdirs(zone)[ CD ]
Line_2 $$ public void testCipherSuiteNegotiation() throws Exception -->Line_8 $$ fs.getClient().cipherSuites = Lists.newArrayListWithCapacity(0)[ CD ]
Line_4 $$ final Path zone = new Path("/zone")-->Line_6 $$ dfsAdmin.createEncryptionZone(zone, TEST_KEY)[ FD ]
Line_2 $$ public void testCipherSuiteNegotiation() throws Exception -->Line_25 $$ fs.getClient().cipherSuites = Lists.newArrayListWithCapacity(3)[ CD ]
Line_2 $$ public void testCipherSuiteNegotiation() throws Exception -->Line_3 $$ final HdfsAdmin dfsAdmin = new HdfsAdmin(FileSystem.getDefaultUri(conf), conf)[ CD ]
Line_2 $$ public void testCipherSuiteNegotiation() throws Exception -->Line_17 $$ fs.getClient().cipherSuites.add(CipherSuite.UNKNOWN)[ CD ]
Line_2 $$ public void testCipherSuiteNegotiation() throws Exception -->Line_38 $$ assertEquals("Expected NN to have created one key per zone", 1, keys.size())[ CD ]
Line_36 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_41 $$ List<KeyProvider.KeyVersion> versions = provider.getKeyVersions(key)[ FD ]
Line_2 $$ public void testCipherSuiteNegotiation() throws Exception -->Line_45 $$ for (int i = 2; i <= 3; i++) [ CD ]
Line_2 $$ public void testCipherSuiteNegotiation() throws Exception -->Line_15 $$ fs.getClient().cipherSuites = Lists.newArrayListWithCapacity(3)[ CD ]
Line_4 $$ final Path zone = new Path("/zone")-->Line_5 $$ fs.mkdirs(zone)[ FD ]
Line_2 $$ public void testCipherSuiteNegotiation() throws Exception -->Line_39 $$ List<KeyProvider.KeyVersion> allVersions = Lists.newArrayList()[ CD ]
Line_2 $$ public void testCipherSuiteNegotiation() throws Exception -->Line_7 $$ DFSTestUtil.createFile(fs, new Path(zone, "success1"), 0, (short) 1, 0xFEED)[ CD ]
Line_2 $$ public void testCipherSuiteNegotiation() throws Exception -->Line_32 $$ fs.getClient().cipherSuites.add(CipherSuite.UNKNOWN)[ CD ]
Line_4 $$ final Path zone = new Path("/zone")-->Line_46 $$ FileEncryptionInfo feInfo = getFileEncryptionInfo(new Path(zone.toString() + "/success" + i))[ FD ]
Line_41 $$ List<KeyProvider.KeyVersion> versions = provider.getKeyVersions(key)-->Line_43 $$ allVersions.addAll(versions)[ FD ]
Line_39 $$ List<KeyProvider.KeyVersion> allVersions = Lists.newArrayList()-->Line_43 $$ allVersions.addAll(versions)[ FD ]
Line_2 $$ public void testCipherSuiteNegotiation() throws Exception -->Line_16 $$ fs.getClient().cipherSuites.add(CipherSuite.UNKNOWN)[ CD ]
Line_2 $$ public void testCipherSuiteNegotiation() throws Exception -->Line_33 $$ fs.getClient().cipherSuites.add(CipherSuite.AES_CTR_NOPADDING)[ CD ]
Line_2 $$ public void testCipherSuiteNegotiation() throws Exception -->Line_4 $$ final Path zone = new Path("/zone")[ CD ]
Line_2 $$ public void testCipherSuiteNegotiation() throws Exception -->Line_35 $$ cluster.getNamesystem().getProvider().flush()[ CD ]
Line_36 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_37 $$ List<String> keys = provider.getKeys()[ FD ]
Line_46 $$ FileEncryptionInfo feInfo = getFileEncryptionInfo(new Path(zone.toString() + "/success" + i))-->Line_47 $$ assertEquals(feInfo.getCipherSuite(), CipherSuite.AES_CTR_NOPADDING)[ FD ]
Line_2 $$ public void testCipherSuiteNegotiation() throws Exception -->Line_27 $$ fs.getClient().cipherSuites.add(CipherSuite.UNKNOWN)[ CD ]
Line_2 $$ public void testCipherSuiteNegotiation() throws Exception -->Line_29 $$ DFSTestUtil.createFile(fs, new Path(zone, "success2"), 0, (short) 1, 0xFEED)[ CD ]
Line_2 $$ public void testCipherSuiteNegotiation() throws Exception -->Line_37 $$ List<String> keys = provider.getKeys()[ CD ]
Line_2 $$ public void testCipherSuiteNegotiation() throws Exception -->Line_36 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)[ CD ]
Line_45 $$ for (int i = 2; i <= 3; i++) -->Line_46 $$ FileEncryptionInfo feInfo = getFileEncryptionInfo(new Path(zone.toString() + "/success" + i))[ CD ]
Line_2 $$ public void testCipherSuiteNegotiation() throws Exception -->Line_18 $$ fs.getClient().cipherSuites.add(CipherSuite.UNKNOWN)[ CD ]
