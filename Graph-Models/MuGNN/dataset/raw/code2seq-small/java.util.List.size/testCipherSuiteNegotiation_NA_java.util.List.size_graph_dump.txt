Line_43 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_44 $$ List<String> keys = provider.getKeys()[ FD ]
Line_5 $$ final Path zone = new Path("/zone")-->Line_54 $$ FileEncryptionInfo feInfo = getFileEncryptionInfo(new Path(zone.toString() + "/success" + i))[ FD ]
Line_5 $$ final Path zone = new Path("/zone")-->Line_7 $$ dfsAdmin.createEncryptionZone(zone, TEST_KEY)[ FD ]
Line_46 $$ List<KeyProvider.KeyVersion> allVersions = Lists.newArrayList()-->Line_50 $$ allVersions.addAll(versions)[ FD ]
Line_48 $$ List<KeyProvider.KeyVersion> versions = provider.getKeyVersions(key)-->Line_50 $$ allVersions.addAll(versions)[ FD ]
Line_5 $$ final Path zone = new Path("/zone")-->Line_6 $$ fs.mkdirs(zone)[ FD ]
Line_44 $$ List<String> keys = provider.getKeys()-->Line_45 $$ assertEquals("Expected NN to have created one key per zone", 1, keys.size())[ FD ]
Line_47 $$ for (String key : keys) -->Line_48 $$ List<KeyProvider.KeyVersion> versions = provider.getKeyVersions(key)[ FD ]
Line_4 $$ final HdfsAdmin dfsAdmin = new HdfsAdmin(FileSystem.getDefaultUri(conf), conf)-->Line_7 $$ dfsAdmin.createEncryptionZone(zone, TEST_KEY)[ FD ]
Line_43 $$ KeyProvider provider = KeyProviderFactory.getProviders(conf).get(0)-->Line_48 $$ List<KeyProvider.KeyVersion> versions = provider.getKeyVersions(key)[ FD ]
Line_48 $$ List<KeyProvider.KeyVersion> versions = provider.getKeyVersions(key)-->Line_49 $$ assertEquals("Should only have one key version per key", 1, versions.size())[ FD ]
Line_54 $$ FileEncryptionInfo feInfo = getFileEncryptionInfo(new Path(zone.toString() + "/success" + i))-->Line_55 $$ assertEquals(feInfo.getCipherSuite(), CipherSuite.AES_CTR_NOPADDING)[ FD ]
