Line_18 $$ String revisions = parts.get(1)-->Line_27 $$ return Couple.of(HgRevisionNumber.getInstance(revisions, changesets), null)[ FD ]
Line_8 $$ HgCommandExecutor commandExecutor = new HgCommandExecutor(myProject)-->Line_9 $$ commandExecutor.setSilent(true)[ FD ]
Line_16 $$ List<String> parts = StringUtil.split(lines.get(0), " ")-->Line_19 $$ if (parts.size() >= 2) [ FD ]
Line_24 $$ List<String> revs = StringUtil.split(revisions, "+")-->Line_25 $$ return Couple.of(HgRevisionNumber.getInstance(revs.get(0) + "+", chsets.get(0) + "+"), HgRevisionNumber.getInstance(revs.get(1) + "+", chsets.get(1) + "+"))[ FD ]
Line_17 $$ String changesets = parts.get(0)-->Line_27 $$ return Couple.of(HgRevisionNumber.getInstance(revisions, changesets), null)[ FD ]
Line_20 $$ if (changesets.indexOf('+') != changesets.lastIndexOf('+')) -->Line_27 $$ return Couple.of(HgRevisionNumber.getInstance(revisions, changesets), null)[ CD ]
Line_11 $$ if (result == null) -->Line_12 $$ return Couple.of(HgRevisionNumber.NULL_REVISION_NUMBER, null)[ CD ]
Line_15 $$ if (lines != null && !lines.isEmpty()) -->Line_16 $$ List<String> parts = StringUtil.split(lines.get(0), " ")[ CD ]
Line_15 $$ if (lines != null && !lines.isEmpty()) -->Line_17 $$ String changesets = parts.get(0)[ CD ]
Line_16 $$ List<String> parts = StringUtil.split(lines.get(0), " ")-->Line_17 $$ String changesets = parts.get(0)[ FD ]
Line_20 $$ if (changesets.indexOf('+') != changesets.lastIndexOf('+')) -->Line_24 $$ List<String> revs = StringUtil.split(revisions, "+")[ CD ]
Line_15 $$ if (lines != null && !lines.isEmpty()) -->Line_19 $$ if (parts.size() >= 2) [ CD ]
Line_20 $$ if (changesets.indexOf('+') != changesets.lastIndexOf('+')) -->Line_25 $$ return Couple.of(HgRevisionNumber.getInstance(revs.get(0) + "+", chsets.get(0) + "+"), HgRevisionNumber.getInstance(revs.get(1) + "+", chsets.get(1) + "+"))[ CD ]
Line_19 $$ if (parts.size() >= 2) -->Line_20 $$ if (changesets.indexOf('+') != changesets.lastIndexOf('+')) [ CD ]
Line_10 $$ HgCommandResult result = commandExecutor.executeInCurrentThread(repo, "identify", Arrays.asList("--num", "--id"))-->Line_11 $$ if (result == null) [ FD ]
Line_15 $$ if (lines != null && !lines.isEmpty()) -->Line_18 $$ String revisions = parts.get(1)[ CD ]
Line_8 $$ HgCommandExecutor commandExecutor = new HgCommandExecutor(myProject)-->Line_10 $$ HgCommandResult result = commandExecutor.executeInCurrentThread(repo, "identify", Arrays.asList("--num", "--id"))[ FD ]
Line_10 $$ HgCommandResult result = commandExecutor.executeInCurrentThread(repo, "identify", Arrays.asList("--num", "--id"))-->Line_14 $$ final List<String> lines = result.getOutputLines()[ FD ]
Line_14 $$ final List<String> lines = result.getOutputLines()-->Line_15 $$ if (lines != null && !lines.isEmpty()) [ FD ]
Line_17 $$ String changesets = parts.get(0)-->Line_20 $$ if (changesets.indexOf('+') != changesets.lastIndexOf('+')) [ FD ]
Line_18 $$ String revisions = parts.get(1)-->Line_24 $$ List<String> revs = StringUtil.split(revisions, "+")[ FD ]
Line_16 $$ List<String> parts = StringUtil.split(lines.get(0), " ")-->Line_18 $$ String revisions = parts.get(1)[ FD ]
Line_14 $$ final List<String> lines = result.getOutputLines()-->Line_16 $$ List<String> parts = StringUtil.split(lines.get(0), " ")[ FD ]
