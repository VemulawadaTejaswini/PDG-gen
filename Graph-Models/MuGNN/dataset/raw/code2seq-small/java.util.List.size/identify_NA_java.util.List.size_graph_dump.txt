Line_10 $$ if (lines != null && !lines.isEmpty()) -->Line_14 $$ if (parts.size() >= 2) [ CD ]
Line_15 $$ if (changesets.indexOf('+') != changesets.lastIndexOf('+')) -->Line_16 $$ List<String> chsets = StringUtil.split(changesets, "+")[ CD ]
Line_2 $$ public Couple<HgRevisionNumber> identify(@NotNull VirtualFile repo) -->Line_24 $$ return Couple.of(HgRevisionNumber.NULL_REVISION_NUMBER, null)[ CD ]
Line_15 $$ if (changesets.indexOf('+') != changesets.lastIndexOf('+')) -->Line_17 $$ List<String> revs = StringUtil.split(revisions, "+")[ CD ]
Line_13 $$ String revisions = parts.get(1)-->Line_17 $$ List<String> revs = StringUtil.split(revisions, "+")[ FD ]
Line_9 $$ final List<String> lines = result.getOutputLines()-->Line_10 $$ if (lines != null && !lines.isEmpty()) [ FD ]
Line_17 $$ List<String> revs = StringUtil.split(revisions, "+")-->Line_18 $$ return Couple.of(HgRevisionNumber.getInstance(revs.get(0) + "+", chsets.get(0) + "+"), HgRevisionNumber.getInstance(revs.get(1) + "+", chsets.get(1) + "+"))[ FD ]
Line_13 $$ String revisions = parts.get(1)-->Line_20 $$ return Couple.of(HgRevisionNumber.getInstance(revisions, changesets), null)[ FD ]
Line_11 $$ List<String> parts = StringUtil.split(lines.get(0), " ")-->Line_13 $$ String revisions = parts.get(1)[ FD ]
Line_2 $$ public Couple<HgRevisionNumber> identify(@NotNull VirtualFile repo) -->Line_4 $$ commandExecutor.setSilent(true)[ CD ]
Line_11 $$ List<String> parts = StringUtil.split(lines.get(0), " ")-->Line_12 $$ String changesets = parts.get(0)[ FD ]
Line_2 $$ public Couple<HgRevisionNumber> identify(@NotNull VirtualFile repo) -->Line_6 $$ if (result == null) [ CD ]
Line_14 $$ if (parts.size() >= 2) -->Line_15 $$ if (changesets.indexOf('+') != changesets.lastIndexOf('+')) [ CD ]
Line_3 $$ HgCommandExecutor commandExecutor = new HgCommandExecutor(myProject)-->Line_4 $$ commandExecutor.setSilent(true)[ FD ]
Line_9 $$ final List<String> lines = result.getOutputLines()-->Line_11 $$ List<String> parts = StringUtil.split(lines.get(0), " ")[ FD ]
Line_15 $$ if (changesets.indexOf('+') != changesets.lastIndexOf('+')) -->Line_18 $$ return Couple.of(HgRevisionNumber.getInstance(revs.get(0) + "+", chsets.get(0) + "+"), HgRevisionNumber.getInstance(revs.get(1) + "+", chsets.get(1) + "+"))[ CD ]
Line_2 $$ public Couple<HgRevisionNumber> identify(@NotNull VirtualFile repo) -->Line_10 $$ if (lines != null && !lines.isEmpty()) [ CD ]
Line_5 $$ HgCommandResult result = commandExecutor.executeInCurrentThread(repo, "identify", Arrays.asList("--num", "--id"))-->Line_6 $$ if (result == null) [ FD ]
Line_3 $$ HgCommandExecutor commandExecutor = new HgCommandExecutor(myProject)-->Line_5 $$ HgCommandResult result = commandExecutor.executeInCurrentThread(repo, "identify", Arrays.asList("--num", "--id"))[ FD ]
Line_2 $$ public Couple<HgRevisionNumber> identify(@NotNull VirtualFile repo) -->Line_5 $$ HgCommandResult result = commandExecutor.executeInCurrentThread(repo, "identify", Arrays.asList("--num", "--id"))[ FD ]
Line_12 $$ String changesets = parts.get(0)-->Line_15 $$ if (changesets.indexOf('+') != changesets.lastIndexOf('+')) [ FD ]
Line_5 $$ HgCommandResult result = commandExecutor.executeInCurrentThread(repo, "identify", Arrays.asList("--num", "--id"))-->Line_9 $$ final List<String> lines = result.getOutputLines()[ FD ]
Line_10 $$ if (lines != null && !lines.isEmpty()) -->Line_12 $$ String changesets = parts.get(0)[ CD ]
Line_12 $$ String changesets = parts.get(0)-->Line_16 $$ List<String> chsets = StringUtil.split(changesets, "+")[ FD ]
Line_10 $$ if (lines != null && !lines.isEmpty()) -->Line_13 $$ String revisions = parts.get(1)[ CD ]
Line_12 $$ String changesets = parts.get(0)-->Line_20 $$ return Couple.of(HgRevisionNumber.getInstance(revisions, changesets), null)[ FD ]
Line_11 $$ List<String> parts = StringUtil.split(lines.get(0), " ")-->Line_14 $$ if (parts.size() >= 2) [ FD ]
Line_16 $$ List<String> chsets = StringUtil.split(changesets, "+")-->Line_18 $$ return Couple.of(HgRevisionNumber.getInstance(revs.get(0) + "+", chsets.get(0) + "+"), HgRevisionNumber.getInstance(revs.get(1) + "+", chsets.get(1) + "+"))[ FD ]
Line_2 $$ public Couple<HgRevisionNumber> identify(@NotNull VirtualFile repo) -->Line_5 $$ HgCommandResult result = commandExecutor.executeInCurrentThread(repo, "identify", Arrays.asList("--num", "--id"))[ CD ]
Line_6 $$ if (result == null) -->Line_7 $$ return Couple.of(HgRevisionNumber.NULL_REVISION_NUMBER, null)[ CD ]
Line_2 $$ public Couple<HgRevisionNumber> identify(@NotNull VirtualFile repo) -->Line_9 $$ final List<String> lines = result.getOutputLines()[ CD ]
Line_15 $$ if (changesets.indexOf('+') != changesets.lastIndexOf('+')) -->Line_20 $$ return Couple.of(HgRevisionNumber.getInstance(revisions, changesets), null)[ CD ]
Line_2 $$ public Couple<HgRevisionNumber> identify(@NotNull VirtualFile repo) -->Line_3 $$ HgCommandExecutor commandExecutor = new HgCommandExecutor(myProject)[ CD ]
Line_10 $$ if (lines != null && !lines.isEmpty()) -->Line_11 $$ List<String> parts = StringUtil.split(lines.get(0), " ")[ CD ]
