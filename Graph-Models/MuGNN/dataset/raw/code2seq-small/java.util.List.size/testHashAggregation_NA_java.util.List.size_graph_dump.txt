Line_2 $$ public void testHashAggregation(boolean hashEnabled) throws Exception -->Line_13 $$ assertOperatorEqualsIgnoreOrder(operator, input, expected, hashEnabled, Optional.of(hashChannels.size()))[ CD ]
Line_11 $$ Operator operator = operatorFactory.createOperator(driverContext)-->Line_13 $$ assertOperatorEqualsIgnoreOrder(operator, input, expected, hashEnabled, Optional.of(hashChannels.size()))[ FD ]
Line_5 $$ InternalAggregationFunction countBooleanColumn = metadata.getFunctionRegistry().getAggregateFunctionImplementation(new Signature("count", AGGREGATE, StandardTypes.BIGINT, StandardTypes.BOOLEAN))-->Line_10 $$ HashAggregationOperatorFactory operatorFactory = new HashAggregationOperatorFactory(0, ImmutableList.of(VARCHAR), hashChannels, Step.SINGLE, ImmutableList.of(COUNT.bind(ImmutableList.of(0), Optional.empty(), Optional.empty(), 1.0), LONG_SUM.bind(ImmutableList.of(3), Optional.empty(), Optional.empty(), 1.0), LONG_AVERAGE.bind(ImmutableList.of(3), Optional.empty(), Optional.empty(), 1.0), maxVarcharColumn.bind(ImmutableList.of(2), Optional.empty(), Optional.empty(), 1.0), countVarcharColumn.bind(ImmutableList.of(0), Optional.empty(), Optional.empty(), 1.0), countBooleanColumn.bind(ImmutableList.of(4), Optional.empty(), Optional.empty(), 1.0)), Optional.<Integer>empty(), rowPagesBuilder.getHashChannel(), 100_000, new DataSize(16, MEGABYTE))[ FD ]
Line_2 $$ public void testHashAggregation(boolean hashEnabled) throws Exception -->Line_3 $$ MetadataManager metadata = MetadataManager.createTestMetadataManager()[ CD ]
Line_10 $$ HashAggregationOperatorFactory operatorFactory = new HashAggregationOperatorFactory(0, ImmutableList.of(VARCHAR), hashChannels, Step.SINGLE, ImmutableList.of(COUNT.bind(ImmutableList.of(0), Optional.empty(), Optional.empty(), 1.0), LONG_SUM.bind(ImmutableList.of(3), Optional.empty(), Optional.empty(), 1.0), LONG_AVERAGE.bind(ImmutableList.of(3), Optional.empty(), Optional.empty(), 1.0), maxVarcharColumn.bind(ImmutableList.of(2), Optional.empty(), Optional.empty(), 1.0), countVarcharColumn.bind(ImmutableList.of(0), Optional.empty(), Optional.empty(), 1.0), countBooleanColumn.bind(ImmutableList.of(4), Optional.empty(), Optional.empty(), 1.0)), Optional.<Integer>empty(), rowPagesBuilder.getHashChannel(), 100_000, new DataSize(16, MEGABYTE))-->Line_11 $$ Operator operator = operatorFactory.createOperator(driverContext)[ FD ]
Line_2 $$ public void testHashAggregation(boolean hashEnabled) throws Exception -->Line_8 $$ RowPagesBuilder rowPagesBuilder = rowPagesBuilder(hashEnabled, hashChannels, VARCHAR, VARCHAR, VARCHAR, BIGINT, BOOLEAN)[ CD ]
Line_7 $$ List<Integer> hashChannels = Ints.asList(1)-->Line_13 $$ assertOperatorEqualsIgnoreOrder(operator, input, expected, hashEnabled, Optional.of(hashChannels.size()))[ FD ]
Line_7 $$ List<Integer> hashChannels = Ints.asList(1)-->Line_8 $$ RowPagesBuilder rowPagesBuilder = rowPagesBuilder(hashEnabled, hashChannels, VARCHAR, VARCHAR, VARCHAR, BIGINT, BOOLEAN)[ FD ]
Line_3 $$ MetadataManager metadata = MetadataManager.createTestMetadataManager()-->Line_4 $$ InternalAggregationFunction countVarcharColumn = metadata.getFunctionRegistry().getAggregateFunctionImplementation(new Signature("count", AGGREGATE, StandardTypes.BIGINT, StandardTypes.VARCHAR))[ FD ]
Line_2 $$ public void testHashAggregation(boolean hashEnabled) throws Exception -->Line_4 $$ InternalAggregationFunction countVarcharColumn = metadata.getFunctionRegistry().getAggregateFunctionImplementation(new Signature("count", AGGREGATE, StandardTypes.BIGINT, StandardTypes.VARCHAR))[ CD ]
Line_3 $$ MetadataManager metadata = MetadataManager.createTestMetadataManager()-->Line_6 $$ InternalAggregationFunction maxVarcharColumn = metadata.getFunctionRegistry().getAggregateFunctionImplementation(new Signature("max", AGGREGATE, StandardTypes.VARCHAR, StandardTypes.VARCHAR))[ FD ]
Line_12 $$ MaterializedResult expected = resultBuilder(driverContext.getSession(), VARCHAR, BIGINT, BIGINT, DOUBLE, VARCHAR, BIGINT, BIGINT).row("0", 3, 0, 0.0, "300", 3, 3).row("1", 3, 3, 1.0, "301", 3, 3).row("2", 3, 6, 2.0, "302", 3, 3).row("3", 3, 9, 3.0, "303", 3, 3).row("4", 3, 12, 4.0, "304", 3, 3).row("5", 3, 15, 5.0, "305", 3, 3).row("6", 3, 18, 6.0, "306", 3, 3).row("7", 3, 21, 7.0, "307", 3, 3).row("8", 3, 24, 8.0, "308", 3, 3).row("9", 3, 27, 9.0, "309", 3, 3).build()-->Line_13 $$ assertOperatorEqualsIgnoreOrder(operator, input, expected, hashEnabled, Optional.of(hashChannels.size()))[ FD ]
Line_2 $$ public void testHashAggregation(boolean hashEnabled) throws Exception -->Line_9 $$ List<Page> input = rowPagesBuilder.addSequencePage(10, 100, 0, 100, 0, 500).addSequencePage(10, 100, 0, 200, 0, 500).addSequencePage(10, 100, 0, 300, 0, 500).build()[ CD ]
Line_2 $$ public void testHashAggregation(boolean hashEnabled) throws Exception -->Line_5 $$ InternalAggregationFunction countBooleanColumn = metadata.getFunctionRegistry().getAggregateFunctionImplementation(new Signature("count", AGGREGATE, StandardTypes.BIGINT, StandardTypes.BOOLEAN))[ CD ]
Line_2 $$ public void testHashAggregation(boolean hashEnabled) throws Exception -->Line_8 $$ RowPagesBuilder rowPagesBuilder = rowPagesBuilder(hashEnabled, hashChannels, VARCHAR, VARCHAR, VARCHAR, BIGINT, BOOLEAN)[ FD ]
Line_2 $$ public void testHashAggregation(boolean hashEnabled) throws Exception -->Line_13 $$ assertOperatorEqualsIgnoreOrder(operator, input, expected, hashEnabled, Optional.of(hashChannels.size()))[ FD ]
Line_2 $$ public void testHashAggregation(boolean hashEnabled) throws Exception -->Line_12 $$ MaterializedResult expected = resultBuilder(driverContext.getSession(), VARCHAR, BIGINT, BIGINT, DOUBLE, VARCHAR, BIGINT, BIGINT).row("0", 3, 0, 0.0, "300", 3, 3).row("1", 3, 3, 1.0, "301", 3, 3).row("2", 3, 6, 2.0, "302", 3, 3).row("3", 3, 9, 3.0, "303", 3, 3).row("4", 3, 12, 4.0, "304", 3, 3).row("5", 3, 15, 5.0, "305", 3, 3).row("6", 3, 18, 6.0, "306", 3, 3).row("7", 3, 21, 7.0, "307", 3, 3).row("8", 3, 24, 8.0, "308", 3, 3).row("9", 3, 27, 9.0, "309", 3, 3).build()[ CD ]
Line_2 $$ public void testHashAggregation(boolean hashEnabled) throws Exception -->Line_7 $$ List<Integer> hashChannels = Ints.asList(1)[ CD ]
Line_2 $$ public void testHashAggregation(boolean hashEnabled) throws Exception -->Line_11 $$ Operator operator = operatorFactory.createOperator(driverContext)[ CD ]
Line_9 $$ List<Page> input = rowPagesBuilder.addSequencePage(10, 100, 0, 100, 0, 500).addSequencePage(10, 100, 0, 200, 0, 500).addSequencePage(10, 100, 0, 300, 0, 500).build()-->Line_13 $$ assertOperatorEqualsIgnoreOrder(operator, input, expected, hashEnabled, Optional.of(hashChannels.size()))[ FD ]
Line_3 $$ MetadataManager metadata = MetadataManager.createTestMetadataManager()-->Line_5 $$ InternalAggregationFunction countBooleanColumn = metadata.getFunctionRegistry().getAggregateFunctionImplementation(new Signature("count", AGGREGATE, StandardTypes.BIGINT, StandardTypes.BOOLEAN))[ FD ]
Line_6 $$ InternalAggregationFunction maxVarcharColumn = metadata.getFunctionRegistry().getAggregateFunctionImplementation(new Signature("max", AGGREGATE, StandardTypes.VARCHAR, StandardTypes.VARCHAR))-->Line_10 $$ HashAggregationOperatorFactory operatorFactory = new HashAggregationOperatorFactory(0, ImmutableList.of(VARCHAR), hashChannels, Step.SINGLE, ImmutableList.of(COUNT.bind(ImmutableList.of(0), Optional.empty(), Optional.empty(), 1.0), LONG_SUM.bind(ImmutableList.of(3), Optional.empty(), Optional.empty(), 1.0), LONG_AVERAGE.bind(ImmutableList.of(3), Optional.empty(), Optional.empty(), 1.0), maxVarcharColumn.bind(ImmutableList.of(2), Optional.empty(), Optional.empty(), 1.0), countVarcharColumn.bind(ImmutableList.of(0), Optional.empty(), Optional.empty(), 1.0), countBooleanColumn.bind(ImmutableList.of(4), Optional.empty(), Optional.empty(), 1.0)), Optional.<Integer>empty(), rowPagesBuilder.getHashChannel(), 100_000, new DataSize(16, MEGABYTE))[ FD ]
Line_4 $$ InternalAggregationFunction countVarcharColumn = metadata.getFunctionRegistry().getAggregateFunctionImplementation(new Signature("count", AGGREGATE, StandardTypes.BIGINT, StandardTypes.VARCHAR))-->Line_10 $$ HashAggregationOperatorFactory operatorFactory = new HashAggregationOperatorFactory(0, ImmutableList.of(VARCHAR), hashChannels, Step.SINGLE, ImmutableList.of(COUNT.bind(ImmutableList.of(0), Optional.empty(), Optional.empty(), 1.0), LONG_SUM.bind(ImmutableList.of(3), Optional.empty(), Optional.empty(), 1.0), LONG_AVERAGE.bind(ImmutableList.of(3), Optional.empty(), Optional.empty(), 1.0), maxVarcharColumn.bind(ImmutableList.of(2), Optional.empty(), Optional.empty(), 1.0), countVarcharColumn.bind(ImmutableList.of(0), Optional.empty(), Optional.empty(), 1.0), countBooleanColumn.bind(ImmutableList.of(4), Optional.empty(), Optional.empty(), 1.0)), Optional.<Integer>empty(), rowPagesBuilder.getHashChannel(), 100_000, new DataSize(16, MEGABYTE))[ FD ]
Line_2 $$ public void testHashAggregation(boolean hashEnabled) throws Exception -->Line_6 $$ InternalAggregationFunction maxVarcharColumn = metadata.getFunctionRegistry().getAggregateFunctionImplementation(new Signature("max", AGGREGATE, StandardTypes.VARCHAR, StandardTypes.VARCHAR))[ CD ]
Line_8 $$ RowPagesBuilder rowPagesBuilder = rowPagesBuilder(hashEnabled, hashChannels, VARCHAR, VARCHAR, VARCHAR, BIGINT, BOOLEAN)-->Line_10 $$ HashAggregationOperatorFactory operatorFactory = new HashAggregationOperatorFactory(0, ImmutableList.of(VARCHAR), hashChannels, Step.SINGLE, ImmutableList.of(COUNT.bind(ImmutableList.of(0), Optional.empty(), Optional.empty(), 1.0), LONG_SUM.bind(ImmutableList.of(3), Optional.empty(), Optional.empty(), 1.0), LONG_AVERAGE.bind(ImmutableList.of(3), Optional.empty(), Optional.empty(), 1.0), maxVarcharColumn.bind(ImmutableList.of(2), Optional.empty(), Optional.empty(), 1.0), countVarcharColumn.bind(ImmutableList.of(0), Optional.empty(), Optional.empty(), 1.0), countBooleanColumn.bind(ImmutableList.of(4), Optional.empty(), Optional.empty(), 1.0)), Optional.<Integer>empty(), rowPagesBuilder.getHashChannel(), 100_000, new DataSize(16, MEGABYTE))[ FD ]
Line_8 $$ RowPagesBuilder rowPagesBuilder = rowPagesBuilder(hashEnabled, hashChannels, VARCHAR, VARCHAR, VARCHAR, BIGINT, BOOLEAN)-->Line_9 $$ List<Page> input = rowPagesBuilder.addSequencePage(10, 100, 0, 100, 0, 500).addSequencePage(10, 100, 0, 200, 0, 500).addSequencePage(10, 100, 0, 300, 0, 500).build()[ FD ]
Line_2 $$ public void testHashAggregation(boolean hashEnabled) throws Exception -->Line_10 $$ HashAggregationOperatorFactory operatorFactory = new HashAggregationOperatorFactory(0, ImmutableList.of(VARCHAR), hashChannels, Step.SINGLE, ImmutableList.of(COUNT.bind(ImmutableList.of(0), Optional.empty(), Optional.empty(), 1.0), LONG_SUM.bind(ImmutableList.of(3), Optional.empty(), Optional.empty(), 1.0), LONG_AVERAGE.bind(ImmutableList.of(3), Optional.empty(), Optional.empty(), 1.0), maxVarcharColumn.bind(ImmutableList.of(2), Optional.empty(), Optional.empty(), 1.0), countVarcharColumn.bind(ImmutableList.of(0), Optional.empty(), Optional.empty(), 1.0), countBooleanColumn.bind(ImmutableList.of(4), Optional.empty(), Optional.empty(), 1.0)), Optional.<Integer>empty(), rowPagesBuilder.getHashChannel(), 100_000, new DataSize(16, MEGABYTE))[ CD ]
