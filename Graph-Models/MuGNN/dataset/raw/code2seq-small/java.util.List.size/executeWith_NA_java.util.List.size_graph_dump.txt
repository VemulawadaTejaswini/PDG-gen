Line_6 $$ String[] arguments = argumentsList.toArray(new String[argumentsList.size()])-->Line_13 $$ buildLauncher.withArguments(arguments).forTasks(tasks).run()[ FD ]
Line_2 $$ public ProjectOutcomes executeWith(ProjectConnection connection) -->Line_4 $$ String[] tasks = tasksList.toArray(new String[tasksList.size()])[ CD ]
Line_5 $$ List<String> argumentsList = getImpliedArguments()-->Line_6 $$ String[] arguments = argumentsList.toArray(new String[argumentsList.size()])[ FD ]
Line_2 $$ public ProjectOutcomes executeWith(ProjectConnection connection) -->Line_5 $$ List<String> argumentsList = getImpliedArguments()[ CD ]
Line_4 $$ String[] tasks = tasksList.toArray(new String[tasksList.size()])-->Line_13 $$ buildLauncher.withArguments(arguments).forTasks(tasks).run()[ FD ]
Line_2 $$ public ProjectOutcomes executeWith(ProjectConnection connection) -->Line_7 $$ if (isCanObtainProjectOutcomesModel()) [ CD ]
Line_6 $$ String[] arguments = argumentsList.toArray(new String[argumentsList.size()])-->Line_10 $$ return modelBuilder.withArguments(arguments).forTasks(tasks).get()[ FD ]
Line_7 $$ if (isCanObtainProjectOutcomesModel()) -->Line_14 $$ return null[ CD ]
Line_3 $$ List<String> tasksList = getSpec().getTasks()-->Line_4 $$ String[] tasks = tasksList.toArray(new String[tasksList.size()])[ FD ]
Line_4 $$ String[] tasks = tasksList.toArray(new String[tasksList.size()])-->Line_10 $$ return modelBuilder.withArguments(arguments).forTasks(tasks).get()[ FD ]
Line_2 $$ public ProjectOutcomes executeWith(ProjectConnection connection) -->Line_3 $$ List<String> tasksList = getSpec().getTasks()[ CD ]
Line_2 $$ public ProjectOutcomes executeWith(ProjectConnection connection) -->Line_6 $$ String[] arguments = argumentsList.toArray(new String[argumentsList.size()])[ CD ]
Line_7 $$ if (isCanObtainProjectOutcomesModel()) -->Line_12 $$ BuildLauncher buildLauncher = connection.newBuild()[ CD ]
Line_7 $$ if (isCanObtainProjectOutcomesModel()) -->Line_13 $$ buildLauncher.withArguments(arguments).forTasks(tasks).run()[ CD ]
Line_2 $$ public ProjectOutcomes executeWith(ProjectConnection connection) -->Line_12 $$ BuildLauncher buildLauncher = connection.newBuild()[ FD ]
Line_7 $$ if (isCanObtainProjectOutcomesModel()) -->Line_10 $$ return modelBuilder.withArguments(arguments).forTasks(tasks).get()[ CD ]
Line_12 $$ BuildLauncher buildLauncher = connection.newBuild()-->Line_13 $$ buildLauncher.withArguments(arguments).forTasks(tasks).run()[ FD ]
