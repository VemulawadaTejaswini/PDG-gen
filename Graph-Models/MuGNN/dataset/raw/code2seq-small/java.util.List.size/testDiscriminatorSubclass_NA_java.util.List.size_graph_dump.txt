Line_5 $$ Employee mark = new Employee()-->Line_51 $$ s.delete(mark)[ FD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_37 $$ assertEquals(customers.size(), 1)[ CD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_21 $$ yomomma.setName("mum")[ CD ]
Line_20 $$ Person yomomma = new Person()-->Line_23 $$ s.save(yomomma)[ FD ]
Line_33 $$ Customer c = (Customer) customer-->Line_42 $$ assertFalse(Hibernate.isInitialized(c.getSalesperson()))[ FD ]
Line_5 $$ Employee mark = new Employee()-->Line_49 $$ mark.setZip("30306")[ FD ]
Line_3 $$ Session s = openSession()-->Line_25 $$ s.save(joe)[ FD ]
Line_47 $$ mark = (Employee) s.get(Employee.class, new Long(mark.getId()))-->Line_49 $$ mark.setZip("30306")[ FD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_46 $$ s.clear()[ CD ]
Line_3 $$ Session s = openSession()-->Line_52 $$ s.delete(joe)[ FD ]
Line_3 $$ Session s = openSession()-->Line_31 $$ List customers = s.createQuery("from Customer c left join fetch c.salesperson").list()[ FD ]
Line_12 $$ Customer joe = new Customer()-->Line_52 $$ s.delete(joe)[ FD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_5 $$ Employee mark = new Employee()[ CD ]
Line_5 $$ Employee mark = new Employee()-->Line_7 $$ mark.setTitle("internal sales")[ FD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_15 $$ joe.setZip("XXXXX")[ CD ]
Line_20 $$ Person yomomma = new Person()-->Line_53 $$ s.delete(yomomma)[ FD ]
Line_3 $$ Session s = openSession()-->Line_48 $$ joe = (Customer) s.get(Customer.class, new Long(joe.getId()))[ FD ]
Line_3 $$ Session s = openSession()-->Line_24 $$ s.save(mark)[ FD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_29 $$ assertEquals(s.createQuery("from Person p where p.class = Customer").list().size(), 1)[ CD ]
Line_3 $$ Session s = openSession()-->Line_26 $$ assertEquals(s.createQuery("from java.io.Serializable").list().size(), 0)[ FD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ Transaction t = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_38 $$ s.clear()[ FD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_23 $$ s.save(yomomma)[ CD ]
Line_12 $$ Customer joe = new Customer()-->Line_15 $$ joe.setZip("XXXXX")[ FD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_25 $$ s.save(joe)[ CD ]
Line_12 $$ Customer joe = new Customer()-->Line_14 $$ joe.setAddress("San Francisco")[ FD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_4 $$ Transaction t = s.beginTransaction()[ CD ]
Line_31 $$ List customers = s.createQuery("from Customer c left join fetch c.salesperson").list()-->Line_45 $$ assertEquals(customers.size(), 1)[ FD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_52 $$ s.delete(joe)[ CD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_54 $$ assertTrue(s.createQuery("from Person").list().isEmpty())[ CD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_30 $$ s.clear()[ CD ]
Line_3 $$ Session s = openSession()-->Line_28 $$ assertEquals(s.createQuery("from Person p where p.class = Person").list().size(), 1)[ FD ]
Line_33 $$ Customer c = (Customer) customer-->Line_34 $$ assertTrue(Hibernate.isInitialized(c.getSalesperson()))[ FD ]
Line_12 $$ Customer joe = new Customer()-->Line_13 $$ joe.setName("Joe")[ FD ]
Line_3 $$ Session s = openSession()-->Line_23 $$ s.save(yomomma)[ FD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_56 $$ s.close()[ CD ]
Line_5 $$ Employee mark = new Employee()-->Line_19 $$ joe.setSalesperson(mark)[ FD ]
Line_48 $$ joe = (Customer) s.get(Customer.class, new Long(joe.getId()))-->Line_52 $$ s.delete(joe)[ FD ]
Line_39 $$ customers = s.createQuery("from Customer").list()-->Line_45 $$ assertEquals(customers.size(), 1)[ FD ]
Line_5 $$ Employee mark = new Employee()-->Line_47 $$ mark = (Employee) s.get(Employee.class, new Long(mark.getId()))[ FD ]
Line_3 $$ Session s = openSession()-->Line_51 $$ s.delete(mark)[ FD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_20 $$ Person yomomma = new Person()[ CD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_18 $$ joe.setSex('M')[ CD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_22 $$ yomomma.setSex('F')[ CD ]
Line_12 $$ Customer joe = new Customer()-->Line_19 $$ joe.setSalesperson(mark)[ FD ]
Line_3 $$ Session s = openSession()-->Line_53 $$ s.delete(yomomma)[ FD ]
Line_3 $$ Session s = openSession()-->Line_30 $$ s.clear()[ FD ]
Line_12 $$ Customer joe = new Customer()-->Line_25 $$ s.save(joe)[ FD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_27 $$ assertEquals(s.createQuery("from Person").list().size(), 3)[ CD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_11 $$ mark.setCountry("USA")[ CD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_31 $$ List customers = s.createQuery("from Customer c left join fetch c.salesperson").list()[ CD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_51 $$ s.delete(mark)[ CD ]
Line_5 $$ Employee mark = new Employee()-->Line_8 $$ mark.setSex('M')[ FD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_50 $$ assertEquals(s.createQuery("from Person p where p.address.zip = '30306'").list().size(), 1)[ CD ]
Line_5 $$ Employee mark = new Employee()-->Line_11 $$ mark.setCountry("USA")[ FD ]
Line_47 $$ mark = (Employee) s.get(Employee.class, new Long(mark.getId()))-->Line_51 $$ s.delete(mark)[ FD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_19 $$ joe.setSalesperson(mark)[ CD ]
Line_3 $$ Session s = openSession()-->Line_56 $$ s.close()[ FD ]
Line_20 $$ Person yomomma = new Person()-->Line_21 $$ yomomma.setName("mum")[ FD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_38 $$ s.clear()[ CD ]
Line_12 $$ Customer joe = new Customer()-->Line_18 $$ joe.setSex('M')[ FD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_8 $$ mark.setSex('M')[ CD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_9 $$ mark.setAddress("buckhead")[ CD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_17 $$ joe.setComments("Very demanding")[ CD ]
Line_33 $$ Customer c = (Customer) customer-->Line_43 $$ assertEquals(c.getSalesperson().getName(), "Mark")[ FD ]
Line_3 $$ Session s = openSession()-->Line_27 $$ assertEquals(s.createQuery("from Person").list().size(), 3)[ FD ]
Line_3 $$ Session s = openSession()-->Line_47 $$ mark = (Employee) s.get(Employee.class, new Long(mark.getId()))[ FD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_12 $$ Customer joe = new Customer()[ CD ]
Line_33 $$ Customer c = (Customer) customer-->Line_35 $$ assertEquals(c.getSalesperson().getName(), "Mark")[ FD ]
Line_3 $$ Session s = openSession()-->Line_54 $$ assertTrue(s.createQuery("from Person").list().isEmpty())[ FD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_10 $$ mark.setZip("30305")[ CD ]
Line_12 $$ Customer joe = new Customer()-->Line_48 $$ joe = (Customer) s.get(Customer.class, new Long(joe.getId()))[ FD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_49 $$ mark.setZip("30306")[ CD ]
Line_31 $$ List customers = s.createQuery("from Customer c left join fetch c.salesperson").list()-->Line_37 $$ assertEquals(customers.size(), 1)[ FD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_24 $$ s.save(mark)[ CD ]
Line_5 $$ Employee mark = new Employee()-->Line_9 $$ mark.setAddress("buckhead")[ FD ]
Line_3 $$ Session s = openSession()-->Line_50 $$ assertEquals(s.createQuery("from Person p where p.address.zip = '30306'").list().size(), 1)[ FD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_47 $$ mark = (Employee) s.get(Employee.class, new Long(mark.getId()))[ CD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_28 $$ assertEquals(s.createQuery("from Person p where p.class = Person").list().size(), 1)[ CD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_45 $$ assertEquals(customers.size(), 1)[ CD ]
Line_3 $$ Session s = openSession()-->Line_46 $$ s.clear()[ FD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_6 $$ mark.setName("Mark")[ CD ]
Line_5 $$ Employee mark = new Employee()-->Line_6 $$ mark.setName("Mark")[ FD ]
Line_3 $$ Session s = openSession()-->Line_29 $$ assertEquals(s.createQuery("from Person p where p.class = Customer").list().size(), 1)[ FD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_7 $$ mark.setTitle("internal sales")[ CD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_55 $$ t.commit()[ FD ]
Line_5 $$ Employee mark = new Employee()-->Line_24 $$ s.save(mark)[ FD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_48 $$ joe = (Customer) s.get(Customer.class, new Long(joe.getId()))[ CD ]
Line_12 $$ Customer joe = new Customer()-->Line_17 $$ joe.setComments("Very demanding")[ FD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_39 $$ customers = s.createQuery("from Customer").list()[ CD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_13 $$ joe.setName("Joe")[ CD ]
Line_12 $$ Customer joe = new Customer()-->Line_16 $$ joe.setCountry("USA")[ FD ]
Line_31 $$ List customers = s.createQuery("from Customer c left join fetch c.salesperson").list()-->Line_39 $$ customers = s.createQuery("from Customer").list()[ FD ]
Line_20 $$ Person yomomma = new Person()-->Line_22 $$ yomomma.setSex('F')[ FD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_16 $$ joe.setCountry("USA")[ CD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_14 $$ joe.setAddress("San Francisco")[ CD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_3 $$ Session s = openSession()[ CD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_55 $$ t.commit()[ CD ]
Line_5 $$ Employee mark = new Employee()-->Line_10 $$ mark.setZip("30305")[ FD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_26 $$ assertEquals(s.createQuery("from java.io.Serializable").list().size(), 0)[ CD ]
Line_2 $$ public void testDiscriminatorSubclass() -->Line_53 $$ s.delete(yomomma)[ CD ]
Line_3 $$ Session s = openSession()-->Line_39 $$ customers = s.createQuery("from Customer").list()[ FD ]
