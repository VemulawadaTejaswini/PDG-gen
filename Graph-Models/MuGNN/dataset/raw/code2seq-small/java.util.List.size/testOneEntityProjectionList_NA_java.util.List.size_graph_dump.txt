Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_26 $$ assertEquals(shermanExpected.getStudentNumber(), ((Student) resultList.get(1)).getStudentNumber())[ CD ]
Line_11 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_14 $$ return s.createQuery("select e.student from Enrolment e order by e.studentNumber")[ FD ]
Line_4 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_8 $$ return s.createCriteria(Enrolment.class, "e").setProjection(Projections.property("e.student")).addOrder(Order.asc("e.studentNumber"))[ FD ]
Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_21 $$ assertEquals(2, resultList.size())[ CD ]
Line_20 $$ List resultList = (List) results-->Line_21 $$ assertEquals(2, resultList.size())[ FD ]
Line_20 $$ List resultList = (List) results-->Line_26 $$ assertEquals(shermanExpected.getStudentNumber(), ((Student) resultList.get(1)).getStudentNumber())[ FD ]
Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_20 $$ List resultList = (List) results[ CD ]
Line_4 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_14 $$ return s.createQuery("select e.student from Enrolment e order by e.studentNumber")[ FD ]
Line_4 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_29 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ FD ]
Line_4 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_8 $$ return s.createCriteria(Enrolment.class, "e").setProjection(Projections.property("e.student")).addOrder(Order.asc("e.studentNumber"))[ CD ]
Line_11 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_14 $$ return s.createQuery("select e.student from Enrolment e order by e.studentNumber")[ CD ]
