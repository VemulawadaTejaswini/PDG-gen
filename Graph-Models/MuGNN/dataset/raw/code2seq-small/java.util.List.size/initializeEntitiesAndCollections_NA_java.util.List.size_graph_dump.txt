Line_3 $$ final CollectionPersister[] collectionPersisters = getCollectionPersisters()-->Line_4 $$ if (collectionPersisters != null) [ FD ]
Line_2 $$ private void initializeEntitiesAndCollections(final List hydratedObjects, final Object resultSetId, final SessionImplementor session, final boolean readOnly, List<AfterLoadAction> afterLoadActions) throws HibernateException -->Line_7 $$ endCollectionLoad(resultSetId, session, collectionPersister)[ FD ]
Line_2 $$ private void initializeEntitiesAndCollections(final List hydratedObjects, final Object resultSetId, final SessionImplementor session, final boolean readOnly, List<AfterLoadAction> afterLoadActions) throws HibernateException -->Line_34 $$ if (hydratedObjects != null) [ FD ]
Line_20 $$ if (hydratedObjects != null) -->Line_21 $$ int hydratedObjectsSize = hydratedObjects.size()[ CD ]
Line_14 $$ pre = new PreLoadEvent((EventSource) session)-->Line_24 $$ TwoPhaseLoad.initializeEntity(hydratedObject, readOnly, session, pre)[ FD ]
Line_2 $$ private void initializeEntitiesAndCollections(final List hydratedObjects, final Object resultSetId, final SessionImplementor session, final boolean readOnly, List<AfterLoadAction> afterLoadActions) throws HibernateException -->Line_4 $$ if (collectionPersisters != null) [ CD ]
Line_23 $$ for (Object hydratedObject : hydratedObjects) -->Line_39 $$ final EntityEntry entityEntry = session.getPersistenceContext().getEntry(hydratedObject)[ FD ]
Line_5 $$ for (CollectionPersister collectionPersister : collectionPersisters) -->Line_30 $$ endCollectionLoad(resultSetId, session, collectionPersister)[ FD ]
Line_2 $$ private void initializeEntitiesAndCollections(final List hydratedObjects, final Object resultSetId, final SessionImplementor session, final boolean readOnly, List<AfterLoadAction> afterLoadActions) throws HibernateException -->Line_43 $$ afterLoadAction.afterLoad(session, hydratedObject, (Loadable) entityEntry.getPersister())[ FD ]
Line_38 $$ for (AfterLoadAction afterLoadAction : afterLoadActions) -->Line_43 $$ afterLoadAction.afterLoad(session, hydratedObject, (Loadable) entityEntry.getPersister())[ FD ]
Line_2 $$ private void initializeEntitiesAndCollections(final List hydratedObjects, final Object resultSetId, final SessionImplementor session, final boolean readOnly, List<AfterLoadAction> afterLoadActions) throws HibernateException -->Line_34 $$ if (hydratedObjects != null) [ CD ]
Line_11 $$ final PreLoadEvent pre-->Line_24 $$ TwoPhaseLoad.initializeEntity(hydratedObject, readOnly, session, pre)[ FD ]
Line_2 $$ private void initializeEntitiesAndCollections(final List hydratedObjects, final Object resultSetId, final SessionImplementor session, final boolean readOnly, List<AfterLoadAction> afterLoadActions) throws HibernateException -->Line_13 $$ if (session.isEventSource()) [ CD ]
Line_23 $$ for (Object hydratedObject : hydratedObjects) -->Line_36 $$ TwoPhaseLoad.postLoad(hydratedObject, session, post)[ FD ]
Line_3 $$ final CollectionPersister[] collectionPersisters = getCollectionPersisters()-->Line_27 $$ if (collectionPersisters != null) [ FD ]
Line_29 $$ if (!collectionPersister.isArray()) -->Line_30 $$ endCollectionLoad(resultSetId, session, collectionPersister)[ CD ]
Line_11 $$ final PreLoadEvent pre-->Line_14 $$ pre = new PreLoadEvent((EventSource) session)[ FD ]
Line_12 $$ final PostLoadEvent post-->Line_36 $$ TwoPhaseLoad.postLoad(hydratedObject, session, post)[ FD ]
Line_21 $$ int hydratedObjectsSize = hydratedObjects.size()-->Line_22 $$ LOG.tracev("Total objects hydrated: [ FD ]
Line_13 $$ if (session.isEventSource()) -->Line_14 $$ pre = new PreLoadEvent((EventSource) session)[ CD ]
Line_5 $$ for (CollectionPersister collectionPersister : collectionPersisters) -->Line_29 $$ if (!collectionPersister.isArray()) [ FD ]
Line_2 $$ private void initializeEntitiesAndCollections(final List hydratedObjects, final Object resultSetId, final SessionImplementor session, final boolean readOnly, List<AfterLoadAction> afterLoadActions) throws HibernateException -->Line_3 $$ final CollectionPersister[] collectionPersisters = getCollectionPersisters()[ CD ]
Line_2 $$ private void initializeEntitiesAndCollections(final List hydratedObjects, final Object resultSetId, final SessionImplementor session, final boolean readOnly, List<AfterLoadAction> afterLoadActions) throws HibernateException -->Line_24 $$ TwoPhaseLoad.initializeEntity(hydratedObject, readOnly, session, pre)[ FD ]
Line_23 $$ for (Object hydratedObject : hydratedObjects) -->Line_43 $$ afterLoadAction.afterLoad(session, hydratedObject, (Loadable) entityEntry.getPersister())[ FD ]
Line_2 $$ private void initializeEntitiesAndCollections(final List hydratedObjects, final Object resultSetId, final SessionImplementor session, final boolean readOnly, List<AfterLoadAction> afterLoadActions) throws HibernateException -->Line_21 $$ int hydratedObjectsSize = hydratedObjects.size()[ FD ]
Line_39 $$ final EntityEntry entityEntry = session.getPersistenceContext().getEntry(hydratedObject)-->Line_40 $$ if (entityEntry == null) [ FD ]
Line_2 $$ private void initializeEntitiesAndCollections(final List hydratedObjects, final Object resultSetId, final SessionImplementor session, final boolean readOnly, List<AfterLoadAction> afterLoadActions) throws HibernateException -->Line_20 $$ if (hydratedObjects != null) [ CD ]
Line_12 $$ final PostLoadEvent post-->Line_18 $$ post = null[ FD ]
Line_2 $$ private void initializeEntitiesAndCollections(final List hydratedObjects, final Object resultSetId, final SessionImplementor session, final boolean readOnly, List<AfterLoadAction> afterLoadActions) throws HibernateException -->Line_27 $$ if (collectionPersisters != null) [ CD ]
Line_2 $$ private void initializeEntitiesAndCollections(final List hydratedObjects, final Object resultSetId, final SessionImplementor session, final boolean readOnly, List<AfterLoadAction> afterLoadActions) throws HibernateException -->Line_13 $$ if (session.isEventSource()) [ FD ]
Line_14 $$ pre = new PreLoadEvent((EventSource) session)-->Line_17 $$ pre = null[ FD ]
Line_15 $$ post = new PostLoadEvent((EventSource) session)-->Line_36 $$ TwoPhaseLoad.postLoad(hydratedObject, session, post)[ FD ]
Line_13 $$ if (session.isEventSource()) -->Line_15 $$ post = new PostLoadEvent((EventSource) session)[ CD ]
Line_13 $$ if (session.isEventSource()) -->Line_17 $$ pre = null[ CD ]
Line_15 $$ post = new PostLoadEvent((EventSource) session)-->Line_18 $$ post = null[ FD ]
Line_13 $$ if (session.isEventSource()) -->Line_18 $$ post = null[ CD ]
Line_12 $$ final PostLoadEvent post-->Line_15 $$ post = new PostLoadEvent((EventSource) session)[ FD ]
Line_2 $$ private void initializeEntitiesAndCollections(final List hydratedObjects, final Object resultSetId, final SessionImplementor session, final boolean readOnly, List<AfterLoadAction> afterLoadActions) throws HibernateException -->Line_37 $$ if (afterLoadActions != null) [ FD ]
Line_11 $$ final PreLoadEvent pre-->Line_17 $$ pre = null[ FD ]
Line_17 $$ pre = null-->Line_24 $$ TwoPhaseLoad.initializeEntity(hydratedObject, readOnly, session, pre)[ FD ]
Line_6 $$ if (collectionPersister.isArray()) -->Line_7 $$ endCollectionLoad(resultSetId, session, collectionPersister)[ CD ]
Line_18 $$ post = null-->Line_36 $$ TwoPhaseLoad.postLoad(hydratedObject, session, post)[ FD ]
Line_5 $$ for (CollectionPersister collectionPersister : collectionPersisters) -->Line_7 $$ endCollectionLoad(resultSetId, session, collectionPersister)[ FD ]
Line_2 $$ private void initializeEntitiesAndCollections(final List hydratedObjects, final Object resultSetId, final SessionImplementor session, final boolean readOnly, List<AfterLoadAction> afterLoadActions) throws HibernateException -->Line_39 $$ final EntityEntry entityEntry = session.getPersistenceContext().getEntry(hydratedObject)[ FD ]
Line_2 $$ private void initializeEntitiesAndCollections(final List hydratedObjects, final Object resultSetId, final SessionImplementor session, final boolean readOnly, List<AfterLoadAction> afterLoadActions) throws HibernateException -->Line_12 $$ final PostLoadEvent post[ CD ]
Line_39 $$ final EntityEntry entityEntry = session.getPersistenceContext().getEntry(hydratedObject)-->Line_43 $$ afterLoadAction.afterLoad(session, hydratedObject, (Loadable) entityEntry.getPersister())[ FD ]
Line_2 $$ private void initializeEntitiesAndCollections(final List hydratedObjects, final Object resultSetId, final SessionImplementor session, final boolean readOnly, List<AfterLoadAction> afterLoadActions) throws HibernateException -->Line_11 $$ final PreLoadEvent pre[ CD ]
Line_23 $$ for (Object hydratedObject : hydratedObjects) -->Line_24 $$ TwoPhaseLoad.initializeEntity(hydratedObject, readOnly, session, pre)[ FD ]
Line_5 $$ for (CollectionPersister collectionPersister : collectionPersisters) -->Line_6 $$ if (collectionPersister.isArray()) [ FD ]
Line_2 $$ private void initializeEntitiesAndCollections(final List hydratedObjects, final Object resultSetId, final SessionImplementor session, final boolean readOnly, List<AfterLoadAction> afterLoadActions) throws HibernateException -->Line_20 $$ if (hydratedObjects != null) [ FD ]
Line_20 $$ if (hydratedObjects != null) -->Line_22 $$ LOG.tracev("Total objects hydrated: [ CD ]
Line_2 $$ private void initializeEntitiesAndCollections(final List hydratedObjects, final Object resultSetId, final SessionImplementor session, final boolean readOnly, List<AfterLoadAction> afterLoadActions) throws HibernateException -->Line_36 $$ TwoPhaseLoad.postLoad(hydratedObject, session, post)[ FD ]
Line_2 $$ private void initializeEntitiesAndCollections(final List hydratedObjects, final Object resultSetId, final SessionImplementor session, final boolean readOnly, List<AfterLoadAction> afterLoadActions) throws HibernateException -->Line_30 $$ endCollectionLoad(resultSetId, session, collectionPersister)[ FD ]
