Line_27 $$ StringBuilder sb = new StringBuilder()-->Line_93 $$ sb.append("-")[ FD ]
Line_4 $$ while (true) -->Line_11 $$ if (hostNameCount == 1) [ CD ]
Line_46 $$ maxAvailableSlaveCount = availableSlaveCount-->Line_49 $$ if (availableSlaveCount >= maxAvailableSlaveCount) [ FD ]
Line_19 $$ List<String> hostNames = new ArrayList(hostNameCount)-->Line_72 $$ sb.append(hostNames.get(x))[ FD ]
Line_25 $$ List<Integer> badIndices = new ArrayList(futureTasks.size())-->Line_38 $$ badIndices.add(i)[ FD ]
Line_4 $$ while (true) -->Line_20 $$ int maxAvailableSlaveCount = Integer.MIN_VALUE[ CD ]
Line_35 $$ availableSlaveCount = null-->Line_45 $$ if (availableSlaveCount > maxAvailableSlaveCount) [ FD ]
Line_28 $$ for (int i = 0; i < futureTasks.size(); i++) -->Line_30 $$ FutureTask<Integer> futureTask = futureTasks.get(i)[ CD ]
Line_4 $$ while (true) -->Line_16 $$ waitForTurn(semaphoreFile, hostNameCount)[ CD ]
Line_27 $$ StringBuilder sb = new StringBuilder()-->Line_94 $$ sb.append(System.currentTimeMillis())[ FD ]
Line_28 $$ for (int i = 0; i < futureTasks.size(); i++) -->Line_42 $$ sb.append(" : ")[ CD ]
Line_4 $$ while (true) -->Line_10 $$ int hostNameCount = getHostNameCount(project, hostNamePrefix)[ CD ]
Line_2 $$ public static String getMostAvailableMasterURL(Project project) throws Exception -->Line_88 $$ String invokedJobBatchSize = project.getProperty("invoked.job.batch.size")[ FD ]
Line_6 $$ String hostNamePrefix = getHostNamePrefix(baseInvocationURL)-->Line_10 $$ int hostNameCount = getHostNameCount(project, hostNamePrefix)[ FD ]
Line_19 $$ List<String> hostNames = new ArrayList(hostNameCount)-->Line_24 $$ startParallelTasks(recentJobMap, hostNames, hostNamePrefix, hostNameCount, project, futureTasks)[ FD ]
Line_32 $$ availableSlaveCount = futureTask.get(15, TimeUnit.SECONDS)-->Line_45 $$ if (availableSlaveCount > maxAvailableSlaveCount) [ FD ]
Line_18 $$ Map<String, Integer> recentJobMap = getRecentJobCountMap(new File(baseDir, "recentJob"))-->Line_24 $$ startParallelTasks(recentJobMap, hostNames, hostNamePrefix, hostNameCount, project, futureTasks)[ FD ]
Line_27 $$ StringBuilder sb = new StringBuilder()-->Line_71 $$ sb.append("\nMost available master ")[ FD ]
Line_45 $$ if (availableSlaveCount > maxAvailableSlaveCount) -->Line_47 $$ maxIndices.clear()[ CD ]
Line_82 $$ if (recentJobFile.exists()) -->Line_83 $$ sb.append(JenkinsResultsParserUtil.read(recentJobFile))[ CD ]
Line_63 $$ while (true) -->Line_64 $$ x = getRandomValue(0, hostNameCount - 1)[ CD ]
Line_61 $$ x = maxIndices.get(getRandomValue(0, maxIndices.size() - 1))-->Line_72 $$ sb.append(hostNames.get(x))[ FD ]
Line_32 $$ availableSlaveCount = futureTask.get(15, TimeUnit.SECONDS)-->Line_43 $$ sb.append(availableSlaveCount)[ FD ]
Line_28 $$ for (int i = 0; i < futureTasks.size(); i++) -->Line_45 $$ if (availableSlaveCount > maxAvailableSlaveCount) [ CD ]
Line_64 $$ x = getRandomValue(0, hostNameCount - 1)-->Line_72 $$ sb.append(hostNames.get(x))[ FD ]
Line_61 $$ x = maxIndices.get(getRandomValue(0, maxIndices.size() - 1))-->Line_77 $$ return "http://" + hostNames.get(x)[ FD ]
Line_35 $$ availableSlaveCount = null-->Line_49 $$ if (availableSlaveCount >= maxAvailableSlaveCount) [ FD ]
Line_29 $$ Integer availableSlaveCount = null-->Line_35 $$ availableSlaveCount = null[ FD ]
Line_79 $$ if (recentJobPeriod > 0) -->Line_95 $$ JenkinsResultsParserUtil.write(recentJobFile, sb.toString())[ CD ]
Line_15 $$ File semaphoreFile = new File(baseDir, hostNamePrefix + ".semaphore")-->Line_16 $$ waitForTurn(semaphoreFile, hostNameCount)[ FD ]
Line_63 $$ while (true) -->Line_65 $$ if (badIndices.contains(x)) [ CD ]
Line_32 $$ availableSlaveCount = futureTask.get(15, TimeUnit.SECONDS)-->Line_46 $$ maxAvailableSlaveCount = availableSlaveCount[ FD ]
Line_79 $$ if (recentJobPeriod > 0) -->Line_82 $$ if (recentJobFile.exists()) [ CD ]
Line_79 $$ if (recentJobPeriod > 0) -->Line_93 $$ sb.append("-")[ CD ]
Line_4 $$ while (true) -->Line_14 $$ File baseDir = new File(project.getProperty("jenkins.shared.dir") + "/" + hostNamePrefix)[ CD ]
Line_28 $$ for (int i = 0; i < futureTasks.size(); i++) -->Line_43 $$ sb.append(availableSlaveCount)[ CD ]
Line_29 $$ Integer availableSlaveCount = null-->Line_32 $$ availableSlaveCount = futureTask.get(15, TimeUnit.SECONDS)[ FD ]
Line_27 $$ StringBuilder sb = new StringBuilder()-->Line_41 $$ sb.append(hostNames.get(i))[ FD ]
Line_23 $$ List<FutureTask<Integer>> futureTasks = new ArrayList(hostNameCount)-->Line_28 $$ for (int i = 0; i < futureTasks.size(); i++) [ FD ]
Line_64 $$ x = getRandomValue(0, hostNameCount - 1)-->Line_65 $$ if (badIndices.contains(x)) [ FD ]
Line_27 $$ StringBuilder sb = new StringBuilder()-->Line_84 $$ if (sb.length() > 0) [ FD ]
Line_5 $$ String baseInvocationURL = project.getProperty("base.invocation.url")-->Line_6 $$ String hostNamePrefix = getHostNamePrefix(baseInvocationURL)[ FD ]
Line_30 $$ FutureTask<Integer> futureTask = futureTasks.get(i)-->Line_32 $$ availableSlaveCount = futureTask.get(15, TimeUnit.SECONDS)[ FD ]
Line_29 $$ Integer availableSlaveCount = null-->Line_46 $$ maxAvailableSlaveCount = availableSlaveCount[ FD ]
Line_64 $$ x = getRandomValue(0, hostNameCount - 1)-->Line_77 $$ return "http://" + hostNames.get(x)[ FD ]
Line_27 $$ StringBuilder sb = new StringBuilder()-->Line_73 $$ sb.append(" has ")[ FD ]
Line_29 $$ Integer availableSlaveCount = null-->Line_43 $$ sb.append(availableSlaveCount)[ FD ]
Line_27 $$ StringBuilder sb = new StringBuilder()-->Line_75 $$ sb.append(" available slaves.")[ FD ]
Line_21 $$ int x = -1-->Line_81 $$ File recentJobFile = new File(baseDir, "recentJob/" + hostNames.get(x))[ FD ]
Line_19 $$ List<String> hostNames = new ArrayList(hostNameCount)-->Line_41 $$ sb.append(hostNames.get(i))[ FD ]
Line_28 $$ for (int i = 0; i < futureTasks.size(); i++) -->Line_50 $$ maxIndices.add(i)[ FD ]
Line_21 $$ int x = -1-->Line_65 $$ if (badIndices.contains(x)) [ FD ]
Line_10 $$ int hostNameCount = getHostNameCount(project, hostNamePrefix)-->Line_24 $$ startParallelTasks(recentJobMap, hostNames, hostNamePrefix, hostNameCount, project, futureTasks)[ FD ]
Line_19 $$ List<String> hostNames = new ArrayList(hostNameCount)-->Line_34 $$ System.out.println("Unable to assess master availability for " + hostNames.get(i))[ FD ]
Line_35 $$ availableSlaveCount = null-->Line_43 $$ sb.append(availableSlaveCount)[ FD ]
Line_20 $$ int maxAvailableSlaveCount = Integer.MIN_VALUE-->Line_53 $$ if (maxAvailableSlaveCount == Integer.MIN_VALUE) [ FD ]
Line_20 $$ int maxAvailableSlaveCount = Integer.MIN_VALUE-->Line_49 $$ if (availableSlaveCount >= maxAvailableSlaveCount) [ FD ]
Line_53 $$ if (maxAvailableSlaveCount == Integer.MIN_VALUE) -->Line_57 $$ retryCount++[ CD ]
Line_25 $$ List<Integer> badIndices = new ArrayList(futureTasks.size())-->Line_65 $$ if (badIndices.contains(x)) [ FD ]
Line_23 $$ List<FutureTask<Integer>> futureTasks = new ArrayList(hostNameCount)-->Line_24 $$ startParallelTasks(recentJobMap, hostNames, hostNamePrefix, hostNameCount, project, futureTasks)[ FD ]
Line_27 $$ StringBuilder sb = new StringBuilder()-->Line_92 $$ sb.append(invokedJobBatchSize)[ FD ]
Line_2 $$ public static String getMostAvailableMasterURL(Project project) throws Exception -->Line_3 $$ int retryCount = 0[ CD ]
Line_27 $$ StringBuilder sb = new StringBuilder()-->Line_44 $$ sb.append("\n")[ FD ]
Line_29 $$ Integer availableSlaveCount = null-->Line_45 $$ if (availableSlaveCount > maxAvailableSlaveCount) [ FD ]
Line_35 $$ availableSlaveCount = null-->Line_46 $$ maxAvailableSlaveCount = availableSlaveCount[ FD ]
Line_32 $$ availableSlaveCount = futureTask.get(15, TimeUnit.SECONDS)-->Line_49 $$ if (availableSlaveCount >= maxAvailableSlaveCount) [ FD ]
Line_4 $$ while (true) -->Line_19 $$ List<String> hostNames = new ArrayList(hostNameCount)[ CD ]
Line_19 $$ List<String> hostNames = new ArrayList(hostNameCount)-->Line_81 $$ File recentJobFile = new File(baseDir, "recentJob/" + hostNames.get(x))[ FD ]
Line_49 $$ if (availableSlaveCount >= maxAvailableSlaveCount) -->Line_50 $$ maxIndices.add(i)[ CD ]
Line_32 $$ availableSlaveCount = futureTask.get(15, TimeUnit.SECONDS)-->Line_35 $$ availableSlaveCount = null[ FD ]
Line_45 $$ if (availableSlaveCount > maxAvailableSlaveCount) -->Line_46 $$ maxAvailableSlaveCount = availableSlaveCount[ CD ]
Line_21 $$ int x = -1-->Line_72 $$ sb.append(hostNames.get(x))[ FD ]
Line_20 $$ int maxAvailableSlaveCount = Integer.MIN_VALUE-->Line_74 $$ sb.append(maxAvailableSlaveCount)[ FD ]
Line_28 $$ for (int i = 0; i < futureTasks.size(); i++) -->Line_30 $$ FutureTask<Integer> futureTask = futureTasks.get(i)[ FD ]
Line_28 $$ for (int i = 0; i < futureTasks.size(); i++) -->Line_29 $$ Integer availableSlaveCount = null[ CD ]
Line_28 $$ for (int i = 0; i < futureTasks.size(); i++) -->Line_44 $$ sb.append("\n")[ CD ]
Line_28 $$ for (int i = 0; i < futureTasks.size(); i++) -->Line_41 $$ sb.append(hostNames.get(i))[ FD ]
Line_28 $$ for (int i = 0; i < futureTasks.size(); i++) -->Line_34 $$ System.out.println("Unable to assess master availability for " + hostNames.get(i))[ FD ]
Line_60 $$ if (maxIndices.size() > 0) -->Line_61 $$ x = maxIndices.get(getRandomValue(0, maxIndices.size() - 1))[ CD ]
Line_61 $$ x = maxIndices.get(getRandomValue(0, maxIndices.size() - 1))-->Line_81 $$ File recentJobFile = new File(baseDir, "recentJob/" + hostNames.get(x))[ FD ]
Line_26 $$ List<Integer> maxIndices = new ArrayList(futureTasks.size())-->Line_61 $$ x = maxIndices.get(getRandomValue(0, maxIndices.size() - 1))[ FD ]
Line_27 $$ StringBuilder sb = new StringBuilder()-->Line_76 $$ System.out.println(sb)[ FD ]
Line_26 $$ List<Integer> maxIndices = new ArrayList(futureTasks.size())-->Line_47 $$ maxIndices.clear()[ FD ]
Line_2 $$ public static String getMostAvailableMasterURL(Project project) throws Exception -->Line_14 $$ File baseDir = new File(project.getProperty("jenkins.shared.dir") + "/" + hostNamePrefix)[ FD ]
Line_10 $$ int hostNameCount = getHostNameCount(project, hostNamePrefix)-->Line_11 $$ if (hostNameCount == 1) [ FD ]
Line_23 $$ List<FutureTask<Integer>> futureTasks = new ArrayList(hostNameCount)-->Line_26 $$ List<Integer> maxIndices = new ArrayList(futureTasks.size())[ FD ]
Line_79 $$ if (recentJobPeriod > 0) -->Line_92 $$ sb.append(invokedJobBatchSize)[ CD ]
Line_4 $$ while (true) -->Line_17 $$ JenkinsResultsParserUtil.write(semaphoreFile, _MY_HOST_NAME)[ CD ]
Line_2 $$ public static String getMostAvailableMasterURL(Project project) throws Exception -->Line_5 $$ String baseInvocationURL = project.getProperty("base.invocation.url")[ FD ]
Line_27 $$ StringBuilder sb = new StringBuilder()-->Line_43 $$ sb.append(availableSlaveCount)[ FD ]
Line_61 $$ x = maxIndices.get(getRandomValue(0, maxIndices.size() - 1))-->Line_65 $$ if (badIndices.contains(x)) [ FD ]
Line_60 $$ if (maxIndices.size() > 0) -->Line_63 $$ while (true) [ CD ]
Line_2 $$ public static String getMostAvailableMasterURL(Project project) throws Exception -->Line_24 $$ startParallelTasks(recentJobMap, hostNames, hostNamePrefix, hostNameCount, project, futureTasks)[ FD ]
Line_64 $$ x = getRandomValue(0, hostNameCount - 1)-->Line_81 $$ File recentJobFile = new File(baseDir, "recentJob/" + hostNames.get(x))[ FD ]
Line_46 $$ maxAvailableSlaveCount = availableSlaveCount-->Line_53 $$ if (maxAvailableSlaveCount == Integer.MIN_VALUE) [ FD ]
Line_10 $$ int hostNameCount = getHostNameCount(project, hostNamePrefix)-->Line_16 $$ waitForTurn(semaphoreFile, hostNameCount)[ FD ]
Line_26 $$ List<Integer> maxIndices = new ArrayList(futureTasks.size())-->Line_60 $$ if (maxIndices.size() > 0) [ FD ]
Line_27 $$ StringBuilder sb = new StringBuilder()-->Line_95 $$ JenkinsResultsParserUtil.write(recentJobFile, sb.toString())[ FD ]
Line_6 $$ String hostNamePrefix = getHostNamePrefix(baseInvocationURL)-->Line_7 $$ if (hostNamePrefix.equals(baseInvocationURL)) [ FD ]
Line_23 $$ List<FutureTask<Integer>> futureTasks = new ArrayList(hostNameCount)-->Line_30 $$ FutureTask<Integer> futureTask = futureTasks.get(i)[ FD ]
Line_21 $$ int x = -1-->Line_64 $$ x = getRandomValue(0, hostNameCount - 1)[ FD ]
Line_29 $$ Integer availableSlaveCount = null-->Line_37 $$ if (availableSlaveCount == null) [ FD ]
Line_5 $$ String baseInvocationURL = project.getProperty("base.invocation.url")-->Line_7 $$ if (hostNamePrefix.equals(baseInvocationURL)) [ FD ]
Line_28 $$ for (int i = 0; i < futureTasks.size(); i++) -->Line_49 $$ if (availableSlaveCount >= maxAvailableSlaveCount) [ CD ]
Line_46 $$ maxAvailableSlaveCount = availableSlaveCount-->Line_45 $$ if (availableSlaveCount > maxAvailableSlaveCount) [ FD ]
Line_4 $$ while (true) -->Line_5 $$ String baseInvocationURL = project.getProperty("base.invocation.url")[ CD ]
Line_20 $$ int maxAvailableSlaveCount = Integer.MIN_VALUE-->Line_45 $$ if (availableSlaveCount > maxAvailableSlaveCount) [ FD ]
Line_53 $$ if (maxAvailableSlaveCount == Integer.MIN_VALUE) -->Line_54 $$ if (retryCount == 3) [ CD ]
Line_3 $$ int retryCount = 0-->Line_54 $$ if (retryCount == 3) [ FD ]
Line_79 $$ if (recentJobPeriod > 0) -->Line_89 $$ if ((invokedJobBatchSize == null) || (invokedJobBatchSize.length() == 0)) [ CD ]
Line_4 $$ while (true) -->Line_15 $$ File semaphoreFile = new File(baseDir, hostNamePrefix + ".semaphore")[ CD ]
Line_27 $$ StringBuilder sb = new StringBuilder()-->Line_72 $$ sb.append(hostNames.get(x))[ FD ]
Line_79 $$ if (recentJobPeriod > 0) -->Line_88 $$ String invokedJobBatchSize = project.getProperty("invoked.job.batch.size")[ CD ]
Line_28 $$ for (int i = 0; i < futureTasks.size(); i++) -->Line_41 $$ sb.append(hostNames.get(i))[ CD ]
Line_37 $$ if (availableSlaveCount == null) -->Line_38 $$ badIndices.add(i)[ CD ]
Line_21 $$ int x = -1-->Line_61 $$ x = maxIndices.get(getRandomValue(0, maxIndices.size() - 1))[ FD ]
Line_84 $$ if (sb.length() > 0) -->Line_85 $$ sb.append("|")[ CD ]
Line_15 $$ File semaphoreFile = new File(baseDir, hostNamePrefix + ".semaphore")-->Line_17 $$ JenkinsResultsParserUtil.write(semaphoreFile, _MY_HOST_NAME)[ FD ]
Line_27 $$ StringBuilder sb = new StringBuilder()-->Line_83 $$ sb.append(JenkinsResultsParserUtil.read(recentJobFile))[ FD ]
Line_28 $$ for (int i = 0; i < futureTasks.size(); i++) -->Line_38 $$ badIndices.add(i)[ FD ]
Line_29 $$ Integer availableSlaveCount = null-->Line_49 $$ if (availableSlaveCount >= maxAvailableSlaveCount) [ FD ]
Line_46 $$ maxAvailableSlaveCount = availableSlaveCount-->Line_74 $$ sb.append(maxAvailableSlaveCount)[ FD ]
Line_82 $$ if (recentJobFile.exists()) -->Line_84 $$ if (sb.length() > 0) [ CD ]
Line_3 $$ int retryCount = 0-->Line_57 $$ retryCount++[ FD ]
Line_15 $$ File semaphoreFile = new File(baseDir, hostNamePrefix + ".semaphore")-->Line_97 $$ JenkinsResultsParserUtil.write(semaphoreFile, "")[ FD ]
Line_4 $$ while (true) -->Line_21 $$ int x = -1[ CD ]
Line_4 $$ while (true) -->Line_6 $$ String hostNamePrefix = getHostNamePrefix(baseInvocationURL)[ CD ]
Line_79 $$ if (recentJobPeriod > 0) -->Line_94 $$ sb.append(System.currentTimeMillis())[ CD ]
Line_35 $$ availableSlaveCount = null-->Line_37 $$ if (availableSlaveCount == null) [ FD ]
Line_26 $$ List<Integer> maxIndices = new ArrayList(futureTasks.size())-->Line_50 $$ maxIndices.add(i)[ FD ]
Line_4 $$ while (true) -->Line_18 $$ Map<String, Integer> recentJobMap = getRecentJobCountMap(new File(baseDir, "recentJob"))[ CD ]
Line_4 $$ while (true) -->Line_7 $$ if (hostNamePrefix.equals(baseInvocationURL)) [ CD ]
Line_11 $$ if (hostNameCount == 1) -->Line_12 $$ return "http://" + hostNamePrefix + "-1"[ CD ]
Line_6 $$ String hostNamePrefix = getHostNamePrefix(baseInvocationURL)-->Line_24 $$ startParallelTasks(recentJobMap, hostNames, hostNamePrefix, hostNameCount, project, futureTasks)[ FD ]
Line_23 $$ List<FutureTask<Integer>> futureTasks = new ArrayList(hostNameCount)-->Line_25 $$ List<Integer> badIndices = new ArrayList(futureTasks.size())[ FD ]
Line_20 $$ int maxAvailableSlaveCount = Integer.MIN_VALUE-->Line_46 $$ maxAvailableSlaveCount = availableSlaveCount[ FD ]
Line_28 $$ for (int i = 0; i < futureTasks.size(); i++) -->Line_37 $$ if (availableSlaveCount == null) [ CD ]
Line_27 $$ StringBuilder sb = new StringBuilder()-->Line_42 $$ sb.append(" : ")[ FD ]
Line_19 $$ List<String> hostNames = new ArrayList(hostNameCount)-->Line_77 $$ return "http://" + hostNames.get(x)[ FD ]
Line_2 $$ public static String getMostAvailableMasterURL(Project project) throws Exception -->Line_10 $$ int hostNameCount = getHostNameCount(project, hostNamePrefix)[ FD ]
Line_32 $$ availableSlaveCount = futureTask.get(15, TimeUnit.SECONDS)-->Line_37 $$ if (availableSlaveCount == null) [ FD ]
Line_21 $$ int x = -1-->Line_77 $$ return "http://" + hostNames.get(x)[ FD ]
Line_2 $$ public static String getMostAvailableMasterURL(Project project) throws Exception -->Line_4 $$ while (true) [ CD ]
Line_7 $$ if (hostNamePrefix.equals(baseInvocationURL)) -->Line_8 $$ return baseInvocationURL[ CD ]
Line_61 $$ x = maxIndices.get(getRandomValue(0, maxIndices.size() - 1))-->Line_64 $$ x = getRandomValue(0, hostNameCount - 1)[ FD ]
Line_27 $$ StringBuilder sb = new StringBuilder()-->Line_85 $$ sb.append("|")[ FD ]
Line_27 $$ StringBuilder sb = new StringBuilder()-->Line_74 $$ sb.append(maxAvailableSlaveCount)[ FD ]
