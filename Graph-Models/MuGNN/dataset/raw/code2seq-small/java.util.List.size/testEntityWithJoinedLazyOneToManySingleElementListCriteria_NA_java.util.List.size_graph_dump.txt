Line_2 $$ public void testEntityWithJoinedLazyOneToManySingleElementListCriteria() throws Exception -->Line_34 $$ runTest(null, criteriaExecutorUnaliased, checker, false)[ CD ]
Line_26 $$ if (areDynamicNonLazyAssociationsChecked()) -->Line_30 $$ assertEquals(shermanExpected.getEnrolments(), ((Student) resultList.get(1)).getEnrolments())[ CD ]
Line_20 $$ List resultList = (List) results-->Line_29 $$ assertTrue(Hibernate.isInitialized(((Student) resultList.get(1)).getEnrolments()))[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_34 $$ runTest(null, criteriaExecutorUnaliased, checker, false)[ FD ]
Line_18 $$ ResultChecker checker = new ResultChecker() -->Line_22 $$ assertEquals(yogiExpected, resultList.get(0))[ CD ]
Line_20 $$ List resultList = (List) results-->Line_28 $$ assertEquals(yogiExpected.getEnrolments(), ((Student) resultList.get(0)).getEnrolments())[ FD ]
Line_13 $$ CriteriaExecutor criteriaExecutorAliased2 = new CriteriaExecutor() -->Line_15 $$ return s.createCriteria(Student.class, "s").createAlias("s.enrolments", "e", Criteria.LEFT_JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_20 $$ List resultList = (List) results-->Line_24 $$ assertNotNull(((Student) resultList.get(0)).getEnrolments())[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Student.class, "s").createCriteria("s.enrolments", Criteria.LEFT_JOIN).addOrder(Order.asc("s.studentNumber"))[ CD ]
Line_18 $$ ResultChecker checker = new ResultChecker() -->Line_25 $$ assertNotNull(((Student) resultList.get(1)).getEnrolments())[ CD ]
Line_20 $$ List resultList = (List) results-->Line_21 $$ assertEquals(2, resultList.size())[ FD ]
Line_26 $$ if (areDynamicNonLazyAssociationsChecked()) -->Line_28 $$ assertEquals(yogiExpected.getEnrolments(), ((Student) resultList.get(0)).getEnrolments())[ CD ]
Line_26 $$ if (areDynamicNonLazyAssociationsChecked()) -->Line_29 $$ assertTrue(Hibernate.isInitialized(((Student) resultList.get(1)).getEnrolments()))[ CD ]
Line_20 $$ List resultList = (List) results-->Line_25 $$ assertNotNull(((Student) resultList.get(1)).getEnrolments())[ FD ]
Line_8 $$ CriteriaExecutor criteriaExecutorAliased1 = new CriteriaExecutor() -->Line_10 $$ return s.createCriteria(Student.class, "s").createCriteria("s.enrolments", "e", Criteria.LEFT_JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_18 $$ ResultChecker checker = new ResultChecker() -->Line_24 $$ assertNotNull(((Student) resultList.get(0)).getEnrolments())[ CD ]
Line_2 $$ public void testEntityWithJoinedLazyOneToManySingleElementListCriteria() throws Exception -->Line_35 $$ runTest(null, criteriaExecutorAliased1, checker, false)[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Student.class, "s").createCriteria("s.enrolments", Criteria.LEFT_JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_15 $$ return s.createCriteria(Student.class, "s").createAlias("s.enrolments", "e", Criteria.LEFT_JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_26 $$ if (areDynamicNonLazyAssociationsChecked()) -->Line_27 $$ assertTrue(Hibernate.isInitialized(((Student) resultList.get(0)).getEnrolments()))[ CD ]
Line_20 $$ List resultList = (List) results-->Line_27 $$ assertTrue(Hibernate.isInitialized(((Student) resultList.get(0)).getEnrolments()))[ FD ]
Line_8 $$ CriteriaExecutor criteriaExecutorAliased1 = new CriteriaExecutor() -->Line_10 $$ return s.createCriteria(Student.class, "s").createCriteria("s.enrolments", "e", Criteria.LEFT_JOIN).addOrder(Order.asc("s.studentNumber"))[ CD ]
Line_18 $$ ResultChecker checker = new ResultChecker() -->Line_20 $$ List resultList = (List) results[ CD ]
Line_2 $$ public void testEntityWithJoinedLazyOneToManySingleElementListCriteria() throws Exception -->Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() [ CD ]
Line_20 $$ List resultList = (List) results-->Line_23 $$ assertEquals(shermanExpected, resultList.get(1))[ FD ]
Line_2 $$ public void testEntityWithJoinedLazyOneToManySingleElementListCriteria() throws Exception -->Line_36 $$ runTest(null, criteriaExecutorAliased2, checker, false)[ CD ]
Line_18 $$ ResultChecker checker = new ResultChecker() -->Line_21 $$ assertEquals(2, resultList.size())[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_10 $$ return s.createCriteria(Student.class, "s").createCriteria("s.enrolments", "e", Criteria.LEFT_JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_8 $$ CriteriaExecutor criteriaExecutorAliased1 = new CriteriaExecutor() -->Line_15 $$ return s.createCriteria(Student.class, "s").createAlias("s.enrolments", "e", Criteria.LEFT_JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_13 $$ CriteriaExecutor criteriaExecutorAliased2 = new CriteriaExecutor() -->Line_15 $$ return s.createCriteria(Student.class, "s").createAlias("s.enrolments", "e", Criteria.LEFT_JOIN).addOrder(Order.asc("s.studentNumber"))[ CD ]
Line_20 $$ List resultList = (List) results-->Line_22 $$ assertEquals(yogiExpected, resultList.get(0))[ FD ]
Line_20 $$ List resultList = (List) results-->Line_30 $$ assertEquals(shermanExpected.getEnrolments(), ((Student) resultList.get(1)).getEnrolments())[ FD ]
Line_18 $$ ResultChecker checker = new ResultChecker() -->Line_26 $$ if (areDynamicNonLazyAssociationsChecked()) [ CD ]
Line_18 $$ ResultChecker checker = new ResultChecker() -->Line_23 $$ assertEquals(shermanExpected, resultList.get(1))[ CD ]
