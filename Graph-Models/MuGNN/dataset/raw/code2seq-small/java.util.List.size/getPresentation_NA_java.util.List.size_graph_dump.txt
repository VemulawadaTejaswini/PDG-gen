Line_4 $$ final List<AbstractTestProxy> failed = Filter.DEFECTIVE_LEAF.select(allTests)-->Line_10 $$ int failedCount = failed.size()[ FD ]
Line_10 $$ int failedCount = failed.size()-->Line_13 $$ return getPresentation(failedCount, passedCount, notStartedCount, ignored.size())[ FD ]
Line_3 $$ List allTests = Filter.LEAF.select(myRoot.getAllTests())-->Line_4 $$ final List<AbstractTestProxy> failed = Filter.DEFECTIVE_LEAF.select(allTests)[ FD ]
Line_7 $$ final List ignored = Filter.IGNORED.select(allTests)-->Line_9 $$ failed.removeAll(ignored)[ FD ]
Line_5 $$ final List<AbstractTestProxy> notStarted = Filter.NOT_PASSED.select(allTests)-->Line_6 $$ notStarted.removeAll(failed)[ FD ]
Line_7 $$ final List ignored = Filter.IGNORED.select(allTests)-->Line_11 $$ int notStartedCount = notStarted.size() + ignored.size()[ FD ]
Line_5 $$ final List<AbstractTestProxy> notStarted = Filter.NOT_PASSED.select(allTests)-->Line_11 $$ int notStartedCount = notStarted.size() + ignored.size()[ FD ]
Line_11 $$ int notStartedCount = notStarted.size() + ignored.size()-->Line_13 $$ return getPresentation(failedCount, passedCount, notStartedCount, ignored.size())[ FD ]
Line_2 $$ public TestResultPresentation getPresentation() -->Line_10 $$ int failedCount = failed.size()[ CD ]
Line_2 $$ public TestResultPresentation getPresentation() -->Line_11 $$ int notStartedCount = notStarted.size() + ignored.size()[ CD ]
Line_7 $$ final List ignored = Filter.IGNORED.select(allTests)-->Line_13 $$ return getPresentation(failedCount, passedCount, notStartedCount, ignored.size())[ FD ]
Line_2 $$ public TestResultPresentation getPresentation() -->Line_3 $$ List allTests = Filter.LEAF.select(myRoot.getAllTests())[ CD ]
Line_12 $$ int passedCount = allTests.size() - failedCount - notStartedCount-->Line_13 $$ return getPresentation(failedCount, passedCount, notStartedCount, ignored.size())[ FD ]
Line_4 $$ final List<AbstractTestProxy> failed = Filter.DEFECTIVE_LEAF.select(allTests)-->Line_9 $$ failed.removeAll(ignored)[ FD ]
Line_4 $$ final List<AbstractTestProxy> failed = Filter.DEFECTIVE_LEAF.select(allTests)-->Line_6 $$ notStarted.removeAll(failed)[ FD ]
Line_2 $$ public TestResultPresentation getPresentation() -->Line_7 $$ final List ignored = Filter.IGNORED.select(allTests)[ CD ]
Line_3 $$ List allTests = Filter.LEAF.select(myRoot.getAllTests())-->Line_5 $$ final List<AbstractTestProxy> notStarted = Filter.NOT_PASSED.select(allTests)[ FD ]
Line_2 $$ public TestResultPresentation getPresentation() -->Line_9 $$ failed.removeAll(ignored)[ CD ]
Line_5 $$ final List<AbstractTestProxy> notStarted = Filter.NOT_PASSED.select(allTests)-->Line_8 $$ notStarted.removeAll(ignored)[ FD ]
Line_2 $$ public TestResultPresentation getPresentation() -->Line_4 $$ final List<AbstractTestProxy> failed = Filter.DEFECTIVE_LEAF.select(allTests)[ CD ]
Line_2 $$ public TestResultPresentation getPresentation() -->Line_13 $$ return getPresentation(failedCount, passedCount, notStartedCount, ignored.size())[ CD ]
Line_2 $$ public TestResultPresentation getPresentation() -->Line_8 $$ notStarted.removeAll(ignored)[ CD ]
Line_7 $$ final List ignored = Filter.IGNORED.select(allTests)-->Line_8 $$ notStarted.removeAll(ignored)[ FD ]
Line_2 $$ public TestResultPresentation getPresentation() -->Line_12 $$ int passedCount = allTests.size() - failedCount - notStartedCount[ CD ]
Line_2 $$ public TestResultPresentation getPresentation() -->Line_5 $$ final List<AbstractTestProxy> notStarted = Filter.NOT_PASSED.select(allTests)[ CD ]
Line_3 $$ List allTests = Filter.LEAF.select(myRoot.getAllTests())-->Line_12 $$ int passedCount = allTests.size() - failedCount - notStartedCount[ FD ]
Line_3 $$ List allTests = Filter.LEAF.select(myRoot.getAllTests())-->Line_7 $$ final List ignored = Filter.IGNORED.select(allTests)[ FD ]
Line_2 $$ public TestResultPresentation getPresentation() -->Line_6 $$ notStarted.removeAll(failed)[ CD ]
