Line_6 $$ TextRange range = ranges.get(index)-->Line_16 $$ if (range.getEndOffset() < iterator.getEnd()) [ FD ]
Line_2 $$ private void translate(HighlighterIterator iterator, List<TextRange> ranges) -->Line_5 $$ while (!iterator.atEnd() && index < ranges.size()) [ FD ]
Line_4 $$ int index = 0-->Line_6 $$ TextRange range = ranges.get(index)[ FD ]
Line_6 $$ TextRange range = ranges.get(index)-->Line_13 $$ int relativeEnd = Math.min(iterator.getEnd() - range.getStartOffset(), range.getLength() + 1)[ FD ]
Line_16 $$ if (range.getEndOffset() < iterator.getEnd()) -->Line_20 $$ addElement(new Element(Math.max(offset - 1 - myAdditionalOffset, lastEnd), offset, null, TextAttributes.ERASE_MARKER))[ CD ]
Line_5 $$ while (!iterator.atEnd() && index < ranges.size()) -->Line_6 $$ TextRange range = ranges.get(index)[ CD ]
Line_5 $$ while (!iterator.atEnd() && index < ranges.size()) -->Line_11 $$ if (range.getEndOffset() >= iterator.getStart()) [ CD ]
Line_2 $$ private void translate(HighlighterIterator iterator, List<TextRange> ranges) -->Line_16 $$ if (range.getEndOffset() < iterator.getEnd()) [ FD ]
Line_6 $$ TextRange range = ranges.get(index)-->Line_7 $$ if (range.getStartOffset() >= iterator.getEnd()) [ FD ]
Line_2 $$ private void translate(HighlighterIterator iterator, List<TextRange> ranges) -->Line_7 $$ if (range.getStartOffset() >= iterator.getEnd()) [ FD ]
Line_2 $$ private void translate(HighlighterIterator iterator, List<TextRange> ranges) -->Line_8 $$ iterator.advance()[ FD ]
Line_5 $$ while (!iterator.atEnd() && index < ranges.size()) -->Line_24 $$ iterator.advance()[ CD ]
Line_11 $$ if (range.getEndOffset() >= iterator.getStart()) -->Line_14 $$ addElement(new Element(offset + relativeStart, offset + relativeEnd, iterator.getTokenType(), iterator.getTextAttributes()))[ CD ]
Line_7 $$ if (range.getStartOffset() >= iterator.getEnd()) -->Line_8 $$ iterator.advance()[ CD ]
Line_16 $$ if (range.getEndOffset() < iterator.getEnd()) -->Line_21 $$ index++[ CD ]
Line_11 $$ if (range.getEndOffset() >= iterator.getStart()) -->Line_12 $$ int relativeStart = Math.max(iterator.getStart() - range.getStartOffset(), 0)[ CD ]
Line_16 $$ if (range.getEndOffset() < iterator.getEnd()) -->Line_19 $$ int lastEnd = myPieces.isEmpty() ? -1 : myPieces.get(myPieces.size() - 1).getEnd()[ CD ]
Line_5 $$ while (!iterator.atEnd() && index < ranges.size()) -->Line_7 $$ if (range.getStartOffset() >= iterator.getEnd()) [ CD ]
Line_2 $$ private void translate(HighlighterIterator iterator, List<TextRange> ranges) -->Line_6 $$ TextRange range = ranges.get(index)[ FD ]
Line_2 $$ private void translate(HighlighterIterator iterator, List<TextRange> ranges) -->Line_13 $$ int relativeEnd = Math.min(iterator.getEnd() - range.getStartOffset(), range.getLength() + 1)[ FD ]
Line_4 $$ int index = 0-->Line_21 $$ index++[ FD ]
Line_2 $$ private void translate(HighlighterIterator iterator, List<TextRange> ranges) -->Line_12 $$ int relativeStart = Math.max(iterator.getStart() - range.getStartOffset(), 0)[ FD ]
Line_2 $$ private void translate(HighlighterIterator iterator, List<TextRange> ranges) -->Line_24 $$ iterator.advance()[ FD ]
Line_6 $$ TextRange range = ranges.get(index)-->Line_12 $$ int relativeStart = Math.max(iterator.getStart() - range.getStartOffset(), 0)[ FD ]
Line_2 $$ private void translate(HighlighterIterator iterator, List<TextRange> ranges) -->Line_14 $$ addElement(new Element(offset + relativeStart, offset + relativeEnd, iterator.getTokenType(), iterator.getTextAttributes()))[ FD ]
Line_2 $$ private void translate(HighlighterIterator iterator, List<TextRange> ranges) -->Line_11 $$ if (range.getEndOffset() >= iterator.getStart()) [ FD ]
Line_5 $$ while (!iterator.atEnd() && index < ranges.size()) -->Line_16 $$ if (range.getEndOffset() < iterator.getEnd()) [ CD ]
Line_2 $$ private void translate(HighlighterIterator iterator, List<TextRange> ranges) -->Line_4 $$ int index = 0[ CD ]
Line_6 $$ TextRange range = ranges.get(index)-->Line_11 $$ if (range.getEndOffset() >= iterator.getStart()) [ FD ]
Line_19 $$ int lastEnd = myPieces.isEmpty() ? -1 : myPieces.get(myPieces.size() - 1).getEnd()-->Line_20 $$ addElement(new Element(Math.max(offset - 1 - myAdditionalOffset, lastEnd), offset, null, TextAttributes.ERASE_MARKER))[ FD ]
Line_2 $$ private void translate(HighlighterIterator iterator, List<TextRange> ranges) -->Line_3 $$ int offset = 0[ CD ]
Line_11 $$ if (range.getEndOffset() >= iterator.getStart()) -->Line_13 $$ int relativeEnd = Math.min(iterator.getEnd() - range.getStartOffset(), range.getLength() + 1)[ CD ]
Line_2 $$ private void translate(HighlighterIterator iterator, List<TextRange> ranges) -->Line_5 $$ while (!iterator.atEnd() && index < ranges.size()) [ CD ]
