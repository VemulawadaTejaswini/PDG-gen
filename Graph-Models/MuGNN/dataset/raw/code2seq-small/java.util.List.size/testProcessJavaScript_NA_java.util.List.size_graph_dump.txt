Line_7 $$ StringWriter stringWriter = new StringWriter()-->Line_41 $$ stringWriter = new StringWriter()[ FD ]
Line_12 $$ LogRecord logRecord = logRecords.get(0)-->Line_13 $$ Assert.assertEquals("Missing </script>", logRecord.getMessage())[ FD ]
Line_25 $$ stringWriter = new StringWriter()-->Line_42 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_37 $$ logRecord = logRecords.get(1)-->Line_47 $$ Assert.assertEquals("[ FD ]
Line_12 $$ LogRecord logRecord = logRecords.get(0)-->Line_37 $$ logRecord = logRecords.get(1)[ FD ]
Line_19 $$ stringWriter = new StringWriter()-->Line_26 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_41 $$ stringWriter = new StringWriter()-->Line_54 $$ Assert.assertEquals("script>" + minifiedCode + "</script> ", stringWriter.toString())[ FD ]
Line_7 $$ StringWriter stringWriter = new StringWriter()-->Line_21 $$ Assert.assertEquals("script></script>", stringWriter.toString())[ FD ]
Line_41 $$ stringWriter = new StringWriter()-->Line_48 $$ Assert.assertEquals("script>" + minifiedCode + "</script>", stringWriter.toString())[ FD ]
Line_4 $$ StripFilter stripFilter = new StripFilter()-->Line_20 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_7 $$ StringWriter stringWriter = new StringWriter()-->Line_26 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_44 $$ logRecord = logRecords.get(0)[ FD ]
Line_12 $$ LogRecord logRecord = logRecords.get(0)-->Line_45 $$ Assert.assertEquals("(test.js:1): Parse error. unnamed function statement", logRecord.getMessage())[ FD ]
Line_25 $$ stringWriter = new StringWriter()-->Line_27 $$ Assert.assertEquals("script></script>", stringWriter.toString())[ FD ]
Line_19 $$ stringWriter = new StringWriter()-->Line_41 $$ stringWriter = new StringWriter()[ FD ]
Line_37 $$ logRecord = logRecords.get(1)-->Line_44 $$ logRecord = logRecords.get(0)[ FD ]
Line_19 $$ stringWriter = new StringWriter()-->Line_21 $$ Assert.assertEquals("script></script>", stringWriter.toString())[ FD ]
Line_44 $$ logRecord = logRecords.get(0)-->Line_46 $$ logRecord = logRecords.get(1)[ FD ]
Line_25 $$ stringWriter = new StringWriter()-->Line_26 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_7 $$ StringWriter stringWriter = new StringWriter()-->Line_53 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_25 $$ stringWriter = new StringWriter()-->Line_48 $$ Assert.assertEquals("script>" + minifiedCode + "</script>", stringWriter.toString())[ FD ]
Line_37 $$ logRecord = logRecords.get(1)-->Line_45 $$ Assert.assertEquals("(test.js:1): Parse error. unnamed function statement", logRecord.getMessage())[ FD ]
Line_25 $$ stringWriter = new StringWriter()-->Line_41 $$ stringWriter = new StringWriter()[ FD ]
Line_7 $$ StringWriter stringWriter = new StringWriter()-->Line_25 $$ stringWriter = new StringWriter()[ FD ]
Line_8 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(StripFilter.class.getName(), Level.WARNING)) -->Line_33 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_40 $$ charBuffer = CharBuffer.wrap("script>" + code + "</script>")-->Line_42 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_25 $$ stringWriter = new StringWriter()-->Line_54 $$ Assert.assertEquals("script>" + minifiedCode + "</script> ", stringWriter.toString())[ FD ]
Line_52 $$ stringWriter = new StringWriter()-->Line_54 $$ Assert.assertEquals("script>" + minifiedCode + "</script> ", stringWriter.toString())[ FD ]
Line_44 $$ logRecord = logRecords.get(0)-->Line_45 $$ Assert.assertEquals("(test.js:1): Parse error. unnamed function statement", logRecord.getMessage())[ FD ]
Line_12 $$ LogRecord logRecord = logRecords.get(0)-->Line_47 $$ Assert.assertEquals("[ FD ]
Line_8 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(StripFilter.class.getName(), Level.WARNING)) -->Line_39 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)[ FD ]
Line_40 $$ charBuffer = CharBuffer.wrap("script>" + code + "</script>")-->Line_56 $$ Assert.assertEquals(code.length() + 20, charBuffer.position())[ FD ]
Line_37 $$ logRecord = logRecords.get(1)-->Line_38 $$ Assert.assertEquals("[ FD ]
Line_41 $$ stringWriter = new StringWriter()-->Line_42 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_7 $$ StringWriter stringWriter = new StringWriter()-->Line_54 $$ Assert.assertEquals("script>" + minifiedCode + "</script> ", stringWriter.toString())[ FD ]
Line_4 $$ StripFilter stripFilter = new StripFilter()-->Line_53 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_39 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)-->Line_46 $$ logRecord = logRecords.get(1)[ FD ]
Line_41 $$ stringWriter = new StringWriter()-->Line_52 $$ stringWriter = new StringWriter()[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_37 $$ logRecord = logRecords.get(1)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_11 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_7 $$ StringWriter stringWriter = new StringWriter()-->Line_48 $$ Assert.assertEquals("script>" + minifiedCode + "</script>", stringWriter.toString())[ FD ]
Line_39 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)-->Line_44 $$ logRecord = logRecords.get(0)[ FD ]
Line_7 $$ StringWriter stringWriter = new StringWriter()-->Line_27 $$ Assert.assertEquals("script></script>", stringWriter.toString())[ FD ]
Line_4 $$ StripFilter stripFilter = new StripFilter()-->Line_42 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_12 $$ LogRecord logRecord = logRecords.get(0)-->Line_36 $$ Assert.assertEquals("(test.js:1): Parse error. unnamed function statement", logRecord.getMessage())[ FD ]
Line_19 $$ stringWriter = new StringWriter()-->Line_42 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_12 $$ LogRecord logRecord = logRecords.get(0)-->Line_46 $$ logRecord = logRecords.get(1)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_46 $$ logRecord = logRecords.get(1)[ FD ]
Line_12 $$ LogRecord logRecord = logRecords.get(0)-->Line_38 $$ Assert.assertEquals("[ FD ]
Line_19 $$ stringWriter = new StringWriter()-->Line_27 $$ Assert.assertEquals("script></script>", stringWriter.toString())[ FD ]
Line_8 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(StripFilter.class.getName(), Level.WARNING)) -->Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_43 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_46 $$ logRecord = logRecords.get(1)-->Line_47 $$ Assert.assertEquals("[ FD ]
Line_19 $$ stringWriter = new StringWriter()-->Line_53 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_4 $$ StripFilter stripFilter = new StripFilter()-->Line_9 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_39 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)-->Line_43 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_19 $$ stringWriter = new StringWriter()-->Line_25 $$ stringWriter = new StringWriter()[ FD ]
Line_40 $$ charBuffer = CharBuffer.wrap("script>" + code + "</script>")-->Line_53 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_7 $$ StringWriter stringWriter = new StringWriter()-->Line_52 $$ stringWriter = new StringWriter()[ FD ]
Line_7 $$ StringWriter stringWriter = new StringWriter()-->Line_14 $$ Assert.assertEquals("script>", stringWriter.toString())[ FD ]
Line_44 $$ logRecord = logRecords.get(0)-->Line_47 $$ Assert.assertEquals("[ FD ]
Line_40 $$ charBuffer = CharBuffer.wrap("script>" + code + "</script>")-->Line_49 $$ Assert.assertEquals(code.length() + 16, charBuffer.position())[ FD ]
Line_19 $$ stringWriter = new StringWriter()-->Line_54 $$ Assert.assertEquals("script>" + minifiedCode + "</script> ", stringWriter.toString())[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_34 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_39 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)[ FD ]
Line_52 $$ stringWriter = new StringWriter()-->Line_53 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_19 $$ stringWriter = new StringWriter()-->Line_48 $$ Assert.assertEquals("script>" + minifiedCode + "</script>", stringWriter.toString())[ FD ]
Line_41 $$ stringWriter = new StringWriter()-->Line_53 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_7 $$ StringWriter stringWriter = new StringWriter()-->Line_9 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_12 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_19 $$ stringWriter = new StringWriter()-->Line_52 $$ stringWriter = new StringWriter()[ FD ]
Line_12 $$ LogRecord logRecord = logRecords.get(0)-->Line_44 $$ logRecord = logRecords.get(0)[ FD ]
Line_7 $$ StringWriter stringWriter = new StringWriter()-->Line_42 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_7 $$ StringWriter stringWriter = new StringWriter()-->Line_20 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_7 $$ StringWriter stringWriter = new StringWriter()-->Line_19 $$ stringWriter = new StringWriter()[ FD ]
Line_25 $$ stringWriter = new StringWriter()-->Line_53 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_19 $$ stringWriter = new StringWriter()-->Line_20 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_37 $$ logRecord = logRecords.get(1)-->Line_46 $$ logRecord = logRecords.get(1)[ FD ]
Line_25 $$ stringWriter = new StringWriter()-->Line_52 $$ stringWriter = new StringWriter()[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_35 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_4 $$ StripFilter stripFilter = new StripFilter()-->Line_26 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
