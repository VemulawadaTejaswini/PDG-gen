Line_8 $$ List<HandlerExceptionResolver> expectedResolvers = compositeResolver.getExceptionResolvers()-->Line_12 $$ ExceptionHandlerExceptionResolver eher = (ExceptionHandlerExceptionResolver) expectedResolvers.get(0)[ FD ]
Line_14 $$ DirectFieldAccessor fieldAccessor = new DirectFieldAccessor(eher)-->Line_15 $$ List<Object> interceptors = (List<Object>) fieldAccessor.getPropertyValue("responseBodyAdvice")[ FD ]
Line_20 $$ ResponseStatusExceptionResolver rser = (ResponseStatusExceptionResolver) expectedResolvers.get(1)-->Line_23 $$ rser.resolveException(request, response, context.getBean(TestController.class), new UserAlreadyExistsException())[ FD ]
Line_5 $$ ApplicationContext context = initContext(WebConfig.class)-->Line_23 $$ rser.resolveException(request, response, context.getBean(TestController.class), new UserAlreadyExistsException())[ FD ]
Line_8 $$ List<HandlerExceptionResolver> expectedResolvers = compositeResolver.getExceptionResolvers()-->Line_9 $$ assertEquals(ExceptionHandlerExceptionResolver.class, expectedResolvers.get(0).getClass())[ FD ]
Line_15 $$ List<Object> interceptors = (List<Object>) fieldAccessor.getPropertyValue("responseBodyAdvice")-->Line_16 $$ assertEquals(1, interceptors.size())[ FD ]
Line_22 $$ MockHttpServletResponse response = new MockHttpServletResponse()-->Line_24 $$ assertEquals("User already exists!", response.getErrorMessage())[ FD ]
Line_12 $$ ExceptionHandlerExceptionResolver eher = (ExceptionHandlerExceptionResolver) expectedResolvers.get(0)-->Line_13 $$ assertNotNull(eher.getApplicationContext())[ FD ]
Line_5 $$ ApplicationContext context = initContext(WebConfig.class)-->Line_6 $$ HandlerExceptionResolverComposite compositeResolver = context.getBean("handlerExceptionResolver", HandlerExceptionResolverComposite.class)[ FD ]
Line_15 $$ List<Object> interceptors = (List<Object>) fieldAccessor.getPropertyValue("responseBodyAdvice")-->Line_17 $$ assertEquals(JsonViewResponseBodyAdvice.class, interceptors.get(0).getClass())[ FD ]
Line_8 $$ List<HandlerExceptionResolver> expectedResolvers = compositeResolver.getExceptionResolvers()-->Line_10 $$ assertEquals(ResponseStatusExceptionResolver.class, expectedResolvers.get(1).getClass())[ FD ]
Line_8 $$ List<HandlerExceptionResolver> expectedResolvers = compositeResolver.getExceptionResolvers()-->Line_20 $$ ResponseStatusExceptionResolver rser = (ResponseStatusExceptionResolver) expectedResolvers.get(1)[ FD ]
Line_21 $$ MockHttpServletRequest request = new MockHttpServletRequest("GET", "/")-->Line_23 $$ rser.resolveException(request, response, context.getBean(TestController.class), new UserAlreadyExistsException())[ FD ]
Line_8 $$ List<HandlerExceptionResolver> expectedResolvers = compositeResolver.getExceptionResolvers()-->Line_11 $$ assertEquals(DefaultHandlerExceptionResolver.class, expectedResolvers.get(2).getClass())[ FD ]
Line_22 $$ MockHttpServletResponse response = new MockHttpServletResponse()-->Line_23 $$ rser.resolveException(request, response, context.getBean(TestController.class), new UserAlreadyExistsException())[ FD ]
Line_6 $$ HandlerExceptionResolverComposite compositeResolver = context.getBean("handlerExceptionResolver", HandlerExceptionResolverComposite.class)-->Line_7 $$ assertEquals(0, compositeResolver.getOrder())[ FD ]
Line_6 $$ HandlerExceptionResolverComposite compositeResolver = context.getBean("handlerExceptionResolver", HandlerExceptionResolverComposite.class)-->Line_8 $$ List<HandlerExceptionResolver> expectedResolvers = compositeResolver.getExceptionResolvers()[ FD ]
