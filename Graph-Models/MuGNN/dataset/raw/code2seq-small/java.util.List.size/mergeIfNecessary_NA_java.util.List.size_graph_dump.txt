Line_2 $$ private void mergeIfNecessary(int insertionIndex) -->Line_4 $$ if (insertionIndex > 0) [ FD ]
Line_2 $$ private void mergeIfNecessary(int insertionIndex) -->Line_4 $$ if (insertionIndex > 0) [ CD ]
Line_6 $$ if (left.getClientEndOffset() == toMerge.clientStartOffset && left.change.getEnd() == toMerge.change.getStart()) -->Line_9 $$ myChanges.remove(insertionIndex)[ CD ]
Line_2 $$ private void mergeIfNecessary(int insertionIndex) -->Line_14 $$ if (insertionIndex < myChanges.size() - 1) [ CD ]
Line_14 $$ if (insertionIndex < myChanges.size() - 1) -->Line_16 $$ if (toMerge.getClientEndOffset() == right.clientStartOffset && toMerge.change.getEnd() == right.change.getStart()) [ CD ]
Line_2 $$ private void mergeIfNecessary(int insertionIndex) -->Line_9 $$ myChanges.remove(insertionIndex)[ FD ]
Line_6 $$ if (left.getClientEndOffset() == toMerge.clientStartOffset && left.change.getEnd() == toMerge.change.getStart()) -->Line_7 $$ String text = left.change.getText().toString() + toMerge.change.getText()[ CD ]
Line_6 $$ if (left.getClientEndOffset() == toMerge.clientStartOffset && left.change.getEnd() == toMerge.change.getStart()) -->Line_8 $$ left.change = new TextChangeImpl(text, left.change.getStart(), toMerge.change.getEnd())[ CD ]
Line_6 $$ if (left.getClientEndOffset() == toMerge.clientStartOffset && left.change.getEnd() == toMerge.change.getStart()) -->Line_10 $$ insertionIndex--[ CD ]
Line_4 $$ if (insertionIndex > 0) -->Line_6 $$ if (left.getClientEndOffset() == toMerge.clientStartOffset && left.change.getEnd() == toMerge.change.getStart()) [ CD ]
Line_16 $$ if (toMerge.getClientEndOffset() == right.clientStartOffset && toMerge.change.getEnd() == right.change.getStart()) -->Line_19 $$ myChanges.remove(insertionIndex + 1)[ CD ]
Line_2 $$ private void mergeIfNecessary(int insertionIndex) -->Line_10 $$ insertionIndex--[ FD ]
Line_2 $$ private void mergeIfNecessary(int insertionIndex) -->Line_13 $$ toMerge = myChanges.get(insertionIndex)[ FD ]
Line_13 $$ toMerge = myChanges.get(insertionIndex)-->Line_16 $$ if (toMerge.getClientEndOffset() == right.clientStartOffset && toMerge.change.getEnd() == right.change.getStart()) [ FD ]
Line_14 $$ if (insertionIndex < myChanges.size() - 1) -->Line_15 $$ ChangeEntry right = myChanges.get(insertionIndex + 1)[ CD ]
Line_2 $$ private void mergeIfNecessary(int insertionIndex) -->Line_13 $$ toMerge = myChanges.get(insertionIndex)[ CD ]
Line_2 $$ private void mergeIfNecessary(int insertionIndex) -->Line_3 $$ ChangeEntry toMerge = myChanges.get(insertionIndex)[ CD ]
Line_5 $$ ChangeEntry left = myChanges.get(insertionIndex - 1)-->Line_6 $$ if (left.getClientEndOffset() == toMerge.clientStartOffset && left.change.getEnd() == toMerge.change.getStart()) [ FD ]
Line_16 $$ if (toMerge.getClientEndOffset() == right.clientStartOffset && toMerge.change.getEnd() == right.change.getStart()) -->Line_18 $$ toMerge.change = new TextChangeImpl(text, toMerge.change.getStart(), right.change.getEnd())[ CD ]
Line_2 $$ private void mergeIfNecessary(int insertionIndex) -->Line_3 $$ ChangeEntry toMerge = myChanges.get(insertionIndex)[ FD ]
Line_4 $$ if (insertionIndex > 0) -->Line_5 $$ ChangeEntry left = myChanges.get(insertionIndex - 1)[ CD ]
Line_3 $$ ChangeEntry toMerge = myChanges.get(insertionIndex)-->Line_16 $$ if (toMerge.getClientEndOffset() == right.clientStartOffset && toMerge.change.getEnd() == right.change.getStart()) [ FD ]
Line_3 $$ ChangeEntry toMerge = myChanges.get(insertionIndex)-->Line_13 $$ toMerge = myChanges.get(insertionIndex)[ FD ]
Line_2 $$ private void mergeIfNecessary(int insertionIndex) -->Line_14 $$ if (insertionIndex < myChanges.size() - 1) [ FD ]
