Line_3 $$ if (chunkedCommits.isEmpty()) -->Line_6 $$ int size = chunkedCommits.size()[ CD ]
Line_13 $$ for (int i = 1; i < size; i++) -->Line_14 $$ List<String> chunk = chunkedCommits.get(i)[ CD ]
Line_2 $$ protected void executeChunked(@NotNull List<List<String>> chunkedCommits) throws HgCommandException, VcsException -->Line_3 $$ if (chunkedCommits.isEmpty()) [ CD ]
Line_13 $$ for (int i = 1; i < size; i++) -->Line_14 $$ List<String> chunk = chunkedCommits.get(i)[ FD ]
Line_11 $$ HgVcs vcs = HgVcs.getInstance(myProject)-->Line_12 $$ boolean amendCommit = vcs != null && vcs.getVersion().isAmendSupported()[ FD ]
Line_3 $$ if (chunkedCommits.isEmpty()) -->Line_11 $$ HgVcs vcs = HgVcs.getInstance(myProject)[ CD ]
Line_3 $$ if (chunkedCommits.isEmpty()) -->Line_13 $$ for (int i = 1; i < size; i++) [ CD ]
Line_13 $$ for (int i = 1; i < size; i++) -->Line_15 $$ commitChunkFiles(chunk, amendCommit, false, myCloseBranch && i == size - 1)[ CD ]
Line_6 $$ int size = chunkedCommits.size()-->Line_13 $$ for (int i = 1; i < size; i++) [ FD ]
Line_2 $$ protected void executeChunked(@NotNull List<List<String>> chunkedCommits) throws HgCommandException, VcsException -->Line_3 $$ if (chunkedCommits.isEmpty()) [ FD ]
Line_3 $$ if (chunkedCommits.isEmpty()) -->Line_4 $$ commitChunkFiles(ContainerUtil.<String>emptyList(), myAmend, myCloseBranch)[ CD ]
Line_2 $$ protected void executeChunked(@NotNull List<List<String>> chunkedCommits) throws HgCommandException, VcsException -->Line_6 $$ int size = chunkedCommits.size()[ FD ]
Line_3 $$ if (chunkedCommits.isEmpty()) -->Line_12 $$ boolean amendCommit = vcs != null && vcs.getVersion().isAmendSupported()[ CD ]
Line_2 $$ protected void executeChunked(@NotNull List<List<String>> chunkedCommits) throws HgCommandException, VcsException -->Line_14 $$ List<String> chunk = chunkedCommits.get(i)[ FD ]
Line_7 $$ if (myShouldCommitWithSubrepos && myRepository.hasSubrepos()) -->Line_8 $$ mySubrepos = HgUtil.getNamesWithoutHashes(myRepository.getSubrepos())[ CD ]
Line_3 $$ if (chunkedCommits.isEmpty()) -->Line_7 $$ if (myShouldCommitWithSubrepos && myRepository.hasSubrepos()) [ CD ]
Line_3 $$ if (chunkedCommits.isEmpty()) -->Line_10 $$ commitChunkFiles(chunkedCommits.get(0), myAmend, !mySubrepos.isEmpty(), myCloseBranch && size == 1)[ CD ]
Line_14 $$ List<String> chunk = chunkedCommits.get(i)-->Line_15 $$ commitChunkFiles(chunk, amendCommit, false, myCloseBranch && i == size - 1)[ FD ]
Line_2 $$ protected void executeChunked(@NotNull List<List<String>> chunkedCommits) throws HgCommandException, VcsException -->Line_10 $$ commitChunkFiles(chunkedCommits.get(0), myAmend, !mySubrepos.isEmpty(), myCloseBranch && size == 1)[ FD ]
Line_12 $$ boolean amendCommit = vcs != null && vcs.getVersion().isAmendSupported()-->Line_15 $$ commitChunkFiles(chunk, amendCommit, false, myCloseBranch && i == size - 1)[ FD ]
