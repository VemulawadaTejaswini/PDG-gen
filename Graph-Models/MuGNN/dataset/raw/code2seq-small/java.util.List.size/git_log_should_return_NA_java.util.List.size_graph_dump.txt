Line_17 $$ actualMessage = actualMessage.replace("\n", "").replace(" ", "")-->Line_24 $$ assertEquals("Commit doesn't match", expectedMessage, trimHash(actualMessage))[ FD ]
Line_10 $$ for (int i = 0; i < expectedMessages.size(); i++) -->Line_11 $$ String expectedMessage = StringUtil.convertLineSeparators(expectedMessages.get(i).trim())[ FD ]
Line_17 $$ actualMessage = actualMessage.replace("\n", "").replace(" ", "")-->Line_21 $$ actualMessage = actualMessage.replace("\n\n", "\n")[ FD ]
Line_6 $$ boolean fullBody = GitVersionSpecialty.STARTED_USING_RAW_BODY_IN_FORMAT.existsIn(myVcs.getVersion())-->Line_13 $$ if (!fullBody) [ FD ]
Line_10 $$ for (int i = 0; i < expectedMessages.size(); i++) -->Line_24 $$ assertEquals("Commit doesn't match", expectedMessage, trimHash(actualMessage))[ CD ]
Line_9 $$ List<String> actualMessages = Arrays.asList(output.split(RECORD_SEPARATOR))-->Line_12 $$ String actualMessage = StringUtil.convertLineSeparators(actualMessages.get(i).trim())[ FD ]
Line_4 $$ List<String> expectedMessages = Arrays.asList(messages.split("-----"))-->Line_10 $$ for (int i = 0; i < expectedMessages.size(); i++) [ FD ]
Line_5 $$ final String RECORD_SEPARATOR = "@"-->Line_8 $$ String output = git("log -%s --pretty=%s%s", String.valueOf(commitNum), data, RECORD_SEPARATOR)[ FD ]
Line_21 $$ actualMessage = actualMessage.replace("\n\n", "\n")-->Line_17 $$ actualMessage = actualMessage.replace("\n", "").replace(" ", "")[ FD ]
Line_13 $$ if (!fullBody) -->Line_21 $$ actualMessage = actualMessage.replace("\n\n", "\n")[ CD ]
Line_12 $$ String actualMessage = StringUtil.convertLineSeparators(actualMessages.get(i).trim())-->Line_21 $$ actualMessage = actualMessage.replace("\n\n", "\n")[ FD ]
Line_10 $$ for (int i = 0; i < expectedMessages.size(); i++) -->Line_12 $$ String actualMessage = StringUtil.convertLineSeparators(actualMessages.get(i).trim())[ CD ]
Line_11 $$ String expectedMessage = StringUtil.convertLineSeparators(expectedMessages.get(i).trim())-->Line_24 $$ assertEquals("Commit doesn't match", expectedMessage, trimHash(actualMessage))[ FD ]
Line_10 $$ for (int i = 0; i < expectedMessages.size(); i++) -->Line_23 $$ expectedMessage = virtualCommits.replaceVirtualHashes(expectedMessage)[ CD ]
Line_8 $$ String output = git("log -%s --pretty=%s%s", String.valueOf(commitNum), data, RECORD_SEPARATOR)-->Line_9 $$ List<String> actualMessages = Arrays.asList(output.split(RECORD_SEPARATOR))[ FD ]
Line_21 $$ actualMessage = actualMessage.replace("\n\n", "\n")-->Line_24 $$ assertEquals("Commit doesn't match", expectedMessage, trimHash(actualMessage))[ FD ]
Line_13 $$ if (!fullBody) -->Line_17 $$ actualMessage = actualMessage.replace("\n", "").replace(" ", "")[ CD ]
Line_23 $$ expectedMessage = virtualCommits.replaceVirtualHashes(expectedMessage)-->Line_24 $$ assertEquals("Commit doesn't match", expectedMessage, trimHash(actualMessage))[ FD ]
Line_10 $$ for (int i = 0; i < expectedMessages.size(); i++) -->Line_12 $$ String actualMessage = StringUtil.convertLineSeparators(actualMessages.get(i).trim())[ FD ]
Line_12 $$ String actualMessage = StringUtil.convertLineSeparators(actualMessages.get(i).trim())-->Line_17 $$ actualMessage = actualMessage.replace("\n", "").replace(" ", "")[ FD ]
Line_10 $$ for (int i = 0; i < expectedMessages.size(); i++) -->Line_11 $$ String expectedMessage = StringUtil.convertLineSeparators(expectedMessages.get(i).trim())[ CD ]
Line_10 $$ for (int i = 0; i < expectedMessages.size(); i++) -->Line_13 $$ if (!fullBody) [ CD ]
Line_4 $$ List<String> expectedMessages = Arrays.asList(messages.split("-----"))-->Line_11 $$ String expectedMessage = StringUtil.convertLineSeparators(expectedMessages.get(i).trim())[ FD ]
Line_5 $$ final String RECORD_SEPARATOR = "@"-->Line_9 $$ List<String> actualMessages = Arrays.asList(output.split(RECORD_SEPARATOR))[ FD ]
Line_11 $$ String expectedMessage = StringUtil.convertLineSeparators(expectedMessages.get(i).trim())-->Line_23 $$ expectedMessage = virtualCommits.replaceVirtualHashes(expectedMessage)[ FD ]
Line_12 $$ String actualMessage = StringUtil.convertLineSeparators(actualMessages.get(i).trim())-->Line_24 $$ assertEquals("Commit doesn't match", expectedMessage, trimHash(actualMessage))[ FD ]
Line_7 $$ String data = fullBody ? "%B" : "%s%b"-->Line_8 $$ String output = git("log -%s --pretty=%s%s", String.valueOf(commitNum), data, RECORD_SEPARATOR)[ FD ]
