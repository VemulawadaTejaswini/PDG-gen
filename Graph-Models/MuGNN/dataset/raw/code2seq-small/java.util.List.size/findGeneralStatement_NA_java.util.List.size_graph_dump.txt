Line_12 $$ for (Statement st : lstAll) -->Line_76 $$ setNodes.add(st)[ FD ]
Line_114 $$ if ((setNodes.size() > 1 || head.getNeighbours(StatEdge.TYPE_REGULAR, Statement.DIRECTION_BACKWARD).contains(head)) && setNodes.size() < stats.size()) -->Line_115 $$ if (checkSynchronizedCompleteness(head, setNodes)) [ CD ]
Line_75 $$ if (!(setNodes.contains(st) || (!same && st == post))) -->Line_76 $$ setNodes.add(st)[ CD ]
Line_39 $$ Statement head = stats.getWithKey(headid)-->Line_114 $$ if ((setNodes.size() > 1 || head.getNeighbours(StatEdge.TYPE_REGULAR, Statement.DIRECTION_BACKWARD).contains(head)) && setNodes.size() < stats.size()) [ FD ]
Line_41 $$ for (int i = 0; i < posts.size(); i++) -->Line_57 $$ while (true) [ CD ]
Line_4 $$ VBStyleCollection<List<Integer>, Integer> vbPost-->Line_34 $$ Integer headid = vbPost.getKey(k)[ FD ]
Line_2 $$ private static Statement findGeneralStatement(Statement stat, boolean forceall, HashMap<Integer, Set<Integer>> mapExtPost) -->Line_117 $$ stat.collapseNodesToStatement(res)[ FD ]
Line_41 $$ for (int i = 0; i < posts.size(); i++) -->Line_42 $$ Integer postid = posts.get(i)[ FD ]
Line_41 $$ for (int i = 0; i < posts.size(); i++) -->Line_52 $$ HashSet<Statement> setNodes = new HashSet<Statement>()[ CD ]
Line_87 $$ hdfound = true-->Line_92 $$ if (!hdfound) [ FD ]
Line_4 $$ VBStyleCollection<List<Integer>, Integer> vbPost-->Line_10 $$ vbPost = new VBStyleCollection<List<Integer>, Integer>()[ FD ]
Line_34 $$ Integer headid = vbPost.getKey(k)-->Line_36 $$ if (!mapExtPost.containsKey(headid) && !(posts.size() == 1 && posts.get(0).equals(headid))) [ FD ]
Line_41 $$ for (int i = 0; i < posts.size(); i++) -->Line_101 $$ setHandlers.removeAll(setNodes)[ CD ]
Line_4 $$ VBStyleCollection<List<Integer>, Integer> vbPost-->Line_25 $$ vbPost.addWithKey(lst = new ArrayList<Integer>(), id)[ FD ]
Line_74 $$ Statement st = lstStack.remove(0)-->Line_76 $$ setNodes.add(st)[ FD ]
Line_4 $$ VBStyleCollection<List<Integer>, Integer> vbPost-->Line_33 $$ for (int k = 0; k < vbPost.size(); k++) [ FD ]
Line_2 $$ private static Statement findGeneralStatement(Statement stat, boolean forceall, HashMap<Integer, Set<Integer>> mapExtPost) -->Line_3 $$ VBStyleCollection<Statement, Integer> stats = stat.getStats()[ FD ]
Line_71 $$ LinkedList<Statement> lstStack = new LinkedList<Statement>()-->Line_72 $$ lstStack.add(handler)[ FD ]
Line_5 $$ if (mapExtPost.isEmpty()) -->Line_6 $$ FastExtendedPostdominanceHelper extpost = new FastExtendedPostdominanceHelper()[ CD ]
Line_33 $$ for (int k = 0; k < vbPost.size(); k++) -->Line_35 $$ List<Integer> posts = vbPost.get(k)[ FD ]
Line_74 $$ Statement st = lstStack.remove(0)-->Line_75 $$ if (!(setNodes.contains(st) || (!same && st == post))) [ FD ]
Line_71 $$ LinkedList<Statement> lstStack = new LinkedList<Statement>()-->Line_73 $$ while (!lstStack.isEmpty()) [ FD ]
Line_23 $$ List<Integer> lst = vbPost.getWithKey(id)-->Line_27 $$ lst.add(id)[ FD ]
Line_9 $$ if (forceall) -->Line_21 $$ if (setFirst != null) [ CD ]
Line_2 $$ private static Statement findGeneralStatement(Statement stat, boolean forceall, HashMap<Integer, Set<Integer>> mapExtPost) -->Line_7 $$ mapExtPost.putAll(extpost.getExtendedPostdominators(stat))[ FD ]
Line_57 $$ while (true) -->Line_92 $$ if (!hdfound) [ CD ]
Line_73 $$ while (!lstStack.isEmpty()) -->Line_75 $$ if (!(setNodes.contains(st) || (!same && st == post))) [ CD ]
Line_2 $$ private static Statement findGeneralStatement(Statement stat, boolean forceall, HashMap<Integer, Set<Integer>> mapExtPost) -->Line_13 $$ Set<Integer> set = mapExtPost.get(st.id)[ FD ]
Line_2 $$ private static Statement findGeneralStatement(Statement stat, boolean forceall, HashMap<Integer, Set<Integer>> mapExtPost) -->Line_11 $$ List<Statement> lstAll = stat.getPostReversePostOrderList()[ FD ]
Line_52 $$ HashSet<Statement> setNodes = new HashSet<Statement>()-->Line_112 $$ setPreds.removeAll(setNodes)[ FD ]
Line_42 $$ Integer postid = posts.get(i)-->Line_46 $$ Statement post = stats.getWithKey(postid)[ FD ]
Line_33 $$ for (int k = 0; k < vbPost.size(); k++) -->Line_34 $$ Integer headid = vbPost.getKey(k)[ CD ]
Line_70 $$ if (addhd) -->Line_88 $$ setHandlers.remove(handler)[ CD ]
Line_41 $$ for (int i = 0; i < posts.size(); i++) -->Line_47 $$ if (post == null) [ CD ]
Line_35 $$ List<Integer> posts = vbPost.get(k)-->Line_36 $$ if (!mapExtPost.containsKey(headid) && !(posts.size() == 1 && posts.get(0).equals(headid))) [ FD ]
Line_12 $$ for (Statement st : lstAll) -->Line_99 $$ setHandlers.addAll(st.getNeighbours(StatEdge.TYPE_EXCEPTION, Statement.DIRECTION_FORWARD))[ FD ]
Line_33 $$ for (int k = 0; k < vbPost.size(); k++) -->Line_40 $$ Set<Integer> setExtPosts = mapExtPost.get(headid)[ CD ]
Line_2 $$ private static Statement findGeneralStatement(Statement stat, boolean forceall, HashMap<Integer, Set<Integer>> mapExtPost) -->Line_40 $$ Set<Integer> setExtPosts = mapExtPost.get(headid)[ FD ]
Line_51 $$ boolean same = (post == head)-->Line_75 $$ if (!(setNodes.contains(st) || (!same && st == post))) [ FD ]
Line_52 $$ HashSet<Statement> setNodes = new HashSet<Statement>()-->Line_101 $$ setHandlers.removeAll(setNodes)[ FD ]
Line_6 $$ FastExtendedPostdominanceHelper extpost = new FastExtendedPostdominanceHelper()-->Line_7 $$ mapExtPost.putAll(extpost.getExtendedPostdominators(stat))[ FD ]
Line_59 $$ for (Statement handler : setHandlers) -->Line_72 $$ lstStack.add(handler)[ FD ]
Line_67 $$ addhd = (setNodes.containsAll(hdsupp) && (// strict subset-->Line_65 $$ if (!addhd) [ FD ]
Line_10 $$ vbPost = new VBStyleCollection<List<Integer>, Integer>()-->Line_33 $$ for (int k = 0; k < vbPost.size(); k++) [ FD ]
Line_2 $$ private static Statement findGeneralStatement(Statement stat, boolean forceall, HashMap<Integer, Set<Integer>> mapExtPost) -->Line_36 $$ if (!mapExtPost.containsKey(headid) && !(posts.size() == 1 && posts.get(0).equals(headid))) [ FD ]
Line_10 $$ vbPost = new VBStyleCollection<List<Integer>, Integer>()-->Line_31 $$ vbPost = calcPostDominators(stat)[ FD ]
Line_52 $$ HashSet<Statement> setNodes = new HashSet<Statement>()-->Line_67 $$ addhd = (setNodes.containsAll(hdsupp) && (// strict subset[ FD ]
Line_12 $$ for (Statement st : lstAll) -->Line_75 $$ if (!(setNodes.contains(st) || (!same && st == post))) [ FD ]
Line_53 $$ HashSet<Statement> setPreds = new HashSet<Statement>()-->Line_112 $$ setPreds.removeAll(setNodes)[ FD ]
Line_52 $$ HashSet<Statement> setNodes = new HashSet<Statement>()-->Line_76 $$ setNodes.add(st)[ FD ]
Line_22 $$ for (Integer id : setFirst) -->Line_27 $$ lst.add(id)[ FD ]
Line_2 $$ private static Statement findGeneralStatement(Statement stat, boolean forceall, HashMap<Integer, Set<Integer>> mapExtPost) -->Line_125 $$ return null[ CD ]
Line_39 $$ Statement head = stats.getWithKey(headid)-->Line_115 $$ if (checkSynchronizedCompleteness(head, setNodes)) [ FD ]
Line_34 $$ Integer headid = vbPost.getKey(k)-->Line_39 $$ Statement head = stats.getWithKey(headid)[ FD ]
Line_5 $$ if (mapExtPost.isEmpty()) -->Line_7 $$ mapExtPost.putAll(extpost.getExtendedPostdominators(stat))[ CD ]
Line_13 $$ Set<Integer> set = mapExtPost.get(st.id)-->Line_14 $$ if (set != null) [ FD ]
Line_10 $$ vbPost = new VBStyleCollection<List<Integer>, Integer>()-->Line_25 $$ vbPost.addWithKey(lst = new ArrayList<Integer>(), id)[ FD ]
Line_70 $$ if (addhd) -->Line_87 $$ hdfound = true[ CD ]
Line_59 $$ for (Statement handler : setHandlers) -->Line_104 $$ if (!handler.getNeighbours(StatEdge.TYPE_EXCEPTION, Statement.DIRECTION_BACKWARD).containsAll(setNodes)) [ FD ]
Line_22 $$ for (Integer id : setFirst) -->Line_23 $$ List<Integer> lst = vbPost.getWithKey(id)[ FD ]
Line_70 $$ if (addhd) -->Line_71 $$ LinkedList<Statement> lstStack = new LinkedList<Statement>()[ CD ]
Line_70 $$ if (addhd) -->Line_73 $$ while (!lstStack.isEmpty()) [ CD ]
Line_2 $$ private static Statement findGeneralStatement(Statement stat, boolean forceall, HashMap<Integer, Set<Integer>> mapExtPost) -->Line_4 $$ VBStyleCollection<List<Integer>, Integer> vbPost[ CD ]
Line_12 $$ for (Statement st : lstAll) -->Line_77 $$ if (st != head) [ FD ]
Line_39 $$ Statement head = stats.getWithKey(headid)-->Line_77 $$ if (st != head) [ FD ]
Line_59 $$ for (Statement handler : setHandlers) -->Line_66 $$ List<Statement> hdsupp = handler.getNeighbours(StatEdge.TYPE_EXCEPTION, Statement.DIRECTION_BACKWARD)[ FD ]
Line_31 $$ vbPost = calcPostDominators(stat)-->Line_34 $$ Integer headid = vbPost.getKey(k)[ FD ]
Line_75 $$ if (!(setNodes.contains(st) || (!same && st == post))) -->Line_77 $$ if (st != head) [ CD ]
Line_2 $$ private static Statement findGeneralStatement(Statement stat, boolean forceall, HashMap<Integer, Set<Integer>> mapExtPost) -->Line_3 $$ VBStyleCollection<Statement, Integer> stats = stat.getStats()[ CD ]
Line_10 $$ vbPost = new VBStyleCollection<List<Integer>, Integer>()-->Line_35 $$ List<Integer> posts = vbPost.get(k)[ FD ]
Line_39 $$ Statement head = stats.getWithKey(headid)-->Line_56 $$ setHandlers.add(head)[ FD ]
Line_65 $$ if (!addhd) -->Line_67 $$ addhd = (setNodes.containsAll(hdsupp) && (// strict subset[ CD ]
Line_58 $$ boolean hdfound = false-->Line_92 $$ if (!hdfound) [ FD ]
Line_3 $$ VBStyleCollection<Statement, Integer> stats = stat.getStats()-->Line_39 $$ Statement head = stats.getWithKey(headid)[ FD ]
Line_23 $$ List<Integer> lst = vbPost.getWithKey(id)-->Line_25 $$ vbPost.addWithKey(lst = new ArrayList<Integer>(), id)[ FD ]
Line_31 $$ vbPost = calcPostDominators(stat)-->Line_33 $$ for (int k = 0; k < vbPost.size(); k++) [ FD ]
Line_22 $$ for (Integer id : setFirst) -->Line_25 $$ vbPost.addWithKey(lst = new ArrayList<Integer>(), id)[ FD ]
Line_9 $$ if (forceall) -->Line_11 $$ List<Statement> lstAll = stat.getPostReversePostOrderList()[ CD ]
Line_66 $$ List<Statement> hdsupp = handler.getNeighbours(StatEdge.TYPE_EXCEPTION, Statement.DIRECTION_BACKWARD)-->Line_67 $$ addhd = (setNodes.containsAll(hdsupp) && (// strict subset[ FD ]
Line_35 $$ List<Integer> posts = vbPost.get(k)-->Line_41 $$ for (int i = 0; i < posts.size(); i++) [ FD ]
Line_113 $$ if (setPreds.size() == 0) -->Line_114 $$ if ((setNodes.size() > 1 || head.getNeighbours(StatEdge.TYPE_REGULAR, Statement.DIRECTION_BACKWARD).contains(head)) && setNodes.size() < stats.size()) [ CD ]
Line_35 $$ List<Integer> posts = vbPost.get(k)-->Line_42 $$ Integer postid = posts.get(i)[ FD ]
Line_41 $$ for (int i = 0; i < posts.size(); i++) -->Line_42 $$ Integer postid = posts.get(i)[ CD ]
Line_41 $$ for (int i = 0; i < posts.size(); i++) -->Line_51 $$ boolean same = (post == head)[ CD ]
Line_74 $$ Statement st = lstStack.remove(0)-->Line_77 $$ if (st != head) [ FD ]
Line_65 $$ if (!addhd) -->Line_66 $$ List<Statement> hdsupp = handler.getNeighbours(StatEdge.TYPE_EXCEPTION, Statement.DIRECTION_BACKWARD)[ CD ]
Line_115 $$ if (checkSynchronizedCompleteness(head, setNodes)) -->Line_117 $$ stat.collapseNodesToStatement(res)[ CD ]
Line_9 $$ if (forceall) -->Line_10 $$ vbPost = new VBStyleCollection<List<Integer>, Integer>()[ CD ]
Line_40 $$ Set<Integer> setExtPosts = mapExtPost.get(headid)-->Line_43 $$ if (!postid.equals(headid) && !setExtPosts.contains(postid)) [ FD ]
Line_46 $$ Statement post = stats.getWithKey(postid)-->Line_47 $$ if (post == null) [ FD ]
Line_31 $$ vbPost = calcPostDominators(stat)-->Line_35 $$ List<Integer> posts = vbPost.get(k)[ FD ]
Line_10 $$ vbPost = new VBStyleCollection<List<Integer>, Integer>()-->Line_34 $$ Integer headid = vbPost.getKey(k)[ FD ]
Line_52 $$ HashSet<Statement> setNodes = new HashSet<Statement>()-->Line_114 $$ if ((setNodes.size() > 1 || head.getNeighbours(StatEdge.TYPE_REGULAR, Statement.DIRECTION_BACKWARD).contains(head)) && setNodes.size() < stats.size()) [ FD ]
Line_2 $$ private static Statement findGeneralStatement(Statement stat, boolean forceall, HashMap<Integer, Set<Integer>> mapExtPost) -->Line_5 $$ if (mapExtPost.isEmpty()) [ CD ]
Line_53 $$ HashSet<Statement> setPreds = new HashSet<Statement>()-->Line_113 $$ if (setPreds.size() == 0) [ FD ]
Line_71 $$ LinkedList<Statement> lstStack = new LinkedList<Statement>()-->Line_74 $$ Statement st = lstStack.remove(0)[ FD ]
Line_25 $$ vbPost.addWithKey(lst = new ArrayList<Integer>(), id)-->Line_27 $$ lst.add(id)[ FD ]
Line_33 $$ for (int k = 0; k < vbPost.size(); k++) -->Line_39 $$ Statement head = stats.getWithKey(headid)[ CD ]
Line_33 $$ for (int k = 0; k < vbPost.size(); k++) -->Line_34 $$ Integer headid = vbPost.getKey(k)[ FD ]
Line_4 $$ VBStyleCollection<List<Integer>, Integer> vbPost-->Line_31 $$ vbPost = calcPostDominators(stat)[ FD ]
Line_59 $$ for (Statement handler : setHandlers) -->Line_60 $$ if (setNodes.contains(handler)) [ FD ]
Line_9 $$ if (forceall) -->Line_31 $$ vbPost = calcPostDominators(stat)[ CD ]
Line_34 $$ Integer headid = vbPost.getKey(k)-->Line_40 $$ Set<Integer> setExtPosts = mapExtPost.get(headid)[ FD ]
Line_52 $$ HashSet<Statement> setNodes = new HashSet<Statement>()-->Line_75 $$ if (!(setNodes.contains(st) || (!same && st == post))) [ FD ]
Line_24 $$ if (lst == null) -->Line_25 $$ vbPost.addWithKey(lst = new ArrayList<Integer>(), id)[ CD ]
Line_2 $$ private static Statement findGeneralStatement(Statement stat, boolean forceall, HashMap<Integer, Set<Integer>> mapExtPost) -->Line_31 $$ vbPost = calcPostDominators(stat)[ FD ]
Line_74 $$ Statement st = lstStack.remove(0)-->Line_99 $$ setHandlers.addAll(st.getNeighbours(StatEdge.TYPE_EXCEPTION, Statement.DIRECTION_FORWARD))[ FD ]
Line_41 $$ for (int i = 0; i < posts.size(); i++) -->Line_43 $$ if (!postid.equals(headid) && !setExtPosts.contains(postid)) [ CD ]
Line_23 $$ List<Integer> lst = vbPost.getWithKey(id)-->Line_24 $$ if (lst == null) [ FD ]
Line_58 $$ boolean hdfound = false-->Line_87 $$ hdfound = true[ FD ]
Line_41 $$ for (int i = 0; i < posts.size(); i++) -->Line_53 $$ HashSet<Statement> setPreds = new HashSet<Statement>()[ CD ]
Line_33 $$ for (int k = 0; k < vbPost.size(); k++) -->Line_35 $$ List<Integer> posts = vbPost.get(k)[ CD ]
Line_3 $$ VBStyleCollection<Statement, Integer> stats = stat.getStats()-->Line_114 $$ if ((setNodes.size() > 1 || head.getNeighbours(StatEdge.TYPE_REGULAR, Statement.DIRECTION_BACKWARD).contains(head)) && setNodes.size() < stats.size()) [ FD ]
Line_2 $$ private static Statement findGeneralStatement(Statement stat, boolean forceall, HashMap<Integer, Set<Integer>> mapExtPost) -->Line_9 $$ if (forceall) [ CD ]
Line_52 $$ HashSet<Statement> setNodes = new HashSet<Statement>()-->Line_60 $$ if (setNodes.contains(handler)) [ FD ]
Line_2 $$ private static Statement findGeneralStatement(Statement stat, boolean forceall, HashMap<Integer, Set<Integer>> mapExtPost) -->Line_5 $$ if (mapExtPost.isEmpty()) [ FD ]
Line_42 $$ Integer postid = posts.get(i)-->Line_43 $$ if (!postid.equals(headid) && !setExtPosts.contains(postid)) [ FD ]
Line_70 $$ if (addhd) -->Line_72 $$ lstStack.add(handler)[ CD ]
Line_41 $$ for (int i = 0; i < posts.size(); i++) -->Line_56 $$ setHandlers.add(head)[ CD ]
Line_52 $$ HashSet<Statement> setNodes = new HashSet<Statement>()-->Line_115 $$ if (checkSynchronizedCompleteness(head, setNodes)) [ FD ]
Line_115 $$ if (checkSynchronizedCompleteness(head, setNodes)) -->Line_118 $$ return res[ CD ]
Line_2 $$ private static Statement findGeneralStatement(Statement stat, boolean forceall, HashMap<Integer, Set<Integer>> mapExtPost) -->Line_33 $$ for (int k = 0; k < vbPost.size(); k++) [ CD ]
Line_73 $$ while (!lstStack.isEmpty()) -->Line_74 $$ Statement st = lstStack.remove(0)[ CD ]
Line_59 $$ for (Statement handler : setHandlers) -->Line_88 $$ setHandlers.remove(handler)[ FD ]
Line_33 $$ for (int k = 0; k < vbPost.size(); k++) -->Line_36 $$ if (!mapExtPost.containsKey(headid) && !(posts.size() == 1 && posts.get(0).equals(headid))) [ CD ]
Line_52 $$ HashSet<Statement> setNodes = new HashSet<Statement>()-->Line_104 $$ if (!handler.getNeighbours(StatEdge.TYPE_EXCEPTION, Statement.DIRECTION_BACKWARD).containsAll(setNodes)) [ FD ]
Line_33 $$ for (int k = 0; k < vbPost.size(); k++) -->Line_41 $$ for (int i = 0; i < posts.size(); i++) [ CD ]
Line_34 $$ Integer headid = vbPost.getKey(k)-->Line_43 $$ if (!postid.equals(headid) && !setExtPosts.contains(postid)) [ FD ]
Line_41 $$ for (int i = 0; i < posts.size(); i++) -->Line_46 $$ Statement post = stats.getWithKey(postid)[ CD ]
Line_3 $$ VBStyleCollection<Statement, Integer> stats = stat.getStats()-->Line_46 $$ Statement post = stats.getWithKey(postid)[ FD ]
Line_4 $$ VBStyleCollection<List<Integer>, Integer> vbPost-->Line_23 $$ List<Integer> lst = vbPost.getWithKey(id)[ FD ]
Line_10 $$ vbPost = new VBStyleCollection<List<Integer>, Integer>()-->Line_23 $$ List<Integer> lst = vbPost.getWithKey(id)[ FD ]
Line_57 $$ while (true) -->Line_58 $$ boolean hdfound = false[ CD ]
Line_4 $$ VBStyleCollection<List<Integer>, Integer> vbPost-->Line_35 $$ List<Integer> posts = vbPost.get(k)[ FD ]
