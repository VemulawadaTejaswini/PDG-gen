Line_17 $$ for (Token token : metadata.sortedTokens()) -->Line_20 $$ primaryRanges.add(new Range(metadata.getPredecessor(token), token))[ FD ]
Line_16 $$ TokenMetadata metadata = tokenMetadata.cloneOnlyTokenMap()-->Line_18 $$ List<InetAddress> endpoints = strategy.calculateNaturalEndpoints(token, metadata)[ FD ]
Line_16 $$ TokenMetadata metadata = tokenMetadata.cloneOnlyTokenMap()-->Line_20 $$ primaryRanges.add(new Range(metadata.getPredecessor(token), token))[ FD ]
Line_18 $$ List<InetAddress> endpoints = strategy.calculateNaturalEndpoints(token, metadata)-->Line_19 $$ if (endpoints.size() > 0 && endpoints.get(0).equals(ep))[ FD ]
Line_19 $$ if (endpoints.size() > 0 && endpoints.get(0).equals(ep))-->Line_20 $$ primaryRanges.add(new Range(metadata.getPredecessor(token), token))[ CD ]
Line_16 $$ TokenMetadata metadata = tokenMetadata.cloneOnlyTokenMap()-->Line_17 $$ for (Token token : metadata.sortedTokens()) [ FD ]
Line_17 $$ for (Token token : metadata.sortedTokens()) -->Line_18 $$ List<InetAddress> endpoints = strategy.calculateNaturalEndpoints(token, metadata)[ FD ]
Line_14 $$ AbstractReplicationStrategy strategy = Keyspace.open(keyspace).getReplicationStrategy()-->Line_18 $$ List<InetAddress> endpoints = strategy.calculateNaturalEndpoints(token, metadata)[ FD ]
Line_15 $$ Collection<Range<Token>> primaryRanges = new HashSet()-->Line_20 $$ primaryRanges.add(new Range(metadata.getPredecessor(token), token))[ FD ]
