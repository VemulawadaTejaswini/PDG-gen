Line_3 $$ final List<Module> modules = setupDirIndexTestModulesWithScope("compile")-->Line_29 $$ assertOrderedElementsAreEqual(ownerModules, Arrays.asList(modules.get(0), modules.get(1), modules.get(2), modules.get(3)))[ FD ]
Line_3 $$ final List<Module> modules = setupDirIndexTestModulesWithScope("compile")-->Line_37 $$ assertOrderedElementsAreEqual(m6DepModules, Arrays.asList(modules.get(5), modules.get(5), modules.get(5), null))[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_21 $$ assertModuleModuleDeps("nonMavenM2", "m1")[ CD ]
Line_12 $$ VirtualFile nonMavenM1JavaDir = VfsUtil.findFileByIoFile(new File(getProjectPath(), "nonMavenM1/src/main/java"), true)-->Line_14 $$ PsiTestUtil.addSourceContentToRoots(nonMavenM1, nonMavenM1JavaDir)[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_6 $$ final Module nonMavenM2 = createModule("nonMavenM2")[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_36 $$ assertOrderedElementsAreEqual(m6OwnerModules, Arrays.asList(modules.get(0), modules.get(1), modules.get(4), modules.get(5)))[ CD ]
Line_7 $$ new WriteCommandAction.Simple(myProject) -->Line_13 $$ assertNotNull(nonMavenM1JavaDir)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_25 $$ assertNotNull(m3JavaDir)[ CD ]
Line_6 $$ final Module nonMavenM2 = createModule("nonMavenM2")-->Line_44 $$ assertOrderedElementsAreEqual(nonMavenM2DepModules, Arrays.asList(nonMavenM2, null))[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_27 $$ List<Module> ownerModules = orderEntriesToOwnerModules(orderEntries)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_5 $$ final Module nonMavenM1 = createModule("nonMavenM1")[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_26 $$ List<OrderEntry> orderEntries = index.getOrderEntries(index.getInfoForFile(m3JavaDir))[ CD ]
Line_3 $$ final List<Module> modules = setupDirIndexTestModulesWithScope("compile")-->Line_4 $$ assertEquals(6, modules.size())[ FD ]
Line_3 $$ final List<Module> modules = setupDirIndexTestModulesWithScope("compile")-->Line_30 $$ assertOrderedElementsAreEqual(depModules, Arrays.asList(modules.get(2), modules.get(2), null, modules.get(2)))[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_38 $$ VirtualFile nonMavenM2JavaDir = VfsUtil.findFileByIoFile(new File(getProjectPath(), "nonMavenM2/src/main/java"), true)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_29 $$ assertOrderedElementsAreEqual(ownerModules, Arrays.asList(modules.get(0), modules.get(1), modules.get(2), modules.get(3)))[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_7 $$ new WriteCommandAction.Simple(myProject) [ CD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_37 $$ assertOrderedElementsAreEqual(m6DepModules, Arrays.asList(modules.get(5), modules.get(5), modules.get(5), null))[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_44 $$ assertOrderedElementsAreEqual(nonMavenM2DepModules, Arrays.asList(nonMavenM2, null))[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_40 $$ List<OrderEntry> nonMavenM2JavaOrderEntries = index.getOrderEntries(index.getInfoForFile(nonMavenM2JavaDir))[ CD ]
Line_7 $$ new WriteCommandAction.Simple(myProject) -->Line_17 $$ PsiTestUtil.addSourceContentToRoots(nonMavenM2, nonMavenM2JavaDir)[ CD ]
Line_7 $$ new WriteCommandAction.Simple(myProject) -->Line_14 $$ PsiTestUtil.addSourceContentToRoots(nonMavenM1, nonMavenM1JavaDir)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_4 $$ assertEquals(6, modules.size())[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_23 $$ DirectoryIndex index = DirectoryIndex.getInstance(myProject)[ CD ]
Line_6 $$ final Module nonMavenM2 = createModule("nonMavenM2")-->Line_10 $$ ModuleRootModificationUtil.addDependency(nonMavenM2, modules.get(0), DependencyScope.COMPILE, true)[ FD ]
Line_15 $$ VirtualFile nonMavenM2JavaDir = VfsUtil.findFileByIoFile(new File(getProjectPath(), "nonMavenM2/src/main/java"), true)-->Line_16 $$ assertNotNull(nonMavenM2JavaDir)[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_28 $$ List<Module> depModules = orderEntriesToDepModules(orderEntries)[ CD ]
Line_3 $$ final List<Module> modules = setupDirIndexTestModulesWithScope("compile")-->Line_10 $$ ModuleRootModificationUtil.addDependency(nonMavenM2, modules.get(0), DependencyScope.COMPILE, true)[ FD ]
Line_6 $$ final Module nonMavenM2 = createModule("nonMavenM2")-->Line_9 $$ ModuleRootModificationUtil.addDependency(nonMavenM1, nonMavenM2, DependencyScope.COMPILE, true)[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_32 $$ assertNotNull(m6javaDir)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_33 $$ List<OrderEntry> m6OrderEntries = index.getOrderEntries(index.getInfoForFile(m6javaDir))[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_35 $$ List<Module> m6DepModules = orderEntriesToDepModules(m6OrderEntries)[ CD ]
Line_7 $$ new WriteCommandAction.Simple(myProject) -->Line_16 $$ assertNotNull(nonMavenM2JavaDir)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_31 $$ VirtualFile m6javaDir = VfsUtil.findFileByIoFile(new File(getProjectPath(), "m6/src/main/java"), true)[ CD ]
Line_5 $$ final Module nonMavenM1 = createModule("nonMavenM1")-->Line_14 $$ PsiTestUtil.addSourceContentToRoots(nonMavenM1, nonMavenM1JavaDir)[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_43 $$ assertOrderedElementsAreEqual(nonMavenM2OwnerModules, Arrays.asList(nonMavenM1, nonMavenM2))[ CD ]
Line_7 $$ new WriteCommandAction.Simple(myProject) -->Line_10 $$ ModuleRootModificationUtil.addDependency(nonMavenM2, modules.get(0), DependencyScope.COMPILE, true)[ CD ]
Line_3 $$ final List<Module> modules = setupDirIndexTestModulesWithScope("compile")-->Line_36 $$ assertOrderedElementsAreEqual(m6OwnerModules, Arrays.asList(modules.get(0), modules.get(1), modules.get(4), modules.get(5)))[ FD ]
Line_5 $$ final Module nonMavenM1 = createModule("nonMavenM1")-->Line_9 $$ ModuleRootModificationUtil.addDependency(nonMavenM1, nonMavenM2, DependencyScope.COMPILE, true)[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_22 $$ assertModuleModuleDeps("m1", "m2", "m3", "m5", "m6")[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_42 $$ List<Module> nonMavenM2DepModules = orderEntriesToDepModules(nonMavenM2JavaOrderEntries)[ CD ]
Line_5 $$ final Module nonMavenM1 = createModule("nonMavenM1")-->Line_43 $$ assertOrderedElementsAreEqual(nonMavenM2OwnerModules, Arrays.asList(nonMavenM1, nonMavenM2))[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_41 $$ List<Module> nonMavenM2OwnerModules = orderEntriesToOwnerModules(nonMavenM2JavaOrderEntries)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_30 $$ assertOrderedElementsAreEqual(depModules, Arrays.asList(modules.get(2), modules.get(2), null, modules.get(2)))[ CD ]
Line_7 $$ new WriteCommandAction.Simple(myProject) -->Line_9 $$ ModuleRootModificationUtil.addDependency(nonMavenM1, nonMavenM2, DependencyScope.COMPILE, true)[ CD ]
Line_15 $$ VirtualFile nonMavenM2JavaDir = VfsUtil.findFileByIoFile(new File(getProjectPath(), "nonMavenM2/src/main/java"), true)-->Line_17 $$ PsiTestUtil.addSourceContentToRoots(nonMavenM2, nonMavenM2JavaDir)[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_39 $$ assertNotNull(nonMavenM2JavaDir)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_24 $$ VirtualFile m3JavaDir = VfsUtil.findFileByIoFile(new File(getProjectPath(), "m3/src/main/java"), true)[ CD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_20 $$ assertModuleModuleDeps("nonMavenM1", "nonMavenM2")[ CD ]
Line_15 $$ VirtualFile nonMavenM2JavaDir = VfsUtil.findFileByIoFile(new File(getProjectPath(), "nonMavenM2/src/main/java"), true)-->Line_39 $$ assertNotNull(nonMavenM2JavaDir)[ FD ]
Line_7 $$ new WriteCommandAction.Simple(myProject) -->Line_11 $$ createProjectSubDirs("nonMavenM1/src/main/java", "nonMavenM1/src/test/java", "nonMavenM2/src/main/java", "nonMavenM2/src/test/java")[ CD ]
Line_12 $$ VirtualFile nonMavenM1JavaDir = VfsUtil.findFileByIoFile(new File(getProjectPath(), "nonMavenM1/src/main/java"), true)-->Line_13 $$ assertNotNull(nonMavenM1JavaDir)[ FD ]
Line_7 $$ new WriteCommandAction.Simple(myProject) -->Line_12 $$ VirtualFile nonMavenM1JavaDir = VfsUtil.findFileByIoFile(new File(getProjectPath(), "nonMavenM1/src/main/java"), true)[ CD ]
Line_7 $$ new WriteCommandAction.Simple(myProject) -->Line_15 $$ VirtualFile nonMavenM2JavaDir = VfsUtil.findFileByIoFile(new File(getProjectPath(), "nonMavenM2/src/main/java"), true)[ CD ]
Line_15 $$ VirtualFile nonMavenM2JavaDir = VfsUtil.findFileByIoFile(new File(getProjectPath(), "nonMavenM2/src/main/java"), true)-->Line_40 $$ List<OrderEntry> nonMavenM2JavaOrderEntries = index.getOrderEntries(index.getInfoForFile(nonMavenM2JavaDir))[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_34 $$ List<Module> m6OwnerModules = orderEntriesToOwnerModules(m6OrderEntries)[ CD ]
Line_6 $$ final Module nonMavenM2 = createModule("nonMavenM2")-->Line_43 $$ assertOrderedElementsAreEqual(nonMavenM2OwnerModules, Arrays.asList(nonMavenM1, nonMavenM2))[ FD ]
Line_6 $$ final Module nonMavenM2 = createModule("nonMavenM2")-->Line_17 $$ PsiTestUtil.addSourceContentToRoots(nonMavenM2, nonMavenM2JavaDir)[ FD ]
Line_2 $$ public void testDirIndexOrderEntriesStartingFromRegularModule() throws IOException -->Line_3 $$ final List<Module> modules = setupDirIndexTestModulesWithScope("compile")[ CD ]
