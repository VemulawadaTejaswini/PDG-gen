Line_8 $$ if (last.clientStartOffset + last.change.getText().length() < change.getStart()) -->Line_9 $$ int clientShift = last.clientStartOffset - last.change.getStart() + last.change.getDiff()[ CD ]
Line_2 $$ public void store(@NotNull TextChange change) -->Line_4 $$ myChanges.add(new ChangeEntry(new TextChangeImpl(change.getText(), change.getStart(), change.getEnd()), change.getStart()))[ FD ]
Line_2 $$ public void store(@NotNull TextChange change) -->Line_10 $$ myChanges.add(new ChangeEntry(new TextChangeImpl(change.getText(), change.getStart() - clientShift, change.getEnd() - clientShift), change.getStart()))[ FD ]
Line_13 $$ int insertionIndex = doStore(change)-->Line_14 $$ if (insertionIndex < 0) [ FD ]
Line_2 $$ public void store(@NotNull TextChange change) -->Line_17 $$ mergeIfNecessary(insertionIndex)[ CD ]
Line_2 $$ public void store(@NotNull TextChange change) -->Line_3 $$ if (myChanges.isEmpty()) [ CD ]
Line_2 $$ public void store(@NotNull TextChange change) -->Line_7 $$ ChangeEntry last = myChanges.get(myChanges.size() - 1)[ CD ]
Line_13 $$ int insertionIndex = doStore(change)-->Line_17 $$ mergeIfNecessary(insertionIndex)[ FD ]
Line_2 $$ public void store(@NotNull TextChange change) -->Line_14 $$ if (insertionIndex < 0) [ CD ]
Line_14 $$ if (insertionIndex < 0) -->Line_15 $$ return[ CD ]
Line_8 $$ if (last.clientStartOffset + last.change.getText().length() < change.getStart()) -->Line_10 $$ myChanges.add(new ChangeEntry(new TextChangeImpl(change.getText(), change.getStart() - clientShift, change.getEnd() - clientShift), change.getStart()))[ CD ]
Line_2 $$ public void store(@NotNull TextChange change) -->Line_8 $$ if (last.clientStartOffset + last.change.getText().length() < change.getStart()) [ CD ]
Line_2 $$ public void store(@NotNull TextChange change) -->Line_13 $$ int insertionIndex = doStore(change)[ CD ]
Line_8 $$ if (last.clientStartOffset + last.change.getText().length() < change.getStart()) -->Line_11 $$ return[ CD ]
Line_3 $$ if (myChanges.isEmpty()) -->Line_4 $$ myChanges.add(new ChangeEntry(new TextChangeImpl(change.getText(), change.getStart(), change.getEnd()), change.getStart()))[ CD ]
Line_2 $$ public void store(@NotNull TextChange change) -->Line_13 $$ int insertionIndex = doStore(change)[ FD ]
Line_2 $$ public void store(@NotNull TextChange change) -->Line_8 $$ if (last.clientStartOffset + last.change.getText().length() < change.getStart()) [ FD ]
Line_3 $$ if (myChanges.isEmpty()) -->Line_5 $$ return[ CD ]
