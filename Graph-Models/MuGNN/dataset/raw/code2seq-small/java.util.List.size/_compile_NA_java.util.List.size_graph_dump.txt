Line_2 $$ private void _compile(String[] fileNames) throws Exception -->Line_3 $$ if (fileNames.length == 0) [ CD ]
Line_2 $$ private void _compile(String[] fileNames) throws Exception -->Line_12 $$ Class<?> clazz = Class.forName("com.caucho.jsp.JspCompiler")[ CD ]
Line_6 $$ List<String> arguments = new ArrayList()-->Line_11 $$ arguments.addAll(Arrays.asList(fileNames))[ FD ]
Line_12 $$ Class<?> clazz = Class.forName("com.caucho.jsp.JspCompiler")-->Line_13 $$ Method method = clazz.getMethod("main", String[].class)[ FD ]
Line_6 $$ List<String> arguments = new ArrayList()-->Line_7 $$ arguments.add("-app-dir")[ FD ]
Line_2 $$ private void _compile(String[] fileNames) throws Exception -->Line_11 $$ arguments.addAll(Arrays.asList(fileNames))[ CD ]
Line_6 $$ List<String> arguments = new ArrayList()-->Line_15 $$ method.invoke(null, (Object) arguments.toArray(new String[arguments.size()]))[ FD ]
Line_2 $$ private void _compile(String[] fileNames) throws Exception -->Line_11 $$ arguments.addAll(Arrays.asList(fileNames))[ FD ]
Line_2 $$ private void _compile(String[] fileNames) throws Exception -->Line_6 $$ List<String> arguments = new ArrayList()[ CD ]
Line_2 $$ private void _compile(String[] fileNames) throws Exception -->Line_9 $$ arguments.add("-class-dir")[ CD ]
Line_2 $$ private void _compile(String[] fileNames) throws Exception -->Line_10 $$ arguments.add(_classDir)[ CD ]
Line_6 $$ List<String> arguments = new ArrayList()-->Line_10 $$ arguments.add(_classDir)[ FD ]
Line_2 $$ private void _compile(String[] fileNames) throws Exception -->Line_7 $$ arguments.add("-app-dir")[ CD ]
Line_6 $$ List<String> arguments = new ArrayList()-->Line_8 $$ arguments.add(_appDir)[ FD ]
Line_3 $$ if (fileNames.length == 0) -->Line_4 $$ return[ CD ]
Line_2 $$ private void _compile(String[] fileNames) throws Exception -->Line_8 $$ arguments.add(_appDir)[ CD ]
Line_6 $$ List<String> arguments = new ArrayList()-->Line_9 $$ arguments.add("-class-dir")[ FD ]
Line_2 $$ private void _compile(String[] fileNames) throws Exception -->Line_13 $$ Method method = clazz.getMethod("main", String[].class)[ CD ]
Line_13 $$ Method method = clazz.getMethod("main", String[].class)-->Line_15 $$ method.invoke(null, (Object) arguments.toArray(new String[arguments.size()]))[ FD ]
