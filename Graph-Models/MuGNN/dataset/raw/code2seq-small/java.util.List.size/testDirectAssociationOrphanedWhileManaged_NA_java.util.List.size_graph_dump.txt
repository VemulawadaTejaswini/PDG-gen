Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_14 $$ assertEquals(2, tranchenmodell.getTranchen().size())[ CD ]
Line_11 $$ Tranchenmodell tranchenmodell = preisregelung.getTranchenmodell()-->Line_13 $$ assertNotNull(tranchenmodell.getX())[ FD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_19 $$ em = getOrCreateEntityManager()[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_9 $$ assertEquals(1, results.size())[ FD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_3 $$ createData()[ CD ]
Line_21 $$ preisregelung = (Preisregelung) em.find(Preisregelung.class, preisregelung.getId())-->Line_22 $$ assertNull(preisregelung.getTranchenmodell())[ FD ]
Line_25 $$ results = em.createQuery("from Tranche").getResultList()-->Line_29 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_23 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_32 $$ assertEquals(1, results.size())[ FD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_5 $$ em.getTransaction().begin()[ CD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_7 $$ assertEquals(1, results.size())[ FD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_32 $$ assertEquals(1, results.size())[ CD ]
Line_27 $$ results = em.createQuery("from X").getResultList()-->Line_30 $$ assertEquals(0, results.size())[ FD ]
Line_25 $$ results = em.createQuery("from Tranche").getResultList()-->Line_31 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_32 $$ assertEquals(1, results.size())[ FD ]
Line_25 $$ results = em.createQuery("from Tranche").getResultList()-->Line_28 $$ assertEquals(0, results.size())[ FD ]
Line_23 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_25 $$ results = em.createQuery("from Tranche").getResultList()[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_27 $$ results = em.createQuery("from X").getResultList()[ FD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()[ CD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_17 $$ em.getTransaction().commit()[ FD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_18 $$ em.close()[ FD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_16 $$ preisregelung.setTranchenmodell(null)[ CD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_29 $$ results = em.createQuery("from Y").getResultList()[ CD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_17 $$ em.getTransaction().commit()[ CD ]
Line_29 $$ results = em.createQuery("from Y").getResultList()-->Line_32 $$ assertEquals(1, results.size())[ FD ]
Line_25 $$ results = em.createQuery("from Tranche").getResultList()-->Line_26 $$ assertEquals(0, results.size())[ FD ]
Line_25 $$ results = em.createQuery("from Tranche").getResultList()-->Line_27 $$ results = em.createQuery("from X").getResultList()[ FD ]
Line_10 $$ Preisregelung preisregelung = (Preisregelung) results.get(0)-->Line_21 $$ preisregelung = (Preisregelung) em.find(Preisregelung.class, preisregelung.getId())[ FD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_34 $$ em.close()[ CD ]
Line_19 $$ em = getOrCreateEntityManager()-->Line_21 $$ preisregelung = (Preisregelung) em.find(Preisregelung.class, preisregelung.getId())[ FD ]
Line_23 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_31 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_28 $$ assertEquals(0, results.size())[ FD ]
Line_23 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_27 $$ results = em.createQuery("from X").getResultList()[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_10 $$ Preisregelung preisregelung = (Preisregelung) results.get(0)[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_29 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_27 $$ results = em.createQuery("from X").getResultList()-->Line_29 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_10 $$ Preisregelung preisregelung = (Preisregelung) results.get(0)-->Line_22 $$ assertNull(preisregelung.getTranchenmodell())[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_24 $$ assertEquals(0, results.size())[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_31 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_11 $$ Tranchenmodell tranchenmodell = preisregelung.getTranchenmodell()-->Line_14 $$ assertEquals(2, tranchenmodell.getTranchen().size())[ FD ]
Line_19 $$ em = getOrCreateEntityManager()-->Line_34 $$ em.close()[ FD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_4 $$ EntityManager em = getOrCreateEntityManager()[ CD ]
Line_23 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_29 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_19 $$ em = getOrCreateEntityManager()-->Line_20 $$ em.getTransaction().begin()[ FD ]
Line_11 $$ Tranchenmodell tranchenmodell = preisregelung.getTranchenmodell()-->Line_15 $$ assertNotNull(tranchenmodell.getTranchen().get(0).getY())[ FD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_25 $$ results = em.createQuery("from Tranche").getResultList()[ CD ]
Line_27 $$ results = em.createQuery("from X").getResultList()-->Line_28 $$ assertEquals(0, results.size())[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_23 $$ results = em.createQuery("from Tranchenmodell").getResultList()[ FD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_26 $$ assertEquals(0, results.size())[ CD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_23 $$ results = em.createQuery("from Tranchenmodell").getResultList()[ FD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_33 $$ em.getTransaction().commit()[ FD ]
Line_25 $$ results = em.createQuery("from Tranche").getResultList()-->Line_30 $$ assertEquals(0, results.size())[ FD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_23 $$ results = em.createQuery("from Tranchenmodell").getResultList()[ CD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_5 $$ em.getTransaction().begin()[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_26 $$ assertEquals(0, results.size())[ FD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_21 $$ preisregelung = (Preisregelung) em.find(Preisregelung.class, preisregelung.getId())[ CD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_29 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_34 $$ em.close()[ FD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_11 $$ Tranchenmodell tranchenmodell = preisregelung.getTranchenmodell()[ CD ]
Line_31 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_32 $$ assertEquals(1, results.size())[ FD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_22 $$ assertNull(preisregelung.getTranchenmodell())[ CD ]
Line_23 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_24 $$ assertEquals(0, results.size())[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_30 $$ assertEquals(0, results.size())[ FD ]
Line_19 $$ em = getOrCreateEntityManager()-->Line_25 $$ results = em.createQuery("from Tranche").getResultList()[ FD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_19 $$ em = getOrCreateEntityManager()[ CD ]
Line_10 $$ Preisregelung preisregelung = (Preisregelung) results.get(0)-->Line_16 $$ preisregelung.setTranchenmodell(null)[ FD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()[ CD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_35 $$ cleanupData()[ CD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_12 $$ assertNotNull(tranchenmodell)[ CD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_25 $$ results = em.createQuery("from Tranche").getResultList()[ FD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_28 $$ assertEquals(0, results.size())[ CD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_10 $$ Preisregelung preisregelung = (Preisregelung) results.get(0)[ CD ]
Line_10 $$ Preisregelung preisregelung = (Preisregelung) results.get(0)-->Line_11 $$ Tranchenmodell tranchenmodell = preisregelung.getTranchenmodell()[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_26 $$ assertEquals(0, results.size())[ FD ]
Line_23 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_28 $$ assertEquals(0, results.size())[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_24 $$ assertEquals(0, results.size())[ FD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_31 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_23 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_30 $$ assertEquals(0, results.size())[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_31 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_7 $$ assertEquals(1, results.size())[ CD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_24 $$ assertEquals(0, results.size())[ CD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_21 $$ preisregelung = (Preisregelung) em.find(Preisregelung.class, preisregelung.getId())[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_25 $$ results = em.createQuery("from Tranche").getResultList()[ FD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_25 $$ results = em.createQuery("from Tranche").getResultList()[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_28 $$ assertEquals(0, results.size())[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_27 $$ results = em.createQuery("from X").getResultList()[ FD ]
Line_11 $$ Tranchenmodell tranchenmodell = preisregelung.getTranchenmodell()-->Line_12 $$ assertNotNull(tranchenmodell)[ FD ]
Line_19 $$ em = getOrCreateEntityManager()-->Line_23 $$ results = em.createQuery("from Tranchenmodell").getResultList()[ FD ]
Line_29 $$ results = em.createQuery("from Y").getResultList()-->Line_31 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_15 $$ assertNotNull(tranchenmodell.getTranchen().get(0).getY())[ CD ]
Line_29 $$ results = em.createQuery("from Y").getResultList()-->Line_30 $$ assertEquals(0, results.size())[ FD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_27 $$ results = em.createQuery("from X").getResultList()[ CD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()[ FD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_30 $$ assertEquals(0, results.size())[ CD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_33 $$ em.getTransaction().commit()[ CD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_13 $$ assertNotNull(tranchenmodell.getX())[ CD ]
Line_23 $$ results = em.createQuery("from Tranchenmodell").getResultList()-->Line_26 $$ assertEquals(0, results.size())[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_10 $$ Preisregelung preisregelung = (Preisregelung) results.get(0)[ FD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_9 $$ assertEquals(1, results.size())[ CD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_19 $$ em = getOrCreateEntityManager()-->Line_33 $$ em.getTransaction().commit()[ FD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_18 $$ em.close()[ CD ]
Line_19 $$ em = getOrCreateEntityManager()-->Line_29 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_19 $$ em = getOrCreateEntityManager()-->Line_27 $$ results = em.createQuery("from X").getResultList()[ FD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_27 $$ results = em.createQuery("from X").getResultList()[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_32 $$ assertEquals(1, results.size())[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_9 $$ assertEquals(1, results.size())[ FD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_20 $$ em.getTransaction().begin()[ CD ]
Line_27 $$ results = em.createQuery("from X").getResultList()-->Line_31 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_30 $$ assertEquals(0, results.size())[ FD ]
Line_25 $$ results = em.createQuery("from Tranche").getResultList()-->Line_32 $$ assertEquals(1, results.size())[ FD ]
Line_6 $$ List results = em.createQuery("from Tranchenmodell").getResultList()-->Line_23 $$ results = em.createQuery("from Tranchenmodell").getResultList()[ FD ]
Line_19 $$ em = getOrCreateEntityManager()-->Line_31 $$ results = em.createQuery("from Preisregelung").getResultList()[ FD ]
Line_8 $$ results = em.createQuery("from Preisregelung").getResultList()-->Line_29 $$ results = em.createQuery("from Y").getResultList()[ FD ]
Line_4 $$ EntityManager em = getOrCreateEntityManager()-->Line_20 $$ em.getTransaction().begin()[ FD ]
Line_2 $$ public void testDirectAssociationOrphanedWhileManaged() -->Line_31 $$ results = em.createQuery("from Preisregelung").getResultList()[ CD ]
Line_27 $$ results = em.createQuery("from X").getResultList()-->Line_32 $$ assertEquals(1, results.size())[ FD ]
