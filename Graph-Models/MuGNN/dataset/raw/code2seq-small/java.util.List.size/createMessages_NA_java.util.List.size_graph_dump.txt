Line_5 $$ for (int i = 0; i < lines.size(); i++) -->Line_6 $$ messages.add(new MessageTreeNode(tree, parent, lines.get(i), attributes, icon, i == lines.size() - 1 ? link : null))[ CD ]
Line_2 $$ public static List<MessageTreeNode> createMessages(XDebuggerTree tree, final XDebuggerTreeNode parent, @NotNull String errorMessage, XDebuggerTreeNodeHyperlink link, final Icon icon, final SimpleTextAttributes attributes) -->Line_8 $$ return messages[ CD ]
Line_2 $$ public static List<MessageTreeNode> createMessages(XDebuggerTree tree, final XDebuggerTreeNode parent, @NotNull String errorMessage, XDebuggerTreeNodeHyperlink link, final Icon icon, final SimpleTextAttributes attributes) -->Line_3 $$ List<MessageTreeNode> messages = new SmartList<MessageTreeNode>()[ CD ]
Line_5 $$ for (int i = 0; i < lines.size(); i++) -->Line_6 $$ messages.add(new MessageTreeNode(tree, parent, lines.get(i), attributes, icon, i == lines.size() - 1 ? link : null))[ FD ]
Line_3 $$ List<MessageTreeNode> messages = new SmartList<MessageTreeNode>()-->Line_6 $$ messages.add(new MessageTreeNode(tree, parent, lines.get(i), attributes, icon, i == lines.size() - 1 ? link : null))[ FD ]
Line_4 $$ final List<String> lines = StringUtil.split(errorMessage, "\n", true, false)-->Line_5 $$ for (int i = 0; i < lines.size(); i++) [ FD ]
Line_2 $$ public static List<MessageTreeNode> createMessages(XDebuggerTree tree, final XDebuggerTreeNode parent, @NotNull String errorMessage, XDebuggerTreeNodeHyperlink link, final Icon icon, final SimpleTextAttributes attributes) -->Line_5 $$ for (int i = 0; i < lines.size(); i++) [ CD ]
Line_4 $$ final List<String> lines = StringUtil.split(errorMessage, "\n", true, false)-->Line_6 $$ messages.add(new MessageTreeNode(tree, parent, lines.get(i), attributes, icon, i == lines.size() - 1 ? link : null))[ FD ]
Line_2 $$ public static List<MessageTreeNode> createMessages(XDebuggerTree tree, final XDebuggerTreeNode parent, @NotNull String errorMessage, XDebuggerTreeNodeHyperlink link, final Icon icon, final SimpleTextAttributes attributes) -->Line_4 $$ final List<String> lines = StringUtil.split(errorMessage, "\n", true, false)[ CD ]
Line_2 $$ public static List<MessageTreeNode> createMessages(XDebuggerTree tree, final XDebuggerTreeNode parent, @NotNull String errorMessage, XDebuggerTreeNodeHyperlink link, final Icon icon, final SimpleTextAttributes attributes) -->Line_4 $$ final List<String> lines = StringUtil.split(errorMessage, "\n", true, false)[ FD ]
