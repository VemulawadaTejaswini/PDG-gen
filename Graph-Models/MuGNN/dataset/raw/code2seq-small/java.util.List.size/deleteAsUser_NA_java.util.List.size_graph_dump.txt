Line_22 $$ if (LOG.isDebugEnabled()) -->Line_23 $$ logOutput(shExec.getOutput())[ CD ]
Line_2 $$ public void deleteAsUser(String user, Path dir, Path... baseDirs) -->Line_4 $$ String runAsUser = getRunAsUser(user)[ FD ]
Line_5 $$ List<String> command = new ArrayList<String>(Arrays.asList(containerExecutorExe, runAsUser, user, Integer.toString(Commands.DELETE_AS_USER.getValue()), dir == null ? "" : dir.toUri().getPath()))-->Line_15 $$ String[] commandArray = command.toArray(new String[command.size()])[ FD ]
Line_17 $$ if (LOG.isDebugEnabled()) -->Line_18 $$ LOG.debug("deleteAsUser: " + Arrays.toString(commandArray))[ CD ]
Line_5 $$ List<String> command = new ArrayList<String>(Arrays.asList(containerExecutorExe, runAsUser, user, Integer.toString(Commands.DELETE_AS_USER.getValue()), dir == null ? "" : dir.toUri().getPath()))-->Line_12 $$ command.add(baseDir.toUri().getPath())[ FD ]
Line_4 $$ String runAsUser = getRunAsUser(user)-->Line_5 $$ List<String> command = new ArrayList<String>(Arrays.asList(containerExecutorExe, runAsUser, user, Integer.toString(Commands.DELETE_AS_USER.getValue()), dir == null ? "" : dir.toUri().getPath()))[ FD ]
Line_16 $$ ShellCommandExecutor shExec = new ShellCommandExecutor(commandArray)-->Line_23 $$ logOutput(shExec.getOutput())[ FD ]
Line_16 $$ ShellCommandExecutor shExec = new ShellCommandExecutor(commandArray)-->Line_29 $$ logOutput(shExec.getOutput())[ FD ]
Line_2 $$ public void deleteAsUser(String user, Path dir, Path... baseDirs) -->Line_17 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_2 $$ public void deleteAsUser(String user, Path dir, Path... baseDirs) -->Line_5 $$ List<String> command = new ArrayList<String>(Arrays.asList(containerExecutorExe, runAsUser, user, Integer.toString(Commands.DELETE_AS_USER.getValue()), dir == null ? "" : dir.toUri().getPath()))[ CD ]
Line_16 $$ ShellCommandExecutor shExec = new ShellCommandExecutor(commandArray)-->Line_26 $$ int exitCode = shExec.getExitCode()[ FD ]
Line_2 $$ public void deleteAsUser(String user, Path dir, Path... baseDirs) -->Line_3 $$ verifyUsernamePattern(user)[ CD ]
Line_6 $$ if (baseDirs == null || baseDirs.length == 0) -->Line_7 $$ LOG.info("Deleting absolute path : " + dir)[ CD ]
Line_15 $$ String[] commandArray = command.toArray(new String[command.size()])-->Line_18 $$ LOG.debug("deleteAsUser: " + Arrays.toString(commandArray))[ FD ]
Line_16 $$ ShellCommandExecutor shExec = new ShellCommandExecutor(commandArray)-->Line_21 $$ shExec.execute()[ FD ]
Line_2 $$ public void deleteAsUser(String user, Path dir, Path... baseDirs) -->Line_16 $$ ShellCommandExecutor shExec = new ShellCommandExecutor(commandArray)[ CD ]
Line_2 $$ public void deleteAsUser(String user, Path dir, Path... baseDirs) -->Line_4 $$ String runAsUser = getRunAsUser(user)[ CD ]
Line_2 $$ public void deleteAsUser(String user, Path dir, Path... baseDirs) -->Line_5 $$ List<String> command = new ArrayList<String>(Arrays.asList(containerExecutorExe, runAsUser, user, Integer.toString(Commands.DELETE_AS_USER.getValue()), dir == null ? "" : dir.toUri().getPath()))[ FD ]
Line_9 $$ for (Path baseDir : baseDirs) -->Line_12 $$ command.add(baseDir.toUri().getPath())[ FD ]
Line_2 $$ public void deleteAsUser(String user, Path dir, Path... baseDirs) -->Line_6 $$ if (baseDirs == null || baseDirs.length == 0) [ CD ]
Line_2 $$ public void deleteAsUser(String user, Path dir, Path... baseDirs) -->Line_27 $$ LOG.error("DeleteAsUser for " + dir.toUri().getPath() + " returned with exit code: " + exitCode, e)[ FD ]
Line_2 $$ public void deleteAsUser(String user, Path dir, Path... baseDirs) -->Line_3 $$ verifyUsernamePattern(user)[ FD ]
Line_2 $$ public void deleteAsUser(String user, Path dir, Path... baseDirs) -->Line_15 $$ String[] commandArray = command.toArray(new String[command.size()])[ CD ]
