Line_7 $$ elements = generator.getChildren(list)-->Line_34 $$ if (newElements.size() > 1 && (!elements.isEmpty() || index < newElements.size() - 1)) [ FD ]
Line_2 $$ public static <Parent extends PsiElement, Child extends PsiElement> void synchronizeList(Parent list, List<Child> newElements, ChildrenGenerator<Parent, Child> generator, boolean[] shouldRemoveChild) throws IncorrectOperationException -->Line_6 $$ while (true) [ CD ]
Line_52 $$ for (int i = newElements.size(); i < elements.size(); i++) -->Line_53 $$ Child element = elements.get(i)[ CD ]
Line_7 $$ elements = generator.getChildren(list)-->Line_13 $$ if (shouldRemoveChild[i] && i < elements.size()) [ FD ]
Line_5 $$ int index = 0-->Line_24 $$ index--[ FD ]
Line_5 $$ int index = 0-->Line_8 $$ if (index == newElements.size())[ FD ]
Line_4 $$ List<Child> elements-->Line_18 $$ Child oldElement = index < elements.size() ? elements.get(index) : null[ FD ]
Line_3 $$ List<Child> elementsToRemove = null-->Line_10 $$ if (elementsToRemove == null) [ FD ]
Line_2 $$ public static <Parent extends PsiElement, Child extends PsiElement> void synchronizeList(Parent list, List<Child> newElements, ChildrenGenerator<Parent, Child> generator, boolean[] shouldRemoveChild) throws IncorrectOperationException -->Line_37 $$ anchor = list.getFirstChild()[ FD ]
Line_22 $$ if (oldElement != null && elementsToRemove.contains(oldElement)) -->Line_27 $$ list.addBefore(newElement, oldElement)[ CD ]
Line_6 $$ while (true) -->Line_50 $$ index++[ CD ]
Line_12 $$ for (int i = 0; i < shouldRemoveChild.length; i++) -->Line_13 $$ if (shouldRemoveChild[i] && i < elements.size()) [ CD ]
Line_43 $$ if (anchor != null) -->Line_46 $$ list.add(psi)[ CD ]
Line_4 $$ List<Child> elements-->Line_14 $$ elementsToRemove.add(elements.get(i))[ FD ]
Line_4 $$ List<Child> elements-->Line_53 $$ Child element = elements.get(i)[ FD ]
Line_2 $$ public static <Parent extends PsiElement, Child extends PsiElement> void synchronizeList(Parent list, List<Child> newElements, ChildrenGenerator<Parent, Child> generator, boolean[] shouldRemoveChild) throws IncorrectOperationException -->Line_52 $$ for (int i = newElements.size(); i < elements.size(); i++) [ CD ]
Line_21 $$ if (!newElement.equals(oldElement)) -->Line_22 $$ if (oldElement != null && elementsToRemove.contains(oldElement)) [ CD ]
Line_4 $$ List<Child> elements-->Line_52 $$ for (int i = newElements.size(); i < elements.size(); i++) [ FD ]
Line_2 $$ public static <Parent extends PsiElement, Child extends PsiElement> void synchronizeList(Parent list, List<Child> newElements, ChildrenGenerator<Parent, Child> generator, boolean[] shouldRemoveChild) throws IncorrectOperationException -->Line_4 $$ List<Child> elements[ CD ]
Line_7 $$ elements = generator.getChildren(list)-->Line_14 $$ elementsToRemove.add(elements.get(i))[ FD ]
Line_2 $$ public static <Parent extends PsiElement, Child extends PsiElement> void synchronizeList(Parent list, List<Child> newElements, ChildrenGenerator<Parent, Child> generator, boolean[] shouldRemoveChild) throws IncorrectOperationException -->Line_19 $$ Child newElement = newElements.get(index)[ FD ]
Line_10 $$ if (elementsToRemove == null) -->Line_11 $$ elementsToRemove = new ArrayList<Child>()[ CD ]
Line_5 $$ int index = 0-->Line_19 $$ Child newElement = newElements.get(index)[ FD ]
Line_2 $$ public static <Parent extends PsiElement, Child extends PsiElement> void synchronizeList(Parent list, List<Child> newElements, ChildrenGenerator<Parent, Child> generator, boolean[] shouldRemoveChild) throws IncorrectOperationException -->Line_46 $$ list.add(psi)[ FD ]
Line_3 $$ List<Child> elementsToRemove = null-->Line_22 $$ if (oldElement != null && elementsToRemove.contains(oldElement)) [ FD ]
Line_22 $$ if (oldElement != null && elementsToRemove.contains(oldElement)) -->Line_23 $$ oldElement.delete()[ CD ]
Line_36 $$ if (index == 0) -->Line_37 $$ anchor = list.getFirstChild()[ CD ]
Line_7 $$ elements = generator.getChildren(list)-->Line_39 $$ anchor = index - 1 < elements.size() ? elements.get(index - 1) : null[ FD ]
Line_10 $$ if (elementsToRemove == null) -->Line_12 $$ for (int i = 0; i < shouldRemoveChild.length; i++) [ CD ]
Line_12 $$ for (int i = 0; i < shouldRemoveChild.length; i++) -->Line_14 $$ elementsToRemove.add(elements.get(i))[ FD ]
Line_4 $$ List<Child> elements-->Line_7 $$ elements = generator.getChildren(list)[ FD ]
Line_34 $$ if (newElements.size() > 1 && (!elements.isEmpty() || index < newElements.size() - 1)) -->Line_36 $$ if (index == 0) [ CD ]
Line_34 $$ if (newElements.size() > 1 && (!elements.isEmpty() || index < newElements.size() - 1)) -->Line_41 $$ CharTable charTable = SharedImplUtil.findCharTableByTree(list.getNode())[ CD ]
Line_34 $$ if (newElements.size() > 1 && (!elements.isEmpty() || index < newElements.size() - 1)) -->Line_42 $$ PsiElement psi = Factory.createSingleLeafElement(JavaTokenType.COMMA, ",", 0, 1, charTable, list.getManager()).getPsi()[ CD ]
Line_2 $$ public static <Parent extends PsiElement, Child extends PsiElement> void synchronizeList(Parent list, List<Child> newElements, ChildrenGenerator<Parent, Child> generator, boolean[] shouldRemoveChild) throws IncorrectOperationException -->Line_8 $$ if (index == newElements.size())[ FD ]
Line_12 $$ for (int i = 0; i < shouldRemoveChild.length; i++) -->Line_53 $$ Child element = elements.get(i)[ FD ]
Line_22 $$ if (oldElement != null && elementsToRemove.contains(oldElement)) -->Line_24 $$ index--[ CD ]
Line_11 $$ elementsToRemove = new ArrayList<Child>()-->Line_10 $$ if (elementsToRemove == null) [ FD ]
Line_2 $$ public static <Parent extends PsiElement, Child extends PsiElement> void synchronizeList(Parent list, List<Child> newElements, ChildrenGenerator<Parent, Child> generator, boolean[] shouldRemoveChild) throws IncorrectOperationException -->Line_26 $$ assert list.isWritable() : PsiUtilCore.getVirtualFile(list)[ FD ]
Line_2 $$ public static <Parent extends PsiElement, Child extends PsiElement> void synchronizeList(Parent list, List<Child> newElements, ChildrenGenerator<Parent, Child> generator, boolean[] shouldRemoveChild) throws IncorrectOperationException -->Line_44 $$ list.addAfter(psi, anchor)[ FD ]
Line_20 $$ if (newElement != null) -->Line_34 $$ if (newElements.size() > 1 && (!elements.isEmpty() || index < newElements.size() - 1)) [ CD ]
Line_53 $$ Child element = elements.get(i)-->Line_54 $$ element.delete()[ FD ]
Line_5 $$ int index = 0-->Line_18 $$ Child oldElement = index < elements.size() ? elements.get(index) : null[ FD ]
Line_2 $$ public static <Parent extends PsiElement, Child extends PsiElement> void synchronizeList(Parent list, List<Child> newElements, ChildrenGenerator<Parent, Child> generator, boolean[] shouldRemoveChild) throws IncorrectOperationException -->Line_27 $$ list.addBefore(newElement, oldElement)[ FD ]
Line_4 $$ List<Child> elements-->Line_13 $$ if (shouldRemoveChild[i] && i < elements.size()) [ FD ]
Line_11 $$ elementsToRemove = new ArrayList<Child>()-->Line_22 $$ if (oldElement != null && elementsToRemove.contains(oldElement)) [ FD ]
Line_4 $$ List<Child> elements-->Line_39 $$ anchor = index - 1 < elements.size() ? elements.get(index - 1) : null[ FD ]
Line_52 $$ for (int i = newElements.size(); i < elements.size(); i++) -->Line_53 $$ Child element = elements.get(i)[ FD ]
Line_52 $$ for (int i = newElements.size(); i < elements.size(); i++) -->Line_54 $$ element.delete()[ CD ]
Line_2 $$ public static <Parent extends PsiElement, Child extends PsiElement> void synchronizeList(Parent list, List<Child> newElements, ChildrenGenerator<Parent, Child> generator, boolean[] shouldRemoveChild) throws IncorrectOperationException -->Line_34 $$ if (newElements.size() > 1 && (!elements.isEmpty() || index < newElements.size() - 1)) [ FD ]
Line_11 $$ elementsToRemove = new ArrayList<Child>()-->Line_14 $$ elementsToRemove.add(elements.get(i))[ FD ]
Line_2 $$ public static <Parent extends PsiElement, Child extends PsiElement> void synchronizeList(Parent list, List<Child> newElements, ChildrenGenerator<Parent, Child> generator, boolean[] shouldRemoveChild) throws IncorrectOperationException -->Line_3 $$ List<Child> elementsToRemove = null[ CD ]
Line_3 $$ List<Child> elementsToRemove = null-->Line_14 $$ elementsToRemove.add(elements.get(i))[ FD ]
Line_2 $$ public static <Parent extends PsiElement, Child extends PsiElement> void synchronizeList(Parent list, List<Child> newElements, ChildrenGenerator<Parent, Child> generator, boolean[] shouldRemoveChild) throws IncorrectOperationException -->Line_28 $$ if (list.equals(newElement.getParent())) [ FD ]
Line_22 $$ if (oldElement != null && elementsToRemove.contains(oldElement)) -->Line_28 $$ if (list.equals(newElement.getParent())) [ CD ]
Line_5 $$ int index = 0-->Line_50 $$ index++[ FD ]
Line_6 $$ while (true) -->Line_19 $$ Child newElement = newElements.get(index)[ CD ]
Line_28 $$ if (list.equals(newElement.getParent())) -->Line_29 $$ newElement.delete()[ CD ]
Line_2 $$ public static <Parent extends PsiElement, Child extends PsiElement> void synchronizeList(Parent list, List<Child> newElements, ChildrenGenerator<Parent, Child> generator, boolean[] shouldRemoveChild) throws IncorrectOperationException -->Line_41 $$ CharTable charTable = SharedImplUtil.findCharTableByTree(list.getNode())[ FD ]
Line_5 $$ int index = 0-->Line_36 $$ if (index == 0) [ FD ]
Line_6 $$ while (true) -->Line_8 $$ if (index == newElements.size())[ CD ]
Line_2 $$ public static <Parent extends PsiElement, Child extends PsiElement> void synchronizeList(Parent list, List<Child> newElements, ChildrenGenerator<Parent, Child> generator, boolean[] shouldRemoveChild) throws IncorrectOperationException -->Line_5 $$ int index = 0[ CD ]
Line_7 $$ elements = generator.getChildren(list)-->Line_18 $$ Child oldElement = index < elements.size() ? elements.get(index) : null[ FD ]
Line_6 $$ while (true) -->Line_20 $$ if (newElement != null) [ CD ]
Line_4 $$ List<Child> elements-->Line_34 $$ if (newElements.size() > 1 && (!elements.isEmpty() || index < newElements.size() - 1)) [ FD ]
Line_7 $$ elements = generator.getChildren(list)-->Line_53 $$ Child element = elements.get(i)[ FD ]
Line_13 $$ if (shouldRemoveChild[i] && i < elements.size()) -->Line_14 $$ elementsToRemove.add(elements.get(i))[ CD ]
Line_12 $$ for (int i = 0; i < shouldRemoveChild.length; i++) -->Line_52 $$ for (int i = newElements.size(); i < elements.size(); i++) [ FD ]
Line_6 $$ while (true) -->Line_7 $$ elements = generator.getChildren(list)[ CD ]
Line_34 $$ if (newElements.size() > 1 && (!elements.isEmpty() || index < newElements.size() - 1)) -->Line_43 $$ if (anchor != null) [ CD ]
Line_2 $$ public static <Parent extends PsiElement, Child extends PsiElement> void synchronizeList(Parent list, List<Child> newElements, ChildrenGenerator<Parent, Child> generator, boolean[] shouldRemoveChild) throws IncorrectOperationException -->Line_7 $$ elements = generator.getChildren(list)[ FD ]
Line_43 $$ if (anchor != null) -->Line_44 $$ list.addAfter(psi, anchor)[ CD ]
Line_6 $$ while (true) -->Line_10 $$ if (elementsToRemove == null) [ CD ]
Line_7 $$ elements = generator.getChildren(list)-->Line_52 $$ for (int i = newElements.size(); i < elements.size(); i++) [ FD ]
Line_3 $$ List<Child> elementsToRemove = null-->Line_11 $$ elementsToRemove = new ArrayList<Child>()[ FD ]
Line_2 $$ public static <Parent extends PsiElement, Child extends PsiElement> void synchronizeList(Parent list, List<Child> newElements, ChildrenGenerator<Parent, Child> generator, boolean[] shouldRemoveChild) throws IncorrectOperationException -->Line_42 $$ PsiElement psi = Factory.createSingleLeafElement(JavaTokenType.COMMA, ",", 0, 1, charTable, list.getManager()).getPsi()[ FD ]
Line_2 $$ public static <Parent extends PsiElement, Child extends PsiElement> void synchronizeList(Parent list, List<Child> newElements, ChildrenGenerator<Parent, Child> generator, boolean[] shouldRemoveChild) throws IncorrectOperationException -->Line_52 $$ for (int i = newElements.size(); i < elements.size(); i++) [ FD ]
Line_20 $$ if (newElement != null) -->Line_21 $$ if (!newElement.equals(oldElement)) [ CD ]
