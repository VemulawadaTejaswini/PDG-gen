Line_17 $$ for (Map.Entry<Module, Set<String>> entry : module2NatureNames.entrySet()) -->Line_18 $$ final Module module = entry.getKey()[ FD ]
Line_6 $$ StartupManager.getInstance(project).runWhenProjectIsInitialized(new Runnable() -->Line_10 $$ DumbService.getInstance(project).smartInvokeLater(new Runnable() [ CD ]
Line_16 $$ final List<Module> modulesToImport = new ArrayList<Module>()-->Line_24 $$ if (modulesToImport.size() > 0) [ FD ]
Line_2 $$ private static void scheduleNaturesImporting(@NotNull final Project project, @NotNull final Map<Module, Set<String>> module2NatureNames) -->Line_10 $$ DumbService.getInstance(project).smartInvokeLater(new Runnable() [ FD ]
Line_16 $$ final List<Module> modulesToImport = new ArrayList<Module>()-->Line_25 $$ importer.doImport(project, modulesToImport)[ FD ]
Line_19 $$ final Set<String> natureNames = entry.getValue()-->Line_20 $$ if (natureNames.contains(importerNatureName)) [ FD ]
Line_2 $$ private static void scheduleNaturesImporting(@NotNull final Project project, @NotNull final Map<Module, Set<String>> module2NatureNames) -->Line_6 $$ StartupManager.getInstance(project).runWhenProjectIsInitialized(new Runnable() [ CD ]
Line_2 $$ private static void scheduleNaturesImporting(@NotNull final Project project, @NotNull final Map<Module, Set<String>> module2NatureNames) -->Line_6 $$ StartupManager.getInstance(project).runWhenProjectIsInitialized(new Runnable() [ FD ]
Line_2 $$ private static void scheduleNaturesImporting(@NotNull final Project project, @NotNull final Map<Module, Set<String>> module2NatureNames) -->Line_3 $$ if (module2NatureNames.size() == 0) [ FD ]
Line_18 $$ final Module module = entry.getKey()-->Line_21 $$ modulesToImport.add(module)[ FD ]
Line_3 $$ if (module2NatureNames.size() == 0) -->Line_4 $$ return[ CD ]
Line_2 $$ private static void scheduleNaturesImporting(@NotNull final Project project, @NotNull final Map<Module, Set<String>> module2NatureNames) -->Line_25 $$ importer.doImport(project, modulesToImport)[ FD ]
Line_14 $$ for (EclipseNatureImporter importer : EclipseNatureImporter.EP_NAME.getExtensions()) -->Line_25 $$ importer.doImport(project, modulesToImport)[ FD ]
Line_2 $$ private static void scheduleNaturesImporting(@NotNull final Project project, @NotNull final Map<Module, Set<String>> module2NatureNames) -->Line_17 $$ for (Map.Entry<Module, Set<String>> entry : module2NatureNames.entrySet()) [ FD ]
Line_2 $$ private static void scheduleNaturesImporting(@NotNull final Project project, @NotNull final Map<Module, Set<String>> module2NatureNames) -->Line_3 $$ if (module2NatureNames.size() == 0) [ CD ]
Line_20 $$ if (natureNames.contains(importerNatureName)) -->Line_21 $$ modulesToImport.add(module)[ CD ]
Line_15 $$ final String importerNatureName = importer.getNatureName()-->Line_20 $$ if (natureNames.contains(importerNatureName)) [ FD ]
Line_17 $$ for (Map.Entry<Module, Set<String>> entry : module2NatureNames.entrySet()) -->Line_19 $$ final Set<String> natureNames = entry.getValue()[ FD ]
Line_24 $$ if (modulesToImport.size() > 0) -->Line_25 $$ importer.doImport(project, modulesToImport)[ CD ]
Line_16 $$ final List<Module> modulesToImport = new ArrayList<Module>()-->Line_21 $$ modulesToImport.add(module)[ FD ]
Line_14 $$ for (EclipseNatureImporter importer : EclipseNatureImporter.EP_NAME.getExtensions()) -->Line_15 $$ final String importerNatureName = importer.getNatureName()[ FD ]
