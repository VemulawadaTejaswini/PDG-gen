Line_2 $$ public void projectionWithList() throws Exception -->Line_10 $$ assertEquals(5, list.get(0))[ CD ]
Line_2 $$ public void projectionWithList() throws Exception -->Line_3 $$ Expression expression = new SpelExpressionParser().parseRaw("#testList.![wrapper.value]")[ CD ]
Line_2 $$ public void projectionWithList() throws Exception -->Line_5 $$ context.setVariable("testList", IntegerTestBean.createList())[ CD ]
Line_2 $$ public void projectionWithList() throws Exception -->Line_6 $$ Object value = expression.getValue(context)[ CD ]
Line_2 $$ public void projectionWithList() throws Exception -->Line_11 $$ assertEquals(6, list.get(1))[ CD ]
Line_4 $$ EvaluationContext context = new StandardEvaluationContext()-->Line_6 $$ Object value = expression.getValue(context)[ FD ]
Line_4 $$ EvaluationContext context = new StandardEvaluationContext()-->Line_5 $$ context.setVariable("testList", IntegerTestBean.createList())[ FD ]
Line_8 $$ List<?> list = (List<?>) value-->Line_9 $$ assertEquals(3, list.size())[ FD ]
Line_2 $$ public void projectionWithList() throws Exception -->Line_7 $$ assertTrue(value instanceof List)[ CD ]
Line_8 $$ List<?> list = (List<?>) value-->Line_11 $$ assertEquals(6, list.get(1))[ FD ]
Line_2 $$ public void projectionWithList() throws Exception -->Line_12 $$ assertEquals(7, list.get(2))[ CD ]
Line_2 $$ public void projectionWithList() throws Exception -->Line_8 $$ List<?> list = (List<?>) value[ CD ]
Line_3 $$ Expression expression = new SpelExpressionParser().parseRaw("#testList.![wrapper.value]")-->Line_6 $$ Object value = expression.getValue(context)[ FD ]
Line_8 $$ List<?> list = (List<?>) value-->Line_10 $$ assertEquals(5, list.get(0))[ FD ]
Line_8 $$ List<?> list = (List<?>) value-->Line_12 $$ assertEquals(7, list.get(2))[ FD ]
Line_2 $$ public void projectionWithList() throws Exception -->Line_4 $$ EvaluationContext context = new StandardEvaluationContext()[ CD ]
Line_2 $$ public void projectionWithList() throws Exception -->Line_9 $$ assertEquals(3, list.size())[ CD ]
