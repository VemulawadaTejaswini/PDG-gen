Line_5 $$ s = openSession()-->Line_6 $$ tx = s.beginTransaction()[ FD ]
Line_20 $$ s = openSession()-->Line_27 $$ s.delete(result.get(0))[ FD ]
Line_12 $$ Employee steve = new Employee()-->Line_15 $$ steve.setSalary((double) 0)[ FD ]
Line_3 $$ Session s-->Line_21 $$ tx = s.beginTransaction()[ FD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_6 $$ tx = s.beginTransaction()[ CD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_14 $$ steve.setSex('M')[ CD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_11 $$ mel.addBeing(marcf)[ CD ]
Line_5 $$ s = openSession()-->Line_17 $$ s.persist(mel)[ FD ]
Line_12 $$ Employee steve = new Employee()-->Line_14 $$ steve.setSex('M')[ FD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_26 $$ assertEquals(2, result.size())[ CD ]
Line_3 $$ Session s-->Line_5 $$ s = openSession()[ FD ]
Line_6 $$ tx = s.beginTransaction()-->Line_21 $$ tx = s.beginTransaction()[ FD ]
Line_20 $$ s = openSession()-->Line_21 $$ tx = s.beginTransaction()[ FD ]
Line_20 $$ s = openSession()-->Line_28 $$ s.delete(result.get(1))[ FD ]
Line_3 $$ Session s-->Line_27 $$ s.delete(result.get(0))[ FD ]
Line_20 $$ s = openSession()-->Line_22 $$ Query q = s.createQuery("from Being h where h.identity = :name1 or h.identity = :name2")[ FD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_20 $$ s = openSession()[ CD ]
Line_4 $$ Transaction tx-->Line_18 $$ tx.commit()[ FD ]
Line_5 $$ s = openSession()-->Line_21 $$ tx = s.beginTransaction()[ FD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_21 $$ tx = s.beginTransaction()[ CD ]
Line_3 $$ Session s-->Line_17 $$ s.persist(mel)[ FD ]
Line_7 $$ Location mel = new Location("Earth")-->Line_17 $$ s.persist(mel)[ FD ]
Line_21 $$ tx = s.beginTransaction()-->Line_30 $$ tx.commit()[ FD ]
Line_3 $$ Session s-->Line_20 $$ s = openSession()[ FD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_16 $$ mel.addBeing(steve)[ CD ]
Line_6 $$ tx = s.beginTransaction()-->Line_30 $$ tx.commit()[ FD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_22 $$ Query q = s.createQuery("from Being h where h.identity = :name1 or h.identity = :name2")[ CD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_28 $$ s.delete(result.get(1))[ CD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_10 $$ marcf.setSex('M')[ CD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_29 $$ s.delete(((Human) result.get(0)).getLocation())[ CD ]
Line_8 $$ Human marcf = new Human()-->Line_10 $$ marcf.setSex('M')[ FD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_30 $$ tx.commit()[ CD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_8 $$ Human marcf = new Human()[ CD ]
Line_3 $$ Session s-->Line_28 $$ s.delete(result.get(1))[ FD ]
Line_5 $$ s = openSession()-->Line_20 $$ s = openSession()[ FD ]
Line_4 $$ Transaction tx-->Line_6 $$ tx = s.beginTransaction()[ FD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_4 $$ Transaction tx[ CD ]
Line_22 $$ Query q = s.createQuery("from Being h where h.identity = :name1 or h.identity = :name2")-->Line_23 $$ q.setString("name1", "marc")[ FD ]
Line_4 $$ Transaction tx-->Line_30 $$ tx.commit()[ FD ]
Line_4 $$ Transaction tx-->Line_21 $$ tx = s.beginTransaction()[ FD ]
Line_8 $$ Human marcf = new Human()-->Line_11 $$ mel.addBeing(marcf)[ FD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_24 $$ q.setString("name2", "steve")[ CD ]
Line_5 $$ s = openSession()-->Line_31 $$ s.close()[ FD ]
Line_22 $$ Query q = s.createQuery("from Being h where h.identity = :name1 or h.identity = :name2")-->Line_25 $$ final List result = q.list()[ FD ]
Line_3 $$ Session s-->Line_31 $$ s.close()[ FD ]
Line_12 $$ Employee steve = new Employee()-->Line_16 $$ mel.addBeing(steve)[ FD ]
Line_20 $$ s = openSession()-->Line_31 $$ s.close()[ FD ]
Line_7 $$ Location mel = new Location("Earth")-->Line_16 $$ mel.addBeing(steve)[ FD ]
Line_25 $$ final List result = q.list()-->Line_28 $$ s.delete(result.get(1))[ FD ]
Line_3 $$ Session s-->Line_19 $$ s.close()[ FD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_17 $$ s.persist(mel)[ CD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_31 $$ s.close()[ CD ]
Line_20 $$ s = openSession()-->Line_29 $$ s.delete(((Human) result.get(0)).getLocation())[ FD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_3 $$ Session s[ CD ]
Line_25 $$ final List result = q.list()-->Line_29 $$ s.delete(((Human) result.get(0)).getLocation())[ FD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_15 $$ steve.setSalary((double) 0)[ CD ]
Line_22 $$ Query q = s.createQuery("from Being h where h.identity = :name1 or h.identity = :name2")-->Line_24 $$ q.setString("name2", "steve")[ FD ]
Line_5 $$ s = openSession()-->Line_22 $$ Query q = s.createQuery("from Being h where h.identity = :name1 or h.identity = :name2")[ FD ]
Line_5 $$ s = openSession()-->Line_28 $$ s.delete(result.get(1))[ FD ]
Line_5 $$ s = openSession()-->Line_27 $$ s.delete(result.get(0))[ FD ]
Line_3 $$ Session s-->Line_6 $$ tx = s.beginTransaction()[ FD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_12 $$ Employee steve = new Employee()[ CD ]
Line_25 $$ final List result = q.list()-->Line_26 $$ assertEquals(2, result.size())[ FD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_25 $$ final List result = q.list()[ CD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_13 $$ steve.setIdentity("steve")[ CD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_18 $$ tx.commit()[ CD ]
Line_8 $$ Human marcf = new Human()-->Line_9 $$ marcf.setIdentity("marc")[ FD ]
Line_5 $$ s = openSession()-->Line_19 $$ s.close()[ FD ]
Line_3 $$ Session s-->Line_22 $$ Query q = s.createQuery("from Being h where h.identity = :name1 or h.identity = :name2")[ FD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_27 $$ s.delete(result.get(0))[ CD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_9 $$ marcf.setIdentity("marc")[ CD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_5 $$ s = openSession()[ CD ]
Line_6 $$ tx = s.beginTransaction()-->Line_18 $$ tx.commit()[ FD ]
Line_25 $$ final List result = q.list()-->Line_27 $$ s.delete(result.get(0))[ FD ]
Line_3 $$ Session s-->Line_29 $$ s.delete(((Human) result.get(0)).getLocation())[ FD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_7 $$ Location mel = new Location("Earth")[ CD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_23 $$ q.setString("name1", "marc")[ CD ]
Line_7 $$ Location mel = new Location("Earth")-->Line_11 $$ mel.addBeing(marcf)[ FD ]
Line_2 $$ public void testNestedUnionedSubclasses() throws Exception -->Line_19 $$ s.close()[ CD ]
Line_12 $$ Employee steve = new Employee()-->Line_13 $$ steve.setIdentity("steve")[ FD ]
Line_5 $$ s = openSession()-->Line_29 $$ s.delete(((Human) result.get(0)).getLocation())[ FD ]
