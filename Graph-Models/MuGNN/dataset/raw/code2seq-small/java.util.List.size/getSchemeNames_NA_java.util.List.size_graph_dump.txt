Line_5 $$ Collections.sort(schemes, new Comparator<MyColorScheme>() -->Line_9 $$ if (isReadOnly(o1) && !isReadOnly(o2))[ FD ]
Line_5 $$ Collections.sort(schemes, new Comparator<MyColorScheme>() -->Line_11 $$ if (!isReadOnly(o1) && isReadOnly(o2))[ CD ]
Line_11 $$ if (!isReadOnly(o1) && isReadOnly(o2))-->Line_12 $$ return 1[ CD ]
Line_5 $$ Collections.sort(schemes, new Comparator<MyColorScheme>() -->Line_13 $$ return o1.getName().compareToIgnoreCase(o2.getName())[ CD ]
Line_5 $$ Collections.sort(schemes, new Comparator<MyColorScheme>() -->Line_9 $$ if (isReadOnly(o1) && !isReadOnly(o2))[ CD ]
Line_5 $$ Collections.sort(schemes, new Comparator<MyColorScheme>() -->Line_13 $$ return o1.getName().compareToIgnoreCase(o2.getName())[ FD ]
Line_4 $$ List<MyColorScheme> schemes = new ArrayList<MyColorScheme>(mySchemes.values())-->Line_5 $$ Collections.sort(schemes, new Comparator<MyColorScheme>() [ FD ]
Line_5 $$ Collections.sort(schemes, new Comparator<MyColorScheme>() -->Line_11 $$ if (!isReadOnly(o1) && isReadOnly(o2))[ FD ]
Line_9 $$ if (isReadOnly(o1) && !isReadOnly(o2))-->Line_10 $$ return -1[ CD ]
Line_4 $$ List<MyColorScheme> schemes = new ArrayList<MyColorScheme>(mySchemes.values())-->Line_16 $$ List<String> names = new ArrayList<String>(schemes.size())[ FD ]
