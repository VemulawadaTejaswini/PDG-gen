Line_10 $$ VirtualFile toFile = toDir.findFileByRelativePath(relativePath)-->Line_11 $$ if (toFile == null) [ FD ]
Line_10 $$ VirtualFile toFile = toDir.findFileByRelativePath(relativePath)-->Line_15 $$ assertNotNull(file.getCanonicalPath(), toFile)[ FD ]
Line_11 $$ if (toFile == null) -->Line_15 $$ assertNotNull(file.getCanonicalPath(), toFile)[ CD ]
Line_14 $$ toFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)-->Line_15 $$ assertNotNull(file.getCanonicalPath(), toFile)[ FD ]
Line_14 $$ toFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)-->Line_18 $$ editorInfos.put(toFile, copyContent(fromFile, toFile, streamsToClose))[ FD ]
Line_6 $$ for (String relativePath : relativePaths) -->Line_8 $$ final VirtualFile fromFile = fromDir.findFileByRelativePath(relativePath)[ FD ]
Line_5 $$ List<OutputStream> streamsToClose = new ArrayList<OutputStream>()-->Line_21 $$ streamsToClose.get(i).close()[ FD ]
Line_12 $$ final File file = new File(toDir.getPath(), relativePath)-->Line_14 $$ toFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)[ FD ]
Line_10 $$ VirtualFile toFile = toDir.findFileByRelativePath(relativePath)-->Line_18 $$ editorInfos.put(toFile, copyContent(fromFile, toFile, streamsToClose))[ FD ]
Line_10 $$ VirtualFile toFile = toDir.findFileByRelativePath(relativePath)-->Line_17 $$ toFile.putUserData(VfsTestUtil.TEST_DATA_FILE_PATH, FileUtil.toSystemDependentName(fromFile.getPath()))[ FD ]
Line_20 $$ for (int i = streamsToClose.size() - 1; i >= 0; --i) -->Line_21 $$ streamsToClose.get(i).close()[ CD ]
Line_6 $$ for (String relativePath : relativePaths) -->Line_7 $$ relativePath = StringUtil.trimStart(relativePath, "/")[ FD ]
Line_6 $$ for (String relativePath : relativePaths) -->Line_10 $$ VirtualFile toFile = toDir.findFileByRelativePath(relativePath)[ FD ]
Line_8 $$ final VirtualFile fromFile = fromDir.findFileByRelativePath(relativePath)-->Line_18 $$ editorInfos.put(toFile, copyContent(fromFile, toFile, streamsToClose))[ FD ]
Line_4 $$ Map<VirtualFile, EditorInfo> editorInfos = new LinkedHashMap<VirtualFile, EditorInfo>()-->Line_18 $$ editorInfos.put(toFile, copyContent(fromFile, toFile, streamsToClose))[ FD ]
Line_5 $$ List<OutputStream> streamsToClose = new ArrayList<OutputStream>()-->Line_18 $$ editorInfos.put(toFile, copyContent(fromFile, toFile, streamsToClose))[ FD ]
Line_11 $$ if (toFile == null) -->Line_14 $$ toFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)[ CD ]
Line_20 $$ for (int i = streamsToClose.size() - 1; i >= 0; --i) -->Line_21 $$ streamsToClose.get(i).close()[ FD ]
Line_14 $$ toFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)-->Line_17 $$ toFile.putUserData(VfsTestUtil.TEST_DATA_FILE_PATH, FileUtil.toSystemDependentName(fromFile.getPath()))[ FD ]
Line_7 $$ relativePath = StringUtil.trimStart(relativePath, "/")-->Line_10 $$ VirtualFile toFile = toDir.findFileByRelativePath(relativePath)[ FD ]
Line_12 $$ final File file = new File(toDir.getPath(), relativePath)-->Line_15 $$ assertNotNull(file.getCanonicalPath(), toFile)[ FD ]
Line_8 $$ final VirtualFile fromFile = fromDir.findFileByRelativePath(relativePath)-->Line_17 $$ toFile.putUserData(VfsTestUtil.TEST_DATA_FILE_PATH, FileUtil.toSystemDependentName(fromFile.getPath()))[ FD ]
Line_5 $$ List<OutputStream> streamsToClose = new ArrayList<OutputStream>()-->Line_20 $$ for (int i = streamsToClose.size() - 1; i >= 0; --i) [ FD ]
Line_7 $$ relativePath = StringUtil.trimStart(relativePath, "/")-->Line_8 $$ final VirtualFile fromFile = fromDir.findFileByRelativePath(relativePath)[ FD ]
Line_8 $$ final VirtualFile fromFile = fromDir.findFileByRelativePath(relativePath)-->Line_9 $$ assertNotNull(fromDir.getPath() + "/" + relativePath, fromFile)[ FD ]
Line_10 $$ VirtualFile toFile = toDir.findFileByRelativePath(relativePath)-->Line_14 $$ toFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)[ FD ]
Line_11 $$ if (toFile == null) -->Line_13 $$ FileUtil.createIfDoesntExist(file)[ CD ]
Line_12 $$ final File file = new File(toDir.getPath(), relativePath)-->Line_13 $$ FileUtil.createIfDoesntExist(file)[ FD ]
Line_11 $$ if (toFile == null) -->Line_12 $$ final File file = new File(toDir.getPath(), relativePath)[ CD ]
