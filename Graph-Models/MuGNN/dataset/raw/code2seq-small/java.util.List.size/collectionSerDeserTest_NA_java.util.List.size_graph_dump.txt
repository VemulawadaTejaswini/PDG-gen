Line_22 $$ List<ByteBuffer> mb = new ArrayList(m.size() * 2)-->Line_27 $$ assertEquals(m, mt.getSerializer().deserializeForNativeProtocol(CollectionSerializer.pack(mb, m.size(), version), version))[ FD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_21 $$ m.put("zee", 14L)[ CD ]
Line_22 $$ List<ByteBuffer> mb = new ArrayList(m.size() * 2)-->Line_25 $$ mb.add(LongType.instance.decompose(entry.getValue()))[ FD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_8 $$ assertEquals(l, lt.getSerializer().deserializeForNativeProtocol(CollectionSerializer.pack(lb, lb.size(), version), version))[ FD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_12 $$ s.addAll(Arrays.asList("bar", "foo", "zee"))[ CD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_15 $$ assertEquals(s, st.getSerializer().deserializeForNativeProtocol(CollectionSerializer.pack(sb, sb.size(), version), version))[ FD ]
Line_5 $$ List<Integer> l = Arrays.asList(2, 6, 1, 9)-->Line_8 $$ assertEquals(l, lt.getSerializer().deserializeForNativeProtocol(CollectionSerializer.pack(lb, lb.size(), version), version))[ FD ]
Line_18 $$ Map<String, Long> m = new LinkedHashMap()-->Line_27 $$ assertEquals(m, mt.getSerializer().deserializeForNativeProtocol(CollectionSerializer.pack(mb, m.size(), version), version))[ FD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_19 $$ m.put("bar", 12L)[ CD ]
Line_11 $$ Set<String> s = new LinkedHashSet()-->Line_13 $$ List<ByteBuffer> sb = new ArrayList(s.size())[ FD ]
Line_18 $$ Map<String, Long> m = new LinkedHashMap()-->Line_19 $$ m.put("bar", 12L)[ FD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_8 $$ assertEquals(l, lt.getSerializer().deserializeForNativeProtocol(CollectionSerializer.pack(lb, lb.size(), version), version))[ CD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_15 $$ assertEquals(s, st.getSerializer().deserializeForNativeProtocol(CollectionSerializer.pack(sb, sb.size(), version), version))[ CD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_5 $$ List<Integer> l = Arrays.asList(2, 6, 1, 9)[ CD ]
Line_6 $$ List<ByteBuffer> lb = new ArrayList(l.size())-->Line_7 $$ lb.add(Int32Type.instance.decompose(i))[ FD ]
Line_18 $$ Map<String, Long> m = new LinkedHashMap()-->Line_23 $$ for (Map.Entry<String, Long> entry : m.entrySet()) [ FD ]
Line_6 $$ List<ByteBuffer> lb = new ArrayList(l.size())-->Line_8 $$ assertEquals(l, lt.getSerializer().deserializeForNativeProtocol(CollectionSerializer.pack(lb, lb.size(), version), version))[ FD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_18 $$ Map<String, Long> m = new LinkedHashMap()[ CD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_27 $$ assertEquals(m, mt.getSerializer().deserializeForNativeProtocol(CollectionSerializer.pack(mb, m.size(), version), version))[ FD ]
Line_13 $$ List<ByteBuffer> sb = new ArrayList(s.size())-->Line_14 $$ sb.add(UTF8Type.instance.decompose(t))[ FD ]
Line_22 $$ List<ByteBuffer> mb = new ArrayList(m.size() * 2)-->Line_24 $$ mb.add(UTF8Type.instance.decompose(entry.getKey()))[ FD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_13 $$ List<ByteBuffer> sb = new ArrayList(s.size())[ CD ]
Line_11 $$ Set<String> s = new LinkedHashSet()-->Line_12 $$ s.addAll(Arrays.asList("bar", "foo", "zee"))[ FD ]
Line_5 $$ List<Integer> l = Arrays.asList(2, 6, 1, 9)-->Line_6 $$ List<ByteBuffer> lb = new ArrayList(l.size())[ FD ]
Line_23 $$ for (Map.Entry<String, Long> entry : m.entrySet()) -->Line_24 $$ mb.add(UTF8Type.instance.decompose(entry.getKey()))[ FD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_11 $$ Set<String> s = new LinkedHashSet()[ CD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_20 $$ m.put("foo", 42L)[ CD ]
Line_11 $$ Set<String> s = new LinkedHashSet()-->Line_15 $$ assertEquals(s, st.getSerializer().deserializeForNativeProtocol(CollectionSerializer.pack(sb, sb.size(), version), version))[ FD ]
Line_18 $$ Map<String, Long> m = new LinkedHashMap()-->Line_22 $$ List<ByteBuffer> mb = new ArrayList(m.size() * 2)[ FD ]
Line_23 $$ for (Map.Entry<String, Long> entry : m.entrySet()) -->Line_25 $$ mb.add(LongType.instance.decompose(entry.getValue()))[ FD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_6 $$ List<ByteBuffer> lb = new ArrayList(l.size())[ CD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_27 $$ assertEquals(m, mt.getSerializer().deserializeForNativeProtocol(CollectionSerializer.pack(mb, m.size(), version), version))[ CD ]
Line_18 $$ Map<String, Long> m = new LinkedHashMap()-->Line_20 $$ m.put("foo", 42L)[ FD ]
Line_2 $$ public void collectionSerDeserTest(int version) throws Exception -->Line_22 $$ List<ByteBuffer> mb = new ArrayList(m.size() * 2)[ CD ]
Line_18 $$ Map<String, Long> m = new LinkedHashMap()-->Line_21 $$ m.put("zee", 14L)[ FD ]
Line_13 $$ List<ByteBuffer> sb = new ArrayList(s.size())-->Line_15 $$ assertEquals(s, st.getSerializer().deserializeForNativeProtocol(CollectionSerializer.pack(sb, sb.size(), version), version))[ FD ]
