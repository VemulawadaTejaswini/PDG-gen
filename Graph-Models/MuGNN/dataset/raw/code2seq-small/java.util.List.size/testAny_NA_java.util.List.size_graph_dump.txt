Line_6 $$ BarProxy foo = new Bar()-->Line_7 $$ foo.setObject(one)[ FD ]
Line_2 $$ public void testAny() throws Exception -->Line_14 $$ List results = s.createQuery("from Bar bar where bar.object.id = ? and bar.object.class = ?").setParameter(0, oid, StandardBasicTypes.LONG).setParameter(1, new Character('O'), StandardBasicTypes.CHARACTER).list()[ CD ]
Line_14 $$ List results = s.createQuery("from Bar bar where bar.object.id = ? and bar.object.class = ?").setParameter(0, oid, StandardBasicTypes.LONG).setParameter(1, new Character('O'), StandardBasicTypes.CHARACTER).list()-->Line_16 $$ results = s.createQuery("select one from One one, Bar bar where bar.object.id = one.id and bar.object.class = 'O'").list()[ FD ]
Line_2 $$ public void testAny() throws Exception -->Line_8 $$ Serializable fid = s.save(foo)[ CD ]
Line_12 $$ s = openSession()-->Line_25 $$ s.getTransaction().commit()[ FD ]
Line_20 $$ s = openSession()-->Line_25 $$ s.getTransaction().commit()[ FD ]
Line_20 $$ s = openSession()-->Line_22 $$ foo = (BarProxy) s.load(Foo.class, fid)[ FD ]
Line_3 $$ Session s = openSession()-->Line_21 $$ s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_12 $$ s = openSession()[ FD ]
Line_20 $$ s = openSession()-->Line_23 $$ assertTrue(foo.getObject() != null && foo.getObject() instanceof One && s.getIdentifier(foo.getObject()).equals(oid))[ FD ]
Line_2 $$ public void testAny() throws Exception -->Line_4 $$ s.beginTransaction()[ CD ]
Line_12 $$ s = openSession()-->Line_24 $$ s.delete(foo)[ FD ]
Line_3 $$ Session s = openSession()-->Line_25 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testAny() throws Exception -->Line_13 $$ s.beginTransaction()[ CD ]
Line_14 $$ List results = s.createQuery("from Bar bar where bar.object.id = ? and bar.object.class = ?").setParameter(0, oid, StandardBasicTypes.LONG).setParameter(1, new Character('O'), StandardBasicTypes.CHARACTER).list()-->Line_15 $$ assertEquals(1, results.size())[ FD ]
Line_3 $$ Session s = openSession()-->Line_18 $$ s.getTransaction().commit()[ FD ]
Line_12 $$ s = openSession()-->Line_21 $$ s.beginTransaction()[ FD ]
Line_6 $$ BarProxy foo = new Bar()-->Line_22 $$ foo = (BarProxy) s.load(Foo.class, fid)[ FD ]
Line_12 $$ s = openSession()-->Line_13 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testAny() throws Exception -->Line_16 $$ results = s.createQuery("select one from One one, Bar bar where bar.object.id = one.id and bar.object.class = 'O'").list()[ CD ]
Line_3 $$ Session s = openSession()-->Line_23 $$ assertTrue(foo.getObject() != null && foo.getObject() instanceof One && s.getIdentifier(foo.getObject()).equals(oid))[ FD ]
Line_3 $$ Session s = openSession()-->Line_11 $$ s.close()[ FD ]
Line_2 $$ public void testAny() throws Exception -->Line_7 $$ foo.setObject(one)[ CD ]
Line_9 $$ Serializable oid = one.getKey()-->Line_23 $$ assertTrue(foo.getObject() != null && foo.getObject() instanceof One && s.getIdentifier(foo.getObject()).equals(oid))[ FD ]
Line_3 $$ Session s = openSession()-->Line_14 $$ List results = s.createQuery("from Bar bar where bar.object.id = ? and bar.object.class = ?").setParameter(0, oid, StandardBasicTypes.LONG).setParameter(1, new Character('O'), StandardBasicTypes.CHARACTER).list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_16 $$ results = s.createQuery("select one from One one, Bar bar where bar.object.id = one.id and bar.object.class = 'O'").list()[ FD ]
Line_12 $$ s = openSession()-->Line_16 $$ results = s.createQuery("select one from One one, Bar bar where bar.object.id = one.id and bar.object.class = 'O'").list()[ FD ]
Line_2 $$ public void testAny() throws Exception -->Line_12 $$ s = openSession()[ CD ]
Line_6 $$ BarProxy foo = new Bar()-->Line_24 $$ s.delete(foo)[ FD ]
Line_2 $$ public void testAny() throws Exception -->Line_9 $$ Serializable oid = one.getKey()[ CD ]
Line_2 $$ public void testAny() throws Exception -->Line_24 $$ s.delete(foo)[ CD ]
Line_20 $$ s = openSession()-->Line_24 $$ s.delete(foo)[ FD ]
Line_12 $$ s = openSession()-->Line_26 $$ s.close()[ FD ]
Line_2 $$ public void testAny() throws Exception -->Line_5 $$ One one = new One()[ CD ]
Line_20 $$ s = openSession()-->Line_26 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_22 $$ foo = (BarProxy) s.load(Foo.class, fid)[ FD ]
Line_3 $$ Session s = openSession()-->Line_24 $$ s.delete(foo)[ FD ]
Line_12 $$ s = openSession()-->Line_22 $$ foo = (BarProxy) s.load(Foo.class, fid)[ FD ]
Line_2 $$ public void testAny() throws Exception -->Line_19 $$ s.close()[ CD ]
Line_12 $$ s = openSession()-->Line_18 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testAny() throws Exception -->Line_11 $$ s.close()[ CD ]
Line_9 $$ Serializable oid = one.getKey()-->Line_14 $$ List results = s.createQuery("from Bar bar where bar.object.id = ? and bar.object.class = ?").setParameter(0, oid, StandardBasicTypes.LONG).setParameter(1, new Character('O'), StandardBasicTypes.CHARACTER).list()[ FD ]
Line_12 $$ s = openSession()-->Line_14 $$ List results = s.createQuery("from Bar bar where bar.object.id = ? and bar.object.class = ?").setParameter(0, oid, StandardBasicTypes.LONG).setParameter(1, new Character('O'), StandardBasicTypes.CHARACTER).list()[ FD ]
Line_2 $$ public void testAny() throws Exception -->Line_17 $$ assertEquals(1, results.size())[ CD ]
Line_14 $$ List results = s.createQuery("from Bar bar where bar.object.id = ? and bar.object.class = ?").setParameter(0, oid, StandardBasicTypes.LONG).setParameter(1, new Character('O'), StandardBasicTypes.CHARACTER).list()-->Line_17 $$ assertEquals(1, results.size())[ FD ]
Line_2 $$ public void testAny() throws Exception -->Line_3 $$ Session s = openSession()[ CD ]
Line_2 $$ public void testAny() throws Exception -->Line_18 $$ s.getTransaction().commit()[ CD ]
Line_12 $$ s = openSession()-->Line_20 $$ s = openSession()[ FD ]
Line_8 $$ Serializable fid = s.save(foo)-->Line_22 $$ foo = (BarProxy) s.load(Foo.class, fid)[ FD ]
Line_3 $$ Session s = openSession()-->Line_8 $$ Serializable fid = s.save(foo)[ FD ]
Line_12 $$ s = openSession()-->Line_19 $$ s.close()[ FD ]
Line_2 $$ public void testAny() throws Exception -->Line_25 $$ s.getTransaction().commit()[ CD ]
Line_2 $$ public void testAny() throws Exception -->Line_26 $$ s.close()[ CD ]
Line_2 $$ public void testAny() throws Exception -->Line_15 $$ assertEquals(1, results.size())[ CD ]
Line_5 $$ One one = new One()-->Line_9 $$ Serializable oid = one.getKey()[ FD ]
Line_20 $$ s = openSession()-->Line_21 $$ s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_26 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_10 $$ s.getTransaction().commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_19 $$ s.close()[ FD ]
Line_2 $$ public void testAny() throws Exception -->Line_20 $$ s = openSession()[ CD ]
Line_3 $$ Session s = openSession()-->Line_20 $$ s = openSession()[ FD ]
Line_2 $$ public void testAny() throws Exception -->Line_6 $$ BarProxy foo = new Bar()[ CD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ s.beginTransaction()[ FD ]
Line_12 $$ s = openSession()-->Line_23 $$ assertTrue(foo.getObject() != null && foo.getObject() instanceof One && s.getIdentifier(foo.getObject()).equals(oid))[ FD ]
Line_2 $$ public void testAny() throws Exception -->Line_21 $$ s.beginTransaction()[ CD ]
Line_16 $$ results = s.createQuery("select one from One one, Bar bar where bar.object.id = one.id and bar.object.class = 'O'").list()-->Line_17 $$ assertEquals(1, results.size())[ FD ]
Line_6 $$ BarProxy foo = new Bar()-->Line_23 $$ assertTrue(foo.getObject() != null && foo.getObject() instanceof One && s.getIdentifier(foo.getObject()).equals(oid))[ FD ]
Line_6 $$ BarProxy foo = new Bar()-->Line_8 $$ Serializable fid = s.save(foo)[ FD ]
Line_2 $$ public void testAny() throws Exception -->Line_10 $$ s.getTransaction().commit()[ CD ]
Line_3 $$ Session s = openSession()-->Line_13 $$ s.beginTransaction()[ FD ]
Line_22 $$ foo = (BarProxy) s.load(Foo.class, fid)-->Line_23 $$ assertTrue(foo.getObject() != null && foo.getObject() instanceof One && s.getIdentifier(foo.getObject()).equals(oid))[ FD ]
Line_5 $$ One one = new One()-->Line_7 $$ foo.setObject(one)[ FD ]
Line_2 $$ public void testAny() throws Exception -->Line_23 $$ assertTrue(foo.getObject() != null && foo.getObject() instanceof One && s.getIdentifier(foo.getObject()).equals(oid))[ CD ]
Line_22 $$ foo = (BarProxy) s.load(Foo.class, fid)-->Line_24 $$ s.delete(foo)[ FD ]
Line_2 $$ public void testAny() throws Exception -->Line_22 $$ foo = (BarProxy) s.load(Foo.class, fid)[ CD ]
