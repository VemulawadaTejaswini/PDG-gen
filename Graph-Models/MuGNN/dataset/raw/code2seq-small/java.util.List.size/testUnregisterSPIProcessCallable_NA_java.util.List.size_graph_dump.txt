Line_11 $$ MockSPI mockSPI = new MockSPI()-->Line_13 $$ MPIHelperUtilTestUtil.directResigterSPI(spiId, mockSPI)[ FD ]
Line_16 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_17 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_16 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_18 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_18 $$ LogRecord logRecord = logRecords.get(0)-->Line_19 $$ Assert.assertEquals("Not unregistering SPI " + mockSPI + " with foreign MPI null " + "versus " + MPIHelperUtil.getMPI(), logRecord.getMessage())[ FD ]
Line_7 $$ ProcessCallable<Boolean> processCallable = new UnregisterSPIProcessCallable(spiProviderName, spiId)-->Line_24 $$ Assert.assertTrue(processCallable.call())[ FD ]
Line_14 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.WARNING)) -->Line_16 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_7 $$ ProcessCallable<Boolean> processCallable = new UnregisterSPIProcessCallable(spiProviderName, spiId)-->Line_8 $$ Assert.assertFalse(processCallable.call())[ FD ]
Line_7 $$ ProcessCallable<Boolean> processCallable = new UnregisterSPIProcessCallable(spiProviderName, spiId)-->Line_15 $$ Assert.assertFalse(processCallable.call())[ FD ]
Line_6 $$ String spiId = "spiId"-->Line_13 $$ MPIHelperUtilTestUtil.directResigterSPI(spiId, mockSPI)[ FD ]
