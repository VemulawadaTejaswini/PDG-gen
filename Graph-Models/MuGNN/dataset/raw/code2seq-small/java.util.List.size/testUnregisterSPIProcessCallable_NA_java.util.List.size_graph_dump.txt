Line_2 $$ public void testUnregisterSPIProcessCallable() throws Exception -->Line_18 $$ mockSPI.mpi = MPIHelperUtil.getMPI()[ CD ]
Line_2 $$ public void testUnregisterSPIProcessCallable() throws Exception -->Line_8 $$ MockSPI mockSPI = new MockSPI()[ CD ]
Line_15 $$ LogRecord logRecord = logRecords.get(0)-->Line_16 $$ Assert.assertEquals("Not unregistering SPI " + mockSPI + " with foreign MPI null " + "versus " + MPIHelperUtil.getMPI(), logRecord.getMessage())[ FD ]
Line_2 $$ public void testUnregisterSPIProcessCallable() throws Exception -->Line_5 $$ ProcessCallable<Boolean> processCallable = new UnregisterSPIProcessCallable(spiProviderName, spiId)[ CD ]
Line_3 $$ String spiProviderName = "spiProviderName"-->Line_9 $$ mockSPI.spiProviderName = spiProviderName[ FD ]
Line_2 $$ public void testUnregisterSPIProcessCallable() throws Exception -->Line_3 $$ String spiProviderName = "spiProviderName"[ CD ]
Line_5 $$ ProcessCallable<Boolean> processCallable = new UnregisterSPIProcessCallable(spiProviderName, spiId)-->Line_20 $$ Assert.assertTrue(processCallable.call())[ FD ]
Line_4 $$ String spiId = "spiId"-->Line_10 $$ MPIHelperUtilTestUtil.directResigterSPI(spiId, mockSPI)[ FD ]
Line_2 $$ public void testUnregisterSPIProcessCallable() throws Exception -->Line_20 $$ Assert.assertTrue(processCallable.call())[ CD ]
Line_2 $$ public void testUnregisterSPIProcessCallable() throws Exception -->Line_10 $$ MPIHelperUtilTestUtil.directResigterSPI(spiId, mockSPI)[ CD ]
Line_2 $$ public void testUnregisterSPIProcessCallable() throws Exception -->Line_9 $$ mockSPI.spiProviderName = spiProviderName[ CD ]
Line_13 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_15 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_2 $$ public void testUnregisterSPIProcessCallable() throws Exception -->Line_4 $$ String spiId = "spiId"[ CD ]
Line_8 $$ MockSPI mockSPI = new MockSPI()-->Line_10 $$ MPIHelperUtilTestUtil.directResigterSPI(spiId, mockSPI)[ FD ]
Line_2 $$ public void testUnregisterSPIProcessCallable() throws Exception -->Line_19 $$ mockSPI.spiConfiguration = new SPIConfiguration(spiId, null, 0, null, null, new String[0], null)[ CD ]
Line_5 $$ ProcessCallable<Boolean> processCallable = new UnregisterSPIProcessCallable(spiProviderName, spiId)-->Line_12 $$ Assert.assertFalse(processCallable.call())[ FD ]
Line_13 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_14 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_5 $$ ProcessCallable<Boolean> processCallable = new UnregisterSPIProcessCallable(spiProviderName, spiId)-->Line_6 $$ Assert.assertFalse(processCallable.call())[ FD ]
Line_11 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.WARNING)) -->Line_13 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_2 $$ public void testUnregisterSPIProcessCallable() throws Exception -->Line_6 $$ Assert.assertFalse(processCallable.call())[ CD ]
Line_2 $$ public void testUnregisterSPIProcessCallable() throws Exception -->Line_7 $$ MPIHelperUtil.registerSPIProvider(new MockSPIProvider(spiProviderName))[ CD ]
