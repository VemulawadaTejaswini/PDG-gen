Line_2 $$ private void createNameNodesAndSetConf(MiniDFSNNTopology nnTopology, boolean manageNameDfsDirs, boolean manageNameDfsSharedDirs, boolean enableManagedDfsDirsRedundancy, boolean format, StartupOption operation, String clusterId, Configuration conf) throws IOException -->Line_12 $$ List<String> allNsIds = Lists.newArrayList()[ CD ]
Line_2 $$ private void createNameNodesAndSetConf(MiniDFSNNTopology nnTopology, boolean manageNameDfsDirs, boolean manageNameDfsSharedDirs, boolean enableManagedDfsDirsRedundancy, boolean format, StartupOption operation, String clusterId, Configuration conf) throws IOException -->Line_18 $$ if (!allNsIds.isEmpty()) [ CD ]
Line_52 $$ Collection<URI> namespaceDirs = FSNamesystem.getNamespaceDirs(conf)-->Line_76 $$ copyNameDirs(prevNNDirs, namespaceDirs, conf)[ FD ]
Line_13 $$ for (MiniDFSNNTopology.NSConf nameservice : nnTopology.getNameservices()) -->Line_50 $$ for (NNConf nn : nameservice.getNNs()) [ FD ]
Line_21 $$ int nnCounter = 0-->Line_40 $$ URI sharedEditsUri = getSharedEditsDir(nnCounter, nnCounter + nnIds.size() - 1)[ FD ]
Line_52 $$ Collection<URI> namespaceDirs = FSNamesystem.getNamespaceDirs(conf)-->Line_89 $$ prevNNDirs = namespaceDirs[ FD ]
Line_48 $$ Collection<URI> prevNNDirs = null-->Line_89 $$ prevNNDirs = namespaceDirs[ FD ]
Line_24 $$ String lastDefaultFileSystem = null-->Line_97 $$ lastDefaultFileSystem = nameNodes[nnCounter].conf.get(FS_DEFAULT_NAME_KEY)[ FD ]
Line_2 $$ private void createNameNodesAndSetConf(MiniDFSNNTopology nnTopology, boolean manageNameDfsDirs, boolean manageNameDfsSharedDirs, boolean enableManagedDfsDirsRedundancy, boolean format, StartupOption operation, String clusterId, Configuration conf) throws IOException -->Line_22 $$ for (MiniDFSNNTopology.NSConf nameservice : nnTopology.getNameservices()) [ FD ]
Line_69 $$ if (format && i++ > 0) -->Line_76 $$ copyNameDirs(prevNNDirs, namespaceDirs, conf)[ CD ]
Line_12 $$ List<String> allNsIds = Lists.newArrayList()-->Line_19 $$ conf.set(DFS_NAMESERVICES, Joiner.on(",").join(allNsIds))[ FD ]
Line_39 $$ if (manageNameDfsSharedDirs) -->Line_40 $$ URI sharedEditsUri = getSharedEditsDir(nnCounter, nnCounter + nnIds.size() - 1)[ CD ]
Line_2 $$ private void createNameNodesAndSetConf(MiniDFSNNTopology nnTopology, boolean manageNameDfsDirs, boolean manageNameDfsSharedDirs, boolean enableManagedDfsDirsRedundancy, boolean format, StartupOption operation, String clusterId, Configuration conf) throws IOException -->Line_94 $$ createNameNode(nnCounter, conf, numDataNodes, false, operation, clusterId, nsId, nn.getNnId())[ FD ]
Line_13 $$ for (MiniDFSNNTopology.NSConf nameservice : nnTopology.getNameservices()) -->Line_23 $$ String nsId = nameservice.getId()[ FD ]
Line_14 $$ if (nameservice.getId() != null) -->Line_15 $$ allNsIds.add(nameservice.getId())[ CD ]
Line_62 $$ File checkpointDir = new File(checkpointDirUri)-->Line_63 $$ if (checkpointDir.exists() && !FileUtil.fullyDelete(checkpointDir)) [ FD ]
Line_49 $$ int nnCounterForFormat = nnCounter-->Line_78 $$ nnCounterForFormat++[ FD ]
Line_2 $$ private void createNameNodesAndSetConf(MiniDFSNNTopology nnTopology, boolean manageNameDfsDirs, boolean manageNameDfsSharedDirs, boolean enableManagedDfsDirsRedundancy, boolean format, StartupOption operation, String clusterId, Configuration conf) throws IOException -->Line_19 $$ conf.set(DFS_NAMESERVICES, Joiner.on(",").join(allNsIds))[ FD ]
Line_39 $$ if (manageNameDfsSharedDirs) -->Line_41 $$ conf.set(DFS_NAMENODE_SHARED_EDITS_DIR_KEY, sharedEditsUri.toString())[ CD ]
Line_79 $$ if (formatThisOne) -->Line_87 $$ DFSTestUtil.formatNameNode(conf)[ CD ]
Line_21 $$ int nnCounter = 0-->Line_94 $$ createNameNode(nnCounter, conf, numDataNodes, false, operation, clusterId, nsId, nn.getNnId())[ FD ]
Line_2 $$ private void createNameNodesAndSetConf(MiniDFSNNTopology nnTopology, boolean manageNameDfsDirs, boolean manageNameDfsSharedDirs, boolean enableManagedDfsDirsRedundancy, boolean format, StartupOption operation, String clusterId, Configuration conf) throws IOException -->Line_4 $$ if (!federation && nnTopology.countNameNodes() == 1) [ FD ]
Line_2 $$ private void createNameNodesAndSetConf(MiniDFSNNTopology nnTopology, boolean manageNameDfsDirs, boolean manageNameDfsSharedDirs, boolean enableManagedDfsDirsRedundancy, boolean format, StartupOption operation, String clusterId, Configuration conf) throws IOException -->Line_21 $$ int nnCounter = 0[ CD ]
Line_2 $$ private void createNameNodesAndSetConf(MiniDFSNNTopology nnTopology, boolean manageNameDfsDirs, boolean manageNameDfsSharedDirs, boolean enableManagedDfsDirsRedundancy, boolean format, StartupOption operation, String clusterId, Configuration conf) throws IOException -->Line_51 $$ initNameNodeConf(conf, nsId, nn.getNnId(), manageNameDfsDirs, manageNameDfsDirs, nnCounterForFormat)[ FD ]
Line_2 $$ private void createNameNodesAndSetConf(MiniDFSNNTopology nnTopology, boolean manageNameDfsDirs, boolean manageNameDfsSharedDirs, boolean enableManagedDfsDirsRedundancy, boolean format, StartupOption operation, String clusterId, Configuration conf) throws IOException -->Line_52 $$ Collection<URI> namespaceDirs = FSNamesystem.getNamespaceDirs(conf)[ FD ]
Line_2 $$ private void createNameNodesAndSetConf(MiniDFSNNTopology nnTopology, boolean manageNameDfsDirs, boolean manageNameDfsSharedDirs, boolean enableManagedDfsDirsRedundancy, boolean format, StartupOption operation, String clusterId, Configuration conf) throws IOException -->Line_93 $$ initNameNodeConf(conf, nsId, nn.getNnId(), manageNameDfsDirs, enableManagedDfsDirsRedundancy, nnCounter)[ FD ]
Line_53 $$ if (format) -->Line_60 $$ Collection<URI> checkpointDirs = Util.stringCollectionAsURIs(conf.getTrimmedStringCollection(DFS_NAMENODE_CHECKPOINT_DIR_KEY))[ CD ]
Line_12 $$ List<String> allNsIds = Lists.newArrayList()-->Line_18 $$ if (!allNsIds.isEmpty()) [ FD ]
Line_48 $$ Collection<URI> prevNNDirs = null-->Line_76 $$ copyNameDirs(prevNNDirs, namespaceDirs, conf)[ FD ]
Line_2 $$ private void createNameNodesAndSetConf(MiniDFSNNTopology nnTopology, boolean manageNameDfsDirs, boolean manageNameDfsSharedDirs, boolean enableManagedDfsDirsRedundancy, boolean format, StartupOption operation, String clusterId, Configuration conf) throws IOException -->Line_3 $$ Preconditions.checkArgument(nnTopology.countNameNodes() > 0, "empty NN topology: no namenodes specified!")[ FD ]
Line_13 $$ for (MiniDFSNNTopology.NSConf nameservice : nnTopology.getNameservices()) -->Line_33 $$ initNameNodeAddress(conf, nameservice.getId(), nn)[ FD ]
Line_4 $$ if (!federation && nnTopology.countNameNodes() == 1) -->Line_5 $$ NNConf onlyNN = nnTopology.getOnlyNameNode()[ CD ]
Line_21 $$ int nnCounter = 0-->Line_93 $$ initNameNodeConf(conf, nsId, nn.getNnId(), manageNameDfsDirs, enableManagedDfsDirsRedundancy, nnCounter)[ FD ]
Line_2 $$ private void createNameNodesAndSetConf(MiniDFSNNTopology nnTopology, boolean manageNameDfsDirs, boolean manageNameDfsSharedDirs, boolean enableManagedDfsDirsRedundancy, boolean format, StartupOption operation, String clusterId, Configuration conf) throws IOException -->Line_33 $$ initNameNodeAddress(conf, nameservice.getId(), nn)[ FD ]
Line_49 $$ int nnCounterForFormat = nnCounter-->Line_51 $$ initNameNodeConf(conf, nsId, nn.getNnId(), manageNameDfsDirs, manageNameDfsDirs, nnCounterForFormat)[ FD ]
Line_55 $$ File nameDir = new File(nameDirUri)-->Line_56 $$ if (nameDir.exists() && !FileUtil.fullyDelete(nameDir)) [ FD ]
Line_2 $$ private void createNameNodesAndSetConf(MiniDFSNNTopology nnTopology, boolean manageNameDfsDirs, boolean manageNameDfsSharedDirs, boolean enableManagedDfsDirsRedundancy, boolean format, StartupOption operation, String clusterId, Configuration conf) throws IOException -->Line_41 $$ conf.set(DFS_NAMENODE_SHARED_EDITS_DIR_KEY, sharedEditsUri.toString())[ FD ]
Line_12 $$ List<String> allNsIds = Lists.newArrayList()-->Line_15 $$ allNsIds.add(nameservice.getId())[ FD ]
Line_23 $$ String nsId = nameservice.getId()-->Line_94 $$ createNameNode(nnCounter, conf, numDataNodes, false, operation, clusterId, nsId, nn.getNnId())[ FD ]
Line_13 $$ for (MiniDFSNNTopology.NSConf nameservice : nnTopology.getNameservices()) -->Line_38 $$ conf.set(DFSUtil.addKeySuffixes(DFS_HA_NAMENODES_KEY_PREFIX, nameservice.getId()), Joiner.on(",").join(nnIds))[ FD ]
Line_13 $$ for (MiniDFSNNTopology.NSConf nameservice : nnTopology.getNameservices()) -->Line_14 $$ if (nameservice.getId() != null) [ FD ]
Line_2 $$ private void createNameNodesAndSetConf(MiniDFSNNTopology nnTopology, boolean manageNameDfsDirs, boolean manageNameDfsSharedDirs, boolean enableManagedDfsDirsRedundancy, boolean format, StartupOption operation, String clusterId, Configuration conf) throws IOException -->Line_5 $$ NNConf onlyNN = nnTopology.getOnlyNameNode()[ FD ]
Line_2 $$ private void createNameNodesAndSetConf(MiniDFSNNTopology nnTopology, boolean manageNameDfsDirs, boolean manageNameDfsSharedDirs, boolean enableManagedDfsDirsRedundancy, boolean format, StartupOption operation, String clusterId, Configuration conf) throws IOException -->Line_69 $$ if (format && i++ > 0) [ FD ]
Line_18 $$ if (!allNsIds.isEmpty()) -->Line_19 $$ conf.set(DFS_NAMESERVICES, Joiner.on(",").join(allNsIds))[ CD ]
Line_2 $$ private void createNameNodesAndSetConf(MiniDFSNNTopology nnTopology, boolean manageNameDfsDirs, boolean manageNameDfsSharedDirs, boolean enableManagedDfsDirsRedundancy, boolean format, StartupOption operation, String clusterId, Configuration conf) throws IOException -->Line_4 $$ if (!federation && nnTopology.countNameNodes() == 1) [ CD ]
Line_2 $$ private void createNameNodesAndSetConf(MiniDFSNNTopology nnTopology, boolean manageNameDfsDirs, boolean manageNameDfsSharedDirs, boolean enableManagedDfsDirsRedundancy, boolean format, StartupOption operation, String clusterId, Configuration conf) throws IOException -->Line_76 $$ copyNameDirs(prevNNDirs, namespaceDirs, conf)[ FD ]
Line_23 $$ String nsId = nameservice.getId()-->Line_93 $$ initNameNodeConf(conf, nsId, nn.getNnId(), manageNameDfsDirs, enableManagedDfsDirsRedundancy, nnCounter)[ FD ]
Line_21 $$ int nnCounter = 0-->Line_99 $$ nnCounter++[ FD ]
Line_2 $$ private void createNameNodesAndSetConf(MiniDFSNNTopology nnTopology, boolean manageNameDfsDirs, boolean manageNameDfsSharedDirs, boolean enableManagedDfsDirsRedundancy, boolean format, StartupOption operation, String clusterId, Configuration conf) throws IOException -->Line_87 $$ DFSTestUtil.formatNameNode(conf)[ FD ]
Line_40 $$ URI sharedEditsUri = getSharedEditsDir(nnCounter, nnCounter + nnIds.size() - 1)-->Line_41 $$ conf.set(DFS_NAMENODE_SHARED_EDITS_DIR_KEY, sharedEditsUri.toString())[ FD ]
Line_2 $$ private void createNameNodesAndSetConf(MiniDFSNNTopology nnTopology, boolean manageNameDfsDirs, boolean manageNameDfsSharedDirs, boolean enableManagedDfsDirsRedundancy, boolean format, StartupOption operation, String clusterId, Configuration conf) throws IOException -->Line_13 $$ for (MiniDFSNNTopology.NSConf nameservice : nnTopology.getNameservices()) [ FD ]
Line_2 $$ private void createNameNodesAndSetConf(MiniDFSNNTopology nnTopology, boolean manageNameDfsDirs, boolean manageNameDfsSharedDirs, boolean enableManagedDfsDirsRedundancy, boolean format, StartupOption operation, String clusterId, Configuration conf) throws IOException -->Line_38 $$ conf.set(DFSUtil.addKeySuffixes(DFS_HA_NAMENODES_KEY_PREFIX, nameservice.getId()), Joiner.on(",").join(nnIds))[ FD ]
Line_13 $$ for (MiniDFSNNTopology.NSConf nameservice : nnTopology.getNameservices()) -->Line_15 $$ allNsIds.add(nameservice.getId())[ FD ]
Line_2 $$ private void createNameNodesAndSetConf(MiniDFSNNTopology nnTopology, boolean manageNameDfsDirs, boolean manageNameDfsSharedDirs, boolean enableManagedDfsDirsRedundancy, boolean format, StartupOption operation, String clusterId, Configuration conf) throws IOException -->Line_83 $$ StartupOption.FORMAT.setClusterId(clusterId)[ FD ]
Line_23 $$ String nsId = nameservice.getId()-->Line_51 $$ initNameNodeConf(conf, nsId, nn.getNnId(), manageNameDfsDirs, manageNameDfsDirs, nnCounterForFormat)[ FD ]
Line_2 $$ private void createNameNodesAndSetConf(MiniDFSNNTopology nnTopology, boolean manageNameDfsDirs, boolean manageNameDfsSharedDirs, boolean enableManagedDfsDirsRedundancy, boolean format, StartupOption operation, String clusterId, Configuration conf) throws IOException -->Line_3 $$ Preconditions.checkArgument(nnTopology.countNameNodes() > 0, "empty NN topology: no namenodes specified!")[ CD ]
Line_2 $$ private void createNameNodesAndSetConf(MiniDFSNNTopology nnTopology, boolean manageNameDfsDirs, boolean manageNameDfsSharedDirs, boolean enableManagedDfsDirsRedundancy, boolean format, StartupOption operation, String clusterId, Configuration conf) throws IOException -->Line_60 $$ Collection<URI> checkpointDirs = Util.stringCollectionAsURIs(conf.getTrimmedStringCollection(DFS_NAMENODE_CHECKPOINT_DIR_KEY))[ FD ]
