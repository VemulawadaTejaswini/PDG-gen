Line_8 $$ String[] roots = ExternalClasspathClassLoader.getRoots()-->Line_14 $$ roots = ArrayUtil.toStringArray(set)[ FD ]
Line_9 $$ if (roots != null) -->Line_19 $$ final ClassLoader loader = TestAll.class.getClassLoader()[ CD ]
Line_2 $$ public static String[] getClassRoots() -->Line_9 $$ if (roots != null) [ CD ]
Line_10 $$ if (Comparing.equal(System.getProperty(TestCaseLoader.SKIP_COMMUNITY_TESTS), "true")) -->Line_12 $$ Set<String> set = normalizePaths(roots)[ CD ]
Line_9 $$ if (roots != null) -->Line_32 $$ return System.getProperty("java.class.path").split(File.pathSeparator)[ CD ]
Line_9 $$ if (roots != null) -->Line_23 $$ final Class<? extends ClassLoader> loaderClass = loader.getClass()[ CD ]
Line_2 $$ public static String[] getClassRoots() -->Line_3 $$ String testRoots = System.getProperty("test.roots")[ CD ]
Line_4 $$ if (testRoots != null) -->Line_5 $$ System.out.println("Collecting tests from roots specified by test.roots property: " + testRoots)[ CD ]
Line_3 $$ String testRoots = System.getProperty("test.roots")-->Line_6 $$ return testRoots.split(";")[ FD ]
Line_8 $$ String[] roots = ExternalClasspathClassLoader.getRoots()-->Line_12 $$ Set<String> set = normalizePaths(roots)[ FD ]
Line_12 $$ Set<String> set = normalizePaths(roots)-->Line_13 $$ set.removeAll(normalizePaths(ExternalClasspathClassLoader.getExcludeRoots()))[ FD ]
Line_4 $$ if (testRoots != null) -->Line_6 $$ return testRoots.split(";")[ CD ]
Line_10 $$ if (Comparing.equal(System.getProperty(TestCaseLoader.SKIP_COMMUNITY_TESTS), "true")) -->Line_14 $$ roots = ArrayUtil.toStringArray(set)[ CD ]
Line_10 $$ if (Comparing.equal(System.getProperty(TestCaseLoader.SKIP_COMMUNITY_TESTS), "true")) -->Line_11 $$ System.out.println("Skipping community tests")[ CD ]
Line_9 $$ if (roots != null) -->Line_17 $$ return roots[ CD ]
Line_27 $$ final List<URL> urls = (List<URL>) declaredMethod.invoke(loader)-->Line_28 $$ return getClassRoots(urls.toArray(new URL[urls.size()]))[ FD ]
Line_9 $$ if (roots != null) -->Line_10 $$ if (Comparing.equal(System.getProperty(TestCaseLoader.SKIP_COMMUNITY_TESTS), "true")) [ CD ]
Line_3 $$ String testRoots = System.getProperty("test.roots")-->Line_4 $$ if (testRoots != null) [ FD ]
Line_9 $$ if (roots != null) -->Line_24 $$ if (loaderClass.getName().equals("com.intellij.util.lang.UrlClassLoader")) [ CD ]
Line_19 $$ final ClassLoader loader = TestAll.class.getClassLoader()-->Line_27 $$ final List<URL> urls = (List<URL>) declaredMethod.invoke(loader)[ FD ]
Line_23 $$ final Class<? extends ClassLoader> loaderClass = loader.getClass()-->Line_24 $$ if (loaderClass.getName().equals("com.intellij.util.lang.UrlClassLoader")) [ FD ]
Line_8 $$ String[] roots = ExternalClasspathClassLoader.getRoots()-->Line_9 $$ if (roots != null) [ FD ]
Line_2 $$ public static String[] getClassRoots() -->Line_8 $$ String[] roots = ExternalClasspathClassLoader.getRoots()[ CD ]
Line_10 $$ if (Comparing.equal(System.getProperty(TestCaseLoader.SKIP_COMMUNITY_TESTS), "true")) -->Line_13 $$ set.removeAll(normalizePaths(ExternalClasspathClassLoader.getExcludeRoots()))[ CD ]
Line_26 $$ final Method declaredMethod = loaderClass.getDeclaredMethod("getBaseUrls")-->Line_27 $$ final List<URL> urls = (List<URL>) declaredMethod.invoke(loader)[ FD ]
Line_23 $$ final Class<? extends ClassLoader> loaderClass = loader.getClass()-->Line_26 $$ final Method declaredMethod = loaderClass.getDeclaredMethod("getBaseUrls")[ FD ]
Line_19 $$ final ClassLoader loader = TestAll.class.getClassLoader()-->Line_20 $$ if (loader instanceof URLClassLoader) [ FD ]
Line_14 $$ roots = ArrayUtil.toStringArray(set)-->Line_16 $$ System.out.println("Collecting tests from roots specified by classpath.file property: " + Arrays.toString(roots))[ FD ]
Line_9 $$ if (roots != null) -->Line_20 $$ if (loader instanceof URLClassLoader) [ CD ]
Line_19 $$ final ClassLoader loader = TestAll.class.getClassLoader()-->Line_23 $$ final Class<? extends ClassLoader> loaderClass = loader.getClass()[ FD ]
Line_20 $$ if (loader instanceof URLClassLoader) -->Line_21 $$ return getClassRoots(((URLClassLoader) loader).getURLs())[ CD ]
Line_8 $$ String[] roots = ExternalClasspathClassLoader.getRoots()-->Line_16 $$ System.out.println("Collecting tests from roots specified by classpath.file property: " + Arrays.toString(roots))[ FD ]
Line_9 $$ if (roots != null) -->Line_16 $$ System.out.println("Collecting tests from roots specified by classpath.file property: " + Arrays.toString(roots))[ CD ]
Line_12 $$ Set<String> set = normalizePaths(roots)-->Line_14 $$ roots = ArrayUtil.toStringArray(set)[ FD ]
Line_2 $$ public static String[] getClassRoots() -->Line_4 $$ if (testRoots != null) [ CD ]
