Line_15 $$ sql = StringUtil.replace(findByAndCategoryIdsSQL, " IN ([$CATEGORY_ID$])", " = " + categoryIds[i])-->Line_14 $$ if (sql == null) [ FD ]
Line_2 $$ protected void buildNotAllCategoriesSQL(long[] categoryIds, StringBundler sb) -->Line_19 $$ sb.append(" OR ")[ FD ]
Line_7 $$ String sql = null-->Line_17 $$ sb.append(sql)[ FD ]
Line_2 $$ protected void buildNotAllCategoriesSQL(long[] categoryIds, StringBundler sb) -->Line_4 $$ sb.append(" AND (")[ CD ]
Line_9 $$ List<Long> treeCategoryIds = getSubcategoryIds(categoryIds[i])-->Line_11 $$ sql = StringUtil.replace(findByAndCategoryIdsSQL, "[$CATEGORY_ID$]", StringUtil.merge(treeCategoryIds))[ FD ]
Line_3 $$ String findByAndCategoryIdsSQL = CustomSQLUtil.get(FIND_BY_AND_CATEGORY_IDS)-->Line_15 $$ sql = StringUtil.replace(findByAndCategoryIdsSQL, " IN ([$CATEGORY_ID$])", " = " + categoryIds[i])[ FD ]
Line_2 $$ protected void buildNotAllCategoriesSQL(long[] categoryIds, StringBundler sb) -->Line_22 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_5 $$ for (int i = 0; i < categoryIds.length; i++) -->Line_14 $$ if (sql == null) [ CD ]
Line_7 $$ String sql = null-->Line_15 $$ sql = StringUtil.replace(findByAndCategoryIdsSQL, " IN ([$CATEGORY_ID$])", " = " + categoryIds[i])[ FD ]
Line_5 $$ for (int i = 0; i < categoryIds.length; i++) -->Line_8 $$ if (PropsValues.ASSET_CATEGORIES_SEARCH_HIERARCHICAL) [ CD ]
Line_5 $$ for (int i = 0; i < categoryIds.length; i++) -->Line_18 $$ if ((i + 1) < categoryIds.length) [ CD ]
Line_14 $$ if (sql == null) -->Line_15 $$ sql = StringUtil.replace(findByAndCategoryIdsSQL, " IN ([$CATEGORY_ID$])", " = " + categoryIds[i])[ CD ]
Line_5 $$ for (int i = 0; i < categoryIds.length; i++) -->Line_6 $$ sb.append("NOT ")[ CD ]
Line_8 $$ if (PropsValues.ASSET_CATEGORIES_SEARCH_HIERARCHICAL) -->Line_10 $$ if (treeCategoryIds.size() > 1) [ CD ]
Line_11 $$ sql = StringUtil.replace(findByAndCategoryIdsSQL, "[$CATEGORY_ID$]", StringUtil.merge(treeCategoryIds))-->Line_15 $$ sql = StringUtil.replace(findByAndCategoryIdsSQL, " IN ([$CATEGORY_ID$])", " = " + categoryIds[i])[ FD ]
Line_11 $$ sql = StringUtil.replace(findByAndCategoryIdsSQL, "[$CATEGORY_ID$]", StringUtil.merge(treeCategoryIds))-->Line_14 $$ if (sql == null) [ FD ]
Line_2 $$ protected void buildNotAllCategoriesSQL(long[] categoryIds, StringBundler sb) -->Line_22 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_2 $$ protected void buildNotAllCategoriesSQL(long[] categoryIds, StringBundler sb) -->Line_4 $$ sb.append(" AND (")[ FD ]
Line_2 $$ protected void buildNotAllCategoriesSQL(long[] categoryIds, StringBundler sb) -->Line_5 $$ for (int i = 0; i < categoryIds.length; i++) [ CD ]
Line_2 $$ protected void buildNotAllCategoriesSQL(long[] categoryIds, StringBundler sb) -->Line_17 $$ sb.append(sql)[ FD ]
Line_3 $$ String findByAndCategoryIdsSQL = CustomSQLUtil.get(FIND_BY_AND_CATEGORY_IDS)-->Line_11 $$ sql = StringUtil.replace(findByAndCategoryIdsSQL, "[$CATEGORY_ID$]", StringUtil.merge(treeCategoryIds))[ FD ]
Line_11 $$ sql = StringUtil.replace(findByAndCategoryIdsSQL, "[$CATEGORY_ID$]", StringUtil.merge(treeCategoryIds))-->Line_17 $$ sb.append(sql)[ FD ]
Line_9 $$ List<Long> treeCategoryIds = getSubcategoryIds(categoryIds[i])-->Line_10 $$ if (treeCategoryIds.size() > 1) [ FD ]
Line_5 $$ for (int i = 0; i < categoryIds.length; i++) -->Line_7 $$ String sql = null[ CD ]
Line_8 $$ if (PropsValues.ASSET_CATEGORIES_SEARCH_HIERARCHICAL) -->Line_9 $$ List<Long> treeCategoryIds = getSubcategoryIds(categoryIds[i])[ CD ]
Line_7 $$ String sql = null-->Line_14 $$ if (sql == null) [ FD ]
Line_15 $$ sql = StringUtil.replace(findByAndCategoryIdsSQL, " IN ([$CATEGORY_ID$])", " = " + categoryIds[i])-->Line_17 $$ sb.append(sql)[ FD ]
Line_5 $$ for (int i = 0; i < categoryIds.length; i++) -->Line_17 $$ sb.append(sql)[ CD ]
Line_7 $$ String sql = null-->Line_11 $$ sql = StringUtil.replace(findByAndCategoryIdsSQL, "[$CATEGORY_ID$]", StringUtil.merge(treeCategoryIds))[ FD ]
Line_18 $$ if ((i + 1) < categoryIds.length) -->Line_19 $$ sb.append(" OR ")[ CD ]
Line_2 $$ protected void buildNotAllCategoriesSQL(long[] categoryIds, StringBundler sb) -->Line_6 $$ sb.append("NOT ")[ FD ]
Line_10 $$ if (treeCategoryIds.size() > 1) -->Line_11 $$ sql = StringUtil.replace(findByAndCategoryIdsSQL, "[$CATEGORY_ID$]", StringUtil.merge(treeCategoryIds))[ CD ]
Line_2 $$ protected void buildNotAllCategoriesSQL(long[] categoryIds, StringBundler sb) -->Line_3 $$ String findByAndCategoryIdsSQL = CustomSQLUtil.get(FIND_BY_AND_CATEGORY_IDS)[ CD ]
