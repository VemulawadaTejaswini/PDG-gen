Line_18 $$ classLoaderToUse = SpringFactoriesLoader.class.getClassLoader()-->Line_20 $$ List<String> factoryNames = loadFactoryNames(factoryClass, classLoaderToUse)[ FD ]
Line_17 $$ if (classLoaderToUse == null) -->Line_18 $$ classLoaderToUse = SpringFactoriesLoader.class.getClassLoader()[ CD ]
Line_20 $$ List<String> factoryNames = loadFactoryNames(factoryClass, classLoaderToUse)-->Line_24 $$ List<T> result = new ArrayList<T>(factoryNames.size())[ FD ]
Line_24 $$ List<T> result = new ArrayList<T>(factoryNames.size())-->Line_28 $$ AnnotationAwareOrderComparator.sort(result)[ FD ]
Line_16 $$ ClassLoader classLoaderToUse = classLoader-->Line_26 $$ result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse))[ FD ]
Line_25 $$ for (String factoryName : factoryNames) -->Line_26 $$ result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse))[ FD ]
Line_16 $$ ClassLoader classLoaderToUse = classLoader-->Line_17 $$ if (classLoaderToUse == null) [ FD ]
Line_18 $$ classLoaderToUse = SpringFactoriesLoader.class.getClassLoader()-->Line_26 $$ result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse))[ FD ]
Line_16 $$ ClassLoader classLoaderToUse = classLoader-->Line_18 $$ classLoaderToUse = SpringFactoriesLoader.class.getClassLoader()[ FD ]
Line_16 $$ ClassLoader classLoaderToUse = classLoader-->Line_20 $$ List<String> factoryNames = loadFactoryNames(factoryClass, classLoaderToUse)[ FD ]
Line_21 $$ if (logger.isTraceEnabled()) -->Line_22 $$ logger.trace("Loaded [" + factoryClass.getName() + "] names: " + factoryNames)[ CD ]
Line_24 $$ List<T> result = new ArrayList<T>(factoryNames.size())-->Line_26 $$ result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse))[ FD ]
