Line_2 $$ public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader) -->Line_8 $$ List<String> factoryNames = loadFactoryNames(factoryClass, classLoaderToUse)[ CD ]
Line_2 $$ public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader) -->Line_16 $$ AnnotationAwareOrderComparator.sort(result)[ CD ]
Line_4 $$ ClassLoader classLoaderToUse = classLoader-->Line_5 $$ if (classLoaderToUse == null) [ FD ]
Line_2 $$ public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader) -->Line_8 $$ List<String> factoryNames = loadFactoryNames(factoryClass, classLoaderToUse)[ FD ]
Line_12 $$ List<T> result = new ArrayList<T>(factoryNames.size())-->Line_16 $$ AnnotationAwareOrderComparator.sort(result)[ FD ]
Line_4 $$ ClassLoader classLoaderToUse = classLoader-->Line_6 $$ classLoaderToUse = SpringFactoriesLoader.class.getClassLoader()[ FD ]
Line_2 $$ public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader) -->Line_10 $$ logger.trace("Loaded [" + factoryClass.getName() + "] names: " + factoryNames)[ FD ]
Line_5 $$ if (classLoaderToUse == null) -->Line_6 $$ classLoaderToUse = SpringFactoriesLoader.class.getClassLoader()[ CD ]
Line_4 $$ ClassLoader classLoaderToUse = classLoader-->Line_8 $$ List<String> factoryNames = loadFactoryNames(factoryClass, classLoaderToUse)[ FD ]
Line_6 $$ classLoaderToUse = SpringFactoriesLoader.class.getClassLoader()-->Line_14 $$ result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse))[ FD ]
Line_2 $$ public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader) -->Line_4 $$ ClassLoader classLoaderToUse = classLoader[ CD ]
Line_6 $$ classLoaderToUse = SpringFactoriesLoader.class.getClassLoader()-->Line_8 $$ List<String> factoryNames = loadFactoryNames(factoryClass, classLoaderToUse)[ FD ]
Line_4 $$ ClassLoader classLoaderToUse = classLoader-->Line_14 $$ result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse))[ FD ]
Line_2 $$ public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader) -->Line_14 $$ result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse))[ FD ]
Line_2 $$ public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader) -->Line_12 $$ List<T> result = new ArrayList<T>(factoryNames.size())[ CD ]
Line_8 $$ List<String> factoryNames = loadFactoryNames(factoryClass, classLoaderToUse)-->Line_12 $$ List<T> result = new ArrayList<T>(factoryNames.size())[ FD ]
Line_2 $$ public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader) -->Line_5 $$ if (classLoaderToUse == null) [ CD ]
Line_2 $$ public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader) -->Line_3 $$ Assert.notNull(factoryClass, "'factoryClass' must not be null")[ CD ]
Line_13 $$ for (String factoryName : factoryNames) -->Line_14 $$ result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse))[ FD ]
Line_2 $$ public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader) -->Line_9 $$ if (logger.isTraceEnabled()) [ CD ]
Line_9 $$ if (logger.isTraceEnabled()) -->Line_10 $$ logger.trace("Loaded [" + factoryClass.getName() + "] names: " + factoryNames)[ CD ]
Line_2 $$ public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader) -->Line_3 $$ Assert.notNull(factoryClass, "'factoryClass' must not be null")[ FD ]
Line_2 $$ public static <T> List<T> loadFactories(Class<T> factoryClass, ClassLoader classLoader) -->Line_17 $$ return result[ CD ]
Line_12 $$ List<T> result = new ArrayList<T>(factoryNames.size())-->Line_14 $$ result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse))[ FD ]
