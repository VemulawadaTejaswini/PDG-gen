Line_2 $$ private Object _addVariableStatement(Statement variableStatement, Object result) throws Exception -->Line_7 $$ Map<String, Object> map = _convertObjectToMap(statement, result, null)[ CD ]
Line_19 $$ if (innerObject instanceof List) -->Line_30 $$ innerMap.put(innerPropertyName, variableResult)[ CD ]
Line_19 $$ if (innerObject instanceof List) -->Line_29 $$ Map<String, Object> innerMap = _convertObjectToMap(statement, innerObject, innerObjectName)[ CD ]
Line_29 $$ Map<String, Object> innerMap = _convertObjectToMap(statement, innerObject, innerObjectName)-->Line_31 $$ map.put(innerObjectName, innerMap)[ FD ]
Line_13 $$ String innerObjectName = name.substring(0, index)-->Line_31 $$ map.put(innerObjectName, innerMap)[ FD ]
Line_17 $$ Object innerObject = map.get(innerObjectName)-->Line_19 $$ if (innerObject instanceof List) [ FD ]
Line_2 $$ private Object _addVariableStatement(Statement variableStatement, Object result) throws Exception -->Line_6 $$ Object variableResult = _executeStatement(variableStatement)[ CD ]
Line_5 $$ String name = variableStatement.getName()-->Line_9 $$ map.put(name.substring(1), variableResult)[ FD ]
Line_5 $$ String name = variableStatement.getName()-->Line_18 $$ String innerPropertyName = name.substring(index + 2)[ FD ]
Line_21 $$ List<Object> newInnerList = new ArrayList(innerList.size())-->Line_27 $$ map.put(innerObjectName, newInnerList)[ FD ]
Line_19 $$ if (innerObject instanceof List) -->Line_21 $$ List<Object> newInnerList = new ArrayList(innerList.size())[ CD ]
Line_13 $$ String innerObjectName = name.substring(0, index)-->Line_27 $$ map.put(innerObjectName, newInnerList)[ FD ]
Line_29 $$ Map<String, Object> innerMap = _convertObjectToMap(statement, innerObject, innerObjectName)-->Line_30 $$ innerMap.put(innerPropertyName, variableResult)[ FD ]
Line_21 $$ List<Object> newInnerList = new ArrayList(innerList.size())-->Line_25 $$ newInnerList.add(newInnerListElement)[ FD ]
Line_2 $$ private Object _addVariableStatement(Statement variableStatement, Object result) throws Exception -->Line_18 $$ String innerPropertyName = name.substring(index + 2)[ CD ]
Line_2 $$ private Object _addVariableStatement(Statement variableStatement, Object result) throws Exception -->Line_17 $$ Object innerObject = map.get(innerObjectName)[ CD ]
Line_7 $$ Map<String, Object> map = _convertObjectToMap(statement, result, null)-->Line_9 $$ map.put(name.substring(1), variableResult)[ FD ]
Line_17 $$ Object innerObject = map.get(innerObjectName)-->Line_29 $$ Map<String, Object> innerMap = _convertObjectToMap(statement, innerObject, innerObjectName)[ FD ]
Line_2 $$ private Object _addVariableStatement(Statement variableStatement, Object result) throws Exception -->Line_12 $$ int index = name.indexOf(".$")[ CD ]
Line_7 $$ Map<String, Object> map = _convertObjectToMap(statement, result, null)-->Line_27 $$ map.put(innerObjectName, newInnerList)[ FD ]
Line_2 $$ private Object _addVariableStatement(Statement variableStatement, Object result) throws Exception -->Line_33 $$ return map[ CD ]
Line_20 $$ List<Object> innerList = (List<Object>) innerObject-->Line_21 $$ List<Object> newInnerList = new ArrayList(innerList.size())[ FD ]
Line_13 $$ String innerObjectName = name.substring(0, index)-->Line_17 $$ Object innerObject = map.get(innerObjectName)[ FD ]
Line_22 $$ for (Object innerListElement : innerList) -->Line_23 $$ Map<String, Object> newInnerListElement = _convertObjectToMap(statement, innerListElement, innerObjectName)[ FD ]
Line_3 $$ Statement statement = variableStatement.getParentStatement()-->Line_29 $$ Map<String, Object> innerMap = _convertObjectToMap(statement, innerObject, innerObjectName)[ FD ]
Line_6 $$ Object variableResult = _executeStatement(variableStatement)-->Line_30 $$ innerMap.put(innerPropertyName, variableResult)[ FD ]
Line_19 $$ if (innerObject instanceof List) -->Line_31 $$ map.put(innerObjectName, innerMap)[ CD ]
Line_13 $$ String innerObjectName = name.substring(0, index)-->Line_14 $$ if (innerObjectName.contains(StringPool.PERIOD)) [ FD ]
Line_18 $$ String innerPropertyName = name.substring(index + 2)-->Line_24 $$ newInnerListElement.put(innerPropertyName, variableResult)[ FD ]
Line_2 $$ private Object _addVariableStatement(Statement variableStatement, Object result) throws Exception -->Line_7 $$ Map<String, Object> map = _convertObjectToMap(statement, result, null)[ FD ]
Line_2 $$ private Object _addVariableStatement(Statement variableStatement, Object result) throws Exception -->Line_5 $$ String name = variableStatement.getName()[ FD ]
Line_13 $$ String innerObjectName = name.substring(0, index)-->Line_29 $$ Map<String, Object> innerMap = _convertObjectToMap(statement, innerObject, innerObjectName)[ FD ]
Line_23 $$ Map<String, Object> newInnerListElement = _convertObjectToMap(statement, innerListElement, innerObjectName)-->Line_24 $$ newInnerListElement.put(innerPropertyName, variableResult)[ FD ]
Line_2 $$ private Object _addVariableStatement(Statement variableStatement, Object result) throws Exception -->Line_3 $$ Statement statement = variableStatement.getParentStatement()[ FD ]
Line_2 $$ private Object _addVariableStatement(Statement variableStatement, Object result) throws Exception -->Line_8 $$ if (!variableStatement.isInner()) [ FD ]
Line_6 $$ Object variableResult = _executeStatement(variableStatement)-->Line_9 $$ map.put(name.substring(1), variableResult)[ FD ]
Line_8 $$ if (!variableStatement.isInner()) -->Line_10 $$ return map[ CD ]
Line_3 $$ Statement statement = variableStatement.getParentStatement()-->Line_7 $$ Map<String, Object> map = _convertObjectToMap(statement, result, null)[ FD ]
Line_3 $$ Statement statement = variableStatement.getParentStatement()-->Line_4 $$ result = _populateFlags(statement, result)[ FD ]
Line_2 $$ private Object _addVariableStatement(Statement variableStatement, Object result) throws Exception -->Line_13 $$ String innerObjectName = name.substring(0, index)[ CD ]
Line_7 $$ Map<String, Object> map = _convertObjectToMap(statement, result, null)-->Line_17 $$ Object innerObject = map.get(innerObjectName)[ FD ]
Line_19 $$ if (innerObject instanceof List) -->Line_27 $$ map.put(innerObjectName, newInnerList)[ CD ]
Line_2 $$ private Object _addVariableStatement(Statement variableStatement, Object result) throws Exception -->Line_3 $$ Statement statement = variableStatement.getParentStatement()[ CD ]
Line_2 $$ private Object _addVariableStatement(Statement variableStatement, Object result) throws Exception -->Line_5 $$ String name = variableStatement.getName()[ CD ]
Line_2 $$ private Object _addVariableStatement(Statement variableStatement, Object result) throws Exception -->Line_8 $$ if (!variableStatement.isInner()) [ CD ]
Line_2 $$ private Object _addVariableStatement(Statement variableStatement, Object result) throws Exception -->Line_6 $$ Object variableResult = _executeStatement(variableStatement)[ FD ]
Line_13 $$ String innerObjectName = name.substring(0, index)-->Line_23 $$ Map<String, Object> newInnerListElement = _convertObjectToMap(statement, innerListElement, innerObjectName)[ FD ]
Line_18 $$ String innerPropertyName = name.substring(index + 2)-->Line_30 $$ innerMap.put(innerPropertyName, variableResult)[ FD ]
Line_12 $$ int index = name.indexOf(".$")-->Line_13 $$ String innerObjectName = name.substring(0, index)[ FD ]
Line_23 $$ Map<String, Object> newInnerListElement = _convertObjectToMap(statement, innerListElement, innerObjectName)-->Line_25 $$ newInnerList.add(newInnerListElement)[ FD ]
Line_2 $$ private Object _addVariableStatement(Statement variableStatement, Object result) throws Exception -->Line_4 $$ result = _populateFlags(statement, result)[ FD ]
Line_2 $$ private Object _addVariableStatement(Statement variableStatement, Object result) throws Exception -->Line_4 $$ result = _populateFlags(statement, result)[ CD ]
Line_8 $$ if (!variableStatement.isInner()) -->Line_9 $$ map.put(name.substring(1), variableResult)[ CD ]
Line_19 $$ if (innerObject instanceof List) -->Line_20 $$ List<Object> innerList = (List<Object>) innerObject[ CD ]
Line_2 $$ private Object _addVariableStatement(Statement variableStatement, Object result) throws Exception -->Line_19 $$ if (innerObject instanceof List) [ CD ]
Line_3 $$ Statement statement = variableStatement.getParentStatement()-->Line_23 $$ Map<String, Object> newInnerListElement = _convertObjectToMap(statement, innerListElement, innerObjectName)[ FD ]
Line_2 $$ private Object _addVariableStatement(Statement variableStatement, Object result) throws Exception -->Line_14 $$ if (innerObjectName.contains(StringPool.PERIOD)) [ CD ]
Line_6 $$ Object variableResult = _executeStatement(variableStatement)-->Line_24 $$ newInnerListElement.put(innerPropertyName, variableResult)[ FD ]
Line_7 $$ Map<String, Object> map = _convertObjectToMap(statement, result, null)-->Line_31 $$ map.put(innerObjectName, innerMap)[ FD ]
Line_5 $$ String name = variableStatement.getName()-->Line_12 $$ int index = name.indexOf(".$")[ FD ]
Line_5 $$ String name = variableStatement.getName()-->Line_13 $$ String innerObjectName = name.substring(0, index)[ FD ]
Line_4 $$ result = _populateFlags(statement, result)-->Line_7 $$ Map<String, Object> map = _convertObjectToMap(statement, result, null)[ FD ]
