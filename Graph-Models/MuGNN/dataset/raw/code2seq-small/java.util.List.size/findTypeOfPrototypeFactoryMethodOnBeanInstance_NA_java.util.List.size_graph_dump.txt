Line_14 $$ MutablePropertyValues pvs = new MutablePropertyValues()-->Line_16 $$ instanceFactoryDefinition.setPropertyValues(pvs)[ FD ]
Line_35 $$ ConstructorArgumentValues cvals = new ConstructorArgumentValues()-->Line_37 $$ factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)[ FD ]
Line_35 $$ ConstructorArgumentValues cvals = new ConstructorArgumentValues()-->Line_36 $$ cvals.addGenericArgumentValue(expectedNameFromArgs)[ FD ]
Line_18 $$ RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()-->Line_20 $$ factoryMethodDefinitionWithProperties.setFactoryMethodName("create")[ FD ]
Line_18 $$ RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()-->Line_22 $$ factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)[ FD ]
Line_47 $$ TestBean tb = (TestBean) lbf.getBean("fmWithProperties")-->Line_62 $$ assertEquals(expectedNameFromProperties, tb.getName())[ FD ]
Line_12 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_24 $$ lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)[ FD ]
Line_18 $$ RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()-->Line_24 $$ lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)[ FD ]
Line_48 $$ TestBean second = (TestBean) lbf.getBean("fmWithProperties")-->Line_50 $$ assertSame(tb, second)[ FD ]
Line_65 $$ if (singleton) -->Line_68 $$ assertNotSame(tb2, second)[ CD ]
Line_18 $$ RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()-->Line_19 $$ factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")[ FD ]
Line_56 $$ second = (TestBean) lbf.getBean("fmGeneric")-->Line_60 $$ assertNotSame(tb, second)[ FD ]
Line_25 $$ RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()-->Line_27 $$ factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")[ FD ]
Line_12 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_64 $$ second = (TestBean) lbf.getBean("fmWithArgs")[ FD ]
Line_25 $$ RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()-->Line_29 $$ factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)[ FD ]
Line_55 $$ tb = (TestBean) lbf.getBean("fmGeneric")-->Line_60 $$ assertNotSame(tb, second)[ FD ]
Line_49 $$ if (singleton) -->Line_50 $$ assertSame(tb, second)[ CD ]
Line_32 $$ RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()-->Line_41 $$ lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)[ FD ]
Line_12 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_43 $$ List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))[ FD ]
Line_12 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_56 $$ second = (TestBean) lbf.getBean("fmGeneric")[ FD ]
Line_56 $$ second = (TestBean) lbf.getBean("fmGeneric")-->Line_68 $$ assertNotSame(tb2, second)[ FD ]
Line_21 $$ if (!singleton) -->Line_22 $$ factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)[ CD ]
Line_11 $$ String expectedNameFromArgs = "gordon"-->Line_70 $$ assertEquals(expectedNameFromArgs, tb2.getName())[ FD ]
Line_47 $$ TestBean tb = (TestBean) lbf.getBean("fmWithProperties")-->Line_54 $$ assertEquals(expectedNameFromProperties, tb.getName())[ FD ]
Line_56 $$ second = (TestBean) lbf.getBean("fmGeneric")-->Line_58 $$ assertSame(tb, second)[ FD ]
Line_56 $$ second = (TestBean) lbf.getBean("fmGeneric")-->Line_66 $$ assertSame(tb2, second)[ FD ]
Line_64 $$ second = (TestBean) lbf.getBean("fmWithArgs")-->Line_68 $$ assertNotSame(tb2, second)[ FD ]
Line_28 $$ if (!singleton) -->Line_29 $$ factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)[ CD ]
Line_57 $$ if (singleton) -->Line_60 $$ assertNotSame(tb, second)[ CD ]
Line_13 $$ RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)-->Line_17 $$ lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)[ FD ]
Line_43 $$ List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))-->Line_46 $$ assertEquals(2, tbNames.size())[ FD ]
Line_65 $$ if (singleton) -->Line_66 $$ assertSame(tb2, second)[ CD ]
Line_32 $$ RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()-->Line_37 $$ factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)[ FD ]
Line_38 $$ if (!singleton) -->Line_39 $$ factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)[ CD ]
Line_47 $$ TestBean tb = (TestBean) lbf.getBean("fmWithProperties")-->Line_52 $$ assertNotSame(tb, second)[ FD ]
Line_12 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_55 $$ tb = (TestBean) lbf.getBean("fmGeneric")[ FD ]
Line_48 $$ TestBean second = (TestBean) lbf.getBean("fmWithProperties")-->Line_68 $$ assertNotSame(tb2, second)[ FD ]
Line_63 $$ TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")-->Line_66 $$ assertSame(tb2, second)[ FD ]
Line_12 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_41 $$ lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)[ FD ]
Line_43 $$ List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))-->Line_45 $$ assertTrue(tbNames.contains("fmWithArgs"))[ FD ]
Line_48 $$ TestBean second = (TestBean) lbf.getBean("fmWithProperties")-->Line_66 $$ assertSame(tb2, second)[ FD ]
Line_64 $$ second = (TestBean) lbf.getBean("fmWithArgs")-->Line_66 $$ assertSame(tb2, second)[ FD ]
Line_12 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_48 $$ TestBean second = (TestBean) lbf.getBean("fmWithProperties")[ FD ]
Line_12 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_63 $$ TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")[ FD ]
Line_48 $$ TestBean second = (TestBean) lbf.getBean("fmWithProperties")-->Line_52 $$ assertNotSame(tb, second)[ FD ]
Line_12 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_47 $$ TestBean tb = (TestBean) lbf.getBean("fmWithProperties")[ FD ]
Line_48 $$ TestBean second = (TestBean) lbf.getBean("fmWithProperties")-->Line_64 $$ second = (TestBean) lbf.getBean("fmWithArgs")[ FD ]
Line_12 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_17 $$ lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)[ FD ]
Line_25 $$ RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()-->Line_26 $$ factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")[ FD ]
Line_47 $$ TestBean tb = (TestBean) lbf.getBean("fmWithProperties")-->Line_58 $$ assertSame(tb, second)[ FD ]
Line_32 $$ RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()-->Line_33 $$ factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")[ FD ]
Line_56 $$ second = (TestBean) lbf.getBean("fmGeneric")-->Line_64 $$ second = (TestBean) lbf.getBean("fmWithArgs")[ FD ]
Line_13 $$ RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)-->Line_16 $$ instanceFactoryDefinition.setPropertyValues(pvs)[ FD ]
Line_47 $$ TestBean tb = (TestBean) lbf.getBean("fmWithProperties")-->Line_50 $$ assertSame(tb, second)[ FD ]
Line_10 $$ String expectedNameFromProperties = "tony"-->Line_54 $$ assertEquals(expectedNameFromProperties, tb.getName())[ FD ]
Line_43 $$ List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))-->Line_44 $$ assertTrue(tbNames.contains("fmWithProperties"))[ FD ]
Line_55 $$ tb = (TestBean) lbf.getBean("fmGeneric")-->Line_58 $$ assertSame(tb, second)[ FD ]
Line_10 $$ String expectedNameFromProperties = "tony"-->Line_15 $$ pvs.add("name", expectedNameFromProperties)[ FD ]
Line_47 $$ TestBean tb = (TestBean) lbf.getBean("fmWithProperties")-->Line_55 $$ tb = (TestBean) lbf.getBean("fmGeneric")[ FD ]
Line_57 $$ if (singleton) -->Line_58 $$ assertSame(tb, second)[ CD ]
Line_14 $$ MutablePropertyValues pvs = new MutablePropertyValues()-->Line_15 $$ pvs.add("name", expectedNameFromProperties)[ FD ]
Line_48 $$ TestBean second = (TestBean) lbf.getBean("fmWithProperties")-->Line_56 $$ second = (TestBean) lbf.getBean("fmGeneric")[ FD ]
Line_12 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_42 $$ assertEquals(4, lbf.getBeanDefinitionCount())[ FD ]
Line_48 $$ TestBean second = (TestBean) lbf.getBean("fmWithProperties")-->Line_60 $$ assertNotSame(tb, second)[ FD ]
Line_25 $$ RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()-->Line_31 $$ lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)[ FD ]
Line_32 $$ RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()-->Line_34 $$ factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")[ FD ]
Line_32 $$ RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()-->Line_39 $$ factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)[ FD ]
Line_63 $$ TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")-->Line_68 $$ assertNotSame(tb2, second)[ FD ]
Line_63 $$ TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")-->Line_70 $$ assertEquals(expectedNameFromArgs, tb2.getName())[ FD ]
Line_55 $$ tb = (TestBean) lbf.getBean("fmGeneric")-->Line_62 $$ assertEquals(expectedNameFromProperties, tb.getName())[ FD ]
Line_12 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_31 $$ lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)[ FD ]
Line_48 $$ TestBean second = (TestBean) lbf.getBean("fmWithProperties")-->Line_58 $$ assertSame(tb, second)[ FD ]
Line_49 $$ if (singleton) -->Line_52 $$ assertNotSame(tb, second)[ CD ]
Line_11 $$ String expectedNameFromArgs = "gordon"-->Line_36 $$ cvals.addGenericArgumentValue(expectedNameFromArgs)[ FD ]
Line_47 $$ TestBean tb = (TestBean) lbf.getBean("fmWithProperties")-->Line_60 $$ assertNotSame(tb, second)[ FD ]
Line_10 $$ String expectedNameFromProperties = "tony"-->Line_62 $$ assertEquals(expectedNameFromProperties, tb.getName())[ FD ]
