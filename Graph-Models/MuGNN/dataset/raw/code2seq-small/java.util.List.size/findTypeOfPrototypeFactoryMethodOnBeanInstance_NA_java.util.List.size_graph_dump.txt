Line_5 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_24 $$ lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)[ FD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_6 $$ RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)[ CD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_28 $$ ConstructorArgumentValues cvals = new ConstructorArgumentValues()[ CD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_19 $$ factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")[ CD ]
Line_48 $$ tb = (TestBean) lbf.getBean("fmGeneric")-->Line_51 $$ assertSame(tb, second)[ FD ]
Line_11 $$ RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()-->Line_17 $$ lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)[ FD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_56 $$ TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")[ CD ]
Line_48 $$ tb = (TestBean) lbf.getBean("fmGeneric")-->Line_53 $$ assertNotSame(tb, second)[ FD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_57 $$ second = (TestBean) lbf.getBean("fmWithArgs")[ CD ]
Line_40 $$ TestBean tb = (TestBean) lbf.getBean("fmWithProperties")-->Line_43 $$ assertSame(tb, second)[ FD ]
Line_41 $$ TestBean second = (TestBean) lbf.getBean("fmWithProperties")-->Line_49 $$ second = (TestBean) lbf.getBean("fmGeneric")[ FD ]
Line_40 $$ TestBean tb = (TestBean) lbf.getBean("fmWithProperties")-->Line_47 $$ assertEquals(expectedNameFromProperties, tb.getName())[ FD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_35 $$ assertEquals(4, lbf.getBeanDefinitionCount())[ CD ]
Line_50 $$ if (singleton) -->Line_51 $$ assertSame(tb, second)[ CD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_11 $$ RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()[ CD ]
Line_18 $$ RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()-->Line_19 $$ factoryMethodDefinitionGeneric.setFactoryBeanName("factoryBeanInstance")[ FD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_38 $$ assertTrue(tbNames.contains("fmWithArgs"))[ CD ]
Line_28 $$ ConstructorArgumentValues cvals = new ConstructorArgumentValues()-->Line_30 $$ factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)[ FD ]
Line_21 $$ if (!singleton) -->Line_22 $$ factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)[ CD ]
Line_6 $$ RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)-->Line_9 $$ instanceFactoryDefinition.setPropertyValues(pvs)[ FD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_50 $$ if (singleton) [ CD ]
Line_6 $$ RootBeanDefinition instanceFactoryDefinition = new RootBeanDefinition(BeanWithFactoryMethod.class)-->Line_10 $$ lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)[ FD ]
Line_3 $$ String expectedNameFromProperties = "tony"-->Line_55 $$ assertEquals(expectedNameFromProperties, tb.getName())[ FD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_3 $$ String expectedNameFromProperties = "tony"[ CD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_49 $$ second = (TestBean) lbf.getBean("fmGeneric")[ CD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_5 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()[ CD ]
Line_4 $$ String expectedNameFromArgs = "gordon"-->Line_29 $$ cvals.addGenericArgumentValue(expectedNameFromArgs)[ FD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_55 $$ assertEquals(expectedNameFromProperties, tb.getName())[ CD ]
Line_7 $$ MutablePropertyValues pvs = new MutablePropertyValues()-->Line_9 $$ instanceFactoryDefinition.setPropertyValues(pvs)[ FD ]
Line_11 $$ RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()-->Line_15 $$ factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)[ FD ]
Line_25 $$ RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()-->Line_30 $$ factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)[ FD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_25 $$ RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()[ CD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_14 $$ if (!singleton) [ FD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_58 $$ if (singleton) [ CD ]
Line_40 $$ TestBean tb = (TestBean) lbf.getBean("fmWithProperties")-->Line_51 $$ assertSame(tb, second)[ FD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_4 $$ String expectedNameFromArgs = "gordon"[ CD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_21 $$ if (!singleton) [ CD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_26 $$ factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")[ CD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_42 $$ if (singleton) [ CD ]
Line_5 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_10 $$ lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)[ FD ]
Line_58 $$ if (singleton) -->Line_59 $$ assertSame(tb2, second)[ CD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_8 $$ pvs.add("name", expectedNameFromProperties)[ CD ]
Line_41 $$ TestBean second = (TestBean) lbf.getBean("fmWithProperties")-->Line_43 $$ assertSame(tb, second)[ FD ]
Line_41 $$ TestBean second = (TestBean) lbf.getBean("fmWithProperties")-->Line_53 $$ assertNotSame(tb, second)[ FD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_18 $$ RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()[ CD ]
Line_18 $$ RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()-->Line_22 $$ factoryMethodDefinitionGeneric.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)[ FD ]
Line_5 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_48 $$ tb = (TestBean) lbf.getBean("fmGeneric")[ FD ]
Line_57 $$ second = (TestBean) lbf.getBean("fmWithArgs")-->Line_59 $$ assertSame(tb2, second)[ FD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_31 $$ if (!singleton) [ CD ]
Line_7 $$ MutablePropertyValues pvs = new MutablePropertyValues()-->Line_8 $$ pvs.add("name", expectedNameFromProperties)[ FD ]
Line_49 $$ second = (TestBean) lbf.getBean("fmGeneric")-->Line_61 $$ assertNotSame(tb2, second)[ FD ]
Line_36 $$ List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))-->Line_37 $$ assertTrue(tbNames.contains("fmWithProperties"))[ FD ]
Line_3 $$ String expectedNameFromProperties = "tony"-->Line_47 $$ assertEquals(expectedNameFromProperties, tb.getName())[ FD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_48 $$ tb = (TestBean) lbf.getBean("fmGeneric")[ CD ]
Line_40 $$ TestBean tb = (TestBean) lbf.getBean("fmWithProperties")-->Line_55 $$ assertEquals(expectedNameFromProperties, tb.getName())[ FD ]
Line_41 $$ TestBean second = (TestBean) lbf.getBean("fmWithProperties")-->Line_57 $$ second = (TestBean) lbf.getBean("fmWithArgs")[ FD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_9 $$ instanceFactoryDefinition.setPropertyValues(pvs)[ CD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_10 $$ lbf.registerBeanDefinition("factoryBeanInstance", instanceFactoryDefinition)[ CD ]
Line_14 $$ if (!singleton) -->Line_15 $$ factoryMethodDefinitionWithProperties.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)[ CD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_40 $$ TestBean tb = (TestBean) lbf.getBean("fmWithProperties")[ CD ]
Line_41 $$ TestBean second = (TestBean) lbf.getBean("fmWithProperties")-->Line_59 $$ assertSame(tb2, second)[ FD ]
Line_41 $$ TestBean second = (TestBean) lbf.getBean("fmWithProperties")-->Line_61 $$ assertNotSame(tb2, second)[ FD ]
Line_41 $$ TestBean second = (TestBean) lbf.getBean("fmWithProperties")-->Line_51 $$ assertSame(tb, second)[ FD ]
Line_3 $$ String expectedNameFromProperties = "tony"-->Line_8 $$ pvs.add("name", expectedNameFromProperties)[ FD ]
Line_50 $$ if (singleton) -->Line_53 $$ assertNotSame(tb, second)[ CD ]
Line_31 $$ if (!singleton) -->Line_32 $$ factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)[ CD ]
Line_25 $$ RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()-->Line_34 $$ lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)[ FD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_24 $$ lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)[ CD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_7 $$ MutablePropertyValues pvs = new MutablePropertyValues()[ CD ]
Line_18 $$ RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()-->Line_24 $$ lbf.registerBeanDefinition("fmGeneric", factoryMethodDefinitionGeneric)[ FD ]
Line_36 $$ List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))-->Line_39 $$ assertEquals(2, tbNames.size())[ FD ]
Line_5 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_57 $$ second = (TestBean) lbf.getBean("fmWithArgs")[ FD ]
Line_11 $$ RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()-->Line_12 $$ factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")[ FD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_12 $$ factoryMethodDefinitionWithProperties.setFactoryBeanName("factoryBeanInstance")[ CD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_20 $$ factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")[ CD ]
Line_18 $$ RootBeanDefinition factoryMethodDefinitionGeneric = new RootBeanDefinition()-->Line_20 $$ factoryMethodDefinitionGeneric.setFactoryMethodName("createGeneric")[ FD ]
Line_25 $$ RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()-->Line_27 $$ factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")[ FD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_47 $$ assertEquals(expectedNameFromProperties, tb.getName())[ CD ]
Line_42 $$ if (singleton) -->Line_45 $$ assertNotSame(tb, second)[ CD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_13 $$ factoryMethodDefinitionWithProperties.setFactoryMethodName("create")[ CD ]
Line_5 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_56 $$ TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")[ FD ]
Line_49 $$ second = (TestBean) lbf.getBean("fmGeneric")-->Line_59 $$ assertSame(tb2, second)[ FD ]
Line_36 $$ List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))-->Line_38 $$ assertTrue(tbNames.contains("fmWithArgs"))[ FD ]
Line_42 $$ if (singleton) -->Line_43 $$ assertSame(tb, second)[ CD ]
Line_4 $$ String expectedNameFromArgs = "gordon"-->Line_63 $$ assertEquals(expectedNameFromArgs, tb2.getName())[ FD ]
Line_5 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_17 $$ lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)[ FD ]
Line_57 $$ second = (TestBean) lbf.getBean("fmWithArgs")-->Line_61 $$ assertNotSame(tb2, second)[ FD ]
Line_5 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_36 $$ List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))[ FD ]
Line_5 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_40 $$ TestBean tb = (TestBean) lbf.getBean("fmWithProperties")[ FD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_31 $$ if (!singleton) [ FD ]
Line_5 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_35 $$ assertEquals(4, lbf.getBeanDefinitionCount())[ FD ]
Line_56 $$ TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")-->Line_59 $$ assertSame(tb2, second)[ FD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_34 $$ lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)[ CD ]
Line_58 $$ if (singleton) -->Line_61 $$ assertNotSame(tb2, second)[ CD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_27 $$ factoryMethodDefinitionWithArgs.setFactoryMethodName("createWithArgs")[ CD ]
Line_28 $$ ConstructorArgumentValues cvals = new ConstructorArgumentValues()-->Line_29 $$ cvals.addGenericArgumentValue(expectedNameFromArgs)[ FD ]
Line_40 $$ TestBean tb = (TestBean) lbf.getBean("fmWithProperties")-->Line_48 $$ tb = (TestBean) lbf.getBean("fmGeneric")[ FD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_41 $$ TestBean second = (TestBean) lbf.getBean("fmWithProperties")[ CD ]
Line_5 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_41 $$ TestBean second = (TestBean) lbf.getBean("fmWithProperties")[ FD ]
Line_56 $$ TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")-->Line_63 $$ assertEquals(expectedNameFromArgs, tb2.getName())[ FD ]
Line_48 $$ tb = (TestBean) lbf.getBean("fmGeneric")-->Line_55 $$ assertEquals(expectedNameFromProperties, tb.getName())[ FD ]
Line_49 $$ second = (TestBean) lbf.getBean("fmGeneric")-->Line_57 $$ second = (TestBean) lbf.getBean("fmWithArgs")[ FD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_37 $$ assertTrue(tbNames.contains("fmWithProperties"))[ CD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_29 $$ cvals.addGenericArgumentValue(expectedNameFromArgs)[ CD ]
Line_56 $$ TestBean tb2 = (TestBean) lbf.getBean("fmWithArgs")-->Line_61 $$ assertNotSame(tb2, second)[ FD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_39 $$ assertEquals(2, tbNames.size())[ CD ]
Line_25 $$ RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()-->Line_26 $$ factoryMethodDefinitionWithArgs.setFactoryBeanName("factoryBeanInstance")[ FD ]
Line_5 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_34 $$ lbf.registerBeanDefinition("fmWithArgs", factoryMethodDefinitionWithArgs)[ FD ]
Line_49 $$ second = (TestBean) lbf.getBean("fmGeneric")-->Line_53 $$ assertNotSame(tb, second)[ FD ]
Line_49 $$ second = (TestBean) lbf.getBean("fmGeneric")-->Line_51 $$ assertSame(tb, second)[ FD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_63 $$ assertEquals(expectedNameFromArgs, tb2.getName())[ CD ]
Line_40 $$ TestBean tb = (TestBean) lbf.getBean("fmWithProperties")-->Line_53 $$ assertNotSame(tb, second)[ FD ]
Line_25 $$ RootBeanDefinition factoryMethodDefinitionWithArgs = new RootBeanDefinition()-->Line_32 $$ factoryMethodDefinitionWithArgs.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)[ FD ]
Line_41 $$ TestBean second = (TestBean) lbf.getBean("fmWithProperties")-->Line_45 $$ assertNotSame(tb, second)[ FD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_14 $$ if (!singleton) [ CD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_21 $$ if (!singleton) [ FD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_17 $$ lbf.registerBeanDefinition("fmWithProperties", factoryMethodDefinitionWithProperties)[ CD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_36 $$ List<String> tbNames = Arrays.asList(lbf.getBeanNamesForType(TestBean.class))[ CD ]
Line_40 $$ TestBean tb = (TestBean) lbf.getBean("fmWithProperties")-->Line_45 $$ assertNotSame(tb, second)[ FD ]
Line_2 $$ private void findTypeOfPrototypeFactoryMethodOnBeanInstance(boolean singleton) -->Line_30 $$ factoryMethodDefinitionWithArgs.setConstructorArgumentValues(cvals)[ CD ]
Line_5 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_49 $$ second = (TestBean) lbf.getBean("fmGeneric")[ FD ]
Line_11 $$ RootBeanDefinition factoryMethodDefinitionWithProperties = new RootBeanDefinition()-->Line_13 $$ factoryMethodDefinitionWithProperties.setFactoryMethodName("create")[ FD ]
