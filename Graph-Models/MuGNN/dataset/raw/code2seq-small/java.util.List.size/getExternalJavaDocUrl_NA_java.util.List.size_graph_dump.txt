Line_12 $$ for (int i = 0; i < urls.size(); i++) -->Line_44 $$ for (int i = 0; i < urls.size(); i++) [ FD ]
Line_2 $$ public static List<String> getExternalJavaDocUrl(final PsiElement element) -->Line_6 $$ if (element instanceof PsiField) [ FD ]
Line_10 $$ urls = findUrlForClass(aClass)-->Line_34 $$ urls = findUrlForPackage((PsiPackage) element)[ FD ]
Line_5 $$ urls = findUrlForClass((PsiClass) element)-->Line_28 $$ urls.add(classUrl + "#" + signature)[ FD ]
Line_41 $$ if (urls == null || urls.isEmpty()) -->Line_42 $$ return null[ CD ]
Line_8 $$ PsiClass aClass = field.getContainingClass()-->Line_21 $$ List<String> classUrls = findUrlForClass(aClass)[ FD ]
Line_6 $$ if (element instanceof PsiField) -->Line_9 $$ if (aClass != null) [ CD ]
Line_17 $$ if (element instanceof PsiMethod) -->Line_20 $$ if (aClass != null) [ CD ]
Line_9 $$ if (aClass != null) -->Line_11 $$ if (urls != null) [ CD ]
Line_2 $$ public static List<String> getExternalJavaDocUrl(final PsiElement element) -->Line_33 $$ if (element instanceof PsiPackage) [ FD ]
Line_10 $$ urls = findUrlForClass(aClass)-->Line_23 $$ urls = ContainerUtil.newSmartList()[ FD ]
Line_8 $$ PsiClass aClass = field.getContainingClass()-->Line_10 $$ urls = findUrlForClass(aClass)[ FD ]
Line_23 $$ urls = ContainerUtil.newSmartList()-->Line_45 $$ urls.set(i, FileUtil.toSystemIndependentName(urls.get(i)))[ FD ]
Line_10 $$ urls = findUrlForClass(aClass)-->Line_45 $$ urls.set(i, FileUtil.toSystemIndependentName(urls.get(i)))[ FD ]
Line_10 $$ urls = findUrlForClass(aClass)-->Line_12 $$ for (int i = 0; i < urls.size(); i++) [ FD ]
Line_7 $$ PsiField field = (PsiField) element-->Line_13 $$ urls.set(i, urls.get(i) + "#" + field.getName())[ FD ]
Line_10 $$ urls = findUrlForClass(aClass)-->Line_38 $$ urls = findUrlForPackage(aPackage)[ FD ]
Line_34 $$ urls = findUrlForPackage((PsiPackage) element)-->Line_45 $$ urls.set(i, FileUtil.toSystemIndependentName(urls.get(i)))[ FD ]
Line_33 $$ if (element instanceof PsiPackage) -->Line_35 $$ if (element instanceof PsiDirectory) [ CD ]
Line_5 $$ urls = findUrlForClass((PsiClass) element)-->Line_41 $$ if (urls == null || urls.isEmpty()) [ FD ]
Line_2 $$ public static List<String> getExternalJavaDocUrl(final PsiElement element) -->Line_17 $$ if (element instanceof PsiMethod) [ FD ]
Line_7 $$ PsiField field = (PsiField) element-->Line_8 $$ PsiClass aClass = field.getContainingClass()[ FD ]
Line_24 $$ final boolean useJava8Format = PsiUtil.isLanguageLevel8OrHigher(method)-->Line_25 $$ final Set<String> signatures = getHtmlMethodSignatures(method, useJava8Format)[ FD ]
Line_9 $$ if (aClass != null) -->Line_10 $$ urls = findUrlForClass(aClass)[ CD ]
Line_10 $$ urls = findUrlForClass(aClass)-->Line_28 $$ urls.add(classUrl + "#" + signature)[ FD ]
Line_3 $$ List<String> urls = null-->Line_11 $$ if (urls != null) [ FD ]
Line_17 $$ if (element instanceof PsiMethod) -->Line_19 $$ PsiClass aClass = method.getContainingClass()[ CD ]
Line_4 $$ if (element instanceof PsiClass) -->Line_5 $$ urls = findUrlForClass((PsiClass) element)[ CD ]
Line_5 $$ urls = findUrlForClass((PsiClass) element)-->Line_10 $$ urls = findUrlForClass(aClass)[ FD ]
Line_3 $$ List<String> urls = null-->Line_23 $$ urls = ContainerUtil.newSmartList()[ FD ]
Line_4 $$ if (element instanceof PsiClass) -->Line_6 $$ if (element instanceof PsiField) [ CD ]
Line_6 $$ if (element instanceof PsiField) -->Line_8 $$ PsiClass aClass = field.getContainingClass()[ CD ]
Line_2 $$ public static List<String> getExternalJavaDocUrl(final PsiElement element) -->Line_41 $$ if (urls == null || urls.isEmpty()) [ CD ]
Line_18 $$ PsiMethod method = (PsiMethod) element-->Line_24 $$ final boolean useJava8Format = PsiUtil.isLanguageLevel8OrHigher(method)[ FD ]
Line_10 $$ urls = findUrlForClass(aClass)-->Line_13 $$ urls.set(i, urls.get(i) + "#" + field.getName())[ FD ]
Line_34 $$ urls = findUrlForPackage((PsiPackage) element)-->Line_38 $$ urls = findUrlForPackage(aPackage)[ FD ]
Line_3 $$ List<String> urls = null-->Line_12 $$ for (int i = 0; i < urls.size(); i++) [ FD ]
Line_36 $$ PsiPackage aPackage = JavaDirectoryService.getInstance().getPackage(((PsiDirectory) element))-->Line_37 $$ if (aPackage != null) [ FD ]
Line_2 $$ public static List<String> getExternalJavaDocUrl(final PsiElement element) -->Line_3 $$ List<String> urls = null[ CD ]
Line_23 $$ urls = ContainerUtil.newSmartList()-->Line_44 $$ for (int i = 0; i < urls.size(); i++) [ FD ]
Line_6 $$ if (element instanceof PsiField) -->Line_17 $$ if (element instanceof PsiMethod) [ CD ]
Line_3 $$ List<String> urls = null-->Line_41 $$ if (urls == null || urls.isEmpty()) [ FD ]
Line_3 $$ List<String> urls = null-->Line_5 $$ urls = findUrlForClass((PsiClass) element)[ FD ]
Line_22 $$ if (classUrls != null) -->Line_25 $$ final Set<String> signatures = getHtmlMethodSignatures(method, useJava8Format)[ CD ]
Line_41 $$ if (urls == null || urls.isEmpty()) -->Line_47 $$ return urls[ CD ]
Line_5 $$ urls = findUrlForClass((PsiClass) element)-->Line_45 $$ urls.set(i, FileUtil.toSystemIndependentName(urls.get(i)))[ FD ]
Line_38 $$ urls = findUrlForPackage(aPackage)-->Line_45 $$ urls.set(i, FileUtil.toSystemIndependentName(urls.get(i)))[ FD ]
Line_5 $$ urls = findUrlForClass((PsiClass) element)-->Line_38 $$ urls = findUrlForPackage(aPackage)[ FD ]
Line_12 $$ for (int i = 0; i < urls.size(); i++) -->Line_13 $$ urls.set(i, urls.get(i) + "#" + field.getName())[ CD ]
Line_3 $$ List<String> urls = null-->Line_45 $$ urls.set(i, FileUtil.toSystemIndependentName(urls.get(i)))[ FD ]
Line_34 $$ urls = findUrlForPackage((PsiPackage) element)-->Line_41 $$ if (urls == null || urls.isEmpty()) [ FD ]
Line_35 $$ if (element instanceof PsiDirectory) -->Line_37 $$ if (aPackage != null) [ CD ]
Line_18 $$ PsiMethod method = (PsiMethod) element-->Line_19 $$ PsiClass aClass = method.getContainingClass()[ FD ]
Line_17 $$ if (element instanceof PsiMethod) -->Line_18 $$ PsiMethod method = (PsiMethod) element[ CD ]
Line_10 $$ urls = findUrlForClass(aClass)-->Line_11 $$ if (urls != null) [ FD ]
Line_23 $$ urls = ContainerUtil.newSmartList()-->Line_41 $$ if (urls == null || urls.isEmpty()) [ FD ]
Line_5 $$ urls = findUrlForClass((PsiClass) element)-->Line_23 $$ urls = ContainerUtil.newSmartList()[ FD ]
Line_35 $$ if (element instanceof PsiDirectory) -->Line_36 $$ PsiPackage aPackage = JavaDirectoryService.getInstance().getPackage(((PsiDirectory) element))[ CD ]
Line_3 $$ List<String> urls = null-->Line_44 $$ for (int i = 0; i < urls.size(); i++) [ FD ]
Line_20 $$ if (aClass != null) -->Line_21 $$ List<String> classUrls = findUrlForClass(aClass)[ CD ]
Line_37 $$ if (aPackage != null) -->Line_38 $$ urls = findUrlForPackage(aPackage)[ CD ]
Line_17 $$ if (element instanceof PsiMethod) -->Line_33 $$ if (element instanceof PsiPackage) [ CD ]
Line_5 $$ urls = findUrlForClass((PsiClass) element)-->Line_11 $$ if (urls != null) [ FD ]
Line_23 $$ urls = ContainerUtil.newSmartList()-->Line_28 $$ urls.add(classUrl + "#" + signature)[ FD ]
Line_2 $$ public static List<String> getExternalJavaDocUrl(final PsiElement element) -->Line_4 $$ if (element instanceof PsiClass) [ FD ]
Line_38 $$ urls = findUrlForPackage(aPackage)-->Line_44 $$ for (int i = 0; i < urls.size(); i++) [ FD ]
Line_8 $$ PsiClass aClass = field.getContainingClass()-->Line_9 $$ if (aClass != null) [ FD ]
Line_3 $$ List<String> urls = null-->Line_38 $$ urls = findUrlForPackage(aPackage)[ FD ]
Line_10 $$ urls = findUrlForClass(aClass)-->Line_41 $$ if (urls == null || urls.isEmpty()) [ FD ]
Line_44 $$ for (int i = 0; i < urls.size(); i++) -->Line_45 $$ urls.set(i, FileUtil.toSystemIndependentName(urls.get(i)))[ CD ]
Line_38 $$ urls = findUrlForPackage(aPackage)-->Line_41 $$ if (urls == null || urls.isEmpty()) [ FD ]
Line_20 $$ if (aClass != null) -->Line_22 $$ if (classUrls != null) [ CD ]
Line_22 $$ if (classUrls != null) -->Line_23 $$ urls = ContainerUtil.newSmartList()[ CD ]
Line_33 $$ if (element instanceof PsiPackage) -->Line_34 $$ urls = findUrlForPackage((PsiPackage) element)[ CD ]
Line_12 $$ for (int i = 0; i < urls.size(); i++) -->Line_13 $$ urls.set(i, urls.get(i) + "#" + field.getName())[ FD ]
Line_2 $$ public static List<String> getExternalJavaDocUrl(final PsiElement element) -->Line_4 $$ if (element instanceof PsiClass) [ CD ]
Line_23 $$ urls = ContainerUtil.newSmartList()-->Line_38 $$ urls = findUrlForPackage(aPackage)[ FD ]
Line_44 $$ for (int i = 0; i < urls.size(); i++) -->Line_45 $$ urls.set(i, FileUtil.toSystemIndependentName(urls.get(i)))[ FD ]
Line_6 $$ if (element instanceof PsiField) -->Line_7 $$ PsiField field = (PsiField) element[ CD ]
Line_8 $$ PsiClass aClass = field.getContainingClass()-->Line_20 $$ if (aClass != null) [ FD ]
Line_12 $$ for (int i = 0; i < urls.size(); i++) -->Line_45 $$ urls.set(i, FileUtil.toSystemIndependentName(urls.get(i)))[ FD ]
Line_22 $$ if (classUrls != null) -->Line_24 $$ final boolean useJava8Format = PsiUtil.isLanguageLevel8OrHigher(method)[ CD ]
Line_5 $$ urls = findUrlForClass((PsiClass) element)-->Line_12 $$ for (int i = 0; i < urls.size(); i++) [ FD ]
Line_11 $$ if (urls != null) -->Line_12 $$ for (int i = 0; i < urls.size(); i++) [ CD ]
Line_3 $$ List<String> urls = null-->Line_10 $$ urls = findUrlForClass(aClass)[ FD ]
Line_23 $$ urls = ContainerUtil.newSmartList()-->Line_34 $$ urls = findUrlForPackage((PsiPackage) element)[ FD ]
Line_5 $$ urls = findUrlForClass((PsiClass) element)-->Line_13 $$ urls.set(i, urls.get(i) + "#" + field.getName())[ FD ]
Line_3 $$ List<String> urls = null-->Line_13 $$ urls.set(i, urls.get(i) + "#" + field.getName())[ FD ]
Line_18 $$ PsiMethod method = (PsiMethod) element-->Line_25 $$ final Set<String> signatures = getHtmlMethodSignatures(method, useJava8Format)[ FD ]
Line_10 $$ urls = findUrlForClass(aClass)-->Line_44 $$ for (int i = 0; i < urls.size(); i++) [ FD ]
Line_5 $$ urls = findUrlForClass((PsiClass) element)-->Line_34 $$ urls = findUrlForPackage((PsiPackage) element)[ FD ]
Line_36 $$ PsiPackage aPackage = JavaDirectoryService.getInstance().getPackage(((PsiDirectory) element))-->Line_38 $$ urls = findUrlForPackage(aPackage)[ FD ]
Line_3 $$ List<String> urls = null-->Line_28 $$ urls.add(classUrl + "#" + signature)[ FD ]
Line_34 $$ urls = findUrlForPackage((PsiPackage) element)-->Line_44 $$ for (int i = 0; i < urls.size(); i++) [ FD ]
Line_3 $$ List<String> urls = null-->Line_34 $$ urls = findUrlForPackage((PsiPackage) element)[ FD ]
Line_2 $$ public static List<String> getExternalJavaDocUrl(final PsiElement element) -->Line_35 $$ if (element instanceof PsiDirectory) [ FD ]
Line_5 $$ urls = findUrlForClass((PsiClass) element)-->Line_44 $$ for (int i = 0; i < urls.size(); i++) [ FD ]
Line_21 $$ List<String> classUrls = findUrlForClass(aClass)-->Line_22 $$ if (classUrls != null) [ FD ]
Line_41 $$ if (urls == null || urls.isEmpty()) -->Line_44 $$ for (int i = 0; i < urls.size(); i++) [ CD ]
