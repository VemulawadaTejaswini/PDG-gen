Line_11 $$ urls = findUrlForClass(aClass)-->Line_39 $$ urls = findUrlForPackage(aPackage)[ FD ]
Line_11 $$ urls = findUrlForClass(aClass)-->Line_29 $$ urls.add(classUrl + "#" + signature)[ FD ]
Line_18 $$ if (element instanceof PsiMethod) -->Line_34 $$ if (element instanceof PsiPackage) [ CD ]
Line_9 $$ PsiClass aClass = field.getContainingClass()-->Line_21 $$ if (aClass != null) [ FD ]
Line_11 $$ urls = findUrlForClass(aClass)-->Line_14 $$ urls.set(i, urls.get(i) + "#" + field.getName())[ FD ]
Line_19 $$ PsiMethod method = (PsiMethod) element-->Line_25 $$ final boolean useJava8Format = PsiUtil.isLanguageLevel8OrHigher(method)[ FD ]
Line_13 $$ for (int i = 0; i < urls.size(); i++) -->Line_46 $$ urls.set(i, FileUtil.toSystemIndependentName(urls.get(i)))[ FD ]
Line_35 $$ urls = findUrlForPackage((PsiPackage) element)-->Line_42 $$ if (urls == null || urls.isEmpty()) [ FD ]
Line_24 $$ urls = ContainerUtil.newSmartList()-->Line_39 $$ urls = findUrlForPackage(aPackage)[ FD ]
Line_36 $$ if (element instanceof PsiDirectory) -->Line_38 $$ if (aPackage != null) [ CD ]
Line_7 $$ if (element instanceof PsiField) -->Line_9 $$ PsiClass aClass = field.getContainingClass()[ CD ]
Line_6 $$ urls = findUrlForClass((PsiClass) element)-->Line_42 $$ if (urls == null || urls.isEmpty()) [ FD ]
Line_45 $$ for (int i = 0; i < urls.size(); i++) -->Line_46 $$ urls.set(i, FileUtil.toSystemIndependentName(urls.get(i)))[ CD ]
Line_4 $$ List<String> urls = null-->Line_11 $$ urls = findUrlForClass(aClass)[ FD ]
Line_4 $$ List<String> urls = null-->Line_35 $$ urls = findUrlForPackage((PsiPackage) element)[ FD ]
Line_37 $$ PsiPackage aPackage = JavaDirectoryService.getInstance().getPackage(((PsiDirectory) element))-->Line_39 $$ urls = findUrlForPackage(aPackage)[ FD ]
Line_6 $$ urls = findUrlForClass((PsiClass) element)-->Line_46 $$ urls.set(i, FileUtil.toSystemIndependentName(urls.get(i)))[ FD ]
Line_42 $$ if (urls == null || urls.isEmpty()) -->Line_43 $$ return null[ CD ]
Line_19 $$ PsiMethod method = (PsiMethod) element-->Line_20 $$ PsiClass aClass = method.getContainingClass()[ FD ]
Line_4 $$ List<String> urls = null-->Line_14 $$ urls.set(i, urls.get(i) + "#" + field.getName())[ FD ]
Line_23 $$ if (classUrls != null) -->Line_24 $$ urls = ContainerUtil.newSmartList()[ CD ]
Line_6 $$ urls = findUrlForClass((PsiClass) element)-->Line_29 $$ urls.add(classUrl + "#" + signature)[ FD ]
Line_5 $$ if (element instanceof PsiClass) -->Line_6 $$ urls = findUrlForClass((PsiClass) element)[ CD ]
Line_7 $$ if (element instanceof PsiField) -->Line_10 $$ if (aClass != null) [ CD ]
Line_24 $$ urls = ContainerUtil.newSmartList()-->Line_35 $$ urls = findUrlForPackage((PsiPackage) element)[ FD ]
Line_18 $$ if (element instanceof PsiMethod) -->Line_19 $$ PsiMethod method = (PsiMethod) element[ CD ]
Line_13 $$ for (int i = 0; i < urls.size(); i++) -->Line_14 $$ urls.set(i, urls.get(i) + "#" + field.getName())[ FD ]
Line_38 $$ if (aPackage != null) -->Line_39 $$ urls = findUrlForPackage(aPackage)[ CD ]
Line_24 $$ urls = ContainerUtil.newSmartList()-->Line_46 $$ urls.set(i, FileUtil.toSystemIndependentName(urls.get(i)))[ FD ]
Line_5 $$ if (element instanceof PsiClass) -->Line_7 $$ if (element instanceof PsiField) [ CD ]
Line_9 $$ PsiClass aClass = field.getContainingClass()-->Line_22 $$ List<String> classUrls = findUrlForClass(aClass)[ FD ]
Line_6 $$ urls = findUrlForClass((PsiClass) element)-->Line_45 $$ for (int i = 0; i < urls.size(); i++) [ FD ]
Line_22 $$ List<String> classUrls = findUrlForClass(aClass)-->Line_23 $$ if (classUrls != null) [ FD ]
Line_4 $$ List<String> urls = null-->Line_24 $$ urls = ContainerUtil.newSmartList()[ FD ]
Line_34 $$ if (element instanceof PsiPackage) -->Line_36 $$ if (element instanceof PsiDirectory) [ CD ]
Line_42 $$ if (urls == null || urls.isEmpty()) -->Line_45 $$ for (int i = 0; i < urls.size(); i++) [ CD ]
Line_21 $$ if (aClass != null) -->Line_23 $$ if (classUrls != null) [ CD ]
Line_6 $$ urls = findUrlForClass((PsiClass) element)-->Line_39 $$ urls = findUrlForPackage(aPackage)[ FD ]
Line_13 $$ for (int i = 0; i < urls.size(); i++) -->Line_45 $$ for (int i = 0; i < urls.size(); i++) [ FD ]
Line_12 $$ if (urls != null) -->Line_13 $$ for (int i = 0; i < urls.size(); i++) [ CD ]
Line_4 $$ List<String> urls = null-->Line_6 $$ urls = findUrlForClass((PsiClass) element)[ FD ]
Line_10 $$ if (aClass != null) -->Line_11 $$ urls = findUrlForClass(aClass)[ CD ]
Line_21 $$ if (aClass != null) -->Line_22 $$ List<String> classUrls = findUrlForClass(aClass)[ CD ]
Line_11 $$ urls = findUrlForClass(aClass)-->Line_12 $$ if (urls != null) [ FD ]
Line_6 $$ urls = findUrlForClass((PsiClass) element)-->Line_12 $$ if (urls != null) [ FD ]
Line_23 $$ if (classUrls != null) -->Line_26 $$ final Set<String> signatures = getHtmlMethodSignatures(method, useJava8Format)[ CD ]
Line_6 $$ urls = findUrlForClass((PsiClass) element)-->Line_35 $$ urls = findUrlForPackage((PsiPackage) element)[ FD ]
Line_4 $$ List<String> urls = null-->Line_45 $$ for (int i = 0; i < urls.size(); i++) [ FD ]
Line_24 $$ urls = ContainerUtil.newSmartList()-->Line_29 $$ urls.add(classUrl + "#" + signature)[ FD ]
Line_18 $$ if (element instanceof PsiMethod) -->Line_21 $$ if (aClass != null) [ CD ]
Line_7 $$ if (element instanceof PsiField) -->Line_8 $$ PsiField field = (PsiField) element[ CD ]
Line_6 $$ urls = findUrlForClass((PsiClass) element)-->Line_14 $$ urls.set(i, urls.get(i) + "#" + field.getName())[ FD ]
Line_8 $$ PsiField field = (PsiField) element-->Line_9 $$ PsiClass aClass = field.getContainingClass()[ FD ]
Line_42 $$ if (urls == null || urls.isEmpty()) -->Line_48 $$ return urls[ CD ]
Line_13 $$ for (int i = 0; i < urls.size(); i++) -->Line_14 $$ urls.set(i, urls.get(i) + "#" + field.getName())[ CD ]
Line_6 $$ urls = findUrlForClass((PsiClass) element)-->Line_13 $$ for (int i = 0; i < urls.size(); i++) [ FD ]
Line_9 $$ PsiClass aClass = field.getContainingClass()-->Line_11 $$ urls = findUrlForClass(aClass)[ FD ]
Line_25 $$ final boolean useJava8Format = PsiUtil.isLanguageLevel8OrHigher(method)-->Line_26 $$ final Set<String> signatures = getHtmlMethodSignatures(method, useJava8Format)[ FD ]
Line_24 $$ urls = ContainerUtil.newSmartList()-->Line_42 $$ if (urls == null || urls.isEmpty()) [ FD ]
Line_6 $$ urls = findUrlForClass((PsiClass) element)-->Line_11 $$ urls = findUrlForClass(aClass)[ FD ]
Line_8 $$ PsiField field = (PsiField) element-->Line_14 $$ urls.set(i, urls.get(i) + "#" + field.getName())[ FD ]
Line_4 $$ List<String> urls = null-->Line_39 $$ urls = findUrlForPackage(aPackage)[ FD ]
Line_35 $$ urls = findUrlForPackage((PsiPackage) element)-->Line_45 $$ for (int i = 0; i < urls.size(); i++) [ FD ]
Line_4 $$ List<String> urls = null-->Line_42 $$ if (urls == null || urls.isEmpty()) [ FD ]
Line_35 $$ urls = findUrlForPackage((PsiPackage) element)-->Line_46 $$ urls.set(i, FileUtil.toSystemIndependentName(urls.get(i)))[ FD ]
Line_11 $$ urls = findUrlForClass(aClass)-->Line_24 $$ urls = ContainerUtil.newSmartList()[ FD ]
Line_39 $$ urls = findUrlForPackage(aPackage)-->Line_42 $$ if (urls == null || urls.isEmpty()) [ FD ]
Line_4 $$ List<String> urls = null-->Line_13 $$ for (int i = 0; i < urls.size(); i++) [ FD ]
Line_11 $$ urls = findUrlForClass(aClass)-->Line_45 $$ for (int i = 0; i < urls.size(); i++) [ FD ]
Line_34 $$ if (element instanceof PsiPackage) -->Line_35 $$ urls = findUrlForPackage((PsiPackage) element)[ CD ]
Line_4 $$ List<String> urls = null-->Line_46 $$ urls.set(i, FileUtil.toSystemIndependentName(urls.get(i)))[ FD ]
Line_4 $$ List<String> urls = null-->Line_12 $$ if (urls != null) [ FD ]
Line_35 $$ urls = findUrlForPackage((PsiPackage) element)-->Line_39 $$ urls = findUrlForPackage(aPackage)[ FD ]
Line_23 $$ if (classUrls != null) -->Line_25 $$ final boolean useJava8Format = PsiUtil.isLanguageLevel8OrHigher(method)[ CD ]
Line_11 $$ urls = findUrlForClass(aClass)-->Line_46 $$ urls.set(i, FileUtil.toSystemIndependentName(urls.get(i)))[ FD ]
Line_9 $$ PsiClass aClass = field.getContainingClass()-->Line_10 $$ if (aClass != null) [ FD ]
Line_18 $$ if (element instanceof PsiMethod) -->Line_20 $$ PsiClass aClass = method.getContainingClass()[ CD ]
Line_36 $$ if (element instanceof PsiDirectory) -->Line_37 $$ PsiPackage aPackage = JavaDirectoryService.getInstance().getPackage(((PsiDirectory) element))[ CD ]
Line_6 $$ urls = findUrlForClass((PsiClass) element)-->Line_24 $$ urls = ContainerUtil.newSmartList()[ FD ]
Line_11 $$ urls = findUrlForClass(aClass)-->Line_35 $$ urls = findUrlForPackage((PsiPackage) element)[ FD ]
Line_4 $$ List<String> urls = null-->Line_29 $$ urls.add(classUrl + "#" + signature)[ FD ]
Line_45 $$ for (int i = 0; i < urls.size(); i++) -->Line_46 $$ urls.set(i, FileUtil.toSystemIndependentName(urls.get(i)))[ FD ]
Line_39 $$ urls = findUrlForPackage(aPackage)-->Line_45 $$ for (int i = 0; i < urls.size(); i++) [ FD ]
Line_7 $$ if (element instanceof PsiField) -->Line_18 $$ if (element instanceof PsiMethod) [ CD ]
Line_39 $$ urls = findUrlForPackage(aPackage)-->Line_46 $$ urls.set(i, FileUtil.toSystemIndependentName(urls.get(i)))[ FD ]
Line_37 $$ PsiPackage aPackage = JavaDirectoryService.getInstance().getPackage(((PsiDirectory) element))-->Line_38 $$ if (aPackage != null) [ FD ]
Line_10 $$ if (aClass != null) -->Line_12 $$ if (urls != null) [ CD ]
Line_24 $$ urls = ContainerUtil.newSmartList()-->Line_45 $$ for (int i = 0; i < urls.size(); i++) [ FD ]
Line_11 $$ urls = findUrlForClass(aClass)-->Line_42 $$ if (urls == null || urls.isEmpty()) [ FD ]
Line_19 $$ PsiMethod method = (PsiMethod) element-->Line_26 $$ final Set<String> signatures = getHtmlMethodSignatures(method, useJava8Format)[ FD ]
Line_11 $$ urls = findUrlForClass(aClass)-->Line_13 $$ for (int i = 0; i < urls.size(); i++) [ FD ]
