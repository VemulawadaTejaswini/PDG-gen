Line_3 $$ List selections = new ArrayList()-->Line_5 $$ determineValueSelectExpressions(collectionPersister, selections)[ FD ]
Line_2 $$ protected String[] resolveColumns(QueryableCollection collectionPersister) -->Line_5 $$ determineValueSelectExpressions(collectionPersister, selections)[ FD ]
Line_8 $$ for (int i = 0; i < selections.size(); i++) -->Line_10 $$ text += (", " + selectExpression.getExpression() + " as " + selectExpression.getAlias())[ CD ]
Line_2 $$ protected String[] resolveColumns(QueryableCollection collectionPersister) -->Line_6 $$ String text = ""[ CD ]
Line_2 $$ protected String[] resolveColumns(QueryableCollection collectionPersister) -->Line_5 $$ determineValueSelectExpressions(collectionPersister, selections)[ CD ]
Line_8 $$ for (int i = 0; i < selections.size(); i++) -->Line_9 $$ SelectExpression selectExpression = (SelectExpression) selections.get(i)[ FD ]
Line_6 $$ String text = ""-->Line_13 $$ text = text.substring(2)[ FD ]
Line_2 $$ protected String[] resolveColumns(QueryableCollection collectionPersister) -->Line_4 $$ determineKeySelectExpressions(collectionPersister, selections)[ FD ]
Line_10 $$ text += (", " + selectExpression.getExpression() + " as " + selectExpression.getAlias())-->Line_14 $$ setText(text)[ FD ]
Line_3 $$ List selections = new ArrayList()-->Line_4 $$ determineKeySelectExpressions(collectionPersister, selections)[ FD ]
Line_3 $$ List selections = new ArrayList()-->Line_9 $$ SelectExpression selectExpression = (SelectExpression) selections.get(i)[ FD ]
Line_2 $$ protected String[] resolveColumns(QueryableCollection collectionPersister) -->Line_3 $$ List selections = new ArrayList()[ CD ]
Line_2 $$ protected String[] resolveColumns(QueryableCollection collectionPersister) -->Line_13 $$ text = text.substring(2)[ CD ]
Line_2 $$ protected String[] resolveColumns(QueryableCollection collectionPersister) -->Line_7 $$ String[] columns = new String[selections.size()][ CD ]
Line_2 $$ protected String[] resolveColumns(QueryableCollection collectionPersister) -->Line_4 $$ determineKeySelectExpressions(collectionPersister, selections)[ CD ]
Line_3 $$ List selections = new ArrayList()-->Line_8 $$ for (int i = 0; i < selections.size(); i++) [ FD ]
Line_2 $$ protected String[] resolveColumns(QueryableCollection collectionPersister) -->Line_14 $$ setText(text)[ CD ]
Line_8 $$ for (int i = 0; i < selections.size(); i++) -->Line_11 $$ columns[i] = selectExpression.getExpression()[ CD ]
Line_6 $$ String text = ""-->Line_14 $$ setText(text)[ FD ]
Line_13 $$ text = text.substring(2)-->Line_14 $$ setText(text)[ FD ]
Line_6 $$ String text = ""-->Line_10 $$ text += (", " + selectExpression.getExpression() + " as " + selectExpression.getAlias())[ FD ]
Line_2 $$ protected String[] resolveColumns(QueryableCollection collectionPersister) -->Line_16 $$ return columns[ CD ]
Line_3 $$ List selections = new ArrayList()-->Line_7 $$ String[] columns = new String[selections.size()][ FD ]
Line_8 $$ for (int i = 0; i < selections.size(); i++) -->Line_9 $$ SelectExpression selectExpression = (SelectExpression) selections.get(i)[ CD ]
Line_2 $$ protected String[] resolveColumns(QueryableCollection collectionPersister) -->Line_8 $$ for (int i = 0; i < selections.size(); i++) [ CD ]
Line_9 $$ SelectExpression selectExpression = (SelectExpression) selections.get(i)-->Line_10 $$ text += (", " + selectExpression.getExpression() + " as " + selectExpression.getAlias())[ FD ]
Line_10 $$ text += (", " + selectExpression.getExpression() + " as " + selectExpression.getAlias())-->Line_13 $$ text = text.substring(2)[ FD ]
Line_2 $$ protected String[] resolveColumns(QueryableCollection collectionPersister) -->Line_15 $$ setResolved()[ CD ]
Line_9 $$ SelectExpression selectExpression = (SelectExpression) selections.get(i)-->Line_11 $$ columns[i] = selectExpression.getExpression()[ FD ]
