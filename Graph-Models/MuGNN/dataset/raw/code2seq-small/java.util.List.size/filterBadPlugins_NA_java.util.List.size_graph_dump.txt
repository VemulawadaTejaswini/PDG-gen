Line_20 $$ for (final Iterator<? extends IdeaPluginDescriptor> it = result.iterator(); it.hasNext(); ) -->Line_22 $$ checkDependants(pluginDescriptor, new Function<PluginId, IdeaPluginDescriptor>() [ CD ]
Line_10 $$ if (idToDescriptorMap.containsKey(id)) -->Line_12 $$ it.remove()[ CD ]
Line_2 $$ private static void filterBadPlugins(@NotNull List<? extends IdeaPluginDescriptor> result, @NotNull final Map<String, String> disabledPluginNames, @NotNull final List<String> errors) -->Line_4 $$ boolean pluginsWithoutIdFound = false[ CD ]
Line_10 $$ if (idToDescriptorMap.containsKey(id)) -->Line_13 $$ if (descriptor.isEnabled()) [ CD ]
Line_32 $$ if (!idToDescriptorMap.containsKey(pluginId)) -->Line_33 $$ pluginDescriptor.setEnabled(false)[ CD ]
Line_21 $$ final IdeaPluginDescriptor pluginDescriptor = it.next()-->Line_22 $$ checkDependants(pluginDescriptor, new Function<PluginId, IdeaPluginDescriptor>() [ FD ]
Line_22 $$ checkDependants(pluginDescriptor, new Function<PluginId, IdeaPluginDescriptor>() -->Line_26 $$ return idToDescriptorMap.get(pluginId)[ CD ]
Line_5 $$ for (Iterator<? extends IdeaPluginDescriptor> it = result.iterator(); it.hasNext(); ) -->Line_6 $$ final IdeaPluginDescriptor descriptor = it.next()[ CD ]
Line_46 $$ pluginName = descriptor.getName()-->Line_48 $$ errors.add(getDisabledPlugins().contains(pluginId.getIdString()) ? IdeBundle.message("error.required.plugin.disabled", name, pluginName) : IdeBundle.message("error.required.plugin.not.installed", name, pluginName))[ FD ]
Line_6 $$ final IdeaPluginDescriptor descriptor = it.next()-->Line_13 $$ if (descriptor.isEnabled()) [ FD ]
Line_34 $$ if (!pluginId.getIdString().startsWith(MODULE_DEPENDENCY_PREFIX)) -->Line_48 $$ errors.add(getDisabledPlugins().contains(pluginId.getIdString()) ? IdeBundle.message("error.required.plugin.disabled", name, pluginName) : IdeBundle.message("error.required.plugin.not.installed", name, pluginName))[ CD ]
Line_5 $$ for (Iterator<? extends IdeaPluginDescriptor> it = result.iterator(); it.hasNext(); ) -->Line_21 $$ final IdeaPluginDescriptor pluginDescriptor = it.next()[ FD ]
Line_42 $$ if (disabledPluginNames.containsKey(pluginName)) -->Line_43 $$ pluginName = disabledPluginNames.get(pluginName)[ CD ]
Line_2 $$ private static void filterBadPlugins(@NotNull List<? extends IdeaPluginDescriptor> result, @NotNull final Map<String, String> disabledPluginNames, @NotNull final List<String> errors) -->Line_43 $$ pluginName = disabledPluginNames.get(pluginName)[ FD ]
Line_5 $$ for (Iterator<? extends IdeaPluginDescriptor> it = result.iterator(); it.hasNext(); ) -->Line_12 $$ it.remove()[ FD ]
Line_57 $$ if (!disabledPluginIds.isEmpty()) -->Line_75 $$ if (possibleToEnable) [ CD ]
Line_41 $$ pluginName = pluginId.getIdString()-->Line_43 $$ pluginName = disabledPluginNames.get(pluginName)[ FD ]
Line_19 $$ final LinkedHashSet<String> faultyDescriptors = new LinkedHashSet<String>()-->Line_76 $$ errors.add("<a href=\"" + ENABLE + "\">Enable " + (faultyDescriptors.size() == 1 ? disabledPluginNames.get(faultyDescriptors.iterator().next()) : " all necessary plugins") + "</a>")[ FD ]
Line_2 $$ private static void filterBadPlugins(@NotNull List<? extends IdeaPluginDescriptor> result, @NotNull final Map<String, String> disabledPluginNames, @NotNull final List<String> errors) -->Line_48 $$ errors.add(getDisabledPlugins().contains(pluginId.getIdString()) ? IdeBundle.message("error.required.plugin.disabled", name, pluginName) : IdeBundle.message("error.required.plugin.not.installed", name, pluginName))[ FD ]
Line_2 $$ private static void filterBadPlugins(@NotNull List<? extends IdeaPluginDescriptor> result, @NotNull final Map<String, String> disabledPluginNames, @NotNull final List<String> errors) -->Line_20 $$ for (final Iterator<? extends IdeaPluginDescriptor> it = result.iterator(); it.hasNext(); ) [ CD ]
Line_20 $$ for (final Iterator<? extends IdeaPluginDescriptor> it = result.iterator(); it.hasNext(); ) -->Line_21 $$ final IdeaPluginDescriptor pluginDescriptor = it.next()[ FD ]
Line_37 $$ final String name = pluginDescriptor.getName()-->Line_48 $$ errors.add(getDisabledPlugins().contains(pluginId.getIdString()) ? IdeBundle.message("error.required.plugin.disabled", name, pluginName) : IdeBundle.message("error.required.plugin.not.installed", name, pluginName))[ FD ]
Line_3 $$ final Map<PluginId, IdeaPluginDescriptor> idToDescriptorMap = new THashMap<PluginId, IdeaPluginDescriptor>()-->Line_32 $$ if (!idToDescriptorMap.containsKey(pluginId)) [ FD ]
Line_3 $$ final Map<PluginId, IdeaPluginDescriptor> idToDescriptorMap = new THashMap<PluginId, IdeaPluginDescriptor>()-->Line_17 $$ addModulesAsDependents(idToDescriptorMap)[ FD ]
Line_6 $$ final IdeaPluginDescriptor descriptor = it.next()-->Line_46 $$ pluginName = descriptor.getName()[ FD ]
Line_32 $$ if (!idToDescriptorMap.containsKey(pluginId)) -->Line_34 $$ if (!pluginId.getIdString().startsWith(MODULE_DEPENDENCY_PREFIX)) [ CD ]
Line_39 $$ String pluginName-->Line_46 $$ pluginName = descriptor.getName()[ FD ]
Line_38 $$ final IdeaPluginDescriptor descriptor = idToDescriptorMap.get(pluginId)-->Line_70 $$ if (disabledPluginNames.get(descriptor) == null) [ FD ]
Line_39 $$ String pluginName-->Line_41 $$ pluginName = pluginId.getIdString()[ FD ]
Line_2 $$ private static void filterBadPlugins(@NotNull List<? extends IdeaPluginDescriptor> result, @NotNull final Map<String, String> disabledPluginNames, @NotNull final List<String> errors) -->Line_20 $$ for (final Iterator<? extends IdeaPluginDescriptor> it = result.iterator(); it.hasNext(); ) [ FD ]
Line_2 $$ private static void filterBadPlugins(@NotNull List<? extends IdeaPluginDescriptor> result, @NotNull final Map<String, String> disabledPluginNames, @NotNull final List<String> errors) -->Line_80 $$ if (pluginsWithoutIdFound) [ CD ]
Line_3 $$ final Map<PluginId, IdeaPluginDescriptor> idToDescriptorMap = new THashMap<PluginId, IdeaPluginDescriptor>()-->Line_10 $$ if (idToDescriptorMap.containsKey(id)) [ FD ]
Line_3 $$ final Map<PluginId, IdeaPluginDescriptor> idToDescriptorMap = new THashMap<PluginId, IdeaPluginDescriptor>()-->Line_38 $$ final IdeaPluginDescriptor descriptor = idToDescriptorMap.get(pluginId)[ FD ]
Line_61 $$ if (disabledPluginIds.size() == 1) -->Line_62 $$ final PluginId pluginId2Disable = PluginId.getId(disabledPluginIds.iterator().next())[ CD ]
Line_2 $$ private static void filterBadPlugins(@NotNull List<? extends IdeaPluginDescriptor> result, @NotNull final Map<String, String> disabledPluginNames, @NotNull final List<String> errors) -->Line_81 $$ errors.add(IdeBundle.message("error.plugins.without.id.found"))[ FD ]
Line_22 $$ checkDependants(pluginDescriptor, new Function<PluginId, IdeaPluginDescriptor>() -->Line_41 $$ pluginName = pluginId.getIdString()[ FD ]
Line_32 $$ if (!idToDescriptorMap.containsKey(pluginId)) -->Line_50 $$ it.remove()[ CD ]
Line_34 $$ if (!pluginId.getIdString().startsWith(MODULE_DEPENDENCY_PREFIX)) -->Line_39 $$ String pluginName[ CD ]
Line_38 $$ final IdeaPluginDescriptor descriptor = idToDescriptorMap.get(pluginId)-->Line_46 $$ pluginName = descriptor.getName()[ FD ]
Line_22 $$ checkDependants(pluginDescriptor, new Function<PluginId, IdeaPluginDescriptor>() -->Line_26 $$ return idToDescriptorMap.get(pluginId)[ FD ]
Line_2 $$ private static void filterBadPlugins(@NotNull List<? extends IdeaPluginDescriptor> result, @NotNull final Map<String, String> disabledPluginNames, @NotNull final List<String> errors) -->Line_42 $$ if (disabledPluginNames.containsKey(pluginName)) [ FD ]
Line_22 $$ checkDependants(pluginDescriptor, new Function<PluginId, IdeaPluginDescriptor>() -->Line_48 $$ errors.add(getDisabledPlugins().contains(pluginId.getIdString()) ? IdeBundle.message("error.required.plugin.disabled", name, pluginName) : IdeBundle.message("error.required.plugin.not.installed", name, pluginName))[ FD ]
Line_2 $$ private static void filterBadPlugins(@NotNull List<? extends IdeaPluginDescriptor> result, @NotNull final Map<String, String> disabledPluginNames, @NotNull final List<String> errors) -->Line_78 $$ errors.add("<a href=\"" + EDIT + "\">Open plugin manager</a>")[ FD ]
Line_34 $$ if (!pluginId.getIdString().startsWith(MODULE_DEPENDENCY_PREFIX)) -->Line_36 $$ disabledPluginIds.add(pluginDescriptor.getPluginId().getIdString())[ CD ]
Line_6 $$ final IdeaPluginDescriptor descriptor = it.next()-->Line_70 $$ if (disabledPluginNames.get(descriptor) == null) [ FD ]
Line_80 $$ if (pluginsWithoutIdFound) -->Line_81 $$ errors.add(IdeBundle.message("error.plugins.without.id.found"))[ CD ]
Line_22 $$ checkDependants(pluginDescriptor, new Function<PluginId, IdeaPluginDescriptor>() -->Line_38 $$ final IdeaPluginDescriptor descriptor = idToDescriptorMap.get(pluginId)[ FD ]
Line_3 $$ final Map<PluginId, IdeaPluginDescriptor> idToDescriptorMap = new THashMap<PluginId, IdeaPluginDescriptor>()-->Line_63 $$ error += idToDescriptorMap.containsKey(pluginId2Disable) ? idToDescriptorMap.get(pluginId2Disable).getName() : pluginId2Disable.getIdString()[ FD ]
Line_5 $$ for (Iterator<? extends IdeaPluginDescriptor> it = result.iterator(); it.hasNext(); ) -->Line_8 $$ if (id == null) [ CD ]
Line_10 $$ if (idToDescriptorMap.containsKey(id)) -->Line_11 $$ errors.add(IdeBundle.message("message.duplicate.plugin.id") + id)[ CD ]
Line_18 $$ final List<String> disabledPluginIds = new SmartList<String>()-->Line_36 $$ disabledPluginIds.add(pluginDescriptor.getPluginId().getIdString())[ FD ]
Line_2 $$ private static void filterBadPlugins(@NotNull List<? extends IdeaPluginDescriptor> result, @NotNull final Map<String, String> disabledPluginNames, @NotNull final List<String> errors) -->Line_67 $$ errors.add(error + "</a>")[ FD ]
Line_20 $$ for (final Iterator<? extends IdeaPluginDescriptor> it = result.iterator(); it.hasNext(); ) -->Line_21 $$ final IdeaPluginDescriptor pluginDescriptor = it.next()[ CD ]
Line_41 $$ pluginName = pluginId.getIdString()-->Line_46 $$ pluginName = descriptor.getName()[ FD ]
Line_2 $$ private static void filterBadPlugins(@NotNull List<? extends IdeaPluginDescriptor> result, @NotNull final Map<String, String> disabledPluginNames, @NotNull final List<String> errors) -->Line_5 $$ for (Iterator<? extends IdeaPluginDescriptor> it = result.iterator(); it.hasNext(); ) [ CD ]
Line_2 $$ private static void filterBadPlugins(@NotNull List<? extends IdeaPluginDescriptor> result, @NotNull final Map<String, String> disabledPluginNames, @NotNull final List<String> errors) -->Line_76 $$ errors.add("<a href=\"" + ENABLE + "\">Enable " + (faultyDescriptors.size() == 1 ? disabledPluginNames.get(faultyDescriptors.iterator().next()) : " all necessary plugins") + "</a>")[ FD ]
Line_6 $$ final IdeaPluginDescriptor descriptor = it.next()-->Line_14 $$ idToDescriptorMap.put(id, descriptor)[ FD ]
Line_2 $$ private static void filterBadPlugins(@NotNull List<? extends IdeaPluginDescriptor> result, @NotNull final Map<String, String> disabledPluginNames, @NotNull final List<String> errors) -->Line_11 $$ errors.add(IdeBundle.message("message.duplicate.plugin.id") + id)[ FD ]
Line_6 $$ final IdeaPluginDescriptor descriptor = it.next()-->Line_7 $$ final PluginId id = descriptor.getPluginId()[ FD ]
Line_75 $$ if (possibleToEnable) -->Line_76 $$ errors.add("<a href=\"" + ENABLE + "\">Enable " + (faultyDescriptors.size() == 1 ? disabledPluginNames.get(faultyDescriptors.iterator().next()) : " all necessary plugins") + "</a>")[ CD ]
Line_2 $$ private static void filterBadPlugins(@NotNull List<? extends IdeaPluginDescriptor> result, @NotNull final Map<String, String> disabledPluginNames, @NotNull final List<String> errors) -->Line_18 $$ final List<String> disabledPluginIds = new SmartList<String>()[ CD ]
Line_21 $$ final IdeaPluginDescriptor pluginDescriptor = it.next()-->Line_33 $$ pluginDescriptor.setEnabled(false)[ FD ]
Line_18 $$ final List<String> disabledPluginIds = new SmartList<String>()-->Line_57 $$ if (!disabledPluginIds.isEmpty()) [ FD ]
Line_38 $$ final IdeaPluginDescriptor descriptor = idToDescriptorMap.get(pluginId)-->Line_40 $$ if (descriptor == null) [ FD ]
Line_34 $$ if (!pluginId.getIdString().startsWith(MODULE_DEPENDENCY_PREFIX)) -->Line_38 $$ final IdeaPluginDescriptor descriptor = idToDescriptorMap.get(pluginId)[ CD ]
Line_57 $$ if (!disabledPluginIds.isEmpty()) -->Line_78 $$ errors.add("<a href=\"" + EDIT + "\">Open plugin manager</a>")[ CD ]
Line_39 $$ String pluginName-->Line_48 $$ errors.add(getDisabledPlugins().contains(pluginId.getIdString()) ? IdeBundle.message("error.required.plugin.disabled", name, pluginName) : IdeBundle.message("error.required.plugin.not.installed", name, pluginName))[ FD ]
Line_57 $$ if (!disabledPluginIds.isEmpty()) -->Line_67 $$ errors.add(error + "</a>")[ CD ]
Line_2 $$ private static void filterBadPlugins(@NotNull List<? extends IdeaPluginDescriptor> result, @NotNull final Map<String, String> disabledPluginNames, @NotNull final List<String> errors) -->Line_19 $$ final LinkedHashSet<String> faultyDescriptors = new LinkedHashSet<String>()[ CD ]
Line_3 $$ final Map<PluginId, IdeaPluginDescriptor> idToDescriptorMap = new THashMap<PluginId, IdeaPluginDescriptor>()-->Line_14 $$ idToDescriptorMap.put(id, descriptor)[ FD ]
Line_40 $$ if (descriptor == null) -->Line_41 $$ pluginName = pluginId.getIdString()[ CD ]
Line_13 $$ if (descriptor.isEnabled()) -->Line_14 $$ idToDescriptorMap.put(id, descriptor)[ CD ]
Line_18 $$ final List<String> disabledPluginIds = new SmartList<String>()-->Line_62 $$ final PluginId pluginId2Disable = PluginId.getId(disabledPluginIds.iterator().next())[ FD ]
Line_8 $$ if (id == null) -->Line_10 $$ if (idToDescriptorMap.containsKey(id)) [ CD ]
Line_5 $$ for (Iterator<? extends IdeaPluginDescriptor> it = result.iterator(); it.hasNext(); ) -->Line_6 $$ final IdeaPluginDescriptor descriptor = it.next()[ FD ]
Line_39 $$ String pluginName-->Line_42 $$ if (disabledPluginNames.containsKey(pluginName)) [ FD ]
Line_40 $$ if (descriptor == null) -->Line_46 $$ pluginName = descriptor.getName()[ CD ]
Line_20 $$ for (final Iterator<? extends IdeaPluginDescriptor> it = result.iterator(); it.hasNext(); ) -->Line_50 $$ it.remove()[ FD ]
Line_2 $$ private static void filterBadPlugins(@NotNull List<? extends IdeaPluginDescriptor> result, @NotNull final Map<String, String> disabledPluginNames, @NotNull final List<String> errors) -->Line_57 $$ if (!disabledPluginIds.isEmpty()) [ CD ]
Line_7 $$ final PluginId id = descriptor.getPluginId()-->Line_10 $$ if (idToDescriptorMap.containsKey(id)) [ FD ]
Line_4 $$ boolean pluginsWithoutIdFound = false-->Line_9 $$ pluginsWithoutIdFound = true[ FD ]
Line_19 $$ final LinkedHashSet<String> faultyDescriptors = new LinkedHashSet<String>()-->Line_35 $$ faultyDescriptors.add(pluginId.getIdString())[ FD ]
Line_43 $$ pluginName = disabledPluginNames.get(pluginName)-->Line_46 $$ pluginName = descriptor.getName()[ FD ]
Line_22 $$ checkDependants(pluginDescriptor, new Function<PluginId, IdeaPluginDescriptor>() -->Line_53 $$ return true[ CD ]
Line_18 $$ final List<String> disabledPluginIds = new SmartList<String>()-->Line_61 $$ if (disabledPluginIds.size() == 1) [ FD ]
Line_57 $$ if (!disabledPluginIds.isEmpty()) -->Line_61 $$ if (disabledPluginIds.size() == 1) [ CD ]
Line_39 $$ String pluginName-->Line_43 $$ pluginName = disabledPluginNames.get(pluginName)[ FD ]
Line_7 $$ final PluginId id = descriptor.getPluginId()-->Line_8 $$ if (id == null) [ FD ]
Line_8 $$ if (id == null) -->Line_9 $$ pluginsWithoutIdFound = true[ CD ]
Line_2 $$ private static void filterBadPlugins(@NotNull List<? extends IdeaPluginDescriptor> result, @NotNull final Map<String, String> disabledPluginNames, @NotNull final List<String> errors) -->Line_17 $$ addModulesAsDependents(idToDescriptorMap)[ CD ]
Line_5 $$ for (Iterator<? extends IdeaPluginDescriptor> it = result.iterator(); it.hasNext(); ) -->Line_20 $$ for (final Iterator<? extends IdeaPluginDescriptor> it = result.iterator(); it.hasNext(); ) [ FD ]
Line_3 $$ final Map<PluginId, IdeaPluginDescriptor> idToDescriptorMap = new THashMap<PluginId, IdeaPluginDescriptor>()-->Line_26 $$ return idToDescriptorMap.get(pluginId)[ FD ]
Line_43 $$ pluginName = disabledPluginNames.get(pluginName)-->Line_48 $$ errors.add(getDisabledPlugins().contains(pluginId.getIdString()) ? IdeBundle.message("error.required.plugin.disabled", name, pluginName) : IdeBundle.message("error.required.plugin.not.installed", name, pluginName))[ FD ]
Line_2 $$ private static void filterBadPlugins(@NotNull List<? extends IdeaPluginDescriptor> result, @NotNull final Map<String, String> disabledPluginNames, @NotNull final List<String> errors) -->Line_5 $$ for (Iterator<? extends IdeaPluginDescriptor> it = result.iterator(); it.hasNext(); ) [ FD ]
Line_2 $$ private static void filterBadPlugins(@NotNull List<? extends IdeaPluginDescriptor> result, @NotNull final Map<String, String> disabledPluginNames, @NotNull final List<String> errors) -->Line_70 $$ if (disabledPluginNames.get(descriptor) == null) [ FD ]
Line_22 $$ checkDependants(pluginDescriptor, new Function<PluginId, IdeaPluginDescriptor>() -->Line_35 $$ faultyDescriptors.add(pluginId.getIdString())[ FD ]
Line_34 $$ if (!pluginId.getIdString().startsWith(MODULE_DEPENDENCY_PREFIX)) -->Line_40 $$ if (descriptor == null) [ CD ]
Line_41 $$ pluginName = pluginId.getIdString()-->Line_48 $$ errors.add(getDisabledPlugins().contains(pluginId.getIdString()) ? IdeBundle.message("error.required.plugin.disabled", name, pluginName) : IdeBundle.message("error.required.plugin.not.installed", name, pluginName))[ FD ]
Line_5 $$ for (Iterator<? extends IdeaPluginDescriptor> it = result.iterator(); it.hasNext(); ) -->Line_7 $$ final PluginId id = descriptor.getPluginId()[ CD ]
Line_34 $$ if (!pluginId.getIdString().startsWith(MODULE_DEPENDENCY_PREFIX)) -->Line_35 $$ faultyDescriptors.add(pluginId.getIdString())[ CD ]
Line_6 $$ final IdeaPluginDescriptor descriptor = it.next()-->Line_40 $$ if (descriptor == null) [ FD ]
Line_21 $$ final IdeaPluginDescriptor pluginDescriptor = it.next()-->Line_36 $$ disabledPluginIds.add(pluginDescriptor.getPluginId().getIdString())[ FD ]
Line_22 $$ checkDependants(pluginDescriptor, new Function<PluginId, IdeaPluginDescriptor>() -->Line_34 $$ if (!pluginId.getIdString().startsWith(MODULE_DEPENDENCY_PREFIX)) [ FD ]
Line_40 $$ if (descriptor == null) -->Line_42 $$ if (disabledPluginNames.containsKey(pluginName)) [ CD ]
Line_2 $$ private static void filterBadPlugins(@NotNull List<? extends IdeaPluginDescriptor> result, @NotNull final Map<String, String> disabledPluginNames, @NotNull final List<String> errors) -->Line_3 $$ final Map<PluginId, IdeaPluginDescriptor> idToDescriptorMap = new THashMap<PluginId, IdeaPluginDescriptor>()[ CD ]
Line_21 $$ final IdeaPluginDescriptor pluginDescriptor = it.next()-->Line_37 $$ final String name = pluginDescriptor.getName()[ FD ]
Line_22 $$ checkDependants(pluginDescriptor, new Function<PluginId, IdeaPluginDescriptor>() -->Line_32 $$ if (!idToDescriptorMap.containsKey(pluginId)) [ FD ]
Line_32 $$ if (!idToDescriptorMap.containsKey(pluginId)) -->Line_51 $$ return false[ CD ]
Line_34 $$ if (!pluginId.getIdString().startsWith(MODULE_DEPENDENCY_PREFIX)) -->Line_37 $$ final String name = pluginDescriptor.getName()[ CD ]
Line_22 $$ checkDependants(pluginDescriptor, new Function<PluginId, IdeaPluginDescriptor>() -->Line_32 $$ if (!idToDescriptorMap.containsKey(pluginId)) [ CD ]
Line_5 $$ for (Iterator<? extends IdeaPluginDescriptor> it = result.iterator(); it.hasNext(); ) -->Line_50 $$ it.remove()[ FD ]
Line_41 $$ pluginName = pluginId.getIdString()-->Line_42 $$ if (disabledPluginNames.containsKey(pluginName)) [ FD ]
Line_7 $$ final PluginId id = descriptor.getPluginId()-->Line_14 $$ idToDescriptorMap.put(id, descriptor)[ FD ]
