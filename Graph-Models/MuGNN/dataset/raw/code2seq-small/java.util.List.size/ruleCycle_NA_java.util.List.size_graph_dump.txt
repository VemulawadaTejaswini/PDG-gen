Line_15 $$ for (int i = 0; i < path.size(); i++) -->Line_21 $$ if (i == 0) [ CD ]
Line_11 $$ Formatter out = new Formatter()-->Line_22 $$ out.format("%n%s%s", indent, node)[ FD ]
Line_3 $$ List<String> path = new ArrayList<String>()-->Line_8 $$ goal.attachToCycle(path)[ FD ]
Line_16 $$ String node = path.get(i)-->Line_22 $$ out.format("%n%s%s", indent, node)[ FD ]
Line_2 $$ private ConfigurationCycleException ruleCycle(ModelGoal brokenGoal, LinkedList<ModelGoal> queue) -->Line_4 $$ int pos = queue.indexOf(brokenGoal)[ FD ]
Line_20 $$ last = node-->Line_17 $$ if (node.equals(last)) [ FD ]
Line_15 $$ for (int i = 0; i < path.size(); i++) -->Line_20 $$ last = node[ CD ]
Line_15 $$ for (int i = 0; i < path.size(); i++) -->Line_16 $$ String node = path.get(i)[ FD ]
Line_13 $$ String last = null-->Line_17 $$ if (node.equals(last)) [ FD ]
Line_6 $$ while (iterator.hasPrevious()) -->Line_7 $$ ModelGoal goal = iterator.previous()[ CD ]
Line_16 $$ String node = path.get(i)-->Line_17 $$ if (node.equals(last)) [ FD ]
Line_21 $$ if (i == 0) -->Line_25 $$ indent.append("   ")[ CD ]
Line_14 $$ StringBuilder indent = new StringBuilder("")-->Line_25 $$ indent.append("   ")[ FD ]
Line_2 $$ private ConfigurationCycleException ruleCycle(ModelGoal brokenGoal, LinkedList<ModelGoal> queue) -->Line_4 $$ int pos = queue.indexOf(brokenGoal)[ CD ]
Line_2 $$ private ConfigurationCycleException ruleCycle(ModelGoal brokenGoal, LinkedList<ModelGoal> queue) -->Line_3 $$ List<String> path = new ArrayList<String>()[ CD ]
Line_2 $$ private ConfigurationCycleException ruleCycle(ModelGoal brokenGoal, LinkedList<ModelGoal> queue) -->Line_14 $$ StringBuilder indent = new StringBuilder("")[ CD ]
Line_14 $$ StringBuilder indent = new StringBuilder("")-->Line_22 $$ out.format("%n%s%s", indent, node)[ FD ]
Line_15 $$ for (int i = 0; i < path.size(); i++) -->Line_17 $$ if (node.equals(last)) [ CD ]
Line_6 $$ while (iterator.hasPrevious()) -->Line_8 $$ goal.attachToCycle(path)[ CD ]
Line_11 $$ Formatter out = new Formatter()-->Line_12 $$ out.format("A cycle has been detected in model rule dependencies. References forming the cycle:")[ FD ]
Line_16 $$ String node = path.get(i)-->Line_24 $$ out.format("%n%s\\- %s", indent, node)[ FD ]
Line_2 $$ private ConfigurationCycleException ruleCycle(ModelGoal brokenGoal, LinkedList<ModelGoal> queue) -->Line_12 $$ out.format("A cycle has been detected in model rule dependencies. References forming the cycle:")[ CD ]
Line_2 $$ private ConfigurationCycleException ruleCycle(ModelGoal brokenGoal, LinkedList<ModelGoal> queue) -->Line_6 $$ while (iterator.hasPrevious()) [ CD ]
Line_2 $$ private ConfigurationCycleException ruleCycle(ModelGoal brokenGoal, LinkedList<ModelGoal> queue) -->Line_5 $$ ListIterator<ModelGoal> iterator = queue.listIterator(pos + 1)[ FD ]
Line_2 $$ private ConfigurationCycleException ruleCycle(ModelGoal brokenGoal, LinkedList<ModelGoal> queue) -->Line_28 $$ return new ConfigurationCycleException(out.toString())[ CD ]
Line_11 $$ Formatter out = new Formatter()-->Line_24 $$ out.format("%n%s\\- %s", indent, node)[ FD ]
Line_5 $$ ListIterator<ModelGoal> iterator = queue.listIterator(pos + 1)-->Line_6 $$ while (iterator.hasPrevious()) [ FD ]
Line_2 $$ private ConfigurationCycleException ruleCycle(ModelGoal brokenGoal, LinkedList<ModelGoal> queue) -->Line_11 $$ Formatter out = new Formatter()[ CD ]
Line_21 $$ if (i == 0) -->Line_22 $$ out.format("%n%s%s", indent, node)[ CD ]
Line_14 $$ StringBuilder indent = new StringBuilder("")-->Line_24 $$ out.format("%n%s\\- %s", indent, node)[ FD ]
Line_11 $$ Formatter out = new Formatter()-->Line_28 $$ return new ConfigurationCycleException(out.toString())[ FD ]
Line_16 $$ String node = path.get(i)-->Line_20 $$ last = node[ FD ]
Line_21 $$ if (i == 0) -->Line_24 $$ out.format("%n%s\\- %s", indent, node)[ CD ]
Line_3 $$ List<String> path = new ArrayList<String>()-->Line_16 $$ String node = path.get(i)[ FD ]
Line_15 $$ for (int i = 0; i < path.size(); i++) -->Line_16 $$ String node = path.get(i)[ CD ]
Line_13 $$ String last = null-->Line_20 $$ last = node[ FD ]
Line_7 $$ ModelGoal goal = iterator.previous()-->Line_8 $$ goal.attachToCycle(path)[ FD ]
Line_2 $$ private ConfigurationCycleException ruleCycle(ModelGoal brokenGoal, LinkedList<ModelGoal> queue) -->Line_15 $$ for (int i = 0; i < path.size(); i++) [ CD ]
Line_2 $$ private ConfigurationCycleException ruleCycle(ModelGoal brokenGoal, LinkedList<ModelGoal> queue) -->Line_10 $$ brokenGoal.attachToCycle(path)[ FD ]
Line_2 $$ private ConfigurationCycleException ruleCycle(ModelGoal brokenGoal, LinkedList<ModelGoal> queue) -->Line_13 $$ String last = null[ CD ]
Line_15 $$ for (int i = 0; i < path.size(); i++) -->Line_21 $$ if (i == 0) [ FD ]
Line_2 $$ private ConfigurationCycleException ruleCycle(ModelGoal brokenGoal, LinkedList<ModelGoal> queue) -->Line_5 $$ ListIterator<ModelGoal> iterator = queue.listIterator(pos + 1)[ CD ]
Line_3 $$ List<String> path = new ArrayList<String>()-->Line_10 $$ brokenGoal.attachToCycle(path)[ FD ]
Line_3 $$ List<String> path = new ArrayList<String>()-->Line_15 $$ for (int i = 0; i < path.size(); i++) [ FD ]
Line_5 $$ ListIterator<ModelGoal> iterator = queue.listIterator(pos + 1)-->Line_7 $$ ModelGoal goal = iterator.previous()[ FD ]
Line_2 $$ private ConfigurationCycleException ruleCycle(ModelGoal brokenGoal, LinkedList<ModelGoal> queue) -->Line_10 $$ brokenGoal.attachToCycle(path)[ CD ]
