Line_23 $$ return null == job ? null : new FilterJobStory(job) -->Line_26 $$ if (info != null) [ CD ]
Line_25 $$ TaskInfo info = this.job.getTaskInfo(taskType, taskNumber)-->Line_27 $$ info = new MinTaskInfo(info)[ FD ]
Line_3 $$ JobStory job = getNextJobFromTrace()-->Line_4 $$ while (job != null && (job.getOutcome() != Pre21JobHistoryConstants.Values.SUCCESS || job.getSubmissionTime() < 0 || job.getNumberMaps() == 0)) [ FD ]
Line_21 $$ job = getNextJobFromTrace()-->Line_19 $$ LOG.debug("Ignoring job " + job.getJobID() + " from the input trace." + " Reason: " + StringUtils.join(reason, ","))[ FD ]
Line_2 $$ protected JobStory getNextJobFiltered() throws IOException -->Line_3 $$ JobStory job = getNextJobFromTrace()[ CD ]
Line_27 $$ info = new MinTaskInfo(info)-->Line_29 $$ info = new MinTaskInfo(new TaskInfo(0, 0, 0, 0, 0))[ FD ]
Line_5 $$ if (LOG.isDebugEnabled()) -->Line_19 $$ LOG.debug("Ignoring job " + job.getJobID() + " from the input trace." + " Reason: " + StringUtils.join(reason, ","))[ CD ]
Line_3 $$ JobStory job = getNextJobFromTrace()-->Line_8 $$ reason.add("STATE (" + job.getOutcome().name() + ")")[ FD ]
Line_5 $$ if (LOG.isDebugEnabled()) -->Line_13 $$ if (job.getNumberMaps() == 0) [ CD ]
Line_23 $$ return null == job ? null : new FilterJobStory(job) -->Line_25 $$ TaskInfo info = this.job.getTaskInfo(taskType, taskNumber)[ FD ]
Line_23 $$ return null == job ? null : new FilterJobStory(job) -->Line_31 $$ return info[ CD ]
Line_21 $$ job = getNextJobFromTrace()-->Line_11 $$ reason.add("SUBMISSION-TIME (" + job.getSubmissionTime() + ")")[ FD ]
Line_16 $$ if (reason.size() == 0) -->Line_17 $$ reason.add("N/A")[ CD ]
Line_3 $$ JobStory job = getNextJobFromTrace()-->Line_10 $$ if (job.getSubmissionTime() < 0) [ FD ]
Line_13 $$ if (job.getNumberMaps() == 0) -->Line_14 $$ reason.add("ZERO-MAPS-JOB")[ CD ]
Line_10 $$ if (job.getSubmissionTime() < 0) -->Line_11 $$ reason.add("SUBMISSION-TIME (" + job.getSubmissionTime() + ")")[ CD ]
Line_3 $$ JobStory job = getNextJobFromTrace()-->Line_11 $$ reason.add("SUBMISSION-TIME (" + job.getSubmissionTime() + ")")[ FD ]
Line_6 $$ List<String> reason = new ArrayList<String>()-->Line_16 $$ if (reason.size() == 0) [ FD ]
Line_6 $$ List<String> reason = new ArrayList<String>()-->Line_17 $$ reason.add("N/A")[ FD ]
Line_21 $$ job = getNextJobFromTrace()-->Line_13 $$ if (job.getNumberMaps() == 0) [ FD ]
Line_21 $$ job = getNextJobFromTrace()-->Line_4 $$ while (job != null && (job.getOutcome() != Pre21JobHistoryConstants.Values.SUCCESS || job.getSubmissionTime() < 0 || job.getNumberMaps() == 0)) [ FD ]
Line_2 $$ protected JobStory getNextJobFiltered() throws IOException -->Line_4 $$ while (job != null && (job.getOutcome() != Pre21JobHistoryConstants.Values.SUCCESS || job.getSubmissionTime() < 0 || job.getNumberMaps() == 0)) [ CD ]
Line_3 $$ JobStory job = getNextJobFromTrace()-->Line_19 $$ LOG.debug("Ignoring job " + job.getJobID() + " from the input trace." + " Reason: " + StringUtils.join(reason, ","))[ FD ]
Line_5 $$ if (LOG.isDebugEnabled()) -->Line_16 $$ if (reason.size() == 0) [ CD ]
Line_6 $$ List<String> reason = new ArrayList<String>()-->Line_19 $$ LOG.debug("Ignoring job " + job.getJobID() + " from the input trace." + " Reason: " + StringUtils.join(reason, ","))[ FD ]
Line_4 $$ while (job != null && (job.getOutcome() != Pre21JobHistoryConstants.Values.SUCCESS || job.getSubmissionTime() < 0 || job.getNumberMaps() == 0)) -->Line_5 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_23 $$ return null == job ? null : new FilterJobStory(job) -->Line_25 $$ TaskInfo info = this.job.getTaskInfo(taskType, taskNumber)[ CD ]
Line_21 $$ job = getNextJobFromTrace()-->Line_7 $$ if (job.getOutcome() != Pre21JobHistoryConstants.Values.SUCCESS) [ FD ]
Line_6 $$ List<String> reason = new ArrayList<String>()-->Line_8 $$ reason.add("STATE (" + job.getOutcome().name() + ")")[ FD ]
Line_3 $$ JobStory job = getNextJobFromTrace()-->Line_13 $$ if (job.getNumberMaps() == 0) [ FD ]
Line_4 $$ while (job != null && (job.getOutcome() != Pre21JobHistoryConstants.Values.SUCCESS || job.getSubmissionTime() < 0 || job.getNumberMaps() == 0)) -->Line_21 $$ job = getNextJobFromTrace()[ CD ]
Line_5 $$ if (LOG.isDebugEnabled()) -->Line_7 $$ if (job.getOutcome() != Pre21JobHistoryConstants.Values.SUCCESS) [ CD ]
Line_25 $$ TaskInfo info = this.job.getTaskInfo(taskType, taskNumber)-->Line_26 $$ if (info != null) [ FD ]
Line_25 $$ TaskInfo info = this.job.getTaskInfo(taskType, taskNumber)-->Line_29 $$ info = new MinTaskInfo(new TaskInfo(0, 0, 0, 0, 0))[ FD ]
Line_21 $$ job = getNextJobFromTrace()-->Line_10 $$ if (job.getSubmissionTime() < 0) [ FD ]
Line_3 $$ JobStory job = getNextJobFromTrace()-->Line_21 $$ job = getNextJobFromTrace()[ FD ]
Line_2 $$ protected JobStory getNextJobFiltered() throws IOException -->Line_23 $$ return null == job ? null : new FilterJobStory(job) [ CD ]
Line_6 $$ List<String> reason = new ArrayList<String>()-->Line_14 $$ reason.add("ZERO-MAPS-JOB")[ FD ]
Line_3 $$ JobStory job = getNextJobFromTrace()-->Line_7 $$ if (job.getOutcome() != Pre21JobHistoryConstants.Values.SUCCESS) [ FD ]
Line_5 $$ if (LOG.isDebugEnabled()) -->Line_6 $$ List<String> reason = new ArrayList<String>()[ CD ]
Line_6 $$ List<String> reason = new ArrayList<String>()-->Line_11 $$ reason.add("SUBMISSION-TIME (" + job.getSubmissionTime() + ")")[ FD ]
Line_7 $$ if (job.getOutcome() != Pre21JobHistoryConstants.Values.SUCCESS) -->Line_8 $$ reason.add("STATE (" + job.getOutcome().name() + ")")[ CD ]
Line_26 $$ if (info != null) -->Line_27 $$ info = new MinTaskInfo(info)[ CD ]
Line_26 $$ if (info != null) -->Line_29 $$ info = new MinTaskInfo(new TaskInfo(0, 0, 0, 0, 0))[ CD ]
Line_5 $$ if (LOG.isDebugEnabled()) -->Line_10 $$ if (job.getSubmissionTime() < 0) [ CD ]
Line_21 $$ job = getNextJobFromTrace()-->Line_8 $$ reason.add("STATE (" + job.getOutcome().name() + ")")[ FD ]
