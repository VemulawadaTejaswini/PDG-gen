Line_68 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_116 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_60 $$ DatagramHelper.setCompletionTypes(requestDatagram, EnumSet.of(CompletionType.REPLIED))[ FD ]
Line_8 $$ long sequenceId = 100-->Line_88 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_142 $$ IntrabandTestUtil.assertMessageStartWith(logRecords.get(0), "Unable to dispatch")[ FD ]
Line_115 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_142 $$ IntrabandTestUtil.assertMessageStartWith(logRecords.get(0), "Unable to dispatch")[ FD ]
Line_116 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_120 $$ DatagramHelper.writeTo(requestDatagram, gatheringByteChannel)[ FD ]
Line_84 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_89 $$ DatagramHelper.setTimeout(requestDatagram, 10000)[ FD ]
Line_68 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_100 $$ DatagramHelper.setAckRequest(requestDatagram)[ FD ]
Line_83 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_115 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_104 $$ DatagramHelper.writeTo(requestDatagram, gatheringByteChannel)[ FD ]
Line_5 $$ GatheringByteChannel gatheringByteChannel = writePipe.sink()-->Line_34 $$ DatagramHelper.writeTo(DatagramHelper.createACKResponseDatagram(sequenceId), gatheringByteChannel)[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_61 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_98 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_124 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_67 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_125 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)[ FD ]
Line_68 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_89 $$ DatagramHelper.setTimeout(requestDatagram, 10000)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_115 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_116 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_127 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.WARNING)) -->Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_19 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_113 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_64 $$ DatagramHelper.writeTo(Datagram.createResponseDatagram(requestDatagram, _data), gatheringByteChannel)[ FD ]
Line_84 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_88 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_19 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_98 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_19 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_125 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)[ FD ]
Line_126 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_127 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_62 $$ DatagramHelper.setTimeout(requestDatagram, 10000)[ FD ]
Line_98 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_125 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)[ FD ]
Line_84 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_101 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_132 $$ DatagramHelper.writeTo(requestDatagram, gatheringByteChannel)[ FD ]
Line_68 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_90 $$ BaseIntrabandHelper.addResponseWaitingDatagram(_selectorIntraband, requestDatagram)[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_73 $$ DatagramHelper.setTimeout(requestDatagram, 10000)[ FD ]
Line_84 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_132 $$ DatagramHelper.writeTo(requestDatagram, gatheringByteChannel)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_17 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_139 $$ dataByteBuffer = receiveDatagram.getDataByteBuffer()-->Line_140 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_58 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_70 $$ recordCompletionHandler = new RecordCompletionHandler()[ FD ]
Line_108 $$ Datagram ackResponseDatagram = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_111 $$ ByteBuffer dataByteBuffer = ackResponseDatagram.getDataByteBuffer()[ FD ]
Line_67 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_142 $$ IntrabandTestUtil.assertMessageStartWith(logRecords.get(0), "Unable to dispatch")[ FD ]
Line_99 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_132 $$ DatagramHelper.writeTo(requestDatagram, gatheringByteChannel)[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_66 $$ Assert.assertSame(DatagramHelper.getAttachment(requestDatagram), recordCompletionHandler.getAttachment())[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_71 $$ DatagramHelper.setCompletionHandler(requestDatagram, recordCompletionHandler)[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_99 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_19 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_26 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_83 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_83 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_98 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_37 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_114 $$ IntrabandTestUtil.assertMessageStartWith(logRecords.get(0), "Dropped ownerless request ")[ FD ]
Line_29 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_65 $$ recordCompletionHandler.waitUntilReplied()[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_116 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_115 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_126 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_68 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_88 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_5 $$ GatheringByteChannel gatheringByteChannel = writePipe.sink()-->Line_132 $$ DatagramHelper.writeTo(requestDatagram, gatheringByteChannel)[ FD ]
Line_3 $$ Pipe readPipe = Pipe.open()-->Line_6 $$ ScatteringByteChannel scatteringByteChannel = readPipe.source()[ FD ]
Line_68 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_72 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_8 $$ long sequenceId = 100-->Line_127 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_87 $$ DatagramHelper.setCompletionHandler(requestDatagram, recordCompletionHandler)[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_62 $$ DatagramHelper.setTimeout(requestDatagram, 10000)[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_67 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_98 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_114 $$ IntrabandTestUtil.assertMessageStartWith(logRecords.get(0), "Dropped ownerless request ")[ FD ]
Line_37 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_67 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_111 $$ ByteBuffer dataByteBuffer = ackResponseDatagram.getDataByteBuffer()-->Line_112 $$ Assert.assertEquals(0, dataByteBuffer.capacity())[ FD ]
Line_19 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_115 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_37 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_141 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_85 $$ DatagramHelper.setCompletionTypes(requestDatagram, EnumSet.noneOf(CompletionType.class))[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_81 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_72 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_69 $$ DatagramHelper.setCompletionTypes(requestDatagram, EnumSet.noneOf(CompletionType.class))[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_124 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_101 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_57 $$ DatagramHelper.setAttachment(requestDatagram, new Object())[ FD ]
Line_19 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_114 $$ IntrabandTestUtil.assertMessageStartWith(logRecords.get(0), "Dropped ownerless request ")[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_77 $$ DatagramHelper.writeTo(Datagram.createResponseDatagram(requestDatagram, _data), gatheringByteChannel)[ FD ]
Line_67 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_141 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_101 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_83 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_114 $$ IntrabandTestUtil.assertMessageStartWith(logRecords.get(0), "Dropped ownerless request ")[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_51 $$ DatagramHelper.writeTo(Datagram.createResponseDatagram(requestDatagram, _data), gatheringByteChannel)[ FD ]
Line_84 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_127 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_141 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_29 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_58 $$ recordCompletionHandler = new RecordCompletionHandler()[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_69 $$ DatagramHelper.setCompletionTypes(requestDatagram, EnumSet.noneOf(CompletionType.class))[ FD ]
Line_37 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_82 $$ IntrabandTestUtil.assertMessageStartWith(logRecords.get(0), "Dropped unconcerned response ")[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_88 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_60 $$ DatagramHelper.setCompletionTypes(requestDatagram, EnumSet.of(CompletionType.REPLIED))[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_82 $$ IntrabandTestUtil.assertMessageStartWith(logRecords.get(0), "Dropped unconcerned response ")[ FD ]
Line_5 $$ GatheringByteChannel gatheringByteChannel = writePipe.sink()-->Line_22 $$ DatagramHelper.writeTo(DatagramHelper.createACKResponseDatagram(sequenceId), gatheringByteChannel)[ FD ]
Line_67 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_81 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.WARNING)) -->Line_115 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_84 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_100 $$ DatagramHelper.setAckRequest(requestDatagram)[ FD ]
Line_2 $$ public void testReceiveDatagram() throws Exception -->Line_6 $$ ScatteringByteChannel scatteringByteChannel = readPipe.source()[ CD ]
Line_8 $$ long sequenceId = 100-->Line_22 $$ DatagramHelper.writeTo(DatagramHelper.createACKResponseDatagram(sequenceId), gatheringByteChannel)[ FD ]
Line_128 $$ RecordDatagramReceiveHandler recordDatagramReceiveHandler = new RecordDatagramReceiveHandler()-->Line_136 $$ Datagram receiveDatagram = recordDatagramReceiveHandler.getReceiveDatagram()[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_116 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_5 $$ GatheringByteChannel gatheringByteChannel = writePipe.sink()-->Line_104 $$ DatagramHelper.writeTo(requestDatagram, gatheringByteChannel)[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_104 $$ DatagramHelper.writeTo(requestDatagram, gatheringByteChannel)[ FD ]
Line_7 $$ SelectionKeyRegistrationReference registrationReference = (SelectionKeyRegistrationReference) _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())-->Line_143 $$ _unregisterChannels(registrationReference)[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_100 $$ DatagramHelper.setAckRequest(requestDatagram)[ FD ]
Line_83 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_124 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_68 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_132 $$ DatagramHelper.writeTo(requestDatagram, gatheringByteChannel)[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_73 $$ DatagramHelper.setTimeout(requestDatagram, 10000)[ FD ]
Line_6 $$ ScatteringByteChannel scatteringByteChannel = readPipe.source()-->Line_145 $$ scatteringByteChannel.close()[ FD ]
Line_8 $$ long sequenceId = 100-->Line_117 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_98 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_142 $$ IntrabandTestUtil.assertMessageStartWith(logRecords.get(0), "Unable to dispatch")[ FD ]
Line_99 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_117 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_19 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_111 $$ ByteBuffer dataByteBuffer = ackResponseDatagram.getDataByteBuffer()-->Line_139 $$ dataByteBuffer = receiveDatagram.getDataByteBuffer()[ FD ]
Line_5 $$ GatheringByteChannel gatheringByteChannel = writePipe.sink()-->Line_77 $$ DatagramHelper.writeTo(Datagram.createResponseDatagram(requestDatagram, _data), gatheringByteChannel)[ FD ]
Line_8 $$ long sequenceId = 100-->Line_72 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_5 $$ GatheringByteChannel gatheringByteChannel = writePipe.sink()-->Line_93 $$ DatagramHelper.writeTo(Datagram.createResponseDatagram(requestDatagram, _data), gatheringByteChannel)[ FD ]
Line_84 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_90 $$ BaseIntrabandHelper.addResponseWaitingDatagram(_selectorIntraband, requestDatagram)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_44 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_84 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_93 $$ DatagramHelper.writeTo(Datagram.createResponseDatagram(requestDatagram, _data), gatheringByteChannel)[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_51 $$ DatagramHelper.writeTo(Datagram.createResponseDatagram(requestDatagram, _data), gatheringByteChannel)[ FD ]
Line_115 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_125 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_114 $$ IntrabandTestUtil.assertMessageStartWith(logRecords.get(0), "Dropped ownerless request ")[ FD ]
Line_126 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_132 $$ DatagramHelper.writeTo(requestDatagram, gatheringByteChannel)[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_117 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_19 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_45 $$ IntrabandTestUtil.assertMessageStartWith(logRecords.get(0), "Dropped ownerless response ")[ FD ]
Line_29 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_36 $$ Assert.assertSame(DatagramHelper.getAttachment(requestDatagram), recordCompletionHandler.getAttachment())[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.WARNING)) -->Line_19 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_77 $$ DatagramHelper.writeTo(Datagram.createResponseDatagram(requestDatagram, _data), gatheringByteChannel)[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_72 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_84 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_85 $$ DatagramHelper.setCompletionTypes(requestDatagram, EnumSet.noneOf(CompletionType.class))[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_132 $$ DatagramHelper.writeTo(requestDatagram, gatheringByteChannel)[ FD ]
Line_67 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_115 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_30 $$ DatagramHelper.setCompletionHandler(requestDatagram, recordCompletionHandler)[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_68 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_63 $$ BaseIntrabandHelper.addResponseWaitingDatagram(_selectorIntraband, requestDatagram)[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_120 $$ DatagramHelper.writeTo(requestDatagram, gatheringByteChannel)[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_60 $$ DatagramHelper.setCompletionTypes(requestDatagram, EnumSet.of(CompletionType.REPLIED))[ FD ]
Line_68 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_120 $$ DatagramHelper.writeTo(requestDatagram, gatheringByteChannel)[ FD ]
Line_98 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_141 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_127 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_81 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_74 $$ BaseIntrabandHelper.addResponseWaitingDatagram(_selectorIntraband, requestDatagram)[ FD ]
Line_19 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_142 $$ IntrabandTestUtil.assertMessageStartWith(logRecords.get(0), "Unable to dispatch")[ FD ]
Line_8 $$ long sequenceId = 100-->Line_31 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_29 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_87 $$ DatagramHelper.setCompletionHandler(requestDatagram, recordCompletionHandler)[ FD ]
Line_67 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_82 $$ IntrabandTestUtil.assertMessageStartWith(logRecords.get(0), "Dropped unconcerned response ")[ FD ]
Line_67 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_113 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_29 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_86 $$ recordCompletionHandler = new RecordCompletionHandler()[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_84 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_29 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_59 $$ DatagramHelper.setCompletionHandler(requestDatagram, recordCompletionHandler)[ FD ]
Line_128 $$ RecordDatagramReceiveHandler recordDatagramReceiveHandler = new RecordDatagramReceiveHandler()-->Line_129 $$ _selectorIntraband.registerDatagramReceiveHandler(_TYPE, recordDatagramReceiveHandler)[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_116 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_117 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_87 $$ DatagramHelper.setCompletionHandler(requestDatagram, recordCompletionHandler)[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_57 $$ DatagramHelper.setAttachment(requestDatagram, new Object())[ FD ]
Line_5 $$ GatheringByteChannel gatheringByteChannel = writePipe.sink()-->Line_144 $$ gatheringByteChannel.close()[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_100 $$ DatagramHelper.setAckRequest(requestDatagram)[ FD ]
Line_99 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_100 $$ DatagramHelper.setAckRequest(requestDatagram)[ FD ]
Line_37 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_115 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_83 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_88 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_99 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_19 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_44 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_97 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_4 $$ Pipe writePipe = Pipe.open()-->Line_7 $$ SelectionKeyRegistrationReference registrationReference = (SelectionKeyRegistrationReference) _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_19 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_84 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_87 $$ DatagramHelper.setCompletionHandler(requestDatagram, recordCompletionHandler)[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_113 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_108 $$ Datagram ackResponseDatagram = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_110 $$ Assert.assertTrue(DatagramHelper.isAckResponse(ackResponseDatagram))[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_74 $$ BaseIntrabandHelper.addResponseWaitingDatagram(_selectorIntraband, requestDatagram)[ FD ]
Line_37 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_83 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_113 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_37 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_44 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_29 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_35 $$ recordCompletionHandler.waitUntilDelivered()[ FD ]
Line_68 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_69 $$ DatagramHelper.setCompletionTypes(requestDatagram, EnumSet.noneOf(CompletionType.class))[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_100 $$ DatagramHelper.setAckRequest(requestDatagram)[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.WARNING)) -->Line_125 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_101 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_68 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_99 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_111 $$ ByteBuffer dataByteBuffer = ackResponseDatagram.getDataByteBuffer()-->Line_140 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_83 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_141 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_115 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_141 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_2 $$ public void testReceiveDatagram() throws Exception -->Line_4 $$ Pipe writePipe = Pipe.open()[ CD ]
Line_68 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_84 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_83 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_125 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_120 $$ DatagramHelper.writeTo(requestDatagram, gatheringByteChannel)[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_62 $$ DatagramHelper.setTimeout(requestDatagram, 10000)[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_77 $$ DatagramHelper.writeTo(Datagram.createResponseDatagram(requestDatagram, _data), gatheringByteChannel)[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_93 $$ DatagramHelper.writeTo(Datagram.createResponseDatagram(requestDatagram, _data), gatheringByteChannel)[ FD ]
Line_37 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_113 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_58 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_65 $$ recordCompletionHandler.waitUntilReplied()[ FD ]
Line_37 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_125 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)[ FD ]
Line_2 $$ public void testReceiveDatagram() throws Exception -->Line_5 $$ GatheringByteChannel gatheringByteChannel = writePipe.sink()[ CD ]
Line_68 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_77 $$ DatagramHelper.writeTo(Datagram.createResponseDatagram(requestDatagram, _data), gatheringByteChannel)[ FD ]
Line_136 $$ Datagram receiveDatagram = recordDatagramReceiveHandler.getReceiveDatagram()-->Line_137 $$ Assert.assertEquals(sequenceId, DatagramHelper.getSequenceId(receiveDatagram))[ FD ]
Line_19 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_55 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.WARNING)) -->Line_83 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_37 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_97 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_99 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_104 $$ DatagramHelper.writeTo(requestDatagram, gatheringByteChannel)[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_50 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_58 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_59 $$ DatagramHelper.setCompletionHandler(requestDatagram, recordCompletionHandler)[ FD ]
Line_19 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_81 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_98 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_125 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_127 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_84 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_120 $$ DatagramHelper.writeTo(requestDatagram, gatheringByteChannel)[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_72 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_68 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_87 $$ DatagramHelper.setCompletionHandler(requestDatagram, recordCompletionHandler)[ FD ]
Line_116 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_126 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_6 $$ ScatteringByteChannel scatteringByteChannel = readPipe.source()-->Line_108 $$ Datagram ackResponseDatagram = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)[ FD ]
Line_68 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_85 $$ DatagramHelper.setCompletionTypes(requestDatagram, EnumSet.noneOf(CompletionType.class))[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_97 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_67 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_97 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_37 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.WARNING)) -->Line_37 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_68 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_117 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_40 $$ DatagramHelper.writeTo(Datagram.createResponseDatagram(requestDatagram, _data), gatheringByteChannel)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_18 $$ IntrabandTestUtil.assertMessageStartWith(logRecords.get(0), "Dropped ownerless ACK response ")[ FD ]
Line_98 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_115 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_68 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_127 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_8 $$ long sequenceId = 100-->Line_109 $$ Assert.assertEquals(sequenceId, DatagramHelper.getSequenceId(ackResponseDatagram))[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_125 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)[ FD ]
Line_99 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_126 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_66 $$ Assert.assertSame(DatagramHelper.getAttachment(requestDatagram), recordCompletionHandler.getAttachment())[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_84 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_5 $$ GatheringByteChannel gatheringByteChannel = writePipe.sink()-->Line_13 $$ DatagramHelper.writeTo(DatagramHelper.createACKResponseDatagram(sequenceId), gatheringByteChannel)[ FD ]
Line_68 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_101 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_37 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_124 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_132 $$ DatagramHelper.writeTo(requestDatagram, gatheringByteChannel)[ FD ]
Line_5 $$ GatheringByteChannel gatheringByteChannel = writePipe.sink()-->Line_40 $$ DatagramHelper.writeTo(Datagram.createResponseDatagram(requestDatagram, _data), gatheringByteChannel)[ FD ]
Line_8 $$ long sequenceId = 100-->Line_61 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_55 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_63 $$ BaseIntrabandHelper.addResponseWaitingDatagram(_selectorIntraband, requestDatagram)[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.WARNING)) -->Line_67 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_116 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_132 $$ DatagramHelper.writeTo(requestDatagram, gatheringByteChannel)[ FD ]
Line_5 $$ GatheringByteChannel gatheringByteChannel = writePipe.sink()-->Line_51 $$ DatagramHelper.writeTo(Datagram.createResponseDatagram(requestDatagram, _data), gatheringByteChannel)[ FD ]
Line_29 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_66 $$ Assert.assertSame(DatagramHelper.getAttachment(requestDatagram), recordCompletionHandler.getAttachment())[ FD ]
Line_136 $$ Datagram receiveDatagram = recordDatagramReceiveHandler.getReceiveDatagram()-->Line_139 $$ dataByteBuffer = receiveDatagram.getDataByteBuffer()[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_59 $$ DatagramHelper.setCompletionHandler(requestDatagram, recordCompletionHandler)[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_89 $$ DatagramHelper.setTimeout(requestDatagram, 10000)[ FD ]
Line_67 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_98 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_61 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_117 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_37 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_45 $$ IntrabandTestUtil.assertMessageStartWith(logRecords.get(0), "Dropped ownerless response ")[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_59 $$ DatagramHelper.setCompletionHandler(requestDatagram, recordCompletionHandler)[ FD ]
Line_125 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)-->Line_141 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_90 $$ BaseIntrabandHelper.addResponseWaitingDatagram(_selectorIntraband, requestDatagram)[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_31 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_85 $$ DatagramHelper.setCompletionTypes(requestDatagram, EnumSet.noneOf(CompletionType.class))[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_142 $$ IntrabandTestUtil.assertMessageStartWith(logRecords.get(0), "Unable to dispatch")[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_67 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_89 $$ DatagramHelper.setTimeout(requestDatagram, 10000)[ FD ]
Line_108 $$ Datagram ackResponseDatagram = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_109 $$ Assert.assertEquals(sequenceId, DatagramHelper.getSequenceId(ackResponseDatagram))[ FD ]
Line_84 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_117 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_2 $$ public void testReceiveDatagram() throws Exception -->Line_7 $$ SelectionKeyRegistrationReference registrationReference = (SelectionKeyRegistrationReference) _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())[ CD ]
Line_115 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_124 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_5 $$ GatheringByteChannel gatheringByteChannel = writePipe.sink()-->Line_64 $$ DatagramHelper.writeTo(Datagram.createResponseDatagram(requestDatagram, _data), gatheringByteChannel)[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_84 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_5 $$ GatheringByteChannel gatheringByteChannel = writePipe.sink()-->Line_120 $$ DatagramHelper.writeTo(requestDatagram, gatheringByteChannel)[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.WARNING)) -->Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_68 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_71 $$ DatagramHelper.setCompletionHandler(requestDatagram, recordCompletionHandler)[ FD ]
Line_8 $$ long sequenceId = 100-->Line_34 $$ DatagramHelper.writeTo(DatagramHelper.createACKResponseDatagram(sequenceId), gatheringByteChannel)[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_28 $$ DatagramHelper.setAttachment(requestDatagram, new Object())[ FD ]
Line_68 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_104 $$ DatagramHelper.writeTo(requestDatagram, gatheringByteChannel)[ FD ]
Line_68 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_93 $$ DatagramHelper.writeTo(Datagram.createResponseDatagram(requestDatagram, _data), gatheringByteChannel)[ FD ]
Line_84 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_104 $$ DatagramHelper.writeTo(requestDatagram, gatheringByteChannel)[ FD ]
Line_68 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_126 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_29 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_70 $$ recordCompletionHandler = new RecordCompletionHandler()[ FD ]
Line_84 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_116 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_99 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_120 $$ DatagramHelper.writeTo(requestDatagram, gatheringByteChannel)[ FD ]
Line_37 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_81 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_93 $$ DatagramHelper.writeTo(Datagram.createResponseDatagram(requestDatagram, _data), gatheringByteChannel)[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_85 $$ DatagramHelper.setCompletionTypes(requestDatagram, EnumSet.noneOf(CompletionType.class))[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_120 $$ DatagramHelper.writeTo(requestDatagram, gatheringByteChannel)[ FD ]
Line_70 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_71 $$ DatagramHelper.setCompletionHandler(requestDatagram, recordCompletionHandler)[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.WARNING)) -->Line_98 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_93 $$ DatagramHelper.writeTo(Datagram.createResponseDatagram(requestDatagram, _data), gatheringByteChannel)[ FD ]
Line_136 $$ Datagram receiveDatagram = recordDatagramReceiveHandler.getReceiveDatagram()-->Line_138 $$ Assert.assertEquals(_TYPE, receiveDatagram.getType())[ FD ]
Line_86 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_87 $$ DatagramHelper.setCompletionHandler(requestDatagram, recordCompletionHandler)[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_71 $$ DatagramHelper.setCompletionHandler(requestDatagram, recordCompletionHandler)[ FD ]
Line_84 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_126 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_33 $$ BaseIntrabandHelper.addResponseWaitingDatagram(_selectorIntraband, requestDatagram)[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_36 $$ Assert.assertSame(DatagramHelper.getAttachment(requestDatagram), recordCompletionHandler.getAttachment())[ FD ]
Line_37 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_69 $$ DatagramHelper.setCompletionTypes(requestDatagram, EnumSet.noneOf(CompletionType.class))[ FD ]
Line_83 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_97 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_61 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_70 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_86 $$ recordCompletionHandler = new RecordCompletionHandler()[ FD ]
Line_67 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_114 $$ IntrabandTestUtil.assertMessageStartWith(logRecords.get(0), "Dropped ownerless request ")[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_59 $$ DatagramHelper.setCompletionHandler(requestDatagram, recordCompletionHandler)[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_126 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_58 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_86 $$ recordCompletionHandler = new RecordCompletionHandler()[ FD ]
Line_58 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_71 $$ DatagramHelper.setCompletionHandler(requestDatagram, recordCompletionHandler)[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_68 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_8 $$ long sequenceId = 100-->Line_137 $$ Assert.assertEquals(sequenceId, DatagramHelper.getSequenceId(receiveDatagram))[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_45 $$ IntrabandTestUtil.assertMessageStartWith(logRecords.get(0), "Dropped ownerless response ")[ FD ]
Line_19 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_67 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_8 $$ long sequenceId = 100-->Line_101 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_99 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_116 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_98 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_113 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_58 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_66 $$ Assert.assertSame(DatagramHelper.getAttachment(requestDatagram), recordCompletionHandler.getAttachment())[ FD ]
Line_58 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_87 $$ DatagramHelper.setCompletionHandler(requestDatagram, recordCompletionHandler)[ FD ]
Line_67 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_83 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_67 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_124 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_83 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_113 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_68 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_84 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_99 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_114 $$ IntrabandTestUtil.assertMessageStartWith(logRecords.get(0), "Dropped ownerless request ")[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_26 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_55 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_64 $$ DatagramHelper.writeTo(Datagram.createResponseDatagram(requestDatagram, _data), gatheringByteChannel)[ FD ]
Line_19 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_83 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_8 $$ long sequenceId = 100-->Line_13 $$ DatagramHelper.writeTo(DatagramHelper.createACKResponseDatagram(sequenceId), gatheringByteChannel)[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_87 $$ DatagramHelper.setCompletionHandler(requestDatagram, recordCompletionHandler)[ FD ]
Line_4 $$ Pipe writePipe = Pipe.open()-->Line_5 $$ GatheringByteChannel gatheringByteChannel = writePipe.sink()[ FD ]
Line_99 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_101 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_124 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_32 $$ DatagramHelper.setTimeout(requestDatagram, 10000)[ FD ]
Line_19 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_97 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_73 $$ DatagramHelper.setTimeout(requestDatagram, 10000)[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_104 $$ DatagramHelper.writeTo(requestDatagram, gatheringByteChannel)[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_99 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_29 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_30 $$ DatagramHelper.setCompletionHandler(requestDatagram, recordCompletionHandler)[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_57 $$ DatagramHelper.setAttachment(requestDatagram, new Object())[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_29 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_71 $$ DatagramHelper.setCompletionHandler(requestDatagram, recordCompletionHandler)[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_50 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_68 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_74 $$ BaseIntrabandHelper.addResponseWaitingDatagram(_selectorIntraband, requestDatagram)[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_88 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_19 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_124 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_90 $$ BaseIntrabandHelper.addResponseWaitingDatagram(_selectorIntraband, requestDatagram)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_98 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_63 $$ BaseIntrabandHelper.addResponseWaitingDatagram(_selectorIntraband, requestDatagram)[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_89 $$ DatagramHelper.setTimeout(requestDatagram, 10000)[ FD ]
Line_37 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_55 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_19 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_37 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_68 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_73 $$ DatagramHelper.setTimeout(requestDatagram, 10000)[ FD ]
Line_116 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_117 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_2 $$ public void testReceiveDatagram() throws Exception -->Line_8 $$ long sequenceId = 100[ CD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_71 $$ DatagramHelper.setCompletionHandler(requestDatagram, recordCompletionHandler)[ FD ]
Line_70 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_87 $$ DatagramHelper.setCompletionHandler(requestDatagram, recordCompletionHandler)[ FD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_127 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_90 $$ BaseIntrabandHelper.addResponseWaitingDatagram(_selectorIntraband, requestDatagram)[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_141 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_56 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_126 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_125 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)-->Line_142 $$ IntrabandTestUtil.assertMessageStartWith(logRecords.get(0), "Unable to dispatch")[ FD ]
Line_19 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_82 $$ IntrabandTestUtil.assertMessageStartWith(logRecords.get(0), "Dropped unconcerned response ")[ FD ]
Line_19 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_141 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_83 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_142 $$ IntrabandTestUtil.assertMessageStartWith(logRecords.get(0), "Unable to dispatch")[ FD ]
Line_3 $$ Pipe readPipe = Pipe.open()-->Line_7 $$ SelectionKeyRegistrationReference registrationReference = (SelectionKeyRegistrationReference) _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())[ FD ]
Line_37 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_98 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_64 $$ DatagramHelper.writeTo(Datagram.createResponseDatagram(requestDatagram, _data), gatheringByteChannel)[ FD ]
Line_37 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_142 $$ IntrabandTestUtil.assertMessageStartWith(logRecords.get(0), "Unable to dispatch")[ FD ]
Line_49 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_66 $$ Assert.assertSame(DatagramHelper.getAttachment(requestDatagram), recordCompletionHandler.getAttachment())[ FD ]
Line_99 $$ requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_127 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_82 $$ IntrabandTestUtil.assertMessageStartWith(logRecords.get(0), "Dropped unconcerned response ")[ FD ]
Line_8 $$ long sequenceId = 100-->Line_50 $$ DatagramHelper.setSequenceId(requestDatagram, sequenceId)[ FD ]
Line_2 $$ public void testReceiveDatagram() throws Exception -->Line_3 $$ Pipe readPipe = Pipe.open()[ CD ]
Line_27 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_74 $$ BaseIntrabandHelper.addResponseWaitingDatagram(_selectorIntraband, requestDatagram)[ FD ]
