Line_6 $$ HibernateDaoSupport dao = new HibernateDaoSupport() -->Line_15 $$ assertEquals("Correct SessionFactory", sf, dao.getSessionFactory())[ FD ]
Line_4 $$ SessionFactory sf = mock(SessionFactory.class)-->Line_16 $$ assertEquals("Correct HibernateTemplate", sf, dao.getHibernateTemplate().getSessionFactory())[ FD ]
Line_6 $$ HibernateDaoSupport dao = new HibernateDaoSupport() -->Line_10 $$ test.add("test")[ CD ]
Line_4 $$ SessionFactory sf = mock(SessionFactory.class)-->Line_13 $$ dao.setSessionFactory(sf)[ FD ]
Line_4 $$ SessionFactory sf = mock(SessionFactory.class)-->Line_15 $$ assertEquals("Correct SessionFactory", sf, dao.getSessionFactory())[ FD ]
Line_6 $$ HibernateDaoSupport dao = new HibernateDaoSupport() -->Line_14 $$ dao.afterPropertiesSet()[ FD ]
Line_6 $$ HibernateDaoSupport dao = new HibernateDaoSupport() -->Line_13 $$ dao.setSessionFactory(sf)[ FD ]
Line_6 $$ HibernateDaoSupport dao = new HibernateDaoSupport() -->Line_16 $$ assertEquals("Correct HibernateTemplate", sf, dao.getHibernateTemplate().getSessionFactory())[ FD ]
Line_5 $$ final List test = new ArrayList()-->Line_17 $$ assertEquals("initDao called", test.size(), 1)[ FD ]
Line_5 $$ final List test = new ArrayList()-->Line_10 $$ test.add("test")[ FD ]
