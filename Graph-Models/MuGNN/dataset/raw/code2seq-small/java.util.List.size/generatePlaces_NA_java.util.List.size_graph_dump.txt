Line_7 $$ for (int i = 0, patternStringSize = patternString.size(); i < patternStringSize; i++) -->Line_8 $$ String text = patternString.get(i)[ FD ]
Line_7 $$ for (int i = 0, patternStringSize = patternString.size(); i < patternStringSize; i++) -->Line_8 $$ String text = patternString.get(i)[ CD ]
Line_7 $$ for (int i = 0, patternStringSize = patternString.size(); i < patternStringSize; i++) -->Line_9 $$ places[i] = new InjectionPlace(compiler.createElementPattern(text, getDisplayName()), true)[ CD ]
Line_4 $$ final PatternCompiler<PsiElement> compiler = getCompiler()-->Line_9 $$ places[i] = new InjectionPlace(compiler.createElementPattern(text, getDisplayName()), true)[ FD ]
Line_5 $$ List<String> patternString = getPatternString(this)-->Line_6 $$ InjectionPlace[] places = InjectionPlace.ARRAY_FACTORY.create(patternString.size())[ FD ]
Line_6 $$ InjectionPlace[] places = InjectionPlace.ARRAY_FACTORY.create(patternString.size())-->Line_11 $$ setInjectionPlaces(places)[ FD ]
Line_5 $$ List<String> patternString = getPatternString(this)-->Line_7 $$ for (int i = 0, patternStringSize = patternString.size(); i < patternStringSize; i++) [ FD ]
Line_5 $$ List<String> patternString = getPatternString(this)-->Line_8 $$ String text = patternString.get(i)[ FD ]
Line_8 $$ String text = patternString.get(i)-->Line_9 $$ places[i] = new InjectionPlace(compiler.createElementPattern(text, getDisplayName()), true)[ FD ]
