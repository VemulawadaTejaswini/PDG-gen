Line_124 $$ if (left < right) -->Line_125 $$ constants.get(fragment_no - 1).append(full_text.subSequence(left, right))[ CD ]
Line_17 $$ boolean hasPrefix = false-->Line_20 $$ hasPrefix = true[ FD ]
Line_43 $$ final String f_modifier = scanner.group(2)-->Line_66 $$ if (f_modifier != null) [ FD ]
Line_131 $$ final int right = full_range.getEndOffset() - full_start-->Line_132 $$ if (left < right) [ FD ]
Line_117 $$ TextRange prev_range = stringNodes.get(0).getTextRange()-->Line_128 $$ prev_range = next_range[ FD ]
Line_130 $$ final int left = prev_range.getEndOffset() - full_start-->Line_132 $$ if (left < right) [ FD ]
Line_17 $$ boolean hasPrefix = false-->Line_33 $$ if (!hasPrefix)[ FD ]
Line_117 $$ TextRange prev_range = stringNodes.get(0).getTextRange()-->Line_130 $$ final int left = prev_range.getEndOffset() - full_start[ FD ]
Line_10 $$ final List<ASTNode> stringNodes = stringLiteralExpression.getStringNodes()-->Line_12 $$ sure(stringNodes.size() > 0)[ FD ]
Line_44 $$ final String f_width = scanner.group(3)-->Line_91 $$ if (f_width != null) [ FD ]
Line_116 $$ CharSequence full_text = stringLiteralExpression.getNode().getChars()-->Line_125 $$ constants.get(fragment_no - 1).append(full_text.subSequence(left, right))[ FD ]
Line_32 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_92 $$ out.append(f_width)[ FD ]
Line_32 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_101 $$ out.append(f_conversion)[ FD ]
Line_45 $$ String f_conversion = scanner.group(4)-->Line_51 $$ sure(f_conversion)[ FD ]
Line_32 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_34 $$ out.insert(0, prefix)[ FD ]
Line_120 $$ while (fragment_no < stringNodes.size()) -->Line_121 $$ TextRange next_range = stringNodes.get(fragment_no).getTextRange()[ CD ]
Line_45 $$ String f_conversion = scanner.group(4)-->Line_94 $$ if ("i".equals(f_conversion) || "u".equals(f_conversion))[ FD ]
Line_32 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_56 $$ out.append(f_key)[ FD ]
Line_123 $$ int right = next_range.getStartOffset() - full_start-->Line_125 $$ constants.get(fragment_no - 1).append(full_text.subSequence(left, right))[ FD ]
Line_45 $$ String f_conversion = scanner.group(4)-->Line_72 $$ if ("s".equals(f_conversion) && !StringUtil.isEmptyOrSpaces(f_width)) [ FD ]
Line_44 $$ final String f_width = scanner.group(3)-->Line_72 $$ if ("s".equals(f_conversion) && !StringUtil.isEmptyOrSpaces(f_width)) [ FD ]
Line_33 $$ if (!hasPrefix)-->Line_34 $$ out.insert(0, prefix)[ CD ]
Line_120 $$ while (fragment_no < stringNodes.size()) -->Line_128 $$ prev_range = next_range[ CD ]
Line_32 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_110 $$ constants.add(out)[ FD ]
Line_122 $$ int left = prev_range.getEndOffset() - full_start-->Line_132 $$ if (left < right) [ FD ]
Line_32 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_85 $$ out.append("#")[ FD ]
Line_43 $$ final String f_modifier = scanner.group(2)-->Line_76 $$ if (// signed[ FD ]
Line_10 $$ final List<ASTNode> stringNodes = stringLiteralExpression.getStringNodes()-->Line_120 $$ while (fragment_no < stringNodes.size()) [ FD ]
Line_62 $$ if ("r".equals(f_conversion))-->Line_63 $$ out.append("!r")[ CD ]
Line_36 $$ Matcher scanner = FORMAT_PATTERN.matcher(text)-->Line_44 $$ final String f_width = scanner.group(3)[ FD ]
Line_55 $$ if (f_key != null) -->Line_59 $$ out.append(position_count)[ CD ]
Line_37 $$ while (scanner.find(index)) -->Line_44 $$ final String f_width = scanner.group(3)[ CD ]
Line_32 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_82 $$ out.append(" ")[ FD ]
Line_128 $$ prev_range = next_range-->Line_130 $$ final int left = prev_range.getEndOffset() - full_start[ FD ]
Line_55 $$ if (f_key != null) -->Line_56 $$ out.append(f_key)[ CD ]
Line_18 $$ final int prefixLength = PyStringLiteralExpressionImpl.getPrefixLength(String.valueOf(text))-->Line_21 $$ openPos += prefixLength[ FD ]
Line_122 $$ int left = prev_range.getEndOffset() - full_start-->Line_125 $$ constants.get(fragment_no - 1).append(full_text.subSequence(left, right))[ FD ]
Line_60 $$ position_count += 1-->Line_59 $$ out.append(position_count)[ FD ]
Line_128 $$ prev_range = next_range-->Line_122 $$ int left = prev_range.getEndOffset() - full_start[ FD ]
Line_32 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_88 $$ out.append("0")[ FD ]
Line_10 $$ final List<ASTNode> stringNodes = stringLiteralExpression.getStringNodes()-->Line_117 $$ TextRange prev_range = stringNodes.get(0).getTextRange()[ FD ]
Line_35 $$ int position_count = 0-->Line_60 $$ position_count += 1[ FD ]
Line_45 $$ String f_conversion = scanner.group(4)-->Line_62 $$ if ("r".equals(f_conversion))[ FD ]
Line_32 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_59 $$ out.append(position_count)[ FD ]
Line_127 $$ fragment_no += 1-->Line_120 $$ while (fragment_no < stringNodes.size()) [ FD ]
Line_18 $$ final int prefixLength = PyStringLiteralExpressionImpl.getPrefixLength(String.valueOf(text))-->Line_19 $$ if (prefixLength != 0)[ FD ]
Line_36 $$ Matcher scanner = FORMAT_PATTERN.matcher(text)-->Line_43 $$ final String f_modifier = scanner.group(2)[ FD ]
Line_123 $$ int right = next_range.getStartOffset() - full_start-->Line_124 $$ if (left < right) [ FD ]
Line_37 $$ while (scanner.find(index)) -->Line_45 $$ String f_conversion = scanner.group(4)[ CD ]
Line_32 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_54 $$ out.append("[ FD ]
Line_36 $$ Matcher scanner = FORMAT_PATTERN.matcher(text)-->Line_105 $$ index = scanner.end()[ FD ]
Line_37 $$ while (scanner.find(index)) -->Line_43 $$ final String f_modifier = scanner.group(2)[ CD ]
Line_36 $$ Matcher scanner = FORMAT_PATTERN.matcher(text)-->Line_45 $$ String f_conversion = scanner.group(4)[ FD ]
Line_36 $$ Matcher scanner = FORMAT_PATTERN.matcher(text)-->Line_37 $$ while (scanner.find(index)) [ FD ]
Line_123 $$ int right = next_range.getStartOffset() - full_start-->Line_132 $$ if (left < right) [ FD ]
Line_55 $$ if (f_key != null) -->Line_60 $$ position_count += 1[ CD ]
Line_16 $$ int openPos = 0-->Line_27 $$ openPos += 2[ FD ]
Line_55 $$ if (f_key != null) -->Line_57 $$ usesNamedFormat = true[ CD ]
Line_66 $$ if (f_modifier != null) -->Line_76 $$ if (// signed[ CD ]
Line_121 $$ TextRange next_range = stringNodes.get(fragment_no).getTextRange()-->Line_123 $$ int right = next_range.getStartOffset() - full_start[ FD ]
Line_120 $$ while (fragment_no < stringNodes.size()) -->Line_123 $$ int right = next_range.getStartOffset() - full_start[ CD ]
Line_120 $$ while (fragment_no < stringNodes.size()) -->Line_124 $$ if (left < right) [ CD ]
Line_35 $$ int position_count = 0-->Line_59 $$ out.append(position_count)[ FD ]
Line_117 $$ TextRange prev_range = stringNodes.get(0).getTextRange()-->Line_122 $$ int left = prev_range.getEndOffset() - full_start[ FD ]
Line_120 $$ while (fragment_no < stringNodes.size()) -->Line_122 $$ int left = prev_range.getEndOffset() - full_start[ CD ]
Line_121 $$ TextRange next_range = stringNodes.get(fragment_no).getTextRange()-->Line_128 $$ prev_range = next_range[ FD ]
Line_122 $$ int left = prev_range.getEndOffset() - full_start-->Line_124 $$ if (left < right) [ FD ]
Line_105 $$ index = scanner.end()-->Line_37 $$ while (scanner.find(index)) [ FD ]
Line_20 $$ hasPrefix = true-->Line_33 $$ if (!hasPrefix)[ FD ]
Line_21 $$ openPos += prefixLength-->Line_22 $$ char quote = text.charAt(openPos)[ FD ]
Line_21 $$ openPos += prefixLength-->Line_27 $$ openPos += 2[ FD ]
Line_91 $$ if (f_width != null) -->Line_92 $$ out.append(f_width)[ CD ]
Line_127 $$ fragment_no += 1-->Line_121 $$ TextRange next_range = stringNodes.get(fragment_no).getTextRange()[ FD ]
Line_37 $$ while (scanner.find(index)) -->Line_105 $$ index = scanner.end()[ CD ]
Line_45 $$ String f_conversion = scanner.group(4)-->Line_101 $$ out.append(f_conversion)[ FD ]
Line_22 $$ char quote = text.charAt(openPos)-->Line_23 $$ sure("\"'".indexOf(quote) >= 0)[ FD ]
Line_32 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_63 $$ out.append("!r")[ FD ]
Line_94 $$ if ("i".equals(f_conversion) || "u".equals(f_conversion))-->Line_95 $$ out.append("d")[ CD ]
Line_19 $$ if (prefixLength != 0)-->Line_20 $$ hasPrefix = true[ CD ]
Line_10 $$ final List<ASTNode> stringNodes = stringLiteralExpression.getStringNodes()-->Line_11 $$ sure(stringNodes)[ FD ]
Line_94 $$ if ("i".equals(f_conversion) || "u".equals(f_conversion))-->Line_96 $$ if (// we want our raw string as a string[ CD ]
Line_9 $$ boolean usesNamedFormat = false-->Line_57 $$ usesNamedFormat = true[ FD ]
Line_16 $$ int openPos = 0-->Line_22 $$ char quote = text.charAt(openPos)[ FD ]
Line_45 $$ String f_conversion = scanner.group(4)-->Line_96 $$ if (// we want our raw string as a string[ FD ]
Line_96 $$ if (// we want our raw string as a string-->Line_101 $$ out.append(f_conversion)[ CD ]
Line_16 $$ int openPos = 0-->Line_21 $$ openPos += prefixLength[ FD ]
Line_120 $$ while (fragment_no < stringNodes.size()) -->Line_127 $$ fragment_no += 1[ CD ]
Line_44 $$ final String f_width = scanner.group(3)-->Line_92 $$ out.append(f_width)[ FD ]
Line_10 $$ final List<ASTNode> stringNodes = stringLiteralExpression.getStringNodes()-->Line_121 $$ TextRange next_range = stringNodes.get(fragment_no).getTextRange()[ FD ]
Line_32 $$ StringBuilder out = new StringBuilder(text.subSequence(0, openPos + 1))-->Line_95 $$ out.append("d")[ FD ]
