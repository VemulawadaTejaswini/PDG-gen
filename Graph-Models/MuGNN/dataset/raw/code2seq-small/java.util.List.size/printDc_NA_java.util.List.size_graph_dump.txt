Line_36 $$ state = "Leaving"-->Line_38 $$ state = "Moving"[ FD ]
Line_2 $$ private void printDc(NodeProbe probe, String format, String dc, LinkedHashMultimap<String, String> endpointsToTokens, SetHostStat hoststats, boolean showEffectiveOwnership) -->Line_6 $$ Collection<String> leavingNodes = probe.getLeavingNodes()[ FD ]
Line_13 $$ String lastToken = ""-->Line_20 $$ System.out.printf(format, "", "", "", "", "", "", lastToken)[ FD ]
Line_32 $$ String state = "Normal"-->Line_34 $$ state = "Joining"[ FD ]
Line_27 $$ rack = probe.getEndpointSnitchInfoProxy().getRack(endpoint)-->Line_29 $$ rack = "Unknown"[ FD ]
Line_2 $$ private void printDc(NodeProbe probe, String format, String dc, LinkedHashMultimap<String, String> endpointsToTokens, SetHostStat hoststats, boolean showEffectiveOwnership) -->Line_7 $$ Collection<String> movingNodes = probe.getMovingNodes()[ FD ]
Line_35 $$ if (leavingNodes.contains(endpoint))-->Line_37 $$ if (movingNodes.contains(endpoint))[ CD ]
Line_2 $$ private void printDc(NodeProbe probe, String format, String dc, LinkedHashMultimap<String, String> endpointsToTokens, SetHostStat hoststats, boolean showEffectiveOwnership) -->Line_8 $$ Map<String, String> loadMap = probe.getLoadMap()[ CD ]
Line_29 $$ rack = "Unknown"-->Line_41 $$ System.out.printf(format, stat.ipOrDns(), rack, status, state, load, owns, stat.token)[ FD ]
Line_32 $$ String state = "Normal"-->Line_41 $$ System.out.printf(format, stat.ipOrDns(), rack, status, state, load, owns, stat.token)[ FD ]
Line_40 $$ String owns = stat.owns != null && showEffectiveOwnership ? new DecimalFormat("##0.00%").format(stat.owns) : "?"-->Line_41 $$ System.out.printf(format, stat.ipOrDns(), rack, status, state, load, owns, stat.token)[ FD ]
Line_33 $$ if (joiningNodes.contains(endpoint))-->Line_34 $$ state = "Joining"[ CD ]
Line_33 $$ if (joiningNodes.contains(endpoint))-->Line_35 $$ if (leavingNodes.contains(endpoint))[ CD ]
Line_2 $$ private void printDc(NodeProbe probe, String format, String dc, LinkedHashMultimap<String, String> endpointsToTokens, SetHostStat hoststats, boolean showEffectiveOwnership) -->Line_7 $$ Collection<String> movingNodes = probe.getMovingNodes()[ CD ]
Line_7 $$ Collection<String> movingNodes = probe.getMovingNodes()-->Line_37 $$ if (movingNodes.contains(endpoint))[ FD ]
Line_24 $$ String endpoint = stat.endpoint.getHostAddress()-->Line_35 $$ if (leavingNodes.contains(endpoint))[ FD ]
Line_2 $$ private void printDc(NodeProbe probe, String format, String dc, LinkedHashMultimap<String, String> endpointsToTokens, SetHostStat hoststats, boolean showEffectiveOwnership) -->Line_27 $$ rack = probe.getEndpointSnitchInfoProxy().getRack(endpoint)[ FD ]
Line_24 $$ String endpoint = stat.endpoint.getHostAddress()-->Line_39 $$ String load = loadMap.containsKey(endpoint) ? loadMap.get(endpoint) : "?"[ FD ]
Line_2 $$ private void printDc(NodeProbe probe, String format, String dc, LinkedHashMultimap<String, String> endpointsToTokens, SetHostStat hoststats, boolean showEffectiveOwnership) -->Line_20 $$ System.out.printf(format, "", "", "", "", "", "", lastToken)[ FD ]
Line_5 $$ Collection<String> joiningNodes = probe.getJoiningNodes()-->Line_33 $$ if (joiningNodes.contains(endpoint))[ FD ]
Line_2 $$ private void printDc(NodeProbe probe, String format, String dc, LinkedHashMultimap<String, String> endpointsToTokens, SetHostStat hoststats, boolean showEffectiveOwnership) -->Line_13 $$ String lastToken = ""[ CD ]
Line_2 $$ private void printDc(NodeProbe probe, String format, String dc, LinkedHashMultimap<String, String> endpointsToTokens, SetHostStat hoststats, boolean showEffectiveOwnership) -->Line_18 $$ System.out.printf(format, "Address", "Rack", "Status", "State", "Load", "Owns", "Token")[ CD ]
Line_35 $$ if (leavingNodes.contains(endpoint))-->Line_36 $$ state = "Leaving"[ CD ]
Line_2 $$ private void printDc(NodeProbe probe, String format, String dc, LinkedHashMultimap<String, String> endpointsToTokens, SetHostStat hoststats, boolean showEffectiveOwnership) -->Line_3 $$ Collection<String> liveNodes = probe.getLiveNodes()[ FD ]
Line_2 $$ private void printDc(NodeProbe probe, String format, String dc, LinkedHashMultimap<String, String> endpointsToTokens, SetHostStat hoststats, boolean showEffectiveOwnership) -->Line_3 $$ Collection<String> liveNodes = probe.getLiveNodes()[ CD ]
Line_25 $$ String rack-->Line_27 $$ rack = probe.getEndpointSnitchInfoProxy().getRack(endpoint)[ FD ]
Line_38 $$ state = "Moving"-->Line_41 $$ System.out.printf(format, stat.ipOrDns(), rack, status, state, load, owns, stat.token)[ FD ]
Line_2 $$ private void printDc(NodeProbe probe, String format, String dc, LinkedHashMultimap<String, String> endpointsToTokens, SetHostStat hoststats, boolean showEffectiveOwnership) -->Line_9 $$ System.out.println("Datacenter: " + dc)[ CD ]
Line_37 $$ if (movingNodes.contains(endpoint))-->Line_38 $$ state = "Moving"[ CD ]
Line_2 $$ private void printDc(NodeProbe probe, String format, String dc, LinkedHashMultimap<String, String> endpointsToTokens, SetHostStat hoststats, boolean showEffectiveOwnership) -->Line_6 $$ Collection<String> leavingNodes = probe.getLeavingNodes()[ CD ]
Line_34 $$ state = "Joining"-->Line_41 $$ System.out.printf(format, stat.ipOrDns(), rack, status, state, load, owns, stat.token)[ FD ]
Line_2 $$ private void printDc(NodeProbe probe, String format, String dc, LinkedHashMultimap<String, String> endpointsToTokens, SetHostStat hoststats, boolean showEffectiveOwnership) -->Line_19 $$ if (hoststats.size() > 1)[ CD ]
Line_2 $$ private void printDc(NodeProbe probe, String format, String dc, LinkedHashMultimap<String, String> endpointsToTokens, SetHostStat hoststats, boolean showEffectiveOwnership) -->Line_43 $$ System.out.println()[ CD ]
Line_2 $$ private void printDc(NodeProbe probe, String format, String dc, LinkedHashMultimap<String, String> endpointsToTokens, SetHostStat hoststats, boolean showEffectiveOwnership) -->Line_8 $$ Map<String, String> loadMap = probe.getLoadMap()[ FD ]
Line_32 $$ String state = "Normal"-->Line_36 $$ state = "Leaving"[ FD ]
Line_2 $$ private void printDc(NodeProbe probe, String format, String dc, LinkedHashMultimap<String, String> endpointsToTokens, SetHostStat hoststats, boolean showEffectiveOwnership) -->Line_41 $$ System.out.printf(format, stat.ipOrDns(), rack, status, state, load, owns, stat.token)[ FD ]
Line_19 $$ if (hoststats.size() > 1)-->Line_20 $$ System.out.printf(format, "", "", "", "", "", "", lastToken)[ CD ]
Line_14 $$ for (HostStat stat : hoststats) -->Line_41 $$ System.out.printf(format, stat.ipOrDns(), rack, status, state, load, owns, stat.token)[ FD ]
Line_2 $$ private void printDc(NodeProbe probe, String format, String dc, LinkedHashMultimap<String, String> endpointsToTokens, SetHostStat hoststats, boolean showEffectiveOwnership) -->Line_4 $$ Collection<String> deadNodes = probe.getUnreachableNodes()[ CD ]
Line_24 $$ String endpoint = stat.endpoint.getHostAddress()-->Line_27 $$ rack = probe.getEndpointSnitchInfoProxy().getRack(endpoint)[ FD ]
Line_34 $$ state = "Joining"-->Line_38 $$ state = "Moving"[ FD ]
Line_27 $$ rack = probe.getEndpointSnitchInfoProxy().getRack(endpoint)-->Line_41 $$ System.out.printf(format, stat.ipOrDns(), rack, status, state, load, owns, stat.token)[ FD ]
Line_25 $$ String rack-->Line_29 $$ rack = "Unknown"[ FD ]
Line_8 $$ Map<String, String> loadMap = probe.getLoadMap()-->Line_39 $$ String load = loadMap.containsKey(endpoint) ? loadMap.get(endpoint) : "?"[ FD ]
Line_16 $$ lastToken = tokens.get(tokens.size() - 1)-->Line_20 $$ System.out.printf(format, "", "", "", "", "", "", lastToken)[ FD ]
Line_3 $$ Collection<String> liveNodes = probe.getLiveNodes()-->Line_31 $$ String status = liveNodes.contains(endpoint) ? "Up" : deadNodes.contains(endpoint) ? "Down" : "?"[ FD ]
Line_34 $$ state = "Joining"-->Line_36 $$ state = "Leaving"[ FD ]
Line_24 $$ String endpoint = stat.endpoint.getHostAddress()-->Line_31 $$ String status = liveNodes.contains(endpoint) ? "Up" : deadNodes.contains(endpoint) ? "Down" : "?"[ FD ]
Line_32 $$ String state = "Normal"-->Line_38 $$ state = "Moving"[ FD ]
Line_2 $$ private void printDc(NodeProbe probe, String format, String dc, LinkedHashMultimap<String, String> endpointsToTokens, SetHostStat hoststats, boolean showEffectiveOwnership) -->Line_15 $$ tokens.addAll(endpointsToTokens.get(stat.endpoint.getHostAddress()))[ FD ]
Line_19 $$ if (hoststats.size() > 1)-->Line_22 $$ System.out.println()[ CD ]
Line_36 $$ state = "Leaving"-->Line_41 $$ System.out.printf(format, stat.ipOrDns(), rack, status, state, load, owns, stat.token)[ FD ]
Line_24 $$ String endpoint = stat.endpoint.getHostAddress()-->Line_33 $$ if (joiningNodes.contains(endpoint))[ FD ]
Line_2 $$ private void printDc(NodeProbe probe, String format, String dc, LinkedHashMultimap<String, String> endpointsToTokens, SetHostStat hoststats, boolean showEffectiveOwnership) -->Line_4 $$ Collection<String> deadNodes = probe.getUnreachableNodes()[ FD ]
Line_2 $$ private void printDc(NodeProbe probe, String format, String dc, LinkedHashMultimap<String, String> endpointsToTokens, SetHostStat hoststats, boolean showEffectiveOwnership) -->Line_5 $$ Collection<String> joiningNodes = probe.getJoiningNodes()[ FD ]
Line_2 $$ private void printDc(NodeProbe probe, String format, String dc, LinkedHashMultimap<String, String> endpointsToTokens, SetHostStat hoststats, boolean showEffectiveOwnership) -->Line_5 $$ Collection<String> joiningNodes = probe.getJoiningNodes()[ CD ]
Line_24 $$ String endpoint = stat.endpoint.getHostAddress()-->Line_37 $$ if (movingNodes.contains(endpoint))[ FD ]
Line_31 $$ String status = liveNodes.contains(endpoint) ? "Up" : deadNodes.contains(endpoint) ? "Down" : "?"-->Line_41 $$ System.out.printf(format, stat.ipOrDns(), rack, status, state, load, owns, stat.token)[ FD ]
Line_4 $$ Collection<String> deadNodes = probe.getUnreachableNodes()-->Line_31 $$ String status = liveNodes.contains(endpoint) ? "Up" : deadNodes.contains(endpoint) ? "Down" : "?"[ FD ]
Line_25 $$ String rack-->Line_41 $$ System.out.printf(format, stat.ipOrDns(), rack, status, state, load, owns, stat.token)[ FD ]
Line_2 $$ private void printDc(NodeProbe probe, String format, String dc, LinkedHashMultimap<String, String> endpointsToTokens, SetHostStat hoststats, boolean showEffectiveOwnership) -->Line_18 $$ System.out.printf(format, "Address", "Rack", "Status", "State", "Load", "Owns", "Token")[ FD ]
Line_13 $$ String lastToken = ""-->Line_16 $$ lastToken = tokens.get(tokens.size() - 1)[ FD ]
Line_39 $$ String load = loadMap.containsKey(endpoint) ? loadMap.get(endpoint) : "?"-->Line_41 $$ System.out.printf(format, stat.ipOrDns(), rack, status, state, load, owns, stat.token)[ FD ]
Line_2 $$ private void printDc(NodeProbe probe, String format, String dc, LinkedHashMultimap<String, String> endpointsToTokens, SetHostStat hoststats, boolean showEffectiveOwnership) -->Line_19 $$ if (hoststats.size() > 1)[ FD ]
Line_6 $$ Collection<String> leavingNodes = probe.getLeavingNodes()-->Line_35 $$ if (leavingNodes.contains(endpoint))[ FD ]
Line_2 $$ private void printDc(NodeProbe probe, String format, String dc, LinkedHashMultimap<String, String> endpointsToTokens, SetHostStat hoststats, boolean showEffectiveOwnership) -->Line_10 $$ System.out.println("==========")[ CD ]
