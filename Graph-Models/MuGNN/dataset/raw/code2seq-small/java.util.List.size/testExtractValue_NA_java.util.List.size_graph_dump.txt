Line_32 $$ List extListValue = (List) extValue-->Line_42 $$ assertThat(extListValue.get(0).toString(), equalTo("value1"))[ FD ]
Line_4 $$ Map<String, Object> map-->Line_13 $$ map = parser.map()[ FD ]
Line_11 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").startObject("path2").field("test", "value").endObject().endObject().endObject()-->Line_50 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) [ FD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_18 $$ Object extValue = XContentMapValues.extractValue("path1.path2", map)[ CD ]
Line_4 $$ Map<String, Object> map-->Line_17 $$ assertThat(XContentMapValues.extractValue("path1.non_path2.test", map), nullValue())[ FD ]
Line_13 $$ map = parser.map()-->Line_22 $$ extValue = XContentMapValues.extractValue("path1", map)[ FD ]
Line_40 $$ extListValue = (List) extValue-->Line_43 $$ assertThat(extListValue.get(1).toString(), equalTo("value2"))[ FD ]
Line_5 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) -->Line_46 $$ map = parser.map()[ FD ]
Line_26 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").field("test", "value1", "value2").endObject().endObject()-->Line_35 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) [ FD ]
Line_6 $$ map = parser.map()-->Line_38 $$ extValue = XContentMapValues.extractValue("path1.path2.test", map)[ FD ]
Line_11 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").startObject("path2").field("test", "value").endObject().endObject().endObject()-->Line_44 $$ builder = XContentFactory.jsonBuilder().startObject().field("xxx.yyy", "value").endObject()[ FD ]
Line_6 $$ map = parser.map()-->Line_18 $$ Object extValue = XContentMapValues.extractValue("path1.path2", map)[ FD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_42 $$ assertThat(extListValue.get(0).toString(), equalTo("value1"))[ CD ]
Line_3 $$ XContentBuilder builder = XContentFactory.jsonBuilder().startObject().field("test", "value").endObject()-->Line_35 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) [ FD ]
Line_26 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").field("test", "value1", "value2").endObject().endObject()-->Line_27 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) [ FD ]
Line_6 $$ map = parser.map()-->Line_8 $$ assertThat(XContentMapValues.extractValue("test", map).toString(), equalTo("value"))[ FD ]
Line_32 $$ List extListValue = (List) extValue-->Line_43 $$ assertThat(extListValue.get(1).toString(), equalTo("value2"))[ FD ]
Line_13 $$ map = parser.map()-->Line_53 $$ assertThat(XContentMapValues.extractValue("path1.xxx.path2.yyy.test", map).toString(), equalTo("value"))[ FD ]
Line_26 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").field("test", "value1", "value2").endObject().endObject()-->Line_50 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) [ FD ]
Line_3 $$ XContentBuilder builder = XContentFactory.jsonBuilder().startObject().field("test", "value").endObject()-->Line_11 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").startObject("path2").field("test", "value").endObject().endObject().endObject()[ FD ]
Line_18 $$ Object extValue = XContentMapValues.extractValue("path1.path2", map)-->Line_31 $$ assertThat(extValue, instanceOf(List.class))[ FD ]
Line_34 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").startArray("path2").startObject().field("test", "value1").endObject().startObject().field("test", "value2").endObject().endArray().endObject().endObject()-->Line_35 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) [ FD ]
Line_6 $$ map = parser.map()-->Line_10 $$ assertThat(XContentMapValues.extractValue("something.else.2", map), nullValue())[ FD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_40 $$ extListValue = (List) extValue[ CD ]
Line_13 $$ map = parser.map()-->Line_15 $$ assertThat(XContentMapValues.extractValue("path1.path2.test", map).toString(), equalTo("value"))[ FD ]
Line_3 $$ XContentBuilder builder = XContentFactory.jsonBuilder().startObject().field("test", "value").endObject()-->Line_12 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) [ FD ]
Line_5 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) -->Line_28 $$ map = parser.map()[ FD ]
Line_46 $$ map = parser.map()-->Line_51 $$ map = parser.map()[ FD ]
Line_28 $$ map = parser.map()-->Line_48 $$ assertThat(XContentMapValues.extractValue("xxx.yyy", map).toString(), equalTo("value"))[ FD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_17 $$ assertThat(XContentMapValues.extractValue("path1.non_path2.test", map), nullValue())[ CD ]
Line_4 $$ Map<String, Object> map-->Line_53 $$ assertThat(XContentMapValues.extractValue("path1.xxx.path2.yyy.test", map).toString(), equalTo("value"))[ FD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_19 $$ assertThat(extValue, instanceOf(Map.class))[ CD ]
Line_4 $$ Map<String, Object> map-->Line_36 $$ map = parser.map()[ FD ]
Line_4 $$ Map<String, Object> map-->Line_15 $$ assertThat(XContentMapValues.extractValue("path1.path2.test", map).toString(), equalTo("value"))[ FD ]
Line_4 $$ Map<String, Object> map-->Line_30 $$ extValue = XContentMapValues.extractValue("path1.test", map)[ FD ]
Line_26 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").field("test", "value1", "value2").endObject().endObject()-->Line_34 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").startArray("path2").startObject().field("test", "value1").endObject().startObject().field("test", "value2").endObject().endArray().endObject().endObject()[ FD ]
Line_28 $$ map = parser.map()-->Line_53 $$ assertThat(XContentMapValues.extractValue("path1.xxx.path2.yyy.test", map).toString(), equalTo("value"))[ FD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_25 $$ assertThat(extMapValue.containsKey("path2"), equalTo(true))[ CD ]
Line_51 $$ map = parser.map()-->Line_53 $$ assertThat(XContentMapValues.extractValue("path1.xxx.path2.yyy.test", map).toString(), equalTo("value"))[ FD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_21 $$ assertThat(extMapValue, hasEntry("test", (Object) "value"))[ CD ]
Line_38 $$ extValue = XContentMapValues.extractValue("path1.path2.test", map)-->Line_39 $$ assertThat(extValue, instanceOf(List.class))[ FD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_33 $$ assertThat(extListValue.size(), equalTo(2))[ CD ]
Line_32 $$ List extListValue = (List) extValue-->Line_33 $$ assertThat(extListValue.size(), equalTo(2))[ FD ]
Line_13 $$ map = parser.map()-->Line_46 $$ map = parser.map()[ FD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_11 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").startObject("path2").field("test", "value").endObject().endObject().endObject()[ CD ]
Line_34 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").startArray("path2").startObject().field("test", "value1").endObject().startObject().field("test", "value2").endObject().endArray().endObject().endObject()-->Line_45 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) [ FD ]
Line_11 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").startObject("path2").field("test", "value").endObject().endObject().endObject()-->Line_49 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1.xxx").startObject("path2.yyy").field("test", "value").endObject().endObject().endObject()[ FD ]
Line_6 $$ map = parser.map()-->Line_9 $$ assertThat(XContentMapValues.extractValue("test.me", map), nullValue())[ FD ]
Line_6 $$ map = parser.map()-->Line_13 $$ map = parser.map()[ FD ]
Line_30 $$ extValue = XContentMapValues.extractValue("path1.test", map)-->Line_39 $$ assertThat(extValue, instanceOf(List.class))[ FD ]
Line_22 $$ extValue = XContentMapValues.extractValue("path1", map)-->Line_39 $$ assertThat(extValue, instanceOf(List.class))[ FD ]
Line_26 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").field("test", "value1", "value2").endObject().endObject()-->Line_45 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) [ FD ]
Line_5 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) -->Line_6 $$ map = parser.map()[ FD ]
Line_46 $$ map = parser.map()-->Line_48 $$ assertThat(XContentMapValues.extractValue("xxx.yyy", map).toString(), equalTo("value"))[ FD ]
Line_13 $$ map = parser.map()-->Line_51 $$ map = parser.map()[ FD ]
Line_49 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1.xxx").startObject("path2.yyy").field("test", "value").endObject().endObject().endObject()-->Line_50 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) [ FD ]
Line_13 $$ map = parser.map()-->Line_28 $$ map = parser.map()[ FD ]
Line_13 $$ map = parser.map()-->Line_48 $$ assertThat(XContentMapValues.extractValue("xxx.yyy", map).toString(), equalTo("value"))[ FD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_53 $$ assertThat(XContentMapValues.extractValue("path1.xxx.path2.yyy.test", map).toString(), equalTo("value"))[ CD ]
Line_28 $$ map = parser.map()-->Line_36 $$ map = parser.map()[ FD ]
Line_34 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").startArray("path2").startObject().field("test", "value1").endObject().startObject().field("test", "value2").endObject().endArray().endObject().endObject()-->Line_49 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1.xxx").startObject("path2.yyy").field("test", "value").endObject().endObject().endObject()[ FD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_38 $$ extValue = XContentMapValues.extractValue("path1.path2.test", map)[ CD ]
Line_11 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").startObject("path2").field("test", "value").endObject().endObject().endObject()-->Line_35 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) [ FD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_49 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1.xxx").startObject("path2.yyy").field("test", "value").endObject().endObject().endObject()[ CD ]
Line_5 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) -->Line_13 $$ map = parser.map()[ FD ]
Line_46 $$ map = parser.map()-->Line_53 $$ assertThat(XContentMapValues.extractValue("path1.xxx.path2.yyy.test", map).toString(), equalTo("value"))[ FD ]
Line_6 $$ map = parser.map()-->Line_22 $$ extValue = XContentMapValues.extractValue("path1", map)[ FD ]
Line_4 $$ Map<String, Object> map-->Line_9 $$ assertThat(XContentMapValues.extractValue("test.me", map), nullValue())[ FD ]
Line_26 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").field("test", "value1", "value2").endObject().endObject()-->Line_49 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1.xxx").startObject("path2.yyy").field("test", "value").endObject().endObject().endObject()[ FD ]
Line_30 $$ extValue = XContentMapValues.extractValue("path1.test", map)-->Line_38 $$ extValue = XContentMapValues.extractValue("path1.path2.test", map)[ FD ]
Line_11 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").startObject("path2").field("test", "value").endObject().endObject().endObject()-->Line_45 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) [ FD ]
Line_22 $$ extValue = XContentMapValues.extractValue("path1", map)-->Line_31 $$ assertThat(extValue, instanceOf(List.class))[ FD ]
Line_36 $$ map = parser.map()-->Line_48 $$ assertThat(XContentMapValues.extractValue("xxx.yyy", map).toString(), equalTo("value"))[ FD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_3 $$ XContentBuilder builder = XContentFactory.jsonBuilder().startObject().field("test", "value").endObject()[ CD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_8 $$ assertThat(XContentMapValues.extractValue("test", map).toString(), equalTo("value"))[ CD ]
Line_11 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").startObject("path2").field("test", "value").endObject().endObject().endObject()-->Line_12 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) [ FD ]
Line_4 $$ Map<String, Object> map-->Line_51 $$ map = parser.map()[ FD ]
Line_20 $$ Map<String, Object> extMapValue = (Map<String, Object>) extValue-->Line_21 $$ assertThat(extMapValue, hasEntry("test", (Object) "value"))[ FD ]
Line_28 $$ map = parser.map()-->Line_30 $$ extValue = XContentMapValues.extractValue("path1.test", map)[ FD ]
Line_44 $$ builder = XContentFactory.jsonBuilder().startObject().field("xxx.yyy", "value").endObject()-->Line_45 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) [ FD ]
Line_20 $$ Map<String, Object> extMapValue = (Map<String, Object>) extValue-->Line_24 $$ extMapValue = (Map<String, Object>) extValue[ FD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_15 $$ assertThat(XContentMapValues.extractValue("path1.path2.test", map).toString(), equalTo("value"))[ CD ]
Line_4 $$ Map<String, Object> map-->Line_6 $$ map = parser.map()[ FD ]
Line_4 $$ Map<String, Object> map-->Line_28 $$ map = parser.map()[ FD ]
Line_3 $$ XContentBuilder builder = XContentFactory.jsonBuilder().startObject().field("test", "value").endObject()-->Line_34 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").startArray("path2").startObject().field("test", "value1").endObject().startObject().field("test", "value2").endObject().endArray().endObject().endObject()[ FD ]
Line_11 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").startObject("path2").field("test", "value").endObject().endObject().endObject()-->Line_27 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) [ FD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_23 $$ assertThat(extValue, instanceOf(Map.class))[ CD ]
Line_3 $$ XContentBuilder builder = XContentFactory.jsonBuilder().startObject().field("test", "value").endObject()-->Line_45 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) [ FD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_9 $$ assertThat(XContentMapValues.extractValue("test.me", map), nullValue())[ CD ]
Line_18 $$ Object extValue = XContentMapValues.extractValue("path1.path2", map)-->Line_23 $$ assertThat(extValue, instanceOf(Map.class))[ FD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_26 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").field("test", "value1", "value2").endObject().endObject()[ CD ]
Line_3 $$ XContentBuilder builder = XContentFactory.jsonBuilder().startObject().field("test", "value").endObject()-->Line_27 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) [ FD ]
Line_28 $$ map = parser.map()-->Line_51 $$ map = parser.map()[ FD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_32 $$ List extListValue = (List) extValue[ CD ]
Line_18 $$ Object extValue = XContentMapValues.extractValue("path1.path2", map)-->Line_39 $$ assertThat(extValue, instanceOf(List.class))[ FD ]
Line_6 $$ map = parser.map()-->Line_48 $$ assertThat(XContentMapValues.extractValue("xxx.yyy", map).toString(), equalTo("value"))[ FD ]
Line_28 $$ map = parser.map()-->Line_38 $$ extValue = XContentMapValues.extractValue("path1.path2.test", map)[ FD ]
Line_18 $$ Object extValue = XContentMapValues.extractValue("path1.path2", map)-->Line_30 $$ extValue = XContentMapValues.extractValue("path1.test", map)[ FD ]
Line_34 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").startArray("path2").startObject().field("test", "value1").endObject().startObject().field("test", "value2").endObject().endArray().endObject().endObject()-->Line_44 $$ builder = XContentFactory.jsonBuilder().startObject().field("xxx.yyy", "value").endObject()[ FD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_4 $$ Map<String, Object> map[ CD ]
Line_13 $$ map = parser.map()-->Line_36 $$ map = parser.map()[ FD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_31 $$ assertThat(extValue, instanceOf(List.class))[ CD ]
Line_22 $$ extValue = XContentMapValues.extractValue("path1", map)-->Line_23 $$ assertThat(extValue, instanceOf(Map.class))[ FD ]
Line_6 $$ map = parser.map()-->Line_53 $$ assertThat(XContentMapValues.extractValue("path1.xxx.path2.yyy.test", map).toString(), equalTo("value"))[ FD ]
Line_5 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) -->Line_36 $$ map = parser.map()[ FD ]
Line_3 $$ XContentBuilder builder = XContentFactory.jsonBuilder().startObject().field("test", "value").endObject()-->Line_26 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").field("test", "value1", "value2").endObject().endObject()[ FD ]
Line_4 $$ Map<String, Object> map-->Line_22 $$ extValue = XContentMapValues.extractValue("path1", map)[ FD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_24 $$ extMapValue = (Map<String, Object>) extValue[ CD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_48 $$ assertThat(XContentMapValues.extractValue("xxx.yyy", map).toString(), equalTo("value"))[ CD ]
Line_4 $$ Map<String, Object> map-->Line_16 $$ assertThat(XContentMapValues.extractValue("path1.path2.test_me", map), nullValue())[ FD ]
Line_4 $$ Map<String, Object> map-->Line_18 $$ Object extValue = XContentMapValues.extractValue("path1.path2", map)[ FD ]
Line_13 $$ map = parser.map()-->Line_30 $$ extValue = XContentMapValues.extractValue("path1.test", map)[ FD ]
Line_4 $$ Map<String, Object> map-->Line_38 $$ extValue = XContentMapValues.extractValue("path1.path2.test", map)[ FD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_22 $$ extValue = XContentMapValues.extractValue("path1", map)[ CD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_44 $$ builder = XContentFactory.jsonBuilder().startObject().field("xxx.yyy", "value").endObject()[ CD ]
Line_40 $$ extListValue = (List) extValue-->Line_41 $$ assertThat(extListValue.size(), equalTo(2))[ FD ]
Line_6 $$ map = parser.map()-->Line_17 $$ assertThat(XContentMapValues.extractValue("path1.non_path2.test", map), nullValue())[ FD ]
Line_3 $$ XContentBuilder builder = XContentFactory.jsonBuilder().startObject().field("test", "value").endObject()-->Line_49 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1.xxx").startObject("path2.yyy").field("test", "value").endObject().endObject().endObject()[ FD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_39 $$ assertThat(extValue, instanceOf(List.class))[ CD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_20 $$ Map<String, Object> extMapValue = (Map<String, Object>) extValue[ CD ]
Line_18 $$ Object extValue = XContentMapValues.extractValue("path1.path2", map)-->Line_22 $$ extValue = XContentMapValues.extractValue("path1", map)[ FD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_43 $$ assertThat(extListValue.get(1).toString(), equalTo("value2"))[ CD ]
Line_3 $$ XContentBuilder builder = XContentFactory.jsonBuilder().startObject().field("test", "value").endObject()-->Line_50 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) [ FD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_16 $$ assertThat(XContentMapValues.extractValue("path1.path2.test_me", map), nullValue())[ CD ]
Line_32 $$ List extListValue = (List) extValue-->Line_40 $$ extListValue = (List) extValue[ FD ]
Line_5 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) -->Line_51 $$ map = parser.map()[ FD ]
Line_4 $$ Map<String, Object> map-->Line_8 $$ assertThat(XContentMapValues.extractValue("test", map).toString(), equalTo("value"))[ FD ]
Line_44 $$ builder = XContentFactory.jsonBuilder().startObject().field("xxx.yyy", "value").endObject()-->Line_50 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) [ FD ]
Line_11 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").startObject("path2").field("test", "value").endObject().endObject().endObject()-->Line_26 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").field("test", "value1", "value2").endObject().endObject()[ FD ]
Line_6 $$ map = parser.map()-->Line_30 $$ extValue = XContentMapValues.extractValue("path1.test", map)[ FD ]
Line_13 $$ map = parser.map()-->Line_38 $$ extValue = XContentMapValues.extractValue("path1.path2.test", map)[ FD ]
Line_44 $$ builder = XContentFactory.jsonBuilder().startObject().field("xxx.yyy", "value").endObject()-->Line_49 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1.xxx").startObject("path2.yyy").field("test", "value").endObject().endObject().endObject()[ FD ]
Line_22 $$ extValue = XContentMapValues.extractValue("path1", map)-->Line_38 $$ extValue = XContentMapValues.extractValue("path1.path2.test", map)[ FD ]
Line_20 $$ Map<String, Object> extMapValue = (Map<String, Object>) extValue-->Line_25 $$ assertThat(extMapValue.containsKey("path2"), equalTo(true))[ FD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_30 $$ extValue = XContentMapValues.extractValue("path1.test", map)[ CD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_41 $$ assertThat(extListValue.size(), equalTo(2))[ CD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_34 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").startArray("path2").startObject().field("test", "value1").endObject().startObject().field("test", "value2").endObject().endArray().endObject().endObject()[ CD ]
Line_30 $$ extValue = XContentMapValues.extractValue("path1.test", map)-->Line_31 $$ assertThat(extValue, instanceOf(List.class))[ FD ]
Line_24 $$ extMapValue = (Map<String, Object>) extValue-->Line_25 $$ assertThat(extMapValue.containsKey("path2"), equalTo(true))[ FD ]
Line_28 $$ map = parser.map()-->Line_46 $$ map = parser.map()[ FD ]
Line_2 $$ public void testExtractValue() throws Exception -->Line_10 $$ assertThat(XContentMapValues.extractValue("something.else.2", map), nullValue())[ CD ]
Line_36 $$ map = parser.map()-->Line_51 $$ map = parser.map()[ FD ]
Line_13 $$ map = parser.map()-->Line_17 $$ assertThat(XContentMapValues.extractValue("path1.non_path2.test", map), nullValue())[ FD ]
Line_3 $$ XContentBuilder builder = XContentFactory.jsonBuilder().startObject().field("test", "value").endObject()-->Line_5 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) [ FD ]
Line_13 $$ map = parser.map()-->Line_18 $$ Object extValue = XContentMapValues.extractValue("path1.path2", map)[ FD ]
Line_26 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").field("test", "value1", "value2").endObject().endObject()-->Line_44 $$ builder = XContentFactory.jsonBuilder().startObject().field("xxx.yyy", "value").endObject()[ FD ]
Line_22 $$ extValue = XContentMapValues.extractValue("path1", map)-->Line_30 $$ extValue = XContentMapValues.extractValue("path1.test", map)[ FD ]
Line_6 $$ map = parser.map()-->Line_36 $$ map = parser.map()[ FD ]
Line_36 $$ map = parser.map()-->Line_46 $$ map = parser.map()[ FD ]
Line_32 $$ List extListValue = (List) extValue-->Line_41 $$ assertThat(extListValue.size(), equalTo(2))[ FD ]
Line_36 $$ map = parser.map()-->Line_38 $$ extValue = XContentMapValues.extractValue("path1.path2.test", map)[ FD ]
Line_11 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").startObject("path2").field("test", "value").endObject().endObject().endObject()-->Line_34 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").startArray("path2").startObject().field("test", "value1").endObject().startObject().field("test", "value2").endObject().endArray().endObject().endObject()[ FD ]
Line_3 $$ XContentBuilder builder = XContentFactory.jsonBuilder().startObject().field("test", "value").endObject()-->Line_44 $$ builder = XContentFactory.jsonBuilder().startObject().field("xxx.yyy", "value").endObject()[ FD ]
Line_36 $$ map = parser.map()-->Line_53 $$ assertThat(XContentMapValues.extractValue("path1.xxx.path2.yyy.test", map).toString(), equalTo("value"))[ FD ]
Line_34 $$ builder = XContentFactory.jsonBuilder().startObject().startObject("path1").startArray("path2").startObject().field("test", "value1").endObject().startObject().field("test", "value2").endObject().endArray().endObject().endObject()-->Line_50 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(builder.string())) [ FD ]
Line_6 $$ map = parser.map()-->Line_15 $$ assertThat(XContentMapValues.extractValue("path1.path2.test", map).toString(), equalTo("value"))[ FD ]
Line_6 $$ map = parser.map()-->Line_28 $$ map = parser.map()[ FD ]
Line_13 $$ map = parser.map()-->Line_16 $$ assertThat(XContentMapValues.extractValue("path1.path2.test_me", map), nullValue())[ FD ]
Line_4 $$ Map<String, Object> map-->Line_10 $$ assertThat(XContentMapValues.extractValue("something.else.2", map), nullValue())[ FD ]
Line_6 $$ map = parser.map()-->Line_16 $$ assertThat(XContentMapValues.extractValue("path1.path2.test_me", map), nullValue())[ FD ]
Line_40 $$ extListValue = (List) extValue-->Line_42 $$ assertThat(extListValue.get(0).toString(), equalTo("value1"))[ FD ]
Line_6 $$ map = parser.map()-->Line_46 $$ map = parser.map()[ FD ]
Line_18 $$ Object extValue = XContentMapValues.extractValue("path1.path2", map)-->Line_19 $$ assertThat(extValue, instanceOf(Map.class))[ FD ]
Line_4 $$ Map<String, Object> map-->Line_46 $$ map = parser.map()[ FD ]
Line_6 $$ map = parser.map()-->Line_51 $$ map = parser.map()[ FD ]
Line_18 $$ Object extValue = XContentMapValues.extractValue("path1.path2", map)-->Line_38 $$ extValue = XContentMapValues.extractValue("path1.path2.test", map)[ FD ]
Line_4 $$ Map<String, Object> map-->Line_48 $$ assertThat(XContentMapValues.extractValue("xxx.yyy", map).toString(), equalTo("value"))[ FD ]
