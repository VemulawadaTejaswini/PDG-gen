Line_17 $$ modulesDirectory = path-->Line_63 $$ if (modulesDirectory == null) [ FD ]
Line_6 $$ final Set<String> refsToModules = new HashSet<String>()-->Line_111 $$ refsToModules.remove(projectName)[ FD ]
Line_5 $$ final Collection<String> unknownJdks = new TreeSet<String>()-->Line_121 $$ if (!unknownJdks.isEmpty()) [ FD ]
Line_138 $$ if (model == null) -->Line_139 $$ buf.append("<br><b>Please export Eclipse user libraries and import them now from resulted .userlibraries file</b>")[ CD ]
Line_122 $$ if (message.length() > 0) -->Line_125 $$ message.append("Imported project refers to unknown jdks")[ CD ]
Line_131 $$ if (!unknownLibraries.isEmpty()) -->Line_133 $$ buf.append("<html><body>")[ CD ]
Line_43 $$ ApplicationManager.getApplication().runWriteAction(new ThrowableComputable<Void, IOException>() -->Line_47 $$ virtualFile.delete(this)[ CD ]
Line_93 $$ if (model == null) -->Line_94 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() [ CD ]
Line_4 $$ final Collection<String> unknownLibraries = new TreeSet<String>()-->Line_131 $$ if (!unknownLibraries.isEmpty()) [ FD ]
Line_138 $$ if (model == null) -->Line_150 $$ final VirtualFile selectedFile = FileChooser.chooseFile(descriptor, project, project.getBaseDir())[ CD ]
Line_25 $$ final File emlFile = new File(modulesDirectory + File.separator + moduleName + EclipseXml.IDEA_SETTINGS_POSTFIX)-->Line_26 $$ if (emlFile.isFile()) [ FD ]
Line_11 $$ final ModifiableRootModel[] rootModels = new ModifiableRootModel[getParameters().projectsToConvert.size()]-->Line_97 $$ ModifiableModelCommitter.multiCommit(rootModels, moduleModel)[ FD ]
Line_131 $$ if (!unknownLibraries.isEmpty()) -->Line_138 $$ if (model == null) [ CD ]
Line_22 $$ if (imlFile.isFile()) -->Line_23 $$ files.add(imlFile)[ CD ]
Line_14 $$ for (String path : getParameters().projectsToConvert) -->Line_17 $$ modulesDirectory = path[ FD ]
Line_7 $$ final List<Module> result = new ArrayList<Module>()-->Line_67 $$ result.add(module)[ FD ]
Line_15 $$ String modulesDirectory = getParameters().converterOptions.commonModulesDirectory-->Line_16 $$ if (modulesDirectory == null) [ FD ]
Line_77 $$ if (classpathFile.exists()) -->Line_78 $$ Element classpathElement = JDOMUtil.load(classpathFile)[ CD ]
Line_8 $$ final Map<Module, Set<String>> module2NatureNames = new HashMap<Module, Set<String>>()-->Line_70 $$ module2NatureNames.put(module, natures)[ FD ]
Line_6 $$ final Set<String> refsToModules = new HashSet<String>()-->Line_107 $$ refsToModules.removeAll(getParameters().existingModuleNames)[ FD ]
Line_10 $$ final ModifiableModuleModel moduleModel = model != null ? model : ModuleManager.getInstance(project).getModifiableModel()-->Line_97 $$ ModifiableModelCommitter.multiCommit(rootModels, moduleModel)[ FD ]
Line_15 $$ String modulesDirectory = getParameters().converterOptions.commonModulesDirectory-->Line_63 $$ if (modulesDirectory == null) [ FD ]
Line_138 $$ if (model == null) -->Line_140 $$ buf.append("</body></html>")[ CD ]
Line_42 $$ if (virtualFile != null) -->Line_43 $$ ApplicationManager.getApplication().runWriteAction(new ThrowableComputable<Void, IOException>() [ CD ]
Line_38 $$ if (resultCode == Messages.NO) -->Line_56 $$ return result[ CD ]
Line_77 $$ if (classpathFile.exists()) -->Line_79 $$ classpathReader.readClasspath(rootModel, unknownLibraries, unknownJdks, refsToModules, getParameters().converterOptions.testPattern, classpathElement)[ CD ]
Line_6 $$ final Set<String> refsToModules = new HashSet<String>()-->Line_79 $$ classpathReader.readClasspath(rootModel, unknownLibraries, unknownJdks, refsToModules, getParameters().converterOptions.testPattern, classpathElement)[ FD ]
Line_5 $$ final Collection<String> unknownJdks = new TreeSet<String>()-->Line_79 $$ classpathReader.readClasspath(rootModel, unknownLibraries, unknownJdks, refsToModules, getParameters().converterOptions.testPattern, classpathElement)[ FD ]
Line_160 $$ if (message.length() > 0) -->Line_161 $$ Messages.showErrorDialog(project, message.toString(), getTitle())[ CD ]
Line_31 $$ final int resultCode = Messages.showYesNoCancelDialog(ApplicationInfoEx.getInstanceEx().getFullApplicationName() + " module files found:\n" + StringUtil.join(files, new Function<File, String>() -->Line_37 $$ if (resultCode != Messages.YES) [ FD ]
Line_141 $$ final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, false, false, false, false) -->Line_145 $$ return super.isFileSelectable(file) && Comparing.strEqual(file.getExtension(), "userlibraries")[ FD ]
Line_31 $$ final int resultCode = Messages.showYesNoCancelDialog(ApplicationInfoEx.getInstanceEx().getFullApplicationName() + " module files found:\n" + StringUtil.join(files, new Function<File, String>() -->Line_41 $$ final VirtualFile virtualFile = localFileSystem.findFileByIoFile(file)[ FD ]
Line_14 $$ for (String path : getParameters().projectsToConvert) -->Line_19 $$ final String moduleName = EclipseProjectFinder.findProjectName(path)[ FD ]
Line_110 $$ if (projectName != null) -->Line_112 $$ getParameters().existingModuleNames.add(projectName)[ CD ]
Line_6 $$ final Set<String> refsToModules = new HashSet<String>()-->Line_115 $$ if (!refsToModules.isEmpty()) [ FD ]
Line_138 $$ if (model == null) -->Line_149 $$ descriptor.setTitle(getTitle())[ CD ]
Line_110 $$ if (projectName != null) -->Line_111 $$ refsToModules.remove(projectName)[ CD ]
Line_141 $$ final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, false, false, false, false) -->Line_145 $$ return super.isFileSelectable(file) && Comparing.strEqual(file.getExtension(), "userlibraries")[ CD ]
Line_15 $$ String modulesDirectory = getParameters().converterOptions.commonModulesDirectory-->Line_17 $$ modulesDirectory = path[ FD ]
Line_4 $$ final Collection<String> unknownLibraries = new TreeSet<String>()-->Line_105 $$ createEclipseLibrary(project, unknownLibraries, IdeaXml.ECLIPSE_LIBRARY)[ FD ]
Line_16 $$ if (modulesDirectory == null) -->Line_17 $$ modulesDirectory = path[ CD ]
Line_77 $$ if (classpathFile.exists()) -->Line_81 $$ EclipseClasspathReader.setOutputUrl(rootModel, path + "/bin")[ CD ]
Line_21 $$ final File imlFile = new File(modulesDirectory + File.separator + moduleName + IdeaXml.IML_EXT)-->Line_22 $$ if (imlFile.isFile()) [ FD ]
Line_31 $$ final int resultCode = Messages.showYesNoCancelDialog(ApplicationInfoEx.getInstanceEx().getFullApplicationName() + " module files found:\n" + StringUtil.join(files, new Function<File, String>() -->Line_34 $$ return file.getPath()[ CD ]
Line_8 $$ final Map<Module, Set<String>> module2NatureNames = new HashMap<Module, Set<String>>()-->Line_104 $$ scheduleNaturesImporting(project, module2NatureNames)[ FD ]
Line_12 $$ final Set<File> files = new HashSet<File>()-->Line_27 $$ files.add(emlFile)[ FD ]
Line_10 $$ final ModifiableModuleModel moduleModel = model != null ? model : ModuleManager.getInstance(project).getModifiableModel()-->Line_66 $$ final Module module = moduleModel.newModule(modulesDirectory + "/" + EclipseProjectFinder.findProjectName(path) + IdeaXml.IML_EXT, StdModuleTypes.JAVA.getId())[ FD ]
Line_94 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_97 $$ ModifiableModelCommitter.multiCommit(rootModels, moduleModel)[ CD ]
Line_31 $$ final int resultCode = Messages.showYesNoCancelDialog(ApplicationInfoEx.getInstanceEx().getFullApplicationName() + " module files found:\n" + StringUtil.join(files, new Function<File, String>() -->Line_145 $$ return super.isFileSelectable(file) && Comparing.strEqual(file.getExtension(), "userlibraries")[ FD ]
Line_30 $$ if (!files.isEmpty()) -->Line_37 $$ if (resultCode != Messages.YES) [ CD ]
Line_4 $$ final Collection<String> unknownLibraries = new TreeSet<String>()-->Line_79 $$ classpathReader.readClasspath(rootModel, unknownLibraries, unknownJdks, refsToModules, getParameters().converterOptions.testPattern, classpathElement)[ FD ]
Line_138 $$ if (model == null) -->Line_148 $$ descriptor.setDescription(buf.toString())[ CD ]
Line_69 $$ if (natures.size() > 0) -->Line_70 $$ module2NatureNames.put(module, natures)[ CD ]
Line_19 $$ final String moduleName = EclipseProjectFinder.findProjectName(path)-->Line_20 $$ moduleNames.add(moduleName)[ FD ]
Line_43 $$ ApplicationManager.getApplication().runWriteAction(new ThrowableComputable<Void, IOException>() -->Line_48 $$ return null[ CD ]
Line_12 $$ final Set<File> files = new HashSet<File>()-->Line_31 $$ final int resultCode = Messages.showYesNoCancelDialog(ApplicationInfoEx.getInstanceEx().getFullApplicationName() + " module files found:\n" + StringUtil.join(files, new Function<File, String>() [ FD ]
Line_26 $$ if (emlFile.isFile()) -->Line_27 $$ files.add(emlFile)[ CD ]
Line_12 $$ final Set<File> files = new HashSet<File>()-->Line_23 $$ files.add(imlFile)[ FD ]
Line_131 $$ if (!unknownLibraries.isEmpty()) -->Line_134 $$ buf.append(EclipseBundle.message("eclipse.import.warning.undefinded.libraries"))[ CD ]
Line_31 $$ final int resultCode = Messages.showYesNoCancelDialog(ApplicationInfoEx.getInstanceEx().getFullApplicationName() + " module files found:\n" + StringUtil.join(files, new Function<File, String>() -->Line_38 $$ if (resultCode == Messages.NO) [ FD ]
Line_30 $$ if (!files.isEmpty()) -->Line_31 $$ final int resultCode = Messages.showYesNoCancelDialog(ApplicationInfoEx.getInstanceEx().getFullApplicationName() + " module files found:\n" + StringUtil.join(files, new Function<File, String>() [ CD ]
Line_38 $$ if (resultCode == Messages.NO) -->Line_39 $$ final LocalFileSystem localFileSystem = LocalFileSystem.getInstance()[ CD ]
Line_4 $$ final Collection<String> unknownLibraries = new TreeSet<String>()-->Line_153 $$ EclipseUserLibrariesHelper.readProjectLibrariesContent(selectedFile, project, unknownLibraries)[ FD ]
Line_85 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_88 $$ rootModel.commit()[ CD ]
Line_14 $$ for (String path : getParameters().projectsToConvert) -->Line_66 $$ final Module module = moduleModel.newModule(modulesDirectory + "/" + EclipseProjectFinder.findProjectName(path) + IdeaXml.IML_EXT, StdModuleTypes.JAVA.getId())[ FD ]
Line_14 $$ for (String path : getParameters().projectsToConvert) -->Line_68 $$ final Set<String> natures = collectNatures(path)[ FD ]
Line_84 $$ if (model != null) -->Line_85 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() [ CD ]
Line_12 $$ final Set<File> files = new HashSet<File>()-->Line_30 $$ if (!files.isEmpty()) [ FD ]
Line_138 $$ if (model == null) -->Line_151 $$ if (selectedFile != null) [ CD ]
Line_121 $$ if (!unknownJdks.isEmpty()) -->Line_122 $$ if (message.length() > 0) [ CD ]
Line_25 $$ final File emlFile = new File(modulesDirectory + File.separator + moduleName + EclipseXml.IDEA_SETTINGS_POSTFIX)-->Line_27 $$ files.add(emlFile)[ FD ]
Line_37 $$ if (resultCode != Messages.YES) -->Line_38 $$ if (resultCode == Messages.NO) [ CD ]
Line_13 $$ final Set<String> moduleNames = new THashSet<String>(getParameters().projectsToConvert.size())-->Line_20 $$ moduleNames.add(moduleName)[ FD ]
Line_14 $$ for (String path : getParameters().projectsToConvert) -->Line_109 $$ final String projectName = EclipseProjectFinder.findProjectName(path)[ FD ]
Line_42 $$ if (virtualFile != null) -->Line_52 $$ FileUtil.delete(file)[ CD ]
Line_31 $$ final int resultCode = Messages.showYesNoCancelDialog(ApplicationInfoEx.getInstanceEx().getFullApplicationName() + " module files found:\n" + StringUtil.join(files, new Function<File, String>() -->Line_52 $$ FileUtil.delete(file)[ FD ]
Line_122 $$ if (message.length() > 0) -->Line_123 $$ message.append("\nand jdks")[ CD ]
Line_31 $$ final int resultCode = Messages.showYesNoCancelDialog(ApplicationInfoEx.getInstanceEx().getFullApplicationName() + " module files found:\n" + StringUtil.join(files, new Function<File, String>() -->Line_34 $$ return file.getPath()[ FD ]
Line_115 $$ if (!refsToModules.isEmpty()) -->Line_116 $$ message.append("Unknown modules detected")[ CD ]
Line_21 $$ final File imlFile = new File(modulesDirectory + File.separator + moduleName + IdeaXml.IML_EXT)-->Line_23 $$ files.add(imlFile)[ FD ]
