Line_4 $$ Context context = new Context()-->Line_5 $$ context.setContextPath("/foo")[ FD ]
Line_13 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_17 $$ HttpURLConnection conn = aUrl.openConnection(url, token)[ CD ]
Line_17 $$ HttpURLConnection conn = aUrl.openConnection(url, token)-->Line_19 $$ List<String> ret = IOUtils.readLines(conn.getInputStream())[ FD ]
Line_13 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_21 $$ Assert.assertEquals(FOO_USER, ret.get(0))[ CD ]
Line_3 $$ final Server jetty = createJettyServer()-->Line_32 $$ jetty.stop()[ FD ]
Line_11 $$ final URL url = new URL(getJettyURL() + "/foo/bar")-->Line_23 $$ aUrl.getDelegationToken(url, token, FOO_USER)[ FD ]
Line_19 $$ List<String> ret = IOUtils.readLines(conn.getInputStream())-->Line_21 $$ Assert.assertEquals(FOO_USER, ret.get(0))[ FD ]
Line_11 $$ final URL url = new URL(getJettyURL() + "/foo/bar")-->Line_17 $$ HttpURLConnection conn = aUrl.openConnection(url, token)[ FD ]
Line_4 $$ Context context = new Context()-->Line_8 $$ context.addServlet(new ServletHolder(UserServlet.class), "/bar")[ FD ]
Line_12 $$ UserGroupInformation ugi = UserGroupInformation.createRemoteUser(FOO_USER)-->Line_13 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() [ FD ]
Line_19 $$ List<String> ret = IOUtils.readLines(conn.getInputStream())-->Line_20 $$ Assert.assertEquals(1, ret.size())[ FD ]
Line_13 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_18 $$ Assert.assertEquals(HttpURLConnection.HTTP_OK, conn.getResponseCode())[ CD ]
Line_4 $$ Context context = new Context()-->Line_7 $$ context.addFilter(new FilterHolder(filterClass), "/*", 0)[ FD ]
Line_15 $$ DelegationTokenAuthenticatedURL.Token token = new DelegationTokenAuthenticatedURL.Token()-->Line_17 $$ HttpURLConnection conn = aUrl.openConnection(url, token)[ FD ]
Line_13 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_15 $$ DelegationTokenAuthenticatedURL.Token token = new DelegationTokenAuthenticatedURL.Token()[ CD ]
Line_2 $$ private void testDelegationTokenAuthenticatedURLWithNoDT(Class<? extends Filter> filterClass) throws Exception -->Line_5 $$ context.setContextPath("/foo")[ CD ]
Line_13 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_28 $$ return null[ CD ]
Line_16 $$ DelegationTokenAuthenticatedURL aUrl = new DelegationTokenAuthenticatedURL()-->Line_23 $$ aUrl.getDelegationToken(url, token, FOO_USER)[ FD ]
Line_16 $$ DelegationTokenAuthenticatedURL aUrl = new DelegationTokenAuthenticatedURL()-->Line_17 $$ HttpURLConnection conn = aUrl.openConnection(url, token)[ FD ]
Line_2 $$ private void testDelegationTokenAuthenticatedURLWithNoDT(Class<? extends Filter> filterClass) throws Exception -->Line_7 $$ context.addFilter(new FilterHolder(filterClass), "/*", 0)[ CD ]
Line_2 $$ private void testDelegationTokenAuthenticatedURLWithNoDT(Class<? extends Filter> filterClass) throws Exception -->Line_4 $$ Context context = new Context()[ CD ]
Line_15 $$ DelegationTokenAuthenticatedURL.Token token = new DelegationTokenAuthenticatedURL.Token()-->Line_23 $$ aUrl.getDelegationToken(url, token, FOO_USER)[ FD ]
Line_13 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_16 $$ DelegationTokenAuthenticatedURL aUrl = new DelegationTokenAuthenticatedURL()[ CD ]
Line_2 $$ private void testDelegationTokenAuthenticatedURLWithNoDT(Class<? extends Filter> filterClass) throws Exception -->Line_3 $$ final Server jetty = createJettyServer()[ CD ]
Line_13 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_19 $$ List<String> ret = IOUtils.readLines(conn.getInputStream())[ CD ]
Line_4 $$ Context context = new Context()-->Line_6 $$ jetty.setHandler(context)[ FD ]
Line_2 $$ private void testDelegationTokenAuthenticatedURLWithNoDT(Class<? extends Filter> filterClass) throws Exception -->Line_6 $$ jetty.setHandler(context)[ CD ]
Line_13 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_20 $$ Assert.assertEquals(1, ret.size())[ CD ]
Line_3 $$ final Server jetty = createJettyServer()-->Line_10 $$ jetty.start()[ FD ]
Line_17 $$ HttpURLConnection conn = aUrl.openConnection(url, token)-->Line_18 $$ Assert.assertEquals(HttpURLConnection.HTTP_OK, conn.getResponseCode())[ FD ]
Line_2 $$ private void testDelegationTokenAuthenticatedURLWithNoDT(Class<? extends Filter> filterClass) throws Exception -->Line_8 $$ context.addServlet(new ServletHolder(UserServlet.class), "/bar")[ CD ]
Line_3 $$ final Server jetty = createJettyServer()-->Line_6 $$ jetty.setHandler(context)[ FD ]
