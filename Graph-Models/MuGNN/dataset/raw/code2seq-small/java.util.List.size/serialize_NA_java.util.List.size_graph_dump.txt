Line_2 $$ public static String serialize(Recurrence recurrence) -->Line_27 $$ if (jCalendar != null) [ CD ]
Line_26 $$ Calendar jCalendar = recurrence.getUntilJCalendar()-->Line_28 $$ DateValue dateValue = _toDateValue(jCalendar)[ FD ]
Line_2 $$ public static String serialize(Recurrence recurrence) -->Line_7 $$ List<WeekdayNum> weekdayNums = new ArrayList()[ CD ]
Line_32 $$ List<Calendar> exceptionJCalendars = recurrence.getExceptionJCalendars()-->Line_36 $$ dateValues[i] = _toDateValue(exceptionJCalendars.get(i))[ FD ]
Line_7 $$ List<WeekdayNum> weekdayNums = new ArrayList()-->Line_11 $$ weekdayNums.add(weekdayNum)[ FD ]
Line_2 $$ public static String serialize(Recurrence recurrence) -->Line_22 $$ rRule.setCount(recurrence.getCount())[ CD ]
Line_6 $$ RRule rRule = new RRule()-->Line_29 $$ rRule.setUntil(dateValue)[ FD ]
Line_32 $$ List<Calendar> exceptionJCalendars = recurrence.getExceptionJCalendars()-->Line_35 $$ for (int i = 0; i < exceptionJCalendars.size(); i++) [ FD ]
Line_14 $$ List<Integer> months = recurrence.getMonths()-->Line_15 $$ if (months != null) [ FD ]
Line_17 $$ for (int i = 0; i < monthsArray.length; i++) -->Line_35 $$ for (int i = 0; i < exceptionJCalendars.size(); i++) [ FD ]
Line_2 $$ public static String serialize(Recurrence recurrence) -->Line_14 $$ List<Integer> months = recurrence.getMonths()[ FD ]
Line_2 $$ public static String serialize(Recurrence recurrence) -->Line_24 $$ rRule.setFreq(frequency)[ CD ]
Line_7 $$ List<WeekdayNum> weekdayNums = new ArrayList()-->Line_13 $$ rRule.setByDay(weekdayNums)[ FD ]
Line_16 $$ int[] monthsArray = ArrayUtil.toIntArray(months)-->Line_20 $$ rRule.setByMonth(monthsArray)[ FD ]
Line_33 $$ if (!exceptionJCalendars.isEmpty()) -->Line_34 $$ DateValue[] dateValues = new DateValue[exceptionJCalendars.size()][ CD ]
Line_27 $$ if (jCalendar != null) -->Line_28 $$ DateValue dateValue = _toDateValue(jCalendar)[ CD ]
Line_2 $$ public static String serialize(Recurrence recurrence) -->Line_3 $$ if (recurrence == null) [ FD ]
Line_2 $$ public static String serialize(Recurrence recurrence) -->Line_14 $$ List<Integer> months = recurrence.getMonths()[ CD ]
Line_2 $$ public static String serialize(Recurrence recurrence) -->Line_23 $$ com.google.ical.values.Frequency frequency = com.google.ical.values.Frequency.valueOf(String.valueOf(recurrence.getFrequency()))[ FD ]
Line_2 $$ public static String serialize(Recurrence recurrence) -->Line_25 $$ rRule.setInterval(recurrence.getInterval())[ CD ]
Line_33 $$ if (!exceptionJCalendars.isEmpty()) -->Line_35 $$ for (int i = 0; i < exceptionJCalendars.size(); i++) [ CD ]
Line_2 $$ public static String serialize(Recurrence recurrence) -->Line_31 $$ String data = rRule.toIcal()[ CD ]
Line_35 $$ for (int i = 0; i < exceptionJCalendars.size(); i++) -->Line_36 $$ dateValues[i] = _toDateValue(exceptionJCalendars.get(i))[ FD ]
Line_2 $$ public static String serialize(Recurrence recurrence) -->Line_32 $$ List<Calendar> exceptionJCalendars = recurrence.getExceptionJCalendars()[ FD ]
Line_38 $$ RDateList rDateList = new RDateList(TimeZone.getTimeZone(StringPool.UTC))-->Line_40 $$ rDateList.setName(_EXDATE)[ FD ]
Line_2 $$ public static String serialize(Recurrence recurrence) -->Line_25 $$ rRule.setInterval(recurrence.getInterval())[ FD ]
Line_6 $$ RRule rRule = new RRule()-->Line_24 $$ rRule.setFreq(frequency)[ FD ]
Line_2 $$ public static String serialize(Recurrence recurrence) -->Line_26 $$ Calendar jCalendar = recurrence.getUntilJCalendar()[ FD ]
Line_6 $$ RRule rRule = new RRule()-->Line_13 $$ rRule.setByDay(weekdayNums)[ FD ]
Line_15 $$ if (months != null) -->Line_20 $$ rRule.setByMonth(monthsArray)[ CD ]
Line_2 $$ public static String serialize(Recurrence recurrence) -->Line_15 $$ if (months != null) [ CD ]
Line_15 $$ if (months != null) -->Line_16 $$ int[] monthsArray = ArrayUtil.toIntArray(months)[ CD ]
Line_23 $$ com.google.ical.values.Frequency frequency = com.google.ical.values.Frequency.valueOf(String.valueOf(recurrence.getFrequency()))-->Line_24 $$ rRule.setFreq(frequency)[ FD ]
Line_28 $$ DateValue dateValue = _toDateValue(jCalendar)-->Line_29 $$ rRule.setUntil(dateValue)[ FD ]
Line_10 $$ WeekdayNum weekdayNum = new WeekdayNum(positionalWeekday.getPosition(), wday)-->Line_11 $$ weekdayNums.add(weekdayNum)[ FD ]
Line_15 $$ if (months != null) -->Line_17 $$ for (int i = 0; i < monthsArray.length; i++) [ CD ]
Line_33 $$ if (!exceptionJCalendars.isEmpty()) -->Line_38 $$ RDateList rDateList = new RDateList(TimeZone.getTimeZone(StringPool.UTC))[ CD ]
Line_2 $$ public static String serialize(Recurrence recurrence) -->Line_3 $$ if (recurrence == null) [ CD ]
Line_2 $$ public static String serialize(Recurrence recurrence) -->Line_22 $$ rRule.setCount(recurrence.getCount())[ FD ]
Line_2 $$ public static String serialize(Recurrence recurrence) -->Line_32 $$ List<Calendar> exceptionJCalendars = recurrence.getExceptionJCalendars()[ CD ]
Line_2 $$ public static String serialize(Recurrence recurrence) -->Line_33 $$ if (!exceptionJCalendars.isEmpty()) [ CD ]
Line_8 $$ for (PositionalWeekday positionalWeekday : recurrence.getPositionalWeekdays()) -->Line_9 $$ com.google.ical.values.Weekday wday = _weekdaysMap.get(positionalWeekday.getWeekday())[ FD ]
Line_6 $$ RRule rRule = new RRule()-->Line_31 $$ String data = rRule.toIcal()[ FD ]
Line_27 $$ if (jCalendar != null) -->Line_29 $$ rRule.setUntil(dateValue)[ CD ]
Line_33 $$ if (!exceptionJCalendars.isEmpty()) -->Line_39 $$ rDateList.setDatesUtc(dateValues)[ CD ]
Line_33 $$ if (!exceptionJCalendars.isEmpty()) -->Line_40 $$ rDateList.setName(_EXDATE)[ CD ]
Line_32 $$ List<Calendar> exceptionJCalendars = recurrence.getExceptionJCalendars()-->Line_34 $$ DateValue[] dateValues = new DateValue[exceptionJCalendars.size()][ FD ]
Line_38 $$ RDateList rDateList = new RDateList(TimeZone.getTimeZone(StringPool.UTC))-->Line_41 $$ data = data.concat(StringPool.NEW_LINE).concat(rDateList.toIcal())[ FD ]
Line_38 $$ RDateList rDateList = new RDateList(TimeZone.getTimeZone(StringPool.UTC))-->Line_39 $$ rDateList.setDatesUtc(dateValues)[ FD ]
Line_2 $$ public static String serialize(Recurrence recurrence) -->Line_6 $$ RRule rRule = new RRule()[ CD ]
Line_26 $$ Calendar jCalendar = recurrence.getUntilJCalendar()-->Line_27 $$ if (jCalendar != null) [ FD ]
Line_33 $$ if (!exceptionJCalendars.isEmpty()) -->Line_41 $$ data = data.concat(StringPool.NEW_LINE).concat(rDateList.toIcal())[ CD ]
Line_2 $$ public static String serialize(Recurrence recurrence) -->Line_26 $$ Calendar jCalendar = recurrence.getUntilJCalendar()[ CD ]
Line_17 $$ for (int i = 0; i < monthsArray.length; i++) -->Line_18 $$ monthsArray[i]++[ CD ]
Line_2 $$ public static String serialize(Recurrence recurrence) -->Line_23 $$ com.google.ical.values.Frequency frequency = com.google.ical.values.Frequency.valueOf(String.valueOf(recurrence.getFrequency()))[ CD ]
Line_8 $$ for (PositionalWeekday positionalWeekday : recurrence.getPositionalWeekdays()) -->Line_10 $$ WeekdayNum weekdayNum = new WeekdayNum(positionalWeekday.getPosition(), wday)[ FD ]
Line_35 $$ for (int i = 0; i < exceptionJCalendars.size(); i++) -->Line_36 $$ dateValues[i] = _toDateValue(exceptionJCalendars.get(i))[ CD ]
Line_34 $$ DateValue[] dateValues = new DateValue[exceptionJCalendars.size()]-->Line_39 $$ rDateList.setDatesUtc(dateValues)[ FD ]
Line_2 $$ public static String serialize(Recurrence recurrence) -->Line_13 $$ rRule.setByDay(weekdayNums)[ CD ]
Line_17 $$ for (int i = 0; i < monthsArray.length; i++) -->Line_36 $$ dateValues[i] = _toDateValue(exceptionJCalendars.get(i))[ FD ]
Line_2 $$ public static String serialize(Recurrence recurrence) -->Line_8 $$ for (PositionalWeekday positionalWeekday : recurrence.getPositionalWeekdays()) [ FD ]
Line_14 $$ List<Integer> months = recurrence.getMonths()-->Line_16 $$ int[] monthsArray = ArrayUtil.toIntArray(months)[ FD ]
Line_3 $$ if (recurrence == null) -->Line_4 $$ return null[ CD ]
Line_6 $$ RRule rRule = new RRule()-->Line_25 $$ rRule.setInterval(recurrence.getInterval())[ FD ]
Line_32 $$ List<Calendar> exceptionJCalendars = recurrence.getExceptionJCalendars()-->Line_33 $$ if (!exceptionJCalendars.isEmpty()) [ FD ]
Line_2 $$ public static String serialize(Recurrence recurrence) -->Line_43 $$ return data[ CD ]
Line_6 $$ RRule rRule = new RRule()-->Line_20 $$ rRule.setByMonth(monthsArray)[ FD ]
Line_6 $$ RRule rRule = new RRule()-->Line_22 $$ rRule.setCount(recurrence.getCount())[ FD ]
Line_31 $$ String data = rRule.toIcal()-->Line_41 $$ data = data.concat(StringPool.NEW_LINE).concat(rDateList.toIcal())[ FD ]
