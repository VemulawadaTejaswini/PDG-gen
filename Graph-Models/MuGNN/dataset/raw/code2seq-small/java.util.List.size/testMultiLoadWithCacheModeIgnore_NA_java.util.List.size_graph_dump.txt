Line_3 $$ Session session = openSession()-->Line_5 $$ List<SimpleEntity> list = session.byMultipleIds(SimpleEntity.class).with(CacheMode.IGNORE).multiLoad(ids(56))[ FD ]
Line_2 $$ public void testMultiLoadWithCacheModeIgnore() -->Line_6 $$ session.getTransaction().commit()[ CD ]
Line_2 $$ public void testMultiLoadWithCacheModeIgnore() -->Line_8 $$ assertEquals(56, list.size())[ CD ]
Line_2 $$ public void testMultiLoadWithCacheModeIgnore() -->Line_5 $$ List<SimpleEntity> list = session.byMultipleIds(SimpleEntity.class).with(CacheMode.IGNORE).multiLoad(ids(56))[ CD ]
Line_2 $$ public void testMultiLoadWithCacheModeIgnore() -->Line_3 $$ Session session = openSession()[ CD ]
Line_5 $$ List<SimpleEntity> list = session.byMultipleIds(SimpleEntity.class).with(CacheMode.IGNORE).multiLoad(ids(56))-->Line_8 $$ assertEquals(56, list.size())[ FD ]
Line_3 $$ Session session = openSession()-->Line_4 $$ session.getTransaction().begin()[ FD ]
Line_3 $$ Session session = openSession()-->Line_7 $$ session.close()[ FD ]
Line_9 $$ for (SimpleEntity entity : list) -->Line_10 $$ assertFalse(sessionFactory().getCache().containsEntity(SimpleEntity.class, entity.getId()))[ FD ]
Line_3 $$ Session session = openSession()-->Line_6 $$ session.getTransaction().commit()[ FD ]
Line_2 $$ public void testMultiLoadWithCacheModeIgnore() -->Line_4 $$ session.getTransaction().begin()[ CD ]
Line_2 $$ public void testMultiLoadWithCacheModeIgnore() -->Line_7 $$ session.close()[ CD ]
