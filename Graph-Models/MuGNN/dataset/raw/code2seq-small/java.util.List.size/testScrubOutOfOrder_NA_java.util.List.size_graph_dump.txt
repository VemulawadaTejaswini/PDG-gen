Line_20 $$ Descriptor desc = Descriptor.fromFilename(filename)-->Line_30 $$ SSTableReader.open(desc, cfs.metadata)[ FD ]
Line_16 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(columnFamily)-->Line_54 $$ assertOrderedAll(cfs, 7)[ FD ]
Line_19 $$ String filename = cfs.getSSTablePath(tempDataDir)-->Line_20 $$ Descriptor desc = Descriptor.fromFilename(filename)[ FD ]
Line_23 $$ for (String k : keys) -->Line_24 $$ PartitionUpdate update = UpdateBuilder.create(cfs.metadata, Util.dk(k)).newRow("someName").add("val", "someValue").build()[ FD ]
Line_22 $$ try (SSTableTxnWriter writer = new SSTableTxnWriter(txn, createTestWriter(desc, (long) keys.size(), cfs.metadata, txn))) -->Line_27 $$ writer.finish(false)[ FD ]
Line_16 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(columnFamily)-->Line_19 $$ String filename = cfs.getSSTablePath(tempDataDir)[ FD ]
Line_45 $$ SSTableReader sstable = SSTableReader.openNoValidation(desc, components, cfs)-->Line_48 $$ try (LifecycleTransaction scrubTxn = LifecycleTransaction.offline(OperationType.SCRUB, sstable);[ FD ]
Line_18 $$ List<String> keys = Arrays.asList("t", "a", "b", "z", "c", "y", "d")-->Line_22 $$ try (SSTableTxnWriter writer = new SSTableTxnWriter(txn, createTestWriter(desc, (long) keys.size(), cfs.metadata, txn))) [ FD ]
Line_15 $$ String columnFamily = CF3-->Line_16 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(columnFamily)[ FD ]
Line_21 $$ LifecycleTransaction txn = LifecycleTransaction.offline(OperationType.WRITE)-->Line_22 $$ try (SSTableTxnWriter writer = new SSTableTxnWriter(txn, createTestWriter(desc, (long) keys.size(), cfs.metadata, txn))) [ FD ]
Line_20 $$ Descriptor desc = Descriptor.fromFilename(filename)-->Line_45 $$ SSTableReader sstable = SSTableReader.openNoValidation(desc, components, cfs)[ FD ]
Line_20 $$ Descriptor desc = Descriptor.fromFilename(filename)-->Line_22 $$ try (SSTableTxnWriter writer = new SSTableTxnWriter(txn, createTestWriter(desc, (long) keys.size(), cfs.metadata, txn))) [ FD ]
Line_37 $$ if (new File(desc.filenameFor(Component.COMPRESSION_INFO)).exists())-->Line_38 $$ components.add(Component.COMPRESSION_INFO)[ CD ]
Line_46 $$ if (sstable.last.compareTo(sstable.first) < 0)-->Line_47 $$ sstable.last = sstable.first[ CD ]
Line_16 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(columnFamily)-->Line_53 $$ cfs.loadNewSSTables()[ FD ]
Line_16 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(columnFamily)-->Line_17 $$ cfs.clearUnsafe()[ FD ]
Line_20 $$ Descriptor desc = Descriptor.fromFilename(filename)-->Line_37 $$ if (new File(desc.filenameFor(Component.COMPRESSION_INFO)).exists())[ FD ]
Line_22 $$ try (SSTableTxnWriter writer = new SSTableTxnWriter(txn, createTestWriter(desc, (long) keys.size(), cfs.metadata, txn))) -->Line_25 $$ writer.append(update.unfilteredIterator())[ FD ]
Line_48 $$ try (LifecycleTransaction scrubTxn = LifecycleTransaction.offline(OperationType.SCRUB, sstable);-->Line_50 $$ scrubber.scrub()[ FD ]
Line_16 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(columnFamily)-->Line_45 $$ SSTableReader sstable = SSTableReader.openNoValidation(desc, components, cfs)[ FD ]
Line_14 $$ Keyspace keyspace = Keyspace.open(KEYSPACE)-->Line_16 $$ ColumnFamilyStore cfs = keyspace.getColumnFamilyStore(columnFamily)[ FD ]
Line_24 $$ PartitionUpdate update = UpdateBuilder.create(cfs.metadata, Util.dk(k)).newRow("someName").add("val", "someValue").build()-->Line_25 $$ writer.append(update.unfilteredIterator())[ FD ]
