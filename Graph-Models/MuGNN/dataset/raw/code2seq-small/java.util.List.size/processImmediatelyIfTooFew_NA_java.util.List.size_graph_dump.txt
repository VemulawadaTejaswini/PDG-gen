Line_2 $$ private static <T> Boolean processImmediatelyIfTooFew(@NotNull final List<T> things, final ProgressIndicator progress, boolean runInReadAction, @NotNull final Processor<? super T> thingProcessor) -->Line_13 $$ if (!thingProcessor.process(thing)) [ FD ]
Line_11 $$ for (int i = 0; i < things.size(); i++) -->Line_12 $$ T thing = things.get(i)[ CD ]
Line_12 $$ T thing = things.get(i)-->Line_13 $$ if (!thingProcessor.process(thing)) [ FD ]
Line_2 $$ private static <T> Boolean processImmediatelyIfTooFew(@NotNull final List<T> things, final ProgressIndicator progress, boolean runInReadAction, @NotNull final Processor<? super T> thingProcessor) -->Line_9 $$ ProgressManager.getInstance().executeProcessUnderProgress(new Runnable() [ FD ]
Line_5 $$ if (things.size() <= 1 || JobSchedulerImpl.CORES_COUNT <= CORES_FORK_THRESHOLD) -->Line_6 $$ final AtomicBoolean result = new AtomicBoolean(true)[ CD ]
Line_2 $$ private static <T> Boolean processImmediatelyIfTooFew(@NotNull final List<T> things, final ProgressIndicator progress, boolean runInReadAction, @NotNull final Processor<? super T> thingProcessor) -->Line_5 $$ if (things.size() <= 1 || JobSchedulerImpl.CORES_COUNT <= CORES_FORK_THRESHOLD) [ CD ]
Line_6 $$ final AtomicBoolean result = new AtomicBoolean(true)-->Line_14 $$ result.set(false)[ FD ]
Line_3 $$ if (things.isEmpty())-->Line_4 $$ return true[ CD ]
Line_2 $$ private static <T> Boolean processImmediatelyIfTooFew(@NotNull final List<T> things, final ProgressIndicator progress, boolean runInReadAction, @NotNull final Processor<? super T> thingProcessor) -->Line_3 $$ if (things.isEmpty())[ FD ]
Line_11 $$ for (int i = 0; i < things.size(); i++) -->Line_12 $$ T thing = things.get(i)[ FD ]
Line_5 $$ if (things.size() <= 1 || JobSchedulerImpl.CORES_COUNT <= CORES_FORK_THRESHOLD) -->Line_22 $$ if (runInReadAction) [ CD ]
Line_2 $$ private static <T> Boolean processImmediatelyIfTooFew(@NotNull final List<T> things, final ProgressIndicator progress, boolean runInReadAction, @NotNull final Processor<? super T> thingProcessor) -->Line_12 $$ T thing = things.get(i)[ FD ]
Line_5 $$ if (things.size() <= 1 || JobSchedulerImpl.CORES_COUNT <= CORES_FORK_THRESHOLD) -->Line_28 $$ return result.get()[ CD ]
Line_7 $$ Runnable runnable = new Runnable() -->Line_23 $$ if (!ApplicationManagerEx.getApplicationEx().tryRunReadAction(runnable))[ FD ]
Line_22 $$ if (runInReadAction) -->Line_26 $$ runnable.run()[ CD ]
Line_2 $$ private static <T> Boolean processImmediatelyIfTooFew(@NotNull final List<T> things, final ProgressIndicator progress, boolean runInReadAction, @NotNull final Processor<? super T> thingProcessor) -->Line_5 $$ if (things.size() <= 1 || JobSchedulerImpl.CORES_COUNT <= CORES_FORK_THRESHOLD) [ FD ]
Line_13 $$ if (!thingProcessor.process(thing)) -->Line_14 $$ result.set(false)[ CD ]
Line_7 $$ Runnable runnable = new Runnable() -->Line_9 $$ ProgressManager.getInstance().executeProcessUnderProgress(new Runnable() [ CD ]
Line_11 $$ for (int i = 0; i < things.size(); i++) -->Line_13 $$ if (!thingProcessor.process(thing)) [ CD ]
Line_2 $$ private static <T> Boolean processImmediatelyIfTooFew(@NotNull final List<T> things, final ProgressIndicator progress, boolean runInReadAction, @NotNull final Processor<? super T> thingProcessor) -->Line_11 $$ for (int i = 0; i < things.size(); i++) [ FD ]
Line_9 $$ ProgressManager.getInstance().executeProcessUnderProgress(new Runnable() -->Line_11 $$ for (int i = 0; i < things.size(); i++) [ CD ]
Line_6 $$ final AtomicBoolean result = new AtomicBoolean(true)-->Line_28 $$ return result.get()[ FD ]
Line_23 $$ if (!ApplicationManagerEx.getApplicationEx().tryRunReadAction(runnable))-->Line_24 $$ return false[ CD ]
Line_22 $$ if (runInReadAction) -->Line_23 $$ if (!ApplicationManagerEx.getApplicationEx().tryRunReadAction(runnable))[ CD ]
Line_5 $$ if (things.size() <= 1 || JobSchedulerImpl.CORES_COUNT <= CORES_FORK_THRESHOLD) -->Line_7 $$ Runnable runnable = new Runnable() [ CD ]
Line_2 $$ private static <T> Boolean processImmediatelyIfTooFew(@NotNull final List<T> things, final ProgressIndicator progress, boolean runInReadAction, @NotNull final Processor<? super T> thingProcessor) -->Line_3 $$ if (things.isEmpty())[ CD ]
Line_2 $$ private static <T> Boolean processImmediatelyIfTooFew(@NotNull final List<T> things, final ProgressIndicator progress, boolean runInReadAction, @NotNull final Processor<? super T> thingProcessor) -->Line_30 $$ return null[ CD ]
Line_7 $$ Runnable runnable = new Runnable() -->Line_26 $$ runnable.run()[ FD ]
