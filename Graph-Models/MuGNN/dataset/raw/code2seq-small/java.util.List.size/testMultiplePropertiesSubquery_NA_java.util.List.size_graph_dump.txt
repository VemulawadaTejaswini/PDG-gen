Line_22 $$ session = openSession()-->Line_37 $$ session.close()[ FD ]
Line_3 $$ Session session = openSession()-->Line_4 $$ Transaction tx = session.beginTransaction()[ FD ]
Line_5 $$ Man lukasz = new Man()-->Line_8 $$ lukasz.setWeight(60)[ FD ]
Line_25 $$ List result-->Line_44 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_24 $$ DetachedCriteria sizeQuery = DetachedCriteria.forClass(Man.class).setProjection(Projections.projectionList().add(Projections.property("weight")).add(Projections.property("height"))).add(Restrictions.eq("name", "Lukasz"))-->Line_40 $$ sizeQuery = DetachedCriteria.forClass(Man.class).setProjection(Projections.projectionList().add(Projections.property("weight")).add(Projections.property("height"))).add(Restrictions.ne("name", "Lukasz"))[ FD ]
Line_3 $$ Session session = openSession()-->Line_42 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] [ FD ]
Line_22 $$ session = openSession()-->Line_23 $$ tx = session.beginTransaction()[ FD ]
Line_15 $$ Woman kinga = new Woman()-->Line_17 $$ kinga.setHeight(170)[ FD ]
Line_38 $$ session = openSession()-->Line_42 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] [ FD ]
Line_24 $$ DetachedCriteria sizeQuery = DetachedCriteria.forClass(Man.class).setProjection(Projections.projectionList().add(Projections.property("weight")).add(Projections.property("height"))).add(Restrictions.eq("name", "Lukasz"))-->Line_32 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] [ FD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_38 $$ session = openSession()[ CD ]
Line_46 $$ if (getDialect().supportsRowValueConstructorSyntaxInInList()) -->Line_47 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotIn(new String[] [ CD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_9 $$ session.persist(lukasz)[ CD ]
Line_22 $$ session = openSession()-->Line_27 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] [ FD ]
Line_38 $$ session = openSession()-->Line_47 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotIn(new String[] [ FD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_51 $$ tx.commit()[ CD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_8 $$ lukasz.setWeight(60)[ CD ]
Line_42 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] -->Line_48 $$ assertEquals(1, result.size())[ FD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_7 $$ lukasz.setHeight(170)[ CD ]
Line_25 $$ List result-->Line_42 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] [ FD ]
Line_22 $$ session = openSession()-->Line_42 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] [ FD ]
Line_25 $$ List result-->Line_33 $$ assertEquals(1, result.size())[ FD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_39 $$ tx = session.beginTransaction()[ CD ]
Line_3 $$ Session session = openSession()-->Line_21 $$ session.close()[ FD ]
Line_27 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] -->Line_44 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_32 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] -->Line_44 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_10 $$ Man robert = new Man()[ CD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_11 $$ robert.setName("Robert")[ CD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_31 $$ if (getDialect().supportsRowValueConstructorSyntaxInInList()) [ CD ]
Line_3 $$ Session session = openSession()-->Line_19 $$ session.persist(kinga)[ FD ]
Line_15 $$ Woman kinga = new Woman()-->Line_44 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_22 $$ session = openSession()-->Line_32 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] [ FD ]
Line_5 $$ Man lukasz = new Man()-->Line_9 $$ session.persist(lukasz)[ FD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_21 $$ session.close()[ CD ]
Line_27 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] -->Line_29 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_52 $$ session.close()[ CD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_19 $$ session.persist(kinga)[ CD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_14 $$ session.persist(robert)[ CD ]
Line_3 $$ Session session = openSession()-->Line_38 $$ session = openSession()[ FD ]
Line_3 $$ Session session = openSession()-->Line_23 $$ tx = session.beginTransaction()[ FD ]
Line_4 $$ Transaction tx = session.beginTransaction()-->Line_20 $$ tx.commit()[ FD ]
Line_26 $$ if (getDialect().supportsRowValueConstructorSyntax()) -->Line_28 $$ assertEquals(1, result.size())[ CD ]
Line_15 $$ Woman kinga = new Woman()-->Line_16 $$ kinga.setName("Kinga")[ FD ]
Line_10 $$ Man robert = new Man()-->Line_14 $$ session.persist(robert)[ FD ]
Line_3 $$ Session session = openSession()-->Line_32 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] [ FD ]
Line_24 $$ DetachedCriteria sizeQuery = DetachedCriteria.forClass(Man.class).setProjection(Projections.projectionList().add(Projections.property("weight")).add(Projections.property("height"))).add(Restrictions.eq("name", "Lukasz"))-->Line_27 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] [ FD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_4 $$ Transaction tx = session.beginTransaction()[ CD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_37 $$ session.close()[ CD ]
Line_31 $$ if (getDialect().supportsRowValueConstructorSyntaxInInList()) -->Line_32 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] [ CD ]
Line_25 $$ List result-->Line_48 $$ assertEquals(1, result.size())[ FD ]
Line_31 $$ if (getDialect().supportsRowValueConstructorSyntaxInInList()) -->Line_34 $$ assertEquals(kinga, result.get(0))[ CD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_12 $$ robert.setHeight(170)[ CD ]
Line_4 $$ Transaction tx = session.beginTransaction()-->Line_51 $$ tx.commit()[ FD ]
Line_32 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] -->Line_48 $$ assertEquals(1, result.size())[ FD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_22 $$ session = openSession()[ CD ]
Line_26 $$ if (getDialect().supportsRowValueConstructorSyntax()) -->Line_27 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] [ CD ]
Line_38 $$ session = openSession()-->Line_39 $$ tx = session.beginTransaction()[ FD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_41 $$ if (getDialect().supportsRowValueConstructorSyntax()) [ CD ]
Line_25 $$ List result-->Line_49 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_22 $$ session = openSession()-->Line_52 $$ session.close()[ FD ]
Line_10 $$ Man robert = new Man()-->Line_12 $$ robert.setHeight(170)[ FD ]
Line_32 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] -->Line_42 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] [ FD ]
Line_5 $$ Man lukasz = new Man()-->Line_6 $$ lukasz.setName("Lukasz")[ FD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_3 $$ Session session = openSession()[ CD ]
Line_10 $$ Man robert = new Man()-->Line_13 $$ robert.setWeight(78)[ FD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_16 $$ kinga.setName("Kinga")[ CD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_20 $$ tx.commit()[ CD ]
Line_41 $$ if (getDialect().supportsRowValueConstructorSyntax()) -->Line_42 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] [ CD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_23 $$ tx = session.beginTransaction()[ CD ]
Line_25 $$ List result-->Line_43 $$ assertEquals(1, result.size())[ FD ]
Line_32 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] -->Line_34 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_24 $$ DetachedCriteria sizeQuery = DetachedCriteria.forClass(Man.class).setProjection(Projections.projectionList().add(Projections.property("weight")).add(Projections.property("height"))).add(Restrictions.eq("name", "Lukasz"))-->Line_47 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotIn(new String[] [ FD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_5 $$ Man lukasz = new Man()[ CD ]
Line_4 $$ Transaction tx = session.beginTransaction()-->Line_23 $$ tx = session.beginTransaction()[ FD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_15 $$ Woman kinga = new Woman()[ CD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_24 $$ DetachedCriteria sizeQuery = DetachedCriteria.forClass(Man.class).setProjection(Projections.projectionList().add(Projections.property("weight")).add(Projections.property("height"))).add(Restrictions.eq("name", "Lukasz"))[ CD ]
Line_42 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] -->Line_43 $$ assertEquals(1, result.size())[ FD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_40 $$ sizeQuery = DetachedCriteria.forClass(Man.class).setProjection(Projections.projectionList().add(Projections.property("weight")).add(Projections.property("height"))).add(Restrictions.ne("name", "Lukasz"))[ CD ]
Line_32 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] -->Line_43 $$ assertEquals(1, result.size())[ FD ]
Line_4 $$ Transaction tx = session.beginTransaction()-->Line_36 $$ tx.commit()[ FD ]
Line_15 $$ Woman kinga = new Woman()-->Line_19 $$ session.persist(kinga)[ FD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_36 $$ tx.commit()[ CD ]
Line_3 $$ Session session = openSession()-->Line_9 $$ session.persist(lukasz)[ FD ]
Line_27 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] -->Line_33 $$ assertEquals(1, result.size())[ FD ]
Line_27 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] -->Line_28 $$ assertEquals(1, result.size())[ FD ]
Line_27 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] -->Line_47 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotIn(new String[] [ FD ]
Line_25 $$ List result-->Line_27 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] [ FD ]
Line_27 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] -->Line_32 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] [ FD ]
Line_3 $$ Session session = openSession()-->Line_14 $$ session.persist(robert)[ FD ]
Line_39 $$ tx = session.beginTransaction()-->Line_51 $$ tx.commit()[ FD ]
Line_5 $$ Man lukasz = new Man()-->Line_7 $$ lukasz.setHeight(170)[ FD ]
Line_42 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] -->Line_44 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_3 $$ Session session = openSession()-->Line_47 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotIn(new String[] [ FD ]
Line_27 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] -->Line_34 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_38 $$ session = openSession()-->Line_52 $$ session.close()[ FD ]
Line_40 $$ sizeQuery = DetachedCriteria.forClass(Man.class).setProjection(Projections.projectionList().add(Projections.property("weight")).add(Projections.property("height"))).add(Restrictions.ne("name", "Lukasz"))-->Line_47 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotIn(new String[] [ FD ]
Line_42 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] -->Line_47 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotIn(new String[] [ FD ]
Line_23 $$ tx = session.beginTransaction()-->Line_51 $$ tx.commit()[ FD ]
Line_41 $$ if (getDialect().supportsRowValueConstructorSyntax()) -->Line_44 $$ assertEquals(kinga, result.get(0))[ CD ]
Line_10 $$ Man robert = new Man()-->Line_11 $$ robert.setName("Robert")[ FD ]
Line_22 $$ session = openSession()-->Line_38 $$ session = openSession()[ FD ]
Line_4 $$ Transaction tx = session.beginTransaction()-->Line_39 $$ tx = session.beginTransaction()[ FD ]
Line_32 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] -->Line_49 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_42 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] -->Line_49 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_23 $$ tx = session.beginTransaction()-->Line_39 $$ tx = session.beginTransaction()[ FD ]
Line_3 $$ Session session = openSession()-->Line_39 $$ tx = session.beginTransaction()[ FD ]
Line_47 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotIn(new String[] -->Line_49 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_3 $$ Session session = openSession()-->Line_37 $$ session.close()[ FD ]
Line_15 $$ Woman kinga = new Woman()-->Line_29 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_3 $$ Session session = openSession()-->Line_22 $$ session = openSession()[ FD ]
Line_23 $$ tx = session.beginTransaction()-->Line_36 $$ tx.commit()[ FD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_6 $$ lukasz.setName("Lukasz")[ CD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_17 $$ kinga.setHeight(170)[ CD ]
Line_25 $$ List result-->Line_34 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_15 $$ Woman kinga = new Woman()-->Line_34 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_26 $$ if (getDialect().supportsRowValueConstructorSyntax()) -->Line_29 $$ assertEquals(kinga, result.get(0))[ CD ]
Line_27 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] -->Line_43 $$ assertEquals(1, result.size())[ FD ]
Line_32 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] -->Line_47 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotIn(new String[] [ FD ]
Line_25 $$ List result-->Line_28 $$ assertEquals(1, result.size())[ FD ]
Line_27 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] -->Line_48 $$ assertEquals(1, result.size())[ FD ]
Line_46 $$ if (getDialect().supportsRowValueConstructorSyntaxInInList()) -->Line_48 $$ assertEquals(1, result.size())[ CD ]
Line_27 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] -->Line_49 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_15 $$ Woman kinga = new Woman()-->Line_18 $$ kinga.setWeight(60)[ FD ]
Line_15 $$ Woman kinga = new Woman()-->Line_49 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_26 $$ if (getDialect().supportsRowValueConstructorSyntax()) [ CD ]
Line_24 $$ DetachedCriteria sizeQuery = DetachedCriteria.forClass(Man.class).setProjection(Projections.projectionList().add(Projections.property("weight")).add(Projections.property("height"))).add(Restrictions.eq("name", "Lukasz"))-->Line_42 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] [ FD ]
Line_3 $$ Session session = openSession()-->Line_52 $$ session.close()[ FD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_18 $$ kinga.setWeight(60)[ CD ]
Line_27 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] -->Line_42 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] [ FD ]
Line_25 $$ List result-->Line_47 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotIn(new String[] [ FD ]
Line_25 $$ List result-->Line_32 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] [ FD ]
Line_47 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotIn(new String[] -->Line_48 $$ assertEquals(1, result.size())[ FD ]
Line_25 $$ List result-->Line_29 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_46 $$ if (getDialect().supportsRowValueConstructorSyntaxInInList()) [ CD ]
Line_22 $$ session = openSession()-->Line_39 $$ tx = session.beginTransaction()[ FD ]
Line_22 $$ session = openSession()-->Line_47 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotIn(new String[] [ FD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_13 $$ robert.setWeight(78)[ CD ]
Line_40 $$ sizeQuery = DetachedCriteria.forClass(Man.class).setProjection(Projections.projectionList().add(Projections.property("weight")).add(Projections.property("height"))).add(Restrictions.ne("name", "Lukasz"))-->Line_42 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] [ FD ]
Line_46 $$ if (getDialect().supportsRowValueConstructorSyntaxInInList()) -->Line_49 $$ assertEquals(kinga, result.get(0))[ CD ]
Line_2 $$ public void testMultiplePropertiesSubquery() -->Line_25 $$ List result[ CD ]
Line_41 $$ if (getDialect().supportsRowValueConstructorSyntax()) -->Line_43 $$ assertEquals(1, result.size())[ CD ]
Line_32 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] -->Line_33 $$ assertEquals(1, result.size())[ FD ]
Line_3 $$ Session session = openSession()-->Line_27 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] [ FD ]
Line_31 $$ if (getDialect().supportsRowValueConstructorSyntaxInInList()) -->Line_33 $$ assertEquals(1, result.size())[ CD ]
