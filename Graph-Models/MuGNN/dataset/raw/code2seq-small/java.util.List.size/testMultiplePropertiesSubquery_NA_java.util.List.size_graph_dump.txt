Line_27 $$ List result-->Line_51 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_27 $$ List result-->Line_35 $$ assertEquals(1, result.size())[ FD ]
Line_7 $$ Man lukasz = new Man()-->Line_10 $$ lukasz.setWeight(60)[ FD ]
Line_26 $$ DetachedCriteria sizeQuery = DetachedCriteria.forClass(Man.class).setProjection(Projections.projectionList().add(Projections.property("weight")).add(Projections.property("height"))).add(Restrictions.eq("name", "Lukasz"))-->Line_44 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] [ FD ]
Line_29 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] -->Line_49 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotIn(new String[] [ FD ]
Line_5 $$ Session session = openSession()-->Line_34 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] [ FD ]
Line_5 $$ Session session = openSession()-->Line_44 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] [ FD ]
Line_34 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] -->Line_46 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_28 $$ if (getDialect().supportsRowValueConstructorSyntax()) -->Line_30 $$ assertEquals(1, result.size())[ CD ]
Line_26 $$ DetachedCriteria sizeQuery = DetachedCriteria.forClass(Man.class).setProjection(Projections.projectionList().add(Projections.property("weight")).add(Projections.property("height"))).add(Restrictions.eq("name", "Lukasz"))-->Line_42 $$ sizeQuery = DetachedCriteria.forClass(Man.class).setProjection(Projections.projectionList().add(Projections.property("weight")).add(Projections.property("height"))).add(Restrictions.ne("name", "Lukasz"))[ FD ]
Line_33 $$ if (getDialect().supportsRowValueConstructorSyntaxInInList()) -->Line_36 $$ assertEquals(kinga, result.get(0))[ CD ]
Line_24 $$ session = openSession()-->Line_25 $$ tx = session.beginTransaction()[ FD ]
Line_44 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] -->Line_46 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_44 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] -->Line_49 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotIn(new String[] [ FD ]
Line_7 $$ Man lukasz = new Man()-->Line_9 $$ lukasz.setHeight(170)[ FD ]
Line_44 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] -->Line_50 $$ assertEquals(1, result.size())[ FD ]
Line_29 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] -->Line_30 $$ assertEquals(1, result.size())[ FD ]
Line_26 $$ DetachedCriteria sizeQuery = DetachedCriteria.forClass(Man.class).setProjection(Projections.projectionList().add(Projections.property("weight")).add(Projections.property("height"))).add(Restrictions.eq("name", "Lukasz"))-->Line_34 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] [ FD ]
Line_24 $$ session = openSession()-->Line_34 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] [ FD ]
Line_5 $$ Session session = openSession()-->Line_6 $$ Transaction tx = session.beginTransaction()[ FD ]
Line_34 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] -->Line_36 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_25 $$ tx = session.beginTransaction()-->Line_41 $$ tx = session.beginTransaction()[ FD ]
Line_17 $$ Woman kinga = new Woman()-->Line_46 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_33 $$ if (getDialect().supportsRowValueConstructorSyntaxInInList()) -->Line_34 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] [ CD ]
Line_34 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] -->Line_51 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_29 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] -->Line_34 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] [ FD ]
Line_17 $$ Woman kinga = new Woman()-->Line_31 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_5 $$ Session session = openSession()-->Line_40 $$ session = openSession()[ FD ]
Line_48 $$ if (getDialect().supportsRowValueConstructorSyntaxInInList()) -->Line_49 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotIn(new String[] [ CD ]
Line_41 $$ tx = session.beginTransaction()-->Line_53 $$ tx.commit()[ FD ]
Line_6 $$ Transaction tx = session.beginTransaction()-->Line_41 $$ tx = session.beginTransaction()[ FD ]
Line_12 $$ Man robert = new Man()-->Line_14 $$ robert.setHeight(170)[ FD ]
Line_28 $$ if (getDialect().supportsRowValueConstructorSyntax()) -->Line_31 $$ assertEquals(kinga, result.get(0))[ CD ]
Line_24 $$ session = openSession()-->Line_39 $$ session.close()[ FD ]
Line_24 $$ session = openSession()-->Line_41 $$ tx = session.beginTransaction()[ FD ]
Line_17 $$ Woman kinga = new Woman()-->Line_51 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_40 $$ session = openSession()-->Line_41 $$ tx = session.beginTransaction()[ FD ]
Line_40 $$ session = openSession()-->Line_54 $$ session.close()[ FD ]
Line_5 $$ Session session = openSession()-->Line_54 $$ session.close()[ FD ]
Line_44 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] -->Line_51 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_24 $$ session = openSession()-->Line_29 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] [ FD ]
Line_28 $$ if (getDialect().supportsRowValueConstructorSyntax()) -->Line_29 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] [ CD ]
Line_27 $$ List result-->Line_46 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_5 $$ Session session = openSession()-->Line_24 $$ session = openSession()[ FD ]
Line_34 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] -->Line_35 $$ assertEquals(1, result.size())[ FD ]
Line_48 $$ if (getDialect().supportsRowValueConstructorSyntaxInInList()) -->Line_51 $$ assertEquals(kinga, result.get(0))[ CD ]
Line_5 $$ Session session = openSession()-->Line_11 $$ session.persist(lukasz)[ FD ]
Line_49 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotIn(new String[] -->Line_50 $$ assertEquals(1, result.size())[ FD ]
Line_17 $$ Woman kinga = new Woman()-->Line_21 $$ session.persist(kinga)[ FD ]
Line_17 $$ Woman kinga = new Woman()-->Line_18 $$ kinga.setName("Kinga")[ FD ]
Line_5 $$ Session session = openSession()-->Line_49 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotIn(new String[] [ FD ]
Line_24 $$ session = openSession()-->Line_49 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotIn(new String[] [ FD ]
Line_5 $$ Session session = openSession()-->Line_21 $$ session.persist(kinga)[ FD ]
Line_27 $$ List result-->Line_50 $$ assertEquals(1, result.size())[ FD ]
Line_17 $$ Woman kinga = new Woman()-->Line_36 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_25 $$ tx = session.beginTransaction()-->Line_53 $$ tx.commit()[ FD ]
Line_34 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] -->Line_49 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotIn(new String[] [ FD ]
Line_12 $$ Man robert = new Man()-->Line_13 $$ robert.setName("Robert")[ FD ]
Line_7 $$ Man lukasz = new Man()-->Line_8 $$ lukasz.setName("Lukasz")[ FD ]
Line_6 $$ Transaction tx = session.beginTransaction()-->Line_22 $$ tx.commit()[ FD ]
Line_44 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] -->Line_45 $$ assertEquals(1, result.size())[ FD ]
Line_43 $$ if (getDialect().supportsRowValueConstructorSyntax()) -->Line_46 $$ assertEquals(kinga, result.get(0))[ CD ]
Line_43 $$ if (getDialect().supportsRowValueConstructorSyntax()) -->Line_44 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] [ CD ]
Line_40 $$ session = openSession()-->Line_49 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotIn(new String[] [ FD ]
Line_42 $$ sizeQuery = DetachedCriteria.forClass(Man.class).setProjection(Projections.projectionList().add(Projections.property("weight")).add(Projections.property("height"))).add(Restrictions.ne("name", "Lukasz"))-->Line_49 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotIn(new String[] [ FD ]
Line_29 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] -->Line_50 $$ assertEquals(1, result.size())[ FD ]
Line_5 $$ Session session = openSession()-->Line_39 $$ session.close()[ FD ]
Line_27 $$ List result-->Line_49 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotIn(new String[] [ FD ]
Line_29 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] -->Line_51 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_29 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] -->Line_31 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_17 $$ Woman kinga = new Woman()-->Line_19 $$ kinga.setHeight(170)[ FD ]
Line_26 $$ DetachedCriteria sizeQuery = DetachedCriteria.forClass(Man.class).setProjection(Projections.projectionList().add(Projections.property("weight")).add(Projections.property("height"))).add(Restrictions.eq("name", "Lukasz"))-->Line_29 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] [ FD ]
Line_5 $$ Session session = openSession()-->Line_23 $$ session.close()[ FD ]
Line_29 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] -->Line_46 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_27 $$ List result-->Line_36 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_49 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotIn(new String[] -->Line_51 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_17 $$ Woman kinga = new Woman()-->Line_20 $$ kinga.setWeight(60)[ FD ]
Line_6 $$ Transaction tx = session.beginTransaction()-->Line_53 $$ tx.commit()[ FD ]
Line_27 $$ List result-->Line_45 $$ assertEquals(1, result.size())[ FD ]
Line_26 $$ DetachedCriteria sizeQuery = DetachedCriteria.forClass(Man.class).setProjection(Projections.projectionList().add(Projections.property("weight")).add(Projections.property("height"))).add(Restrictions.eq("name", "Lukasz"))-->Line_49 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotIn(new String[] [ FD ]
Line_27 $$ List result-->Line_30 $$ assertEquals(1, result.size())[ FD ]
Line_24 $$ session = openSession()-->Line_44 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] [ FD ]
Line_24 $$ session = openSession()-->Line_40 $$ session = openSession()[ FD ]
Line_6 $$ Transaction tx = session.beginTransaction()-->Line_25 $$ tx = session.beginTransaction()[ FD ]
Line_34 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] -->Line_44 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] [ FD ]
Line_27 $$ List result-->Line_31 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_5 $$ Session session = openSession()-->Line_29 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] [ FD ]
Line_29 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] -->Line_44 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] [ FD ]
Line_5 $$ Session session = openSession()-->Line_25 $$ tx = session.beginTransaction()[ FD ]
Line_24 $$ session = openSession()-->Line_54 $$ session.close()[ FD ]
Line_12 $$ Man robert = new Man()-->Line_15 $$ robert.setWeight(78)[ FD ]
Line_25 $$ tx = session.beginTransaction()-->Line_38 $$ tx.commit()[ FD ]
Line_29 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] -->Line_36 $$ assertEquals(kinga, result.get(0))[ FD ]
Line_6 $$ Transaction tx = session.beginTransaction()-->Line_38 $$ tx.commit()[ FD ]
Line_43 $$ if (getDialect().supportsRowValueConstructorSyntax()) -->Line_45 $$ assertEquals(1, result.size())[ CD ]
Line_42 $$ sizeQuery = DetachedCriteria.forClass(Man.class).setProjection(Projections.projectionList().add(Projections.property("weight")).add(Projections.property("height"))).add(Restrictions.ne("name", "Lukasz"))-->Line_44 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] [ FD ]
Line_29 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] -->Line_45 $$ assertEquals(1, result.size())[ FD ]
Line_34 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] -->Line_45 $$ assertEquals(1, result.size())[ FD ]
Line_27 $$ List result-->Line_44 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] [ FD ]
Line_5 $$ Session session = openSession()-->Line_41 $$ tx = session.beginTransaction()[ FD ]
Line_12 $$ Man robert = new Man()-->Line_16 $$ session.persist(robert)[ FD ]
Line_48 $$ if (getDialect().supportsRowValueConstructorSyntaxInInList()) -->Line_50 $$ assertEquals(1, result.size())[ CD ]
Line_7 $$ Man lukasz = new Man()-->Line_11 $$ session.persist(lukasz)[ FD ]
Line_29 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] -->Line_35 $$ assertEquals(1, result.size())[ FD ]
Line_27 $$ List result-->Line_29 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesEq(new String[] [ FD ]
Line_34 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] -->Line_50 $$ assertEquals(1, result.size())[ FD ]
Line_40 $$ session = openSession()-->Line_44 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesNotEq(new String[] [ FD ]
Line_5 $$ Session session = openSession()-->Line_16 $$ session.persist(robert)[ FD ]
Line_27 $$ List result-->Line_34 $$ result = session.createCriteria(Woman.class).add(Subqueries.propertiesIn(new String[] [ FD ]
Line_33 $$ if (getDialect().supportsRowValueConstructorSyntaxInInList()) -->Line_35 $$ assertEquals(1, result.size())[ CD ]
