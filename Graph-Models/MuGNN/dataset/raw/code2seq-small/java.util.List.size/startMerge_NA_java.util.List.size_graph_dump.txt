Line_2 $$ public void startMerge(Set<T> inputs) -->Line_6 $$ Iterator<T> iter = inputs.iterator()[ FD ]
Line_3 $$ if (!closed) -->Line_6 $$ Iterator<T> iter = inputs.iterator()[ CD ]
Line_5 $$ List<T> toMergeInputs = new ArrayList<T>()-->Line_13 $$ pendingToBeMerged.addLast(toMergeInputs)[ FD ]
Line_2 $$ public void startMerge(Set<T> inputs) -->Line_11 $$ LOG.info(getName() + ": Starting merge with " + toMergeInputs.size() + " segments, while ignoring " + inputs.size() + " segments")[ FD ]
Line_6 $$ Iterator<T> iter = inputs.iterator()-->Line_9 $$ iter.remove()[ FD ]
Line_3 $$ if (!closed) -->Line_5 $$ List<T> toMergeInputs = new ArrayList<T>()[ CD ]
Line_2 $$ public void startMerge(Set<T> inputs) -->Line_3 $$ if (!closed) [ CD ]
Line_3 $$ if (!closed) -->Line_4 $$ numPending.incrementAndGet()[ CD ]
Line_7 $$ for (int ctr = 0; iter.hasNext() && ctr < mergeFactor; ++ctr) -->Line_8 $$ toMergeInputs.add(iter.next())[ CD ]
Line_5 $$ List<T> toMergeInputs = new ArrayList<T>()-->Line_11 $$ LOG.info(getName() + ": Starting merge with " + toMergeInputs.size() + " segments, while ignoring " + inputs.size() + " segments")[ FD ]
Line_6 $$ Iterator<T> iter = inputs.iterator()-->Line_7 $$ for (int ctr = 0; iter.hasNext() && ctr < mergeFactor; ++ctr) [ FD ]
Line_5 $$ List<T> toMergeInputs = new ArrayList<T>()-->Line_8 $$ toMergeInputs.add(iter.next())[ FD ]
Line_6 $$ Iterator<T> iter = inputs.iterator()-->Line_8 $$ toMergeInputs.add(iter.next())[ FD ]
Line_3 $$ if (!closed) -->Line_7 $$ for (int ctr = 0; iter.hasNext() && ctr < mergeFactor; ++ctr) [ CD ]
Line_3 $$ if (!closed) -->Line_11 $$ LOG.info(getName() + ": Starting merge with " + toMergeInputs.size() + " segments, while ignoring " + inputs.size() + " segments")[ CD ]
Line_7 $$ for (int ctr = 0; iter.hasNext() && ctr < mergeFactor; ++ctr) -->Line_9 $$ iter.remove()[ CD ]
