Line_2 $$ private TreeNode[] removeRedundantSourceNodes(@NotNull final TreeNode[] sourceNodes, @NotNull final TreeNode targetNode, final int dropAction) -->Line_3 $$ final DropHandler dropHandler = getDropHandler(dropAction)[ CD ]
Line_6 $$ if (!dropHandler.isDropRedundant(sourceNode, targetNode)) -->Line_7 $$ result.add(sourceNode)[ CD ]
Line_2 $$ private TreeNode[] removeRedundantSourceNodes(@NotNull final TreeNode[] sourceNodes, @NotNull final TreeNode targetNode, final int dropAction) -->Line_10 $$ return result.toArray(new TreeNode[result.size()])[ CD ]
Line_4 $$ List<TreeNode> result = new ArrayList<TreeNode>(sourceNodes.length)-->Line_7 $$ result.add(sourceNode)[ FD ]
Line_3 $$ final DropHandler dropHandler = getDropHandler(dropAction)-->Line_6 $$ if (!dropHandler.isDropRedundant(sourceNode, targetNode)) [ FD ]
Line_4 $$ List<TreeNode> result = new ArrayList<TreeNode>(sourceNodes.length)-->Line_10 $$ return result.toArray(new TreeNode[result.size()])[ FD ]
Line_5 $$ for (TreeNode sourceNode : sourceNodes) -->Line_6 $$ if (!dropHandler.isDropRedundant(sourceNode, targetNode)) [ FD ]
Line_2 $$ private TreeNode[] removeRedundantSourceNodes(@NotNull final TreeNode[] sourceNodes, @NotNull final TreeNode targetNode, final int dropAction) -->Line_4 $$ List<TreeNode> result = new ArrayList<TreeNode>(sourceNodes.length)[ CD ]
Line_2 $$ private TreeNode[] removeRedundantSourceNodes(@NotNull final TreeNode[] sourceNodes, @NotNull final TreeNode targetNode, final int dropAction) -->Line_3 $$ final DropHandler dropHandler = getDropHandler(dropAction)[ FD ]
Line_2 $$ private TreeNode[] removeRedundantSourceNodes(@NotNull final TreeNode[] sourceNodes, @NotNull final TreeNode targetNode, final int dropAction) -->Line_6 $$ if (!dropHandler.isDropRedundant(sourceNode, targetNode)) [ FD ]
Line_5 $$ for (TreeNode sourceNode : sourceNodes) -->Line_7 $$ result.add(sourceNode)[ FD ]
