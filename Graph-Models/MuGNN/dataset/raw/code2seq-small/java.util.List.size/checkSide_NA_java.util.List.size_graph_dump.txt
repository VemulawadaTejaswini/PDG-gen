Line_2 $$ private int checkSide(final List<String> side, final boolean canMismatch) -->Line_3 $$ int distance = 0[ CD ]
Line_6 $$ int i = myOffsetIdxInHunk - 1-->Line_17 $$ distance = i[ FD ]
Line_4 $$ if (myOffsetIdxInHunk > 0) -->Line_6 $$ int i = myOffsetIdxInHunk - 1[ CD ]
Line_3 $$ int distance = 0-->Line_26 $$ distance += side.size() - j[ FD ]
Line_2 $$ private int checkSide(final List<String> side, final boolean canMismatch) -->Line_4 $$ if (myOffsetIdxInHunk > 0) [ CD ]
Line_2 $$ private int checkSide(final List<String> side, final boolean canMismatch) -->Line_27 $$ return distance[ CD ]
Line_7 $$ for (; i >= 0 && linesIdx >= 0; i--, linesIdx--) -->Line_8 $$ if (!myLines.get(linesIdx).equals(side.get(i))) [ CD ]
Line_2 $$ private int checkSide(final List<String> side, final boolean canMismatch) -->Line_8 $$ if (!myLines.get(linesIdx).equals(side.get(i))) [ FD ]
Line_5 $$ int linesIdx = myIdx - 1-->Line_8 $$ if (!myLines.get(linesIdx).equals(side.get(i))) [ FD ]
Line_4 $$ if (myOffsetIdxInHunk > 0) -->Line_17 $$ distance = i[ CD ]
Line_17 $$ distance = i-->Line_26 $$ distance += side.size() - j[ FD ]
Line_20 $$ int j = myOffsetIdxInHunk-->Line_26 $$ distance += side.size() - j[ FD ]
Line_4 $$ if (myOffsetIdxInHunk > 0) -->Line_7 $$ for (; i >= 0 && linesIdx >= 0; i--, linesIdx--) [ CD ]
Line_20 $$ int j = myOffsetIdxInHunk-->Line_21 $$ for (; j < side.size() && linesEndIdx < myLines.size(); j++, linesEndIdx++) [ FD ]
Line_2 $$ private int checkSide(final List<String> side, final boolean canMismatch) -->Line_19 $$ int linesEndIdx = myIdx[ CD ]
Line_2 $$ private int checkSide(final List<String> side, final boolean canMismatch) -->Line_21 $$ for (; j < side.size() && linesEndIdx < myLines.size(); j++, linesEndIdx++) [ CD ]
Line_5 $$ int linesIdx = myIdx - 1-->Line_7 $$ for (; i >= 0 && linesIdx >= 0; i--, linesIdx--) [ FD ]
Line_2 $$ private int checkSide(final List<String> side, final boolean canMismatch) -->Line_21 $$ for (; j < side.size() && linesEndIdx < myLines.size(); j++, linesEndIdx++) [ FD ]
Line_6 $$ int i = myOffsetIdxInHunk - 1-->Line_8 $$ if (!myLines.get(linesIdx).equals(side.get(i))) [ FD ]
Line_6 $$ int i = myOffsetIdxInHunk - 1-->Line_7 $$ for (; i >= 0 && linesIdx >= 0; i--, linesIdx--) [ FD ]
Line_20 $$ int j = myOffsetIdxInHunk-->Line_22 $$ if (!myLines.get(linesEndIdx).equals(side.get(j))) [ FD ]
Line_19 $$ int linesEndIdx = myIdx-->Line_21 $$ for (; j < side.size() && linesEndIdx < myLines.size(); j++, linesEndIdx++) [ FD ]
Line_2 $$ private int checkSide(final List<String> side, final boolean canMismatch) -->Line_22 $$ if (!myLines.get(linesEndIdx).equals(side.get(j))) [ FD ]
Line_2 $$ private int checkSide(final List<String> side, final boolean canMismatch) -->Line_26 $$ distance += side.size() - j[ FD ]
Line_21 $$ for (; j < side.size() && linesEndIdx < myLines.size(); j++, linesEndIdx++) -->Line_22 $$ if (!myLines.get(linesEndIdx).equals(side.get(j))) [ CD ]
Line_19 $$ int linesEndIdx = myIdx-->Line_22 $$ if (!myLines.get(linesEndIdx).equals(side.get(j))) [ FD ]
Line_2 $$ private int checkSide(final List<String> side, final boolean canMismatch) -->Line_26 $$ distance += side.size() - j[ CD ]
Line_4 $$ if (myOffsetIdxInHunk > 0) -->Line_5 $$ int linesIdx = myIdx - 1[ CD ]
Line_2 $$ private int checkSide(final List<String> side, final boolean canMismatch) -->Line_20 $$ int j = myOffsetIdxInHunk[ CD ]
Line_3 $$ int distance = 0-->Line_17 $$ distance = i[ FD ]
