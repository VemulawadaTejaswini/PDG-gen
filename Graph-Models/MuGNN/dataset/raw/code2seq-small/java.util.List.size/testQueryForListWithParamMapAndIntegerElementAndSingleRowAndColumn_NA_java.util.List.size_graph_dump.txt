Line_2 $$ public void testQueryForListWithParamMapAndIntegerElementAndSingleRowAndColumn() throws Exception -->Line_3 $$ given(resultSet.getMetaData()).willReturn(resultSetMetaData)[ CD ]
Line_2 $$ public void testQueryForListWithParamMapAndIntegerElementAndSingleRowAndColumn() throws Exception -->Line_11 $$ verify(connection).prepareStatement("SELECT AGE FROM CUSTMR WHERE ID < ?")[ CD ]
Line_6 $$ MapSqlParameterSource parms = new MapSqlParameterSource()-->Line_7 $$ parms.addValue("id", 3)[ FD ]
Line_2 $$ public void testQueryForListWithParamMapAndIntegerElementAndSingleRowAndColumn() throws Exception -->Line_5 $$ given(resultSet.getInt(1)).willReturn(11)[ CD ]
Line_2 $$ public void testQueryForListWithParamMapAndIntegerElementAndSingleRowAndColumn() throws Exception -->Line_7 $$ parms.addValue("id", 3)[ CD ]
Line_2 $$ public void testQueryForListWithParamMapAndIntegerElementAndSingleRowAndColumn() throws Exception -->Line_9 $$ assertEquals("All rows returned", 1, li.size())[ CD ]
Line_8 $$ List<Integer> li = template.queryForList("SELECT AGE FROM CUSTMR WHERE ID < :id", parms, Integer.class)-->Line_10 $$ assertEquals("First row is Integer", 11, li.get(0).intValue())[ FD ]
Line_2 $$ public void testQueryForListWithParamMapAndIntegerElementAndSingleRowAndColumn() throws Exception -->Line_4 $$ given(resultSet.next()).willReturn(true, false)[ CD ]
Line_6 $$ MapSqlParameterSource parms = new MapSqlParameterSource()-->Line_8 $$ List<Integer> li = template.queryForList("SELECT AGE FROM CUSTMR WHERE ID < :id", parms, Integer.class)[ FD ]
Line_2 $$ public void testQueryForListWithParamMapAndIntegerElementAndSingleRowAndColumn() throws Exception -->Line_6 $$ MapSqlParameterSource parms = new MapSqlParameterSource()[ CD ]
Line_8 $$ List<Integer> li = template.queryForList("SELECT AGE FROM CUSTMR WHERE ID < :id", parms, Integer.class)-->Line_9 $$ assertEquals("All rows returned", 1, li.size())[ FD ]
Line_2 $$ public void testQueryForListWithParamMapAndIntegerElementAndSingleRowAndColumn() throws Exception -->Line_8 $$ List<Integer> li = template.queryForList("SELECT AGE FROM CUSTMR WHERE ID < :id", parms, Integer.class)[ CD ]
Line_2 $$ public void testQueryForListWithParamMapAndIntegerElementAndSingleRowAndColumn() throws Exception -->Line_12 $$ verify(preparedStatement).setObject(1, 3)[ CD ]
Line_2 $$ public void testQueryForListWithParamMapAndIntegerElementAndSingleRowAndColumn() throws Exception -->Line_10 $$ assertEquals("First row is Integer", 11, li.get(0).intValue())[ CD ]
