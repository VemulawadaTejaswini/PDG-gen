Line_2 $$ private static PsiMethod existingClassIsCompatible(PsiClass aClass, List<ParameterChunk> params) -->Line_3 $$ if (params.size() == 1) [ FD ]
Line_10 $$ if (constructorIsCompatible(constructor, params))-->Line_11 $$ return constructor[ CD ]
Line_16 $$ PsiMethod compatibleConstructor = null-->Line_26 $$ final PsiParameterList parameterList = compatibleConstructor.getParameterList()[ FD ]
Line_28 $$ for (int i = 0; i < constructorParams.length; i++) -->Line_35 $$ parameterChunk.setField(field)[ CD ]
Line_16 $$ PsiMethod compatibleConstructor = null-->Line_19 $$ compatibleConstructor = constructor[ FD ]
Line_28 $$ for (int i = 0; i < constructorParams.length; i++) -->Line_32 $$ if (field == null) [ CD ]
Line_2 $$ private static PsiMethod existingClassIsCompatible(PsiClass aClass, List<ParameterChunk> params) -->Line_3 $$ if (params.size() == 1) [ CD ]
Line_3 $$ if (params.size() == 1) -->Line_6 $$ if (TypeConversionUtil.isPrimitiveWrapper(aClass.getQualifiedName())) [ CD ]
Line_4 $$ final ParameterChunk parameterChunk = params.get(0)-->Line_7 $$ parameterChunk.setField(aClass.findFieldByName("value", false))[ FD ]
Line_2 $$ private static PsiMethod existingClassIsCompatible(PsiClass aClass, List<ParameterChunk> params) -->Line_18 $$ if (constructorIsCompatible(constructor, params)) [ FD ]
Line_30 $$ final ParameterChunk parameterChunk = params.get(i)-->Line_42 $$ parameterChunk.setSetter(setterForField.getName())[ FD ]
Line_31 $$ final PsiField field = findFieldAssigned(param, compatibleConstructor)-->Line_32 $$ if (field == null) [ FD ]
Line_31 $$ final PsiField field = findFieldAssigned(param, compatibleConstructor)-->Line_40 $$ final PsiMethod setterForField = PropertyUtil.findSetterForField(field)[ FD ]
Line_28 $$ for (int i = 0; i < constructorParams.length; i++) -->Line_30 $$ final ParameterChunk parameterChunk = params.get(i)[ FD ]
Line_2 $$ private static PsiMethod existingClassIsCompatible(PsiClass aClass, List<ParameterChunk> params) -->Line_7 $$ parameterChunk.setField(aClass.findFieldByName("value", false))[ FD ]
Line_28 $$ for (int i = 0; i < constructorParams.length; i++) -->Line_30 $$ final ParameterChunk parameterChunk = params.get(i)[ CD ]
Line_26 $$ final PsiParameterList parameterList = compatibleConstructor.getParameterList()-->Line_27 $$ final PsiParameter[] constructorParams = parameterList.getParameters()[ FD ]
Line_19 $$ compatibleConstructor = constructor-->Line_31 $$ final PsiField field = findFieldAssigned(param, compatibleConstructor)[ FD ]
Line_41 $$ if (setterForField != null) -->Line_42 $$ parameterChunk.setSetter(setterForField.getName())[ CD ]
Line_2 $$ private static PsiMethod existingClassIsCompatible(PsiClass aClass, List<ParameterChunk> params) -->Line_30 $$ final ParameterChunk parameterChunk = params.get(i)[ FD ]
Line_2 $$ private static PsiMethod existingClassIsCompatible(PsiClass aClass, List<ParameterChunk> params) -->Line_10 $$ if (constructorIsCompatible(constructor, params))[ FD ]
Line_23 $$ if (compatibleConstructor == null) -->Line_24 $$ return null[ CD ]
Line_2 $$ private static PsiMethod existingClassIsCompatible(PsiClass aClass, List<ParameterChunk> params) -->Line_27 $$ final PsiParameter[] constructorParams = parameterList.getParameters()[ CD ]
Line_28 $$ for (int i = 0; i < constructorParams.length; i++) -->Line_41 $$ if (setterForField != null) [ CD ]
Line_30 $$ final ParameterChunk parameterChunk = params.get(i)-->Line_38 $$ parameterChunk.setGetter(getterForField.getName())[ FD ]
Line_2 $$ private static PsiMethod existingClassIsCompatible(PsiClass aClass, List<ParameterChunk> params) -->Line_15 $$ final PsiMethod[] constructors = aClass.getConstructors()[ FD ]
Line_2 $$ private static PsiMethod existingClassIsCompatible(PsiClass aClass, List<ParameterChunk> params) -->Line_45 $$ return compatibleConstructor[ CD ]
Line_3 $$ if (params.size() == 1) -->Line_5 $$ final PsiType paramType = parameterChunk.parameter.type[ CD ]
Line_9 $$ for (PsiMethod constructor : aClass.getConstructors()) -->Line_19 $$ compatibleConstructor = constructor[ FD ]
Line_40 $$ final PsiMethod setterForField = PropertyUtil.findSetterForField(field)-->Line_41 $$ if (setterForField != null) [ FD ]
Line_2 $$ private static PsiMethod existingClassIsCompatible(PsiClass aClass, List<ParameterChunk> params) -->Line_16 $$ PsiMethod compatibleConstructor = null[ CD ]
Line_28 $$ for (int i = 0; i < constructorParams.length; i++) -->Line_36 $$ final PsiMethod getterForField = PropertyUtil.findGetterForField(field)[ CD ]
Line_6 $$ if (TypeConversionUtil.isPrimitiveWrapper(aClass.getQualifiedName())) -->Line_8 $$ parameterChunk.setGetter(paramType.getCanonicalText() + "Value")[ CD ]
Line_16 $$ PsiMethod compatibleConstructor = null-->Line_23 $$ if (compatibleConstructor == null) [ FD ]
Line_37 $$ if (getterForField != null) -->Line_38 $$ parameterChunk.setGetter(getterForField.getName())[ CD ]
Line_2 $$ private static PsiMethod existingClassIsCompatible(PsiClass aClass, List<ParameterChunk> params) -->Line_23 $$ if (compatibleConstructor == null) [ CD ]
Line_28 $$ for (int i = 0; i < constructorParams.length; i++) -->Line_31 $$ final PsiField field = findFieldAssigned(param, compatibleConstructor)[ CD ]
Line_29 $$ final PsiParameter param = constructorParams[i]-->Line_31 $$ final PsiField field = findFieldAssigned(param, compatibleConstructor)[ FD ]
Line_4 $$ final ParameterChunk parameterChunk = params.get(0)-->Line_35 $$ parameterChunk.setField(field)[ FD ]
Line_31 $$ final PsiField field = findFieldAssigned(param, compatibleConstructor)-->Line_35 $$ parameterChunk.setField(field)[ FD ]
Line_4 $$ final ParameterChunk parameterChunk = params.get(0)-->Line_8 $$ parameterChunk.setGetter(paramType.getCanonicalText() + "Value")[ FD ]
Line_5 $$ final PsiType paramType = parameterChunk.parameter.type-->Line_8 $$ parameterChunk.setGetter(paramType.getCanonicalText() + "Value")[ FD ]
Line_19 $$ compatibleConstructor = constructor-->Line_23 $$ if (compatibleConstructor == null) [ FD ]
Line_19 $$ compatibleConstructor = constructor-->Line_26 $$ final PsiParameterList parameterList = compatibleConstructor.getParameterList()[ FD ]
Line_32 $$ if (field == null) -->Line_33 $$ return null[ CD ]
Line_2 $$ private static PsiMethod existingClassIsCompatible(PsiClass aClass, List<ParameterChunk> params) -->Line_9 $$ for (PsiMethod constructor : aClass.getConstructors()) [ FD ]
Line_36 $$ final PsiMethod getterForField = PropertyUtil.findGetterForField(field)-->Line_37 $$ if (getterForField != null) [ FD ]
Line_40 $$ final PsiMethod setterForField = PropertyUtil.findSetterForField(field)-->Line_42 $$ parameterChunk.setSetter(setterForField.getName())[ FD ]
Line_2 $$ private static PsiMethod existingClassIsCompatible(PsiClass aClass, List<ParameterChunk> params) -->Line_26 $$ final PsiParameterList parameterList = compatibleConstructor.getParameterList()[ CD ]
Line_2 $$ private static PsiMethod existingClassIsCompatible(PsiClass aClass, List<ParameterChunk> params) -->Line_15 $$ final PsiMethod[] constructors = aClass.getConstructors()[ CD ]
Line_4 $$ final ParameterChunk parameterChunk = params.get(0)-->Line_38 $$ parameterChunk.setGetter(getterForField.getName())[ FD ]
Line_28 $$ for (int i = 0; i < constructorParams.length; i++) -->Line_40 $$ final PsiMethod setterForField = PropertyUtil.findSetterForField(field)[ CD ]
Line_2 $$ private static PsiMethod existingClassIsCompatible(PsiClass aClass, List<ParameterChunk> params) -->Line_6 $$ if (TypeConversionUtil.isPrimitiveWrapper(aClass.getQualifiedName())) [ FD ]
Line_3 $$ if (params.size() == 1) -->Line_4 $$ final ParameterChunk parameterChunk = params.get(0)[ CD ]
Line_2 $$ private static PsiMethod existingClassIsCompatible(PsiClass aClass, List<ParameterChunk> params) -->Line_28 $$ for (int i = 0; i < constructorParams.length; i++) [ CD ]
Line_18 $$ if (constructorIsCompatible(constructor, params)) -->Line_19 $$ compatibleConstructor = constructor[ CD ]
Line_30 $$ final ParameterChunk parameterChunk = params.get(i)-->Line_35 $$ parameterChunk.setField(field)[ FD ]
Line_6 $$ if (TypeConversionUtil.isPrimitiveWrapper(aClass.getQualifiedName())) -->Line_7 $$ parameterChunk.setField(aClass.findFieldByName("value", false))[ CD ]
Line_28 $$ for (int i = 0; i < constructorParams.length; i++) -->Line_37 $$ if (getterForField != null) [ CD ]
Line_16 $$ PsiMethod compatibleConstructor = null-->Line_31 $$ final PsiField field = findFieldAssigned(param, compatibleConstructor)[ FD ]
Line_31 $$ final PsiField field = findFieldAssigned(param, compatibleConstructor)-->Line_36 $$ final PsiMethod getterForField = PropertyUtil.findGetterForField(field)[ FD ]
Line_4 $$ final ParameterChunk parameterChunk = params.get(0)-->Line_42 $$ parameterChunk.setSetter(setterForField.getName())[ FD ]
Line_9 $$ for (PsiMethod constructor : aClass.getConstructors()) -->Line_10 $$ if (constructorIsCompatible(constructor, params))[ FD ]
Line_28 $$ for (int i = 0; i < constructorParams.length; i++) -->Line_29 $$ final PsiParameter param = constructorParams[i][ CD ]
Line_2 $$ private static PsiMethod existingClassIsCompatible(PsiClass aClass, List<ParameterChunk> params) -->Line_4 $$ final ParameterChunk parameterChunk = params.get(0)[ FD ]
Line_9 $$ for (PsiMethod constructor : aClass.getConstructors()) -->Line_18 $$ if (constructorIsCompatible(constructor, params)) [ FD ]
Line_36 $$ final PsiMethod getterForField = PropertyUtil.findGetterForField(field)-->Line_38 $$ parameterChunk.setGetter(getterForField.getName())[ FD ]
