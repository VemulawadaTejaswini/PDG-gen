Line_2 $$ public void testResponseWaiting() throws InterruptedException -->Line_9 $$ Assert.assertEquals(1, responseWaitingMap.size())[ CD ]
Line_8 $$ Map<Long, Datagram> responseWaitingMap = _mockIntraband.responseWaitingMap-->Line_66 $$ Assert.assertSame(requestDatagram1, responseWaitingMap.get(sequenceId))[ FD ]
Line_27 $$ RecordCompletionHandler<Object> recordCompletionHandler1 = new RecordCompletionHandler()-->Line_49 $$ recordCompletionHandler1.waitUntilTimeouted()[ FD ]
Line_54 $$ recordCompletionHandler1 = new RecordCompletionHandler()-->Line_55 $$ requestDatagram1.completionHandler = recordCompletionHandler1[ FD ]
Line_59 $$ requestDatagram2 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_64 $$ _mockIntraband.addResponseWaitingDatagram(requestDatagram2)[ FD ]
Line_12 $$ Collection<Long> timeoutSequenceIds = timeoutMap.values()-->Line_14 $$ Assert.assertTrue(timeoutSequenceIds.contains(sequenceId))[ FD ]
Line_2 $$ public void testResponseWaiting() throws InterruptedException -->Line_18 $$ Assert.assertTrue(responseWaitingMap.isEmpty())[ CD ]
Line_15 $$ Datagram responseDatagram = Datagram.createResponseDatagram(requestDatagram, _data)-->Line_20 $$ _mockIntraband.removeResponseWaitingDatagram(responseDatagram)[ FD ]
Line_4 $$ long sequenceId = 100-->Line_14 $$ Assert.assertTrue(timeoutSequenceIds.contains(sequenceId))[ FD ]
Line_2 $$ public void testResponseWaiting() throws InterruptedException -->Line_16 $$ Assert.assertFalse(responseDatagram.isRequest())[ CD ]
Line_2 $$ public void testResponseWaiting() throws InterruptedException -->Line_20 $$ _mockIntraband.removeResponseWaitingDatagram(responseDatagram)[ CD ]
Line_32 $$ Datagram requestDatagram2 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_60 $$ requestDatagram2.setSequenceId(sequenceId + 1)[ FD ]
Line_4 $$ long sequenceId = 100-->Line_39 $$ Assert.assertSame(requestDatagram1, responseWaitingMap.get(sequenceId))[ FD ]
Line_8 $$ Map<Long, Datagram> responseWaitingMap = _mockIntraband.responseWaitingMap-->Line_9 $$ Assert.assertEquals(1, responseWaitingMap.size())[ FD ]
Line_12 $$ Collection<Long> timeoutSequenceIds = timeoutMap.values()-->Line_42 $$ Assert.assertTrue(timeoutSequenceIds.contains(sequenceId))[ FD ]
Line_61 $$ recordCompletionHandler2 = new RecordCompletionHandler()-->Line_75 $$ recordCompletionHandler2.waitUntilTimeouted()[ FD ]
Line_2 $$ public void testResponseWaiting() throws InterruptedException -->Line_13 $$ Assert.assertEquals(1, timeoutSequenceIds.size())[ CD ]
Line_34 $$ RecordCompletionHandler<Object> recordCompletionHandler2 = new RecordCompletionHandler()-->Line_62 $$ requestDatagram2.completionHandler = recordCompletionHandler2[ FD ]
Line_8 $$ Map<Long, Datagram> responseWaitingMap = _mockIntraband.responseWaitingMap-->Line_18 $$ Assert.assertTrue(responseWaitingMap.isEmpty())[ FD ]
Line_15 $$ Datagram responseDatagram = Datagram.createResponseDatagram(requestDatagram, _data)-->Line_17 $$ _mockIntraband.removeResponseWaitingDatagram(responseDatagram)[ FD ]
Line_12 $$ Collection<Long> timeoutSequenceIds = timeoutMap.values()-->Line_22 $$ Assert.assertTrue(timeoutSequenceIds.isEmpty())[ FD ]
Line_27 $$ RecordCompletionHandler<Object> recordCompletionHandler1 = new RecordCompletionHandler()-->Line_28 $$ requestDatagram1.completionHandler = recordCompletionHandler1[ FD ]
Line_12 $$ Collection<Long> timeoutSequenceIds = timeoutMap.values()-->Line_19 $$ Assert.assertTrue(timeoutSequenceIds.isEmpty())[ FD ]
Line_2 $$ public void testResponseWaiting() throws InterruptedException -->Line_4 $$ long sequenceId = 100[ CD ]
Line_3 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_5 $$ requestDatagram.setSequenceId(sequenceId)[ FD ]
Line_12 $$ Collection<Long> timeoutSequenceIds = timeoutMap.values()-->Line_69 $$ Assert.assertTrue(timeoutSequenceIds.contains(sequenceId))[ FD ]
Line_2 $$ public void testResponseWaiting() throws InterruptedException -->Line_3 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)[ CD ]
Line_2 $$ public void testResponseWaiting() throws InterruptedException -->Line_14 $$ Assert.assertTrue(timeoutSequenceIds.contains(sequenceId))[ CD ]
Line_32 $$ Datagram requestDatagram2 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_40 $$ Assert.assertSame(requestDatagram2, responseWaitingMap.get(sequenceId + 1))[ FD ]
Line_12 $$ Collection<Long> timeoutSequenceIds = timeoutMap.values()-->Line_43 $$ Assert.assertTrue(timeoutSequenceIds.contains(sequenceId + 1))[ FD ]
Line_4 $$ long sequenceId = 100-->Line_66 $$ Assert.assertSame(requestDatagram1, responseWaitingMap.get(sequenceId))[ FD ]
Line_27 $$ RecordCompletionHandler<Object> recordCompletionHandler1 = new RecordCompletionHandler()-->Line_74 $$ recordCompletionHandler1.waitUntilTimeouted()[ FD ]
Line_27 $$ RecordCompletionHandler<Object> recordCompletionHandler1 = new RecordCompletionHandler()-->Line_54 $$ recordCompletionHandler1 = new RecordCompletionHandler()[ FD ]
Line_24 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_47 $$ assertMessageStartWith(logRecords.get(0), "Removed timeout response waiting datagram ")[ FD ]
Line_15 $$ Datagram responseDatagram = Datagram.createResponseDatagram(requestDatagram, _data)-->Line_16 $$ Assert.assertFalse(responseDatagram.isRequest())[ FD ]
Line_25 $$ Datagram requestDatagram1 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_66 $$ Assert.assertSame(requestDatagram1, responseWaitingMap.get(sequenceId))[ FD ]
Line_2 $$ public void testResponseWaiting() throws InterruptedException -->Line_15 $$ Datagram responseDatagram = Datagram.createResponseDatagram(requestDatagram, _data)[ CD ]
Line_34 $$ RecordCompletionHandler<Object> recordCompletionHandler2 = new RecordCompletionHandler()-->Line_61 $$ recordCompletionHandler2 = new RecordCompletionHandler()[ FD ]
Line_2 $$ public void testResponseWaiting() throws InterruptedException -->Line_5 $$ requestDatagram.setSequenceId(sequenceId)[ CD ]
Line_12 $$ Collection<Long> timeoutSequenceIds = timeoutMap.values()-->Line_41 $$ Assert.assertEquals(2, timeoutSequenceIds.size())[ FD ]
Line_25 $$ Datagram requestDatagram1 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_30 $$ _mockIntraband.addResponseWaitingDatagram(requestDatagram1)[ FD ]
Line_2 $$ public void testResponseWaiting() throws InterruptedException -->Line_19 $$ Assert.assertTrue(timeoutSequenceIds.isEmpty())[ CD ]
Line_59 $$ requestDatagram2 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_67 $$ Assert.assertSame(requestDatagram2, responseWaitingMap.get(sequenceId + 1))[ FD ]
Line_2 $$ public void testResponseWaiting() throws InterruptedException -->Line_6 $$ requestDatagram.timeout = 10000[ CD ]
Line_8 $$ Map<Long, Datagram> responseWaitingMap = _mockIntraband.responseWaitingMap-->Line_21 $$ Assert.assertTrue(responseWaitingMap.isEmpty())[ FD ]
Line_34 $$ RecordCompletionHandler<Object> recordCompletionHandler2 = new RecordCompletionHandler()-->Line_75 $$ recordCompletionHandler2.waitUntilTimeouted()[ FD ]
Line_24 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_51 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_2 $$ public void testResponseWaiting() throws InterruptedException -->Line_7 $$ _mockIntraband.addResponseWaitingDatagram(requestDatagram)[ CD ]
Line_3 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_7 $$ _mockIntraband.addResponseWaitingDatagram(requestDatagram)[ FD ]
Line_11 $$ Map<Long, Long> timeoutMap = _mockIntraband.timeoutMap-->Line_12 $$ Collection<Long> timeoutSequenceIds = timeoutMap.values()[ FD ]
Line_34 $$ RecordCompletionHandler<Object> recordCompletionHandler2 = new RecordCompletionHandler()-->Line_50 $$ recordCompletionHandler2.waitUntilTimeouted()[ FD ]
Line_32 $$ Datagram requestDatagram2 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_33 $$ requestDatagram2.setSequenceId(sequenceId + 1)[ FD ]
Line_54 $$ recordCompletionHandler1 = new RecordCompletionHandler()-->Line_74 $$ recordCompletionHandler1.waitUntilTimeouted()[ FD ]
Line_2 $$ public void testResponseWaiting() throws InterruptedException -->Line_21 $$ Assert.assertTrue(responseWaitingMap.isEmpty())[ CD ]
Line_12 $$ Collection<Long> timeoutSequenceIds = timeoutMap.values()-->Line_70 $$ Assert.assertTrue(timeoutSequenceIds.contains(sequenceId + 1))[ FD ]
Line_52 $$ requestDatagram1 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_57 $$ _mockIntraband.addResponseWaitingDatagram(requestDatagram1)[ FD ]
Line_24 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_48 $$ assertMessageStartWith(logRecords.get(1), "Removed timeout response waiting datagram ")[ FD ]
Line_12 $$ Collection<Long> timeoutSequenceIds = timeoutMap.values()-->Line_13 $$ Assert.assertEquals(1, timeoutSequenceIds.size())[ FD ]
Line_32 $$ Datagram requestDatagram2 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_37 $$ _mockIntraband.addResponseWaitingDatagram(requestDatagram2)[ FD ]
Line_32 $$ Datagram requestDatagram2 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_59 $$ requestDatagram2 = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_8 $$ Map<Long, Datagram> responseWaitingMap = _mockIntraband.responseWaitingMap-->Line_67 $$ Assert.assertSame(requestDatagram2, responseWaitingMap.get(sequenceId + 1))[ FD ]
Line_4 $$ long sequenceId = 100-->Line_26 $$ requestDatagram1.setSequenceId(sequenceId)[ FD ]
Line_2 $$ public void testResponseWaiting() throws InterruptedException -->Line_22 $$ Assert.assertTrue(timeoutSequenceIds.isEmpty())[ CD ]
Line_23 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.WARNING)) -->Line_24 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_8 $$ Map<Long, Datagram> responseWaitingMap = _mockIntraband.responseWaitingMap-->Line_40 $$ Assert.assertSame(requestDatagram2, responseWaitingMap.get(sequenceId + 1))[ FD ]
Line_4 $$ long sequenceId = 100-->Line_42 $$ Assert.assertTrue(timeoutSequenceIds.contains(sequenceId))[ FD ]
Line_59 $$ requestDatagram2 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_60 $$ requestDatagram2.setSequenceId(sequenceId + 1)[ FD ]
Line_32 $$ Datagram requestDatagram2 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_67 $$ Assert.assertSame(requestDatagram2, responseWaitingMap.get(sequenceId + 1))[ FD ]
Line_8 $$ Map<Long, Datagram> responseWaitingMap = _mockIntraband.responseWaitingMap-->Line_39 $$ Assert.assertSame(requestDatagram1, responseWaitingMap.get(sequenceId))[ FD ]
Line_24 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_46 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_25 $$ Datagram requestDatagram1 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_26 $$ requestDatagram1.setSequenceId(sequenceId)[ FD ]
Line_34 $$ RecordCompletionHandler<Object> recordCompletionHandler2 = new RecordCompletionHandler()-->Line_35 $$ requestDatagram2.completionHandler = recordCompletionHandler2[ FD ]
Line_8 $$ Map<Long, Datagram> responseWaitingMap = _mockIntraband.responseWaitingMap-->Line_65 $$ Assert.assertEquals(2, responseWaitingMap.size())[ FD ]
Line_3 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_10 $$ Assert.assertSame(requestDatagram, responseWaitingMap.get(sequenceId))[ FD ]
Line_2 $$ public void testResponseWaiting() throws InterruptedException -->Line_12 $$ Collection<Long> timeoutSequenceIds = timeoutMap.values()[ CD ]
Line_25 $$ Datagram requestDatagram1 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_39 $$ Assert.assertSame(requestDatagram1, responseWaitingMap.get(sequenceId))[ FD ]
Line_4 $$ long sequenceId = 100-->Line_53 $$ requestDatagram1.setSequenceId(sequenceId)[ FD ]
Line_8 $$ Map<Long, Datagram> responseWaitingMap = _mockIntraband.responseWaitingMap-->Line_10 $$ Assert.assertSame(requestDatagram, responseWaitingMap.get(sequenceId))[ FD ]
Line_25 $$ Datagram requestDatagram1 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_53 $$ requestDatagram1.setSequenceId(sequenceId)[ FD ]
Line_24 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_73 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_4 $$ long sequenceId = 100-->Line_10 $$ Assert.assertSame(requestDatagram, responseWaitingMap.get(sequenceId))[ FD ]
Line_4 $$ long sequenceId = 100-->Line_5 $$ requestDatagram.setSequenceId(sequenceId)[ FD ]
Line_2 $$ public void testResponseWaiting() throws InterruptedException -->Line_8 $$ Map<Long, Datagram> responseWaitingMap = _mockIntraband.responseWaitingMap[ CD ]
Line_23 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.WARNING)) -->Line_51 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_2 $$ public void testResponseWaiting() throws InterruptedException -->Line_17 $$ _mockIntraband.removeResponseWaitingDatagram(responseDatagram)[ CD ]
Line_52 $$ requestDatagram1 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_53 $$ requestDatagram1.setSequenceId(sequenceId)[ FD ]
Line_2 $$ public void testResponseWaiting() throws InterruptedException -->Line_11 $$ Map<Long, Long> timeoutMap = _mockIntraband.timeoutMap[ CD ]
Line_61 $$ recordCompletionHandler2 = new RecordCompletionHandler()-->Line_62 $$ requestDatagram2.completionHandler = recordCompletionHandler2[ FD ]
Line_4 $$ long sequenceId = 100-->Line_69 $$ Assert.assertTrue(timeoutSequenceIds.contains(sequenceId))[ FD ]
Line_3 $$ Datagram requestDatagram = Datagram.createRequestDatagram(_TYPE, _data)-->Line_15 $$ Datagram responseDatagram = Datagram.createResponseDatagram(requestDatagram, _data)[ FD ]
Line_25 $$ Datagram requestDatagram1 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_52 $$ requestDatagram1 = Datagram.createRequestDatagram(_TYPE, _data)[ FD ]
Line_2 $$ public void testResponseWaiting() throws InterruptedException -->Line_10 $$ Assert.assertSame(requestDatagram, responseWaitingMap.get(sequenceId))[ CD ]
Line_52 $$ requestDatagram1 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_66 $$ Assert.assertSame(requestDatagram1, responseWaitingMap.get(sequenceId))[ FD ]
Line_27 $$ RecordCompletionHandler<Object> recordCompletionHandler1 = new RecordCompletionHandler()-->Line_55 $$ requestDatagram1.completionHandler = recordCompletionHandler1[ FD ]
Line_12 $$ Collection<Long> timeoutSequenceIds = timeoutMap.values()-->Line_68 $$ Assert.assertEquals(2, timeoutSequenceIds.size())[ FD ]
Line_8 $$ Map<Long, Datagram> responseWaitingMap = _mockIntraband.responseWaitingMap-->Line_38 $$ Assert.assertEquals(2, responseWaitingMap.size())[ FD ]
Line_51 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_73 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_25 $$ Datagram requestDatagram1 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_57 $$ _mockIntraband.addResponseWaitingDatagram(requestDatagram1)[ FD ]
Line_32 $$ Datagram requestDatagram2 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_64 $$ _mockIntraband.addResponseWaitingDatagram(requestDatagram2)[ FD ]
