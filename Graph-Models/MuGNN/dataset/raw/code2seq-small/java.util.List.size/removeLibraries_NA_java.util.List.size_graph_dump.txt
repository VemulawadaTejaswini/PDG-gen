Line_4 $$ for (LibraryProjectStructureElement element : libraries) -->Line_5 $$ getModelProvider().getModifiableModel().removeLibrary(element.getLibrary())[ FD ]
Line_2 $$ public void removeLibraries(@NotNull List<LibraryProjectStructureElement> libraries) -->Line_12 $$ removePaths(pathsToRemove.toArray(new TreePath[pathsToRemove.size()]))[ CD ]
Line_2 $$ public void removeLibraries(@NotNull List<LibraryProjectStructureElement> libraries) -->Line_11 $$ myContext.getDaemonAnalyzer().removeElements(libraries)[ CD ]
Line_2 $$ public void removeLibraries(@NotNull List<LibraryProjectStructureElement> libraries) -->Line_3 $$ List<TreePath> pathsToRemove = new ArrayList<TreePath>()[ CD ]
Line_6 $$ MyNode node = findNodeByObject(myRoot, element.getLibrary())-->Line_7 $$ if (node != null) [ FD ]
Line_2 $$ public void removeLibraries(@NotNull List<LibraryProjectStructureElement> libraries) -->Line_11 $$ myContext.getDaemonAnalyzer().removeElements(libraries)[ FD ]
Line_3 $$ List<TreePath> pathsToRemove = new ArrayList<TreePath>()-->Line_8 $$ pathsToRemove.add(TreeUtil.getPathFromRoot(node))[ FD ]
Line_3 $$ List<TreePath> pathsToRemove = new ArrayList<TreePath>()-->Line_12 $$ removePaths(pathsToRemove.toArray(new TreePath[pathsToRemove.size()]))[ FD ]
Line_4 $$ for (LibraryProjectStructureElement element : libraries) -->Line_6 $$ MyNode node = findNodeByObject(myRoot, element.getLibrary())[ FD ]
Line_7 $$ if (node != null) -->Line_8 $$ pathsToRemove.add(TreeUtil.getPathFromRoot(node))[ CD ]
Line_6 $$ MyNode node = findNodeByObject(myRoot, element.getLibrary())-->Line_8 $$ pathsToRemove.add(TreeUtil.getPathFromRoot(node))[ FD ]
