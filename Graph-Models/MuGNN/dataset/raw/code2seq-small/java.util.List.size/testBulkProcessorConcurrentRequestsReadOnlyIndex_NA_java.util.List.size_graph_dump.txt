Line_37 $$ for (BulkItemResponse bulkItemResponse : listener.bulkItems) -->Line_40 $$ if (bulkItemResponse.getIndex().equals("test")) [ FD ]
Line_2 $$ public void testBulkProcessorConcurrentRequestsReadOnlyIndex() throws Exception -->Line_4 $$ assertAcked(client().admin().indices().prepareUpdateSettings("test-ro").setSettings(Settings.builder().put(IndexMetaData.SETTING_BLOCKS_WRITE, true)))[ CD ]
Line_12 $$ final CountDownLatch closeLatch = new CountDownLatch(totalExpectedBulkActions)-->Line_30 $$ closeLatch.await()[ FD ]
Line_2 $$ public void testBulkProcessorConcurrentRequestsReadOnlyIndex() throws Exception -->Line_8 $$ int concurrentRequests = randomIntBetween(0, 10)[ CD ]
Line_2 $$ public void testBulkProcessorConcurrentRequestsReadOnlyIndex() throws Exception -->Line_14 $$ int testReadOnlyDocs = 0[ CD ]
Line_13 $$ int testDocs = 0-->Line_22 $$ processor.add(new IndexRequest("test", "test", Integer.toString(testDocs)).source("field", "value"))[ FD ]
Line_2 $$ public void testBulkProcessorConcurrentRequestsReadOnlyIndex() throws Exception -->Line_6 $$ int bulkActions = randomIntBetween(10, 100)[ CD ]
Line_2 $$ public void testBulkProcessorConcurrentRequestsReadOnlyIndex() throws Exception -->Line_3 $$ createIndex("test-ro")[ CD ]
Line_17 $$ try (BulkProcessor processor = //set interval and size to high values-->Line_22 $$ processor.add(new IndexRequest("test", "test", Integer.toString(testDocs)).source("field", "value"))[ FD ]
Line_15 $$ MultiGetRequestBuilder multiGetRequestBuilder = client().prepareMultiGet()-->Line_23 $$ multiGetRequestBuilder.add("test", "test", Integer.toString(testDocs))[ FD ]
Line_6 $$ int bulkActions = randomIntBetween(10, 100)-->Line_17 $$ try (BulkProcessor processor = //set interval and size to high values[ FD ]
Line_2 $$ public void testBulkProcessorConcurrentRequestsReadOnlyIndex() throws Exception -->Line_54 $$ assertMultiGetResponse(multiGetRequestBuilder.get(), testDocs)[ CD ]
Line_2 $$ public void testBulkProcessorConcurrentRequestsReadOnlyIndex() throws Exception -->Line_13 $$ int testDocs = 0[ CD ]
Line_2 $$ public void testBulkProcessorConcurrentRequestsReadOnlyIndex() throws Exception -->Line_30 $$ closeLatch.await()[ CD ]
Line_6 $$ int bulkActions = randomIntBetween(10, 100)-->Line_7 $$ int numDocs = randomIntBetween(bulkActions, bulkActions + 100)[ FD ]
Line_8 $$ int concurrentRequests = randomIntBetween(0, 10)-->Line_17 $$ try (BulkProcessor processor = //set interval and size to high values[ FD ]
Line_40 $$ if (bulkItemResponse.getIndex().equals("test")) -->Line_41 $$ assertThat(bulkItemResponse.isFailed(), equalTo(false))[ CD ]
Line_37 $$ for (BulkItemResponse bulkItemResponse : listener.bulkItems) -->Line_41 $$ assertThat(bulkItemResponse.isFailed(), equalTo(false))[ FD ]
Line_13 $$ int testDocs = 0-->Line_54 $$ assertMultiGetResponse(multiGetRequestBuilder.get(), testDocs)[ FD ]
Line_16 $$ BulkProcessorTestListener listener = new BulkProcessorTestListener(latch, closeLatch)-->Line_17 $$ try (BulkProcessor processor = //set interval and size to high values[ FD ]
Line_2 $$ public void testBulkProcessorConcurrentRequestsReadOnlyIndex() throws Exception -->Line_16 $$ BulkProcessorTestListener listener = new BulkProcessorTestListener(latch, closeLatch)[ CD ]
Line_11 $$ int totalExpectedBulkActions = numDocs % bulkActions == 0 ? expectedBulkActions : expectedBulkActions + 1-->Line_32 $$ assertThat(listener.afterCounts.get(), equalTo(totalExpectedBulkActions))[ FD ]
Line_2 $$ public void testBulkProcessorConcurrentRequestsReadOnlyIndex() throws Exception -->Line_32 $$ assertThat(listener.afterCounts.get(), equalTo(totalExpectedBulkActions))[ CD ]
Line_20 $$ if (randomBoolean()) -->Line_25 $$ testReadOnlyDocs++[ CD ]
Line_2 $$ public void testBulkProcessorConcurrentRequestsReadOnlyIndex() throws Exception -->Line_7 $$ int numDocs = randomIntBetween(bulkActions, bulkActions + 100)[ CD ]
Line_2 $$ public void testBulkProcessorConcurrentRequestsReadOnlyIndex() throws Exception -->Line_35 $$ Set<String> ids = new HashSet()[ CD ]
Line_11 $$ int totalExpectedBulkActions = numDocs % bulkActions == 0 ? expectedBulkActions : expectedBulkActions + 1-->Line_31 $$ assertThat(listener.beforeCounts.get(), equalTo(totalExpectedBulkActions))[ FD ]
Line_2 $$ public void testBulkProcessorConcurrentRequestsReadOnlyIndex() throws Exception -->Line_5 $$ ensureGreen()[ CD ]
Line_20 $$ if (randomBoolean()) -->Line_23 $$ multiGetRequestBuilder.add("test", "test", Integer.toString(testDocs))[ CD ]
Line_2 $$ public void testBulkProcessorConcurrentRequestsReadOnlyIndex() throws Exception -->Line_34 $$ assertThat(listener.bulkItems.size(), equalTo(testDocs + testReadOnlyDocs))[ CD ]
Line_40 $$ if (bulkItemResponse.getIndex().equals("test")) -->Line_47 $$ assertThat(bulkItemResponse.isFailed(), equalTo(true))[ CD ]
Line_19 $$ for (int i = 1; i <= numDocs; i++) -->Line_20 $$ if (randomBoolean()) [ CD ]
Line_37 $$ for (BulkItemResponse bulkItemResponse : listener.bulkItems) -->Line_38 $$ assertThat(bulkItemResponse.getIndex(), either(equalTo("test")).or(equalTo("test-ro")))[ FD ]
Line_13 $$ int testDocs = 0-->Line_21 $$ testDocs++[ FD ]
Line_14 $$ int testReadOnlyDocs = 0-->Line_25 $$ testReadOnlyDocs++[ FD ]
Line_14 $$ int testReadOnlyDocs = 0-->Line_26 $$ processor.add(new IndexRequest("test-ro", "test", Integer.toString(testReadOnlyDocs)).source("field", "value"))[ FD ]
Line_20 $$ if (randomBoolean()) -->Line_22 $$ processor.add(new IndexRequest("test", "test", Integer.toString(testDocs)).source("field", "value"))[ CD ]
Line_20 $$ if (randomBoolean()) -->Line_26 $$ processor.add(new IndexRequest("test-ro", "test", Integer.toString(testReadOnlyDocs)).source("field", "value"))[ CD ]
Line_2 $$ public void testBulkProcessorConcurrentRequestsReadOnlyIndex() throws Exception -->Line_10 $$ final CountDownLatch latch = new CountDownLatch(expectedBulkActions)[ CD ]
Line_17 $$ try (BulkProcessor processor = //set interval and size to high values-->Line_26 $$ processor.add(new IndexRequest("test-ro", "test", Integer.toString(testReadOnlyDocs)).source("field", "value"))[ FD ]
Line_20 $$ if (randomBoolean()) -->Line_21 $$ testDocs++[ CD ]
Line_2 $$ public void testBulkProcessorConcurrentRequestsReadOnlyIndex() throws Exception -->Line_9 $$ int expectedBulkActions = numDocs / bulkActions[ CD ]
Line_2 $$ public void testBulkProcessorConcurrentRequestsReadOnlyIndex() throws Exception -->Line_36 $$ Set<String> readOnlyIds = new HashSet()[ CD ]
Line_2 $$ public void testBulkProcessorConcurrentRequestsReadOnlyIndex() throws Exception -->Line_33 $$ assertThat(listener.bulkFailures.size(), equalTo(0))[ CD ]
Line_13 $$ int testDocs = 0-->Line_23 $$ multiGetRequestBuilder.add("test", "test", Integer.toString(testDocs))[ FD ]
Line_37 $$ for (BulkItemResponse bulkItemResponse : listener.bulkItems) -->Line_39 $$ assertThat(bulkItemResponse.getType(), equalTo("test"))[ FD ]
Line_15 $$ MultiGetRequestBuilder multiGetRequestBuilder = client().prepareMultiGet()-->Line_54 $$ assertMultiGetResponse(multiGetRequestBuilder.get(), testDocs)[ FD ]
Line_2 $$ public void testBulkProcessorConcurrentRequestsReadOnlyIndex() throws Exception -->Line_12 $$ final CountDownLatch closeLatch = new CountDownLatch(totalExpectedBulkActions)[ CD ]
Line_2 $$ public void testBulkProcessorConcurrentRequestsReadOnlyIndex() throws Exception -->Line_11 $$ int totalExpectedBulkActions = numDocs % bulkActions == 0 ? expectedBulkActions : expectedBulkActions + 1[ CD ]
Line_37 $$ for (BulkItemResponse bulkItemResponse : listener.bulkItems) -->Line_47 $$ assertThat(bulkItemResponse.isFailed(), equalTo(true))[ FD ]
Line_2 $$ public void testBulkProcessorConcurrentRequestsReadOnlyIndex() throws Exception -->Line_15 $$ MultiGetRequestBuilder multiGetRequestBuilder = client().prepareMultiGet()[ CD ]
Line_7 $$ int numDocs = randomIntBetween(bulkActions, bulkActions + 100)-->Line_19 $$ for (int i = 1; i <= numDocs; i++) [ FD ]
Line_2 $$ public void testBulkProcessorConcurrentRequestsReadOnlyIndex() throws Exception -->Line_31 $$ assertThat(listener.beforeCounts.get(), equalTo(totalExpectedBulkActions))[ CD ]
