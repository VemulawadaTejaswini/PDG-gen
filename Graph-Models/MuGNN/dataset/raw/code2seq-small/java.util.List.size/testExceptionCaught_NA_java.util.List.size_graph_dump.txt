Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_17 $$ logRecord = logRecords.get(1)[ FD ]
Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_14 $$ Assert.assertEquals("Closing " + embeddedChannelToString + " due to:", logRecord.getMessage())[ FD ]
Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_18 $$ Assert.assertEquals(embeddedChannel + " is closed", logRecord.getMessage())[ FD ]
Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_15 $$ Throwable throwable = logRecord.getThrown()[ FD ]
Line_6 $$ EmbeddedChannel embeddedChannel = new EmbeddedChannel(new NettyFabricAgentRegistrationChannelHandler(fabricAgentRegistry, repositoryParentPath, new DefaultEventExecutorGroup(1), 0, 0, 0))-->Line_8 $$ String embeddedChannelToString = embeddedChannel.toString()[ FD ]
Line_6 $$ EmbeddedChannel embeddedChannel = new EmbeddedChannel(new NettyFabricAgentRegistrationChannelHandler(fabricAgentRegistry, repositoryParentPath, new DefaultEventExecutorGroup(1), 0, 0, 0))-->Line_10 $$ Assert.assertFalse(embeddedChannel.isOpen())[ FD ]
Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_13 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_17 $$ logRecord = logRecords.get(1)-->Line_18 $$ Assert.assertEquals(embeddedChannel + " is closed", logRecord.getMessage())[ FD ]
Line_6 $$ EmbeddedChannel embeddedChannel = new EmbeddedChannel(new NettyFabricAgentRegistrationChannelHandler(fabricAgentRegistry, repositoryParentPath, new DefaultEventExecutorGroup(1), 0, 0, 0))-->Line_9 $$ embeddedChannel.writeInbound(new NettyFabricAgentConfig(new File("RepositoryFolder")))[ FD ]
Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_12 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_7 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyFabricAgentRegistrationChannelHandler.class.getName(), Level.INFO)) -->Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_17 $$ logRecord = logRecords.get(1)[ FD ]
