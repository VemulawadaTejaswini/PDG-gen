Line_3 $$ OrcReader orcReader = new OrcReader(dataSource, new OrcMetadataReader(), new DataSize(1, Unit.MEGABYTE), new DataSize(1, Unit.MEGABYTE))-->Line_13 $$ return createRecordReader(orcReader, includedColumns)[ FD ]
Line_2 $$ public static OrcRecordReader createReader(OrcDataSource dataSource, List<Long> columnIds, List<Type> types) throws IOException -->Line_3 $$ OrcReader orcReader = new OrcReader(dataSource, new OrcMetadataReader(), new DataSize(1, Unit.MEGABYTE), new DataSize(1, Unit.MEGABYTE))[ CD ]
Line_2 $$ public static OrcRecordReader createReader(OrcDataSource dataSource, List<Long> columnIds, List<Type> types) throws IOException -->Line_7 $$ int ordinal = 0[ CD ]
Line_3 $$ OrcReader orcReader = new OrcReader(dataSource, new OrcMetadataReader(), new DataSize(1, Unit.MEGABYTE), new DataSize(1, Unit.MEGABYTE))-->Line_4 $$ List<String> columnNames = orcReader.getColumnNames()[ FD ]
Line_4 $$ List<String> columnNames = orcReader.getColumnNames()-->Line_5 $$ assertEquals(columnNames.size(), columnIds.size())[ FD ]
Line_2 $$ public static OrcRecordReader createReader(OrcDataSource dataSource, List<Long> columnIds, List<Type> types) throws IOException -->Line_6 $$ Map<Integer, Type> includedColumns = new HashMap()[ CD ]
Line_2 $$ public static OrcRecordReader createReader(OrcDataSource dataSource, List<Long> columnIds, List<Type> types) throws IOException -->Line_13 $$ return createRecordReader(orcReader, includedColumns)[ CD ]
Line_2 $$ public static OrcRecordReader createReader(OrcDataSource dataSource, List<Long> columnIds, List<Type> types) throws IOException -->Line_5 $$ assertEquals(columnNames.size(), columnIds.size())[ FD ]
Line_8 $$ for (long columnId : columnIds) -->Line_9 $$ assertEquals(columnNames.get(ordinal), String.valueOf(columnId))[ FD ]
Line_7 $$ int ordinal = 0-->Line_11 $$ ordinal++[ FD ]
Line_7 $$ int ordinal = 0-->Line_9 $$ assertEquals(columnNames.get(ordinal), String.valueOf(columnId))[ FD ]
Line_2 $$ public static OrcRecordReader createReader(OrcDataSource dataSource, List<Long> columnIds, List<Type> types) throws IOException -->Line_10 $$ includedColumns.put(ordinal, types.get(ordinal))[ FD ]
Line_2 $$ public static OrcRecordReader createReader(OrcDataSource dataSource, List<Long> columnIds, List<Type> types) throws IOException -->Line_4 $$ List<String> columnNames = orcReader.getColumnNames()[ CD ]
Line_4 $$ List<String> columnNames = orcReader.getColumnNames()-->Line_9 $$ assertEquals(columnNames.get(ordinal), String.valueOf(columnId))[ FD ]
Line_6 $$ Map<Integer, Type> includedColumns = new HashMap()-->Line_13 $$ return createRecordReader(orcReader, includedColumns)[ FD ]
Line_7 $$ int ordinal = 0-->Line_10 $$ includedColumns.put(ordinal, types.get(ordinal))[ FD ]
Line_6 $$ Map<Integer, Type> includedColumns = new HashMap()-->Line_10 $$ includedColumns.put(ordinal, types.get(ordinal))[ FD ]
Line_2 $$ public static OrcRecordReader createReader(OrcDataSource dataSource, List<Long> columnIds, List<Type> types) throws IOException -->Line_5 $$ assertEquals(columnNames.size(), columnIds.size())[ CD ]
