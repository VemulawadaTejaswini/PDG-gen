Line_104 $$ i += 2-->Line_154 $$ i += 4[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_148 $$ i += 4[ FD ]
Line_151 $$ i += 4-->Line_157 $$ i += 4[ FD ]
Line_75 $$ i += 2-->Line_172 $$ i += 4[ FD ]
Line_169 $$ i += 4-->Line_214 $$ seq.setPointer(i)[ FD ]
Line_75 $$ i += 2-->Line_216 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_8 $$ int opcode = in.readUnsignedByte()-->Line_126 $$ opcode = opcode == opc_jsr_w ? opc_jsr : opc_goto[ FD ]
Line_102 $$ if (wide) -->Line_107 $$ i++[ CD ]
Line_151 $$ i += 4-->Line_166 $$ i += 4[ FD ]
Line_169 $$ i += 4-->Line_199 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_117 $$ i += 4-->Line_121 $$ i += 2[ FD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_171 $$ operands.add(new Integer(in.readInt()))[ FD ]
Line_141 $$ i += 3-->Line_151 $$ i += 4[ FD ]
Line_148 $$ i += 4-->Line_174 $$ i += 4[ FD ]
Line_204 $$ int excclass = in.readUnsignedShort()-->Line_206 $$ if (excclass != 0) [ FD ]
Line_59 $$ i += 2-->Line_29 $$ i++[ FD ]
Line_166 $$ i += 4-->Line_172 $$ i += 4[ FD ]
Line_166 $$ i += 4-->Line_34 $$ i++[ FD ]
Line_148 $$ i += 4-->Line_199 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_19 $$ if (opcode >= opc_iload_0 && opcode <= opc_aload_3) -->Line_22 $$ if (opcode >= opc_istore_0 && opcode <= opc_astore_3) [ CD ]
Line_157 $$ i += 4-->Line_174 $$ i += 4[ FD ]
Line_126 $$ opcode = opcode == opc_jsr_w ? opc_jsr : opc_goto-->Line_55 $$ if (opcode != opc_sipush) [ FD ]
Line_104 $$ i += 2-->Line_12 $$ i++[ FD ]
Line_157 $$ i += 4-->Line_199 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_104 $$ i += 2-->Line_214 $$ seq.setPointer(i)[ FD ]
Line_117 $$ i += 4-->Line_199 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_56 $$ group = GROUP_JUMP-->Line_135 $$ group = GROUP_INVOCATION[ FD ]
Line_189 $$ for (int j = 0; j < operands.size(); j++) -->Line_190 $$ ops[j] = operands.get(j).intValue()[ CD ]
Line_136 $$ i += 4-->Line_216 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_8 $$ int opcode = in.readUnsignedByte()-->Line_55 $$ if (opcode != opc_sipush) [ FD ]
Line_121 $$ i += 2-->Line_136 $$ i += 4[ FD ]
Line_136 $$ i += 4-->Line_157 $$ i += 4[ FD ]
Line_129 $$ i += 4-->Line_172 $$ i += 4[ FD ]
Line_110 $$ group = GROUP_RETURN-->Line_128 $$ group = GROUP_JUMP[ FD ]
Line_104 $$ i += 2-->Line_129 $$ i += 4[ FD ]
Line_88 $$ i += 4-->Line_199 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_129 $$ i += 4-->Line_154 $$ i += 4[ FD ]
Line_79 $$ group = GROUP_INVOCATION-->Line_176 $$ group = GROUP_SWITCH[ FD ]
Line_88 $$ i += 4-->Line_141 $$ i += 3[ FD ]
Line_157 $$ i += 4-->Line_216 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_157 $$ i += 4-->Line_215 $$ while (i >= 0) [ FD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_188 $$ int[] ops = new int[operands.size()][ FD ]
Line_170 $$ for (int j = 0; j < npairs; j++) -->Line_189 $$ for (int j = 0; j < operands.size(); j++) [ FD ]
Line_88 $$ i += 4-->Line_166 $$ i += 4[ FD ]
Line_129 $$ i += 4-->Line_148 $$ i += 4[ FD ]
Line_109 $$ if (opcode == opc_ret) -->Line_110 $$ group = GROUP_RETURN[ CD ]
Line_59 $$ i += 2-->Line_157 $$ i += 4[ FD ]
Line_136 $$ i += 4-->Line_174 $$ i += 4[ FD ]
Line_148 $$ i += 4-->Line_216 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_104 $$ i += 2-->Line_215 $$ while (i >= 0) [ FD ]
Line_24 $$ opcode = opcs_store[(opcode - opc_istore_0) / 4]-->Line_55 $$ if (opcode != opc_sipush) [ FD ]
Line_16 $$ if (opcode >= opc_iconst_m1 && opcode <= opc_iconst_5) -->Line_18 $$ opcode = opc_bipush[ CD ]
Line_59 $$ i += 2-->Line_215 $$ while (i >= 0) [ FD ]
Line_114 $$ if (wide) -->Line_119 $$ operands.add(new Integer(in.readUnsignedByte()))[ CD ]
Line_121 $$ i += 2-->Line_169 $$ i += 4[ FD ]
Line_211 $$ InstructionSequence seq = new FullInstructionSequence(instructions, new ExceptionTable(lstHandlers))-->Line_218 $$ instr.initInstruction(seq)[ FD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_120 $$ operands.add(new Integer(in.readByte()))[ FD ]
Line_141 $$ i += 3-->Line_29 $$ i++[ FD ]
Line_88 $$ i += 4-->Line_12 $$ i++[ FD ]
Line_104 $$ i += 2-->Line_216 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_75 $$ i += 2-->Line_107 $$ i++[ FD ]
Line_104 $$ i += 2-->Line_172 $$ i += 4[ FD ]
Line_154 $$ i += 4-->Line_174 $$ i += 4[ FD ]
Line_13 $$ opcode = in.readUnsignedByte()-->Line_109 $$ if (opcode == opc_ret) [ FD ]
Line_174 $$ i += 4-->Line_214 $$ seq.setPointer(i)[ FD ]
Line_199 $$ for (int i = 0; i < exception_count; i++) -->Line_214 $$ seq.setPointer(i)[ FD ]
Line_170 $$ for (int j = 0; j < npairs; j++) -->Line_174 $$ i += 4[ CD ]
Line_13 $$ opcode = in.readUnsignedByte()-->Line_21 $$ opcode = opcs_load[(opcode - opc_iload_0) / 4][ FD ]
Line_136 $$ i += 4-->Line_169 $$ i += 4[ FD ]
Line_199 $$ for (int i = 0; i < exception_count; i++) -->Line_205 $$ handler.class_index = excclass[ CD ]
Line_159 $$ group = GROUP_SWITCH-->Line_185 $$ group = GROUP_RETURN[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_193 $$ instructions.addWithKey(instr, new Integer(offset))[ CD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_20 $$ operands.add(new Integer(opr_loadstore[opcode - opc_iload_0]))[ FD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_132 $$ operands.add(new Integer(in.readUnsignedShort()))[ FD ]
Line_170 $$ for (int j = 0; j < npairs; j++) -->Line_171 $$ operands.add(new Integer(in.readInt()))[ CD ]
Line_121 $$ i += 2-->Line_148 $$ i += 4[ FD ]
Line_77 $$ group = GROUP_FIELDACCESS-->Line_192 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_154 $$ i += 4-->Line_157 $$ i += 4[ FD ]
Line_155 $$ for (int j = 0; j < high - low + 1; j++) -->Line_170 $$ for (int j = 0; j < npairs; j++) [ FD ]
Line_185 $$ group = GROUP_RETURN-->Line_192 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_75 $$ i += 2-->Line_34 $$ i++[ FD ]
Line_59 $$ i += 2-->Line_121 $$ i += 2[ FD ]
Line_129 $$ i += 4-->Line_151 $$ i += 4[ FD ]
Line_176 $$ group = GROUP_SWITCH-->Line_192 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_110 $$ group = GROUP_RETURN-->Line_159 $$ group = GROUP_SWITCH[ FD ]
Line_55 $$ if (opcode != opc_sipush) -->Line_56 $$ group = GROUP_JUMP[ CD ]
Line_166 $$ i += 4-->Line_194 $$ i++[ FD ]
Line_117 $$ i += 4-->Line_154 $$ i += 4[ FD ]
Line_136 $$ i += 4-->Line_29 $$ i++[ FD ]
Line_75 $$ i += 2-->Line_12 $$ i++[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_151 $$ i += 4[ FD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_28 $$ operands.add(new Integer(in.readByte()))[ FD ]
Line_174 $$ i += 4-->Line_216 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_77 $$ group = GROUP_FIELDACCESS-->Line_128 $$ group = GROUP_JUMP[ FD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_119 $$ operands.add(new Integer(in.readUnsignedByte()))[ FD ]
Line_11 $$ if (wide) -->Line_12 $$ i++[ CD ]
Line_151 $$ i += 4-->Line_172 $$ i += 4[ FD ]
Line_88 $$ i += 4-->Line_29 $$ i++[ FD ]
Line_121 $$ i += 2-->Line_107 $$ i++[ FD ]
Line_117 $$ i += 4-->Line_29 $$ i++[ FD ]
Line_129 $$ i += 4-->Line_166 $$ i += 4[ FD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_173 $$ operands.add(new Integer(in.readInt()))[ FD ]
Line_13 $$ opcode = in.readUnsignedByte()-->Line_24 $$ opcode = opcs_store[(opcode - opc_istore_0) / 4][ FD ]
Line_148 $$ i += 4-->Line_214 $$ seq.setPointer(i)[ FD ]
Line_151 $$ i += 4-->Line_29 $$ i++[ FD ]
Line_148 $$ i += 4-->Line_12 $$ i++[ FD ]
Line_9 $$ int group = GROUP_GENERAL-->Line_110 $$ group = GROUP_RETURN[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_192 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ CD ]
Line_10 $$ boolean wide = (opcode == opc_wide)-->Line_192 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_148 $$ i += 4-->Line_151 $$ i += 4[ FD ]
Line_157 $$ i += 4-->Line_194 $$ i++[ FD ]
Line_199 $$ for (int i = 0; i < exception_count; i++) -->Line_201 $$ handler.from = in.readUnsignedShort()[ CD ]
Line_75 $$ i += 2-->Line_104 $$ i += 2[ FD ]
Line_166 $$ i += 4-->Line_215 $$ while (i >= 0) [ FD ]
Line_155 $$ for (int j = 0; j < high - low + 1; j++) -->Line_189 $$ for (int j = 0; j < operands.size(); j++) [ FD ]
Line_83 $$ if (classStruct.isVersionGE_1_7()) -->Line_88 $$ i += 4[ CD ]
Line_117 $$ i += 4-->Line_129 $$ i += 4[ FD ]
Line_117 $$ i += 4-->Line_148 $$ i += 4[ FD ]
Line_9 $$ int group = GROUP_GENERAL-->Line_185 $$ group = GROUP_RETURN[ FD ]
Line_75 $$ i += 2-->Line_166 $$ i += 4[ FD ]
Line_75 $$ i += 2-->Line_174 $$ i += 4[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_189 $$ for (int j = 0; j < operands.size(); j++) [ CD ]
Line_121 $$ i += 2-->Line_12 $$ i++[ FD ]
Line_155 $$ for (int j = 0; j < high - low + 1; j++) -->Line_190 $$ ops[j] = operands.get(j).intValue()[ FD ]
Line_77 $$ group = GROUP_FIELDACCESS-->Line_185 $$ group = GROUP_RETURN[ FD ]
Line_77 $$ group = GROUP_FIELDACCESS-->Line_176 $$ group = GROUP_SWITCH[ FD ]
Line_104 $$ i += 2-->Line_136 $$ i += 4[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_8 $$ int opcode = in.readUnsignedByte()[ CD ]
Line_88 $$ i += 4-->Line_148 $$ i += 4[ FD ]
Line_77 $$ group = GROUP_FIELDACCESS-->Line_87 $$ group = GROUP_INVOCATION[ FD ]
Line_154 $$ i += 4-->Line_194 $$ i++[ FD ]
Line_59 $$ i += 2-->Line_154 $$ i += 4[ FD ]
Line_18 $$ opcode = opc_bipush-->Line_109 $$ if (opcode == opc_ret) [ FD ]
Line_166 $$ i += 4-->Line_6 $$ for (int i = 0; i < length; ) [ FD ]
Line_9 $$ int group = GROUP_GENERAL-->Line_128 $$ group = GROUP_JUMP[ FD ]
Line_136 $$ i += 4-->Line_107 $$ i++[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_169 $$ i += 4[ FD ]
Line_59 $$ i += 2-->Line_107 $$ i++[ FD ]
Line_87 $$ group = GROUP_INVOCATION-->Line_128 $$ group = GROUP_JUMP[ FD ]
Line_87 $$ group = GROUP_INVOCATION-->Line_110 $$ group = GROUP_RETURN[ FD ]
Line_129 $$ i += 4-->Line_169 $$ i += 4[ FD ]
Line_199 $$ for (int i = 0; i < exception_count; i++) -->Line_216 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_215 $$ while (i >= 0) -->Line_217 $$ if (instr.group != GROUP_GENERAL) [ CD ]
Line_121 $$ i += 2-->Line_151 $$ i += 4[ FD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_147 $$ operands.add(new Integer(in.readInt()))[ FD ]
Line_56 $$ group = GROUP_JUMP-->Line_176 $$ group = GROUP_SWITCH[ FD ]
Line_148 $$ i += 4-->Line_34 $$ i++[ FD ]
Line_148 $$ i += 4-->Line_154 $$ i += 4[ FD ]
Line_114 $$ if (wide) -->Line_120 $$ operands.add(new Integer(in.readByte()))[ CD ]
Line_154 $$ i += 4-->Line_29 $$ i++[ FD ]
Line_110 $$ group = GROUP_RETURN-->Line_176 $$ group = GROUP_SWITCH[ FD ]
Line_88 $$ i += 4-->Line_194 $$ i++[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_75 $$ i += 2[ FD ]
Line_9 $$ int group = GROUP_GENERAL-->Line_87 $$ group = GROUP_INVOCATION[ FD ]
Line_148 $$ i += 4-->Line_107 $$ i++[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_172 $$ i += 4[ FD ]
Line_148 $$ i += 4-->Line_215 $$ while (i >= 0) [ FD ]
Line_75 $$ i += 2-->Line_154 $$ i += 4[ FD ]
Line_151 $$ i += 4-->Line_6 $$ for (int i = 0; i < length; ) [ FD ]
Line_83 $$ if (classStruct.isVersionGE_1_7()) -->Line_87 $$ group = GROUP_INVOCATION[ CD ]
Line_22 $$ if (opcode >= opc_istore_0 && opcode <= opc_astore_3) -->Line_23 $$ operands.add(new Integer(opr_loadstore[opcode - opc_istore_0]))[ CD ]
Line_117 $$ i += 4-->Line_136 $$ i += 4[ FD ]
Line_166 $$ i += 4-->Line_12 $$ i++[ FD ]
Line_151 $$ i += 4-->Line_107 $$ i++[ FD ]
Line_121 $$ i += 2-->Line_6 $$ for (int i = 0; i < length; ) [ FD ]
Line_141 $$ i += 3-->Line_199 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_75 $$ i += 2-->Line_117 $$ i += 4[ FD ]
Line_129 $$ i += 4-->Line_174 $$ i += 4[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_154 $$ i += 4[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_104 $$ i += 2[ FD ]
Line_87 $$ group = GROUP_INVOCATION-->Line_159 $$ group = GROUP_SWITCH[ FD ]
Line_154 $$ i += 4-->Line_107 $$ i++[ FD ]
Line_24 $$ opcode = opcs_store[(opcode - opc_istore_0) / 4]-->Line_126 $$ opcode = opcode == opc_jsr_w ? opc_jsr : opc_goto[ FD ]
Line_8 $$ int opcode = in.readUnsignedByte()-->Line_13 $$ opcode = in.readUnsignedByte()[ FD ]
Line_104 $$ i += 2-->Line_157 $$ i += 4[ FD ]
Line_141 $$ i += 3-->Line_214 $$ seq.setPointer(i)[ FD ]
Line_59 $$ i += 2-->Line_75 $$ i += 2[ FD ]
Line_104 $$ i += 2-->Line_148 $$ i += 4[ FD ]
Line_24 $$ opcode = opcs_store[(opcode - opc_istore_0) / 4]-->Line_192 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_22 $$ if (opcode >= opc_istore_0 && opcode <= opc_astore_3) -->Line_24 $$ opcode = opcs_store[(opcode - opc_istore_0) / 4][ CD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_140 $$ operands.add(new Integer(in.readUnsignedByte()))[ FD ]
Line_154 $$ i += 4-->Line_34 $$ i++[ FD ]
Line_79 $$ group = GROUP_INVOCATION-->Line_192 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_117 $$ i += 4-->Line_6 $$ for (int i = 0; i < length; ) [ FD ]
Line_121 $$ i += 2-->Line_29 $$ i++[ FD ]
Line_117 $$ i += 4-->Line_151 $$ i += 4[ FD ]
Line_88 $$ i += 4-->Line_214 $$ seq.setPointer(i)[ FD ]
Line_56 $$ group = GROUP_JUMP-->Line_110 $$ group = GROUP_RETURN[ FD ]
Line_117 $$ i += 4-->Line_141 $$ i += 3[ FD ]
Line_176 $$ group = GROUP_SWITCH-->Line_185 $$ group = GROUP_RETURN[ FD ]
Line_199 $$ for (int i = 0; i < exception_count; i++) -->Line_206 $$ if (excclass != 0) [ CD ]
Line_121 $$ i += 2-->Line_194 $$ i++[ FD ]
Line_204 $$ int excclass = in.readUnsignedShort()-->Line_205 $$ handler.class_index = excclass[ FD ]
Line_79 $$ group = GROUP_INVOCATION-->Line_159 $$ group = GROUP_SWITCH[ FD ]
Line_56 $$ group = GROUP_JUMP-->Line_77 $$ group = GROUP_FIELDACCESS[ FD ]
Line_141 $$ i += 3-->Line_194 $$ i++[ FD ]
Line_114 $$ if (wide) -->Line_121 $$ i += 2[ CD ]
Line_75 $$ i += 2-->Line_199 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_59 $$ i += 2-->Line_104 $$ i += 2[ FD ]
Line_121 $$ i += 2-->Line_214 $$ seq.setPointer(i)[ FD ]
Line_169 $$ i += 4-->Line_215 $$ while (i >= 0) [ FD ]
Line_199 $$ for (int i = 0; i < exception_count; i++) -->Line_215 $$ while (i >= 0) [ FD ]
Line_148 $$ i += 4-->Line_29 $$ i++[ FD ]
Line_151 $$ i += 4-->Line_199 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_13 $$ opcode = in.readUnsignedByte()-->Line_18 $$ opcode = opc_bipush[ FD ]
Line_59 $$ i += 2-->Line_88 $$ i += 4[ FD ]
Line_21 $$ opcode = opcs_load[(opcode - opc_iload_0) / 4]-->Line_192 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_121 $$ i += 2-->Line_215 $$ while (i >= 0) [ FD ]
Line_88 $$ i += 4-->Line_107 $$ i++[ FD ]
Line_129 $$ i += 4-->Line_199 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_9 $$ int group = GROUP_GENERAL-->Line_135 $$ group = GROUP_INVOCATION[ FD ]
Line_117 $$ i += 4-->Line_169 $$ i += 4[ FD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_150 $$ operands.add(new Integer(low))[ FD ]
Line_136 $$ i += 4-->Line_194 $$ i++[ FD ]
Line_59 $$ i += 2-->Line_148 $$ i += 4[ FD ]
Line_135 $$ group = GROUP_INVOCATION-->Line_185 $$ group = GROUP_RETURN[ FD ]
Line_77 $$ group = GROUP_FIELDACCESS-->Line_110 $$ group = GROUP_RETURN[ FD ]
Line_154 $$ i += 4-->Line_169 $$ i += 4[ FD ]
Line_75 $$ i += 2-->Line_194 $$ i++[ FD ]
Line_9 $$ int group = GROUP_GENERAL-->Line_176 $$ group = GROUP_SWITCH[ FD ]
Line_88 $$ i += 4-->Line_129 $$ i += 4[ FD ]
Line_211 $$ InstructionSequence seq = new FullInstructionSequence(instructions, new ExceptionTable(lstHandlers))-->Line_220 $$ seq.addToPointer(-1)[ FD ]
Line_189 $$ for (int j = 0; j < operands.size(); j++) -->Line_190 $$ ops[j] = operands.get(j).intValue()[ FD ]
Line_141 $$ i += 3-->Line_148 $$ i += 4[ FD ]
Line_77 $$ group = GROUP_FIELDACCESS-->Line_135 $$ group = GROUP_INVOCATION[ FD ]
Line_79 $$ group = GROUP_INVOCATION-->Line_87 $$ group = GROUP_INVOCATION[ FD ]
Line_88 $$ i += 4-->Line_169 $$ i += 4[ FD ]
Line_88 $$ i += 4-->Line_117 $$ i += 4[ FD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_156 $$ operands.add(new Integer(in.readInt()))[ FD ]
Line_148 $$ i += 4-->Line_157 $$ i += 4[ FD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_115 $$ operands.add(new Integer(in.readUnsignedShort()))[ FD ]
Line_129 $$ i += 4-->Line_12 $$ i++[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_11 $$ if (wide) [ CD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_129 $$ i += 4[ FD ]
Line_135 $$ group = GROUP_INVOCATION-->Line_192 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_117 $$ i += 4-->Line_166 $$ i += 4[ FD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_189 $$ for (int j = 0; j < operands.size(); j++) [ FD ]
Line_154 $$ i += 4-->Line_6 $$ for (int i = 0; i < length; ) [ FD ]
Line_128 $$ group = GROUP_JUMP-->Line_159 $$ group = GROUP_SWITCH[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_194 $$ i++[ FD ]
Line_110 $$ group = GROUP_RETURN-->Line_135 $$ group = GROUP_INVOCATION[ FD ]
Line_114 $$ if (wide) -->Line_116 $$ operands.add(new Integer(in.readShort()))[ CD ]
Line_56 $$ group = GROUP_JUMP-->Line_185 $$ group = GROUP_RETURN[ FD ]
Line_141 $$ i += 3-->Line_215 $$ while (i >= 0) [ FD ]
Line_19 $$ if (opcode >= opc_iload_0 && opcode <= opc_aload_3) -->Line_20 $$ operands.add(new Integer(opr_loadstore[opcode - opc_iload_0]))[ CD ]
Line_87 $$ group = GROUP_INVOCATION-->Line_135 $$ group = GROUP_INVOCATION[ FD ]
Line_141 $$ i += 3-->Line_169 $$ i += 4[ FD ]
Line_59 $$ i += 2-->Line_151 $$ i += 4[ FD ]
Line_117 $$ i += 4-->Line_194 $$ i++[ FD ]
Line_79 $$ group = GROUP_INVOCATION-->Line_135 $$ group = GROUP_INVOCATION[ FD ]
Line_199 $$ for (int i = 0; i < exception_count; i++) -->Line_200 $$ ExceptionHandler handler = new ExceptionHandler()[ CD ]
Line_151 $$ i += 4-->Line_216 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_88 $$ i += 4-->Line_172 $$ i += 4[ FD ]
Line_157 $$ i += 4-->Line_172 $$ i += 4[ FD ]
Line_88 $$ i += 4-->Line_136 $$ i += 4[ FD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_168 $$ operands.add(new Integer(npairs))[ FD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_116 $$ operands.add(new Integer(in.readShort()))[ FD ]
Line_136 $$ i += 4-->Line_151 $$ i += 4[ FD ]
Line_211 $$ InstructionSequence seq = new FullInstructionSequence(instructions, new ExceptionTable(lstHandlers))-->Line_216 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_88 $$ i += 4-->Line_34 $$ i++[ FD ]
Line_104 $$ i += 2-->Line_34 $$ i++[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_7 $$ int offset = i[ CD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_12 $$ i++[ FD ]
Line_59 $$ i += 2-->Line_117 $$ i += 4[ FD ]
Line_59 $$ i += 2-->Line_34 $$ i++[ FD ]
Line_148 $$ i += 4-->Line_6 $$ for (int i = 0; i < length; ) [ FD ]
Line_154 $$ i += 4-->Line_12 $$ i++[ FD ]
Line_166 $$ i += 4-->Line_216 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_135 $$ group = GROUP_INVOCATION-->Line_159 $$ group = GROUP_SWITCH[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_117 $$ i += 4[ FD ]
Line_117 $$ i += 4-->Line_215 $$ while (i >= 0) [ FD ]
Line_75 $$ i += 2-->Line_121 $$ i += 2[ FD ]
Line_166 $$ i += 4-->Line_169 $$ i += 4[ FD ]
Line_199 $$ for (int i = 0; i < exception_count; i++) -->Line_209 $$ lstHandlers.add(handler)[ CD ]
Line_166 $$ i += 4-->Line_214 $$ seq.setPointer(i)[ FD ]
Line_129 $$ i += 4-->Line_216 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_10 $$ boolean wide = (opcode == opc_wide)[ CD ]
Line_172 $$ i += 4-->Line_194 $$ i++[ FD ]
Line_87 $$ group = GROUP_INVOCATION-->Line_192 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_154 $$ i += 4-->Line_214 $$ seq.setPointer(i)[ FD ]
Line_104 $$ i += 2-->Line_107 $$ i++[ FD ]
Line_121 $$ i += 2-->Line_129 $$ i += 4[ FD ]
Line_215 $$ while (i >= 0) -->Line_216 $$ Instruction instr = seq.getInstr(i--)[ CD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_166 $$ i += 4[ FD ]
Line_170 $$ for (int j = 0; j < npairs; j++) -->Line_190 $$ ops[j] = operands.get(j).intValue()[ FD ]
Line_136 $$ i += 4-->Line_172 $$ i += 4[ FD ]
Line_141 $$ i += 3-->Line_174 $$ i += 4[ FD ]
Line_76 $$ if (opcode >= opc_getstatic && opcode <= opc_putfield) -->Line_77 $$ group = GROUP_FIELDACCESS[ CD ]
Line_121 $$ i += 2-->Line_141 $$ i += 3[ FD ]
Line_129 $$ i += 4-->Line_29 $$ i++[ FD ]
Line_104 $$ i += 2-->Line_151 $$ i += 4[ FD ]
Line_217 $$ if (instr.group != GROUP_GENERAL) -->Line_218 $$ instr.initInstruction(seq)[ CD ]
Line_126 $$ opcode = opcode == opc_jsr_w ? opc_jsr : opc_goto-->Line_192 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_129 $$ i += 4-->Line_107 $$ i++[ FD ]
Line_141 $$ i += 3-->Line_107 $$ i++[ FD ]
Line_154 $$ i += 4-->Line_166 $$ i += 4[ FD ]
Line_117 $$ i += 4-->Line_174 $$ i += 4[ FD ]
Line_18 $$ opcode = opc_bipush-->Line_24 $$ opcode = opcs_store[(opcode - opc_istore_0) / 4][ FD ]
Line_59 $$ i += 2-->Line_166 $$ i += 4[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_107 $$ i++[ FD ]
Line_157 $$ i += 4-->Line_214 $$ seq.setPointer(i)[ FD ]
Line_141 $$ i += 3-->Line_172 $$ i += 4[ FD ]
Line_159 $$ group = GROUP_SWITCH-->Line_192 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_75 $$ i += 2-->Line_151 $$ i += 4[ FD ]
Line_121 $$ i += 2-->Line_172 $$ i += 4[ FD ]
Line_21 $$ opcode = opcs_load[(opcode - opc_iload_0) / 4]-->Line_126 $$ opcode = opcode == opc_jsr_w ? opc_jsr : opc_goto[ FD ]
Line_151 $$ i += 4-->Line_174 $$ i += 4[ FD ]
Line_216 $$ Instruction instr = seq.getInstr(i--)-->Line_218 $$ instr.initInstruction(seq)[ FD ]
Line_59 $$ i += 2-->Line_12 $$ i++[ FD ]
Line_59 $$ i += 2-->Line_214 $$ seq.setPointer(i)[ FD ]
Line_166 $$ i += 4-->Line_107 $$ i++[ FD ]
Line_59 $$ i += 2-->Line_174 $$ i += 4[ FD ]
Line_215 $$ while (i >= 0) -->Line_220 $$ seq.addToPointer(-1)[ CD ]
Line_56 $$ group = GROUP_JUMP-->Line_192 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_174 $$ i += 4-->Line_215 $$ while (i >= 0) [ FD ]
Line_104 $$ i += 2-->Line_121 $$ i += 2[ FD ]
Line_104 $$ i += 2-->Line_6 $$ for (int i = 0; i < length; ) [ FD ]
Line_59 $$ i += 2-->Line_194 $$ i++[ FD ]
Line_117 $$ i += 4-->Line_34 $$ i++[ FD ]
Line_21 $$ opcode = opcs_load[(opcode - opc_iload_0) / 4]-->Line_55 $$ if (opcode != opc_sipush) [ FD ]
Line_141 $$ i += 3-->Line_12 $$ i++[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_194 $$ i++[ CD ]
Line_172 $$ i += 4-->Line_174 $$ i += 4[ FD ]
Line_104 $$ i += 2-->Line_166 $$ i += 4[ FD ]
Line_59 $$ i += 2-->Line_216 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_104 $$ i += 2-->Line_117 $$ i += 4[ FD ]
Line_169 $$ i += 4-->Line_107 $$ i++[ FD ]
Line_148 $$ i += 4-->Line_169 $$ i += 4[ FD ]
Line_18 $$ opcode = opc_bipush-->Line_55 $$ if (opcode != opc_sipush) [ FD ]
Line_121 $$ i += 2-->Line_174 $$ i += 4[ FD ]
Line_75 $$ i += 2-->Line_148 $$ i += 4[ FD ]
Line_59 $$ i += 2-->Line_141 $$ i += 3[ FD ]
Line_169 $$ i += 4-->Line_194 $$ i++[ FD ]
Line_128 $$ group = GROUP_JUMP-->Line_185 $$ group = GROUP_RETURN[ FD ]
Line_121 $$ i += 2-->Line_199 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_11 $$ if (wide) -->Line_13 $$ opcode = in.readUnsignedByte()[ CD ]
Line_9 $$ int group = GROUP_GENERAL-->Line_159 $$ group = GROUP_SWITCH[ FD ]
Line_104 $$ i += 2-->Line_141 $$ i += 3[ FD ]
Line_121 $$ i += 2-->Line_157 $$ i += 4[ FD ]
Line_155 $$ for (int j = 0; j < high - low + 1; j++) -->Line_157 $$ i += 4[ CD ]
Line_104 $$ i += 2-->Line_29 $$ i++[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_9 $$ int group = GROUP_GENERAL[ CD ]
Line_129 $$ i += 4-->Line_6 $$ for (int i = 0; i < length; ) [ FD ]
Line_59 $$ i += 2-->Line_129 $$ i += 4[ FD ]
Line_174 $$ i += 4-->Line_199 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_169 $$ i += 4-->Line_6 $$ for (int i = 0; i < length; ) [ FD ]
Line_136 $$ i += 4-->Line_199 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_75 $$ i += 2-->Line_157 $$ i += 4[ FD ]
Line_141 $$ i += 3-->Line_166 $$ i += 4[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_215 $$ while (i >= 0) [ FD ]
Line_166 $$ i += 4-->Line_29 $$ i++[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_15 $$ List<Integer> operands = new ArrayList<Integer>()[ CD ]
Line_16 $$ if (opcode >= opc_iconst_m1 && opcode <= opc_iconst_5) -->Line_17 $$ operands.add(new Integer(opr_iconst[opcode - opc_iconst_m1]))[ CD ]
Line_16 $$ if (opcode >= opc_iconst_m1 && opcode <= opc_iconst_5) -->Line_19 $$ if (opcode >= opc_iload_0 && opcode <= opc_aload_3) [ CD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_74 $$ operands.add(new Integer(in.readUnsignedShort()))[ FD ]
Line_75 $$ i += 2-->Line_6 $$ for (int i = 0; i < length; ) [ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_29 $$ i++[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_34 $$ i++[ FD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_17 $$ operands.add(new Integer(opr_iconst[opcode - opc_iconst_m1]))[ FD ]
Line_154 $$ i += 4-->Line_215 $$ while (i >= 0) [ FD ]
Line_169 $$ i += 4-->Line_216 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_76 $$ if (opcode >= opc_getstatic && opcode <= opc_putfield) -->Line_78 $$ if (opcode >= opc_invokevirtual && opcode <= opc_invokestatic) [ CD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_121 $$ i += 2[ FD ]
Line_9 $$ int group = GROUP_GENERAL-->Line_56 $$ group = GROUP_JUMP[ FD ]
Line_102 $$ if (wide) -->Line_103 $$ operands.add(new Integer(in.readUnsignedShort()))[ CD ]
Line_117 $$ i += 4-->Line_216 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_129 $$ i += 4-->Line_157 $$ i += 4[ FD ]
Line_75 $$ i += 2-->Line_215 $$ while (i >= 0) [ FD ]
Line_13 $$ opcode = in.readUnsignedByte()-->Line_126 $$ opcode = opcode == opc_jsr_w ? opc_jsr : opc_goto[ FD ]
Line_13 $$ opcode = in.readUnsignedByte()-->Line_192 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_157 $$ i += 4-->Line_166 $$ i += 4[ FD ]
Line_129 $$ i += 4-->Line_215 $$ while (i >= 0) [ FD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_190 $$ ops[j] = operands.get(j).intValue()[ FD ]
Line_136 $$ i += 4-->Line_12 $$ i++[ FD ]
Line_166 $$ i += 4-->Line_199 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_8 $$ int opcode = in.readUnsignedByte()-->Line_192 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_151 $$ i += 4-->Line_34 $$ i++[ FD ]
Line_169 $$ i += 4-->Line_34 $$ i++[ FD ]
Line_59 $$ i += 2-->Line_172 $$ i += 4[ FD ]
Line_104 $$ i += 2-->Line_199 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_151 $$ i += 4-->Line_12 $$ i++[ FD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_33 $$ operands.add(new Integer(in.readUnsignedByte()))[ FD ]
Line_88 $$ i += 4-->Line_215 $$ while (i >= 0) [ FD ]
Line_129 $$ i += 4-->Line_141 $$ i += 3[ FD ]
Line_75 $$ i += 2-->Line_136 $$ i += 4[ FD ]
Line_24 $$ opcode = opcs_store[(opcode - opc_istore_0) / 4]-->Line_109 $$ if (opcode == opc_ret) [ FD ]
Line_151 $$ i += 4-->Line_194 $$ i++[ FD ]
Line_9 $$ int group = GROUP_GENERAL-->Line_79 $$ group = GROUP_INVOCATION[ FD ]
Line_18 $$ opcode = opc_bipush-->Line_21 $$ opcode = opcs_load[(opcode - opc_iload_0) / 4][ FD ]
Line_117 $$ i += 4-->Line_157 $$ i += 4[ FD ]
Line_114 $$ if (wide) -->Line_117 $$ i += 4[ CD ]
Line_199 $$ for (int i = 0; i < exception_count; i++) -->Line_204 $$ int excclass = in.readUnsignedShort()[ CD ]
Line_141 $$ i += 3-->Line_6 $$ for (int i = 0; i < length; ) [ FD ]
Line_59 $$ i += 2-->Line_199 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_136 $$ i += 4-->Line_6 $$ for (int i = 0; i < length; ) [ FD ]
Line_59 $$ i += 2-->Line_169 $$ i += 4[ FD ]
Line_206 $$ if (excclass != 0) -->Line_207 $$ handler.exceptionClass = pool.getPrimitiveConstant(excclass).getString()[ CD ]
Line_129 $$ i += 4-->Line_214 $$ seq.setPointer(i)[ FD ]
Line_104 $$ i += 2-->Line_169 $$ i += 4[ FD ]
Line_172 $$ i += 4-->Line_214 $$ seq.setPointer(i)[ FD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_58 $$ operands.add(new Integer(in.readShort()))[ FD ]
Line_172 $$ i += 4-->Line_215 $$ while (i >= 0) [ FD ]
Line_136 $$ i += 4-->Line_148 $$ i += 4[ FD ]
Line_117 $$ i += 4-->Line_12 $$ i++[ FD ]
Line_128 $$ group = GROUP_JUMP-->Line_192 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_75 $$ i += 2-->Line_141 $$ i += 3[ FD ]
Line_129 $$ i += 4-->Line_194 $$ i++[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_16 $$ if (opcode >= opc_iconst_m1 && opcode <= opc_iconst_5) [ CD ]
Line_18 $$ opcode = opc_bipush-->Line_192 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_79 $$ group = GROUP_INVOCATION-->Line_110 $$ group = GROUP_RETURN[ FD ]
Line_18 $$ opcode = opc_bipush-->Line_126 $$ opcode = opcode == opc_jsr_w ? opc_jsr : opc_goto[ FD ]
Line_110 $$ group = GROUP_RETURN-->Line_185 $$ group = GROUP_RETURN[ FD ]
Line_117 $$ i += 4-->Line_214 $$ seq.setPointer(i)[ FD ]
Line_148 $$ i += 4-->Line_166 $$ i += 4[ FD ]
Line_5 $$ int bytecode_version = classStruct.getBytecodeVersion()-->Line_192 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_216 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_151 $$ i += 4-->Line_215 $$ while (i >= 0) [ FD ]
Line_59 $$ i += 2-->Line_6 $$ for (int i = 0; i < length; ) [ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_141 $$ i += 3[ FD ]
Line_172 $$ i += 4-->Line_216 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_56 $$ group = GROUP_JUMP-->Line_87 $$ group = GROUP_INVOCATION[ FD ]
Line_79 $$ group = GROUP_INVOCATION-->Line_128 $$ group = GROUP_JUMP[ FD ]
Line_114 $$ if (wide) -->Line_115 $$ operands.add(new Integer(in.readUnsignedShort()))[ CD ]
Line_135 $$ group = GROUP_INVOCATION-->Line_176 $$ group = GROUP_SWITCH[ FD ]
Line_21 $$ opcode = opcs_load[(opcode - opc_iload_0) / 4]-->Line_24 $$ opcode = opcs_store[(opcode - opc_istore_0) / 4][ FD ]
Line_104 $$ i += 2-->Line_194 $$ i++[ FD ]
Line_136 $$ i += 4-->Line_34 $$ i++[ FD ]
Line_136 $$ i += 4-->Line_166 $$ i += 4[ FD ]
Line_104 $$ i += 2-->Line_174 $$ i += 4[ FD ]
Line_128 $$ group = GROUP_JUMP-->Line_135 $$ group = GROUP_INVOCATION[ FD ]
Line_136 $$ i += 4-->Line_141 $$ i += 3[ FD ]
Line_121 $$ i += 2-->Line_166 $$ i += 4[ FD ]
Line_169 $$ i += 4-->Line_172 $$ i += 4[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_157 $$ i += 4[ FD ]
Line_77 $$ group = GROUP_FIELDACCESS-->Line_159 $$ group = GROUP_SWITCH[ FD ]
Line_204 $$ int excclass = in.readUnsignedShort()-->Line_207 $$ handler.exceptionClass = pool.getPrimitiveConstant(excclass).getString()[ FD ]
Line_121 $$ i += 2-->Line_154 $$ i += 4[ FD ]
Line_170 $$ for (int j = 0; j < npairs; j++) -->Line_172 $$ i += 4[ CD ]
Line_141 $$ i += 3-->Line_154 $$ i += 4[ FD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_127 $$ operands.add(new Integer(in.readInt()))[ FD ]
Line_56 $$ group = GROUP_JUMP-->Line_159 $$ group = GROUP_SWITCH[ FD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_153 $$ operands.add(new Integer(high))[ FD ]
Line_169 $$ i += 4-->Line_174 $$ i += 4[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_199 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_136 $$ i += 4-->Line_215 $$ while (i >= 0) [ FD ]
Line_75 $$ i += 2-->Line_88 $$ i += 4[ FD ]
Line_77 $$ group = GROUP_FIELDACCESS-->Line_79 $$ group = GROUP_INVOCATION[ FD ]
Line_157 $$ i += 4-->Line_169 $$ i += 4[ FD ]
Line_200 $$ ExceptionHandler handler = new ExceptionHandler()-->Line_209 $$ lstHandlers.add(handler)[ FD ]
Line_87 $$ group = GROUP_INVOCATION-->Line_176 $$ group = GROUP_SWITCH[ FD ]
Line_169 $$ i += 4-->Line_12 $$ i++[ FD ]
Line_154 $$ i += 4-->Line_216 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_139 $$ operands.add(new Integer(in.readUnsignedShort()))[ FD ]
Line_88 $$ i += 4-->Line_121 $$ i += 2[ FD ]
Line_117 $$ i += 4-->Line_107 $$ i++[ FD ]
Line_198 $$ int exception_count = in.readUnsignedShort()-->Line_199 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_154 $$ i += 4-->Line_199 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_169 $$ i += 4-->Line_29 $$ i++[ FD ]
Line_141 $$ i += 3-->Line_157 $$ i += 4[ FD ]
Line_56 $$ group = GROUP_JUMP-->Line_79 $$ group = GROUP_INVOCATION[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_59 $$ i += 2[ FD ]
Line_88 $$ i += 4-->Line_6 $$ for (int i = 0; i < length; ) [ FD ]
Line_8 $$ int opcode = in.readUnsignedByte()-->Line_18 $$ opcode = opc_bipush[ FD ]
Line_129 $$ i += 4-->Line_136 $$ i += 4[ FD ]
Line_136 $$ i += 4-->Line_154 $$ i += 4[ FD ]
Line_79 $$ group = GROUP_INVOCATION-->Line_185 $$ group = GROUP_RETURN[ FD ]
Line_9 $$ int group = GROUP_GENERAL-->Line_192 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_151 $$ i += 4-->Line_154 $$ i += 4[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_174 $$ i += 4[ FD ]
Line_56 $$ group = GROUP_JUMP-->Line_128 $$ group = GROUP_JUMP[ FD ]
Line_148 $$ i += 4-->Line_172 $$ i += 4[ FD ]
Line_121 $$ i += 2-->Line_34 $$ i++[ FD ]
Line_75 $$ i += 2-->Line_214 $$ seq.setPointer(i)[ FD ]
Line_87 $$ group = GROUP_INVOCATION-->Line_185 $$ group = GROUP_RETURN[ FD ]
Line_88 $$ i += 4-->Line_157 $$ i += 4[ FD ]
Line_88 $$ i += 4-->Line_216 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_141 $$ i += 3-->Line_216 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_154 $$ i += 4-->Line_172 $$ i += 4[ FD ]
Line_102 $$ if (wide) -->Line_106 $$ operands.add(new Integer(in.readUnsignedByte()))[ CD ]
Line_8 $$ int opcode = in.readUnsignedByte()-->Line_24 $$ opcode = opcs_store[(opcode - opc_istore_0) / 4][ FD ]
Line_159 $$ group = GROUP_SWITCH-->Line_176 $$ group = GROUP_SWITCH[ FD ]
Line_166 $$ i += 4-->Line_174 $$ i += 4[ FD ]
Line_8 $$ int opcode = in.readUnsignedByte()-->Line_109 $$ if (opcode == opc_ret) [ FD ]
Line_199 $$ for (int i = 0; i < exception_count; i++) -->Line_202 $$ handler.to = in.readUnsignedShort()[ CD ]
Line_78 $$ if (opcode >= opc_invokevirtual && opcode <= opc_invokestatic) -->Line_79 $$ group = GROUP_INVOCATION[ CD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_106 $$ operands.add(new Integer(in.readUnsignedByte()))[ FD ]
Line_9 $$ int group = GROUP_GENERAL-->Line_77 $$ group = GROUP_FIELDACCESS[ FD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_103 $$ operands.add(new Integer(in.readUnsignedShort()))[ FD ]
Line_141 $$ i += 3-->Line_34 $$ i++[ FD ]
Line_88 $$ i += 4-->Line_174 $$ i += 4[ FD ]
Line_199 $$ for (int i = 0; i < exception_count; i++) -->Line_203 $$ handler.handler = in.readUnsignedShort()[ CD ]
Line_4 $$ VBStyleCollection<Instruction, Integer> instructions = new VBStyleCollection<Instruction, Integer>()-->Line_193 $$ instructions.addWithKey(instr, new Integer(offset))[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_214 $$ seq.setPointer(i)[ FD ]
Line_129 $$ i += 4-->Line_34 $$ i++[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_88 $$ i += 4[ FD ]
Line_88 $$ i += 4-->Line_154 $$ i += 4[ FD ]
Line_75 $$ i += 2-->Line_169 $$ i += 4[ FD ]
Line_151 $$ i += 4-->Line_169 $$ i += 4[ FD ]
Line_121 $$ i += 2-->Line_216 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_23 $$ operands.add(new Integer(opr_loadstore[opcode - opc_istore_0]))[ FD ]
Line_211 $$ InstructionSequence seq = new FullInstructionSequence(instructions, new ExceptionTable(lstHandlers))-->Line_214 $$ seq.setPointer(i)[ FD ]
Line_13 $$ opcode = in.readUnsignedByte()-->Line_55 $$ if (opcode != opc_sipush) [ FD ]
Line_151 $$ i += 4-->Line_214 $$ seq.setPointer(i)[ FD ]
Line_155 $$ for (int j = 0; j < high - low + 1; j++) -->Line_156 $$ operands.add(new Integer(in.readInt()))[ CD ]
Line_117 $$ i += 4-->Line_172 $$ i += 4[ FD ]
Line_75 $$ i += 2-->Line_29 $$ i++[ FD ]
Line_172 $$ i += 4-->Line_199 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_59 $$ i += 2-->Line_136 $$ i += 4[ FD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_165 $$ operands.add(new Integer(in.readInt()))[ FD ]
Line_6 $$ for (int i = 0; i < length; ) -->Line_136 $$ i += 4[ FD ]
Line_75 $$ i += 2-->Line_129 $$ i += 4[ FD ]
Line_83 $$ if (classStruct.isVersionGE_1_7()) -->Line_86 $$ in.discard(2)[ CD ]
Line_8 $$ int opcode = in.readUnsignedByte()-->Line_21 $$ opcode = opcs_load[(opcode - opc_iload_0) / 4][ FD ]
Line_102 $$ if (wide) -->Line_104 $$ i += 2[ CD ]
Line_148 $$ i += 4-->Line_194 $$ i++[ FD ]
Line_170 $$ for (int j = 0; j < npairs; j++) -->Line_173 $$ operands.add(new Integer(in.readInt()))[ CD ]
Line_88 $$ i += 4-->Line_151 $$ i += 4[ FD ]
Line_174 $$ i += 4-->Line_194 $$ i++[ FD ]
Line_21 $$ opcode = opcs_load[(opcode - opc_iload_0) / 4]-->Line_109 $$ if (opcode == opc_ret) [ FD ]
Line_126 $$ opcode = opcode == opc_jsr_w ? opc_jsr : opc_goto-->Line_109 $$ if (opcode == opc_ret) [ FD ]
Line_88 $$ i += 4-->Line_104 $$ i += 2[ FD ]
Line_110 $$ group = GROUP_RETURN-->Line_192 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_136 $$ i += 4-->Line_214 $$ seq.setPointer(i)[ FD ]
Line_128 $$ group = GROUP_JUMP-->Line_176 $$ group = GROUP_SWITCH[ FD ]
Line_19 $$ if (opcode >= opc_iload_0 && opcode <= opc_aload_3) -->Line_21 $$ opcode = opcs_load[(opcode - opc_iload_0) / 4][ CD ]
Line_15 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_133 $$ operands.add(new Integer(in.readUnsignedByte()))[ FD ]
