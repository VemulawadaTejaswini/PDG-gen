Line_160 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_170 $$ i += 4[ FD ]
Line_115 $$ i += 4-->Line_28 $$ i++[ FD ]
Line_194 $$ for (int i = 0; i < exception_count; i++) -->Line_208 $$ seq.setPointer(i)[ FD ]
Line_20 $$ opcode = opcs_load[(opcode - opc_iload_0) / 4]-->Line_124 $$ opcode = opcode == opc_jsr_w ? opc_jsr : opc_goto[ FD ]
Line_154 $$ i += 4-->Line_162 $$ i += 4[ FD ]
Line_85 $$ group = GROUP_INVOCATION-->Line_181 $$ group = GROUP_RETURN[ FD ]
Line_126 $$ group = GROUP_JUMP-->Line_188 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_152 $$ for (int j = 0; j < high - low + 1; j++) -->Line_185 $$ for (int j = 0; j < operands.size(); j++) [ FD ]
Line_119 $$ i += 2-->Line_194 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_143 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_160 $$ i += ((4 - (i + 1) % 4) % 4)[ FD ]
Line_168 $$ i += 4-->Line_190 $$ i++[ FD ]
Line_185 $$ for (int j = 0; j < operands.size(); j++) -->Line_186 $$ ops[j] = operands.get(j).intValue()[ FD ]
Line_77 $$ if (opcode >= opc_invokevirtual && opcode <= opc_invokestatic) -->Line_78 $$ group = GROUP_INVOCATION[ CD ]
Line_172 $$ group = GROUP_SWITCH-->Line_188 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_74 $$ i += 2-->Line_139 $$ i += 3[ FD ]
Line_15 $$ if (opcode >= opc_iconst_m1 && opcode <= opc_iconst_5) -->Line_17 $$ opcode = opc_bipush[ CD ]
Line_78 $$ group = GROUP_INVOCATION-->Line_156 $$ group = GROUP_SWITCH[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_216 $$ return seq[ CD ]
Line_148 $$ i += 4-->Line_210 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_119 $$ i += 2-->Line_145 $$ i += 4[ FD ]
Line_115 $$ i += 4-->Line_145 $$ i += 4[ FD ]
Line_143 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_208 $$ seq.setPointer(i)[ FD ]
Line_127 $$ i += 4-->Line_33 $$ i++[ FD ]
Line_134 $$ i += 4-->Line_33 $$ i++[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_11 $$ i++[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_7 $$ int opcode = in.readUnsignedByte()[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_114 $$ operands.add(new Integer(in.readShort()))[ FD ]
Line_100 $$ if (wide) -->Line_105 $$ i++[ CD ]
Line_134 $$ i += 4-->Line_143 $$ i += ((4 - (i + 1) % 4) % 4)[ FD ]
Line_209 $$ while (i >= 0) -->Line_211 $$ if (instr.group != GROUP_GENERAL) [ CD ]
Line_7 $$ int opcode = in.readUnsignedByte()-->Line_188 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_148 $$ i += 4-->Line_151 $$ i += 4[ FD ]
Line_74 $$ i += 2-->Line_86 $$ i += 4[ FD ]
Line_74 $$ i += 2-->Line_102 $$ i += 2[ FD ]
Line_127 $$ i += 4-->Line_145 $$ i += 4[ FD ]
Line_160 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_165 $$ i += 4[ FD ]
Line_58 $$ i += 2-->Line_86 $$ i += 4[ FD ]
Line_76 $$ group = GROUP_FIELDACCESS-->Line_133 $$ group = GROUP_INVOCATION[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_131 $$ operands.add(new Integer(in.readUnsignedByte()))[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_162 $$ i += 4[ FD ]
Line_4 $$ int bytecode_version = classStruct.getBytecodeVersion()-->Line_188 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_127 $$ i += 4-->Line_168 $$ i += 4[ FD ]
Line_134 $$ i += 4-->Line_139 $$ i += 3[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_163 $$ int npairs = in.readInt()[ FD ]
Line_134 $$ i += 4-->Line_148 $$ i += 4[ FD ]
Line_148 $$ i += 4-->Line_194 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_78 $$ group = GROUP_INVOCATION-->Line_126 $$ group = GROUP_JUMP[ FD ]
Line_86 $$ i += 4-->Line_209 $$ while (i >= 0) [ FD ]
Line_162 $$ i += 4-->Line_105 $$ i++[ FD ]
Line_160 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_190 $$ i++[ FD ]
Line_86 $$ i += 4-->Line_151 $$ i += 4[ FD ]
Line_8 $$ int group = GROUP_GENERAL-->Line_126 $$ group = GROUP_JUMP[ FD ]
Line_145 $$ i += 4-->Line_151 $$ i += 4[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_199 $$ int excclass = in.readUnsignedShort()[ FD ]
Line_134 $$ i += 4-->Line_160 $$ i += ((4 - (i + 1) % 4) % 4)[ FD ]
Line_166 $$ for (int j = 0; j < npairs; j++) -->Line_167 $$ operands.add(new Integer(in.readInt()))[ CD ]
Line_18 $$ if (opcode >= opc_iload_0 && opcode <= opc_aload_3) -->Line_20 $$ opcode = opcs_load[(opcode - opc_iload_0) / 4][ CD ]
Line_100 $$ if (wide) -->Line_101 $$ operands.add(new Integer(in.readUnsignedShort()))[ CD ]
Line_185 $$ for (int j = 0; j < operands.size(); j++) -->Line_186 $$ ops[j] = operands.get(j).intValue()[ CD ]
Line_115 $$ i += 4-->Line_168 $$ i += 4[ FD ]
Line_162 $$ i += 4-->Line_5 $$ for (int i = 0; i < length; ) [ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_119 $$ i += 2[ FD ]
Line_127 $$ i += 4-->Line_162 $$ i += 4[ FD ]
Line_206 $$ InstructionSequence seq = new FullInstructionSequence(instructions, new ExceptionTable(lstHandlers))-->Line_210 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_115 $$ i += 4-->Line_210 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_162 $$ i += 4-->Line_28 $$ i++[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_138 $$ operands.add(new Integer(in.readUnsignedByte()))[ FD ]
Line_127 $$ i += 4-->Line_139 $$ i += 3[ FD ]
Line_199 $$ int excclass = in.readUnsignedShort()-->Line_202 $$ handler.exceptionClass = pool.getPrimitiveConstant(excclass).getString()[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_194 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_127 $$ i += 4-->Line_190 $$ i++[ FD ]
Line_160 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_162 $$ i += 4[ FD ]
Line_74 $$ i += 2-->Line_190 $$ i++[ FD ]
Line_145 $$ i += 4-->Line_160 $$ i += ((4 - (i + 1) % 4) % 4)[ FD ]
Line_145 $$ i += 4-->Line_148 $$ i += 4[ FD ]
Line_160 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_105 $$ i++[ FD ]
Line_76 $$ group = GROUP_FIELDACCESS-->Line_85 $$ group = GROUP_INVOCATION[ FD ]
Line_162 $$ i += 4-->Line_33 $$ i++[ FD ]
Line_55 $$ group = GROUP_JUMP-->Line_78 $$ group = GROUP_INVOCATION[ FD ]
Line_82 $$ if (classStruct.isVersionGE_1_7()) -->Line_86 $$ i += 4[ CD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_161 $$ operands.add(new Integer(in.readInt()))[ FD ]
Line_139 $$ i += 3-->Line_210 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_148 $$ i += 4-->Line_162 $$ i += 4[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_148 $$ i += 4[ FD ]
Line_127 $$ i += 4-->Line_28 $$ i++[ FD ]
Line_165 $$ i += 4-->Line_170 $$ i += 4[ FD ]
Line_20 $$ opcode = opcs_load[(opcode - opc_iload_0) / 4]-->Line_23 $$ opcode = opcs_store[(opcode - opc_istore_0) / 4][ FD ]
Line_148 $$ i += 4-->Line_208 $$ seq.setPointer(i)[ FD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_147 $$ operands.add(new Integer(low))[ FD ]
Line_154 $$ i += 4-->Line_190 $$ i++[ FD ]
Line_74 $$ i += 2-->Line_165 $$ i += 4[ FD ]
Line_7 $$ int opcode = in.readUnsignedByte()-->Line_107 $$ if (opcode == opc_ret) [ FD ]
Line_78 $$ group = GROUP_INVOCATION-->Line_108 $$ group = GROUP_RETURN[ FD ]
Line_86 $$ i += 4-->Line_208 $$ seq.setPointer(i)[ FD ]
Line_154 $$ i += 4-->Line_170 $$ i += 4[ FD ]
Line_8 $$ int group = GROUP_GENERAL-->Line_172 $$ group = GROUP_SWITCH[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_113 $$ operands.add(new Integer(in.readUnsignedShort()))[ FD ]
Line_194 $$ for (int i = 0; i < exception_count; i++) -->Line_196 $$ handler.from = in.readUnsignedShort()[ CD ]
Line_194 $$ for (int i = 0; i < exception_count; i++) -->Line_204 $$ lstHandlers.add(handler)[ CD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_7 $$ int opcode = in.readUnsignedByte()[ CD ]
Line_166 $$ for (int j = 0; j < npairs; j++) -->Line_170 $$ i += 4[ CD ]
Line_143 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_190 $$ i++[ FD ]
Line_134 $$ i += 4-->Line_165 $$ i += 4[ FD ]
Line_3 $$ VBStyleCollection<Instruction, Integer> instructions = new VBStyleCollection<Instruction, Integer>()-->Line_189 $$ instructions.addWithKey(instr, new Integer(offset))[ FD ]
Line_119 $$ i += 2-->Line_5 $$ for (int i = 0; i < length; ) [ FD ]
Line_86 $$ i += 4-->Line_194 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_195 $$ ExceptionHandler handler = new ExceptionHandler()-->Line_204 $$ lstHandlers.add(handler)[ FD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_16 $$ operands.add(new Integer(opr_iconst[opcode - opc_iconst_m1]))[ FD ]
Line_86 $$ i += 4-->Line_105 $$ i++[ FD ]
Line_102 $$ i += 2-->Line_151 $$ i += 4[ FD ]
Line_78 $$ group = GROUP_INVOCATION-->Line_133 $$ group = GROUP_INVOCATION[ FD ]
Line_58 $$ i += 2-->Line_151 $$ i += 4[ FD ]
Line_102 $$ i += 2-->Line_170 $$ i += 4[ FD ]
Line_119 $$ i += 2-->Line_11 $$ i++[ FD ]
Line_170 $$ i += 4-->Line_194 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_10 $$ if (wide) -->Line_11 $$ i++[ CD ]
Line_148 $$ i += 4-->Line_190 $$ i++[ FD ]
Line_194 $$ for (int i = 0; i < exception_count; i++) -->Line_201 $$ if (excclass != 0) [ CD ]
Line_17 $$ opcode = opc_bipush-->Line_54 $$ if (opcode != opc_sipush) [ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_58 $$ i += 2[ FD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_184 $$ int[] ops = new int[operands.size()][ FD ]
Line_194 $$ for (int i = 0; i < exception_count; i++) -->Line_200 $$ handler.class_index = excclass[ CD ]
Line_55 $$ group = GROUP_JUMP-->Line_108 $$ group = GROUP_RETURN[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_101 $$ operands.add(new Integer(in.readUnsignedShort()))[ FD ]
Line_143 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_154 $$ i += 4[ FD ]
Line_108 $$ group = GROUP_RETURN-->Line_133 $$ group = GROUP_INVOCATION[ FD ]
Line_102 $$ i += 2-->Line_190 $$ i++[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_28 $$ i++[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_209 $$ while (i >= 0) [ FD ]
Line_58 $$ i += 2-->Line_127 $$ i += 4[ FD ]
Line_58 $$ i += 2-->Line_148 $$ i += 4[ FD ]
Line_115 $$ i += 4-->Line_5 $$ for (int i = 0; i < length; ) [ FD ]
Line_15 $$ if (opcode >= opc_iconst_m1 && opcode <= opc_iconst_5) -->Line_16 $$ operands.add(new Integer(opr_iconst[opcode - opc_iconst_m1]))[ CD ]
Line_127 $$ i += 4-->Line_160 $$ i += ((4 - (i + 1) % 4) % 4)[ FD ]
Line_154 $$ i += 4-->Line_208 $$ seq.setPointer(i)[ FD ]
Line_119 $$ i += 2-->Line_28 $$ i++[ FD ]
Line_23 $$ opcode = opcs_store[(opcode - opc_istore_0) / 4]-->Line_107 $$ if (opcode == opc_ret) [ FD ]
Line_119 $$ i += 2-->Line_148 $$ i += 4[ FD ]
Line_8 $$ int group = GROUP_GENERAL-->Line_133 $$ group = GROUP_INVOCATION[ FD ]
Line_139 $$ i += 3-->Line_143 $$ i += ((4 - (i + 1) % 4) % 4)[ FD ]
Line_12 $$ opcode = in.readUnsignedByte()-->Line_17 $$ opcode = opc_bipush[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_188 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ CD ]
Line_127 $$ i += 4-->Line_5 $$ for (int i = 0; i < length; ) [ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_169 $$ operands.add(new Integer(in.readInt()))[ FD ]
Line_165 $$ i += 4-->Line_208 $$ seq.setPointer(i)[ FD ]
Line_55 $$ group = GROUP_JUMP-->Line_76 $$ group = GROUP_FIELDACCESS[ FD ]
Line_151 $$ i += 4-->Line_5 $$ for (int i = 0; i < length; ) [ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_134 $$ i += 4[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_15 $$ if (opcode >= opc_iconst_m1 && opcode <= opc_iconst_5) [ CD ]
Line_139 $$ i += 3-->Line_165 $$ i += 4[ FD ]
Line_139 $$ i += 3-->Line_148 $$ i += 4[ FD ]
Line_139 $$ i += 3-->Line_28 $$ i++[ FD ]
Line_76 $$ group = GROUP_FIELDACCESS-->Line_181 $$ group = GROUP_RETURN[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_193 $$ int exception_count = in.readUnsignedShort()[ CD ]
Line_143 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_209 $$ while (i >= 0) [ FD ]
Line_127 $$ i += 4-->Line_209 $$ while (i >= 0) [ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_208 $$ seq.setPointer(i)[ FD ]
Line_168 $$ i += 4-->Line_208 $$ seq.setPointer(i)[ FD ]
Line_134 $$ i += 4-->Line_210 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_210 $$ Instruction instr = seq.getInstr(i--)-->Line_212 $$ instr.initInstruction(seq)[ FD ]
Line_108 $$ group = GROUP_RETURN-->Line_188 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_74 $$ i += 2-->Line_168 $$ i += 4[ FD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_19 $$ operands.add(new Integer(opr_loadstore[opcode - opc_iload_0]))[ FD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_83 $$ operands.add(new Integer(in.readUnsignedShort()))[ FD ]
Line_126 $$ group = GROUP_JUMP-->Line_156 $$ group = GROUP_SWITCH[ FD ]
Line_133 $$ group = GROUP_INVOCATION-->Line_188 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_58 $$ i += 2-->Line_11 $$ i++[ FD ]
Line_139 $$ i += 3-->Line_145 $$ i += 4[ FD ]
Line_152 $$ for (int j = 0; j < high - low + 1; j++) -->Line_154 $$ i += 4[ CD ]
Line_74 $$ i += 2-->Line_145 $$ i += 4[ FD ]
Line_119 $$ i += 2-->Line_160 $$ i += ((4 - (i + 1) % 4) % 4)[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_202 $$ handler.exceptionClass = pool.getPrimitiveConstant(excclass).getString()[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_168 $$ i += 4[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_190 $$ i++[ CD ]
Line_160 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_33 $$ i++[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_115 $$ i += 4[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_104 $$ operands.add(new Integer(in.readUnsignedByte()))[ FD ]
Line_170 $$ i += 4-->Line_208 $$ seq.setPointer(i)[ FD ]
Line_194 $$ for (int i = 0; i < exception_count; i++) -->Line_195 $$ ExceptionHandler handler = new ExceptionHandler()[ CD ]
Line_194 $$ for (int i = 0; i < exception_count; i++) -->Line_198 $$ handler.handler = in.readUnsignedShort()[ CD ]
Line_134 $$ i += 4-->Line_208 $$ seq.setPointer(i)[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_146 $$ int low = in.readInt()[ FD ]
Line_160 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_5 $$ for (int i = 0; i < length; ) [ FD ]
Line_168 $$ i += 4-->Line_209 $$ while (i >= 0) [ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_193 $$ int exception_count = in.readUnsignedShort()[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_3 $$ VBStyleCollection<Instruction, Integer> instructions = new VBStyleCollection<Instruction, Integer>()[ CD ]
Line_8 $$ int group = GROUP_GENERAL-->Line_55 $$ group = GROUP_JUMP[ FD ]
Line_160 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_209 $$ while (i >= 0) [ FD ]
Line_85 $$ group = GROUP_INVOCATION-->Line_133 $$ group = GROUP_INVOCATION[ FD ]
Line_139 $$ i += 3-->Line_194 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_76 $$ group = GROUP_FIELDACCESS-->Line_78 $$ group = GROUP_INVOCATION[ FD ]
Line_145 $$ i += 4-->Line_162 $$ i += 4[ FD ]
Line_115 $$ i += 4-->Line_209 $$ while (i >= 0) [ FD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_101 $$ operands.add(new Integer(in.readUnsignedShort()))[ FD ]
Line_115 $$ i += 4-->Line_119 $$ i += 2[ FD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_131 $$ operands.add(new Integer(in.readUnsignedByte()))[ FD ]
Line_170 $$ i += 4-->Line_210 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_139 $$ i += 3-->Line_162 $$ i += 4[ FD ]
Line_145 $$ i += 4-->Line_208 $$ seq.setPointer(i)[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_74 $$ i += 2[ FD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_118 $$ operands.add(new Integer(in.readByte()))[ FD ]
Line_82 $$ if (classStruct.isVersionGE_1_7()) -->Line_83 $$ operands.add(new Integer(in.readUnsignedShort()))[ CD ]
Line_108 $$ group = GROUP_RETURN-->Line_126 $$ group = GROUP_JUMP[ FD ]
Line_154 $$ i += 4-->Line_194 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_58 $$ i += 2-->Line_115 $$ i += 4[ FD ]
Line_151 $$ i += 4-->Line_209 $$ while (i >= 0) [ FD ]
Line_86 $$ i += 4-->Line_143 $$ i += ((4 - (i + 1) % 4) % 4)[ FD ]
Line_12 $$ opcode = in.readUnsignedByte()-->Line_20 $$ opcode = opcs_load[(opcode - opc_iload_0) / 4][ FD ]
Line_86 $$ i += 4-->Line_154 $$ i += 4[ FD ]
Line_194 $$ for (int i = 0; i < exception_count; i++) -->Line_199 $$ int excclass = in.readUnsignedShort()[ CD ]
Line_86 $$ i += 4-->Line_33 $$ i++[ FD ]
Line_102 $$ i += 2-->Line_168 $$ i += 4[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_127 $$ i += 4[ FD ]
Line_166 $$ for (int j = 0; j < npairs; j++) -->Line_186 $$ ops[j] = operands.get(j).intValue()[ FD ]
Line_145 $$ i += 4-->Line_190 $$ i++[ FD ]
Line_134 $$ i += 4-->Line_170 $$ i += 4[ FD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_32 $$ operands.add(new Integer(in.readUnsignedByte()))[ FD ]
Line_139 $$ i += 3-->Line_11 $$ i++[ FD ]
Line_162 $$ i += 4-->Line_11 $$ i++[ FD ]
Line_21 $$ if (opcode >= opc_istore_0 && opcode <= opc_astore_3) -->Line_23 $$ opcode = opcs_store[(opcode - opc_istore_0) / 4][ CD ]
Line_151 $$ i += 4-->Line_208 $$ seq.setPointer(i)[ FD ]
Line_207 $$ int i = seq.length() - 1-->Line_209 $$ while (i >= 0) [ FD ]
Line_85 $$ group = GROUP_INVOCATION-->Line_156 $$ group = GROUP_SWITCH[ FD ]
Line_17 $$ opcode = opc_bipush-->Line_20 $$ opcode = opcs_load[(opcode - opc_iload_0) / 4][ FD ]
Line_170 $$ i += 4-->Line_209 $$ while (i >= 0) [ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_6 $$ int offset = i[ CD ]
Line_7 $$ int opcode = in.readUnsignedByte()-->Line_23 $$ opcode = opcs_store[(opcode - opc_istore_0) / 4][ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_194 $$ for (int i = 0; i < exception_count; i++) [ CD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_114 $$ operands.add(new Integer(in.readShort()))[ FD ]
Line_133 $$ group = GROUP_INVOCATION-->Line_172 $$ group = GROUP_SWITCH[ FD ]
Line_199 $$ int excclass = in.readUnsignedShort()-->Line_201 $$ if (excclass != 0) [ FD ]
Line_58 $$ i += 2-->Line_160 $$ i += ((4 - (i + 1) % 4) % 4)[ FD ]
Line_58 $$ i += 2-->Line_154 $$ i += 4[ FD ]
Line_207 $$ int i = seq.length() - 1-->Line_210 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_20 $$ opcode = opcs_load[(opcode - opc_iload_0) / 4]-->Line_107 $$ if (opcode == opc_ret) [ FD ]
Line_119 $$ i += 2-->Line_154 $$ i += 4[ FD ]
Line_151 $$ i += 4-->Line_168 $$ i += 4[ FD ]
Line_151 $$ i += 4-->Line_105 $$ i++[ FD ]
Line_58 $$ i += 2-->Line_119 $$ i += 2[ FD ]
Line_74 $$ i += 2-->Line_105 $$ i++[ FD ]
Line_160 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_28 $$ i++[ FD ]
Line_143 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_162 $$ i += 4[ FD ]
Line_102 $$ i += 2-->Line_210 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_143 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_5 $$ for (int i = 0; i < length; ) [ FD ]
Line_17 $$ opcode = opc_bipush-->Line_107 $$ if (opcode == opc_ret) [ FD ]
Line_145 $$ i += 4-->Line_165 $$ i += 4[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_189 $$ instructions.addWithKey(instr, new Integer(offset))[ CD ]
Line_102 $$ i += 2-->Line_145 $$ i += 4[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_170 $$ i += 4[ FD ]
Line_55 $$ group = GROUP_JUMP-->Line_181 $$ group = GROUP_RETURN[ FD ]
Line_86 $$ i += 4-->Line_210 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_58 $$ i += 2-->Line_139 $$ i += 3[ FD ]
Line_23 $$ opcode = opcs_store[(opcode - opc_istore_0) / 4]-->Line_54 $$ if (opcode != opc_sipush) [ FD ]
Line_165 $$ i += 4-->Line_194 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_58 $$ i += 2-->Line_134 $$ i += 4[ FD ]
Line_8 $$ int group = GROUP_GENERAL-->Line_188 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_145 $$ i += 4-->Line_170 $$ i += 4[ FD ]
Line_102 $$ i += 2-->Line_5 $$ for (int i = 0; i < length; ) [ FD ]
Line_102 $$ i += 2-->Line_105 $$ i++[ FD ]
Line_165 $$ i += 4-->Line_168 $$ i += 4[ FD ]
Line_145 $$ i += 4-->Line_210 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_102 $$ i += 2-->Line_162 $$ i += 4[ FD ]
Line_78 $$ group = GROUP_INVOCATION-->Line_181 $$ group = GROUP_RETURN[ FD ]
Line_86 $$ i += 4-->Line_115 $$ i += 4[ FD ]
Line_9 $$ boolean wide = (opcode == opc_wide)-->Line_188 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_58 $$ i += 2-->Line_162 $$ i += 4[ FD ]
Line_75 $$ if (opcode >= opc_getstatic && opcode <= opc_putfield) -->Line_77 $$ if (opcode >= opc_invokevirtual && opcode <= opc_invokestatic) [ CD ]
Line_143 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_151 $$ i += 4[ FD ]
Line_165 $$ i += 4-->Line_210 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_190 $$ i++[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_86 $$ i += 4[ FD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_137 $$ operands.add(new Integer(in.readUnsignedShort()))[ FD ]
Line_82 $$ if (classStruct.isVersionGE_1_7()) -->Line_85 $$ group = GROUP_INVOCATION[ CD ]
Line_143 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_145 $$ i += 4[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_207 $$ int i = seq.length() - 1[ CD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_132 $$ in.discard(1)[ FD ]
Line_162 $$ i += 4-->Line_165 $$ i += 4[ FD ]
Line_211 $$ if (instr.group != GROUP_GENERAL) -->Line_212 $$ instr.initInstruction(seq)[ CD ]
Line_134 $$ i += 4-->Line_11 $$ i++[ FD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_57 $$ operands.add(new Integer(in.readShort()))[ FD ]
Line_154 $$ i += 4-->Line_168 $$ i += 4[ FD ]
Line_102 $$ i += 2-->Line_119 $$ i += 2[ FD ]
Line_134 $$ i += 4-->Line_194 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_160 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_210 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_55 $$ group = GROUP_JUMP-->Line_172 $$ group = GROUP_SWITCH[ FD ]
Line_209 $$ while (i >= 0) -->Line_210 $$ Instruction instr = seq.getInstr(i--)[ CD ]
Line_102 $$ i += 2-->Line_139 $$ i += 3[ FD ]
Line_102 $$ i += 2-->Line_194 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_15 $$ if (opcode >= opc_iconst_m1 && opcode <= opc_iconst_5) -->Line_18 $$ if (opcode >= opc_iload_0 && opcode <= opc_aload_3) [ CD ]
Line_162 $$ i += 4-->Line_209 $$ while (i >= 0) [ FD ]
Line_148 $$ i += 4-->Line_154 $$ i += 4[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_209 $$ while (i >= 0) [ CD ]
Line_12 $$ opcode = in.readUnsignedByte()-->Line_54 $$ if (opcode != opc_sipush) [ FD ]
Line_134 $$ i += 4-->Line_28 $$ i++[ FD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_161 $$ operands.add(new Integer(in.readInt()))[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_153 $$ operands.add(new Integer(in.readInt()))[ FD ]
Line_21 $$ if (opcode >= opc_istore_0 && opcode <= opc_astore_3) -->Line_22 $$ operands.add(new Integer(opr_loadstore[opcode - opc_istore_0]))[ CD ]
Line_85 $$ group = GROUP_INVOCATION-->Line_188 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_127 $$ i += 4-->Line_208 $$ seq.setPointer(i)[ FD ]
Line_151 $$ i += 4-->Line_28 $$ i++[ FD ]
Line_207 $$ int i = seq.length() - 1-->Line_208 $$ seq.setPointer(i)[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_57 $$ operands.add(new Integer(in.readShort()))[ FD ]
Line_148 $$ i += 4-->Line_209 $$ while (i >= 0) [ FD ]
Line_152 $$ for (int j = 0; j < high - low + 1; j++) -->Line_166 $$ for (int j = 0; j < npairs; j++) [ FD ]
Line_119 $$ i += 2-->Line_162 $$ i += 4[ FD ]
Line_166 $$ for (int j = 0; j < npairs; j++) -->Line_169 $$ operands.add(new Integer(in.readInt()))[ CD ]
Line_162 $$ i += 4-->Line_190 $$ i++[ FD ]
Line_58 $$ i += 2-->Line_33 $$ i++[ FD ]
Line_74 $$ i += 2-->Line_209 $$ while (i >= 0) [ FD ]
Line_126 $$ group = GROUP_JUMP-->Line_181 $$ group = GROUP_RETURN[ FD ]
Line_119 $$ i += 2-->Line_168 $$ i += 4[ FD ]
Line_148 $$ i += 4-->Line_160 $$ i += ((4 - (i + 1) % 4) % 4)[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_167 $$ operands.add(new Integer(in.readInt()))[ FD ]
Line_86 $$ i += 4-->Line_162 $$ i += 4[ FD ]
Line_112 $$ if (wide) -->Line_117 $$ operands.add(new Integer(in.readUnsignedByte()))[ CD ]
Line_58 $$ i += 2-->Line_74 $$ i += 2[ FD ]
Line_74 $$ i += 2-->Line_208 $$ seq.setPointer(i)[ FD ]
Line_194 $$ for (int i = 0; i < exception_count; i++) -->Line_210 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_55 $$ group = GROUP_JUMP-->Line_133 $$ group = GROUP_INVOCATION[ FD ]
Line_143 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_28 $$ i++[ FD ]
Line_7 $$ int opcode = in.readUnsignedByte()-->Line_12 $$ opcode = in.readUnsignedByte()[ FD ]
Line_119 $$ i += 2-->Line_33 $$ i++[ FD ]
Line_151 $$ i += 4-->Line_165 $$ i += 4[ FD ]
Line_127 $$ i += 4-->Line_151 $$ i += 4[ FD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_138 $$ operands.add(new Integer(in.readUnsignedByte()))[ FD ]
Line_74 $$ i += 2-->Line_160 $$ i += ((4 - (i + 1) % 4) % 4)[ FD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_73 $$ operands.add(new Integer(in.readUnsignedShort()))[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_149 $$ int high = in.readInt()[ FD ]
Line_55 $$ group = GROUP_JUMP-->Line_188 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_8 $$ int group = GROUP_GENERAL-->Line_85 $$ group = GROUP_INVOCATION[ FD ]
Line_139 $$ i += 3-->Line_208 $$ seq.setPointer(i)[ FD ]
Line_160 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_168 $$ i += 4[ FD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_125 $$ operands.add(new Integer(in.readInt()))[ FD ]
Line_166 $$ for (int j = 0; j < npairs; j++) -->Line_185 $$ for (int j = 0; j < operands.size(); j++) [ FD ]
Line_168 $$ i += 4-->Line_170 $$ i += 4[ FD ]
Line_115 $$ i += 4-->Line_208 $$ seq.setPointer(i)[ FD ]
Line_58 $$ i += 2-->Line_209 $$ while (i >= 0) [ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_192 $$ List<ExceptionHandler> lstHandlers = new ArrayList<ExceptionHandler>()[ CD ]
Line_139 $$ i += 3-->Line_154 $$ i += 4[ FD ]
Line_18 $$ if (opcode >= opc_iload_0 && opcode <= opc_aload_3) -->Line_19 $$ operands.add(new Integer(opr_loadstore[opcode - opc_iload_0]))[ CD ]
Line_162 $$ i += 4-->Line_208 $$ seq.setPointer(i)[ FD ]
Line_78 $$ group = GROUP_INVOCATION-->Line_188 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_12 $$ opcode = in.readUnsignedByte()-->Line_107 $$ if (opcode == opc_ret) [ FD ]
Line_76 $$ group = GROUP_FIELDACCESS-->Line_156 $$ group = GROUP_SWITCH[ FD ]
Line_139 $$ i += 3-->Line_5 $$ for (int i = 0; i < length; ) [ FD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_27 $$ operands.add(new Integer(in.readByte()))[ FD ]
Line_165 $$ i += 4-->Line_5 $$ for (int i = 0; i < length; ) [ FD ]
Line_168 $$ i += 4-->Line_210 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_74 $$ i += 2-->Line_5 $$ for (int i = 0; i < length; ) [ FD ]
Line_151 $$ i += 4-->Line_210 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_22 $$ operands.add(new Integer(opr_loadstore[opcode - opc_istore_0]))[ FD ]
Line_74 $$ i += 2-->Line_119 $$ i += 2[ FD ]
Line_86 $$ i += 4-->Line_165 $$ i += 4[ FD ]
Line_54 $$ if (opcode != opc_sipush) -->Line_55 $$ group = GROUP_JUMP[ CD ]
Line_148 $$ i += 4-->Line_33 $$ i++[ FD ]
Line_20 $$ opcode = opcs_load[(opcode - opc_iload_0) / 4]-->Line_54 $$ if (opcode != opc_sipush) [ FD ]
Line_115 $$ i += 4-->Line_105 $$ i++[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_73 $$ operands.add(new Integer(in.readUnsignedShort()))[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_125 $$ operands.add(new Integer(in.readInt()))[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_33 $$ i++[ FD ]
Line_145 $$ i += 4-->Line_28 $$ i++[ FD ]
Line_85 $$ group = GROUP_INVOCATION-->Line_172 $$ group = GROUP_SWITCH[ FD ]
Line_124 $$ opcode = opcode == opc_jsr_w ? opc_jsr : opc_goto-->Line_188 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_148 $$ i += 4-->Line_5 $$ for (int i = 0; i < length; ) [ FD ]
Line_74 $$ i += 2-->Line_134 $$ i += 4[ FD ]
Line_209 $$ while (i >= 0) -->Line_214 $$ seq.addToPointer(-1)[ CD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_117 $$ operands.add(new Integer(in.readUnsignedByte()))[ FD ]
Line_58 $$ i += 2-->Line_194 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_148 $$ i += 4-->Line_170 $$ i += 4[ FD ]
Line_17 $$ opcode = opc_bipush-->Line_124 $$ opcode = opcode == opc_jsr_w ? opc_jsr : opc_goto[ FD ]
Line_139 $$ i += 3-->Line_170 $$ i += 4[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_185 $$ for (int j = 0; j < operands.size(); j++) [ CD ]
Line_100 $$ if (wide) -->Line_104 $$ operands.add(new Integer(in.readUnsignedByte()))[ CD ]
Line_12 $$ opcode = in.readUnsignedByte()-->Line_23 $$ opcode = opcs_store[(opcode - opc_istore_0) / 4][ FD ]
Line_76 $$ group = GROUP_FIELDACCESS-->Line_108 $$ group = GROUP_RETURN[ FD ]
Line_162 $$ i += 4-->Line_168 $$ i += 4[ FD ]
Line_112 $$ if (wide) -->Line_114 $$ operands.add(new Integer(in.readShort()))[ CD ]
Line_127 $$ i += 4-->Line_210 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_32 $$ operands.add(new Integer(in.readUnsignedByte()))[ FD ]
Line_151 $$ i += 4-->Line_33 $$ i++[ FD ]
Line_127 $$ i += 4-->Line_105 $$ i++[ FD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_169 $$ operands.add(new Integer(in.readInt()))[ FD ]
Line_151 $$ i += 4-->Line_160 $$ i += ((4 - (i + 1) % 4) % 4)[ FD ]
Line_206 $$ InstructionSequence seq = new FullInstructionSequence(instructions, new ExceptionTable(lstHandlers))-->Line_207 $$ int i = seq.length() - 1[ FD ]
Line_102 $$ i += 2-->Line_208 $$ seq.setPointer(i)[ FD ]
Line_119 $$ i += 2-->Line_139 $$ i += 3[ FD ]
Line_102 $$ i += 2-->Line_160 $$ i += ((4 - (i + 1) % 4) % 4)[ FD ]
Line_165 $$ i += 4-->Line_33 $$ i++[ FD ]
Line_156 $$ group = GROUP_SWITCH-->Line_172 $$ group = GROUP_SWITCH[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_5 $$ for (int i = 0; i < length; ) [ FD ]
Line_75 $$ if (opcode >= opc_getstatic && opcode <= opc_putfield) -->Line_76 $$ group = GROUP_FIELDACCESS[ CD ]
Line_10 $$ if (wide) -->Line_12 $$ opcode = in.readUnsignedByte()[ CD ]
Line_115 $$ i += 4-->Line_190 $$ i++[ FD ]
Line_143 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_168 $$ i += 4[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_151 $$ i += 4[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_14 $$ List<Integer> operands = new ArrayList<Integer>()[ CD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_105 $$ i++[ FD ]
Line_23 $$ opcode = opcs_store[(opcode - opc_istore_0) / 4]-->Line_124 $$ opcode = opcode == opc_jsr_w ? opc_jsr : opc_goto[ FD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_144 $$ operands.add(new Integer(in.readInt()))[ FD ]
Line_201 $$ if (excclass != 0) -->Line_202 $$ handler.exceptionClass = pool.getPrimitiveConstant(excclass).getString()[ CD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_197 $$ handler.to = in.readUnsignedShort()[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_12 $$ opcode = in.readUnsignedByte()[ FD ]
Line_165 $$ i += 4-->Line_28 $$ i++[ FD ]
Line_7 $$ int opcode = in.readUnsignedByte()-->Line_17 $$ opcode = opc_bipush[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_165 $$ i += 4[ FD ]
Line_152 $$ for (int j = 0; j < high - low + 1; j++) -->Line_153 $$ operands.add(new Integer(in.readInt()))[ CD ]
Line_119 $$ i += 2-->Line_190 $$ i++[ FD ]
Line_151 $$ i += 4-->Line_194 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_134 $$ i += 4-->Line_145 $$ i += 4[ FD ]
Line_115 $$ i += 4-->Line_194 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_168 $$ i += 4-->Line_194 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_86 $$ i += 4-->Line_11 $$ i++[ FD ]
Line_7 $$ int opcode = in.readUnsignedByte()-->Line_20 $$ opcode = opcs_load[(opcode - opc_iload_0) / 4][ FD ]
Line_143 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_148 $$ i += 4[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_159 $$ in.discard((4 - (i + 1) % 4) % 4)[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_4 $$ int bytecode_version = classStruct.getBytecodeVersion()[ CD ]
Line_148 $$ i += 4-->Line_168 $$ i += 4[ FD ]
Line_86 $$ i += 4-->Line_190 $$ i++[ FD ]
Line_85 $$ group = GROUP_INVOCATION-->Line_126 $$ group = GROUP_JUMP[ FD ]
Line_151 $$ i += 4-->Line_11 $$ i++[ FD ]
Line_55 $$ group = GROUP_JUMP-->Line_156 $$ group = GROUP_SWITCH[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_102 $$ i += 2[ FD ]
Line_139 $$ i += 3-->Line_190 $$ i++[ FD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_186 $$ ops[j] = operands.get(j).intValue()[ FD ]
Line_172 $$ group = GROUP_SWITCH-->Line_181 $$ group = GROUP_RETURN[ FD ]
Line_108 $$ group = GROUP_RETURN-->Line_181 $$ group = GROUP_RETURN[ FD ]
Line_127 $$ i += 4-->Line_165 $$ i += 4[ FD ]
Line_58 $$ i += 2-->Line_5 $$ for (int i = 0; i < length; ) [ FD ]
Line_74 $$ i += 2-->Line_194 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_18 $$ if (opcode >= opc_iload_0 && opcode <= opc_aload_3) -->Line_21 $$ if (opcode >= opc_istore_0 && opcode <= opc_astore_3) [ CD ]
Line_8 $$ int group = GROUP_GENERAL-->Line_156 $$ group = GROUP_SWITCH[ FD ]
Line_160 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_194 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_165 $$ i += 4-->Line_209 $$ while (i >= 0) [ FD ]
Line_74 $$ i += 2-->Line_143 $$ i += ((4 - (i + 1) % 4) % 4)[ FD ]
Line_115 $$ i += 4-->Line_143 $$ i += ((4 - (i + 1) % 4) % 4)[ FD ]
Line_151 $$ i += 4-->Line_162 $$ i += 4[ FD ]
Line_145 $$ i += 4-->Line_105 $$ i++[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_130 $$ operands.add(new Integer(in.readUnsignedShort()))[ FD ]
Line_115 $$ i += 4-->Line_33 $$ i++[ FD ]
Line_162 $$ i += 4-->Line_170 $$ i += 4[ FD ]
Line_143 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_11 $$ i++[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_117 $$ operands.add(new Integer(in.readUnsignedByte()))[ FD ]
Line_156 $$ group = GROUP_SWITCH-->Line_188 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_8 $$ int group = GROUP_GENERAL[ CD ]
Line_119 $$ i += 2-->Line_170 $$ i += 4[ FD ]
Line_193 $$ int exception_count = in.readUnsignedShort()-->Line_194 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_102 $$ i += 2-->Line_209 $$ while (i >= 0) [ FD ]
Line_134 $$ i += 4-->Line_162 $$ i += 4[ FD ]
Line_102 $$ i += 2-->Line_127 $$ i += 4[ FD ]
Line_127 $$ i += 4-->Line_11 $$ i++[ FD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_153 $$ operands.add(new Integer(in.readInt()))[ FD ]
Line_170 $$ i += 4-->Line_190 $$ i++[ FD ]
Line_58 $$ i += 2-->Line_208 $$ seq.setPointer(i)[ FD ]
Line_74 $$ i += 2-->Line_28 $$ i++[ FD ]
Line_112 $$ if (wide) -->Line_118 $$ operands.add(new Integer(in.readByte()))[ CD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_143 $$ i += ((4 - (i + 1) % 4) % 4)[ FD ]
Line_151 $$ i += 4-->Line_190 $$ i++[ FD ]
Line_119 $$ i += 2-->Line_165 $$ i += 4[ FD ]
Line_55 $$ group = GROUP_JUMP-->Line_85 $$ group = GROUP_INVOCATION[ FD ]
Line_145 $$ i += 4-->Line_209 $$ while (i >= 0) [ FD ]
Line_154 $$ i += 4-->Line_210 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_115 $$ i += 4-->Line_151 $$ i += 4[ FD ]
Line_82 $$ if (classStruct.isVersionGE_1_7()) -->Line_84 $$ in.discard(2)[ CD ]
Line_108 $$ group = GROUP_RETURN-->Line_156 $$ group = GROUP_SWITCH[ FD ]
Line_127 $$ i += 4-->Line_148 $$ i += 4[ FD ]
Line_58 $$ i += 2-->Line_145 $$ i += 4[ FD ]
Line_127 $$ i += 4-->Line_154 $$ i += 4[ FD ]
Line_102 $$ i += 2-->Line_33 $$ i++[ FD ]
Line_115 $$ i += 4-->Line_11 $$ i++[ FD ]
Line_78 $$ group = GROUP_INVOCATION-->Line_172 $$ group = GROUP_SWITCH[ FD ]
Line_143 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_210 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_74 $$ i += 2-->Line_151 $$ i += 4[ FD ]
Line_85 $$ group = GROUP_INVOCATION-->Line_108 $$ group = GROUP_RETURN[ FD ]
Line_74 $$ i += 2-->Line_115 $$ i += 4[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_137 $$ operands.add(new Integer(in.readUnsignedShort()))[ FD ]
Line_134 $$ i += 4-->Line_209 $$ while (i >= 0) [ FD ]
Line_148 $$ i += 4-->Line_165 $$ i += 4[ FD ]
Line_102 $$ i += 2-->Line_134 $$ i += 4[ FD ]
Line_86 $$ i += 4-->Line_119 $$ i += 2[ FD ]
Line_76 $$ group = GROUP_FIELDACCESS-->Line_172 $$ group = GROUP_SWITCH[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_154 $$ i += 4[ FD ]
Line_192 $$ List<ExceptionHandler> lstHandlers = new ArrayList<ExceptionHandler>()-->Line_204 $$ lstHandlers.add(handler)[ FD ]
Line_102 $$ i += 2-->Line_28 $$ i++[ FD ]
Line_102 $$ i += 2-->Line_154 $$ i += 4[ FD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_150 $$ operands.add(new Integer(high))[ FD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_167 $$ operands.add(new Integer(in.readInt()))[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_210 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_7 $$ int opcode = in.readUnsignedByte()-->Line_124 $$ opcode = opcode == opc_jsr_w ? opc_jsr : opc_goto[ FD ]
Line_74 $$ i += 2-->Line_33 $$ i++[ FD ]
Line_86 $$ i += 4-->Line_139 $$ i += 3[ FD ]
Line_7 $$ int opcode = in.readUnsignedByte()-->Line_54 $$ if (opcode != opc_sipush) [ FD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_130 $$ operands.add(new Integer(in.readUnsignedShort()))[ FD ]
Line_74 $$ i += 2-->Line_11 $$ i++[ FD ]
Line_86 $$ i += 4-->Line_102 $$ i += 2[ FD ]
Line_8 $$ int group = GROUP_GENERAL-->Line_108 $$ group = GROUP_RETURN[ FD ]
Line_86 $$ i += 4-->Line_5 $$ for (int i = 0; i < length; ) [ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_10 $$ if (wide) [ CD ]
Line_108 $$ group = GROUP_RETURN-->Line_172 $$ group = GROUP_SWITCH[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_5 $$ for (int i = 0; i < length; ) [ CD ]
Line_199 $$ int excclass = in.readUnsignedShort()-->Line_200 $$ handler.class_index = excclass[ FD ]
Line_86 $$ i += 4-->Line_127 $$ i += 4[ FD ]
Line_102 $$ i += 2-->Line_165 $$ i += 4[ FD ]
Line_206 $$ InstructionSequence seq = new FullInstructionSequence(instructions, new ExceptionTable(lstHandlers))-->Line_208 $$ seq.setPointer(i)[ FD ]
Line_206 $$ InstructionSequence seq = new FullInstructionSequence(instructions, new ExceptionTable(lstHandlers))-->Line_214 $$ seq.addToPointer(-1)[ FD ]
Line_58 $$ i += 2-->Line_102 $$ i += 2[ FD ]
Line_115 $$ i += 4-->Line_154 $$ i += 4[ FD ]
Line_58 $$ i += 2-->Line_165 $$ i += 4[ FD ]
Line_143 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_33 $$ i++[ FD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_113 $$ operands.add(new Integer(in.readUnsignedShort()))[ FD ]
Line_86 $$ i += 4-->Line_134 $$ i += 4[ FD ]
Line_134 $$ i += 4-->Line_105 $$ i++[ FD ]
Line_162 $$ i += 4-->Line_194 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_74 $$ i += 2-->Line_162 $$ i += 4[ FD ]
Line_86 $$ i += 4-->Line_148 $$ i += 4[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_27 $$ operands.add(new Integer(in.readByte()))[ FD ]
Line_194 $$ for (int i = 0; i < exception_count; i++) -->Line_209 $$ while (i >= 0) [ FD ]
Line_143 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_105 $$ i++[ FD ]
Line_145 $$ i += 4-->Line_168 $$ i += 4[ FD ]
Line_156 $$ group = GROUP_SWITCH-->Line_181 $$ group = GROUP_RETURN[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_196 $$ handler.from = in.readUnsignedShort()[ FD ]
Line_12 $$ opcode = in.readUnsignedByte()-->Line_124 $$ opcode = opcode == opc_jsr_w ? opc_jsr : opc_goto[ FD ]
Line_148 $$ i += 4-->Line_28 $$ i++[ FD ]
Line_139 $$ i += 3-->Line_151 $$ i += 4[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_9 $$ boolean wide = (opcode == opc_wide)[ CD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_185 $$ for (int j = 0; j < operands.size(); j++) [ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_198 $$ handler.handler = in.readUnsignedShort()[ FD ]
Line_115 $$ i += 4-->Line_165 $$ i += 4[ FD ]
Line_124 $$ opcode = opcode == opc_jsr_w ? opc_jsr : opc_goto-->Line_107 $$ if (opcode == opc_ret) [ FD ]
Line_115 $$ i += 4-->Line_148 $$ i += 4[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_206 $$ InstructionSequence seq = new FullInstructionSequence(instructions, new ExceptionTable(lstHandlers))[ CD ]
Line_78 $$ group = GROUP_INVOCATION-->Line_85 $$ group = GROUP_INVOCATION[ FD ]
Line_86 $$ i += 4-->Line_168 $$ i += 4[ FD ]
Line_115 $$ i += 4-->Line_127 $$ i += 4[ FD ]
Line_102 $$ i += 2-->Line_11 $$ i++[ FD ]
Line_55 $$ group = GROUP_JUMP-->Line_126 $$ group = GROUP_JUMP[ FD ]
Line_134 $$ i += 4-->Line_151 $$ i += 4[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_83 $$ operands.add(new Integer(in.readUnsignedShort()))[ FD ]
Line_17 $$ opcode = opc_bipush-->Line_188 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_206 $$ InstructionSequence seq = new FullInstructionSequence(instructions, new ExceptionTable(lstHandlers))-->Line_212 $$ instr.initInstruction(seq)[ FD ]
Line_139 $$ i += 3-->Line_160 $$ i += ((4 - (i + 1) % 4) % 4)[ FD ]
Line_134 $$ i += 4-->Line_190 $$ i++[ FD ]
Line_145 $$ i += 4-->Line_11 $$ i++[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_208 $$ seq.setPointer(i)[ CD ]
Line_127 $$ i += 4-->Line_134 $$ i += 4[ FD ]
Line_86 $$ i += 4-->Line_28 $$ i++[ FD ]
Line_76 $$ group = GROUP_FIELDACCESS-->Line_126 $$ group = GROUP_JUMP[ FD ]
Line_58 $$ i += 2-->Line_210 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_86 $$ i += 4-->Line_170 $$ i += 4[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_118 $$ operands.add(new Integer(in.readByte()))[ FD ]
Line_139 $$ i += 3-->Line_33 $$ i++[ FD ]
Line_160 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_11 $$ i++[ FD ]
Line_86 $$ i += 4-->Line_145 $$ i += 4[ FD ]
Line_74 $$ i += 2-->Line_127 $$ i += 4[ FD ]
Line_148 $$ i += 4-->Line_11 $$ i++[ FD ]
Line_58 $$ i += 2-->Line_170 $$ i += 4[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_145 $$ i += 4[ FD ]
Line_166 $$ for (int j = 0; j < npairs; j++) -->Line_168 $$ i += 4[ CD ]
Line_139 $$ i += 3-->Line_209 $$ while (i >= 0) [ FD ]
Line_165 $$ i += 4-->Line_105 $$ i++[ FD ]
Line_23 $$ opcode = opcs_store[(opcode - opc_istore_0) / 4]-->Line_188 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_102 $$ i += 2-->Line_115 $$ i += 4[ FD ]
Line_58 $$ i += 2-->Line_168 $$ i += 4[ FD ]
Line_112 $$ if (wide) -->Line_113 $$ operands.add(new Integer(in.readUnsignedShort()))[ CD ]
Line_139 $$ i += 3-->Line_168 $$ i += 4[ FD ]
Line_74 $$ i += 2-->Line_170 $$ i += 4[ FD ]
Line_126 $$ group = GROUP_JUMP-->Line_133 $$ group = GROUP_INVOCATION[ FD ]
Line_139 $$ i += 3-->Line_105 $$ i++[ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_160 $$ i += ((4 - (i + 1) % 4) % 4)[ FD ]
Line_115 $$ i += 4-->Line_162 $$ i += 4[ FD ]
Line_162 $$ i += 4-->Line_210 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_115 $$ i += 4-->Line_139 $$ i += 3[ FD ]
Line_143 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_165 $$ i += 4[ FD ]
Line_17 $$ opcode = opc_bipush-->Line_23 $$ opcode = opcs_store[(opcode - opc_istore_0) / 4][ FD ]
Line_5 $$ for (int i = 0; i < length; ) -->Line_139 $$ i += 3[ FD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_104 $$ operands.add(new Integer(in.readUnsignedByte()))[ FD ]
Line_127 $$ i += 4-->Line_143 $$ i += ((4 - (i + 1) % 4) % 4)[ FD ]
Line_151 $$ i += 4-->Line_154 $$ i += 4[ FD ]
Line_133 $$ group = GROUP_INVOCATION-->Line_156 $$ group = GROUP_SWITCH[ FD ]
Line_115 $$ i += 4-->Line_160 $$ i += ((4 - (i + 1) % 4) % 4)[ FD ]
Line_134 $$ i += 4-->Line_168 $$ i += 4[ FD ]
Line_20 $$ opcode = opcs_load[(opcode - opc_iload_0) / 4]-->Line_188 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_143 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_170 $$ i += 4[ FD ]
Line_154 $$ i += 4-->Line_209 $$ while (i >= 0) [ FD ]
Line_145 $$ i += 4-->Line_33 $$ i++[ FD ]
Line_134 $$ i += 4-->Line_5 $$ for (int i = 0; i < length; ) [ FD ]
Line_74 $$ i += 2-->Line_154 $$ i += 4[ FD ]
Line_127 $$ i += 4-->Line_194 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_142 $$ in.discard((4 - (i + 1) % 4) % 4)[ FD ]
Line_115 $$ i += 4-->Line_170 $$ i += 4[ FD ]
Line_124 $$ opcode = opcode == opc_jsr_w ? opc_jsr : opc_goto-->Line_54 $$ if (opcode != opc_sipush) [ FD ]
Line_115 $$ i += 4-->Line_134 $$ i += 4[ FD ]
Line_74 $$ i += 2-->Line_148 $$ i += 4[ FD ]
Line_8 $$ int group = GROUP_GENERAL-->Line_181 $$ group = GROUP_RETURN[ FD ]
Line_76 $$ group = GROUP_FIELDACCESS-->Line_188 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_112 $$ if (wide) -->Line_119 $$ i += 2[ CD ]
Line_194 $$ for (int i = 0; i < exception_count; i++) -->Line_197 $$ handler.to = in.readUnsignedShort()[ CD ]
Line_102 $$ i += 2-->Line_143 $$ i += ((4 - (i + 1) % 4) % 4)[ FD ]
Line_148 $$ i += 4-->Line_105 $$ i++[ FD ]
Line_112 $$ if (wide) -->Line_115 $$ i += 4[ CD ]
Line_119 $$ i += 2-->Line_134 $$ i += 4[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_144 $$ operands.add(new Integer(in.readInt()))[ FD ]
Line_8 $$ int group = GROUP_GENERAL-->Line_78 $$ group = GROUP_INVOCATION[ FD ]
Line_119 $$ i += 2-->Line_105 $$ i++[ FD ]
Line_12 $$ opcode = in.readUnsignedByte()-->Line_188 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_74 $$ i += 2-->Line_210 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_58 $$ i += 2-->Line_105 $$ i++[ FD ]
Line_119 $$ i += 2-->Line_143 $$ i += ((4 - (i + 1) % 4) % 4)[ FD ]
Line_151 $$ i += 4-->Line_170 $$ i += 4[ FD ]
Line_126 $$ group = GROUP_JUMP-->Line_172 $$ group = GROUP_SWITCH[ FD ]
Line_145 $$ i += 4-->Line_5 $$ for (int i = 0; i < length; ) [ FD ]
Line_14 $$ List<Integer> operands = new ArrayList<Integer>()-->Line_164 $$ operands.add(new Integer(npairs))[ FD ]
Line_134 $$ i += 4-->Line_154 $$ i += 4[ FD ]
Line_102 $$ i += 2-->Line_148 $$ i += 4[ FD ]
Line_58 $$ i += 2-->Line_28 $$ i++[ FD ]
Line_58 $$ i += 2-->Line_143 $$ i += ((4 - (i + 1) % 4) % 4)[ FD ]
Line_8 $$ int group = GROUP_GENERAL-->Line_76 $$ group = GROUP_FIELDACCESS[ FD ]
Line_107 $$ if (opcode == opc_ret) -->Line_108 $$ group = GROUP_RETURN[ CD ]
Line_119 $$ i += 2-->Line_208 $$ seq.setPointer(i)[ FD ]
Line_119 $$ i += 2-->Line_151 $$ i += 4[ FD ]
Line_86 $$ i += 4-->Line_160 $$ i += ((4 - (i + 1) % 4) % 4)[ FD ]
Line_143 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_194 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_133 $$ group = GROUP_INVOCATION-->Line_181 $$ group = GROUP_RETURN[ FD ]
Line_119 $$ i += 2-->Line_210 $$ Instruction instr = seq.getInstr(i--)[ FD ]
Line_154 $$ i += 4-->Line_160 $$ i += ((4 - (i + 1) % 4) % 4)[ FD ]
Line_100 $$ if (wide) -->Line_102 $$ i += 2[ CD ]
Line_119 $$ i += 2-->Line_127 $$ i += 4[ FD ]
Line_2 $$ private InstructionSequence parseBytecode(DataInputFullStream in, int length, ConstantPool pool) throws IOException -->Line_84 $$ in.discard(2)[ FD ]
Line_181 $$ group = GROUP_RETURN-->Line_188 $$ Instruction instr = ConstantsUtil.getInstructionInstance(opcode, wide, group, bytecode_version, ops)[ FD ]
Line_154 $$ i += 4-->Line_165 $$ i += 4[ FD ]
Line_127 $$ i += 4-->Line_170 $$ i += 4[ FD ]
Line_145 $$ i += 4-->Line_154 $$ i += 4[ FD ]
Line_160 $$ i += ((4 - (i + 1) % 4) % 4)-->Line_208 $$ seq.setPointer(i)[ FD ]
Line_165 $$ i += 4-->Line_190 $$ i++[ FD ]
Line_145 $$ i += 4-->Line_194 $$ for (int i = 0; i < exception_count; i++) [ FD ]
Line_119 $$ i += 2-->Line_209 $$ while (i >= 0) [ FD ]
Line_58 $$ i += 2-->Line_190 $$ i++[ FD ]
Line_165 $$ i += 4-->Line_11 $$ i++[ FD ]
Line_152 $$ for (int j = 0; j < high - low + 1; j++) -->Line_186 $$ ops[j] = operands.get(j).intValue()[ FD ]
