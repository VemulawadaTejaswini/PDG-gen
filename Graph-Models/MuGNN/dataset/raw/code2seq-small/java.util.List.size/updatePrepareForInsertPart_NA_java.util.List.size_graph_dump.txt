Line_4 $$ int currentNode = myNodeIndexes.get(myNoInsertSize - 1)-->Line_5 $$ if (edgeRestrictions.hasRestriction(currentNode))[ FD ]
Line_8 $$ for (prevIndex = myNoInsertSize - 1; prevIndex > 0; prevIndex--) -->Line_10 $$ int downNode = myNodeIndexes.get(prevIndex)[ CD ]
Line_2 $$ public void updatePrepareForInsertPart(@NotNull TimestampGetter timestampGetter, @NotNull BekEdgeRestrictions edgeRestrictions) -->Line_4 $$ int currentNode = myNodeIndexes.get(myNoInsertSize - 1)[ CD ]
Line_2 $$ public void updatePrepareForInsertPart(@NotNull TimestampGetter timestampGetter, @NotNull BekEdgeRestrictions edgeRestrictions) -->Line_29 $$ myPrepareForInsertPart = myNodeIndexes.subList(prevIndex, myNoInsertSize)[ CD ]
Line_7 $$ int prevIndex-->Line_8 $$ for (prevIndex = myNoInsertSize - 1; prevIndex > 0; prevIndex--) [ FD ]
Line_2 $$ public void updatePrepareForInsertPart(@NotNull TimestampGetter timestampGetter, @NotNull BekEdgeRestrictions edgeRestrictions) -->Line_21 $$ long delta = Math.abs(timestampGetter.getTimestamp(upNode) - timestampGetter.getTimestamp(downNode))[ FD ]
Line_10 $$ int downNode = myNodeIndexes.get(prevIndex)-->Line_21 $$ long delta = Math.abs(timestampGetter.getTimestamp(upNode) - timestampGetter.getTimestamp(downNode))[ FD ]
Line_8 $$ for (prevIndex = myNoInsertSize - 1; prevIndex > 0; prevIndex--) -->Line_10 $$ int downNode = myNodeIndexes.get(prevIndex)[ FD ]
Line_8 $$ for (prevIndex = myNoInsertSize - 1; prevIndex > 0; prevIndex--) -->Line_16 $$ if (downNodes.size() > 1 && downNodes.contains(downNode))[ CD ]
Line_8 $$ for (prevIndex = myNoInsertSize - 1; prevIndex > 0; prevIndex--) -->Line_21 $$ long delta = Math.abs(timestampGetter.getTimestamp(upNode) - timestampGetter.getTimestamp(downNode))[ CD ]
Line_9 $$ int upNode = myNodeIndexes.get(prevIndex - 1)-->Line_21 $$ long delta = Math.abs(timestampGetter.getTimestamp(upNode) - timestampGetter.getTimestamp(downNode))[ FD ]
Line_5 $$ if (edgeRestrictions.hasRestriction(currentNode))-->Line_6 $$ return[ CD ]
Line_8 $$ for (prevIndex = myNoInsertSize - 1; prevIndex > 0; prevIndex--) -->Line_9 $$ int upNode = myNodeIndexes.get(prevIndex - 1)[ CD ]
Line_2 $$ public void updatePrepareForInsertPart(@NotNull TimestampGetter timestampGetter, @NotNull BekEdgeRestrictions edgeRestrictions) -->Line_7 $$ int prevIndex[ CD ]
Line_2 $$ public void updatePrepareForInsertPart(@NotNull TimestampGetter timestampGetter, @NotNull BekEdgeRestrictions edgeRestrictions) -->Line_5 $$ if (edgeRestrictions.hasRestriction(currentNode))[ FD ]
Line_2 $$ public void updatePrepareForInsertPart(@NotNull TimestampGetter timestampGetter, @NotNull BekEdgeRestrictions edgeRestrictions) -->Line_8 $$ for (prevIndex = myNoInsertSize - 1; prevIndex > 0; prevIndex--) [ CD ]
Line_2 $$ public void updatePrepareForInsertPart(@NotNull TimestampGetter timestampGetter, @NotNull BekEdgeRestrictions edgeRestrictions) -->Line_5 $$ if (edgeRestrictions.hasRestriction(currentNode))[ CD ]
Line_10 $$ int downNode = myNodeIndexes.get(prevIndex)-->Line_16 $$ if (downNodes.size() > 1 && downNodes.contains(downNode))[ FD ]
Line_7 $$ int prevIndex-->Line_29 $$ myPrepareForInsertPart = myNodeIndexes.subList(prevIndex, myNoInsertSize)[ FD ]
Line_8 $$ for (prevIndex = myNoInsertSize - 1; prevIndex > 0; prevIndex--) -->Line_29 $$ myPrepareForInsertPart = myNodeIndexes.subList(prevIndex, myNoInsertSize)[ FD ]
Line_7 $$ int prevIndex-->Line_10 $$ int downNode = myNodeIndexes.get(prevIndex)[ FD ]
