Line_9 $$ int upNode = myNodeIndexes.get(prevIndex - 1)-->Line_11 $$ if (edgeRestrictions.hasRestriction(upNode))[ FD ]
Line_8 $$ for (prevIndex = myNoInsertSize - 1; prevIndex > 0; prevIndex--) -->Line_21 $$ if (prevIndex < myNoInsertSize - MAX_BLOCK_SIZE && delta > SMALL_DELTA_TIME)[ CD ]
Line_8 $$ for (prevIndex = myNoInsertSize - 1; prevIndex > 0; prevIndex--) -->Line_24 $$ myPrepareForInsertPart = myNodeIndexes.subList(prevIndex, myNoInsertSize)[ FD ]
Line_2 $$ public void updatePrepareForInsertPart(@NotNull TimestampGetter timestampGetter, @NotNull BekEdgeRestrictions edgeRestrictions) -->Line_18 $$ long delta = Math.abs(timestampGetter.getTimestamp(upNode) - timestampGetter.getTimestamp(downNode))[ FD ]
Line_2 $$ public void updatePrepareForInsertPart(@NotNull TimestampGetter timestampGetter, @NotNull BekEdgeRestrictions edgeRestrictions) -->Line_8 $$ for (prevIndex = myNoInsertSize - 1; prevIndex > 0; prevIndex--) [ CD ]
Line_18 $$ long delta = Math.abs(timestampGetter.getTimestamp(upNode) - timestampGetter.getTimestamp(downNode))-->Line_19 $$ if (delta > MAX_DELTA_TIME)[ FD ]
Line_9 $$ int upNode = myNodeIndexes.get(prevIndex - 1)-->Line_13 $$ List<Integer> downNodes = getDownNodes(myPermanentGraph, upNode)[ FD ]
Line_2 $$ public void updatePrepareForInsertPart(@NotNull TimestampGetter timestampGetter, @NotNull BekEdgeRestrictions edgeRestrictions) -->Line_4 $$ int currentNode = myNodeIndexes.get(myNoInsertSize - 1)[ CD ]
Line_13 $$ List<Integer> downNodes = getDownNodes(myPermanentGraph, upNode)-->Line_14 $$ if (downNodes.size() > 1 && downNodes.contains(downNode))[ FD ]
Line_2 $$ public void updatePrepareForInsertPart(@NotNull TimestampGetter timestampGetter, @NotNull BekEdgeRestrictions edgeRestrictions) -->Line_5 $$ if (edgeRestrictions.hasRestriction(currentNode))[ CD ]
Line_8 $$ for (prevIndex = myNoInsertSize - 1; prevIndex > 0; prevIndex--) -->Line_11 $$ if (edgeRestrictions.hasRestriction(upNode))[ CD ]
Line_10 $$ int downNode = myNodeIndexes.get(prevIndex)-->Line_16 $$ if (!downNodes.contains(downNode))[ FD ]
Line_2 $$ public void updatePrepareForInsertPart(@NotNull TimestampGetter timestampGetter, @NotNull BekEdgeRestrictions edgeRestrictions) -->Line_5 $$ if (edgeRestrictions.hasRestriction(currentNode))[ FD ]
Line_8 $$ for (prevIndex = myNoInsertSize - 1; prevIndex > 0; prevIndex--) -->Line_10 $$ int downNode = myNodeIndexes.get(prevIndex)[ CD ]
Line_2 $$ public void updatePrepareForInsertPart(@NotNull TimestampGetter timestampGetter, @NotNull BekEdgeRestrictions edgeRestrictions) -->Line_7 $$ int prevIndex[ CD ]
Line_10 $$ int downNode = myNodeIndexes.get(prevIndex)-->Line_18 $$ long delta = Math.abs(timestampGetter.getTimestamp(upNode) - timestampGetter.getTimestamp(downNode))[ FD ]
Line_4 $$ int currentNode = myNodeIndexes.get(myNoInsertSize - 1)-->Line_5 $$ if (edgeRestrictions.hasRestriction(currentNode))[ FD ]
Line_8 $$ for (prevIndex = myNoInsertSize - 1; prevIndex > 0; prevIndex--) -->Line_9 $$ int upNode = myNodeIndexes.get(prevIndex - 1)[ CD ]
Line_8 $$ for (prevIndex = myNoInsertSize - 1; prevIndex > 0; prevIndex--) -->Line_19 $$ if (delta > MAX_DELTA_TIME)[ CD ]
Line_7 $$ int prevIndex-->Line_24 $$ myPrepareForInsertPart = myNodeIndexes.subList(prevIndex, myNoInsertSize)[ FD ]
Line_8 $$ for (prevIndex = myNoInsertSize - 1; prevIndex > 0; prevIndex--) -->Line_10 $$ int downNode = myNodeIndexes.get(prevIndex)[ FD ]
Line_7 $$ int prevIndex-->Line_8 $$ for (prevIndex = myNoInsertSize - 1; prevIndex > 0; prevIndex--) [ FD ]
Line_13 $$ List<Integer> downNodes = getDownNodes(myPermanentGraph, upNode)-->Line_16 $$ if (!downNodes.contains(downNode))[ FD ]
Line_10 $$ int downNode = myNodeIndexes.get(prevIndex)-->Line_14 $$ if (downNodes.size() > 1 && downNodes.contains(downNode))[ FD ]
Line_8 $$ for (prevIndex = myNoInsertSize - 1; prevIndex > 0; prevIndex--) -->Line_13 $$ List<Integer> downNodes = getDownNodes(myPermanentGraph, upNode)[ CD ]
Line_2 $$ public void updatePrepareForInsertPart(@NotNull TimestampGetter timestampGetter, @NotNull BekEdgeRestrictions edgeRestrictions) -->Line_11 $$ if (edgeRestrictions.hasRestriction(upNode))[ FD ]
Line_7 $$ int prevIndex-->Line_10 $$ int downNode = myNodeIndexes.get(prevIndex)[ FD ]
Line_8 $$ for (prevIndex = myNoInsertSize - 1; prevIndex > 0; prevIndex--) -->Line_14 $$ if (downNodes.size() > 1 && downNodes.contains(downNode))[ CD ]
Line_9 $$ int upNode = myNodeIndexes.get(prevIndex - 1)-->Line_18 $$ long delta = Math.abs(timestampGetter.getTimestamp(upNode) - timestampGetter.getTimestamp(downNode))[ FD ]
Line_8 $$ for (prevIndex = myNoInsertSize - 1; prevIndex > 0; prevIndex--) -->Line_18 $$ long delta = Math.abs(timestampGetter.getTimestamp(upNode) - timestampGetter.getTimestamp(downNode))[ CD ]
Line_8 $$ for (prevIndex = myNoInsertSize - 1; prevIndex > 0; prevIndex--) -->Line_16 $$ if (!downNodes.contains(downNode))[ CD ]
Line_5 $$ if (edgeRestrictions.hasRestriction(currentNode))-->Line_6 $$ return[ CD ]
Line_2 $$ public void updatePrepareForInsertPart(@NotNull TimestampGetter timestampGetter, @NotNull BekEdgeRestrictions edgeRestrictions) -->Line_24 $$ myPrepareForInsertPart = myNodeIndexes.subList(prevIndex, myNoInsertSize)[ CD ]
