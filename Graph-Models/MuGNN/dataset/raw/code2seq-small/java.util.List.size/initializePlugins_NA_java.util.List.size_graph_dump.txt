Line_2 $$ private static void initializePlugins(@Nullable StartupProgress progress) -->Line_8 $$ final ClassLoader parentLoader = callerClass.getClassLoader()[ CD ]
Line_9 $$ final List<IdeaPluginDescriptorImpl> result = new ArrayList<IdeaPluginDescriptorImpl>()-->Line_26 $$ for (int i = 0; i < result.size(); i++) [ FD ]
Line_2 $$ private static void initializePlugins(@Nullable StartupProgress progress) -->Line_9 $$ final List<IdeaPluginDescriptorImpl> result = new ArrayList<IdeaPluginDescriptorImpl>()[ CD ]
Line_10 $$ final Map<PluginId, IdeaPluginDescriptorImpl> idToDescriptorMap = new THashMap<PluginId, IdeaPluginDescriptorImpl>()-->Line_14 $$ final Graph<PluginId> graph = createPluginIdGraph(idToDescriptorMap)[ FD ]
Line_2 $$ private static void initializePlugins(@Nullable StartupProgress progress) -->Line_26 $$ for (int i = 0; i < result.size(); i++) [ CD ]
Line_9 $$ final List<IdeaPluginDescriptorImpl> result = new ArrayList<IdeaPluginDescriptorImpl>()-->Line_49 $$ registerExtensionPointsAndExtensions(Extensions.getArea(areaInstance), result)[ FD ]
Line_5 $$ final IdeaPluginDescriptorImpl[] pluginDescriptors = loadDescriptors(progress, errors)-->Line_13 $$ fixDescriptors(pluginDescriptors, parentLoader, idToDescriptorMap, disabledPluginNames, brokenPluginsList, result, errors)[ FD ]
Line_6 $$ final Class callerClass = ReflectionUtil.findCallerClass(1)-->Line_8 $$ final ClassLoader parentLoader = callerClass.getClassLoader()[ FD ]
Line_2 $$ private static void initializePlugins(@Nullable StartupProgress progress) -->Line_10 $$ final Map<PluginId, IdeaPluginDescriptorImpl> idToDescriptorMap = new THashMap<PluginId, IdeaPluginDescriptorImpl>()[ CD ]
Line_31 $$ if (pluginDescriptor.getPluginId().getIdString().equals(CORE_PLUGIN_ID) || pluginDescriptor.isUseCoreClassLoader()) -->Line_36 $$ final ClassLoader[] parentLoaders = getParentLoaders(idToDescriptorMap, dependentPluginIds)[ CD ]
Line_40 $$ if (progress != null) -->Line_41 $$ progress.showProgress("", PLUGINS_PROGRESS_MAX_VALUE + (i++ / (float) result.size()) * 0.35f)[ CD ]
Line_2 $$ private static void initializePlugins(@Nullable StartupProgress progress) -->Line_3 $$ configureExtensions()[ CD ]
Line_9 $$ final List<IdeaPluginDescriptorImpl> result = new ArrayList<IdeaPluginDescriptorImpl>()-->Line_44 $$ registerExtensionPointsAndExtensions(Extensions.getRootArea(), result)[ FD ]
Line_45 $$ Extensions.getRootArea().getExtensionPoint(Extensions.AREA_LISTENER_EXTENSION_POINT).registerExtension(new AreaListener() -->Line_49 $$ registerExtensionPointsAndExtensions(Extensions.getArea(areaInstance), result)[ CD ]
Line_2 $$ private static void initializePlugins(@Nullable StartupProgress progress) -->Line_5 $$ final IdeaPluginDescriptorImpl[] pluginDescriptors = loadDescriptors(progress, errors)[ FD ]
Line_2 $$ private static void initializePlugins(@Nullable StartupProgress progress) -->Line_40 $$ if (progress != null) [ FD ]
Line_2 $$ private static void initializePlugins(@Nullable StartupProgress progress) -->Line_14 $$ final Graph<PluginId> graph = createPluginIdGraph(idToDescriptorMap)[ CD ]
Line_2 $$ private static void initializePlugins(@Nullable StartupProgress progress) -->Line_45 $$ Extensions.getRootArea().getExtensionPoint(Extensions.AREA_LISTENER_EXTENSION_POINT).registerExtension(new AreaListener() [ CD ]
Line_31 $$ if (pluginDescriptor.getPluginId().getIdString().equals(CORE_PLUGIN_ID) || pluginDescriptor.isUseCoreClassLoader()) -->Line_38 $$ pluginDescriptor.setLoader(pluginClassLoader)[ CD ]
Line_2 $$ private static void initializePlugins(@Nullable StartupProgress progress) -->Line_5 $$ final IdeaPluginDescriptorImpl[] pluginDescriptors = loadDescriptors(progress, errors)[ CD ]
Line_15 $$ final DFSTBuilder<PluginId> builder = new DFSTBuilder<PluginId>(graph)-->Line_17 $$ final Comparator<PluginId> idComparator = builder.comparator()[ FD ]
Line_31 $$ if (pluginDescriptor.getPluginId().getIdString().equals(CORE_PLUGIN_ID) || pluginDescriptor.isUseCoreClassLoader()) -->Line_37 $$ ClassLoader pluginClassLoader = createPluginClassLoader(classPath.toArray(new File[classPath.size()]), parentLoaders.length > 0 ? parentLoaders : new ClassLoader[] [ CD ]
Line_26 $$ for (int i = 0; i < result.size(); i++) -->Line_41 $$ progress.showProgress("", PLUGINS_PROGRESS_MAX_VALUE + (i++ / (float) result.size()) * 0.35f)[ FD ]
Line_2 $$ private static void initializePlugins(@Nullable StartupProgress progress) -->Line_15 $$ final DFSTBuilder<PluginId> builder = new DFSTBuilder<PluginId>(graph)[ CD ]
Line_2 $$ private static void initializePlugins(@Nullable StartupProgress progress) -->Line_4 $$ final List<String> errors = ContainerUtil.newArrayList()[ CD ]
Line_2 $$ private static void initializePlugins(@Nullable StartupProgress progress) -->Line_12 $$ List<String> brokenPluginsList = new SmartList<String>()[ CD ]
Line_4 $$ final List<String> errors = ContainerUtil.newArrayList()-->Line_5 $$ final IdeaPluginDescriptorImpl[] pluginDescriptors = loadDescriptors(progress, errors)[ FD ]
Line_8 $$ final ClassLoader parentLoader = callerClass.getClassLoader()-->Line_32 $$ pluginDescriptor.setLoader(parentLoader)[ FD ]
Line_4 $$ final List<String> errors = ContainerUtil.newArrayList()-->Line_13 $$ fixDescriptors(pluginDescriptors, parentLoader, idToDescriptorMap, disabledPluginNames, brokenPluginsList, result, errors)[ FD ]
Line_17 $$ final Comparator<PluginId> idComparator = builder.comparator()-->Line_23 $$ return idComparator.compare(o1.getPluginId(), o2.getPluginId())[ FD ]
Line_10 $$ final Map<PluginId, IdeaPluginDescriptorImpl> idToDescriptorMap = new THashMap<PluginId, IdeaPluginDescriptorImpl>()-->Line_36 $$ final ClassLoader[] parentLoaders = getParentLoaders(idToDescriptorMap, dependentPluginIds)[ FD ]
Line_45 $$ Extensions.getRootArea().getExtensionPoint(Extensions.AREA_LISTENER_EXTENSION_POINT).registerExtension(new AreaListener() -->Line_49 $$ registerExtensionPointsAndExtensions(Extensions.getArea(areaInstance), result)[ FD ]
Line_2 $$ private static void initializePlugins(@Nullable StartupProgress progress) -->Line_6 $$ final Class callerClass = ReflectionUtil.findCallerClass(1)[ CD ]
Line_2 $$ private static void initializePlugins(@Nullable StartupProgress progress) -->Line_41 $$ progress.showProgress("", PLUGINS_PROGRESS_MAX_VALUE + (i++ / (float) result.size()) * 0.35f)[ FD ]
Line_2 $$ private static void initializePlugins(@Nullable StartupProgress progress) -->Line_11 $$ final Map<String, String> disabledPluginNames = new THashMap<String, String>()[ CD ]
Line_11 $$ final Map<String, String> disabledPluginNames = new THashMap<String, String>()-->Line_13 $$ fixDescriptors(pluginDescriptors, parentLoader, idToDescriptorMap, disabledPluginNames, brokenPluginsList, result, errors)[ FD ]
Line_2 $$ private static void initializePlugins(@Nullable StartupProgress progress) -->Line_17 $$ final Comparator<PluginId> idComparator = builder.comparator()[ CD ]
Line_26 $$ for (int i = 0; i < result.size(); i++) -->Line_27 $$ ourId2Index.put(result.get(i).getPluginId(), i)[ FD ]
Line_10 $$ final Map<PluginId, IdeaPluginDescriptorImpl> idToDescriptorMap = new THashMap<PluginId, IdeaPluginDescriptorImpl>()-->Line_13 $$ fixDescriptors(pluginDescriptors, parentLoader, idToDescriptorMap, disabledPluginNames, brokenPluginsList, result, errors)[ FD ]
Line_26 $$ for (int i = 0; i < result.size(); i++) -->Line_27 $$ ourId2Index.put(result.get(i).getPluginId(), i)[ CD ]
Line_31 $$ if (pluginDescriptor.getPluginId().getIdString().equals(CORE_PLUGIN_ID) || pluginDescriptor.isUseCoreClassLoader()) -->Line_34 $$ final List<File> classPath = pluginDescriptor.getClassPath()[ CD ]
Line_12 $$ List<String> brokenPluginsList = new SmartList<String>()-->Line_13 $$ fixDescriptors(pluginDescriptors, parentLoader, idToDescriptorMap, disabledPluginNames, brokenPluginsList, result, errors)[ FD ]
Line_31 $$ if (pluginDescriptor.getPluginId().getIdString().equals(CORE_PLUGIN_ID) || pluginDescriptor.isUseCoreClassLoader()) -->Line_35 $$ final PluginId[] dependentPluginIds = pluginDescriptor.getDependentPluginIds()[ CD ]
Line_2 $$ private static void initializePlugins(@Nullable StartupProgress progress) -->Line_16 $$ prepareLoadingPluginsErrorMessage(errors)[ CD ]
Line_31 $$ if (pluginDescriptor.getPluginId().getIdString().equals(CORE_PLUGIN_ID) || pluginDescriptor.isUseCoreClassLoader()) -->Line_32 $$ pluginDescriptor.setLoader(parentLoader)[ CD ]
Line_4 $$ final List<String> errors = ContainerUtil.newArrayList()-->Line_16 $$ prepareLoadingPluginsErrorMessage(errors)[ FD ]
Line_2 $$ private static void initializePlugins(@Nullable StartupProgress progress) -->Line_13 $$ fixDescriptors(pluginDescriptors, parentLoader, idToDescriptorMap, disabledPluginNames, brokenPluginsList, result, errors)[ CD ]
Line_8 $$ final ClassLoader parentLoader = callerClass.getClassLoader()-->Line_13 $$ fixDescriptors(pluginDescriptors, parentLoader, idToDescriptorMap, disabledPluginNames, brokenPluginsList, result, errors)[ FD ]
Line_2 $$ private static void initializePlugins(@Nullable StartupProgress progress) -->Line_44 $$ registerExtensionPointsAndExtensions(Extensions.getRootArea(), result)[ CD ]
Line_9 $$ final List<IdeaPluginDescriptorImpl> result = new ArrayList<IdeaPluginDescriptorImpl>()-->Line_41 $$ progress.showProgress("", PLUGINS_PROGRESS_MAX_VALUE + (i++ / (float) result.size()) * 0.35f)[ FD ]
Line_9 $$ final List<IdeaPluginDescriptorImpl> result = new ArrayList<IdeaPluginDescriptorImpl>()-->Line_13 $$ fixDescriptors(pluginDescriptors, parentLoader, idToDescriptorMap, disabledPluginNames, brokenPluginsList, result, errors)[ FD ]
Line_9 $$ final List<IdeaPluginDescriptorImpl> result = new ArrayList<IdeaPluginDescriptorImpl>()-->Line_27 $$ ourId2Index.put(result.get(i).getPluginId(), i)[ FD ]
