Line_37 $$ final Path childDir = new Path(path, "child" + pathCount)-->Line_38 $$ FileSystem.mkdirs(fs, childDir, FsPermission.createImmutable((short) 0700))[ FD ]
Line_45 $$ final FileSystem userFs = dfsCluster.getFileSystem()-->Line_64 $$ userFs.listXAttrs(childDir)[ FD ]
Line_77 $$ user.doAs(new PrivilegedExceptionAction<Object>() -->Line_81 $$ final FileSystem userFs = dfsCluster.getFileSystem()[ CD ]
Line_45 $$ final FileSystem userFs = dfsCluster.getFileSystem()-->Line_82 $$ userFs.listXAttrs(childDir)[ FD ]
Line_59 $$ user.doAs(new PrivilegedExceptionAction<Object>() -->Line_65 $$ return null[ CD ]
Line_45 $$ final FileSystem userFs = dfsCluster.getFileSystem()-->Line_46 $$ userFs.listXAttrs(childDir)[ FD ]
Line_41 $$ user.doAs(new PrivilegedExceptionAction<Object>() -->Line_46 $$ userFs.listXAttrs(childDir)[ CD ]
Line_45 $$ final FileSystem userFs = dfsCluster.getFileSystem()-->Line_95 $$ assertTrue(userFs.listXAttrs(childDir).size() == 1)[ FD ]
Line_59 $$ user.doAs(new PrivilegedExceptionAction<Object>() -->Line_63 $$ final FileSystem userFs = dfsCluster.getFileSystem()[ CD ]
Line_90 $$ user.doAs(new PrivilegedExceptionAction<Object>() -->Line_96 $$ return null[ CD ]
Line_94 $$ final FileSystem userFs = dfsCluster.getFileSystem()-->Line_95 $$ assertTrue(userFs.listXAttrs(childDir).size() == 1)[ FD ]
Line_14 $$ final UserGroupInformation user = UserGroupInformation.createUserForTesting("user", new String[] -->Line_90 $$ user.doAs(new PrivilegedExceptionAction<Object>() [ FD ]
Line_37 $$ final Path childDir = new Path(path, "child" + pathCount)-->Line_95 $$ assertTrue(userFs.listXAttrs(childDir).size() == 1)[ FD ]
Line_90 $$ user.doAs(new PrivilegedExceptionAction<Object>() -->Line_94 $$ final FileSystem userFs = dfsCluster.getFileSystem()[ CD ]
Line_90 $$ user.doAs(new PrivilegedExceptionAction<Object>() -->Line_95 $$ assertTrue(userFs.listXAttrs(childDir).size() == 1)[ CD ]
Line_63 $$ final FileSystem userFs = dfsCluster.getFileSystem()-->Line_82 $$ userFs.listXAttrs(childDir)[ FD ]
Line_77 $$ user.doAs(new PrivilegedExceptionAction<Object>() -->Line_83 $$ return null[ CD ]
Line_59 $$ user.doAs(new PrivilegedExceptionAction<Object>() -->Line_64 $$ userFs.listXAttrs(childDir)[ CD ]
Line_37 $$ final Path childDir = new Path(path, "child" + pathCount)-->Line_64 $$ userFs.listXAttrs(childDir)[ FD ]
Line_63 $$ final FileSystem userFs = dfsCluster.getFileSystem()-->Line_95 $$ assertTrue(userFs.listXAttrs(childDir).size() == 1)[ FD ]
Line_77 $$ user.doAs(new PrivilegedExceptionAction<Object>() -->Line_82 $$ userFs.listXAttrs(childDir)[ CD ]
Line_37 $$ final Path childDir = new Path(path, "child" + pathCount)-->Line_99 $$ assertTrue(fs.listXAttrs(childDir).size() == 2)[ FD ]
Line_14 $$ final UserGroupInformation user = UserGroupInformation.createUserForTesting("user", new String[] -->Line_41 $$ user.doAs(new PrivilegedExceptionAction<Object>() [ FD ]
Line_37 $$ final Path childDir = new Path(path, "child" + pathCount)-->Line_39 $$ fs.setXAttr(childDir, name1, "1234".getBytes())[ FD ]
Line_63 $$ final FileSystem userFs = dfsCluster.getFileSystem()-->Line_64 $$ userFs.listXAttrs(childDir)[ FD ]
Line_41 $$ user.doAs(new PrivilegedExceptionAction<Object>() -->Line_45 $$ final FileSystem userFs = dfsCluster.getFileSystem()[ CD ]
Line_81 $$ final FileSystem userFs = dfsCluster.getFileSystem()-->Line_82 $$ userFs.listXAttrs(childDir)[ FD ]
Line_37 $$ final Path childDir = new Path(path, "child" + pathCount)-->Line_46 $$ userFs.listXAttrs(childDir)[ FD ]
Line_41 $$ user.doAs(new PrivilegedExceptionAction<Object>() -->Line_47 $$ return null[ CD ]
Line_14 $$ final UserGroupInformation user = UserGroupInformation.createUserForTesting("user", new String[] -->Line_77 $$ user.doAs(new PrivilegedExceptionAction<Object>() [ FD ]
Line_81 $$ final FileSystem userFs = dfsCluster.getFileSystem()-->Line_95 $$ assertTrue(userFs.listXAttrs(childDir).size() == 1)[ FD ]
Line_37 $$ final Path childDir = new Path(path, "child" + pathCount)-->Line_82 $$ userFs.listXAttrs(childDir)[ FD ]
Line_14 $$ final UserGroupInformation user = UserGroupInformation.createUserForTesting("user", new String[] -->Line_59 $$ user.doAs(new PrivilegedExceptionAction<Object>() [ FD ]
