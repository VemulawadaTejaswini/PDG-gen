Line_6 $$ final TaskActivationState taskActivationState = stateProvider.getTasksActivation(activationEntry.systemId, activationEntry.projectPath)-->Line_7 $$ final List<String> tasks = taskActivationState.getTasks(activationEntry.phase)[ FD ]
Line_8 $$ final int i1 = tasks.indexOf(activationEntry.taskName)-->Line_11 $$ Collections.swap(tasks, i1, i2)[ FD ]
Line_2 $$ public void moveTasks(@NotNull Collection<TaskActivationEntry> entries, int increment) -->Line_3 $$ LOG.assertTrue(increment == -1 || increment == 1)[ CD ]
Line_7 $$ final List<String> tasks = taskActivationState.getTasks(activationEntry.phase)-->Line_11 $$ Collections.swap(tasks, i1, i2)[ FD ]
Line_9 $$ final int i2 = i1 + increment-->Line_11 $$ Collections.swap(tasks, i1, i2)[ FD ]
Line_7 $$ final List<String> tasks = taskActivationState.getTasks(activationEntry.phase)-->Line_10 $$ if (i1 != -1 && tasks.size() > i2 && i2 >= 0) [ FD ]
Line_7 $$ final List<String> tasks = taskActivationState.getTasks(activationEntry.phase)-->Line_8 $$ final int i1 = tasks.indexOf(activationEntry.taskName)[ FD ]
Line_10 $$ if (i1 != -1 && tasks.size() > i2 && i2 >= 0) -->Line_11 $$ Collections.swap(tasks, i1, i2)[ CD ]
Line_4 $$ final ExternalProjectsStateProvider stateProvider = ExternalProjectsManager.getInstance(myProject).getStateProvider()-->Line_6 $$ final TaskActivationState taskActivationState = stateProvider.getTasksActivation(activationEntry.systemId, activationEntry.projectPath)[ FD ]
Line_2 $$ public void moveTasks(@NotNull Collection<TaskActivationEntry> entries, int increment) -->Line_4 $$ final ExternalProjectsStateProvider stateProvider = ExternalProjectsManager.getInstance(myProject).getStateProvider()[ CD ]
