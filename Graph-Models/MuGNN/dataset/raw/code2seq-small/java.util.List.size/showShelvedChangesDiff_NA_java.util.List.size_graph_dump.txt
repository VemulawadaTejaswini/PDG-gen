Line_15 $$ final List<MyDiffRequestProducer> diffRequestProducers = new ArrayList<MyDiffRequestProducer>()-->Line_17 $$ processBinaryFiles(project, binaryChanges, diffRequestProducers)[ FD ]
Line_2 $$ public static void showShelvedChangesDiff(final DataContext dc) -->Line_22 $$ selectedChanges.addAll(ContainerUtil.notNullize(ShelvedChangesViewManager.SHELVED_BINARY_FILE_KEY.getData(dc)))[ CD ]
Line_2 $$ public static void showShelvedChangesDiff(final DataContext dc) -->Line_31 $$ MyDiffRequestChain chain = new MyDiffRequestChain(diffRequestProducers, index)[ CD ]
Line_8 $$ ShelvedChangeList[] changeLists = ShelvedChangesViewManager.SHELVED_CHANGELIST_KEY.getData(dc)-->Line_10 $$ changeLists = ShelvedChangesViewManager.SHELVED_RECYCLED_CHANGELIST_KEY.getData(dc)[ FD ]
Line_3 $$ final Project project = CommonDataKeys.PROJECT.getData(dc)-->Line_4 $$ if (project == null)[ FD ]
Line_9 $$ if (changeLists == null)-->Line_10 $$ changeLists = ShelvedChangesViewManager.SHELVED_RECYCLED_CHANGELIST_KEY.getData(dc)[ CD ]
Line_2 $$ public static void showShelvedChangesDiff(final DataContext dc) -->Line_17 $$ processBinaryFiles(project, binaryChanges, diffRequestProducers)[ CD ]
Line_2 $$ public static void showShelvedChangesDiff(final DataContext dc) -->Line_22 $$ selectedChanges.addAll(ContainerUtil.notNullize(ShelvedChangesViewManager.SHELVED_BINARY_FILE_KEY.getData(dc)))[ FD ]
Line_2 $$ public static void showShelvedChangesDiff(final DataContext dc) -->Line_10 $$ changeLists = ShelvedChangesViewManager.SHELVED_RECYCLED_CHANGELIST_KEY.getData(dc)[ FD ]
Line_25 $$ MyDiffRequestProducer producer = diffRequestProducers.get(i)-->Line_26 $$ if (selectedChanges.contains(producer.getBinaryChange()) || selectedChanges.contains(producer.getTextChange())) [ FD ]
Line_11 $$ if (changeLists == null || changeLists.length != 1)-->Line_12 $$ return[ CD ]
Line_24 $$ for (int i = 0; i < diffRequestProducers.size(); i++) -->Line_25 $$ MyDiffRequestProducer producer = diffRequestProducers.get(i)[ FD ]
Line_26 $$ if (selectedChanges.contains(producer.getBinaryChange()) || selectedChanges.contains(producer.getTextChange())) -->Line_27 $$ index = i[ CD ]
Line_2 $$ public static void showShelvedChangesDiff(final DataContext dc) -->Line_6 $$ if (ChangeListManager.getInstance(project).isFreezedWithNotification(null))[ CD ]
Line_6 $$ if (ChangeListManager.getInstance(project).isFreezedWithNotification(null))-->Line_7 $$ return[ CD ]
Line_15 $$ final List<MyDiffRequestProducer> diffRequestProducers = new ArrayList<MyDiffRequestProducer>()-->Line_25 $$ MyDiffRequestProducer producer = diffRequestProducers.get(i)[ FD ]
Line_2 $$ public static void showShelvedChangesDiff(final DataContext dc) -->Line_21 $$ selectedChanges.addAll(ContainerUtil.notNullize(ShelvedChangesViewManager.SHELVED_CHANGE_KEY.getData(dc)))[ CD ]
Line_2 $$ public static void showShelvedChangesDiff(final DataContext dc) -->Line_16 $$ processTextChanges(project, textChanges, diffRequestProducers)[ CD ]
Line_2 $$ public static void showShelvedChangesDiff(final DataContext dc) -->Line_8 $$ ShelvedChangeList[] changeLists = ShelvedChangesViewManager.SHELVED_CHANGELIST_KEY.getData(dc)[ FD ]
Line_24 $$ for (int i = 0; i < diffRequestProducers.size(); i++) -->Line_26 $$ if (selectedChanges.contains(producer.getBinaryChange()) || selectedChanges.contains(producer.getTextChange())) [ CD ]
Line_2 $$ public static void showShelvedChangesDiff(final DataContext dc) -->Line_15 $$ final List<MyDiffRequestProducer> diffRequestProducers = new ArrayList<MyDiffRequestProducer>()[ CD ]
Line_3 $$ final Project project = CommonDataKeys.PROJECT.getData(dc)-->Line_32 $$ DiffManager.getInstance().showDiff(project, chain, DiffDialogHints.FRAME)[ FD ]
Line_2 $$ public static void showShelvedChangesDiff(final DataContext dc) -->Line_18 $$ Collections.sort(diffRequestProducers, ChangeDiffRequestComparator.getInstance())[ CD ]
Line_14 $$ final List<ShelvedBinaryFile> binaryChanges = changeLists[0].getBinaryFiles()-->Line_17 $$ processBinaryFiles(project, binaryChanges, diffRequestProducers)[ FD ]
Line_15 $$ final List<MyDiffRequestProducer> diffRequestProducers = new ArrayList<MyDiffRequestProducer>()-->Line_24 $$ for (int i = 0; i < diffRequestProducers.size(); i++) [ FD ]
Line_24 $$ for (int i = 0; i < diffRequestProducers.size(); i++) -->Line_27 $$ index = i[ FD ]
Line_23 $$ int index = 0-->Line_27 $$ index = i[ FD ]
Line_2 $$ public static void showShelvedChangesDiff(final DataContext dc) -->Line_4 $$ if (project == null)[ CD ]
Line_2 $$ public static void showShelvedChangesDiff(final DataContext dc) -->Line_14 $$ final List<ShelvedBinaryFile> binaryChanges = changeLists[0].getBinaryFiles()[ CD ]
Line_15 $$ final List<MyDiffRequestProducer> diffRequestProducers = new ArrayList<MyDiffRequestProducer>()-->Line_18 $$ Collections.sort(diffRequestProducers, ChangeDiffRequestComparator.getInstance())[ FD ]
Line_31 $$ MyDiffRequestChain chain = new MyDiffRequestChain(diffRequestProducers, index)-->Line_32 $$ DiffManager.getInstance().showDiff(project, chain, DiffDialogHints.FRAME)[ FD ]
Line_4 $$ if (project == null)-->Line_5 $$ return[ CD ]
Line_3 $$ final Project project = CommonDataKeys.PROJECT.getData(dc)-->Line_16 $$ processTextChanges(project, textChanges, diffRequestProducers)[ FD ]
Line_2 $$ public static void showShelvedChangesDiff(final DataContext dc) -->Line_3 $$ final Project project = CommonDataKeys.PROJECT.getData(dc)[ FD ]
Line_15 $$ final List<MyDiffRequestProducer> diffRequestProducers = new ArrayList<MyDiffRequestProducer>()-->Line_16 $$ processTextChanges(project, textChanges, diffRequestProducers)[ FD ]
Line_13 $$ final List<ShelvedChange> textChanges = changeLists[0].getChanges(project)-->Line_16 $$ processTextChanges(project, textChanges, diffRequestProducers)[ FD ]
Line_2 $$ public static void showShelvedChangesDiff(final DataContext dc) -->Line_32 $$ DiffManager.getInstance().showDiff(project, chain, DiffDialogHints.FRAME)[ CD ]
Line_2 $$ public static void showShelvedChangesDiff(final DataContext dc) -->Line_9 $$ if (changeLists == null)[ CD ]
Line_2 $$ public static void showShelvedChangesDiff(final DataContext dc) -->Line_13 $$ final List<ShelvedChange> textChanges = changeLists[0].getChanges(project)[ CD ]
Line_2 $$ public static void showShelvedChangesDiff(final DataContext dc) -->Line_11 $$ if (changeLists == null || changeLists.length != 1)[ CD ]
Line_24 $$ for (int i = 0; i < diffRequestProducers.size(); i++) -->Line_25 $$ MyDiffRequestProducer producer = diffRequestProducers.get(i)[ CD ]
Line_3 $$ final Project project = CommonDataKeys.PROJECT.getData(dc)-->Line_17 $$ processBinaryFiles(project, binaryChanges, diffRequestProducers)[ FD ]
Line_2 $$ public static void showShelvedChangesDiff(final DataContext dc) -->Line_23 $$ int index = 0[ CD ]
Line_3 $$ final Project project = CommonDataKeys.PROJECT.getData(dc)-->Line_6 $$ if (ChangeListManager.getInstance(project).isFreezedWithNotification(null))[ FD ]
Line_2 $$ public static void showShelvedChangesDiff(final DataContext dc) -->Line_24 $$ for (int i = 0; i < diffRequestProducers.size(); i++) [ CD ]
Line_3 $$ final Project project = CommonDataKeys.PROJECT.getData(dc)-->Line_13 $$ final List<ShelvedChange> textChanges = changeLists[0].getChanges(project)[ FD ]
Line_2 $$ public static void showShelvedChangesDiff(final DataContext dc) -->Line_8 $$ ShelvedChangeList[] changeLists = ShelvedChangesViewManager.SHELVED_CHANGELIST_KEY.getData(dc)[ CD ]
Line_2 $$ public static void showShelvedChangesDiff(final DataContext dc) -->Line_3 $$ final Project project = CommonDataKeys.PROJECT.getData(dc)[ CD ]
Line_8 $$ ShelvedChangeList[] changeLists = ShelvedChangesViewManager.SHELVED_CHANGELIST_KEY.getData(dc)-->Line_9 $$ if (changeLists == null)[ FD ]
Line_2 $$ public static void showShelvedChangesDiff(final DataContext dc) -->Line_21 $$ selectedChanges.addAll(ContainerUtil.notNullize(ShelvedChangesViewManager.SHELVED_CHANGE_KEY.getData(dc)))[ FD ]
