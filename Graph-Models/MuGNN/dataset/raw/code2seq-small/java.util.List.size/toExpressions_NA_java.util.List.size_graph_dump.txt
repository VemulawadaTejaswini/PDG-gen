Line_2 $$ public static List<Expression> toExpressions(List<?> objects, List<? extends Type> types) -->Line_9 $$ Type type = types.get(i)[ FD ]
Line_2 $$ public static List<Expression> toExpressions(List<?> objects, List<? extends Type> types) -->Line_3 $$ requireNonNull(objects, "objects is null")[ FD ]
Line_2 $$ public static List<Expression> toExpressions(List<?> objects, List<? extends Type> types) -->Line_4 $$ requireNonNull(types, "types is null")[ FD ]
Line_2 $$ public static List<Expression> toExpressions(List<?> objects, List<? extends Type> types) -->Line_7 $$ for (int i = 0; i < objects.size(); i++) [ FD ]
Line_2 $$ public static List<Expression> toExpressions(List<?> objects, List<? extends Type> types) -->Line_6 $$ ImmutableList.Builder<Expression> expressions = ImmutableList.builder()[ CD ]
Line_2 $$ public static List<Expression> toExpressions(List<?> objects, List<? extends Type> types) -->Line_7 $$ for (int i = 0; i < objects.size(); i++) [ CD ]
Line_2 $$ public static List<Expression> toExpressions(List<?> objects, List<? extends Type> types) -->Line_8 $$ Object object = objects.get(i)[ FD ]
Line_8 $$ Object object = objects.get(i)-->Line_10 $$ expressions.add(toExpression(object, type))[ FD ]
Line_7 $$ for (int i = 0; i < objects.size(); i++) -->Line_8 $$ Object object = objects.get(i)[ FD ]
Line_2 $$ public static List<Expression> toExpressions(List<?> objects, List<? extends Type> types) -->Line_5 $$ checkArgument(objects.size() == types.size(), "objects and types do not have the same size")[ FD ]
Line_6 $$ ImmutableList.Builder<Expression> expressions = ImmutableList.builder()-->Line_10 $$ expressions.add(toExpression(object, type))[ FD ]
Line_6 $$ ImmutableList.Builder<Expression> expressions = ImmutableList.builder()-->Line_12 $$ return expressions.build()[ FD ]
Line_7 $$ for (int i = 0; i < objects.size(); i++) -->Line_10 $$ expressions.add(toExpression(object, type))[ CD ]
Line_2 $$ public static List<Expression> toExpressions(List<?> objects, List<? extends Type> types) -->Line_3 $$ requireNonNull(objects, "objects is null")[ CD ]
Line_7 $$ for (int i = 0; i < objects.size(); i++) -->Line_9 $$ Type type = types.get(i)[ CD ]
Line_2 $$ public static List<Expression> toExpressions(List<?> objects, List<? extends Type> types) -->Line_12 $$ return expressions.build()[ CD ]
Line_9 $$ Type type = types.get(i)-->Line_10 $$ expressions.add(toExpression(object, type))[ FD ]
Line_2 $$ public static List<Expression> toExpressions(List<?> objects, List<? extends Type> types) -->Line_4 $$ requireNonNull(types, "types is null")[ CD ]
Line_7 $$ for (int i = 0; i < objects.size(); i++) -->Line_9 $$ Type type = types.get(i)[ FD ]
Line_7 $$ for (int i = 0; i < objects.size(); i++) -->Line_8 $$ Object object = objects.get(i)[ CD ]
Line_2 $$ public static List<Expression> toExpressions(List<?> objects, List<? extends Type> types) -->Line_5 $$ checkArgument(objects.size() == types.size(), "objects and types do not have the same size")[ CD ]
