Line_2 $$ public void getHeadersWithEmptyContentTypeAndEncoding() throws Exception -->Line_14 $$ assertEquals("Invalid header values returned", 2, headerValues.size())[ CD ]
Line_2 $$ public void getHeadersWithEmptyContentTypeAndEncoding() throws Exception -->Line_4 $$ String headerValue1 = "value1"[ CD ]
Line_2 $$ public void getHeadersWithEmptyContentTypeAndEncoding() throws Exception -->Line_15 $$ assertTrue("Invalid header values returned", headerValues.contains(headerValue1))[ CD ]
Line_10 $$ HttpHeaders headers = request.getHeaders()-->Line_17 $$ assertNull(headers.getContentType())[ FD ]
Line_5 $$ String headerValue2 = "value2"-->Line_16 $$ assertTrue("Invalid header values returned", headerValues.contains(headerValue2))[ FD ]
Line_13 $$ List<String> headerValues = headers.get(headerName)-->Line_15 $$ assertTrue("Invalid header values returned", headerValues.contains(headerValue1))[ FD ]
Line_10 $$ HttpHeaders headers = request.getHeaders()-->Line_12 $$ assertTrue("Invalid headers returned", headers.containsKey(headerName))[ FD ]
Line_2 $$ public void getHeadersWithEmptyContentTypeAndEncoding() throws Exception -->Line_9 $$ mockRequest.setCharacterEncoding("")[ CD ]
Line_13 $$ List<String> headerValues = headers.get(headerName)-->Line_16 $$ assertTrue("Invalid header values returned", headerValues.contains(headerValue2))[ FD ]
Line_3 $$ String headerName = "MyHeader"-->Line_7 $$ mockRequest.addHeader(headerName, headerValue2)[ FD ]
Line_2 $$ public void getHeadersWithEmptyContentTypeAndEncoding() throws Exception -->Line_12 $$ assertTrue("Invalid headers returned", headers.containsKey(headerName))[ CD ]
Line_10 $$ HttpHeaders headers = request.getHeaders()-->Line_13 $$ List<String> headerValues = headers.get(headerName)[ FD ]
Line_2 $$ public void getHeadersWithEmptyContentTypeAndEncoding() throws Exception -->Line_17 $$ assertNull(headers.getContentType())[ CD ]
Line_5 $$ String headerValue2 = "value2"-->Line_7 $$ mockRequest.addHeader(headerName, headerValue2)[ FD ]
Line_4 $$ String headerValue1 = "value1"-->Line_15 $$ assertTrue("Invalid header values returned", headerValues.contains(headerValue1))[ FD ]
Line_10 $$ HttpHeaders headers = request.getHeaders()-->Line_11 $$ assertNotNull("No HttpHeaders returned", headers)[ FD ]
Line_2 $$ public void getHeadersWithEmptyContentTypeAndEncoding() throws Exception -->Line_7 $$ mockRequest.addHeader(headerName, headerValue2)[ CD ]
Line_3 $$ String headerName = "MyHeader"-->Line_6 $$ mockRequest.addHeader(headerName, headerValue1)[ FD ]
Line_13 $$ List<String> headerValues = headers.get(headerName)-->Line_14 $$ assertEquals("Invalid header values returned", 2, headerValues.size())[ FD ]
Line_4 $$ String headerValue1 = "value1"-->Line_6 $$ mockRequest.addHeader(headerName, headerValue1)[ FD ]
Line_3 $$ String headerName = "MyHeader"-->Line_12 $$ assertTrue("Invalid headers returned", headers.containsKey(headerName))[ FD ]
Line_2 $$ public void getHeadersWithEmptyContentTypeAndEncoding() throws Exception -->Line_16 $$ assertTrue("Invalid header values returned", headerValues.contains(headerValue2))[ CD ]
Line_2 $$ public void getHeadersWithEmptyContentTypeAndEncoding() throws Exception -->Line_8 $$ mockRequest.setContentType("")[ CD ]
Line_2 $$ public void getHeadersWithEmptyContentTypeAndEncoding() throws Exception -->Line_5 $$ String headerValue2 = "value2"[ CD ]
Line_2 $$ public void getHeadersWithEmptyContentTypeAndEncoding() throws Exception -->Line_3 $$ String headerName = "MyHeader"[ CD ]
Line_2 $$ public void getHeadersWithEmptyContentTypeAndEncoding() throws Exception -->Line_6 $$ mockRequest.addHeader(headerName, headerValue1)[ CD ]
Line_2 $$ public void getHeadersWithEmptyContentTypeAndEncoding() throws Exception -->Line_13 $$ List<String> headerValues = headers.get(headerName)[ CD ]
Line_2 $$ public void getHeadersWithEmptyContentTypeAndEncoding() throws Exception -->Line_10 $$ HttpHeaders headers = request.getHeaders()[ CD ]
Line_2 $$ public void getHeadersWithEmptyContentTypeAndEncoding() throws Exception -->Line_11 $$ assertNotNull("No HttpHeaders returned", headers)[ CD ]
Line_3 $$ String headerName = "MyHeader"-->Line_13 $$ List<String> headerValues = headers.get(headerName)[ FD ]
