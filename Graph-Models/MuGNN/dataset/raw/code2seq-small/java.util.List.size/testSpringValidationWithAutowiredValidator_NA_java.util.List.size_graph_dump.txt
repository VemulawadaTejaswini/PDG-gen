Line_2 $$ public void testSpringValidationWithAutowiredValidator() throws Exception -->Line_6 $$ person.expectsAutowiredValidator = true[ CD ]
Line_9 $$ BeanPropertyBindingResult result = new BeanPropertyBindingResult(person, "person")-->Line_11 $$ assertEquals(1, result.getErrorCount())[ FD ]
Line_2 $$ public void testSpringValidationWithAutowiredValidator() throws Exception -->Line_9 $$ BeanPropertyBindingResult result = new BeanPropertyBindingResult(person, "person")[ CD ]
Line_2 $$ public void testSpringValidationWithAutowiredValidator() throws Exception -->Line_4 $$ LocalValidatorFactoryBean validator = ctx.getBean(LocalValidatorFactoryBean.class)[ CD ]
Line_5 $$ ValidPerson person = new ValidPerson()-->Line_8 $$ person.getAddress().setStreet("Juergen's Street")[ FD ]
Line_13 $$ List<String> errorCodes = Arrays.asList(globalError.getCodes())-->Line_14 $$ assertEquals(2, errorCodes.size())[ FD ]
Line_13 $$ List<String> errorCodes = Arrays.asList(globalError.getCodes())-->Line_15 $$ assertTrue(errorCodes.contains("NameAddressValid.person"))[ FD ]
Line_2 $$ public void testSpringValidationWithAutowiredValidator() throws Exception -->Line_17 $$ ctx.close()[ CD ]
Line_12 $$ ObjectError globalError = result.getGlobalError()-->Line_13 $$ List<String> errorCodes = Arrays.asList(globalError.getCodes())[ FD ]
Line_9 $$ BeanPropertyBindingResult result = new BeanPropertyBindingResult(person, "person")-->Line_10 $$ validator.validate(person, result)[ FD ]
Line_2 $$ public void testSpringValidationWithAutowiredValidator() throws Exception -->Line_3 $$ ConfigurableApplicationContext ctx = new AnnotationConfigApplicationContext(LocalValidatorFactoryBean.class)[ CD ]
Line_2 $$ public void testSpringValidationWithAutowiredValidator() throws Exception -->Line_14 $$ assertEquals(2, errorCodes.size())[ CD ]
Line_3 $$ ConfigurableApplicationContext ctx = new AnnotationConfigApplicationContext(LocalValidatorFactoryBean.class)-->Line_17 $$ ctx.close()[ FD ]
Line_2 $$ public void testSpringValidationWithAutowiredValidator() throws Exception -->Line_7 $$ person.setName("Juergen")[ CD ]
Line_5 $$ ValidPerson person = new ValidPerson()-->Line_10 $$ validator.validate(person, result)[ FD ]
Line_2 $$ public void testSpringValidationWithAutowiredValidator() throws Exception -->Line_12 $$ ObjectError globalError = result.getGlobalError()[ CD ]
Line_2 $$ public void testSpringValidationWithAutowiredValidator() throws Exception -->Line_16 $$ assertTrue(errorCodes.contains("NameAddressValid"))[ CD ]
Line_5 $$ ValidPerson person = new ValidPerson()-->Line_7 $$ person.setName("Juergen")[ FD ]
Line_2 $$ public void testSpringValidationWithAutowiredValidator() throws Exception -->Line_5 $$ ValidPerson person = new ValidPerson()[ CD ]
Line_2 $$ public void testSpringValidationWithAutowiredValidator() throws Exception -->Line_8 $$ person.getAddress().setStreet("Juergen's Street")[ CD ]
Line_13 $$ List<String> errorCodes = Arrays.asList(globalError.getCodes())-->Line_16 $$ assertTrue(errorCodes.contains("NameAddressValid"))[ FD ]
Line_9 $$ BeanPropertyBindingResult result = new BeanPropertyBindingResult(person, "person")-->Line_12 $$ ObjectError globalError = result.getGlobalError()[ FD ]
Line_2 $$ public void testSpringValidationWithAutowiredValidator() throws Exception -->Line_10 $$ validator.validate(person, result)[ CD ]
Line_2 $$ public void testSpringValidationWithAutowiredValidator() throws Exception -->Line_13 $$ List<String> errorCodes = Arrays.asList(globalError.getCodes())[ CD ]
Line_4 $$ LocalValidatorFactoryBean validator = ctx.getBean(LocalValidatorFactoryBean.class)-->Line_10 $$ validator.validate(person, result)[ FD ]
Line_2 $$ public void testSpringValidationWithAutowiredValidator() throws Exception -->Line_11 $$ assertEquals(1, result.getErrorCount())[ CD ]
Line_3 $$ ConfigurableApplicationContext ctx = new AnnotationConfigApplicationContext(LocalValidatorFactoryBean.class)-->Line_4 $$ LocalValidatorFactoryBean validator = ctx.getBean(LocalValidatorFactoryBean.class)[ FD ]
Line_2 $$ public void testSpringValidationWithAutowiredValidator() throws Exception -->Line_15 $$ assertTrue(errorCodes.contains("NameAddressValid.person"))[ CD ]
