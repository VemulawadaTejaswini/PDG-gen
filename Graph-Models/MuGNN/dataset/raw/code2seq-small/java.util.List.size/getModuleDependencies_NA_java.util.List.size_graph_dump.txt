Line_4 $$ List<Module> result = new ArrayList<Module>(entries.length)-->Line_16 $$ return result.isEmpty() ? Module.EMPTY_ARRAY : ContainerUtil.toArray(result, new Module[result.size()])[ FD ]
Line_6 $$ if (entry instanceof ModuleOrderEntry) -->Line_7 $$ DependencyScope scope = ((ModuleOrderEntry) entry).getScope()[ CD ]
Line_2 $$ public Module[] getModuleDependencies(boolean includeTests) -->Line_4 $$ List<Module> result = new ArrayList<Module>(entries.length)[ CD ]
Line_2 $$ public Module[] getModuleDependencies(boolean includeTests) -->Line_16 $$ return result.isEmpty() ? Module.EMPTY_ARRAY : ContainerUtil.toArray(result, new Module[result.size()])[ CD ]
Line_6 $$ if (entry instanceof ModuleOrderEntry) -->Line_8 $$ if (includeTests || scope.isForProductionCompile() || scope.isForProductionRuntime()) [ CD ]
Line_4 $$ List<Module> result = new ArrayList<Module>(entries.length)-->Line_11 $$ result.add(module)[ FD ]
Line_8 $$ if (includeTests || scope.isForProductionCompile() || scope.isForProductionRuntime()) -->Line_10 $$ if (module != null) [ CD ]
Line_2 $$ public Module[] getModuleDependencies(boolean includeTests) -->Line_3 $$ OrderEntry[] entries = getOrderEntries()[ CD ]
Line_7 $$ DependencyScope scope = ((ModuleOrderEntry) entry).getScope()-->Line_8 $$ if (includeTests || scope.isForProductionCompile() || scope.isForProductionRuntime()) [ FD ]
Line_8 $$ if (includeTests || scope.isForProductionCompile() || scope.isForProductionRuntime()) -->Line_9 $$ Module module = ((ModuleOrderEntry) entry).getModule()[ CD ]
Line_9 $$ Module module = ((ModuleOrderEntry) entry).getModule()-->Line_11 $$ result.add(module)[ FD ]
Line_10 $$ if (module != null) -->Line_11 $$ result.add(module)[ CD ]
Line_5 $$ for (OrderEntry entry : entries) -->Line_6 $$ if (entry instanceof ModuleOrderEntry) [ FD ]
Line_9 $$ Module module = ((ModuleOrderEntry) entry).getModule()-->Line_10 $$ if (module != null) [ FD ]
