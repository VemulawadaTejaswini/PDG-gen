Line_39 $$ quotes = Pair.create("\"", "\"")-->Line_43 $$ stringLiteral.append(quotes.getSecond())[ FD ]
Line_18 $$ if (expression instanceof PyStringLiteralExpression) -->Line_19 $$ final PyType type = context.getType(expression)[ CD ]
Line_2 $$ public void invoke(@NotNull Project project, Editor editor, PsiFile file) throws IncorrectOperationException -->Line_6 $$ final LanguageLevel languageLevel = LanguageLevel.forElement(element)[ CD ]
Line_3 $$ PsiElement element = PsiTreeUtil.getTopmostParentOfType(file.findElementAt(editor.getCaretModel().getOffset()), PyBinaryExpression.class)-->Line_4 $$ if (element == null)[ FD ]
Line_21 $$ isUnicode = true-->Line_41 $$ if (isUnicode && !quotes.getFirst().toLowerCase().contains("u"))[ FD ]
Line_39 $$ quotes = Pair.create("\"", "\"")-->Line_40 $$ stringLiteral.insert(0, quotes.getFirst())[ FD ]
Line_18 $$ if (expression instanceof PyStringLiteralExpression) -->Line_31 $$ stringLiteral.append(escaper.fun(value))[ CD ]
Line_11 $$ Pair<String, String> quotes = Pair.create("\"", "\"")-->Line_40 $$ stringLiteral.insert(0, quotes.getFirst())[ FD ]
Line_11 $$ Pair<String, String> quotes = Pair.create("\"", "\"")-->Line_24 $$ quotes = PythonStringUtil.getQuotes(expression.getText())[ FD ]
Line_12 $$ boolean quotesDetected = false-->Line_23 $$ if (!quotesDetected) [ FD ]
Line_2 $$ public void invoke(@NotNull Project project, Editor editor, PsiFile file) throws IncorrectOperationException -->Line_4 $$ if (element == null)[ CD ]
Line_23 $$ if (!quotesDetected) -->Line_24 $$ quotes = PythonStringUtil.getQuotes(expression.getText())[ CD ]
Line_23 $$ if (!quotesDetected) -->Line_25 $$ quotesDetected = true[ CD ]
Line_38 $$ if (quotes == null)-->Line_39 $$ quotes = Pair.create("\"", "\"")[ CD ]
Line_2 $$ public void invoke(@NotNull Project project, Editor editor, PsiFile file) throws IncorrectOperationException -->Line_11 $$ Pair<String, String> quotes = Pair.create("\"", "\"")[ CD ]
Line_10 $$ List<String> parameters = new ArrayList<String>()-->Line_47 $$ stringLiteral.append(".format(").append(StringUtil.join(parameters, ",")).append(")")[ FD ]
Line_7 $$ final boolean useFormatMethod = languageLevel.isAtLeast(LanguageLevel.PYTHON27)-->Line_33 $$ addParamToString(stringLiteral, paramCount, useFormatMethod)[ FD ]
Line_10 $$ List<String> parameters = new ArrayList<String>()-->Line_45 $$ if (!parameters.isEmpty()) [ FD ]
Line_9 $$ StringBuilder stringLiteral = new StringBuilder()-->Line_52 $$ final PyExpression expression = elementGenerator.createFromText(LanguageLevel.getDefault(), PyExpressionStatement.class, stringLiteral.toString()).getExpression()[ FD ]
Line_2 $$ public void invoke(@NotNull Project project, Editor editor, PsiFile file) throws IncorrectOperationException -->Line_41 $$ if (isUnicode && !quotes.getFirst().toLowerCase().contains("u"))[ CD ]
Line_2 $$ public void invoke(@NotNull Project project, Editor editor, PsiFile file) throws IncorrectOperationException -->Line_9 $$ StringBuilder stringLiteral = new StringBuilder()[ CD ]
Line_18 $$ if (expression instanceof PyStringLiteralExpression) -->Line_28 $$ if (!useFormatMethod) [ CD ]
Line_11 $$ Pair<String, String> quotes = Pair.create("\"", "\"")-->Line_41 $$ if (isUnicode && !quotes.getFirst().toLowerCase().contains("u"))[ FD ]
Line_9 $$ StringBuilder stringLiteral = new StringBuilder()-->Line_42 $$ stringLiteral.insert(0, "u")[ FD ]
Line_24 $$ quotes = PythonStringUtil.getQuotes(expression.getText())-->Line_39 $$ quotes = Pair.create("\"", "\"")[ FD ]
Line_2 $$ public void invoke(@NotNull Project project, Editor editor, PsiFile file) throws IncorrectOperationException -->Line_45 $$ if (!parameters.isEmpty()) [ CD ]
Line_17 $$ for (PyExpression expression : getSimpleExpressions((PyBinaryExpression) element)) -->Line_34 $$ parameters.add(expression.getText())[ FD ]
Line_17 $$ for (PyExpression expression : getSimpleExpressions((PyBinaryExpression) element)) -->Line_24 $$ quotes = PythonStringUtil.getQuotes(expression.getText())[ FD ]
Line_44 $$ PyElementGenerator elementGenerator = PyElementGenerator.getInstance(project)-->Line_52 $$ final PyExpression expression = elementGenerator.createFromText(LanguageLevel.getDefault(), PyExpressionStatement.class, stringLiteral.toString()).getExpression()[ FD ]
Line_10 $$ List<String> parameters = new ArrayList<String>()-->Line_34 $$ parameters.add(expression.getText())[ FD ]
Line_14 $$ int paramCount = 0-->Line_35 $$ ++paramCount[ FD ]
Line_2 $$ public void invoke(@NotNull Project project, Editor editor, PsiFile file) throws IncorrectOperationException -->Line_14 $$ int paramCount = 0[ CD ]
Line_7 $$ final boolean useFormatMethod = languageLevel.isAtLeast(LanguageLevel.PYTHON27)-->Line_28 $$ if (!useFormatMethod) [ FD ]
Line_16 $$ final PyClassTypeImpl unicodeType = PyBuiltinCache.getInstance(element).getObjectType("unicode")-->Line_20 $$ if (type != null && type.equals(unicodeType)) [ FD ]
Line_2 $$ public void invoke(@NotNull Project project, Editor editor, PsiFile file) throws IncorrectOperationException -->Line_43 $$ stringLiteral.append(quotes.getSecond())[ CD ]
Line_3 $$ PsiElement element = PsiTreeUtil.getTopmostParentOfType(file.findElementAt(editor.getCaretModel().getOffset()), PyBinaryExpression.class)-->Line_53 $$ element.replace(expression)[ FD ]
Line_6 $$ final LanguageLevel languageLevel = LanguageLevel.forElement(element)-->Line_7 $$ final boolean useFormatMethod = languageLevel.isAtLeast(LanguageLevel.PYTHON27)[ FD ]
Line_2 $$ public void invoke(@NotNull Project project, Editor editor, PsiFile file) throws IncorrectOperationException -->Line_13 $$ final TypeEvalContext context = TypeEvalContext.userInitiated(file.getProject(), file)[ FD ]
Line_2 $$ public void invoke(@NotNull Project project, Editor editor, PsiFile file) throws IncorrectOperationException -->Line_7 $$ final boolean useFormatMethod = languageLevel.isAtLeast(LanguageLevel.PYTHON27)[ CD ]
Line_15 $$ boolean isUnicode = false-->Line_41 $$ if (isUnicode && !quotes.getFirst().toLowerCase().contains("u"))[ FD ]
Line_46 $$ if (useFormatMethod) -->Line_47 $$ stringLiteral.append(".format(").append(StringUtil.join(parameters, ",")).append(")")[ CD ]
Line_2 $$ public void invoke(@NotNull Project project, Editor editor, PsiFile file) throws IncorrectOperationException -->Line_44 $$ PyElementGenerator elementGenerator = PyElementGenerator.getInstance(project)[ FD ]
Line_8 $$ NotNullFunction<String, String> escaper = StringUtil.escaper(false, "\"\'\\")-->Line_31 $$ stringLiteral.append(escaper.fun(value))[ FD ]
Line_11 $$ Pair<String, String> quotes = Pair.create("\"", "\"")-->Line_39 $$ quotes = Pair.create("\"", "\"")[ FD ]
Line_18 $$ if (expression instanceof PyStringLiteralExpression) -->Line_27 $$ String value = ((PyStringLiteralExpression) expression).getStringValue()[ CD ]
Line_9 $$ StringBuilder stringLiteral = new StringBuilder()-->Line_31 $$ stringLiteral.append(escaper.fun(value))[ FD ]
Line_2 $$ public void invoke(@NotNull Project project, Editor editor, PsiFile file) throws IncorrectOperationException -->Line_40 $$ stringLiteral.insert(0, quotes.getFirst())[ CD ]
Line_3 $$ PsiElement element = PsiTreeUtil.getTopmostParentOfType(file.findElementAt(editor.getCaretModel().getOffset()), PyBinaryExpression.class)-->Line_16 $$ final PyClassTypeImpl unicodeType = PyBuiltinCache.getInstance(element).getObjectType("unicode")[ FD ]
Line_24 $$ quotes = PythonStringUtil.getQuotes(expression.getText())-->Line_40 $$ stringLiteral.insert(0, quotes.getFirst())[ FD ]
Line_17 $$ for (PyExpression expression : getSimpleExpressions((PyBinaryExpression) element)) -->Line_18 $$ if (expression instanceof PyStringLiteralExpression) [ FD ]
Line_2 $$ public void invoke(@NotNull Project project, Editor editor, PsiFile file) throws IncorrectOperationException -->Line_38 $$ if (quotes == null)[ CD ]
Line_9 $$ StringBuilder stringLiteral = new StringBuilder()-->Line_50 $$ stringLiteral.append(" % ").append(paramString)[ FD ]
Line_20 $$ if (type != null && type.equals(unicodeType)) -->Line_21 $$ isUnicode = true[ CD ]
Line_24 $$ quotes = PythonStringUtil.getQuotes(expression.getText())-->Line_41 $$ if (isUnicode && !quotes.getFirst().toLowerCase().contains("u"))[ FD ]
Line_4 $$ if (element == null)-->Line_5 $$ return[ CD ]
Line_2 $$ public void invoke(@NotNull Project project, Editor editor, PsiFile file) throws IncorrectOperationException -->Line_3 $$ PsiElement element = PsiTreeUtil.getTopmostParentOfType(file.findElementAt(editor.getCaretModel().getOffset()), PyBinaryExpression.class)[ FD ]
Line_29 $$ value = value.replace("%", "%%")-->Line_31 $$ stringLiteral.append(escaper.fun(value))[ FD ]
Line_27 $$ String value = ((PyStringLiteralExpression) expression).getStringValue()-->Line_29 $$ value = value.replace("%", "%%")[ FD ]
Line_9 $$ StringBuilder stringLiteral = new StringBuilder()-->Line_47 $$ stringLiteral.append(".format(").append(StringUtil.join(parameters, ",")).append(")")[ FD ]
Line_18 $$ if (expression instanceof PyStringLiteralExpression) -->Line_33 $$ addParamToString(stringLiteral, paramCount, useFormatMethod)[ CD ]
Line_2 $$ public void invoke(@NotNull Project project, Editor editor, PsiFile file) throws IncorrectOperationException -->Line_13 $$ final TypeEvalContext context = TypeEvalContext.userInitiated(file.getProject(), file)[ CD ]
Line_44 $$ PyElementGenerator elementGenerator = PyElementGenerator.getInstance(project)-->Line_55 $$ PyStringLiteralExpression stringLiteralExpression = elementGenerator.createStringLiteralAlreadyEscaped(stringLiteral.toString())[ FD ]
Line_14 $$ int paramCount = 0-->Line_33 $$ addParamToString(stringLiteral, paramCount, useFormatMethod)[ FD ]
Line_2 $$ public void invoke(@NotNull Project project, Editor editor, PsiFile file) throws IncorrectOperationException -->Line_16 $$ final PyClassTypeImpl unicodeType = PyBuiltinCache.getInstance(element).getObjectType("unicode")[ CD ]
Line_11 $$ Pair<String, String> quotes = Pair.create("\"", "\"")-->Line_38 $$ if (quotes == null)[ FD ]
Line_2 $$ public void invoke(@NotNull Project project, Editor editor, PsiFile file) throws IncorrectOperationException -->Line_44 $$ PyElementGenerator elementGenerator = PyElementGenerator.getInstance(project)[ CD ]
Line_13 $$ final TypeEvalContext context = TypeEvalContext.userInitiated(file.getProject(), file)-->Line_19 $$ final PyType type = context.getType(expression)[ FD ]
Line_12 $$ boolean quotesDetected = false-->Line_25 $$ quotesDetected = true[ FD ]
Line_45 $$ if (!parameters.isEmpty()) -->Line_56 $$ element.replace(stringLiteralExpression)[ CD ]
Line_2 $$ public void invoke(@NotNull Project project, Editor editor, PsiFile file) throws IncorrectOperationException -->Line_10 $$ List<String> parameters = new ArrayList<String>()[ CD ]
Line_19 $$ final PyType type = context.getType(expression)-->Line_20 $$ if (type != null && type.equals(unicodeType)) [ FD ]
Line_45 $$ if (!parameters.isEmpty()) -->Line_53 $$ element.replace(expression)[ CD ]
Line_3 $$ PsiElement element = PsiTreeUtil.getTopmostParentOfType(file.findElementAt(editor.getCaretModel().getOffset()), PyBinaryExpression.class)-->Line_6 $$ final LanguageLevel languageLevel = LanguageLevel.forElement(element)[ FD ]
Line_45 $$ if (!parameters.isEmpty()) -->Line_46 $$ if (useFormatMethod) [ CD ]
Line_27 $$ String value = ((PyStringLiteralExpression) expression).getStringValue()-->Line_31 $$ stringLiteral.append(escaper.fun(value))[ FD ]
Line_2 $$ public void invoke(@NotNull Project project, Editor editor, PsiFile file) throws IncorrectOperationException -->Line_8 $$ NotNullFunction<String, String> escaper = StringUtil.escaper(false, "\"\'\\")[ CD ]
Line_10 $$ List<String> parameters = new ArrayList<String>()-->Line_49 $$ final String paramString = parameters.size() > 1 ? "(" + StringUtil.join(parameters, ",") + ")" : StringUtil.join(parameters, ",")[ FD ]
Line_9 $$ StringBuilder stringLiteral = new StringBuilder()-->Line_33 $$ addParamToString(stringLiteral, paramCount, useFormatMethod)[ FD ]
Line_46 $$ if (useFormatMethod) -->Line_50 $$ stringLiteral.append(" % ").append(paramString)[ CD ]
Line_24 $$ quotes = PythonStringUtil.getQuotes(expression.getText())-->Line_38 $$ if (quotes == null)[ FD ]
Line_17 $$ for (PyExpression expression : getSimpleExpressions((PyBinaryExpression) element)) -->Line_53 $$ element.replace(expression)[ FD ]
Line_2 $$ public void invoke(@NotNull Project project, Editor editor, PsiFile file) throws IncorrectOperationException -->Line_12 $$ boolean quotesDetected = false[ CD ]
Line_2 $$ public void invoke(@NotNull Project project, Editor editor, PsiFile file) throws IncorrectOperationException -->Line_15 $$ boolean isUnicode = false[ CD ]
Line_18 $$ if (expression instanceof PyStringLiteralExpression) -->Line_23 $$ if (!quotesDetected) [ CD ]
Line_28 $$ if (!useFormatMethod) -->Line_29 $$ value = value.replace("%", "%%")[ CD ]
Line_24 $$ quotes = PythonStringUtil.getQuotes(expression.getText())-->Line_43 $$ stringLiteral.append(quotes.getSecond())[ FD ]
Line_39 $$ quotes = Pair.create("\"", "\"")-->Line_41 $$ if (isUnicode && !quotes.getFirst().toLowerCase().contains("u"))[ FD ]
Line_18 $$ if (expression instanceof PyStringLiteralExpression) -->Line_34 $$ parameters.add(expression.getText())[ CD ]
Line_3 $$ PsiElement element = PsiTreeUtil.getTopmostParentOfType(file.findElementAt(editor.getCaretModel().getOffset()), PyBinaryExpression.class)-->Line_56 $$ element.replace(stringLiteralExpression)[ FD ]
Line_9 $$ StringBuilder stringLiteral = new StringBuilder()-->Line_40 $$ stringLiteral.insert(0, quotes.getFirst())[ FD ]
Line_18 $$ if (expression instanceof PyStringLiteralExpression) -->Line_35 $$ ++paramCount[ CD ]
Line_2 $$ public void invoke(@NotNull Project project, Editor editor, PsiFile file) throws IncorrectOperationException -->Line_3 $$ PsiElement element = PsiTreeUtil.getTopmostParentOfType(file.findElementAt(editor.getCaretModel().getOffset()), PyBinaryExpression.class)[ CD ]
Line_45 $$ if (!parameters.isEmpty()) -->Line_52 $$ final PyExpression expression = elementGenerator.createFromText(LanguageLevel.getDefault(), PyExpressionStatement.class, stringLiteral.toString()).getExpression()[ CD ]
Line_15 $$ boolean isUnicode = false-->Line_21 $$ isUnicode = true[ FD ]
Line_45 $$ if (!parameters.isEmpty()) -->Line_55 $$ PyStringLiteralExpression stringLiteralExpression = elementGenerator.createStringLiteralAlreadyEscaped(stringLiteral.toString())[ CD ]
Line_55 $$ PyStringLiteralExpression stringLiteralExpression = elementGenerator.createStringLiteralAlreadyEscaped(stringLiteral.toString())-->Line_56 $$ element.replace(stringLiteralExpression)[ FD ]
Line_18 $$ if (expression instanceof PyStringLiteralExpression) -->Line_20 $$ if (type != null && type.equals(unicodeType)) [ CD ]
Line_46 $$ if (useFormatMethod) -->Line_49 $$ final String paramString = parameters.size() > 1 ? "(" + StringUtil.join(parameters, ",") + ")" : StringUtil.join(parameters, ",")[ CD ]
Line_9 $$ StringBuilder stringLiteral = new StringBuilder()-->Line_43 $$ stringLiteral.append(quotes.getSecond())[ FD ]
Line_9 $$ StringBuilder stringLiteral = new StringBuilder()-->Line_55 $$ PyStringLiteralExpression stringLiteralExpression = elementGenerator.createStringLiteralAlreadyEscaped(stringLiteral.toString())[ FD ]
Line_17 $$ for (PyExpression expression : getSimpleExpressions((PyBinaryExpression) element)) -->Line_19 $$ final PyType type = context.getType(expression)[ FD ]
Line_49 $$ final String paramString = parameters.size() > 1 ? "(" + StringUtil.join(parameters, ",") + ")" : StringUtil.join(parameters, ",")-->Line_50 $$ stringLiteral.append(" % ").append(paramString)[ FD ]
Line_41 $$ if (isUnicode && !quotes.getFirst().toLowerCase().contains("u"))-->Line_42 $$ stringLiteral.insert(0, "u")[ CD ]
Line_11 $$ Pair<String, String> quotes = Pair.create("\"", "\"")-->Line_43 $$ stringLiteral.append(quotes.getSecond())[ FD ]
