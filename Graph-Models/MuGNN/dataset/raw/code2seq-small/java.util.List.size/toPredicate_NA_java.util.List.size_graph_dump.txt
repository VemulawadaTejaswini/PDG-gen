Line_61 $$ if (singleValues.size() == 1) -->Line_64 $$ if (singleValues.size() > 1) [ CD ]
Line_79 $$ for (Object value : discreteValues.getValues()) -->Line_80 $$ bindValues.add(ValueBuffer.create(columnIndex, type, getBindValue(columnIndex, uuidColumnIndexes, value)))[ FD ]
Line_12 $$ List<Object> singleValues = new ArrayList()-->Line_63 $$ bindValues.add(ValueBuffer.create(columnIndex, type, getBindValue(columnIndex, uuidColumnIndexes, getOnlyElement(singleValues))))[ FD ]
Line_2 $$ private static String toPredicate(int columnIndex, String columnName, Type type, Domain domain, Set<Integer> uuidColumnIndexes, List<ValueBuffer> bindValues) -->Line_9 $$ return domain.getValues().getValuesProcessor().transform( ranges -> [ FD ]
Line_14 $$ for (Range range : ranges.getOrderedRanges()) -->Line_18 $$ singleValues.add(range.getLow().getValue())[ FD ]
Line_20 $$ List<String> rangeConjuncts = new ArrayList()-->Line_29 $$ rangeConjuncts.add(toBindPredicate(columnName, ">="))[ FD ]
Line_14 $$ for (Range range : ranges.getOrderedRanges()) -->Line_22 $$ Object bindValue = getBindValue(columnIndex, uuidColumnIndexes, range.getLow().getValue())[ FD ]
Line_17 $$ if (range.isSingleValue()) -->Line_56 $$ checkState(!rangeConjuncts.isEmpty())[ CD ]
Line_2 $$ private static String toPredicate(int columnIndex, String columnName, Type type, Domain domain, Set<Integer> uuidColumnIndexes, List<ValueBuffer> bindValues) -->Line_72 $$ if (domain.isNullAllowed()) [ FD ]
Line_11 $$ List<String> disjuncts = new ArrayList()-->Line_75 $$ return "(" + Joiner.on(" OR ").join(disjuncts) + ")"[ FD ]
Line_2 $$ private static String toPredicate(int columnIndex, String columnName, Type type, Domain domain, Set<Integer> uuidColumnIndexes, List<ValueBuffer> bindValues) -->Line_45 $$ bindValues.add(ValueBuffer.create(columnIndex, type, bindValue))[ FD ]
Line_22 $$ Object bindValue = getBindValue(columnIndex, uuidColumnIndexes, range.getLow().getValue())-->Line_45 $$ bindValues.add(ValueBuffer.create(columnIndex, type, bindValue))[ FD ]
Line_2 $$ private static String toPredicate(int columnIndex, String columnName, Type type, Domain domain, Set<Integer> uuidColumnIndexes, List<ValueBuffer> bindValues) -->Line_62 $$ disjuncts.add(toBindPredicate(columnName, "="))[ FD ]
Line_2 $$ private static String toPredicate(int columnIndex, String columnName, Type type, Domain domain, Set<Integer> uuidColumnIndexes, List<ValueBuffer> bindValues) -->Line_3 $$ if (domain.getValues().isAll()) [ CD ]
Line_21 $$ if (!range.getLow().isLowerUnbounded()) -->Line_22 $$ Object bindValue = getBindValue(columnIndex, uuidColumnIndexes, range.getLow().getValue())[ CD ]
Line_12 $$ List<Object> singleValues = new ArrayList()-->Line_18 $$ singleValues.add(range.getLow().getValue())[ FD ]
Line_2 $$ private static String toPredicate(int columnIndex, String columnName, Type type, Domain domain, Set<Integer> uuidColumnIndexes, List<ValueBuffer> bindValues) -->Line_67 $$ bindValues.add(ValueBuffer.create(columnIndex, type, getBindValue(columnIndex, uuidColumnIndexes, singleValue)))[ FD ]
Line_17 $$ if (range.isSingleValue()) -->Line_21 $$ if (!range.getLow().isLowerUnbounded()) [ CD ]
Line_2 $$ private static String toPredicate(int columnIndex, String columnName, Type type, Domain domain, Set<Integer> uuidColumnIndexes, List<ValueBuffer> bindValues) -->Line_26 $$ bindValues.add(ValueBuffer.create(columnIndex, type, bindValue))[ FD ]
Line_20 $$ List<String> rangeConjuncts = new ArrayList()-->Line_57 $$ disjuncts.add("(" + Joiner.on(" AND ").join(rangeConjuncts) + ")")[ FD ]
Line_11 $$ List<String> disjuncts = new ArrayList()-->Line_62 $$ disjuncts.add(toBindPredicate(columnName, "="))[ FD ]
Line_11 $$ List<String> disjuncts = new ArrayList()-->Line_71 $$ checkState(!disjuncts.isEmpty())[ FD ]
Line_2 $$ private static String toPredicate(int columnIndex, String columnName, Type type, Domain domain, Set<Integer> uuidColumnIndexes, List<ValueBuffer> bindValues) -->Line_30 $$ bindValues.add(ValueBuffer.create(columnIndex, type, bindValue))[ FD ]
Line_3 $$ if (domain.getValues().isAll()) -->Line_4 $$ return domain.isNullAllowed() ? "TRUE" : columnName + " IS NOT NULL"[ CD ]
Line_6 $$ if (domain.getValues().isNone()) -->Line_7 $$ return domain.isNullAllowed() ? columnName + " IS NULL" : "FALSE"[ CD ]
Line_14 $$ for (Range range : ranges.getOrderedRanges()) -->Line_40 $$ switch(range.getHigh().getBound()) [ FD ]
Line_14 $$ for (Range range : ranges.getOrderedRanges()) -->Line_23 $$ switch(range.getLow().getBound()) [ FD ]
Line_2 $$ private static String toPredicate(int columnIndex, String columnName, Type type, Domain domain, Set<Integer> uuidColumnIndexes, List<ValueBuffer> bindValues) -->Line_22 $$ Object bindValue = getBindValue(columnIndex, uuidColumnIndexes, range.getLow().getValue())[ FD ]
Line_61 $$ if (singleValues.size() == 1) -->Line_63 $$ bindValues.add(ValueBuffer.create(columnIndex, type, getBindValue(columnIndex, uuidColumnIndexes, getOnlyElement(singleValues))))[ CD ]
Line_14 $$ for (Range range : ranges.getOrderedRanges()) -->Line_17 $$ if (range.isSingleValue()) [ FD ]
Line_22 $$ Object bindValue = getBindValue(columnIndex, uuidColumnIndexes, range.getLow().getValue())-->Line_49 $$ bindValues.add(ValueBuffer.create(columnIndex, type, bindValue))[ FD ]
Line_2 $$ private static String toPredicate(int columnIndex, String columnName, Type type, Domain domain, Set<Integer> uuidColumnIndexes, List<ValueBuffer> bindValues) -->Line_63 $$ bindValues.add(ValueBuffer.create(columnIndex, type, getBindValue(columnIndex, uuidColumnIndexes, getOnlyElement(singleValues))))[ FD ]
Line_2 $$ private static String toPredicate(int columnIndex, String columnName, Type type, Domain domain, Set<Integer> uuidColumnIndexes, List<ValueBuffer> bindValues) -->Line_3 $$ if (domain.getValues().isAll()) [ FD ]
Line_12 $$ List<Object> singleValues = new ArrayList()-->Line_65 $$ disjuncts.add(columnName + " IN (" + Joiner.on(",").join(nCopies(singleValues.size(), "?")) + ")")[ FD ]
Line_2 $$ private static String toPredicate(int columnIndex, String columnName, Type type, Domain domain, Set<Integer> uuidColumnIndexes, List<ValueBuffer> bindValues) -->Line_9 $$ return domain.getValues().getValuesProcessor().transform( ranges -> [ CD ]
Line_14 $$ for (Range range : ranges.getOrderedRanges()) -->Line_21 $$ if (!range.getLow().isLowerUnbounded()) [ FD ]
Line_14 $$ for (Range range : ranges.getOrderedRanges()) -->Line_38 $$ if (!range.getHigh().isUpperUnbounded()) [ FD ]
Line_14 $$ for (Range range : ranges.getOrderedRanges()) -->Line_35 $$ throw new AssertionError("Unhandled bound: " + range.getLow().getBound())[ FD ]
Line_14 $$ for (Range range : ranges.getOrderedRanges()) -->Line_16 $$ checkState(!range.isAll())[ FD ]
Line_78 $$ String predicate = columnName + (discreteValues.isWhiteList() ? "" : " NOT") + " IN (" + values + ")"-->Line_83 $$ predicate = "(" + predicate + " OR " + columnName + " IS NULL)"[ FD ]
Line_17 $$ if (range.isSingleValue()) -->Line_57 $$ disjuncts.add("(" + Joiner.on(" AND ").join(rangeConjuncts) + ")")[ CD ]
Line_2 $$ private static String toPredicate(int columnIndex, String columnName, Type type, Domain domain, Set<Integer> uuidColumnIndexes, List<ValueBuffer> bindValues) -->Line_6 $$ if (domain.getValues().isNone()) [ CD ]
Line_22 $$ Object bindValue = getBindValue(columnIndex, uuidColumnIndexes, range.getLow().getValue())-->Line_26 $$ bindValues.add(ValueBuffer.create(columnIndex, type, bindValue))[ FD ]
Line_22 $$ Object bindValue = getBindValue(columnIndex, uuidColumnIndexes, range.getLow().getValue())-->Line_30 $$ bindValues.add(ValueBuffer.create(columnIndex, type, bindValue))[ FD ]
Line_2 $$ private static String toPredicate(int columnIndex, String columnName, Type type, Domain domain, Set<Integer> uuidColumnIndexes, List<ValueBuffer> bindValues) -->Line_48 $$ rangeConjuncts.add(toBindPredicate(columnName, "<"))[ FD ]
Line_2 $$ private static String toPredicate(int columnIndex, String columnName, Type type, Domain domain, Set<Integer> uuidColumnIndexes, List<ValueBuffer> bindValues) -->Line_25 $$ rangeConjuncts.add(toBindPredicate(columnName, ">"))[ FD ]
Line_2 $$ private static String toPredicate(int columnIndex, String columnName, Type type, Domain domain, Set<Integer> uuidColumnIndexes, List<ValueBuffer> bindValues) -->Line_44 $$ rangeConjuncts.add(toBindPredicate(columnName, "<="))[ FD ]
Line_2 $$ private static String toPredicate(int columnIndex, String columnName, Type type, Domain domain, Set<Integer> uuidColumnIndexes, List<ValueBuffer> bindValues) -->Line_7 $$ return domain.isNullAllowed() ? columnName + " IS NULL" : "FALSE"[ FD ]
Line_14 $$ for (Range range : ranges.getOrderedRanges()) -->Line_52 $$ throw new AssertionError("Unhandled bound: " + range.getHigh().getBound())[ FD ]
Line_11 $$ List<String> disjuncts = new ArrayList()-->Line_65 $$ disjuncts.add(columnName + " IN (" + Joiner.on(",").join(nCopies(singleValues.size(), "?")) + ")")[ FD ]
Line_11 $$ List<String> disjuncts = new ArrayList()-->Line_73 $$ disjuncts.add(columnName + " IS NULL")[ FD ]
Line_20 $$ List<String> rangeConjuncts = new ArrayList()-->Line_56 $$ checkState(!rangeConjuncts.isEmpty())[ FD ]
Line_2 $$ private static String toPredicate(int columnIndex, String columnName, Type type, Domain domain, Set<Integer> uuidColumnIndexes, List<ValueBuffer> bindValues) -->Line_82 $$ if (domain.isNullAllowed()) [ FD ]
Line_2 $$ private static String toPredicate(int columnIndex, String columnName, Type type, Domain domain, Set<Integer> uuidColumnIndexes, List<ValueBuffer> bindValues) -->Line_4 $$ return domain.isNullAllowed() ? "TRUE" : columnName + " IS NOT NULL"[ FD ]
Line_17 $$ if (range.isSingleValue()) -->Line_38 $$ if (!range.getHigh().isUpperUnbounded()) [ CD ]
Line_82 $$ if (domain.isNullAllowed()) -->Line_83 $$ predicate = "(" + predicate + " OR " + columnName + " IS NULL)"[ CD ]
Line_20 $$ List<String> rangeConjuncts = new ArrayList()-->Line_25 $$ rangeConjuncts.add(toBindPredicate(columnName, ">"))[ FD ]
Line_17 $$ if (range.isSingleValue()) -->Line_18 $$ singleValues.add(range.getLow().getValue())[ CD ]
Line_66 $$ for (Object singleValue : singleValues) -->Line_67 $$ bindValues.add(ValueBuffer.create(columnIndex, type, getBindValue(columnIndex, uuidColumnIndexes, singleValue)))[ FD ]
Line_11 $$ List<String> disjuncts = new ArrayList()-->Line_57 $$ disjuncts.add("(" + Joiner.on(" AND ").join(rangeConjuncts) + ")")[ FD ]
Line_72 $$ if (domain.isNullAllowed()) -->Line_73 $$ disjuncts.add(columnName + " IS NULL")[ CD ]
Line_20 $$ List<String> rangeConjuncts = new ArrayList()-->Line_44 $$ rangeConjuncts.add(toBindPredicate(columnName, "<="))[ FD ]
Line_64 $$ if (singleValues.size() > 1) -->Line_65 $$ disjuncts.add(columnName + " IN (" + Joiner.on(",").join(nCopies(singleValues.size(), "?")) + ")")[ CD ]
Line_17 $$ if (range.isSingleValue()) -->Line_20 $$ List<String> rangeConjuncts = new ArrayList()[ CD ]
Line_2 $$ private static String toPredicate(int columnIndex, String columnName, Type type, Domain domain, Set<Integer> uuidColumnIndexes, List<ValueBuffer> bindValues) -->Line_29 $$ rangeConjuncts.add(toBindPredicate(columnName, ">="))[ FD ]
Line_38 $$ if (!range.getHigh().isUpperUnbounded()) -->Line_39 $$ Object bindValue = getBindValue(columnIndex, uuidColumnIndexes, range.getHigh().getValue())[ CD ]
Line_2 $$ private static String toPredicate(int columnIndex, String columnName, Type type, Domain domain, Set<Integer> uuidColumnIndexes, List<ValueBuffer> bindValues) -->Line_80 $$ bindValues.add(ValueBuffer.create(columnIndex, type, getBindValue(columnIndex, uuidColumnIndexes, value)))[ FD ]
Line_2 $$ private static String toPredicate(int columnIndex, String columnName, Type type, Domain domain, Set<Integer> uuidColumnIndexes, List<ValueBuffer> bindValues) -->Line_39 $$ Object bindValue = getBindValue(columnIndex, uuidColumnIndexes, range.getHigh().getValue())[ FD ]
Line_14 $$ for (Range range : ranges.getOrderedRanges()) -->Line_39 $$ Object bindValue = getBindValue(columnIndex, uuidColumnIndexes, range.getHigh().getValue())[ FD ]
Line_20 $$ List<String> rangeConjuncts = new ArrayList()-->Line_48 $$ rangeConjuncts.add(toBindPredicate(columnName, "<"))[ FD ]
Line_2 $$ private static String toPredicate(int columnIndex, String columnName, Type type, Domain domain, Set<Integer> uuidColumnIndexes, List<ValueBuffer> bindValues) -->Line_6 $$ if (domain.getValues().isNone()) [ FD ]
Line_12 $$ List<Object> singleValues = new ArrayList()-->Line_61 $$ if (singleValues.size() == 1) [ FD ]
Line_2 $$ private static String toPredicate(int columnIndex, String columnName, Type type, Domain domain, Set<Integer> uuidColumnIndexes, List<ValueBuffer> bindValues) -->Line_49 $$ bindValues.add(ValueBuffer.create(columnIndex, type, bindValue))[ FD ]
Line_12 $$ List<Object> singleValues = new ArrayList()-->Line_64 $$ if (singleValues.size() > 1) [ FD ]
Line_61 $$ if (singleValues.size() == 1) -->Line_62 $$ disjuncts.add(toBindPredicate(columnName, "="))[ CD ]
