Line_15 $$ for (XmlFile file : files) -->Line_16 $$ ContainerUtil.addIfNotNull(getDomRoot(file), list)[ FD ]
Line_4 $$ final List<M> models = getAllModels(scope)-->Line_12 $$ final LinkedHashSet<DomFileElement<T>> list = new LinkedHashSet<DomFileElement<T>>(models.size())[ FD ]
Line_12 $$ final LinkedHashSet<DomFileElement<T>> list = new LinkedHashSet<DomFileElement<T>>(models.size())-->Line_20 $$ final DomFileElement<T> mergedModel = getModelMerger().mergeModels(DomFileElement.class, list)[ FD ]
Line_12 $$ final LinkedHashSet<DomFileElement<T>> list = new LinkedHashSet<DomFileElement<T>>(models.size())-->Line_16 $$ ContainerUtil.addIfNotNull(getDomRoot(file), list)[ FD ]
Line_4 $$ final List<M> models = getAllModels(scope)-->Line_5 $$ switch(models.size()) [ FD ]
Line_4 $$ final List<M> models = getAllModels(scope)-->Line_9 $$ return models.get(0)[ FD ]
Line_4 $$ final List<M> models = getAllModels(scope)-->Line_21 $$ final M firstModel = models.get(0)[ FD ]
Line_13 $$ for (M model : models) -->Line_14 $$ final Set<XmlFile> files = model.getConfigFiles()[ FD ]
Line_20 $$ final DomFileElement<T> mergedModel = getModelMerger().mergeModels(DomFileElement.class, list)-->Line_22 $$ return createCombinedModel(configFiles, mergedModel, firstModel, scope)[ FD ]
Line_11 $$ final Set<XmlFile> configFiles = new LinkedHashSet<XmlFile>()-->Line_18 $$ configFiles.addAll(files)[ FD ]
Line_14 $$ final Set<XmlFile> files = model.getConfigFiles()-->Line_18 $$ configFiles.addAll(files)[ FD ]
Line_11 $$ final Set<XmlFile> configFiles = new LinkedHashSet<XmlFile>()-->Line_22 $$ return createCombinedModel(configFiles, mergedModel, firstModel, scope)[ FD ]
Line_21 $$ final M firstModel = models.get(0)-->Line_22 $$ return createCombinedModel(configFiles, mergedModel, firstModel, scope)[ FD ]
