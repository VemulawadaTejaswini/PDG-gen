Line_34 $$ if (get.docIdAndVersion() != null) -->Line_38 $$ Map<String, GetField> fields = null[ CD ]
Line_28 $$ DocumentMapper docMapper = mapperService.documentMapper(type)-->Line_79 $$ if (shouldGetFromSource(ignoreErrorsOnGeneratedFields, docMapper, fieldMapper)) [ FD ]
Line_64 $$ value = source.timestamp-->Line_89 $$ if (value != null) [ FD ]
Line_48 $$ if (docMapper.TTLFieldMapper().enabled()) -->Line_49 $$ neededFields.add(TTLFieldMapper.NAME)[ CD ]
Line_106 $$ if (sourceFieldFiltering || sourceFetchFiltering) -->Line_113 $$ if (sourceFetchFiltering) [ CD ]
Line_59 $$ if (field.equals(RoutingFieldMapper.NAME)) -->Line_61 $$ if (field.equals(ParentFieldMapper.NAME) && docMapper.parentFieldMapper().active()) [ CD ]
Line_62 $$ value = source.parent-->Line_89 $$ if (value != null) [ FD ]
Line_71 $$ searchLookup = new SearchLookup(mapperService, null, new String[] -->Line_80 $$ List<Object> values = searchLookup.source().extractRawValues(field)[ FD ]
Line_29 $$ if (docMapper == null) -->Line_30 $$ get.release()[ CD ]
Line_22 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(type, id))).version(version).versionType(versionType))-->Line_30 $$ get.release()[ FD ]
Line_101 $$ SourceFieldMapper sourceFieldMapper = docMapper.sourceMapper()-->Line_102 $$ if (fetchSourceContext.fetchSource() && sourceFieldMapper.enabled()) [ FD ]
Line_58 $$ Object value = null-->Line_64 $$ value = source.timestamp[ FD ]
Line_38 $$ Map<String, GetField> fields = null-->Line_96 $$ fields.put(field, new GetField(field, Collections.singletonList(value)))[ FD ]
Line_113 $$ if (sourceFetchFiltering) -->Line_114 $$ sourceAsMap = XContentMapValues.filter(sourceAsMap, fetchSourceContext.includes(), fetchSourceContext.excludes())[ CD ]
Line_58 $$ Object value = null-->Line_89 $$ if (value != null) [ FD ]
Line_105 $$ boolean sourceFetchFiltering = fetchSourceContext.includes().length > 0 || fetchSourceContext.excludes().length > 0-->Line_106 $$ if (sourceFieldFiltering || sourceFetchFiltering) [ FD ]
Line_4 $$ Engine.GetResult get = null-->Line_23 $$ if (!get.exists()) [ FD ]
Line_2 $$ private GetResult innerGet(String type, String id, String[] gFields, boolean realtime, long version, VersionType versionType, FetchSourceContext fetchSourceContext, boolean ignoreErrorsOnGeneratedFields) -->Line_22 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(type, id))).version(version).versionType(versionType))[ FD ]
Line_34 $$ if (get.docIdAndVersion() != null) -->Line_41 $$ neededFields.add(RoutingFieldMapper.NAME)[ CD ]
Line_7 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(typeX, id))).version(version).versionType(versionType))-->Line_35 $$ return innerGetLoadFromStoredFields(type, id, gFields, fetchSourceContext, get, docMapper, ignoreErrorsOnGeneratedFields)[ FD ]
Line_23 $$ if (!get.exists()) -->Line_24 $$ get.release()[ CD ]
Line_28 $$ DocumentMapper docMapper = mapperService.documentMapper(type)-->Line_61 $$ if (field.equals(ParentFieldMapper.NAME) && docMapper.parentFieldMapper().active()) [ FD ]
Line_38 $$ Map<String, GetField> fields = null-->Line_94 $$ fields.put(field, new GetField(field, (List) value))[ FD ]
Line_70 $$ if (searchLookup == null) -->Line_72 $$ searchLookup.source().setSource(source.source)[ CD ]
Line_80 $$ List<Object> values = searchLookup.source().extractRawValues(field)-->Line_82 $$ for (int i = 0; i < values.size(); i++) [ FD ]
Line_2 $$ private GetResult innerGet(String type, String id, String[] gFields, boolean realtime, long version, VersionType versionType, FetchSourceContext fetchSourceContext, boolean ignoreErrorsOnGeneratedFields) -->Line_51 $$ if (gFields != null) [ FD ]
Line_34 $$ if (get.docIdAndVersion() != null) -->Line_48 $$ if (docMapper.TTLFieldMapper().enabled()) [ CD ]
Line_109 $$ Map<String, Object> sourceAsMap = typeMapTuple.v2()-->Line_117 $$ sourceToBeReturned = XContentFactory.contentBuilder(sourceContentType).map(sourceAsMap).bytes()[ FD ]
Line_6 $$ for (String typeX : mapperService.types()) -->Line_7 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(typeX, id))).version(version).versionType(versionType))[ FD ]
Line_58 $$ Object value = null-->Line_85 $$ value = values[ FD ]
Line_3 $$ fetchSourceContext = normalizeFetchSourceContent(fetchSourceContext, gFields)-->Line_102 $$ if (fetchSourceContext.fetchSource() && sourceFieldMapper.enabled()) [ FD ]
Line_34 $$ if (get.docIdAndVersion() != null) -->Line_45 $$ if (docMapper.timestampFieldMapper().enabled()) [ CD ]
Line_60 $$ value = source.routing-->Line_93 $$ if (value instanceof List) [ FD ]
Line_63 $$ if (field.equals(TimestampFieldMapper.NAME) && docMapper.timestampFieldMapper().enabled()) -->Line_65 $$ if (field.equals(TTLFieldMapper.NAME) && docMapper.TTLFieldMapper().enabled()) [ CD ]
Line_22 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(type, id))).version(version).versionType(versionType))-->Line_24 $$ get.release()[ FD ]
Line_64 $$ value = source.timestamp-->Line_85 $$ value = values[ FD ]
Line_91 $$ fields = new HashMap(2)-->Line_96 $$ fields.put(field, new GetField(field, Collections.singletonList(value)))[ FD ]
Line_67 $$ value = docMapper.TTLFieldMapper().valueForSearch(source.timestamp + source.ttl)-->Line_85 $$ value = values[ FD ]
Line_22 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(type, id))).version(version).versionType(versionType))-->Line_35 $$ return innerGetLoadFromStoredFields(type, id, gFields, fetchSourceContext, get, docMapper, ignoreErrorsOnGeneratedFields)[ FD ]
Line_28 $$ DocumentMapper docMapper = mapperService.documentMapper(type)-->Line_29 $$ if (docMapper == null) [ FD ]
Line_5 $$ if (type == null || type.equals("_all")) -->Line_15 $$ if (get == null) [ CD ]
Line_39 $$ SearchLookup searchLookup = null-->Line_80 $$ List<Object> values = searchLookup.source().extractRawValues(field)[ FD ]
Line_107 $$ Tuple<XContentType, Map<String, Object>> typeMapTuple = XContentHelper.convertToMap(source.source, true)-->Line_109 $$ Map<String, Object> sourceAsMap = typeMapTuple.v2()[ FD ]
Line_2 $$ private GetResult innerGet(String type, String id, String[] gFields, boolean realtime, long version, VersionType versionType, FetchSourceContext fetchSourceContext, boolean ignoreErrorsOnGeneratedFields) -->Line_79 $$ if (shouldGetFromSource(ignoreErrorsOnGeneratedFields, docMapper, fieldMapper)) [ FD ]
Line_93 $$ if (value instanceof List) -->Line_96 $$ fields.put(field, new GetField(field, Collections.singletonList(value)))[ CD ]
Line_28 $$ DocumentMapper docMapper = mapperService.documentMapper(type)-->Line_45 $$ if (docMapper.timestampFieldMapper().enabled()) [ FD ]
Line_65 $$ if (field.equals(TTLFieldMapper.NAME) && docMapper.TTLFieldMapper().enabled()) -->Line_75 $$ if (fieldMapper == null) [ CD ]
Line_102 $$ if (fetchSourceContext.fetchSource() && sourceFieldMapper.enabled()) -->Line_105 $$ boolean sourceFetchFiltering = fetchSourceContext.includes().length > 0 || fetchSourceContext.excludes().length > 0[ CD ]
Line_75 $$ if (fieldMapper == null) -->Line_76 $$ if (docMapper.objectMappers().get(field) != null) [ CD ]
Line_106 $$ if (sourceFieldFiltering || sourceFetchFiltering) -->Line_110 $$ if (sourceFieldFiltering) [ CD ]
Line_60 $$ value = source.routing-->Line_89 $$ if (value != null) [ FD ]
Line_54 $$ for (String field : neededFields) -->Line_80 $$ List<Object> values = searchLookup.source().extractRawValues(field)[ FD ]
Line_9 $$ type = typeX-->Line_28 $$ DocumentMapper docMapper = mapperService.documentMapper(type)[ FD ]
Line_6 $$ for (String typeX : mapperService.types()) -->Line_9 $$ type = typeX[ FD ]
Line_34 $$ if (get.docIdAndVersion() != null) -->Line_39 $$ SearchLookup searchLookup = null[ CD ]
Line_54 $$ for (String field : neededFields) -->Line_61 $$ if (field.equals(ParentFieldMapper.NAME) && docMapper.parentFieldMapper().active()) [ FD ]
Line_93 $$ if (value instanceof List) -->Line_94 $$ fields.put(field, new GetField(field, (List) value))[ CD ]
Line_4 $$ Engine.GetResult get = null-->Line_7 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(typeX, id))).version(version).versionType(versionType))[ FD ]
Line_42 $$ if (docMapper.parentFieldMapper().active()) -->Line_43 $$ neededFields.add(ParentFieldMapper.NAME)[ CD ]
Line_60 $$ value = source.routing-->Line_62 $$ value = source.parent[ FD ]
Line_28 $$ DocumentMapper docMapper = mapperService.documentMapper(type)-->Line_42 $$ if (docMapper.parentFieldMapper().active()) [ FD ]
Line_67 $$ value = docMapper.TTLFieldMapper().valueForSearch(source.timestamp + source.ttl)-->Line_93 $$ if (value instanceof List) [ FD ]
Line_85 $$ value = values-->Line_96 $$ fields.put(field, new GetField(field, Collections.singletonList(value)))[ FD ]
Line_45 $$ if (docMapper.timestampFieldMapper().enabled()) -->Line_46 $$ neededFields.add(TimestampFieldMapper.NAME)[ CD ]
Line_81 $$ if (!values.isEmpty()) -->Line_82 $$ for (int i = 0; i < values.size(); i++) [ CD ]
Line_4 $$ Engine.GetResult get = null-->Line_30 $$ get.release()[ FD ]
Line_34 $$ if (get.docIdAndVersion() != null) -->Line_51 $$ if (gFields != null) [ CD ]
Line_67 $$ value = docMapper.TTLFieldMapper().valueForSearch(source.timestamp + source.ttl)-->Line_89 $$ if (value != null) [ FD ]
Line_80 $$ List<Object> values = searchLookup.source().extractRawValues(field)-->Line_85 $$ value = values[ FD ]
Line_62 $$ value = source.parent-->Line_67 $$ value = docMapper.TTLFieldMapper().valueForSearch(source.timestamp + source.ttl)[ FD ]
Line_74 $$ FieldMapper fieldMapper = docMapper.mappers().smartNameFieldMapper(field)-->Line_75 $$ if (fieldMapper == null) [ FD ]
Line_89 $$ if (value != null) -->Line_93 $$ if (value instanceof List) [ CD ]
Line_4 $$ Engine.GetResult get = null-->Line_15 $$ if (get == null) [ FD ]
Line_59 $$ if (field.equals(RoutingFieldMapper.NAME)) -->Line_60 $$ value = source.routing[ CD ]
Line_38 $$ Map<String, GetField> fields = null-->Line_90 $$ if (fields == null) [ FD ]
Line_4 $$ Engine.GetResult get = null-->Line_37 $$ Translog.Source source = get.source()[ FD ]
Line_28 $$ DocumentMapper docMapper = mapperService.documentMapper(type)-->Line_67 $$ value = docMapper.TTLFieldMapper().valueForSearch(source.timestamp + source.ttl)[ FD ]
Line_74 $$ FieldMapper fieldMapper = docMapper.mappers().smartNameFieldMapper(field)-->Line_79 $$ if (shouldGetFromSource(ignoreErrorsOnGeneratedFields, docMapper, fieldMapper)) [ FD ]
Line_7 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(typeX, id))).version(version).versionType(versionType))-->Line_34 $$ if (get.docIdAndVersion() != null) [ FD ]
Line_106 $$ if (sourceFieldFiltering || sourceFetchFiltering) -->Line_109 $$ Map<String, Object> sourceAsMap = typeMapTuple.v2()[ CD ]
Line_114 $$ sourceAsMap = XContentMapValues.filter(sourceAsMap, fetchSourceContext.includes(), fetchSourceContext.excludes())-->Line_117 $$ sourceToBeReturned = XContentFactory.contentBuilder(sourceContentType).map(sourceAsMap).bytes()[ FD ]
Line_79 $$ if (shouldGetFromSource(ignoreErrorsOnGeneratedFields, docMapper, fieldMapper)) -->Line_81 $$ if (!values.isEmpty()) [ CD ]
Line_8 $$ if (get.exists()) -->Line_9 $$ type = typeX[ CD ]
Line_63 $$ if (field.equals(TimestampFieldMapper.NAME) && docMapper.timestampFieldMapper().enabled()) -->Line_64 $$ value = source.timestamp[ CD ]
Line_79 $$ if (shouldGetFromSource(ignoreErrorsOnGeneratedFields, docMapper, fieldMapper)) -->Line_80 $$ List<Object> values = searchLookup.source().extractRawValues(field)[ CD ]
Line_2 $$ private GetResult innerGet(String type, String id, String[] gFields, boolean realtime, long version, VersionType versionType, FetchSourceContext fetchSourceContext, boolean ignoreErrorsOnGeneratedFields) -->Line_3 $$ fetchSourceContext = normalizeFetchSourceContent(fetchSourceContext, gFields)[ FD ]
Line_2 $$ private GetResult innerGet(String type, String id, String[] gFields, boolean realtime, long version, VersionType versionType, FetchSourceContext fetchSourceContext, boolean ignoreErrorsOnGeneratedFields) -->Line_9 $$ type = typeX[ FD ]
Line_67 $$ value = docMapper.TTLFieldMapper().valueForSearch(source.timestamp + source.ttl)-->Line_96 $$ fields.put(field, new GetField(field, Collections.singletonList(value)))[ FD ]
Line_54 $$ for (String field : neededFields) -->Line_94 $$ fields.put(field, new GetField(field, (List) value))[ FD ]
Line_58 $$ Object value = null-->Line_60 $$ value = source.routing[ FD ]
Line_90 $$ if (fields == null) -->Line_91 $$ fields = new HashMap(2)[ CD ]
Line_74 $$ FieldMapper fieldMapper = docMapper.mappers().smartNameFieldMapper(field)-->Line_83 $$ values.set(i, fieldMapper.fieldType().valueForSearch(values.get(i)))[ FD ]
Line_22 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(type, id))).version(version).versionType(versionType))-->Line_37 $$ Translog.Source source = get.source()[ FD ]
Line_62 $$ value = source.parent-->Line_64 $$ value = source.timestamp[ FD ]
Line_60 $$ value = source.routing-->Line_67 $$ value = docMapper.TTLFieldMapper().valueForSearch(source.timestamp + source.ttl)[ FD ]
Line_60 $$ value = source.routing-->Line_64 $$ value = source.timestamp[ FD ]
Line_109 $$ Map<String, Object> sourceAsMap = typeMapTuple.v2()-->Line_114 $$ sourceAsMap = XContentMapValues.filter(sourceAsMap, fetchSourceContext.includes(), fetchSourceContext.excludes())[ FD ]
Line_82 $$ for (int i = 0; i < values.size(); i++) -->Line_83 $$ values.set(i, fieldMapper.fieldType().valueForSearch(values.get(i)))[ FD ]
Line_101 $$ SourceFieldMapper sourceFieldMapper = docMapper.sourceMapper()-->Line_111 $$ sourceAsMap = XContentMapValues.filter(sourceAsMap, sourceFieldMapper.includes(), sourceFieldMapper.excludes())[ FD ]
Line_62 $$ value = source.parent-->Line_96 $$ fields.put(field, new GetField(field, Collections.singletonList(value)))[ FD ]
Line_34 $$ if (get.docIdAndVersion() != null) -->Line_40 $$ Set<String> neededFields = new HashSet()[ CD ]
Line_7 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(typeX, id))).version(version).versionType(versionType))-->Line_123 $$ return new GetResult(shardId.index().name(), type, id, get.version(), get.exists(), sourceToBeReturned, fields)[ FD ]
Line_54 $$ for (String field : neededFields) -->Line_74 $$ FieldMapper fieldMapper = docMapper.mappers().smartNameFieldMapper(field)[ FD ]
Line_22 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(type, id))).version(version).versionType(versionType))-->Line_123 $$ return new GetResult(shardId.index().name(), type, id, get.version(), get.exists(), sourceToBeReturned, fields)[ FD ]
Line_71 $$ searchLookup = new SearchLookup(mapperService, null, new String[] -->Line_72 $$ searchLookup.source().setSource(source.source)[ FD ]
Line_2 $$ private GetResult innerGet(String type, String id, String[] gFields, boolean realtime, long version, VersionType versionType, FetchSourceContext fetchSourceContext, boolean ignoreErrorsOnGeneratedFields) -->Line_7 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(typeX, id))).version(version).versionType(versionType))[ FD ]
Line_7 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(typeX, id))).version(version).versionType(versionType))-->Line_22 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(type, id))).version(version).versionType(versionType))[ FD ]
Line_61 $$ if (field.equals(ParentFieldMapper.NAME) && docMapper.parentFieldMapper().active()) -->Line_62 $$ value = source.parent[ CD ]
Line_4 $$ Engine.GetResult get = null-->Line_123 $$ return new GetResult(shardId.index().name(), type, id, get.version(), get.exists(), sourceToBeReturned, fields)[ FD ]
Line_4 $$ Engine.GetResult get = null-->Line_18 $$ if (!get.exists()) [ FD ]
Line_7 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(typeX, id))).version(version).versionType(versionType))-->Line_12 $$ get.release()[ FD ]
Line_29 $$ if (docMapper == null) -->Line_31 $$ return new GetResult(shardId.index().name(), type, id, -1, false, null, null)[ CD ]
Line_2 $$ private GetResult innerGet(String type, String id, String[] gFields, boolean realtime, long version, VersionType versionType, FetchSourceContext fetchSourceContext, boolean ignoreErrorsOnGeneratedFields) -->Line_114 $$ sourceAsMap = XContentMapValues.filter(sourceAsMap, fetchSourceContext.includes(), fetchSourceContext.excludes())[ FD ]
Line_18 $$ if (!get.exists()) -->Line_19 $$ return new GetResult(shardId.index().name(), type, id, -1, false, null, null)[ CD ]
Line_22 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(type, id))).version(version).versionType(versionType))-->Line_23 $$ if (!get.exists()) [ FD ]
Line_4 $$ Engine.GetResult get = null-->Line_34 $$ if (get.docIdAndVersion() != null) [ FD ]
Line_34 $$ if (get.docIdAndVersion() != null) -->Line_101 $$ SourceFieldMapper sourceFieldMapper = docMapper.sourceMapper()[ CD ]
Line_22 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(type, id))).version(version).versionType(versionType))-->Line_34 $$ if (get.docIdAndVersion() != null) [ FD ]
Line_23 $$ if (!get.exists()) -->Line_25 $$ return new GetResult(shardId.index().name(), type, id, -1, false, null, null)[ CD ]
Line_110 $$ if (sourceFieldFiltering) -->Line_111 $$ sourceAsMap = XContentMapValues.filter(sourceAsMap, sourceFieldMapper.includes(), sourceFieldMapper.excludes())[ CD ]
Line_2 $$ private GetResult innerGet(String type, String id, String[] gFields, boolean realtime, long version, VersionType versionType, FetchSourceContext fetchSourceContext, boolean ignoreErrorsOnGeneratedFields) -->Line_3 $$ fetchSourceContext = normalizeFetchSourceContent(fetchSourceContext, gFields)[ CD ]
Line_75 $$ if (fieldMapper == null) -->Line_79 $$ if (shouldGetFromSource(ignoreErrorsOnGeneratedFields, docMapper, fieldMapper)) [ CD ]
Line_34 $$ if (get.docIdAndVersion() != null) -->Line_100 $$ BytesReference sourceToBeReturned = null[ CD ]
Line_101 $$ SourceFieldMapper sourceFieldMapper = docMapper.sourceMapper()-->Line_104 $$ boolean sourceFieldFiltering = sourceFieldMapper.includes().length > 0 || sourceFieldMapper.excludes().length > 0[ FD ]
Line_81 $$ if (!values.isEmpty()) -->Line_85 $$ value = values[ CD ]
Line_40 $$ Set<String> neededFields = new HashSet()-->Line_52 $$ neededFields.addAll(Arrays.asList(gFields))[ FD ]
Line_28 $$ DocumentMapper docMapper = mapperService.documentMapper(type)-->Line_35 $$ return innerGetLoadFromStoredFields(type, id, gFields, fetchSourceContext, get, docMapper, ignoreErrorsOnGeneratedFields)[ FD ]
Line_62 $$ value = source.parent-->Line_85 $$ value = values[ FD ]
Line_91 $$ fields = new HashMap(2)-->Line_94 $$ fields.put(field, new GetField(field, (List) value))[ FD ]
Line_2 $$ private GetResult innerGet(String type, String id, String[] gFields, boolean realtime, long version, VersionType versionType, FetchSourceContext fetchSourceContext, boolean ignoreErrorsOnGeneratedFields) -->Line_105 $$ boolean sourceFetchFiltering = fetchSourceContext.includes().length > 0 || fetchSourceContext.excludes().length > 0[ FD ]
Line_8 $$ if (get.exists()) -->Line_12 $$ get.release()[ CD ]
Line_3 $$ fetchSourceContext = normalizeFetchSourceContent(fetchSourceContext, gFields)-->Line_105 $$ boolean sourceFetchFiltering = fetchSourceContext.includes().length > 0 || fetchSourceContext.excludes().length > 0[ FD ]
Line_65 $$ if (field.equals(TTLFieldMapper.NAME) && docMapper.TTLFieldMapper().enabled()) -->Line_66 $$ if (source.ttl > 0) [ CD ]
Line_5 $$ if (type == null || type.equals("_all")) -->Line_23 $$ if (!get.exists()) [ CD ]
Line_107 $$ Tuple<XContentType, Map<String, Object>> typeMapTuple = XContentHelper.convertToMap(source.source, true)-->Line_108 $$ XContentType sourceContentType = typeMapTuple.v1()[ FD ]
Line_3 $$ fetchSourceContext = normalizeFetchSourceContent(fetchSourceContext, gFields)-->Line_114 $$ sourceAsMap = XContentMapValues.filter(sourceAsMap, fetchSourceContext.includes(), fetchSourceContext.excludes())[ FD ]
Line_4 $$ Engine.GetResult get = null-->Line_126 $$ get.release()[ FD ]
Line_104 $$ boolean sourceFieldFiltering = sourceFieldMapper.includes().length > 0 || sourceFieldMapper.excludes().length > 0-->Line_106 $$ if (sourceFieldFiltering || sourceFetchFiltering) [ FD ]
Line_7 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(typeX, id))).version(version).versionType(versionType))-->Line_18 $$ if (!get.exists()) [ FD ]
Line_60 $$ value = source.routing-->Line_96 $$ fields.put(field, new GetField(field, Collections.singletonList(value)))[ FD ]
Line_2 $$ private GetResult innerGet(String type, String id, String[] gFields, boolean realtime, long version, VersionType versionType, FetchSourceContext fetchSourceContext, boolean ignoreErrorsOnGeneratedFields) -->Line_5 $$ if (type == null || type.equals("_all")) [ FD ]
Line_7 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(typeX, id))).version(version).versionType(versionType))-->Line_15 $$ if (get == null) [ FD ]
Line_5 $$ if (type == null || type.equals("_all")) -->Line_18 $$ if (!get.exists()) [ CD ]
Line_9 $$ type = typeX-->Line_22 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(type, id))).version(version).versionType(versionType))[ FD ]
Line_34 $$ if (get.docIdAndVersion() != null) -->Line_37 $$ Translog.Source source = get.source()[ CD ]
Line_2 $$ private GetResult innerGet(String type, String id, String[] gFields, boolean realtime, long version, VersionType versionType, FetchSourceContext fetchSourceContext, boolean ignoreErrorsOnGeneratedFields) -->Line_29 $$ if (docMapper == null) [ CD ]
Line_40 $$ Set<String> neededFields = new HashSet()-->Line_41 $$ neededFields.add(RoutingFieldMapper.NAME)[ FD ]
Line_38 $$ Map<String, GetField> fields = null-->Line_91 $$ fields = new HashMap(2)[ FD ]
Line_80 $$ List<Object> values = searchLookup.source().extractRawValues(field)-->Line_83 $$ values.set(i, fieldMapper.fieldType().valueForSearch(values.get(i)))[ FD ]
Line_58 $$ Object value = null-->Line_93 $$ if (value instanceof List) [ FD ]
Line_4 $$ Engine.GetResult get = null-->Line_22 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(type, id))).version(version).versionType(versionType))[ FD ]
Line_4 $$ Engine.GetResult get = null-->Line_24 $$ get.release()[ FD ]
Line_2 $$ private GetResult innerGet(String type, String id, String[] gFields, boolean realtime, long version, VersionType versionType, FetchSourceContext fetchSourceContext, boolean ignoreErrorsOnGeneratedFields) -->Line_4 $$ Engine.GetResult get = null[ CD ]
Line_2 $$ private GetResult innerGet(String type, String id, String[] gFields, boolean realtime, long version, VersionType versionType, FetchSourceContext fetchSourceContext, boolean ignoreErrorsOnGeneratedFields) -->Line_35 $$ return innerGetLoadFromStoredFields(type, id, gFields, fetchSourceContext, get, docMapper, ignoreErrorsOnGeneratedFields)[ FD ]
Line_85 $$ value = values-->Line_89 $$ if (value != null) [ FD ]
Line_109 $$ Map<String, Object> sourceAsMap = typeMapTuple.v2()-->Line_111 $$ sourceAsMap = XContentMapValues.filter(sourceAsMap, sourceFieldMapper.includes(), sourceFieldMapper.excludes())[ FD ]
Line_34 $$ if (get.docIdAndVersion() != null) -->Line_123 $$ return new GetResult(shardId.index().name(), type, id, get.version(), get.exists(), sourceToBeReturned, fields)[ CD ]
Line_2 $$ private GetResult innerGet(String type, String id, String[] gFields, boolean realtime, long version, VersionType versionType, FetchSourceContext fetchSourceContext, boolean ignoreErrorsOnGeneratedFields) -->Line_5 $$ if (type == null || type.equals("_all")) [ CD ]
Line_106 $$ if (sourceFieldFiltering || sourceFetchFiltering) -->Line_108 $$ XContentType sourceContentType = typeMapTuple.v1()[ CD ]
Line_82 $$ for (int i = 0; i < values.size(); i++) -->Line_83 $$ values.set(i, fieldMapper.fieldType().valueForSearch(values.get(i)))[ CD ]
Line_15 $$ if (get == null) -->Line_16 $$ return new GetResult(shardId.index().name(), type, id, -1, false, null, null)[ CD ]
Line_54 $$ for (String field : neededFields) -->Line_76 $$ if (docMapper.objectMappers().get(field) != null) [ FD ]
Line_70 $$ if (searchLookup == null) -->Line_71 $$ searchLookup = new SearchLookup(mapperService, null, new String[] [ CD ]
Line_54 $$ for (String field : neededFields) -->Line_55 $$ if (SourceFieldMapper.NAME.equals(field)) [ FD ]
Line_111 $$ sourceAsMap = XContentMapValues.filter(sourceAsMap, sourceFieldMapper.includes(), sourceFieldMapper.excludes())-->Line_114 $$ sourceAsMap = XContentMapValues.filter(sourceAsMap, fetchSourceContext.includes(), fetchSourceContext.excludes())[ FD ]
Line_58 $$ Object value = null-->Line_96 $$ fields.put(field, new GetField(field, Collections.singletonList(value)))[ FD ]
Line_64 $$ value = source.timestamp-->Line_96 $$ fields.put(field, new GetField(field, Collections.singletonList(value)))[ FD ]
Line_58 $$ Object value = null-->Line_67 $$ value = docMapper.TTLFieldMapper().valueForSearch(source.timestamp + source.ttl)[ FD ]
Line_7 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(typeX, id))).version(version).versionType(versionType))-->Line_126 $$ get.release()[ FD ]
Line_51 $$ if (gFields != null) -->Line_52 $$ neededFields.addAll(Arrays.asList(gFields))[ CD ]
Line_111 $$ sourceAsMap = XContentMapValues.filter(sourceAsMap, sourceFieldMapper.includes(), sourceFieldMapper.excludes())-->Line_117 $$ sourceToBeReturned = XContentFactory.contentBuilder(sourceContentType).map(sourceAsMap).bytes()[ FD ]
Line_7 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(typeX, id))).version(version).versionType(versionType))-->Line_24 $$ get.release()[ FD ]
Line_7 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(typeX, id))).version(version).versionType(versionType))-->Line_23 $$ if (!get.exists()) [ FD ]
Line_89 $$ if (value != null) -->Line_90 $$ if (fields == null) [ CD ]
Line_61 $$ if (field.equals(ParentFieldMapper.NAME) && docMapper.parentFieldMapper().active()) -->Line_63 $$ if (field.equals(TimestampFieldMapper.NAME) && docMapper.timestampFieldMapper().enabled()) [ CD ]
Line_40 $$ Set<String> neededFields = new HashSet()-->Line_46 $$ neededFields.add(TimestampFieldMapper.NAME)[ FD ]
Line_106 $$ if (sourceFieldFiltering || sourceFetchFiltering) -->Line_107 $$ Tuple<XContentType, Map<String, Object>> typeMapTuple = XContentHelper.convertToMap(source.source, true)[ CD ]
Line_34 $$ if (get.docIdAndVersion() != null) -->Line_35 $$ return innerGetLoadFromStoredFields(type, id, gFields, fetchSourceContext, get, docMapper, ignoreErrorsOnGeneratedFields)[ CD ]
Line_9 $$ type = typeX-->Line_35 $$ return innerGetLoadFromStoredFields(type, id, gFields, fetchSourceContext, get, docMapper, ignoreErrorsOnGeneratedFields)[ FD ]
Line_60 $$ value = source.routing-->Line_85 $$ value = values[ FD ]
Line_103 $$ sourceToBeReturned = source.source-->Line_117 $$ sourceToBeReturned = XContentFactory.contentBuilder(sourceContentType).map(sourceAsMap).bytes()[ FD ]
Line_2 $$ private GetResult innerGet(String type, String id, String[] gFields, boolean realtime, long version, VersionType versionType, FetchSourceContext fetchSourceContext, boolean ignoreErrorsOnGeneratedFields) -->Line_28 $$ DocumentMapper docMapper = mapperService.documentMapper(type)[ CD ]
Line_2 $$ private GetResult innerGet(String type, String id, String[] gFields, boolean realtime, long version, VersionType versionType, FetchSourceContext fetchSourceContext, boolean ignoreErrorsOnGeneratedFields) -->Line_52 $$ neededFields.addAll(Arrays.asList(gFields))[ FD ]
Line_4 $$ Engine.GetResult get = null-->Line_8 $$ if (get.exists()) [ FD ]
Line_65 $$ if (field.equals(TTLFieldMapper.NAME) && docMapper.TTLFieldMapper().enabled()) -->Line_74 $$ FieldMapper fieldMapper = docMapper.mappers().smartNameFieldMapper(field)[ CD ]
Line_28 $$ DocumentMapper docMapper = mapperService.documentMapper(type)-->Line_74 $$ FieldMapper fieldMapper = docMapper.mappers().smartNameFieldMapper(field)[ FD ]
Line_108 $$ XContentType sourceContentType = typeMapTuple.v1()-->Line_117 $$ sourceToBeReturned = XContentFactory.contentBuilder(sourceContentType).map(sourceAsMap).bytes()[ FD ]
Line_39 $$ SearchLookup searchLookup = null-->Line_71 $$ searchLookup = new SearchLookup(mapperService, null, new String[] [ FD ]
Line_4 $$ Engine.GetResult get = null-->Line_12 $$ get.release()[ FD ]
Line_28 $$ DocumentMapper docMapper = mapperService.documentMapper(type)-->Line_76 $$ if (docMapper.objectMappers().get(field) != null) [ FD ]
Line_3 $$ fetchSourceContext = normalizeFetchSourceContent(fetchSourceContext, gFields)-->Line_35 $$ return innerGetLoadFromStoredFields(type, id, gFields, fetchSourceContext, get, docMapper, ignoreErrorsOnGeneratedFields)[ FD ]
Line_4 $$ Engine.GetResult get = null-->Line_35 $$ return innerGetLoadFromStoredFields(type, id, gFields, fetchSourceContext, get, docMapper, ignoreErrorsOnGeneratedFields)[ FD ]
Line_40 $$ Set<String> neededFields = new HashSet()-->Line_43 $$ neededFields.add(ParentFieldMapper.NAME)[ FD ]
Line_28 $$ DocumentMapper docMapper = mapperService.documentMapper(type)-->Line_65 $$ if (field.equals(TTLFieldMapper.NAME) && docMapper.TTLFieldMapper().enabled()) [ FD ]
Line_28 $$ DocumentMapper docMapper = mapperService.documentMapper(type)-->Line_101 $$ SourceFieldMapper sourceFieldMapper = docMapper.sourceMapper()[ FD ]
Line_64 $$ value = source.timestamp-->Line_67 $$ value = docMapper.TTLFieldMapper().valueForSearch(source.timestamp + source.ttl)[ FD ]
Line_54 $$ for (String field : neededFields) -->Line_96 $$ fields.put(field, new GetField(field, Collections.singletonList(value)))[ FD ]
Line_66 $$ if (source.ttl > 0) -->Line_67 $$ value = docMapper.TTLFieldMapper().valueForSearch(source.timestamp + source.ttl)[ CD ]
Line_2 $$ private GetResult innerGet(String type, String id, String[] gFields, boolean realtime, long version, VersionType versionType, FetchSourceContext fetchSourceContext, boolean ignoreErrorsOnGeneratedFields) -->Line_28 $$ DocumentMapper docMapper = mapperService.documentMapper(type)[ FD ]
Line_7 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(typeX, id))).version(version).versionType(versionType))-->Line_30 $$ get.release()[ FD ]
Line_80 $$ List<Object> values = searchLookup.source().extractRawValues(field)-->Line_81 $$ if (!values.isEmpty()) [ FD ]
Line_100 $$ BytesReference sourceToBeReturned = null-->Line_103 $$ sourceToBeReturned = source.source[ FD ]
Line_22 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(type, id))).version(version).versionType(versionType))-->Line_126 $$ get.release()[ FD ]
Line_39 $$ SearchLookup searchLookup = null-->Line_70 $$ if (searchLookup == null) [ FD ]
Line_102 $$ if (fetchSourceContext.fetchSource() && sourceFieldMapper.enabled()) -->Line_103 $$ sourceToBeReturned = source.source[ CD ]
Line_28 $$ DocumentMapper docMapper = mapperService.documentMapper(type)-->Line_63 $$ if (field.equals(TimestampFieldMapper.NAME) && docMapper.timestampFieldMapper().enabled()) [ FD ]
Line_64 $$ value = source.timestamp-->Line_93 $$ if (value instanceof List) [ FD ]
Line_102 $$ if (fetchSourceContext.fetchSource() && sourceFieldMapper.enabled()) -->Line_106 $$ if (sourceFieldFiltering || sourceFetchFiltering) [ CD ]
Line_40 $$ Set<String> neededFields = new HashSet()-->Line_49 $$ neededFields.add(TTLFieldMapper.NAME)[ FD ]
Line_39 $$ SearchLookup searchLookup = null-->Line_72 $$ searchLookup.source().setSource(source.source)[ FD ]
Line_62 $$ value = source.parent-->Line_93 $$ if (value instanceof List) [ FD ]
Line_58 $$ Object value = null-->Line_62 $$ value = source.parent[ FD ]
Line_65 $$ if (field.equals(TTLFieldMapper.NAME) && docMapper.TTLFieldMapper().enabled()) -->Line_70 $$ if (searchLookup == null) [ CD ]
Line_34 $$ if (get.docIdAndVersion() != null) -->Line_102 $$ if (fetchSourceContext.fetchSource() && sourceFieldMapper.enabled()) [ CD ]
Line_102 $$ if (fetchSourceContext.fetchSource() && sourceFieldMapper.enabled()) -->Line_104 $$ boolean sourceFieldFiltering = sourceFieldMapper.includes().length > 0 || sourceFieldMapper.excludes().length > 0[ CD ]
Line_54 $$ for (String field : neededFields) -->Line_63 $$ if (field.equals(TimestampFieldMapper.NAME) && docMapper.timestampFieldMapper().enabled()) [ FD ]
Line_85 $$ value = values-->Line_93 $$ if (value instanceof List) [ FD ]
Line_7 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(typeX, id))).version(version).versionType(versionType))-->Line_8 $$ if (get.exists()) [ FD ]
Line_28 $$ DocumentMapper docMapper = mapperService.documentMapper(type)-->Line_48 $$ if (docMapper.TTLFieldMapper().enabled()) [ FD ]
Line_2 $$ private GetResult innerGet(String type, String id, String[] gFields, boolean realtime, long version, VersionType versionType, FetchSourceContext fetchSourceContext, boolean ignoreErrorsOnGeneratedFields) -->Line_102 $$ if (fetchSourceContext.fetchSource() && sourceFieldMapper.enabled()) [ FD ]
Line_5 $$ if (type == null || type.equals("_all")) -->Line_22 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(type, id))).version(version).versionType(versionType))[ CD ]
Line_7 $$ get = indexShard.get(new Engine.Get(realtime, new Term(UidFieldMapper.NAME, Uid.createUidAsBytes(typeX, id))).version(version).versionType(versionType))-->Line_37 $$ Translog.Source source = get.source()[ FD ]
Line_34 $$ if (get.docIdAndVersion() != null) -->Line_42 $$ if (docMapper.parentFieldMapper().active()) [ CD ]
Line_54 $$ for (String field : neededFields) -->Line_59 $$ if (field.equals(RoutingFieldMapper.NAME)) [ FD ]
Line_54 $$ for (String field : neededFields) -->Line_65 $$ if (field.equals(TTLFieldMapper.NAME) && docMapper.TTLFieldMapper().enabled()) [ FD ]
Line_100 $$ BytesReference sourceToBeReturned = null-->Line_117 $$ sourceToBeReturned = XContentFactory.contentBuilder(sourceContentType).map(sourceAsMap).bytes()[ FD ]
