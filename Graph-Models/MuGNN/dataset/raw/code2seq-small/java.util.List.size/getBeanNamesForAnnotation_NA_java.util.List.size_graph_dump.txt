Line_6 $$ BeanDefinition beanDefinition = getBeanDefinition(beanName)-->Line_7 $$ if (!beanDefinition.isAbstract() && findAnnotationOnBean(beanName, annotationType) != null) [ FD ]
Line_4 $$ List<String> results = new ArrayList<String>()-->Line_8 $$ results.add(beanName)[ FD ]
Line_5 $$ for (String beanName : this.beanDefinitionNames) -->Line_7 $$ if (!beanDefinition.isAbstract() && findAnnotationOnBean(beanName, annotationType) != null) [ FD ]
Line_12 $$ if (!results.contains(beanName) && findAnnotationOnBean(beanName, annotationType) != null) -->Line_13 $$ results.add(beanName)[ CD ]
Line_4 $$ List<String> results = new ArrayList<String>()-->Line_12 $$ if (!results.contains(beanName) && findAnnotationOnBean(beanName, annotationType) != null) [ FD ]
Line_4 $$ List<String> results = new ArrayList<String>()-->Line_13 $$ results.add(beanName)[ FD ]
Line_4 $$ List<String> results = new ArrayList<String>()-->Line_16 $$ return results.toArray(new String[results.size()])[ FD ]
Line_5 $$ for (String beanName : this.beanDefinitionNames) -->Line_13 $$ results.add(beanName)[ FD ]
Line_7 $$ if (!beanDefinition.isAbstract() && findAnnotationOnBean(beanName, annotationType) != null) -->Line_8 $$ results.add(beanName)[ CD ]
Line_5 $$ for (String beanName : this.beanDefinitionNames) -->Line_6 $$ BeanDefinition beanDefinition = getBeanDefinition(beanName)[ FD ]
Line_5 $$ for (String beanName : this.beanDefinitionNames) -->Line_8 $$ results.add(beanName)[ FD ]
Line_5 $$ for (String beanName : this.beanDefinitionNames) -->Line_12 $$ if (!results.contains(beanName) && findAnnotationOnBean(beanName, annotationType) != null) [ FD ]
