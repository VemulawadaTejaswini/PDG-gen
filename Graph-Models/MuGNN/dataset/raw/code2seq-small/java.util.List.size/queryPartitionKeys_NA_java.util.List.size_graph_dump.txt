Line_2 $$ protected Iterable<Row> queryPartitionKeys(CassandraTable table, List<Object> filterPrefix) -->Line_22 $$ if (!fullPartitionKey) [ CD ]
Line_30 $$ if (count == limitForPartitionKeySelect) -->Line_34 $$ return partitionKeyFuture.getUninterruptibly()[ CD ]
Line_2 $$ protected Iterable<Row> queryPartitionKeys(CassandraTable table, List<Object> filterPrefix) -->Line_6 $$ boolean fullPartitionKey = filterPrefix.size() == partitionKeyColumns.size()[ FD ]
Line_24 $$ ResultSetFuture partitionKeyFuture = executeWithSession(schemaName, new SessionCallable<ResultSetFuture>() -->Line_26 $$ return session.executeAsync(partitionKeys)[ CD ]
Line_22 $$ if (!fullPartitionKey) -->Line_29 $$ long count = countFuture.getUninterruptibly().one().getLong(0)[ CD ]
Line_2 $$ protected Iterable<Row> queryPartitionKeys(CassandraTable table, List<Object> filterPrefix) -->Line_5 $$ List<CassandraColumnHandle> partitionKeyColumns = table.getPartitionKeyColumns()[ FD ]
Line_4 $$ String schemaName = tableHandle.getSchemaName()-->Line_24 $$ ResultSetFuture partitionKeyFuture = executeWithSession(schemaName, new SessionCallable<ResultSetFuture>() [ FD ]
Line_2 $$ protected Iterable<Row> queryPartitionKeys(CassandraTable table, List<Object> filterPrefix) -->Line_6 $$ boolean fullPartitionKey = filterPrefix.size() == partitionKeyColumns.size()[ CD ]
Line_24 $$ ResultSetFuture partitionKeyFuture = executeWithSession(schemaName, new SessionCallable<ResultSetFuture>() -->Line_40 $$ return session.executeAsync(partitionKeys)[ FD ]
Line_2 $$ protected Iterable<Row> queryPartitionKeys(CassandraTable table, List<Object> filterPrefix) -->Line_8 $$ if (!fullPartitionKey) [ CD ]
Line_22 $$ if (!fullPartitionKey) -->Line_37 $$ addWhereClause(partitionKeys.where(), partitionKeyColumns, filterPrefix)[ CD ]
Line_38 $$ ResultSetFuture partitionKeyFuture = executeWithSession(schemaName, new SessionCallable<ResultSetFuture>() -->Line_40 $$ return session.executeAsync(partitionKeys)[ FD ]
Line_2 $$ protected Iterable<Row> queryPartitionKeys(CassandraTable table, List<Object> filterPrefix) -->Line_19 $$ final Select partitionKeys = CassandraCqlUtils.selectDistinctFrom(tableHandle, partitionKeyColumns)[ CD ]
Line_22 $$ if (!fullPartitionKey) -->Line_30 $$ if (count == limitForPartitionKeySelect) [ CD ]
Line_38 $$ ResultSetFuture partitionKeyFuture = executeWithSession(schemaName, new SessionCallable<ResultSetFuture>() -->Line_40 $$ return session.executeAsync(partitionKeys)[ CD ]
Line_2 $$ protected Iterable<Row> queryPartitionKeys(CassandraTable table, List<Object> filterPrefix) -->Line_21 $$ partitionKeys.setFetchSize(fetchSizeForPartitionKeySelect)[ CD ]
Line_30 $$ if (count == limitForPartitionKeySelect) -->Line_32 $$ return null[ CD ]
Line_3 $$ CassandraTableHandle tableHandle = table.getTableHandle()-->Line_4 $$ String schemaName = tableHandle.getSchemaName()[ FD ]
Line_2 $$ protected Iterable<Row> queryPartitionKeys(CassandraTable table, List<Object> filterPrefix) -->Line_20 $$ partitionKeys.limit(limit)[ CD ]
Line_7 $$ ResultSetFuture countFuture-->Line_29 $$ long count = countFuture.getUninterruptibly().one().getLong(0)[ FD ]
Line_2 $$ protected Iterable<Row> queryPartitionKeys(CassandraTable table, List<Object> filterPrefix) -->Line_7 $$ ResultSetFuture countFuture[ CD ]
Line_22 $$ if (!fullPartitionKey) -->Line_23 $$ addWhereClause(partitionKeys.where(), partitionKeyColumns, new ArrayList())[ CD ]
Line_4 $$ String schemaName = tableHandle.getSchemaName()-->Line_10 $$ countFuture = executeWithSession(schemaName, new SessionCallable<ResultSetFuture>() [ FD ]
Line_5 $$ List<CassandraColumnHandle> partitionKeyColumns = table.getPartitionKeyColumns()-->Line_6 $$ boolean fullPartitionKey = filterPrefix.size() == partitionKeyColumns.size()[ FD ]
Line_2 $$ protected Iterable<Row> queryPartitionKeys(CassandraTable table, List<Object> filterPrefix) -->Line_37 $$ addWhereClause(partitionKeys.where(), partitionKeyColumns, filterPrefix)[ FD ]
Line_4 $$ String schemaName = tableHandle.getSchemaName()-->Line_38 $$ ResultSetFuture partitionKeyFuture = executeWithSession(schemaName, new SessionCallable<ResultSetFuture>() [ FD ]
Line_24 $$ ResultSetFuture partitionKeyFuture = executeWithSession(schemaName, new SessionCallable<ResultSetFuture>() -->Line_26 $$ return session.executeAsync(partitionKeys)[ FD ]
Line_22 $$ if (!fullPartitionKey) -->Line_43 $$ return partitionKeyFuture.getUninterruptibly()[ CD ]
Line_10 $$ countFuture = executeWithSession(schemaName, new SessionCallable<ResultSetFuture>() -->Line_26 $$ return session.executeAsync(partitionKeys)[ FD ]
Line_2 $$ protected Iterable<Row> queryPartitionKeys(CassandraTable table, List<Object> filterPrefix) -->Line_3 $$ CassandraTableHandle tableHandle = table.getTableHandle()[ FD ]
Line_30 $$ if (count == limitForPartitionKeySelect) -->Line_31 $$ partitionKeyFuture.cancel(true)[ CD ]
Line_2 $$ protected Iterable<Row> queryPartitionKeys(CassandraTable table, List<Object> filterPrefix) -->Line_3 $$ CassandraTableHandle tableHandle = table.getTableHandle()[ CD ]
Line_5 $$ List<CassandraColumnHandle> partitionKeyColumns = table.getPartitionKeyColumns()-->Line_19 $$ final Select partitionKeys = CassandraCqlUtils.selectDistinctFrom(tableHandle, partitionKeyColumns)[ FD ]
Line_22 $$ if (!fullPartitionKey) -->Line_24 $$ ResultSetFuture partitionKeyFuture = executeWithSession(schemaName, new SessionCallable<ResultSetFuture>() [ CD ]
Line_22 $$ if (!fullPartitionKey) -->Line_38 $$ ResultSetFuture partitionKeyFuture = executeWithSession(schemaName, new SessionCallable<ResultSetFuture>() [ CD ]
Line_10 $$ countFuture = executeWithSession(schemaName, new SessionCallable<ResultSetFuture>() -->Line_40 $$ return session.executeAsync(partitionKeys)[ FD ]
Line_2 $$ protected Iterable<Row> queryPartitionKeys(CassandraTable table, List<Object> filterPrefix) -->Line_4 $$ String schemaName = tableHandle.getSchemaName()[ CD ]
Line_2 $$ protected Iterable<Row> queryPartitionKeys(CassandraTable table, List<Object> filterPrefix) -->Line_5 $$ List<CassandraColumnHandle> partitionKeyColumns = table.getPartitionKeyColumns()[ CD ]
Line_6 $$ boolean fullPartitionKey = filterPrefix.size() == partitionKeyColumns.size()-->Line_8 $$ if (!fullPartitionKey) [ FD ]
Line_8 $$ if (!fullPartitionKey) -->Line_9 $$ final Select countAll = CassandraCqlUtils.selectCountAllFrom(tableHandle).limit(limitForPartitionKeySelect)[ CD ]
Line_8 $$ if (!fullPartitionKey) -->Line_10 $$ countFuture = executeWithSession(schemaName, new SessionCallable<ResultSetFuture>() [ CD ]
Line_6 $$ boolean fullPartitionKey = filterPrefix.size() == partitionKeyColumns.size()-->Line_22 $$ if (!fullPartitionKey) [ FD ]
Line_10 $$ countFuture = executeWithSession(schemaName, new SessionCallable<ResultSetFuture>() -->Line_12 $$ return session.executeAsync(countAll)[ CD ]
Line_9 $$ final Select countAll = CassandraCqlUtils.selectCountAllFrom(tableHandle).limit(limitForPartitionKeySelect)-->Line_12 $$ return session.executeAsync(countAll)[ FD ]
Line_7 $$ ResultSetFuture countFuture-->Line_10 $$ countFuture = executeWithSession(schemaName, new SessionCallable<ResultSetFuture>() [ FD ]
Line_5 $$ List<CassandraColumnHandle> partitionKeyColumns = table.getPartitionKeyColumns()-->Line_23 $$ addWhereClause(partitionKeys.where(), partitionKeyColumns, new ArrayList())[ FD ]
Line_10 $$ countFuture = executeWithSession(schemaName, new SessionCallable<ResultSetFuture>() -->Line_29 $$ long count = countFuture.getUninterruptibly().one().getLong(0)[ FD ]
Line_5 $$ List<CassandraColumnHandle> partitionKeyColumns = table.getPartitionKeyColumns()-->Line_37 $$ addWhereClause(partitionKeys.where(), partitionKeyColumns, filterPrefix)[ FD ]
Line_3 $$ CassandraTableHandle tableHandle = table.getTableHandle()-->Line_19 $$ final Select partitionKeys = CassandraCqlUtils.selectDistinctFrom(tableHandle, partitionKeyColumns)[ FD ]
Line_10 $$ countFuture = executeWithSession(schemaName, new SessionCallable<ResultSetFuture>() -->Line_12 $$ return session.executeAsync(countAll)[ FD ]
Line_3 $$ CassandraTableHandle tableHandle = table.getTableHandle()-->Line_9 $$ final Select countAll = CassandraCqlUtils.selectCountAllFrom(tableHandle).limit(limitForPartitionKeySelect)[ FD ]
