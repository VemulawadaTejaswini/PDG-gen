Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_18 $$ Object[] shermanObjects = (Object[]) resultList.get(1)[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_27 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_23 $$ if (areDynamicNonLazyAssociationsChecked()) [ CD ]
Line_2 $$ public void testEntityWithJoinFetchedLazyManyToOneUsingProjectionList() throws Exception -->Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() [ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_10 $$ return s.createQuery("select s.name, s from Enrolment e left join e.student s left join fetch s.preferredCourse order by s.studentNumber")[ FD ]
Line_2 $$ public void testEntityWithJoinFetchedLazyManyToOneUsingProjectionList() throws Exception -->Line_27 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_22 $$ assertEquals(shermanExpected.getStudentNumber(), ((Student) shermanObjects[1]).getStudentNumber())[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_19 $$ assertEquals(yogiExpected.getName(), yogiObjects[0])[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Enrolment.class, "e").createAlias("e.student", "s", Criteria.LEFT_JOIN).setFetchMode("student", FetchMode.JOIN).setFetchMode("student.preferredCourse", FetchMode.JOIN).setProjection(Projections.projectionList().add(Projections.property("s.name")).add(Projections.property("e.student"))).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_8 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_10 $$ return s.createQuery("select s.name, s from Enrolment e left join e.student s left join fetch s.preferredCourse order by s.studentNumber")[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_16 $$ assertEquals(2, resultList.size())[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Enrolment.class, "e").createAlias("e.student", "s", Criteria.LEFT_JOIN).setFetchMode("student", FetchMode.JOIN).setFetchMode("student.preferredCourse", FetchMode.JOIN).setProjection(Projections.projectionList().add(Projections.property("s.name")).add(Projections.property("e.student"))).addOrder(Order.asc("s.studentNumber"))[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_21 $$ assertEquals(yogiExpected.getStudentNumber(), ((Student) yogiObjects[1]).getStudentNumber())[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_15 $$ List resultList = (List) results[ CD ]
Line_15 $$ List resultList = (List) results-->Line_18 $$ Object[] shermanObjects = (Object[]) resultList.get(1)[ FD ]
Line_8 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_10 $$ return s.createQuery("select s.name, s from Enrolment e left join e.student s left join fetch s.preferredCourse order by s.studentNumber")[ FD ]
Line_15 $$ List resultList = (List) results-->Line_17 $$ Object[] yogiObjects = (Object[]) resultList.get(0)[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_17 $$ Object[] yogiObjects = (Object[]) resultList.get(0)[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_20 $$ assertEquals(shermanExpected.getName(), shermanObjects[0])[ CD ]
Line_15 $$ List resultList = (List) results-->Line_16 $$ assertEquals(2, resultList.size())[ FD ]
