Line_3 $$ final Map<Class, Boolean> hiders = DomUtil.getFile(getDomElement()).getUserData(TREE_NODES_HIDERS_KEY)-->Line_16 $$ return hiders.get(allParents.get(0)).booleanValue()[ FD ]
Line_2 $$ protected boolean shouldBeShown(final Type type) -->Line_6 $$ final Class aClass = ReflectionUtil.getRawType(type)[ FD ]
Line_3 $$ final Map<Class, Boolean> hiders = DomUtil.getFile(getDomElement()).getUserData(TREE_NODES_HIDERS_KEY)-->Line_4 $$ if (type == null || hiders == null || hiders.size() == 0)[ FD ]
Line_8 $$ for (Map.Entry<Class, Boolean> entry : hiders.entrySet()) -->Line_9 $$ if (entry.getKey().isAssignableFrom(aClass)) [ FD ]
Line_9 $$ if (entry.getKey().isAssignableFrom(aClass)) -->Line_10 $$ allParents.add(entry.getKey())[ CD ]
Line_2 $$ protected boolean shouldBeShown(final Type type) -->Line_6 $$ final Class aClass = ReflectionUtil.getRawType(type)[ CD ]
Line_7 $$ List<Class> allParents = new ArrayList<Class>()-->Line_16 $$ return hiders.get(allParents.get(0)).booleanValue()[ FD ]
Line_13 $$ if (allParents.size() == 0)-->Line_14 $$ return false[ CD ]
Line_7 $$ List<Class> allParents = new ArrayList<Class>()-->Line_15 $$ Collections.sort(allParents, INHERITORS_COMPARATOR)[ FD ]
Line_2 $$ protected boolean shouldBeShown(final Type type) -->Line_3 $$ final Map<Class, Boolean> hiders = DomUtil.getFile(getDomElement()).getUserData(TREE_NODES_HIDERS_KEY)[ CD ]
Line_6 $$ final Class aClass = ReflectionUtil.getRawType(type)-->Line_9 $$ if (entry.getKey().isAssignableFrom(aClass)) [ FD ]
Line_2 $$ protected boolean shouldBeShown(final Type type) -->Line_15 $$ Collections.sort(allParents, INHERITORS_COMPARATOR)[ CD ]
Line_8 $$ for (Map.Entry<Class, Boolean> entry : hiders.entrySet()) -->Line_10 $$ allParents.add(entry.getKey())[ FD ]
Line_2 $$ protected boolean shouldBeShown(final Type type) -->Line_16 $$ return hiders.get(allParents.get(0)).booleanValue()[ CD ]
Line_3 $$ final Map<Class, Boolean> hiders = DomUtil.getFile(getDomElement()).getUserData(TREE_NODES_HIDERS_KEY)-->Line_8 $$ for (Map.Entry<Class, Boolean> entry : hiders.entrySet()) [ FD ]
Line_2 $$ protected boolean shouldBeShown(final Type type) -->Line_13 $$ if (allParents.size() == 0)[ CD ]
Line_2 $$ protected boolean shouldBeShown(final Type type) -->Line_4 $$ if (type == null || hiders == null || hiders.size() == 0)[ CD ]
Line_2 $$ protected boolean shouldBeShown(final Type type) -->Line_7 $$ List<Class> allParents = new ArrayList<Class>()[ CD ]
Line_7 $$ List<Class> allParents = new ArrayList<Class>()-->Line_13 $$ if (allParents.size() == 0)[ FD ]
Line_7 $$ List<Class> allParents = new ArrayList<Class>()-->Line_10 $$ allParents.add(entry.getKey())[ FD ]
Line_4 $$ if (type == null || hiders == null || hiders.size() == 0)-->Line_5 $$ return true[ CD ]
