Line_2 $$ private static boolean isEndOfGroup(final int i, final List<Key> keys, final int parentPrefixLength) -->Line_9 $$ if (prevWords.size() == parentPrefixLength)[ CD ]
Line_8 $$ List<String> prevWords = keys.get(i - 1).words-->Line_9 $$ if (prevWords.size() == parentPrefixLength)[ FD ]
Line_2 $$ private static boolean isEndOfGroup(final int i, final List<Key> keys, final int parentPrefixLength) -->Line_11 $$ if (words.size() == parentPrefixLength)[ CD ]
Line_7 $$ List<String> words = keys.get(i).words-->Line_13 $$ return !Comparing.strEqual(words.get(parentPrefixLength), prevWords.get(parentPrefixLength))[ FD ]
Line_3 $$ if (i == keys.size())-->Line_4 $$ return true[ CD ]
Line_2 $$ private static boolean isEndOfGroup(final int i, final List<Key> keys, final int parentPrefixLength) -->Line_5 $$ if (i == 0)[ FD ]
Line_7 $$ List<String> words = keys.get(i).words-->Line_11 $$ if (words.size() == parentPrefixLength)[ FD ]
Line_2 $$ private static boolean isEndOfGroup(final int i, final List<Key> keys, final int parentPrefixLength) -->Line_8 $$ List<String> prevWords = keys.get(i - 1).words[ FD ]
Line_11 $$ if (words.size() == parentPrefixLength)-->Line_12 $$ return true[ CD ]
Line_2 $$ private static boolean isEndOfGroup(final int i, final List<Key> keys, final int parentPrefixLength) -->Line_3 $$ if (i == keys.size())[ CD ]
Line_2 $$ private static boolean isEndOfGroup(final int i, final List<Key> keys, final int parentPrefixLength) -->Line_3 $$ if (i == keys.size())[ FD ]
Line_2 $$ private static boolean isEndOfGroup(final int i, final List<Key> keys, final int parentPrefixLength) -->Line_11 $$ if (words.size() == parentPrefixLength)[ FD ]
Line_2 $$ private static boolean isEndOfGroup(final int i, final List<Key> keys, final int parentPrefixLength) -->Line_7 $$ List<String> words = keys.get(i).words[ CD ]
Line_8 $$ List<String> prevWords = keys.get(i - 1).words-->Line_13 $$ return !Comparing.strEqual(words.get(parentPrefixLength), prevWords.get(parentPrefixLength))[ FD ]
Line_2 $$ private static boolean isEndOfGroup(final int i, final List<Key> keys, final int parentPrefixLength) -->Line_13 $$ return !Comparing.strEqual(words.get(parentPrefixLength), prevWords.get(parentPrefixLength))[ FD ]
Line_2 $$ private static boolean isEndOfGroup(final int i, final List<Key> keys, final int parentPrefixLength) -->Line_13 $$ return !Comparing.strEqual(words.get(parentPrefixLength), prevWords.get(parentPrefixLength))[ CD ]
Line_2 $$ private static boolean isEndOfGroup(final int i, final List<Key> keys, final int parentPrefixLength) -->Line_7 $$ List<String> words = keys.get(i).words[ FD ]
Line_2 $$ private static boolean isEndOfGroup(final int i, final List<Key> keys, final int parentPrefixLength) -->Line_5 $$ if (i == 0)[ CD ]
Line_2 $$ private static boolean isEndOfGroup(final int i, final List<Key> keys, final int parentPrefixLength) -->Line_9 $$ if (prevWords.size() == parentPrefixLength)[ FD ]
Line_9 $$ if (prevWords.size() == parentPrefixLength)-->Line_10 $$ return true[ CD ]
Line_5 $$ if (i == 0)-->Line_6 $$ return false[ CD ]
Line_2 $$ private static boolean isEndOfGroup(final int i, final List<Key> keys, final int parentPrefixLength) -->Line_8 $$ List<String> prevWords = keys.get(i - 1).words[ CD ]
