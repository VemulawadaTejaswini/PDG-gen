Line_9 $$ if (!generator.generateInStartOffsetOrder(new Processor<T>() -->Line_28 $$ if (!sweepProcessor.process(start, marker, true, ends))[ CD ]
Line_2 $$ public static <T extends Segment> boolean sweep(@NotNull Generator<T> generator, @NotNull final SweepProcessor<T> sweepProcessor) -->Line_9 $$ if (!generator.generateInStartOffsetOrder(new Processor<T>() [ FD ]
Line_3 $$ final Queue<T> ends = new PriorityQueue<T>(5, new Comparator<T>() -->Line_14 $$ T previous = ends.peek()[ FD ]
Line_14 $$ T previous = ends.peek()-->Line_21 $$ boolean removed = starts.remove(previous)[ FD ]
Line_9 $$ if (!generator.generateInStartOffsetOrder(new Processor<T>() -->Line_28 $$ if (!sweepProcessor.process(start, marker, true, ends))[ FD ]
Line_9 $$ if (!generator.generateInStartOffsetOrder(new Processor<T>() -->Line_30 $$ starts.add(marker)[ CD ]
Line_9 $$ if (!generator.generateInStartOffsetOrder(new Processor<T>() -->Line_11 $$ int start = marker.getStartOffset()[ CD ]
Line_3 $$ final Queue<T> ends = new PriorityQueue<T>(5, new Comparator<T>() -->Line_20 $$ ends.remove()[ FD ]
Line_3 $$ final Queue<T> ends = new PriorityQueue<T>(5, new Comparator<T>() -->Line_31 $$ ends.offer(marker)[ FD ]
Line_3 $$ final Queue<T> ends = new PriorityQueue<T>(5, new Comparator<T>() -->Line_37 $$ assert ends.size() == starts.size()[ FD ]
Line_36 $$ while (!ends.isEmpty()) -->Line_39 $$ int prevEnd = previous.getEndOffset()[ CD ]
Line_38 $$ T previous = ends.remove()-->Line_42 $$ boolean removed = starts.remove(previous)[ FD ]
Line_12 $$ while (true) -->Line_14 $$ T previous = ends.peek()[ CD ]
Line_9 $$ if (!generator.generateInStartOffsetOrder(new Processor<T>() -->Line_11 $$ int start = marker.getStartOffset()[ FD ]
Line_14 $$ T previous = ends.peek()-->Line_16 $$ int prevEnd = previous.getEndOffset()[ FD ]
Line_3 $$ final Queue<T> ends = new PriorityQueue<T>(5, new Comparator<T>() -->Line_36 $$ while (!ends.isEmpty()) [ FD ]
Line_3 $$ final Queue<T> ends = new PriorityQueue<T>(5, new Comparator<T>() -->Line_13 $$ assert ends.size() == starts.size()[ FD ]
Line_18 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))-->Line_19 $$ return false[ CD ]
Line_17 $$ if (prevEnd <= start) -->Line_21 $$ boolean removed = starts.remove(previous)[ CD ]
Line_36 $$ while (!ends.isEmpty()) -->Line_42 $$ boolean removed = starts.remove(previous)[ CD ]
Line_9 $$ if (!generator.generateInStartOffsetOrder(new Processor<T>() -->Line_12 $$ while (true) [ CD ]
Line_14 $$ T previous = ends.peek()-->Line_15 $$ if (previous != null) [ FD ]
Line_9 $$ if (!generator.generateInStartOffsetOrder(new Processor<T>() -->Line_35 $$ return false[ CD ]
Line_17 $$ if (prevEnd <= start) -->Line_20 $$ ends.remove()[ CD ]
Line_14 $$ T previous = ends.peek()-->Line_40 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))[ FD ]
Line_2 $$ public static <T extends Segment> boolean sweep(@NotNull Generator<T> generator, @NotNull final SweepProcessor<T> sweepProcessor) -->Line_45 $$ return true[ CD ]
Line_9 $$ if (!generator.generateInStartOffsetOrder(new Processor<T>() -->Line_31 $$ ends.offer(marker)[ CD ]
Line_40 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))-->Line_41 $$ return false[ CD ]
Line_2 $$ public static <T extends Segment> boolean sweep(@NotNull Generator<T> generator, @NotNull final SweepProcessor<T> sweepProcessor) -->Line_3 $$ final Queue<T> ends = new PriorityQueue<T>(5, new Comparator<T>() [ CD ]
Line_2 $$ public static <T extends Segment> boolean sweep(@NotNull Generator<T> generator, @NotNull final SweepProcessor<T> sweepProcessor) -->Line_28 $$ if (!sweepProcessor.process(start, marker, true, ends))[ FD ]
Line_36 $$ while (!ends.isEmpty()) -->Line_40 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))[ CD ]
Line_2 $$ public static <T extends Segment> boolean sweep(@NotNull Generator<T> generator, @NotNull final SweepProcessor<T> sweepProcessor) -->Line_36 $$ while (!ends.isEmpty()) [ CD ]
Line_11 $$ int start = marker.getStartOffset()-->Line_28 $$ if (!sweepProcessor.process(start, marker, true, ends))[ FD ]
Line_9 $$ if (!generator.generateInStartOffsetOrder(new Processor<T>() -->Line_30 $$ starts.add(marker)[ FD ]
Line_3 $$ final Queue<T> ends = new PriorityQueue<T>(5, new Comparator<T>() -->Line_5 $$ return o1.getEndOffset() - o2.getEndOffset()[ FD ]
Line_15 $$ if (previous != null) -->Line_16 $$ int prevEnd = previous.getEndOffset()[ CD ]
Line_39 $$ int prevEnd = previous.getEndOffset()-->Line_40 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))[ FD ]
Line_14 $$ T previous = ends.peek()-->Line_42 $$ boolean removed = starts.remove(previous)[ FD ]
Line_14 $$ T previous = ends.peek()-->Line_39 $$ int prevEnd = previous.getEndOffset()[ FD ]
Line_16 $$ int prevEnd = previous.getEndOffset()-->Line_40 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))[ FD ]
Line_28 $$ if (!sweepProcessor.process(start, marker, true, ends))-->Line_29 $$ return false[ CD ]
Line_3 $$ final Queue<T> ends = new PriorityQueue<T>(5, new Comparator<T>() -->Line_40 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))[ FD ]
Line_2 $$ public static <T extends Segment> boolean sweep(@NotNull Generator<T> generator, @NotNull final SweepProcessor<T> sweepProcessor) -->Line_18 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))[ FD ]
Line_16 $$ int prevEnd = previous.getEndOffset()-->Line_18 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))[ FD ]
Line_9 $$ if (!generator.generateInStartOffsetOrder(new Processor<T>() -->Line_31 $$ ends.offer(marker)[ FD ]
Line_11 $$ int start = marker.getStartOffset()-->Line_17 $$ if (prevEnd <= start) [ FD ]
Line_3 $$ final Queue<T> ends = new PriorityQueue<T>(5, new Comparator<T>() -->Line_18 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))[ FD ]
Line_9 $$ if (!generator.generateInStartOffsetOrder(new Processor<T>() -->Line_32 $$ return true[ CD ]
Line_38 $$ T previous = ends.remove()-->Line_40 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))[ FD ]
Line_3 $$ final Queue<T> ends = new PriorityQueue<T>(5, new Comparator<T>() -->Line_28 $$ if (!sweepProcessor.process(start, marker, true, ends))[ FD ]
Line_17 $$ if (prevEnd <= start) -->Line_18 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))[ CD ]
Line_15 $$ if (previous != null) -->Line_17 $$ if (prevEnd <= start) [ CD ]
Line_36 $$ while (!ends.isEmpty()) -->Line_38 $$ T previous = ends.remove()[ CD ]
Line_38 $$ T previous = ends.remove()-->Line_39 $$ int prevEnd = previous.getEndOffset()[ FD ]
Line_2 $$ public static <T extends Segment> boolean sweep(@NotNull Generator<T> generator, @NotNull final SweepProcessor<T> sweepProcessor) -->Line_40 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))[ FD ]
Line_3 $$ final Queue<T> ends = new PriorityQueue<T>(5, new Comparator<T>() -->Line_38 $$ T previous = ends.remove()[ FD ]
Line_3 $$ final Queue<T> ends = new PriorityQueue<T>(5, new Comparator<T>() -->Line_5 $$ return o1.getEndOffset() - o2.getEndOffset()[ CD ]
Line_12 $$ while (true) -->Line_15 $$ if (previous != null) [ CD ]
Line_16 $$ int prevEnd = previous.getEndOffset()-->Line_17 $$ if (prevEnd <= start) [ FD ]
Line_14 $$ T previous = ends.peek()-->Line_18 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))[ FD ]
Line_2 $$ public static <T extends Segment> boolean sweep(@NotNull Generator<T> generator, @NotNull final SweepProcessor<T> sweepProcessor) -->Line_9 $$ if (!generator.generateInStartOffsetOrder(new Processor<T>() [ CD ]
