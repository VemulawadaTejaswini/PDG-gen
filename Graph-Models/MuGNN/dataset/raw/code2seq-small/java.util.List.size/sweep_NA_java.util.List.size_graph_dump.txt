Line_2 $$ public static <T extends Segment> boolean sweep(@NotNull Generator<T> generator, @NotNull final SweepProcessor<T> sweepProcessor) -->Line_41 $$ while (!ends.isEmpty()) [ CD ]
Line_19 $$ T previous = ends.peek()-->Line_47 $$ boolean removed = starts.remove(previous)[ FD ]
Line_2 $$ public static <T extends Segment> boolean sweep(@NotNull Generator<T> generator, @NotNull final SweepProcessor<T> sweepProcessor) -->Line_50 $$ return true[ CD ]
Line_21 $$ int prevEnd = previous.getEndOffset()-->Line_23 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))[ FD ]
Line_19 $$ T previous = ends.peek()-->Line_26 $$ boolean removed = starts.remove(previous)[ FD ]
Line_11 $$ if (!generator.generateInStartOffsetOrder(new Processor<T>() -->Line_35 $$ starts.add(marker)[ CD ]
Line_11 $$ if (!generator.generateInStartOffsetOrder(new Processor<T>() -->Line_33 $$ if (!sweepProcessor.process(start, marker, true, ends))[ FD ]
Line_19 $$ T previous = ends.peek()-->Line_44 $$ int prevEnd = previous.getEndOffset()[ FD ]
Line_11 $$ if (!generator.generateInStartOffsetOrder(new Processor<T>() -->Line_40 $$ return false[ CD ]
Line_23 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))-->Line_24 $$ return false[ CD ]
Line_43 $$ T previous = ends.remove()-->Line_44 $$ int prevEnd = previous.getEndOffset()[ FD ]
Line_2 $$ public static <T extends Segment> boolean sweep(@NotNull Generator<T> generator, @NotNull final SweepProcessor<T> sweepProcessor) -->Line_45 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))[ FD ]
Line_33 $$ if (!sweepProcessor.process(start, marker, true, ends))-->Line_34 $$ return false[ CD ]
Line_17 $$ while (true) -->Line_19 $$ T previous = ends.peek()[ CD ]
Line_11 $$ if (!generator.generateInStartOffsetOrder(new Processor<T>() -->Line_36 $$ ends.offer(marker)[ FD ]
Line_41 $$ while (!ends.isEmpty()) -->Line_45 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))[ CD ]
Line_44 $$ int prevEnd = previous.getEndOffset()-->Line_45 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))[ FD ]
Line_11 $$ if (!generator.generateInStartOffsetOrder(new Processor<T>() -->Line_37 $$ return true[ CD ]
Line_2 $$ public static <T extends Segment> boolean sweep(@NotNull Generator<T> generator, @NotNull final SweepProcessor<T> sweepProcessor) -->Line_3 $$ final Queue<T> ends = new PriorityQueue<T>(5, new Comparator<T>() [ CD ]
Line_19 $$ T previous = ends.peek()-->Line_21 $$ int prevEnd = previous.getEndOffset()[ FD ]
Line_11 $$ if (!generator.generateInStartOffsetOrder(new Processor<T>() -->Line_33 $$ if (!sweepProcessor.process(start, marker, true, ends))[ CD ]
Line_11 $$ if (!generator.generateInStartOffsetOrder(new Processor<T>() -->Line_36 $$ ends.offer(marker)[ CD ]
Line_21 $$ int prevEnd = previous.getEndOffset()-->Line_45 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))[ FD ]
Line_41 $$ while (!ends.isEmpty()) -->Line_47 $$ boolean removed = starts.remove(previous)[ CD ]
Line_3 $$ final Queue<T> ends = new PriorityQueue<T>(5, new Comparator<T>() -->Line_7 $$ return o1.getEndOffset() - o2.getEndOffset()[ FD ]
Line_3 $$ final Queue<T> ends = new PriorityQueue<T>(5, new Comparator<T>() -->Line_45 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))[ FD ]
Line_3 $$ final Queue<T> ends = new PriorityQueue<T>(5, new Comparator<T>() -->Line_7 $$ return o1.getEndOffset() - o2.getEndOffset()[ CD ]
Line_2 $$ public static <T extends Segment> boolean sweep(@NotNull Generator<T> generator, @NotNull final SweepProcessor<T> sweepProcessor) -->Line_11 $$ if (!generator.generateInStartOffsetOrder(new Processor<T>() [ CD ]
Line_19 $$ T previous = ends.peek()-->Line_23 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))[ FD ]
Line_43 $$ T previous = ends.remove()-->Line_47 $$ boolean removed = starts.remove(previous)[ FD ]
Line_41 $$ while (!ends.isEmpty()) -->Line_43 $$ T previous = ends.remove()[ CD ]
Line_3 $$ final Queue<T> ends = new PriorityQueue<T>(5, new Comparator<T>() -->Line_33 $$ if (!sweepProcessor.process(start, marker, true, ends))[ FD ]
Line_22 $$ if (prevEnd <= start) -->Line_23 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))[ CD ]
Line_21 $$ int prevEnd = previous.getEndOffset()-->Line_22 $$ if (prevEnd <= start) [ FD ]
Line_17 $$ while (true) -->Line_20 $$ if (previous != null) [ CD ]
Line_20 $$ if (previous != null) -->Line_22 $$ if (prevEnd <= start) [ CD ]
Line_3 $$ final Queue<T> ends = new PriorityQueue<T>(5, new Comparator<T>() -->Line_19 $$ T previous = ends.peek()[ FD ]
Line_3 $$ final Queue<T> ends = new PriorityQueue<T>(5, new Comparator<T>() -->Line_23 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))[ FD ]
Line_22 $$ if (prevEnd <= start) -->Line_26 $$ boolean removed = starts.remove(previous)[ CD ]
Line_3 $$ final Queue<T> ends = new PriorityQueue<T>(5, new Comparator<T>() -->Line_43 $$ T previous = ends.remove()[ FD ]
Line_45 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))-->Line_46 $$ return false[ CD ]
Line_11 $$ if (!generator.generateInStartOffsetOrder(new Processor<T>() -->Line_17 $$ while (true) [ CD ]
Line_19 $$ T previous = ends.peek()-->Line_20 $$ if (previous != null) [ FD ]
Line_19 $$ T previous = ends.peek()-->Line_45 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))[ FD ]
Line_3 $$ final Queue<T> ends = new PriorityQueue<T>(5, new Comparator<T>() -->Line_36 $$ ends.offer(marker)[ FD ]
Line_20 $$ if (previous != null) -->Line_21 $$ int prevEnd = previous.getEndOffset()[ CD ]
Line_2 $$ public static <T extends Segment> boolean sweep(@NotNull Generator<T> generator, @NotNull final SweepProcessor<T> sweepProcessor) -->Line_23 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))[ FD ]
Line_3 $$ final Queue<T> ends = new PriorityQueue<T>(5, new Comparator<T>() -->Line_25 $$ ends.remove()[ FD ]
Line_2 $$ public static <T extends Segment> boolean sweep(@NotNull Generator<T> generator, @NotNull final SweepProcessor<T> sweepProcessor) -->Line_33 $$ if (!sweepProcessor.process(start, marker, true, ends))[ FD ]
Line_3 $$ final Queue<T> ends = new PriorityQueue<T>(5, new Comparator<T>() -->Line_41 $$ while (!ends.isEmpty()) [ FD ]
Line_41 $$ while (!ends.isEmpty()) -->Line_44 $$ int prevEnd = previous.getEndOffset()[ CD ]
Line_11 $$ if (!generator.generateInStartOffsetOrder(new Processor<T>() -->Line_35 $$ starts.add(marker)[ FD ]
Line_22 $$ if (prevEnd <= start) -->Line_25 $$ ends.remove()[ CD ]
Line_43 $$ T previous = ends.remove()-->Line_45 $$ if (!sweepProcessor.process(prevEnd, previous, false, ends))[ FD ]
Line_3 $$ final Queue<T> ends = new PriorityQueue<T>(5, new Comparator<T>() -->Line_18 $$ assert ends.size() == starts.size()[ FD ]
Line_3 $$ final Queue<T> ends = new PriorityQueue<T>(5, new Comparator<T>() -->Line_42 $$ assert ends.size() == starts.size()[ FD ]
Line_2 $$ public static <T extends Segment> boolean sweep(@NotNull Generator<T> generator, @NotNull final SweepProcessor<T> sweepProcessor) -->Line_11 $$ if (!generator.generateInStartOffsetOrder(new Processor<T>() [ FD ]
