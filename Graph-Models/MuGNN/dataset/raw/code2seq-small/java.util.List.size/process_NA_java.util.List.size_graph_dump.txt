Line_2 $$ public void process(@NotNull List<String> methodCallInfo, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_9 $$ if (methodCallInfo.size() == 2) [ FD ]
Line_2 $$ public void process(@NotNull List<String> methodCallInfo, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_20 $$ GradleResolverUtil.addImplicitVariable(processor, state, place, GradleCommonClassNames.GRADLE_API_SOURCE_SET_CONTAINER)[ FD ]
Line_16 $$ if (methodCallInfo.size() >= 3) -->Line_22 $$ if (place.getText().equals(GradleDistributionsContributor.DISTRIBUTIONS) && StringUtil.startsWith(methodCallInfo.get(0), GradleDistributionsContributor.DISTRIBUTIONS + '.')) [ CD ]
Line_2 $$ public void process(@NotNull List<String> methodCallInfo, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_19 $$ if (place.getText().equals(GradleSourceSetsContributor.SOURCE_SETS) && StringUtil.startsWith(methodCallInfo.get(0), GradleSourceSetsContributor.SOURCE_SETS + '.')) [ FD ]
Line_2 $$ public void process(@NotNull List<String> methodCallInfo, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_22 $$ if (place.getText().equals(GradleDistributionsContributor.DISTRIBUTIONS) && StringUtil.startsWith(methodCallInfo.get(0), GradleDistributionsContributor.DISTRIBUTIONS + '.')) [ FD ]
Line_2 $$ public void process(@NotNull List<String> methodCallInfo, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_5 $$ if (methodCallInfo.size() == 1) [ CD ]
Line_5 $$ if (methodCallInfo.size() == 1) -->Line_6 $$ if (GradleResolverUtil.isLShiftElement(place.getParent())) [ CD ]
Line_2 $$ public void process(@NotNull List<String> methodCallInfo, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_16 $$ if (methodCallInfo.size() >= 3) [ FD ]
Line_16 $$ if (methodCallInfo.size() >= 3) -->Line_17 $$ processTaskTypeParameter(methodCallInfo.get(0), processor, state, place)[ CD ]
Line_2 $$ public void process(@NotNull List<String> methodCallInfo, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_6 $$ if (GradleResolverUtil.isLShiftElement(place.getParent())) [ FD ]
Line_2 $$ public void process(@NotNull List<String> methodCallInfo, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_10 $$ if (place.getParent().getParent() instanceof GrCommandArgumentList) [ FD ]
Line_6 $$ if (GradleResolverUtil.isLShiftElement(place.getParent())) -->Line_7 $$ GradleResolverUtil.addImplicitVariable(processor, state, place, GradleCommonClassNames.GRADLE_API_TASK)[ CD ]
Line_2 $$ public void process(@NotNull List<String> methodCallInfo, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_7 $$ GradleResolverUtil.addImplicitVariable(processor, state, place, GradleCommonClassNames.GRADLE_API_TASK)[ FD ]
Line_19 $$ if (place.getText().equals(GradleSourceSetsContributor.SOURCE_SETS) && StringUtil.startsWith(methodCallInfo.get(0), GradleSourceSetsContributor.SOURCE_SETS + '.')) -->Line_20 $$ GradleResolverUtil.addImplicitVariable(processor, state, place, GradleCommonClassNames.GRADLE_API_SOURCE_SET_CONTAINER)[ CD ]
Line_22 $$ if (place.getText().equals(GradleDistributionsContributor.DISTRIBUTIONS) && StringUtil.startsWith(methodCallInfo.get(0), GradleDistributionsContributor.DISTRIBUTIONS + '.')) -->Line_23 $$ GradleResolverUtil.addImplicitVariable(processor, state, place, GradleCommonClassNames.GRADLE_API_DISTRIBUTION_CONTAINER)[ CD ]
Line_10 $$ if (place.getParent().getParent() instanceof GrCommandArgumentList) -->Line_11 $$ processTaskAddition(methodCallInfo.get(0), GradleCommonClassNames.GRADLE_API_TASK_CONTAINER, processor, state, place)[ CD ]
Line_2 $$ public void process(@NotNull List<String> methodCallInfo, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_3 $$ if (methodCallInfo.isEmpty())[ FD ]
Line_3 $$ if (methodCallInfo.isEmpty())-->Line_4 $$ return[ CD ]
Line_5 $$ if (methodCallInfo.size() == 1) -->Line_9 $$ if (methodCallInfo.size() == 2) [ CD ]
Line_2 $$ public void process(@NotNull List<String> methodCallInfo, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_15 $$ GradleImplicitContributor.processImplicitDeclarations(processor, state, place)[ FD ]
Line_2 $$ public void process(@NotNull List<String> methodCallInfo, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_11 $$ processTaskAddition(methodCallInfo.get(0), GradleCommonClassNames.GRADLE_API_TASK_CONTAINER, processor, state, place)[ FD ]
Line_16 $$ if (methodCallInfo.size() >= 3) -->Line_19 $$ if (place.getText().equals(GradleSourceSetsContributor.SOURCE_SETS) && StringUtil.startsWith(methodCallInfo.get(0), GradleSourceSetsContributor.SOURCE_SETS + '.')) [ CD ]
Line_9 $$ if (methodCallInfo.size() == 2) -->Line_15 $$ GradleImplicitContributor.processImplicitDeclarations(processor, state, place)[ CD ]
Line_9 $$ if (methodCallInfo.size() == 2) -->Line_16 $$ if (methodCallInfo.size() >= 3) [ CD ]
Line_2 $$ public void process(@NotNull List<String> methodCallInfo, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_18 $$ GradleImplicitContributor.processImplicitDeclarations(processor, state, place)[ FD ]
Line_9 $$ if (methodCallInfo.size() == 2) -->Line_10 $$ if (place.getParent().getParent() instanceof GrCommandArgumentList) [ CD ]
Line_2 $$ public void process(@NotNull List<String> methodCallInfo, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_17 $$ processTaskTypeParameter(methodCallInfo.get(0), processor, state, place)[ FD ]
Line_2 $$ public void process(@NotNull List<String> methodCallInfo, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_3 $$ if (methodCallInfo.isEmpty())[ CD ]
Line_2 $$ public void process(@NotNull List<String> methodCallInfo, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_13 $$ processTaskTypeParameter(methodCallInfo.get(0), processor, state, place)[ FD ]
Line_16 $$ if (methodCallInfo.size() >= 3) -->Line_18 $$ GradleImplicitContributor.processImplicitDeclarations(processor, state, place)[ CD ]
Line_2 $$ public void process(@NotNull List<String> methodCallInfo, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_23 $$ GradleResolverUtil.addImplicitVariable(processor, state, place, GradleCommonClassNames.GRADLE_API_DISTRIBUTION_CONTAINER)[ FD ]
Line_10 $$ if (place.getParent().getParent() instanceof GrCommandArgumentList) -->Line_13 $$ processTaskTypeParameter(methodCallInfo.get(0), processor, state, place)[ CD ]
Line_2 $$ public void process(@NotNull List<String> methodCallInfo, @NotNull PsiScopeProcessor processor, @NotNull ResolveState state, @NotNull PsiElement place) -->Line_5 $$ if (methodCallInfo.size() == 1) [ FD ]
