Line_2 $$ public void testOrderedWithCustomColumnReadAndWrite() -->Line_9 $$ second.setNegatedNumber(2)[ CD ]
Line_2 $$ public void testOrderedWithCustomColumnReadAndWrite() -->Line_19 $$ assertEquals(second.getId(), ((SimpleEntityWithAssociation) listViaHql.get(1)).getId())[ CD ]
Line_2 $$ public void testOrderedWithCustomColumnReadAndWrite() -->Line_13 $$ assertEquals(2, listViaSql.size())[ CD ]
Line_2 $$ public void testOrderedWithCustomColumnReadAndWrite() -->Line_22 $$ t.commit()[ CD ]
Line_2 $$ public void testOrderedWithCustomColumnReadAndWrite() -->Line_7 $$ s.save(first)[ CD ]
Line_12 $$ List listViaSql = s.createSQLQuery("select id from SIMPLE_1 order by negated_num").list()-->Line_13 $$ assertEquals(2, listViaSql.size())[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_22 $$ t.commit()[ FD ]
Line_2 $$ public void testOrderedWithCustomColumnReadAndWrite() -->Line_18 $$ assertEquals(first.getId(), ((SimpleEntityWithAssociation) listViaHql.get(0)).getId())[ CD ]
Line_3 $$ Session s = openSession()-->Line_12 $$ List listViaSql = s.createSQLQuery("select id from SIMPLE_1 order by negated_num").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_23 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_7 $$ s.save(first)[ FD ]
Line_5 $$ SimpleEntityWithAssociation first = new SimpleEntityWithAssociation()-->Line_6 $$ first.setNegatedNumber(1)[ FD ]
Line_2 $$ public void testOrderedWithCustomColumnReadAndWrite() -->Line_8 $$ SimpleEntityWithAssociation second = new SimpleEntityWithAssociation()[ CD ]
Line_3 $$ Session s = openSession()-->Line_11 $$ s.flush()[ FD ]
Line_3 $$ Session s = openSession()-->Line_21 $$ s.delete(second)[ FD ]
Line_5 $$ SimpleEntityWithAssociation first = new SimpleEntityWithAssociation()-->Line_20 $$ s.delete(first)[ FD ]
Line_16 $$ List listViaHql = s.createQuery("from SimpleEntityWithAssociation order by negatedNumber").list()-->Line_19 $$ assertEquals(second.getId(), ((SimpleEntityWithAssociation) listViaHql.get(1)).getId())[ FD ]
Line_2 $$ public void testOrderedWithCustomColumnReadAndWrite() -->Line_4 $$ Transaction t = s.beginTransaction()[ CD ]
Line_5 $$ SimpleEntityWithAssociation first = new SimpleEntityWithAssociation()-->Line_15 $$ assertEquals(first.getId().longValue(), ((Number) listViaSql.get(1)).longValue())[ FD ]
Line_3 $$ Session s = openSession()-->Line_20 $$ s.delete(first)[ FD ]
Line_5 $$ SimpleEntityWithAssociation first = new SimpleEntityWithAssociation()-->Line_18 $$ assertEquals(first.getId(), ((SimpleEntityWithAssociation) listViaHql.get(0)).getId())[ FD ]
Line_3 $$ Session s = openSession()-->Line_10 $$ s.save(second)[ FD ]
Line_2 $$ public void testOrderedWithCustomColumnReadAndWrite() -->Line_11 $$ s.flush()[ CD ]
Line_2 $$ public void testOrderedWithCustomColumnReadAndWrite() -->Line_15 $$ assertEquals(first.getId().longValue(), ((Number) listViaSql.get(1)).longValue())[ CD ]
Line_8 $$ SimpleEntityWithAssociation second = new SimpleEntityWithAssociation()-->Line_14 $$ assertEquals(second.getId().longValue(), ((Number) listViaSql.get(0)).longValue())[ FD ]
Line_2 $$ public void testOrderedWithCustomColumnReadAndWrite() -->Line_10 $$ s.save(second)[ CD ]
Line_2 $$ public void testOrderedWithCustomColumnReadAndWrite() -->Line_6 $$ first.setNegatedNumber(1)[ CD ]
Line_2 $$ public void testOrderedWithCustomColumnReadAndWrite() -->Line_3 $$ Session s = openSession()[ CD ]
Line_8 $$ SimpleEntityWithAssociation second = new SimpleEntityWithAssociation()-->Line_10 $$ s.save(second)[ FD ]
Line_2 $$ public void testOrderedWithCustomColumnReadAndWrite() -->Line_17 $$ assertEquals(2, listViaHql.size())[ CD ]
Line_3 $$ Session s = openSession()-->Line_16 $$ List listViaHql = s.createQuery("from SimpleEntityWithAssociation order by negatedNumber").list()[ FD ]
Line_8 $$ SimpleEntityWithAssociation second = new SimpleEntityWithAssociation()-->Line_21 $$ s.delete(second)[ FD ]
Line_2 $$ public void testOrderedWithCustomColumnReadAndWrite() -->Line_14 $$ assertEquals(second.getId().longValue(), ((Number) listViaSql.get(0)).longValue())[ CD ]
Line_5 $$ SimpleEntityWithAssociation first = new SimpleEntityWithAssociation()-->Line_7 $$ s.save(first)[ FD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ Transaction t = s.beginTransaction()[ FD ]
Line_2 $$ public void testOrderedWithCustomColumnReadAndWrite() -->Line_16 $$ List listViaHql = s.createQuery("from SimpleEntityWithAssociation order by negatedNumber").list()[ CD ]
Line_16 $$ List listViaHql = s.createQuery("from SimpleEntityWithAssociation order by negatedNumber").list()-->Line_18 $$ assertEquals(first.getId(), ((SimpleEntityWithAssociation) listViaHql.get(0)).getId())[ FD ]
Line_8 $$ SimpleEntityWithAssociation second = new SimpleEntityWithAssociation()-->Line_19 $$ assertEquals(second.getId(), ((SimpleEntityWithAssociation) listViaHql.get(1)).getId())[ FD ]
Line_2 $$ public void testOrderedWithCustomColumnReadAndWrite() -->Line_12 $$ List listViaSql = s.createSQLQuery("select id from SIMPLE_1 order by negated_num").list()[ CD ]
Line_2 $$ public void testOrderedWithCustomColumnReadAndWrite() -->Line_20 $$ s.delete(first)[ CD ]
Line_2 $$ public void testOrderedWithCustomColumnReadAndWrite() -->Line_21 $$ s.delete(second)[ CD ]
Line_12 $$ List listViaSql = s.createSQLQuery("select id from SIMPLE_1 order by negated_num").list()-->Line_15 $$ assertEquals(first.getId().longValue(), ((Number) listViaSql.get(1)).longValue())[ FD ]
Line_16 $$ List listViaHql = s.createQuery("from SimpleEntityWithAssociation order by negatedNumber").list()-->Line_17 $$ assertEquals(2, listViaHql.size())[ FD ]
Line_2 $$ public void testOrderedWithCustomColumnReadAndWrite() -->Line_5 $$ SimpleEntityWithAssociation first = new SimpleEntityWithAssociation()[ CD ]
Line_12 $$ List listViaSql = s.createSQLQuery("select id from SIMPLE_1 order by negated_num").list()-->Line_14 $$ assertEquals(second.getId().longValue(), ((Number) listViaSql.get(0)).longValue())[ FD ]
Line_2 $$ public void testOrderedWithCustomColumnReadAndWrite() -->Line_23 $$ s.close()[ CD ]
Line_8 $$ SimpleEntityWithAssociation second = new SimpleEntityWithAssociation()-->Line_9 $$ second.setNegatedNumber(2)[ FD ]
