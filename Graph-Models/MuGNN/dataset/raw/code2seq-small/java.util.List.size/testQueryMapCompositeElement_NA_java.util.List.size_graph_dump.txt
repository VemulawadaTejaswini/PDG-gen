Line_7 $$ Product prod = new Product("Some Thing")-->Line_36 $$ s.delete(prod)[ FD ]
Line_3 $$ Session s = openSession()-->Line_38 $$ s.close()[ FD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_25 $$ assertEquals(part.getDescription(), "The top part")[ CD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_22 $$ assertTrue(list.get(0) instanceof Part)[ CD ]
Line_13 $$ List list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part order by part.name desc").list()-->Line_15 $$ assertTrue(list.get(0) instanceof Part)[ FD ]
Line_17 $$ Part part = (Part) list.get(0)-->Line_19 $$ assertEquals(part.getDescription(), "The top part")[ FD ]
Line_13 $$ List list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part order by part.name desc").list()-->Line_31 $$ assertSame(list.get(0), item)[ FD ]
Line_20 $$ list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part where index(part) = 'Top'").list()-->Line_30 $$ assertEquals(list.size(), 1)[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_37 $$ t.commit()[ FD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_24 $$ assertEquals(part.getName(), "top")[ CD ]
Line_13 $$ List list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part order by part.name desc").list()-->Line_20 $$ list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part where index(part) = 'Top'").list()[ FD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_15 $$ assertTrue(list.get(0) instanceof Part)[ CD ]
Line_23 $$ part = (Part) list.get(0)-->Line_24 $$ assertEquals(part.getName(), "top")[ FD ]
Line_3 $$ Session s = openSession()-->Line_32 $$ list = s.createQuery("from Item i where 'Top' in indices(i.product.parts)").list()[ FD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_17 $$ Part part = (Part) list.get(0)[ CD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ Transaction t = s.beginTransaction()[ FD ]
Line_23 $$ part = (Part) list.get(0)-->Line_25 $$ assertEquals(part.getDescription(), "The top part")[ FD ]
Line_13 $$ List list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part order by part.name desc").list()-->Line_17 $$ Part part = (Part) list.get(0)[ FD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_29 $$ list = s.createQuery("select i from Item i join i.product p where 'Top' in indices(p.parts)").list()[ CD ]
Line_20 $$ list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part where index(part) = 'Top'").list()-->Line_32 $$ list = s.createQuery("from Item i where 'Top' in indices(i.product.parts)").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_36 $$ s.delete(prod)[ FD ]
Line_17 $$ Part part = (Part) list.get(0)-->Line_24 $$ assertEquals(part.getName(), "top")[ FD ]
Line_20 $$ list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part where index(part) = 'Top'").list()-->Line_26 $$ list = s.createQuery("from Product p where 'Top' in indices(p.parts)").list()[ FD ]
Line_20 $$ list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part where index(part) = 'Top'").list()-->Line_21 $$ assertEquals(list.size(), 1)[ FD ]
Line_13 $$ List list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part order by part.name desc").list()-->Line_26 $$ list = s.createQuery("from Product p where 'Top' in indices(p.parts)").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_35 $$ s.delete(item)[ FD ]
Line_3 $$ Session s = openSession()-->Line_29 $$ list = s.createQuery("select i from Item i join i.product p where 'Top' in indices(p.parts)").list()[ FD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_11 $$ Item item = new Item("123456", prod)[ CD ]
Line_29 $$ list = s.createQuery("select i from Item i join i.product p where 'Top' in indices(p.parts)").list()-->Line_30 $$ assertEquals(list.size(), 1)[ FD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_6 $$ Part bottom = new Part("bottom", "The bottom part")[ CD ]
Line_17 $$ Part part = (Part) list.get(0)-->Line_23 $$ part = (Part) list.get(0)[ FD ]
Line_11 $$ Item item = new Item("123456", prod)-->Line_34 $$ assertSame(list.get(0), item)[ FD ]
Line_29 $$ list = s.createQuery("select i from Item i join i.product p where 'Top' in indices(p.parts)").list()-->Line_33 $$ assertEquals(list.size(), 1)[ FD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_35 $$ s.delete(item)[ CD ]
Line_13 $$ List list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part order by part.name desc").list()-->Line_33 $$ assertEquals(list.size(), 1)[ FD ]
Line_29 $$ list = s.createQuery("select i from Item i join i.product p where 'Top' in indices(p.parts)").list()-->Line_34 $$ assertSame(list.get(0), item)[ FD ]
Line_29 $$ list = s.createQuery("select i from Item i join i.product p where 'Top' in indices(p.parts)").list()-->Line_32 $$ list = s.createQuery("from Item i where 'Top' in indices(i.product.parts)").list()[ FD ]
Line_26 $$ list = s.createQuery("from Product p where 'Top' in indices(p.parts)").list()-->Line_28 $$ assertSame(list.get(0), prod)[ FD ]
Line_11 $$ Item item = new Item("123456", prod)-->Line_31 $$ assertSame(list.get(0), item)[ FD ]
Line_3 $$ Session s = openSession()-->Line_13 $$ List list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part order by part.name desc").list()[ FD ]
Line_13 $$ List list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part order by part.name desc").list()-->Line_27 $$ assertEquals(list.size(), 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_26 $$ list = s.createQuery("from Product p where 'Top' in indices(p.parts)").list()[ FD ]
Line_32 $$ list = s.createQuery("from Item i where 'Top' in indices(i.product.parts)").list()-->Line_34 $$ assertSame(list.get(0), item)[ FD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_19 $$ assertEquals(part.getDescription(), "The top part")[ CD ]
Line_13 $$ List list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part order by part.name desc").list()-->Line_23 $$ part = (Part) list.get(0)[ FD ]
Line_13 $$ List list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part order by part.name desc").list()-->Line_21 $$ assertEquals(list.size(), 1)[ FD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_18 $$ assertEquals(part.getName(), "top")[ CD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_33 $$ assertEquals(list.size(), 1)[ CD ]
Line_11 $$ Item item = new Item("123456", prod)-->Line_35 $$ s.delete(item)[ FD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_12 $$ s.persist(item)[ CD ]
Line_13 $$ List list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part order by part.name desc").list()-->Line_22 $$ assertTrue(list.get(0) instanceof Part)[ FD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_26 $$ list = s.createQuery("from Product p where 'Top' in indices(p.parts)").list()[ CD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_14 $$ assertEquals(list.size(), 2)[ CD ]
Line_26 $$ list = s.createQuery("from Product p where 'Top' in indices(p.parts)").list()-->Line_30 $$ assertEquals(list.size(), 1)[ FD ]
Line_20 $$ list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part where index(part) = 'Top'").list()-->Line_34 $$ assertSame(list.get(0), item)[ FD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_4 $$ Transaction t = s.beginTransaction()[ CD ]
Line_26 $$ list = s.createQuery("from Product p where 'Top' in indices(p.parts)").list()-->Line_34 $$ assertSame(list.get(0), item)[ FD ]
Line_26 $$ list = s.createQuery("from Product p where 'Top' in indices(p.parts)").list()-->Line_32 $$ list = s.createQuery("from Item i where 'Top' in indices(i.product.parts)").list()[ FD ]
Line_13 $$ List list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part order by part.name desc").list()-->Line_29 $$ list = s.createQuery("select i from Item i join i.product p where 'Top' in indices(p.parts)").list()[ FD ]
Line_13 $$ List list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part order by part.name desc").list()-->Line_34 $$ assertSame(list.get(0), item)[ FD ]
Line_7 $$ Product prod = new Product("Some Thing")-->Line_9 $$ prod.getParts().put("Bottom", bottom)[ FD ]
Line_20 $$ list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part where index(part) = 'Top'").list()-->Line_29 $$ list = s.createQuery("select i from Item i join i.product p where 'Top' in indices(p.parts)").list()[ FD ]
Line_7 $$ Product prod = new Product("Some Thing")-->Line_28 $$ assertSame(list.get(0), prod)[ FD ]
Line_11 $$ Item item = new Item("123456", prod)-->Line_12 $$ s.persist(item)[ FD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_8 $$ prod.getParts().put("Top", top)[ CD ]
Line_20 $$ list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part where index(part) = 'Top'").list()-->Line_31 $$ assertSame(list.get(0), item)[ FD ]
Line_26 $$ list = s.createQuery("from Product p where 'Top' in indices(p.parts)").list()-->Line_27 $$ assertEquals(list.size(), 1)[ FD ]
Line_26 $$ list = s.createQuery("from Product p where 'Top' in indices(p.parts)").list()-->Line_33 $$ assertEquals(list.size(), 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_10 $$ s.persist(prod)[ FD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_31 $$ assertSame(list.get(0), item)[ CD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_23 $$ part = (Part) list.get(0)[ CD ]
Line_3 $$ Session s = openSession()-->Line_20 $$ list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part where index(part) = 'Top'").list()[ FD ]
Line_17 $$ Part part = (Part) list.get(0)-->Line_18 $$ assertEquals(part.getName(), "top")[ FD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_34 $$ assertSame(list.get(0), item)[ CD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_16 $$ assertTrue(list.get(1) instanceof Part)[ CD ]
Line_17 $$ Part part = (Part) list.get(0)-->Line_25 $$ assertEquals(part.getDescription(), "The top part")[ FD ]
Line_13 $$ List list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part order by part.name desc").list()-->Line_28 $$ assertSame(list.get(0), prod)[ FD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_3 $$ Session s = openSession()[ CD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_13 $$ List list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part order by part.name desc").list()[ CD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_32 $$ list = s.createQuery("from Item i where 'Top' in indices(i.product.parts)").list()[ CD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_30 $$ assertEquals(list.size(), 1)[ CD ]
Line_13 $$ List list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part order by part.name desc").list()-->Line_16 $$ assertTrue(list.get(1) instanceof Part)[ FD ]
Line_20 $$ list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part where index(part) = 'Top'").list()-->Line_33 $$ assertEquals(list.size(), 1)[ FD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_27 $$ assertEquals(list.size(), 1)[ CD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_21 $$ assertEquals(list.size(), 1)[ CD ]
Line_13 $$ List list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part order by part.name desc").list()-->Line_14 $$ assertEquals(list.size(), 2)[ FD ]
Line_32 $$ list = s.createQuery("from Item i where 'Top' in indices(i.product.parts)").list()-->Line_33 $$ assertEquals(list.size(), 1)[ FD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_37 $$ t.commit()[ CD ]
Line_3 $$ Session s = openSession()-->Line_12 $$ s.persist(item)[ FD ]
Line_20 $$ list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part where index(part) = 'Top'").list()-->Line_23 $$ part = (Part) list.get(0)[ FD ]
Line_26 $$ list = s.createQuery("from Product p where 'Top' in indices(p.parts)").list()-->Line_31 $$ assertSame(list.get(0), item)[ FD ]
Line_7 $$ Product prod = new Product("Some Thing")-->Line_10 $$ s.persist(prod)[ FD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_7 $$ Product prod = new Product("Some Thing")[ CD ]
Line_26 $$ list = s.createQuery("from Product p where 'Top' in indices(p.parts)").list()-->Line_29 $$ list = s.createQuery("select i from Item i join i.product p where 'Top' in indices(p.parts)").list()[ FD ]
Line_13 $$ List list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part order by part.name desc").list()-->Line_30 $$ assertEquals(list.size(), 1)[ FD ]
Line_20 $$ list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part where index(part) = 'Top'").list()-->Line_27 $$ assertEquals(list.size(), 1)[ FD ]
Line_6 $$ Part bottom = new Part("bottom", "The bottom part")-->Line_9 $$ prod.getParts().put("Bottom", bottom)[ FD ]
Line_20 $$ list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part where index(part) = 'Top'").list()-->Line_28 $$ assertSame(list.get(0), prod)[ FD ]
Line_20 $$ list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part where index(part) = 'Top'").list()-->Line_22 $$ assertTrue(list.get(0) instanceof Part)[ FD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_9 $$ prod.getParts().put("Bottom", bottom)[ CD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_36 $$ s.delete(prod)[ CD ]
Line_29 $$ list = s.createQuery("select i from Item i join i.product p where 'Top' in indices(p.parts)").list()-->Line_31 $$ assertSame(list.get(0), item)[ FD ]
Line_13 $$ List list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part order by part.name desc").list()-->Line_32 $$ list = s.createQuery("from Item i where 'Top' in indices(i.product.parts)").list()[ FD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_38 $$ s.close()[ CD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_20 $$ list = s.createQuery("select new Part( part.name, part.description ) from Product prod join prod.parts part where index(part) = 'Top'").list()[ CD ]
Line_7 $$ Product prod = new Product("Some Thing")-->Line_8 $$ prod.getParts().put("Top", top)[ FD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_5 $$ Part top = new Part("top", "The top part")[ CD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_28 $$ assertSame(list.get(0), prod)[ CD ]
Line_2 $$ public void testQueryMapCompositeElement() -->Line_10 $$ s.persist(prod)[ CD ]
Line_5 $$ Part top = new Part("top", "The top part")-->Line_8 $$ prod.getParts().put("Top", top)[ FD ]
