Line_2 $$ private static void assertSignature(String base, List<String> parameters, List<Object> literalParameters) -->Line_18 $$ assertEquals(signature.getLiteralParameters(), literalParameters)[ FD ]
Line_2 $$ private static void assertSignature(String base, List<String> parameters, List<Object> literalParameters) -->Line_4 $$ String typeName = base.toLowerCase(ENGLISH)[ FD ]
Line_6 $$ typeName += "<" + Joiner.on(",").join(lowerCaseTypeNames) + ">"-->Line_10 $$ typeName += "(" + Joiner.on(",").join(transform) + ")"[ FD ]
Line_5 $$ if (!parameters.isEmpty()) -->Line_6 $$ typeName += "<" + Joiner.on(",").join(lowerCaseTypeNames) + ">"[ CD ]
Line_2 $$ private static void assertSignature(String base, List<String> parameters, List<Object> literalParameters) -->Line_13 $$ assertEquals(signature.getBase(), base)[ FD ]
Line_4 $$ String typeName = base.toLowerCase(ENGLISH)-->Line_10 $$ typeName += "(" + Joiner.on(",").join(transform) + ")"[ FD ]
Line_4 $$ String typeName = base.toLowerCase(ENGLISH)-->Line_19 $$ assertEquals(typeName, signature.toString())[ FD ]
Line_2 $$ private static void assertSignature(String base, List<String> parameters, List<Object> literalParameters) -->Line_13 $$ assertEquals(signature.getBase(), base)[ CD ]
Line_12 $$ TypeSignature signature = parseTypeSignature(typeName)-->Line_14 $$ assertEquals(signature.getParameters().size(), parameters.size())[ FD ]
Line_3 $$ List<String> lowerCaseTypeNames = parameters.stream().map( value -> value.toLowerCase(ENGLISH)).collect(toList())-->Line_6 $$ typeName += "<" + Joiner.on(",").join(lowerCaseTypeNames) + ">"[ FD ]
Line_6 $$ typeName += "<" + Joiner.on(",").join(lowerCaseTypeNames) + ">"-->Line_12 $$ TypeSignature signature = parseTypeSignature(typeName)[ FD ]
Line_2 $$ private static void assertSignature(String base, List<String> parameters, List<Object> literalParameters) -->Line_8 $$ if (!literalParameters.isEmpty()) [ CD ]
Line_8 $$ if (!literalParameters.isEmpty()) -->Line_9 $$ List<String> transform = literalParameters.stream().map(TestTypeSignature::<>convertParameter).collect(toList())[ CD ]
Line_2 $$ private static void assertSignature(String base, List<String> parameters, List<Object> literalParameters) -->Line_15 $$ for (int i = 0; i < signature.getParameters().size(); i++) [ CD ]
Line_9 $$ List<String> transform = literalParameters.stream().map(TestTypeSignature::<>convertParameter).collect(toList())-->Line_10 $$ typeName += "(" + Joiner.on(",").join(transform) + ")"[ FD ]
Line_12 $$ TypeSignature signature = parseTypeSignature(typeName)-->Line_16 $$ assertEquals(signature.getParameters().get(i).toString(), parameters.get(i))[ FD ]
Line_2 $$ private static void assertSignature(String base, List<String> parameters, List<Object> literalParameters) -->Line_19 $$ assertEquals(typeName, signature.toString())[ CD ]
Line_2 $$ private static void assertSignature(String base, List<String> parameters, List<Object> literalParameters) -->Line_5 $$ if (!parameters.isEmpty()) [ FD ]
Line_2 $$ private static void assertSignature(String base, List<String> parameters, List<Object> literalParameters) -->Line_14 $$ assertEquals(signature.getParameters().size(), parameters.size())[ CD ]
Line_2 $$ private static void assertSignature(String base, List<String> parameters, List<Object> literalParameters) -->Line_8 $$ if (!literalParameters.isEmpty()) [ FD ]
Line_12 $$ TypeSignature signature = parseTypeSignature(typeName)-->Line_15 $$ for (int i = 0; i < signature.getParameters().size(); i++) [ FD ]
Line_10 $$ typeName += "(" + Joiner.on(",").join(transform) + ")"-->Line_19 $$ assertEquals(typeName, signature.toString())[ FD ]
Line_15 $$ for (int i = 0; i < signature.getParameters().size(); i++) -->Line_16 $$ assertEquals(signature.getParameters().get(i).toString(), parameters.get(i))[ CD ]
Line_2 $$ private static void assertSignature(String base, List<String> parameters, List<Object> literalParameters) -->Line_16 $$ assertEquals(signature.getParameters().get(i).toString(), parameters.get(i))[ FD ]
Line_8 $$ if (!literalParameters.isEmpty()) -->Line_10 $$ typeName += "(" + Joiner.on(",").join(transform) + ")"[ CD ]
Line_2 $$ private static void assertSignature(String base, List<String> parameters, List<Object> literalParameters) -->Line_3 $$ List<String> lowerCaseTypeNames = parameters.stream().map( value -> value.toLowerCase(ENGLISH)).collect(toList())[ CD ]
Line_2 $$ private static void assertSignature(String base, List<String> parameters, List<Object> literalParameters) -->Line_5 $$ if (!parameters.isEmpty()) [ CD ]
Line_2 $$ private static void assertSignature(String base, List<String> parameters, List<Object> literalParameters) -->Line_3 $$ List<String> lowerCaseTypeNames = parameters.stream().map( value -> value.toLowerCase(ENGLISH)).collect(toList())[ FD ]
Line_15 $$ for (int i = 0; i < signature.getParameters().size(); i++) -->Line_16 $$ assertEquals(signature.getParameters().get(i).toString(), parameters.get(i))[ FD ]
Line_12 $$ TypeSignature signature = parseTypeSignature(typeName)-->Line_19 $$ assertEquals(typeName, signature.toString())[ FD ]
Line_2 $$ private static void assertSignature(String base, List<String> parameters, List<Object> literalParameters) -->Line_18 $$ assertEquals(signature.getLiteralParameters(), literalParameters)[ CD ]
Line_2 $$ private static void assertSignature(String base, List<String> parameters, List<Object> literalParameters) -->Line_4 $$ String typeName = base.toLowerCase(ENGLISH)[ CD ]
Line_2 $$ private static void assertSignature(String base, List<String> parameters, List<Object> literalParameters) -->Line_9 $$ List<String> transform = literalParameters.stream().map(TestTypeSignature::<>convertParameter).collect(toList())[ FD ]
Line_10 $$ typeName += "(" + Joiner.on(",").join(transform) + ")"-->Line_12 $$ TypeSignature signature = parseTypeSignature(typeName)[ FD ]
Line_2 $$ private static void assertSignature(String base, List<String> parameters, List<Object> literalParameters) -->Line_14 $$ assertEquals(signature.getParameters().size(), parameters.size())[ FD ]
Line_12 $$ TypeSignature signature = parseTypeSignature(typeName)-->Line_13 $$ assertEquals(signature.getBase(), base)[ FD ]
Line_6 $$ typeName += "<" + Joiner.on(",").join(lowerCaseTypeNames) + ">"-->Line_19 $$ assertEquals(typeName, signature.toString())[ FD ]
Line_2 $$ private static void assertSignature(String base, List<String> parameters, List<Object> literalParameters) -->Line_12 $$ TypeSignature signature = parseTypeSignature(typeName)[ CD ]
Line_4 $$ String typeName = base.toLowerCase(ENGLISH)-->Line_12 $$ TypeSignature signature = parseTypeSignature(typeName)[ FD ]
Line_12 $$ TypeSignature signature = parseTypeSignature(typeName)-->Line_18 $$ assertEquals(signature.getLiteralParameters(), literalParameters)[ FD ]
Line_4 $$ String typeName = base.toLowerCase(ENGLISH)-->Line_6 $$ typeName += "<" + Joiner.on(",").join(lowerCaseTypeNames) + ">"[ FD ]
