Line_2 $$ private static String createInvalidRootsDescription(List<String> invalidClasses, String rootName, String libraryName) -->Line_11 $$ buffer.append(" has broken " + rootName + " " + StringUtil.pluralize("path", invalidClasses.size()) + ":")[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_11 $$ buffer.append(" has broken " + rootName + " " + StringUtil.pluralize("path", invalidClasses.size()) + ":")[ FD ]
Line_2 $$ private static String createInvalidRootsDescription(List<String> invalidClasses, String rootName, String libraryName) -->Line_3 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_16 $$ return XmlStringUtil.wrapInHtml(buffer)[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_13 $$ buffer.append("<br>&nbsp;&nbsp;")[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_7 $$ buffer.append("<a href='http://library/").append(name).append("'>").append(name).append("</a>")[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_5 $$ buffer.append("Library ")[ FD ]
Line_6 $$ if (Registry.is("ide.new.project.settings")) -->Line_7 $$ buffer.append("<a href='http://library/").append(name).append("'>").append(name).append("</a>")[ CD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_9 $$ buffer.append("'").append(name).append("'")[ FD ]
Line_2 $$ private static String createInvalidRootsDescription(List<String> invalidClasses, String rootName, String libraryName) -->Line_11 $$ buffer.append(" has broken " + rootName + " " + StringUtil.pluralize("path", invalidClasses.size()) + ":")[ CD ]
Line_2 $$ private static String createInvalidRootsDescription(List<String> invalidClasses, String rootName, String libraryName) -->Line_5 $$ buffer.append("Library ")[ CD ]
Line_2 $$ private static String createInvalidRootsDescription(List<String> invalidClasses, String rootName, String libraryName) -->Line_6 $$ if (Registry.is("ide.new.project.settings")) [ CD ]
Line_4 $$ final String name = StringUtil.escapeXml(libraryName)-->Line_7 $$ buffer.append("<a href='http://library/").append(name).append("'>").append(name).append("</a>")[ FD ]
Line_2 $$ private static String createInvalidRootsDescription(List<String> invalidClasses, String rootName, String libraryName) -->Line_16 $$ return XmlStringUtil.wrapInHtml(buffer)[ CD ]
Line_6 $$ if (Registry.is("ide.new.project.settings")) -->Line_9 $$ buffer.append("'").append(name).append("'")[ CD ]
Line_4 $$ final String name = StringUtil.escapeXml(libraryName)-->Line_9 $$ buffer.append("'").append(name).append("'")[ FD ]
Line_2 $$ private static String createInvalidRootsDescription(List<String> invalidClasses, String rootName, String libraryName) -->Line_4 $$ final String name = StringUtil.escapeXml(libraryName)[ CD ]
Line_12 $$ for (String url : invalidClasses) -->Line_14 $$ buffer.append(PathUtil.toPresentableUrl(url))[ FD ]
Line_3 $$ StringBuilder buffer = new StringBuilder()-->Line_14 $$ buffer.append(PathUtil.toPresentableUrl(url))[ FD ]
Line_2 $$ private static String createInvalidRootsDescription(List<String> invalidClasses, String rootName, String libraryName) -->Line_4 $$ final String name = StringUtil.escapeXml(libraryName)[ FD ]
