Line_140 $$ if (count == 1) -->Line_141 $$ sb.append(String.format(Locale.ROOT, "  unique snapshot%n"))[ CD ]
Line_132 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) -->Line_133 $$ if (similars[j]) [ CD ]
Line_37 $$ ThreadInfo info = threadBean.getThreadInfo(threadId, 0)-->Line_54 $$ if (info == null) [ FD ]
Line_65 $$ List<MyThreadInfo> hotties = new ArrayList(threadInfos.values())-->Line_92 $$ time = hotties.get(t).cpuTime[ FD ]
Line_54 $$ if (info == null) -->Line_55 $$ threadInfos.remove(threadId)[ CD ]
Line_20 $$ if (threadBean.isThreadCpuTimeSupported()) -->Line_21 $$ if (!threadBean.isThreadCpuTimeEnabled()) [ CD ]
Line_115 $$ for (int i = 0; i < threadElementsSnapshotCount; i++) -->Line_120 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) [ CD ]
Line_119 $$ boolean[] similars = new boolean[threadElementsSnapshotCount]-->Line_133 $$ if (similars[j]) [ FD ]
Line_120 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) -->Line_124 $$ if (similarity > maxSim) [ CD ]
Line_125 $$ maxSim = similarity-->Line_128 $$ if (similarity == maxSim)[ FD ]
Line_2 $$ private String innerDetect() throws Exception -->Line_11 $$ sb.append(interval)[ CD ]
Line_29 $$ for (long threadId : threadBean.getAllThreadIds()) -->Line_48 $$ long cpu = threadBean.getThreadCpuTime(threadId)[ FD ]
Line_29 $$ for (long threadId : threadBean.getAllThreadIds()) -->Line_62 $$ threadInfos.remove(threadId)[ FD ]
Line_138 $$ if (allInfos[i][t] != null) -->Line_140 $$ if (count == 1) [ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_16 $$ sb.append(":\n")[ FD ]
Line_118 $$ int maxSim = 1-->Line_128 $$ if (similarity == maxSim)[ FD ]
Line_90 $$ long time = 0-->Line_113 $$ sb.append(String.format(Locale.ROOT, "%n%4.1f%% (%s out of %s) %s usage by thread '%s'%n", percent, TimeValue.timeValueNanos(time), interval, type, threadName))[ FD ]
Line_80 $$ for (int i = 0; i < busiestThreads; i++) -->Line_81 $$ MyThreadInfo info = hotties.get(i)[ CD ]
Line_115 $$ for (int i = 0; i < threadElementsSnapshotCount; i++) -->Line_116 $$ if (done[i])[ FD ]
Line_80 $$ for (int i = 0; i < busiestThreads; i++) -->Line_115 $$ for (int i = 0; i < threadElementsSnapshotCount; i++) [ FD ]
Line_140 $$ if (count == 1) -->Line_147 $$ for (int l = show.length - maxSim; l < show.length; l++) [ CD ]
Line_2 $$ private String innerDetect() throws Exception -->Line_14 $$ sb.append(", ignoreIdleThreads=")[ CD ]
Line_120 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) -->Line_133 $$ if (similars[j]) [ FD ]
Line_65 $$ List<MyThreadInfo> hotties = new ArrayList(threadInfos.values())-->Line_96 $$ time = hotties.get(t).blockedTime[ FD ]
Line_80 $$ for (int i = 0; i < busiestThreads; i++) -->Line_116 $$ if (done[i])[ FD ]
Line_17 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()-->Line_53 $$ ThreadInfo info = threadBean.getThreadInfo(threadId, 0)[ FD ]
Line_90 $$ long time = 0-->Line_92 $$ time = hotties.get(t).cpuTime[ FD ]
Line_29 $$ for (long threadId : threadBean.getAllThreadIds()) -->Line_45 $$ if (Thread.currentThread().getId() == threadId) [ FD ]
Line_33 $$ long cpu = threadBean.getThreadCpuTime(threadId)-->Line_49 $$ if (cpu == -1) [ FD ]
Line_28 $$ Map<Long, MyThreadInfo> threadInfos = new HashMap()-->Line_41 $$ threadInfos.put(threadId, new MyThreadInfo(cpu, info))[ FD ]
Line_94 $$ time = hotties.get(t).waitedTime-->Line_96 $$ time = hotties.get(t).blockedTime[ FD ]
Line_115 $$ for (int i = 0; i < threadElementsSnapshotCount; i++) -->Line_116 $$ if (done[i])[ CD ]
Line_92 $$ time = hotties.get(t).cpuTime-->Line_94 $$ time = hotties.get(t).waitedTime[ FD ]
Line_123 $$ int similarity = similarity(allInfos[i][t], allInfos[j][t])-->Line_125 $$ maxSim = similarity[ FD ]
Line_114 $$ boolean[] done = new boolean[threadElementsSnapshotCount]-->Line_116 $$ if (done[i])[ FD ]
Line_101 $$ if (ignoreIdleThreads && isIdleThread(info[t])) -->Line_102 $$ info[t] = null[ CD ]
Line_89 $$ for (int t = 0; t < busiestThreads; t++) -->Line_115 $$ for (int i = 0; i < threadElementsSnapshotCount; i++) [ CD ]
Line_91 $$ if ("cpu".equals(type)) -->Line_92 $$ time = hotties.get(t).cpuTime[ CD ]
Line_17 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()-->Line_157 $$ threadBean.setThreadCpuTimeEnabled(false)[ FD ]
Line_124 $$ if (similarity > maxSim) -->Line_125 $$ maxSim = similarity[ CD ]
Line_126 $$ similars = new boolean[threadElementsSnapshotCount]-->Line_133 $$ if (similars[j]) [ FD ]
Line_4 $$ if (Constants.FREE_BSD) -->Line_5 $$ sb.append("hot_threads is not supported on FreeBSD")[ CD ]
Line_85 $$ for (int j = 0; j < threadElementsSnapshotCount; j++) -->Line_87 $$ Thread.sleep(threadElementsSnapshotDelay.millis())[ CD ]
Line_66 $$ final int busiestThreads = Math.min(this.busiestThreads, hotties.size())-->Line_80 $$ for (int i = 0; i < busiestThreads; i++) [ FD ]
Line_58 $$ MyThreadInfo data = threadInfos.get(threadId)-->Line_59 $$ if (data != null) [ FD ]
Line_120 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) -->Line_121 $$ if (done[j])[ FD ]
Line_58 $$ MyThreadInfo data = threadInfos.get(threadId)-->Line_60 $$ data.setDelta(cpu, info)[ FD ]
Line_29 $$ for (long threadId : threadBean.getAllThreadIds()) -->Line_55 $$ threadInfos.remove(threadId)[ FD ]
Line_65 $$ List<MyThreadInfo> hotties = new ArrayList(threadInfos.values())-->Line_67 $$ CollectionUtil.introSort(hotties, new Comparator<MyThreadInfo>() [ FD ]
Line_2 $$ private String innerDetect() throws Exception -->Line_15 $$ sb.append(ignoreIdleThreads)[ CD ]
Line_2 $$ private String innerDetect() throws Exception -->Line_16 $$ sb.append(":\n")[ CD ]
Line_118 $$ int maxSim = 1-->Line_125 $$ maxSim = similarity[ FD ]
Line_80 $$ for (int i = 0; i < busiestThreads; i++) -->Line_82 $$ ids[i] = info.info.getThreadId()[ CD ]
Line_123 $$ int similarity = similarity(allInfos[i][t], allInfos[j][t])-->Line_128 $$ if (similarity == maxSim)[ FD ]
Line_100 $$ if (info != null && info[t] != null) -->Line_105 $$ threadName = info[t].getThreadName()[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_12 $$ sb.append(", busiestThreads=")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_143 $$ sb.append(String.format(Locale.ROOT, "    %s%n", show[l]))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_146 $$ sb.append(String.format(Locale.ROOT, "  %d/%d snapshots sharing following %d elements%n", count, threadElementsSnapshotCount, maxSim))[ FD ]
Line_125 $$ maxSim = similarity-->Line_124 $$ if (similarity > maxSim) [ FD ]
Line_140 $$ if (count == 1) -->Line_146 $$ sb.append(String.format(Locale.ROOT, "  %d/%d snapshots sharing following %d elements%n", count, threadElementsSnapshotCount, maxSim))[ CD ]
Line_92 $$ time = hotties.get(t).cpuTime-->Line_113 $$ sb.append(String.format(Locale.ROOT, "%n%4.1f%% (%s out of %s) %s usage by thread '%s'%n", percent, TimeValue.timeValueNanos(time), interval, type, threadName))[ FD ]
Line_91 $$ if ("cpu".equals(type)) -->Line_93 $$ if ("wait".equals(type)) [ CD ]
Line_112 $$ double percent = (((double) time) / interval.nanos()) * 100-->Line_113 $$ sb.append(String.format(Locale.ROOT, "%n%4.1f%% (%s out of %s) %s usage by thread '%s'%n", percent, TimeValue.timeValueNanos(time), interval, type, threadName))[ FD ]
Line_85 $$ for (int j = 0; j < threadElementsSnapshotCount; j++) -->Line_86 $$ allInfos[j] = threadBean.getThreadInfo(ids, Integer.MAX_VALUE)[ CD ]
Line_90 $$ long time = 0-->Line_96 $$ time = hotties.get(t).blockedTime[ FD ]
Line_29 $$ for (long threadId : threadBean.getAllThreadIds()) -->Line_41 $$ threadInfos.put(threadId, new MyThreadInfo(cpu, info))[ FD ]
Line_124 $$ if (similarity > maxSim) -->Line_126 $$ similars = new boolean[threadElementsSnapshotCount][ CD ]
Line_120 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) -->Line_123 $$ int similarity = similarity(allInfos[i][t], allInfos[j][t])[ CD ]
Line_69 $$ if ("cpu".equals(type)) -->Line_70 $$ return (int) (o2.cpuTime - o1.cpuTime)[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_13 $$ sb.append(busiestThreads)[ FD ]
Line_114 $$ boolean[] done = new boolean[threadElementsSnapshotCount]-->Line_121 $$ if (done[j])[ FD ]
Line_17 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()-->Line_48 $$ long cpu = threadBean.getThreadCpuTime(threadId)[ FD ]
Line_100 $$ if (info != null && info[t] != null) -->Line_101 $$ if (ignoreIdleThreads && isIdleThread(info[t])) [ CD ]
Line_2 $$ private String innerDetect() throws Exception -->Line_9 $$ sb.append(DATE_TIME_FORMATTER.printer().print(System.currentTimeMillis()))[ CD ]
Line_89 $$ for (int t = 0; t < busiestThreads; t++) -->Line_98 $$ String threadName = null[ CD ]
Line_115 $$ for (int i = 0; i < threadElementsSnapshotCount; i++) -->Line_118 $$ int maxSim = 1[ CD ]
Line_98 $$ String threadName = null-->Line_109 $$ if (threadName == null) [ FD ]
Line_98 $$ String threadName = null-->Line_105 $$ threadName = info[t].getThreadName()[ FD ]
Line_28 $$ Map<Long, MyThreadInfo> threadInfos = new HashMap()-->Line_58 $$ MyThreadInfo data = threadInfos.get(threadId)[ FD ]
Line_29 $$ for (long threadId : threadBean.getAllThreadIds()) -->Line_33 $$ long cpu = threadBean.getThreadCpuTime(threadId)[ FD ]
Line_66 $$ final int busiestThreads = Math.min(this.busiestThreads, hotties.size())-->Line_89 $$ for (int t = 0; t < busiestThreads; t++) [ FD ]
Line_125 $$ maxSim = similarity-->Line_146 $$ sb.append(String.format(Locale.ROOT, "  %d/%d snapshots sharing following %d elements%n", count, threadElementsSnapshotCount, maxSim))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_11 $$ sb.append(interval)[ FD ]
Line_93 $$ if ("wait".equals(type)) -->Line_95 $$ if ("block".equals(type)) [ CD ]
Line_71 $$ if ("wait".equals(type)) -->Line_73 $$ if ("block".equals(type)) [ CD ]
Line_37 $$ ThreadInfo info = threadBean.getThreadInfo(threadId, 0)-->Line_60 $$ data.setDelta(cpu, info)[ FD ]
Line_65 $$ List<MyThreadInfo> hotties = new ArrayList(threadInfos.values())-->Line_94 $$ time = hotties.get(t).waitedTime[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_14 $$ sb.append(", ignoreIdleThreads=")[ FD ]
Line_89 $$ for (int t = 0; t < busiestThreads; t++) -->Line_94 $$ time = hotties.get(t).waitedTime[ FD ]
Line_17 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()-->Line_29 $$ for (long threadId : threadBean.getAllThreadIds()) [ FD ]
Line_128 $$ if (similarity == maxSim)-->Line_129 $$ similars[j] = true[ CD ]
Line_105 $$ threadName = info[t].getThreadName()-->Line_113 $$ sb.append(String.format(Locale.ROOT, "%n%4.1f%% (%s out of %s) %s usage by thread '%s'%n", percent, TimeValue.timeValueNanos(time), interval, type, threadName))[ FD ]
Line_2 $$ private String innerDetect() throws Exception -->Line_18 $$ boolean enabledCpu = false[ CD ]
Line_120 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) -->Line_132 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) [ FD ]
Line_67 $$ CollectionUtil.introSort(hotties, new Comparator<MyThreadInfo>() -->Line_69 $$ if ("cpu".equals(type)) [ CD ]
Line_147 $$ for (int l = show.length - maxSim; l < show.length; l++) -->Line_148 $$ sb.append(String.format(Locale.ROOT, "    %s%n", show[l]))[ CD ]
Line_4 $$ if (Constants.FREE_BSD) -->Line_6 $$ return sb.toString()[ CD ]
Line_2 $$ private String innerDetect() throws Exception -->Line_4 $$ if (Constants.FREE_BSD) [ CD ]
Line_28 $$ Map<Long, MyThreadInfo> threadInfos = new HashMap()-->Line_65 $$ List<MyThreadInfo> hotties = new ArrayList(threadInfos.values())[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_113 $$ sb.append(String.format(Locale.ROOT, "%n%4.1f%% (%s out of %s) %s usage by thread '%s'%n", percent, TimeValue.timeValueNanos(time), interval, type, threadName))[ FD ]
Line_17 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()-->Line_86 $$ allInfos[j] = threadBean.getThreadInfo(ids, Integer.MAX_VALUE)[ FD ]
Line_133 $$ if (similars[j]) -->Line_134 $$ done[j] = true[ CD ]
Line_138 $$ if (allInfos[i][t] != null) -->Line_139 $$ final StackTraceElement[] show = allInfos[i][t].getStackTrace()[ CD ]
Line_59 $$ if (data != null) -->Line_62 $$ threadInfos.remove(threadId)[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_141 $$ sb.append(String.format(Locale.ROOT, "  unique snapshot%n"))[ FD ]
Line_105 $$ threadName = info[t].getThreadName()-->Line_109 $$ if (threadName == null) [ FD ]
Line_33 $$ long cpu = threadBean.getThreadCpuTime(threadId)-->Line_60 $$ data.setDelta(cpu, info)[ FD ]
Line_2 $$ private String innerDetect() throws Exception -->Line_3 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_90 $$ long time = 0-->Line_94 $$ time = hotties.get(t).waitedTime[ FD ]
Line_115 $$ for (int i = 0; i < threadElementsSnapshotCount; i++) -->Line_132 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) [ CD ]
Line_17 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()-->Line_23 $$ threadBean.setThreadCpuTimeEnabled(true)[ FD ]
Line_21 $$ if (!threadBean.isThreadCpuTimeEnabled()) -->Line_23 $$ threadBean.setThreadCpuTimeEnabled(true)[ CD ]
Line_89 $$ for (int t = 0; t < busiestThreads; t++) -->Line_109 $$ if (threadName == null) [ CD ]
Line_29 $$ for (long threadId : threadBean.getAllThreadIds()) -->Line_30 $$ if (Thread.currentThread().getId() == threadId) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_10 $$ sb.append(", interval=")[ FD ]
Line_156 $$ if (enabledCpu) -->Line_157 $$ threadBean.setThreadCpuTimeEnabled(false)[ CD ]
Line_28 $$ Map<Long, MyThreadInfo> threadInfos = new HashMap()-->Line_50 $$ threadInfos.remove(threadId)[ FD ]
Line_89 $$ for (int t = 0; t < busiestThreads; t++) -->Line_91 $$ if ("cpu".equals(type)) [ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_15 $$ sb.append(ignoreIdleThreads)[ FD ]
Line_21 $$ if (!threadBean.isThreadCpuTimeEnabled()) -->Line_22 $$ enabledCpu = true[ CD ]
Line_59 $$ if (data != null) -->Line_60 $$ data.setDelta(cpu, info)[ CD ]
Line_37 $$ ThreadInfo info = threadBean.getThreadInfo(threadId, 0)-->Line_38 $$ if (info == null) [ FD ]
Line_71 $$ if ("wait".equals(type)) -->Line_72 $$ return (int) (o2.waitedTime - o1.waitedTime)[ CD ]
Line_115 $$ for (int i = 0; i < threadElementsSnapshotCount; i++) -->Line_119 $$ boolean[] similars = new boolean[threadElementsSnapshotCount][ CD ]
Line_115 $$ for (int i = 0; i < threadElementsSnapshotCount; i++) -->Line_138 $$ if (allInfos[i][t] != null) [ CD ]
Line_85 $$ for (int j = 0; j < threadElementsSnapshotCount; j++) -->Line_120 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) [ FD ]
Line_94 $$ time = hotties.get(t).waitedTime-->Line_113 $$ sb.append(String.format(Locale.ROOT, "%n%4.1f%% (%s out of %s) %s usage by thread '%s'%n", percent, TimeValue.timeValueNanos(time), interval, type, threadName))[ FD ]
Line_92 $$ time = hotties.get(t).cpuTime-->Line_96 $$ time = hotties.get(t).blockedTime[ FD ]
Line_142 $$ for (int l = 0; l < show.length; l++) -->Line_147 $$ for (int l = show.length - maxSim; l < show.length; l++) [ FD ]
Line_49 $$ if (cpu == -1) -->Line_50 $$ threadInfos.remove(threadId)[ CD ]
Line_65 $$ List<MyThreadInfo> hotties = new ArrayList(threadInfos.values())-->Line_66 $$ final int busiestThreads = Math.min(this.busiestThreads, hotties.size())[ FD ]
Line_17 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()-->Line_33 $$ long cpu = threadBean.getThreadCpuTime(threadId)[ FD ]
Line_29 $$ for (long threadId : threadBean.getAllThreadIds()) -->Line_53 $$ ThreadInfo info = threadBean.getThreadInfo(threadId, 0)[ FD ]
Line_85 $$ for (int j = 0; j < threadElementsSnapshotCount; j++) -->Line_132 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) [ FD ]
Line_73 $$ if ("block".equals(type)) -->Line_74 $$ return (int) (o2.blockedTime - o1.blockedTime)[ CD ]
Line_85 $$ for (int j = 0; j < threadElementsSnapshotCount; j++) -->Line_133 $$ if (similars[j]) [ FD ]
Line_123 $$ int similarity = similarity(allInfos[i][t], allInfos[j][t])-->Line_124 $$ if (similarity > maxSim) [ FD ]
Line_17 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()-->Line_44 $$ for (long threadId : threadBean.getAllThreadIds()) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_8 $$ sb.append("Hot threads at ")[ FD ]
Line_120 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) -->Line_128 $$ if (similarity == maxSim)[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_148 $$ sb.append(String.format(Locale.ROOT, "    %s%n", show[l]))[ FD ]
Line_142 $$ for (int l = 0; l < show.length; l++) -->Line_143 $$ sb.append(String.format(Locale.ROOT, "    %s%n", show[l]))[ CD ]
Line_93 $$ if ("wait".equals(type)) -->Line_94 $$ time = hotties.get(t).waitedTime[ CD ]
Line_89 $$ for (int t = 0; t < busiestThreads; t++) -->Line_92 $$ time = hotties.get(t).cpuTime[ FD ]
Line_118 $$ int maxSim = 1-->Line_124 $$ if (similarity > maxSim) [ FD ]
Line_132 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) -->Line_133 $$ if (similars[j]) [ FD ]
Line_2 $$ private String innerDetect() throws Exception -->Line_8 $$ sb.append("Hot threads at ")[ CD ]
Line_65 $$ List<MyThreadInfo> hotties = new ArrayList(threadInfos.values())-->Line_81 $$ MyThreadInfo info = hotties.get(i)[ FD ]
Line_85 $$ for (int j = 0; j < threadElementsSnapshotCount; j++) -->Line_121 $$ if (done[j])[ FD ]
Line_89 $$ for (int t = 0; t < busiestThreads; t++) -->Line_90 $$ long time = 0[ CD ]
Line_2 $$ private String innerDetect() throws Exception -->Line_10 $$ sb.append(", interval=")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_9 $$ sb.append(DATE_TIME_FORMATTER.printer().print(System.currentTimeMillis()))[ FD ]
Line_140 $$ if (count == 1) -->Line_142 $$ for (int l = 0; l < show.length; l++) [ CD ]
Line_29 $$ for (long threadId : threadBean.getAllThreadIds()) -->Line_58 $$ MyThreadInfo data = threadInfos.get(threadId)[ FD ]
Line_2 $$ private String innerDetect() throws Exception -->Line_13 $$ sb.append(busiestThreads)[ CD ]
Line_120 $$ for (int j = i + 1; j < threadElementsSnapshotCount; j++) -->Line_121 $$ if (done[j])[ CD ]
Line_89 $$ for (int t = 0; t < busiestThreads; t++) -->Line_112 $$ double percent = (((double) time) / interval.nanos()) * 100[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_6 $$ return sb.toString()[ FD ]
Line_98 $$ String threadName = null-->Line_113 $$ sb.append(String.format(Locale.ROOT, "%n%4.1f%% (%s out of %s) %s usage by thread '%s'%n", percent, TimeValue.timeValueNanos(time), interval, type, threadName))[ FD ]
Line_17 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()-->Line_20 $$ if (threadBean.isThreadCpuTimeSupported()) [ FD ]
Line_2 $$ private String innerDetect() throws Exception -->Line_17 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()[ CD ]
Line_18 $$ boolean enabledCpu = false-->Line_22 $$ enabledCpu = true[ FD ]
Line_96 $$ time = hotties.get(t).blockedTime-->Line_113 $$ sb.append(String.format(Locale.ROOT, "%n%4.1f%% (%s out of %s) %s usage by thread '%s'%n", percent, TimeValue.timeValueNanos(time), interval, type, threadName))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_5 $$ sb.append("hot_threads is not supported on FreeBSD")[ FD ]
Line_80 $$ for (int i = 0; i < busiestThreads; i++) -->Line_81 $$ MyThreadInfo info = hotties.get(i)[ FD ]
Line_119 $$ boolean[] similars = new boolean[threadElementsSnapshotCount]-->Line_126 $$ similars = new boolean[threadElementsSnapshotCount][ FD ]
Line_2 $$ private String innerDetect() throws Exception -->Line_12 $$ sb.append(", busiestThreads=")[ CD ]
Line_95 $$ if ("block".equals(type)) -->Line_96 $$ time = hotties.get(t).blockedTime[ CD ]
Line_89 $$ for (int t = 0; t < busiestThreads; t++) -->Line_113 $$ sb.append(String.format(Locale.ROOT, "%n%4.1f%% (%s out of %s) %s usage by thread '%s'%n", percent, TimeValue.timeValueNanos(time), interval, type, threadName))[ CD ]
Line_17 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()-->Line_21 $$ if (!threadBean.isThreadCpuTimeEnabled()) [ FD ]
Line_29 $$ for (long threadId : threadBean.getAllThreadIds()) -->Line_50 $$ threadInfos.remove(threadId)[ FD ]
Line_69 $$ if ("cpu".equals(type)) -->Line_71 $$ if ("wait".equals(type)) [ CD ]
Line_28 $$ Map<Long, MyThreadInfo> threadInfos = new HashMap()-->Line_55 $$ threadInfos.remove(threadId)[ FD ]
Line_89 $$ for (int t = 0; t < busiestThreads; t++) -->Line_96 $$ time = hotties.get(t).blockedTime[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_154 $$ return sb.toString()[ FD ]
Line_118 $$ int maxSim = 1-->Line_146 $$ sb.append(String.format(Locale.ROOT, "  %d/%d snapshots sharing following %d elements%n", count, threadElementsSnapshotCount, maxSim))[ FD ]
Line_89 $$ for (int t = 0; t < busiestThreads; t++) -->Line_114 $$ boolean[] done = new boolean[threadElementsSnapshotCount][ CD ]
Line_17 $$ ThreadMXBean threadBean = ManagementFactory.getThreadMXBean()-->Line_37 $$ ThreadInfo info = threadBean.getThreadInfo(threadId, 0)[ FD ]
Line_28 $$ Map<Long, MyThreadInfo> threadInfos = new HashMap()-->Line_62 $$ threadInfos.remove(threadId)[ FD ]
Line_33 $$ long cpu = threadBean.getThreadCpuTime(threadId)-->Line_34 $$ if (cpu == -1) [ FD ]
Line_29 $$ for (long threadId : threadBean.getAllThreadIds()) -->Line_37 $$ ThreadInfo info = threadBean.getThreadInfo(threadId, 0)[ FD ]
