Line_2 $$ public boolean replaceChild(final ListType type, final INode oldChild, final INode newChild) -->Line_4 $$ for (int i = diffList.size() - 1; i >= 0; i--) [ CD ]
Line_4 $$ for (int i = diffList.size() - 1; i >= 0; i--) -->Line_5 $$ final ChildrenDiff diff = diffList.get(i).diff[ CD ]
Line_2 $$ public boolean replaceChild(final ListType type, final INode oldChild, final INode newChild) -->Line_6 $$ if (diff.replace(type, oldChild, newChild)) [ FD ]
Line_5 $$ final ChildrenDiff diff = diffList.get(i).diff-->Line_6 $$ if (diff.replace(type, oldChild, newChild)) [ FD ]
Line_3 $$ final List<DirectoryDiff> diffList = asList()-->Line_4 $$ for (int i = diffList.size() - 1; i >= 0; i--) [ FD ]
Line_3 $$ final List<DirectoryDiff> diffList = asList()-->Line_5 $$ final ChildrenDiff diff = diffList.get(i).diff[ FD ]
Line_6 $$ if (diff.replace(type, oldChild, newChild)) -->Line_7 $$ return true[ CD ]
Line_4 $$ for (int i = diffList.size() - 1; i >= 0; i--) -->Line_5 $$ final ChildrenDiff diff = diffList.get(i).diff[ FD ]
Line_4 $$ for (int i = diffList.size() - 1; i >= 0; i--) -->Line_6 $$ if (diff.replace(type, oldChild, newChild)) [ CD ]
Line_2 $$ public boolean replaceChild(final ListType type, final INode oldChild, final INode newChild) -->Line_10 $$ return false[ CD ]
Line_2 $$ public boolean replaceChild(final ListType type, final INode oldChild, final INode newChild) -->Line_3 $$ final List<DirectoryDiff> diffList = asList()[ CD ]
