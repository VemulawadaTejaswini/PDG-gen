Line_2 $$ public void testSqlFunctionAsAlias() throws Exception -->Line_11 $$ Transaction t = s.beginTransaction()[ CD ]
Line_12 $$ Simple simple = new Simple(Long.valueOf(10))-->Line_13 $$ simple.setName("Simple 1")[ FD ]
Line_17 $$ s = openSession()-->Line_24 $$ s.close()[ FD ]
Line_17 $$ s = openSession()-->Line_18 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ if (functionName == null) -->Line_6 $$ return[ CD ]
Line_19 $$ List result = s.createQuery(query).list()-->Line_20 $$ assertTrue(result.size() == 1)[ FD ]
Line_2 $$ public void testSqlFunctionAsAlias() throws Exception -->Line_21 $$ assertTrue(result.get(0) instanceof Simple)[ CD ]
Line_10 $$ Session s = openSession()-->Line_19 $$ List result = s.createQuery(query).list()[ FD ]
Line_18 $$ t = s.beginTransaction()-->Line_23 $$ t.commit()[ FD ]
Line_2 $$ public void testSqlFunctionAsAlias() throws Exception -->Line_13 $$ simple.setName("Simple 1")[ CD ]
Line_2 $$ public void testSqlFunctionAsAlias() throws Exception -->Line_17 $$ s = openSession()[ CD ]
Line_19 $$ List result = s.createQuery(query).list()-->Line_22 $$ s.delete(result.get(0))[ FD ]
Line_2 $$ public void testSqlFunctionAsAlias() throws Exception -->Line_10 $$ Session s = openSession()[ CD ]
Line_11 $$ Transaction t = s.beginTransaction()-->Line_18 $$ t = s.beginTransaction()[ FD ]
Line_11 $$ Transaction t = s.beginTransaction()-->Line_23 $$ t.commit()[ FD ]
Line_9 $$ String query = "select " + functionName + " from Simple as " + functionName + " where " + functionName + ".id = 10"-->Line_19 $$ List result = s.createQuery(query).list()[ FD ]
Line_4 $$ if (functionName == null) -->Line_5 $$ log.info("Dialect does not list any no-arg functions")[ CD ]
Line_2 $$ public void testSqlFunctionAsAlias() throws Exception -->Line_20 $$ assertTrue(result.size() == 1)[ CD ]
Line_2 $$ public void testSqlFunctionAsAlias() throws Exception -->Line_23 $$ t.commit()[ CD ]
Line_2 $$ public void testSqlFunctionAsAlias() throws Exception -->Line_8 $$ log.info("Using function named [" + functionName + "] for 'function as alias' test")[ CD ]
Line_2 $$ public void testSqlFunctionAsAlias() throws Exception -->Line_15 $$ t.commit()[ CD ]
Line_17 $$ s = openSession()-->Line_22 $$ s.delete(result.get(0))[ FD ]
Line_2 $$ public void testSqlFunctionAsAlias() throws Exception -->Line_22 $$ s.delete(result.get(0))[ CD ]
Line_2 $$ public void testSqlFunctionAsAlias() throws Exception -->Line_4 $$ if (functionName == null) [ CD ]
Line_10 $$ Session s = openSession()-->Line_18 $$ t = s.beginTransaction()[ FD ]
Line_19 $$ List result = s.createQuery(query).list()-->Line_21 $$ assertTrue(result.get(0) instanceof Simple)[ FD ]
Line_10 $$ Session s = openSession()-->Line_17 $$ s = openSession()[ FD ]
Line_2 $$ public void testSqlFunctionAsAlias() throws Exception -->Line_16 $$ s.close()[ CD ]
Line_10 $$ Session s = openSession()-->Line_16 $$ s.close()[ FD ]
Line_10 $$ Session s = openSession()-->Line_24 $$ s.close()[ FD ]
Line_2 $$ public void testSqlFunctionAsAlias() throws Exception -->Line_14 $$ s.save(simple)[ CD ]
Line_2 $$ public void testSqlFunctionAsAlias() throws Exception -->Line_24 $$ s.close()[ CD ]
Line_2 $$ public void testSqlFunctionAsAlias() throws Exception -->Line_3 $$ String functionName = locateAppropriateDialectFunctionNameForAliasTest()[ CD ]
Line_2 $$ public void testSqlFunctionAsAlias() throws Exception -->Line_18 $$ t = s.beginTransaction()[ CD ]
Line_3 $$ String functionName = locateAppropriateDialectFunctionNameForAliasTest()-->Line_4 $$ if (functionName == null) [ FD ]
Line_10 $$ Session s = openSession()-->Line_22 $$ s.delete(result.get(0))[ FD ]
Line_2 $$ public void testSqlFunctionAsAlias() throws Exception -->Line_9 $$ String query = "select " + functionName + " from Simple as " + functionName + " where " + functionName + ".id = 10"[ CD ]
Line_10 $$ Session s = openSession()-->Line_14 $$ s.save(simple)[ FD ]
Line_2 $$ public void testSqlFunctionAsAlias() throws Exception -->Line_12 $$ Simple simple = new Simple(Long.valueOf(10))[ CD ]
Line_2 $$ public void testSqlFunctionAsAlias() throws Exception -->Line_19 $$ List result = s.createQuery(query).list()[ CD ]
Line_11 $$ Transaction t = s.beginTransaction()-->Line_15 $$ t.commit()[ FD ]
Line_17 $$ s = openSession()-->Line_19 $$ List result = s.createQuery(query).list()[ FD ]
Line_12 $$ Simple simple = new Simple(Long.valueOf(10))-->Line_14 $$ s.save(simple)[ FD ]
Line_10 $$ Session s = openSession()-->Line_11 $$ Transaction t = s.beginTransaction()[ FD ]
