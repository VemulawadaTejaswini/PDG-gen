Line_4 $$ List<T> matches = new ArrayList<T>()-->Line_6 $$ if (matches.isEmpty()) [ FD ]
Line_2 $$ public <T extends ProjectIdentifier> T selectProject(ProjectRegistry<? extends T> registry) -->Line_3 $$ checkPreconditions(registry)[ FD ]
Line_2 $$ public <T extends ProjectIdentifier> T selectProject(ProjectRegistry<? extends T> registry) -->Line_4 $$ List<T> matches = new ArrayList<T>()[ CD ]
Line_2 $$ public <T extends ProjectIdentifier> T selectProject(ProjectRegistry<? extends T> registry) -->Line_5 $$ select(registry, matches)[ CD ]
Line_4 $$ List<T> matches = new ArrayList<T>()-->Line_9 $$ if (matches.size() != 1) [ FD ]
Line_2 $$ public <T extends ProjectIdentifier> T selectProject(ProjectRegistry<? extends T> registry) -->Line_3 $$ checkPreconditions(registry)[ CD ]
Line_2 $$ public <T extends ProjectIdentifier> T selectProject(ProjectRegistry<? extends T> registry) -->Line_6 $$ if (matches.isEmpty()) [ CD ]
Line_4 $$ List<T> matches = new ArrayList<T>()-->Line_12 $$ return matches.get(0)[ FD ]
Line_2 $$ public <T extends ProjectIdentifier> T selectProject(ProjectRegistry<? extends T> registry) -->Line_9 $$ if (matches.size() != 1) [ CD ]
Line_2 $$ public <T extends ProjectIdentifier> T selectProject(ProjectRegistry<? extends T> registry) -->Line_12 $$ return matches.get(0)[ CD ]
Line_4 $$ List<T> matches = new ArrayList<T>()-->Line_10 $$ throw new InvalidUserDataException(formatMultipleMatchesMessage(matches))[ FD ]
Line_2 $$ public <T extends ProjectIdentifier> T selectProject(ProjectRegistry<? extends T> registry) -->Line_5 $$ select(registry, matches)[ FD ]
Line_4 $$ List<T> matches = new ArrayList<T>()-->Line_5 $$ select(registry, matches)[ FD ]
