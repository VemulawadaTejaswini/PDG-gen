Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_19 $$ List resultList = (List) results[ CD ]
Line_24 $$ Address address1 = (Address) yogiObjects1[1]-->Line_25 $$ assertEquals(yogiExpected.getAddresses().get(address1.getAddressType()), address1)[ FD ]
Line_10 $$ HqlExecutor hqlExecutorAliased = new HqlExecutor() -->Line_13 $$ return s.createQuery("from Student s left join s.addresses a order by s.studentNumber")[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_31 $$ Object[] shermanObjects = (Object[]) resultList.get(2)[ CD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_21 $$ assertTrue(resultList.get(0) instanceof Object[])[ CD ]
Line_28 $$ Address address2 = (Address) yogiObjects2[1]-->Line_29 $$ assertEquals(yogiExpected.getAddresses().get(address2.getAddressType()), address2)[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_29 $$ assertEquals(yogiExpected.getAddresses().get(address2.getAddressType()), address2)[ CD ]
Line_19 $$ List resultList = (List) results-->Line_21 $$ assertTrue(resultList.get(0) instanceof Object[])[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_26 $$ Object[] yogiObjects2 = (Object[]) resultList.get(1)[ CD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_24 $$ Address address1 = (Address) yogiObjects1[1][ CD ]
Line_4 $$ HqlExecutor hqlExecutorUnaliased = new HqlExecutor() -->Line_7 $$ return s.createQuery("from Student s left join s.addresses order by s.studentNumber")[ CD ]
Line_4 $$ HqlExecutor hqlExecutorUnaliased = new HqlExecutor() -->Line_13 $$ return s.createQuery("from Student s left join s.addresses a order by s.studentNumber")[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_25 $$ assertEquals(yogiExpected.getAddresses().get(address1.getAddressType()), address1)[ CD ]
Line_19 $$ List resultList = (List) results-->Line_31 $$ Object[] shermanObjects = (Object[]) resultList.get(2)[ FD ]
Line_19 $$ List resultList = (List) results-->Line_22 $$ Object[] yogiObjects1 = (Object[]) resultList.get(0)[ FD ]
Line_24 $$ Address address1 = (Address) yogiObjects1[1]-->Line_30 $$ assertFalse(address1.getAddressType().equals(address2.getAddressType()))[ FD ]
Line_28 $$ Address address2 = (Address) yogiObjects2[1]-->Line_30 $$ assertFalse(address1.getAddressType().equals(address2.getAddressType()))[ FD ]
Line_4 $$ HqlExecutor hqlExecutorUnaliased = new HqlExecutor() -->Line_7 $$ return s.createQuery("from Student s left join s.addresses order by s.studentNumber")[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_23 $$ assertEquals(yogiExpected, yogiObjects1[0])[ CD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_32 $$ assertEquals(shermanExpected, shermanObjects[0])[ CD ]
Line_19 $$ List resultList = (List) results-->Line_20 $$ assertEquals(3, resultList.size())[ FD ]
Line_19 $$ List resultList = (List) results-->Line_26 $$ Object[] yogiObjects2 = (Object[]) resultList.get(1)[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_22 $$ Object[] yogiObjects1 = (Object[]) resultList.get(0)[ CD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_33 $$ assertNull(shermanObjects[1])[ CD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_30 $$ assertFalse(address1.getAddressType().equals(address2.getAddressType()))[ CD ]
Line_4 $$ HqlExecutor hqlExecutorUnaliased = new HqlExecutor() -->Line_36 $$ runTest(hqlExecutorUnaliased, null, checker, false)[ FD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_27 $$ assertSame(yogiObjects1[0], yogiObjects2[0])[ CD ]
Line_10 $$ HqlExecutor hqlExecutorAliased = new HqlExecutor() -->Line_13 $$ return s.createQuery("from Student s left join s.addresses a order by s.studentNumber")[ CD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_28 $$ Address address2 = (Address) yogiObjects2[1][ CD ]
Line_16 $$ ResultChecker checker = new ResultChecker() -->Line_20 $$ assertEquals(3, resultList.size())[ CD ]
