Line_3 $$ Set<String> fileNames = new HashSet<String>()-->Line_6 $$ fileNames.add(fileIter.next())[ FD ]
Line_13 $$ Map<String, MultipartFile> fileMap = request.getFileMap()-->Line_16 $$ assertEquals(file1, fileMap.get("file1"))[ FD ]
Line_2 $$ private void doTestMultipartHttpServletRequest(MultipartHttpServletRequest request) throws IOException -->Line_10 $$ assertTrue(fileNames.contains("file2"))[ CD ]
Line_13 $$ Map<String, MultipartFile> fileMap = request.getFileMap()-->Line_17 $$ assertEquals(file2, fileMap.get("file2"))[ FD ]
Line_12 $$ MultipartFile file2 = request.getFile("file2")-->Line_25 $$ assertEquals("text/plain", file2.getContentType())[ FD ]
Line_2 $$ private void doTestMultipartHttpServletRequest(MultipartHttpServletRequest request) throws IOException -->Line_14 $$ List<String> fileMapKeys = new LinkedList<String>(fileMap.keySet())[ CD ]
Line_12 $$ MultipartFile file2 = request.getFile("file2")-->Line_27 $$ assertTrue(ObjectUtils.nullSafeEquals("myContent2".getBytes(), FileCopyUtils.copyToByteArray(file2.getInputStream())))[ FD ]
Line_2 $$ private void doTestMultipartHttpServletRequest(MultipartHttpServletRequest request) throws IOException -->Line_18 $$ assertEquals("file1", file1.getName())[ CD ]
Line_3 $$ Set<String> fileNames = new HashSet<String>()-->Line_10 $$ assertTrue(fileNames.contains("file2"))[ FD ]
Line_2 $$ private void doTestMultipartHttpServletRequest(MultipartHttpServletRequest request) throws IOException -->Line_5 $$ while (fileIter.hasNext()) [ CD ]
Line_3 $$ Set<String> fileNames = new HashSet<String>()-->Line_9 $$ assertTrue(fileNames.contains("file1"))[ FD ]
Line_11 $$ MultipartFile file1 = request.getFile("file1")-->Line_16 $$ assertEquals(file1, fileMap.get("file1"))[ FD ]
Line_2 $$ private void doTestMultipartHttpServletRequest(MultipartHttpServletRequest request) throws IOException -->Line_3 $$ Set<String> fileNames = new HashSet<String>()[ CD ]
Line_14 $$ List<String> fileMapKeys = new LinkedList<String>(fileMap.keySet())-->Line_15 $$ assertEquals(2, fileMapKeys.size())[ FD ]
Line_12 $$ MultipartFile file2 = request.getFile("file2")-->Line_17 $$ assertEquals(file2, fileMap.get("file2"))[ FD ]
Line_5 $$ while (fileIter.hasNext()) -->Line_6 $$ fileNames.add(fileIter.next())[ CD ]
Line_2 $$ private void doTestMultipartHttpServletRequest(MultipartHttpServletRequest request) throws IOException -->Line_20 $$ assertNull(file1.getContentType())[ CD ]
Line_2 $$ private void doTestMultipartHttpServletRequest(MultipartHttpServletRequest request) throws IOException -->Line_17 $$ assertEquals(file2, fileMap.get("file2"))[ CD ]
Line_2 $$ private void doTestMultipartHttpServletRequest(MultipartHttpServletRequest request) throws IOException -->Line_8 $$ assertEquals(2, fileNames.size())[ CD ]
Line_12 $$ MultipartFile file2 = request.getFile("file2")-->Line_24 $$ assertEquals("myOrigFilename", file2.getOriginalFilename())[ FD ]
Line_12 $$ MultipartFile file2 = request.getFile("file2")-->Line_23 $$ assertEquals("file2", file2.getName())[ FD ]
Line_2 $$ private void doTestMultipartHttpServletRequest(MultipartHttpServletRequest request) throws IOException -->Line_11 $$ MultipartFile file1 = request.getFile("file1")[ CD ]
Line_2 $$ private void doTestMultipartHttpServletRequest(MultipartHttpServletRequest request) throws IOException -->Line_13 $$ Map<String, MultipartFile> fileMap = request.getFileMap()[ FD ]
Line_4 $$ Iterator<String> fileIter = request.getFileNames()-->Line_6 $$ fileNames.add(fileIter.next())[ FD ]
Line_2 $$ private void doTestMultipartHttpServletRequest(MultipartHttpServletRequest request) throws IOException -->Line_4 $$ Iterator<String> fileIter = request.getFileNames()[ CD ]
Line_13 $$ Map<String, MultipartFile> fileMap = request.getFileMap()-->Line_14 $$ List<String> fileMapKeys = new LinkedList<String>(fileMap.keySet())[ FD ]
Line_11 $$ MultipartFile file1 = request.getFile("file1")-->Line_21 $$ assertTrue(ObjectUtils.nullSafeEquals("myContent1".getBytes(), file1.getBytes()))[ FD ]
Line_2 $$ private void doTestMultipartHttpServletRequest(MultipartHttpServletRequest request) throws IOException -->Line_24 $$ assertEquals("myOrigFilename", file2.getOriginalFilename())[ CD ]
Line_2 $$ private void doTestMultipartHttpServletRequest(MultipartHttpServletRequest request) throws IOException -->Line_26 $$ assertTrue(ObjectUtils.nullSafeEquals("myContent2".getBytes(), file2.getBytes()))[ CD ]
Line_12 $$ MultipartFile file2 = request.getFile("file2")-->Line_26 $$ assertTrue(ObjectUtils.nullSafeEquals("myContent2".getBytes(), file2.getBytes()))[ FD ]
Line_11 $$ MultipartFile file1 = request.getFile("file1")-->Line_19 $$ assertEquals("", file1.getOriginalFilename())[ FD ]
Line_2 $$ private void doTestMultipartHttpServletRequest(MultipartHttpServletRequest request) throws IOException -->Line_22 $$ assertTrue(ObjectUtils.nullSafeEquals("myContent1".getBytes(), FileCopyUtils.copyToByteArray(file1.getInputStream())))[ CD ]
Line_2 $$ private void doTestMultipartHttpServletRequest(MultipartHttpServletRequest request) throws IOException -->Line_9 $$ assertTrue(fileNames.contains("file1"))[ CD ]
Line_2 $$ private void doTestMultipartHttpServletRequest(MultipartHttpServletRequest request) throws IOException -->Line_23 $$ assertEquals("file2", file2.getName())[ CD ]
Line_2 $$ private void doTestMultipartHttpServletRequest(MultipartHttpServletRequest request) throws IOException -->Line_25 $$ assertEquals("text/plain", file2.getContentType())[ CD ]
Line_2 $$ private void doTestMultipartHttpServletRequest(MultipartHttpServletRequest request) throws IOException -->Line_4 $$ Iterator<String> fileIter = request.getFileNames()[ FD ]
Line_2 $$ private void doTestMultipartHttpServletRequest(MultipartHttpServletRequest request) throws IOException -->Line_27 $$ assertTrue(ObjectUtils.nullSafeEquals("myContent2".getBytes(), FileCopyUtils.copyToByteArray(file2.getInputStream())))[ CD ]
Line_2 $$ private void doTestMultipartHttpServletRequest(MultipartHttpServletRequest request) throws IOException -->Line_11 $$ MultipartFile file1 = request.getFile("file1")[ FD ]
Line_3 $$ Set<String> fileNames = new HashSet<String>()-->Line_8 $$ assertEquals(2, fileNames.size())[ FD ]
Line_2 $$ private void doTestMultipartHttpServletRequest(MultipartHttpServletRequest request) throws IOException -->Line_12 $$ MultipartFile file2 = request.getFile("file2")[ FD ]
Line_11 $$ MultipartFile file1 = request.getFile("file1")-->Line_20 $$ assertNull(file1.getContentType())[ FD ]
Line_11 $$ MultipartFile file1 = request.getFile("file1")-->Line_18 $$ assertEquals("file1", file1.getName())[ FD ]
Line_2 $$ private void doTestMultipartHttpServletRequest(MultipartHttpServletRequest request) throws IOException -->Line_15 $$ assertEquals(2, fileMapKeys.size())[ CD ]
Line_4 $$ Iterator<String> fileIter = request.getFileNames()-->Line_5 $$ while (fileIter.hasNext()) [ FD ]
Line_11 $$ MultipartFile file1 = request.getFile("file1")-->Line_22 $$ assertTrue(ObjectUtils.nullSafeEquals("myContent1".getBytes(), FileCopyUtils.copyToByteArray(file1.getInputStream())))[ FD ]
Line_2 $$ private void doTestMultipartHttpServletRequest(MultipartHttpServletRequest request) throws IOException -->Line_21 $$ assertTrue(ObjectUtils.nullSafeEquals("myContent1".getBytes(), file1.getBytes()))[ CD ]
Line_2 $$ private void doTestMultipartHttpServletRequest(MultipartHttpServletRequest request) throws IOException -->Line_16 $$ assertEquals(file1, fileMap.get("file1"))[ CD ]
Line_2 $$ private void doTestMultipartHttpServletRequest(MultipartHttpServletRequest request) throws IOException -->Line_19 $$ assertEquals("", file1.getOriginalFilename())[ CD ]
Line_2 $$ private void doTestMultipartHttpServletRequest(MultipartHttpServletRequest request) throws IOException -->Line_12 $$ MultipartFile file2 = request.getFile("file2")[ CD ]
Line_2 $$ private void doTestMultipartHttpServletRequest(MultipartHttpServletRequest request) throws IOException -->Line_13 $$ Map<String, MultipartFile> fileMap = request.getFileMap()[ CD ]
