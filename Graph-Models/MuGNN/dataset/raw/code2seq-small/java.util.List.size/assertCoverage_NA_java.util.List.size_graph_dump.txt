Line_2 $$ public static synchronized void assertCoverage(boolean includeInnerClasses, Class<?>... classes) -->Line_6 $$ _instrumentation.removeTransformer(_whipClassFileTransformer)[ CD ]
Line_34 $$ AssertionError assertionError = assertionErrors.get(0)-->Line_36 $$ assertionError.addSuppressed(assertionErrors.get(i))[ FD ]
Line_33 $$ if (!assertionErrors.isEmpty()) -->Line_35 $$ for (int i = 1; i < assertionErrors.size(); i++) [ CD ]
Line_45 $$ for (OriginalClassDefinition originalClassDefinition : _originalClassDefinitions) -->Line_46 $$ ClassDefinition classDefinition = originalClassDefinition.toClassDefinition()[ FD ]
Line_11 $$ for (Class<?> clazz : classes) -->Line_12 $$ if (clazz.isSynthetic()) [ FD ]
Line_15 $$ ClassData classData = projectData.getClassData(clazz.getName())-->Line_28 $$ classData = projectData.getClassData(declaredClass.getName())[ FD ]
Line_19 $$ for (Class<?> declaredClass : declaredClasses) -->Line_28 $$ classData = projectData.getClassData(declaredClass.getName())[ FD ]
Line_35 $$ for (int i = 1; i < assertionErrors.size(); i++) -->Line_36 $$ assertionError.addSuppressed(assertionErrors.get(i))[ FD ]
Line_19 $$ for (Class<?> declaredClass : declaredClasses) -->Line_24 $$ if (clazz2.equals(declaredClass)) [ FD ]
Line_35 $$ for (int i = 1; i < assertionErrors.size(); i++) -->Line_36 $$ assertionError.addSuppressed(assertionErrors.get(i))[ CD ]
Line_11 $$ for (Class<?> clazz : classes) -->Line_15 $$ ClassData classData = projectData.getClassData(clazz.getName())[ FD ]
Line_10 $$ List<AssertionError> assertionErrors = new ArrayList()-->Line_35 $$ for (int i = 1; i < assertionErrors.size(); i++) [ FD ]
Line_46 $$ ClassDefinition classDefinition = originalClassDefinition.toClassDefinition()-->Line_48 $$ classDefinitions.add(classDefinition)[ FD ]
Line_15 $$ ClassData classData = projectData.getClassData(clazz.getName())-->Line_16 $$ _assertClassDataCoverage(assertionErrors, clazz, classData)[ FD ]
Line_15 $$ ClassData classData = projectData.getClassData(clazz.getName())-->Line_29 $$ _assertClassDataCoverage(assertionErrors, declaredClass, classData)[ FD ]
Line_10 $$ List<AssertionError> assertionErrors = new ArrayList()-->Line_16 $$ _assertClassDataCoverage(assertionErrors, clazz, classData)[ FD ]
Line_47 $$ if (classDefinition != null) -->Line_48 $$ classDefinitions.add(classDefinition)[ CD ]
Line_3 $$ if (!_dynamicallyInstrumented) -->Line_4 $$ return[ CD ]
Line_28 $$ classData = projectData.getClassData(declaredClass.getName())-->Line_29 $$ _assertClassDataCoverage(assertionErrors, declaredClass, classData)[ FD ]
Line_10 $$ List<AssertionError> assertionErrors = new ArrayList()-->Line_33 $$ if (!assertionErrors.isEmpty()) [ FD ]
Line_10 $$ List<AssertionError> assertionErrors = new ArrayList()-->Line_29 $$ _assertClassDataCoverage(assertionErrors, declaredClass, classData)[ FD ]
Line_10 $$ List<AssertionError> assertionErrors = new ArrayList()-->Line_34 $$ AssertionError assertionError = assertionErrors.get(0)[ FD ]
Line_46 $$ ClassDefinition classDefinition = originalClassDefinition.toClassDefinition()-->Line_47 $$ if (classDefinition != null) [ FD ]
Line_17 $$ if (includeInnerClasses) -->Line_18 $$ Class<?>[] declaredClasses = clazz.getDeclaredClasses()[ CD ]
Line_9 $$ ProjectData projectData = ProjectDataUtil.captureProjectData(false, false)-->Line_15 $$ ClassData classData = projectData.getClassData(clazz.getName())[ FD ]
Line_19 $$ for (Class<?> declaredClass : declaredClasses) -->Line_20 $$ if (declaredClass.isSynthetic()) [ FD ]
Line_2 $$ public static synchronized void assertCoverage(boolean includeInnerClasses, Class<?>... classes) -->Line_3 $$ if (!_dynamicallyInstrumented) [ CD ]
Line_19 $$ for (Class<?> declaredClass : declaredClasses) -->Line_29 $$ _assertClassDataCoverage(assertionErrors, declaredClass, classData)[ FD ]
Line_11 $$ for (Class<?> clazz : classes) -->Line_16 $$ _assertClassDataCoverage(assertionErrors, clazz, classData)[ FD ]
Line_11 $$ for (Class<?> clazz : classes) -->Line_18 $$ Class<?>[] declaredClasses = clazz.getDeclaredClasses()[ FD ]
Line_9 $$ ProjectData projectData = ProjectDataUtil.captureProjectData(false, false)-->Line_28 $$ classData = projectData.getClassData(declaredClass.getName())[ FD ]
Line_33 $$ if (!assertionErrors.isEmpty()) -->Line_34 $$ AssertionError assertionError = assertionErrors.get(0)[ CD ]
Line_44 $$ List<ClassDefinition> classDefinitions = new ArrayList(_originalClassDefinitions.size())-->Line_48 $$ classDefinitions.add(classDefinition)[ FD ]
Line_44 $$ List<ClassDefinition> classDefinitions = new ArrayList(_originalClassDefinitions.size())-->Line_52 $$ _instrumentation.redefineClasses(classDefinitions.toArray(new ClassDefinition[classDefinitions.size()]))[ FD ]
Line_23 $$ for (Class<?> clazz2 : classes) -->Line_24 $$ if (clazz2.equals(declaredClass)) [ FD ]
Line_10 $$ List<AssertionError> assertionErrors = new ArrayList()-->Line_36 $$ assertionError.addSuppressed(assertionErrors.get(i))[ FD ]
