Line_10 $$ long maxAvailable = 0-->Line_19 $$ maxAvailable = availableVolumeSize[ FD ]
Line_2 $$ public synchronized V chooseVolume(final List<V> volumes, final long blockSize) throws IOException -->Line_13 $$ curVolume = (curVolume + 1) % volumes.size()[ FD ]
Line_2 $$ public synchronized V chooseVolume(final List<V> volumes, final long blockSize) throws IOException -->Line_10 $$ long maxAvailable = 0[ CD ]
Line_2 $$ public synchronized V chooseVolume(final List<V> volumes, final long blockSize) throws IOException -->Line_12 $$ final V volume = volumes.get(curVolume)[ FD ]
Line_11 $$ while (true) -->Line_15 $$ if (availableVolumeSize > blockSize) [ CD ]
Line_9 $$ int startVolume = curVolume-->Line_21 $$ if (curVolume == startVolume) [ FD ]
Line_18 $$ if (availableVolumeSize > maxAvailable) -->Line_19 $$ maxAvailable = availableVolumeSize[ CD ]
Line_11 $$ while (true) -->Line_18 $$ if (availableVolumeSize > maxAvailable) [ CD ]
Line_10 $$ long maxAvailable = 0-->Line_18 $$ if (availableVolumeSize > maxAvailable) [ FD ]
Line_2 $$ public synchronized V chooseVolume(final List<V> volumes, final long blockSize) throws IOException -->Line_6 $$ if (curVolume >= volumes.size()) [ FD ]
Line_11 $$ while (true) -->Line_21 $$ if (curVolume == startVolume) [ CD ]
Line_14 $$ long availableVolumeSize = volume.getAvailable()-->Line_18 $$ if (availableVolumeSize > maxAvailable) [ FD ]
Line_2 $$ public synchronized V chooseVolume(final List<V> volumes, final long blockSize) throws IOException -->Line_11 $$ while (true) [ CD ]
Line_2 $$ public synchronized V chooseVolume(final List<V> volumes, final long blockSize) throws IOException -->Line_3 $$ if (volumes.size() < 1) [ CD ]
Line_11 $$ while (true) -->Line_14 $$ long availableVolumeSize = volume.getAvailable()[ CD ]
Line_2 $$ public synchronized V chooseVolume(final List<V> volumes, final long blockSize) throws IOException -->Line_3 $$ if (volumes.size() < 1) [ FD ]
Line_14 $$ long availableVolumeSize = volume.getAvailable()-->Line_15 $$ if (availableVolumeSize > blockSize) [ FD ]
Line_2 $$ public synchronized V chooseVolume(final List<V> volumes, final long blockSize) throws IOException -->Line_15 $$ if (availableVolumeSize > blockSize) [ FD ]
Line_19 $$ maxAvailable = availableVolumeSize-->Line_18 $$ if (availableVolumeSize > maxAvailable) [ FD ]
Line_2 $$ public synchronized V chooseVolume(final List<V> volumes, final long blockSize) throws IOException -->Line_6 $$ if (curVolume >= volumes.size()) [ CD ]
Line_2 $$ public synchronized V chooseVolume(final List<V> volumes, final long blockSize) throws IOException -->Line_9 $$ int startVolume = curVolume[ CD ]
Line_15 $$ if (availableVolumeSize > blockSize) -->Line_16 $$ return volume[ CD ]
Line_14 $$ long availableVolumeSize = volume.getAvailable()-->Line_19 $$ maxAvailable = availableVolumeSize[ FD ]
Line_12 $$ final V volume = volumes.get(curVolume)-->Line_14 $$ long availableVolumeSize = volume.getAvailable()[ FD ]
Line_11 $$ while (true) -->Line_12 $$ final V volume = volumes.get(curVolume)[ CD ]
