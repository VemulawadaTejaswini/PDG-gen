Line_2 $$ protected void assertResult(Result result, Class<?>... testClasses) -->Line_4 $$ List<?> failures = result.getFailures()[ FD ]
Line_2 $$ protected void assertResult(Result result, Class<?>... testClasses) -->Line_3 $$ Assert.assertEquals(0, result.getFailureCount())[ FD ]
Line_2 $$ protected void assertResult(Result result, Class<?>... testClasses) -->Line_3 $$ Assert.assertEquals(0, result.getFailureCount())[ CD ]
Line_2 $$ protected void assertResult(Result result, Class<?>... testClasses) -->Line_6 $$ Assert.assertEquals(0, result.getIgnoreCount())[ FD ]
Line_4 $$ List<?> failures = result.getFailures()-->Line_5 $$ Assert.assertTrue(failures.isEmpty())[ FD ]
Line_2 $$ protected void assertResult(Result result, Class<?>... testClasses) -->Line_13 $$ Assert.assertEquals(runCount, result.getRunCount())[ FD ]
Line_11 $$ runCount += methods.size()-->Line_13 $$ Assert.assertEquals(runCount, result.getRunCount())[ FD ]
Line_10 $$ List<?> methods = testClass.getAnnotatedMethods(Test.class)-->Line_11 $$ runCount += methods.size()[ FD ]
Line_2 $$ protected void assertResult(Result result, Class<?>... testClasses) -->Line_7 $$ int runCount = 0[ CD ]
Line_7 $$ int runCount = 0-->Line_13 $$ Assert.assertEquals(runCount, result.getRunCount())[ FD ]
Line_2 $$ protected void assertResult(Result result, Class<?>... testClasses) -->Line_6 $$ Assert.assertEquals(0, result.getIgnoreCount())[ CD ]
Line_2 $$ protected void assertResult(Result result, Class<?>... testClasses) -->Line_5 $$ Assert.assertTrue(failures.isEmpty())[ CD ]
Line_2 $$ protected void assertResult(Result result, Class<?>... testClasses) -->Line_4 $$ List<?> failures = result.getFailures()[ CD ]
Line_7 $$ int runCount = 0-->Line_11 $$ runCount += methods.size()[ FD ]
Line_9 $$ TestClass testClass = new TestClass(clazz)-->Line_10 $$ List<?> methods = testClass.getAnnotatedMethods(Test.class)[ FD ]
Line_2 $$ protected void assertResult(Result result, Class<?>... testClasses) -->Line_13 $$ Assert.assertEquals(runCount, result.getRunCount())[ CD ]
