Line_28 $$ final byte[] actualContentSimple = readAllSimple(harFileSystem.open(path), true)-->Line_38 $$ assertArrayEquals(actualContentSimple, actualContentSkip)[ FD ]
Line_24 $$ final Path path = new Path(fullHarPathStr + Path.SEPARATOR + pathStr0)-->Line_35 $$ final byte[] actualContentRead4 = readAllWithRead4(harFileSystem.open(path), true)[ FD ]
Line_2 $$ public void testReadFileContent() throws Exception -->Line_6 $$ fileList.add(createFile(inputPath, fs, sub1.getName(), "file x y z"))[ CD ]
Line_4 $$ final Path sub1 = new Path(inputPath, "sub 1")-->Line_10 $$ fileList.add(createFile(inputPath, fs, sub1.getName(), "z"))[ FD ]
Line_28 $$ final byte[] actualContentSimple = readAllSimple(harFileSystem.open(path), true)-->Line_32 $$ assertArrayEquals(actualContentSimple, actualContentFully)[ FD ]
Line_14 $$ final byte[] binContent = prepareBin()-->Line_40 $$ assertArrayEquals(binContent, actualContentSimple)[ FD ]
Line_24 $$ final Path path = new Path(fullHarPathStr + Path.SEPARATOR + pathStr0)-->Line_31 $$ final byte[] actualContentFully = readAllWithReadFully(actualContentSimple.length, harFileSystem.open(path), true)[ FD ]
Line_29 $$ final byte[] actualContentBuffer = readAllWithBuffer(harFileSystem.open(path), true)-->Line_30 $$ assertArrayEquals(actualContentSimple, actualContentBuffer)[ FD ]
Line_27 $$ if (status.isFile()) -->Line_34 $$ assertArrayEquals(actualContentSimple, actualContentSeek)[ CD ]
Line_4 $$ final Path sub1 = new Path(inputPath, "sub 1")-->Line_7 $$ fileList.add(createFile(inputPath, fs, sub1.getName(), "file"))[ FD ]
Line_26 $$ final FileStatus status = harFileSystem.getFileStatus(path)-->Line_27 $$ if (status.isFile()) [ FD ]
Line_2 $$ public void testReadFileContent() throws Exception -->Line_12 $$ fs.mkdirs(sub2)[ CD ]
Line_39 $$ if ("bin".equals(baseName)) -->Line_41 $$ if ("zero-length".equals(baseName)) [ CD ]
Line_18 $$ final HarFileSystem harFileSystem = new HarFileSystem(fs)-->Line_33 $$ final byte[] actualContentSeek = readAllWithSeek(actualContentSimple.length, harFileSystem.open(path), true)[ FD ]
Line_27 $$ if (status.isFile()) -->Line_30 $$ assertArrayEquals(actualContentSimple, actualContentBuffer)[ CD ]
Line_24 $$ final Path path = new Path(fullHarPathStr + Path.SEPARATOR + pathStr0)-->Line_26 $$ final FileStatus status = harFileSystem.getFileStatus(path)[ FD ]
Line_27 $$ if (status.isFile()) -->Line_31 $$ final byte[] actualContentFully = readAllWithReadFully(actualContentSimple.length, harFileSystem.open(path), true)[ CD ]
Line_11 $$ final Path sub2 = new Path(inputPath, "sub 1 with suffix")-->Line_12 $$ fs.mkdirs(sub2)[ FD ]
Line_22 $$ int readFileCount = 0-->Line_50 $$ assertEquals(fileList.size(), readFileCount)[ FD ]
Line_18 $$ final HarFileSystem harFileSystem = new HarFileSystem(fs)-->Line_29 $$ final byte[] actualContentBuffer = readAllWithBuffer(harFileSystem.open(path), true)[ FD ]
Line_27 $$ if (status.isFile()) -->Line_29 $$ final byte[] actualContentBuffer = readAllWithBuffer(harFileSystem.open(path), true)[ CD ]
Line_28 $$ final byte[] actualContentSimple = readAllSimple(harFileSystem.open(path), true)-->Line_30 $$ assertArrayEquals(actualContentSimple, actualContentBuffer)[ FD ]
Line_31 $$ final byte[] actualContentFully = readAllWithReadFully(actualContentSimple.length, harFileSystem.open(path), true)-->Line_32 $$ assertArrayEquals(actualContentSimple, actualContentFully)[ FD ]
Line_44 $$ String actual = new String(actualContentSimple, "UTF-8")-->Line_45 $$ assertEquals(baseName, actual)[ FD ]
Line_2 $$ public void testReadFileContent() throws Exception -->Line_5 $$ fs.mkdirs(sub1)[ CD ]
Line_14 $$ final byte[] binContent = prepareBin()-->Line_15 $$ fileList.add(createFile(inputPath, fs, binContent, sub2.getName(), "bin"))[ FD ]
Line_22 $$ int readFileCount = 0-->Line_47 $$ readFileCount++[ FD ]
Line_37 $$ final byte[] actualContentSkip = readAllWithSkip(actualContentSimple.length, harFileSystem.open(path), harFileSystem.open(path), true)-->Line_38 $$ assertArrayEquals(actualContentSimple, actualContentSkip)[ FD ]
Line_2 $$ public void testReadFileContent() throws Exception -->Line_4 $$ final Path sub1 = new Path(inputPath, "sub 1")[ CD ]
Line_18 $$ final HarFileSystem harFileSystem = new HarFileSystem(fs)-->Line_28 $$ final byte[] actualContentSimple = readAllSimple(harFileSystem.open(path), true)[ FD ]
Line_18 $$ final HarFileSystem harFileSystem = new HarFileSystem(fs)-->Line_52 $$ harFileSystem.close()[ FD ]
Line_2 $$ public void testReadFileContent() throws Exception -->Line_14 $$ final byte[] binContent = prepareBin()[ CD ]
Line_25 $$ final String baseName = path.getName()-->Line_45 $$ assertEquals(baseName, actual)[ FD ]
Line_18 $$ final HarFileSystem harFileSystem = new HarFileSystem(fs)-->Line_21 $$ harFileSystem.initialize(harUri, fs.getConf())[ FD ]
Line_2 $$ public void testReadFileContent() throws Exception -->Line_7 $$ fileList.add(createFile(inputPath, fs, sub1.getName(), "file"))[ CD ]
Line_35 $$ final byte[] actualContentRead4 = readAllWithRead4(harFileSystem.open(path), true)-->Line_36 $$ assertArrayEquals(actualContentSimple, actualContentRead4)[ FD ]
Line_28 $$ final byte[] actualContentSimple = readAllSimple(harFileSystem.open(path), true)-->Line_36 $$ assertArrayEquals(actualContentSimple, actualContentRead4)[ FD ]
Line_4 $$ final Path sub1 = new Path(inputPath, "sub 1")-->Line_6 $$ fileList.add(createFile(inputPath, fs, sub1.getName(), "file x y z"))[ FD ]
Line_28 $$ final byte[] actualContentSimple = readAllSimple(harFileSystem.open(path), true)-->Line_40 $$ assertArrayEquals(binContent, actualContentSimple)[ FD ]
Line_27 $$ if (status.isFile()) -->Line_47 $$ readFileCount++[ CD ]
Line_27 $$ if (status.isFile()) -->Line_38 $$ assertArrayEquals(actualContentSimple, actualContentSkip)[ CD ]
Line_18 $$ final HarFileSystem harFileSystem = new HarFileSystem(fs)-->Line_31 $$ final byte[] actualContentFully = readAllWithReadFully(actualContentSimple.length, harFileSystem.open(path), true)[ FD ]
Line_2 $$ public void testReadFileContent() throws Exception -->Line_17 $$ final String fullHarPathStr = makeArchive()[ CD ]
Line_39 $$ if ("bin".equals(baseName)) -->Line_40 $$ assertArrayEquals(binContent, actualContentSimple)[ CD ]
Line_2 $$ public void testReadFileContent() throws Exception -->Line_9 $$ fileList.add(createFile(inputPath, fs, sub1.getName(), "y"))[ CD ]
Line_2 $$ public void testReadFileContent() throws Exception -->Line_3 $$ fileList.add(createFile(inputPath, fs, "c c"))[ CD ]
Line_4 $$ final Path sub1 = new Path(inputPath, "sub 1")-->Line_8 $$ fileList.add(createFile(inputPath, fs, sub1.getName(), "x"))[ FD ]
Line_18 $$ final HarFileSystem harFileSystem = new HarFileSystem(fs)-->Line_37 $$ final byte[] actualContentSkip = readAllWithSkip(actualContentSimple.length, harFileSystem.open(path), harFileSystem.open(path), true)[ FD ]
Line_25 $$ final String baseName = path.getName()-->Line_39 $$ if ("bin".equals(baseName)) [ FD ]
Line_41 $$ if ("zero-length".equals(baseName)) -->Line_42 $$ assertEquals(0, actualContentSimple.length)[ CD ]
Line_41 $$ if ("zero-length".equals(baseName)) -->Line_44 $$ String actual = new String(actualContentSimple, "UTF-8")[ CD ]
Line_24 $$ final Path path = new Path(fullHarPathStr + Path.SEPARATOR + pathStr0)-->Line_37 $$ final byte[] actualContentSkip = readAllWithSkip(actualContentSimple.length, harFileSystem.open(path), harFileSystem.open(path), true)[ FD ]
Line_24 $$ final Path path = new Path(fullHarPathStr + Path.SEPARATOR + pathStr0)-->Line_33 $$ final byte[] actualContentSeek = readAllWithSeek(actualContentSimple.length, harFileSystem.open(path), true)[ FD ]
Line_4 $$ final Path sub1 = new Path(inputPath, "sub 1")-->Line_5 $$ fs.mkdirs(sub1)[ FD ]
Line_2 $$ public void testReadFileContent() throws Exception -->Line_10 $$ fileList.add(createFile(inputPath, fs, sub1.getName(), "z"))[ CD ]
Line_18 $$ final HarFileSystem harFileSystem = new HarFileSystem(fs)-->Line_26 $$ final FileStatus status = harFileSystem.getFileStatus(path)[ FD ]
Line_24 $$ final Path path = new Path(fullHarPathStr + Path.SEPARATOR + pathStr0)-->Line_25 $$ final String baseName = path.getName()[ FD ]
Line_27 $$ if (status.isFile()) -->Line_33 $$ final byte[] actualContentSeek = readAllWithSeek(actualContentSimple.length, harFileSystem.open(path), true)[ CD ]
Line_24 $$ final Path path = new Path(fullHarPathStr + Path.SEPARATOR + pathStr0)-->Line_29 $$ final byte[] actualContentBuffer = readAllWithBuffer(harFileSystem.open(path), true)[ FD ]
Line_27 $$ if (status.isFile()) -->Line_37 $$ final byte[] actualContentSkip = readAllWithSkip(actualContentSimple.length, harFileSystem.open(path), harFileSystem.open(path), true)[ CD ]
Line_27 $$ if (status.isFile()) -->Line_32 $$ assertArrayEquals(actualContentSimple, actualContentFully)[ CD ]
Line_4 $$ final Path sub1 = new Path(inputPath, "sub 1")-->Line_9 $$ fileList.add(createFile(inputPath, fs, sub1.getName(), "y"))[ FD ]
Line_2 $$ public void testReadFileContent() throws Exception -->Line_8 $$ fileList.add(createFile(inputPath, fs, sub1.getName(), "x"))[ CD ]
Line_2 $$ public void testReadFileContent() throws Exception -->Line_13 $$ fileList.add(createFile(inputPath, fs, sub2.getName(), "z"))[ CD ]
Line_2 $$ public void testReadFileContent() throws Exception -->Line_16 $$ fileList.add(createFile(inputPath, fs, new byte[0], sub2.getName(), "zero-length"))[ CD ]
Line_27 $$ if (status.isFile()) -->Line_35 $$ final byte[] actualContentRead4 = readAllWithRead4(harFileSystem.open(path), true)[ CD ]
Line_41 $$ if ("zero-length".equals(baseName)) -->Line_45 $$ assertEquals(baseName, actual)[ CD ]
Line_33 $$ final byte[] actualContentSeek = readAllWithSeek(actualContentSimple.length, harFileSystem.open(path), true)-->Line_34 $$ assertArrayEquals(actualContentSimple, actualContentSeek)[ FD ]
Line_27 $$ if (status.isFile()) -->Line_28 $$ final byte[] actualContentSimple = readAllSimple(harFileSystem.open(path), true)[ CD ]
Line_2 $$ public void testReadFileContent() throws Exception -->Line_15 $$ fileList.add(createFile(inputPath, fs, binContent, sub2.getName(), "bin"))[ CD ]
Line_2 $$ public void testReadFileContent() throws Exception -->Line_11 $$ final Path sub2 = new Path(inputPath, "sub 1 with suffix")[ CD ]
Line_2 $$ public void testReadFileContent() throws Exception -->Line_18 $$ final HarFileSystem harFileSystem = new HarFileSystem(fs)[ CD ]
Line_25 $$ final String baseName = path.getName()-->Line_41 $$ if ("zero-length".equals(baseName)) [ FD ]
Line_11 $$ final Path sub2 = new Path(inputPath, "sub 1 with suffix")-->Line_15 $$ fileList.add(createFile(inputPath, fs, binContent, sub2.getName(), "bin"))[ FD ]
Line_11 $$ final Path sub2 = new Path(inputPath, "sub 1 with suffix")-->Line_16 $$ fileList.add(createFile(inputPath, fs, new byte[0], sub2.getName(), "zero-length"))[ FD ]
Line_20 $$ final URI harUri = new URI(fullHarPathStr)-->Line_21 $$ harFileSystem.initialize(harUri, fs.getConf())[ FD ]
Line_27 $$ if (status.isFile()) -->Line_36 $$ assertArrayEquals(actualContentSimple, actualContentRead4)[ CD ]
Line_24 $$ final Path path = new Path(fullHarPathStr + Path.SEPARATOR + pathStr0)-->Line_28 $$ final byte[] actualContentSimple = readAllSimple(harFileSystem.open(path), true)[ FD ]
Line_27 $$ if (status.isFile()) -->Line_39 $$ if ("bin".equals(baseName)) [ CD ]
Line_11 $$ final Path sub2 = new Path(inputPath, "sub 1 with suffix")-->Line_13 $$ fileList.add(createFile(inputPath, fs, sub2.getName(), "z"))[ FD ]
Line_28 $$ final byte[] actualContentSimple = readAllSimple(harFileSystem.open(path), true)-->Line_34 $$ assertArrayEquals(actualContentSimple, actualContentSeek)[ FD ]
Line_18 $$ final HarFileSystem harFileSystem = new HarFileSystem(fs)-->Line_35 $$ final byte[] actualContentRead4 = readAllWithRead4(harFileSystem.open(path), true)[ FD ]
