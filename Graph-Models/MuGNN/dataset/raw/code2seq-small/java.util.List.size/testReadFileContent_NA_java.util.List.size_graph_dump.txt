Line_31 $$ if (status.isFile()) -->Line_34 $$ final byte[] actualContentBuffer = readAllWithBuffer(harFileSystem.open(path), true)[ CD ]
Line_49 $$ String actual = new String(actualContentSimple, "UTF-8")-->Line_50 $$ assertEquals(baseName, actual)[ FD ]
Line_5 $$ final Path sub1 = new Path(inputPath, "sub 1")-->Line_6 $$ fs.mkdirs(sub1)[ FD ]
Line_29 $$ final String baseName = path.getName()-->Line_44 $$ if ("bin".equals(baseName)) [ FD ]
Line_28 $$ final Path path = new Path(fullHarPathStr + Path.SEPARATOR + pathStr0)-->Line_29 $$ final String baseName = path.getName()[ FD ]
Line_12 $$ final Path sub2 = new Path(inputPath, "sub 1 with suffix")-->Line_13 $$ fs.mkdirs(sub2)[ FD ]
Line_36 $$ final byte[] actualContentFully = readAllWithReadFully(actualContentSimple.length, harFileSystem.open(path), true)-->Line_37 $$ assertArrayEquals(actualContentSimple, actualContentFully)[ FD ]
Line_31 $$ if (status.isFile()) -->Line_38 $$ final byte[] actualContentSeek = readAllWithSeek(actualContentSimple.length, harFileSystem.open(path), true)[ CD ]
Line_34 $$ final byte[] actualContentBuffer = readAllWithBuffer(harFileSystem.open(path), true)-->Line_35 $$ assertArrayEquals(actualContentSimple, actualContentBuffer)[ FD ]
Line_31 $$ if (status.isFile()) -->Line_37 $$ assertArrayEquals(actualContentSimple, actualContentFully)[ CD ]
Line_28 $$ final Path path = new Path(fullHarPathStr + Path.SEPARATOR + pathStr0)-->Line_38 $$ final byte[] actualContentSeek = readAllWithSeek(actualContentSimple.length, harFileSystem.open(path), true)[ FD ]
Line_31 $$ if (status.isFile()) -->Line_43 $$ assertArrayEquals(actualContentSimple, actualContentSkip)[ CD ]
Line_46 $$ if ("zero-length".equals(baseName)) -->Line_49 $$ String actual = new String(actualContentSimple, "UTF-8")[ CD ]
Line_5 $$ final Path sub1 = new Path(inputPath, "sub 1")-->Line_7 $$ fileList.add(createFile(inputPath, fs, sub1.getName(), "file x y z"))[ FD ]
Line_28 $$ final Path path = new Path(fullHarPathStr + Path.SEPARATOR + pathStr0)-->Line_42 $$ final byte[] actualContentSkip = readAllWithSkip(actualContentSimple.length, harFileSystem.open(path), harFileSystem.open(path), true)[ FD ]
Line_29 $$ final String baseName = path.getName()-->Line_50 $$ assertEquals(baseName, actual)[ FD ]
Line_38 $$ final byte[] actualContentSeek = readAllWithSeek(actualContentSimple.length, harFileSystem.open(path), true)-->Line_39 $$ assertArrayEquals(actualContentSimple, actualContentSeek)[ FD ]
Line_31 $$ if (status.isFile()) -->Line_41 $$ assertArrayEquals(actualContentSimple, actualContentRead4)[ CD ]
Line_44 $$ if ("bin".equals(baseName)) -->Line_45 $$ assertArrayEquals(binContent, actualContentSimple)[ CD ]
Line_31 $$ if (status.isFile()) -->Line_39 $$ assertArrayEquals(actualContentSimple, actualContentSeek)[ CD ]
Line_46 $$ if ("zero-length".equals(baseName)) -->Line_47 $$ assertEquals(0, actualContentSimple.length)[ CD ]
Line_30 $$ final FileStatus status = harFileSystem.getFileStatus(path)-->Line_31 $$ if (status.isFile()) [ FD ]
Line_31 $$ if (status.isFile()) -->Line_52 $$ readFileCount++[ CD ]
Line_31 $$ if (status.isFile()) -->Line_36 $$ final byte[] actualContentFully = readAllWithReadFully(actualContentSimple.length, harFileSystem.open(path), true)[ CD ]
Line_40 $$ final byte[] actualContentRead4 = readAllWithRead4(harFileSystem.open(path), true)-->Line_41 $$ assertArrayEquals(actualContentSimple, actualContentRead4)[ FD ]
Line_31 $$ if (status.isFile()) -->Line_40 $$ final byte[] actualContentRead4 = readAllWithRead4(harFileSystem.open(path), true)[ CD ]
Line_12 $$ final Path sub2 = new Path(inputPath, "sub 1 with suffix")-->Line_14 $$ fileList.add(createFile(inputPath, fs, sub2.getName(), "z"))[ FD ]
Line_28 $$ final Path path = new Path(fullHarPathStr + Path.SEPARATOR + pathStr0)-->Line_34 $$ final byte[] actualContentBuffer = readAllWithBuffer(harFileSystem.open(path), true)[ FD ]
Line_31 $$ if (status.isFile()) -->Line_35 $$ assertArrayEquals(actualContentSimple, actualContentBuffer)[ CD ]
Line_28 $$ final Path path = new Path(fullHarPathStr + Path.SEPARATOR + pathStr0)-->Line_40 $$ final byte[] actualContentRead4 = readAllWithRead4(harFileSystem.open(path), true)[ FD ]
Line_28 $$ final Path path = new Path(fullHarPathStr + Path.SEPARATOR + pathStr0)-->Line_30 $$ final FileStatus status = harFileSystem.getFileStatus(path)[ FD ]
Line_5 $$ final Path sub1 = new Path(inputPath, "sub 1")-->Line_10 $$ fileList.add(createFile(inputPath, fs, sub1.getName(), "y"))[ FD ]
Line_5 $$ final Path sub1 = new Path(inputPath, "sub 1")-->Line_11 $$ fileList.add(createFile(inputPath, fs, sub1.getName(), "z"))[ FD ]
Line_31 $$ if (status.isFile()) -->Line_42 $$ final byte[] actualContentSkip = readAllWithSkip(actualContentSimple.length, harFileSystem.open(path), harFileSystem.open(path), true)[ CD ]
Line_5 $$ final Path sub1 = new Path(inputPath, "sub 1")-->Line_9 $$ fileList.add(createFile(inputPath, fs, sub1.getName(), "x"))[ FD ]
Line_29 $$ final String baseName = path.getName()-->Line_46 $$ if ("zero-length".equals(baseName)) [ FD ]
Line_31 $$ if (status.isFile()) -->Line_44 $$ if ("bin".equals(baseName)) [ CD ]
Line_44 $$ if ("bin".equals(baseName)) -->Line_46 $$ if ("zero-length".equals(baseName)) [ CD ]
Line_42 $$ final byte[] actualContentSkip = readAllWithSkip(actualContentSimple.length, harFileSystem.open(path), harFileSystem.open(path), true)-->Line_43 $$ assertArrayEquals(actualContentSimple, actualContentSkip)[ FD ]
Line_28 $$ final Path path = new Path(fullHarPathStr + Path.SEPARATOR + pathStr0)-->Line_36 $$ final byte[] actualContentFully = readAllWithReadFully(actualContentSimple.length, harFileSystem.open(path), true)[ FD ]
Line_5 $$ final Path sub1 = new Path(inputPath, "sub 1")-->Line_8 $$ fileList.add(createFile(inputPath, fs, sub1.getName(), "file"))[ FD ]
Line_12 $$ final Path sub2 = new Path(inputPath, "sub 1 with suffix")-->Line_18 $$ fileList.add(createFile(inputPath, fs, new byte[0], sub2.getName(), "zero-length"))[ FD ]
Line_46 $$ if ("zero-length".equals(baseName)) -->Line_50 $$ assertEquals(baseName, actual)[ CD ]
Line_23 $$ final URI harUri = new URI(fullHarPathStr)-->Line_24 $$ harFileSystem.initialize(harUri, fs.getConf())[ FD ]
Line_12 $$ final Path sub2 = new Path(inputPath, "sub 1 with suffix")-->Line_17 $$ fileList.add(createFile(inputPath, fs, binContent, sub2.getName(), "bin"))[ FD ]
