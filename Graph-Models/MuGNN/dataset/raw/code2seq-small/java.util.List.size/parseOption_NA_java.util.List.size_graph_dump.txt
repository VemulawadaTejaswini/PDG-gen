Line_9 $$ while (args.hasMoreTokens()) -->Line_14 $$ if (arg.equals("-r")) [ CD ]
Line_21 $$ if (arg.startsWith("-k")) -->Line_22 $$ KeyDescription k = parseKey(arg, args)[ CD ]
Line_2 $$ public void parseOption(String option) -->Line_8 $$ KeyDescription global = new KeyDescription()[ CD ]
Line_2 $$ public void parseOption(String option) -->Line_3 $$ if (option == null || option.equals("")) [ FD ]
Line_7 $$ StringTokenizer args = new StringTokenizer(option)-->Line_22 $$ KeyDescription k = parseKey(arg, args)[ FD ]
Line_8 $$ KeyDescription global = new KeyDescription()-->Line_36 $$ allKeySpecs.add(global)[ FD ]
Line_14 $$ if (arg.equals("-r")) -->Line_15 $$ global.reverse = true[ CD ]
Line_21 $$ if (arg.startsWith("-k")) -->Line_23 $$ if (k != null) [ CD ]
Line_10 $$ String arg = args.nextToken()-->Line_17 $$ if (arg.equals("-nr")) [ FD ]
Line_22 $$ KeyDescription k = parseKey(arg, args)-->Line_23 $$ if (k != null) [ FD ]
Line_10 $$ String arg = args.nextToken()-->Line_14 $$ if (arg.equals("-r")) [ FD ]
Line_2 $$ public void parseOption(String option) -->Line_7 $$ StringTokenizer args = new StringTokenizer(option)[ CD ]
Line_9 $$ while (args.hasMoreTokens()) -->Line_17 $$ if (arg.equals("-nr")) [ CD ]
Line_30 $$ if (!(key.reverse | key.numeric)) -->Line_32 $$ key.numeric = global.numeric[ CD ]
Line_2 $$ public void parseOption(String option) -->Line_35 $$ if (allKeySpecs.size() == 0) [ CD ]
Line_17 $$ if (arg.equals("-nr")) -->Line_19 $$ global.reverse = true[ CD ]
Line_2 $$ public void parseOption(String option) -->Line_3 $$ if (option == null || option.equals("")) [ CD ]
Line_7 $$ StringTokenizer args = new StringTokenizer(option)-->Line_10 $$ String arg = args.nextToken()[ FD ]
Line_22 $$ KeyDescription k = parseKey(arg, args)-->Line_24 $$ allKeySpecs.add(k)[ FD ]
Line_23 $$ if (k != null) -->Line_24 $$ allKeySpecs.add(k)[ CD ]
Line_11 $$ if (arg.equals("-n")) -->Line_12 $$ global.numeric = true[ CD ]
Line_17 $$ if (arg.equals("-nr")) -->Line_18 $$ global.numeric = true[ CD ]
Line_10 $$ String arg = args.nextToken()-->Line_11 $$ if (arg.equals("-n")) [ FD ]
Line_9 $$ while (args.hasMoreTokens()) -->Line_21 $$ if (arg.startsWith("-k")) [ CD ]
Line_7 $$ StringTokenizer args = new StringTokenizer(option)-->Line_9 $$ while (args.hasMoreTokens()) [ FD ]
Line_10 $$ String arg = args.nextToken()-->Line_21 $$ if (arg.startsWith("-k")) [ FD ]
Line_30 $$ if (!(key.reverse | key.numeric)) -->Line_31 $$ key.reverse = global.reverse[ CD ]
Line_2 $$ public void parseOption(String option) -->Line_9 $$ while (args.hasMoreTokens()) [ CD ]
Line_35 $$ if (allKeySpecs.size() == 0) -->Line_36 $$ allKeySpecs.add(global)[ CD ]
Line_10 $$ String arg = args.nextToken()-->Line_22 $$ KeyDescription k = parseKey(arg, args)[ FD ]
Line_9 $$ while (args.hasMoreTokens()) -->Line_11 $$ if (arg.equals("-n")) [ CD ]
Line_9 $$ while (args.hasMoreTokens()) -->Line_10 $$ String arg = args.nextToken()[ CD ]
