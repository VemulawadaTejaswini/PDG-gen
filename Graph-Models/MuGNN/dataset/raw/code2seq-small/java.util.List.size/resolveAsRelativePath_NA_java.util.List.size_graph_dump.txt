Line_16 $$ if (targetPath.isEmpty()) -->Line_17 $$ return "."[ CD ]
Line_5 $$ List<String> targetPath = new ArrayList<String>(Arrays.asList(StringUtils.split(targetFile.getAbsolutePath(), "/" + File.separator)))-->Line_8 $$ while (prefixLen < maxDepth && basePath.get(prefixLen).equals(targetPath.get(prefixLen))) [ FD ]
Line_5 $$ List<String> targetPath = new ArrayList<String>(Arrays.asList(StringUtils.split(targetFile.getAbsolutePath(), "/" + File.separator)))-->Line_16 $$ if (targetPath.isEmpty()) [ FD ]
Line_3 $$ List<String> basePath = Arrays.asList(StringUtils.split(baseDir.getAbsolutePath(), "/" + File.separator))-->Line_6 $$ int maxDepth = Math.min(basePath.size(), targetPath.size())[ FD ]
Line_2 $$ public String resolveAsRelativePath(Object path) -->Line_4 $$ File targetFile = resolve(path)[ CD ]
Line_2 $$ public String resolveAsRelativePath(Object path) -->Line_16 $$ if (targetPath.isEmpty()) [ CD ]
Line_8 $$ while (prefixLen < maxDepth && basePath.get(prefixLen).equals(targetPath.get(prefixLen))) -->Line_9 $$ prefixLen++[ CD ]
Line_3 $$ List<String> basePath = Arrays.asList(StringUtils.split(baseDir.getAbsolutePath(), "/" + File.separator))-->Line_8 $$ while (prefixLen < maxDepth && basePath.get(prefixLen).equals(targetPath.get(prefixLen))) [ FD ]
Line_13 $$ for (int i = 0; i < basePath.size(); i++) -->Line_14 $$ targetPath.add(0, "..")[ CD ]
Line_2 $$ public String resolveAsRelativePath(Object path) -->Line_19 $$ return CollectionUtils.join(File.separator, targetPath)[ CD ]
Line_2 $$ public String resolveAsRelativePath(Object path) -->Line_8 $$ while (prefixLen < maxDepth && basePath.get(prefixLen).equals(targetPath.get(prefixLen))) [ CD ]
Line_2 $$ public String resolveAsRelativePath(Object path) -->Line_12 $$ targetPath = targetPath.subList(prefixLen, targetPath.size())[ CD ]
Line_3 $$ List<String> basePath = Arrays.asList(StringUtils.split(baseDir.getAbsolutePath(), "/" + File.separator))-->Line_13 $$ for (int i = 0; i < basePath.size(); i++) [ FD ]
Line_5 $$ List<String> targetPath = new ArrayList<String>(Arrays.asList(StringUtils.split(targetFile.getAbsolutePath(), "/" + File.separator)))-->Line_12 $$ targetPath = targetPath.subList(prefixLen, targetPath.size())[ FD ]
Line_2 $$ public String resolveAsRelativePath(Object path) -->Line_13 $$ for (int i = 0; i < basePath.size(); i++) [ CD ]
Line_3 $$ List<String> basePath = Arrays.asList(StringUtils.split(baseDir.getAbsolutePath(), "/" + File.separator))-->Line_11 $$ basePath = basePath.subList(prefixLen, basePath.size())[ FD ]
Line_2 $$ public String resolveAsRelativePath(Object path) -->Line_11 $$ basePath = basePath.subList(prefixLen, basePath.size())[ CD ]
Line_7 $$ int prefixLen = 0-->Line_11 $$ basePath = basePath.subList(prefixLen, basePath.size())[ FD ]
Line_7 $$ int prefixLen = 0-->Line_12 $$ targetPath = targetPath.subList(prefixLen, targetPath.size())[ FD ]
Line_5 $$ List<String> targetPath = new ArrayList<String>(Arrays.asList(StringUtils.split(targetFile.getAbsolutePath(), "/" + File.separator)))-->Line_14 $$ targetPath.add(0, "..")[ FD ]
Line_12 $$ targetPath = targetPath.subList(prefixLen, targetPath.size())-->Line_16 $$ if (targetPath.isEmpty()) [ FD ]
Line_7 $$ int prefixLen = 0-->Line_8 $$ while (prefixLen < maxDepth && basePath.get(prefixLen).equals(targetPath.get(prefixLen))) [ FD ]
Line_5 $$ List<String> targetPath = new ArrayList<String>(Arrays.asList(StringUtils.split(targetFile.getAbsolutePath(), "/" + File.separator)))-->Line_6 $$ int maxDepth = Math.min(basePath.size(), targetPath.size())[ FD ]
Line_2 $$ public String resolveAsRelativePath(Object path) -->Line_7 $$ int prefixLen = 0[ CD ]
Line_11 $$ basePath = basePath.subList(prefixLen, basePath.size())-->Line_13 $$ for (int i = 0; i < basePath.size(); i++) [ FD ]
Line_12 $$ targetPath = targetPath.subList(prefixLen, targetPath.size())-->Line_19 $$ return CollectionUtils.join(File.separator, targetPath)[ FD ]
Line_7 $$ int prefixLen = 0-->Line_9 $$ prefixLen++[ FD ]
Line_2 $$ public String resolveAsRelativePath(Object path) -->Line_6 $$ int maxDepth = Math.min(basePath.size(), targetPath.size())[ CD ]
Line_2 $$ public String resolveAsRelativePath(Object path) -->Line_3 $$ List<String> basePath = Arrays.asList(StringUtils.split(baseDir.getAbsolutePath(), "/" + File.separator))[ CD ]
Line_4 $$ File targetFile = resolve(path)-->Line_5 $$ List<String> targetPath = new ArrayList<String>(Arrays.asList(StringUtils.split(targetFile.getAbsolutePath(), "/" + File.separator)))[ FD ]
Line_2 $$ public String resolveAsRelativePath(Object path) -->Line_4 $$ File targetFile = resolve(path)[ FD ]
Line_5 $$ List<String> targetPath = new ArrayList<String>(Arrays.asList(StringUtils.split(targetFile.getAbsolutePath(), "/" + File.separator)))-->Line_19 $$ return CollectionUtils.join(File.separator, targetPath)[ FD ]
Line_2 $$ public String resolveAsRelativePath(Object path) -->Line_5 $$ List<String> targetPath = new ArrayList<String>(Arrays.asList(StringUtils.split(targetFile.getAbsolutePath(), "/" + File.separator)))[ CD ]
Line_12 $$ targetPath = targetPath.subList(prefixLen, targetPath.size())-->Line_14 $$ targetPath.add(0, "..")[ FD ]
