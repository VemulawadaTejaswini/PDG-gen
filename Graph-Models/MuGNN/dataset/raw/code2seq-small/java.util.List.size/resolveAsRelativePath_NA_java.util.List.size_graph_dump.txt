Line_3 $$ List<String> basePath = Arrays.asList(StringUtils.split(baseDir.getAbsolutePath(), "/" + File.separator))-->Line_14 $$ for (int i = 0; i < basePath.size(); i++) [ FD ]
Line_3 $$ List<String> basePath = Arrays.asList(StringUtils.split(baseDir.getAbsolutePath(), "/" + File.separator))-->Line_12 $$ basePath = basePath.subList(prefixLen, basePath.size())[ FD ]
Line_2 $$ public String resolveAsRelativePath(Object path) -->Line_4 $$ File targetFile = resolve(path)[ CD ]
Line_2 $$ public String resolveAsRelativePath(Object path) -->Line_5 $$ List<String> targetPath = new ArrayList<String>(Arrays.asList(StringUtils.split(targetFile.getAbsolutePath(), "/" + File.separator)))[ CD ]
Line_8 $$ int prefixLen = 0-->Line_13 $$ targetPath = targetPath.subList(prefixLen, targetPath.size())[ FD ]
Line_8 $$ int prefixLen = 0-->Line_9 $$ while (prefixLen < maxDepth && basePath.get(prefixLen).equals(targetPath.get(prefixLen))) [ FD ]
Line_2 $$ public String resolveAsRelativePath(Object path) -->Line_20 $$ return CollectionUtils.join(File.separator, targetPath)[ CD ]
Line_5 $$ List<String> targetPath = new ArrayList<String>(Arrays.asList(StringUtils.split(targetFile.getAbsolutePath(), "/" + File.separator)))-->Line_20 $$ return CollectionUtils.join(File.separator, targetPath)[ FD ]
Line_13 $$ targetPath = targetPath.subList(prefixLen, targetPath.size())-->Line_20 $$ return CollectionUtils.join(File.separator, targetPath)[ FD ]
Line_8 $$ int prefixLen = 0-->Line_12 $$ basePath = basePath.subList(prefixLen, basePath.size())[ FD ]
Line_3 $$ List<String> basePath = Arrays.asList(StringUtils.split(baseDir.getAbsolutePath(), "/" + File.separator))-->Line_9 $$ while (prefixLen < maxDepth && basePath.get(prefixLen).equals(targetPath.get(prefixLen))) [ FD ]
Line_9 $$ while (prefixLen < maxDepth && basePath.get(prefixLen).equals(targetPath.get(prefixLen))) -->Line_10 $$ prefixLen++[ CD ]
Line_4 $$ File targetFile = resolve(path)-->Line_5 $$ List<String> targetPath = new ArrayList<String>(Arrays.asList(StringUtils.split(targetFile.getAbsolutePath(), "/" + File.separator)))[ FD ]
Line_5 $$ List<String> targetPath = new ArrayList<String>(Arrays.asList(StringUtils.split(targetFile.getAbsolutePath(), "/" + File.separator)))-->Line_9 $$ while (prefixLen < maxDepth && basePath.get(prefixLen).equals(targetPath.get(prefixLen))) [ FD ]
Line_13 $$ targetPath = targetPath.subList(prefixLen, targetPath.size())-->Line_17 $$ if (targetPath.isEmpty()) [ FD ]
Line_2 $$ public String resolveAsRelativePath(Object path) -->Line_13 $$ targetPath = targetPath.subList(prefixLen, targetPath.size())[ CD ]
Line_2 $$ public String resolveAsRelativePath(Object path) -->Line_3 $$ List<String> basePath = Arrays.asList(StringUtils.split(baseDir.getAbsolutePath(), "/" + File.separator))[ CD ]
Line_14 $$ for (int i = 0; i < basePath.size(); i++) -->Line_15 $$ targetPath.add(0, "..")[ CD ]
Line_8 $$ int prefixLen = 0-->Line_10 $$ prefixLen++[ FD ]
Line_2 $$ public String resolveAsRelativePath(Object path) -->Line_9 $$ while (prefixLen < maxDepth && basePath.get(prefixLen).equals(targetPath.get(prefixLen))) [ CD ]
Line_5 $$ List<String> targetPath = new ArrayList<String>(Arrays.asList(StringUtils.split(targetFile.getAbsolutePath(), "/" + File.separator)))-->Line_13 $$ targetPath = targetPath.subList(prefixLen, targetPath.size())[ FD ]
Line_5 $$ List<String> targetPath = new ArrayList<String>(Arrays.asList(StringUtils.split(targetFile.getAbsolutePath(), "/" + File.separator)))-->Line_17 $$ if (targetPath.isEmpty()) [ FD ]
Line_2 $$ public String resolveAsRelativePath(Object path) -->Line_4 $$ File targetFile = resolve(path)[ FD ]
Line_2 $$ public String resolveAsRelativePath(Object path) -->Line_8 $$ int prefixLen = 0[ CD ]
Line_17 $$ if (targetPath.isEmpty()) -->Line_18 $$ return "."[ CD ]
Line_2 $$ public String resolveAsRelativePath(Object path) -->Line_12 $$ basePath = basePath.subList(prefixLen, basePath.size())[ CD ]
Line_2 $$ public String resolveAsRelativePath(Object path) -->Line_14 $$ for (int i = 0; i < basePath.size(); i++) [ CD ]
Line_2 $$ public String resolveAsRelativePath(Object path) -->Line_17 $$ if (targetPath.isEmpty()) [ CD ]
Line_12 $$ basePath = basePath.subList(prefixLen, basePath.size())-->Line_14 $$ for (int i = 0; i < basePath.size(); i++) [ FD ]
Line_5 $$ List<String> targetPath = new ArrayList<String>(Arrays.asList(StringUtils.split(targetFile.getAbsolutePath(), "/" + File.separator)))-->Line_15 $$ targetPath.add(0, "..")[ FD ]
Line_13 $$ targetPath = targetPath.subList(prefixLen, targetPath.size())-->Line_15 $$ targetPath.add(0, "..")[ FD ]
