Line_12 $$ final PyDecoratorList problemDecoratorList = problemFunction.getDecoratorList()-->Line_16 $$ final PyDecorator[] decorators = problemDecoratorList.getDecorators()[ FD ]
Line_13 $$ List<String> decoTexts = new ArrayList<String>()-->Line_22 $$ final PyDecoratorList decoratorList = generator.createDecoratorList(decoTexts.toArray(new String[decoTexts.size()]))[ FD ]
Line_4 $$ final PyFunction problemFunction = PsiTreeUtil.getParentOfType(element, PyFunction.class)-->Line_26 $$ problemFunction.addBefore(decoratorList, problemFunction.getFirstChild())[ FD ]
Line_4 $$ final PyFunction problemFunction = PsiTreeUtil.getParentOfType(element, PyFunction.class)-->Line_7 $$ final List<UsageInfo> usages = PyRefactoringUtil.findUsages(problemFunction, false)[ FD ]
Line_4 $$ final PyFunction problemFunction = PsiTreeUtil.getParentOfType(element, PyFunction.class)-->Line_5 $$ if (problemFunction == null)[ FD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_13 $$ List<String> decoTexts = new ArrayList<String>()[ CD ]
Line_22 $$ final PyDecoratorList decoratorList = generator.createDecoratorList(decoTexts.toArray(new String[decoTexts.size()]))-->Line_26 $$ problemFunction.addBefore(decoratorList, problemFunction.getFirstChild())[ FD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_8 $$ final PyParameter[] parameters = problemFunction.getParameterList().getParameters()[ CD ]
Line_17 $$ for (PyDecorator deco : decorators) -->Line_18 $$ decoTexts.add(deco.getText())[ FD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_22 $$ final PyDecoratorList decoratorList = generator.createDecoratorList(decoTexts.toArray(new String[decoTexts.size()]))[ CD ]
Line_15 $$ if (problemDecoratorList != null) -->Line_16 $$ final PyDecorator[] decorators = problemDecoratorList.getDecorators()[ CD ]
Line_29 $$ final PsiElement usageElement = usage.getElement()-->Line_30 $$ if (usageElement instanceof PyReferenceExpression) [ FD ]
Line_21 $$ PyElementGenerator generator = PyElementGenerator.getInstance(project)-->Line_22 $$ final PyDecoratorList decoratorList = generator.createDecoratorList(decoTexts.toArray(new String[decoTexts.size()]))[ FD ]
Line_12 $$ final PyDecoratorList problemDecoratorList = problemFunction.getDecoratorList()-->Line_24 $$ problemDecoratorList.replace(decoratorList)[ FD ]
Line_5 $$ if (problemFunction == null)-->Line_6 $$ return[ CD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_7 $$ final List<UsageInfo> usages = PyRefactoringUtil.findUsages(problemFunction, false)[ CD ]
Line_13 $$ List<String> decoTexts = new ArrayList<String>()-->Line_14 $$ decoTexts.add("@staticmethod")[ FD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_3 $$ final PsiElement element = descriptor.getPsiElement()[ CD ]
Line_30 $$ if (usageElement instanceof PyReferenceExpression) -->Line_31 $$ updateUsage((PyReferenceExpression) usageElement)[ CD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_9 $$ if (parameters.length > 0) [ CD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_5 $$ if (problemFunction == null)[ CD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_21 $$ PyElementGenerator generator = PyElementGenerator.getInstance(project)[ FD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_4 $$ final PyFunction problemFunction = PsiTreeUtil.getParentOfType(element, PyFunction.class)[ CD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_3 $$ final PsiElement element = descriptor.getPsiElement()[ FD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_15 $$ if (problemDecoratorList != null) [ CD ]
Line_12 $$ final PyDecoratorList problemDecoratorList = problemFunction.getDecoratorList()-->Line_15 $$ if (problemDecoratorList != null) [ FD ]
Line_12 $$ final PyDecoratorList problemDecoratorList = problemFunction.getDecoratorList()-->Line_23 $$ if (problemDecoratorList != null) [ FD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_21 $$ PyElementGenerator generator = PyElementGenerator.getInstance(project)[ CD ]
Line_23 $$ if (problemDecoratorList != null) -->Line_26 $$ problemFunction.addBefore(decoratorList, problemFunction.getFirstChild())[ CD ]
Line_28 $$ for (UsageInfo usage : usages) -->Line_29 $$ final PsiElement usageElement = usage.getElement()[ FD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_23 $$ if (problemDecoratorList != null) [ CD ]
Line_23 $$ if (problemDecoratorList != null) -->Line_24 $$ problemDecoratorList.replace(decoratorList)[ CD ]
Line_3 $$ final PsiElement element = descriptor.getPsiElement()-->Line_4 $$ final PyFunction problemFunction = PsiTreeUtil.getParentOfType(element, PyFunction.class)[ FD ]
Line_9 $$ if (parameters.length > 0) -->Line_10 $$ parameters[0].delete()[ CD ]
Line_4 $$ final PyFunction problemFunction = PsiTreeUtil.getParentOfType(element, PyFunction.class)-->Line_12 $$ final PyDecoratorList problemDecoratorList = problemFunction.getDecoratorList()[ FD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_12 $$ final PyDecoratorList problemDecoratorList = problemFunction.getDecoratorList()[ CD ]
Line_4 $$ final PyFunction problemFunction = PsiTreeUtil.getParentOfType(element, PyFunction.class)-->Line_8 $$ final PyParameter[] parameters = problemFunction.getParameterList().getParameters()[ FD ]
Line_13 $$ List<String> decoTexts = new ArrayList<String>()-->Line_18 $$ decoTexts.add(deco.getText())[ FD ]
Line_22 $$ final PyDecoratorList decoratorList = generator.createDecoratorList(decoTexts.toArray(new String[decoTexts.size()]))-->Line_24 $$ problemDecoratorList.replace(decoratorList)[ FD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_14 $$ decoTexts.add("@staticmethod")[ CD ]
