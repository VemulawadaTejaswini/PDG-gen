Line_34 $$ List<String> requestAttributeNames = ListUtil.fromEnumeration(requestAttributeNameEnumeration)-->Line_36 $$ Assert.assertTrue(requestAttributeNames.contains(RequestAttributes.ATTRIBUTE_1))[ FD ]
Line_46 $$ Layout layout = (Layout) mockHttpServletRequest.getAttribute(WebKeys.LAYOUT)-->Line_47 $$ Assert.assertEquals(typeSetting, layout.getTypeSettings())[ FD ]
Line_24 $$ Map<String, Serializable> deltaSessionAttributes = new HashMap()-->Line_27 $$ spiAgentResponse.deltaSessionAttributes = deltaSessionAttributes[ FD ]
Line_31 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_32 $$ spiAgentResponse.populate(mockHttpServletRequest, new MockHttpServletResponse())[ FD ]
Line_51 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_87 $$ spiAgentResponse.populate(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_6 $$ Exception exception = new Exception()-->Line_7 $$ spiAgentResponse.setException(exception)[ FD ]
Line_24 $$ Map<String, Serializable> deltaSessionAttributes = new HashMap()-->Line_26 $$ deltaSessionAttributes.put(_SESSION_ATTRIBUTE_2, _SESSION_ATTRIBUTE_2)[ FD ]
Line_31 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_78 $$ spiAgentResponse.populate(mockHttpServletRequest, httpServletResponse)[ FD ]
Line_34 $$ List<String> requestAttributeNames = ListUtil.fromEnumeration(requestAttributeNameEnumeration)-->Line_35 $$ Assert.assertEquals(2, requestAttributeNames.size())[ FD ]
Line_57 $$ HttpServletResponse httpServletResponse = new StubHttpServletResponse() -->Line_61 $$ return false[ CD ]
Line_28 $$ MetaInfoCacheServletResponse metaInfoCacheServletResponse = new MetaInfoCacheServletResponse(new MockHttpServletResponse())-->Line_29 $$ spiAgentResponse.metaData = metaInfoCacheServletResponse.getMetaData()[ FD ]
Line_31 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_33 $$ Enumeration<String> requestAttributeNameEnumeration = mockHttpServletRequest.getAttributeNames()[ FD ]
Line_6 $$ Exception exception = new Exception()-->Line_13 $$ Assert.assertSame(exception, pre.getCause())[ FD ]
Line_42 $$ String typeSetting = "typeSetting"-->Line_43 $$ distributedRequestAttributes.put(WebKeys.SPI_AGENT_LAYOUT_TYPE_SETTINGS, typeSetting)[ FD ]
Line_57 $$ HttpServletResponse httpServletResponse = new StubHttpServletResponse() -->Line_92 $$ spiAgentResponse.populate(mockHttpServletRequest, httpServletResponse)[ FD ]
Line_51 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_88 $$ CharBuffer charBuffer = bufferCacheServletResponse.getCharBuffer()[ FD ]
Line_31 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_92 $$ spiAgentResponse.populate(mockHttpServletRequest, httpServletResponse)[ FD ]
Line_53 $$ ByteBuffer byteBuffer = bufferCacheServletResponse.getByteBuffer()-->Line_54 $$ Assert.assertSame(outputData, byteBuffer.array())[ FD ]
Line_31 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_87 $$ spiAgentResponse.populate(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_31 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_39 $$ Assert.assertEquals(RequestAttributes.ATTRIBUTE_1, mockHttpServletRequest.getAttribute(RequestAttributes.ATTRIBUTE_1))[ FD ]
Line_31 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_44 $$ mockHttpServletRequest.setAttribute(WebKeys.LAYOUT, new LayoutImpl())[ FD ]
Line_31 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_45 $$ spiAgentResponse.populate(mockHttpServletRequest, new MockHttpServletResponse())[ FD ]
Line_42 $$ String typeSetting = "typeSetting"-->Line_47 $$ Assert.assertEquals(typeSetting, layout.getTypeSettings())[ FD ]
Line_51 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_52 $$ spiAgentResponse.populate(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_31 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_38 $$ Assert.assertEquals(RequestAttributes.ATTRIBUTE_1, mockHttpServletRequest.getAttribute(RequestAttributes.ATTRIBUTE_1))[ FD ]
Line_20 $$ Map<String, Serializable> distributedRequestAttributes = new HashMap()-->Line_22 $$ distributedRequestAttributes.put(RequestAttributes.ATTRIBUTE_3, RequestAttributes.ATTRIBUTE_3)[ FD ]
Line_57 $$ HttpServletResponse httpServletResponse = new StubHttpServletResponse() -->Line_78 $$ spiAgentResponse.populate(mockHttpServletRequest, httpServletResponse)[ FD ]
Line_24 $$ Map<String, Serializable> deltaSessionAttributes = new HashMap()-->Line_25 $$ deltaSessionAttributes.put(_SESSION_ATTRIBUTE_1, _SESSION_ATTRIBUTE_1)[ FD ]
Line_31 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_52 $$ spiAgentResponse.populate(mockHttpServletRequest, bufferCacheServletResponse)[ FD ]
Line_34 $$ List<String> requestAttributeNames = ListUtil.fromEnumeration(requestAttributeNameEnumeration)-->Line_37 $$ Assert.assertTrue(requestAttributeNames.contains(RequestAttributes.ATTRIBUTE_3))[ FD ]
Line_20 $$ Map<String, Serializable> distributedRequestAttributes = new HashMap()-->Line_23 $$ spiAgentResponse.distributedRequestAttributes = distributedRequestAttributes[ FD ]
Line_51 $$ BufferCacheServletResponse bufferCacheServletResponse = new BufferCacheServletResponse(new MockHttpServletResponse())-->Line_53 $$ ByteBuffer byteBuffer = bufferCacheServletResponse.getByteBuffer()[ FD ]
Line_31 $$ MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest()-->Line_46 $$ Layout layout = (Layout) mockHttpServletRequest.getAttribute(WebKeys.LAYOUT)[ FD ]
Line_20 $$ Map<String, Serializable> distributedRequestAttributes = new HashMap()-->Line_21 $$ distributedRequestAttributes.put(RequestAttributes.ATTRIBUTE_1, RequestAttributes.ATTRIBUTE_1)[ FD ]
Line_33 $$ Enumeration<String> requestAttributeNameEnumeration = mockHttpServletRequest.getAttributeNames()-->Line_34 $$ List<String> requestAttributeNames = ListUtil.fromEnumeration(requestAttributeNameEnumeration)[ FD ]
Line_20 $$ Map<String, Serializable> distributedRequestAttributes = new HashMap()-->Line_43 $$ distributedRequestAttributes.put(WebKeys.SPI_AGENT_LAYOUT_TYPE_SETTINGS, typeSetting)[ FD ]
