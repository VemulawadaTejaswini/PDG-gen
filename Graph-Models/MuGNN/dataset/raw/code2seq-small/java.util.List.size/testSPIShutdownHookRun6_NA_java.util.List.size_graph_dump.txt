Line_15 $$ LogRecord logRecord = logRecords.get(0)-->Line_18 $$ Assert.assertEquals("MPI shutdown request received", logRecord.getMessage())[ FD ]
Line_13 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_15 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_9 $$ Future<?> future = actionOnMPIWaiting(true)-->Line_20 $$ Assert.assertNull(future.get())[ FD ]
Line_15 $$ LogRecord logRecord = logRecords.get(0)-->Line_17 $$ logRecord = logRecords.get(1)[ FD ]
Line_17 $$ logRecord = logRecords.get(1)-->Line_18 $$ Assert.assertEquals("MPI shutdown request received", logRecord.getMessage())[ FD ]
Line_13 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_17 $$ logRecord = logRecords.get(1)[ FD ]
Line_15 $$ LogRecord logRecord = logRecords.get(0)-->Line_16 $$ Assert.assertEquals("Wait up to " + Long.MAX_VALUE + " ms for MPI shutdown request", logRecord.getMessage())[ FD ]
Line_13 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_14 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_10 $$ SPIShutdownHook spiShutdownHook = _mockRemoteSPI.new SPIShutdownHook()-->Line_12 $$ spiShutdownHook.run()[ FD ]
Line_11 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(RemoteSPI.class.getName(), Level.ALL)) -->Line_13 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
