Line_2 $$ public <T> boolean invokeConcurrentlyUnderProgress(@NotNull final List<T> things, ProgressIndicator progress, boolean runInReadAction, boolean failFastOnAcquireReadAction, @NotNull final Processor<? super T> thingProcessor) throws ProcessCanceledException -->Line_4 $$ Boolean result = processImmediatelyIfTooFew(things, wrapper, runInReadAction, thingProcessor)[ CD ]
Line_2 $$ public <T> boolean invokeConcurrentlyUnderProgress(@NotNull final List<T> things, ProgressIndicator progress, boolean runInReadAction, boolean failFastOnAcquireReadAction, @NotNull final Processor<? super T> thingProcessor) throws ProcessCanceledException -->Line_4 $$ Boolean result = processImmediatelyIfTooFew(things, wrapper, runInReadAction, thingProcessor)[ FD ]
Line_4 $$ Boolean result = processImmediatelyIfTooFew(things, wrapper, runInReadAction, thingProcessor)-->Line_5 $$ if (result != null)[ FD ]
Line_4 $$ Boolean result = processImmediatelyIfTooFew(things, wrapper, runInReadAction, thingProcessor)-->Line_6 $$ return result.booleanValue()[ FD ]
Line_3 $$ final ProgressIndicator wrapper = progress == null ? new AbstractProgressIndicatorBase() : new SensitiveProgressWrapper(progress)-->Line_4 $$ Boolean result = processImmediatelyIfTooFew(things, wrapper, runInReadAction, thingProcessor)[ FD ]
Line_7 $$ ApplierCompleter<T> applier = new ApplierCompleter<T>(null, runInReadAction, wrapper, things, thingProcessor, 0, things.size(), null)-->Line_23 $$ assert applier.isDone()[ FD ]
Line_5 $$ if (result != null)-->Line_6 $$ return result.booleanValue()[ CD ]
Line_2 $$ public <T> boolean invokeConcurrentlyUnderProgress(@NotNull final List<T> things, ProgressIndicator progress, boolean runInReadAction, boolean failFastOnAcquireReadAction, @NotNull final Processor<? super T> thingProcessor) throws ProcessCanceledException -->Line_3 $$ final ProgressIndicator wrapper = progress == null ? new AbstractProgressIndicatorBase() : new SensitiveProgressWrapper(progress)[ CD ]
Line_7 $$ ApplierCompleter<T> applier = new ApplierCompleter<T>(null, runInReadAction, wrapper, things, thingProcessor, 0, things.size(), null)-->Line_24 $$ return applier.completeTaskWhichFailToAcquireReadAction()[ FD ]
Line_2 $$ public <T> boolean invokeConcurrentlyUnderProgress(@NotNull final List<T> things, ProgressIndicator progress, boolean runInReadAction, boolean failFastOnAcquireReadAction, @NotNull final Processor<? super T> thingProcessor) throws ProcessCanceledException -->Line_24 $$ return applier.completeTaskWhichFailToAcquireReadAction()[ CD ]
Line_2 $$ public <T> boolean invokeConcurrentlyUnderProgress(@NotNull final List<T> things, ProgressIndicator progress, boolean runInReadAction, boolean failFastOnAcquireReadAction, @NotNull final Processor<? super T> thingProcessor) throws ProcessCanceledException -->Line_5 $$ if (result != null)[ CD ]
Line_7 $$ ApplierCompleter<T> applier = new ApplierCompleter<T>(null, runInReadAction, wrapper, things, thingProcessor, 0, things.size(), null)-->Line_9 $$ pool.invoke(applier)[ FD ]
Line_2 $$ public <T> boolean invokeConcurrentlyUnderProgress(@NotNull final List<T> things, ProgressIndicator progress, boolean runInReadAction, boolean failFastOnAcquireReadAction, @NotNull final Processor<? super T> thingProcessor) throws ProcessCanceledException -->Line_7 $$ ApplierCompleter<T> applier = new ApplierCompleter<T>(null, runInReadAction, wrapper, things, thingProcessor, 0, things.size(), null)[ FD ]
Line_2 $$ public <T> boolean invokeConcurrentlyUnderProgress(@NotNull final List<T> things, ProgressIndicator progress, boolean runInReadAction, boolean failFastOnAcquireReadAction, @NotNull final Processor<? super T> thingProcessor) throws ProcessCanceledException -->Line_7 $$ ApplierCompleter<T> applier = new ApplierCompleter<T>(null, runInReadAction, wrapper, things, thingProcessor, 0, things.size(), null)[ CD ]
