Line_2 $$ public Pair<List<Commit>, Integer> addCommits(@NotNull List<? extends Commit> savedLog, @NotNull Collection<CommitId> previousRefs, @NotNull List<? extends Commit> firstBlock, @NotNull Collection<CommitId> newRefs) -->Line_7 $$ int unsafeBlockSize = Math.max(redCommitsAndSavedRedIndex.first, newCommitsAndSavedGreenIndex.first)[ CD ]
Line_14 $$ unsafePartSavedLog = new NewCommitIntegrator<CommitId, Commit>(unsafePartSavedLog, allNewsCommits).getResultList()-->Line_15 $$ return Pair.create(ContainerUtil.concat(unsafePartSavedLog, savedLog.subList(unsafeBlockSize, savedLog.size())), unsafePartSavedLog.size() - unsafeBlockSize)[ FD ]
Line_2 $$ public Pair<List<Commit>, Integer> addCommits(@NotNull List<? extends Commit> savedLog, @NotNull Collection<CommitId> previousRefs, @NotNull List<? extends Commit> firstBlock, @NotNull Collection<CommitId> newRefs) -->Line_6 $$ Set<Commit> allNewsCommits = newCommitsAndSavedGreenIndex.second[ CD ]
Line_8 $$ List<Commit> unsafePartSavedLog = new ArrayList<Commit>()-->Line_11 $$ unsafePartSavedLog.add(commit)[ FD ]
Line_2 $$ public Pair<List<Commit>, Integer> addCommits(@NotNull List<? extends Commit> savedLog, @NotNull Collection<CommitId> previousRefs, @NotNull List<? extends Commit> firstBlock, @NotNull Collection<CommitId> newRefs) -->Line_4 $$ Pair<Integer, Set<CommitId>> redCommitsAndSavedRedIndex = getRedCommitsAndSavedRedIndex(savedLog, previousRefs, firstBlock, newRefs)[ FD ]
Line_7 $$ int unsafeBlockSize = Math.max(redCommitsAndSavedRedIndex.first, newCommitsAndSavedGreenIndex.first)-->Line_15 $$ return Pair.create(ContainerUtil.concat(unsafePartSavedLog, savedLog.subList(unsafeBlockSize, savedLog.size())), unsafePartSavedLog.size() - unsafeBlockSize)[ FD ]
Line_5 $$ Set<CommitId> removeCommits = redCommitsAndSavedRedIndex.second-->Line_10 $$ if (!removeCommits.contains(commit.getId())) [ FD ]
Line_2 $$ public Pair<List<Commit>, Integer> addCommits(@NotNull List<? extends Commit> savedLog, @NotNull Collection<CommitId> previousRefs, @NotNull List<? extends Commit> firstBlock, @NotNull Collection<CommitId> newRefs) -->Line_8 $$ List<Commit> unsafePartSavedLog = new ArrayList<Commit>()[ CD ]
Line_2 $$ public Pair<List<Commit>, Integer> addCommits(@NotNull List<? extends Commit> savedLog, @NotNull Collection<CommitId> previousRefs, @NotNull List<? extends Commit> firstBlock, @NotNull Collection<CommitId> newRefs) -->Line_5 $$ Set<CommitId> removeCommits = redCommitsAndSavedRedIndex.second[ CD ]
Line_8 $$ List<Commit> unsafePartSavedLog = new ArrayList<Commit>()-->Line_15 $$ return Pair.create(ContainerUtil.concat(unsafePartSavedLog, savedLog.subList(unsafeBlockSize, savedLog.size())), unsafePartSavedLog.size() - unsafeBlockSize)[ FD ]
Line_9 $$ for (Commit commit : savedLog.subList(0, unsafeBlockSize)) -->Line_11 $$ unsafePartSavedLog.add(commit)[ FD ]
Line_2 $$ public Pair<List<Commit>, Integer> addCommits(@NotNull List<? extends Commit> savedLog, @NotNull Collection<CommitId> previousRefs, @NotNull List<? extends Commit> firstBlock, @NotNull Collection<CommitId> newRefs) -->Line_15 $$ return Pair.create(ContainerUtil.concat(unsafePartSavedLog, savedLog.subList(unsafeBlockSize, savedLog.size())), unsafePartSavedLog.size() - unsafeBlockSize)[ FD ]
Line_2 $$ public Pair<List<Commit>, Integer> addCommits(@NotNull List<? extends Commit> savedLog, @NotNull Collection<CommitId> previousRefs, @NotNull List<? extends Commit> firstBlock, @NotNull Collection<CommitId> newRefs) -->Line_9 $$ for (Commit commit : savedLog.subList(0, unsafeBlockSize)) [ FD ]
Line_2 $$ public Pair<List<Commit>, Integer> addCommits(@NotNull List<? extends Commit> savedLog, @NotNull Collection<CommitId> previousRefs, @NotNull List<? extends Commit> firstBlock, @NotNull Collection<CommitId> newRefs) -->Line_3 $$ Pair<Integer, Set<Commit>> newCommitsAndSavedGreenIndex = getNewCommitsAndSavedGreenIndex(savedLog, previousRefs, firstBlock, newRefs)[ CD ]
Line_2 $$ public Pair<List<Commit>, Integer> addCommits(@NotNull List<? extends Commit> savedLog, @NotNull Collection<CommitId> previousRefs, @NotNull List<? extends Commit> firstBlock, @NotNull Collection<CommitId> newRefs) -->Line_14 $$ unsafePartSavedLog = new NewCommitIntegrator<CommitId, Commit>(unsafePartSavedLog, allNewsCommits).getResultList()[ CD ]
Line_8 $$ List<Commit> unsafePartSavedLog = new ArrayList<Commit>()-->Line_14 $$ unsafePartSavedLog = new NewCommitIntegrator<CommitId, Commit>(unsafePartSavedLog, allNewsCommits).getResultList()[ FD ]
Line_7 $$ int unsafeBlockSize = Math.max(redCommitsAndSavedRedIndex.first, newCommitsAndSavedGreenIndex.first)-->Line_9 $$ for (Commit commit : savedLog.subList(0, unsafeBlockSize)) [ FD ]
Line_2 $$ public Pair<List<Commit>, Integer> addCommits(@NotNull List<? extends Commit> savedLog, @NotNull Collection<CommitId> previousRefs, @NotNull List<? extends Commit> firstBlock, @NotNull Collection<CommitId> newRefs) -->Line_3 $$ Pair<Integer, Set<Commit>> newCommitsAndSavedGreenIndex = getNewCommitsAndSavedGreenIndex(savedLog, previousRefs, firstBlock, newRefs)[ FD ]
Line_2 $$ public Pair<List<Commit>, Integer> addCommits(@NotNull List<? extends Commit> savedLog, @NotNull Collection<CommitId> previousRefs, @NotNull List<? extends Commit> firstBlock, @NotNull Collection<CommitId> newRefs) -->Line_15 $$ return Pair.create(ContainerUtil.concat(unsafePartSavedLog, savedLog.subList(unsafeBlockSize, savedLog.size())), unsafePartSavedLog.size() - unsafeBlockSize)[ CD ]
Line_10 $$ if (!removeCommits.contains(commit.getId())) -->Line_11 $$ unsafePartSavedLog.add(commit)[ CD ]
Line_2 $$ public Pair<List<Commit>, Integer> addCommits(@NotNull List<? extends Commit> savedLog, @NotNull Collection<CommitId> previousRefs, @NotNull List<? extends Commit> firstBlock, @NotNull Collection<CommitId> newRefs) -->Line_4 $$ Pair<Integer, Set<CommitId>> redCommitsAndSavedRedIndex = getRedCommitsAndSavedRedIndex(savedLog, previousRefs, firstBlock, newRefs)[ CD ]
Line_9 $$ for (Commit commit : savedLog.subList(0, unsafeBlockSize)) -->Line_10 $$ if (!removeCommits.contains(commit.getId())) [ FD ]
