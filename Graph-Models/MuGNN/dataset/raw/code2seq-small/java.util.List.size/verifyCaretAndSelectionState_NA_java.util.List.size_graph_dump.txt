Line_3 $$ boolean hasChecks = false-->Line_7 $$ hasChecks = true[ FD ]
Line_18 $$ for (int i = 0; i < caretState.carets.size(); i++) -->Line_24 $$ int selectionStart = currentCaret.getSelectionStart()[ CD ]
Line_2 $$ public static void verifyCaretAndSelectionState(Editor editor, CaretAndSelectionState caretState, String message) -->Line_18 $$ for (int i = 0; i < caretState.carets.size(); i++) [ CD ]
Line_7 $$ hasChecks = true-->Line_11 $$ if (!hasChecks) [ FD ]
Line_20 $$ Caret currentCaret = allCarets.get(i)-->Line_24 $$ int selectionStart = currentCaret.getSelectionStart()[ FD ]
Line_18 $$ for (int i = 0; i < caretState.carets.size(); i++) -->Line_32 $$ if (expected.selection != null) [ CD ]
Line_2 $$ public static void verifyCaretAndSelectionState(Editor editor, CaretAndSelectionState caretState, String message) -->Line_3 $$ boolean hasChecks = false[ CD ]
Line_18 $$ for (int i = 0; i < caretState.carets.size(); i++) -->Line_28 $$ CaretInfo expected = caretState.carets.get(i)[ FD ]
Line_32 $$ if (expected.selection != null) -->Line_34 $$ LogicalPosition expectedSelectionEnd = editor.offsetToLogicalPosition(expected.selection.getEndOffset())[ CD ]
Line_18 $$ for (int i = 0; i < caretState.carets.size(); i++) -->Line_19 $$ String caretDescription = caretState.carets.size() == 1 ? "" : "caret " + (i + 1) + "/" + caretState.carets.size() + " "[ CD ]
Line_26 $$ LogicalPosition actualSelectionStart = editor.offsetToLogicalPosition(selectionStart)-->Line_35 $$ assertEquals(messageSuffix + caretDescription + "unexpected selection start", expectedSelectionStart, actualSelectionStart)[ FD ]
Line_32 $$ if (expected.selection != null) -->Line_36 $$ assertEquals(messageSuffix + caretDescription + "unexpected selection end", expectedSelectionEnd, actualSelectionEnd)[ CD ]
Line_2 $$ public static void verifyCaretAndSelectionState(Editor editor, CaretAndSelectionState caretState, String message) -->Line_4 $$ for (int i = 0; i < caretState.carets.size(); i++) [ CD ]
Line_4 $$ for (int i = 0; i < caretState.carets.size(); i++) -->Line_20 $$ Caret currentCaret = allCarets.get(i)[ FD ]
Line_27 $$ LogicalPosition actualSelectionEnd = editor.offsetToLogicalPosition(selectionEnd)-->Line_36 $$ assertEquals(messageSuffix + caretDescription + "unexpected selection end", expectedSelectionEnd, actualSelectionEnd)[ FD ]
Line_23 $$ LogicalPosition actualCaretPosition = new LogicalPosition(actualCaretLine, actualCaretColumn)-->Line_30 $$ assertEquals(messageSuffix + caretDescription + "unexpected caret position", expected.position, actualCaretPosition)[ FD ]
Line_3 $$ boolean hasChecks = false-->Line_11 $$ if (!hasChecks) [ FD ]
Line_2 $$ public static void verifyCaretAndSelectionState(Editor editor, CaretAndSelectionState caretState, String message) -->Line_14 $$ String messageSuffix = message == null ? "" : (message + ": ")[ CD ]
Line_11 $$ if (!hasChecks) -->Line_12 $$ return[ CD ]
Line_2 $$ public static void verifyCaretAndSelectionState(Editor editor, CaretAndSelectionState caretState, String message) -->Line_16 $$ List<Caret> allCarets = new ArrayList<Caret>(caretModel.getAllCarets())[ CD ]
Line_4 $$ for (int i = 0; i < caretState.carets.size(); i++) -->Line_18 $$ for (int i = 0; i < caretState.carets.size(); i++) [ FD ]
Line_4 $$ for (int i = 0; i < caretState.carets.size(); i++) -->Line_28 $$ CaretInfo expected = caretState.carets.get(i)[ FD ]
Line_32 $$ if (expected.selection != null) -->Line_33 $$ LogicalPosition expectedSelectionStart = editor.offsetToLogicalPosition(expected.selection.getStartOffset())[ CD ]
Line_16 $$ List<Caret> allCarets = new ArrayList<Caret>(caretModel.getAllCarets())-->Line_17 $$ assertEquals(messageSuffix + " Unexpected number of carets", caretState.carets.size(), allCarets.size())[ FD ]
Line_18 $$ for (int i = 0; i < caretState.carets.size(); i++) -->Line_27 $$ LogicalPosition actualSelectionEnd = editor.offsetToLogicalPosition(selectionEnd)[ CD ]
Line_25 $$ int selectionEnd = currentCaret.getSelectionEnd()-->Line_27 $$ LogicalPosition actualSelectionEnd = editor.offsetToLogicalPosition(selectionEnd)[ FD ]
Line_20 $$ Caret currentCaret = allCarets.get(i)-->Line_21 $$ int actualCaretLine = editor.getDocument().getLineNumber(currentCaret.getOffset())[ FD ]
Line_2 $$ public static void verifyCaretAndSelectionState(Editor editor, CaretAndSelectionState caretState, String message) -->Line_11 $$ if (!hasChecks) [ CD ]
Line_18 $$ for (int i = 0; i < caretState.carets.size(); i++) -->Line_29 $$ if (expected.position != null) [ CD ]
Line_29 $$ if (expected.position != null) -->Line_30 $$ assertEquals(messageSuffix + caretDescription + "unexpected caret position", expected.position, actualCaretPosition)[ CD ]
Line_4 $$ for (int i = 0; i < caretState.carets.size(); i++) -->Line_6 $$ if (expected.position != null || expected.selection != null) [ CD ]
Line_2 $$ public static void verifyCaretAndSelectionState(Editor editor, CaretAndSelectionState caretState, String message) -->Line_33 $$ LogicalPosition expectedSelectionStart = editor.offsetToLogicalPosition(expected.selection.getStartOffset())[ FD ]
Line_16 $$ List<Caret> allCarets = new ArrayList<Caret>(caretModel.getAllCarets())-->Line_20 $$ Caret currentCaret = allCarets.get(i)[ FD ]
Line_21 $$ int actualCaretLine = editor.getDocument().getLineNumber(currentCaret.getOffset())-->Line_22 $$ int actualCaretColumn = currentCaret.getOffset() - editor.getDocument().getLineStartOffset(actualCaretLine)[ FD ]
Line_32 $$ if (expected.selection != null) -->Line_38 $$ assertFalse(messageSuffix + caretDescription + "should has no selection, but was: (" + actualSelectionStart + ", " + actualSelectionEnd + ")", currentCaret.hasSelection())[ CD ]
Line_2 $$ public static void verifyCaretAndSelectionState(Editor editor, CaretAndSelectionState caretState, String message) -->Line_17 $$ assertEquals(messageSuffix + " Unexpected number of carets", caretState.carets.size(), allCarets.size())[ CD ]
Line_2 $$ public static void verifyCaretAndSelectionState(Editor editor, CaretAndSelectionState caretState, String message) -->Line_15 $$ CaretModel caretModel = editor.getCaretModel()[ CD ]
Line_6 $$ if (expected.position != null || expected.selection != null) -->Line_7 $$ hasChecks = true[ CD ]
Line_18 $$ for (int i = 0; i < caretState.carets.size(); i++) -->Line_22 $$ int actualCaretColumn = currentCaret.getOffset() - editor.getDocument().getLineStartOffset(actualCaretLine)[ CD ]
Line_34 $$ LogicalPosition expectedSelectionEnd = editor.offsetToLogicalPosition(expected.selection.getEndOffset())-->Line_36 $$ assertEquals(messageSuffix + caretDescription + "unexpected selection end", expectedSelectionEnd, actualSelectionEnd)[ FD ]
Line_20 $$ Caret currentCaret = allCarets.get(i)-->Line_25 $$ int selectionEnd = currentCaret.getSelectionEnd()[ FD ]
Line_2 $$ public static void verifyCaretAndSelectionState(Editor editor, CaretAndSelectionState caretState, String message) -->Line_22 $$ int actualCaretColumn = currentCaret.getOffset() - editor.getDocument().getLineStartOffset(actualCaretLine)[ FD ]
Line_2 $$ public static void verifyCaretAndSelectionState(Editor editor, CaretAndSelectionState caretState, String message) -->Line_34 $$ LogicalPosition expectedSelectionEnd = editor.offsetToLogicalPosition(expected.selection.getEndOffset())[ FD ]
Line_18 $$ for (int i = 0; i < caretState.carets.size(); i++) -->Line_21 $$ int actualCaretLine = editor.getDocument().getLineNumber(currentCaret.getOffset())[ CD ]
Line_2 $$ public static void verifyCaretAndSelectionState(Editor editor, CaretAndSelectionState caretState, String message) -->Line_27 $$ LogicalPosition actualSelectionEnd = editor.offsetToLogicalPosition(selectionEnd)[ FD ]
Line_18 $$ for (int i = 0; i < caretState.carets.size(); i++) -->Line_26 $$ LogicalPosition actualSelectionStart = editor.offsetToLogicalPosition(selectionStart)[ CD ]
Line_18 $$ for (int i = 0; i < caretState.carets.size(); i++) -->Line_25 $$ int selectionEnd = currentCaret.getSelectionEnd()[ CD ]
Line_20 $$ Caret currentCaret = allCarets.get(i)-->Line_38 $$ assertFalse(messageSuffix + caretDescription + "should has no selection, but was: (" + actualSelectionStart + ", " + actualSelectionEnd + ")", currentCaret.hasSelection())[ FD ]
Line_20 $$ Caret currentCaret = allCarets.get(i)-->Line_22 $$ int actualCaretColumn = currentCaret.getOffset() - editor.getDocument().getLineStartOffset(actualCaretLine)[ FD ]
Line_18 $$ for (int i = 0; i < caretState.carets.size(); i++) -->Line_20 $$ Caret currentCaret = allCarets.get(i)[ CD ]
Line_15 $$ CaretModel caretModel = editor.getCaretModel()-->Line_16 $$ List<Caret> allCarets = new ArrayList<Caret>(caretModel.getAllCarets())[ FD ]
Line_18 $$ for (int i = 0; i < caretState.carets.size(); i++) -->Line_20 $$ Caret currentCaret = allCarets.get(i)[ FD ]
Line_24 $$ int selectionStart = currentCaret.getSelectionStart()-->Line_26 $$ LogicalPosition actualSelectionStart = editor.offsetToLogicalPosition(selectionStart)[ FD ]
Line_4 $$ for (int i = 0; i < caretState.carets.size(); i++) -->Line_5 $$ EditorTestUtil.CaretInfo expected = caretState.carets.get(i)[ FD ]
Line_33 $$ LogicalPosition expectedSelectionStart = editor.offsetToLogicalPosition(expected.selection.getStartOffset())-->Line_35 $$ assertEquals(messageSuffix + caretDescription + "unexpected selection start", expectedSelectionStart, actualSelectionStart)[ FD ]
Line_4 $$ for (int i = 0; i < caretState.carets.size(); i++) -->Line_5 $$ EditorTestUtil.CaretInfo expected = caretState.carets.get(i)[ CD ]
Line_2 $$ public static void verifyCaretAndSelectionState(Editor editor, CaretAndSelectionState caretState, String message) -->Line_26 $$ LogicalPosition actualSelectionStart = editor.offsetToLogicalPosition(selectionStart)[ FD ]
Line_18 $$ for (int i = 0; i < caretState.carets.size(); i++) -->Line_28 $$ CaretInfo expected = caretState.carets.get(i)[ CD ]
Line_32 $$ if (expected.selection != null) -->Line_35 $$ assertEquals(messageSuffix + caretDescription + "unexpected selection start", expectedSelectionStart, actualSelectionStart)[ CD ]
Line_18 $$ for (int i = 0; i < caretState.carets.size(); i++) -->Line_23 $$ LogicalPosition actualCaretPosition = new LogicalPosition(actualCaretLine, actualCaretColumn)[ CD ]
Line_2 $$ public static void verifyCaretAndSelectionState(Editor editor, CaretAndSelectionState caretState, String message) -->Line_15 $$ CaretModel caretModel = editor.getCaretModel()[ FD ]
Line_2 $$ public static void verifyCaretAndSelectionState(Editor editor, CaretAndSelectionState caretState, String message) -->Line_21 $$ int actualCaretLine = editor.getDocument().getLineNumber(currentCaret.getOffset())[ FD ]
