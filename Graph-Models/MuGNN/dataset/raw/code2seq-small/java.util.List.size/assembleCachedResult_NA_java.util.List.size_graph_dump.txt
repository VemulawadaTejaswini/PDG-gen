Line_4 $$ final List result = new ArrayList(cacheable.size() - 1)-->Line_7 $$ result.add(returnTypes[0].assemble((Serializable) cacheable.get(i), session, null))[ FD ]
Line_6 $$ for (int i = 1; i < cacheable.size(); i++) -->Line_10 $$ for (int i = 1; i < cacheable.size(); i++) [ FD ]
Line_2 $$ private List assembleCachedResult(final QueryKey key, final List cacheable, final boolean isNaturalKeyLookup, boolean singleResult, final Type[] returnTypes, final SessionImplementor session) throws HibernateException -->Line_11 $$ result.add(TypeHelper.assemble((Serializable[]) cacheable.get(i), returnTypes, session, null))[ FD ]
Line_10 $$ for (int i = 1; i < cacheable.size(); i++) -->Line_11 $$ result.add(TypeHelper.assemble((Serializable[]) cacheable.get(i), returnTypes, session, null))[ FD ]
Line_21 $$ if (UnresolvableObjectException.class.isInstance(ex) || EntityNotFoundException.class.isInstance(ex)) -->Line_27 $$ return null[ CD ]
Line_2 $$ private List assembleCachedResult(final QueryKey key, final List cacheable, final boolean isNaturalKeyLookup, boolean singleResult, final Type[] returnTypes, final SessionImplementor session) throws HibernateException -->Line_6 $$ for (int i = 1; i < cacheable.size(); i++) [ FD ]
Line_5 $$ if (singleResult) -->Line_10 $$ for (int i = 1; i < cacheable.size(); i++) [ CD ]
Line_2 $$ private List assembleCachedResult(final QueryKey key, final List cacheable, final boolean isNaturalKeyLookup, boolean singleResult, final Type[] returnTypes, final SessionImplementor session) throws HibernateException -->Line_10 $$ for (int i = 1; i < cacheable.size(); i++) [ FD ]
Line_5 $$ if (singleResult) -->Line_6 $$ for (int i = 1; i < cacheable.size(); i++) [ CD ]
Line_21 $$ if (UnresolvableObjectException.class.isInstance(ex) || EntityNotFoundException.class.isInstance(ex)) -->Line_25 $$ cacheRegion.evict(key)[ CD ]
Line_10 $$ for (int i = 1; i < cacheable.size(); i++) -->Line_12 $$ if (TRACING) [ CD ]
Line_10 $$ for (int i = 1; i < cacheable.size(); i++) -->Line_11 $$ result.add(TypeHelper.assemble((Serializable[]) cacheable.get(i), returnTypes, session, null))[ CD ]
Line_12 $$ if (TRACING) -->Line_13 $$ logCachedResultRowDetails(returnTypes, result.get(i - 1))[ CD ]
Line_19 $$ if (isNaturalKeyLookup) -->Line_21 $$ if (UnresolvableObjectException.class.isInstance(ex) || EntityNotFoundException.class.isInstance(ex)) [ CD ]
Line_2 $$ private List assembleCachedResult(final QueryKey key, final List cacheable, final boolean isNaturalKeyLookup, boolean singleResult, final Type[] returnTypes, final SessionImplementor session) throws HibernateException -->Line_25 $$ cacheRegion.evict(key)[ FD ]
Line_4 $$ final List result = new ArrayList(cacheable.size() - 1)-->Line_13 $$ logCachedResultRowDetails(returnTypes, result.get(i - 1))[ FD ]
Line_4 $$ final List result = new ArrayList(cacheable.size() - 1)-->Line_11 $$ result.add(TypeHelper.assemble((Serializable[]) cacheable.get(i), returnTypes, session, null))[ FD ]
Line_2 $$ private List assembleCachedResult(final QueryKey key, final List cacheable, final boolean isNaturalKeyLookup, boolean singleResult, final Type[] returnTypes, final SessionImplementor session) throws HibernateException -->Line_4 $$ final List result = new ArrayList(cacheable.size() - 1)[ FD ]
Line_22 $$ if (DEBUGGING) -->Line_23 $$ LOG.debug("Unable to reassemble cached natural-id query result")[ CD ]
Line_6 $$ for (int i = 1; i < cacheable.size(); i++) -->Line_11 $$ result.add(TypeHelper.assemble((Serializable[]) cacheable.get(i), returnTypes, session, null))[ FD ]
Line_21 $$ if (UnresolvableObjectException.class.isInstance(ex) || EntityNotFoundException.class.isInstance(ex)) -->Line_22 $$ if (DEBUGGING) [ CD ]
Line_2 $$ private List assembleCachedResult(final QueryKey key, final List cacheable, final boolean isNaturalKeyLookup, boolean singleResult, final Type[] returnTypes, final SessionImplementor session) throws HibernateException -->Line_7 $$ result.add(returnTypes[0].assemble((Serializable) cacheable.get(i), session, null))[ FD ]
Line_6 $$ for (int i = 1; i < cacheable.size(); i++) -->Line_7 $$ result.add(returnTypes[0].assemble((Serializable) cacheable.get(i), session, null))[ CD ]
Line_2 $$ private List assembleCachedResult(final QueryKey key, final List cacheable, final boolean isNaturalKeyLookup, boolean singleResult, final Type[] returnTypes, final SessionImplementor session) throws HibernateException -->Line_13 $$ logCachedResultRowDetails(returnTypes, result.get(i - 1))[ FD ]
Line_6 $$ for (int i = 1; i < cacheable.size(); i++) -->Line_7 $$ result.add(returnTypes[0].assemble((Serializable) cacheable.get(i), session, null))[ FD ]
