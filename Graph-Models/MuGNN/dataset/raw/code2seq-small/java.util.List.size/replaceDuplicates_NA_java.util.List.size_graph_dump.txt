Line_5 $$ final int exitCode = Messages.showYesNoDialog(project, message, getRefactoringName(), Messages.getInformationIcon())-->Line_6 $$ if (exitCode == Messages.YES) [ FD ]
Line_10 $$ for (IncludeDuplicate<T> pair : duplicates) -->Line_21 $$ doReplaceRange(includePath, pair.getStart(), pair.getEnd())[ FD ]
Line_2 $$ private void replaceDuplicates(final String includePath, final List<IncludeDuplicate<T>> duplicates, final Editor editor, final Project project) -->Line_29 $$ doReplaceRange(includePath, pair.getStart(), pair.getEnd())[ FD ]
Line_15 $$ final int promptResult = promptDialog.getExitCode()-->Line_18 $$ if (promptResult == FindManager.PromptResult.CANCEL)[ FD ]
Line_11 $$ if (!replaceAll) -->Line_16 $$ if (promptResult == FindManager.PromptResult.SKIP)[ CD ]
Line_11 $$ if (!replaceAll) -->Line_12 $$ highlightInEditor(project, pair, editor)[ CD ]
Line_10 $$ for (IncludeDuplicate<T> pair : duplicates) -->Line_29 $$ doReplaceRange(includePath, pair.getStart(), pair.getEnd())[ FD ]
Line_2 $$ private void replaceDuplicates(final String includePath, final List<IncludeDuplicate<T>> duplicates, final Editor editor, final Project project) -->Line_23 $$ doReplaceRange(includePath, pair.getStart(), pair.getEnd())[ FD ]
Line_7 $$ CommandProcessor.getInstance().executeCommand(project, new Runnable() -->Line_9 $$ boolean replaceAll = false[ CD ]
Line_2 $$ private void replaceDuplicates(final String includePath, final List<IncludeDuplicate<T>> duplicates, final Editor editor, final Project project) -->Line_3 $$ if (duplicates.size() > 0) [ FD ]
Line_3 $$ if (duplicates.size() > 0) -->Line_5 $$ final int exitCode = Messages.showYesNoDialog(project, message, getRefactoringName(), Messages.getInformationIcon())[ CD ]
Line_22 $$ if (promptResult == FindManager.PromptResult.ALL) -->Line_24 $$ replaceAll = true[ CD ]
Line_2 $$ private void replaceDuplicates(final String includePath, final List<IncludeDuplicate<T>> duplicates, final Editor editor, final Project project) -->Line_7 $$ CommandProcessor.getInstance().executeCommand(project, new Runnable() [ FD ]
Line_15 $$ final int promptResult = promptDialog.getExitCode()-->Line_16 $$ if (promptResult == FindManager.PromptResult.SKIP)[ FD ]
Line_11 $$ if (!replaceAll) -->Line_18 $$ if (promptResult == FindManager.PromptResult.CANCEL)[ CD ]
Line_11 $$ if (!replaceAll) -->Line_13 $$ ReplacePromptDialog promptDialog = new ReplacePromptDialog(false, RefactoringBundle.message("replace.fragment"), project)[ CD ]
Line_9 $$ boolean replaceAll = false-->Line_24 $$ replaceAll = true[ FD ]
Line_2 $$ private void replaceDuplicates(final String includePath, final List<IncludeDuplicate<T>> duplicates, final Editor editor, final Project project) -->Line_3 $$ if (duplicates.size() > 0) [ CD ]
Line_15 $$ final int promptResult = promptDialog.getExitCode()-->Line_22 $$ if (promptResult == FindManager.PromptResult.ALL) [ FD ]
Line_15 $$ final int promptResult = promptDialog.getExitCode()-->Line_20 $$ if (promptResult == FindManager.PromptResult.OK) [ FD ]
Line_11 $$ if (!replaceAll) -->Line_15 $$ final int promptResult = promptDialog.getExitCode()[ CD ]
Line_2 $$ private void replaceDuplicates(final String includePath, final List<IncludeDuplicate<T>> duplicates, final Editor editor, final Project project) -->Line_21 $$ doReplaceRange(includePath, pair.getStart(), pair.getEnd())[ FD ]
Line_10 $$ for (IncludeDuplicate<T> pair : duplicates) -->Line_23 $$ doReplaceRange(includePath, pair.getStart(), pair.getEnd())[ FD ]
Line_13 $$ ReplacePromptDialog promptDialog = new ReplacePromptDialog(false, RefactoringBundle.message("replace.fragment"), project)-->Line_14 $$ promptDialog.show()[ FD ]
Line_9 $$ boolean replaceAll = false-->Line_11 $$ if (!replaceAll) [ FD ]
Line_10 $$ for (IncludeDuplicate<T> pair : duplicates) -->Line_12 $$ highlightInEditor(project, pair, editor)[ FD ]
Line_22 $$ if (promptResult == FindManager.PromptResult.ALL) -->Line_23 $$ doReplaceRange(includePath, pair.getStart(), pair.getEnd())[ CD ]
Line_3 $$ if (duplicates.size() > 0) -->Line_6 $$ if (exitCode == Messages.YES) [ CD ]
Line_2 $$ private void replaceDuplicates(final String includePath, final List<IncludeDuplicate<T>> duplicates, final Editor editor, final Project project) -->Line_5 $$ final int exitCode = Messages.showYesNoDialog(project, message, getRefactoringName(), Messages.getInformationIcon())[ FD ]
Line_20 $$ if (promptResult == FindManager.PromptResult.OK) -->Line_22 $$ if (promptResult == FindManager.PromptResult.ALL) [ CD ]
Line_11 $$ if (!replaceAll) -->Line_14 $$ promptDialog.show()[ CD ]
Line_13 $$ ReplacePromptDialog promptDialog = new ReplacePromptDialog(false, RefactoringBundle.message("replace.fragment"), project)-->Line_15 $$ final int promptResult = promptDialog.getExitCode()[ FD ]
Line_22 $$ if (promptResult == FindManager.PromptResult.ALL) -->Line_26 $$ LOG.error("Unknown return status")[ CD ]
Line_3 $$ if (duplicates.size() > 0) -->Line_4 $$ final String message = RefactoringBundle.message("idea.has.found.fragments.that.can.be.replaced.with.include.directive", ApplicationNamesInfo.getInstance().getProductName())[ CD ]
Line_11 $$ if (!replaceAll) -->Line_29 $$ doReplaceRange(includePath, pair.getStart(), pair.getEnd())[ CD ]
Line_4 $$ final String message = RefactoringBundle.message("idea.has.found.fragments.that.can.be.replaced.with.include.directive", ApplicationNamesInfo.getInstance().getProductName())-->Line_5 $$ final int exitCode = Messages.showYesNoDialog(project, message, getRefactoringName(), Messages.getInformationIcon())[ FD ]
Line_6 $$ if (exitCode == Messages.YES) -->Line_7 $$ CommandProcessor.getInstance().executeCommand(project, new Runnable() [ CD ]
Line_2 $$ private void replaceDuplicates(final String includePath, final List<IncludeDuplicate<T>> duplicates, final Editor editor, final Project project) -->Line_12 $$ highlightInEditor(project, pair, editor)[ FD ]
Line_11 $$ if (!replaceAll) -->Line_20 $$ if (promptResult == FindManager.PromptResult.OK) [ CD ]
Line_20 $$ if (promptResult == FindManager.PromptResult.OK) -->Line_21 $$ doReplaceRange(includePath, pair.getStart(), pair.getEnd())[ CD ]
