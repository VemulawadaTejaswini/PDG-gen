Line_3 $$ BlockBuilder blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), values.size())-->Line_16 $$ type.writeSlice(blockBuilder, slice, 0, slice.length())[ FD ]
Line_8 $$ if (javaType == boolean.class) -->Line_10 $$ if (javaType == long.class) [ CD ]
Line_2 $$ private static Block createBlock(Type type, List<Object> values) -->Line_16 $$ type.writeSlice(blockBuilder, slice, 0, slice.length())[ FD ]
Line_10 $$ if (javaType == long.class) -->Line_11 $$ type.writeLong(blockBuilder, (Long) value)[ CD ]
Line_2 $$ private static Block createBlock(Type type, List<Object> values) -->Line_21 $$ return blockBuilder.build()[ CD ]
Line_14 $$ if (javaType == Slice.class) -->Line_16 $$ type.writeSlice(blockBuilder, slice, 0, slice.length())[ CD ]
Line_5 $$ Class<?> javaType = type.getJavaType()-->Line_12 $$ if (javaType == double.class) [ FD ]
Line_3 $$ BlockBuilder blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), values.size())-->Line_13 $$ type.writeDouble(blockBuilder, (Double) value)[ FD ]
Line_2 $$ private static Block createBlock(Type type, List<Object> values) -->Line_11 $$ type.writeLong(blockBuilder, (Long) value)[ FD ]
Line_8 $$ if (javaType == boolean.class) -->Line_9 $$ type.writeBoolean(blockBuilder, (Boolean) value)[ CD ]
Line_5 $$ Class<?> javaType = type.getJavaType()-->Line_8 $$ if (javaType == boolean.class) [ FD ]
Line_12 $$ if (javaType == double.class) -->Line_14 $$ if (javaType == Slice.class) [ CD ]
Line_6 $$ if (value == null) -->Line_7 $$ blockBuilder.appendNull()[ CD ]
Line_2 $$ private static Block createBlock(Type type, List<Object> values) -->Line_5 $$ Class<?> javaType = type.getJavaType()[ FD ]
Line_14 $$ if (javaType == Slice.class) -->Line_15 $$ Slice slice = (Slice) value[ CD ]
Line_6 $$ if (value == null) -->Line_8 $$ if (javaType == boolean.class) [ CD ]
Line_2 $$ private static Block createBlock(Type type, List<Object> values) -->Line_3 $$ BlockBuilder blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), values.size())[ FD ]
Line_3 $$ BlockBuilder blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), values.size())-->Line_9 $$ type.writeBoolean(blockBuilder, (Boolean) value)[ FD ]
Line_10 $$ if (javaType == long.class) -->Line_12 $$ if (javaType == double.class) [ CD ]
Line_15 $$ Slice slice = (Slice) value-->Line_16 $$ type.writeSlice(blockBuilder, slice, 0, slice.length())[ FD ]
Line_5 $$ Class<?> javaType = type.getJavaType()-->Line_14 $$ if (javaType == Slice.class) [ FD ]
Line_5 $$ Class<?> javaType = type.getJavaType()-->Line_10 $$ if (javaType == long.class) [ FD ]
Line_2 $$ private static Block createBlock(Type type, List<Object> values) -->Line_13 $$ type.writeDouble(blockBuilder, (Double) value)[ FD ]
Line_2 $$ private static Block createBlock(Type type, List<Object> values) -->Line_9 $$ type.writeBoolean(blockBuilder, (Boolean) value)[ FD ]
Line_3 $$ BlockBuilder blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), values.size())-->Line_21 $$ return blockBuilder.build()[ FD ]
Line_12 $$ if (javaType == double.class) -->Line_13 $$ type.writeDouble(blockBuilder, (Double) value)[ CD ]
Line_3 $$ BlockBuilder blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), values.size())-->Line_7 $$ blockBuilder.appendNull()[ FD ]
Line_3 $$ BlockBuilder blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), values.size())-->Line_11 $$ type.writeLong(blockBuilder, (Long) value)[ FD ]
Line_2 $$ private static Block createBlock(Type type, List<Object> values) -->Line_3 $$ BlockBuilder blockBuilder = type.createBlockBuilder(new BlockBuilderStatus(), values.size())[ CD ]
Line_4 $$ for (Object value : values) -->Line_6 $$ if (value == null) [ FD ]
