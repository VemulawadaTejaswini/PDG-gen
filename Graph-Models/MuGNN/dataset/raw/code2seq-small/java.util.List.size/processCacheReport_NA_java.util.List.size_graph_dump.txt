Line_2 $$ public final void processCacheReport(final DatanodeID datanodeID, final List<Long> blockIds) throws IOException -->Line_18 $$ if (metrics != null) [ CD ]
Line_2 $$ public final void processCacheReport(final DatanodeID datanodeID, final List<Long> blockIds) throws IOException -->Line_4 $$ final long startTime = Time.monotonicNow()[ CD ]
Line_2 $$ public final void processCacheReport(final DatanodeID datanodeID, final List<Long> blockIds) throws IOException -->Line_21 $$ LOG.debug("Processed cache report from [ FD ]
Line_2 $$ public final void processCacheReport(final DatanodeID datanodeID, final List<Long> blockIds) throws IOException -->Line_3 $$ namesystem.writeLock()[ CD ]
Line_5 $$ final long endTime-->Line_13 $$ endTime = Time.monotonicNow()[ FD ]
Line_18 $$ if (metrics != null) -->Line_19 $$ metrics.addCacheBlockReport((int) (endTime - startTime))[ CD ]
Line_2 $$ public final void processCacheReport(final DatanodeID datanodeID, final List<Long> blockIds) throws IOException -->Line_7 $$ final DatanodeDescriptor datanode = blockManager.getDatanodeManager().getDatanode(datanodeID)[ FD ]
Line_2 $$ public final void processCacheReport(final DatanodeID datanodeID, final List<Long> blockIds) throws IOException -->Line_21 $$ LOG.debug("Processed cache report from [ CD ]
Line_7 $$ final DatanodeDescriptor datanode = blockManager.getDatanodeManager().getDatanode(datanodeID)-->Line_11 $$ processCacheReportImpl(datanode, blockIds)[ FD ]
Line_2 $$ public final void processCacheReport(final DatanodeID datanodeID, final List<Long> blockIds) throws IOException -->Line_5 $$ final long endTime[ CD ]
Line_2 $$ public final void processCacheReport(final DatanodeID datanodeID, final List<Long> blockIds) throws IOException -->Line_11 $$ processCacheReportImpl(datanode, blockIds)[ FD ]
