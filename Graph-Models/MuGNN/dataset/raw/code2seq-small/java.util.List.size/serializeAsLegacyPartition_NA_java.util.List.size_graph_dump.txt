Line_2 $$ public static void serializeAsLegacyPartition(UnfilteredRowIterator partition, DataOutputPlus out, int version) throws IOException -->Line_4 $$ out.writeBoolean(true)[ FD ]
Line_2 $$ public static void serializeAsLegacyPartition(UnfilteredRowIterator partition, DataOutputPlus out, int version) throws IOException -->Line_5 $$ LegacyLayout.LegacyUnfilteredPartition legacyPartition = LegacyLayout.fromUnfilteredRowIterator(partition)[ CD ]
Line_11 $$ for (LegacyLayout.LegacyCell cell : legacyPartition.cells) -->Line_27 $$ if (cell.isCounter()) [ FD ]
Line_2 $$ public static void serializeAsLegacyPartition(UnfilteredRowIterator partition, DataOutputPlus out, int version) throws IOException -->Line_31 $$ out.writeLong(cell.timestamp)[ FD ]
Line_2 $$ public static void serializeAsLegacyPartition(UnfilteredRowIterator partition, DataOutputPlus out, int version) throws IOException -->Line_6 $$ UUIDSerializer.serializer.serialize(partition.metadata().cfId, out, version)[ CD ]
Line_2 $$ public static void serializeAsLegacyPartition(UnfilteredRowIterator partition, DataOutputPlus out, int version) throws IOException -->Line_7 $$ DeletionTime.serializer.serialize(legacyPartition.partitionDeletion, out)[ FD ]
Line_2 $$ public static void serializeAsLegacyPartition(UnfilteredRowIterator partition, DataOutputPlus out, int version) throws IOException -->Line_7 $$ DeletionTime.serializer.serialize(legacyPartition.partitionDeletion, out)[ CD ]
Line_17 $$ if (cell.isTombstone()) -->Line_20 $$ out.writeInt(cell.localDeletionTime)[ CD ]
Line_14 $$ if (cell.isExpiring()) -->Line_16 $$ out.writeInt(cell.localDeletionTime)[ CD ]
Line_17 $$ if (cell.isTombstone()) -->Line_18 $$ out.writeLong(cell.timestamp)[ CD ]
Line_11 $$ for (LegacyLayout.LegacyCell cell : legacyPartition.cells) -->Line_17 $$ if (cell.isTombstone()) [ FD ]
Line_2 $$ public static void serializeAsLegacyPartition(UnfilteredRowIterator partition, DataOutputPlus out, int version) throws IOException -->Line_25 $$ ByteBufferUtil.writeWithLength(ByteBufferUtil.bytes(count), out)[ FD ]
Line_2 $$ public static void serializeAsLegacyPartition(UnfilteredRowIterator partition, DataOutputPlus out, int version) throws IOException -->Line_20 $$ out.writeInt(cell.localDeletionTime)[ FD ]
Line_2 $$ public static void serializeAsLegacyPartition(UnfilteredRowIterator partition, DataOutputPlus out, int version) throws IOException -->Line_16 $$ out.writeInt(cell.localDeletionTime)[ FD ]
Line_2 $$ public static void serializeAsLegacyPartition(UnfilteredRowIterator partition, DataOutputPlus out, int version) throws IOException -->Line_6 $$ UUIDSerializer.serializer.serialize(partition.metadata().cfId, out, version)[ FD ]
Line_22 $$ if (cell.isCounterUpdate()) -->Line_24 $$ long count = CounterContext.instance().getLocalCount(cell.value)[ CD ]
Line_2 $$ public static void serializeAsLegacyPartition(UnfilteredRowIterator partition, DataOutputPlus out, int version) throws IOException -->Line_32 $$ ByteBufferUtil.writeWithLength(cell.value, out)[ FD ]
Line_2 $$ public static void serializeAsLegacyPartition(UnfilteredRowIterator partition, DataOutputPlus out, int version) throws IOException -->Line_4 $$ out.writeBoolean(true)[ CD ]
Line_11 $$ for (LegacyLayout.LegacyCell cell : legacyPartition.cells) -->Line_14 $$ if (cell.isExpiring()) [ FD ]
Line_22 $$ if (cell.isCounterUpdate()) -->Line_23 $$ out.writeLong(cell.timestamp)[ CD ]
Line_2 $$ public static void serializeAsLegacyPartition(UnfilteredRowIterator partition, DataOutputPlus out, int version) throws IOException -->Line_12 $$ ByteBufferUtil.writeWithShortLength(cell.name.encode(partition.metadata()), out)[ FD ]
Line_11 $$ for (LegacyLayout.LegacyCell cell : legacyPartition.cells) -->Line_22 $$ if (cell.isCounterUpdate()) [ FD ]
Line_2 $$ public static void serializeAsLegacyPartition(UnfilteredRowIterator partition, DataOutputPlus out, int version) throws IOException -->Line_18 $$ out.writeLong(cell.timestamp)[ FD ]
Line_2 $$ public static void serializeAsLegacyPartition(UnfilteredRowIterator partition, DataOutputPlus out, int version) throws IOException -->Line_19 $$ out.writeInt(TypeSizes.sizeof(cell.localDeletionTime))[ FD ]
Line_11 $$ for (LegacyLayout.LegacyCell cell : legacyPartition.cells) -->Line_13 $$ out.writeByte(cell.serializationFlags())[ FD ]
Line_14 $$ if (cell.isExpiring()) -->Line_15 $$ out.writeInt(cell.ttl)[ CD ]
Line_17 $$ if (cell.isTombstone()) -->Line_22 $$ if (cell.isCounterUpdate()) [ CD ]
Line_2 $$ public static void serializeAsLegacyPartition(UnfilteredRowIterator partition, DataOutputPlus out, int version) throws IOException -->Line_8 $$ legacyPartition.rangeTombstones.serialize(out, partition.metadata())[ FD ]
Line_22 $$ if (cell.isCounterUpdate()) -->Line_25 $$ ByteBufferUtil.writeWithLength(ByteBufferUtil.bytes(count), out)[ CD ]
Line_2 $$ public static void serializeAsLegacyPartition(UnfilteredRowIterator partition, DataOutputPlus out, int version) throws IOException -->Line_8 $$ legacyPartition.rangeTombstones.serialize(out, partition.metadata())[ CD ]
Line_2 $$ public static void serializeAsLegacyPartition(UnfilteredRowIterator partition, DataOutputPlus out, int version) throws IOException -->Line_13 $$ out.writeByte(cell.serializationFlags())[ FD ]
Line_14 $$ if (cell.isExpiring()) -->Line_17 $$ if (cell.isTombstone()) [ CD ]
Line_24 $$ long count = CounterContext.instance().getLocalCount(cell.value)-->Line_25 $$ ByteBufferUtil.writeWithLength(ByteBufferUtil.bytes(count), out)[ FD ]
Line_2 $$ public static void serializeAsLegacyPartition(UnfilteredRowIterator partition, DataOutputPlus out, int version) throws IOException -->Line_5 $$ LegacyLayout.LegacyUnfilteredPartition legacyPartition = LegacyLayout.fromUnfilteredRowIterator(partition)[ FD ]
Line_2 $$ public static void serializeAsLegacyPartition(UnfilteredRowIterator partition, DataOutputPlus out, int version) throws IOException -->Line_23 $$ out.writeLong(cell.timestamp)[ FD ]
Line_22 $$ if (cell.isCounterUpdate()) -->Line_27 $$ if (cell.isCounter()) [ CD ]
Line_17 $$ if (cell.isTombstone()) -->Line_19 $$ out.writeInt(TypeSizes.sizeof(cell.localDeletionTime))[ CD ]
Line_2 $$ public static void serializeAsLegacyPartition(UnfilteredRowIterator partition, DataOutputPlus out, int version) throws IOException -->Line_15 $$ out.writeInt(cell.ttl)[ FD ]
