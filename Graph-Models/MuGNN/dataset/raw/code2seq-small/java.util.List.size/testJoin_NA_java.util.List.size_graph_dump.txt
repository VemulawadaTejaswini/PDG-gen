Line_5 $$ User gavin = new User("gavin")-->Line_9 $$ gavin.getGroups().add(admins)[ FD ]
Line_3 $$ Session s = openSession()-->Line_22 $$ s.delete(gavin)[ FD ]
Line_2 $$ public void testJoin() throws HibernateException, SQLException -->Line_15 $$ s.clear()[ CD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_23 $$ t.commit()[ FD ]
Line_2 $$ public void testJoin() throws HibernateException, SQLException -->Line_21 $$ s.delete(gavin.getGroups().get(1))[ CD ]
Line_7 $$ Group plebs = new Group("plebs")-->Line_11 $$ s.persist(plebs)[ FD ]
Line_3 $$ Session s = openSession()-->Line_16 $$ gavin = (User) s.createQuery("from User u join fetch u.groups").uniqueResult()[ FD ]
Line_2 $$ public void testJoin() throws HibernateException, SQLException -->Line_24 $$ s.close()[ CD ]
Line_5 $$ User gavin = new User("gavin")-->Line_22 $$ s.delete(gavin)[ FD ]
Line_2 $$ public void testJoin() throws HibernateException, SQLException -->Line_11 $$ s.persist(plebs)[ CD ]
Line_2 $$ public void testJoin() throws HibernateException, SQLException -->Line_9 $$ gavin.getGroups().add(admins)[ CD ]
Line_3 $$ Session s = openSession()-->Line_24 $$ s.close()[ FD ]
Line_6 $$ Group admins = new Group("admins")-->Line_12 $$ s.persist(admins)[ FD ]
Line_5 $$ User gavin = new User("gavin")-->Line_10 $$ s.persist(gavin)[ FD ]
Line_2 $$ public void testJoin() throws HibernateException, SQLException -->Line_10 $$ s.persist(gavin)[ CD ]
Line_3 $$ Session s = openSession()-->Line_21 $$ s.delete(gavin.getGroups().get(1))[ FD ]
Line_2 $$ public void testJoin() throws HibernateException, SQLException -->Line_5 $$ User gavin = new User("gavin")[ CD ]
Line_6 $$ Group admins = new Group("admins")-->Line_9 $$ gavin.getGroups().add(admins)[ FD ]
Line_2 $$ public void testJoin() throws HibernateException, SQLException -->Line_14 $$ assertEquals(l.size(), 2)[ CD ]
Line_13 $$ List l = s.createQuery("from User u join u.groups g").list()-->Line_14 $$ assertEquals(l.size(), 2)[ FD ]
Line_2 $$ public void testJoin() throws HibernateException, SQLException -->Line_19 $$ assertEquals(((Group) gavin.getGroups().get(0)).getName(), "admins")[ CD ]
Line_5 $$ User gavin = new User("gavin")-->Line_19 $$ assertEquals(((Group) gavin.getGroups().get(0)).getName(), "admins")[ FD ]
Line_5 $$ User gavin = new User("gavin")-->Line_8 $$ gavin.getGroups().add(plebs)[ FD ]
Line_16 $$ gavin = (User) s.createQuery("from User u join fetch u.groups").uniqueResult()-->Line_19 $$ assertEquals(((Group) gavin.getGroups().get(0)).getName(), "admins")[ FD ]
Line_2 $$ public void testJoin() throws HibernateException, SQLException -->Line_6 $$ Group admins = new Group("admins")[ CD ]
Line_2 $$ public void testJoin() throws HibernateException, SQLException -->Line_8 $$ gavin.getGroups().add(plebs)[ CD ]
Line_7 $$ Group plebs = new Group("plebs")-->Line_8 $$ gavin.getGroups().add(plebs)[ FD ]
Line_2 $$ public void testJoin() throws HibernateException, SQLException -->Line_7 $$ Group plebs = new Group("plebs")[ CD ]
Line_2 $$ public void testJoin() throws HibernateException, SQLException -->Line_3 $$ Session s = openSession()[ CD ]
Line_2 $$ public void testJoin() throws HibernateException, SQLException -->Line_22 $$ s.delete(gavin)[ CD ]
Line_5 $$ User gavin = new User("gavin")-->Line_16 $$ gavin = (User) s.createQuery("from User u join fetch u.groups").uniqueResult()[ FD ]
Line_2 $$ public void testJoin() throws HibernateException, SQLException -->Line_18 $$ assertEquals(gavin.getGroups().size(), 2)[ CD ]
Line_3 $$ Session s = openSession()-->Line_15 $$ s.clear()[ FD ]
Line_16 $$ gavin = (User) s.createQuery("from User u join fetch u.groups").uniqueResult()-->Line_17 $$ assertTrue(Hibernate.isInitialized(gavin.getGroups()))[ FD ]
Line_3 $$ Session s = openSession()-->Line_13 $$ List l = s.createQuery("from User u join u.groups g").list()[ FD ]
Line_5 $$ User gavin = new User("gavin")-->Line_20 $$ s.delete(gavin.getGroups().get(0))[ FD ]
Line_5 $$ User gavin = new User("gavin")-->Line_21 $$ s.delete(gavin.getGroups().get(1))[ FD ]
Line_2 $$ public void testJoin() throws HibernateException, SQLException -->Line_23 $$ t.commit()[ CD ]
Line_2 $$ public void testJoin() throws HibernateException, SQLException -->Line_4 $$ Transaction t = s.beginTransaction()[ CD ]
Line_3 $$ Session s = openSession()-->Line_11 $$ s.persist(plebs)[ FD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ Transaction t = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_20 $$ s.delete(gavin.getGroups().get(0))[ FD ]
Line_16 $$ gavin = (User) s.createQuery("from User u join fetch u.groups").uniqueResult()-->Line_18 $$ assertEquals(gavin.getGroups().size(), 2)[ FD ]
Line_2 $$ public void testJoin() throws HibernateException, SQLException -->Line_16 $$ gavin = (User) s.createQuery("from User u join fetch u.groups").uniqueResult()[ CD ]
Line_5 $$ User gavin = new User("gavin")-->Line_17 $$ assertTrue(Hibernate.isInitialized(gavin.getGroups()))[ FD ]
Line_2 $$ public void testJoin() throws HibernateException, SQLException -->Line_20 $$ s.delete(gavin.getGroups().get(0))[ CD ]
Line_16 $$ gavin = (User) s.createQuery("from User u join fetch u.groups").uniqueResult()-->Line_20 $$ s.delete(gavin.getGroups().get(0))[ FD ]
Line_2 $$ public void testJoin() throws HibernateException, SQLException -->Line_17 $$ assertTrue(Hibernate.isInitialized(gavin.getGroups()))[ CD ]
Line_5 $$ User gavin = new User("gavin")-->Line_18 $$ assertEquals(gavin.getGroups().size(), 2)[ FD ]
Line_16 $$ gavin = (User) s.createQuery("from User u join fetch u.groups").uniqueResult()-->Line_21 $$ s.delete(gavin.getGroups().get(1))[ FD ]
Line_16 $$ gavin = (User) s.createQuery("from User u join fetch u.groups").uniqueResult()-->Line_22 $$ s.delete(gavin)[ FD ]
Line_3 $$ Session s = openSession()-->Line_12 $$ s.persist(admins)[ FD ]
Line_2 $$ public void testJoin() throws HibernateException, SQLException -->Line_13 $$ List l = s.createQuery("from User u join u.groups g").list()[ CD ]
Line_3 $$ Session s = openSession()-->Line_10 $$ s.persist(gavin)[ FD ]
Line_2 $$ public void testJoin() throws HibernateException, SQLException -->Line_12 $$ s.persist(admins)[ CD ]
