Line_79 $$ ConcurrentMap<String, Object> oldSPIProviderContainers = ReflectionTestUtil.getFieldValue(MPIHelperUtil.class, "_spiProviderContainers")-->Line_90 $$ ReflectionTestUtil.setFieldValue(MPIHelperUtil.class, "_spiProviderContainers", oldSPIProviderContainers)[ FD ]
Line_81 $$ ReflectionTestUtil.setFieldValue(MPIHelperUtil.class, "_spiProviderContainers", new ConcurrentHashMap<String, Object>(oldSPIProviderContainers) -->Line_85 $$ return false[ CD ]
Line_32 $$ logRecord1 = logRecords.get(0)-->Line_33 $$ Assert.assertEquals("Not registering SPI provider " + mockSPIProvider3 + " because it duplicates " + mockSPIProvider1, logRecord1.getMessage())[ FD ]
Line_24 $$ MockSPIProvider mockSPIProvider2 = new MockSPIProvider(name2)-->Line_113 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider2))[ FD ]
Line_16 $$ mockSPIProvider1 = new MockSPIProvider(name1)-->Line_17 $$ Assert.assertTrue(MPIHelperUtil.registerSPIProvider(mockSPIProvider1))[ FD ]
Line_36 $$ mockSPIProvider3 = new MockSPIProvider(name1)-->Line_64 $$ mockSPIProvider3 = new MockSPIProvider(name3)[ FD ]
Line_19 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_61 $$ Assert.assertEquals("Not unregistering unregistered SPI provider " + mockSPIProvider3, logRecord1.getMessage())[ FD ]
Line_57 $$ mockSPIProvider3 = new MockSPIProvider(name3)-->Line_58 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider3))[ FD ]
Line_29 $$ MockSPIProvider mockSPIProvider3 = new MockSPIProvider(name1)-->Line_65 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider3))[ FD ]
Line_57 $$ mockSPIProvider3 = new MockSPIProvider(name3)-->Line_65 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider3))[ FD ]
Line_60 $$ logRecord1 = logRecords.get(0)-->Line_72 $$ Assert.assertEquals("Not unregistering unregistered SPI provider " + name2, logRecord1.getMessage())[ FD ]
Line_36 $$ mockSPIProvider3 = new MockSPIProvider(name1)-->Line_37 $$ Assert.assertFalse(MPIHelperUtil.registerSPIProvider(mockSPIProvider3))[ FD ]
Line_19 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_116 $$ Assert.assertEquals("Unregistered SPI provider " + mockSPIProvider2, logRecord1.getMessage())[ FD ]
Line_19 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_72 $$ Assert.assertEquals("Not unregistering unregistered SPI provider " + name2, logRecord1.getMessage())[ FD ]
Line_60 $$ logRecord1 = logRecords.get(0)-->Line_94 $$ Assert.assertEquals("Not unregistering unregistered SPI provider " + name2, logRecord1.getMessage())[ FD ]
Line_23 $$ String name2 = "spiProvider2"-->Line_42 $$ Assert.assertSame(mockSPIProvider2, MPIHelperUtil.getSPIProvider(name2))[ FD ]
Line_64 $$ mockSPIProvider3 = new MockSPIProvider(name3)-->Line_65 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider3))[ FD ]
Line_16 $$ mockSPIProvider1 = new MockSPIProvider(name1)-->Line_182 $$ Assert.assertTrue(MPIHelperUtil.registerSPIProvider(mockSPIProvider1))[ FD ]
Line_32 $$ logRecord1 = logRecords.get(0)-->Line_71 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_32 $$ logRecord1 = logRecords.get(0)-->Line_143 $$ Throwable throwable = logRecord1.getThrown()[ FD ]
Line_24 $$ MockSPIProvider mockSPIProvider2 = new MockSPIProvider(name2)-->Line_88 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider2))[ FD ]
Line_29 $$ MockSPIProvider mockSPIProvider3 = new MockSPIProvider(name1)-->Line_58 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider3))[ FD ]
Line_19 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_201 $$ Assert.assertEquals("Unregistered SPI " + mockSPI1 + " while unregistering SPI provider " + mockSPIProvider1, logRecord1.getMessage())[ FD ]
Line_16 $$ mockSPIProvider1 = new MockSPIProvider(name1)-->Line_124 $$ Assert.assertTrue(MPIHelperUtil.registerSPIProvider(mockSPIProvider1))[ FD ]
Line_32 $$ logRecord1 = logRecords.get(0)-->Line_72 $$ Assert.assertEquals("Not unregistering unregistered SPI provider " + name2, logRecord1.getMessage())[ FD ]
Line_79 $$ ConcurrentMap<String, Object> oldSPIProviderContainers = ReflectionTestUtil.getFieldValue(MPIHelperUtil.class, "_spiProviderContainers")-->Line_108 $$ ReflectionTestUtil.setFieldValue(MPIHelperUtil.class, "_spiProviderContainers", oldSPIProviderContainers)[ FD ]
Line_19 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_142 $$ Assert.assertEquals("Unable to unregister SPI " + mockSPI1 + " while unregistering SPI provider " + mockSPIProvider1, logRecord1.getMessage())[ FD ]
Line_99 $$ ReflectionTestUtil.setFieldValue(MPIHelperUtil.class, "_spiProviderContainers", new ConcurrentHashMap<String, Object>(oldSPIProviderContainers) -->Line_103 $$ return false[ CD ]
Line_29 $$ MockSPIProvider mockSPIProvider3 = new MockSPIProvider(name1)-->Line_51 $$ MPIHelperUtil.unregisterSPIProvider(mockSPIProvider3)[ FD ]
Line_36 $$ mockSPIProvider3 = new MockSPIProvider(name1)-->Line_57 $$ mockSPIProvider3 = new MockSPIProvider(name3)[ FD ]
Line_15 $$ String name1 = "spiProvider1"-->Line_172 $$ MPIHelperUtilTestUtil.directResigterSPI(name1, mockSPI1)[ FD ]
Line_12 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.INFO)) -->Line_193 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_24 $$ MockSPIProvider mockSPIProvider2 = new MockSPIProvider(name2)-->Line_106 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider2))[ FD ]
Line_36 $$ mockSPIProvider3 = new MockSPIProvider(name1)-->Line_51 $$ MPIHelperUtil.unregisterSPIProvider(mockSPIProvider3)[ FD ]
Line_71 $$ logRecord1 = logRecords.get(0)-->Line_142 $$ Assert.assertEquals("Unable to unregister SPI " + mockSPI1 + " while unregistering SPI provider " + mockSPIProvider1, logRecord1.getMessage())[ FD ]
Line_19 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_60 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_32 $$ logRecord1 = logRecords.get(0)-->Line_201 $$ Assert.assertEquals("Unregistered SPI " + mockSPI1 + " while unregistering SPI provider " + mockSPIProvider1, logRecord1.getMessage())[ FD ]
Line_57 $$ mockSPIProvider3 = new MockSPIProvider(name3)-->Line_64 $$ mockSPIProvider3 = new MockSPIProvider(name3)[ FD ]
Line_60 $$ logRecord1 = logRecords.get(0)-->Line_61 $$ Assert.assertEquals("Not unregistering unregistered SPI provider " + mockSPIProvider3, logRecord1.getMessage())[ FD ]
Line_71 $$ logRecord1 = logRecords.get(0)-->Line_94 $$ Assert.assertEquals("Not unregistering unregistered SPI provider " + name2, logRecord1.getMessage())[ FD ]
Line_15 $$ String name1 = "spiProvider1"-->Line_41 $$ Assert.assertSame(mockSPIProvider1, MPIHelperUtil.getSPIProvider(name1))[ FD ]
Line_16 $$ mockSPIProvider1 = new MockSPIProvider(name1)-->Line_135 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider1))[ FD ]
Line_24 $$ MockSPIProvider mockSPIProvider2 = new MockSPIProvider(name2)-->Line_47 $$ Assert.assertTrue(spiProviders.contains(mockSPIProvider2))[ FD ]
Line_16 $$ mockSPIProvider1 = new MockSPIProvider(name1)-->Line_46 $$ Assert.assertTrue(spiProviders.contains(mockSPIProvider1))[ FD ]
Line_44 $$ List<SPIProvider> spiProviders = MPIHelperUtil.getSPIProviders()-->Line_45 $$ Assert.assertEquals(2, spiProviders.size())[ FD ]
Line_36 $$ mockSPIProvider3 = new MockSPIProvider(name1)-->Line_65 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider3))[ FD ]
Line_71 $$ logRecord1 = logRecords.get(0)-->Line_72 $$ Assert.assertEquals("Not unregistering unregistered SPI provider " + name2, logRecord1.getMessage())[ FD ]
Line_32 $$ logRecord1 = logRecords.get(0)-->Line_60 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_32 $$ logRecord1 = logRecords.get(0)-->Line_94 $$ Assert.assertEquals("Not unregistering unregistered SPI provider " + name2, logRecord1.getMessage())[ FD ]
Line_60 $$ logRecord1 = logRecords.get(0)-->Line_201 $$ Assert.assertEquals("Unregistered SPI " + mockSPI1 + " while unregistering SPI provider " + mockSPIProvider1, logRecord1.getMessage())[ FD ]
Line_29 $$ MockSPIProvider mockSPIProvider3 = new MockSPIProvider(name1)-->Line_64 $$ mockSPIProvider3 = new MockSPIProvider(name3)[ FD ]
Line_44 $$ List<SPIProvider> spiProviders = MPIHelperUtil.getSPIProviders()-->Line_46 $$ Assert.assertTrue(spiProviders.contains(mockSPIProvider1))[ FD ]
Line_60 $$ logRecord1 = logRecords.get(0)-->Line_142 $$ Assert.assertEquals("Unable to unregister SPI " + mockSPI1 + " while unregistering SPI provider " + mockSPIProvider1, logRecord1.getMessage())[ FD ]
Line_24 $$ MockSPIProvider mockSPIProvider2 = new MockSPIProvider(name2)-->Line_126 $$ Assert.assertTrue(MPIHelperUtil.registerSPIProvider(mockSPIProvider2))[ FD ]
Line_19 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_71 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_24 $$ MockSPIProvider mockSPIProvider2 = new MockSPIProvider(name2)-->Line_25 $$ Assert.assertTrue(MPIHelperUtil.registerSPIProvider(mockSPIProvider2))[ FD ]
Line_24 $$ MockSPIProvider mockSPIProvider2 = new MockSPIProvider(name2)-->Line_184 $$ Assert.assertTrue(MPIHelperUtil.registerSPIProvider(mockSPIProvider2))[ FD ]
Line_60 $$ logRecord1 = logRecords.get(0)-->Line_116 $$ Assert.assertEquals("Unregistered SPI provider " + mockSPIProvider2, logRecord1.getMessage())[ FD ]
Line_29 $$ MockSPIProvider mockSPIProvider3 = new MockSPIProvider(name1)-->Line_36 $$ mockSPIProvider3 = new MockSPIProvider(name1)[ FD ]
Line_60 $$ logRecord1 = logRecords.get(0)-->Line_71 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_71 $$ logRecord1 = logRecords.get(0)-->Line_143 $$ Throwable throwable = logRecord1.getThrown()[ FD ]
Line_71 $$ logRecord1 = logRecords.get(0)-->Line_201 $$ Assert.assertEquals("Unregistered SPI " + mockSPI1 + " while unregistering SPI provider " + mockSPIProvider1, logRecord1.getMessage())[ FD ]
Line_71 $$ logRecord1 = logRecords.get(0)-->Line_116 $$ Assert.assertEquals("Unregistered SPI provider " + mockSPIProvider2, logRecord1.getMessage())[ FD ]
Line_16 $$ mockSPIProvider1 = new MockSPIProvider(name1)-->Line_119 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider1))[ FD ]
Line_19 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_143 $$ Throwable throwable = logRecord1.getThrown()[ FD ]
Line_19 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_20 $$ Assert.assertEquals("Registered SPI provider " + mockSPIProvider1, logRecord1.getMessage())[ FD ]
Line_19 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_33 $$ Assert.assertEquals("Not registering SPI provider " + mockSPIProvider3 + " because it duplicates " + mockSPIProvider1, logRecord1.getMessage())[ FD ]
Line_19 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_94 $$ Assert.assertEquals("Not unregistering unregistered SPI provider " + name2, logRecord1.getMessage())[ FD ]
Line_16 $$ mockSPIProvider1 = new MockSPIProvider(name1)-->Line_41 $$ Assert.assertSame(mockSPIProvider1, MPIHelperUtil.getSPIProvider(name1))[ FD ]
Line_36 $$ mockSPIProvider3 = new MockSPIProvider(name1)-->Line_58 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider3))[ FD ]
Line_32 $$ logRecord1 = logRecords.get(0)-->Line_116 $$ Assert.assertEquals("Unregistered SPI provider " + mockSPIProvider2, logRecord1.getMessage())[ FD ]
Line_44 $$ List<SPIProvider> spiProviders = MPIHelperUtil.getSPIProviders()-->Line_47 $$ Assert.assertTrue(spiProviders.contains(mockSPIProvider2))[ FD ]
Line_29 $$ MockSPIProvider mockSPIProvider3 = new MockSPIProvider(name1)-->Line_57 $$ mockSPIProvider3 = new MockSPIProvider(name3)[ FD ]
Line_60 $$ logRecord1 = logRecords.get(0)-->Line_143 $$ Throwable throwable = logRecord1.getThrown()[ FD ]
Line_29 $$ MockSPIProvider mockSPIProvider3 = new MockSPIProvider(name1)-->Line_37 $$ Assert.assertFalse(MPIHelperUtil.registerSPIProvider(mockSPIProvider3))[ FD ]
Line_24 $$ MockSPIProvider mockSPIProvider2 = new MockSPIProvider(name2)-->Line_151 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider2))[ FD ]
Line_24 $$ MockSPIProvider mockSPIProvider2 = new MockSPIProvider(name2)-->Line_42 $$ Assert.assertSame(mockSPIProvider2, MPIHelperUtil.getSPIProvider(name2))[ FD ]
Line_32 $$ logRecord1 = logRecords.get(0)-->Line_61 $$ Assert.assertEquals("Not unregistering unregistered SPI provider " + mockSPIProvider3, logRecord1.getMessage())[ FD ]
Line_29 $$ MockSPIProvider mockSPIProvider3 = new MockSPIProvider(name1)-->Line_30 $$ Assert.assertFalse(MPIHelperUtil.registerSPIProvider(mockSPIProvider3))[ FD ]
Line_32 $$ logRecord1 = logRecords.get(0)-->Line_142 $$ Assert.assertEquals("Unable to unregister SPI " + mockSPI1 + " while unregistering SPI provider " + mockSPIProvider1, logRecord1.getMessage())[ FD ]
Line_16 $$ mockSPIProvider1 = new MockSPIProvider(name1)-->Line_194 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider1))[ FD ]
Line_24 $$ MockSPIProvider mockSPIProvider2 = new MockSPIProvider(name2)-->Line_206 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider2))[ FD ]
Line_19 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_32 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_16 $$ mockSPIProvider1 = new MockSPIProvider(name1)-->Line_160 $$ Assert.assertTrue(MPIHelperUtil.registerSPIProvider(mockSPIProvider1))[ FD ]
Line_16 $$ mockSPIProvider1 = new MockSPIProvider(name1)-->Line_174 $$ MPIHelperUtil.unregisterSPIProvider(mockSPIProvider1)[ FD ]
