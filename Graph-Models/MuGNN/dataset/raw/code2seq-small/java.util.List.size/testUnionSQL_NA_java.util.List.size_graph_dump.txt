Line_2 $$ protected void testUnionSQL(String order, int start, int end, int size, String firstType, String lastType) throws Exception -->Line_3 $$ Session session = null[ CD ]
Line_11 $$ List<Object[]> result = (List<Object[]>) QueryUtil.list(q, _sessionFactory.getDialect(), start, end, true)-->Line_13 $$ Object[] firstRow = result.get(0)[ FD ]
Line_11 $$ List<Object[]> result = (List<Object[]>) QueryUtil.list(q, _sessionFactory.getDialect(), start, end, true)-->Line_14 $$ Object[] lastRow = result.get(result.size() - 1)[ FD ]
Line_3 $$ Session session = null-->Line_10 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected void testUnionSQL(String order, int start, int end, int size, String firstType, String lastType) throws Exception -->Line_8 $$ sql += " ORDER BY type ".concat(order)[ FD ]
Line_2 $$ protected void testUnionSQL(String order, int start, int end, int size, String firstType, String lastType) throws Exception -->Line_15 $$ Assert.assertEquals(firstType, StringUtil.trim((String) firstRow[0]))[ FD ]
Line_2 $$ protected void testUnionSQL(String order, int start, int end, int size, String firstType, String lastType) throws Exception -->Line_12 $$ Assert.assertEquals(size, result.size())[ FD ]
Line_3 $$ Session session = null-->Line_18 $$ _sessionFactory.closeSession(session)[ FD ]
Line_2 $$ protected void testUnionSQL(String order, int start, int end, int size, String firstType, String lastType) throws Exception -->Line_7 $$ if (order != null) [ FD ]
Line_8 $$ sql += " ORDER BY type ".concat(order)-->Line_10 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_5 $$ session = _sessionFactory.openSession()-->Line_10 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected void testUnionSQL(String order, int start, int end, int size, String firstType, String lastType) throws Exception -->Line_16 $$ Assert.assertEquals(lastType, StringUtil.trim((String) lastRow[0]))[ FD ]
Line_6 $$ String sql = _SQL_UNION_SELECT-->Line_8 $$ sql += " ORDER BY type ".concat(order)[ FD ]
Line_11 $$ List<Object[]> result = (List<Object[]>) QueryUtil.list(q, _sessionFactory.getDialect(), start, end, true)-->Line_12 $$ Assert.assertEquals(size, result.size())[ FD ]
Line_3 $$ Session session = null-->Line_5 $$ session = _sessionFactory.openSession()[ FD ]
Line_7 $$ if (order != null) -->Line_8 $$ sql += " ORDER BY type ".concat(order)[ CD ]
Line_6 $$ String sql = _SQL_UNION_SELECT-->Line_10 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected void testUnionSQL(String order, int start, int end, int size, String firstType, String lastType) throws Exception -->Line_11 $$ List<Object[]> result = (List<Object[]>) QueryUtil.list(q, _sessionFactory.getDialect(), start, end, true)[ FD ]
Line_10 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_11 $$ List<Object[]> result = (List<Object[]>) QueryUtil.list(q, _sessionFactory.getDialect(), start, end, true)[ FD ]
Line_5 $$ session = _sessionFactory.openSession()-->Line_18 $$ _sessionFactory.closeSession(session)[ FD ]
