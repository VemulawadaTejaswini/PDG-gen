Line_13 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_15 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_8 $$ NoticeableFuture<Map<Path, Path>> noticeableFuture = _nettyRepository.getFiles(_embeddedChannel, pathMap, true)-->Line_19 $$ noticeableFuture.get()[ FD ]
Line_5 $$ Map<Path, Path> pathMap = new HashMap()-->Line_8 $$ NoticeableFuture<Map<Path, Path>> noticeableFuture = _nettyRepository.getFiles(_embeddedChannel, pathMap, true)[ FD ]
Line_5 $$ Map<Path, Path> pathMap = new HashMap()-->Line_7 $$ pathMap.put(remoteFilePath, Paths.get("localFile"))[ FD ]
Line_9 $$ Exception exception = new Exception()-->Line_22 $$ Assert.assertSame(exception, ee.getCause())[ FD ]
Line_6 $$ Path remoteFilePath = Paths.get("remoteFile")-->Line_7 $$ pathMap.put(remoteFilePath, Paths.get("localFile"))[ FD ]
Line_9 $$ Exception exception = new Exception()-->Line_10 $$ DefaultNoticeableFutureAdvice.setConvertThrowable(exception)[ FD ]
Line_13 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_14 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_6 $$ Path remoteFilePath = Paths.get("remoteFile")-->Line_12 $$ Assert.assertTrue(_asyncBroker.takeWithResult(remoteFilePath, new FileResponse(_repositoryPath, FileResponse.FILE_NOT_FOUND, -1, false)))[ FD ]
Line_15 $$ LogRecord logRecord = logRecords.get(0)-->Line_16 $$ Assert.assertEquals("Remote file remoteFile is not found", logRecord.getMessage())[ FD ]
Line_11 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyRepository.class.getName(), Level.WARNING)) -->Line_13 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
