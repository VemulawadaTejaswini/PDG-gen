Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_26 $$ assertEquals(courseExpected.getDescription(), dto.getDescription())[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_25 $$ dto = (StudentDTO) resultList.get(1)[ CD ]
Line_15 $$ List resultList = (List) results-->Line_18 $$ for (int i = 0; i < resultList.size(); i++) [ FD ]
Line_25 $$ dto = (StudentDTO) resultList.get(1)-->Line_27 $$ assertEquals(shermanExpected.getName(), dto.getName())[ FD ]
Line_8 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_10 $$ return s.createQuery("select st.name as studentName, co.description as courseDescription from Enrolment e join e.student st join e.course co order by e.studentNumber")[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_22 $$ StudentDTO dto = (StudentDTO) resultList.get(0)[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_18 $$ for (int i = 0; i < resultList.size(); i++) [ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_21 $$ assertEquals(2, resultList.size())[ CD ]
Line_2 $$ public void testMultiProjectionListThenApplyAliasToBean() throws Exception -->Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() [ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Enrolment.class, "e").createAlias("e.student", "st").createAlias("e.course", "co").setProjection(Projections.projectionList().add(Property.forName("st.name")).add(Property.forName("co.description"))).addOrder(Order.asc("e.studentNumber"))[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_27 $$ assertEquals(shermanExpected.getName(), dto.getName())[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_23 $$ assertEquals(courseExpected.getDescription(), dto.getDescription())[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_15 $$ List resultList = (List) results[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Enrolment.class, "e").createAlias("e.student", "st").createAlias("e.course", "co").setProjection(Projections.projectionList().add(Property.forName("st.name")).add(Property.forName("co.description"))).addOrder(Order.asc("e.studentNumber"))[ FD ]
Line_15 $$ List resultList = (List) results-->Line_25 $$ dto = (StudentDTO) resultList.get(1)[ FD ]
Line_15 $$ List resultList = (List) results-->Line_22 $$ StudentDTO dto = (StudentDTO) resultList.get(0)[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_10 $$ return s.createQuery("select st.name as studentName, co.description as courseDescription from Enrolment e join e.student st join e.course co order by e.studentNumber")[ FD ]
Line_22 $$ StudentDTO dto = (StudentDTO) resultList.get(0)-->Line_27 $$ assertEquals(shermanExpected.getName(), dto.getName())[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_30 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ FD ]
Line_22 $$ StudentDTO dto = (StudentDTO) resultList.get(0)-->Line_26 $$ assertEquals(courseExpected.getDescription(), dto.getDescription())[ FD ]
Line_15 $$ List resultList = (List) results-->Line_21 $$ assertEquals(2, resultList.size())[ FD ]
Line_2 $$ public void testMultiProjectionListThenApplyAliasToBean() throws Exception -->Line_30 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_17 $$ String[] aliases = new String[] [ CD ]
Line_15 $$ List resultList = (List) results-->Line_19 $$ resultList.set(i, transformer.transformTuple((Object[]) resultList.get(i), aliases))[ FD ]
Line_18 $$ for (int i = 0; i < resultList.size(); i++) -->Line_19 $$ resultList.set(i, transformer.transformTuple((Object[]) resultList.get(i), aliases))[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_24 $$ assertEquals(yogiExpected.getName(), dto.getName())[ CD ]
Line_22 $$ StudentDTO dto = (StudentDTO) resultList.get(0)-->Line_23 $$ assertEquals(courseExpected.getDescription(), dto.getDescription())[ FD ]
Line_18 $$ for (int i = 0; i < resultList.size(); i++) -->Line_19 $$ resultList.set(i, transformer.transformTuple((Object[]) resultList.get(i), aliases))[ FD ]
Line_16 $$ ResultTransformer transformer = Transformers.aliasToBean(StudentDTO.class)-->Line_19 $$ resultList.set(i, transformer.transformTuple((Object[]) resultList.get(i), aliases))[ FD ]
Line_22 $$ StudentDTO dto = (StudentDTO) resultList.get(0)-->Line_25 $$ dto = (StudentDTO) resultList.get(1)[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_16 $$ ResultTransformer transformer = Transformers.aliasToBean(StudentDTO.class)[ CD ]
Line_22 $$ StudentDTO dto = (StudentDTO) resultList.get(0)-->Line_24 $$ assertEquals(yogiExpected.getName(), dto.getName())[ FD ]
Line_17 $$ String[] aliases = new String[] -->Line_19 $$ resultList.set(i, transformer.transformTuple((Object[]) resultList.get(i), aliases))[ FD ]
Line_25 $$ dto = (StudentDTO) resultList.get(1)-->Line_26 $$ assertEquals(courseExpected.getDescription(), dto.getDescription())[ FD ]
Line_8 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_10 $$ return s.createQuery("select st.name as studentName, co.description as courseDescription from Enrolment e join e.student st join e.course co order by e.studentNumber")[ FD ]
