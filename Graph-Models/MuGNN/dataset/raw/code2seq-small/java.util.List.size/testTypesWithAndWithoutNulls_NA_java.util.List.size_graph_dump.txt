Line_23 $$ insertDML += ')'-->Line_26 $$ execute(insertDML.replace('1', '2'), values.toArray())[ FD ]
Line_8 $$ String insertDML = "INSERT INTO %s (key"-->Line_12 $$ insertDML += ", " + typeDef.columnName[ FD ]
Line_12 $$ insertDML += ", " + typeDef.columnName-->Line_24 $$ execute(insertDML, values.toArray())[ FD ]
Line_7 $$ String createTableDDL = "CREATE TABLE %s (key int PRIMARY KEY"-->Line_20 $$ createTable(createTableDDL)[ FD ]
Line_23 $$ insertDML += ')'-->Line_24 $$ execute(insertDML, values.toArray())[ FD ]
Line_2 $$ public void testTypesWithAndWithoutNulls() throws Throwable -->Line_19 $$ createTableDDL += ')'[ CD ]
Line_22 $$ insertDML += ", ?"-->Line_26 $$ execute(insertDML.replace('1', '2'), values.toArray())[ FD ]
Line_2 $$ public void testTypesWithAndWithoutNulls() throws Throwable -->Line_25 $$ for (int i = 0; i < values.size(); i++) values.set(i, null)[ CD ]
Line_22 $$ insertDML += ", ?"-->Line_24 $$ execute(insertDML, values.toArray())[ FD ]
Line_2 $$ public void testTypesWithAndWithoutNulls() throws Throwable -->Line_4 $$ TypesTestDef[] typeDefs = [ CD ]
Line_22 $$ insertDML += ", ?"-->Line_23 $$ insertDML += ')'[ FD ]
Line_9 $$ List<Object> values = new ArrayList()-->Line_25 $$ for (int i = 0; i < values.size(); i++) values.set(i, null)[ FD ]
Line_21 $$ insertDML += ") VALUES (1"-->Line_26 $$ execute(insertDML.replace('1', '2'), values.toArray())[ FD ]
Line_12 $$ insertDML += ", " + typeDef.columnName-->Line_26 $$ execute(insertDML.replace('1', '2'), values.toArray())[ FD ]
Line_8 $$ String insertDML = "INSERT INTO %s (key"-->Line_21 $$ insertDML += ") VALUES (1"[ FD ]
Line_2 $$ public void testTypesWithAndWithoutNulls() throws Throwable -->Line_9 $$ List<Object> values = new ArrayList()[ CD ]
Line_2 $$ public void testTypesWithAndWithoutNulls() throws Throwable -->Line_21 $$ insertDML += ") VALUES (1"[ CD ]
Line_2 $$ public void testTypesWithAndWithoutNulls() throws Throwable -->Line_23 $$ insertDML += ')'[ CD ]
Line_11 $$ createTableDDL += ", " + typeDef.columnName + ' ' + typeDef.tableType-->Line_19 $$ createTableDDL += ')'[ FD ]
Line_19 $$ createTableDDL += ')'-->Line_20 $$ createTable(createTableDDL)[ FD ]
Line_13 $$ String typeName = typeDef.udfType-->Line_15 $$ typeDef.fCalledOnNull = createFunction(KEYSPACE, typeName, "CREATE OR REPLACE FUNCTION %s(val " + typeName + ") " + "CALLED ON NULL INPUT " + "RETURNS text " + "LANGUAGE java\n" + "AS 'return \"called\";';")[ FD ]
Line_2 $$ public void testTypesWithAndWithoutNulls() throws Throwable -->Line_20 $$ createTable(createTableDDL)[ CD ]
Line_8 $$ String insertDML = "INSERT INTO %s (key"-->Line_22 $$ insertDML += ", ?"[ FD ]
Line_7 $$ String createTableDDL = "CREATE TABLE %s (key int PRIMARY KEY"-->Line_11 $$ createTableDDL += ", " + typeDef.columnName + ' ' + typeDef.tableType[ FD ]
Line_13 $$ String typeName = typeDef.udfType-->Line_14 $$ typeDef.fCheckArgAndReturn = createFunction(KEYSPACE, typeName, "CREATE OR REPLACE FUNCTION %s(val " + typeName + ") " + "CALLED ON NULL INPUT " + "RETURNS " + typeName + ' ' + "LANGUAGE java\n" + "AS 'return val;';")[ FD ]
Line_21 $$ insertDML += ") VALUES (1"-->Line_24 $$ execute(insertDML, values.toArray())[ FD ]
Line_21 $$ insertDML += ") VALUES (1"-->Line_22 $$ insertDML += ", ?"[ FD ]
Line_9 $$ List<Object> values = new ArrayList()-->Line_17 $$ values.add(typeDef.referenceValue)[ FD ]
Line_2 $$ public void testTypesWithAndWithoutNulls() throws Throwable -->Line_3 $$ String type = createType("CREATE TYPE %s (txt text, i int)")[ CD ]
Line_2 $$ public void testTypesWithAndWithoutNulls() throws Throwable -->Line_7 $$ String createTableDDL = "CREATE TABLE %s (key int PRIMARY KEY"[ CD ]
Line_12 $$ insertDML += ", " + typeDef.columnName-->Line_21 $$ insertDML += ") VALUES (1"[ FD ]
Line_9 $$ List<Object> values = new ArrayList()-->Line_24 $$ execute(insertDML, values.toArray())[ FD ]
Line_11 $$ createTableDDL += ", " + typeDef.columnName + ' ' + typeDef.tableType-->Line_20 $$ createTable(createTableDDL)[ FD ]
Line_2 $$ public void testTypesWithAndWithoutNulls() throws Throwable -->Line_8 $$ String insertDML = "INSERT INTO %s (key"[ CD ]
Line_8 $$ String insertDML = "INSERT INTO %s (key"-->Line_23 $$ insertDML += ')'[ FD ]
Line_12 $$ insertDML += ", " + typeDef.columnName-->Line_22 $$ insertDML += ", ?"[ FD ]
Line_9 $$ List<Object> values = new ArrayList()-->Line_26 $$ execute(insertDML.replace('1', '2'), values.toArray())[ FD ]
Line_21 $$ insertDML += ") VALUES (1"-->Line_23 $$ insertDML += ')'[ FD ]
Line_13 $$ String typeName = typeDef.udfType-->Line_16 $$ typeDef.fReturnsNullOnNull = createFunction(KEYSPACE, typeName, "CREATE OR REPLACE FUNCTION %s(val " + typeName + ") " + "RETURNS NULL ON NULL INPUT " + "RETURNS text " + "LANGUAGE java\n" + "AS 'return \"called\";';")[ FD ]
Line_7 $$ String createTableDDL = "CREATE TABLE %s (key int PRIMARY KEY"-->Line_19 $$ createTableDDL += ')'[ FD ]
Line_8 $$ String insertDML = "INSERT INTO %s (key"-->Line_24 $$ execute(insertDML, values.toArray())[ FD ]
Line_12 $$ insertDML += ", " + typeDef.columnName-->Line_23 $$ insertDML += ')'[ FD ]
Line_2 $$ public void testTypesWithAndWithoutNulls() throws Throwable -->Line_26 $$ execute(insertDML.replace('1', '2'), values.toArray())[ CD ]
Line_9 $$ List<Object> values = new ArrayList()-->Line_25 $$ values.set(i, null)[ FD ]
Line_2 $$ public void testTypesWithAndWithoutNulls() throws Throwable -->Line_24 $$ execute(insertDML, values.toArray())[ CD ]
Line_8 $$ String insertDML = "INSERT INTO %s (key"-->Line_26 $$ execute(insertDML.replace('1', '2'), values.toArray())[ FD ]
