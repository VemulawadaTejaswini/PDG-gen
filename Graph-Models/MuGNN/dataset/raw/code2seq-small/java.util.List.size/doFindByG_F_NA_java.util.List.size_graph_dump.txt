Line_2 $$ protected List<JournalArticle> doFindByG_F(long groupId, List<Long> folderIds, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_7 $$ sql = replaceStatusJoin(sql, queryDefinition)[ FD ]
Line_2 $$ protected List<JournalArticle> doFindByG_F(long groupId, List<Long> folderIds, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_17 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_15 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_20 $$ qPos.add(folderId)[ FD ]
Line_2 $$ protected List<JournalArticle> doFindByG_F(long groupId, List<Long> folderIds, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_16 $$ qPos.add(groupId)[ FD ]
Line_13 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_15 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_6 $$ String sql = CustomSQLUtil.get(FIND_BY_G_F, queryDefinition, "JournalArticle")-->Line_13 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_18 $$ for (int i = 0; i < folderIds.size(); i++) -->Line_20 $$ qPos.add(folderId)[ CD ]
Line_12 $$ sql = StringUtil.replace(sql, "[$FOLDER_ID$]", getFolderIds(folderIds, JournalArticleImpl.TABLE_NAME))-->Line_13 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_15 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_16 $$ qPos.add(groupId)[ FD ]
Line_5 $$ session = openSession()-->Line_13 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected List<JournalArticle> doFindByG_F(long groupId, List<Long> folderIds, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_8 $$ sql = CustomSQLUtil.replaceOrderBy(sql, queryDefinition.getOrderByComparator("JournalArticle"))[ FD ]
Line_7 $$ sql = replaceStatusJoin(sql, queryDefinition)-->Line_13 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_7 $$ sql = replaceStatusJoin(sql, queryDefinition)-->Line_12 $$ sql = StringUtil.replace(sql, "[$FOLDER_ID$]", getFolderIds(folderIds, JournalArticleImpl.TABLE_NAME))[ FD ]
Line_13 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_14 $$ q.addEntity(JournalArticleImpl.TABLE_NAME, JournalArticleImpl.class)[ FD ]
Line_15 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_17 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_3 $$ Session session = null-->Line_13 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_19 $$ Long folderId = folderIds.get(i)-->Line_20 $$ qPos.add(folderId)[ FD ]
Line_8 $$ sql = CustomSQLUtil.replaceOrderBy(sql, queryDefinition.getOrderByComparator("JournalArticle"))-->Line_10 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, JournalArticle.class.getName(), "JournalArticle.resourcePrimKey", groupId)[ FD ]
Line_10 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, JournalArticle.class.getName(), "JournalArticle.resourcePrimKey", groupId)-->Line_12 $$ sql = StringUtil.replace(sql, "[$FOLDER_ID$]", getFolderIds(folderIds, JournalArticleImpl.TABLE_NAME))[ FD ]
Line_3 $$ Session session = null-->Line_26 $$ closeSession(session)[ FD ]
Line_10 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, JournalArticle.class.getName(), "JournalArticle.resourcePrimKey", groupId)-->Line_13 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_13 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_22 $$ return (List<JournalArticle>) QueryUtil.list(q, getDialect(), queryDefinition.getStart(), queryDefinition.getEnd())[ FD ]
Line_6 $$ String sql = CustomSQLUtil.get(FIND_BY_G_F, queryDefinition, "JournalArticle")-->Line_10 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, JournalArticle.class.getName(), "JournalArticle.resourcePrimKey", groupId)[ FD ]
Line_2 $$ protected List<JournalArticle> doFindByG_F(long groupId, List<Long> folderIds, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_3 $$ Session session = null[ CD ]
Line_3 $$ Session session = null-->Line_5 $$ session = openSession()[ FD ]
Line_2 $$ protected List<JournalArticle> doFindByG_F(long groupId, List<Long> folderIds, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_18 $$ for (int i = 0; i < folderIds.size(); i++) [ FD ]
Line_2 $$ protected List<JournalArticle> doFindByG_F(long groupId, List<Long> folderIds, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_6 $$ String sql = CustomSQLUtil.get(FIND_BY_G_F, queryDefinition, "JournalArticle")[ FD ]
Line_5 $$ session = openSession()-->Line_26 $$ closeSession(session)[ FD ]
Line_6 $$ String sql = CustomSQLUtil.get(FIND_BY_G_F, queryDefinition, "JournalArticle")-->Line_12 $$ sql = StringUtil.replace(sql, "[$FOLDER_ID$]", getFolderIds(folderIds, JournalArticleImpl.TABLE_NAME))[ FD ]
Line_2 $$ protected List<JournalArticle> doFindByG_F(long groupId, List<Long> folderIds, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_10 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, JournalArticle.class.getName(), "JournalArticle.resourcePrimKey", groupId)[ FD ]
Line_6 $$ String sql = CustomSQLUtil.get(FIND_BY_G_F, queryDefinition, "JournalArticle")-->Line_8 $$ sql = CustomSQLUtil.replaceOrderBy(sql, queryDefinition.getOrderByComparator("JournalArticle"))[ FD ]
Line_7 $$ sql = replaceStatusJoin(sql, queryDefinition)-->Line_10 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, JournalArticle.class.getName(), "JournalArticle.resourcePrimKey", groupId)[ FD ]
Line_8 $$ sql = CustomSQLUtil.replaceOrderBy(sql, queryDefinition.getOrderByComparator("JournalArticle"))-->Line_13 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_6 $$ String sql = CustomSQLUtil.get(FIND_BY_G_F, queryDefinition, "JournalArticle")-->Line_7 $$ sql = replaceStatusJoin(sql, queryDefinition)[ FD ]
Line_18 $$ for (int i = 0; i < folderIds.size(); i++) -->Line_19 $$ Long folderId = folderIds.get(i)[ CD ]
Line_2 $$ protected List<JournalArticle> doFindByG_F(long groupId, List<Long> folderIds, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_22 $$ return (List<JournalArticle>) QueryUtil.list(q, getDialect(), queryDefinition.getStart(), queryDefinition.getEnd())[ FD ]
Line_2 $$ protected List<JournalArticle> doFindByG_F(long groupId, List<Long> folderIds, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_12 $$ sql = StringUtil.replace(sql, "[$FOLDER_ID$]", getFolderIds(folderIds, JournalArticleImpl.TABLE_NAME))[ FD ]
Line_7 $$ sql = replaceStatusJoin(sql, queryDefinition)-->Line_8 $$ sql = CustomSQLUtil.replaceOrderBy(sql, queryDefinition.getOrderByComparator("JournalArticle"))[ FD ]
Line_2 $$ protected List<JournalArticle> doFindByG_F(long groupId, List<Long> folderIds, QueryDefinition<JournalArticle> queryDefinition, boolean inlineSQLHelper) -->Line_19 $$ Long folderId = folderIds.get(i)[ FD ]
Line_18 $$ for (int i = 0; i < folderIds.size(); i++) -->Line_19 $$ Long folderId = folderIds.get(i)[ FD ]
Line_8 $$ sql = CustomSQLUtil.replaceOrderBy(sql, queryDefinition.getOrderByComparator("JournalArticle"))-->Line_12 $$ sql = StringUtil.replace(sql, "[$FOLDER_ID$]", getFolderIds(folderIds, JournalArticleImpl.TABLE_NAME))[ FD ]
Line_9 $$ if (inlineSQLHelper) -->Line_10 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, JournalArticle.class.getName(), "JournalArticle.resourcePrimKey", groupId)[ CD ]
