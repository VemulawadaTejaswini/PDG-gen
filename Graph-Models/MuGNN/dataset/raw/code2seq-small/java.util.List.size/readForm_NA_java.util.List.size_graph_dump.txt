Line_2 $$ public void readForm() throws Exception -->Line_10 $$ List<String> values = result.get("name 2")[ CD ]
Line_2 $$ public void readForm() throws Exception -->Line_9 $$ assertEquals("Invalid result", "value 1", result.getFirst("name 1"))[ CD ]
Line_7 $$ MultiValueMap<String, String> result = this.converter.read(null, inputMessage)-->Line_9 $$ assertEquals("Invalid result", "value 1", result.getFirst("name 1"))[ FD ]
Line_2 $$ public void readForm() throws Exception -->Line_8 $$ assertEquals("Invalid result", 3, result.size())[ CD ]
Line_2 $$ public void readForm() throws Exception -->Line_12 $$ assertEquals("Invalid result", "value 2+1", values.get(0))[ CD ]
Line_5 $$ MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes(iso88591))-->Line_7 $$ MultiValueMap<String, String> result = this.converter.read(null, inputMessage)[ FD ]
Line_10 $$ List<String> values = result.get("name 2")-->Line_13 $$ assertEquals("Invalid result", "value 2+2", values.get(1))[ FD ]
Line_10 $$ List<String> values = result.get("name 2")-->Line_11 $$ assertEquals("Invalid result", 2, values.size())[ FD ]
Line_10 $$ List<String> values = result.get("name 2")-->Line_12 $$ assertEquals("Invalid result", "value 2+1", values.get(0))[ FD ]
Line_2 $$ public void readForm() throws Exception -->Line_14 $$ assertNull("Invalid result", result.getFirst("name 3"))[ CD ]
Line_5 $$ MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes(iso88591))-->Line_6 $$ inputMessage.getHeaders().setContentType(new MediaType("application", "x-www-form-urlencoded", iso88591))[ FD ]
Line_2 $$ public void readForm() throws Exception -->Line_11 $$ assertEquals("Invalid result", 2, values.size())[ CD ]
Line_7 $$ MultiValueMap<String, String> result = this.converter.read(null, inputMessage)-->Line_10 $$ List<String> values = result.get("name 2")[ FD ]
Line_2 $$ public void readForm() throws Exception -->Line_5 $$ MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes(iso88591))[ CD ]
Line_2 $$ public void readForm() throws Exception -->Line_6 $$ inputMessage.getHeaders().setContentType(new MediaType("application", "x-www-form-urlencoded", iso88591))[ CD ]
Line_2 $$ public void readForm() throws Exception -->Line_3 $$ String body = "name+1=value+1&name+2=value+2%2B1&name+2=value+2%2B2&name+3"[ CD ]
Line_2 $$ public void readForm() throws Exception -->Line_7 $$ MultiValueMap<String, String> result = this.converter.read(null, inputMessage)[ CD ]
Line_3 $$ String body = "name+1=value+1&name+2=value+2%2B1&name+2=value+2%2B2&name+3"-->Line_5 $$ MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes(iso88591))[ FD ]
Line_7 $$ MultiValueMap<String, String> result = this.converter.read(null, inputMessage)-->Line_8 $$ assertEquals("Invalid result", 3, result.size())[ FD ]
Line_2 $$ public void readForm() throws Exception -->Line_13 $$ assertEquals("Invalid result", "value 2+2", values.get(1))[ CD ]
Line_2 $$ public void readForm() throws Exception -->Line_4 $$ Charset iso88591 = Charset.forName("ISO-8859-1")[ CD ]
Line_4 $$ Charset iso88591 = Charset.forName("ISO-8859-1")-->Line_5 $$ MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes(iso88591))[ FD ]
Line_7 $$ MultiValueMap<String, String> result = this.converter.read(null, inputMessage)-->Line_14 $$ assertNull("Invalid result", result.getFirst("name 3"))[ FD ]
