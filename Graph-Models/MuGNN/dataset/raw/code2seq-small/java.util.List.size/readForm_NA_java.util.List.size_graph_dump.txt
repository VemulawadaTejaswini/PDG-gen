Line_6 $$ MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes(iso88591))-->Line_8 $$ MultiValueMap<String, String> result = this.converter.read(null, inputMessage)[ FD ]
Line_4 $$ String body = "name+1=value+1&name+2=value+2%2B1&name+2=value+2%2B2&name+3"-->Line_6 $$ MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes(iso88591))[ FD ]
Line_8 $$ MultiValueMap<String, String> result = this.converter.read(null, inputMessage)-->Line_15 $$ assertNull("Invalid result", result.getFirst("name 3"))[ FD ]
Line_11 $$ List<String> values = result.get("name 2")-->Line_13 $$ assertEquals("Invalid result", "value 2+1", values.get(0))[ FD ]
Line_6 $$ MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes(iso88591))-->Line_7 $$ inputMessage.getHeaders().setContentType(new MediaType("application", "x-www-form-urlencoded", iso88591))[ FD ]
Line_5 $$ Charset iso88591 = Charset.forName("ISO-8859-1")-->Line_6 $$ MockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes(iso88591))[ FD ]
Line_8 $$ MultiValueMap<String, String> result = this.converter.read(null, inputMessage)-->Line_10 $$ assertEquals("Invalid result", "value 1", result.getFirst("name 1"))[ FD ]
Line_8 $$ MultiValueMap<String, String> result = this.converter.read(null, inputMessage)-->Line_11 $$ List<String> values = result.get("name 2")[ FD ]
Line_11 $$ List<String> values = result.get("name 2")-->Line_12 $$ assertEquals("Invalid result", 2, values.size())[ FD ]
Line_8 $$ MultiValueMap<String, String> result = this.converter.read(null, inputMessage)-->Line_9 $$ assertEquals("Invalid result", 3, result.size())[ FD ]
Line_11 $$ List<String> values = result.get("name 2")-->Line_14 $$ assertEquals("Invalid result", "value 2+2", values.get(1))[ FD ]
