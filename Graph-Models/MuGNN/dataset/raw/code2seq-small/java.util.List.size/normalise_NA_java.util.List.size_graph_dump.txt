Line_13 $$ for (String segment : segments) -->Line_18 $$ if (!segment.equals(".") && segment.length() > 0) [ FD ]
Line_24 $$ if (needLeadingSeparator) -->Line_25 $$ resolvedPath = File.separator + resolvedPath[ CD ]
Line_15 $$ if (!path.isEmpty()) -->Line_16 $$ path.remove(path.size() - 1)[ CD ]
Line_13 $$ for (String segment : segments) -->Line_14 $$ if (segment.equals("..")) [ FD ]
Line_41 $$ if (child == null) -->Line_42 $$ current = new File(current, CollectionUtils.join(File.separator, path.subList(pos, path.size())))[ CD ]
Line_28 $$ if (fileSystem.isCaseSensitive()) -->Line_29 $$ return candidate[ CD ]
Line_39 $$ for (int pos = 0; pos < path.size(); pos++) -->Line_42 $$ current = new File(current, CollectionUtils.join(File.separator, path.subList(pos, path.size())))[ FD ]
Line_12 $$ List<String> path = new ArrayList<String>(segments.length)-->Line_22 $$ String resolvedPath = CollectionUtils.join(File.separator, path)[ FD ]
Line_12 $$ List<String> path = new ArrayList<String>(segments.length)-->Line_15 $$ if (!path.isEmpty()) [ FD ]
Line_18 $$ if (!segment.equals(".") && segment.length() > 0) -->Line_19 $$ path.add(segment)[ CD ]
Line_12 $$ List<String> path = new ArrayList<String>(segments.length)-->Line_39 $$ for (int pos = 0; pos < path.size(); pos++) [ FD ]
Line_40 $$ File child = findChild(current, path.get(pos))-->Line_41 $$ if (child == null) [ FD ]
Line_12 $$ List<String> path = new ArrayList<String>(segments.length)-->Line_19 $$ path.add(segment)[ FD ]
Line_39 $$ for (int pos = 0; pos < path.size(); pos++) -->Line_40 $$ File child = findChild(current, path.get(pos))[ FD ]
Line_39 $$ for (int pos = 0; pos < path.size(); pos++) -->Line_45 $$ current = child[ CD ]
Line_13 $$ for (String segment : segments) -->Line_19 $$ path.add(segment)[ FD ]
Line_40 $$ File child = findChild(current, path.get(pos))-->Line_45 $$ current = child[ FD ]
Line_22 $$ String resolvedPath = CollectionUtils.join(File.separator, path)-->Line_25 $$ resolvedPath = File.separator + resolvedPath[ FD ]
Line_12 $$ List<String> path = new ArrayList<String>(segments.length)-->Line_16 $$ path.remove(path.size() - 1)[ FD ]
Line_45 $$ current = child-->Line_40 $$ File child = findChild(current, path.get(pos))[ FD ]
Line_42 $$ current = new File(current, CollectionUtils.join(File.separator, path.subList(pos, path.size())))-->Line_40 $$ File child = findChild(current, path.get(pos))[ FD ]
Line_42 $$ current = new File(current, CollectionUtils.join(File.separator, path.subList(pos, path.size())))-->Line_45 $$ current = child[ FD ]
Line_39 $$ for (int pos = 0; pos < path.size(); pos++) -->Line_40 $$ File child = findChild(current, path.get(pos))[ CD ]
Line_14 $$ if (segment.equals("..")) -->Line_15 $$ if (!path.isEmpty()) [ CD ]
Line_12 $$ List<String> path = new ArrayList<String>(segments.length)-->Line_40 $$ File child = findChild(current, path.get(pos))[ FD ]
Line_39 $$ for (int pos = 0; pos < path.size(); pos++) -->Line_41 $$ if (child == null) [ CD ]
Line_12 $$ List<String> path = new ArrayList<String>(segments.length)-->Line_42 $$ current = new File(current, CollectionUtils.join(File.separator, path.subList(pos, path.size())))[ FD ]
Line_14 $$ if (segment.equals("..")) -->Line_18 $$ if (!segment.equals(".") && segment.length() > 0) [ CD ]
Line_33 $$ if (candidate.getPath().equalsIgnoreCase(canonical.getPath())) -->Line_34 $$ return canonical[ CD ]
Line_27 $$ File candidate = new File(resolvedPath)-->Line_33 $$ if (candidate.getPath().equalsIgnoreCase(canonical.getPath())) [ FD ]
