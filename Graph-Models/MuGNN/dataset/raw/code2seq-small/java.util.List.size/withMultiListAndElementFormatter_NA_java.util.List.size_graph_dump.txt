Line_3 $$ List list = new ArrayList()-->Line_6 $$ this.bean.setSomeList(list)[ FD ]
Line_8 $$ FormattingConversionService cs = new FormattingConversionService()-->Line_9 $$ cs.addFormatterForFieldType(Country.class, new Formatter<Country>() [ FD ]
Line_9 $$ cs.addFormatterForFieldType(Country.class, new Formatter<Country>() -->Line_11 $$ return object.getName()[ CD ]
Line_7 $$ BeanPropertyBindingResult errors = new BeanPropertyBindingResult(this.bean, COMMAND_NAME)-->Line_17 $$ errors.initConversion(cs)[ FD ]
Line_7 $$ BeanPropertyBindingResult errors = new BeanPropertyBindingResult(this.bean, COMMAND_NAME)-->Line_18 $$ exposeBindingResult(errors)[ FD ]
Line_2 $$ public void withMultiListAndElementFormatter() throws Exception -->Line_21 $$ this.tag.setItemValue("isoCode")[ CD ]
Line_2 $$ public void withMultiListAndElementFormatter() throws Exception -->Line_39 $$ assertEquals("AT node not selected", "selected", e.attribute("selected").getValue())[ CD ]
Line_2 $$ public void withMultiListAndElementFormatter() throws Exception -->Line_7 $$ BeanPropertyBindingResult errors = new BeanPropertyBindingResult(this.bean, COMMAND_NAME)[ CD ]
Line_2 $$ public void withMultiListAndElementFormatter() throws Exception -->Line_23 $$ assertEquals(Tag.SKIP_BODY, result)[ CD ]
Line_8 $$ FormattingConversionService cs = new FormattingConversionService()-->Line_17 $$ errors.initConversion(cs)[ FD ]
Line_2 $$ public void withMultiListAndElementFormatter() throws Exception -->Line_5 $$ list.add(Country.COUNTRY_AT)[ CD ]
Line_2 $$ public void withMultiListAndElementFormatter() throws Exception -->Line_32 $$ assertEquals("someList", selectElement.attribute("name").getValue())[ CD ]
Line_2 $$ public void withMultiListAndElementFormatter() throws Exception -->Line_27 $$ Document document = reader.read(new StringReader(output))[ CD ]
Line_2 $$ public void withMultiListAndElementFormatter() throws Exception -->Line_33 $$ List children = selectElement.elements()[ CD ]
Line_2 $$ public void withMultiListAndElementFormatter() throws Exception -->Line_29 $$ assertEquals(2, rootElement.elements().size())[ CD ]
Line_9 $$ cs.addFormatterForFieldType(Country.class, new Formatter<Country>() -->Line_14 $$ return new Country(text, text)[ CD ]
Line_2 $$ public void withMultiListAndElementFormatter() throws Exception -->Line_8 $$ FormattingConversionService cs = new FormattingConversionService()[ CD ]
Line_2 $$ public void withMultiListAndElementFormatter() throws Exception -->Line_18 $$ exposeBindingResult(errors)[ CD ]
Line_2 $$ public void withMultiListAndElementFormatter() throws Exception -->Line_3 $$ List list = new ArrayList()[ CD ]
Line_2 $$ public void withMultiListAndElementFormatter() throws Exception -->Line_30 $$ Element selectElement = rootElement.element("select")[ CD ]
Line_2 $$ public void withMultiListAndElementFormatter() throws Exception -->Line_4 $$ list.add(Country.COUNTRY_UK)[ CD ]
Line_3 $$ List list = new ArrayList()-->Line_5 $$ list.add(Country.COUNTRY_AT)[ FD ]
Line_2 $$ public void withMultiListAndElementFormatter() throws Exception -->Line_17 $$ errors.initConversion(cs)[ CD ]
Line_3 $$ List list = new ArrayList()-->Line_4 $$ list.add(Country.COUNTRY_UK)[ FD ]
Line_2 $$ public void withMultiListAndElementFormatter() throws Exception -->Line_37 $$ assertEquals("United Kingdom", e.getText())[ CD ]
Line_2 $$ public void withMultiListAndElementFormatter() throws Exception -->Line_22 $$ int result = this.tag.doStartTag()[ CD ]
Line_2 $$ public void withMultiListAndElementFormatter() throws Exception -->Line_9 $$ cs.addFormatterForFieldType(Country.class, new Formatter<Country>() [ CD ]
Line_9 $$ cs.addFormatterForFieldType(Country.class, new Formatter<Country>() -->Line_11 $$ return object.getName()[ FD ]
Line_2 $$ public void withMultiListAndElementFormatter() throws Exception -->Line_36 $$ assertEquals("UK node not selected", "selected", e.attribute("selected").getValue())[ CD ]
Line_2 $$ public void withMultiListAndElementFormatter() throws Exception -->Line_40 $$ assertEquals("Austria", e.getText())[ CD ]
Line_2 $$ public void withMultiListAndElementFormatter() throws Exception -->Line_19 $$ this.tag.setPath("someList")[ CD ]
Line_2 $$ public void withMultiListAndElementFormatter() throws Exception -->Line_31 $$ assertEquals("select", selectElement.getName())[ CD ]
Line_2 $$ public void withMultiListAndElementFormatter() throws Exception -->Line_24 $$ String output = getOutput()[ CD ]
Line_2 $$ public void withMultiListAndElementFormatter() throws Exception -->Line_20 $$ this.tag.setItems(Country.getCountries())[ CD ]
Line_2 $$ public void withMultiListAndElementFormatter() throws Exception -->Line_34 $$ assertEquals("Incorrect number of children", 4, children.size())[ CD ]
Line_2 $$ public void withMultiListAndElementFormatter() throws Exception -->Line_28 $$ Element rootElement = document.getRootElement()[ CD ]
Line_2 $$ public void withMultiListAndElementFormatter() throws Exception -->Line_6 $$ this.bean.setSomeList(list)[ CD ]
