Line_8 $$ InetAddress to = liveEndpoints.get(index)-->Line_11 $$ MessagingService.instance().sendOneWay(message, to)[ FD ]
Line_2 $$ private boolean sendGossip(MessageOut<GossipDigestSyn> message, Set<InetAddress> epSet) -->Line_7 $$ int index = (size == 1) ? 0 : random.nextInt(size)[ CD ]
Line_3 $$ List<InetAddress> liveEndpoints = ImmutableList.copyOf(epSet)-->Line_8 $$ InetAddress to = liveEndpoints.get(index)[ FD ]
Line_2 $$ private boolean sendGossip(MessageOut<GossipDigestSyn> message, Set<InetAddress> epSet) -->Line_4 $$ int size = liveEndpoints.size()[ CD ]
Line_7 $$ int index = (size == 1) ? 0 : random.nextInt(size)-->Line_8 $$ InetAddress to = liveEndpoints.get(index)[ FD ]
Line_8 $$ InetAddress to = liveEndpoints.get(index)-->Line_12 $$ return seeds.contains(to)[ FD ]
Line_2 $$ private boolean sendGossip(MessageOut<GossipDigestSyn> message, Set<InetAddress> epSet) -->Line_5 $$ if (size < 1)[ CD ]
Line_9 $$ if (logger.isTraceEnabled())-->Line_10 $$ logger.trace("Sending a GossipDigestSyn to [ CD ]
Line_2 $$ private boolean sendGossip(MessageOut<GossipDigestSyn> message, Set<InetAddress> epSet) -->Line_8 $$ InetAddress to = liveEndpoints.get(index)[ CD ]
Line_5 $$ if (size < 1)-->Line_6 $$ return false[ CD ]
Line_8 $$ InetAddress to = liveEndpoints.get(index)-->Line_10 $$ logger.trace("Sending a GossipDigestSyn to [ FD ]
Line_2 $$ private boolean sendGossip(MessageOut<GossipDigestSyn> message, Set<InetAddress> epSet) -->Line_11 $$ MessagingService.instance().sendOneWay(message, to)[ CD ]
Line_2 $$ private boolean sendGossip(MessageOut<GossipDigestSyn> message, Set<InetAddress> epSet) -->Line_3 $$ List<InetAddress> liveEndpoints = ImmutableList.copyOf(epSet)[ FD ]
Line_2 $$ private boolean sendGossip(MessageOut<GossipDigestSyn> message, Set<InetAddress> epSet) -->Line_11 $$ MessagingService.instance().sendOneWay(message, to)[ FD ]
Line_4 $$ int size = liveEndpoints.size()-->Line_7 $$ int index = (size == 1) ? 0 : random.nextInt(size)[ FD ]
Line_4 $$ int size = liveEndpoints.size()-->Line_5 $$ if (size < 1)[ FD ]
Line_3 $$ List<InetAddress> liveEndpoints = ImmutableList.copyOf(epSet)-->Line_4 $$ int size = liveEndpoints.size()[ FD ]
Line_2 $$ private boolean sendGossip(MessageOut<GossipDigestSyn> message, Set<InetAddress> epSet) -->Line_9 $$ if (logger.isTraceEnabled())[ CD ]
Line_2 $$ private boolean sendGossip(MessageOut<GossipDigestSyn> message, Set<InetAddress> epSet) -->Line_12 $$ return seeds.contains(to)[ CD ]
Line_2 $$ private boolean sendGossip(MessageOut<GossipDigestSyn> message, Set<InetAddress> epSet) -->Line_3 $$ List<InetAddress> liveEndpoints = ImmutableList.copyOf(epSet)[ CD ]
