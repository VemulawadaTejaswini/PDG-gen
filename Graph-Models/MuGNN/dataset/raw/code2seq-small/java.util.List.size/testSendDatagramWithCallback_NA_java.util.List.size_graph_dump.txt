Line_2 $$ public void testSendDatagramWithCallback() throws Exception -->Line_14 $$ Assert.assertEquals(_TYPE, receiveDatagram.getType())[ CD ]
Line_11 $$ Datagram receiveDatagram = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_15 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()[ FD ]
Line_27 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_45 $$ _selectorIntraband.sendDatagram(registrationReference, datagram, attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_27 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_30 $$ Assert.assertSame(attachment, recordCompletionHandler.getAttachment())[ FD ]
Line_19 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_28 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, _data), attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_19 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_29 $$ recordCompletionHandler.waitUntilTimeouted(selector)[ FD ]
Line_2 $$ public void testSendDatagramWithCallback() throws Exception -->Line_9 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()[ CD ]
Line_18 $$ List<LogRecord> logRecords = captureHandler1.getLogRecords()-->Line_31 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_19 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_48 $$ recordCompletionHandler.waitUntilTimeouted(selector)[ FD ]
Line_9 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_10 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, _data), attachment, EnumSet.of(CompletionType.SUBMITTED), recordCompletionHandler)[ FD ]
Line_9 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_12 $$ recordCompletionHandler.waitUntilSubmitted()[ FD ]
Line_9 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_20 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, _data), attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_18 $$ List<LogRecord> logRecords = captureHandler1.getLogRecords()-->Line_25 $$ IntrabandTestUtil.assertMessageStartWith(logRecords.get(0), "Removed timeout response waiting datagram")[ FD ]
Line_18 $$ List<LogRecord> logRecords = captureHandler1.getLogRecords()-->Line_26 $$ logRecords = captureHandler1.resetLogLevel(Level.OFF)[ FD ]
Line_35 $$ recordCompletionHandler = new RecordCompletionHandler<Object>() -->Line_45 $$ _selectorIntraband.sendDatagram(registrationReference, datagram, attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_21 $$ Selector selector = _selectorIntraband.selector-->Line_48 $$ recordCompletionHandler.waitUntilTimeouted(selector)[ FD ]
Line_2 $$ public void testSendDatagramWithCallback() throws Exception -->Line_15 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()[ CD ]
Line_27 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_29 $$ recordCompletionHandler.waitUntilTimeouted(selector)[ FD ]
Line_9 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_45 $$ _selectorIntraband.sendDatagram(registrationReference, datagram, attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_3 $$ Pipe readPipe = Pipe.open()-->Line_7 $$ RegistrationReference registrationReference = _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())[ FD ]
Line_8 $$ Object attachment = new Object()-->Line_23 $$ Assert.assertSame(attachment, recordCompletionHandler.getAttachment())[ FD ]
Line_9 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_35 $$ recordCompletionHandler = new RecordCompletionHandler<Object>() [ FD ]
Line_35 $$ recordCompletionHandler = new RecordCompletionHandler<Object>() -->Line_37 $$ super.timedOut(attachment)[ FD ]
Line_7 $$ RegistrationReference registrationReference = _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())-->Line_10 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, _data), attachment, EnumSet.of(CompletionType.SUBMITTED), recordCompletionHandler)[ FD ]
Line_2 $$ public void testSendDatagramWithCallback() throws Exception -->Line_16 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ CD ]
Line_2 $$ public void testSendDatagramWithCallback() throws Exception -->Line_12 $$ recordCompletionHandler.waitUntilSubmitted()[ CD ]
Line_9 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_13 $$ Assert.assertSame(attachment, recordCompletionHandler.getAttachment())[ FD ]
Line_27 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_35 $$ recordCompletionHandler = new RecordCompletionHandler<Object>() [ FD ]
Line_19 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_45 $$ _selectorIntraband.sendDatagram(registrationReference, datagram, attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_19 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_35 $$ recordCompletionHandler = new RecordCompletionHandler<Object>() [ FD ]
Line_7 $$ RegistrationReference registrationReference = _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())-->Line_45 $$ _selectorIntraband.sendDatagram(registrationReference, datagram, attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_18 $$ List<LogRecord> logRecords = captureHandler1.getLogRecords()-->Line_24 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_27 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_28 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, _data), attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_8 $$ Object attachment = new Object()-->Line_45 $$ _selectorIntraband.sendDatagram(registrationReference, datagram, attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_8 $$ Object attachment = new Object()-->Line_20 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, _data), attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_5 $$ GatheringByteChannel gatheringByteChannel = writePipe.sink()-->Line_59 $$ gatheringByteChannel.close()[ FD ]
Line_8 $$ Object attachment = new Object()-->Line_37 $$ super.timedOut(attachment)[ FD ]
Line_2 $$ public void testSendDatagramWithCallback() throws Exception -->Line_5 $$ GatheringByteChannel gatheringByteChannel = writePipe.sink()[ CD ]
Line_17 $$ try (CaptureHandler captureHandler1 = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.WARNING)) -->Line_34 $$ List<LogRecord> logRecords1 = captureHandler1.getLogRecords()[ FD ]
Line_6 $$ ScatteringByteChannel scatteringByteChannel = readPipe.source()-->Line_60 $$ scatteringByteChannel.close()[ FD ]
Line_8 $$ Object attachment = new Object()-->Line_30 $$ Assert.assertSame(attachment, recordCompletionHandler.getAttachment())[ FD ]
Line_4 $$ Pipe writePipe = Pipe.open()-->Line_7 $$ RegistrationReference registrationReference = _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())[ FD ]
Line_8 $$ Object attachment = new Object()-->Line_13 $$ Assert.assertSame(attachment, recordCompletionHandler.getAttachment())[ FD ]
Line_21 $$ Selector selector = _selectorIntraband.selector-->Line_29 $$ recordCompletionHandler.waitUntilTimeouted(selector)[ FD ]
Line_3 $$ Pipe readPipe = Pipe.open()-->Line_6 $$ ScatteringByteChannel scatteringByteChannel = readPipe.source()[ FD ]
Line_35 $$ recordCompletionHandler = new RecordCompletionHandler<Object>() -->Line_37 $$ super.timedOut(attachment)[ CD ]
Line_19 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_27 $$ recordCompletionHandler = new RecordCompletionHandler()[ FD ]
Line_19 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_23 $$ Assert.assertSame(attachment, recordCompletionHandler.getAttachment())[ FD ]
Line_35 $$ recordCompletionHandler = new RecordCompletionHandler<Object>() -->Line_48 $$ recordCompletionHandler.waitUntilTimeouted(selector)[ FD ]
Line_4 $$ Pipe writePipe = Pipe.open()-->Line_5 $$ GatheringByteChannel gatheringByteChannel = writePipe.sink()[ FD ]
Line_15 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()-->Line_16 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_9 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_28 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, _data), attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_2 $$ public void testSendDatagramWithCallback() throws Exception -->Line_10 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, _data), attachment, EnumSet.of(CompletionType.SUBMITTED), recordCompletionHandler)[ CD ]
Line_19 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_20 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, _data), attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_6 $$ ScatteringByteChannel scatteringByteChannel = readPipe.source()-->Line_11 $$ Datagram receiveDatagram = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)[ FD ]
Line_9 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_29 $$ recordCompletionHandler.waitUntilTimeouted(selector)[ FD ]
Line_2 $$ public void testSendDatagramWithCallback() throws Exception -->Line_6 $$ ScatteringByteChannel scatteringByteChannel = readPipe.source()[ CD ]
Line_27 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_48 $$ recordCompletionHandler.waitUntilTimeouted(selector)[ FD ]
Line_11 $$ Datagram receiveDatagram = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_14 $$ Assert.assertEquals(_TYPE, receiveDatagram.getType())[ FD ]
Line_34 $$ List<LogRecord> logRecords1 = captureHandler1.getLogRecords()-->Line_57 $$ Assert.assertEquals(1, logRecords1.size())[ FD ]
Line_2 $$ public void testSendDatagramWithCallback() throws Exception -->Line_7 $$ RegistrationReference registrationReference = _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())[ CD ]
Line_9 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_19 $$ recordCompletionHandler = new RecordCompletionHandler()[ FD ]
Line_2 $$ public void testSendDatagramWithCallback() throws Exception -->Line_8 $$ Object attachment = new Object()[ CD ]
Line_8 $$ Object attachment = new Object()-->Line_10 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, _data), attachment, EnumSet.of(CompletionType.SUBMITTED), recordCompletionHandler)[ FD ]
Line_21 $$ Selector selector = _selectorIntraband.selector-->Line_22 $$ recordCompletionHandler.waitUntilTimeouted(selector)[ FD ]
Line_19 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_30 $$ Assert.assertSame(attachment, recordCompletionHandler.getAttachment())[ FD ]
Line_21 $$ Selector selector = _selectorIntraband.selector-->Line_56 $$ Assert.assertFalse(selector.isOpen())[ FD ]
Line_7 $$ RegistrationReference registrationReference = _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())-->Line_20 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, _data), attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_17 $$ try (CaptureHandler captureHandler1 = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.WARNING)) -->Line_18 $$ List<LogRecord> logRecords = captureHandler1.getLogRecords()[ FD ]
Line_8 $$ Object attachment = new Object()-->Line_28 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, _data), attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_7 $$ RegistrationReference registrationReference = _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())-->Line_28 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, _data), attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_2 $$ public void testSendDatagramWithCallback() throws Exception -->Line_13 $$ Assert.assertSame(attachment, recordCompletionHandler.getAttachment())[ CD ]
Line_26 $$ logRecords = captureHandler1.resetLogLevel(Level.OFF)-->Line_31 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_2 $$ public void testSendDatagramWithCallback() throws Exception -->Line_4 $$ Pipe writePipe = Pipe.open()[ CD ]
Line_9 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_30 $$ Assert.assertSame(attachment, recordCompletionHandler.getAttachment())[ FD ]
Line_19 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_22 $$ recordCompletionHandler.waitUntilTimeouted(selector)[ FD ]
Line_9 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_27 $$ recordCompletionHandler = new RecordCompletionHandler()[ FD ]
Line_34 $$ List<LogRecord> logRecords1 = captureHandler1.getLogRecords()-->Line_58 $$ IntrabandTestUtil.assertMessageStartWith(logRecords1.get(0), SelectorIntraband.class + ".threadFactory-1 exiting exceptionally")[ FD ]
Line_17 $$ try (CaptureHandler captureHandler1 = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.WARNING)) -->Line_26 $$ logRecords = captureHandler1.resetLogLevel(Level.OFF)[ FD ]
Line_2 $$ public void testSendDatagramWithCallback() throws Exception -->Line_3 $$ Pipe readPipe = Pipe.open()[ CD ]
Line_9 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_22 $$ recordCompletionHandler.waitUntilTimeouted(selector)[ FD ]
Line_9 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_23 $$ Assert.assertSame(attachment, recordCompletionHandler.getAttachment())[ FD ]
Line_9 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_48 $$ recordCompletionHandler.waitUntilTimeouted(selector)[ FD ]
Line_2 $$ public void testSendDatagramWithCallback() throws Exception -->Line_11 $$ Datagram receiveDatagram = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)[ CD ]
