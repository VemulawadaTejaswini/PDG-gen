Line_13 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_28 $$ Assert.assertSame(attachment, recordCompletionHandler.getAttachment())[ FD ]
Line_24 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_33 $$ recordCompletionHandler = new RecordCompletionHandler()[ FD ]
Line_26 $$ Selector selector = _selectorIntraband.selector-->Line_27 $$ recordCompletionHandler.waitUntilTimeouted(selector)[ FD ]
Line_24 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_34 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, _data), attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_26 $$ Selector selector = _selectorIntraband.selector-->Line_65 $$ Assert.assertFalse(selector.isOpen())[ FD ]
Line_10 $$ ScatteringByteChannel scatteringByteChannel = readPipe.source()-->Line_15 $$ Datagram receiveDatagram = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)[ FD ]
Line_10 $$ ScatteringByteChannel scatteringByteChannel = readPipe.source()-->Line_69 $$ scatteringByteChannel.close()[ FD ]
Line_24 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_25 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, _data), attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_11 $$ RegistrationReference registrationReference = _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())-->Line_34 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, _data), attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_21 $$ try (CaptureHandler captureHandler1 = JDKLoggerTestUtil.configureJDKLogger(BaseIntraband.class.getName(), Level.WARNING)) -->Line_41 $$ List<LogRecord> logRecords1 = captureHandler1.getLogRecords()[ FD ]
Line_33 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_35 $$ recordCompletionHandler.waitUntilTimeouted(selector)[ FD ]
Line_24 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_42 $$ recordCompletionHandler = new RecordCompletionHandler<Object>() [ FD ]
Line_13 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_24 $$ recordCompletionHandler = new RecordCompletionHandler()[ FD ]
Line_42 $$ recordCompletionHandler = new RecordCompletionHandler<Object>() -->Line_54 $$ _selectorIntraband.sendDatagram(registrationReference, datagram, attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_11 $$ RegistrationReference registrationReference = _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())-->Line_14 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, _data), attachment, EnumSet.of(CompletionType.SUBMITTED), recordCompletionHandler)[ FD ]
Line_11 $$ RegistrationReference registrationReference = _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())-->Line_54 $$ _selectorIntraband.sendDatagram(registrationReference, datagram, attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_26 $$ Selector selector = _selectorIntraband.selector-->Line_57 $$ recordCompletionHandler.waitUntilTimeouted(selector)[ FD ]
Line_12 $$ Object attachment = new Object()-->Line_25 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, _data), attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_13 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_54 $$ _selectorIntraband.sendDatagram(registrationReference, datagram, attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_33 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_42 $$ recordCompletionHandler = new RecordCompletionHandler<Object>() [ FD ]
Line_12 $$ Object attachment = new Object()-->Line_34 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, _data), attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_12 $$ Object attachment = new Object()-->Line_17 $$ Assert.assertSame(attachment, recordCompletionHandler.getAttachment())[ FD ]
Line_12 $$ Object attachment = new Object()-->Line_28 $$ Assert.assertSame(attachment, recordCompletionHandler.getAttachment())[ FD ]
Line_13 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_36 $$ Assert.assertSame(attachment, recordCompletionHandler.getAttachment())[ FD ]
Line_13 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_35 $$ recordCompletionHandler.waitUntilTimeouted(selector)[ FD ]
Line_13 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_57 $$ recordCompletionHandler.waitUntilTimeouted(selector)[ FD ]
Line_12 $$ Object attachment = new Object()-->Line_14 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, _data), attachment, EnumSet.of(CompletionType.SUBMITTED), recordCompletionHandler)[ FD ]
Line_24 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_54 $$ _selectorIntraband.sendDatagram(registrationReference, datagram, attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_24 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_35 $$ recordCompletionHandler.waitUntilTimeouted(selector)[ FD ]
Line_33 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_54 $$ _selectorIntraband.sendDatagram(registrationReference, datagram, attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_15 $$ Datagram receiveDatagram = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_18 $$ Assert.assertEquals(_TYPE, receiveDatagram.getType())[ FD ]
Line_13 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_33 $$ recordCompletionHandler = new RecordCompletionHandler()[ FD ]
Line_13 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_14 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, _data), attachment, EnumSet.of(CompletionType.SUBMITTED), recordCompletionHandler)[ FD ]
Line_33 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_36 $$ Assert.assertSame(attachment, recordCompletionHandler.getAttachment())[ FD ]
Line_24 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_27 $$ recordCompletionHandler.waitUntilTimeouted(selector)[ FD ]
Line_15 $$ Datagram receiveDatagram = IntrabandTestUtil.readDatagramFully(scatteringByteChannel)-->Line_19 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()[ FD ]
Line_42 $$ recordCompletionHandler = new RecordCompletionHandler<Object>() -->Line_57 $$ recordCompletionHandler.waitUntilTimeouted(selector)[ FD ]
Line_13 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_42 $$ recordCompletionHandler = new RecordCompletionHandler<Object>() [ FD ]
Line_12 $$ Object attachment = new Object()-->Line_46 $$ super.timedOut(attachment)[ FD ]
Line_41 $$ List<LogRecord> logRecords1 = captureHandler1.getLogRecords()-->Line_66 $$ Assert.assertEquals(1, logRecords1.size())[ FD ]
Line_24 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_28 $$ Assert.assertSame(attachment, recordCompletionHandler.getAttachment())[ FD ]
Line_42 $$ recordCompletionHandler = new RecordCompletionHandler<Object>() -->Line_46 $$ super.timedOut(attachment)[ FD ]
Line_13 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_17 $$ Assert.assertSame(attachment, recordCompletionHandler.getAttachment())[ FD ]
Line_24 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_36 $$ Assert.assertSame(attachment, recordCompletionHandler.getAttachment())[ FD ]
Line_42 $$ recordCompletionHandler = new RecordCompletionHandler<Object>() -->Line_46 $$ super.timedOut(attachment)[ CD ]
Line_13 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_27 $$ recordCompletionHandler.waitUntilTimeouted(selector)[ FD ]
Line_41 $$ List<LogRecord> logRecords1 = captureHandler1.getLogRecords()-->Line_67 $$ IntrabandTestUtil.assertMessageStartWith(logRecords1.get(0), SelectorIntraband.class + ".threadFactory-1 exiting exceptionally")[ FD ]
Line_13 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_25 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, _data), attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_8 $$ Pipe writePipe = Pipe.open()-->Line_11 $$ RegistrationReference registrationReference = _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())[ FD ]
Line_11 $$ RegistrationReference registrationReference = _selectorIntraband.registerChannel(writePipe.source(), readPipe.sink())-->Line_25 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, _data), attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_9 $$ GatheringByteChannel gatheringByteChannel = writePipe.sink()-->Line_68 $$ gatheringByteChannel.close()[ FD ]
Line_19 $$ ByteBuffer dataByteBuffer = receiveDatagram.getDataByteBuffer()-->Line_20 $$ Assert.assertArrayEquals(_data, dataByteBuffer.array())[ FD ]
Line_33 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_34 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, _data), attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_33 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_57 $$ recordCompletionHandler.waitUntilTimeouted(selector)[ FD ]
Line_24 $$ recordCompletionHandler = new RecordCompletionHandler()-->Line_57 $$ recordCompletionHandler.waitUntilTimeouted(selector)[ FD ]
Line_13 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_16 $$ recordCompletionHandler.waitUntilSubmitted()[ FD ]
Line_12 $$ Object attachment = new Object()-->Line_54 $$ _selectorIntraband.sendDatagram(registrationReference, datagram, attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_12 $$ Object attachment = new Object()-->Line_36 $$ Assert.assertSame(attachment, recordCompletionHandler.getAttachment())[ FD ]
Line_8 $$ Pipe writePipe = Pipe.open()-->Line_9 $$ GatheringByteChannel gatheringByteChannel = writePipe.sink()[ FD ]
Line_13 $$ RecordCompletionHandler<Object> recordCompletionHandler = new RecordCompletionHandler()-->Line_34 $$ _selectorIntraband.sendDatagram(registrationReference, Datagram.createRequestDatagram(_TYPE, _data), attachment, EnumSet.of(CompletionType.DELIVERED), recordCompletionHandler, 10, TimeUnit.MILLISECONDS)[ FD ]
Line_26 $$ Selector selector = _selectorIntraband.selector-->Line_35 $$ recordCompletionHandler.waitUntilTimeouted(selector)[ FD ]
