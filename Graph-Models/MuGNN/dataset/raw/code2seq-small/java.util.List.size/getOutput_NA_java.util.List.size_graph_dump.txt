Line_7 $$ PageBuilder pageBuilder = new PageBuilder(types)-->Line_8 $$ pageBuilder.declarePosition()[ FD ]
Line_9 $$ for (int i = 0; i < aggregates.size(); i++) -->Line_11 $$ BlockBuilder blockBuilder = pageBuilder.getBlockBuilder(i)[ FD ]
Line_2 $$ public Page getOutput() -->Line_15 $$ return pageBuilder.build()[ CD ]
Line_2 $$ public Page getOutput() -->Line_3 $$ if (state != State.HAS_OUTPUT) [ CD ]
Line_10 $$ Aggregator aggregator = aggregates.get(i)-->Line_12 $$ aggregator.evaluate(blockBuilder)[ FD ]
Line_3 $$ if (state != State.HAS_OUTPUT) -->Line_4 $$ return null[ CD ]
Line_9 $$ for (int i = 0; i < aggregates.size(); i++) -->Line_10 $$ Aggregator aggregator = aggregates.get(i)[ CD ]
Line_11 $$ BlockBuilder blockBuilder = pageBuilder.getBlockBuilder(i)-->Line_12 $$ aggregator.evaluate(blockBuilder)[ FD ]
Line_7 $$ PageBuilder pageBuilder = new PageBuilder(types)-->Line_11 $$ BlockBuilder blockBuilder = pageBuilder.getBlockBuilder(i)[ FD ]
Line_9 $$ for (int i = 0; i < aggregates.size(); i++) -->Line_10 $$ Aggregator aggregator = aggregates.get(i)[ FD ]
Line_2 $$ public Page getOutput() -->Line_6 $$ List<Type> types = aggregates.stream().map(Aggregator::<>getType).collect(toImmutableList())[ CD ]
Line_2 $$ public Page getOutput() -->Line_9 $$ for (int i = 0; i < aggregates.size(); i++) [ CD ]
Line_9 $$ for (int i = 0; i < aggregates.size(); i++) -->Line_12 $$ aggregator.evaluate(blockBuilder)[ CD ]
Line_7 $$ PageBuilder pageBuilder = new PageBuilder(types)-->Line_15 $$ return pageBuilder.build()[ FD ]
Line_2 $$ public Page getOutput() -->Line_7 $$ PageBuilder pageBuilder = new PageBuilder(types)[ CD ]
Line_2 $$ public Page getOutput() -->Line_8 $$ pageBuilder.declarePosition()[ CD ]
Line_9 $$ for (int i = 0; i < aggregates.size(); i++) -->Line_11 $$ BlockBuilder blockBuilder = pageBuilder.getBlockBuilder(i)[ CD ]
