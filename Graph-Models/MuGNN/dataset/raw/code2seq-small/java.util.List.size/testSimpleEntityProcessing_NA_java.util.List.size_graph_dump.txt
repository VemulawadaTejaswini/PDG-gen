Line_2 $$ public void testSimpleEntityProcessing() throws Exception -->Line_7 $$ session.getTransaction().commit()[ CD ]
Line_2 $$ public void testSimpleEntityProcessing() throws Exception -->Line_12 $$ final String sql = queryDetails.getSqlStatement()[ CD ]
Line_2 $$ public void testSimpleEntityProcessing() throws Exception -->Line_6 $$ session.save(new SimpleEntity(1, "the only"))[ CD ]
Line_4 $$ Session session = openSession()-->Line_8 $$ session.close()[ FD ]
Line_17 $$ workSession.doWork(new Work() -->Line_20 $$ PreparedStatement ps = connection.prepareStatement(sql)[ FD ]
Line_17 $$ workSession.doWork(new Work() -->Line_21 $$ ps.setInt(1, 1)[ CD ]
Line_17 $$ workSession.doWork(new Work() -->Line_22 $$ ResultSet resultSet = ps.executeQuery()[ CD ]
Line_17 $$ workSession.doWork(new Work() -->Line_28 $$ resultSet.close()[ CD ]
Line_15 $$ final Session workSession = openSession()-->Line_17 $$ workSession.doWork(new Work() [ FD ]
Line_11 $$ final LoadQueryDetails queryDetails = Helper.INSTANCE.buildLoadQueryDetails(plan, sessionFactory())-->Line_13 $$ final ResultSetProcessor resultSetProcessor = queryDetails.getResultSetProcessor()[ FD ]
Line_12 $$ final String sql = queryDetails.getSqlStatement()-->Line_20 $$ PreparedStatement ps = connection.prepareStatement(sql)[ FD ]
Line_14 $$ final List results = new ArrayList()-->Line_23 $$ results.addAll(resultSetProcessor.extractResults(resultSet, (SessionImplementor) workSession, new QueryParameters(), new NamedParameterContext() [ FD ]
Line_22 $$ ResultSet resultSet = ps.executeQuery()-->Line_23 $$ results.addAll(resultSetProcessor.extractResults(resultSet, (SessionImplementor) workSession, new QueryParameters(), new NamedParameterContext() [ FD ]
Line_17 $$ workSession.doWork(new Work() -->Line_23 $$ results.addAll(resultSetProcessor.extractResults(resultSet, (SessionImplementor) workSession, new QueryParameters(), new NamedParameterContext() [ CD ]
Line_2 $$ public void testSimpleEntityProcessing() throws Exception -->Line_17 $$ workSession.doWork(new Work() [ CD ]
Line_2 $$ public void testSimpleEntityProcessing() throws Exception -->Line_36 $$ assertEquals(1, workEntity.id.intValue())[ CD ]
Line_2 $$ public void testSimpleEntityProcessing() throws Exception -->Line_42 $$ session.beginTransaction()[ CD ]
Line_10 $$ final LoadPlan plan = Helper.INSTANCE.buildLoadPlan(sessionFactory(), entityPersister)-->Line_11 $$ final LoadQueryDetails queryDetails = Helper.INSTANCE.buildLoadQueryDetails(plan, sessionFactory())[ FD ]
Line_2 $$ public void testSimpleEntityProcessing() throws Exception -->Line_35 $$ SimpleEntity workEntity = ExtraAssertions.assertTyping(SimpleEntity.class, result)[ CD ]
Line_3 $$ final EntityPersister entityPersister = sessionFactory().getEntityPersister(SimpleEntity.class.getName())-->Line_10 $$ final LoadPlan plan = Helper.INSTANCE.buildLoadPlan(sessionFactory(), entityPersister)[ FD ]
Line_2 $$ public void testSimpleEntityProcessing() throws Exception -->Line_15 $$ final Session workSession = openSession()[ CD ]
Line_2 $$ public void testSimpleEntityProcessing() throws Exception -->Line_33 $$ Object result = results.get(0)[ CD ]
Line_14 $$ final List results = new ArrayList()-->Line_33 $$ Object result = results.get(0)[ FD ]
Line_2 $$ public void testSimpleEntityProcessing() throws Exception -->Line_4 $$ Session session = openSession()[ CD ]
Line_2 $$ public void testSimpleEntityProcessing() throws Exception -->Line_5 $$ session.beginTransaction()[ CD ]
Line_17 $$ workSession.doWork(new Work() -->Line_20 $$ PreparedStatement ps = connection.prepareStatement(sql)[ CD ]
Line_23 $$ results.addAll(resultSetProcessor.extractResults(resultSet, (SessionImplementor) workSession, new QueryParameters(), new NamedParameterContext() -->Line_25 $$ return new int[0][ CD ]
Line_17 $$ workSession.doWork(new Work() -->Line_29 $$ ps.close()[ CD ]
Line_11 $$ final LoadQueryDetails queryDetails = Helper.INSTANCE.buildLoadQueryDetails(plan, sessionFactory())-->Line_12 $$ final String sql = queryDetails.getSqlStatement()[ FD ]
Line_4 $$ Session session = openSession()-->Line_43 $$ session.createQuery("delete SimpleEntity").executeUpdate()[ FD ]
Line_20 $$ PreparedStatement ps = connection.prepareStatement(sql)-->Line_21 $$ ps.setInt(1, 1)[ FD ]
Line_20 $$ PreparedStatement ps = connection.prepareStatement(sql)-->Line_22 $$ ResultSet resultSet = ps.executeQuery()[ FD ]
Line_4 $$ Session session = openSession()-->Line_45 $$ session.close()[ FD ]
Line_2 $$ public void testSimpleEntityProcessing() throws Exception -->Line_41 $$ session = openSession()[ CD ]
Line_22 $$ ResultSet resultSet = ps.executeQuery()-->Line_28 $$ resultSet.close()[ FD ]
Line_2 $$ public void testSimpleEntityProcessing() throws Exception -->Line_8 $$ session.close()[ CD ]
Line_2 $$ public void testSimpleEntityProcessing() throws Exception -->Line_43 $$ session.createQuery("delete SimpleEntity").executeUpdate()[ CD ]
Line_2 $$ public void testSimpleEntityProcessing() throws Exception -->Line_10 $$ final LoadPlan plan = Helper.INSTANCE.buildLoadPlan(sessionFactory(), entityPersister)[ CD ]
Line_4 $$ Session session = openSession()-->Line_6 $$ session.save(new SimpleEntity(1, "the only"))[ FD ]
Line_2 $$ public void testSimpleEntityProcessing() throws Exception -->Line_38 $$ workSession.getTransaction().commit()[ CD ]
Line_2 $$ public void testSimpleEntityProcessing() throws Exception -->Line_45 $$ session.close()[ CD ]
Line_4 $$ Session session = openSession()-->Line_5 $$ session.beginTransaction()[ FD ]
Line_2 $$ public void testSimpleEntityProcessing() throws Exception -->Line_44 $$ session.getTransaction().commit()[ CD ]
Line_2 $$ public void testSimpleEntityProcessing() throws Exception -->Line_3 $$ final EntityPersister entityPersister = sessionFactory().getEntityPersister(SimpleEntity.class.getName())[ CD ]
Line_2 $$ public void testSimpleEntityProcessing() throws Exception -->Line_11 $$ final LoadQueryDetails queryDetails = Helper.INSTANCE.buildLoadQueryDetails(plan, sessionFactory())[ CD ]
Line_12 $$ final String sql = queryDetails.getSqlStatement()-->Line_19 $$ ((SessionImplementor) workSession).getFactory().getServiceRegistry().getService(JdbcServices.class).getSqlStatementLogger().logStatement(sql)[ FD ]
Line_20 $$ PreparedStatement ps = connection.prepareStatement(sql)-->Line_29 $$ ps.close()[ FD ]
Line_2 $$ public void testSimpleEntityProcessing() throws Exception -->Line_34 $$ assertNotNull(result)[ CD ]
Line_2 $$ public void testSimpleEntityProcessing() throws Exception -->Line_37 $$ assertEquals("the only", workEntity.name)[ CD ]
Line_15 $$ final Session workSession = openSession()-->Line_39 $$ workSession.close()[ FD ]
Line_15 $$ final Session workSession = openSession()-->Line_16 $$ workSession.beginTransaction()[ FD ]
Line_4 $$ Session session = openSession()-->Line_44 $$ session.getTransaction().commit()[ FD ]
Line_4 $$ Session session = openSession()-->Line_7 $$ session.getTransaction().commit()[ FD ]
Line_14 $$ final List results = new ArrayList()-->Line_32 $$ assertEquals(1, results.size())[ FD ]
Line_2 $$ public void testSimpleEntityProcessing() throws Exception -->Line_16 $$ workSession.beginTransaction()[ CD ]
Line_17 $$ workSession.doWork(new Work() -->Line_19 $$ ((SessionImplementor) workSession).getFactory().getServiceRegistry().getService(JdbcServices.class).getSqlStatementLogger().logStatement(sql)[ CD ]
Line_15 $$ final Session workSession = openSession()-->Line_38 $$ workSession.getTransaction().commit()[ FD ]
Line_2 $$ public void testSimpleEntityProcessing() throws Exception -->Line_39 $$ workSession.close()[ CD ]
Line_13 $$ final ResultSetProcessor resultSetProcessor = queryDetails.getResultSetProcessor()-->Line_23 $$ results.addAll(resultSetProcessor.extractResults(resultSet, (SessionImplementor) workSession, new QueryParameters(), new NamedParameterContext() [ FD ]
Line_2 $$ public void testSimpleEntityProcessing() throws Exception -->Line_13 $$ final ResultSetProcessor resultSetProcessor = queryDetails.getResultSetProcessor()[ CD ]
Line_2 $$ public void testSimpleEntityProcessing() throws Exception -->Line_14 $$ final List results = new ArrayList()[ CD ]
Line_2 $$ public void testSimpleEntityProcessing() throws Exception -->Line_32 $$ assertEquals(1, results.size())[ CD ]
Line_4 $$ Session session = openSession()-->Line_42 $$ session.beginTransaction()[ FD ]
