Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_16 $$ Assert.assertEquals("Proceed with SPI shutdown", logRecord.getMessage())[ FD ]
Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_12 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_8 $$ SPIShutdownHook spiShutdownHook = _mockRemoteSPI.new SPIShutdownHook()-->Line_10 $$ spiShutdownHook.run()[ FD ]
Line_15 $$ logRecord = logRecords.get(1)-->Line_16 $$ Assert.assertEquals("Proceed with SPI shutdown", logRecord.getMessage())[ FD ]
Line_7 $$ Future<?> future = actionOnMPIWaiting(false)-->Line_18 $$ Assert.assertNull(future.get())[ FD ]
Line_2 $$ public void testSPIShutdownHookRun5() throws Exception -->Line_8 $$ SPIShutdownHook spiShutdownHook = _mockRemoteSPI.new SPIShutdownHook()[ CD ]
Line_2 $$ public void testSPIShutdownHookRun5() throws Exception -->Line_19 $$ unexported()[ CD ]
Line_2 $$ public void testSPIShutdownHookRun5() throws Exception -->Line_18 $$ Assert.assertNull(future.get())[ CD ]
Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_15 $$ logRecord = logRecords.get(1)[ FD ]
Line_2 $$ public void testSPIShutdownHookRun5() throws Exception -->Line_6 $$ UnicastRemoteObject.exportObject(_mockRemoteSPI, 0)[ CD ]
Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_13 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_2 $$ public void testSPIShutdownHookRun5() throws Exception -->Line_5 $$ _mockRemoteSPI.registrationReference = mockRegistrationReference(false)[ CD ]
Line_2 $$ public void testSPIShutdownHookRun5() throws Exception -->Line_4 $$ _mockRemoteSPI.countDownLatch = new CountDownLatch(1)[ CD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(RemoteSPI.class.getName(), Level.ALL)) -->Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_15 $$ logRecord = logRecords.get(1)[ FD ]
Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_14 $$ Assert.assertEquals("Wait up to " + Long.MAX_VALUE + " ms for MPI shutdown request", logRecord.getMessage())[ FD ]
Line_2 $$ public void testSPIShutdownHookRun5() throws Exception -->Line_7 $$ Future<?> future = actionOnMPIWaiting(false)[ CD ]
