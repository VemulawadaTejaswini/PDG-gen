Line_63 $$ Module module = orphanModules.get(i)-->Line_65 $$ toRemove.add(module)[ FD ]
Line_28 $$ final CheckBoxList<Module> orphanModulesList = new CheckBoxList<Module>()-->Line_30 $$ orphanModulesList.setItems(orphanModules, new Function<Module, String>() [ FD ]
Line_28 $$ final CheckBoxList<Module> orphanModulesList = new CheckBoxList<Module>()-->Line_40 $$ orphanModulesList.setBorder(IdeBorderFactory.createEmptyBorder(8))[ FD ]
Line_64 $$ if (orphanModulesList.isItemSelected(i)) -->Line_65 $$ toRemove.add(module)[ CD ]
Line_22 $$ List<Module> toRemove = ContainerUtil.newSmartList()-->Line_65 $$ toRemove.add(module)[ FD ]
Line_23 $$ if (ApplicationManager.getApplication().isHeadlessEnvironment()) -->Line_29 $$ orphanModulesList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION)[ CD ]
Line_26 $$ final JPanel content = new JPanel(new GridBagLayout())-->Line_27 $$ content.add(new JLabel(ExternalSystemBundle.message("orphan.modules.text", externalSystemId.getReadableName())), ExternalSystemUiUtil.getFillLineConstraints(0))[ FD ]
Line_62 $$ for (int i = 0; i < orphanModules.size(); i++) -->Line_63 $$ Module module = orphanModules.get(i)[ CD ]
Line_23 $$ if (ApplicationManager.getApplication().isHeadlessEnvironment()) -->Line_42 $$ content.setBorder(IdeBorderFactory.createEmptyBorder(0, 0, 8, 0))[ CD ]
Line_23 $$ if (ApplicationManager.getApplication().isHeadlessEnvironment()) -->Line_24 $$ toRemove.addAll(orphanModules)[ CD ]
Line_23 $$ if (ApplicationManager.getApplication().isHeadlessEnvironment()) -->Line_41 $$ content.add(orphanModulesList, ExternalSystemUiUtil.getFillLineConstraints(0))[ CD ]
Line_22 $$ List<Module> toRemove = ContainerUtil.newSmartList()-->Line_24 $$ toRemove.addAll(orphanModules)[ FD ]
Line_23 $$ if (ApplicationManager.getApplication().isHeadlessEnvironment()) -->Line_27 $$ content.add(new JLabel(ExternalSystemBundle.message("orphan.modules.text", externalSystemId.getReadableName())), ExternalSystemUiUtil.getFillLineConstraints(0))[ CD ]
Line_22 $$ List<Module> toRemove = ContainerUtil.newSmartList()-->Line_69 $$ result.consume(toRemove)[ FD ]
Line_23 $$ if (ApplicationManager.getApplication().isHeadlessEnvironment()) -->Line_61 $$ dialog.showAndGet()[ CD ]
Line_23 $$ if (ApplicationManager.getApplication().isHeadlessEnvironment()) -->Line_40 $$ orphanModulesList.setBorder(IdeBorderFactory.createEmptyBorder(8))[ CD ]
Line_18 $$ ExternalSystemApiUtil.executeOnEdt(true, new Runnable() -->Line_23 $$ if (ApplicationManager.getApplication().isHeadlessEnvironment()) [ CD ]
Line_43 $$ DialogWrapper dialog = new DialogWrapper(project) -->Line_58 $$ return new Action[] [ CD ]
Line_62 $$ for (int i = 0; i < orphanModules.size(); i++) -->Line_64 $$ if (orphanModulesList.isItemSelected(i)) [ FD ]
Line_23 $$ if (ApplicationManager.getApplication().isHeadlessEnvironment()) -->Line_26 $$ final JPanel content = new JPanel(new GridBagLayout())[ CD ]
Line_26 $$ final JPanel content = new JPanel(new GridBagLayout())-->Line_41 $$ content.add(orphanModulesList, ExternalSystemUiUtil.getFillLineConstraints(0))[ FD ]
Line_62 $$ for (int i = 0; i < orphanModules.size(); i++) -->Line_63 $$ Module module = orphanModules.get(i)[ FD ]
Line_28 $$ final CheckBoxList<Module> orphanModulesList = new CheckBoxList<Module>()-->Line_41 $$ content.add(orphanModulesList, ExternalSystemUiUtil.getFillLineConstraints(0))[ FD ]
Line_30 $$ orphanModulesList.setItems(orphanModules, new Function<Module, String>() -->Line_65 $$ toRemove.add(module)[ FD ]
Line_26 $$ final JPanel content = new JPanel(new GridBagLayout())-->Line_42 $$ content.setBorder(IdeBorderFactory.createEmptyBorder(0, 0, 8, 0))[ FD ]
Line_28 $$ final CheckBoxList<Module> orphanModulesList = new CheckBoxList<Module>()-->Line_38 $$ orphanModulesList.setItemSelected(module, true)[ FD ]
Line_30 $$ orphanModulesList.setItems(orphanModules, new Function<Module, String>() -->Line_38 $$ orphanModulesList.setItemSelected(module, true)[ FD ]
Line_62 $$ for (int i = 0; i < orphanModules.size(); i++) -->Line_64 $$ if (orphanModulesList.isItemSelected(i)) [ CD ]
Line_30 $$ orphanModulesList.setItems(orphanModules, new Function<Module, String>() -->Line_34 $$ return module.getName()[ FD ]
Line_43 $$ DialogWrapper dialog = new DialogWrapper(project) -->Line_53 $$ return new JBScrollPane(content)[ CD ]
Line_23 $$ if (ApplicationManager.getApplication().isHeadlessEnvironment()) -->Line_30 $$ orphanModulesList.setItems(orphanModules, new Function<Module, String>() [ CD ]
Line_28 $$ final CheckBoxList<Module> orphanModulesList = new CheckBoxList<Module>()-->Line_29 $$ orphanModulesList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION)[ FD ]
Line_18 $$ ExternalSystemApiUtil.executeOnEdt(true, new Runnable() -->Line_22 $$ List<Module> toRemove = ContainerUtil.newSmartList()[ CD ]
Line_23 $$ if (ApplicationManager.getApplication().isHeadlessEnvironment()) -->Line_28 $$ final CheckBoxList<Module> orphanModulesList = new CheckBoxList<Module>()[ CD ]
Line_30 $$ orphanModulesList.setItems(orphanModules, new Function<Module, String>() -->Line_34 $$ return module.getName()[ CD ]
Line_23 $$ if (ApplicationManager.getApplication().isHeadlessEnvironment()) -->Line_62 $$ for (int i = 0; i < orphanModules.size(); i++) [ CD ]
Line_28 $$ final CheckBoxList<Module> orphanModulesList = new CheckBoxList<Module>()-->Line_64 $$ if (orphanModulesList.isItemSelected(i)) [ FD ]
Line_18 $$ ExternalSystemApiUtil.executeOnEdt(true, new Runnable() -->Line_69 $$ result.consume(toRemove)[ CD ]
