Line_19 $$ Map shermanMap = (Map) resultList.get(1)-->Line_27 $$ assertSame(((Map) resultList.get(0)).get("c"), shermanMap.get("c"))[ FD ]
Line_8 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_10 $$ return s.createQuery("from Student s left join s.enrolments e left join e.course c order by s.studentNumber").setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_20 $$ assertEquals(3, shermanMap.size())[ CD ]
Line_17 $$ Map yogiMap = (Map) resultList.get(0)-->Line_21 $$ assertEquals(yogiExpected, yogiMap.get("s"))[ FD ]
Line_19 $$ Map shermanMap = (Map) resultList.get(1)-->Line_24 $$ assertEquals(shermanExpected, shermanMap.get("s"))[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_10 $$ return s.createQuery("from Student s left join s.enrolments e left join e.course c order by s.studentNumber").setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_19 $$ Map shermanMap = (Map) resultList.get(1)[ CD ]
Line_17 $$ Map yogiMap = (Map) resultList.get(0)-->Line_23 $$ assertEquals(courseExpected, yogiMap.get("c"))[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_23 $$ assertEquals(courseExpected, yogiMap.get("c"))[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_26 $$ assertEquals(courseExpected, shermanMap.get("c"))[ CD ]
Line_15 $$ List resultList = (List) results-->Line_17 $$ Map yogiMap = (Map) resultList.get(0)[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_17 $$ Map yogiMap = (Map) resultList.get(0)[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_18 $$ assertEquals(3, yogiMap.size())[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_24 $$ assertEquals(shermanExpected, shermanMap.get("s"))[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_16 $$ assertEquals(2, resultList.size())[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Student.class, "s").createAlias("s.enrolments", "e", CriteriaSpecification.LEFT_JOIN).createAlias("e.course", "c", CriteriaSpecification.LEFT_JOIN).setResultTransformer(CriteriaSpecification.ALIAS_TO_ENTITY_MAP).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_2 $$ public void testAliasToEntityMapNoProjectionList() throws Exception -->Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() [ CD ]
Line_17 $$ Map yogiMap = (Map) resultList.get(0)-->Line_22 $$ assertEquals(yogiEnrolmentExpected, yogiMap.get("e"))[ FD ]
Line_2 $$ public void testAliasToEntityMapNoProjectionList() throws Exception -->Line_30 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_15 $$ List resultList = (List) results[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_21 $$ assertEquals(yogiExpected, yogiMap.get("s"))[ CD ]
Line_17 $$ Map yogiMap = (Map) resultList.get(0)-->Line_18 $$ assertEquals(3, yogiMap.size())[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_27 $$ assertSame(((Map) resultList.get(0)).get("c"), shermanMap.get("c"))[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_30 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_22 $$ assertEquals(yogiEnrolmentExpected, yogiMap.get("e"))[ CD ]
Line_8 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_10 $$ return s.createQuery("from Student s left join s.enrolments e left join e.course c order by s.studentNumber").setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ CD ]
Line_19 $$ Map shermanMap = (Map) resultList.get(1)-->Line_20 $$ assertEquals(3, shermanMap.size())[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_25 $$ assertEquals(shermanEnrolmentExpected, shermanMap.get("e"))[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Student.class, "s").createAlias("s.enrolments", "e", CriteriaSpecification.LEFT_JOIN).createAlias("e.course", "c", CriteriaSpecification.LEFT_JOIN).setResultTransformer(CriteriaSpecification.ALIAS_TO_ENTITY_MAP).addOrder(Order.asc("s.studentNumber"))[ CD ]
Line_15 $$ List resultList = (List) results-->Line_16 $$ assertEquals(2, resultList.size())[ FD ]
Line_19 $$ Map shermanMap = (Map) resultList.get(1)-->Line_25 $$ assertEquals(shermanEnrolmentExpected, shermanMap.get("e"))[ FD ]
Line_15 $$ List resultList = (List) results-->Line_19 $$ Map shermanMap = (Map) resultList.get(1)[ FD ]
Line_15 $$ List resultList = (List) results-->Line_27 $$ assertSame(((Map) resultList.get(0)).get("c"), shermanMap.get("c"))[ FD ]
Line_19 $$ Map shermanMap = (Map) resultList.get(1)-->Line_26 $$ assertEquals(courseExpected, shermanMap.get("c"))[ FD ]
