Line_24 $$ Map shermanMap = (Map) resultList.get(1)-->Line_29 $$ assertEquals(shermanExpected, shermanMap.get("s"))[ FD ]
Line_20 $$ List resultList = (List) results-->Line_22 $$ Map yogiMap = (Map) resultList.get(0)[ FD ]
Line_22 $$ Map yogiMap = (Map) resultList.get(0)-->Line_27 $$ assertEquals(yogiEnrolmentExpected, yogiMap.get("e"))[ FD ]
Line_24 $$ Map shermanMap = (Map) resultList.get(1)-->Line_31 $$ assertEquals(courseExpected, shermanMap.get("c"))[ FD ]
Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_26 $$ assertEquals(yogiExpected, yogiMap.get("s"))[ CD ]
Line_20 $$ List resultList = (List) results-->Line_32 $$ assertSame(((Map) resultList.get(0)).get("c"), shermanMap.get("c"))[ FD ]
Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_23 $$ assertEquals(3, yogiMap.size())[ CD ]
Line_2 $$ public void testAliasToEntityMapNoProjectionList() throws Exception -->Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() [ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_7 $$ return s.createCriteria(Student.class, "s").createAlias("s.enrolments", "e", CriteriaSpecification.LEFT_JOIN).createAlias("e.course", "c", CriteriaSpecification.LEFT_JOIN).setResultTransformer(CriteriaSpecification.ALIAS_TO_ENTITY_MAP).addOrder(Order.asc("s.studentNumber"))[ CD ]
Line_20 $$ List resultList = (List) results-->Line_21 $$ assertEquals(2, resultList.size())[ FD ]
Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_24 $$ Map shermanMap = (Map) resultList.get(1)[ CD ]
Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_20 $$ List resultList = (List) results[ CD ]
Line_22 $$ Map yogiMap = (Map) resultList.get(0)-->Line_26 $$ assertEquals(yogiExpected, yogiMap.get("s"))[ FD ]
Line_24 $$ Map shermanMap = (Map) resultList.get(1)-->Line_25 $$ assertEquals(3, shermanMap.size())[ FD ]
Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_27 $$ assertEquals(yogiEnrolmentExpected, yogiMap.get("e"))[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_35 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ FD ]
Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_30 $$ assertEquals(shermanEnrolmentExpected, shermanMap.get("e"))[ CD ]
Line_10 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_14 $$ return s.createQuery("from Student s left join s.enrolments e left join e.course c order by s.studentNumber").setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ CD ]
Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_21 $$ assertEquals(2, resultList.size())[ CD ]
Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_32 $$ assertSame(((Map) resultList.get(0)).get("c"), shermanMap.get("c"))[ CD ]
Line_24 $$ Map shermanMap = (Map) resultList.get(1)-->Line_32 $$ assertSame(((Map) resultList.get(0)).get("c"), shermanMap.get("c"))[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_14 $$ return s.createQuery("from Student s left join s.enrolments e left join e.course c order by s.studentNumber").setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ FD ]
Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_29 $$ assertEquals(shermanExpected, shermanMap.get("s"))[ CD ]
Line_2 $$ public void testAliasToEntityMapNoProjectionList() throws Exception -->Line_35 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ CD ]
Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_22 $$ Map yogiMap = (Map) resultList.get(0)[ CD ]
Line_10 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_14 $$ return s.createQuery("from Student s left join s.enrolments e left join e.course c order by s.studentNumber").setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ FD ]
Line_22 $$ Map yogiMap = (Map) resultList.get(0)-->Line_28 $$ assertEquals(courseExpected, yogiMap.get("c"))[ FD ]
Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_28 $$ assertEquals(courseExpected, yogiMap.get("c"))[ CD ]
Line_24 $$ Map shermanMap = (Map) resultList.get(1)-->Line_30 $$ assertEquals(shermanEnrolmentExpected, shermanMap.get("e"))[ FD ]
Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_31 $$ assertEquals(courseExpected, shermanMap.get("c"))[ CD ]
Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_25 $$ assertEquals(3, shermanMap.size())[ CD ]
Line_20 $$ List resultList = (List) results-->Line_24 $$ Map shermanMap = (Map) resultList.get(1)[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_7 $$ return s.createCriteria(Student.class, "s").createAlias("s.enrolments", "e", CriteriaSpecification.LEFT_JOIN).createAlias("e.course", "c", CriteriaSpecification.LEFT_JOIN).setResultTransformer(CriteriaSpecification.ALIAS_TO_ENTITY_MAP).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_22 $$ Map yogiMap = (Map) resultList.get(0)-->Line_23 $$ assertEquals(3, yogiMap.size())[ FD ]
