Line_2 $$ private int[] executeBatchInternal(final List<List<Object>> batchValues) -->Line_6 $$ return getJdbcTemplate().batchUpdate(getInsertString(), new BatchPreparedStatementSetter() [ CD ]
Line_6 $$ return getJdbcTemplate().batchUpdate(getInsertString(), new BatchPreparedStatementSetter() -->Line_8 $$ setParameterValues(ps, batchValues.get(i), getInsertTypes())[ CD ]
Line_2 $$ private int[] executeBatchInternal(final List<List<Object>> batchValues) -->Line_4 $$ logger.debug("Executing statement " + getInsertString() + " with batch of size: " + batchValues.size())[ FD ]
Line_6 $$ return getJdbcTemplate().batchUpdate(getInsertString(), new BatchPreparedStatementSetter() -->Line_8 $$ setParameterValues(ps, batchValues.get(i), getInsertTypes())[ FD ]
Line_6 $$ return getJdbcTemplate().batchUpdate(getInsertString(), new BatchPreparedStatementSetter() -->Line_11 $$ return batchValues.size()[ CD ]
Line_3 $$ if (logger.isDebugEnabled()) -->Line_4 $$ logger.debug("Executing statement " + getInsertString() + " with batch of size: " + batchValues.size())[ CD ]
Line_2 $$ private int[] executeBatchInternal(final List<List<Object>> batchValues) -->Line_8 $$ setParameterValues(ps, batchValues.get(i), getInsertTypes())[ FD ]
Line_2 $$ private int[] executeBatchInternal(final List<List<Object>> batchValues) -->Line_3 $$ if (logger.isDebugEnabled()) [ CD ]
Line_2 $$ private int[] executeBatchInternal(final List<List<Object>> batchValues) -->Line_11 $$ return batchValues.size()[ FD ]
