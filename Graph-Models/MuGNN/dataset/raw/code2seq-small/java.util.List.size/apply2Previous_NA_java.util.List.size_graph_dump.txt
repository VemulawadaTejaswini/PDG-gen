Line_37 $$ if (cmp > 0) -->Line_39 $$ t = tmpIterator.hasNext() ? tmpIterator.next() : null[ CD ]
Line_2 $$ private static <K, E extends Diff.Element<K>> List<E> apply2Previous(final List<E> previous, final List<E> clist, final List<E> dlist) -->Line_25 $$ final List<E> current = new ArrayList<E>(tmp.size() + clist.size())[ CD ]
Line_2 $$ private static <K, E extends Diff.Element<K>> List<E> apply2Previous(final List<E> previous, final List<E> clist, final List<E> dlist) -->Line_31 $$ E c = cIterator.hasNext() ? cIterator.next() : null[ CD ]
Line_30 $$ E t = tmpIterator.hasNext() ? tmpIterator.next() : null-->Line_33 $$ final int cmp = c == null ? 1 : t == null ? -1 : c.compareTo(t.getKey())[ FD ]
Line_2 $$ private static <K, E extends Diff.Element<K>> List<E> apply2Previous(final List<E> previous, final List<E> clist, final List<E> dlist) -->Line_21 $$ for (; i.hasNext(); ) [ CD ]
Line_25 $$ final List<E> current = new ArrayList<E>(tmp.size() + clist.size())-->Line_38 $$ current.add(t)[ FD ]
Line_32 $$ for (; t != null || c != null; ) -->Line_34 $$ if (cmp < 0) [ CD ]
Line_39 $$ t = tmpIterator.hasNext() ? tmpIterator.next() : null-->Line_38 $$ current.add(t)[ FD ]
Line_31 $$ E c = cIterator.hasNext() ? cIterator.next() : null-->Line_33 $$ final int cmp = c == null ? 1 : t == null ? -1 : c.compareTo(t.getKey())[ FD ]
Line_2 $$ private static <K, E extends Diff.Element<K>> List<E> apply2Previous(final List<E> previous, final List<E> clist, final List<E> dlist) -->Line_29 $$ final Iterator<E> cIterator = clist.iterator()[ FD ]
Line_39 $$ t = tmpIterator.hasNext() ? tmpIterator.next() : null-->Line_33 $$ final int cmp = c == null ? 1 : t == null ? -1 : c.compareTo(t.getKey())[ FD ]
Line_31 $$ E c = cIterator.hasNext() ? cIterator.next() : null-->Line_35 $$ current.add(c)[ FD ]
Line_34 $$ if (cmp < 0) -->Line_36 $$ c = cIterator.hasNext() ? cIterator.next() : null[ CD ]
Line_15 $$ for (; (cmp = e.compareTo(deleted.getKey())) < 0; e = i.next()) -->Line_16 $$ tmp.add(e)[ CD ]
Line_15 $$ for (; (cmp = e.compareTo(deleted.getKey())) < 0; e = i.next()) -->Line_34 $$ if (cmp < 0) [ FD ]
Line_25 $$ final List<E> current = new ArrayList<E>(tmp.size() + clist.size())-->Line_35 $$ current.add(c)[ FD ]
Line_29 $$ final Iterator<E> cIterator = clist.iterator()-->Line_36 $$ c = cIterator.hasNext() ? cIterator.next() : null[ FD ]
Line_33 $$ final int cmp = c == null ? 1 : t == null ? -1 : c.compareTo(t.getKey())-->Line_37 $$ if (cmp > 0) [ FD ]
Line_2 $$ private static <K, E extends Diff.Element<K>> List<E> apply2Previous(final List<E> previous, final List<E> clist, final List<E> dlist) -->Line_25 $$ final List<E> current = new ArrayList<E>(tmp.size() + clist.size())[ FD ]
Line_14 $$ int cmp = 0-->Line_34 $$ if (cmp < 0) [ FD ]
Line_36 $$ c = cIterator.hasNext() ? cIterator.next() : null-->Line_33 $$ final int cmp = c == null ? 1 : t == null ? -1 : c.compareTo(t.getKey())[ FD ]
Line_2 $$ private static <K, E extends Diff.Element<K>> List<E> apply2Previous(final List<E> previous, final List<E> clist, final List<E> dlist) -->Line_30 $$ E t = tmpIterator.hasNext() ? tmpIterator.next() : null[ CD ]
Line_14 $$ int cmp = 0-->Line_37 $$ if (cmp > 0) [ FD ]
Line_32 $$ for (; t != null || c != null; ) -->Line_33 $$ final int cmp = c == null ? 1 : t == null ? -1 : c.compareTo(t.getKey())[ CD ]
Line_15 $$ for (; (cmp = e.compareTo(deleted.getKey())) < 0; e = i.next()) -->Line_16 $$ tmp.add(e)[ FD ]
Line_11 $$ for (E deleted : dlist) -->Line_15 $$ for (; (cmp = e.compareTo(deleted.getKey())) < 0; e = i.next()) [ FD ]
Line_37 $$ if (cmp > 0) -->Line_38 $$ current.add(t)[ CD ]
Line_34 $$ if (cmp < 0) -->Line_37 $$ if (cmp > 0) [ CD ]
Line_15 $$ for (; (cmp = e.compareTo(deleted.getKey())) < 0; e = i.next()) -->Line_37 $$ if (cmp > 0) [ FD ]
Line_21 $$ for (; i.hasNext(); ) -->Line_22 $$ tmp.add(i.next())[ CD ]
Line_2 $$ private static <K, E extends Diff.Element<K>> List<E> apply2Previous(final List<E> previous, final List<E> clist, final List<E> dlist) -->Line_32 $$ for (; t != null || c != null; ) [ CD ]
Line_29 $$ final Iterator<E> cIterator = clist.iterator()-->Line_31 $$ E c = cIterator.hasNext() ? cIterator.next() : null[ FD ]
Line_2 $$ private static <K, E extends Diff.Element<K>> List<E> apply2Previous(final List<E> previous, final List<E> clist, final List<E> dlist) -->Line_45 $$ return current[ CD ]
Line_30 $$ E t = tmpIterator.hasNext() ? tmpIterator.next() : null-->Line_39 $$ t = tmpIterator.hasNext() ? tmpIterator.next() : null[ FD ]
Line_36 $$ c = cIterator.hasNext() ? cIterator.next() : null-->Line_35 $$ current.add(c)[ FD ]
Line_30 $$ E t = tmpIterator.hasNext() ? tmpIterator.next() : null-->Line_38 $$ current.add(t)[ FD ]
Line_34 $$ if (cmp < 0) -->Line_35 $$ current.add(c)[ CD ]
Line_2 $$ private static <K, E extends Diff.Element<K>> List<E> apply2Previous(final List<E> previous, final List<E> clist, final List<E> dlist) -->Line_29 $$ final Iterator<E> cIterator = clist.iterator()[ CD ]
Line_33 $$ final int cmp = c == null ? 1 : t == null ? -1 : c.compareTo(t.getKey())-->Line_34 $$ if (cmp < 0) [ FD ]
Line_14 $$ int cmp = 0-->Line_15 $$ for (; (cmp = e.compareTo(deleted.getKey())) < 0; e = i.next()) [ FD ]
Line_31 $$ E c = cIterator.hasNext() ? cIterator.next() : null-->Line_36 $$ c = cIterator.hasNext() ? cIterator.next() : null[ FD ]
