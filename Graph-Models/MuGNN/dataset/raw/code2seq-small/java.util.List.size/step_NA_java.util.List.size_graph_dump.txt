Line_4 $$ int i = myCurrentIdx + 1-->Line_8 $$ final String s = myLines.get(i)[ FD ]
Line_4 $$ int i = myCurrentIdx + 1-->Line_9 $$ if (myLine.equals(s) && !isSeized(i)) [ FD ]
Line_3 $$ if (myDirection) -->Line_6 $$ myCurrentIdx = -1[ CD ]
Line_8 $$ final String s = myLines.get(i)-->Line_21 $$ if (myLine.equals(s) && !isSeized(i)) [ FD ]
Line_4 $$ int i = myCurrentIdx + 1-->Line_21 $$ if (myLine.equals(s) && !isSeized(i)) [ FD ]
Line_7 $$ for (; i < myLines.size() && i < maxWalk; i++) -->Line_8 $$ final String s = myLines.get(i)[ CD ]
Line_20 $$ final String s = myLines.get(i)-->Line_21 $$ if (myLine.equals(s) && !isSeized(i)) [ FD ]
Line_3 $$ if (myDirection) -->Line_18 $$ myCurrentIdx = -1[ CD ]
Line_3 $$ if (myDirection) -->Line_4 $$ int i = myCurrentIdx + 1[ CD ]
Line_4 $$ int i = myCurrentIdx + 1-->Line_20 $$ final String s = myLines.get(i)[ FD ]
Line_3 $$ if (myDirection) -->Line_5 $$ int maxWalk = myLeftWalk + i[ CD ]
Line_3 $$ if (myDirection) -->Line_17 $$ int maxWalk = Math.max(-1, i - myLeftWalk)[ CD ]
Line_8 $$ final String s = myLines.get(i)-->Line_9 $$ if (myLine.equals(s) && !isSeized(i)) [ FD ]
Line_19 $$ for (; i >= 0 && i > maxWalk && i < myLines.size(); i--) -->Line_20 $$ final String s = myLines.get(i)[ CD ]
Line_4 $$ int i = myCurrentIdx + 1-->Line_19 $$ for (; i >= 0 && i > maxWalk && i < myLines.size(); i--) [ FD ]
Line_3 $$ if (myDirection) -->Line_19 $$ for (; i >= 0 && i > maxWalk && i < myLines.size(); i--) [ CD ]
Line_2 $$ public void step() -->Line_3 $$ if (myDirection) [ CD ]
Line_19 $$ for (; i >= 0 && i > maxWalk && i < myLines.size(); i--) -->Line_21 $$ if (myLine.equals(s) && !isSeized(i)) [ CD ]
Line_3 $$ if (myDirection) -->Line_7 $$ for (; i < myLines.size() && i < maxWalk; i++) [ CD ]
Line_4 $$ int i = myCurrentIdx + 1-->Line_7 $$ for (; i < myLines.size() && i < maxWalk; i++) [ FD ]
Line_7 $$ for (; i < myLines.size() && i < maxWalk; i++) -->Line_9 $$ if (myLine.equals(s) && !isSeized(i)) [ CD ]
