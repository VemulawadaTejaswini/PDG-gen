Line_4 $$ if (action == null) -->Line_21 $$ if (!quickFix.shouldBeAvailableAfterExecution()) [ CD ]
Line_4 $$ if (action == null) -->Line_5 $$ if (actionShouldBeAvailable) [ CD ]
Line_22 $$ final IntentionAction afterAction = quickFix.findActionWithText(text)-->Line_23 $$ if (afterAction != null) [ FD ]
Line_2 $$ public static void doAction(String text, boolean actionShouldBeAvailable, String testFullPath, String testName, QuickFixTestCase quickFix) throws Exception -->Line_3 $$ IntentionAction action = quickFix.findActionWithText(text)[ CD ]
Line_5 $$ if (actionShouldBeAvailable) -->Line_6 $$ List<IntentionAction> actions = quickFix.getAvailableActions()[ CD ]
Line_4 $$ if (action == null) -->Line_20 $$ UIUtil.dispatchAllInvocationEvents()[ CD ]
Line_2 $$ public static void doAction(String text, boolean actionShouldBeAvailable, String testFullPath, String testName, QuickFixTestCase quickFix) throws Exception -->Line_22 $$ final IntentionAction afterAction = quickFix.findActionWithText(text)[ FD ]
Line_21 $$ if (!quickFix.shouldBeAvailableAfterExecution()) -->Line_23 $$ if (afterAction != null) [ CD ]
Line_2 $$ public static void doAction(String text, boolean actionShouldBeAvailable, String testFullPath, String testName, QuickFixTestCase quickFix) throws Exception -->Line_4 $$ if (action == null) [ CD ]
Line_21 $$ if (!quickFix.shouldBeAvailableAfterExecution()) -->Line_22 $$ final IntentionAction afterAction = quickFix.findActionWithText(text)[ CD ]
Line_7 $$ List<String> texts = new ArrayList<String>()-->Line_12 $$ fail("Action with text '" + text + "' is not available in test " + testFullPath + "\n" + "Available actions (" + texts.size() + "): " + texts + "\n" + actions + "\nInfos:" + infos)[ FD ]
Line_5 $$ if (actionShouldBeAvailable) -->Line_7 $$ List<String> texts = new ArrayList<String>()[ CD ]
Line_4 $$ if (action == null) -->Line_27 $$ String expectedFilePath = notNull(quickFix.getBasePath(), "") + "/" + AFTER_PREFIX + testName[ CD ]
Line_2 $$ public static void doAction(String text, boolean actionShouldBeAvailable, String testFullPath, String testName, QuickFixTestCase quickFix) throws Exception -->Line_3 $$ IntentionAction action = quickFix.findActionWithText(text)[ FD ]
Line_4 $$ if (action == null) -->Line_19 $$ UIUtil.dispatchAllInvocationEvents()[ CD ]
Line_3 $$ IntentionAction action = quickFix.findActionWithText(text)-->Line_18 $$ quickFix.invoke(action)[ FD ]
Line_15 $$ if (!actionShouldBeAvailable) -->Line_16 $$ fail("Action '" + text + "' is available (but must not) in test " + testFullPath)[ CD ]
Line_27 $$ String expectedFilePath = notNull(quickFix.getBasePath(), "") + "/" + AFTER_PREFIX + testName-->Line_28 $$ quickFix.checkResultByFile("In file :" + expectedFilePath, expectedFilePath, false)[ FD ]
Line_3 $$ IntentionAction action = quickFix.findActionWithText(text)-->Line_4 $$ if (action == null) [ FD ]
Line_2 $$ public static void doAction(String text, boolean actionShouldBeAvailable, String testFullPath, String testName, QuickFixTestCase quickFix) throws Exception -->Line_21 $$ if (!quickFix.shouldBeAvailableAfterExecution()) [ FD ]
Line_4 $$ if (action == null) -->Line_15 $$ if (!actionShouldBeAvailable) [ CD ]
Line_2 $$ public static void doAction(String text, boolean actionShouldBeAvailable, String testFullPath, String testName, QuickFixTestCase quickFix) throws Exception -->Line_28 $$ quickFix.checkResultByFile("In file :" + expectedFilePath, expectedFilePath, false)[ FD ]
Line_4 $$ if (action == null) -->Line_28 $$ quickFix.checkResultByFile("In file :" + expectedFilePath, expectedFilePath, false)[ CD ]
Line_23 $$ if (afterAction != null) -->Line_24 $$ fail("Action '" + text + "' is still available after its invocation in test " + testFullPath)[ CD ]
Line_2 $$ public static void doAction(String text, boolean actionShouldBeAvailable, String testFullPath, String testName, QuickFixTestCase quickFix) throws Exception -->Line_15 $$ if (!actionShouldBeAvailable) [ FD ]
Line_8 $$ for (IntentionAction intentionAction : actions) -->Line_9 $$ texts.add(intentionAction.getText())[ FD ]
Line_4 $$ if (action == null) -->Line_18 $$ quickFix.invoke(action)[ CD ]
Line_7 $$ List<String> texts = new ArrayList<String>()-->Line_9 $$ texts.add(intentionAction.getText())[ FD ]
Line_5 $$ if (actionShouldBeAvailable) -->Line_12 $$ fail("Action with text '" + text + "' is not available in test " + testFullPath + "\n" + "Available actions (" + texts.size() + "): " + texts + "\n" + actions + "\nInfos:" + infos)[ CD ]
Line_2 $$ public static void doAction(String text, boolean actionShouldBeAvailable, String testFullPath, String testName, QuickFixTestCase quickFix) throws Exception -->Line_11 $$ Collection<HighlightInfo> infos = quickFix.doHighlighting()[ FD ]
Line_5 $$ if (actionShouldBeAvailable) -->Line_11 $$ Collection<HighlightInfo> infos = quickFix.doHighlighting()[ CD ]
Line_2 $$ public static void doAction(String text, boolean actionShouldBeAvailable, String testFullPath, String testName, QuickFixTestCase quickFix) throws Exception -->Line_27 $$ String expectedFilePath = notNull(quickFix.getBasePath(), "") + "/" + AFTER_PREFIX + testName[ FD ]
Line_2 $$ public static void doAction(String text, boolean actionShouldBeAvailable, String testFullPath, String testName, QuickFixTestCase quickFix) throws Exception -->Line_6 $$ List<IntentionAction> actions = quickFix.getAvailableActions()[ FD ]
Line_2 $$ public static void doAction(String text, boolean actionShouldBeAvailable, String testFullPath, String testName, QuickFixTestCase quickFix) throws Exception -->Line_18 $$ quickFix.invoke(action)[ FD ]
