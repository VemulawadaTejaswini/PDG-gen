Line_7 $$ SearchResult searchResult = assertOneSearchResult(document)-->Line_8 $$ assertSearchResult(searchResult)[ FD ]
Line_2 $$ public void testJournalArticleWithDefectiveIndexer() throws Exception -->Line_4 $$ Mockito.when(_indexerRegistry.getIndexer(Mockito.anyString())).thenReturn(_indexer)[ CD ]
Line_7 $$ SearchResult searchResult = assertOneSearchResult(document)-->Line_9 $$ Assert.assertNull(searchResult.getSummary())[ FD ]
Line_5 $$ Document document = createDocument()-->Line_14 $$ Assert.assertEquals("Search index is stale and contains entry [ FD ]
Line_2 $$ public void testJournalArticleWithDefectiveIndexer() throws Exception -->Line_5 $$ Document document = createDocument()[ CD ]
Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_13 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_2 $$ public void testJournalArticleWithDefectiveIndexer() throws Exception -->Line_3 $$ Mockito.doThrow(IllegalArgumentException.class).when(_indexer).getSummary((Document) Matchers.any(), Matchers.anyString(), (PortletRequest) Matchers.any(), (PortletResponse) Matchers.any())[ CD ]
Line_6 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(SearchResultTranslatorImpl.class.getName(), Level.WARNING)) -->Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_14 $$ Assert.assertEquals("Search index is stale and contains entry [ FD ]
Line_5 $$ Document document = createDocument()-->Line_7 $$ SearchResult searchResult = assertOneSearchResult(document)[ FD ]
Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_12 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_5 $$ Document document = createDocument()-->Line_10 $$ Mockito.verify(_indexer).getSummary(document, StringPool.BLANK, null, null)[ FD ]
