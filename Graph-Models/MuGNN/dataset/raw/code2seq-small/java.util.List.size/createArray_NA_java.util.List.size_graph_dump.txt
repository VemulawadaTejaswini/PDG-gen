Line_2 $$ private Object createArray(Class<?> valueClass, FList<Type> processedTypes, List<Type> elementTypes) throws Exception -->Line_6 $$ array[i] = createValue(type, processedTypes)[ FD ]
Line_2 $$ private Object createArray(Class<?> valueClass, FList<Type> processedTypes, List<Type> elementTypes) throws Exception -->Line_5 $$ Type type = elementTypes.isEmpty() ? valueClass.getComponentType() : elementTypes.get(i % elementTypes.size())[ FD ]
Line_4 $$ for (int i = 0; i < array.length; i++) -->Line_5 $$ Type type = elementTypes.isEmpty() ? valueClass.getComponentType() : elementTypes.get(i % elementTypes.size())[ CD ]
Line_2 $$ private Object createArray(Class<?> valueClass, FList<Type> processedTypes, List<Type> elementTypes) throws Exception -->Line_3 $$ final Object[] array = (Object[]) Array.newInstance(valueClass.getComponentType(), Math.max(elementTypes.size(), 2))[ FD ]
Line_2 $$ private Object createArray(Class<?> valueClass, FList<Type> processedTypes, List<Type> elementTypes) throws Exception -->Line_8 $$ return array[ CD ]
Line_5 $$ Type type = elementTypes.isEmpty() ? valueClass.getComponentType() : elementTypes.get(i % elementTypes.size())-->Line_6 $$ array[i] = createValue(type, processedTypes)[ FD ]
Line_4 $$ for (int i = 0; i < array.length; i++) -->Line_6 $$ array[i] = createValue(type, processedTypes)[ CD ]
Line_2 $$ private Object createArray(Class<?> valueClass, FList<Type> processedTypes, List<Type> elementTypes) throws Exception -->Line_3 $$ final Object[] array = (Object[]) Array.newInstance(valueClass.getComponentType(), Math.max(elementTypes.size(), 2))[ CD ]
Line_2 $$ private Object createArray(Class<?> valueClass, FList<Type> processedTypes, List<Type> elementTypes) throws Exception -->Line_4 $$ for (int i = 0; i < array.length; i++) [ CD ]
