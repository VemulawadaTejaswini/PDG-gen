Line_9 $$ for (int i = 0; i < types.size(); i++) -->Line_11 $$ blockFields.add(channelField)[ CD ]
Line_4 $$ ClassDefinition classDefinition = new ClassDefinition(a(PUBLIC, FINAL), makeClassName("JoinProbe"), type(Object.class), type(JoinProbe.class))-->Line_27 $$ generateCurrentRowContainsNull(classDefinition, probeBlockFields, positionField)[ FD ]
Line_8 $$ List<FieldDefinition> blockFields = new ArrayList()-->Line_11 $$ blockFields.add(channelField)[ FD ]
Line_18 $$ FieldDefinition probeBlocksArrayField = classDefinition.declareField(a(PRIVATE, FINAL), "probeBlocks", Block[].class)-->Line_22 $$ generateConstructor(classDefinition, probeChannels, probeHashChannel, lookupSourceField, blockFields, probeBlockFields, probeBlocksArrayField, probePageField, probeHashBlockField, positionField, positionCountField)[ FD ]
Line_13 $$ List<FieldDefinition> probeBlockFields = new ArrayList()-->Line_22 $$ generateConstructor(classDefinition, probeChannels, probeHashChannel, lookupSourceField, blockFields, probeBlockFields, probeBlocksArrayField, probePageField, probeHashBlockField, positionField, positionCountField)[ FD ]
Line_4 $$ ClassDefinition classDefinition = new ClassDefinition(a(PUBLIC, FINAL), makeClassName("JoinProbe"), type(Object.class), type(JoinProbe.class))-->Line_23 $$ generateGetChannelCountMethod(classDefinition, blockFields.size())[ FD ]
Line_20 $$ FieldDefinition positionField = classDefinition.declareField(a(PRIVATE), "position", int.class)-->Line_25 $$ generateAdvanceNextPosition(classDefinition, positionField, positionCountField)[ FD ]
Line_8 $$ List<FieldDefinition> blockFields = new ArrayList()-->Line_24 $$ generateAppendToMethod(classDefinition, callSiteBinder, types, blockFields, positionField)[ FD ]
Line_2 $$ private Class<? extends JoinProbe> compileJoinProbe(List<Type> types, List<Integer> probeChannels, Optional<Integer> probeHashChannel) -->Line_22 $$ generateConstructor(classDefinition, probeChannels, probeHashChannel, lookupSourceField, blockFields, probeBlockFields, probeBlocksArrayField, probePageField, probeHashBlockField, positionField, positionCountField)[ CD ]
Line_2 $$ private Class<? extends JoinProbe> compileJoinProbe(List<Type> types, List<Integer> probeChannels, Optional<Integer> probeHashChannel) -->Line_4 $$ ClassDefinition classDefinition = new ClassDefinition(a(PUBLIC, FINAL), makeClassName("JoinProbe"), type(Object.class), type(JoinProbe.class))[ CD ]
Line_20 $$ FieldDefinition positionField = classDefinition.declareField(a(PRIVATE), "position", int.class)-->Line_26 $$ generateGetCurrentJoinPosition(classDefinition, callSiteBinder, lookupSourceField, probePageField, probeHashChannel, probeHashBlockField, positionField)[ FD ]
Line_8 $$ List<FieldDefinition> blockFields = new ArrayList()-->Line_23 $$ generateGetChannelCountMethod(classDefinition, blockFields.size())[ FD ]
Line_10 $$ FieldDefinition channelField = classDefinition.declareField(a(PRIVATE, FINAL), "block_" + i, Block.class)-->Line_11 $$ blockFields.add(channelField)[ FD ]
Line_3 $$ CallSiteBinder callSiteBinder = new CallSiteBinder()-->Line_24 $$ generateAppendToMethod(classDefinition, callSiteBinder, types, blockFields, positionField)[ FD ]
Line_2 $$ private Class<? extends JoinProbe> compileJoinProbe(List<Type> types, List<Integer> probeChannels, Optional<Integer> probeHashChannel) -->Line_22 $$ generateConstructor(classDefinition, probeChannels, probeHashChannel, lookupSourceField, blockFields, probeBlockFields, probeBlocksArrayField, probePageField, probeHashBlockField, positionField, positionCountField)[ FD ]
Line_4 $$ ClassDefinition classDefinition = new ClassDefinition(a(PUBLIC, FINAL), makeClassName("JoinProbe"), type(Object.class), type(JoinProbe.class))-->Line_26 $$ generateGetCurrentJoinPosition(classDefinition, callSiteBinder, lookupSourceField, probePageField, probeHashChannel, probeHashBlockField, positionField)[ FD ]
Line_2 $$ private Class<? extends JoinProbe> compileJoinProbe(List<Type> types, List<Integer> probeChannels, Optional<Integer> probeHashChannel) -->Line_20 $$ FieldDefinition positionField = classDefinition.declareField(a(PRIVATE), "position", int.class)[ CD ]
Line_21 $$ FieldDefinition probeHashBlockField = classDefinition.declareField(a(PRIVATE, FINAL), "probeHashBlock", Block.class)-->Line_26 $$ generateGetCurrentJoinPosition(classDefinition, callSiteBinder, lookupSourceField, probePageField, probeHashChannel, probeHashBlockField, positionField)[ FD ]
Line_2 $$ private Class<? extends JoinProbe> compileJoinProbe(List<Type> types, List<Integer> probeChannels, Optional<Integer> probeHashChannel) -->Line_25 $$ generateAdvanceNextPosition(classDefinition, positionField, positionCountField)[ CD ]
Line_7 $$ FieldDefinition positionCountField = classDefinition.declareField(a(PRIVATE, FINAL), "positionCount", int.class)-->Line_22 $$ generateConstructor(classDefinition, probeChannels, probeHashChannel, lookupSourceField, blockFields, probeBlockFields, probeBlocksArrayField, probePageField, probeHashBlockField, positionField, positionCountField)[ FD ]
Line_15 $$ FieldDefinition channelField = classDefinition.declareField(a(PRIVATE, FINAL), "probeBlock_" + i, Block.class)-->Line_16 $$ probeBlockFields.add(channelField)[ FD ]
Line_2 $$ private Class<? extends JoinProbe> compileJoinProbe(List<Type> types, List<Integer> probeChannels, Optional<Integer> probeHashChannel) -->Line_24 $$ generateAppendToMethod(classDefinition, callSiteBinder, types, blockFields, positionField)[ CD ]
Line_9 $$ for (int i = 0; i < types.size(); i++) -->Line_14 $$ for (int i = 0; i < probeChannels.size(); i++) [ FD ]
Line_4 $$ ClassDefinition classDefinition = new ClassDefinition(a(PUBLIC, FINAL), makeClassName("JoinProbe"), type(Object.class), type(JoinProbe.class))-->Line_24 $$ generateAppendToMethod(classDefinition, callSiteBinder, types, blockFields, positionField)[ FD ]
Line_2 $$ private Class<? extends JoinProbe> compileJoinProbe(List<Type> types, List<Integer> probeChannels, Optional<Integer> probeHashChannel) -->Line_18 $$ FieldDefinition probeBlocksArrayField = classDefinition.declareField(a(PRIVATE, FINAL), "probeBlocks", Block[].class)[ CD ]
Line_2 $$ private Class<? extends JoinProbe> compileJoinProbe(List<Type> types, List<Integer> probeChannels, Optional<Integer> probeHashChannel) -->Line_14 $$ for (int i = 0; i < probeChannels.size(); i++) [ FD ]
Line_4 $$ ClassDefinition classDefinition = new ClassDefinition(a(PUBLIC, FINAL), makeClassName("JoinProbe"), type(Object.class), type(JoinProbe.class))-->Line_18 $$ FieldDefinition probeBlocksArrayField = classDefinition.declareField(a(PRIVATE, FINAL), "probeBlocks", Block[].class)[ FD ]
Line_9 $$ for (int i = 0; i < types.size(); i++) -->Line_10 $$ FieldDefinition channelField = classDefinition.declareField(a(PRIVATE, FINAL), "block_" + i, Block.class)[ CD ]
Line_2 $$ private Class<? extends JoinProbe> compileJoinProbe(List<Type> types, List<Integer> probeChannels, Optional<Integer> probeHashChannel) -->Line_24 $$ generateAppendToMethod(classDefinition, callSiteBinder, types, blockFields, positionField)[ FD ]
Line_4 $$ ClassDefinition classDefinition = new ClassDefinition(a(PUBLIC, FINAL), makeClassName("JoinProbe"), type(Object.class), type(JoinProbe.class))-->Line_25 $$ generateAdvanceNextPosition(classDefinition, positionField, positionCountField)[ FD ]
Line_2 $$ private Class<? extends JoinProbe> compileJoinProbe(List<Type> types, List<Integer> probeChannels, Optional<Integer> probeHashChannel) -->Line_13 $$ List<FieldDefinition> probeBlockFields = new ArrayList()[ CD ]
Line_20 $$ FieldDefinition positionField = classDefinition.declareField(a(PRIVATE), "position", int.class)-->Line_22 $$ generateConstructor(classDefinition, probeChannels, probeHashChannel, lookupSourceField, blockFields, probeBlockFields, probeBlocksArrayField, probePageField, probeHashBlockField, positionField, positionCountField)[ FD ]
Line_8 $$ List<FieldDefinition> blockFields = new ArrayList()-->Line_22 $$ generateConstructor(classDefinition, probeChannels, probeHashChannel, lookupSourceField, blockFields, probeBlockFields, probeBlocksArrayField, probePageField, probeHashBlockField, positionField, positionCountField)[ FD ]
Line_2 $$ private Class<? extends JoinProbe> compileJoinProbe(List<Type> types, List<Integer> probeChannels, Optional<Integer> probeHashChannel) -->Line_26 $$ generateGetCurrentJoinPosition(classDefinition, callSiteBinder, lookupSourceField, probePageField, probeHashChannel, probeHashBlockField, positionField)[ FD ]
Line_4 $$ ClassDefinition classDefinition = new ClassDefinition(a(PUBLIC, FINAL), makeClassName("JoinProbe"), type(Object.class), type(JoinProbe.class))-->Line_28 $$ return defineClass(classDefinition, JoinProbe.class, callSiteBinder.getBindings(), getClass().getClassLoader())[ FD ]
Line_4 $$ ClassDefinition classDefinition = new ClassDefinition(a(PUBLIC, FINAL), makeClassName("JoinProbe"), type(Object.class), type(JoinProbe.class))-->Line_22 $$ generateConstructor(classDefinition, probeChannels, probeHashChannel, lookupSourceField, blockFields, probeBlockFields, probeBlocksArrayField, probePageField, probeHashBlockField, positionField, positionCountField)[ FD ]
Line_14 $$ for (int i = 0; i < probeChannels.size(); i++) -->Line_16 $$ probeBlockFields.add(channelField)[ CD ]
Line_2 $$ private Class<? extends JoinProbe> compileJoinProbe(List<Type> types, List<Integer> probeChannels, Optional<Integer> probeHashChannel) -->Line_8 $$ List<FieldDefinition> blockFields = new ArrayList()[ CD ]
Line_2 $$ private Class<? extends JoinProbe> compileJoinProbe(List<Type> types, List<Integer> probeChannels, Optional<Integer> probeHashChannel) -->Line_26 $$ generateGetCurrentJoinPosition(classDefinition, callSiteBinder, lookupSourceField, probePageField, probeHashChannel, probeHashBlockField, positionField)[ CD ]
Line_21 $$ FieldDefinition probeHashBlockField = classDefinition.declareField(a(PRIVATE, FINAL), "probeHashBlock", Block.class)-->Line_22 $$ generateConstructor(classDefinition, probeChannels, probeHashChannel, lookupSourceField, blockFields, probeBlockFields, probeBlocksArrayField, probePageField, probeHashBlockField, positionField, positionCountField)[ FD ]
Line_2 $$ private Class<? extends JoinProbe> compileJoinProbe(List<Type> types, List<Integer> probeChannels, Optional<Integer> probeHashChannel) -->Line_27 $$ generateCurrentRowContainsNull(classDefinition, probeBlockFields, positionField)[ CD ]
Line_2 $$ private Class<? extends JoinProbe> compileJoinProbe(List<Type> types, List<Integer> probeChannels, Optional<Integer> probeHashChannel) -->Line_21 $$ FieldDefinition probeHashBlockField = classDefinition.declareField(a(PRIVATE, FINAL), "probeHashBlock", Block.class)[ CD ]
Line_20 $$ FieldDefinition positionField = classDefinition.declareField(a(PRIVATE), "position", int.class)-->Line_24 $$ generateAppendToMethod(classDefinition, callSiteBinder, types, blockFields, positionField)[ FD ]
Line_4 $$ ClassDefinition classDefinition = new ClassDefinition(a(PUBLIC, FINAL), makeClassName("JoinProbe"), type(Object.class), type(JoinProbe.class))-->Line_15 $$ FieldDefinition channelField = classDefinition.declareField(a(PRIVATE, FINAL), "probeBlock_" + i, Block.class)[ FD ]
Line_19 $$ FieldDefinition probePageField = classDefinition.declareField(a(PRIVATE, FINAL), "probePage", Page.class)-->Line_22 $$ generateConstructor(classDefinition, probeChannels, probeHashChannel, lookupSourceField, blockFields, probeBlockFields, probeBlocksArrayField, probePageField, probeHashBlockField, positionField, positionCountField)[ FD ]
Line_3 $$ CallSiteBinder callSiteBinder = new CallSiteBinder()-->Line_26 $$ generateGetCurrentJoinPosition(classDefinition, callSiteBinder, lookupSourceField, probePageField, probeHashChannel, probeHashBlockField, positionField)[ FD ]
Line_13 $$ List<FieldDefinition> probeBlockFields = new ArrayList()-->Line_27 $$ generateCurrentRowContainsNull(classDefinition, probeBlockFields, positionField)[ FD ]
Line_3 $$ CallSiteBinder callSiteBinder = new CallSiteBinder()-->Line_28 $$ return defineClass(classDefinition, JoinProbe.class, callSiteBinder.getBindings(), getClass().getClassLoader())[ FD ]
Line_2 $$ private Class<? extends JoinProbe> compileJoinProbe(List<Type> types, List<Integer> probeChannels, Optional<Integer> probeHashChannel) -->Line_9 $$ for (int i = 0; i < types.size(); i++) [ CD ]
Line_14 $$ for (int i = 0; i < probeChannels.size(); i++) -->Line_15 $$ FieldDefinition channelField = classDefinition.declareField(a(PRIVATE, FINAL), "probeBlock_" + i, Block.class)[ CD ]
Line_2 $$ private Class<? extends JoinProbe> compileJoinProbe(List<Type> types, List<Integer> probeChannels, Optional<Integer> probeHashChannel) -->Line_23 $$ generateGetChannelCountMethod(classDefinition, blockFields.size())[ CD ]
Line_13 $$ List<FieldDefinition> probeBlockFields = new ArrayList()-->Line_16 $$ probeBlockFields.add(channelField)[ FD ]
Line_10 $$ FieldDefinition channelField = classDefinition.declareField(a(PRIVATE, FINAL), "block_" + i, Block.class)-->Line_16 $$ probeBlockFields.add(channelField)[ FD ]
Line_4 $$ ClassDefinition classDefinition = new ClassDefinition(a(PUBLIC, FINAL), makeClassName("JoinProbe"), type(Object.class), type(JoinProbe.class))-->Line_21 $$ FieldDefinition probeHashBlockField = classDefinition.declareField(a(PRIVATE, FINAL), "probeHashBlock", Block.class)[ FD ]
Line_4 $$ ClassDefinition classDefinition = new ClassDefinition(a(PUBLIC, FINAL), makeClassName("JoinProbe"), type(Object.class), type(JoinProbe.class))-->Line_10 $$ FieldDefinition channelField = classDefinition.declareField(a(PRIVATE, FINAL), "block_" + i, Block.class)[ FD ]
Line_4 $$ ClassDefinition classDefinition = new ClassDefinition(a(PUBLIC, FINAL), makeClassName("JoinProbe"), type(Object.class), type(JoinProbe.class))-->Line_19 $$ FieldDefinition probePageField = classDefinition.declareField(a(PRIVATE, FINAL), "probePage", Page.class)[ FD ]
Line_2 $$ private Class<? extends JoinProbe> compileJoinProbe(List<Type> types, List<Integer> probeChannels, Optional<Integer> probeHashChannel) -->Line_7 $$ FieldDefinition positionCountField = classDefinition.declareField(a(PRIVATE, FINAL), "positionCount", int.class)[ CD ]
Line_2 $$ private Class<? extends JoinProbe> compileJoinProbe(List<Type> types, List<Integer> probeChannels, Optional<Integer> probeHashChannel) -->Line_14 $$ for (int i = 0; i < probeChannels.size(); i++) [ CD ]
Line_2 $$ private Class<? extends JoinProbe> compileJoinProbe(List<Type> types, List<Integer> probeChannels, Optional<Integer> probeHashChannel) -->Line_3 $$ CallSiteBinder callSiteBinder = new CallSiteBinder()[ CD ]
Line_4 $$ ClassDefinition classDefinition = new ClassDefinition(a(PUBLIC, FINAL), makeClassName("JoinProbe"), type(Object.class), type(JoinProbe.class))-->Line_20 $$ FieldDefinition positionField = classDefinition.declareField(a(PRIVATE), "position", int.class)[ FD ]
Line_20 $$ FieldDefinition positionField = classDefinition.declareField(a(PRIVATE), "position", int.class)-->Line_27 $$ generateCurrentRowContainsNull(classDefinition, probeBlockFields, positionField)[ FD ]
Line_7 $$ FieldDefinition positionCountField = classDefinition.declareField(a(PRIVATE, FINAL), "positionCount", int.class)-->Line_25 $$ generateAdvanceNextPosition(classDefinition, positionField, positionCountField)[ FD ]
Line_19 $$ FieldDefinition probePageField = classDefinition.declareField(a(PRIVATE, FINAL), "probePage", Page.class)-->Line_26 $$ generateGetCurrentJoinPosition(classDefinition, callSiteBinder, lookupSourceField, probePageField, probeHashChannel, probeHashBlockField, positionField)[ FD ]
Line_4 $$ ClassDefinition classDefinition = new ClassDefinition(a(PUBLIC, FINAL), makeClassName("JoinProbe"), type(Object.class), type(JoinProbe.class))-->Line_7 $$ FieldDefinition positionCountField = classDefinition.declareField(a(PRIVATE, FINAL), "positionCount", int.class)[ FD ]
Line_2 $$ private Class<? extends JoinProbe> compileJoinProbe(List<Type> types, List<Integer> probeChannels, Optional<Integer> probeHashChannel) -->Line_9 $$ for (int i = 0; i < types.size(); i++) [ FD ]
Line_2 $$ private Class<? extends JoinProbe> compileJoinProbe(List<Type> types, List<Integer> probeChannels, Optional<Integer> probeHashChannel) -->Line_19 $$ FieldDefinition probePageField = classDefinition.declareField(a(PRIVATE, FINAL), "probePage", Page.class)[ CD ]
Line_2 $$ private Class<? extends JoinProbe> compileJoinProbe(List<Type> types, List<Integer> probeChannels, Optional<Integer> probeHashChannel) -->Line_28 $$ return defineClass(classDefinition, JoinProbe.class, callSiteBinder.getBindings(), getClass().getClassLoader())[ CD ]
