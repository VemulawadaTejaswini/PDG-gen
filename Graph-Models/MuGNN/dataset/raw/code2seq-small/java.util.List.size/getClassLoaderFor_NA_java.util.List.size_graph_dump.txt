Line_8 $$ List<URL> cachedClassPath = new ArrayList<URL>(urlSpec.getClasspath().size())-->Line_29 $$ cachedClassPath.add(url)[ FD ]
Line_14 $$ File cached = cache.useCache("Locate Jar file", new Factory<File>() -->Line_20 $$ cachedClassPath.add(cached.toURI().toURL())[ FD ]
Line_13 $$ if (file.isFile()) -->Line_20 $$ cachedClassPath.add(cached.toURI().toURL())[ CD ]
Line_2 $$ public ClassLoader getClassLoaderFor(ClassLoaderSpec spec, List<? extends ClassLoader> parents) -->Line_3 $$ if (spec instanceof MutableURLClassLoader.Spec) [ FD ]
Line_9 $$ for (URL url : urlSpec.getClasspath()) -->Line_12 $$ final File file = new File(url.toURI())[ FD ]
Line_4 $$ MutableURLClassLoader.Spec urlSpec = (MutableURLClassLoader.Spec) spec-->Line_9 $$ for (URL url : urlSpec.getClasspath()) [ FD ]
Line_3 $$ if (spec instanceof MutableURLClassLoader.Spec) -->Line_31 $$ return new MutableURLClassLoader(parents.get(0), cachedClassPath)[ CD ]
Line_9 $$ for (URL url : urlSpec.getClasspath()) -->Line_10 $$ if (url.getProtocol().equals("file")) [ FD ]
Line_2 $$ public ClassLoader getClassLoaderFor(ClassLoaderSpec spec, List<? extends ClassLoader> parents) -->Line_31 $$ return new MutableURLClassLoader(parents.get(0), cachedClassPath)[ FD ]
Line_2 $$ public ClassLoader getClassLoaderFor(ClassLoaderSpec spec, List<? extends ClassLoader> parents) -->Line_5 $$ if (parents.size() != 1) [ FD ]
Line_3 $$ if (spec instanceof MutableURLClassLoader.Spec) -->Line_4 $$ MutableURLClassLoader.Spec urlSpec = (MutableURLClassLoader.Spec) spec[ CD ]
Line_2 $$ public ClassLoader getClassLoaderFor(ClassLoaderSpec spec, List<? extends ClassLoader> parents) -->Line_33 $$ return delegate.getClassLoaderFor(spec, parents)[ CD ]
Line_9 $$ for (URL url : urlSpec.getClasspath()) -->Line_29 $$ cachedClassPath.add(url)[ FD ]
Line_12 $$ final File file = new File(url.toURI())-->Line_13 $$ if (file.isFile()) [ FD ]
Line_2 $$ public ClassLoader getClassLoaderFor(ClassLoaderSpec spec, List<? extends ClassLoader> parents) -->Line_3 $$ if (spec instanceof MutableURLClassLoader.Spec) [ CD ]
Line_3 $$ if (spec instanceof MutableURLClassLoader.Spec) -->Line_8 $$ List<URL> cachedClassPath = new ArrayList<URL>(urlSpec.getClasspath().size())[ CD ]
Line_8 $$ List<URL> cachedClassPath = new ArrayList<URL>(urlSpec.getClasspath().size())-->Line_20 $$ cachedClassPath.add(cached.toURI().toURL())[ FD ]
Line_12 $$ final File file = new File(url.toURI())-->Line_17 $$ return jarCache.getCachedJar(file, Factories.constant(cache.getBaseDir()))[ FD ]
Line_13 $$ if (file.isFile()) -->Line_14 $$ File cached = cache.useCache("Locate Jar file", new Factory<File>() [ CD ]
Line_14 $$ File cached = cache.useCache("Locate Jar file", new Factory<File>() -->Line_17 $$ return jarCache.getCachedJar(file, Factories.constant(cache.getBaseDir()))[ CD ]
Line_2 $$ public ClassLoader getClassLoaderFor(ClassLoaderSpec spec, List<? extends ClassLoader> parents) -->Line_33 $$ return delegate.getClassLoaderFor(spec, parents)[ FD ]
Line_3 $$ if (spec instanceof MutableURLClassLoader.Spec) -->Line_5 $$ if (parents.size() != 1) [ CD ]
Line_4 $$ MutableURLClassLoader.Spec urlSpec = (MutableURLClassLoader.Spec) spec-->Line_8 $$ List<URL> cachedClassPath = new ArrayList<URL>(urlSpec.getClasspath().size())[ FD ]
