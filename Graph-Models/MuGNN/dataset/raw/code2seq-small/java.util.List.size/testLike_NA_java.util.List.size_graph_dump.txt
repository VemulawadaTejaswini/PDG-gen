Line_3 $$ Session session = openSession()-->Line_8 $$ session.save(obj)[ FD ]
Line_2 $$ public void testLike() -->Line_13 $$ session = openSession()[ CD ]
Line_2 $$ public void testLike() -->Line_20 $$ session.clear()[ CD ]
Line_3 $$ Session session = openSession()-->Line_22 $$ objects = session.createCriteria(TestObject.class).add(StringExpression.stringExpression("text", pattern, true)).list()[ FD ]
Line_15 $$ List objects = session.createCriteria(TestObject.class).add(Restrictions.like("text", pattern)).list()-->Line_22 $$ objects = session.createCriteria(TestObject.class).add(StringExpression.stringExpression("text", pattern, true)).list()[ FD ]
Line_3 $$ Session session = openSession()-->Line_4 $$ Transaction tx = session.beginTransaction()[ FD ]
Line_15 $$ List objects = session.createCriteria(TestObject.class).add(Restrictions.like("text", pattern)).list()-->Line_19 $$ assertEquals(1, objects.size())[ FD ]
Line_3 $$ Session session = openSession()-->Line_24 $$ session.clear()[ FD ]
Line_13 $$ session = openSession()-->Line_14 $$ tx = session.beginTransaction()[ FD ]
Line_15 $$ List objects = session.createCriteria(TestObject.class).add(Restrictions.like("text", pattern)).list()-->Line_25 $$ objects = session.createCriteria(TestObject.class).add(StringExpression.stringExpression("text", pattern, false)).list()[ FD ]
Line_2 $$ public void testLike() -->Line_28 $$ tx.rollback()[ CD ]
Line_21 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof PostgreSQLDialect) && !(getDialect() instanceof PostgreSQL81Dialect)) -->Line_22 $$ objects = session.createCriteria(TestObject.class).add(StringExpression.stringExpression("text", pattern, true)).list()[ CD ]
Line_14 $$ tx = session.beginTransaction()-->Line_28 $$ tx.rollback()[ FD ]
Line_2 $$ public void testLike() -->Line_3 $$ Session session = openSession()[ CD ]
Line_4 $$ Transaction tx = session.beginTransaction()-->Line_28 $$ tx.rollback()[ FD ]
Line_18 $$ objects = session.createCriteria(TestObject.class).add(Restrictions.like("text", pattern).ignoreCase()).list()-->Line_25 $$ objects = session.createCriteria(TestObject.class).add(StringExpression.stringExpression("text", pattern, false)).list()[ FD ]
Line_2 $$ public void testLike() -->Line_18 $$ objects = session.createCriteria(TestObject.class).add(Restrictions.like("text", pattern).ignoreCase()).list()[ CD ]
Line_4 $$ Transaction tx = session.beginTransaction()-->Line_10 $$ tx.commit()[ FD ]
Line_2 $$ public void testLike() -->Line_21 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof PostgreSQLDialect) && !(getDialect() instanceof PostgreSQL81Dialect)) [ CD ]
Line_12 $$ String pattern = "XyZ " + uniq + "%"-->Line_22 $$ objects = session.createCriteria(TestObject.class).add(StringExpression.stringExpression("text", pattern, true)).list()[ FD ]
Line_2 $$ public void testLike() -->Line_17 $$ session.clear()[ CD ]
Line_2 $$ public void testLike() -->Line_19 $$ assertEquals(1, objects.size())[ CD ]
Line_3 $$ Session session = openSession()-->Line_11 $$ session.close()[ FD ]
Line_12 $$ String pattern = "XyZ " + uniq + "%"-->Line_18 $$ objects = session.createCriteria(TestObject.class).add(Restrictions.like("text", pattern).ignoreCase()).list()[ FD ]
Line_13 $$ session = openSession()-->Line_15 $$ List objects = session.createCriteria(TestObject.class).add(Restrictions.like("text", pattern)).list()[ FD ]
Line_13 $$ session = openSession()-->Line_22 $$ objects = session.createCriteria(TestObject.class).add(StringExpression.stringExpression("text", pattern, true)).list()[ FD ]
Line_2 $$ public void testLike() -->Line_9 $$ session.flush()[ CD ]
Line_15 $$ List objects = session.createCriteria(TestObject.class).add(Restrictions.like("text", pattern)).list()-->Line_26 $$ assertEquals(1, objects.size())[ FD ]
Line_2 $$ public void testLike() -->Line_16 $$ assertEquals(1, objects.size())[ CD ]
Line_12 $$ String pattern = "XyZ " + uniq + "%"-->Line_25 $$ objects = session.createCriteria(TestObject.class).add(StringExpression.stringExpression("text", pattern, false)).list()[ FD ]
Line_2 $$ public void testLike() -->Line_8 $$ session.save(obj)[ CD ]
Line_21 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof PostgreSQLDialect) && !(getDialect() instanceof PostgreSQL81Dialect)) -->Line_23 $$ assertEquals(1, objects.size())[ CD ]
Line_2 $$ public void testLike() -->Line_14 $$ tx = session.beginTransaction()[ CD ]
Line_5 $$ TestObject obj = new TestObject()-->Line_8 $$ session.save(obj)[ FD ]
Line_21 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof PostgreSQLDialect) && !(getDialect() instanceof PostgreSQL81Dialect)) -->Line_25 $$ objects = session.createCriteria(TestObject.class).add(StringExpression.stringExpression("text", pattern, false)).list()[ CD ]
Line_2 $$ public void testLike() -->Line_6 $$ String uniq = "uniq" + System.currentTimeMillis()[ CD ]
Line_3 $$ Session session = openSession()-->Line_20 $$ session.clear()[ FD ]
Line_13 $$ session = openSession()-->Line_24 $$ session.clear()[ FD ]
Line_5 $$ TestObject obj = new TestObject()-->Line_7 $$ obj.setText("XyZ " + uniq + " blablabla")[ FD ]
Line_13 $$ session = openSession()-->Line_20 $$ session.clear()[ FD ]
Line_3 $$ Session session = openSession()-->Line_15 $$ List objects = session.createCriteria(TestObject.class).add(Restrictions.like("text", pattern)).list()[ FD ]
Line_15 $$ List objects = session.createCriteria(TestObject.class).add(Restrictions.like("text", pattern)).list()-->Line_23 $$ assertEquals(1, objects.size())[ FD ]
Line_15 $$ List objects = session.createCriteria(TestObject.class).add(Restrictions.like("text", pattern)).list()-->Line_16 $$ assertEquals(1, objects.size())[ FD ]
Line_21 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof PostgreSQLDialect) && !(getDialect() instanceof PostgreSQL81Dialect)) -->Line_24 $$ session.clear()[ CD ]
Line_13 $$ session = openSession()-->Line_25 $$ objects = session.createCriteria(TestObject.class).add(StringExpression.stringExpression("text", pattern, false)).list()[ FD ]
Line_2 $$ public void testLike() -->Line_29 $$ session.close()[ CD ]
Line_13 $$ session = openSession()-->Line_17 $$ session.clear()[ FD ]
Line_2 $$ public void testLike() -->Line_15 $$ List objects = session.createCriteria(TestObject.class).add(Restrictions.like("text", pattern)).list()[ CD ]
Line_3 $$ Session session = openSession()-->Line_13 $$ session = openSession()[ FD ]
Line_3 $$ Session session = openSession()-->Line_25 $$ objects = session.createCriteria(TestObject.class).add(StringExpression.stringExpression("text", pattern, false)).list()[ FD ]
Line_21 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof PostgreSQLDialect) && !(getDialect() instanceof PostgreSQL81Dialect)) -->Line_26 $$ assertEquals(1, objects.size())[ CD ]
Line_2 $$ public void testLike() -->Line_7 $$ obj.setText("XyZ " + uniq + " blablabla")[ CD ]
Line_25 $$ objects = session.createCriteria(TestObject.class).add(StringExpression.stringExpression("text", pattern, false)).list()-->Line_26 $$ assertEquals(1, objects.size())[ FD ]
Line_3 $$ Session session = openSession()-->Line_9 $$ session.flush()[ FD ]
Line_3 $$ Session session = openSession()-->Line_18 $$ objects = session.createCriteria(TestObject.class).add(Restrictions.like("text", pattern).ignoreCase()).list()[ FD ]
Line_2 $$ public void testLike() -->Line_12 $$ String pattern = "XyZ " + uniq + "%"[ CD ]
Line_18 $$ objects = session.createCriteria(TestObject.class).add(Restrictions.like("text", pattern).ignoreCase()).list()-->Line_19 $$ assertEquals(1, objects.size())[ FD ]
Line_13 $$ session = openSession()-->Line_29 $$ session.close()[ FD ]
Line_3 $$ Session session = openSession()-->Line_17 $$ session.clear()[ FD ]
Line_18 $$ objects = session.createCriteria(TestObject.class).add(Restrictions.like("text", pattern).ignoreCase()).list()-->Line_23 $$ assertEquals(1, objects.size())[ FD ]
Line_2 $$ public void testLike() -->Line_5 $$ TestObject obj = new TestObject()[ CD ]
Line_18 $$ objects = session.createCriteria(TestObject.class).add(Restrictions.like("text", pattern).ignoreCase()).list()-->Line_22 $$ objects = session.createCriteria(TestObject.class).add(StringExpression.stringExpression("text", pattern, true)).list()[ FD ]
Line_2 $$ public void testLike() -->Line_10 $$ tx.commit()[ CD ]
Line_22 $$ objects = session.createCriteria(TestObject.class).add(StringExpression.stringExpression("text", pattern, true)).list()-->Line_25 $$ objects = session.createCriteria(TestObject.class).add(StringExpression.stringExpression("text", pattern, false)).list()[ FD ]
Line_18 $$ objects = session.createCriteria(TestObject.class).add(Restrictions.like("text", pattern).ignoreCase()).list()-->Line_26 $$ assertEquals(1, objects.size())[ FD ]
Line_2 $$ public void testLike() -->Line_11 $$ session.close()[ CD ]
Line_13 $$ session = openSession()-->Line_18 $$ objects = session.createCriteria(TestObject.class).add(Restrictions.like("text", pattern).ignoreCase()).list()[ FD ]
Line_22 $$ objects = session.createCriteria(TestObject.class).add(StringExpression.stringExpression("text", pattern, true)).list()-->Line_26 $$ assertEquals(1, objects.size())[ FD ]
Line_15 $$ List objects = session.createCriteria(TestObject.class).add(Restrictions.like("text", pattern)).list()-->Line_18 $$ objects = session.createCriteria(TestObject.class).add(Restrictions.like("text", pattern).ignoreCase()).list()[ FD ]
Line_22 $$ objects = session.createCriteria(TestObject.class).add(StringExpression.stringExpression("text", pattern, true)).list()-->Line_23 $$ assertEquals(1, objects.size())[ FD ]
Line_3 $$ Session session = openSession()-->Line_14 $$ tx = session.beginTransaction()[ FD ]
Line_12 $$ String pattern = "XyZ " + uniq + "%"-->Line_15 $$ List objects = session.createCriteria(TestObject.class).add(Restrictions.like("text", pattern)).list()[ FD ]
Line_2 $$ public void testLike() -->Line_4 $$ Transaction tx = session.beginTransaction()[ CD ]
Line_4 $$ Transaction tx = session.beginTransaction()-->Line_14 $$ tx = session.beginTransaction()[ FD ]
Line_3 $$ Session session = openSession()-->Line_29 $$ session.close()[ FD ]
