Line_137 $$ for (int iterations = scaledRandomIntBetween(10, 200); iterations > 0 && errors.isEmpty(); iterations--) -->Line_139 $$ while (writtenOpsLatch.get().await(200, TimeUnit.MILLISECONDS) == false) [ CD ]
Line_104 $$ while ((op = snapshot.next()) != null) -->Line_105 $$ expectedOps.remove(op)[ FD ]
Line_94 $$ while (run.get()) -->Line_108 $$ if (expectedOps.isEmpty() == false) [ CD ]
Line_22 $$ writers[i] = new Thread(new AbstractRunnable() -->Line_56 $$ errors.add(t)[ FD ]
Line_34 $$ op = new Translog.Index("type", "" + id, new byte[] -->Line_37 $$ op = new Translog.Delete(newUid("" + id))[ FD ]
Line_103 $$ Translog.Operation op-->Line_104 $$ while ((op = snapshot.next()) != null) [ FD ]
Line_34 $$ op = new Translog.Index("type", "" + id, new byte[] -->Line_42 $$ Translog.Location location = translog.add(op)[ FD ]
Line_28 $$ while (run.get()) -->Line_43 $$ Translog.Location existing = writtenOps.put(op, location)[ CD ]
Line_12 $$ final CyclicBarrier barrier = new CyclicBarrier(writers.length + readers.length + 1)-->Line_26 $$ barrier.await()[ FD ]
Line_42 $$ Translog.Location location = translog.add(op)-->Line_43 $$ Translog.Location existing = writtenOps.put(op, location)[ FD ]
Line_37 $$ op = new Translog.Delete(newUid("" + id))-->Line_105 $$ expectedOps.remove(op)[ FD ]
Line_34 $$ op = new Translog.Index("type", "" + id, new byte[] -->Line_104 $$ while ((op = snapshot.next()) != null) [ FD ]
Line_63 $$ readers[i] = new Thread(new AbstractRunnable() -->Line_73 $$ closeView()[ CD ]
Line_94 $$ while (run.get()) -->Line_101 $$ expectedOps.removeAll(writtenOpsAtView)[ CD ]
Line_20 $$ for (int i = 0; i < writers.length; i++) -->Line_22 $$ writers[i] = new Thread(new AbstractRunnable() [ CD ]
Line_30 $$ final Translog.Operation op-->Line_105 $$ expectedOps.remove(op)[ FD ]
Line_34 $$ op = new Translog.Index("type", "" + id, new byte[] -->Line_43 $$ Translog.Location existing = writtenOps.put(op, location)[ FD ]
Line_61 $$ for (int i = 0; i < readers.length; i++) -->Line_62 $$ final String threadId = "reader_" + i[ CD ]
Line_22 $$ writers[i] = new Thread(new AbstractRunnable() -->Line_26 $$ barrier.await()[ CD ]
Line_12 $$ final CyclicBarrier barrier = new CyclicBarrier(writers.length + readers.length + 1)-->Line_135 $$ barrier.await()[ FD ]
Line_61 $$ for (int i = 0; i < readers.length; i++) -->Line_63 $$ readers[i] = new Thread(new AbstractRunnable() [ CD ]
Line_104 $$ while ((op = snapshot.next()) != null) -->Line_105 $$ expectedOps.remove(op)[ CD ]
Line_108 $$ if (expectedOps.isEmpty() == false) -->Line_122 $$ if (failed) [ CD ]
Line_122 $$ if (failed) -->Line_123 $$ fail(missed.toString())[ CD ]
Line_22 $$ writers[i] = new Thread(new AbstractRunnable() -->Line_27 $$ int counter = 0[ CD ]
Line_63 $$ readers[i] = new Thread(new AbstractRunnable() -->Line_72 $$ errors.add(t)[ FD ]
Line_63 $$ readers[i] = new Thread(new AbstractRunnable() -->Line_77 $$ if (view != null) [ CD ]
Line_63 $$ readers[i] = new Thread(new AbstractRunnable() -->Line_129 $$ closeView()[ CD ]
Line_28 $$ while (run.get()) -->Line_44 $$ if (existing != null) [ CD ]
Line_37 $$ op = new Translog.Delete(newUid("" + id))-->Line_42 $$ Translog.Location location = translog.add(op)[ FD ]
Line_44 $$ if (existing != null) -->Line_45 $$ fail("duplicate op [" + op + "], old entry at " + location)[ CD ]
Line_11 $$ final AtomicLong idGenerator = new AtomicLong()-->Line_29 $$ long id = idGenerator.incrementAndGet()[ FD ]
Line_63 $$ readers[i] = new Thread(new AbstractRunnable() -->Line_72 $$ errors.add(t)[ CD ]
Line_93 $$ int iter = 0-->Line_95 $$ if (iter++ % 10 == 0) [ FD ]
Line_22 $$ writers[i] = new Thread(new AbstractRunnable() -->Line_72 $$ errors.add(t)[ FD ]
Line_102 $$ try (Translog.Snapshot snapshot = view.snapshot()) -->Line_104 $$ while ((op = snapshot.next()) != null) [ FD ]
Line_63 $$ readers[i] = new Thread(new AbstractRunnable() -->Line_94 $$ while (run.get()) [ CD ]
Line_37 $$ op = new Translog.Delete(newUid("" + id))-->Line_112 $$ final Translog.Location loc = writtenOps.get(op)[ FD ]
Line_61 $$ for (int i = 0; i < readers.length; i++) -->Line_133 $$ readers[i].start()[ CD ]
Line_34 $$ op = new Translog.Index("type", "" + id, new byte[] -->Line_112 $$ final Translog.Location loc = writtenOps.get(op)[ FD ]
Line_28 $$ while (run.get()) -->Line_30 $$ final Translog.Operation op[ CD ]
Line_103 $$ Translog.Operation op-->Line_112 $$ final Translog.Location loc = writtenOps.get(op)[ FD ]
Line_8 $$ final int flushEveryOps = randomIntBetween(5, 100)-->Line_19 $$ logger.debug("using [[ FD ]
Line_28 $$ while (run.get()) -->Line_48 $$ counter++[ CD ]
Line_28 $$ while (run.get()) -->Line_47 $$ writtenOpsLatch.get().countDown()[ CD ]
Line_63 $$ readers[i] = new Thread(new AbstractRunnable() -->Line_92 $$ barrier.await()[ CD ]
Line_137 $$ for (int iterations = scaledRandomIntBetween(10, 200); iterations > 0 && errors.isEmpty(); iterations--) -->Line_144 $$ translog.commit()[ CD ]
Line_30 $$ final Translog.Operation op-->Line_37 $$ op = new Translog.Delete(newUid("" + id))[ FD ]
Line_43 $$ Translog.Location existing = writtenOps.put(op, location)-->Line_44 $$ if (existing != null) [ FD ]
Line_63 $$ readers[i] = new Thread(new AbstractRunnable() -->Line_83 $$ closeView()[ CD ]
Line_108 $$ if (expectedOps.isEmpty() == false) -->Line_109 $$ StringBuilder missed = new StringBuilder("missed ").append(expectedOps.size()).append(" operations")[ CD ]
Line_27 $$ int counter = 0-->Line_48 $$ counter++[ FD ]
Line_155 $$ if (errors.size() > 0) -->Line_156 $$ Throwable e = errors.get(0)[ CD ]
Line_30 $$ final Translog.Operation op-->Line_43 $$ Translog.Location existing = writtenOps.put(op, location)[ FD ]
Line_37 $$ op = new Translog.Delete(newUid("" + id))-->Line_104 $$ while ((op = snapshot.next()) != null) [ FD ]
Line_30 $$ final Translog.Operation op-->Line_112 $$ final Translog.Location loc = writtenOps.get(op)[ FD ]
Line_34 $$ op = new Translog.Index("type", "" + id, new byte[] -->Line_105 $$ expectedOps.remove(op)[ FD ]
Line_104 $$ while ((op = snapshot.next()) != null) -->Line_112 $$ final Translog.Location loc = writtenOps.get(op)[ FD ]
Line_22 $$ writers[i] = new Thread(new AbstractRunnable() -->Line_56 $$ errors.add(t)[ CD ]
Line_63 $$ readers[i] = new Thread(new AbstractRunnable() -->Line_84 $$ view = translog.newView()[ CD ]
Line_30 $$ final Translog.Operation op-->Line_42 $$ Translog.Location location = translog.add(op)[ FD ]
Line_28 $$ while (run.get()) -->Line_29 $$ long id = idGenerator.incrementAndGet()[ CD ]
Line_20 $$ for (int i = 0; i < writers.length; i++) -->Line_61 $$ for (int i = 0; i < readers.length; i++) [ FD ]
Line_12 $$ final CyclicBarrier barrier = new CyclicBarrier(writers.length + readers.length + 1)-->Line_92 $$ barrier.await()[ FD ]
Line_30 $$ final Translog.Operation op-->Line_34 $$ op = new Translog.Index("type", "" + id, new byte[] [ FD ]
Line_28 $$ while (run.get()) -->Line_42 $$ Translog.Location location = translog.add(op)[ CD ]
Line_137 $$ for (int iterations = scaledRandomIntBetween(10, 200); iterations > 0 && errors.isEmpty(); iterations--) -->Line_138 $$ writtenOpsLatch.set(new CountDownLatch(flushEveryOps))[ CD ]
Line_20 $$ for (int i = 0; i < writers.length; i++) -->Line_59 $$ writers[i].start()[ CD ]
Line_22 $$ writers[i] = new Thread(new AbstractRunnable() -->Line_28 $$ while (run.get()) [ CD ]
Line_37 $$ op = new Translog.Delete(newUid("" + id))-->Line_43 $$ Translog.Location existing = writtenOps.put(op, location)[ FD ]
Line_103 $$ Translog.Operation op-->Line_105 $$ expectedOps.remove(op)[ FD ]
Line_95 $$ if (iter++ % 10 == 0) -->Line_96 $$ newView()[ CD ]
Line_20 $$ for (int i = 0; i < writers.length; i++) -->Line_21 $$ final String threadId = "writer_" + i[ CD ]
Line_30 $$ final Translog.Operation op-->Line_104 $$ while ((op = snapshot.next()) != null) [ FD ]
Line_77 $$ if (view != null) -->Line_78 $$ view.close()[ CD ]
Line_63 $$ readers[i] = new Thread(new AbstractRunnable() -->Line_93 $$ int iter = 0[ CD ]
Line_139 $$ while (writtenOpsLatch.get().await(200, TimeUnit.MILLISECONDS) == false) -->Line_140 $$ if (errors.size() > 0) [ CD ]
Line_94 $$ while (run.get()) -->Line_95 $$ if (iter++ % 10 == 0) [ CD ]
