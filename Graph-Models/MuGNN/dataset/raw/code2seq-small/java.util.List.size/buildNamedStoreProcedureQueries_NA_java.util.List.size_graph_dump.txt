Line_13 $$ List<Element> elements = subElement.elements("parameter")-->Line_54 $$ elements = subElement.elements("hint")[ FD ]
Line_25 $$ Class clazz-->Line_41 $$ clazz = classLoaderAccess.classForName(XMLContext.buildSafeClassName(clazzName, defaults))[ FD ]
Line_13 $$ List<Element> elements = subElement.elements("parameter")-->Line_35 $$ elements = subElement.elements("result-class")[ FD ]
Line_10 $$ AnnotationDescriptor ann = new AnnotationDescriptor(NamedStoredProcedureQuery.class)-->Line_34 $$ ann.setValue("parameters", storedProcedureParameters.toArray(new StoredProcedureParameter[storedProcedureParameters.size()]))[ FD ]
Line_24 $$ String clazzName = parameterElement.attributeValue("class")-->Line_41 $$ clazz = classLoaderAccess.classForName(XMLContext.buildSafeClassName(clazzName, defaults))[ FD ]
Line_27 $$ clazz = classLoaderAccess.classForName(XMLContext.buildSafeClassName(clazzName, defaults))-->Line_31 $$ parameterDescriptor.setValue("type", clazz)[ FD ]
Line_35 $$ elements = subElement.elements("result-class")-->Line_48 $$ elements = subElement.elements("result-set-mapping")[ FD ]
Line_2 $$ public static List<NamedStoredProcedureQuery> buildNamedStoreProcedureQueries(Element element, XMLContext.Default defaults, ClassLoaderAccess classLoaderAccess) -->Line_27 $$ clazz = classLoaderAccess.classForName(XMLContext.buildSafeClassName(clazzName, defaults))[ FD ]
Line_49 $$ List<String> resultSetMappings = new ArrayList<String>()-->Line_53 $$ ann.setValue("resultSetMappings", resultSetMappings.toArray(new String[resultSetMappings.size()]))[ FD ]
Line_49 $$ List<String> resultSetMappings = new ArrayList<String>()-->Line_51 $$ resultSetMappings.add(resultSetMappingElement.getTextTrim())[ FD ]
Line_13 $$ List<Element> elements = subElement.elements("parameter")-->Line_55 $$ buildQueryHints(elements, ann)[ FD ]
Line_2 $$ public static List<NamedStoredProcedureQuery> buildNamedStoreProcedureQueries(Element element, XMLContext.Default defaults, ClassLoaderAccess classLoaderAccess) -->Line_3 $$ if (element == null) [ CD ]
Line_19 $$ if (modeValue == null) -->Line_20 $$ parameterDescriptor.setValue("mode", ParameterMode.IN)[ CD ]
Line_24 $$ String clazzName = parameterElement.attributeValue("class")-->Line_27 $$ clazz = classLoaderAccess.classForName(XMLContext.buildSafeClassName(clazzName, defaults))[ FD ]
Line_2 $$ public static List<NamedStoredProcedureQuery> buildNamedStoreProcedureQueries(Element element, XMLContext.Default defaults, ClassLoaderAccess classLoaderAccess) -->Line_41 $$ clazz = classLoaderAccess.classForName(XMLContext.buildSafeClassName(clazzName, defaults))[ FD ]
Line_27 $$ clazz = classLoaderAccess.classForName(XMLContext.buildSafeClassName(clazzName, defaults))-->Line_41 $$ clazz = classLoaderAccess.classForName(XMLContext.buildSafeClassName(clazzName, defaults))[ FD ]
Line_18 $$ String modeValue = parameterElement.attributeValue("mode")-->Line_19 $$ if (modeValue == null) [ FD ]
Line_3 $$ if (element == null) -->Line_4 $$ return new ArrayList<NamedStoredProcedureQuery>()[ CD ]
Line_48 $$ elements = subElement.elements("result-set-mapping")-->Line_55 $$ buildQueryHints(elements, ann)[ FD ]
Line_10 $$ AnnotationDescriptor ann = new AnnotationDescriptor(NamedStoredProcedureQuery.class)-->Line_12 $$ copyStringAttribute(ann, subElement, "procedure-name", true)[ FD ]
Line_25 $$ Class clazz-->Line_27 $$ clazz = classLoaderAccess.classForName(XMLContext.buildSafeClassName(clazzName, defaults))[ FD ]
Line_37 $$ for (Element classElement : elements) -->Line_38 $$ String clazzName = classElement.getTextTrim()[ FD ]
Line_9 $$ Element subElement = (Element) obj-->Line_11 $$ copyStringAttribute(ann, subElement, "name", true)[ FD ]
Line_10 $$ AnnotationDescriptor ann = new AnnotationDescriptor(NamedStoredProcedureQuery.class)-->Line_55 $$ buildQueryHints(elements, ann)[ FD ]
Line_9 $$ Element subElement = (Element) obj-->Line_54 $$ elements = subElement.elements("hint")[ FD ]
Line_36 $$ List<Class> returnClasses = new ArrayList<Class>()-->Line_45 $$ returnClasses.add(clazz)[ FD ]
Line_41 $$ clazz = classLoaderAccess.classForName(XMLContext.buildSafeClassName(clazzName, defaults))-->Line_45 $$ returnClasses.add(clazz)[ FD ]
Line_9 $$ Element subElement = (Element) obj-->Line_48 $$ elements = subElement.elements("result-set-mapping")[ FD ]
Line_25 $$ Class clazz-->Line_45 $$ returnClasses.add(clazz)[ FD ]
Line_10 $$ AnnotationDescriptor ann = new AnnotationDescriptor(NamedStoredProcedureQuery.class)-->Line_53 $$ ann.setValue("resultSetMappings", resultSetMappings.toArray(new String[resultSetMappings.size()]))[ FD ]
Line_9 $$ Element subElement = (Element) obj-->Line_13 $$ List<Element> elements = subElement.elements("parameter")[ FD ]
Line_35 $$ elements = subElement.elements("result-class")-->Line_54 $$ elements = subElement.elements("hint")[ FD ]
Line_7 $$ List<NamedStoredProcedureQuery> namedStoredProcedureQueries = new ArrayList<NamedStoredProcedureQuery>()-->Line_56 $$ namedStoredProcedureQueries.add((NamedStoredProcedureQuery) AnnotationFactory.create(ann))[ FD ]
Line_10 $$ AnnotationDescriptor ann = new AnnotationDescriptor(NamedStoredProcedureQuery.class)-->Line_47 $$ ann.setValue("resultClasses", returnClasses.toArray(new Class[returnClasses.size()]))[ FD ]
Line_15 $$ for (Element parameterElement : elements) -->Line_18 $$ String modeValue = parameterElement.attributeValue("mode")[ FD ]
Line_10 $$ AnnotationDescriptor ann = new AnnotationDescriptor(NamedStoredProcedureQuery.class)-->Line_56 $$ namedStoredProcedureQueries.add((NamedStoredProcedureQuery) AnnotationFactory.create(ann))[ FD ]
Line_2 $$ public static List<NamedStoredProcedureQuery> buildNamedStoreProcedureQueries(Element element, XMLContext.Default defaults, ClassLoaderAccess classLoaderAccess) -->Line_6 $$ List namedStoredProcedureElements = element.elements("named-stored-procedure-query")[ CD ]
Line_2 $$ public static List<NamedStoredProcedureQuery> buildNamedStoreProcedureQueries(Element element, XMLContext.Default defaults, ClassLoaderAccess classLoaderAccess) -->Line_3 $$ if (element == null) [ FD ]
Line_16 $$ AnnotationDescriptor parameterDescriptor = new AnnotationDescriptor(StoredProcedureParameter.class)-->Line_31 $$ parameterDescriptor.setValue("type", clazz)[ FD ]
Line_48 $$ elements = subElement.elements("result-set-mapping")-->Line_54 $$ elements = subElement.elements("hint")[ FD ]
Line_15 $$ for (Element parameterElement : elements) -->Line_24 $$ String clazzName = parameterElement.attributeValue("class")[ FD ]
Line_2 $$ public static List<NamedStoredProcedureQuery> buildNamedStoreProcedureQueries(Element element, XMLContext.Default defaults, ClassLoaderAccess classLoaderAccess) -->Line_6 $$ List namedStoredProcedureElements = element.elements("named-stored-procedure-query")[ FD ]
Line_18 $$ String modeValue = parameterElement.attributeValue("mode")-->Line_22 $$ parameterDescriptor.setValue("mode", ParameterMode.valueOf(modeValue.toUpperCase(Locale.ROOT)))[ FD ]
Line_50 $$ for (Element resultSetMappingElement : elements) -->Line_51 $$ resultSetMappings.add(resultSetMappingElement.getTextTrim())[ FD ]
Line_19 $$ if (modeValue == null) -->Line_22 $$ parameterDescriptor.setValue("mode", ParameterMode.valueOf(modeValue.toUpperCase(Locale.ROOT)))[ CD ]
Line_16 $$ AnnotationDescriptor parameterDescriptor = new AnnotationDescriptor(StoredProcedureParameter.class)-->Line_17 $$ copyStringAttribute(parameterDescriptor, parameterElement, "name", false)[ FD ]
Line_35 $$ elements = subElement.elements("result-class")-->Line_55 $$ buildQueryHints(elements, ann)[ FD ]
Line_14 $$ List<StoredProcedureParameter> storedProcedureParameters = new ArrayList<StoredProcedureParameter>()-->Line_32 $$ storedProcedureParameters.add((StoredProcedureParameter) AnnotationFactory.create(parameterDescriptor))[ FD ]
Line_14 $$ List<StoredProcedureParameter> storedProcedureParameters = new ArrayList<StoredProcedureParameter>()-->Line_34 $$ ann.setValue("parameters", storedProcedureParameters.toArray(new StoredProcedureParameter[storedProcedureParameters.size()]))[ FD ]
Line_36 $$ List<Class> returnClasses = new ArrayList<Class>()-->Line_47 $$ ann.setValue("resultClasses", returnClasses.toArray(new Class[returnClasses.size()]))[ FD ]
Line_25 $$ Class clazz-->Line_31 $$ parameterDescriptor.setValue("type", clazz)[ FD ]
Line_15 $$ for (Element parameterElement : elements) -->Line_17 $$ copyStringAttribute(parameterDescriptor, parameterElement, "name", false)[ FD ]
Line_16 $$ AnnotationDescriptor parameterDescriptor = new AnnotationDescriptor(StoredProcedureParameter.class)-->Line_20 $$ parameterDescriptor.setValue("mode", ParameterMode.IN)[ FD ]
Line_9 $$ Element subElement = (Element) obj-->Line_12 $$ copyStringAttribute(ann, subElement, "procedure-name", true)[ FD ]
Line_9 $$ Element subElement = (Element) obj-->Line_35 $$ elements = subElement.elements("result-class")[ FD ]
Line_13 $$ List<Element> elements = subElement.elements("parameter")-->Line_48 $$ elements = subElement.elements("result-set-mapping")[ FD ]
Line_54 $$ elements = subElement.elements("hint")-->Line_55 $$ buildQueryHints(elements, ann)[ FD ]
Line_16 $$ AnnotationDescriptor parameterDescriptor = new AnnotationDescriptor(StoredProcedureParameter.class)-->Line_22 $$ parameterDescriptor.setValue("mode", ParameterMode.valueOf(modeValue.toUpperCase(Locale.ROOT)))[ FD ]
Line_27 $$ clazz = classLoaderAccess.classForName(XMLContext.buildSafeClassName(clazzName, defaults))-->Line_45 $$ returnClasses.add(clazz)[ FD ]
Line_10 $$ AnnotationDescriptor ann = new AnnotationDescriptor(NamedStoredProcedureQuery.class)-->Line_11 $$ copyStringAttribute(ann, subElement, "name", true)[ FD ]
Line_16 $$ AnnotationDescriptor parameterDescriptor = new AnnotationDescriptor(StoredProcedureParameter.class)-->Line_32 $$ storedProcedureParameters.add((StoredProcedureParameter) AnnotationFactory.create(parameterDescriptor))[ FD ]
Line_2 $$ public static List<NamedStoredProcedureQuery> buildNamedStoreProcedureQueries(Element element, XMLContext.Default defaults, ClassLoaderAccess classLoaderAccess) -->Line_7 $$ List<NamedStoredProcedureQuery> namedStoredProcedureQueries = new ArrayList<NamedStoredProcedureQuery>()[ CD ]
Line_2 $$ public static List<NamedStoredProcedureQuery> buildNamedStoreProcedureQueries(Element element, XMLContext.Default defaults, ClassLoaderAccess classLoaderAccess) -->Line_58 $$ return namedStoredProcedureQueries[ CD ]
