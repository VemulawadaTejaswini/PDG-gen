Line_2 $$ private static Function<HiveColumnHandle, ColumnMetadata> columnMetadataGetter(Table table, TypeManager typeManager) -->Line_4 $$ table.getPartitionKeys().stream().map(FieldSchema::<>getName).forEach(columnNames::<>add)[ CD ]
Line_2 $$ private static Function<HiveColumnHandle, ColumnMetadata> columnMetadataGetter(Table table, TypeManager typeManager) -->Line_18 $$ return  input -> new ColumnMetadata(input.getName(), typeManager.getType(input.getTypeSignature()), input.isPartitionKey(), columnComment.get(input.getName()), false)[ CD ]
Line_10 $$ List<FieldSchema> tableColumns = table.getSd().getCols()-->Line_12 $$ for (FieldSchema field : concat(tableColumns, table.getPartitionKeys())) [ FD ]
Line_2 $$ private static Function<HiveColumnHandle, ColumnMetadata> columnMetadataGetter(Table table, TypeManager typeManager) -->Line_7 $$ if (allColumnNames.size() > Sets.newHashSet(allColumnNames).size()) [ CD ]
Line_12 $$ for (FieldSchema field : concat(tableColumns, table.getPartitionKeys())) -->Line_14 $$ builder.put(field.getName(), field.getComment())[ FD ]
Line_12 $$ for (FieldSchema field : concat(tableColumns, table.getPartitionKeys())) -->Line_13 $$ if (field.getComment() != null) [ FD ]
Line_11 $$ ImmutableMap.Builder<String, String> builder = ImmutableMap.builder()-->Line_17 $$ Map<String, String> columnComment = builder.build()[ FD ]
Line_2 $$ private static Function<HiveColumnHandle, ColumnMetadata> columnMetadataGetter(Table table, TypeManager typeManager) -->Line_12 $$ for (FieldSchema field : concat(tableColumns, table.getPartitionKeys())) [ FD ]
Line_17 $$ Map<String, String> columnComment = builder.build()-->Line_18 $$ new ColumnMetadata(input.getName(), typeManager.getType(input.getTypeSignature()), input.isPartitionKey(), columnComment.get(input.getName()), false)[ FD ]
Line_2 $$ private static Function<HiveColumnHandle, ColumnMetadata> columnMetadataGetter(Table table, TypeManager typeManager) -->Line_10 $$ List<FieldSchema> tableColumns = table.getSd().getCols()[ FD ]
Line_2 $$ private static Function<HiveColumnHandle, ColumnMetadata> columnMetadataGetter(Table table, TypeManager typeManager) -->Line_5 $$ table.getSd().getCols().stream().map(FieldSchema::<>getName).forEach(columnNames::<>add)[ CD ]
Line_6 $$ List<String> allColumnNames = columnNames.build()-->Line_7 $$ if (allColumnNames.size() > Sets.newHashSet(allColumnNames).size()) [ FD ]
Line_2 $$ private static Function<HiveColumnHandle, ColumnMetadata> columnMetadataGetter(Table table, TypeManager typeManager) -->Line_11 $$ ImmutableMap.Builder<String, String> builder = ImmutableMap.builder()[ CD ]
Line_2 $$ private static Function<HiveColumnHandle, ColumnMetadata> columnMetadataGetter(Table table, TypeManager typeManager) -->Line_8 $$ throw new PrestoException(HIVE_INVALID_METADATA, format("Hive metadata for table %s is invalid: Table descriptor contains duplicate columns", table.getTableName()))[ FD ]
Line_2 $$ private static Function<HiveColumnHandle, ColumnMetadata> columnMetadataGetter(Table table, TypeManager typeManager) -->Line_10 $$ List<FieldSchema> tableColumns = table.getSd().getCols()[ CD ]
Line_2 $$ private static Function<HiveColumnHandle, ColumnMetadata> columnMetadataGetter(Table table, TypeManager typeManager) -->Line_4 $$ table.getPartitionKeys().stream().map(FieldSchema::<>getName).forEach(columnNames::<>add)[ FD ]
Line_11 $$ ImmutableMap.Builder<String, String> builder = ImmutableMap.builder()-->Line_14 $$ builder.put(field.getName(), field.getComment())[ FD ]
Line_3 $$ ImmutableList.Builder<String> columnNames = ImmutableList.builder()-->Line_6 $$ List<String> allColumnNames = columnNames.build()[ FD ]
Line_2 $$ private static Function<HiveColumnHandle, ColumnMetadata> columnMetadataGetter(Table table, TypeManager typeManager) -->Line_5 $$ table.getSd().getCols().stream().map(FieldSchema::<>getName).forEach(columnNames::<>add)[ FD ]
Line_2 $$ private static Function<HiveColumnHandle, ColumnMetadata> columnMetadataGetter(Table table, TypeManager typeManager) -->Line_6 $$ List<String> allColumnNames = columnNames.build()[ CD ]
Line_2 $$ private static Function<HiveColumnHandle, ColumnMetadata> columnMetadataGetter(Table table, TypeManager typeManager) -->Line_17 $$ Map<String, String> columnComment = builder.build()[ CD ]
Line_2 $$ private static Function<HiveColumnHandle, ColumnMetadata> columnMetadataGetter(Table table, TypeManager typeManager) -->Line_18 $$ new ColumnMetadata(input.getName(), typeManager.getType(input.getTypeSignature()), input.isPartitionKey(), columnComment.get(input.getName()), false)[ FD ]
Line_13 $$ if (field.getComment() != null) -->Line_14 $$ builder.put(field.getName(), field.getComment())[ CD ]
Line_2 $$ private static Function<HiveColumnHandle, ColumnMetadata> columnMetadataGetter(Table table, TypeManager typeManager) -->Line_3 $$ ImmutableList.Builder<String> columnNames = ImmutableList.builder()[ CD ]
