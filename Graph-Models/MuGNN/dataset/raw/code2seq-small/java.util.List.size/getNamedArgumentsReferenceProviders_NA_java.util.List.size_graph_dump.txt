Line_12 $$ List<String> values = new ArrayList<String>()-->Line_14 $$ values.add(st.nextToken())[ FD ]
Line_16 $$ r = new NamedArgumentReference(values.toArray(new String[values.size()]))-->Line_21 $$ Object oldValue = res.put(name, r)[ FD ]
Line_8 $$ if (argument.referenceProvider != null) -->Line_11 $$ if (argument.values != null) [ CD ]
Line_13 $$ for (StringTokenizer st = new StringTokenizer(argument.values, " ,;"); st.hasMoreTokens(); ) -->Line_14 $$ values.add(st.nextToken())[ CD ]
Line_13 $$ for (StringTokenizer st = new StringTokenizer(argument.values, " ,;"); st.hasMoreTokens(); ) -->Line_14 $$ values.add(st.nextToken())[ FD ]
Line_2 $$ private static Map<String, NamedArgumentReference> getNamedArgumentsReferenceProviders(GroovyMethodDescriptor methodDescriptor) -->Line_3 $$ if (methodDescriptor.myArguments == null)[ CD ]
Line_7 $$ NamedArgumentReference r-->Line_21 $$ Object oldValue = res.put(name, r)[ FD ]
Line_12 $$ List<String> values = new ArrayList<String>()-->Line_16 $$ r = new NamedArgumentReference(values.toArray(new String[values.size()]))[ FD ]
Line_7 $$ NamedArgumentReference r-->Line_16 $$ r = new NamedArgumentReference(values.toArray(new String[values.size()]))[ FD ]
Line_5 $$ Map<String, NamedArgumentReference> res = new HashMap<String, NamedArgumentReference>()-->Line_21 $$ Object oldValue = res.put(name, r)[ FD ]
Line_11 $$ if (argument.values != null) -->Line_13 $$ for (StringTokenizer st = new StringTokenizer(argument.values, " ,;"); st.hasMoreTokens(); ) [ CD ]
Line_3 $$ if (methodDescriptor.myArguments == null)-->Line_4 $$ return Collections.emptyMap()[ CD ]
Line_11 $$ if (argument.values != null) -->Line_12 $$ List<String> values = new ArrayList<String>()[ CD ]
Line_2 $$ private static Map<String, NamedArgumentReference> getNamedArgumentsReferenceProviders(GroovyMethodDescriptor methodDescriptor) -->Line_25 $$ return res[ CD ]
Line_2 $$ private static Map<String, NamedArgumentReference> getNamedArgumentsReferenceProviders(GroovyMethodDescriptor methodDescriptor) -->Line_5 $$ Map<String, NamedArgumentReference> res = new HashMap<String, NamedArgumentReference>()[ CD ]
Line_10 $$ r = new NamedArgumentReference(argument.referenceProvider)-->Line_16 $$ r = new NamedArgumentReference(values.toArray(new String[values.size()]))[ FD ]
Line_6 $$ for (GroovyMethodDescriptor.NamedArgument argument : methodDescriptor.myArguments) -->Line_20 $$ for (String name : argument.getNames()) [ FD ]
Line_7 $$ NamedArgumentReference r-->Line_10 $$ r = new NamedArgumentReference(argument.referenceProvider)[ FD ]
Line_20 $$ for (String name : argument.getNames()) -->Line_21 $$ Object oldValue = res.put(name, r)[ FD ]
Line_10 $$ r = new NamedArgumentReference(argument.referenceProvider)-->Line_21 $$ Object oldValue = res.put(name, r)[ FD ]
Line_11 $$ if (argument.values != null) -->Line_16 $$ r = new NamedArgumentReference(values.toArray(new String[values.size()]))[ CD ]
Line_8 $$ if (argument.referenceProvider != null) -->Line_10 $$ r = new NamedArgumentReference(argument.referenceProvider)[ CD ]
