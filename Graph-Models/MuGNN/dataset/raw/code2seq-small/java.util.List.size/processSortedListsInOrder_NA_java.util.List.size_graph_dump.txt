Line_16 $$ e = element1-->Line_23 $$ if (!processor.process(e))[ FD ]
Line_12 $$ T element1 = list1.get(index1)-->Line_16 $$ e = element1[ FD ]
Line_19 $$ e = element2-->Line_23 $$ if (!processor.process(e))[ FD ]
Line_2 $$ public static <T> boolean processSortedListsInOrder(@NotNull List<T> list1, @NotNull List<T> list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems, @NotNull Processor<T> processor) -->Line_32 $$ return true[ CD ]
Line_2 $$ public static <T> boolean processSortedListsInOrder(@NotNull List<T> list1, @NotNull List<T> list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems, @NotNull Processor<T> processor) -->Line_12 $$ T element1 = list1.get(index1)[ FD ]
Line_8 $$ e = list2.get(index2++)-->Line_19 $$ e = element2[ FD ]
Line_26 $$ e = element2-->Line_29 $$ if (!processor.process(e))[ FD ]
Line_6 $$ T e-->Line_16 $$ e = element1[ FD ]
Line_3 $$ int index1 = 0-->Line_10 $$ e = list1.get(index1++)[ FD ]
Line_4 $$ int index2 = 0-->Line_25 $$ index2++[ FD ]
Line_22 $$ if (c == 0 && !mergeEqualItems) -->Line_26 $$ e = element2[ CD ]
Line_6 $$ T e-->Line_23 $$ if (!processor.process(e))[ FD ]
Line_12 $$ T element1 = list1.get(index1)-->Line_14 $$ int c = comparator.compare(element1, element2)[ FD ]
Line_9 $$ if (index2 >= list2.size()) -->Line_10 $$ e = list1.get(index1++)[ CD ]
Line_10 $$ e = list1.get(index1++)-->Line_26 $$ e = element2[ FD ]
Line_3 $$ int index1 = 0-->Line_17 $$ index1++[ FD ]
Line_22 $$ if (c == 0 && !mergeEqualItems) -->Line_23 $$ if (!processor.process(e))[ CD ]
Line_9 $$ if (index2 >= list2.size()) -->Line_15 $$ if (c <= 0) [ CD ]
Line_2 $$ public static <T> boolean processSortedListsInOrder(@NotNull List<T> list1, @NotNull List<T> list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems, @NotNull Processor<T> processor) -->Line_29 $$ if (!processor.process(e))[ FD ]
Line_10 $$ e = list1.get(index1++)-->Line_23 $$ if (!processor.process(e))[ FD ]
Line_4 $$ int index2 = 0-->Line_9 $$ if (index2 >= list2.size()) [ FD ]
Line_9 $$ if (index2 >= list2.size()) -->Line_13 $$ T element2 = list2.get(index2)[ CD ]
Line_2 $$ public static <T> boolean processSortedListsInOrder(@NotNull List<T> list1, @NotNull List<T> list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems, @NotNull Processor<T> processor) -->Line_5 $$ while (index1 < list1.size() || index2 < list2.size()) [ CD ]
Line_2 $$ public static <T> boolean processSortedListsInOrder(@NotNull List<T> list1, @NotNull List<T> list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems, @NotNull Processor<T> processor) -->Line_5 $$ while (index1 < list1.size() || index2 < list2.size()) [ FD ]
Line_15 $$ if (c <= 0) -->Line_17 $$ index1++[ CD ]
Line_7 $$ if (index1 >= list1.size()) -->Line_8 $$ e = list2.get(index2++)[ CD ]
Line_6 $$ T e-->Line_8 $$ e = list2.get(index2++)[ FD ]
Line_15 $$ if (c <= 0) -->Line_19 $$ e = element2[ CD ]
Line_2 $$ public static <T> boolean processSortedListsInOrder(@NotNull List<T> list1, @NotNull List<T> list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems, @NotNull Processor<T> processor) -->Line_22 $$ if (c == 0 && !mergeEqualItems) [ FD ]
Line_10 $$ e = list1.get(index1++)-->Line_19 $$ e = element2[ FD ]
Line_16 $$ e = element1-->Line_26 $$ e = element2[ FD ]
Line_2 $$ public static <T> boolean processSortedListsInOrder(@NotNull List<T> list1, @NotNull List<T> list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems, @NotNull Processor<T> processor) -->Line_8 $$ e = list2.get(index2++)[ FD ]
Line_4 $$ int index2 = 0-->Line_8 $$ e = list2.get(index2++)[ FD ]
Line_8 $$ e = list2.get(index2++)-->Line_16 $$ e = element1[ FD ]
Line_2 $$ public static <T> boolean processSortedListsInOrder(@NotNull List<T> list1, @NotNull List<T> list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems, @NotNull Processor<T> processor) -->Line_3 $$ int index1 = 0[ CD ]
Line_22 $$ if (c == 0 && !mergeEqualItems) -->Line_25 $$ index2++[ CD ]
Line_5 $$ while (index1 < list1.size() || index2 < list2.size()) -->Line_6 $$ T e[ CD ]
Line_19 $$ e = element2-->Line_29 $$ if (!processor.process(e))[ FD ]
Line_8 $$ e = list2.get(index2++)-->Line_10 $$ e = list1.get(index1++)[ FD ]
Line_7 $$ if (index1 >= list1.size()) -->Line_9 $$ if (index2 >= list2.size()) [ CD ]
Line_9 $$ if (index2 >= list2.size()) -->Line_22 $$ if (c == 0 && !mergeEqualItems) [ CD ]
Line_13 $$ T element2 = list2.get(index2)-->Line_26 $$ e = element2[ FD ]
Line_2 $$ public static <T> boolean processSortedListsInOrder(@NotNull List<T> list1, @NotNull List<T> list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems, @NotNull Processor<T> processor) -->Line_23 $$ if (!processor.process(e))[ FD ]
Line_13 $$ T element2 = list2.get(index2)-->Line_19 $$ e = element2[ FD ]
Line_9 $$ if (index2 >= list2.size()) -->Line_12 $$ T element1 = list1.get(index1)[ CD ]
Line_26 $$ e = element2-->Line_23 $$ if (!processor.process(e))[ FD ]
Line_8 $$ e = list2.get(index2++)-->Line_26 $$ e = element2[ FD ]
Line_14 $$ int c = comparator.compare(element1, element2)-->Line_15 $$ if (c <= 0) [ FD ]
Line_16 $$ e = element1-->Line_29 $$ if (!processor.process(e))[ FD ]
Line_8 $$ e = list2.get(index2++)-->Line_29 $$ if (!processor.process(e))[ FD ]
Line_29 $$ if (!processor.process(e))-->Line_30 $$ return false[ CD ]
Line_10 $$ e = list1.get(index1++)-->Line_16 $$ e = element1[ FD ]
Line_4 $$ int index2 = 0-->Line_20 $$ index2++[ FD ]
Line_9 $$ if (index2 >= list2.size()) -->Line_14 $$ int c = comparator.compare(element1, element2)[ CD ]
Line_4 $$ int index2 = 0-->Line_13 $$ T element2 = list2.get(index2)[ FD ]
Line_2 $$ public static <T> boolean processSortedListsInOrder(@NotNull List<T> list1, @NotNull List<T> list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems, @NotNull Processor<T> processor) -->Line_7 $$ if (index1 >= list1.size()) [ FD ]
Line_2 $$ public static <T> boolean processSortedListsInOrder(@NotNull List<T> list1, @NotNull List<T> list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems, @NotNull Processor<T> processor) -->Line_9 $$ if (index2 >= list2.size()) [ FD ]
Line_3 $$ int index1 = 0-->Line_7 $$ if (index1 >= list1.size()) [ FD ]
Line_6 $$ T e-->Line_10 $$ e = list1.get(index1++)[ FD ]
Line_2 $$ public static <T> boolean processSortedListsInOrder(@NotNull List<T> list1, @NotNull List<T> list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems, @NotNull Processor<T> processor) -->Line_14 $$ int c = comparator.compare(element1, element2)[ FD ]
Line_5 $$ while (index1 < list1.size() || index2 < list2.size()) -->Line_7 $$ if (index1 >= list1.size()) [ CD ]
Line_19 $$ e = element2-->Line_26 $$ e = element2[ FD ]
Line_13 $$ T element2 = list2.get(index2)-->Line_14 $$ int c = comparator.compare(element1, element2)[ FD ]
Line_2 $$ public static <T> boolean processSortedListsInOrder(@NotNull List<T> list1, @NotNull List<T> list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems, @NotNull Processor<T> processor) -->Line_4 $$ int index2 = 0[ CD ]
Line_16 $$ e = element1-->Line_19 $$ e = element2[ FD ]
Line_23 $$ if (!processor.process(e))-->Line_24 $$ return false[ CD ]
Line_8 $$ e = list2.get(index2++)-->Line_23 $$ if (!processor.process(e))[ FD ]
Line_15 $$ if (c <= 0) -->Line_20 $$ index2++[ CD ]
Line_2 $$ public static <T> boolean processSortedListsInOrder(@NotNull List<T> list1, @NotNull List<T> list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems, @NotNull Processor<T> processor) -->Line_13 $$ T element2 = list2.get(index2)[ FD ]
Line_2 $$ public static <T> boolean processSortedListsInOrder(@NotNull List<T> list1, @NotNull List<T> list2, @NotNull Comparator<? super T> comparator, boolean mergeEqualItems, @NotNull Processor<T> processor) -->Line_10 $$ e = list1.get(index1++)[ FD ]
Line_6 $$ T e-->Line_26 $$ e = element2[ FD ]
Line_10 $$ e = list1.get(index1++)-->Line_29 $$ if (!processor.process(e))[ FD ]
Line_3 $$ int index1 = 0-->Line_12 $$ T element1 = list1.get(index1)[ FD ]
Line_5 $$ while (index1 < list1.size() || index2 < list2.size()) -->Line_29 $$ if (!processor.process(e))[ CD ]
Line_15 $$ if (c <= 0) -->Line_16 $$ e = element1[ CD ]
Line_6 $$ T e-->Line_29 $$ if (!processor.process(e))[ FD ]
Line_6 $$ T e-->Line_19 $$ e = element2[ FD ]
