Line_7 $$ if (lineInTheMiddle - 1 < 0) -->Line_10 $$ startDistance = getDistanceBack(lineInTheMiddle - 1, start)[ CD ]
Line_4 $$ final List<String> start = lines.subList(0, offsetInStep)-->Line_8 $$ startDistance = start.size()[ FD ]
Line_5 $$ int startDistance = 0-->Line_8 $$ startDistance = start.size()[ FD ]
Line_2 $$ private FragmentResult checkFragmented(final int lineInTheMiddle, final int offsetInStep, final BeforeAfter<List<String>> step, final boolean inBefore) -->Line_20 $$ fragmentResult.setStartAtEdge(startDistance == 0)[ CD ]
Line_5 $$ int startDistance = 0-->Line_10 $$ startDistance = getDistanceBack(lineInTheMiddle - 1, start)[ FD ]
Line_7 $$ if (lineInTheMiddle - 1 < 0) -->Line_8 $$ startDistance = start.size()[ CD ]
Line_2 $$ private FragmentResult checkFragmented(final int lineInTheMiddle, final int offsetInStep, final BeforeAfter<List<String>> step, final boolean inBefore) -->Line_21 $$ fragmentResult.setEndAtEdge(endDistance == 0)[ CD ]
Line_2 $$ private FragmentResult checkFragmented(final int lineInTheMiddle, final int offsetInStep, final BeforeAfter<List<String>> step, final boolean inBefore) -->Line_3 $$ final List<String> lines = inBefore ? step.getBefore() : step.getAfter()[ CD ]
Line_18 $$ final FragmentResult fragmentResult = new FragmentResult(lineInTheMiddle - (start.size() - startDistance), lineInTheMiddle + (end.size() - endDistance) - 1, !inBefore)-->Line_19 $$ fragmentResult.addDistance(startDistance + endDistance)[ FD ]
Line_3 $$ final List<String> lines = inBefore ? step.getBefore() : step.getAfter()-->Line_4 $$ final List<String> start = lines.subList(0, offsetInStep)[ FD ]
Line_2 $$ private FragmentResult checkFragmented(final int lineInTheMiddle, final int offsetInStep, final BeforeAfter<List<String>> step, final boolean inBefore) -->Line_15 $$ if (!end.isEmpty()) [ CD ]
Line_13 $$ final List<String> end = lines.subList(offsetInStep, lines.size())-->Line_18 $$ final FragmentResult fragmentResult = new FragmentResult(lineInTheMiddle - (start.size() - startDistance), lineInTheMiddle + (end.size() - endDistance) - 1, !inBefore)[ FD ]
Line_2 $$ private FragmentResult checkFragmented(final int lineInTheMiddle, final int offsetInStep, final BeforeAfter<List<String>> step, final boolean inBefore) -->Line_13 $$ final List<String> end = lines.subList(offsetInStep, lines.size())[ FD ]
Line_2 $$ private FragmentResult checkFragmented(final int lineInTheMiddle, final int offsetInStep, final BeforeAfter<List<String>> step, final boolean inBefore) -->Line_13 $$ final List<String> end = lines.subList(offsetInStep, lines.size())[ CD ]
Line_15 $$ if (!end.isEmpty()) -->Line_16 $$ endDistance = getDistance(lineInTheMiddle, end)[ CD ]
Line_18 $$ final FragmentResult fragmentResult = new FragmentResult(lineInTheMiddle - (start.size() - startDistance), lineInTheMiddle + (end.size() - endDistance) - 1, !inBefore)-->Line_20 $$ fragmentResult.setStartAtEdge(startDistance == 0)[ FD ]
Line_3 $$ final List<String> lines = inBefore ? step.getBefore() : step.getAfter()-->Line_13 $$ final List<String> end = lines.subList(offsetInStep, lines.size())[ FD ]
Line_14 $$ int endDistance = 0-->Line_16 $$ endDistance = getDistance(lineInTheMiddle, end)[ FD ]
Line_2 $$ private FragmentResult checkFragmented(final int lineInTheMiddle, final int offsetInStep, final BeforeAfter<List<String>> step, final boolean inBefore) -->Line_22 $$ return fragmentResult[ CD ]
Line_2 $$ private FragmentResult checkFragmented(final int lineInTheMiddle, final int offsetInStep, final BeforeAfter<List<String>> step, final boolean inBefore) -->Line_18 $$ final FragmentResult fragmentResult = new FragmentResult(lineInTheMiddle - (start.size() - startDistance), lineInTheMiddle + (end.size() - endDistance) - 1, !inBefore)[ CD ]
Line_13 $$ final List<String> end = lines.subList(offsetInStep, lines.size())-->Line_15 $$ if (!end.isEmpty()) [ FD ]
Line_2 $$ private FragmentResult checkFragmented(final int lineInTheMiddle, final int offsetInStep, final BeforeAfter<List<String>> step, final boolean inBefore) -->Line_5 $$ int startDistance = 0[ CD ]
Line_18 $$ final FragmentResult fragmentResult = new FragmentResult(lineInTheMiddle - (start.size() - startDistance), lineInTheMiddle + (end.size() - endDistance) - 1, !inBefore)-->Line_21 $$ fragmentResult.setEndAtEdge(endDistance == 0)[ FD ]
Line_2 $$ private FragmentResult checkFragmented(final int lineInTheMiddle, final int offsetInStep, final BeforeAfter<List<String>> step, final boolean inBefore) -->Line_14 $$ int endDistance = 0[ CD ]
Line_4 $$ final List<String> start = lines.subList(0, offsetInStep)-->Line_18 $$ final FragmentResult fragmentResult = new FragmentResult(lineInTheMiddle - (start.size() - startDistance), lineInTheMiddle + (end.size() - endDistance) - 1, !inBefore)[ FD ]
Line_2 $$ private FragmentResult checkFragmented(final int lineInTheMiddle, final int offsetInStep, final BeforeAfter<List<String>> step, final boolean inBefore) -->Line_3 $$ final List<String> lines = inBefore ? step.getBefore() : step.getAfter()[ FD ]
Line_13 $$ final List<String> end = lines.subList(offsetInStep, lines.size())-->Line_16 $$ endDistance = getDistance(lineInTheMiddle, end)[ FD ]
Line_2 $$ private FragmentResult checkFragmented(final int lineInTheMiddle, final int offsetInStep, final BeforeAfter<List<String>> step, final boolean inBefore) -->Line_19 $$ fragmentResult.addDistance(startDistance + endDistance)[ CD ]
Line_2 $$ private FragmentResult checkFragmented(final int lineInTheMiddle, final int offsetInStep, final BeforeAfter<List<String>> step, final boolean inBefore) -->Line_16 $$ endDistance = getDistance(lineInTheMiddle, end)[ FD ]
Line_2 $$ private FragmentResult checkFragmented(final int lineInTheMiddle, final int offsetInStep, final BeforeAfter<List<String>> step, final boolean inBefore) -->Line_4 $$ final List<String> start = lines.subList(0, offsetInStep)[ CD ]
Line_8 $$ startDistance = start.size()-->Line_10 $$ startDistance = getDistanceBack(lineInTheMiddle - 1, start)[ FD ]
Line_2 $$ private FragmentResult checkFragmented(final int lineInTheMiddle, final int offsetInStep, final BeforeAfter<List<String>> step, final boolean inBefore) -->Line_18 $$ final FragmentResult fragmentResult = new FragmentResult(lineInTheMiddle - (start.size() - startDistance), lineInTheMiddle + (end.size() - endDistance) - 1, !inBefore)[ FD ]
Line_6 $$ if (!start.isEmpty()) -->Line_7 $$ if (lineInTheMiddle - 1 < 0) [ CD ]
Line_2 $$ private FragmentResult checkFragmented(final int lineInTheMiddle, final int offsetInStep, final BeforeAfter<List<String>> step, final boolean inBefore) -->Line_6 $$ if (!start.isEmpty()) [ CD ]
Line_4 $$ final List<String> start = lines.subList(0, offsetInStep)-->Line_10 $$ startDistance = getDistanceBack(lineInTheMiddle - 1, start)[ FD ]
Line_2 $$ private FragmentResult checkFragmented(final int lineInTheMiddle, final int offsetInStep, final BeforeAfter<List<String>> step, final boolean inBefore) -->Line_4 $$ final List<String> start = lines.subList(0, offsetInStep)[ FD ]
Line_4 $$ final List<String> start = lines.subList(0, offsetInStep)-->Line_6 $$ if (!start.isEmpty()) [ FD ]
