Line_3 $$ final List<Object> objects = Collections.nCopies(1000000, null)-->Line_7 $$ boolean success = JobLauncher.getInstance().invokeConcurrentlyUnderProgress(objects, null, true, false, new Processor<Object>() [ FD ]
Line_2 $$ public void testJobUtilCompletesEvenIfCannotGrabReadAction() throws Throwable -->Line_4 $$ COUNT.set(0)[ CD ]
Line_5 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_14 $$ assertEquals(objects.size(), COUNT.get())[ CD ]
Line_2 $$ public void testJobUtilCompletesEvenIfCannotGrabReadAction() throws Throwable -->Line_3 $$ final List<Object> objects = Collections.nCopies(1000000, null)[ CD ]
Line_3 $$ final List<Object> objects = Collections.nCopies(1000000, null)-->Line_14 $$ assertEquals(objects.size(), COUNT.get())[ FD ]
Line_7 $$ boolean success = JobLauncher.getInstance().invokeConcurrentlyUnderProgress(objects, null, true, false, new Processor<Object>() -->Line_13 $$ assertTrue(success)[ FD ]
Line_7 $$ boolean success = JobLauncher.getInstance().invokeConcurrentlyUnderProgress(objects, null, true, false, new Processor<Object>() -->Line_9 $$ COUNT.incrementAndGet()[ CD ]
Line_5 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_7 $$ boolean success = JobLauncher.getInstance().invokeConcurrentlyUnderProgress(objects, null, true, false, new Processor<Object>() [ CD ]
Line_5 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_13 $$ assertTrue(success)[ CD ]
Line_2 $$ public void testJobUtilCompletesEvenIfCannotGrabReadAction() throws Throwable -->Line_5 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() [ CD ]
Line_7 $$ boolean success = JobLauncher.getInstance().invokeConcurrentlyUnderProgress(objects, null, true, false, new Processor<Object>() -->Line_10 $$ return true[ CD ]
