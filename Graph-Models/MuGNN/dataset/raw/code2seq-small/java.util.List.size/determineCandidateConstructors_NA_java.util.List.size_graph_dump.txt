Line_46 $$ if (ann != null) -->Line_50 $$ if (candidate.getParameterTypes().length == 0) [ CD ]
Line_28 $$ if (candidateConstructors == null) -->Line_80 $$ this.candidateConstructorsCache.put(beanClass, candidateConstructors)[ CD ]
Line_11 $$ LookupOverride override = new LookupOverride(method, lookup.value())-->Line_14 $$ mbd.getMethodOverrides().addOverride(override)[ FD ]
Line_65 $$ if (!candidates.isEmpty()) -->Line_75 $$ if (rawCandidates.length == 1 && rawCandidates[0].getParameterTypes().length > 0) [ CD ]
Line_46 $$ if (ann != null) -->Line_60 $$ candidates.add(candidate)[ CD ]
Line_65 $$ if (!candidates.isEmpty()) -->Line_74 $$ candidateConstructors = candidates.toArray(new Constructor<?>[candidates.size()])[ CD ]
Line_5 $$ ReflectionUtils.doWithMethods(beanClass, new ReflectionUtils.MethodCallback() -->Line_9 $$ Lookup lookup = method.getAnnotation(Lookup.class)[ FD ]
Line_4 $$ if (!this.lookupMethodsChecked.contains(beanName)) -->Line_5 $$ ReflectionUtils.doWithMethods(beanClass, new ReflectionUtils.MethodCallback() [ CD ]
Line_68 $$ if (defaultConstructor != null) -->Line_69 $$ candidates.add(defaultConstructor)[ CD ]
Line_46 $$ if (ann != null) -->Line_61 $$ if (candidate.getParameterTypes().length == 0) [ CD ]
Line_4 $$ if (!this.lookupMethodsChecked.contains(beanName)) -->Line_21 $$ this.lookupMethodsChecked.add(beanName)[ CD ]
Line_46 $$ if (ann != null) -->Line_53 $$ boolean required = determineRequiredStatus(ann)[ CD ]
Line_35 $$ if (ann == null) -->Line_36 $$ Class<?> userClass = ClassUtils.getUserClass(beanClass)[ CD ]
Line_9 $$ Lookup lookup = method.getAnnotation(Lookup.class)-->Line_10 $$ if (lookup != null) [ FD ]
Line_13 $$ RootBeanDefinition mbd = (RootBeanDefinition) beanFactory.getMergedBeanDefinition(beanName)-->Line_14 $$ mbd.getMethodOverrides().addOverride(override)[ FD ]
Line_9 $$ Lookup lookup = method.getAnnotation(Lookup.class)-->Line_11 $$ LookupOverride override = new LookupOverride(method, lookup.value())[ FD ]
Line_5 $$ ReflectionUtils.doWithMethods(beanClass, new ReflectionUtils.MethodCallback() -->Line_10 $$ if (lookup != null) [ CD ]
Line_5 $$ ReflectionUtils.doWithMethods(beanClass, new ReflectionUtils.MethodCallback() -->Line_9 $$ Lookup lookup = method.getAnnotation(Lookup.class)[ CD ]
Line_28 $$ if (candidateConstructors == null) -->Line_29 $$ Constructor<?>[] rawCandidates = beanClass.getDeclaredConstructors()[ CD ]
Line_54 $$ if (required) -->Line_55 $$ if (!candidates.isEmpty()) [ CD ]
Line_46 $$ if (ann != null) -->Line_47 $$ if (requiredConstructor != null) [ CD ]
Line_28 $$ if (candidateConstructors == null) -->Line_65 $$ if (!candidates.isEmpty()) [ CD ]
Line_35 $$ if (ann == null) -->Line_37 $$ if (userClass != beanClass) [ CD ]
Line_46 $$ if (ann != null) -->Line_54 $$ if (required) [ CD ]
Line_68 $$ if (defaultConstructor != null) -->Line_70 $$ if (candidates.size() == 1 && logger.isWarnEnabled()) [ CD ]
Line_70 $$ if (candidates.size() == 1 && logger.isWarnEnabled()) -->Line_71 $$ logger.warn("Inconsistent constructor declaration on bean with name '" + beanName + "': single autowire-marked constructor flagged as optional - this constructor " + "is effectively required since there is no default constructor to fall back to: " + candidates.get(0))[ CD ]
Line_10 $$ if (lookup != null) -->Line_11 $$ LookupOverride override = new LookupOverride(method, lookup.value())[ CD ]
