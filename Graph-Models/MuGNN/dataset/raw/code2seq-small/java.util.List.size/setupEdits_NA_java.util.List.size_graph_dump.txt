Line_2 $$ public static NNStorage setupEdits(List<URI> editUris, int numrolls, boolean closeOnFinish, AbortSpec... abortAtRolls) throws IOException -->Line_6 $$ FSEditLog editlog = getFSEditLog(storage)[ CD ]
Line_6 $$ FSEditLog editlog = getFSEditLog(storage)-->Line_7 $$ editlog.initJournalsForWrite()[ FD ]
Line_2 $$ public static NNStorage setupEdits(List<URI> editUris, int numrolls, boolean closeOnFinish, AbortSpec... abortAtRolls) throws IOException -->Line_5 $$ storage.format(new NamespaceInfo())[ CD ]
Line_4 $$ NNStorage storage = new NNStorage(new Configuration(), Collections.<URI>emptyList(), editUris)-->Line_29 $$ FSImageTestUtil.logStorageContents(LOG, storage)[ FD ]
Line_4 $$ NNStorage storage = new NNStorage(new Configuration(), Collections.<URI>emptyList(), editUris)-->Line_6 $$ FSEditLog editlog = getFSEditLog(storage)[ FD ]
Line_2 $$ public static NNStorage setupEdits(List<URI> editUris, int numrolls, boolean closeOnFinish, AbortSpec... abortAtRolls) throws IOException -->Line_30 $$ return storage[ CD ]
Line_6 $$ FSEditLog editlog = getFSEditLog(storage)-->Line_27 $$ editlog.close()[ FD ]
Line_2 $$ public static NNStorage setupEdits(List<URI> editUris, int numrolls, boolean closeOnFinish, AbortSpec... abortAtRolls) throws IOException -->Line_4 $$ NNStorage storage = new NNStorage(new Configuration(), Collections.<URI>emptyList(), editUris)[ CD ]
Line_6 $$ FSEditLog editlog = getFSEditLog(storage)-->Line_12 $$ editlog.logSync()[ FD ]
Line_2 $$ public static NNStorage setupEdits(List<URI> editUris, int numrolls, boolean closeOnFinish, AbortSpec... abortAtRolls) throws IOException -->Line_8 $$ editlog.openForWrite()[ CD ]
Line_3 $$ List<AbortSpec> aborts = new ArrayList<AbortSpec>(Arrays.asList(abortAtRolls))-->Line_17 $$ while (aborts.size() > 0 && aborts.get(0).roll == (i + 1)) [ FD ]
Line_6 $$ FSEditLog editlog = getFSEditLog(storage)-->Line_10 $$ editlog.logGenerationStampV2((long) 0)[ FD ]
Line_4 $$ NNStorage storage = new NNStorage(new Configuration(), Collections.<URI>emptyList(), editUris)-->Line_5 $$ storage.format(new NamespaceInfo())[ FD ]
Line_3 $$ List<AbortSpec> aborts = new ArrayList<AbortSpec>(Arrays.asList(abortAtRolls))-->Line_18 $$ AbortSpec spec = aborts.remove(0)[ FD ]
Line_26 $$ if (closeOnFinish) -->Line_27 $$ editlog.close()[ CD ]
Line_9 $$ for (int i = 2; i < TXNS_PER_ROLL; i++) -->Line_13 $$ for (int i = 0; i < numrolls; i++) [ FD ]
Line_2 $$ public static NNStorage setupEdits(List<URI> editUris, int numrolls, boolean closeOnFinish, AbortSpec... abortAtRolls) throws IOException -->Line_13 $$ for (int i = 0; i < numrolls; i++) [ CD ]
Line_6 $$ FSEditLog editlog = getFSEditLog(storage)-->Line_15 $$ editlog.logGenerationStampV2((long) i)[ FD ]
Line_6 $$ FSEditLog editlog = getFSEditLog(storage)-->Line_8 $$ editlog.openForWrite()[ FD ]
Line_6 $$ FSEditLog editlog = getFSEditLog(storage)-->Line_22 $$ editlog.logGenerationStampV2((long) i)[ FD ]
Line_2 $$ public static NNStorage setupEdits(List<URI> editUris, int numrolls, boolean closeOnFinish, AbortSpec... abortAtRolls) throws IOException -->Line_3 $$ List<AbortSpec> aborts = new ArrayList<AbortSpec>(Arrays.asList(abortAtRolls))[ FD ]
Line_2 $$ public static NNStorage setupEdits(List<URI> editUris, int numrolls, boolean closeOnFinish, AbortSpec... abortAtRolls) throws IOException -->Line_12 $$ editlog.logSync()[ CD ]
Line_2 $$ public static NNStorage setupEdits(List<URI> editUris, int numrolls, boolean closeOnFinish, AbortSpec... abortAtRolls) throws IOException -->Line_13 $$ for (int i = 0; i < numrolls; i++) [ FD ]
Line_6 $$ FSEditLog editlog = getFSEditLog(storage)-->Line_24 $$ editlog.logSync()[ FD ]
Line_13 $$ for (int i = 0; i < numrolls; i++) -->Line_21 $$ for (int j = 3; j < TXNS_PER_ROLL; j++) [ CD ]
Line_13 $$ for (int i = 0; i < numrolls; i++) -->Line_17 $$ while (aborts.size() > 0 && aborts.get(0).roll == (i + 1)) [ CD ]
Line_2 $$ public static NNStorage setupEdits(List<URI> editUris, int numrolls, boolean closeOnFinish, AbortSpec... abortAtRolls) throws IOException -->Line_7 $$ editlog.initJournalsForWrite()[ CD ]
Line_2 $$ public static NNStorage setupEdits(List<URI> editUris, int numrolls, boolean closeOnFinish, AbortSpec... abortAtRolls) throws IOException -->Line_26 $$ if (closeOnFinish) [ CD ]
Line_13 $$ for (int i = 0; i < numrolls; i++) -->Line_15 $$ editlog.logGenerationStampV2((long) i)[ CD ]
Line_2 $$ public static NNStorage setupEdits(List<URI> editUris, int numrolls, boolean closeOnFinish, AbortSpec... abortAtRolls) throws IOException -->Line_3 $$ List<AbortSpec> aborts = new ArrayList<AbortSpec>(Arrays.asList(abortAtRolls))[ CD ]
Line_13 $$ for (int i = 0; i < numrolls; i++) -->Line_16 $$ editlog.logSync()[ CD ]
Line_2 $$ public static NNStorage setupEdits(List<URI> editUris, int numrolls, boolean closeOnFinish, AbortSpec... abortAtRolls) throws IOException -->Line_9 $$ for (int i = 2; i < TXNS_PER_ROLL; i++) [ CD ]
Line_21 $$ for (int j = 3; j < TXNS_PER_ROLL; j++) -->Line_22 $$ editlog.logGenerationStampV2((long) i)[ CD ]
Line_13 $$ for (int i = 0; i < numrolls; i++) -->Line_14 $$ editlog.rollEditLog()[ CD ]
Line_6 $$ FSEditLog editlog = getFSEditLog(storage)-->Line_16 $$ editlog.logSync()[ FD ]
Line_17 $$ while (aborts.size() > 0 && aborts.get(0).roll == (i + 1)) -->Line_18 $$ AbortSpec spec = aborts.remove(0)[ CD ]
Line_9 $$ for (int i = 2; i < TXNS_PER_ROLL; i++) -->Line_10 $$ editlog.logGenerationStampV2((long) 0)[ CD ]
Line_17 $$ while (aborts.size() > 0 && aborts.get(0).roll == (i + 1)) -->Line_19 $$ editlog.getJournals().get(spec.logindex).abort()[ CD ]
Line_6 $$ FSEditLog editlog = getFSEditLog(storage)-->Line_19 $$ editlog.getJournals().get(spec.logindex).abort()[ FD ]
Line_13 $$ for (int i = 0; i < numrolls; i++) -->Line_24 $$ editlog.logSync()[ CD ]
Line_2 $$ public static NNStorage setupEdits(List<URI> editUris, int numrolls, boolean closeOnFinish, AbortSpec... abortAtRolls) throws IOException -->Line_29 $$ FSImageTestUtil.logStorageContents(LOG, storage)[ CD ]
Line_6 $$ FSEditLog editlog = getFSEditLog(storage)-->Line_14 $$ editlog.rollEditLog()[ FD ]
