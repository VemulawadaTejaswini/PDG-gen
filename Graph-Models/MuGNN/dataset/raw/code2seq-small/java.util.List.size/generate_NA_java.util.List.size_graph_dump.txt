Line_2 $$ public static String generate(String[] args) -->Line_12 $$ flags.add("nopvr")[ CD ]
Line_15 $$ CommandLine cl = new CommandLine(args, flags, opts)-->Line_21 $$ boolean nopvr = (cl.getOpt("nopvr") != null)[ FD ]
Line_61 $$ for (SchemaType globalElem : globalElems) -->Line_63 $$ elem = globalElem[ FD ]
Line_39 $$ if (schemas.length > 0) -->Line_41 $$ XmlOptions compileOptions = new XmlOptions()[ CD ]
Line_2 $$ public static String generate(String[] args) -->Line_67 $$ if (elem == null) [ CD ]
Line_2 $$ public static String generate(String[] args) -->Line_6 $$ flags.add("help")[ CD ]
Line_41 $$ XmlOptions compileOptions = new XmlOptions()-->Line_45 $$ compileOptions.setCompileNoPvrRule()[ FD ]
Line_41 $$ XmlOptions compileOptions = new XmlOptions()-->Line_47 $$ compileOptions.setCompileNoUpaRule()[ FD ]
Line_41 $$ XmlOptions compileOptions = new XmlOptions()-->Line_49 $$ sts = XmlBeans.compileXsd(schemas, XmlBeans.getBuiltinTypeSystem(), compileOptions)[ FD ]
Line_30 $$ for (File schemaFile : schemaFiles) -->Line_32 $$ sdocs.add(XmlObject.Factory.parse(schemaFile, (new XmlOptions()).setLoadLineNumbers().setLoadMessageDigest()))[ FD ]
Line_38 $$ SchemaTypeSystem sts = null-->Line_49 $$ sts = XmlBeans.compileXsd(schemas, XmlBeans.getBuiltinTypeSystem(), compileOptions)[ FD ]
Line_2 $$ public static String generate(String[] args) -->Line_56 $$ if (sts == null) [ CD ]
Line_39 $$ if (schemas.length > 0) -->Line_46 $$ if (noupa)[ CD ]
Line_2 $$ public static String generate(String[] args) -->Line_59 $$ SchemaType[] globalElems = sts.documentTypes()[ CD ]
Line_2 $$ public static String generate(String[] args) -->Line_4 $$ Set opts = new HashSet()[ CD ]
Line_49 $$ sts = XmlBeans.compileXsd(schemas, XmlBeans.getBuiltinTypeSystem(), compileOptions)-->Line_56 $$ if (sts == null) [ FD ]
Line_2 $$ public static String generate(String[] args) -->Line_11 $$ flags.add("noupa")[ CD ]
Line_2 $$ public static String generate(String[] args) -->Line_24 $$ String rootName = cl.getOpt("name")[ CD ]
Line_2 $$ public static String generate(String[] args) -->Line_8 $$ flags.add("license")[ CD ]
Line_3 $$ Set flags = new HashSet()-->Line_10 $$ flags.add("dl")[ FD ]
Line_2 $$ public static String generate(String[] args) -->Line_13 $$ flags.add("partial")[ CD ]
Line_2 $$ public static String generate(String[] args) -->Line_5 $$ flags.add("h")[ CD ]
Line_2 $$ public static String generate(String[] args) -->Line_25 $$ if (rootName == null) [ CD ]
Line_3 $$ Set flags = new HashSet()-->Line_13 $$ flags.add("partial")[ FD ]
Line_2 $$ public static String generate(String[] args) -->Line_38 $$ SchemaTypeSystem sts = null[ CD ]
Line_2 $$ public static String generate(String[] args) -->Line_15 $$ CommandLine cl = new CommandLine(args, flags, opts)[ CD ]
Line_15 $$ CommandLine cl = new CommandLine(args, flags, opts)-->Line_22 $$ boolean noupa = (cl.getOpt("noupa") != null)[ FD ]
Line_38 $$ SchemaTypeSystem sts = null-->Line_56 $$ if (sts == null) [ FD ]
Line_3 $$ Set flags = new HashSet()-->Line_9 $$ flags.add("version")[ FD ]
Line_61 $$ for (SchemaType globalElem : globalElems) -->Line_62 $$ if (rootName.equals(globalElem.getDocumentElementName().getLocalPart())) [ FD ]
Line_63 $$ elem = globalElem-->Line_67 $$ if (elem == null) [ FD ]
Line_15 $$ CommandLine cl = new CommandLine(args, flags, opts)-->Line_24 $$ String rootName = cl.getOpt("name")[ FD ]
Line_60 $$ SchemaType elem = null-->Line_67 $$ if (elem == null) [ FD ]
Line_2 $$ public static String generate(String[] args) -->Line_23 $$ File[] schemaFiles = cl.filesEndingWith(".xsd")[ CD ]
Line_2 $$ public static String generate(String[] args) -->Line_17 $$ if (badOpts.length > 0) [ CD ]
Line_15 $$ CommandLine cl = new CommandLine(args, flags, opts)-->Line_20 $$ boolean dl = (cl.getOpt("dl") != null)[ FD ]
Line_2 $$ public static String generate(String[] args) -->Line_22 $$ boolean noupa = (cl.getOpt("noupa") != null)[ CD ]
Line_46 $$ if (noupa)-->Line_47 $$ compileOptions.setCompileNoUpaRule()[ CD ]
Line_2 $$ public static String generate(String[] args) -->Line_37 $$ XmlObject[] schemas = (XmlObject[]) sdocs.toArray(new XmlObject[sdocs.size()])[ CD ]
Line_37 $$ XmlObject[] schemas = (XmlObject[]) sdocs.toArray(new XmlObject[sdocs.size()])-->Line_49 $$ sts = XmlBeans.compileXsd(schemas, XmlBeans.getBuiltinTypeSystem(), compileOptions)[ FD ]
Line_3 $$ Set flags = new HashSet()-->Line_7 $$ flags.add("usage")[ FD ]
Line_24 $$ String rootName = cl.getOpt("name")-->Line_25 $$ if (rootName == null) [ FD ]
Line_41 $$ XmlOptions compileOptions = new XmlOptions()-->Line_43 $$ compileOptions.setCompileDownloadUrls()[ FD ]
Line_62 $$ if (rootName.equals(globalElem.getDocumentElementName().getLocalPart())) -->Line_63 $$ elem = globalElem[ CD ]
Line_2 $$ public static String generate(String[] args) -->Line_39 $$ if (schemas.length > 0) [ CD ]
Line_39 $$ if (schemas.length > 0) -->Line_40 $$ Collection errors = new ArrayList()[ CD ]
Line_2 $$ public static String generate(String[] args) -->Line_21 $$ boolean nopvr = (cl.getOpt("nopvr") != null)[ CD ]
Line_24 $$ String rootName = cl.getOpt("name")-->Line_62 $$ if (rootName.equals(globalElem.getDocumentElementName().getLocalPart())) [ FD ]
Line_60 $$ SchemaType elem = null-->Line_63 $$ elem = globalElem[ FD ]
Line_2 $$ public static String generate(String[] args) -->Line_7 $$ flags.add("usage")[ CD ]
Line_2 $$ public static String generate(String[] args) -->Line_10 $$ flags.add("dl")[ CD ]
Line_2 $$ public static String generate(String[] args) -->Line_20 $$ boolean dl = (cl.getOpt("dl") != null)[ CD ]
Line_3 $$ Set flags = new HashSet()-->Line_12 $$ flags.add("nopvr")[ FD ]
Line_49 $$ sts = XmlBeans.compileXsd(schemas, XmlBeans.getBuiltinTypeSystem(), compileOptions)-->Line_59 $$ SchemaType[] globalElems = sts.documentTypes()[ FD ]
Line_3 $$ Set flags = new HashSet()-->Line_6 $$ flags.add("help")[ FD ]
Line_2 $$ public static String generate(String[] args) -->Line_14 $$ opts.add("name")[ CD ]
Line_15 $$ CommandLine cl = new CommandLine(args, flags, opts)-->Line_16 $$ String[] badOpts = cl.getBadOpts()[ FD ]
Line_3 $$ Set flags = new HashSet()-->Line_5 $$ flags.add("h")[ FD ]
Line_15 $$ CommandLine cl = new CommandLine(args, flags, opts)-->Line_23 $$ File[] schemaFiles = cl.filesEndingWith(".xsd")[ FD ]
Line_2 $$ public static String generate(String[] args) -->Line_9 $$ flags.add("version")[ CD ]
Line_39 $$ if (schemas.length > 0) -->Line_42 $$ if (dl)[ CD ]
Line_2 $$ public static String generate(String[] args) -->Line_3 $$ Set flags = new HashSet()[ CD ]
Line_42 $$ if (dl)-->Line_43 $$ compileOptions.setCompileDownloadUrls()[ CD ]
Line_39 $$ if (schemas.length > 0) -->Line_44 $$ if (nopvr)[ CD ]
Line_2 $$ public static String generate(String[] args) -->Line_60 $$ SchemaType elem = null[ CD ]
Line_3 $$ Set flags = new HashSet()-->Line_8 $$ flags.add("license")[ FD ]
Line_2 $$ public static String generate(String[] args) -->Line_16 $$ String[] badOpts = cl.getBadOpts()[ CD ]
Line_38 $$ SchemaTypeSystem sts = null-->Line_59 $$ SchemaType[] globalElems = sts.documentTypes()[ FD ]
Line_3 $$ Set flags = new HashSet()-->Line_11 $$ flags.add("noupa")[ FD ]
Line_51 $$ String out = "Schema compilation errors: "-->Line_52 $$ out += "\n" + error[ FD ]
Line_4 $$ Set opts = new HashSet()-->Line_14 $$ opts.add("name")[ FD ]
Line_44 $$ if (nopvr)-->Line_45 $$ compileOptions.setCompileNoPvrRule()[ CD ]
