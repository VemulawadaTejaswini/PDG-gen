Line_9 $$ Thread pollingThread = _selectorIntraband.pollingThread-->Line_35 $$ pollingThread.join()[ FD ]
Line_7 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_8 $$ wakeUpThread.start()[ FD ]
Line_19 $$ String pollingThreadName = pollingThread.getName()-->Line_21 $$ Assert.assertEquals(pollingThreadName.concat(" exiting gracefully on selector closure"), logRecord.getMessage())[ FD ]
Line_25 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_26 $$ wakeUpThread.start()[ FD ]
Line_10 $$ Selector selector = _selectorIntraband.selector-->Line_15 $$ selector.close()[ FD ]
Line_7 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_30 $$ wakeUpThread.interrupt()[ FD ]
Line_9 $$ Thread pollingThread = _selectorIntraband.pollingThread-->Line_17 $$ pollingThread.join()[ FD ]
Line_7 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_13 $$ wakeUpThread.join()[ FD ]
Line_9 $$ Thread pollingThread = _selectorIntraband.pollingThread-->Line_14 $$ while (pollingThread.getState() != Thread.State.BLOCKED) [ FD ]
Line_24 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_36 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_9 $$ Thread pollingThread = _selectorIntraband.pollingThread-->Line_27 $$ pollingThread = _selectorIntraband.pollingThread[ FD ]
Line_10 $$ Selector selector = _selectorIntraband.selector-->Line_28 $$ selector = _selectorIntraband.selector[ FD ]
Line_9 $$ Thread pollingThread = _selectorIntraband.pollingThread-->Line_19 $$ String pollingThreadName = pollingThread.getName()[ FD ]
Line_4 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(SelectorIntraband.class.getName(), Level.INFO)) -->Line_24 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_7 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_25 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))[ FD ]
Line_20 $$ LogRecord logRecord = logRecords.get(0)-->Line_21 $$ Assert.assertEquals(pollingThreadName.concat(" exiting gracefully on selector closure"), logRecord.getMessage())[ FD ]
Line_25 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_30 $$ wakeUpThread.interrupt()[ FD ]
Line_7 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_31 $$ wakeUpThread.join()[ FD ]
Line_27 $$ pollingThread = _selectorIntraband.pollingThread-->Line_35 $$ pollingThread.join()[ FD ]
Line_7 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_12 $$ wakeUpThread.interrupt()[ FD ]
Line_9 $$ Thread pollingThread = _selectorIntraband.pollingThread-->Line_32 $$ while (pollingThread.getState() != Thread.State.BLOCKED) [ FD ]
Line_25 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_31 $$ wakeUpThread.join()[ FD ]
Line_7 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_26 $$ wakeUpThread.start()[ FD ]
Line_27 $$ pollingThread = _selectorIntraband.pollingThread-->Line_32 $$ while (pollingThread.getState() != Thread.State.BLOCKED) [ FD ]
Line_10 $$ Selector selector = _selectorIntraband.selector-->Line_33 $$ selector.close()[ FD ]
Line_28 $$ selector = _selectorIntraband.selector-->Line_33 $$ selector.close()[ FD ]
