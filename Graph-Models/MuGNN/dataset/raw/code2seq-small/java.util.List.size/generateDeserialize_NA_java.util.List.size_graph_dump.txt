Line_2 $$ private static <T> void generateDeserialize(ClassDefinition definition, Class<T> clazz, List<StateField> fields) -->Line_9 $$ Method setter = getSetter(clazz, fields.get(0))[ FD ]
Line_6 $$ MethodDefinition method = definition.declareMethod(a(PUBLIC), "deserialize", type(void.class), block, index, state)-->Line_13 $$ Variable slice = method.getScope().declareVariable(Slice.class, "slice")[ FD ]
Line_9 $$ Method setter = getSetter(clazz, fields.get(0))-->Line_10 $$ Method blockGetter = getBlockGetter(setter.getParameterTypes()[0])[ FD ]
Line_3 $$ Parameter block = arg("block", Block.class)-->Line_11 $$ deserializerBody.append(state.cast(setter.getDeclaringClass()).invoke(setter, invokeStatic(blockGetter, block, index)))[ FD ]
Line_5 $$ Parameter state = arg("state", Object.class)-->Line_6 $$ MethodDefinition method = definition.declareMethod(a(PUBLIC), "deserialize", type(void.class), block, index, state)[ FD ]
Line_8 $$ if (fields.size() == 1) -->Line_14 $$ deserializerBody.append(slice.set(block.invoke("getSlice", Slice.class, index, constantInt(0), block.invoke("getLength", int.class, index))))[ CD ]
Line_7 $$ ByteCodeBlock deserializerBody = method.getBody()-->Line_14 $$ deserializerBody.append(slice.set(block.invoke("getSlice", Slice.class, index, constantInt(0), block.invoke("getLength", int.class, index))))[ FD ]
Line_3 $$ Parameter block = arg("block", Block.class)-->Line_14 $$ deserializerBody.append(slice.set(block.invoke("getSlice", Slice.class, index, constantInt(0), block.invoke("getLength", int.class, index))))[ FD ]
Line_10 $$ Method blockGetter = getBlockGetter(setter.getParameterTypes()[0])-->Line_11 $$ deserializerBody.append(state.cast(setter.getDeclaringClass()).invoke(setter, invokeStatic(blockGetter, block, index)))[ FD ]
Line_2 $$ private static <T> void generateDeserialize(ClassDefinition definition, Class<T> clazz, List<StateField> fields) -->Line_6 $$ MethodDefinition method = definition.declareMethod(a(PUBLIC), "deserialize", type(void.class), block, index, state)[ FD ]
Line_13 $$ Variable slice = method.getScope().declareVariable(Slice.class, "slice")-->Line_14 $$ deserializerBody.append(slice.set(block.invoke("getSlice", Slice.class, index, constantInt(0), block.invoke("getLength", int.class, index))))[ FD ]
Line_8 $$ if (fields.size() == 1) -->Line_10 $$ Method blockGetter = getBlockGetter(setter.getParameterTypes()[0])[ CD ]
Line_17 $$ Method getter = getSliceGetter(setter.getParameterTypes()[0])-->Line_19 $$ deserializerBody.append(state.cast(setter.getDeclaringClass()).invoke(setter, invokeStatic(getter, slice, constantInt(offset))))[ FD ]
Line_2 $$ private static <T> void generateDeserialize(ClassDefinition definition, Class<T> clazz, List<StateField> fields) -->Line_6 $$ MethodDefinition method = definition.declareMethod(a(PUBLIC), "deserialize", type(void.class), block, index, state)[ CD ]
Line_4 $$ Parameter index = arg("index", int.class)-->Line_11 $$ deserializerBody.append(state.cast(setter.getDeclaringClass()).invoke(setter, invokeStatic(blockGetter, block, index)))[ FD ]
Line_4 $$ Parameter index = arg("index", int.class)-->Line_14 $$ deserializerBody.append(slice.set(block.invoke("getSlice", Slice.class, index, constantInt(0), block.invoke("getLength", int.class, index))))[ FD ]
Line_3 $$ Parameter block = arg("block", Block.class)-->Line_6 $$ MethodDefinition method = definition.declareMethod(a(PUBLIC), "deserialize", type(void.class), block, index, state)[ FD ]
Line_2 $$ private static <T> void generateDeserialize(ClassDefinition definition, Class<T> clazz, List<StateField> fields) -->Line_5 $$ Parameter state = arg("state", Object.class)[ CD ]
Line_2 $$ private static <T> void generateDeserialize(ClassDefinition definition, Class<T> clazz, List<StateField> fields) -->Line_4 $$ Parameter index = arg("index", int.class)[ CD ]
Line_5 $$ Parameter state = arg("state", Object.class)-->Line_11 $$ deserializerBody.append(state.cast(setter.getDeclaringClass()).invoke(setter, invokeStatic(blockGetter, block, index)))[ FD ]
Line_15 $$ for (StateField field : fields) -->Line_16 $$ Method setter = getSetter(clazz, field)[ FD ]
Line_5 $$ Parameter state = arg("state", Object.class)-->Line_19 $$ deserializerBody.append(state.cast(setter.getDeclaringClass()).invoke(setter, invokeStatic(getter, slice, constantInt(offset))))[ FD ]
Line_7 $$ ByteCodeBlock deserializerBody = method.getBody()-->Line_19 $$ deserializerBody.append(state.cast(setter.getDeclaringClass()).invoke(setter, invokeStatic(getter, slice, constantInt(offset))))[ FD ]
Line_2 $$ private static <T> void generateDeserialize(ClassDefinition definition, Class<T> clazz, List<StateField> fields) -->Line_18 $$ int offset = offsetOfField(field, fields)[ FD ]
Line_9 $$ Method setter = getSetter(clazz, fields.get(0))-->Line_17 $$ Method getter = getSliceGetter(setter.getParameterTypes()[0])[ FD ]
Line_18 $$ int offset = offsetOfField(field, fields)-->Line_19 $$ deserializerBody.append(state.cast(setter.getDeclaringClass()).invoke(setter, invokeStatic(getter, slice, constantInt(offset))))[ FD ]
Line_9 $$ Method setter = getSetter(clazz, fields.get(0))-->Line_19 $$ deserializerBody.append(state.cast(setter.getDeclaringClass()).invoke(setter, invokeStatic(getter, slice, constantInt(offset))))[ FD ]
Line_8 $$ if (fields.size() == 1) -->Line_9 $$ Method setter = getSetter(clazz, fields.get(0))[ CD ]
Line_6 $$ MethodDefinition method = definition.declareMethod(a(PUBLIC), "deserialize", type(void.class), block, index, state)-->Line_7 $$ ByteCodeBlock deserializerBody = method.getBody()[ FD ]
Line_8 $$ if (fields.size() == 1) -->Line_11 $$ deserializerBody.append(state.cast(setter.getDeclaringClass()).invoke(setter, invokeStatic(blockGetter, block, index)))[ CD ]
Line_4 $$ Parameter index = arg("index", int.class)-->Line_6 $$ MethodDefinition method = definition.declareMethod(a(PUBLIC), "deserialize", type(void.class), block, index, state)[ FD ]
Line_2 $$ private static <T> void generateDeserialize(ClassDefinition definition, Class<T> clazz, List<StateField> fields) -->Line_7 $$ ByteCodeBlock deserializerBody = method.getBody()[ CD ]
Line_2 $$ private static <T> void generateDeserialize(ClassDefinition definition, Class<T> clazz, List<StateField> fields) -->Line_8 $$ if (fields.size() == 1) [ CD ]
Line_2 $$ private static <T> void generateDeserialize(ClassDefinition definition, Class<T> clazz, List<StateField> fields) -->Line_3 $$ Parameter block = arg("block", Block.class)[ CD ]
Line_2 $$ private static <T> void generateDeserialize(ClassDefinition definition, Class<T> clazz, List<StateField> fields) -->Line_8 $$ if (fields.size() == 1) [ FD ]
Line_13 $$ Variable slice = method.getScope().declareVariable(Slice.class, "slice")-->Line_19 $$ deserializerBody.append(state.cast(setter.getDeclaringClass()).invoke(setter, invokeStatic(getter, slice, constantInt(offset))))[ FD ]
Line_8 $$ if (fields.size() == 1) -->Line_13 $$ Variable slice = method.getScope().declareVariable(Slice.class, "slice")[ CD ]
Line_15 $$ for (StateField field : fields) -->Line_18 $$ int offset = offsetOfField(field, fields)[ FD ]
Line_7 $$ ByteCodeBlock deserializerBody = method.getBody()-->Line_11 $$ deserializerBody.append(state.cast(setter.getDeclaringClass()).invoke(setter, invokeStatic(blockGetter, block, index)))[ FD ]
Line_9 $$ Method setter = getSetter(clazz, fields.get(0))-->Line_11 $$ deserializerBody.append(state.cast(setter.getDeclaringClass()).invoke(setter, invokeStatic(blockGetter, block, index)))[ FD ]
Line_2 $$ private static <T> void generateDeserialize(ClassDefinition definition, Class<T> clazz, List<StateField> fields) -->Line_16 $$ Method setter = getSetter(clazz, field)[ FD ]
Line_7 $$ ByteCodeBlock deserializerBody = method.getBody()-->Line_22 $$ deserializerBody.ret()[ FD ]
Line_2 $$ private static <T> void generateDeserialize(ClassDefinition definition, Class<T> clazz, List<StateField> fields) -->Line_22 $$ deserializerBody.ret()[ CD ]
