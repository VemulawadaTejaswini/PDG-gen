Line_4 $$ final XmlTag tag = myElement.getXmlTag()-->Line_7 $$ assertInstanceOf(getDomManager().getDomElement(tag.getSubTags()[1]), GenericDomValue.class)[ FD ]
Line_2 $$ public void testGetDomElementCustomChild() throws Throwable -->Line_7 $$ assertInstanceOf(getDomManager().getDomElement(tag.getSubTags()[1]), GenericDomValue.class)[ CD ]
Line_3 $$ final MyElement myElement = createElement("<a><abstract-child/><generic-value/><bar/></a>", MyElement.class)-->Line_4 $$ final XmlTag tag = myElement.getXmlTag()[ FD ]
Line_2 $$ public void testGetDomElementCustomChild() throws Throwable -->Line_8 $$ assertInstanceOf(getDomManager().getDomElement(tag.getSubTags()[2]), MyElement.class)[ CD ]
Line_4 $$ final XmlTag tag = myElement.getXmlTag()-->Line_6 $$ assertInstanceOf(getDomManager().getDomElement(tag.getSubTags()[0]), MyAbstractElement.class)[ FD ]
Line_2 $$ public void testGetDomElementCustomChild() throws Throwable -->Line_3 $$ final MyElement myElement = createElement("<a><abstract-child/><generic-value/><bar/></a>", MyElement.class)[ CD ]
Line_3 $$ final MyElement myElement = createElement("<a><abstract-child/><generic-value/><bar/></a>", MyElement.class)-->Line_5 $$ assertEquals(1, myElement.getCustomChildren().size())[ FD ]
Line_2 $$ public void testGetDomElementCustomChild() throws Throwable -->Line_5 $$ assertEquals(1, myElement.getCustomChildren().size())[ CD ]
Line_2 $$ public void testGetDomElementCustomChild() throws Throwable -->Line_6 $$ assertInstanceOf(getDomManager().getDomElement(tag.getSubTags()[0]), MyAbstractElement.class)[ CD ]
Line_2 $$ public void testGetDomElementCustomChild() throws Throwable -->Line_4 $$ final XmlTag tag = myElement.getXmlTag()[ CD ]
Line_4 $$ final XmlTag tag = myElement.getXmlTag()-->Line_8 $$ assertInstanceOf(getDomManager().getDomElement(tag.getSubTags()[2]), MyElement.class)[ FD ]
