Line_2 $$ public void testMetricAsSubAggOfSingleBucketAgg() throws Exception -->Line_11 $$ List<? extends Bucket> buckets = histo.getBuckets()[ CD ]
Line_19 $$ Sum sum = bucket.getAggregations().get("sum")-->Line_25 $$ if (sum.value() == maxValue) [ FD ]
Line_5 $$ Filter filter = response.getAggregations().get("filter")-->Line_6 $$ assertThat(filter, notNullValue())[ FD ]
Line_14 $$ for (int j = 0; j < numValueBuckets; ++j) -->Line_17 $$ assertThat(((Number) bucket.getKey()).longValue(), equalTo((long) j * interval))[ CD ]
Line_14 $$ for (int j = 0; j < numValueBuckets; ++j) -->Line_18 $$ if (bucket.getDocCount() != 0) [ CD ]
Line_15 $$ Histogram.Bucket bucket = buckets.get(j)-->Line_19 $$ Sum sum = bucket.getAggregations().get("sum")[ FD ]
Line_15 $$ Histogram.Bucket bucket = buckets.get(j)-->Line_17 $$ assertThat(((Number) bucket.getKey()).longValue(), equalTo((long) j * interval))[ FD ]
Line_2 $$ public void testMetricAsSubAggOfSingleBucketAgg() throws Exception -->Line_3 $$ SearchResponse response = client().prepareSearch("idx").addAggregation(filter("filter").filter(termQuery("tag", "tag0")).subAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).extendedBounds((long) minRandomValue, (long) maxRandomValue).subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME))).subAggregation(maxBucket("max_bucket").setBucketsPaths("histo>sum"))).execute().actionGet()[ CD ]
Line_12 $$ List<String> maxKeys = new ArrayList()-->Line_24 $$ maxKeys.add(bucket.getKeyAsString())[ FD ]
Line_8 $$ Histogram histo = filter.getAggregations().get("histo")-->Line_10 $$ assertThat(histo.getName(), equalTo("histo"))[ FD ]
Line_12 $$ List<String> maxKeys = new ArrayList()-->Line_23 $$ maxKeys = new ArrayList()[ FD ]
Line_21 $$ if (sum.value() > maxValue) -->Line_24 $$ maxKeys.add(bucket.getKeyAsString())[ CD ]
Line_15 $$ Histogram.Bucket bucket = buckets.get(j)-->Line_16 $$ assertThat(bucket, notNullValue())[ FD ]
Line_18 $$ if (bucket.getDocCount() != 0) -->Line_20 $$ assertThat(sum, notNullValue())[ CD ]
Line_12 $$ List<String> maxKeys = new ArrayList()-->Line_26 $$ maxKeys.add(bucket.getKeyAsString())[ FD ]
Line_23 $$ maxKeys = new ArrayList()-->Line_34 $$ assertThat(maxBucketValue.keys(), equalTo(maxKeys.toArray(new String[maxKeys.size()])))[ FD ]
Line_5 $$ Filter filter = response.getAggregations().get("filter")-->Line_8 $$ Histogram histo = filter.getAggregations().get("histo")[ FD ]
Line_23 $$ maxKeys = new ArrayList()-->Line_26 $$ maxKeys.add(bucket.getKeyAsString())[ FD ]
Line_2 $$ public void testMetricAsSubAggOfSingleBucketAgg() throws Exception -->Line_10 $$ assertThat(histo.getName(), equalTo("histo"))[ CD ]
Line_13 $$ double maxValue = Double.NEGATIVE_INFINITY-->Line_25 $$ if (sum.value() == maxValue) [ FD ]
Line_30 $$ InternalBucketMetricValue maxBucketValue = filter.getAggregations().get("max_bucket")-->Line_31 $$ assertThat(maxBucketValue, notNullValue())[ FD ]
Line_2 $$ public void testMetricAsSubAggOfSingleBucketAgg() throws Exception -->Line_6 $$ assertThat(filter, notNullValue())[ CD ]
Line_8 $$ Histogram histo = filter.getAggregations().get("histo")-->Line_11 $$ List<? extends Bucket> buckets = histo.getBuckets()[ FD ]
Line_15 $$ Histogram.Bucket bucket = buckets.get(j)-->Line_18 $$ if (bucket.getDocCount() != 0) [ FD ]
Line_2 $$ public void testMetricAsSubAggOfSingleBucketAgg() throws Exception -->Line_32 $$ assertThat(maxBucketValue.getName(), equalTo("max_bucket"))[ CD ]
Line_8 $$ Histogram histo = filter.getAggregations().get("histo")-->Line_9 $$ assertThat(histo, notNullValue())[ FD ]
Line_15 $$ Histogram.Bucket bucket = buckets.get(j)-->Line_24 $$ maxKeys.add(bucket.getKeyAsString())[ FD ]
Line_19 $$ Sum sum = bucket.getAggregations().get("sum")-->Line_22 $$ maxValue = sum.value()[ FD ]
Line_15 $$ Histogram.Bucket bucket = buckets.get(j)-->Line_26 $$ maxKeys.add(bucket.getKeyAsString())[ FD ]
Line_11 $$ List<? extends Bucket> buckets = histo.getBuckets()-->Line_15 $$ Histogram.Bucket bucket = buckets.get(j)[ FD ]
Line_5 $$ Filter filter = response.getAggregations().get("filter")-->Line_30 $$ InternalBucketMetricValue maxBucketValue = filter.getAggregations().get("max_bucket")[ FD ]
Line_2 $$ public void testMetricAsSubAggOfSingleBucketAgg() throws Exception -->Line_34 $$ assertThat(maxBucketValue.keys(), equalTo(maxKeys.toArray(new String[maxKeys.size()])))[ CD ]
Line_19 $$ Sum sum = bucket.getAggregations().get("sum")-->Line_20 $$ assertThat(sum, notNullValue())[ FD ]
Line_21 $$ if (sum.value() > maxValue) -->Line_25 $$ if (sum.value() == maxValue) [ CD ]
Line_30 $$ InternalBucketMetricValue maxBucketValue = filter.getAggregations().get("max_bucket")-->Line_34 $$ assertThat(maxBucketValue.keys(), equalTo(maxKeys.toArray(new String[maxKeys.size()])))[ FD ]
Line_2 $$ public void testMetricAsSubAggOfSingleBucketAgg() throws Exception -->Line_33 $$ assertThat(maxBucketValue.value(), equalTo(maxValue))[ CD ]
Line_22 $$ maxValue = sum.value()-->Line_33 $$ assertThat(maxBucketValue.value(), equalTo(maxValue))[ FD ]
Line_14 $$ for (int j = 0; j < numValueBuckets; ++j) -->Line_15 $$ Histogram.Bucket bucket = buckets.get(j)[ CD ]
Line_2 $$ public void testMetricAsSubAggOfSingleBucketAgg() throws Exception -->Line_13 $$ double maxValue = Double.NEGATIVE_INFINITY[ CD ]
Line_23 $$ maxKeys = new ArrayList()-->Line_24 $$ maxKeys.add(bucket.getKeyAsString())[ FD ]
Line_19 $$ Sum sum = bucket.getAggregations().get("sum")-->Line_21 $$ if (sum.value() > maxValue) [ FD ]
Line_21 $$ if (sum.value() > maxValue) -->Line_22 $$ maxValue = sum.value()[ CD ]
Line_13 $$ double maxValue = Double.NEGATIVE_INFINITY-->Line_22 $$ maxValue = sum.value()[ FD ]
Line_2 $$ public void testMetricAsSubAggOfSingleBucketAgg() throws Exception -->Line_8 $$ Histogram histo = filter.getAggregations().get("histo")[ CD ]
Line_2 $$ public void testMetricAsSubAggOfSingleBucketAgg() throws Exception -->Line_30 $$ InternalBucketMetricValue maxBucketValue = filter.getAggregations().get("max_bucket")[ CD ]
Line_18 $$ if (bucket.getDocCount() != 0) -->Line_21 $$ if (sum.value() > maxValue) [ CD ]
Line_22 $$ maxValue = sum.value()-->Line_25 $$ if (sum.value() == maxValue) [ FD ]
Line_2 $$ public void testMetricAsSubAggOfSingleBucketAgg() throws Exception -->Line_14 $$ for (int j = 0; j < numValueBuckets; ++j) [ CD ]
Line_2 $$ public void testMetricAsSubAggOfSingleBucketAgg() throws Exception -->Line_9 $$ assertThat(histo, notNullValue())[ CD ]
Line_18 $$ if (bucket.getDocCount() != 0) -->Line_19 $$ Sum sum = bucket.getAggregations().get("sum")[ CD ]
Line_13 $$ double maxValue = Double.NEGATIVE_INFINITY-->Line_33 $$ assertThat(maxBucketValue.value(), equalTo(maxValue))[ FD ]
Line_14 $$ for (int j = 0; j < numValueBuckets; ++j) -->Line_15 $$ Histogram.Bucket bucket = buckets.get(j)[ FD ]
Line_5 $$ Filter filter = response.getAggregations().get("filter")-->Line_7 $$ assertThat(filter.getName(), equalTo("filter"))[ FD ]
Line_30 $$ InternalBucketMetricValue maxBucketValue = filter.getAggregations().get("max_bucket")-->Line_32 $$ assertThat(maxBucketValue.getName(), equalTo("max_bucket"))[ FD ]
Line_2 $$ public void testMetricAsSubAggOfSingleBucketAgg() throws Exception -->Line_4 $$ assertSearchResponse(response)[ CD ]
Line_21 $$ if (sum.value() > maxValue) -->Line_23 $$ maxKeys = new ArrayList()[ CD ]
Line_2 $$ public void testMetricAsSubAggOfSingleBucketAgg() throws Exception -->Line_5 $$ Filter filter = response.getAggregations().get("filter")[ CD ]
Line_3 $$ SearchResponse response = client().prepareSearch("idx").addAggregation(filter("filter").filter(termQuery("tag", "tag0")).subAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).extendedBounds((long) minRandomValue, (long) maxRandomValue).subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME))).subAggregation(maxBucket("max_bucket").setBucketsPaths("histo>sum"))).execute().actionGet()-->Line_5 $$ Filter filter = response.getAggregations().get("filter")[ FD ]
Line_25 $$ if (sum.value() == maxValue) -->Line_26 $$ maxKeys.add(bucket.getKeyAsString())[ CD ]
Line_2 $$ public void testMetricAsSubAggOfSingleBucketAgg() throws Exception -->Line_31 $$ assertThat(maxBucketValue, notNullValue())[ CD ]
Line_3 $$ SearchResponse response = client().prepareSearch("idx").addAggregation(filter("filter").filter(termQuery("tag", "tag0")).subAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).extendedBounds((long) minRandomValue, (long) maxRandomValue).subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME))).subAggregation(maxBucket("max_bucket").setBucketsPaths("histo>sum"))).execute().actionGet()-->Line_4 $$ assertSearchResponse(response)[ FD ]
Line_30 $$ InternalBucketMetricValue maxBucketValue = filter.getAggregations().get("max_bucket")-->Line_33 $$ assertThat(maxBucketValue.value(), equalTo(maxValue))[ FD ]
Line_2 $$ public void testMetricAsSubAggOfSingleBucketAgg() throws Exception -->Line_12 $$ List<String> maxKeys = new ArrayList()[ CD ]
Line_14 $$ for (int j = 0; j < numValueBuckets; ++j) -->Line_16 $$ assertThat(bucket, notNullValue())[ CD ]
Line_12 $$ List<String> maxKeys = new ArrayList()-->Line_34 $$ assertThat(maxBucketValue.keys(), equalTo(maxKeys.toArray(new String[maxKeys.size()])))[ FD ]
Line_13 $$ double maxValue = Double.NEGATIVE_INFINITY-->Line_21 $$ if (sum.value() > maxValue) [ FD ]
Line_2 $$ public void testMetricAsSubAggOfSingleBucketAgg() throws Exception -->Line_7 $$ assertThat(filter.getName(), equalTo("filter"))[ CD ]
Line_22 $$ maxValue = sum.value()-->Line_21 $$ if (sum.value() > maxValue) [ FD ]
