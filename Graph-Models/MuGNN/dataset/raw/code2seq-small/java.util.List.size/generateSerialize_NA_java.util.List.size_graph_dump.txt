Line_4 $$ Parameter out = arg("out", BlockBuilder.class)-->Line_10 $$ serializerBody.append(invokeStatic(append, out, state.cast(getter.getDeclaringClass()).invoke(getter)))[ FD ]
Line_12 $$ Variable slice = method.getScope().declareVariable(Slice.class, "slice")-->Line_20 $$ serializerBody.append(out.invoke("writeBytes", BlockBuilder.class, slice, constantInt(0), size).invoke("closeEntry", BlockBuilder.class).pop())[ FD ]
Line_12 $$ Variable slice = method.getScope().declareVariable(Slice.class, "slice")-->Line_18 $$ serializerBody.append(invokeStatic(sliceSetter, slice, constantInt(offsetOfField(field, fields)), state.cast(getter.getDeclaringClass()).invoke(getter)))[ FD ]
Line_13 $$ ByteCodeExpression size = constantInt(serializedSizeOf(clazz))-->Line_14 $$ serializerBody.append(slice.set(invokeStatic(Slices.class, "allocate", Slice.class, size)))[ FD ]
Line_7 $$ if (fields.size() == 1) -->Line_12 $$ Variable slice = method.getScope().declareVariable(Slice.class, "slice")[ CD ]
Line_7 $$ if (fields.size() == 1) -->Line_13 $$ ByteCodeExpression size = constantInt(serializedSizeOf(clazz))[ CD ]
Line_2 $$ private static <T> void generateSerialize(ClassDefinition definition, Class<T> clazz, List<StateField> fields) -->Line_6 $$ ByteCodeBlock serializerBody = method.getBody()[ CD ]
Line_2 $$ private static <T> void generateSerialize(ClassDefinition definition, Class<T> clazz, List<StateField> fields) -->Line_5 $$ MethodDefinition method = definition.declareMethod(a(PUBLIC), "serialize", type(void.class), state, out)[ FD ]
Line_8 $$ Method getter = getGetter(clazz, fields.get(0))-->Line_18 $$ serializerBody.append(invokeStatic(sliceSetter, slice, constantInt(offsetOfField(field, fields)), state.cast(getter.getDeclaringClass()).invoke(getter)))[ FD ]
Line_3 $$ Parameter state = arg("state", Object.class)-->Line_18 $$ serializerBody.append(invokeStatic(sliceSetter, slice, constantInt(offsetOfField(field, fields)), state.cast(getter.getDeclaringClass()).invoke(getter)))[ FD ]
Line_6 $$ ByteCodeBlock serializerBody = method.getBody()-->Line_14 $$ serializerBody.append(slice.set(invokeStatic(Slices.class, "allocate", Slice.class, size)))[ FD ]
Line_3 $$ Parameter state = arg("state", Object.class)-->Line_5 $$ MethodDefinition method = definition.declareMethod(a(PUBLIC), "serialize", type(void.class), state, out)[ FD ]
Line_3 $$ Parameter state = arg("state", Object.class)-->Line_10 $$ serializerBody.append(invokeStatic(append, out, state.cast(getter.getDeclaringClass()).invoke(getter)))[ FD ]
Line_2 $$ private static <T> void generateSerialize(ClassDefinition definition, Class<T> clazz, List<StateField> fields) -->Line_4 $$ Parameter out = arg("out", BlockBuilder.class)[ CD ]
Line_5 $$ MethodDefinition method = definition.declareMethod(a(PUBLIC), "serialize", type(void.class), state, out)-->Line_6 $$ ByteCodeBlock serializerBody = method.getBody()[ FD ]
Line_2 $$ private static <T> void generateSerialize(ClassDefinition definition, Class<T> clazz, List<StateField> fields) -->Line_18 $$ serializerBody.append(invokeStatic(sliceSetter, slice, constantInt(offsetOfField(field, fields)), state.cast(getter.getDeclaringClass()).invoke(getter)))[ FD ]
Line_5 $$ MethodDefinition method = definition.declareMethod(a(PUBLIC), "serialize", type(void.class), state, out)-->Line_12 $$ Variable slice = method.getScope().declareVariable(Slice.class, "slice")[ FD ]
Line_4 $$ Parameter out = arg("out", BlockBuilder.class)-->Line_20 $$ serializerBody.append(out.invoke("writeBytes", BlockBuilder.class, slice, constantInt(0), size).invoke("closeEntry", BlockBuilder.class).pop())[ FD ]
Line_13 $$ ByteCodeExpression size = constantInt(serializedSizeOf(clazz))-->Line_20 $$ serializerBody.append(out.invoke("writeBytes", BlockBuilder.class, slice, constantInt(0), size).invoke("closeEntry", BlockBuilder.class).pop())[ FD ]
Line_15 $$ for (StateField field : fields) -->Line_18 $$ serializerBody.append(invokeStatic(sliceSetter, slice, constantInt(offsetOfField(field, fields)), state.cast(getter.getDeclaringClass()).invoke(getter)))[ FD ]
Line_2 $$ private static <T> void generateSerialize(ClassDefinition definition, Class<T> clazz, List<StateField> fields) -->Line_16 $$ Method getter = getGetter(clazz, field)[ FD ]
Line_9 $$ Method append = getBlockBuilderAppend(getter.getReturnType())-->Line_10 $$ serializerBody.append(invokeStatic(append, out, state.cast(getter.getDeclaringClass()).invoke(getter)))[ FD ]
Line_8 $$ Method getter = getGetter(clazz, fields.get(0))-->Line_10 $$ serializerBody.append(invokeStatic(append, out, state.cast(getter.getDeclaringClass()).invoke(getter)))[ FD ]
Line_2 $$ private static <T> void generateSerialize(ClassDefinition definition, Class<T> clazz, List<StateField> fields) -->Line_13 $$ ByteCodeExpression size = constantInt(serializedSizeOf(clazz))[ FD ]
Line_17 $$ Method sliceSetter = getSliceSetter(getter.getReturnType())-->Line_18 $$ serializerBody.append(invokeStatic(sliceSetter, slice, constantInt(offsetOfField(field, fields)), state.cast(getter.getDeclaringClass()).invoke(getter)))[ FD ]
Line_2 $$ private static <T> void generateSerialize(ClassDefinition definition, Class<T> clazz, List<StateField> fields) -->Line_22 $$ serializerBody.ret()[ CD ]
Line_7 $$ if (fields.size() == 1) -->Line_9 $$ Method append = getBlockBuilderAppend(getter.getReturnType())[ CD ]
Line_2 $$ private static <T> void generateSerialize(ClassDefinition definition, Class<T> clazz, List<StateField> fields) -->Line_3 $$ Parameter state = arg("state", Object.class)[ CD ]
Line_7 $$ if (fields.size() == 1) -->Line_20 $$ serializerBody.append(out.invoke("writeBytes", BlockBuilder.class, slice, constantInt(0), size).invoke("closeEntry", BlockBuilder.class).pop())[ CD ]
Line_2 $$ private static <T> void generateSerialize(ClassDefinition definition, Class<T> clazz, List<StateField> fields) -->Line_7 $$ if (fields.size() == 1) [ CD ]
Line_12 $$ Variable slice = method.getScope().declareVariable(Slice.class, "slice")-->Line_14 $$ serializerBody.append(slice.set(invokeStatic(Slices.class, "allocate", Slice.class, size)))[ FD ]
Line_7 $$ if (fields.size() == 1) -->Line_10 $$ serializerBody.append(invokeStatic(append, out, state.cast(getter.getDeclaringClass()).invoke(getter)))[ CD ]
Line_8 $$ Method getter = getGetter(clazz, fields.get(0))-->Line_9 $$ Method append = getBlockBuilderAppend(getter.getReturnType())[ FD ]
Line_2 $$ private static <T> void generateSerialize(ClassDefinition definition, Class<T> clazz, List<StateField> fields) -->Line_5 $$ MethodDefinition method = definition.declareMethod(a(PUBLIC), "serialize", type(void.class), state, out)[ CD ]
Line_6 $$ ByteCodeBlock serializerBody = method.getBody()-->Line_10 $$ serializerBody.append(invokeStatic(append, out, state.cast(getter.getDeclaringClass()).invoke(getter)))[ FD ]
Line_2 $$ private static <T> void generateSerialize(ClassDefinition definition, Class<T> clazz, List<StateField> fields) -->Line_7 $$ if (fields.size() == 1) [ FD ]
Line_6 $$ ByteCodeBlock serializerBody = method.getBody()-->Line_18 $$ serializerBody.append(invokeStatic(sliceSetter, slice, constantInt(offsetOfField(field, fields)), state.cast(getter.getDeclaringClass()).invoke(getter)))[ FD ]
Line_7 $$ if (fields.size() == 1) -->Line_14 $$ serializerBody.append(slice.set(invokeStatic(Slices.class, "allocate", Slice.class, size)))[ CD ]
Line_8 $$ Method getter = getGetter(clazz, fields.get(0))-->Line_17 $$ Method sliceSetter = getSliceSetter(getter.getReturnType())[ FD ]
Line_7 $$ if (fields.size() == 1) -->Line_8 $$ Method getter = getGetter(clazz, fields.get(0))[ CD ]
Line_2 $$ private static <T> void generateSerialize(ClassDefinition definition, Class<T> clazz, List<StateField> fields) -->Line_8 $$ Method getter = getGetter(clazz, fields.get(0))[ FD ]
Line_4 $$ Parameter out = arg("out", BlockBuilder.class)-->Line_5 $$ MethodDefinition method = definition.declareMethod(a(PUBLIC), "serialize", type(void.class), state, out)[ FD ]
Line_6 $$ ByteCodeBlock serializerBody = method.getBody()-->Line_20 $$ serializerBody.append(out.invoke("writeBytes", BlockBuilder.class, slice, constantInt(0), size).invoke("closeEntry", BlockBuilder.class).pop())[ FD ]
Line_6 $$ ByteCodeBlock serializerBody = method.getBody()-->Line_22 $$ serializerBody.ret()[ FD ]
Line_15 $$ for (StateField field : fields) -->Line_16 $$ Method getter = getGetter(clazz, field)[ FD ]
