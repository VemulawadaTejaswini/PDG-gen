Line_4 $$ try (PreparedStatement statement = connection.prepareStatement(sql, RETURN_GENERATED_KEYS)) -->Line_7 $$ statement.setLong(2, tableId)[ FD ]
Line_15 $$ try (ResultSet keys = statement.getGeneratedKeys()) -->Line_16 $$ while (keys.next()) [ FD ]
Line_4 $$ try (PreparedStatement statement = connection.prepareStatement(sql, RETURN_GENERATED_KEYS)) -->Line_6 $$ statement.setBytes(1, uuidToBytes(shard.getShardUuid()))[ FD ]
Line_4 $$ try (PreparedStatement statement = connection.prepareStatement(sql, RETURN_GENERATED_KEYS)) -->Line_9 $$ statement.setLong(4, shard.getCompressedSize())[ FD ]
Line_14 $$ ImmutableList.Builder<Long> builder = ImmutableList.builder()-->Line_20 $$ List<Long> shardIds = builder.build()[ FD ]
Line_2 $$ private static List<Long> insertShards(Connection connection, long tableId, List<ShardInfo> shards) throws SQLException -->Line_21 $$ if (shardIds.size() != shards.size()) [ FD ]
Line_5 $$ for (ShardInfo shard : shards) -->Line_9 $$ statement.setLong(4, shard.getCompressedSize())[ FD ]
Line_5 $$ for (ShardInfo shard : shards) -->Line_10 $$ statement.setLong(5, shard.getUncompressedSize())[ FD ]
Line_4 $$ try (PreparedStatement statement = connection.prepareStatement(sql, RETURN_GENERATED_KEYS)) -->Line_8 $$ statement.setLong(3, shard.getRowCount())[ FD ]
Line_2 $$ private static List<Long> insertShards(Connection connection, long tableId, List<ShardInfo> shards) throws SQLException -->Line_3 $$ String sql = "" + "INSERT INTO shards (shard_uuid, table_id, create_time, row_count, compressed_size, uncompressed_size)\n" + "VALUES (?, ?, CURRENT_TIMESTAMP, ?, ?, ?)"[ CD ]
Line_14 $$ ImmutableList.Builder<Long> builder = ImmutableList.builder()-->Line_17 $$ builder.add(keys.getLong(1))[ FD ]
Line_3 $$ String sql = "" + "INSERT INTO shards (shard_uuid, table_id, create_time, row_count, compressed_size, uncompressed_size)\n" + "VALUES (?, ?, CURRENT_TIMESTAMP, ?, ?, ?)"-->Line_4 $$ try (PreparedStatement statement = connection.prepareStatement(sql, RETURN_GENERATED_KEYS)) [ FD ]
Line_4 $$ try (PreparedStatement statement = connection.prepareStatement(sql, RETURN_GENERATED_KEYS)) -->Line_10 $$ statement.setLong(5, shard.getUncompressedSize())[ FD ]
Line_4 $$ try (PreparedStatement statement = connection.prepareStatement(sql, RETURN_GENERATED_KEYS)) -->Line_13 $$ statement.executeBatch()[ FD ]
Line_2 $$ private static List<Long> insertShards(Connection connection, long tableId, List<ShardInfo> shards) throws SQLException -->Line_7 $$ statement.setLong(2, tableId)[ FD ]
Line_4 $$ try (PreparedStatement statement = connection.prepareStatement(sql, RETURN_GENERATED_KEYS)) -->Line_11 $$ statement.addBatch()[ FD ]
Line_15 $$ try (ResultSet keys = statement.getGeneratedKeys()) -->Line_17 $$ builder.add(keys.getLong(1))[ FD ]
Line_2 $$ private static List<Long> insertShards(Connection connection, long tableId, List<ShardInfo> shards) throws SQLException -->Line_4 $$ try (PreparedStatement statement = connection.prepareStatement(sql, RETURN_GENERATED_KEYS)) [ FD ]
Line_4 $$ try (PreparedStatement statement = connection.prepareStatement(sql, RETURN_GENERATED_KEYS)) -->Line_15 $$ try (ResultSet keys = statement.getGeneratedKeys()) [ FD ]
Line_16 $$ while (keys.next()) -->Line_17 $$ builder.add(keys.getLong(1))[ CD ]
Line_5 $$ for (ShardInfo shard : shards) -->Line_6 $$ statement.setBytes(1, uuidToBytes(shard.getShardUuid()))[ FD ]
Line_5 $$ for (ShardInfo shard : shards) -->Line_8 $$ statement.setLong(3, shard.getRowCount())[ FD ]
Line_20 $$ List<Long> shardIds = builder.build()-->Line_21 $$ if (shardIds.size() != shards.size()) [ FD ]
