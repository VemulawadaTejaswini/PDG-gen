Line_24 $$ for (int i = 0; i < asyncIndices; i++) -->Line_25 $$ final int cur = i[ CD ]
Line_4 $$ Settings settings = settingsBuilder().put("action.write_consistency", "one").build()-->Line_8 $$ internalCluster().startNode(settings)[ FD ]
Line_40 $$ int chaosType = randomInt(10)-->Line_41 $$ if (chaosType < 4) [ FD ]
Line_42 $$ if (indices.size() > 0) -->Line_43 $$ String index = indices.remove(randomInt(indices.size() - 1))[ CD ]
Line_2 $$ public void testChaosSnapshot() throws Exception -->Line_62 $$ for (int i = 0; i < asyncIndices; i++) [ CD ]
Line_2 $$ public void testChaosSnapshot() throws Exception -->Line_18 $$ int asyncNodes = between(0, 5)[ CD ]
Line_14 $$ for (int i = 0; i < initialIndices; i++) -->Line_15 $$ createTestIndex("test-" + i)[ CD ]
Line_12 $$ int initialIndices = between(1, 3)-->Line_14 $$ for (int i = 0; i < initialIndices; i++) [ FD ]
Line_47 $$ if (chaosType < 6) -->Line_52 $$ if (chaosType < 8) [ CD ]
Line_21 $$ int asyncIndices = between(0, 10)-->Line_24 $$ for (int i = 0; i < asyncIndices; i++) [ FD ]
Line_18 $$ int asyncNodes = between(0, 5)-->Line_20 $$ InternalTestCluster.Async<List<String>> asyncNodesFuture = internalCluster().startNodesAsync(asyncNodes, settings)[ FD ]
Line_3 $$ final List<String> indices = new CopyOnWriteArrayList()-->Line_29 $$ indices.add("test-async-" + cur)[ FD ]
Line_40 $$ int chaosType = randomInt(10)-->Line_52 $$ if (chaosType < 8) [ FD ]
Line_38 $$ while (System.currentTimeMillis() - start < 30000 && !snapshotIsDone("test-repo", "test-snap")) -->Line_40 $$ int chaosType = randomInt(10)[ CD ]
Line_2 $$ public void testChaosSnapshot() throws Exception -->Line_3 $$ final List<String> indices = new CopyOnWriteArrayList()[ CD ]
Line_24 $$ for (int i = 0; i < asyncIndices; i++) -->Line_26 $$ asyncIndexThreads[i] = new Thread(new Runnable() [ CD ]
Line_38 $$ while (System.currentTimeMillis() - start < 30000 && !snapshotIsDone("test-repo", "test-snap")) -->Line_41 $$ if (chaosType < 4) [ CD ]
Line_4 $$ Settings settings = settingsBuilder().put("action.write_consistency", "one").build()-->Line_20 $$ InternalTestCluster.Async<List<String>> asyncNodesFuture = internalCluster().startNodesAsync(asyncNodes, settings)[ FD ]
Line_26 $$ asyncIndexThreads[i] = new Thread(new Runnable() -->Line_29 $$ indices.add("test-async-" + cur)[ CD ]
Line_14 $$ for (int i = 0; i < initialIndices; i++) -->Line_16 $$ indices.add("test-" + i)[ CD ]
Line_24 $$ for (int i = 0; i < asyncIndices; i++) -->Line_32 $$ asyncIndexThreads[i].start()[ CD ]
Line_2 $$ public void testChaosSnapshot() throws Exception -->Line_23 $$ Thread[] asyncIndexThreads = new Thread[asyncIndices][ CD ]
Line_41 $$ if (chaosType < 4) -->Line_42 $$ if (indices.size() > 0) [ CD ]
Line_2 $$ public void testChaosSnapshot() throws Exception -->Line_20 $$ InternalTestCluster.Async<List<String>> asyncNodesFuture = internalCluster().startNodesAsync(asyncNodes, settings)[ CD ]
Line_24 $$ for (int i = 0; i < asyncIndices; i++) -->Line_62 $$ for (int i = 0; i < asyncIndices; i++) [ FD ]
Line_21 $$ int asyncIndices = between(0, 10)-->Line_62 $$ for (int i = 0; i < asyncIndices; i++) [ FD ]
Line_38 $$ while (System.currentTimeMillis() - start < 30000 && !snapshotIsDone("test-repo", "test-snap")) -->Line_39 $$ Thread.sleep(100)[ CD ]
Line_3 $$ final List<String> indices = new CopyOnWriteArrayList()-->Line_43 $$ String index = indices.remove(randomInt(indices.size() - 1))[ FD ]
Line_2 $$ public void testChaosSnapshot() throws Exception -->Line_75 $$ asyncNodesFuture.get()[ CD ]
Line_42 $$ if (indices.size() > 0) -->Line_45 $$ internalCluster().wipeIndices(index)[ CD ]
Line_2 $$ public void testChaosSnapshot() throws Exception -->Line_7 $$ for (int i = 0; i < initialNodes; i++) [ CD ]
Line_5 $$ int initialNodes = between(1, 3)-->Line_7 $$ for (int i = 0; i < initialNodes; i++) [ FD ]
Line_14 $$ for (int i = 0; i < initialIndices; i++) -->Line_24 $$ for (int i = 0; i < asyncIndices; i++) [ FD ]
Line_26 $$ asyncIndexThreads[i] = new Thread(new Runnable() -->Line_28 $$ createTestIndex("test-async-" + cur)[ CD ]
Line_43 $$ String index = indices.remove(randomInt(indices.size() - 1))-->Line_45 $$ internalCluster().wipeIndices(index)[ FD ]
Line_40 $$ int chaosType = randomInt(10)-->Line_47 $$ if (chaosType < 6) [ FD ]
Line_41 $$ if (chaosType < 4) -->Line_47 $$ if (chaosType < 6) [ CD ]
Line_14 $$ for (int i = 0; i < initialIndices; i++) -->Line_62 $$ for (int i = 0; i < asyncIndices; i++) [ FD ]
Line_2 $$ public void testChaosSnapshot() throws Exception -->Line_24 $$ for (int i = 0; i < asyncIndices; i++) [ CD ]
Line_2 $$ public void testChaosSnapshot() throws Exception -->Line_14 $$ for (int i = 0; i < initialIndices; i++) [ CD ]
Line_2 $$ public void testChaosSnapshot() throws Exception -->Line_21 $$ int asyncIndices = between(0, 10)[ CD ]
Line_2 $$ public void testChaosSnapshot() throws Exception -->Line_36 $$ long start = System.currentTimeMillis()[ CD ]
Line_47 $$ if (chaosType < 6) -->Line_48 $$ if (cluster().size() > 1) [ CD ]
Line_43 $$ String index = indices.remove(randomInt(indices.size() - 1))-->Line_55 $$ createTestIndex(index)[ FD ]
Line_20 $$ InternalTestCluster.Async<List<String>> asyncNodesFuture = internalCluster().startNodesAsync(asyncNodes, settings)-->Line_75 $$ asyncNodesFuture.get()[ FD ]
Line_3 $$ final List<String> indices = new CopyOnWriteArrayList()-->Line_42 $$ if (indices.size() > 0) [ FD ]
Line_7 $$ for (int i = 0; i < initialNodes; i++) -->Line_8 $$ internalCluster().startNode(settings)[ CD ]
Line_7 $$ for (int i = 0; i < initialNodes; i++) -->Line_24 $$ for (int i = 0; i < asyncIndices; i++) [ FD ]
Line_62 $$ for (int i = 0; i < asyncIndices; i++) -->Line_63 $$ asyncIndexThreads[i].join()[ CD ]
Line_3 $$ final List<String> indices = new CopyOnWriteArrayList()-->Line_16 $$ indices.add("test-" + i)[ FD ]
Line_2 $$ public void testChaosSnapshot() throws Exception -->Line_38 $$ while (System.currentTimeMillis() - start < 30000 && !snapshotIsDone("test-repo", "test-snap")) [ CD ]
Line_52 $$ if (chaosType < 8) -->Line_55 $$ createTestIndex(index)[ CD ]
Line_2 $$ public void testChaosSnapshot() throws Exception -->Line_35 $$ ListenableActionFuture<CreateSnapshotResponse> snapshotResponseFuture = client().admin().cluster().prepareCreateSnapshot("test-repo", "test-snap").setWaitForCompletion(true).setIndices("test-*").setPartial(true).execute()[ CD ]
Line_7 $$ for (int i = 0; i < initialNodes; i++) -->Line_14 $$ for (int i = 0; i < initialIndices; i++) [ FD ]
Line_2 $$ public void testChaosSnapshot() throws Exception -->Line_12 $$ int initialIndices = between(1, 3)[ CD ]
Line_2 $$ public void testChaosSnapshot() throws Exception -->Line_4 $$ Settings settings = settingsBuilder().put("action.write_consistency", "one").build()[ CD ]
Line_2 $$ public void testChaosSnapshot() throws Exception -->Line_11 $$ assertAcked(client().admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(Settings.settingsBuilder().put("location", randomRepoPath()).put("compress", randomBoolean()).put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)))[ CD ]
Line_2 $$ public void testChaosSnapshot() throws Exception -->Line_66 $$ assertAcked(client().admin().indices().prepareUpdateSettings("test-*").setSettings(Settings.builder().put(IndexStore.INDEX_STORE_THROTTLE_TYPE, "node")))[ CD ]
Line_7 $$ for (int i = 0; i < initialNodes; i++) -->Line_62 $$ for (int i = 0; i < asyncIndices; i++) [ FD ]
Line_48 $$ if (cluster().size() > 1) -->Line_50 $$ internalCluster().stopRandomDataNode()[ CD ]
Line_2 $$ public void testChaosSnapshot() throws Exception -->Line_5 $$ int initialNodes = between(1, 3)[ CD ]
