Line_2 $$ public void testDuplicateInserts() -->Line_19 $$ store.put(key1, value2)[ CD ]
Line_29 $$ Integer value = store.remove(key1)-->Line_30 $$ Assert.assertTrue(allValues.remove(value))[ FD ]
Line_2 $$ public void testDuplicateInserts() -->Line_27 $$ Assert.assertEquals(3, allValues.size())[ CD ]
Line_2 $$ public void testDuplicateInserts() -->Line_22 $$ store.visitAll(new Visitor<Key, Integer>() [ CD ]
Line_3 $$ IdentityHashStore<Key, Integer> store = new IdentityHashStore<Key, Integer>(4)-->Line_16 $$ Assert.assertNull(store.get(equalToKey1))[ FD ]
Line_2 $$ public void testDuplicateInserts() -->Line_3 $$ IdentityHashStore<Key, Integer> store = new IdentityHashStore<Key, Integer>(4)[ CD ]
Line_2 $$ public void testDuplicateInserts() -->Line_17 $$ Assert.assertTrue(!store.isEmpty())[ CD ]
Line_4 $$ store.visitAll(new Visitor<Key, Integer>() -->Line_24 $$ allValues.add(v)[ FD ]
Line_3 $$ IdentityHashStore<Key, Integer> store = new IdentityHashStore<Key, Integer>(4)-->Line_4 $$ store.visitAll(new Visitor<Key, Integer>() [ FD ]
Line_3 $$ IdentityHashStore<Key, Integer> store = new IdentityHashStore<Key, Integer>(4)-->Line_17 $$ Assert.assertTrue(!store.isEmpty())[ FD ]
Line_2 $$ public void testDuplicateInserts() -->Line_16 $$ Assert.assertNull(store.get(equalToKey1))[ CD ]
Line_2 $$ public void testDuplicateInserts() -->Line_4 $$ store.visitAll(new Visitor<Key, Integer>() [ CD ]
Line_2 $$ public void testDuplicateInserts() -->Line_9 $$ Assert.assertTrue(store.isEmpty())[ CD ]
Line_3 $$ IdentityHashStore<Key, Integer> store = new IdentityHashStore<Key, Integer>(4)-->Line_19 $$ store.put(key1, value2)[ FD ]
Line_3 $$ IdentityHashStore<Key, Integer> store = new IdentityHashStore<Key, Integer>(4)-->Line_9 $$ Assert.assertTrue(store.isEmpty())[ FD ]
Line_22 $$ store.visitAll(new Visitor<Key, Integer>() -->Line_24 $$ allValues.add(v)[ FD ]
Line_3 $$ IdentityHashStore<Key, Integer> store = new IdentityHashStore<Key, Integer>(4)-->Line_33 $$ Assert.assertTrue(store.isEmpty())[ FD ]
Line_3 $$ IdentityHashStore<Key, Integer> store = new IdentityHashStore<Key, Integer>(4)-->Line_29 $$ Integer value = store.remove(key1)[ FD ]
Line_22 $$ store.visitAll(new Visitor<Key, Integer>() -->Line_24 $$ allValues.add(v)[ CD ]
Line_2 $$ public void testDuplicateInserts() -->Line_14 $$ store.put(key1, value1)[ CD ]
Line_28 $$ for (int i = 0; i < 3; i++) -->Line_30 $$ Assert.assertTrue(allValues.remove(value))[ CD ]
Line_4 $$ store.visitAll(new Visitor<Key, Integer>() -->Line_6 $$ Assert.fail("found key " + k + " in empty IdentityHashStore.")[ CD ]
Line_2 $$ public void testDuplicateInserts() -->Line_32 $$ Assert.assertNull(store.remove(key1))[ CD ]
Line_2 $$ public void testDuplicateInserts() -->Line_28 $$ for (int i = 0; i < 3; i++) [ CD ]
Line_2 $$ public void testDuplicateInserts() -->Line_20 $$ store.put(key1, value3)[ CD ]
Line_3 $$ IdentityHashStore<Key, Integer> store = new IdentityHashStore<Key, Integer>(4)-->Line_14 $$ store.put(key1, value1)[ FD ]
Line_3 $$ IdentityHashStore<Key, Integer> store = new IdentityHashStore<Key, Integer>(4)-->Line_18 $$ Assert.assertEquals(value1, store.get(key1))[ FD ]
Line_3 $$ IdentityHashStore<Key, Integer> store = new IdentityHashStore<Key, Integer>(4)-->Line_22 $$ store.visitAll(new Visitor<Key, Integer>() [ FD ]
Line_3 $$ IdentityHashStore<Key, Integer> store = new IdentityHashStore<Key, Integer>(4)-->Line_20 $$ store.put(key1, value3)[ FD ]
Line_3 $$ IdentityHashStore<Key, Integer> store = new IdentityHashStore<Key, Integer>(4)-->Line_32 $$ Assert.assertNull(store.remove(key1))[ FD ]
Line_2 $$ public void testDuplicateInserts() -->Line_33 $$ Assert.assertTrue(store.isEmpty())[ CD ]
Line_2 $$ public void testDuplicateInserts() -->Line_18 $$ Assert.assertEquals(value1, store.get(key1))[ CD ]
Line_28 $$ for (int i = 0; i < 3; i++) -->Line_29 $$ Integer value = store.remove(key1)[ CD ]
