Line_2 $$ private static BekIntMap createBekIntMap(final List<Integer> result) -->Line_4 $$ for (int i = 0; i < result.size(); i++) [ CD ]
Line_20 $$ return new BekIntMap() -->Line_34 $$ return compressedBekMap.get(bekIndex)[ CD ]
Line_20 $$ return new BekIntMap() -->Line_34 $$ return compressedBekMap.get(bekIndex)[ FD ]
Line_7 $$ final IntList compressedBekMap = CompressedIntList.newInstance(new IntList() -->Line_24 $$ return compressedBekMap.size()[ FD ]
Line_2 $$ private static BekIntMap createBekIntMap(final List<Integer> result) -->Line_20 $$ return new BekIntMap() [ CD ]
Line_2 $$ private static BekIntMap createBekIntMap(final List<Integer> result) -->Line_19 $$ final IntList compressedReverseMap = CompressedIntList.newInstance(reverseMap)[ CD ]
Line_7 $$ final IntList compressedBekMap = CompressedIntList.newInstance(new IntList() -->Line_11 $$ return result.size()[ CD ]
Line_20 $$ return new BekIntMap() -->Line_29 $$ return compressedReverseMap.get(usualIndex)[ FD ]
Line_7 $$ final IntList compressedBekMap = CompressedIntList.newInstance(new IntList() -->Line_16 $$ return result.get(index)[ FD ]
Line_3 $$ final int[] reverseMap = new int[result.size()]-->Line_19 $$ final IntList compressedReverseMap = CompressedIntList.newInstance(reverseMap)[ FD ]
Line_4 $$ for (int i = 0; i < result.size(); i++) -->Line_5 $$ reverseMap[result.get(i)] = i[ FD ]
Line_2 $$ private static BekIntMap createBekIntMap(final List<Integer> result) -->Line_11 $$ return result.size()[ FD ]
Line_2 $$ private static BekIntMap createBekIntMap(final List<Integer> result) -->Line_16 $$ return result.get(index)[ FD ]
Line_2 $$ private static BekIntMap createBekIntMap(final List<Integer> result) -->Line_7 $$ final IntList compressedBekMap = CompressedIntList.newInstance(new IntList() [ CD ]
Line_2 $$ private static BekIntMap createBekIntMap(final List<Integer> result) -->Line_5 $$ reverseMap[result.get(i)] = i[ FD ]
Line_20 $$ return new BekIntMap() -->Line_24 $$ return compressedBekMap.size()[ CD ]
Line_2 $$ private static BekIntMap createBekIntMap(final List<Integer> result) -->Line_3 $$ final int[] reverseMap = new int[result.size()][ CD ]
Line_7 $$ final IntList compressedBekMap = CompressedIntList.newInstance(new IntList() -->Line_34 $$ return compressedBekMap.get(bekIndex)[ FD ]
Line_2 $$ private static BekIntMap createBekIntMap(final List<Integer> result) -->Line_4 $$ for (int i = 0; i < result.size(); i++) [ FD ]
Line_7 $$ final IntList compressedBekMap = CompressedIntList.newInstance(new IntList() -->Line_16 $$ return result.get(index)[ CD ]
Line_2 $$ private static BekIntMap createBekIntMap(final List<Integer> result) -->Line_3 $$ final int[] reverseMap = new int[result.size()][ FD ]
Line_4 $$ for (int i = 0; i < result.size(); i++) -->Line_5 $$ reverseMap[result.get(i)] = i[ CD ]
Line_20 $$ return new BekIntMap() -->Line_29 $$ return compressedReverseMap.get(usualIndex)[ CD ]
