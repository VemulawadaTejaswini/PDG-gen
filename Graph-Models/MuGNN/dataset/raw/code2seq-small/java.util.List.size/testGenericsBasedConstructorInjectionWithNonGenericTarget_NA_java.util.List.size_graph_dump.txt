Line_2 $$ public void testGenericsBasedConstructorInjectionWithNonGenericTarget() -->Line_26 $$ assertSame(ngr, bean.stringRepositoryMap.get("simpleRepo"))[ CD ]
Line_11 $$ SimpleRepository ngr = new SimpleRepository()-->Line_27 $$ assertSame(ngr, bean.integerRepositoryMap.get("simpleRepo"))[ FD ]
Line_2 $$ public void testGenericsBasedConstructorInjectionWithNonGenericTarget() -->Line_19 $$ assertSame(ngr, bean.integerRepositoryArray[0])[ CD ]
Line_2 $$ public void testGenericsBasedConstructorInjectionWithNonGenericTarget() -->Line_10 $$ bf.registerBeanDefinition("annotatedBean", bd)[ CD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_6 $$ bpp.setBeanFactory(bf)[ FD ]
Line_2 $$ public void testGenericsBasedConstructorInjectionWithNonGenericTarget() -->Line_9 $$ bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)[ CD ]
Line_11 $$ SimpleRepository ngr = new SimpleRepository()-->Line_22 $$ assertSame(ngr, bean.stringRepositoryList.get(0))[ FD ]
Line_2 $$ public void testGenericsBasedConstructorInjectionWithNonGenericTarget() -->Line_5 $$ AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()[ CD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_10 $$ bf.registerBeanDefinition("annotatedBean", bd)[ FD ]
Line_2 $$ public void testGenericsBasedConstructorInjectionWithNonGenericTarget() -->Line_6 $$ bpp.setBeanFactory(bf)[ CD ]
Line_2 $$ public void testGenericsBasedConstructorInjectionWithNonGenericTarget() -->Line_13 $$ RepositoryConstructorInjectionBean bean = (RepositoryConstructorInjectionBean) bf.getBean("annotatedBean")[ CD ]
Line_11 $$ SimpleRepository ngr = new SimpleRepository()-->Line_15 $$ assertSame(ngr, bean.integerRepository)[ FD ]
Line_2 $$ public void testGenericsBasedConstructorInjectionWithNonGenericTarget() -->Line_25 $$ assertSame(1, bean.integerRepositoryMap.size())[ CD ]
Line_11 $$ SimpleRepository ngr = new SimpleRepository()-->Line_12 $$ bf.registerSingleton("simpleRepo", ngr)[ FD ]
Line_2 $$ public void testGenericsBasedConstructorInjectionWithNonGenericTarget() -->Line_22 $$ assertSame(ngr, bean.stringRepositoryList.get(0))[ CD ]
Line_2 $$ public void testGenericsBasedConstructorInjectionWithNonGenericTarget() -->Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()[ CD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_12 $$ bf.registerSingleton("simpleRepo", ngr)[ FD ]
Line_11 $$ SimpleRepository ngr = new SimpleRepository()-->Line_14 $$ assertSame(ngr, bean.stringRepository)[ FD ]
Line_2 $$ public void testGenericsBasedConstructorInjectionWithNonGenericTarget() -->Line_15 $$ assertSame(ngr, bean.integerRepository)[ CD ]
Line_2 $$ public void testGenericsBasedConstructorInjectionWithNonGenericTarget() -->Line_24 $$ assertSame(1, bean.stringRepositoryMap.size())[ CD ]
Line_2 $$ public void testGenericsBasedConstructorInjectionWithNonGenericTarget() -->Line_12 $$ bf.registerSingleton("simpleRepo", ngr)[ CD ]
Line_11 $$ SimpleRepository ngr = new SimpleRepository()-->Line_19 $$ assertSame(ngr, bean.integerRepositoryArray[0])[ FD ]
Line_11 $$ SimpleRepository ngr = new SimpleRepository()-->Line_23 $$ assertSame(ngr, bean.integerRepositoryList.get(0))[ FD ]
Line_2 $$ public void testGenericsBasedConstructorInjectionWithNonGenericTarget() -->Line_27 $$ assertSame(ngr, bean.integerRepositoryMap.get("simpleRepo"))[ CD ]
Line_11 $$ SimpleRepository ngr = new SimpleRepository()-->Line_18 $$ assertSame(ngr, bean.stringRepositoryArray[0])[ FD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_4 $$ bf.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver())[ FD ]
Line_2 $$ public void testGenericsBasedConstructorInjectionWithNonGenericTarget() -->Line_11 $$ SimpleRepository ngr = new SimpleRepository()[ CD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_7 $$ bf.addBeanPostProcessor(bpp)[ FD ]
Line_2 $$ public void testGenericsBasedConstructorInjectionWithNonGenericTarget() -->Line_7 $$ bf.addBeanPostProcessor(bpp)[ CD ]
Line_5 $$ AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()-->Line_7 $$ bf.addBeanPostProcessor(bpp)[ FD ]
Line_2 $$ public void testGenericsBasedConstructorInjectionWithNonGenericTarget() -->Line_21 $$ assertSame(1, bean.integerRepositoryList.size())[ CD ]
Line_2 $$ public void testGenericsBasedConstructorInjectionWithNonGenericTarget() -->Line_23 $$ assertSame(ngr, bean.integerRepositoryList.get(0))[ CD ]
Line_11 $$ SimpleRepository ngr = new SimpleRepository()-->Line_26 $$ assertSame(ngr, bean.stringRepositoryMap.get("simpleRepo"))[ FD ]
Line_2 $$ public void testGenericsBasedConstructorInjectionWithNonGenericTarget() -->Line_18 $$ assertSame(ngr, bean.stringRepositoryArray[0])[ CD ]
Line_8 $$ RootBeanDefinition bd = new RootBeanDefinition(RepositoryConstructorInjectionBean.class)-->Line_9 $$ bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)[ FD ]
Line_2 $$ public void testGenericsBasedConstructorInjectionWithNonGenericTarget() -->Line_4 $$ bf.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver())[ CD ]
Line_5 $$ AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()-->Line_6 $$ bpp.setBeanFactory(bf)[ FD ]
Line_2 $$ public void testGenericsBasedConstructorInjectionWithNonGenericTarget() -->Line_8 $$ RootBeanDefinition bd = new RootBeanDefinition(RepositoryConstructorInjectionBean.class)[ CD ]
Line_2 $$ public void testGenericsBasedConstructorInjectionWithNonGenericTarget() -->Line_20 $$ assertSame(1, bean.stringRepositoryList.size())[ CD ]
Line_2 $$ public void testGenericsBasedConstructorInjectionWithNonGenericTarget() -->Line_14 $$ assertSame(ngr, bean.stringRepository)[ CD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_13 $$ RepositoryConstructorInjectionBean bean = (RepositoryConstructorInjectionBean) bf.getBean("annotatedBean")[ FD ]
Line_8 $$ RootBeanDefinition bd = new RootBeanDefinition(RepositoryConstructorInjectionBean.class)-->Line_10 $$ bf.registerBeanDefinition("annotatedBean", bd)[ FD ]
Line_2 $$ public void testGenericsBasedConstructorInjectionWithNonGenericTarget() -->Line_16 $$ assertSame(1, bean.stringRepositoryArray.length)[ CD ]
Line_2 $$ public void testGenericsBasedConstructorInjectionWithNonGenericTarget() -->Line_17 $$ assertSame(1, bean.integerRepositoryArray.length)[ CD ]
