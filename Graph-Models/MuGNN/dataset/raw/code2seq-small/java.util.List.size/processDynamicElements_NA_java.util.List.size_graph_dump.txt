Line_9 $$ List<String> methodInfo = ContainerUtilRt.newArrayList()-->Line_17 $$ methodInfo.add(text)[ FD ]
Line_16 $$ if (text != null) -->Line_17 $$ methodInfo.add(text)[ CD ]
Line_3 $$ if (!(aClass instanceof GroovyScriptClass)) -->Line_4 $$ return[ CD ]
Line_2 $$ public void processDynamicElements(@NotNull PsiType qualifierType, @Nullable PsiClass aClass, @NotNull PsiScopeProcessor processor, @NotNull PsiElement place, @NotNull ResolveState state) -->Line_20 $$ final String methodCall = ContainerUtil.getLastItem(methodInfo)[ CD ]
Line_9 $$ List<String> methodInfo = ContainerUtilRt.newArrayList()-->Line_20 $$ final String methodCall = ContainerUtil.getLastItem(methodInfo)[ FD ]
Line_10 $$ for (GrMethodCall current = PsiTreeUtil.getParentOfType(place, GrMethodCall.class); current != null; current = PsiTreeUtil.getParentOfType(current, GrMethodCall.class)) -->Line_11 $$ GrExpression expression = current.getInvokedExpression()[ FD ]
Line_2 $$ public void processDynamicElements(@NotNull PsiType qualifierType, @Nullable PsiClass aClass, @NotNull PsiScopeProcessor processor, @NotNull PsiElement place, @NotNull ResolveState state) -->Line_3 $$ if (!(aClass instanceof GroovyScriptClass)) [ CD ]
Line_2 $$ public void processDynamicElements(@NotNull PsiType qualifierType, @Nullable PsiClass aClass, @NotNull PsiScopeProcessor processor, @NotNull PsiElement place, @NotNull ResolveState state) -->Line_10 $$ for (GrMethodCall current = PsiTreeUtil.getParentOfType(place, GrMethodCall.class); current != null; current = PsiTreeUtil.getParentOfType(current, GrMethodCall.class)) [ FD ]
Line_10 $$ for (GrMethodCall current = PsiTreeUtil.getParentOfType(place, GrMethodCall.class); current != null; current = PsiTreeUtil.getParentOfType(current, GrMethodCall.class)) -->Line_11 $$ GrExpression expression = current.getInvokedExpression()[ CD ]
Line_21 $$ if (methodInfo.size() > 1 && BUILD_PROJECT_SCRIPT_BLOCKS.contains(methodCall)) -->Line_22 $$ methodInfo.remove(methodInfo.size() - 1)[ CD ]
Line_2 $$ public void processDynamicElements(@NotNull PsiType qualifierType, @Nullable PsiClass aClass, @NotNull PsiScopeProcessor processor, @NotNull PsiElement place, @NotNull ResolveState state) -->Line_10 $$ for (GrMethodCall current = PsiTreeUtil.getParentOfType(place, GrMethodCall.class); current != null; current = PsiTreeUtil.getParentOfType(current, GrMethodCall.class)) [ CD ]
Line_24 $$ for (GradleMethodContextContributor contributor : GradleMethodContextContributor.EP_NAME.getExtensions()) -->Line_25 $$ contributor.process(methodInfo, processor, state, place)[ FD ]
Line_2 $$ public void processDynamicElements(@NotNull PsiType qualifierType, @Nullable PsiClass aClass, @NotNull PsiScopeProcessor processor, @NotNull PsiElement place, @NotNull ResolveState state) -->Line_25 $$ contributor.process(methodInfo, processor, state, place)[ FD ]
Line_6 $$ PsiFile file = aClass.getContainingFile()-->Line_7 $$ if (file == null || !FileUtilRt.extensionEquals(file.getName(), GradleConstants.EXTENSION) || GradleConstants.SETTINGS_FILE_NAME.equals(file.getName()))[ FD ]
Line_10 $$ for (GrMethodCall current = PsiTreeUtil.getParentOfType(place, GrMethodCall.class); current != null; current = PsiTreeUtil.getParentOfType(current, GrMethodCall.class)) -->Line_16 $$ if (text != null) [ CD ]
Line_20 $$ final String methodCall = ContainerUtil.getLastItem(methodInfo)-->Line_21 $$ if (methodInfo.size() > 1 && BUILD_PROJECT_SCRIPT_BLOCKS.contains(methodCall)) [ FD ]
Line_7 $$ if (file == null || !FileUtilRt.extensionEquals(file.getName(), GradleConstants.EXTENSION) || GradleConstants.SETTINGS_FILE_NAME.equals(file.getName()))-->Line_8 $$ return[ CD ]
Line_15 $$ String text = expression.getText()-->Line_16 $$ if (text != null) [ FD ]
Line_15 $$ String text = expression.getText()-->Line_17 $$ methodInfo.add(text)[ FD ]
Line_9 $$ List<String> methodInfo = ContainerUtilRt.newArrayList()-->Line_21 $$ if (methodInfo.size() > 1 && BUILD_PROJECT_SCRIPT_BLOCKS.contains(methodCall)) [ FD ]
Line_11 $$ GrExpression expression = current.getInvokedExpression()-->Line_15 $$ String text = expression.getText()[ FD ]
Line_2 $$ public void processDynamicElements(@NotNull PsiType qualifierType, @Nullable PsiClass aClass, @NotNull PsiScopeProcessor processor, @NotNull PsiElement place, @NotNull ResolveState state) -->Line_7 $$ if (file == null || !FileUtilRt.extensionEquals(file.getName(), GradleConstants.EXTENSION) || GradleConstants.SETTINGS_FILE_NAME.equals(file.getName()))[ CD ]
Line_11 $$ GrExpression expression = current.getInvokedExpression()-->Line_12 $$ if (expression == null) [ FD ]
Line_9 $$ List<String> methodInfo = ContainerUtilRt.newArrayList()-->Line_22 $$ methodInfo.remove(methodInfo.size() - 1)[ FD ]
Line_2 $$ public void processDynamicElements(@NotNull PsiType qualifierType, @Nullable PsiClass aClass, @NotNull PsiScopeProcessor processor, @NotNull PsiElement place, @NotNull ResolveState state) -->Line_6 $$ PsiFile file = aClass.getContainingFile()[ CD ]
Line_2 $$ public void processDynamicElements(@NotNull PsiType qualifierType, @Nullable PsiClass aClass, @NotNull PsiScopeProcessor processor, @NotNull PsiElement place, @NotNull ResolveState state) -->Line_9 $$ List<String> methodInfo = ContainerUtilRt.newArrayList()[ CD ]
Line_10 $$ for (GrMethodCall current = PsiTreeUtil.getParentOfType(place, GrMethodCall.class); current != null; current = PsiTreeUtil.getParentOfType(current, GrMethodCall.class)) -->Line_12 $$ if (expression == null) [ CD ]
Line_10 $$ for (GrMethodCall current = PsiTreeUtil.getParentOfType(place, GrMethodCall.class); current != null; current = PsiTreeUtil.getParentOfType(current, GrMethodCall.class)) -->Line_15 $$ String text = expression.getText()[ CD ]
Line_9 $$ List<String> methodInfo = ContainerUtilRt.newArrayList()-->Line_25 $$ contributor.process(methodInfo, processor, state, place)[ FD ]
Line_2 $$ public void processDynamicElements(@NotNull PsiType qualifierType, @Nullable PsiClass aClass, @NotNull PsiScopeProcessor processor, @NotNull PsiElement place, @NotNull ResolveState state) -->Line_6 $$ PsiFile file = aClass.getContainingFile()[ FD ]
Line_2 $$ public void processDynamicElements(@NotNull PsiType qualifierType, @Nullable PsiClass aClass, @NotNull PsiScopeProcessor processor, @NotNull PsiElement place, @NotNull ResolveState state) -->Line_21 $$ if (methodInfo.size() > 1 && BUILD_PROJECT_SCRIPT_BLOCKS.contains(methodCall)) [ CD ]
