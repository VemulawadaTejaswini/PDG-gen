Line_22 $$ for (int j = 1; j < heapNodes.size(); j++) -->Line_27 $$ for (int j = heapNodes.size() / 2 - 1; j >= 0; j--) [ FD ]
Line_6 $$ List<HeapNode<Node>> heapNodes = new ArrayList<HeapNode<Node>>()-->Line_22 $$ for (int j = 1; j < heapNodes.size(); j++) [ FD ]
Line_12 $$ HeapNode<Node> heapNode = new HeapNode<Node>(edge)-->Line_25 $$ parent.myChildren[(j + 1) % 2] = heapNode[ FD ]
Line_22 $$ for (int j = 1; j < heapNodes.size(); j++) -->Line_28 $$ heapify(heapNodes.get(j))[ FD ]
Line_4 $$ for (Node node : mySortedNodes) -->Line_7 $$ Collection<GraphEdge<Node>> edges = myNonTreeEdges.get(node)[ FD ]
Line_22 $$ for (int j = 1; j < heapNodes.size(); j++) -->Line_25 $$ parent.myChildren[(j + 1) % 2] = heapNode[ CD ]
Line_10 $$ HeapNode<Node> root = null-->Line_15 $$ root = heapNode[ FD ]
Line_7 $$ Collection<GraphEdge<Node>> edges = myNonTreeEdges.get(node)-->Line_8 $$ if (edges.isEmpty())[ FD ]
Line_15 $$ root = heapNode-->Line_20 $$ myOutRoots.put(node, root)[ FD ]
Line_22 $$ for (int j = 1; j < heapNodes.size(); j++) -->Line_23 $$ HeapNode<Node> heapNode = heapNodes.get(j)[ CD ]
Line_10 $$ HeapNode<Node> root = null-->Line_19 $$ heapNodes.remove(root)[ FD ]
Line_23 $$ HeapNode<Node> heapNode = heapNodes.get(j)-->Line_25 $$ parent.myChildren[(j + 1) % 2] = heapNode[ FD ]
Line_12 $$ HeapNode<Node> heapNode = new HeapNode<Node>(edge)-->Line_15 $$ root = heapNode[ FD ]
Line_15 $$ root = heapNode-->Line_19 $$ heapNodes.remove(root)[ FD ]
Line_6 $$ List<HeapNode<Node>> heapNodes = new ArrayList<HeapNode<Node>>()-->Line_21 $$ if (!heapNodes.isEmpty()) [ FD ]
Line_4 $$ for (Node node : mySortedNodes) -->Line_20 $$ myOutRoots.put(node, root)[ FD ]
Line_6 $$ List<HeapNode<Node>> heapNodes = new ArrayList<HeapNode<Node>>()-->Line_28 $$ heapify(heapNodes.get(j))[ FD ]
Line_22 $$ for (int j = 1; j < heapNodes.size(); j++) -->Line_24 $$ HeapNode<Node> parent = heapNodes.get((j + 1) / 2 - 1)[ CD ]
Line_21 $$ if (!heapNodes.isEmpty()) -->Line_22 $$ for (int j = 1; j < heapNodes.size(); j++) [ CD ]
Line_6 $$ List<HeapNode<Node>> heapNodes = new ArrayList<HeapNode<Node>>()-->Line_24 $$ HeapNode<Node> parent = heapNodes.get((j + 1) / 2 - 1)[ FD ]
Line_6 $$ List<HeapNode<Node>> heapNodes = new ArrayList<HeapNode<Node>>()-->Line_19 $$ heapNodes.remove(root)[ FD ]
Line_6 $$ List<HeapNode<Node>> heapNodes = new ArrayList<HeapNode<Node>>()-->Line_30 $$ root.myChildren[2] = heapNodes.get(0)[ FD ]
Line_14 $$ if (root == null || root.myEdge.getDelta() > heapNode.myEdge.getDelta()) -->Line_15 $$ root = heapNode[ CD ]
Line_27 $$ for (int j = heapNodes.size() / 2 - 1; j >= 0; j--) -->Line_28 $$ heapify(heapNodes.get(j))[ CD ]
Line_6 $$ List<HeapNode<Node>> heapNodes = new ArrayList<HeapNode<Node>>()-->Line_27 $$ for (int j = heapNodes.size() / 2 - 1; j >= 0; j--) [ FD ]
Line_27 $$ for (int j = heapNodes.size() / 2 - 1; j >= 0; j--) -->Line_28 $$ heapify(heapNodes.get(j))[ FD ]
Line_12 $$ HeapNode<Node> heapNode = new HeapNode<Node>(edge)-->Line_13 $$ heapNodes.add(heapNode)[ FD ]
Line_6 $$ List<HeapNode<Node>> heapNodes = new ArrayList<HeapNode<Node>>()-->Line_13 $$ heapNodes.add(heapNode)[ FD ]
Line_22 $$ for (int j = 1; j < heapNodes.size(); j++) -->Line_23 $$ HeapNode<Node> heapNode = heapNodes.get(j)[ FD ]
Line_6 $$ List<HeapNode<Node>> heapNodes = new ArrayList<HeapNode<Node>>()-->Line_23 $$ HeapNode<Node> heapNode = heapNodes.get(j)[ FD ]
Line_21 $$ if (!heapNodes.isEmpty()) -->Line_27 $$ for (int j = heapNodes.size() / 2 - 1; j >= 0; j--) [ CD ]
Line_10 $$ HeapNode<Node> root = null-->Line_20 $$ myOutRoots.put(node, root)[ FD ]
Line_21 $$ if (!heapNodes.isEmpty()) -->Line_30 $$ root.myChildren[2] = heapNodes.get(0)[ CD ]
