Line_2 $$ public void testSearch() throws Exception -->Line_13 $$ intervals.add(Interval.<Integer, Void>create(15, 20))[ CD ]
Line_2 $$ public void testSearch() throws Exception -->Line_16 $$ IntervalTree<Integer, Void, Interval<Integer, Void>> it = IntervalTree.build(intervals)[ CD ]
Line_2 $$ public void testSearch() throws Exception -->Line_24 $$ List<Interval<Integer, Void>> intervals2 = new ArrayList<Interval<Integer, Void>>()[ CD ]
Line_2 $$ public void testSearch() throws Exception -->Line_28 $$ intervals2.add(Interval.<Integer, Void>create(1779, 1828))[ CD ]
Line_2 $$ public void testSearch() throws Exception -->Line_6 $$ intervals.add(Interval.<Integer, Void>create(1, 2))[ CD ]
Line_2 $$ public void testSearch() throws Exception -->Line_17 $$ assertEquals(3, it.search(Interval.<Integer, Void>create(4, 4)).size())[ CD ]
Line_24 $$ List<Interval<Integer, Void>> intervals2 = new ArrayList<Interval<Integer, Void>>()-->Line_30 $$ intervals2.add(Interval.<Integer, Void>create(1585, 1672))[ FD ]
Line_2 $$ public void testSearch() throws Exception -->Line_32 $$ assertEquals(0, it2.search(Interval.<Integer, Void>create(1829, 1842)).size())[ CD ]
Line_24 $$ List<Interval<Integer, Void>> intervals2 = new ArrayList<Interval<Integer, Void>>()-->Line_29 $$ intervals2.add(Interval.<Integer, Void>create(1756, 1828))[ FD ]
Line_16 $$ IntervalTree<Integer, Void, Interval<Integer, Void>> it = IntervalTree.build(intervals)-->Line_18 $$ assertEquals(4, it.search(Interval.<Integer, Void>create(4, 5)).size())[ FD ]
Line_2 $$ public void testSearch() throws Exception -->Line_27 $$ intervals2.add(Interval.<Integer, Void>create(1843, 1907))[ CD ]
Line_31 $$ IntervalTree<Integer, Void, Interval<Integer, Void>> it2 = IntervalTree.build(intervals2)-->Line_32 $$ assertEquals(0, it2.search(Interval.<Integer, Void>create(1829, 1842)).size())[ FD ]
Line_2 $$ public void testSearch() throws Exception -->Line_23 $$ assertEquals(0, it.search(Interval.<Integer, Void>create(10, 12)).size())[ CD ]
Line_2 $$ public void testSearch() throws Exception -->Line_30 $$ intervals2.add(Interval.<Integer, Void>create(1585, 1672))[ CD ]
Line_2 $$ public void testSearch() throws Exception -->Line_7 $$ intervals.add(Interval.<Integer, Void>create(3, 6))[ CD ]
Line_33 $$ List<Void> intersection1 = it2.search(Interval.<Integer, Void>create(1907, 1907))-->Line_34 $$ assertEquals(3, intersection1.size())[ FD ]
Line_2 $$ public void testSearch() throws Exception -->Line_22 $$ assertEquals(2, it.search(Interval.<Integer, Void>create(0, 1)).size())[ CD ]
Line_24 $$ List<Interval<Integer, Void>> intervals2 = new ArrayList<Interval<Integer, Void>>()-->Line_31 $$ IntervalTree<Integer, Void, Interval<Integer, Void>> it2 = IntervalTree.build(intervals2)[ FD ]
Line_3 $$ List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>()-->Line_10 $$ intervals.add(Interval.<Integer, Void>create(1, 3))[ FD ]
Line_2 $$ public void testSearch() throws Exception -->Line_21 $$ assertEquals(5, it.search(Interval.<Integer, Void>create(1, 4)).size())[ CD ]
Line_2 $$ public void testSearch() throws Exception -->Line_5 $$ intervals.add(Interval.<Integer, Void>create(-3, -2))[ CD ]
Line_3 $$ List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>()-->Line_11 $$ intervals.add(Interval.<Integer, Void>create(4, 6))[ FD ]
Line_2 $$ public void testSearch() throws Exception -->Line_12 $$ intervals.add(Interval.<Integer, Void>create(8, 9))[ CD ]
Line_3 $$ List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>()-->Line_16 $$ IntervalTree<Integer, Void, Interval<Integer, Void>> it = IntervalTree.build(intervals)[ FD ]
Line_16 $$ IntervalTree<Integer, Void, Interval<Integer, Void>> it = IntervalTree.build(intervals)-->Line_22 $$ assertEquals(2, it.search(Interval.<Integer, Void>create(0, 1)).size())[ FD ]
Line_2 $$ public void testSearch() throws Exception -->Line_31 $$ IntervalTree<Integer, Void, Interval<Integer, Void>> it2 = IntervalTree.build(intervals2)[ CD ]
Line_2 $$ public void testSearch() throws Exception -->Line_33 $$ List<Void> intersection1 = it2.search(Interval.<Integer, Void>create(1907, 1907))[ CD ]
Line_33 $$ List<Void> intersection1 = it2.search(Interval.<Integer, Void>create(1907, 1907))-->Line_35 $$ intersection1 = it2.search(Interval.<Integer, Void>create(1780, 1790))[ FD ]
Line_2 $$ public void testSearch() throws Exception -->Line_4 $$ intervals.add(Interval.<Integer, Void>create(-300, -200))[ CD ]
Line_3 $$ List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>()-->Line_7 $$ intervals.add(Interval.<Integer, Void>create(3, 6))[ FD ]
Line_2 $$ public void testSearch() throws Exception -->Line_15 $$ intervals.add(Interval.<Integer, Void>create(49, 60))[ CD ]
Line_2 $$ public void testSearch() throws Exception -->Line_3 $$ List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>()[ CD ]
Line_31 $$ IntervalTree<Integer, Void, Interval<Integer, Void>> it2 = IntervalTree.build(intervals2)-->Line_35 $$ intersection1 = it2.search(Interval.<Integer, Void>create(1780, 1790))[ FD ]
Line_35 $$ intersection1 = it2.search(Interval.<Integer, Void>create(1780, 1790))-->Line_36 $$ assertEquals(2, intersection1.size())[ FD ]
Line_24 $$ List<Interval<Integer, Void>> intervals2 = new ArrayList<Interval<Integer, Void>>()-->Line_25 $$ intervals2.add(Interval.<Integer, Void>create(1880, 1971))[ FD ]
Line_2 $$ public void testSearch() throws Exception -->Line_26 $$ intervals2.add(Interval.<Integer, Void>create(1874, 1951))[ CD ]
Line_2 $$ public void testSearch() throws Exception -->Line_19 $$ assertEquals(7, it.search(Interval.<Integer, Void>create(-1, 10)).size())[ CD ]
Line_24 $$ List<Interval<Integer, Void>> intervals2 = new ArrayList<Interval<Integer, Void>>()-->Line_27 $$ intervals2.add(Interval.<Integer, Void>create(1843, 1907))[ FD ]
Line_3 $$ List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>()-->Line_9 $$ intervals.add(Interval.<Integer, Void>create(5, 7))[ FD ]
Line_2 $$ public void testSearch() throws Exception -->Line_20 $$ assertEquals(0, it.search(Interval.<Integer, Void>create(-1, -1)).size())[ CD ]
Line_3 $$ List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>()-->Line_15 $$ intervals.add(Interval.<Integer, Void>create(49, 60))[ FD ]
Line_2 $$ public void testSearch() throws Exception -->Line_36 $$ assertEquals(2, intersection1.size())[ CD ]
Line_16 $$ IntervalTree<Integer, Void, Interval<Integer, Void>> it = IntervalTree.build(intervals)-->Line_23 $$ assertEquals(0, it.search(Interval.<Integer, Void>create(10, 12)).size())[ FD ]
Line_16 $$ IntervalTree<Integer, Void, Interval<Integer, Void>> it = IntervalTree.build(intervals)-->Line_21 $$ assertEquals(5, it.search(Interval.<Integer, Void>create(1, 4)).size())[ FD ]
Line_3 $$ List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>()-->Line_14 $$ intervals.add(Interval.<Integer, Void>create(40, 50))[ FD ]
Line_16 $$ IntervalTree<Integer, Void, Interval<Integer, Void>> it = IntervalTree.build(intervals)-->Line_20 $$ assertEquals(0, it.search(Interval.<Integer, Void>create(-1, -1)).size())[ FD ]
Line_31 $$ IntervalTree<Integer, Void, Interval<Integer, Void>> it2 = IntervalTree.build(intervals2)-->Line_33 $$ List<Void> intersection1 = it2.search(Interval.<Integer, Void>create(1907, 1907))[ FD ]
Line_16 $$ IntervalTree<Integer, Void, Interval<Integer, Void>> it = IntervalTree.build(intervals)-->Line_19 $$ assertEquals(7, it.search(Interval.<Integer, Void>create(-1, 10)).size())[ FD ]
Line_2 $$ public void testSearch() throws Exception -->Line_14 $$ intervals.add(Interval.<Integer, Void>create(40, 50))[ CD ]
Line_3 $$ List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>()-->Line_12 $$ intervals.add(Interval.<Integer, Void>create(8, 9))[ FD ]
Line_2 $$ public void testSearch() throws Exception -->Line_8 $$ intervals.add(Interval.<Integer, Void>create(2, 4))[ CD ]
Line_2 $$ public void testSearch() throws Exception -->Line_25 $$ intervals2.add(Interval.<Integer, Void>create(1880, 1971))[ CD ]
Line_2 $$ public void testSearch() throws Exception -->Line_35 $$ intersection1 = it2.search(Interval.<Integer, Void>create(1780, 1790))[ CD ]
Line_3 $$ List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>()-->Line_4 $$ intervals.add(Interval.<Integer, Void>create(-300, -200))[ FD ]
Line_3 $$ List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>()-->Line_8 $$ intervals.add(Interval.<Integer, Void>create(2, 4))[ FD ]
Line_2 $$ public void testSearch() throws Exception -->Line_34 $$ assertEquals(3, intersection1.size())[ CD ]
Line_33 $$ List<Void> intersection1 = it2.search(Interval.<Integer, Void>create(1907, 1907))-->Line_36 $$ assertEquals(2, intersection1.size())[ FD ]
Line_3 $$ List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>()-->Line_5 $$ intervals.add(Interval.<Integer, Void>create(-3, -2))[ FD ]
Line_2 $$ public void testSearch() throws Exception -->Line_10 $$ intervals.add(Interval.<Integer, Void>create(1, 3))[ CD ]
Line_3 $$ List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>()-->Line_13 $$ intervals.add(Interval.<Integer, Void>create(15, 20))[ FD ]
Line_2 $$ public void testSearch() throws Exception -->Line_9 $$ intervals.add(Interval.<Integer, Void>create(5, 7))[ CD ]
Line_2 $$ public void testSearch() throws Exception -->Line_18 $$ assertEquals(4, it.search(Interval.<Integer, Void>create(4, 5)).size())[ CD ]
Line_24 $$ List<Interval<Integer, Void>> intervals2 = new ArrayList<Interval<Integer, Void>>()-->Line_26 $$ intervals2.add(Interval.<Integer, Void>create(1874, 1951))[ FD ]
Line_24 $$ List<Interval<Integer, Void>> intervals2 = new ArrayList<Interval<Integer, Void>>()-->Line_28 $$ intervals2.add(Interval.<Integer, Void>create(1779, 1828))[ FD ]
Line_16 $$ IntervalTree<Integer, Void, Interval<Integer, Void>> it = IntervalTree.build(intervals)-->Line_17 $$ assertEquals(3, it.search(Interval.<Integer, Void>create(4, 4)).size())[ FD ]
Line_2 $$ public void testSearch() throws Exception -->Line_29 $$ intervals2.add(Interval.<Integer, Void>create(1756, 1828))[ CD ]
Line_3 $$ List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>()-->Line_6 $$ intervals.add(Interval.<Integer, Void>create(1, 2))[ FD ]
Line_2 $$ public void testSearch() throws Exception -->Line_11 $$ intervals.add(Interval.<Integer, Void>create(4, 6))[ CD ]
