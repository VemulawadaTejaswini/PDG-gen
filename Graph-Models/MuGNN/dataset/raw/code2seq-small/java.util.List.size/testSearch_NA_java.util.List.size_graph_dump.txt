Line_38 $$ IntervalTree<Integer, Void, Interval<Integer, Void>> it2 = IntervalTree.build(intervals2)-->Line_39 $$ assertEquals(0, it2.search(Interval.<Integer, Void>create(1829, 1842)).size())[ FD ]
Line_38 $$ IntervalTree<Integer, Void, Interval<Integer, Void>> it2 = IntervalTree.build(intervals2)-->Line_42 $$ intersection1 = it2.search(Interval.<Integer, Void>create(1780, 1790))[ FD ]
Line_4 $$ List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>()-->Line_6 $$ intervals.add(Interval.<Integer, Void>create(-3, -2))[ FD ]
Line_17 $$ IntervalTree<Integer, Void, Interval<Integer, Void>> it = IntervalTree.build(intervals)-->Line_22 $$ assertEquals(5, it.search(Interval.<Integer, Void>create(1, 4)).size())[ FD ]
Line_4 $$ List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>()-->Line_8 $$ intervals.add(Interval.<Integer, Void>create(3, 6))[ FD ]
Line_4 $$ List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>()-->Line_12 $$ intervals.add(Interval.<Integer, Void>create(4, 6))[ FD ]
Line_4 $$ List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>()-->Line_15 $$ intervals.add(Interval.<Integer, Void>create(40, 50))[ FD ]
Line_38 $$ IntervalTree<Integer, Void, Interval<Integer, Void>> it2 = IntervalTree.build(intervals2)-->Line_40 $$ List<Void> intersection1 = it2.search(Interval.<Integer, Void>create(1907, 1907))[ FD ]
Line_4 $$ List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>()-->Line_10 $$ intervals.add(Interval.<Integer, Void>create(5, 7))[ FD ]
Line_40 $$ List<Void> intersection1 = it2.search(Interval.<Integer, Void>create(1907, 1907))-->Line_42 $$ intersection1 = it2.search(Interval.<Integer, Void>create(1780, 1790))[ FD ]
Line_40 $$ List<Void> intersection1 = it2.search(Interval.<Integer, Void>create(1907, 1907))-->Line_43 $$ assertEquals(2, intersection1.size())[ FD ]
Line_17 $$ IntervalTree<Integer, Void, Interval<Integer, Void>> it = IntervalTree.build(intervals)-->Line_23 $$ assertEquals(2, it.search(Interval.<Integer, Void>create(0, 1)).size())[ FD ]
Line_4 $$ List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>()-->Line_13 $$ intervals.add(Interval.<Integer, Void>create(8, 9))[ FD ]
Line_17 $$ IntervalTree<Integer, Void, Interval<Integer, Void>> it = IntervalTree.build(intervals)-->Line_24 $$ assertEquals(0, it.search(Interval.<Integer, Void>create(10, 12)).size())[ FD ]
Line_4 $$ List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>()-->Line_11 $$ intervals.add(Interval.<Integer, Void>create(1, 3))[ FD ]
Line_17 $$ IntervalTree<Integer, Void, Interval<Integer, Void>> it = IntervalTree.build(intervals)-->Line_18 $$ assertEquals(3, it.search(Interval.<Integer, Void>create(4, 4)).size())[ FD ]
Line_17 $$ IntervalTree<Integer, Void, Interval<Integer, Void>> it = IntervalTree.build(intervals)-->Line_21 $$ assertEquals(0, it.search(Interval.<Integer, Void>create(-1, -1)).size())[ FD ]
Line_17 $$ IntervalTree<Integer, Void, Interval<Integer, Void>> it = IntervalTree.build(intervals)-->Line_20 $$ assertEquals(7, it.search(Interval.<Integer, Void>create(-1, 10)).size())[ FD ]
Line_4 $$ List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>()-->Line_16 $$ intervals.add(Interval.<Integer, Void>create(49, 60))[ FD ]
Line_4 $$ List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>()-->Line_14 $$ intervals.add(Interval.<Integer, Void>create(15, 20))[ FD ]
Line_4 $$ List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>()-->Line_5 $$ intervals.add(Interval.<Integer, Void>create(-300, -200))[ FD ]
Line_17 $$ IntervalTree<Integer, Void, Interval<Integer, Void>> it = IntervalTree.build(intervals)-->Line_19 $$ assertEquals(4, it.search(Interval.<Integer, Void>create(4, 5)).size())[ FD ]
Line_40 $$ List<Void> intersection1 = it2.search(Interval.<Integer, Void>create(1907, 1907))-->Line_41 $$ assertEquals(3, intersection1.size())[ FD ]
Line_4 $$ List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>()-->Line_17 $$ IntervalTree<Integer, Void, Interval<Integer, Void>> it = IntervalTree.build(intervals)[ FD ]
Line_4 $$ List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>()-->Line_7 $$ intervals.add(Interval.<Integer, Void>create(1, 2))[ FD ]
Line_25 $$ List<Interval<Integer, Void>> intervals2 = new ArrayList<Interval<Integer, Void>>()-->Line_38 $$ IntervalTree<Integer, Void, Interval<Integer, Void>> it2 = IntervalTree.build(intervals2)[ FD ]
Line_4 $$ List<Interval<Integer, Void>> intervals = new ArrayList<Interval<Integer, Void>>()-->Line_9 $$ intervals.add(Interval.<Integer, Void>create(2, 4))[ FD ]
Line_42 $$ intersection1 = it2.search(Interval.<Integer, Void>create(1780, 1790))-->Line_43 $$ assertEquals(2, intersection1.size())[ FD ]
