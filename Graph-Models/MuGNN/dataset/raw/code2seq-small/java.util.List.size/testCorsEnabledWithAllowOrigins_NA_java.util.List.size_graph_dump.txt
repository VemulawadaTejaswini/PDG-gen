Line_2 $$ public void testCorsEnabledWithAllowOrigins() -->Line_9 $$ NettyHttpRequest request = new NettyHttpRequest(httpRequest, writeCapturingChannel)[ CD ]
Line_10 $$ NettyHttpChannel channel = new NettyHttpChannel(httpServerTransport, request, null, randomBoolean())-->Line_11 $$ channel.sendResponse(new TestReponse())[ FD ]
Line_8 $$ WriteCapturingChannel writeCapturingChannel = new WriteCapturingChannel()-->Line_12 $$ List<Object> writtenObjects = writeCapturingChannel.getWrittenObjects()[ FD ]
Line_5 $$ HttpRequest httpRequest = new TestHttpRequest()-->Line_6 $$ httpRequest.headers().add(HttpHeaders.Names.ORIGIN, "remote")[ FD ]
Line_2 $$ public void testCorsEnabledWithAllowOrigins() -->Line_11 $$ channel.sendResponse(new TestReponse())[ CD ]
Line_5 $$ HttpRequest httpRequest = new TestHttpRequest()-->Line_7 $$ httpRequest.headers().add(HttpHeaders.Names.USER_AGENT, "Mozilla fake")[ FD ]
Line_14 $$ HttpResponse response = (HttpResponse) writtenObjects.get(0)-->Line_16 $$ String allowedOrigins = response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN)[ FD ]
Line_2 $$ public void testCorsEnabledWithAllowOrigins() -->Line_6 $$ httpRequest.headers().add(HttpHeaders.Names.ORIGIN, "remote")[ CD ]
Line_2 $$ public void testCorsEnabledWithAllowOrigins() -->Line_8 $$ WriteCapturingChannel writeCapturingChannel = new WriteCapturingChannel()[ CD ]
Line_2 $$ public void testCorsEnabledWithAllowOrigins() -->Line_13 $$ assertThat(writtenObjects.size(), is(1))[ CD ]
Line_2 $$ public void testCorsEnabledWithAllowOrigins() -->Line_3 $$ Settings settings = Settings.builder().put(NettyHttpServerTransport.SETTING_CORS_ENABLED, true).put(NettyHttpServerTransport.SETTING_CORS_ALLOW_ORIGIN, "remote-host").build()[ CD ]
Line_2 $$ public void testCorsEnabledWithAllowOrigins() -->Line_5 $$ HttpRequest httpRequest = new TestHttpRequest()[ CD ]
Line_2 $$ public void testCorsEnabledWithAllowOrigins() -->Line_12 $$ List<Object> writtenObjects = writeCapturingChannel.getWrittenObjects()[ CD ]
Line_14 $$ HttpResponse response = (HttpResponse) writtenObjects.get(0)-->Line_15 $$ assertThat(response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN), notNullValue())[ FD ]
Line_2 $$ public void testCorsEnabledWithAllowOrigins() -->Line_10 $$ NettyHttpChannel channel = new NettyHttpChannel(httpServerTransport, request, null, randomBoolean())[ CD ]
Line_12 $$ List<Object> writtenObjects = writeCapturingChannel.getWrittenObjects()-->Line_13 $$ assertThat(writtenObjects.size(), is(1))[ FD ]
Line_12 $$ List<Object> writtenObjects = writeCapturingChannel.getWrittenObjects()-->Line_14 $$ HttpResponse response = (HttpResponse) writtenObjects.get(0)[ FD ]
Line_2 $$ public void testCorsEnabledWithAllowOrigins() -->Line_17 $$ assertThat(allowedOrigins, is("remote-host"))[ CD ]
Line_16 $$ String allowedOrigins = response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN)-->Line_17 $$ assertThat(allowedOrigins, is("remote-host"))[ FD ]
Line_2 $$ public void testCorsEnabledWithAllowOrigins() -->Line_15 $$ assertThat(response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN), notNullValue())[ CD ]
Line_2 $$ public void testCorsEnabledWithAllowOrigins() -->Line_16 $$ String allowedOrigins = response.headers().get(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN)[ CD ]
Line_2 $$ public void testCorsEnabledWithAllowOrigins() -->Line_7 $$ httpRequest.headers().add(HttpHeaders.Names.USER_AGENT, "Mozilla fake")[ CD ]
Line_2 $$ public void testCorsEnabledWithAllowOrigins() -->Line_14 $$ HttpResponse response = (HttpResponse) writtenObjects.get(0)[ CD ]
