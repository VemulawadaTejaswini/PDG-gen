Line_31 $$ if (!returnDeclared) -->Line_36 $$ returnDeclared = true[ CD ]
Line_82 $$ if (!isFunction() && !isReturnValueRequired() && this.metaDataProvider.byPassReturnParameter(meta.getParameterName())) -->Line_83 $$ if (logger.isDebugEnabled()) [ CD ]
Line_8 $$ boolean returnDeclared = false-->Line_31 $$ if (!returnDeclared) [ FD ]
Line_49 $$ Map<String, String> limitedInParamNamesMap = new HashMap<String, String>(this.limitedInParameterNames.size())-->Line_118 $$ logger.debug("Limited set of parameters " + limitedInParamNamesMap.keySet() + " skipped parameter for '" + paramNameToUse + "'")[ FD ]
Line_26 $$ String paramNameToMatch = this.metaDataProvider.parameterNameToUse(paramName).toLowerCase()-->Line_27 $$ declaredParams.put(paramNameToMatch, param)[ FD ]
Line_59 $$ if (declaredParams.containsKey(paramNameToCheck) || (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) -->Line_81 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) [ CD ]
Line_49 $$ Map<String, String> limitedInParamNamesMap = new HashMap<String, String>(this.limitedInParameterNames.size())-->Line_111 $$ if (this.limitedInParameterNames.isEmpty() || limitedInParamNamesMap.containsKey(paramNameToUse.toLowerCase())) [ FD ]
Line_87 $$ String returnNameToUse = (StringUtils.hasLength(meta.getParameterName()) ? paramNameToUse : getFunctionReturnName())-->Line_91 $$ outParamNames.add(returnNameToUse)[ FD ]
Line_26 $$ String paramNameToMatch = this.metaDataProvider.parameterNameToUse(paramName).toLowerCase()-->Line_30 $$ if (isFunction() && !metaDataParamNames.contains(paramNameToMatch)) [ FD ]
Line_64 $$ param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())-->Line_69 $$ setFunctionReturnName(param.getName())[ FD ]
Line_49 $$ Map<String, String> limitedInParamNamesMap = new HashMap<String, String>(this.limitedInParameterNames.size())-->Line_51 $$ limitedInParamNamesMap.put(this.metaDataProvider.parameterNameToUse(limitedParamName).toLowerCase(), limitedParamName)[ FD ]
Line_19 $$ if (param.isResultsParameter()) -->Line_20 $$ declaredReturnParams.add(param)[ CD ]
Line_74 $$ if (param != null) -->Line_76 $$ if (logger.isDebugEnabled()) [ CD ]
Line_7 $$ final Map<String, SqlParameter> declaredParams = new LinkedHashMap<String, SqlParameter>()-->Line_64 $$ param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())[ FD ]
Line_58 $$ String paramNameToUse = this.metaDataProvider.parameterNameToUse(meta.getParameterName())-->Line_106 $$ outParamNames.add(paramNameToUse)[ FD ]
Line_19 $$ if (param.isResultsParameter()) -->Line_22 $$ String paramName = param.getName()[ CD ]
Line_62 $$ param = declaredParams.get(getFunctionReturnName())-->Line_72 $$ param = declaredParams.get(paramNameToCheck)[ FD ]
Line_66 $$ if (param == null) -->Line_69 $$ setFunctionReturnName(param.getName())[ CD ]
Line_55 $$ if (meta.getParameterName() != null) -->Line_56 $$ paramNameToCheck = this.metaDataProvider.parameterNameToUse(meta.getParameterName()).toLowerCase()[ CD ]
Line_9 $$ List<String> outParamNames = new ArrayList<String>()-->Line_42 $$ setOutParameterNames(outParamNames)[ FD ]
Line_9 $$ List<String> outParamNames = new ArrayList<String>()-->Line_100 $$ outParamNames.add(paramNameToUse)[ FD ]
Line_59 $$ if (declaredParams.containsKey(paramNameToCheck) || (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) -->Line_61 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) [ CD ]
Line_19 $$ if (param.isResultsParameter()) -->Line_28 $$ if (param instanceof SqlOutParameter) [ CD ]
Line_43 $$ List<SqlParameter> workParams = new ArrayList<SqlParameter>()-->Line_44 $$ workParams.addAll(declaredReturnParams)[ FD ]
Line_50 $$ for (String limitedParamName : this.limitedInParameterNames) -->Line_51 $$ limitedInParamNamesMap.put(this.metaDataProvider.parameterNameToUse(limitedParamName).toLowerCase(), limitedParamName)[ FD ]
Line_74 $$ if (param != null) -->Line_75 $$ workParams.add(param)[ CD ]
Line_19 $$ if (param.isResultsParameter()) -->Line_27 $$ declaredParams.put(paramNameToMatch, param)[ CD ]
Line_56 $$ paramNameToCheck = this.metaDataProvider.parameterNameToUse(meta.getParameterName()).toLowerCase()-->Line_72 $$ param = declaredParams.get(paramNameToCheck)[ FD ]
Line_93 $$ if (logger.isDebugEnabled()) -->Line_94 $$ logger.debug("Added metadata return parameter for '" + returnNameToUse + "'")[ CD ]
Line_13 $$ if (meta.getParameterType() != DatabaseMetaData.procedureColumnReturn) -->Line_14 $$ metaDataParamNames.add(meta.getParameterName().toLowerCase())[ CD ]
Line_98 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) -->Line_104 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) [ CD ]
Line_62 $$ param = declaredParams.get(getFunctionReturnName())-->Line_64 $$ param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())[ FD ]
Line_58 $$ String paramNameToUse = this.metaDataProvider.parameterNameToUse(meta.getParameterName())-->Line_100 $$ outParamNames.add(paramNameToUse)[ FD ]
Line_87 $$ String returnNameToUse = (StringUtils.hasLength(meta.getParameterName()) ? paramNameToUse : getFunctionReturnName())-->Line_88 $$ workParams.add(this.metaDataProvider.createDefaultOutParameter(returnNameToUse, meta))[ FD ]
Line_58 $$ String paramNameToUse = this.metaDataProvider.parameterNameToUse(meta.getParameterName())-->Line_105 $$ workParams.add(this.metaDataProvider.createDefaultInOutParameter(paramNameToUse, meta))[ FD ]
Line_58 $$ String paramNameToUse = this.metaDataProvider.parameterNameToUse(meta.getParameterName())-->Line_112 $$ workParams.add(this.metaDataProvider.createDefaultInParameter(paramNameToUse, meta))[ FD ]
Line_9 $$ List<String> outParamNames = new ArrayList<String>()-->Line_91 $$ outParamNames.add(returnNameToUse)[ FD ]
Line_87 $$ String returnNameToUse = (StringUtils.hasLength(meta.getParameterName()) ? paramNameToUse : getFunctionReturnName())-->Line_90 $$ setFunctionReturnName(returnNameToUse)[ FD ]
Line_72 $$ param = declaredParams.get(paramNameToCheck)-->Line_74 $$ if (param != null) [ FD ]
Line_22 $$ String paramName = param.getName()-->Line_26 $$ String paramNameToMatch = this.metaDataProvider.parameterNameToUse(paramName).toLowerCase()[ FD ]
Line_81 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) -->Line_82 $$ if (!isFunction() && !isReturnValueRequired() && this.metaDataProvider.byPassReturnParameter(meta.getParameterName())) [ CD ]
Line_54 $$ String paramNameToCheck = null-->Line_59 $$ if (declaredParams.containsKey(paramNameToCheck) || (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) [ FD ]
Line_19 $$ if (param.isResultsParameter()) -->Line_23 $$ if (paramName == null) [ CD ]
Line_7 $$ final Map<String, SqlParameter> declaredParams = new LinkedHashMap<String, SqlParameter>()-->Line_46 $$ workParams.addAll(declaredParams.values())[ FD ]
Line_101 $$ if (logger.isDebugEnabled()) -->Line_102 $$ logger.debug("Added metadata out parameter for '" + paramNameToUse + "'")[ CD ]
Line_61 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) -->Line_66 $$ if (param == null) [ CD ]
Line_117 $$ if (logger.isDebugEnabled()) -->Line_118 $$ logger.debug("Limited set of parameters " + limitedInParamNamesMap.keySet() + " skipped parameter for '" + paramNameToUse + "'")[ CD ]
Line_62 $$ param = declaredParams.get(getFunctionReturnName())-->Line_66 $$ if (param == null) [ FD ]
Line_104 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) -->Line_107 $$ if (logger.isDebugEnabled()) [ CD ]
Line_22 $$ String paramName = param.getName()-->Line_29 $$ outParamNames.add(paramName)[ FD ]
Line_43 $$ List<SqlParameter> workParams = new ArrayList<SqlParameter>()-->Line_99 $$ workParams.add(this.metaDataProvider.createDefaultOutParameter(paramNameToUse, meta))[ FD ]
Line_54 $$ String paramNameToCheck = null-->Line_72 $$ param = declaredParams.get(paramNameToCheck)[ FD ]
Line_43 $$ List<SqlParameter> workParams = new ArrayList<SqlParameter>()-->Line_112 $$ workParams.add(this.metaDataProvider.createDefaultInParameter(paramNameToUse, meta))[ FD ]
Line_6 $$ final List<SqlParameter> declaredReturnParams = new ArrayList<SqlParameter>()-->Line_20 $$ declaredReturnParams.add(param)[ FD ]
Line_111 $$ if (this.limitedInParameterNames.isEmpty() || limitedInParamNamesMap.containsKey(paramNameToUse.toLowerCase())) -->Line_117 $$ if (logger.isDebugEnabled()) [ CD ]
Line_111 $$ if (this.limitedInParameterNames.isEmpty() || limitedInParamNamesMap.containsKey(paramNameToUse.toLowerCase())) -->Line_113 $$ if (logger.isDebugEnabled()) [ CD ]
Line_64 $$ param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())-->Line_66 $$ if (param == null) [ FD ]
Line_62 $$ param = declaredParams.get(getFunctionReturnName())-->Line_69 $$ setFunctionReturnName(param.getName())[ FD ]
Line_82 $$ if (!isFunction() && !isReturnValueRequired() && this.metaDataProvider.byPassReturnParameter(meta.getParameterName())) -->Line_88 $$ workParams.add(this.metaDataProvider.createDefaultOutParameter(returnNameToUse, meta))[ CD ]
Line_81 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) -->Line_98 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) [ CD ]
Line_8 $$ boolean returnDeclared = false-->Line_36 $$ returnDeclared = true[ FD ]
Line_31 $$ if (!returnDeclared) -->Line_35 $$ setFunctionReturnName(paramName)[ CD ]
Line_82 $$ if (!isFunction() && !isReturnValueRequired() && this.metaDataProvider.byPassReturnParameter(meta.getParameterName())) -->Line_87 $$ String returnNameToUse = (StringUtils.hasLength(meta.getParameterName()) ? paramNameToUse : getFunctionReturnName())[ CD ]
Line_111 $$ if (this.limitedInParameterNames.isEmpty() || limitedInParamNamesMap.containsKey(paramNameToUse.toLowerCase())) -->Line_112 $$ workParams.add(this.metaDataProvider.createDefaultInParameter(paramNameToUse, meta))[ CD ]
Line_7 $$ final Map<String, SqlParameter> declaredParams = new LinkedHashMap<String, SqlParameter>()-->Line_27 $$ declaredParams.put(paramNameToMatch, param)[ FD ]
Line_43 $$ List<SqlParameter> workParams = new ArrayList<SqlParameter>()-->Line_88 $$ workParams.add(this.metaDataProvider.createDefaultOutParameter(returnNameToUse, meta))[ FD ]
Line_7 $$ final Map<String, SqlParameter> declaredParams = new LinkedHashMap<String, SqlParameter>()-->Line_59 $$ if (declaredParams.containsKey(paramNameToCheck) || (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) [ FD ]
Line_107 $$ if (logger.isDebugEnabled()) -->Line_108 $$ logger.debug("Added metadata in out parameter for '" + paramNameToUse + "'")[ CD ]
Line_30 $$ if (isFunction() && !metaDataParamNames.contains(paramNameToMatch)) -->Line_31 $$ if (!returnDeclared) [ CD ]
Line_89 $$ if (isFunction()) -->Line_91 $$ outParamNames.add(returnNameToUse)[ CD ]
Line_104 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) -->Line_105 $$ workParams.add(this.metaDataProvider.createDefaultInOutParameter(paramNameToUse, meta))[ CD ]
Line_28 $$ if (param instanceof SqlOutParameter) -->Line_29 $$ outParamNames.add(paramName)[ CD ]
Line_7 $$ final Map<String, SqlParameter> declaredParams = new LinkedHashMap<String, SqlParameter>()-->Line_62 $$ param = declaredParams.get(getFunctionReturnName())[ FD ]
Line_82 $$ if (!isFunction() && !isReturnValueRequired() && this.metaDataProvider.byPassReturnParameter(meta.getParameterName())) -->Line_93 $$ if (logger.isDebugEnabled()) [ CD ]
Line_89 $$ if (isFunction()) -->Line_90 $$ setFunctionReturnName(returnNameToUse)[ CD ]
Line_43 $$ List<SqlParameter> workParams = new ArrayList<SqlParameter>()-->Line_105 $$ workParams.add(this.metaDataProvider.createDefaultInOutParameter(paramNameToUse, meta))[ FD ]
Line_10 $$ List<String> metaDataParamNames = new ArrayList<String>()-->Line_30 $$ if (isFunction() && !metaDataParamNames.contains(paramNameToMatch)) [ FD ]
Line_58 $$ String paramNameToUse = this.metaDataProvider.parameterNameToUse(meta.getParameterName())-->Line_99 $$ workParams.add(this.metaDataProvider.createDefaultOutParameter(paramNameToUse, meta))[ FD ]
Line_56 $$ paramNameToCheck = this.metaDataProvider.parameterNameToUse(meta.getParameterName()).toLowerCase()-->Line_59 $$ if (declaredParams.containsKey(paramNameToCheck) || (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) [ FD ]
Line_61 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) -->Line_72 $$ param = declaredParams.get(paramNameToCheck)[ CD ]
Line_62 $$ param = declaredParams.get(getFunctionReturnName())-->Line_75 $$ workParams.add(param)[ FD ]
Line_59 $$ if (declaredParams.containsKey(paramNameToCheck) || (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) -->Line_74 $$ if (param != null) [ CD ]
Line_64 $$ param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())-->Line_74 $$ if (param != null) [ FD ]
Line_98 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) -->Line_99 $$ workParams.add(this.metaDataProvider.createDefaultOutParameter(paramNameToUse, meta))[ CD ]
Line_58 $$ String paramNameToUse = this.metaDataProvider.parameterNameToUse(meta.getParameterName())-->Line_111 $$ if (this.limitedInParameterNames.isEmpty() || limitedInParamNamesMap.containsKey(paramNameToUse.toLowerCase())) [ FD ]
Line_32 $$ if (logger.isDebugEnabled()) -->Line_33 $$ logger.debug("Using declared out parameter '" + paramName + "' for function return value")[ CD ]
Line_10 $$ List<String> metaDataParamNames = new ArrayList<String>()-->Line_14 $$ metaDataParamNames.add(meta.getParameterName().toLowerCase())[ FD ]
Line_72 $$ param = declaredParams.get(paramNameToCheck)-->Line_75 $$ workParams.add(param)[ FD ]
Line_83 $$ if (logger.isDebugEnabled()) -->Line_84 $$ logger.debug("Bypassing metadata return parameter for '" + meta.getParameterName() + "'")[ CD ]
Line_31 $$ if (!returnDeclared) -->Line_32 $$ if (logger.isDebugEnabled()) [ CD ]
Line_7 $$ final Map<String, SqlParameter> declaredParams = new LinkedHashMap<String, SqlParameter>()-->Line_72 $$ param = declaredParams.get(paramNameToCheck)[ FD ]
Line_61 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) -->Line_62 $$ param = declaredParams.get(getFunctionReturnName())[ CD ]
Line_64 $$ param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())-->Line_72 $$ param = declaredParams.get(paramNameToCheck)[ FD ]
Line_9 $$ List<String> outParamNames = new ArrayList<String>()-->Line_106 $$ outParamNames.add(paramNameToUse)[ FD ]
Line_98 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) -->Line_100 $$ outParamNames.add(paramNameToUse)[ CD ]
Line_61 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) -->Line_63 $$ if (param == null && getOutParameterNames().size() > 0) [ CD ]
Line_63 $$ if (param == null && getOutParameterNames().size() > 0) -->Line_64 $$ param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())[ CD ]
Line_45 $$ if (!this.metaDataProvider.isProcedureColumnMetaDataUsed()) -->Line_46 $$ workParams.addAll(declaredParams.values())[ CD ]
Line_45 $$ if (!this.metaDataProvider.isProcedureColumnMetaDataUsed()) -->Line_47 $$ return workParams[ CD ]
Line_43 $$ List<SqlParameter> workParams = new ArrayList<SqlParameter>()-->Line_75 $$ workParams.add(param)[ FD ]
Line_104 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) -->Line_106 $$ outParamNames.add(paramNameToUse)[ CD ]
Line_62 $$ param = declaredParams.get(getFunctionReturnName())-->Line_74 $$ if (param != null) [ FD ]
Line_9 $$ List<String> outParamNames = new ArrayList<String>()-->Line_29 $$ outParamNames.add(paramName)[ FD ]
Line_6 $$ final List<SqlParameter> declaredReturnParams = new ArrayList<SqlParameter>()-->Line_44 $$ workParams.addAll(declaredReturnParams)[ FD ]
Line_98 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) -->Line_101 $$ if (logger.isDebugEnabled()) [ CD ]
Line_22 $$ String paramName = param.getName()-->Line_35 $$ setFunctionReturnName(paramName)[ FD ]
Line_64 $$ param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())-->Line_75 $$ workParams.add(param)[ FD ]
Line_82 $$ if (!isFunction() && !isReturnValueRequired() && this.metaDataProvider.byPassReturnParameter(meta.getParameterName())) -->Line_89 $$ if (isFunction()) [ CD ]
Line_19 $$ if (param.isResultsParameter()) -->Line_26 $$ String paramNameToMatch = this.metaDataProvider.parameterNameToUse(paramName).toLowerCase()[ CD ]
Line_113 $$ if (logger.isDebugEnabled()) -->Line_114 $$ logger.debug("Added metadata in parameter for '" + paramNameToUse + "'")[ CD ]
Line_104 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) -->Line_111 $$ if (this.limitedInParameterNames.isEmpty() || limitedInParamNamesMap.containsKey(paramNameToUse.toLowerCase())) [ CD ]
Line_43 $$ List<SqlParameter> workParams = new ArrayList<SqlParameter>()-->Line_46 $$ workParams.addAll(declaredParams.values())[ FD ]
Line_28 $$ if (param instanceof SqlOutParameter) -->Line_30 $$ if (isFunction() && !metaDataParamNames.contains(paramNameToMatch)) [ CD ]
Line_54 $$ String paramNameToCheck = null-->Line_56 $$ paramNameToCheck = this.metaDataProvider.parameterNameToUse(meta.getParameterName()).toLowerCase()[ FD ]
Line_76 $$ if (logger.isDebugEnabled()) -->Line_77 $$ logger.debug("Using declared parameter for '" + (paramNameToUse != null ? paramNameToUse : getFunctionReturnName()) + "'")[ CD ]
Line_22 $$ String paramName = param.getName()-->Line_23 $$ if (paramName == null) [ FD ]
