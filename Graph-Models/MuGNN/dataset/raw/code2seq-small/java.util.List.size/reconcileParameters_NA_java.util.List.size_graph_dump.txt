Line_8 $$ for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) -->Line_77 $$ if (!isFunction() && !isReturnValueRequired() && this.metaDataProvider.byPassReturnParameter(meta.getParameterName())) [ FD ]
Line_44 $$ Map<String, String> limitedInParamNamesMap = new HashMap<String, String>(this.limitedInParameterNames.size())-->Line_106 $$ if (this.limitedInParameterNames.isEmpty() || limitedInParamNamesMap.containsKey(paramNameToUse.toLowerCase())) [ FD ]
Line_56 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) -->Line_67 $$ param = declaredParams.get(paramNameToCheck)[ CD ]
Line_7 $$ List<String> metaDataParamNames = new ArrayList<String>()-->Line_10 $$ metaDataParamNames.add(meta.getParameterName().toLowerCase())[ FD ]
Line_14 $$ if (param.isResultsParameter()) -->Line_21 $$ String paramNameToMatch = this.metaDataProvider.parameterNameToUse(paramName).toLowerCase()[ CD ]
Line_38 $$ List<SqlParameter> workParams = new ArrayList<SqlParameter>()-->Line_83 $$ workParams.add(this.metaDataProvider.createDefaultOutParameter(returnNameToUse, meta))[ FD ]
Line_57 $$ param = declaredParams.get(getFunctionReturnName())-->Line_59 $$ param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())[ FD ]
Line_27 $$ if (logger.isDebugEnabled()) -->Line_28 $$ logger.debug("Using declared out parameter '" + paramName + "' for function return value")[ CD ]
Line_38 $$ List<SqlParameter> workParams = new ArrayList<SqlParameter>()-->Line_94 $$ workParams.add(this.metaDataProvider.createDefaultOutParameter(paramNameToUse, meta))[ FD ]
Line_8 $$ for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) -->Line_83 $$ workParams.add(this.metaDataProvider.createDefaultOutParameter(returnNameToUse, meta))[ FD ]
Line_38 $$ List<SqlParameter> workParams = new ArrayList<SqlParameter>()-->Line_107 $$ workParams.add(this.metaDataProvider.createDefaultInParameter(paramNameToUse, meta))[ FD ]
Line_13 $$ for (SqlParameter param : parameters) -->Line_17 $$ String paramName = param.getName()[ FD ]
Line_53 $$ String paramNameToUse = this.metaDataProvider.parameterNameToUse(meta.getParameterName())-->Line_101 $$ outParamNames.add(paramNameToUse)[ FD ]
Line_13 $$ for (SqlParameter param : parameters) -->Line_59 $$ param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())[ FD ]
Line_3 $$ final List<SqlParameter> declaredReturnParams = new ArrayList<SqlParameter>()-->Line_15 $$ declaredReturnParams.add(param)[ FD ]
Line_8 $$ for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) -->Line_50 $$ if (meta.getParameterName() != null) [ FD ]
Line_93 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) -->Line_94 $$ workParams.add(this.metaDataProvider.createDefaultOutParameter(paramNameToUse, meta))[ CD ]
Line_59 $$ param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())-->Line_61 $$ if (param == null) [ FD ]
Line_8 $$ for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) -->Line_82 $$ String returnNameToUse = (StringUtils.hasLength(meta.getParameterName()) ? paramNameToUse : getFunctionReturnName())[ FD ]
Line_8 $$ for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) -->Line_93 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) [ FD ]
Line_102 $$ if (logger.isDebugEnabled()) -->Line_103 $$ logger.debug("Added metadata in out parameter for '" + paramNameToUse + "'")[ CD ]
Line_82 $$ String returnNameToUse = (StringUtils.hasLength(meta.getParameterName()) ? paramNameToUse : getFunctionReturnName())-->Line_86 $$ outParamNames.add(returnNameToUse)[ FD ]
Line_13 $$ for (SqlParameter param : parameters) -->Line_57 $$ param = declaredParams.get(getFunctionReturnName())[ FD ]
Line_13 $$ for (SqlParameter param : parameters) -->Line_19 $$ throw new IllegalArgumentException("Anonymous parameters not supported for calls - " + "please specify a name for the parameter of SQL type " + param.getSqlType())[ FD ]
Line_8 $$ for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) -->Line_100 $$ workParams.add(this.metaDataProvider.createDefaultInOutParameter(paramNameToUse, meta))[ FD ]
Line_57 $$ param = declaredParams.get(getFunctionReturnName())-->Line_67 $$ param = declaredParams.get(paramNameToCheck)[ FD ]
Line_57 $$ param = declaredParams.get(getFunctionReturnName())-->Line_70 $$ workParams.add(param)[ FD ]
Line_59 $$ param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())-->Line_69 $$ if (param != null) [ FD ]
Line_112 $$ if (logger.isDebugEnabled()) -->Line_113 $$ logger.debug("Limited set of parameters " + limitedInParamNamesMap.keySet() + " skipped parameter for '" + paramNameToUse + "'")[ CD ]
Line_2 $$ protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) -->Line_39 $$ workParams.addAll(declaredReturnParams)[ CD ]
Line_17 $$ String paramName = param.getName()-->Line_21 $$ String paramNameToMatch = this.metaDataProvider.parameterNameToUse(paramName).toLowerCase()[ FD ]
Line_82 $$ String returnNameToUse = (StringUtils.hasLength(meta.getParameterName()) ? paramNameToUse : getFunctionReturnName())-->Line_83 $$ workParams.add(this.metaDataProvider.createDefaultOutParameter(returnNameToUse, meta))[ FD ]
Line_21 $$ String paramNameToMatch = this.metaDataProvider.parameterNameToUse(paramName).toLowerCase()-->Line_22 $$ declaredParams.put(paramNameToMatch, param)[ FD ]
Line_69 $$ if (param != null) -->Line_71 $$ if (logger.isDebugEnabled()) [ CD ]
Line_13 $$ for (SqlParameter param : parameters) -->Line_70 $$ workParams.add(param)[ FD ]
Line_14 $$ if (param.isResultsParameter()) -->Line_18 $$ if (paramName == null) [ CD ]
Line_93 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) -->Line_96 $$ if (logger.isDebugEnabled()) [ CD ]
Line_2 $$ protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) -->Line_5 $$ boolean returnDeclared = false[ CD ]
Line_77 $$ if (!isFunction() && !isReturnValueRequired() && this.metaDataProvider.byPassReturnParameter(meta.getParameterName())) -->Line_82 $$ String returnNameToUse = (StringUtils.hasLength(meta.getParameterName()) ? paramNameToUse : getFunctionReturnName())[ CD ]
Line_13 $$ for (SqlParameter param : parameters) -->Line_61 $$ if (param == null) [ FD ]
Line_106 $$ if (this.limitedInParameterNames.isEmpty() || limitedInParamNamesMap.containsKey(paramNameToUse.toLowerCase())) -->Line_112 $$ if (logger.isDebugEnabled()) [ CD ]
Line_44 $$ Map<String, String> limitedInParamNamesMap = new HashMap<String, String>(this.limitedInParameterNames.size())-->Line_46 $$ limitedInParamNamesMap.put(this.metaDataProvider.parameterNameToUse(limitedParamName).toLowerCase(), limitedParamName)[ FD ]
Line_13 $$ for (SqlParameter param : parameters) -->Line_69 $$ if (param != null) [ FD ]
Line_5 $$ boolean returnDeclared = false-->Line_31 $$ returnDeclared = true[ FD ]
Line_14 $$ if (param.isResultsParameter()) -->Line_22 $$ declaredParams.put(paramNameToMatch, param)[ CD ]
Line_4 $$ final Map<String, SqlParameter> declaredParams = new LinkedHashMap<String, SqlParameter>()-->Line_67 $$ param = declaredParams.get(paramNameToCheck)[ FD ]
Line_49 $$ String paramNameToCheck = null-->Line_51 $$ paramNameToCheck = this.metaDataProvider.parameterNameToUse(meta.getParameterName()).toLowerCase()[ FD ]
Line_13 $$ for (SqlParameter param : parameters) -->Line_15 $$ declaredReturnParams.add(param)[ FD ]
Line_17 $$ String paramName = param.getName()-->Line_18 $$ if (paramName == null) [ FD ]
Line_13 $$ for (SqlParameter param : parameters) -->Line_14 $$ if (param.isResultsParameter()) [ FD ]
Line_51 $$ paramNameToCheck = this.metaDataProvider.parameterNameToUse(meta.getParameterName()).toLowerCase()-->Line_67 $$ param = declaredParams.get(paramNameToCheck)[ FD ]
Line_4 $$ final Map<String, SqlParameter> declaredParams = new LinkedHashMap<String, SqlParameter>()-->Line_59 $$ param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())[ FD ]
Line_54 $$ if (declaredParams.containsKey(paramNameToCheck) || (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) -->Line_76 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) [ CD ]
Line_54 $$ if (declaredParams.containsKey(paramNameToCheck) || (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) -->Line_56 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) [ CD ]
Line_3 $$ final List<SqlParameter> declaredReturnParams = new ArrayList<SqlParameter>()-->Line_39 $$ workParams.addAll(declaredReturnParams)[ FD ]
Line_40 $$ if (!this.metaDataProvider.isProcedureColumnMetaDataUsed()) -->Line_41 $$ workParams.addAll(declaredParams.values())[ CD ]
Line_13 $$ for (SqlParameter param : parameters) -->Line_67 $$ param = declaredParams.get(paramNameToCheck)[ FD ]
Line_14 $$ if (param.isResultsParameter()) -->Line_23 $$ if (param instanceof SqlOutParameter) [ CD ]
Line_13 $$ for (SqlParameter param : parameters) -->Line_64 $$ setFunctionReturnName(param.getName())[ FD ]
Line_4 $$ final Map<String, SqlParameter> declaredParams = new LinkedHashMap<String, SqlParameter>()-->Line_57 $$ param = declaredParams.get(getFunctionReturnName())[ FD ]
Line_8 $$ for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) -->Line_10 $$ metaDataParamNames.add(meta.getParameterName().toLowerCase())[ FD ]
Line_56 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) -->Line_57 $$ param = declaredParams.get(getFunctionReturnName())[ CD ]
Line_53 $$ String paramNameToUse = this.metaDataProvider.parameterNameToUse(meta.getParameterName())-->Line_100 $$ workParams.add(this.metaDataProvider.createDefaultInOutParameter(paramNameToUse, meta))[ FD ]
Line_26 $$ if (!returnDeclared) -->Line_30 $$ setFunctionReturnName(paramName)[ CD ]
Line_93 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) -->Line_99 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) [ CD ]
Line_2 $$ protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) -->Line_120 $$ return workParams[ CD ]
Line_7 $$ List<String> metaDataParamNames = new ArrayList<String>()-->Line_25 $$ if (isFunction() && !metaDataParamNames.contains(paramNameToMatch)) [ FD ]
Line_69 $$ if (param != null) -->Line_70 $$ workParams.add(param)[ CD ]
Line_67 $$ param = declaredParams.get(paramNameToCheck)-->Line_69 $$ if (param != null) [ FD ]
Line_59 $$ param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())-->Line_70 $$ workParams.add(param)[ FD ]
Line_6 $$ List<String> outParamNames = new ArrayList<String>()-->Line_37 $$ setOutParameterNames(outParamNames)[ FD ]
Line_76 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) -->Line_93 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) [ CD ]
Line_17 $$ String paramName = param.getName()-->Line_24 $$ outParamNames.add(paramName)[ FD ]
Line_38 $$ List<SqlParameter> workParams = new ArrayList<SqlParameter>()-->Line_41 $$ workParams.addAll(declaredParams.values())[ FD ]
Line_8 $$ for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) -->Line_53 $$ String paramNameToUse = this.metaDataProvider.parameterNameToUse(meta.getParameterName())[ FD ]
Line_50 $$ if (meta.getParameterName() != null) -->Line_51 $$ paramNameToCheck = this.metaDataProvider.parameterNameToUse(meta.getParameterName()).toLowerCase()[ CD ]
Line_25 $$ if (isFunction() && !metaDataParamNames.contains(paramNameToMatch)) -->Line_26 $$ if (!returnDeclared) [ CD ]
Line_8 $$ for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) -->Line_107 $$ workParams.add(this.metaDataProvider.createDefaultInParameter(paramNameToUse, meta))[ FD ]
Line_2 $$ protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) -->Line_3 $$ final List<SqlParameter> declaredReturnParams = new ArrayList<SqlParameter>()[ CD ]
Line_2 $$ protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) -->Line_40 $$ if (!this.metaDataProvider.isProcedureColumnMetaDataUsed()) [ CD ]
Line_26 $$ if (!returnDeclared) -->Line_27 $$ if (logger.isDebugEnabled()) [ CD ]
Line_58 $$ if (param == null && getOutParameterNames().size() > 0) -->Line_59 $$ param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())[ CD ]
Line_53 $$ String paramNameToUse = this.metaDataProvider.parameterNameToUse(meta.getParameterName())-->Line_106 $$ if (this.limitedInParameterNames.isEmpty() || limitedInParamNamesMap.containsKey(paramNameToUse.toLowerCase())) [ FD ]
Line_96 $$ if (logger.isDebugEnabled()) -->Line_97 $$ logger.debug("Added metadata out parameter for '" + paramNameToUse + "'")[ CD ]
Line_6 $$ List<String> outParamNames = new ArrayList<String>()-->Line_24 $$ outParamNames.add(paramName)[ FD ]
Line_14 $$ if (param.isResultsParameter()) -->Line_17 $$ String paramName = param.getName()[ CD ]
Line_59 $$ param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())-->Line_64 $$ setFunctionReturnName(param.getName())[ FD ]
Line_93 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnOut) -->Line_95 $$ outParamNames.add(paramNameToUse)[ CD ]
Line_77 $$ if (!isFunction() && !isReturnValueRequired() && this.metaDataProvider.byPassReturnParameter(meta.getParameterName())) -->Line_84 $$ if (isFunction()) [ CD ]
Line_76 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) -->Line_77 $$ if (!isFunction() && !isReturnValueRequired() && this.metaDataProvider.byPassReturnParameter(meta.getParameterName())) [ CD ]
Line_84 $$ if (isFunction()) -->Line_86 $$ outParamNames.add(returnNameToUse)[ CD ]
Line_99 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) -->Line_100 $$ workParams.add(this.metaDataProvider.createDefaultInOutParameter(paramNameToUse, meta))[ CD ]
Line_56 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) -->Line_58 $$ if (param == null && getOutParameterNames().size() > 0) [ CD ]
Line_106 $$ if (this.limitedInParameterNames.isEmpty() || limitedInParamNamesMap.containsKey(paramNameToUse.toLowerCase())) -->Line_107 $$ workParams.add(this.metaDataProvider.createDefaultInParameter(paramNameToUse, meta))[ CD ]
Line_99 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) -->Line_102 $$ if (logger.isDebugEnabled()) [ CD ]
Line_21 $$ String paramNameToMatch = this.metaDataProvider.parameterNameToUse(paramName).toLowerCase()-->Line_25 $$ if (isFunction() && !metaDataParamNames.contains(paramNameToMatch)) [ FD ]
Line_2 $$ protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) -->Line_4 $$ final Map<String, SqlParameter> declaredParams = new LinkedHashMap<String, SqlParameter>()[ CD ]
Line_82 $$ String returnNameToUse = (StringUtils.hasLength(meta.getParameterName()) ? paramNameToUse : getFunctionReturnName())-->Line_85 $$ setFunctionReturnName(returnNameToUse)[ FD ]
Line_2 $$ protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) -->Line_6 $$ List<String> outParamNames = new ArrayList<String>()[ CD ]
Line_2 $$ protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) -->Line_44 $$ Map<String, String> limitedInParamNamesMap = new HashMap<String, String>(this.limitedInParameterNames.size())[ CD ]
Line_84 $$ if (isFunction()) -->Line_85 $$ setFunctionReturnName(returnNameToUse)[ CD ]
Line_8 $$ for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) -->Line_79 $$ logger.debug("Bypassing metadata return parameter for '" + meta.getParameterName() + "'")[ FD ]
Line_57 $$ param = declaredParams.get(getFunctionReturnName())-->Line_61 $$ if (param == null) [ FD ]
Line_8 $$ for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) -->Line_94 $$ workParams.add(this.metaDataProvider.createDefaultOutParameter(paramNameToUse, meta))[ FD ]
Line_54 $$ if (declaredParams.containsKey(paramNameToCheck) || (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) -->Line_69 $$ if (param != null) [ CD ]
Line_45 $$ for (String limitedParamName : this.limitedInParameterNames) -->Line_46 $$ limitedInParamNamesMap.put(this.metaDataProvider.parameterNameToUse(limitedParamName).toLowerCase(), limitedParamName)[ FD ]
Line_77 $$ if (!isFunction() && !isReturnValueRequired() && this.metaDataProvider.byPassReturnParameter(meta.getParameterName())) -->Line_88 $$ if (logger.isDebugEnabled()) [ CD ]
Line_61 $$ if (param == null) -->Line_64 $$ setFunctionReturnName(param.getName())[ CD ]
Line_106 $$ if (this.limitedInParameterNames.isEmpty() || limitedInParamNamesMap.containsKey(paramNameToUse.toLowerCase())) -->Line_108 $$ if (logger.isDebugEnabled()) [ CD ]
Line_4 $$ final Map<String, SqlParameter> declaredParams = new LinkedHashMap<String, SqlParameter>()-->Line_22 $$ declaredParams.put(paramNameToMatch, param)[ FD ]
Line_88 $$ if (logger.isDebugEnabled()) -->Line_89 $$ logger.debug("Added metadata return parameter for '" + returnNameToUse + "'")[ CD ]
Line_38 $$ List<SqlParameter> workParams = new ArrayList<SqlParameter>()-->Line_70 $$ workParams.add(param)[ FD ]
Line_38 $$ List<SqlParameter> workParams = new ArrayList<SqlParameter>()-->Line_100 $$ workParams.add(this.metaDataProvider.createDefaultInOutParameter(paramNameToUse, meta))[ FD ]
Line_9 $$ if (meta.getParameterType() != DatabaseMetaData.procedureColumnReturn) -->Line_10 $$ metaDataParamNames.add(meta.getParameterName().toLowerCase())[ CD ]
Line_2 $$ protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) -->Line_7 $$ List<String> metaDataParamNames = new ArrayList<String>()[ CD ]
Line_44 $$ Map<String, String> limitedInParamNamesMap = new HashMap<String, String>(this.limitedInParameterNames.size())-->Line_113 $$ logger.debug("Limited set of parameters " + limitedInParamNamesMap.keySet() + " skipped parameter for '" + paramNameToUse + "'")[ FD ]
Line_17 $$ String paramName = param.getName()-->Line_30 $$ setFunctionReturnName(paramName)[ FD ]
Line_51 $$ paramNameToCheck = this.metaDataProvider.parameterNameToUse(meta.getParameterName()).toLowerCase()-->Line_54 $$ if (declaredParams.containsKey(paramNameToCheck) || (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) [ FD ]
Line_6 $$ List<String> outParamNames = new ArrayList<String>()-->Line_95 $$ outParamNames.add(paramNameToUse)[ FD ]
Line_8 $$ for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) -->Line_54 $$ if (declaredParams.containsKey(paramNameToCheck) || (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) [ FD ]
Line_23 $$ if (param instanceof SqlOutParameter) -->Line_24 $$ outParamNames.add(paramName)[ CD ]
Line_6 $$ List<String> outParamNames = new ArrayList<String>()-->Line_101 $$ outParamNames.add(paramNameToUse)[ FD ]
Line_13 $$ for (SqlParameter param : parameters) -->Line_22 $$ declaredParams.put(paramNameToMatch, param)[ FD ]
Line_53 $$ String paramNameToUse = this.metaDataProvider.parameterNameToUse(meta.getParameterName())-->Line_95 $$ outParamNames.add(paramNameToUse)[ FD ]
Line_8 $$ for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) -->Line_76 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) [ FD ]
Line_59 $$ param = declaredParams.get(getOutParameterNames().get(0).toLowerCase())-->Line_67 $$ param = declaredParams.get(paramNameToCheck)[ FD ]
Line_2 $$ protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) -->Line_38 $$ List<SqlParameter> workParams = new ArrayList<SqlParameter>()[ CD ]
Line_4 $$ final Map<String, SqlParameter> declaredParams = new LinkedHashMap<String, SqlParameter>()-->Line_41 $$ workParams.addAll(declaredParams.values())[ FD ]
Line_78 $$ if (logger.isDebugEnabled()) -->Line_79 $$ logger.debug("Bypassing metadata return parameter for '" + meta.getParameterName() + "'")[ CD ]
Line_38 $$ List<SqlParameter> workParams = new ArrayList<SqlParameter>()-->Line_39 $$ workParams.addAll(declaredReturnParams)[ FD ]
Line_8 $$ for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) -->Line_51 $$ paramNameToCheck = this.metaDataProvider.parameterNameToUse(meta.getParameterName()).toLowerCase()[ FD ]
Line_49 $$ String paramNameToCheck = null-->Line_67 $$ param = declaredParams.get(paramNameToCheck)[ FD ]
Line_57 $$ param = declaredParams.get(getFunctionReturnName())-->Line_69 $$ if (param != null) [ FD ]
Line_99 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) -->Line_106 $$ if (this.limitedInParameterNames.isEmpty() || limitedInParamNamesMap.containsKey(paramNameToUse.toLowerCase())) [ CD ]
Line_4 $$ final Map<String, SqlParameter> declaredParams = new LinkedHashMap<String, SqlParameter>()-->Line_54 $$ if (declaredParams.containsKey(paramNameToCheck) || (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) [ FD ]
Line_8 $$ for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) -->Line_99 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) [ FD ]
Line_14 $$ if (param.isResultsParameter()) -->Line_15 $$ declaredReturnParams.add(param)[ CD ]
Line_49 $$ String paramNameToCheck = null-->Line_54 $$ if (declaredParams.containsKey(paramNameToCheck) || (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn && returnDeclared)) [ FD ]
Line_8 $$ for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) -->Line_9 $$ if (meta.getParameterType() != DatabaseMetaData.procedureColumnReturn) [ FD ]
Line_108 $$ if (logger.isDebugEnabled()) -->Line_109 $$ logger.debug("Added metadata in parameter for '" + paramNameToUse + "'")[ CD ]
Line_53 $$ String paramNameToUse = this.metaDataProvider.parameterNameToUse(meta.getParameterName())-->Line_107 $$ workParams.add(this.metaDataProvider.createDefaultInParameter(paramNameToUse, meta))[ FD ]
Line_40 $$ if (!this.metaDataProvider.isProcedureColumnMetaDataUsed()) -->Line_42 $$ return workParams[ CD ]
Line_71 $$ if (logger.isDebugEnabled()) -->Line_72 $$ logger.debug("Using declared parameter for '" + (paramNameToUse != null ? paramNameToUse : getFunctionReturnName()) + "'")[ CD ]
Line_53 $$ String paramNameToUse = this.metaDataProvider.parameterNameToUse(meta.getParameterName())-->Line_94 $$ workParams.add(this.metaDataProvider.createDefaultOutParameter(paramNameToUse, meta))[ FD ]
Line_6 $$ List<String> outParamNames = new ArrayList<String>()-->Line_86 $$ outParamNames.add(returnNameToUse)[ FD ]
Line_57 $$ param = declaredParams.get(getFunctionReturnName())-->Line_64 $$ setFunctionReturnName(param.getName())[ FD ]
Line_5 $$ boolean returnDeclared = false-->Line_26 $$ if (!returnDeclared) [ FD ]
Line_26 $$ if (!returnDeclared) -->Line_31 $$ returnDeclared = true[ CD ]
Line_77 $$ if (!isFunction() && !isReturnValueRequired() && this.metaDataProvider.byPassReturnParameter(meta.getParameterName())) -->Line_78 $$ if (logger.isDebugEnabled()) [ CD ]
Line_8 $$ for (CallParameterMetaData meta : this.metaDataProvider.getCallParameterMetaData()) -->Line_56 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) [ FD ]
Line_2 $$ protected List<SqlParameter> reconcileParameters(List<SqlParameter> parameters) -->Line_37 $$ setOutParameterNames(outParamNames)[ CD ]
Line_23 $$ if (param instanceof SqlOutParameter) -->Line_25 $$ if (isFunction() && !metaDataParamNames.contains(paramNameToMatch)) [ CD ]
Line_99 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnInOut) -->Line_101 $$ outParamNames.add(paramNameToUse)[ CD ]
Line_67 $$ param = declaredParams.get(paramNameToCheck)-->Line_70 $$ workParams.add(param)[ FD ]
Line_77 $$ if (!isFunction() && !isReturnValueRequired() && this.metaDataProvider.byPassReturnParameter(meta.getParameterName())) -->Line_83 $$ workParams.add(this.metaDataProvider.createDefaultOutParameter(returnNameToUse, meta))[ CD ]
Line_56 $$ if (meta.getParameterType() == DatabaseMetaData.procedureColumnReturn) -->Line_61 $$ if (param == null) [ CD ]
Line_13 $$ for (SqlParameter param : parameters) -->Line_23 $$ if (param instanceof SqlOutParameter) [ FD ]
