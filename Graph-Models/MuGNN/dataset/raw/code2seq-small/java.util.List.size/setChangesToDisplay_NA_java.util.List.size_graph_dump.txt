Line_63 $$ while (enumeration.hasMoreElements()) -->Line_65 $$ final CheckboxTree.NodeState state = getNodeStatus(node)[ CD ]
Line_64 $$ ChangesBrowserNode node = (ChangesBrowserNode) enumeration.nextElement()-->Line_65 $$ final CheckboxTree.NodeState state = getNodeStatus(node)[ FD ]
Line_43 $$ int selectedTreeRow = -1-->Line_87 $$ if (selectedTreeRow >= 0) [ FD ]
Line_29 $$ T t = sortedChanges.get(i)-->Line_30 $$ if (wasSelected.contains(t)) [ FD ]
Line_2 $$ public void setChangesToDisplay(final List<T> changes, @Nullable final VirtualFile toSelect) -->Line_24 $$ myTree.setModel(model)[ CD ]
Line_25 $$ if (!myAlwaysExpandList && !wasEmpty) -->Line_35 $$ return[ CD ]
Line_67 $$ selectedTreeRow = myTree.getRowForPath(new TreePath(node.getPath()))-->Line_87 $$ if (selectedTreeRow >= 0) [ FD ]
Line_76 $$ selectedTreeRow = rowInTree-->Line_90 $$ TreeUtil.showRowCentered(myTree, selectedTreeRow, false)[ FD ]
Line_11 $$ myList.setModel(new AbstractListModel() -->Line_16 $$ return sortedChanges.get(index)[ CD ]
Line_2 $$ public void setChangesToDisplay(final List<T> changes, @Nullable final VirtualFile toSelect) -->Line_78 $$ int rowInList = findRowContainingFile(myList.getModel(), toSelect)[ FD ]
Line_2 $$ public void setChangesToDisplay(final List<T> changes, @Nullable final VirtualFile toSelect) -->Line_25 $$ if (!myAlwaysExpandList && !wasEmpty) [ CD ]
Line_28 $$ for (int i = 0; i < sortedChanges.size(); i++) -->Line_49 $$ selectedListRow = i[ FD ]
Line_25 $$ if (!myAlwaysExpandList && !wasEmpty) -->Line_26 $$ state.applyTo(myTree, (DefaultMutableTreeNode) myTree.getModel().getRoot())[ CD ]
Line_49 $$ selectedListRow = i-->Line_80 $$ selectedListRow = rowInList[ FD ]
Line_37 $$ final Runnable runnable = new Runnable() -->Line_42 $$ int selectedListRow = 0[ CD ]
Line_4 $$ final List<T> sortedChanges = new ArrayList<T>(changes)-->Line_13 $$ return sortedChanges.size()[ FD ]
Line_66 $$ if (state == CheckboxTree.NodeState.FULL && node.isLeaf()) -->Line_67 $$ selectedTreeRow = myTree.getRowForPath(new TreePath(node.getPath()))[ CD ]
Line_64 $$ ChangesBrowserNode node = (ChangesBrowserNode) enumeration.nextElement()-->Line_67 $$ selectedTreeRow = myTree.getRowForPath(new TreePath(node.getPath()))[ FD ]
Line_44 $$ if (myShowCheckboxes) -->Line_45 $$ if (myIncludedChanges.size() > 0) [ CD ]
Line_46 $$ for (int i = 0; i < sortedChanges.size(); i++) -->Line_48 $$ if (myIncludedChanges.contains(t)) [ CD ]
Line_53 $$ ChangesBrowserNode root = (ChangesBrowserNode) model.getRoot()-->Line_62 $$ enumeration = root.depthFirstEnumeration()[ FD ]
Line_42 $$ int selectedListRow = 0-->Line_49 $$ selectedListRow = i[ FD ]
Line_37 $$ final Runnable runnable = new Runnable() -->Line_43 $$ int selectedTreeRow = -1[ CD ]
Line_58 $$ if (node != root && state == CheckboxTree.NodeState.CLEAR) -->Line_59 $$ myTree.collapsePath(new TreePath(node.getPath()))[ CD ]
Line_28 $$ for (int i = 0; i < sortedChanges.size(); i++) -->Line_46 $$ for (int i = 0; i < sortedChanges.size(); i++) [ FD ]
Line_48 $$ if (myIncludedChanges.contains(t)) -->Line_49 $$ selectedListRow = i[ CD ]
Line_74 $$ int rowInTree = findRowContainingFile((TreeNode) model.getRoot(), toSelect)-->Line_76 $$ selectedTreeRow = rowInTree[ FD ]
Line_55 $$ while (enumeration.hasMoreElements()) -->Line_58 $$ if (node != root && state == CheckboxTree.NodeState.CLEAR) [ CD ]
Line_54 $$ Enumeration enumeration = root.depthFirstEnumeration()-->Line_55 $$ while (enumeration.hasMoreElements()) [ FD ]
Line_25 $$ if (!myAlwaysExpandList && !wasEmpty) -->Line_34 $$ myList.setSelectedIndices(indices.toNativeArray())[ CD ]
Line_54 $$ Enumeration enumeration = root.depthFirstEnumeration()-->Line_56 $$ ChangesBrowserNode node = (ChangesBrowserNode) enumeration.nextElement()[ FD ]
Line_67 $$ selectedTreeRow = myTree.getRowForPath(new TreePath(node.getPath()))-->Line_88 $$ myTree.setSelectionRow(selectedTreeRow)[ FD ]
Line_76 $$ selectedTreeRow = rowInTree-->Line_88 $$ myTree.setSelectionRow(selectedTreeRow)[ FD ]
Line_49 $$ selectedListRow = i-->Line_85 $$ myList.setSelectedIndex(selectedListRow)[ FD ]
Line_73 $$ if (toSelect != null) -->Line_74 $$ int rowInTree = findRowContainingFile((TreeNode) model.getRoot(), toSelect)[ CD ]
Line_2 $$ public void setChangesToDisplay(final List<T> changes, @Nullable final VirtualFile toSelect) -->Line_3 $$ final boolean wasEmpty = myList.isEmpty()[ CD ]
Line_53 $$ ChangesBrowserNode root = (ChangesBrowserNode) model.getRoot()-->Line_54 $$ Enumeration enumeration = root.depthFirstEnumeration()[ FD ]
Line_37 $$ final Runnable runnable = new Runnable() -->Line_39 $$ if (myProject.isDisposed())[ CD ]
Line_56 $$ ChangesBrowserNode node = (ChangesBrowserNode) enumeration.nextElement()-->Line_65 $$ final CheckboxTree.NodeState state = getNodeStatus(node)[ FD ]
Line_43 $$ int selectedTreeRow = -1-->Line_67 $$ selectedTreeRow = myTree.getRowForPath(new TreePath(node.getPath()))[ FD ]
Line_76 $$ selectedTreeRow = rowInTree-->Line_87 $$ if (selectedTreeRow >= 0) [ FD ]
Line_44 $$ if (myShowCheckboxes) -->Line_73 $$ if (toSelect != null) [ CD ]
Line_45 $$ if (myIncludedChanges.size() > 0) -->Line_62 $$ enumeration = root.depthFirstEnumeration()[ CD ]
Line_4 $$ final List<T> sortedChanges = new ArrayList<T>(changes)-->Line_29 $$ T t = sortedChanges.get(i)[ FD ]
Line_45 $$ if (myIncludedChanges.size() > 0) -->Line_63 $$ while (enumeration.hasMoreElements()) [ CD ]
Line_46 $$ for (int i = 0; i < sortedChanges.size(); i++) -->Line_47 $$ T t = sortedChanges.get(i)[ FD ]
Line_28 $$ for (int i = 0; i < sortedChanges.size(); i++) -->Line_31 $$ indices.add(i)[ FD ]
Line_78 $$ int rowInList = findRowContainingFile(myList.getModel(), toSelect)-->Line_79 $$ if (rowInList > -1) [ FD ]
Line_4 $$ final List<T> sortedChanges = new ArrayList<T>(changes)-->Line_47 $$ T t = sortedChanges.get(i)[ FD ]
Line_94 $$ if (ApplicationManager.getApplication().isDispatchThread()) -->Line_95 $$ runnable.run()[ CD ]
Line_37 $$ final Runnable runnable = new Runnable() -->Line_41 $$ TreeUtil.expandAll(myTree)[ CD ]
Line_37 $$ final Runnable runnable = new Runnable() -->Line_44 $$ if (myShowCheckboxes) [ CD ]
Line_67 $$ selectedTreeRow = myTree.getRowForPath(new TreePath(node.getPath()))-->Line_90 $$ TreeUtil.showRowCentered(myTree, selectedTreeRow, false)[ FD ]
Line_29 $$ T t = sortedChanges.get(i)-->Line_48 $$ if (myIncludedChanges.contains(t)) [ FD ]
Line_5 $$ Collections.sort(sortedChanges, new Comparator<T>() -->Line_7 $$ return TreeModelBuilder.getPathForObject(o1).getName().compareToIgnoreCase(TreeModelBuilder.getPathForObject(o2).getName())[ FD ]
Line_67 $$ selectedTreeRow = myTree.getRowForPath(new TreePath(node.getPath()))-->Line_76 $$ selectedTreeRow = rowInTree[ FD ]
Line_73 $$ if (toSelect != null) -->Line_79 $$ if (rowInList > -1) [ CD ]
Line_84 $$ if (changes.size() > 0) -->Line_87 $$ if (selectedTreeRow >= 0) [ CD ]
Line_84 $$ if (changes.size() > 0) -->Line_85 $$ myList.setSelectedIndex(selectedListRow)[ CD ]
Line_45 $$ if (myIncludedChanges.size() > 0) -->Line_46 $$ for (int i = 0; i < sortedChanges.size(); i++) [ CD ]
Line_64 $$ ChangesBrowserNode node = (ChangesBrowserNode) enumeration.nextElement()-->Line_66 $$ if (state == CheckboxTree.NodeState.FULL && node.isLeaf()) [ FD ]
Line_56 $$ ChangesBrowserNode node = (ChangesBrowserNode) enumeration.nextElement()-->Line_67 $$ selectedTreeRow = myTree.getRowForPath(new TreePath(node.getPath()))[ FD ]
Line_84 $$ if (changes.size() > 0) -->Line_90 $$ TreeUtil.showRowCentered(myTree, selectedTreeRow, false)[ CD ]
Line_2 $$ public void setChangesToDisplay(final List<T> changes, @Nullable final VirtualFile toSelect) -->Line_11 $$ myList.setModel(new AbstractListModel() [ CD ]
Line_2 $$ public void setChangesToDisplay(final List<T> changes, @Nullable final VirtualFile toSelect) -->Line_5 $$ Collections.sort(sortedChanges, new Comparator<T>() [ CD ]
Line_21 $$ if (!myAlwaysExpandList && !wasEmpty) -->Line_22 $$ state = TreeState.createOn(myTree, (DefaultMutableTreeNode) myTree.getModel().getRoot())[ CD ]
Line_37 $$ final Runnable runnable = new Runnable() -->Line_84 $$ if (changes.size() > 0) [ CD ]
Line_42 $$ int selectedListRow = 0-->Line_86 $$ myList.ensureIndexIsVisible(selectedListRow)[ FD ]
Line_11 $$ myList.setModel(new AbstractListModel() -->Line_13 $$ return sortedChanges.size()[ CD ]
Line_80 $$ selectedListRow = rowInList-->Line_86 $$ myList.ensureIndexIsVisible(selectedListRow)[ FD ]
Line_54 $$ Enumeration enumeration = root.depthFirstEnumeration()-->Line_63 $$ while (enumeration.hasMoreElements()) [ FD ]
Line_56 $$ ChangesBrowserNode node = (ChangesBrowserNode) enumeration.nextElement()-->Line_57 $$ final CheckboxTree.NodeState state = getNodeStatus(node)[ FD ]
Line_2 $$ public void setChangesToDisplay(final List<T> changes, @Nullable final VirtualFile toSelect) -->Line_74 $$ int rowInTree = findRowContainingFile((TreeNode) model.getRoot(), toSelect)[ FD ]
Line_2 $$ public void setChangesToDisplay(final List<T> changes, @Nullable final VirtualFile toSelect) -->Line_94 $$ if (ApplicationManager.getApplication().isDispatchThread()) [ CD ]
Line_45 $$ if (myIncludedChanges.size() > 0) -->Line_54 $$ Enumeration enumeration = root.depthFirstEnumeration()[ CD ]
Line_4 $$ final List<T> sortedChanges = new ArrayList<T>(changes)-->Line_16 $$ return sortedChanges.get(index)[ FD ]
Line_46 $$ for (int i = 0; i < sortedChanges.size(); i++) -->Line_49 $$ selectedListRow = i[ FD ]
Line_2 $$ public void setChangesToDisplay(final List<T> changes, @Nullable final VirtualFile toSelect) -->Line_19 $$ final DefaultTreeModel model = buildTreeModel(changes, myChangeDecorator)[ CD ]
Line_74 $$ int rowInTree = findRowContainingFile((TreeNode) model.getRoot(), toSelect)-->Line_75 $$ if (rowInTree > -1) [ FD ]
Line_28 $$ for (int i = 0; i < sortedChanges.size(); i++) -->Line_29 $$ T t = sortedChanges.get(i)[ FD ]
Line_43 $$ int selectedTreeRow = -1-->Line_88 $$ myTree.setSelectionRow(selectedTreeRow)[ FD ]
Line_84 $$ if (changes.size() > 0) -->Line_86 $$ myList.ensureIndexIsVisible(selectedListRow)[ CD ]
Line_49 $$ selectedListRow = i-->Line_86 $$ myList.ensureIndexIsVisible(selectedListRow)[ FD ]
Line_73 $$ if (toSelect != null) -->Line_75 $$ if (rowInTree > -1) [ CD ]
Line_30 $$ if (wasSelected.contains(t)) -->Line_31 $$ indices.add(i)[ CD ]
Line_2 $$ public void setChangesToDisplay(final List<T> changes, @Nullable final VirtualFile toSelect) -->Line_21 $$ if (!myAlwaysExpandList && !wasEmpty) [ CD ]
Line_55 $$ while (enumeration.hasMoreElements()) -->Line_56 $$ ChangesBrowserNode node = (ChangesBrowserNode) enumeration.nextElement()[ CD ]
Line_63 $$ while (enumeration.hasMoreElements()) -->Line_64 $$ ChangesBrowserNode node = (ChangesBrowserNode) enumeration.nextElement()[ CD ]
Line_2 $$ public void setChangesToDisplay(final List<T> changes, @Nullable final VirtualFile toSelect) -->Line_84 $$ if (changes.size() > 0) [ FD ]
Line_2 $$ public void setChangesToDisplay(final List<T> changes, @Nullable final VirtualFile toSelect) -->Line_73 $$ if (toSelect != null) [ FD ]
Line_94 $$ if (ApplicationManager.getApplication().isDispatchThread()) -->Line_97 $$ SwingUtilities.invokeLater(runnable)[ CD ]
Line_47 $$ T t = sortedChanges.get(i)-->Line_48 $$ if (myIncludedChanges.contains(t)) [ FD ]
Line_4 $$ final List<T> sortedChanges = new ArrayList<T>(changes)-->Line_5 $$ Collections.sort(sortedChanges, new Comparator<T>() [ FD ]
Line_4 $$ final List<T> sortedChanges = new ArrayList<T>(changes)-->Line_46 $$ for (int i = 0; i < sortedChanges.size(); i++) [ FD ]
Line_55 $$ while (enumeration.hasMoreElements()) -->Line_57 $$ final CheckboxTree.NodeState state = getNodeStatus(node)[ CD ]
Line_28 $$ for (int i = 0; i < sortedChanges.size(); i++) -->Line_29 $$ T t = sortedChanges.get(i)[ CD ]
Line_43 $$ int selectedTreeRow = -1-->Line_90 $$ TreeUtil.showRowCentered(myTree, selectedTreeRow, false)[ FD ]
Line_11 $$ myList.setModel(new AbstractListModel() -->Line_16 $$ return sortedChanges.get(index)[ FD ]
Line_42 $$ int selectedListRow = 0-->Line_80 $$ selectedListRow = rowInList[ FD ]
Line_54 $$ Enumeration enumeration = root.depthFirstEnumeration()-->Line_64 $$ ChangesBrowserNode node = (ChangesBrowserNode) enumeration.nextElement()[ FD ]
Line_62 $$ enumeration = root.depthFirstEnumeration()-->Line_63 $$ while (enumeration.hasMoreElements()) [ FD ]
Line_2 $$ public void setChangesToDisplay(final List<T> changes, @Nullable final VirtualFile toSelect) -->Line_4 $$ final List<T> sortedChanges = new ArrayList<T>(changes)[ CD ]
Line_80 $$ selectedListRow = rowInList-->Line_85 $$ myList.setSelectedIndex(selectedListRow)[ FD ]
Line_39 $$ if (myProject.isDisposed())-->Line_40 $$ return[ CD ]
Line_42 $$ int selectedListRow = 0-->Line_85 $$ myList.setSelectedIndex(selectedListRow)[ FD ]
Line_75 $$ if (rowInTree > -1) -->Line_76 $$ selectedTreeRow = rowInTree[ CD ]
Line_46 $$ for (int i = 0; i < sortedChanges.size(); i++) -->Line_47 $$ T t = sortedChanges.get(i)[ CD ]
Line_28 $$ for (int i = 0; i < sortedChanges.size(); i++) -->Line_30 $$ if (wasSelected.contains(t)) [ CD ]
Line_56 $$ ChangesBrowserNode node = (ChangesBrowserNode) enumeration.nextElement()-->Line_59 $$ myTree.collapsePath(new TreePath(node.getPath()))[ FD ]
Line_78 $$ int rowInList = findRowContainingFile(myList.getModel(), toSelect)-->Line_80 $$ selectedListRow = rowInList[ FD ]
Line_63 $$ while (enumeration.hasMoreElements()) -->Line_66 $$ if (state == CheckboxTree.NodeState.FULL && node.isLeaf()) [ CD ]
Line_62 $$ enumeration = root.depthFirstEnumeration()-->Line_64 $$ ChangesBrowserNode node = (ChangesBrowserNode) enumeration.nextElement()[ FD ]
Line_4 $$ final List<T> sortedChanges = new ArrayList<T>(changes)-->Line_28 $$ for (int i = 0; i < sortedChanges.size(); i++) [ FD ]
Line_87 $$ if (selectedTreeRow >= 0) -->Line_88 $$ myTree.setSelectionRow(selectedTreeRow)[ CD ]
Line_2 $$ public void setChangesToDisplay(final List<T> changes, @Nullable final VirtualFile toSelect) -->Line_19 $$ final DefaultTreeModel model = buildTreeModel(changes, myChangeDecorator)[ FD ]
Line_25 $$ if (!myAlwaysExpandList && !wasEmpty) -->Line_28 $$ for (int i = 0; i < sortedChanges.size(); i++) [ CD ]
Line_45 $$ if (myIncludedChanges.size() > 0) -->Line_55 $$ while (enumeration.hasMoreElements()) [ CD ]
Line_5 $$ Collections.sort(sortedChanges, new Comparator<T>() -->Line_7 $$ return TreeModelBuilder.getPathForObject(o1).getName().compareToIgnoreCase(TreeModelBuilder.getPathForObject(o2).getName())[ CD ]
Line_54 $$ Enumeration enumeration = root.depthFirstEnumeration()-->Line_62 $$ enumeration = root.depthFirstEnumeration()[ FD ]
Line_43 $$ int selectedTreeRow = -1-->Line_76 $$ selectedTreeRow = rowInTree[ FD ]
Line_79 $$ if (rowInList > -1) -->Line_80 $$ selectedListRow = rowInList[ CD ]
Line_28 $$ for (int i = 0; i < sortedChanges.size(); i++) -->Line_47 $$ T t = sortedChanges.get(i)[ FD ]
Line_56 $$ ChangesBrowserNode node = (ChangesBrowserNode) enumeration.nextElement()-->Line_66 $$ if (state == CheckboxTree.NodeState.FULL && node.isLeaf()) [ FD ]
Line_73 $$ if (toSelect != null) -->Line_78 $$ int rowInList = findRowContainingFile(myList.getModel(), toSelect)[ CD ]
Line_45 $$ if (myIncludedChanges.size() > 0) -->Line_53 $$ ChangesBrowserNode root = (ChangesBrowserNode) model.getRoot()[ CD ]
