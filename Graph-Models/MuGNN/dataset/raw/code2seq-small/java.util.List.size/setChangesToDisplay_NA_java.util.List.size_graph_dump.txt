Line_70 $$ if (node != root && state == CheckboxTree.NodeState.CLEAR) -->Line_71 $$ myTree.collapsePath(new TreePath(node.getPath()))[ CD ]
Line_53 $$ int selectedListRow = 0-->Line_60 $$ selectedListRow = i[ FD ]
Line_89 $$ selectedTreeRow = rowInTree-->Line_100 $$ if (selectedTreeRow >= 0) [ FD ]
Line_37 $$ for (int i = 0; i < sortedChanges.size(); i++) -->Line_39 $$ if (wasSelected.contains(t)) [ CD ]
Line_29 $$ if (!myAlwaysExpandList && !wasEmpty) -->Line_30 $$ state = TreeState.createOn(myTree, (DefaultMutableTreeNode) myTree.getModel().getRoot())[ CD ]
Line_88 $$ if (rowInTree > -1) -->Line_89 $$ selectedTreeRow = rowInTree[ CD ]
Line_33 $$ if (!myAlwaysExpandList && !wasEmpty) -->Line_43 $$ myList.setSelectedIndices(indices.toNativeArray())[ CD ]
Line_67 $$ ChangesBrowserNode node = (ChangesBrowserNode) enumeration.nextElement()-->Line_71 $$ myTree.collapsePath(new TreePath(node.getPath()))[ FD ]
Line_86 $$ if (toSelect != null) -->Line_91 $$ int rowInList = findRowContainingFile(myList.getModel(), toSelect)[ CD ]
Line_60 $$ selectedListRow = i-->Line_99 $$ myList.ensureIndexIsVisible(selectedListRow)[ FD ]
Line_50 $$ if (myProject.isDisposed())-->Line_51 $$ return[ CD ]
Line_65 $$ Enumeration enumeration = root.depthFirstEnumeration()-->Line_74 $$ enumeration = root.depthFirstEnumeration()[ FD ]
Line_64 $$ ChangesBrowserNode root = (ChangesBrowserNode) model.getRoot()-->Line_65 $$ Enumeration enumeration = root.depthFirstEnumeration()[ FD ]
Line_2 $$ public void setChangesToDisplay(final List<T> changes, @Nullable final VirtualFile toSelect) -->Line_91 $$ int rowInList = findRowContainingFile(myList.getModel(), toSelect)[ FD ]
Line_74 $$ enumeration = root.depthFirstEnumeration()-->Line_75 $$ while (enumeration.hasMoreElements()) [ FD ]
Line_33 $$ if (!myAlwaysExpandList && !wasEmpty) -->Line_37 $$ for (int i = 0; i < sortedChanges.size(); i++) [ CD ]
Line_2 $$ public void setChangesToDisplay(final List<T> changes, @Nullable final VirtualFile toSelect) -->Line_29 $$ if (!myAlwaysExpandList && !wasEmpty) [ CD ]
Line_54 $$ int selectedTreeRow = -1-->Line_89 $$ selectedTreeRow = rowInTree[ FD ]
Line_55 $$ if (myShowCheckboxes) -->Line_56 $$ if (myIncludedChanges.size() > 0) [ CD ]
Line_65 $$ Enumeration enumeration = root.depthFirstEnumeration()-->Line_76 $$ ChangesBrowserNode node = (ChangesBrowserNode) enumeration.nextElement()[ FD ]
Line_91 $$ int rowInList = findRowContainingFile(myList.getModel(), toSelect)-->Line_93 $$ selectedListRow = rowInList[ FD ]
Line_97 $$ if (changes.size() > 0) -->Line_100 $$ if (selectedTreeRow >= 0) [ CD ]
Line_53 $$ int selectedListRow = 0-->Line_98 $$ myList.setSelectedIndex(selectedListRow)[ FD ]
Line_2 $$ public void setChangesToDisplay(final List<T> changes, @Nullable final VirtualFile toSelect) -->Line_5 $$ Collections.sort(sortedChanges, new Comparator<T>() [ CD ]
Line_60 $$ selectedListRow = i-->Line_93 $$ selectedListRow = rowInList[ FD ]
Line_2 $$ public void setChangesToDisplay(final List<T> changes, @Nullable final VirtualFile toSelect) -->Line_4 $$ final List<T> sortedChanges = new ArrayList<T>(changes)[ CD ]
Line_56 $$ if (myIncludedChanges.size() > 0) -->Line_64 $$ ChangesBrowserNode root = (ChangesBrowserNode) model.getRoot()[ CD ]
Line_5 $$ Collections.sort(sortedChanges, new Comparator<T>() -->Line_9 $$ return TreeModelBuilder.getPathForObject(o1).getName().compareToIgnoreCase(TreeModelBuilder.getPathForObject(o2).getName())[ CD ]
Line_66 $$ while (enumeration.hasMoreElements()) -->Line_67 $$ ChangesBrowserNode node = (ChangesBrowserNode) enumeration.nextElement()[ CD ]
Line_46 $$ final Runnable runnable = new Runnable() -->Line_55 $$ if (myShowCheckboxes) [ CD ]
Line_107 $$ if (ApplicationManager.getApplication().isDispatchThread()) -->Line_108 $$ runnable.run()[ CD ]
Line_37 $$ for (int i = 0; i < sortedChanges.size(); i++) -->Line_58 $$ T t = sortedChanges.get(i)[ FD ]
Line_37 $$ for (int i = 0; i < sortedChanges.size(); i++) -->Line_60 $$ selectedListRow = i[ FD ]
Line_54 $$ int selectedTreeRow = -1-->Line_103 $$ TreeUtil.showRowCentered(myTree, selectedTreeRow, false)[ FD ]
Line_38 $$ T t = sortedChanges.get(i)-->Line_39 $$ if (wasSelected.contains(t)) [ FD ]
Line_87 $$ int rowInTree = findRowContainingFile((TreeNode) model.getRoot(), toSelect)-->Line_89 $$ selectedTreeRow = rowInTree[ FD ]
Line_2 $$ public void setChangesToDisplay(final List<T> changes, @Nullable final VirtualFile toSelect) -->Line_32 $$ myTree.setModel(model)[ CD ]
Line_56 $$ if (myIncludedChanges.size() > 0) -->Line_57 $$ for (int i = 0; i < sortedChanges.size(); i++) [ CD ]
Line_5 $$ Collections.sort(sortedChanges, new Comparator<T>() -->Line_9 $$ return TreeModelBuilder.getPathForObject(o1).getName().compareToIgnoreCase(TreeModelBuilder.getPathForObject(o2).getName())[ FD ]
Line_39 $$ if (wasSelected.contains(t)) -->Line_40 $$ indices.add(i)[ CD ]
Line_86 $$ if (toSelect != null) -->Line_87 $$ int rowInTree = findRowContainingFile((TreeNode) model.getRoot(), toSelect)[ CD ]
Line_93 $$ selectedListRow = rowInList-->Line_99 $$ myList.ensureIndexIsVisible(selectedListRow)[ FD ]
Line_4 $$ final List<T> sortedChanges = new ArrayList<T>(changes)-->Line_19 $$ return sortedChanges.size()[ FD ]
Line_56 $$ if (myIncludedChanges.size() > 0) -->Line_65 $$ Enumeration enumeration = root.depthFirstEnumeration()[ CD ]
Line_79 $$ if (state == CheckboxTree.NodeState.FULL && node.isLeaf()) -->Line_80 $$ selectedTreeRow = myTree.getRowForPath(new TreePath(node.getPath()))[ CD ]
Line_80 $$ selectedTreeRow = myTree.getRowForPath(new TreePath(node.getPath()))-->Line_101 $$ myTree.setSelectionRow(selectedTreeRow)[ FD ]
Line_46 $$ final Runnable runnable = new Runnable() -->Line_97 $$ if (changes.size() > 0) [ CD ]
Line_2 $$ public void setChangesToDisplay(final List<T> changes, @Nullable final VirtualFile toSelect) -->Line_33 $$ if (!myAlwaysExpandList && !wasEmpty) [ CD ]
Line_80 $$ selectedTreeRow = myTree.getRowForPath(new TreePath(node.getPath()))-->Line_89 $$ selectedTreeRow = rowInTree[ FD ]
Line_107 $$ if (ApplicationManager.getApplication().isDispatchThread()) -->Line_110 $$ SwingUtilities.invokeLater(runnable)[ CD ]
Line_65 $$ Enumeration enumeration = root.depthFirstEnumeration()-->Line_67 $$ ChangesBrowserNode node = (ChangesBrowserNode) enumeration.nextElement()[ FD ]
Line_53 $$ int selectedListRow = 0-->Line_99 $$ myList.ensureIndexIsVisible(selectedListRow)[ FD ]
Line_75 $$ while (enumeration.hasMoreElements()) -->Line_76 $$ ChangesBrowserNode node = (ChangesBrowserNode) enumeration.nextElement()[ CD ]
Line_57 $$ for (int i = 0; i < sortedChanges.size(); i++) -->Line_60 $$ selectedListRow = i[ FD ]
Line_67 $$ ChangesBrowserNode node = (ChangesBrowserNode) enumeration.nextElement()-->Line_79 $$ if (state == CheckboxTree.NodeState.FULL && node.isLeaf()) [ FD ]
Line_92 $$ if (rowInList > -1) -->Line_93 $$ selectedListRow = rowInList[ CD ]
Line_59 $$ if (myIncludedChanges.contains(t)) -->Line_60 $$ selectedListRow = i[ CD ]
Line_76 $$ ChangesBrowserNode node = (ChangesBrowserNode) enumeration.nextElement()-->Line_80 $$ selectedTreeRow = myTree.getRowForPath(new TreePath(node.getPath()))[ FD ]
Line_86 $$ if (toSelect != null) -->Line_92 $$ if (rowInList > -1) [ CD ]
Line_65 $$ Enumeration enumeration = root.depthFirstEnumeration()-->Line_66 $$ while (enumeration.hasMoreElements()) [ FD ]
Line_46 $$ final Runnable runnable = new Runnable() -->Line_50 $$ if (myProject.isDisposed())[ CD ]
Line_87 $$ int rowInTree = findRowContainingFile((TreeNode) model.getRoot(), toSelect)-->Line_88 $$ if (rowInTree > -1) [ FD ]
Line_100 $$ if (selectedTreeRow >= 0) -->Line_101 $$ myTree.setSelectionRow(selectedTreeRow)[ CD ]
Line_4 $$ final List<T> sortedChanges = new ArrayList<T>(changes)-->Line_37 $$ for (int i = 0; i < sortedChanges.size(); i++) [ FD ]
Line_56 $$ if (myIncludedChanges.size() > 0) -->Line_74 $$ enumeration = root.depthFirstEnumeration()[ CD ]
Line_64 $$ ChangesBrowserNode root = (ChangesBrowserNode) model.getRoot()-->Line_74 $$ enumeration = root.depthFirstEnumeration()[ FD ]
Line_54 $$ int selectedTreeRow = -1-->Line_100 $$ if (selectedTreeRow >= 0) [ FD ]
Line_4 $$ final List<T> sortedChanges = new ArrayList<T>(changes)-->Line_57 $$ for (int i = 0; i < sortedChanges.size(); i++) [ FD ]
Line_2 $$ public void setChangesToDisplay(final List<T> changes, @Nullable final VirtualFile toSelect) -->Line_87 $$ int rowInTree = findRowContainingFile((TreeNode) model.getRoot(), toSelect)[ FD ]
Line_46 $$ final Runnable runnable = new Runnable() -->Line_54 $$ int selectedTreeRow = -1[ CD ]
Line_46 $$ final Runnable runnable = new Runnable() -->Line_53 $$ int selectedListRow = 0[ CD ]
Line_66 $$ while (enumeration.hasMoreElements()) -->Line_70 $$ if (node != root && state == CheckboxTree.NodeState.CLEAR) [ CD ]
Line_2 $$ public void setChangesToDisplay(final List<T> changes, @Nullable final VirtualFile toSelect) -->Line_27 $$ final DefaultTreeModel model = buildTreeModel(changes, myChangeDecorator)[ FD ]
Line_91 $$ int rowInList = findRowContainingFile(myList.getModel(), toSelect)-->Line_92 $$ if (rowInList > -1) [ FD ]
Line_67 $$ ChangesBrowserNode node = (ChangesBrowserNode) enumeration.nextElement()-->Line_80 $$ selectedTreeRow = myTree.getRowForPath(new TreePath(node.getPath()))[ FD ]
Line_93 $$ selectedListRow = rowInList-->Line_98 $$ myList.setSelectedIndex(selectedListRow)[ FD ]
Line_97 $$ if (changes.size() > 0) -->Line_103 $$ TreeUtil.showRowCentered(myTree, selectedTreeRow, false)[ CD ]
Line_54 $$ int selectedTreeRow = -1-->Line_80 $$ selectedTreeRow = myTree.getRowForPath(new TreePath(node.getPath()))[ FD ]
Line_55 $$ if (myShowCheckboxes) -->Line_86 $$ if (toSelect != null) [ CD ]
Line_57 $$ for (int i = 0; i < sortedChanges.size(); i++) -->Line_58 $$ T t = sortedChanges.get(i)[ FD ]
Line_33 $$ if (!myAlwaysExpandList && !wasEmpty) -->Line_44 $$ return[ CD ]
Line_53 $$ int selectedListRow = 0-->Line_93 $$ selectedListRow = rowInList[ FD ]
Line_2 $$ public void setChangesToDisplay(final List<T> changes, @Nullable final VirtualFile toSelect) -->Line_107 $$ if (ApplicationManager.getApplication().isDispatchThread()) [ CD ]
Line_37 $$ for (int i = 0; i < sortedChanges.size(); i++) -->Line_38 $$ T t = sortedChanges.get(i)[ FD ]
Line_75 $$ while (enumeration.hasMoreElements()) -->Line_79 $$ if (state == CheckboxTree.NodeState.FULL && node.isLeaf()) [ CD ]
Line_4 $$ final List<T> sortedChanges = new ArrayList<T>(changes)-->Line_38 $$ T t = sortedChanges.get(i)[ FD ]
Line_46 $$ final Runnable runnable = new Runnable() -->Line_52 $$ TreeUtil.expandAll(myTree)[ CD ]
Line_65 $$ Enumeration enumeration = root.depthFirstEnumeration()-->Line_75 $$ while (enumeration.hasMoreElements()) [ FD ]
Line_2 $$ public void setChangesToDisplay(final List<T> changes, @Nullable final VirtualFile toSelect) -->Line_3 $$ final boolean wasEmpty = myList.isEmpty()[ CD ]
Line_2 $$ public void setChangesToDisplay(final List<T> changes, @Nullable final VirtualFile toSelect) -->Line_27 $$ final DefaultTreeModel model = buildTreeModel(changes, myChangeDecorator)[ CD ]
Line_97 $$ if (changes.size() > 0) -->Line_98 $$ myList.setSelectedIndex(selectedListRow)[ CD ]
Line_37 $$ for (int i = 0; i < sortedChanges.size(); i++) -->Line_40 $$ indices.add(i)[ FD ]
Line_4 $$ final List<T> sortedChanges = new ArrayList<T>(changes)-->Line_58 $$ T t = sortedChanges.get(i)[ FD ]
Line_2 $$ public void setChangesToDisplay(final List<T> changes, @Nullable final VirtualFile toSelect) -->Line_97 $$ if (changes.size() > 0) [ FD ]
Line_57 $$ for (int i = 0; i < sortedChanges.size(); i++) -->Line_59 $$ if (myIncludedChanges.contains(t)) [ CD ]
Line_86 $$ if (toSelect != null) -->Line_88 $$ if (rowInTree > -1) [ CD ]
Line_56 $$ if (myIncludedChanges.size() > 0) -->Line_66 $$ while (enumeration.hasMoreElements()) [ CD ]
Line_80 $$ selectedTreeRow = myTree.getRowForPath(new TreePath(node.getPath()))-->Line_103 $$ TreeUtil.showRowCentered(myTree, selectedTreeRow, false)[ FD ]
Line_80 $$ selectedTreeRow = myTree.getRowForPath(new TreePath(node.getPath()))-->Line_100 $$ if (selectedTreeRow >= 0) [ FD ]
Line_2 $$ public void setChangesToDisplay(final List<T> changes, @Nullable final VirtualFile toSelect) -->Line_86 $$ if (toSelect != null) [ FD ]
Line_58 $$ T t = sortedChanges.get(i)-->Line_59 $$ if (myIncludedChanges.contains(t)) [ FD ]
Line_37 $$ for (int i = 0; i < sortedChanges.size(); i++) -->Line_57 $$ for (int i = 0; i < sortedChanges.size(); i++) [ FD ]
Line_4 $$ final List<T> sortedChanges = new ArrayList<T>(changes)-->Line_5 $$ Collections.sort(sortedChanges, new Comparator<T>() [ FD ]
Line_76 $$ ChangesBrowserNode node = (ChangesBrowserNode) enumeration.nextElement()-->Line_79 $$ if (state == CheckboxTree.NodeState.FULL && node.isLeaf()) [ FD ]
Line_37 $$ for (int i = 0; i < sortedChanges.size(); i++) -->Line_38 $$ T t = sortedChanges.get(i)[ CD ]
Line_60 $$ selectedListRow = i-->Line_98 $$ myList.setSelectedIndex(selectedListRow)[ FD ]
Line_97 $$ if (changes.size() > 0) -->Line_99 $$ myList.ensureIndexIsVisible(selectedListRow)[ CD ]
Line_74 $$ enumeration = root.depthFirstEnumeration()-->Line_76 $$ ChangesBrowserNode node = (ChangesBrowserNode) enumeration.nextElement()[ FD ]
Line_89 $$ selectedTreeRow = rowInTree-->Line_101 $$ myTree.setSelectionRow(selectedTreeRow)[ FD ]
Line_56 $$ if (myIncludedChanges.size() > 0) -->Line_75 $$ while (enumeration.hasMoreElements()) [ CD ]
Line_4 $$ final List<T> sortedChanges = new ArrayList<T>(changes)-->Line_24 $$ return sortedChanges.get(index)[ FD ]
Line_57 $$ for (int i = 0; i < sortedChanges.size(); i++) -->Line_58 $$ T t = sortedChanges.get(i)[ CD ]
Line_38 $$ T t = sortedChanges.get(i)-->Line_59 $$ if (myIncludedChanges.contains(t)) [ FD ]
Line_89 $$ selectedTreeRow = rowInTree-->Line_103 $$ TreeUtil.showRowCentered(myTree, selectedTreeRow, false)[ FD ]
Line_54 $$ int selectedTreeRow = -1-->Line_101 $$ myTree.setSelectionRow(selectedTreeRow)[ FD ]
