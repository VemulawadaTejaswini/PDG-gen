Line_6 $$ final List<String> fields = StringUtil.split(line, "\t")-->Line_10 $$ final String name = fields.get(0)[ FD ]
Line_13 $$ final List<PyRequirement> requirements = new ArrayList<PyRequirement>()-->Line_17 $$ requirements.addAll(PyRequirement.parse(requiresSpec))[ FD ]
Line_6 $$ final List<String> fields = StringUtil.split(line, "\t")-->Line_12 $$ final String location = fields.get(2)[ FD ]
Line_2 $$ private static List<PyPackage> parsePackagingToolOutput(@NotNull String s) throws ExecutionException -->Line_3 $$ final String[] lines = StringUtil.splitByLines(s)[ FD ]
Line_16 $$ final String requiresSpec = StringUtil.join(StringUtil.split(requiresLine, ":"), "\n")-->Line_17 $$ requirements.addAll(PyRequirement.parse(requiresSpec))[ FD ]
Line_4 $$ final List<PyPackage> packages = new ArrayList<PyPackage>()-->Line_20 $$ packages.add(new PyPackage(name, version, location, requirements))[ FD ]
Line_10 $$ final String name = fields.get(0)-->Line_19 $$ if (!"Python".equals(name)) [ FD ]
Line_2 $$ private static List<PyPackage> parsePackagingToolOutput(@NotNull String s) throws ExecutionException -->Line_23 $$ return packages[ CD ]
Line_6 $$ final List<String> fields = StringUtil.split(line, "\t")-->Line_11 $$ final String version = fields.get(1)[ FD ]
Line_6 $$ final List<String> fields = StringUtil.split(line, "\t")-->Line_7 $$ if (fields.size() < 3) [ FD ]
Line_15 $$ final String requiresLine = fields.get(3)-->Line_16 $$ final String requiresSpec = StringUtil.join(StringUtil.split(requiresLine, ":"), "\n")[ FD ]
Line_19 $$ if (!"Python".equals(name)) -->Line_20 $$ packages.add(new PyPackage(name, version, location, requirements))[ CD ]
Line_2 $$ private static List<PyPackage> parsePackagingToolOutput(@NotNull String s) throws ExecutionException -->Line_3 $$ final String[] lines = StringUtil.splitByLines(s)[ CD ]
Line_14 $$ if (fields.size() >= 4) -->Line_15 $$ final String requiresLine = fields.get(3)[ CD ]
Line_6 $$ final List<String> fields = StringUtil.split(line, "\t")-->Line_14 $$ if (fields.size() >= 4) [ FD ]
Line_6 $$ final List<String> fields = StringUtil.split(line, "\t")-->Line_15 $$ final String requiresLine = fields.get(3)[ FD ]
Line_14 $$ if (fields.size() >= 4) -->Line_16 $$ final String requiresSpec = StringUtil.join(StringUtil.split(requiresLine, ":"), "\n")[ CD ]
Line_2 $$ private static List<PyPackage> parsePackagingToolOutput(@NotNull String s) throws ExecutionException -->Line_4 $$ final List<PyPackage> packages = new ArrayList<PyPackage>()[ CD ]
Line_14 $$ if (fields.size() >= 4) -->Line_17 $$ requirements.addAll(PyRequirement.parse(requiresSpec))[ CD ]
Line_5 $$ for (String line : lines) -->Line_6 $$ final List<String> fields = StringUtil.split(line, "\t")[ FD ]
