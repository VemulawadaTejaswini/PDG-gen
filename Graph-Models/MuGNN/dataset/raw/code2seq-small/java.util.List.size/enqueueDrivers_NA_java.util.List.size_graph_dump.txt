Line_26 $$ DriverStats driverStats-->Line_30 $$ driverStats = new DriverStats()[ FD ]
Line_2 $$ private synchronized void enqueueDrivers(boolean forceRunSplit, List<DriverSplitRunner> runners) -->Line_3 $$ List<ListenableFuture<?>> finishedFutures = taskExecutor.enqueueSplits(taskHandle, forceRunSplit, runners)[ FD ]
Line_2 $$ private synchronized void enqueueDrivers(boolean forceRunSplit, List<DriverSplitRunner> runners) -->Line_8 $$ final DriverSplitRunner splitRunner = runners.get(i)[ FD ]
Line_6 $$ for (int i = 0; i < finishedFutures.size(); i++) -->Line_8 $$ final DriverSplitRunner splitRunner = runners.get(i)[ FD ]
Line_6 $$ for (int i = 0; i < finishedFutures.size(); i++) -->Line_7 $$ ListenableFuture<?> finishedFuture = finishedFutures.get(i)[ CD ]
Line_9 $$ Futures.addCallback(finishedFuture, new FutureCallback<Object>() -->Line_32 $$ return driverStats[ CD ]
Line_9 $$ Futures.addCallback(finishedFuture, new FutureCallback<Object>() -->Line_21 $$ queryMonitor.splitFailedEvent(taskId, getDriverStats(), cause)[ FD ]
Line_9 $$ Futures.addCallback(finishedFuture, new FutureCallback<Object>() -->Line_26 $$ DriverStats driverStats[ CD ]
Line_6 $$ for (int i = 0; i < finishedFutures.size(); i++) -->Line_9 $$ Futures.addCallback(finishedFuture, new FutureCallback<Object>() [ CD ]
Line_27 $$ if (driverContext != null) -->Line_30 $$ driverStats = new DriverStats()[ CD ]
Line_3 $$ List<ListenableFuture<?>> finishedFutures = taskExecutor.enqueueSplits(taskHandle, forceRunSplit, runners)-->Line_4 $$ checkState(finishedFutures.size() == runners.size(), "Expected %s futures but got %s", runners.size(), finishedFutures.size())[ FD ]
Line_3 $$ List<ListenableFuture<?>> finishedFutures = taskExecutor.enqueueSplits(taskHandle, forceRunSplit, runners)-->Line_5 $$ remainingDrivers.addAndGet(finishedFutures.size())[ FD ]
Line_2 $$ private synchronized void enqueueDrivers(boolean forceRunSplit, List<DriverSplitRunner> runners) -->Line_4 $$ checkState(finishedFutures.size() == runners.size(), "Expected %s futures but got %s", runners.size(), finishedFutures.size())[ FD ]
Line_9 $$ Futures.addCallback(finishedFuture, new FutureCallback<Object>() -->Line_27 $$ if (driverContext != null) [ CD ]
Line_6 $$ for (int i = 0; i < finishedFutures.size(); i++) -->Line_7 $$ ListenableFuture<?> finishedFuture = finishedFutures.get(i)[ FD ]
Line_26 $$ DriverStats driverStats-->Line_28 $$ driverStats = driverContext.getDriverStats()[ FD ]
Line_28 $$ driverStats = driverContext.getDriverStats()-->Line_30 $$ driverStats = new DriverStats()[ FD ]
Line_2 $$ private synchronized void enqueueDrivers(boolean forceRunSplit, List<DriverSplitRunner> runners) -->Line_6 $$ for (int i = 0; i < finishedFutures.size(); i++) [ CD ]
Line_3 $$ List<ListenableFuture<?>> finishedFutures = taskExecutor.enqueueSplits(taskHandle, forceRunSplit, runners)-->Line_7 $$ ListenableFuture<?> finishedFuture = finishedFutures.get(i)[ FD ]
Line_25 $$ DriverContext driverContext = splitRunner.getDriverContext()-->Line_28 $$ driverStats = driverContext.getDriverStats()[ FD ]
Line_2 $$ private synchronized void enqueueDrivers(boolean forceRunSplit, List<DriverSplitRunner> runners) -->Line_5 $$ remainingDrivers.addAndGet(finishedFutures.size())[ CD ]
Line_6 $$ for (int i = 0; i < finishedFutures.size(); i++) -->Line_8 $$ final DriverSplitRunner splitRunner = runners.get(i)[ CD ]
Line_3 $$ List<ListenableFuture<?>> finishedFutures = taskExecutor.enqueueSplits(taskHandle, forceRunSplit, runners)-->Line_6 $$ for (int i = 0; i < finishedFutures.size(); i++) [ FD ]
Line_25 $$ DriverContext driverContext = splitRunner.getDriverContext()-->Line_27 $$ if (driverContext != null) [ FD ]
Line_9 $$ Futures.addCallback(finishedFuture, new FutureCallback<Object>() -->Line_19 $$ taskStateMachine.failed(cause)[ FD ]
Line_9 $$ Futures.addCallback(finishedFuture, new FutureCallback<Object>() -->Line_25 $$ DriverContext driverContext = splitRunner.getDriverContext()[ CD ]
Line_27 $$ if (driverContext != null) -->Line_28 $$ driverStats = driverContext.getDriverStats()[ CD ]
Line_2 $$ private synchronized void enqueueDrivers(boolean forceRunSplit, List<DriverSplitRunner> runners) -->Line_3 $$ List<ListenableFuture<?>> finishedFutures = taskExecutor.enqueueSplits(taskHandle, forceRunSplit, runners)[ CD ]
Line_8 $$ final DriverSplitRunner splitRunner = runners.get(i)-->Line_25 $$ DriverContext driverContext = splitRunner.getDriverContext()[ FD ]
Line_7 $$ ListenableFuture<?> finishedFuture = finishedFutures.get(i)-->Line_9 $$ Futures.addCallback(finishedFuture, new FutureCallback<Object>() [ FD ]
Line_2 $$ private synchronized void enqueueDrivers(boolean forceRunSplit, List<DriverSplitRunner> runners) -->Line_4 $$ checkState(finishedFutures.size() == runners.size(), "Expected %s futures but got %s", runners.size(), finishedFutures.size())[ CD ]
