Line_4 $$ Cache<Integer, String> cache = new Cache<Integer, String>() -->Line_6 $$ return now.get()[ CD ]
Line_26 $$ for (int i = 0; i < evictedKeys.size(); i++) -->Line_34 $$ assertTrue(remainingKeys.contains(i))[ FD ]
Line_3 $$ AtomicLong now = new AtomicLong()-->Line_15 $$ now.set(0)[ FD ]
Line_33 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) -->Line_34 $$ assertTrue(remainingKeys.contains(i))[ FD ]
Line_2 $$ public void testExpirationAfterAccess() -->Line_15 $$ now.set(0)[ CD ]
Line_4 $$ Cache<Integer, String> cache = new Cache<Integer, String>() -->Line_11 $$ cache.setRemovalListener( notification -> [ FD ]
Line_16 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_33 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) [ FD ]
Line_26 $$ for (int i = 0; i < evictedKeys.size(); i++) -->Line_33 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) [ FD ]
Line_16 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_17 $$ cache.put(i, Integer.toString(i))[ FD ]
Line_2 $$ public void testExpirationAfterAccess() -->Line_23 $$ now.set(2)[ CD ]
Line_2 $$ public void testExpirationAfterAccess() -->Line_19 $$ now.set(1)[ CD ]
Line_4 $$ Cache<Integer, String> cache = new Cache<Integer, String>() -->Line_24 $$ cache.refresh()[ FD ]
Line_16 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_27 $$ assertEquals(i, (int) evictedKeys.get(i))[ FD ]
Line_2 $$ public void testExpirationAfterAccess() -->Line_11 $$ cache.setRemovalListener( notification -> [ CD ]
Line_16 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_34 $$ assertTrue(remainingKeys.contains(i))[ FD ]
Line_16 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_17 $$ cache.put(i, Integer.toString(i))[ CD ]
Line_20 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) -->Line_33 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) [ FD ]
Line_3 $$ AtomicLong now = new AtomicLong()-->Line_19 $$ now.set(1)[ FD ]
Line_2 $$ public void testExpirationAfterAccess() -->Line_26 $$ for (int i = 0; i < evictedKeys.size(); i++) [ CD ]
Line_3 $$ AtomicLong now = new AtomicLong()-->Line_6 $$ return now.get()[ FD ]
Line_3 $$ AtomicLong now = new AtomicLong()-->Line_23 $$ now.set(2)[ FD ]
Line_2 $$ public void testExpirationAfterAccess() -->Line_24 $$ cache.refresh()[ CD ]
Line_2 $$ public void testExpirationAfterAccess() -->Line_33 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) [ CD ]
Line_2 $$ public void testExpirationAfterAccess() -->Line_9 $$ cache.setExpireAfterAccess(1)[ CD ]
Line_4 $$ Cache<Integer, String> cache = new Cache<Integer, String>() -->Line_21 $$ cache.put(i, Integer.toString(i))[ FD ]
Line_2 $$ public void testExpirationAfterAccess() -->Line_4 $$ Cache<Integer, String> cache = new Cache<Integer, String>() [ CD ]
Line_20 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) -->Line_27 $$ assertEquals(i, (int) evictedKeys.get(i))[ FD ]
Line_2 $$ public void testExpirationAfterAccess() -->Line_3 $$ AtomicLong now = new AtomicLong()[ CD ]
Line_33 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) -->Line_34 $$ assertTrue(remainingKeys.contains(i))[ CD ]
Line_20 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) -->Line_21 $$ cache.put(i, Integer.toString(i))[ FD ]
Line_4 $$ Cache<Integer, String> cache = new Cache<Integer, String>() -->Line_17 $$ cache.put(i, Integer.toString(i))[ FD ]
Line_16 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_21 $$ cache.put(i, Integer.toString(i))[ FD ]
Line_2 $$ public void testExpirationAfterAccess() -->Line_25 $$ assertEquals(numberOfEntries, cache.count())[ CD ]
Line_20 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) -->Line_34 $$ assertTrue(remainingKeys.contains(i))[ FD ]
Line_2 $$ public void testExpirationAfterAccess() -->Line_16 $$ for (int i = 0; i < numberOfEntries; i++) [ CD ]
Line_4 $$ Cache<Integer, String> cache = new Cache<Integer, String>() -->Line_30 $$ for (Integer key : cache.keys()) [ FD ]
Line_20 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) -->Line_21 $$ cache.put(i, Integer.toString(i))[ CD ]
Line_20 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) -->Line_26 $$ for (int i = 0; i < evictedKeys.size(); i++) [ FD ]
Line_2 $$ public void testExpirationAfterAccess() -->Line_20 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) [ CD ]
Line_16 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_26 $$ for (int i = 0; i < evictedKeys.size(); i++) [ FD ]
Line_4 $$ Cache<Integer, String> cache = new Cache<Integer, String>() -->Line_25 $$ assertEquals(numberOfEntries, cache.count())[ FD ]
Line_26 $$ for (int i = 0; i < evictedKeys.size(); i++) -->Line_27 $$ assertEquals(i, (int) evictedKeys.get(i))[ CD ]
Line_16 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_20 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) [ FD ]
Line_26 $$ for (int i = 0; i < evictedKeys.size(); i++) -->Line_27 $$ assertEquals(i, (int) evictedKeys.get(i))[ FD ]
Line_4 $$ Cache<Integer, String> cache = new Cache<Integer, String>() -->Line_9 $$ cache.setExpireAfterAccess(1)[ FD ]
