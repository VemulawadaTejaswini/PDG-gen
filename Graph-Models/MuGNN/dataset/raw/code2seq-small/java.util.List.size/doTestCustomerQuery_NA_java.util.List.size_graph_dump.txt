Line_10 $$ if (namedParameters) -->Line_17 $$ queryResults = query.execute(params)[ CD ]
Line_10 $$ if (namedParameters) -->Line_13 $$ params.put("country", "UK")[ CD ]
Line_2 $$ private void doTestCustomerQuery(SqlQuery<?> query, boolean namedParameters) throws SQLException -->Line_4 $$ given(resultSet.getInt("id")).willReturn(1)[ CD ]
Line_2 $$ private void doTestCustomerQuery(SqlQuery<?> query, boolean namedParameters) throws SQLException -->Line_7 $$ given(preparedStatement.executeQuery()).willReturn(resultSet)[ CD ]
Line_11 $$ Map<String, Object> params = new HashMap<String, Object>(2)-->Line_17 $$ queryResults = query.execute(params)[ FD ]
Line_2 $$ private void doTestCustomerQuery(SqlQuery<?> query, boolean namedParameters) throws SQLException -->Line_25 $$ verify(preparedStatement).setString(2, "UK")[ CD ]
Line_14 $$ queryResults = query.executeByNamedParam(params)-->Line_17 $$ queryResults = query.execute(params)[ FD ]
Line_2 $$ private void doTestCustomerQuery(SqlQuery<?> query, boolean namedParameters) throws SQLException -->Line_5 $$ given(resultSet.getString("forename")).willReturn("rod")[ CD ]
Line_14 $$ queryResults = query.executeByNamedParam(params)-->Line_19 $$ assertTrue("Customer was returned correctly", queryResults.size() == 1)[ FD ]
Line_2 $$ private void doTestCustomerQuery(SqlQuery<?> query, boolean namedParameters) throws SQLException -->Line_3 $$ given(resultSet.next()).willReturn(true)[ CD ]
Line_2 $$ private void doTestCustomerQuery(SqlQuery<?> query, boolean namedParameters) throws SQLException -->Line_26 $$ verify(preparedStatement).close()[ CD ]
Line_10 $$ if (namedParameters) -->Line_12 $$ params.put("id", 1)[ CD ]
Line_2 $$ private void doTestCustomerQuery(SqlQuery<?> query, boolean namedParameters) throws SQLException -->Line_23 $$ verify(resultSet).close()[ CD ]
Line_20 $$ Customer cust = (Customer) queryResults.get(0)-->Line_21 $$ assertTrue("Customer id was assigned correctly", cust.getId() == 1)[ FD ]
Line_2 $$ private void doTestCustomerQuery(SqlQuery<?> query, boolean namedParameters) throws SQLException -->Line_21 $$ assertTrue("Customer id was assigned correctly", cust.getId() == 1)[ CD ]
Line_2 $$ private void doTestCustomerQuery(SqlQuery<?> query, boolean namedParameters) throws SQLException -->Line_6 $$ given(resultSet.next()).willReturn(true, false)[ CD ]
Line_2 $$ private void doTestCustomerQuery(SqlQuery<?> query, boolean namedParameters) throws SQLException -->Line_22 $$ assertTrue("Customer forename was assigned correctly", cust.getForename().equals("rod"))[ CD ]
Line_9 $$ List<?> queryResults-->Line_20 $$ Customer cust = (Customer) queryResults.get(0)[ FD ]
Line_2 $$ private void doTestCustomerQuery(SqlQuery<?> query, boolean namedParameters) throws SQLException -->Line_19 $$ assertTrue("Customer was returned correctly", queryResults.size() == 1)[ CD ]
Line_14 $$ queryResults = query.executeByNamedParam(params)-->Line_20 $$ Customer cust = (Customer) queryResults.get(0)[ FD ]
Line_20 $$ Customer cust = (Customer) queryResults.get(0)-->Line_22 $$ assertTrue("Customer forename was assigned correctly", cust.getForename().equals("rod"))[ FD ]
Line_2 $$ private void doTestCustomerQuery(SqlQuery<?> query, boolean namedParameters) throws SQLException -->Line_9 $$ List<?> queryResults[ CD ]
Line_9 $$ List<?> queryResults-->Line_17 $$ queryResults = query.execute(params)[ FD ]
Line_2 $$ private void doTestCustomerQuery(SqlQuery<?> query, boolean namedParameters) throws SQLException -->Line_14 $$ queryResults = query.executeByNamedParam(params)[ FD ]
Line_9 $$ List<?> queryResults-->Line_19 $$ assertTrue("Customer was returned correctly", queryResults.size() == 1)[ FD ]
Line_2 $$ private void doTestCustomerQuery(SqlQuery<?> query, boolean namedParameters) throws SQLException -->Line_8 $$ given(connection.prepareStatement(SELECT_ID_FORENAME_NAMED_PARAMETERS_PARSED)).willReturn(preparedStatement)[ CD ]
Line_10 $$ if (namedParameters) -->Line_14 $$ queryResults = query.executeByNamedParam(params)[ CD ]
Line_17 $$ queryResults = query.execute(params)-->Line_20 $$ Customer cust = (Customer) queryResults.get(0)[ FD ]
Line_2 $$ private void doTestCustomerQuery(SqlQuery<?> query, boolean namedParameters) throws SQLException -->Line_17 $$ queryResults = query.execute(params)[ FD ]
Line_2 $$ private void doTestCustomerQuery(SqlQuery<?> query, boolean namedParameters) throws SQLException -->Line_24 $$ verify(preparedStatement).setObject(1, 1, Types.INTEGER)[ CD ]
Line_2 $$ private void doTestCustomerQuery(SqlQuery<?> query, boolean namedParameters) throws SQLException -->Line_10 $$ if (namedParameters) [ CD ]
Line_17 $$ queryResults = query.execute(params)-->Line_19 $$ assertTrue("Customer was returned correctly", queryResults.size() == 1)[ FD ]
Line_11 $$ Map<String, Object> params = new HashMap<String, Object>(2)-->Line_13 $$ params.put("country", "UK")[ FD ]
Line_2 $$ private void doTestCustomerQuery(SqlQuery<?> query, boolean namedParameters) throws SQLException -->Line_20 $$ Customer cust = (Customer) queryResults.get(0)[ CD ]
Line_9 $$ List<?> queryResults-->Line_14 $$ queryResults = query.executeByNamedParam(params)[ FD ]
Line_11 $$ Map<String, Object> params = new HashMap<String, Object>(2)-->Line_14 $$ queryResults = query.executeByNamedParam(params)[ FD ]
Line_11 $$ Map<String, Object> params = new HashMap<String, Object>(2)-->Line_12 $$ params.put("id", 1)[ FD ]
Line_10 $$ if (namedParameters) -->Line_11 $$ Map<String, Object> params = new HashMap<String, Object>(2)[ CD ]
