Line_2 $$ public void testRefreshUserToGroupsMappingsWithFileSystemBasedConfigurationProvider() throws IOException, YarnException -->Line_6 $$ String user = ugi.getUserName()[ CD ]
Line_7 $$ List<String> groupWithInit = new ArrayList<String>(2)-->Line_9 $$ groupWithInit.add(ugi.getGroupNames()[i])[ FD ]
Line_2 $$ public void testRefreshUserToGroupsMappingsWithFileSystemBasedConfigurationProvider() throws IOException, YarnException -->Line_23 $$ Assert.assertTrue(groupBefore.contains("test_group_A") && groupBefore.contains("test_group_B") && groupBefore.contains("test_group_C") && groupBefore.size() == 3)[ CD ]
Line_5 $$ UserGroupInformation ugi = UserGroupInformation.createUserForTesting("dummyUser", defaultTestUserGroups)-->Line_8 $$ for (int i = 0; i < ugi.getGroupNames().length; i++) [ FD ]
Line_2 $$ public void testRefreshUserToGroupsMappingsWithFileSystemBasedConfigurationProvider() throws IOException, YarnException -->Line_5 $$ UserGroupInformation ugi = UserGroupInformation.createUserForTesting("dummyUser", defaultTestUserGroups)[ CD ]
Line_2 $$ public void testRefreshUserToGroupsMappingsWithFileSystemBasedConfigurationProvider() throws IOException, YarnException -->Line_25 $$ Assert.assertFalse(groupWithInit.contains("test_group_A") || groupWithInit.contains("test_group_B") || groupWithInit.contains("test_group_C"))[ CD ]
Line_6 $$ String user = ugi.getUserName()-->Line_28 $$ List<String> groupAfter = Groups.getUserToGroupsMappingService(configuration).getGroups(user)[ FD ]
Line_28 $$ List<String> groupAfter = Groups.getUserToGroupsMappingService(configuration).getGroups(user)-->Line_29 $$ Assert.assertTrue(groupAfter.contains("test_group_D") && groupAfter.contains("test_group_E") && groupAfter.contains("test_group_F") && groupAfter.size() == 3)[ FD ]
Line_2 $$ public void testRefreshUserToGroupsMappingsWithFileSystemBasedConfigurationProvider() throws IOException, YarnException -->Line_3 $$ configuration.set(YarnConfiguration.RM_CONFIGURATION_PROVIDER_CLASS, "org.apache.hadoop.yarn.FileSystemBasedConfigurationProvider")[ CD ]
Line_2 $$ public void testRefreshUserToGroupsMappingsWithFileSystemBasedConfigurationProvider() throws IOException, YarnException -->Line_7 $$ List<String> groupWithInit = new ArrayList<String>(2)[ CD ]
Line_7 $$ List<String> groupWithInit = new ArrayList<String>(2)-->Line_24 $$ Assert.assertTrue(groupWithInit.size() != groupBefore.size())[ FD ]
Line_2 $$ public void testRefreshUserToGroupsMappingsWithFileSystemBasedConfigurationProvider() throws IOException, YarnException -->Line_11 $$ uploadDefaultConfiguration()[ CD ]
Line_8 $$ for (int i = 0; i < ugi.getGroupNames().length; i++) -->Line_9 $$ groupWithInit.add(ugi.getGroupNames()[i])[ CD ]
Line_5 $$ UserGroupInformation ugi = UserGroupInformation.createUserForTesting("dummyUser", defaultTestUserGroups)-->Line_9 $$ groupWithInit.add(ugi.getGroupNames()[i])[ FD ]
Line_4 $$ String[] defaultTestUserGroups = -->Line_5 $$ UserGroupInformation ugi = UserGroupInformation.createUserForTesting("dummyUser", defaultTestUserGroups)[ FD ]
Line_2 $$ public void testRefreshUserToGroupsMappingsWithFileSystemBasedConfigurationProvider() throws IOException, YarnException -->Line_8 $$ for (int i = 0; i < ugi.getGroupNames().length; i++) [ CD ]
Line_22 $$ List<String> groupBefore = new ArrayList<String>(Groups.getUserToGroupsMappingService(configuration).getGroups(user))-->Line_23 $$ Assert.assertTrue(groupBefore.contains("test_group_A") && groupBefore.contains("test_group_B") && groupBefore.contains("test_group_C") && groupBefore.size() == 3)[ FD ]
Line_22 $$ List<String> groupBefore = new ArrayList<String>(Groups.getUserToGroupsMappingService(configuration).getGroups(user))-->Line_24 $$ Assert.assertTrue(groupWithInit.size() != groupBefore.size())[ FD ]
Line_2 $$ public void testRefreshUserToGroupsMappingsWithFileSystemBasedConfigurationProvider() throws IOException, YarnException -->Line_29 $$ Assert.assertTrue(groupAfter.contains("test_group_D") && groupAfter.contains("test_group_E") && groupAfter.contains("test_group_F") && groupAfter.size() == 3)[ CD ]
Line_2 $$ public void testRefreshUserToGroupsMappingsWithFileSystemBasedConfigurationProvider() throws IOException, YarnException -->Line_4 $$ String[] defaultTestUserGroups = [ CD ]
Line_12 $$ Configuration conf = new Configuration()-->Line_14 $$ uploadConfiguration(conf, "core-site.xml")[ FD ]
Line_2 $$ public void testRefreshUserToGroupsMappingsWithFileSystemBasedConfigurationProvider() throws IOException, YarnException -->Line_27 $$ rm.adminService.refreshUserToGroupsMappings(RefreshUserToGroupsMappingsRequest.newInstance())[ CD ]
Line_2 $$ public void testRefreshUserToGroupsMappingsWithFileSystemBasedConfigurationProvider() throws IOException, YarnException -->Line_28 $$ List<String> groupAfter = Groups.getUserToGroupsMappingService(configuration).getGroups(user)[ CD ]
Line_2 $$ public void testRefreshUserToGroupsMappingsWithFileSystemBasedConfigurationProvider() throws IOException, YarnException -->Line_14 $$ uploadConfiguration(conf, "core-site.xml")[ CD ]
Line_5 $$ UserGroupInformation ugi = UserGroupInformation.createUserForTesting("dummyUser", defaultTestUserGroups)-->Line_6 $$ String user = ugi.getUserName()[ FD ]
Line_2 $$ public void testRefreshUserToGroupsMappingsWithFileSystemBasedConfigurationProvider() throws IOException, YarnException -->Line_13 $$ conf.setClass(CommonConfigurationKeys.HADOOP_SECURITY_GROUP_MAPPING, MockUnixGroupsMapping.class, GroupMappingServiceProvider.class)[ CD ]
Line_6 $$ String user = ugi.getUserName()-->Line_22 $$ List<String> groupBefore = new ArrayList<String>(Groups.getUserToGroupsMappingService(configuration).getGroups(user))[ FD ]
Line_7 $$ List<String> groupWithInit = new ArrayList<String>(2)-->Line_25 $$ Assert.assertFalse(groupWithInit.contains("test_group_A") || groupWithInit.contains("test_group_B") || groupWithInit.contains("test_group_C"))[ FD ]
Line_2 $$ public void testRefreshUserToGroupsMappingsWithFileSystemBasedConfigurationProvider() throws IOException, YarnException -->Line_26 $$ MockUnixGroupsMapping.updateGroups()[ CD ]
Line_2 $$ public void testRefreshUserToGroupsMappingsWithFileSystemBasedConfigurationProvider() throws IOException, YarnException -->Line_24 $$ Assert.assertTrue(groupWithInit.size() != groupBefore.size())[ CD ]
Line_2 $$ public void testRefreshUserToGroupsMappingsWithFileSystemBasedConfigurationProvider() throws IOException, YarnException -->Line_22 $$ List<String> groupBefore = new ArrayList<String>(Groups.getUserToGroupsMappingService(configuration).getGroups(user))[ CD ]
Line_12 $$ Configuration conf = new Configuration()-->Line_13 $$ conf.setClass(CommonConfigurationKeys.HADOOP_SECURITY_GROUP_MAPPING, MockUnixGroupsMapping.class, GroupMappingServiceProvider.class)[ FD ]
Line_2 $$ public void testRefreshUserToGroupsMappingsWithFileSystemBasedConfigurationProvider() throws IOException, YarnException -->Line_12 $$ Configuration conf = new Configuration()[ CD ]
