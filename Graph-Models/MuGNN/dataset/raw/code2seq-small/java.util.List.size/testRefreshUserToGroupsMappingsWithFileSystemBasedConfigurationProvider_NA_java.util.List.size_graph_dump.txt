Line_8 $$ List<String> groupWithInit = new ArrayList<String>(2)-->Line_10 $$ groupWithInit.add(ugi.getGroupNames()[i])[ FD ]
Line_14 $$ Configuration conf = new Configuration()-->Line_16 $$ uploadConfiguration(conf, "core-site.xml")[ FD ]
Line_6 $$ UserGroupInformation ugi = UserGroupInformation.createUserForTesting("dummyUser", defaultTestUserGroups)-->Line_9 $$ for (int i = 0; i < ugi.getGroupNames().length; i++) [ FD ]
Line_7 $$ String user = ugi.getUserName()-->Line_32 $$ List<String> groupAfter = Groups.getUserToGroupsMappingService(configuration).getGroups(user)[ FD ]
Line_8 $$ List<String> groupWithInit = new ArrayList<String>(2)-->Line_28 $$ Assert.assertFalse(groupWithInit.contains("test_group_A") || groupWithInit.contains("test_group_B") || groupWithInit.contains("test_group_C"))[ FD ]
Line_8 $$ List<String> groupWithInit = new ArrayList<String>(2)-->Line_27 $$ Assert.assertTrue(groupWithInit.size() != groupBefore.size())[ FD ]
Line_9 $$ for (int i = 0; i < ugi.getGroupNames().length; i++) -->Line_10 $$ groupWithInit.add(ugi.getGroupNames()[i])[ CD ]
Line_6 $$ UserGroupInformation ugi = UserGroupInformation.createUserForTesting("dummyUser", defaultTestUserGroups)-->Line_7 $$ String user = ugi.getUserName()[ FD ]
Line_5 $$ String[] defaultTestUserGroups = -->Line_6 $$ UserGroupInformation ugi = UserGroupInformation.createUserForTesting("dummyUser", defaultTestUserGroups)[ FD ]
Line_6 $$ UserGroupInformation ugi = UserGroupInformation.createUserForTesting("dummyUser", defaultTestUserGroups)-->Line_10 $$ groupWithInit.add(ugi.getGroupNames()[i])[ FD ]
Line_14 $$ Configuration conf = new Configuration()-->Line_15 $$ conf.setClass(CommonConfigurationKeys.HADOOP_SECURITY_GROUP_MAPPING, MockUnixGroupsMapping.class, GroupMappingServiceProvider.class)[ FD ]
