Line_4 $$ List<Object> availableAdvice = getAdvice(adviceType)-->Line_8 $$ List<A> result = new ArrayList<A>(availableAdvice.size())[ FD ]
Line_11 $$ ControllerAdviceBean adviceBean = (ControllerAdviceBean) advice-->Line_12 $$ if (!adviceBean.isApplicableToBeanType(parameter.getContainingClass())) [ FD ]
Line_15 $$ advice = adviceBean.resolveBean()-->Line_17 $$ if (adviceType.isAssignableFrom(advice.getClass())) [ FD ]
Line_9 $$ for (Object advice : availableAdvice) -->Line_17 $$ if (adviceType.isAssignableFrom(advice.getClass())) [ FD ]
Line_10 $$ if (advice instanceof ControllerAdviceBean) -->Line_11 $$ ControllerAdviceBean adviceBean = (ControllerAdviceBean) advice[ CD ]
Line_9 $$ for (Object advice : availableAdvice) -->Line_15 $$ advice = adviceBean.resolveBean()[ FD ]
Line_10 $$ if (advice instanceof ControllerAdviceBean) -->Line_12 $$ if (!adviceBean.isApplicableToBeanType(parameter.getContainingClass())) [ CD ]
Line_9 $$ for (Object advice : availableAdvice) -->Line_10 $$ if (advice instanceof ControllerAdviceBean) [ FD ]
Line_4 $$ List<Object> availableAdvice = getAdvice(adviceType)-->Line_5 $$ if (CollectionUtils.isEmpty(availableAdvice)) [ FD ]
Line_10 $$ if (advice instanceof ControllerAdviceBean) -->Line_15 $$ advice = adviceBean.resolveBean()[ CD ]
Line_11 $$ ControllerAdviceBean adviceBean = (ControllerAdviceBean) advice-->Line_15 $$ advice = adviceBean.resolveBean()[ FD ]
Line_5 $$ if (CollectionUtils.isEmpty(availableAdvice)) -->Line_6 $$ return Collections.emptyList()[ CD ]
Line_8 $$ List<A> result = new ArrayList<A>(availableAdvice.size())-->Line_18 $$ result.add((A) advice)[ FD ]
Line_17 $$ if (adviceType.isAssignableFrom(advice.getClass())) -->Line_18 $$ result.add((A) advice)[ CD ]
