Line_8 $$ StringBundler sb = new StringBundler()-->Line_13 $$ sb.append(_portalServiceJarFile.getAbsolutePath())[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_38 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_8 $$ StringBundler sb = new StringBundler()-->Line_14 $$ sb.append(File.pathSeparator)[ FD ]
Line_26 $$ LogRecord logRecord = logRecords.get(0)-->Line_28 $$ logRecord = logRecords.get(1)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_26 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_30 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_30 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_38 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_8 $$ StringBundler sb = new StringBundler()-->Line_20 $$ sb.append(File.pathSeparator)[ FD ]
Line_8 $$ StringBundler sb = new StringBundler()-->Line_21 $$ sb.append(_CONTEXT_PATH)[ FD ]
Line_8 $$ StringBundler sb = new StringBundler()-->Line_23 $$ String spiClassPath = sb.toString()[ FD ]
Line_8 $$ StringBundler sb = new StringBundler()-->Line_9 $$ sb.append(_jarFile.getAbsolutePath())[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(SPIClassPathContextListener.class.getName(), Level.FINE)) -->Line_30 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_26 $$ LogRecord logRecord = logRecords.get(0)-->Line_27 $$ Assert.assertEquals("SPI class path " + spiClassPath, logRecord.getMessage())[ FD ]
Line_6 $$ SPIClassPathContextListener spiClassPathContextListener = new SPIClassPathContextListener()-->Line_7 $$ spiClassPathContextListener.contextInitialized(new ServletContextEvent(_mockServletContext))[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_25 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_26 $$ LogRecord logRecord = logRecords.get(0)-->Line_29 $$ Assert.assertEquals("Unable to create SPI provider with name InvalidSPIProvider", logRecord.getMessage())[ FD ]
Line_8 $$ StringBundler sb = new StringBundler()-->Line_19 $$ sb.append(_extJarFile.getAbsolutePath())[ FD ]
Line_8 $$ StringBundler sb = new StringBundler()-->Line_22 $$ sb.append("/WEB-INF/classes")[ FD ]
Line_8 $$ StringBundler sb = new StringBundler()-->Line_11 $$ sb.append(_global1JarFile.getAbsolutePath())[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_28 $$ logRecord = logRecords.get(1)[ FD ]
Line_28 $$ logRecord = logRecords.get(1)-->Line_29 $$ Assert.assertEquals("Unable to create SPI provider with name InvalidSPIProvider", logRecord.getMessage())[ FD ]
Line_8 $$ StringBundler sb = new StringBundler()-->Line_17 $$ sb.append(_jdbcDriverJarFile.getAbsolutePath())[ FD ]
Line_8 $$ StringBundler sb = new StringBundler()-->Line_10 $$ sb.append(File.pathSeparator)[ FD ]
Line_23 $$ String spiClassPath = sb.toString()-->Line_24 $$ Assert.assertEquals(spiClassPath, SPIClassPathContextListener.SPI_CLASS_PATH)[ FD ]
Line_8 $$ StringBundler sb = new StringBundler()-->Line_12 $$ sb.append(File.pathSeparator)[ FD ]
Line_8 $$ StringBundler sb = new StringBundler()-->Line_18 $$ sb.append(File.pathSeparator)[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(SPIClassPathContextListener.class.getName(), Level.FINE)) -->Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_6 $$ SPIClassPathContextListener spiClassPathContextListener = new SPIClassPathContextListener()-->Line_33 $$ spiClassPathContextListener.contextInitialized(new ServletContextEvent(_mockServletContext))[ FD ]
Line_23 $$ String spiClassPath = sb.toString()-->Line_37 $$ Assert.assertEquals(spiClassPath, SPIClassPathContextListener.SPI_CLASS_PATH)[ FD ]
Line_8 $$ StringBundler sb = new StringBundler()-->Line_16 $$ sb.append(File.pathSeparator)[ FD ]
Line_8 $$ StringBundler sb = new StringBundler()-->Line_15 $$ sb.append(_global2JarFile.getAbsolutePath())[ FD ]
