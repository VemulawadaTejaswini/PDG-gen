Line_4 $$ Session session = openSession()-->Line_21 $$ session.close()[ FD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_17 $$ message2.poster = poster[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_7 $$ poster.pid = 0[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_25 $$ final String sql = queryDetails.getSqlStatement()[ CD ]
Line_27 $$ final List results = new ArrayList()-->Line_44 $$ assertEquals(2, results.size())[ FD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_4 $$ Session session = openSession()[ CD ]
Line_4 $$ Session session = openSession()-->Line_63 $$ session.beginTransaction()[ FD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_48 $$ Poster workPoster = ExtraAssertions.assertTyping(Poster.class, result1)[ CD ]
Line_24 $$ final LoadQueryDetails queryDetails = Helper.INSTANCE.buildLoadQueryDetails(plan, sessionFactory())-->Line_25 $$ final String sql = queryDetails.getSqlStatement()[ FD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_65 $$ session.getTransaction().commit()[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_50 $$ assertEquals(poster.name, workPoster.name)[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_62 $$ session = openSession()[ CD ]
Line_23 $$ final LoadPlan plan = Helper.INSTANCE.buildLoadPlan(sessionFactory(), entityPersister)-->Line_24 $$ final LoadQueryDetails queryDetails = Helper.INSTANCE.buildLoadQueryDetails(plan, sessionFactory())[ FD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_63 $$ session.beginTransaction()[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_19 $$ session.save(poster)[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_8 $$ poster.name = "John Doe"[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_52 $$ assertEquals(2, workPoster.messages.size())[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_44 $$ assertEquals(2, results.size())[ CD ]
Line_27 $$ final List results = new ArrayList()-->Line_47 $$ assertSame(result1, results.get(1))[ FD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_26 $$ final ResultSetProcessor resultSetProcessor = queryDetails.getResultSetProcessor()[ CD ]
Line_28 $$ final Session workSession = openSession()-->Line_29 $$ workSession.beginTransaction()[ FD ]
Line_4 $$ Session session = openSession()-->Line_20 $$ session.getTransaction().commit()[ FD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_10 $$ message1.mid = 1[ CD ]
Line_9 $$ Message message1 = new Message()-->Line_13 $$ poster.messages.add(message1)[ FD ]
Line_34 $$ ResultSet resultSet = ps.executeQuery()-->Line_40 $$ resultSet.close()[ FD ]
Line_28 $$ final Session workSession = openSession()-->Line_59 $$ workSession.getTransaction().commit()[ FD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_3 $$ final EntityPersister entityPersister = sessionFactory().getEntityPersister(Poster.class.getName())[ CD ]
Line_30 $$ workSession.doWork(new Work() -->Line_32 $$ PreparedStatement ps = connection.prepareStatement(sql)[ CD ]
Line_30 $$ workSession.doWork(new Work() -->Line_35 $$ results.addAll(resultSetProcessor.extractResults(resultSet, (SessionImplementor) workSession, new QueryParameters(), new NamedParameterContext() [ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_53 $$ assertTrue(Hibernate.isInitialized(workPoster.messages))[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_30 $$ workSession.doWork(new Work() [ CD ]
Line_14 $$ Message message2 = new Message()-->Line_18 $$ poster.messages.add(message2)[ FD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_18 $$ poster.messages.add(message2)[ CD ]
Line_30 $$ workSession.doWork(new Work() -->Line_33 $$ ps.setInt(1, 0)[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_11 $$ message1.msgTxt = "Howdy!"[ CD ]
Line_4 $$ Session session = openSession()-->Line_19 $$ session.save(poster)[ FD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_64 $$ session.delete(poster)[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_46 $$ assertNotNull(result1)[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_20 $$ session.getTransaction().commit()[ CD ]
Line_3 $$ final EntityPersister entityPersister = sessionFactory().getEntityPersister(Poster.class.getName())-->Line_23 $$ final LoadPlan plan = Helper.INSTANCE.buildLoadPlan(sessionFactory(), entityPersister)[ FD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_49 $$ assertEquals(0, workPoster.pid.intValue())[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_16 $$ message2.msgTxt = "Bye!"[ CD ]
Line_6 $$ Poster poster = new Poster()-->Line_12 $$ message1.poster = poster[ FD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_51 $$ assertTrue(Hibernate.isInitialized(workPoster.messages))[ CD ]
Line_28 $$ final Session workSession = openSession()-->Line_60 $$ workSession.close()[ FD ]
Line_6 $$ Poster poster = new Poster()-->Line_64 $$ session.delete(poster)[ FD ]
Line_24 $$ final LoadQueryDetails queryDetails = Helper.INSTANCE.buildLoadQueryDetails(plan, sessionFactory())-->Line_26 $$ final ResultSetProcessor resultSetProcessor = queryDetails.getResultSetProcessor()[ FD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_23 $$ final LoadPlan plan = Helper.INSTANCE.buildLoadPlan(sessionFactory(), entityPersister)[ CD ]
Line_4 $$ Session session = openSession()-->Line_65 $$ session.getTransaction().commit()[ FD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_27 $$ final List results = new ArrayList()[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_9 $$ Message message1 = new Message()[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_56 $$ assertEquals(message2.msgTxt, workPoster.messages.get(1).msgTxt)[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_14 $$ Message message2 = new Message()[ CD ]
Line_35 $$ results.addAll(resultSetProcessor.extractResults(resultSet, (SessionImplementor) workSession, new QueryParameters(), new NamedParameterContext() -->Line_37 $$ return new int[0][ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_57 $$ assertSame(workPoster, workPoster.messages.get(0).poster)[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_55 $$ assertEquals(message1.msgTxt, workPoster.messages.get(0).msgTxt)[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_58 $$ assertSame(workPoster, workPoster.messages.get(1).poster)[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_6 $$ Poster poster = new Poster()[ CD ]
Line_25 $$ final String sql = queryDetails.getSqlStatement()-->Line_32 $$ PreparedStatement ps = connection.prepareStatement(sql)[ FD ]
Line_30 $$ workSession.doWork(new Work() -->Line_41 $$ ps.close()[ CD ]
Line_26 $$ final ResultSetProcessor resultSetProcessor = queryDetails.getResultSetProcessor()-->Line_35 $$ results.addAll(resultSetProcessor.extractResults(resultSet, (SessionImplementor) workSession, new QueryParameters(), new NamedParameterContext() [ FD ]
Line_32 $$ PreparedStatement ps = connection.prepareStatement(sql)-->Line_34 $$ ResultSet resultSet = ps.executeQuery()[ FD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_15 $$ message2.mid = 2[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_24 $$ final LoadQueryDetails queryDetails = Helper.INSTANCE.buildLoadQueryDetails(plan, sessionFactory())[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_59 $$ workSession.getTransaction().commit()[ CD ]
Line_30 $$ workSession.doWork(new Work() -->Line_32 $$ PreparedStatement ps = connection.prepareStatement(sql)[ FD ]
Line_6 $$ Poster poster = new Poster()-->Line_17 $$ message2.poster = poster[ FD ]
Line_30 $$ workSession.doWork(new Work() -->Line_40 $$ resultSet.close()[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_60 $$ workSession.close()[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_66 $$ session.close()[ CD ]
Line_4 $$ Session session = openSession()-->Line_5 $$ session.beginTransaction()[ FD ]
Line_27 $$ final List results = new ArrayList()-->Line_45 $$ Object result1 = results.get(0)[ FD ]
Line_32 $$ PreparedStatement ps = connection.prepareStatement(sql)-->Line_41 $$ ps.close()[ FD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_47 $$ assertSame(result1, results.get(1))[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_28 $$ final Session workSession = openSession()[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_21 $$ session.close()[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_29 $$ workSession.beginTransaction()[ CD ]
Line_30 $$ workSession.doWork(new Work() -->Line_34 $$ ResultSet resultSet = ps.executeQuery()[ CD ]
Line_32 $$ PreparedStatement ps = connection.prepareStatement(sql)-->Line_33 $$ ps.setInt(1, 0)[ FD ]
Line_6 $$ Poster poster = new Poster()-->Line_19 $$ session.save(poster)[ FD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_54 $$ assertEquals(2, workPoster.messages.size())[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_45 $$ Object result1 = results.get(0)[ CD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_5 $$ session.beginTransaction()[ CD ]
Line_28 $$ final Session workSession = openSession()-->Line_30 $$ workSession.doWork(new Work() [ FD ]
Line_34 $$ ResultSet resultSet = ps.executeQuery()-->Line_35 $$ results.addAll(resultSetProcessor.extractResults(resultSet, (SessionImplementor) workSession, new QueryParameters(), new NamedParameterContext() [ FD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_13 $$ poster.messages.add(message1)[ CD ]
Line_4 $$ Session session = openSession()-->Line_66 $$ session.close()[ FD ]
Line_27 $$ final List results = new ArrayList()-->Line_35 $$ results.addAll(resultSetProcessor.extractResults(resultSet, (SessionImplementor) workSession, new QueryParameters(), new NamedParameterContext() [ FD ]
Line_2 $$ public void testEntityWithList() throws Exception -->Line_12 $$ message1.poster = poster[ CD ]
Line_4 $$ Session session = openSession()-->Line_64 $$ session.delete(poster)[ FD ]
