Line_2 $$ public void testSubmitPrioritizedExecutorWithCallables() throws Exception -->Line_9 $$ executor.submit(new CallableJob(5, Priority.LOW, results, finishedLatch))[ CD ]
Line_3 $$ ExecutorService executor = EsExecutors.newSinglePrioritizing(getTestName(), EsExecutors.daemonThreadFactory(getTestName()))-->Line_14 $$ executor.submit(new CallableJob(4, Priority.NORMAL, results, finishedLatch))[ FD ]
Line_2 $$ public void testSubmitPrioritizedExecutorWithCallables() throws Exception -->Line_20 $$ assertThat(results.size(), equalTo(8))[ CD ]
Line_4 $$ List<Integer> results = new ArrayList(8)-->Line_20 $$ assertThat(results.size(), equalTo(8))[ FD ]
Line_5 $$ CountDownLatch awaitingLatch = new CountDownLatch(1)-->Line_18 $$ awaitingLatch.countDown()[ FD ]
Line_2 $$ public void testSubmitPrioritizedExecutorWithCallables() throws Exception -->Line_25 $$ assertThat(results.get(4), equalTo(4))[ CD ]
Line_3 $$ ExecutorService executor = EsExecutors.newSinglePrioritizing(getTestName(), EsExecutors.daemonThreadFactory(getTestName()))-->Line_8 $$ executor.submit(new CallableJob(7, Priority.LANGUID, results, finishedLatch))[ FD ]
Line_4 $$ List<Integer> results = new ArrayList(8)-->Line_23 $$ assertThat(results.get(2), equalTo(2))[ FD ]
Line_2 $$ public void testSubmitPrioritizedExecutorWithCallables() throws Exception -->Line_6 $$ CountDownLatch finishedLatch = new CountDownLatch(8)[ CD ]
Line_2 $$ public void testSubmitPrioritizedExecutorWithCallables() throws Exception -->Line_10 $$ executor.submit(new CallableJob(2, Priority.HIGH, results, finishedLatch))[ CD ]
Line_2 $$ public void testSubmitPrioritizedExecutorWithCallables() throws Exception -->Line_18 $$ awaitingLatch.countDown()[ CD ]
Line_4 $$ List<Integer> results = new ArrayList(8)-->Line_26 $$ assertThat(results.get(5), equalTo(5))[ FD ]
Line_3 $$ ExecutorService executor = EsExecutors.newSinglePrioritizing(getTestName(), EsExecutors.daemonThreadFactory(getTestName()))-->Line_7 $$ executor.submit(new AwaitingJob(awaitingLatch))[ FD ]
Line_4 $$ List<Integer> results = new ArrayList(8)-->Line_22 $$ assertThat(results.get(1), equalTo(1))[ FD ]
Line_2 $$ public void testSubmitPrioritizedExecutorWithCallables() throws Exception -->Line_4 $$ List<Integer> results = new ArrayList(8)[ CD ]
Line_2 $$ public void testSubmitPrioritizedExecutorWithCallables() throws Exception -->Line_5 $$ CountDownLatch awaitingLatch = new CountDownLatch(1)[ CD ]
Line_3 $$ ExecutorService executor = EsExecutors.newSinglePrioritizing(getTestName(), EsExecutors.daemonThreadFactory(getTestName()))-->Line_10 $$ executor.submit(new CallableJob(2, Priority.HIGH, results, finishedLatch))[ FD ]
Line_2 $$ public void testSubmitPrioritizedExecutorWithCallables() throws Exception -->Line_17 $$ executor.submit(new CallableJob(0, Priority.IMMEDIATE, results, finishedLatch))[ CD ]
Line_2 $$ public void testSubmitPrioritizedExecutorWithCallables() throws Exception -->Line_3 $$ ExecutorService executor = EsExecutors.newSinglePrioritizing(getTestName(), EsExecutors.daemonThreadFactory(getTestName()))[ CD ]
Line_2 $$ public void testSubmitPrioritizedExecutorWithCallables() throws Exception -->Line_13 $$ executor.submit(new CallableJob(1, Priority.URGENT, results, finishedLatch))[ CD ]
Line_2 $$ public void testSubmitPrioritizedExecutorWithCallables() throws Exception -->Line_29 $$ terminate(executor)[ CD ]
Line_2 $$ public void testSubmitPrioritizedExecutorWithCallables() throws Exception -->Line_21 $$ assertThat(results.get(0), equalTo(0))[ CD ]
Line_2 $$ public void testSubmitPrioritizedExecutorWithCallables() throws Exception -->Line_19 $$ finishedLatch.await()[ CD ]
Line_4 $$ List<Integer> results = new ArrayList(8)-->Line_21 $$ assertThat(results.get(0), equalTo(0))[ FD ]
Line_3 $$ ExecutorService executor = EsExecutors.newSinglePrioritizing(getTestName(), EsExecutors.daemonThreadFactory(getTestName()))-->Line_29 $$ terminate(executor)[ FD ]
Line_3 $$ ExecutorService executor = EsExecutors.newSinglePrioritizing(getTestName(), EsExecutors.daemonThreadFactory(getTestName()))-->Line_9 $$ executor.submit(new CallableJob(5, Priority.LOW, results, finishedLatch))[ FD ]
Line_3 $$ ExecutorService executor = EsExecutors.newSinglePrioritizing(getTestName(), EsExecutors.daemonThreadFactory(getTestName()))-->Line_13 $$ executor.submit(new CallableJob(1, Priority.URGENT, results, finishedLatch))[ FD ]
Line_2 $$ public void testSubmitPrioritizedExecutorWithCallables() throws Exception -->Line_7 $$ executor.submit(new AwaitingJob(awaitingLatch))[ CD ]
Line_2 $$ public void testSubmitPrioritizedExecutorWithCallables() throws Exception -->Line_24 $$ assertThat(results.get(3), equalTo(3))[ CD ]
Line_2 $$ public void testSubmitPrioritizedExecutorWithCallables() throws Exception -->Line_26 $$ assertThat(results.get(5), equalTo(5))[ CD ]
Line_2 $$ public void testSubmitPrioritizedExecutorWithCallables() throws Exception -->Line_14 $$ executor.submit(new CallableJob(4, Priority.NORMAL, results, finishedLatch))[ CD ]
Line_4 $$ List<Integer> results = new ArrayList(8)-->Line_24 $$ assertThat(results.get(3), equalTo(3))[ FD ]
Line_2 $$ public void testSubmitPrioritizedExecutorWithCallables() throws Exception -->Line_23 $$ assertThat(results.get(2), equalTo(2))[ CD ]
Line_2 $$ public void testSubmitPrioritizedExecutorWithCallables() throws Exception -->Line_22 $$ assertThat(results.get(1), equalTo(1))[ CD ]
Line_4 $$ List<Integer> results = new ArrayList(8)-->Line_25 $$ assertThat(results.get(4), equalTo(4))[ FD ]
Line_2 $$ public void testSubmitPrioritizedExecutorWithCallables() throws Exception -->Line_8 $$ executor.submit(new CallableJob(7, Priority.LANGUID, results, finishedLatch))[ CD ]
Line_3 $$ ExecutorService executor = EsExecutors.newSinglePrioritizing(getTestName(), EsExecutors.daemonThreadFactory(getTestName()))-->Line_17 $$ executor.submit(new CallableJob(0, Priority.IMMEDIATE, results, finishedLatch))[ FD ]
Line_2 $$ public void testSubmitPrioritizedExecutorWithCallables() throws Exception -->Line_27 $$ assertThat(results.get(6), equalTo(6))[ CD ]
Line_4 $$ List<Integer> results = new ArrayList(8)-->Line_27 $$ assertThat(results.get(6), equalTo(6))[ FD ]
Line_4 $$ List<Integer> results = new ArrayList(8)-->Line_28 $$ assertThat(results.get(7), equalTo(7))[ FD ]
Line_2 $$ public void testSubmitPrioritizedExecutorWithCallables() throws Exception -->Line_28 $$ assertThat(results.get(7), equalTo(7))[ CD ]
Line_6 $$ CountDownLatch finishedLatch = new CountDownLatch(8)-->Line_19 $$ finishedLatch.await()[ FD ]
