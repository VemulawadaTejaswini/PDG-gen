Line_4 $$ List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)-->Line_10 $$ Collections.sort(modelList)[ FD ]
Line_6 $$ if (comparator != null) -->Line_7 $$ Collections.sort(modelList, comparator)[ CD ]
Line_2 $$ public static void assertSortAndCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList, Comparator comparator) -->Line_13 $$ assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.", expectedList.equals(modelList))[ FD ]
Line_4 $$ List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)-->Line_7 $$ Collections.sort(modelList, comparator)[ FD ]
Line_2 $$ public static void assertSortAndCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList, Comparator comparator) -->Line_8 $$ Collections.sort(expectedList, comparator)[ FD ]
Line_2 $$ public static void assertSortAndCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList, Comparator comparator) -->Line_5 $$ assertTrue("Size of model list is '" + modelList.size() + "' while size of expected list is '" + expectedList.size() + "'", expectedList.size() == modelList.size())[ CD ]
Line_2 $$ public static void assertSortAndCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList, Comparator comparator) -->Line_3 $$ assertTrue("ModelAndView is null", mav != null)[ CD ]
Line_2 $$ public static void assertSortAndCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList, Comparator comparator) -->Line_6 $$ if (comparator != null) [ FD ]
Line_2 $$ public static void assertSortAndCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList, Comparator comparator) -->Line_7 $$ Collections.sort(modelList, comparator)[ FD ]
Line_2 $$ public static void assertSortAndCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList, Comparator comparator) -->Line_11 $$ Collections.sort(expectedList)[ FD ]
Line_2 $$ public static void assertSortAndCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList, Comparator comparator) -->Line_4 $$ List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)[ CD ]
Line_2 $$ public static void assertSortAndCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList, Comparator comparator) -->Line_4 $$ List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)[ FD ]
Line_2 $$ public static void assertSortAndCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList, Comparator comparator) -->Line_5 $$ assertTrue("Size of model list is '" + modelList.size() + "' while size of expected list is '" + expectedList.size() + "'", expectedList.size() == modelList.size())[ FD ]
Line_4 $$ List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)-->Line_5 $$ assertTrue("Size of model list is '" + modelList.size() + "' while size of expected list is '" + expectedList.size() + "'", expectedList.size() == modelList.size())[ FD ]
Line_6 $$ if (comparator != null) -->Line_8 $$ Collections.sort(expectedList, comparator)[ CD ]
Line_2 $$ public static void assertSortAndCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList, Comparator comparator) -->Line_13 $$ assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.", expectedList.equals(modelList))[ CD ]
Line_6 $$ if (comparator != null) -->Line_10 $$ Collections.sort(modelList)[ CD ]
Line_2 $$ public static void assertSortAndCompareListModelAttribute(ModelAndView mav, String modelName, List expectedList, Comparator comparator) -->Line_6 $$ if (comparator != null) [ CD ]
Line_4 $$ List modelList = assertAndReturnModelAttributeOfType(mav, modelName, List.class)-->Line_13 $$ assertTrue("List in model under name '" + modelName + "' is not equal to the expected list.", expectedList.equals(modelList))[ FD ]
Line_6 $$ if (comparator != null) -->Line_11 $$ Collections.sort(expectedList)[ CD ]
