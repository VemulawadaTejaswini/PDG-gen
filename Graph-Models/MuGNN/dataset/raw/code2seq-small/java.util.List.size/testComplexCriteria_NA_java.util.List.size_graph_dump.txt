Line_32 $$ List list = crit.list()-->Line_45 $$ list = s.createCriteria(Baz.class).add(Restrictions.sizeEq("fooSet", 2)).list()[ FD ]
Line_19 $$ Foo foo1 = new Foo()-->Line_23 $$ baz.getFooSet().add(foo1)[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_67 $$ crit = s.createCriteria(Baz.class)[ CD ]
Line_49 $$ s = openSession()-->Line_81 $$ s.close()[ FD ]
Line_32 $$ List list = crit.list()-->Line_71 $$ assertTrue(list.size() == 2)[ FD ]
Line_10 $$ Glarch g1 = new Glarch()-->Line_16 $$ g1.setProxyArray(new GlarchProxy[] [ FD ]
Line_39 $$ s = openSession()-->Line_77 $$ s.delete(s.get(Foo.class, foo1.getKey()))[ FD ]
Line_5 $$ Baz baz = new Baz()-->Line_58 $$ assertTrue(!Hibernate.isInitialized(baz.getFooSet()))[ FD ]
Line_32 $$ List list = crit.list()-->Line_55 $$ assertTrue(list.size() == 4)[ FD ]
Line_3 $$ Session s = openSession()-->Line_34 $$ s.createCriteria(Glarch.class).setLockMode(LockMode.UPGRADE).list()[ FD ]
Line_50 $$ t = s.beginTransaction()-->Line_63 $$ t.commit()[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_70 $$ list = crit.list()[ CD ]
Line_3 $$ Session s = openSession()-->Line_81 $$ s.close()[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_15 $$ s.save(g2)[ CD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_25 $$ baz.setFooArray(new FooProxy[] [ CD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_55 $$ assertTrue(list.size() == 4)[ CD ]
Line_3 $$ Session s = openSession()-->Line_79 $$ s.delete(baz)[ FD ]
Line_39 $$ s = openSession()-->Line_81 $$ s.close()[ FD ]
Line_39 $$ s = openSession()-->Line_76 $$ doDelete(s, "from Glarch g")[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_38 $$ s.close()[ CD ]
Line_49 $$ s = openSession()-->Line_76 $$ doDelete(s, "from Glarch g")[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_69 $$ crit.createCriteria("fooSet").add(Restrictions.isNull("null"))[ CD ]
Line_49 $$ s = openSession()-->Line_66 $$ t = s.beginTransaction()[ FD ]
Line_49 $$ s = openSession()-->Line_67 $$ crit = s.createCriteria(Baz.class)[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_51 $$ crit = s.createCriteria(Baz.class).setLockMode(lockMode)[ CD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_5 $$ Baz baz = new Baz()[ CD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_40 $$ t = s.beginTransaction()[ CD ]
Line_40 $$ t = s.beginTransaction()-->Line_47 $$ t.commit()[ FD ]
Line_51 $$ crit = s.createCriteria(Baz.class).setLockMode(lockMode)-->Line_69 $$ crit.createCriteria("fooSet").add(Restrictions.isNull("null"))[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_81 $$ s.close()[ CD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_21 $$ s.save(foo1)[ CD ]
Line_32 $$ List list = crit.list()-->Line_60 $$ assertTrue(list.size() == 0)[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_47 $$ t.commit()[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_54 $$ list = crit.list()[ CD ]
Line_40 $$ t = s.beginTransaction()-->Line_50 $$ t = s.beginTransaction()[ FD ]
Line_54 $$ list = crit.list()-->Line_71 $$ assertTrue(list.size() == 2)[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_59 $$ list = s.createCriteria(Baz.class).createCriteria("fooSet").createCriteria("foo").createCriteria("component.glarch").add(Restrictions.eq("name", "xxx")).list()[ CD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_50 $$ t = s.beginTransaction()[ CD ]
Line_39 $$ s = openSession()-->Line_61 $$ list = s.createCriteria(Baz.class).createAlias("fooSet", "foo").createAlias("foo.foo", "foo2").setLockMode("foo2", lockMode).add(Restrictions.isNull("foo2.component.glarch")).createCriteria("foo2.component.glarch").add(Restrictions.eq("name", "xxx")).list()[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_78 $$ s.delete(s.get(Foo.class, foo2.getKey()))[ CD ]
Line_72 $$ baz = (Baz) crit.uniqueResult()-->Line_74 $$ assertTrue(!Hibernate.isInitialized(baz.getFooSet()))[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_46 $$ assertEquals(new HashSet(list).size(), 1)[ CD ]
Line_5 $$ Baz baz = new Baz()-->Line_9 $$ baz.setTopGlarchez(topGlarchez)[ FD ]
Line_39 $$ s = openSession()-->Line_66 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_37 $$ t.commit()[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_73 $$ assertTrue(Hibernate.isInitialized(baz.getTopGlarchez()))[ CD ]
Line_50 $$ t = s.beginTransaction()-->Line_80 $$ t.commit()[ FD ]
Line_67 $$ crit = s.createCriteria(Baz.class)-->Line_69 $$ crit.createCriteria("fooSet").add(Restrictions.isNull("null"))[ FD ]
Line_3 $$ Session s = openSession()-->Line_27 $$ Criteria crit = s.createCriteria(Baz.class)[ FD ]
Line_72 $$ baz = (Baz) crit.uniqueResult()-->Line_79 $$ s.delete(baz)[ FD ]
Line_3 $$ Session s = openSession()-->Line_35 $$ s.createCriteria(Glarch.class).setLockMode(Criteria.ROOT_ALIAS, LockMode.UPGRADE).list()[ FD ]
Line_54 $$ list = crit.list()-->Line_60 $$ assertTrue(list.size() == 0)[ FD ]
Line_59 $$ list = s.createCriteria(Baz.class).createCriteria("fooSet").createCriteria("foo").createCriteria("component.glarch").add(Restrictions.eq("name", "xxx")).list()-->Line_71 $$ assertTrue(list.size() == 2)[ FD ]
Line_49 $$ s = openSession()-->Line_75 $$ s.createCriteria(Child.class).setFetchMode("parent", FetchMode.JOIN).list()[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_71 $$ assertTrue(list.size() == 2)[ CD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ Transaction t = s.beginTransaction()[ FD ]
Line_5 $$ Baz baz = new Baz()-->Line_24 $$ baz.getFooSet().add(foo2)[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_36 $$ g2.setName(null)[ CD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_41 $$ list = s.createCriteria(Baz.class).add(Restrictions.isEmpty("fooSet")).list()[ CD ]
Line_32 $$ List list = crit.list()-->Line_42 $$ assertEquals(list.size(), 0)[ FD ]
Line_39 $$ s = openSession()-->Line_67 $$ crit = s.createCriteria(Baz.class)[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_9 $$ baz.setTopGlarchez(topGlarchez)[ CD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_80 $$ t.commit()[ FD ]
Line_32 $$ List list = crit.list()-->Line_33 $$ assertTrue(list.size() == 2)[ FD ]
Line_56 $$ baz = (Baz) crit.uniqueResult()-->Line_58 $$ assertTrue(!Hibernate.isInitialized(baz.getFooSet()))[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_39 $$ s = openSession()[ CD ]
Line_27 $$ Criteria crit = s.createCriteria(Baz.class)-->Line_54 $$ list = crit.list()[ FD ]
Line_8 $$ Map topGlarchez = new HashMap()-->Line_18 $$ topGlarchez.put(new Character('2'), g2)[ FD ]
Line_27 $$ Criteria crit = s.createCriteria(Baz.class)-->Line_29 $$ crit.createCriteria("fooSet").add(Restrictions.isNull("null")).add(Restrictions.eq("string", "a string")).add(Restrictions.lt("integer", new Integer(-665)))[ FD ]
Line_65 $$ s = openSession()-->Line_78 $$ s.delete(s.get(Foo.class, foo2.getKey()))[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_22 $$ s.save(foo2)[ CD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_40 $$ t = s.beginTransaction()[ FD ]
Line_61 $$ list = s.createCriteria(Baz.class).createAlias("fooSet", "foo").createAlias("foo.foo", "foo2").setLockMode("foo2", lockMode).add(Restrictions.isNull("foo2.component.glarch")).createCriteria("foo2.component.glarch").add(Restrictions.eq("name", "xxx")).list()-->Line_71 $$ assertTrue(list.size() == 2)[ FD ]
Line_32 $$ List list = crit.list()-->Line_70 $$ list = crit.list()[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_44 $$ assertEquals(new HashSet(list).size(), 1)[ CD ]
Line_32 $$ List list = crit.list()-->Line_59 $$ list = s.createCriteria(Baz.class).createCriteria("fooSet").createCriteria("foo").createCriteria("component.glarch").add(Restrictions.eq("name", "xxx")).list()[ FD ]
Line_43 $$ list = s.createCriteria(Baz.class).add(Restrictions.isNotEmpty("fooSet")).list()-->Line_59 $$ list = s.createCriteria(Baz.class).createCriteria("fooSet").createCriteria("foo").createCriteria("component.glarch").add(Restrictions.eq("name", "xxx")).list()[ FD ]
Line_40 $$ t = s.beginTransaction()-->Line_80 $$ t.commit()[ FD ]
Line_41 $$ list = s.createCriteria(Baz.class).add(Restrictions.isEmpty("fooSet")).list()-->Line_43 $$ list = s.createCriteria(Baz.class).add(Restrictions.isNotEmpty("fooSet")).list()[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_34 $$ s.createCriteria(Glarch.class).setLockMode(LockMode.UPGRADE).list()[ CD ]
Line_39 $$ s = openSession()-->Line_79 $$ s.delete(baz)[ FD ]
Line_54 $$ list = crit.list()-->Line_62 $$ assertTrue(list.size() == 0)[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_56 $$ baz = (Baz) crit.uniqueResult()[ CD ]
Line_51 $$ crit = s.createCriteria(Baz.class).setLockMode(lockMode)-->Line_68 $$ crit.createCriteria("topGlarchez").add(Restrictions.isNotNull("name"))[ FD ]
Line_3 $$ Session s = openSession()-->Line_66 $$ t = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_78 $$ s.delete(s.get(Foo.class, foo2.getKey()))[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_72 $$ baz = (Baz) crit.uniqueResult()[ CD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_4 $$ Transaction t = s.beginTransaction()[ CD ]
Line_51 $$ crit = s.createCriteria(Baz.class).setLockMode(lockMode)-->Line_72 $$ baz = (Baz) crit.uniqueResult()[ FD ]
Line_32 $$ List list = crit.list()-->Line_62 $$ assertTrue(list.size() == 0)[ FD ]
Line_43 $$ list = s.createCriteria(Baz.class).add(Restrictions.isNotEmpty("fooSet")).list()-->Line_45 $$ list = s.createCriteria(Baz.class).add(Restrictions.sizeEq("fooSet", 2)).list()[ FD ]
Line_39 $$ s = openSession()-->Line_50 $$ t = s.beginTransaction()[ FD ]
Line_43 $$ list = s.createCriteria(Baz.class).add(Restrictions.isNotEmpty("fooSet")).list()-->Line_54 $$ list = crit.list()[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_28 $$ crit.createCriteria("topGlarchez").add(Restrictions.isNotNull("name")).createCriteria("proxyArray").add(Restrictions.eqProperty("name", "name")).add(Restrictions.eq("name", "g2")).add(Restrictions.gt("x", new Integer(-666)))[ CD ]
Line_51 $$ crit = s.createCriteria(Baz.class).setLockMode(lockMode)-->Line_70 $$ list = crit.list()[ FD ]
Line_5 $$ Baz baz = new Baz()-->Line_23 $$ baz.getFooSet().add(foo1)[ FD ]
Line_5 $$ Baz baz = new Baz()-->Line_25 $$ baz.setFooArray(new FooProxy[] [ FD ]
Line_27 $$ Criteria crit = s.createCriteria(Baz.class)-->Line_69 $$ crit.createCriteria("fooSet").add(Restrictions.isNull("null"))[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_64 $$ s.close()[ CD ]
Line_51 $$ crit = s.createCriteria(Baz.class).setLockMode(lockMode)-->Line_67 $$ crit = s.createCriteria(Baz.class)[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_29 $$ crit.createCriteria("fooSet").add(Restrictions.isNull("null")).add(Restrictions.eq("string", "a string")).add(Restrictions.lt("integer", new Integer(-665)))[ CD ]
Line_45 $$ list = s.createCriteria(Baz.class).add(Restrictions.sizeEq("fooSet", 2)).list()-->Line_54 $$ list = crit.list()[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_76 $$ doDelete(s, "from Glarch g")[ CD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_79 $$ s.delete(baz)[ CD ]
Line_54 $$ list = crit.list()-->Line_70 $$ list = crit.list()[ FD ]
Line_67 $$ crit = s.createCriteria(Baz.class)-->Line_70 $$ list = crit.list()[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_80 $$ t.commit()[ CD ]
Line_3 $$ Session s = openSession()-->Line_59 $$ list = s.createCriteria(Baz.class).createCriteria("fooSet").createCriteria("foo").createCriteria("component.glarch").add(Restrictions.eq("name", "xxx")).list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_21 $$ s.save(foo1)[ FD ]
Line_13 $$ Glarch g2 = new Glarch()-->Line_15 $$ s.save(g2)[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_11 $$ g1.setName("g1")[ CD ]
Line_56 $$ baz = (Baz) crit.uniqueResult()-->Line_57 $$ assertTrue(Hibernate.isInitialized(baz.getTopGlarchez()))[ FD ]
Line_41 $$ list = s.createCriteria(Baz.class).add(Restrictions.isEmpty("fooSet")).list()-->Line_62 $$ assertTrue(list.size() == 0)[ FD ]
Line_51 $$ crit = s.createCriteria(Baz.class).setLockMode(lockMode)-->Line_52 $$ crit.createCriteria("topGlarchez").add(Restrictions.gt("x", new Integer(-666)))[ FD ]
Line_67 $$ crit = s.createCriteria(Baz.class)-->Line_68 $$ crit.createCriteria("topGlarchez").add(Restrictions.isNotNull("name"))[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_48 $$ s.close()[ CD ]
Line_49 $$ s = openSession()-->Line_50 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_63 $$ t.commit()[ CD ]
Line_67 $$ crit = s.createCriteria(Baz.class)-->Line_72 $$ baz = (Baz) crit.uniqueResult()[ FD ]
Line_26 $$ LockMode lockMode = supportsLockingNullableSideOfJoin(getDialect()) ? LockMode.UPGRADE : LockMode.READ-->Line_61 $$ list = s.createCriteria(Baz.class).createAlias("fooSet", "foo").createAlias("foo.foo", "foo2").setLockMode("foo2", lockMode).add(Restrictions.isNull("foo2.component.glarch")).createCriteria("foo2.component.glarch").add(Restrictions.eq("name", "xxx")).list()[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_3 $$ Session s = openSession()[ CD ]
Line_32 $$ List list = crit.list()-->Line_41 $$ list = s.createCriteria(Baz.class).add(Restrictions.isEmpty("fooSet")).list()[ FD ]
Line_27 $$ Criteria crit = s.createCriteria(Baz.class)-->Line_68 $$ crit.createCriteria("topGlarchez").add(Restrictions.isNotNull("name"))[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_60 $$ assertTrue(list.size() == 0)[ CD ]
Line_10 $$ Glarch g1 = new Glarch()-->Line_12 $$ s.save(g1)[ FD ]
Line_39 $$ s = openSession()-->Line_59 $$ list = s.createCriteria(Baz.class).createCriteria("fooSet").createCriteria("foo").createCriteria("component.glarch").add(Restrictions.eq("name", "xxx")).list()[ FD ]
Line_41 $$ list = s.createCriteria(Baz.class).add(Restrictions.isEmpty("fooSet")).list()-->Line_42 $$ assertEquals(list.size(), 0)[ FD ]
Line_32 $$ List list = crit.list()-->Line_54 $$ list = crit.list()[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_49 $$ s = openSession()[ CD ]
Line_51 $$ crit = s.createCriteria(Baz.class).setLockMode(lockMode)-->Line_54 $$ list = crit.list()[ FD ]
Line_65 $$ s = openSession()-->Line_77 $$ s.delete(s.get(Foo.class, foo1.getKey()))[ FD ]
Line_27 $$ Criteria crit = s.createCriteria(Baz.class)-->Line_52 $$ crit.createCriteria("topGlarchez").add(Restrictions.gt("x", new Integer(-666)))[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_47 $$ t.commit()[ CD ]
Line_54 $$ list = crit.list()-->Line_59 $$ list = s.createCriteria(Baz.class).createCriteria("fooSet").createCriteria("foo").createCriteria("component.glarch").add(Restrictions.eq("name", "xxx")).list()[ FD ]
Line_43 $$ list = s.createCriteria(Baz.class).add(Restrictions.isNotEmpty("fooSet")).list()-->Line_55 $$ assertTrue(list.size() == 4)[ FD ]
Line_65 $$ s = openSession()-->Line_67 $$ crit = s.createCriteria(Baz.class)[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_53 $$ crit.createCriteria("fooSet").add(Restrictions.isNull("null"))[ CD ]
Line_5 $$ Baz baz = new Baz()-->Line_72 $$ baz = (Baz) crit.uniqueResult()[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_65 $$ s = openSession()[ CD ]
Line_51 $$ crit = s.createCriteria(Baz.class).setLockMode(lockMode)-->Line_53 $$ crit.createCriteria("fooSet").add(Restrictions.isNull("null"))[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_8 $$ Map topGlarchez = new HashMap()[ CD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_30 $$ crit.createCriteria("fooArray").add(Restrictions.eq("string", "a string")).setLockMode(lockMode)[ CD ]
Line_3 $$ Session s = openSession()-->Line_75 $$ s.createCriteria(Child.class).setFetchMode("parent", FetchMode.JOIN).list()[ FD ]
Line_27 $$ Criteria crit = s.createCriteria(Baz.class)-->Line_32 $$ List list = crit.list()[ FD ]
Line_10 $$ Glarch g1 = new Glarch()-->Line_17 $$ topGlarchez.put(new Character('1'), g1)[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_50 $$ t = s.beginTransaction()[ FD ]
Line_49 $$ s = openSession()-->Line_64 $$ s.close()[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_68 $$ crit.createCriteria("topGlarchez").add(Restrictions.isNotNull("name"))[ CD ]
Line_59 $$ list = s.createCriteria(Baz.class).createCriteria("fooSet").createCriteria("foo").createCriteria("component.glarch").add(Restrictions.eq("name", "xxx")).list()-->Line_61 $$ list = s.createCriteria(Baz.class).createAlias("fooSet", "foo").createAlias("foo.foo", "foo2").setLockMode("foo2", lockMode).add(Restrictions.isNull("foo2.component.glarch")).createCriteria("foo2.component.glarch").add(Restrictions.eq("name", "xxx")).list()[ FD ]
Line_13 $$ Glarch g2 = new Glarch()-->Line_14 $$ g2.setName("g2")[ FD ]
Line_5 $$ Baz baz = new Baz()-->Line_57 $$ assertTrue(Hibernate.isInitialized(baz.getTopGlarchez()))[ FD ]
Line_65 $$ s = openSession()-->Line_76 $$ doDelete(s, "from Glarch g")[ FD ]
Line_5 $$ Baz baz = new Baz()-->Line_7 $$ baz.setDefaults()[ FD ]
Line_39 $$ s = openSession()-->Line_51 $$ crit = s.createCriteria(Baz.class).setLockMode(lockMode)[ FD ]
Line_66 $$ t = s.beginTransaction()-->Line_80 $$ t.commit()[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_32 $$ List list = crit.list()[ CD ]
Line_3 $$ Session s = openSession()-->Line_67 $$ crit = s.createCriteria(Baz.class)[ FD ]
Line_3 $$ Session s = openSession()-->Line_48 $$ s.close()[ FD ]
Line_27 $$ Criteria crit = s.createCriteria(Baz.class)-->Line_28 $$ crit.createCriteria("topGlarchez").add(Restrictions.isNotNull("name")).createCriteria("proxyArray").add(Restrictions.eqProperty("name", "name")).add(Restrictions.eq("name", "g2")).add(Restrictions.gt("x", new Integer(-666)))[ FD ]
Line_41 $$ list = s.createCriteria(Baz.class).add(Restrictions.isEmpty("fooSet")).list()-->Line_55 $$ assertTrue(list.size() == 4)[ FD ]
Line_65 $$ s = openSession()-->Line_75 $$ s.createCriteria(Child.class).setFetchMode("parent", FetchMode.JOIN).list()[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_6 $$ s.save(baz)[ CD ]
Line_3 $$ Session s = openSession()-->Line_12 $$ s.save(g1)[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_58 $$ assertTrue(!Hibernate.isInitialized(baz.getFooSet()))[ CD ]
Line_45 $$ list = s.createCriteria(Baz.class).add(Restrictions.sizeEq("fooSet", 2)).list()-->Line_59 $$ list = s.createCriteria(Baz.class).createCriteria("fooSet").createCriteria("foo").createCriteria("component.glarch").add(Restrictions.eq("name", "xxx")).list()[ FD ]
Line_56 $$ baz = (Baz) crit.uniqueResult()-->Line_74 $$ assertTrue(!Hibernate.isInitialized(baz.getFooSet()))[ FD ]
Line_41 $$ list = s.createCriteria(Baz.class).add(Restrictions.isEmpty("fooSet")).list()-->Line_61 $$ list = s.createCriteria(Baz.class).createAlias("fooSet", "foo").createAlias("foo.foo", "foo2").setLockMode("foo2", lockMode).add(Restrictions.isNull("foo2.component.glarch")).createCriteria("foo2.component.glarch").add(Restrictions.eq("name", "xxx")).list()[ FD ]
Line_26 $$ LockMode lockMode = supportsLockingNullableSideOfJoin(getDialect()) ? LockMode.UPGRADE : LockMode.READ-->Line_51 $$ crit = s.createCriteria(Baz.class).setLockMode(lockMode)[ FD ]
Line_41 $$ list = s.createCriteria(Baz.class).add(Restrictions.isEmpty("fooSet")).list()-->Line_59 $$ list = s.createCriteria(Baz.class).createCriteria("fooSet").createCriteria("foo").createCriteria("component.glarch").add(Restrictions.eq("name", "xxx")).list()[ FD ]
Line_41 $$ list = s.createCriteria(Baz.class).add(Restrictions.isEmpty("fooSet")).list()-->Line_71 $$ assertTrue(list.size() == 2)[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_45 $$ list = s.createCriteria(Baz.class).add(Restrictions.sizeEq("fooSet", 2)).list()[ CD ]
Line_56 $$ baz = (Baz) crit.uniqueResult()-->Line_73 $$ assertTrue(Hibernate.isInitialized(baz.getTopGlarchez()))[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_16 $$ g1.setProxyArray(new GlarchProxy[] [ CD ]
Line_3 $$ Session s = openSession()-->Line_39 $$ s = openSession()[ FD ]
Line_51 $$ crit = s.createCriteria(Baz.class).setLockMode(lockMode)-->Line_56 $$ baz = (Baz) crit.uniqueResult()[ FD ]
Line_19 $$ Foo foo1 = new Foo()-->Line_21 $$ s.save(foo1)[ FD ]
Line_32 $$ List list = crit.list()-->Line_43 $$ list = s.createCriteria(Baz.class).add(Restrictions.isNotEmpty("fooSet")).list()[ FD ]
Line_10 $$ Glarch g1 = new Glarch()-->Line_11 $$ g1.setName("g1")[ FD ]
Line_43 $$ list = s.createCriteria(Baz.class).add(Restrictions.isNotEmpty("fooSet")).list()-->Line_60 $$ assertTrue(list.size() == 0)[ FD ]
Line_3 $$ Session s = openSession()-->Line_6 $$ s.save(baz)[ FD ]
Line_41 $$ list = s.createCriteria(Baz.class).add(Restrictions.isEmpty("fooSet")).list()-->Line_70 $$ list = crit.list()[ FD ]
Line_27 $$ Criteria crit = s.createCriteria(Baz.class)-->Line_70 $$ list = crit.list()[ FD ]
Line_72 $$ baz = (Baz) crit.uniqueResult()-->Line_73 $$ assertTrue(Hibernate.isInitialized(baz.getTopGlarchez()))[ FD ]
Line_41 $$ list = s.createCriteria(Baz.class).add(Restrictions.isEmpty("fooSet")).list()-->Line_60 $$ assertTrue(list.size() == 0)[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_10 $$ Glarch g1 = new Glarch()[ CD ]
Line_39 $$ s = openSession()-->Line_41 $$ list = s.createCriteria(Baz.class).add(Restrictions.isEmpty("fooSet")).list()[ FD ]
Line_41 $$ list = s.createCriteria(Baz.class).add(Restrictions.isEmpty("fooSet")).list()-->Line_54 $$ list = crit.list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_65 $$ s = openSession()[ FD ]
Line_49 $$ s = openSession()-->Line_59 $$ list = s.createCriteria(Baz.class).createCriteria("fooSet").createCriteria("foo").createCriteria("component.glarch").add(Restrictions.eq("name", "xxx")).list()[ FD ]
Line_39 $$ s = openSession()-->Line_75 $$ s.createCriteria(Child.class).setFetchMode("parent", FetchMode.JOIN).list()[ FD ]
Line_49 $$ s = openSession()-->Line_77 $$ s.delete(s.get(Foo.class, foo1.getKey()))[ FD ]
Line_39 $$ s = openSession()-->Line_65 $$ s = openSession()[ FD ]
Line_13 $$ Glarch g2 = new Glarch()-->Line_36 $$ g2.setName(null)[ FD ]
Line_45 $$ list = s.createCriteria(Baz.class).add(Restrictions.sizeEq("fooSet", 2)).list()-->Line_60 $$ assertTrue(list.size() == 0)[ FD ]
Line_59 $$ list = s.createCriteria(Baz.class).createCriteria("fooSet").createCriteria("foo").createCriteria("component.glarch").add(Restrictions.eq("name", "xxx")).list()-->Line_60 $$ assertTrue(list.size() == 0)[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_74 $$ assertTrue(!Hibernate.isInitialized(baz.getFooSet()))[ CD ]
Line_8 $$ Map topGlarchez = new HashMap()-->Line_17 $$ topGlarchez.put(new Character('1'), g1)[ FD ]
Line_41 $$ list = s.createCriteria(Baz.class).add(Restrictions.isEmpty("fooSet")).list()-->Line_45 $$ list = s.createCriteria(Baz.class).add(Restrictions.sizeEq("fooSet", 2)).list()[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_17 $$ topGlarchez.put(new Character('1'), g1)[ CD ]
Line_3 $$ Session s = openSession()-->Line_50 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_19 $$ Foo foo1 = new Foo()[ CD ]
Line_39 $$ s = openSession()-->Line_43 $$ list = s.createCriteria(Baz.class).add(Restrictions.isNotEmpty("fooSet")).list()[ FD ]
Line_43 $$ list = s.createCriteria(Baz.class).add(Restrictions.isNotEmpty("fooSet")).list()-->Line_61 $$ list = s.createCriteria(Baz.class).createAlias("fooSet", "foo").createAlias("foo.foo", "foo2").setLockMode("foo2", lockMode).add(Restrictions.isNull("foo2.component.glarch")).createCriteria("foo2.component.glarch").add(Restrictions.eq("name", "xxx")).list()[ FD ]
Line_43 $$ list = s.createCriteria(Baz.class).add(Restrictions.isNotEmpty("fooSet")).list()-->Line_70 $$ list = crit.list()[ FD ]
Line_39 $$ s = openSession()-->Line_48 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_76 $$ doDelete(s, "from Glarch g")[ FD ]
Line_27 $$ Criteria crit = s.createCriteria(Baz.class)-->Line_30 $$ crit.createCriteria("fooArray").add(Restrictions.eq("string", "a string")).setLockMode(lockMode)[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_24 $$ baz.getFooSet().add(foo2)[ CD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_26 $$ LockMode lockMode = supportsLockingNullableSideOfJoin(getDialect()) ? LockMode.UPGRADE : LockMode.READ[ CD ]
Line_54 $$ list = crit.list()-->Line_55 $$ assertTrue(list.size() == 4)[ FD ]
Line_3 $$ Session s = openSession()-->Line_61 $$ list = s.createCriteria(Baz.class).createAlias("fooSet", "foo").createAlias("foo.foo", "foo2").setLockMode("foo2", lockMode).add(Restrictions.isNull("foo2.component.glarch")).createCriteria("foo2.component.glarch").add(Restrictions.eq("name", "xxx")).list()[ FD ]
Line_5 $$ Baz baz = new Baz()-->Line_56 $$ baz = (Baz) crit.uniqueResult()[ FD ]
Line_3 $$ Session s = openSession()-->Line_22 $$ s.save(foo2)[ FD ]
Line_26 $$ LockMode lockMode = supportsLockingNullableSideOfJoin(getDialect()) ? LockMode.UPGRADE : LockMode.READ-->Line_30 $$ crit.createCriteria("fooArray").add(Restrictions.eq("string", "a string")).setLockMode(lockMode)[ FD ]
Line_65 $$ s = openSession()-->Line_66 $$ t = s.beginTransaction()[ FD ]
Line_19 $$ Foo foo1 = new Foo()-->Line_77 $$ s.delete(s.get(Foo.class, foo1.getKey()))[ FD ]
Line_61 $$ list = s.createCriteria(Baz.class).createAlias("fooSet", "foo").createAlias("foo.foo", "foo2").setLockMode("foo2", lockMode).add(Restrictions.isNull("foo2.component.glarch")).createCriteria("foo2.component.glarch").add(Restrictions.eq("name", "xxx")).list()-->Line_62 $$ assertTrue(list.size() == 0)[ FD ]
Line_3 $$ Session s = openSession()-->Line_43 $$ list = s.createCriteria(Baz.class).add(Restrictions.isNotEmpty("fooSet")).list()[ FD ]
Line_56 $$ baz = (Baz) crit.uniqueResult()-->Line_79 $$ s.delete(baz)[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_7 $$ baz.setDefaults()[ CD ]
Line_5 $$ Baz baz = new Baz()-->Line_6 $$ s.save(baz)[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_61 $$ list = s.createCriteria(Baz.class).createAlias("fooSet", "foo").createAlias("foo.foo", "foo2").setLockMode("foo2", lockMode).add(Restrictions.isNull("foo2.component.glarch")).createCriteria("foo2.component.glarch").add(Restrictions.eq("name", "xxx")).list()[ CD ]
Line_3 $$ Session s = openSession()-->Line_45 $$ list = s.createCriteria(Baz.class).add(Restrictions.sizeEq("fooSet", 2)).list()[ FD ]
Line_39 $$ s = openSession()-->Line_45 $$ list = s.createCriteria(Baz.class).add(Restrictions.sizeEq("fooSet", 2)).list()[ FD ]
Line_20 $$ Foo foo2 = new Foo()-->Line_24 $$ baz.getFooSet().add(foo2)[ FD ]
Line_40 $$ t = s.beginTransaction()-->Line_66 $$ t = s.beginTransaction()[ FD ]
Line_5 $$ Baz baz = new Baz()-->Line_74 $$ assertTrue(!Hibernate.isInitialized(baz.getFooSet()))[ FD ]
Line_3 $$ Session s = openSession()-->Line_40 $$ t = s.beginTransaction()[ FD ]
Line_45 $$ list = s.createCriteria(Baz.class).add(Restrictions.sizeEq("fooSet", 2)).list()-->Line_62 $$ assertTrue(list.size() == 0)[ FD ]
Line_40 $$ t = s.beginTransaction()-->Line_63 $$ t.commit()[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_18 $$ topGlarchez.put(new Character('2'), g2)[ CD ]
Line_27 $$ Criteria crit = s.createCriteria(Baz.class)-->Line_51 $$ crit = s.createCriteria(Baz.class).setLockMode(lockMode)[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_62 $$ assertTrue(list.size() == 0)[ CD ]
Line_70 $$ list = crit.list()-->Line_71 $$ assertTrue(list.size() == 2)[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_66 $$ t = s.beginTransaction()[ CD ]
Line_5 $$ Baz baz = new Baz()-->Line_73 $$ assertTrue(Hibernate.isInitialized(baz.getTopGlarchez()))[ FD ]
Line_49 $$ s = openSession()-->Line_79 $$ s.delete(baz)[ FD ]
Line_65 $$ s = openSession()-->Line_79 $$ s.delete(baz)[ FD ]
Line_45 $$ list = s.createCriteria(Baz.class).add(Restrictions.sizeEq("fooSet", 2)).list()-->Line_61 $$ list = s.createCriteria(Baz.class).createAlias("fooSet", "foo").createAlias("foo.foo", "foo2").setLockMode("foo2", lockMode).add(Restrictions.isNull("foo2.component.glarch")).createCriteria("foo2.component.glarch").add(Restrictions.eq("name", "xxx")).list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_41 $$ list = s.createCriteria(Baz.class).add(Restrictions.isEmpty("fooSet")).list()[ FD ]
Line_27 $$ Criteria crit = s.createCriteria(Baz.class)-->Line_53 $$ crit.createCriteria("fooSet").add(Restrictions.isNull("null"))[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_42 $$ assertEquals(list.size(), 0)[ CD ]
Line_39 $$ s = openSession()-->Line_49 $$ s = openSession()[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_14 $$ g2.setName("g2")[ CD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_33 $$ assertTrue(list.size() == 2)[ CD ]
Line_49 $$ s = openSession()-->Line_51 $$ crit = s.createCriteria(Baz.class).setLockMode(lockMode)[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_75 $$ s.createCriteria(Child.class).setFetchMode("parent", FetchMode.JOIN).list()[ CD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_27 $$ Criteria crit = s.createCriteria(Baz.class)[ CD ]
Line_5 $$ Baz baz = new Baz()-->Line_79 $$ s.delete(baz)[ FD ]
Line_65 $$ s = openSession()-->Line_81 $$ s.close()[ FD ]
Line_45 $$ list = s.createCriteria(Baz.class).add(Restrictions.sizeEq("fooSet", 2)).list()-->Line_70 $$ list = crit.list()[ FD ]
Line_20 $$ Foo foo2 = new Foo()-->Line_78 $$ s.delete(s.get(Foo.class, foo2.getKey()))[ FD ]
Line_43 $$ list = s.createCriteria(Baz.class).add(Restrictions.isNotEmpty("fooSet")).list()-->Line_71 $$ assertTrue(list.size() == 2)[ FD ]
Line_20 $$ Foo foo2 = new Foo()-->Line_22 $$ s.save(foo2)[ FD ]
Line_43 $$ list = s.createCriteria(Baz.class).add(Restrictions.isNotEmpty("fooSet")).list()-->Line_62 $$ assertTrue(list.size() == 0)[ FD ]
Line_13 $$ Glarch g2 = new Glarch()-->Line_18 $$ topGlarchez.put(new Character('2'), g2)[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_43 $$ list = s.createCriteria(Baz.class).add(Restrictions.isNotEmpty("fooSet")).list()[ CD ]
Line_49 $$ s = openSession()-->Line_65 $$ s = openSession()[ FD ]
Line_39 $$ s = openSession()-->Line_40 $$ t = s.beginTransaction()[ FD ]
Line_27 $$ Criteria crit = s.createCriteria(Baz.class)-->Line_67 $$ crit = s.createCriteria(Baz.class)[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_35 $$ s.createCriteria(Glarch.class).setLockMode(Criteria.ROOT_ALIAS, LockMode.UPGRADE).list()[ CD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_12 $$ s.save(g1)[ CD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_77 $$ s.delete(s.get(Foo.class, foo1.getKey()))[ CD ]
Line_3 $$ Session s = openSession()-->Line_15 $$ s.save(g2)[ FD ]
Line_59 $$ list = s.createCriteria(Baz.class).createCriteria("fooSet").createCriteria("foo").createCriteria("component.glarch").add(Restrictions.eq("name", "xxx")).list()-->Line_70 $$ list = crit.list()[ FD ]
Line_8 $$ Map topGlarchez = new HashMap()-->Line_9 $$ baz.setTopGlarchez(topGlarchez)[ FD ]
Line_3 $$ Session s = openSession()-->Line_51 $$ crit = s.createCriteria(Baz.class).setLockMode(lockMode)[ FD ]
Line_54 $$ list = crit.list()-->Line_61 $$ list = s.createCriteria(Baz.class).createAlias("fooSet", "foo").createAlias("foo.foo", "foo2").setLockMode("foo2", lockMode).add(Restrictions.isNull("foo2.component.glarch")).createCriteria("foo2.component.glarch").add(Restrictions.eq("name", "xxx")).list()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_63 $$ t.commit()[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_37 $$ t.commit()[ CD ]
Line_61 $$ list = s.createCriteria(Baz.class).createAlias("fooSet", "foo").createAlias("foo.foo", "foo2").setLockMode("foo2", lockMode).add(Restrictions.isNull("foo2.component.glarch")).createCriteria("foo2.component.glarch").add(Restrictions.eq("name", "xxx")).list()-->Line_70 $$ list = crit.list()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_66 $$ t = s.beginTransaction()[ FD ]
Line_39 $$ s = openSession()-->Line_78 $$ s.delete(s.get(Foo.class, foo2.getKey()))[ FD ]
Line_49 $$ s = openSession()-->Line_78 $$ s.delete(s.get(Foo.class, foo2.getKey()))[ FD ]
Line_50 $$ t = s.beginTransaction()-->Line_66 $$ t = s.beginTransaction()[ FD ]
Line_45 $$ list = s.createCriteria(Baz.class).add(Restrictions.sizeEq("fooSet", 2)).list()-->Line_55 $$ assertTrue(list.size() == 4)[ FD ]
Line_49 $$ s = openSession()-->Line_61 $$ list = s.createCriteria(Baz.class).createAlias("fooSet", "foo").createAlias("foo.foo", "foo2").setLockMode("foo2", lockMode).add(Restrictions.isNull("foo2.component.glarch")).createCriteria("foo2.component.glarch").add(Restrictions.eq("name", "xxx")).list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_49 $$ s = openSession()[ FD ]
Line_45 $$ list = s.createCriteria(Baz.class).add(Restrictions.sizeEq("fooSet", 2)).list()-->Line_71 $$ assertTrue(list.size() == 2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_77 $$ s.delete(s.get(Foo.class, foo1.getKey()))[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_13 $$ Glarch g2 = new Glarch()[ CD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_52 $$ crit.createCriteria("topGlarchez").add(Restrictions.gt("x", new Integer(-666)))[ CD ]
Line_27 $$ Criteria crit = s.createCriteria(Baz.class)-->Line_56 $$ baz = (Baz) crit.uniqueResult()[ FD ]
Line_59 $$ list = s.createCriteria(Baz.class).createCriteria("fooSet").createCriteria("foo").createCriteria("component.glarch").add(Restrictions.eq("name", "xxx")).list()-->Line_62 $$ assertTrue(list.size() == 0)[ FD ]
Line_3 $$ Session s = openSession()-->Line_64 $$ s.close()[ FD ]
Line_56 $$ baz = (Baz) crit.uniqueResult()-->Line_72 $$ baz = (Baz) crit.uniqueResult()[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_20 $$ Foo foo2 = new Foo()[ CD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_23 $$ baz.getFooSet().add(foo1)[ CD ]
Line_27 $$ Criteria crit = s.createCriteria(Baz.class)-->Line_72 $$ baz = (Baz) crit.uniqueResult()[ FD ]
Line_2 $$ public void testComplexCriteria() throws Exception -->Line_57 $$ assertTrue(Hibernate.isInitialized(baz.getTopGlarchez()))[ CD ]
Line_3 $$ Session s = openSession()-->Line_38 $$ s.close()[ FD ]
Line_39 $$ s = openSession()-->Line_64 $$ s.close()[ FD ]
Line_32 $$ List list = crit.list()-->Line_61 $$ list = s.createCriteria(Baz.class).createAlias("fooSet", "foo").createAlias("foo.foo", "foo2").setLockMode("foo2", lockMode).add(Restrictions.isNull("foo2.component.glarch")).createCriteria("foo2.component.glarch").add(Restrictions.eq("name", "xxx")).list()[ FD ]
