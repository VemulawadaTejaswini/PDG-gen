Line_12 $$ List<P> subProjectObjects = visitProjects(visitor, filter, project.getSubProjects(), userProjectObject, projectSorter, taskSorter)-->Line_13 $$ List<T> taskObjects = visitTasks(visitor, filter, project, subProjectObjects.size(), userProjectObject, taskSorter)[ FD ]
Line_2 $$ private static <P, T> List<P> visitProjects(Visitor<P, T> visitor, ProjectAndTaskFilter filter, List<ProjectView> sourceProjects, P parentProjectObject, Comparator<ProjectView> projectSorter, Comparator<TaskView> taskSorter) -->Line_3 $$ List<P> projectObjects = new ArrayList<P>()[ CD ]
Line_2 $$ private static <P, T> List<P> visitProjects(Visitor<P, T> visitor, ProjectAndTaskFilter filter, List<ProjectView> sourceProjects, P parentProjectObject, Comparator<ProjectView> projectSorter, Comparator<TaskView> taskSorter) -->Line_6 $$ int index = 0[ CD ]
Line_2 $$ private static <P, T> List<P> visitProjects(Visitor<P, T> visitor, ProjectAndTaskFilter filter, List<ProjectView> sourceProjects, P parentProjectObject, Comparator<ProjectView> projectSorter, Comparator<TaskView> taskSorter) -->Line_14 $$ visitor.completedVisitingProject(userProjectObject, subProjectObjects, taskObjects)[ FD ]
Line_10 $$ P userProjectObject = visitor.visitProject(project, index, parentProjectObject)-->Line_12 $$ List<P> subProjectObjects = visitProjects(visitor, filter, project.getSubProjects(), userProjectObject, projectSorter, taskSorter)[ FD ]
Line_2 $$ private static <P, T> List<P> visitProjects(Visitor<P, T> visitor, ProjectAndTaskFilter filter, List<ProjectView> sourceProjects, P parentProjectObject, Comparator<ProjectView> projectSorter, Comparator<TaskView> taskSorter) -->Line_9 $$ if (filter.doesAllowProject(project)) [ FD ]
Line_5 $$ Iterator<ProjectView> iterator = sourceProjects.iterator()-->Line_8 $$ ProjectView project = iterator.next()[ FD ]
Line_13 $$ List<T> taskObjects = visitTasks(visitor, filter, project, subProjectObjects.size(), userProjectObject, taskSorter)-->Line_14 $$ visitor.completedVisitingProject(userProjectObject, subProjectObjects, taskObjects)[ FD ]
Line_2 $$ private static <P, T> List<P> visitProjects(Visitor<P, T> visitor, ProjectAndTaskFilter filter, List<ProjectView> sourceProjects, P parentProjectObject, Comparator<ProjectView> projectSorter, Comparator<TaskView> taskSorter) -->Line_7 $$ while (iterator.hasNext()) [ CD ]
Line_9 $$ if (filter.doesAllowProject(project)) -->Line_13 $$ List<T> taskObjects = visitTasks(visitor, filter, project, subProjectObjects.size(), userProjectObject, taskSorter)[ CD ]
Line_10 $$ P userProjectObject = visitor.visitProject(project, index, parentProjectObject)-->Line_13 $$ List<T> taskObjects = visitTasks(visitor, filter, project, subProjectObjects.size(), userProjectObject, taskSorter)[ FD ]
Line_8 $$ ProjectView project = iterator.next()-->Line_9 $$ if (filter.doesAllowProject(project)) [ FD ]
Line_9 $$ if (filter.doesAllowProject(project)) -->Line_14 $$ visitor.completedVisitingProject(userProjectObject, subProjectObjects, taskObjects)[ CD ]
Line_7 $$ while (iterator.hasNext()) -->Line_9 $$ if (filter.doesAllowProject(project)) [ CD ]
Line_3 $$ List<P> projectObjects = new ArrayList<P>()-->Line_11 $$ projectObjects.add(userProjectObject)[ FD ]
Line_2 $$ private static <P, T> List<P> visitProjects(Visitor<P, T> visitor, ProjectAndTaskFilter filter, List<ProjectView> sourceProjects, P parentProjectObject, Comparator<ProjectView> projectSorter, Comparator<TaskView> taskSorter) -->Line_18 $$ return projectObjects[ CD ]
Line_5 $$ Iterator<ProjectView> iterator = sourceProjects.iterator()-->Line_7 $$ while (iterator.hasNext()) [ FD ]
Line_2 $$ private static <P, T> List<P> visitProjects(Visitor<P, T> visitor, ProjectAndTaskFilter filter, List<ProjectView> sourceProjects, P parentProjectObject, Comparator<ProjectView> projectSorter, Comparator<TaskView> taskSorter) -->Line_5 $$ Iterator<ProjectView> iterator = sourceProjects.iterator()[ CD ]
Line_8 $$ ProjectView project = iterator.next()-->Line_12 $$ List<P> subProjectObjects = visitProjects(visitor, filter, project.getSubProjects(), userProjectObject, projectSorter, taskSorter)[ FD ]
Line_4 $$ sourceProjects = CollectionUtils.sort(sourceProjects, projectSorter)-->Line_5 $$ Iterator<ProjectView> iterator = sourceProjects.iterator()[ FD ]
Line_8 $$ ProjectView project = iterator.next()-->Line_10 $$ P userProjectObject = visitor.visitProject(project, index, parentProjectObject)[ FD ]
Line_7 $$ while (iterator.hasNext()) -->Line_8 $$ ProjectView project = iterator.next()[ CD ]
Line_2 $$ private static <P, T> List<P> visitProjects(Visitor<P, T> visitor, ProjectAndTaskFilter filter, List<ProjectView> sourceProjects, P parentProjectObject, Comparator<ProjectView> projectSorter, Comparator<TaskView> taskSorter) -->Line_10 $$ P userProjectObject = visitor.visitProject(project, index, parentProjectObject)[ FD ]
Line_10 $$ P userProjectObject = visitor.visitProject(project, index, parentProjectObject)-->Line_14 $$ visitor.completedVisitingProject(userProjectObject, subProjectObjects, taskObjects)[ FD ]
Line_6 $$ int index = 0-->Line_16 $$ index++[ FD ]
Line_2 $$ private static <P, T> List<P> visitProjects(Visitor<P, T> visitor, ProjectAndTaskFilter filter, List<ProjectView> sourceProjects, P parentProjectObject, Comparator<ProjectView> projectSorter, Comparator<TaskView> taskSorter) -->Line_13 $$ List<T> taskObjects = visitTasks(visitor, filter, project, subProjectObjects.size(), userProjectObject, taskSorter)[ FD ]
Line_9 $$ if (filter.doesAllowProject(project)) -->Line_10 $$ P userProjectObject = visitor.visitProject(project, index, parentProjectObject)[ CD ]
Line_7 $$ while (iterator.hasNext()) -->Line_16 $$ index++[ CD ]
Line_2 $$ private static <P, T> List<P> visitProjects(Visitor<P, T> visitor, ProjectAndTaskFilter filter, List<ProjectView> sourceProjects, P parentProjectObject, Comparator<ProjectView> projectSorter, Comparator<TaskView> taskSorter) -->Line_12 $$ List<P> subProjectObjects = visitProjects(visitor, filter, project.getSubProjects(), userProjectObject, projectSorter, taskSorter)[ FD ]
Line_2 $$ private static <P, T> List<P> visitProjects(Visitor<P, T> visitor, ProjectAndTaskFilter filter, List<ProjectView> sourceProjects, P parentProjectObject, Comparator<ProjectView> projectSorter, Comparator<TaskView> taskSorter) -->Line_5 $$ Iterator<ProjectView> iterator = sourceProjects.iterator()[ FD ]
Line_8 $$ ProjectView project = iterator.next()-->Line_13 $$ List<T> taskObjects = visitTasks(visitor, filter, project, subProjectObjects.size(), userProjectObject, taskSorter)[ FD ]
Line_2 $$ private static <P, T> List<P> visitProjects(Visitor<P, T> visitor, ProjectAndTaskFilter filter, List<ProjectView> sourceProjects, P parentProjectObject, Comparator<ProjectView> projectSorter, Comparator<TaskView> taskSorter) -->Line_4 $$ sourceProjects = CollectionUtils.sort(sourceProjects, projectSorter)[ FD ]
Line_6 $$ int index = 0-->Line_10 $$ P userProjectObject = visitor.visitProject(project, index, parentProjectObject)[ FD ]
Line_2 $$ private static <P, T> List<P> visitProjects(Visitor<P, T> visitor, ProjectAndTaskFilter filter, List<ProjectView> sourceProjects, P parentProjectObject, Comparator<ProjectView> projectSorter, Comparator<TaskView> taskSorter) -->Line_4 $$ sourceProjects = CollectionUtils.sort(sourceProjects, projectSorter)[ CD ]
Line_9 $$ if (filter.doesAllowProject(project)) -->Line_11 $$ projectObjects.add(userProjectObject)[ CD ]
Line_10 $$ P userProjectObject = visitor.visitProject(project, index, parentProjectObject)-->Line_11 $$ projectObjects.add(userProjectObject)[ FD ]
Line_12 $$ List<P> subProjectObjects = visitProjects(visitor, filter, project.getSubProjects(), userProjectObject, projectSorter, taskSorter)-->Line_14 $$ visitor.completedVisitingProject(userProjectObject, subProjectObjects, taskObjects)[ FD ]
Line_9 $$ if (filter.doesAllowProject(project)) -->Line_12 $$ List<P> subProjectObjects = visitProjects(visitor, filter, project.getSubProjects(), userProjectObject, projectSorter, taskSorter)[ CD ]
