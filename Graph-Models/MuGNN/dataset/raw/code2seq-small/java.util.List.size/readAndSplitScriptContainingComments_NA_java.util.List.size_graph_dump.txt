Line_4 $$ List<String> statements = new ArrayList<String>()-->Line_14 $$ assertEquals("statement 4 not split correctly", statement4, statements.get(3))[ FD ]
Line_8 $$ String statement3 = "insert into orders(id, order_date, customer_id) values (1, '2008-01-02', 2)"-->Line_13 $$ assertEquals("statement 3 not split correctly", statement3, statements.get(2))[ FD ]
Line_2 $$ public void readAndSplitScriptContainingComments() throws Exception -->Line_14 $$ assertEquals("statement 4 not split correctly", statement4, statements.get(3))[ CD ]
Line_2 $$ public void readAndSplitScriptContainingComments() throws Exception -->Line_12 $$ assertEquals("statement 2 not split correctly", statement2, statements.get(1))[ CD ]
Line_6 $$ String statement1 = "insert into customer (id, name) values (1, 'Rod; Johnson'), (2, 'Adrian Collier')"-->Line_11 $$ assertEquals("statement 1 not split correctly", statement1, statements.get(0))[ FD ]
Line_2 $$ public void readAndSplitScriptContainingComments() throws Exception -->Line_8 $$ String statement3 = "insert into orders(id, order_date, customer_id) values (1, '2008-01-02', 2)"[ CD ]
Line_2 $$ public void readAndSplitScriptContainingComments() throws Exception -->Line_6 $$ String statement1 = "insert into customer (id, name) values (1, 'Rod; Johnson'), (2, 'Adrian Collier')"[ CD ]
Line_4 $$ List<String> statements = new ArrayList<String>()-->Line_5 $$ splitSqlScript(script, ';', statements)[ FD ]
Line_2 $$ public void readAndSplitScriptContainingComments() throws Exception -->Line_13 $$ assertEquals("statement 3 not split correctly", statement3, statements.get(2))[ CD ]
Line_2 $$ public void readAndSplitScriptContainingComments() throws Exception -->Line_3 $$ String script = readScript("test-data-with-comments.sql")[ CD ]
Line_2 $$ public void readAndSplitScriptContainingComments() throws Exception -->Line_9 $$ String statement4 = "INSERT INTO persons( person_id , name) VALUES( 1 , 'Name' )"[ CD ]
Line_9 $$ String statement4 = "INSERT INTO persons( person_id , name) VALUES( 1 , 'Name' )"-->Line_14 $$ assertEquals("statement 4 not split correctly", statement4, statements.get(3))[ FD ]
Line_2 $$ public void readAndSplitScriptContainingComments() throws Exception -->Line_11 $$ assertEquals("statement 1 not split correctly", statement1, statements.get(0))[ CD ]
Line_4 $$ List<String> statements = new ArrayList<String>()-->Line_11 $$ assertEquals("statement 1 not split correctly", statement1, statements.get(0))[ FD ]
Line_4 $$ List<String> statements = new ArrayList<String>()-->Line_10 $$ assertEquals("wrong number of statements", 4, statements.size())[ FD ]
Line_4 $$ List<String> statements = new ArrayList<String>()-->Line_13 $$ assertEquals("statement 3 not split correctly", statement3, statements.get(2))[ FD ]
Line_3 $$ String script = readScript("test-data-with-comments.sql")-->Line_5 $$ splitSqlScript(script, ';', statements)[ FD ]
Line_7 $$ String statement2 = "insert into orders(id, order_date, customer_id) values (1, '2008-01-02', 2)"-->Line_12 $$ assertEquals("statement 2 not split correctly", statement2, statements.get(1))[ FD ]
Line_2 $$ public void readAndSplitScriptContainingComments() throws Exception -->Line_4 $$ List<String> statements = new ArrayList<String>()[ CD ]
Line_4 $$ List<String> statements = new ArrayList<String>()-->Line_12 $$ assertEquals("statement 2 not split correctly", statement2, statements.get(1))[ FD ]
Line_2 $$ public void readAndSplitScriptContainingComments() throws Exception -->Line_7 $$ String statement2 = "insert into orders(id, order_date, customer_id) values (1, '2008-01-02', 2)"[ CD ]
Line_2 $$ public void readAndSplitScriptContainingComments() throws Exception -->Line_10 $$ assertEquals("wrong number of statements", 4, statements.size())[ CD ]
Line_2 $$ public void readAndSplitScriptContainingComments() throws Exception -->Line_5 $$ splitSqlScript(script, ';', statements)[ CD ]
