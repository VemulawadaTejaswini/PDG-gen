Line_38 $$ TextRange textRange = ElementManipulators.getManipulator(curHost).getRangeInElement(curHost)-->Line_39 $$ TextRange.assertProperRange(textRange, injection)[ FD ]
Line_2 $$ private void processInjectionWithContext(BaseInjection injection, boolean settingsAvailable) -->Line_4 $$ if (language == null)[ CD ]
Line_7 $$ final Ref<Boolean> unparsableRef = Ref.create(myUnparsable)-->Line_57 $$ processInjection(language, result, settingsAvailable, unparsableRef.get())[ FD ]
Line_22 $$ String curSuffix = null-->Line_30 $$ curSuffix = (String) next[ FD ]
Line_20 $$ o = objects.get(++i)-->Line_16 $$ if (o instanceof String) [ FD ]
Line_2 $$ private void processInjectionWithContext(BaseInjection injection, boolean settingsAvailable) -->Line_13 $$ for (int i = 0; i < len; i++) [ CD ]
Line_2 $$ private void processInjectionWithContext(BaseInjection injection, boolean settingsAvailable) -->Line_12 $$ final int len = objects.size()[ CD ]
Line_17 $$ curPrefix = (String) o-->Line_40 $$ result.add(Trinity.create(curHost, InjectedLanguage.create(injection.getInjectedLanguageId(), curPrefix, curSuffix, true), textRange))[ FD ]
Line_13 $$ for (int i = 0; i < len; i++) -->Line_29 $$ i++[ FD ]
Line_8 $$ final List<Object> objects = ContextComputationProcessor.collectOperands(injection.getPrefix(), injection.getSuffix(), unparsableRef, myOperands)-->Line_9 $$ if (objects.isEmpty())[ FD ]
Line_2 $$ private void processInjectionWithContext(BaseInjection injection, boolean settingsAvailable) -->Line_3 $$ Language language = InjectorUtils.getLanguage(injection)[ CD ]
Line_37 $$ if (!(curHost instanceof PsiLiteralExpression)) -->Line_39 $$ TextRange.assertProperRange(textRange, injection)[ CD ]
Line_13 $$ for (int i = 0; i < len; i++) -->Line_14 $$ String curPrefix = null[ CD ]
Line_25 $$ curHost = (PsiLanguageInjectionHost) o-->Line_40 $$ result.add(Trinity.create(curHost, InjectedLanguage.create(injection.getInjectedLanguageId(), curPrefix, curSuffix, true), textRange))[ FD ]
Line_11 $$ final List<Trinity<PsiLanguageInjectionHost, InjectedLanguage, TextRange>> result = new ArrayList<Trinity<PsiLanguageInjectionHost, InjectedLanguage, TextRange>>()-->Line_57 $$ processInjection(language, result, settingsAvailable, unparsableRef.get())[ FD ]
Line_2 $$ private void processInjectionWithContext(BaseInjection injection, boolean settingsAvailable) -->Line_11 $$ final List<Trinity<PsiLanguageInjectionHost, InjectedLanguage, TextRange>> result = new ArrayList<Trinity<PsiLanguageInjectionHost, InjectedLanguage, TextRange>>()[ CD ]
Line_25 $$ curHost = (PsiLanguageInjectionHost) o-->Line_38 $$ TextRange textRange = ElementManipulators.getManipulator(curHost).getRangeInElement(curHost)[ FD ]
Line_28 $$ if (next instanceof String) -->Line_29 $$ i++[ CD ]
Line_2 $$ private void processInjectionWithContext(BaseInjection injection, boolean settingsAvailable) -->Line_57 $$ processInjection(language, result, settingsAvailable, unparsableRef.get())[ FD ]
Line_25 $$ curHost = (PsiLanguageInjectionHost) o-->Line_46 $$ result.add(Trinity.create(curHost, InjectedLanguage.create(injection.getInjectedLanguageId(), (separateFiles || j == 0 ? curPrefix : ""), (separateFiles || j == injectedAreaSize - 1 ? curSuffix : ""), true), textRange))[ FD ]
Line_2 $$ private void processInjectionWithContext(BaseInjection injection, boolean settingsAvailable) -->Line_54 $$ processInjection(language, Collections.singletonList(trinity), settingsAvailable, false)[ FD ]
Line_8 $$ final List<Object> objects = ContextComputationProcessor.collectOperands(injection.getPrefix(), injection.getSuffix(), unparsableRef, myOperands)-->Line_12 $$ final int len = objects.size()[ FD ]
Line_26 $$ if (i == len - 2) -->Line_28 $$ if (next instanceof String) [ CD ]
Line_11 $$ final List<Trinity<PsiLanguageInjectionHost, InjectedLanguage, TextRange>> result = new ArrayList<Trinity<PsiLanguageInjectionHost, InjectedLanguage, TextRange>>()-->Line_51 $$ if (!result.isEmpty()) [ FD ]
Line_23 $$ PsiLanguageInjectionHost curHost = null-->Line_38 $$ TextRange textRange = ElementManipulators.getManipulator(curHost).getRangeInElement(curHost)[ FD ]
Line_43 $$ for (int j = 0, injectedAreaSize = injectedArea.size(); j < injectedAreaSize; j++) -->Line_44 $$ TextRange textRange = injectedArea.get(j)[ FD ]
Line_51 $$ if (!result.isEmpty()) -->Line_52 $$ if (separateFiles) [ CD ]
Line_52 $$ if (separateFiles) -->Line_57 $$ processInjection(language, result, settingsAvailable, unparsableRef.get())[ CD ]
Line_44 $$ TextRange textRange = injectedArea.get(j)-->Line_45 $$ TextRange.assertProperRange(textRange, injection)[ FD ]
Line_37 $$ if (!(curHost instanceof PsiLiteralExpression)) -->Line_42 $$ final List<TextRange> injectedArea = injection.getInjectedArea(curHost)[ CD ]
Line_28 $$ if (next instanceof String) -->Line_30 $$ curSuffix = (String) next[ CD ]
Line_42 $$ final List<TextRange> injectedArea = injection.getInjectedArea(curHost)-->Line_43 $$ for (int j = 0, injectedAreaSize = injectedArea.size(); j < injectedAreaSize; j++) [ FD ]
Line_16 $$ if (o instanceof String) -->Line_20 $$ o = objects.get(++i)[ CD ]
Line_2 $$ private void processInjectionWithContext(BaseInjection injection, boolean settingsAvailable) -->Line_46 $$ result.add(Trinity.create(curHost, InjectedLanguage.create(injection.getInjectedLanguageId(), (separateFiles || j == 0 ? curPrefix : ""), (separateFiles || j == injectedAreaSize - 1 ? curSuffix : ""), true), textRange))[ FD ]
Line_3 $$ Language language = InjectorUtils.getLanguage(injection)-->Line_54 $$ processInjection(language, Collections.singletonList(trinity), settingsAvailable, false)[ FD ]
Line_2 $$ private void processInjectionWithContext(BaseInjection injection, boolean settingsAvailable) -->Line_42 $$ final List<TextRange> injectedArea = injection.getInjectedArea(curHost)[ FD ]
Line_38 $$ TextRange textRange = ElementManipulators.getManipulator(curHost).getRangeInElement(curHost)-->Line_46 $$ result.add(Trinity.create(curHost, InjectedLanguage.create(injection.getInjectedLanguageId(), (separateFiles || j == 0 ? curPrefix : ""), (separateFiles || j == injectedAreaSize - 1 ? curSuffix : ""), true), textRange))[ FD ]
Line_24 $$ if (o instanceof PsiLanguageInjectionHost) -->Line_25 $$ curHost = (PsiLanguageInjectionHost) o[ CD ]
Line_44 $$ TextRange textRange = injectedArea.get(j)-->Line_46 $$ result.add(Trinity.create(curHost, InjectedLanguage.create(injection.getInjectedLanguageId(), (separateFiles || j == 0 ? curPrefix : ""), (separateFiles || j == injectedAreaSize - 1 ? curSuffix : ""), true), textRange))[ FD ]
Line_8 $$ final List<Object> objects = ContextComputationProcessor.collectOperands(injection.getPrefix(), injection.getSuffix(), unparsableRef, myOperands)-->Line_27 $$ final Object next = objects.get(i + 1)[ FD ]
Line_13 $$ for (int i = 0; i < len; i++) -->Line_23 $$ PsiLanguageInjectionHost curHost = null[ CD ]
Line_13 $$ for (int i = 0; i < len; i++) -->Line_34 $$ if (curHost == null) [ CD ]
Line_30 $$ curSuffix = (String) next-->Line_40 $$ result.add(Trinity.create(curHost, InjectedLanguage.create(injection.getInjectedLanguageId(), curPrefix, curSuffix, true), textRange))[ FD ]
Line_34 $$ if (curHost == null) -->Line_35 $$ unparsableRef.set(Boolean.TRUE)[ CD ]
Line_13 $$ for (int i = 0; i < len; i++) -->Line_24 $$ if (o instanceof PsiLanguageInjectionHost) [ CD ]
Line_15 $$ Object o = objects.get(i)-->Line_16 $$ if (o instanceof String) [ FD ]
Line_2 $$ private void processInjectionWithContext(BaseInjection injection, boolean settingsAvailable) -->Line_3 $$ Language language = InjectorUtils.getLanguage(injection)[ FD ]
Line_23 $$ PsiLanguageInjectionHost curHost = null-->Line_25 $$ curHost = (PsiLanguageInjectionHost) o[ FD ]
Line_2 $$ private void processInjectionWithContext(BaseInjection injection, boolean settingsAvailable) -->Line_51 $$ if (!result.isEmpty()) [ CD ]
Line_2 $$ private void processInjectionWithContext(BaseInjection injection, boolean settingsAvailable) -->Line_39 $$ TextRange.assertProperRange(textRange, injection)[ FD ]
Line_18 $$ if (i == len - 1)-->Line_19 $$ return[ CD ]
Line_11 $$ final List<Trinity<PsiLanguageInjectionHost, InjectedLanguage, TextRange>> result = new ArrayList<Trinity<PsiLanguageInjectionHost, InjectedLanguage, TextRange>>()-->Line_46 $$ result.add(Trinity.create(curHost, InjectedLanguage.create(injection.getInjectedLanguageId(), (separateFiles || j == 0 ? curPrefix : ""), (separateFiles || j == injectedAreaSize - 1 ? curSuffix : ""), true), textRange))[ FD ]
Line_2 $$ private void processInjectionWithContext(BaseInjection injection, boolean settingsAvailable) -->Line_7 $$ final Ref<Boolean> unparsableRef = Ref.create(myUnparsable)[ CD ]
Line_23 $$ PsiLanguageInjectionHost curHost = null-->Line_46 $$ result.add(Trinity.create(curHost, InjectedLanguage.create(injection.getInjectedLanguageId(), (separateFiles || j == 0 ? curPrefix : ""), (separateFiles || j == injectedAreaSize - 1 ? curSuffix : ""), true), textRange))[ FD ]
Line_24 $$ if (o instanceof PsiLanguageInjectionHost) -->Line_26 $$ if (i == len - 2) [ CD ]
Line_37 $$ if (!(curHost instanceof PsiLiteralExpression)) -->Line_38 $$ TextRange textRange = ElementManipulators.getManipulator(curHost).getRangeInElement(curHost)[ CD ]
Line_42 $$ final List<TextRange> injectedArea = injection.getInjectedArea(curHost)-->Line_44 $$ TextRange textRange = injectedArea.get(j)[ FD ]
Line_11 $$ final List<Trinity<PsiLanguageInjectionHost, InjectedLanguage, TextRange>> result = new ArrayList<Trinity<PsiLanguageInjectionHost, InjectedLanguage, TextRange>>()-->Line_40 $$ result.add(Trinity.create(curHost, InjectedLanguage.create(injection.getInjectedLanguageId(), curPrefix, curSuffix, true), textRange))[ FD ]
Line_26 $$ if (i == len - 2) -->Line_27 $$ final Object next = objects.get(i + 1)[ CD ]
Line_2 $$ private void processInjectionWithContext(BaseInjection injection, boolean settingsAvailable) -->Line_6 $$ final boolean separateFiles = !injection.isSingleFile() && StringUtil.isNotEmpty(injection.getValuePattern())[ CD ]
Line_13 $$ for (int i = 0; i < len; i++) -->Line_22 $$ String curSuffix = null[ CD ]
Line_16 $$ if (o instanceof String) -->Line_17 $$ curPrefix = (String) o[ CD ]
Line_15 $$ Object o = objects.get(i)-->Line_24 $$ if (o instanceof PsiLanguageInjectionHost) [ FD ]
Line_4 $$ if (language == null)-->Line_5 $$ return[ CD ]
Line_43 $$ for (int j = 0, injectedAreaSize = injectedArea.size(); j < injectedAreaSize; j++) -->Line_44 $$ TextRange textRange = injectedArea.get(j)[ CD ]
Line_13 $$ for (int i = 0; i < len; i++) -->Line_15 $$ Object o = objects.get(i)[ CD ]
Line_34 $$ if (curHost == null) -->Line_37 $$ if (!(curHost instanceof PsiLiteralExpression)) [ CD ]
Line_7 $$ final Ref<Boolean> unparsableRef = Ref.create(myUnparsable)-->Line_8 $$ final List<Object> objects = ContextComputationProcessor.collectOperands(injection.getPrefix(), injection.getSuffix(), unparsableRef, myOperands)[ FD ]
Line_2 $$ private void processInjectionWithContext(BaseInjection injection, boolean settingsAvailable) -->Line_9 $$ if (objects.isEmpty())[ CD ]
Line_23 $$ PsiLanguageInjectionHost curHost = null-->Line_34 $$ if (curHost == null) [ FD ]
Line_16 $$ if (o instanceof String) -->Line_18 $$ if (i == len - 1)[ CD ]
Line_2 $$ private void processInjectionWithContext(BaseInjection injection, boolean settingsAvailable) -->Line_6 $$ final boolean separateFiles = !injection.isSingleFile() && StringUtil.isNotEmpty(injection.getValuePattern())[ FD ]
Line_25 $$ curHost = (PsiLanguageInjectionHost) o-->Line_42 $$ final List<TextRange> injectedArea = injection.getInjectedArea(curHost)[ FD ]
Line_2 $$ private void processInjectionWithContext(BaseInjection injection, boolean settingsAvailable) -->Line_8 $$ final List<Object> objects = ContextComputationProcessor.collectOperands(injection.getPrefix(), injection.getSuffix(), unparsableRef, myOperands)[ CD ]
Line_2 $$ private void processInjectionWithContext(BaseInjection injection, boolean settingsAvailable) -->Line_8 $$ final List<Object> objects = ContextComputationProcessor.collectOperands(injection.getPrefix(), injection.getSuffix(), unparsableRef, myOperands)[ FD ]
Line_3 $$ Language language = InjectorUtils.getLanguage(injection)-->Line_4 $$ if (language == null)[ FD ]
Line_22 $$ String curSuffix = null-->Line_40 $$ result.add(Trinity.create(curHost, InjectedLanguage.create(injection.getInjectedLanguageId(), curPrefix, curSuffix, true), textRange))[ FD ]
Line_53 $$ for (Trinity<PsiLanguageInjectionHost, InjectedLanguage, TextRange> trinity : result) -->Line_54 $$ processInjection(language, Collections.singletonList(trinity), settingsAvailable, false)[ FD ]
Line_14 $$ String curPrefix = null-->Line_40 $$ result.add(Trinity.create(curHost, InjectedLanguage.create(injection.getInjectedLanguageId(), curPrefix, curSuffix, true), textRange))[ FD ]
Line_38 $$ TextRange textRange = ElementManipulators.getManipulator(curHost).getRangeInElement(curHost)-->Line_45 $$ TextRange.assertProperRange(textRange, injection)[ FD ]
Line_13 $$ for (int i = 0; i < len; i++) -->Line_16 $$ if (o instanceof String) [ CD ]
Line_2 $$ private void processInjectionWithContext(BaseInjection injection, boolean settingsAvailable) -->Line_40 $$ result.add(Trinity.create(curHost, InjectedLanguage.create(injection.getInjectedLanguageId(), curPrefix, curSuffix, true), textRange))[ FD ]
Line_37 $$ if (!(curHost instanceof PsiLiteralExpression)) -->Line_40 $$ result.add(Trinity.create(curHost, InjectedLanguage.create(injection.getInjectedLanguageId(), curPrefix, curSuffix, true), textRange))[ CD ]
Line_25 $$ curHost = (PsiLanguageInjectionHost) o-->Line_34 $$ if (curHost == null) [ FD ]
Line_3 $$ Language language = InjectorUtils.getLanguage(injection)-->Line_57 $$ processInjection(language, result, settingsAvailable, unparsableRef.get())[ FD ]
Line_43 $$ for (int j = 0, injectedAreaSize = injectedArea.size(); j < injectedAreaSize; j++) -->Line_46 $$ result.add(Trinity.create(curHost, InjectedLanguage.create(injection.getInjectedLanguageId(), (separateFiles || j == 0 ? curPrefix : ""), (separateFiles || j == injectedAreaSize - 1 ? curSuffix : ""), true), textRange))[ CD ]
Line_37 $$ if (!(curHost instanceof PsiLiteralExpression)) -->Line_43 $$ for (int j = 0, injectedAreaSize = injectedArea.size(); j < injectedAreaSize; j++) [ CD ]
Line_43 $$ for (int j = 0, injectedAreaSize = injectedArea.size(); j < injectedAreaSize; j++) -->Line_45 $$ TextRange.assertProperRange(textRange, injection)[ CD ]
Line_13 $$ for (int i = 0; i < len; i++) -->Line_15 $$ Object o = objects.get(i)[ FD ]
Line_23 $$ PsiLanguageInjectionHost curHost = null-->Line_42 $$ final List<TextRange> injectedArea = injection.getInjectedArea(curHost)[ FD ]
Line_12 $$ final int len = objects.size()-->Line_13 $$ for (int i = 0; i < len; i++) [ FD ]
Line_38 $$ TextRange textRange = ElementManipulators.getManipulator(curHost).getRangeInElement(curHost)-->Line_40 $$ result.add(Trinity.create(curHost, InjectedLanguage.create(injection.getInjectedLanguageId(), curPrefix, curSuffix, true), textRange))[ FD ]
Line_15 $$ Object o = objects.get(i)-->Line_20 $$ o = objects.get(++i)[ FD ]
Line_13 $$ for (int i = 0; i < len; i++) -->Line_26 $$ if (i == len - 2) [ FD ]
Line_13 $$ for (int i = 0; i < len; i++) -->Line_20 $$ o = objects.get(++i)[ FD ]
Line_8 $$ final List<Object> objects = ContextComputationProcessor.collectOperands(injection.getPrefix(), injection.getSuffix(), unparsableRef, myOperands)-->Line_20 $$ o = objects.get(++i)[ FD ]
Line_9 $$ if (objects.isEmpty())-->Line_10 $$ return[ CD ]
Line_20 $$ o = objects.get(++i)-->Line_24 $$ if (o instanceof PsiLanguageInjectionHost) [ FD ]
Line_23 $$ PsiLanguageInjectionHost curHost = null-->Line_40 $$ result.add(Trinity.create(curHost, InjectedLanguage.create(injection.getInjectedLanguageId(), curPrefix, curSuffix, true), textRange))[ FD ]
Line_14 $$ String curPrefix = null-->Line_17 $$ curPrefix = (String) o[ FD ]
Line_8 $$ final List<Object> objects = ContextComputationProcessor.collectOperands(injection.getPrefix(), injection.getSuffix(), unparsableRef, myOperands)-->Line_15 $$ Object o = objects.get(i)[ FD ]
Line_7 $$ final Ref<Boolean> unparsableRef = Ref.create(myUnparsable)-->Line_35 $$ unparsableRef.set(Boolean.TRUE)[ FD ]
Line_13 $$ for (int i = 0; i < len; i++) -->Line_18 $$ if (i == len - 1)[ FD ]
Line_2 $$ private void processInjectionWithContext(BaseInjection injection, boolean settingsAvailable) -->Line_45 $$ TextRange.assertProperRange(textRange, injection)[ FD ]
Line_27 $$ final Object next = objects.get(i + 1)-->Line_28 $$ if (next instanceof String) [ FD ]
