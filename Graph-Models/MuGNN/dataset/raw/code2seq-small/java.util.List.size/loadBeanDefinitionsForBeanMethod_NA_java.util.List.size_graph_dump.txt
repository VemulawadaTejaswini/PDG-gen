Line_7 $$ ConfigurationClass configClass = beanMethod.getConfigurationClass()-->Line_31 $$ beanDef.setResource(configClass.getResource())[ FD ]
Line_8 $$ MethodMetadata metadata = beanMethod.getMetadata()-->Line_32 $$ beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))[ FD ]
Line_30 $$ ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)-->Line_32 $$ beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))[ FD ]
Line_53 $$ String destroyMethodName = bean.getString("destroyMethod")-->Line_55 $$ beanDef.setDestroyMethodName(destroyMethodName)[ FD ]
Line_59 $$ AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)-->Line_62 $$ proxyMode = attributes.getEnum("proxyMode")[ FD ]
Line_30 $$ ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)-->Line_61 $$ beanDef.setScope(attributes.getAliasedString("value", Scope.class, configClass.getResource()))[ FD ]
Line_71 $$ beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)-->Line_76 $$ this.registry.registerBeanDefinition(beanName, beanDefToRegister)[ FD ]
Line_62 $$ proxyMode = attributes.getEnum("proxyMode")-->Line_63 $$ if (proxyMode == ScopedProxyMode.DEFAULT) [ FD ]
Line_15 $$ if (configClass.skippedBeanMethods.contains(methodName)) -->Line_16 $$ return[ CD ]
Line_45 $$ Autowire autowire = bean.getEnum("autowire")-->Line_46 $$ if (autowire.isAutowire()) [ FD ]
Line_70 $$ BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)-->Line_71 $$ beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)[ FD ]
Line_63 $$ if (proxyMode == ScopedProxyMode.DEFAULT) -->Line_64 $$ proxyMode = ScopedProxyMode.NO[ CD ]
Line_9 $$ String methodName = metadata.getMethodName()-->Line_40 $$ beanDef.setUniqueFactoryMethodName(methodName)[ FD ]
Line_7 $$ ConfigurationClass configClass = beanMethod.getConfigurationClass()-->Line_32 $$ beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))[ FD ]
Line_21 $$ String beanName = (names.size() > 0 ? names.remove(0) : methodName)-->Line_24 $$ this.registry.registerAlias(beanName, alias)[ FD ]
Line_53 $$ String destroyMethodName = bean.getString("destroyMethod")-->Line_54 $$ if (destroyMethodName != null) [ FD ]
Line_60 $$ if (attributes != null) -->Line_63 $$ if (proxyMode == ScopedProxyMode.DEFAULT) [ CD ]
Line_33 $$ if (metadata.isStatic()) -->Line_36 $$ beanDef.setFactoryMethodName(methodName)[ CD ]
Line_62 $$ proxyMode = attributes.getEnum("proxyMode")-->Line_69 $$ if (proxyMode != ScopedProxyMode.NO) [ FD ]
Line_30 $$ ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)-->Line_31 $$ beanDef.setResource(configClass.getResource())[ FD ]
Line_30 $$ ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)-->Line_40 $$ beanDef.setUniqueFactoryMethodName(methodName)[ FD ]
Line_49 $$ String initMethodName = bean.getString("initMethod")-->Line_51 $$ beanDef.setInitMethodName(initMethodName)[ FD ]
Line_73 $$ if (logger.isDebugEnabled()) -->Line_74 $$ logger.debug(String.format("Registering bean definition for @Bean method %s.%s()", configClass.getMetadata().getClassName(), beanName))[ CD ]
Line_64 $$ proxyMode = ScopedProxyMode.NO-->Line_69 $$ if (proxyMode != ScopedProxyMode.NO) [ FD ]
Line_49 $$ String initMethodName = bean.getString("initMethod")-->Line_50 $$ if (StringUtils.hasText(initMethodName)) [ FD ]
Line_60 $$ if (attributes != null) -->Line_61 $$ beanDef.setScope(attributes.getAliasedString("value", Scope.class, configClass.getResource()))[ CD ]
Line_33 $$ if (metadata.isStatic()) -->Line_40 $$ beanDef.setUniqueFactoryMethodName(methodName)[ CD ]
Line_7 $$ ConfigurationClass configClass = beanMethod.getConfigurationClass()-->Line_61 $$ beanDef.setScope(attributes.getAliasedString("value", Scope.class, configClass.getResource()))[ FD ]
Line_54 $$ if (destroyMethodName != null) -->Line_55 $$ beanDef.setDestroyMethodName(destroyMethodName)[ CD ]
Line_69 $$ if (proxyMode != ScopedProxyMode.NO) -->Line_71 $$ beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)[ CD ]
Line_20 $$ List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))-->Line_21 $$ String beanName = (names.size() > 0 ? names.remove(0) : methodName)[ FD ]
Line_30 $$ ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)-->Line_55 $$ beanDef.setDestroyMethodName(destroyMethodName)[ FD ]
Line_30 $$ ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)-->Line_51 $$ beanDef.setInitMethodName(initMethodName)[ FD ]
Line_45 $$ Autowire autowire = bean.getEnum("autowire")-->Line_47 $$ beanDef.setAutowireMode(autowire.value())[ FD ]
Line_21 $$ String beanName = (names.size() > 0 ? names.remove(0) : methodName)-->Line_76 $$ this.registry.registerBeanDefinition(beanName, beanDefToRegister)[ FD ]
Line_60 $$ if (attributes != null) -->Line_62 $$ proxyMode = attributes.getEnum("proxyMode")[ CD ]
Line_7 $$ ConfigurationClass configClass = beanMethod.getConfigurationClass()-->Line_74 $$ logger.debug(String.format("Registering bean definition for @Bean method %s.%s()", configClass.getMetadata().getClassName(), beanName))[ FD ]
Line_30 $$ ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)-->Line_36 $$ beanDef.setFactoryMethodName(methodName)[ FD ]
Line_59 $$ AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)-->Line_60 $$ if (attributes != null) [ FD ]
Line_9 $$ String methodName = metadata.getMethodName()-->Line_15 $$ if (configClass.skippedBeanMethods.contains(methodName)) [ FD ]
Line_69 $$ if (proxyMode != ScopedProxyMode.NO) -->Line_70 $$ BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)[ CD ]
Line_8 $$ MethodMetadata metadata = beanMethod.getMetadata()-->Line_9 $$ String methodName = metadata.getMethodName()[ FD ]
Line_9 $$ String methodName = metadata.getMethodName()-->Line_12 $$ configClass.skippedBeanMethods.add(methodName)[ FD ]
Line_8 $$ MethodMetadata metadata = beanMethod.getMetadata()-->Line_33 $$ if (metadata.isStatic()) [ FD ]
Line_9 $$ String methodName = metadata.getMethodName()-->Line_36 $$ beanDef.setFactoryMethodName(methodName)[ FD ]
Line_46 $$ if (autowire.isAutowire()) -->Line_47 $$ beanDef.setAutowireMode(autowire.value())[ CD ]
Line_30 $$ ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)-->Line_47 $$ beanDef.setAutowireMode(autowire.value())[ FD ]
Line_30 $$ ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)-->Line_43 $$ beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)[ FD ]
Line_59 $$ AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)-->Line_61 $$ beanDef.setScope(attributes.getAliasedString("value", Scope.class, configClass.getResource()))[ FD ]
Line_62 $$ proxyMode = attributes.getEnum("proxyMode")-->Line_64 $$ proxyMode = ScopedProxyMode.NO[ FD ]
Line_8 $$ MethodMetadata metadata = beanMethod.getMetadata()-->Line_59 $$ AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)[ FD ]
Line_30 $$ ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)-->Line_42 $$ beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)[ FD ]
Line_21 $$ String beanName = (names.size() > 0 ? names.remove(0) : methodName)-->Line_74 $$ logger.debug(String.format("Registering bean definition for @Bean method %s.%s()", configClass.getMetadata().getClassName(), beanName))[ FD ]
Line_8 $$ MethodMetadata metadata = beanMethod.getMetadata()-->Line_44 $$ AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)[ FD ]
Line_30 $$ ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)-->Line_44 $$ AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)[ FD ]
Line_50 $$ if (StringUtils.hasText(initMethodName)) -->Line_51 $$ beanDef.setInitMethodName(initMethodName)[ CD ]
