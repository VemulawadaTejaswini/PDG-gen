Line_47 $$ ScopedProxyMode proxyMode = ScopedProxyMode.NO-->Line_51 $$ proxyMode = attributes.getEnum("proxyMode")[ FD ]
Line_44 $$ if (destroyMethodName != null) -->Line_45 $$ beanDef.setDestroyMethodName(destroyMethodName)[ CD ]
Line_3 $$ ConfigurationClass configClass = beanMethod.getConfigurationClass()-->Line_50 $$ beanDef.setScope(attributes.getAliasedString("value", Scope.class, configClass.getResource()))[ FD ]
Line_22 $$ ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)-->Line_26 $$ beanDef.setBeanClassName(configClass.getMetadata().getClassName())[ FD ]
Line_48 $$ AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)-->Line_51 $$ proxyMode = attributes.getEnum("proxyMode")[ FD ]
Line_25 $$ if (metadata.isStatic()) -->Line_30 $$ beanDef.setUniqueFactoryMethodName(methodName)[ CD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_4 $$ MethodMetadata metadata = beanMethod.getMetadata()[ FD ]
Line_16 $$ for (String alias : names) -->Line_17 $$ this.registry.registerAlias(beanName, alias)[ FD ]
Line_22 $$ ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)-->Line_33 $$ beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)[ FD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_48 $$ AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)[ CD ]
Line_13 $$ AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)-->Line_14 $$ List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))[ FD ]
Line_43 $$ String destroyMethodName = bean.getString("destroyMethod")-->Line_44 $$ if (destroyMethodName != null) [ FD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_23 $$ beanDef.setResource(configClass.getResource())[ CD ]
Line_25 $$ if (metadata.isStatic()) -->Line_27 $$ beanDef.setFactoryMethodName(methodName)[ CD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_56 $$ BeanDefinition beanDefToRegister = beanDef[ CD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_6 $$ if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) [ CD ]
Line_13 $$ AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)-->Line_35 $$ Autowire autowire = bean.getEnum("autowire")[ FD ]
Line_19 $$ if (isOverriddenByExistingDefinition(beanMethod, beanName)) -->Line_20 $$ return[ CD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_22 $$ ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)[ CD ]
Line_22 $$ ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)-->Line_30 $$ beanDef.setUniqueFactoryMethodName(methodName)[ FD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_57 $$ if (proxyMode != ScopedProxyMode.NO) [ CD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_10 $$ if (configClass.skippedBeanMethods.contains(methodName)) [ CD ]
Line_22 $$ ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)-->Line_37 $$ beanDef.setAutowireMode(autowire.value())[ FD ]
Line_15 $$ String beanName = (names.size() > 0 ? names.remove(0) : methodName)-->Line_19 $$ if (isOverriddenByExistingDefinition(beanMethod, beanName)) [ FD ]
Line_35 $$ Autowire autowire = bean.getEnum("autowire")-->Line_37 $$ beanDef.setAutowireMode(autowire.value())[ FD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_49 $$ if (attributes != null) [ CD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_36 $$ if (autowire.isAutowire()) [ CD ]
Line_22 $$ ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)-->Line_32 $$ beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)[ FD ]
Line_22 $$ ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)-->Line_24 $$ beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))[ FD ]
Line_56 $$ BeanDefinition beanDefToRegister = beanDef-->Line_64 $$ this.registry.registerBeanDefinition(beanName, beanDefToRegister)[ FD ]
Line_3 $$ ConfigurationClass configClass = beanMethod.getConfigurationClass()-->Line_23 $$ beanDef.setResource(configClass.getResource())[ FD ]
Line_25 $$ if (metadata.isStatic()) -->Line_26 $$ beanDef.setBeanClassName(configClass.getMetadata().getClassName())[ CD ]
Line_4 $$ MethodMetadata metadata = beanMethod.getMetadata()-->Line_34 $$ AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)[ FD ]
Line_57 $$ if (proxyMode != ScopedProxyMode.NO) -->Line_59 $$ beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)[ CD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_32 $$ beanDef.setAutowireMode(RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)[ CD ]
Line_47 $$ ScopedProxyMode proxyMode = ScopedProxyMode.NO-->Line_53 $$ proxyMode = ScopedProxyMode.NO[ FD ]
Line_22 $$ ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)-->Line_45 $$ beanDef.setDestroyMethodName(destroyMethodName)[ FD ]
Line_48 $$ AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)-->Line_49 $$ if (attributes != null) [ FD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_43 $$ String destroyMethodName = bean.getString("destroyMethod")[ CD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_25 $$ if (metadata.isStatic()) [ CD ]
Line_25 $$ if (metadata.isStatic()) -->Line_29 $$ beanDef.setFactoryBeanName(configClass.getBeanName())[ CD ]
Line_39 $$ String initMethodName = bean.getString("initMethod")-->Line_40 $$ if (StringUtils.hasText(initMethodName)) [ FD ]
Line_51 $$ proxyMode = attributes.getEnum("proxyMode")-->Line_53 $$ proxyMode = ScopedProxyMode.NO[ FD ]
Line_49 $$ if (attributes != null) -->Line_51 $$ proxyMode = attributes.getEnum("proxyMode")[ CD ]
Line_22 $$ ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)-->Line_23 $$ beanDef.setResource(configClass.getResource())[ FD ]
Line_22 $$ ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)-->Line_50 $$ beanDef.setScope(attributes.getAliasedString("value", Scope.class, configClass.getResource()))[ FD ]
Line_57 $$ if (proxyMode != ScopedProxyMode.NO) -->Line_58 $$ BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)[ CD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_3 $$ ConfigurationClass configClass = beanMethod.getConfigurationClass()[ FD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_34 $$ AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)[ CD ]
Line_61 $$ if (logger.isDebugEnabled()) -->Line_62 $$ logger.debug(String.format("Registering bean definition for @Bean method %s.%s()", configClass.getMetadata().getClassName(), beanName))[ CD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_44 $$ if (destroyMethodName != null) [ CD ]
Line_4 $$ MethodMetadata metadata = beanMethod.getMetadata()-->Line_13 $$ AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)[ FD ]
Line_10 $$ if (configClass.skippedBeanMethods.contains(methodName)) -->Line_11 $$ return[ CD ]
Line_58 $$ BeanDefinitionHolder proxyDef = ScopedProxyCreator.createScopedProxy(new BeanDefinitionHolder(beanDef, beanName), this.registry, proxyMode == ScopedProxyMode.TARGET_CLASS)-->Line_59 $$ beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)[ FD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_47 $$ ScopedProxyMode proxyMode = ScopedProxyMode.NO[ CD ]
Line_22 $$ ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)-->Line_27 $$ beanDef.setFactoryMethodName(methodName)[ FD ]
Line_3 $$ ConfigurationClass configClass = beanMethod.getConfigurationClass()-->Line_24 $$ beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))[ FD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_33 $$ beanDef.setAttribute(RequiredAnnotationBeanPostProcessor.SKIP_REQUIRED_CHECK_ATTRIBUTE, Boolean.TRUE)[ CD ]
Line_53 $$ proxyMode = ScopedProxyMode.NO-->Line_57 $$ if (proxyMode != ScopedProxyMode.NO) [ FD ]
Line_35 $$ Autowire autowire = bean.getEnum("autowire")-->Line_36 $$ if (autowire.isAutowire()) [ FD ]
Line_6 $$ if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) -->Line_8 $$ return[ CD ]
Line_14 $$ List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))-->Line_15 $$ String beanName = (names.size() > 0 ? names.remove(0) : methodName)[ FD ]
Line_49 $$ if (attributes != null) -->Line_50 $$ beanDef.setScope(attributes.getAliasedString("value", Scope.class, configClass.getResource()))[ CD ]
Line_48 $$ AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)-->Line_50 $$ beanDef.setScope(attributes.getAliasedString("value", Scope.class, configClass.getResource()))[ FD ]
Line_59 $$ beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)-->Line_64 $$ this.registry.registerBeanDefinition(beanName, beanDefToRegister)[ FD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_64 $$ this.registry.registerBeanDefinition(beanName, beanDefToRegister)[ CD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_35 $$ Autowire autowire = bean.getEnum("autowire")[ CD ]
Line_5 $$ String methodName = metadata.getMethodName()-->Line_30 $$ beanDef.setUniqueFactoryMethodName(methodName)[ FD ]
Line_39 $$ String initMethodName = bean.getString("initMethod")-->Line_41 $$ beanDef.setInitMethodName(initMethodName)[ FD ]
Line_52 $$ if (proxyMode == ScopedProxyMode.DEFAULT) -->Line_53 $$ proxyMode = ScopedProxyMode.NO[ CD ]
Line_3 $$ ConfigurationClass configClass = beanMethod.getConfigurationClass()-->Line_29 $$ beanDef.setFactoryBeanName(configClass.getBeanName())[ FD ]
Line_15 $$ String beanName = (names.size() > 0 ? names.remove(0) : methodName)-->Line_17 $$ this.registry.registerAlias(beanName, alias)[ FD ]
Line_6 $$ if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) -->Line_7 $$ configClass.skippedBeanMethods.add(methodName)[ CD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_24 $$ beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))[ CD ]
Line_56 $$ BeanDefinition beanDefToRegister = beanDef-->Line_59 $$ beanDefToRegister = new ConfigurationClassBeanDefinition((RootBeanDefinition) proxyDef.getBeanDefinition(), configClass, metadata)[ FD ]
Line_13 $$ AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)-->Line_39 $$ String initMethodName = bean.getString("initMethod")[ FD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_61 $$ if (logger.isDebugEnabled()) [ CD ]
Line_15 $$ String beanName = (names.size() > 0 ? names.remove(0) : methodName)-->Line_62 $$ logger.debug(String.format("Registering bean definition for @Bean method %s.%s()", configClass.getMetadata().getClassName(), beanName))[ FD ]
Line_5 $$ String methodName = metadata.getMethodName()-->Line_7 $$ configClass.skippedBeanMethods.add(methodName)[ FD ]
Line_40 $$ if (StringUtils.hasText(initMethodName)) -->Line_41 $$ beanDef.setInitMethodName(initMethodName)[ CD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_19 $$ if (isOverriddenByExistingDefinition(beanMethod, beanName)) [ CD ]
Line_51 $$ proxyMode = attributes.getEnum("proxyMode")-->Line_52 $$ if (proxyMode == ScopedProxyMode.DEFAULT) [ FD ]
Line_4 $$ MethodMetadata metadata = beanMethod.getMetadata()-->Line_6 $$ if (this.conditionEvaluator.shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN)) [ FD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_3 $$ ConfigurationClass configClass = beanMethod.getConfigurationClass()[ CD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_19 $$ if (isOverriddenByExistingDefinition(beanMethod, beanName)) [ FD ]
Line_22 $$ ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)-->Line_29 $$ beanDef.setFactoryBeanName(configClass.getBeanName())[ FD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_13 $$ AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)[ CD ]
Line_47 $$ ScopedProxyMode proxyMode = ScopedProxyMode.NO-->Line_57 $$ if (proxyMode != ScopedProxyMode.NO) [ FD ]
Line_5 $$ String methodName = metadata.getMethodName()-->Line_10 $$ if (configClass.skippedBeanMethods.contains(methodName)) [ FD ]
Line_47 $$ ScopedProxyMode proxyMode = ScopedProxyMode.NO-->Line_52 $$ if (proxyMode == ScopedProxyMode.DEFAULT) [ FD ]
Line_22 $$ ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)-->Line_34 $$ AnnotationConfigUtils.processCommonDefinitionAnnotations(beanDef, metadata)[ FD ]
Line_36 $$ if (autowire.isAutowire()) -->Line_37 $$ beanDef.setAutowireMode(autowire.value())[ CD ]
Line_49 $$ if (attributes != null) -->Line_52 $$ if (proxyMode == ScopedProxyMode.DEFAULT) [ CD ]
Line_13 $$ AnnotationAttributes bean = AnnotationConfigUtils.attributesFor(metadata, Bean.class)-->Line_43 $$ String destroyMethodName = bean.getString("destroyMethod")[ FD ]
Line_22 $$ ConfigurationClassBeanDefinition beanDef = new ConfigurationClassBeanDefinition(configClass, metadata)-->Line_41 $$ beanDef.setInitMethodName(initMethodName)[ FD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_40 $$ if (StringUtils.hasText(initMethodName)) [ CD ]
Line_4 $$ MethodMetadata metadata = beanMethod.getMetadata()-->Line_48 $$ AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(metadata, Scope.class)[ FD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_15 $$ String beanName = (names.size() > 0 ? names.remove(0) : methodName)[ CD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_5 $$ String methodName = metadata.getMethodName()[ CD ]
Line_4 $$ MethodMetadata metadata = beanMethod.getMetadata()-->Line_5 $$ String methodName = metadata.getMethodName()[ FD ]
Line_15 $$ String beanName = (names.size() > 0 ? names.remove(0) : methodName)-->Line_64 $$ this.registry.registerBeanDefinition(beanName, beanDefToRegister)[ FD ]
Line_3 $$ ConfigurationClass configClass = beanMethod.getConfigurationClass()-->Line_26 $$ beanDef.setBeanClassName(configClass.getMetadata().getClassName())[ FD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_14 $$ List<String> names = new ArrayList<String>(Arrays.asList(bean.getStringArray("name")))[ CD ]
Line_5 $$ String methodName = metadata.getMethodName()-->Line_27 $$ beanDef.setFactoryMethodName(methodName)[ FD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_39 $$ String initMethodName = bean.getString("initMethod")[ CD ]
Line_4 $$ MethodMetadata metadata = beanMethod.getMetadata()-->Line_25 $$ if (metadata.isStatic()) [ FD ]
Line_4 $$ MethodMetadata metadata = beanMethod.getMetadata()-->Line_24 $$ beanDef.setSource(this.sourceExtractor.extractSource(metadata, configClass.getResource()))[ FD ]
Line_43 $$ String destroyMethodName = bean.getString("destroyMethod")-->Line_45 $$ beanDef.setDestroyMethodName(destroyMethodName)[ FD ]
Line_51 $$ proxyMode = attributes.getEnum("proxyMode")-->Line_57 $$ if (proxyMode != ScopedProxyMode.NO) [ FD ]
Line_3 $$ ConfigurationClass configClass = beanMethod.getConfigurationClass()-->Line_62 $$ logger.debug(String.format("Registering bean definition for @Bean method %s.%s()", configClass.getMetadata().getClassName(), beanName))[ FD ]
Line_2 $$ private void loadBeanDefinitionsForBeanMethod(BeanMethod beanMethod) -->Line_4 $$ MethodMetadata metadata = beanMethod.getMetadata()[ CD ]
