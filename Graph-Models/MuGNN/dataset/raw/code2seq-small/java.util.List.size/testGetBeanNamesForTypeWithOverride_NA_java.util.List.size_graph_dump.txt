Line_2 $$ public void testGetBeanNamesForTypeWithOverride() throws Exception -->Line_7 $$ assertTrue(names.contains("testFactory1"))[ CD ]
Line_3 $$ List<String> names = Arrays.asList(BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.listableBeanFactory, ITestBean.class))-->Line_8 $$ assertTrue(names.contains("testFactory2"))[ FD ]
Line_2 $$ public void testGetBeanNamesForTypeWithOverride() throws Exception -->Line_3 $$ List<String> names = Arrays.asList(BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.listableBeanFactory, ITestBean.class))[ CD ]
Line_2 $$ public void testGetBeanNamesForTypeWithOverride() throws Exception -->Line_5 $$ assertTrue(names.contains("test"))[ CD ]
Line_2 $$ public void testGetBeanNamesForTypeWithOverride() throws Exception -->Line_8 $$ assertTrue(names.contains("testFactory2"))[ CD ]
Line_3 $$ List<String> names = Arrays.asList(BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.listableBeanFactory, ITestBean.class))-->Line_5 $$ assertTrue(names.contains("test"))[ FD ]
Line_3 $$ List<String> names = Arrays.asList(BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.listableBeanFactory, ITestBean.class))-->Line_4 $$ assertEquals(4, names.size())[ FD ]
Line_2 $$ public void testGetBeanNamesForTypeWithOverride() throws Exception -->Line_6 $$ assertTrue(names.contains("test3"))[ CD ]
Line_3 $$ List<String> names = Arrays.asList(BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.listableBeanFactory, ITestBean.class))-->Line_6 $$ assertTrue(names.contains("test3"))[ FD ]
Line_3 $$ List<String> names = Arrays.asList(BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.listableBeanFactory, ITestBean.class))-->Line_7 $$ assertTrue(names.contains("testFactory1"))[ FD ]
Line_2 $$ public void testGetBeanNamesForTypeWithOverride() throws Exception -->Line_4 $$ assertEquals(4, names.size())[ CD ]
