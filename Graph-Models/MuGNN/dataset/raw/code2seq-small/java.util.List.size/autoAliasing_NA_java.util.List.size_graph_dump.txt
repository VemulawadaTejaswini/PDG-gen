Line_52 $$ Map drs = getListableBeanFactory().getBeansOfType(DummyReferencer.class, false, false)-->Line_55 $$ assertTrue(drs.containsKey(DummyReferencer.class.getName() + "#1"))[ FD ]
Line_7 $$ List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())-->Line_15 $$ assertTrue(beanNames.contains("aliased"))[ FD ]
Line_11 $$ List tb1Aliases = Arrays.asList(getBeanFactory().getAliases("aliased"))-->Line_13 $$ assertTrue(tb1Aliases.contains("myalias"))[ FD ]
Line_7 $$ List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())-->Line_49 $$ assertFalse(beanNames.contains("aliasWithoutId3"))[ FD ]
Line_27 $$ List tb2Aliases = Arrays.asList(getBeanFactory().getAliases("multiAliased"))-->Line_29 $$ assertTrue(tb2Aliases.contains("alias1"))[ FD ]
Line_27 $$ List tb2Aliases = Arrays.asList(getBeanFactory().getAliases("multiAliased"))-->Line_30 $$ assertTrue(tb2Aliases.contains("alias2"))[ FD ]
Line_43 $$ List tb3Aliases = Arrays.asList(getBeanFactory().getAliases("aliasWithoutId1"))-->Line_45 $$ assertTrue(tb3Aliases.contains("aliasWithoutId2"))[ FD ]
Line_7 $$ List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())-->Line_47 $$ assertTrue(beanNames.contains("aliasWithoutId1"))[ FD ]
Line_43 $$ List tb3Aliases = Arrays.asList(getBeanFactory().getAliases("aliasWithoutId1"))-->Line_46 $$ assertTrue(tb3Aliases.contains("aliasWithoutId3"))[ FD ]
Line_52 $$ Map drs = getListableBeanFactory().getBeansOfType(DummyReferencer.class, false, false)-->Line_54 $$ assertTrue(drs.containsKey(DummyReferencer.class.getName() + "#0"))[ FD ]
Line_43 $$ List tb3Aliases = Arrays.asList(getBeanFactory().getAliases("aliasWithoutId1"))-->Line_44 $$ assertEquals(2, tb3Aliases.size())[ FD ]
Line_11 $$ List tb1Aliases = Arrays.asList(getBeanFactory().getAliases("aliased"))-->Line_12 $$ assertEquals(2, tb1Aliases.size())[ FD ]
Line_52 $$ Map drs = getListableBeanFactory().getBeansOfType(DummyReferencer.class, false, false)-->Line_53 $$ assertEquals(5, drs.size())[ FD ]
Line_7 $$ List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())-->Line_17 $$ assertFalse(beanNames.contains("youralias"))[ FD ]
Line_7 $$ List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())-->Line_35 $$ assertFalse(beanNames.contains("alias2"))[ FD ]
Line_50 $$ TestBean tb4 = (TestBean) getBeanFactory().getBean(TestBean.class.getName() + "#0")-->Line_51 $$ assertEquals(null, tb4.getName())[ FD ]
Line_7 $$ List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())-->Line_16 $$ assertFalse(beanNames.contains("myalias"))[ FD ]
Line_7 $$ List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())-->Line_33 $$ assertTrue(beanNames.contains("multiAliased"))[ FD ]
Line_27 $$ List tb2Aliases = Arrays.asList(getBeanFactory().getAliases("multiAliased"))-->Line_32 $$ assertTrue(tb2Aliases.contains("alias4"))[ FD ]
Line_7 $$ List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())-->Line_48 $$ assertFalse(beanNames.contains("aliasWithoutId2"))[ FD ]
Line_27 $$ List tb2Aliases = Arrays.asList(getBeanFactory().getAliases("multiAliased"))-->Line_28 $$ assertEquals(4, tb2Aliases.size())[ FD ]
Line_11 $$ List tb1Aliases = Arrays.asList(getBeanFactory().getAliases("aliased"))-->Line_14 $$ assertTrue(tb1Aliases.contains("youralias"))[ FD ]
Line_52 $$ Map drs = getListableBeanFactory().getBeansOfType(DummyReferencer.class, false, false)-->Line_56 $$ assertTrue(drs.containsKey(DummyReferencer.class.getName() + "#2"))[ FD ]
Line_7 $$ List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())-->Line_37 $$ assertFalse(beanNames.contains("alias4"))[ FD ]
Line_7 $$ List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())-->Line_34 $$ assertFalse(beanNames.contains("alias1"))[ FD ]
Line_27 $$ List tb2Aliases = Arrays.asList(getBeanFactory().getAliases("multiAliased"))-->Line_31 $$ assertTrue(tb2Aliases.contains("alias3"))[ FD ]
Line_7 $$ List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())-->Line_36 $$ assertFalse(beanNames.contains("alias3"))[ FD ]
