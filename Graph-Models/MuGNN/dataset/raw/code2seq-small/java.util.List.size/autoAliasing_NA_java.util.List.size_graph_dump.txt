Line_48 $$ Map drs = getListableBeanFactory().getBeansOfType(DummyReferencer.class, false, false)-->Line_52 $$ assertTrue(drs.containsKey(DummyReferencer.class.getName() + "#2"))[ FD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_40 $$ assertEquals(2, tb3Aliases.size())[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_45 $$ assertFalse(beanNames.contains("aliasWithoutId3"))[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_41 $$ assertTrue(tb3Aliases.contains("aliasWithoutId2"))[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_49 $$ assertEquals(5, drs.size())[ CD ]
Line_3 $$ List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())-->Line_11 $$ assertTrue(beanNames.contains("aliased"))[ FD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_26 $$ assertTrue(tb2Aliases.contains("alias2"))[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_51 $$ assertTrue(drs.containsKey(DummyReferencer.class.getName() + "#1"))[ CD ]
Line_7 $$ List tb1Aliases = Arrays.asList(getBeanFactory().getAliases("aliased"))-->Line_8 $$ assertEquals(2, tb1Aliases.size())[ FD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_37 $$ assertTrue(tb3 == alias4)[ CD ]
Line_3 $$ List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())-->Line_43 $$ assertTrue(beanNames.contains("aliasWithoutId1"))[ FD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_34 $$ TestBean tb3 = (TestBean) getBeanFactory().getBean("aliasWithoutId1")[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_50 $$ assertTrue(drs.containsKey(DummyReferencer.class.getName() + "#0"))[ CD ]
Line_23 $$ List tb2Aliases = Arrays.asList(getBeanFactory().getAliases("multiAliased"))-->Line_26 $$ assertTrue(tb2Aliases.contains("alias2"))[ FD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_48 $$ Map drs = getListableBeanFactory().getBeansOfType(DummyReferencer.class, false, false)[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_14 $$ TestBean tb2 = (TestBean) getBeanFactory().getBean("multiAliased")[ CD ]
Line_23 $$ List tb2Aliases = Arrays.asList(getBeanFactory().getAliases("multiAliased"))-->Line_24 $$ assertEquals(4, tb2Aliases.size())[ FD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_7 $$ List tb1Aliases = Arrays.asList(getBeanFactory().getAliases("aliased"))[ CD ]
Line_3 $$ List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())-->Line_30 $$ assertFalse(beanNames.contains("alias1"))[ FD ]
Line_39 $$ List tb3Aliases = Arrays.asList(getBeanFactory().getAliases("aliasWithoutId1"))-->Line_42 $$ assertTrue(tb3Aliases.contains("aliasWithoutId3"))[ FD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_38 $$ assertTrue(tb3 == alias5)[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_28 $$ assertTrue(tb2Aliases.contains("alias4"))[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_39 $$ List tb3Aliases = Arrays.asList(getBeanFactory().getAliases("aliasWithoutId1"))[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_20 $$ assertTrue(tb2 == alias3)[ CD ]
Line_39 $$ List tb3Aliases = Arrays.asList(getBeanFactory().getAliases("aliasWithoutId1"))-->Line_41 $$ assertTrue(tb3Aliases.contains("aliasWithoutId2"))[ FD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_19 $$ assertTrue(tb2 == alias2)[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_21 $$ assertTrue(tb2 == alias3a)[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_33 $$ assertFalse(beanNames.contains("alias4"))[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_46 $$ TestBean tb4 = (TestBean) getBeanFactory().getBean(TestBean.class.getName() + "#0")[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_17 $$ TestBean alias3a = (TestBean) getBeanFactory().getBean("alias3")[ CD ]
Line_48 $$ Map drs = getListableBeanFactory().getBeansOfType(DummyReferencer.class, false, false)-->Line_49 $$ assertEquals(5, drs.size())[ FD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_35 $$ TestBean alias4 = (TestBean) getBeanFactory().getBean("aliasWithoutId2")[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_18 $$ TestBean alias3b = (TestBean) getBeanFactory().getBean("alias4")[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_4 $$ TestBean tb1 = (TestBean) getBeanFactory().getBean("aliased")[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_8 $$ assertEquals(2, tb1Aliases.size())[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_12 $$ assertFalse(beanNames.contains("myalias"))[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_16 $$ TestBean alias3 = (TestBean) getBeanFactory().getBean("alias2")[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_6 $$ assertTrue(tb1 == alias1)[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_32 $$ assertFalse(beanNames.contains("alias3"))[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_30 $$ assertFalse(beanNames.contains("alias1"))[ CD ]
Line_3 $$ List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())-->Line_13 $$ assertFalse(beanNames.contains("youralias"))[ FD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_23 $$ List tb2Aliases = Arrays.asList(getBeanFactory().getAliases("multiAliased"))[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_47 $$ assertEquals(null, tb4.getName())[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_22 $$ assertTrue(tb2 == alias3b)[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_15 $$ TestBean alias2 = (TestBean) getBeanFactory().getBean("alias1")[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_24 $$ assertEquals(4, tb2Aliases.size())[ CD ]
Line_7 $$ List tb1Aliases = Arrays.asList(getBeanFactory().getAliases("aliased"))-->Line_10 $$ assertTrue(tb1Aliases.contains("youralias"))[ FD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_29 $$ assertTrue(beanNames.contains("multiAliased"))[ CD ]
Line_3 $$ List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())-->Line_29 $$ assertTrue(beanNames.contains("multiAliased"))[ FD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_31 $$ assertFalse(beanNames.contains("alias2"))[ CD ]
Line_48 $$ Map drs = getListableBeanFactory().getBeansOfType(DummyReferencer.class, false, false)-->Line_51 $$ assertTrue(drs.containsKey(DummyReferencer.class.getName() + "#1"))[ FD ]
Line_39 $$ List tb3Aliases = Arrays.asList(getBeanFactory().getAliases("aliasWithoutId1"))-->Line_40 $$ assertEquals(2, tb3Aliases.size())[ FD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_44 $$ assertFalse(beanNames.contains("aliasWithoutId2"))[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_52 $$ assertTrue(drs.containsKey(DummyReferencer.class.getName() + "#2"))[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_25 $$ assertTrue(tb2Aliases.contains("alias1"))[ CD ]
Line_23 $$ List tb2Aliases = Arrays.asList(getBeanFactory().getAliases("multiAliased"))-->Line_25 $$ assertTrue(tb2Aliases.contains("alias1"))[ FD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_10 $$ assertTrue(tb1Aliases.contains("youralias"))[ CD ]
Line_46 $$ TestBean tb4 = (TestBean) getBeanFactory().getBean(TestBean.class.getName() + "#0")-->Line_47 $$ assertEquals(null, tb4.getName())[ FD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_36 $$ TestBean alias5 = (TestBean) getBeanFactory().getBean("aliasWithoutId3")[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_9 $$ assertTrue(tb1Aliases.contains("myalias"))[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_13 $$ assertFalse(beanNames.contains("youralias"))[ CD ]
Line_48 $$ Map drs = getListableBeanFactory().getBeansOfType(DummyReferencer.class, false, false)-->Line_50 $$ assertTrue(drs.containsKey(DummyReferencer.class.getName() + "#0"))[ FD ]
Line_3 $$ List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())-->Line_44 $$ assertFalse(beanNames.contains("aliasWithoutId2"))[ FD ]
Line_3 $$ List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())-->Line_31 $$ assertFalse(beanNames.contains("alias2"))[ FD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_42 $$ assertTrue(tb3Aliases.contains("aliasWithoutId3"))[ CD ]
Line_7 $$ List tb1Aliases = Arrays.asList(getBeanFactory().getAliases("aliased"))-->Line_9 $$ assertTrue(tb1Aliases.contains("myalias"))[ FD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_5 $$ TestBean alias1 = (TestBean) getBeanFactory().getBean("myalias")[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_3 $$ List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())[ CD ]
Line_23 $$ List tb2Aliases = Arrays.asList(getBeanFactory().getAliases("multiAliased"))-->Line_28 $$ assertTrue(tb2Aliases.contains("alias4"))[ FD ]
Line_3 $$ List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())-->Line_45 $$ assertFalse(beanNames.contains("aliasWithoutId3"))[ FD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_43 $$ assertTrue(beanNames.contains("aliasWithoutId1"))[ CD ]
Line_3 $$ List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())-->Line_32 $$ assertFalse(beanNames.contains("alias3"))[ FD ]
Line_3 $$ List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())-->Line_12 $$ assertFalse(beanNames.contains("myalias"))[ FD ]
Line_23 $$ List tb2Aliases = Arrays.asList(getBeanFactory().getAliases("multiAliased"))-->Line_27 $$ assertTrue(tb2Aliases.contains("alias3"))[ FD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_27 $$ assertTrue(tb2Aliases.contains("alias3"))[ CD ]
Line_2 $$ public void autoAliasing() throws Exception -->Line_11 $$ assertTrue(beanNames.contains("aliased"))[ CD ]
Line_3 $$ List beanNames = Arrays.asList(getListableBeanFactory().getBeanDefinitionNames())-->Line_33 $$ assertFalse(beanNames.contains("alias4"))[ FD ]
