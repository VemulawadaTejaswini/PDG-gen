Line_5 $$ Iterator<T> iterator = objectsToMove.iterator()-->Line_7 $$ T objectToMove = iterator.next()[ FD ]
Line_2 $$ public static <T> void moveBefore(List<T> sourceList, List<T> objectsToMove) -->Line_3 $$ sortMoveListByRelativeOrder(sourceList, objectsToMove)[ CD ]
Line_2 $$ public static <T> void moveBefore(List<T> sourceList, List<T> objectsToMove) -->Line_3 $$ sortMoveListByRelativeOrder(sourceList, objectsToMove)[ FD ]
Line_8 $$ int currentPosition = sourceList.indexOf(objectToMove)-->Line_9 $$ if (currentPosition > 0) [ FD ]
Line_10 $$ T occupyingObject = sourceList.get(currentPosition - 1)-->Line_11 $$ if (currentPosition < sourceList.size() && !triedToMove.contains(occupyingObject)) [ FD ]
Line_7 $$ T objectToMove = iterator.next()-->Line_8 $$ int currentPosition = sourceList.indexOf(objectToMove)[ FD ]
Line_4 $$ List<T> triedToMove = new ArrayList<T>()-->Line_15 $$ triedToMove.add(objectToMove)[ FD ]
Line_2 $$ public static <T> void moveBefore(List<T> sourceList, List<T> objectsToMove) -->Line_4 $$ List<T> triedToMove = new ArrayList<T>()[ CD ]
Line_2 $$ public static <T> void moveBefore(List<T> sourceList, List<T> objectsToMove) -->Line_5 $$ Iterator<T> iterator = objectsToMove.iterator()[ FD ]
Line_6 $$ while (iterator.hasNext()) -->Line_7 $$ T objectToMove = iterator.next()[ CD ]
Line_9 $$ if (currentPosition > 0) -->Line_10 $$ T occupyingObject = sourceList.get(currentPosition - 1)[ CD ]
Line_6 $$ while (iterator.hasNext()) -->Line_9 $$ if (currentPosition > 0) [ CD ]
Line_5 $$ Iterator<T> iterator = objectsToMove.iterator()-->Line_6 $$ while (iterator.hasNext()) [ FD ]
Line_7 $$ T objectToMove = iterator.next()-->Line_15 $$ triedToMove.add(objectToMove)[ FD ]
Line_2 $$ public static <T> void moveBefore(List<T> sourceList, List<T> objectsToMove) -->Line_5 $$ Iterator<T> iterator = objectsToMove.iterator()[ CD ]
Line_2 $$ public static <T> void moveBefore(List<T> sourceList, List<T> objectsToMove) -->Line_8 $$ int currentPosition = sourceList.indexOf(objectToMove)[ FD ]
Line_4 $$ List<T> triedToMove = new ArrayList<T>()-->Line_11 $$ if (currentPosition < sourceList.size() && !triedToMove.contains(occupyingObject)) [ FD ]
Line_9 $$ if (currentPosition > 0) -->Line_11 $$ if (currentPosition < sourceList.size() && !triedToMove.contains(occupyingObject)) [ CD ]
Line_11 $$ if (currentPosition < sourceList.size() && !triedToMove.contains(occupyingObject)) -->Line_12 $$ moveBefore(sourceList, objectToMove)[ CD ]
Line_6 $$ while (iterator.hasNext()) -->Line_8 $$ int currentPosition = sourceList.indexOf(objectToMove)[ CD ]
Line_2 $$ public static <T> void moveBefore(List<T> sourceList, List<T> objectsToMove) -->Line_10 $$ T occupyingObject = sourceList.get(currentPosition - 1)[ FD ]
Line_2 $$ public static <T> void moveBefore(List<T> sourceList, List<T> objectsToMove) -->Line_12 $$ moveBefore(sourceList, objectToMove)[ FD ]
Line_7 $$ T objectToMove = iterator.next()-->Line_12 $$ moveBefore(sourceList, objectToMove)[ FD ]
Line_2 $$ public static <T> void moveBefore(List<T> sourceList, List<T> objectsToMove) -->Line_11 $$ if (currentPosition < sourceList.size() && !triedToMove.contains(occupyingObject)) [ FD ]
Line_6 $$ while (iterator.hasNext()) -->Line_15 $$ triedToMove.add(objectToMove)[ CD ]
Line_2 $$ public static <T> void moveBefore(List<T> sourceList, List<T> objectsToMove) -->Line_6 $$ while (iterator.hasNext()) [ CD ]
