Line_2 $$ private boolean processAbbreviations(final String pattern, Processor<MatchedValue> consumer, DataContext context) -->Line_4 $$ if (actions.isEmpty())[ CD ]
Line_8 $$ AnAction action = myActionManager.getAction(actionId)-->Line_9 $$ wrappers.add(new ActionWrapper(action, myModel.myActionGroups.get(action), MatchMode.NAME, context))[ FD ]
Line_3 $$ List<String> actions = AbbreviationManager.getInstance().findActions(pattern)-->Line_4 $$ if (actions.isEmpty())[ FD ]
Line_2 $$ private boolean processAbbreviations(final String pattern, Processor<MatchedValue> consumer, DataContext context) -->Line_3 $$ List<String> actions = AbbreviationManager.getInstance().findActions(pattern)[ FD ]
Line_7 $$ for (String actionId : actions) -->Line_8 $$ AnAction action = myActionManager.getAction(actionId)[ FD ]
Line_6 $$ List<ActionWrapper> wrappers = ContainerUtil.newArrayListWithCapacity(actions.size())-->Line_11 $$ return ContainerUtil.process(ContainerUtil.map(wrappers, new Function<ActionWrapper, MatchedValue>() [ FD ]
Line_11 $$ return ContainerUtil.process(ContainerUtil.map(wrappers, new Function<ActionWrapper, MatchedValue>() -->Line_15 $$ return new MatchedValue(w, pattern) [ CD ]
Line_4 $$ if (actions.isEmpty())-->Line_5 $$ return true[ CD ]
Line_2 $$ private boolean processAbbreviations(final String pattern, Processor<MatchedValue> consumer, DataContext context) -->Line_6 $$ List<ActionWrapper> wrappers = ContainerUtil.newArrayListWithCapacity(actions.size())[ CD ]
Line_6 $$ List<ActionWrapper> wrappers = ContainerUtil.newArrayListWithCapacity(actions.size())-->Line_9 $$ wrappers.add(new ActionWrapper(action, myModel.myActionGroups.get(action), MatchMode.NAME, context))[ FD ]
Line_15 $$ return new MatchedValue(w, pattern) -->Line_20 $$ return pattern[ CD ]
Line_3 $$ List<String> actions = AbbreviationManager.getInstance().findActions(pattern)-->Line_6 $$ List<ActionWrapper> wrappers = ContainerUtil.newArrayListWithCapacity(actions.size())[ FD ]
Line_2 $$ private boolean processAbbreviations(final String pattern, Processor<MatchedValue> consumer, DataContext context) -->Line_11 $$ return ContainerUtil.process(ContainerUtil.map(wrappers, new Function<ActionWrapper, MatchedValue>() [ FD ]
Line_2 $$ private boolean processAbbreviations(final String pattern, Processor<MatchedValue> consumer, DataContext context) -->Line_3 $$ List<String> actions = AbbreviationManager.getInstance().findActions(pattern)[ CD ]
Line_2 $$ private boolean processAbbreviations(final String pattern, Processor<MatchedValue> consumer, DataContext context) -->Line_11 $$ return ContainerUtil.process(ContainerUtil.map(wrappers, new Function<ActionWrapper, MatchedValue>() [ CD ]
