Line_2 $$ private void reportInvalidRoots(ProjectStructureProblemsHolder problemsHolder, LibraryEx library, final OrderRootType type, String rootName, final ProjectStructureProblemType problemType) -->Line_8 $$ ProjectStructureProblemDescription.ProblemLevel level = library.getTable().getTableLevel().equals(LibraryTablesRegistrar.PROJECT_LEVEL) ? ProjectStructureProblemDescription.ProblemLevel.PROJECT : ProjectStructureProblemDescription.ProblemLevel.GLOBAL[ FD ]
Line_2 $$ private void reportInvalidRoots(ProjectStructureProblemsHolder problemsHolder, LibraryEx library, final OrderRootType type, String rootName, final ProjectStructureProblemType problemType) -->Line_9 $$ problemsHolder.registerProblem(new ProjectStructureProblemDescription(message, description, place, problemType, level, Collections.singletonList(new RemoveInvalidRootsQuickFix(library, type, invalidUrls)), true))[ FD ]
Line_4 $$ if (!invalidUrls.isEmpty()) -->Line_7 $$ final String message = ProjectBundle.message("project.roots.error.message.invalid.roots", rootName, invalidUrls.size())[ CD ]
Line_3 $$ final List<String> invalidUrls = library.getInvalidRootUrls(type)-->Line_5 $$ final String description = createInvalidRootsDescription(invalidUrls, rootName, library.getName())[ FD ]
Line_4 $$ if (!invalidUrls.isEmpty()) -->Line_5 $$ final String description = createInvalidRootsDescription(invalidUrls, rootName, library.getName())[ CD ]
Line_3 $$ final List<String> invalidUrls = library.getInvalidRootUrls(type)-->Line_4 $$ if (!invalidUrls.isEmpty()) [ FD ]
Line_2 $$ private void reportInvalidRoots(ProjectStructureProblemsHolder problemsHolder, LibraryEx library, final OrderRootType type, String rootName, final ProjectStructureProblemType problemType) -->Line_3 $$ final List<String> invalidUrls = library.getInvalidRootUrls(type)[ FD ]
Line_2 $$ private void reportInvalidRoots(ProjectStructureProblemsHolder problemsHolder, LibraryEx library, final OrderRootType type, String rootName, final ProjectStructureProblemType problemType) -->Line_5 $$ final String description = createInvalidRootsDescription(invalidUrls, rootName, library.getName())[ FD ]
Line_2 $$ private void reportInvalidRoots(ProjectStructureProblemsHolder problemsHolder, LibraryEx library, final OrderRootType type, String rootName, final ProjectStructureProblemType problemType) -->Line_3 $$ final List<String> invalidUrls = library.getInvalidRootUrls(type)[ CD ]
Line_4 $$ if (!invalidUrls.isEmpty()) -->Line_6 $$ final PlaceInProjectStructure place = createPlace()[ CD ]
Line_2 $$ private void reportInvalidRoots(ProjectStructureProblemsHolder problemsHolder, LibraryEx library, final OrderRootType type, String rootName, final ProjectStructureProblemType problemType) -->Line_7 $$ final String message = ProjectBundle.message("project.roots.error.message.invalid.roots", rootName, invalidUrls.size())[ FD ]
Line_4 $$ if (!invalidUrls.isEmpty()) -->Line_9 $$ problemsHolder.registerProblem(new ProjectStructureProblemDescription(message, description, place, problemType, level, Collections.singletonList(new RemoveInvalidRootsQuickFix(library, type, invalidUrls)), true))[ CD ]
Line_4 $$ if (!invalidUrls.isEmpty()) -->Line_8 $$ ProjectStructureProblemDescription.ProblemLevel level = library.getTable().getTableLevel().equals(LibraryTablesRegistrar.PROJECT_LEVEL) ? ProjectStructureProblemDescription.ProblemLevel.PROJECT : ProjectStructureProblemDescription.ProblemLevel.GLOBAL[ CD ]
Line_3 $$ final List<String> invalidUrls = library.getInvalidRootUrls(type)-->Line_7 $$ final String message = ProjectBundle.message("project.roots.error.message.invalid.roots", rootName, invalidUrls.size())[ FD ]
Line_2 $$ private void reportInvalidRoots(ProjectStructureProblemsHolder problemsHolder, LibraryEx library, final OrderRootType type, String rootName, final ProjectStructureProblemType problemType) -->Line_4 $$ if (!invalidUrls.isEmpty()) [ CD ]
