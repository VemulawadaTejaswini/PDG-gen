Line_8 $$ for (int j = 0; j < i; j++) -->Line_9 $$ final M memberInfo1 = memberInfos.get(j)[ CD ]
Line_4 $$ List<M> memberInfos = getIntermediateMemberInfosList(baseClass)-->Line_5 $$ for (int i = 0; i < memberInfos.size(); i++) [ FD ]
Line_10 $$ final T member1 = memberInfo1.getMember()-->Line_11 $$ if (memberConflict(member1, member)) [ FD ]
Line_6 $$ final M memberInfo = memberInfos.get(i)-->Line_7 $$ final T member = memberInfo.getMember()[ FD ]
Line_5 $$ for (int i = 0; i < memberInfos.size(); i++) -->Line_6 $$ final M memberInfo = memberInfos.get(i)[ CD ]
Line_4 $$ List<M> memberInfos = getIntermediateMemberInfosList(baseClass)-->Line_9 $$ final M memberInfo1 = memberInfos.get(j)[ FD ]
Line_8 $$ for (int j = 0; j < i; j++) -->Line_11 $$ if (memberConflict(member1, member)) [ CD ]
Line_5 $$ for (int i = 0; i < memberInfos.size(); i++) -->Line_6 $$ final M memberInfo = memberInfos.get(i)[ FD ]
Line_7 $$ final T member = memberInfo.getMember()-->Line_11 $$ if (memberConflict(member1, member)) [ FD ]
Line_2 $$ private HashSet<M> buildDuplicatedMemberInfos(C baseClass) -->Line_4 $$ List<M> memberInfos = getIntermediateMemberInfosList(baseClass)[ CD ]
Line_8 $$ for (int j = 0; j < i; j++) -->Line_9 $$ final M memberInfo1 = memberInfos.get(j)[ FD ]
Line_9 $$ final M memberInfo1 = memberInfos.get(j)-->Line_10 $$ final T member1 = memberInfo1.getMember()[ FD ]
Line_6 $$ final M memberInfo = memberInfos.get(i)-->Line_12 $$ result.add(memberInfo)[ FD ]
Line_5 $$ for (int i = 0; i < memberInfos.size(); i++) -->Line_8 $$ for (int j = 0; j < i; j++) [ CD ]
Line_4 $$ List<M> memberInfos = getIntermediateMemberInfosList(baseClass)-->Line_6 $$ final M memberInfo = memberInfos.get(i)[ FD ]
Line_2 $$ private HashSet<M> buildDuplicatedMemberInfos(C baseClass) -->Line_16 $$ return result[ CD ]
Line_5 $$ for (int i = 0; i < memberInfos.size(); i++) -->Line_8 $$ for (int j = 0; j < i; j++) [ FD ]
Line_2 $$ private HashSet<M> buildDuplicatedMemberInfos(C baseClass) -->Line_5 $$ for (int i = 0; i < memberInfos.size(); i++) [ CD ]
Line_8 $$ for (int j = 0; j < i; j++) -->Line_10 $$ final T member1 = memberInfo1.getMember()[ CD ]
Line_2 $$ private HashSet<M> buildDuplicatedMemberInfos(C baseClass) -->Line_3 $$ HashSet<M> result = new HashSet<M>()[ CD ]
Line_2 $$ private HashSet<M> buildDuplicatedMemberInfos(C baseClass) -->Line_4 $$ List<M> memberInfos = getIntermediateMemberInfosList(baseClass)[ FD ]
Line_3 $$ HashSet<M> result = new HashSet<M>()-->Line_12 $$ result.add(memberInfo)[ FD ]
Line_5 $$ for (int i = 0; i < memberInfos.size(); i++) -->Line_7 $$ final T member = memberInfo.getMember()[ CD ]
Line_11 $$ if (memberConflict(member1, member)) -->Line_12 $$ result.add(memberInfo)[ CD ]
