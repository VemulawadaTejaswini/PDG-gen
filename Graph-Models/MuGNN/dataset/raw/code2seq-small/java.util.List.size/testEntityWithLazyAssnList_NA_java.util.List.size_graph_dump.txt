Line_20 $$ List resultList = (List) results-->Line_23 $$ assertEquals(shermanExpected, resultList.get(1))[ FD ]
Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_29 $$ assertFalse(Hibernate.isInitialized(((Student) resultList.get(0)).getPreferredCourse()))[ CD ]
Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_28 $$ assertFalse(Hibernate.isInitialized(((Student) resultList.get(0)).getEnrolments()))[ CD ]
Line_20 $$ List resultList = (List) results-->Line_26 $$ assertNotNull(((Student) resultList.get(1)).getEnrolments())[ FD ]
Line_20 $$ List resultList = (List) results-->Line_29 $$ assertFalse(Hibernate.isInitialized(((Student) resultList.get(0)).getPreferredCourse()))[ FD ]
Line_20 $$ List resultList = (List) results-->Line_25 $$ assertNotNull(((Student) resultList.get(0)).getPreferredCourse())[ FD ]
Line_20 $$ List resultList = (List) results-->Line_21 $$ assertEquals(2, resultList.size())[ FD ]
Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_22 $$ assertEquals(yogiExpected, resultList.get(0))[ CD ]
Line_4 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_34 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ FD ]
Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_20 $$ List resultList = (List) results[ CD ]
Line_11 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_14 $$ return s.createQuery("from Student order by studentNumber")[ CD ]
Line_20 $$ List resultList = (List) results-->Line_31 $$ assertNull(((Student) resultList.get(1)).getPreferredCourse())[ FD ]
Line_20 $$ List resultList = (List) results-->Line_22 $$ assertEquals(yogiExpected, resultList.get(0))[ FD ]
Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_21 $$ assertEquals(2, resultList.size())[ CD ]
Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_25 $$ assertNotNull(((Student) resultList.get(0)).getPreferredCourse())[ CD ]
Line_4 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_14 $$ return s.createQuery("from Student order by studentNumber")[ FD ]
Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_31 $$ assertNull(((Student) resultList.get(1)).getPreferredCourse())[ CD ]
Line_20 $$ List resultList = (List) results-->Line_28 $$ assertFalse(Hibernate.isInitialized(((Student) resultList.get(0)).getEnrolments()))[ FD ]
Line_11 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_14 $$ return s.createQuery("from Student order by studentNumber")[ FD ]
Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_30 $$ assertFalse(Hibernate.isInitialized(((Student) resultList.get(1)).getEnrolments()))[ CD ]
Line_20 $$ List resultList = (List) results-->Line_30 $$ assertFalse(Hibernate.isInitialized(((Student) resultList.get(1)).getEnrolments()))[ FD ]
Line_20 $$ List resultList = (List) results-->Line_27 $$ assertNull(((Student) resultList.get(1)).getPreferredCourse())[ FD ]
Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_24 $$ assertNotNull(((Student) resultList.get(0)).getEnrolments())[ CD ]
Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_27 $$ assertNull(((Student) resultList.get(1)).getPreferredCourse())[ CD ]
Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_26 $$ assertNotNull(((Student) resultList.get(1)).getEnrolments())[ CD ]
Line_17 $$ ResultChecker checker = new ResultChecker() -->Line_23 $$ assertEquals(shermanExpected, resultList.get(1))[ CD ]
Line_20 $$ List resultList = (List) results-->Line_24 $$ assertNotNull(((Student) resultList.get(0)).getEnrolments())[ FD ]
