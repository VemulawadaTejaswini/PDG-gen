Line_15 $$ List resultList = (List) results-->Line_18 $$ assertEquals(shermanExpected, resultList.get(1))[ FD ]
Line_15 $$ List resultList = (List) results-->Line_25 $$ assertFalse(Hibernate.isInitialized(((Student) resultList.get(1)).getEnrolments()))[ FD ]
Line_15 $$ List resultList = (List) results-->Line_19 $$ assertNotNull(((Student) resultList.get(0)).getEnrolments())[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_24 $$ assertFalse(Hibernate.isInitialized(((Student) resultList.get(0)).getPreferredCourse()))[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Student.class).addOrder(Order.asc("studentNumber"))[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_20 $$ assertNotNull(((Student) resultList.get(0)).getPreferredCourse())[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_25 $$ assertFalse(Hibernate.isInitialized(((Student) resultList.get(1)).getEnrolments()))[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Student.class).addOrder(Order.asc("studentNumber"))[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_23 $$ assertFalse(Hibernate.isInitialized(((Student) resultList.get(0)).getEnrolments()))[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_21 $$ assertNotNull(((Student) resultList.get(1)).getEnrolments())[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_18 $$ assertEquals(shermanExpected, resultList.get(1))[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_17 $$ assertEquals(yogiExpected, resultList.get(0))[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_16 $$ assertEquals(2, resultList.size())[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_22 $$ assertNull(((Student) resultList.get(1)).getPreferredCourse())[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_15 $$ List resultList = (List) results[ CD ]
Line_2 $$ public void testEntityWithLazyAssnList() throws Exception -->Line_29 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_19 $$ assertNotNull(((Student) resultList.get(0)).getEnrolments())[ CD ]
Line_15 $$ List resultList = (List) results-->Line_21 $$ assertNotNull(((Student) resultList.get(1)).getEnrolments())[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_26 $$ assertNull(((Student) resultList.get(1)).getPreferredCourse())[ CD ]
Line_15 $$ List resultList = (List) results-->Line_23 $$ assertFalse(Hibernate.isInitialized(((Student) resultList.get(0)).getEnrolments()))[ FD ]
Line_15 $$ List resultList = (List) results-->Line_20 $$ assertNotNull(((Student) resultList.get(0)).getPreferredCourse())[ FD ]
Line_8 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_10 $$ return s.createQuery("from Student order by studentNumber")[ FD ]
Line_2 $$ public void testEntityWithLazyAssnList() throws Exception -->Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() [ CD ]
Line_15 $$ List resultList = (List) results-->Line_26 $$ assertNull(((Student) resultList.get(1)).getPreferredCourse())[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_29 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ FD ]
Line_15 $$ List resultList = (List) results-->Line_17 $$ assertEquals(yogiExpected, resultList.get(0))[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_10 $$ return s.createQuery("from Student order by studentNumber")[ FD ]
Line_8 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_10 $$ return s.createQuery("from Student order by studentNumber")[ CD ]
Line_15 $$ List resultList = (List) results-->Line_16 $$ assertEquals(2, resultList.size())[ FD ]
Line_15 $$ List resultList = (List) results-->Line_24 $$ assertFalse(Hibernate.isInitialized(((Student) resultList.get(0)).getPreferredCourse()))[ FD ]
Line_15 $$ List resultList = (List) results-->Line_22 $$ assertNull(((Student) resultList.get(1)).getPreferredCourse())[ FD ]
