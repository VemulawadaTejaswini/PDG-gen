Line_17 $$ for (numProcessed = start; numProcessed < (start + maxArgs) && numProcessed < args.size(); numProcessed++) -->Line_18 $$ cmdList.add(args.get(numProcessed))[ FD ]
Line_2 $$ protected String runResolveCommand(List<String> args, String commandScriptName) -->Line_3 $$ int loopCount = 0[ CD ]
Line_2 $$ protected String runResolveCommand(List<String> args, String commandScriptName) -->Line_13 $$ while (numProcessed != args.size()) [ FD ]
Line_13 $$ while (numProcessed != args.size()) -->Line_17 $$ for (numProcessed = start; numProcessed < (start + maxArgs) && numProcessed < args.size(); numProcessed++) [ CD ]
Line_2 $$ protected String runResolveCommand(List<String> args, String commandScriptName) -->Line_35 $$ return allOutput.toString()[ CD ]
Line_2 $$ protected String runResolveCommand(List<String> args, String commandScriptName) -->Line_4 $$ if (args.size() == 0) [ CD ]
Line_13 $$ while (numProcessed != args.size()) -->Line_22 $$ if ((userDir = System.getProperty("user.dir")) != null) [ CD ]
Line_13 $$ while (numProcessed != args.size()) -->Line_14 $$ int start = maxArgs * loopCount[ CD ]
Line_15 $$ List<String> cmdList = new ArrayList<String>()-->Line_16 $$ cmdList.add(commandScriptName)[ FD ]
Line_2 $$ protected String runResolveCommand(List<String> args, String commandScriptName) -->Line_4 $$ if (args.size() == 0) [ FD ]
Line_3 $$ int loopCount = 0-->Line_33 $$ loopCount++[ FD ]
Line_2 $$ protected String runResolveCommand(List<String> args, String commandScriptName) -->Line_9 $$ if (maxArgs < MIN_ALLOWABLE_ARGS) [ CD ]
Line_15 $$ List<String> cmdList = new ArrayList<String>()-->Line_25 $$ ShellCommandExecutor s = new ShellCommandExecutor(cmdList.toArray(new String[cmdList.size()]), dir)[ FD ]
Line_9 $$ if (maxArgs < MIN_ALLOWABLE_ARGS) -->Line_10 $$ LOG.warn("Invalid value " + Integer.toString(maxArgs) + " for " + SCRIPT_ARG_COUNT_KEY + "; must be >= " + Integer.toString(MIN_ALLOWABLE_ARGS))[ CD ]
Line_8 $$ int numProcessed = 0-->Line_17 $$ for (numProcessed = start; numProcessed < (start + maxArgs) && numProcessed < args.size(); numProcessed++) [ FD ]
Line_15 $$ List<String> cmdList = new ArrayList<String>()-->Line_18 $$ cmdList.add(args.get(numProcessed))[ FD ]
Line_4 $$ if (args.size() == 0) -->Line_5 $$ return null[ CD ]
Line_14 $$ int start = maxArgs * loopCount-->Line_17 $$ for (numProcessed = start; numProcessed < (start + maxArgs) && numProcessed < args.size(); numProcessed++) [ FD ]
Line_8 $$ int numProcessed = 0-->Line_18 $$ cmdList.add(args.get(numProcessed))[ FD ]
Line_8 $$ int numProcessed = 0-->Line_13 $$ while (numProcessed != args.size()) [ FD ]
Line_13 $$ while (numProcessed != args.size()) -->Line_16 $$ cmdList.add(commandScriptName)[ CD ]
Line_7 $$ StringBuilder allOutput = new StringBuilder()-->Line_28 $$ allOutput.append(s.getOutput()).append(" ")[ FD ]
Line_2 $$ protected String runResolveCommand(List<String> args, String commandScriptName) -->Line_13 $$ while (numProcessed != args.size()) [ CD ]
Line_13 $$ while (numProcessed != args.size()) -->Line_33 $$ loopCount++[ CD ]
Line_7 $$ StringBuilder allOutput = new StringBuilder()-->Line_35 $$ return allOutput.toString()[ FD ]
Line_2 $$ protected String runResolveCommand(List<String> args, String commandScriptName) -->Line_16 $$ cmdList.add(commandScriptName)[ FD ]
Line_9 $$ if (maxArgs < MIN_ALLOWABLE_ARGS) -->Line_11 $$ return null[ CD ]
Line_2 $$ protected String runResolveCommand(List<String> args, String commandScriptName) -->Line_17 $$ for (numProcessed = start; numProcessed < (start + maxArgs) && numProcessed < args.size(); numProcessed++) [ FD ]
Line_2 $$ protected String runResolveCommand(List<String> args, String commandScriptName) -->Line_7 $$ StringBuilder allOutput = new StringBuilder()[ CD ]
Line_2 $$ protected String runResolveCommand(List<String> args, String commandScriptName) -->Line_8 $$ int numProcessed = 0[ CD ]
Line_17 $$ for (numProcessed = start; numProcessed < (start + maxArgs) && numProcessed < args.size(); numProcessed++) -->Line_18 $$ cmdList.add(args.get(numProcessed))[ CD ]
Line_13 $$ while (numProcessed != args.size()) -->Line_15 $$ List<String> cmdList = new ArrayList<String>()[ CD ]
Line_2 $$ protected String runResolveCommand(List<String> args, String commandScriptName) -->Line_18 $$ cmdList.add(args.get(numProcessed))[ FD ]
