Line_12 $$ if (args.size() == 0) -->Line_13 $$ return null[ CD ]
Line_21 $$ while (numProcessed != args.size()) -->Line_22 $$ int start = maxArgs * loopCount[ CD ]
Line_23 $$ List<String> cmdList = new ArrayList<String>()-->Line_24 $$ cmdList.add(commandScriptName)[ FD ]
Line_16 $$ int numProcessed = 0-->Line_21 $$ while (numProcessed != args.size()) [ FD ]
Line_21 $$ while (numProcessed != args.size()) -->Line_25 $$ for (numProcessed = start; numProcessed < (start + maxArgs) && numProcessed < args.size(); numProcessed++) [ CD ]
Line_23 $$ List<String> cmdList = new ArrayList<String>()-->Line_26 $$ cmdList.add(args.get(numProcessed))[ FD ]
Line_21 $$ while (numProcessed != args.size()) -->Line_24 $$ cmdList.add(commandScriptName)[ CD ]
Line_25 $$ for (numProcessed = start; numProcessed < (start + maxArgs) && numProcessed < args.size(); numProcessed++) -->Line_26 $$ cmdList.add(args.get(numProcessed))[ FD ]
Line_21 $$ while (numProcessed != args.size()) -->Line_30 $$ if ((userDir = System.getProperty("user.dir")) != null) [ CD ]
Line_21 $$ while (numProcessed != args.size()) -->Line_23 $$ List<String> cmdList = new ArrayList<String>()[ CD ]
Line_15 $$ StringBuilder allOutput = new StringBuilder()-->Line_36 $$ allOutput.append(s.getOutput()).append(" ")[ FD ]
Line_21 $$ while (numProcessed != args.size()) -->Line_41 $$ loopCount++[ CD ]
Line_17 $$ if (maxArgs < MIN_ALLOWABLE_ARGS) -->Line_19 $$ return null[ CD ]
Line_25 $$ for (numProcessed = start; numProcessed < (start + maxArgs) && numProcessed < args.size(); numProcessed++) -->Line_26 $$ cmdList.add(args.get(numProcessed))[ CD ]
Line_17 $$ if (maxArgs < MIN_ALLOWABLE_ARGS) -->Line_18 $$ LOG.warn("Invalid value " + Integer.toString(maxArgs) + " for " + SCRIPT_ARG_COUNT_KEY + "; must be >= " + Integer.toString(MIN_ALLOWABLE_ARGS))[ CD ]
Line_16 $$ int numProcessed = 0-->Line_26 $$ cmdList.add(args.get(numProcessed))[ FD ]
Line_23 $$ List<String> cmdList = new ArrayList<String>()-->Line_33 $$ ShellCommandExecutor s = new ShellCommandExecutor(cmdList.toArray(new String[cmdList.size()]), dir)[ FD ]
Line_11 $$ int loopCount = 0-->Line_41 $$ loopCount++[ FD ]
Line_16 $$ int numProcessed = 0-->Line_25 $$ for (numProcessed = start; numProcessed < (start + maxArgs) && numProcessed < args.size(); numProcessed++) [ FD ]
Line_22 $$ int start = maxArgs * loopCount-->Line_25 $$ for (numProcessed = start; numProcessed < (start + maxArgs) && numProcessed < args.size(); numProcessed++) [ FD ]
Line_15 $$ StringBuilder allOutput = new StringBuilder()-->Line_43 $$ return allOutput.toString()[ FD ]
