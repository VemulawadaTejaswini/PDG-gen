Line_12 $$ Iterator it = resultList.iterator()-->Line_17 $$ entry = (Map.Entry) it.next()[ FD ]
Line_15 $$ if ("home".equals(entry.getKey())) -->Line_17 $$ entry = (Map.Entry) it.next()[ CD ]
Line_17 $$ entry = (Map.Entry) it.next()-->Line_21 $$ assertTrue(yogiExpected.getAddresses().get("work").equals(entry.getValue()))[ FD ]
Line_8 $$ ResultChecker checker = new ResultChecker() -->Line_12 $$ Iterator it = resultList.iterator()[ CD ]
Line_15 $$ if ("home".equals(entry.getKey())) -->Line_16 $$ assertTrue(yogiExpected.getAddresses().get("home").equals(entry.getValue()))[ CD ]
Line_14 $$ Map.Entry entry = (Map.Entry) it.next()-->Line_23 $$ assertTrue(yogiExpected.getAddresses().get("home").equals(entry.getValue()))[ FD ]
Line_8 $$ ResultChecker checker = new ResultChecker() -->Line_13 $$ assertTrue(resultList.get(0) instanceof Map.Entry)[ CD ]
Line_14 $$ Map.Entry entry = (Map.Entry) it.next()-->Line_15 $$ if ("home".equals(entry.getKey())) [ FD ]
Line_17 $$ entry = (Map.Entry) it.next()-->Line_18 $$ assertTrue(yogiExpected.getAddresses().get("work").equals(entry.getValue()))[ FD ]
Line_14 $$ Map.Entry entry = (Map.Entry) it.next()-->Line_22 $$ entry = (Map.Entry) it.next()[ FD ]
Line_15 $$ if ("home".equals(entry.getKey())) -->Line_23 $$ assertTrue(yogiExpected.getAddresses().get("home").equals(entry.getValue()))[ CD ]
Line_2 $$ public void testMapEntryList() throws Exception -->Line_27 $$ runTest(hqlExecutor, null, checker, false)[ CD ]
Line_12 $$ Iterator it = resultList.iterator()-->Line_14 $$ Map.Entry entry = (Map.Entry) it.next()[ FD ]
Line_17 $$ entry = (Map.Entry) it.next()-->Line_23 $$ assertTrue(yogiExpected.getAddresses().get("home").equals(entry.getValue()))[ FD ]
Line_22 $$ entry = (Map.Entry) it.next()-->Line_23 $$ assertTrue(yogiExpected.getAddresses().get("home").equals(entry.getValue()))[ FD ]
Line_14 $$ Map.Entry entry = (Map.Entry) it.next()-->Line_16 $$ assertTrue(yogiExpected.getAddresses().get("home").equals(entry.getValue()))[ FD ]
Line_15 $$ if ("home".equals(entry.getKey())) -->Line_20 $$ assertTrue("work".equals(entry.getKey()))[ CD ]
Line_17 $$ entry = (Map.Entry) it.next()-->Line_22 $$ entry = (Map.Entry) it.next()[ FD ]
Line_12 $$ Iterator it = resultList.iterator()-->Line_22 $$ entry = (Map.Entry) it.next()[ FD ]
Line_8 $$ ResultChecker checker = new ResultChecker() -->Line_10 $$ List resultList = (List) results[ CD ]
Line_17 $$ entry = (Map.Entry) it.next()-->Line_20 $$ assertTrue("work".equals(entry.getKey()))[ FD ]
Line_14 $$ Map.Entry entry = (Map.Entry) it.next()-->Line_18 $$ assertTrue(yogiExpected.getAddresses().get("work").equals(entry.getValue()))[ FD ]
Line_8 $$ ResultChecker checker = new ResultChecker() -->Line_15 $$ if ("home".equals(entry.getKey())) [ CD ]
Line_10 $$ List resultList = (List) results-->Line_12 $$ Iterator it = resultList.iterator()[ FD ]
Line_2 $$ public void testMapEntryList() throws Exception -->Line_3 $$ HqlExecutor hqlExecutor = new HqlExecutor() [ CD ]
Line_3 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_5 $$ return s.createQuery("select entry(s.addresses) from Student s")[ FD ]
Line_15 $$ if ("home".equals(entry.getKey())) -->Line_21 $$ assertTrue(yogiExpected.getAddresses().get("work").equals(entry.getValue()))[ CD ]
Line_10 $$ List resultList = (List) results-->Line_13 $$ assertTrue(resultList.get(0) instanceof Map.Entry)[ FD ]
Line_3 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_27 $$ runTest(hqlExecutor, null, checker, false)[ FD ]
Line_14 $$ Map.Entry entry = (Map.Entry) it.next()-->Line_17 $$ entry = (Map.Entry) it.next()[ FD ]
Line_14 $$ Map.Entry entry = (Map.Entry) it.next()-->Line_21 $$ assertTrue(yogiExpected.getAddresses().get("work").equals(entry.getValue()))[ FD ]
Line_10 $$ List resultList = (List) results-->Line_11 $$ assertEquals(2, resultList.size())[ FD ]
Line_15 $$ if ("home".equals(entry.getKey())) -->Line_18 $$ assertTrue(yogiExpected.getAddresses().get("work").equals(entry.getValue()))[ CD ]
Line_15 $$ if ("home".equals(entry.getKey())) -->Line_22 $$ entry = (Map.Entry) it.next()[ CD ]
Line_3 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_5 $$ return s.createQuery("select entry(s.addresses) from Student s")[ CD ]
Line_14 $$ Map.Entry entry = (Map.Entry) it.next()-->Line_20 $$ assertTrue("work".equals(entry.getKey()))[ FD ]
Line_8 $$ ResultChecker checker = new ResultChecker() -->Line_11 $$ assertEquals(2, resultList.size())[ CD ]
Line_8 $$ ResultChecker checker = new ResultChecker() -->Line_14 $$ Map.Entry entry = (Map.Entry) it.next()[ CD ]
