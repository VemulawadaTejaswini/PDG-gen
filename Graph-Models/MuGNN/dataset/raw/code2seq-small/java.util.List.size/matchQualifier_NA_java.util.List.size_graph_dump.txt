Line_14 $$ for (int j = matchPosition; j < suspects.size() - 1; j++) -->Line_20 $$ matchPosition = j + 1[ FD ]
Line_2 $$ private static MatchResult matchQualifier(@NotNull Object element, @NotNull final ChooseByNameBase base, @NotNull List<Pair<String, MinusculeMatcher>> patternsAndMatchers) -->Line_6 $$ final List<String> suspects = split(name, base)[ CD ]
Line_11 $$ final String pattern = patternAndMatcher.first-->Line_13 $$ if (!pattern.isEmpty()) [ FD ]
Line_17 $$ if (suspectMatch != null) -->Line_18 $$ matchingDegree += suspectMatch.matchingDegree[ CD ]
Line_13 $$ if (!pattern.isEmpty()) -->Line_27 $$ return null[ CD ]
Line_16 $$ MatchResult suspectMatch = matches(base, pattern, matcher, suspect)-->Line_17 $$ if (suspectMatch != null) [ FD ]
Line_2 $$ private static MatchResult matchQualifier(@NotNull Object element, @NotNull final ChooseByNameBase base, @NotNull List<Pair<String, MinusculeMatcher>> patternsAndMatchers) -->Line_8 $$ int matchPosition = 0[ CD ]
Line_6 $$ final List<String> suspects = split(name, base)-->Line_15 $$ String suspect = suspects.get(j)[ FD ]
Line_11 $$ final String pattern = patternAndMatcher.first-->Line_16 $$ MatchResult suspectMatch = matches(base, pattern, matcher, suspect)[ FD ]
Line_6 $$ final List<String> suspects = split(name, base)-->Line_14 $$ for (int j = matchPosition; j < suspects.size() - 1; j++) [ FD ]
Line_7 $$ int matchingDegree = 0-->Line_32 $$ matchingDegree -= (j + 1) * (j + 1)[ FD ]
Line_2 $$ private static MatchResult matchQualifier(@NotNull Object element, @NotNull final ChooseByNameBase base, @NotNull List<Pair<String, MinusculeMatcher>> patternsAndMatchers) -->Line_34 $$ return new MatchResult(name, matchingDegree, startMatch)[ CD ]
Line_18 $$ matchingDegree += suspectMatch.matchingDegree-->Line_32 $$ matchingDegree -= (j + 1) * (j + 1)[ FD ]
Line_2 $$ private static MatchResult matchQualifier(@NotNull Object element, @NotNull final ChooseByNameBase base, @NotNull List<Pair<String, MinusculeMatcher>> patternsAndMatchers) -->Line_4 $$ if (name == null)[ CD ]
Line_17 $$ if (suspectMatch != null) -->Line_19 $$ startMatch &= suspectMatch.startMatch[ CD ]
Line_2 $$ private static MatchResult matchQualifier(@NotNull Object element, @NotNull final ChooseByNameBase base, @NotNull List<Pair<String, MinusculeMatcher>> patternsAndMatchers) -->Line_3 $$ final String name = base.getModel().getFullName(element)[ CD ]
Line_14 $$ for (int j = matchPosition; j < suspects.size() - 1; j++) -->Line_17 $$ if (suspectMatch != null) [ CD ]
Line_13 $$ if (!pattern.isEmpty()) -->Line_14 $$ for (int j = matchPosition; j < suspects.size() - 1; j++) [ CD ]
Line_14 $$ for (int j = matchPosition; j < suspects.size() - 1; j++) -->Line_15 $$ String suspect = suspects.get(j)[ FD ]
Line_3 $$ final String name = base.getModel().getFullName(element)-->Line_6 $$ final List<String> suspects = split(name, base)[ FD ]
Line_2 $$ private static MatchResult matchQualifier(@NotNull Object element, @NotNull final ChooseByNameBase base, @NotNull List<Pair<String, MinusculeMatcher>> patternsAndMatchers) -->Line_7 $$ int matchingDegree = 0[ CD ]
Line_2 $$ private static MatchResult matchQualifier(@NotNull Object element, @NotNull final ChooseByNameBase base, @NotNull List<Pair<String, MinusculeMatcher>> patternsAndMatchers) -->Line_3 $$ final String name = base.getModel().getFullName(element)[ FD ]
Line_3 $$ final String name = base.getModel().getFullName(element)-->Line_4 $$ if (name == null)[ FD ]
Line_12 $$ final MinusculeMatcher matcher = patternAndMatcher.second-->Line_16 $$ MatchResult suspectMatch = matches(base, pattern, matcher, suspect)[ FD ]
Line_2 $$ private static MatchResult matchQualifier(@NotNull Object element, @NotNull final ChooseByNameBase base, @NotNull List<Pair<String, MinusculeMatcher>> patternsAndMatchers) -->Line_9 $$ boolean startMatch = true[ CD ]
Line_4 $$ if (name == null)-->Line_5 $$ return null[ CD ]
Line_2 $$ private static MatchResult matchQualifier(@NotNull Object element, @NotNull final ChooseByNameBase base, @NotNull List<Pair<String, MinusculeMatcher>> patternsAndMatchers) -->Line_16 $$ MatchResult suspectMatch = matches(base, pattern, matcher, suspect)[ FD ]
Line_8 $$ int matchPosition = 0-->Line_20 $$ matchPosition = j + 1[ FD ]
Line_15 $$ String suspect = suspects.get(j)-->Line_16 $$ MatchResult suspectMatch = matches(base, pattern, matcher, suspect)[ FD ]
Line_17 $$ if (suspectMatch != null) -->Line_20 $$ matchPosition = j + 1[ CD ]
Line_2 $$ private static MatchResult matchQualifier(@NotNull Object element, @NotNull final ChooseByNameBase base, @NotNull List<Pair<String, MinusculeMatcher>> patternsAndMatchers) -->Line_6 $$ final List<String> suspects = split(name, base)[ FD ]
Line_7 $$ int matchingDegree = 0-->Line_18 $$ matchingDegree += suspectMatch.matchingDegree[ FD ]
Line_14 $$ for (int j = matchPosition; j < suspects.size() - 1; j++) -->Line_15 $$ String suspect = suspects.get(j)[ CD ]
Line_9 $$ boolean startMatch = true-->Line_19 $$ startMatch &= suspectMatch.startMatch[ FD ]
Line_14 $$ for (int j = matchPosition; j < suspects.size() - 1; j++) -->Line_16 $$ MatchResult suspectMatch = matches(base, pattern, matcher, suspect)[ CD ]
