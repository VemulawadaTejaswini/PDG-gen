Line_11 $$ Chaos c2 = new Chaos()-->Line_14 $$ c2.setSize(null)[ FD ]
Line_15 $$ Session s = openSession()-->Line_22 $$ List chaoses = s.createQuery("from Chaos where chaos_size is null or chaos_size = :chaos_size").setParameter("chaos_size", null, StandardBasicTypes.LONG).list()[ FD ]
Line_15 $$ Session s = openSession()-->Line_16 $$ s.beginTransaction()[ FD ]
Line_3 $$ Chaos c0 = new Chaos()-->Line_4 $$ c0.setId(0L)[ FD ]
Line_15 $$ Session s = openSession()-->Line_18 $$ s.persist(c1)[ FD ]
Line_2 $$ public void testQueryWithNullParameterTyped() -->Line_11 $$ Chaos c2 = new Chaos()[ CD ]
Line_15 $$ Session s = openSession()-->Line_19 $$ s.persist(c2)[ FD ]
Line_11 $$ Chaos c2 = new Chaos()-->Line_19 $$ s.persist(c2)[ FD ]
Line_2 $$ public void testQueryWithNullParameterTyped() -->Line_24 $$ chaoses = s.createQuery("from Chaos where chaos_size = :chaos_size").setParameter("chaos_size", null, StandardBasicTypes.LONG).list()[ CD ]
Line_2 $$ public void testQueryWithNullParameterTyped() -->Line_22 $$ List chaoses = s.createQuery("from Chaos where chaos_size is null or chaos_size = :chaos_size").setParameter("chaos_size", null, StandardBasicTypes.LONG).list()[ CD ]
Line_2 $$ public void testQueryWithNullParameterTyped() -->Line_10 $$ c1.setSize(1L)[ CD ]
Line_2 $$ public void testQueryWithNullParameterTyped() -->Line_27 $$ s.close()[ CD ]
Line_11 $$ Chaos c2 = new Chaos()-->Line_13 $$ c2.setName("c2")[ FD ]
Line_2 $$ public void testQueryWithNullParameterTyped() -->Line_4 $$ c0.setId(0L)[ CD ]
Line_15 $$ Session s = openSession()-->Line_17 $$ s.persist(c0)[ FD ]
Line_2 $$ public void testQueryWithNullParameterTyped() -->Line_19 $$ s.persist(c2)[ CD ]
Line_15 $$ Session s = openSession()-->Line_20 $$ s.flush()[ FD ]
Line_11 $$ Chaos c2 = new Chaos()-->Line_12 $$ c2.setId(2L)[ FD ]
Line_22 $$ List chaoses = s.createQuery("from Chaos where chaos_size is null or chaos_size = :chaos_size").setParameter("chaos_size", null, StandardBasicTypes.LONG).list()-->Line_23 $$ assertEquals(1, chaoses.size())[ FD ]
Line_2 $$ public void testQueryWithNullParameterTyped() -->Line_23 $$ assertEquals(1, chaoses.size())[ CD ]
Line_22 $$ List chaoses = s.createQuery("from Chaos where chaos_size is null or chaos_size = :chaos_size").setParameter("chaos_size", null, StandardBasicTypes.LONG).list()-->Line_25 $$ assertEquals(0, chaoses.size())[ FD ]
Line_2 $$ public void testQueryWithNullParameterTyped() -->Line_18 $$ s.persist(c1)[ CD ]
Line_15 $$ Session s = openSession()-->Line_21 $$ s.clear()[ FD ]
Line_2 $$ public void testQueryWithNullParameterTyped() -->Line_15 $$ Session s = openSession()[ CD ]
Line_2 $$ public void testQueryWithNullParameterTyped() -->Line_16 $$ s.beginTransaction()[ CD ]
Line_3 $$ Chaos c0 = new Chaos()-->Line_5 $$ c0.setName("c0")[ FD ]
Line_2 $$ public void testQueryWithNullParameterTyped() -->Line_9 $$ c1.setName("c1")[ CD ]
Line_2 $$ public void testQueryWithNullParameterTyped() -->Line_6 $$ c0.setSize(0L)[ CD ]
Line_2 $$ public void testQueryWithNullParameterTyped() -->Line_14 $$ c2.setSize(null)[ CD ]
Line_2 $$ public void testQueryWithNullParameterTyped() -->Line_17 $$ s.persist(c0)[ CD ]
Line_2 $$ public void testQueryWithNullParameterTyped() -->Line_12 $$ c2.setId(2L)[ CD ]
Line_7 $$ Chaos c1 = new Chaos()-->Line_10 $$ c1.setSize(1L)[ FD ]
Line_2 $$ public void testQueryWithNullParameterTyped() -->Line_21 $$ s.clear()[ CD ]
Line_15 $$ Session s = openSession()-->Line_24 $$ chaoses = s.createQuery("from Chaos where chaos_size = :chaos_size").setParameter("chaos_size", null, StandardBasicTypes.LONG).list()[ FD ]
Line_2 $$ public void testQueryWithNullParameterTyped() -->Line_8 $$ c1.setId(1L)[ CD ]
Line_15 $$ Session s = openSession()-->Line_26 $$ s.getTransaction().rollback()[ FD ]
Line_15 $$ Session s = openSession()-->Line_27 $$ s.close()[ FD ]
Line_2 $$ public void testQueryWithNullParameterTyped() -->Line_13 $$ c2.setName("c2")[ CD ]
Line_3 $$ Chaos c0 = new Chaos()-->Line_17 $$ s.persist(c0)[ FD ]
Line_24 $$ chaoses = s.createQuery("from Chaos where chaos_size = :chaos_size").setParameter("chaos_size", null, StandardBasicTypes.LONG).list()-->Line_25 $$ assertEquals(0, chaoses.size())[ FD ]
Line_22 $$ List chaoses = s.createQuery("from Chaos where chaos_size is null or chaos_size = :chaos_size").setParameter("chaos_size", null, StandardBasicTypes.LONG).list()-->Line_24 $$ chaoses = s.createQuery("from Chaos where chaos_size = :chaos_size").setParameter("chaos_size", null, StandardBasicTypes.LONG).list()[ FD ]
Line_7 $$ Chaos c1 = new Chaos()-->Line_9 $$ c1.setName("c1")[ FD ]
Line_2 $$ public void testQueryWithNullParameterTyped() -->Line_3 $$ Chaos c0 = new Chaos()[ CD ]
Line_7 $$ Chaos c1 = new Chaos()-->Line_18 $$ s.persist(c1)[ FD ]
Line_3 $$ Chaos c0 = new Chaos()-->Line_6 $$ c0.setSize(0L)[ FD ]
Line_2 $$ public void testQueryWithNullParameterTyped() -->Line_7 $$ Chaos c1 = new Chaos()[ CD ]
Line_2 $$ public void testQueryWithNullParameterTyped() -->Line_26 $$ s.getTransaction().rollback()[ CD ]
Line_7 $$ Chaos c1 = new Chaos()-->Line_8 $$ c1.setId(1L)[ FD ]
Line_2 $$ public void testQueryWithNullParameterTyped() -->Line_25 $$ assertEquals(0, chaoses.size())[ CD ]
Line_2 $$ public void testQueryWithNullParameterTyped() -->Line_20 $$ s.flush()[ CD ]
Line_2 $$ public void testQueryWithNullParameterTyped() -->Line_5 $$ c0.setName("c0")[ CD ]
