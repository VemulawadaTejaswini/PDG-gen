Line_2 $$ public static ParameterMetadata fromAnnotations(Annotation[] annotations, String methodName, TypeManager typeManager, boolean sampleWeightAllowed) -->Line_3 $$ List<Annotation> baseTypes = Arrays.asList(annotations).stream().filter( annotation -> annotation instanceof SqlType || annotation instanceof BlockIndex || annotation instanceof SampleWeight).collect(toImmutableList())[ CD ]
Line_2 $$ public static ParameterMetadata fromAnnotations(Annotation[] annotations, String methodName, TypeManager typeManager, boolean sampleWeightAllowed) -->Line_9 $$ if (annotation instanceof SqlType) [ CD ]
Line_6 $$ boolean isBlock = Arrays.asList(annotations).stream().anyMatch( annotation -> annotation instanceof BlockPosition)-->Line_8 $$ checkArgument((!isBlock && !nullable) || (annotation instanceof SqlType), "%s contains a parameter with @BlockPosition and/or @NullablePosition that is not @SqlType", methodName)[ FD ]
Line_9 $$ if (annotation instanceof SqlType) -->Line_11 $$ if (isBlock) [ CD ]
Line_2 $$ public static ParameterMetadata fromAnnotations(Annotation[] annotations, String methodName, TypeManager typeManager, boolean sampleWeightAllowed) -->Line_6 $$ boolean isBlock = Arrays.asList(annotations).stream().anyMatch( annotation -> annotation instanceof BlockPosition)[ FD ]
Line_7 $$ Annotation annotation = baseTypes.get(0)-->Line_24 $$ if (annotation instanceof BlockIndex) [ FD ]
Line_5 $$ boolean nullable = Arrays.asList(annotations).stream().anyMatch( annotation -> annotation instanceof NullablePosition)-->Line_8 $$ checkArgument((!isBlock && !nullable) || (annotation instanceof SqlType), "%s contains a parameter with @BlockPosition and/or @NullablePosition that is not @SqlType", methodName)[ FD ]
Line_3 $$ List<Annotation> baseTypes = Arrays.asList(annotations).stream().filter( annotation -> annotation instanceof SqlType || annotation instanceof BlockIndex || annotation instanceof SampleWeight).collect(toImmutableList())-->Line_4 $$ checkArgument(baseTypes.size() == 1, "Parameter of %s must have exactly one of @SqlType, @BlockIndex, and @SampleWeight", methodName)[ FD ]
Line_2 $$ public static ParameterMetadata fromAnnotations(Annotation[] annotations, String methodName, TypeManager typeManager, boolean sampleWeightAllowed) -->Line_15 $$ return new ParameterMetadata(BLOCK_INPUT_CHANNEL, typeManager.getType(signature))[ FD ]
Line_11 $$ if (isBlock) -->Line_12 $$ if (nullable) [ CD ]
Line_2 $$ public static ParameterMetadata fromAnnotations(Annotation[] annotations, String methodName, TypeManager typeManager, boolean sampleWeightAllowed) -->Line_13 $$ return new ParameterMetadata(NULLABLE_BLOCK_INPUT_CHANNEL, typeManager.getType(signature))[ FD ]
Line_10 $$ TypeSignature signature = parseTypeSignature(((SqlType) annotation).value())-->Line_21 $$ return new ParameterMetadata(INPUT_CHANNEL, typeManager.getType(signature))[ FD ]
Line_2 $$ public static ParameterMetadata fromAnnotations(Annotation[] annotations, String methodName, TypeManager typeManager, boolean sampleWeightAllowed) -->Line_5 $$ boolean nullable = Arrays.asList(annotations).stream().anyMatch( annotation -> annotation instanceof NullablePosition)[ CD ]
Line_10 $$ TypeSignature signature = parseTypeSignature(((SqlType) annotation).value())-->Line_15 $$ return new ParameterMetadata(BLOCK_INPUT_CHANNEL, typeManager.getType(signature))[ FD ]
Line_2 $$ public static ParameterMetadata fromAnnotations(Annotation[] annotations, String methodName, TypeManager typeManager, boolean sampleWeightAllowed) -->Line_3 $$ List<Annotation> baseTypes = Arrays.asList(annotations).stream().filter( annotation -> annotation instanceof SqlType || annotation instanceof BlockIndex || annotation instanceof SampleWeight).collect(toImmutableList())[ FD ]
Line_9 $$ if (annotation instanceof SqlType) -->Line_24 $$ if (annotation instanceof BlockIndex) [ CD ]
Line_24 $$ if (annotation instanceof BlockIndex) -->Line_25 $$ return new ParameterMetadata(BLOCK_INDEX)[ CD ]
Line_26 $$ if (annotation instanceof SampleWeight) -->Line_27 $$ checkArgument(sampleWeightAllowed, "@SampleWeight only allowed in approximate aggregations")[ CD ]
Line_12 $$ if (nullable) -->Line_13 $$ return new ParameterMetadata(NULLABLE_BLOCK_INPUT_CHANNEL, typeManager.getType(signature))[ CD ]
Line_12 $$ if (nullable) -->Line_15 $$ return new ParameterMetadata(BLOCK_INPUT_CHANNEL, typeManager.getType(signature))[ CD ]
Line_2 $$ public static ParameterMetadata fromAnnotations(Annotation[] annotations, String methodName, TypeManager typeManager, boolean sampleWeightAllowed) -->Line_8 $$ checkArgument((!isBlock && !nullable) || (annotation instanceof SqlType), "%s contains a parameter with @BlockPosition and/or @NullablePosition that is not @SqlType", methodName)[ CD ]
Line_26 $$ if (annotation instanceof SampleWeight) -->Line_28 $$ return new ParameterMetadata(SAMPLE_WEIGHT)[ CD ]
Line_2 $$ public static ParameterMetadata fromAnnotations(Annotation[] annotations, String methodName, TypeManager typeManager, boolean sampleWeightAllowed) -->Line_4 $$ checkArgument(baseTypes.size() == 1, "Parameter of %s must have exactly one of @SqlType, @BlockIndex, and @SampleWeight", methodName)[ CD ]
Line_24 $$ if (annotation instanceof BlockIndex) -->Line_26 $$ if (annotation instanceof SampleWeight) [ CD ]
Line_2 $$ public static ParameterMetadata fromAnnotations(Annotation[] annotations, String methodName, TypeManager typeManager, boolean sampleWeightAllowed) -->Line_4 $$ checkArgument(baseTypes.size() == 1, "Parameter of %s must have exactly one of @SqlType, @BlockIndex, and @SampleWeight", methodName)[ FD ]
Line_2 $$ public static ParameterMetadata fromAnnotations(Annotation[] annotations, String methodName, TypeManager typeManager, boolean sampleWeightAllowed) -->Line_27 $$ checkArgument(sampleWeightAllowed, "@SampleWeight only allowed in approximate aggregations")[ FD ]
Line_3 $$ List<Annotation> baseTypes = Arrays.asList(annotations).stream().filter( annotation -> annotation instanceof SqlType || annotation instanceof BlockIndex || annotation instanceof SampleWeight).collect(toImmutableList())-->Line_7 $$ Annotation annotation = baseTypes.get(0)[ FD ]
Line_9 $$ if (annotation instanceof SqlType) -->Line_10 $$ TypeSignature signature = parseTypeSignature(((SqlType) annotation).value())[ CD ]
Line_7 $$ Annotation annotation = baseTypes.get(0)-->Line_26 $$ if (annotation instanceof SampleWeight) [ FD ]
Line_10 $$ TypeSignature signature = parseTypeSignature(((SqlType) annotation).value())-->Line_13 $$ return new ParameterMetadata(NULLABLE_BLOCK_INPUT_CHANNEL, typeManager.getType(signature))[ FD ]
Line_18 $$ if (nullable) -->Line_21 $$ return new ParameterMetadata(INPUT_CHANNEL, typeManager.getType(signature))[ CD ]
Line_2 $$ public static ParameterMetadata fromAnnotations(Annotation[] annotations, String methodName, TypeManager typeManager, boolean sampleWeightAllowed) -->Line_5 $$ boolean nullable = Arrays.asList(annotations).stream().anyMatch( annotation -> annotation instanceof NullablePosition)[ FD ]
Line_2 $$ public static ParameterMetadata fromAnnotations(Annotation[] annotations, String methodName, TypeManager typeManager, boolean sampleWeightAllowed) -->Line_21 $$ return new ParameterMetadata(INPUT_CHANNEL, typeManager.getType(signature))[ FD ]
Line_11 $$ if (isBlock) -->Line_18 $$ if (nullable) [ CD ]
Line_2 $$ public static ParameterMetadata fromAnnotations(Annotation[] annotations, String methodName, TypeManager typeManager, boolean sampleWeightAllowed) -->Line_8 $$ checkArgument((!isBlock && !nullable) || (annotation instanceof SqlType), "%s contains a parameter with @BlockPosition and/or @NullablePosition that is not @SqlType", methodName)[ FD ]
Line_2 $$ public static ParameterMetadata fromAnnotations(Annotation[] annotations, String methodName, TypeManager typeManager, boolean sampleWeightAllowed) -->Line_6 $$ boolean isBlock = Arrays.asList(annotations).stream().anyMatch( annotation -> annotation instanceof BlockPosition)[ CD ]
Line_2 $$ public static ParameterMetadata fromAnnotations(Annotation[] annotations, String methodName, TypeManager typeManager, boolean sampleWeightAllowed) -->Line_7 $$ Annotation annotation = baseTypes.get(0)[ CD ]
Line_7 $$ Annotation annotation = baseTypes.get(0)-->Line_9 $$ if (annotation instanceof SqlType) [ FD ]
