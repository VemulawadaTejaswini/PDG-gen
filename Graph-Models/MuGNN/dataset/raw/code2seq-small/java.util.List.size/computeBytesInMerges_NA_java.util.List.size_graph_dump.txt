Line_4 $$ List<Long> segmentSizes = new ArrayList<Long>(numSegments)-->Line_23 $$ int pos = Collections.binarySearch(segmentSizes, mergedSize)[ FD ]
Line_2 $$ long computeBytesInMerges(int factor, int inMem) -->Line_29 $$ f = factor[ FD ]
Line_9 $$ for (int i = 0; i < numSegments; i++) -->Line_10 $$ segmentSizes.add(segments.get(i).getRawDataLength())[ CD ]
Line_4 $$ List<Long> segmentSizes = new ArrayList<Long>(numSegments)-->Line_20 $$ mergedSize += segmentSizes.remove(0)[ FD ]
Line_13 $$ while (n > f || considerFinalMerge) -->Line_23 $$ int pos = Collections.binarySearch(segmentSizes, mergedSize)[ CD ]
Line_19 $$ for (int j = 0; j < f; j++) -->Line_20 $$ mergedSize += segmentSizes.remove(0)[ CD ]
Line_13 $$ while (n > f || considerFinalMerge) -->Line_24 $$ if (pos < 0) [ CD ]
Line_2 $$ long computeBytesInMerges(int factor, int inMem) -->Line_7 $$ int f = getPassFactor(factor, 1, n) + inMem[ FD ]
Line_18 $$ f = Math.min(f, segmentSizes.size())-->Line_19 $$ for (int j = 0; j < f; j++) [ FD ]
Line_20 $$ mergedSize += segmentSizes.remove(0)-->Line_22 $$ totalBytes += mergedSize[ FD ]
Line_20 $$ mergedSize += segmentSizes.remove(0)-->Line_27 $$ segmentSizes.add(pos, mergedSize)[ FD ]
Line_13 $$ while (n > f || considerFinalMerge) -->Line_14 $$ if (n <= f) [ CD ]
Line_13 $$ while (n > f || considerFinalMerge) -->Line_18 $$ f = Math.min(f, segmentSizes.size())[ CD ]
Line_2 $$ long computeBytesInMerges(int factor, int inMem) -->Line_9 $$ for (int i = 0; i < numSegments; i++) [ CD ]
Line_2 $$ long computeBytesInMerges(int factor, int inMem) -->Line_13 $$ while (n > f || considerFinalMerge) [ CD ]
Line_3 $$ int numSegments = segments.size()-->Line_8 $$ n = numSegments[ FD ]
Line_6 $$ int n = numSegments - inMem-->Line_7 $$ int f = getPassFactor(factor, 1, n) + inMem[ FD ]
Line_13 $$ while (n > f || considerFinalMerge) -->Line_28 $$ n -= (f - 1)[ CD ]
Line_7 $$ int f = getPassFactor(factor, 1, n) + inMem-->Line_19 $$ for (int j = 0; j < f; j++) [ FD ]
Line_15 $$ considerFinalMerge = false-->Line_13 $$ while (n > f || considerFinalMerge) [ FD ]
Line_18 $$ f = Math.min(f, segmentSizes.size())-->Line_29 $$ f = factor[ FD ]
Line_18 $$ f = Math.min(f, segmentSizes.size())-->Line_14 $$ if (n <= f) [ FD ]
Line_7 $$ int f = getPassFactor(factor, 1, n) + inMem-->Line_29 $$ f = factor[ FD ]
Line_5 $$ long totalBytes = 0-->Line_22 $$ totalBytes += mergedSize[ FD ]
Line_13 $$ while (n > f || considerFinalMerge) -->Line_22 $$ totalBytes += mergedSize[ CD ]
Line_13 $$ while (n > f || considerFinalMerge) -->Line_29 $$ f = factor[ CD ]
Line_29 $$ f = factor-->Line_14 $$ if (n <= f) [ FD ]
Line_4 $$ List<Long> segmentSizes = new ArrayList<Long>(numSegments)-->Line_10 $$ segmentSizes.add(segments.get(i).getRawDataLength())[ FD ]
Line_12 $$ boolean considerFinalMerge = includeFinalMerge-->Line_15 $$ considerFinalMerge = false[ FD ]
Line_2 $$ long computeBytesInMerges(int factor, int inMem) -->Line_12 $$ boolean considerFinalMerge = includeFinalMerge[ CD ]
Line_3 $$ int numSegments = segments.size()-->Line_9 $$ for (int i = 0; i < numSegments; i++) [ FD ]
Line_2 $$ long computeBytesInMerges(int factor, int inMem) -->Line_7 $$ int f = getPassFactor(factor, 1, n) + inMem[ CD ]
Line_6 $$ int n = numSegments - inMem-->Line_14 $$ if (n <= f) [ FD ]
Line_17 $$ long mergedSize = 0-->Line_20 $$ mergedSize += segmentSizes.remove(0)[ FD ]
Line_7 $$ int f = getPassFactor(factor, 1, n) + inMem-->Line_18 $$ f = Math.min(f, segmentSizes.size())[ FD ]
Line_4 $$ List<Long> segmentSizes = new ArrayList<Long>(numSegments)-->Line_27 $$ segmentSizes.add(pos, mergedSize)[ FD ]
Line_9 $$ for (int i = 0; i < numSegments; i++) -->Line_10 $$ segmentSizes.add(segments.get(i).getRawDataLength())[ FD ]
Line_17 $$ long mergedSize = 0-->Line_22 $$ totalBytes += mergedSize[ FD ]
Line_8 $$ n = numSegments-->Line_28 $$ n -= (f - 1)[ FD ]
Line_2 $$ long computeBytesInMerges(int factor, int inMem) -->Line_6 $$ int n = numSegments - inMem[ CD ]
Line_8 $$ n = numSegments-->Line_14 $$ if (n <= f) [ FD ]
Line_12 $$ boolean considerFinalMerge = includeFinalMerge-->Line_13 $$ while (n > f || considerFinalMerge) [ FD ]
Line_14 $$ if (n <= f) -->Line_15 $$ considerFinalMerge = false[ CD ]
Line_17 $$ long mergedSize = 0-->Line_27 $$ segmentSizes.add(pos, mergedSize)[ FD ]
Line_13 $$ while (n > f || considerFinalMerge) -->Line_17 $$ long mergedSize = 0[ CD ]
Line_13 $$ while (n > f || considerFinalMerge) -->Line_19 $$ for (int j = 0; j < f; j++) [ CD ]
Line_29 $$ f = factor-->Line_18 $$ f = Math.min(f, segmentSizes.size())[ FD ]
Line_17 $$ long mergedSize = 0-->Line_23 $$ int pos = Collections.binarySearch(segmentSizes, mergedSize)[ FD ]
Line_2 $$ long computeBytesInMerges(int factor, int inMem) -->Line_8 $$ n = numSegments[ CD ]
Line_6 $$ int n = numSegments - inMem-->Line_8 $$ n = numSegments[ FD ]
Line_2 $$ long computeBytesInMerges(int factor, int inMem) -->Line_5 $$ long totalBytes = 0[ CD ]
Line_2 $$ long computeBytesInMerges(int factor, int inMem) -->Line_3 $$ int numSegments = segments.size()[ CD ]
Line_2 $$ long computeBytesInMerges(int factor, int inMem) -->Line_4 $$ List<Long> segmentSizes = new ArrayList<Long>(numSegments)[ CD ]
Line_6 $$ int n = numSegments - inMem-->Line_28 $$ n -= (f - 1)[ FD ]
Line_2 $$ long computeBytesInMerges(int factor, int inMem) -->Line_31 $$ return totalBytes[ CD ]
Line_7 $$ int f = getPassFactor(factor, 1, n) + inMem-->Line_14 $$ if (n <= f) [ FD ]
Line_13 $$ while (n > f || considerFinalMerge) -->Line_27 $$ segmentSizes.add(pos, mergedSize)[ CD ]
Line_28 $$ n -= (f - 1)-->Line_14 $$ if (n <= f) [ FD ]
Line_20 $$ mergedSize += segmentSizes.remove(0)-->Line_23 $$ int pos = Collections.binarySearch(segmentSizes, mergedSize)[ FD ]
Line_4 $$ List<Long> segmentSizes = new ArrayList<Long>(numSegments)-->Line_18 $$ f = Math.min(f, segmentSizes.size())[ FD ]
