Line_14 $$ int n = numSegments - inMem-->Line_43 $$ n -= (f - 1)[ FD ]
Line_32 $$ f = Math.min(f, segmentSizes.size())-->Line_28 $$ if (n <= f) [ FD ]
Line_14 $$ int n = numSegments - inMem-->Line_28 $$ if (n <= f) [ FD ]
Line_27 $$ while (n > f || considerFinalMerge) -->Line_33 $$ for (int j = 0; j < f; j++) [ CD ]
Line_17 $$ n = numSegments-->Line_28 $$ if (n <= f) [ FD ]
Line_32 $$ f = Math.min(f, segmentSizes.size())-->Line_44 $$ f = factor[ FD ]
Line_32 $$ f = Math.min(f, segmentSizes.size())-->Line_33 $$ for (int j = 0; j < f; j++) [ FD ]
Line_27 $$ while (n > f || considerFinalMerge) -->Line_32 $$ f = Math.min(f, segmentSizes.size())[ CD ]
Line_34 $$ mergedSize += segmentSizes.remove(0)-->Line_42 $$ segmentSizes.add(pos, mergedSize)[ FD ]
Line_44 $$ f = factor-->Line_28 $$ if (n <= f) [ FD ]
Line_12 $$ List<Long> segmentSizes = new ArrayList<Long>(numSegments)-->Line_34 $$ mergedSize += segmentSizes.remove(0)[ FD ]
Line_43 $$ n -= (f - 1)-->Line_28 $$ if (n <= f) [ FD ]
Line_27 $$ while (n > f || considerFinalMerge) -->Line_43 $$ n -= (f - 1)[ CD ]
Line_27 $$ while (n > f || considerFinalMerge) -->Line_44 $$ f = factor[ CD ]
Line_44 $$ f = factor-->Line_32 $$ f = Math.min(f, segmentSizes.size())[ FD ]
Line_29 $$ considerFinalMerge = false-->Line_27 $$ while (n > f || considerFinalMerge) [ FD ]
Line_31 $$ long mergedSize = 0-->Line_36 $$ totalBytes += mergedSize[ FD ]
Line_13 $$ long totalBytes = 0-->Line_36 $$ totalBytes += mergedSize[ FD ]
Line_11 $$ int numSegments = segments.size()-->Line_17 $$ n = numSegments[ FD ]
Line_27 $$ while (n > f || considerFinalMerge) -->Line_42 $$ segmentSizes.add(pos, mergedSize)[ CD ]
Line_12 $$ List<Long> segmentSizes = new ArrayList<Long>(numSegments)-->Line_42 $$ segmentSizes.add(pos, mergedSize)[ FD ]
Line_31 $$ long mergedSize = 0-->Line_34 $$ mergedSize += segmentSizes.remove(0)[ FD ]
Line_28 $$ if (n <= f) -->Line_29 $$ considerFinalMerge = false[ CD ]
Line_14 $$ int n = numSegments - inMem-->Line_17 $$ n = numSegments[ FD ]
Line_27 $$ while (n > f || considerFinalMerge) -->Line_28 $$ if (n <= f) [ CD ]
Line_11 $$ int numSegments = segments.size()-->Line_18 $$ for (int i = 0; i < numSegments; i++) [ FD ]
Line_33 $$ for (int j = 0; j < f; j++) -->Line_34 $$ mergedSize += segmentSizes.remove(0)[ CD ]
Line_34 $$ mergedSize += segmentSizes.remove(0)-->Line_36 $$ totalBytes += mergedSize[ FD ]
Line_31 $$ long mergedSize = 0-->Line_42 $$ segmentSizes.add(pos, mergedSize)[ FD ]
Line_17 $$ n = numSegments-->Line_43 $$ n -= (f - 1)[ FD ]
Line_27 $$ while (n > f || considerFinalMerge) -->Line_39 $$ if (pos < 0) [ CD ]
Line_27 $$ while (n > f || considerFinalMerge) -->Line_31 $$ long mergedSize = 0[ CD ]
Line_27 $$ while (n > f || considerFinalMerge) -->Line_36 $$ totalBytes += mergedSize[ CD ]
Line_12 $$ List<Long> segmentSizes = new ArrayList<Long>(numSegments)-->Line_32 $$ f = Math.min(f, segmentSizes.size())[ FD ]
