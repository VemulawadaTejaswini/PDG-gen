Line_20 $$ for (int i = 0; i < callerCount; ++i) -->Line_33 $$ assertEquals(startID + i, callIds.get(i).intValue())[ FD ]
Line_16 $$ for (int i = 0; i < callerCount; ++i) -->Line_33 $$ assertEquals(startID + i, callIds.get(i).intValue())[ FD ]
Line_5 $$ final List<Integer> callIds = Collections.synchronizedList(new ArrayList<Integer>())-->Line_29 $$ assertEquals(expectedCallCount, callIds.size())[ FD ]
Line_2 $$ public void testUniqueSequentialCallIds() throws IOException, InterruptedException -->Line_5 $$ final List<Integer> callIds = Collections.synchronizedList(new ArrayList<Integer>())[ CD ]
Line_4 $$ TestServer server = new TestServer(serverThreads, false)-->Line_13 $$ InetSocketAddress addr = NetUtils.getConnectAddress(server)[ FD ]
Line_32 $$ for (int i = 0; i < expectedCallCount; ++i) -->Line_33 $$ assertEquals(startID + i, callIds.get(i).intValue())[ CD ]
Line_3 $$ int serverThreads = 10, callerCount = 100, perCallerCallCount = 100-->Line_20 $$ for (int i = 0; i < callerCount; ++i) [ FD ]
Line_5 $$ final List<Integer> callIds = Collections.synchronizedList(new ArrayList<Integer>())-->Line_8 $$ callIds.add(Server.getCallId())[ FD ]
Line_16 $$ for (int i = 0; i < callerCount; ++i) -->Line_17 $$ callers[i] = new SerialCaller(client, addr, perCallerCallCount)[ CD ]
Line_3 $$ int serverThreads = 10, callerCount = 100, perCallerCallCount = 100-->Line_16 $$ for (int i = 0; i < callerCount; ++i) [ FD ]
Line_2 $$ public void testUniqueSequentialCallIds() throws IOException, InterruptedException -->Line_31 $$ final int startID = callIds.get(0).intValue()[ CD ]
Line_5 $$ final List<Integer> callIds = Collections.synchronizedList(new ArrayList<Integer>())-->Line_33 $$ assertEquals(startID + i, callIds.get(i).intValue())[ FD ]
Line_2 $$ public void testUniqueSequentialCallIds() throws IOException, InterruptedException -->Line_32 $$ for (int i = 0; i < expectedCallCount; ++i) [ CD ]
Line_16 $$ for (int i = 0; i < callerCount; ++i) -->Line_18 $$ callers[i].start()[ CD ]
Line_4 $$ TestServer server = new TestServer(serverThreads, false)-->Line_14 $$ server.start()[ FD ]
Line_20 $$ for (int i = 0; i < callerCount; ++i) -->Line_22 $$ assertFalse(callers[i].failed)[ CD ]
Line_5 $$ final List<Integer> callIds = Collections.synchronizedList(new ArrayList<Integer>())-->Line_31 $$ final int startID = callIds.get(0).intValue()[ FD ]
Line_6 $$ server.callListener = new Runnable() -->Line_8 $$ callIds.add(Server.getCallId())[ CD ]
Line_2 $$ public void testUniqueSequentialCallIds() throws IOException, InterruptedException -->Line_30 $$ Collections.sort(callIds)[ CD ]
Line_4 $$ TestServer server = new TestServer(serverThreads, false)-->Line_26 $$ server.stop()[ FD ]
Line_2 $$ public void testUniqueSequentialCallIds() throws IOException, InterruptedException -->Line_3 $$ int serverThreads = 10, callerCount = 100, perCallerCallCount = 100[ CD ]
Line_2 $$ public void testUniqueSequentialCallIds() throws IOException, InterruptedException -->Line_29 $$ assertEquals(expectedCallCount, callIds.size())[ CD ]
Line_16 $$ for (int i = 0; i < callerCount; ++i) -->Line_20 $$ for (int i = 0; i < callerCount; ++i) [ FD ]
Line_20 $$ for (int i = 0; i < callerCount; ++i) -->Line_21 $$ callers[i].join()[ CD ]
Line_5 $$ final List<Integer> callIds = Collections.synchronizedList(new ArrayList<Integer>())-->Line_30 $$ Collections.sort(callIds)[ FD ]
Line_16 $$ for (int i = 0; i < callerCount; ++i) -->Line_32 $$ for (int i = 0; i < expectedCallCount; ++i) [ FD ]
Line_32 $$ for (int i = 0; i < expectedCallCount; ++i) -->Line_33 $$ assertEquals(startID + i, callIds.get(i).intValue())[ FD ]
Line_2 $$ public void testUniqueSequentialCallIds() throws IOException, InterruptedException -->Line_6 $$ server.callListener = new Runnable() [ CD ]
Line_20 $$ for (int i = 0; i < callerCount; ++i) -->Line_32 $$ for (int i = 0; i < expectedCallCount; ++i) [ FD ]
Line_2 $$ public void testUniqueSequentialCallIds() throws IOException, InterruptedException -->Line_4 $$ TestServer server = new TestServer(serverThreads, false)[ CD ]
