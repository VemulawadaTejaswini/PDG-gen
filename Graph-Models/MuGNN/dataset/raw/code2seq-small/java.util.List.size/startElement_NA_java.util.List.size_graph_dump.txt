Line_7 $$ if (createNewChild) -->Line_11 $$ newChild.updateInfo(attributes, myPending)[ CD ]
Line_4 $$ ElementHandlerBase current = myParseStack.get(myParseStack.size() - 1)-->Line_6 $$ final boolean createNewChild = current.startElement(uri, localName, qName, attributes)[ FD ]
Line_2 $$ public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException -->Line_11 $$ newChild.updateInfo(attributes, myPending)[ FD ]
Line_7 $$ if (createNewChild) -->Line_19 $$ assertSAX(!myParseStack.isEmpty())[ CD ]
Line_2 $$ public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException -->Line_9 $$ final ElementHandlerBase newChild = myElementsMap.get(qName).get()[ FD ]
Line_20 $$ current = myParseStack.get(myParseStack.size() - 1)-->Line_10 $$ newChild.setParent(current)[ FD ]
Line_2 $$ public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException -->Line_3 $$ assertSAX(!myParseStack.isEmpty())[ CD ]
Line_2 $$ public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException -->Line_6 $$ final boolean createNewChild = current.startElement(uri, localName, qName, attributes)[ FD ]
Line_7 $$ if (createNewChild) -->Line_9 $$ final ElementHandlerBase newChild = myElementsMap.get(qName).get()[ CD ]
Line_2 $$ public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException -->Line_5 $$ while (true) [ CD ]
Line_20 $$ current = myParseStack.get(myParseStack.size() - 1)-->Line_15 $$ if (current instanceof Entry) [ FD ]
Line_7 $$ if (createNewChild) -->Line_18 $$ myParseStack.remove(myParseStack.size() - 1)[ CD ]
Line_5 $$ while (true) -->Line_6 $$ final boolean createNewChild = current.startElement(uri, localName, qName, attributes)[ CD ]
Line_9 $$ final ElementHandlerBase newChild = myElementsMap.get(qName).get()-->Line_12 $$ myParseStack.add(newChild)[ FD ]
Line_9 $$ final ElementHandlerBase newChild = myElementsMap.get(qName).get()-->Line_11 $$ newChild.updateInfo(attributes, myPending)[ FD ]
Line_2 $$ public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException -->Line_4 $$ ElementHandlerBase current = myParseStack.get(myParseStack.size() - 1)[ CD ]
Line_4 $$ ElementHandlerBase current = myParseStack.get(myParseStack.size() - 1)-->Line_10 $$ newChild.setParent(current)[ FD ]
Line_20 $$ current = myParseStack.get(myParseStack.size() - 1)-->Line_6 $$ final boolean createNewChild = current.startElement(uri, localName, qName, attributes)[ FD ]
Line_7 $$ if (createNewChild) -->Line_15 $$ if (current instanceof Entry) [ CD ]
Line_5 $$ while (true) -->Line_7 $$ if (createNewChild) [ CD ]
Line_4 $$ ElementHandlerBase current = myParseStack.get(myParseStack.size() - 1)-->Line_15 $$ if (current instanceof Entry) [ FD ]
Line_7 $$ if (createNewChild) -->Line_20 $$ current = myParseStack.get(myParseStack.size() - 1)[ CD ]
Line_7 $$ if (createNewChild) -->Line_13 $$ return[ CD ]
Line_4 $$ ElementHandlerBase current = myParseStack.get(myParseStack.size() - 1)-->Line_20 $$ current = myParseStack.get(myParseStack.size() - 1)[ FD ]
Line_7 $$ if (createNewChild) -->Line_8 $$ assertSAX(myElementsMap.containsKey(qName))[ CD ]
Line_7 $$ if (createNewChild) -->Line_10 $$ newChild.setParent(current)[ CD ]
Line_15 $$ if (current instanceof Entry) -->Line_16 $$ switchPending()[ CD ]
Line_2 $$ public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException -->Line_8 $$ assertSAX(myElementsMap.containsKey(qName))[ FD ]
Line_9 $$ final ElementHandlerBase newChild = myElementsMap.get(qName).get()-->Line_10 $$ newChild.setParent(current)[ FD ]
Line_7 $$ if (createNewChild) -->Line_12 $$ myParseStack.add(newChild)[ CD ]
