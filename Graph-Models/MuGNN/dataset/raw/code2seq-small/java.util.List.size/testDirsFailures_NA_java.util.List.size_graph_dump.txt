Line_8 $$ if (yarnCluster != null) -->Line_9 $$ yarnCluster.stop()[ CD ]
Line_29 $$ expectedDirs = dirs[1] + "," + dirs[3]-->Line_34 $$ verifyDisksHealth(localORLogDirs, expectedDirs, false)[ FD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_4 $$ String dirsProperty = localORLogDirs ? YarnConfiguration.NM_LOCAL_DIRS : YarnConfiguration.NM_LOG_DIRS[ CD ]
Line_26 $$ expectedDirs = dirs[0] + "," + dirs[1] + "," + dirs[3]-->Line_27 $$ verifyDisksHealth(localORLogDirs, expectedDirs, true)[ FD ]
Line_23 $$ String expectedDirs = StringUtils.join(",", list)-->Line_24 $$ verifyDisksHealth(localORLogDirs, expectedDirs, true)[ FD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_24 $$ verifyDisksHealth(localORLogDirs, expectedDirs, true)[ CD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_34 $$ verifyDisksHealth(localORLogDirs, expectedDirs, false)[ FD ]
Line_26 $$ expectedDirs = dirs[0] + "," + dirs[1] + "," + dirs[3]-->Line_33 $$ expectedDirs = ""[ FD ]
Line_33 $$ expectedDirs = ""-->Line_34 $$ verifyDisksHealth(localORLogDirs, expectedDirs, false)[ FD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_16 $$ yarnCluster.start()[ CD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_8 $$ if (yarnCluster != null) [ CD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_26 $$ expectedDirs = dirs[0] + "," + dirs[1] + "," + dirs[3][ CD ]
Line_23 $$ String expectedDirs = StringUtils.join(",", list)-->Line_27 $$ verifyDisksHealth(localORLogDirs, expectedDirs, true)[ FD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_3 $$ String dirType = localORLogDirs ? "local" : "log"[ CD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_30 $$ verifyDisksHealth(localORLogDirs, expectedDirs, false)[ CD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_24 $$ verifyDisksHealth(localORLogDirs, expectedDirs, true)[ FD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_21 $$ String[] dirs = list.toArray(new String[list.size()])[ CD ]
Line_23 $$ String expectedDirs = StringUtils.join(",", list)-->Line_26 $$ expectedDirs = dirs[0] + "," + dirs[1] + "," + dirs[3][ FD ]
Line_26 $$ expectedDirs = dirs[0] + "," + dirs[1] + "," + dirs[3]-->Line_29 $$ expectedDirs = dirs[1] + "," + dirs[3][ FD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_33 $$ expectedDirs = ""[ CD ]
Line_23 $$ String expectedDirs = StringUtils.join(",", list)-->Line_33 $$ expectedDirs = ""[ FD ]
Line_8 $$ if (yarnCluster != null) -->Line_11 $$ localFSDirBase.mkdirs()[ CD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_20 $$ List<String> list = localORLogDirs ? dirsHandler.getLocalDirs() : dirsHandler.getLogDirs()[ CD ]
Line_4 $$ String dirsProperty = localORLogDirs ? YarnConfiguration.NM_LOCAL_DIRS : YarnConfiguration.NM_LOG_DIRS-->Line_18 $$ LOG.info("Configured nm-" + dirType + "-dirs=" + nm.getConfig().get(dirsProperty))[ FD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_32 $$ prepareDirToFail(dirs[3])[ CD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_5 $$ Configuration conf = new Configuration()[ CD ]
Line_29 $$ expectedDirs = dirs[1] + "," + dirs[3]-->Line_33 $$ expectedDirs = ""[ FD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_17 $$ NodeManager nm = yarnCluster.getNodeManager(0)[ CD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_15 $$ yarnCluster.init(conf)[ FD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_25 $$ prepareDirToFail(dirs[2])[ CD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_15 $$ yarnCluster.init(conf)[ CD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_28 $$ prepareDirToFail(dirs[0])[ CD ]
Line_23 $$ String expectedDirs = StringUtils.join(",", list)-->Line_30 $$ verifyDisksHealth(localORLogDirs, expectedDirs, false)[ FD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_34 $$ verifyDisksHealth(localORLogDirs, expectedDirs, false)[ CD ]
Line_29 $$ expectedDirs = dirs[1] + "," + dirs[3]-->Line_30 $$ verifyDisksHealth(localORLogDirs, expectedDirs, false)[ FD ]
Line_20 $$ List<String> list = localORLogDirs ? dirsHandler.getLocalDirs() : dirsHandler.getLogDirs()-->Line_23 $$ String expectedDirs = StringUtils.join(",", list)[ FD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_29 $$ expectedDirs = dirs[1] + "," + dirs[3][ CD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_27 $$ verifyDisksHealth(localORLogDirs, expectedDirs, true)[ CD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_27 $$ verifyDisksHealth(localORLogDirs, expectedDirs, true)[ FD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_18 $$ LOG.info("Configured nm-" + dirType + "-dirs=" + nm.getConfig().get(dirsProperty))[ CD ]
Line_17 $$ NodeManager nm = yarnCluster.getNodeManager(0)-->Line_19 $$ dirsHandler = nm.getNodeHealthChecker().getDiskHandler()[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_7 $$ conf.setFloat(YarnConfiguration.NM_MIN_HEALTHY_DISKS_FRACTION, 0.60F)[ FD ]
Line_8 $$ if (yarnCluster != null) -->Line_10 $$ FileUtil.fullyDelete(localFSDirBase)[ CD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_6 $$ conf.setLong(YarnConfiguration.NM_DISK_HEALTH_CHECK_INTERVAL_MS, DISK_HEALTH_CHECK_INTERVAL)[ CD ]
Line_20 $$ List<String> list = localORLogDirs ? dirsHandler.getLocalDirs() : dirsHandler.getLogDirs()-->Line_21 $$ String[] dirs = list.toArray(new String[list.size()])[ FD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_30 $$ verifyDisksHealth(localORLogDirs, expectedDirs, false)[ FD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_31 $$ prepareDirToFail(dirs[1])[ CD ]
Line_23 $$ String expectedDirs = StringUtils.join(",", list)-->Line_34 $$ verifyDisksHealth(localORLogDirs, expectedDirs, false)[ FD ]
Line_26 $$ expectedDirs = dirs[0] + "," + dirs[1] + "," + dirs[3]-->Line_34 $$ verifyDisksHealth(localORLogDirs, expectedDirs, false)[ FD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_19 $$ dirsHandler = nm.getNodeHealthChecker().getDiskHandler()[ CD ]
Line_23 $$ String expectedDirs = StringUtils.join(",", list)-->Line_29 $$ expectedDirs = dirs[1] + "," + dirs[3][ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_6 $$ conf.setLong(YarnConfiguration.NM_DISK_HEALTH_CHECK_INTERVAL_MS, DISK_HEALTH_CHECK_INTERVAL)[ FD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_7 $$ conf.setFloat(YarnConfiguration.NM_MIN_HEALTHY_DISKS_FRACTION, 0.60F)[ CD ]
Line_17 $$ NodeManager nm = yarnCluster.getNodeManager(0)-->Line_18 $$ LOG.info("Configured nm-" + dirType + "-dirs=" + nm.getConfig().get(dirsProperty))[ FD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_23 $$ String expectedDirs = StringUtils.join(",", list)[ CD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_13 $$ LOG.info("Starting up YARN cluster")[ CD ]
Line_2 $$ private void testDirsFailures(boolean localORLogDirs) throws IOException -->Line_22 $$ Assert.assertEquals("Number of nm-" + dirType + "-dirs is wrong.", numLocalDirs, dirs.length)[ CD ]
Line_26 $$ expectedDirs = dirs[0] + "," + dirs[1] + "," + dirs[3]-->Line_30 $$ verifyDisksHealth(localORLogDirs, expectedDirs, false)[ FD ]
