Line_5 $$ Baz b = new Baz()-->Line_38 $$ assertTrue(b.getSortablez().size() == 3)[ FD ]
Line_19 $$ List result = cr.addOrder(Order.asc("name")).list()-->Line_37 $$ b = (Baz) result.get(0)[ FD ]
Line_5 $$ Baz b = new Baz()-->Line_22 $$ assertTrue(b.getSortablez().size() == 3)[ FD ]
Line_29 $$ b = (Baz) result.get(0)-->Line_31 $$ assertEquals(((Sortable) b.getSortablez().iterator().next()).getName(), "bar")[ FD ]
Line_19 $$ List result = cr.addOrder(Order.asc("name")).list()-->Line_21 $$ b = (Baz) result.get(0)[ FD ]
Line_3 $$ Session s = openSession()-->Line_27 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_25 $$ s.close()[ CD ]
Line_34 $$ s = openSession()-->Line_42 $$ s.close()[ FD ]
Line_15 $$ s = openSession()-->Line_36 $$ result = s.createQuery("from Baz baz order by baz.name asc").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_24 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_5 $$ Baz b = new Baz()[ CD ]
Line_5 $$ Baz b = new Baz()-->Line_21 $$ b = (Baz) result.get(0)[ FD ]
Line_26 $$ s = openSession()-->Line_34 $$ s = openSession()[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_24 $$ s.getTransaction().commit()[ CD ]
Line_15 $$ s = openSession()-->Line_17 $$ Criteria cr = s.createCriteria(Baz.class)[ FD ]
Line_37 $$ b = (Baz) result.get(0)-->Line_38 $$ assertTrue(b.getSortablez().size() == 3)[ FD ]
Line_3 $$ Session s = openSession()-->Line_12 $$ s.save(b)[ FD ]
Line_21 $$ b = (Baz) result.get(0)-->Line_23 $$ assertEquals(((Sortable) b.getSortablez().iterator().next()).getName(), "bar")[ FD ]
Line_29 $$ b = (Baz) result.get(0)-->Line_30 $$ assertTrue(b.getSortablez().size() == 3)[ FD ]
Line_3 $$ Session s = openSession()-->Line_17 $$ Criteria cr = s.createCriteria(Baz.class)[ FD ]
Line_3 $$ Session s = openSession()-->Line_28 $$ result = s.createQuery("from Baz baz left join fetch baz.sortablez order by baz.name asc").list()[ FD ]
Line_26 $$ s = openSession()-->Line_33 $$ s.close()[ FD ]
Line_26 $$ s = openSession()-->Line_41 $$ s.getTransaction().commit()[ FD ]
Line_5 $$ Baz b = new Baz()-->Line_23 $$ assertEquals(((Sortable) b.getSortablez().iterator().next()).getName(), "bar")[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_8 $$ ss.add(new Sortable("foo"))[ CD ]
Line_21 $$ b = (Baz) result.get(0)-->Line_22 $$ assertTrue(b.getSortablez().size() == 3)[ FD ]
Line_15 $$ s = openSession()-->Line_26 $$ s = openSession()[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_21 $$ b = (Baz) result.get(0)[ CD ]
Line_28 $$ result = s.createQuery("from Baz baz left join fetch baz.sortablez order by baz.name asc").list()-->Line_37 $$ b = (Baz) result.get(0)[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_18 $$ cr.setFetchMode("topGlarchez", FetchMode.SELECT)[ CD ]
Line_29 $$ b = (Baz) result.get(0)-->Line_40 $$ s.delete(b)[ FD ]
Line_7 $$ SortedSet ss = new TreeSet()-->Line_9 $$ ss.add(new Sortable("bar"))[ FD ]
Line_5 $$ Baz b = new Baz()-->Line_12 $$ s.save(b)[ FD ]
Line_5 $$ Baz b = new Baz()-->Line_30 $$ assertTrue(b.getSortablez().size() == 3)[ FD ]
Line_3 $$ Session s = openSession()-->Line_16 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_35 $$ s.beginTransaction()[ CD ]
Line_3 $$ Session s = openSession()-->Line_35 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_22 $$ assertTrue(b.getSortablez().size() == 3)[ CD ]
Line_5 $$ Baz b = new Baz()-->Line_11 $$ b.setSortablez(ss)[ FD ]
Line_5 $$ Baz b = new Baz()-->Line_29 $$ b = (Baz) result.get(0)[ FD ]
Line_26 $$ s = openSession()-->Line_32 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_4 $$ s.beginTransaction()[ CD ]
Line_3 $$ Session s = openSession()-->Line_32 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_13 $$ s.getTransaction().commit()[ CD ]
Line_2 $$ public void testSortables() throws Exception -->Line_6 $$ b.setName("name")[ CD ]
Line_2 $$ public void testSortables() throws Exception -->Line_23 $$ assertEquals(((Sortable) b.getSortablez().iterator().next()).getName(), "bar")[ CD ]
Line_3 $$ Session s = openSession()-->Line_15 $$ s = openSession()[ FD ]
Line_15 $$ s = openSession()-->Line_40 $$ s.delete(b)[ FD ]
Line_19 $$ List result = cr.addOrder(Order.asc("name")).list()-->Line_29 $$ b = (Baz) result.get(0)[ FD ]
Line_28 $$ result = s.createQuery("from Baz baz left join fetch baz.sortablez order by baz.name asc").list()-->Line_36 $$ result = s.createQuery("from Baz baz order by baz.name asc").list()[ FD ]
Line_29 $$ b = (Baz) result.get(0)-->Line_37 $$ b = (Baz) result.get(0)[ FD ]
Line_21 $$ b = (Baz) result.get(0)-->Line_37 $$ b = (Baz) result.get(0)[ FD ]
Line_7 $$ SortedSet ss = new TreeSet()-->Line_11 $$ b.setSortablez(ss)[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_33 $$ s.close()[ CD ]
Line_2 $$ public void testSortables() throws Exception -->Line_27 $$ s.beginTransaction()[ CD ]
Line_19 $$ List result = cr.addOrder(Order.asc("name")).list()-->Line_28 $$ result = s.createQuery("from Baz baz left join fetch baz.sortablez order by baz.name asc").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_40 $$ s.delete(b)[ FD ]
Line_15 $$ s = openSession()-->Line_24 $$ s.getTransaction().commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_33 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_14 $$ s.close()[ FD ]
Line_15 $$ s = openSession()-->Line_34 $$ s = openSession()[ FD ]
Line_19 $$ List result = cr.addOrder(Order.asc("name")).list()-->Line_36 $$ result = s.createQuery("from Baz baz order by baz.name asc").list()[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_38 $$ assertTrue(b.getSortablez().size() == 3)[ CD ]
Line_26 $$ s = openSession()-->Line_42 $$ s.close()[ FD ]
Line_21 $$ b = (Baz) result.get(0)-->Line_39 $$ assertEquals(((Sortable) b.getSortablez().iterator().next()).getName(), "bar")[ FD ]
Line_17 $$ Criteria cr = s.createCriteria(Baz.class)-->Line_18 $$ cr.setFetchMode("topGlarchez", FetchMode.SELECT)[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_41 $$ s.getTransaction().commit()[ CD ]
Line_26 $$ s = openSession()-->Line_27 $$ s.beginTransaction()[ FD ]
Line_15 $$ s = openSession()-->Line_16 $$ s.beginTransaction()[ FD ]
Line_5 $$ Baz b = new Baz()-->Line_39 $$ assertEquals(((Sortable) b.getSortablez().iterator().next()).getName(), "bar")[ FD ]
Line_3 $$ Session s = openSession()-->Line_34 $$ s = openSession()[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_17 $$ Criteria cr = s.createCriteria(Baz.class)[ CD ]
Line_2 $$ public void testSortables() throws Exception -->Line_14 $$ s.close()[ CD ]
Line_15 $$ s = openSession()-->Line_27 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_11 $$ b.setSortablez(ss)[ CD ]
Line_2 $$ public void testSortables() throws Exception -->Line_28 $$ result = s.createQuery("from Baz baz left join fetch baz.sortablez order by baz.name asc").list()[ CD ]
Line_36 $$ result = s.createQuery("from Baz baz order by baz.name asc").list()-->Line_37 $$ b = (Baz) result.get(0)[ FD ]
Line_34 $$ s = openSession()-->Line_41 $$ s.getTransaction().commit()[ FD ]
Line_21 $$ b = (Baz) result.get(0)-->Line_30 $$ assertTrue(b.getSortablez().size() == 3)[ FD ]
Line_26 $$ s = openSession()-->Line_35 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_34 $$ s = openSession()[ CD ]
Line_29 $$ b = (Baz) result.get(0)-->Line_39 $$ assertEquals(((Sortable) b.getSortablez().iterator().next()).getName(), "bar")[ FD ]
Line_17 $$ Criteria cr = s.createCriteria(Baz.class)-->Line_19 $$ List result = cr.addOrder(Order.asc("name")).list()[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_9 $$ ss.add(new Sortable("bar"))[ CD ]
Line_2 $$ public void testSortables() throws Exception -->Line_19 $$ List result = cr.addOrder(Order.asc("name")).list()[ CD ]
Line_26 $$ s = openSession()-->Line_36 $$ result = s.createQuery("from Baz baz order by baz.name asc").list()[ FD ]
Line_7 $$ SortedSet ss = new TreeSet()-->Line_8 $$ ss.add(new Sortable("foo"))[ FD ]
Line_15 $$ s = openSession()-->Line_35 $$ s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_25 $$ s.close()[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_10 $$ ss.add(new Sortable("baz"))[ CD ]
Line_2 $$ public void testSortables() throws Exception -->Line_32 $$ s.getTransaction().commit()[ CD ]
Line_5 $$ Baz b = new Baz()-->Line_6 $$ b.setName("name")[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_37 $$ b = (Baz) result.get(0)[ CD ]
Line_2 $$ public void testSortables() throws Exception -->Line_15 $$ s = openSession()[ CD ]
Line_37 $$ b = (Baz) result.get(0)-->Line_40 $$ s.delete(b)[ FD ]
Line_5 $$ Baz b = new Baz()-->Line_37 $$ b = (Baz) result.get(0)[ FD ]
Line_26 $$ s = openSession()-->Line_40 $$ s.delete(b)[ FD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ s.beginTransaction()[ FD ]
Line_15 $$ s = openSession()-->Line_33 $$ s.close()[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_31 $$ assertEquals(((Sortable) b.getSortablez().iterator().next()).getName(), "bar")[ CD ]
Line_3 $$ Session s = openSession()-->Line_26 $$ s = openSession()[ FD ]
Line_5 $$ Baz b = new Baz()-->Line_40 $$ s.delete(b)[ FD ]
Line_3 $$ Session s = openSession()-->Line_13 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_29 $$ b = (Baz) result.get(0)[ CD ]
Line_21 $$ b = (Baz) result.get(0)-->Line_29 $$ b = (Baz) result.get(0)[ FD ]
Line_37 $$ b = (Baz) result.get(0)-->Line_39 $$ assertEquals(((Sortable) b.getSortablez().iterator().next()).getName(), "bar")[ FD ]
Line_21 $$ b = (Baz) result.get(0)-->Line_38 $$ assertTrue(b.getSortablez().size() == 3)[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_36 $$ result = s.createQuery("from Baz baz order by baz.name asc").list()[ CD ]
Line_26 $$ s = openSession()-->Line_28 $$ result = s.createQuery("from Baz baz left join fetch baz.sortablez order by baz.name asc").list()[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_42 $$ s.close()[ CD ]
Line_5 $$ Baz b = new Baz()-->Line_31 $$ assertEquals(((Sortable) b.getSortablez().iterator().next()).getName(), "bar")[ FD ]
Line_15 $$ s = openSession()-->Line_32 $$ s.getTransaction().commit()[ FD ]
Line_28 $$ result = s.createQuery("from Baz baz left join fetch baz.sortablez order by baz.name asc").list()-->Line_29 $$ b = (Baz) result.get(0)[ FD ]
Line_34 $$ s = openSession()-->Line_35 $$ s.beginTransaction()[ FD ]
Line_15 $$ s = openSession()-->Line_41 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_7 $$ SortedSet ss = new TreeSet()[ CD ]
Line_2 $$ public void testSortables() throws Exception -->Line_39 $$ assertEquals(((Sortable) b.getSortablez().iterator().next()).getName(), "bar")[ CD ]
Line_34 $$ s = openSession()-->Line_40 $$ s.delete(b)[ FD ]
Line_3 $$ Session s = openSession()-->Line_41 $$ s.getTransaction().commit()[ FD ]
Line_15 $$ s = openSession()-->Line_42 $$ s.close()[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_20 $$ assertTrue(result.size() == 1)[ CD ]
Line_2 $$ public void testSortables() throws Exception -->Line_3 $$ Session s = openSession()[ CD ]
Line_15 $$ s = openSession()-->Line_25 $$ s.close()[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_26 $$ s = openSession()[ CD ]
Line_3 $$ Session s = openSession()-->Line_36 $$ result = s.createQuery("from Baz baz order by baz.name asc").list()[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_12 $$ s.save(b)[ CD ]
Line_3 $$ Session s = openSession()-->Line_42 $$ s.close()[ FD ]
Line_7 $$ SortedSet ss = new TreeSet()-->Line_10 $$ ss.add(new Sortable("baz"))[ FD ]
Line_15 $$ s = openSession()-->Line_28 $$ result = s.createQuery("from Baz baz left join fetch baz.sortablez order by baz.name asc").list()[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_16 $$ s.beginTransaction()[ CD ]
Line_21 $$ b = (Baz) result.get(0)-->Line_40 $$ s.delete(b)[ FD ]
Line_21 $$ b = (Baz) result.get(0)-->Line_31 $$ assertEquals(((Sortable) b.getSortablez().iterator().next()).getName(), "bar")[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_40 $$ s.delete(b)[ CD ]
Line_19 $$ List result = cr.addOrder(Order.asc("name")).list()-->Line_20 $$ assertTrue(result.size() == 1)[ FD ]
Line_34 $$ s = openSession()-->Line_36 $$ result = s.createQuery("from Baz baz order by baz.name asc").list()[ FD ]
Line_29 $$ b = (Baz) result.get(0)-->Line_38 $$ assertTrue(b.getSortablez().size() == 3)[ FD ]
Line_2 $$ public void testSortables() throws Exception -->Line_30 $$ assertTrue(b.getSortablez().size() == 3)[ CD ]
