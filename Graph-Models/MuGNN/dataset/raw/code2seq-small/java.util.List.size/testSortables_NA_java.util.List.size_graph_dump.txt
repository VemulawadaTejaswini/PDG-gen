Line_20 $$ List result = cr.addOrder(Order.asc("name")).list()-->Line_38 $$ b = (Baz) result.get(0)[ FD ]
Line_16 $$ s = openSession()-->Line_34 $$ s.close()[ FD ]
Line_29 $$ result = s.createQuery("from Baz baz left join fetch baz.sortablez order by baz.name asc").list()-->Line_30 $$ b = (Baz) result.get(0)[ FD ]
Line_38 $$ b = (Baz) result.get(0)-->Line_40 $$ assertEquals(((Sortable) b.getSortablez().iterator().next()).getName(), "bar")[ FD ]
Line_16 $$ s = openSession()-->Line_27 $$ s = openSession()[ FD ]
Line_4 $$ Session s = openSession()-->Line_37 $$ result = s.createQuery("from Baz baz order by baz.name asc").list()[ FD ]
Line_16 $$ s = openSession()-->Line_28 $$ s.beginTransaction()[ FD ]
Line_6 $$ Baz b = new Baz()-->Line_13 $$ s.save(b)[ FD ]
Line_6 $$ Baz b = new Baz()-->Line_41 $$ s.delete(b)[ FD ]
Line_6 $$ Baz b = new Baz()-->Line_22 $$ b = (Baz) result.get(0)[ FD ]
Line_27 $$ s = openSession()-->Line_43 $$ s.close()[ FD ]
Line_6 $$ Baz b = new Baz()-->Line_39 $$ assertTrue(b.getSortablez().size() == 3)[ FD ]
Line_27 $$ s = openSession()-->Line_42 $$ s.getTransaction().commit()[ FD ]
Line_6 $$ Baz b = new Baz()-->Line_7 $$ b.setName("name")[ FD ]
Line_4 $$ Session s = openSession()-->Line_15 $$ s.close()[ FD ]
Line_16 $$ s = openSession()-->Line_35 $$ s = openSession()[ FD ]
Line_4 $$ Session s = openSession()-->Line_14 $$ s.getTransaction().commit()[ FD ]
Line_20 $$ List result = cr.addOrder(Order.asc("name")).list()-->Line_30 $$ b = (Baz) result.get(0)[ FD ]
Line_4 $$ Session s = openSession()-->Line_5 $$ s.beginTransaction()[ FD ]
Line_38 $$ b = (Baz) result.get(0)-->Line_39 $$ assertTrue(b.getSortablez().size() == 3)[ FD ]
Line_4 $$ Session s = openSession()-->Line_36 $$ s.beginTransaction()[ FD ]
Line_27 $$ s = openSession()-->Line_33 $$ s.getTransaction().commit()[ FD ]
Line_20 $$ List result = cr.addOrder(Order.asc("name")).list()-->Line_37 $$ result = s.createQuery("from Baz baz order by baz.name asc").list()[ FD ]
Line_29 $$ result = s.createQuery("from Baz baz left join fetch baz.sortablez order by baz.name asc").list()-->Line_38 $$ b = (Baz) result.get(0)[ FD ]
Line_16 $$ s = openSession()-->Line_33 $$ s.getTransaction().commit()[ FD ]
Line_22 $$ b = (Baz) result.get(0)-->Line_30 $$ b = (Baz) result.get(0)[ FD ]
Line_4 $$ Session s = openSession()-->Line_26 $$ s.close()[ FD ]
Line_30 $$ b = (Baz) result.get(0)-->Line_39 $$ assertTrue(b.getSortablez().size() == 3)[ FD ]
Line_16 $$ s = openSession()-->Line_17 $$ s.beginTransaction()[ FD ]
Line_35 $$ s = openSession()-->Line_42 $$ s.getTransaction().commit()[ FD ]
Line_6 $$ Baz b = new Baz()-->Line_31 $$ assertTrue(b.getSortablez().size() == 3)[ FD ]
Line_20 $$ List result = cr.addOrder(Order.asc("name")).list()-->Line_22 $$ b = (Baz) result.get(0)[ FD ]
Line_30 $$ b = (Baz) result.get(0)-->Line_41 $$ s.delete(b)[ FD ]
Line_35 $$ s = openSession()-->Line_43 $$ s.close()[ FD ]
Line_20 $$ List result = cr.addOrder(Order.asc("name")).list()-->Line_29 $$ result = s.createQuery("from Baz baz left join fetch baz.sortablez order by baz.name asc").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_28 $$ s.beginTransaction()[ FD ]
Line_30 $$ b = (Baz) result.get(0)-->Line_32 $$ assertEquals(((Sortable) b.getSortablez().iterator().next()).getName(), "bar")[ FD ]
Line_35 $$ s = openSession()-->Line_37 $$ result = s.createQuery("from Baz baz order by baz.name asc").list()[ FD ]
Line_38 $$ b = (Baz) result.get(0)-->Line_41 $$ s.delete(b)[ FD ]
Line_37 $$ result = s.createQuery("from Baz baz order by baz.name asc").list()-->Line_38 $$ b = (Baz) result.get(0)[ FD ]
Line_29 $$ result = s.createQuery("from Baz baz left join fetch baz.sortablez order by baz.name asc").list()-->Line_37 $$ result = s.createQuery("from Baz baz order by baz.name asc").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_17 $$ s.beginTransaction()[ FD ]
Line_22 $$ b = (Baz) result.get(0)-->Line_32 $$ assertEquals(((Sortable) b.getSortablez().iterator().next()).getName(), "bar")[ FD ]
Line_16 $$ s = openSession()-->Line_36 $$ s.beginTransaction()[ FD ]
Line_22 $$ b = (Baz) result.get(0)-->Line_40 $$ assertEquals(((Sortable) b.getSortablez().iterator().next()).getName(), "bar")[ FD ]
Line_8 $$ SortedSet ss = new TreeSet()-->Line_11 $$ ss.add(new Sortable("baz"))[ FD ]
Line_27 $$ s = openSession()-->Line_28 $$ s.beginTransaction()[ FD ]
Line_4 $$ Session s = openSession()-->Line_35 $$ s = openSession()[ FD ]
Line_8 $$ SortedSet ss = new TreeSet()-->Line_10 $$ ss.add(new Sortable("bar"))[ FD ]
Line_27 $$ s = openSession()-->Line_37 $$ result = s.createQuery("from Baz baz order by baz.name asc").list()[ FD ]
Line_16 $$ s = openSession()-->Line_41 $$ s.delete(b)[ FD ]
Line_20 $$ List result = cr.addOrder(Order.asc("name")).list()-->Line_21 $$ assertTrue(result.size() == 1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_13 $$ s.save(b)[ FD ]
Line_22 $$ b = (Baz) result.get(0)-->Line_23 $$ assertTrue(b.getSortablez().size() == 3)[ FD ]
Line_30 $$ b = (Baz) result.get(0)-->Line_31 $$ assertTrue(b.getSortablez().size() == 3)[ FD ]
Line_6 $$ Baz b = new Baz()-->Line_32 $$ assertEquals(((Sortable) b.getSortablez().iterator().next()).getName(), "bar")[ FD ]
Line_16 $$ s = openSession()-->Line_25 $$ s.getTransaction().commit()[ FD ]
Line_18 $$ Criteria cr = s.createCriteria(Baz.class)-->Line_20 $$ List result = cr.addOrder(Order.asc("name")).list()[ FD ]
Line_22 $$ b = (Baz) result.get(0)-->Line_24 $$ assertEquals(((Sortable) b.getSortablez().iterator().next()).getName(), "bar")[ FD ]
Line_4 $$ Session s = openSession()-->Line_25 $$ s.getTransaction().commit()[ FD ]
Line_16 $$ s = openSession()-->Line_29 $$ result = s.createQuery("from Baz baz left join fetch baz.sortablez order by baz.name asc").list()[ FD ]
Line_22 $$ b = (Baz) result.get(0)-->Line_38 $$ b = (Baz) result.get(0)[ FD ]
Line_4 $$ Session s = openSession()-->Line_42 $$ s.getTransaction().commit()[ FD ]
Line_16 $$ s = openSession()-->Line_42 $$ s.getTransaction().commit()[ FD ]
Line_4 $$ Session s = openSession()-->Line_16 $$ s = openSession()[ FD ]
Line_6 $$ Baz b = new Baz()-->Line_12 $$ b.setSortablez(ss)[ FD ]
Line_4 $$ Session s = openSession()-->Line_34 $$ s.close()[ FD ]
Line_22 $$ b = (Baz) result.get(0)-->Line_39 $$ assertTrue(b.getSortablez().size() == 3)[ FD ]
Line_6 $$ Baz b = new Baz()-->Line_40 $$ assertEquals(((Sortable) b.getSortablez().iterator().next()).getName(), "bar")[ FD ]
Line_8 $$ SortedSet ss = new TreeSet()-->Line_9 $$ ss.add(new Sortable("foo"))[ FD ]
Line_22 $$ b = (Baz) result.get(0)-->Line_41 $$ s.delete(b)[ FD ]
Line_27 $$ s = openSession()-->Line_34 $$ s.close()[ FD ]
Line_27 $$ s = openSession()-->Line_36 $$ s.beginTransaction()[ FD ]
Line_4 $$ Session s = openSession()-->Line_41 $$ s.delete(b)[ FD ]
Line_4 $$ Session s = openSession()-->Line_27 $$ s = openSession()[ FD ]
Line_30 $$ b = (Baz) result.get(0)-->Line_38 $$ b = (Baz) result.get(0)[ FD ]
Line_35 $$ s = openSession()-->Line_36 $$ s.beginTransaction()[ FD ]
Line_27 $$ s = openSession()-->Line_29 $$ result = s.createQuery("from Baz baz left join fetch baz.sortablez order by baz.name asc").list()[ FD ]
Line_16 $$ s = openSession()-->Line_26 $$ s.close()[ FD ]
Line_18 $$ Criteria cr = s.createCriteria(Baz.class)-->Line_19 $$ cr.setFetchMode("topGlarchez", FetchMode.SELECT)[ FD ]
Line_4 $$ Session s = openSession()-->Line_33 $$ s.getTransaction().commit()[ FD ]
Line_30 $$ b = (Baz) result.get(0)-->Line_40 $$ assertEquals(((Sortable) b.getSortablez().iterator().next()).getName(), "bar")[ FD ]
Line_6 $$ Baz b = new Baz()-->Line_38 $$ b = (Baz) result.get(0)[ FD ]
Line_4 $$ Session s = openSession()-->Line_18 $$ Criteria cr = s.createCriteria(Baz.class)[ FD ]
Line_16 $$ s = openSession()-->Line_37 $$ result = s.createQuery("from Baz baz order by baz.name asc").list()[ FD ]
Line_35 $$ s = openSession()-->Line_41 $$ s.delete(b)[ FD ]
Line_22 $$ b = (Baz) result.get(0)-->Line_31 $$ assertTrue(b.getSortablez().size() == 3)[ FD ]
Line_16 $$ s = openSession()-->Line_43 $$ s.close()[ FD ]
Line_27 $$ s = openSession()-->Line_41 $$ s.delete(b)[ FD ]
Line_4 $$ Session s = openSession()-->Line_29 $$ result = s.createQuery("from Baz baz left join fetch baz.sortablez order by baz.name asc").list()[ FD ]
Line_6 $$ Baz b = new Baz()-->Line_30 $$ b = (Baz) result.get(0)[ FD ]
Line_6 $$ Baz b = new Baz()-->Line_24 $$ assertEquals(((Sortable) b.getSortablez().iterator().next()).getName(), "bar")[ FD ]
Line_16 $$ s = openSession()-->Line_18 $$ Criteria cr = s.createCriteria(Baz.class)[ FD ]
Line_4 $$ Session s = openSession()-->Line_43 $$ s.close()[ FD ]
Line_6 $$ Baz b = new Baz()-->Line_23 $$ assertTrue(b.getSortablez().size() == 3)[ FD ]
Line_27 $$ s = openSession()-->Line_35 $$ s = openSession()[ FD ]
Line_8 $$ SortedSet ss = new TreeSet()-->Line_12 $$ b.setSortablez(ss)[ FD ]
