Line_10 $$ int cmp = prev == null ? -1 : comparator.compare(prev, t)-->Line_11 $$ if (cmp < 0) [ FD ]
Line_6 $$ T t = list.get(i)-->Line_10 $$ int cmp = prev == null ? -1 : comparator.compare(prev, t)[ FD ]
Line_5 $$ for (int i = 0; i < list.size(); i++) -->Line_10 $$ int cmp = prev == null ? -1 : comparator.compare(prev, t)[ CD ]
Line_4 $$ List<T> result = null-->Line_16 $$ result = new ArrayList<T>(list.size())[ FD ]
Line_5 $$ for (int i = 0; i < list.size(); i++) -->Line_6 $$ T t = list.get(i)[ CD ]
Line_2 $$ public static <T> List<T> removeDuplicatesFromSorted(@NotNull List<T> list, @NotNull Comparator<? super T> comparator) -->Line_17 $$ result.addAll(list.subList(0, i))[ FD ]
Line_12 $$ if (result != null)-->Line_13 $$ result.add(t)[ CD ]
Line_15 $$ if (result == null) -->Line_16 $$ result = new ArrayList<T>(list.size())[ CD ]
Line_16 $$ result = new ArrayList<T>(list.size())-->Line_17 $$ result.addAll(list.subList(0, i))[ FD ]
Line_2 $$ public static <T> List<T> removeDuplicatesFromSorted(@NotNull List<T> list, @NotNull Comparator<? super T> comparator) -->Line_24 $$ return result == null ? list : result[ CD ]
Line_3 $$ T prev = null-->Line_10 $$ int cmp = prev == null ? -1 : comparator.compare(prev, t)[ FD ]
Line_6 $$ T t = list.get(i)-->Line_13 $$ result.add(t)[ FD ]
Line_2 $$ public static <T> List<T> removeDuplicatesFromSorted(@NotNull List<T> list, @NotNull Comparator<? super T> comparator) -->Line_10 $$ int cmp = prev == null ? -1 : comparator.compare(prev, t)[ FD ]
Line_6 $$ T t = list.get(i)-->Line_22 $$ prev = t[ FD ]
Line_2 $$ public static <T> List<T> removeDuplicatesFromSorted(@NotNull List<T> list, @NotNull Comparator<? super T> comparator) -->Line_20 $$ throw new IllegalArgumentException("List must be sorted but get(" + (i - 1) + ")=" + list.get(i - 1) + " > get(" + i + ")=" + t)[ FD ]
Line_22 $$ prev = t-->Line_10 $$ int cmp = prev == null ? -1 : comparator.compare(prev, t)[ FD ]
Line_2 $$ public static <T> List<T> removeDuplicatesFromSorted(@NotNull List<T> list, @NotNull Comparator<? super T> comparator) -->Line_6 $$ T t = list.get(i)[ FD ]
Line_2 $$ public static <T> List<T> removeDuplicatesFromSorted(@NotNull List<T> list, @NotNull Comparator<? super T> comparator) -->Line_5 $$ for (int i = 0; i < list.size(); i++) [ CD ]
Line_5 $$ for (int i = 0; i < list.size(); i++) -->Line_11 $$ if (cmp < 0) [ CD ]
Line_5 $$ for (int i = 0; i < list.size(); i++) -->Line_7 $$ if (t == null) [ CD ]
Line_2 $$ public static <T> List<T> removeDuplicatesFromSorted(@NotNull List<T> list, @NotNull Comparator<? super T> comparator) -->Line_4 $$ List<T> result = null[ CD ]
Line_6 $$ T t = list.get(i)-->Line_7 $$ if (t == null) [ FD ]
Line_3 $$ T prev = null-->Line_22 $$ prev = t[ FD ]
Line_2 $$ public static <T> List<T> removeDuplicatesFromSorted(@NotNull List<T> list, @NotNull Comparator<? super T> comparator) -->Line_16 $$ result = new ArrayList<T>(list.size())[ FD ]
Line_11 $$ if (cmp < 0) -->Line_14 $$ if (cmp == 0) [ CD ]
Line_4 $$ List<T> result = null-->Line_15 $$ if (result == null) [ FD ]
Line_16 $$ result = new ArrayList<T>(list.size())-->Line_12 $$ if (result != null)[ FD ]
Line_2 $$ public static <T> List<T> removeDuplicatesFromSorted(@NotNull List<T> list, @NotNull Comparator<? super T> comparator) -->Line_3 $$ T prev = null[ CD ]
Line_2 $$ public static <T> List<T> removeDuplicatesFromSorted(@NotNull List<T> list, @NotNull Comparator<? super T> comparator) -->Line_5 $$ for (int i = 0; i < list.size(); i++) [ FD ]
Line_5 $$ for (int i = 0; i < list.size(); i++) -->Line_6 $$ T t = list.get(i)[ FD ]
Line_4 $$ List<T> result = null-->Line_17 $$ result.addAll(list.subList(0, i))[ FD ]
Line_4 $$ List<T> result = null-->Line_13 $$ result.add(t)[ FD ]
Line_14 $$ if (cmp == 0) -->Line_15 $$ if (result == null) [ CD ]
Line_5 $$ for (int i = 0; i < list.size(); i++) -->Line_22 $$ prev = t[ CD ]
Line_16 $$ result = new ArrayList<T>(list.size())-->Line_13 $$ result.add(t)[ FD ]
Line_11 $$ if (cmp < 0) -->Line_12 $$ if (result != null)[ CD ]
Line_15 $$ if (result == null) -->Line_17 $$ result.addAll(list.subList(0, i))[ CD ]
Line_10 $$ int cmp = prev == null ? -1 : comparator.compare(prev, t)-->Line_14 $$ if (cmp == 0) [ FD ]
Line_5 $$ for (int i = 0; i < list.size(); i++) -->Line_17 $$ result.addAll(list.subList(0, i))[ FD ]
Line_16 $$ result = new ArrayList<T>(list.size())-->Line_15 $$ if (result == null) [ FD ]
Line_4 $$ List<T> result = null-->Line_12 $$ if (result != null)[ FD ]
