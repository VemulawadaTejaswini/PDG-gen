Line_3 $$ final List<V> list = map2List(collection, mapper)-->Line_4 $$ V[] array = (V[]) Array.newInstance(aClass, list.size())[ FD ]
Line_2 $$ public static <T, V> V[] map2Array(@NotNull Collection<? extends T> collection, @NotNull Class<? super V> aClass, @NotNull Function<T, V> mapper) -->Line_4 $$ V[] array = (V[]) Array.newInstance(aClass, list.size())[ FD ]
Line_2 $$ public static <T, V> V[] map2Array(@NotNull Collection<? extends T> collection, @NotNull Class<? super V> aClass, @NotNull Function<T, V> mapper) -->Line_5 $$ return list.toArray(array)[ CD ]
Line_2 $$ public static <T, V> V[] map2Array(@NotNull Collection<? extends T> collection, @NotNull Class<? super V> aClass, @NotNull Function<T, V> mapper) -->Line_3 $$ final List<V> list = map2List(collection, mapper)[ FD ]
Line_2 $$ public static <T, V> V[] map2Array(@NotNull Collection<? extends T> collection, @NotNull Class<? super V> aClass, @NotNull Function<T, V> mapper) -->Line_4 $$ V[] array = (V[]) Array.newInstance(aClass, list.size())[ CD ]
Line_3 $$ final List<V> list = map2List(collection, mapper)-->Line_5 $$ return list.toArray(array)[ FD ]
Line_2 $$ public static <T, V> V[] map2Array(@NotNull Collection<? extends T> collection, @NotNull Class<? super V> aClass, @NotNull Function<T, V> mapper) -->Line_3 $$ final List<V> list = map2List(collection, mapper)[ CD ]
Line_4 $$ V[] array = (V[]) Array.newInstance(aClass, list.size())-->Line_5 $$ return list.toArray(array)[ FD ]
