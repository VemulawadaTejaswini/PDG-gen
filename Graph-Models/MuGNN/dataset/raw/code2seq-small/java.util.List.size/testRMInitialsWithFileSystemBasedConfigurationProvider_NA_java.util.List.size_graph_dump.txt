Line_7 $$ if (excludeHostsFile.exists()) -->Line_8 $$ excludeHostsFile.delete()[ CD ]
Line_25 $$ Configuration newConf = new Configuration()-->Line_27 $$ uploadConfiguration(newConf, "hadoop-policy.xml")[ FD ]
Line_17 $$ YarnConfiguration yarnConf = new YarnConfiguration()-->Line_18 $$ yarnConf.set(YarnConfiguration.YARN_ADMIN_ACL, "world:anyone:rwcda")[ FD ]
Line_24 $$ String aclsString = "alice,bob users,wheel"-->Line_67 $$ verifyServiceACLsRefresh(RTService, org.apache.hadoop.yarn.api.ApplicationClientProtocolPB.class, aclsString)[ FD ]
Line_36 $$ ResourceManager resourceManager = null-->Line_78 $$ resourceManager.stop()[ FD ]
Line_13 $$ PrintWriter fileWriter = new PrintWriter(excludeHostsFile)-->Line_14 $$ fileWriter.write("0.0.0.0:123")[ FD ]
Line_13 $$ PrintWriter fileWriter = new PrintWriter(excludeHostsFile)-->Line_15 $$ fileWriter.close()[ FD ]
Line_39 $$ resourceManager = new ResourceManager()-->Line_40 $$ resourceManager.init(configuration)[ FD ]
Line_36 $$ ResourceManager resourceManager = null-->Line_39 $$ resourceManager = new ResourceManager()[ FD ]
Line_36 $$ ResourceManager resourceManager = null-->Line_77 $$ if (resourceManager != null) [ FD ]
Line_17 $$ YarnConfiguration yarnConf = new YarnConfiguration()-->Line_20 $$ uploadConfiguration(yarnConf, "yarn-site.xml")[ FD ]
Line_28 $$ Configuration conf = new Configuration()-->Line_30 $$ conf.set("hadoop.proxyuser.test.groups", "test_groups")[ FD ]
Line_25 $$ Configuration newConf = new Configuration()-->Line_26 $$ newConf.set("security.applicationclient.protocol.acl", aclsString)[ FD ]
Line_24 $$ String aclsString = "alice,bob users,wheel"-->Line_61 $$ verifyServiceACLsRefresh(clientRMServiceServiceManager, org.apache.hadoop.yarn.api.ApplicationClientProtocolPB.class, aclsString)[ FD ]
Line_17 $$ YarnConfiguration yarnConf = new YarnConfiguration()-->Line_19 $$ yarnConf.set(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH, this.workingPath + "/excludeHosts")[ FD ]
Line_39 $$ resourceManager = new ResourceManager()-->Line_78 $$ resourceManager.stop()[ FD ]
Line_36 $$ ResourceManager resourceManager = null-->Line_40 $$ resourceManager.init(configuration)[ FD ]
Line_36 $$ ResourceManager resourceManager = null-->Line_41 $$ resourceManager.start()[ FD ]
Line_28 $$ Configuration conf = new Configuration()-->Line_31 $$ conf.set("hadoop.proxyuser.test.hosts", "test_hosts")[ FD ]
Line_39 $$ resourceManager = new ResourceManager()-->Line_77 $$ if (resourceManager != null) [ FD ]
Line_24 $$ String aclsString = "alice,bob users,wheel"-->Line_58 $$ verifyServiceACLsRefresh(adminServiceServiceManager, org.apache.hadoop.yarn.api.ApplicationClientProtocolPB.class, aclsString)[ FD ]
Line_77 $$ if (resourceManager != null) -->Line_78 $$ resourceManager.stop()[ CD ]
Line_10 $$ if (!excludeHostsFile.createNewFile()) -->Line_11 $$ Assert.fail("Can not create " + "excludeHosts")[ CD ]
Line_54 $$ int maxAppsAfter = cs.getConfiguration().getMaximumSystemApplications()-->Line_55 $$ Assert.assertEquals(maxAppsAfter, 5000)[ FD ]
Line_21 $$ CapacitySchedulerConfiguration csConf = new CapacitySchedulerConfiguration()-->Line_23 $$ uploadConfiguration(csConf, "capacity-scheduler.xml")[ FD ]
Line_28 $$ Configuration conf = new Configuration()-->Line_32 $$ conf.setClass(CommonConfigurationKeys.HADOOP_SECURITY_GROUP_MAPPING, MockUnixGroupsMapping.class, GroupMappingServiceProvider.class)[ FD ]
Line_39 $$ resourceManager = new ResourceManager()-->Line_41 $$ resourceManager.start()[ FD ]
Line_28 $$ Configuration conf = new Configuration()-->Line_29 $$ conf.setBoolean(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, true)[ FD ]
Line_28 $$ Configuration conf = new Configuration()-->Line_33 $$ uploadConfiguration(conf, "core-site.xml")[ FD ]
Line_21 $$ CapacitySchedulerConfiguration csConf = new CapacitySchedulerConfiguration()-->Line_22 $$ csConf.set("yarn.scheduler.capacity.maximum-applications", "5000")[ FD ]
Line_24 $$ String aclsString = "alice,bob users,wheel"-->Line_64 $$ verifyServiceACLsRefresh(appMasterService, org.apache.hadoop.yarn.api.ApplicationClientProtocolPB.class, aclsString)[ FD ]
Line_24 $$ String aclsString = "alice,bob users,wheel"-->Line_26 $$ newConf.set("security.applicationclient.protocol.acl", aclsString)[ FD ]
