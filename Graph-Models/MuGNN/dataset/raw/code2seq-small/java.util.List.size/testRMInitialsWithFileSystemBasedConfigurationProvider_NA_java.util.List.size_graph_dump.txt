Line_47 $$ CapacityScheduler cs = (CapacityScheduler) resourceManager.getRMContext().getScheduler()-->Line_48 $$ int maxAppsAfter = cs.getConfiguration().getMaximumSystemApplications()[ FD ]
Line_2 $$ public void testRMInitialsWithFileSystemBasedConfigurationProvider() throws Exception -->Line_19 $$ CapacitySchedulerConfiguration csConf = new CapacitySchedulerConfiguration()[ CD ]
Line_2 $$ public void testRMInitialsWithFileSystemBasedConfigurationProvider() throws Exception -->Line_32 $$ MockUnixGroupsMapping.updateGroups()[ CD ]
Line_2 $$ public void testRMInitialsWithFileSystemBasedConfigurationProvider() throws Exception -->Line_33 $$ ResourceManager resourceManager = null[ CD ]
Line_62 $$ List<String> groupAfter = Groups.getUserToGroupsMappingService(configuration).getGroups(UserGroupInformation.getCurrentUser().getUserName())-->Line_63 $$ Assert.assertTrue(groupAfter.contains("test_group_D") && groupAfter.contains("test_group_E") && groupAfter.contains("test_group_F") && groupAfter.size() == 3)[ FD ]
Line_2 $$ public void testRMInitialsWithFileSystemBasedConfigurationProvider() throws Exception -->Line_15 $$ YarnConfiguration yarnConf = new YarnConfiguration()[ CD ]
Line_4 $$ final File excludeHostsFile = new File(tmpDir.toString(), "excludeHosts")-->Line_14 $$ uploadToRemoteFileSystem(new Path(excludeHostsFile.getAbsolutePath()))[ FD ]
Line_15 $$ YarnConfiguration yarnConf = new YarnConfiguration()-->Line_16 $$ yarnConf.set(YarnConfiguration.YARN_ADMIN_ACL, "world:anyone:rwcda")[ FD ]
Line_2 $$ public void testRMInitialsWithFileSystemBasedConfigurationProvider() throws Exception -->Line_14 $$ uploadToRemoteFileSystem(new Path(excludeHostsFile.getAbsolutePath()))[ CD ]
Line_19 $$ CapacitySchedulerConfiguration csConf = new CapacitySchedulerConfiguration()-->Line_21 $$ uploadConfiguration(csConf, "capacity-scheduler.xml")[ FD ]
Line_22 $$ String aclsString = "alice,bob users,wheel"-->Line_53 $$ verifyServiceACLsRefresh(clientRMServiceServiceManager, org.apache.hadoop.yarn.api.ApplicationClientProtocolPB.class, aclsString)[ FD ]
Line_52 $$ ServiceAuthorizationManager clientRMServiceServiceManager = resourceManager.getRMContext().getClientRMService().getServer().getServiceAuthorizationManager()-->Line_53 $$ verifyServiceACLsRefresh(clientRMServiceServiceManager, org.apache.hadoop.yarn.api.ApplicationClientProtocolPB.class, aclsString)[ FD ]
Line_36 $$ resourceManager = new ResourceManager()-->Line_37 $$ resourceManager.init(configuration)[ FD ]
Line_2 $$ public void testRMInitialsWithFileSystemBasedConfigurationProvider() throws Exception -->Line_11 $$ PrintWriter fileWriter = new PrintWriter(excludeHostsFile)[ CD ]
Line_2 $$ public void testRMInitialsWithFileSystemBasedConfigurationProvider() throws Exception -->Line_27 $$ conf.setBoolean(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, true)[ CD ]
Line_26 $$ Configuration conf = new Configuration()-->Line_29 $$ conf.set("hadoop.proxyuser.test.hosts", "test_hosts")[ FD ]
Line_23 $$ Configuration newConf = new Configuration()-->Line_24 $$ newConf.set("security.applicationclient.protocol.acl", aclsString)[ FD ]
Line_42 $$ Set<String> excludeHosts = resourceManager.getRMContext().getNodesListManager().getHostsReader().getExcludedHosts()-->Line_43 $$ Assert.assertTrue(excludeHosts.size() == 1)[ FD ]
Line_2 $$ public void testRMInitialsWithFileSystemBasedConfigurationProvider() throws Exception -->Line_13 $$ fileWriter.close()[ CD ]
Line_2 $$ public void testRMInitialsWithFileSystemBasedConfigurationProvider() throws Exception -->Line_25 $$ uploadConfiguration(newConf, "hadoop-policy.xml")[ CD ]
Line_65 $$ if (resourceManager != null) -->Line_66 $$ resourceManager.stop()[ CD ]
Line_19 $$ CapacitySchedulerConfiguration csConf = new CapacitySchedulerConfiguration()-->Line_20 $$ csConf.set("yarn.scheduler.capacity.maximum-applications", "5000")[ FD ]
Line_2 $$ public void testRMInitialsWithFileSystemBasedConfigurationProvider() throws Exception -->Line_22 $$ String aclsString = "alice,bob users,wheel"[ CD ]
Line_11 $$ PrintWriter fileWriter = new PrintWriter(excludeHostsFile)-->Line_13 $$ fileWriter.close()[ FD ]
Line_54 $$ ServiceAuthorizationManager appMasterService = resourceManager.getRMContext().getApplicationMasterService().getServer().getServiceAuthorizationManager()-->Line_55 $$ verifyServiceACLsRefresh(appMasterService, org.apache.hadoop.yarn.api.ApplicationClientProtocolPB.class, aclsString)[ FD ]
Line_36 $$ resourceManager = new ResourceManager()-->Line_47 $$ CapacityScheduler cs = (CapacityScheduler) resourceManager.getRMContext().getScheduler()[ FD ]
Line_2 $$ public void testRMInitialsWithFileSystemBasedConfigurationProvider() throws Exception -->Line_12 $$ fileWriter.write("0.0.0.0:123")[ CD ]
Line_50 $$ ServiceAuthorizationManager adminServiceServiceManager = resourceManager.adminService.getServer().getServiceAuthorizationManager()-->Line_51 $$ verifyServiceACLsRefresh(adminServiceServiceManager, org.apache.hadoop.yarn.api.ApplicationClientProtocolPB.class, aclsString)[ FD ]
Line_22 $$ String aclsString = "alice,bob users,wheel"-->Line_24 $$ newConf.set("security.applicationclient.protocol.acl", aclsString)[ FD ]
Line_33 $$ ResourceManager resourceManager = null-->Line_54 $$ ServiceAuthorizationManager appMasterService = resourceManager.getRMContext().getApplicationMasterService().getServer().getServiceAuthorizationManager()[ FD ]
Line_33 $$ ResourceManager resourceManager = null-->Line_38 $$ resourceManager.start()[ FD ]
Line_11 $$ PrintWriter fileWriter = new PrintWriter(excludeHostsFile)-->Line_12 $$ fileWriter.write("0.0.0.0:123")[ FD ]
Line_36 $$ resourceManager = new ResourceManager()-->Line_66 $$ resourceManager.stop()[ FD ]
Line_15 $$ YarnConfiguration yarnConf = new YarnConfiguration()-->Line_18 $$ uploadConfiguration(yarnConf, "yarn-site.xml")[ FD ]
Line_33 $$ ResourceManager resourceManager = null-->Line_52 $$ ServiceAuthorizationManager clientRMServiceServiceManager = resourceManager.getRMContext().getClientRMService().getServer().getServiceAuthorizationManager()[ FD ]
Line_23 $$ Configuration newConf = new Configuration()-->Line_25 $$ uploadConfiguration(newConf, "hadoop-policy.xml")[ FD ]
Line_2 $$ public void testRMInitialsWithFileSystemBasedConfigurationProvider() throws Exception -->Line_24 $$ newConf.set("security.applicationclient.protocol.acl", aclsString)[ CD ]
Line_22 $$ String aclsString = "alice,bob users,wheel"-->Line_51 $$ verifyServiceACLsRefresh(adminServiceServiceManager, org.apache.hadoop.yarn.api.ApplicationClientProtocolPB.class, aclsString)[ FD ]
Line_8 $$ if (!excludeHostsFile.createNewFile()) -->Line_9 $$ Assert.fail("Can not create " + "excludeHosts")[ CD ]
Line_2 $$ public void testRMInitialsWithFileSystemBasedConfigurationProvider() throws Exception -->Line_30 $$ conf.setClass(CommonConfigurationKeys.HADOOP_SECURITY_GROUP_MAPPING, MockUnixGroupsMapping.class, GroupMappingServiceProvider.class)[ CD ]
Line_36 $$ resourceManager = new ResourceManager()-->Line_42 $$ Set<String> excludeHosts = resourceManager.getRMContext().getNodesListManager().getHostsReader().getExcludedHosts()[ FD ]
Line_15 $$ YarnConfiguration yarnConf = new YarnConfiguration()-->Line_17 $$ yarnConf.set(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH, this.workingPath + "/excludeHosts")[ FD ]
Line_2 $$ public void testRMInitialsWithFileSystemBasedConfigurationProvider() throws Exception -->Line_18 $$ uploadConfiguration(yarnConf, "yarn-site.xml")[ CD ]
Line_2 $$ public void testRMInitialsWithFileSystemBasedConfigurationProvider() throws Exception -->Line_3 $$ configuration.set(YarnConfiguration.RM_CONFIGURATION_PROVIDER_CLASS, "org.apache.hadoop.yarn.FileSystemBasedConfigurationProvider")[ CD ]
Line_2 $$ public void testRMInitialsWithFileSystemBasedConfigurationProvider() throws Exception -->Line_20 $$ csConf.set("yarn.scheduler.capacity.maximum-applications", "5000")[ CD ]
Line_26 $$ Configuration conf = new Configuration()-->Line_30 $$ conf.setClass(CommonConfigurationKeys.HADOOP_SECURITY_GROUP_MAPPING, MockUnixGroupsMapping.class, GroupMappingServiceProvider.class)[ FD ]
Line_4 $$ final File excludeHostsFile = new File(tmpDir.toString(), "excludeHosts")-->Line_8 $$ if (!excludeHostsFile.createNewFile()) [ FD ]
Line_36 $$ resourceManager = new ResourceManager()-->Line_65 $$ if (resourceManager != null) [ FD ]
Line_2 $$ public void testRMInitialsWithFileSystemBasedConfigurationProvider() throws Exception -->Line_5 $$ if (excludeHostsFile.exists()) [ CD ]
Line_33 $$ ResourceManager resourceManager = null-->Line_47 $$ CapacityScheduler cs = (CapacityScheduler) resourceManager.getRMContext().getScheduler()[ FD ]
Line_48 $$ int maxAppsAfter = cs.getConfiguration().getMaximumSystemApplications()-->Line_49 $$ Assert.assertEquals(maxAppsAfter, 5000)[ FD ]
Line_33 $$ ResourceManager resourceManager = null-->Line_66 $$ resourceManager.stop()[ FD ]
Line_26 $$ Configuration conf = new Configuration()-->Line_28 $$ conf.set("hadoop.proxyuser.test.groups", "test_groups")[ FD ]
Line_36 $$ resourceManager = new ResourceManager()-->Line_56 $$ ServiceAuthorizationManager RTService = resourceManager.getRMContext().getResourceTrackerService().getServer().getServiceAuthorizationManager()[ FD ]
Line_22 $$ String aclsString = "alice,bob users,wheel"-->Line_55 $$ verifyServiceACLsRefresh(appMasterService, org.apache.hadoop.yarn.api.ApplicationClientProtocolPB.class, aclsString)[ FD ]
Line_2 $$ public void testRMInitialsWithFileSystemBasedConfigurationProvider() throws Exception -->Line_17 $$ yarnConf.set(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH, this.workingPath + "/excludeHosts")[ CD ]
Line_4 $$ final File excludeHostsFile = new File(tmpDir.toString(), "excludeHosts")-->Line_6 $$ excludeHostsFile.delete()[ FD ]
Line_33 $$ ResourceManager resourceManager = null-->Line_36 $$ resourceManager = new ResourceManager()[ FD ]
Line_2 $$ public void testRMInitialsWithFileSystemBasedConfigurationProvider() throws Exception -->Line_26 $$ Configuration conf = new Configuration()[ CD ]
Line_5 $$ if (excludeHostsFile.exists()) -->Line_6 $$ excludeHostsFile.delete()[ CD ]
Line_36 $$ resourceManager = new ResourceManager()-->Line_38 $$ resourceManager.start()[ FD ]
Line_2 $$ public void testRMInitialsWithFileSystemBasedConfigurationProvider() throws Exception -->Line_21 $$ uploadConfiguration(csConf, "capacity-scheduler.xml")[ CD ]
Line_33 $$ ResourceManager resourceManager = null-->Line_42 $$ Set<String> excludeHosts = resourceManager.getRMContext().getNodesListManager().getHostsReader().getExcludedHosts()[ FD ]
Line_56 $$ ServiceAuthorizationManager RTService = resourceManager.getRMContext().getResourceTrackerService().getServer().getServiceAuthorizationManager()-->Line_57 $$ verifyServiceACLsRefresh(RTService, org.apache.hadoop.yarn.api.ApplicationClientProtocolPB.class, aclsString)[ FD ]
Line_26 $$ Configuration conf = new Configuration()-->Line_31 $$ uploadConfiguration(conf, "core-site.xml")[ FD ]
Line_33 $$ ResourceManager resourceManager = null-->Line_37 $$ resourceManager.init(configuration)[ FD ]
Line_2 $$ public void testRMInitialsWithFileSystemBasedConfigurationProvider() throws Exception -->Line_4 $$ final File excludeHostsFile = new File(tmpDir.toString(), "excludeHosts")[ CD ]
Line_2 $$ public void testRMInitialsWithFileSystemBasedConfigurationProvider() throws Exception -->Line_31 $$ uploadConfiguration(conf, "core-site.xml")[ CD ]
Line_42 $$ Set<String> excludeHosts = resourceManager.getRMContext().getNodesListManager().getHostsReader().getExcludedHosts()-->Line_44 $$ Assert.assertTrue(excludeHosts.contains("0.0.0.0:123"))[ FD ]
Line_22 $$ String aclsString = "alice,bob users,wheel"-->Line_57 $$ verifyServiceACLsRefresh(RTService, org.apache.hadoop.yarn.api.ApplicationClientProtocolPB.class, aclsString)[ FD ]
Line_33 $$ ResourceManager resourceManager = null-->Line_56 $$ ServiceAuthorizationManager RTService = resourceManager.getRMContext().getResourceTrackerService().getServer().getServiceAuthorizationManager()[ FD ]
Line_2 $$ public void testRMInitialsWithFileSystemBasedConfigurationProvider() throws Exception -->Line_8 $$ if (!excludeHostsFile.createNewFile()) [ CD ]
Line_4 $$ final File excludeHostsFile = new File(tmpDir.toString(), "excludeHosts")-->Line_5 $$ if (excludeHostsFile.exists()) [ FD ]
Line_45 $$ String aclStringAfter = resourceManager.adminService.getAccessControlList().getAclString().trim()-->Line_46 $$ Assert.assertEquals(aclStringAfter, "world:anyone:rwcda")[ FD ]
Line_2 $$ public void testRMInitialsWithFileSystemBasedConfigurationProvider() throws Exception -->Line_16 $$ yarnConf.set(YarnConfiguration.YARN_ADMIN_ACL, "world:anyone:rwcda")[ CD ]
Line_2 $$ public void testRMInitialsWithFileSystemBasedConfigurationProvider() throws Exception -->Line_28 $$ conf.set("hadoop.proxyuser.test.groups", "test_groups")[ CD ]
Line_2 $$ public void testRMInitialsWithFileSystemBasedConfigurationProvider() throws Exception -->Line_29 $$ conf.set("hadoop.proxyuser.test.hosts", "test_hosts")[ CD ]
Line_36 $$ resourceManager = new ResourceManager()-->Line_52 $$ ServiceAuthorizationManager clientRMServiceServiceManager = resourceManager.getRMContext().getClientRMService().getServer().getServiceAuthorizationManager()[ FD ]
Line_2 $$ public void testRMInitialsWithFileSystemBasedConfigurationProvider() throws Exception -->Line_23 $$ Configuration newConf = new Configuration()[ CD ]
Line_26 $$ Configuration conf = new Configuration()-->Line_27 $$ conf.setBoolean(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, true)[ FD ]
Line_36 $$ resourceManager = new ResourceManager()-->Line_54 $$ ServiceAuthorizationManager appMasterService = resourceManager.getRMContext().getApplicationMasterService().getServer().getServiceAuthorizationManager()[ FD ]
Line_33 $$ ResourceManager resourceManager = null-->Line_65 $$ if (resourceManager != null) [ FD ]
