Line_6 $$ ValidPerson person = new ValidPerson()-->Line_8 $$ validator.validate(person, result)[ FD ]
Line_10 $$ FieldError fieldError = result.getFieldError("name")-->Line_19 $$ assertEquals("address.street", fieldError.getField())[ FD ]
Line_7 $$ BeanPropertyBindingResult result = new BeanPropertyBindingResult(person, "person")-->Line_10 $$ FieldError fieldError = result.getFieldError("name")[ FD ]
Line_7 $$ BeanPropertyBindingResult result = new BeanPropertyBindingResult(person, "person")-->Line_18 $$ fieldError = result.getFieldError("address.street")[ FD ]
Line_12 $$ List<String> errorCodes = Arrays.asList(fieldError.getCodes())-->Line_16 $$ assertTrue(errorCodes.contains("NotNull.java.lang.String"))[ FD ]
Line_10 $$ FieldError fieldError = result.getFieldError("name")-->Line_18 $$ fieldError = result.getFieldError("address.street")[ FD ]
Line_12 $$ List<String> errorCodes = Arrays.asList(fieldError.getCodes())-->Line_17 $$ assertTrue(errorCodes.contains("NotNull"))[ FD ]
Line_12 $$ List<String> errorCodes = Arrays.asList(fieldError.getCodes())-->Line_13 $$ assertEquals(4, errorCodes.size())[ FD ]
Line_7 $$ BeanPropertyBindingResult result = new BeanPropertyBindingResult(person, "person")-->Line_9 $$ assertEquals(2, result.getErrorCount())[ FD ]
Line_20 $$ errorCodes = Arrays.asList(fieldError.getCodes())-->Line_26 $$ assertTrue(errorCodes.contains("NotNull"))[ FD ]
Line_12 $$ List<String> errorCodes = Arrays.asList(fieldError.getCodes())-->Line_26 $$ assertTrue(errorCodes.contains("NotNull"))[ FD ]
Line_20 $$ errorCodes = Arrays.asList(fieldError.getCodes())-->Line_22 $$ assertTrue(errorCodes.contains("NotNull.person.address.street"))[ FD ]
Line_18 $$ fieldError = result.getFieldError("address.street")-->Line_19 $$ assertEquals("address.street", fieldError.getField())[ FD ]
Line_20 $$ errorCodes = Arrays.asList(fieldError.getCodes())-->Line_23 $$ assertTrue(errorCodes.contains("NotNull.address.street"))[ FD ]
Line_18 $$ fieldError = result.getFieldError("address.street")-->Line_20 $$ errorCodes = Arrays.asList(fieldError.getCodes())[ FD ]
Line_10 $$ FieldError fieldError = result.getFieldError("name")-->Line_11 $$ assertEquals("name", fieldError.getField())[ FD ]
Line_12 $$ List<String> errorCodes = Arrays.asList(fieldError.getCodes())-->Line_23 $$ assertTrue(errorCodes.contains("NotNull.address.street"))[ FD ]
Line_7 $$ BeanPropertyBindingResult result = new BeanPropertyBindingResult(person, "person")-->Line_8 $$ validator.validate(person, result)[ FD ]
Line_4 $$ LocalValidatorFactoryBean validator = new LocalValidatorFactoryBean()-->Line_8 $$ validator.validate(person, result)[ FD ]
Line_10 $$ FieldError fieldError = result.getFieldError("name")-->Line_12 $$ List<String> errorCodes = Arrays.asList(fieldError.getCodes())[ FD ]
Line_12 $$ List<String> errorCodes = Arrays.asList(fieldError.getCodes())-->Line_14 $$ assertTrue(errorCodes.contains("NotNull.person.name"))[ FD ]
Line_20 $$ errorCodes = Arrays.asList(fieldError.getCodes())-->Line_25 $$ assertTrue(errorCodes.contains("NotNull.java.lang.String"))[ FD ]
Line_12 $$ List<String> errorCodes = Arrays.asList(fieldError.getCodes())-->Line_15 $$ assertTrue(errorCodes.contains("NotNull.name"))[ FD ]
Line_10 $$ FieldError fieldError = result.getFieldError("name")-->Line_20 $$ errorCodes = Arrays.asList(fieldError.getCodes())[ FD ]
Line_20 $$ errorCodes = Arrays.asList(fieldError.getCodes())-->Line_21 $$ assertEquals(5, errorCodes.size())[ FD ]
Line_20 $$ errorCodes = Arrays.asList(fieldError.getCodes())-->Line_24 $$ assertTrue(errorCodes.contains("NotNull.street"))[ FD ]
Line_12 $$ List<String> errorCodes = Arrays.asList(fieldError.getCodes())-->Line_24 $$ assertTrue(errorCodes.contains("NotNull.street"))[ FD ]
Line_12 $$ List<String> errorCodes = Arrays.asList(fieldError.getCodes())-->Line_21 $$ assertEquals(5, errorCodes.size())[ FD ]
Line_4 $$ LocalValidatorFactoryBean validator = new LocalValidatorFactoryBean()-->Line_5 $$ validator.afterPropertiesSet()[ FD ]
Line_12 $$ List<String> errorCodes = Arrays.asList(fieldError.getCodes())-->Line_25 $$ assertTrue(errorCodes.contains("NotNull.java.lang.String"))[ FD ]
Line_12 $$ List<String> errorCodes = Arrays.asList(fieldError.getCodes())-->Line_20 $$ errorCodes = Arrays.asList(fieldError.getCodes())[ FD ]
Line_12 $$ List<String> errorCodes = Arrays.asList(fieldError.getCodes())-->Line_22 $$ assertTrue(errorCodes.contains("NotNull.person.address.street"))[ FD ]
