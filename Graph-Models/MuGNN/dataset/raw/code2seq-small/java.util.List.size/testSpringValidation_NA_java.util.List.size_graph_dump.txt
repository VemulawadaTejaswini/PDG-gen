Line_17 $$ fieldError = result.getFieldError("address.street")-->Line_19 $$ errorCodes = Arrays.asList(fieldError.getCodes())[ FD ]
Line_19 $$ errorCodes = Arrays.asList(fieldError.getCodes())-->Line_25 $$ assertTrue(errorCodes.contains("NotNull"))[ FD ]
Line_9 $$ FieldError fieldError = result.getFieldError("name")-->Line_10 $$ assertEquals("name", fieldError.getField())[ FD ]
Line_11 $$ List<String> errorCodes = Arrays.asList(fieldError.getCodes())-->Line_15 $$ assertTrue(errorCodes.contains("NotNull.java.lang.String"))[ FD ]
Line_2 $$ public void testSpringValidation() throws Exception -->Line_17 $$ fieldError = result.getFieldError("address.street")[ CD ]
Line_2 $$ public void testSpringValidation() throws Exception -->Line_13 $$ assertTrue(errorCodes.contains("NotNull.person.name"))[ CD ]
Line_19 $$ errorCodes = Arrays.asList(fieldError.getCodes())-->Line_21 $$ assertTrue(errorCodes.contains("NotNull.person.address.street"))[ FD ]
Line_11 $$ List<String> errorCodes = Arrays.asList(fieldError.getCodes())-->Line_16 $$ assertTrue(errorCodes.contains("NotNull"))[ FD ]
Line_2 $$ public void testSpringValidation() throws Exception -->Line_18 $$ assertEquals("address.street", fieldError.getField())[ CD ]
Line_11 $$ List<String> errorCodes = Arrays.asList(fieldError.getCodes())-->Line_22 $$ assertTrue(errorCodes.contains("NotNull.address.street"))[ FD ]
Line_2 $$ public void testSpringValidation() throws Exception -->Line_11 $$ List<String> errorCodes = Arrays.asList(fieldError.getCodes())[ CD ]
Line_11 $$ List<String> errorCodes = Arrays.asList(fieldError.getCodes())-->Line_20 $$ assertEquals(5, errorCodes.size())[ FD ]
Line_6 $$ BeanPropertyBindingResult result = new BeanPropertyBindingResult(person, "person")-->Line_9 $$ FieldError fieldError = result.getFieldError("name")[ FD ]
Line_2 $$ public void testSpringValidation() throws Exception -->Line_6 $$ BeanPropertyBindingResult result = new BeanPropertyBindingResult(person, "person")[ CD ]
Line_11 $$ List<String> errorCodes = Arrays.asList(fieldError.getCodes())-->Line_12 $$ assertEquals(4, errorCodes.size())[ FD ]
Line_9 $$ FieldError fieldError = result.getFieldError("name")-->Line_17 $$ fieldError = result.getFieldError("address.street")[ FD ]
Line_2 $$ public void testSpringValidation() throws Exception -->Line_3 $$ LocalValidatorFactoryBean validator = new LocalValidatorFactoryBean()[ CD ]
Line_11 $$ List<String> errorCodes = Arrays.asList(fieldError.getCodes())-->Line_23 $$ assertTrue(errorCodes.contains("NotNull.street"))[ FD ]
Line_2 $$ public void testSpringValidation() throws Exception -->Line_10 $$ assertEquals("name", fieldError.getField())[ CD ]
Line_17 $$ fieldError = result.getFieldError("address.street")-->Line_18 $$ assertEquals("address.street", fieldError.getField())[ FD ]
Line_2 $$ public void testSpringValidation() throws Exception -->Line_24 $$ assertTrue(errorCodes.contains("NotNull.java.lang.String"))[ CD ]
Line_2 $$ public void testSpringValidation() throws Exception -->Line_12 $$ assertEquals(4, errorCodes.size())[ CD ]
Line_9 $$ FieldError fieldError = result.getFieldError("name")-->Line_19 $$ errorCodes = Arrays.asList(fieldError.getCodes())[ FD ]
Line_2 $$ public void testSpringValidation() throws Exception -->Line_16 $$ assertTrue(errorCodes.contains("NotNull"))[ CD ]
Line_11 $$ List<String> errorCodes = Arrays.asList(fieldError.getCodes())-->Line_14 $$ assertTrue(errorCodes.contains("NotNull.name"))[ FD ]
Line_19 $$ errorCodes = Arrays.asList(fieldError.getCodes())-->Line_22 $$ assertTrue(errorCodes.contains("NotNull.address.street"))[ FD ]
Line_3 $$ LocalValidatorFactoryBean validator = new LocalValidatorFactoryBean()-->Line_4 $$ validator.afterPropertiesSet()[ FD ]
Line_2 $$ public void testSpringValidation() throws Exception -->Line_5 $$ ValidPerson person = new ValidPerson()[ CD ]
Line_6 $$ BeanPropertyBindingResult result = new BeanPropertyBindingResult(person, "person")-->Line_17 $$ fieldError = result.getFieldError("address.street")[ FD ]
Line_2 $$ public void testSpringValidation() throws Exception -->Line_21 $$ assertTrue(errorCodes.contains("NotNull.person.address.street"))[ CD ]
Line_2 $$ public void testSpringValidation() throws Exception -->Line_20 $$ assertEquals(5, errorCodes.size())[ CD ]
Line_2 $$ public void testSpringValidation() throws Exception -->Line_22 $$ assertTrue(errorCodes.contains("NotNull.address.street"))[ CD ]
Line_19 $$ errorCodes = Arrays.asList(fieldError.getCodes())-->Line_20 $$ assertEquals(5, errorCodes.size())[ FD ]
Line_5 $$ ValidPerson person = new ValidPerson()-->Line_7 $$ validator.validate(person, result)[ FD ]
Line_2 $$ public void testSpringValidation() throws Exception -->Line_4 $$ validator.afterPropertiesSet()[ CD ]
Line_3 $$ LocalValidatorFactoryBean validator = new LocalValidatorFactoryBean()-->Line_7 $$ validator.validate(person, result)[ FD ]
Line_2 $$ public void testSpringValidation() throws Exception -->Line_15 $$ assertTrue(errorCodes.contains("NotNull.java.lang.String"))[ CD ]
Line_2 $$ public void testSpringValidation() throws Exception -->Line_19 $$ errorCodes = Arrays.asList(fieldError.getCodes())[ CD ]
Line_2 $$ public void testSpringValidation() throws Exception -->Line_25 $$ assertTrue(errorCodes.contains("NotNull"))[ CD ]
Line_19 $$ errorCodes = Arrays.asList(fieldError.getCodes())-->Line_24 $$ assertTrue(errorCodes.contains("NotNull.java.lang.String"))[ FD ]
Line_11 $$ List<String> errorCodes = Arrays.asList(fieldError.getCodes())-->Line_13 $$ assertTrue(errorCodes.contains("NotNull.person.name"))[ FD ]
Line_2 $$ public void testSpringValidation() throws Exception -->Line_14 $$ assertTrue(errorCodes.contains("NotNull.name"))[ CD ]
Line_2 $$ public void testSpringValidation() throws Exception -->Line_23 $$ assertTrue(errorCodes.contains("NotNull.street"))[ CD ]
Line_9 $$ FieldError fieldError = result.getFieldError("name")-->Line_18 $$ assertEquals("address.street", fieldError.getField())[ FD ]
Line_11 $$ List<String> errorCodes = Arrays.asList(fieldError.getCodes())-->Line_21 $$ assertTrue(errorCodes.contains("NotNull.person.address.street"))[ FD ]
Line_19 $$ errorCodes = Arrays.asList(fieldError.getCodes())-->Line_23 $$ assertTrue(errorCodes.contains("NotNull.street"))[ FD ]
Line_11 $$ List<String> errorCodes = Arrays.asList(fieldError.getCodes())-->Line_25 $$ assertTrue(errorCodes.contains("NotNull"))[ FD ]
Line_9 $$ FieldError fieldError = result.getFieldError("name")-->Line_11 $$ List<String> errorCodes = Arrays.asList(fieldError.getCodes())[ FD ]
Line_2 $$ public void testSpringValidation() throws Exception -->Line_7 $$ validator.validate(person, result)[ CD ]
Line_6 $$ BeanPropertyBindingResult result = new BeanPropertyBindingResult(person, "person")-->Line_7 $$ validator.validate(person, result)[ FD ]
Line_6 $$ BeanPropertyBindingResult result = new BeanPropertyBindingResult(person, "person")-->Line_8 $$ assertEquals(2, result.getErrorCount())[ FD ]
Line_2 $$ public void testSpringValidation() throws Exception -->Line_8 $$ assertEquals(2, result.getErrorCount())[ CD ]
Line_11 $$ List<String> errorCodes = Arrays.asList(fieldError.getCodes())-->Line_19 $$ errorCodes = Arrays.asList(fieldError.getCodes())[ FD ]
Line_2 $$ public void testSpringValidation() throws Exception -->Line_9 $$ FieldError fieldError = result.getFieldError("name")[ CD ]
Line_11 $$ List<String> errorCodes = Arrays.asList(fieldError.getCodes())-->Line_24 $$ assertTrue(errorCodes.contains("NotNull.java.lang.String"))[ FD ]
