Line_4 $$ if (this.sessionCleanupTask != null) -->Line_5 $$ return[ CD ]
Line_12 $$ for (SockJsSession session : sessions.values()) -->Line_14 $$ if (session.getTimeSinceLastActive() > getDisconnectDelay()) [ FD ]
Line_14 $$ if (session.getTimeSinceLastActive() > getDisconnectDelay()) -->Line_16 $$ session.close()[ CD ]
Line_23 $$ if (logger.isDebugEnabled() && !removedSessionIds.isEmpty()) -->Line_24 $$ logger.debug("Closed " + removedSessionIds.size() + " sessions " + removedSessionIds)[ CD ]
Line_12 $$ for (SockJsSession session : sessions.values()) -->Line_16 $$ session.close()[ FD ]
Line_8 $$ this.sessionCleanupTask = getTaskScheduler().scheduleAtFixedRate(new Runnable() -->Line_23 $$ if (logger.isDebugEnabled() && !removedSessionIds.isEmpty()) [ CD ]
Line_14 $$ if (session.getTimeSinceLastActive() > getDisconnectDelay()) -->Line_15 $$ sessions.remove(session.getId())[ CD ]
Line_23 $$ if (logger.isDebugEnabled() && !removedSessionIds.isEmpty()) -->Line_25 $$ removedSessionIds.clear()[ CD ]
Line_12 $$ for (SockJsSession session : sessions.values()) -->Line_15 $$ sessions.remove(session.getId())[ FD ]
Line_7 $$ final List<String> removedSessionIds = new ArrayList<String>()-->Line_25 $$ removedSessionIds.clear()[ FD ]
Line_7 $$ final List<String> removedSessionIds = new ArrayList<String>()-->Line_24 $$ logger.debug("Closed " + removedSessionIds.size() + " sessions " + removedSessionIds)[ FD ]
Line_7 $$ final List<String> removedSessionIds = new ArrayList<String>()-->Line_23 $$ if (logger.isDebugEnabled() && !removedSessionIds.isEmpty()) [ FD ]
