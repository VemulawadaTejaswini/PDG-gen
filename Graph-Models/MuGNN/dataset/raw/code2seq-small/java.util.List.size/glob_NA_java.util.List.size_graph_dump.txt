Line_2 $$ public FileStatus[] glob() throws IOException -->Line_6 $$ String authority = authorityFromPath(pathPattern)[ CD ]
Line_112 $$ status = getFileStatus(rootPlaceholder.getPath())-->Line_113 $$ if (status == null)[ FD ]
Line_45 $$ ArrayList<FileStatus> newCandidates = new ArrayList<FileStatus>(candidates.size())-->Line_91 $$ newCandidates.add(child)[ FD ]
Line_48 $$ if (globFilter.hasPattern()) -->Line_49 $$ sawWildcard = true[ CD ]
Line_46 $$ GlobFilter globFilter = new GlobFilter(components.get(componentIdx))-->Line_48 $$ if (globFilter.hasPattern()) [ FD ]
Line_15 $$ boolean sawWildcard = false-->Line_49 $$ sawWildcard = true[ FD ]
Line_34 $$ if (Path.WINDOWS && !components.isEmpty() && Path.isWindowsAbsolutePath(absPattern.toUri().getPath(), true)) -->Line_41 $$ rootPlaceholder = new FileStatus(0, true, 0, 0, 0, new Path(scheme, authority, Path.SEPARATOR))[ CD ]
Line_46 $$ GlobFilter globFilter = new GlobFilter(components.get(componentIdx))-->Line_90 $$ if (globFilter.accept(child.getPath())) [ FD ]
Line_45 $$ ArrayList<FileStatus> newCandidates = new ArrayList<FileStatus>(candidates.size())-->Line_102 $$ newCandidates.add(childStatus)[ FD ]
Line_2 $$ public FileStatus[] glob() throws IOException -->Line_135 $$ return results.toArray(new FileStatus[0])[ CD ]
Line_39 $$ rootPlaceholder = new FileStatus(0, true, 0, 0, 0, new Path(scheme, authority, Path.SEPARATOR + driveLetter + Path.SEPARATOR))-->Line_112 $$ status = getFileStatus(rootPlaceholder.getPath())[ FD ]
Line_69 $$ if (globFilter.hasPattern()) -->Line_101 $$ if (childStatus != null) [ CD ]
Line_90 $$ if (globFilter.accept(child.getPath())) -->Line_91 $$ newCandidates.add(child)[ CD ]
Line_44 $$ for (int componentIdx = 0; componentIdx < components.size(); componentIdx++) -->Line_47 $$ String component = unescapePathComponent(components.get(componentIdx))[ FD ]
Line_87 $$ for (FileStatus child : children) -->Line_91 $$ newCandidates.add(child)[ FD ]
Line_41 $$ rootPlaceholder = new FileStatus(0, true, 0, 0, 0, new Path(scheme, authority, Path.SEPARATOR))-->Line_43 $$ candidates.add(rootPlaceholder)[ FD ]
Line_44 $$ for (int componentIdx = 0; componentIdx < components.size(); componentIdx++) -->Line_47 $$ String component = unescapePathComponent(components.get(componentIdx))[ CD ]
Line_15 $$ boolean sawWildcard = false-->Line_51 $$ if (candidates.isEmpty() && sawWildcard) [ FD ]
Line_46 $$ GlobFilter globFilter = new GlobFilter(components.get(componentIdx))-->Line_69 $$ if (globFilter.hasPattern()) [ FD ]
Line_44 $$ for (int componentIdx = 0; componentIdx < components.size(); componentIdx++) -->Line_45 $$ ArrayList<FileStatus> newCandidates = new ArrayList<FileStatus>(candidates.size())[ CD ]
Line_46 $$ GlobFilter globFilter = new GlobFilter(components.get(componentIdx))-->Line_58 $$ if ((componentIdx < components.size() - 1) && (!globFilter.hasPattern())) [ FD ]
Line_39 $$ rootPlaceholder = new FileStatus(0, true, 0, 0, 0, new Path(scheme, authority, Path.SEPARATOR + driveLetter + Path.SEPARATOR))-->Line_43 $$ candidates.add(rootPlaceholder)[ FD ]
Line_41 $$ rootPlaceholder = new FileStatus(0, true, 0, 0, 0, new Path(scheme, authority, Path.SEPARATOR))-->Line_112 $$ status = getFileStatus(rootPlaceholder.getPath())[ FD ]
Line_106 $$ candidates = newCandidates-->Line_45 $$ ArrayList<FileStatus> newCandidates = new ArrayList<FileStatus>(candidates.size())[ FD ]
Line_44 $$ for (int componentIdx = 0; componentIdx < components.size(); componentIdx++) -->Line_48 $$ if (globFilter.hasPattern()) [ CD ]
Line_44 $$ for (int componentIdx = 0; componentIdx < components.size(); componentIdx++) -->Line_58 $$ if ((componentIdx < components.size() - 1) && (!globFilter.hasPattern())) [ CD ]
Line_87 $$ for (FileStatus child : children) -->Line_90 $$ if (globFilter.accept(child.getPath())) [ FD ]
Line_34 $$ if (Path.WINDOWS && !components.isEmpty() && Path.isWindowsAbsolutePath(absPattern.toUri().getPath(), true)) -->Line_39 $$ rootPlaceholder = new FileStatus(0, true, 0, 0, 0, new Path(scheme, authority, Path.SEPARATOR + driveLetter + Path.SEPARATOR))[ CD ]
Line_44 $$ for (int componentIdx = 0; componentIdx < components.size(); componentIdx++) -->Line_106 $$ candidates = newCandidates[ CD ]
Line_108 $$ for (FileStatus status : candidates) -->Line_119 $$ results.add(status)[ FD ]
Line_44 $$ for (int componentIdx = 0; componentIdx < components.size(); componentIdx++) -->Line_46 $$ GlobFilter globFilter = new GlobFilter(components.get(componentIdx))[ CD ]
Line_108 $$ for (FileStatus status : candidates) -->Line_113 $$ if (status == null)[ FD ]
Line_108 $$ for (FileStatus status : candidates) -->Line_112 $$ status = getFileStatus(rootPlaceholder.getPath())[ FD ]
Line_106 $$ candidates = newCandidates-->Line_51 $$ if (candidates.isEmpty() && sawWildcard) [ FD ]
Line_101 $$ if (childStatus != null) -->Line_102 $$ newCandidates.add(childStatus)[ CD ]
Line_2 $$ public FileStatus[] glob() throws IOException -->Line_11 $$ List<String> flattenedPatterns = GlobExpander.expand(pathPatternString)[ CD ]
Line_44 $$ for (int componentIdx = 0; componentIdx < components.size(); componentIdx++) -->Line_51 $$ if (candidates.isEmpty() && sawWildcard) [ CD ]
Line_69 $$ if (globFilter.hasPattern()) -->Line_70 $$ FileStatus[] children = listStatus(candidate.getPath())[ CD ]
Line_44 $$ for (int componentIdx = 0; componentIdx < components.size(); componentIdx++) -->Line_46 $$ GlobFilter globFilter = new GlobFilter(components.get(componentIdx))[ FD ]
Line_69 $$ if (globFilter.hasPattern()) -->Line_71 $$ if (children.length == 1) [ CD ]
Line_49 $$ sawWildcard = true-->Line_51 $$ if (candidates.isEmpty() && sawWildcard) [ FD ]
Line_45 $$ ArrayList<FileStatus> newCandidates = new ArrayList<FileStatus>(candidates.size())-->Line_106 $$ candidates = newCandidates[ FD ]
Line_39 $$ rootPlaceholder = new FileStatus(0, true, 0, 0, 0, new Path(scheme, authority, Path.SEPARATOR + driveLetter + Path.SEPARATOR))-->Line_41 $$ rootPlaceholder = new FileStatus(0, true, 0, 0, 0, new Path(scheme, authority, Path.SEPARATOR))[ FD ]
Line_2 $$ public FileStatus[] glob() throws IOException -->Line_15 $$ boolean sawWildcard = false[ CD ]
Line_112 $$ status = getFileStatus(rootPlaceholder.getPath())-->Line_119 $$ results.add(status)[ FD ]
