Line_13 $$ FileStatus rootPlaceholder-->Line_20 $$ candidates.add(rootPlaceholder)[ FD ]
Line_11 $$ List<String> components = getPathComponents(absPattern.toUri().getPath())-->Line_24 $$ String component = unescapePathComponent(components.get(componentIdx))[ FD ]
Line_2 $$ public FileStatus[] glob() throws IOException -->Line_71 $$ if ((!sawWildcard) && results.isEmpty() && (flattenedPatterns.size() <= 1)) [ CD ]
Line_10 $$ Path absPattern = fixRelativePart(new Path(flatPattern.isEmpty() ? Path.CUR_DIR : flatPattern))-->Line_14 $$ if (Path.WINDOWS && !components.isEmpty() && Path.isWindowsAbsolutePath(absPattern.toUri().getPath(), true)) [ FD ]
Line_8 $$ boolean sawWildcard = false-->Line_28 $$ if (candidates.isEmpty() && sawWildcard) [ FD ]
Line_9 $$ for (String flatPattern : flattenedPatterns) -->Line_10 $$ Path absPattern = fixRelativePart(new Path(flatPattern.isEmpty() ? Path.CUR_DIR : flatPattern))[ FD ]
Line_66 $$ if (filter.accept(status.getPath())) -->Line_67 $$ results.add(status)[ CD ]
Line_60 $$ for (FileStatus status : candidates) -->Line_67 $$ results.add(status)[ FD ]
Line_2 $$ public FileStatus[] glob() throws IOException -->Line_3 $$ String scheme = schemeFromPath(pathPattern)[ CD ]
Line_58 $$ candidates = newCandidates-->Line_22 $$ ArrayList<FileStatus> newCandidates = new ArrayList<FileStatus>(candidates.size())[ FD ]
Line_47 $$ if (globFilter.accept(child.getPath())) -->Line_48 $$ newCandidates.add(child)[ CD ]
Line_18 $$ rootPlaceholder = new FileStatus(0, true, 0, 0, 0, new Path(scheme, authority, Path.SEPARATOR))-->Line_61 $$ if (status == rootPlaceholder) [ FD ]
Line_11 $$ List<String> components = getPathComponents(absPattern.toUri().getPath())-->Line_23 $$ GlobFilter globFilter = new GlobFilter(components.get(componentIdx))[ FD ]
Line_38 $$ if (globFilter.hasPattern()) -->Line_39 $$ FileStatus[] children = listStatus(candidate.getPath())[ CD ]
Line_62 $$ status = getFileStatus(rootPlaceholder.getPath())-->Line_67 $$ results.add(status)[ FD ]
Line_11 $$ List<String> components = getPathComponents(absPattern.toUri().getPath())-->Line_21 $$ for (int componentIdx = 0; componentIdx < components.size(); componentIdx++) [ FD ]
Line_60 $$ for (FileStatus status : candidates) -->Line_63 $$ if (status == null)[ FD ]
Line_23 $$ GlobFilter globFilter = new GlobFilter(components.get(componentIdx))-->Line_47 $$ if (globFilter.accept(child.getPath())) [ FD ]
Line_38 $$ if (globFilter.hasPattern()) -->Line_52 $$ FileStatus childStatus = getFileStatus(new Path(candidate.getPath(), component))[ CD ]
Line_21 $$ for (int componentIdx = 0; componentIdx < components.size(); componentIdx++) -->Line_24 $$ String component = unescapePathComponent(components.get(componentIdx))[ FD ]
Line_2 $$ public FileStatus[] glob() throws IOException -->Line_4 $$ String authority = authorityFromPath(pathPattern)[ CD ]
Line_8 $$ boolean sawWildcard = false-->Line_71 $$ if ((!sawWildcard) && results.isEmpty() && (flattenedPatterns.size() <= 1)) [ FD ]
Line_12 $$ ArrayList<FileStatus> candidates = new ArrayList<FileStatus>(1)-->Line_20 $$ candidates.add(rootPlaceholder)[ FD ]
Line_2 $$ public FileStatus[] glob() throws IOException -->Line_6 $$ List<String> flattenedPatterns = GlobExpander.expand(pathPatternString)[ CD ]
Line_21 $$ for (int componentIdx = 0; componentIdx < components.size(); componentIdx++) -->Line_22 $$ ArrayList<FileStatus> newCandidates = new ArrayList<FileStatus>(candidates.size())[ CD ]
Line_32 $$ for (FileStatus candidate : candidates) -->Line_41 $$ if (!getFileStatus(candidate.getPath()).isDirectory()) [ FD ]
Line_7 $$ ArrayList<FileStatus> results = new ArrayList<FileStatus>(flattenedPatterns.size())-->Line_71 $$ if ((!sawWildcard) && results.isEmpty() && (flattenedPatterns.size() <= 1)) [ FD ]
Line_14 $$ if (Path.WINDOWS && !components.isEmpty() && Path.isWindowsAbsolutePath(absPattern.toUri().getPath(), true)) -->Line_18 $$ rootPlaceholder = new FileStatus(0, true, 0, 0, 0, new Path(scheme, authority, Path.SEPARATOR))[ CD ]
Line_32 $$ for (FileStatus candidate : candidates) -->Line_39 $$ FileStatus[] children = listStatus(candidate.getPath())[ FD ]
Line_45 $$ for (FileStatus child : children) -->Line_47 $$ if (globFilter.accept(child.getPath())) [ FD ]
Line_62 $$ status = getFileStatus(rootPlaceholder.getPath())-->Line_63 $$ if (status == null)[ FD ]
Line_58 $$ candidates = newCandidates-->Line_28 $$ if (candidates.isEmpty() && sawWildcard) [ FD ]
Line_6 $$ List<String> flattenedPatterns = GlobExpander.expand(pathPatternString)-->Line_71 $$ if ((!sawWildcard) && results.isEmpty() && (flattenedPatterns.size() <= 1)) [ FD ]
Line_13 $$ FileStatus rootPlaceholder-->Line_61 $$ if (status == rootPlaceholder) [ FD ]
Line_16 $$ rootPlaceholder = new FileStatus(0, true, 0, 0, 0, new Path(scheme, authority, Path.SEPARATOR + driveLetter + Path.SEPARATOR))-->Line_62 $$ status = getFileStatus(rootPlaceholder.getPath())[ FD ]
Line_23 $$ GlobFilter globFilter = new GlobFilter(components.get(componentIdx))-->Line_38 $$ if (globFilter.hasPattern()) [ FD ]
Line_26 $$ sawWildcard = true-->Line_28 $$ if (candidates.isEmpty() && sawWildcard) [ FD ]
Line_60 $$ for (FileStatus status : candidates) -->Line_66 $$ if (filter.accept(status.getPath())) [ FD ]
Line_45 $$ for (FileStatus child : children) -->Line_48 $$ newCandidates.add(child)[ FD ]
Line_13 $$ FileStatus rootPlaceholder-->Line_16 $$ rootPlaceholder = new FileStatus(0, true, 0, 0, 0, new Path(scheme, authority, Path.SEPARATOR + driveLetter + Path.SEPARATOR))[ FD ]
Line_2 $$ public FileStatus[] glob() throws IOException -->Line_74 $$ return results.toArray(new FileStatus[0])[ CD ]
Line_8 $$ boolean sawWildcard = false-->Line_26 $$ sawWildcard = true[ FD ]
Line_12 $$ ArrayList<FileStatus> candidates = new ArrayList<FileStatus>(1)-->Line_22 $$ ArrayList<FileStatus> newCandidates = new ArrayList<FileStatus>(candidates.size())[ FD ]
Line_22 $$ ArrayList<FileStatus> newCandidates = new ArrayList<FileStatus>(candidates.size())-->Line_48 $$ newCandidates.add(child)[ FD ]
Line_21 $$ for (int componentIdx = 0; componentIdx < components.size(); componentIdx++) -->Line_23 $$ GlobFilter globFilter = new GlobFilter(components.get(componentIdx))[ CD ]
Line_21 $$ for (int componentIdx = 0; componentIdx < components.size(); componentIdx++) -->Line_28 $$ if (candidates.isEmpty() && sawWildcard) [ CD ]
Line_52 $$ FileStatus childStatus = getFileStatus(new Path(candidate.getPath(), component))-->Line_54 $$ newCandidates.add(childStatus)[ FD ]
Line_60 $$ for (FileStatus status : candidates) -->Line_61 $$ if (status == rootPlaceholder) [ FD ]
Line_16 $$ rootPlaceholder = new FileStatus(0, true, 0, 0, 0, new Path(scheme, authority, Path.SEPARATOR + driveLetter + Path.SEPARATOR))-->Line_61 $$ if (status == rootPlaceholder) [ FD ]
Line_7 $$ ArrayList<FileStatus> results = new ArrayList<FileStatus>(flattenedPatterns.size())-->Line_74 $$ return results.toArray(new FileStatus[0])[ FD ]
Line_23 $$ GlobFilter globFilter = new GlobFilter(components.get(componentIdx))-->Line_31 $$ if ((componentIdx < components.size() - 1) && (!globFilter.hasPattern())) [ FD ]
Line_5 $$ String pathPatternString = pathPattern.toUri().getPath()-->Line_6 $$ List<String> flattenedPatterns = GlobExpander.expand(pathPatternString)[ FD ]
Line_32 $$ for (FileStatus candidate : candidates) -->Line_46 $$ child.setPath(new Path(candidate.getPath(), child.getPath().getName()))[ FD ]
Line_16 $$ rootPlaceholder = new FileStatus(0, true, 0, 0, 0, new Path(scheme, authority, Path.SEPARATOR + driveLetter + Path.SEPARATOR))-->Line_20 $$ candidates.add(rootPlaceholder)[ FD ]
Line_11 $$ List<String> components = getPathComponents(absPattern.toUri().getPath())-->Line_15 $$ String driveLetter = components.remove(0)[ FD ]
Line_26 $$ sawWildcard = true-->Line_71 $$ if ((!sawWildcard) && results.isEmpty() && (flattenedPatterns.size() <= 1)) [ FD ]
Line_21 $$ for (int componentIdx = 0; componentIdx < components.size(); componentIdx++) -->Line_25 $$ if (globFilter.hasPattern()) [ CD ]
Line_14 $$ if (Path.WINDOWS && !components.isEmpty() && Path.isWindowsAbsolutePath(absPattern.toUri().getPath(), true)) -->Line_15 $$ String driveLetter = components.remove(0)[ CD ]
Line_32 $$ for (FileStatus candidate : candidates) -->Line_52 $$ FileStatus childStatus = getFileStatus(new Path(candidate.getPath(), component))[ FD ]
Line_53 $$ if (childStatus != null) -->Line_54 $$ newCandidates.add(childStatus)[ CD ]
Line_18 $$ rootPlaceholder = new FileStatus(0, true, 0, 0, 0, new Path(scheme, authority, Path.SEPARATOR))-->Line_20 $$ candidates.add(rootPlaceholder)[ FD ]
Line_45 $$ for (FileStatus child : children) -->Line_46 $$ child.setPath(new Path(candidate.getPath(), child.getPath().getName()))[ FD ]
Line_11 $$ List<String> components = getPathComponents(absPattern.toUri().getPath())-->Line_14 $$ if (Path.WINDOWS && !components.isEmpty() && Path.isWindowsAbsolutePath(absPattern.toUri().getPath(), true)) [ FD ]
Line_6 $$ List<String> flattenedPatterns = GlobExpander.expand(pathPatternString)-->Line_7 $$ ArrayList<FileStatus> results = new ArrayList<FileStatus>(flattenedPatterns.size())[ FD ]
Line_21 $$ for (int componentIdx = 0; componentIdx < components.size(); componentIdx++) -->Line_31 $$ if ((componentIdx < components.size() - 1) && (!globFilter.hasPattern())) [ CD ]
Line_38 $$ if (globFilter.hasPattern()) -->Line_53 $$ if (childStatus != null) [ CD ]
Line_2 $$ public FileStatus[] glob() throws IOException -->Line_8 $$ boolean sawWildcard = false[ CD ]
Line_21 $$ for (int componentIdx = 0; componentIdx < components.size(); componentIdx++) -->Line_23 $$ GlobFilter globFilter = new GlobFilter(components.get(componentIdx))[ FD ]
Line_14 $$ if (Path.WINDOWS && !components.isEmpty() && Path.isWindowsAbsolutePath(absPattern.toUri().getPath(), true)) -->Line_16 $$ rootPlaceholder = new FileStatus(0, true, 0, 0, 0, new Path(scheme, authority, Path.SEPARATOR + driveLetter + Path.SEPARATOR))[ CD ]
Line_21 $$ for (int componentIdx = 0; componentIdx < components.size(); componentIdx++) -->Line_58 $$ candidates = newCandidates[ CD ]
Line_12 $$ ArrayList<FileStatus> candidates = new ArrayList<FileStatus>(1)-->Line_28 $$ if (candidates.isEmpty() && sawWildcard) [ FD ]
Line_11 $$ List<String> components = getPathComponents(absPattern.toUri().getPath())-->Line_31 $$ if ((componentIdx < components.size() - 1) && (!globFilter.hasPattern())) [ FD ]
Line_40 $$ if (children.length == 1) -->Line_41 $$ if (!getFileStatus(candidate.getPath()).isDirectory()) [ CD ]
Line_12 $$ ArrayList<FileStatus> candidates = new ArrayList<FileStatus>(1)-->Line_58 $$ candidates = newCandidates[ FD ]
Line_61 $$ if (status == rootPlaceholder) -->Line_62 $$ status = getFileStatus(rootPlaceholder.getPath())[ CD ]
Line_18 $$ rootPlaceholder = new FileStatus(0, true, 0, 0, 0, new Path(scheme, authority, Path.SEPARATOR))-->Line_62 $$ status = getFileStatus(rootPlaceholder.getPath())[ FD ]
Line_71 $$ if ((!sawWildcard) && results.isEmpty() && (flattenedPatterns.size() <= 1)) -->Line_72 $$ return null[ CD ]
Line_10 $$ Path absPattern = fixRelativePart(new Path(flatPattern.isEmpty() ? Path.CUR_DIR : flatPattern))-->Line_11 $$ List<String> components = getPathComponents(absPattern.toUri().getPath())[ FD ]
Line_62 $$ status = getFileStatus(rootPlaceholder.getPath())-->Line_66 $$ if (filter.accept(status.getPath())) [ FD ]
Line_7 $$ ArrayList<FileStatus> results = new ArrayList<FileStatus>(flattenedPatterns.size())-->Line_67 $$ results.add(status)[ FD ]
Line_23 $$ GlobFilter globFilter = new GlobFilter(components.get(componentIdx))-->Line_25 $$ if (globFilter.hasPattern()) [ FD ]
Line_16 $$ rootPlaceholder = new FileStatus(0, true, 0, 0, 0, new Path(scheme, authority, Path.SEPARATOR + driveLetter + Path.SEPARATOR))-->Line_18 $$ rootPlaceholder = new FileStatus(0, true, 0, 0, 0, new Path(scheme, authority, Path.SEPARATOR))[ FD ]
Line_13 $$ FileStatus rootPlaceholder-->Line_62 $$ status = getFileStatus(rootPlaceholder.getPath())[ FD ]
Line_21 $$ for (int componentIdx = 0; componentIdx < components.size(); componentIdx++) -->Line_24 $$ String component = unescapePathComponent(components.get(componentIdx))[ CD ]
Line_2 $$ public FileStatus[] glob() throws IOException -->Line_5 $$ String pathPatternString = pathPattern.toUri().getPath()[ CD ]
Line_25 $$ if (globFilter.hasPattern()) -->Line_26 $$ sawWildcard = true[ CD ]
Line_52 $$ FileStatus childStatus = getFileStatus(new Path(candidate.getPath(), component))-->Line_53 $$ if (childStatus != null) [ FD ]
Line_22 $$ ArrayList<FileStatus> newCandidates = new ArrayList<FileStatus>(candidates.size())-->Line_58 $$ candidates = newCandidates[ FD ]
Line_2 $$ public FileStatus[] glob() throws IOException -->Line_7 $$ ArrayList<FileStatus> results = new ArrayList<FileStatus>(flattenedPatterns.size())[ CD ]
Line_61 $$ if (status == rootPlaceholder) -->Line_63 $$ if (status == null)[ CD ]
Line_38 $$ if (globFilter.hasPattern()) -->Line_40 $$ if (children.length == 1) [ CD ]
Line_22 $$ ArrayList<FileStatus> newCandidates = new ArrayList<FileStatus>(candidates.size())-->Line_54 $$ newCandidates.add(childStatus)[ FD ]
Line_13 $$ FileStatus rootPlaceholder-->Line_18 $$ rootPlaceholder = new FileStatus(0, true, 0, 0, 0, new Path(scheme, authority, Path.SEPARATOR))[ FD ]
Line_60 $$ for (FileStatus status : candidates) -->Line_62 $$ status = getFileStatus(rootPlaceholder.getPath())[ FD ]
Line_32 $$ for (FileStatus candidate : candidates) -->Line_33 $$ candidate.setPath(new Path(candidate.getPath(), component))[ FD ]
