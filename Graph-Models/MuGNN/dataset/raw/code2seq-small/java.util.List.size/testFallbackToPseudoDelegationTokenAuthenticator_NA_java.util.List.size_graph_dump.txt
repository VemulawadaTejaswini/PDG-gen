Line_18 $$ DelegationTokenAuthenticatedURL.Token token = new DelegationTokenAuthenticatedURL.Token()-->Line_25 $$ aUrl.getDelegationToken(url, token, FOO_USER)[ FD ]
Line_18 $$ DelegationTokenAuthenticatedURL.Token token = new DelegationTokenAuthenticatedURL.Token()-->Line_26 $$ Assert.assertNotNull(token.getDelegationToken())[ FD ]
Line_18 $$ DelegationTokenAuthenticatedURL.Token token = new DelegationTokenAuthenticatedURL.Token()-->Line_27 $$ Assert.assertEquals(new Text("token-kind"), token.getDelegationToken().getKind())[ FD ]
Line_5 $$ Context context = new Context()-->Line_9 $$ context.addServlet(new ServletHolder(UserServlet.class), "/bar")[ FD ]
Line_4 $$ final Server jetty = createJettyServer()-->Line_32 $$ jetty.stop()[ FD ]
Line_5 $$ Context context = new Context()-->Line_8 $$ context.addFilter(new FilterHolder(PseudoDTAFilter.class), "/*", 0)[ FD ]
Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_27 $$ Assert.assertEquals(new Text("token-kind"), token.getDelegationToken().getKind())[ CD ]
Line_12 $$ final URL url = new URL(getJettyURL() + "/foo/bar")-->Line_20 $$ HttpURLConnection conn = aUrl.openConnection(url, token)[ FD ]
Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_28 $$ return null[ CD ]
Line_19 $$ DelegationTokenAuthenticatedURL aUrl = new DelegationTokenAuthenticatedURL()-->Line_20 $$ HttpURLConnection conn = aUrl.openConnection(url, token)[ FD ]
Line_19 $$ DelegationTokenAuthenticatedURL aUrl = new DelegationTokenAuthenticatedURL()-->Line_25 $$ aUrl.getDelegationToken(url, token, FOO_USER)[ FD ]
Line_5 $$ Context context = new Context()-->Line_6 $$ context.setContextPath("/foo")[ FD ]
Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_21 $$ Assert.assertEquals(HttpURLConnection.HTTP_OK, conn.getResponseCode())[ CD ]
Line_22 $$ List<String> ret = IOUtils.readLines(conn.getInputStream())-->Line_23 $$ Assert.assertEquals(1, ret.size())[ FD ]
Line_22 $$ List<String> ret = IOUtils.readLines(conn.getInputStream())-->Line_24 $$ Assert.assertEquals(FOO_USER, ret.get(0))[ FD ]
Line_20 $$ HttpURLConnection conn = aUrl.openConnection(url, token)-->Line_21 $$ Assert.assertEquals(HttpURLConnection.HTTP_OK, conn.getResponseCode())[ FD ]
Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_18 $$ DelegationTokenAuthenticatedURL.Token token = new DelegationTokenAuthenticatedURL.Token()[ CD ]
Line_18 $$ DelegationTokenAuthenticatedURL.Token token = new DelegationTokenAuthenticatedURL.Token()-->Line_20 $$ HttpURLConnection conn = aUrl.openConnection(url, token)[ FD ]
Line_20 $$ HttpURLConnection conn = aUrl.openConnection(url, token)-->Line_22 $$ List<String> ret = IOUtils.readLines(conn.getInputStream())[ FD ]
Line_13 $$ UserGroupInformation ugi = UserGroupInformation.createRemoteUser(FOO_USER)-->Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() [ FD ]
Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_19 $$ DelegationTokenAuthenticatedURL aUrl = new DelegationTokenAuthenticatedURL()[ CD ]
Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_22 $$ List<String> ret = IOUtils.readLines(conn.getInputStream())[ CD ]
Line_12 $$ final URL url = new URL(getJettyURL() + "/foo/bar")-->Line_25 $$ aUrl.getDelegationToken(url, token, FOO_USER)[ FD ]
Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_25 $$ aUrl.getDelegationToken(url, token, FOO_USER)[ CD ]
Line_5 $$ Context context = new Context()-->Line_7 $$ jetty.setHandler(context)[ FD ]
Line_4 $$ final Server jetty = createJettyServer()-->Line_7 $$ jetty.setHandler(context)[ FD ]
Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_23 $$ Assert.assertEquals(1, ret.size())[ CD ]
Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_24 $$ Assert.assertEquals(FOO_USER, ret.get(0))[ CD ]
Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_26 $$ Assert.assertNotNull(token.getDelegationToken())[ CD ]
Line_4 $$ final Server jetty = createJettyServer()-->Line_11 $$ jetty.start()[ FD ]
Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_20 $$ HttpURLConnection conn = aUrl.openConnection(url, token)[ CD ]
