Line_26 $$ List failureList = (List) map.get("failures")-->Line_28 $$ HashMap failureMap = (HashMap) failureList.get(0)[ FD ]
Line_2 $$ public void testBasicSerialization() throws Exception -->Line_16 $$ indexStoreStatuses.put("test2", storesMap)[ CD ]
Line_45 $$ for (int i = 0; i < stores.size(); i++) -->Line_49 $$ assertThat(((int) storeInfo.get("version")), equalTo(((int) storeStatus.getVersion())))[ CD ]
Line_43 $$ List stores = (ArrayList) shardStoresStatus.get("stores")-->Line_45 $$ for (int i = 0; i < stores.size(); i++) [ FD ]
Line_2 $$ public void testBasicSerialization() throws Exception -->Line_20 $$ contentBuilder.startObject()[ CD ]
Line_43 $$ List stores = (ArrayList) shardStoresStatus.get("stores")-->Line_44 $$ assertThat(stores.size(), equalTo(storeStatusList.size()))[ FD ]
Line_8 $$ List<IndicesShardStoresResponse.StoreStatus> storeStatusList = new ArrayList()-->Line_47 $$ IndicesShardStoresResponse.StoreStatus storeStatus = storeStatusList.get(i)[ FD ]
Line_26 $$ List failureList = (List) map.get("failures")-->Line_27 $$ assertThat(failureList.size(), equalTo(1))[ FD ]
Line_47 $$ IndicesShardStoresResponse.StoreStatus storeStatus = storeStatusList.get(i)-->Line_55 $$ if (storeStatus.getStoreException() != null) [ FD ]
Line_8 $$ List<IndicesShardStoresResponse.StoreStatus> storeStatusList = new ArrayList()-->Line_44 $$ assertThat(stores.size(), equalTo(storeStatusList.size()))[ FD ]
Line_46 $$ HashMap storeInfo = ((HashMap) stores.get(i))-->Line_49 $$ assertThat(((int) storeInfo.get("version")), equalTo(((int) storeStatus.getVersion())))[ FD ]
Line_36 $$ for (String index : new String[] -->Line_37 $$ assertThat(indices.containsKey(index), equalTo(true))[ FD ]
Line_28 $$ HashMap failureMap = (HashMap) failureList.get(0)-->Line_34 $$ assertThat(((String) failureMap.get("node")), equalTo("node1"))[ FD ]
Line_46 $$ HashMap storeInfo = ((HashMap) stores.get(i))-->Line_50 $$ assertThat(storeInfo.containsKey("allocation_id"), equalTo(true))[ FD ]
Line_47 $$ IndicesShardStoresResponse.StoreStatus storeStatus = storeStatusList.get(i)-->Line_53 $$ assertThat(((String) storeInfo.get("allocation")), equalTo(storeStatus.getAllocationStatus().value()))[ FD ]
Line_45 $$ for (int i = 0; i < stores.size(); i++) -->Line_53 $$ assertThat(((String) storeInfo.get("allocation")), equalTo(storeStatus.getAllocationStatus().value()))[ CD ]
Line_46 $$ HashMap storeInfo = ((HashMap) stores.get(i))-->Line_51 $$ assertThat(((String) storeInfo.get("allocation_id")), equalTo((storeStatus.getAllocationId())))[ FD ]
Line_4 $$ List<IndicesShardStoresResponse.Failure> failures = new ArrayList()-->Line_17 $$ failures.add(new IndicesShardStoresResponse.Failure("node1", "test", 3, new NodeDisconnectedException(node1, "")))[ FD ]
Line_45 $$ for (int i = 0; i < stores.size(); i++) -->Line_50 $$ assertThat(storeInfo.containsKey("allocation_id"), equalTo(true))[ CD ]
Line_2 $$ public void testBasicSerialization() throws Exception -->Line_11 $$ storeStatusList.add(new IndicesShardStoresResponse.StoreStatus(node1, 1, Strings.randomBase64UUID(), IndicesShardStoresResponse.StoreStatus.AllocationStatus.UNUSED, new IOException("corrupted")))[ CD ]
Line_45 $$ for (int i = 0; i < stores.size(); i++) -->Line_47 $$ IndicesShardStoresResponse.StoreStatus storeStatus = storeStatusList.get(i)[ FD ]
Line_2 $$ public void testBasicSerialization() throws Exception -->Line_15 $$ indexStoreStatuses.put("test", storesMap)[ CD ]
Line_2 $$ public void testBasicSerialization() throws Exception -->Line_3 $$ ImmutableOpenMap.Builder<String, ImmutableOpenIntMap<List<IndicesShardStoresResponse.StoreStatus>>> indexStoreStatuses = ImmutableOpenMap.builder()[ CD ]
Line_5 $$ ImmutableOpenIntMap.Builder<List<IndicesShardStoresResponse.StoreStatus>> storeStatuses = ImmutableOpenIntMap.builder()-->Line_14 $$ ImmutableOpenIntMap<List<IndicesShardStoresResponse.StoreStatus>> storesMap = storeStatuses.build()[ FD ]
Line_2 $$ public void testBasicSerialization() throws Exception -->Line_9 $$ storeStatusList.add(new IndicesShardStoresResponse.StoreStatus(node1, 3, null, IndicesShardStoresResponse.StoreStatus.AllocationStatus.PRIMARY, null))[ CD ]
Line_55 $$ if (storeStatus.getStoreException() != null) -->Line_56 $$ assertThat(storeInfo.containsKey("store_exception"), equalTo(true))[ CD ]
Line_45 $$ for (int i = 0; i < stores.size(); i++) -->Line_54 $$ assertThat(storeInfo.containsKey(storeStatus.getNode().id()), equalTo(true))[ CD ]
Line_47 $$ IndicesShardStoresResponse.StoreStatus storeStatus = storeStatusList.get(i)-->Line_54 $$ assertThat(storeInfo.containsKey(storeStatus.getNode().id()), equalTo(true))[ FD ]
Line_25 $$ Map<String, Object> map = parser.map()-->Line_26 $$ List failureList = (List) map.get("failures")[ FD ]
Line_3 $$ ImmutableOpenMap.Builder<String, ImmutableOpenIntMap<List<IndicesShardStoresResponse.StoreStatus>>> indexStoreStatuses = ImmutableOpenMap.builder()-->Line_15 $$ indexStoreStatuses.put("test", storesMap)[ FD ]
Line_5 $$ ImmutableOpenIntMap.Builder<List<IndicesShardStoresResponse.StoreStatus>> storeStatuses = ImmutableOpenIntMap.builder()-->Line_13 $$ storeStatuses.put(1, storeStatusList)[ FD ]
Line_8 $$ List<IndicesShardStoresResponse.StoreStatus> storeStatusList = new ArrayList()-->Line_9 $$ storeStatusList.add(new IndicesShardStoresResponse.StoreStatus(node1, 3, null, IndicesShardStoresResponse.StoreStatus.AllocationStatus.PRIMARY, null))[ FD ]
Line_25 $$ Map<String, Object> map = parser.map()-->Line_35 $$ Map<String, Object> indices = (Map<String, Object>) map.get("indices")[ FD ]
Line_19 $$ XContentBuilder contentBuilder = XContentFactory.jsonBuilder()-->Line_20 $$ contentBuilder.startObject()[ FD ]
Line_2 $$ public void testBasicSerialization() throws Exception -->Line_21 $$ storesResponse.toXContent(contentBuilder, ToXContent.EMPTY_PARAMS)[ CD ]
Line_28 $$ HashMap failureMap = (HashMap) failureList.get(0)-->Line_32 $$ assertThat(((int) failureMap.get("shard")), equalTo(3))[ FD ]
Line_35 $$ Map<String, Object> indices = (Map<String, Object>) map.get("indices")-->Line_37 $$ assertThat(indices.containsKey(index), equalTo(true))[ FD ]
Line_19 $$ XContentBuilder contentBuilder = XContentFactory.jsonBuilder()-->Line_23 $$ BytesReference bytes = contentBuilder.bytes()[ FD ]
Line_36 $$ for (String index : new String[] -->Line_38 $$ Map<String, Object> shards = ((Map<String, Object>) ((Map<String, Object>) indices.get(index)).get("shards"))[ FD ]
Line_28 $$ HashMap failureMap = (HashMap) failureList.get(0)-->Line_33 $$ assertThat(failureMap.containsKey("node"), equalTo(true))[ FD ]
Line_2 $$ public void testBasicSerialization() throws Exception -->Line_8 $$ List<IndicesShardStoresResponse.StoreStatus> storeStatusList = new ArrayList()[ CD ]
Line_46 $$ HashMap storeInfo = ((HashMap) stores.get(i))-->Line_56 $$ assertThat(storeInfo.containsKey("store_exception"), equalTo(true))[ FD ]
Line_3 $$ ImmutableOpenMap.Builder<String, ImmutableOpenIntMap<List<IndicesShardStoresResponse.StoreStatus>>> indexStoreStatuses = ImmutableOpenMap.builder()-->Line_18 $$ IndicesShardStoresResponse storesResponse = new IndicesShardStoresResponse(indexStoreStatuses.build(), Collections.unmodifiableList(failures))[ FD ]
Line_46 $$ HashMap storeInfo = ((HashMap) stores.get(i))-->Line_53 $$ assertThat(((String) storeInfo.get("allocation")), equalTo(storeStatus.getAllocationStatus().value()))[ FD ]
Line_2 $$ public void testBasicSerialization() throws Exception -->Line_22 $$ contentBuilder.endObject()[ CD ]
Line_46 $$ HashMap storeInfo = ((HashMap) stores.get(i))-->Line_48 $$ assertThat(storeInfo.containsKey("version"), equalTo(true))[ FD ]
Line_45 $$ for (int i = 0; i < stores.size(); i++) -->Line_52 $$ assertThat(storeInfo.containsKey("allocation"), equalTo(true))[ CD ]
Line_38 $$ Map<String, Object> shards = ((Map<String, Object>) ((Map<String, Object>) indices.get(index)).get("shards"))-->Line_41 $$ HashMap shardStoresStatus = (HashMap) shards.get(shardId)[ FD ]
Line_2 $$ public void testBasicSerialization() throws Exception -->Line_23 $$ BytesReference bytes = contentBuilder.bytes()[ CD ]
Line_45 $$ for (int i = 0; i < stores.size(); i++) -->Line_46 $$ HashMap storeInfo = ((HashMap) stores.get(i))[ CD ]
Line_2 $$ public void testBasicSerialization() throws Exception -->Line_7 $$ DiscoveryNode node2 = new DiscoveryNode("node2", DummyTransportAddress.INSTANCE, Version.CURRENT)[ CD ]
Line_45 $$ for (int i = 0; i < stores.size(); i++) -->Line_48 $$ assertThat(storeInfo.containsKey("version"), equalTo(true))[ CD ]
Line_46 $$ HashMap storeInfo = ((HashMap) stores.get(i))-->Line_52 $$ assertThat(storeInfo.containsKey("allocation"), equalTo(true))[ FD ]
Line_45 $$ for (int i = 0; i < stores.size(); i++) -->Line_51 $$ assertThat(((String) storeInfo.get("allocation_id")), equalTo((storeStatus.getAllocationId())))[ CD ]
Line_41 $$ HashMap shardStoresStatus = (HashMap) shards.get(shardId)-->Line_42 $$ assertThat(shardStoresStatus.containsKey("stores"), equalTo(true))[ FD ]
Line_8 $$ List<IndicesShardStoresResponse.StoreStatus> storeStatusList = new ArrayList()-->Line_11 $$ storeStatusList.add(new IndicesShardStoresResponse.StoreStatus(node1, 1, Strings.randomBase64UUID(), IndicesShardStoresResponse.StoreStatus.AllocationStatus.UNUSED, new IOException("corrupted")))[ FD ]
Line_3 $$ ImmutableOpenMap.Builder<String, ImmutableOpenIntMap<List<IndicesShardStoresResponse.StoreStatus>>> indexStoreStatuses = ImmutableOpenMap.builder()-->Line_16 $$ indexStoreStatuses.put("test2", storesMap)[ FD ]
Line_2 $$ public void testBasicSerialization() throws Exception -->Line_4 $$ List<IndicesShardStoresResponse.Failure> failures = new ArrayList()[ CD ]
Line_2 $$ public void testBasicSerialization() throws Exception -->Line_13 $$ storeStatuses.put(1, storeStatusList)[ CD ]
Line_28 $$ HashMap failureMap = (HashMap) failureList.get(0)-->Line_29 $$ assertThat(failureMap.containsKey("index"), equalTo(true))[ FD ]
Line_41 $$ HashMap shardStoresStatus = (HashMap) shards.get(shardId)-->Line_43 $$ List stores = (ArrayList) shardStoresStatus.get("stores")[ FD ]
Line_38 $$ Map<String, Object> shards = ((Map<String, Object>) ((Map<String, Object>) indices.get(index)).get("shards"))-->Line_40 $$ for (String shardId : shards.keySet()) [ FD ]
Line_45 $$ for (int i = 0; i < stores.size(); i++) -->Line_46 $$ HashMap storeInfo = ((HashMap) stores.get(i))[ FD ]
Line_28 $$ HashMap failureMap = (HashMap) failureList.get(0)-->Line_30 $$ assertThat(((String) failureMap.get("index")), equalTo("test"))[ FD ]
Line_38 $$ Map<String, Object> shards = ((Map<String, Object>) ((Map<String, Object>) indices.get(index)).get("shards"))-->Line_39 $$ assertThat(shards.size(), equalTo(2))[ FD ]
Line_14 $$ ImmutableOpenIntMap<List<IndicesShardStoresResponse.StoreStatus>> storesMap = storeStatuses.build()-->Line_16 $$ indexStoreStatuses.put("test2", storesMap)[ FD ]
Line_2 $$ public void testBasicSerialization() throws Exception -->Line_6 $$ DiscoveryNode node1 = new DiscoveryNode("node1", DummyTransportAddress.INSTANCE, Version.CURRENT)[ CD ]
Line_43 $$ List stores = (ArrayList) shardStoresStatus.get("stores")-->Line_46 $$ HashMap storeInfo = ((HashMap) stores.get(i))[ FD ]
Line_4 $$ List<IndicesShardStoresResponse.Failure> failures = new ArrayList()-->Line_18 $$ IndicesShardStoresResponse storesResponse = new IndicesShardStoresResponse(indexStoreStatuses.build(), Collections.unmodifiableList(failures))[ FD ]
Line_18 $$ IndicesShardStoresResponse storesResponse = new IndicesShardStoresResponse(indexStoreStatuses.build(), Collections.unmodifiableList(failures))-->Line_21 $$ storesResponse.toXContent(contentBuilder, ToXContent.EMPTY_PARAMS)[ FD ]
Line_35 $$ Map<String, Object> indices = (Map<String, Object>) map.get("indices")-->Line_38 $$ Map<String, Object> shards = ((Map<String, Object>) ((Map<String, Object>) indices.get(index)).get("shards"))[ FD ]
Line_19 $$ XContentBuilder contentBuilder = XContentFactory.jsonBuilder()-->Line_21 $$ storesResponse.toXContent(contentBuilder, ToXContent.EMPTY_PARAMS)[ FD ]
Line_24 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(bytes)) -->Line_25 $$ Map<String, Object> map = parser.map()[ FD ]
Line_2 $$ public void testBasicSerialization() throws Exception -->Line_10 $$ storeStatusList.add(new IndicesShardStoresResponse.StoreStatus(node2, 2, Strings.randomBase64UUID(), IndicesShardStoresResponse.StoreStatus.AllocationStatus.REPLICA, null))[ CD ]
Line_2 $$ public void testBasicSerialization() throws Exception -->Line_18 $$ IndicesShardStoresResponse storesResponse = new IndicesShardStoresResponse(indexStoreStatuses.build(), Collections.unmodifiableList(failures))[ CD ]
Line_40 $$ for (String shardId : shards.keySet()) -->Line_41 $$ HashMap shardStoresStatus = (HashMap) shards.get(shardId)[ FD ]
Line_2 $$ public void testBasicSerialization() throws Exception -->Line_19 $$ XContentBuilder contentBuilder = XContentFactory.jsonBuilder()[ CD ]
Line_2 $$ public void testBasicSerialization() throws Exception -->Line_14 $$ ImmutableOpenIntMap<List<IndicesShardStoresResponse.StoreStatus>> storesMap = storeStatuses.build()[ CD ]
Line_8 $$ List<IndicesShardStoresResponse.StoreStatus> storeStatusList = new ArrayList()-->Line_12 $$ storeStatuses.put(0, storeStatusList)[ FD ]
Line_19 $$ XContentBuilder contentBuilder = XContentFactory.jsonBuilder()-->Line_22 $$ contentBuilder.endObject()[ FD ]
Line_2 $$ public void testBasicSerialization() throws Exception -->Line_5 $$ ImmutableOpenIntMap.Builder<List<IndicesShardStoresResponse.StoreStatus>> storeStatuses = ImmutableOpenIntMap.builder()[ CD ]
Line_2 $$ public void testBasicSerialization() throws Exception -->Line_12 $$ storeStatuses.put(0, storeStatusList)[ CD ]
Line_14 $$ ImmutableOpenIntMap<List<IndicesShardStoresResponse.StoreStatus>> storesMap = storeStatuses.build()-->Line_15 $$ indexStoreStatuses.put("test", storesMap)[ FD ]
Line_8 $$ List<IndicesShardStoresResponse.StoreStatus> storeStatusList = new ArrayList()-->Line_10 $$ storeStatusList.add(new IndicesShardStoresResponse.StoreStatus(node2, 2, Strings.randomBase64UUID(), IndicesShardStoresResponse.StoreStatus.AllocationStatus.REPLICA, null))[ FD ]
Line_45 $$ for (int i = 0; i < stores.size(); i++) -->Line_47 $$ IndicesShardStoresResponse.StoreStatus storeStatus = storeStatusList.get(i)[ CD ]
Line_23 $$ BytesReference bytes = contentBuilder.bytes()-->Line_24 $$ try (XContentParser parser = XContentFactory.xContent(XContentType.JSON).createParser(bytes)) [ FD ]
Line_5 $$ ImmutableOpenIntMap.Builder<List<IndicesShardStoresResponse.StoreStatus>> storeStatuses = ImmutableOpenIntMap.builder()-->Line_12 $$ storeStatuses.put(0, storeStatusList)[ FD ]
Line_47 $$ IndicesShardStoresResponse.StoreStatus storeStatus = storeStatusList.get(i)-->Line_51 $$ assertThat(((String) storeInfo.get("allocation_id")), equalTo((storeStatus.getAllocationId())))[ FD ]
Line_2 $$ public void testBasicSerialization() throws Exception -->Line_17 $$ failures.add(new IndicesShardStoresResponse.Failure("node1", "test", 3, new NodeDisconnectedException(node1, "")))[ CD ]
Line_45 $$ for (int i = 0; i < stores.size(); i++) -->Line_55 $$ if (storeStatus.getStoreException() != null) [ CD ]
Line_46 $$ HashMap storeInfo = ((HashMap) stores.get(i))-->Line_54 $$ assertThat(storeInfo.containsKey(storeStatus.getNode().id()), equalTo(true))[ FD ]
Line_8 $$ List<IndicesShardStoresResponse.StoreStatus> storeStatusList = new ArrayList()-->Line_13 $$ storeStatuses.put(1, storeStatusList)[ FD ]
Line_28 $$ HashMap failureMap = (HashMap) failureList.get(0)-->Line_31 $$ assertThat(failureMap.containsKey("shard"), equalTo(true))[ FD ]
Line_47 $$ IndicesShardStoresResponse.StoreStatus storeStatus = storeStatusList.get(i)-->Line_49 $$ assertThat(((int) storeInfo.get("version")), equalTo(((int) storeStatus.getVersion())))[ FD ]
