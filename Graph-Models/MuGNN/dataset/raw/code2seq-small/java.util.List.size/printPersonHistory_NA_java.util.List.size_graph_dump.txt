Line_10 $$ DefaultRevisionEntity revision = (DefaultRevisionEntity) history[1]-->Line_11 $$ sb.append("revision = ").append(revision.getId()).append(", ")[ FD ]
Line_2 $$ private void printPersonHistory(StringBuilder sb, int personId) -->Line_5 $$ if (personHistory.size() == 0) [ CD ]
Line_2 $$ private void printPersonHistory(StringBuilder sb, int personId) -->Line_6 $$ sb.append("A person with id ").append(personId).append(" does not exist.\n")[ FD ]
Line_2 $$ private void printPersonHistory(StringBuilder sb, int personId) -->Line_3 $$ AuditReader reader = AuditReaderFactory.get(entityManager)[ CD ]
Line_10 $$ DefaultRevisionEntity revision = (DefaultRevisionEntity) history[1]-->Line_13 $$ sb.append(" (").append(revision.getRevisionDate()).append(")\n")[ FD ]
Line_2 $$ private void printPersonHistory(StringBuilder sb, int personId) -->Line_13 $$ sb.append(" (").append(revision.getRevisionDate()).append(")\n")[ FD ]
Line_3 $$ AuditReader reader = AuditReaderFactory.get(entityManager)-->Line_4 $$ List personHistory = reader.createQuery().forRevisionsOfEntity(Person.class, false, true).add(AuditEntity.id().eq(personId)).getResultList()[ FD ]
Line_4 $$ List personHistory = reader.createQuery().forRevisionsOfEntity(Person.class, false, true).add(AuditEntity.id().eq(personId)).getResultList()-->Line_5 $$ if (personHistory.size() == 0) [ FD ]
Line_2 $$ private void printPersonHistory(StringBuilder sb, int personId) -->Line_11 $$ sb.append("revision = ").append(revision.getId()).append(", ")[ FD ]
Line_2 $$ private void printPersonHistory(StringBuilder sb, int personId) -->Line_12 $$ printPerson(sb, (Person) history[0])[ FD ]
Line_2 $$ private void printPersonHistory(StringBuilder sb, int personId) -->Line_4 $$ List personHistory = reader.createQuery().forRevisionsOfEntity(Person.class, false, true).add(AuditEntity.id().eq(personId)).getResultList()[ FD ]
Line_5 $$ if (personHistory.size() == 0) -->Line_6 $$ sb.append("A person with id ").append(personId).append(" does not exist.\n")[ CD ]
Line_2 $$ private void printPersonHistory(StringBuilder sb, int personId) -->Line_4 $$ List personHistory = reader.createQuery().forRevisionsOfEntity(Person.class, false, true).add(AuditEntity.id().eq(personId)).getResultList()[ CD ]
