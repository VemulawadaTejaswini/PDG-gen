Line_13 $$ CriteriaExecutor criteriaExecutorAliased2 = new CriteriaExecutor() -->Line_15 $$ return s.createCriteria(Student.class, "s").createAlias("s.addresses", "a", Criteria.LEFT_JOIN).addOrder(Order.asc("s.studentNumber"))[ CD ]
Line_20 $$ List resultList = (List) results-->Line_29 $$ assertTrue(Hibernate.isInitialized(((Student) resultList.get(0)).getAddresses()))[ FD ]
Line_18 $$ ResultChecker checker = new ResultChecker() -->Line_21 $$ assertEquals(3, resultList.size())[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_35 $$ runTest(null, criteriaExecutorUnaliased, checker, false)[ FD ]
Line_8 $$ CriteriaExecutor criteriaExecutorAliased1 = new CriteriaExecutor() -->Line_10 $$ return s.createCriteria(Student.class, "s").createCriteria("s.addresses", "a", Criteria.LEFT_JOIN).addOrder(Order.asc("s.studentNumber"))[ CD ]
Line_20 $$ List resultList = (List) results-->Line_27 $$ assertNotNull(((Student) resultList.get(1)).getAddresses())[ FD ]
Line_18 $$ ResultChecker checker = new ResultChecker() -->Line_27 $$ assertNotNull(((Student) resultList.get(1)).getAddresses())[ CD ]
Line_18 $$ ResultChecker checker = new ResultChecker() -->Line_25 $$ assertNotNull(((Student) resultList.get(0)).getAddresses())[ CD ]
Line_18 $$ ResultChecker checker = new ResultChecker() -->Line_28 $$ if (areDynamicNonLazyAssociationsChecked()) [ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Student.class, "s").createCriteria("s.addresses", Criteria.LEFT_JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_18 $$ ResultChecker checker = new ResultChecker() -->Line_26 $$ assertNotNull(((Student) resultList.get(2)).getAddresses())[ CD ]
Line_18 $$ ResultChecker checker = new ResultChecker() -->Line_22 $$ assertEquals(yogiExpected, resultList.get(0))[ CD ]
Line_20 $$ List resultList = (List) results-->Line_26 $$ assertNotNull(((Student) resultList.get(2)).getAddresses())[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_10 $$ return s.createCriteria(Student.class, "s").createCriteria("s.addresses", "a", Criteria.LEFT_JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_15 $$ return s.createCriteria(Student.class, "s").createAlias("s.addresses", "a", Criteria.LEFT_JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_2 $$ public void testEntityWithJoinedLazyOneToManyMultiAndNullListCriteria() throws Exception -->Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() [ CD ]
Line_18 $$ ResultChecker checker = new ResultChecker() -->Line_23 $$ assertSame(resultList.get(0), resultList.get(1))[ CD ]
Line_20 $$ List resultList = (List) results-->Line_31 $$ assertTrue(((Student) resultList.get(2)).getAddresses().isEmpty())[ FD ]
Line_28 $$ if (areDynamicNonLazyAssociationsChecked()) -->Line_29 $$ assertTrue(Hibernate.isInitialized(((Student) resultList.get(0)).getAddresses()))[ CD ]
Line_18 $$ ResultChecker checker = new ResultChecker() -->Line_24 $$ assertEquals(shermanExpected, resultList.get(2))[ CD ]
Line_20 $$ List resultList = (List) results-->Line_25 $$ assertNotNull(((Student) resultList.get(0)).getAddresses())[ FD ]
Line_2 $$ public void testEntityWithJoinedLazyOneToManyMultiAndNullListCriteria() throws Exception -->Line_35 $$ runTest(null, criteriaExecutorUnaliased, checker, false)[ CD ]
Line_20 $$ List resultList = (List) results-->Line_21 $$ assertEquals(3, resultList.size())[ FD ]
Line_18 $$ ResultChecker checker = new ResultChecker() -->Line_20 $$ List resultList = (List) results[ CD ]
Line_20 $$ List resultList = (List) results-->Line_23 $$ assertSame(resultList.get(0), resultList.get(1))[ FD ]
Line_8 $$ CriteriaExecutor criteriaExecutorAliased1 = new CriteriaExecutor() -->Line_10 $$ return s.createCriteria(Student.class, "s").createCriteria("s.addresses", "a", Criteria.LEFT_JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_2 $$ public void testEntityWithJoinedLazyOneToManyMultiAndNullListCriteria() throws Exception -->Line_37 $$ runTest(null, criteriaExecutorAliased2, checker, false)[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutorUnaliased = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Student.class, "s").createCriteria("s.addresses", Criteria.LEFT_JOIN).addOrder(Order.asc("s.studentNumber"))[ CD ]
Line_20 $$ List resultList = (List) results-->Line_22 $$ assertEquals(yogiExpected, resultList.get(0))[ FD ]
Line_28 $$ if (areDynamicNonLazyAssociationsChecked()) -->Line_31 $$ assertTrue(((Student) resultList.get(2)).getAddresses().isEmpty())[ CD ]
Line_2 $$ public void testEntityWithJoinedLazyOneToManyMultiAndNullListCriteria() throws Exception -->Line_36 $$ runTest(null, criteriaExecutorAliased1, checker, false)[ CD ]
Line_28 $$ if (areDynamicNonLazyAssociationsChecked()) -->Line_30 $$ assertEquals(yogiExpected.getAddresses(), ((Student) resultList.get(0)).getAddresses())[ CD ]
Line_20 $$ List resultList = (List) results-->Line_24 $$ assertEquals(shermanExpected, resultList.get(2))[ FD ]
Line_13 $$ CriteriaExecutor criteriaExecutorAliased2 = new CriteriaExecutor() -->Line_15 $$ return s.createCriteria(Student.class, "s").createAlias("s.addresses", "a", Criteria.LEFT_JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_8 $$ CriteriaExecutor criteriaExecutorAliased1 = new CriteriaExecutor() -->Line_15 $$ return s.createCriteria(Student.class, "s").createAlias("s.addresses", "a", Criteria.LEFT_JOIN).addOrder(Order.asc("s.studentNumber"))[ FD ]
Line_20 $$ List resultList = (List) results-->Line_30 $$ assertEquals(yogiExpected.getAddresses(), ((Student) resultList.get(0)).getAddresses())[ FD ]
