Line_5 $$ for (int i = 0; i < 3; i++) -->Line_7 $$ ModificationStatement stmt = (ModificationStatement) getStatement(String.format("INSERT INTO %s (k, v1, v2) " + "VALUES (%s, %s, %s)", KEYSPACE + "." + currentTable(), i, i, functionCall(functionName)))[ CD ]
Line_11 $$ BatchStatement batch = new BatchStatement(-1, BatchStatement.Type.LOGGED, statements, Attributes.none())-->Line_14 $$ assertUnauthorized(batch, functions.subList(1, functions.size()))[ FD ]
Line_2 $$ public void testBatchStatement() throws Throwable -->Line_16 $$ assertUnauthorized(batch, functions.subList(2, functions.size()))[ CD ]
Line_3 $$ List<ModificationStatement> statements = new ArrayList()-->Line_9 $$ statements.add(stmt)[ FD ]
Line_11 $$ BatchStatement batch = new BatchStatement(-1, BatchStatement.Type.LOGGED, statements, Attributes.none())-->Line_12 $$ assertUnauthorized(batch, functions)[ FD ]
Line_2 $$ public void testBatchStatement() throws Throwable -->Line_15 $$ grantExecuteOnFunction(functions.get(1))[ CD ]
Line_2 $$ public void testBatchStatement() throws Throwable -->Line_5 $$ for (int i = 0; i < 3; i++) [ CD ]
Line_6 $$ String functionName = createSimpleFunction()-->Line_7 $$ ModificationStatement stmt = (ModificationStatement) getStatement(String.format("INSERT INTO %s (k, v1, v2) " + "VALUES (%s, %s, %s)", KEYSPACE + "." + currentTable(), i, i, functionCall(functionName)))[ FD ]
Line_5 $$ for (int i = 0; i < 3; i++) -->Line_8 $$ functions.add(functionName)[ CD ]
Line_6 $$ String functionName = createSimpleFunction()-->Line_8 $$ functions.add(functionName)[ FD ]
Line_5 $$ for (int i = 0; i < 3; i++) -->Line_9 $$ statements.add(stmt)[ CD ]
Line_4 $$ List<String> functions = new ArrayList()-->Line_14 $$ assertUnauthorized(batch, functions.subList(1, functions.size()))[ FD ]
Line_2 $$ public void testBatchStatement() throws Throwable -->Line_4 $$ List<String> functions = new ArrayList()[ CD ]
Line_2 $$ public void testBatchStatement() throws Throwable -->Line_12 $$ assertUnauthorized(batch, functions)[ CD ]
Line_7 $$ ModificationStatement stmt = (ModificationStatement) getStatement(String.format("INSERT INTO %s (k, v1, v2) " + "VALUES (%s, %s, %s)", KEYSPACE + "." + currentTable(), i, i, functionCall(functionName)))-->Line_9 $$ statements.add(stmt)[ FD ]
Line_4 $$ List<String> functions = new ArrayList()-->Line_15 $$ grantExecuteOnFunction(functions.get(1))[ FD ]
Line_11 $$ BatchStatement batch = new BatchStatement(-1, BatchStatement.Type.LOGGED, statements, Attributes.none())-->Line_18 $$ batch.checkAccess(clientState)[ FD ]
Line_2 $$ public void testBatchStatement() throws Throwable -->Line_13 $$ grantExecuteOnFunction(functions.get(0))[ CD ]
Line_4 $$ List<String> functions = new ArrayList()-->Line_17 $$ grantExecuteOnFunction(functions.get(2))[ FD ]
Line_5 $$ for (int i = 0; i < 3; i++) -->Line_7 $$ ModificationStatement stmt = (ModificationStatement) getStatement(String.format("INSERT INTO %s (k, v1, v2) " + "VALUES (%s, %s, %s)", KEYSPACE + "." + currentTable(), i, i, functionCall(functionName)))[ FD ]
Line_11 $$ BatchStatement batch = new BatchStatement(-1, BatchStatement.Type.LOGGED, statements, Attributes.none())-->Line_16 $$ assertUnauthorized(batch, functions.subList(2, functions.size()))[ FD ]
Line_4 $$ List<String> functions = new ArrayList()-->Line_12 $$ assertUnauthorized(batch, functions)[ FD ]
Line_2 $$ public void testBatchStatement() throws Throwable -->Line_3 $$ List<ModificationStatement> statements = new ArrayList()[ CD ]
Line_2 $$ public void testBatchStatement() throws Throwable -->Line_17 $$ grantExecuteOnFunction(functions.get(2))[ CD ]
Line_2 $$ public void testBatchStatement() throws Throwable -->Line_14 $$ assertUnauthorized(batch, functions.subList(1, functions.size()))[ CD ]
Line_2 $$ public void testBatchStatement() throws Throwable -->Line_11 $$ BatchStatement batch = new BatchStatement(-1, BatchStatement.Type.LOGGED, statements, Attributes.none())[ CD ]
Line_4 $$ List<String> functions = new ArrayList()-->Line_8 $$ functions.add(functionName)[ FD ]
Line_4 $$ List<String> functions = new ArrayList()-->Line_13 $$ grantExecuteOnFunction(functions.get(0))[ FD ]
Line_4 $$ List<String> functions = new ArrayList()-->Line_16 $$ assertUnauthorized(batch, functions.subList(2, functions.size()))[ FD ]
Line_2 $$ public void testBatchStatement() throws Throwable -->Line_18 $$ batch.checkAccess(clientState)[ CD ]
Line_5 $$ for (int i = 0; i < 3; i++) -->Line_6 $$ String functionName = createSimpleFunction()[ CD ]
