Line_5 $$ final boolean followSymlink = FOLLOW_SYMLINK.resolveModelAttribute(context, model).asBoolean()-->Line_11 $$ UndertowLogger.ROOT_LOGGER.creatingFileHandler(path, directoryListing, followSymlink, caseSensitive, safePaths)[ FD ]
Line_2 $$ public HttpHandler createHandler(final OperationContext context, ModelNode model) throws OperationFailedException -->Line_11 $$ UndertowLogger.ROOT_LOGGER.creatingFileHandler(path, directoryListing, followSymlink, caseSensitive, safePaths)[ CD ]
Line_9 $$ final List<String> safePaths = SAFE_SYMLINK_PATHS.unwrap(context, model)-->Line_11 $$ UndertowLogger.ROOT_LOGGER.creatingFileHandler(path, directoryListing, followSymlink, caseSensitive, safePaths)[ FD ]
Line_2 $$ public HttpHandler createHandler(final OperationContext context, ModelNode model) throws OperationFailedException -->Line_3 $$ final String path = PATH.resolveModelAttribute(context, model).asString()[ FD ]
Line_2 $$ public HttpHandler createHandler(final OperationContext context, ModelNode model) throws OperationFailedException -->Line_6 $$ final boolean caseSensitive = CASE_SENSITIVE.resolveModelAttribute(context, model).asBoolean()[ FD ]
Line_2 $$ public HttpHandler createHandler(final OperationContext context, ModelNode model) throws OperationFailedException -->Line_19 $$ ResourceHandler handler = new ResourceHandler(resourceManager)[ CD ]
Line_2 $$ public HttpHandler createHandler(final OperationContext context, ModelNode model) throws OperationFailedException -->Line_5 $$ final boolean followSymlink = FOLLOW_SYMLINK.resolveModelAttribute(context, model).asBoolean()[ FD ]
Line_9 $$ final List<String> safePaths = SAFE_SYMLINK_PATHS.unwrap(context, model)-->Line_10 $$ final String[] paths = safePaths.toArray(new String[safePaths.size()])[ FD ]
Line_3 $$ final String path = PATH.resolveModelAttribute(context, model).asString()-->Line_11 $$ UndertowLogger.ROOT_LOGGER.creatingFileHandler(path, directoryListing, followSymlink, caseSensitive, safePaths)[ FD ]
Line_4 $$ final boolean directoryListing = DIRECTORY_LISTING.resolveModelAttribute(context, model).asBoolean()-->Line_11 $$ UndertowLogger.ROOT_LOGGER.creatingFileHandler(path, directoryListing, followSymlink, caseSensitive, safePaths)[ FD ]
Line_2 $$ public HttpHandler createHandler(final OperationContext context, ModelNode model) throws OperationFailedException -->Line_18 $$ FileResourceManager resourceManager = new FileResourceManager(base, cacheBufferSize * cacheBuffers, caseSensitive, followSymlink, paths)[ CD ]
Line_6 $$ final boolean caseSensitive = CASE_SENSITIVE.resolveModelAttribute(context, model).asBoolean()-->Line_11 $$ UndertowLogger.ROOT_LOGGER.creatingFileHandler(path, directoryListing, followSymlink, caseSensitive, safePaths)[ FD ]
Line_2 $$ public HttpHandler createHandler(final OperationContext context, ModelNode model) throws OperationFailedException -->Line_4 $$ final boolean directoryListing = DIRECTORY_LISTING.resolveModelAttribute(context, model).asBoolean()[ FD ]
Line_2 $$ public HttpHandler createHandler(final OperationContext context, ModelNode model) throws OperationFailedException -->Line_9 $$ final List<String> safePaths = SAFE_SYMLINK_PATHS.unwrap(context, model)[ FD ]
Line_2 $$ public HttpHandler createHandler(final OperationContext context, ModelNode model) throws OperationFailedException -->Line_21 $$ return handler[ CD ]
Line_12 $$ File base = null-->Line_14 $$ base = new File(path).getCanonicalFile()[ FD ]
Line_2 $$ public HttpHandler createHandler(final OperationContext context, ModelNode model) throws OperationFailedException -->Line_3 $$ final String path = PATH.resolveModelAttribute(context, model).asString()[ CD ]
Line_2 $$ public HttpHandler createHandler(final OperationContext context, ModelNode model) throws OperationFailedException -->Line_7 $$ final int cacheBufferSize = CACHE_BUFFER_SIZE.resolveModelAttribute(context, model).asInt()[ CD ]
Line_2 $$ public HttpHandler createHandler(final OperationContext context, ModelNode model) throws OperationFailedException -->Line_9 $$ final List<String> safePaths = SAFE_SYMLINK_PATHS.unwrap(context, model)[ CD ]
Line_2 $$ public HttpHandler createHandler(final OperationContext context, ModelNode model) throws OperationFailedException -->Line_5 $$ final boolean followSymlink = FOLLOW_SYMLINK.resolveModelAttribute(context, model).asBoolean()[ CD ]
Line_2 $$ public HttpHandler createHandler(final OperationContext context, ModelNode model) throws OperationFailedException -->Line_12 $$ File base = null[ CD ]
Line_2 $$ public HttpHandler createHandler(final OperationContext context, ModelNode model) throws OperationFailedException -->Line_10 $$ final String[] paths = safePaths.toArray(new String[safePaths.size()])[ CD ]
Line_2 $$ public HttpHandler createHandler(final OperationContext context, ModelNode model) throws OperationFailedException -->Line_7 $$ final int cacheBufferSize = CACHE_BUFFER_SIZE.resolveModelAttribute(context, model).asInt()[ FD ]
Line_2 $$ public HttpHandler createHandler(final OperationContext context, ModelNode model) throws OperationFailedException -->Line_20 $$ handler.setDirectoryListingEnabled(directoryListing)[ CD ]
Line_2 $$ public HttpHandler createHandler(final OperationContext context, ModelNode model) throws OperationFailedException -->Line_8 $$ final int cacheBuffers = CACHE_BUFFERS.resolveModelAttribute(context, model).asInt()[ FD ]
Line_2 $$ public HttpHandler createHandler(final OperationContext context, ModelNode model) throws OperationFailedException -->Line_4 $$ final boolean directoryListing = DIRECTORY_LISTING.resolveModelAttribute(context, model).asBoolean()[ CD ]
Line_19 $$ ResourceHandler handler = new ResourceHandler(resourceManager)-->Line_20 $$ handler.setDirectoryListingEnabled(directoryListing)[ FD ]
Line_4 $$ final boolean directoryListing = DIRECTORY_LISTING.resolveModelAttribute(context, model).asBoolean()-->Line_20 $$ handler.setDirectoryListingEnabled(directoryListing)[ FD ]
Line_2 $$ public HttpHandler createHandler(final OperationContext context, ModelNode model) throws OperationFailedException -->Line_8 $$ final int cacheBuffers = CACHE_BUFFERS.resolveModelAttribute(context, model).asInt()[ CD ]
Line_2 $$ public HttpHandler createHandler(final OperationContext context, ModelNode model) throws OperationFailedException -->Line_6 $$ final boolean caseSensitive = CASE_SENSITIVE.resolveModelAttribute(context, model).asBoolean()[ CD ]
