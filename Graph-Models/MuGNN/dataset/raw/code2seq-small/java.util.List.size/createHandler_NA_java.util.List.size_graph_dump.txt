Line_6 $$ final boolean followSymlink = FOLLOW_SYMLINK.resolveModelAttribute(context, model).asBoolean()-->Line_12 $$ UndertowLogger.ROOT_LOGGER.creatingFileHandler(path, directoryListing, followSymlink, caseSensitive, safePaths)[ FD ]
Line_10 $$ final List<String> safePaths = SAFE_SYMLINK_PATHS.unwrap(context, model)-->Line_12 $$ UndertowLogger.ROOT_LOGGER.creatingFileHandler(path, directoryListing, followSymlink, caseSensitive, safePaths)[ FD ]
Line_7 $$ final boolean caseSensitive = CASE_SENSITIVE.resolveModelAttribute(context, model).asBoolean()-->Line_12 $$ UndertowLogger.ROOT_LOGGER.creatingFileHandler(path, directoryListing, followSymlink, caseSensitive, safePaths)[ FD ]
Line_5 $$ final boolean directoryListing = DIRECTORY_LISTING.resolveModelAttribute(context, model).asBoolean()-->Line_12 $$ UndertowLogger.ROOT_LOGGER.creatingFileHandler(path, directoryListing, followSymlink, caseSensitive, safePaths)[ FD ]
Line_13 $$ File base = null-->Line_15 $$ base = new File(path).getCanonicalFile()[ FD ]
Line_5 $$ final boolean directoryListing = DIRECTORY_LISTING.resolveModelAttribute(context, model).asBoolean()-->Line_21 $$ handler.setDirectoryListingEnabled(directoryListing)[ FD ]
Line_10 $$ final List<String> safePaths = SAFE_SYMLINK_PATHS.unwrap(context, model)-->Line_11 $$ final String[] paths = safePaths.toArray(new String[safePaths.size()])[ FD ]
Line_4 $$ final String path = PATH.resolveModelAttribute(context, model).asString()-->Line_12 $$ UndertowLogger.ROOT_LOGGER.creatingFileHandler(path, directoryListing, followSymlink, caseSensitive, safePaths)[ FD ]
Line_20 $$ ResourceHandler handler = new ResourceHandler(resourceManager)-->Line_21 $$ handler.setDirectoryListingEnabled(directoryListing)[ FD ]
