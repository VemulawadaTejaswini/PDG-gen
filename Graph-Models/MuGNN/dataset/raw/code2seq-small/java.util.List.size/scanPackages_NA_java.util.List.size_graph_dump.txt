Line_15 $$ if (isJaxb2Class(metadataReader, metadataReaderFactory)) -->Line_17 $$ Class<?> jaxb2AnnotatedClass = this.resourcePatternResolver.getClassLoader().loadClass(className)[ CD ]
Line_12 $$ MetadataReaderFactory metadataReaderFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)-->Line_15 $$ if (isJaxb2Class(metadataReader, metadataReaderFactory)) [ FD ]
Line_8 $$ List<Class<?>> jaxb2Classes = new ArrayList<Class<?>>()-->Line_18 $$ jaxb2Classes.add(jaxb2AnnotatedClass)[ FD ]
Line_13 $$ for (Resource resource : resources) -->Line_14 $$ MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(resource)[ FD ]
Line_14 $$ MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(resource)-->Line_16 $$ String className = metadataReader.getClassMetadata().getClassName()[ FD ]
Line_9 $$ for (String packageToScan : this.packagesToScan) -->Line_10 $$ String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX + ClassUtils.convertClassNameToResourcePath(packageToScan) + RESOURCE_PATTERN[ FD ]
Line_17 $$ Class<?> jaxb2AnnotatedClass = this.resourcePatternResolver.getClassLoader().loadClass(className)-->Line_18 $$ jaxb2Classes.add(jaxb2AnnotatedClass)[ FD ]
Line_14 $$ MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(resource)-->Line_15 $$ if (isJaxb2Class(metadataReader, metadataReaderFactory)) [ FD ]
Line_16 $$ String className = metadataReader.getClassMetadata().getClassName()-->Line_17 $$ Class<?> jaxb2AnnotatedClass = this.resourcePatternResolver.getClassLoader().loadClass(className)[ FD ]
Line_8 $$ List<Class<?>> jaxb2Classes = new ArrayList<Class<?>>()-->Line_22 $$ return jaxb2Classes.toArray(new Class<?>[jaxb2Classes.size()])[ FD ]
Line_15 $$ if (isJaxb2Class(metadataReader, metadataReaderFactory)) -->Line_16 $$ String className = metadataReader.getClassMetadata().getClassName()[ CD ]
Line_15 $$ if (isJaxb2Class(metadataReader, metadataReaderFactory)) -->Line_18 $$ jaxb2Classes.add(jaxb2AnnotatedClass)[ CD ]
Line_12 $$ MetadataReaderFactory metadataReaderFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)-->Line_14 $$ MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(resource)[ FD ]
Line_10 $$ String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX + ClassUtils.convertClassNameToResourcePath(packageToScan) + RESOURCE_PATTERN-->Line_11 $$ Resource[] resources = this.resourcePatternResolver.getResources(pattern)[ FD ]
