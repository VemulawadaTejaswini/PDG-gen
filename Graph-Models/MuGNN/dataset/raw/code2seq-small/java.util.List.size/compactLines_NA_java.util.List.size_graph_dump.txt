Line_2 $$ private static List<String> compactLines(List<String> srcLines, int requiredLineNumber) -->Line_6 $$ List<String> res = new LinkedList<String>(srcLines)[ CD ]
Line_6 $$ List<String> res = new LinkedList<String>(srcLines)-->Line_12 $$ res.remove(i)[ FD ]
Line_6 $$ List<String> res = new LinkedList<String>(srcLines)-->Line_23 $$ res.remove(i)[ FD ]
Line_2 $$ private static List<String> compactLines(List<String> srcLines, int requiredLineNumber) -->Line_14 $$ if (res.size() <= requiredLineNumber) [ FD ]
Line_6 $$ List<String> res = new LinkedList<String>(srcLines)-->Line_22 $$ res.set(i - 1, res.get(i - 1).concat(s))[ FD ]
Line_21 $$ if (s.trim().isEmpty()) -->Line_22 $$ res.set(i - 1, res.get(i - 1).concat(s))[ CD ]
Line_9 $$ String s = res.get(i)-->Line_11 $$ res.set(i - 1, res.get(i - 1).concat(s))[ FD ]
Line_3 $$ if (srcLines.size() < 2 || srcLines.size() <= requiredLineNumber) -->Line_4 $$ return srcLines[ CD ]
Line_9 $$ String s = res.get(i)-->Line_10 $$ if (s.trim().equals("[ FD ]
Line_10 $$ if (s.trim().equals("-->Line_12 $$ res.remove(i)[ CD ]
Line_2 $$ private static List<String> compactLines(List<String> srcLines, int requiredLineNumber) -->Line_3 $$ if (srcLines.size() < 2 || srcLines.size() <= requiredLineNumber) [ FD ]
Line_9 $$ String s = res.get(i)-->Line_21 $$ if (s.trim().isEmpty()) [ FD ]
Line_6 $$ List<String> res = new LinkedList<String>(srcLines)-->Line_25 $$ if (res.size() <= requiredLineNumber) [ FD ]
Line_6 $$ List<String> res = new LinkedList<String>(srcLines)-->Line_9 $$ String s = res.get(i)[ FD ]
Line_6 $$ List<String> res = new LinkedList<String>(srcLines)-->Line_14 $$ if (res.size() <= requiredLineNumber) [ FD ]
Line_9 $$ String s = res.get(i)-->Line_22 $$ res.set(i - 1, res.get(i - 1).concat(s))[ FD ]
Line_20 $$ String s = res.get(i)-->Line_21 $$ if (s.trim().isEmpty()) [ FD ]
Line_20 $$ String s = res.get(i)-->Line_22 $$ res.set(i - 1, res.get(i - 1).concat(s))[ FD ]
Line_2 $$ private static List<String> compactLines(List<String> srcLines, int requiredLineNumber) -->Line_29 $$ return res[ CD ]
Line_6 $$ List<String> res = new LinkedList<String>(srcLines)-->Line_20 $$ String s = res.get(i)[ FD ]
Line_25 $$ if (res.size() <= requiredLineNumber) -->Line_26 $$ return res[ CD ]
Line_2 $$ private static List<String> compactLines(List<String> srcLines, int requiredLineNumber) -->Line_25 $$ if (res.size() <= requiredLineNumber) [ FD ]
Line_6 $$ List<String> res = new LinkedList<String>(srcLines)-->Line_11 $$ res.set(i - 1, res.get(i - 1).concat(s))[ FD ]
Line_21 $$ if (s.trim().isEmpty()) -->Line_23 $$ res.remove(i)[ CD ]
Line_14 $$ if (res.size() <= requiredLineNumber) -->Line_15 $$ return res[ CD ]
Line_10 $$ if (s.trim().equals("-->Line_11 $$ res.set(i - 1, res.get(i - 1).concat(s))[ CD ]
Line_2 $$ private static List<String> compactLines(List<String> srcLines, int requiredLineNumber) -->Line_3 $$ if (srcLines.size() < 2 || srcLines.size() <= requiredLineNumber) [ CD ]
