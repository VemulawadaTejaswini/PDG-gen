Line_2 $$ private static List<String> compactLines(List<String> srcLines, int requiredLineNumber) -->Line_13 $$ if (res.size() <= requiredLineNumber) [ FD ]
Line_7 $$ for (int i = res.size() - 1; i > 0; i--) -->Line_18 $$ String s = res.get(i)[ FD ]
Line_2 $$ private static List<String> compactLines(List<String> srcLines, int requiredLineNumber) -->Line_7 $$ for (int i = res.size() - 1; i > 0; i--) [ CD ]
Line_7 $$ for (int i = res.size() - 1; i > 0; i--) -->Line_8 $$ String s = res.get(i)[ CD ]
Line_2 $$ private static List<String> compactLines(List<String> srcLines, int requiredLineNumber) -->Line_17 $$ for (int i = res.size() - 1; i > 0; i--) [ CD ]
Line_18 $$ String s = res.get(i)-->Line_19 $$ if (s.trim().isEmpty()) [ FD ]
Line_6 $$ List<String> res = new LinkedList<String>(srcLines)-->Line_13 $$ if (res.size() <= requiredLineNumber) [ FD ]
Line_6 $$ List<String> res = new LinkedList<String>(srcLines)-->Line_18 $$ String s = res.get(i)[ FD ]
Line_6 $$ List<String> res = new LinkedList<String>(srcLines)-->Line_21 $$ res.remove(i)[ FD ]
Line_7 $$ for (int i = res.size() - 1; i > 0; i--) -->Line_9 $$ if (s.trim().equals("[ CD ]
Line_6 $$ List<String> res = new LinkedList<String>(srcLines)-->Line_10 $$ res.set(i - 1, res.get(i - 1).concat(s))[ FD ]
Line_13 $$ if (res.size() <= requiredLineNumber) -->Line_14 $$ return res[ CD ]
Line_6 $$ List<String> res = new LinkedList<String>(srcLines)-->Line_23 $$ if (res.size() <= requiredLineNumber) [ FD ]
Line_7 $$ for (int i = res.size() - 1; i > 0; i--) -->Line_13 $$ if (res.size() <= requiredLineNumber) [ CD ]
Line_18 $$ String s = res.get(i)-->Line_20 $$ res.set(i - 1, res.get(i - 1).concat(s))[ FD ]
Line_6 $$ List<String> res = new LinkedList<String>(srcLines)-->Line_7 $$ for (int i = res.size() - 1; i > 0; i--) [ FD ]
Line_23 $$ if (res.size() <= requiredLineNumber) -->Line_24 $$ return res[ CD ]
Line_7 $$ for (int i = res.size() - 1; i > 0; i--) -->Line_17 $$ for (int i = res.size() - 1; i > 0; i--) [ FD ]
Line_8 $$ String s = res.get(i)-->Line_20 $$ res.set(i - 1, res.get(i - 1).concat(s))[ FD ]
Line_3 $$ if (srcLines.size() < 2 || srcLines.size() <= requiredLineNumber) -->Line_4 $$ return srcLines[ CD ]
Line_7 $$ for (int i = res.size() - 1; i > 0; i--) -->Line_8 $$ String s = res.get(i)[ FD ]
Line_2 $$ private static List<String> compactLines(List<String> srcLines, int requiredLineNumber) -->Line_23 $$ if (res.size() <= requiredLineNumber) [ FD ]
Line_8 $$ String s = res.get(i)-->Line_19 $$ if (s.trim().isEmpty()) [ FD ]
Line_6 $$ List<String> res = new LinkedList<String>(srcLines)-->Line_11 $$ res.remove(i)[ FD ]
Line_8 $$ String s = res.get(i)-->Line_10 $$ res.set(i - 1, res.get(i - 1).concat(s))[ FD ]
Line_9 $$ if (s.trim().equals("-->Line_10 $$ res.set(i - 1, res.get(i - 1).concat(s))[ CD ]
Line_17 $$ for (int i = res.size() - 1; i > 0; i--) -->Line_18 $$ String s = res.get(i)[ FD ]
Line_2 $$ private static List<String> compactLines(List<String> srcLines, int requiredLineNumber) -->Line_6 $$ List<String> res = new LinkedList<String>(srcLines)[ CD ]
Line_6 $$ List<String> res = new LinkedList<String>(srcLines)-->Line_8 $$ String s = res.get(i)[ FD ]
Line_17 $$ for (int i = res.size() - 1; i > 0; i--) -->Line_23 $$ if (res.size() <= requiredLineNumber) [ CD ]
Line_2 $$ private static List<String> compactLines(List<String> srcLines, int requiredLineNumber) -->Line_27 $$ return res[ CD ]
Line_17 $$ for (int i = res.size() - 1; i > 0; i--) -->Line_21 $$ res.remove(i)[ FD ]
Line_2 $$ private static List<String> compactLines(List<String> srcLines, int requiredLineNumber) -->Line_3 $$ if (srcLines.size() < 2 || srcLines.size() <= requiredLineNumber) [ FD ]
Line_17 $$ for (int i = res.size() - 1; i > 0; i--) -->Line_19 $$ if (s.trim().isEmpty()) [ CD ]
Line_8 $$ String s = res.get(i)-->Line_9 $$ if (s.trim().equals("[ FD ]
Line_19 $$ if (s.trim().isEmpty()) -->Line_21 $$ res.remove(i)[ CD ]
Line_6 $$ List<String> res = new LinkedList<String>(srcLines)-->Line_17 $$ for (int i = res.size() - 1; i > 0; i--) [ FD ]
Line_9 $$ if (s.trim().equals("-->Line_11 $$ res.remove(i)[ CD ]
Line_19 $$ if (s.trim().isEmpty()) -->Line_20 $$ res.set(i - 1, res.get(i - 1).concat(s))[ CD ]
Line_2 $$ private static List<String> compactLines(List<String> srcLines, int requiredLineNumber) -->Line_3 $$ if (srcLines.size() < 2 || srcLines.size() <= requiredLineNumber) [ CD ]
Line_7 $$ for (int i = res.size() - 1; i > 0; i--) -->Line_11 $$ res.remove(i)[ FD ]
Line_7 $$ for (int i = res.size() - 1; i > 0; i--) -->Line_21 $$ res.remove(i)[ FD ]
Line_6 $$ List<String> res = new LinkedList<String>(srcLines)-->Line_20 $$ res.set(i - 1, res.get(i - 1).concat(s))[ FD ]
Line_17 $$ for (int i = res.size() - 1; i > 0; i--) -->Line_18 $$ String s = res.get(i)[ CD ]
