Line_53 $$ GetResponse response = client().prepareGet("test", "type1", Integer.toString(i)).execute().actionGet()-->Line_55 $$ assertThat(response.isExists(), equalTo(true))[ FD ]
Line_2 $$ public void testConcurrentUpdateWithRetryOnConflict() throws Exception -->Line_11 $$ for (int i = 0; i < numberOfThreads; i++) [ CD ]
Line_2 $$ public void testConcurrentUpdateWithRetryOnConflict() throws Exception -->Line_52 $$ for (int i = 0; i < numberOfUpdatesPerThread; i++) [ CD ]
Line_52 $$ for (int i = 0; i < numberOfUpdatesPerThread; i++) -->Line_56 $$ assertThat(response.getVersion(), equalTo((long) numberOfThreads))[ CD ]
Line_10 $$ final List<Throwable> failures = new CopyOnWriteArrayList()-->Line_36 $$ failures.add(e)[ FD ]
Line_2 $$ public void testConcurrentUpdateWithRetryOnConflict() throws Exception -->Line_4 $$ createTestIndex()[ CD ]
Line_11 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_18 $$ for (int i = 0; i < numberOfUpdatesPerThread; i++) [ FD ]
Line_7 $$ final CountDownLatch latch = new CountDownLatch(numberOfThreads)-->Line_47 $$ latch.await()[ FD ]
Line_2 $$ public void testConcurrentUpdateWithRetryOnConflict() throws Exception -->Line_8 $$ final CountDownLatch startLatch = new CountDownLatch(1)[ CD ]
Line_52 $$ for (int i = 0; i < numberOfUpdatesPerThread; i++) -->Line_54 $$ assertThat(response.getId(), equalTo(Integer.toString(i)))[ FD ]
Line_11 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_12 $$ Runnable r = new Runnable() [ CD ]
Line_6 $$ int numberOfThreads = scaledRandomIntBetween(2, 5)-->Line_57 $$ assertThat((Integer) response.getSource().get("field"), equalTo(numberOfThreads))[ FD ]
Line_19 $$ if (i % 100 == 0) -->Line_20 $$ logger.debug("Client [[ CD ]
Line_11 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_52 $$ for (int i = 0; i < numberOfUpdatesPerThread; i++) [ FD ]
Line_11 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_53 $$ GetResponse response = client().prepareGet("test", "type1", Integer.toString(i)).execute().actionGet()[ FD ]
Line_22 $$ if (useBulkApi) -->Line_23 $$ UpdateRequestBuilder updateRequestBuilder = client().prepareUpdate(indexOrAlias(), "type1", Integer.toString(i)).setScript(new Script("field", ScriptService.ScriptType.INLINE, "field_inc", null)).setRetryOnConflict(Integer.MAX_VALUE).setUpsert(jsonBuilder().startObject().field("field", 1).endObject())[ CD ]
Line_23 $$ UpdateRequestBuilder updateRequestBuilder = client().prepareUpdate(indexOrAlias(), "type1", Integer.toString(i)).setScript(new Script("field", ScriptService.ScriptType.INLINE, "field_inc", null)).setRetryOnConflict(Integer.MAX_VALUE).setUpsert(jsonBuilder().startObject().field("field", 1).endObject())-->Line_24 $$ client().prepareBulk().add(updateRequestBuilder).execute().actionGet()[ FD ]
Line_53 $$ GetResponse response = client().prepareGet("test", "type1", Integer.toString(i)).execute().actionGet()-->Line_57 $$ assertThat((Integer) response.getSource().get("field"), equalTo(numberOfThreads))[ FD ]
Line_18 $$ for (int i = 0; i < numberOfUpdatesPerThread; i++) -->Line_23 $$ UpdateRequestBuilder updateRequestBuilder = client().prepareUpdate(indexOrAlias(), "type1", Integer.toString(i)).setScript(new Script("field", ScriptService.ScriptType.INLINE, "field_inc", null)).setRetryOnConflict(Integer.MAX_VALUE).setUpsert(jsonBuilder().startObject().field("field", 1).endObject())[ FD ]
Line_18 $$ for (int i = 0; i < numberOfUpdatesPerThread; i++) -->Line_52 $$ for (int i = 0; i < numberOfUpdatesPerThread; i++) [ FD ]
Line_8 $$ final CountDownLatch startLatch = new CountDownLatch(1)-->Line_17 $$ startLatch.await()[ FD ]
Line_11 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_26 $$ client().prepareUpdate(indexOrAlias(), "type1", Integer.toString(i)).setScript(new Script("field", ScriptService.ScriptType.INLINE, "field_inc", null)).setRetryOnConflict(Integer.MAX_VALUE).setUpsert(jsonBuilder().startObject().field("field", 1).endObject()).execute().actionGet()[ FD ]
Line_2 $$ public void testConcurrentUpdateWithRetryOnConflict() throws Exception -->Line_47 $$ latch.await()[ CD ]
Line_22 $$ if (useBulkApi) -->Line_24 $$ client().prepareBulk().add(updateRequestBuilder).execute().actionGet()[ CD ]
Line_11 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_43 $$ updater.setName("UpdateIT-Client-" + i)[ CD ]
Line_2 $$ public void testConcurrentUpdateWithRetryOnConflict() throws Exception -->Line_51 $$ assertThat(failures.size(), equalTo(0))[ CD ]
Line_52 $$ for (int i = 0; i < numberOfUpdatesPerThread; i++) -->Line_53 $$ GetResponse response = client().prepareGet("test", "type1", Integer.toString(i)).execute().actionGet()[ CD ]
Line_9 $$ final int numberOfUpdatesPerThread = scaledRandomIntBetween(100, 500)-->Line_18 $$ for (int i = 0; i < numberOfUpdatesPerThread; i++) [ FD ]
Line_10 $$ final List<Throwable> failures = new CopyOnWriteArrayList()-->Line_51 $$ assertThat(failures.size(), equalTo(0))[ FD ]
Line_52 $$ for (int i = 0; i < numberOfUpdatesPerThread; i++) -->Line_57 $$ assertThat((Integer) response.getSource().get("field"), equalTo(numberOfThreads))[ CD ]
Line_2 $$ public void testConcurrentUpdateWithRetryOnConflict() throws Exception -->Line_6 $$ int numberOfThreads = scaledRandomIntBetween(2, 5)[ CD ]
Line_18 $$ for (int i = 0; i < numberOfUpdatesPerThread; i++) -->Line_22 $$ if (useBulkApi) [ CD ]
Line_18 $$ for (int i = 0; i < numberOfUpdatesPerThread; i++) -->Line_26 $$ client().prepareUpdate(indexOrAlias(), "type1", Integer.toString(i)).setScript(new Script("field", ScriptService.ScriptType.INLINE, "field_inc", null)).setRetryOnConflict(Integer.MAX_VALUE).setUpsert(jsonBuilder().startObject().field("field", 1).endObject()).execute().actionGet()[ FD ]
Line_9 $$ final int numberOfUpdatesPerThread = scaledRandomIntBetween(100, 500)-->Line_20 $$ logger.debug("Client [[ FD ]
Line_2 $$ public void testConcurrentUpdateWithRetryOnConflict() throws Exception -->Line_3 $$ final boolean useBulkApi = randomBoolean()[ CD ]
Line_18 $$ for (int i = 0; i < numberOfUpdatesPerThread; i++) -->Line_19 $$ if (i % 100 == 0) [ CD ]
Line_18 $$ for (int i = 0; i < numberOfUpdatesPerThread; i++) -->Line_20 $$ logger.debug("Client [[ FD ]
Line_8 $$ final CountDownLatch startLatch = new CountDownLatch(1)-->Line_46 $$ startLatch.countDown()[ FD ]
Line_10 $$ final List<Throwable> failures = new CopyOnWriteArrayList()-->Line_33 $$ failures.add(e)[ FD ]
Line_52 $$ for (int i = 0; i < numberOfUpdatesPerThread; i++) -->Line_54 $$ assertThat(response.getId(), equalTo(Integer.toString(i)))[ CD ]
Line_2 $$ public void testConcurrentUpdateWithRetryOnConflict() throws Exception -->Line_7 $$ final CountDownLatch latch = new CountDownLatch(numberOfThreads)[ CD ]
Line_2 $$ public void testConcurrentUpdateWithRetryOnConflict() throws Exception -->Line_5 $$ ensureGreen()[ CD ]
Line_18 $$ for (int i = 0; i < numberOfUpdatesPerThread; i++) -->Line_53 $$ GetResponse response = client().prepareGet("test", "type1", Integer.toString(i)).execute().actionGet()[ FD ]
Line_9 $$ final int numberOfUpdatesPerThread = scaledRandomIntBetween(100, 500)-->Line_29 $$ logger.info("Client [[ FD ]
Line_11 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_23 $$ UpdateRequestBuilder updateRequestBuilder = client().prepareUpdate(indexOrAlias(), "type1", Integer.toString(i)).setScript(new Script("field", ScriptService.ScriptType.INLINE, "field_inc", null)).setRetryOnConflict(Integer.MAX_VALUE).setUpsert(jsonBuilder().startObject().field("field", 1).endObject())[ FD ]
Line_6 $$ int numberOfThreads = scaledRandomIntBetween(2, 5)-->Line_11 $$ for (int i = 0; i < numberOfThreads; i++) [ FD ]
Line_9 $$ final int numberOfUpdatesPerThread = scaledRandomIntBetween(100, 500)-->Line_52 $$ for (int i = 0; i < numberOfUpdatesPerThread; i++) [ FD ]
Line_2 $$ public void testConcurrentUpdateWithRetryOnConflict() throws Exception -->Line_9 $$ final int numberOfUpdatesPerThread = scaledRandomIntBetween(100, 500)[ CD ]
Line_7 $$ final CountDownLatch latch = new CountDownLatch(numberOfThreads)-->Line_38 $$ latch.countDown()[ FD ]
Line_2 $$ public void testConcurrentUpdateWithRetryOnConflict() throws Exception -->Line_46 $$ startLatch.countDown()[ CD ]
Line_11 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_20 $$ logger.debug("Client [[ FD ]
Line_52 $$ for (int i = 0; i < numberOfUpdatesPerThread; i++) -->Line_53 $$ GetResponse response = client().prepareGet("test", "type1", Integer.toString(i)).execute().actionGet()[ FD ]
Line_52 $$ for (int i = 0; i < numberOfUpdatesPerThread; i++) -->Line_55 $$ assertThat(response.isExists(), equalTo(true))[ CD ]
Line_11 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_44 $$ updater.start()[ CD ]
Line_22 $$ if (useBulkApi) -->Line_26 $$ client().prepareUpdate(indexOrAlias(), "type1", Integer.toString(i)).setScript(new Script("field", ScriptService.ScriptType.INLINE, "field_inc", null)).setRetryOnConflict(Integer.MAX_VALUE).setUpsert(jsonBuilder().startObject().field("field", 1).endObject()).execute().actionGet()[ CD ]
Line_18 $$ for (int i = 0; i < numberOfUpdatesPerThread; i++) -->Line_54 $$ assertThat(response.getId(), equalTo(Integer.toString(i)))[ FD ]
Line_2 $$ public void testConcurrentUpdateWithRetryOnConflict() throws Exception -->Line_10 $$ final List<Throwable> failures = new CopyOnWriteArrayList()[ CD ]
Line_53 $$ GetResponse response = client().prepareGet("test", "type1", Integer.toString(i)).execute().actionGet()-->Line_54 $$ assertThat(response.getId(), equalTo(Integer.toString(i)))[ FD ]
Line_53 $$ GetResponse response = client().prepareGet("test", "type1", Integer.toString(i)).execute().actionGet()-->Line_56 $$ assertThat(response.getVersion(), equalTo((long) numberOfThreads))[ FD ]
Line_11 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_54 $$ assertThat(response.getId(), equalTo(Integer.toString(i)))[ FD ]
