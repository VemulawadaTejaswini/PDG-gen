Line_7 $$ final String attribName = attribute.getName().getStringValue()-->Line_8 $$ if (attribName != null && attribName.length() > 0) [ FD ]
Line_4 $$ if (parentMacrodef != null) -->Line_5 $$ final List variants = new ArrayList()[ CD ]
Line_10 $$ final LookupElement element = AutoCompletionPolicy.GIVE_CHANCE_TO_OVERWRITE.applyPolicy(builder)-->Line_11 $$ variants.add(element)[ FD ]
Line_5 $$ final List variants = new ArrayList()-->Line_14 $$ return ContainerUtil.toArray(variants, new Object[variants.size()])[ FD ]
Line_8 $$ if (attribName != null && attribName.length() > 0) -->Line_9 $$ final LookupElementBuilder builder = LookupElementBuilder.create(attribName)[ CD ]
Line_7 $$ final String attribName = attribute.getName().getStringValue()-->Line_9 $$ final LookupElementBuilder builder = LookupElementBuilder.create(attribName)[ FD ]
Line_3 $$ final AntDomMacroDef parentMacrodef = getParentMacrodef()-->Line_4 $$ if (parentMacrodef != null) [ FD ]
Line_2 $$ public Object[] getVariants() -->Line_4 $$ if (parentMacrodef != null) [ CD ]
Line_8 $$ if (attribName != null && attribName.length() > 0) -->Line_10 $$ final LookupElement element = AutoCompletionPolicy.GIVE_CHANCE_TO_OVERWRITE.applyPolicy(builder)[ CD ]
Line_8 $$ if (attribName != null && attribName.length() > 0) -->Line_11 $$ variants.add(element)[ CD ]
Line_5 $$ final List variants = new ArrayList()-->Line_11 $$ variants.add(element)[ FD ]
Line_6 $$ for (AntDomMacrodefAttribute attribute : parentMacrodef.getMacroAttributes()) -->Line_7 $$ final String attribName = attribute.getName().getStringValue()[ FD ]
Line_3 $$ final AntDomMacroDef parentMacrodef = getParentMacrodef()-->Line_6 $$ for (AntDomMacrodefAttribute attribute : parentMacrodef.getMacroAttributes()) [ FD ]
Line_9 $$ final LookupElementBuilder builder = LookupElementBuilder.create(attribName)-->Line_10 $$ final LookupElement element = AutoCompletionPolicy.GIVE_CHANCE_TO_OVERWRITE.applyPolicy(builder)[ FD ]
Line_4 $$ if (parentMacrodef != null) -->Line_14 $$ return ContainerUtil.toArray(variants, new Object[variants.size()])[ CD ]
Line_2 $$ public Object[] getVariants() -->Line_3 $$ final AntDomMacroDef parentMacrodef = getParentMacrodef()[ CD ]
Line_2 $$ public Object[] getVariants() -->Line_16 $$ return EMPTY_ARRAY[ CD ]
