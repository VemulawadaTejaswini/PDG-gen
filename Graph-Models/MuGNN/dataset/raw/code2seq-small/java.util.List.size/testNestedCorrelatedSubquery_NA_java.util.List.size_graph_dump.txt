Line_13 $$ Enrolment enrolment = new Enrolment()-->Line_22 $$ session.persist(enrolment)[ FD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_29 $$ DetachedCriteria subQuery = DetachedCriteria.forClass(Enrolment.class, "enrolment")[ CD ]
Line_3 $$ Session session = openSession()-->Line_24 $$ session.clear()[ FD ]
Line_5 $$ Course course = new Course()-->Line_15 $$ enrolment.setCourseCode(course.getCourseCode())[ FD ]
Line_3 $$ Session session = openSession()-->Line_4 $$ Transaction t = session.beginTransaction()[ FD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_18 $$ enrolment.setStudent(gavin)[ CD ]
Line_9 $$ Student gavin = new Student()-->Line_19 $$ enrolment.setStudentNumber(gavin.getStudentNumber())[ FD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_24 $$ session.clear()[ CD ]
Line_26 $$ DetachedCriteria nestedSubQuery = DetachedCriteria.forClass(Enrolment.class, "maxStudentEnrolment")-->Line_30 $$ subQuery.add(Subqueries.propertyEq("enrolment.year", nestedSubQuery))[ FD ]
Line_5 $$ Course course = new Course()-->Line_7 $$ course.setDescription("Hibernate Training")[ FD ]
Line_4 $$ Transaction t = session.beginTransaction()-->Line_36 $$ t.rollback()[ FD ]
Line_26 $$ DetachedCriteria nestedSubQuery = DetachedCriteria.forClass(Enrolment.class, "maxStudentEnrolment")-->Line_27 $$ nestedSubQuery.add(Restrictions.eqProperty("student.preferredCourse", "maxStudentEnrolment.course"))[ FD ]
Line_5 $$ Course course = new Course()-->Line_12 $$ gavin.setPreferredCourse(course)[ FD ]
Line_13 $$ Enrolment enrolment = new Enrolment()-->Line_18 $$ enrolment.setStudent(gavin)[ FD ]
Line_3 $$ Session session = openSession()-->Line_23 $$ session.flush()[ FD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_32 $$ mainCriteria.add(Subqueries.exists(subQuery))[ CD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_13 $$ Enrolment enrolment = new Enrolment()[ CD ]
Line_9 $$ Student gavin = new Student()-->Line_10 $$ gavin.setName("Gavin King")[ FD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_15 $$ enrolment.setCourseCode(course.getCourseCode())[ CD ]
Line_9 $$ Student gavin = new Student()-->Line_21 $$ session.persist(gavin)[ FD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_30 $$ subQuery.add(Subqueries.propertyEq("enrolment.year", nestedSubQuery))[ CD ]
Line_9 $$ Student gavin = new Student()-->Line_35 $$ assertEquals(gavin.getStudentNumber(), ((Student) results.get(0)).getStudentNumber())[ FD ]
Line_29 $$ DetachedCriteria subQuery = DetachedCriteria.forClass(Enrolment.class, "enrolment")-->Line_32 $$ mainCriteria.add(Subqueries.exists(subQuery))[ FD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_4 $$ Transaction t = session.beginTransaction()[ CD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_28 $$ nestedSubQuery.setProjection(Projections.max("maxStudentEnrolment.year"))[ CD ]
Line_33 $$ List results = mainCriteria.getExecutableCriteria(session).list()-->Line_34 $$ assertEquals(1, results.size())[ FD ]
Line_5 $$ Course course = new Course()-->Line_8 $$ session.persist(course)[ FD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_3 $$ Session session = openSession()[ CD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_17 $$ enrolment.setYear((short) 1999)[ CD ]
Line_3 $$ Session session = openSession()-->Line_8 $$ session.persist(course)[ FD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_37 $$ session.close()[ CD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_8 $$ session.persist(course)[ CD ]
Line_29 $$ DetachedCriteria subQuery = DetachedCriteria.forClass(Enrolment.class, "enrolment")-->Line_31 $$ subQuery.setProjection(Projections.property("student"))[ FD ]
Line_9 $$ Student gavin = new Student()-->Line_18 $$ enrolment.setStudent(gavin)[ FD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_33 $$ List results = mainCriteria.getExecutableCriteria(session).list()[ CD ]
Line_13 $$ Enrolment enrolment = new Enrolment()-->Line_15 $$ enrolment.setCourseCode(course.getCourseCode())[ FD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_31 $$ subQuery.setProjection(Projections.property("student"))[ CD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_34 $$ assertEquals(1, results.size())[ CD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_6 $$ course.setCourseCode("HIB")[ CD ]
Line_13 $$ Enrolment enrolment = new Enrolment()-->Line_17 $$ enrolment.setYear((short) 1999)[ FD ]
Line_25 $$ DetachedCriteria mainCriteria = DetachedCriteria.forClass(Student.class, "student")-->Line_32 $$ mainCriteria.add(Subqueries.exists(subQuery))[ FD ]
Line_3 $$ Session session = openSession()-->Line_20 $$ session.persist(course)[ FD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_25 $$ DetachedCriteria mainCriteria = DetachedCriteria.forClass(Student.class, "student")[ CD ]
Line_3 $$ Session session = openSession()-->Line_22 $$ session.persist(enrolment)[ FD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_7 $$ course.setDescription("Hibernate Training")[ CD ]
Line_5 $$ Course course = new Course()-->Line_14 $$ enrolment.setCourse(course)[ FD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_35 $$ assertEquals(gavin.getStudentNumber(), ((Student) results.get(0)).getStudentNumber())[ CD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_36 $$ t.rollback()[ CD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_21 $$ session.persist(gavin)[ CD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_16 $$ enrolment.setSemester((short) 1)[ CD ]
Line_3 $$ Session session = openSession()-->Line_33 $$ List results = mainCriteria.getExecutableCriteria(session).list()[ FD ]
Line_25 $$ DetachedCriteria mainCriteria = DetachedCriteria.forClass(Student.class, "student")-->Line_33 $$ List results = mainCriteria.getExecutableCriteria(session).list()[ FD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_12 $$ gavin.setPreferredCourse(course)[ CD ]
Line_9 $$ Student gavin = new Student()-->Line_11 $$ gavin.setStudentNumber(232)[ FD ]
Line_13 $$ Enrolment enrolment = new Enrolment()-->Line_16 $$ enrolment.setSemester((short) 1)[ FD ]
Line_9 $$ Student gavin = new Student()-->Line_12 $$ gavin.setPreferredCourse(course)[ FD ]
Line_13 $$ Enrolment enrolment = new Enrolment()-->Line_14 $$ enrolment.setCourse(course)[ FD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_22 $$ session.persist(enrolment)[ CD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_9 $$ Student gavin = new Student()[ CD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_23 $$ session.flush()[ CD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_10 $$ gavin.setName("Gavin King")[ CD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_11 $$ gavin.setStudentNumber(232)[ CD ]
Line_5 $$ Course course = new Course()-->Line_6 $$ course.setCourseCode("HIB")[ FD ]
Line_33 $$ List results = mainCriteria.getExecutableCriteria(session).list()-->Line_35 $$ assertEquals(gavin.getStudentNumber(), ((Student) results.get(0)).getStudentNumber())[ FD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_19 $$ enrolment.setStudentNumber(gavin.getStudentNumber())[ CD ]
Line_3 $$ Session session = openSession()-->Line_21 $$ session.persist(gavin)[ FD ]
Line_13 $$ Enrolment enrolment = new Enrolment()-->Line_19 $$ enrolment.setStudentNumber(gavin.getStudentNumber())[ FD ]
Line_3 $$ Session session = openSession()-->Line_37 $$ session.close()[ FD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_14 $$ enrolment.setCourse(course)[ CD ]
Line_26 $$ DetachedCriteria nestedSubQuery = DetachedCriteria.forClass(Enrolment.class, "maxStudentEnrolment")-->Line_28 $$ nestedSubQuery.setProjection(Projections.max("maxStudentEnrolment.year"))[ FD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_5 $$ Course course = new Course()[ CD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_27 $$ nestedSubQuery.add(Restrictions.eqProperty("student.preferredCourse", "maxStudentEnrolment.course"))[ CD ]
Line_29 $$ DetachedCriteria subQuery = DetachedCriteria.forClass(Enrolment.class, "enrolment")-->Line_30 $$ subQuery.add(Subqueries.propertyEq("enrolment.year", nestedSubQuery))[ FD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_20 $$ session.persist(course)[ CD ]
Line_5 $$ Course course = new Course()-->Line_20 $$ session.persist(course)[ FD ]
Line_2 $$ public void testNestedCorrelatedSubquery() throws Exception -->Line_26 $$ DetachedCriteria nestedSubQuery = DetachedCriteria.forClass(Enrolment.class, "maxStudentEnrolment")[ CD ]
