Line_14 $$ long min = Long.MIN_VALUE-->Line_22 $$ min = entry.hashCode[ FD ]
Line_27 $$ if (loadData) -->Line_29 $$ blocks.add(block)[ CD ]
Line_2 $$ private void verifyTree(IndexBlock current, String prefix, Collection<BlockPayload> blocks, long maxValue, boolean loadData) throws Exception -->Line_34 $$ verifyTree(tail, "   " + prefix, blocks, maxValue, loadData)[ FD ]
Line_32 $$ if (!current.tailPos.isNull()) -->Line_33 $$ IndexBlock tail = store.read(current.tailPos, IndexBlock.class)[ CD ]
Line_23 $$ if (!entry.childIndexBlock.isNull()) -->Line_25 $$ verifyTree(child, "   " + prefix, blocks, entry.hashCode, loadData)[ CD ]
Line_27 $$ if (loadData) -->Line_28 $$ DataBlock block = store.read(entry.dataBlock, DataBlock.class)[ CD ]
Line_2 $$ private void verifyTree(IndexBlock current, String prefix, Collection<BlockPayload> blocks, long maxValue, boolean loadData) throws Exception -->Line_17 $$ throw new IOException(String.format("Mismatched leaf/non-leaf entry in %s", current))[ FD ]
Line_28 $$ DataBlock block = store.read(entry.dataBlock, DataBlock.class)-->Line_29 $$ blocks.add(block)[ FD ]
Line_2 $$ private void verifyTree(IndexBlock current, String prefix, Collection<BlockPayload> blocks, long maxValue, boolean loadData) throws Exception -->Line_14 $$ long min = Long.MIN_VALUE[ CD ]
Line_2 $$ private void verifyTree(IndexBlock current, String prefix, Collection<BlockPayload> blocks, long maxValue, boolean loadData) throws Exception -->Line_12 $$ throw new IOException(String.format("Mismatched leaf/tail-node in %s", current))[ FD ]
Line_2 $$ private void verifyTree(IndexBlock current, String prefix, Collection<BlockPayload> blocks, long maxValue, boolean loadData) throws Exception -->Line_3 $$ blocks.add(current)[ FD ]
Line_2 $$ private void verifyTree(IndexBlock current, String prefix, Collection<BlockPayload> blocks, long maxValue, boolean loadData) throws Exception -->Line_32 $$ if (!current.tailPos.isNull()) [ CD ]
Line_2 $$ private void verifyTree(IndexBlock current, String prefix, Collection<BlockPayload> blocks, long maxValue, boolean loadData) throws Exception -->Line_10 $$ boolean isLeaf = current.entries.size() == 0 || current.entries.get(0).childIndexBlock.isNull()[ CD ]
Line_32 $$ if (!current.tailPos.isNull()) -->Line_34 $$ verifyTree(tail, "   " + prefix, blocks, maxValue, loadData)[ CD ]
Line_2 $$ private void verifyTree(IndexBlock current, String prefix, Collection<BlockPayload> blocks, long maxValue, boolean loadData) throws Exception -->Line_3 $$ blocks.add(current)[ CD ]
Line_2 $$ private void verifyTree(IndexBlock current, String prefix, Collection<BlockPayload> blocks, long maxValue, boolean loadData) throws Exception -->Line_8 $$ throw new IOException(String.format("Too many entries found in %s", current))[ FD ]
Line_10 $$ boolean isLeaf = current.entries.size() == 0 || current.entries.get(0).childIndexBlock.isNull()-->Line_11 $$ if (isLeaf ^ current.tailPos.isNull()) [ FD ]
Line_33 $$ IndexBlock tail = store.read(current.tailPos, IndexBlock.class)-->Line_34 $$ verifyTree(tail, "   " + prefix, blocks, maxValue, loadData)[ FD ]
Line_2 $$ private void verifyTree(IndexBlock current, String prefix, Collection<BlockPayload> blocks, long maxValue, boolean loadData) throws Exception -->Line_20 $$ throw new IOException(String.format("Out-of-order key in %s", current))[ FD ]
Line_2 $$ private void verifyTree(IndexBlock current, String prefix, Collection<BlockPayload> blocks, long maxValue, boolean loadData) throws Exception -->Line_25 $$ verifyTree(child, "   " + prefix, blocks, entry.hashCode, loadData)[ FD ]
Line_2 $$ private void verifyTree(IndexBlock current, String prefix, Collection<BlockPayload> blocks, long maxValue, boolean loadData) throws Exception -->Line_5 $$ throw new IOException(String.format("Too few entries found in %s", current))[ FD ]
Line_2 $$ private void verifyTree(IndexBlock current, String prefix, Collection<BlockPayload> blocks, long maxValue, boolean loadData) throws Exception -->Line_4 $$ if (!prefix.equals("") && current.entries.size() < maxChildIndexEntries / 2) [ CD ]
Line_2 $$ private void verifyTree(IndexBlock current, String prefix, Collection<BlockPayload> blocks, long maxValue, boolean loadData) throws Exception -->Line_11 $$ if (isLeaf ^ current.tailPos.isNull()) [ CD ]
Line_10 $$ boolean isLeaf = current.entries.size() == 0 || current.entries.get(0).childIndexBlock.isNull()-->Line_16 $$ if (isLeaf ^ entry.childIndexBlock.isNull()) [ FD ]
Line_2 $$ private void verifyTree(IndexBlock current, String prefix, Collection<BlockPayload> blocks, long maxValue, boolean loadData) throws Exception -->Line_29 $$ blocks.add(block)[ FD ]
Line_24 $$ IndexBlock child = store.read(entry.childIndexBlock, IndexBlock.class)-->Line_25 $$ verifyTree(child, "   " + prefix, blocks, entry.hashCode, loadData)[ FD ]
Line_2 $$ private void verifyTree(IndexBlock current, String prefix, Collection<BlockPayload> blocks, long maxValue, boolean loadData) throws Exception -->Line_4 $$ if (!prefix.equals("") && current.entries.size() < maxChildIndexEntries / 2) [ FD ]
Line_23 $$ if (!entry.childIndexBlock.isNull()) -->Line_24 $$ IndexBlock child = store.read(entry.childIndexBlock, IndexBlock.class)[ CD ]
Line_2 $$ private void verifyTree(IndexBlock current, String prefix, Collection<BlockPayload> blocks, long maxValue, boolean loadData) throws Exception -->Line_7 $$ if (current.entries.size() > maxChildIndexEntries) [ CD ]
