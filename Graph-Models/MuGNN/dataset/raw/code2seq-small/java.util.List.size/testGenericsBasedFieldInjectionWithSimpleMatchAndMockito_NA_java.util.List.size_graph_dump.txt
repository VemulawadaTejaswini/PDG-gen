Line_9 $$ RootBeanDefinition bd = new RootBeanDefinition(RepositoryFieldInjectionBeanWithSimpleMatch.class)-->Line_11 $$ bf.registerBeanDefinition("annotatedBean", bd)[ FD ]
Line_4 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_7 $$ bpp.setBeanFactory(bf)[ FD ]
Line_4 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_18 $$ RepositoryFieldInjectionBeanWithSimpleMatch bean = (RepositoryFieldInjectionBeanWithSimpleMatch) bf.getBean("annotatedBean")[ FD ]
Line_19 $$ Repository repo = bf.getBean("repo", Repository.class)-->Line_29 $$ assertSame(repo, bean.stringRepositoryList.get(0))[ FD ]
Line_4 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_11 $$ bf.registerBeanDefinition("annotatedBean", bd)[ FD ]
Line_12 $$ RootBeanDefinition rbd = new RootBeanDefinition()-->Line_14 $$ rbd.setFactoryMethodName("mock")[ FD ]
Line_4 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_17 $$ bf.registerBeanDefinition("repo", rbd)[ FD ]
Line_19 $$ Repository repo = bf.getBean("repo", Repository.class)-->Line_32 $$ assertSame(repo, bean.repositoryMap.get("repo"))[ FD ]
Line_19 $$ Repository repo = bf.getBean("repo", Repository.class)-->Line_25 $$ assertSame(repo, bean.stringRepositoryArray[0])[ FD ]
Line_19 $$ Repository repo = bf.getBean("repo", Repository.class)-->Line_20 $$ assertSame(repo, bean.repository)[ FD ]
Line_4 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_8 $$ bf.addBeanPostProcessor(bpp)[ FD ]
Line_19 $$ Repository repo = bf.getBean("repo", Repository.class)-->Line_33 $$ assertSame(repo, bean.stringRepositoryMap.get("repo"))[ FD ]
Line_12 $$ RootBeanDefinition rbd = new RootBeanDefinition()-->Line_17 $$ bf.registerBeanDefinition("repo", rbd)[ FD ]
Line_12 $$ RootBeanDefinition rbd = new RootBeanDefinition()-->Line_13 $$ rbd.setBeanClassName(Mockito.class.getName())[ FD ]
Line_6 $$ AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()-->Line_8 $$ bf.addBeanPostProcessor(bpp)[ FD ]
Line_4 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_5 $$ bf.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver())[ FD ]
Line_9 $$ RootBeanDefinition bd = new RootBeanDefinition(RepositoryFieldInjectionBeanWithSimpleMatch.class)-->Line_10 $$ bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)[ FD ]
Line_19 $$ Repository repo = bf.getBean("repo", Repository.class)-->Line_24 $$ assertSame(repo, bean.repositoryArray[0])[ FD ]
Line_19 $$ Repository repo = bf.getBean("repo", Repository.class)-->Line_21 $$ assertSame(repo, bean.stringRepository)[ FD ]
Line_6 $$ AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()-->Line_7 $$ bpp.setBeanFactory(bf)[ FD ]
Line_19 $$ Repository repo = bf.getBean("repo", Repository.class)-->Line_28 $$ assertSame(repo, bean.repositoryList.get(0))[ FD ]
Line_4 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_19 $$ Repository repo = bf.getBean("repo", Repository.class)[ FD ]
