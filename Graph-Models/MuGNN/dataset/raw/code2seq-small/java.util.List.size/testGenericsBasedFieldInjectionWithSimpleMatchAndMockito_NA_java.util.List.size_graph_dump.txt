Line_17 $$ Repository repo = bf.getBean("repo", Repository.class)-->Line_19 $$ assertSame(repo, bean.stringRepository)[ FD ]
Line_17 $$ Repository repo = bf.getBean("repo", Repository.class)-->Line_23 $$ assertSame(repo, bean.stringRepositoryArray[0])[ FD ]
Line_8 $$ RootBeanDefinition bd = new RootBeanDefinition(RepositoryFieldInjectionBeanWithSimpleMatch.class)-->Line_9 $$ bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_6 $$ bpp.setBeanFactory(bf)[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_30 $$ assertSame(repo, bean.repositoryMap.get("repo"))[ CD ]
Line_17 $$ Repository repo = bf.getBean("repo", Repository.class)-->Line_26 $$ assertSame(repo, bean.repositoryList.get(0))[ FD ]
Line_17 $$ Repository repo = bf.getBean("repo", Repository.class)-->Line_30 $$ assertSame(repo, bean.repositoryMap.get("repo"))[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_14 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(new TypedStringValue(Repository.class.getName()))[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_7 $$ bf.addBeanPostProcessor(bpp)[ CD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_6 $$ bpp.setBeanFactory(bf)[ FD ]
Line_17 $$ Repository repo = bf.getBean("repo", Repository.class)-->Line_18 $$ assertSame(repo, bean.repository)[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_19 $$ assertSame(repo, bean.stringRepository)[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_11 $$ RootBeanDefinition rbd = new RootBeanDefinition()[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_21 $$ assertSame(1, bean.stringRepositoryArray.length)[ CD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_10 $$ bf.registerBeanDefinition("annotatedBean", bd)[ FD ]
Line_17 $$ Repository repo = bf.getBean("repo", Repository.class)-->Line_31 $$ assertSame(repo, bean.stringRepositoryMap.get("repo"))[ FD ]
Line_17 $$ Repository repo = bf.getBean("repo", Repository.class)-->Line_22 $$ assertSame(repo, bean.repositoryArray[0])[ FD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_15 $$ bf.registerBeanDefinition("repo", rbd)[ FD ]
Line_11 $$ RootBeanDefinition rbd = new RootBeanDefinition()-->Line_14 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(new TypedStringValue(Repository.class.getName()))[ FD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_16 $$ RepositoryFieldInjectionBeanWithSimpleMatch bean = (RepositoryFieldInjectionBeanWithSimpleMatch) bf.getBean("annotatedBean")[ FD ]
Line_11 $$ RootBeanDefinition rbd = new RootBeanDefinition()-->Line_12 $$ rbd.setBeanClassName(Mockito.class.getName())[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_12 $$ rbd.setBeanClassName(Mockito.class.getName())[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_17 $$ Repository repo = bf.getBean("repo", Repository.class)[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_5 $$ AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_31 $$ assertSame(repo, bean.stringRepositoryMap.get("repo"))[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_9 $$ bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_10 $$ bf.registerBeanDefinition("annotatedBean", bd)[ CD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_4 $$ bf.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver())[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_13 $$ rbd.setFactoryMethodName("mock")[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_20 $$ assertSame(1, bean.repositoryArray.length)[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_18 $$ assertSame(repo, bean.repository)[ CD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_7 $$ bf.addBeanPostProcessor(bpp)[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_23 $$ assertSame(repo, bean.stringRepositoryArray[0])[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_24 $$ assertSame(1, bean.repositoryList.size())[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()[ CD ]
Line_5 $$ AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()-->Line_7 $$ bf.addBeanPostProcessor(bpp)[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_4 $$ bf.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver())[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_27 $$ assertSame(repo, bean.stringRepositoryList.get(0))[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_22 $$ assertSame(repo, bean.repositoryArray[0])[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_8 $$ RootBeanDefinition bd = new RootBeanDefinition(RepositoryFieldInjectionBeanWithSimpleMatch.class)[ CD ]
Line_11 $$ RootBeanDefinition rbd = new RootBeanDefinition()-->Line_15 $$ bf.registerBeanDefinition("repo", rbd)[ FD ]
Line_5 $$ AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()-->Line_6 $$ bpp.setBeanFactory(bf)[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_16 $$ RepositoryFieldInjectionBeanWithSimpleMatch bean = (RepositoryFieldInjectionBeanWithSimpleMatch) bf.getBean("annotatedBean")[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_26 $$ assertSame(repo, bean.repositoryList.get(0))[ CD ]
Line_11 $$ RootBeanDefinition rbd = new RootBeanDefinition()-->Line_13 $$ rbd.setFactoryMethodName("mock")[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_15 $$ bf.registerBeanDefinition("repo", rbd)[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_25 $$ assertSame(1, bean.stringRepositoryList.size())[ CD ]
Line_17 $$ Repository repo = bf.getBean("repo", Repository.class)-->Line_27 $$ assertSame(repo, bean.stringRepositoryList.get(0))[ FD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_17 $$ Repository repo = bf.getBean("repo", Repository.class)[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_28 $$ assertSame(1, bean.repositoryMap.size())[ CD ]
Line_8 $$ RootBeanDefinition bd = new RootBeanDefinition(RepositoryFieldInjectionBeanWithSimpleMatch.class)-->Line_10 $$ bf.registerBeanDefinition("annotatedBean", bd)[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithSimpleMatchAndMockito() -->Line_29 $$ assertSame(1, bean.stringRepositoryMap.size())[ CD ]
