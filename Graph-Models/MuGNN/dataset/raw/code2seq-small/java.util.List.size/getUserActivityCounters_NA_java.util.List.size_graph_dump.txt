Line_40 $$ if (userId != activityCounter.getClassPK()) -->Line_41 $$ userId = activityCounter.getClassPK()[ CD ]
Line_31 $$ List<Long> userIds = socialActivityCounterFinder.findU_ByG_N(groupId, rankingNames, start, end)-->Line_32 $$ if (userIds.isEmpty()) [ FD ]
Line_39 $$ for (SocialActivityCounter activityCounter : activityCounters) -->Line_52 $$ activityCountersMap.put(activityCounter.getName(), activityCounter)[ FD ]
Line_44 $$ for (int i = 0; i < userIds.size(); i++) -->Line_46 $$ if (userId == curUserId) [ CD ]
Line_37 $$ long userId = 0-->Line_46 $$ if (userId == curUserId) [ FD ]
Line_39 $$ for (SocialActivityCounter activityCounter : activityCounters) -->Line_41 $$ userId = activityCounter.getClassPK()[ FD ]
Line_43 $$ Tuple userActivityCounter = new Tuple(userId, activityCountersMap)-->Line_47 $$ userActivityCounters[i] = userActivityCounter[ FD ]
Line_42 $$ activityCountersMap = new HashMap()-->Line_52 $$ activityCountersMap.put(activityCounter.getName(), activityCounter)[ FD ]
Line_31 $$ List<Long> userIds = socialActivityCounterFinder.findU_ByG_N(groupId, rankingNames, start, end)-->Line_45 $$ long curUserId = userIds.get(i)[ FD ]
Line_32 $$ if (userIds.isEmpty()) -->Line_33 $$ return Collections.emptyList()[ CD ]
Line_31 $$ List<Long> userIds = socialActivityCounterFinder.findU_ByG_N(groupId, rankingNames, start, end)-->Line_35 $$ Tuple[] userActivityCounters = new Tuple[userIds.size()][ FD ]
Line_37 $$ long userId = 0-->Line_40 $$ if (userId != activityCounter.getClassPK()) [ FD ]
Line_45 $$ long curUserId = userIds.get(i)-->Line_46 $$ if (userId == curUserId) [ FD ]
Line_40 $$ if (userId != activityCounter.getClassPK()) -->Line_43 $$ Tuple userActivityCounter = new Tuple(userId, activityCountersMap)[ CD ]
Line_31 $$ List<Long> userIds = socialActivityCounterFinder.findU_ByG_N(groupId, rankingNames, start, end)-->Line_36 $$ List<SocialActivityCounter> activityCounters = socialActivityCounterFinder.findAC_By_G_C_C_N_S_E(groupId, userIds, selectedNames, QueryUtil.ALL_POS, QueryUtil.ALL_POS)[ FD ]
Line_31 $$ List<Long> userIds = socialActivityCounterFinder.findU_ByG_N(groupId, rankingNames, start, end)-->Line_44 $$ for (int i = 0; i < userIds.size(); i++) [ FD ]
Line_38 $$ Map<String, SocialActivityCounter> activityCountersMap = null-->Line_42 $$ activityCountersMap = new HashMap()[ FD ]
Line_46 $$ if (userId == curUserId) -->Line_47 $$ userActivityCounters[i] = userActivityCounter[ CD ]
Line_38 $$ Map<String, SocialActivityCounter> activityCountersMap = null-->Line_52 $$ activityCountersMap.put(activityCounter.getName(), activityCounter)[ FD ]
Line_44 $$ for (int i = 0; i < userIds.size(); i++) -->Line_45 $$ long curUserId = userIds.get(i)[ FD ]
Line_41 $$ userId = activityCounter.getClassPK()-->Line_46 $$ if (userId == curUserId) [ FD ]
Line_37 $$ long userId = 0-->Line_41 $$ userId = activityCounter.getClassPK()[ FD ]
Line_40 $$ if (userId != activityCounter.getClassPK()) -->Line_44 $$ for (int i = 0; i < userIds.size(); i++) [ CD ]
Line_44 $$ for (int i = 0; i < userIds.size(); i++) -->Line_45 $$ long curUserId = userIds.get(i)[ CD ]
Line_39 $$ for (SocialActivityCounter activityCounter : activityCounters) -->Line_40 $$ if (userId != activityCounter.getClassPK()) [ FD ]
Line_35 $$ Tuple[] userActivityCounters = new Tuple[userIds.size()]-->Line_54 $$ return Arrays.asList(userActivityCounters)[ FD ]
Line_40 $$ if (userId != activityCounter.getClassPK()) -->Line_42 $$ activityCountersMap = new HashMap()[ CD ]
