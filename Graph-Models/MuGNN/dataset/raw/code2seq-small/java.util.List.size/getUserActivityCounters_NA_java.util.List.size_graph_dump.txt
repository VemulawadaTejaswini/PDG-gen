Line_12 $$ if (userId != activityCounter.getClassPK()) -->Line_14 $$ activityCountersMap = new HashMap()[ CD ]
Line_16 $$ for (int i = 0; i < userIds.size(); i++) -->Line_17 $$ long curUserId = userIds.get(i)[ CD ]
Line_11 $$ for (SocialActivityCounter activityCounter : activityCounters) -->Line_24 $$ activityCountersMap.put(activityCounter.getName(), activityCounter)[ FD ]
Line_3 $$ List<Long> userIds = socialActivityCounterFinder.findU_ByG_N(groupId, rankingNames, start, end)-->Line_17 $$ long curUserId = userIds.get(i)[ FD ]
Line_12 $$ if (userId != activityCounter.getClassPK()) -->Line_15 $$ Tuple userActivityCounter = new Tuple(userId, activityCountersMap)[ CD ]
Line_2 $$ public List<Tuple> getUserActivityCounters(long groupId, String[] rankingNames, String[] selectedNames, int start, int end) -->Line_8 $$ List<SocialActivityCounter> activityCounters = socialActivityCounterFinder.findAC_By_G_C_C_N_S_E(groupId, userIds, selectedNames, QueryUtil.ALL_POS, QueryUtil.ALL_POS)[ FD ]
Line_12 $$ if (userId != activityCounter.getClassPK()) -->Line_13 $$ userId = activityCounter.getClassPK()[ CD ]
Line_3 $$ List<Long> userIds = socialActivityCounterFinder.findU_ByG_N(groupId, rankingNames, start, end)-->Line_8 $$ List<SocialActivityCounter> activityCounters = socialActivityCounterFinder.findAC_By_G_C_C_N_S_E(groupId, userIds, selectedNames, QueryUtil.ALL_POS, QueryUtil.ALL_POS)[ FD ]
Line_11 $$ for (SocialActivityCounter activityCounter : activityCounters) -->Line_13 $$ userId = activityCounter.getClassPK()[ FD ]
Line_12 $$ if (userId != activityCounter.getClassPK()) -->Line_16 $$ for (int i = 0; i < userIds.size(); i++) [ CD ]
Line_9 $$ long userId = 0-->Line_13 $$ userId = activityCounter.getClassPK()[ FD ]
Line_2 $$ public List<Tuple> getUserActivityCounters(long groupId, String[] rankingNames, String[] selectedNames, int start, int end) -->Line_3 $$ List<Long> userIds = socialActivityCounterFinder.findU_ByG_N(groupId, rankingNames, start, end)[ FD ]
Line_15 $$ Tuple userActivityCounter = new Tuple(userId, activityCountersMap)-->Line_19 $$ userActivityCounters[i] = userActivityCounter[ FD ]
Line_7 $$ Tuple[] userActivityCounters = new Tuple[userIds.size()]-->Line_26 $$ return Arrays.asList(userActivityCounters)[ FD ]
Line_14 $$ activityCountersMap = new HashMap()-->Line_24 $$ activityCountersMap.put(activityCounter.getName(), activityCounter)[ FD ]
Line_3 $$ List<Long> userIds = socialActivityCounterFinder.findU_ByG_N(groupId, rankingNames, start, end)-->Line_16 $$ for (int i = 0; i < userIds.size(); i++) [ FD ]
Line_9 $$ long userId = 0-->Line_18 $$ if (userId == curUserId) [ FD ]
Line_10 $$ Map<String, SocialActivityCounter> activityCountersMap = null-->Line_24 $$ activityCountersMap.put(activityCounter.getName(), activityCounter)[ FD ]
Line_3 $$ List<Long> userIds = socialActivityCounterFinder.findU_ByG_N(groupId, rankingNames, start, end)-->Line_4 $$ if (userIds.isEmpty()) [ FD ]
Line_17 $$ long curUserId = userIds.get(i)-->Line_18 $$ if (userId == curUserId) [ FD ]
Line_18 $$ if (userId == curUserId) -->Line_19 $$ userActivityCounters[i] = userActivityCounter[ CD ]
Line_16 $$ for (int i = 0; i < userIds.size(); i++) -->Line_18 $$ if (userId == curUserId) [ CD ]
Line_11 $$ for (SocialActivityCounter activityCounter : activityCounters) -->Line_12 $$ if (userId != activityCounter.getClassPK()) [ FD ]
Line_2 $$ public List<Tuple> getUserActivityCounters(long groupId, String[] rankingNames, String[] selectedNames, int start, int end) -->Line_7 $$ Tuple[] userActivityCounters = new Tuple[userIds.size()][ CD ]
Line_16 $$ for (int i = 0; i < userIds.size(); i++) -->Line_17 $$ long curUserId = userIds.get(i)[ FD ]
Line_2 $$ public List<Tuple> getUserActivityCounters(long groupId, String[] rankingNames, String[] selectedNames, int start, int end) -->Line_26 $$ return Arrays.asList(userActivityCounters)[ CD ]
Line_2 $$ public List<Tuple> getUserActivityCounters(long groupId, String[] rankingNames, String[] selectedNames, int start, int end) -->Line_4 $$ if (userIds.isEmpty()) [ CD ]
Line_2 $$ public List<Tuple> getUserActivityCounters(long groupId, String[] rankingNames, String[] selectedNames, int start, int end) -->Line_3 $$ List<Long> userIds = socialActivityCounterFinder.findU_ByG_N(groupId, rankingNames, start, end)[ CD ]
Line_2 $$ public List<Tuple> getUserActivityCounters(long groupId, String[] rankingNames, String[] selectedNames, int start, int end) -->Line_10 $$ Map<String, SocialActivityCounter> activityCountersMap = null[ CD ]
Line_13 $$ userId = activityCounter.getClassPK()-->Line_18 $$ if (userId == curUserId) [ FD ]
Line_2 $$ public List<Tuple> getUserActivityCounters(long groupId, String[] rankingNames, String[] selectedNames, int start, int end) -->Line_8 $$ List<SocialActivityCounter> activityCounters = socialActivityCounterFinder.findAC_By_G_C_C_N_S_E(groupId, userIds, selectedNames, QueryUtil.ALL_POS, QueryUtil.ALL_POS)[ CD ]
Line_3 $$ List<Long> userIds = socialActivityCounterFinder.findU_ByG_N(groupId, rankingNames, start, end)-->Line_7 $$ Tuple[] userActivityCounters = new Tuple[userIds.size()][ FD ]
Line_9 $$ long userId = 0-->Line_12 $$ if (userId != activityCounter.getClassPK()) [ FD ]
Line_4 $$ if (userIds.isEmpty()) -->Line_5 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public List<Tuple> getUserActivityCounters(long groupId, String[] rankingNames, String[] selectedNames, int start, int end) -->Line_9 $$ long userId = 0[ CD ]
Line_10 $$ Map<String, SocialActivityCounter> activityCountersMap = null-->Line_14 $$ activityCountersMap = new HashMap()[ FD ]
