Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_11 $$ execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 1, 0)[ CD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_19 $$ execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 1, 0, 0)[ CD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_31 $$ assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i), row(1, 0, 0, 0), row(1, 0, 1, 0), row(1, 1, 0, 1), row(1, 1, 1, 0), row(1, 1, 2, 0))[ CD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_22 $$ assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i), row(1, 0, 0, 0), row(1, 0, 1, 0), row(1, 1, 0, 0), row(1, 1, 1, 0), row(1, 1, 2, 0))[ CD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_32 $$ execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 1, 1, 0)[ CD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_35 $$ assertEmpty(execute("SELECT * FROM mv_test" + i))[ CD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_8 $$ execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 0, 0, 0)[ CD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_14 $$ logger.info("Testing MV primary key: [ FD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_5 $$ createTable("CREATE TABLE %s (a int, b int, c int, d int, PRIMARY KEY (a, b, c))")[ CD ]
Line_2 $$ public void testPartitionKeyRestrictions() throws Throwable -->Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) [ CD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_13 $$ execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 1, 0)[ CD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_12 $$ execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 0, 0)[ CD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_33 $$ assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i), row(1, 0, 0, 0), row(1, 0, 1, 0), row(1, 1, 1, 0), row(1, 1, 2, 0))[ CD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_14 $$ logger.info("Testing MV primary key: [ CD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_21 $$ execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 1, 2, 0)[ CD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_20 $$ assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i), row(1, 0, 0, 0), row(1, 0, 1, 0), row(1, 1, 0, 0), row(1, 1, 1, 0))[ CD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_23 $$ execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 0, 0, 0)[ CD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_24 $$ execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 0, 1, 0)[ CD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_10 $$ execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 1, 0, 0, 0)[ CD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_34 $$ execute("DELETE FROM %s WHERE a = ?", 1)[ CD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_6 $$ execute("USE " + keyspace())[ CD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_28 $$ execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 0, 0, 0)[ CD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_27 $$ assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i), row(1, 0, 0, 0), row(1, 0, 1, 0), row(1, 1, 0, 1), row(1, 1, 1, 0), row(1, 1, 2, 0))[ CD ]
Line_2 $$ public void testPartitionKeyRestrictions() throws Throwable -->Line_3 $$ List<String> mvPrimaryKeys = Arrays.asList("((a, b), c)", "((b, a), c)", "(a, b, c)", "(c, b, a)", "((c, a), b)")[ CD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_9 $$ execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 0, 1, 0, 0)[ CD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_16 $$ while (!SystemKeyspace.isViewBuilt(keyspace(), "mv_test" + i)) Thread.sleep(10)[ CD ]
Line_3 $$ List<String> mvPrimaryKeys = Arrays.asList("((a, b), c)", "((b, a), c)", "(a, b, c)", "(c, b, a)", "((c, a), b)")-->Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) [ FD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_15 $$ createView("mv_test" + i, "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = 1 AND b IS NOT NULL AND c IS NOT NULL PRIMARY KEY " + mvPrimaryKeys.get(i))[ FD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_7 $$ executeNet(protocolVersion, "USE " + keyspace())[ CD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_15 $$ createView("mv_test" + i, "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = 1 AND b IS NOT NULL AND c IS NOT NULL PRIMARY KEY " + mvPrimaryKeys.get(i))[ CD ]
Line_3 $$ List<String> mvPrimaryKeys = Arrays.asList("((a, b), c)", "((b, a), c)", "(a, b, c)", "(c, b, a)", "((c, a), b)")-->Line_15 $$ createView("mv_test" + i, "CREATE MATERIALIZED VIEW %s AS SELECT * FROM %%s WHERE a = 1 AND b IS NOT NULL AND c IS NOT NULL PRIMARY KEY " + mvPrimaryKeys.get(i))[ FD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_25 $$ assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i), row(1, 0, 0, 0), row(1, 0, 1, 0), row(1, 1, 0, 0), row(1, 1, 1, 0), row(1, 1, 2, 0))[ CD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_17 $$ assertRowsIgnoringOrder(execute("SELECT a, b, c, d FROM mv_test" + i), row(1, 0, 0, 0), row(1, 0, 1, 0), row(1, 1, 0, 0), row(1, 1, 1, 0))[ CD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_29 $$ execute("DELETE FROM %s WHERE a = ? AND b = ? AND c = ?", 0, 1, 0)[ CD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_18 $$ execute("INSERT INTO %s (a, b, c, d) VALUES (?, ?, ?, ?)", 2, 0, 0, 0)[ CD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_26 $$ execute("UPDATE %s SET d = ? WHERE a = ? AND b = ? AND c = ?", 1, 1, 1, 0)[ CD ]
Line_3 $$ List<String> mvPrimaryKeys = Arrays.asList("((a, b), c)", "((b, a), c)", "(a, b, c)", "(c, b, a)", "((c, a), b)")-->Line_14 $$ logger.info("Testing MV primary key: [ FD ]
Line_4 $$ for (int i = 0; i < mvPrimaryKeys.size(); i++) -->Line_30 $$ execute("DELETE FROM %s WHERE a = ? AND b = ?", 0, 0)[ CD ]
