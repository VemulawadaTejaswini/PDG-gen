Line_2 $$ private int getDistanceBack(final int idxStart, final List<String> lines) -->Line_4 $$ return lines.size()[ FD ]
Line_6 $$ for (int i = idxStart; i >= 0 && cnt >= 0; i--, cnt--) -->Line_7 $$ if (!myLines.get(i).equals(lines.get(cnt)))[ CD ]
Line_5 $$ int cnt = lines.size() - 1-->Line_7 $$ if (!myLines.get(i).equals(lines.get(cnt)))[ FD ]
Line_2 $$ private int getDistanceBack(final int idxStart, final List<String> lines) -->Line_5 $$ int cnt = lines.size() - 1[ CD ]
Line_2 $$ private int getDistanceBack(final int idxStart, final List<String> lines) -->Line_10 $$ return cnt + 1[ CD ]
Line_5 $$ int cnt = lines.size() - 1-->Line_6 $$ for (int i = idxStart; i >= 0 && cnt >= 0; i--, cnt--) [ FD ]
Line_2 $$ private int getDistanceBack(final int idxStart, final List<String> lines) -->Line_3 $$ if (idxStart < 0)[ CD ]
Line_2 $$ private int getDistanceBack(final int idxStart, final List<String> lines) -->Line_6 $$ for (int i = idxStart; i >= 0 && cnt >= 0; i--, cnt--) [ CD ]
Line_6 $$ for (int i = idxStart; i >= 0 && cnt >= 0; i--, cnt--) -->Line_7 $$ if (!myLines.get(i).equals(lines.get(cnt)))[ FD ]
Line_2 $$ private int getDistanceBack(final int idxStart, final List<String> lines) -->Line_7 $$ if (!myLines.get(i).equals(lines.get(cnt)))[ FD ]
Line_3 $$ if (idxStart < 0)-->Line_4 $$ return lines.size()[ CD ]
Line_2 $$ private int getDistanceBack(final int idxStart, final List<String> lines) -->Line_5 $$ int cnt = lines.size() - 1[ FD ]
Line_7 $$ if (!myLines.get(i).equals(lines.get(cnt)))-->Line_8 $$ return (cnt + 1)[ CD ]
Line_2 $$ private int getDistanceBack(final int idxStart, final List<String> lines) -->Line_3 $$ if (idxStart < 0)[ FD ]
