Line_21 $$ if (percent > 1) -->Line_22 $$ result.add(new PsiMethodWithOverridingPercentMember(candidateInfo, percent))[ CD ]
Line_7 $$ if (!method.hasModifierProperty(PsiModifier.FINAL) && !method.isConstructor() && !method.isDeprecated() && !EXCLUDED_JAVA_LANG_OBJECT_METHOD_NAMES.contains(method.getName())) -->Line_18 $$ final int allInheritorsCount = allInheritors.size() - 1[ CD ]
Line_3 $$ final List<PsiMethodWithOverridingPercentMember> result = new ArrayList<PsiMethodWithOverridingPercentMember>(candidateInfos.size())-->Line_27 $$ return result.toArray(new PsiMethodWithOverridingPercentMember[result.size()])[ FD ]
Line_2 $$ public static PsiMethodWithOverridingPercentMember[] calculateOverridingPercents(@NotNull final Collection<CandidateInfo> candidateInfos) -->Line_3 $$ final List<PsiMethodWithOverridingPercentMember> result = new ArrayList<PsiMethodWithOverridingPercentMember>(candidateInfos.size())[ CD ]
Line_4 $$ final Map<String, Collection<PsiClass>> classShortNames2Inheritors = new HashMap<String, Collection<PsiClass>>()-->Line_16 $$ classShortNames2Inheritors.put(classShortName, allInheritors)[ FD ]
Line_7 $$ if (!method.hasModifierProperty(PsiModifier.FINAL) && !method.isConstructor() && !method.isDeprecated() && !EXCLUDED_JAVA_LANG_OBJECT_METHOD_NAMES.contains(method.getName())) -->Line_8 $$ final PsiClass containingClass = method.getContainingClass()[ CD ]
Line_6 $$ final PsiMethod method = (PsiMethod) candidateInfo.getElement()-->Line_8 $$ final PsiClass containingClass = method.getContainingClass()[ FD ]
Line_14 $$ if (allInheritors == null) -->Line_16 $$ classShortNames2Inheritors.put(classShortName, allInheritors)[ CD ]
Line_2 $$ public static PsiMethodWithOverridingPercentMember[] calculateOverridingPercents(@NotNull final Collection<CandidateInfo> candidateInfos) -->Line_3 $$ final List<PsiMethodWithOverridingPercentMember> result = new ArrayList<PsiMethodWithOverridingPercentMember>(candidateInfos.size())[ FD ]
Line_13 $$ Collection<PsiClass> allInheritors = classShortNames2Inheritors.get(classShortName)-->Line_18 $$ final int allInheritorsCount = allInheritors.size() - 1[ FD ]
Line_12 $$ final String classShortName = containingClass.getName()-->Line_13 $$ Collection<PsiClass> allInheritors = classShortNames2Inheritors.get(classShortName)[ FD ]
Line_7 $$ if (!method.hasModifierProperty(PsiModifier.FINAL) && !method.isConstructor() && !method.isDeprecated() && !EXCLUDED_JAVA_LANG_OBJECT_METHOD_NAMES.contains(method.getName())) -->Line_19 $$ if (allInheritorsCount > 0) [ CD ]
Line_19 $$ if (allInheritorsCount > 0) -->Line_21 $$ if (percent > 1) [ CD ]
Line_8 $$ final PsiClass containingClass = method.getContainingClass()-->Line_9 $$ if (containingClass == null) [ FD ]
Line_15 $$ allInheritors = ClassInheritorsSearch.search(containingClass, true).findAll()-->Line_20 $$ final int percent = searchForOverridingCount(method, allInheritors) * 100 / allInheritorsCount[ FD ]
Line_13 $$ Collection<PsiClass> allInheritors = classShortNames2Inheritors.get(classShortName)-->Line_15 $$ allInheritors = ClassInheritorsSearch.search(containingClass, true).findAll()[ FD ]
Line_20 $$ final int percent = searchForOverridingCount(method, allInheritors) * 100 / allInheritorsCount-->Line_21 $$ if (percent > 1) [ FD ]
Line_8 $$ final PsiClass containingClass = method.getContainingClass()-->Line_12 $$ final String classShortName = containingClass.getName()[ FD ]
Line_19 $$ if (allInheritorsCount > 0) -->Line_20 $$ final int percent = searchForOverridingCount(method, allInheritors) * 100 / allInheritorsCount[ CD ]
Line_13 $$ Collection<PsiClass> allInheritors = classShortNames2Inheritors.get(classShortName)-->Line_16 $$ classShortNames2Inheritors.put(classShortName, allInheritors)[ FD ]
Line_18 $$ final int allInheritorsCount = allInheritors.size() - 1-->Line_19 $$ if (allInheritorsCount > 0) [ FD ]
Line_14 $$ if (allInheritors == null) -->Line_15 $$ allInheritors = ClassInheritorsSearch.search(containingClass, true).findAll()[ CD ]
Line_13 $$ Collection<PsiClass> allInheritors = classShortNames2Inheritors.get(classShortName)-->Line_14 $$ if (allInheritors == null) [ FD ]
Line_7 $$ if (!method.hasModifierProperty(PsiModifier.FINAL) && !method.isConstructor() && !method.isDeprecated() && !EXCLUDED_JAVA_LANG_OBJECT_METHOD_NAMES.contains(method.getName())) -->Line_12 $$ final String classShortName = containingClass.getName()[ CD ]
Line_5 $$ for (final CandidateInfo candidateInfo : candidateInfos) -->Line_6 $$ final PsiMethod method = (PsiMethod) candidateInfo.getElement()[ FD ]
Line_2 $$ public static PsiMethodWithOverridingPercentMember[] calculateOverridingPercents(@NotNull final Collection<CandidateInfo> candidateInfos) -->Line_27 $$ return result.toArray(new PsiMethodWithOverridingPercentMember[result.size()])[ CD ]
Line_13 $$ Collection<PsiClass> allInheritors = classShortNames2Inheritors.get(classShortName)-->Line_20 $$ final int percent = searchForOverridingCount(method, allInheritors) * 100 / allInheritorsCount[ FD ]
Line_7 $$ if (!method.hasModifierProperty(PsiModifier.FINAL) && !method.isConstructor() && !method.isDeprecated() && !EXCLUDED_JAVA_LANG_OBJECT_METHOD_NAMES.contains(method.getName())) -->Line_13 $$ Collection<PsiClass> allInheritors = classShortNames2Inheritors.get(classShortName)[ CD ]
Line_8 $$ final PsiClass containingClass = method.getContainingClass()-->Line_15 $$ allInheritors = ClassInheritorsSearch.search(containingClass, true).findAll()[ FD ]
Line_7 $$ if (!method.hasModifierProperty(PsiModifier.FINAL) && !method.isConstructor() && !method.isDeprecated() && !EXCLUDED_JAVA_LANG_OBJECT_METHOD_NAMES.contains(method.getName())) -->Line_9 $$ if (containingClass == null) [ CD ]
Line_15 $$ allInheritors = ClassInheritorsSearch.search(containingClass, true).findAll()-->Line_16 $$ classShortNames2Inheritors.put(classShortName, allInheritors)[ FD ]
Line_6 $$ final PsiMethod method = (PsiMethod) candidateInfo.getElement()-->Line_7 $$ if (!method.hasModifierProperty(PsiModifier.FINAL) && !method.isConstructor() && !method.isDeprecated() && !EXCLUDED_JAVA_LANG_OBJECT_METHOD_NAMES.contains(method.getName())) [ FD ]
Line_2 $$ public static PsiMethodWithOverridingPercentMember[] calculateOverridingPercents(@NotNull final Collection<CandidateInfo> candidateInfos) -->Line_4 $$ final Map<String, Collection<PsiClass>> classShortNames2Inheritors = new HashMap<String, Collection<PsiClass>>()[ CD ]
Line_15 $$ allInheritors = ClassInheritorsSearch.search(containingClass, true).findAll()-->Line_18 $$ final int allInheritorsCount = allInheritors.size() - 1[ FD ]
Line_3 $$ final List<PsiMethodWithOverridingPercentMember> result = new ArrayList<PsiMethodWithOverridingPercentMember>(candidateInfos.size())-->Line_22 $$ result.add(new PsiMethodWithOverridingPercentMember(candidateInfo, percent))[ FD ]
Line_4 $$ final Map<String, Collection<PsiClass>> classShortNames2Inheritors = new HashMap<String, Collection<PsiClass>>()-->Line_13 $$ Collection<PsiClass> allInheritors = classShortNames2Inheritors.get(classShortName)[ FD ]
Line_12 $$ final String classShortName = containingClass.getName()-->Line_16 $$ classShortNames2Inheritors.put(classShortName, allInheritors)[ FD ]
Line_6 $$ final PsiMethod method = (PsiMethod) candidateInfo.getElement()-->Line_20 $$ final int percent = searchForOverridingCount(method, allInheritors) * 100 / allInheritorsCount[ FD ]
Line_7 $$ if (!method.hasModifierProperty(PsiModifier.FINAL) && !method.isConstructor() && !method.isDeprecated() && !EXCLUDED_JAVA_LANG_OBJECT_METHOD_NAMES.contains(method.getName())) -->Line_14 $$ if (allInheritors == null) [ CD ]
