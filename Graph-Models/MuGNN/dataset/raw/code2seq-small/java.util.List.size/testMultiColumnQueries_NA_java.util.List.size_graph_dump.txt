Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_10 $$ List l = s.createQuery("select parent, child from Foo parent, Foo child where parent.foo = child").list()[ CD ]
Line_15 $$ rs = s.createQuery("select count(distinct child.id), count(distinct parent.id) from Foo parent, Foo child where parent.foo = child").iterate()-->Line_27 $$ rs = s.createQuery("select child.id, parent.id, child.long, child, parent.foo from Foo parent, Foo child where parent.foo = child").iterate()[ FD ]
Line_7 $$ Foo foo1 = new Foo()-->Line_8 $$ s.save(foo1)[ FD ]
Line_5 $$ Foo foo = new Foo()-->Line_23 $$ assertTrue("multi-column id", row[0].equals(foo.getFoo().getKey()))[ FD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_31 $$ row = (Object[]) l.get(0)[ CD ]
Line_10 $$ List l = s.createQuery("select parent, child from Foo parent, Foo child where parent.foo = child").list()-->Line_31 $$ row = (Object[]) l.get(0)[ FD ]
Line_21 $$ rs = s.createQuery("select child.id, parent.id, child.long from Foo parent, Foo child where parent.foo = child").iterate()-->Line_26 $$ assertTrue(!rs.hasNext())[ FD ]
Line_27 $$ rs = s.createQuery("select child.id, parent.id, child.long, child, parent.foo from Foo parent, Foo child where parent.foo = child").iterate()-->Line_28 $$ row = (Object[]) rs.next()[ FD ]
Line_15 $$ rs = s.createQuery("select count(distinct child.id), count(distinct parent.id) from Foo parent, Foo child where parent.foo = child").iterate()-->Line_21 $$ rs = s.createQuery("select child.id, parent.id, child.long from Foo parent, Foo child where parent.foo = child").iterate()[ FD ]
Line_13 $$ Object[] row = null-->Line_31 $$ row = (Object[]) l.get(0)[ FD ]
Line_12 $$ Iterator rs = null-->Line_26 $$ assertTrue(!rs.hasNext())[ FD ]
Line_21 $$ rs = s.createQuery("select child.id, parent.id, child.long from Foo parent, Foo child where parent.foo = child").iterate()-->Line_30 $$ assertTrue(!rs.hasNext())[ FD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_45 $$ assertTrue("multi-column iterate", deletions == 1)[ CD ]
Line_5 $$ Foo foo = new Foo()-->Line_9 $$ foo.setFoo(foo1)[ FD ]
Line_14 $$ if (!(getDialect() instanceof DerbyDialect)) -->Line_16 $$ row = (Object[]) rs.next()[ CD ]
Line_37 $$ Iterator iter = s.createQuery("select parent, child from Foo parent, Foo child where parent.foo = child and parent.string='a string'").iterate()-->Line_40 $$ Object[] pnc = (Object[]) iter.next()[ FD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_9 $$ foo.setFoo(foo1)[ CD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_12 $$ Iterator rs = null[ CD ]
Line_3 $$ Session s = openSession()-->Line_36 $$ txn = s.beginTransaction()[ FD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_39 $$ while (iter.hasNext()) [ CD ]
Line_12 $$ Iterator rs = null-->Line_15 $$ rs = s.createQuery("select count(distinct child.id), count(distinct parent.id) from Foo parent, Foo child where parent.foo = child").iterate()[ FD ]
Line_21 $$ rs = s.createQuery("select child.id, parent.id, child.long from Foo parent, Foo child where parent.foo = child").iterate()-->Line_28 $$ row = (Object[]) rs.next()[ FD ]
Line_15 $$ rs = s.createQuery("select count(distinct child.id), count(distinct parent.id) from Foo parent, Foo child where parent.foo = child").iterate()-->Line_16 $$ row = (Object[]) rs.next()[ FD ]
Line_3 $$ Session s = openSession()-->Line_10 $$ List l = s.createQuery("select parent, child from Foo parent, Foo child where parent.foo = child").list()[ FD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_6 $$ s.save(foo)[ CD ]
Line_15 $$ rs = s.createQuery("select count(distinct child.id), count(distinct parent.id) from Foo parent, Foo child where parent.foo = child").iterate()-->Line_19 $$ assertTrue(!rs.hasNext())[ FD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_5 $$ Foo foo = new Foo()[ CD ]
Line_12 $$ Iterator rs = null-->Line_22 $$ row = (Object[]) rs.next()[ FD ]
Line_15 $$ rs = s.createQuery("select count(distinct child.id), count(distinct parent.id) from Foo parent, Foo child where parent.foo = child").iterate()-->Line_28 $$ row = (Object[]) rs.next()[ FD ]
Line_14 $$ if (!(getDialect() instanceof DerbyDialect)) -->Line_17 $$ assertTrue("multi-column count", ((Long) row[0]).intValue() == 1)[ CD ]
Line_15 $$ rs = s.createQuery("select count(distinct child.id), count(distinct parent.id) from Foo parent, Foo child where parent.foo = child").iterate()-->Line_26 $$ assertTrue(!rs.hasNext())[ FD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_4 $$ Transaction txn = s.beginTransaction()[ CD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_46 $$ txn.commit()[ CD ]
Line_12 $$ Iterator rs = null-->Line_16 $$ row = (Object[]) rs.next()[ FD ]
Line_16 $$ row = (Object[]) rs.next()-->Line_31 $$ row = (Object[]) l.get(0)[ FD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_11 $$ assertTrue("multi-column find", l.size() == 1)[ CD ]
Line_14 $$ if (!(getDialect() instanceof DerbyDialect)) -->Line_18 $$ assertTrue("multi-column count", ((Long) row[1]).intValue() == 1)[ CD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_26 $$ assertTrue(!rs.hasNext())[ CD ]
Line_35 $$ s = openSession()-->Line_42 $$ s.delete(pnc[1])[ FD ]
Line_16 $$ row = (Object[]) rs.next()-->Line_28 $$ row = (Object[]) rs.next()[ FD ]
Line_35 $$ s = openSession()-->Line_47 $$ s.close()[ FD ]
Line_36 $$ txn = s.beginTransaction()-->Line_46 $$ txn.commit()[ FD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_28 $$ row = (Object[]) rs.next()[ CD ]
Line_3 $$ Session s = openSession()-->Line_47 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_35 $$ s = openSession()[ FD ]
Line_10 $$ List l = s.createQuery("select parent, child from Foo parent, Foo child where parent.foo = child").list()-->Line_11 $$ assertTrue("multi-column find", l.size() == 1)[ FD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_14 $$ if (!(getDialect() instanceof DerbyDialect)) [ CD ]
Line_3 $$ Session s = openSession()-->Line_42 $$ s.delete(pnc[1])[ FD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_35 $$ s = openSession()[ CD ]
Line_5 $$ Foo foo = new Foo()-->Line_25 $$ assertTrue("multi-column property", row[2].equals(foo.getFoo().getLong()))[ FD ]
Line_12 $$ Iterator rs = null-->Line_27 $$ rs = s.createQuery("select child.id, parent.id, child.long, child, parent.foo from Foo parent, Foo child where parent.foo = child").iterate()[ FD ]
Line_5 $$ Foo foo = new Foo()-->Line_32 $$ assertTrue("multi-column find", row[0] == foo && row[1] == foo.getFoo())[ FD ]
Line_35 $$ s = openSession()-->Line_37 $$ Iterator iter = s.createQuery("select parent, child from Foo parent, Foo child where parent.foo = child and parent.string='a string'").iterate()[ FD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_47 $$ s.close()[ CD ]
Line_12 $$ Iterator rs = null-->Line_21 $$ rs = s.createQuery("select child.id, parent.id, child.long from Foo parent, Foo child where parent.foo = child").iterate()[ FD ]
Line_3 $$ Session s = openSession()-->Line_27 $$ rs = s.createQuery("select child.id, parent.id, child.long, child, parent.foo from Foo parent, Foo child where parent.foo = child").iterate()[ FD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ Transaction txn = s.beginTransaction()[ FD ]
Line_35 $$ s = openSession()-->Line_36 $$ txn = s.beginTransaction()[ FD ]
Line_39 $$ while (iter.hasNext()) -->Line_42 $$ s.delete(pnc[1])[ CD ]
Line_39 $$ while (iter.hasNext()) -->Line_43 $$ deletions++[ CD ]
Line_14 $$ if (!(getDialect() instanceof DerbyDialect)) -->Line_19 $$ assertTrue(!rs.hasNext())[ CD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_27 $$ rs = s.createQuery("select child.id, parent.id, child.long, child, parent.foo from Foo parent, Foo child where parent.foo = child").iterate()[ CD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_37 $$ Iterator iter = s.createQuery("select parent, child from Foo parent, Foo child where parent.foo = child and parent.string='a string'").iterate()[ CD ]
Line_16 $$ row = (Object[]) rs.next()-->Line_22 $$ row = (Object[]) rs.next()[ FD ]
Line_3 $$ Session s = openSession()-->Line_15 $$ rs = s.createQuery("select count(distinct child.id), count(distinct parent.id) from Foo parent, Foo child where parent.foo = child").iterate()[ FD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_30 $$ assertTrue(!rs.hasNext())[ CD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_38 $$ int deletions = 0[ CD ]
Line_21 $$ rs = s.createQuery("select child.id, parent.id, child.long from Foo parent, Foo child where parent.foo = child").iterate()-->Line_27 $$ rs = s.createQuery("select child.id, parent.id, child.long, child, parent.foo from Foo parent, Foo child where parent.foo = child").iterate()[ FD ]
Line_5 $$ Foo foo = new Foo()-->Line_29 $$ assertTrue(foo.getFoo().getKey().equals(row[0]) && foo.getKey().equals(row[1]) && foo.getFoo().getLong().equals(row[2]) && row[3] == foo.getFoo() && row[3] == row[4])[ FD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_33 $$ txn.commit()[ CD ]
Line_5 $$ Foo foo = new Foo()-->Line_6 $$ s.save(foo)[ FD ]
Line_37 $$ Iterator iter = s.createQuery("select parent, child from Foo parent, Foo child where parent.foo = child and parent.string='a string'").iterate()-->Line_39 $$ while (iter.hasNext()) [ FD ]
Line_28 $$ row = (Object[]) rs.next()-->Line_31 $$ row = (Object[]) l.get(0)[ FD ]
Line_15 $$ rs = s.createQuery("select count(distinct child.id), count(distinct parent.id) from Foo parent, Foo child where parent.foo = child").iterate()-->Line_30 $$ assertTrue(!rs.hasNext())[ FD ]
Line_3 $$ Session s = openSession()-->Line_34 $$ s.close()[ FD ]
Line_4 $$ Transaction txn = s.beginTransaction()-->Line_33 $$ txn.commit()[ FD ]
Line_21 $$ rs = s.createQuery("select child.id, parent.id, child.long from Foo parent, Foo child where parent.foo = child").iterate()-->Line_22 $$ row = (Object[]) rs.next()[ FD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_24 $$ assertTrue("multi-column id", row[1].equals(foo.getKey()))[ CD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_8 $$ s.save(foo1)[ CD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_34 $$ s.close()[ CD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_29 $$ assertTrue(foo.getFoo().getKey().equals(row[0]) && foo.getKey().equals(row[1]) && foo.getFoo().getLong().equals(row[2]) && row[3] == foo.getFoo() && row[3] == row[4])[ CD ]
Line_35 $$ s = openSession()-->Line_41 $$ s.delete(pnc[0])[ FD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_7 $$ Foo foo1 = new Foo()[ CD ]
Line_4 $$ Transaction txn = s.beginTransaction()-->Line_46 $$ txn.commit()[ FD ]
Line_12 $$ Iterator rs = null-->Line_19 $$ assertTrue(!rs.hasNext())[ FD ]
Line_3 $$ Session s = openSession()-->Line_41 $$ s.delete(pnc[0])[ FD ]
Line_13 $$ Object[] row = null-->Line_22 $$ row = (Object[]) rs.next()[ FD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_22 $$ row = (Object[]) rs.next()[ CD ]
Line_22 $$ row = (Object[]) rs.next()-->Line_28 $$ row = (Object[]) rs.next()[ FD ]
Line_3 $$ Session s = openSession()-->Line_6 $$ s.save(foo)[ FD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_36 $$ txn = s.beginTransaction()[ CD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_23 $$ assertTrue("multi-column id", row[0].equals(foo.getFoo().getKey()))[ CD ]
Line_3 $$ Session s = openSession()-->Line_8 $$ s.save(foo1)[ FD ]
Line_39 $$ while (iter.hasNext()) -->Line_40 $$ Object[] pnc = (Object[]) iter.next()[ CD ]
Line_7 $$ Foo foo1 = new Foo()-->Line_9 $$ foo.setFoo(foo1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_37 $$ Iterator iter = s.createQuery("select parent, child from Foo parent, Foo child where parent.foo = child and parent.string='a string'").iterate()[ FD ]
Line_27 $$ rs = s.createQuery("select child.id, parent.id, child.long, child, parent.foo from Foo parent, Foo child where parent.foo = child").iterate()-->Line_30 $$ assertTrue(!rs.hasNext())[ FD ]
Line_38 $$ int deletions = 0-->Line_43 $$ deletions++[ FD ]
Line_22 $$ row = (Object[]) rs.next()-->Line_31 $$ row = (Object[]) l.get(0)[ FD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_3 $$ Session s = openSession()[ CD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_32 $$ assertTrue("multi-column find", row[0] == foo && row[1] == foo.getFoo())[ CD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_25 $$ assertTrue("multi-column property", row[2].equals(foo.getFoo().getLong()))[ CD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_13 $$ Object[] row = null[ CD ]
Line_4 $$ Transaction txn = s.beginTransaction()-->Line_36 $$ txn = s.beginTransaction()[ FD ]
Line_12 $$ Iterator rs = null-->Line_30 $$ assertTrue(!rs.hasNext())[ FD ]
Line_3 $$ Session s = openSession()-->Line_21 $$ rs = s.createQuery("select child.id, parent.id, child.long from Foo parent, Foo child where parent.foo = child").iterate()[ FD ]
Line_5 $$ Foo foo = new Foo()-->Line_24 $$ assertTrue("multi-column id", row[1].equals(foo.getKey()))[ FD ]
Line_13 $$ Object[] row = null-->Line_16 $$ row = (Object[]) rs.next()[ FD ]
Line_13 $$ Object[] row = null-->Line_28 $$ row = (Object[]) rs.next()[ FD ]
Line_2 $$ public void testMultiColumnQueries() throws Exception -->Line_21 $$ rs = s.createQuery("select child.id, parent.id, child.long from Foo parent, Foo child where parent.foo = child").iterate()[ CD ]
Line_15 $$ rs = s.createQuery("select count(distinct child.id), count(distinct parent.id) from Foo parent, Foo child where parent.foo = child").iterate()-->Line_22 $$ row = (Object[]) rs.next()[ FD ]
Line_39 $$ while (iter.hasNext()) -->Line_41 $$ s.delete(pnc[0])[ CD ]
Line_12 $$ Iterator rs = null-->Line_28 $$ row = (Object[]) rs.next()[ FD ]
Line_14 $$ if (!(getDialect() instanceof DerbyDialect)) -->Line_15 $$ rs = s.createQuery("select count(distinct child.id), count(distinct parent.id) from Foo parent, Foo child where parent.foo = child").iterate()[ CD ]
