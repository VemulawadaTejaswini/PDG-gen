Line_17 $$ if (!namespaces.isEmpty()) -->Line_18 $$ final String message = ShowAutoImportPass.getMessage(namespaces.size() > 1, namespaces.iterator().next())[ CD ]
Line_13 $$ final PsiElement element = myElement.retrieve()-->Line_14 $$ if (element == null)[ FD ]
Line_17 $$ if (!namespaces.isEmpty()) -->Line_21 $$ if (element instanceof XmlTag && token != null) [ CD ]
Line_6 $$ token = (XmlToken) myToken.retrieve()-->Line_23 $$ HintManager.getInstance().showQuestionHint(editor, message, token.getTextOffset(), token.getTextOffset() + myNamespacePrefix.length(), action)[ FD ]
Line_16 $$ final List<String> namespaces = getNamespaces(element, getFile())-->Line_18 $$ final String message = ShowAutoImportPass.getMessage(namespaces.size() > 1, namespaces.iterator().next())[ FD ]
Line_4 $$ XmlToken token = null-->Line_22 $$ if (VisibleHighlightingPassFactory.calculateVisibleRange(editor).contains(token.getTextRange())) [ FD ]
Line_21 $$ if (element instanceof XmlTag && token != null) -->Line_22 $$ if (VisibleHighlightingPassFactory.calculateVisibleRange(editor).contains(token.getTextRange())) [ CD ]
Line_22 $$ if (VisibleHighlightingPassFactory.calculateVisibleRange(editor).contains(token.getTextRange())) -->Line_23 $$ HintManager.getInstance().showQuestionHint(editor, message, token.getTextOffset(), token.getTextOffset() + myNamespacePrefix.length(), action)[ CD ]
Line_21 $$ if (element instanceof XmlTag && token != null) -->Line_28 $$ return true[ CD ]
Line_4 $$ XmlToken token = null-->Line_23 $$ HintManager.getInstance().showQuestionHint(editor, message, token.getTextOffset(), token.getTextOffset() + myNamespacePrefix.length(), action)[ FD ]
Line_5 $$ if (myToken != null) -->Line_6 $$ token = (XmlToken) myToken.retrieve()[ CD ]
Line_7 $$ if (token == null)-->Line_8 $$ return false[ CD ]
Line_21 $$ if (element instanceof XmlTag && token != null) -->Line_27 $$ HintManager.getInstance().showQuestionHint(editor, message, element.getTextOffset(), element.getTextRange().getEndOffset(), action)[ CD ]
Line_18 $$ final String message = ShowAutoImportPass.getMessage(namespaces.size() > 1, namespaces.iterator().next())-->Line_27 $$ HintManager.getInstance().showQuestionHint(editor, message, element.getTextOffset(), element.getTextRange().getEndOffset(), action)[ FD ]
Line_6 $$ token = (XmlToken) myToken.retrieve()-->Line_7 $$ if (token == null)[ FD ]
Line_13 $$ final PsiElement element = myElement.retrieve()-->Line_27 $$ HintManager.getInstance().showQuestionHint(editor, message, element.getTextOffset(), element.getTextRange().getEndOffset(), action)[ FD ]
Line_22 $$ if (VisibleHighlightingPassFactory.calculateVisibleRange(editor).contains(token.getTextRange())) -->Line_24 $$ return true[ CD ]
Line_20 $$ final ImportNSAction action = new ImportNSAction(namespaces, getFile(), element, editor, title)-->Line_27 $$ HintManager.getInstance().showQuestionHint(editor, message, element.getTextOffset(), element.getTextRange().getEndOffset(), action)[ FD ]
Line_5 $$ if (myToken != null) -->Line_7 $$ if (token == null)[ CD ]
Line_13 $$ final PsiElement element = myElement.retrieve()-->Line_16 $$ final List<String> namespaces = getNamespaces(element, getFile())[ FD ]
Line_17 $$ if (!namespaces.isEmpty()) -->Line_20 $$ final ImportNSAction action = new ImportNSAction(namespaces, getFile(), element, editor, title)[ CD ]
Line_16 $$ final List<String> namespaces = getNamespaces(element, getFile())-->Line_17 $$ if (!namespaces.isEmpty()) [ FD ]
Line_6 $$ token = (XmlToken) myToken.retrieve()-->Line_22 $$ if (VisibleHighlightingPassFactory.calculateVisibleRange(editor).contains(token.getTextRange())) [ FD ]
Line_18 $$ final String message = ShowAutoImportPass.getMessage(namespaces.size() > 1, namespaces.iterator().next())-->Line_23 $$ HintManager.getInstance().showQuestionHint(editor, message, token.getTextOffset(), token.getTextOffset() + myNamespacePrefix.length(), action)[ FD ]
Line_17 $$ if (!namespaces.isEmpty()) -->Line_19 $$ final String title = getTitle()[ CD ]
Line_4 $$ XmlToken token = null-->Line_6 $$ token = (XmlToken) myToken.retrieve()[ FD ]
Line_4 $$ XmlToken token = null-->Line_7 $$ if (token == null)[ FD ]
Line_20 $$ final ImportNSAction action = new ImportNSAction(namespaces, getFile(), element, editor, title)-->Line_23 $$ HintManager.getInstance().showQuestionHint(editor, message, token.getTextOffset(), token.getTextOffset() + myNamespacePrefix.length(), action)[ FD ]
Line_10 $$ if (!XmlSettings.getInstance().SHOW_XML_ADD_IMPORT_HINTS || myNamespacePrefix.isEmpty()) -->Line_11 $$ return false[ CD ]
Line_14 $$ if (element == null)-->Line_15 $$ return false[ CD ]
