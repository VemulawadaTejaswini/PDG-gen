Line_6 $$ List<String> contentTypes = Collections.list(request.getHeaders("Content-Type"))-->Line_8 $$ assertEquals(1, contentTypes.size())[ FD ]
Line_2 $$ public void contentType() -->Line_8 $$ assertEquals(1, contentTypes.size())[ CD ]
Line_2 $$ public void contentType() -->Line_9 $$ assertEquals("text/html", contentTypes.get(0))[ CD ]
Line_4 $$ MockHttpServletRequest request = this.builder.buildRequest(this.servletContext)-->Line_5 $$ String contentType = request.getContentType()[ FD ]
Line_2 $$ public void contentType() -->Line_6 $$ List<String> contentTypes = Collections.list(request.getHeaders("Content-Type"))[ CD ]
Line_2 $$ public void contentType() -->Line_5 $$ String contentType = request.getContentType()[ CD ]
Line_6 $$ List<String> contentTypes = Collections.list(request.getHeaders("Content-Type"))-->Line_9 $$ assertEquals("text/html", contentTypes.get(0))[ FD ]
Line_2 $$ public void contentType() -->Line_3 $$ this.builder.contentType(MediaType.TEXT_HTML)[ CD ]
Line_5 $$ String contentType = request.getContentType()-->Line_7 $$ assertEquals("text/html", contentType)[ FD ]
Line_4 $$ MockHttpServletRequest request = this.builder.buildRequest(this.servletContext)-->Line_6 $$ List<String> contentTypes = Collections.list(request.getHeaders("Content-Type"))[ FD ]
Line_2 $$ public void contentType() -->Line_4 $$ MockHttpServletRequest request = this.builder.buildRequest(this.servletContext)[ CD ]
Line_2 $$ public void contentType() -->Line_7 $$ assertEquals("text/html", contentType)[ CD ]
