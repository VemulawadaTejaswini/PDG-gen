Line_20 $$ Statistics stats = sessionFactory().getStatistics()-->Line_24 $$ assertEquals("NaturalId cache hits should be zero", 0, stats.getNaturalIdCacheHitCount())[ FD ]
Line_20 $$ Statistics stats = sessionFactory().getStatistics()-->Line_25 $$ assertEquals("NaturalId Cache Puts", 0, stats.getNaturalIdCachePutCount())[ FD ]
Line_20 $$ Statistics stats = sessionFactory().getStatistics()-->Line_40 $$ assertEquals("NaturalId Cache Misses", 1, stats.getNaturalIdCacheMissCount())[ FD ]
Line_12 $$ Session s = openSession()-->Line_18 $$ s.close()[ FD ]
Line_12 $$ Session s = openSession()-->Line_28 $$ tx = s.beginTransaction()[ FD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_28 $$ tx = s.beginTransaction()[ CD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_29 $$ Criteria criteria = s.createCriteria(NaturalIdOnManyToOne.class)[ CD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_15 $$ s.persist(c1)[ CD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_42 $$ assertEquals("NaturalId Cache Queries", 1, stats.getNaturalIdQueryExecutionCount())[ CD ]
Line_4 $$ Citizen c1 = new Citizen()-->Line_6 $$ c1.setLastname("Bernard")[ FD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_13 $$ Transaction tx = s.beginTransaction()[ CD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_21 $$ stats.setStatisticsEnabled(true)[ CD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_43 $$ tx.rollback()[ CD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_25 $$ assertEquals("NaturalId Cache Puts", 0, stats.getNaturalIdCachePutCount())[ CD ]
Line_20 $$ Statistics stats = sessionFactory().getStatistics()-->Line_36 $$ assertEquals("NaturalId Cache Puts", 2, stats.getNaturalIdCachePutCount())[ FD ]
Line_4 $$ Citizen c1 = new Citizen()-->Line_10 $$ c1.setState(france)[ FD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_11 $$ singleManyToOne.setCitizen(c1)[ CD ]
Line_12 $$ Session s = openSession()-->Line_15 $$ s.persist(c1)[ FD ]
Line_20 $$ Statistics stats = sessionFactory().getStatistics()-->Line_39 $$ assertEquals("NaturalId Cache Hits", 0, stats.getNaturalIdCacheHitCount())[ FD ]
Line_13 $$ Transaction tx = s.beginTransaction()-->Line_43 $$ tx.rollback()[ FD ]
Line_20 $$ Statistics stats = sessionFactory().getStatistics()-->Line_22 $$ stats.clear()[ FD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_37 $$ assertEquals("NaturalId Cache Queries", 1, stats.getNaturalIdQueryExecutionCount())[ CD ]
Line_20 $$ Statistics stats = sessionFactory().getStatistics()-->Line_41 $$ assertEquals("NaturalId Cache Puts", 2, stats.getNaturalIdCachePutCount())[ FD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_40 $$ assertEquals("NaturalId Cache Misses", 1, stats.getNaturalIdCacheMissCount())[ CD ]
Line_20 $$ Statistics stats = sessionFactory().getStatistics()-->Line_21 $$ stats.setStatisticsEnabled(true)[ FD ]
Line_4 $$ Citizen c1 = new Citizen()-->Line_30 $$ criteria.add(Restrictions.naturalId().set("citizen", c1))[ FD ]
Line_13 $$ Transaction tx = s.beginTransaction()-->Line_28 $$ tx = s.beginTransaction()[ FD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_24 $$ assertEquals("NaturalId cache hits should be zero", 0, stats.getNaturalIdCacheHitCount())[ CD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_41 $$ assertEquals("NaturalId Cache Puts", 2, stats.getNaturalIdCachePutCount())[ CD ]
Line_29 $$ Criteria criteria = s.createCriteria(NaturalIdOnManyToOne.class)-->Line_31 $$ criteria.setCacheable(true)[ FD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_8 $$ State france = new State()[ CD ]
Line_8 $$ State france = new State()-->Line_14 $$ s.persist(france)[ FD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_26 $$ assertEquals("NaturalId cache misses should be zero", 0, stats.getNaturalIdCacheMissCount())[ CD ]
Line_4 $$ Citizen c1 = new Citizen()-->Line_15 $$ s.persist(c1)[ FD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_38 $$ criteria.list()[ CD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_33 $$ assertEquals(1, results.size())[ CD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_31 $$ criteria.setCacheable(true)[ CD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_36 $$ assertEquals("NaturalId Cache Puts", 2, stats.getNaturalIdCachePutCount())[ CD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_23 $$ assertEquals("NaturalId cache puts should be zero", 0, stats.getNaturalIdCachePutCount())[ CD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_3 $$ NaturalIdOnManyToOne singleManyToOne = new NaturalIdOnManyToOne()[ CD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_4 $$ Citizen c1 = new Citizen()[ CD ]
Line_12 $$ Session s = openSession()-->Line_14 $$ s.persist(france)[ FD ]
Line_27 $$ s = openSession()-->Line_29 $$ Criteria criteria = s.createCriteria(NaturalIdOnManyToOne.class)[ FD ]
Line_8 $$ State france = new State()-->Line_9 $$ france.setName("Ile de France")[ FD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_5 $$ c1.setFirstname("Emmanuel")[ CD ]
Line_20 $$ Statistics stats = sessionFactory().getStatistics()-->Line_42 $$ assertEquals("NaturalId Cache Queries", 1, stats.getNaturalIdQueryExecutionCount())[ FD ]
Line_8 $$ State france = new State()-->Line_10 $$ c1.setState(france)[ FD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_39 $$ assertEquals("NaturalId Cache Hits", 0, stats.getNaturalIdCacheHitCount())[ CD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_9 $$ france.setName("Ile de France")[ CD ]
Line_27 $$ s = openSession()-->Line_44 $$ s.close()[ FD ]
Line_27 $$ s = openSession()-->Line_28 $$ tx = s.beginTransaction()[ FD ]
Line_12 $$ Session s = openSession()-->Line_27 $$ s = openSession()[ FD ]
Line_12 $$ Session s = openSession()-->Line_19 $$ s.getSessionFactory().getCache().evictNaturalIdRegions()[ FD ]
Line_20 $$ Statistics stats = sessionFactory().getStatistics()-->Line_26 $$ assertEquals("NaturalId cache misses should be zero", 0, stats.getNaturalIdCacheMissCount())[ FD ]
Line_29 $$ Criteria criteria = s.createCriteria(NaturalIdOnManyToOne.class)-->Line_32 $$ List results = criteria.list()[ FD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_7 $$ c1.setSsn("1234")[ CD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_34 $$ assertEquals("NaturalId Cache Hits", 0, stats.getNaturalIdCacheHitCount())[ CD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_22 $$ stats.clear()[ CD ]
Line_4 $$ Citizen c1 = new Citizen()-->Line_11 $$ singleManyToOne.setCitizen(c1)[ FD ]
Line_32 $$ List results = criteria.list()-->Line_33 $$ assertEquals(1, results.size())[ FD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_20 $$ Statistics stats = sessionFactory().getStatistics()[ CD ]
Line_3 $$ NaturalIdOnManyToOne singleManyToOne = new NaturalIdOnManyToOne()-->Line_11 $$ singleManyToOne.setCitizen(c1)[ FD ]
Line_3 $$ NaturalIdOnManyToOne singleManyToOne = new NaturalIdOnManyToOne()-->Line_16 $$ s.persist(singleManyToOne)[ FD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_17 $$ tx.commit()[ CD ]
Line_20 $$ Statistics stats = sessionFactory().getStatistics()-->Line_23 $$ assertEquals("NaturalId cache puts should be zero", 0, stats.getNaturalIdCachePutCount())[ FD ]
Line_12 $$ Session s = openSession()-->Line_29 $$ Criteria criteria = s.createCriteria(NaturalIdOnManyToOne.class)[ FD ]
Line_13 $$ Transaction tx = s.beginTransaction()-->Line_17 $$ tx.commit()[ FD ]
Line_20 $$ Statistics stats = sessionFactory().getStatistics()-->Line_35 $$ assertEquals("NaturalId Cache Misses", 1, stats.getNaturalIdCacheMissCount())[ FD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_32 $$ List results = criteria.list()[ CD ]
Line_12 $$ Session s = openSession()-->Line_13 $$ Transaction tx = s.beginTransaction()[ FD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_35 $$ assertEquals("NaturalId Cache Misses", 1, stats.getNaturalIdCacheMissCount())[ CD ]
Line_12 $$ Session s = openSession()-->Line_44 $$ s.close()[ FD ]
Line_12 $$ Session s = openSession()-->Line_16 $$ s.persist(singleManyToOne)[ FD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_18 $$ s.close()[ CD ]
Line_4 $$ Citizen c1 = new Citizen()-->Line_7 $$ c1.setSsn("1234")[ FD ]
Line_20 $$ Statistics stats = sessionFactory().getStatistics()-->Line_34 $$ assertEquals("NaturalId Cache Hits", 0, stats.getNaturalIdCacheHitCount())[ FD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_44 $$ s.close()[ CD ]
Line_4 $$ Citizen c1 = new Citizen()-->Line_5 $$ c1.setFirstname("Emmanuel")[ FD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_16 $$ s.persist(singleManyToOne)[ CD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_30 $$ criteria.add(Restrictions.naturalId().set("citizen", c1))[ CD ]
Line_29 $$ Criteria criteria = s.createCriteria(NaturalIdOnManyToOne.class)-->Line_38 $$ criteria.list()[ FD ]
Line_28 $$ tx = s.beginTransaction()-->Line_43 $$ tx.rollback()[ FD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_27 $$ s = openSession()[ CD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_6 $$ c1.setLastname("Bernard")[ CD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_10 $$ c1.setState(france)[ CD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_19 $$ s.getSessionFactory().getCache().evictNaturalIdRegions()[ CD ]
Line_20 $$ Statistics stats = sessionFactory().getStatistics()-->Line_37 $$ assertEquals("NaturalId Cache Queries", 1, stats.getNaturalIdQueryExecutionCount())[ FD ]
Line_29 $$ Criteria criteria = s.createCriteria(NaturalIdOnManyToOne.class)-->Line_30 $$ criteria.add(Restrictions.naturalId().set("citizen", c1))[ FD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_12 $$ Session s = openSession()[ CD ]
Line_2 $$ public void testManyToOneNaturalIdCached() -->Line_14 $$ s.persist(france)[ CD ]
