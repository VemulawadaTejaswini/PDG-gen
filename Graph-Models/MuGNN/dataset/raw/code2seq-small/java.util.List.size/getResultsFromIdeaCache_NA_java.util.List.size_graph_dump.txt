Line_15 $$ for (String artifactId : m.getArtifactIds(groupId)) -->Line_16 $$ if (parts.size() < 2 || StringUtil.contains(artifactId, parts.get(1))) [ FD ]
Line_11 $$ for (String groupId : m.getGroupIds()) -->Line_15 $$ for (String artifactId : m.getArtifactIds(groupId)) [ FD ]
Line_17 $$ List<MavenArtifactInfo> versions = ContainerUtil.newSmartList()-->Line_20 $$ versions.add(new MavenArtifactInfo(groupId, artifactId, version, "jar", null))[ FD ]
Line_25 $$ if (!versions.isEmpty()) -->Line_28 $$ searchResults.add(searchResult)[ CD ]
Line_4 $$ List<String> parts = new ArrayList<String>()-->Line_19 $$ if (parts.size() < 3 || StringUtil.contains(version, parts.get(2))) [ FD ]
Line_4 $$ List<String> parts = new ArrayList<String>()-->Line_14 $$ if (parts.size() < 1 || StringUtil.contains(groupId, parts.get(0))) [ FD ]
Line_18 $$ for (String version : m.getVersions(groupId, artifactId)) -->Line_19 $$ if (parts.size() < 3 || StringUtil.contains(version, parts.get(2))) [ FD ]
Line_9 $$ MavenProjectIndicesManager m = MavenProjectIndicesManager.getInstance(project)-->Line_11 $$ for (String groupId : m.getGroupIds()) [ FD ]
Line_11 $$ for (String groupId : m.getGroupIds()) -->Line_18 $$ for (String version : m.getVersions(groupId, artifactId)) [ FD ]
Line_11 $$ for (String groupId : m.getGroupIds()) -->Line_14 $$ if (parts.size() < 1 || StringUtil.contains(groupId, parts.get(0))) [ FD ]
Line_19 $$ if (parts.size() < 3 || StringUtil.contains(version, parts.get(2))) -->Line_20 $$ versions.add(new MavenArtifactInfo(groupId, artifactId, version, "jar", null))[ CD ]
Line_17 $$ List<MavenArtifactInfo> versions = ContainerUtil.newSmartList()-->Line_27 $$ searchResult.versions.addAll(versions)[ FD ]
Line_19 $$ if (parts.size() < 3 || StringUtil.contains(version, parts.get(2))) -->Line_21 $$ if (++count >= maxResult)[ CD ]
Line_8 $$ List<MavenArtifactSearchResult> searchResults = ContainerUtil.newSmartList()-->Line_28 $$ searchResults.add(searchResult)[ FD ]
Line_16 $$ if (parts.size() < 2 || StringUtil.contains(artifactId, parts.get(1))) -->Line_25 $$ if (!versions.isEmpty()) [ CD ]
Line_10 $$ int count = 0-->Line_12 $$ if (count >= maxResult)[ FD ]
Line_25 $$ if (!versions.isEmpty()) -->Line_26 $$ MavenArtifactSearchResult searchResult = new MavenArtifactSearchResult()[ CD ]
Line_9 $$ MavenProjectIndicesManager m = MavenProjectIndicesManager.getInstance(project)-->Line_15 $$ for (String artifactId : m.getArtifactIds(groupId)) [ FD ]
Line_10 $$ int count = 0-->Line_31 $$ if (count >= maxResult)[ FD ]
Line_4 $$ List<String> parts = new ArrayList<String>()-->Line_16 $$ if (parts.size() < 2 || StringUtil.contains(artifactId, parts.get(1))) [ FD ]
Line_10 $$ int count = 0-->Line_21 $$ if (++count >= maxResult)[ FD ]
Line_17 $$ List<MavenArtifactInfo> versions = ContainerUtil.newSmartList()-->Line_25 $$ if (!versions.isEmpty()) [ FD ]
Line_25 $$ if (!versions.isEmpty()) -->Line_27 $$ searchResult.versions.addAll(versions)[ CD ]
Line_16 $$ if (parts.size() < 2 || StringUtil.contains(artifactId, parts.get(1))) -->Line_17 $$ List<MavenArtifactInfo> versions = ContainerUtil.newSmartList()[ CD ]
Line_9 $$ MavenProjectIndicesManager m = MavenProjectIndicesManager.getInstance(project)-->Line_18 $$ for (String version : m.getVersions(groupId, artifactId)) [ FD ]
Line_26 $$ MavenArtifactSearchResult searchResult = new MavenArtifactSearchResult()-->Line_28 $$ searchResults.add(searchResult)[ FD ]
Line_5 $$ for (String each : StringUtil.tokenize(pattern, " :")) -->Line_6 $$ parts.add(each)[ FD ]
Line_4 $$ List<String> parts = new ArrayList<String>()-->Line_6 $$ parts.add(each)[ FD ]
Line_15 $$ for (String artifactId : m.getArtifactIds(groupId)) -->Line_18 $$ for (String version : m.getVersions(groupId, artifactId)) [ FD ]
