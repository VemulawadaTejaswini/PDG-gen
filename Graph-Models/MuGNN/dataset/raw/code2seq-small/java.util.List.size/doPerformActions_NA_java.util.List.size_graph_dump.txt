Line_2 $$ protected long doPerformActions(long previousPrimaryKey) throws PortalException -->Line_7 $$ addDefaultCriteria(dynamicQuery)[ CD ]
Line_14 $$ List<Object> objects = (List<Object>) executeDynamicQuery(_dynamicQueryMethod, dynamicQuery)-->Line_19 $$ List<Future<Void>> futures = new ArrayList(objects.size())[ FD ]
Line_2 $$ protected long doPerformActions(long previousPrimaryKey) throws PortalException -->Line_45 $$ TransactionAttribute transactionAttribute = getTransactionAttribute()[ CD ]
Line_20 $$ for (final Object object : objects) -->Line_25 $$ performAction(object)[ FD ]
Line_3 $$ final DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(_modelClass, _classLoader)-->Line_8 $$ addCriteria(dynamicQuery)[ FD ]
Line_10 $$ Callable<Long> callable = new Callable<Long>() -->Line_42 $$ return (Long) baseModel.getPrimaryKeyObj()[ CD ]
Line_2 $$ protected long doPerformActions(long previousPrimaryKey) throws PortalException -->Line_6 $$ dynamicQuery.setLimit(0, _interval)[ CD ]
Line_10 $$ Callable<Long> callable = new Callable<Long>() -->Line_38 $$ if (objects.size() < _interval) [ CD ]
Line_18 $$ if (_parallel) -->Line_19 $$ List<Future<Void>> futures = new ArrayList(objects.size())[ CD ]
Line_14 $$ List<Object> objects = (List<Object>) executeDynamicQuery(_dynamicQueryMethod, dynamicQuery)-->Line_41 $$ BaseModel<?> baseModel = (BaseModel<?>) objects.get(objects.size() - 1)[ FD ]
Line_47 $$ if (transactionAttribute == null) -->Line_48 $$ return callable.call()[ CD ]
Line_4 $$ Property property = PropertyFactoryUtil.forName(_primaryKeyPropertyName)-->Line_5 $$ dynamicQuery.add(property.gt(previousPrimaryKey))[ FD ]
Line_10 $$ Callable<Long> callable = new Callable<Long>() -->Line_15 $$ if (objects.isEmpty()) [ CD ]
Line_10 $$ Callable<Long> callable = new Callable<Long>() -->Line_18 $$ if (_parallel) [ CD ]
Line_47 $$ if (transactionAttribute == null) -->Line_50 $$ return TransactionInvokerUtil.invoke(transactionAttribute, callable)[ CD ]
Line_10 $$ Callable<Long> callable = new Callable<Long>() -->Line_14 $$ List<Object> objects = (List<Object>) executeDynamicQuery(_dynamicQueryMethod, dynamicQuery)[ CD ]
Line_10 $$ Callable<Long> callable = new Callable<Long>() -->Line_48 $$ return callable.call()[ FD ]
Line_20 $$ for (final Object object : objects) -->Line_35 $$ performAction(object)[ FD ]
Line_2 $$ protected long doPerformActions(long previousPrimaryKey) throws PortalException -->Line_10 $$ Callable<Long> callable = new Callable<Long>() [ CD ]
Line_15 $$ if (objects.isEmpty()) -->Line_16 $$ return -1L[ CD ]
Line_21 $$ futures.add(_threadPoolExecutor.submit(new Callable<Void>() -->Line_25 $$ performAction(object)[ CD ]
Line_3 $$ final DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(_modelClass, _classLoader)-->Line_14 $$ List<Object> objects = (List<Object>) executeDynamicQuery(_dynamicQueryMethod, dynamicQuery)[ FD ]
Line_3 $$ final DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(_modelClass, _classLoader)-->Line_5 $$ dynamicQuery.add(property.gt(previousPrimaryKey))[ FD ]
Line_2 $$ protected long doPerformActions(long previousPrimaryKey) throws PortalException -->Line_9 $$ addOrderCriteria(dynamicQuery)[ CD ]
Line_14 $$ List<Object> objects = (List<Object>) executeDynamicQuery(_dynamicQueryMethod, dynamicQuery)-->Line_15 $$ if (objects.isEmpty()) [ FD ]
Line_38 $$ if (objects.size() < _interval) -->Line_39 $$ return -1L[ CD ]
Line_21 $$ futures.add(_threadPoolExecutor.submit(new Callable<Void>() -->Line_26 $$ return null[ CD ]
Line_2 $$ protected long doPerformActions(long previousPrimaryKey) throws PortalException -->Line_3 $$ final DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(_modelClass, _classLoader)[ CD ]
Line_19 $$ List<Future<Void>> futures = new ArrayList(objects.size())-->Line_21 $$ futures.add(_threadPoolExecutor.submit(new Callable<Void>() [ FD ]
Line_3 $$ final DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(_modelClass, _classLoader)-->Line_6 $$ dynamicQuery.setLimit(0, _interval)[ FD ]
Line_3 $$ final DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(_modelClass, _classLoader)-->Line_9 $$ addOrderCriteria(dynamicQuery)[ FD ]
Line_10 $$ Callable<Long> callable = new Callable<Long>() -->Line_50 $$ return TransactionInvokerUtil.invoke(transactionAttribute, callable)[ FD ]
Line_2 $$ protected long doPerformActions(long previousPrimaryKey) throws PortalException -->Line_4 $$ Property property = PropertyFactoryUtil.forName(_primaryKeyPropertyName)[ CD ]
Line_2 $$ protected long doPerformActions(long previousPrimaryKey) throws PortalException -->Line_8 $$ addCriteria(dynamicQuery)[ CD ]
Line_14 $$ List<Object> objects = (List<Object>) executeDynamicQuery(_dynamicQueryMethod, dynamicQuery)-->Line_38 $$ if (objects.size() < _interval) [ FD ]
Line_2 $$ protected long doPerformActions(long previousPrimaryKey) throws PortalException -->Line_5 $$ dynamicQuery.add(property.gt(previousPrimaryKey))[ FD ]
Line_3 $$ final DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(_modelClass, _classLoader)-->Line_7 $$ addDefaultCriteria(dynamicQuery)[ FD ]
Line_2 $$ protected long doPerformActions(long previousPrimaryKey) throws PortalException -->Line_5 $$ dynamicQuery.add(property.gt(previousPrimaryKey))[ CD ]
