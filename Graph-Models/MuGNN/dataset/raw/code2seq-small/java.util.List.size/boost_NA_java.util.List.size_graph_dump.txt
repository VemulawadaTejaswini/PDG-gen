Line_4 $$ if (!entries.isEmpty()) -->Line_19 $$ return entries.get(index).boost()[ CD ]
Line_9 $$ if (startOffset < midOffset) -->Line_10 $$ hi = mid - 1[ CD ]
Line_7 $$ final int mid = (lo + hi) >>> 1-->Line_12 $$ lo = mid + 1[ FD ]
Line_8 $$ final int midOffset = entries.get(mid).startOffset()-->Line_9 $$ if (startOffset < midOffset) [ FD ]
Line_6 $$ while (lo <= hi) -->Line_8 $$ final int midOffset = entries.get(mid).startOffset()[ CD ]
Line_5 $$ int lo = 0, hi = entries.size() - 1-->Line_10 $$ hi = mid - 1[ FD ]
Line_5 $$ int lo = 0, hi = entries.size() - 1-->Line_12 $$ lo = mid + 1[ FD ]
Line_4 $$ if (!entries.isEmpty()) -->Line_5 $$ int lo = 0, hi = entries.size() - 1[ CD ]
Line_4 $$ if (!entries.isEmpty()) -->Line_6 $$ while (lo <= hi) [ CD ]
Line_6 $$ while (lo <= hi) -->Line_9 $$ if (startOffset < midOffset) [ CD ]
Line_10 $$ hi = mid - 1-->Line_6 $$ while (lo <= hi) [ FD ]
Line_5 $$ int lo = 0, hi = entries.size() - 1-->Line_6 $$ while (lo <= hi) [ FD ]
Line_6 $$ while (lo <= hi) -->Line_7 $$ final int mid = (lo + hi) >>> 1[ CD ]
Line_7 $$ final int mid = (lo + hi) >>> 1-->Line_8 $$ final int midOffset = entries.get(mid).startOffset()[ FD ]
Line_9 $$ if (startOffset < midOffset) -->Line_12 $$ lo = mid + 1[ CD ]
Line_12 $$ lo = mid + 1-->Line_6 $$ while (lo <= hi) [ FD ]
Line_7 $$ final int mid = (lo + hi) >>> 1-->Line_10 $$ hi = mid - 1[ FD ]
