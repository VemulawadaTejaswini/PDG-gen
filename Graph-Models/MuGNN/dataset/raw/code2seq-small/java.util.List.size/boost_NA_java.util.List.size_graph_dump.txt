Line_5 $$ while (lo <= hi) -->Line_7 $$ final int midOffset = entries.get(mid).startOffset()[ CD ]
Line_8 $$ if (startOffset < midOffset) -->Line_9 $$ hi = mid - 1[ CD ]
Line_9 $$ hi = mid - 1-->Line_14 $$ final int index = Math.max(0, hi)[ FD ]
Line_8 $$ if (startOffset < midOffset) -->Line_11 $$ lo = mid + 1[ CD ]
Line_2 $$ public float boost(int startOffset) -->Line_8 $$ if (startOffset < midOffset) [ FD ]
Line_6 $$ final int mid = (lo + hi) >>> 1-->Line_11 $$ lo = mid + 1[ FD ]
Line_3 $$ if (!entries.isEmpty()) -->Line_4 $$ int lo = 0, hi = entries.size() - 1[ CD ]
Line_3 $$ if (!entries.isEmpty()) -->Line_17 $$ return entries.get(index).boost()[ CD ]
Line_9 $$ hi = mid - 1-->Line_5 $$ while (lo <= hi) [ FD ]
Line_14 $$ final int index = Math.max(0, hi)-->Line_15 $$ assert entries.get(index).startOffset() <= startOffset[ FD ]
Line_4 $$ int lo = 0, hi = entries.size() - 1-->Line_11 $$ lo = mid + 1[ FD ]
Line_2 $$ public float boost(int startOffset) -->Line_19 $$ return 1.0f[ CD ]
Line_6 $$ final int mid = (lo + hi) >>> 1-->Line_7 $$ final int midOffset = entries.get(mid).startOffset()[ FD ]
Line_4 $$ int lo = 0, hi = entries.size() - 1-->Line_5 $$ while (lo <= hi) [ FD ]
Line_2 $$ public float boost(int startOffset) -->Line_3 $$ if (!entries.isEmpty()) [ CD ]
Line_4 $$ int lo = 0, hi = entries.size() - 1-->Line_14 $$ final int index = Math.max(0, hi)[ FD ]
Line_4 $$ int lo = 0, hi = entries.size() - 1-->Line_9 $$ hi = mid - 1[ FD ]
Line_3 $$ if (!entries.isEmpty()) -->Line_5 $$ while (lo <= hi) [ CD ]
Line_7 $$ final int midOffset = entries.get(mid).startOffset()-->Line_8 $$ if (startOffset < midOffset) [ FD ]
Line_3 $$ if (!entries.isEmpty()) -->Line_14 $$ final int index = Math.max(0, hi)[ CD ]
Line_11 $$ lo = mid + 1-->Line_5 $$ while (lo <= hi) [ FD ]
Line_6 $$ final int mid = (lo + hi) >>> 1-->Line_9 $$ hi = mid - 1[ FD ]
Line_5 $$ while (lo <= hi) -->Line_6 $$ final int mid = (lo + hi) >>> 1[ CD ]
Line_14 $$ final int index = Math.max(0, hi)-->Line_17 $$ return entries.get(index).boost()[ FD ]
Line_5 $$ while (lo <= hi) -->Line_8 $$ if (startOffset < midOffset) [ CD ]
