Line_47 $$ int value = usedValues.get(randomInt(usedValues.size() - 1))-->Line_48 $$ NavigableSet<Integer> levels = controlMap.get(value)[ FD ]
Line_50 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchQuery("field1", value), fieldValueFactorFunction("level")).boostMode(CombineFunction.REPLACE)).execute().actionGet()-->Line_52 $$ assertThat(response.getMatches().length, equalTo(Math.min(levels.size(), size)))[ FD ]
Line_2 $$ public void testPercolateScoreAndSorting() throws Exception -->Line_3 $$ createIndex("my-index")[ CD ]
Line_46 $$ for (int i = 0; i < runs; i++) -->Line_49 $$ int size = randomIntBetween(1, levels.size())[ CD ]
Line_48 $$ NavigableSet<Integer> levels = controlMap.get(value)-->Line_51 $$ assertMatchCount(response, levels.size())[ FD ]
Line_47 $$ int value = usedValues.get(randomInt(usedValues.size() - 1))-->Line_50 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchQuery("field1", value), fieldValueFactorFunction("level")).boostMode(CombineFunction.REPLACE)).execute().actionGet()[ FD ]
Line_39 $$ for (PercolateResponse.Match match : response) -->Line_57 $$ assertThat(match.getScore(), equalTo((float) controlLevel))[ FD ]
Line_54 $$ for (PercolateResponse.Match match : response) -->Line_56 $$ assertThat(match.getId().string(), equalTo(Integer.toString(controlLevel)))[ FD ]
Line_11 $$ int value = randomInt(10)-->Line_12 $$ client().prepareIndex("my-index", PercolatorService.TYPE_NAME, Integer.toString(i)).setSource(jsonBuilder().startObject().field("query", matchAllQuery()).field("level", i).field("field1", value).endObject()).execute().actionGet()[ FD ]
Line_54 $$ for (PercolateResponse.Match match : response) -->Line_58 $$ assertThat(match.getIndex().string(), equalTo("my-index"))[ FD ]
Line_2 $$ public void testPercolateScoreAndSorting() throws Exception -->Line_4 $$ ensureGreen()[ CD ]
Line_23 $$ int size = randomIntBetween(1, 50)-->Line_24 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()[ FD ]
Line_10 $$ for (int i = 0; i < numQueries; i++) -->Line_16 $$ controlMap.get(value).add(i)[ FD ]
Line_39 $$ for (PercolateResponse.Match match : response) -->Line_42 $$ assertThat(match.getIndex().string(), equalTo("my-index"))[ FD ]
Line_10 $$ for (int i = 0; i < numQueries; i++) -->Line_11 $$ int value = randomInt(10)[ CD ]
Line_22 $$ for (int i = 0; i < runs; i++) -->Line_23 $$ int size = randomIntBetween(1, 50)[ CD ]
Line_24 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()-->Line_26 $$ assertThat(response.getMatches().length, equalTo(size))[ FD ]
Line_22 $$ for (int i = 0; i < runs; i++) -->Line_46 $$ for (int i = 0; i < runs; i++) [ FD ]
Line_35 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()-->Line_37 $$ assertThat(response.getMatches().length, equalTo(size))[ FD ]
Line_48 $$ NavigableSet<Integer> levels = controlMap.get(value)-->Line_49 $$ int size = randomIntBetween(1, levels.size())[ FD ]
Line_8 $$ long numQueries = randomIntBetween(100, 250)-->Line_25 $$ assertMatchCount(response, numQueries)[ FD ]
Line_35 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()-->Line_52 $$ assertThat(response.getMatches().length, equalTo(Math.min(levels.size(), size)))[ FD ]
Line_24 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()-->Line_28 $$ String id = response.getMatches()[j].getId().string()[ FD ]
Line_10 $$ for (int i = 0; i < numQueries; i++) -->Line_13 $$ if (!controlMap.containsKey(value)) [ CD ]
Line_10 $$ for (int i = 0; i < numQueries; i++) -->Line_12 $$ client().prepareIndex("my-index", PercolatorService.TYPE_NAME, Integer.toString(i)).setSource(jsonBuilder().startObject().field("query", matchAllQuery()).field("level", i).field("field1", value).endObject()).execute().actionGet()[ FD ]
Line_46 $$ for (int i = 0; i < runs; i++) -->Line_48 $$ NavigableSet<Integer> levels = controlMap.get(value)[ CD ]
Line_34 $$ int size = randomIntBetween(1, 10)-->Line_50 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchQuery("field1", value), fieldValueFactorFunction("level")).boostMode(CombineFunction.REPLACE)).execute().actionGet()[ FD ]
Line_24 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()-->Line_25 $$ assertMatchCount(response, numQueries)[ FD ]
Line_11 $$ int value = randomInt(10)-->Line_16 $$ controlMap.get(value).add(i)[ FD ]
Line_24 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()-->Line_27 $$ for (int j = 0; j < response.getMatches().length; j++) [ FD ]
Line_10 $$ for (int i = 0; i < numQueries; i++) -->Line_46 $$ for (int i = 0; i < runs; i++) [ FD ]
Line_11 $$ int value = randomInt(10)-->Line_13 $$ if (!controlMap.containsKey(value)) [ FD ]
Line_23 $$ int size = randomIntBetween(1, 50)-->Line_50 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchQuery("field1", value), fieldValueFactorFunction("level")).boostMode(CombineFunction.REPLACE)).execute().actionGet()[ FD ]
Line_23 $$ int size = randomIntBetween(1, 50)-->Line_52 $$ assertThat(response.getMatches().length, equalTo(Math.min(levels.size(), size)))[ FD ]
Line_48 $$ NavigableSet<Integer> levels = controlMap.get(value)-->Line_53 $$ Iterator<Integer> levelIterator = levels.descendingIterator()[ FD ]
Line_24 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()-->Line_36 $$ assertMatchCount(response, numQueries)[ FD ]
Line_10 $$ for (int i = 0; i < numQueries; i++) -->Line_22 $$ for (int i = 0; i < runs; i++) [ FD ]
Line_46 $$ for (int i = 0; i < runs; i++) -->Line_47 $$ int value = usedValues.get(randomInt(usedValues.size() - 1))[ CD ]
Line_34 $$ int size = randomIntBetween(1, 10)-->Line_37 $$ assertThat(response.getMatches().length, equalTo(size))[ FD ]
Line_8 $$ long numQueries = randomIntBetween(100, 250)-->Line_36 $$ assertMatchCount(response, numQueries)[ FD ]
Line_24 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()-->Line_52 $$ assertThat(response.getMatches().length, equalTo(Math.min(levels.size(), size)))[ FD ]
Line_39 $$ for (PercolateResponse.Match match : response) -->Line_40 $$ assertThat(match.getId().string(), equalTo(Integer.toString(expectedId)))[ FD ]
Line_35 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()-->Line_36 $$ assertMatchCount(response, numQueries)[ FD ]
Line_46 $$ for (int i = 0; i < runs; i++) -->Line_52 $$ assertThat(response.getMatches().length, equalTo(Math.min(levels.size(), size)))[ CD ]
Line_24 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()-->Line_51 $$ assertMatchCount(response, levels.size())[ FD ]
Line_54 $$ for (PercolateResponse.Match match : response) -->Line_57 $$ assertThat(match.getScore(), equalTo((float) controlLevel))[ FD ]
Line_2 $$ public void testPercolateScoreAndSorting() throws Exception -->Line_7 $$ Map<Integer, NavigableSet<Integer>> controlMap = new HashMap()[ CD ]
Line_53 $$ Iterator<Integer> levelIterator = levels.descendingIterator()-->Line_55 $$ int controlLevel = levelIterator.next()[ FD ]
Line_27 $$ for (int j = 0; j < response.getMatches().length; j++) -->Line_29 $$ assertThat(Integer.valueOf(id), equalTo((int) response.getMatches()[j].getScore()))[ CD ]
Line_34 $$ int size = randomIntBetween(1, 10)-->Line_52 $$ assertThat(response.getMatches().length, equalTo(Math.min(levels.size(), size)))[ FD ]
Line_7 $$ Map<Integer, NavigableSet<Integer>> controlMap = new HashMap()-->Line_48 $$ NavigableSet<Integer> levels = controlMap.get(value)[ FD ]
Line_18 $$ List<Integer> usedValues = new ArrayList(controlMap.keySet())-->Line_47 $$ int value = usedValues.get(randomInt(usedValues.size() - 1))[ FD ]
Line_23 $$ int size = randomIntBetween(1, 50)-->Line_26 $$ assertThat(response.getMatches().length, equalTo(size))[ FD ]
Line_2 $$ public void testPercolateScoreAndSorting() throws Exception -->Line_46 $$ for (int i = 0; i < runs; i++) [ CD ]
Line_48 $$ NavigableSet<Integer> levels = controlMap.get(value)-->Line_52 $$ assertThat(response.getMatches().length, equalTo(Math.min(levels.size(), size)))[ FD ]
Line_11 $$ int value = randomInt(10)-->Line_14 $$ controlMap.put(value, new TreeSet<Integer>())[ FD ]
Line_11 $$ int value = randomInt(10)-->Line_48 $$ NavigableSet<Integer> levels = controlMap.get(value)[ FD ]
Line_22 $$ for (int i = 0; i < runs; i++) -->Line_26 $$ assertThat(response.getMatches().length, equalTo(size))[ CD ]
Line_2 $$ public void testPercolateScoreAndSorting() throws Exception -->Line_8 $$ long numQueries = randomIntBetween(100, 250)[ CD ]
Line_22 $$ for (int i = 0; i < runs; i++) -->Line_24 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()[ CD ]
Line_22 $$ for (int i = 0; i < runs; i++) -->Line_27 $$ for (int j = 0; j < response.getMatches().length; j++) [ CD ]
Line_7 $$ Map<Integer, NavigableSet<Integer>> controlMap = new HashMap()-->Line_16 $$ controlMap.get(value).add(i)[ FD ]
Line_27 $$ for (int j = 0; j < response.getMatches().length; j++) -->Line_28 $$ String id = response.getMatches()[j].getId().string()[ CD ]
Line_39 $$ for (PercolateResponse.Match match : response) -->Line_56 $$ assertThat(match.getId().string(), equalTo(Integer.toString(controlLevel)))[ FD ]
Line_24 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()-->Line_37 $$ assertThat(response.getMatches().length, equalTo(size))[ FD ]
Line_50 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchQuery("field1", value), fieldValueFactorFunction("level")).boostMode(CombineFunction.REPLACE)).execute().actionGet()-->Line_51 $$ assertMatchCount(response, levels.size())[ FD ]
Line_38 $$ int expectedId = (int) (numQueries - 1)-->Line_43 $$ expectedId--[ FD ]
Line_2 $$ public void testPercolateScoreAndSorting() throws Exception -->Line_18 $$ List<Integer> usedValues = new ArrayList(controlMap.keySet())[ CD ]
Line_46 $$ for (int i = 0; i < runs; i++) -->Line_51 $$ assertMatchCount(response, levels.size())[ CD ]
Line_39 $$ for (PercolateResponse.Match match : response) -->Line_58 $$ assertThat(match.getIndex().string(), equalTo("my-index"))[ FD ]
Line_46 $$ for (int i = 0; i < runs; i++) -->Line_53 $$ Iterator<Integer> levelIterator = levels.descendingIterator()[ CD ]
Line_46 $$ for (int i = 0; i < runs; i++) -->Line_50 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchQuery("field1", value), fieldValueFactorFunction("level")).boostMode(CombineFunction.REPLACE)).execute().actionGet()[ CD ]
Line_23 $$ int size = randomIntBetween(1, 50)-->Line_35 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()[ FD ]
Line_2 $$ public void testPercolateScoreAndSorting() throws Exception -->Line_22 $$ for (int i = 0; i < runs; i++) [ CD ]
Line_35 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()-->Line_51 $$ assertMatchCount(response, levels.size())[ FD ]
Line_7 $$ Map<Integer, NavigableSet<Integer>> controlMap = new HashMap()-->Line_13 $$ if (!controlMap.containsKey(value)) [ FD ]
Line_7 $$ Map<Integer, NavigableSet<Integer>> controlMap = new HashMap()-->Line_18 $$ List<Integer> usedValues = new ArrayList(controlMap.keySet())[ FD ]
Line_38 $$ int expectedId = (int) (numQueries - 1)-->Line_40 $$ assertThat(match.getId().string(), equalTo(Integer.toString(expectedId)))[ FD ]
Line_8 $$ long numQueries = randomIntBetween(100, 250)-->Line_10 $$ for (int i = 0; i < numQueries; i++) [ FD ]
Line_13 $$ if (!controlMap.containsKey(value)) -->Line_14 $$ controlMap.put(value, new TreeSet<Integer>())[ CD ]
Line_28 $$ String id = response.getMatches()[j].getId().string()-->Line_29 $$ assertThat(Integer.valueOf(id), equalTo((int) response.getMatches()[j].getScore()))[ FD ]
Line_10 $$ for (int i = 0; i < numQueries; i++) -->Line_12 $$ client().prepareIndex("my-index", PercolatorService.TYPE_NAME, Integer.toString(i)).setSource(jsonBuilder().startObject().field("query", matchAllQuery()).field("level", i).field("field1", value).endObject()).execute().actionGet()[ CD ]
Line_2 $$ public void testPercolateScoreAndSorting() throws Exception -->Line_10 $$ for (int i = 0; i < numQueries; i++) [ CD ]
Line_55 $$ int controlLevel = levelIterator.next()-->Line_56 $$ assertThat(match.getId().string(), equalTo(Integer.toString(controlLevel)))[ FD ]
Line_24 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()-->Line_29 $$ assertThat(Integer.valueOf(id), equalTo((int) response.getMatches()[j].getScore()))[ FD ]
Line_34 $$ int size = randomIntBetween(1, 10)-->Line_35 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(), fieldValueFactorFunction("level"))).execute().actionGet()[ FD ]
Line_7 $$ Map<Integer, NavigableSet<Integer>> controlMap = new HashMap()-->Line_14 $$ controlMap.put(value, new TreeSet<Integer>())[ FD ]
Line_2 $$ public void testPercolateScoreAndSorting() throws Exception -->Line_19 $$ refresh()[ CD ]
Line_49 $$ int size = randomIntBetween(1, levels.size())-->Line_50 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchQuery("field1", value), fieldValueFactorFunction("level")).boostMode(CombineFunction.REPLACE)).execute().actionGet()[ FD ]
Line_22 $$ for (int i = 0; i < runs; i++) -->Line_25 $$ assertMatchCount(response, numQueries)[ CD ]
Line_11 $$ int value = randomInt(10)-->Line_50 $$ PercolateResponse response = client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field", "value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchQuery("field1", value), fieldValueFactorFunction("level")).boostMode(CombineFunction.REPLACE)).execute().actionGet()[ FD ]
Line_49 $$ int size = randomIntBetween(1, levels.size())-->Line_52 $$ assertThat(response.getMatches().length, equalTo(Math.min(levels.size(), size)))[ FD ]
Line_39 $$ for (PercolateResponse.Match match : response) -->Line_41 $$ assertThat(match.getScore(), equalTo((float) expectedId))[ FD ]
Line_10 $$ for (int i = 0; i < numQueries; i++) -->Line_16 $$ controlMap.get(value).add(i)[ CD ]
Line_23 $$ int size = randomIntBetween(1, 50)-->Line_37 $$ assertThat(response.getMatches().length, equalTo(size))[ FD ]
