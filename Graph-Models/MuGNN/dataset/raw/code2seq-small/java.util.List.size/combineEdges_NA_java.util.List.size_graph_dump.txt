Line_2 $$ public static List<Edge> combineEdges(List<Edge> edges) -->Line_3 $$ List<Edge> ret = new ArrayList<Edge>()[ CD ]
Line_3 $$ List<Edge> ret = new ArrayList<Edge>()-->Line_9 $$ ret.set(i, current.combine(edge))[ FD ]
Line_5 $$ boolean found = false-->Line_14 $$ if (!found) [ FD ]
Line_14 $$ if (!found) -->Line_15 $$ ret.add(edge)[ CD ]
Line_3 $$ List<Edge> ret = new ArrayList<Edge>()-->Line_7 $$ Edge current = ret.get(i)[ FD ]
Line_5 $$ boolean found = false-->Line_10 $$ found = true[ FD ]
Line_7 $$ Edge current = ret.get(i)-->Line_8 $$ if (edge.sameAs(current)) [ FD ]
Line_6 $$ for (int i = 0; i < ret.size(); i++) -->Line_7 $$ Edge current = ret.get(i)[ CD ]
Line_4 $$ for (Edge edge : edges) -->Line_9 $$ ret.set(i, current.combine(edge))[ FD ]
Line_4 $$ for (Edge edge : edges) -->Line_15 $$ ret.add(edge)[ FD ]
Line_10 $$ found = true-->Line_14 $$ if (!found) [ FD ]
Line_7 $$ Edge current = ret.get(i)-->Line_9 $$ ret.set(i, current.combine(edge))[ FD ]
Line_3 $$ List<Edge> ret = new ArrayList<Edge>()-->Line_15 $$ ret.add(edge)[ FD ]
Line_6 $$ for (int i = 0; i < ret.size(); i++) -->Line_9 $$ ret.set(i, current.combine(edge))[ FD ]
Line_3 $$ List<Edge> ret = new ArrayList<Edge>()-->Line_6 $$ for (int i = 0; i < ret.size(); i++) [ FD ]
Line_6 $$ for (int i = 0; i < ret.size(); i++) -->Line_8 $$ if (edge.sameAs(current)) [ CD ]
Line_8 $$ if (edge.sameAs(current)) -->Line_10 $$ found = true[ CD ]
Line_4 $$ for (Edge edge : edges) -->Line_8 $$ if (edge.sameAs(current)) [ FD ]
Line_6 $$ for (int i = 0; i < ret.size(); i++) -->Line_7 $$ Edge current = ret.get(i)[ FD ]
Line_8 $$ if (edge.sameAs(current)) -->Line_9 $$ ret.set(i, current.combine(edge))[ CD ]
Line_2 $$ public static List<Edge> combineEdges(List<Edge> edges) -->Line_18 $$ return ret[ CD ]
