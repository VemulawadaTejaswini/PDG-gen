Line_2 $$ public void testQuerySubclassAttribute() -->Line_16 $$ assertEquals(result.size(), 1)[ CD ]
Line_2 $$ public void testQuerySubclassAttribute() -->Line_6 $$ p.setName("Emmanuel")[ CD ]
Line_9 $$ Employee q = new Employee()-->Line_24 $$ s.delete(q)[ FD ]
Line_2 $$ public void testQuerySubclassAttribute() -->Line_7 $$ p.setSex('M')[ CD ]
Line_2 $$ public void testQuerySubclassAttribute() -->Line_11 $$ q.setSex('M')[ CD ]
Line_3 $$ Session s = openSession()-->Line_20 $$ result = s.createCriteria(Person.class).add(Property.forName("salary").gt(new BigDecimal(100))).list()[ FD ]
Line_9 $$ Employee q = new Employee()-->Line_13 $$ q.setSalary(new BigDecimal(1000))[ FD ]
Line_2 $$ public void testQuerySubclassAttribute() -->Line_4 $$ Transaction t = s.beginTransaction()[ CD ]
Line_15 $$ List result = s.createQuery("from Person where salary > 100").list()-->Line_17 $$ assertSame(result.get(0), q)[ FD ]
Line_2 $$ public void testQuerySubclassAttribute() -->Line_12 $$ q.setTitle("Mr")[ CD ]
Line_15 $$ List result = s.createQuery("from Person where salary > 100").list()-->Line_21 $$ assertEquals(result.size(), 1)[ FD ]
Line_18 $$ result = s.createQuery("from Person where salary > 100 or name like 'E%'").list()-->Line_21 $$ assertEquals(result.size(), 1)[ FD ]
Line_15 $$ List result = s.createQuery("from Person where salary > 100").list()-->Line_19 $$ assertEquals(result.size(), 2)[ FD ]
Line_20 $$ result = s.createCriteria(Person.class).add(Property.forName("salary").gt(new BigDecimal(100))).list()-->Line_22 $$ assertSame(result.get(0), q)[ FD ]
Line_2 $$ public void testQuerySubclassAttribute() -->Line_23 $$ s.delete(p)[ CD ]
Line_9 $$ Employee q = new Employee()-->Line_11 $$ q.setSex('M')[ FD ]
Line_3 $$ Session s = openSession()-->Line_14 $$ s.persist(q)[ FD ]
Line_3 $$ Session s = openSession()-->Line_23 $$ s.delete(p)[ FD ]
Line_15 $$ List result = s.createQuery("from Person where salary > 100").list()-->Line_20 $$ result = s.createCriteria(Person.class).add(Property.forName("salary").gt(new BigDecimal(100))).list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_24 $$ s.delete(q)[ FD ]
Line_9 $$ Employee q = new Employee()-->Line_22 $$ assertSame(result.get(0), q)[ FD ]
Line_2 $$ public void testQuerySubclassAttribute() -->Line_8 $$ s.persist(p)[ CD ]
Line_9 $$ Employee q = new Employee()-->Line_12 $$ q.setTitle("Mr")[ FD ]
Line_3 $$ Session s = openSession()-->Line_15 $$ List result = s.createQuery("from Person where salary > 100").list()[ FD ]
Line_2 $$ public void testQuerySubclassAttribute() -->Line_14 $$ s.persist(q)[ CD ]
Line_2 $$ public void testQuerySubclassAttribute() -->Line_22 $$ assertSame(result.get(0), q)[ CD ]
Line_5 $$ Person p = new Person()-->Line_6 $$ p.setName("Emmanuel")[ FD ]
Line_2 $$ public void testQuerySubclassAttribute() -->Line_5 $$ Person p = new Person()[ CD ]
Line_2 $$ public void testQuerySubclassAttribute() -->Line_10 $$ q.setName("Steve")[ CD ]
Line_5 $$ Person p = new Person()-->Line_7 $$ p.setSex('M')[ FD ]
Line_2 $$ public void testQuerySubclassAttribute() -->Line_25 $$ t.commit()[ CD ]
Line_9 $$ Employee q = new Employee()-->Line_10 $$ q.setName("Steve")[ FD ]
Line_9 $$ Employee q = new Employee()-->Line_17 $$ assertSame(result.get(0), q)[ FD ]
Line_18 $$ result = s.createQuery("from Person where salary > 100 or name like 'E%'").list()-->Line_20 $$ result = s.createCriteria(Person.class).add(Property.forName("salary").gt(new BigDecimal(100))).list()[ FD ]
Line_18 $$ result = s.createQuery("from Person where salary > 100 or name like 'E%'").list()-->Line_22 $$ assertSame(result.get(0), q)[ FD ]
Line_20 $$ result = s.createCriteria(Person.class).add(Property.forName("salary").gt(new BigDecimal(100))).list()-->Line_21 $$ assertEquals(result.size(), 1)[ FD ]
Line_2 $$ public void testQuerySubclassAttribute() -->Line_13 $$ q.setSalary(new BigDecimal(1000))[ CD ]
Line_3 $$ Session s = openSession()-->Line_26 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ Transaction t = s.beginTransaction()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_25 $$ t.commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_18 $$ result = s.createQuery("from Person where salary > 100 or name like 'E%'").list()[ FD ]
Line_2 $$ public void testQuerySubclassAttribute() -->Line_19 $$ assertEquals(result.size(), 2)[ CD ]
Line_5 $$ Person p = new Person()-->Line_8 $$ s.persist(p)[ FD ]
Line_2 $$ public void testQuerySubclassAttribute() -->Line_24 $$ s.delete(q)[ CD ]
Line_18 $$ result = s.createQuery("from Person where salary > 100 or name like 'E%'").list()-->Line_19 $$ assertEquals(result.size(), 2)[ FD ]
Line_2 $$ public void testQuerySubclassAttribute() -->Line_3 $$ Session s = openSession()[ CD ]
Line_2 $$ public void testQuerySubclassAttribute() -->Line_21 $$ assertEquals(result.size(), 1)[ CD ]
Line_2 $$ public void testQuerySubclassAttribute() -->Line_26 $$ s.close()[ CD ]
Line_2 $$ public void testQuerySubclassAttribute() -->Line_15 $$ List result = s.createQuery("from Person where salary > 100").list()[ CD ]
Line_15 $$ List result = s.createQuery("from Person where salary > 100").list()-->Line_16 $$ assertEquals(result.size(), 1)[ FD ]
Line_2 $$ public void testQuerySubclassAttribute() -->Line_18 $$ result = s.createQuery("from Person where salary > 100 or name like 'E%'").list()[ CD ]
Line_15 $$ List result = s.createQuery("from Person where salary > 100").list()-->Line_18 $$ result = s.createQuery("from Person where salary > 100 or name like 'E%'").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_8 $$ s.persist(p)[ FD ]
Line_5 $$ Person p = new Person()-->Line_23 $$ s.delete(p)[ FD ]
Line_2 $$ public void testQuerySubclassAttribute() -->Line_9 $$ Employee q = new Employee()[ CD ]
Line_9 $$ Employee q = new Employee()-->Line_14 $$ s.persist(q)[ FD ]
Line_2 $$ public void testQuerySubclassAttribute() -->Line_17 $$ assertSame(result.get(0), q)[ CD ]
Line_15 $$ List result = s.createQuery("from Person where salary > 100").list()-->Line_22 $$ assertSame(result.get(0), q)[ FD ]
Line_2 $$ public void testQuerySubclassAttribute() -->Line_20 $$ result = s.createCriteria(Person.class).add(Property.forName("salary").gt(new BigDecimal(100))).list()[ CD ]
