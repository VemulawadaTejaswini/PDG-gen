Line_18 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_19 $$ cache.put(i, Integer.toString(i))[ CD ]
Line_18 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_38 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) [ FD ]
Line_4 $$ Cache<Integer, String> cache = new Cache<Integer, String>() -->Line_29 $$ cache.refresh()[ FD ]
Line_3 $$ AtomicLong now = new AtomicLong()-->Line_8 $$ return now.get()[ FD ]
Line_4 $$ Cache<Integer, String> cache = new Cache<Integer, String>() -->Line_30 $$ assertEquals(numberOfEntries, cache.count())[ FD ]
Line_26 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_31 $$ for (int i = 0; i < evictedKeys.size(); i++) [ FD ]
Line_26 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_27 $$ cache.get(i)[ FD ]
Line_2 $$ public void testExpirationAfterWrite() -->Line_22 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) [ CD ]
Line_18 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_22 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) [ FD ]
Line_18 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_26 $$ for (int i = 0; i < numberOfEntries; i++) [ FD ]
Line_2 $$ public void testExpirationAfterWrite() -->Line_13 $$ cache.setRemovalListener( notification -> [ CD ]
Line_4 $$ Cache<Integer, String> cache = new Cache<Integer, String>() -->Line_27 $$ cache.get(i)[ FD ]
Line_22 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) -->Line_31 $$ for (int i = 0; i < evictedKeys.size(); i++) [ FD ]
Line_4 $$ Cache<Integer, String> cache = new Cache<Integer, String>() -->Line_23 $$ cache.put(i, Integer.toString(i))[ FD ]
Line_31 $$ for (int i = 0; i < evictedKeys.size(); i++) -->Line_39 $$ assertTrue(remainingKeys.contains(i))[ FD ]
Line_18 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_31 $$ for (int i = 0; i < evictedKeys.size(); i++) [ FD ]
Line_4 $$ Cache<Integer, String> cache = new Cache<Integer, String>() -->Line_35 $$ for (Integer key : cache.keys()) [ FD ]
Line_26 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_38 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) [ FD ]
Line_26 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_39 $$ assertTrue(remainingKeys.contains(i))[ FD ]
Line_22 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) -->Line_26 $$ for (int i = 0; i < numberOfEntries; i++) [ FD ]
Line_2 $$ public void testExpirationAfterWrite() -->Line_11 $$ cache.setExpireAfterWrite(1)[ CD ]
Line_2 $$ public void testExpirationAfterWrite() -->Line_26 $$ for (int i = 0; i < numberOfEntries; i++) [ CD ]
Line_26 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_32 $$ assertEquals(i, (int) evictedKeys.get(i))[ FD ]
Line_3 $$ AtomicLong now = new AtomicLong()-->Line_25 $$ now.set(2)[ FD ]
Line_2 $$ public void testExpirationAfterWrite() -->Line_29 $$ cache.refresh()[ CD ]
Line_2 $$ public void testExpirationAfterWrite() -->Line_4 $$ Cache<Integer, String> cache = new Cache<Integer, String>() [ CD ]
Line_2 $$ public void testExpirationAfterWrite() -->Line_18 $$ for (int i = 0; i < numberOfEntries; i++) [ CD ]
Line_3 $$ AtomicLong now = new AtomicLong()-->Line_21 $$ now.set(1)[ FD ]
Line_4 $$ Cache<Integer, String> cache = new Cache<Integer, String>() -->Line_19 $$ cache.put(i, Integer.toString(i))[ FD ]
Line_18 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_39 $$ assertTrue(remainingKeys.contains(i))[ FD ]
Line_2 $$ public void testExpirationAfterWrite() -->Line_17 $$ now.set(0)[ CD ]
Line_31 $$ for (int i = 0; i < evictedKeys.size(); i++) -->Line_32 $$ assertEquals(i, (int) evictedKeys.get(i))[ FD ]
Line_4 $$ Cache<Integer, String> cache = new Cache<Integer, String>() -->Line_11 $$ cache.setExpireAfterWrite(1)[ FD ]
Line_2 $$ public void testExpirationAfterWrite() -->Line_21 $$ now.set(1)[ CD ]
Line_22 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) -->Line_38 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) [ FD ]
Line_22 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) -->Line_27 $$ cache.get(i)[ FD ]
Line_22 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) -->Line_39 $$ assertTrue(remainingKeys.contains(i))[ FD ]
Line_18 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_32 $$ assertEquals(i, (int) evictedKeys.get(i))[ FD ]
Line_18 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_27 $$ cache.get(i)[ FD ]
Line_38 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) -->Line_39 $$ assertTrue(remainingKeys.contains(i))[ CD ]
Line_31 $$ for (int i = 0; i < evictedKeys.size(); i++) -->Line_38 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) [ FD ]
Line_2 $$ public void testExpirationAfterWrite() -->Line_38 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) [ CD ]
Line_2 $$ public void testExpirationAfterWrite() -->Line_3 $$ AtomicLong now = new AtomicLong()[ CD ]
Line_18 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_23 $$ cache.put(i, Integer.toString(i))[ FD ]
Line_3 $$ AtomicLong now = new AtomicLong()-->Line_17 $$ now.set(0)[ FD ]
Line_4 $$ Cache<Integer, String> cache = new Cache<Integer, String>() -->Line_13 $$ cache.setRemovalListener( notification -> [ FD ]
Line_22 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) -->Line_23 $$ cache.put(i, Integer.toString(i))[ CD ]
Line_26 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_27 $$ cache.get(i)[ CD ]
Line_2 $$ public void testExpirationAfterWrite() -->Line_30 $$ assertEquals(numberOfEntries, cache.count())[ CD ]
Line_22 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) -->Line_32 $$ assertEquals(i, (int) evictedKeys.get(i))[ FD ]
Line_38 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) -->Line_39 $$ assertTrue(remainingKeys.contains(i))[ FD ]
Line_18 $$ for (int i = 0; i < numberOfEntries; i++) -->Line_19 $$ cache.put(i, Integer.toString(i))[ FD ]
Line_2 $$ public void testExpirationAfterWrite() -->Line_25 $$ now.set(2)[ CD ]
Line_31 $$ for (int i = 0; i < evictedKeys.size(); i++) -->Line_32 $$ assertEquals(i, (int) evictedKeys.get(i))[ CD ]
Line_2 $$ public void testExpirationAfterWrite() -->Line_31 $$ for (int i = 0; i < evictedKeys.size(); i++) [ CD ]
Line_4 $$ Cache<Integer, String> cache = new Cache<Integer, String>() -->Line_8 $$ return now.get()[ CD ]
Line_22 $$ for (int i = numberOfEntries; i < 2 * numberOfEntries; i++) -->Line_23 $$ cache.put(i, Integer.toString(i))[ FD ]
