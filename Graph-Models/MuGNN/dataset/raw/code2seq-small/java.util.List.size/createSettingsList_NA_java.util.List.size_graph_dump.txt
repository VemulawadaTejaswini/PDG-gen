Line_117 $$ if (!DumbService.isDumb(project)) -->Line_118 $$ populateWithDynamicRunners(result, wrappedExisting, project, manager, selectedConfiguration)[ CD ]
Line_56 $$ result.add(new ItemWrapper<ExecutionTarget>(eachTarget, isFirst) -->Line_74 $$ ExecutionTargetManager.setActiveTarget(project, getValue())[ CD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_118 $$ populateWithDynamicRunners(result, wrappedExisting, project, manager, selectedConfiguration)[ FD ]
Line_56 $$ result.add(new ItemWrapper<ExecutionTarget>(eachTarget, isFirst) -->Line_107 $$ final ItemWrapper wrapped = ItemWrapper.wrap(project, configuration)[ FD ]
Line_88 $$ if (!(type instanceof UnknownConfigurationType)) -->Line_89 $$ Map<String, List<RunnerAndConfigurationSettings>> structure = manager.getStructure(type)[ CD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_19 $$ if (new EditConfigurationsDialog(project) [ CD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_74 $$ ExecutionTargetManager.setActiveTarget(project, getValue())[ FD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_23 $$ setOKButtonText(executor.getStartActionText())[ FD ]
Line_52 $$ if (selectedConfiguration != null) -->Line_54 $$ final ExecutionTarget activeTarget = ExecutionTargetManager.getActiveTarget(project)[ CD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_117 $$ if (!DumbService.isDumb(project)) [ FD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_29 $$ ApplicationManager.getApplication().invokeLater(new Runnable() [ FD ]
Line_4 $$ if (createEditAction) -->Line_48 $$ result.add(edit)[ CD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_51 $$ final RunnerAndConfigurationSettings selectedConfiguration = manager.getSelectedConfiguration()[ CD ]
Line_56 $$ result.add(new ItemWrapper<ExecutionTarget>(eachTarget, isFirst) -->Line_64 $$ return getValue().getIcon()[ CD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_75 $$ ExecutionUtil.runConfiguration(selectedConfiguration, executor)[ FD ]
Line_56 $$ result.add(new ItemWrapper<ExecutionTarget>(eachTarget, isFirst) -->Line_74 $$ ExecutionTargetManager.setActiveTarget(project, getValue())[ FD ]
Line_56 $$ result.add(new ItemWrapper<ExecutionTarget>(eachTarget, isFirst) -->Line_118 $$ populateWithDynamicRunners(result, wrappedExisting, project, manager, selectedConfiguration)[ FD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_52 $$ if (selectedConfiguration != null) [ CD ]
Line_19 $$ if (new EditConfigurationsDialog(project) -->Line_26 $$ super.init()[ CD ]
Line_95 $$ if (key != null) -->Line_97 $$ if (isSelected) [ CD ]
Line_33 $$ RunnerAndConfigurationSettings configuration = RunManager.getInstance(project).getSelectedConfiguration()-->Line_107 $$ final ItemWrapper wrapped = ItemWrapper.wrap(project, configuration)[ FD ]
Line_29 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_33 $$ RunnerAndConfigurationSettings configuration = RunManager.getInstance(project).getSelectedConfiguration()[ CD ]
Line_56 $$ result.add(new ItemWrapper<ExecutionTarget>(eachTarget, isFirst) -->Line_69 $$ return getValue().getDisplayName()[ CD ]
Line_4 $$ if (createEditAction) -->Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) [ CD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_4 $$ if (createEditAction) [ CD ]
Line_19 $$ if (new EditConfigurationsDialog(project) -->Line_29 $$ ApplicationManager.getApplication().invokeLater(new Runnable() [ CD ]
Line_19 $$ if (new EditConfigurationsDialog(project) -->Line_24 $$ setOKButtonIcon(executor.getIcon())[ CD ]
Line_3 $$ List<ItemWrapper> result = new ArrayList<ItemWrapper>()-->Line_56 $$ result.add(new ItemWrapper<ExecutionTarget>(eachTarget, isFirst) [ FD ]
Line_19 $$ if (new EditConfigurationsDialog(project) -->Line_23 $$ setOKButtonText(executor.getStartActionText())[ CD ]
Line_4 $$ if (createEditAction) -->Line_47 $$ edit.setMnemonic(0)[ CD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_117 $$ if (!DumbService.isDumb(project)) [ FD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_44 $$ return true[ CD ]
Line_33 $$ RunnerAndConfigurationSettings configuration = RunManager.getInstance(project).getSelectedConfiguration()-->Line_35 $$ ExecutionUtil.runConfiguration(configuration, executor)[ FD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_29 $$ ApplicationManager.getApplication().invokeLater(new Runnable() [ FD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_55 $$ for (ExecutionTarget eachTarget : ExecutionTargetManager.getTargetsToChooseFor(project, selectedConfiguration)) [ FD ]
Line_3 $$ List<ItemWrapper> result = new ArrayList<ItemWrapper>()-->Line_104 $$ result.add(folderWrapper)[ FD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_118 $$ populateWithDynamicRunners(result, wrappedExisting, project, manager, selectedConfiguration)[ FD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_107 $$ final ItemWrapper wrapped = ItemWrapper.wrap(project, configuration)[ FD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_33 $$ RunnerAndConfigurationSettings configuration = RunManager.getInstance(project).getSelectedConfiguration()[ FD ]
Line_3 $$ List<ItemWrapper> result = new ArrayList<ItemWrapper>()-->Line_121 $$ return result.toArray(new ItemWrapper[result.size()])[ FD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_33 $$ RunnerAndConfigurationSettings configuration = RunManager.getInstance(project).getSelectedConfiguration()[ FD ]
Line_3 $$ List<ItemWrapper> result = new ArrayList<ItemWrapper>()-->Line_48 $$ result.add(edit)[ FD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_50 $$ RunManagerEx manager = RunManagerEx.getInstanceEx(project)[ CD ]
Line_33 $$ RunnerAndConfigurationSettings configuration = RunManager.getInstance(project).getSelectedConfiguration()-->Line_111 $$ wrappedExisting.put(configuration, wrapped)[ FD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_50 $$ RunManagerEx manager = RunManagerEx.getInstanceEx(project)[ FD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_55 $$ for (ExecutionTarget eachTarget : ExecutionTargetManager.getTargetsToChooseFor(project, selectedConfiguration)) [ FD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_121 $$ return result.toArray(new ItemWrapper[result.size()])[ CD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_120 $$ result.addAll(wrappedExisting.values())[ CD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_54 $$ final ExecutionTarget activeTarget = ExecutionTargetManager.getActiveTarget(project)[ FD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_9 $$ return AllIcons.Actions.EditSource[ CD ]
Line_95 $$ if (key != null) -->Line_96 $$ boolean isSelected = entry.getValue().contains(selectedConfiguration)[ CD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_35 $$ ExecutionUtil.runConfiguration(configuration, executor)[ FD ]
Line_29 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_34 $$ if (configuration != null) [ CD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_74 $$ ExecutionTargetManager.setActiveTarget(project, getValue())[ FD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_54 $$ final ExecutionTarget activeTarget = ExecutionTargetManager.getActiveTarget(project)[ FD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_24 $$ setOKButtonIcon(executor.getIcon())[ FD ]
Line_56 $$ result.add(new ItemWrapper<ExecutionTarget>(eachTarget, isFirst) -->Line_80 $$ return true[ CD ]
Line_33 $$ RunnerAndConfigurationSettings configuration = RunManager.getInstance(project).getSelectedConfiguration()-->Line_108 $$ if (configuration == selectedConfiguration) [ FD ]
Line_56 $$ result.add(new ItemWrapper<ExecutionTarget>(eachTarget, isFirst) -->Line_117 $$ if (!DumbService.isDumb(project)) [ FD ]
Line_3 $$ List<ItemWrapper> result = new ArrayList<ItemWrapper>()-->Line_118 $$ populateWithDynamicRunners(result, wrappedExisting, project, manager, selectedConfiguration)[ FD ]
Line_56 $$ result.add(new ItemWrapper<ExecutionTarget>(eachTarget, isFirst) -->Line_75 $$ ExecutionUtil.runConfiguration(selectedConfiguration, executor)[ CD ]
Line_34 $$ if (configuration != null) -->Line_35 $$ ExecutionUtil.runConfiguration(configuration, executor)[ CD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_48 $$ result.add(edit)[ FD ]
Line_108 $$ if (configuration == selectedConfiguration) -->Line_109 $$ wrapped.setMnemonic(1)[ CD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_107 $$ final ItemWrapper wrapped = ItemWrapper.wrap(project, configuration)[ FD ]
Line_56 $$ result.add(new ItemWrapper<ExecutionTarget>(eachTarget, isFirst) -->Line_75 $$ ExecutionUtil.runConfiguration(selectedConfiguration, executor)[ FD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_50 $$ RunManagerEx manager = RunManagerEx.getInstanceEx(project)[ FD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_3 $$ List<ItemWrapper> result = new ArrayList<ItemWrapper>()[ CD ]
Line_33 $$ RunnerAndConfigurationSettings configuration = RunManager.getInstance(project).getSelectedConfiguration()-->Line_34 $$ if (configuration != null) [ FD ]
Line_95 $$ if (key != null) -->Line_104 $$ result.add(folderWrapper)[ CD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_117 $$ if (!DumbService.isDumb(project)) [ CD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_47 $$ edit.setMnemonic(0)[ FD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_14 $$ return UIUtil.removeMnemonic(ActionsBundle.message("action.editRunConfigurations.text"))[ CD ]
Line_95 $$ if (key != null) -->Line_101 $$ if (isSelected) [ CD ]
Line_3 $$ List<ItemWrapper> result = new ArrayList<ItemWrapper>()-->Line_120 $$ result.addAll(wrappedExisting.values())[ FD ]
Line_101 $$ if (isSelected) -->Line_102 $$ folderWrapper.setMnemonic(1)[ CD ]
