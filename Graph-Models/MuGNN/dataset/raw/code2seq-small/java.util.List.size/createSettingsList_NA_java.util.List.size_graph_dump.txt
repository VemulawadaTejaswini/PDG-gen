Line_23 $$ RunnerAndConfigurationSettings configuration = RunManager.getInstance(project).getSelectedConfiguration()-->Line_87 $$ if (configuration == selectedConfiguration) [ FD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_97 $$ populateWithDynamicRunners(result, wrappedExisting, project, manager, selectedConfiguration)[ FD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_43 $$ for (ExecutionTarget eachTarget : ExecutionTargetManager.getTargetsToChooseFor(project, selectedConfiguration)) [ FD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_35 $$ edit.setMnemonic(0)[ FD ]
Line_24 $$ if (configuration != null) -->Line_25 $$ ExecutionUtil.runConfiguration(configuration, executor)[ CD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_86 $$ final ItemWrapper wrapped = ItemWrapper.wrap(project, configuration)[ FD ]
Line_21 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_23 $$ RunnerAndConfigurationSettings configuration = RunManager.getInstance(project).getSelectedConfiguration()[ CD ]
Line_44 $$ result.add(new ItemWrapper<ExecutionTarget>(eachTarget, isFirst) -->Line_55 $$ ExecutionTargetManager.setActiveTarget(project, getValue())[ FD ]
Line_23 $$ RunnerAndConfigurationSettings configuration = RunManager.getInstance(project).getSelectedConfiguration()-->Line_25 $$ ExecutionUtil.runConfiguration(configuration, executor)[ FD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_13 $$ if (new EditConfigurationsDialog(project) [ CD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_32 $$ return true[ CD ]
Line_44 $$ result.add(new ItemWrapper<ExecutionTarget>(eachTarget, isFirst) -->Line_56 $$ ExecutionUtil.runConfiguration(selectedConfiguration, executor)[ FD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_40 $$ if (selectedConfiguration != null) [ CD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_38 $$ RunManagerEx manager = RunManagerEx.getInstanceEx(project)[ FD ]
Line_13 $$ if (new EditConfigurationsDialog(project) -->Line_18 $$ super.init()[ CD ]
Line_3 $$ List<ItemWrapper> result = new ArrayList<ItemWrapper>()-->Line_100 $$ return result.toArray(new ItemWrapper[result.size()])[ FD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_25 $$ ExecutionUtil.runConfiguration(configuration, executor)[ FD ]
Line_74 $$ if (key != null) -->Line_75 $$ boolean isSelected = entry.getValue().contains(selectedConfiguration)[ CD ]
Line_44 $$ result.add(new ItemWrapper<ExecutionTarget>(eachTarget, isFirst) -->Line_59 $$ return true[ CD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_96 $$ if (!DumbService.isDumb(project)) [ CD ]
Line_13 $$ if (new EditConfigurationsDialog(project) -->Line_15 $$ setOKButtonText(executor.getStartActionText())[ CD ]
Line_4 $$ if (createEditAction) -->Line_35 $$ edit.setMnemonic(0)[ CD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_10 $$ return UIUtil.removeMnemonic(ActionsBundle.message("action.editRunConfigurations.text"))[ CD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_21 $$ ApplicationManager.getApplication().invokeLater(new Runnable() [ FD ]
Line_23 $$ RunnerAndConfigurationSettings configuration = RunManager.getInstance(project).getSelectedConfiguration()-->Line_86 $$ final ItemWrapper wrapped = ItemWrapper.wrap(project, configuration)[ FD ]
Line_4 $$ if (createEditAction) -->Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) [ CD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_43 $$ for (ExecutionTarget eachTarget : ExecutionTargetManager.getTargetsToChooseFor(project, selectedConfiguration)) [ FD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_55 $$ ExecutionTargetManager.setActiveTarget(project, getValue())[ FD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_42 $$ final ExecutionTarget activeTarget = ExecutionTargetManager.getActiveTarget(project)[ FD ]
Line_87 $$ if (configuration == selectedConfiguration) -->Line_88 $$ wrapped.setMnemonic(1)[ CD ]
Line_3 $$ List<ItemWrapper> result = new ArrayList<ItemWrapper>()-->Line_97 $$ populateWithDynamicRunners(result, wrappedExisting, project, manager, selectedConfiguration)[ FD ]
Line_40 $$ if (selectedConfiguration != null) -->Line_42 $$ final ExecutionTarget activeTarget = ExecutionTargetManager.getActiveTarget(project)[ CD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_23 $$ RunnerAndConfigurationSettings configuration = RunManager.getInstance(project).getSelectedConfiguration()[ FD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_16 $$ setOKButtonIcon(executor.getIcon())[ FD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_38 $$ RunManagerEx manager = RunManagerEx.getInstanceEx(project)[ CD ]
Line_44 $$ result.add(new ItemWrapper<ExecutionTarget>(eachTarget, isFirst) -->Line_56 $$ ExecutionUtil.runConfiguration(selectedConfiguration, executor)[ CD ]
Line_80 $$ if (isSelected) -->Line_81 $$ folderWrapper.setMnemonic(1)[ CD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_21 $$ ApplicationManager.getApplication().invokeLater(new Runnable() [ FD ]
Line_74 $$ if (key != null) -->Line_76 $$ if (isSelected) [ CD ]
Line_4 $$ if (createEditAction) -->Line_36 $$ result.add(edit)[ CD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_86 $$ final ItemWrapper wrapped = ItemWrapper.wrap(project, configuration)[ FD ]
Line_67 $$ if (!(type instanceof UnknownConfigurationType)) -->Line_68 $$ Map<String, List<RunnerAndConfigurationSettings>> structure = manager.getStructure(type)[ CD ]
Line_44 $$ result.add(new ItemWrapper<ExecutionTarget>(eachTarget, isFirst) -->Line_96 $$ if (!DumbService.isDumb(project)) [ FD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_97 $$ populateWithDynamicRunners(result, wrappedExisting, project, manager, selectedConfiguration)[ FD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_23 $$ RunnerAndConfigurationSettings configuration = RunManager.getInstance(project).getSelectedConfiguration()[ FD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_15 $$ setOKButtonText(executor.getStartActionText())[ FD ]
Line_74 $$ if (key != null) -->Line_80 $$ if (isSelected) [ CD ]
Line_44 $$ result.add(new ItemWrapper<ExecutionTarget>(eachTarget, isFirst) -->Line_97 $$ populateWithDynamicRunners(result, wrappedExisting, project, manager, selectedConfiguration)[ FD ]
Line_96 $$ if (!DumbService.isDumb(project)) -->Line_97 $$ populateWithDynamicRunners(result, wrappedExisting, project, manager, selectedConfiguration)[ CD ]
Line_44 $$ result.add(new ItemWrapper<ExecutionTarget>(eachTarget, isFirst) -->Line_49 $$ return getValue().getIcon()[ CD ]
Line_3 $$ List<ItemWrapper> result = new ArrayList<ItemWrapper>()-->Line_99 $$ result.addAll(wrappedExisting.values())[ FD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_56 $$ ExecutionUtil.runConfiguration(selectedConfiguration, executor)[ FD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_38 $$ RunManagerEx manager = RunManagerEx.getInstanceEx(project)[ FD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_4 $$ if (createEditAction) [ CD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_55 $$ ExecutionTargetManager.setActiveTarget(project, getValue())[ FD ]
Line_74 $$ if (key != null) -->Line_83 $$ result.add(folderWrapper)[ CD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_3 $$ List<ItemWrapper> result = new ArrayList<ItemWrapper>()[ CD ]
Line_3 $$ List<ItemWrapper> result = new ArrayList<ItemWrapper>()-->Line_44 $$ result.add(new ItemWrapper<ExecutionTarget>(eachTarget, isFirst) [ FD ]
Line_44 $$ result.add(new ItemWrapper<ExecutionTarget>(eachTarget, isFirst) -->Line_86 $$ final ItemWrapper wrapped = ItemWrapper.wrap(project, configuration)[ FD ]
Line_13 $$ if (new EditConfigurationsDialog(project) -->Line_21 $$ ApplicationManager.getApplication().invokeLater(new Runnable() [ CD ]
Line_44 $$ result.add(new ItemWrapper<ExecutionTarget>(eachTarget, isFirst) -->Line_55 $$ ExecutionTargetManager.setActiveTarget(project, getValue())[ CD ]
Line_13 $$ if (new EditConfigurationsDialog(project) -->Line_16 $$ setOKButtonIcon(executor.getIcon())[ CD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_100 $$ return result.toArray(new ItemWrapper[result.size()])[ CD ]
Line_3 $$ List<ItemWrapper> result = new ArrayList<ItemWrapper>()-->Line_83 $$ result.add(folderWrapper)[ FD ]
Line_21 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_24 $$ if (configuration != null) [ CD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_36 $$ result.add(edit)[ FD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_39 $$ final RunnerAndConfigurationSettings selectedConfiguration = manager.getSelectedConfiguration()[ CD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_7 $$ return AllIcons.Actions.EditSource[ CD ]
Line_23 $$ RunnerAndConfigurationSettings configuration = RunManager.getInstance(project).getSelectedConfiguration()-->Line_24 $$ if (configuration != null) [ FD ]
Line_44 $$ result.add(new ItemWrapper<ExecutionTarget>(eachTarget, isFirst) -->Line_52 $$ return getValue().getDisplayName()[ CD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_42 $$ final ExecutionTarget activeTarget = ExecutionTargetManager.getActiveTarget(project)[ FD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_96 $$ if (!DumbService.isDumb(project)) [ FD ]
Line_2 $$ public static ItemWrapper[] createSettingsList(@NotNull Project project, @NotNull ExecutorProvider executorProvider, boolean createEditAction) -->Line_99 $$ result.addAll(wrappedExisting.values())[ CD ]
Line_23 $$ RunnerAndConfigurationSettings configuration = RunManager.getInstance(project).getSelectedConfiguration()-->Line_90 $$ wrappedExisting.put(configuration, wrapped)[ FD ]
Line_5 $$ ItemWrapper<Void> edit = new ItemWrapper<Void>(null) -->Line_96 $$ if (!DumbService.isDumb(project)) [ FD ]
Line_3 $$ List<ItemWrapper> result = new ArrayList<ItemWrapper>()-->Line_36 $$ result.add(edit)[ FD ]
