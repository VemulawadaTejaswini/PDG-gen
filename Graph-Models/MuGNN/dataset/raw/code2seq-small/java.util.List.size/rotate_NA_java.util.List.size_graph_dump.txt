Line_2 $$ public static <T> List<T> rotate(final List<T> list, int distance) -->Line_7 $$ if (d < 0) [ CD ]
Line_10 $$ if (d == 0) -->Line_11 $$ return list[ CD ]
Line_2 $$ public static <T> List<T> rotate(final List<T> list, int distance) -->Line_3 $$ if (list.isEmpty()) [ CD ]
Line_6 $$ int d = distance % list.size()-->Line_7 $$ if (d < 0) [ FD ]
Line_2 $$ public static <T> List<T> rotate(final List<T> list, int distance) -->Line_6 $$ int d = distance % list.size()[ CD ]
Line_7 $$ if (d < 0) -->Line_8 $$ d += list.size()[ CD ]
Line_2 $$ public static <T> List<T> rotate(final List<T> list, int distance) -->Line_6 $$ int d = distance % list.size()[ FD ]
Line_2 $$ public static <T> List<T> rotate(final List<T> list, int distance) -->Line_10 $$ if (d == 0) [ CD ]
Line_6 $$ int d = distance % list.size()-->Line_10 $$ if (d == 0) [ FD ]
Line_8 $$ d += list.size()-->Line_10 $$ if (d == 0) [ FD ]
Line_2 $$ public static <T> List<T> rotate(final List<T> list, int distance) -->Line_13 $$ return new RotatedList(list, d)[ CD ]
Line_2 $$ public static <T> List<T> rotate(final List<T> list, int distance) -->Line_8 $$ d += list.size()[ FD ]
Line_2 $$ public static <T> List<T> rotate(final List<T> list, int distance) -->Line_3 $$ if (list.isEmpty()) [ FD ]
Line_3 $$ if (list.isEmpty()) -->Line_4 $$ return list[ CD ]
Line_6 $$ int d = distance % list.size()-->Line_8 $$ d += list.size()[ FD ]
