Line_2 $$ protected <C extends Coalescable> void coalesceInternal(BlockingQueue<C> input, List<C> out, int maxItems) throws InterruptedException -->Line_8 $$ maybeSleep(out.size(), average, maxCoalesceWindow, parker)[ CD ]
Line_3 $$ if (input.drainTo(out, maxItems) == 0) -->Line_4 $$ out.add(input.take())[ CD ]
Line_2 $$ protected <C extends Coalescable> void coalesceInternal(BlockingQueue<C> input, List<C> out, int maxItems) throws InterruptedException -->Line_3 $$ if (input.drainTo(out, maxItems) == 0) [ FD ]
Line_2 $$ protected <C extends Coalescable> void coalesceInternal(BlockingQueue<C> input, List<C> out, int maxItems) throws InterruptedException -->Line_3 $$ if (input.drainTo(out, maxItems) == 0) [ CD ]
Line_2 $$ protected <C extends Coalescable> void coalesceInternal(BlockingQueue<C> input, List<C> out, int maxItems) throws InterruptedException -->Line_10 $$ for (int ii = 1; ii < out.size(); ii++) notifyOfSample(out.get(ii).timestampNanos())[ CD ]
Line_2 $$ protected <C extends Coalescable> void coalesceInternal(BlockingQueue<C> input, List<C> out, int maxItems) throws InterruptedException -->Line_10 $$ notifyOfSample(out.get(ii).timestampNanos())[ FD ]
Line_6 $$ long average = notifyOfSample(out.get(0).timestampNanos())-->Line_7 $$ debugGap(average)[ FD ]
Line_6 $$ long average = notifyOfSample(out.get(0).timestampNanos())-->Line_8 $$ maybeSleep(out.size(), average, maxCoalesceWindow, parker)[ FD ]
Line_2 $$ protected <C extends Coalescable> void coalesceInternal(BlockingQueue<C> input, List<C> out, int maxItems) throws InterruptedException -->Line_9 $$ input.drainTo(out, maxItems - out.size())[ CD ]
Line_2 $$ protected <C extends Coalescable> void coalesceInternal(BlockingQueue<C> input, List<C> out, int maxItems) throws InterruptedException -->Line_4 $$ out.add(input.take())[ FD ]
Line_2 $$ protected <C extends Coalescable> void coalesceInternal(BlockingQueue<C> input, List<C> out, int maxItems) throws InterruptedException -->Line_9 $$ input.drainTo(out, maxItems - out.size())[ FD ]
Line_2 $$ protected <C extends Coalescable> void coalesceInternal(BlockingQueue<C> input, List<C> out, int maxItems) throws InterruptedException -->Line_7 $$ debugGap(average)[ CD ]
Line_2 $$ protected <C extends Coalescable> void coalesceInternal(BlockingQueue<C> input, List<C> out, int maxItems) throws InterruptedException -->Line_10 $$ for (int ii = 1; ii < out.size(); ii++) notifyOfSample(out.get(ii).timestampNanos())[ FD ]
Line_2 $$ protected <C extends Coalescable> void coalesceInternal(BlockingQueue<C> input, List<C> out, int maxItems) throws InterruptedException -->Line_8 $$ maybeSleep(out.size(), average, maxCoalesceWindow, parker)[ FD ]
Line_2 $$ protected <C extends Coalescable> void coalesceInternal(BlockingQueue<C> input, List<C> out, int maxItems) throws InterruptedException -->Line_6 $$ long average = notifyOfSample(out.get(0).timestampNanos())[ FD ]
Line_2 $$ protected <C extends Coalescable> void coalesceInternal(BlockingQueue<C> input, List<C> out, int maxItems) throws InterruptedException -->Line_6 $$ long average = notifyOfSample(out.get(0).timestampNanos())[ CD ]
