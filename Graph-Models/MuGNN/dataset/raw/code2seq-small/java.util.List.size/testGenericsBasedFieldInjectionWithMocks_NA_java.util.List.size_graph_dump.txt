Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_19 $$ rbd.setFactoryBeanName("mocksControl")[ CD ]
Line_13 $$ rbd = new RootBeanDefinition()-->Line_18 $$ rbd = new RootBeanDefinition()[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_32 $$ assertSame(1, bean.stringRepositoryList.size())[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_13 $$ rbd = new RootBeanDefinition()[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_28 $$ assertSame(1, bean.stringRepositoryArray.length)[ CD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_6 $$ bpp.setBeanFactory(bf)[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_14 $$ rbd.setFactoryBeanName("mocksControl")[ CD ]
Line_13 $$ rbd = new RootBeanDefinition()-->Line_15 $$ rbd.setFactoryMethodName("createMock")[ FD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_10 $$ bf.registerBeanDefinition("annotatedBean", bd)[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_36 $$ assertSame(1, bean.stringRepositoryMap.size())[ CD ]
Line_13 $$ rbd = new RootBeanDefinition()-->Line_20 $$ rbd.setFactoryMethodName("createMock")[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_16 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(Repository.class)[ CD ]
Line_11 $$ RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)-->Line_15 $$ rbd.setFactoryMethodName("createMock")[ FD ]
Line_24 $$ Repository sr = bf.getBean("stringRepo", Repository.class)-->Line_34 $$ assertSame(sr, bean.stringRepositoryList.get(0))[ FD ]
Line_5 $$ AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()-->Line_7 $$ bf.addBeanPostProcessor(bpp)[ FD ]
Line_25 $$ Repository ir = bf.getBean("integerRepo", Repository.class)-->Line_39 $$ assertSame(ir, bean.integerRepositoryMap.get("integerRepo"))[ FD ]
Line_13 $$ rbd = new RootBeanDefinition()-->Line_16 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(Repository.class)[ FD ]
Line_5 $$ AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()-->Line_6 $$ bpp.setBeanFactory(bf)[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_11 $$ RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)[ CD ]
Line_11 $$ RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)-->Line_22 $$ bf.registerBeanDefinition("integerRepo", rbd)[ FD ]
Line_24 $$ Repository sr = bf.getBean("stringRepo", Repository.class)-->Line_30 $$ assertSame(sr, bean.stringRepositoryArray[0])[ FD ]
Line_18 $$ rbd = new RootBeanDefinition()-->Line_20 $$ rbd.setFactoryMethodName("createMock")[ FD ]
Line_13 $$ rbd = new RootBeanDefinition()-->Line_22 $$ bf.registerBeanDefinition("integerRepo", rbd)[ FD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_22 $$ bf.registerBeanDefinition("integerRepo", rbd)[ FD ]
Line_13 $$ rbd = new RootBeanDefinition()-->Line_19 $$ rbd.setFactoryBeanName("mocksControl")[ FD ]
Line_24 $$ Repository sr = bf.getBean("stringRepo", Repository.class)-->Line_38 $$ assertSame(sr, bean.stringRepositoryMap.get("stringRepo"))[ FD ]
Line_13 $$ rbd = new RootBeanDefinition()-->Line_14 $$ rbd.setFactoryBeanName("mocksControl")[ FD ]
Line_25 $$ Repository ir = bf.getBean("integerRepo", Repository.class)-->Line_31 $$ assertSame(ir, bean.integerRepositoryArray[0])[ FD ]
Line_25 $$ Repository ir = bf.getBean("integerRepo", Repository.class)-->Line_35 $$ assertSame(ir, bean.integerRepositoryList.get(0))[ FD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_4 $$ bf.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver())[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_26 $$ assertSame(sr, bean.stringRepository)[ CD ]
Line_11 $$ RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)-->Line_20 $$ rbd.setFactoryMethodName("createMock")[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_20 $$ rbd.setFactoryMethodName("createMock")[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_25 $$ Repository ir = bf.getBean("integerRepo", Repository.class)[ CD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_12 $$ bf.registerBeanDefinition("mocksControl", rbd)[ FD ]
Line_11 $$ RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)-->Line_21 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(Repository.class)[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_33 $$ assertSame(1, bean.integerRepositoryList.size())[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_38 $$ assertSame(sr, bean.stringRepositoryMap.get("stringRepo"))[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_30 $$ assertSame(sr, bean.stringRepositoryArray[0])[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_35 $$ assertSame(ir, bean.integerRepositoryList.get(0))[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_9 $$ bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)[ CD ]
Line_11 $$ RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)-->Line_13 $$ rbd = new RootBeanDefinition()[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_8 $$ RootBeanDefinition bd = new RootBeanDefinition(RepositoryFieldInjectionBeanWithQualifiers.class)[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_24 $$ Repository sr = bf.getBean("stringRepo", Repository.class)[ CD ]
Line_11 $$ RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)-->Line_19 $$ rbd.setFactoryBeanName("mocksControl")[ FD ]
Line_11 $$ RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)-->Line_18 $$ rbd = new RootBeanDefinition()[ FD ]
Line_8 $$ RootBeanDefinition bd = new RootBeanDefinition(RepositoryFieldInjectionBeanWithQualifiers.class)-->Line_10 $$ bf.registerBeanDefinition("annotatedBean", bd)[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_5 $$ AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()[ CD ]
Line_24 $$ Repository sr = bf.getBean("stringRepo", Repository.class)-->Line_26 $$ assertSame(sr, bean.stringRepository)[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_17 $$ bf.registerBeanDefinition("stringRepo", rbd)[ CD ]
Line_11 $$ RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)-->Line_16 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(Repository.class)[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_12 $$ bf.registerBeanDefinition("mocksControl", rbd)[ CD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_23 $$ RepositoryFieldInjectionBeanWithQualifiers bean = (RepositoryFieldInjectionBeanWithQualifiers) bf.getBean("annotatedBean")[ FD ]
Line_25 $$ Repository ir = bf.getBean("integerRepo", Repository.class)-->Line_27 $$ assertSame(ir, bean.integerRepository)[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_23 $$ RepositoryFieldInjectionBeanWithQualifiers bean = (RepositoryFieldInjectionBeanWithQualifiers) bf.getBean("annotatedBean")[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_18 $$ rbd = new RootBeanDefinition()[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_27 $$ assertSame(ir, bean.integerRepository)[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_7 $$ bf.addBeanPostProcessor(bpp)[ CD ]
Line_8 $$ RootBeanDefinition bd = new RootBeanDefinition(RepositoryFieldInjectionBeanWithQualifiers.class)-->Line_9 $$ bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)[ FD ]
Line_11 $$ RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)-->Line_17 $$ bf.registerBeanDefinition("stringRepo", rbd)[ FD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_24 $$ Repository sr = bf.getBean("stringRepo", Repository.class)[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_6 $$ bpp.setBeanFactory(bf)[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_39 $$ assertSame(ir, bean.integerRepositoryMap.get("integerRepo"))[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_4 $$ bf.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver())[ CD ]
Line_13 $$ rbd = new RootBeanDefinition()-->Line_21 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(Repository.class)[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_37 $$ assertSame(1, bean.integerRepositoryMap.size())[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_31 $$ assertSame(ir, bean.integerRepositoryArray[0])[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_21 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(Repository.class)[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_22 $$ bf.registerBeanDefinition("integerRepo", rbd)[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_29 $$ assertSame(1, bean.integerRepositoryArray.length)[ CD ]
Line_18 $$ rbd = new RootBeanDefinition()-->Line_19 $$ rbd.setFactoryBeanName("mocksControl")[ FD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_7 $$ bf.addBeanPostProcessor(bpp)[ FD ]
Line_18 $$ rbd = new RootBeanDefinition()-->Line_21 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(Repository.class)[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_10 $$ bf.registerBeanDefinition("annotatedBean", bd)[ CD ]
Line_13 $$ rbd = new RootBeanDefinition()-->Line_17 $$ bf.registerBeanDefinition("stringRepo", rbd)[ FD ]
Line_11 $$ RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)-->Line_14 $$ rbd.setFactoryBeanName("mocksControl")[ FD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_17 $$ bf.registerBeanDefinition("stringRepo", rbd)[ FD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_34 $$ assertSame(sr, bean.stringRepositoryList.get(0))[ CD ]
Line_2 $$ public void testGenericsBasedFieldInjectionWithMocks() -->Line_15 $$ rbd.setFactoryMethodName("createMock")[ CD ]
Line_18 $$ rbd = new RootBeanDefinition()-->Line_22 $$ bf.registerBeanDefinition("integerRepo", rbd)[ FD ]
Line_11 $$ RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)-->Line_12 $$ bf.registerBeanDefinition("mocksControl", rbd)[ FD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_25 $$ Repository ir = bf.getBean("integerRepo", Repository.class)[ FD ]
