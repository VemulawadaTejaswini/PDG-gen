Line_12 $$ RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)-->Line_14 $$ rbd = new RootBeanDefinition()[ FD ]
Line_12 $$ RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)-->Line_21 $$ rbd.setFactoryMethodName("createMock")[ FD ]
Line_14 $$ rbd = new RootBeanDefinition()-->Line_23 $$ bf.registerBeanDefinition("integerRepo", rbd)[ FD ]
Line_4 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_25 $$ Repository sr = bf.getBean("stringRepo", Repository.class)[ FD ]
Line_4 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_7 $$ bpp.setBeanFactory(bf)[ FD ]
Line_14 $$ rbd = new RootBeanDefinition()-->Line_22 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(Repository.class)[ FD ]
Line_12 $$ RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)-->Line_13 $$ bf.registerBeanDefinition("mocksControl", rbd)[ FD ]
Line_26 $$ Repository ir = bf.getBean("integerRepo", Repository.class)-->Line_40 $$ assertSame(ir, bean.integerRepositoryMap.get("integerRepo"))[ FD ]
Line_26 $$ Repository ir = bf.getBean("integerRepo", Repository.class)-->Line_28 $$ assertSame(ir, bean.integerRepository)[ FD ]
Line_12 $$ RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)-->Line_16 $$ rbd.setFactoryMethodName("createMock")[ FD ]
Line_12 $$ RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)-->Line_17 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(Repository.class)[ FD ]
Line_12 $$ RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)-->Line_20 $$ rbd.setFactoryBeanName("mocksControl")[ FD ]
Line_14 $$ rbd = new RootBeanDefinition()-->Line_16 $$ rbd.setFactoryMethodName("createMock")[ FD ]
Line_12 $$ RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)-->Line_23 $$ bf.registerBeanDefinition("integerRepo", rbd)[ FD ]
Line_25 $$ Repository sr = bf.getBean("stringRepo", Repository.class)-->Line_35 $$ assertSame(sr, bean.stringRepositoryList.get(0))[ FD ]
Line_4 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_11 $$ bf.registerBeanDefinition("annotatedBean", bd)[ FD ]
Line_4 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_26 $$ Repository ir = bf.getBean("integerRepo", Repository.class)[ FD ]
Line_19 $$ rbd = new RootBeanDefinition()-->Line_22 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(Repository.class)[ FD ]
Line_26 $$ Repository ir = bf.getBean("integerRepo", Repository.class)-->Line_32 $$ assertSame(ir, bean.integerRepositoryArray[0])[ FD ]
Line_4 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_8 $$ bf.addBeanPostProcessor(bpp)[ FD ]
Line_25 $$ Repository sr = bf.getBean("stringRepo", Repository.class)-->Line_31 $$ assertSame(sr, bean.stringRepositoryArray[0])[ FD ]
Line_6 $$ AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()-->Line_8 $$ bf.addBeanPostProcessor(bpp)[ FD ]
Line_19 $$ rbd = new RootBeanDefinition()-->Line_20 $$ rbd.setFactoryBeanName("mocksControl")[ FD ]
Line_9 $$ RootBeanDefinition bd = new RootBeanDefinition(RepositoryFieldInjectionBeanWithQualifiers.class)-->Line_10 $$ bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)[ FD ]
Line_14 $$ rbd = new RootBeanDefinition()-->Line_17 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(Repository.class)[ FD ]
Line_14 $$ rbd = new RootBeanDefinition()-->Line_21 $$ rbd.setFactoryMethodName("createMock")[ FD ]
Line_14 $$ rbd = new RootBeanDefinition()-->Line_15 $$ rbd.setFactoryBeanName("mocksControl")[ FD ]
Line_4 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_13 $$ bf.registerBeanDefinition("mocksControl", rbd)[ FD ]
Line_14 $$ rbd = new RootBeanDefinition()-->Line_20 $$ rbd.setFactoryBeanName("mocksControl")[ FD ]
Line_4 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_5 $$ bf.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver())[ FD ]
Line_4 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_24 $$ RepositoryFieldInjectionBeanWithQualifiers bean = (RepositoryFieldInjectionBeanWithQualifiers) bf.getBean("annotatedBean")[ FD ]
Line_14 $$ rbd = new RootBeanDefinition()-->Line_19 $$ rbd = new RootBeanDefinition()[ FD ]
Line_9 $$ RootBeanDefinition bd = new RootBeanDefinition(RepositoryFieldInjectionBeanWithQualifiers.class)-->Line_11 $$ bf.registerBeanDefinition("annotatedBean", bd)[ FD ]
Line_25 $$ Repository sr = bf.getBean("stringRepo", Repository.class)-->Line_39 $$ assertSame(sr, bean.stringRepositoryMap.get("stringRepo"))[ FD ]
Line_25 $$ Repository sr = bf.getBean("stringRepo", Repository.class)-->Line_27 $$ assertSame(sr, bean.stringRepository)[ FD ]
Line_12 $$ RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)-->Line_22 $$ rbd.getConstructorArgumentValues().addGenericArgumentValue(Repository.class)[ FD ]
Line_14 $$ rbd = new RootBeanDefinition()-->Line_18 $$ bf.registerBeanDefinition("stringRepo", rbd)[ FD ]
Line_12 $$ RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)-->Line_19 $$ rbd = new RootBeanDefinition()[ FD ]
Line_19 $$ rbd = new RootBeanDefinition()-->Line_21 $$ rbd.setFactoryMethodName("createMock")[ FD ]
Line_12 $$ RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)-->Line_18 $$ bf.registerBeanDefinition("stringRepo", rbd)[ FD ]
Line_4 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_23 $$ bf.registerBeanDefinition("integerRepo", rbd)[ FD ]
Line_12 $$ RootBeanDefinition rbd = new RootBeanDefinition(MocksControl.class)-->Line_15 $$ rbd.setFactoryBeanName("mocksControl")[ FD ]
Line_4 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_18 $$ bf.registerBeanDefinition("stringRepo", rbd)[ FD ]
Line_6 $$ AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()-->Line_7 $$ bpp.setBeanFactory(bf)[ FD ]
Line_19 $$ rbd = new RootBeanDefinition()-->Line_23 $$ bf.registerBeanDefinition("integerRepo", rbd)[ FD ]
Line_26 $$ Repository ir = bf.getBean("integerRepo", Repository.class)-->Line_36 $$ assertSame(ir, bean.integerRepositoryList.get(0))[ FD ]
