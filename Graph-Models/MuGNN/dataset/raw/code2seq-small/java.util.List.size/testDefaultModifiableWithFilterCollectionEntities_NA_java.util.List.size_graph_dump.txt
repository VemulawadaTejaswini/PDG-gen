Line_19 $$ Container c = (Container) s.get(Container.class, cOrig.getId())-->Line_21 $$ expectedInitializedObjects = new HashSet(Arrays.asList(c, c.getNonLazyInfo(), c.getNoProxyOwner(), c.getProxyOwner(), c.getNonLazyOwner(), c.getNonLazyJoinDataPoints().iterator().next(), c.getNonLazySelectDataPoints().iterator().next()))[ FD ]
Line_34 $$ s = openSession()-->Line_39 $$ s.createQuery("delete from Owner").executeUpdate()[ FD ]
Line_19 $$ Container c = (Container) s.get(Container.class, cOrig.getId())-->Line_23 $$ List list = s.createFilter(c.getLazyDataPoints(), "").setMaxResults(1).list()[ FD ]
Line_35 $$ t = s.beginTransaction()-->Line_40 $$ t.commit()[ FD ]
Line_34 $$ s = openSession()-->Line_37 $$ s.createQuery("delete from Container").executeUpdate()[ FD ]
Line_5 $$ Set expectedReadOnlyObjects = new HashSet()-->Line_13 $$ checkContainer(cOrig, expectedInitializedObjects, expectedReadOnlyObjects, s)[ FD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_28 $$ assertFalse(s.isReadOnly(list.get(0)))[ CD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_5 $$ Set expectedReadOnlyObjects = new HashSet()[ CD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_13 $$ checkContainer(cOrig, expectedInitializedObjects, expectedReadOnlyObjects, s)[ CD ]
Line_16 $$ s = openSession()-->Line_37 $$ s.createQuery("delete from Container").executeUpdate()[ FD ]
Line_6 $$ Session s = openSession()-->Line_31 $$ assertFalse(s.isReadOnly(list.get(0)))[ FD ]
Line_16 $$ s = openSession()-->Line_34 $$ s = openSession()[ FD ]
Line_4 $$ Set expectedInitializedObjects = new HashSet(Arrays.asList(cOrig, cOrig.getNoProxyInfo(), cOrig.getProxyInfo(), cOrig.getNonLazyInfo(), cOrig.getNoProxyOwner(), cOrig.getProxyOwner(), cOrig.getNonLazyOwner(), cOrig.getLazyDataPoints().iterator().next(), cOrig.getNonLazyJoinDataPoints().iterator().next(), cOrig.getNonLazySelectDataPoints().iterator().next()))-->Line_10 $$ checkContainer(cOrig, expectedInitializedObjects, expectedReadOnlyObjects, s)[ FD ]
Line_16 $$ s = openSession()-->Line_26 $$ list = s.createFilter(c.getNonLazyJoinDataPoints(), "").setMaxResults(1).list()[ FD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_10 $$ checkContainer(cOrig, expectedInitializedObjects, expectedReadOnlyObjects, s)[ CD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_16 $$ s = openSession()[ CD ]
Line_6 $$ Session s = openSession()-->Line_18 $$ assertFalse(s.isDefaultReadOnly())[ FD ]
Line_19 $$ Container c = (Container) s.get(Container.class, cOrig.getId())-->Line_29 $$ list = s.createFilter(c.getNonLazySelectDataPoints(), "").setMaxResults(1).list()[ FD ]
Line_6 $$ Session s = openSession()-->Line_11 $$ s.setDefaultReadOnly(true)[ FD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_19 $$ Container c = (Container) s.get(Container.class, cOrig.getId())[ CD ]
Line_34 $$ s = openSession()-->Line_35 $$ t = s.beginTransaction()[ FD ]
Line_6 $$ Session s = openSession()-->Line_17 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_40 $$ t.commit()[ CD ]
Line_23 $$ List list = s.createFilter(c.getLazyDataPoints(), "").setMaxResults(1).list()-->Line_27 $$ assertEquals(1, list.size())[ FD ]
Line_6 $$ Session s = openSession()-->Line_28 $$ assertFalse(s.isReadOnly(list.get(0)))[ FD ]
Line_16 $$ s = openSession()-->Line_19 $$ Container c = (Container) s.get(Container.class, cOrig.getId())[ FD ]
Line_16 $$ s = openSession()-->Line_31 $$ assertFalse(s.isReadOnly(list.get(0)))[ FD ]
Line_6 $$ Session s = openSession()-->Line_13 $$ checkContainer(cOrig, expectedInitializedObjects, expectedReadOnlyObjects, s)[ FD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_7 $$ assertFalse(s.isDefaultReadOnly())[ CD ]
Line_3 $$ Container cOrig = createContainer()-->Line_13 $$ checkContainer(cOrig, expectedInitializedObjects, expectedReadOnlyObjects, s)[ FD ]
Line_8 $$ Transaction t = s.beginTransaction()-->Line_17 $$ t = s.beginTransaction()[ FD ]
Line_8 $$ Transaction t = s.beginTransaction()-->Line_32 $$ t.commit()[ FD ]
Line_26 $$ list = s.createFilter(c.getNonLazyJoinDataPoints(), "").setMaxResults(1).list()-->Line_30 $$ assertEquals(1, list.size())[ FD ]
Line_6 $$ Session s = openSession()-->Line_25 $$ assertFalse(s.isReadOnly(list.get(0)))[ FD ]
Line_23 $$ List list = s.createFilter(c.getLazyDataPoints(), "").setMaxResults(1).list()-->Line_26 $$ list = s.createFilter(c.getNonLazyJoinDataPoints(), "").setMaxResults(1).list()[ FD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_37 $$ s.createQuery("delete from Container").executeUpdate()[ CD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_17 $$ t = s.beginTransaction()[ CD ]
Line_34 $$ s = openSession()-->Line_36 $$ s.createQuery("delete from DataPoint").executeUpdate()[ FD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_39 $$ s.createQuery("delete from Owner").executeUpdate()[ CD ]
Line_6 $$ Session s = openSession()-->Line_35 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Set expectedInitializedObjects = new HashSet(Arrays.asList(cOrig, cOrig.getNoProxyInfo(), cOrig.getProxyInfo(), cOrig.getNonLazyInfo(), cOrig.getNoProxyOwner(), cOrig.getProxyOwner(), cOrig.getNonLazyOwner(), cOrig.getLazyDataPoints().iterator().next(), cOrig.getNonLazyJoinDataPoints().iterator().next(), cOrig.getNonLazySelectDataPoints().iterator().next()))-->Line_13 $$ checkContainer(cOrig, expectedInitializedObjects, expectedReadOnlyObjects, s)[ FD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_18 $$ assertFalse(s.isDefaultReadOnly())[ CD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_6 $$ Session s = openSession()[ CD ]
Line_16 $$ s = openSession()-->Line_17 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_30 $$ assertEquals(1, list.size())[ CD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_41 $$ s.close()[ CD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_4 $$ Set expectedInitializedObjects = new HashSet(Arrays.asList(cOrig, cOrig.getNoProxyInfo(), cOrig.getProxyInfo(), cOrig.getNonLazyInfo(), cOrig.getNoProxyOwner(), cOrig.getProxyOwner(), cOrig.getNonLazyOwner(), cOrig.getLazyDataPoints().iterator().next(), cOrig.getNonLazyJoinDataPoints().iterator().next(), cOrig.getNonLazySelectDataPoints().iterator().next()))[ CD ]
Line_23 $$ List list = s.createFilter(c.getLazyDataPoints(), "").setMaxResults(1).list()-->Line_25 $$ assertFalse(s.isReadOnly(list.get(0)))[ FD ]
Line_16 $$ s = openSession()-->Line_28 $$ assertFalse(s.isReadOnly(list.get(0)))[ FD ]
Line_17 $$ t = s.beginTransaction()-->Line_32 $$ t.commit()[ FD ]
Line_8 $$ Transaction t = s.beginTransaction()-->Line_40 $$ t.commit()[ FD ]
Line_3 $$ Container cOrig = createContainer()-->Line_19 $$ Container c = (Container) s.get(Container.class, cOrig.getId())[ FD ]
Line_17 $$ t = s.beginTransaction()-->Line_40 $$ t.commit()[ FD ]
Line_29 $$ list = s.createFilter(c.getNonLazySelectDataPoints(), "").setMaxResults(1).list()-->Line_30 $$ assertEquals(1, list.size())[ FD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_9 $$ s.save(cOrig)[ CD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_11 $$ s.setDefaultReadOnly(true)[ CD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_26 $$ list = s.createFilter(c.getNonLazyJoinDataPoints(), "").setMaxResults(1).list()[ CD ]
Line_6 $$ Session s = openSession()-->Line_16 $$ s = openSession()[ FD ]
Line_8 $$ Transaction t = s.beginTransaction()-->Line_35 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_15 $$ s.close()[ CD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_23 $$ List list = s.createFilter(c.getLazyDataPoints(), "").setMaxResults(1).list()[ CD ]
Line_23 $$ List list = s.createFilter(c.getLazyDataPoints(), "").setMaxResults(1).list()-->Line_31 $$ assertFalse(s.isReadOnly(list.get(0)))[ FD ]
Line_16 $$ s = openSession()-->Line_41 $$ s.close()[ FD ]
Line_6 $$ Session s = openSession()-->Line_29 $$ list = s.createFilter(c.getNonLazySelectDataPoints(), "").setMaxResults(1).list()[ FD ]
Line_6 $$ Session s = openSession()-->Line_37 $$ s.createQuery("delete from Container").executeUpdate()[ FD ]
Line_16 $$ s = openSession()-->Line_39 $$ s.createQuery("delete from Owner").executeUpdate()[ FD ]
Line_29 $$ list = s.createFilter(c.getNonLazySelectDataPoints(), "").setMaxResults(1).list()-->Line_31 $$ assertFalse(s.isReadOnly(list.get(0)))[ FD ]
Line_23 $$ List list = s.createFilter(c.getLazyDataPoints(), "").setMaxResults(1).list()-->Line_28 $$ assertFalse(s.isReadOnly(list.get(0)))[ FD ]
Line_6 $$ Session s = openSession()-->Line_33 $$ s.close()[ FD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_12 $$ assertTrue(s.isDefaultReadOnly())[ CD ]
Line_5 $$ Set expectedReadOnlyObjects = new HashSet()-->Line_10 $$ checkContainer(cOrig, expectedInitializedObjects, expectedReadOnlyObjects, s)[ FD ]
Line_16 $$ s = openSession()-->Line_23 $$ List list = s.createFilter(c.getLazyDataPoints(), "").setMaxResults(1).list()[ FD ]
Line_34 $$ s = openSession()-->Line_41 $$ s.close()[ FD ]
Line_6 $$ Session s = openSession()-->Line_38 $$ s.createQuery("delete from Info").executeUpdate()[ FD ]
Line_34 $$ s = openSession()-->Line_38 $$ s.createQuery("delete from Info").executeUpdate()[ FD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_36 $$ s.createQuery("delete from DataPoint").executeUpdate()[ CD ]
Line_6 $$ Session s = openSession()-->Line_34 $$ s = openSession()[ FD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_21 $$ expectedInitializedObjects = new HashSet(Arrays.asList(c, c.getNonLazyInfo(), c.getNoProxyOwner(), c.getProxyOwner(), c.getNonLazyOwner(), c.getNonLazyJoinDataPoints().iterator().next(), c.getNonLazySelectDataPoints().iterator().next()))[ CD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_8 $$ Transaction t = s.beginTransaction()[ CD ]
Line_6 $$ Session s = openSession()-->Line_26 $$ list = s.createFilter(c.getNonLazyJoinDataPoints(), "").setMaxResults(1).list()[ FD ]
Line_6 $$ Session s = openSession()-->Line_19 $$ Container c = (Container) s.get(Container.class, cOrig.getId())[ FD ]
Line_5 $$ Set expectedReadOnlyObjects = new HashSet()-->Line_22 $$ expectedReadOnlyObjects = new HashSet()[ FD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_32 $$ t.commit()[ CD ]
Line_4 $$ Set expectedInitializedObjects = new HashSet(Arrays.asList(cOrig, cOrig.getNoProxyInfo(), cOrig.getProxyInfo(), cOrig.getNonLazyInfo(), cOrig.getNoProxyOwner(), cOrig.getProxyOwner(), cOrig.getNonLazyOwner(), cOrig.getLazyDataPoints().iterator().next(), cOrig.getNonLazyJoinDataPoints().iterator().next(), cOrig.getNonLazySelectDataPoints().iterator().next()))-->Line_21 $$ expectedInitializedObjects = new HashSet(Arrays.asList(c, c.getNonLazyInfo(), c.getNoProxyOwner(), c.getProxyOwner(), c.getNonLazyOwner(), c.getNonLazyJoinDataPoints().iterator().next(), c.getNonLazySelectDataPoints().iterator().next()))[ FD ]
Line_6 $$ Session s = openSession()-->Line_39 $$ s.createQuery("delete from Owner").executeUpdate()[ FD ]
Line_23 $$ List list = s.createFilter(c.getLazyDataPoints(), "").setMaxResults(1).list()-->Line_29 $$ list = s.createFilter(c.getNonLazySelectDataPoints(), "").setMaxResults(1).list()[ FD ]
Line_6 $$ Session s = openSession()-->Line_8 $$ Transaction t = s.beginTransaction()[ FD ]
Line_26 $$ list = s.createFilter(c.getNonLazyJoinDataPoints(), "").setMaxResults(1).list()-->Line_31 $$ assertFalse(s.isReadOnly(list.get(0)))[ FD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_34 $$ s = openSession()[ CD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_27 $$ assertEquals(1, list.size())[ CD ]
Line_6 $$ Session s = openSession()-->Line_15 $$ s.close()[ FD ]
Line_16 $$ s = openSession()-->Line_29 $$ list = s.createFilter(c.getNonLazySelectDataPoints(), "").setMaxResults(1).list()[ FD ]
Line_23 $$ List list = s.createFilter(c.getLazyDataPoints(), "").setMaxResults(1).list()-->Line_30 $$ assertEquals(1, list.size())[ FD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_33 $$ s.close()[ CD ]
Line_26 $$ list = s.createFilter(c.getNonLazyJoinDataPoints(), "").setMaxResults(1).list()-->Line_27 $$ assertEquals(1, list.size())[ FD ]
Line_3 $$ Container cOrig = createContainer()-->Line_9 $$ s.save(cOrig)[ FD ]
Line_19 $$ Container c = (Container) s.get(Container.class, cOrig.getId())-->Line_20 $$ assertNotSame(cOrig, c)[ FD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_14 $$ t.commit()[ CD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_20 $$ assertNotSame(cOrig, c)[ CD ]
Line_26 $$ list = s.createFilter(c.getNonLazyJoinDataPoints(), "").setMaxResults(1).list()-->Line_28 $$ assertFalse(s.isReadOnly(list.get(0)))[ FD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_29 $$ list = s.createFilter(c.getNonLazySelectDataPoints(), "").setMaxResults(1).list()[ CD ]
Line_16 $$ s = openSession()-->Line_38 $$ s.createQuery("delete from Info").executeUpdate()[ FD ]
Line_3 $$ Container cOrig = createContainer()-->Line_10 $$ checkContainer(cOrig, expectedInitializedObjects, expectedReadOnlyObjects, s)[ FD ]
Line_17 $$ t = s.beginTransaction()-->Line_35 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_25 $$ assertFalse(s.isReadOnly(list.get(0)))[ CD ]
Line_6 $$ Session s = openSession()-->Line_36 $$ s.createQuery("delete from DataPoint").executeUpdate()[ FD ]
Line_6 $$ Session s = openSession()-->Line_12 $$ assertTrue(s.isDefaultReadOnly())[ FD ]
Line_16 $$ s = openSession()-->Line_36 $$ s.createQuery("delete from DataPoint").executeUpdate()[ FD ]
Line_6 $$ Session s = openSession()-->Line_41 $$ s.close()[ FD ]
Line_23 $$ List list = s.createFilter(c.getLazyDataPoints(), "").setMaxResults(1).list()-->Line_24 $$ assertEquals(1, list.size())[ FD ]
Line_6 $$ Session s = openSession()-->Line_10 $$ checkContainer(cOrig, expectedInitializedObjects, expectedReadOnlyObjects, s)[ FD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_38 $$ s.createQuery("delete from Info").executeUpdate()[ CD ]
Line_6 $$ Session s = openSession()-->Line_7 $$ assertFalse(s.isDefaultReadOnly())[ FD ]
Line_26 $$ list = s.createFilter(c.getNonLazyJoinDataPoints(), "").setMaxResults(1).list()-->Line_29 $$ list = s.createFilter(c.getNonLazySelectDataPoints(), "").setMaxResults(1).list()[ FD ]
Line_8 $$ Transaction t = s.beginTransaction()-->Line_14 $$ t.commit()[ FD ]
Line_3 $$ Container cOrig = createContainer()-->Line_4 $$ Set expectedInitializedObjects = new HashSet(Arrays.asList(cOrig, cOrig.getNoProxyInfo(), cOrig.getProxyInfo(), cOrig.getNonLazyInfo(), cOrig.getNoProxyOwner(), cOrig.getProxyOwner(), cOrig.getNonLazyOwner(), cOrig.getLazyDataPoints().iterator().next(), cOrig.getNonLazyJoinDataPoints().iterator().next(), cOrig.getNonLazySelectDataPoints().iterator().next()))[ FD ]
Line_16 $$ s = openSession()-->Line_18 $$ assertFalse(s.isDefaultReadOnly())[ FD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_3 $$ Container cOrig = createContainer()[ CD ]
Line_3 $$ Container cOrig = createContainer()-->Line_20 $$ assertNotSame(cOrig, c)[ FD ]
Line_19 $$ Container c = (Container) s.get(Container.class, cOrig.getId())-->Line_26 $$ list = s.createFilter(c.getNonLazyJoinDataPoints(), "").setMaxResults(1).list()[ FD ]
Line_16 $$ s = openSession()-->Line_35 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_31 $$ assertFalse(s.isReadOnly(list.get(0)))[ CD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_22 $$ expectedReadOnlyObjects = new HashSet()[ CD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_35 $$ t = s.beginTransaction()[ CD ]
Line_16 $$ s = openSession()-->Line_25 $$ assertFalse(s.isReadOnly(list.get(0)))[ FD ]
Line_6 $$ Session s = openSession()-->Line_9 $$ s.save(cOrig)[ FD ]
Line_2 $$ public void testDefaultModifiableWithFilterCollectionEntities() -->Line_24 $$ assertEquals(1, list.size())[ CD ]
Line_16 $$ s = openSession()-->Line_33 $$ s.close()[ FD ]
Line_6 $$ Session s = openSession()-->Line_23 $$ List list = s.createFilter(c.getLazyDataPoints(), "").setMaxResults(1).list()[ FD ]
