Line_6 $$ StoredProcedureQuery query = em.createStoredProcedureQuery("findMessagesByTime")-->Line_7 $$ query.registerStoredProcedureParameter(1, Calendar.class, ParameterMode.IN)[ FD ]
Line_3 $$ EntityManager em = entityManagerFactory.createEntityManager()-->Line_12 $$ em.getTransaction().rollback()[ FD ]
Line_6 $$ StoredProcedureQuery query = em.createStoredProcedureQuery("findMessagesByTime")-->Line_9 $$ List list = query.getResultList()[ FD ]
Line_2 $$ public void testBindingCalendarAsTime() -->Line_3 $$ EntityManager em = entityManagerFactory.createEntityManager()[ CD ]
Line_6 $$ StoredProcedureQuery query = em.createStoredProcedureQuery("findMessagesByTime")-->Line_8 $$ query.setParameter(1, nowCal, TemporalType.TIME)[ FD ]
Line_9 $$ List list = query.getResultList()-->Line_10 $$ assertEquals(1, list.size())[ FD ]
Line_3 $$ EntityManager em = entityManagerFactory.createEntityManager()-->Line_13 $$ em.close()[ FD ]
Line_3 $$ EntityManager em = entityManagerFactory.createEntityManager()-->Line_6 $$ StoredProcedureQuery query = em.createStoredProcedureQuery("findMessagesByTime")[ FD ]
Line_2 $$ public void testBindingCalendarAsTime() -->Line_4 $$ em.getTransaction().begin()[ CD ]
Line_3 $$ EntityManager em = entityManagerFactory.createEntityManager()-->Line_4 $$ em.getTransaction().begin()[ FD ]
