Line_2 $$ protected Response testUpload(byte[] bytes) throws Exception -->Line_7 $$ Response response = PortletContainerTestUtil.getPortalAuthentication(mockServletRequest, layout, TestUploadPortlet.PORTLET_NAME)[ CD ]
Line_7 $$ Response response = PortletContainerTestUtil.getPortalAuthentication(mockServletRequest, layout, TestUploadPortlet.PORTLET_NAME)-->Line_13 $$ List<String> cookies = response.getCookies()[ FD ]
Line_2 $$ protected Response testUpload(byte[] bytes) throws Exception -->Line_12 $$ url = HttpUtil.setParameter(url, "p_auth", response.getBody())[ CD ]
Line_2 $$ protected Response testUpload(byte[] bytes) throws Exception -->Line_14 $$ mockServletRequest.addParameter("Cookie", cookies.toArray(new String[cookies.size()]))[ CD ]
Line_3 $$ LiferayServletRequest liferayServletRequest = PortletContainerTestUtil.getMultipartRequest(TestUploadPortlet.PARAMETER_NAME, bytes)-->Line_5 $$ ServletRequest servletRequest = liferayServletRequest.getRequest()[ FD ]
Line_6 $$ MockMultipartHttpServletRequest mockServletRequest = (MockMultipartHttpServletRequest) servletRequest-->Line_15 $$ return PortletContainerTestUtil.postMultipart(url, mockServletRequest, TestUploadPortlet.PARAMETER_NAME)[ FD ]
Line_2 $$ protected Response testUpload(byte[] bytes) throws Exception -->Line_3 $$ LiferayServletRequest liferayServletRequest = PortletContainerTestUtil.getMultipartRequest(TestUploadPortlet.PARAMETER_NAME, bytes)[ CD ]
Line_8 $$ PortletURL portletURL = PortletURLFactoryUtil.create(mockServletRequest, TestUploadPortlet.PORTLET_NAME, layout.getPlid(), PortletRequest.ACTION_PHASE)-->Line_10 $$ portletURL.setParameter("randomId", RandomTestUtil.randomString())[ FD ]
Line_8 $$ PortletURL portletURL = PortletURLFactoryUtil.create(mockServletRequest, TestUploadPortlet.PORTLET_NAME, layout.getPlid(), PortletRequest.ACTION_PHASE)-->Line_9 $$ portletURL.setParameter(ActionRequest.ACTION_NAME, TestUploadPortlet.MVC_COMMAND_NAME)[ FD ]
Line_12 $$ url = HttpUtil.setParameter(url, "p_auth", response.getBody())-->Line_15 $$ return PortletContainerTestUtil.postMultipart(url, mockServletRequest, TestUploadPortlet.PARAMETER_NAME)[ FD ]
Line_2 $$ protected Response testUpload(byte[] bytes) throws Exception -->Line_3 $$ LiferayServletRequest liferayServletRequest = PortletContainerTestUtil.getMultipartRequest(TestUploadPortlet.PARAMETER_NAME, bytes)[ FD ]
Line_3 $$ LiferayServletRequest liferayServletRequest = PortletContainerTestUtil.getMultipartRequest(TestUploadPortlet.PARAMETER_NAME, bytes)-->Line_4 $$ setUp(liferayServletRequest, layout)[ FD ]
Line_2 $$ protected Response testUpload(byte[] bytes) throws Exception -->Line_9 $$ portletURL.setParameter(ActionRequest.ACTION_NAME, TestUploadPortlet.MVC_COMMAND_NAME)[ CD ]
Line_11 $$ String url = portletURL.toString()-->Line_12 $$ url = HttpUtil.setParameter(url, "p_auth", response.getBody())[ FD ]
Line_6 $$ MockMultipartHttpServletRequest mockServletRequest = (MockMultipartHttpServletRequest) servletRequest-->Line_8 $$ PortletURL portletURL = PortletURLFactoryUtil.create(mockServletRequest, TestUploadPortlet.PORTLET_NAME, layout.getPlid(), PortletRequest.ACTION_PHASE)[ FD ]
Line_2 $$ protected Response testUpload(byte[] bytes) throws Exception -->Line_11 $$ String url = portletURL.toString()[ CD ]
Line_8 $$ PortletURL portletURL = PortletURLFactoryUtil.create(mockServletRequest, TestUploadPortlet.PORTLET_NAME, layout.getPlid(), PortletRequest.ACTION_PHASE)-->Line_11 $$ String url = portletURL.toString()[ FD ]
Line_2 $$ protected Response testUpload(byte[] bytes) throws Exception -->Line_13 $$ List<String> cookies = response.getCookies()[ CD ]
Line_2 $$ protected Response testUpload(byte[] bytes) throws Exception -->Line_8 $$ PortletURL portletURL = PortletURLFactoryUtil.create(mockServletRequest, TestUploadPortlet.PORTLET_NAME, layout.getPlid(), PortletRequest.ACTION_PHASE)[ CD ]
Line_6 $$ MockMultipartHttpServletRequest mockServletRequest = (MockMultipartHttpServletRequest) servletRequest-->Line_14 $$ mockServletRequest.addParameter("Cookie", cookies.toArray(new String[cookies.size()]))[ FD ]
Line_2 $$ protected Response testUpload(byte[] bytes) throws Exception -->Line_4 $$ setUp(liferayServletRequest, layout)[ CD ]
Line_11 $$ String url = portletURL.toString()-->Line_15 $$ return PortletContainerTestUtil.postMultipart(url, mockServletRequest, TestUploadPortlet.PARAMETER_NAME)[ FD ]
Line_13 $$ List<String> cookies = response.getCookies()-->Line_14 $$ mockServletRequest.addParameter("Cookie", cookies.toArray(new String[cookies.size()]))[ FD ]
Line_2 $$ protected Response testUpload(byte[] bytes) throws Exception -->Line_10 $$ portletURL.setParameter("randomId", RandomTestUtil.randomString())[ CD ]
Line_7 $$ Response response = PortletContainerTestUtil.getPortalAuthentication(mockServletRequest, layout, TestUploadPortlet.PORTLET_NAME)-->Line_12 $$ url = HttpUtil.setParameter(url, "p_auth", response.getBody())[ FD ]
Line_2 $$ protected Response testUpload(byte[] bytes) throws Exception -->Line_6 $$ MockMultipartHttpServletRequest mockServletRequest = (MockMultipartHttpServletRequest) servletRequest[ CD ]
Line_2 $$ protected Response testUpload(byte[] bytes) throws Exception -->Line_15 $$ return PortletContainerTestUtil.postMultipart(url, mockServletRequest, TestUploadPortlet.PARAMETER_NAME)[ CD ]
Line_2 $$ protected Response testUpload(byte[] bytes) throws Exception -->Line_5 $$ ServletRequest servletRequest = liferayServletRequest.getRequest()[ CD ]
Line_6 $$ MockMultipartHttpServletRequest mockServletRequest = (MockMultipartHttpServletRequest) servletRequest-->Line_7 $$ Response response = PortletContainerTestUtil.getPortalAuthentication(mockServletRequest, layout, TestUploadPortlet.PORTLET_NAME)[ FD ]
