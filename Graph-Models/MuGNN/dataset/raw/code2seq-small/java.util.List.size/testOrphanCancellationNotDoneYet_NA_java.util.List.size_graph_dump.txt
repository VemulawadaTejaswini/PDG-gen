Line_12 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_13 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_12 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_23 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_8 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(AsyncBroker.class.getName(), Level.OFF)) -->Line_12 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_12 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_24 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_17 $$ NoticeableFuture<String> noticeableFuture = asyncBroker.post(_KEY)-->Line_19 $$ noticeableFuture = null[ FD ]
Line_7 $$ AsyncBroker<String, String> asyncBroker = new AsyncBroker()-->Line_17 $$ NoticeableFuture<String> noticeableFuture = asyncBroker.post(_KEY)[ FD ]
Line_17 $$ NoticeableFuture<String> noticeableFuture = asyncBroker.post(_KEY)-->Line_18 $$ String toString = noticeableFuture.toString()[ FD ]
Line_8 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(AsyncBroker.class.getName(), Level.OFF)) -->Line_22 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_24 $$ LogRecord logRecord = logRecords.get(0)-->Line_25 $$ Assert.assertEquals("Cancelled orphan noticeable future " + toString + " with key " + _KEY, logRecord.getMessage())[ FD ]
Line_7 $$ AsyncBroker<String, String> asyncBroker = new AsyncBroker()-->Line_9 $$ asyncBroker.post(_KEY)[ FD ]
