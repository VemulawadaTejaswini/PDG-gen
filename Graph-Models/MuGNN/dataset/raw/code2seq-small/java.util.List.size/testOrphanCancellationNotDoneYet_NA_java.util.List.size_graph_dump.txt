Line_2 $$ public void testOrphanCancellationNotDoneYet() throws InterruptedException -->Line_4 $$ AsyncBroker<String, String> asyncBroker = new AsyncBroker()[ CD ]
Line_4 $$ AsyncBroker<String, String> asyncBroker = new AsyncBroker()-->Line_6 $$ asyncBroker.post(_KEY)[ FD ]
Line_5 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(AsyncBroker.class.getName(), Level.OFF)) -->Line_18 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_9 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_19 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_4 $$ AsyncBroker<String, String> asyncBroker = new AsyncBroker()-->Line_13 $$ NoticeableFuture<String> noticeableFuture = asyncBroker.post(_KEY)[ FD ]
Line_9 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_20 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_9 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_10 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_20 $$ LogRecord logRecord = logRecords.get(0)-->Line_21 $$ Assert.assertEquals("Cancelled orphan noticeable future " + toString + " with key " + _KEY, logRecord.getMessage())[ FD ]
Line_13 $$ NoticeableFuture<String> noticeableFuture = asyncBroker.post(_KEY)-->Line_15 $$ noticeableFuture = null[ FD ]
Line_2 $$ public void testOrphanCancellationNotDoneYet() throws InterruptedException -->Line_3 $$ System.setProperty(_THREAD_ENABLED_KEY, StringPool.FALSE)[ CD ]
Line_5 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(AsyncBroker.class.getName(), Level.OFF)) -->Line_9 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_13 $$ NoticeableFuture<String> noticeableFuture = asyncBroker.post(_KEY)-->Line_14 $$ String toString = noticeableFuture.toString()[ FD ]
