Line_12 $$ if (externalProjectInfo == null)-->Line_13 $$ return ContainerUtil.emptyList()[ CD ]
Line_8 $$ final String projectPath = ExternalSystemApiUtil.getExternalProjectPath(module)-->Line_11 $$ final ExternalProjectInfo externalProjectInfo = ExternalSystemUtil.getExternalProjectInfo(module.getProject(), GradleConstants.SYSTEM_ID, projectPath)[ FD ]
Line_15 $$ result = TEST_SOURCE_SET_TASKS-->Line_45 $$ return ContainerUtil.map(result, new Function<String, String>() [ FD ]
Line_23 $$ final DataNode<TaskData> taskNode = ExternalSystemApiUtil.find(moduleNode, ProjectKeys.TASK, new BooleanFunction<DataNode<TaskData>>() -->Line_27 $$ return GradleCommonClassNames.GRADLE_API_TASKS_TESTING_TEST.equals(node.getData().getType()) && StringUtil.startsWith(sourceSetId, node.getData().getName())[ CD ]
Line_8 $$ final String projectPath = ExternalSystemApiUtil.getExternalProjectPath(module)-->Line_9 $$ if (projectPath == null)[ FD ]
Line_18 $$ if (moduleNode == null)-->Line_19 $$ return ContainerUtil.emptyList()[ CD ]
Line_23 $$ final DataNode<TaskData> taskNode = ExternalSystemApiUtil.find(moduleNode, ProjectKeys.TASK, new BooleanFunction<DataNode<TaskData>>() -->Line_27 $$ return GradleCommonClassNames.GRADLE_API_TASKS_TESTING_TEST.equals(node.getData().getType()) && StringUtil.startsWith(sourceSetId, node.getData().getName())[ FD ]
Line_17 $$ final DataNode<ModuleData> moduleNode = GradleProjectResolverUtil.findModule(externalProjectInfo.getExternalProjectStructure(), projectPath)-->Line_18 $$ if (moduleNode == null)[ FD ]
Line_11 $$ final ExternalProjectInfo externalProjectInfo = ExternalSystemUtil.getExternalProjectInfo(module.getProject(), GradleConstants.SYSTEM_ID, projectPath)-->Line_12 $$ if (externalProjectInfo == null)[ FD ]
Line_5 $$ final String externalProjectId = ExternalSystemApiUtil.getExternalProjectId(module)-->Line_20 $$ final String sourceSetId = StringUtil.substringAfter(externalProjectId, moduleNode.getData().getExternalName() + ':')[ FD ]
Line_14 $$ if (StringUtil.endsWith(externalProjectId, ":test") || StringUtil.endsWith(externalProjectId, ":main")) -->Line_32 $$ final String taskName = taskNode.getData().getName()[ CD ]
Line_20 $$ final String sourceSetId = StringUtil.substringAfter(externalProjectId, moduleNode.getData().getExternalName() + ':')-->Line_27 $$ return GradleCommonClassNames.GRADLE_API_TASKS_TESTING_TEST.equals(node.getData().getType()) && StringUtil.startsWith(sourceSetId, node.getData().getName())[ FD ]
Line_11 $$ final ExternalProjectInfo externalProjectInfo = ExternalSystemUtil.getExternalProjectInfo(module.getProject(), GradleConstants.SYSTEM_ID, projectPath)-->Line_17 $$ final DataNode<ModuleData> moduleNode = GradleProjectResolverUtil.findModule(externalProjectInfo.getExternalProjectStructure(), projectPath)[ FD ]
Line_45 $$ return ContainerUtil.map(result, new Function<String, String>() -->Line_49 $$ return path + s[ CD ]
Line_21 $$ if (sourceSetId == null)-->Line_22 $$ return ContainerUtil.emptyList()[ CD ]
Line_36 $$ if (!externalProjectId.startsWith(":")) -->Line_40 $$ if (!pathParts.isEmpty())[ CD ]
Line_14 $$ if (StringUtil.endsWith(externalProjectId, ":test") || StringUtil.endsWith(externalProjectId, ":main")) -->Line_30 $$ if (taskNode == null)[ CD ]
Line_30 $$ if (taskNode == null)-->Line_31 $$ return ContainerUtil.emptyList()[ CD ]
Line_14 $$ if (StringUtil.endsWith(externalProjectId, ":test") || StringUtil.endsWith(externalProjectId, ":main")) -->Line_15 $$ result = TEST_SOURCE_SET_TASKS[ CD ]
Line_6 $$ if (externalProjectId == null)-->Line_7 $$ return ContainerUtil.emptyList()[ CD ]
Line_5 $$ final String externalProjectId = ExternalSystemApiUtil.getExternalProjectId(module)-->Line_36 $$ if (!externalProjectId.startsWith(":")) [ FD ]
Line_9 $$ if (projectPath == null)-->Line_10 $$ return ContainerUtil.emptyList()[ CD ]
Line_23 $$ final DataNode<TaskData> taskNode = ExternalSystemApiUtil.find(moduleNode, ProjectKeys.TASK, new BooleanFunction<DataNode<TaskData>>() -->Line_32 $$ final String taskName = taskNode.getData().getName()[ FD ]
Line_4 $$ final List<String> result-->Line_15 $$ result = TEST_SOURCE_SET_TASKS[ FD ]
Line_14 $$ if (StringUtil.endsWith(externalProjectId, ":test") || StringUtil.endsWith(externalProjectId, ":main")) -->Line_33 $$ result = ContainerUtil.list("clean" + StringUtil.capitalize(taskName), taskName)[ CD ]
Line_14 $$ if (StringUtil.endsWith(externalProjectId, ":test") || StringUtil.endsWith(externalProjectId, ":main")) -->Line_18 $$ if (moduleNode == null)[ CD ]
Line_20 $$ final String sourceSetId = StringUtil.substringAfter(externalProjectId, moduleNode.getData().getExternalName() + ':')-->Line_21 $$ if (sourceSetId == null)[ FD ]
Line_14 $$ if (StringUtil.endsWith(externalProjectId, ":test") || StringUtil.endsWith(externalProjectId, ":main")) -->Line_23 $$ final DataNode<TaskData> taskNode = ExternalSystemApiUtil.find(moduleNode, ProjectKeys.TASK, new BooleanFunction<DataNode<TaskData>>() [ CD ]
Line_4 $$ final List<String> result-->Line_45 $$ return ContainerUtil.map(result, new Function<String, String>() [ FD ]
Line_5 $$ final String externalProjectId = ExternalSystemApiUtil.getExternalProjectId(module)-->Line_14 $$ if (StringUtil.endsWith(externalProjectId, ":test") || StringUtil.endsWith(externalProjectId, ":main")) [ FD ]
Line_23 $$ final DataNode<TaskData> taskNode = ExternalSystemApiUtil.find(moduleNode, ProjectKeys.TASK, new BooleanFunction<DataNode<TaskData>>() -->Line_30 $$ if (taskNode == null)[ FD ]
Line_36 $$ if (!externalProjectId.startsWith(":")) -->Line_42 $$ final String join = StringUtil.join(pathParts, ":")[ CD ]
Line_40 $$ if (!pathParts.isEmpty())-->Line_41 $$ pathParts.remove(pathParts.size() - 1)[ CD ]
Line_8 $$ final String projectPath = ExternalSystemApiUtil.getExternalProjectPath(module)-->Line_17 $$ final DataNode<ModuleData> moduleNode = GradleProjectResolverUtil.findModule(externalProjectInfo.getExternalProjectStructure(), projectPath)[ FD ]
Line_5 $$ final String externalProjectId = ExternalSystemApiUtil.getExternalProjectId(module)-->Line_39 $$ final List<String> pathParts = StringUtil.split(externalProjectId, ":")[ FD ]
Line_14 $$ if (StringUtil.endsWith(externalProjectId, ":test") || StringUtil.endsWith(externalProjectId, ":main")) -->Line_20 $$ final String sourceSetId = StringUtil.substringAfter(externalProjectId, moduleNode.getData().getExternalName() + ':')[ CD ]
Line_17 $$ final DataNode<ModuleData> moduleNode = GradleProjectResolverUtil.findModule(externalProjectInfo.getExternalProjectStructure(), projectPath)-->Line_23 $$ final DataNode<TaskData> taskNode = ExternalSystemApiUtil.find(moduleNode, ProjectKeys.TASK, new BooleanFunction<DataNode<TaskData>>() [ FD ]
Line_14 $$ if (StringUtil.endsWith(externalProjectId, ":test") || StringUtil.endsWith(externalProjectId, ":main")) -->Line_21 $$ if (sourceSetId == null)[ CD ]
Line_5 $$ final String externalProjectId = ExternalSystemApiUtil.getExternalProjectId(module)-->Line_6 $$ if (externalProjectId == null)[ FD ]
Line_14 $$ if (StringUtil.endsWith(externalProjectId, ":test") || StringUtil.endsWith(externalProjectId, ":main")) -->Line_17 $$ final DataNode<ModuleData> moduleNode = GradleProjectResolverUtil.findModule(externalProjectInfo.getExternalProjectStructure(), projectPath)[ CD ]
Line_36 $$ if (!externalProjectId.startsWith(":")) -->Line_39 $$ final List<String> pathParts = StringUtil.split(externalProjectId, ":")[ CD ]
Line_17 $$ final DataNode<ModuleData> moduleNode = GradleProjectResolverUtil.findModule(externalProjectInfo.getExternalProjectStructure(), projectPath)-->Line_20 $$ final String sourceSetId = StringUtil.substringAfter(externalProjectId, moduleNode.getData().getExternalName() + ':')[ FD ]
