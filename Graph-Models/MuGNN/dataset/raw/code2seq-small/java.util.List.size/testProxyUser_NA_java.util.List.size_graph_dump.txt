Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_31 $$ UserGroupInformation ugi = UserGroupInformation.getCurrentUser()[ CD ]
Line_5 $$ Context context = new Context()-->Line_9 $$ context.addServlet(new ServletHolder(UserServlet.class), "/bar")[ FD ]
Line_23 $$ List<String> ret = IOUtils.readLines(conn.getInputStream())-->Line_25 $$ Assert.assertEquals(OK_USER, ret.get(0))[ FD ]
Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_38 $$ Assert.assertEquals(1, ret.size())[ CD ]
Line_5 $$ Context context = new Context()-->Line_8 $$ context.addFilter(new FilterHolder(PseudoDTAFilter.class), "/*", 0)[ FD ]
Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_36 $$ Assert.assertEquals(HttpURLConnection.HTTP_OK, conn.getResponseCode())[ CD ]
Line_5 $$ Context context = new Context()-->Line_6 $$ context.setContextPath("/foo")[ FD ]
Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_25 $$ Assert.assertEquals(OK_USER, ret.get(0))[ CD ]
Line_31 $$ UserGroupInformation ugi = UserGroupInformation.getCurrentUser()-->Line_32 $$ ugi.addToken(token.getDelegationToken())[ FD ]
Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_22 $$ Assert.assertEquals(HttpURLConnection.HTTP_OK, conn.getResponseCode())[ CD ]
Line_13 $$ UserGroupInformation ugi = UserGroupInformation.createRemoteUser(FOO_USER)-->Line_32 $$ ugi.addToken(token.getDelegationToken())[ FD ]
Line_18 $$ DelegationTokenAuthenticatedURL.Token token = new DelegationTokenAuthenticatedURL.Token()-->Line_33 $$ token = new DelegationTokenAuthenticatedURL.Token()[ FD ]
Line_23 $$ List<String> ret = IOUtils.readLines(conn.getInputStream())-->Line_24 $$ Assert.assertEquals(1, ret.size())[ FD ]
Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_18 $$ DelegationTokenAuthenticatedURL.Token token = new DelegationTokenAuthenticatedURL.Token()[ CD ]
Line_13 $$ UserGroupInformation ugi = UserGroupInformation.createRemoteUser(FOO_USER)-->Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() [ FD ]
Line_23 $$ List<String> ret = IOUtils.readLines(conn.getInputStream())-->Line_39 $$ Assert.assertEquals(FOO_USER, ret.get(0))[ FD ]
Line_23 $$ List<String> ret = IOUtils.readLines(conn.getInputStream())-->Line_38 $$ Assert.assertEquals(1, ret.size())[ FD ]
Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_19 $$ DelegationTokenAuthenticatedURL aUrl = new DelegationTokenAuthenticatedURL()[ CD ]
Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_33 $$ token = new DelegationTokenAuthenticatedURL.Token()[ CD ]
Line_4 $$ final Server jetty = createJettyServer()-->Line_44 $$ jetty.stop()[ FD ]
Line_37 $$ ret = IOUtils.readLines(conn.getInputStream())-->Line_38 $$ Assert.assertEquals(1, ret.size())[ FD ]
Line_5 $$ Context context = new Context()-->Line_7 $$ jetty.setHandler(context)[ FD ]
Line_4 $$ final Server jetty = createJettyServer()-->Line_7 $$ jetty.setHandler(context)[ FD ]
Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_24 $$ Assert.assertEquals(1, ret.size())[ CD ]
Line_18 $$ DelegationTokenAuthenticatedURL.Token token = new DelegationTokenAuthenticatedURL.Token()-->Line_32 $$ ugi.addToken(token.getDelegationToken())[ FD ]
Line_23 $$ List<String> ret = IOUtils.readLines(conn.getInputStream())-->Line_37 $$ ret = IOUtils.readLines(conn.getInputStream())[ FD ]
Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_28 $$ Assert.assertEquals(HttpURLConnection.HTTP_FORBIDDEN, conn.getResponseCode())[ CD ]
Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_23 $$ List<String> ret = IOUtils.readLines(conn.getInputStream())[ CD ]
Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_37 $$ ret = IOUtils.readLines(conn.getInputStream())[ CD ]
Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_40 $$ return null[ CD ]
Line_4 $$ final Server jetty = createJettyServer()-->Line_11 $$ jetty.start()[ FD ]
Line_37 $$ ret = IOUtils.readLines(conn.getInputStream())-->Line_39 $$ Assert.assertEquals(FOO_USER, ret.get(0))[ FD ]
Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_39 $$ Assert.assertEquals(FOO_USER, ret.get(0))[ CD ]
Line_14 $$ ugi.doAs(new PrivilegedExceptionAction<Void>() -->Line_32 $$ ugi.addToken(token.getDelegationToken())[ CD ]
