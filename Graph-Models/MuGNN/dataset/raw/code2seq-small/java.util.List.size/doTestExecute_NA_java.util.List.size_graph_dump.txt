Line_9 $$ LogRecord logRecord = logRecords.get(0)-->Line_13 $$ Assert.assertEquals("Unable to place exception because no future exists with " + "ID " + _ID, logRecord.getMessage())[ FD ]
Line_12 $$ if (throwable != null) -->Line_16 $$ Assert.assertEquals("Unable to place result " + result + " because no future exists with ID " + _ID, logRecord.getMessage())[ CD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_39 $$ logRecord = logRecords.remove(0)[ FD ]
Line_10 $$ if (cancelled) -->Line_11 $$ Assert.assertEquals("Unable to place cancellation because no future exists " + "with ID " + _ID, logRecord.getMessage())[ CD ]
Line_21 $$ AsyncBroker<Long, Serializable> asyncBroker = NettyChannelAttributes.getAsyncBroker(_embeddedChannel)-->Line_22 $$ NoticeableFuture<Serializable> noticeableFuture = asyncBroker.post(_ID)[ FD ]
Line_33 $$ DefaultNoticeableFuture<Serializable> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_36 $$ defaultNoticeableFutures.put(_ID, defaultNoticeableFuture)[ FD ]
Line_21 $$ AsyncBroker<Long, Serializable> asyncBroker = NettyChannelAttributes.getAsyncBroker(_embeddedChannel)-->Line_45 $$ NoticeableFuture<Serializable> noticeableFuture = asyncBroker.post(_ID)[ FD ]
Line_35 $$ ConcurrentMap<Long, DefaultNoticeableFuture<Serializable>> defaultNoticeableFutures = ReflectionTestUtil.getFieldValue(asyncBroker, "_defaultNoticeableFutures")-->Line_51 $$ defaultNoticeableFutures.put(_ID, defaultNoticeableFuture)[ FD ]
Line_5 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(RPCResponse.class.getName(), Level.SEVERE)) -->Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_26 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_2 $$ protected void doTestExecute(boolean cancelled, String result, Throwable throwable) throws Exception -->Line_12 $$ if (throwable != null) [ FD ]
Line_33 $$ DefaultNoticeableFuture<Serializable> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_34 $$ defaultNoticeableFuture.cancel(true)[ FD ]
Line_9 $$ LogRecord logRecord = logRecords.get(0)-->Line_32 $$ Assert.assertEquals("Cancelled future with ID " + _ID, logRecord.getMessage())[ FD ]
Line_9 $$ LogRecord logRecord = logRecords.get(0)-->Line_40 $$ Assert.assertEquals("Unable to cancel future with ID " + _ID + " because it is already completed", logRecord.getMessage())[ FD ]
Line_9 $$ LogRecord logRecord = logRecords.get(0)-->Line_11 $$ Assert.assertEquals("Unable to place cancellation because no future exists " + "with ID " + _ID, logRecord.getMessage())[ FD ]
Line_25 $$ if (!cancelled) -->Line_26 $$ Assert.assertTrue(logRecords.isEmpty())[ CD ]
Line_22 $$ NoticeableFuture<Serializable> noticeableFuture = asyncBroker.post(_ID)-->Line_29 $$ Assert.assertTrue(noticeableFuture.isCancelled())[ FD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_31 $$ LogRecord logRecord = logRecords.remove(0)[ FD ]
Line_9 $$ LogRecord logRecord = logRecords.get(0)-->Line_14 $$ Assert.assertSame(throwable, logRecord.getThrown())[ FD ]
Line_39 $$ logRecord = logRecords.remove(0)-->Line_40 $$ Assert.assertEquals("Unable to cancel future with ID " + _ID + " because it is already completed", logRecord.getMessage())[ FD ]
Line_5 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(RPCResponse.class.getName(), Level.SEVERE)) -->Line_24 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_33 $$ DefaultNoticeableFuture<Serializable> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_49 $$ defaultNoticeableFuture.cancel(true)[ FD ]
Line_35 $$ ConcurrentMap<Long, DefaultNoticeableFuture<Serializable>> defaultNoticeableFutures = ReflectionTestUtil.getFieldValue(asyncBroker, "_defaultNoticeableFutures")-->Line_36 $$ defaultNoticeableFutures.put(_ID, defaultNoticeableFuture)[ FD ]
Line_2 $$ protected void doTestExecute(boolean cancelled, String result, Throwable throwable) throws Exception -->Line_14 $$ Assert.assertSame(throwable, logRecord.getThrown())[ FD ]
Line_12 $$ if (throwable != null) -->Line_13 $$ Assert.assertEquals("Unable to place exception because no future exists with " + "ID " + _ID, logRecord.getMessage())[ CD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_8 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_25 $$ if (!cancelled) -->Line_27 $$ return[ CD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_38 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_9 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_21 $$ AsyncBroker<Long, Serializable> asyncBroker = NettyChannelAttributes.getAsyncBroker(_embeddedChannel)-->Line_35 $$ ConcurrentMap<Long, DefaultNoticeableFuture<Serializable>> defaultNoticeableFutures = ReflectionTestUtil.getFieldValue(asyncBroker, "_defaultNoticeableFutures")[ FD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_30 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_21 $$ AsyncBroker<Long, Serializable> asyncBroker = NettyChannelAttributes.getAsyncBroker(_embeddedChannel)-->Line_50 $$ ConcurrentMap<Long, DefaultNoticeableFuture<Serializable>> defaultNoticeableFutures = ReflectionTestUtil.getFieldValue(asyncBroker, "_defaultNoticeableFutures")[ FD ]
Line_2 $$ protected void doTestExecute(boolean cancelled, String result, Throwable throwable) throws Exception -->Line_25 $$ if (!cancelled) [ FD ]
Line_33 $$ DefaultNoticeableFuture<Serializable> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_51 $$ defaultNoticeableFutures.put(_ID, defaultNoticeableFuture)[ FD ]
Line_9 $$ LogRecord logRecord = logRecords.get(0)-->Line_39 $$ logRecord = logRecords.remove(0)[ FD ]
Line_10 $$ if (cancelled) -->Line_12 $$ if (throwable != null) [ CD ]
Line_12 $$ if (throwable != null) -->Line_14 $$ Assert.assertSame(throwable, logRecord.getThrown())[ CD ]
Line_22 $$ NoticeableFuture<Serializable> noticeableFuture = asyncBroker.post(_ID)-->Line_47 $$ Assert.assertTrue(noticeableFuture.isCancelled())[ FD ]
Line_9 $$ LogRecord logRecord = logRecords.get(0)-->Line_16 $$ Assert.assertEquals("Unable to place result " + result + " because no future exists with ID " + _ID, logRecord.getMessage())[ FD ]
