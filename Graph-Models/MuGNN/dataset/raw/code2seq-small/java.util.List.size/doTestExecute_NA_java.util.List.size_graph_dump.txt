Line_19 $$ AsyncBroker<Long, Serializable> asyncBroker = NettyChannelAttributes.getAsyncBroker(_embeddedChannel)-->Line_42 $$ NoticeableFuture<Serializable> noticeableFuture = asyncBroker.post(_ID)[ FD ]
Line_19 $$ AsyncBroker<Long, Serializable> asyncBroker = NettyChannelAttributes.getAsyncBroker(_embeddedChannel)-->Line_33 $$ ConcurrentMap<Long, DefaultNoticeableFuture<Serializable>> defaultNoticeableFutures = ReflectionTestUtil.getFieldValue(asyncBroker, "_defaultNoticeableFutures")[ FD ]
Line_2 $$ protected void doTestExecute(boolean cancelled, String result, Throwable throwable) throws Exception -->Line_23 $$ if (!cancelled) [ FD ]
Line_6 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_29 $$ LogRecord logRecord = logRecords.remove(0)[ FD ]
Line_9 $$ if (cancelled) -->Line_10 $$ Assert.assertEquals("Unable to place cancellation because no future exists " + "with ID " + _ID, logRecord.getMessage())[ CD ]
Line_4 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(RPCResponse.class.getName(), Level.SEVERE)) -->Line_6 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_6 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_36 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_8 $$ LogRecord logRecord = logRecords.get(0)-->Line_38 $$ Assert.assertEquals("Unable to cancel future with ID " + _ID + " because it is already completed", logRecord.getMessage())[ FD ]
Line_2 $$ protected void doTestExecute(boolean cancelled, String result, Throwable throwable) throws Exception -->Line_3 $$ RPCResponse<String> rpcResponse = new RPCResponse(_ID, cancelled, result, throwable)[ CD ]
Line_11 $$ if (throwable != null) -->Line_13 $$ Assert.assertSame(throwable, logRecord.getThrown())[ CD ]
Line_31 $$ DefaultNoticeableFuture<Serializable> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_32 $$ defaultNoticeableFuture.cancel(true)[ FD ]
Line_31 $$ DefaultNoticeableFuture<Serializable> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_34 $$ defaultNoticeableFutures.put(_ID, defaultNoticeableFuture)[ FD ]
Line_33 $$ ConcurrentMap<Long, DefaultNoticeableFuture<Serializable>> defaultNoticeableFutures = ReflectionTestUtil.getFieldValue(asyncBroker, "_defaultNoticeableFutures")-->Line_34 $$ defaultNoticeableFutures.put(_ID, defaultNoticeableFuture)[ FD ]
Line_6 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_7 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_3 $$ RPCResponse<String> rpcResponse = new RPCResponse(_ID, cancelled, result, throwable)-->Line_5 $$ rpcResponse.execute(_embeddedChannel)[ FD ]
Line_8 $$ LogRecord logRecord = logRecords.get(0)-->Line_10 $$ Assert.assertEquals("Unable to place cancellation because no future exists " + "with ID " + _ID, logRecord.getMessage())[ FD ]
Line_11 $$ if (throwable != null) -->Line_15 $$ Assert.assertEquals("Unable to place result " + result + " because no future exists with ID " + _ID, logRecord.getMessage())[ CD ]
Line_19 $$ AsyncBroker<Long, Serializable> asyncBroker = NettyChannelAttributes.getAsyncBroker(_embeddedChannel)-->Line_47 $$ ConcurrentMap<Long, DefaultNoticeableFuture<Serializable>> defaultNoticeableFutures = ReflectionTestUtil.getFieldValue(asyncBroker, "_defaultNoticeableFutures")[ FD ]
Line_33 $$ ConcurrentMap<Long, DefaultNoticeableFuture<Serializable>> defaultNoticeableFutures = ReflectionTestUtil.getFieldValue(asyncBroker, "_defaultNoticeableFutures")-->Line_48 $$ defaultNoticeableFutures.put(_ID, defaultNoticeableFuture)[ FD ]
Line_31 $$ DefaultNoticeableFuture<Serializable> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_48 $$ defaultNoticeableFutures.put(_ID, defaultNoticeableFuture)[ FD ]
Line_3 $$ RPCResponse<String> rpcResponse = new RPCResponse(_ID, cancelled, result, throwable)-->Line_49 $$ rpcResponse.execute(_embeddedChannel)[ FD ]
Line_8 $$ LogRecord logRecord = logRecords.get(0)-->Line_15 $$ Assert.assertEquals("Unable to place result " + result + " because no future exists with ID " + _ID, logRecord.getMessage())[ FD ]
Line_2 $$ protected void doTestExecute(boolean cancelled, String result, Throwable throwable) throws Exception -->Line_11 $$ if (throwable != null) [ FD ]
Line_6 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_28 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_8 $$ LogRecord logRecord = logRecords.get(0)-->Line_13 $$ Assert.assertSame(throwable, logRecord.getThrown())[ FD ]
Line_4 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(RPCResponse.class.getName(), Level.SEVERE)) -->Line_22 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_3 $$ RPCResponse<String> rpcResponse = new RPCResponse(_ID, cancelled, result, throwable)-->Line_35 $$ rpcResponse.execute(_embeddedChannel)[ FD ]
Line_3 $$ RPCResponse<String> rpcResponse = new RPCResponse(_ID, cancelled, result, throwable)-->Line_43 $$ rpcResponse.execute(_embeddedChannel)[ FD ]
Line_6 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_37 $$ logRecord = logRecords.remove(0)[ FD ]
Line_31 $$ DefaultNoticeableFuture<Serializable> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_46 $$ defaultNoticeableFuture.cancel(true)[ FD ]
Line_11 $$ if (throwable != null) -->Line_12 $$ Assert.assertEquals("Unable to place exception because no future exists with " + "ID " + _ID, logRecord.getMessage())[ CD ]
Line_23 $$ if (!cancelled) -->Line_24 $$ Assert.assertTrue(logRecords.isEmpty())[ CD ]
Line_23 $$ if (!cancelled) -->Line_25 $$ return[ CD ]
Line_6 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_24 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_19 $$ AsyncBroker<Long, Serializable> asyncBroker = NettyChannelAttributes.getAsyncBroker(_embeddedChannel)-->Line_20 $$ NoticeableFuture<Serializable> noticeableFuture = asyncBroker.post(_ID)[ FD ]
Line_8 $$ LogRecord logRecord = logRecords.get(0)-->Line_30 $$ Assert.assertEquals("Cancelled future with ID " + _ID, logRecord.getMessage())[ FD ]
Line_8 $$ LogRecord logRecord = logRecords.get(0)-->Line_12 $$ Assert.assertEquals("Unable to place exception because no future exists with " + "ID " + _ID, logRecord.getMessage())[ FD ]
Line_2 $$ protected void doTestExecute(boolean cancelled, String result, Throwable throwable) throws Exception -->Line_13 $$ Assert.assertSame(throwable, logRecord.getThrown())[ FD ]
Line_20 $$ NoticeableFuture<Serializable> noticeableFuture = asyncBroker.post(_ID)-->Line_27 $$ Assert.assertTrue(noticeableFuture.isCancelled())[ FD ]
Line_9 $$ if (cancelled) -->Line_11 $$ if (throwable != null) [ CD ]
Line_8 $$ LogRecord logRecord = logRecords.get(0)-->Line_37 $$ logRecord = logRecords.remove(0)[ FD ]
Line_3 $$ RPCResponse<String> rpcResponse = new RPCResponse(_ID, cancelled, result, throwable)-->Line_21 $$ rpcResponse.execute(_embeddedChannel)[ FD ]
Line_37 $$ logRecord = logRecords.remove(0)-->Line_38 $$ Assert.assertEquals("Unable to cancel future with ID " + _ID + " because it is already completed", logRecord.getMessage())[ FD ]
Line_6 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_8 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_20 $$ NoticeableFuture<Serializable> noticeableFuture = asyncBroker.post(_ID)-->Line_44 $$ Assert.assertTrue(noticeableFuture.isCancelled())[ FD ]
