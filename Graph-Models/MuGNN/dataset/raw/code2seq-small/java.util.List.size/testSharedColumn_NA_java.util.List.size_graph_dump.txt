Line_2 $$ public void testSharedColumn() throws Exception -->Line_33 $$ assertTrue(c1.getC2() == c2)[ CD ]
Line_13 $$ s = openSession()-->Line_42 $$ s.delete(c2)[ FD ]
Line_29 $$ s = openSession()-->Line_39 $$ s = openSession()[ FD ]
Line_5 $$ C1 c1 = new C1()-->Line_33 $$ assertTrue(c1.getC2() == c2)[ FD ]
Line_6 $$ C2 c2 = new C2()-->Line_36 $$ assertTrue(c2.getC1s().contains(c1))[ FD ]
Line_13 $$ s = openSession()-->Line_20 $$ t = s.beginTransaction()[ FD ]
Line_14 $$ t = s.beginTransaction()-->Line_27 $$ t.commit()[ FD ]
Line_13 $$ s = openSession()-->Line_19 $$ s = openSession()[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_36 $$ assertTrue(c2.getC1s().contains(c1))[ CD ]
Line_20 $$ t = s.beginTransaction()-->Line_43 $$ t.commit()[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_35 $$ assertTrue(c1.getC2s().contains(c2))[ CD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_4 $$ Transaction t = s.beginTransaction()[ CD ]
Line_3 $$ Session s = openSession()-->Line_22 $$ c2 = (C2) s.createQuery("from C2").uniqueResult()[ FD ]
Line_13 $$ s = openSession()-->Line_22 $$ c2 = (C2) s.createQuery("from C2").uniqueResult()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_14 $$ t = s.beginTransaction()[ FD ]
Line_5 $$ C1 c1 = new C1()-->Line_25 $$ assertTrue(c1.getC2s().contains(c2))[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_29 $$ s = openSession()[ CD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_34 $$ assertTrue(c2.getC1() == c1)[ CD ]
Line_13 $$ s = openSession()-->Line_44 $$ s.close()[ FD ]
Line_31 $$ c1 = (C1) s.get(A.class, c1.getId())-->Line_33 $$ assertTrue(c1.getC2() == c2)[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_44 $$ s.close()[ CD ]
Line_19 $$ s = openSession()-->Line_38 $$ s.close()[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_38 $$ s.close()[ CD ]
Line_13 $$ s = openSession()-->Line_31 $$ c1 = (C1) s.get(A.class, c1.getId())[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_10 $$ s.save(c2)[ CD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_37 $$ t.commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_15 $$ List list = s.createQuery("from B").list()[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_19 $$ s = openSession()[ CD ]
Line_29 $$ s = openSession()-->Line_42 $$ s.delete(c2)[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_8 $$ c2.setC1(c1)[ CD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ Transaction t = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_20 $$ t = s.beginTransaction()[ FD ]
Line_32 $$ c2 = (C2) s.get(A.class, c2.getId())-->Line_34 $$ assertTrue(c2.getC1() == c1)[ FD ]
Line_22 $$ c2 = (C2) s.createQuery("from C2").uniqueResult()-->Line_24 $$ assertTrue(c2.getC1() == c1)[ FD ]
Line_22 $$ c2 = (C2) s.createQuery("from C2").uniqueResult()-->Line_36 $$ assertTrue(c2.getC1s().contains(c1))[ FD ]
Line_21 $$ c1 = (C1) s.createQuery("from C1").uniqueResult()-->Line_41 $$ s.delete(c1)[ FD ]
Line_19 $$ s = openSession()-->Line_28 $$ s.close()[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_7 $$ c1.setC2(c2)[ CD ]
Line_3 $$ Session s = openSession()-->Line_18 $$ s.close()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_40 $$ t = s.beginTransaction()[ FD ]
Line_5 $$ C1 c1 = new C1()-->Line_31 $$ c1 = (C1) s.get(A.class, c1.getId())[ FD ]
Line_5 $$ C1 c1 = new C1()-->Line_9 $$ s.save(c1)[ FD ]
Line_19 $$ s = openSession()-->Line_29 $$ s = openSession()[ FD ]
Line_30 $$ t = s.beginTransaction()-->Line_37 $$ t.commit()[ FD ]
Line_30 $$ t = s.beginTransaction()-->Line_40 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_3 $$ Session s = openSession()[ CD ]
Line_3 $$ Session s = openSession()-->Line_42 $$ s.delete(c2)[ FD ]
Line_6 $$ C2 c2 = new C2()-->Line_25 $$ assertTrue(c1.getC2s().contains(c2))[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_9 $$ s.save(c1)[ CD ]
Line_19 $$ s = openSession()-->Line_32 $$ c2 = (C2) s.get(A.class, c2.getId())[ FD ]
Line_6 $$ C2 c2 = new C2()-->Line_35 $$ assertTrue(c1.getC2s().contains(c2))[ FD ]
Line_13 $$ s = openSession()-->Line_38 $$ s.close()[ FD ]
Line_29 $$ s = openSession()-->Line_40 $$ t = s.beginTransaction()[ FD ]
Line_13 $$ s = openSession()-->Line_41 $$ s.delete(c1)[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_20 $$ t = s.beginTransaction()[ CD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_14 $$ t = s.beginTransaction()[ CD ]
Line_29 $$ s = openSession()-->Line_44 $$ s.close()[ FD ]
Line_6 $$ C2 c2 = new C2()-->Line_32 $$ c2 = (C2) s.get(A.class, c2.getId())[ FD ]
Line_22 $$ c2 = (C2) s.createQuery("from C2").uniqueResult()-->Line_32 $$ c2 = (C2) s.get(A.class, c2.getId())[ FD ]
Line_3 $$ Session s = openSession()-->Line_32 $$ c2 = (C2) s.get(A.class, c2.getId())[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_30 $$ t = s.beginTransaction()[ CD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_17 $$ t.commit()[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_28 $$ s.close()[ CD ]
Line_5 $$ C1 c1 = new C1()-->Line_21 $$ c1 = (C1) s.createQuery("from C1").uniqueResult()[ FD ]
Line_13 $$ s = openSession()-->Line_29 $$ s = openSession()[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_39 $$ s = openSession()[ CD ]
Line_21 $$ c1 = (C1) s.createQuery("from C1").uniqueResult()-->Line_35 $$ assertTrue(c1.getC2s().contains(c2))[ FD ]
Line_31 $$ c1 = (C1) s.get(A.class, c1.getId())-->Line_41 $$ s.delete(c1)[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_27 $$ t.commit()[ FD ]
Line_22 $$ c2 = (C2) s.createQuery("from C2").uniqueResult()-->Line_34 $$ assertTrue(c2.getC1() == c1)[ FD ]
Line_29 $$ s = openSession()-->Line_31 $$ c1 = (C1) s.get(A.class, c1.getId())[ FD ]
Line_6 $$ C2 c2 = new C2()-->Line_22 $$ c2 = (C2) s.createQuery("from C2").uniqueResult()[ FD ]
Line_3 $$ Session s = openSession()-->Line_9 $$ s.save(c1)[ FD ]
Line_31 $$ c1 = (C1) s.get(A.class, c1.getId())-->Line_35 $$ assertTrue(c1.getC2s().contains(c2))[ FD ]
Line_3 $$ Session s = openSession()-->Line_14 $$ t = s.beginTransaction()[ FD ]
Line_21 $$ c1 = (C1) s.createQuery("from C1").uniqueResult()-->Line_33 $$ assertTrue(c1.getC2() == c2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_12 $$ s.close()[ FD ]
Line_31 $$ c1 = (C1) s.get(A.class, c1.getId())-->Line_36 $$ assertTrue(c2.getC1s().contains(c1))[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_11 $$ t.commit()[ FD ]
Line_6 $$ C2 c2 = new C2()-->Line_24 $$ assertTrue(c2.getC1() == c1)[ FD ]
Line_13 $$ s = openSession()-->Line_30 $$ t = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_44 $$ s.close()[ FD ]
Line_19 $$ s = openSession()-->Line_42 $$ s.delete(c2)[ FD ]
Line_13 $$ s = openSession()-->Line_21 $$ c1 = (C1) s.createQuery("from C1").uniqueResult()[ FD ]
Line_6 $$ C2 c2 = new C2()-->Line_7 $$ c1.setC2(c2)[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_11 $$ t.commit()[ CD ]
Line_13 $$ s = openSession()-->Line_18 $$ s.close()[ FD ]
Line_20 $$ t = s.beginTransaction()-->Line_40 $$ t = s.beginTransaction()[ FD ]
Line_6 $$ C2 c2 = new C2()-->Line_26 $$ assertTrue(c2.getC1s().contains(c1))[ FD ]
Line_13 $$ s = openSession()-->Line_28 $$ s.close()[ FD ]
Line_29 $$ s = openSession()-->Line_41 $$ s.delete(c1)[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_15 $$ List list = s.createQuery("from B").list()[ CD ]
Line_3 $$ Session s = openSession()-->Line_29 $$ s = openSession()[ FD ]
Line_21 $$ c1 = (C1) s.createQuery("from C1").uniqueResult()-->Line_23 $$ assertTrue(c1.getC2() == c2)[ FD ]
Line_19 $$ s = openSession()-->Line_39 $$ s = openSession()[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_26 $$ assertTrue(c2.getC1s().contains(c1))[ CD ]
Line_20 $$ t = s.beginTransaction()-->Line_30 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_17 $$ t.commit()[ CD ]
Line_32 $$ c2 = (C2) s.get(A.class, c2.getId())-->Line_42 $$ s.delete(c2)[ FD ]
Line_29 $$ s = openSession()-->Line_38 $$ s.close()[ FD ]
Line_14 $$ t = s.beginTransaction()-->Line_30 $$ t = s.beginTransaction()[ FD ]
Line_19 $$ s = openSession()-->Line_20 $$ t = s.beginTransaction()[ FD ]
Line_22 $$ c2 = (C2) s.createQuery("from C2").uniqueResult()-->Line_35 $$ assertTrue(c1.getC2s().contains(c2))[ FD ]
Line_14 $$ t = s.beginTransaction()-->Line_20 $$ t = s.beginTransaction()[ FD ]
Line_21 $$ c1 = (C1) s.createQuery("from C1").uniqueResult()-->Line_36 $$ assertTrue(c2.getC1s().contains(c1))[ FD ]
Line_13 $$ s = openSession()-->Line_40 $$ t = s.beginTransaction()[ FD ]
Line_20 $$ t = s.beginTransaction()-->Line_27 $$ t.commit()[ FD ]
Line_39 $$ s = openSession()-->Line_41 $$ s.delete(c1)[ FD ]
Line_5 $$ C1 c1 = new C1()-->Line_36 $$ assertTrue(c2.getC1s().contains(c1))[ FD ]
Line_30 $$ t = s.beginTransaction()-->Line_43 $$ t.commit()[ FD ]
Line_22 $$ c2 = (C2) s.createQuery("from C2").uniqueResult()-->Line_25 $$ assertTrue(c1.getC2s().contains(c2))[ FD ]
Line_22 $$ c2 = (C2) s.createQuery("from C2").uniqueResult()-->Line_26 $$ assertTrue(c2.getC1s().contains(c1))[ FD ]
Line_13 $$ s = openSession()-->Line_14 $$ t = s.beginTransaction()[ FD ]
Line_29 $$ s = openSession()-->Line_30 $$ t = s.beginTransaction()[ FD ]
Line_5 $$ C1 c1 = new C1()-->Line_35 $$ assertTrue(c1.getC2s().contains(c2))[ FD ]
Line_19 $$ s = openSession()-->Line_22 $$ c2 = (C2) s.createQuery("from C2").uniqueResult()[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_12 $$ s.close()[ CD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_22 $$ c2 = (C2) s.createQuery("from C2").uniqueResult()[ CD ]
Line_3 $$ Session s = openSession()-->Line_31 $$ c1 = (C1) s.get(A.class, c1.getId())[ FD ]
Line_3 $$ Session s = openSession()-->Line_39 $$ s = openSession()[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_18 $$ s.close()[ CD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_31 $$ c1 = (C1) s.get(A.class, c1.getId())[ CD ]
Line_5 $$ C1 c1 = new C1()-->Line_41 $$ s.delete(c1)[ FD ]
Line_6 $$ C2 c2 = new C2()-->Line_10 $$ s.save(c2)[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_24 $$ assertTrue(c2.getC1() == c1)[ CD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_20 $$ t = s.beginTransaction()[ FD ]
Line_19 $$ s = openSession()-->Line_30 $$ t = s.beginTransaction()[ FD ]
Line_19 $$ s = openSession()-->Line_21 $$ c1 = (C1) s.createQuery("from C1").uniqueResult()[ FD ]
Line_14 $$ t = s.beginTransaction()-->Line_43 $$ t.commit()[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_43 $$ t.commit()[ CD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_23 $$ assertTrue(c1.getC2() == c2)[ CD ]
Line_3 $$ Session s = openSession()-->Line_21 $$ c1 = (C1) s.createQuery("from C1").uniqueResult()[ FD ]
Line_29 $$ s = openSession()-->Line_32 $$ c2 = (C2) s.get(A.class, c2.getId())[ FD ]
Line_20 $$ t = s.beginTransaction()-->Line_37 $$ t.commit()[ FD ]
Line_5 $$ C1 c1 = new C1()-->Line_7 $$ c1.setC2(c2)[ FD ]
Line_5 $$ C1 c1 = new C1()-->Line_8 $$ c2.setC1(c1)[ FD ]
Line_5 $$ C1 c1 = new C1()-->Line_26 $$ assertTrue(c2.getC1s().contains(c1))[ FD ]
Line_21 $$ c1 = (C1) s.createQuery("from C1").uniqueResult()-->Line_31 $$ c1 = (C1) s.get(A.class, c1.getId())[ FD ]
Line_3 $$ Session s = openSession()-->Line_30 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_41 $$ s.delete(c1)[ CD ]
Line_3 $$ Session s = openSession()-->Line_13 $$ s = openSession()[ FD ]
Line_5 $$ C1 c1 = new C1()-->Line_23 $$ assertTrue(c1.getC2() == c2)[ FD ]
Line_13 $$ s = openSession()-->Line_15 $$ List list = s.createQuery("from B").list()[ FD ]
Line_21 $$ c1 = (C1) s.createQuery("from C1").uniqueResult()-->Line_26 $$ assertTrue(c2.getC1s().contains(c1))[ FD ]
Line_32 $$ c2 = (C2) s.get(A.class, c2.getId())-->Line_35 $$ assertTrue(c1.getC2s().contains(c2))[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_13 $$ s = openSession()[ CD ]
Line_3 $$ Session s = openSession()-->Line_41 $$ s.delete(c1)[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_25 $$ assertTrue(c1.getC2s().contains(c2))[ CD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_42 $$ s.delete(c2)[ CD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_16 $$ assertTrue(list.size() == 2)[ CD ]
Line_14 $$ t = s.beginTransaction()-->Line_37 $$ t.commit()[ FD ]
Line_40 $$ t = s.beginTransaction()-->Line_43 $$ t.commit()[ FD ]
Line_19 $$ s = openSession()-->Line_41 $$ s.delete(c1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_40 $$ t = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_19 $$ s = openSession()[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_40 $$ t = s.beginTransaction()[ CD ]
Line_19 $$ s = openSession()-->Line_31 $$ c1 = (C1) s.get(A.class, c1.getId())[ FD ]
Line_21 $$ c1 = (C1) s.createQuery("from C1").uniqueResult()-->Line_25 $$ assertTrue(c1.getC2s().contains(c2))[ FD ]
Line_6 $$ C2 c2 = new C2()-->Line_8 $$ c2.setC1(c1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_28 $$ s.close()[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_27 $$ t.commit()[ CD ]
Line_14 $$ t = s.beginTransaction()-->Line_17 $$ t.commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_10 $$ s.save(c2)[ FD ]
Line_13 $$ s = openSession()-->Line_32 $$ c2 = (C2) s.get(A.class, c2.getId())[ FD ]
Line_15 $$ List list = s.createQuery("from B").list()-->Line_16 $$ assertTrue(list.size() == 2)[ FD ]
Line_6 $$ C2 c2 = new C2()-->Line_34 $$ assertTrue(c2.getC1() == c1)[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_43 $$ t.commit()[ FD ]
Line_19 $$ s = openSession()-->Line_44 $$ s.close()[ FD ]
Line_19 $$ s = openSession()-->Line_40 $$ t = s.beginTransaction()[ FD ]
Line_6 $$ C2 c2 = new C2()-->Line_42 $$ s.delete(c2)[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_32 $$ c2 = (C2) s.get(A.class, c2.getId())[ CD ]
Line_39 $$ s = openSession()-->Line_44 $$ s.close()[ FD ]
Line_32 $$ c2 = (C2) s.get(A.class, c2.getId())-->Line_36 $$ assertTrue(c2.getC1s().contains(c1))[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_37 $$ t.commit()[ CD ]
Line_22 $$ c2 = (C2) s.createQuery("from C2").uniqueResult()-->Line_42 $$ s.delete(c2)[ FD ]
Line_39 $$ s = openSession()-->Line_40 $$ t = s.beginTransaction()[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_30 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_6 $$ C2 c2 = new C2()[ CD ]
Line_39 $$ s = openSession()-->Line_42 $$ s.delete(c2)[ FD ]
Line_13 $$ s = openSession()-->Line_39 $$ s = openSession()[ FD ]
Line_14 $$ t = s.beginTransaction()-->Line_40 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_5 $$ C1 c1 = new C1()[ CD ]
Line_2 $$ public void testSharedColumn() throws Exception -->Line_21 $$ c1 = (C1) s.createQuery("from C1").uniqueResult()[ CD ]
Line_3 $$ Session s = openSession()-->Line_38 $$ s.close()[ FD ]
