Line_2 $$ public void testStatefulIntercept() -->Line_16 $$ s.delete(u)[ CD ]
Line_7 $$ User u = new User("Gavin", "nivag")-->Line_16 $$ s.delete(u)[ FD ]
Line_4 $$ Session s = openSession(statefulInterceptor)-->Line_11 $$ s.close()[ FD ]
Line_4 $$ Session s = openSession(statefulInterceptor)-->Line_19 $$ s.close()[ FD ]
Line_7 $$ User u = new User("Gavin", "nivag")-->Line_8 $$ s.persist(u)[ FD ]
Line_6 $$ Transaction t = s.beginTransaction()-->Line_13 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testStatefulIntercept() -->Line_18 $$ t.commit()[ CD ]
Line_4 $$ Session s = openSession(statefulInterceptor)-->Line_14 $$ List logs = s.createCriteria(Log.class).list()[ FD ]
Line_14 $$ List logs = s.createCriteria(Log.class).list()-->Line_15 $$ assertEquals(2, logs.size())[ FD ]
Line_2 $$ public void testStatefulIntercept() -->Line_13 $$ t = s.beginTransaction()[ CD ]
Line_2 $$ public void testStatefulIntercept() -->Line_19 $$ s.close()[ CD ]
Line_4 $$ Session s = openSession(statefulInterceptor)-->Line_17 $$ s.createQuery("delete from Log").executeUpdate()[ FD ]
Line_4 $$ Session s = openSession(statefulInterceptor)-->Line_13 $$ t = s.beginTransaction()[ FD ]
Line_12 $$ s = openSession()-->Line_14 $$ List logs = s.createCriteria(Log.class).list()[ FD ]
Line_2 $$ public void testStatefulIntercept() -->Line_5 $$ statefulInterceptor.setSession(s)[ CD ]
Line_13 $$ t = s.beginTransaction()-->Line_18 $$ t.commit()[ FD ]
Line_2 $$ public void testStatefulIntercept() -->Line_8 $$ s.persist(u)[ CD ]
Line_2 $$ public void testStatefulIntercept() -->Line_10 $$ t.commit()[ CD ]
Line_4 $$ Session s = openSession(statefulInterceptor)-->Line_16 $$ s.delete(u)[ FD ]
Line_2 $$ public void testStatefulIntercept() -->Line_7 $$ User u = new User("Gavin", "nivag")[ CD ]
Line_4 $$ Session s = openSession(statefulInterceptor)-->Line_6 $$ Transaction t = s.beginTransaction()[ FD ]
Line_4 $$ Session s = openSession(statefulInterceptor)-->Line_12 $$ s = openSession()[ FD ]
Line_7 $$ User u = new User("Gavin", "nivag")-->Line_9 $$ u.setPassword("vagni")[ FD ]
Line_6 $$ Transaction t = s.beginTransaction()-->Line_10 $$ t.commit()[ FD ]
Line_2 $$ public void testStatefulIntercept() -->Line_6 $$ Transaction t = s.beginTransaction()[ CD ]
Line_2 $$ public void testStatefulIntercept() -->Line_4 $$ Session s = openSession(statefulInterceptor)[ CD ]
Line_6 $$ Transaction t = s.beginTransaction()-->Line_18 $$ t.commit()[ FD ]
Line_3 $$ final StatefulInterceptor statefulInterceptor = new StatefulInterceptor()-->Line_5 $$ statefulInterceptor.setSession(s)[ FD ]
Line_12 $$ s = openSession()-->Line_19 $$ s.close()[ FD ]
Line_2 $$ public void testStatefulIntercept() -->Line_12 $$ s = openSession()[ CD ]
Line_2 $$ public void testStatefulIntercept() -->Line_15 $$ assertEquals(2, logs.size())[ CD ]
Line_2 $$ public void testStatefulIntercept() -->Line_17 $$ s.createQuery("delete from Log").executeUpdate()[ CD ]
Line_3 $$ final StatefulInterceptor statefulInterceptor = new StatefulInterceptor()-->Line_4 $$ Session s = openSession(statefulInterceptor)[ FD ]
Line_4 $$ Session s = openSession(statefulInterceptor)-->Line_5 $$ statefulInterceptor.setSession(s)[ FD ]
Line_2 $$ public void testStatefulIntercept() -->Line_11 $$ s.close()[ CD ]
Line_12 $$ s = openSession()-->Line_13 $$ t = s.beginTransaction()[ FD ]
Line_2 $$ public void testStatefulIntercept() -->Line_14 $$ List logs = s.createCriteria(Log.class).list()[ CD ]
Line_12 $$ s = openSession()-->Line_16 $$ s.delete(u)[ FD ]
Line_12 $$ s = openSession()-->Line_17 $$ s.createQuery("delete from Log").executeUpdate()[ FD ]
Line_2 $$ public void testStatefulIntercept() -->Line_3 $$ final StatefulInterceptor statefulInterceptor = new StatefulInterceptor()[ CD ]
Line_2 $$ public void testStatefulIntercept() -->Line_9 $$ u.setPassword("vagni")[ CD ]
Line_4 $$ Session s = openSession(statefulInterceptor)-->Line_8 $$ s.persist(u)[ FD ]
