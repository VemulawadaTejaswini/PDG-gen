Line_6 $$ BlobByteArrayType type = new BlobByteArrayType(lobHandler, null)-->Line_16 $$ type.nullSafeSet(ps, content, 1)[ FD ]
Line_4 $$ byte[] content = "content".getBytes()-->Line_16 $$ type.nullSafeSet(ps, content, 1)[ FD ]
Line_6 $$ BlobByteArrayType type = new BlobByteArrayType(lobHandler, null)-->Line_10 $$ assertTrue(type.equals(new byte[] [ FD ]
Line_6 $$ BlobByteArrayType type = new BlobByteArrayType(lobHandler, null)-->Line_12 $$ assertTrue(type.isMutable())[ FD ]
Line_17 $$ List synchs = TransactionSynchronizationManager.getSynchronizations()-->Line_18 $$ assertEquals(1, synchs.size())[ FD ]
Line_17 $$ List synchs = TransactionSynchronizationManager.getSynchronizations()-->Line_19 $$ ((TransactionSynchronization) synchs.get(0)).beforeCompletion()[ FD ]
Line_6 $$ BlobByteArrayType type = new BlobByteArrayType(lobHandler, null)-->Line_13 $$ assertEquals(content, type.nullSafeGet(rs, new String[] [ FD ]
Line_4 $$ byte[] content = "content".getBytes()-->Line_24 $$ verify(lobCreator).setBlobAsBytes(ps, 1, content)[ FD ]
Line_17 $$ List synchs = TransactionSynchronizationManager.getSynchronizations()-->Line_20 $$ ((TransactionSynchronization) synchs.get(0)).afterCompletion(TransactionSynchronization.STATUS_COMMITTED)[ FD ]
Line_4 $$ byte[] content = "content".getBytes()-->Line_5 $$ given(lobHandler.getBlobAsBytes(rs, "column")).willReturn(content)[ FD ]
Line_6 $$ BlobByteArrayType type = new BlobByteArrayType(lobHandler, null)-->Line_8 $$ assertEquals(Types.BLOB, type.sqlTypes()[0])[ FD ]
Line_6 $$ BlobByteArrayType type = new BlobByteArrayType(lobHandler, null)-->Line_9 $$ assertEquals(byte[].class, type.returnedClass())[ FD ]
Line_6 $$ BlobByteArrayType type = new BlobByteArrayType(lobHandler, null)-->Line_11 $$ assertTrue(Arrays.equals(new byte[] [ FD ]
Line_4 $$ byte[] content = "content".getBytes()-->Line_13 $$ assertEquals(content, type.nullSafeGet(rs, new String[] [ FD ]
Line_6 $$ BlobByteArrayType type = new BlobByteArrayType(lobHandler, null)-->Line_7 $$ assertEquals(1, type.sqlTypes().length)[ FD ]
