Line_2 $$ private String makeDescription() -->Line_21 $$ StringBuilder description = new StringBuilder()[ CD ]
Line_8 $$ onBranch = true-->Line_15 $$ onBranch = true[ FD ]
Line_4 $$ boolean onBranch-->Line_15 $$ onBranch = true[ FD ]
Line_2 $$ private String makeDescription() -->Line_27 $$ if (!myMergedToBranches.isEmpty()) [ CD ]
Line_11 $$ if (repository.isOnBranch()) -->Line_14 $$ currentBranchOrRev = currentBranch.getName()[ CD ]
Line_15 $$ onBranch = true-->Line_18 $$ onBranch = false[ FD ]
Line_5 $$ if (myRepositories.size() > 1) -->Line_7 $$ currentBranchOrRev = myBaseBranch[ CD ]
Line_12 $$ GitBranch currentBranch = repository.getCurrentBranch()-->Line_14 $$ currentBranchOrRev = currentBranch.getName()[ FD ]
Line_7 $$ currentBranchOrRev = myBaseBranch-->Line_14 $$ currentBranchOrRev = currentBranch.getName()[ FD ]
Line_11 $$ if (repository.isOnBranch()) -->Line_18 $$ onBranch = false[ CD ]
Line_10 $$ GitRepository repository = myInitialRepository-->Line_12 $$ GitBranch currentBranch = repository.getCurrentBranch()[ FD ]
Line_2 $$ private String makeDescription() -->Line_4 $$ boolean onBranch[ CD ]
Line_28 $$ String listOfMergedBranches = StringUtil.join(StringUtil.surround(ArrayUtil.toStringArray(myMergedToBranches), "<b>", "</b>"), ", ")-->Line_31 $$ description.append(GitBundle.message("branch.delete.merged_to.one", myBranchToDelete, listOfMergedBranches))[ FD ]
Line_30 $$ if (myMergedToBranches.size() == 1) -->Line_31 $$ description.append(GitBundle.message("branch.delete.merged_to.one", myBranchToDelete, listOfMergedBranches))[ CD ]
Line_21 $$ StringBuilder description = new StringBuilder()-->Line_29 $$ description.append("<br>")[ FD ]
Line_14 $$ currentBranchOrRev = currentBranch.getName()-->Line_17 $$ currentBranchOrRev = repository.getCurrentRevision()[ FD ]
Line_21 $$ StringBuilder description = new StringBuilder()-->Line_31 $$ description.append(GitBundle.message("branch.delete.merged_to.one", myBranchToDelete, listOfMergedBranches))[ FD ]
Line_30 $$ if (myMergedToBranches.size() == 1) -->Line_33 $$ description.append(GitBundle.message("branch.delete.merged_to.many", myBranchToDelete, listOfMergedBranches))[ CD ]
Line_5 $$ if (myRepositories.size() > 1) -->Line_8 $$ onBranch = true[ CD ]
Line_3 $$ String currentBranchOrRev-->Line_17 $$ currentBranchOrRev = repository.getCurrentRevision()[ FD ]
Line_10 $$ GitRepository repository = myInitialRepository-->Line_17 $$ currentBranchOrRev = repository.getCurrentRevision()[ FD ]
Line_3 $$ String currentBranchOrRev-->Line_25 $$ description.append(GitBundle.message("branch.delete.not_fully_merged.description.not_on_branch", myBranchToDelete, currentBranchOrRev, myBaseBranch))[ FD ]
Line_4 $$ boolean onBranch-->Line_8 $$ onBranch = true[ FD ]
Line_11 $$ if (repository.isOnBranch()) -->Line_17 $$ currentBranchOrRev = repository.getCurrentRevision()[ CD ]
Line_21 $$ StringBuilder description = new StringBuilder()-->Line_23 $$ description.append(GitBundle.message("branch.delete.not_fully_merged.description", myBranchToDelete, myBaseBranch))[ FD ]
Line_5 $$ if (myRepositories.size() > 1) -->Line_10 $$ GitRepository repository = myInitialRepository[ CD ]
Line_2 $$ private String makeDescription() -->Line_37 $$ return description.toString()[ CD ]
Line_22 $$ if (onBranch) -->Line_25 $$ description.append(GitBundle.message("branch.delete.not_fully_merged.description.not_on_branch", myBranchToDelete, currentBranchOrRev, myBaseBranch))[ CD ]
Line_27 $$ if (!myMergedToBranches.isEmpty()) -->Line_28 $$ String listOfMergedBranches = StringUtil.join(StringUtil.surround(ArrayUtil.toStringArray(myMergedToBranches), "<b>", "</b>"), ", ")[ CD ]
Line_2 $$ private String makeDescription() -->Line_3 $$ String currentBranchOrRev[ CD ]
Line_10 $$ GitRepository repository = myInitialRepository-->Line_11 $$ if (repository.isOnBranch()) [ FD ]
Line_22 $$ if (onBranch) -->Line_23 $$ description.append(GitBundle.message("branch.delete.not_fully_merged.description", myBranchToDelete, myBaseBranch))[ CD ]
Line_21 $$ StringBuilder description = new StringBuilder()-->Line_36 $$ description.append("<br>").append(GitBundle.message("branch.delete.warning", myBranchToDelete))[ FD ]
Line_11 $$ if (repository.isOnBranch()) -->Line_15 $$ onBranch = true[ CD ]
Line_27 $$ if (!myMergedToBranches.isEmpty()) -->Line_30 $$ if (myMergedToBranches.size() == 1) [ CD ]
Line_2 $$ private String makeDescription() -->Line_22 $$ if (onBranch) [ CD ]
Line_21 $$ StringBuilder description = new StringBuilder()-->Line_37 $$ return description.toString()[ FD ]
Line_7 $$ currentBranchOrRev = myBaseBranch-->Line_17 $$ currentBranchOrRev = repository.getCurrentRevision()[ FD ]
Line_5 $$ if (myRepositories.size() > 1) -->Line_6 $$ LOG.assertTrue(myBaseBranch != null, "Branches have unexpectedly diverged")[ CD ]
Line_21 $$ StringBuilder description = new StringBuilder()-->Line_25 $$ description.append(GitBundle.message("branch.delete.not_fully_merged.description.not_on_branch", myBranchToDelete, currentBranchOrRev, myBaseBranch))[ FD ]
Line_7 $$ currentBranchOrRev = myBaseBranch-->Line_25 $$ description.append(GitBundle.message("branch.delete.not_fully_merged.description.not_on_branch", myBranchToDelete, currentBranchOrRev, myBaseBranch))[ FD ]
Line_8 $$ onBranch = true-->Line_18 $$ onBranch = false[ FD ]
Line_27 $$ if (!myMergedToBranches.isEmpty()) -->Line_29 $$ description.append("<br>")[ CD ]
Line_11 $$ if (repository.isOnBranch()) -->Line_12 $$ GitBranch currentBranch = repository.getCurrentBranch()[ CD ]
Line_2 $$ private String makeDescription() -->Line_36 $$ description.append("<br>").append(GitBundle.message("branch.delete.warning", myBranchToDelete))[ CD ]
Line_17 $$ currentBranchOrRev = repository.getCurrentRevision()-->Line_25 $$ description.append(GitBundle.message("branch.delete.not_fully_merged.description.not_on_branch", myBranchToDelete, currentBranchOrRev, myBaseBranch))[ FD ]
Line_5 $$ if (myRepositories.size() > 1) -->Line_11 $$ if (repository.isOnBranch()) [ CD ]
Line_28 $$ String listOfMergedBranches = StringUtil.join(StringUtil.surround(ArrayUtil.toStringArray(myMergedToBranches), "<b>", "</b>"), ", ")-->Line_33 $$ description.append(GitBundle.message("branch.delete.merged_to.many", myBranchToDelete, listOfMergedBranches))[ FD ]
Line_4 $$ boolean onBranch-->Line_18 $$ onBranch = false[ FD ]
Line_3 $$ String currentBranchOrRev-->Line_14 $$ currentBranchOrRev = currentBranch.getName()[ FD ]
Line_2 $$ private String makeDescription() -->Line_5 $$ if (myRepositories.size() > 1) [ CD ]
Line_21 $$ StringBuilder description = new StringBuilder()-->Line_33 $$ description.append(GitBundle.message("branch.delete.merged_to.many", myBranchToDelete, listOfMergedBranches))[ FD ]
Line_14 $$ currentBranchOrRev = currentBranch.getName()-->Line_25 $$ description.append(GitBundle.message("branch.delete.not_fully_merged.description.not_on_branch", myBranchToDelete, currentBranchOrRev, myBaseBranch))[ FD ]
Line_3 $$ String currentBranchOrRev-->Line_7 $$ currentBranchOrRev = myBaseBranch[ FD ]
