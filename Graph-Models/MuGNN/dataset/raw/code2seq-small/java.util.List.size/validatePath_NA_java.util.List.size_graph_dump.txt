Line_13 $$ if (names.size() == 1) -->Line_14 $$ validateName(names.get(0))[ CD ]
Line_2 $$ public static void validatePath(String path) throws InvalidPathException -->Line_10 $$ throw new InvalidPathException(String.format("Model path '%s' cannot end with name separator '%s'.", path, SEPARATOR), null)[ FD ]
Line_2 $$ public static void validatePath(String path) throws InvalidPathException -->Line_20 $$ throw new InvalidPathException(String.format("Model path '%s' is invalid due to invalid name component.", path), e)[ FD ]
Line_2 $$ public static void validatePath(String path) throws InvalidPathException -->Line_9 $$ if (path.endsWith(SEPARATOR)) [ FD ]
Line_2 $$ public static void validatePath(String path) throws InvalidPathException -->Line_3 $$ if (path.isEmpty()) [ FD ]
Line_12 $$ List<String> names = PATH_SPLITTER.splitToList(path)-->Line_13 $$ if (names.size() == 1) [ FD ]
Line_2 $$ public static void validatePath(String path) throws InvalidPathException -->Line_12 $$ List<String> names = PATH_SPLITTER.splitToList(path)[ CD ]
Line_2 $$ public static void validatePath(String path) throws InvalidPathException -->Line_6 $$ if (path.startsWith(SEPARATOR)) [ CD ]
Line_2 $$ public static void validatePath(String path) throws InvalidPathException -->Line_13 $$ if (names.size() == 1) [ CD ]
Line_12 $$ List<String> names = PATH_SPLITTER.splitToList(path)-->Line_14 $$ validateName(names.get(0))[ FD ]
Line_2 $$ public static void validatePath(String path) throws InvalidPathException -->Line_7 $$ throw new InvalidPathException(String.format("Model path '%s' cannot start with name separator '%s'.", path, SEPARATOR), null)[ FD ]
Line_2 $$ public static void validatePath(String path) throws InvalidPathException -->Line_12 $$ List<String> names = PATH_SPLITTER.splitToList(path)[ FD ]
Line_16 $$ for (String name : names) -->Line_18 $$ validateName(name)[ FD ]
Line_2 $$ public static void validatePath(String path) throws InvalidPathException -->Line_9 $$ if (path.endsWith(SEPARATOR)) [ CD ]
Line_2 $$ public static void validatePath(String path) throws InvalidPathException -->Line_3 $$ if (path.isEmpty()) [ CD ]
Line_2 $$ public static void validatePath(String path) throws InvalidPathException -->Line_6 $$ if (path.startsWith(SEPARATOR)) [ FD ]
