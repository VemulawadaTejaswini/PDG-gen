Line_3 $$ for (int i = 0; i < _interfaceMethods.length; i++) -->Line_7 $$ Assert.assertEquals(method.getName() + "()@" + clazz.getName(), expectedAnnotations.length, actualAnnotations.size())[ CD ]
Line_2 $$ private void _methodListLocate(Class<?> clazz, List<Annotation[]> expectedAnnotationsList) -->Line_33 $$ Assert.assertEquals(method.getName() + "()@" + clazz.getName(), expectedAnnotation.annotationType(), actualAnnotation.annotationType())[ FD ]
Line_40 $$ Method actualMethod = (Method) actualAnnotation-->Line_41 $$ Assert.assertEquals("@Method : " + method.getName() + "()@" + clazz.getName(), expectedType.value(), actualMethod.value())[ FD ]
Line_28 $$ actualAnnotations = AnnotationLocator.locate(method, null)-->Line_7 $$ Assert.assertEquals(method.getName() + "()@" + clazz.getName(), expectedAnnotations.length, actualAnnotations.size())[ FD ]
Line_6 $$ List<Annotation> actualAnnotations = AnnotationLocator.locate(method, clazz)-->Line_7 $$ Assert.assertEquals(method.getName() + "()@" + clazz.getName(), expectedAnnotations.length, actualAnnotations.size())[ FD ]
Line_30 $$ for (int j = 0; j < expectedAnnotations.length; j++) -->Line_33 $$ Assert.assertEquals(method.getName() + "()@" + clazz.getName(), expectedAnnotation.annotationType(), actualAnnotation.annotationType())[ CD ]
Line_32 $$ Annotation actualAnnotation = actualAnnotations.get(j)-->Line_33 $$ Assert.assertEquals(method.getName() + "()@" + clazz.getName(), expectedAnnotation.annotationType(), actualAnnotation.annotationType())[ FD ]
Line_5 $$ java.lang.reflect.Method method = _interfaceMethods[i]-->Line_27 $$ method = clazz.getDeclaredMethod(method.getName(), method.getParameterTypes())[ FD ]
Line_14 $$ Mix actualMix = (Mix) actualAnnotation-->Line_37 $$ Assert.assertEquals("@Mix : " + method.getName() + "()@" + clazz.getName(), expectedMix.value(), actualMix.value())[ FD ]
Line_27 $$ method = clazz.getDeclaredMethod(method.getName(), method.getParameterTypes())-->Line_29 $$ Assert.assertEquals(method.getName() + "()@" + clazz.getName(), expectedAnnotations.length, actualAnnotations.size())[ FD ]
Line_8 $$ for (int j = 0; j < expectedAnnotations.length; j++) -->Line_12 $$ if (expectedAnnotation.annotationType() == Mix.class) [ CD ]
Line_6 $$ List<Annotation> actualAnnotations = AnnotationLocator.locate(method, clazz)-->Line_29 $$ Assert.assertEquals(method.getName() + "()@" + clazz.getName(), expectedAnnotations.length, actualAnnotations.size())[ FD ]
Line_38 $$ if (expectedAnnotation.annotationType() == Method.class) -->Line_44 $$ Type actualType = (Type) actualAnnotation[ CD ]
Line_30 $$ for (int j = 0; j < expectedAnnotations.length; j++) -->Line_32 $$ Annotation actualAnnotation = actualAnnotations.get(j)[ CD ]
Line_22 $$ Type actualType = (Type) actualAnnotation-->Line_23 $$ Assert.assertEquals("@Type : " + method.getName() + "()@" + clazz.getName(), expectedType.value(), actualType.value())[ FD ]
Line_38 $$ if (expectedAnnotation.annotationType() == Method.class) -->Line_40 $$ Method actualMethod = (Method) actualAnnotation[ CD ]
Line_3 $$ for (int i = 0; i < _interfaceMethods.length; i++) -->Line_4 $$ Annotation[] expectedAnnotations = expectedAnnotationsList.get(i)[ CD ]
Line_3 $$ for (int i = 0; i < _interfaceMethods.length; i++) -->Line_5 $$ java.lang.reflect.Method method = _interfaceMethods[i][ CD ]
Line_2 $$ private void _methodListLocate(Class<?> clazz, List<Annotation[]> expectedAnnotationsList) -->Line_19 $$ Assert.assertEquals("@Method : " + method.getName() + "()@" + clazz.getName(), expectedType.value(), actualMethod.value())[ FD ]
Line_3 $$ for (int i = 0; i < _interfaceMethods.length; i++) -->Line_4 $$ Annotation[] expectedAnnotations = expectedAnnotationsList.get(i)[ FD ]
Line_3 $$ for (int i = 0; i < _interfaceMethods.length; i++) -->Line_8 $$ for (int j = 0; j < expectedAnnotations.length; j++) [ CD ]
Line_9 $$ Annotation expectedAnnotation = expectedAnnotations[j]-->Line_16 $$ if (expectedAnnotation.annotationType() == Method.class) [ FD ]
Line_27 $$ method = clazz.getDeclaredMethod(method.getName(), method.getParameterTypes())-->Line_45 $$ Assert.assertEquals("@Type : " + method.getName() + "()@" + clazz.getName(), expectedType.value(), actualType.value())[ FD ]
Line_13 $$ Mix expectedMix = (Mix) expectedAnnotation-->Line_15 $$ Assert.assertEquals("@Mix : " + method.getName() + "()@" + clazz.getName(), expectedMix.value(), actualMix.value())[ FD ]
Line_5 $$ java.lang.reflect.Method method = _interfaceMethods[i]-->Line_29 $$ Assert.assertEquals(method.getName() + "()@" + clazz.getName(), expectedAnnotations.length, actualAnnotations.size())[ FD ]
Line_22 $$ Type actualType = (Type) actualAnnotation-->Line_45 $$ Assert.assertEquals("@Type : " + method.getName() + "()@" + clazz.getName(), expectedType.value(), actualType.value())[ FD ]
Line_16 $$ if (expectedAnnotation.annotationType() == Method.class) -->Line_19 $$ Assert.assertEquals("@Method : " + method.getName() + "()@" + clazz.getName(), expectedType.value(), actualMethod.value())[ CD ]
Line_3 $$ for (int i = 0; i < _interfaceMethods.length; i++) -->Line_6 $$ List<Annotation> actualAnnotations = AnnotationLocator.locate(method, clazz)[ CD ]
Line_10 $$ Annotation actualAnnotation = actualAnnotations.get(j)-->Line_33 $$ Assert.assertEquals(method.getName() + "()@" + clazz.getName(), expectedAnnotation.annotationType(), actualAnnotation.annotationType())[ FD ]
Line_34 $$ if (expectedAnnotation.annotationType() == Mix.class) -->Line_38 $$ if (expectedAnnotation.annotationType() == Method.class) [ CD ]
Line_9 $$ Annotation expectedAnnotation = expectedAnnotations[j]-->Line_12 $$ if (expectedAnnotation.annotationType() == Mix.class) [ FD ]
Line_2 $$ private void _methodListLocate(Class<?> clazz, List<Annotation[]> expectedAnnotationsList) -->Line_4 $$ Annotation[] expectedAnnotations = expectedAnnotationsList.get(i)[ FD ]
Line_5 $$ java.lang.reflect.Method method = _interfaceMethods[i]-->Line_23 $$ Assert.assertEquals("@Type : " + method.getName() + "()@" + clazz.getName(), expectedType.value(), actualType.value())[ FD ]
Line_16 $$ if (expectedAnnotation.annotationType() == Method.class) -->Line_23 $$ Assert.assertEquals("@Type : " + method.getName() + "()@" + clazz.getName(), expectedType.value(), actualType.value())[ CD ]
Line_18 $$ Method actualMethod = (Method) actualAnnotation-->Line_41 $$ Assert.assertEquals("@Method : " + method.getName() + "()@" + clazz.getName(), expectedType.value(), actualMethod.value())[ FD ]
Line_8 $$ for (int j = 0; j < expectedAnnotations.length; j++) -->Line_9 $$ Annotation expectedAnnotation = expectedAnnotations[j][ CD ]
Line_38 $$ if (expectedAnnotation.annotationType() == Method.class) -->Line_39 $$ Method expectedType = (Method) expectedAnnotation[ CD ]
Line_5 $$ java.lang.reflect.Method method = _interfaceMethods[i]-->Line_6 $$ List<Annotation> actualAnnotations = AnnotationLocator.locate(method, clazz)[ FD ]
Line_34 $$ if (expectedAnnotation.annotationType() == Mix.class) -->Line_36 $$ Mix actualMix = (Mix) actualAnnotation[ CD ]
Line_36 $$ Mix actualMix = (Mix) actualAnnotation-->Line_37 $$ Assert.assertEquals("@Mix : " + method.getName() + "()@" + clazz.getName(), expectedMix.value(), actualMix.value())[ FD ]
Line_2 $$ private void _methodListLocate(Class<?> clazz, List<Annotation[]> expectedAnnotationsList) -->Line_7 $$ Assert.assertEquals(method.getName() + "()@" + clazz.getName(), expectedAnnotations.length, actualAnnotations.size())[ FD ]
Line_31 $$ Annotation expectedAnnotation = expectedAnnotations[j]-->Line_34 $$ if (expectedAnnotation.annotationType() == Mix.class) [ FD ]
Line_2 $$ private void _methodListLocate(Class<?> clazz, List<Annotation[]> expectedAnnotationsList) -->Line_29 $$ Assert.assertEquals(method.getName() + "()@" + clazz.getName(), expectedAnnotations.length, actualAnnotations.size())[ FD ]
Line_12 $$ if (expectedAnnotation.annotationType() == Mix.class) -->Line_15 $$ Assert.assertEquals("@Mix : " + method.getName() + "()@" + clazz.getName(), expectedMix.value(), actualMix.value())[ CD ]
Line_12 $$ if (expectedAnnotation.annotationType() == Mix.class) -->Line_13 $$ Mix expectedMix = (Mix) expectedAnnotation[ CD ]
Line_2 $$ private void _methodListLocate(Class<?> clazz, List<Annotation[]> expectedAnnotationsList) -->Line_15 $$ Assert.assertEquals("@Mix : " + method.getName() + "()@" + clazz.getName(), expectedMix.value(), actualMix.value())[ FD ]
Line_8 $$ for (int j = 0; j < expectedAnnotations.length; j++) -->Line_11 $$ Assert.assertEquals(method.getName() + "()@" + clazz.getName(), expectedAnnotation.annotationType(), actualAnnotation.annotationType())[ CD ]
Line_6 $$ List<Annotation> actualAnnotations = AnnotationLocator.locate(method, clazz)-->Line_10 $$ Annotation actualAnnotation = actualAnnotations.get(j)[ FD ]
Line_2 $$ private void _methodListLocate(Class<?> clazz, List<Annotation[]> expectedAnnotationsList) -->Line_11 $$ Assert.assertEquals(method.getName() + "()@" + clazz.getName(), expectedAnnotation.annotationType(), actualAnnotation.annotationType())[ FD ]
Line_5 $$ java.lang.reflect.Method method = _interfaceMethods[i]-->Line_45 $$ Assert.assertEquals("@Type : " + method.getName() + "()@" + clazz.getName(), expectedType.value(), actualType.value())[ FD ]
Line_5 $$ java.lang.reflect.Method method = _interfaceMethods[i]-->Line_19 $$ Assert.assertEquals("@Method : " + method.getName() + "()@" + clazz.getName(), expectedType.value(), actualMethod.value())[ FD ]
Line_17 $$ Method expectedType = (Method) expectedAnnotation-->Line_45 $$ Assert.assertEquals("@Type : " + method.getName() + "()@" + clazz.getName(), expectedType.value(), actualType.value())[ FD ]
Line_27 $$ method = clazz.getDeclaredMethod(method.getName(), method.getParameterTypes())-->Line_6 $$ List<Annotation> actualAnnotations = AnnotationLocator.locate(method, clazz)[ FD ]
Line_28 $$ actualAnnotations = AnnotationLocator.locate(method, null)-->Line_29 $$ Assert.assertEquals(method.getName() + "()@" + clazz.getName(), expectedAnnotations.length, actualAnnotations.size())[ FD ]
Line_31 $$ Annotation expectedAnnotation = expectedAnnotations[j]-->Line_38 $$ if (expectedAnnotation.annotationType() == Method.class) [ FD ]
Line_5 $$ java.lang.reflect.Method method = _interfaceMethods[i]-->Line_15 $$ Assert.assertEquals("@Mix : " + method.getName() + "()@" + clazz.getName(), expectedMix.value(), actualMix.value())[ FD ]
Line_44 $$ Type actualType = (Type) actualAnnotation-->Line_45 $$ Assert.assertEquals("@Type : " + method.getName() + "()@" + clazz.getName(), expectedType.value(), actualType.value())[ FD ]
Line_2 $$ private void _methodListLocate(Class<?> clazz, List<Annotation[]> expectedAnnotationsList) -->Line_3 $$ for (int i = 0; i < _interfaceMethods.length; i++) [ CD ]
Line_30 $$ for (int j = 0; j < expectedAnnotations.length; j++) -->Line_32 $$ Annotation actualAnnotation = actualAnnotations.get(j)[ FD ]
Line_30 $$ for (int j = 0; j < expectedAnnotations.length; j++) -->Line_31 $$ Annotation expectedAnnotation = expectedAnnotations[j][ CD ]
Line_2 $$ private void _methodListLocate(Class<?> clazz, List<Annotation[]> expectedAnnotationsList) -->Line_45 $$ Assert.assertEquals("@Type : " + method.getName() + "()@" + clazz.getName(), expectedType.value(), actualType.value())[ FD ]
Line_5 $$ java.lang.reflect.Method method = _interfaceMethods[i]-->Line_41 $$ Assert.assertEquals("@Method : " + method.getName() + "()@" + clazz.getName(), expectedType.value(), actualMethod.value())[ FD ]
Line_8 $$ for (int j = 0; j < expectedAnnotations.length; j++) -->Line_30 $$ for (int j = 0; j < expectedAnnotations.length; j++) [ FD ]
Line_39 $$ Method expectedType = (Method) expectedAnnotation-->Line_45 $$ Assert.assertEquals("@Type : " + method.getName() + "()@" + clazz.getName(), expectedType.value(), actualType.value())[ FD ]
Line_27 $$ method = clazz.getDeclaredMethod(method.getName(), method.getParameterTypes())-->Line_37 $$ Assert.assertEquals("@Mix : " + method.getName() + "()@" + clazz.getName(), expectedMix.value(), actualMix.value())[ FD ]
Line_5 $$ java.lang.reflect.Method method = _interfaceMethods[i]-->Line_7 $$ Assert.assertEquals(method.getName() + "()@" + clazz.getName(), expectedAnnotations.length, actualAnnotations.size())[ FD ]
Line_35 $$ Mix expectedMix = (Mix) expectedAnnotation-->Line_37 $$ Assert.assertEquals("@Mix : " + method.getName() + "()@" + clazz.getName(), expectedMix.value(), actualMix.value())[ FD ]
Line_8 $$ for (int j = 0; j < expectedAnnotations.length; j++) -->Line_10 $$ Annotation actualAnnotation = actualAnnotations.get(j)[ CD ]
Line_17 $$ Method expectedType = (Method) expectedAnnotation-->Line_41 $$ Assert.assertEquals("@Method : " + method.getName() + "()@" + clazz.getName(), expectedType.value(), actualMethod.value())[ FD ]
Line_2 $$ private void _methodListLocate(Class<?> clazz, List<Annotation[]> expectedAnnotationsList) -->Line_23 $$ Assert.assertEquals("@Type : " + method.getName() + "()@" + clazz.getName(), expectedType.value(), actualType.value())[ FD ]
Line_12 $$ if (expectedAnnotation.annotationType() == Mix.class) -->Line_14 $$ Mix actualMix = (Mix) actualAnnotation[ CD ]
Line_8 $$ for (int j = 0; j < expectedAnnotations.length; j++) -->Line_32 $$ Annotation actualAnnotation = actualAnnotations.get(j)[ FD ]
Line_27 $$ method = clazz.getDeclaredMethod(method.getName(), method.getParameterTypes())-->Line_33 $$ Assert.assertEquals(method.getName() + "()@" + clazz.getName(), expectedAnnotation.annotationType(), actualAnnotation.annotationType())[ FD ]
Line_27 $$ method = clazz.getDeclaredMethod(method.getName(), method.getParameterTypes())-->Line_28 $$ actualAnnotations = AnnotationLocator.locate(method, null)[ FD ]
Line_34 $$ if (expectedAnnotation.annotationType() == Mix.class) -->Line_35 $$ Mix expectedMix = (Mix) expectedAnnotation[ CD ]
Line_6 $$ List<Annotation> actualAnnotations = AnnotationLocator.locate(method, clazz)-->Line_28 $$ actualAnnotations = AnnotationLocator.locate(method, null)[ FD ]
Line_38 $$ if (expectedAnnotation.annotationType() == Method.class) -->Line_45 $$ Assert.assertEquals("@Type : " + method.getName() + "()@" + clazz.getName(), expectedType.value(), actualType.value())[ CD ]
Line_8 $$ for (int j = 0; j < expectedAnnotations.length; j++) -->Line_10 $$ Annotation actualAnnotation = actualAnnotations.get(j)[ FD ]
Line_16 $$ if (expectedAnnotation.annotationType() == Method.class) -->Line_17 $$ Method expectedType = (Method) expectedAnnotation[ CD ]
Line_30 $$ for (int j = 0; j < expectedAnnotations.length; j++) -->Line_34 $$ if (expectedAnnotation.annotationType() == Mix.class) [ CD ]
Line_5 $$ java.lang.reflect.Method method = _interfaceMethods[i]-->Line_33 $$ Assert.assertEquals(method.getName() + "()@" + clazz.getName(), expectedAnnotation.annotationType(), actualAnnotation.annotationType())[ FD ]
Line_9 $$ Annotation expectedAnnotation = expectedAnnotations[j]-->Line_34 $$ if (expectedAnnotation.annotationType() == Mix.class) [ FD ]
Line_5 $$ java.lang.reflect.Method method = _interfaceMethods[i]-->Line_28 $$ actualAnnotations = AnnotationLocator.locate(method, null)[ FD ]
Line_17 $$ Method expectedType = (Method) expectedAnnotation-->Line_23 $$ Assert.assertEquals("@Type : " + method.getName() + "()@" + clazz.getName(), expectedType.value(), actualType.value())[ FD ]
Line_9 $$ Annotation expectedAnnotation = expectedAnnotations[j]-->Line_33 $$ Assert.assertEquals(method.getName() + "()@" + clazz.getName(), expectedAnnotation.annotationType(), actualAnnotation.annotationType())[ FD ]
Line_9 $$ Annotation expectedAnnotation = expectedAnnotations[j]-->Line_38 $$ if (expectedAnnotation.annotationType() == Method.class) [ FD ]
Line_27 $$ method = clazz.getDeclaredMethod(method.getName(), method.getParameterTypes())-->Line_41 $$ Assert.assertEquals("@Method : " + method.getName() + "()@" + clazz.getName(), expectedType.value(), actualMethod.value())[ FD ]
Line_5 $$ java.lang.reflect.Method method = _interfaceMethods[i]-->Line_11 $$ Assert.assertEquals(method.getName() + "()@" + clazz.getName(), expectedAnnotation.annotationType(), actualAnnotation.annotationType())[ FD ]
Line_6 $$ List<Annotation> actualAnnotations = AnnotationLocator.locate(method, clazz)-->Line_32 $$ Annotation actualAnnotation = actualAnnotations.get(j)[ FD ]
Line_28 $$ actualAnnotations = AnnotationLocator.locate(method, null)-->Line_32 $$ Annotation actualAnnotation = actualAnnotations.get(j)[ FD ]
Line_2 $$ private void _methodListLocate(Class<?> clazz, List<Annotation[]> expectedAnnotationsList) -->Line_41 $$ Assert.assertEquals("@Method : " + method.getName() + "()@" + clazz.getName(), expectedType.value(), actualMethod.value())[ FD ]
Line_18 $$ Method actualMethod = (Method) actualAnnotation-->Line_19 $$ Assert.assertEquals("@Method : " + method.getName() + "()@" + clazz.getName(), expectedType.value(), actualMethod.value())[ FD ]
Line_14 $$ Mix actualMix = (Mix) actualAnnotation-->Line_15 $$ Assert.assertEquals("@Mix : " + method.getName() + "()@" + clazz.getName(), expectedMix.value(), actualMix.value())[ FD ]
Line_16 $$ if (expectedAnnotation.annotationType() == Method.class) -->Line_22 $$ Type actualType = (Type) actualAnnotation[ CD ]
Line_2 $$ private void _methodListLocate(Class<?> clazz, List<Annotation[]> expectedAnnotationsList) -->Line_37 $$ Assert.assertEquals("@Mix : " + method.getName() + "()@" + clazz.getName(), expectedMix.value(), actualMix.value())[ FD ]
Line_2 $$ private void _methodListLocate(Class<?> clazz, List<Annotation[]> expectedAnnotationsList) -->Line_6 $$ List<Annotation> actualAnnotations = AnnotationLocator.locate(method, clazz)[ FD ]
Line_16 $$ if (expectedAnnotation.annotationType() == Method.class) -->Line_18 $$ Method actualMethod = (Method) actualAnnotation[ CD ]
Line_27 $$ method = clazz.getDeclaredMethod(method.getName(), method.getParameterTypes())-->Line_7 $$ Assert.assertEquals(method.getName() + "()@" + clazz.getName(), expectedAnnotations.length, actualAnnotations.size())[ FD ]
Line_5 $$ java.lang.reflect.Method method = _interfaceMethods[i]-->Line_37 $$ Assert.assertEquals("@Mix : " + method.getName() + "()@" + clazz.getName(), expectedMix.value(), actualMix.value())[ FD ]
Line_38 $$ if (expectedAnnotation.annotationType() == Method.class) -->Line_41 $$ Assert.assertEquals("@Method : " + method.getName() + "()@" + clazz.getName(), expectedType.value(), actualMethod.value())[ CD ]
Line_10 $$ Annotation actualAnnotation = actualAnnotations.get(j)-->Line_11 $$ Assert.assertEquals(method.getName() + "()@" + clazz.getName(), expectedAnnotation.annotationType(), actualAnnotation.annotationType())[ FD ]
Line_9 $$ Annotation expectedAnnotation = expectedAnnotations[j]-->Line_11 $$ Assert.assertEquals(method.getName() + "()@" + clazz.getName(), expectedAnnotation.annotationType(), actualAnnotation.annotationType())[ FD ]
Line_34 $$ if (expectedAnnotation.annotationType() == Mix.class) -->Line_37 $$ Assert.assertEquals("@Mix : " + method.getName() + "()@" + clazz.getName(), expectedMix.value(), actualMix.value())[ CD ]
Line_13 $$ Mix expectedMix = (Mix) expectedAnnotation-->Line_37 $$ Assert.assertEquals("@Mix : " + method.getName() + "()@" + clazz.getName(), expectedMix.value(), actualMix.value())[ FD ]
Line_17 $$ Method expectedType = (Method) expectedAnnotation-->Line_19 $$ Assert.assertEquals("@Method : " + method.getName() + "()@" + clazz.getName(), expectedType.value(), actualMethod.value())[ FD ]
Line_31 $$ Annotation expectedAnnotation = expectedAnnotations[j]-->Line_33 $$ Assert.assertEquals(method.getName() + "()@" + clazz.getName(), expectedAnnotation.annotationType(), actualAnnotation.annotationType())[ FD ]
Line_12 $$ if (expectedAnnotation.annotationType() == Mix.class) -->Line_16 $$ if (expectedAnnotation.annotationType() == Method.class) [ CD ]
Line_2 $$ private void _methodListLocate(Class<?> clazz, List<Annotation[]> expectedAnnotationsList) -->Line_27 $$ method = clazz.getDeclaredMethod(method.getName(), method.getParameterTypes())[ FD ]
Line_39 $$ Method expectedType = (Method) expectedAnnotation-->Line_41 $$ Assert.assertEquals("@Method : " + method.getName() + "()@" + clazz.getName(), expectedType.value(), actualMethod.value())[ FD ]
