Line_16 $$ boolean duplicate = false-->Line_19 $$ duplicate = true[ FD ]
Line_15 $$ for (CommittedChangeList list : changes) -->Line_28 $$ result.add(list)[ FD ]
Line_14 $$ final Iterator<Boolean> iterator = present == null ? null : present.iterator()-->Line_32 $$ writeIndexEntry(list.getNumber(), list.getCommitDate().getTime(), position, present == null ? false : iterator.next())[ FD ]
Line_23 $$ if (duplicate) -->Line_24 $$ debug("Skipping duplicate changelist " + list.getNumber())[ CD ]
Line_2 $$ public List<CommittedChangeList> writeChanges(final List<CommittedChangeList> changes, @Nullable final List<Boolean> present) throws IOException -->Line_40 $$ return result[ CD ]
Line_2 $$ public List<CommittedChangeList> writeChanges(final List<CommittedChangeList> changes, @Nullable final List<Boolean> present) throws IOException -->Line_13 $$ IndexEntry[] entries = readLastIndexEntries(0, changes.size())[ FD ]
Line_29 $$ long position = myStream.getFilePointer()-->Line_32 $$ writeIndexEntry(list.getNumber(), list.getCommitDate().getTime(), position, present == null ? false : iterator.next())[ FD ]
Line_2 $$ public List<CommittedChangeList> writeChanges(final List<CommittedChangeList> changes, @Nullable final List<Boolean> present) throws IOException -->Line_6 $$ openStreams()[ CD ]
Line_15 $$ for (CommittedChangeList list : changes) -->Line_31 $$ updateCachedRange(list)[ FD ]
Line_8 $$ if (wasEmpty) -->Line_10 $$ writeHeader()[ CD ]
Line_2 $$ public List<CommittedChangeList> writeChanges(final List<CommittedChangeList> changes, @Nullable final List<Boolean> present) throws IOException -->Line_3 $$ assert present == null || present.size() == changes.size()[ FD ]
Line_15 $$ for (CommittedChangeList list : changes) -->Line_32 $$ writeIndexEntry(list.getNumber(), list.getCommitDate().getTime(), position, present == null ? false : iterator.next())[ FD ]
Line_2 $$ public List<CommittedChangeList> writeChanges(final List<CommittedChangeList> changes, @Nullable final List<Boolean> present) throws IOException -->Line_4 $$ List<CommittedChangeList> result = new ArrayList<CommittedChangeList>(changes.size())[ FD ]
Line_2 $$ public List<CommittedChangeList> writeChanges(final List<CommittedChangeList> changes, @Nullable final List<Boolean> present) throws IOException -->Line_14 $$ final Iterator<Boolean> iterator = present == null ? null : present.iterator()[ FD ]
Line_18 $$ if (list.getCommitDate().getTime() == entry.date && list.getNumber() == entry.number) -->Line_19 $$ duplicate = true[ CD ]
Line_4 $$ List<CommittedChangeList> result = new ArrayList<CommittedChangeList>(changes.size())-->Line_28 $$ result.add(list)[ FD ]
Line_15 $$ for (CommittedChangeList list : changes) -->Line_18 $$ if (list.getCommitDate().getTime() == entry.date && list.getNumber() == entry.number) [ FD ]
Line_2 $$ public List<CommittedChangeList> writeChanges(final List<CommittedChangeList> changes, @Nullable final List<Boolean> present) throws IOException -->Line_5 $$ boolean wasEmpty = isEmpty()[ CD ]
Line_15 $$ for (CommittedChangeList list : changes) -->Line_30 $$ myChangesProvider.writeChangeList(myStream, list)[ FD ]
Line_15 $$ for (CommittedChangeList list : changes) -->Line_27 $$ debug("Writing incoming changelist " + list.getNumber())[ FD ]
Line_15 $$ for (CommittedChangeList list : changes) -->Line_24 $$ debug("Skipping duplicate changelist " + list.getNumber())[ FD ]
Line_2 $$ public List<CommittedChangeList> writeChanges(final List<CommittedChangeList> changes, @Nullable final List<Boolean> present) throws IOException -->Line_4 $$ List<CommittedChangeList> result = new ArrayList<CommittedChangeList>(changes.size())[ CD ]
