Line_3 $$ List<String> result = expressionResolver.resolve(context, Arrays.asList("<.text1--->Line_4 $$ assertThat(result.size(), equalTo(1))[ FD ]
Line_2 $$ public void testExpression_MultiParts() throws Exception -->Line_3 $$ List<String> result = expressionResolver.resolve(context, Arrays.asList("<.text1-[ CD ]
Line_3 $$ List<String> result = expressionResolver.resolve(context, Arrays.asList("<.text1--->Line_5 $$ assertThat(result.get(0), equalTo(".text1-" + DateTimeFormat.forPattern("YYYY.MM.dd").print(new DateTime(context.getStartTime(), UTC)) + "-text2-" + DateTimeFormat.forPattern("YYYY.MM.dd").print(new DateTime(context.getStartTime(), UTC).withDayOfMonth(1))))[ FD ]
Line_2 $$ public void testExpression_MultiParts() throws Exception -->Line_5 $$ assertThat(result.get(0), equalTo(".text1-" + DateTimeFormat.forPattern("YYYY.MM.dd").print(new DateTime(context.getStartTime(), UTC)) + "-text2-" + DateTimeFormat.forPattern("YYYY.MM.dd").print(new DateTime(context.getStartTime(), UTC).withDayOfMonth(1))))[ CD ]
Line_2 $$ public void testExpression_MultiParts() throws Exception -->Line_4 $$ assertThat(result.size(), equalTo(1))[ CD ]
