Line_2 $$ public void testExpression_CustomTimeZoneInSetting() throws Exception -->Line_15 $$ if (hoursOffset >= 0) [ CD ]
Line_25 $$ List<String> results = expressionResolver.resolve(context, Arrays.asList("<.marvel--->Line_26 $$ assertThat(results.size(), equalTo(1))[ FD ]
Line_6 $$ if (randomBoolean()) -->Line_8 $$ timeZone = DateTimeZone.forOffsetHours(hoursOffset)[ CD ]
Line_2 $$ public void testExpression_CustomTimeZoneInSetting() throws Exception -->Line_24 $$ Context context = new Context(this.context.getState(), this.context.getOptions(), now.getMillis())[ CD ]
Line_7 $$ hoursOffset = randomIntBetween(-12, 14)-->Line_10 $$ hoursOffset = randomIntBetween(-11, 13)[ FD ]
Line_11 $$ minutesOffset = randomIntBetween(0, 59)-->Line_12 $$ timeZone = DateTimeZone.forOffsetHoursMinutes(hoursOffset, minutesOffset)[ FD ]
Line_2 $$ public void testExpression_CustomTimeZoneInSetting() throws Exception -->Line_28 $$ assertThat(results.get(0), equalTo(".marvel-" + DateTimeFormat.forPattern("YYYY.MM.dd").print(now.withZone(timeZone))))[ CD ]
Line_7 $$ hoursOffset = randomIntBetween(-12, 14)-->Line_12 $$ timeZone = DateTimeZone.forOffsetHoursMinutes(hoursOffset, minutesOffset)[ FD ]
Line_5 $$ int minutesOffset = 0-->Line_11 $$ minutesOffset = randomIntBetween(0, 59)[ FD ]
Line_4 $$ int hoursOffset-->Line_15 $$ if (hoursOffset >= 0) [ FD ]
Line_8 $$ timeZone = DateTimeZone.forOffsetHours(hoursOffset)-->Line_27 $$ logger.info("timezone: [[ FD ]
Line_10 $$ hoursOffset = randomIntBetween(-11, 13)-->Line_12 $$ timeZone = DateTimeZone.forOffsetHoursMinutes(hoursOffset, minutesOffset)[ FD ]
Line_3 $$ DateTimeZone timeZone-->Line_27 $$ logger.info("timezone: [[ FD ]
Line_12 $$ timeZone = DateTimeZone.forOffsetHoursMinutes(hoursOffset, minutesOffset)-->Line_22 $$ Settings settings = Settings.builder().put("date_math_expression_resolver.default_time_zone", timeZone.getID()).build()[ FD ]
Line_8 $$ timeZone = DateTimeZone.forOffsetHours(hoursOffset)-->Line_12 $$ timeZone = DateTimeZone.forOffsetHoursMinutes(hoursOffset, minutesOffset)[ FD ]
Line_4 $$ int hoursOffset-->Line_7 $$ hoursOffset = randomIntBetween(-12, 14)[ FD ]
Line_14 $$ DateTime now-->Line_28 $$ assertThat(results.get(0), equalTo(".marvel-" + DateTimeFormat.forPattern("YYYY.MM.dd").print(now.withZone(timeZone))))[ FD ]
Line_24 $$ Context context = new Context(this.context.getState(), this.context.getOptions(), now.getMillis())-->Line_25 $$ List<String> results = expressionResolver.resolve(context, Arrays.asList("<.marvel-[ FD ]
Line_7 $$ hoursOffset = randomIntBetween(-12, 14)-->Line_8 $$ timeZone = DateTimeZone.forOffsetHours(hoursOffset)[ FD ]
Line_14 $$ DateTime now-->Line_27 $$ logger.info("timezone: [[ FD ]
Line_3 $$ DateTimeZone timeZone-->Line_8 $$ timeZone = DateTimeZone.forOffsetHours(hoursOffset)[ FD ]
Line_2 $$ public void testExpression_CustomTimeZoneInSetting() throws Exception -->Line_25 $$ List<String> results = expressionResolver.resolve(context, Arrays.asList("<.marvel-[ CD ]
Line_2 $$ public void testExpression_CustomTimeZoneInSetting() throws Exception -->Line_3 $$ DateTimeZone timeZone[ CD ]
Line_2 $$ public void testExpression_CustomTimeZoneInSetting() throws Exception -->Line_5 $$ int minutesOffset = 0[ CD ]
Line_2 $$ public void testExpression_CustomTimeZoneInSetting() throws Exception -->Line_4 $$ int hoursOffset[ CD ]
Line_3 $$ DateTimeZone timeZone-->Line_22 $$ Settings settings = Settings.builder().put("date_math_expression_resolver.default_time_zone", timeZone.getID()).build()[ FD ]
Line_8 $$ timeZone = DateTimeZone.forOffsetHours(hoursOffset)-->Line_22 $$ Settings settings = Settings.builder().put("date_math_expression_resolver.default_time_zone", timeZone.getID()).build()[ FD ]
Line_14 $$ DateTime now-->Line_24 $$ Context context = new Context(this.context.getState(), this.context.getOptions(), now.getMillis())[ FD ]
Line_5 $$ int minutesOffset = 0-->Line_12 $$ timeZone = DateTimeZone.forOffsetHoursMinutes(hoursOffset, minutesOffset)[ FD ]
Line_6 $$ if (randomBoolean()) -->Line_11 $$ minutesOffset = randomIntBetween(0, 59)[ CD ]
Line_6 $$ if (randomBoolean()) -->Line_7 $$ hoursOffset = randomIntBetween(-12, 14)[ CD ]
Line_2 $$ public void testExpression_CustomTimeZoneInSetting() throws Exception -->Line_22 $$ Settings settings = Settings.builder().put("date_math_expression_resolver.default_time_zone", timeZone.getID()).build()[ CD ]
Line_6 $$ if (randomBoolean()) -->Line_12 $$ timeZone = DateTimeZone.forOffsetHoursMinutes(hoursOffset, minutesOffset)[ CD ]
Line_2 $$ public void testExpression_CustomTimeZoneInSetting() throws Exception -->Line_26 $$ assertThat(results.size(), equalTo(1))[ CD ]
Line_3 $$ DateTimeZone timeZone-->Line_12 $$ timeZone = DateTimeZone.forOffsetHoursMinutes(hoursOffset, minutesOffset)[ FD ]
Line_12 $$ timeZone = DateTimeZone.forOffsetHoursMinutes(hoursOffset, minutesOffset)-->Line_27 $$ logger.info("timezone: [[ FD ]
Line_12 $$ timeZone = DateTimeZone.forOffsetHoursMinutes(hoursOffset, minutesOffset)-->Line_28 $$ assertThat(results.get(0), equalTo(".marvel-" + DateTimeFormat.forPattern("YYYY.MM.dd").print(now.withZone(timeZone))))[ FD ]
Line_25 $$ List<String> results = expressionResolver.resolve(context, Arrays.asList("<.marvel--->Line_27 $$ logger.info("timezone: [[ FD ]
Line_4 $$ int hoursOffset-->Line_10 $$ hoursOffset = randomIntBetween(-11, 13)[ FD ]
Line_7 $$ hoursOffset = randomIntBetween(-12, 14)-->Line_15 $$ if (hoursOffset >= 0) [ FD ]
Line_2 $$ public void testExpression_CustomTimeZoneInSetting() throws Exception -->Line_23 $$ DateMathExpressionResolver expressionResolver = new DateMathExpressionResolver(settings)[ CD ]
Line_25 $$ List<String> results = expressionResolver.resolve(context, Arrays.asList("<.marvel--->Line_28 $$ assertThat(results.get(0), equalTo(".marvel-" + DateTimeFormat.forPattern("YYYY.MM.dd").print(now.withZone(timeZone))))[ FD ]
Line_2 $$ public void testExpression_CustomTimeZoneInSetting() throws Exception -->Line_14 $$ DateTime now[ CD ]
Line_3 $$ DateTimeZone timeZone-->Line_28 $$ assertThat(results.get(0), equalTo(".marvel-" + DateTimeFormat.forPattern("YYYY.MM.dd").print(now.withZone(timeZone))))[ FD ]
Line_6 $$ if (randomBoolean()) -->Line_10 $$ hoursOffset = randomIntBetween(-11, 13)[ CD ]
Line_2 $$ public void testExpression_CustomTimeZoneInSetting() throws Exception -->Line_6 $$ if (randomBoolean()) [ CD ]
Line_4 $$ int hoursOffset-->Line_12 $$ timeZone = DateTimeZone.forOffsetHoursMinutes(hoursOffset, minutesOffset)[ FD ]
Line_8 $$ timeZone = DateTimeZone.forOffsetHours(hoursOffset)-->Line_28 $$ assertThat(results.get(0), equalTo(".marvel-" + DateTimeFormat.forPattern("YYYY.MM.dd").print(now.withZone(timeZone))))[ FD ]
Line_10 $$ hoursOffset = randomIntBetween(-11, 13)-->Line_15 $$ if (hoursOffset >= 0) [ FD ]
Line_23 $$ DateMathExpressionResolver expressionResolver = new DateMathExpressionResolver(settings)-->Line_25 $$ List<String> results = expressionResolver.resolve(context, Arrays.asList("<.marvel-[ FD ]
Line_4 $$ int hoursOffset-->Line_8 $$ timeZone = DateTimeZone.forOffsetHours(hoursOffset)[ FD ]
Line_2 $$ public void testExpression_CustomTimeZoneInSetting() throws Exception -->Line_27 $$ logger.info("timezone: [[ CD ]
