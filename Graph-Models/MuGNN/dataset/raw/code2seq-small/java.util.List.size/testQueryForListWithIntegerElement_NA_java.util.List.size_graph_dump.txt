Line_2 $$ public void testQueryForListWithIntegerElement() throws Exception -->Line_9 $$ verify(this.resultSet).close()[ CD ]
Line_2 $$ public void testQueryForListWithIntegerElement() throws Exception -->Line_10 $$ verify(this.statement).close()[ CD ]
Line_2 $$ public void testQueryForListWithIntegerElement() throws Exception -->Line_7 $$ assertEquals("All rows returned", 1, li.size())[ CD ]
Line_2 $$ public void testQueryForListWithIntegerElement() throws Exception -->Line_4 $$ given(this.resultSet.next()).willReturn(true, false)[ CD ]
Line_2 $$ public void testQueryForListWithIntegerElement() throws Exception -->Line_3 $$ String sql = "SELECT AGE FROM CUSTMR WHERE ID < 3"[ CD ]
Line_6 $$ List<Integer> li = this.template.queryForList(sql, Integer.class)-->Line_7 $$ assertEquals("All rows returned", 1, li.size())[ FD ]
Line_2 $$ public void testQueryForListWithIntegerElement() throws Exception -->Line_8 $$ assertEquals("Element is Integer", 11, li.get(0).intValue())[ CD ]
Line_2 $$ public void testQueryForListWithIntegerElement() throws Exception -->Line_5 $$ given(this.resultSet.getInt(1)).willReturn(11)[ CD ]
Line_2 $$ public void testQueryForListWithIntegerElement() throws Exception -->Line_6 $$ List<Integer> li = this.template.queryForList(sql, Integer.class)[ CD ]
Line_3 $$ String sql = "SELECT AGE FROM CUSTMR WHERE ID < 3"-->Line_6 $$ List<Integer> li = this.template.queryForList(sql, Integer.class)[ FD ]
Line_6 $$ List<Integer> li = this.template.queryForList(sql, Integer.class)-->Line_8 $$ assertEquals("Element is Integer", 11, li.get(0).intValue())[ FD ]
