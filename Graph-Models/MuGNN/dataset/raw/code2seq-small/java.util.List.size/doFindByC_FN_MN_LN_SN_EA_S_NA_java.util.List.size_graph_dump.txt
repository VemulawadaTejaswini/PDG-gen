Line_65 $$ Long[] siteGroupIdsArray = siteGroupIds.toArray(new Long[siteGroupIds.size()])-->Line_71 $$ params4.put("groupsUserGroups", siteGroupIdsArray)[ FD ]
Line_201 $$ if (status != WorkflowConstants.STATUS_ANY) -->Line_202 $$ qPos.add(status)[ CD ]
Line_141 $$ sql = StringUtil.replace(sql, _STATUS_SQL, StringPool.BLANK)-->Line_169 $$ sb.append(replaceJoinAndWhere(sql, params6))[ FD ]
Line_134 $$ String sql = CustomSQLUtil.get(FIND_BY_C_FN_MN_LN_SN_EA_S)-->Line_159 $$ sb.append(replaceJoinAndWhere(sql, params4))[ FD ]
Line_136 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.middleName)", StringPool.LIKE, false, middleNames)-->Line_178 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_231 $$ if (params5 != null) -->Line_240 $$ if (status != WorkflowConstants.STATUS_ANY) [ CD ]
Line_244 $$ if (params6 != null) -->Line_246 $$ qPos.add(companyId)[ CD ]
Line_137 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.lastName)", StringPool.LIKE, false, lastNames)-->Line_169 $$ sb.append(replaceJoinAndWhere(sql, params6))[ FD ]
Line_64 $$ if (!siteGroupIds.isEmpty()) -->Line_70 $$ params4.remove("usersGroups")[ CD ]
Line_73 $$ if (!userGroupIds.isEmpty()) -->Line_75 $$ params5.remove("usersGroups")[ CD ]
Line_16 $$ LinkedHashMap<String, Object> params6 = null-->Line_167 $$ if (params6 != null) [ FD ]
Line_20 $$ if (groupId > 0) -->Line_21 $$ groupIds = new Long[] [ CD ]
Line_55 $$ params2 = new LinkedHashMap(params1)-->Line_58 $$ params2.put("usersOrgs", organizationIds)[ FD ]
Line_96 $$ params2 = new LinkedHashMap(params1)-->Line_126 $$ params2 = new LinkedHashMap(params1)[ FD ]
Line_141 $$ sql = StringUtil.replace(sql, _STATUS_SQL, StringPool.BLANK)-->Line_149 $$ sb.append(replaceJoinAndWhere(sql, params2))[ FD ]
Line_73 $$ if (!userGroupIds.isEmpty()) -->Line_74 $$ params5 = new LinkedHashMap(params1)[ CD ]
Line_138 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.screenName)", StringPool.LIKE, false, screenNames)-->Line_159 $$ sb.append(replaceJoinAndWhere(sql, params4))[ FD ]
Line_64 $$ if (!siteGroupIds.isEmpty()) -->Line_69 $$ params4 = new LinkedHashMap(params1)[ CD ]
Line_3 $$ firstNames = CustomSQLUtil.keywords(firstNames)-->Line_184 $$ qPos.add(firstNames, 2)[ FD ]
Line_13 $$ LinkedHashMap<String, Object> params3 = null-->Line_205 $$ if (params3 != null) [ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_228 $$ qPos.add(status)[ FD ]
Line_65 $$ Long[] siteGroupIdsArray = siteGroupIds.toArray(new Long[siteGroupIds.size()])-->Line_68 $$ params3.put("groupsOrgs", siteGroupIdsArray)[ FD ]
Line_205 $$ if (params3 != null) -->Line_214 $$ if (status != WorkflowConstants.STATUS_ANY) [ CD ]
Line_16 $$ LinkedHashMap<String, Object> params6 = null-->Line_120 $$ params6.put("usersUserGroups", userGroupIds.toArray(new Long[userGroupIds.size()]))[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_12 $$ LinkedHashMap<String, Object> params2 = null[ CD ]
Line_189 $$ if (status != WorkflowConstants.STATUS_ANY) -->Line_190 $$ qPos.add(status)[ CD ]
Line_105 $$ if (!siteGroupIds.isEmpty()) -->Line_108 $$ params3.remove("usersRoles")[ CD ]
Line_135 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.firstName)", StringPool.LIKE, false, firstNames)-->Line_177 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_188 $$ qPos.add(emailAddresses, 2)[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_194 $$ qPos.add(companyId)[ FD ]
Line_192 $$ if (params2 != null) -->Line_195 $$ qPos.add(false)[ CD ]
Line_12 $$ LinkedHashMap<String, Object> params2 = null-->Line_149 $$ sb.append(replaceJoinAndWhere(sql, params2))[ FD ]
Line_42 $$ Group group = GroupLocalServiceUtil.fetchGroup(groupId)-->Line_43 $$ if (group == null) [ FD ]
Line_143 $$ StringBundler sb = new StringBundler(14)-->Line_176 $$ sql = sb.toString()[ FD ]
Line_107 $$ params3 = new LinkedHashMap(params1)-->Line_109 $$ params3.put("usersGroups", siteGroupIdsArray)[ FD ]
Line_105 $$ if (!siteGroupIds.isEmpty()) -->Line_111 $$ params4.remove("usersRoles")[ CD ]
Line_123 $$ if (socialRelationTypeUnionUserGroups) -->Line_125 $$ if (hasSocialRelationTypes && ArrayUtil.isNotEmpty(groupIds)) [ CD ]
Line_88 $$ if (group.isUserGroup()) -->Line_91 $$ siteGroupIds.add(group.getGroupId())[ CD ]
Line_11 $$ LinkedHashMap<String, Object> params1 = params-->Line_145 $$ sb.append(replaceJoinAndWhere(sql, params1))[ FD ]
Line_141 $$ sql = StringUtil.replace(sql, _STATUS_SQL, StringPool.BLANK)-->Line_177 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_134 $$ String sql = CustomSQLUtil.get(FIND_BY_C_FN_MN_LN_SN_EA_S)-->Line_136 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.middleName)", StringPool.LIKE, false, middleNames)[ FD ]
Line_5 $$ lastNames = CustomSQLUtil.keywords(lastNames)-->Line_198 $$ qPos.add(lastNames, 2)[ FD ]
Line_6 $$ screenNames = CustomSQLUtil.keywords(screenNames)-->Line_138 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.screenName)", StringPool.LIKE, false, screenNames)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_27 $$ if (params.get("usersRoles") instanceof Long) [ FD ]
Line_3 $$ firstNames = CustomSQLUtil.keywords(firstNames)-->Line_209 $$ qPos.add(firstNames, 2)[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_210 $$ qPos.add(middleNames, 2)[ FD ]
Line_231 $$ if (params5 != null) -->Line_237 $$ qPos.add(lastNames, 2)[ CD ]
Line_24 $$ groupIds = (Long[]) params.get("usersGroups")-->Line_37 $$ if (ArrayUtil.isNotEmpty(groupIds) && inherit && !socialRelationTypeUnionUserGroups) [ FD ]
Line_135 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.firstName)", StringPool.LIKE, false, firstNames)-->Line_154 $$ sb.append(replaceJoinAndWhere(sql, params3))[ FD ]
Line_12 $$ LinkedHashMap<String, Object> params2 = null-->Line_56 $$ params2.remove("usersGroups")[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_190 $$ qPos.add(status)[ FD ]
Line_9 $$ params = _emptyLinkedHashMap-->Line_27 $$ if (params.get("usersRoles") instanceof Long) [ FD ]
Line_137 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.lastName)", StringPool.LIKE, false, lastNames)-->Line_177 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_206 $$ setJoin(qPos, params3)[ FD ]
Line_6 $$ screenNames = CustomSQLUtil.keywords(screenNames)-->Line_199 $$ qPos.add(screenNames, 2)[ FD ]
Line_40 $$ List<Long> userGroupIds = new ArrayList()-->Line_117 $$ if (!userGroupIds.isEmpty()) [ FD ]
Line_218 $$ if (params4 != null) -->Line_221 $$ qPos.add(false)[ CD ]
Line_15 $$ LinkedHashMap<String, Object> params5 = null-->Line_76 $$ params5.put("usersUserGroups", userGroupIds.toArray(new Long[userGroupIds.size()]))[ FD ]
Line_117 $$ if (!userGroupIds.isEmpty()) -->Line_119 $$ params6.remove("usersRoles")[ CD ]
Line_110 $$ params4 = new LinkedHashMap(params1)-->Line_112 $$ params4.put("groupsOrgs", siteGroupIdsArray)[ FD ]
Line_48 $$ if (group.isUserGroup()) -->Line_49 $$ userGroupIds.add(group.getClassPK())[ CD ]
Line_6 $$ screenNames = CustomSQLUtil.keywords(screenNames)-->Line_251 $$ qPos.add(screenNames, 2)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_14 $$ LinkedHashMap<String, Object> params4 = null[ CD ]
Line_105 $$ if (!siteGroupIds.isEmpty()) -->Line_113 $$ params5 = new LinkedHashMap(params1)[ CD ]
Line_69 $$ params4 = new LinkedHashMap(params1)-->Line_111 $$ params4.remove("usersRoles")[ FD ]
Line_107 $$ params3 = new LinkedHashMap(params1)-->Line_108 $$ params3.remove("usersRoles")[ FD ]
Line_218 $$ if (params4 != null) -->Line_226 $$ qPos.add(emailAddresses, 2)[ CD ]
Line_12 $$ LinkedHashMap<String, Object> params2 = null-->Line_58 $$ params2.put("usersOrgs", organizationIds)[ FD ]
Line_137 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.lastName)", StringPool.LIKE, false, lastNames)-->Line_139 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.emailAddress)", StringPool.LIKE, true, emailAddresses)[ FD ]
Line_39 $$ List<Long> siteGroupIds = new ArrayList()-->Line_105 $$ if (!siteGroupIds.isEmpty()) [ FD ]
Line_5 $$ lastNames = CustomSQLUtil.keywords(lastNames)-->Line_237 $$ qPos.add(lastNames, 2)[ FD ]
Line_140 $$ if (status == WorkflowConstants.STATUS_ANY) -->Line_141 $$ sql = StringUtil.replace(sql, _STATUS_SQL, StringPool.BLANK)[ CD ]
Line_136 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.middleName)", StringPool.LIKE, false, middleNames)-->Line_154 $$ sb.append(replaceJoinAndWhere(sql, params3))[ FD ]
Line_39 $$ List<Long> siteGroupIds = new ArrayList()-->Line_64 $$ if (!siteGroupIds.isEmpty()) [ FD ]
Line_118 $$ params6 = new LinkedHashMap(params1)-->Line_245 $$ setJoin(qPos, params6)[ FD ]
Line_64 $$ if (!siteGroupIds.isEmpty()) -->Line_65 $$ Long[] siteGroupIdsArray = siteGroupIds.toArray(new Long[siteGroupIds.size()])[ CD ]
Line_18 $$ if (params.get("usersGroups") instanceof Long) -->Line_20 $$ if (groupId > 0) [ CD ]
Line_5 $$ lastNames = CustomSQLUtil.keywords(lastNames)-->Line_250 $$ qPos.add(lastNames, 2)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_184 $$ qPos.add(firstNames, 2)[ FD ]
Line_66 $$ params3 = new LinkedHashMap(params1)-->Line_152 $$ if (params3 != null) [ FD ]
Line_36 $$ boolean socialRelationTypeUnionUserGroups = GetterUtil.getBoolean(params.get("socialRelationTypeUnionUserGroups"))-->Line_79 $$ if (ArrayUtil.isNotEmpty(roleIds) && inherit && !socialRelationTypeUnionUserGroups) [ FD ]
Line_135 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.firstName)", StringPool.LIKE, false, firstNames)-->Line_138 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.screenName)", StringPool.LIKE, false, screenNames)[ FD ]
Line_136 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.middleName)", StringPool.LIKE, false, middleNames)-->Line_141 $$ sql = StringUtil.replace(sql, _STATUS_SQL, StringPool.BLANK)[ FD ]
Line_123 $$ if (socialRelationTypeUnionUserGroups) -->Line_124 $$ boolean hasSocialRelationTypes = Validator.isNotNull(params.get("socialRelationType"))[ CD ]
Line_30 $$ roleIds = new Long[] -->Line_79 $$ if (ArrayUtil.isNotEmpty(roleIds) && inherit && !socialRelationTypeUnionUserGroups) [ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_240 $$ if (status != WorkflowConstants.STATUS_ANY) [ FD ]
Line_134 $$ String sql = CustomSQLUtil.get(FIND_BY_C_FN_MN_LN_SN_EA_S)-->Line_176 $$ sql = sb.toString()[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_19 $$ Long groupId = (Long) params.get("usersGroups")[ FD ]
Line_105 $$ if (!siteGroupIds.isEmpty()) -->Line_110 $$ params4 = new LinkedHashMap(params1)[ CD ]
Line_192 $$ if (params2 != null) -->Line_197 $$ qPos.add(middleNames, 2)[ CD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_221 $$ qPos.add(false)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_213 $$ qPos.add(emailAddresses, 2)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_7 $$ emailAddresses = CustomSQLUtil.keywords(emailAddresses)[ FD ]
Line_19 $$ Long groupId = (Long) params.get("usersGroups")-->Line_20 $$ if (groupId > 0) [ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_27 $$ if (params.get("usersRoles") instanceof Long) [ CD ]
Line_7 $$ emailAddresses = CustomSQLUtil.keywords(emailAddresses)-->Line_213 $$ qPos.add(emailAddresses, 2)[ FD ]
Line_141 $$ sql = StringUtil.replace(sql, _STATUS_SQL, StringPool.BLANK)-->Line_145 $$ sb.append(replaceJoinAndWhere(sql, params1))[ FD ]
Line_218 $$ if (params4 != null) -->Line_225 $$ qPos.add(screenNames, 2)[ CD ]
Line_178 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_252 $$ qPos.add(emailAddresses, 2)[ FD ]
Line_231 $$ if (params5 != null) -->Line_235 $$ qPos.add(firstNames, 2)[ CD ]
Line_113 $$ params5 = new LinkedHashMap(params1)-->Line_232 $$ setJoin(qPos, params5)[ FD ]
Line_162 $$ if (params5 != null) -->Line_163 $$ sb.append(" UNION (")[ CD ]
Line_12 $$ LinkedHashMap<String, Object> params2 = null-->Line_97 $$ params2.remove("usersRoles")[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_197 $$ qPos.add(middleNames, 2)[ FD ]
Line_13 $$ LinkedHashMap<String, Object> params3 = null-->Line_68 $$ params3.put("groupsOrgs", siteGroupIdsArray)[ FD ]
Line_17 $$ Long[] groupIds = null-->Line_24 $$ groupIds = (Long[]) params.get("usersGroups")[ FD ]
Line_143 $$ StringBundler sb = new StringBundler(14)-->Line_159 $$ sb.append(replaceJoinAndWhere(sql, params4))[ FD ]
Line_126 $$ params2 = new LinkedHashMap(params1)-->Line_128 $$ params2.remove("usersGroups")[ FD ]
Line_40 $$ List<Long> userGroupIds = new ArrayList()-->Line_76 $$ params5.put("usersUserGroups", userGroupIds.toArray(new Long[userGroupIds.size()]))[ FD ]
Line_95 $$ if (!organizationIds.isEmpty()) -->Line_96 $$ params2 = new LinkedHashMap(params1)[ CD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_226 $$ qPos.add(emailAddresses, 2)[ FD ]
Line_143 $$ StringBundler sb = new StringBundler(14)-->Line_144 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_126 $$ params2 = new LinkedHashMap(params1)-->Line_149 $$ sb.append(replaceJoinAndWhere(sql, params2))[ FD ]
Line_11 $$ LinkedHashMap<String, Object> params1 = params-->Line_181 $$ setJoin(qPos, params1)[ FD ]
Line_192 $$ if (params2 != null) -->Line_200 $$ qPos.add(emailAddresses, 2)[ CD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_213 $$ qPos.add(emailAddresses, 2)[ FD ]
Line_133 $$ session = openSession()-->Line_261 $$ closeSession(session)[ FD ]
Line_136 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.middleName)", StringPool.LIKE, false, middleNames)-->Line_159 $$ sb.append(replaceJoinAndWhere(sql, params4))[ FD ]
Line_55 $$ params2 = new LinkedHashMap(params1)-->Line_102 $$ params2.put("usersOrgsTree", new ArrayList<Organization>(organizations.values()))[ FD ]
Line_69 $$ params4 = new LinkedHashMap(params1)-->Line_112 $$ params4.put("groupsOrgs", siteGroupIdsArray)[ FD ]
Line_74 $$ params5 = new LinkedHashMap(params1)-->Line_113 $$ params5 = new LinkedHashMap(params1)[ FD ]
Line_9 $$ params = _emptyLinkedHashMap-->Line_124 $$ boolean hasSocialRelationTypes = Validator.isNotNull(params.get("socialRelationType"))[ FD ]
Line_7 $$ emailAddresses = CustomSQLUtil.keywords(emailAddresses)-->Line_188 $$ qPos.add(emailAddresses, 2)[ FD ]
Line_113 $$ params5 = new LinkedHashMap(params1)-->Line_231 $$ if (params5 != null) [ FD ]
Line_74 $$ params5 = new LinkedHashMap(params1)-->Line_162 $$ if (params5 != null) [ FD ]
Line_143 $$ StringBundler sb = new StringBundler(14)-->Line_165 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_79 $$ if (ArrayUtil.isNotEmpty(roleIds) && inherit && !socialRelationTypeUnionUserGroups) [ CD ]
Line_138 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.screenName)", StringPool.LIKE, false, screenNames)-->Line_177 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_55 $$ params2 = new LinkedHashMap(params1)-->Line_193 $$ setJoin(qPos, params2)[ FD ]
Line_5 $$ lastNames = CustomSQLUtil.keywords(lastNames)-->Line_186 $$ qPos.add(lastNames, 2)[ FD ]
Line_28 $$ Long roleId = (Long) params.get("usersRoles")-->Line_29 $$ if (roleId > 0) [ FD ]
Line_60 $$ Map<Serializable, Organization> organizations = OrganizationUtil.fetchByPrimaryKeys(new HashSet<Serializable>(organizationIds))-->Line_61 $$ params2.put("usersOrgsTree", new ArrayList<Organization>(organizations.values()))[ FD ]
Line_14 $$ LinkedHashMap<String, Object> params4 = null-->Line_70 $$ params4.remove("usersGroups")[ FD ]
Line_244 $$ if (params6 != null) -->Line_248 $$ qPos.add(firstNames, 2)[ CD ]
Line_205 $$ if (params3 != null) -->Line_209 $$ qPos.add(firstNames, 2)[ CD ]
Line_231 $$ if (params5 != null) -->Line_232 $$ setJoin(qPos, params5)[ CD ]
Line_118 $$ params6 = new LinkedHashMap(params1)-->Line_244 $$ if (params6 != null) [ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_236 $$ qPos.add(middleNames, 2)[ FD ]
Line_8 $$ if (params == null) -->Line_9 $$ params = _emptyLinkedHashMap[ CD ]
Line_218 $$ if (params4 != null) -->Line_224 $$ qPos.add(lastNames, 2)[ CD ]
Line_143 $$ StringBundler sb = new StringBundler(14)-->Line_168 $$ sb.append(" UNION (")[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_228 $$ qPos.add(status)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_35 $$ boolean inherit = GetterUtil.getBoolean(params.get("inherit"))[ FD ]
Line_57 $$ if (PropsValues.ORGANIZATIONS_MEMBERSHIP_STRICT) -->Line_60 $$ Map<Serializable, Organization> organizations = OrganizationUtil.fetchByPrimaryKeys(new HashSet<Serializable>(organizationIds))[ CD ]
Line_167 $$ if (params6 != null) -->Line_170 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_86 $$ if (group.isOrganization()) -->Line_87 $$ organizationIds.add(group.getOrganizationId())[ CD ]
Line_88 $$ if (group.isUserGroup()) -->Line_89 $$ userGroupIds.add(group.getClassPK())[ CD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_202 $$ qPos.add(status)[ FD ]
Line_253 $$ if (status != WorkflowConstants.STATUS_ANY) -->Line_254 $$ qPos.add(status)[ CD ]
Line_134 $$ String sql = CustomSQLUtil.get(FIND_BY_C_FN_MN_LN_SN_EA_S)-->Line_178 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_141 $$ sql = StringUtil.replace(sql, _STATUS_SQL, StringPool.BLANK)-->Line_178 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_237 $$ qPos.add(lastNames, 2)[ FD ]
Line_139 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.emailAddress)", StringPool.LIKE, true, emailAddresses)-->Line_169 $$ sb.append(replaceJoinAndWhere(sql, params6))[ FD ]
Line_131 $$ Session session = null-->Line_133 $$ session = openSession()[ FD ]
Line_240 $$ if (status != WorkflowConstants.STATUS_ANY) -->Line_241 $$ qPos.add(status)[ CD ]
Line_15 $$ LinkedHashMap<String, Object> params5 = null-->Line_114 $$ params5.remove("usersRoles")[ FD ]
Line_126 $$ params2 = new LinkedHashMap(params1)-->Line_147 $$ if (params2 != null) [ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_257 $$ return (List<Long>) QueryUtil.list(q, getDialect(), start, end)[ FD ]
Line_162 $$ if (params5 != null) -->Line_164 $$ sb.append(replaceJoinAndWhere(sql, params5))[ CD ]
Line_15 $$ LinkedHashMap<String, Object> params5 = null-->Line_115 $$ params5.put("groupsUserGroups", siteGroupIdsArray)[ FD ]
Line_143 $$ StringBundler sb = new StringBundler(14)-->Line_174 $$ sb.append(obc.toString())[ FD ]
Line_40 $$ List<Long> userGroupIds = new ArrayList()-->Line_120 $$ params6.put("usersUserGroups", userGroupIds.toArray(new Long[userGroupIds.size()]))[ FD ]
Line_4 $$ middleNames = CustomSQLUtil.keywords(middleNames)-->Line_249 $$ qPos.add(middleNames, 2)[ FD ]
Line_4 $$ middleNames = CustomSQLUtil.keywords(middleNames)-->Line_236 $$ qPos.add(middleNames, 2)[ FD ]
Line_55 $$ params2 = new LinkedHashMap(params1)-->Line_99 $$ params2.put("usersOrgs", organizationIds.toArray(new Long[organizationIds.size()]))[ FD ]
Line_136 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.middleName)", StringPool.LIKE, false, middleNames)-->Line_138 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.screenName)", StringPool.LIKE, false, screenNames)[ FD ]
Line_143 $$ StringBundler sb = new StringBundler(14)-->Line_173 $$ sb.append(" ORDER BY ")[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_198 $$ qPos.add(lastNames, 2)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_249 $$ qPos.add(middleNames, 2)[ FD ]
Line_14 $$ LinkedHashMap<String, Object> params4 = null-->Line_218 $$ if (params4 != null) [ FD ]
Line_147 $$ if (params2 != null) -->Line_148 $$ sb.append(" UNION (")[ CD ]
Line_69 $$ params4 = new LinkedHashMap(params1)-->Line_71 $$ params4.put("groupsUserGroups", siteGroupIdsArray)[ FD ]
Line_54 $$ if (!organizationIds.isEmpty()) -->Line_57 $$ if (PropsValues.ORGANIZATIONS_MEMBERSHIP_STRICT) [ CD ]
Line_227 $$ if (status != WorkflowConstants.STATUS_ANY) -->Line_228 $$ qPos.add(status)[ CD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_187 $$ qPos.add(screenNames, 2)[ FD ]
Line_7 $$ emailAddresses = CustomSQLUtil.keywords(emailAddresses)-->Line_226 $$ qPos.add(emailAddresses, 2)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_3 $$ firstNames = CustomSQLUtil.keywords(firstNames)[ FD ]
Line_134 $$ String sql = CustomSQLUtil.get(FIND_BY_C_FN_MN_LN_SN_EA_S)-->Line_137 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.lastName)", StringPool.LIKE, false, lastNames)[ FD ]
Line_131 $$ Session session = null-->Line_261 $$ closeSession(session)[ FD ]
Line_7 $$ emailAddresses = CustomSQLUtil.keywords(emailAddresses)-->Line_139 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.emailAddress)", StringPool.LIKE, true, emailAddresses)[ FD ]
Line_143 $$ StringBundler sb = new StringBundler(14)-->Line_170 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_5 $$ lastNames = CustomSQLUtil.keywords(lastNames)-->Line_137 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.lastName)", StringPool.LIKE, false, lastNames)[ FD ]
Line_143 $$ StringBundler sb = new StringBundler(14)-->Line_154 $$ sb.append(replaceJoinAndWhere(sql, params3))[ FD ]
Line_138 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.screenName)", StringPool.LIKE, false, screenNames)-->Line_178 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_12 $$ LinkedHashMap<String, Object> params2 = null-->Line_102 $$ params2.put("usersOrgsTree", new ArrayList<Organization>(organizations.values()))[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_124 $$ boolean hasSocialRelationTypes = Validator.isNotNull(params.get("socialRelationType"))[ FD ]
Line_244 $$ if (params6 != null) -->Line_250 $$ qPos.add(lastNames, 2)[ CD ]
Line_55 $$ params2 = new LinkedHashMap(params1)-->Line_128 $$ params2.remove("usersGroups")[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_209 $$ qPos.add(firstNames, 2)[ FD ]
Line_13 $$ LinkedHashMap<String, Object> params3 = null-->Line_108 $$ params3.remove("usersRoles")[ FD ]
Line_79 $$ if (ArrayUtil.isNotEmpty(roleIds) && inherit && !socialRelationTypeUnionUserGroups) -->Line_95 $$ if (!organizationIds.isEmpty()) [ CD ]
Line_136 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.middleName)", StringPool.LIKE, false, middleNames)-->Line_139 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.emailAddress)", StringPool.LIKE, true, emailAddresses)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_172 $$ if (obc != null) [ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_246 $$ qPos.add(companyId)[ FD ]
Line_137 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.lastName)", StringPool.LIKE, false, lastNames)-->Line_154 $$ sb.append(replaceJoinAndWhere(sql, params3))[ FD ]
Line_14 $$ LinkedHashMap<String, Object> params4 = null-->Line_157 $$ if (params4 != null) [ FD ]
Line_105 $$ if (!siteGroupIds.isEmpty()) -->Line_112 $$ params4.put("groupsOrgs", siteGroupIdsArray)[ CD ]
Line_60 $$ Map<Serializable, Organization> organizations = OrganizationUtil.fetchByPrimaryKeys(new HashSet<Serializable>(organizationIds))-->Line_102 $$ params2.put("usersOrgsTree", new ArrayList<Organization>(organizations.values()))[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_250 $$ qPos.add(lastNames, 2)[ FD ]
Line_138 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.screenName)", StringPool.LIKE, false, screenNames)-->Line_141 $$ sql = StringUtil.replace(sql, _STATUS_SQL, StringPool.BLANK)[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_181 $$ setJoin(qPos, params1)[ FD ]
Line_135 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.firstName)", StringPool.LIKE, false, firstNames)-->Line_145 $$ sb.append(replaceJoinAndWhere(sql, params1))[ FD ]
Line_55 $$ params2 = new LinkedHashMap(params1)-->Line_147 $$ if (params2 != null) [ FD ]
Line_118 $$ params6 = new LinkedHashMap(params1)-->Line_119 $$ params6.remove("usersRoles")[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_219 $$ setJoin(qPos, params4)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_236 $$ qPos.add(middleNames, 2)[ FD ]
Line_26 $$ Long[] roleIds = null-->Line_79 $$ if (ArrayUtil.isNotEmpty(roleIds) && inherit && !socialRelationTypeUnionUserGroups) [ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_246 $$ qPos.add(companyId)[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_186 $$ qPos.add(lastNames, 2)[ FD ]
Line_107 $$ params3 = new LinkedHashMap(params1)-->Line_206 $$ setJoin(qPos, params3)[ FD ]
Line_9 $$ params = _emptyLinkedHashMap-->Line_28 $$ Long roleId = (Long) params.get("usersRoles")[ FD ]
Line_9 $$ params = _emptyLinkedHashMap-->Line_35 $$ boolean inherit = GetterUtil.getBoolean(params.get("inherit"))[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_9 $$ params = _emptyLinkedHashMap[ FD ]
Line_192 $$ if (params2 != null) -->Line_193 $$ setJoin(qPos, params2)[ CD ]
Line_17 $$ Long[] groupIds = null-->Line_37 $$ if (ArrayUtil.isNotEmpty(groupIds) && inherit && !socialRelationTypeUnionUserGroups) [ FD ]
Line_9 $$ params = _emptyLinkedHashMap-->Line_18 $$ if (params.get("usersGroups") instanceof Long) [ FD ]
Line_19 $$ Long groupId = (Long) params.get("usersGroups")-->Line_51 $$ siteGroupIds.add(groupId)[ FD ]
Line_66 $$ params3 = new LinkedHashMap(params1)-->Line_68 $$ params3.put("groupsOrgs", siteGroupIdsArray)[ FD ]
Line_143 $$ StringBundler sb = new StringBundler(14)-->Line_150 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_69 $$ params4 = new LinkedHashMap(params1)-->Line_219 $$ setJoin(qPos, params4)[ FD ]
Line_137 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.lastName)", StringPool.LIKE, false, lastNames)-->Line_164 $$ sb.append(replaceJoinAndWhere(sql, params5))[ FD ]
Line_79 $$ if (ArrayUtil.isNotEmpty(roleIds) && inherit && !socialRelationTypeUnionUserGroups) -->Line_117 $$ if (!userGroupIds.isEmpty()) [ CD ]
Line_39 $$ List<Long> siteGroupIds = new ArrayList()-->Line_51 $$ siteGroupIds.add(groupId)[ FD ]
Line_26 $$ Long[] roleIds = null-->Line_30 $$ roleIds = new Long[] [ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_220 $$ qPos.add(companyId)[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_198 $$ qPos.add(lastNames, 2)[ FD ]
Line_135 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.firstName)", StringPool.LIKE, false, firstNames)-->Line_159 $$ sb.append(replaceJoinAndWhere(sql, params4))[ FD ]
Line_16 $$ LinkedHashMap<String, Object> params6 = null-->Line_169 $$ sb.append(replaceJoinAndWhere(sql, params6))[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_174 $$ sb.append(obc.toString())[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_185 $$ qPos.add(middleNames, 2)[ FD ]
Line_21 $$ groupIds = new Long[] -->Line_37 $$ if (ArrayUtil.isNotEmpty(groupIds) && inherit && !socialRelationTypeUnionUserGroups) [ FD ]
Line_134 $$ String sql = CustomSQLUtil.get(FIND_BY_C_FN_MN_LN_SN_EA_S)-->Line_135 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.firstName)", StringPool.LIKE, false, firstNames)[ FD ]
Line_167 $$ if (params6 != null) -->Line_169 $$ sb.append(replaceJoinAndWhere(sql, params6))[ CD ]
Line_138 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.screenName)", StringPool.LIKE, false, screenNames)-->Line_139 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.emailAddress)", StringPool.LIKE, true, emailAddresses)[ FD ]
Line_12 $$ LinkedHashMap<String, Object> params2 = null-->Line_193 $$ setJoin(qPos, params2)[ FD ]
Line_96 $$ params2 = new LinkedHashMap(params1)-->Line_192 $$ if (params2 != null) [ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_37 $$ if (ArrayUtil.isNotEmpty(groupIds) && inherit && !socialRelationTypeUnionUserGroups) [ CD ]
Line_14 $$ LinkedHashMap<String, Object> params4 = null-->Line_71 $$ params4.put("groupsUserGroups", siteGroupIdsArray)[ FD ]
Line_177 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)-->Line_178 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_205 $$ if (params3 != null) -->Line_206 $$ setJoin(qPos, params3)[ CD ]
Line_64 $$ if (!siteGroupIds.isEmpty()) -->Line_66 $$ params3 = new LinkedHashMap(params1)[ CD ]
Line_137 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.lastName)", StringPool.LIKE, false, lastNames)-->Line_149 $$ sb.append(replaceJoinAndWhere(sql, params2))[ FD ]
Line_13 $$ LinkedHashMap<String, Object> params3 = null-->Line_206 $$ setJoin(qPos, params3)[ FD ]
Line_42 $$ Group group = GroupLocalServiceUtil.fetchGroup(groupId)-->Line_86 $$ if (group.isOrganization()) [ FD ]
Line_9 $$ params = _emptyLinkedHashMap-->Line_36 $$ boolean socialRelationTypeUnionUserGroups = GetterUtil.getBoolean(params.get("socialRelationTypeUnionUserGroups"))[ FD ]
Line_138 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.screenName)", StringPool.LIKE, false, screenNames)-->Line_145 $$ sb.append(replaceJoinAndWhere(sql, params1))[ FD ]
Line_192 $$ if (params2 != null) -->Line_196 $$ qPos.add(firstNames, 2)[ CD ]
Line_69 $$ params4 = new LinkedHashMap(params1)-->Line_218 $$ if (params4 != null) [ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_17 $$ Long[] groupIds = null[ CD ]
Line_4 $$ middleNames = CustomSQLUtil.keywords(middleNames)-->Line_197 $$ qPos.add(middleNames, 2)[ FD ]
Line_5 $$ lastNames = CustomSQLUtil.keywords(lastNames)-->Line_211 $$ qPos.add(lastNames, 2)[ FD ]
Line_12 $$ LinkedHashMap<String, Object> params2 = null-->Line_126 $$ params2 = new LinkedHashMap(params1)[ FD ]
Line_66 $$ params3 = new LinkedHashMap(params1)-->Line_205 $$ if (params3 != null) [ FD ]
Line_21 $$ groupIds = new Long[] -->Line_24 $$ groupIds = (Long[]) params.get("usersGroups")[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_11 $$ LinkedHashMap<String, Object> params1 = params[ CD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_232 $$ setJoin(qPos, params5)[ FD ]
Line_105 $$ if (!siteGroupIds.isEmpty()) -->Line_114 $$ params5.remove("usersRoles")[ CD ]
Line_16 $$ LinkedHashMap<String, Object> params6 = null-->Line_244 $$ if (params6 != null) [ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_254 $$ qPos.add(status)[ FD ]
Line_38 $$ List<Long> organizationIds = new ArrayList()-->Line_87 $$ organizationIds.add(group.getOrganizationId())[ FD ]
Line_12 $$ LinkedHashMap<String, Object> params2 = null-->Line_96 $$ params2 = new LinkedHashMap(params1)[ FD ]
Line_134 $$ String sql = CustomSQLUtil.get(FIND_BY_C_FN_MN_LN_SN_EA_S)-->Line_138 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.screenName)", StringPool.LIKE, false, screenNames)[ FD ]
Line_54 $$ if (!organizationIds.isEmpty()) -->Line_55 $$ params2 = new LinkedHashMap(params1)[ CD ]
Line_176 $$ sql = sb.toString()-->Line_177 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_237 $$ qPos.add(lastNames, 2)[ FD ]
Line_134 $$ String sql = CustomSQLUtil.get(FIND_BY_C_FN_MN_LN_SN_EA_S)-->Line_149 $$ sb.append(replaceJoinAndWhere(sql, params2))[ FD ]
Line_110 $$ params4 = new LinkedHashMap(params1)-->Line_159 $$ sb.append(replaceJoinAndWhere(sql, params4))[ FD ]
Line_139 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.emailAddress)", StringPool.LIKE, true, emailAddresses)-->Line_159 $$ sb.append(replaceJoinAndWhere(sql, params4))[ FD ]
Line_39 $$ List<Long> siteGroupIds = new ArrayList()-->Line_91 $$ siteGroupIds.add(group.getGroupId())[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_177 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_249 $$ qPos.add(middleNames, 2)[ FD ]
Line_3 $$ firstNames = CustomSQLUtil.keywords(firstNames)-->Line_196 $$ qPos.add(firstNames, 2)[ FD ]
Line_134 $$ String sql = CustomSQLUtil.get(FIND_BY_C_FN_MN_LN_SN_EA_S)-->Line_139 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.emailAddress)", StringPool.LIKE, true, emailAddresses)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_123 $$ if (socialRelationTypeUnionUserGroups) [ CD ]
Line_205 $$ if (params3 != null) -->Line_211 $$ qPos.add(lastNames, 2)[ CD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_193 $$ setJoin(qPos, params2)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_139 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.emailAddress)", StringPool.LIKE, true, emailAddresses)[ FD ]
Line_5 $$ lastNames = CustomSQLUtil.keywords(lastNames)-->Line_224 $$ qPos.add(lastNames, 2)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_36 $$ boolean socialRelationTypeUnionUserGroups = GetterUtil.getBoolean(params.get("socialRelationTypeUnionUserGroups"))[ CD ]
Line_113 $$ params5 = new LinkedHashMap(params1)-->Line_164 $$ sb.append(replaceJoinAndWhere(sql, params5))[ FD ]
Line_135 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.firstName)", StringPool.LIKE, false, firstNames)-->Line_164 $$ sb.append(replaceJoinAndWhere(sql, params5))[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_247 $$ qPos.add(false)[ FD ]
Line_64 $$ if (!siteGroupIds.isEmpty()) -->Line_68 $$ params3.put("groupsOrgs", siteGroupIdsArray)[ CD ]
Line_3 $$ firstNames = CustomSQLUtil.keywords(firstNames)-->Line_235 $$ qPos.add(firstNames, 2)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_5 $$ lastNames = CustomSQLUtil.keywords(lastNames)[ FD ]
Line_14 $$ LinkedHashMap<String, Object> params4 = null-->Line_110 $$ params4 = new LinkedHashMap(params1)[ FD ]
Line_74 $$ params5 = new LinkedHashMap(params1)-->Line_232 $$ setJoin(qPos, params5)[ FD ]
Line_105 $$ if (!siteGroupIds.isEmpty()) -->Line_115 $$ params5.put("groupsUserGroups", siteGroupIdsArray)[ CD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_196 $$ qPos.add(firstNames, 2)[ FD ]
Line_66 $$ params3 = new LinkedHashMap(params1)-->Line_206 $$ setJoin(qPos, params3)[ FD ]
Line_37 $$ if (ArrayUtil.isNotEmpty(groupIds) && inherit && !socialRelationTypeUnionUserGroups) -->Line_39 $$ List<Long> siteGroupIds = new ArrayList()[ CD ]
Line_139 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.emailAddress)", StringPool.LIKE, true, emailAddresses)-->Line_149 $$ sb.append(replaceJoinAndWhere(sql, params2))[ FD ]
Line_137 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.lastName)", StringPool.LIKE, false, lastNames)-->Line_178 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_250 $$ qPos.add(lastNames, 2)[ FD ]
Line_33 $$ roleIds = (Long[]) params.get("usersRoles")-->Line_79 $$ if (ArrayUtil.isNotEmpty(roleIds) && inherit && !socialRelationTypeUnionUserGroups) [ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_235 $$ qPos.add(firstNames, 2)[ FD ]
Line_143 $$ StringBundler sb = new StringBundler(14)-->Line_153 $$ sb.append(" UNION (")[ FD ]
Line_134 $$ String sql = CustomSQLUtil.get(FIND_BY_C_FN_MN_LN_SN_EA_S)-->Line_154 $$ sb.append(replaceJoinAndWhere(sql, params3))[ FD ]
Line_42 $$ Group group = GroupLocalServiceUtil.fetchGroup(groupId)-->Line_49 $$ userGroupIds.add(group.getClassPK())[ FD ]
Line_95 $$ if (!organizationIds.isEmpty()) -->Line_98 $$ if (PropsValues.ORGANIZATIONS_MEMBERSHIP_STRICT) [ CD ]
Line_205 $$ if (params3 != null) -->Line_210 $$ qPos.add(middleNames, 2)[ CD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_210 $$ qPos.add(middleNames, 2)[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_224 $$ qPos.add(lastNames, 2)[ FD ]
Line_27 $$ if (params.get("usersRoles") instanceof Long) -->Line_33 $$ roleIds = (Long[]) params.get("usersRoles")[ CD ]
Line_218 $$ if (params4 != null) -->Line_220 $$ qPos.add(companyId)[ CD ]
Line_6 $$ screenNames = CustomSQLUtil.keywords(screenNames)-->Line_225 $$ qPos.add(screenNames, 2)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_13 $$ LinkedHashMap<String, Object> params3 = null[ CD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_186 $$ qPos.add(lastNames, 2)[ FD ]
Line_231 $$ if (params5 != null) -->Line_238 $$ qPos.add(screenNames, 2)[ CD ]
Line_152 $$ if (params3 != null) -->Line_153 $$ sb.append(" UNION (")[ CD ]
Line_244 $$ if (params6 != null) -->Line_251 $$ qPos.add(screenNames, 2)[ CD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_234 $$ qPos.add(false)[ FD ]
Line_110 $$ params4 = new LinkedHashMap(params1)-->Line_111 $$ params4.remove("usersRoles")[ FD ]
Line_74 $$ params5 = new LinkedHashMap(params1)-->Line_115 $$ params5.put("groupsUserGroups", siteGroupIdsArray)[ FD ]
Line_137 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.lastName)", StringPool.LIKE, false, lastNames)-->Line_138 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.screenName)", StringPool.LIKE, false, screenNames)[ FD ]
Line_98 $$ if (PropsValues.ORGANIZATIONS_MEMBERSHIP_STRICT) -->Line_99 $$ params2.put("usersOrgs", organizationIds.toArray(new Long[organizationIds.size()]))[ CD ]
Line_136 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.middleName)", StringPool.LIKE, false, middleNames)-->Line_164 $$ sb.append(replaceJoinAndWhere(sql, params5))[ FD ]
Line_131 $$ Session session = null-->Line_178 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_118 $$ params6 = new LinkedHashMap(params1)-->Line_120 $$ params6.put("usersUserGroups", userGroupIds.toArray(new Long[userGroupIds.size()]))[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_252 $$ qPos.add(emailAddresses, 2)[ FD ]
Line_96 $$ params2 = new LinkedHashMap(params1)-->Line_128 $$ params2.remove("usersGroups")[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_6 $$ screenNames = CustomSQLUtil.keywords(screenNames)[ CD ]
Line_11 $$ LinkedHashMap<String, Object> params1 = params-->Line_127 $$ params1.remove("socialRelationType")[ FD ]
Line_134 $$ String sql = CustomSQLUtil.get(FIND_BY_C_FN_MN_LN_SN_EA_S)-->Line_177 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_215 $$ qPos.add(status)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_227 $$ if (status != WorkflowConstants.STATUS_ANY) [ FD ]
Line_14 $$ LinkedHashMap<String, Object> params4 = null-->Line_111 $$ params4.remove("usersRoles")[ FD ]
Line_138 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.screenName)", StringPool.LIKE, false, screenNames)-->Line_169 $$ sb.append(replaceJoinAndWhere(sql, params6))[ FD ]
Line_42 $$ Group group = GroupLocalServiceUtil.fetchGroup(groupId)-->Line_48 $$ if (group.isUserGroup()) [ FD ]
Line_192 $$ if (params2 != null) -->Line_199 $$ qPos.add(screenNames, 2)[ CD ]
Line_137 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.lastName)", StringPool.LIKE, false, lastNames)-->Line_176 $$ sql = sb.toString()[ FD ]
Line_139 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.emailAddress)", StringPool.LIKE, true, emailAddresses)-->Line_145 $$ sb.append(replaceJoinAndWhere(sql, params1))[ FD ]
Line_214 $$ if (status != WorkflowConstants.STATUS_ANY) -->Line_215 $$ qPos.add(status)[ CD ]
Line_46 $$ if (group.isOrganization()) -->Line_48 $$ if (group.isUserGroup()) [ CD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_136 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.middleName)", StringPool.LIKE, false, middleNames)[ FD ]
Line_96 $$ params2 = new LinkedHashMap(params1)-->Line_102 $$ params2.put("usersOrgsTree", new ArrayList<Organization>(organizations.values()))[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_214 $$ if (status != WorkflowConstants.STATUS_ANY) [ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_140 $$ if (status == WorkflowConstants.STATUS_ANY) [ FD ]
Line_135 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.firstName)", StringPool.LIKE, false, firstNames)-->Line_149 $$ sb.append(replaceJoinAndWhere(sql, params2))[ FD ]
Line_244 $$ if (params6 != null) -->Line_247 $$ qPos.add(false)[ CD ]
Line_55 $$ params2 = new LinkedHashMap(params1)-->Line_97 $$ params2.remove("usersRoles")[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_211 $$ qPos.add(lastNames, 2)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_226 $$ qPos.add(emailAddresses, 2)[ FD ]
Line_12 $$ LinkedHashMap<String, Object> params2 = null-->Line_147 $$ if (params2 != null) [ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_201 $$ if (status != WorkflowConstants.STATUS_ANY) [ FD ]
Line_13 $$ LinkedHashMap<String, Object> params3 = null-->Line_152 $$ if (params3 != null) [ FD ]
Line_17 $$ Long[] groupIds = null-->Line_125 $$ if (hasSocialRelationTypes && ArrayUtil.isNotEmpty(groupIds)) [ FD ]
Line_42 $$ Group group = GroupLocalServiceUtil.fetchGroup(groupId)-->Line_89 $$ userGroupIds.add(group.getClassPK())[ FD ]
Line_117 $$ if (!userGroupIds.isEmpty()) -->Line_120 $$ params6.put("usersUserGroups", userGroupIds.toArray(new Long[userGroupIds.size()]))[ CD ]
Line_135 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.firstName)", StringPool.LIKE, false, firstNames)-->Line_139 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.emailAddress)", StringPool.LIKE, true, emailAddresses)[ FD ]
Line_27 $$ if (params.get("usersRoles") instanceof Long) -->Line_28 $$ Long roleId = (Long) params.get("usersRoles")[ CD ]
Line_9 $$ params = _emptyLinkedHashMap-->Line_33 $$ roleIds = (Long[]) params.get("usersRoles")[ FD ]
Line_107 $$ params3 = new LinkedHashMap(params1)-->Line_205 $$ if (params3 != null) [ FD ]
Line_65 $$ Long[] siteGroupIdsArray = siteGroupIds.toArray(new Long[siteGroupIds.size()])-->Line_109 $$ params3.put("usersGroups", siteGroupIdsArray)[ FD ]
Line_66 $$ params3 = new LinkedHashMap(params1)-->Line_67 $$ params3.remove("usersGroups")[ FD ]
Line_107 $$ params3 = new LinkedHashMap(params1)-->Line_152 $$ if (params3 != null) [ FD ]
Line_244 $$ if (params6 != null) -->Line_253 $$ if (status != WorkflowConstants.STATUS_ANY) [ CD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_200 $$ qPos.add(emailAddresses, 2)[ FD ]
Line_143 $$ StringBundler sb = new StringBundler(14)-->Line_163 $$ sb.append(" UNION (")[ FD ]
Line_167 $$ if (params6 != null) -->Line_168 $$ sb.append(" UNION (")[ CD ]
Line_157 $$ if (params4 != null) -->Line_160 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_39 $$ List<Long> siteGroupIds = new ArrayList()-->Line_106 $$ Long[] siteGroupIdsArray = siteGroupIds.toArray(new Long[siteGroupIds.size()])[ FD ]
Line_54 $$ if (!organizationIds.isEmpty()) -->Line_56 $$ params2.remove("usersGroups")[ CD ]
Line_98 $$ if (PropsValues.ORGANIZATIONS_MEMBERSHIP_STRICT) -->Line_101 $$ Map<Serializable, Organization> organizations = OrganizationUtil.fetchByPrimaryKeys(new HashSet<Serializable>(organizationIds))[ CD ]
Line_15 $$ LinkedHashMap<String, Object> params5 = null-->Line_74 $$ params5 = new LinkedHashMap(params1)[ FD ]
Line_42 $$ Group group = GroupLocalServiceUtil.fetchGroup(groupId)-->Line_47 $$ organizationIds.add(group.getOrganizationId())[ FD ]
Line_139 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.emailAddress)", StringPool.LIKE, true, emailAddresses)-->Line_177 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_96 $$ params2 = new LinkedHashMap(params1)-->Line_147 $$ if (params2 != null) [ FD ]
Line_37 $$ if (ArrayUtil.isNotEmpty(groupIds) && inherit && !socialRelationTypeUnionUserGroups) -->Line_64 $$ if (!siteGroupIds.isEmpty()) [ CD ]
Line_69 $$ params4 = new LinkedHashMap(params1)-->Line_110 $$ params4 = new LinkedHashMap(params1)[ FD ]
Line_65 $$ Long[] siteGroupIdsArray = siteGroupIds.toArray(new Long[siteGroupIds.size()])-->Line_115 $$ params5.put("groupsUserGroups", siteGroupIdsArray)[ FD ]
Line_42 $$ Group group = GroupLocalServiceUtil.fetchGroup(groupId)-->Line_87 $$ organizationIds.add(group.getOrganizationId())[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_238 $$ qPos.add(screenNames, 2)[ FD ]
Line_12 $$ LinkedHashMap<String, Object> params2 = null-->Line_99 $$ params2.put("usersOrgs", organizationIds.toArray(new Long[organizationIds.size()]))[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_137 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.lastName)", StringPool.LIKE, false, lastNames)[ FD ]
Line_38 $$ List<Long> organizationIds = new ArrayList()-->Line_54 $$ if (!organizationIds.isEmpty()) [ FD ]
Line_178 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_179 $$ q.addScalar("userId", Type.LONG)[ FD ]
Line_29 $$ if (roleId > 0) -->Line_30 $$ roleIds = new Long[] [ CD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_209 $$ qPos.add(firstNames, 2)[ FD ]
Line_138 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.screenName)", StringPool.LIKE, false, screenNames)-->Line_164 $$ sb.append(replaceJoinAndWhere(sql, params5))[ FD ]
Line_42 $$ Group group = GroupLocalServiceUtil.fetchGroup(groupId)-->Line_88 $$ if (group.isUserGroup()) [ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_245 $$ setJoin(qPos, params6)[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_223 $$ qPos.add(middleNames, 2)[ FD ]
Line_39 $$ List<Long> siteGroupIds = new ArrayList()-->Line_65 $$ Long[] siteGroupIdsArray = siteGroupIds.toArray(new Long[siteGroupIds.size()])[ FD ]
Line_176 $$ sql = sb.toString()-->Line_178 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_251 $$ qPos.add(screenNames, 2)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_222 $$ qPos.add(firstNames, 2)[ FD ]
Line_218 $$ if (params4 != null) -->Line_222 $$ qPos.add(firstNames, 2)[ CD ]
Line_15 $$ LinkedHashMap<String, Object> params5 = null-->Line_113 $$ params5 = new LinkedHashMap(params1)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_194 $$ qPos.add(companyId)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_199 $$ qPos.add(screenNames, 2)[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_199 $$ qPos.add(screenNames, 2)[ FD ]
Line_57 $$ if (PropsValues.ORGANIZATIONS_MEMBERSHIP_STRICT) -->Line_61 $$ params2.put("usersOrgsTree", new ArrayList<Organization>(organizations.values()))[ CD ]
Line_135 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.firstName)", StringPool.LIKE, false, firstNames)-->Line_136 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.middleName)", StringPool.LIKE, false, middleNames)[ FD ]
Line_12 $$ LinkedHashMap<String, Object> params2 = null-->Line_55 $$ params2 = new LinkedHashMap(params1)[ FD ]
Line_136 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.middleName)", StringPool.LIKE, false, middleNames)-->Line_169 $$ sb.append(replaceJoinAndWhere(sql, params6))[ FD ]
Line_136 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.middleName)", StringPool.LIKE, false, middleNames)-->Line_176 $$ sql = sb.toString()[ FD ]
Line_30 $$ roleIds = new Long[] -->Line_33 $$ roleIds = (Long[]) params.get("usersRoles")[ FD ]
Line_73 $$ if (!userGroupIds.isEmpty()) -->Line_76 $$ params5.put("usersUserGroups", userGroupIds.toArray(new Long[userGroupIds.size()]))[ CD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_195 $$ qPos.add(false)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_4 $$ middleNames = CustomSQLUtil.keywords(middleNames)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_15 $$ LinkedHashMap<String, Object> params5 = null[ CD ]
Line_4 $$ middleNames = CustomSQLUtil.keywords(middleNames)-->Line_223 $$ qPos.add(middleNames, 2)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_35 $$ boolean inherit = GetterUtil.getBoolean(params.get("inherit"))[ CD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_200 $$ qPos.add(emailAddresses, 2)[ FD ]
Line_38 $$ List<Long> organizationIds = new ArrayList()-->Line_95 $$ if (!organizationIds.isEmpty()) [ FD ]
Line_136 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.middleName)", StringPool.LIKE, false, middleNames)-->Line_137 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.lastName)", StringPool.LIKE, false, lastNames)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_131 $$ Session session = null[ CD ]
Line_42 $$ Group group = GroupLocalServiceUtil.fetchGroup(groupId)-->Line_91 $$ siteGroupIds.add(group.getGroupId())[ FD ]
Line_141 $$ sql = StringUtil.replace(sql, _STATUS_SQL, StringPool.BLANK)-->Line_159 $$ sb.append(replaceJoinAndWhere(sql, params4))[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_182 $$ qPos.add(companyId)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_238 $$ qPos.add(screenNames, 2)[ FD ]
Line_244 $$ if (params6 != null) -->Line_245 $$ setJoin(qPos, params6)[ CD ]
Line_110 $$ params4 = new LinkedHashMap(params1)-->Line_219 $$ setJoin(qPos, params4)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_5 $$ lastNames = CustomSQLUtil.keywords(lastNames)[ CD ]
Line_14 $$ LinkedHashMap<String, Object> params4 = null-->Line_112 $$ params4.put("groupsOrgs", siteGroupIdsArray)[ FD ]
Line_37 $$ if (ArrayUtil.isNotEmpty(groupIds) && inherit && !socialRelationTypeUnionUserGroups) -->Line_40 $$ List<Long> userGroupIds = new ArrayList()[ CD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_7 $$ emailAddresses = CustomSQLUtil.keywords(emailAddresses)[ CD ]
Line_55 $$ params2 = new LinkedHashMap(params1)-->Line_96 $$ params2 = new LinkedHashMap(params1)[ FD ]
Line_139 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.emailAddress)", StringPool.LIKE, true, emailAddresses)-->Line_178 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_48 $$ if (group.isUserGroup()) -->Line_51 $$ siteGroupIds.add(groupId)[ CD ]
Line_40 $$ List<Long> userGroupIds = new ArrayList()-->Line_73 $$ if (!userGroupIds.isEmpty()) [ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_33 $$ roleIds = (Long[]) params.get("usersRoles")[ FD ]
Line_7 $$ emailAddresses = CustomSQLUtil.keywords(emailAddresses)-->Line_239 $$ qPos.add(emailAddresses, 2)[ FD ]
Line_143 $$ StringBundler sb = new StringBundler(14)-->Line_146 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_6 $$ screenNames = CustomSQLUtil.keywords(screenNames)-->Line_187 $$ qPos.add(screenNames, 2)[ FD ]
Line_118 $$ params6 = new LinkedHashMap(params1)-->Line_167 $$ if (params6 != null) [ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_215 $$ qPos.add(status)[ FD ]
Line_55 $$ params2 = new LinkedHashMap(params1)-->Line_56 $$ params2.remove("usersGroups")[ FD ]
Line_42 $$ Group group = GroupLocalServiceUtil.fetchGroup(groupId)-->Line_46 $$ if (group.isOrganization()) [ FD ]
Line_113 $$ params5 = new LinkedHashMap(params1)-->Line_115 $$ params5.put("groupsUserGroups", siteGroupIdsArray)[ FD ]
Line_37 $$ if (ArrayUtil.isNotEmpty(groupIds) && inherit && !socialRelationTypeUnionUserGroups) -->Line_38 $$ List<Long> organizationIds = new ArrayList()[ CD ]
Line_3 $$ firstNames = CustomSQLUtil.keywords(firstNames)-->Line_222 $$ qPos.add(firstNames, 2)[ FD ]
Line_16 $$ LinkedHashMap<String, Object> params6 = null-->Line_245 $$ setJoin(qPos, params6)[ FD ]
Line_13 $$ LinkedHashMap<String, Object> params3 = null-->Line_109 $$ params3.put("usersGroups", siteGroupIdsArray)[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_251 $$ qPos.add(screenNames, 2)[ FD ]
Line_125 $$ if (hasSocialRelationTypes && ArrayUtil.isNotEmpty(groupIds)) -->Line_128 $$ params2.remove("usersGroups")[ CD ]
Line_113 $$ params5 = new LinkedHashMap(params1)-->Line_162 $$ if (params5 != null) [ FD ]
Line_74 $$ params5 = new LinkedHashMap(params1)-->Line_76 $$ params5.put("usersUserGroups", userGroupIds.toArray(new Long[userGroupIds.size()]))[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_138 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.screenName)", StringPool.LIKE, false, screenNames)[ FD ]
Line_205 $$ if (params3 != null) -->Line_208 $$ qPos.add(false)[ CD ]
Line_38 $$ List<Long> organizationIds = new ArrayList()-->Line_47 $$ organizationIds.add(group.getOrganizationId())[ FD ]
Line_231 $$ if (params5 != null) -->Line_233 $$ qPos.add(companyId)[ CD ]
Line_143 $$ StringBundler sb = new StringBundler(14)-->Line_155 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_95 $$ if (!organizationIds.isEmpty()) -->Line_97 $$ params2.remove("usersRoles")[ CD ]
Line_192 $$ if (params2 != null) -->Line_194 $$ qPos.add(companyId)[ CD ]
Line_27 $$ if (params.get("usersRoles") instanceof Long) -->Line_29 $$ if (roleId > 0) [ CD ]
Line_134 $$ String sql = CustomSQLUtil.get(FIND_BY_C_FN_MN_LN_SN_EA_S)-->Line_164 $$ sb.append(replaceJoinAndWhere(sql, params5))[ FD ]
Line_37 $$ if (ArrayUtil.isNotEmpty(groupIds) && inherit && !socialRelationTypeUnionUserGroups) -->Line_73 $$ if (!userGroupIds.isEmpty()) [ CD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_248 $$ qPos.add(firstNames, 2)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_188 $$ qPos.add(emailAddresses, 2)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_239 $$ qPos.add(emailAddresses, 2)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_207 $$ qPos.add(companyId)[ FD ]
Line_6 $$ screenNames = CustomSQLUtil.keywords(screenNames)-->Line_212 $$ qPos.add(screenNames, 2)[ FD ]
Line_15 $$ LinkedHashMap<String, Object> params5 = null-->Line_75 $$ params5.remove("usersGroups")[ FD ]
Line_96 $$ params2 = new LinkedHashMap(params1)-->Line_97 $$ params2.remove("usersRoles")[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_241 $$ qPos.add(status)[ FD ]
Line_14 $$ LinkedHashMap<String, Object> params4 = null-->Line_219 $$ setJoin(qPos, params4)[ FD ]
Line_136 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.middleName)", StringPool.LIKE, false, middleNames)-->Line_149 $$ sb.append(replaceJoinAndWhere(sql, params2))[ FD ]
Line_9 $$ params = _emptyLinkedHashMap-->Line_24 $$ groupIds = (Long[]) params.get("usersGroups")[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_28 $$ Long roleId = (Long) params.get("usersRoles")[ FD ]
Line_28 $$ Long roleId = (Long) params.get("usersRoles")-->Line_84 $$ List<Group> groups = RoleUtil.getGroups(roleId)[ FD ]
Line_152 $$ if (params3 != null) -->Line_155 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_26 $$ Long[] roleIds = null-->Line_33 $$ roleIds = (Long[]) params.get("usersRoles")[ FD ]
Line_74 $$ params5 = new LinkedHashMap(params1)-->Line_114 $$ params5.remove("usersRoles")[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_16 $$ LinkedHashMap<String, Object> params6 = null[ CD ]
Line_143 $$ StringBundler sb = new StringBundler(14)-->Line_158 $$ sb.append(" UNION (")[ FD ]
Line_137 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.lastName)", StringPool.LIKE, false, lastNames)-->Line_141 $$ sql = StringUtil.replace(sql, _STATUS_SQL, StringPool.BLANK)[ FD ]
Line_192 $$ if (params2 != null) -->Line_198 $$ qPos.add(lastNames, 2)[ CD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_207 $$ qPos.add(companyId)[ FD ]
Line_36 $$ boolean socialRelationTypeUnionUserGroups = GetterUtil.getBoolean(params.get("socialRelationTypeUnionUserGroups"))-->Line_37 $$ if (ArrayUtil.isNotEmpty(groupIds) && inherit && !socialRelationTypeUnionUserGroups) [ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_189 $$ if (status != WorkflowConstants.STATUS_ANY) [ FD ]
Line_15 $$ LinkedHashMap<String, Object> params5 = null-->Line_231 $$ if (params5 != null) [ FD ]
Line_135 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.firstName)", StringPool.LIKE, false, firstNames)-->Line_169 $$ sb.append(replaceJoinAndWhere(sql, params6))[ FD ]
Line_57 $$ if (PropsValues.ORGANIZATIONS_MEMBERSHIP_STRICT) -->Line_58 $$ params2.put("usersOrgs", organizationIds)[ CD ]
Line_218 $$ if (params4 != null) -->Line_223 $$ qPos.add(middleNames, 2)[ CD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_26 $$ Long[] roleIds = null[ CD ]
Line_124 $$ boolean hasSocialRelationTypes = Validator.isNotNull(params.get("socialRelationType"))-->Line_125 $$ if (hasSocialRelationTypes && ArrayUtil.isNotEmpty(groupIds)) [ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_8 $$ if (params == null) [ FD ]
Line_134 $$ String sql = CustomSQLUtil.get(FIND_BY_C_FN_MN_LN_SN_EA_S)-->Line_169 $$ sb.append(replaceJoinAndWhere(sql, params6))[ FD ]
Line_7 $$ emailAddresses = CustomSQLUtil.keywords(emailAddresses)-->Line_252 $$ qPos.add(emailAddresses, 2)[ FD ]
Line_135 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.firstName)", StringPool.LIKE, false, firstNames)-->Line_137 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.lastName)", StringPool.LIKE, false, lastNames)[ FD ]
Line_18 $$ if (params.get("usersGroups") instanceof Long) -->Line_24 $$ groupIds = (Long[]) params.get("usersGroups")[ CD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_4 $$ middleNames = CustomSQLUtil.keywords(middleNames)[ CD ]
Line_12 $$ LinkedHashMap<String, Object> params2 = null-->Line_192 $$ if (params2 != null) [ FD ]
Line_141 $$ sql = StringUtil.replace(sql, _STATUS_SQL, StringPool.BLANK)-->Line_154 $$ sb.append(replaceJoinAndWhere(sql, params3))[ FD ]
Line_218 $$ if (params4 != null) -->Line_227 $$ if (status != WorkflowConstants.STATUS_ANY) [ CD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_18 $$ if (params.get("usersGroups") instanceof Long) [ FD ]
Line_79 $$ if (ArrayUtil.isNotEmpty(roleIds) && inherit && !socialRelationTypeUnionUserGroups) -->Line_105 $$ if (!siteGroupIds.isEmpty()) [ CD ]
Line_162 $$ if (params5 != null) -->Line_165 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_18 $$ if (params.get("usersGroups") instanceof Long) [ CD ]
Line_18 $$ if (params.get("usersGroups") instanceof Long) -->Line_19 $$ Long groupId = (Long) params.get("usersGroups")[ CD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_239 $$ qPos.add(emailAddresses, 2)[ FD ]
Line_40 $$ List<Long> userGroupIds = new ArrayList()-->Line_49 $$ userGroupIds.add(group.getClassPK())[ FD ]
Line_17 $$ Long[] groupIds = null-->Line_21 $$ groupIds = new Long[] [ FD ]
Line_172 $$ if (obc != null) -->Line_173 $$ sb.append(" ORDER BY ")[ CD ]
Line_74 $$ params5 = new LinkedHashMap(params1)-->Line_164 $$ sb.append(replaceJoinAndWhere(sql, params5))[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_185 $$ qPos.add(middleNames, 2)[ FD ]
Line_205 $$ if (params3 != null) -->Line_212 $$ qPos.add(screenNames, 2)[ CD ]
Line_16 $$ LinkedHashMap<String, Object> params6 = null-->Line_119 $$ params6.remove("usersRoles")[ FD ]
Line_15 $$ LinkedHashMap<String, Object> params5 = null-->Line_232 $$ setJoin(qPos, params5)[ FD ]
Line_125 $$ if (hasSocialRelationTypes && ArrayUtil.isNotEmpty(groupIds)) -->Line_126 $$ params2 = new LinkedHashMap(params1)[ CD ]
Line_15 $$ LinkedHashMap<String, Object> params5 = null-->Line_162 $$ if (params5 != null) [ FD ]
Line_16 $$ LinkedHashMap<String, Object> params6 = null-->Line_118 $$ params6 = new LinkedHashMap(params1)[ FD ]
Line_157 $$ if (params4 != null) -->Line_159 $$ sb.append(replaceJoinAndWhere(sql, params4))[ CD ]
Line_133 $$ session = openSession()-->Line_178 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_13 $$ LinkedHashMap<String, Object> params3 = null-->Line_67 $$ params3.remove("usersGroups")[ FD ]
Line_110 $$ params4 = new LinkedHashMap(params1)-->Line_218 $$ if (params4 != null) [ FD ]
Line_147 $$ if (params2 != null) -->Line_150 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_118 $$ params6 = new LinkedHashMap(params1)-->Line_169 $$ sb.append(replaceJoinAndWhere(sql, params6))[ FD ]
Line_66 $$ params3 = new LinkedHashMap(params1)-->Line_109 $$ params3.put("usersGroups", siteGroupIdsArray)[ FD ]
Line_105 $$ if (!siteGroupIds.isEmpty()) -->Line_106 $$ Long[] siteGroupIdsArray = siteGroupIds.toArray(new Long[siteGroupIds.size()])[ CD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_241 $$ qPos.add(status)[ FD ]
Line_139 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.emailAddress)", StringPool.LIKE, true, emailAddresses)-->Line_154 $$ sb.append(replaceJoinAndWhere(sql, params3))[ FD ]
Line_19 $$ Long groupId = (Long) params.get("usersGroups")-->Line_42 $$ Group group = GroupLocalServiceUtil.fetchGroup(groupId)[ FD ]
Line_139 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.emailAddress)", StringPool.LIKE, true, emailAddresses)-->Line_141 $$ sql = StringUtil.replace(sql, _STATUS_SQL, StringPool.BLANK)[ FD ]
Line_13 $$ LinkedHashMap<String, Object> params3 = null-->Line_66 $$ params3 = new LinkedHashMap(params1)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_36 $$ boolean socialRelationTypeUnionUserGroups = GetterUtil.getBoolean(params.get("socialRelationTypeUnionUserGroups"))[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_6 $$ screenNames = CustomSQLUtil.keywords(screenNames)[ FD ]
Line_69 $$ params4 = new LinkedHashMap(params1)-->Line_159 $$ sb.append(replaceJoinAndWhere(sql, params4))[ FD ]
Line_40 $$ List<Long> userGroupIds = new ArrayList()-->Line_89 $$ userGroupIds.add(group.getClassPK())[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_222 $$ qPos.add(firstNames, 2)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_223 $$ qPos.add(middleNames, 2)[ FD ]
Line_24 $$ groupIds = (Long[]) params.get("usersGroups")-->Line_125 $$ if (hasSocialRelationTypes && ArrayUtil.isNotEmpty(groupIds)) [ FD ]
Line_9 $$ params = _emptyLinkedHashMap-->Line_19 $$ Long groupId = (Long) params.get("usersGroups")[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_233 $$ qPos.add(companyId)[ FD ]
Line_143 $$ StringBundler sb = new StringBundler(14)-->Line_169 $$ sb.append(replaceJoinAndWhere(sql, params6))[ FD ]
Line_139 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.emailAddress)", StringPool.LIKE, true, emailAddresses)-->Line_176 $$ sql = sb.toString()[ FD ]
Line_12 $$ LinkedHashMap<String, Object> params2 = null-->Line_128 $$ params2.remove("usersGroups")[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_3 $$ firstNames = CustomSQLUtil.keywords(firstNames)[ CD ]
Line_231 $$ if (params5 != null) -->Line_239 $$ qPos.add(emailAddresses, 2)[ CD ]
Line_74 $$ params5 = new LinkedHashMap(params1)-->Line_75 $$ params5.remove("usersGroups")[ FD ]
Line_205 $$ if (params3 != null) -->Line_207 $$ qPos.add(companyId)[ CD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_184 $$ qPos.add(firstNames, 2)[ FD ]
Line_66 $$ params3 = new LinkedHashMap(params1)-->Line_107 $$ params3 = new LinkedHashMap(params1)[ FD ]
Line_138 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.screenName)", StringPool.LIKE, false, screenNames)-->Line_176 $$ sql = sb.toString()[ FD ]
Line_38 $$ List<Long> organizationIds = new ArrayList()-->Line_99 $$ params2.put("usersOrgs", organizationIds.toArray(new Long[organizationIds.size()]))[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_190 $$ qPos.add(status)[ FD ]
Line_205 $$ if (params3 != null) -->Line_213 $$ qPos.add(emailAddresses, 2)[ CD ]
Line_137 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.lastName)", StringPool.LIKE, false, lastNames)-->Line_145 $$ sb.append(replaceJoinAndWhere(sql, params1))[ FD ]
Line_143 $$ StringBundler sb = new StringBundler(14)-->Line_160 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_152 $$ if (params3 != null) -->Line_154 $$ sb.append(replaceJoinAndWhere(sql, params3))[ CD ]
Line_46 $$ if (group.isOrganization()) -->Line_47 $$ organizationIds.add(group.getOrganizationId())[ CD ]
Line_96 $$ params2 = new LinkedHashMap(params1)-->Line_99 $$ params2.put("usersOrgs", organizationIds.toArray(new Long[organizationIds.size()]))[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_187 $$ qPos.add(screenNames, 2)[ FD ]
Line_138 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.screenName)", StringPool.LIKE, false, screenNames)-->Line_149 $$ sb.append(replaceJoinAndWhere(sql, params2))[ FD ]
Line_135 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.firstName)", StringPool.LIKE, false, firstNames)-->Line_176 $$ sql = sb.toString()[ FD ]
Line_21 $$ groupIds = new Long[] -->Line_125 $$ if (hasSocialRelationTypes && ArrayUtil.isNotEmpty(groupIds)) [ FD ]
Line_218 $$ if (params4 != null) -->Line_219 $$ setJoin(qPos, params4)[ CD ]
Line_96 $$ params2 = new LinkedHashMap(params1)-->Line_149 $$ sb.append(replaceJoinAndWhere(sql, params2))[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_212 $$ qPos.add(screenNames, 2)[ FD ]
Line_6 $$ screenNames = CustomSQLUtil.keywords(screenNames)-->Line_238 $$ qPos.add(screenNames, 2)[ FD ]
Line_15 $$ LinkedHashMap<String, Object> params5 = null-->Line_164 $$ sb.append(replaceJoinAndWhere(sql, params5))[ FD ]
Line_96 $$ params2 = new LinkedHashMap(params1)-->Line_193 $$ setJoin(qPos, params2)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_8 $$ if (params == null) [ CD ]
Line_139 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.emailAddress)", StringPool.LIKE, true, emailAddresses)-->Line_164 $$ sb.append(replaceJoinAndWhere(sql, params5))[ FD ]
Line_37 $$ if (ArrayUtil.isNotEmpty(groupIds) && inherit && !socialRelationTypeUnionUserGroups) -->Line_54 $$ if (!organizationIds.isEmpty()) [ CD ]
Line_231 $$ if (params5 != null) -->Line_234 $$ qPos.add(false)[ CD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_248 $$ qPos.add(firstNames, 2)[ FD ]
Line_66 $$ params3 = new LinkedHashMap(params1)-->Line_108 $$ params3.remove("usersRoles")[ FD ]
Line_55 $$ params2 = new LinkedHashMap(params1)-->Line_192 $$ if (params2 != null) [ FD ]
Line_141 $$ sql = StringUtil.replace(sql, _STATUS_SQL, StringPool.BLANK)-->Line_176 $$ sql = sb.toString()[ FD ]
Line_38 $$ List<Long> organizationIds = new ArrayList()-->Line_58 $$ params2.put("usersOrgs", organizationIds)[ FD ]
Line_135 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.firstName)", StringPool.LIKE, false, firstNames)-->Line_178 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_14 $$ LinkedHashMap<String, Object> params4 = null-->Line_69 $$ params4 = new LinkedHashMap(params1)[ FD ]
Line_69 $$ params4 = new LinkedHashMap(params1)-->Line_70 $$ params4.remove("usersGroups")[ FD ]
Line_105 $$ if (!siteGroupIds.isEmpty()) -->Line_109 $$ params3.put("usersGroups", siteGroupIdsArray)[ CD ]
Line_143 $$ StringBundler sb = new StringBundler(14)-->Line_164 $$ sb.append(replaceJoinAndWhere(sql, params5))[ FD ]
Line_125 $$ if (hasSocialRelationTypes && ArrayUtil.isNotEmpty(groupIds)) -->Line_127 $$ params1.remove("socialRelationType")[ CD ]
Line_147 $$ if (params2 != null) -->Line_149 $$ sb.append(replaceJoinAndWhere(sql, params2))[ CD ]
Line_244 $$ if (params6 != null) -->Line_252 $$ qPos.add(emailAddresses, 2)[ CD ]
Line_231 $$ if (params5 != null) -->Line_236 $$ qPos.add(middleNames, 2)[ CD ]
Line_55 $$ params2 = new LinkedHashMap(params1)-->Line_126 $$ params2 = new LinkedHashMap(params1)[ FD ]
Line_134 $$ String sql = CustomSQLUtil.get(FIND_BY_C_FN_MN_LN_SN_EA_S)-->Line_141 $$ sql = StringUtil.replace(sql, _STATUS_SQL, StringPool.BLANK)[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_233 $$ qPos.add(companyId)[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_225 $$ qPos.add(screenNames, 2)[ FD ]
Line_66 $$ params3 = new LinkedHashMap(params1)-->Line_154 $$ sb.append(replaceJoinAndWhere(sql, params3))[ FD ]
Line_113 $$ params5 = new LinkedHashMap(params1)-->Line_114 $$ params5.remove("usersRoles")[ FD ]
Line_64 $$ if (!siteGroupIds.isEmpty()) -->Line_71 $$ params4.put("groupsUserGroups", siteGroupIdsArray)[ CD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_211 $$ qPos.add(lastNames, 2)[ FD ]
Line_4 $$ middleNames = CustomSQLUtil.keywords(middleNames)-->Line_185 $$ qPos.add(middleNames, 2)[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_208 $$ qPos.add(false)[ FD ]
Line_107 $$ params3 = new LinkedHashMap(params1)-->Line_154 $$ sb.append(replaceJoinAndWhere(sql, params3))[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_202 $$ qPos.add(status)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_253 $$ if (status != WorkflowConstants.STATUS_ANY) [ FD ]
Line_4 $$ middleNames = CustomSQLUtil.keywords(middleNames)-->Line_136 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.middleName)", StringPool.LIKE, false, middleNames)[ FD ]
Line_138 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.screenName)", StringPool.LIKE, false, screenNames)-->Line_154 $$ sb.append(replaceJoinAndWhere(sql, params3))[ FD ]
Line_13 $$ LinkedHashMap<String, Object> params3 = null-->Line_107 $$ params3 = new LinkedHashMap(params1)[ FD ]
Line_55 $$ params2 = new LinkedHashMap(params1)-->Line_149 $$ sb.append(replaceJoinAndWhere(sql, params2))[ FD ]
Line_178 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_257 $$ return (List<Long>) QueryUtil.list(q, getDialect(), start, end)[ FD ]
Line_12 $$ LinkedHashMap<String, Object> params2 = null-->Line_61 $$ params2.put("usersOrgsTree", new ArrayList<Organization>(organizations.values()))[ FD ]
Line_141 $$ sql = StringUtil.replace(sql, _STATUS_SQL, StringPool.BLANK)-->Line_164 $$ sb.append(replaceJoinAndWhere(sql, params5))[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_182 $$ qPos.add(companyId)[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_183 $$ qPos.add(false)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_224 $$ qPos.add(lastNames, 2)[ FD ]
Line_74 $$ params5 = new LinkedHashMap(params1)-->Line_231 $$ if (params5 != null) [ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_254 $$ qPos.add(status)[ FD ]
Line_98 $$ if (PropsValues.ORGANIZATIONS_MEMBERSHIP_STRICT) -->Line_102 $$ params2.put("usersOrgsTree", new ArrayList<Organization>(organizations.values()))[ CD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_212 $$ qPos.add(screenNames, 2)[ FD ]
Line_117 $$ if (!userGroupIds.isEmpty()) -->Line_118 $$ params6 = new LinkedHashMap(params1)[ CD ]
Line_64 $$ if (!siteGroupIds.isEmpty()) -->Line_67 $$ params3.remove("usersGroups")[ CD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_196 $$ qPos.add(firstNames, 2)[ FD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_220 $$ qPos.add(companyId)[ FD ]
Line_110 $$ params4 = new LinkedHashMap(params1)-->Line_157 $$ if (params4 != null) [ FD ]
Line_65 $$ Long[] siteGroupIdsArray = siteGroupIds.toArray(new Long[siteGroupIds.size()])-->Line_112 $$ params4.put("groupsOrgs", siteGroupIdsArray)[ FD ]
Line_105 $$ if (!siteGroupIds.isEmpty()) -->Line_107 $$ params3 = new LinkedHashMap(params1)[ CD ]
Line_137 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.lastName)", StringPool.LIKE, false, lastNames)-->Line_159 $$ sb.append(replaceJoinAndWhere(sql, params4))[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_135 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.firstName)", StringPool.LIKE, false, firstNames)[ FD ]
Line_13 $$ LinkedHashMap<String, Object> params3 = null-->Line_154 $$ sb.append(replaceJoinAndWhere(sql, params3))[ FD ]
Line_172 $$ if (obc != null) -->Line_174 $$ sb.append(obc.toString())[ CD ]
Line_134 $$ String sql = CustomSQLUtil.get(FIND_BY_C_FN_MN_LN_SN_EA_S)-->Line_145 $$ sb.append(replaceJoinAndWhere(sql, params1))[ FD ]
Line_244 $$ if (params6 != null) -->Line_249 $$ qPos.add(middleNames, 2)[ CD ]
Line_7 $$ emailAddresses = CustomSQLUtil.keywords(emailAddresses)-->Line_200 $$ qPos.add(emailAddresses, 2)[ FD ]
Line_55 $$ params2 = new LinkedHashMap(params1)-->Line_61 $$ params2.put("usersOrgsTree", new ArrayList<Organization>(organizations.values()))[ FD ]
Line_143 $$ StringBundler sb = new StringBundler(14)-->Line_145 $$ sb.append(replaceJoinAndWhere(sql, params1))[ FD ]
Line_136 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.middleName)", StringPool.LIKE, false, middleNames)-->Line_177 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_3 $$ firstNames = CustomSQLUtil.keywords(firstNames)-->Line_248 $$ qPos.add(firstNames, 2)[ FD ]
Line_143 $$ StringBundler sb = new StringBundler(14)-->Line_148 $$ sb.append(" UNION (")[ FD ]
Line_69 $$ params4 = new LinkedHashMap(params1)-->Line_157 $$ if (params4 != null) [ FD ]
Line_126 $$ params2 = new LinkedHashMap(params1)-->Line_192 $$ if (params2 != null) [ FD ]
Line_126 $$ params2 = new LinkedHashMap(params1)-->Line_193 $$ setJoin(qPos, params2)[ FD ]
Line_135 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.firstName)", StringPool.LIKE, false, firstNames)-->Line_141 $$ sql = StringUtil.replace(sql, _STATUS_SQL, StringPool.BLANK)[ FD ]
Line_143 $$ StringBundler sb = new StringBundler(14)-->Line_149 $$ sb.append(replaceJoinAndWhere(sql, params2))[ FD ]
Line_4 $$ middleNames = CustomSQLUtil.keywords(middleNames)-->Line_210 $$ qPos.add(middleNames, 2)[ FD ]
Line_14 $$ LinkedHashMap<String, Object> params4 = null-->Line_159 $$ sb.append(replaceJoinAndWhere(sql, params4))[ FD ]
Line_157 $$ if (params4 != null) -->Line_158 $$ sb.append(" UNION (")[ CD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_24 $$ groupIds = (Long[]) params.get("usersGroups")[ FD ]
Line_136 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.middleName)", StringPool.LIKE, false, middleNames)-->Line_145 $$ sb.append(replaceJoinAndWhere(sql, params1))[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_225 $$ qPos.add(screenNames, 2)[ FD ]
Line_2 $$ protected List<Long> doFindByC_FN_MN_LN_SN_EA_S(long companyId, String[] firstNames, String[] middleNames, String[] lastNames, String[] screenNames, String[] emailAddresses, int status, LinkedHashMap<String, Object> params, boolean andOperator, int start, int end, OrderByComparator<User> obc) -->Line_235 $$ qPos.add(firstNames, 2)[ FD ]
Line_3 $$ firstNames = CustomSQLUtil.keywords(firstNames)-->Line_135 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(User_.firstName)", StringPool.LIKE, false, firstNames)[ FD ]
Line_86 $$ if (group.isOrganization()) -->Line_88 $$ if (group.isUserGroup()) [ CD ]
Line_180 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_197 $$ qPos.add(middleNames, 2)[ FD ]
Line_192 $$ if (params2 != null) -->Line_201 $$ if (status != WorkflowConstants.STATUS_ANY) [ CD ]
