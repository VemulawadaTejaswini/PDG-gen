Line_20 $$ if (clientArgs.isEmpty()) -->Line_39 $$ if (!realFile.exists()) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ if (java.util.logging.LogManager.getLogManager().getClass().getName().equals("org.jboss.logmanager.LogManager")) [ CD ]
Line_20 $$ if (clientArgs.isEmpty()) -->Line_38 $$ File realFile = new File(earPath)[ CD ]
Line_31 $$ if (pos == -1) -->Line_33 $$ deploymentName = null[ CD ]
Line_47 $$ final Bootstrap.ConfigurationPersisterFactory configurationPersisterFactory = new Bootstrap.ConfigurationPersisterFactory() -->Line_55 $$ extensionRegistry.setWriterRegistry(persister)[ CD ]
Line_38 $$ File realFile = new File(earPath)-->Line_40 $$ throw AppClientLogger.ROOT_LOGGER.cannotFindAppClientFile(realFile.getAbsoluteFile())[ FD ]
Line_3 $$ if (java.util.logging.LogManager.getLogManager().getClass().getName().equals("org.jboss.logmanager.LogManager")) -->Line_8 $$ StdioContext.install()[ CD ]
Line_15 $$ if (options == null) -->Line_16 $$ return[ CD ]
Line_26 $$ final String file = clientArgs.get(0)-->Line_35 $$ deploymentName = file.substring(pos + 1)[ FD ]
Line_43 $$ final Bootstrap.Configuration configuration = new Bootstrap.Configuration(serverEnvironment)-->Line_60 $$ bootstrap.bootstrap(configuration, Collections.<ServiceActivator>emptyList()).get()[ FD ]
Line_3 $$ if (java.util.logging.LogManager.getLogManager().getClass().getName().equals("org.jboss.logmanager.LogManager")) -->Line_9 $$ final StdioContext context = StdioContext.create(new NullInputStream(), new LoggingOutputStream(org.jboss.logmanager.Logger.getLogger("stdout"), org.jboss.logmanager.Level.INFO), new LoggingOutputStream(org.jboss.logmanager.Logger.getLogger("stderr"), org.jboss.logmanager.Level.ERROR))[ CD ]
Line_31 $$ if (pos == -1) -->Line_32 $$ earPath = file[ CD ]
Line_20 $$ if (clientArgs.isEmpty()) -->Line_47 $$ final Bootstrap.ConfigurationPersisterFactory configurationPersisterFactory = new Bootstrap.ConfigurationPersisterFactory() [ CD ]
Line_43 $$ final Bootstrap.Configuration configuration = new Bootstrap.Configuration(serverEnvironment)-->Line_59 $$ configuration.setConfigurationPersisterFactory(configurationPersisterFactory)[ FD ]
Line_20 $$ if (clientArgs.isEmpty()) -->Line_31 $$ if (pos == -1) [ CD ]
Line_20 $$ if (clientArgs.isEmpty()) -->Line_42 $$ final Bootstrap bootstrap = Bootstrap.Factory.newInstance()[ CD ]
Line_47 $$ final Bootstrap.ConfigurationPersisterFactory configurationPersisterFactory = new Bootstrap.ConfigurationPersisterFactory() -->Line_49 $$ ApplicationClientConfigurationPersister persister = new ApplicationClientConfigurationPersister(earPath, deploymentName, options.hostUrl, options.propertiesFile, params, serverEnvironment.getServerConfigurationFile().getBootFile(), rootElement, parser)[ CD ]
Line_29 $$ final String earPath-->Line_32 $$ earPath = file[ FD ]
Line_47 $$ final Bootstrap.ConfigurationPersisterFactory configurationPersisterFactory = new Bootstrap.ConfigurationPersisterFactory() -->Line_59 $$ configuration.setConfigurationPersisterFactory(configurationPersisterFactory)[ FD ]
Line_20 $$ if (clientArgs.isEmpty()) -->Line_21 $$ STDERR.println(AppClientLogger.ROOT_LOGGER.appClientNotSpecified())[ CD ]
Line_19 $$ final List<String> clientArgs = options.clientArguments-->Line_27 $$ final List<String> params = clientArgs.subList(1, clientArgs.size())[ FD ]
Line_20 $$ if (clientArgs.isEmpty()) -->Line_22 $$ usage()[ CD ]
Line_20 $$ if (clientArgs.isEmpty()) -->Line_28 $$ final String deploymentName[ CD ]
Line_20 $$ if (clientArgs.isEmpty()) -->Line_59 $$ configuration.setConfigurationPersisterFactory(configurationPersisterFactory)[ CD ]
Line_42 $$ final Bootstrap bootstrap = Bootstrap.Factory.newInstance()-->Line_60 $$ bootstrap.bootstrap(configuration, Collections.<ServiceActivator>emptyList()).get()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_14 $$ final ParsedOptions options = determineEnvironment(args, new Properties(WildFlySecurityManager.getSystemPropertiesPrivileged()), WildFlySecurityManager.getSystemEnvironmentPrivileged(), ServerEnvironment.LaunchType.APPCLIENT)[ FD ]
Line_19 $$ final List<String> clientArgs = options.clientArguments-->Line_20 $$ if (clientArgs.isEmpty()) [ FD ]
Line_20 $$ if (clientArgs.isEmpty()) -->Line_29 $$ final String earPath[ CD ]
Line_47 $$ final Bootstrap.ConfigurationPersisterFactory configurationPersisterFactory = new Bootstrap.ConfigurationPersisterFactory() -->Line_56 $$ return persister[ CD ]
Line_20 $$ if (clientArgs.isEmpty()) -->Line_45 $$ final ExtensionRegistry extensionRegistry = configuration.getExtensionRegistry()[ CD ]
Line_20 $$ if (clientArgs.isEmpty()) -->Line_60 $$ bootstrap.bootstrap(configuration, Collections.<ServiceActivator>emptyList()).get()[ CD ]
Line_28 $$ final String deploymentName-->Line_33 $$ deploymentName = null[ FD ]
Line_49 $$ ApplicationClientConfigurationPersister persister = new ApplicationClientConfigurationPersister(earPath, deploymentName, options.hostUrl, options.propertiesFile, params, serverEnvironment.getServerConfigurationFile().getBootFile(), rootElement, parser)-->Line_52 $$ persister.registerAdditionalRootElement(new QName(namespace.getUriString(), "server"), parser)[ FD ]
Line_50 $$ for (Namespace namespace : Namespace.domainValues()) -->Line_51 $$ if (!namespace.equals(Namespace.CURRENT)) [ FD ]
Line_51 $$ if (!namespace.equals(Namespace.CURRENT)) -->Line_52 $$ persister.registerAdditionalRootElement(new QName(namespace.getUriString(), "server"), parser)[ CD ]
Line_45 $$ final ExtensionRegistry extensionRegistry = configuration.getExtensionRegistry()-->Line_55 $$ extensionRegistry.setWriterRegistry(persister)[ FD ]
Line_29 $$ final String earPath-->Line_36 $$ earPath = file.substring(0, pos)[ FD ]
Line_47 $$ final Bootstrap.ConfigurationPersisterFactory configurationPersisterFactory = new Bootstrap.ConfigurationPersisterFactory() -->Line_49 $$ ApplicationClientConfigurationPersister persister = new ApplicationClientConfigurationPersister(earPath, deploymentName, options.hostUrl, options.propertiesFile, params, serverEnvironment.getServerConfigurationFile().getBootFile(), rootElement, parser)[ FD ]
Line_50 $$ for (Namespace namespace : Namespace.domainValues()) -->Line_52 $$ persister.registerAdditionalRootElement(new QName(namespace.getUriString(), "server"), parser)[ FD ]
Line_33 $$ deploymentName = null-->Line_35 $$ deploymentName = file.substring(pos + 1)[ FD ]
Line_30 $$ int pos = file.lastIndexOf("#")-->Line_36 $$ earPath = file.substring(0, pos)[ FD ]
Line_20 $$ if (clientArgs.isEmpty()) -->Line_25 $$ final QName rootElement = new QName(Namespace.CURRENT.getUriString(), "server")[ CD ]
Line_26 $$ final String file = clientArgs.get(0)-->Line_30 $$ int pos = file.lastIndexOf("#")[ FD ]
Line_19 $$ final List<String> clientArgs = options.clientArguments-->Line_26 $$ final String file = clientArgs.get(0)[ FD ]
Line_20 $$ if (clientArgs.isEmpty()) -->Line_44 $$ configuration.setModuleLoader(Module.getBootModuleLoader())[ CD ]
Line_20 $$ if (clientArgs.isEmpty()) -->Line_27 $$ final List<String> params = clientArgs.subList(1, clientArgs.size())[ CD ]
Line_43 $$ final Bootstrap.Configuration configuration = new Bootstrap.Configuration(serverEnvironment)-->Line_44 $$ configuration.setModuleLoader(Module.getBootModuleLoader())[ FD ]
Line_18 $$ ServerEnvironment serverEnvironment = options.environment-->Line_49 $$ ApplicationClientConfigurationPersister persister = new ApplicationClientConfigurationPersister(earPath, deploymentName, options.hostUrl, options.propertiesFile, params, serverEnvironment.getServerConfigurationFile().getBootFile(), rootElement, parser)[ FD ]
Line_3 $$ if (java.util.logging.LogManager.getLogManager().getClass().getName().equals("org.jboss.logmanager.LogManager")) -->Line_10 $$ StdioContext.setStdioContextSelector(new SimpleStdioContextSelector(context))[ CD ]
Line_20 $$ if (clientArgs.isEmpty()) -->Line_46 $$ final AppClientXml parser = new AppClientXml(Module.getBootModuleLoader(), extensionRegistry)[ CD ]
Line_26 $$ final String file = clientArgs.get(0)-->Line_36 $$ earPath = file.substring(0, pos)[ FD ]
Line_20 $$ if (clientArgs.isEmpty()) -->Line_26 $$ final String file = clientArgs.get(0)[ CD ]
Line_43 $$ final Bootstrap.Configuration configuration = new Bootstrap.Configuration(serverEnvironment)-->Line_45 $$ final ExtensionRegistry extensionRegistry = configuration.getExtensionRegistry()[ FD ]
Line_32 $$ earPath = file-->Line_36 $$ earPath = file.substring(0, pos)[ FD ]
Line_14 $$ final ParsedOptions options = determineEnvironment(args, new Properties(WildFlySecurityManager.getSystemPropertiesPrivileged()), WildFlySecurityManager.getSystemEnvironmentPrivileged(), ServerEnvironment.LaunchType.APPCLIENT)-->Line_15 $$ if (options == null) [ FD ]
Line_31 $$ if (pos == -1) -->Line_35 $$ deploymentName = file.substring(pos + 1)[ CD ]
Line_30 $$ int pos = file.lastIndexOf("#")-->Line_31 $$ if (pos == -1) [ FD ]
Line_20 $$ if (clientArgs.isEmpty()) -->Line_43 $$ final Bootstrap.Configuration configuration = new Bootstrap.Configuration(serverEnvironment)[ CD ]
Line_28 $$ final String deploymentName-->Line_35 $$ deploymentName = file.substring(pos + 1)[ FD ]
Line_38 $$ File realFile = new File(earPath)-->Line_39 $$ if (!realFile.exists()) [ FD ]
Line_31 $$ if (pos == -1) -->Line_36 $$ earPath = file.substring(0, pos)[ CD ]
Line_49 $$ ApplicationClientConfigurationPersister persister = new ApplicationClientConfigurationPersister(earPath, deploymentName, options.hostUrl, options.propertiesFile, params, serverEnvironment.getServerConfigurationFile().getBootFile(), rootElement, parser)-->Line_55 $$ extensionRegistry.setWriterRegistry(persister)[ FD ]
Line_26 $$ final String file = clientArgs.get(0)-->Line_32 $$ earPath = file[ FD ]
Line_20 $$ if (clientArgs.isEmpty()) -->Line_23 $$ abort(null)[ CD ]
Line_20 $$ if (clientArgs.isEmpty()) -->Line_30 $$ int pos = file.lastIndexOf("#")[ CD ]
Line_46 $$ final AppClientXml parser = new AppClientXml(Module.getBootModuleLoader(), extensionRegistry)-->Line_52 $$ persister.registerAdditionalRootElement(new QName(namespace.getUriString(), "server"), parser)[ FD ]
