Line_19 $$ for (ShelvedChange change : changes) -->Line_21 $$ shelvedFilesNodes.add(change)[ FD ]
Line_29 $$ for (int i = 0; i < shelvedFilesNodes.size(); i++) -->Line_31 $$ final DefaultMutableTreeNode pathNode = new DefaultMutableTreeNode(filesNode)[ CD ]
Line_6 $$ final List<ShelvedChangeList> changeLists = new ArrayList<ShelvedChangeList>(myShelveChangesManager.getShelvedChangeLists())-->Line_11 $$ Collections.sort(changeLists, ChangelistComparator.getInstance())[ FD ]
Line_2 $$ private TreeModel buildChangesModel() -->Line_5 $$ DefaultTreeModel model = new DefaultTreeModel(myRoot)[ CD ]
Line_5 $$ DefaultTreeModel model = new DefaultTreeModel(myRoot)-->Line_32 $$ model.insertNodeInto(pathNode, node, i)[ FD ]
Line_6 $$ final List<ShelvedChangeList> changeLists = new ArrayList<ShelvedChangeList>(myShelveChangesManager.getShelvedChangeLists())-->Line_7 $$ Collections.sort(changeLists, ChangelistComparator.getInstance())[ FD ]
Line_14 $$ for (ShelvedChangeList changeList : changeLists) -->Line_18 $$ List<ShelvedChange> changes = changeList.getChanges(myProject)[ FD ]
Line_29 $$ for (int i = 0; i < shelvedFilesNodes.size(); i++) -->Line_32 $$ model.insertNodeInto(pathNode, node, i)[ CD ]
Line_2 $$ private TreeModel buildChangesModel() -->Line_8 $$ if (myShelveChangesManager.isShowRecycled()) [ CD ]
Line_8 $$ if (myShelveChangesManager.isShowRecycled()) -->Line_10 $$ changeLists.addAll(recycled)[ CD ]
Line_17 $$ final List<Object> shelvedFilesNodes = new ArrayList<Object>()-->Line_29 $$ for (int i = 0; i < shelvedFilesNodes.size(); i++) [ FD ]
Line_8 $$ if (myShelveChangesManager.isShowRecycled()) -->Line_9 $$ ArrayList<ShelvedChangeList> recycled = new ArrayList<ShelvedChangeList>(myShelveChangesManager.getRecycledShelvedChangeLists())[ CD ]
Line_15 $$ DefaultMutableTreeNode node = new DefaultMutableTreeNode(changeList)-->Line_32 $$ model.insertNodeInto(pathNode, node, i)[ FD ]
Line_31 $$ final DefaultMutableTreeNode pathNode = new DefaultMutableTreeNode(filesNode)-->Line_32 $$ model.insertNodeInto(pathNode, node, i)[ FD ]
Line_29 $$ for (int i = 0; i < shelvedFilesNodes.size(); i++) -->Line_32 $$ model.insertNodeInto(pathNode, node, i)[ FD ]
Line_8 $$ if (myShelveChangesManager.isShowRecycled()) -->Line_11 $$ Collections.sort(changeLists, ChangelistComparator.getInstance())[ CD ]
Line_29 $$ for (int i = 0; i < shelvedFilesNodes.size(); i++) -->Line_30 $$ final Object filesNode = shelvedFilesNodes.get(i)[ CD ]
Line_6 $$ final List<ShelvedChangeList> changeLists = new ArrayList<ShelvedChangeList>(myShelveChangesManager.getShelvedChangeLists())-->Line_10 $$ changeLists.addAll(recycled)[ FD ]
Line_2 $$ private TreeModel buildChangesModel() -->Line_7 $$ Collections.sort(changeLists, ChangelistComparator.getInstance())[ CD ]
Line_19 $$ for (ShelvedChange change : changes) -->Line_20 $$ putMovedMessage(change.getBeforePath(), change.getAfterPath())[ FD ]
Line_15 $$ DefaultMutableTreeNode node = new DefaultMutableTreeNode(changeList)-->Line_16 $$ model.insertNodeInto(node, myRoot, myRoot.getChildCount())[ FD ]
Line_17 $$ final List<Object> shelvedFilesNodes = new ArrayList<Object>()-->Line_28 $$ Collections.sort(shelvedFilesNodes, ShelvedFilePatchComparator.getInstance())[ FD ]
Line_24 $$ for (ShelvedBinaryFile file : binaryFiles) -->Line_26 $$ shelvedFilesNodes.add(file)[ FD ]
Line_2 $$ private TreeModel buildChangesModel() -->Line_6 $$ final List<ShelvedChangeList> changeLists = new ArrayList<ShelvedChangeList>(myShelveChangesManager.getShelvedChangeLists())[ CD ]
Line_17 $$ final List<Object> shelvedFilesNodes = new ArrayList<Object>()-->Line_30 $$ final Object filesNode = shelvedFilesNodes.get(i)[ FD ]
Line_5 $$ DefaultTreeModel model = new DefaultTreeModel(myRoot)-->Line_16 $$ model.insertNodeInto(node, myRoot, myRoot.getChildCount())[ FD ]
Line_17 $$ final List<Object> shelvedFilesNodes = new ArrayList<Object>()-->Line_26 $$ shelvedFilesNodes.add(file)[ FD ]
Line_2 $$ private TreeModel buildChangesModel() -->Line_13 $$ myMoveRenameInfo.clear()[ CD ]
Line_9 $$ ArrayList<ShelvedChangeList> recycled = new ArrayList<ShelvedChangeList>(myShelveChangesManager.getRecycledShelvedChangeLists())-->Line_10 $$ changeLists.addAll(recycled)[ FD ]
Line_17 $$ final List<Object> shelvedFilesNodes = new ArrayList<Object>()-->Line_21 $$ shelvedFilesNodes.add(change)[ FD ]
Line_14 $$ for (ShelvedChangeList changeList : changeLists) -->Line_23 $$ List<ShelvedBinaryFile> binaryFiles = changeList.getBinaryFiles()[ FD ]
Line_29 $$ for (int i = 0; i < shelvedFilesNodes.size(); i++) -->Line_30 $$ final Object filesNode = shelvedFilesNodes.get(i)[ FD ]
Line_2 $$ private TreeModel buildChangesModel() -->Line_35 $$ return model[ CD ]
