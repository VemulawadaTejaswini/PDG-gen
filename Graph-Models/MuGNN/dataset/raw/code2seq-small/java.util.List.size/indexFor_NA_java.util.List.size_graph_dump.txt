Line_2 $$ public static int indexFor(ClusteringPrefix name, List<IndexInfo> indexList, ClusteringComparator comparator, boolean reversed, int lastIndex) -->Line_4 $$ int startIdx = 0[ CD ]
Line_16 $$ int index = Collections.binarySearch(toSearch, target, comparator.indexComparator(reversed))-->Line_17 $$ return startIdx + (index < 0 ? -index - (reversed ? 2 : 1) : index)[ FD ]
Line_6 $$ if (reversed) -->Line_11 $$ if (lastIndex > 0) [ CD ]
Line_8 $$ toSearch = indexList.subList(0, lastIndex + 1)-->Line_16 $$ int index = Collections.binarySearch(toSearch, target, comparator.indexComparator(reversed))[ FD ]
Line_5 $$ List<IndexInfo> toSearch = indexList-->Line_13 $$ toSearch = indexList.subList(lastIndex, indexList.size())[ FD ]
Line_4 $$ int startIdx = 0-->Line_12 $$ startIdx = lastIndex[ FD ]
Line_5 $$ List<IndexInfo> toSearch = indexList-->Line_8 $$ toSearch = indexList.subList(0, lastIndex + 1)[ FD ]
Line_11 $$ if (lastIndex > 0) -->Line_12 $$ startIdx = lastIndex[ CD ]
Line_3 $$ IndexInfo target = new IndexInfo(name, name, 0, 0, null)-->Line_16 $$ int index = Collections.binarySearch(toSearch, target, comparator.indexComparator(reversed))[ FD ]
Line_2 $$ public static int indexFor(ClusteringPrefix name, List<IndexInfo> indexList, ClusteringComparator comparator, boolean reversed, int lastIndex) -->Line_11 $$ if (lastIndex > 0) [ FD ]
Line_7 $$ if (lastIndex < indexList.size() - 1) -->Line_8 $$ toSearch = indexList.subList(0, lastIndex + 1)[ CD ]
Line_13 $$ toSearch = indexList.subList(lastIndex, indexList.size())-->Line_16 $$ int index = Collections.binarySearch(toSearch, target, comparator.indexComparator(reversed))[ FD ]
Line_2 $$ public static int indexFor(ClusteringPrefix name, List<IndexInfo> indexList, ClusteringComparator comparator, boolean reversed, int lastIndex) -->Line_13 $$ toSearch = indexList.subList(lastIndex, indexList.size())[ FD ]
Line_2 $$ public static int indexFor(ClusteringPrefix name, List<IndexInfo> indexList, ClusteringComparator comparator, boolean reversed, int lastIndex) -->Line_17 $$ return startIdx + (index < 0 ? -index - (reversed ? 2 : 1) : index)[ CD ]
Line_2 $$ public static int indexFor(ClusteringPrefix name, List<IndexInfo> indexList, ClusteringComparator comparator, boolean reversed, int lastIndex) -->Line_7 $$ if (lastIndex < indexList.size() - 1) [ FD ]
Line_11 $$ if (lastIndex > 0) -->Line_13 $$ toSearch = indexList.subList(lastIndex, indexList.size())[ CD ]
Line_2 $$ public static int indexFor(ClusteringPrefix name, List<IndexInfo> indexList, ClusteringComparator comparator, boolean reversed, int lastIndex) -->Line_5 $$ List<IndexInfo> toSearch = indexList[ CD ]
Line_2 $$ public static int indexFor(ClusteringPrefix name, List<IndexInfo> indexList, ClusteringComparator comparator, boolean reversed, int lastIndex) -->Line_16 $$ int index = Collections.binarySearch(toSearch, target, comparator.indexComparator(reversed))[ FD ]
Line_8 $$ toSearch = indexList.subList(0, lastIndex + 1)-->Line_13 $$ toSearch = indexList.subList(lastIndex, indexList.size())[ FD ]
Line_2 $$ public static int indexFor(ClusteringPrefix name, List<IndexInfo> indexList, ClusteringComparator comparator, boolean reversed, int lastIndex) -->Line_3 $$ IndexInfo target = new IndexInfo(name, name, 0, 0, null)[ CD ]
Line_2 $$ public static int indexFor(ClusteringPrefix name, List<IndexInfo> indexList, ClusteringComparator comparator, boolean reversed, int lastIndex) -->Line_6 $$ if (reversed) [ CD ]
Line_2 $$ public static int indexFor(ClusteringPrefix name, List<IndexInfo> indexList, ClusteringComparator comparator, boolean reversed, int lastIndex) -->Line_12 $$ startIdx = lastIndex[ FD ]
Line_6 $$ if (reversed) -->Line_7 $$ if (lastIndex < indexList.size() - 1) [ CD ]
Line_2 $$ public static int indexFor(ClusteringPrefix name, List<IndexInfo> indexList, ClusteringComparator comparator, boolean reversed, int lastIndex) -->Line_16 $$ int index = Collections.binarySearch(toSearch, target, comparator.indexComparator(reversed))[ CD ]
Line_2 $$ public static int indexFor(ClusteringPrefix name, List<IndexInfo> indexList, ClusteringComparator comparator, boolean reversed, int lastIndex) -->Line_8 $$ toSearch = indexList.subList(0, lastIndex + 1)[ FD ]
Line_5 $$ List<IndexInfo> toSearch = indexList-->Line_16 $$ int index = Collections.binarySearch(toSearch, target, comparator.indexComparator(reversed))[ FD ]
