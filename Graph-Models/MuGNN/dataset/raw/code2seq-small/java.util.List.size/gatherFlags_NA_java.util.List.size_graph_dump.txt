Line_2 $$ private EnumSet<Flag> gatherFlags(QueryOptions options) -->Line_16 $$ return flags[ CD ]
Line_14 $$ if (options.getSpecificOptions().timestamp != Long.MIN_VALUE)-->Line_15 $$ flags.add(Flag.TIMESTAMP)[ CD ]
Line_10 $$ if (options.getPagingState() != null)-->Line_11 $$ flags.add(Flag.PAGING_STATE)[ CD ]
Line_3 $$ EnumSet<Flag> flags = EnumSet.noneOf(Flag.class)-->Line_11 $$ flags.add(Flag.PAGING_STATE)[ FD ]
Line_2 $$ private EnumSet<Flag> gatherFlags(QueryOptions options) -->Line_4 $$ if (options.getValues().size() > 0)[ CD ]
Line_3 $$ EnumSet<Flag> flags = EnumSet.noneOf(Flag.class)-->Line_5 $$ flags.add(Flag.VALUES)[ FD ]
Line_2 $$ private EnumSet<Flag> gatherFlags(QueryOptions options) -->Line_3 $$ EnumSet<Flag> flags = EnumSet.noneOf(Flag.class)[ CD ]
Line_12 $$ if (options.getSerialConsistency() != ConsistencyLevel.SERIAL)-->Line_13 $$ flags.add(Flag.SERIAL_CONSISTENCY)[ CD ]
Line_3 $$ EnumSet<Flag> flags = EnumSet.noneOf(Flag.class)-->Line_15 $$ flags.add(Flag.TIMESTAMP)[ FD ]
Line_2 $$ private EnumSet<Flag> gatherFlags(QueryOptions options) -->Line_6 $$ if (options.skipMetadata())[ FD ]
Line_2 $$ private EnumSet<Flag> gatherFlags(QueryOptions options) -->Line_10 $$ if (options.getPagingState() != null)[ FD ]
Line_2 $$ private EnumSet<Flag> gatherFlags(QueryOptions options) -->Line_8 $$ if (options.getPageSize() >= 0)[ FD ]
Line_2 $$ private EnumSet<Flag> gatherFlags(QueryOptions options) -->Line_14 $$ if (options.getSpecificOptions().timestamp != Long.MIN_VALUE)[ FD ]
Line_6 $$ if (options.skipMetadata())-->Line_7 $$ flags.add(Flag.SKIP_METADATA)[ CD ]
Line_2 $$ private EnumSet<Flag> gatherFlags(QueryOptions options) -->Line_12 $$ if (options.getSerialConsistency() != ConsistencyLevel.SERIAL)[ CD ]
Line_2 $$ private EnumSet<Flag> gatherFlags(QueryOptions options) -->Line_12 $$ if (options.getSerialConsistency() != ConsistencyLevel.SERIAL)[ FD ]
Line_2 $$ private EnumSet<Flag> gatherFlags(QueryOptions options) -->Line_8 $$ if (options.getPageSize() >= 0)[ CD ]
Line_2 $$ private EnumSet<Flag> gatherFlags(QueryOptions options) -->Line_4 $$ if (options.getValues().size() > 0)[ FD ]
Line_8 $$ if (options.getPageSize() >= 0)-->Line_9 $$ flags.add(Flag.PAGE_SIZE)[ CD ]
Line_3 $$ EnumSet<Flag> flags = EnumSet.noneOf(Flag.class)-->Line_7 $$ flags.add(Flag.SKIP_METADATA)[ FD ]
Line_2 $$ private EnumSet<Flag> gatherFlags(QueryOptions options) -->Line_14 $$ if (options.getSpecificOptions().timestamp != Long.MIN_VALUE)[ CD ]
Line_4 $$ if (options.getValues().size() > 0)-->Line_5 $$ flags.add(Flag.VALUES)[ CD ]
Line_2 $$ private EnumSet<Flag> gatherFlags(QueryOptions options) -->Line_6 $$ if (options.skipMetadata())[ CD ]
Line_3 $$ EnumSet<Flag> flags = EnumSet.noneOf(Flag.class)-->Line_13 $$ flags.add(Flag.SERIAL_CONSISTENCY)[ FD ]
Line_2 $$ private EnumSet<Flag> gatherFlags(QueryOptions options) -->Line_10 $$ if (options.getPagingState() != null)[ CD ]
Line_3 $$ EnumSet<Flag> flags = EnumSet.noneOf(Flag.class)-->Line_9 $$ flags.add(Flag.PAGE_SIZE)[ FD ]
