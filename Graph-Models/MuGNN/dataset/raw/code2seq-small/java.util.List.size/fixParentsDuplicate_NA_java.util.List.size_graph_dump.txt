Line_8 $$ if (!commitId0.equals(parents.get(1))) -->Line_11 $$ return new DelegateGraphCommit<CommitId>(commit, Collections.singletonList(commitId0))[ CD ]
Line_2 $$ private static <CommitId> GraphCommit<CommitId> fixParentsDuplicate(@NotNull GraphCommit<CommitId> commit) -->Line_23 $$ return new DelegateGraphCommit<CommitId>(commit, correctParents)[ CD ]
Line_14 $$ Set<CommitId> allParents = new HashSet<CommitId>(parents)-->Line_19 $$ if (allParents.remove(commitId)) [ FD ]
Line_19 $$ if (allParents.remove(commitId)) -->Line_20 $$ correctParents.add(commitId)[ CD ]
Line_3 $$ List<CommitId> parents = commit.getParents()-->Line_15 $$ if (parents.size() == allParents.size())[ FD ]
Line_8 $$ if (!commitId0.equals(parents.get(1))) -->Line_9 $$ return commit[ CD ]
Line_6 $$ if (parents.size() == 2) -->Line_8 $$ if (!commitId0.equals(parents.get(1))) [ CD ]
Line_4 $$ if (parents.size() <= 1)-->Line_5 $$ return commit[ CD ]
Line_6 $$ if (parents.size() == 2) -->Line_7 $$ CommitId commitId0 = parents.get(0)[ CD ]
Line_2 $$ private static <CommitId> GraphCommit<CommitId> fixParentsDuplicate(@NotNull GraphCommit<CommitId> commit) -->Line_4 $$ if (parents.size() <= 1)[ CD ]
Line_2 $$ private static <CommitId> GraphCommit<CommitId> fixParentsDuplicate(@NotNull GraphCommit<CommitId> commit) -->Line_6 $$ if (parents.size() == 2) [ CD ]
Line_2 $$ private static <CommitId> GraphCommit<CommitId> fixParentsDuplicate(@NotNull GraphCommit<CommitId> commit) -->Line_3 $$ List<CommitId> parents = commit.getParents()[ FD ]
Line_2 $$ private static <CommitId> GraphCommit<CommitId> fixParentsDuplicate(@NotNull GraphCommit<CommitId> commit) -->Line_17 $$ List<CommitId> correctParents = ContainerUtil.newArrayList()[ CD ]
Line_2 $$ private static <CommitId> GraphCommit<CommitId> fixParentsDuplicate(@NotNull GraphCommit<CommitId> commit) -->Line_14 $$ Set<CommitId> allParents = new HashSet<CommitId>(parents)[ CD ]
Line_15 $$ if (parents.size() == allParents.size())-->Line_16 $$ return commit[ CD ]
Line_3 $$ List<CommitId> parents = commit.getParents()-->Line_8 $$ if (!commitId0.equals(parents.get(1))) [ FD ]
Line_2 $$ private static <CommitId> GraphCommit<CommitId> fixParentsDuplicate(@NotNull GraphCommit<CommitId> commit) -->Line_15 $$ if (parents.size() == allParents.size())[ CD ]
Line_3 $$ List<CommitId> parents = commit.getParents()-->Line_6 $$ if (parents.size() == 2) [ FD ]
Line_14 $$ Set<CommitId> allParents = new HashSet<CommitId>(parents)-->Line_15 $$ if (parents.size() == allParents.size())[ FD ]
Line_7 $$ CommitId commitId0 = parents.get(0)-->Line_8 $$ if (!commitId0.equals(parents.get(1))) [ FD ]
Line_2 $$ private static <CommitId> GraphCommit<CommitId> fixParentsDuplicate(@NotNull GraphCommit<CommitId> commit) -->Line_4 $$ if (parents.size() <= 1)[ FD ]
Line_18 $$ for (CommitId commitId : parents) -->Line_19 $$ if (allParents.remove(commitId)) [ FD ]
Line_17 $$ List<CommitId> correctParents = ContainerUtil.newArrayList()-->Line_20 $$ correctParents.add(commitId)[ FD ]
Line_3 $$ List<CommitId> parents = commit.getParents()-->Line_7 $$ CommitId commitId0 = parents.get(0)[ FD ]
Line_2 $$ private static <CommitId> GraphCommit<CommitId> fixParentsDuplicate(@NotNull GraphCommit<CommitId> commit) -->Line_15 $$ if (parents.size() == allParents.size())[ FD ]
Line_18 $$ for (CommitId commitId : parents) -->Line_20 $$ correctParents.add(commitId)[ FD ]
Line_3 $$ List<CommitId> parents = commit.getParents()-->Line_4 $$ if (parents.size() <= 1)[ FD ]
Line_2 $$ private static <CommitId> GraphCommit<CommitId> fixParentsDuplicate(@NotNull GraphCommit<CommitId> commit) -->Line_3 $$ List<CommitId> parents = commit.getParents()[ CD ]
Line_7 $$ CommitId commitId0 = parents.get(0)-->Line_11 $$ return new DelegateGraphCommit<CommitId>(commit, Collections.singletonList(commitId0))[ FD ]
