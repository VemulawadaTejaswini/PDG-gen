Line_30 $$ ObjectInputStream objectInputStream = new ObjectInputStream(unsyncByteArrayInputStream)-->Line_31 $$ Assert.assertEquals(0, objectInputStream.readInt())[ FD ]
Line_29 $$ UnsyncByteArrayInputStream unsyncByteArrayInputStream = new UnsyncByteArrayInputStream(data)-->Line_34 $$ unsyncByteArrayInputStream = new UnsyncByteArrayInputStream(data)[ FD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_15 $$ logRecord = logRecords.get(2)[ FD ]
Line_18 $$ String testValue = "testValue"-->Line_23 $$ Assert.assertSame(testValue, threadLocalValues[0])[ FD ]
Line_13 $$ logRecord = logRecords.get(1)-->Line_15 $$ logRecord = logRecords.get(2)[ FD ]
Line_4 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_5 $$ threadLocalDistributor.setClassLoader(getClassLoader())[ FD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_13 $$ logRecord = logRecords.get(1)[ FD ]
Line_9 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_11 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_9 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_10 $$ Assert.assertEquals(3, logRecords.size())[ FD ]
Line_35 $$ objectInputStream = new ObjectInputStream(unsyncByteArrayInputStream)-->Line_37 $$ newThreadLocalDistributor.readExternal(objectInputStream)[ FD ]
Line_30 $$ ObjectInputStream objectInputStream = new ObjectInputStream(unsyncByteArrayInputStream)-->Line_35 $$ objectInputStream = new ObjectInputStream(unsyncByteArrayInputStream)[ FD ]
Line_21 $$ Serializable[] threadLocalValues = ReflectionTestUtil.getFieldValue(threadLocalDistributor, "_threadLocalValues")-->Line_32 $$ Assert.assertArrayEquals(threadLocalValues, (Serializable[]) objectInputStream.readObject())[ FD ]
Line_7 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(ThreadLocalDistributor.class.getName(), Level.WARNING)) -->Line_9 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_25 $$ try (ObjectOutputStream objectOutputStream = new ObjectOutputStream(unsyncByteArrayOutputStream)) -->Line_26 $$ threadLocalDistributor.writeExternal(objectOutputStream)[ FD ]
Line_18 $$ String testValue = "testValue"-->Line_39 $$ Assert.assertEquals(testValue, TestClass._threadLocal.get())[ FD ]
Line_4 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_8 $$ threadLocalDistributor.afterPropertiesSet()[ FD ]
Line_4 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_20 $$ threadLocalDistributor.capture()[ FD ]
Line_4 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_6 $$ threadLocalDistributor.setThreadLocalSources(_keyValuePairs)[ FD ]
Line_9 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_13 $$ logRecord = logRecords.get(1)[ FD ]
Line_9 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_15 $$ logRecord = logRecords.get(2)[ FD ]
Line_13 $$ logRecord = logRecords.get(1)-->Line_16 $$ Assert.assertEquals("_object is not of type ThreadLocal", logRecord.getMessage())[ FD ]
Line_13 $$ logRecord = logRecords.get(1)-->Line_14 $$ Assert.assertEquals("_nullValue is not initialized", logRecord.getMessage())[ FD ]
Line_18 $$ String testValue = "testValue"-->Line_19 $$ TestClass._threadLocal.set(testValue)[ FD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_14 $$ Assert.assertEquals("_nullValue is not initialized", logRecord.getMessage())[ FD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_16 $$ Assert.assertEquals("_object is not of type ThreadLocal", logRecord.getMessage())[ FD ]
Line_36 $$ ThreadLocalDistributor newThreadLocalDistributor = new ThreadLocalDistributor()-->Line_37 $$ newThreadLocalDistributor.readExternal(objectInputStream)[ FD ]
Line_30 $$ ObjectInputStream objectInputStream = new ObjectInputStream(unsyncByteArrayInputStream)-->Line_32 $$ Assert.assertArrayEquals(threadLocalValues, (Serializable[]) objectInputStream.readObject())[ FD ]
Line_15 $$ logRecord = logRecords.get(2)-->Line_16 $$ Assert.assertEquals("_object is not of type ThreadLocal", logRecord.getMessage())[ FD ]
Line_30 $$ ObjectInputStream objectInputStream = new ObjectInputStream(unsyncByteArrayInputStream)-->Line_37 $$ newThreadLocalDistributor.readExternal(objectInputStream)[ FD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_12 $$ Assert.assertEquals("_nonStatic is not a static ThreadLocal", logRecord.getMessage())[ FD ]
Line_4 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_26 $$ threadLocalDistributor.writeExternal(objectOutputStream)[ FD ]
Line_24 $$ UnsyncByteArrayOutputStream unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()-->Line_28 $$ byte[] data = unsyncByteArrayOutputStream.toByteArray()[ FD ]
Line_36 $$ ThreadLocalDistributor newThreadLocalDistributor = new ThreadLocalDistributor()-->Line_38 $$ newThreadLocalDistributor.restore()[ FD ]
Line_4 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_21 $$ Serializable[] threadLocalValues = ReflectionTestUtil.getFieldValue(threadLocalDistributor, "_threadLocalValues")[ FD ]
