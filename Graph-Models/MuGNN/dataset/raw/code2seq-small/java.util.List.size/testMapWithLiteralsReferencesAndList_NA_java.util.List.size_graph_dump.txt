Line_13 $$ Map m = (Map) l.get(1)-->Line_26 $$ assertTrue(m.get("foo").equals("bar"))[ FD ]
Line_2 $$ public void testMapWithLiteralsReferencesAndList() throws Exception -->Line_8 $$ List l = (List) hasMap.getMap().get("list")[ CD ]
Line_2 $$ public void testMapWithLiteralsReferencesAndList() throws Exception -->Line_6 $$ TestBean jenny = (TestBean) this.beanFactory.getBean("jenny")[ CD ]
Line_6 $$ TestBean jenny = (TestBean) this.beanFactory.getBean("jenny")-->Line_21 $$ assertTrue(l.get(0).equals(jenny))[ FD ]
Line_13 $$ Map m = (Map) l.get(1)-->Line_14 $$ assertNotNull(m)[ FD ]
Line_2 $$ public void testMapWithLiteralsReferencesAndList() throws Exception -->Line_26 $$ assertTrue(m.get("foo").equals("bar"))[ CD ]
Line_8 $$ List l = (List) hasMap.getMap().get("list")-->Line_21 $$ assertTrue(l.get(0).equals(jenny))[ FD ]
Line_13 $$ Map m = (Map) l.get(1)-->Line_27 $$ assertTrue("Map element 'jenny' should be equal to jenny bean, not " + m.get("jenny"), m.get("jenny").equals(jenny))[ FD ]
Line_2 $$ public void testMapWithLiteralsReferencesAndList() throws Exception -->Line_3 $$ HasMap hasMap = (HasMap) this.beanFactory.getBean("mixedMapWithList")[ CD ]
Line_2 $$ public void testMapWithLiteralsReferencesAndList() throws Exception -->Line_16 $$ assertTrue(m.get("fo").equals("bar"))[ CD ]
Line_2 $$ public void testMapWithLiteralsReferencesAndList() throws Exception -->Line_24 $$ assertNotNull(m)[ CD ]
Line_2 $$ public void testMapWithLiteralsReferencesAndList() throws Exception -->Line_13 $$ Map m = (Map) l.get(1)[ CD ]
Line_8 $$ List l = (List) hasMap.getMap().get("list")-->Line_18 $$ l = (List) l.get(2)[ FD ]
Line_13 $$ Map m = (Map) l.get(1)-->Line_23 $$ m = (Map) hasMap.getMap().get("map")[ FD ]
Line_8 $$ List l = (List) hasMap.getMap().get("list")-->Line_10 $$ assertTrue(l.size() == 4)[ FD ]
Line_2 $$ public void testMapWithLiteralsReferencesAndList() throws Exception -->Line_21 $$ assertTrue(l.get(0).equals(jenny))[ CD ]
Line_6 $$ TestBean jenny = (TestBean) this.beanFactory.getBean("jenny")-->Line_7 $$ assertTrue(hasMap.getMap().get("jenny").equals(jenny))[ FD ]
Line_2 $$ public void testMapWithLiteralsReferencesAndList() throws Exception -->Line_17 $$ assertTrue("Map element 'jenny' should be equal to jenny bean, not " + m.get("jen"), m.get("jen").equals(jenny))[ CD ]
Line_18 $$ l = (List) l.get(2)-->Line_21 $$ assertTrue(l.get(0).equals(jenny))[ FD ]
Line_2 $$ public void testMapWithLiteralsReferencesAndList() throws Exception -->Line_20 $$ assertTrue(l.size() == 2)[ CD ]
Line_13 $$ Map m = (Map) l.get(1)-->Line_17 $$ assertTrue("Map element 'jenny' should be equal to jenny bean, not " + m.get("jen"), m.get("jen").equals(jenny))[ FD ]
Line_3 $$ HasMap hasMap = (HasMap) this.beanFactory.getBean("mixedMapWithList")-->Line_7 $$ assertTrue(hasMap.getMap().get("jenny").equals(jenny))[ FD ]
Line_2 $$ public void testMapWithLiteralsReferencesAndList() throws Exception -->Line_5 $$ assertTrue(hasMap.getMap().get(null).equals("bar"))[ CD ]
Line_6 $$ TestBean jenny = (TestBean) this.beanFactory.getBean("jenny")-->Line_27 $$ assertTrue("Map element 'jenny' should be equal to jenny bean, not " + m.get("jenny"), m.get("jenny").equals(jenny))[ FD ]
Line_2 $$ public void testMapWithLiteralsReferencesAndList() throws Exception -->Line_14 $$ assertNotNull(m)[ CD ]
Line_2 $$ public void testMapWithLiteralsReferencesAndList() throws Exception -->Line_18 $$ l = (List) l.get(2)[ CD ]
Line_3 $$ HasMap hasMap = (HasMap) this.beanFactory.getBean("mixedMapWithList")-->Line_8 $$ List l = (List) hasMap.getMap().get("list")[ FD ]
Line_18 $$ l = (List) l.get(2)-->Line_22 $$ assertTrue(l.get(1).equals("ba"))[ FD ]
Line_18 $$ l = (List) l.get(2)-->Line_20 $$ assertTrue(l.size() == 2)[ FD ]
Line_8 $$ List l = (List) hasMap.getMap().get("list")-->Line_13 $$ Map m = (Map) l.get(1)[ FD ]
Line_2 $$ public void testMapWithLiteralsReferencesAndList() throws Exception -->Line_15 $$ assertTrue(m.size() == 2)[ CD ]
Line_8 $$ List l = (List) hasMap.getMap().get("list")-->Line_20 $$ assertTrue(l.size() == 2)[ FD ]
Line_23 $$ m = (Map) hasMap.getMap().get("map")-->Line_26 $$ assertTrue(m.get("foo").equals("bar"))[ FD ]
Line_3 $$ HasMap hasMap = (HasMap) this.beanFactory.getBean("mixedMapWithList")-->Line_4 $$ assertTrue(hasMap.getMap().size() == 4)[ FD ]
Line_6 $$ TestBean jenny = (TestBean) this.beanFactory.getBean("jenny")-->Line_17 $$ assertTrue("Map element 'jenny' should be equal to jenny bean, not " + m.get("jen"), m.get("jen").equals(jenny))[ FD ]
Line_2 $$ public void testMapWithLiteralsReferencesAndList() throws Exception -->Line_4 $$ assertTrue(hasMap.getMap().size() == 4)[ CD ]
Line_2 $$ public void testMapWithLiteralsReferencesAndList() throws Exception -->Line_10 $$ assertTrue(l.size() == 4)[ CD ]
Line_2 $$ public void testMapWithLiteralsReferencesAndList() throws Exception -->Line_19 $$ assertNotNull(l)[ CD ]
Line_2 $$ public void testMapWithLiteralsReferencesAndList() throws Exception -->Line_25 $$ assertTrue(m.size() == 2)[ CD ]
Line_13 $$ Map m = (Map) l.get(1)-->Line_15 $$ assertTrue(m.size() == 2)[ FD ]
Line_2 $$ public void testMapWithLiteralsReferencesAndList() throws Exception -->Line_7 $$ assertTrue(hasMap.getMap().get("jenny").equals(jenny))[ CD ]
Line_8 $$ List l = (List) hasMap.getMap().get("list")-->Line_12 $$ assertTrue(l.get(3) == null)[ FD ]
Line_23 $$ m = (Map) hasMap.getMap().get("map")-->Line_27 $$ assertTrue("Map element 'jenny' should be equal to jenny bean, not " + m.get("jenny"), m.get("jenny").equals(jenny))[ FD ]
Line_2 $$ public void testMapWithLiteralsReferencesAndList() throws Exception -->Line_12 $$ assertTrue(l.get(3) == null)[ CD ]
Line_2 $$ public void testMapWithLiteralsReferencesAndList() throws Exception -->Line_22 $$ assertTrue(l.get(1).equals("ba"))[ CD ]
Line_18 $$ l = (List) l.get(2)-->Line_19 $$ assertNotNull(l)[ FD ]
Line_8 $$ List l = (List) hasMap.getMap().get("list")-->Line_22 $$ assertTrue(l.get(1).equals("ba"))[ FD ]
Line_13 $$ Map m = (Map) l.get(1)-->Line_16 $$ assertTrue(m.get("fo").equals("bar"))[ FD ]
Line_2 $$ public void testMapWithLiteralsReferencesAndList() throws Exception -->Line_27 $$ assertTrue("Map element 'jenny' should be equal to jenny bean, not " + m.get("jenny"), m.get("jenny").equals(jenny))[ CD ]
Line_3 $$ HasMap hasMap = (HasMap) this.beanFactory.getBean("mixedMapWithList")-->Line_5 $$ assertTrue(hasMap.getMap().get(null).equals("bar"))[ FD ]
Line_2 $$ public void testMapWithLiteralsReferencesAndList() throws Exception -->Line_23 $$ m = (Map) hasMap.getMap().get("map")[ CD ]
Line_8 $$ List l = (List) hasMap.getMap().get("list")-->Line_11 $$ assertTrue(l.get(0).equals("zero"))[ FD ]
Line_8 $$ List l = (List) hasMap.getMap().get("list")-->Line_19 $$ assertNotNull(l)[ FD ]
Line_13 $$ Map m = (Map) l.get(1)-->Line_25 $$ assertTrue(m.size() == 2)[ FD ]
Line_13 $$ Map m = (Map) l.get(1)-->Line_24 $$ assertNotNull(m)[ FD ]
Line_2 $$ public void testMapWithLiteralsReferencesAndList() throws Exception -->Line_11 $$ assertTrue(l.get(0).equals("zero"))[ CD ]
Line_3 $$ HasMap hasMap = (HasMap) this.beanFactory.getBean("mixedMapWithList")-->Line_23 $$ m = (Map) hasMap.getMap().get("map")[ FD ]
Line_23 $$ m = (Map) hasMap.getMap().get("map")-->Line_24 $$ assertNotNull(m)[ FD ]
Line_23 $$ m = (Map) hasMap.getMap().get("map")-->Line_25 $$ assertTrue(m.size() == 2)[ FD ]
Line_8 $$ List l = (List) hasMap.getMap().get("list")-->Line_9 $$ assertNotNull(l)[ FD ]
Line_2 $$ public void testMapWithLiteralsReferencesAndList() throws Exception -->Line_9 $$ assertNotNull(l)[ CD ]
