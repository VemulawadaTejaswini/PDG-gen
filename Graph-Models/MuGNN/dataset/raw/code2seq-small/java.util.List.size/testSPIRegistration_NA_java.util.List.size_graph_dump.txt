Line_8 $$ MockSPI mockSPI1 = new MockSPI()-->Line_31 $$ Assert.assertFalse(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_50 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_192 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_28 $$ mockSPI1 = new MockSPI()-->Line_186 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_8 $$ MockSPI mockSPI1 = new MockSPI()-->Line_152 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_46 $$ mockSPI1 = new MockSPI()-->Line_136 $$ unregisteringSPIThreadLocal.set(mockSPI1)[ FD ]
Line_8 $$ MockSPI mockSPI1 = new MockSPI()-->Line_40 $$ Assert.assertFalse(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_37 $$ mockSPI1 = new MockSPI()-->Line_159 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_50 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_53 $$ logRecord = logRecords.get(0)[ FD ]
Line_46 $$ mockSPI1 = new MockSPI()-->Line_176 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_5 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.WARNING)) -->Line_197 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_50 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_178 $$ logRecord = logRecords.get(0)[ FD ]
Line_53 $$ logRecord = logRecords.get(0)-->Line_179 $$ Assert.assertEquals("Not unregistering unregistered SPI " + mockSPI1, logRecord.getMessage())[ FD ]
Line_53 $$ logRecord = logRecords.get(0)-->Line_149 $$ Assert.assertEquals("Not unregistering SPI " + mockSPI1 + " with foreign MPI " + mockSPI1.mpi + " versus " + MPIHelperUtil.getMPI(), logRecord.getMessage())[ FD ]
Line_46 $$ mockSPI1 = new MockSPI()-->Line_159 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_37 $$ mockSPI1 = new MockSPI()-->Line_81 $$ Assert.assertFalse(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_149 $$ Assert.assertEquals("Not unregistering SPI " + mockSPI1 + " with foreign MPI " + mockSPI1.mpi + " versus " + MPIHelperUtil.getMPI(), logRecord.getMessage())[ FD ]
Line_33 $$ logRecord = logRecords.get(0)-->Line_162 $$ Assert.assertEquals("Not unregistering SPI " + mockSPI1 + " with unknown SPI provider " + mockSPI1.spiProviderName, logRecord.getMessage())[ FD ]
Line_50 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_187 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_46 $$ mockSPI1 = new MockSPI()-->Line_203 $$ MPIHelperUtil.unregisterSPI(mockSPI1)[ FD ]
Line_28 $$ mockSPI1 = new MockSPI()-->Line_176 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_50 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_177 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_37 $$ mockSPI1 = new MockSPI()-->Line_186 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_8 $$ MockSPI mockSPI1 = new MockSPI()-->Line_51 $$ Assert.assertTrue(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_50 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_88 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_8 $$ MockSPI mockSPI1 = new MockSPI()-->Line_191 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_162 $$ Assert.assertEquals("Not unregistering SPI " + mockSPI1 + " with unknown SPI provider " + mockSPI1.spiProviderName, logRecord.getMessage())[ FD ]
Line_37 $$ mockSPI1 = new MockSPI()-->Line_198 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_33 $$ logRecord = logRecords.get(0)-->Line_54 $$ Assert.assertEquals("Registered SPI " + mockSPI1, logRecord.getMessage())[ FD ]
Line_37 $$ mockSPI1 = new MockSPI()-->Line_51 $$ Assert.assertTrue(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_53 $$ logRecord = logRecords.get(0)[ FD ]
Line_28 $$ mockSPI1 = new MockSPI()-->Line_81 $$ Assert.assertFalse(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_28 $$ mockSPI1 = new MockSPI()-->Line_152 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_46 $$ mockSPI1 = new MockSPI()-->Line_168 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_37 $$ mockSPI1 = new MockSPI()-->Line_40 $$ Assert.assertFalse(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_50 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_160 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_28 $$ mockSPI1 = new MockSPI()-->Line_95 $$ MPIHelperUtil.registerSPI(mockSPI1)[ FD ]
Line_37 $$ mockSPI1 = new MockSPI()-->Line_168 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_28 $$ mockSPI1 = new MockSPI()-->Line_138 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_46 $$ mockSPI1 = new MockSPI()-->Line_198 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_28 $$ mockSPI1 = new MockSPI()-->Line_203 $$ MPIHelperUtil.unregisterSPI(mockSPI1)[ FD ]
Line_28 $$ mockSPI1 = new MockSPI()-->Line_51 $$ Assert.assertTrue(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_8 $$ MockSPI mockSPI1 = new MockSPI()-->Line_37 $$ mockSPI1 = new MockSPI()[ FD ]
Line_53 $$ logRecord = logRecords.get(0)-->Line_84 $$ Assert.assertEquals("Not registering SPI " + mockSPI1 + " because it duplicates " + mockSPI1, logRecord.getMessage())[ FD ]
Line_8 $$ MockSPI mockSPI1 = new MockSPI()-->Line_15 $$ Assert.assertFalse(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_46 $$ mockSPI1 = new MockSPI()-->Line_152 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_179 $$ Assert.assertEquals("Not unregistering unregistered SPI " + mockSPI1, logRecord.getMessage())[ FD ]
Line_8 $$ MockSPI mockSPI1 = new MockSPI()-->Line_22 $$ MPIHelperUtil.registerSPI(mockSPI1)[ FD ]
Line_8 $$ MockSPI mockSPI1 = new MockSPI()-->Line_159 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_33 $$ logRecord = logRecords.get(0)-->Line_149 $$ Assert.assertEquals("Not unregistering SPI " + mockSPI1 + " with foreign MPI " + mockSPI1.mpi + " versus " + MPIHelperUtil.getMPI(), logRecord.getMessage())[ FD ]
Line_46 $$ mockSPI1 = new MockSPI()-->Line_51 $$ Assert.assertTrue(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_50 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_82 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_8 $$ MockSPI mockSPI1 = new MockSPI()-->Line_46 $$ mockSPI1 = new MockSPI()[ FD ]
Line_50 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_169 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_33 $$ logRecord = logRecords.get(0)-->Line_34 $$ Assert.assertEquals("Not registering SPI " + mockSPI1 + " with unknown SPI provider " + mockSPI1.spiProviderName, logRecord.getMessage())[ FD ]
Line_8 $$ MockSPI mockSPI1 = new MockSPI()-->Line_176 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_50 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_153 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_8 $$ MockSPI mockSPI1 = new MockSPI()-->Line_136 $$ unregisteringSPIThreadLocal.set(mockSPI1)[ FD ]
Line_37 $$ mockSPI1 = new MockSPI()-->Line_191 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_57 $$ MessagingConfigurator messagingConfigurator = new AbstractMessagingConfigurator() -->Line_69 $$ return null[ CD ]
Line_5 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.WARNING)) -->Line_50 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_50 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_78 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_37 $$ mockSPI1 = new MockSPI()-->Line_176 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_50 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_115 $$ logRecord = logRecords.get(0)[ FD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_116 $$ Throwable throwable = logRecord.getThrown()[ FD ]
Line_33 $$ logRecord = logRecords.get(0)-->Line_194 $$ Assert.assertEquals("Unregistered SPI " + mockSPI1, logRecord.getMessage())[ FD ]
Line_50 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_114 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_8 $$ MockSPI mockSPI1 = new MockSPI()-->Line_95 $$ MPIHelperUtil.registerSPI(mockSPI1)[ FD ]
Line_8 $$ MockSPI mockSPI1 = new MockSPI()-->Line_28 $$ mockSPI1 = new MockSPI()[ FD ]
Line_33 $$ logRecord = logRecords.get(0)-->Line_53 $$ logRecord = logRecords.get(0)[ FD ]
Line_28 $$ mockSPI1 = new MockSPI()-->Line_191 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_50 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_161 $$ logRecord = logRecords.get(0)[ FD ]
Line_8 $$ MockSPI mockSPI1 = new MockSPI()-->Line_198 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_5 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.WARNING)) -->Line_190 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_50 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_52 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_8 $$ MockSPI mockSPI1 = new MockSPI()-->Line_138 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_50 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_148 $$ logRecord = logRecords.get(0)[ FD ]
Line_46 $$ mockSPI1 = new MockSPI()-->Line_186 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_28 $$ mockSPI1 = new MockSPI()-->Line_31 $$ Assert.assertFalse(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_37 $$ mockSPI1 = new MockSPI()-->Line_146 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_46 $$ mockSPI1 = new MockSPI()-->Line_146 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_8 $$ MockSPI mockSPI1 = new MockSPI()-->Line_10 $$ Assert.assertFalse(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_28 $$ mockSPI1 = new MockSPI()-->Line_198 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_54 $$ Assert.assertEquals("Registered SPI " + mockSPI1, logRecord.getMessage())[ FD ]
Line_37 $$ mockSPI1 = new MockSPI()-->Line_95 $$ MPIHelperUtil.registerSPI(mockSPI1)[ FD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_84 $$ Assert.assertEquals("Not registering SPI " + mockSPI1 + " because it duplicates " + mockSPI1, logRecord.getMessage())[ FD ]
Line_57 $$ MessagingConfigurator messagingConfigurator = new AbstractMessagingConfigurator() -->Line_72 $$ MessagingConfiguratorRegistry.registerMessagingConfigurator("servletContextName2", messagingConfigurator)[ FD ]
Line_46 $$ mockSPI1 = new MockSPI()-->Line_138 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_50 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_193 $$ logRecord = logRecords.get(0)[ FD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_34 $$ Assert.assertEquals("Not registering SPI " + mockSPI1 + " with unknown SPI provider " + mockSPI1.spiProviderName, logRecord.getMessage())[ FD ]
Line_33 $$ logRecord = logRecords.get(0)-->Line_179 $$ Assert.assertEquals("Not unregistering unregistered SPI " + mockSPI1, logRecord.getMessage())[ FD ]
Line_37 $$ mockSPI1 = new MockSPI()-->Line_138 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_8 $$ MockSPI mockSPI1 = new MockSPI()-->Line_186 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_28 $$ mockSPI1 = new MockSPI()-->Line_168 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_53 $$ logRecord = logRecords.get(0)-->Line_194 $$ Assert.assertEquals("Unregistered SPI " + mockSPI1, logRecord.getMessage())[ FD ]
Line_50 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_83 $$ logRecord = logRecords.get(0)[ FD ]
Line_28 $$ mockSPI1 = new MockSPI()-->Line_46 $$ mockSPI1 = new MockSPI()[ FD ]
Line_33 $$ logRecord = logRecords.get(0)-->Line_116 $$ Throwable throwable = logRecord.getThrown()[ FD ]
Line_8 $$ MockSPI mockSPI1 = new MockSPI()-->Line_146 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_33 $$ logRecord = logRecords.get(0)-->Line_84 $$ Assert.assertEquals("Not registering SPI " + mockSPI1 + " because it duplicates " + mockSPI1, logRecord.getMessage())[ FD ]
Line_53 $$ logRecord = logRecords.get(0)-->Line_54 $$ Assert.assertEquals("Registered SPI " + mockSPI1, logRecord.getMessage())[ FD ]
Line_8 $$ MockSPI mockSPI1 = new MockSPI()-->Line_168 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_194 $$ Assert.assertEquals("Unregistered SPI " + mockSPI1, logRecord.getMessage())[ FD ]
Line_50 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_147 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_28 $$ mockSPI1 = new MockSPI()-->Line_146 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_53 $$ logRecord = logRecords.get(0)-->Line_162 $$ Assert.assertEquals("Not unregistering SPI " + mockSPI1 + " with unknown SPI provider " + mockSPI1.spiProviderName, logRecord.getMessage())[ FD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_33 $$ logRecord = logRecords.get(0)[ FD ]
Line_53 $$ logRecord = logRecords.get(0)-->Line_116 $$ Throwable throwable = logRecord.getThrown()[ FD ]
Line_28 $$ mockSPI1 = new MockSPI()-->Line_40 $$ Assert.assertFalse(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_37 $$ mockSPI1 = new MockSPI()-->Line_152 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_37 $$ mockSPI1 = new MockSPI()-->Line_136 $$ unregisteringSPIThreadLocal.set(mockSPI1)[ FD ]
Line_44 $$ MockSPIProvider mockSPIProvider = new MockSPIProvider(name)-->Line_45 $$ Assert.assertTrue(MPIHelperUtil.registerSPIProvider(mockSPIProvider))[ FD ]
Line_50 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_199 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_28 $$ mockSPI1 = new MockSPI()-->Line_136 $$ unregisteringSPIThreadLocal.set(mockSPI1)[ FD ]
Line_37 $$ mockSPI1 = new MockSPI()-->Line_203 $$ MPIHelperUtil.unregisterSPI(mockSPI1)[ FD ]
Line_8 $$ MockSPI mockSPI1 = new MockSPI()-->Line_81 $$ Assert.assertFalse(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_8 $$ MockSPI mockSPI1 = new MockSPI()-->Line_203 $$ MPIHelperUtil.unregisterSPI(mockSPI1)[ FD ]
Line_46 $$ mockSPI1 = new MockSPI()-->Line_95 $$ MPIHelperUtil.registerSPI(mockSPI1)[ FD ]
Line_46 $$ mockSPI1 = new MockSPI()-->Line_191 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_11 $$ LogRecord logRecord = logRecords.get(0)-->Line_12 $$ Assert.assertEquals("Not registering SPI " + mockSPI1 + " with foreign MPI " + mockSPI1.mpi + " versus " + MPIHelperUtil.getMPI(), logRecord.getMessage())[ FD ]
Line_28 $$ mockSPI1 = new MockSPI()-->Line_159 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_28 $$ mockSPI1 = new MockSPI()-->Line_37 $$ mockSPI1 = new MockSPI()[ FD ]
Line_46 $$ mockSPI1 = new MockSPI()-->Line_81 $$ Assert.assertFalse(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_37 $$ mockSPI1 = new MockSPI()-->Line_46 $$ mockSPI1 = new MockSPI()[ FD ]
