Line_32 $$ if (propValue.getClass().isArray()) -->Line_34 $$ Class<?> requiredType = propValue.getClass().getComponentType()[ CD ]
Line_39 $$ oldValue = Array.get(propValue, arrayIndex)-->Line_92 $$ oldValue = map.get(convertedMapKey)[ FD ]
Line_89 $$ Object convertedMapKey = convertIfNecessary(null, null, key, mapKeyType, typeDescriptor)-->Line_97 $$ map.put(convertedMapKey, convertedMapValue)[ FD ]
Line_118 $$ if (pv.isConverted()) -->Line_119 $$ valueToApply = pv.getConvertedValue()[ CD ]
Line_27 $$ propValue = setDefaultValue(getterTokens)-->Line_42 $$ int length = Array.getLength(propValue)[ FD ]
Line_54 $$ if (propValue instanceof List) -->Line_55 $$ PropertyHandler ph = getPropertyHandler(actualName)[ CD ]
Line_39 $$ oldValue = Array.get(propValue, arrayIndex)-->Line_41 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))[ FD ]
Line_13 $$ Object propValue-->Line_32 $$ if (propValue.getClass().isArray()) [ FD ]
Line_15 $$ propValue = getPropertyValue(getterTokens)-->Line_39 $$ oldValue = Array.get(propValue, arrayIndex)[ FD ]
Line_13 $$ Object propValue-->Line_34 $$ Class<?> requiredType = propValue.getClass().getComponentType()[ FD ]
Line_42 $$ int length = Array.getLength(propValue)-->Line_46 $$ System.arraycopy(propValue, 0, newArray, 0, length)[ FD ]
Line_128 $$ if (logger.isDebugEnabled()) -->Line_129 $$ logger.debug("Could not read previous value of property '" + this.nestedPath + propertyName + "'", ex)[ CD ]
Line_54 $$ if (propValue instanceof List) -->Line_58 $$ int index = Integer.parseInt(key)[ CD ]
Line_145 $$ Throwable cause = ex.getTargetException()-->Line_148 $$ cause = cause.getCause()[ FD ]
Line_27 $$ propValue = setDefaultValue(getterTokens)-->Line_32 $$ if (propValue.getClass().isArray()) [ FD ]
Line_104 $$ if (pv.isOptional()) -->Line_105 $$ if (logger.isDebugEnabled()) [ CD ]
Line_13 $$ Object propValue-->Line_27 $$ propValue = setDefaultValue(getterTokens)[ FD ]
Line_6 $$ if (tokens.keys != null) -->Line_21 $$ if (propValue == null) [ CD ]
Line_32 $$ if (propValue.getClass().isArray()) -->Line_36 $$ Object oldValue = null[ CD ]
Line_45 $$ Object newArray = Array.newInstance(componentType, arrayIndex + 1)-->Line_47 $$ setPropertyValue(actualName, newArray)[ FD ]
Line_142 $$ if (ex.getTargetException() instanceof ClassCastException) -->Line_146 $$ if (cause instanceof UndeclaredThrowableException) [ CD ]
Line_39 $$ oldValue = Array.get(propValue, arrayIndex)-->Line_123 $$ oldValue = ph.getValue()[ FD ]
Line_118 $$ if (pv.isConverted()) -->Line_133 $$ valueToApply = convertForProperty(propertyName, oldValue, originalValue, ph.toTypeDescriptor())[ CD ]
Line_5 $$ String actualName = tokens.actualName-->Line_48 $$ propValue = getPropertyValue(actualName)[ FD ]
Line_13 $$ Object propValue-->Line_21 $$ if (propValue == null) [ FD ]
Line_15 $$ propValue = getPropertyValue(getterTokens)-->Line_50 $$ Array.set(propValue, arrayIndex, convertedValue)[ FD ]
Line_54 $$ if (propValue instanceof List) -->Line_57 $$ List<Object> list = (List<Object>) propValue[ CD ]
Line_36 $$ Object oldValue = null-->Line_61 $$ oldValue = list.get(index)[ FD ]
Line_6 $$ if (tokens.keys != null) -->Line_103 $$ if (ph == null || !ph.isWritable()) [ CD ]
Line_13 $$ Object propValue-->Line_50 $$ Array.set(propValue, arrayIndex, convertedValue)[ FD ]
Line_119 $$ valueToApply = pv.getConvertedValue()-->Line_133 $$ valueToApply = convertForProperty(propertyName, oldValue, originalValue, ph.toTypeDescriptor())[ FD ]
Line_5 $$ String actualName = tokens.actualName-->Line_82 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)[ FD ]
Line_36 $$ Object oldValue = null-->Line_123 $$ oldValue = ph.getValue()[ FD ]
Line_34 $$ Class<?> requiredType = propValue.getClass().getComponentType()-->Line_63 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))[ FD ]
Line_44 $$ Class<?> componentType = propValue.getClass().getComponentType()-->Line_45 $$ Object newArray = Array.newInstance(componentType, arrayIndex + 1)[ FD ]
Line_54 $$ if (propValue instanceof List) -->Line_63 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))[ CD ]
Line_27 $$ propValue = setDefaultValue(getterTokens)-->Line_38 $$ if (isExtractOldValueForEditor() && arrayIndex < Array.getLength(propValue)) [ FD ]
Line_85 $$ Map<Object, Object> map = (Map<Object, Object>) propValue-->Line_92 $$ oldValue = map.get(convertedMapKey)[ FD ]
Line_15 $$ propValue = getPropertyValue(getterTokens)-->Line_44 $$ Class<?> componentType = propValue.getClass().getComponentType()[ FD ]
Line_33 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)-->Line_63 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))[ FD ]
Line_48 $$ propValue = getPropertyValue(actualName)-->Line_81 $$ if (propValue instanceof Map) [ FD ]
Line_32 $$ if (propValue.getClass().isArray()) -->Line_54 $$ if (propValue instanceof List) [ CD ]
Line_116 $$ Object valueToApply = originalValue-->Line_137 $$ ph.setValue(object, valueToApply)[ FD ]
Line_15 $$ propValue = getPropertyValue(getterTokens)-->Line_38 $$ if (isExtractOldValueForEditor() && arrayIndex < Array.getLength(propValue)) [ FD ]
Line_54 $$ if (propValue instanceof List) -->Line_64 $$ int size = list.size()[ CD ]
Line_33 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)-->Line_83 $$ Class<?> mapKeyType = ph.getMapKeyType(tokens.keys.length)[ FD ]
Line_36 $$ Object oldValue = null-->Line_41 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))[ FD ]
Line_105 $$ if (logger.isDebugEnabled()) -->Line_106 $$ logger.debug("Ignoring optional value for property '" + actualName + "' - property not found on bean class [" + getRootClass().getName() + "]")[ CD ]
Line_145 $$ Throwable cause = ex.getTargetException()-->Line_146 $$ if (cause instanceof UndeclaredThrowableException) [ FD ]
Line_104 $$ if (pv.isOptional()) -->Line_108 $$ return[ CD ]
Line_133 $$ valueToApply = convertForProperty(propertyName, oldValue, originalValue, ph.toTypeDescriptor())-->Line_137 $$ ph.setValue(object, valueToApply)[ FD ]
Line_6 $$ if (tokens.keys != null) -->Line_13 $$ Object propValue[ CD ]
Line_4 $$ String propertyName = tokens.canonicalName-->Line_63 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))[ FD ]
Line_58 $$ int index = Integer.parseInt(key)-->Line_66 $$ for (int i = size; i < index; i++) [ FD ]
Line_58 $$ int index = Integer.parseInt(key)-->Line_76 $$ list.set(index, convertedValue)[ FD ]
Line_15 $$ propValue = getPropertyValue(getterTokens)-->Line_34 $$ Class<?> requiredType = propValue.getClass().getComponentType()[ FD ]
Line_33 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)-->Line_103 $$ if (ph == null || !ph.isWritable()) [ FD ]
Line_15 $$ propValue = getPropertyValue(getterTokens)-->Line_32 $$ if (propValue.getClass().isArray()) [ FD ]
Line_6 $$ if (tokens.keys != null) -->Line_11 $$ getterTokens.keys = new String[tokens.keys.length - 1][ CD ]
Line_123 $$ oldValue = ph.getValue()-->Line_133 $$ valueToApply = convertForProperty(propertyName, oldValue, originalValue, ph.toTypeDescriptor())[ FD ]
Line_48 $$ propValue = getPropertyValue(actualName)-->Line_54 $$ if (propValue instanceof List) [ FD ]
Line_5 $$ String actualName = tokens.actualName-->Line_47 $$ setPropertyValue(actualName, newArray)[ FD ]
Line_61 $$ oldValue = list.get(index)-->Line_92 $$ oldValue = map.get(convertedMapKey)[ FD ]
Line_13 $$ Object propValue-->Line_48 $$ propValue = getPropertyValue(actualName)[ FD ]
Line_58 $$ int index = Integer.parseInt(key)-->Line_61 $$ oldValue = list.get(index)[ FD ]
Line_13 $$ Object propValue-->Line_54 $$ if (propValue instanceof List) [ FD ]
Line_27 $$ propValue = setDefaultValue(getterTokens)-->Line_34 $$ Class<?> requiredType = propValue.getClass().getComponentType()[ FD ]
Line_125 $$ if (ex instanceof PrivilegedActionException) -->Line_126 $$ ex = ((PrivilegedActionException) ex).getException()[ CD ]
Line_15 $$ propValue = getPropertyValue(getterTokens)-->Line_81 $$ if (propValue instanceof Map) [ FD ]
Line_81 $$ if (propValue instanceof Map) -->Line_85 $$ Map<Object, Object> map = (Map<Object, Object>) propValue[ CD ]
Line_5 $$ String actualName = tokens.actualName-->Line_55 $$ PropertyHandler ph = getPropertyHandler(actualName)[ FD ]
Line_83 $$ Class<?> mapKeyType = ph.getMapKeyType(tokens.keys.length)-->Line_89 $$ Object convertedMapKey = convertIfNecessary(null, null, key, mapKeyType, typeDescriptor)[ FD ]
Line_6 $$ if (tokens.keys != null) -->Line_9 $$ getterTokens.canonicalName = tokens.canonicalName[ CD ]
Line_43 $$ if (arrayIndex >= length && arrayIndex < this.autoGrowCollectionLimit) -->Line_44 $$ Class<?> componentType = propValue.getClass().getComponentType()[ CD ]
Line_81 $$ if (propValue instanceof Map) -->Line_82 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)[ CD ]
Line_15 $$ propValue = getPropertyValue(getterTokens)-->Line_54 $$ if (propValue instanceof List) [ FD ]
Line_54 $$ if (propValue instanceof List) -->Line_56 $$ Class<?> requiredType = ph.getCollectionType(tokens.keys.length)[ CD ]
Line_13 $$ Object propValue-->Line_15 $$ propValue = getPropertyValue(getterTokens)[ FD ]
Line_5 $$ String actualName = tokens.actualName-->Line_33 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)[ FD ]
Line_36 $$ Object oldValue = null-->Line_92 $$ oldValue = map.get(convertedMapKey)[ FD ]
Line_118 $$ if (pv.isConverted()) -->Line_121 $$ if (isExtractOldValueForEditor() && ph.isReadable()) [ CD ]
Line_81 $$ if (propValue instanceof Map) -->Line_84 $$ Class<?> mapValueType = ph.getMapValueType(tokens.keys.length)[ CD ]
Line_61 $$ oldValue = list.get(index)-->Line_63 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))[ FD ]
Line_4 $$ String propertyName = tokens.canonicalName-->Line_133 $$ valueToApply = convertForProperty(propertyName, oldValue, originalValue, ph.toTypeDescriptor())[ FD ]
Line_43 $$ if (arrayIndex >= length && arrayIndex < this.autoGrowCollectionLimit) -->Line_46 $$ System.arraycopy(propValue, 0, newArray, 0, length)[ CD ]
Line_43 $$ if (arrayIndex >= length && arrayIndex < this.autoGrowCollectionLimit) -->Line_48 $$ propValue = getPropertyValue(actualName)[ CD ]
Line_33 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)-->Line_84 $$ Class<?> mapValueType = ph.getMapValueType(tokens.keys.length)[ FD ]
Line_61 $$ oldValue = list.get(index)-->Line_123 $$ oldValue = ph.getValue()[ FD ]
Line_146 $$ if (cause instanceof UndeclaredThrowableException) -->Line_148 $$ cause = cause.getCause()[ CD ]
Line_43 $$ if (arrayIndex >= length && arrayIndex < this.autoGrowCollectionLimit) -->Line_45 $$ Object newArray = Array.newInstance(componentType, arrayIndex + 1)[ CD ]
Line_41 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))-->Line_76 $$ list.set(index, convertedValue)[ FD ]
Line_32 $$ if (propValue.getClass().isArray()) -->Line_33 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)[ CD ]
Line_4 $$ String propertyName = tokens.canonicalName-->Line_41 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))[ FD ]
Line_13 $$ Object propValue-->Line_46 $$ System.arraycopy(propValue, 0, newArray, 0, length)[ FD ]
Line_33 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)-->Line_143 $$ throw new TypeMismatchException(propertyChangeEvent, ph.getPropertyType(), ex.getTargetException())[ FD ]
Line_35 $$ int arrayIndex = Integer.parseInt(key)-->Line_50 $$ Array.set(propValue, arrayIndex, convertedValue)[ FD ]
Line_13 $$ Object propValue-->Line_81 $$ if (propValue instanceof Map) [ FD ]
Line_57 $$ List<Object> list = (List<Object>) propValue-->Line_64 $$ int size = list.size()[ FD ]
Line_54 $$ if (propValue instanceof List) -->Line_60 $$ if (isExtractOldValueForEditor() && index < list.size()) [ CD ]
Line_6 $$ if (tokens.keys != null) -->Line_102 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)[ CD ]
Line_15 $$ propValue = getPropertyValue(getterTokens)-->Line_48 $$ propValue = getPropertyValue(actualName)[ FD ]
Line_27 $$ propValue = setDefaultValue(getterTokens)-->Line_54 $$ if (propValue instanceof List) [ FD ]
Line_115 $$ Object originalValue = pv.getValue()-->Line_133 $$ valueToApply = convertForProperty(propertyName, oldValue, originalValue, ph.toTypeDescriptor())[ FD ]
Line_39 $$ oldValue = Array.get(propValue, arrayIndex)-->Line_133 $$ valueToApply = convertForProperty(propertyName, oldValue, originalValue, ph.toTypeDescriptor())[ FD ]
Line_85 $$ Map<Object, Object> map = (Map<Object, Object>) propValue-->Line_97 $$ map.put(convertedMapKey, convertedMapValue)[ FD ]
Line_33 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)-->Line_121 $$ if (isExtractOldValueForEditor() && ph.isReadable()) [ FD ]
Line_15 $$ propValue = getPropertyValue(getterTokens)-->Line_42 $$ int length = Array.getLength(propValue)[ FD ]
Line_15 $$ propValue = getPropertyValue(getterTokens)-->Line_46 $$ System.arraycopy(propValue, 0, newArray, 0, length)[ FD ]
Line_119 $$ valueToApply = pv.getConvertedValue()-->Line_137 $$ ph.setValue(object, valueToApply)[ FD ]
Line_57 $$ List<Object> list = (List<Object>) propValue-->Line_61 $$ oldValue = list.get(index)[ FD ]
Line_116 $$ Object valueToApply = originalValue-->Line_133 $$ valueToApply = convertForProperty(propertyName, oldValue, originalValue, ph.toTypeDescriptor())[ FD ]
Line_81 $$ if (propValue instanceof Map) -->Line_83 $$ Class<?> mapKeyType = ph.getMapKeyType(tokens.keys.length)[ CD ]
Line_38 $$ if (isExtractOldValueForEditor() && arrayIndex < Array.getLength(propValue)) -->Line_39 $$ oldValue = Array.get(propValue, arrayIndex)[ CD ]
Line_27 $$ propValue = setDefaultValue(getterTokens)-->Line_48 $$ propValue = getPropertyValue(actualName)[ FD ]
Line_33 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)-->Line_133 $$ valueToApply = convertForProperty(propertyName, oldValue, originalValue, ph.toTypeDescriptor())[ FD ]
Line_43 $$ if (arrayIndex >= length && arrayIndex < this.autoGrowCollectionLimit) -->Line_47 $$ setPropertyValue(actualName, newArray)[ CD ]
Line_65 $$ if (index >= size && index < this.autoGrowCollectionLimit) -->Line_66 $$ for (int i = size; i < index; i++) [ CD ]
Line_61 $$ oldValue = list.get(index)-->Line_133 $$ valueToApply = convertForProperty(propertyName, oldValue, originalValue, ph.toTypeDescriptor())[ FD ]
Line_27 $$ propValue = setDefaultValue(getterTokens)-->Line_46 $$ System.arraycopy(propValue, 0, newArray, 0, length)[ FD ]
Line_117 $$ if (!Boolean.FALSE.equals(pv.conversionNecessary)) -->Line_118 $$ if (pv.isConverted()) [ CD ]
Line_48 $$ propValue = getPropertyValue(actualName)-->Line_50 $$ Array.set(propValue, arrayIndex, convertedValue)[ FD ]
Line_54 $$ if (propValue instanceof List) -->Line_65 $$ if (index >= size && index < this.autoGrowCollectionLimit) [ CD ]
Line_33 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)-->Line_137 $$ ph.setValue(object, valueToApply)[ FD ]
Line_54 $$ if (propValue instanceof List) -->Line_81 $$ if (propValue instanceof Map) [ CD ]
Line_39 $$ oldValue = Array.get(propValue, arrayIndex)-->Line_63 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))[ FD ]
Line_57 $$ List<Object> list = (List<Object>) propValue-->Line_73 $$ list.add(convertedValue)[ FD ]
Line_91 $$ if (isExtractOldValueForEditor()) -->Line_92 $$ oldValue = map.get(convertedMapKey)[ CD ]
Line_32 $$ if (propValue.getClass().isArray()) -->Line_35 $$ int arrayIndex = Integer.parseInt(key)[ CD ]
Line_116 $$ Object valueToApply = originalValue-->Line_119 $$ valueToApply = pv.getConvertedValue()[ FD ]
Line_57 $$ List<Object> list = (List<Object>) propValue-->Line_68 $$ list.add(null)[ FD ]
Line_6 $$ if (tokens.keys != null) -->Line_12 $$ System.arraycopy(tokens.keys, 0, getterTokens.keys, 0, tokens.keys.length - 1)[ CD ]
Line_13 $$ Object propValue-->Line_42 $$ int length = Array.getLength(propValue)[ FD ]
Line_27 $$ propValue = setDefaultValue(getterTokens)-->Line_50 $$ Array.set(propValue, arrayIndex, convertedValue)[ FD ]
Line_89 $$ Object convertedMapKey = convertIfNecessary(null, null, key, mapKeyType, typeDescriptor)-->Line_92 $$ oldValue = map.get(convertedMapKey)[ FD ]
Line_5 $$ String actualName = tokens.actualName-->Line_102 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)[ FD ]
Line_33 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)-->Line_41 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))[ FD ]
Line_65 $$ if (index >= size && index < this.autoGrowCollectionLimit) -->Line_73 $$ list.add(convertedValue)[ CD ]
Line_81 $$ if (propValue instanceof Map) -->Line_97 $$ map.put(convertedMapKey, convertedMapValue)[ CD ]
Line_103 $$ if (ph == null || !ph.isWritable()) -->Line_104 $$ if (pv.isOptional()) [ CD ]
Line_36 $$ Object oldValue = null-->Line_39 $$ oldValue = Array.get(propValue, arrayIndex)[ FD ]
Line_81 $$ if (propValue instanceof Map) -->Line_89 $$ Object convertedMapKey = convertIfNecessary(null, null, key, mapKeyType, typeDescriptor)[ CD ]
Line_27 $$ propValue = setDefaultValue(getterTokens)-->Line_39 $$ oldValue = Array.get(propValue, arrayIndex)[ FD ]
Line_117 $$ if (!Boolean.FALSE.equals(pv.conversionNecessary)) -->Line_135 $$ pv.getOriginalPropertyValue().conversionNecessary = (valueToApply != originalValue)[ CD ]
Line_142 $$ if (ex.getTargetException() instanceof ClassCastException) -->Line_145 $$ Throwable cause = ex.getTargetException()[ CD ]
Line_4 $$ String propertyName = tokens.canonicalName-->Line_110 $$ throw createNotWritablePropertyException(propertyName)[ FD ]
Line_33 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)-->Line_123 $$ oldValue = ph.getValue()[ FD ]
Line_6 $$ if (tokens.keys != null) -->Line_10 $$ getterTokens.actualName = tokens.actualName[ CD ]
Line_35 $$ int arrayIndex = Integer.parseInt(key)-->Line_39 $$ oldValue = Array.get(propValue, arrayIndex)[ FD ]
Line_13 $$ Object propValue-->Line_39 $$ oldValue = Array.get(propValue, arrayIndex)[ FD ]
Line_92 $$ oldValue = map.get(convertedMapKey)-->Line_123 $$ oldValue = ph.getValue()[ FD ]
Line_57 $$ List<Object> list = (List<Object>) propValue-->Line_60 $$ if (isExtractOldValueForEditor() && index < list.size()) [ FD ]
Line_60 $$ if (isExtractOldValueForEditor() && index < list.size()) -->Line_61 $$ oldValue = list.get(index)[ CD ]
Line_27 $$ propValue = setDefaultValue(getterTokens)-->Line_81 $$ if (propValue instanceof Map) [ FD ]
Line_81 $$ if (propValue instanceof Map) -->Line_91 $$ if (isExtractOldValueForEditor()) [ CD ]
Line_36 $$ Object oldValue = null-->Line_63 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))[ FD ]
Line_57 $$ List<Object> list = (List<Object>) propValue-->Line_76 $$ list.set(index, convertedValue)[ FD ]
Line_41 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))-->Line_50 $$ Array.set(propValue, arrayIndex, convertedValue)[ FD ]
Line_33 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)-->Line_56 $$ Class<?> requiredType = ph.getCollectionType(tokens.keys.length)[ FD ]
Line_39 $$ oldValue = Array.get(propValue, arrayIndex)-->Line_61 $$ oldValue = list.get(index)[ FD ]
Line_36 $$ Object oldValue = null-->Line_133 $$ valueToApply = convertForProperty(propertyName, oldValue, originalValue, ph.toTypeDescriptor())[ FD ]
Line_15 $$ propValue = getPropertyValue(getterTokens)-->Line_21 $$ if (propValue == null) [ FD ]
Line_13 $$ Object propValue-->Line_38 $$ if (isExtractOldValueForEditor() && arrayIndex < Array.getLength(propValue)) [ FD ]
Line_27 $$ propValue = setDefaultValue(getterTokens)-->Line_44 $$ Class<?> componentType = propValue.getClass().getComponentType()[ FD ]
Line_13 $$ Object propValue-->Line_44 $$ Class<?> componentType = propValue.getClass().getComponentType()[ FD ]
Line_92 $$ oldValue = map.get(convertedMapKey)-->Line_133 $$ valueToApply = convertForProperty(propertyName, oldValue, originalValue, ph.toTypeDescriptor())[ FD ]
Line_6 $$ if (tokens.keys != null) -->Line_32 $$ if (propValue.getClass().isArray()) [ CD ]
Line_15 $$ propValue = getPropertyValue(getterTokens)-->Line_27 $$ propValue = setDefaultValue(getterTokens)[ FD ]
Line_41 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))-->Line_73 $$ list.add(convertedValue)[ FD ]
Line_45 $$ Object newArray = Array.newInstance(componentType, arrayIndex + 1)-->Line_46 $$ System.arraycopy(propValue, 0, newArray, 0, length)[ FD ]
Line_34 $$ Class<?> requiredType = propValue.getClass().getComponentType()-->Line_41 $$ Object convertedValue = convertIfNecessary(propertyName, oldValue, pv.getValue(), requiredType, ph.nested(tokens.keys.length))[ FD ]
