Line_25 $$ for (int j = i * maximumWeight; j < (i + 1) * maximumWeight && j < numberOfEntries - maximumWeight; j++) -->Line_26 $$ if (j % 2 == 0) [ CD ]
Line_50 $$ for (int i = numberOfEntries - maximumWeight; i < numberOfEntries; i++) -->Line_51 $$ assertTrue(keys.contains(i))[ FD ]
Line_8 $$ AtomicLong evictions = new AtomicLong()-->Line_11 $$ evictions.incrementAndGet()[ FD ]
Line_46 $$ for (int i = 0; i < expectedEvictions.size(); i++) -->Line_48 $$ assertEquals(expectedEvictions.get(i), evictedKeys.get(i))[ FD ]
Line_18 $$ for (int i = 0; i < iterations; i++) -->Line_50 $$ for (int i = numberOfEntries - maximumWeight; i < numberOfEntries; i++) [ FD ]
Line_10 $$ Cache<Integer, String> cache = CacheBuilder.<Integer, String>builder().setMaximumWeight(maximumWeight).removalListener( notification -> -->Line_27 $$ cache.get(j)[ FD ]
Line_9 $$ List<Integer> evictedKeys = new ArrayList()-->Line_45 $$ assertEquals(expectedEvictions.size(), evictedKeys.size())[ FD ]
Line_46 $$ for (int i = 0; i < expectedEvictions.size(); i++) -->Line_51 $$ assertTrue(keys.contains(i))[ FD ]
Line_40 $$ List<Integer> remainingKeys = new ArrayList()-->Line_43 $$ remainingKeys.add(key)[ FD ]
Line_19 $$ for (int j = i * maximumWeight; j < (i + 1) * maximumWeight && j < numberOfEntries - maximumWeight; j++) -->Line_28 $$ expectedEvictions.add(j)[ FD ]
Line_10 $$ Cache<Integer, String> cache = CacheBuilder.<Integer, String>builder().setMaximumWeight(maximumWeight).removalListener( notification -> -->Line_20 $$ cache.put(j, Integer.toString(j))[ FD ]
Line_19 $$ for (int j = i * maximumWeight; j < (i + 1) * maximumWeight && j < numberOfEntries - maximumWeight; j++) -->Line_22 $$ expectedEvictions.add(j)[ FD ]
Line_25 $$ for (int j = i * maximumWeight; j < (i + 1) * maximumWeight && j < numberOfEntries - maximumWeight; j++) -->Line_27 $$ cache.get(j)[ FD ]
Line_18 $$ for (int i = 0; i < iterations; i++) -->Line_47 $$ assertFalse(keys.contains(expectedEvictions.get(i)))[ FD ]
Line_18 $$ for (int i = 0; i < iterations; i++) -->Line_48 $$ assertEquals(expectedEvictions.get(i), evictedKeys.get(i))[ FD ]
Line_7 $$ int maximumWeight = randomIntBetween(1, numberOfEntries)-->Line_10 $$ Cache<Integer, String> cache = CacheBuilder.<Integer, String>builder().setMaximumWeight(maximumWeight).removalListener( notification -> [ FD ]
Line_18 $$ for (int i = 0; i < iterations; i++) -->Line_51 $$ assertTrue(keys.contains(i))[ FD ]
Line_26 $$ if (j % 2 == 0) -->Line_27 $$ cache.get(j)[ CD ]
Line_25 $$ for (int j = i * maximumWeight; j < (i + 1) * maximumWeight && j < numberOfEntries - maximumWeight; j++) -->Line_28 $$ expectedEvictions.add(j)[ FD ]
Line_50 $$ for (int i = numberOfEntries - maximumWeight; i < numberOfEntries; i++) -->Line_52 $$ assertEquals(numberOfEntries - i + (numberOfEntries - maximumWeight) - 1, (int) remainingKeys.get(i - (numberOfEntries - maximumWeight)))[ CD ]
Line_40 $$ List<Integer> remainingKeys = new ArrayList()-->Line_52 $$ assertEquals(numberOfEntries - i + (numberOfEntries - maximumWeight) - 1, (int) remainingKeys.get(i - (numberOfEntries - maximumWeight)))[ FD ]
Line_21 $$ if (j % 2 == 1) -->Line_22 $$ expectedEvictions.add(j)[ CD ]
Line_19 $$ for (int j = i * maximumWeight; j < (i + 1) * maximumWeight && j < numberOfEntries - maximumWeight; j++) -->Line_27 $$ cache.get(j)[ FD ]
Line_19 $$ for (int j = i * maximumWeight; j < (i + 1) * maximumWeight && j < numberOfEntries - maximumWeight; j++) -->Line_21 $$ if (j % 2 == 1) [ CD ]
Line_10 $$ Cache<Integer, String> cache = CacheBuilder.<Integer, String>builder().setMaximumWeight(maximumWeight).removalListener( notification -> -->Line_37 $$ assertEquals(evictions.get(), cache.stats().getEvictions())[ FD ]
Line_10 $$ Cache<Integer, String> cache = CacheBuilder.<Integer, String>builder().setMaximumWeight(maximumWeight).removalListener( notification -> -->Line_41 $$ for (Integer key : cache.keys()) [ FD ]
Line_8 $$ AtomicLong evictions = new AtomicLong()-->Line_37 $$ assertEquals(evictions.get(), cache.stats().getEvictions())[ FD ]
Line_9 $$ List<Integer> evictedKeys = new ArrayList()-->Line_12 $$ evictedKeys.add(notification.getKey())[ FD ]
Line_19 $$ for (int j = i * maximumWeight; j < (i + 1) * maximumWeight && j < numberOfEntries - maximumWeight; j++) -->Line_25 $$ for (int j = i * maximumWeight; j < (i + 1) * maximumWeight && j < numberOfEntries - maximumWeight; j++) [ FD ]
Line_46 $$ for (int i = 0; i < expectedEvictions.size(); i++) -->Line_48 $$ assertEquals(expectedEvictions.get(i), evictedKeys.get(i))[ CD ]
Line_46 $$ for (int i = 0; i < expectedEvictions.size(); i++) -->Line_50 $$ for (int i = numberOfEntries - maximumWeight; i < numberOfEntries; i++) [ FD ]
Line_8 $$ AtomicLong evictions = new AtomicLong()-->Line_36 $$ assertEquals(numberOfEntries - maximumWeight, evictions.get())[ FD ]
Line_17 $$ int iterations = (int) Math.ceil((numberOfEntries - maximumWeight) / (1.0 * maximumWeight))-->Line_18 $$ for (int i = 0; i < iterations; i++) [ FD ]
Line_18 $$ for (int i = 0; i < iterations; i++) -->Line_25 $$ for (int j = i * maximumWeight; j < (i + 1) * maximumWeight && j < numberOfEntries - maximumWeight; j++) [ CD ]
Line_19 $$ for (int j = i * maximumWeight; j < (i + 1) * maximumWeight && j < numberOfEntries - maximumWeight; j++) -->Line_20 $$ cache.put(j, Integer.toString(j))[ CD ]
Line_9 $$ List<Integer> evictedKeys = new ArrayList()-->Line_48 $$ assertEquals(expectedEvictions.get(i), evictedKeys.get(i))[ FD ]
Line_19 $$ for (int j = i * maximumWeight; j < (i + 1) * maximumWeight && j < numberOfEntries - maximumWeight; j++) -->Line_20 $$ cache.put(j, Integer.toString(j))[ FD ]
Line_41 $$ for (Integer key : cache.keys()) -->Line_42 $$ keys.add(key)[ FD ]
Line_46 $$ for (int i = 0; i < expectedEvictions.size(); i++) -->Line_47 $$ assertFalse(keys.contains(expectedEvictions.get(i)))[ CD ]
Line_50 $$ for (int i = numberOfEntries - maximumWeight; i < numberOfEntries; i++) -->Line_51 $$ assertTrue(keys.contains(i))[ CD ]
Line_18 $$ for (int i = 0; i < iterations; i++) -->Line_46 $$ for (int i = 0; i < expectedEvictions.size(); i++) [ FD ]
Line_41 $$ for (Integer key : cache.keys()) -->Line_43 $$ remainingKeys.add(key)[ FD ]
Line_46 $$ for (int i = 0; i < expectedEvictions.size(); i++) -->Line_47 $$ assertFalse(keys.contains(expectedEvictions.get(i)))[ FD ]
Line_26 $$ if (j % 2 == 0) -->Line_28 $$ expectedEvictions.add(j)[ CD ]
Line_10 $$ Cache<Integer, String> cache = CacheBuilder.<Integer, String>builder().setMaximumWeight(maximumWeight).removalListener( notification -> -->Line_34 $$ cache.put(i, Integer.toString(i))[ FD ]
Line_18 $$ for (int i = 0; i < iterations; i++) -->Line_19 $$ for (int j = i * maximumWeight; j < (i + 1) * maximumWeight && j < numberOfEntries - maximumWeight; j++) [ CD ]
Line_18 $$ for (int i = 0; i < iterations; i++) -->Line_34 $$ cache.put(i, Integer.toString(i))[ FD ]
