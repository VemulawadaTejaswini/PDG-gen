Line_13 $$ for (int j = i * maximumWeight; j < (i + 1) * maximumWeight && j < numberOfEntries - maximumWeight; j++) -->Line_22 $$ expectedEvictions.add(j)[ FD ]
Line_10 $$ List<Integer> expectedEvictions = new ArrayList()-->Line_37 $$ assertEquals(expectedEvictions.size(), evictedKeys.size())[ FD ]
Line_26 $$ for (int i = numberOfEntries - maximumWeight; i < numberOfEntries; i++) -->Line_38 $$ for (int i = 0; i < expectedEvictions.size(); i++) [ FD ]
Line_2 $$ public void testCacheEvictions() -->Line_31 $$ Set<Integer> keys = new HashSet()[ CD ]
Line_33 $$ for (Integer key : cache.keys()) -->Line_35 $$ remainingKeys.add(key)[ FD ]
Line_42 $$ for (int i = numberOfEntries - maximumWeight; i < numberOfEntries; i++) -->Line_44 $$ assertEquals(numberOfEntries - i + (numberOfEntries - maximumWeight) - 1, (int) remainingKeys.get(i - (numberOfEntries - maximumWeight)))[ CD ]
Line_4 $$ AtomicLong evictions = new AtomicLong()-->Line_29 $$ assertEquals(numberOfEntries - maximumWeight, evictions.get())[ FD ]
Line_26 $$ for (int i = numberOfEntries - maximumWeight; i < numberOfEntries; i++) -->Line_40 $$ assertEquals(expectedEvictions.get(i), evictedKeys.get(i))[ FD ]
Line_31 $$ Set<Integer> keys = new HashSet()-->Line_34 $$ keys.add(key)[ FD ]
Line_2 $$ public void testCacheEvictions() -->Line_4 $$ AtomicLong evictions = new AtomicLong()[ CD ]
Line_13 $$ for (int j = i * maximumWeight; j < (i + 1) * maximumWeight && j < numberOfEntries - maximumWeight; j++) -->Line_15 $$ if (j % 2 == 1) [ CD ]
Line_19 $$ for (int j = i * maximumWeight; j < (i + 1) * maximumWeight && j < numberOfEntries - maximumWeight; j++) -->Line_21 $$ cache.get(j)[ FD ]
Line_38 $$ for (int i = 0; i < expectedEvictions.size(); i++) -->Line_39 $$ assertFalse(keys.contains(expectedEvictions.get(i)))[ CD ]
Line_26 $$ for (int i = numberOfEntries - maximumWeight; i < numberOfEntries; i++) -->Line_43 $$ assertTrue(keys.contains(i))[ FD ]
Line_12 $$ for (int i = 0; i < iterations; i++) -->Line_38 $$ for (int i = 0; i < expectedEvictions.size(); i++) [ FD ]
Line_5 $$ List<Integer> evictedKeys = new ArrayList()-->Line_8 $$ evictedKeys.add(notification.getKey())[ FD ]
Line_20 $$ if (j % 2 == 0) -->Line_21 $$ cache.get(j)[ CD ]
Line_6 $$ Cache<Integer, String> cache = CacheBuilder.<Integer, String>builder().setMaximumWeight(maximumWeight).removalListener( notification -> -->Line_27 $$ cache.put(i, Integer.toString(i))[ FD ]
Line_2 $$ public void testCacheEvictions() -->Line_42 $$ for (int i = numberOfEntries - maximumWeight; i < numberOfEntries; i++) [ CD ]
Line_38 $$ for (int i = 0; i < expectedEvictions.size(); i++) -->Line_43 $$ assertTrue(keys.contains(i))[ FD ]
Line_2 $$ public void testCacheEvictions() -->Line_5 $$ List<Integer> evictedKeys = new ArrayList()[ CD ]
Line_2 $$ public void testCacheEvictions() -->Line_26 $$ for (int i = numberOfEntries - maximumWeight; i < numberOfEntries; i++) [ CD ]
Line_12 $$ for (int i = 0; i < iterations; i++) -->Line_42 $$ for (int i = numberOfEntries - maximumWeight; i < numberOfEntries; i++) [ FD ]
Line_5 $$ List<Integer> evictedKeys = new ArrayList()-->Line_37 $$ assertEquals(expectedEvictions.size(), evictedKeys.size())[ FD ]
Line_2 $$ public void testCacheEvictions() -->Line_6 $$ Cache<Integer, String> cache = CacheBuilder.<Integer, String>builder().setMaximumWeight(maximumWeight).removalListener( notification -> [ CD ]
Line_5 $$ List<Integer> evictedKeys = new ArrayList()-->Line_40 $$ assertEquals(expectedEvictions.get(i), evictedKeys.get(i))[ FD ]
Line_6 $$ Cache<Integer, String> cache = CacheBuilder.<Integer, String>builder().setMaximumWeight(maximumWeight).removalListener( notification -> -->Line_30 $$ assertEquals(evictions.get(), cache.stats().getEvictions())[ FD ]
Line_38 $$ for (int i = 0; i < expectedEvictions.size(); i++) -->Line_40 $$ assertEquals(expectedEvictions.get(i), evictedKeys.get(i))[ CD ]
Line_6 $$ Cache<Integer, String> cache = CacheBuilder.<Integer, String>builder().setMaximumWeight(maximumWeight).removalListener( notification -> -->Line_21 $$ cache.get(j)[ FD ]
Line_3 $$ int maximumWeight = randomIntBetween(1, numberOfEntries)-->Line_6 $$ Cache<Integer, String> cache = CacheBuilder.<Integer, String>builder().setMaximumWeight(maximumWeight).removalListener( notification -> [ FD ]
Line_6 $$ Cache<Integer, String> cache = CacheBuilder.<Integer, String>builder().setMaximumWeight(maximumWeight).removalListener( notification -> -->Line_14 $$ cache.put(j, Integer.toString(j))[ FD ]
Line_38 $$ for (int i = 0; i < expectedEvictions.size(); i++) -->Line_42 $$ for (int i = numberOfEntries - maximumWeight; i < numberOfEntries; i++) [ FD ]
Line_19 $$ for (int j = i * maximumWeight; j < (i + 1) * maximumWeight && j < numberOfEntries - maximumWeight; j++) -->Line_22 $$ expectedEvictions.add(j)[ FD ]
Line_26 $$ for (int i = numberOfEntries - maximumWeight; i < numberOfEntries; i++) -->Line_39 $$ assertFalse(keys.contains(expectedEvictions.get(i)))[ FD ]
Line_15 $$ if (j % 2 == 1) -->Line_16 $$ expectedEvictions.add(j)[ CD ]
Line_12 $$ for (int i = 0; i < iterations; i++) -->Line_26 $$ for (int i = numberOfEntries - maximumWeight; i < numberOfEntries; i++) [ FD ]
Line_12 $$ for (int i = 0; i < iterations; i++) -->Line_13 $$ for (int j = i * maximumWeight; j < (i + 1) * maximumWeight && j < numberOfEntries - maximumWeight; j++) [ CD ]
Line_12 $$ for (int i = 0; i < iterations; i++) -->Line_19 $$ for (int j = i * maximumWeight; j < (i + 1) * maximumWeight && j < numberOfEntries - maximumWeight; j++) [ CD ]
Line_33 $$ for (Integer key : cache.keys()) -->Line_34 $$ keys.add(key)[ FD ]
Line_32 $$ List<Integer> remainingKeys = new ArrayList()-->Line_35 $$ remainingKeys.add(key)[ FD ]
Line_32 $$ List<Integer> remainingKeys = new ArrayList()-->Line_44 $$ assertEquals(numberOfEntries - i + (numberOfEntries - maximumWeight) - 1, (int) remainingKeys.get(i - (numberOfEntries - maximumWeight)))[ FD ]
Line_2 $$ public void testCacheEvictions() -->Line_32 $$ List<Integer> remainingKeys = new ArrayList()[ CD ]
Line_31 $$ Set<Integer> keys = new HashSet()-->Line_43 $$ assertTrue(keys.contains(i))[ FD ]
Line_42 $$ for (int i = numberOfEntries - maximumWeight; i < numberOfEntries; i++) -->Line_43 $$ assertTrue(keys.contains(i))[ FD ]
Line_12 $$ for (int i = 0; i < iterations; i++) -->Line_43 $$ assertTrue(keys.contains(i))[ FD ]
Line_2 $$ public void testCacheEvictions() -->Line_30 $$ assertEquals(evictions.get(), cache.stats().getEvictions())[ CD ]
Line_38 $$ for (int i = 0; i < expectedEvictions.size(); i++) -->Line_39 $$ assertFalse(keys.contains(expectedEvictions.get(i)))[ FD ]
Line_26 $$ for (int i = numberOfEntries - maximumWeight; i < numberOfEntries; i++) -->Line_42 $$ for (int i = numberOfEntries - maximumWeight; i < numberOfEntries; i++) [ FD ]
Line_4 $$ AtomicLong evictions = new AtomicLong()-->Line_30 $$ assertEquals(evictions.get(), cache.stats().getEvictions())[ FD ]
Line_2 $$ public void testCacheEvictions() -->Line_29 $$ assertEquals(numberOfEntries - maximumWeight, evictions.get())[ CD ]
Line_38 $$ for (int i = 0; i < expectedEvictions.size(); i++) -->Line_40 $$ assertEquals(expectedEvictions.get(i), evictedKeys.get(i))[ FD ]
Line_11 $$ int iterations = (int) Math.ceil((numberOfEntries - maximumWeight) / (1.0 * maximumWeight))-->Line_12 $$ for (int i = 0; i < iterations; i++) [ FD ]
Line_4 $$ AtomicLong evictions = new AtomicLong()-->Line_7 $$ evictions.incrementAndGet()[ FD ]
Line_12 $$ for (int i = 0; i < iterations; i++) -->Line_40 $$ assertEquals(expectedEvictions.get(i), evictedKeys.get(i))[ FD ]
Line_10 $$ List<Integer> expectedEvictions = new ArrayList()-->Line_22 $$ expectedEvictions.add(j)[ FD ]
Line_10 $$ List<Integer> expectedEvictions = new ArrayList()-->Line_38 $$ for (int i = 0; i < expectedEvictions.size(); i++) [ FD ]
Line_13 $$ for (int j = i * maximumWeight; j < (i + 1) * maximumWeight && j < numberOfEntries - maximumWeight; j++) -->Line_14 $$ cache.put(j, Integer.toString(j))[ CD ]
Line_2 $$ public void testCacheEvictions() -->Line_3 $$ int maximumWeight = randomIntBetween(1, numberOfEntries)[ CD ]
Line_13 $$ for (int j = i * maximumWeight; j < (i + 1) * maximumWeight && j < numberOfEntries - maximumWeight; j++) -->Line_21 $$ cache.get(j)[ FD ]
Line_13 $$ for (int j = i * maximumWeight; j < (i + 1) * maximumWeight && j < numberOfEntries - maximumWeight; j++) -->Line_19 $$ for (int j = i * maximumWeight; j < (i + 1) * maximumWeight && j < numberOfEntries - maximumWeight; j++) [ FD ]
Line_2 $$ public void testCacheEvictions() -->Line_38 $$ for (int i = 0; i < expectedEvictions.size(); i++) [ CD ]
Line_10 $$ List<Integer> expectedEvictions = new ArrayList()-->Line_39 $$ assertFalse(keys.contains(expectedEvictions.get(i)))[ FD ]
Line_20 $$ if (j % 2 == 0) -->Line_22 $$ expectedEvictions.add(j)[ CD ]
Line_13 $$ for (int j = i * maximumWeight; j < (i + 1) * maximumWeight && j < numberOfEntries - maximumWeight; j++) -->Line_16 $$ expectedEvictions.add(j)[ FD ]
Line_6 $$ Cache<Integer, String> cache = CacheBuilder.<Integer, String>builder().setMaximumWeight(maximumWeight).removalListener( notification -> -->Line_33 $$ for (Integer key : cache.keys()) [ FD ]
Line_42 $$ for (int i = numberOfEntries - maximumWeight; i < numberOfEntries; i++) -->Line_43 $$ assertTrue(keys.contains(i))[ CD ]
Line_13 $$ for (int j = i * maximumWeight; j < (i + 1) * maximumWeight && j < numberOfEntries - maximumWeight; j++) -->Line_14 $$ cache.put(j, Integer.toString(j))[ FD ]
Line_19 $$ for (int j = i * maximumWeight; j < (i + 1) * maximumWeight && j < numberOfEntries - maximumWeight; j++) -->Line_20 $$ if (j % 2 == 0) [ CD ]
Line_10 $$ List<Integer> expectedEvictions = new ArrayList()-->Line_16 $$ expectedEvictions.add(j)[ FD ]
Line_12 $$ for (int i = 0; i < iterations; i++) -->Line_39 $$ assertFalse(keys.contains(expectedEvictions.get(i)))[ FD ]
Line_10 $$ List<Integer> expectedEvictions = new ArrayList()-->Line_40 $$ assertEquals(expectedEvictions.get(i), evictedKeys.get(i))[ FD ]
Line_2 $$ public void testCacheEvictions() -->Line_37 $$ assertEquals(expectedEvictions.size(), evictedKeys.size())[ CD ]
Line_26 $$ for (int i = numberOfEntries - maximumWeight; i < numberOfEntries; i++) -->Line_27 $$ cache.put(i, Integer.toString(i))[ CD ]
Line_2 $$ public void testCacheEvictions() -->Line_12 $$ for (int i = 0; i < iterations; i++) [ CD ]
Line_26 $$ for (int i = numberOfEntries - maximumWeight; i < numberOfEntries; i++) -->Line_27 $$ cache.put(i, Integer.toString(i))[ FD ]
Line_12 $$ for (int i = 0; i < iterations; i++) -->Line_27 $$ cache.put(i, Integer.toString(i))[ FD ]
Line_2 $$ public void testCacheEvictions() -->Line_10 $$ List<Integer> expectedEvictions = new ArrayList()[ CD ]
Line_2 $$ public void testCacheEvictions() -->Line_11 $$ int iterations = (int) Math.ceil((numberOfEntries - maximumWeight) / (1.0 * maximumWeight))[ CD ]
Line_31 $$ Set<Integer> keys = new HashSet()-->Line_39 $$ assertFalse(keys.contains(expectedEvictions.get(i)))[ FD ]
