Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_24 $$ Variable ids = scope.declareVariable(Slice.class, "ids")[ CD ]
Line_7 $$ Parameter projectionIndex = arg("projectionIndex", int.class)-->Line_33 $$ body.comment("Use processed dictionary, if available, else project it").append(new IfStatement().condition(equal(inputDictionaries.getElement(projectionIndex), dictionary)).ifTrue(outputDictionary.set(outputDictionaries.getElement(projectionIndex))).ifFalse(projectDictionary))[ FD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_35 $$ body.append(newInstance(DictionaryBlock.class, cardinality, outputDictionary, invokeStatic(Slices.class, "wrappedIntArray", Slice.class, outputIds)).cast(Block.class).ret())[ CD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_9 $$ MethodDefinition method = classDefinition.declareMethod(a(PRIVATE), methodName, type(Block.class), params)[ FD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_32 $$ ByteCodeBlock projectDictionary = new ByteCodeBlock().comment("Project dictionary").append(new ForLoop().initialize(position.set(constantInt(0))).condition(lessThan(position, dictionaryCount)).update(position.increment()).body(invokeProject(thisVariable, session, ImmutableList.of(dictionary), position, blockBuilder, project))).append(outputDictionary.set(blockBuilder.invoke("build", Block.class))).append(inputDictionaries.setElement(projectionIndex, dictionary)).append(outputDictionaries.setElement(projectionIndex, outputDictionary))[ CD ]
Line_21 $$ Variable blockBuilder = scope.declareVariable("blockBuilder", body, pageBuilder.invoke("getBlockBuilder", BlockBuilder.class, projectionIndex))-->Line_32 $$ ByteCodeBlock projectDictionary = new ByteCodeBlock().comment("Project dictionary").append(new ForLoop().initialize(position.set(constantInt(0))).condition(lessThan(position, dictionaryCount)).update(position.increment()).body(invokeProject(thisVariable, session, ImmutableList.of(dictionary), position, blockBuilder, project))).append(outputDictionary.set(blockBuilder.invoke("build", Block.class))).append(inputDictionaries.setElement(projectionIndex, dictionary)).append(outputDictionaries.setElement(projectionIndex, outputDictionary))[ FD ]
Line_29 $$ ByteCodeExpression outputDictionaries = thisVariable.getField("outputDictionaries", Block[].class)-->Line_32 $$ ByteCodeBlock projectDictionary = new ByteCodeBlock().comment("Project dictionary").append(new ForLoop().initialize(position.set(constantInt(0))).condition(lessThan(position, dictionaryCount)).update(position.increment()).body(invokeProject(thisVariable, session, ImmutableList.of(dictionary), position, blockBuilder, project))).append(outputDictionary.set(blockBuilder.invoke("build", Block.class))).append(inputDictionaries.setElement(projectionIndex, dictionary)).append(outputDictionaries.setElement(projectionIndex, outputDictionary))[ FD ]
Line_8 $$ List<Parameter> params = ImmutableList.<Parameter>builder().add(session).add(page).add(selectedPositions).add(pageBuilder).add(projectionIndex).build()-->Line_19 $$ IfStatement ifStatement = new IfStatement().condition(inputBlock.instanceOf(DictionaryBlock.class)).ifFalse(thisVariable.invoke(projectColumnar, params).ret())[ FD ]
Line_5 $$ Parameter selectedPositions = arg("selectedPositions", int[].class)-->Line_8 $$ List<Parameter> params = ImmutableList.<Parameter>builder().add(session).add(page).add(selectedPositions).add(pageBuilder).add(projectionIndex).build()[ FD ]
Line_26 $$ Variable outputDictionary = scope.declareVariable(Block.class, "outputDictionary")-->Line_32 $$ ByteCodeBlock projectDictionary = new ByteCodeBlock().comment("Project dictionary").append(new ForLoop().initialize(position.set(constantInt(0))).condition(lessThan(position, dictionaryCount)).update(position.increment()).body(invokeProject(thisVariable, session, ImmutableList.of(dictionary), position, blockBuilder, project))).append(outputDictionary.set(blockBuilder.invoke("build", Block.class))).append(inputDictionaries.setElement(projectionIndex, dictionary)).append(outputDictionaries.setElement(projectionIndex, outputDictionary))[ FD ]
Line_12 $$ Variable thisVariable = method.getThis()-->Line_19 $$ IfStatement ifStatement = new IfStatement().condition(inputBlock.instanceOf(DictionaryBlock.class)).ifFalse(thisVariable.invoke(projectColumnar, params).ret())[ FD ]
Line_8 $$ List<Parameter> params = ImmutableList.<Parameter>builder().add(session).add(page).add(selectedPositions).add(pageBuilder).add(projectionIndex).build()-->Line_9 $$ MethodDefinition method = classDefinition.declareMethod(a(PRIVATE), methodName, type(Block.class), params)[ FD ]
Line_7 $$ Parameter projectionIndex = arg("projectionIndex", int.class)-->Line_32 $$ ByteCodeBlock projectDictionary = new ByteCodeBlock().comment("Project dictionary").append(new ForLoop().initialize(position.set(constantInt(0))).condition(lessThan(position, dictionaryCount)).update(position.increment()).body(invokeProject(thisVariable, session, ImmutableList.of(dictionary), position, blockBuilder, project))).append(outputDictionary.set(blockBuilder.invoke("build", Block.class))).append(inputDictionaries.setElement(projectionIndex, dictionary)).append(outputDictionaries.setElement(projectionIndex, outputDictionary))[ FD ]
Line_26 $$ Variable outputDictionary = scope.declareVariable(Block.class, "outputDictionary")-->Line_33 $$ body.comment("Use processed dictionary, if available, else project it").append(new IfStatement().condition(equal(inputDictionaries.getElement(projectionIndex), dictionary)).ifTrue(outputDictionary.set(outputDictionaries.getElement(projectionIndex))).ifFalse(projectDictionary))[ FD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_3 $$ Parameter session = arg("session", ConnectorSession.class)[ CD ]
Line_11 $$ Scope scope = method.getScope()-->Line_30 $$ Variable position = scope.declareVariable("position", body, constantInt(0))[ FD ]
Line_6 $$ Parameter pageBuilder = arg("pageBuilder", PageBuilder.class)-->Line_21 $$ Variable blockBuilder = scope.declareVariable("blockBuilder", body, pageBuilder.invoke("getBlockBuilder", BlockBuilder.class, projectionIndex))[ FD ]
Line_28 $$ ByteCodeExpression inputDictionaries = thisVariable.getField("inputDictionaries", Block[].class)-->Line_32 $$ ByteCodeBlock projectDictionary = new ByteCodeBlock().comment("Project dictionary").append(new ForLoop().initialize(position.set(constantInt(0))).condition(lessThan(position, dictionaryCount)).update(position.increment()).body(invokeProject(thisVariable, session, ImmutableList.of(dictionary), position, blockBuilder, project))).append(outputDictionary.set(blockBuilder.invoke("build", Block.class))).append(inputDictionaries.setElement(projectionIndex, dictionary)).append(outputDictionaries.setElement(projectionIndex, outputDictionary))[ FD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_20 $$ body.append(ifStatement)[ CD ]
Line_25 $$ Variable dictionaryCount = scope.declareVariable(int.class, "dictionaryCount")-->Line_31 $$ body.comment("Extract dictionary and ids").append(dictionary.set(inputBlock.cast(DictionaryBlock.class).invoke("getDictionary", Block.class))).append(ids.set(inputBlock.cast(DictionaryBlock.class).invoke("getIds", Slice.class))).append(dictionaryCount.set(dictionary.invoke("getPositionCount", int.class)))[ FD ]
Line_9 $$ MethodDefinition method = classDefinition.declareMethod(a(PRIVATE), methodName, type(Block.class), params)-->Line_12 $$ Variable thisVariable = method.getThis()[ FD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_19 $$ IfStatement ifStatement = new IfStatement().condition(inputBlock.instanceOf(DictionaryBlock.class)).ifFalse(thisVariable.invoke(projectColumnar, params).ret())[ FD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_7 $$ Parameter projectionIndex = arg("projectionIndex", int.class)[ CD ]
Line_10 $$ ByteCodeBlock body = method.getBody()-->Line_33 $$ body.comment("Use processed dictionary, if available, else project it").append(new IfStatement().condition(equal(inputDictionaries.getElement(projectionIndex), dictionary)).ifTrue(outputDictionary.set(outputDictionaries.getElement(projectionIndex))).ifFalse(projectDictionary))[ FD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_5 $$ Parameter selectedPositions = arg("selectedPositions", int[].class)[ CD ]
Line_11 $$ Scope scope = method.getScope()-->Line_24 $$ Variable ids = scope.declareVariable(Slice.class, "ids")[ FD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_12 $$ Variable thisVariable = method.getThis()[ CD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_6 $$ Parameter pageBuilder = arg("pageBuilder", PageBuilder.class)[ CD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_8 $$ List<Parameter> params = ImmutableList.<Parameter>builder().add(session).add(page).add(selectedPositions).add(pageBuilder).add(projectionIndex).build()[ CD ]
Line_10 $$ ByteCodeBlock body = method.getBody()-->Line_35 $$ body.append(newInstance(DictionaryBlock.class, cardinality, outputDictionary, invokeStatic(Slices.class, "wrappedIntArray", Slice.class, outputIds)).cast(Block.class).ret())[ FD ]
Line_10 $$ ByteCodeBlock body = method.getBody()-->Line_22 $$ Variable cardinality = scope.declareVariable("cardinality", body, selectedPositions.length())[ FD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_14 $$ if (inputChannels.size() != 1) [ CD ]
Line_11 $$ Scope scope = method.getScope()-->Line_23 $$ Variable dictionary = scope.declareVariable(Block.class, "dictionary")[ FD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_9 $$ MethodDefinition method = classDefinition.declareMethod(a(PRIVATE), methodName, type(Block.class), params)[ CD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_21 $$ Variable blockBuilder = scope.declareVariable("blockBuilder", body, pageBuilder.invoke("getBlockBuilder", BlockBuilder.class, projectionIndex))[ CD ]
Line_27 $$ Variable outputIds = scope.declareVariable(int[].class, "outputIds")-->Line_35 $$ body.append(newInstance(DictionaryBlock.class, cardinality, outputDictionary, invokeStatic(Slices.class, "wrappedIntArray", Slice.class, outputIds)).cast(Block.class).ret())[ FD ]
Line_22 $$ Variable cardinality = scope.declareVariable("cardinality", body, selectedPositions.length())-->Line_34 $$ body.comment("Filter ids").append(outputIds.set(newArray(type(int[].class), cardinality))).append(new ForLoop().initialize(position.set(constantInt(0))).condition(lessThan(position, cardinality)).update(position.increment()).body(outputIds.setElement(position, ids.invoke("getInt", int.class, multiply(selectedPositions.getElement(position), constantInt(SIZE_OF_INT))))))[ FD ]
Line_10 $$ ByteCodeBlock body = method.getBody()-->Line_20 $$ body.append(ifStatement)[ FD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_13 $$ List<Integer> inputChannels = getInputChannels(projection)[ CD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_34 $$ body.comment("Filter ids").append(outputIds.set(newArray(type(int[].class), cardinality))).append(new ForLoop().initialize(position.set(constantInt(0))).condition(lessThan(position, cardinality)).update(position.increment()).body(outputIds.setElement(position, ids.invoke("getInt", int.class, multiply(selectedPositions.getElement(position), constantInt(SIZE_OF_INT))))))[ CD ]
Line_12 $$ Variable thisVariable = method.getThis()-->Line_28 $$ ByteCodeExpression inputDictionaries = thisVariable.getField("inputDictionaries", Block[].class)[ FD ]
Line_28 $$ ByteCodeExpression inputDictionaries = thisVariable.getField("inputDictionaries", Block[].class)-->Line_33 $$ body.comment("Use processed dictionary, if available, else project it").append(new IfStatement().condition(equal(inputDictionaries.getElement(projectionIndex), dictionary)).ifTrue(outputDictionary.set(outputDictionaries.getElement(projectionIndex))).ifFalse(projectDictionary))[ FD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_13 $$ List<Integer> inputChannels = getInputChannels(projection)[ FD ]
Line_10 $$ ByteCodeBlock body = method.getBody()-->Line_31 $$ body.comment("Extract dictionary and ids").append(dictionary.set(inputBlock.cast(DictionaryBlock.class).invoke("getDictionary", Block.class))).append(ids.set(inputBlock.cast(DictionaryBlock.class).invoke("getIds", Slice.class))).append(dictionaryCount.set(dictionary.invoke("getPositionCount", int.class)))[ FD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_11 $$ Scope scope = method.getScope()[ CD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_19 $$ IfStatement ifStatement = new IfStatement().condition(inputBlock.instanceOf(DictionaryBlock.class)).ifFalse(thisVariable.invoke(projectColumnar, params).ret())[ CD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_36 $$ return method[ CD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_23 $$ Variable dictionary = scope.declareVariable(Block.class, "dictionary")[ CD ]
Line_11 $$ Scope scope = method.getScope()-->Line_18 $$ Variable inputBlock = scope.declareVariable("inputBlock", body, page.invoke("getBlock", Block.class, constantInt(Iterables.getOnlyElement(inputChannels))))[ FD ]
Line_10 $$ ByteCodeBlock body = method.getBody()-->Line_34 $$ body.comment("Filter ids").append(outputIds.set(newArray(type(int[].class), cardinality))).append(new ForLoop().initialize(position.set(constantInt(0))).condition(lessThan(position, cardinality)).update(position.increment()).body(outputIds.setElement(position, ids.invoke("getInt", int.class, multiply(selectedPositions.getElement(position), constantInt(SIZE_OF_INT))))))[ FD ]
Line_9 $$ MethodDefinition method = classDefinition.declareMethod(a(PRIVATE), methodName, type(Block.class), params)-->Line_11 $$ Scope scope = method.getScope()[ FD ]
Line_30 $$ Variable position = scope.declareVariable("position", body, constantInt(0))-->Line_32 $$ ByteCodeBlock projectDictionary = new ByteCodeBlock().comment("Project dictionary").append(new ForLoop().initialize(position.set(constantInt(0))).condition(lessThan(position, dictionaryCount)).update(position.increment()).body(invokeProject(thisVariable, session, ImmutableList.of(dictionary), position, blockBuilder, project))).append(outputDictionary.set(blockBuilder.invoke("build", Block.class))).append(inputDictionaries.setElement(projectionIndex, dictionary)).append(outputDictionaries.setElement(projectionIndex, outputDictionary))[ FD ]
Line_5 $$ Parameter selectedPositions = arg("selectedPositions", int[].class)-->Line_34 $$ body.comment("Filter ids").append(outputIds.set(newArray(type(int[].class), cardinality))).append(new ForLoop().initialize(position.set(constantInt(0))).condition(lessThan(position, cardinality)).update(position.increment()).body(outputIds.setElement(position, ids.invoke("getInt", int.class, multiply(selectedPositions.getElement(position), constantInt(SIZE_OF_INT))))))[ FD ]
Line_11 $$ Scope scope = method.getScope()-->Line_22 $$ Variable cardinality = scope.declareVariable("cardinality", body, selectedPositions.length())[ FD ]
Line_4 $$ Parameter page = arg("page", Page.class)-->Line_8 $$ List<Parameter> params = ImmutableList.<Parameter>builder().add(session).add(page).add(selectedPositions).add(pageBuilder).add(projectionIndex).build()[ FD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_10 $$ ByteCodeBlock body = method.getBody()[ CD ]
Line_11 $$ Scope scope = method.getScope()-->Line_27 $$ Variable outputIds = scope.declareVariable(int[].class, "outputIds")[ FD ]
Line_11 $$ Scope scope = method.getScope()-->Line_26 $$ Variable outputDictionary = scope.declareVariable(Block.class, "outputDictionary")[ FD ]
Line_18 $$ Variable inputBlock = scope.declareVariable("inputBlock", body, page.invoke("getBlock", Block.class, constantInt(Iterables.getOnlyElement(inputChannels))))-->Line_31 $$ body.comment("Extract dictionary and ids").append(dictionary.set(inputBlock.cast(DictionaryBlock.class).invoke("getDictionary", Block.class))).append(ids.set(inputBlock.cast(DictionaryBlock.class).invoke("getIds", Slice.class))).append(dictionaryCount.set(dictionary.invoke("getPositionCount", int.class)))[ FD ]
Line_32 $$ ByteCodeBlock projectDictionary = new ByteCodeBlock().comment("Project dictionary").append(new ForLoop().initialize(position.set(constantInt(0))).condition(lessThan(position, dictionaryCount)).update(position.increment()).body(invokeProject(thisVariable, session, ImmutableList.of(dictionary), position, blockBuilder, project))).append(outputDictionary.set(blockBuilder.invoke("build", Block.class))).append(inputDictionaries.setElement(projectionIndex, dictionary)).append(outputDictionaries.setElement(projectionIndex, outputDictionary))-->Line_33 $$ body.comment("Use processed dictionary, if available, else project it").append(new IfStatement().condition(equal(inputDictionaries.getElement(projectionIndex), dictionary)).ifTrue(outputDictionary.set(outputDictionaries.getElement(projectionIndex))).ifFalse(projectDictionary))[ FD ]
Line_30 $$ Variable position = scope.declareVariable("position", body, constantInt(0))-->Line_34 $$ body.comment("Filter ids").append(outputIds.set(newArray(type(int[].class), cardinality))).append(new ForLoop().initialize(position.set(constantInt(0))).condition(lessThan(position, cardinality)).update(position.increment()).body(outputIds.setElement(position, ids.invoke("getInt", int.class, multiply(selectedPositions.getElement(position), constantInt(SIZE_OF_INT))))))[ FD ]
Line_10 $$ ByteCodeBlock body = method.getBody()-->Line_18 $$ Variable inputBlock = scope.declareVariable("inputBlock", body, page.invoke("getBlock", Block.class, constantInt(Iterables.getOnlyElement(inputChannels))))[ FD ]
Line_6 $$ Parameter pageBuilder = arg("pageBuilder", PageBuilder.class)-->Line_8 $$ List<Parameter> params = ImmutableList.<Parameter>builder().add(session).add(page).add(selectedPositions).add(pageBuilder).add(projectionIndex).build()[ FD ]
Line_10 $$ ByteCodeBlock body = method.getBody()-->Line_30 $$ Variable position = scope.declareVariable("position", body, constantInt(0))[ FD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_27 $$ Variable outputIds = scope.declareVariable(int[].class, "outputIds")[ CD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_15 $$ body.append(thisVariable.invoke(projectColumnar, params).ret())[ FD ]
Line_25 $$ Variable dictionaryCount = scope.declareVariable(int.class, "dictionaryCount")-->Line_32 $$ ByteCodeBlock projectDictionary = new ByteCodeBlock().comment("Project dictionary").append(new ForLoop().initialize(position.set(constantInt(0))).condition(lessThan(position, dictionaryCount)).update(position.increment()).body(invokeProject(thisVariable, session, ImmutableList.of(dictionary), position, blockBuilder, project))).append(outputDictionary.set(blockBuilder.invoke("build", Block.class))).append(inputDictionaries.setElement(projectionIndex, dictionary)).append(outputDictionaries.setElement(projectionIndex, outputDictionary))[ FD ]
Line_11 $$ Scope scope = method.getScope()-->Line_25 $$ Variable dictionaryCount = scope.declareVariable(int.class, "dictionaryCount")[ FD ]
Line_13 $$ List<Integer> inputChannels = getInputChannels(projection)-->Line_18 $$ Variable inputBlock = scope.declareVariable("inputBlock", body, page.invoke("getBlock", Block.class, constantInt(Iterables.getOnlyElement(inputChannels))))[ FD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_22 $$ Variable cardinality = scope.declareVariable("cardinality", body, selectedPositions.length())[ CD ]
Line_18 $$ Variable inputBlock = scope.declareVariable("inputBlock", body, page.invoke("getBlock", Block.class, constantInt(Iterables.getOnlyElement(inputChannels))))-->Line_19 $$ IfStatement ifStatement = new IfStatement().condition(inputBlock.instanceOf(DictionaryBlock.class)).ifFalse(thisVariable.invoke(projectColumnar, params).ret())[ FD ]
Line_9 $$ MethodDefinition method = classDefinition.declareMethod(a(PRIVATE), methodName, type(Block.class), params)-->Line_10 $$ ByteCodeBlock body = method.getBody()[ FD ]
Line_23 $$ Variable dictionary = scope.declareVariable(Block.class, "dictionary")-->Line_31 $$ body.comment("Extract dictionary and ids").append(dictionary.set(inputBlock.cast(DictionaryBlock.class).invoke("getDictionary", Block.class))).append(ids.set(inputBlock.cast(DictionaryBlock.class).invoke("getIds", Slice.class))).append(dictionaryCount.set(dictionary.invoke("getPositionCount", int.class)))[ FD ]
Line_7 $$ Parameter projectionIndex = arg("projectionIndex", int.class)-->Line_21 $$ Variable blockBuilder = scope.declareVariable("blockBuilder", body, pageBuilder.invoke("getBlockBuilder", BlockBuilder.class, projectionIndex))[ FD ]
Line_5 $$ Parameter selectedPositions = arg("selectedPositions", int[].class)-->Line_22 $$ Variable cardinality = scope.declareVariable("cardinality", body, selectedPositions.length())[ FD ]
Line_3 $$ Parameter session = arg("session", ConnectorSession.class)-->Line_8 $$ List<Parameter> params = ImmutableList.<Parameter>builder().add(session).add(page).add(selectedPositions).add(pageBuilder).add(projectionIndex).build()[ FD ]
Line_29 $$ ByteCodeExpression outputDictionaries = thisVariable.getField("outputDictionaries", Block[].class)-->Line_33 $$ body.comment("Use processed dictionary, if available, else project it").append(new IfStatement().condition(equal(inputDictionaries.getElement(projectionIndex), dictionary)).ifTrue(outputDictionary.set(outputDictionaries.getElement(projectionIndex))).ifFalse(projectDictionary))[ FD ]
Line_27 $$ Variable outputIds = scope.declareVariable(int[].class, "outputIds")-->Line_34 $$ body.comment("Filter ids").append(outputIds.set(newArray(type(int[].class), cardinality))).append(new ForLoop().initialize(position.set(constantInt(0))).condition(lessThan(position, cardinality)).update(position.increment()).body(outputIds.setElement(position, ids.invoke("getInt", int.class, multiply(selectedPositions.getElement(position), constantInt(SIZE_OF_INT))))))[ FD ]
Line_14 $$ if (inputChannels.size() != 1) -->Line_15 $$ body.append(thisVariable.invoke(projectColumnar, params).ret())[ CD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_4 $$ Parameter page = arg("page", Page.class)[ CD ]
Line_11 $$ Scope scope = method.getScope()-->Line_21 $$ Variable blockBuilder = scope.declareVariable("blockBuilder", body, pageBuilder.invoke("getBlockBuilder", BlockBuilder.class, projectionIndex))[ FD ]
Line_3 $$ Parameter session = arg("session", ConnectorSession.class)-->Line_32 $$ ByteCodeBlock projectDictionary = new ByteCodeBlock().comment("Project dictionary").append(new ForLoop().initialize(position.set(constantInt(0))).condition(lessThan(position, dictionaryCount)).update(position.increment()).body(invokeProject(thisVariable, session, ImmutableList.of(dictionary), position, blockBuilder, project))).append(outputDictionary.set(blockBuilder.invoke("build", Block.class))).append(inputDictionaries.setElement(projectionIndex, dictionary)).append(outputDictionaries.setElement(projectionIndex, outputDictionary))[ FD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_29 $$ ByteCodeExpression outputDictionaries = thisVariable.getField("outputDictionaries", Block[].class)[ CD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_32 $$ ByteCodeBlock projectDictionary = new ByteCodeBlock().comment("Project dictionary").append(new ForLoop().initialize(position.set(constantInt(0))).condition(lessThan(position, dictionaryCount)).update(position.increment()).body(invokeProject(thisVariable, session, ImmutableList.of(dictionary), position, blockBuilder, project))).append(outputDictionary.set(blockBuilder.invoke("build", Block.class))).append(inputDictionaries.setElement(projectionIndex, dictionary)).append(outputDictionaries.setElement(projectionIndex, outputDictionary))[ FD ]
Line_10 $$ ByteCodeBlock body = method.getBody()-->Line_21 $$ Variable blockBuilder = scope.declareVariable("blockBuilder", body, pageBuilder.invoke("getBlockBuilder", BlockBuilder.class, projectionIndex))[ FD ]
Line_23 $$ Variable dictionary = scope.declareVariable(Block.class, "dictionary")-->Line_33 $$ body.comment("Use processed dictionary, if available, else project it").append(new IfStatement().condition(equal(inputDictionaries.getElement(projectionIndex), dictionary)).ifTrue(outputDictionary.set(outputDictionaries.getElement(projectionIndex))).ifFalse(projectDictionary))[ FD ]
Line_24 $$ Variable ids = scope.declareVariable(Slice.class, "ids")-->Line_31 $$ body.comment("Extract dictionary and ids").append(dictionary.set(inputBlock.cast(DictionaryBlock.class).invoke("getDictionary", Block.class))).append(ids.set(inputBlock.cast(DictionaryBlock.class).invoke("getIds", Slice.class))).append(dictionaryCount.set(dictionary.invoke("getPositionCount", int.class)))[ FD ]
Line_23 $$ Variable dictionary = scope.declareVariable(Block.class, "dictionary")-->Line_32 $$ ByteCodeBlock projectDictionary = new ByteCodeBlock().comment("Project dictionary").append(new ForLoop().initialize(position.set(constantInt(0))).condition(lessThan(position, dictionaryCount)).update(position.increment()).body(invokeProject(thisVariable, session, ImmutableList.of(dictionary), position, blockBuilder, project))).append(outputDictionary.set(blockBuilder.invoke("build", Block.class))).append(inputDictionaries.setElement(projectionIndex, dictionary)).append(outputDictionaries.setElement(projectionIndex, outputDictionary))[ FD ]
Line_13 $$ List<Integer> inputChannels = getInputChannels(projection)-->Line_14 $$ if (inputChannels.size() != 1) [ FD ]
Line_12 $$ Variable thisVariable = method.getThis()-->Line_15 $$ body.append(thisVariable.invoke(projectColumnar, params).ret())[ FD ]
Line_19 $$ IfStatement ifStatement = new IfStatement().condition(inputBlock.instanceOf(DictionaryBlock.class)).ifFalse(thisVariable.invoke(projectColumnar, params).ret())-->Line_20 $$ body.append(ifStatement)[ FD ]
Line_22 $$ Variable cardinality = scope.declareVariable("cardinality", body, selectedPositions.length())-->Line_35 $$ body.append(newInstance(DictionaryBlock.class, cardinality, outputDictionary, invokeStatic(Slices.class, "wrappedIntArray", Slice.class, outputIds)).cast(Block.class).ret())[ FD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_25 $$ Variable dictionaryCount = scope.declareVariable(int.class, "dictionaryCount")[ CD ]
Line_12 $$ Variable thisVariable = method.getThis()-->Line_32 $$ ByteCodeBlock projectDictionary = new ByteCodeBlock().comment("Project dictionary").append(new ForLoop().initialize(position.set(constantInt(0))).condition(lessThan(position, dictionaryCount)).update(position.increment()).body(invokeProject(thisVariable, session, ImmutableList.of(dictionary), position, blockBuilder, project))).append(outputDictionary.set(blockBuilder.invoke("build", Block.class))).append(inputDictionaries.setElement(projectionIndex, dictionary)).append(outputDictionaries.setElement(projectionIndex, outputDictionary))[ FD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_28 $$ ByteCodeExpression inputDictionaries = thisVariable.getField("inputDictionaries", Block[].class)[ CD ]
Line_14 $$ if (inputChannels.size() != 1) -->Line_16 $$ return method[ CD ]
Line_24 $$ Variable ids = scope.declareVariable(Slice.class, "ids")-->Line_34 $$ body.comment("Filter ids").append(outputIds.set(newArray(type(int[].class), cardinality))).append(new ForLoop().initialize(position.set(constantInt(0))).condition(lessThan(position, cardinality)).update(position.increment()).body(outputIds.setElement(position, ids.invoke("getInt", int.class, multiply(selectedPositions.getElement(position), constantInt(SIZE_OF_INT))))))[ FD ]
Line_26 $$ Variable outputDictionary = scope.declareVariable(Block.class, "outputDictionary")-->Line_35 $$ body.append(newInstance(DictionaryBlock.class, cardinality, outputDictionary, invokeStatic(Slices.class, "wrappedIntArray", Slice.class, outputIds)).cast(Block.class).ret())[ FD ]
Line_7 $$ Parameter projectionIndex = arg("projectionIndex", int.class)-->Line_8 $$ List<Parameter> params = ImmutableList.<Parameter>builder().add(session).add(page).add(selectedPositions).add(pageBuilder).add(projectionIndex).build()[ FD ]
Line_8 $$ List<Parameter> params = ImmutableList.<Parameter>builder().add(session).add(page).add(selectedPositions).add(pageBuilder).add(projectionIndex).build()-->Line_15 $$ body.append(thisVariable.invoke(projectColumnar, params).ret())[ FD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_30 $$ Variable position = scope.declareVariable("position", body, constantInt(0))[ CD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_33 $$ body.comment("Use processed dictionary, if available, else project it").append(new IfStatement().condition(equal(inputDictionaries.getElement(projectionIndex), dictionary)).ifTrue(outputDictionary.set(outputDictionaries.getElement(projectionIndex))).ifFalse(projectDictionary))[ CD ]
Line_12 $$ Variable thisVariable = method.getThis()-->Line_29 $$ ByteCodeExpression outputDictionaries = thisVariable.getField("outputDictionaries", Block[].class)[ FD ]
Line_4 $$ Parameter page = arg("page", Page.class)-->Line_18 $$ Variable inputBlock = scope.declareVariable("inputBlock", body, page.invoke("getBlock", Block.class, constantInt(Iterables.getOnlyElement(inputChannels))))[ FD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_26 $$ Variable outputDictionary = scope.declareVariable(Block.class, "outputDictionary")[ CD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_31 $$ body.comment("Extract dictionary and ids").append(dictionary.set(inputBlock.cast(DictionaryBlock.class).invoke("getDictionary", Block.class))).append(ids.set(inputBlock.cast(DictionaryBlock.class).invoke("getIds", Slice.class))).append(dictionaryCount.set(dictionary.invoke("getPositionCount", int.class)))[ CD ]
Line_10 $$ ByteCodeBlock body = method.getBody()-->Line_15 $$ body.append(thisVariable.invoke(projectColumnar, params).ret())[ FD ]
Line_2 $$ private static MethodDefinition generateProjectDictionaryMethod(ClassDefinition classDefinition, String methodName, RowExpression projection, MethodDefinition project, MethodDefinition projectColumnar) -->Line_18 $$ Variable inputBlock = scope.declareVariable("inputBlock", body, page.invoke("getBlock", Block.class, constantInt(Iterables.getOnlyElement(inputChannels))))[ CD ]
