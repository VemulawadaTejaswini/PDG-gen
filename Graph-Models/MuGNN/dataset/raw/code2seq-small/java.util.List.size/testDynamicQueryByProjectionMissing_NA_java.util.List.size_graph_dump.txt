Line_3 $$ DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(DDMTemplateVersion.class, _dynamicQueryClassLoader)-->Line_5 $$ dynamicQuery.add(RestrictionsFactoryUtil.in("templateVersionId", new Object[] [ FD ]
Line_2 $$ public void testDynamicQueryByProjectionMissing() throws Exception -->Line_7 $$ Assert.assertEquals(0, result.size())[ CD ]
Line_3 $$ DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(DDMTemplateVersion.class, _dynamicQueryClassLoader)-->Line_4 $$ dynamicQuery.setProjection(ProjectionFactoryUtil.property("templateVersionId"))[ FD ]
Line_3 $$ DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(DDMTemplateVersion.class, _dynamicQueryClassLoader)-->Line_6 $$ List<Object> result = _persistence.findWithDynamicQuery(dynamicQuery)[ FD ]
Line_6 $$ List<Object> result = _persistence.findWithDynamicQuery(dynamicQuery)-->Line_7 $$ Assert.assertEquals(0, result.size())[ FD ]
Line_2 $$ public void testDynamicQueryByProjectionMissing() throws Exception -->Line_3 $$ DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(DDMTemplateVersion.class, _dynamicQueryClassLoader)[ CD ]
Line_2 $$ public void testDynamicQueryByProjectionMissing() throws Exception -->Line_5 $$ dynamicQuery.add(RestrictionsFactoryUtil.in("templateVersionId", new Object[] [ CD ]
Line_2 $$ public void testDynamicQueryByProjectionMissing() throws Exception -->Line_4 $$ dynamicQuery.setProjection(ProjectionFactoryUtil.property("templateVersionId"))[ CD ]
Line_2 $$ public void testDynamicQueryByProjectionMissing() throws Exception -->Line_6 $$ List<Object> result = _persistence.findWithDynamicQuery(dynamicQuery)[ CD ]
