Line_9 $$ int cnt = 0-->Line_11 $$ if (!parts1.get(cnt).equals(parts2.get(cnt))) [ FD ]
Line_20 $$ if (parts1.size() > parts2.size()) -->Line_21 $$ return file2[ CD ]
Line_3 $$ if (FileUtil.filesEqual(file1, file2))-->Line_4 $$ return file1[ CD ]
Line_5 $$ final File can1 = file1.getCanonicalFile()-->Line_7 $$ final List<String> parts1 = StringUtil.split(can1.getPath(), File.separator, true)[ FD ]
Line_9 $$ int cnt = 0-->Line_12 $$ if (cnt > 0) [ FD ]
Line_6 $$ final File can2 = file2.getCanonicalFile()-->Line_8 $$ final List<String> parts2 = StringUtil.split(can2.getPath(), File.separator, true)[ FD ]
Line_2 $$ public static File getCommonAncestor(final File file1, final File file2) throws IOException -->Line_6 $$ final File can2 = file2.getCanonicalFile()[ CD ]
Line_12 $$ if (cnt > 0) -->Line_15 $$ return null[ CD ]
Line_2 $$ public static File getCommonAncestor(final File file1, final File file2) throws IOException -->Line_8 $$ final List<String> parts2 = StringUtil.split(can2.getPath(), File.separator, true)[ CD ]
Line_7 $$ final List<String> parts1 = StringUtil.split(can1.getPath(), File.separator, true)-->Line_11 $$ if (!parts1.get(cnt).equals(parts2.get(cnt))) [ FD ]
Line_2 $$ public static File getCommonAncestor(final File file1, final File file2) throws IOException -->Line_6 $$ final File can2 = file2.getCanonicalFile()[ FD ]
Line_2 $$ public static File getCommonAncestor(final File file1, final File file2) throws IOException -->Line_5 $$ final File can1 = file1.getCanonicalFile()[ FD ]
Line_7 $$ final List<String> parts1 = StringUtil.split(can1.getPath(), File.separator, true)-->Line_20 $$ if (parts1.size() > parts2.size()) [ FD ]
Line_2 $$ public static File getCommonAncestor(final File file1, final File file2) throws IOException -->Line_3 $$ if (FileUtil.filesEqual(file1, file2))[ CD ]
Line_2 $$ public static File getCommonAncestor(final File file1, final File file2) throws IOException -->Line_7 $$ final List<String> parts1 = StringUtil.split(can1.getPath(), File.separator, true)[ CD ]
Line_12 $$ if (cnt > 0) -->Line_13 $$ return new File(StringUtil.join(parts1.subList(0, cnt), File.separator))[ CD ]
Line_20 $$ if (parts1.size() > parts2.size()) -->Line_23 $$ return file1[ CD ]
Line_9 $$ int cnt = 0-->Line_18 $$ ++cnt[ FD ]
Line_8 $$ final List<String> parts2 = StringUtil.split(can2.getPath(), File.separator, true)-->Line_20 $$ if (parts1.size() > parts2.size()) [ FD ]
Line_2 $$ public static File getCommonAncestor(final File file1, final File file2) throws IOException -->Line_3 $$ if (FileUtil.filesEqual(file1, file2))[ FD ]
Line_10 $$ while (parts1.size() > cnt && parts2.size() > cnt) -->Line_11 $$ if (!parts1.get(cnt).equals(parts2.get(cnt))) [ CD ]
Line_8 $$ final List<String> parts2 = StringUtil.split(can2.getPath(), File.separator, true)-->Line_10 $$ while (parts1.size() > cnt && parts2.size() > cnt) [ FD ]
Line_8 $$ final List<String> parts2 = StringUtil.split(can2.getPath(), File.separator, true)-->Line_11 $$ if (!parts1.get(cnt).equals(parts2.get(cnt))) [ FD ]
Line_11 $$ if (!parts1.get(cnt).equals(parts2.get(cnt))) -->Line_12 $$ if (cnt > 0) [ CD ]
Line_9 $$ int cnt = 0-->Line_13 $$ return new File(StringUtil.join(parts1.subList(0, cnt), File.separator))[ FD ]
Line_2 $$ public static File getCommonAncestor(final File file1, final File file2) throws IOException -->Line_10 $$ while (parts1.size() > cnt && parts2.size() > cnt) [ CD ]
Line_2 $$ public static File getCommonAncestor(final File file1, final File file2) throws IOException -->Line_20 $$ if (parts1.size() > parts2.size()) [ CD ]
Line_7 $$ final List<String> parts1 = StringUtil.split(can1.getPath(), File.separator, true)-->Line_13 $$ return new File(StringUtil.join(parts1.subList(0, cnt), File.separator))[ FD ]
Line_2 $$ public static File getCommonAncestor(final File file1, final File file2) throws IOException -->Line_9 $$ int cnt = 0[ CD ]
Line_7 $$ final List<String> parts1 = StringUtil.split(can1.getPath(), File.separator, true)-->Line_10 $$ while (parts1.size() > cnt && parts2.size() > cnt) [ FD ]
Line_10 $$ while (parts1.size() > cnt && parts2.size() > cnt) -->Line_18 $$ ++cnt[ CD ]
Line_2 $$ public static File getCommonAncestor(final File file1, final File file2) throws IOException -->Line_5 $$ final File can1 = file1.getCanonicalFile()[ CD ]
