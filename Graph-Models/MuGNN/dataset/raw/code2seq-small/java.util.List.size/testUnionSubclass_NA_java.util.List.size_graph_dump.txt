Line_4 $$ Session s = openSession()-->Line_28 $$ assertEquals(s.createQuery("from Being b where b.class = Alien").list().size(), 1)[ FD ]
Line_6 $$ Location mel = new Location("Melbourne, Australia")-->Line_16 $$ mel.addBeing(gavin)[ FD ]
Line_56 $$ Location l = (Location) location-->Line_57 $$ assertNotNull(l.getName())[ FD ]
Line_4 $$ Session s = openSession()-->Line_32 $$ s.clear()[ FD ]
Line_12 $$ Human gavin = new Human()-->Line_81 $$ atl.addBeing(gavin)[ FD ]
Line_12 $$ Human gavin = new Human()-->Line_13 $$ gavin.setIdentity("gavin")[ FD ]
Line_80 $$ atl = (Location) s.get(Location.class, atl.getId())-->Line_81 $$ atl.addBeing(gavin)[ FD ]
Line_4 $$ Session s = openSession()-->Line_33 $$ List beings = s.createQuery("from Being b left join fetch b.location").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_10 $$ s.save(atl)[ FD ]
Line_84 $$ x23y4 = (Alien) s.createCriteria(Alien.class).uniqueResult()-->Line_85 $$ s.delete(x23y4.getHive())[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_88 $$ t.commit()[ FD ]
Line_4 $$ Session s = openSession()-->Line_27 $$ assertEquals(s.createQuery("from Being").list().size(), 2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_29 $$ assertEquals(s.createQuery("from Being b where type(b) = :what").setParameter("what", Alien.class).list().size(), 1)[ FD ]
Line_6 $$ Location mel = new Location("Melbourne, Australia")-->Line_15 $$ gavin.setLocation(mel)[ FD ]
Line_17 $$ Alien x23y4 = new Alien()-->Line_85 $$ s.delete(x23y4.getHive())[ FD ]
Line_22 $$ Hive hive = new Hive()-->Line_26 $$ s.persist(hive)[ FD ]
Line_4 $$ Session s = openSession()-->Line_26 $$ s.persist(hive)[ FD ]
Line_35 $$ Being b = (Being) being-->Line_38 $$ assertNotNull(b.getIdentity())[ FD ]
Line_54 $$ int count = 0-->Line_72 $$ count++[ FD ]
Line_8 $$ Location mars = new Location("Mars")-->Line_23 $$ hive.setLocation(mars)[ FD ]
Line_54 $$ int count = 0-->Line_76 $$ assertEquals(count, 2)[ FD ]
Line_17 $$ Alien x23y4 = new Alien()-->Line_24 $$ hive.getMembers().add(x23y4)[ FD ]
Line_4 $$ Session s = openSession()-->Line_66 $$ locations = s.createQuery("from Location loc left join fetch loc.beings").list()[ FD ]
Line_53 $$ List locations = s.createQuery("from Location").list()-->Line_77 $$ assertEquals(locations.size(), 3)[ FD ]
Line_35 $$ Being b = (Being) being-->Line_39 $$ assertNotNull(b.getSpecies())[ FD ]
Line_12 $$ Human gavin = new Human()-->Line_15 $$ gavin.setLocation(mel)[ FD ]
Line_35 $$ Being b = (Being) being-->Line_47 $$ assertNotNull(b.getLocation().getName())[ FD ]
Line_35 $$ Being b = (Being) being-->Line_49 $$ assertNotNull(b.getSpecies())[ FD ]
Line_12 $$ Human gavin = new Human()-->Line_14 $$ gavin.setSex('M')[ FD ]
Line_17 $$ Alien x23y4 = new Alien()-->Line_84 $$ x23y4 = (Alien) s.createCriteria(Alien.class).uniqueResult()[ FD ]
Line_8 $$ Location mars = new Location("Mars")-->Line_21 $$ mars.addBeing(x23y4)[ FD ]
Line_4 $$ Session s = openSession()-->Line_79 $$ gavin = (Human) s.get(Human.class, gavin.getId())[ FD ]
Line_54 $$ int count = 0-->Line_67 $$ count = 0[ FD ]
Line_4 $$ Session s = openSession()-->Line_84 $$ x23y4 = (Alien) s.createCriteria(Alien.class).uniqueResult()[ FD ]
Line_54 $$ int count = 0-->Line_63 $$ assertEquals(count, 2)[ FD ]
Line_8 $$ Location mars = new Location("Mars")-->Line_19 $$ x23y4.setLocation(mars)[ FD ]
Line_67 $$ count = 0-->Line_76 $$ assertEquals(count, 2)[ FD ]
Line_43 $$ beings = s.createQuery("from Being").list()-->Line_51 $$ assertEquals(beings.size(), 2)[ FD ]
Line_56 $$ Location l = (Location) location-->Line_70 $$ assertNotNull(l.getName())[ FD ]
Line_33 $$ List beings = s.createQuery("from Being b left join fetch b.location").list()-->Line_41 $$ assertEquals(beings.size(), 2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_65 $$ s.clear()[ FD ]
Line_4 $$ Session s = openSession()-->Line_80 $$ atl = (Location) s.get(Location.class, atl.getId())[ FD ]
Line_22 $$ Hive hive = new Hive()-->Line_24 $$ hive.getMembers().add(x23y4)[ FD ]
Line_12 $$ Human gavin = new Human()-->Line_16 $$ mel.addBeing(gavin)[ FD ]
Line_17 $$ Alien x23y4 = new Alien()-->Line_25 $$ x23y4.setHive(hive)[ FD ]
Line_67 $$ count = 0-->Line_72 $$ count++[ FD ]
Line_7 $$ Location atl = new Location("Atlanta, GA")-->Line_81 $$ atl.addBeing(gavin)[ FD ]
Line_79 $$ gavin = (Human) s.get(Human.class, gavin.getId())-->Line_81 $$ atl.addBeing(gavin)[ FD ]
Line_53 $$ List locations = s.createQuery("from Location").list()-->Line_66 $$ locations = s.createQuery("from Location loc left join fetch loc.beings").list()[ FD ]
Line_8 $$ Location mars = new Location("Mars")-->Line_11 $$ s.save(mars)[ FD ]
Line_4 $$ Session s = openSession()-->Line_85 $$ s.delete(x23y4.getHive())[ FD ]
Line_4 $$ Session s = openSession()-->Line_83 $$ s.delete(gavin)[ FD ]
Line_4 $$ Session s = openSession()-->Line_30 $$ assertEquals(s.createQuery("from Being b where type(b) in :what").setParameterList("what", new Class[] [ FD ]
Line_56 $$ Location l = (Location) location-->Line_73 $$ assertSame(((Being) o).getLocation(), l)[ FD ]
Line_4 $$ Session s = openSession()-->Line_11 $$ s.save(mars)[ FD ]
Line_17 $$ Alien x23y4 = new Alien()-->Line_19 $$ x23y4.setLocation(mars)[ FD ]
Line_35 $$ Being b = (Being) being-->Line_48 $$ assertNotNull(b.getIdentity())[ FD ]
Line_17 $$ Alien x23y4 = new Alien()-->Line_21 $$ mars.addBeing(x23y4)[ FD ]
Line_4 $$ Session s = openSession()-->Line_82 $$ assertEquals(s.createQuery("from Human h where h.location.name like '%GA'").list().size(), 1)[ FD ]
Line_22 $$ Hive hive = new Hive()-->Line_23 $$ hive.setLocation(mars)[ FD ]
Line_4 $$ Session s = openSession()-->Line_78 $$ s.clear()[ FD ]
Line_7 $$ Location atl = new Location("Atlanta, GA")-->Line_80 $$ atl = (Location) s.get(Location.class, atl.getId())[ FD ]
Line_4 $$ Session s = openSession()-->Line_86 $$ assertTrue(s.createQuery("from Being").list().isEmpty())[ FD ]
Line_53 $$ List locations = s.createQuery("from Location").list()-->Line_64 $$ assertEquals(locations.size(), 3)[ FD ]
Line_7 $$ Location atl = new Location("Atlanta, GA")-->Line_10 $$ s.save(atl)[ FD ]
Line_79 $$ gavin = (Human) s.get(Human.class, gavin.getId())-->Line_83 $$ s.delete(gavin)[ FD ]
Line_4 $$ Session s = openSession()-->Line_43 $$ beings = s.createQuery("from Being").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_42 $$ s.clear()[ FD ]
Line_33 $$ List beings = s.createQuery("from Being b left join fetch b.location").list()-->Line_43 $$ beings = s.createQuery("from Being").list()[ FD ]
Line_6 $$ Location mel = new Location("Melbourne, Australia")-->Line_9 $$ s.save(mel)[ FD ]
Line_12 $$ Human gavin = new Human()-->Line_83 $$ s.delete(gavin)[ FD ]
Line_35 $$ Being b = (Being) being-->Line_46 $$ assertFalse(Hibernate.isInitialized(b.getLocation()))[ FD ]
Line_4 $$ Session s = openSession()-->Line_5 $$ Transaction t = s.beginTransaction()[ FD ]
Line_66 $$ locations = s.createQuery("from Location loc left join fetch loc.beings").list()-->Line_77 $$ assertEquals(locations.size(), 3)[ FD ]
Line_56 $$ Location l = (Location) location-->Line_60 $$ assertSame(((Being) o).getLocation(), l)[ FD ]
Line_4 $$ Session s = openSession()-->Line_89 $$ s.close()[ FD ]
Line_35 $$ Being b = (Being) being-->Line_37 $$ assertNotNull(b.getLocation().getName())[ FD ]
Line_4 $$ Session s = openSession()-->Line_53 $$ List locations = s.createQuery("from Location").list()[ FD ]
Line_35 $$ Being b = (Being) being-->Line_36 $$ assertTrue(Hibernate.isInitialized(b.getLocation()))[ FD ]
Line_56 $$ Location l = (Location) location-->Line_58 $$ for (Object o : l.getBeings()) [ FD ]
Line_4 $$ Session s = openSession()-->Line_31 $$ assertEquals(s.createQuery("from Alien").list().size(), 1)[ FD ]
Line_56 $$ Location l = (Location) location-->Line_71 $$ for (Object o : l.getBeings()) [ FD ]
Line_22 $$ Hive hive = new Hive()-->Line_25 $$ x23y4.setHive(hive)[ FD ]
Line_33 $$ List beings = s.createQuery("from Being b left join fetch b.location").list()-->Line_51 $$ assertEquals(beings.size(), 2)[ FD ]
Line_4 $$ Session s = openSession()-->Line_87 $$ s.createQuery("delete from Location").executeUpdate()[ FD ]
Line_17 $$ Alien x23y4 = new Alien()-->Line_20 $$ x23y4.setSpecies("martian")[ FD ]
Line_4 $$ Session s = openSession()-->Line_9 $$ s.save(mel)[ FD ]
Line_12 $$ Human gavin = new Human()-->Line_79 $$ gavin = (Human) s.get(Human.class, gavin.getId())[ FD ]
Line_4 $$ Session s = openSession()-->Line_52 $$ s.clear()[ FD ]
Line_54 $$ int count = 0-->Line_59 $$ count++[ FD ]
