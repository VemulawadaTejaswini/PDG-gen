Line_2 $$ public void testUnionSubclass() -->Line_20 $$ mars.addBeing(x23y4)[ CD ]
Line_7 $$ Location mars = new Location("Mars")-->Line_20 $$ mars.addBeing(x23y4)[ FD ]
Line_55 $$ Location l = (Location) location-->Line_70 $$ for (Object o : l.getBeings()) [ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_21 $$ Hive hive = new Hive()[ CD ]
Line_34 $$ Being b = (Being) being-->Line_46 $$ assertNotNull(b.getLocation().getName())[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_63 $$ assertEquals(locations.size(), 3)[ CD ]
Line_2 $$ public void testUnionSubclass() -->Line_28 $$ assertEquals(s.createQuery("from Being b where type(b) = :what").setParameter("what", Alien.class).list().size(), 1)[ CD ]
Line_32 $$ List beings = s.createQuery("from Being b left join fetch b.location").list()-->Line_42 $$ beings = s.createQuery("from Being").list()[ FD ]
Line_21 $$ Hive hive = new Hive()-->Line_23 $$ hive.getMembers().add(x23y4)[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_77 $$ s.clear()[ CD ]
Line_5 $$ Location mel = new Location("Melbourne, Australia")-->Line_14 $$ gavin.setLocation(mel)[ FD ]
Line_55 $$ Location l = (Location) location-->Line_72 $$ assertSame(((Being) o).getLocation(), l)[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_24 $$ x23y4.setHive(hive)[ CD ]
Line_2 $$ public void testUnionSubclass() -->Line_65 $$ locations = s.createQuery("from Location loc left join fetch loc.beings").list()[ CD ]
Line_11 $$ Human gavin = new Human()-->Line_82 $$ s.delete(gavin)[ FD ]
Line_3 $$ Session s = openSession()-->Line_32 $$ List beings = s.createQuery("from Being b left join fetch b.location").list()[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_10 $$ s.save(mars)[ CD ]
Line_2 $$ public void testUnionSubclass() -->Line_75 $$ assertEquals(count, 2)[ CD ]
Line_2 $$ public void testUnionSubclass() -->Line_84 $$ s.delete(x23y4.getHive())[ CD ]
Line_2 $$ public void testUnionSubclass() -->Line_9 $$ s.save(atl)[ CD ]
Line_2 $$ public void testUnionSubclass() -->Line_50 $$ assertEquals(beings.size(), 2)[ CD ]
Line_2 $$ public void testUnionSubclass() -->Line_25 $$ s.persist(hive)[ CD ]
Line_55 $$ Location l = (Location) location-->Line_69 $$ assertNotNull(l.getName())[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_81 $$ assertEquals(s.createQuery("from Human h where h.location.name like '%GA'").list().size(), 1)[ CD ]
Line_16 $$ Alien x23y4 = new Alien()-->Line_20 $$ mars.addBeing(x23y4)[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_87 $$ t.commit()[ FD ]
Line_11 $$ Human gavin = new Human()-->Line_78 $$ gavin = (Human) s.get(Human.class, gavin.getId())[ FD ]
Line_79 $$ atl = (Location) s.get(Location.class, atl.getId())-->Line_80 $$ atl.addBeing(gavin)[ FD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ Transaction t = s.beginTransaction()[ FD ]
Line_65 $$ locations = s.createQuery("from Location loc left join fetch loc.beings").list()-->Line_76 $$ assertEquals(locations.size(), 3)[ FD ]
Line_3 $$ Session s = openSession()-->Line_8 $$ s.save(mel)[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_14 $$ gavin.setLocation(mel)[ CD ]
Line_2 $$ public void testUnionSubclass() -->Line_7 $$ Location mars = new Location("Mars")[ CD ]
Line_55 $$ Location l = (Location) location-->Line_59 $$ assertSame(((Being) o).getLocation(), l)[ FD ]
Line_16 $$ Alien x23y4 = new Alien()-->Line_83 $$ x23y4 = (Alien) s.createCriteria(Alien.class).uniqueResult()[ FD ]
Line_6 $$ Location atl = new Location("Atlanta, GA")-->Line_9 $$ s.save(atl)[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_40 $$ assertEquals(beings.size(), 2)[ CD ]
Line_3 $$ Session s = openSession()-->Line_31 $$ s.clear()[ FD ]
Line_3 $$ Session s = openSession()-->Line_77 $$ s.clear()[ FD ]
Line_53 $$ int count = 0-->Line_66 $$ count = 0[ FD ]
Line_3 $$ Session s = openSession()-->Line_25 $$ s.persist(hive)[ FD ]
Line_3 $$ Session s = openSession()-->Line_79 $$ atl = (Location) s.get(Location.class, atl.getId())[ FD ]
Line_3 $$ Session s = openSession()-->Line_84 $$ s.delete(x23y4.getHive())[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_15 $$ mel.addBeing(gavin)[ CD ]
Line_3 $$ Session s = openSession()-->Line_42 $$ beings = s.createQuery("from Being").list()[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_78 $$ gavin = (Human) s.get(Human.class, gavin.getId())[ CD ]
Line_21 $$ Hive hive = new Hive()-->Line_25 $$ s.persist(hive)[ FD ]
Line_34 $$ Being b = (Being) being-->Line_37 $$ assertNotNull(b.getIdentity())[ FD ]
Line_11 $$ Human gavin = new Human()-->Line_14 $$ gavin.setLocation(mel)[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_64 $$ s.clear()[ CD ]
Line_32 $$ List beings = s.createQuery("from Being b left join fetch b.location").list()-->Line_50 $$ assertEquals(beings.size(), 2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_81 $$ assertEquals(s.createQuery("from Human h where h.location.name like '%GA'").list().size(), 1)[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_31 $$ s.clear()[ CD ]
Line_52 $$ List locations = s.createQuery("from Location").list()-->Line_63 $$ assertEquals(locations.size(), 3)[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_51 $$ s.clear()[ CD ]
Line_16 $$ Alien x23y4 = new Alien()-->Line_84 $$ s.delete(x23y4.getHive())[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_80 $$ atl.addBeing(gavin)[ CD ]
Line_2 $$ public void testUnionSubclass() -->Line_19 $$ x23y4.setSpecies("martian")[ CD ]
Line_7 $$ Location mars = new Location("Mars")-->Line_22 $$ hive.setLocation(mars)[ FD ]
Line_34 $$ Being b = (Being) being-->Line_36 $$ assertNotNull(b.getLocation().getName())[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_76 $$ assertEquals(locations.size(), 3)[ CD ]
Line_2 $$ public void testUnionSubclass() -->Line_32 $$ List beings = s.createQuery("from Being b left join fetch b.location").list()[ CD ]
Line_3 $$ Session s = openSession()-->Line_82 $$ s.delete(gavin)[ FD ]
Line_66 $$ count = 0-->Line_75 $$ assertEquals(count, 2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_10 $$ s.save(mars)[ FD ]
Line_42 $$ beings = s.createQuery("from Being").list()-->Line_50 $$ assertEquals(beings.size(), 2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_52 $$ List locations = s.createQuery("from Location").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_51 $$ s.clear()[ FD ]
Line_52 $$ List locations = s.createQuery("from Location").list()-->Line_65 $$ locations = s.createQuery("from Location loc left join fetch loc.beings").list()[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_85 $$ assertTrue(s.createQuery("from Being").list().isEmpty())[ CD ]
Line_2 $$ public void testUnionSubclass() -->Line_5 $$ Location mel = new Location("Melbourne, Australia")[ CD ]
Line_3 $$ Session s = openSession()-->Line_9 $$ s.save(atl)[ FD ]
Line_3 $$ Session s = openSession()-->Line_41 $$ s.clear()[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_11 $$ Human gavin = new Human()[ CD ]
Line_2 $$ public void testUnionSubclass() -->Line_27 $$ assertEquals(s.createQuery("from Being b where b.class = Alien").list().size(), 1)[ CD ]
Line_21 $$ Hive hive = new Hive()-->Line_24 $$ x23y4.setHive(hive)[ FD ]
Line_53 $$ int count = 0-->Line_71 $$ count++[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_53 $$ int count = 0[ CD ]
Line_78 $$ gavin = (Human) s.get(Human.class, gavin.getId())-->Line_82 $$ s.delete(gavin)[ FD ]
Line_5 $$ Location mel = new Location("Melbourne, Australia")-->Line_15 $$ mel.addBeing(gavin)[ FD ]
Line_11 $$ Human gavin = new Human()-->Line_80 $$ atl.addBeing(gavin)[ FD ]
Line_7 $$ Location mars = new Location("Mars")-->Line_18 $$ x23y4.setLocation(mars)[ FD ]
Line_3 $$ Session s = openSession()-->Line_83 $$ x23y4 = (Alien) s.createCriteria(Alien.class).uniqueResult()[ FD ]
Line_6 $$ Location atl = new Location("Atlanta, GA")-->Line_79 $$ atl = (Location) s.get(Location.class, atl.getId())[ FD ]
Line_3 $$ Session s = openSession()-->Line_85 $$ assertTrue(s.createQuery("from Being").list().isEmpty())[ FD ]
Line_3 $$ Session s = openSession()-->Line_26 $$ assertEquals(s.createQuery("from Being").list().size(), 2)[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_30 $$ assertEquals(s.createQuery("from Alien").list().size(), 1)[ CD ]
Line_3 $$ Session s = openSession()-->Line_65 $$ locations = s.createQuery("from Location loc left join fetch loc.beings").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_27 $$ assertEquals(s.createQuery("from Being b where b.class = Alien").list().size(), 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_86 $$ s.createQuery("delete from Location").executeUpdate()[ FD ]
Line_34 $$ Being b = (Being) being-->Line_38 $$ assertNotNull(b.getSpecies())[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_62 $$ assertEquals(count, 2)[ CD ]
Line_34 $$ Being b = (Being) being-->Line_45 $$ assertFalse(Hibernate.isInitialized(b.getLocation()))[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_42 $$ beings = s.createQuery("from Being").list()[ CD ]
Line_2 $$ public void testUnionSubclass() -->Line_4 $$ Transaction t = s.beginTransaction()[ CD ]
Line_16 $$ Alien x23y4 = new Alien()-->Line_19 $$ x23y4.setSpecies("martian")[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_29 $$ assertEquals(s.createQuery("from Being b where type(b) in :what").setParameterList("what", new Class[] [ CD ]
Line_21 $$ Hive hive = new Hive()-->Line_22 $$ hive.setLocation(mars)[ FD ]
Line_83 $$ x23y4 = (Alien) s.createCriteria(Alien.class).uniqueResult()-->Line_84 $$ s.delete(x23y4.getHive())[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_79 $$ atl = (Location) s.get(Location.class, atl.getId())[ CD ]
Line_2 $$ public void testUnionSubclass() -->Line_83 $$ x23y4 = (Alien) s.createCriteria(Alien.class).uniqueResult()[ CD ]
Line_3 $$ Session s = openSession()-->Line_29 $$ assertEquals(s.createQuery("from Being b where type(b) in :what").setParameterList("what", new Class[] [ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_18 $$ x23y4.setLocation(mars)[ CD ]
Line_2 $$ public void testUnionSubclass() -->Line_22 $$ hive.setLocation(mars)[ CD ]
Line_2 $$ public void testUnionSubclass() -->Line_41 $$ s.clear()[ CD ]
Line_2 $$ public void testUnionSubclass() -->Line_3 $$ Session s = openSession()[ CD ]
Line_34 $$ Being b = (Being) being-->Line_47 $$ assertNotNull(b.getIdentity())[ FD ]
Line_53 $$ int count = 0-->Line_58 $$ count++[ FD ]
Line_3 $$ Session s = openSession()-->Line_78 $$ gavin = (Human) s.get(Human.class, gavin.getId())[ FD ]
Line_5 $$ Location mel = new Location("Melbourne, Australia")-->Line_8 $$ s.save(mel)[ FD ]
Line_16 $$ Alien x23y4 = new Alien()-->Line_18 $$ x23y4.setLocation(mars)[ FD ]
Line_53 $$ int count = 0-->Line_75 $$ assertEquals(count, 2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_64 $$ s.clear()[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_86 $$ s.createQuery("delete from Location").executeUpdate()[ CD ]
Line_34 $$ Being b = (Being) being-->Line_48 $$ assertNotNull(b.getSpecies())[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_13 $$ gavin.setSex('M')[ CD ]
Line_55 $$ Location l = (Location) location-->Line_56 $$ assertNotNull(l.getName())[ FD ]
Line_78 $$ gavin = (Human) s.get(Human.class, gavin.getId())-->Line_80 $$ atl.addBeing(gavin)[ FD ]
Line_34 $$ Being b = (Being) being-->Line_35 $$ assertTrue(Hibernate.isInitialized(b.getLocation()))[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_6 $$ Location atl = new Location("Atlanta, GA")[ CD ]
Line_16 $$ Alien x23y4 = new Alien()-->Line_24 $$ x23y4.setHive(hive)[ FD ]
Line_11 $$ Human gavin = new Human()-->Line_13 $$ gavin.setSex('M')[ FD ]
Line_3 $$ Session s = openSession()-->Line_30 $$ assertEquals(s.createQuery("from Alien").list().size(), 1)[ FD ]
Line_16 $$ Alien x23y4 = new Alien()-->Line_23 $$ hive.getMembers().add(x23y4)[ FD ]
Line_55 $$ Location l = (Location) location-->Line_57 $$ for (Object o : l.getBeings()) [ FD ]
Line_53 $$ int count = 0-->Line_62 $$ assertEquals(count, 2)[ FD ]
Line_66 $$ count = 0-->Line_71 $$ count++[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_8 $$ s.save(mel)[ CD ]
Line_2 $$ public void testUnionSubclass() -->Line_23 $$ hive.getMembers().add(x23y4)[ CD ]
Line_3 $$ Session s = openSession()-->Line_28 $$ assertEquals(s.createQuery("from Being b where type(b) = :what").setParameter("what", Alien.class).list().size(), 1)[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_12 $$ gavin.setIdentity("gavin")[ CD ]
Line_2 $$ public void testUnionSubclass() -->Line_16 $$ Alien x23y4 = new Alien()[ CD ]
Line_2 $$ public void testUnionSubclass() -->Line_66 $$ count = 0[ CD ]
Line_52 $$ List locations = s.createQuery("from Location").list()-->Line_76 $$ assertEquals(locations.size(), 3)[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_82 $$ s.delete(gavin)[ CD ]
Line_6 $$ Location atl = new Location("Atlanta, GA")-->Line_80 $$ atl.addBeing(gavin)[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_87 $$ t.commit()[ CD ]
Line_3 $$ Session s = openSession()-->Line_88 $$ s.close()[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_52 $$ List locations = s.createQuery("from Location").list()[ CD ]
Line_11 $$ Human gavin = new Human()-->Line_15 $$ mel.addBeing(gavin)[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_26 $$ assertEquals(s.createQuery("from Being").list().size(), 2)[ CD ]
Line_32 $$ List beings = s.createQuery("from Being b left join fetch b.location").list()-->Line_40 $$ assertEquals(beings.size(), 2)[ FD ]
Line_2 $$ public void testUnionSubclass() -->Line_88 $$ s.close()[ CD ]
Line_7 $$ Location mars = new Location("Mars")-->Line_10 $$ s.save(mars)[ FD ]
Line_11 $$ Human gavin = new Human()-->Line_12 $$ gavin.setIdentity("gavin")[ FD ]
