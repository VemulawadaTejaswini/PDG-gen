Line_18 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)-->Line_22 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)-->Line_12 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_23 $$ logRecord = logRecords.get(0)-->Line_24 $$ Assert.assertEquals(stdOutString, logRecord.getMessage())[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)-->Line_20 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_3 $$ LoggingOutputProcessor loggingOutputProcessor = new LoggingOutputProcessor()-->Line_11 $$ Assert.assertNull(loggingOutputProcessor.processStdErr(new UnsyncByteArrayInputStream(stdErrBytes)))[ FD ]
Line_6 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(LoggingOutputProcessor.class.getName(), Level.OFF)) -->Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)[ FD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_12 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_19 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)[ FD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_23 $$ logRecord = logRecords.get(0)[ FD ]
Line_2 $$ public void testLoggingSuccess() throws Exception -->Line_3 $$ LoggingOutputProcessor loggingOutputProcessor = new LoggingOutputProcessor()[ CD ]
Line_20 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_23 $$ logRecord = logRecords.get(0)[ FD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_9 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_15 $$ String stdOutString = "This is standard out message."-->Line_16 $$ byte[] stdOutBytes = stdOutString.getBytes(StringPool.DEFAULT_CHARSET_NAME)[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)-->Line_22 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_18 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)-->Line_23 $$ logRecord = logRecords.get(0)[ FD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_18 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)[ FD ]
Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_24 $$ Assert.assertEquals(stdOutString, logRecord.getMessage())[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)-->Line_13 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_6 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(LoggingOutputProcessor.class.getName(), Level.OFF)) -->Line_18 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)[ FD ]
Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_23 $$ logRecord = logRecords.get(0)[ FD ]
Line_4 $$ String stdErrString = "This is standard error message."-->Line_14 $$ Assert.assertEquals(stdErrString, logRecord.getMessage())[ FD ]
Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_14 $$ Assert.assertEquals(stdErrString, logRecord.getMessage())[ FD ]
Line_3 $$ LoggingOutputProcessor loggingOutputProcessor = new LoggingOutputProcessor()-->Line_8 $$ Assert.assertNull(loggingOutputProcessor.processStdErr(new UnsyncByteArrayInputStream(stdErrBytes)))[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)-->Line_19 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)-->Line_23 $$ logRecord = logRecords.get(0)[ FD ]
Line_2 $$ public void testLoggingSuccess() throws Exception -->Line_5 $$ byte[] stdErrBytes = stdErrString.getBytes(StringPool.DEFAULT_CHARSET_NAME)[ CD ]
Line_18 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)-->Line_19 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_18 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)-->Line_20 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_15 $$ String stdOutString = "This is standard out message."-->Line_24 $$ Assert.assertEquals(stdOutString, logRecord.getMessage())[ FD ]
Line_2 $$ public void testLoggingSuccess() throws Exception -->Line_4 $$ String stdErrString = "This is standard error message."[ CD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)-->Line_18 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)[ FD ]
Line_20 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_22 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_4 $$ String stdErrString = "This is standard error message."-->Line_5 $$ byte[] stdErrBytes = stdErrString.getBytes(StringPool.DEFAULT_CHARSET_NAME)[ FD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_13 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_22 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_20 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_6 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(LoggingOutputProcessor.class.getName(), Level.OFF)) -->Line_20 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_3 $$ LoggingOutputProcessor loggingOutputProcessor = new LoggingOutputProcessor()-->Line_17 $$ Assert.assertNull(loggingOutputProcessor.processStdOut(new UnsyncByteArrayInputStream(stdOutBytes)))[ FD ]
Line_6 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(LoggingOutputProcessor.class.getName(), Level.OFF)) -->Line_7 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_3 $$ LoggingOutputProcessor loggingOutputProcessor = new LoggingOutputProcessor()-->Line_21 $$ Assert.assertNull(loggingOutputProcessor.processStdOut(new UnsyncByteArrayInputStream(stdOutBytes)))[ FD ]
