Line_6 $$ if (isolated == false) -->Line_7 $$ jars.addAll(bundles.get(0).urls)[ CD ]
Line_3 $$ final List<URL> jars = new ArrayList()-->Line_14 $$ JarHell.checkJarHell(jars.toArray(new URL[jars.size()]))[ FD ]
Line_2 $$ private void jarHellCheck(Path candidate, boolean isolated) throws IOException -->Line_4 $$ jars.addAll(Arrays.asList(JarHell.parseClassPath()))[ CD ]
Line_2 $$ private void jarHellCheck(Path candidate, boolean isolated) throws IOException -->Line_9 $$ Path[] pluginJars = FileSystemUtils.files(candidate, "*.jar")[ CD ]
Line_2 $$ private void jarHellCheck(Path candidate, boolean isolated) throws IOException -->Line_9 $$ Path[] pluginJars = FileSystemUtils.files(candidate, "*.jar")[ FD ]
Line_2 $$ private void jarHellCheck(Path candidate, boolean isolated) throws IOException -->Line_3 $$ final List<URL> jars = new ArrayList()[ CD ]
Line_10 $$ for (Path jar : pluginJars) -->Line_11 $$ jars.add(jar.toUri().toURL())[ FD ]
Line_3 $$ final List<URL> jars = new ArrayList()-->Line_4 $$ jars.addAll(Arrays.asList(JarHell.parseClassPath()))[ FD ]
Line_2 $$ private void jarHellCheck(Path candidate, boolean isolated) throws IOException -->Line_5 $$ List<Bundle> bundles = PluginsService.getPluginBundles(environment.pluginsFile())[ CD ]
Line_5 $$ List<Bundle> bundles = PluginsService.getPluginBundles(environment.pluginsFile())-->Line_7 $$ jars.addAll(bundles.get(0).urls)[ FD ]
Line_3 $$ final List<URL> jars = new ArrayList()-->Line_11 $$ jars.add(jar.toUri().toURL())[ FD ]
Line_2 $$ private void jarHellCheck(Path candidate, boolean isolated) throws IOException -->Line_6 $$ if (isolated == false) [ FD ]
Line_2 $$ private void jarHellCheck(Path candidate, boolean isolated) throws IOException -->Line_6 $$ if (isolated == false) [ CD ]
Line_3 $$ final List<URL> jars = new ArrayList()-->Line_7 $$ jars.addAll(bundles.get(0).urls)[ FD ]
