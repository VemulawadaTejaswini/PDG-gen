Line_2 $$ void pickBestSplits(Host host) -->Line_3 $$ int tasksToPick = Math.min(slotsPerHost, (int) Math.ceil((double) remainingSplits / hosts.size()))[ CD ]
Line_7 $$ int i = 0-->Line_11 $$ if (i < tasksToPick) [ FD ]
Line_7 $$ int i = 0-->Line_12 $$ for (int j = tasksToPick - 1; j > i; --j) [ FD ]
Line_7 $$ int i = 0-->Line_9 $$ i += 1[ FD ]
Line_20 $$ if (best[i] != null) -->Line_25 $$ best[i].locations.clear()[ CD ]
Line_9 $$ i += 1-->Line_12 $$ for (int j = tasksToPick - 1; j > i; --j) [ FD ]
Line_5 $$ for (Split cur : host.splits) -->Line_15 $$ best[i] = cur[ FD ]
Line_2 $$ void pickBestSplits(Host host) -->Line_4 $$ Split[] best = new Split[tasksToPick][ CD ]
Line_8 $$ while (i < tasksToPick && best[i] != null && best[i].locations.size() <= cur.locations.size()) -->Line_9 $$ i += 1[ CD ]
Line_11 $$ if (i < tasksToPick) -->Line_12 $$ for (int j = tasksToPick - 1; j > i; --j) [ CD ]
Line_3 $$ int tasksToPick = Math.min(slotsPerHost, (int) Math.ceil((double) remainingSplits / hosts.size()))-->Line_11 $$ if (i < tasksToPick) [ FD ]
Line_20 $$ if (best[i] != null) -->Line_27 $$ best[i].isAssigned = true[ CD ]
Line_20 $$ if (best[i] != null) -->Line_26 $$ best[i].locations.add(host)[ CD ]
Line_33 $$ if (!cur.isAssigned) -->Line_34 $$ cur.locations.remove(host)[ CD ]
Line_11 $$ if (i < tasksToPick) -->Line_15 $$ best[i] = cur[ CD ]
Line_2 $$ void pickBestSplits(Host host) -->Line_26 $$ best[i].locations.add(host)[ FD ]
Line_9 $$ i += 1-->Line_11 $$ if (i < tasksToPick) [ FD ]
Line_20 $$ if (best[i] != null) -->Line_21 $$ LOG.debug(" best: " + best[i].filename)[ CD ]
Line_12 $$ for (int j = tasksToPick - 1; j > i; --j) -->Line_13 $$ best[j] = best[j - 1][ CD ]
Line_2 $$ void pickBestSplits(Host host) -->Line_34 $$ cur.locations.remove(host)[ FD ]
