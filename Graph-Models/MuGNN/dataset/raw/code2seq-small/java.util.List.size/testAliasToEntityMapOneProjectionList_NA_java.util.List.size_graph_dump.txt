Line_18 $$ Map shermanMap = (Map) resultList.get(1)-->Line_20 $$ assertEquals(1, shermanMap.size())[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_27 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ FD ]
Line_17 $$ Map yogiMap = (Map) resultList.get(0)-->Line_19 $$ assertEquals(1, yogiMap.size())[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_22 $$ assertTrue(shermanMap.get("student") instanceof Student)[ CD ]
Line_2 $$ public void testAliasToEntityMapOneProjectionList() throws Exception -->Line_27 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ CD ]
Line_18 $$ Map shermanMap = (Map) resultList.get(1)-->Line_24 $$ assertEquals(shermanExpected.getStudentNumber(), ((Student) shermanMap.get("student")).getStudentNumber())[ FD ]
Line_2 $$ public void testAliasToEntityMapOneProjectionList() throws Exception -->Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() [ CD ]
Line_15 $$ List resultList = (List) results-->Line_17 $$ Map yogiMap = (Map) resultList.get(0)[ FD ]
Line_8 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_10 $$ return s.createQuery("select e.student as student from Enrolment e order by e.studentNumber").setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_17 $$ Map yogiMap = (Map) resultList.get(0)[ CD ]
Line_8 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_10 $$ return s.createQuery("select e.student as student from Enrolment e order by e.studentNumber").setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_16 $$ assertEquals(2, resultList.size())[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Enrolment.class, "e").setProjection(Projections.property("e.student").as("student")).addOrder(Order.asc("e.studentNumber")).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_15 $$ List resultList = (List) results[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_21 $$ assertTrue(yogiMap.get("student") instanceof Student)[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_23 $$ assertEquals(yogiExpected.getStudentNumber(), ((Student) yogiMap.get("student")).getStudentNumber())[ CD ]
Line_17 $$ Map yogiMap = (Map) resultList.get(0)-->Line_23 $$ assertEquals(yogiExpected.getStudentNumber(), ((Student) yogiMap.get("student")).getStudentNumber())[ FD ]
Line_18 $$ Map shermanMap = (Map) resultList.get(1)-->Line_22 $$ assertTrue(shermanMap.get("student") instanceof Student)[ FD ]
Line_17 $$ Map yogiMap = (Map) resultList.get(0)-->Line_21 $$ assertTrue(yogiMap.get("student") instanceof Student)[ FD ]
Line_15 $$ List resultList = (List) results-->Line_18 $$ Map shermanMap = (Map) resultList.get(1)[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_19 $$ assertEquals(1, yogiMap.size())[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_24 $$ assertEquals(shermanExpected.getStudentNumber(), ((Student) shermanMap.get("student")).getStudentNumber())[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_18 $$ Map shermanMap = (Map) resultList.get(1)[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_20 $$ assertEquals(1, shermanMap.size())[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_10 $$ return s.createQuery("select e.student as student from Enrolment e order by e.studentNumber").setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ FD ]
Line_15 $$ List resultList = (List) results-->Line_16 $$ assertEquals(2, resultList.size())[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Enrolment.class, "e").setProjection(Projections.property("e.student").as("student")).addOrder(Order.asc("e.studentNumber")).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ CD ]
