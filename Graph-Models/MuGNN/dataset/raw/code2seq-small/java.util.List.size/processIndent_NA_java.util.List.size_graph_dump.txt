Line_4 $$ int indent = getNextLineIndent()-->Line_7 $$ indent = lastIndent[ FD ]
Line_2 $$ protected void processIndent(int whiteSpaceStart, IElementType whitespaceTokenType) -->Line_6 $$ if (getBaseTokenType() == getCommentTokenType()) [ CD ]
Line_4 $$ int indent = getNextLineIndent()-->Line_16 $$ if (indent < lastIndent) [ FD ]
Line_26 $$ insertIndex = skipPrecedingCommentsWithIndent(indent, insertIndex)-->Line_28 $$ if (insertIndex != myTokenQueue.size()) [ FD ]
Line_10 $$ if (indent > lastIndent) -->Line_16 $$ if (indent < lastIndent) [ CD ]
Line_10 $$ if (indent > lastIndent) -->Line_11 $$ myIndentStack.push(indent)[ CD ]
Line_13 $$ int insertIndex = skipPrecedingCommentsWithIndent(indent, myTokenQueue.size() - 1)-->Line_31 $$ myTokenQueue.add(insertIndex, new PendingToken(PyTokenTypes.DEDENT, dedentOffset, dedentOffset))[ FD ]
Line_16 $$ if (indent < lastIndent) -->Line_35 $$ myTokenQueue.add(new PendingToken(whitespaceTokenType, whiteSpaceStart, whiteSpaceEnd))[ CD ]
Line_3 $$ int lastIndent = myIndentStack.peek()-->Line_16 $$ if (indent < lastIndent) [ FD ]
Line_10 $$ if (indent > lastIndent) -->Line_12 $$ myTokenQueue.add(new PendingToken(whitespaceTokenType, whiteSpaceStart, whiteSpaceEnd))[ CD ]
Line_26 $$ insertIndex = skipPrecedingCommentsWithIndent(indent, insertIndex)-->Line_24 $$ insertIndex++[ FD ]
Line_17 $$ while (indent < lastIndent) -->Line_18 $$ myIndentStack.pop()[ CD ]
Line_26 $$ insertIndex = skipPrecedingCommentsWithIndent(indent, insertIndex)-->Line_29 $$ dedentOffset = myTokenQueue.get(insertIndex).getStart()[ FD ]
Line_3 $$ int lastIndent = myIndentStack.peek()-->Line_17 $$ while (indent < lastIndent) [ FD ]
Line_10 $$ if (indent > lastIndent) -->Line_15 $$ myTokenQueue.add(insertIndex, new PendingToken(PyTokenTypes.INDENT, indentOffset, indentOffset))[ CD ]
Line_2 $$ protected void processIndent(int whiteSpaceStart, IElementType whitespaceTokenType) -->Line_3 $$ int lastIndent = myIndentStack.peek()[ CD ]
Line_2 $$ protected void processIndent(int whiteSpaceStart, IElementType whitespaceTokenType) -->Line_10 $$ if (indent > lastIndent) [ CD ]
Line_17 $$ while (indent < lastIndent) -->Line_22 $$ if (indent > lastIndent) [ CD ]
Line_22 $$ if (indent > lastIndent) -->Line_24 $$ insertIndex++[ CD ]
Line_10 $$ if (indent > lastIndent) -->Line_14 $$ int indentOffset = insertIndex == myTokenQueue.size() ? whiteSpaceEnd : myTokenQueue.get(insertIndex).getStart()[ CD ]
Line_17 $$ while (indent < lastIndent) -->Line_19 $$ lastIndent = myIndentStack.peek()[ CD ]
Line_17 $$ while (indent < lastIndent) -->Line_21 $$ int dedentOffset = whiteSpaceStart[ CD ]
Line_17 $$ while (indent < lastIndent) -->Line_28 $$ if (insertIndex != myTokenQueue.size()) [ CD ]
Line_13 $$ int insertIndex = skipPrecedingCommentsWithIndent(indent, myTokenQueue.size() - 1)-->Line_15 $$ myTokenQueue.add(insertIndex, new PendingToken(PyTokenTypes.INDENT, indentOffset, indentOffset))[ FD ]
Line_7 $$ indent = lastIndent-->Line_11 $$ myIndentStack.push(indent)[ FD ]
Line_16 $$ if (indent < lastIndent) -->Line_17 $$ while (indent < lastIndent) [ CD ]
Line_7 $$ indent = lastIndent-->Line_17 $$ while (indent < lastIndent) [ FD ]
Line_7 $$ indent = lastIndent-->Line_16 $$ if (indent < lastIndent) [ FD ]
Line_2 $$ protected void processIndent(int whiteSpaceStart, IElementType whitespaceTokenType) -->Line_4 $$ int indent = getNextLineIndent()[ CD ]
Line_20 $$ int insertIndex = myTokenQueue.size()-->Line_31 $$ myTokenQueue.add(insertIndex, new PendingToken(PyTokenTypes.DEDENT, dedentOffset, dedentOffset))[ FD ]
Line_6 $$ if (getBaseTokenType() == getCommentTokenType()) -->Line_7 $$ indent = lastIndent[ CD ]
Line_21 $$ int dedentOffset = whiteSpaceStart-->Line_29 $$ dedentOffset = myTokenQueue.get(insertIndex).getStart()[ FD ]
Line_2 $$ protected void processIndent(int whiteSpaceStart, IElementType whitespaceTokenType) -->Line_9 $$ int whiteSpaceEnd = (getBaseTokenType() == null) ? super.getBufferEnd() : getBaseTokenStart()[ CD ]
Line_20 $$ int insertIndex = myTokenQueue.size()-->Line_26 $$ insertIndex = skipPrecedingCommentsWithIndent(indent, insertIndex)[ FD ]
Line_7 $$ indent = lastIndent-->Line_26 $$ insertIndex = skipPrecedingCommentsWithIndent(indent, insertIndex)[ FD ]
Line_22 $$ if (indent > lastIndent) -->Line_23 $$ myTokenQueue.add(new PendingToken(PyTokenTypes.INCONSISTENT_DEDENT, whiteSpaceStart, whiteSpaceStart))[ CD ]
Line_20 $$ int insertIndex = myTokenQueue.size()-->Line_24 $$ insertIndex++[ FD ]
Line_10 $$ if (indent > lastIndent) -->Line_13 $$ int insertIndex = skipPrecedingCommentsWithIndent(indent, myTokenQueue.size() - 1)[ CD ]
Line_19 $$ lastIndent = myIndentStack.peek()-->Line_17 $$ while (indent < lastIndent) [ FD ]
Line_7 $$ indent = lastIndent-->Line_13 $$ int insertIndex = skipPrecedingCommentsWithIndent(indent, myTokenQueue.size() - 1)[ FD ]
Line_22 $$ if (indent > lastIndent) -->Line_26 $$ insertIndex = skipPrecedingCommentsWithIndent(indent, insertIndex)[ CD ]
Line_3 $$ int lastIndent = myIndentStack.peek()-->Line_10 $$ if (indent > lastIndent) [ FD ]
Line_4 $$ int indent = getNextLineIndent()-->Line_11 $$ myIndentStack.push(indent)[ FD ]
Line_20 $$ int insertIndex = myTokenQueue.size()-->Line_28 $$ if (insertIndex != myTokenQueue.size()) [ FD ]
Line_16 $$ if (indent < lastIndent) -->Line_33 $$ myTokenQueue.add(new PendingToken(whitespaceTokenType, whiteSpaceStart, whiteSpaceEnd))[ CD ]
Line_3 $$ int lastIndent = myIndentStack.peek()-->Line_7 $$ indent = lastIndent[ FD ]
Line_7 $$ indent = lastIndent-->Line_10 $$ if (indent > lastIndent) [ FD ]
Line_13 $$ int insertIndex = skipPrecedingCommentsWithIndent(indent, myTokenQueue.size() - 1)-->Line_28 $$ if (insertIndex != myTokenQueue.size()) [ FD ]
Line_4 $$ int indent = getNextLineIndent()-->Line_26 $$ insertIndex = skipPrecedingCommentsWithIndent(indent, insertIndex)[ FD ]
Line_4 $$ int indent = getNextLineIndent()-->Line_13 $$ int insertIndex = skipPrecedingCommentsWithIndent(indent, myTokenQueue.size() - 1)[ FD ]
Line_28 $$ if (insertIndex != myTokenQueue.size()) -->Line_29 $$ dedentOffset = myTokenQueue.get(insertIndex).getStart()[ CD ]
Line_13 $$ int insertIndex = skipPrecedingCommentsWithIndent(indent, myTokenQueue.size() - 1)-->Line_29 $$ dedentOffset = myTokenQueue.get(insertIndex).getStart()[ FD ]
Line_13 $$ int insertIndex = skipPrecedingCommentsWithIndent(indent, myTokenQueue.size() - 1)-->Line_26 $$ insertIndex = skipPrecedingCommentsWithIndent(indent, insertIndex)[ FD ]
Line_4 $$ int indent = getNextLineIndent()-->Line_17 $$ while (indent < lastIndent) [ FD ]
Line_3 $$ int lastIndent = myIndentStack.peek()-->Line_19 $$ lastIndent = myIndentStack.peek()[ FD ]
Line_19 $$ lastIndent = myIndentStack.peek()-->Line_22 $$ if (indent > lastIndent) [ FD ]
Line_4 $$ int indent = getNextLineIndent()-->Line_22 $$ if (indent > lastIndent) [ FD ]
Line_7 $$ indent = lastIndent-->Line_22 $$ if (indent > lastIndent) [ FD ]
Line_3 $$ int lastIndent = myIndentStack.peek()-->Line_22 $$ if (indent > lastIndent) [ FD ]
Line_13 $$ int insertIndex = skipPrecedingCommentsWithIndent(indent, myTokenQueue.size() - 1)-->Line_24 $$ insertIndex++[ FD ]
Line_17 $$ while (indent < lastIndent) -->Line_20 $$ int insertIndex = myTokenQueue.size()[ CD ]
Line_13 $$ int insertIndex = skipPrecedingCommentsWithIndent(indent, myTokenQueue.size() - 1)-->Line_14 $$ int indentOffset = insertIndex == myTokenQueue.size() ? whiteSpaceEnd : myTokenQueue.get(insertIndex).getStart()[ FD ]
Line_17 $$ while (indent < lastIndent) -->Line_31 $$ myTokenQueue.add(insertIndex, new PendingToken(PyTokenTypes.DEDENT, dedentOffset, dedentOffset))[ CD ]
Line_26 $$ insertIndex = skipPrecedingCommentsWithIndent(indent, insertIndex)-->Line_31 $$ myTokenQueue.add(insertIndex, new PendingToken(PyTokenTypes.DEDENT, dedentOffset, dedentOffset))[ FD ]
Line_4 $$ int indent = getNextLineIndent()-->Line_10 $$ if (indent > lastIndent) [ FD ]
Line_20 $$ int insertIndex = myTokenQueue.size()-->Line_29 $$ dedentOffset = myTokenQueue.get(insertIndex).getStart()[ FD ]
