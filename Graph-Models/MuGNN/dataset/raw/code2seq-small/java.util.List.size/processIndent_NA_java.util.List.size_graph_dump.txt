Line_4 $$ int indent = getNextLineIndent()-->Line_8 $$ indent = lastIndent[ FD ]
Line_11 $$ if (indent > lastIndent) -->Line_15 $$ int indentOffset = insertIndex == myTokenQueue.size() ? whiteSpaceEnd : myTokenQueue.get(insertIndex).getStart()[ CD ]
Line_11 $$ if (indent > lastIndent) -->Line_16 $$ myTokenQueue.add(insertIndex, new PendingToken(PyTokenTypes.INDENT, indentOffset, indentOffset))[ CD ]
Line_4 $$ int indent = getNextLineIndent()-->Line_18 $$ while (indent < lastIndent) [ FD ]
Line_4 $$ int indent = getNextLineIndent()-->Line_11 $$ if (indent > lastIndent) [ FD ]
Line_8 $$ indent = lastIndent-->Line_17 $$ if (indent < lastIndent) [ FD ]
Line_4 $$ int indent = getNextLineIndent()-->Line_12 $$ myIndentStack.push(indent)[ FD ]
Line_14 $$ int insertIndex = skipPrecedingCommentsWithIndent(indent, myTokenQueue.size() - 1)-->Line_30 $$ dedentOffset = myTokenQueue.get(insertIndex).getStart()[ FD ]
Line_27 $$ insertIndex = skipPrecedingCommentsWithIndent(indent, insertIndex)-->Line_25 $$ insertIndex++[ FD ]
Line_11 $$ if (indent > lastIndent) -->Line_14 $$ int insertIndex = skipPrecedingCommentsWithIndent(indent, myTokenQueue.size() - 1)[ CD ]
Line_18 $$ while (indent < lastIndent) -->Line_23 $$ if (indent > lastIndent) [ CD ]
Line_21 $$ int insertIndex = myTokenQueue.size()-->Line_32 $$ myTokenQueue.add(insertIndex, new PendingToken(PyTokenTypes.DEDENT, dedentOffset, dedentOffset))[ FD ]
Line_2 $$ protected void processIndent(int whiteSpaceStart, IElementType whitespaceTokenType) -->Line_4 $$ int indent = getNextLineIndent()[ CD ]
Line_17 $$ if (indent < lastIndent) -->Line_36 $$ myTokenQueue.add(new PendingToken(whitespaceTokenType, whiteSpaceStart, whiteSpaceEnd))[ CD ]
Line_21 $$ int insertIndex = myTokenQueue.size()-->Line_30 $$ dedentOffset = myTokenQueue.get(insertIndex).getStart()[ FD ]
Line_8 $$ indent = lastIndent-->Line_18 $$ while (indent < lastIndent) [ FD ]
Line_8 $$ indent = lastIndent-->Line_11 $$ if (indent > lastIndent) [ FD ]
Line_11 $$ if (indent > lastIndent) -->Line_17 $$ if (indent < lastIndent) [ CD ]
Line_8 $$ indent = lastIndent-->Line_27 $$ insertIndex = skipPrecedingCommentsWithIndent(indent, insertIndex)[ FD ]
Line_11 $$ if (indent > lastIndent) -->Line_12 $$ myIndentStack.push(indent)[ CD ]
Line_18 $$ while (indent < lastIndent) -->Line_20 $$ lastIndent = myIndentStack.peek()[ CD ]
Line_14 $$ int insertIndex = skipPrecedingCommentsWithIndent(indent, myTokenQueue.size() - 1)-->Line_16 $$ myTokenQueue.add(insertIndex, new PendingToken(PyTokenTypes.INDENT, indentOffset, indentOffset))[ FD ]
Line_14 $$ int insertIndex = skipPrecedingCommentsWithIndent(indent, myTokenQueue.size() - 1)-->Line_25 $$ insertIndex++[ FD ]
Line_18 $$ while (indent < lastIndent) -->Line_19 $$ myIndentStack.pop()[ CD ]
Line_2 $$ protected void processIndent(int whiteSpaceStart, IElementType whitespaceTokenType) -->Line_11 $$ if (indent > lastIndent) [ CD ]
Line_14 $$ int insertIndex = skipPrecedingCommentsWithIndent(indent, myTokenQueue.size() - 1)-->Line_29 $$ if (insertIndex != myTokenQueue.size()) [ FD ]
Line_2 $$ protected void processIndent(int whiteSpaceStart, IElementType whitespaceTokenType) -->Line_3 $$ int lastIndent = myIndentStack.peek()[ CD ]
Line_22 $$ int dedentOffset = whiteSpaceStart-->Line_30 $$ dedentOffset = myTokenQueue.get(insertIndex).getStart()[ FD ]
Line_18 $$ while (indent < lastIndent) -->Line_29 $$ if (insertIndex != myTokenQueue.size()) [ CD ]
Line_8 $$ indent = lastIndent-->Line_23 $$ if (indent > lastIndent) [ FD ]
Line_21 $$ int insertIndex = myTokenQueue.size()-->Line_27 $$ insertIndex = skipPrecedingCommentsWithIndent(indent, insertIndex)[ FD ]
Line_20 $$ lastIndent = myIndentStack.peek()-->Line_23 $$ if (indent > lastIndent) [ FD ]
Line_20 $$ lastIndent = myIndentStack.peek()-->Line_18 $$ while (indent < lastIndent) [ FD ]
Line_27 $$ insertIndex = skipPrecedingCommentsWithIndent(indent, insertIndex)-->Line_32 $$ myTokenQueue.add(insertIndex, new PendingToken(PyTokenTypes.DEDENT, dedentOffset, dedentOffset))[ FD ]
Line_27 $$ insertIndex = skipPrecedingCommentsWithIndent(indent, insertIndex)-->Line_30 $$ dedentOffset = myTokenQueue.get(insertIndex).getStart()[ FD ]
Line_8 $$ indent = lastIndent-->Line_12 $$ myIndentStack.push(indent)[ FD ]
Line_3 $$ int lastIndent = myIndentStack.peek()-->Line_23 $$ if (indent > lastIndent) [ FD ]
Line_4 $$ int indent = getNextLineIndent()-->Line_23 $$ if (indent > lastIndent) [ FD ]
Line_21 $$ int insertIndex = myTokenQueue.size()-->Line_25 $$ insertIndex++[ FD ]
Line_11 $$ if (indent > lastIndent) -->Line_13 $$ myTokenQueue.add(new PendingToken(whitespaceTokenType, whiteSpaceStart, whiteSpaceEnd))[ CD ]
Line_23 $$ if (indent > lastIndent) -->Line_27 $$ insertIndex = skipPrecedingCommentsWithIndent(indent, insertIndex)[ CD ]
Line_3 $$ int lastIndent = myIndentStack.peek()-->Line_11 $$ if (indent > lastIndent) [ FD ]
Line_4 $$ int indent = getNextLineIndent()-->Line_27 $$ insertIndex = skipPrecedingCommentsWithIndent(indent, insertIndex)[ FD ]
Line_14 $$ int insertIndex = skipPrecedingCommentsWithIndent(indent, myTokenQueue.size() - 1)-->Line_32 $$ myTokenQueue.add(insertIndex, new PendingToken(PyTokenTypes.DEDENT, dedentOffset, dedentOffset))[ FD ]
Line_23 $$ if (indent > lastIndent) -->Line_24 $$ myTokenQueue.add(new PendingToken(PyTokenTypes.INCONSISTENT_DEDENT, whiteSpaceStart, whiteSpaceStart))[ CD ]
Line_23 $$ if (indent > lastIndent) -->Line_25 $$ insertIndex++[ CD ]
Line_18 $$ while (indent < lastIndent) -->Line_32 $$ myTokenQueue.add(insertIndex, new PendingToken(PyTokenTypes.DEDENT, dedentOffset, dedentOffset))[ CD ]
Line_17 $$ if (indent < lastIndent) -->Line_34 $$ myTokenQueue.add(new PendingToken(whitespaceTokenType, whiteSpaceStart, whiteSpaceEnd))[ CD ]
Line_18 $$ while (indent < lastIndent) -->Line_21 $$ int insertIndex = myTokenQueue.size()[ CD ]
Line_18 $$ while (indent < lastIndent) -->Line_22 $$ int dedentOffset = whiteSpaceStart[ CD ]
Line_4 $$ int indent = getNextLineIndent()-->Line_14 $$ int insertIndex = skipPrecedingCommentsWithIndent(indent, myTokenQueue.size() - 1)[ FD ]
Line_4 $$ int indent = getNextLineIndent()-->Line_17 $$ if (indent < lastIndent) [ FD ]
Line_3 $$ int lastIndent = myIndentStack.peek()-->Line_20 $$ lastIndent = myIndentStack.peek()[ FD ]
Line_14 $$ int insertIndex = skipPrecedingCommentsWithIndent(indent, myTokenQueue.size() - 1)-->Line_15 $$ int indentOffset = insertIndex == myTokenQueue.size() ? whiteSpaceEnd : myTokenQueue.get(insertIndex).getStart()[ FD ]
Line_29 $$ if (insertIndex != myTokenQueue.size()) -->Line_30 $$ dedentOffset = myTokenQueue.get(insertIndex).getStart()[ CD ]
Line_17 $$ if (indent < lastIndent) -->Line_18 $$ while (indent < lastIndent) [ CD ]
Line_3 $$ int lastIndent = myIndentStack.peek()-->Line_17 $$ if (indent < lastIndent) [ FD ]
Line_14 $$ int insertIndex = skipPrecedingCommentsWithIndent(indent, myTokenQueue.size() - 1)-->Line_27 $$ insertIndex = skipPrecedingCommentsWithIndent(indent, insertIndex)[ FD ]
Line_2 $$ protected void processIndent(int whiteSpaceStart, IElementType whitespaceTokenType) -->Line_10 $$ int whiteSpaceEnd = (getBaseTokenType() == null) ? super.getBufferEnd() : getBaseTokenStart()[ CD ]
Line_21 $$ int insertIndex = myTokenQueue.size()-->Line_29 $$ if (insertIndex != myTokenQueue.size()) [ FD ]
Line_3 $$ int lastIndent = myIndentStack.peek()-->Line_8 $$ indent = lastIndent[ FD ]
Line_3 $$ int lastIndent = myIndentStack.peek()-->Line_18 $$ while (indent < lastIndent) [ FD ]
Line_8 $$ indent = lastIndent-->Line_14 $$ int insertIndex = skipPrecedingCommentsWithIndent(indent, myTokenQueue.size() - 1)[ FD ]
Line_27 $$ insertIndex = skipPrecedingCommentsWithIndent(indent, insertIndex)-->Line_29 $$ if (insertIndex != myTokenQueue.size()) [ FD ]
