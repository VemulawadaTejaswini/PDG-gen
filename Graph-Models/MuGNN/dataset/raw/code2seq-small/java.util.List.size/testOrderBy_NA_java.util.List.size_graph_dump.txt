Line_3 $$ Session s = openSession()-->Line_25 $$ s.save(oneB)[ FD ]
Line_20 $$ s = openSession()-->Line_34 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_41 $$ assertEquals("'b' isn't second element", "b", ((One) results.get(1)).getValue())[ CD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_43 $$ s.close()[ CD ]
Line_44 $$ s = openSession()-->Line_52 $$ s.close()[ FD ]
Line_20 $$ s = openSession()-->Line_55 $$ oneA = (One) s.load(One.class, oneA.getKey())[ FD ]
Line_20 $$ s = openSession()-->Line_35 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_51 $$ s.getTransaction().commit()[ FD ]
Line_44 $$ s = openSession()-->Line_46 $$ results = s.createQuery("SELECT many.one FROM " + Many.class.getName() + " many ORDER BY many.one.value ASC, many.one.id").list()[ FD ]
Line_38 $$ List results = s.createQuery("SELECT one FROM " + One.class.getName() + " one ORDER BY one.value ASC").list()-->Line_46 $$ results = s.createQuery("SELECT many.one FROM " + Many.class.getName() + " many ORDER BY many.one.value ASC, many.one.id").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_60 $$ s.delete(oneA)[ FD ]
Line_53 $$ s = openSession()-->Line_60 $$ s.delete(oneA)[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_28 $$ Many manyA = new Many()[ CD ]
Line_44 $$ s = openSession()-->Line_56 $$ manyA = (Many) s.load(Many.class, manyA.getKey())[ FD ]
Line_24 $$ One oneB = new One()-->Line_25 $$ s.save(oneB)[ FD ]
Line_24 $$ One oneB = new One()-->Line_62 $$ s.delete(oneB)[ FD ]
Line_20 $$ s = openSession()-->Line_57 $$ oneB = (One) s.load(One.class, oneB.getKey())[ FD ]
Line_58 $$ manyB = (Many) s.load(Many.class, manyB.getKey())-->Line_61 $$ s.delete(manyB)[ FD ]
Line_22 $$ Many manyB = new Many()-->Line_27 $$ manyB.setOne(oneB)[ FD ]
Line_20 $$ s = openSession()-->Line_29 $$ s.save(manyA)[ FD ]
Line_20 $$ s = openSession()-->Line_54 $$ s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_63 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_45 $$ s.beginTransaction()[ CD ]
Line_44 $$ s = openSession()-->Line_63 $$ s.getTransaction().commit()[ FD ]
Line_36 $$ s = openSession()-->Line_42 $$ s.getTransaction().commit()[ FD ]
Line_28 $$ Many manyA = new Many()-->Line_29 $$ s.save(manyA)[ FD ]
Line_38 $$ List results = s.createQuery("SELECT one FROM " + One.class.getName() + " one ORDER BY one.value ASC").list()-->Line_47 $$ assertEquals(2, results.size())[ FD ]
Line_3 $$ Session s = openSession()-->Line_52 $$ s.close()[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_5 $$ Foo foo = new Foo()[ CD ]
Line_53 $$ s = openSession()-->Line_55 $$ oneA = (One) s.load(One.class, oneA.getKey())[ FD ]
Line_44 $$ s = openSession()-->Line_55 $$ oneA = (One) s.load(One.class, oneA.getKey())[ FD ]
Line_36 $$ s = openSession()-->Line_60 $$ s.delete(oneA)[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_6 $$ s.save(foo)[ CD ]
Line_3 $$ Session s = openSession()-->Line_38 $$ List results = s.createQuery("SELECT one FROM " + One.class.getName() + " one ORDER BY one.value ASC").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_55 $$ oneA = (One) s.load(One.class, oneA.getKey())[ FD ]
Line_20 $$ s = openSession()-->Line_45 $$ s.beginTransaction()[ FD ]
Line_20 $$ s = openSession()-->Line_58 $$ manyB = (Many) s.load(Many.class, manyB.getKey())[ FD ]
Line_22 $$ Many manyB = new Many()-->Line_61 $$ s.delete(manyB)[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_21 $$ s.beginTransaction()[ CD ]
Line_20 $$ s = openSession()-->Line_38 $$ List results = s.createQuery("SELECT one FROM " + One.class.getName() + " one ORDER BY one.value ASC").list()[ FD ]
Line_7 $$ List list = s.createQuery("select foo from Foo foo, Fee fee where foo.dependent = fee order by foo.string desc, foo.component.count asc, fee.id").list()-->Line_13 $$ assertTrue("order by", list.size() == 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_20 $$ s = openSession()[ FD ]
Line_46 $$ results = s.createQuery("SELECT many.one FROM " + Many.class.getName() + " many ORDER BY many.one.value ASC, many.one.id").list()-->Line_48 $$ assertEquals(2, results.size())[ FD ]
Line_44 $$ s = openSession()-->Line_62 $$ s.delete(oneB)[ FD ]
Line_20 $$ s = openSession()-->Line_56 $$ manyA = (Many) s.load(Many.class, manyA.getKey())[ FD ]
Line_24 $$ One oneB = new One()-->Line_27 $$ manyB.setOne(oneB)[ FD ]
Line_44 $$ s = openSession()-->Line_51 $$ s.getTransaction().commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_44 $$ s = openSession()[ FD ]
Line_36 $$ s = openSession()-->Line_45 $$ s.beginTransaction()[ FD ]
Line_55 $$ oneA = (One) s.load(One.class, oneA.getKey())-->Line_60 $$ s.delete(oneA)[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_24 $$ One oneB = new One()[ CD ]
Line_56 $$ manyA = (Many) s.load(Many.class, manyA.getKey())-->Line_59 $$ s.delete(manyA)[ FD ]
Line_20 $$ s = openSession()-->Line_63 $$ s.getTransaction().commit()[ FD ]
Line_20 $$ s = openSession()-->Line_25 $$ s.save(oneB)[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_51 $$ s.getTransaction().commit()[ CD ]
Line_36 $$ s = openSession()-->Line_63 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_60 $$ s.delete(oneA)[ CD ]
Line_36 $$ s = openSession()-->Line_62 $$ s.delete(oneB)[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_3 $$ Session s = openSession()[ CD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_61 $$ s.delete(manyB)[ CD ]
Line_20 $$ s = openSession()-->Line_53 $$ s = openSession()[ FD ]
Line_36 $$ s = openSession()-->Line_43 $$ s.close()[ FD ]
Line_38 $$ List results = s.createQuery("SELECT one FROM " + One.class.getName() + " one ORDER BY one.value ASC").list()-->Line_49 $$ assertEquals("'a' isn't first element", "a", ((One) results.get(0)).getValue())[ FD ]
Line_53 $$ s = openSession()-->Line_63 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_17 $$ s.delete(foo2)[ CD ]
Line_9 $$ Foo foo2 = new Foo()-->Line_11 $$ foo.setFoo(foo2)[ FD ]
Line_20 $$ s = openSession()-->Line_36 $$ s = openSession()[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_38 $$ List results = s.createQuery("SELECT one FROM " + One.class.getName() + " one ORDER BY one.value ASC").list()[ CD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_29 $$ s.save(manyA)[ CD ]
Line_3 $$ Session s = openSession()-->Line_45 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_34 $$ s.getTransaction().commit()[ CD ]
Line_53 $$ s = openSession()-->Line_59 $$ s.delete(manyA)[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_56 $$ manyA = (Many) s.load(Many.class, manyA.getKey())[ CD ]
Line_5 $$ Foo foo = new Foo()-->Line_16 $$ s.delete(foo)[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_23 $$ s.save(manyB)[ CD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_35 $$ s.close()[ CD ]
Line_20 $$ s = openSession()-->Line_59 $$ s.delete(manyA)[ FD ]
Line_7 $$ List list = s.createQuery("select foo from Foo foo, Fee fee where foo.dependent = fee order by foo.string desc, foo.component.count asc, fee.id").list()-->Line_14 $$ list = s.createQuery("select foo from Foo foo order by foo.dependent.id, foo.dependent.fi").list()[ FD ]
Line_20 $$ s = openSession()-->Line_46 $$ results = s.createQuery("SELECT many.one FROM " + Many.class.getName() + " many ORDER BY many.one.value ASC, many.one.id").list()[ FD ]
Line_12 $$ list = s.createQuery("select foo.foo, foo.dependent from Foo foo order by foo.foo.string desc, foo.component.count asc, foo.dependent.id").list()-->Line_13 $$ assertTrue("order by", list.size() == 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_62 $$ s.delete(oneB)[ FD ]
Line_44 $$ s = openSession()-->Line_54 $$ s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_31 $$ s.save(oneA)[ FD ]
Line_20 $$ s = openSession()-->Line_21 $$ s.beginTransaction()[ FD ]
Line_20 $$ s = openSession()-->Line_62 $$ s.delete(oneB)[ FD ]
Line_3 $$ Session s = openSession()-->Line_35 $$ s.close()[ FD ]
Line_44 $$ s = openSession()-->Line_53 $$ s = openSession()[ FD ]
Line_3 $$ Session s = openSession()-->Line_29 $$ s.save(manyA)[ FD ]
Line_38 $$ List results = s.createQuery("SELECT one FROM " + One.class.getName() + " one ORDER BY one.value ASC").list()-->Line_48 $$ assertEquals(2, results.size())[ FD ]
Line_24 $$ One oneB = new One()-->Line_26 $$ oneB.setValue("b")[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_63 $$ s.getTransaction().commit()[ CD ]
Line_7 $$ List list = s.createQuery("select foo from Foo foo, Fee fee where foo.dependent = fee order by foo.string desc, foo.component.count asc, fee.id").list()-->Line_8 $$ assertTrue("order by", list.size() == 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_37 $$ s.beginTransaction()[ FD ]
Line_36 $$ s = openSession()-->Line_44 $$ s = openSession()[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_49 $$ assertEquals("'a' isn't first element", "a", ((One) results.get(0)).getValue())[ CD ]
Line_3 $$ Session s = openSession()-->Line_23 $$ s.save(manyB)[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_32 $$ oneA.setValue("a")[ CD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_48 $$ assertEquals(2, results.size())[ CD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_37 $$ s.beginTransaction()[ CD ]
Line_3 $$ Session s = openSession()-->Line_7 $$ List list = s.createQuery("select foo from Foo foo, Fee fee where foo.dependent = fee order by foo.string desc, foo.component.count asc, fee.id").list()[ FD ]
Line_7 $$ List list = s.createQuery("select foo from Foo foo, Fee fee where foo.dependent = fee order by foo.string desc, foo.component.count asc, fee.id").list()-->Line_15 $$ assertTrue("order by", list.size() == 2)[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_18 $$ s.getTransaction().commit()[ CD ]
Line_20 $$ s = openSession()-->Line_44 $$ s = openSession()[ FD ]
Line_20 $$ s = openSession()-->Line_64 $$ s.close()[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_19 $$ s.close()[ CD ]
Line_3 $$ Session s = openSession()-->Line_61 $$ s.delete(manyB)[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_4 $$ s.beginTransaction()[ CD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_33 $$ manyA.setOne(oneA)[ CD ]
Line_20 $$ s = openSession()-->Line_42 $$ s.getTransaction().commit()[ FD ]
Line_46 $$ results = s.createQuery("SELECT many.one FROM " + Many.class.getName() + " many ORDER BY many.one.value ASC, many.one.id").list()-->Line_49 $$ assertEquals("'a' isn't first element", "a", ((One) results.get(0)).getValue())[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_22 $$ Many manyB = new Many()[ CD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_12 $$ list = s.createQuery("select foo.foo, foo.dependent from Foo foo order by foo.foo.string desc, foo.component.count asc, foo.dependent.id").list()[ CD ]
Line_9 $$ Foo foo2 = new Foo()-->Line_10 $$ s.save(foo2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_42 $$ s.getTransaction().commit()[ FD ]
Line_36 $$ s = openSession()-->Line_53 $$ s = openSession()[ FD ]
Line_53 $$ s = openSession()-->Line_57 $$ oneB = (One) s.load(One.class, oneB.getKey())[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_20 $$ s = openSession()[ CD ]
Line_44 $$ s = openSession()-->Line_45 $$ s.beginTransaction()[ FD ]
Line_36 $$ s = openSession()-->Line_56 $$ manyA = (Many) s.load(Many.class, manyA.getKey())[ FD ]
Line_28 $$ Many manyA = new Many()-->Line_33 $$ manyA.setOne(oneA)[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_8 $$ assertTrue("order by", list.size() == 1)[ CD ]
Line_30 $$ One oneA = new One()-->Line_32 $$ oneA.setValue("a")[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_40 $$ assertEquals("'a' isn't first element", "a", ((One) results.get(0)).getValue())[ CD ]
Line_53 $$ s = openSession()-->Line_64 $$ s.close()[ FD ]
Line_5 $$ Foo foo = new Foo()-->Line_6 $$ s.save(foo)[ FD ]
Line_44 $$ s = openSession()-->Line_59 $$ s.delete(manyA)[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_57 $$ oneB = (One) s.load(One.class, oneB.getKey())[ CD ]
Line_5 $$ Foo foo = new Foo()-->Line_11 $$ foo.setFoo(foo2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_14 $$ list = s.createQuery("select foo from Foo foo order by foo.dependent.id, foo.dependent.fi").list()[ FD ]
Line_28 $$ Many manyA = new Many()-->Line_56 $$ manyA = (Many) s.load(Many.class, manyA.getKey())[ FD ]
Line_46 $$ results = s.createQuery("SELECT many.one FROM " + Many.class.getName() + " many ORDER BY many.one.value ASC, many.one.id").list()-->Line_50 $$ assertEquals("'b' isn't second element", "b", ((One) results.get(1)).getValue())[ FD ]
Line_38 $$ List results = s.createQuery("SELECT one FROM " + One.class.getName() + " one ORDER BY one.value ASC").list()-->Line_39 $$ assertEquals(2, results.size())[ FD ]
Line_20 $$ s = openSession()-->Line_60 $$ s.delete(oneA)[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_31 $$ s.save(oneA)[ CD ]
Line_36 $$ s = openSession()-->Line_46 $$ results = s.createQuery("SELECT many.one FROM " + Many.class.getName() + " many ORDER BY many.one.value ASC, many.one.id").list()[ FD ]
Line_53 $$ s = openSession()-->Line_61 $$ s.delete(manyB)[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_16 $$ s.delete(foo)[ CD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_25 $$ s.save(oneB)[ CD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_46 $$ results = s.createQuery("SELECT many.one FROM " + Many.class.getName() + " many ORDER BY many.one.value ASC, many.one.id").list()[ CD ]
Line_3 $$ Session s = openSession()-->Line_19 $$ s.close()[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_39 $$ assertEquals(2, results.size())[ CD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_42 $$ s.getTransaction().commit()[ CD ]
Line_20 $$ s = openSession()-->Line_51 $$ s.getTransaction().commit()[ FD ]
Line_22 $$ Many manyB = new Many()-->Line_58 $$ manyB = (Many) s.load(Many.class, manyB.getKey())[ FD ]
Line_30 $$ One oneA = new One()-->Line_31 $$ s.save(oneA)[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_59 $$ s.delete(manyA)[ CD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_27 $$ manyB.setOne(oneB)[ CD ]
Line_3 $$ Session s = openSession()-->Line_10 $$ s.save(foo2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ s.beginTransaction()[ FD ]
Line_9 $$ Foo foo2 = new Foo()-->Line_17 $$ s.delete(foo2)[ FD ]
Line_36 $$ s = openSession()-->Line_57 $$ oneB = (One) s.load(One.class, oneB.getKey())[ FD ]
Line_3 $$ Session s = openSession()-->Line_17 $$ s.delete(foo2)[ FD ]
Line_30 $$ One oneA = new One()-->Line_60 $$ s.delete(oneA)[ FD ]
Line_3 $$ Session s = openSession()-->Line_36 $$ s = openSession()[ FD ]
Line_30 $$ One oneA = new One()-->Line_33 $$ manyA.setOne(oneA)[ FD ]
Line_3 $$ Session s = openSession()-->Line_6 $$ s.save(foo)[ FD ]
Line_38 $$ List results = s.createQuery("SELECT one FROM " + One.class.getName() + " one ORDER BY one.value ASC").list()-->Line_41 $$ assertEquals("'b' isn't second element", "b", ((One) results.get(1)).getValue())[ FD ]
Line_20 $$ s = openSession()-->Line_37 $$ s.beginTransaction()[ FD ]
Line_38 $$ List results = s.createQuery("SELECT one FROM " + One.class.getName() + " one ORDER BY one.value ASC").list()-->Line_40 $$ assertEquals("'a' isn't first element", "a", ((One) results.get(0)).getValue())[ FD ]
Line_3 $$ Session s = openSession()-->Line_59 $$ s.delete(manyA)[ FD ]
Line_36 $$ s = openSession()-->Line_64 $$ s.close()[ FD ]
Line_12 $$ list = s.createQuery("select foo.foo, foo.dependent from Foo foo order by foo.foo.string desc, foo.component.count asc, foo.dependent.id").list()-->Line_14 $$ list = s.createQuery("select foo from Foo foo order by foo.dependent.id, foo.dependent.fi").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_21 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_53 $$ s = openSession()[ CD ]
Line_46 $$ results = s.createQuery("SELECT many.one FROM " + Many.class.getName() + " many ORDER BY many.one.value ASC, many.one.id").list()-->Line_47 $$ assertEquals(2, results.size())[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_55 $$ oneA = (One) s.load(One.class, oneA.getKey())[ CD ]
Line_3 $$ Session s = openSession()-->Line_56 $$ manyA = (Many) s.load(Many.class, manyA.getKey())[ FD ]
Line_44 $$ s = openSession()-->Line_61 $$ s.delete(manyB)[ FD ]
Line_38 $$ List results = s.createQuery("SELECT one FROM " + One.class.getName() + " one ORDER BY one.value ASC").list()-->Line_50 $$ assertEquals("'b' isn't second element", "b", ((One) results.get(1)).getValue())[ FD ]
Line_3 $$ Session s = openSession()-->Line_12 $$ list = s.createQuery("select foo.foo, foo.dependent from Foo foo order by foo.foo.string desc, foo.component.count asc, foo.dependent.id").list()[ FD ]
Line_36 $$ s = openSession()-->Line_51 $$ s.getTransaction().commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_18 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_9 $$ Foo foo2 = new Foo()[ CD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_62 $$ s.delete(oneB)[ CD ]
Line_3 $$ Session s = openSession()-->Line_16 $$ s.delete(foo)[ FD ]
Line_3 $$ Session s = openSession()-->Line_46 $$ results = s.createQuery("SELECT many.one FROM " + Many.class.getName() + " many ORDER BY many.one.value ASC, many.one.id").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_43 $$ s.close()[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_10 $$ s.save(foo2)[ CD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_44 $$ s = openSession()[ CD ]
Line_30 $$ One oneA = new One()-->Line_55 $$ oneA = (One) s.load(One.class, oneA.getKey())[ FD ]
Line_3 $$ Session s = openSession()-->Line_53 $$ s = openSession()[ FD ]
Line_44 $$ s = openSession()-->Line_57 $$ oneB = (One) s.load(One.class, oneB.getKey())[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_36 $$ s = openSession()[ CD ]
Line_14 $$ list = s.createQuery("select foo from Foo foo order by foo.dependent.id, foo.dependent.fi").list()-->Line_15 $$ assertTrue("order by", list.size() == 2)[ FD ]
Line_44 $$ s = openSession()-->Line_58 $$ manyB = (Many) s.load(Many.class, manyB.getKey())[ FD ]
Line_20 $$ s = openSession()-->Line_31 $$ s.save(oneA)[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_58 $$ manyB = (Many) s.load(Many.class, manyB.getKey())[ CD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_50 $$ assertEquals("'b' isn't second element", "b", ((One) results.get(1)).getValue())[ CD ]
Line_36 $$ s = openSession()-->Line_52 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_58 $$ manyB = (Many) s.load(Many.class, manyB.getKey())[ FD ]
Line_20 $$ s = openSession()-->Line_23 $$ s.save(manyB)[ FD ]
Line_44 $$ s = openSession()-->Line_60 $$ s.delete(oneA)[ FD ]
Line_3 $$ Session s = openSession()-->Line_57 $$ oneB = (One) s.load(One.class, oneB.getKey())[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_7 $$ List list = s.createQuery("select foo from Foo foo, Fee fee where foo.dependent = fee order by foo.string desc, foo.component.count asc, fee.id").list()[ CD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_11 $$ foo.setFoo(foo2)[ CD ]
Line_53 $$ s = openSession()-->Line_58 $$ manyB = (Many) s.load(Many.class, manyB.getKey())[ FD ]
Line_36 $$ s = openSession()-->Line_37 $$ s.beginTransaction()[ FD ]
Line_53 $$ s = openSession()-->Line_56 $$ manyA = (Many) s.load(Many.class, manyA.getKey())[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_14 $$ list = s.createQuery("select foo from Foo foo order by foo.dependent.id, foo.dependent.fi").list()[ CD ]
Line_20 $$ s = openSession()-->Line_43 $$ s.close()[ FD ]
Line_53 $$ s = openSession()-->Line_62 $$ s.delete(oneB)[ FD ]
Line_20 $$ s = openSession()-->Line_61 $$ s.delete(manyB)[ FD ]
Line_7 $$ List list = s.createQuery("select foo from Foo foo, Fee fee where foo.dependent = fee order by foo.string desc, foo.component.count asc, fee.id").list()-->Line_12 $$ list = s.createQuery("select foo.foo, foo.dependent from Foo foo order by foo.foo.string desc, foo.component.count asc, foo.dependent.id").list()[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_30 $$ One oneA = new One()[ CD ]
Line_3 $$ Session s = openSession()-->Line_34 $$ s.getTransaction().commit()[ FD ]
Line_22 $$ Many manyB = new Many()-->Line_23 $$ s.save(manyB)[ FD ]
Line_36 $$ s = openSession()-->Line_38 $$ List results = s.createQuery("SELECT one FROM " + One.class.getName() + " one ORDER BY one.value ASC").list()[ FD ]
Line_28 $$ Many manyA = new Many()-->Line_59 $$ s.delete(manyA)[ FD ]
Line_53 $$ s = openSession()-->Line_54 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_54 $$ s.beginTransaction()[ CD ]
Line_12 $$ list = s.createQuery("select foo.foo, foo.dependent from Foo foo order by foo.foo.string desc, foo.component.count asc, foo.dependent.id").list()-->Line_15 $$ assertTrue("order by", list.size() == 2)[ FD ]
Line_44 $$ s = openSession()-->Line_64 $$ s.close()[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_13 $$ assertTrue("order by", list.size() == 1)[ CD ]
Line_36 $$ s = openSession()-->Line_55 $$ oneA = (One) s.load(One.class, oneA.getKey())[ FD ]
Line_36 $$ s = openSession()-->Line_58 $$ manyB = (Many) s.load(Many.class, manyB.getKey())[ FD ]
Line_36 $$ s = openSession()-->Line_54 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_47 $$ assertEquals(2, results.size())[ CD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_26 $$ oneB.setValue("b")[ CD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_52 $$ s.close()[ CD ]
Line_3 $$ Session s = openSession()-->Line_54 $$ s.beginTransaction()[ FD ]
Line_24 $$ One oneB = new One()-->Line_57 $$ oneB = (One) s.load(One.class, oneB.getKey())[ FD ]
Line_36 $$ s = openSession()-->Line_61 $$ s.delete(manyB)[ FD ]
Line_3 $$ Session s = openSession()-->Line_64 $$ s.close()[ FD ]
Line_36 $$ s = openSession()-->Line_59 $$ s.delete(manyA)[ FD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_64 $$ s.close()[ CD ]
Line_2 $$ public void testOrderBy() throws Exception -->Line_15 $$ assertTrue("order by", list.size() == 2)[ CD ]
Line_20 $$ s = openSession()-->Line_52 $$ s.close()[ FD ]
Line_57 $$ oneB = (One) s.load(One.class, oneB.getKey())-->Line_62 $$ s.delete(oneB)[ FD ]
