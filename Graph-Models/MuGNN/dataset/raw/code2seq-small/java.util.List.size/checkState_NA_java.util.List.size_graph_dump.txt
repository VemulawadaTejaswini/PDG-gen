Line_3 $$ Deque<StringBuilder> actualBuffers = myBuffer.getDeferredOutput()-->Line_4 $$ assertEquals(expectedBuffers.size(), actualBuffers.size())[ FD ]
Line_2 $$ private void checkState(@NotNull List<String> expectedBuffers, @NotNull TokenInfo... expectedTokens) -->Line_21 $$ assertEquals(contentTypes, myBuffer.getDeferredTokenTypes())[ CD ]
Line_2 $$ private void checkState(@NotNull List<String> expectedBuffers, @NotNull TokenInfo... expectedTokens) -->Line_3 $$ Deque<StringBuilder> actualBuffers = myBuffer.getDeferredOutput()[ CD ]
Line_2 $$ private void checkState(@NotNull List<String> expectedBuffers, @NotNull TokenInfo... expectedTokens) -->Line_13 $$ Set<ConsoleViewContentType> contentTypes = new HashSet<ConsoleViewContentType>()[ CD ]
Line_13 $$ Set<ConsoleViewContentType> contentTypes = new HashSet<ConsoleViewContentType>()-->Line_21 $$ assertEquals(contentTypes, myBuffer.getDeferredTokenTypes())[ FD ]
Line_2 $$ private void checkState(@NotNull List<String> expectedBuffers, @NotNull TokenInfo... expectedTokens) -->Line_4 $$ assertEquals(expectedBuffers.size(), actualBuffers.size())[ FD ]
Line_10 $$ List<TokenInfo> actualTokens = myBuffer.getDeferredTokens()-->Line_11 $$ assertEquals(expectedTokens.length, actualTokens.size())[ FD ]
Line_12 $$ i = 0-->Line_15 $$ TokenInfo expected = expectedTokens[i++][ FD ]
Line_6 $$ for (StringBuilder actual : actualBuffers) -->Line_8 $$ assertEquals(expected, actual.toString())[ FD ]
Line_5 $$ int i = 0-->Line_15 $$ TokenInfo expected = expectedTokens[i++][ FD ]
Line_2 $$ private void checkState(@NotNull List<String> expectedBuffers, @NotNull TokenInfo... expectedTokens) -->Line_10 $$ List<TokenInfo> actualTokens = myBuffer.getDeferredTokens()[ CD ]
Line_2 $$ private void checkState(@NotNull List<String> expectedBuffers, @NotNull TokenInfo... expectedTokens) -->Line_5 $$ int i = 0[ CD ]
Line_2 $$ private void checkState(@NotNull List<String> expectedBuffers, @NotNull TokenInfo... expectedTokens) -->Line_4 $$ assertEquals(expectedBuffers.size(), actualBuffers.size())[ CD ]
Line_2 $$ private void checkState(@NotNull List<String> expectedBuffers, @NotNull TokenInfo... expectedTokens) -->Line_7 $$ String expected = expectedBuffers.get(i++)[ FD ]
Line_7 $$ String expected = expectedBuffers.get(i++)-->Line_8 $$ assertEquals(expected, actual.toString())[ FD ]
Line_2 $$ private void checkState(@NotNull List<String> expectedBuffers, @NotNull TokenInfo... expectedTokens) -->Line_11 $$ assertEquals(expectedTokens.length, actualTokens.size())[ CD ]
Line_5 $$ int i = 0-->Line_12 $$ i = 0[ FD ]
Line_13 $$ Set<ConsoleViewContentType> contentTypes = new HashSet<ConsoleViewContentType>()-->Line_19 $$ contentTypes.add(expected.contentType)[ FD ]
Line_2 $$ private void checkState(@NotNull List<String> expectedBuffers, @NotNull TokenInfo... expectedTokens) -->Line_12 $$ i = 0[ CD ]
Line_5 $$ int i = 0-->Line_7 $$ String expected = expectedBuffers.get(i++)[ FD ]
