Line_9 $$ String textToUse = StringUtil.convertLineSeparators(s)-->Line_16 $$ consoleView.print(textToUse, ConsoleViewContentType.USER_INPUT)[ FD ]
Line_5 $$ final ConsoleBuffer buffer = consoleView.myBuffer-->Line_28 $$ final int deferredOffset = myContentSize - buffer.getLength() - buffer.getUserInputLength()[ FD ]
Line_30 $$ startOffset = info.endOffset-->Line_41 $$ document.insertString(startOffset, textToUse)[ FD ]
Line_2 $$ private void insertUserText(final String s, int offset) -->Line_7 $$ final Document document = editor.getDocument()[ CD ]
Line_9 $$ String textToUse = StringUtil.convertLineSeparators(s)-->Line_35 $$ int charCountToAdd = textToUse.length()[ FD ]
Line_6 $$ final Editor editor = consoleView.myEditor-->Line_46 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ FD ]
Line_15 $$ if (info.contentType != ConsoleViewContentType.USER_INPUT && !StringUtil.containsChar(textToUse, '\n')) -->Line_19 $$ editor.getSelectionModel().removeSelection()[ CD ]
Line_15 $$ if (info.contentType != ConsoleViewContentType.USER_INPUT && !StringUtil.containsChar(textToUse, '\n')) -->Line_16 $$ consoleView.print(textToUse, ConsoleViewContentType.USER_INPUT)[ CD ]
Line_8 $$ final int startOffset-->Line_41 $$ document.insertString(startOffset, textToUse)[ FD ]
Line_2 $$ private void insertUserText(final String s, int offset) -->Line_6 $$ final Editor editor = consoleView.myEditor[ CD ]
Line_2 $$ private void insertUserText(final String s, int offset) -->Line_8 $$ final int startOffset[ CD ]
Line_2 $$ private void insertUserText(final String s, int offset) -->Line_46 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ CD ]
Line_9 $$ String textToUse = StringUtil.convertLineSeparators(s)-->Line_15 $$ if (info.contentType != ConsoleViewContentType.USER_INPUT && !StringUtil.containsChar(textToUse, '\n')) [ FD ]
Line_22 $$ if (info.contentType != ConsoleViewContentType.USER_INPUT) -->Line_26 $$ return[ CD ]
Line_9 $$ String textToUse = StringUtil.convertLineSeparators(s)-->Line_34 $$ buffer.addUserText(startOffset - deferredOffset, textToUse)[ FD ]
Line_8 $$ final int startOffset-->Line_32 $$ startOffset = Math.max(deferredOffset, Math.max(info.startOffset, offset))[ FD ]
Line_22 $$ if (info.contentType != ConsoleViewContentType.USER_INPUT) -->Line_23 $$ insertUserText("temp", offset)[ CD ]
Line_29 $$ if (offset > info.endOffset) -->Line_32 $$ startOffset = Math.max(deferredOffset, Math.max(info.startOffset, offset))[ CD ]
Line_22 $$ if (info.contentType != ConsoleViewContentType.USER_INPUT) -->Line_24 $$ final TokenInfo newInfo = consoleView.myTokens.get(consoleView.myTokens.size() - 1)[ CD ]
Line_9 $$ String textToUse = StringUtil.convertLineSeparators(s)-->Line_25 $$ replaceUserText(textToUse, newInfo.startOffset, newInfo.endOffset)[ FD ]
Line_6 $$ final Editor editor = consoleView.myEditor-->Line_19 $$ editor.getSelectionModel().removeSelection()[ FD ]
Line_2 $$ private void insertUserText(final String s, int offset) -->Line_32 $$ startOffset = Math.max(deferredOffset, Math.max(info.startOffset, offset))[ FD ]
Line_2 $$ private void insertUserText(final String s, int offset) -->Line_45 $$ editor.getCaretModel().moveToOffset(Math.min(startOffset + textToUse.length(), document.getTextLength()))[ CD ]
Line_15 $$ if (info.contentType != ConsoleViewContentType.USER_INPUT && !StringUtil.containsChar(textToUse, '\n')) -->Line_20 $$ return[ CD ]
Line_2 $$ private void insertUserText(final String s, int offset) -->Line_3 $$ ApplicationManager.getApplication().assertIsDispatchThread()[ CD ]
Line_32 $$ startOffset = Math.max(deferredOffset, Math.max(info.startOffset, offset))-->Line_41 $$ document.insertString(startOffset, textToUse)[ FD ]
Line_7 $$ final Document document = editor.getDocument()-->Line_18 $$ editor.getCaretModel().moveToOffset(document.getTextLength())[ FD ]
Line_6 $$ final Editor editor = consoleView.myEditor-->Line_45 $$ editor.getCaretModel().moveToOffset(Math.min(startOffset + textToUse.length(), document.getTextLength()))[ FD ]
Line_9 $$ String textToUse = StringUtil.convertLineSeparators(s)-->Line_45 $$ editor.getCaretModel().moveToOffset(Math.min(startOffset + textToUse.length(), document.getTextLength()))[ FD ]
Line_22 $$ if (info.contentType != ConsoleViewContentType.USER_INPUT) -->Line_25 $$ replaceUserText(textToUse, newInfo.startOffset, newInfo.endOffset)[ CD ]
Line_8 $$ final int startOffset-->Line_30 $$ startOffset = info.endOffset[ FD ]
Line_30 $$ startOffset = info.endOffset-->Line_32 $$ startOffset = Math.max(deferredOffset, Math.max(info.startOffset, offset))[ FD ]
Line_5 $$ final ConsoleBuffer buffer = consoleView.myBuffer-->Line_34 $$ buffer.addUserText(startOffset - deferredOffset, textToUse)[ FD ]
Line_35 $$ int charCountToAdd = textToUse.length()-->Line_37 $$ consoleView.myContentSize += charCountToAdd[ FD ]
Line_15 $$ if (info.contentType != ConsoleViewContentType.USER_INPUT && !StringUtil.containsChar(textToUse, '\n')) -->Line_18 $$ editor.getCaretModel().moveToOffset(document.getTextLength())[ CD ]
Line_2 $$ private void insertUserText(final String s, int offset) -->Line_9 $$ String textToUse = StringUtil.convertLineSeparators(s)[ CD ]
Line_2 $$ private void insertUserText(final String s, int offset) -->Line_23 $$ insertUserText("temp", offset)[ FD ]
Line_29 $$ if (offset > info.endOffset) -->Line_30 $$ startOffset = info.endOffset[ CD ]
Line_11 $$ if (consoleView.myTokens.isEmpty()) -->Line_12 $$ addToken(0, null, ConsoleViewContentType.SYSTEM_OUTPUT)[ CD ]
Line_9 $$ String textToUse = StringUtil.convertLineSeparators(s)-->Line_41 $$ document.insertString(startOffset, textToUse)[ FD ]
Line_35 $$ int charCountToAdd = textToUse.length()-->Line_36 $$ info.endOffset += charCountToAdd[ FD ]
Line_4 $$ final ConsoleViewImpl consoleView = this-->Line_16 $$ consoleView.print(textToUse, ConsoleViewContentType.USER_INPUT)[ FD ]
Line_7 $$ final Document document = editor.getDocument()-->Line_41 $$ document.insertString(startOffset, textToUse)[ FD ]
Line_2 $$ private void insertUserText(final String s, int offset) -->Line_5 $$ final ConsoleBuffer buffer = consoleView.myBuffer[ CD ]
Line_2 $$ private void insertUserText(final String s, int offset) -->Line_4 $$ final ConsoleViewImpl consoleView = this[ CD ]
Line_2 $$ private void insertUserText(final String s, int offset) -->Line_29 $$ if (offset > info.endOffset) [ FD ]
Line_15 $$ if (info.contentType != ConsoleViewContentType.USER_INPUT && !StringUtil.containsChar(textToUse, '\n')) -->Line_17 $$ consoleView.flushDeferredText()[ CD ]
Line_28 $$ final int deferredOffset = myContentSize - buffer.getLength() - buffer.getUserInputLength()-->Line_32 $$ startOffset = Math.max(deferredOffset, Math.max(info.startOffset, offset))[ FD ]
Line_6 $$ final Editor editor = consoleView.myEditor-->Line_18 $$ editor.getCaretModel().moveToOffset(document.getTextLength())[ FD ]
Line_7 $$ final Document document = editor.getDocument()-->Line_45 $$ editor.getCaretModel().moveToOffset(Math.min(startOffset + textToUse.length(), document.getTextLength()))[ FD ]
Line_4 $$ final ConsoleViewImpl consoleView = this-->Line_17 $$ consoleView.flushDeferredText()[ FD ]
Line_6 $$ final Editor editor = consoleView.myEditor-->Line_7 $$ final Document document = editor.getDocument()[ FD ]
Line_2 $$ private void insertUserText(final String s, int offset) -->Line_9 $$ String textToUse = StringUtil.convertLineSeparators(s)[ FD ]
