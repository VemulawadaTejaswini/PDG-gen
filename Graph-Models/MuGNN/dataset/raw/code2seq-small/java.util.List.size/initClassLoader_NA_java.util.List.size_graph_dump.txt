Line_2 $$ public static void initClassLoader(@NotNull ClassLoader parentLoader, @NotNull IdeaPluginDescriptorImpl descriptor) -->Line_3 $$ final List<File> classPath = descriptor.getClassPath()[ CD ]
Line_2 $$ public static void initClassLoader(@NotNull ClassLoader parentLoader, @NotNull IdeaPluginDescriptorImpl descriptor) -->Line_3 $$ final List<File> classPath = descriptor.getClassPath()[ FD ]
Line_2 $$ public static void initClassLoader(@NotNull ClassLoader parentLoader, @NotNull IdeaPluginDescriptorImpl descriptor) -->Line_4 $$ final ClassLoader loader = createPluginClassLoader(classPath.toArray(new File[classPath.size()]), new ClassLoader[] [ CD ]
Line_2 $$ public static void initClassLoader(@NotNull ClassLoader parentLoader, @NotNull IdeaPluginDescriptorImpl descriptor) -->Line_5 $$ descriptor.setLoader(loader)[ FD ]
Line_3 $$ final List<File> classPath = descriptor.getClassPath()-->Line_4 $$ final ClassLoader loader = createPluginClassLoader(classPath.toArray(new File[classPath.size()]), new ClassLoader[] [ FD ]
Line_2 $$ public static void initClassLoader(@NotNull ClassLoader parentLoader, @NotNull IdeaPluginDescriptorImpl descriptor) -->Line_5 $$ descriptor.setLoader(loader)[ CD ]
Line_2 $$ public static void initClassLoader(@NotNull ClassLoader parentLoader, @NotNull IdeaPluginDescriptorImpl descriptor) -->Line_4 $$ final ClassLoader loader = createPluginClassLoader(classPath.toArray(new File[classPath.size()]), new ClassLoader[] [ FD ]
Line_4 $$ final ClassLoader loader = createPluginClassLoader(classPath.toArray(new File[classPath.size()]), new ClassLoader[] -->Line_5 $$ descriptor.setLoader(loader)[ FD ]
