Line_2 $$ public static void executeMerge(@Nullable Project project, @NotNull ExternalDiffSettings settings, @NotNull ThreesideMergeRequest request) throws IOException, ExecutionException -->Line_5 $$ List<InputFile> inputFiles = new ArrayList<InputFile>()[ CD ]
Line_4 $$ OutputFile outputFile = null-->Line_85 $$ if (outputFile != null)[ FD ]
Line_2 $$ public static void executeMerge(@Nullable Project project, @NotNull ExternalDiffSettings settings, @NotNull ThreesideMergeRequest request) throws IOException, ExecutionException -->Line_4 $$ OutputFile outputFile = null[ CD ]
Line_10 $$ String windowTitle = request.getTitle()-->Line_16 $$ outputFile = createOutputFile(outputContent, windowTitle)[ FD ]
Line_39 $$ ProgressManager.getInstance().run(new Task.Modal(project, "Waiting for external tool", true) -->Line_44 $$ final Thread waiter = new Thread("external process waiter") [ CD ]
Line_18 $$ List<String> args = new ArrayList<String>()-->Line_35 $$ commandLine.addParameters(args)[ FD ]
Line_19 $$ while (parameterTokenizer.hasMoreTokens()) -->Line_20 $$ String arg = parameterTokenizer.nextToken()[ CD ]
Line_18 $$ List<String> args = new ArrayList<String>()-->Line_24 $$ args.add(inputFiles.get(2).getPath())[ FD ]
Line_17 $$ CommandLineTokenizer parameterTokenizer = new CommandLineTokenizer(settings.getMergeParameters(), true)-->Line_20 $$ String arg = parameterTokenizer.nextToken()[ FD ]
Line_10 $$ String windowTitle = request.getTitle()-->Line_14 $$ inputFiles.add(createFile(contents.get(i), titles.get(i), windowTitle))[ FD ]
Line_33 $$ GeneralCommandLine commandLine = new GeneralCommandLine()-->Line_34 $$ commandLine.setExePath(settings.getMergeExePath())[ FD ]
Line_71 $$ ProgressManager.getInstance().run(new Task.Modal(project, "Launching external tool", false) -->Line_75 $$ indicator.setIndeterminate(true)[ CD ]
Line_4 $$ OutputFile outputFile = null-->Line_16 $$ outputFile = createOutputFile(outputContent, windowTitle)[ FD ]
Line_20 $$ String arg = parameterTokenizer.nextToken()-->Line_27 $$ if ("%4".equals(arg)) [ FD ]
Line_18 $$ List<String> args = new ArrayList<String>()-->Line_28 $$ args.add(outputFile.getPath())[ FD ]
Line_8 $$ List<? extends DiffContent> contents = request.getContents()-->Line_11 $$ assert contents.size() == 3[ FD ]
Line_81 $$ if (success)-->Line_82 $$ outputFile.apply()[ CD ]
Line_2 $$ public static void executeMerge(@Nullable Project project, @NotNull ExternalDiffSettings settings, @NotNull ThreesideMergeRequest request) throws IOException, ExecutionException -->Line_37 $$ if (settings.isMergeTrustExitCode()) [ FD ]
Line_38 $$ final Ref<Boolean> resultRef = new Ref<Boolean>()-->Line_69 $$ success = resultRef.get() == Boolean.TRUE[ FD ]
Line_18 $$ List<String> args = new ArrayList<String>()-->Line_26 $$ args.add(inputFiles.get(1).getPath())[ FD ]
Line_2 $$ public static void executeMerge(@Nullable Project project, @NotNull ExternalDiffSettings settings, @NotNull ThreesideMergeRequest request) throws IOException, ExecutionException -->Line_17 $$ CommandLineTokenizer parameterTokenizer = new CommandLineTokenizer(settings.getMergeParameters(), true)[ FD ]
Line_20 $$ String arg = parameterTokenizer.nextToken()-->Line_30 $$ args.add(arg)[ FD ]
Line_43 $$ final Semaphore semaphore = new Semaphore(0)-->Line_52 $$ semaphore.release()[ FD ]
Line_36 $$ final Process process = commandLine.createProcess()-->Line_49 $$ resultRef.set(process.waitFor() == 0)[ FD ]
Line_5 $$ List<InputFile> inputFiles = new ArrayList<InputFile>()-->Line_24 $$ args.add(inputFiles.get(2).getPath())[ FD ]
Line_8 $$ List<? extends DiffContent> contents = request.getContents()-->Line_13 $$ for (int i = 0; i < contents.size(); i++) [ FD ]
Line_4 $$ OutputFile outputFile = null-->Line_28 $$ args.add(outputFile.getPath())[ FD ]
Line_44 $$ final Thread waiter = new Thread("external process waiter") -->Line_65 $$ waiter.interrupt()[ FD ]
Line_9 $$ List<String> titles = request.getContentTitles()-->Line_14 $$ inputFiles.add(createFile(contents.get(i), titles.get(i), windowTitle))[ FD ]
Line_20 $$ String arg = parameterTokenizer.nextToken()-->Line_21 $$ if ("%1".equals(arg)) [ FD ]
Line_38 $$ final Ref<Boolean> resultRef = new Ref<Boolean>()-->Line_49 $$ resultRef.set(process.waitFor() == 0)[ FD ]
Line_4 $$ OutputFile outputFile = null-->Line_86 $$ outputFile.cleanup()[ FD ]
Line_5 $$ List<InputFile> inputFiles = new ArrayList<InputFile>()-->Line_26 $$ args.add(inputFiles.get(1).getPath())[ FD ]
Line_37 $$ if (settings.isMergeTrustExitCode()) -->Line_39 $$ ProgressManager.getInstance().run(new Task.Modal(project, "Waiting for external tool", true) [ CD ]
Line_33 $$ GeneralCommandLine commandLine = new GeneralCommandLine()-->Line_35 $$ commandLine.addParameters(args)[ FD ]
Line_21 $$ if ("%1".equals(arg)) -->Line_23 $$ if ("%2".equals(arg)) [ CD ]
Line_71 $$ ProgressManager.getInstance().run(new Task.Modal(project, "Launching external tool", false) -->Line_75 $$ indicator.setIndeterminate(true)[ FD ]
Line_17 $$ CommandLineTokenizer parameterTokenizer = new CommandLineTokenizer(settings.getMergeParameters(), true)-->Line_19 $$ while (parameterTokenizer.hasMoreTokens()) [ FD ]
Line_58 $$ while (true) -->Line_59 $$ indicator.checkCanceled()[ CD ]
Line_2 $$ public static void executeMerge(@Nullable Project project, @NotNull ExternalDiffSettings settings, @NotNull ThreesideMergeRequest request) throws IOException, ExecutionException -->Line_34 $$ commandLine.setExePath(settings.getMergeExePath())[ FD ]
Line_2 $$ public static void executeMerge(@Nullable Project project, @NotNull ExternalDiffSettings settings, @NotNull ThreesideMergeRequest request) throws IOException, ExecutionException -->Line_7 $$ DiffContent outputContent = request.getOutputContent()[ FD ]
Line_23 $$ if ("%2".equals(arg)) -->Line_24 $$ args.add(inputFiles.get(2).getPath())[ CD ]
Line_33 $$ GeneralCommandLine commandLine = new GeneralCommandLine()-->Line_36 $$ final Process process = commandLine.createProcess()[ FD ]
Line_21 $$ if ("%1".equals(arg)) -->Line_22 $$ args.add(inputFiles.get(0).getPath())[ CD ]
Line_2 $$ public static void executeMerge(@Nullable Project project, @NotNull ExternalDiffSettings settings, @NotNull ThreesideMergeRequest request) throws IOException, ExecutionException -->Line_8 $$ List<? extends DiffContent> contents = request.getContents()[ FD ]
Line_39 $$ ProgressManager.getInstance().run(new Task.Modal(project, "Waiting for external tool", true) -->Line_59 $$ indicator.checkCanceled()[ FD ]
Line_39 $$ ProgressManager.getInstance().run(new Task.Modal(project, "Waiting for external tool", true) -->Line_56 $$ waiter.start()[ CD ]
Line_16 $$ outputFile = createOutputFile(outputContent, windowTitle)-->Line_28 $$ args.add(outputFile.getPath())[ FD ]
Line_13 $$ for (int i = 0; i < contents.size(); i++) -->Line_14 $$ inputFiles.add(createFile(contents.get(i), titles.get(i), windowTitle))[ CD ]
Line_85 $$ if (outputFile != null)-->Line_86 $$ outputFile.cleanup()[ CD ]
Line_5 $$ List<InputFile> inputFiles = new ArrayList<InputFile>()-->Line_14 $$ inputFiles.add(createFile(contents.get(i), titles.get(i), windowTitle))[ FD ]
Line_16 $$ outputFile = createOutputFile(outputContent, windowTitle)-->Line_82 $$ outputFile.apply()[ FD ]
Line_27 $$ if ("%4".equals(arg)) -->Line_30 $$ args.add(arg)[ CD ]
Line_16 $$ outputFile = createOutputFile(outputContent, windowTitle)-->Line_85 $$ if (outputFile != null)[ FD ]
Line_23 $$ if ("%2".equals(arg)) -->Line_25 $$ if ("%3".equals(arg)) [ CD ]
Line_16 $$ outputFile = createOutputFile(outputContent, windowTitle)-->Line_86 $$ outputFile.cleanup()[ FD ]
Line_25 $$ if ("%3".equals(arg)) -->Line_27 $$ if ("%4".equals(arg)) [ CD ]
Line_8 $$ List<? extends DiffContent> contents = request.getContents()-->Line_12 $$ assert titles.size() == contents.size()[ FD ]
Line_8 $$ List<? extends DiffContent> contents = request.getContents()-->Line_14 $$ inputFiles.add(createFile(contents.get(i), titles.get(i), windowTitle))[ FD ]
Line_39 $$ ProgressManager.getInstance().run(new Task.Modal(project, "Waiting for external tool", true) -->Line_75 $$ indicator.setIndeterminate(true)[ FD ]
Line_20 $$ String arg = parameterTokenizer.nextToken()-->Line_23 $$ if ("%2".equals(arg)) [ FD ]
Line_25 $$ if ("%3".equals(arg)) -->Line_26 $$ args.add(inputFiles.get(1).getPath())[ CD ]
Line_2 $$ public static void executeMerge(@Nullable Project project, @NotNull ExternalDiffSettings settings, @NotNull ThreesideMergeRequest request) throws IOException, ExecutionException -->Line_9 $$ List<String> titles = request.getContentTitles()[ FD ]
Line_37 $$ if (settings.isMergeTrustExitCode()) -->Line_38 $$ final Ref<Boolean> resultRef = new Ref<Boolean>()[ CD ]
Line_9 $$ List<String> titles = request.getContentTitles()-->Line_12 $$ assert titles.size() == contents.size()[ FD ]
Line_39 $$ ProgressManager.getInstance().run(new Task.Modal(project, "Waiting for external tool", true) -->Line_43 $$ final Semaphore semaphore = new Semaphore(0)[ CD ]
Line_37 $$ if (settings.isMergeTrustExitCode()) -->Line_71 $$ ProgressManager.getInstance().run(new Task.Modal(project, "Launching external tool", false) [ CD ]
Line_58 $$ while (true) -->Line_60 $$ if (semaphore.tryAcquire(200, TimeUnit.MILLISECONDS))[ CD ]
Line_44 $$ final Thread waiter = new Thread("external process waiter") -->Line_56 $$ waiter.start()[ FD ]
Line_27 $$ if ("%4".equals(arg)) -->Line_28 $$ args.add(outputFile.getPath())[ CD ]
Line_2 $$ public static void executeMerge(@Nullable Project project, @NotNull ExternalDiffSettings settings, @NotNull ThreesideMergeRequest request) throws IOException, ExecutionException -->Line_84 $$ request.applyResult(success ? MergeResult.RESOLVED : MergeResult.CANCEL)[ FD ]
Line_18 $$ List<String> args = new ArrayList<String>()-->Line_30 $$ args.add(arg)[ FD ]
Line_19 $$ while (parameterTokenizer.hasMoreTokens()) -->Line_21 $$ if ("%1".equals(arg)) [ CD ]
Line_71 $$ ProgressManager.getInstance().run(new Task.Modal(project, "Launching external tool", false) -->Line_76 $$ TimeoutUtil.sleep(1000)[ CD ]
Line_43 $$ final Semaphore semaphore = new Semaphore(0)-->Line_60 $$ if (semaphore.tryAcquire(200, TimeUnit.MILLISECONDS))[ FD ]
Line_7 $$ DiffContent outputContent = request.getOutputContent()-->Line_16 $$ outputFile = createOutputFile(outputContent, windowTitle)[ FD ]
Line_2 $$ public static void executeMerge(@Nullable Project project, @NotNull ExternalDiffSettings settings, @NotNull ThreesideMergeRequest request) throws IOException, ExecutionException -->Line_3 $$ boolean success = false[ CD ]
Line_4 $$ OutputFile outputFile = null-->Line_82 $$ outputFile.apply()[ FD ]
Line_20 $$ String arg = parameterTokenizer.nextToken()-->Line_25 $$ if ("%3".equals(arg)) [ FD ]
Line_18 $$ List<String> args = new ArrayList<String>()-->Line_22 $$ args.add(inputFiles.get(0).getPath())[ FD ]
Line_2 $$ public static void executeMerge(@Nullable Project project, @NotNull ExternalDiffSettings settings, @NotNull ThreesideMergeRequest request) throws IOException, ExecutionException -->Line_79 $$ success = Messages.showYesNoDialog(project, "Press \"Mark as Resolved\" when you finish resolving conflicts in the external tool", "Merge In External Tool", "Mark as Resolved", "Revert", null) == Messages.YES[ FD ]
Line_2 $$ public static void executeMerge(@Nullable Project project, @NotNull ExternalDiffSettings settings, @NotNull ThreesideMergeRequest request) throws IOException, ExecutionException -->Line_10 $$ String windowTitle = request.getTitle()[ FD ]
Line_13 $$ for (int i = 0; i < contents.size(); i++) -->Line_14 $$ inputFiles.add(createFile(contents.get(i), titles.get(i), windowTitle))[ FD ]
Line_5 $$ List<InputFile> inputFiles = new ArrayList<InputFile>()-->Line_22 $$ args.add(inputFiles.get(0).getPath())[ FD ]
