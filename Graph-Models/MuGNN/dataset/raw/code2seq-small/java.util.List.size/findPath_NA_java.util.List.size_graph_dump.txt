Line_12 $$ nodeIndex = parentChildren.indexOf(node)-->Line_28 $$ nodeIndex = -1[ FD ]
Line_21 $$ TreePath result = match(parentChildren.get(i), string)-->Line_40 $$ if (result != null) [ FD ]
Line_32 $$ TreePath result = findInChildren(node, string)-->Line_46 $$ if (result != null) [ FD ]
Line_2 $$ private Object findPath(String string, XDebuggerTreeNode node, boolean checkChildren) -->Line_31 $$ if (checkChildren && !node.isLeaf()) [ FD ]
Line_31 $$ if (checkChildren && !node.isLeaf()) -->Line_32 $$ TreePath result = findInChildren(node, string)[ CD ]
Line_15 $$ TreePath result = match(parentChildren.get(i), string)-->Line_40 $$ if (result != null) [ FD ]
Line_8 $$ int nodeIndex-->Line_13 $$ if (nodeIndex != -1) [ FD ]
Line_40 $$ if (result != null) -->Line_41 $$ return result[ CD ]
Line_11 $$ parentChildren = parent.getChildren()-->Line_12 $$ nodeIndex = parentChildren.indexOf(node)[ FD ]
Line_12 $$ nodeIndex = parentChildren.indexOf(node)-->Line_13 $$ if (nodeIndex != -1) [ FD ]
Line_13 $$ if (nodeIndex != -1) -->Line_20 $$ for (int i = nodeIndex - 1; i >= 0; i--) [ CD ]
Line_2 $$ private Object findPath(String string, XDebuggerTreeNode node, boolean checkChildren) -->Line_7 $$ XDebuggerTreeNode parent = ObjectUtils.tryCast(node.getParent(), XDebuggerTreeNode.class)[ FD ]
Line_14 $$ for (int i = nodeIndex + 1; i < parentChildren.size(); i++) -->Line_45 $$ TreePath result = findInChildren(parentChildren.get(i), string)[ FD ]
Line_11 $$ parentChildren = parent.getChildren()-->Line_29 $$ parentChildren = null[ FD ]
Line_11 $$ parentChildren = parent.getChildren()-->Line_21 $$ TreePath result = match(parentChildren.get(i), string)[ FD ]
Line_15 $$ TreePath result = match(parentChildren.get(i), string)-->Line_33 $$ if (result != null) [ FD ]
Line_10 $$ if (parent != null) -->Line_12 $$ nodeIndex = parentChildren.indexOf(node)[ CD ]
Line_14 $$ for (int i = nodeIndex + 1; i < parentChildren.size(); i++) -->Line_38 $$ for (int i = nodeIndex + 1; i < parentChildren.size(); i++) [ FD ]
Line_38 $$ for (int i = nodeIndex + 1; i < parentChildren.size(); i++) -->Line_44 $$ for (int i = nodeIndex - 1; i >= 0; i--) [ FD ]
Line_8 $$ int nodeIndex-->Line_12 $$ nodeIndex = parentChildren.indexOf(node)[ FD ]
Line_2 $$ private Object findPath(String string, XDebuggerTreeNode node, boolean checkChildren) -->Line_10 $$ if (parent != null) [ CD ]
Line_20 $$ for (int i = nodeIndex - 1; i >= 0; i--) -->Line_39 $$ TreePath result = findInChildren(parentChildren.get(i), string)[ FD ]
Line_44 $$ for (int i = nodeIndex - 1; i >= 0; i--) -->Line_45 $$ TreePath result = findInChildren(parentChildren.get(i), string)[ FD ]
Line_11 $$ parentChildren = parent.getChildren()-->Line_14 $$ for (int i = nodeIndex + 1; i < parentChildren.size(); i++) [ FD ]
Line_7 $$ XDebuggerTreeNode parent = ObjectUtils.tryCast(node.getParent(), XDebuggerTreeNode.class)-->Line_11 $$ parentChildren = parent.getChildren()[ FD ]
Line_33 $$ if (result != null) -->Line_34 $$ return result[ CD ]
Line_2 $$ private Object findPath(String string, XDebuggerTreeNode node, boolean checkChildren) -->Line_7 $$ XDebuggerTreeNode parent = ObjectUtils.tryCast(node.getParent(), XDebuggerTreeNode.class)[ CD ]
Line_2 $$ private Object findPath(String string, XDebuggerTreeNode node, boolean checkChildren) -->Line_37 $$ if (parent != null) [ CD ]
Line_2 $$ private Object findPath(String string, XDebuggerTreeNode node, boolean checkChildren) -->Line_9 $$ List<? extends TreeNode> parentChildren[ CD ]
Line_14 $$ for (int i = nodeIndex + 1; i < parentChildren.size(); i++) -->Line_39 $$ TreePath result = findInChildren(parentChildren.get(i), string)[ FD ]
Line_38 $$ for (int i = nodeIndex + 1; i < parentChildren.size(); i++) -->Line_39 $$ TreePath result = findInChildren(parentChildren.get(i), string)[ CD ]
Line_9 $$ List<? extends TreeNode> parentChildren-->Line_14 $$ for (int i = nodeIndex + 1; i < parentChildren.size(); i++) [ FD ]
Line_8 $$ int nodeIndex-->Line_28 $$ nodeIndex = -1[ FD ]
Line_13 $$ if (nodeIndex != -1) -->Line_14 $$ for (int i = nodeIndex + 1; i < parentChildren.size(); i++) [ CD ]
Line_2 $$ private Object findPath(String string, XDebuggerTreeNode node, boolean checkChildren) -->Line_12 $$ nodeIndex = parentChildren.indexOf(node)[ FD ]
Line_10 $$ if (parent != null) -->Line_29 $$ parentChildren = null[ CD ]
Line_11 $$ parentChildren = parent.getChildren()-->Line_38 $$ for (int i = nodeIndex + 1; i < parentChildren.size(); i++) [ FD ]
Line_9 $$ List<? extends TreeNode> parentChildren-->Line_29 $$ parentChildren = null[ FD ]
Line_9 $$ List<? extends TreeNode> parentChildren-->Line_38 $$ for (int i = nodeIndex + 1; i < parentChildren.size(); i++) [ FD ]
Line_20 $$ for (int i = nodeIndex - 1; i >= 0; i--) -->Line_44 $$ for (int i = nodeIndex - 1; i >= 0; i--) [ FD ]
Line_44 $$ for (int i = nodeIndex - 1; i >= 0; i--) -->Line_46 $$ if (result != null) [ CD ]
Line_9 $$ List<? extends TreeNode> parentChildren-->Line_39 $$ TreePath result = findInChildren(parentChildren.get(i), string)[ FD ]
Line_2 $$ private Object findPath(String string, XDebuggerTreeNode node, boolean checkChildren) -->Line_39 $$ TreePath result = findInChildren(parentChildren.get(i), string)[ FD ]
Line_2 $$ private Object findPath(String string, XDebuggerTreeNode node, boolean checkChildren) -->Line_45 $$ TreePath result = findInChildren(parentChildren.get(i), string)[ FD ]
Line_15 $$ TreePath result = match(parentChildren.get(i), string)-->Line_46 $$ if (result != null) [ FD ]
Line_37 $$ if (parent != null) -->Line_44 $$ for (int i = nodeIndex - 1; i >= 0; i--) [ CD ]
Line_3 $$ TreePath path = node.getPath()-->Line_4 $$ if (isMatchingElement(path, string)) [ FD ]
Line_16 $$ if (result != null) -->Line_17 $$ return result[ CD ]
Line_14 $$ for (int i = nodeIndex + 1; i < parentChildren.size(); i++) -->Line_15 $$ TreePath result = match(parentChildren.get(i), string)[ CD ]
Line_14 $$ for (int i = nodeIndex + 1; i < parentChildren.size(); i++) -->Line_44 $$ for (int i = nodeIndex - 1; i >= 0; i--) [ FD ]
Line_14 $$ for (int i = nodeIndex + 1; i < parentChildren.size(); i++) -->Line_20 $$ for (int i = nodeIndex - 1; i >= 0; i--) [ FD ]
Line_20 $$ for (int i = nodeIndex - 1; i >= 0; i--) -->Line_22 $$ if (result != null) [ CD ]
Line_39 $$ TreePath result = findInChildren(parentChildren.get(i), string)-->Line_40 $$ if (result != null) [ FD ]
Line_2 $$ private Object findPath(String string, XDebuggerTreeNode node, boolean checkChildren) -->Line_50 $$ return findPath(string, parent, false)[ FD ]
Line_20 $$ for (int i = nodeIndex - 1; i >= 0; i--) -->Line_21 $$ TreePath result = match(parentChildren.get(i), string)[ FD ]
Line_7 $$ XDebuggerTreeNode parent = ObjectUtils.tryCast(node.getParent(), XDebuggerTreeNode.class)-->Line_10 $$ if (parent != null) [ FD ]
Line_44 $$ for (int i = nodeIndex - 1; i >= 0; i--) -->Line_45 $$ TreePath result = findInChildren(parentChildren.get(i), string)[ CD ]
Line_9 $$ List<? extends TreeNode> parentChildren-->Line_45 $$ TreePath result = findInChildren(parentChildren.get(i), string)[ FD ]
Line_15 $$ TreePath result = match(parentChildren.get(i), string)-->Line_22 $$ if (result != null) [ FD ]
Line_2 $$ private Object findPath(String string, XDebuggerTreeNode node, boolean checkChildren) -->Line_3 $$ TreePath path = node.getPath()[ CD ]
Line_2 $$ private Object findPath(String string, XDebuggerTreeNode node, boolean checkChildren) -->Line_8 $$ int nodeIndex[ CD ]
Line_31 $$ if (checkChildren && !node.isLeaf()) -->Line_33 $$ if (result != null) [ CD ]
Line_2 $$ private Object findPath(String string, XDebuggerTreeNode node, boolean checkChildren) -->Line_3 $$ TreePath path = node.getPath()[ FD ]
Line_2 $$ private Object findPath(String string, XDebuggerTreeNode node, boolean checkChildren) -->Line_21 $$ TreePath result = match(parentChildren.get(i), string)[ FD ]
Line_2 $$ private Object findPath(String string, XDebuggerTreeNode node, boolean checkChildren) -->Line_15 $$ TreePath result = match(parentChildren.get(i), string)[ FD ]
Line_14 $$ for (int i = nodeIndex + 1; i < parentChildren.size(); i++) -->Line_16 $$ if (result != null) [ CD ]
Line_32 $$ TreePath result = findInChildren(node, string)-->Line_33 $$ if (result != null) [ FD ]
Line_20 $$ for (int i = nodeIndex - 1; i >= 0; i--) -->Line_21 $$ TreePath result = match(parentChildren.get(i), string)[ CD ]
Line_20 $$ for (int i = nodeIndex - 1; i >= 0; i--) -->Line_38 $$ for (int i = nodeIndex + 1; i < parentChildren.size(); i++) [ FD ]
Line_10 $$ if (parent != null) -->Line_28 $$ nodeIndex = -1[ CD ]
Line_11 $$ parentChildren = parent.getChildren()-->Line_15 $$ TreePath result = match(parentChildren.get(i), string)[ FD ]
Line_29 $$ parentChildren = null-->Line_45 $$ TreePath result = findInChildren(parentChildren.get(i), string)[ FD ]
Line_21 $$ TreePath result = match(parentChildren.get(i), string)-->Line_33 $$ if (result != null) [ FD ]
Line_38 $$ for (int i = nodeIndex + 1; i < parentChildren.size(); i++) -->Line_40 $$ if (result != null) [ CD ]
Line_10 $$ if (parent != null) -->Line_11 $$ parentChildren = parent.getChildren()[ CD ]
Line_11 $$ parentChildren = parent.getChildren()-->Line_45 $$ TreePath result = findInChildren(parentChildren.get(i), string)[ FD ]
Line_45 $$ TreePath result = findInChildren(parentChildren.get(i), string)-->Line_46 $$ if (result != null) [ FD ]
Line_7 $$ XDebuggerTreeNode parent = ObjectUtils.tryCast(node.getParent(), XDebuggerTreeNode.class)-->Line_37 $$ if (parent != null) [ FD ]
Line_22 $$ if (result != null) -->Line_23 $$ return result[ CD ]
Line_46 $$ if (result != null) -->Line_47 $$ return result[ CD ]
Line_39 $$ TreePath result = findInChildren(parentChildren.get(i), string)-->Line_46 $$ if (result != null) [ FD ]
Line_10 $$ if (parent != null) -->Line_13 $$ if (nodeIndex != -1) [ CD ]
Line_29 $$ parentChildren = null-->Line_39 $$ TreePath result = findInChildren(parentChildren.get(i), string)[ FD ]
Line_37 $$ if (parent != null) -->Line_38 $$ for (int i = nodeIndex + 1; i < parentChildren.size(); i++) [ CD ]
Line_20 $$ for (int i = nodeIndex - 1; i >= 0; i--) -->Line_45 $$ TreePath result = findInChildren(parentChildren.get(i), string)[ FD ]
Line_9 $$ List<? extends TreeNode> parentChildren-->Line_15 $$ TreePath result = match(parentChildren.get(i), string)[ FD ]
Line_2 $$ private Object findPath(String string, XDebuggerTreeNode node, boolean checkChildren) -->Line_31 $$ if (checkChildren && !node.isLeaf()) [ CD ]
Line_38 $$ for (int i = nodeIndex + 1; i < parentChildren.size(); i++) -->Line_39 $$ TreePath result = findInChildren(parentChildren.get(i), string)[ FD ]
Line_11 $$ parentChildren = parent.getChildren()-->Line_39 $$ TreePath result = findInChildren(parentChildren.get(i), string)[ FD ]
Line_2 $$ private Object findPath(String string, XDebuggerTreeNode node, boolean checkChildren) -->Line_52 $$ return null[ CD ]
Line_9 $$ List<? extends TreeNode> parentChildren-->Line_12 $$ nodeIndex = parentChildren.indexOf(node)[ FD ]
Line_29 $$ parentChildren = null-->Line_38 $$ for (int i = nodeIndex + 1; i < parentChildren.size(); i++) [ FD ]
Line_21 $$ TreePath result = match(parentChildren.get(i), string)-->Line_22 $$ if (result != null) [ FD ]
Line_7 $$ XDebuggerTreeNode parent = ObjectUtils.tryCast(node.getParent(), XDebuggerTreeNode.class)-->Line_50 $$ return findPath(string, parent, false)[ FD ]
Line_14 $$ for (int i = nodeIndex + 1; i < parentChildren.size(); i++) -->Line_15 $$ TreePath result = match(parentChildren.get(i), string)[ FD ]
Line_2 $$ private Object findPath(String string, XDebuggerTreeNode node, boolean checkChildren) -->Line_4 $$ if (isMatchingElement(path, string)) [ FD ]
Line_9 $$ List<? extends TreeNode> parentChildren-->Line_21 $$ TreePath result = match(parentChildren.get(i), string)[ FD ]
Line_4 $$ if (isMatchingElement(path, string)) -->Line_5 $$ return path[ CD ]
Line_21 $$ TreePath result = match(parentChildren.get(i), string)-->Line_46 $$ if (result != null) [ FD ]
Line_9 $$ List<? extends TreeNode> parentChildren-->Line_11 $$ parentChildren = parent.getChildren()[ FD ]
Line_2 $$ private Object findPath(String string, XDebuggerTreeNode node, boolean checkChildren) -->Line_4 $$ if (isMatchingElement(path, string)) [ CD ]
Line_2 $$ private Object findPath(String string, XDebuggerTreeNode node, boolean checkChildren) -->Line_32 $$ TreePath result = findInChildren(node, string)[ FD ]
Line_15 $$ TreePath result = match(parentChildren.get(i), string)-->Line_16 $$ if (result != null) [ FD ]
Line_37 $$ if (parent != null) -->Line_50 $$ return findPath(string, parent, false)[ CD ]
Line_38 $$ for (int i = nodeIndex + 1; i < parentChildren.size(); i++) -->Line_45 $$ TreePath result = findInChildren(parentChildren.get(i), string)[ FD ]
Line_32 $$ TreePath result = findInChildren(node, string)-->Line_40 $$ if (result != null) [ FD ]
Line_14 $$ for (int i = nodeIndex + 1; i < parentChildren.size(); i++) -->Line_21 $$ TreePath result = match(parentChildren.get(i), string)[ FD ]
