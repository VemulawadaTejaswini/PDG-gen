Line_7 $$ if (Tracing.isTracing()) -->Line_9 $$ Tracing.trace("[ CD ]
Line_7 $$ if (Tracing.isTracing()) -->Line_10 $$ if (logger.isDebugEnabled()) [ CD ]
Line_4 $$ boolean failed = blockfor + failures > endpoints.size()-->Line_5 $$ if (signaled && !failed)[ FD ]
Line_2 $$ public void awaitResults() throws ReadFailureException, ReadTimeoutException -->Line_3 $$ boolean signaled = await(command.getTimeout(), TimeUnit.MILLISECONDS)[ CD ]
Line_10 $$ if (logger.isDebugEnabled()) -->Line_12 $$ logger.debug("[ CD ]
Line_3 $$ boolean signaled = await(command.getTimeout(), TimeUnit.MILLISECONDS)-->Line_5 $$ if (signaled && !failed)[ FD ]
Line_5 $$ if (signaled && !failed)-->Line_6 $$ return[ CD ]
Line_2 $$ public void awaitResults() throws ReadFailureException, ReadTimeoutException -->Line_4 $$ boolean failed = blockfor + failures > endpoints.size()[ CD ]
Line_7 $$ if (Tracing.isTracing()) -->Line_8 $$ String gotData = received > 0 ? (resolver.isDataPresent() ? " (including data)" : " (only digests)") : ""[ CD ]
Line_2 $$ public void awaitResults() throws ReadFailureException, ReadTimeoutException -->Line_5 $$ if (signaled && !failed)[ CD ]
Line_2 $$ public void awaitResults() throws ReadFailureException, ReadTimeoutException -->Line_7 $$ if (Tracing.isTracing()) [ CD ]
