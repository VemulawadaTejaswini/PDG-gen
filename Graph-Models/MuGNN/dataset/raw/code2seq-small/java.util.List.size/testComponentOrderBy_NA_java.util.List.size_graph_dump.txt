Line_2 $$ public void testComponentOrderBy() -->Line_14 $$ s.delete(h1)[ CD ]
Line_2 $$ public void testComponentOrderBy() -->Line_6 $$ Long id2 = (Long) s.save(genSimpleHuman("Jingleheimer", "Schmidt"))[ CD ]
Line_6 $$ Long id2 = (Long) s.save(genSimpleHuman("Jingleheimer", "Schmidt"))-->Line_12 $$ assertEquals("Incorrect ordering", id2, h1.getId())[ FD ]
Line_2 $$ public void testComponentOrderBy() -->Line_4 $$ Transaction t = s.beginTransaction()[ CD ]
Line_8 $$ List results = s.createQuery("from Human as h order by h.name").list()-->Line_10 $$ Human h1 = (Human) results.get(0)[ FD ]
Line_2 $$ public void testComponentOrderBy() -->Line_12 $$ assertEquals("Incorrect ordering", id2, h1.getId())[ CD ]
Line_3 $$ Session s = openSession()-->Line_6 $$ Long id2 = (Long) s.save(genSimpleHuman("Jingleheimer", "Schmidt"))[ FD ]
Line_3 $$ Session s = openSession()-->Line_8 $$ List results = s.createQuery("from Human as h order by h.name").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_5 $$ Long id1 = (Long) s.save(genSimpleHuman("John", "Jacob"))[ FD ]
Line_2 $$ public void testComponentOrderBy() -->Line_3 $$ Session s = openSession()[ CD ]
Line_11 $$ Human h2 = (Human) results.get(1)-->Line_15 $$ s.delete(h2)[ FD ]
Line_4 $$ Transaction t = s.beginTransaction()-->Line_16 $$ t.commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_17 $$ s.close()[ FD ]
Line_2 $$ public void testComponentOrderBy() -->Line_7 $$ s.flush()[ CD ]
Line_10 $$ Human h1 = (Human) results.get(0)-->Line_12 $$ assertEquals("Incorrect ordering", id2, h1.getId())[ FD ]
Line_3 $$ Session s = openSession()-->Line_7 $$ s.flush()[ FD ]
Line_10 $$ Human h1 = (Human) results.get(0)-->Line_14 $$ s.delete(h1)[ FD ]
Line_8 $$ List results = s.createQuery("from Human as h order by h.name").list()-->Line_9 $$ assertEquals("Incorrect return count", 2, results.size())[ FD ]
Line_2 $$ public void testComponentOrderBy() -->Line_16 $$ t.commit()[ CD ]
Line_2 $$ public void testComponentOrderBy() -->Line_8 $$ List results = s.createQuery("from Human as h order by h.name").list()[ CD ]
Line_3 $$ Session s = openSession()-->Line_14 $$ s.delete(h1)[ FD ]
Line_2 $$ public void testComponentOrderBy() -->Line_17 $$ s.close()[ CD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ Transaction t = s.beginTransaction()[ FD ]
Line_2 $$ public void testComponentOrderBy() -->Line_13 $$ assertEquals("Incorrect ordering", id1, h2.getId())[ CD ]
Line_2 $$ public void testComponentOrderBy() -->Line_11 $$ Human h2 = (Human) results.get(1)[ CD ]
Line_3 $$ Session s = openSession()-->Line_15 $$ s.delete(h2)[ FD ]
Line_5 $$ Long id1 = (Long) s.save(genSimpleHuman("John", "Jacob"))-->Line_13 $$ assertEquals("Incorrect ordering", id1, h2.getId())[ FD ]
Line_2 $$ public void testComponentOrderBy() -->Line_10 $$ Human h1 = (Human) results.get(0)[ CD ]
Line_2 $$ public void testComponentOrderBy() -->Line_9 $$ assertEquals("Incorrect return count", 2, results.size())[ CD ]
Line_2 $$ public void testComponentOrderBy() -->Line_5 $$ Long id1 = (Long) s.save(genSimpleHuman("John", "Jacob"))[ CD ]
Line_2 $$ public void testComponentOrderBy() -->Line_15 $$ s.delete(h2)[ CD ]
Line_11 $$ Human h2 = (Human) results.get(1)-->Line_13 $$ assertEquals("Incorrect ordering", id1, h2.getId())[ FD ]
Line_8 $$ List results = s.createQuery("from Human as h order by h.name").list()-->Line_11 $$ Human h2 = (Human) results.get(1)[ FD ]
