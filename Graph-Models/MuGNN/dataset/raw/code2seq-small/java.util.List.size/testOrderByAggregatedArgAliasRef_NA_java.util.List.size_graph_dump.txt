Line_2 $$ public void testOrderByAggregatedArgAliasRef() -->Line_8 $$ assertEquals(zoo3.getName(), ((Object[]) list.get(0))[0])[ CD ]
Line_6 $$ List list = s.createQuery("select z.name as zname, count(*) as cnt from Zoo z group by z.name order by cnt desc, zname").list()-->Line_13 $$ assertEquals(Long.valueOf(1), ((Object[]) list.get(2))[1])[ FD ]
Line_2 $$ public void testOrderByAggregatedArgAliasRef() -->Line_10 $$ assertEquals(zoo2.getName(), ((Object[]) list.get(1))[0])[ CD ]
Line_2 $$ public void testOrderByAggregatedArgAliasRef() -->Line_12 $$ assertEquals(zoo4.getName(), ((Object[]) list.get(2))[0])[ CD ]
Line_2 $$ public void testOrderByAggregatedArgAliasRef() -->Line_14 $$ t.commit()[ CD ]
Line_2 $$ public void testOrderByAggregatedArgAliasRef() -->Line_6 $$ List list = s.createQuery("select z.name as zname, count(*) as cnt from Zoo z group by z.name order by cnt desc, zname").list()[ CD ]
Line_6 $$ List list = s.createQuery("select z.name as zname, count(*) as cnt from Zoo z group by z.name order by cnt desc, zname").list()-->Line_7 $$ assertEquals(3, list.size())[ FD ]
Line_2 $$ public void testOrderByAggregatedArgAliasRef() -->Line_15 $$ s.close()[ CD ]
Line_2 $$ public void testOrderByAggregatedArgAliasRef() -->Line_3 $$ createData()[ CD ]
Line_6 $$ List list = s.createQuery("select z.name as zname, count(*) as cnt from Zoo z group by z.name order by cnt desc, zname").list()-->Line_11 $$ assertEquals(Long.valueOf(1), ((Object[]) list.get(1))[1])[ FD ]
Line_2 $$ public void testOrderByAggregatedArgAliasRef() -->Line_4 $$ Session s = openSession()[ CD ]
Line_2 $$ public void testOrderByAggregatedArgAliasRef() -->Line_7 $$ assertEquals(3, list.size())[ CD ]
Line_6 $$ List list = s.createQuery("select z.name as zname, count(*) as cnt from Zoo z group by z.name order by cnt desc, zname").list()-->Line_8 $$ assertEquals(zoo3.getName(), ((Object[]) list.get(0))[0])[ FD ]
Line_2 $$ public void testOrderByAggregatedArgAliasRef() -->Line_13 $$ assertEquals(Long.valueOf(1), ((Object[]) list.get(2))[1])[ CD ]
Line_2 $$ public void testOrderByAggregatedArgAliasRef() -->Line_16 $$ cleanupData()[ CD ]
Line_6 $$ List list = s.createQuery("select z.name as zname, count(*) as cnt from Zoo z group by z.name order by cnt desc, zname").list()-->Line_9 $$ assertEquals(Long.valueOf(2), ((Object[]) list.get(0))[1])[ FD ]
Line_4 $$ Session s = openSession()-->Line_5 $$ Transaction t = s.beginTransaction()[ FD ]
Line_6 $$ List list = s.createQuery("select z.name as zname, count(*) as cnt from Zoo z group by z.name order by cnt desc, zname").list()-->Line_12 $$ assertEquals(zoo4.getName(), ((Object[]) list.get(2))[0])[ FD ]
Line_6 $$ List list = s.createQuery("select z.name as zname, count(*) as cnt from Zoo z group by z.name order by cnt desc, zname").list()-->Line_10 $$ assertEquals(zoo2.getName(), ((Object[]) list.get(1))[0])[ FD ]
Line_5 $$ Transaction t = s.beginTransaction()-->Line_14 $$ t.commit()[ FD ]
Line_2 $$ public void testOrderByAggregatedArgAliasRef() -->Line_5 $$ Transaction t = s.beginTransaction()[ CD ]
Line_4 $$ Session s = openSession()-->Line_6 $$ List list = s.createQuery("select z.name as zname, count(*) as cnt from Zoo z group by z.name order by cnt desc, zname").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_15 $$ s.close()[ FD ]
Line_2 $$ public void testOrderByAggregatedArgAliasRef() -->Line_11 $$ assertEquals(Long.valueOf(1), ((Object[]) list.get(1))[1])[ CD ]
Line_2 $$ public void testOrderByAggregatedArgAliasRef() -->Line_9 $$ assertEquals(Long.valueOf(2), ((Object[]) list.get(0))[1])[ CD ]
