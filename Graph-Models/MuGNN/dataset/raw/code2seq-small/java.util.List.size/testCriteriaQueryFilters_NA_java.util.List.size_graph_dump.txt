Line_2 $$ public void testCriteriaQueryFilters() -->Line_7 $$ session.enableFilter("region").setParameter("region", "APAC")[ CD ]
Line_2 $$ public void testCriteriaQueryFilters() -->Line_3 $$ log.info("Starting Criteria-query filter tests")[ CD ]
Line_2 $$ public void testCriteriaQueryFilters() -->Line_17 $$ session.close()[ CD ]
Line_2 $$ public void testCriteriaQueryFilters() -->Line_9 $$ session.enableFilter("effectiveDate").setParameter("asOfDate", testData.lastMonth.getTime())[ CD ]
Line_6 $$ Session session = openSession()-->Line_17 $$ session.close()[ FD ]
Line_2 $$ public void testCriteriaQueryFilters() -->Line_13 $$ assertEquals("Incorrect order count", 1, ((Salesperson) salespersons.get(0)).getOrders().size())[ CD ]
Line_2 $$ public void testCriteriaQueryFilters() -->Line_10 $$ log.info("Criteria query against Salesperson...")[ CD ]
Line_2 $$ public void testCriteriaQueryFilters() -->Line_6 $$ Session session = openSession()[ CD ]
Line_6 $$ Session session = openSession()-->Line_7 $$ session.enableFilter("region").setParameter("region", "APAC")[ FD ]
Line_6 $$ Session session = openSession()-->Line_15 $$ List products = session.createCriteria(Product.class).add(Restrictions.eq("stockNumber", 124)).list()[ FD ]
Line_2 $$ public void testCriteriaQueryFilters() -->Line_18 $$ testData.release()[ CD ]
Line_2 $$ public void testCriteriaQueryFilters() -->Line_5 $$ testData.prepare()[ CD ]
Line_2 $$ public void testCriteriaQueryFilters() -->Line_11 $$ List salespersons = session.createCriteria(Salesperson.class).setFetchMode("orders", FetchMode.JOIN).list()[ CD ]
Line_6 $$ Session session = openSession()-->Line_11 $$ List salespersons = session.createCriteria(Salesperson.class).setFetchMode("orders", FetchMode.JOIN).list()[ FD ]
Line_11 $$ List salespersons = session.createCriteria(Salesperson.class).setFetchMode("orders", FetchMode.JOIN).list()-->Line_12 $$ assertEquals("Incorrect salesperson count", 1, salespersons.size())[ FD ]
Line_4 $$ TestData testData = new TestData()-->Line_18 $$ testData.release()[ FD ]
Line_4 $$ TestData testData = new TestData()-->Line_5 $$ testData.prepare()[ FD ]
Line_2 $$ public void testCriteriaQueryFilters() -->Line_8 $$ session.enableFilter("fulfilledOrders").setParameter("asOfDate", testData.lastMonth.getTime())[ CD ]
Line_6 $$ Session session = openSession()-->Line_9 $$ session.enableFilter("effectiveDate").setParameter("asOfDate", testData.lastMonth.getTime())[ FD ]
Line_6 $$ Session session = openSession()-->Line_8 $$ session.enableFilter("fulfilledOrders").setParameter("asOfDate", testData.lastMonth.getTime())[ FD ]
Line_2 $$ public void testCriteriaQueryFilters() -->Line_4 $$ TestData testData = new TestData()[ CD ]
Line_2 $$ public void testCriteriaQueryFilters() -->Line_12 $$ assertEquals("Incorrect salesperson count", 1, salespersons.size())[ CD ]
Line_15 $$ List products = session.createCriteria(Product.class).add(Restrictions.eq("stockNumber", 124)).list()-->Line_16 $$ assertEquals("Incorrect product count", 1, products.size())[ FD ]
Line_2 $$ public void testCriteriaQueryFilters() -->Line_16 $$ assertEquals("Incorrect product count", 1, products.size())[ CD ]
Line_11 $$ List salespersons = session.createCriteria(Salesperson.class).setFetchMode("orders", FetchMode.JOIN).list()-->Line_13 $$ assertEquals("Incorrect order count", 1, ((Salesperson) salespersons.get(0)).getOrders().size())[ FD ]
Line_2 $$ public void testCriteriaQueryFilters() -->Line_14 $$ log.info("Criteria query against Product...")[ CD ]
Line_2 $$ public void testCriteriaQueryFilters() -->Line_15 $$ List products = session.createCriteria(Product.class).add(Restrictions.eq("stockNumber", 124)).list()[ CD ]
