Line_2 $$ public List<DomStub> getChildrenByName(final CharSequence name, @Nullable final String nsKey) -->Line_8 $$ final List<DomStub> result = new SmartList<DomStub>()[ CD ]
Line_3 $$ final List<DomStub> stubs = getChildrenStubs()-->Line_11 $$ final DomStub stub = stubs.get(i)[ FD ]
Line_2 $$ public List<DomStub> getChildrenByName(final CharSequence name, @Nullable final String nsKey) -->Line_12 $$ if (XmlUtil.getLocalName(stub.getName()).equals(name) && Comparing.equal(s, stub.getNamespaceKey())) [ FD ]
Line_11 $$ final DomStub stub = stubs.get(i)-->Line_12 $$ if (XmlUtil.getLocalName(stub.getName()).equals(name) && Comparing.equal(s, stub.getNamespaceKey())) [ FD ]
Line_2 $$ public List<DomStub> getChildrenByName(final CharSequence name, @Nullable final String nsKey) -->Line_16 $$ return result[ CD ]
Line_2 $$ public List<DomStub> getChildrenByName(final CharSequence name, @Nullable final String nsKey) -->Line_3 $$ final List<DomStub> stubs = getChildrenStubs()[ CD ]
Line_8 $$ final List<DomStub> result = new SmartList<DomStub>()-->Line_13 $$ result.add(stub)[ FD ]
Line_2 $$ public List<DomStub> getChildrenByName(final CharSequence name, @Nullable final String nsKey) -->Line_7 $$ final String s = nsKey == null ? "" : nsKey[ CD ]
Line_7 $$ final String s = nsKey == null ? "" : nsKey-->Line_12 $$ if (XmlUtil.getLocalName(stub.getName()).equals(name) && Comparing.equal(s, stub.getNamespaceKey())) [ FD ]
Line_3 $$ final List<DomStub> stubs = getChildrenStubs()-->Line_4 $$ if (stubs.isEmpty()) [ FD ]
Line_12 $$ if (XmlUtil.getLocalName(stub.getName()).equals(name) && Comparing.equal(s, stub.getNamespaceKey())) -->Line_13 $$ result.add(stub)[ CD ]
Line_4 $$ if (stubs.isEmpty()) -->Line_5 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public List<DomStub> getChildrenByName(final CharSequence name, @Nullable final String nsKey) -->Line_4 $$ if (stubs.isEmpty()) [ CD ]
Line_11 $$ final DomStub stub = stubs.get(i)-->Line_13 $$ result.add(stub)[ FD ]
