Line_17 $$ Map yogiMap = (Map) resultList.get(0)-->Line_24 $$ assertTrue(Hibernate.isInitialized(((Student) yogiMap.get("s")).getEnrolments()))[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_31 $$ runTest(hqlSelectNewMapExecutor, criteriaExecutor, checker, false)[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_21 $$ assertEquals(shermanExpected, shermanMap.get("s"))[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_23 $$ if (areDynamicNonLazyAssociationsChecked()) [ CD ]
Line_2 $$ public void testMultiSelectNewMapUsingAliasesWithFetchJoinList() throws Exception -->Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() [ CD ]
Line_8 $$ HqlExecutor hqlSelectNewMapExecutor = new HqlExecutor() -->Line_10 $$ return s.createQuery("select new map(s as s, pc as pc) from Student s left join s.preferredCourse pc left join fetch s.enrolments order by s.studentNumber")[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Student.class, "s").createAlias("s.preferredCourse", "pc", Criteria.LEFT_JOIN).setFetchMode("enrolments", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber")).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ CD ]
Line_15 $$ List resultList = (List) results-->Line_17 $$ Map yogiMap = (Map) resultList.get(0)[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_20 $$ Map shermanMap = (Map) resultList.get(1)[ CD ]
Line_17 $$ Map yogiMap = (Map) resultList.get(0)-->Line_18 $$ assertEquals(yogiExpected, yogiMap.get("s"))[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_17 $$ Map yogiMap = (Map) resultList.get(0)[ CD ]
Line_15 $$ List resultList = (List) results-->Line_20 $$ Map shermanMap = (Map) resultList.get(1)[ FD ]
Line_17 $$ Map yogiMap = (Map) resultList.get(0)-->Line_19 $$ assertEquals(yogiExpected.getPreferredCourse(), yogiMap.get("pc"))[ FD ]
Line_23 $$ if (areDynamicNonLazyAssociationsChecked()) -->Line_24 $$ assertTrue(Hibernate.isInitialized(((Student) yogiMap.get("s")).getEnrolments()))[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_16 $$ assertEquals(2, resultList.size())[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_15 $$ List resultList = (List) results[ CD ]
Line_20 $$ Map shermanMap = (Map) resultList.get(1)-->Line_21 $$ assertEquals(shermanExpected, shermanMap.get("s"))[ FD ]
Line_23 $$ if (areDynamicNonLazyAssociationsChecked()) -->Line_27 $$ assertEquals(shermanExpected.getEnrolments(), (((Student) shermanMap.get("s")).getEnrolments()))[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_19 $$ assertEquals(yogiExpected.getPreferredCourse(), yogiMap.get("pc"))[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_10 $$ return s.createQuery("select new map(s as s, pc as pc) from Student s left join s.preferredCourse pc left join fetch s.enrolments order by s.studentNumber")[ FD ]
Line_20 $$ Map shermanMap = (Map) resultList.get(1)-->Line_27 $$ assertEquals(shermanExpected.getEnrolments(), (((Student) shermanMap.get("s")).getEnrolments()))[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_22 $$ assertNull(shermanMap.get("pc"))[ CD ]
Line_20 $$ Map shermanMap = (Map) resultList.get(1)-->Line_26 $$ assertTrue(Hibernate.isInitialized(((Student) shermanMap.get("s")).getEnrolments()))[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Student.class, "s").createAlias("s.preferredCourse", "pc", Criteria.LEFT_JOIN).setFetchMode("enrolments", FetchMode.JOIN).addOrder(Order.asc("s.studentNumber")).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)[ FD ]
Line_23 $$ if (areDynamicNonLazyAssociationsChecked()) -->Line_25 $$ assertEquals(yogiExpected.getEnrolments(), ((Student) yogiMap.get("s")).getEnrolments())[ CD ]
Line_20 $$ Map shermanMap = (Map) resultList.get(1)-->Line_22 $$ assertNull(shermanMap.get("pc"))[ FD ]
Line_23 $$ if (areDynamicNonLazyAssociationsChecked()) -->Line_26 $$ assertTrue(Hibernate.isInitialized(((Student) shermanMap.get("s")).getEnrolments()))[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_18 $$ assertEquals(yogiExpected, yogiMap.get("s"))[ CD ]
Line_2 $$ public void testMultiSelectNewMapUsingAliasesWithFetchJoinList() throws Exception -->Line_31 $$ runTest(hqlSelectNewMapExecutor, criteriaExecutor, checker, false)[ CD ]
Line_17 $$ Map yogiMap = (Map) resultList.get(0)-->Line_25 $$ assertEquals(yogiExpected.getEnrolments(), ((Student) yogiMap.get("s")).getEnrolments())[ FD ]
Line_15 $$ List resultList = (List) results-->Line_16 $$ assertEquals(2, resultList.size())[ FD ]
Line_8 $$ HqlExecutor hqlSelectNewMapExecutor = new HqlExecutor() -->Line_10 $$ return s.createQuery("select new map(s as s, pc as pc) from Student s left join s.preferredCourse pc left join fetch s.enrolments order by s.studentNumber")[ CD ]
