Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_10 $$ LogLevel logLevel = processBuilder.getLogLevel()[ CD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_7 $$ Collection<URL> workerClassPath = classPathRegistry.getClassPath("WORKER_PROCESS").getAsURLs()[ CD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_9 $$ Collection<File> applicationClasspath = processBuilder.getApplicationClasspath()[ CD ]
Line_15 $$ DataOutputStream outstr = new DataOutputStream(new EncodedStream.EncodedOutput(bytes))-->Line_25 $$ outstr.writeUTF(entry.toString())[ FD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_4 $$ execSpec.classpath(classPathRegistry.getClassPath("WORKER_MAIN").getAsFiles())[ FD ]
Line_15 $$ DataOutputStream outstr = new DataOutputStream(new EncodedStream.EncodedOutput(bytes))-->Line_21 $$ outstr.writeUTF(requestedSecurityManager == null ? "" : requestedSecurityManager.toString())[ FD ]
Line_15 $$ DataOutputStream outstr = new DataOutputStream(new EncodedStream.EncodedOutput(bytes))-->Line_29 $$ outstr.writeInt(sharedPackages.size())[ FD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_6 $$ execSpec.systemProperty("java.security.manager", "jarjar." + BootstrapSecurityManager.class.getName())[ FD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_6 $$ execSpec.systemProperty("java.security.manager", "jarjar." + BootstrapSecurityManager.class.getName())[ CD ]
Line_11 $$ Set<String> sharedPackages = processBuilder.getSharedPackages()-->Line_29 $$ outstr.writeInt(sharedPackages.size())[ FD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_3 $$ execSpec.setMain("jarjar." + GradleWorkerMain.class.getName())[ FD ]
Line_15 $$ DataOutputStream outstr = new DataOutputStream(new EncodedStream.EncodedOutput(bytes))-->Line_19 $$ outstr.writeUTF(file.getAbsolutePath())[ FD ]
Line_15 $$ DataOutputStream outstr = new DataOutputStream(new EncodedStream.EncodedOutput(bytes))-->Line_36 $$ outstr.writeUTF(entry.toString())[ FD ]
Line_24 $$ for (URL entry : workerClassPath) -->Line_36 $$ outstr.writeUTF(entry.toString())[ FD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_5 $$ Object requestedSecurityManager = execSpec.getSystemProperties().get("java.security.manager")[ FD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_46 $$ execSpec.setStandardInput(new ByteArrayInputStream(bytes.toByteArray()))[ FD ]
Line_15 $$ DataOutputStream outstr = new DataOutputStream(new EncodedStream.EncodedOutput(bytes))-->Line_41 $$ outstr.write(serializedWorker)[ FD ]
Line_15 $$ DataOutputStream outstr = new DataOutputStream(new EncodedStream.EncodedOutput(bytes))-->Line_31 $$ outstr.writeUTF(str)[ FD ]
Line_5 $$ Object requestedSecurityManager = execSpec.getSystemProperties().get("java.security.manager")-->Line_21 $$ outstr.writeUTF(requestedSecurityManager == null ? "" : requestedSecurityManager.toString())[ FD ]
Line_15 $$ DataOutputStream outstr = new DataOutputStream(new EncodedStream.EncodedOutput(bytes))-->Line_42 $$ outstr.flush()[ FD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_8 $$ ActionExecutionWorker worker = create()[ CD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_11 $$ Set<String> sharedPackages = processBuilder.getSharedPackages()[ CD ]
Line_15 $$ DataOutputStream outstr = new DataOutputStream(new EncodedStream.EncodedOutput(bytes))-->Line_40 $$ outstr.writeInt(serializedWorker.length)[ FD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_46 $$ execSpec.setStandardInput(new ByteArrayInputStream(bytes.toByteArray()))[ CD ]
Line_30 $$ for (String str : sharedPackages) -->Line_31 $$ outstr.writeUTF(str)[ FD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_5 $$ Object requestedSecurityManager = execSpec.getSystemProperties().get("java.security.manager")[ CD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_3 $$ execSpec.setMain("jarjar." + GradleWorkerMain.class.getName())[ CD ]
Line_18 $$ for (File file : applicationClasspath) -->Line_19 $$ outstr.writeUTF(file.getAbsolutePath())[ FD ]
Line_24 $$ for (URL entry : workerClassPath) -->Line_25 $$ outstr.writeUTF(entry.toString())[ FD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_4 $$ execSpec.classpath(classPathRegistry.getClassPath("WORKER_MAIN").getAsFiles())[ CD ]
