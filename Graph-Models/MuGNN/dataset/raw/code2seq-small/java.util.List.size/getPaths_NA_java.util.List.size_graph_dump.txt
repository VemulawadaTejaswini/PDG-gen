Line_14 $$ if (files.isEmpty()) -->Line_15 $$ return Collections.emptySet()[ CD ]
Line_12 $$ List<File> files = new SmartList<File>()-->Line_13 $$ collectMatchedFiles(new File(myPathPattern.substring(0, dirIndex)), Pattern.compile(FileUtil.convertAntToRegexp(myPathPattern.substring(dirIndex + File.separator.length()))), files)[ FD ]
Line_18 $$ SmartHashSet<String> result = new SmartHashSet<String>()-->Line_19 $$ result.ensureCapacity(files.size())[ FD ]
Line_8 $$ int dirIndex = myPathPattern.lastIndexOf(File.separator)-->Line_13 $$ collectMatchedFiles(new File(myPathPattern.substring(0, dirIndex)), Pattern.compile(FileUtil.convertAntToRegexp(myPathPattern.substring(dirIndex + File.separator.length()))), files)[ FD ]
Line_25 $$ File lastFile = null-->Line_27 $$ if (lastFile != null) [ FD ]
Line_12 $$ List<File> files = new SmartList<File>()-->Line_14 $$ if (files.isEmpty()) [ FD ]
Line_20 $$ for (File file : files) -->Line_21 $$ result.add(file.getPath())[ FD ]
Line_17 $$ if (myShowAll) -->Line_36 $$ return Collections.singleton(lastFile.getPath())[ CD ]
Line_17 $$ if (myShowAll) -->Line_18 $$ SmartHashSet<String> result = new SmartHashSet<String>()[ CD ]
Line_18 $$ SmartHashSet<String> result = new SmartHashSet<String>()-->Line_21 $$ result.add(file.getPath())[ FD ]
Line_32 $$ lastFile = file-->Line_36 $$ return Collections.singleton(lastFile.getPath())[ FD ]
Line_25 $$ File lastFile = null-->Line_32 $$ lastFile = file[ FD ]
Line_20 $$ for (File file : files) -->Line_28 $$ if (file.lastModified() > lastFile.lastModified()) [ FD ]
Line_8 $$ int dirIndex = myPathPattern.lastIndexOf(File.separator)-->Line_9 $$ if (dirIndex == -1) [ FD ]
Line_25 $$ File lastFile = null-->Line_36 $$ return Collections.singleton(lastFile.getPath())[ FD ]
Line_12 $$ List<File> files = new SmartList<File>()-->Line_19 $$ result.ensureCapacity(files.size())[ FD ]
Line_17 $$ if (myShowAll) -->Line_23 $$ return result[ CD ]
Line_17 $$ if (myShowAll) -->Line_19 $$ result.ensureCapacity(files.size())[ CD ]
Line_25 $$ File lastFile = null-->Line_29 $$ lastFile = file[ FD ]
Line_25 $$ File lastFile = null-->Line_28 $$ if (file.lastModified() > lastFile.lastModified()) [ FD ]
Line_29 $$ lastFile = file-->Line_32 $$ lastFile = file[ FD ]
Line_29 $$ lastFile = file-->Line_36 $$ return Collections.singleton(lastFile.getPath())[ FD ]
Line_20 $$ for (File file : files) -->Line_32 $$ lastFile = file[ FD ]
Line_9 $$ if (dirIndex == -1) -->Line_10 $$ return Collections.emptySet()[ CD ]
Line_17 $$ if (myShowAll) -->Line_25 $$ File lastFile = null[ CD ]
Line_5 $$ if (logFile.exists()) -->Line_6 $$ return Collections.singleton(myPathPattern)[ CD ]
Line_27 $$ if (lastFile != null) -->Line_32 $$ lastFile = file[ CD ]
Line_27 $$ if (lastFile != null) -->Line_28 $$ if (file.lastModified() > lastFile.lastModified()) [ CD ]
Line_28 $$ if (file.lastModified() > lastFile.lastModified()) -->Line_29 $$ lastFile = file[ CD ]
Line_20 $$ for (File file : files) -->Line_29 $$ lastFile = file[ FD ]
Line_4 $$ File logFile = new File(myPathPattern)-->Line_5 $$ if (logFile.exists()) [ FD ]
