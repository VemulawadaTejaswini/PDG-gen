Line_4 $$ if (myConversionRegions.isEmpty()) -->Line_12 $$ int currentOffset = 0[ CD ]
Line_2 $$ private String generateResult() -->Line_4 $$ if (myConversionRegions.isEmpty()) [ CD ]
Line_12 $$ int currentOffset = 0-->Line_17 $$ currentOffset = conversionRegion.end[ FD ]
Line_11 $$ result = new StringBuilder()-->Line_16 $$ result.append(conversionRegion.toUpperCase ? region.toUpperCase(Locale.getDefault()) : region.toLowerCase(Locale.getDefault()))[ FD ]
Line_17 $$ currentOffset = conversionRegion.end-->Line_19 $$ result.append(myReplacement, currentOffset, myReplacement.length())[ FD ]
Line_3 $$ StringBuilder result-->Line_21 $$ return result.toString()[ FD ]
Line_4 $$ if (myConversionRegions.isEmpty()) -->Line_11 $$ result = new StringBuilder()[ CD ]
Line_11 $$ result = new StringBuilder()-->Line_14 $$ result.append(myReplacement, currentOffset, conversionRegion.start)[ FD ]
Line_5 $$ result = myReplacement-->Line_16 $$ result.append(conversionRegion.toUpperCase ? region.toUpperCase(Locale.getDefault()) : region.toLowerCase(Locale.getDefault()))[ FD ]
Line_12 $$ int currentOffset = 0-->Line_19 $$ result.append(myReplacement, currentOffset, myReplacement.length())[ FD ]
Line_4 $$ if (myConversionRegions.isEmpty()) -->Line_7 $$ CaseConversionRegion lastRegion = myConversionRegions.get(myConversionRegions.size() - 1)[ CD ]
Line_11 $$ result = new StringBuilder()-->Line_21 $$ return result.toString()[ FD ]
Line_5 $$ result = myReplacement-->Line_14 $$ result.append(myReplacement, currentOffset, conversionRegion.start)[ FD ]
Line_3 $$ StringBuilder result-->Line_16 $$ result.append(conversionRegion.toUpperCase ? region.toUpperCase(Locale.getDefault()) : region.toLowerCase(Locale.getDefault()))[ FD ]
Line_15 $$ String region = myReplacement.substring(conversionRegion.start, conversionRegion.end)-->Line_16 $$ result.append(conversionRegion.toUpperCase ? region.toUpperCase(Locale.getDefault()) : region.toLowerCase(Locale.getDefault()))[ FD ]
Line_3 $$ StringBuilder result-->Line_11 $$ result = new StringBuilder()[ FD ]
Line_5 $$ result = myReplacement-->Line_11 $$ result = new StringBuilder()[ FD ]
Line_12 $$ int currentOffset = 0-->Line_14 $$ result.append(myReplacement, currentOffset, conversionRegion.start)[ FD ]
Line_4 $$ if (myConversionRegions.isEmpty()) -->Line_19 $$ result.append(myReplacement, currentOffset, myReplacement.length())[ CD ]
Line_5 $$ result = myReplacement-->Line_21 $$ return result.toString()[ FD ]
Line_11 $$ result = new StringBuilder()-->Line_19 $$ result.append(myReplacement, currentOffset, myReplacement.length())[ FD ]
Line_2 $$ private String generateResult() -->Line_21 $$ return result.toString()[ CD ]
Line_8 $$ if (lastRegion.end < 0 || lastRegion.end > myReplacement.length()) -->Line_9 $$ lastRegion.end = myReplacement.length()[ CD ]
Line_2 $$ private String generateResult() -->Line_3 $$ StringBuilder result[ CD ]
Line_3 $$ StringBuilder result-->Line_19 $$ result.append(myReplacement, currentOffset, myReplacement.length())[ FD ]
Line_3 $$ StringBuilder result-->Line_5 $$ result = myReplacement[ FD ]
Line_4 $$ if (myConversionRegions.isEmpty()) -->Line_8 $$ if (lastRegion.end < 0 || lastRegion.end > myReplacement.length()) [ CD ]
Line_5 $$ result = myReplacement-->Line_19 $$ result.append(myReplacement, currentOffset, myReplacement.length())[ FD ]
Line_4 $$ if (myConversionRegions.isEmpty()) -->Line_5 $$ result = myReplacement[ CD ]
Line_3 $$ StringBuilder result-->Line_14 $$ result.append(myReplacement, currentOffset, conversionRegion.start)[ FD ]
