Line_3 $$ PsiJavaCodeReferenceElement nameRef = annotation.getNameReferenceElement()-->Line_6 $$ PsiClass aClass = (PsiClass) nameRef.resolve()[ FD ]
Line_30 $$ if (!missed.isEmpty()) -->Line_37 $$ HighlightInfo info = HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(nameRef).descriptionAndTooltip(description).create()[ CD ]
Line_11 $$ final String name = attribute.getName()-->Line_12 $$ if (name != null) [ FD ]
Line_12 $$ if (name != null) -->Line_13 $$ names.add(name)[ CD ]
Line_21 $$ if (PsiUtil.isAnnotationMethod(method)) -->Line_22 $$ PsiAnnotationMethod annotationMethod = (PsiAnnotationMethod) method[ CD ]
Line_30 $$ if (!missed.isEmpty()) -->Line_31 $$ StringBuffer buff = new StringBuffer("'" + missed.get(0) + "'")[ CD ]
Line_32 $$ for (int i = 1; i < missed.size(); i++) -->Line_33 $$ buff.append(", ")[ CD ]
Line_4 $$ if (nameRef == null)-->Line_5 $$ return null[ CD ]
Line_8 $$ Set<String> names = new HashSet<String>()-->Line_15 $$ names.add(PsiAnnotation.DEFAULT_REFERENCED_METHOD_NAME)[ FD ]
Line_6 $$ PsiClass aClass = (PsiClass) nameRef.resolve()-->Line_18 $$ PsiMethod[] annotationMethods = aClass.getMethods()[ FD ]
Line_31 $$ StringBuffer buff = new StringBuffer("'" + missed.get(0) + "'")-->Line_34 $$ buff.append("'").append(missed.get(i)).append("'")[ FD ]
Line_2 $$ static HighlightInfo checkMissingAttributes(PsiAnnotation annotation) -->Line_38 $$ IntentionAction fix = QuickFixFactory.getInstance().createAddMissingRequiredAnnotationParametersFix(annotation, annotationMethods, missed)[ FD ]
Line_7 $$ if (aClass != null && aClass.isAnnotationType()) -->Line_19 $$ List<String> missed = new ArrayList<String>()[ CD ]
Line_8 $$ Set<String> names = new HashSet<String>()-->Line_24 $$ if (!names.contains(annotationMethod.getName())) [ FD ]
Line_2 $$ static HighlightInfo checkMissingAttributes(PsiAnnotation annotation) -->Line_4 $$ if (nameRef == null)[ CD ]
Line_3 $$ PsiJavaCodeReferenceElement nameRef = annotation.getNameReferenceElement()-->Line_4 $$ if (nameRef == null)[ FD ]
Line_2 $$ static HighlightInfo checkMissingAttributes(PsiAnnotation annotation) -->Line_7 $$ if (aClass != null && aClass.isAnnotationType()) [ CD ]
Line_2 $$ static HighlightInfo checkMissingAttributes(PsiAnnotation annotation) -->Line_43 $$ return null[ CD ]
Line_2 $$ static HighlightInfo checkMissingAttributes(PsiAnnotation annotation) -->Line_6 $$ PsiClass aClass = (PsiClass) nameRef.resolve()[ CD ]
Line_3 $$ PsiJavaCodeReferenceElement nameRef = annotation.getNameReferenceElement()-->Line_37 $$ HighlightInfo info = HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(nameRef).descriptionAndTooltip(description).create()[ FD ]
Line_30 $$ if (!missed.isEmpty()) -->Line_38 $$ IntentionAction fix = QuickFixFactory.getInstance().createAddMissingRequiredAnnotationParametersFix(annotation, annotationMethods, missed)[ CD ]
Line_19 $$ List<String> missed = new ArrayList<String>()-->Line_30 $$ if (!missed.isEmpty()) [ FD ]
Line_36 $$ String description = JavaErrorMessages.message("annotation.missing.attribute", buff)-->Line_37 $$ HighlightInfo info = HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(nameRef).descriptionAndTooltip(description).create()[ FD ]
Line_18 $$ PsiMethod[] annotationMethods = aClass.getMethods()-->Line_38 $$ IntentionAction fix = QuickFixFactory.getInstance().createAddMissingRequiredAnnotationParametersFix(annotation, annotationMethods, missed)[ FD ]
Line_19 $$ List<String> missed = new ArrayList<String>()-->Line_32 $$ for (int i = 1; i < missed.size(); i++) [ FD ]
Line_24 $$ if (!names.contains(annotationMethod.getName())) -->Line_25 $$ missed.add(annotationMethod.getName())[ CD ]
Line_32 $$ for (int i = 1; i < missed.size(); i++) -->Line_34 $$ buff.append("'").append(missed.get(i)).append("'")[ CD ]
Line_32 $$ for (int i = 1; i < missed.size(); i++) -->Line_34 $$ buff.append("'").append(missed.get(i)).append("'")[ FD ]
Line_37 $$ HighlightInfo info = HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(nameRef).descriptionAndTooltip(description).create()-->Line_39 $$ QuickFixAction.registerQuickFixAction(info, fix)[ FD ]
Line_8 $$ Set<String> names = new HashSet<String>()-->Line_13 $$ names.add(name)[ FD ]
Line_10 $$ for (PsiNameValuePair attribute : attributes) -->Line_11 $$ final String name = attribute.getName()[ FD ]
Line_30 $$ if (!missed.isEmpty()) -->Line_36 $$ String description = JavaErrorMessages.message("annotation.missing.attribute", buff)[ CD ]
Line_22 $$ PsiAnnotationMethod annotationMethod = (PsiAnnotationMethod) method-->Line_25 $$ missed.add(annotationMethod.getName())[ FD ]
Line_7 $$ if (aClass != null && aClass.isAnnotationType()) -->Line_9 $$ PsiNameValuePair[] attributes = annotation.getParameterList().getAttributes()[ CD ]
Line_30 $$ if (!missed.isEmpty()) -->Line_40 $$ return info[ CD ]
Line_7 $$ if (aClass != null && aClass.isAnnotationType()) -->Line_18 $$ PsiMethod[] annotationMethods = aClass.getMethods()[ CD ]
Line_23 $$ if (annotationMethod.getDefaultValue() == null) -->Line_24 $$ if (!names.contains(annotationMethod.getName())) [ CD ]
Line_31 $$ StringBuffer buff = new StringBuffer("'" + missed.get(0) + "'")-->Line_33 $$ buff.append(", ")[ FD ]
Line_19 $$ List<String> missed = new ArrayList<String>()-->Line_25 $$ missed.add(annotationMethod.getName())[ FD ]
Line_6 $$ PsiClass aClass = (PsiClass) nameRef.resolve()-->Line_7 $$ if (aClass != null && aClass.isAnnotationType()) [ FD ]
Line_20 $$ for (PsiMethod method : annotationMethods) -->Line_21 $$ if (PsiUtil.isAnnotationMethod(method)) [ FD ]
Line_7 $$ if (aClass != null && aClass.isAnnotationType()) -->Line_8 $$ Set<String> names = new HashSet<String>()[ CD ]
Line_30 $$ if (!missed.isEmpty()) -->Line_39 $$ QuickFixAction.registerQuickFixAction(info, fix)[ CD ]
Line_19 $$ List<String> missed = new ArrayList<String>()-->Line_38 $$ IntentionAction fix = QuickFixFactory.getInstance().createAddMissingRequiredAnnotationParametersFix(annotation, annotationMethods, missed)[ FD ]
Line_2 $$ static HighlightInfo checkMissingAttributes(PsiAnnotation annotation) -->Line_3 $$ PsiJavaCodeReferenceElement nameRef = annotation.getNameReferenceElement()[ FD ]
Line_38 $$ IntentionAction fix = QuickFixFactory.getInstance().createAddMissingRequiredAnnotationParametersFix(annotation, annotationMethods, missed)-->Line_39 $$ QuickFixAction.registerQuickFixAction(info, fix)[ FD ]
Line_11 $$ final String name = attribute.getName()-->Line_13 $$ names.add(name)[ FD ]
Line_21 $$ if (PsiUtil.isAnnotationMethod(method)) -->Line_23 $$ if (annotationMethod.getDefaultValue() == null) [ CD ]
Line_19 $$ List<String> missed = new ArrayList<String>()-->Line_31 $$ StringBuffer buff = new StringBuffer("'" + missed.get(0) + "'")[ FD ]
Line_2 $$ static HighlightInfo checkMissingAttributes(PsiAnnotation annotation) -->Line_3 $$ PsiJavaCodeReferenceElement nameRef = annotation.getNameReferenceElement()[ CD ]
Line_2 $$ static HighlightInfo checkMissingAttributes(PsiAnnotation annotation) -->Line_9 $$ PsiNameValuePair[] attributes = annotation.getParameterList().getAttributes()[ FD ]
Line_31 $$ StringBuffer buff = new StringBuffer("'" + missed.get(0) + "'")-->Line_36 $$ String description = JavaErrorMessages.message("annotation.missing.attribute", buff)[ FD ]
Line_22 $$ PsiAnnotationMethod annotationMethod = (PsiAnnotationMethod) method-->Line_23 $$ if (annotationMethod.getDefaultValue() == null) [ FD ]
Line_7 $$ if (aClass != null && aClass.isAnnotationType()) -->Line_30 $$ if (!missed.isEmpty()) [ CD ]
Line_22 $$ PsiAnnotationMethod annotationMethod = (PsiAnnotationMethod) method-->Line_24 $$ if (!names.contains(annotationMethod.getName())) [ FD ]
Line_19 $$ List<String> missed = new ArrayList<String>()-->Line_34 $$ buff.append("'").append(missed.get(i)).append("'")[ FD ]
Line_12 $$ if (name != null) -->Line_15 $$ names.add(PsiAnnotation.DEFAULT_REFERENCED_METHOD_NAME)[ CD ]
Line_30 $$ if (!missed.isEmpty()) -->Line_32 $$ for (int i = 1; i < missed.size(); i++) [ CD ]
