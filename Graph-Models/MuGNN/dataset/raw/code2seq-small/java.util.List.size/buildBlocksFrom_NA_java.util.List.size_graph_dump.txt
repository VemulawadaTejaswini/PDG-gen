Line_7 $$ for (int i = 0; i < methodCall.size(); i++) -->Line_18 $$ CallChunkBlockBuilder builder = new CallChunkBlockBuilder(mySettings, myJavaSettings)[ CD ]
Line_3 $$ List<ChainedCallChunk> methodCall = splitMethodCallOnChunksByDots(nodes)-->Line_11 $$ myWrap = createCallChunkWrap(i, methodCall)[ FD ]
Line_7 $$ for (int i = 0; i < methodCall.size(); i++) -->Line_11 $$ myWrap = createCallChunkWrap(i, methodCall)[ FD ]
Line_3 $$ List<ChainedCallChunk> methodCall = splitMethodCallOnChunksByDots(nodes)-->Line_7 $$ for (int i = 0; i < methodCall.size(); i++) [ FD ]
Line_9 $$ if (isMethodCall(currentCallChunk) || isComment(currentCallChunk)) -->Line_10 $$ if (myWrap == null)[ CD ]
Line_3 $$ List<ChainedCallChunk> methodCall = splitMethodCallOnChunksByDots(nodes)-->Line_8 $$ ChainedCallChunk currentCallChunk = methodCall.get(i)[ FD ]
Line_3 $$ List<ChainedCallChunk> methodCall = splitMethodCallOnChunksByDots(nodes)-->Line_13 $$ myChainedCallsAlignment = createCallChunkAlignment(i, methodCall)[ FD ]
Line_18 $$ CallChunkBlockBuilder builder = new CallChunkBlockBuilder(mySettings, myJavaSettings)-->Line_19 $$ blocks.add(builder.create(currentCallChunk.nodes, myWrap, myChainedCallsAlignment))[ FD ]
Line_8 $$ ChainedCallChunk currentCallChunk = methodCall.get(i)-->Line_9 $$ if (isMethodCall(currentCallChunk) || isComment(currentCallChunk)) [ FD ]
Line_10 $$ if (myWrap == null)-->Line_11 $$ myWrap = createCallChunkWrap(i, methodCall)[ CD ]
Line_7 $$ for (int i = 0; i < methodCall.size(); i++) -->Line_19 $$ blocks.add(builder.create(currentCallChunk.nodes, myWrap, myChainedCallsAlignment))[ CD ]
Line_2 $$ private List<Block> buildBlocksFrom(List<ASTNode> nodes) -->Line_21 $$ return blocks[ CD ]
Line_7 $$ for (int i = 0; i < methodCall.size(); i++) -->Line_8 $$ ChainedCallChunk currentCallChunk = methodCall.get(i)[ CD ]
Line_7 $$ for (int i = 0; i < methodCall.size(); i++) -->Line_8 $$ ChainedCallChunk currentCallChunk = methodCall.get(i)[ FD ]
Line_2 $$ private List<Block> buildBlocksFrom(List<ASTNode> nodes) -->Line_7 $$ for (int i = 0; i < methodCall.size(); i++) [ CD ]
Line_7 $$ for (int i = 0; i < methodCall.size(); i++) -->Line_9 $$ if (isMethodCall(currentCallChunk) || isComment(currentCallChunk)) [ CD ]
Line_2 $$ private List<Block> buildBlocksFrom(List<ASTNode> nodes) -->Line_3 $$ List<ChainedCallChunk> methodCall = splitMethodCallOnChunksByDots(nodes)[ CD ]
Line_7 $$ for (int i = 0; i < methodCall.size(); i++) -->Line_13 $$ myChainedCallsAlignment = createCallChunkAlignment(i, methodCall)[ FD ]
Line_9 $$ if (isMethodCall(currentCallChunk) || isComment(currentCallChunk)) -->Line_12 $$ if (myChainedCallsAlignment == null)[ CD ]
Line_6 $$ List<Block> blocks = new ArrayList<Block>()-->Line_19 $$ blocks.add(builder.create(currentCallChunk.nodes, myWrap, myChainedCallsAlignment))[ FD ]
Line_2 $$ private List<Block> buildBlocksFrom(List<ASTNode> nodes) -->Line_3 $$ List<ChainedCallChunk> methodCall = splitMethodCallOnChunksByDots(nodes)[ FD ]
Line_2 $$ private List<Block> buildBlocksFrom(List<ASTNode> nodes) -->Line_6 $$ List<Block> blocks = new ArrayList<Block>()[ CD ]
Line_12 $$ if (myChainedCallsAlignment == null)-->Line_13 $$ myChainedCallsAlignment = createCallChunkAlignment(i, methodCall)[ CD ]
