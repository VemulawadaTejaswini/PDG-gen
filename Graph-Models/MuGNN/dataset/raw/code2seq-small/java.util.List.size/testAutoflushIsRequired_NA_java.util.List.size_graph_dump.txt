Line_6 $$ Publisher publisher = new Publisher()-->Line_33 $$ assertTrue(persistenceContext.getCollectionsByKey().values().contains(publisher.getAuthors()))[ FD ]
Line_4 $$ Session s = openSession()-->Line_37 $$ s.delete(author1)[ FD ]
Line_19 $$ final ActionQueue actionQueue = ((SessionImpl) s).getActionQueue()-->Line_60 $$ assertEquals(0, actionQueue.numberOfCollectionRemovals())[ FD ]
Line_6 $$ Publisher publisher = new Publisher()-->Line_46 $$ Set<Author> authorsOld = publisher.getAuthors()[ FD ]
Line_18 $$ final PersistenceContext persistenceContext = ((SessionImplementor) s).getPersistenceContext()-->Line_22 $$ assertTrue(persistenceContext.getCollectionEntries().containsKey(publisher.getAuthors()))[ FD ]
Line_16 $$ publisher = (Publisher) s.get(Publisher.class, publisher.getId())-->Line_46 $$ Set<Author> authorsOld = publisher.getAuthors()[ FD ]
Line_5 $$ Transaction txn = s.beginTransaction()-->Line_12 $$ txn.commit()[ FD ]
Line_6 $$ Publisher publisher = new Publisher()-->Line_31 $$ assertTrue(persistenceContext.getCollectionEntries().containsKey(publisher.getAuthors()))[ FD ]
Line_4 $$ Session s = openSession()-->Line_11 $$ assertTrue("autoflush entity update", s.createQuery("from Publisher p where p.name='name'").list().size() == 1)[ FD ]
Line_19 $$ final ActionQueue actionQueue = ((SessionImpl) s).getActionQueue()-->Line_35 $$ assertEquals(0, actionQueue.numberOfCollectionRemovals())[ FD ]
Line_5 $$ Transaction txn = s.beginTransaction()-->Line_63 $$ txn.commit()[ FD ]
Line_4 $$ Session s = openSession()-->Line_9 $$ assertTrue("autoflush entity create", s.createQuery("from Publisher p").list().size() == 1)[ FD ]
Line_14 $$ s = openSession()-->Line_62 $$ assertTrue("autoflush delete", s.createQuery("from Publisher p").list().size() == 0)[ FD ]
Line_16 $$ publisher = (Publisher) s.get(Publisher.class, publisher.getId())-->Line_17 $$ assertTrue(publisher.getAuthors().isEmpty())[ FD ]
Line_6 $$ Publisher publisher = new Publisher()-->Line_16 $$ publisher = (Publisher) s.get(Publisher.class, publisher.getId())[ FD ]
Line_14 $$ s = openSession()-->Line_37 $$ s.delete(author1)[ FD ]
Line_19 $$ final ActionQueue actionQueue = ((SessionImpl) s).getActionQueue()-->Line_39 $$ assertEquals(0, actionQueue.numberOfCollectionRemovals())[ FD ]
Line_4 $$ Session s = openSession()-->Line_15 $$ txn = s.beginTransaction()[ FD ]
Line_16 $$ publisher = (Publisher) s.get(Publisher.class, publisher.getId())-->Line_38 $$ publisher.getAuthors().clear()[ FD ]
Line_4 $$ Session s = openSession()-->Line_8 $$ s.save(publisher)[ FD ]
Line_14 $$ s = openSession()-->Line_64 $$ s.close()[ FD ]
Line_18 $$ final PersistenceContext persistenceContext = ((SessionImplementor) s).getPersistenceContext()-->Line_44 $$ assertTrue(persistenceContext.getCollectionsByKey().values().contains(publisher.getAuthors()))[ FD ]
Line_18 $$ final PersistenceContext persistenceContext = ((SessionImplementor) s).getPersistenceContext()-->Line_33 $$ assertTrue(persistenceContext.getCollectionsByKey().values().contains(publisher.getAuthors()))[ FD ]
Line_25 $$ Author author1 = new Author()-->Line_32 $$ assertTrue(persistenceContext.getCollectionEntries().containsKey(author1.getBooks()))[ FD ]
Line_4 $$ Session s = openSession()-->Line_64 $$ s.close()[ FD ]
Line_25 $$ Author author1 = new Author()-->Line_27 $$ publisher.getAuthors().add(author1)[ FD ]
Line_4 $$ Session s = openSession()-->Line_13 $$ s.close()[ FD ]
Line_18 $$ final PersistenceContext persistenceContext = ((SessionImplementor) s).getPersistenceContext()-->Line_54 $$ assertEquals(2, persistenceContext.getCollectionEntries().size())[ FD ]
Line_48 $$ Author author2 = new Author()-->Line_51 $$ publisher.getAuthors().add(author2)[ FD ]
Line_48 $$ Author author2 = new Author()-->Line_49 $$ author2.setName("author2")[ FD ]
Line_18 $$ final PersistenceContext persistenceContext = ((SessionImplementor) s).getPersistenceContext()-->Line_56 $$ assertTrue(persistenceContext.getCollectionEntries().containsKey(publisher.getAuthors()))[ FD ]
Line_6 $$ Publisher publisher = new Publisher()-->Line_43 $$ assertTrue(persistenceContext.getCollectionEntries().containsKey(publisher.getAuthors()))[ FD ]
Line_18 $$ final PersistenceContext persistenceContext = ((SessionImplementor) s).getPersistenceContext()-->Line_31 $$ assertTrue(persistenceContext.getCollectionEntries().containsKey(publisher.getAuthors()))[ FD ]
Line_48 $$ Author author2 = new Author()-->Line_57 $$ assertTrue(persistenceContext.getCollectionEntries().containsKey(author2.getBooks()))[ FD ]
Line_14 $$ s = openSession()-->Line_28 $$ assertTrue("autoflush collection update", s.createQuery("select a from Publisher p join p.authors a").list().size() == 1)[ FD ]
Line_19 $$ final ActionQueue actionQueue = ((SessionImpl) s).getActionQueue()-->Line_24 $$ assertEquals(0, actionQueue.numberOfCollectionRemovals())[ FD ]
Line_16 $$ publisher = (Publisher) s.get(Publisher.class, publisher.getId())-->Line_22 $$ assertTrue(persistenceContext.getCollectionEntries().containsKey(publisher.getAuthors()))[ FD ]
Line_6 $$ Publisher publisher = new Publisher()-->Line_10 $$ publisher.setName("name")[ FD ]
Line_4 $$ Session s = openSession()-->Line_16 $$ publisher = (Publisher) s.get(Publisher.class, publisher.getId())[ FD ]
Line_16 $$ publisher = (Publisher) s.get(Publisher.class, publisher.getId())-->Line_58 $$ assertTrue(persistenceContext.getCollectionsByKey().values().contains(publisher.getAuthors()))[ FD ]
Line_18 $$ final PersistenceContext persistenceContext = ((SessionImplementor) s).getPersistenceContext()-->Line_21 $$ assertEquals(1, persistenceContext.getCollectionsByKey().size())[ FD ]
Line_25 $$ Author author1 = new Author()-->Line_26 $$ author1.setPublisher(publisher)[ FD ]
Line_16 $$ publisher = (Publisher) s.get(Publisher.class, publisher.getId())-->Line_47 $$ publisher.setAuthors(new HashSet<Author>())[ FD ]
Line_6 $$ Publisher publisher = new Publisher()-->Line_8 $$ s.save(publisher)[ FD ]
Line_6 $$ Publisher publisher = new Publisher()-->Line_50 $$ author2.setPublisher(publisher)[ FD ]
Line_6 $$ Publisher publisher = new Publisher()-->Line_58 $$ assertTrue(persistenceContext.getCollectionsByKey().values().contains(publisher.getAuthors()))[ FD ]
Line_16 $$ publisher = (Publisher) s.get(Publisher.class, publisher.getId())-->Line_50 $$ author2.setPublisher(publisher)[ FD ]
Line_6 $$ Publisher publisher = new Publisher()-->Line_7 $$ publisher.setName("name")[ FD ]
Line_5 $$ Transaction txn = s.beginTransaction()-->Line_15 $$ txn = s.beginTransaction()[ FD ]
Line_14 $$ s = openSession()-->Line_61 $$ s.delete(publisher)[ FD ]
Line_4 $$ Session s = openSession()-->Line_14 $$ s = openSession()[ FD ]
Line_48 $$ Author author2 = new Author()-->Line_50 $$ author2.setPublisher(publisher)[ FD ]
Line_18 $$ final PersistenceContext persistenceContext = ((SessionImplementor) s).getPersistenceContext()-->Line_59 $$ assertTrue(persistenceContext.getCollectionsByKey().values().contains(author2.getBooks()))[ FD ]
Line_16 $$ publisher = (Publisher) s.get(Publisher.class, publisher.getId())-->Line_23 $$ assertTrue(persistenceContext.getCollectionsByKey().values().contains(publisher.getAuthors()))[ FD ]
Line_4 $$ Session s = openSession()-->Line_5 $$ Transaction txn = s.beginTransaction()[ FD ]
Line_4 $$ Session s = openSession()-->Line_40 $$ assertTrue("autoflush collection update", s.createQuery("select a from Publisher p join p.authors a").list().size() == 0)[ FD ]
Line_16 $$ publisher = (Publisher) s.get(Publisher.class, publisher.getId())-->Line_56 $$ assertTrue(persistenceContext.getCollectionEntries().containsKey(publisher.getAuthors()))[ FD ]
Line_18 $$ final PersistenceContext persistenceContext = ((SessionImplementor) s).getPersistenceContext()-->Line_55 $$ assertEquals(2, persistenceContext.getCollectionsByKey().size())[ FD ]
Line_16 $$ publisher = (Publisher) s.get(Publisher.class, publisher.getId())-->Line_33 $$ assertTrue(persistenceContext.getCollectionsByKey().values().contains(publisher.getAuthors()))[ FD ]
Line_6 $$ Publisher publisher = new Publisher()-->Line_56 $$ assertTrue(persistenceContext.getCollectionEntries().containsKey(publisher.getAuthors()))[ FD ]
Line_14 $$ s = openSession()-->Line_15 $$ txn = s.beginTransaction()[ FD ]
Line_6 $$ Publisher publisher = new Publisher()-->Line_27 $$ publisher.getAuthors().add(author1)[ FD ]
Line_18 $$ final PersistenceContext persistenceContext = ((SessionImplementor) s).getPersistenceContext()-->Line_41 $$ assertEquals(1, persistenceContext.getCollectionEntries().size())[ FD ]
Line_14 $$ s = openSession()-->Line_52 $$ List results = s.createQuery("select a from Publisher p join p.authors a").list()[ FD ]
Line_4 $$ Session s = openSession()-->Line_62 $$ assertTrue("autoflush delete", s.createQuery("from Publisher p").list().size() == 0)[ FD ]
Line_16 $$ publisher = (Publisher) s.get(Publisher.class, publisher.getId())-->Line_51 $$ publisher.getAuthors().add(author2)[ FD ]
Line_6 $$ Publisher publisher = new Publisher()-->Line_23 $$ assertTrue(persistenceContext.getCollectionsByKey().values().contains(publisher.getAuthors()))[ FD ]
Line_6 $$ Publisher publisher = new Publisher()-->Line_47 $$ publisher.setAuthors(new HashSet<Author>())[ FD ]
Line_18 $$ final PersistenceContext persistenceContext = ((SessionImplementor) s).getPersistenceContext()-->Line_23 $$ assertTrue(persistenceContext.getCollectionsByKey().values().contains(publisher.getAuthors()))[ FD ]
Line_18 $$ final PersistenceContext persistenceContext = ((SessionImplementor) s).getPersistenceContext()-->Line_34 $$ assertTrue(persistenceContext.getCollectionsByKey().values().contains(author1.getBooks()))[ FD ]
Line_25 $$ Author author1 = new Author()-->Line_37 $$ s.delete(author1)[ FD ]
Line_14 $$ s = openSession()-->Line_16 $$ publisher = (Publisher) s.get(Publisher.class, publisher.getId())[ FD ]
Line_52 $$ List results = s.createQuery("select a from Publisher p join p.authors a").list()-->Line_53 $$ assertEquals(1, results.size())[ FD ]
Line_16 $$ publisher = (Publisher) s.get(Publisher.class, publisher.getId())-->Line_44 $$ assertTrue(persistenceContext.getCollectionsByKey().values().contains(publisher.getAuthors()))[ FD ]
Line_16 $$ publisher = (Publisher) s.get(Publisher.class, publisher.getId())-->Line_27 $$ publisher.getAuthors().add(author1)[ FD ]
Line_16 $$ publisher = (Publisher) s.get(Publisher.class, publisher.getId())-->Line_31 $$ assertTrue(persistenceContext.getCollectionEntries().containsKey(publisher.getAuthors()))[ FD ]
Line_6 $$ Publisher publisher = new Publisher()-->Line_38 $$ publisher.getAuthors().clear()[ FD ]
Line_18 $$ final PersistenceContext persistenceContext = ((SessionImplementor) s).getPersistenceContext()-->Line_42 $$ assertEquals(1, persistenceContext.getCollectionsByKey().size())[ FD ]
Line_16 $$ publisher = (Publisher) s.get(Publisher.class, publisher.getId())-->Line_26 $$ author1.setPublisher(publisher)[ FD ]
Line_6 $$ Publisher publisher = new Publisher()-->Line_51 $$ publisher.getAuthors().add(author2)[ FD ]
Line_6 $$ Publisher publisher = new Publisher()-->Line_61 $$ s.delete(publisher)[ FD ]
Line_25 $$ Author author1 = new Author()-->Line_36 $$ author1.setPublisher(null)[ FD ]
Line_19 $$ final ActionQueue actionQueue = ((SessionImpl) s).getActionQueue()-->Line_45 $$ assertEquals(0, actionQueue.numberOfCollectionRemovals())[ FD ]
Line_18 $$ final PersistenceContext persistenceContext = ((SessionImplementor) s).getPersistenceContext()-->Line_30 $$ assertEquals(2, persistenceContext.getCollectionsByKey().size())[ FD ]
Line_14 $$ s = openSession()-->Line_40 $$ assertTrue("autoflush collection update", s.createQuery("select a from Publisher p join p.authors a").list().size() == 0)[ FD ]
Line_16 $$ publisher = (Publisher) s.get(Publisher.class, publisher.getId())-->Line_61 $$ s.delete(publisher)[ FD ]
Line_4 $$ Session s = openSession()-->Line_52 $$ List results = s.createQuery("select a from Publisher p join p.authors a").list()[ FD ]
Line_18 $$ final PersistenceContext persistenceContext = ((SessionImplementor) s).getPersistenceContext()-->Line_43 $$ assertTrue(persistenceContext.getCollectionEntries().containsKey(publisher.getAuthors()))[ FD ]
Line_16 $$ publisher = (Publisher) s.get(Publisher.class, publisher.getId())-->Line_43 $$ assertTrue(persistenceContext.getCollectionEntries().containsKey(publisher.getAuthors()))[ FD ]
Line_4 $$ Session s = openSession()-->Line_61 $$ s.delete(publisher)[ FD ]
Line_6 $$ Publisher publisher = new Publisher()-->Line_26 $$ author1.setPublisher(publisher)[ FD ]
Line_15 $$ txn = s.beginTransaction()-->Line_63 $$ txn.commit()[ FD ]
Line_6 $$ Publisher publisher = new Publisher()-->Line_17 $$ assertTrue(publisher.getAuthors().isEmpty())[ FD ]
Line_18 $$ final PersistenceContext persistenceContext = ((SessionImplementor) s).getPersistenceContext()-->Line_57 $$ assertTrue(persistenceContext.getCollectionEntries().containsKey(author2.getBooks()))[ FD ]
Line_18 $$ final PersistenceContext persistenceContext = ((SessionImplementor) s).getPersistenceContext()-->Line_32 $$ assertTrue(persistenceContext.getCollectionEntries().containsKey(author1.getBooks()))[ FD ]
Line_4 $$ Session s = openSession()-->Line_28 $$ assertTrue("autoflush collection update", s.createQuery("select a from Publisher p join p.authors a").list().size() == 1)[ FD ]
Line_6 $$ Publisher publisher = new Publisher()-->Line_44 $$ assertTrue(persistenceContext.getCollectionsByKey().values().contains(publisher.getAuthors()))[ FD ]
Line_18 $$ final PersistenceContext persistenceContext = ((SessionImplementor) s).getPersistenceContext()-->Line_20 $$ assertEquals(1, persistenceContext.getCollectionEntries().size())[ FD ]
Line_18 $$ final PersistenceContext persistenceContext = ((SessionImplementor) s).getPersistenceContext()-->Line_58 $$ assertTrue(persistenceContext.getCollectionsByKey().values().contains(publisher.getAuthors()))[ FD ]
Line_6 $$ Publisher publisher = new Publisher()-->Line_22 $$ assertTrue(persistenceContext.getCollectionEntries().containsKey(publisher.getAuthors()))[ FD ]
Line_18 $$ final PersistenceContext persistenceContext = ((SessionImplementor) s).getPersistenceContext()-->Line_29 $$ assertEquals(2, persistenceContext.getCollectionEntries().size())[ FD ]
Line_25 $$ Author author1 = new Author()-->Line_34 $$ assertTrue(persistenceContext.getCollectionsByKey().values().contains(author1.getBooks()))[ FD ]
Line_48 $$ Author author2 = new Author()-->Line_59 $$ assertTrue(persistenceContext.getCollectionsByKey().values().contains(author2.getBooks()))[ FD ]
