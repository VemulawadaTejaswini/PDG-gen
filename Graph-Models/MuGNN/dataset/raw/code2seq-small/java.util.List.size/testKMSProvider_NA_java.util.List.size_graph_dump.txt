Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_93 $$ Assert.assertEquals(1, kms1.length)[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_137 $$ Assert.assertNull(meta.getDescription())[ CD ]
Line_107 $$ KeyProvider.KeyVersion k1 = kpExt.decryptEncryptedKey(ek1)-->Line_110 $$ Assert.assertArrayEquals(k1.getMaterial(), k1a.getMaterial())[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_9 $$ writeConf(confDir, conf)[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_108 $$ Assert.assertEquals(KeyProviderCryptoExtension.EK, k1.getVersionName())[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_173 $$ InetSocketAddress kmsAddr = new InetSocketAddress(getKMSUrl().getHost(), getKMSUrl().getPort())[ CD ]
Line_7 $$ File confDir = getTestDir()-->Line_10 $$ runServer(null, null, confDir, new KMSCallable() [ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_65 $$ Assert.assertEquals(kv2.getVersionName(), cv2.getVersionName())[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_78 $$ Assert.assertNotNull(lkv2.get(1).getMaterial())[ CD ]
Line_17 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_144 $$ kp.createKey("k3", options)[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_154 $$ options.setAttributes(attributes)[ CD ]
Line_59 $$ for (int i = 0; i < kv1.getMaterial().length; i++) -->Line_115 $$ for (int i = 0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) [ FD ]
Line_14 $$ Date started = new Date()-->Line_99 $$ Assert.assertTrue(started.before(kms1[0].getCreated()))[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_38 $$ Assert.assertNotNull(cv1.getMaterial())[ CD ]
Line_27 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_29 $$ Assert.assertNotNull(kv0.getVersionName())[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_135 $$ kp.createKey("k2", options)[ CD ]
Line_14 $$ Date started = new Date()-->Line_46 $$ Assert.assertTrue(started.before(m1.getCreated()))[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_107 $$ KeyProvider.KeyVersion k1 = kpExt.decryptEncryptedKey(ek1)[ CD ]
Line_27 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_28 $$ Assert.assertNotNull(kv0)[ FD ]
Line_148 $$ Map<String, String> attributes = new HashMap<String, String>()-->Line_149 $$ attributes.put("a", "A")[ FD ]
Line_173 $$ InetSocketAddress kmsAddr = new InetSocketAddress(getKMSUrl().getHost(), getKMSUrl().getPort())-->Line_174 $$ Assert.assertEquals(new Text("kms-dt"), credentials.getToken(SecurityUtil.buildTokenService(kmsAddr)).getKind())[ FD ]
Line_136 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_137 $$ Assert.assertNull(meta.getDescription())[ FD ]
Line_136 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_145 $$ meta = kp.getMetadata("k3")[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_148 $$ Map<String, String> attributes = new HashMap<String, String>()[ CD ]
Line_136 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_166 $$ meta = kp.getMetadata("k5")[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_6 $$ UserGroupInformation.setConfiguration(conf)[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_58 $$ boolean eq = true[ CD ]
Line_27 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_54 $$ Assert.assertNotSame(kv0.getVersionName(), kv2.getVersionName())[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_157 $$ Assert.assertNull(meta.getDescription())[ CD ]
Line_27 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_50 $$ Assert.assertEquals(kv0.getVersionName(), lkv1.get(0).getVersionName())[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_24 $$ options.setCipher("AES/CTR/NoPadding")[ CD ]
Line_102 $$ KeyProviderCryptoExtension kpExt = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)-->Line_113 $$ KeyProvider.KeyVersion k2 = kpExt.decryptEncryptedKey(ek2)[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_81 $$ Assert.assertEquals("AES/CTR/NoPadding", m2.getCipher())[ CD ]
Line_145 $$ meta = kp.getMetadata("k3")-->Line_166 $$ meta = kp.getMetadata("k5")[ FD ]
Line_58 $$ boolean eq = true-->Line_62 $$ Assert.assertFalse(eq)[ FD ]
Line_68 $$ for (int i = 0; i < kv1.getMaterial().length; i++) -->Line_115 $$ for (int i = 0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) [ FD ]
Line_59 $$ for (int i = 0; i < kv1.getMaterial().length; i++) -->Line_68 $$ for (int i = 0; i < kv1.getMaterial().length; i++) [ FD ]
Line_145 $$ meta = kp.getMetadata("k3")-->Line_168 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_44 $$ Assert.assertEquals(1, m1.getVersions())[ CD ]
Line_103 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())-->Line_105 $$ Assert.assertNotNull(ek1.getEncryptedKeyVersion().getMaterial())[ FD ]
Line_58 $$ boolean eq = true-->Line_69 $$ eq = eq && cv2.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_97 $$ Assert.assertEquals(2, kms1[0].getVersions())[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_103 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())[ CD ]
Line_136 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_146 $$ Assert.assertEquals("d", meta.getDescription())[ FD ]
Line_58 $$ boolean eq = true-->Line_71 $$ Assert.assertTrue(eq)[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_33 $$ Assert.assertEquals(kv0.getVersionName(), kv1.getVersionName())[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_138 $$ Assert.assertTrue(meta.getAttributes().isEmpty())[ CD ]
Line_14 $$ Date started = new Date()-->Line_86 $$ Assert.assertTrue(started.before(m2.getCreated()))[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_175 $$ return null[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_27 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_158 $$ Assert.assertEquals(attributes, meta.getAttributes())[ CD ]
Line_136 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_138 $$ Assert.assertTrue(meta.getAttributes().isEmpty())[ FD ]
Line_7 $$ File confDir = getTestDir()-->Line_8 $$ conf = createBaseKMSConf(confDir)[ FD ]
Line_113 $$ KeyProvider.KeyVersion k2 = kpExt.decryptEncryptedKey(ek2)-->Line_116 $$ isEq = k2.getMaterial()[i] == k1.getMaterial()[i][ FD ]
Line_145 $$ meta = kp.getMetadata("k3")-->Line_156 $$ meta = kp.getMetadata("k4")[ FD ]
Line_68 $$ for (int i = 0; i < kv1.getMaterial().length; i++) -->Line_69 $$ eq = eq && cv2.getMaterial()[i] == kv2.getMaterial()[i][ CD ]
Line_166 $$ meta = kp.getMetadata("k5")-->Line_167 $$ Assert.assertEquals("d", meta.getDescription())[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_37 $$ Assert.assertEquals(kv0.getVersionName(), cv1.getVersionName())[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_84 $$ Assert.assertEquals(2, m2.getVersions())[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_106 $$ Assert.assertEquals(kv.getMaterial().length, ek1.getEncryptedKeyVersion().getMaterial().length)[ CD ]
Line_145 $$ meta = kp.getMetadata("k3")-->Line_158 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_156 $$ meta = kp.getMetadata("k4")-->Line_168 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_102 $$ KeyProviderCryptoExtension kpExt = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)-->Line_107 $$ KeyProvider.KeyVersion k1 = kpExt.decryptEncryptedKey(ek1)[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_94 $$ Assert.assertEquals("AES/CTR/NoPadding", kms1[0].getCipher())[ CD ]
Line_112 $$ EncryptedKeyVersion ek2 = kpExt.generateEncryptedKey(kv.getName())-->Line_115 $$ for (int i = 0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) [ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_141 $$ options.setCipher("AES/CTR/NoPadding")[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_50 $$ Assert.assertEquals(kv0.getVersionName(), lkv1.get(0).getVersionName())[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_26 $$ options.setDescription("l1")[ CD ]
Line_27 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_33 $$ Assert.assertEquals(kv0.getVersionName(), kv1.getVersionName())[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_110 $$ Assert.assertArrayEquals(k1.getMaterial(), k1a.getMaterial())[ CD ]
Line_114 $$ boolean isEq = true-->Line_116 $$ isEq = k2.getMaterial()[i] == k1.getMaterial()[i][ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_17 $$ KeyProvider kp = new KMSClientProvider(uri, conf)[ CD ]
Line_156 $$ meta = kp.getMetadata("k4")-->Line_158 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_60 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i]-->Line_67 $$ eq = true[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_28 $$ Assert.assertNotNull(kv0)[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_29 $$ Assert.assertNotNull(kv0.getVersionName())[ CD ]
Line_27 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_37 $$ Assert.assertEquals(kv0.getVersionName(), cv1.getVersionName())[ FD ]
Line_114 $$ boolean isEq = true-->Line_115 $$ for (int i = 0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) [ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_71 $$ Assert.assertTrue(eq)[ CD ]
Line_17 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_155 $$ kp.createKey("k4", options)[ FD ]
Line_58 $$ boolean eq = true-->Line_60 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_169 $$ KeyProviderDelegationTokenExtension kpdte = KeyProviderDelegationTokenExtension.createKeyProviderDelegationTokenExtension(kp)[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_172 $$ Assert.assertEquals(1, credentials.getAllTokens().size())[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_96 $$ Assert.assertEquals(128, kms1[0].getBitLength())[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_86 $$ Assert.assertTrue(started.before(m2.getCreated()))[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_145 $$ meta = kp.getMetadata("k3")[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_113 $$ KeyProvider.KeyVersion k2 = kpExt.decryptEncryptedKey(ek2)[ CD ]
Line_103 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())-->Line_106 $$ Assert.assertEquals(kv.getMaterial().length, ek1.getEncryptedKeyVersion().getMaterial().length)[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_156 $$ meta = kp.getMetadata("k4")[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_170 $$ Credentials credentials = new Credentials()[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_115 $$ for (int i = 0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) [ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_143 $$ options.setDescription("d")[ CD ]
Line_136 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_147 $$ Assert.assertTrue(meta.getAttributes().isEmpty())[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_77 $$ Assert.assertEquals(kv2.getVersionName(), lkv2.get(1).getVersionName())[ CD ]
Line_69 $$ eq = eq && cv2.getMaterial()[i] == kv2.getMaterial()[i]-->Line_71 $$ Assert.assertTrue(eq)[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_41 $$ Assert.assertEquals("AES/CTR/NoPadding", m1.getCipher())[ CD ]
Line_103 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())-->Line_104 $$ Assert.assertEquals(KeyProviderCryptoExtension.EEK, ek1.getEncryptedKeyVersion().getVersionName())[ FD ]
Line_17 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_102 $$ KeyProviderCryptoExtension kpExt = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_74 $$ Assert.assertEquals(2, lkv2.size())[ CD ]
Line_112 $$ EncryptedKeyVersion ek2 = kpExt.generateEncryptedKey(kv.getName())-->Line_113 $$ KeyProvider.KeyVersion k2 = kpExt.decryptEncryptedKey(ek2)[ FD ]
Line_67 $$ eq = true-->Line_71 $$ Assert.assertTrue(eq)[ FD ]
Line_102 $$ KeyProviderCryptoExtension kpExt = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)-->Line_103 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())[ FD ]
Line_116 $$ isEq = k2.getMaterial()[i] == k1.getMaterial()[i]-->Line_118 $$ Assert.assertFalse(isEq)[ FD ]
Line_109 $$ KeyProvider.KeyVersion k1a = kpExt.decryptEncryptedKey(ek1)-->Line_110 $$ Assert.assertArrayEquals(k1.getMaterial(), k1a.getMaterial())[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_34 $$ Assert.assertNotNull(kv1.getMaterial())[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_62 $$ Assert.assertFalse(eq)[ CD ]
Line_17 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_136 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")[ FD ]
Line_136 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_168 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_103 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())-->Line_107 $$ KeyProvider.KeyVersion k1 = kpExt.decryptEncryptedKey(ek1)[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_102 $$ KeyProviderCryptoExtension kpExt = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)[ CD ]
Line_136 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_156 $$ meta = kp.getMetadata("k4")[ FD ]
Line_156 $$ meta = kp.getMetadata("k4")-->Line_167 $$ Assert.assertEquals("d", meta.getDescription())[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_166 $$ meta = kp.getMetadata("k5")[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_30 $$ Assert.assertNotNull(kv0.getMaterial())[ CD ]
Line_145 $$ meta = kp.getMetadata("k3")-->Line_146 $$ Assert.assertEquals("d", meta.getDescription())[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_46 $$ Assert.assertTrue(started.before(m1.getCreated()))[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_67 $$ eq = true[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_95 $$ Assert.assertEquals("AES", kms1[0].getAlgorithm())[ CD ]
Line_136 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_167 $$ Assert.assertEquals("d", meta.getDescription())[ FD ]
Line_27 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_30 $$ Assert.assertNotNull(kv0.getMaterial())[ FD ]
Line_17 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_169 $$ KeyProviderDelegationTokenExtension kpdte = KeyProviderDelegationTokenExtension.createKeyProviderDelegationTokenExtension(kp)[ FD ]
Line_166 $$ meta = kp.getMetadata("k5")-->Line_168 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_55 $$ Assert.assertNotNull(kv2.getMaterial())[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_142 $$ options.setBitLength(128)[ CD ]
Line_107 $$ KeyProvider.KeyVersion k1 = kpExt.decryptEncryptedKey(ek1)-->Line_116 $$ isEq = k2.getMaterial()[i] == k1.getMaterial()[i][ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_147 $$ Assert.assertTrue(meta.getAttributes().isEmpty())[ CD ]
Line_148 $$ Map<String, String> attributes = new HashMap<String, String>()-->Line_158 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_161 $$ options.setCipher("AES/CTR/NoPadding")[ CD ]
Line_115 $$ for (int i = 0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) -->Line_116 $$ isEq = k2.getMaterial()[i] == k1.getMaterial()[i][ CD ]
Line_17 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_166 $$ meta = kp.getMetadata("k5")[ FD ]
Line_148 $$ Map<String, String> attributes = new HashMap<String, String>()-->Line_164 $$ options.setAttributes(attributes)[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_136 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_76 $$ Assert.assertNotNull(lkv2.get(0).getMaterial())[ CD ]
Line_148 $$ Map<String, String> attributes = new HashMap<String, String>()-->Line_154 $$ options.setAttributes(attributes)[ FD ]
Line_17 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_145 $$ meta = kp.getMetadata("k3")[ FD ]
Line_136 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_158 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_167 $$ Assert.assertEquals("d", meta.getDescription())[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_174 $$ Assert.assertEquals(new Text("kms-dt"), credentials.getToken(SecurityUtil.buildTokenService(kmsAddr)).getKind())[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_45 $$ Assert.assertNotNull(m1.getCreated())[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_153 $$ options.setBitLength(128)[ CD ]
Line_17 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_165 $$ kp.createKey("k5", options)[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_118 $$ Assert.assertFalse(isEq)[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_111 $$ Assert.assertEquals(kv.getMaterial().length, k1.getMaterial().length)[ CD ]
Line_170 $$ Credentials credentials = new Credentials()-->Line_171 $$ kpdte.addDelegationTokens("foo", credentials)[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_5 $$ conf.set("hadoop.security.authentication", "kerberos")[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_105 $$ Assert.assertNotNull(ek1.getEncryptedKeyVersion().getMaterial())[ CD ]
Line_156 $$ meta = kp.getMetadata("k4")-->Line_157 $$ Assert.assertNull(meta.getDescription())[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_112 $$ EncryptedKeyVersion ek2 = kpExt.generateEncryptedKey(kv.getName())[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_99 $$ Assert.assertTrue(started.before(kms1[0].getCreated()))[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_163 $$ options.setDescription("d")[ CD ]
Line_145 $$ meta = kp.getMetadata("k3")-->Line_167 $$ Assert.assertEquals("d", meta.getDescription())[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_66 $$ Assert.assertNotNull(cv2.getMaterial())[ CD ]
Line_67 $$ eq = true-->Line_69 $$ eq = eq && cv2.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_89 $$ Assert.assertEquals(1, ks1.size())[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_104 $$ Assert.assertEquals(KeyProviderCryptoExtension.EEK, ek1.getEncryptedKeyVersion().getVersionName())[ CD ]
Line_60 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i]-->Line_69 $$ eq = eq && cv2.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_168 $$ Assert.assertEquals(attributes, meta.getAttributes())[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_109 $$ KeyProvider.KeyVersion k1a = kpExt.decryptEncryptedKey(ek1)[ CD ]
Line_60 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i]-->Line_71 $$ Assert.assertTrue(eq)[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_25 $$ options.setBitLength(128)[ CD ]
Line_58 $$ boolean eq = true-->Line_67 $$ eq = true[ FD ]
Line_156 $$ meta = kp.getMetadata("k4")-->Line_166 $$ meta = kp.getMetadata("k5")[ FD ]
Line_148 $$ Map<String, String> attributes = new HashMap<String, String>()-->Line_168 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_54 $$ Assert.assertNotSame(kv0.getVersionName(), kv2.getVersionName())[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_85 $$ Assert.assertNotNull(m2.getCreated())[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_98 $$ Assert.assertNotNull(kms1[0].getCreated())[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_75 $$ Assert.assertEquals(kv1.getVersionName(), lkv2.get(0).getVersionName())[ CD ]
Line_170 $$ Credentials credentials = new Credentials()-->Line_174 $$ Assert.assertEquals(new Text("kms-dt"), credentials.getToken(SecurityUtil.buildTokenService(kmsAddr)).getKind())[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_83 $$ Assert.assertEquals(128, m2.getBitLength())[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_155 $$ kp.createKey("k4", options)[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_146 $$ Assert.assertEquals("d", meta.getDescription())[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_149 $$ attributes.put("a", "A")[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_165 $$ kp.createKey("k5", options)[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_152 $$ options.setCipher("AES/CTR/NoPadding")[ CD ]
Line_136 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_157 $$ Assert.assertNull(meta.getDescription())[ FD ]
Line_60 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i]-->Line_62 $$ Assert.assertFalse(eq)[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_114 $$ boolean isEq = true[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_49 $$ Assert.assertEquals(1, lkv1.size())[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_15 $$ Configuration conf = new Configuration()[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_171 $$ kpdte.addDelegationTokens("foo", credentials)[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_162 $$ options.setBitLength(128)[ CD ]
Line_145 $$ meta = kp.getMetadata("k3")-->Line_147 $$ Assert.assertTrue(meta.getAttributes().isEmpty())[ FD ]
Line_17 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_27 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)[ FD ]
Line_107 $$ KeyProvider.KeyVersion k1 = kpExt.decryptEncryptedKey(ek1)-->Line_108 $$ Assert.assertEquals(KeyProviderCryptoExtension.EK, k1.getVersionName())[ FD ]
Line_7 $$ File confDir = getTestDir()-->Line_9 $$ writeConf(confDir, conf)[ FD ]
Line_17 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_135 $$ kp.createKey("k2", options)[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_164 $$ options.setAttributes(attributes)[ CD ]
Line_8 $$ conf = createBaseKMSConf(confDir)-->Line_9 $$ writeConf(confDir, conf)[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_51 $$ Assert.assertNotNull(kv1.getMaterial())[ CD ]
Line_102 $$ KeyProviderCryptoExtension kpExt = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)-->Line_112 $$ EncryptedKeyVersion ek2 = kpExt.generateEncryptedKey(kv.getName())[ FD ]
Line_114 $$ boolean isEq = true-->Line_118 $$ Assert.assertFalse(isEq)[ FD ]
Line_116 $$ isEq = k2.getMaterial()[i] == k1.getMaterial()[i]-->Line_115 $$ for (int i = 0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) [ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_144 $$ kp.createKey("k3", options)[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_59 $$ for (int i = 0; i < kv1.getMaterial().length; i++) [ CD ]
Line_169 $$ KeyProviderDelegationTokenExtension kpdte = KeyProviderDelegationTokenExtension.createKeyProviderDelegationTokenExtension(kp)-->Line_171 $$ kpdte.addDelegationTokens("foo", credentials)[ FD ]
Line_107 $$ KeyProvider.KeyVersion k1 = kpExt.decryptEncryptedKey(ek1)-->Line_111 $$ Assert.assertEquals(kv.getMaterial().length, k1.getMaterial().length)[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_43 $$ Assert.assertEquals(128, m1.getBitLength())[ CD ]
Line_145 $$ meta = kp.getMetadata("k3")-->Line_157 $$ Assert.assertNull(meta.getDescription())[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_133 $$ options.setCipher("AES/CTR/NoPadding")[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_16 $$ URI uri = createKMSUri(getKMSUrl())[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_90 $$ Assert.assertEquals("k1", ks1.get(0))[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_134 $$ options.setBitLength(128)[ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_14 $$ Date started = new Date()[ CD ]
Line_17 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_156 $$ meta = kp.getMetadata("k4")[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_82 $$ Assert.assertEquals("AES", m2.getAlgorithm())[ CD ]
Line_103 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())-->Line_109 $$ KeyProvider.KeyVersion k1a = kpExt.decryptEncryptedKey(ek1)[ FD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_42 $$ Assert.assertEquals("AES", m1.getAlgorithm())[ CD ]
Line_59 $$ for (int i = 0; i < kv1.getMaterial().length; i++) -->Line_60 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i][ CD ]
Line_10 $$ runServer(null, null, confDir, new KMSCallable() -->Line_68 $$ for (int i = 0; i < kv1.getMaterial().length; i++) [ CD ]
Line_170 $$ Credentials credentials = new Credentials()-->Line_172 $$ Assert.assertEquals(1, credentials.getAllTokens().size())[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_8 $$ conf = createBaseKMSConf(confDir)[ FD ]
Line_102 $$ KeyProviderCryptoExtension kpExt = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)-->Line_109 $$ KeyProvider.KeyVersion k1a = kpExt.decryptEncryptedKey(ek1)[ FD ]
