Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_110 $$ kp.createKey("k2", options)[ FD ]
Line_2 $$ public void testKMSProvider() throws Exception -->Line_8 $$ writeConf(confDir, conf)[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_53 $$ Assert.assertNotNull(cv2.getMaterial())[ CD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_101 $$ kp.deleteKey("k1")[ FD ]
Line_65 $$ KeyProvider.Metadata m2 = kp.getMetadata("k1")-->Line_66 $$ Assert.assertEquals("AES/CTR/NoPadding", m2.getCipher())[ FD ]
Line_72 $$ List<String> ks1 = kp.getKeys()-->Line_74 $$ Assert.assertEquals("k1", ks1.get(0))[ FD ]
Line_83 $$ KeyProvider.KeyVersion kv = kp.getCurrentKey("k1")-->Line_88 $$ Assert.assertEquals(kv.getMaterial().length, ek1.getEncryptedKeyVersion().getMaterial().length)[ FD ]
Line_132 $$ options = new KeyProvider.Options(conf)-->Line_135 $$ options.setDescription("d")[ FD ]
Line_2 $$ public void testKMSProvider() throws Exception -->Line_6 $$ File confDir = getTestDir()[ CD ]
Line_17 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_18 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_17 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_21 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_16 $$ Assert.assertEquals(0, kp.getKeysMetadata().length)[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_34 $$ Assert.assertEquals(128, m1.getBitLength())[ CD ]
Line_124 $$ options = new KeyProvider.Options(conf)-->Line_128 $$ kp.createKey("k4", options)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_139 $$ Assert.assertEquals("d", meta.getDescription())[ CD ]
Line_84 $$ KeyProviderCryptoExtension kpExt = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)-->Line_91 $$ KeyProvider.KeyVersion k1a = kpExt.decryptEncryptedKey(ek1)[ FD ]
Line_31 $$ KeyProvider.Metadata m1 = kp.getMetadata("k1")-->Line_33 $$ Assert.assertEquals("AES", m1.getAlgorithm())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_39 $$ Assert.assertEquals(1, lkv1.size())[ CD ]
Line_114 $$ options = new KeyProvider.Options(conf)-->Line_126 $$ options.setBitLength(128)[ FD ]
Line_122 $$ Map<String, String> attributes = new HashMap<String, String>()-->Line_136 $$ options.setAttributes(attributes)[ FD ]
Line_107 $$ options = new KeyProvider.Options(conf)-->Line_137 $$ kp.createKey("k5", options)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_110 $$ kp.createKey("k2", options)[ CD ]
Line_89 $$ KeyProvider.KeyVersion k1 = kpExt.decryptEncryptedKey(ek1)-->Line_98 $$ isEq = k2.getMaterial()[i] == k1.getMaterial()[i][ FD ]
Line_59 $$ List<KeyProvider.KeyVersion> lkv2 = kp.getKeyVersions("k1")-->Line_63 $$ Assert.assertEquals(kv2.getVersionName(), lkv2.get(1).getVersionName())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_87 $$ Assert.assertNotNull(ek1.getEncryptedKeyVersion().getMaterial())[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_41 $$ Assert.assertNotNull(kv1.getMaterial())[ CD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_111 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_18 $$ options.setCipher("AES/CTR/NoPadding")[ CD ]
Line_97 $$ for (int i = 0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) -->Line_98 $$ isEq = k2.getMaterial()[i] == k1.getMaterial()[i][ CD ]
Line_21 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_23 $$ Assert.assertNotNull(kv0.getVersionName())[ FD ]
Line_65 $$ KeyProvider.Metadata m2 = kp.getMetadata("k1")-->Line_71 $$ Assert.assertTrue(started.before(m2.getCreated()))[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_141 $$ KeyProviderDelegationTokenExtension kpdte = KeyProviderDelegationTokenExtension.createKeyProviderDelegationTokenExtension(kp)[ CD ]
Line_2 $$ public void testKMSProvider() throws Exception -->Line_7 $$ conf = createBaseKMSConf(confDir)[ CD ]
Line_124 $$ options = new KeyProvider.Options(conf)-->Line_136 $$ options.setAttributes(attributes)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_64 $$ Assert.assertNotNull(lkv2.get(1).getMaterial())[ CD ]
Line_122 $$ Map<String, String> attributes = new HashMap<String, String>()-->Line_131 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_111 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_121 $$ Assert.assertTrue(meta.getAttributes().isEmpty())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_92 $$ Assert.assertArrayEquals(k1.getMaterial(), k1a.getMaterial())[ CD ]
Line_6 $$ File confDir = getTestDir()-->Line_9 $$ runServer(null, null, confDir, new KMSCallable() [ FD ]
Line_31 $$ KeyProvider.Metadata m1 = kp.getMetadata("k1")-->Line_37 $$ Assert.assertTrue(started.before(m1.getCreated()))[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_15 $$ Assert.assertTrue(kp.getKeys().isEmpty())[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_12 $$ Configuration conf = new Configuration()[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_69 $$ Assert.assertEquals(2, m2.getVersions())[ CD ]
Line_96 $$ boolean isEq = true-->Line_98 $$ isEq = k2.getMaterial()[i] == k1.getMaterial()[i][ FD ]
Line_6 $$ File confDir = getTestDir()-->Line_8 $$ writeConf(confDir, conf)[ FD ]
Line_107 $$ options = new KeyProvider.Options(conf)-->Line_124 $$ options = new KeyProvider.Options(conf)[ FD ]
Line_122 $$ Map<String, String> attributes = new HashMap<String, String>()-->Line_127 $$ options.setAttributes(attributes)[ FD ]
Line_2 $$ public void testKMSProvider() throws Exception -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_45 $$ kv2 = kp.getKeyVersion(kv2.getVersionName())[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_130 $$ Assert.assertNull(meta.getDescription())[ CD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_138 $$ meta = kp.getMetadata("k5")[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_74 $$ Assert.assertEquals("k1", ks1.get(0))[ CD ]
Line_42 $$ KeyProvider.KeyVersion kv2 = kp.rollNewVersion("k1")-->Line_48 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_100 $$ Assert.assertFalse(isEq)[ CD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_28 $$ KeyProvider.KeyVersion cv1 = kp.getCurrentKey("k1")[ FD ]
Line_96 $$ boolean isEq = true-->Line_100 $$ Assert.assertFalse(isEq)[ FD ]
Line_111 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_131 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_127 $$ options.setAttributes(attributes)[ CD ]
Line_119 $$ meta = kp.getMetadata("k3")-->Line_140 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_23 $$ Assert.assertNotNull(kv0.getVersionName())[ CD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_105 $$ Assert.assertTrue(kp.getKeys().isEmpty())[ FD ]
Line_38 $$ List<KeyProvider.KeyVersion> lkv1 = kp.getKeyVersions("k1")-->Line_39 $$ Assert.assertEquals(1, lkv1.size())[ FD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_118 $$ kp.createKey("k3", options)[ FD ]
Line_142 $$ Credentials credentials = new Credentials()-->Line_146 $$ Assert.assertEquals(new Text("kms-dt"), credentials.getToken(SecurityUtil.buildTokenService(kmsAddr)).getKind())[ FD ]
Line_31 $$ KeyProvider.Metadata m1 = kp.getMetadata("k1")-->Line_36 $$ Assert.assertNotNull(m1.getCreated())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_118 $$ kp.createKey("k3", options)[ CD ]
Line_119 $$ meta = kp.getMetadata("k3")-->Line_131 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_28 $$ KeyProvider.KeyVersion cv1 = kp.getCurrentKey("k1")[ CD ]
Line_107 $$ options = new KeyProvider.Options(conf)-->Line_116 $$ options.setBitLength(128)[ FD ]
Line_132 $$ options = new KeyProvider.Options(conf)-->Line_137 $$ kp.createKey("k5", options)[ FD ]
Line_28 $$ KeyProvider.KeyVersion cv1 = kp.getCurrentKey("k1")-->Line_29 $$ Assert.assertEquals(kv0.getVersionName(), cv1.getVersionName())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_126 $$ options.setBitLength(128)[ CD ]
Line_54 $$ eq = true-->Line_58 $$ Assert.assertTrue(eq)[ FD ]
Line_72 $$ List<String> ks1 = kp.getKeys()-->Line_73 $$ Assert.assertEquals(1, ks1.size())[ FD ]
Line_107 $$ options = new KeyProvider.Options(conf)-->Line_118 $$ kp.createKey("k3", options)[ FD ]
Line_17 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_118 $$ kp.createKey("k3", options)[ FD ]
Line_7 $$ conf = createBaseKMSConf(confDir)-->Line_8 $$ writeConf(confDir, conf)[ FD ]
Line_17 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_110 $$ kp.createKey("k2", options)[ FD ]
Line_124 $$ options = new KeyProvider.Options(conf)-->Line_137 $$ kp.createKey("k5", options)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_93 $$ Assert.assertEquals(kv.getMaterial().length, k1.getMaterial().length)[ CD ]
Line_85 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())-->Line_87 $$ Assert.assertNotNull(ek1.getEncryptedKeyVersion().getMaterial())[ FD ]
Line_142 $$ Credentials credentials = new Credentials()-->Line_143 $$ kpdte.addDelegationTokens("foo", credentials)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_35 $$ Assert.assertEquals(1, m1.getVersions())[ CD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_59 $$ List<KeyProvider.KeyVersion> lkv2 = kp.getKeyVersions("k1")[ FD ]
Line_17 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_124 $$ options = new KeyProvider.Options(conf)[ FD ]
Line_138 $$ meta = kp.getMetadata("k5")-->Line_140 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_143 $$ kpdte.addDelegationTokens("foo", credentials)[ CD ]
Line_114 $$ options = new KeyProvider.Options(conf)-->Line_127 $$ options.setAttributes(attributes)[ FD ]
Line_25 $$ KeyProvider.KeyVersion kv1 = kp.getKeyVersion(kv0.getVersionName())-->Line_55 $$ for (int i = 0; i < kv1.getMaterial().length; i++) [ FD ]
Line_2 $$ public void testKMSProvider() throws Exception -->Line_4 $$ conf.set("hadoop.security.authentication", "kerberos")[ CD ]
Line_84 $$ KeyProviderCryptoExtension kpExt = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)-->Line_89 $$ KeyProvider.KeyVersion k1 = kpExt.decryptEncryptedKey(ek1)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_107 $$ options = new KeyProvider.Options(conf)[ CD ]
Line_47 $$ for (int i = 0; i < kv1.getMaterial().length; i++) -->Line_55 $$ for (int i = 0; i < kv1.getMaterial().length; i++) [ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_52 $$ Assert.assertEquals(kv2.getVersionName(), cv2.getVersionName())[ CD ]
Line_107 $$ options = new KeyProvider.Options(conf)-->Line_134 $$ options.setBitLength(128)[ FD ]
Line_85 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())-->Line_91 $$ KeyProvider.KeyVersion k1a = kpExt.decryptEncryptedKey(ek1)[ FD ]
Line_54 $$ eq = true-->Line_56 $$ eq = eq && cv2.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_51 $$ KeyProvider.KeyVersion cv2 = kp.getCurrentKey("k1")[ FD ]
Line_114 $$ options = new KeyProvider.Options(conf)-->Line_125 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_111 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_119 $$ meta = kp.getMetadata("k3")[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_132 $$ options = new KeyProvider.Options(conf)[ CD ]
Line_48 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i]-->Line_56 $$ eq = eq && cv2.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_21 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_22 $$ Assert.assertNotNull(kv0)[ FD ]
Line_98 $$ isEq = k2.getMaterial()[i] == k1.getMaterial()[i]-->Line_97 $$ for (int i = 0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) [ FD ]
Line_114 $$ options = new KeyProvider.Options(conf)-->Line_116 $$ options.setBitLength(128)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_124 $$ options = new KeyProvider.Options(conf)[ CD ]
Line_94 $$ EncryptedKeyVersion ek2 = kpExt.generateEncryptedKey(kv.getName())-->Line_97 $$ for (int i = 0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) [ FD ]
Line_107 $$ options = new KeyProvider.Options(conf)-->Line_110 $$ kp.createKey("k2", options)[ FD ]
Line_25 $$ KeyProvider.KeyVersion kv1 = kp.getKeyVersion(kv0.getVersionName())-->Line_47 $$ for (int i = 0; i < kv1.getMaterial().length; i++) [ FD ]
Line_111 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_138 $$ meta = kp.getMetadata("k5")[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_7 $$ conf = createBaseKMSConf(confDir)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_20 $$ options.setDescription("l1")[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_104 $$ Assert.assertNull(kp.getMetadata("k1"))[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_40 $$ Assert.assertEquals(kv0.getVersionName(), lkv1.get(0).getVersionName())[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_72 $$ List<String> ks1 = kp.getKeys()[ CD ]
Line_141 $$ KeyProviderDelegationTokenExtension kpdte = KeyProviderDelegationTokenExtension.createKeyProviderDelegationTokenExtension(kp)-->Line_143 $$ kpdte.addDelegationTokens("foo", credentials)[ FD ]
Line_84 $$ KeyProviderCryptoExtension kpExt = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)-->Line_95 $$ KeyProvider.KeyVersion k2 = kpExt.decryptEncryptedKey(ek2)[ FD ]
Line_47 $$ for (int i = 0; i < kv1.getMaterial().length; i++) -->Line_48 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i][ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_77 $$ Assert.assertEquals("AES/CTR/NoPadding", kms1[0].getCipher())[ CD ]
Line_111 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_129 $$ meta = kp.getMetadata("k4")[ FD ]
Line_17 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_125 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_30 $$ Assert.assertNotNull(cv1.getMaterial())[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_54 $$ eq = true[ CD ]
Line_25 $$ KeyProvider.KeyVersion kv1 = kp.getKeyVersion(kv0.getVersionName())-->Line_48 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_107 $$ options = new KeyProvider.Options(conf)-->Line_126 $$ options.setBitLength(128)[ FD ]
Line_107 $$ options = new KeyProvider.Options(conf)-->Line_114 $$ options = new KeyProvider.Options(conf)[ FD ]
Line_124 $$ options = new KeyProvider.Options(conf)-->Line_135 $$ options.setDescription("d")[ FD ]
Line_25 $$ KeyProvider.KeyVersion kv1 = kp.getKeyVersion(kv0.getVersionName())-->Line_27 $$ Assert.assertNotNull(kv1.getMaterial())[ FD ]
Line_25 $$ KeyProvider.KeyVersion kv1 = kp.getKeyVersion(kv0.getVersionName())-->Line_61 $$ Assert.assertEquals(kv1.getVersionName(), lkv2.get(0).getVersionName())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_88 $$ Assert.assertEquals(kv.getMaterial().length, ek1.getEncryptedKeyVersion().getMaterial().length)[ CD ]
Line_129 $$ meta = kp.getMetadata("k4")-->Line_140 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_107 $$ options = new KeyProvider.Options(conf)-->Line_108 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_128 $$ kp.createKey("k4", options)[ FD ]
Line_94 $$ EncryptedKeyVersion ek2 = kpExt.generateEncryptedKey(kv.getName())-->Line_95 $$ KeyProvider.KeyVersion k2 = kpExt.decryptEncryptedKey(ek2)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_60 $$ Assert.assertEquals(2, lkv2.size())[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_103 $$ Assert.assertNull(kp.getKeyVersions("k1"))[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_142 $$ Credentials credentials = new Credentials()[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_71 $$ Assert.assertTrue(started.before(m2.getCreated()))[ CD ]
Line_55 $$ for (int i = 0; i < kv1.getMaterial().length; i++) -->Line_97 $$ for (int i = 0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) [ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_134 $$ options.setBitLength(128)[ CD ]
Line_17 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_116 $$ options.setBitLength(128)[ FD ]
Line_114 $$ options = new KeyProvider.Options(conf)-->Line_137 $$ kp.createKey("k5", options)[ FD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_31 $$ KeyProvider.Metadata m1 = kp.getMetadata("k1")[ FD ]
Line_11 $$ Date started = new Date()-->Line_82 $$ Assert.assertTrue(started.before(kms1[0].getCreated()))[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_36 $$ Assert.assertNotNull(m1.getCreated())[ CD ]
Line_59 $$ List<KeyProvider.KeyVersion> lkv2 = kp.getKeyVersions("k1")-->Line_61 $$ Assert.assertEquals(kv1.getVersionName(), lkv2.get(0).getVersionName())[ FD ]
Line_51 $$ KeyProvider.KeyVersion cv2 = kp.getCurrentKey("k1")-->Line_56 $$ eq = eq && cv2.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_114 $$ options = new KeyProvider.Options(conf)-->Line_133 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_111 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_130 $$ Assert.assertNull(meta.getDescription())[ FD ]
Line_38 $$ List<KeyProvider.KeyVersion> lkv1 = kp.getKeyVersions("k1")-->Line_40 $$ Assert.assertEquals(kv0.getVersionName(), lkv1.get(0).getVersionName())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_44 $$ Assert.assertNotNull(kv2.getMaterial())[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_42 $$ KeyProvider.KeyVersion kv2 = kp.rollNewVersion("k1")[ CD ]
Line_129 $$ meta = kp.getMetadata("k4")-->Line_131 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_108 $$ options.setCipher("AES/CTR/NoPadding")[ CD ]
Line_56 $$ eq = eq && cv2.getMaterial()[i] == kv2.getMaterial()[i]-->Line_58 $$ Assert.assertTrue(eq)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_51 $$ KeyProvider.KeyVersion cv2 = kp.getCurrentKey("k1")[ CD ]
Line_17 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_109 $$ options.setBitLength(128)[ FD ]
Line_17 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_127 $$ options.setAttributes(attributes)[ FD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_21 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_31 $$ KeyProvider.Metadata m1 = kp.getMetadata("k1")[ CD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_25 $$ KeyProvider.KeyVersion kv1 = kp.getKeyVersion(kv0.getVersionName())[ FD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_104 $$ Assert.assertNull(kp.getMetadata("k1"))[ FD ]
Line_111 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_140 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_85 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())-->Line_88 $$ Assert.assertEquals(kv.getMaterial().length, ek1.getEncryptedKeyVersion().getMaterial().length)[ FD ]
Line_48 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i]-->Line_50 $$ Assert.assertFalse(eq)[ FD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_119 $$ meta = kp.getMetadata("k3")[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_19 $$ options.setBitLength(128)[ CD ]
Line_114 $$ options = new KeyProvider.Options(conf)-->Line_136 $$ options.setAttributes(attributes)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_61 $$ Assert.assertEquals(kv1.getVersionName(), lkv2.get(0).getVersionName())[ CD ]
Line_107 $$ options = new KeyProvider.Options(conf)-->Line_128 $$ kp.createKey("k4", options)[ FD ]
Line_114 $$ options = new KeyProvider.Options(conf)-->Line_132 $$ options = new KeyProvider.Options(conf)[ FD ]
Line_129 $$ meta = kp.getMetadata("k4")-->Line_138 $$ meta = kp.getMetadata("k5")[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_120 $$ Assert.assertEquals("d", meta.getDescription())[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_91 $$ KeyProvider.KeyVersion k1a = kpExt.decryptEncryptedKey(ek1)[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_105 $$ Assert.assertTrue(kp.getKeys().isEmpty())[ CD ]
Line_28 $$ KeyProvider.KeyVersion cv1 = kp.getCurrentKey("k1")-->Line_30 $$ Assert.assertNotNull(cv1.getMaterial())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_26 $$ Assert.assertEquals(kv0.getVersionName(), kv1.getVersionName())[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_22 $$ Assert.assertNotNull(kv0)[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_133 $$ options.setCipher("AES/CTR/NoPadding")[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_97 $$ for (int i = 0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) [ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_122 $$ Map<String, String> attributes = new HashMap<String, String>()[ CD ]
Line_107 $$ options = new KeyProvider.Options(conf)-->Line_125 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_37 $$ Assert.assertTrue(started.before(m1.getCreated()))[ CD ]
Line_17 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_137 $$ kp.createKey("k5", options)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_65 $$ KeyProvider.Metadata m2 = kp.getMetadata("k1")[ CD ]
Line_107 $$ options = new KeyProvider.Options(conf)-->Line_135 $$ options.setDescription("d")[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_46 $$ boolean eq = true[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_86 $$ Assert.assertEquals(KeyProviderCryptoExtension.EEK, ek1.getEncryptedKeyVersion().getVersionName())[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_66 $$ Assert.assertEquals("AES/CTR/NoPadding", m2.getCipher())[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_81 $$ Assert.assertNotNull(kms1[0].getCreated())[ CD ]
Line_17 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_20 $$ options.setDescription("l1")[ FD ]
Line_111 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_139 $$ Assert.assertEquals("d", meta.getDescription())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_78 $$ Assert.assertEquals("AES", kms1[0].getAlgorithm())[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_138 $$ meta = kp.getMetadata("k5")[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_144 $$ Assert.assertEquals(1, credentials.getAllTokens().size())[ CD ]
Line_83 $$ KeyProvider.KeyVersion kv = kp.getCurrentKey("k1")-->Line_94 $$ EncryptedKeyVersion ek2 = kpExt.generateEncryptedKey(kv.getName())[ FD ]
Line_17 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_126 $$ options.setBitLength(128)[ FD ]
Line_55 $$ for (int i = 0; i < kv1.getMaterial().length; i++) -->Line_56 $$ eq = eq && cv2.getMaterial()[i] == kv2.getMaterial()[i][ CD ]
Line_31 $$ KeyProvider.Metadata m1 = kp.getMetadata("k1")-->Line_32 $$ Assert.assertEquals("AES/CTR/NoPadding", m1.getCipher())[ FD ]
Line_6 $$ File confDir = getTestDir()-->Line_7 $$ conf = createBaseKMSConf(confDir)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_89 $$ KeyProvider.KeyVersion k1 = kpExt.decryptEncryptedKey(ek1)[ CD ]
Line_83 $$ KeyProvider.KeyVersion kv = kp.getCurrentKey("k1")-->Line_93 $$ Assert.assertEquals(kv.getMaterial().length, k1.getMaterial().length)[ FD ]
Line_21 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_29 $$ Assert.assertEquals(kv0.getVersionName(), cv1.getVersionName())[ FD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_129 $$ meta = kp.getMetadata("k4")[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_47 $$ for (int i = 0; i < kv1.getMaterial().length; i++) [ CD ]
Line_132 $$ options = new KeyProvider.Options(conf)-->Line_133 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_2 $$ public void testKMSProvider() throws Exception -->Line_9 $$ runServer(null, null, confDir, new KMSCallable() [ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_33 $$ Assert.assertEquals("AES", m1.getAlgorithm())[ CD ]
Line_59 $$ List<KeyProvider.KeyVersion> lkv2 = kp.getKeyVersions("k1")-->Line_60 $$ Assert.assertEquals(2, lkv2.size())[ FD ]
Line_122 $$ Map<String, String> attributes = new HashMap<String, String>()-->Line_123 $$ attributes.put("a", "A")[ FD ]
Line_46 $$ boolean eq = true-->Line_56 $$ eq = eq && cv2.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_89 $$ KeyProvider.KeyVersion k1 = kpExt.decryptEncryptedKey(ek1)-->Line_90 $$ Assert.assertEquals(KeyProviderCryptoExtension.EK, k1.getVersionName())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_146 $$ Assert.assertEquals(new Text("kms-dt"), credentials.getToken(SecurityUtil.buildTokenService(kmsAddr)).getKind())[ CD ]
Line_42 $$ KeyProvider.KeyVersion kv2 = kp.rollNewVersion("k1")-->Line_63 $$ Assert.assertEquals(kv2.getVersionName(), lkv2.get(1).getVersionName())[ FD ]
Line_45 $$ kv2 = kp.getKeyVersion(kv2.getVersionName())-->Line_48 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_17 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_19 $$ options.setBitLength(128)[ FD ]
Line_21 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_40 $$ Assert.assertEquals(kv0.getVersionName(), lkv1.get(0).getVersionName())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_27 $$ Assert.assertNotNull(kv1.getMaterial())[ CD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_103 $$ Assert.assertNull(kp.getKeyVersions("k1"))[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_106 $$ Assert.assertEquals(0, kp.getKeysMetadata().length)[ CD ]
Line_132 $$ options = new KeyProvider.Options(conf)-->Line_134 $$ options.setBitLength(128)[ FD ]
Line_42 $$ KeyProvider.KeyVersion kv2 = kp.rollNewVersion("k1")-->Line_45 $$ kv2 = kp.getKeyVersion(kv2.getVersionName())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_96 $$ boolean isEq = true[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_125 $$ options.setCipher("AES/CTR/NoPadding")[ CD ]
Line_2 $$ public void testKMSProvider() throws Exception -->Line_5 $$ UserGroupInformation.setConfiguration(conf)[ CD ]
Line_107 $$ options = new KeyProvider.Options(conf)-->Line_117 $$ options.setDescription("d")[ FD ]
Line_65 $$ KeyProvider.Metadata m2 = kp.getMetadata("k1")-->Line_68 $$ Assert.assertEquals(128, m2.getBitLength())[ FD ]
Line_95 $$ KeyProvider.KeyVersion k2 = kpExt.decryptEncryptedKey(ek2)-->Line_98 $$ isEq = k2.getMaterial()[i] == k1.getMaterial()[i][ FD ]
Line_17 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_115 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_131 $$ Assert.assertEquals(attributes, meta.getAttributes())[ CD ]
Line_96 $$ boolean isEq = true-->Line_97 $$ for (int i = 0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) [ FD ]
Line_65 $$ KeyProvider.Metadata m2 = kp.getMetadata("k1")-->Line_69 $$ Assert.assertEquals(2, m2.getVersions())[ FD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_141 $$ KeyProviderDelegationTokenExtension kpdte = KeyProviderDelegationTokenExtension.createKeyProviderDelegationTokenExtension(kp)[ FD ]
Line_17 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_117 $$ options.setDescription("d")[ FD ]
Line_107 $$ options = new KeyProvider.Options(conf)-->Line_127 $$ options.setAttributes(attributes)[ FD ]
Line_59 $$ List<KeyProvider.KeyVersion> lkv2 = kp.getKeyVersions("k1")-->Line_64 $$ Assert.assertNotNull(lkv2.get(1).getMaterial())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_85 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_82 $$ Assert.assertTrue(started.before(kms1[0].getCreated()))[ CD ]
Line_85 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())-->Line_86 $$ Assert.assertEquals(KeyProviderCryptoExtension.EEK, ek1.getEncryptedKeyVersion().getVersionName())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_21 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)[ CD ]
Line_114 $$ options = new KeyProvider.Options(conf)-->Line_117 $$ options.setDescription("d")[ FD ]
Line_129 $$ meta = kp.getMetadata("k4")-->Line_139 $$ Assert.assertEquals("d", meta.getDescription())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_137 $$ kp.createKey("k5", options)[ CD ]
Line_17 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_135 $$ options.setDescription("d")[ FD ]
Line_51 $$ KeyProvider.KeyVersion cv2 = kp.getCurrentKey("k1")-->Line_52 $$ Assert.assertEquals(kv2.getVersionName(), cv2.getVersionName())[ FD ]
Line_129 $$ meta = kp.getMetadata("k4")-->Line_130 $$ Assert.assertNull(meta.getDescription())[ FD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_15 $$ Assert.assertTrue(kp.getKeys().isEmpty())[ FD ]
Line_124 $$ options = new KeyProvider.Options(conf)-->Line_133 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_114 $$ options = new KeyProvider.Options(conf)-->Line_135 $$ options.setDescription("d")[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_95 $$ KeyProvider.KeyVersion k2 = kpExt.decryptEncryptedKey(ek2)[ CD ]
Line_107 $$ options = new KeyProvider.Options(conf)-->Line_132 $$ options = new KeyProvider.Options(conf)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_102 $$ Assert.assertNull(kp.getKeyVersion("k1"))[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)[ CD ]
Line_83 $$ KeyProvider.KeyVersion kv = kp.getCurrentKey("k1")-->Line_85 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())[ FD ]
Line_124 $$ options = new KeyProvider.Options(conf)-->Line_126 $$ options.setBitLength(128)[ FD ]
Line_42 $$ KeyProvider.KeyVersion kv2 = kp.rollNewVersion("k1")-->Line_44 $$ Assert.assertNotNull(kv2.getMaterial())[ FD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_16 $$ Assert.assertEquals(0, kp.getKeysMetadata().length)[ FD ]
Line_65 $$ KeyProvider.Metadata m2 = kp.getMetadata("k1")-->Line_67 $$ Assert.assertEquals("AES", m2.getAlgorithm())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_116 $$ options.setBitLength(128)[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_8 $$ writeConf(confDir, conf)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_75 $$ KeyProvider.Metadata[] kms1 = kp.getKeysMetadata("k1")[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_135 $$ options.setDescription("d")[ CD ]
Line_107 $$ options = new KeyProvider.Options(conf)-->Line_136 $$ options.setAttributes(attributes)[ FD ]
Line_47 $$ for (int i = 0; i < kv1.getMaterial().length; i++) -->Line_97 $$ for (int i = 0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) [ FD ]
Line_11 $$ Date started = new Date()-->Line_71 $$ Assert.assertTrue(started.before(m2.getCreated()))[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_11 $$ Date started = new Date()[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_121 $$ Assert.assertTrue(meta.getAttributes().isEmpty())[ CD ]
Line_114 $$ options = new KeyProvider.Options(conf)-->Line_134 $$ options.setBitLength(128)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_111 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")[ CD ]
Line_42 $$ KeyProvider.KeyVersion kv2 = kp.rollNewVersion("k1")-->Line_56 $$ eq = eq && cv2.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_59 $$ List<KeyProvider.KeyVersion> lkv2 = kp.getKeyVersions("k1")[ CD ]
Line_46 $$ boolean eq = true-->Line_48 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_119 $$ meta = kp.getMetadata("k3")[ CD ]
Line_21 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_25 $$ KeyProvider.KeyVersion kv1 = kp.getKeyVersion(kv0.getVersionName())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_129 $$ meta = kp.getMetadata("k4")[ CD ]
Line_114 $$ options = new KeyProvider.Options(conf)-->Line_128 $$ kp.createKey("k4", options)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_114 $$ options = new KeyProvider.Options(conf)[ CD ]
Line_48 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i]-->Line_54 $$ eq = true[ FD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_137 $$ kp.createKey("k5", options)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_76 $$ Assert.assertEquals(1, kms1.length)[ CD ]
Line_21 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_43 $$ Assert.assertNotSame(kv0.getVersionName(), kv2.getVersionName())[ FD ]
Line_45 $$ kv2 = kp.getKeyVersion(kv2.getVersionName())-->Line_63 $$ Assert.assertEquals(kv2.getVersionName(), lkv2.get(1).getVersionName())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_140 $$ Assert.assertEquals(attributes, meta.getAttributes())[ CD ]
Line_111 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_113 $$ Assert.assertTrue(meta.getAttributes().isEmpty())[ FD ]
Line_17 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_136 $$ options.setAttributes(attributes)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_112 $$ Assert.assertNull(meta.getDescription())[ CD ]
Line_17 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_114 $$ options = new KeyProvider.Options(conf)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_115 $$ options.setCipher("AES/CTR/NoPadding")[ CD ]
Line_17 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_134 $$ options.setBitLength(128)[ FD ]
Line_122 $$ Map<String, String> attributes = new HashMap<String, String>()-->Line_140 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_124 $$ options = new KeyProvider.Options(conf)-->Line_132 $$ options = new KeyProvider.Options(conf)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_4 $$ conf.set("hadoop.security.authentication", "kerberos")[ FD ]
Line_142 $$ Credentials credentials = new Credentials()-->Line_144 $$ Assert.assertEquals(1, credentials.getAllTokens().size())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_63 $$ Assert.assertEquals(kv2.getVersionName(), lkv2.get(1).getVersionName())[ CD ]
Line_84 $$ KeyProviderCryptoExtension kpExt = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)-->Line_94 $$ EncryptedKeyVersion ek2 = kpExt.generateEncryptedKey(kv.getName())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_123 $$ attributes.put("a", "A")[ CD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_38 $$ List<KeyProvider.KeyVersion> lkv1 = kp.getKeyVersions("k1")[ FD ]
Line_89 $$ KeyProvider.KeyVersion k1 = kpExt.decryptEncryptedKey(ek1)-->Line_92 $$ Assert.assertArrayEquals(k1.getMaterial(), k1a.getMaterial())[ FD ]
Line_89 $$ KeyProvider.KeyVersion k1 = kpExt.decryptEncryptedKey(ek1)-->Line_93 $$ Assert.assertEquals(kv.getMaterial().length, k1.getMaterial().length)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_38 $$ List<KeyProvider.KeyVersion> lkv1 = kp.getKeyVersions("k1")[ CD ]
Line_46 $$ boolean eq = true-->Line_50 $$ Assert.assertFalse(eq)[ FD ]
Line_114 $$ options = new KeyProvider.Options(conf)-->Line_115 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_65 $$ KeyProvider.Metadata m2 = kp.getMetadata("k1")[ FD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_75 $$ KeyProvider.Metadata[] kms1 = kp.getKeysMetadata("k1")[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_128 $$ kp.createKey("k4", options)[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_29 $$ Assert.assertEquals(kv0.getVersionName(), cv1.getVersionName())[ CD ]
Line_51 $$ KeyProvider.KeyVersion cv2 = kp.getCurrentKey("k1")-->Line_53 $$ Assert.assertNotNull(cv2.getMaterial())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_147 $$ return null[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_117 $$ options.setDescription("d")[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_80 $$ Assert.assertEquals(2, kms1[0].getVersions())[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_67 $$ Assert.assertEquals("AES", m2.getAlgorithm())[ CD ]
Line_132 $$ options = new KeyProvider.Options(conf)-->Line_136 $$ options.setAttributes(attributes)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_145 $$ InetSocketAddress kmsAddr = new InetSocketAddress(getKMSUrl().getHost(), getKMSUrl().getPort())[ CD ]
Line_91 $$ KeyProvider.KeyVersion k1a = kpExt.decryptEncryptedKey(ek1)-->Line_92 $$ Assert.assertArrayEquals(k1.getMaterial(), k1a.getMaterial())[ FD ]
Line_119 $$ meta = kp.getMetadata("k3")-->Line_120 $$ Assert.assertEquals("d", meta.getDescription())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_13 $$ URI uri = createKMSUri(getKMSUrl())[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_84 $$ KeyProviderCryptoExtension kpExt = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)[ CD ]
Line_31 $$ KeyProvider.Metadata m1 = kp.getMetadata("k1")-->Line_35 $$ Assert.assertEquals(1, m1.getVersions())[ FD ]
Line_42 $$ KeyProvider.KeyVersion kv2 = kp.rollNewVersion("k1")-->Line_52 $$ Assert.assertEquals(kv2.getVersionName(), cv2.getVersionName())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_90 $$ Assert.assertEquals(KeyProviderCryptoExtension.EK, k1.getVersionName())[ CD ]
Line_45 $$ kv2 = kp.getKeyVersion(kv2.getVersionName())-->Line_52 $$ Assert.assertEquals(kv2.getVersionName(), cv2.getVersionName())[ FD ]
Line_17 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_108 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_59 $$ List<KeyProvider.KeyVersion> lkv2 = kp.getKeyVersions("k1")-->Line_62 $$ Assert.assertNotNull(lkv2.get(0).getMaterial())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_24 $$ Assert.assertNotNull(kv0.getMaterial())[ CD ]
Line_25 $$ KeyProvider.KeyVersion kv1 = kp.getKeyVersion(kv0.getVersionName())-->Line_26 $$ Assert.assertEquals(kv0.getVersionName(), kv1.getVersionName())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_50 $$ Assert.assertFalse(eq)[ CD ]
Line_107 $$ options = new KeyProvider.Options(conf)-->Line_109 $$ options.setBitLength(128)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_94 $$ EncryptedKeyVersion ek2 = kpExt.generateEncryptedKey(kv.getName())[ CD ]
Line_42 $$ KeyProvider.KeyVersion kv2 = kp.rollNewVersion("k1")-->Line_43 $$ Assert.assertNotSame(kv0.getVersionName(), kv2.getVersionName())[ FD ]
Line_114 $$ options = new KeyProvider.Options(conf)-->Line_118 $$ kp.createKey("k3", options)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_55 $$ for (int i = 0; i < kv1.getMaterial().length; i++) [ CD ]
Line_31 $$ KeyProvider.Metadata m1 = kp.getMetadata("k1")-->Line_34 $$ Assert.assertEquals(128, m1.getBitLength())[ FD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_72 $$ List<String> ks1 = kp.getKeys()[ FD ]
Line_85 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())-->Line_89 $$ KeyProvider.KeyVersion k1 = kpExt.decryptEncryptedKey(ek1)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_113 $$ Assert.assertTrue(meta.getAttributes().isEmpty())[ CD ]
Line_119 $$ meta = kp.getMetadata("k3")-->Line_129 $$ meta = kp.getMetadata("k4")[ FD ]
Line_17 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_132 $$ options = new KeyProvider.Options(conf)[ FD ]
Line_124 $$ options = new KeyProvider.Options(conf)-->Line_127 $$ options.setAttributes(attributes)[ FD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_102 $$ Assert.assertNull(kp.getKeyVersion("k1"))[ FD ]
Line_138 $$ meta = kp.getMetadata("k5")-->Line_139 $$ Assert.assertEquals("d", meta.getDescription())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_32 $$ Assert.assertEquals("AES/CTR/NoPadding", m1.getCipher())[ CD ]
Line_84 $$ KeyProviderCryptoExtension kpExt = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)-->Line_85 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_109 $$ options.setBitLength(128)[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_43 $$ Assert.assertNotSame(kv0.getVersionName(), kv2.getVersionName())[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_83 $$ KeyProvider.KeyVersion kv = kp.getCurrentKey("k1")[ CD ]
Line_124 $$ options = new KeyProvider.Options(conf)-->Line_125 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_101 $$ kp.deleteKey("k1")[ CD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_42 $$ KeyProvider.KeyVersion kv2 = kp.rollNewVersion("k1")[ FD ]
Line_21 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_26 $$ Assert.assertEquals(kv0.getVersionName(), kv1.getVersionName())[ FD ]
Line_111 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_120 $$ Assert.assertEquals("d", meta.getDescription())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_79 $$ Assert.assertEquals(128, kms1[0].getBitLength())[ CD ]
Line_119 $$ meta = kp.getMetadata("k3")-->Line_139 $$ Assert.assertEquals("d", meta.getDescription())[ FD ]
Line_107 $$ options = new KeyProvider.Options(conf)-->Line_115 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_70 $$ Assert.assertNotNull(m2.getCreated())[ CD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_83 $$ KeyProvider.KeyVersion kv = kp.getCurrentKey("k1")[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_5 $$ UserGroupInformation.setConfiguration(conf)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_68 $$ Assert.assertEquals(128, m2.getBitLength())[ CD ]
Line_111 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_112 $$ Assert.assertNull(meta.getDescription())[ FD ]
Line_45 $$ kv2 = kp.getKeyVersion(kv2.getVersionName())-->Line_56 $$ eq = eq && cv2.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_119 $$ meta = kp.getMetadata("k3")-->Line_138 $$ meta = kp.getMetadata("k5")[ FD ]
Line_25 $$ KeyProvider.KeyVersion kv1 = kp.getKeyVersion(kv0.getVersionName())-->Line_41 $$ Assert.assertNotNull(kv1.getMaterial())[ FD ]
Line_46 $$ boolean eq = true-->Line_58 $$ Assert.assertTrue(eq)[ FD ]
Line_98 $$ isEq = k2.getMaterial()[i] == k1.getMaterial()[i]-->Line_100 $$ Assert.assertFalse(isEq)[ FD ]
Line_21 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_24 $$ Assert.assertNotNull(kv0.getMaterial())[ FD ]
Line_46 $$ boolean eq = true-->Line_54 $$ eq = true[ FD ]
Line_119 $$ meta = kp.getMetadata("k3")-->Line_121 $$ Assert.assertTrue(meta.getAttributes().isEmpty())[ FD ]
Line_48 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i]-->Line_58 $$ Assert.assertTrue(eq)[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_136 $$ options.setAttributes(attributes)[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_17 $$ KeyProvider.Options options = new KeyProvider.Options(conf)[ CD ]
Line_145 $$ InetSocketAddress kmsAddr = new InetSocketAddress(getKMSUrl().getHost(), getKMSUrl().getPort())-->Line_146 $$ Assert.assertEquals(new Text("kms-dt"), credentials.getToken(SecurityUtil.buildTokenService(kmsAddr)).getKind())[ FD ]
Line_11 $$ Date started = new Date()-->Line_37 $$ Assert.assertTrue(started.before(m1.getCreated()))[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_73 $$ Assert.assertEquals(1, ks1.size())[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_25 $$ KeyProvider.KeyVersion kv1 = kp.getKeyVersion(kv0.getVersionName())[ CD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_58 $$ Assert.assertTrue(eq)[ CD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_84 $$ KeyProviderCryptoExtension kpExt = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)[ FD ]
Line_124 $$ options = new KeyProvider.Options(conf)-->Line_134 $$ options.setBitLength(128)[ FD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_45 $$ kv2 = kp.getKeyVersion(kv2.getVersionName())[ FD ]
Line_17 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_107 $$ options = new KeyProvider.Options(conf)[ FD ]
Line_17 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_128 $$ kp.createKey("k4", options)[ FD ]
Line_65 $$ KeyProvider.Metadata m2 = kp.getMetadata("k1")-->Line_70 $$ Assert.assertNotNull(m2.getCreated())[ FD ]
Line_9 $$ runServer(null, null, confDir, new KMSCallable() -->Line_62 $$ Assert.assertNotNull(lkv2.get(0).getMaterial())[ CD ]
Line_14 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_106 $$ Assert.assertEquals(0, kp.getKeysMetadata().length)[ FD ]
Line_119 $$ meta = kp.getMetadata("k3")-->Line_130 $$ Assert.assertNull(meta.getDescription())[ FD ]
Line_114 $$ options = new KeyProvider.Options(conf)-->Line_124 $$ options = new KeyProvider.Options(conf)[ FD ]
Line_107 $$ options = new KeyProvider.Options(conf)-->Line_133 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_17 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_133 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
