Line_11 $$ boolean array = type.isArray()-->Line_24 $$ addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)[ FD ]
Line_8 $$ List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)-->Line_14 $$ Class<?> candidate = hierarchy.get(i)[ FD ]
Line_13 $$ while (i < hierarchy.size()) -->Line_14 $$ Class<?> candidate = hierarchy.get(i)[ CD ]
Line_9 $$ Set<Class<?>> visited = new HashSet<Class<?>>(20)-->Line_26 $$ addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)[ FD ]
Line_11 $$ boolean array = type.isArray()-->Line_28 $$ addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)[ FD ]
Line_9 $$ Set<Class<?>> visited = new HashSet<Class<?>>(20)-->Line_25 $$ addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited)[ FD ]
Line_8 $$ List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)-->Line_29 $$ addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)[ FD ]
Line_9 $$ Set<Class<?>> visited = new HashSet<Class<?>>(20)-->Line_18 $$ addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)[ FD ]
Line_13 $$ while (i < hierarchy.size()) -->Line_21 $$ i++[ CD ]
Line_13 $$ while (i < hierarchy.size()) -->Line_16 $$ Class<?> superclass = candidate.getSuperclass()[ CD ]
Line_9 $$ Set<Class<?>> visited = new HashSet<Class<?>>(20)-->Line_29 $$ addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)[ FD ]
Line_8 $$ List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)-->Line_26 $$ addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)[ FD ]
Line_13 $$ while (i < hierarchy.size()) -->Line_17 $$ if (superclass != null && superclass != Object.class && superclass != Enum.class) [ CD ]
Line_12 $$ int i = 0-->Line_13 $$ while (i < hierarchy.size()) [ FD ]
Line_14 $$ Class<?> candidate = hierarchy.get(i)-->Line_20 $$ addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)[ FD ]
Line_15 $$ candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))-->Line_18 $$ addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)[ FD ]
Line_13 $$ while (i < hierarchy.size()) -->Line_20 $$ addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)[ CD ]
Line_8 $$ List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)-->Line_24 $$ addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)[ FD ]
Line_12 $$ int i = 0-->Line_21 $$ i++[ FD ]
Line_9 $$ Set<Class<?>> visited = new HashSet<Class<?>>(20)-->Line_24 $$ addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)[ FD ]
Line_13 $$ while (i < hierarchy.size()) -->Line_15 $$ candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))[ CD ]
Line_17 $$ if (superclass != null && superclass != Object.class && superclass != Enum.class) -->Line_18 $$ addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)[ CD ]
Line_23 $$ if (Enum.class.isAssignableFrom(type)) -->Line_24 $$ addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)[ CD ]
Line_14 $$ Class<?> candidate = hierarchy.get(i)-->Line_18 $$ addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)[ FD ]
Line_9 $$ Set<Class<?>> visited = new HashSet<Class<?>>(20)-->Line_10 $$ addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)[ FD ]
Line_23 $$ if (Enum.class.isAssignableFrom(type)) -->Line_26 $$ addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)[ CD ]
Line_8 $$ List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)-->Line_10 $$ addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)[ FD ]
Line_9 $$ Set<Class<?>> visited = new HashSet<Class<?>>(20)-->Line_28 $$ addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)[ FD ]
Line_8 $$ List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)-->Line_20 $$ addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)[ FD ]
Line_15 $$ candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))-->Line_20 $$ addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)[ FD ]
Line_12 $$ int i = 0-->Line_14 $$ Class<?> candidate = hierarchy.get(i)[ FD ]
Line_15 $$ candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))-->Line_16 $$ Class<?> superclass = candidate.getSuperclass()[ FD ]
Line_11 $$ boolean array = type.isArray()-->Line_26 $$ addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)[ FD ]
Line_14 $$ Class<?> candidate = hierarchy.get(i)-->Line_16 $$ Class<?> superclass = candidate.getSuperclass()[ FD ]
Line_14 $$ Class<?> candidate = hierarchy.get(i)-->Line_15 $$ candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))[ FD ]
Line_8 $$ List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)-->Line_13 $$ while (i < hierarchy.size()) [ FD ]
Line_11 $$ boolean array = type.isArray()-->Line_20 $$ addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)[ FD ]
Line_11 $$ boolean array = type.isArray()-->Line_18 $$ addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)[ FD ]
Line_8 $$ List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)-->Line_25 $$ addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited)[ FD ]
Line_8 $$ List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)-->Line_18 $$ addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)[ FD ]
Line_9 $$ Set<Class<?>> visited = new HashSet<Class<?>>(20)-->Line_20 $$ addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)[ FD ]
Line_23 $$ if (Enum.class.isAssignableFrom(type)) -->Line_25 $$ addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited)[ CD ]
Line_8 $$ List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)-->Line_28 $$ addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)[ FD ]
