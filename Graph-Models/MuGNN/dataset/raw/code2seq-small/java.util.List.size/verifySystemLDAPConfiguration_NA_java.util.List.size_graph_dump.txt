Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_14 $$ dictionary.put(LDAPConstants.ERROR_PASSWORD_NOT_CHANGEABLE, _prefsProps.getString(companyId, LegacyLDAPPropsKeys.LDAP_ERROR_PASSWORD_NOT_CHANGEABLE, "not allowed to change"))[ CD ]
Line_3 $$ Dictionary<String, Object> dictionary = new HashMapDictionary()-->Line_20 $$ dictionary.put(LDAPConstants.RANGE_SIZE, _prefsProps.getInteger(companyId, LegacyLDAPPropsKeys.LDAP_RANGE_SIZE, 1000))[ FD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_20 $$ dictionary.put(LDAPConstants.RANGE_SIZE, _prefsProps.getInteger(companyId, LegacyLDAPPropsKeys.LDAP_RANGE_SIZE, 1000))[ FD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_3 $$ Dictionary<String, Object> dictionary = new HashMapDictionary()[ CD ]
Line_3 $$ Dictionary<String, Object> dictionary = new HashMapDictionary()-->Line_25 $$ _systemLDAPConfigurationProvider.updateProperties(companyId, dictionary)[ FD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_5 $$ List<String> connectionPropertiesList = new ArrayList(connectionProperties.size())[ CD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_16 $$ dictionary.put(LDAPConstants.ERROR_PASSWORD_TRIVIAL, _prefsProps.getString(companyId, LegacyLDAPPropsKeys.LDAP_ERROR_PASSWORD_TRIVIAL, "trivial"))[ FD ]
Line_7 $$ String connectionPropertyString = entry.getKey() + StringPool.EQUAL + entry.getValue()-->Line_8 $$ connectionPropertiesList.add(connectionPropertyString)[ FD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_18 $$ dictionary.put(LDAPConstants.FACTORY_INITIAL, _prefsProps.getString(companyId, LegacyLDAPPropsKeys.LDAP_FACTORY_INITIAL, "com.sun.jndi.ldap.LdapCtxFactory"))[ CD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_10 $$ dictionary.put(LDAPConstants.CONNECTION_PROPERTIES, connectionPropertiesList.toArray(new String[connectionPropertiesList.size()]))[ CD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_12 $$ dictionary.put(LDAPConstants.ERROR_PASSWORD_EXPIRED, _prefsProps.getString(companyId, LegacyLDAPPropsKeys.LDAP_ERROR_PASSWORD_EXPIRED, "expired"))[ FD ]
Line_3 $$ Dictionary<String, Object> dictionary = new HashMapDictionary()-->Line_15 $$ dictionary.put(LDAPConstants.ERROR_PASSWORD_SYNTAX, _prefsProps.getString(companyId, LegacyLDAPPropsKeys.LDAP_ERROR_PASSWORD_SYNTAX, "syntax"))[ FD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_16 $$ dictionary.put(LDAPConstants.ERROR_PASSWORD_TRIVIAL, _prefsProps.getString(companyId, LegacyLDAPPropsKeys.LDAP_ERROR_PASSWORD_TRIVIAL, "trivial"))[ CD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_14 $$ dictionary.put(LDAPConstants.ERROR_PASSWORD_NOT_CHANGEABLE, _prefsProps.getString(companyId, LegacyLDAPPropsKeys.LDAP_ERROR_PASSWORD_NOT_CHANGEABLE, "not allowed to change"))[ FD ]
Line_5 $$ List<String> connectionPropertiesList = new ArrayList(connectionProperties.size())-->Line_10 $$ dictionary.put(LDAPConstants.CONNECTION_PROPERTIES, connectionPropertiesList.toArray(new String[connectionPropertiesList.size()]))[ FD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_19 $$ dictionary.put(LDAPConstants.PAGE_SIZE, _prefsProps.getInteger(companyId, LegacyLDAPPropsKeys.LDAP_PAGE_SIZE, 1000))[ FD ]
Line_3 $$ Dictionary<String, Object> dictionary = new HashMapDictionary()-->Line_14 $$ dictionary.put(LDAPConstants.ERROR_PASSWORD_NOT_CHANGEABLE, _prefsProps.getString(companyId, LegacyLDAPPropsKeys.LDAP_ERROR_PASSWORD_NOT_CHANGEABLE, "not allowed to change"))[ FD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_17 $$ dictionary.put(LDAPConstants.ERROR_USER_LOCKOUT, _prefsProps.getString(companyId, LegacyLDAPPropsKeys.LDAP_ERROR_USER_LOCKOUT, "retry limit"))[ FD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_21 $$ dictionary.put(LDAPConstants.REFERRAL, _prefsProps.getString(companyId, LegacyLDAPPropsKeys.LDAP_REFERRAL, "follow"))[ CD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_17 $$ dictionary.put(LDAPConstants.ERROR_USER_LOCKOUT, _prefsProps.getString(companyId, LegacyLDAPPropsKeys.LDAP_ERROR_USER_LOCKOUT, "retry limit"))[ CD ]
Line_3 $$ Dictionary<String, Object> dictionary = new HashMapDictionary()-->Line_13 $$ dictionary.put(LDAPConstants.ERROR_PASSWORD_HISTORY, _prefsProps.getString(companyId, LegacyLDAPPropsKeys.LDAP_ERROR_PASSWORD_HISTORY, "history"))[ FD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_11 $$ dictionary.put(LDAPConstants.ERROR_PASSWORD_AGE, _prefsProps.getString(companyId, LegacyLDAPPropsKeys.LDAP_ERROR_PASSWORD_AGE, "age"))[ CD ]
Line_3 $$ Dictionary<String, Object> dictionary = new HashMapDictionary()-->Line_10 $$ dictionary.put(LDAPConstants.CONNECTION_PROPERTIES, connectionPropertiesList.toArray(new String[connectionPropertiesList.size()]))[ FD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_20 $$ dictionary.put(LDAPConstants.RANGE_SIZE, _prefsProps.getInteger(companyId, LegacyLDAPPropsKeys.LDAP_RANGE_SIZE, 1000))[ CD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_25 $$ _systemLDAPConfigurationProvider.updateProperties(companyId, dictionary)[ CD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_18 $$ dictionary.put(LDAPConstants.FACTORY_INITIAL, _prefsProps.getString(companyId, LegacyLDAPPropsKeys.LDAP_FACTORY_INITIAL, "com.sun.jndi.ldap.LdapCtxFactory"))[ FD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_15 $$ dictionary.put(LDAPConstants.ERROR_PASSWORD_SYNTAX, _prefsProps.getString(companyId, LegacyLDAPPropsKeys.LDAP_ERROR_PASSWORD_SYNTAX, "syntax"))[ CD ]
Line_3 $$ Dictionary<String, Object> dictionary = new HashMapDictionary()-->Line_12 $$ dictionary.put(LDAPConstants.ERROR_PASSWORD_EXPIRED, _prefsProps.getString(companyId, LegacyLDAPPropsKeys.LDAP_ERROR_PASSWORD_EXPIRED, "expired"))[ FD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_22 $$ if (_log.isInfoEnabled()) [ CD ]
Line_4 $$ Properties connectionProperties = _props.getProperties(LegacyLDAPPropsKeys.LDAP_CONNECTION_PROPERTY_PREFIX, true)-->Line_5 $$ List<String> connectionPropertiesList = new ArrayList(connectionProperties.size())[ FD ]
Line_3 $$ Dictionary<String, Object> dictionary = new HashMapDictionary()-->Line_17 $$ dictionary.put(LDAPConstants.ERROR_USER_LOCKOUT, _prefsProps.getString(companyId, LegacyLDAPPropsKeys.LDAP_ERROR_USER_LOCKOUT, "retry limit"))[ FD ]
Line_5 $$ List<String> connectionPropertiesList = new ArrayList(connectionProperties.size())-->Line_8 $$ connectionPropertiesList.add(connectionPropertyString)[ FD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_12 $$ dictionary.put(LDAPConstants.ERROR_PASSWORD_EXPIRED, _prefsProps.getString(companyId, LegacyLDAPPropsKeys.LDAP_ERROR_PASSWORD_EXPIRED, "expired"))[ CD ]
Line_4 $$ Properties connectionProperties = _props.getProperties(LegacyLDAPPropsKeys.LDAP_CONNECTION_PROPERTY_PREFIX, true)-->Line_6 $$ for (Map.Entry entry : connectionProperties.entrySet()) [ FD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_21 $$ dictionary.put(LDAPConstants.REFERRAL, _prefsProps.getString(companyId, LegacyLDAPPropsKeys.LDAP_REFERRAL, "follow"))[ FD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_11 $$ dictionary.put(LDAPConstants.ERROR_PASSWORD_AGE, _prefsProps.getString(companyId, LegacyLDAPPropsKeys.LDAP_ERROR_PASSWORD_AGE, "age"))[ FD ]
Line_3 $$ Dictionary<String, Object> dictionary = new HashMapDictionary()-->Line_19 $$ dictionary.put(LDAPConstants.PAGE_SIZE, _prefsProps.getInteger(companyId, LegacyLDAPPropsKeys.LDAP_PAGE_SIZE, 1000))[ FD ]
Line_3 $$ Dictionary<String, Object> dictionary = new HashMapDictionary()-->Line_11 $$ dictionary.put(LDAPConstants.ERROR_PASSWORD_AGE, _prefsProps.getString(companyId, LegacyLDAPPropsKeys.LDAP_ERROR_PASSWORD_AGE, "age"))[ FD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_19 $$ dictionary.put(LDAPConstants.PAGE_SIZE, _prefsProps.getInteger(companyId, LegacyLDAPPropsKeys.LDAP_PAGE_SIZE, 1000))[ CD ]
Line_3 $$ Dictionary<String, Object> dictionary = new HashMapDictionary()-->Line_16 $$ dictionary.put(LDAPConstants.ERROR_PASSWORD_TRIVIAL, _prefsProps.getString(companyId, LegacyLDAPPropsKeys.LDAP_ERROR_PASSWORD_TRIVIAL, "trivial"))[ FD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_13 $$ dictionary.put(LDAPConstants.ERROR_PASSWORD_HISTORY, _prefsProps.getString(companyId, LegacyLDAPPropsKeys.LDAP_ERROR_PASSWORD_HISTORY, "history"))[ FD ]
Line_3 $$ Dictionary<String, Object> dictionary = new HashMapDictionary()-->Line_18 $$ dictionary.put(LDAPConstants.FACTORY_INITIAL, _prefsProps.getString(companyId, LegacyLDAPPropsKeys.LDAP_FACTORY_INITIAL, "com.sun.jndi.ldap.LdapCtxFactory"))[ FD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_15 $$ dictionary.put(LDAPConstants.ERROR_PASSWORD_SYNTAX, _prefsProps.getString(companyId, LegacyLDAPPropsKeys.LDAP_ERROR_PASSWORD_SYNTAX, "syntax"))[ FD ]
Line_3 $$ Dictionary<String, Object> dictionary = new HashMapDictionary()-->Line_21 $$ dictionary.put(LDAPConstants.REFERRAL, _prefsProps.getString(companyId, LegacyLDAPPropsKeys.LDAP_REFERRAL, "follow"))[ FD ]
Line_6 $$ for (Map.Entry entry : connectionProperties.entrySet()) -->Line_7 $$ String connectionPropertyString = entry.getKey() + StringPool.EQUAL + entry.getValue()[ FD ]
Line_22 $$ if (_log.isInfoEnabled()) -->Line_23 $$ _log.info("Adding system LDAP configurations for company " + companyId + " with properties: " + dictionary)[ CD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_4 $$ Properties connectionProperties = _props.getProperties(LegacyLDAPPropsKeys.LDAP_CONNECTION_PROPERTY_PREFIX, true)[ CD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_13 $$ dictionary.put(LDAPConstants.ERROR_PASSWORD_HISTORY, _prefsProps.getString(companyId, LegacyLDAPPropsKeys.LDAP_ERROR_PASSWORD_HISTORY, "history"))[ CD ]
Line_2 $$ protected void verifySystemLDAPConfiguration(long companyId) -->Line_25 $$ _systemLDAPConfigurationProvider.updateProperties(companyId, dictionary)[ FD ]
