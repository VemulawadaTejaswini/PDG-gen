Line_2 $$ public void testCountersWithSpeculation() -->Line_9 $$ scheduleTaskAttempt(taskId)[ CD ]
Line_2 $$ public void testCountersWithSpeculation() -->Line_21 $$ specAttempt.setCounters(specAttemptCounters)[ CD ]
Line_2 $$ public void testCountersWithSpeculation() -->Line_23 $$ specAttempt.setProgress(1.0f)[ CD ]
Line_2 $$ public void testCountersWithSpeculation() -->Line_17 $$ assertEquals(2, taskAttempts.size())[ CD ]
Line_2 $$ public void testCountersWithSpeculation() -->Line_11 $$ updateLastAttemptState(TaskAttemptState.RUNNING)[ CD ]
Line_2 $$ public void testCountersWithSpeculation() -->Line_20 $$ cpuCounter.setValue(1000)[ CD ]
Line_2 $$ public void testCountersWithSpeculation() -->Line_24 $$ specAttempt.setState(TaskAttemptState.SUCCEEDED)[ CD ]
Line_2 $$ public void testCountersWithSpeculation() -->Line_8 $$ TaskId taskId = getNewTaskID()[ CD ]
Line_2 $$ public void testCountersWithSpeculation() -->Line_14 $$ launchTaskAttempt(getLastAttempt().getAttemptId())[ CD ]
Line_2 $$ public void testCountersWithSpeculation() -->Line_25 $$ mockTask.handle(new TaskTAttemptEvent(specAttempt.getAttemptId(), TaskEventType.T_ATTEMPT_SUCCEEDED))[ CD ]
Line_2 $$ public void testCountersWithSpeculation() -->Line_27 $$ baseAttempt.setProgress(1.0f)[ CD ]
Line_2 $$ public void testCountersWithSpeculation() -->Line_22 $$ commitTaskAttempt(specAttempt.getAttemptId())[ CD ]
Line_2 $$ public void testCountersWithSpeculation() -->Line_16 $$ MockTaskAttemptImpl specAttempt = getLastAttempt()[ CD ]
Line_2 $$ public void testCountersWithSpeculation() -->Line_10 $$ launchTaskAttempt(getLastAttempt().getAttemptId())[ CD ]
Line_2 $$ public void testCountersWithSpeculation() -->Line_12 $$ MockTaskAttemptImpl baseAttempt = getLastAttempt()[ CD ]
Line_2 $$ public void testCountersWithSpeculation() -->Line_26 $$ assertEquals(TaskState.SUCCEEDED, mockTask.getState())[ CD ]
Line_2 $$ public void testCountersWithSpeculation() -->Line_19 $$ Counter cpuCounter = specAttemptCounters.findCounter(TaskCounter.CPU_MILLISECONDS)[ CD ]
Line_2 $$ public void testCountersWithSpeculation() -->Line_28 $$ Counters taskCounters = mockTask.getCounters()[ CD ]
Line_2 $$ public void testCountersWithSpeculation() -->Line_15 $$ updateLastAttemptState(TaskAttemptState.RUNNING)[ CD ]
Line_3 $$ mockTask = new MockTaskImpl(jobId, partition, dispatcher.getEventHandler(), remoteJobConfFile, conf, taskAttemptListener, jobToken, credentials, clock, startCount, metrics, appContext, TaskType.MAP) -->Line_5 $$ return 1[ CD ]
Line_2 $$ public void testCountersWithSpeculation() -->Line_29 $$ assertEquals("wrong counters for task", specAttemptCounters, taskCounters)[ CD ]
Line_2 $$ public void testCountersWithSpeculation() -->Line_13 $$ mockTask.handle(new TaskTAttemptEvent(getLastAttempt().getAttemptId(), TaskEventType.T_ADD_SPEC_ATTEMPT))[ CD ]
