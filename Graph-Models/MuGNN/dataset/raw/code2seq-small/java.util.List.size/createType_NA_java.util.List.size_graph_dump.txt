Line_2 $$ public RowType createType(List<Type> types, List<Object> literals) -->Line_3 $$ checkArgument(!types.isEmpty(), "types is empty")[ FD ]
Line_2 $$ public RowType createType(List<Type> types, List<Object> literals) -->Line_8 $$ ImmutableList.Builder<String> builder = ImmutableList.builder()[ CD ]
Line_9 $$ for (Object literal : literals) -->Line_10 $$ builder.add(checkType(literal, String.class, "literal"))[ FD ]
Line_8 $$ ImmutableList.Builder<String> builder = ImmutableList.builder()-->Line_10 $$ builder.add(checkType(literal, String.class, "literal"))[ FD ]
Line_4 $$ if (literals.isEmpty()) -->Line_5 $$ return new RowType(types, Optional.empty())[ CD ]
Line_2 $$ public RowType createType(List<Type> types, List<Object> literals) -->Line_3 $$ checkArgument(!types.isEmpty(), "types is empty")[ CD ]
Line_2 $$ public RowType createType(List<Type> types, List<Object> literals) -->Line_7 $$ checkArgument(types.size() == literals.size(), "types and literals must be matched in size")[ CD ]
Line_2 $$ public RowType createType(List<Type> types, List<Object> literals) -->Line_12 $$ return new RowType(types, Optional.of(builder.build()))[ CD ]
Line_2 $$ public RowType createType(List<Type> types, List<Object> literals) -->Line_4 $$ if (literals.isEmpty()) [ FD ]
Line_8 $$ ImmutableList.Builder<String> builder = ImmutableList.builder()-->Line_12 $$ return new RowType(types, Optional.of(builder.build()))[ FD ]
Line_2 $$ public RowType createType(List<Type> types, List<Object> literals) -->Line_4 $$ if (literals.isEmpty()) [ CD ]
Line_2 $$ public RowType createType(List<Type> types, List<Object> literals) -->Line_7 $$ checkArgument(types.size() == literals.size(), "types and literals must be matched in size")[ FD ]
